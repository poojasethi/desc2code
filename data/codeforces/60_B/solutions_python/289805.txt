#!/usr/bin/python

import sys, os
sys.setrecursionlimit(10000)

def readrow():
	return sys.stdin.readline().strip().split(' ')

(k, n, m) = map(int, readrow())
sys.stdin.readline()
p = {}
for layerIndex in range(k):
	layer = []
	for column in range(n):
		for (row, d) in zip(range(m), map(lambda x: x == '.', sys.stdin.readline().strip())):
			p[(layerIndex, column, row)] = d
	sys.stdin.readline()
(tx, ty) = map(int, readrow())
#print(k, n, m)
#print(p)
count = 0
visited = {}
def search(position):
	global count, visited
	if not p.get(position) or visited.get(position): return
	#print(position)
	count += 1
	visited[position] = True
	(l, x, y) = position
	search((l-1, x+0, y+0))
	search((l+1, x+0, y+0))
	search((l+0, x-1, y+0))
	search((l+0, x+1, y+0))
	search((l+0, x+0, y-1))
	search((l+0, x+0, y+1))

search((0, tx-1, ty-1))
print(count)

	