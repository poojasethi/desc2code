import sys
import numpy as np

if __name__ == '__main__':
    ### Read the Input
    line = raw_input().split()
    k, n, m = map(int, line)
    raw_input()

    para = np.empty((k, n, m), dtype=object)

    for l in range(k):
        for i in range(n):
            para[l, i, :] = list(raw_input())
        raw_input()
    
    line = raw_input().split()
    x, y = map(int, line)

    ### BFS to Find the Anchor Point

    from collections import deque

    frontier, explored = deque(), set()
    frontier.appendleft((0, x-1, y-1))

    while frontier:
        level, x, y = frontier.pop()
        explored.add((level, x, y))
        
        # Add all adjacent cells to frontier
        #
        # Above
        if (max(0, level-1), x, y) not in explored and para[max(0, level-1), x, y] == '.':
            frontier.append((max(0, level-1), x, y))
        
        # Below
        if (min(k-1, level+1), x, y) not in explored and para[min(k-1, level+1), x, y] == '.':
            frontier.append((min(k-1, level+1), x, y))
        
        # Up
        if (level, max(0, x-1), y) not in explored and para[level, max(0, x-1), y] == '.':
            frontier.append((level, max(0, x-1), y))
            
        # Down
        if (level, min(n-1, x+1), y) not in explored and para[level, min(n-1, x+1), y] == '.':
            frontier.append((level, min(n-1, x+1), y))
            
        # Left
        if (level, x, max(0, y-1)) not in explored and para[level, x, max(0, y-1)] == '.':
            frontier.append((level, x, max(0, y-1)))
            
        # Right
        if (level, x, min(m-1, y+1)) not in explored and para[level, x, min(m-1, y+1)] == '.':
            frontier.append((level, x, min(m-1, y+1)))

    print(len(explored))
