offsets = [(-1, 0, 0), (1,0,0), (0,-1,0), (0,1,0), (0,0,-1), (0,0,1)]
adjacent_coords = {}
visited_coords = {}

k, n, m = map(int, raw_input().strip().split())
raw_input()

def valid_point(x, y, z):
	global k, n, m
	return x in range(k) and y in range(n) and z in range(m)

plates = []

for i in range(k):
	current_plate = []
	for j in range(n):
		current_row = [val for val in raw_input().strip()]
		current_plate.append(current_row)
	plates.append(current_plate)
	raw_input()

startx, starty = map(int, raw_input().strip().split())

for x in range(k):
	for y in range(len(plates[x])):
		for z in range(len(plates[x][y])):
			adjacent_coords[(x,y,z)] = []
			for offset in offsets:
				nx, ny, nz = x + offset[0], y + offset[1], z + offset[2]
				if valid_point(nx, ny, nz):
					adjacent_coords[(x,y,z)].append((nx,ny,nz))


stack = []
stack.append((0, startx-1, starty-1))

while stack:
	current = stack.pop()
	visited_coords[current] = True
	for con in adjacent_coords[current]:
		x,y,z = con
		if not (con in visited_coords) and plates[x][y][z] == ".":
			stack.append(con)

print(len(visited_coords.keys()))