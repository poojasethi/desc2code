# -*- coding: UTF-8 -*-

# from itertools import *
# from collections import defaultdict

# def gcd(a,b):
#     while b > 0: a,b = b, a%b
#     return a

# def baseN(num,b,numerals="0123456789abcdefghijklmnopqrstuvwxyz"):
#     return ((num == 0) and  "0" ) or ( baseN(num // b, b).lstrip("0") + numerals[num % b])

# St = raw_input()
T, heigth, junk = map(int, raw_input().split())
raw_input()

avbl = []
was_in = []
cnt = 1
for i in xrange(T):
    data2 = [ raw_input() for p in xrange(heigth) ]
    for u in xrange(len(data2)):
        nav = data2[u]
        for j in xrange(len(nav)):
            if nav[j] == ".":
                avbl.append((i+1)*10000+(u+1)*100+j+1)
    raw_input()

where = map(int, raw_input().split())
where = [10000+where[0]*100+where[1]]
where_t = where[:]
was_in = where[:]
while where:
    where_next = []
    for i in where:
        if (i-10000 in avbl) and (not i-10000 in was_in):
            where_next.append(i-10000)
            was_in.append(i-10000)
        if (i+10000 in avbl) and (not i+10000 in was_in):
            where_next.append(i+10000)
            was_in.append(i+10000)
        if (i-100 in avbl) and (not i-100 in was_in):
            where_next.append(i-100)
            was_in.append(i-100)
        if (i+100 in avbl) and (not i+100 in was_in):
            where_next.append(i+100)
            was_in.append(i+100)
        if (i-1 in avbl) and (not i-1 in was_in):
            where_next.append(i-1)
            was_in.append(i-1)
        if (i+1 in avbl) and (not i+1 in was_in):
            where_next.append(i+1)
            was_in.append(i+1)
    where = where_next[:]
print len(was_in)
