from itertools import permutations as p

K, N, M = map (int, raw_input ().split ())
cube = [[list (raw_input ()) for j in xrange (N + 1)][1:] for i in xrange (K)]
raw_input ()    
s = [0] + map (lambda x: int (x) - 1, raw_input ().split ())

def dfs (i, j, k):
    global res
    cube[i][j][k] = '#'
    res += 1
    for di, dj, dk in list (p ((0, 0, 1))) + list (p ((0, 0, -1))):
        ni, nj, nk = i + di, j + dj, k + dk
        if 0 <= ni < K and 0 <= nj < N and 0 <= nk < M and cube[ni][nj][nk] != '#':
            dfs (ni, nj, nk)

res = 0        
dfs (*s)
print res
