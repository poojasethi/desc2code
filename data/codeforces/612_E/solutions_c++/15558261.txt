#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;
const int N = 1e6 + 10;
int p[N];
bool used[N];
vector <int> g[N];
int q[N];
int n, cnt;
bool cmp(const vector <int> &aa, const vector <int> &bb)
{
	return aa.size() < bb.size();
}
int main()
{
	scanf("%d", &n);
	for(int i = 1; i <= n; ++i)
		scanf("%d", &p[i]);
	for(int i = 1; i <= n; ++i)
		if(!used[i])
		{
			int t = i;
			used[t] = 1;
			++cnt;
			g[cnt].push_back(t);
			while(!used[p[t]])
			{
				t = p[t];
				used[t] = 1;
				g[cnt].push_back(t);
			}
		}
	sort(g + 1, g + 1 + cnt, cmp);
	for(int i = 1; i <= cnt; ++i)
	{
		int sz = g[i].size();
		if(sz & 1)
		{
			int mid = (sz + 1) / 2;
			for(int j = 0; j < sz; ++j)
				q[g[i][(j + mid)% sz]] = p[g[i][j]];
		}
		else
		{
			int sz2 = g[i + 1].size();
			if(sz != sz2)
			{
				puts("-1");
				return 0;
			}
			for(int j = 0; j < sz; ++j)
			{
				q[g[i + 1][j]] = p[g[i][j]];
				q[g[i][j]] = p[g[i + 1][(j + sz - 1) % sz]];
			}
			++i;
		}
	}
	for(int i = 1; i <= n; ++i)
		printf("%d%c", q[i], (i == n ? '\n' : ' '));
	return 0;
}

   							  				      						 	