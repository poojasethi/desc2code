#include<iostream>
#include<vector>
#include<set>
#include<cstdio>
#include<cstdlib>
#include<algorithm>

using namespace std;

const int MN = 1000000;
int a[MN];
int  mark[MN];
int ans[MN];
vector<int> v[MN];
int p[MN];
int t[MN];
bool cmp ( int x, int y )
{
	return v[x].size() < v[y].size();
}

void dfs( int x, int  counter )
{
	if ( mark[x] )
		return;
	v[counter].push_back(x);
	mark[x] = 1;
	dfs(a[x],counter);
}

int main()
{
	int n;
	cin >> n;
	for ( int i = 0; i < n; i++ ){
		scanf("%d" , &a[i]);
		a[i]--;
	}
	int counter = 0;
	for ( int i = 0 ; i < n ; i++ )
		if ( mark[i] == 0 )
		{
			dfs( i, counter );
			counter++;
		}
	for ( int i = 0; i < counter; i++ )
		p[i] = i;
	sort (p,p+counter, cmp);
	for ( int i = 0 ; i < counter ; i++ )
	{
		int x = p[i];
		if ( v[x].size()%2 == 0)
		{
			if ( i == counter-1 )
			{ 
				cout << -1 << endl;
				return 0;
			}
			int y = p[i+1];
			if ( v[x].size() != v[y].size() )
			{
				cout<< -1 << endl;
				return 0;
			}
			for ( int j = 0; j < v[x].size() ; j++ )
			{
				ans[v[x][j]] = v[y][j];
				ans[v[y][j]] = v[x][(j+1)%v[x].size()];
			}
			i++;
		}
		else{
			int temp = 0;
			for ( int j = 0; j < v[x].size() ; j++ )
			{
				t[v[x][(temp)%v[x].size()]] = v[x][j];
				temp +=2;
			}
			for ( int j = 0; j < v[x].size(); j++ )
				ans[t[v[x][j]]] = t[v[x][(j+1)%v[x].size()]];


		}
	}
	for ( int i = 0; i < n; i++ )
		printf("%d ", ans[i]+1);
	cout << endl;
}
