#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstring>
#include <algorithm>
#define gap 500
using namespace std;
typedef long long ll;
struct Node
{
	ll m, p, r, d;
	Node() {}
	Node(ll m, ll p, ll r, ll d) : m(m), p(p), r(r), d(d) {}
};
bool cmpd(const Node& p1, const Node& p2) { return p1.d < p2.d; }
bool cmpm(const Node& p3, const Node& p4) { return p3.m < p4.m; }
Node p[250001];
ll d[250001], l[250001], r[250001];
ll v[250001], q[250001], ans = 0, n, top = 0;
ll SQR(ll x) { return x * x; }
int main( )
{
	ll px, py, x, y;
	scanf("%I64d %I64d %I64d %I64d %I64d", &px, &py, &p[0].p, &p[0].r, &n); p[0].r *= p[0].r;
	for (ll i = 1; i <= n; i ++)
	{
		scanf("%I64d %I64d %I64d %I64d %I64d", &x, &y, &p[i].m, &p[i].p, &p[i].r);
		p[i].r *= p[i].r, p[i].d = SQR(x - px) + SQR(y - py);
	}
	sort(p + 1, p + 1 + n, cmpd);
	for (ll i = 1; i <= n; i += gap)
	{
		++ top; l[top] = i, r[top] = min(i + gap - 1, n);
		d[top] = p[r[top]].d; sort(p + l[top], p + r[top] + 1, cmpm);
	}
	ll h = 0, t = 1;
	while (h < t)
	{
		++ h;
		ll R = p[q[h]].r, P = p[q[h]].p;
		for (ll i = 1; i <= top; i ++)
		{
			if (d[i] > R) 
			{
				for (int j = l[i]; j <= r[i]; j ++)
					if (!v[j] && p[j].d <= R && p[j].m <= P)
						v[j] = 1, q[++ t] = j;
				break;
			}
			while (l[i] <= r[i] && p[l[i]].m <= P)
			{
				if (!v[l[i]]) v[l[i]] = 1, q[++ t] = l[i];
				++ l[i];
			}
		}
	}
	for (ll i = 1; i <= n; i ++)
		if (v[i]) ++ ans;
	printf("%I64d\n", ans);
	return 0;
}
		

	 	  	    					  	 				 	