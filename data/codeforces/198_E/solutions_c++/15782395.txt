#include<bits/stdc++.h>
using namespace std;

struct unit
{int m,p,r;
 long long d;
};
struct unit a[250010];

int n,n1,x,y,p,r,tot;
int head[2000010],sa[500010],q[250010],used[250010];
vector<int> w[2000010];

bool cmp(unit A,unit B)
{return A.d<B.d;
}

long long dis(int x,int y,int x2,int y2)
{return (long long)(x-x2)*(x-x2)+(long long)(y-y2)*(y-y2);
}

void change(int p,int l,int r)
{w[p].push_back(y);	
 if(l==r) return;
 if(x<=(l+r)/2)
 	change(p*2,l,(l+r)/2);
 else
 	change(p*2+1,(l+r)/2+1,r);
}

void query(int p,int l,int r)	
{if(l>x) return;
 if(r<=x)
 {	while(head[p]<w[p].size() && a[w[p][head[p]]].d<=(long long)y*y)
 	{	if(!used[w[p][head[p]]])
 		{	used[w[p][head[p]]]=1;
 			q[++n1]=w[p][head[p]];
 		}
		head[p]++;
	}
	return;
 }
 query(p*2,l,(l+r)/2);
 query(p*2+1,(l+r)/2+1,r);
}

int main()
{int i,j,x2,y2,last;
 
 scanf("%d%d%d%d%d",&x,&y,&p,&r,&n);
 sa[++tot]=p;
 for(i=1;i<=n;i++)
 {	scanf("%d%d%d%d%d",&x2,&y2,&a[i].m,&a[i].p,&a[i].r);
 	a[i].d=dis(x,y,x2,y2);
 	sa[++tot]=a[i].m;
 	sa[++tot]=a[i].p;
 }
 sort(sa+1,sa+tot+1);
 sort(a+1,a+n+1,cmp);	
 for(i=1;i<=n;i++)
 {	a[i].m=lower_bound(sa+1,sa+tot+1,a[i].m)-sa;
 	a[i].p=lower_bound(sa+1,sa+tot+1,a[i].p)-sa;
 }
 p=lower_bound(sa+1,sa+tot+1,p)-sa;
 for(i=1;i<=n;i++)
 {	x=a[i].m;
 	y=i;
 	change(1,1,tot);
 }
 x=p;
 y=r;
 last=1;
 query(1,1,tot);
 while(last<=n1)
 {	x=a[q[last]].p;
 	y=a[q[last]].r;
 	query(1,1,tot);
	last++;
 }
 printf("%d\n",n1);
 return 0;
}