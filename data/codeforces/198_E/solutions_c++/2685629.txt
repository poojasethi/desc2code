#include<cstdio>
#include<algorithm>
using namespace std;
struct node
{
	int P,M;
	long long R,D;
}B[250005];
int N,i,j,l,r,x,y,X,Y,L,ll,rr,mid;
int Q[250005],f[1000005];
int cmp(const node &i,const node &j)
{
	return i.M<j.M;
}
void Build(int t,int l,int r)
{
	int mid=(l+r)/2;
	if(l==r)
	{
		f[t]=l;
		return;
	}
	Build(2*t,l,mid),Build(2*t+1,mid+1,r);
	if(B[f[2*t]].D<B[f[2*t+1]].D) f[t]=f[2*t];
	else f[t]=f[2*t+1];
}
void Modify(int t,int l,int r,int x)
{
	int mid=(l+r)/2;
	if(l==r)
	{
		f[t]=0;
		return;
	}
	if(x<=mid) Modify(2*t,l,mid,x);
	else Modify(2*t+1,mid+1,r,x);
	if(B[f[2*t]].D<B[f[2*t+1]].D) f[t]=f[2*t];
	else f[t]=f[2*t+1];
}
int Query(int t,int l,int r,int ll,int rr,long long x)
{
	int mid=(l+r)/2,f1,f2;
	if(B[f[t]].D>x) return 0;
	if(l==ll&&r==rr) return f[t];
	if(rr<=mid) return Query(2*t,l,mid,ll,rr,x);
	if(ll>mid) return Query(2*t+1,mid+1,r,ll,rr,x);
	f1=Query(2*t,l,mid,ll,mid,x),f2=Query(2*t+1,mid+1,r,mid+1,rr,x);
	if(B[f1].D<B[f2].D) return f1;
	else return f2;
}
int main()
{
	scanf("%d%d%d%I64d%d",&X,&Y,&B[0].P,&B[0].R,&N);
	for(i=1;i<=N;++i)
	{
		scanf("%d%d%d%d%I64d",&x,&y,&B[i].M,&B[i].P,&B[i].R);
		B[i].D=(long long)(X-x)*(long long)(X-x)+(long long)(Y-y)*(long long)(Y-y);
	}
	for(i=0;i<=N;++i) B[i].R=B[i].R*B[i].R;
	sort(B+1,B+N+1,cmp);
	B[0].D=1000000000000000000ll;
	Build(1,1,N);
	for(l=-1,r=0;l<r;)
	{
		i=Q[++l];
		for(ll=1,rr=N;ll<rr;)
		{
			mid=(ll+rr+1)/2;
			if(B[mid].M<=B[i].P) ll=mid;
			else rr=mid-1;
		}
		L=(ll+rr+1)/2;
		for(j=Query(1,1,N,1,L,B[i].R);j;j=Query(1,1,N,1,L,B[i].R))
			Q[++r]=j,Modify(1,1,N,j);
	}
	printf("%d\n",r);
	return 0;
}
