#include<stdio.h>
#include<algorithm>
#include<set>
#define itr iterator
using namespace std;
typedef pair<int,int> pii;
int sx,sy,sp,n;
long long sr;
long long  r[300000];
long long ur[300000];
set<pii> tree[300000];
set<int> col;
int nr;
int gp[300000];
int ma[300000];
long long gr[300000];
int psto[300000];
long long rsto[300000];
int nsto;
int usto;
int add(int k,int x){
	k++;
	for( ; k <= nr ; ){
		tree[k].insert(pii(ma[x],x));
		k += (k&(-k));
	}
}
int collect(int k, int mm){
	k++;
	for( ; k > 0 ; ){
		for( ; tree[k].begin() != tree[k].end() ; ){
			if( tree[k].begin()->first > mm ) break;
			col.insert(tree[k].begin()->second);
			tree[k].erase(tree[k].begin());
		}
		k -= (k&(-k));
	}
}
int del(int k,int x){
	k++;
	for( ; k <= nr ; ){
		tree[k].erase(pii(ma[x],x));
		k += (k&(-k));
	}
}

int main(){
	scanf("%d %d %d %I64d %d",&sx,&sy,&sp,&sr,&n);
	for(int i =0 ;i < n ;i++ ){
		long long x,y;
		scanf("%I64d %I64d %d %d %I64d",&x,&y,&ma[i],&gp[i],&gr[i]);
		r[i] = (x-sx)*(x-sx) + (y-sy)*(y-sy);
		ur[i] = r[i];
		gr[i] *= gr[i];
	}
	sort(ur,ur+n);
	nr = unique(ur,ur+n)-ur;
	for(int i = 0;i < n ; i++ ){
		int ir = lower_bound(ur,ur+nr,r[i]) - ur;
		add(ir,i);
	}
	usto = 0;
	rsto[nsto] = sr*sr;
	psto[nsto] = sp;
	nsto++;
	for( ; nsto != usto ; ){
		int pp = psto[usto];
		long long rr = rsto[usto];
		int ir = upper_bound(ur,ur+nr,rr)-ur-1;
		usto++;
		if( ir < 0 ) continue;
		col.clear();
		collect(ir,pp);
		//printf("-- %d\n",col.size());
		for(set<int>::itr it = col.begin() ; it != col.end() ;it++ ){
			int indr = lower_bound(ur,ur+nr,r[*it]) - ur;
			del(indr,*it);
			rsto[nsto] = gr[*it];
			psto[nsto] = gp[*it];
			nsto++;
		}
	}
	printf("%d\n",nsto-1);
}
		



	



