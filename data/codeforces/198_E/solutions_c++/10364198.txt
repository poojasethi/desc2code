#include<stdio.h>
#include<algorithm>
using namespace std;
const int maxn=250050,INF=2e9;
struct Magnet
{
	int x,y,m,p;
	long long r,d;
	Magnet(long long d=0):d(d) {}
	bool operator < (const Magnet &rhs) const { return d<rhs.d; }
	void scan() { scanf("%d%d%d%d%I64d",&x,&y,&m,&p,&r),r*=r; }
};
int n,ans;
Magnet p[maxn];
int qu[maxn],en=0;
int ts=0,ls[maxn*2],rs[maxn*2],mn[maxn*2];
inline long long Dis(int i,int j) { return 1LL*(p[i].x-p[j].x)*(p[i].x-p[j].x)+1LL*(p[i].y-p[j].y)*(p[i].y-p[j].y); }
void build(int x,int ll,int rr)
{
	if(ll==rr) 
	{ mn[x]=p[ll].m;return ; }
	int mid=(ll+rr)>>1;
	build(ls[x]=++ts,ll,mid);
	build(rs[x]=++ts,mid+1,rr);
	mn[x]=min(mn[ls[x]],mn[rs[x]]);
}
void get(int x,int ll,int rr,int a,int b,int g)
{
	if(ll==rr)
	{ qu[en++]=ll,mn[x]=INF;return ; }
	int mid=(ll+rr)>>1;
	if(a<=mid&&mn[ls[x]]<=g)
		get(ls[x],ll,mid,a,b,g);
	if(b>mid&&mn[rs[x]]<=g)
		get(rs[x],mid+1,rr,a,b,g);
	mn[x]=min(mn[ls[x]],mn[rs[x]]);
}
int main()
{
	int i,j;
	scanf("%d%d%d%I64d%d",&p[0].x,&p[0].y,&p[0].p,&p[0].r,&n);
	p[0].r*=p[0].r;
	for(i=1;i<=n;i++)
		p[i].scan(),p[i].d=Dis(0,i);
	sort(p+1,p+1+n);
	build(++ts,1,n);
	qu[en++]=0;
	for(i=0;i<en;i++)
	{
		int x=qu[i],pos=upper_bound(p+1,p+1+n,Magnet(p[x].r))-1-p;
		//printf("%d %d %d\n",x,pos,p[x].p);
		get(1,1,n,1,pos,p[x].p);
	}
	ans=en-1;
	printf("%d\n",ans);
	return 0;
}
