//By momo
#include <set>
#include <queue>
#include <iostream>
#include <vector>
#include <algorithm>
#define N 250010
#define F first
#define S second
#define MP make_pair
#define LL long long
using namespace std;
typedef pair<LL,LL> PII;

queue<PII> q;
struct grip{ LL d, m, r, p; }g[N];
bool comp(grip a, grip b){ return a.d < b.d; }
bool operator<(LL a, grip b){ return a < b.d; }
struct mycomp{
	bool operator()(LL a, LL b){
		return g[a].m > g[b].m;
	}
};

bool vst[N];
priority_queue<LL, vector<LL>, mycomp> bit[N];
void insert(LL x){
	LL u = x; x++;
	while(x < N){
		bit[x].push(u);
		x += x & -x;
	}
}
void query(LL x, LL p){
	x++;
	while(x > 0){
		while(!bit[x].empty() && g[bit[x].top()].m <= p){
			LL u = bit[x].top();
			if(!vst[u]) q.push(MP(g[u].r, g[u].p)), vst[u] = 1;
			bit[x].pop();
		}
		x -= x & -x;
	}
}

int main (){
	LL sx, sy, sp, sr, n;
	cin >> sx >> sy >> sp >> sr >> n;
	for(LL i = 0; i < n; i++){
		LL x, y;
		cin >> x >> y >> g[i].m >> g[i].p >> g[i].r;
		g[i].d = (x - sx)*(x - sx) + (y - sy)*(y - sy);
	}
	sort(g, g + n, comp);
	for(LL i = 0; i < n; i++) insert(i);
	LL cnt = 0; q.push(MP(sr, sp));
	while(!q.empty()){
		PII p = q.front(); q.pop();
		LL x = upper_bound(g, g + n, p.F*p.F) - g; x--;
		query(x, p.S); cnt++;
	}
	cout << cnt-1 << endl;
}
