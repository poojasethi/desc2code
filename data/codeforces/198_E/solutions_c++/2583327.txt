#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#define N 500005
#define tree int t,int l,int r
#define left t*2,l,mid
#define right t*2+1,mid+1,r
#define M int mid=(l+r)/2
int w[N],p[N],r[N],f[N],a[N*4],n,h=0,t=1,x,y,xx,yy; double d[N],D;
bool cmp(const int i,const int j){return w[i]==w[j]?i>j:w[i]<w[j];}
double dist(double x,double y){return sqrt(x*x+y*y);}
void modify(tree,int x,int y)
{
	if (l==r) {a[t]=y; return;} M;
	if (x<=mid) modify(left,x,y); else modify(right,x,y);
	a[t]=d[a[t*2]]<d[a[t*2+1]]?a[t*2]:a[t*2+1];	
}
int query(tree,int ll,int rr)
{
	if (l==ll && r==rr) return d[a[t]]<D?a[t]:0; M;
	if (rr<=mid) return query(left,ll,rr);
	if (ll>mid) return query(right,ll,rr);
	int L=query(left,ll,mid); if (L) return L;
	return query(right,mid+1,rr);
}
int main()
{
	scanf("%d%d%d%d%d",&x,&y,&w[0],&r[0],&n); d[0]=1e20;
	for (int i=0;i<=n+n;i++) p[i]=i;
	for (int i=1;i<=n;i++)
		scanf("%d%d%d%d%d",&xx,&yy,&w[n+i],&w[i],&r[i]),d[i]=dist(xx-x,yy-y);
	std::sort(p,p+n+n+1,cmp); for (int i=0;i<=n+n;i++) w[p[i]]=i;
	for (int i=1;i<=n;i++) modify(1,0,n+n,w[n+i],i);
	while (h<t){
		x=f[++h],D=r[x]+1e-8,y=query(1,0,n+n,0,w[x]);
		while (y) f[++t]=y,modify(1,0,n+n,w[n+y],0),y=query(1,0,n+n,0,w[x]);
		}
	printf("%d\n",t-1); return 0;
}
