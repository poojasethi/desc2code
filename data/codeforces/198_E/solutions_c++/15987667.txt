#include <bits/stdc++.h>
//Keep your friends rich, and your enemies rich, and wait to find out which is which.

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const ll MAXN = 6e5;	

set< pii > fen[MAXN];
ll dunique[MAXN], d[MAXN];
int dN, x[MAXN], y[MAXN], p[MAXN], r[MAXN], m[MAXN];

inline int IND(ll x){ return lower_bound(dunique, dunique + dN, x) - dunique; } 

queue<int> q, del;

void upd(int ind, pii q, bool flag){ ind++;
	for(; ind < MAXN; ind += ind & -ind)
		if (flag) fen[ind].insert(q);
		else fen[ind].erase(q);
}

void get(int ind, int p){ ind++;
	for(; ind; ind -= ind & -ind){
		while(fen[ind].size() && fen[ind].begin() -> first <= p){
			ll x = fen[ind].begin()->second;
			del.push(x);
			q.push(x);
			fen[ind].erase(fen[ind].begin());
		}
		
	}
}

int main(){
	int sx, sy, n; scanf("%d%d%d%d%d", &sx, &sy, &p[0], &r[0], &n);
	
	dunique[ dN++ ] = r[0] * r[0];
	for (ll i = 1; i <= n; i++){
		scanf("%d%d%d%d%d", &x[i], &y[i], &m[i], &p[i], &r[i]);
		dunique[ dN++ ] = d[i] = ll(x[i] - sx) * (x[i] - sx) + ll(y[i] - sy) * (y[i] - sy);
		dunique[ dN++ ] = ll(r[i]) * r[i];
	}

	sort(dunique, dunique + dN);
	dN = unique(dunique, dunique + dN) - dunique;


	for (ll i = 1; i <= n; i++)
		upd( IND(d[i]), pii(m[i], i), 1);

	ll ans = 0;
	q.push(0);

	while(q.size()){
		ll u = q.front(); q.pop();
		ans++;
	
		get( IND(ll(r[u]) * r[u]) , p[u] );
		for(; del.size(); del.pop()){
			ll x = del.front();
			upd( IND(d[x]) , pii(m[x], x), 0);
		}
	}

	cout << ans - 1 << endl;
}

