#include <stdio.h>
#include <queue>
#include <set>
#include <string.h>
#include <algorithm>

using namespace std;

typedef pair<int,int> pii;
typedef long long ll;

ll dpos[255555];
ll dis[255555];
int disid[255555];
int m[255555];
int p[255555];
int r[255555];

set<pii> msbit[255555]; // ....

int main(void)
{
	int x = 0;
	int y = 0;
	int p0 = 0;
	int r0 = 0;
	int n = 0;
	scanf("%d %d %d %d %d",&x,&y,&p0,&r0,&n);
	p0 = -p0;
	for(int i = 0;i < n;i++)
	{
		int xi = 0;
		int yi = 0;
		scanf("%d %d %d %d %d",&xi,&yi,&m[i],&p[i],&r[i]);
		m[i] = -m[i];
		p[i] = -p[i];
		xi -= x;
		yi -= y;
		dis[i] = dpos[i] = (ll)xi*xi+(ll)yi*yi;
	}
	sort(dpos,dpos+n);
	int uqcnt = unique(dpos,dpos+n)-dpos;
	for(int i = 0;i < n;i++) disid[i] = lower_bound(dpos,dpos+uqcnt,dis[i])-dpos+1;

	for(int i = 0;i < n;i++)
	{
		for(int j = disid[i];j <= uqcnt;j += (j&(-j))) msbit[j].insert(pii(m[i],i));
	}

	queue<pii> q;
	int ans = 0;
	q.push(pii(p0,r0));
	while(!q.empty())
	{
		pii x = q.front();
		q.pop();
		int tp = x.first;
		int tr = x.second;
		tr = upper_bound(dpos,dpos+uqcnt,(ll)tr*tr)-dpos;
		for(int i = tr;i > 0;i -= (i&(-i)))
		{
			set<pii>::iterator it;
			while((it = msbit[i].lower_bound(pii(tp,-1))) != msbit[i].end())
			{
				ans++;
				int id = it->second;
				q.push(pii(p[id],r[id]));

				for(int j = disid[id];j <= uqcnt;j += (j&(-j)))
				{
					msbit[j].erase(pii(m[id],id));
				}
			}
		}
	}
	printf("%d\n",ans);
	while(getchar() != EOF);
	return 0;
}