#include<algorithm>
#include<cstdio>
#include<set>
using namespace std;
typedef long long LL;

struct node {
       LL x; int y,p,r; 
       node(LL x0, int y0) {x = x0;y = y0;}
       node() {x = 0; y = 0;}
} d[250011],lis[250011];
bool cmp(const node a, const node b) 
{return a.x < b.x || a.x == b.x && a.y < b.y;}

set<pair<int , int> > key[250101];
int p[250101],r[250101];
int x0,y0,p0,r0,n,ans;

LL sqr(LL x) {return (LL)x * x;}

void build() {
     for (int i = 1,t; i <= n; ++i) {
         pair<int, int > tmp(d[i].y,i);
         for (t = i;t <= n; t += t & (-t)) key[t].insert(tmp);
     }
} 
void del(int p) {
     pair<int, int > tmp(d[p].y, p);
     for (; p <= n; p += p & (-p)) 
         key[p].erase(key[p].find(tmp));
}

int main() {
    scanf("%d%d%d%d%d", &x0, &y0, &p0, &r0, &n);
    for (int i = 1,x1,y1; i <= n; ++i) {
        scanf("%d%d%d%d%d", &x1, &y1, &d[i].y , &d[i].p, &d[i].r);
        d[i].x = (sqr((LL)(x1)-x0) + sqr((LL)(y1)-y0));
    }
    sort(d + 1, d + n + 1, cmp);
    build();
    lis[1].x = (LL)(r0)*r0; lis[1].y = p0;
    for (int t,k,p1 = 1, q1 = 1; p1 <= q1; ++p1) {
        k = upper_bound(d + 1, d + n + 1, node(lis[p1].x,lis[p1].y), cmp) - d - 1;
        for (; k; k -= k & (-k)) 
            for (;key[k].size() && key[k].begin()->first <= lis[p1].y;) {
                ++ans;
                t = key[k].begin()->second;
                lis[++q1] = node(sqr((LL)(d[t].r)), d[t].p);
                del(t);
            }
    }
    printf("%d\n", ans);
    return 0;
}
