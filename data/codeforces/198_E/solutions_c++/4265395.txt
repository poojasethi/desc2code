#include<cstdio>
#include<algorithm>
using namespace std;
struct rec
{	long long d,r;
	int m,p;
};
rec a[250005];
long long D[250005];
int L[250005];
int R[250005];
int q[250005];
int v[250005];
bool cmp_d(rec a,rec b)
{	return a.d<b.d;
}
bool cmp_m(rec a,rec b)
{	return a.m<b.m;
}
int n,c,unit=500;
int main()
{	int i;
	long long x0,y0,x,y;
	scanf("%I64d%I64d%d%d%d",&x0,&y0,&a[0].p,&a[0].r,&n);
	a[0].r*=a[0].r;
	for (i=1;i<=n;i++)
	{	scanf("%I64d%I64d%d%d%I64d",&x,&y,&a[i].m,&a[i].p,&a[i].r);
		a[i].r*=a[i].r;
		a[i].d=(x0-x)*(x0-x)+(y0-y)*(y0-y);
	}
	sort(a+1,a+n+1,cmp_d);
	for (i=1;i<=n;i+=unit)
	{	L[++c]=i,R[c]=min(n,i+unit-1),D[c]=a[R[c]].d;
		sort(a+L[c],a+R[c]+1,cmp_m);
	}
	int l,r,p;
	long long rad;
	l=r=1,q[1]=0; 
	while (l<=r)
	{	rad=a[q[l]].r;
		p=a[q[l]].p;
		++l;
		for (i=1;i<=c;++i)
		{	if (D[i]>rad)
			{	for (int j=L[i];j<=R[i];++j)
					if (!v[j]&&a[j].d<=rad&&a[j].m<=p)
					{	q[++r]=j;
						v[j]=1;
					}
				break;
			}
			while (L[i]<=R[i]&&a[L[i]].m<=p)
			{	if (!v[L[i]])
					q[++r]=L[i];
				++L[i];
			}
		}
	}
	printf("%d\n",r-1);
}
		 	 	 			 		 	    	    		