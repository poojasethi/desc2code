#include <cstdio>
#include <algorithm>
#include <set>
typedef std::set<std::pair<double, int> > set;
struct rec {
    int m, p, r;
    long long d;
} a[250000];
int n, m, b[250000], q[250000], u[250000];
set t[250001];
void ins(int x) {
    for (int i = a[x].m+1; i <= m; i += i&-i)
        t[i].insert(std::pair<long long, int>(a[x].d, x));
}
int main() {
    int x, y, p, r;
    scanf("%d%d%d%d%d", &x, &y, &p, &r, &n);
    for (int i = 0, x_, y_; i < n; i++) {
        scanf("%d%d%d%d%d", &x_, &y_, &a[i].m, &a[i].p, &a[i].r);
        a[i].d = 1LL * (x_ - x) * (x_ - x) + 1LL * (y_ - y) * (y_ - y);
        b[i] = a[i].m;
    }
    std::sort(b, b + n);
    m = std::unique(b, b + n) - b;
    for (int i = 0; i < n; i++) {
        a[i].m = std::lower_bound(b, b + m, a[i].m) - b;
        a[i].p = std::upper_bound(b, b + m, a[i].p) - b - 1;
    }
    p = std::upper_bound(b, b + m, p) - b - 1;
    for (int i = 0; i < n; i++) ins(i);
    int ll = 0, rr = -1;
    for (int i = p+1; i > 0; i -= i&-i)
        for (set::iterator j = t[i].begin(), k; j != t[i].end() && j->first <= 1LL * r * r; k = j, k++, t[i].erase(j), j = k)
            if (!u[j->second]) q[++rr] = j->second, u[j->second] = 1;
    for (; ll <= rr; ll++)
        for (int i = a[q[ll]].p+1; i > 0; i -= i&-i)
            for (set::iterator j = t[i].begin(), k; j != t[i].end() && j->first <= 1LL * a[q[ll]].r * a[q[ll]].r; k = j, k++, t[i].erase(j), j = k)
                if (!u[j->second]) q[++rr] = j->second, u[j->second] = 1;
    printf("%d\n", rr+1);
    return 0;
}
