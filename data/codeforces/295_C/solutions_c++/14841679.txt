#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

const ll MAXN = 60, MOD = 1e+9 + 7;
ll a[2], dp[MAXN][MAXN][2], dis[MAXN][MAXN][2], choose[MAXN][MAXN];
queue< pair< pair<ll,ll>, ll> > q;

int main(){
	ll n, k;
	cin >> n >> k;
	
	for(ll i = 0; i < n; i++){
		ll x;
		cin >> x;
		if(x == 50)
			a[0]++;
		else
			a[1]++;
	}
	for(ll i = 0; i < MAXN; i++)
		choose[i][0] = 1;
	for(ll i = 1; i < MAXN; i++){
		for(ll j = 1; j <= i; j++){
			choose[i][j] = (choose[i - 1][j - 1] + choose[i - 1][j]) % MOD;
		}
	}
	dp[a[0]][a[1]][0] = 1;
	dis[a[0]][a[1]][0] = 1;
	q.push(make_pair(make_pair(a[0], a[1]), 0));
	
	while(q.size()){
		ll x = q.front().first.first, y = q.front().first.second, z = q.front().second;
		q.pop();
		ll d = dp[x][y][z], ds = dis[x][y][z];
		if(z == 1)
			x = a[0] - x, y = a[1] - y;
		for(ll i = 0; i <= x; i++){
			for(ll j = 0; j <= y && j * 100 + i * 50 <= k; j++){
				if(i == 0 && j == 0)
					continue;
				ll nx, ny, nz;
				nz = !z;
				if(z == 0){
					nx = x - i;
					ny = y - j;
				}
				else{
					nx = a[0] - x + i;
					ny = a[1] - y + j;
				}
				if(!dis[nx][ny][nz]){
					dis[nx][ny][nz] = ds + 1;
					q.push(make_pair(make_pair(nx, ny), nz));
				}
				if(dis[nx][ny][nz] == ds + 1){
					dp[nx][ny][nz] = (dp[nx][ny][nz] + d * choose[x][i] % MOD * choose[y][j] % MOD) % MOD;
				}
			}
		}
	}
	cout << dis[0][0][1] - 1 << endl << dp[0][0][1] % MOD << endl;
	return 0;
}
	 	  	 	 	 		 	 	 				 	  					