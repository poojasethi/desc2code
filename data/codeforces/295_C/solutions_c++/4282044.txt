#include <cstdio>
#include <algorithm>
#include <queue>
#define mp make_pair
#define INF 1000000007LL
using namespace std;
const int NMax=60;
int N,K,num;
pair<int,int>dp[NMax][NMax][3];
int fw[NMax][NMax][3];
long long C[NMax][NMax];
queue<pair<pair<int,int>,int> >Q;
int main()
{
	scanf("%d%d",&N,&K);
	for(int i=1;i<=N;i++) {
		int x;scanf("%d",&x);
		if(x==50) num++;
	}
	C[0][0]=1;
	for(int i=1;i<=N;i++) {
		C[i][0]=1;
		for(int j=1;j<=i;j++)
			C[i][j]=(C[i-1][j]+C[i-1][j-1])%INF;
	}
	dp[num][N-num][0]=mp(1,0);
	fw[num][N-num][0]=1;
	Q.push(mp(mp(num,N-num),0));
	while(!Q.empty()) {
		pair<pair<int,int>,int>x=Q.front();Q.pop();
		pair<int,int>D=dp[x.first.first][x.first.second][x.second];
		for(int i=0;i<=x.first.first;i++) {
			for(int j=0;j<=x.first.second;j++) if(i+j>=1&&i*50+j*100<=K){
				int a=num-x.first.first+i,b=N-num-x.first.second+j,c=x.second^1;
				if(!fw[a][b][c]) {
					fw[a][b][c]=1;
					dp[a][b][c].first=(long long)D.first*C[x.first.first][i]%INF*C[x.first.second][j]%INF;
					dp[a][b][c].second=D.second+1;
					Q.push(mp(mp(a,b),c));
				}else if(dp[a][b][c].second==D.second+1) {
					int tmp=dp[a][b][c].first;
					dp[a][b][c].first=(tmp+(long long)D.first*C[x.first.first][i]%INF*C[x.first.second][j]%INF)%INF;
				}
			}
		}	
	}
	if(dp[num][N-num][1].second==0)
		puts("-1\n0");
	else printf("%d\n%d\n",dp[num][N-num][1].second,dp[num][N-num][1].first);
	return 0;
}
