#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>

using namespace std;

typedef long long LL;
const int mod = (int)1e9 + 7;
const int maxn = 128;
int num[maxn], dis[maxn][maxn][2];
int g[maxn][maxn][2], C[maxn][maxn];
int Q[maxn * 10000][3], n, m, c;
int st, ed, f[maxn][maxn][2];

void add(int &x, int y) {
    x = (x + y) % mod;
}

inline void push(int x, int y, int b, int v, int o) {
    if (!dis[x][y][b]) {
        dis[x][y][b] = v;
        f[x][y][b] = o;
        Q[++ed][0] = x, Q[ed][1] = y, Q[ed][2] = b;
    } else if (dis[x][y][b] == v) {
        add(f[x][y][b], o);
    }
}

int main() {
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &c); ++num[c];
    }
    for (int i = 0; i <= n; ++i) {
        C[i][0] = C[i][i] = 1;
        for (int j = 1; j < i; ++j) {
            C[i][j] = (C[i-1][j] + C[i-1][j-1]) % mod;
        }
    }
    push(num[50], num[100], 0, 0, 1);
    while (st <= ed) {
        int x = Q[st][0], y = Q[st][1], z = Q[st++][2];
        for (int i = 0; i <= x && i * 50 <= m; ++i) {
            for (int j = (i == 0); j <= y && (i * 50 + j * 100) <= m; ++j) {
                push(num[50] - x + i, num[100] - y + j, 1 - z, dis[x][y][z] + 1,
                    (LL)C[x][i] * C[y][j] % mod * f[x][y][z] % mod);

            }
        }
    }
    int x = num[50], y = num[100];
    if (dis[x][y][1] == 0) puts("-1\n0");
    else printf("%d\n%d\n", dis[x][y][1], f[x][y][1]);
    return 0;
}
  			 	 	       		 	 	  		