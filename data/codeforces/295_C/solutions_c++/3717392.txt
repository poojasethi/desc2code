#include <iostream>
#include <cstring>
#include <cstdio>
#include <queue>

using namespace std;

typedef long long LL;
const int N=56, MOD=1000000007;

struct node
{
	int x, y, id;
	node(int a, int b, int c):x(a), y(b), id(c) {}
};
queue <node> q;
LL g[N][N][2];
int f[N][N][2], n, m1, m2, k;
int C[N][N];

void BFS()
{
	memset(f, -1, sizeof f);
	memset(g, 0, sizeof g);
	f[m1][m2][0]=0, g[m1][m2][0]=1;
	while(!q.empty()) q.pop();
	q.push(node(m1, m2, 0));
	while(!q.empty())
	{
		node cur=q.front();
		q.pop();
		int k1=cur.x, k2=cur.y, id=cur.id;
		for(int i=0; i<=k1; i++)
			for(int j=0; j<=k2; j++)
			{
				if(i==0 && j==0) continue;
				if(i*50+j*100>k) continue;
				int x=m1-k1+i, y=m2-k2+j;
				if(f[x][y][id^1]==-1)
				{
					f[x][y][id^1]=f[k1][k2][id]+1;
					g[x][y][id^1]=(g[x][y][id^1]+C[k1][i]*g[k1][k2][id]%MOD*C[k2][j]%MOD)%MOD;
					q.push(node(x, y, id^1));
				}
				else if(f[x][y][id^1]==f[k1][k2][id]+1)
					g[x][y][id^1]=(g[x][y][id^1]+C[k1][i]*g[k1][k2][id]%MOD*C[k2][j]%MOD)%MOD;
			}
	}
}

int main()
{
	memset(C, 0, sizeof C);
	for(int i=0; i<N; i++) C[i][0]=1;
	for(int i=1; i<N; i++)
		for(int j=1; j<=i; j++) C[i][j]=(C[i-1][j]+C[i-1][j-1])%MOD;

	scanf("%d%d", &n, &k);
	m1=0, m2=0;
	for(int i=0, a; i<n; i++)
	{
		scanf("%d", &a);
		if(a==50) m1++;
		else m2++;
	}
	BFS();
	printf("%d\n%I64d\n", f[m1][m2][1], g[m1][m2][1]);
	return 0;
}

	  		    		 		 	 		 	   	 	