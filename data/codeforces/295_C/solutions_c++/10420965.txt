#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<queue>
using namespace std;
#define LL long long
#define MOD 1000000007
struct dian{
  LL x1,x2,flag;
};
queue<dian>q;
LL dis[55][55][2],way[55][55][2],k,n,c[55][55];
void bfs(LL k1,LL k2)
{
  dian n1,n2;
  LL i,j,tmp;
  dis[k1][k2][0]=0; way[k1][k2][0]=1;
  n1.x1=k1; n1.x2=k2; n1.flag=0;
  while (!q.empty()) q.pop();
  q.push(n1);
  while (!q.empty())
  {
	n1=q.front(); q.pop();
	for (j=0;j<=n1.x2;j++)
	{
	  if (j*100>k) break;
	  for (i=0;i<=n1.x1;i++)
	  {
		if (i==0&&j==0) continue;
		if (i*50+j*100>k) break;
		n2.x1=((k1-n1.x1)+i); n2.x2=((k2-n1.x2)+j); 
		n2.flag=1-n1.flag;
		if (dis[n2.x1][n2.x2][n2.flag]==-1)
		{
		  dis[n2.x1][n2.x2][n2.flag]=dis[n1.x1][n1.x2][n1.flag]+1;
		  q.push(n2);
		}
		if(dis[n2.x1][n2.x2][n2.flag]==dis[n1.x1][n1.x2][n1.flag]+1)
		{
		  tmp=c[n1.x1][i]*c[n1.x2][j]%MOD;
		  way[n2.x1][n2.x2][n2.flag]=(way[n2.x1][n2.x2][n2.flag]+
			  tmp*way[n1.x1][n1.x2][n1.flag])%MOD;
		}
	  }
	}
  }
}
int main()
{
  LL i,j,k1,k2,x;
  for (i=0;i<=50;i++)
  {
	c[i][0]=c[i][i]=1;
	for (j=1;j<i;j++) c[i][j]=(c[i-1][j-1]+c[i-1][j])%MOD;
  }
  scanf("%lld%lld",&n,&k);
  k1=k2=0;
  memset(dis,-1,sizeof(dis));
  memset(way,0,sizeof(way));
  for (i=1;i<=n;i++){
	scanf("%lld",&x);
	if (x==50) k1++;
	else k2++;
  }
  bfs(k1,k2);
  printf("%lld\n%lld\n",dis[k1][k2][1],way[k1][k2][1]);
  return 0;
}

	     	 	   				 		 	  			 	  	