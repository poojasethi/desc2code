#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>

const int mod = 1000000007;

using namespace std;

long long dp[2][52][52];
int c[2], C[100][100];

int main()
{
	int i, j, k, a, b, x, y, t;
	int n, m;

	for( i = 0; i < 100; ++i )
		C[i][i] = C[i][0] = 1;
	for( i = 2; i < 100; ++i )
		for( j = 1; j < i; ++j )
			C[i][j] = (C[i-1][j-1]+C[i-1][j])%mod;

	while( scanf("%d %d", &n, &m) != EOF )
	{
		c[0] = c[1] = 0;
		for( i = 0; i < n; ++i )
		{
			scanf("%d", &k);
			c[k/50-1]++;
		}
		m /= 50;

		a = 0, b = 1;
		memset(dp, 0, sizeof(dp));
		dp[a][c[0]][c[1]] = 1;

		for( t = 0; t <= 4*n; ++t )
		{
			memset(dp[b], 0, sizeof(dp[b]));

			if( t&1 && dp[a][c[0]][c[1]] )
				break;

			for( i = 0; i <= c[0]; ++i )
				for( j = 0; j <= c[1]; ++j )	if( dp[a][i][j] )
				{
					for( x = 0; x <= i; ++x )
						for( y = 0; y <= j && x+y*2 <= m; ++y )	if( x+y )
						{
							dp[b][ c[0]-i+x ][ c[1]-j+y ] += (dp[a][i][j]*C[i][x]%mod)*C[j][y]%mod;
							dp[b][ c[0]-i+x ][ c[1]-j+y ] %= mod;
						}
				}

			swap(a, b);
		}

		if( t == 4*n+1 )
			printf("-1\n0\n");
		else
			printf("%d\n%I64d\n", t, dp[a][c[0]][c[1]]);
	}

	return 0;
}