#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 55;
const int mod = 1e9 + 7;
int way[N*20+1][N][N][2];
int cnt[2];
int C[N][N];
void add(int &x, int val) {
	x += val;
	if(x >= mod)
		x -= mod;
}
void prepare() {
	for(int i = 0; i < N; i ++) {
		C[i][0] = 1;
		for(int j = 1; j <= i; j ++) {
			add(C[i][j], (C[i - 1][j - 1] + C[i - 1][j]) % mod);
		}
	}
}
int main() {
	int n, K, x;
	prepare();
	scanf("%d%d", &n, &K);
	rep(i, n)
		scanf("%d", &x), cnt[x / 50 - 1] ++;
	way[0][cnt[0]][cnt[1]][0] = 1;
	bool end = false;
	int MinStep = -1;
	rep(i, N*20) {
		if(way[i][cnt[0]][cnt[1]][1]) {
			MinStep = i;
			break;
		}
		for(int j = 0; j <= cnt[0]; j ++) {
			for(int k = 0; k <= cnt[1]; k ++) {
				rep(s, 2) {
					int val = way[i][j][k][s];
					if(val == 0)	continue;
					for(int a = 0; j - a >= 0; a ++) {
						for(int b = 0; k - b >= 0; b ++) {
							if(a * 50 + b * 100 > K)	continue;
							int nxtj = cnt[0] - j + a, nxtk = cnt[1] - k + b;
							if(a || b)
								add(way[i + 1][nxtj][nxtk][s^1], val*(LL)C[j][a]%mod*C[k][b]%mod);
						}
					}
				}
			}
		}
	}
	if(MinStep == -1)
		puts("-1\n0");
	else
		printf("%d\n%d\n", MinStep, way[MinStep][cnt[0]][cnt[1]][1]);
	return 0;
}

