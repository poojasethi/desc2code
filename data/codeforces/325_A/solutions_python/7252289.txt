import sys
n = int(raw_input())

master_list = [] #contains list of the 4 coords for each rectangle
xmin = sys.float_info.max
xmax = sys.float_info.min
ymin = sys.float_info.max
ymax = sys.float_info.min
found_area = 0
for i in xrange(0, n):
	temp_list = []
	rect_list = raw_input()
	count = 0
	for coord in rect_list.split(" "):
		if count == 0:
			if int(coord) < xmin:
				xmin = int(coord)
		if count == 1:
			if int(coord) < ymin:
				ymin = int(coord)
		if count == 2:
			if int(coord) > xmax:
				xmax = int(coord)
		if count == 3:
			if int(coord) > ymax:
				ymax = int(coord)
		temp_list.append(int(coord))
		count += 1
	master_list.append(temp_list)
	found_area += (temp_list[2]-temp_list[0])*(temp_list[3]-temp_list[1])

#print "found area was %s " %found_area

# def get_edge_pts(coord_list):
# 	xleft = coord_list[0]
# 	xright = coord_list[2]
# 	ybot = coord_list[1]
# 	ytop = coord_list[3]

# 	return_list = [] # a list of tuples
# 	for i in xrange(xleft, xright+1):
# 		if (i, ybot) not in return_list:
# 			return_list.append((i, ybot))
# 		if (i, ytop) not in return_list:
# 			return_list.append((i, ytop))
# 	for j in xrange(ybot, ytop):
# 		if (xleft, j) not in return_list:
# 			return_list.append((xleft, j))
# 		if (xright, j) not in return_list:
# 			return_list.append((xright, j))
# 	return return_list

# def get_int_pts(coord_list):
# 	xleft = coord_list[0]
# 	xright = coord_list[2]
# 	ybot = coord_list[1]
# 	ytop = coord_list[3]

# 	return_list = [] # a list of tuples
# 	for i in xrange(xleft+1, xright):
# 		for j in xrange(ybot+1, ytop):
# 			return_list.append((i, j))
# 	return return_list

# ext_master_list = []
# for i in xrange(0, len(master_list)):
# 	list_ext_coords = get_edge_pts(master_list[i])
# 	for coord in list_ext_coords:
# 		if coord not in ext_master_list:
# 			ext_master_list.append(coord)

# invalid_int = False
# for x in xrange(xmin, xmax+1):
# 	for y in xrange(ymin, ymax+1):
# 		temp = (x, y)
# 		if temp not in ext_master_list:
# 			#print temp
# 			temp_count = 0
# 			for rect in master_list:
# 				if temp in get_int_pts(rect):
# 					temp_count += 1
# 			#print temp_count
# 			if temp_count != 1:
# 				#print "found invalid pt"
# 				invalid_int = True
# 				break

expected_area = (xmax-xmin)*(ymax-ymin)
#print "expected_area is %s "%expected_area
if (xmax-xmin) == (ymax-ymin) and expected_area == found_area:
	print "YES"
else:
	print "NO"