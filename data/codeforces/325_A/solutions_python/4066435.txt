# -*- coding: utf-8 -*-
"""
Spyder Editor

This temporary script file is located here:
/home/zangetsu/.spyder2/.temp.py
"""

from __future__ import division;
from bisect import *;
import sys;
from math import *;
from fractions import *;
from itertools import *; 
import io;
import re;

INF = 987654321987654321987654321;

def readint(delimiter=' ') :
    return map(int, raw_input().split(delimiter));

def readstr(delimiter=' ') :
    return raw_input().split(delimiter);

def readfloat(delimiter=' ') :
    return map(float, raw_input().split(delimiter));

def index(a, x):
    'Locate the leftmost value exactly equal to x'
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    raise ValueError

def find_lt(a, x):
    'Find rightmost value less than x'
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_le(a, x):
    'Find rightmost value less than or equal to x'
    i = bisect_right(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_gt(a, x):
    'Find leftmost value greater than x'
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

def find_ge(a, x):
    'Find leftmost item greater than or equal to x'
    i = bisect_left(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

def bin_search(a, x, left, right) :

    while left<=right :
        mid = (left + right)//2;
        
        if a[mid] == x :
            return mid;
        elif a[mid] < x :
            left = mid + 1; 
        elif a[mid] > x :
            right = mid - 1;
                       
        pass
    
    return -1;
    pass

def printf(format, *args):
    """Format args with the first argument as format string, and write.
    Return the last arg, or format itself if there are no args."""
    sys.stdout.write(str(format) % args)
    pass

if __name__ == '__main__':

    n = readint()[0];
    points = [];
    for ii in xrange(n) :
        x1, y1, x2, y2 = readint();
        points.append((x1, y1, x2, y2));

        pass
    
    def is_square(items) :
        x_min, y_min, x_max, y_max = INF,INF,-1,-1;   
        luas = 0;
        for ii in items :
            x_min = min(points[ii][0], x_min);
            x_max = max(points[ii][2], x_max);
            y_min = min(points[ii][1], y_min);
            y_max = max(points[ii][3], y_max);
            luas += (points[ii][2] - points[ii][0]) * (points[ii][3] - points[ii][1]);
            pass
        #print luas, x_min, x_max, y_min, y_max;            
            
        if luas == int(sqrt(luas))**2 and y_max - y_min == x_max-x_min and int(sqrt(luas)) == x_max - x_min :
            return True;
        
        return False;
            
    valid = False;
    '''for cc in xrange(1, n+1) :
        for ii in combinations(range(0,n), cc) :
            
            if is_square(ii) :
                #print ii;
                valid = True;
                
            pass
        pass'''
    if is_square(range(n)) :
        valid = True;
        pass
    
    if valid : 
        print "YES";
    else :
        print "NO";
    
    
    pass