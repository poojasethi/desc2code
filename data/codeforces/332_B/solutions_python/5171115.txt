def get_max_segments(n,k,laws):
    arr = [0] * (n-k+1)
    firstk = 0
    for i in range(k):
        firstk += laws[i]
    arr[0] = firstk
    cur = 1
    while cur < (n-k+1):
        arr[cur] = arr[cur-1] - laws[cur-1] + laws[cur + k - 1]
        cur += 1
    max_from_end = [0] * (n-k+1)
    max_from_end[-1] = n-k
    cur = n - k - 1
    while cur>=0:
        if arr[cur] >= arr[max_from_end[cur+1]]:
            max_from_end[cur] = cur
        else:
            max_from_end[cur] = max_from_end[cur+1]
        cur -= 1
    smaller = 0
    max = -1
    temp = 0
    while temp < len(max_from_end):
        if (temp + k) < len(max_from_end):
            total = arr[temp] + arr[max_from_end[temp + k]]
            if total > max:
                max = total
                smaller = temp
        temp += 1

    print smaller+1, max_from_end[smaller+k]+1

input = raw_input('')
input = input.split()
n = int(input[0])
k = int(input[1])
input = raw_input('')
temp = input.split()
arr = [0] * n
for i in range(len(arr)):
    arr[i] = int(temp[i])
get_max_segments(n,k,arr)