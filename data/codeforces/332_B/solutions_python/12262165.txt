def sum_k(l,k):
  start = sum(l[:k])
  yield start
  for i in xrange(k,len(l)):
    start += l[i]
    start -= l[i-k]
    yield start

def suffix_max(l):
  ll  = l[:]
  idx = range(len(l))
  for i in xrange(len(l)-2,-1,-1):
    if l[i] >= ll[i+1]:
      ll [i] = l[i]
      idx[i] = i
    else:
      ll [i] = ll [i+1]
      idx[i] = idx[i+1]
  return ll,idx

n,k = map(int, raw_input().split())
A = map(int, raw_input().split())
B = list(sum_k(A,k))
C,I = suffix_max(B)

a = max(xrange(n-2*k+1),key=lambda i: B[i] + C[i+k])
print a+1, I[a+k]+1

  