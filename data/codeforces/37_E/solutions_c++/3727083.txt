#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstring>

using namespace std;

#define N 55
char c[N][N];
int n,m;
int dy[5][2]={{0,0},{1,0},{-1,0},{0,1},{0,-1}};
int team[N*N][2],d[N][N];
bool can[N][N],tot=0;
bool relax(int x,int y,int z)
{
    if(d[x][y]==0||d[x][y]>z)
    {
        d[x][y]=z;
        return true;
    }
    return false;
}
int bfs(int x,int y)
{
	memset(can,false,sizeof(can));
	memset(d,0,sizeof(d));
	int head=0,tail=0;
	team[0][0]=x,team[0][1]=y;
	d[x][y]=1;
	tail++;
	can[x][y]=true;
	while(head!=tail)
	{
		int nowx,nowy;
		nowx=team[head][0];
		nowy=team[head][1];
		can[nowx][nowy]=false;
		head++;
		if(head>=N*N) head-=N*N;
		for(int i=1;i<=4;i++)
		{
			int now1x=0,now1y=0;
			now1x=nowx+dy[i][0],now1y=nowy+dy[i][1];
			if(now1x<1||now1y<1||now1x>n||now1y>m)
				continue;
			int dist=(c[nowx][nowy]!=c[now1x][now1y]);
			if(relax(now1x,now1y,d[nowx][nowy]+dist)&&can[now1x][now1y]==false)
			{
				can[now1x][now1y]=true;
				team[tail][0]=now1x,team[tail][1]=now1y;
				tail++;
				if(tail>=N*N) tail-=N*N;
			}
		}
	}
	int Max=0;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			if(c[i][j]=='B')
				Max=max(Max,d[i][j]);
	return Max;
}
int main()
{
	static char cc[N];
	scanf("%d %d\n",&n,&m);
	for(int i=1;i<=n;i++)
		gets(c[i]+1);
	int ans=0x3f3f3f3f;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
		{
			int u=bfs(i,j);
			ans=min(ans,u);
		}	
	printf("%d\n",ans);
}
				 				  	   					 	  		