#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <ctime>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <cassert>
#include <bitset>

using namespace std;

const int c[4][2]={{-1,0},
	{1,0},
	{0,-1},
	{0,1}};

int q[3000][3], head, tail, n, m, ans, tmp;
bool a[60][60], f[60][60];
char st[100];

void dfs(int i, int j, int z) {
	if (a[i][j]) tmp=max(tmp,z);
	f[i][j]=1;
	q[tail][0]=i;
	q[tail][1]=j;
	q[tail][2]=z;
	++tail;
	for (int k=0; k<4; ++k) {
		int x=i+c[k][0], y=j+c[k][1];
		if (x>=0&&x<n&&y>=0&&y<m&&!f[x][y]&&a[x][y]==a[i][j]) {
			dfs(x,y,z);
		}
	}
}

int main() {
	scanf("%d%d",&n,&m);
	for (int i=0; i<n; ++i) {
		scanf("%s",st);
		for (int j=0; j<m; ++j) {
			if (st[j]=='W') {
				a[i][j]=0;
			} else {
				a[i][j]=1;
			}
		}
	}
	ans=n*m;
	for (int i=0; i<n; ++i) {
		for (int j=0; j<m; ++j) {
			tmp=0;
			memset(f,0,sizeof(f));
			head=0; tail=0;
			dfs(i,j,1);
			while (head<tail) {
				for (int k=0; k<4; ++k) {
					int x=q[head][0]+c[k][0], y=q[head][1]+c[k][1];
					if (x>=0&&x<n&&y>=0&&y<m) {
						if (!f[x][y]) {
							dfs(x,y,q[head][2]+1);
						}
					}
				}
				++head;
			}
			ans=min(ans,tmp);
		}
	}
	printf("%d\n",ans);
	return 0;
}

 	 						  		   	 		  				 	 	