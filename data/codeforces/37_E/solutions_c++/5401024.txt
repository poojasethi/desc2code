#include <cstdio>
#include <cstring>
#include <algorithm>
const int D[4][2]={{1,0},{0,1},{-1,0},{0,-1}};
int N,M,ans=1e9,d[55][55],q[100005][2];
bool b[55][55];
char a[55][55];

int work(int u,int v)
{
	memset(b,0,sizeof(b));
	memset(d,63,sizeof(d));
	q[1][0]=u,q[1][1]=v,d[u][v]=1;
	for (int l=1,r=1; l<=r; l++)
	{
		int x=q[l][0],y=q[l][1],xx,yy,t; b[x][y]=0;
		for (int i=0; i<4; i++)
		{
			xx=x+D[i][0],yy=y+D[i][1];
			if (xx<1||xx>N||yy<1||yy>M) continue;
			t=d[x][y]+(a[x][y]!=a[xx][yy]);
			if (t<d[xx][yy])
			{
				d[xx][yy]=t;
				if (!b[xx][yy]) b[xx][yy]=1,q[++r][0]=xx,q[r][1]=yy;
			}
		}
	}
	int res=0;
	for (int i=1; i<=N; i++)
		for (int j=1; j<=M; j++) if (a[i][j]=='B') res=std::max(res,d[i][j]);
	return res;
}

int main()
{
	scanf("%d%d",&N,&M);
	for (int i=1; i<=N; i++) scanf("%s",a[i]+1);
	for (int i=1; i<=N; i++)
		for (int j=1; j<=M; j++) ans=std::min(ans,work(i,j));
	printf("%d\n",ans);
}