#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>

using namespace std;

const int kMaxN = 50, kMaxM = 50, kMaxB = kMaxN * kMaxM, kInf = 0x3f3f3f3f;
const int kFx[4] = {-1, 1, 0, 0}, kFy[4] = {0, 0, -1, 1};
int n, m;
char buf[kMaxN][kMaxM + 1], tmp[kMaxN][kMaxM + 1];
bool vis[kMaxN][kMaxM];
int q[kMaxB], qh, qt;

bool InRange(int x, int y) {
	return (x >= 0 && x < n && y >= 0 && y < m);
}

bool Check() {
	for (int i = 0; i < n; ++ i)
		for (int j = 0; j < m; ++ j)
			if (tmp[i][j] == 'B') return false;
	return true;
}

void Bfs(int x, int y, int c) {
	qh = qt = 0;
	q[qt ++] = x * m + y;
	memset(vis, false, sizeof(vis));
	vis[x][y] = true;
	tmp[x][y] = 'B' + 'W' - c;
	while (qh < qt) {
		x = q[qh] / m;
		y = q[qh] % m;
		++ qh;
		for (int d = 0; d < 4; ++ d) {
			int nx = x + kFx[d], ny = y + kFy[d];
			if (InRange(nx, ny) && tmp[nx][ny] == c && !vis[nx][ny]) {
				q[qt ++] = nx * m + ny;
				vis[nx][ny] = true;
				tmp[nx][ny] = tmp[x][y];
			}
		}
	}
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++ i) scanf("%s", buf[i]);
	int ans = kInf;
	for (int i = 0; i < n; ++ i)
		for (int j = 0; j < m; ++ j) {
			memcpy(tmp, buf, sizeof(buf));
			int step = 0;
			while (!Check()) {
				++ step;
				if (step >= ans) break;
				Bfs(i, j, tmp[i][j]);
			}
			ans = min(ans, step);
		}
	printf("%d\n", ans);
	return 0;
}