#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <queue>
using namespace std;

char g[55][55];
int n, m;
int dist[55][55];

int dx[] = {0, 0, -1, 1};
int dy[] = {-1, 1, 0, 0};

struct Node {
	int x, y, dist;
	Node(int x, int y, int dist) : x(x), y(y), dist(dist) {}
};

deque<Node> q;
bool vis[55][55];

int BFS(int Sx, int Sy) {
	int ret = -1;
	memset(vis, 0, sizeof(vis));
	q.clear();
	q.push_back(Node(Sx, Sy, 0));
	vis[Sx][Sy] = true;
//	printf("\n%d %d\n", Sx, Sy);
	while (!q.empty()) {
		Node t = q.front();
		q.pop_front();
		int x = t.x, y = t.y, d = t.dist;
//		printf("%d %d %d\n", x, y, d);
		if (g[x][y] == 'B') ret = max(ret, d);
		for (int k = 0; k < 4; k++) {
			int nx = x + dx[k], ny = y + dy[k], nd = d + (g[x][y] != g[nx][ny]);	
			if (nx < 0 || nx >= n || ny < 0 || ny >= m || vis[nx][ny]) continue;
			vis[nx][ny] = true;
			if (nd == d) q.push_front(Node(nx, ny, nd));
			else q.push_back(Node(nx, ny, nd));
		}
	}
	return ret;
}

int main() {
//	freopen("data.in", "r", stdin);
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++) scanf("%s", g[i]);
	int ans = 10000000;
	for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) ans = min(ans, BFS(i, j));
	printf("%d\n", ans + 1);
	return 0;
}
