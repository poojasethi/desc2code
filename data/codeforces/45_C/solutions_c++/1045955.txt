#include <cstdio>
#include <queue>
#include <cmath>
using namespace std;
const int Maxn=200001;
struct Node
{
	int x,y,t;
	Node() {}
	Node(int _x,int _y,int _t):x(_x),y(_y),t(_t) {}
};
bool flag[Maxn],u[Maxn];
int w[Maxn],last[Maxn],next[Maxn],ans[(Maxn+1)>>1][2];
priority_queue<Node> h;

bool operator<(Node a,Node b) {return a.t>b.t || a.t==b.t && a.x>b.x;}

int main()
{
	int n,i;
	scanf("%d\n",&n);
	char ch;
	for (i=1; i<=n; ++i)
	{
		ch=getchar();
		flag[i]=ch=='B';
	}
	for (i=1; i<=n; ++i)
	{
		scanf("%d",w+i);
		if (i>1 && flag[i-1]!=flag[i]) h.push(Node(i-1,i,abs(w[i]-w[i-1])));
		last[i]=i-1; next[i]=i+1;
	}
	next[n]=0;
	int xx,yy,k=0;
	Node v;
	while (!h.empty())
	{
		v=h.top();
		++k; ans[k][0]=v.x; ans[k][1]=v.y;
		u[v.x]=u[v.y]=true;
		xx=last[v.x]; yy=next[v.y];
		h.pop();
		if (xx) next[xx]=yy;
		if (yy) last[yy]=xx;
		if (xx && yy && flag[xx]!=flag[yy]) h.push(Node(xx,yy,abs(w[xx]-w[yy])));
		while (!h.empty() && (u[h.top().x] || u[h.top().y])) h.pop();
	}
	printf("%d\n",k);
	for (i=1; i<=k; ++i) printf("%d %d\n",ans[i][0],ans[i][1]);
	return 0;
}
