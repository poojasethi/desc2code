#include <bits/stdc++.h>

using namespace std;
const int N = 200010;

char str[N];
vector <pair<int, int > >ans;
int flag[N],n,next[N],pre[N],a[N];
struct node
{
    int l,r,d;
    node(int l1, int r1, int d1):l(l1),r(r1),d(d1){}
    bool operator < (const node &a) const
    {return d!=a.d? d>a.d:l>a.l;}
};
priority_queue <node> que;

int main()
{
    while(scanf("%d",&n)==1)
    {
        memset(flag,0,sizeof(flag[0])*(n+5));
        scanf("%s",str+1);
        for(int i=1; i<=n; i++)
        {
            scanf("%d",&a[i]);
            pre[i] = i - 1;
            next[i] = i + 1;
        }
        for(int i=1; i<n; i++)
            if(str[i] != str[i+1])
                que.push(node(i, i+1, abs(a[i] - a[i+1])));
        while(!que.empty())
        {
            node cur = que.top();
            que.pop();
            if(flag[cur.l] || flag[cur.r]) continue;
            ans.push_back(make_pair(cur.l, cur.r));
            flag[cur.l] = flag[cur.r] = 1;
            int l = pre[cur.l], r = next[cur.r];
            next[l] = r;
            pre[r] = l;
            if(l<1 || r>n) continue;
            if(str[l] != str[r])
                que.push(node(l, r, abs(a[l] - a[r])));
        }
        printf("%d\n",ans.size());
        for(int i=0; i<ans.size(); i++)
            printf("%d %d\n",ans[i].first,ans[i].second);
        ans.clear();
    }
    return 0;
}

	  	  		 	    				  	 	 	  	 		