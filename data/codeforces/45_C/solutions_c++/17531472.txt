#include<iostream>
#include<string>
#include<set>
using namespace std;
struct Pair
{
	int u,v;
};
int t[200000];
int aft[200000],bef[200000];
bool used[200000]={false};
int abs(int i)
{
	return i>0?i:-i;
}
bool operator <(Pair i,Pair j)
{
	if(abs(t[i.u]-t[i.v])==abs(t[j.u]-t[j.v]))
		if(i.u==j.u)return i.v<j.v;
		else return i.u<j.u;
	else return abs(t[i.u]-t[i.v])<abs(t[j.u]-t[j.v]);
}
set<Pair> s;
int main()
{
	int n;string str;Pair tmp;
	int ans=0;
	cin>>n>>str;
	for(int i=0;i<n;i++)cin>>t[i];
	for(int i=0;i<n;i++)
	{
		bef[i]=i-1;aft[i]=i+1;
		if(str[i]=='G')ans++;
	}
	if(ans+ans>n)ans=n-ans;
	cout<<ans<<endl;
	for(int i=0;i<n-1;i=aft[i])
	if(str[i]!=str[aft[i]])
	{
		tmp.u=i;tmp.v=aft[i];s.insert(tmp);
	}
	while(!s.empty())
	{
		tmp=*s.begin();
		s.erase(s.begin());
		if(used[tmp.u]||used[tmp.v])continue;
		used[tmp.u]=used[tmp.v]=true;
		cout<<tmp.u+1<<' '<<tmp.v+1<<endl;
		aft[bef[tmp.u]]=aft[tmp.v];
		bef[aft[tmp.v]]=bef[tmp.u];
		if(bef[tmp.u]>=0&&aft[tmp.v]<n&&str[bef[tmp.u]]!=str[aft[tmp.v]])
		tmp.u=bef[tmp.u];tmp.v=aft[tmp.v];s.insert(tmp);
	}
	return 0;
}
