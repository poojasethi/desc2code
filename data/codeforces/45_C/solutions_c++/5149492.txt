#include <iostream>
#include <vector>
#include <cmath>
#include <set>

using namespace std;

int a[200010];
char mode[200010];


struct pii
{
	int first, second;
	pii()
	{
	}
	pii(int f, int s):first(f), second(s)
	{
	}
	bool operator < (pii b) const
	{
		int a1 = abs(a[second] - a[first]);
		int a2 = abs(a[b.second] - a[b.first]);
		if (a1 == a2)
			if (first == b.first)
				return second < b.second;
			else
				return first < b.first;
		else
			return a1 < a2;
	}
};

set<int> alive;
set<pii> s;
vector<pii> v;
int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> mode[i];
		alive.insert(i);
	}
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		if (i > 0 && mode[i] != mode[i - 1])
			s.insert(pii(i - 1, i));
	}
	while (!s.empty())
	{
		pii t = *s.begin();
		int b = t.first, c = t.second;
		int a = -1, d = -1;
		set<int>::iterator it = alive.find(b);
		if (it != alive.begin())
		{
			it--;
			a = *it;
		}
		it = alive.find(c);
		it++;
		if (it != alive.end())
			d = *it;
		alive.erase(b);
		alive.erase(c);
		if (a != -1 && mode[a] != mode[b])
			s.erase(pii(a, b));
		s.erase(pii(b, c));
		if (d != -1 && mode[c] != mode[d])
			s.erase(pii(c, d));
		if (a != -1 && d != -1 && mode[a] != mode[d])
			s.insert(pii(a, d));
		v.push_back(pii(b, c));
	}
	cout << v.size() << endl;
	for (int i = 0; i < v.size(); i++)
		cout << v[i].first + 1 << " " << v[i].second + 1 << endl;

}

 	 	 	 	 			       	  		