#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
const int mm=2e5+9;
class node
{
    public:int u,v,c;
};
inline bool operator <(const node a,const node b)
{
    if(a.c^b.c)return a.c>b.c; else return a.u>b.u;
}
int ll[mm],rr[mm],skill[mm];
char s[mm]; int n;
int abs(int x)
{
    if(x<0)x=-x; return x;
}
bool vis[mm];
priority_queue<node>q;
int main()
{
    while(cin>>n)
    {
        cin>>s+1;
        node z;
        int num=0;
        for(int i=1;i<=n;i++)
            ll[i]=i-1,rr[i]=i+1,num+=s[i]=='B';
        num=num<n-num?num:n-num;
        for(int i=1;i<=n;i++)
            cin>>skill[i];
        while(!q.empty())
            q.pop();
        for(int i=1;i<n;i++)
            if(s[i]!=s[i+1])
                z.u=i,z.v=i+1,z.c=abs(skill[i]-skill[i+1]),q.push(z);
        memset(vis,0,sizeof(vis));
        cout<<num<<"\n";
        while(num--)
        {
            while(!q.empty())
            {
                z=q.top();
                q.pop();
                if(!vis[z.u]&&!vis[z.v])
                {
                    cout<<z.u<<" "<<z.v<<"\n";
                    vis[z.u]=vis[z.v]=1;
                    break;
                }
            }
            int b=ll[z.u],t=rr[z.v];
            rr[b]=t;ll[t]=b;
            z.u=b;z.v=t;
            z.c=abs(skill[b]-skill[t]);
            if(b>0&&t<=n&&s[b]!=s[t])
                q.push(z);
        }
    }
}

			    	 	 	 	   		 	  	 	 	  	