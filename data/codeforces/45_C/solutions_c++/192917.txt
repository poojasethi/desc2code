#include<iostream>
#include<set>
#include<vector>
#include<cstdio>

using namespace std;

#define x first
#define y second
#define mp make_pair

int n;
bool ode[200005];
int l[200005], r[200005];
int skill[200005];
char g[200005];
vector< pair<int,int> > sol;
set< pair< int,pair<int,int> > > s;

int abs(int a)
{
    if(a < 0)
        return -a;
    return a;
}

int fl(int x)
{
    if(!ode[l[x]])
        return l[x];
    return l[x] = fl(l[x]);
}

int fr(int x)
{
    if(!ode[r[x]])
        return r[x];
    return r[x] = fr(r[x]);
}

int main()
{
    scanf("%d", &n);
    scanf("%s", g+1);
    for(int i = 1; i <= n; ++i)
    {
        scanf("%d", skill+i);
        l[i] = i - 1;
        r[i] = i + 1;
    }
    for(int i = 2; i <= n; ++i)
        if(g[i-1] != g[i])
            s.insert(mp(abs(skill[i-1] - skill[i]), mp(i-1, i)));
    while(!s.empty())
    {
        int a = s.begin()->y.x;
        int b = s.begin()->y.y;
        s.erase(s.begin());
        if(ode[a] || ode[b])
            continue;
        ode[a] = ode[b] = 1;
        sol.push_back(mp(a, b));
        a = fl(a);
        b = fr(b);
        if(a > 0 && b <= n)
            if(g[a] != g[b])
                s.insert(mp(abs(skill[a] - skill[b]), mp(a, b)));
    }
    printf("%d\n", sol.size());
    for(int i = 0; i < sol.size(); ++i)
        printf("%d %d\n", sol[i].x, sol[i].y);
    return 0;
}
