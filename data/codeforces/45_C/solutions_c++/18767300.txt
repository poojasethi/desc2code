#include<bits/stdc++.h>
using namespace std;
const int maxn = 210000;
struct Node{
	int l, r, v;
	bool operator < (const Node& b) const{
		return v > b.v || (v == b.v && l > b.l);
	}
};
priority_queue<Node> q;
char s[maxn];
bool sex[maxn], vis[maxn];
int a[maxn], Left[maxn], Right[maxn], l[maxn], r[maxn], cnt = 0;
bool is_ok(int l, int r, int n){
	if(l <= 0 || r > n) return false;
	else return sex[l] ^ sex[r];
}
int main(){
	memset(vis, 0, sizeof(vis));
	int n;
	scanf("%d", &n);
	for(int i = 0; i <= n + 1; i++) Left[i+1] = i;
	for(int i = 0; i <= n + 1; i++) Right[i] = i+1;
	scanf("%s", s);
	for(int i = 0; i < n; i++)
		sex[i+1] = s[i] == 'B' ? 0 : 1;
	for(int i = 1; i <= n; i++)
		scanf("%d", &a[i]);
	for(int i = 1; i < n; i++)
		if(sex[i] ^ sex[i+1])
			q.push((Node){i, i+1, abs(a[i+1]-a[i])});
//	cout << "case1" << endl;
	while(!q.empty()){
		Node now = q.top(); q.pop();
		if(vis[now.l] || vis[now.r]) continue;
		l[cnt] = now.l; r[cnt] = now.r; cnt++;
		vis[now.l] = vis[now.r] = true;
		Right[Left[now.l]] = Right[now.r];
		Left[Right[now.r]] = Left[now.l];
		if(is_ok(Left[now.l], Right[now.r], n))
			q.push((Node){Left[now.l],Right[now.r],abs(a[Left[now.l]]-a[Right[now.r]])});
//		cout << "now.v:" << now.v << endl;
	}
	printf("%d\n", cnt);
	for(int i = 0; i < cnt; i++) printf("%d %d\n", l[i], r[i]);
	return 0;
}


 		  		  	 	 	 	 			 		 		 		