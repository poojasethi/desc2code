#include <cstdio>
#include <cstring>
#include <vector>
#include <set>
#include <queue>
#include <algorithm>
using namespace std;

char s[200005];
class Data {
	public:
	int L, R, d;
	Data(int _L=0, int _R=0, int _d=0) { L=_L; R=_R; d=_d;}
	bool operator<(const Data &a) const {
		if (d != a.d) return d > a.d;
		return L > a.L;
	}
};

int a[200005];
int main(void) {
	int n;
	scanf("%d", &n);
	scanf("%s", s);
	priority_queue<Data> Q;
	set<int> alive;
	for(int i=0;i<n;i++) {
		scanf("%d", &a[i]);
		alive.insert(i);
	}
	for(int i=1;i<n;i++)
		if(s[i-1]!=s[i])
			Q.push(Data(i-1, i, abs(a[i-1]-a[i])));
	vector<pair<int, int> > ans;
	while(!Q.empty()) {
		Data tmp = Q.top(); Q.pop();
		if (alive.count(tmp.L) && alive.count(tmp.R)) {
			ans.push_back(make_pair(tmp.L, tmp.R));
			alive.erase(tmp.L);
			alive.erase(tmp.R);
			set<int>::iterator it = alive.lower_bound(tmp.L);
			if (it != alive.end()) {
				set<int>::iterator it2 = it;
				if (it != alive.begin()) {
					--it;
					if (s[*it] != s[*it2]) {
						Q.push(Data(*it, *it2, abs(a[*it]-a[*it2])));
					}
				}
			}
		}
	}
	printf("%d\n", (int)ans.size());
	for(int i=0;i<(int)ans.size();i++)
		printf("%d %d\n", ans[i].first+1, ans[i].second+1);
	return 0;
}

