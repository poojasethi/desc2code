#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<vector>
#include<cmath>
#include<queue>
#define N 200005
using namespace std;

struct node{
    int x, y, w;
    bool operator<(const node &u) const{
        if(w != u.w)return w > u.w;
        return x > u.x;
    }
};

node maken(int x, int y, int w){
    node ret;
    ret.x  = x;ret.y = y;ret.w = w;
    return ret;
}

priority_queue<node> q;
vector<node> ans;
int l[N], r[N], a[N];
char s[N];
bool vis[N];

int main(){
    int n;scanf("%d", &n);
    scanf("%s", s);
    memset(vis, false, sizeof(vis));
    for(int i = 0;i < n;i ++){
        l[i] = i - 1;r[i] = (i == n - 1) ? -1 : i + 1;
        scanf("%d", &a[i]);
        if(i && (s[i] != s[i - 1])){
            q.push(maken(i - 1, i, abs(a[i] - a[i - 1])));
        }
    }
    while(!q.empty()){
        node u = q.top();q.pop();
        if(vis[u.x] || vis[u.y]) continue;
        vis[u.x] = vis[u.y] = true;
        ans.push_back(u);
        int ll = l[u.x], rr = r[u.y];
        if(ll >= 0)r[ll] = rr;
        if(rr >= 0)l[rr] = ll;
        if(ll >= 0 && rr >= 0 && (s[ll] != s[rr])){
            q.push(maken(ll, rr, abs(a[ll] - a[rr])));
        }
    }
    printf("%d\n", ans.size());
    for(int i = 0;i < ans.size();i ++)printf("%d %d\n", ans[i].x + 1, ans[i].y + 1);
    return 0;
}

		  	 	 		   	   		 	  	  	