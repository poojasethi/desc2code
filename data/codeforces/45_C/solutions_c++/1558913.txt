#include<cstdio>
#include<algorithm>
#include<cmath>
#include<queue>
using namespace std;
int n;
char s[200005];
int v[200005];
struct node
{
    int l,r,v;
    void init(int ll,int rr,int vv)
    {
        l=ll;r=rr;v=vv;
    }
    friend bool operator<(const node& a,const node& b)
    {
        if(a.v!=b.v)return a.v>b.v;
        return a.l>b.l;
    }
}n1;
priority_queue<node>qu;
int L[200005],R[200005];
bool used[200005];
int x[100005],y[100005],len;
int main()
{
    //freopen("c://111.txt","r",stdin);
    scanf("%d%s",&n,s+1);
    int i;
    for(i=1;i<=n;i++)scanf("%d",v+i);
    for(i=1;i<=n;i++)L[i]=i-1,R[i]=i+1;
    for(i=2;s[i];i++)
    {
        if(s[i]!=s[i-1])
        {
            n1.init(i-1,i,abs(v[i]-v[i-1]));
            qu.push(n1);
        }
    }
    while(!qu.empty())
    {
        n1=qu.top();
        qu.pop();
        if(used[n1.l]||used[n1.r])continue;
        used[n1.l]=used[n1.r]=1;
        x[len]=n1.l;
        y[len++]=n1.r;
        int a=L[n1.l],b=R[n1.r];
        if(a>0&&b<=n)
        {
            R[L[n1.l]]=R[n1.r];
            L[R[n1.r]]=L[n1.l];
            if(s[a]!=s[b])
            {
                n1.init(a,b,abs(v[a]-v[b]));
                qu.push(n1);
            }
        }
    }
    printf("%d\n",len);
    for(i=0;i<len;i++)
    {
        printf("%d %d\n",x[i],y[i]);
    }
    return 0;
}
