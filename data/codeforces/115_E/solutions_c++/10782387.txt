#include<iostream>
#include<algorithm>
#include<cstring>
#include<string>
#include<cmath>
#include<cstdio>
#include<ctime>
#include<queue>
#include<vector>
using namespace std;

const int maxn=200005;
struct Game
{
	int l,r,val;
	Game(int ll,int rr,int v)
		:l(ll),r(rr),val(v){}
	Game(){}
	bool operator <(const Game &b)const
	{
		return r>b.r;
	}
};

int minn(const int& a,const int& b)
{
	return a<b?a:b;
}

vector<Game>vec[maxn];
priority_queue<Game>que;
int cost[maxn];
int main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	long long ans=0;
	int l,r,v;
	for(int i=1;i<=n;i++) scanf("%d",&cost[i]);
	for(int i=0;i<m;i++)
	{
		scanf("%d%d%d",&l,&r,&v);
		vec[l].push_back(Game(l,r,v));
		ans+=(long long)v;
	}
	for(int i=1;i<=n;i++)
	{
		while(!que.empty()&&que.top().r<i) que.pop();
		for(int j=0;j<vec[i].size();j++)
		{
			que.push(vec[i][j]);
		}
		while(cost[i]&&!que.empty())
		{
			Game top=que.top();
			que.pop();
			int sub=minn(cost[i],top.val);
			top.val-=sub;
			cost[i]-=sub;
			ans-=sub;
			if(top.val>0) que.push(top);
		}
	}
	printf("%lld\n",ans);

}
     	 	 	 		     			 		 	 			