#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 2e5 + 5;

int n, m;
int a[N];
ll dp[N];
ll t[N << 2], add[N << 2];
vector < ii > v[N];

void up(int x, int l, int r, int x1, int x2, ll k) {
	if(r < x1 or x2 < l)
		return;
	if(x1 <= l and r <= x2) {
		t[x] += k;
		add[x] += k;
		return;
	}
	int m = (l + r) >> 1;
	up(x + x, l, m, x1, x2, k);
	up(x + x + 1, m + 1, r, x1, x2, k);
	t[x] = max(t[x + x], t[x + x + 1]) + add[x];
}

int main() {

	scanf("%d %d", &n, &m);
	
	for(int i = 1; i <= n; i++)
		scanf("%d", a + i);
		
	for(int i = 1; i <= m; i++) {
		int x, y, c;
		scanf("%d %d %d", &x, &y, &c);
		v[x].push_back(ii(y, c));
	}
	
	for(int i = n; i >= 1; i--) {
		foreach(it, v[i]) {
			int x = it -> first;
			int c = it -> second;
			up(1, 1, n, x, n, c);
		}
		up(1, 1, n, i, n, -a[i]);
		dp[i] = max(dp[i + 1], t[1]);
		up(1, 1, n, i - 1, i - 1, dp[i]);
	}
	
	printf("%lld\n", dp[1]);

	return 0;

}
