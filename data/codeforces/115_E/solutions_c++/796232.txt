#include <stdio.h>

#include <vector>

using namespace std;


int n, m;
long long val, sol[200002], s[200002];
vector< pair <int, int> > v[200002];

struct vect
{
	long long x, y;
} aint[1000002];

void update(int nod, int st, int dr, int left, int right)
{
	if (left <= st && dr <= right)
	{
		aint[nod].x += val;
		aint[nod].y += val;
		return;
	}

	int m = (st + dr) / 2;
	
	if (left <= m)
		update (nod * 2, st, m, left, right);
	if (m < right)
		update (nod * 2 + 1, m + 1, dr, left, right);

	aint[nod].x = max(aint[nod * 2].x, aint[nod * 2 + 1].x) + aint[nod].y;
}


int main()
{
	scanf ("%d%d", &n, &m);
	
	int i, x, y, c;
	
	for (i = 1; i <= n; i ++)
	{
		scanf ("%I64d", &s[i]);
		s[i] += s[i - 1];
	}
	for (i = 1; i <= m; i ++)
	{
		scanf ("%d %d %d", &x, &y, &c);
		v[y].push_back (make_pair (x - 1, c));
	}

	for (i = 1; i <= n; i ++)
	{
		for(vector <pair <int, int> > :: iterator it = v[i].begin(); it != v[i].end(); it ++)
		{
			val = (*it).second;
			update(1, 0, n, 0, (*it).first);
		}
		
		sol[i] = max(sol[i - 1], aint[1].x - s[i]);
		val = sol[i] + s[i];
		update(1, 0, n, i, i);
	}

	printf("%I64d\n", sol[n]);

	return 0;
}
