#include <cstdio>
#include <cstring>
#include <algorithm>
#define maxn 200009
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
using namespace std;
int n,m,a[maxn];
__int64 dp[maxn],tree[maxn*4],mark[maxn*4];
struct node
{
	int l,r;
	__int64 w;
	bool operator<(const node &rhs)const
	{
		return r<rhs.r;
	}
}p[maxn];
inline void pushdown(int rt)
{
	if(mark[rt])
	{
		tree[rt<<1]+=mark[rt];
		tree[rt<<1|1]+=mark[rt];
		mark[rt<<1]+=mark[rt];
		mark[rt<<1|1]+=mark[rt];
		mark[rt]=0;
		return;
	}
}
inline void pushup(int rt)
{
	tree[rt]=max(tree[rt<<1],tree[rt<<1|1]);
}
void update(int L,int R,__int64 x,int l,int r,int rt)
{
	if(L<=l&&r<=R)
	{
		tree[rt]+=x;
		mark[rt]+=x;
		return;
	}
	int m=(l+r)>>1;
	pushdown(rt);
	if(L<=m)
		update(L,R,x,lson);
	if(R>m)
		update(L,R,x,rson);
	pushup(rt);
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		scanf("%d",&a[i]);
	for(int i=1;i<=m;i++)
	{
		scanf("%d%d%I64d",&p[i].l,&p[i].r,&p[i].w);
	}
	sort(p+1,p+1+m);
	for(int i=1,j=1;i<=n;i++)
	{
		update(0,i-1,-a[i],0,n,1);
		while(j<=m&&p[j].r<=i)
		{
			update(0,p[j].l-1,p[j].w,0,n,1);
			j++;
		}
		dp[i]=max(dp[i-1],tree[1]);
		update(i,i,dp[i],0,n,1);
	}
	printf("%I64d\n",dp[n]);
	return 0;
}