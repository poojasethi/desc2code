#include<cstdio>
#include<algorithm>
using namespace std;
#define kl k<<1
#define kr k<<1|1
typedef __int64 ll;
const int N=200005;
ll c[N],dp[N],t[N<<2],f[N<<2];
struct node
{
	int l,r;
	ll v;
	bool operator<(const node x)const{return r<x.r;}
}p[N];
ll max(ll a,ll b){return a>b?a:b;}
void pushdown(int k)
{
	if(f[k])
	{
		f[kl]+=f[k];
		f[kr]+=f[k];
		t[kl]+=f[k];
		t[kr]+=f[k];
		f[k]=0;
	}
}
void update(int L,int R,int l,int r,ll v,int k)
{
	if(l<=L&&r>=R)
	{
		t[k]+=v;
		f[k]+=v;
		return;
	}
	int mid=(L+R)>>1;
	pushdown(k);
	if(l<=mid)update(L,mid,l,r,v,kl);
	if(r>mid)update(mid+1,R,l,r,v,kr);
	t[k]=max(t[kl],t[kr]);
}
int main()
{
	int i,j,n,m;
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;i++)
		scanf("%I64d",&c[i]);
	for(i=0;i<m;i++)
		scanf("%d%d%I64d",&p[i].l,&p[i].r,&p[i].v);
	sort(p,p+m);
	for(i=1,j=0;i<=n;i++)
	{
		update(0,n,0,i-1,-c[i],1);
		while(j<m&&p[j].r==i)
		{
			update(0,n,0,p[j].l-1,p[j].v,1);
			j++;
		}
		dp[i]=max(dp[i-1],t[1]);
		update(0,n,i,i,dp[i],1);
	}
	printf("%I64d\n",dp[n]);
	return 0;
}

   	 		   			 					   	   				