#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
#include <cstring>

using namespace std ;

#define Maxn 300005

typedef long long LL ;

struct data {
	data( int a , int b ) : v(a) , w(b) {}
	data() {}
	int v , w ;
	bool operator < ( const data &b )	const
	{ return v > b.v ; }
} ;

priority_queue<data> Q ;

struct Graph {
	int v , w , n ;
} g[Maxn] ;

int n , m , tot ;
int p[Maxn] ;
int a[Maxn] ;

void insert ( int u , int v , int w ) {
	tot ++ ;
	g[tot].v = v , g[tot].w = w , g[tot].n = p[u] , p[u] = tot ;
}

int main() {
	scanf ( "%d%d" , &n , &m ) ;
	int i ;
	for ( i = 1 ; i <= n ; ++i ) scanf ( "%d" , &a[i] ) ;
	int u , v , w ;
	for ( i = 1 ; i <= m ; ++i ) {
		scanf ( "%d%d%d" , &u , &v , &w ) ;
		insert ( u , v , w ) ;
	}
	int t;
	LL ans = 0 ;
	data tmp ;
	for ( i = 1 ; i <= n ; ++i ) {
		for ( t = p[i] ; t != 0 ; t = g[t].n ) { 
			Q.push ( data ( g[t].v , g[t].w ) ) ;
			ans += g[t].w ;
		}
		while ( !Q.empty() && Q.top().v < i ) Q.pop() ;
		while ( !Q.empty() && a[i] > 0 ) {
			tmp = Q.top() ;
			Q.pop() ;
			if ( a[i] >= tmp.w ) {
				a[i] -= tmp.w ;
				ans -= tmp.w ;
			}
			else {
				tmp.w -= a[i] ;
				ans -= a[i] ;
				a[i] = 0 ;
				Q.push ( tmp ) ;
			}
		}
	}
	cout << ans << endl ;
	return 0 ;
}
  			  	 	  		 	 	 	 	  		