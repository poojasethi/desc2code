#include<set>
#include<queue>
#include<cstdio>
#include<vector>
#include<string>
#include<climits>
#include<cstdlib>
#include<string.h>
#include<iostream>
#include<algorithm>
#define LL long long
#define _max(a, b) ((a) > (b) ? (a) : (b))
#define _min(a, b) ((a) < (b) ? (a) : (b))
using namespace std;
#define N 211111

struct T
{
	int x, y, p;
	bool operator < (const T &b) const
	{
		return y < b.y;
	}
};

T a[N];
LL ans = 0;
int n, m, c[N];
multiset<T> h;

bool my(T a, T b)
{
	return a.x < b.x;
}

int main()
{
/*
	freopen(".in", "r", stdin);
	freopen(".out", "w", stdout);
//*/
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) scanf("%d", &c[i]);
	for (int i = 1; i <= m; i++)
	{
		scanf("%d%d%d", &a[i].x, &a[i].y, &a[i].p);
		ans += a[i].p;
	}
	sort(a + 1, a + 1 + m, &my);
	int j = 1;
	for (int i = 1; i <= n; i++)
	{
		while (j <= m && a[j].x == i) h.insert(a[j]), ++j;
		while (c[i] > 0 && h.size() > 0)
		{
			T p = *h.begin();
			h.erase(h.begin());
			if (p.y < i) continue;
			int mi = _min(p.p, c[i]);
			c[i] -= mi;
			p.p -= mi;
			ans -= mi;
			if (p.p > 0) h.insert(p);
		}
	}
	cout<< ans<< endl;
	return 0;
}
