#include <cstdio>
#include <algorithm>
#include <queue>
#include <vector>

using namespace std;

int L[200001],R[200001],P[200001],C[200001];
vector<int> pos[200001];
struct cmp{
	bool operator () (const int &x,const int &y) const {
		return R[x]>R[y];
	}
};
priority_queue<int,vector<int> ,cmp> Q;
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	
	for (int i = 1; i <= n; i++)
		scanf("%d",C+i);

	for (int i = 1; i <= m; i++){
		scanf("%d%d%d",L+i,R+i,P+i);
		pos[L[i]].push_back(i);
	}
	
	long long ans = 0;
	for (int i = 1; i <= n; i++){
		/* YFF */
		while (!Q.empty() && R[Q.top()] < i){
			ans += P[Q.top()];
			Q.pop();
		} 
		for (vector<int>::iterator it = pos[i].begin(); it != pos[i].end(); it++)
			Q.push(*it);
		
		while (!Q.empty() && C[i]){
			int p = Q.top();
			int r = min(P[p],C[i]);
			Q.pop();
			P[p] -= r;
			C[i] -= r;
			if (P[p])
				Q.push(p);
		}
	}
	while (!Q.empty()) ans += P[Q.top()], Q.pop();
	printf("%I64d\n",ans);
}