#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <cstdlib>

#define LL long long
#define pb(x) push_back(x)
#define size(S) S.size()

using namespace std;

const int maxn=200010;
int n,m, r[maxn];
LL ans, now, tmp;
struct race{int l, r, p;} p[maxn];
struct inteval{LL d, m;} T[maxn*4];

inline bool cmp(race a, race b){return a.r<b.r;}

void add(int x, int rl, int rr, int l, int r, LL v){
	if (l>r) return;
	if (rl==l && rr==r){
		T[x].d+=v; T[x].m+=v;
		return;
	}
	int t=x<<1, mid=(rl+rr)>>1;
	if (T[x].d){
		T[t].d+=T[x].d; T[t+1].d+=T[x].d;
		T[t].m+=T[x].d; T[t+1].m+=T[x].d;
		T[x].d=0;
	}
	if (r<=mid) add(t, rl, mid, l, r, v);
	else if (l>mid) add(t+1, mid+1, rr, l, r, v);
	else add(t, rl, mid, l, mid, v), add(t+1, mid+1, rr, mid+1, r, v);
	T[x].m=max(T[t].m, T[t+1].m);
}

int main(){
	scanf("%d%d", &n, &m);
	for (int i=1; i<=n; i++) scanf("%d", r+i);
	for (int i=0; i<m; i++) scanf("%d%d%d", &p[i].l, &p[i].r, &p[i].p);
	sort(p, p+m, cmp);
	now=0;
	for (int i=1; i<=n; i++){
		while (now<m && p[now].r==i) add(1, 0, n, 0, p[now].l-1, p[now].p), now++;
 		add(1, 0, n, 0, i-1, -r[i]);
		tmp=ans=max(ans, T[1].m);
		add(1, 0, n, i, i, tmp);
	}
	printf("%I64d\n", ans);
}
