#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<string>
#include<iostream>
#include<cmath>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<set>
#include<queue>
using namespace std;

typedef unsigned long long big;
big seed=1000000009;
const int N=102000;
big s[N],pw[N];
int a[N],next[N],n;
map<int,int>last;
struct node
{
	int left,len;
	node(){};
	node(int x,int y):left(x),len(y){}
	bool operator<(const node &b)const
	{
		if(len!=b.len)return len>b.len;
		return left>b.left;
	}
};
priority_queue<node>heap;
big get(int l,int len)
{
	return s[l+len-1]-s[l-1]*pw[len];
}
int main()
{
	int i,j,x,y,now;
	big s1,s2;
	scanf("%d",&n);
	s[0]=pw[0]=1;
	for(i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
		s[i]=s[i-1]*seed+a[i];
		pw[i]=pw[i-1]*seed;
		if(last.count(a[i]))
		next[last[a[i]]]=i;
		last[a[i]]=i;
	}
	for(i=1;i<=n;i++)
	if(next[i])
	{
		x=next[i];
		y=next[i]-i;
		if(x+y-1>n)continue;
		if(get(i,y)==get(x,y))
		{
			heap.push(node(i,y));
		}
	}
	now=1;
	node tmp;
	while(!heap.empty())
	{
		tmp=heap.top();
		heap.pop();
		if(tmp.left<now)continue;
		now=max(now,tmp.left+tmp.len);
	}
	printf("%d\n",n-now+1);
	for(i=now;i<=n;i++)
		printf("%d ",a[i]);
	return 0;
}

	 		 	   	  	    							  	