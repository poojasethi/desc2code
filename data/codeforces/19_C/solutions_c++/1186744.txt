#include<stdio.h>
#include<string.h>
#include<math.h>
#include<map>
#include<iostream>
#include<algorithm>
using namespace std;
#define maxn 100010
int next[maxn],cnt[maxn];
int n,a[maxn];
struct Nodes{
	int len,id;
}p[maxn];
map<int,int>pos;
bool cmp(Nodes p1,Nodes p2)
{
	if(p1.len==p2.len)return p1.id<p2.id;
	return p1.len<p2.len;
}
int main()
{
	int i,j,k;
	while(scanf("%d",&n)!=EOF){
		pos.clear();
		for(i=1;i<=n;i++){
			scanf("%d",&a[i]);
			pos[a[i]]=n+1;
			p[i].id=i;
			p[i].len=n+1;
			cnt[i]=0;
		}
		for(i=n;i>=1;i--){
			next[i]=pos[a[i]];
			pos[a[i]]=i;
		}
		/*for(i=1;i<=n;i++){
			printf("%d ",next[i]);
		}
		putchar('\n');*/
		next[0]=n+1;
		for(i=1;i<=n;i++){
			k=next[i-1];
			for(j=next[i];j<=n;j=next[j]){
				for(;k<=n;k=next[k]){
					if(k+1==j){
						cnt[j-i]+=1;
						break;
					}else if(k+1>j){
						cnt[j-i]=1;
						break;
					}
				}
				if(k>n)cnt[j-i]=1;
				if(cnt[j-i]>=j-i){
					p[i].len=min(p[i].len,j-i);
				}
			}
			//printf("%d %d\n",i,p[i].len);
		}
		sort(p+1,p+n+1,cmp);
		int now=0;
		for(i=1;i<=n;i++){
			if(p[i].id-p[i].len+1<=now)continue;
			now=p[i].id;
		}
		printf("%d\n",n-now);
		printf("%d",a[now+1]);
		for(i=now+2;i<=n;i++){
			printf(" %d",a[i]);
		}
		putchar('\n');
	}
	return 0;
}