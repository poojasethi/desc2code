#include <cstdio>
#include <iostream>
#include <cmath>
#include <sstream>
#include <vector>
#include <map>
#include <set>
#include <complex>
#include <algorithm>

using namespace std;

typedef pair<int,int> Pair;

const int MAX_N=100000+200,Base=100000007;

int n,num[MAX_N],next[MAX_N];
unsigned long long Hash[MAX_N],p[MAX_N];

int main(){
  scanf("%d",&n);
  map<int,int> bef;
  p[0]=1;
  for (int i=1;i<=n;i++) p[i]=p[i-1]*Base;
  for (int i=1;i<=n;i++){
    scanf("%d",&num[i]);
    next[bef[num[i]]]=i;
    bef[num[i]]=i;
    Hash[i]=Hash[i-1]+num[i]*p[i-1];
  }
//   for (int i=1;i<=n;i++) cout<<Hash[i]<<' ';
//   cout<<endl;
  vector<Pair> all;
  int Min=n+1;
  for (int i=n;i>=1;i--){
    int t=next[i];
    while (t && t+(t-i)-1 <= n){
      bool bad=(Hash[t-1]-Hash[i-1])*p[t-i] != (Hash[t+(t-i)-1]-Hash[t-1]);
//       for (int j=i;j<t && !bad;j++)
// 	bad|=num[j] != num[t+j-i];
      if (!bad)
	all.push_back(Pair(t-i,i));
      t=next[t];
    }
  }
  sort(all.begin(),all.end());
  int last=1;
  for (vector<Pair> :: iterator i=all.begin();i!=all.end();i++)
    if (i->second >= last)
      last=max(last,i->first+i->second);
  printf("%d\n",n-last+1);
  for (int i=last;i<=n;i++)
    printf("%d ",num[i]);
  printf("\n");
}
