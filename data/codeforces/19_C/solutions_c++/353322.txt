#include <stdio.h>
#include <algorithm>

const int kMaxN = 100000, kMaxL = 10 * kMaxN;

std::pair<int, int> list[kMaxL];
int cnt;
int a[kMaxN], id[kMaxN];

inline bool IDCmp(int x, int y) {
  bool flag;
  if (a[x] != a[y]) flag = a[x] < a[y];
  else flag = x < y;
  return flag;
}

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", a + i);
    id[i] = i;
  }
  std::sort(id, id + n, IDCmp);
  for (int i = 0, j; i < n; ) {
    for (j = i + 1; j < n && a[id[j]] == a[id[i]]; ++j) ;
    for (int k = i; k < j; ++k)
      for (int l = k + 1; l < j; ++l)
        list[cnt++] = std::make_pair(id[l] - id[k], id[k]);
    i = j;
  }
  std::sort(list, list + cnt);
  int last = -2, length = 1, d = 0, start = 0;
  for (int i = 0; i < cnt; ++i) {
    if (list[i].second < start) continue;
    if (list[i].second == last + 1 && list[i].first == length) {
      ++last;
      d++;
    } else {
      last = list[i].second;
      length = list[i].first;
      d = 1;
    }
    if (length == d) {
      start = last + 1;
      last = -2;
      length = 1;
      d = 0;
    }
  }
  printf("%d\n", n - start);
  for (int i = start; i < n; ++i) {
    if (i != start) printf(" ");
    printf("%d", a[i]);
  }
  puts("");
  return 0;
}
