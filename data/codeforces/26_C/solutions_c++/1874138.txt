#include <cstdio>

using namespace std;

const int lim = 100;

int on, om, n, m, a, b, c;
char p[lim][lim];

int impossible() {
	printf("IMPOSSIBLE\n");
	return 0;
}

int main() {
	scanf("%i%i%i%i%i", &n, &m, &a, &b, &c);
	on = n;
	om = m;
	if(n & 1 && m & 1) return impossible();
	else if(n & 1) {
		n--;
		for(int i = 0; i < m / 2; i++) {
			p[n][2 * i] = p[n][2 * i + 1] = 'x' + (i & 1);
			a--;
		}
		if(a < 0) return impossible();
	} else if(m & 1) {
		m--;
		for(int i = 0; i < n / 2; i++) {
			p[2 * i][m] = p[2 * i + 1][m] = 'x' + (i & 1);
			b--;
		}
		if(b < 0) return impossible();
	}
	a >>= 1;
	b >>= 1;
	int s = 0;
	for(int i = 0; i < n / 2; i++) for(int j = 0; j < m / 2; j++) switch(s) {
		case 0:
			if(c--) {
				p[2 * i][2 * j] = p[2 * i + 1][2 * j] = p[2 * i][2 * j + 1] = p[2 * i + 1][2 * j + 1] = 'a' + (i & 1) + 2 * (j & 1);
				break;
			} else s++;
		case 1:
			if(a--) {
				p[2 * i][2 * j] = p[2 * i][2 * j + 1] = 'e' + (i & 1) + 2 * (j & 1);
				p[2 * i + 1][2 * j] = p[2 * i + 1][2 * j + 1] = 'i' + (i & 1) + 2 * (j & 1);
				break;
			} else s++;
		case 2:
			if(b--) {
				p[2 * i][2 * j] = p[2 * i + 1][2 * j] = 'm' + (i & 1) + 2 * (j & 1);
				p[2 * i][2 * j + 1] = p[2 * i + 1][2 * j + 1] = 'q' + (i & 1) + 2 * (j & 1);
				break;
			} else s++;
		default:
			return impossible();
	}
	for(int i = 0; i < on; i++) {
		for(int j = 0; j < om; j++) printf("%c", p[i][j]);
		printf("\n");
	}
}

