#include <limits.h>
#include <cstring>
#include <cmath>
#include <limits>
#include <cassert>
#include <string>
#include <vector>
#include <deque>
#include <algorithm>
#include <numeric>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <queue>
#include <iterator>
#include <set>
#include <map>
#include <stack>
int main()
{
  int n, m, a, b, c;
  std::cin >> n >> m >> a >> b >> c;
  std::vector<std::string> v(n, std::string(m, '*'));
  if(n%2 == 1 && m%2 == 1) {
    goto fail;
  }
  if(n%2 == 1) {
    int i = n-1;
    for(int j = 0; j < m-1; j += 2) {
      if(a > 0) {
        v[i][j] = v[i][j+1] = 'a'+(i+j/2)%2;
        --a;
      } else {
        goto fail;
      }
    }
  } else if(m%2 == 1) {
    int j = m-1;
    for(int i = 0; i < n-1; i += 2) {
      if(b > 0) {
        v[i][j] = v[i+1][j] = 'c'+(i/2+j)%2;
        --b;
      } else {
        goto fail;
      }
    }
  }
  for(int i = 0; i < n-1; i += 2) {
    for(int j = 0; j < m-1; j += 2) {
      if(c > 0) {
        v[i][j] = v[i][j+1] = v[i+1][j] = v[i+1][j+1] = 'e'+(i/2+j/2)%2;
        --c;
      } else if(a >= 2) {
        v[i][j] = v[i][j+1] = 'a'+(i+j/2)%2;
        v[i+1][j] = v[i+1][j+1] = 'a'+(i+1+j/2)%2;
        a -= 2;
      } else if(b >= 2) {
        v[i][j] = v[i+1][j] = 'c'+(i/2+j)%2;
        v[i][j+1] = v[i+1][j+1] = 'c'+(i/2+j+1)%2;
        b -= 2;
      } else {
        goto fail;
      }
    }
  }
  std::copy(v.begin(), v.end(), std::ostream_iterator<std::string>(std::cout, "\n"));
  return 0;
 fail:
  std::cout << "IMPOSSIBLE" << std::endl;
}


