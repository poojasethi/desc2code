#include <bits/stdc++.h>

using namespace std;

#define FOR(i,a,b) for(int i=a; i<=b; i++)
#define REP(i,a,b) for(int i=a; i>=b; i--)
#define FORAD(i,u) for(int i=0; i < (int)u.size();i++)
#define BUG(x) cout << x << endl
#define BUGA(x, n, a, b) for (int i = a; i <= b; i++) cout << x[i] << ' '; cout << endl;
#define ll long long
#define fi first
#define sd second
#define pb push_back
#define two(i) (1 << i)
#define getbit(x, pos) ((x >> (pos - 1)) & 1)
#define sz(x) (int)x.size()

template <class T> T gcd(T x, T y) {
    if (x > y) swap(x, y); while (x != 0) {T r = y % x; y = x; x = r; } return y;
}
template<class T> int cntbit(T s) { return __builtin_popcountll(s);}

const int inf = int(1e9);
const int Nmax = 30100;

int n, s[Nmax], f[Nmax][211][2], g[Nmax][211][2], m, res = 0;

int main() {
   //  freopen("in.inp","r",stdin);
    // freopen("","w",stdout);
    cin >> n >> m;
    FOR(i, 1, n) {
        cin >> s[i];
        s[i] += s[i - 1];
    }
    int Max = 0, Min = 0;
    FOR(i, 0, n) FOR(j, 0, m) FOR(k, 0, 1) f[i][j][k] = g[i][j][k] = -inf;
    FOR(i, 1, n) {
        f[i][1][0] = max(f[i - 1][1][0], s[i] - Min);
        f[i][1][1] = max(f[i - 1][1][1], -(s[i] - Max));
        g[i][1][0] = max(g[i - 1][1][0], f[i][1][0] + 2 * s[i]);
        g[i][1][1] = max(g[i - 1][1][1], f[i][1][1] - 2 * s[i]);
        Max = max(Max, s[i]);
        Min = min(Min, s[i]);
    }
    //cout << f[2][1][1] << endl;
    FOR(i, 2, n) FOR(j, 2, m - 1) {
        f[i][j][0] = max(f[i - 1][j][0], max(f[i - 1][j - 1][0], g[i - 1][j - 1][1] + 2 * s[i]));
        f[i][j][1] = max(f[i - 1][j][1], max(f[i - 1][j - 1][1], g[i - 1][j - 1][0] - 2 * s[i]));
        g[i][j][0] = max(g[i - 1][j][0], f[i][j][0] + 2 * s[i]);
        g[i][j][1] = max(g[i - 1][j][1], f[i][j][1] - 2 * s[i]);
    }
    Max = Min = s[n];

    REP(i, n - 1, 1) {
        res = max(res, Max - s[i] + f[i][m - 1][1]);
        res = max(res, -(Min - s[i]) + f[i][m - 1][0]);
        Max = max(Max, s[i]);
        Min = min(Min, s[i]);
    }
    cout << res << endl;
     return 0;
}
