#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(a) ((int) (a).size())
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define l lwerwer
#define r rldsvls

using namespace std;

typedef long long int64;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const long long inf64 = ((long long)1 << 62) - 1;
const long double pi = acos(-1);

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int MAXN = 32 * 1000;
const int MAXK = 210;

long long ans[MAXN][MAXK][4];
int a[MAXN];


int main () {
    ios_base::sync_with_stdio(0);
    //freopen("input.txt", "rt", stdin);
//  freopen("output.txt", "wt", stdout);

    int n, k;
    cin >> n >> k;

    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j <= k; ++j) {
            for (int l = 0; l < 4; ++l) {
                ans[i][j][l] = -inf64;
            }
        }
    }

    for (int i = 0; i <= n; ++i) {
        ans[i][0][2] = 0;
        ans[i][0][3] = 0;
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 1; j <= k; ++j) {
            ans[i + 1][j][0] = (j == 1 || j == k ? -1 : -2) * a[i] + max(max(ans[i][j][0], ans[i][j - 1][3]), ans[i][j - 1][1]);
            ans[i + 1][j][1] = (j == 1 || j == k ? 1 : 2) * a[i] + max(max(ans[i][j][1], ans[i][j - 1][2]), ans[i][j - 1][0]);
            ans[i + 1][j][2] = max(ans[i][j][2], ans[i][j][0]);
            ans[i + 1][j][3] = max(ans[i][j][3], ans[i][j][1]);
            if (j != 1 && j != k) {
                ans[i + 1][j][2] = max(ans[i + 1][j][2], max(ans[i][j - 1][2], ans[i][j - 1][0]));
                ans[i + 1][j][3] = max(ans[i + 1][j][3], max(ans[i][j - 1][3], ans[i][j - 1][1]));
            }
        }
    }

    cout << max(max(ans[n][k][0], ans[n][k][1]), max(ans[n][k][2], ans[n][k][3])) << endl;

    return 0;
}
