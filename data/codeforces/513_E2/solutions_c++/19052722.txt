#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define ff(i, a, b) for(int i = a; i <= b; i++)
#define fo(i, a, b) for(int i = a; i < b; i++)
#define fod(i, a, b) for(int i = a; i >= b; i--)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
const int INF = 1e9, N = 30010;
const ll INFL = 1e15;

typedef pair <int, int> ii;
typedef vector <int> vi;
typedef vector <ii> vii;

int n, k, a[N];
ll f[2][210][2][3][3];
// 0 -> -1    1 -> 0   2 -> 1
#define Now 0][num][completed][prev][nxt

void maximize(ll &x, ll y) { x = max(x, y); }

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> k; ff(i, 1, n) cin >> a[i];
	ff(pos, 0, 1) ff(num, 0, k) ff(completed, 0, 1) ff(prev, 0, 2) ff(nxt, 0, 2) f[pos][num][completed][prev][nxt] = -INFL;
	f[0][0][true][0][1] = 0;

	ff(pos, 0, n) {
		ff(num, 0, k) ff(completed, 0, 1) ff(prev, 0, 2) ff(nxt, 0, 2) {
			if (f[0][num][completed][prev][nxt] == -INFL) continue;
			// skip a[pos+1]
			if (completed && pos < n) maximize(f[1][num][completed][prev][nxt], f[Now]);
			// add a[pos+1] to the current segment
			if (!completed && pos < n && num > 0) maximize(f[1][num][completed][prev][nxt], f[Now] + (prev + nxt - 2) * a[pos + 1]); 
			// close the current segment
			if (!completed && pos > 0 && num > 0) maximize(f[0][num][true][prev][nxt], f[Now]);
			// start a new segment and add the new number to that segment
			if (completed && pos < n && num < k) {
				ff(newNext, 0, 2) {
					if (num == k - 1 && (newNext == 0 || newNext == 2)) continue;
					if (num != k - 1 && newNext == 1) continue;
					maximize(f[1][num + 1][false][2 - nxt][newNext], f[Now] + (-nxt + newNext) * a[pos + 1]);
				}
			}
		}
		if (pos == n) return cout << max(f[0][k][1][0][1], f[0][k][1][2][1]) << endl, 0;
		ff(num, 0, k) ff(completed, 0, 1) ff(prev, 0, 2) ff(nxt, 0, 2) f[0][num][completed][prev][nxt] = f[1][num][completed][prev][nxt], f[1][num][completed][prev][nxt] = -INFL;
	}
}