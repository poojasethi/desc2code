#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
#include <cassert>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
#define INF 1000000000
int N , K , in[30010];
vector<vi> cdp(30010 , vi(2)); //+- , -+
vector<vi> ndp(30010 , vi(2));
int f[2][2];
int main(){
  scanf("%d%d" , &N , &K);
  --K;
  for(int i=0;i<N;++i)
   scanf("%d" , &in[i]);
  int mins = 0 , maxs = 0;
  for(int i=0;i<N;++i)
   mins = min(mins , 0) + in[i],
   maxs = max(maxs , 0) + in[i],
   cdp[i][0] = maxs,
   cdp[i][1] = -mins;
  for(int p=1;p<K;++p){
   f[0][0] = f[0][1] = -INF;
   f[1][0] = f[1][1] = -INF;
   ndp[0][0] = ndp[0][1] = -INF;
   for(int i=1;i<N;++i){
    f[0][1] -= 2 * in[i];
    f[1][0] += 2 * in[i];
    relaxMax(f[0][0] , cdp[i-1][0]);
    relaxMax(f[0][1] , cdp[i-1][0] - 2*in[i]);
    relaxMax(f[1][0] , cdp[i-1][1] + 2*in[i]);
    relaxMax(f[1][1] , cdp[i-1][1]);
    ndp[i][0] = max(f[0][0] , f[1][0]);
    ndp[i][1] = max(f[0][1] , f[1][1]);
                       }
   cdp.swap(ndp);
   for(int i=1;i<N;++i)
    relaxMax(cdp[i][0] , cdp[i-1][0]),
    relaxMax(cdp[i][1] , cdp[i-1][1]);
                      }
  int ans = -INF;
  mins = maxs = 0;
  for(int i=N-1;i>0;--i)
   mins = min(mins , 0) + in[i],
   maxs = max(maxs , 0) + in[i],
   relaxMax(ans , cdp[i-1][0] - mins),
   relaxMax(ans , cdp[i-1][1] + maxs);
  printf("%d\n" , ans);
  return 0;
}
