#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <climits>
#include <algorithm>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <cassert>
#include <vector>
#define all(x) x.begin() , x.end()
#define fi first
#define se second
#define pb push_back
#define umax( x , y ) x = max( x , (y) )
#define umin( x , y ) x = min( x , (y) )
#define For( i , a ) for(int i=1;i<=a;i++)
#define ort (b+s)/2
#define y2 asrwjaelkf
#define y1 asseopirwjaelkf

using namespace std;

inline int read() {
	int res = 0 ;int neg ;
	while(true){char ch = getchar();if(ch>='0' && ch<='9' || ch=='-'){if(ch=='-') neg = -1;else neg = 1 , res = ch-'0';break;} }
	while(true){char ch = getchar();if(ch>='0' && ch<='9') res*=10 , res+=ch-'0';else break;}
	return res*neg;
}

typedef long long Lint;
typedef long double db;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;

const int maxn = 30020;
const int maxk = 220;
const int maxm = 1000020;
const int MOd = 1e7;

int a, K;
int ar[maxn];
int dn[maxn][maxk][2][2];
int dn2[maxn][maxk][2][2];

int cal( int c1, int c2, int val, int n ) {
	if( !c1 ) c1--;
	if( !c2 ) c2--;
	if( n == K ) return c1*(-val);
	if( n == 1 ) return c2*(val);
	return c1*(-val) + c2*(val);
}

int main() {
	
	scanf("%d %d",&a,&K);
	
	for(int i=1;i<=a;i++) scanf("%d",&ar[i]);
	
	for(int i=1;i<=a+1;i++)
		for(int j=1;j<=K;j++)
			for(int c1=0;c1<=1;c1++)
				for(int c2=0;c2<=1;c2++)
					dn[i][j][c1][c2] = dn2[i][j][c1][c2] = -1e9;
	dn2[a+1][K][0][0] = 0;
	dn2[a+1][K][0][1] = 0;
	dn2[a+1][K][1][0] = 0;
	dn2[a+1][K][1][1] = 0;
	for(int i=1;i<=a+1;i++)
		for(int c1=0;c1<=1;c1++)
			for(int c2=0;c2<=1;c2++)
				dn[i][K+1][c1][c2] = dn2[i][K+1][c1][c2] = 0;
	
	for(int i=a;i>=1;i--)
		for(int j=K;j>=1;j--)
			for(int c1=0;c1<=1;c1++)
				for(int c2=0;c2<=1;c2++) {
					int &ret = dn[i][j][c1][c2];
					int &ret2 = dn2[i][j][c1][c2];
					umax( ret, max( dn[i+1][j][c1][c2], cal( c1, c2, ar[i], j ) + dn2[i+1][j][c1][c2] ) );
					umax( ret2, max( max( dn[i][j+1][c2][0], dn[i][j+1][c2][1] ), cal( c1, c2, ar[i], j ) + dn2[i+1][j][c1][c2] ) );
					//~ printf("%d %d %d %d --> %d\n",i,j,c1,c2,dn[i][j][c1][c2]);
				}
	
	cout << max( dn[1][1][0][0], dn[1][1][0][1] ) << endl;
	return 0;
}
