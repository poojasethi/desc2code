#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back

inline int max(int a,int b){return a<b?b:a;}
inline int min(int a,int b){return a>b?b:a;}
inline ll max(ll a,ll b){return a<b?b:a;}
inline ll min(ll a,ll b){return a>b?b:a;}
const int mod = 1e9+7;
const int N = 1e6+10;
const ll INF = 1e18;

//#define DEBUG

#ifdef DEBUG
#define dprintf(fmt,...) fprintf(stderr,fmt,__VA_ARGS__)
#else
#define dprintf(fmt,...)
#endif

ll dp[205][2][2][2][2];
int main(){
  int n,m; scanf("%d%d",&n,&m);
  int cur=0;
  REP(i,m+3) REP(j,2) REP(k,2) REP(l,2) dp[i][j][k][l][cur]=-INF;
  while(n--){
    ll zz;int nx=cur^1;
    scanf("%lld",&zz);
    REP(i,m+3) REP(j,2) REP(k,2) REP(l,2) dp[i][j][k][l][nx]=-INF;
    REP(i,m+1 ) REP(j,2) REP(k,2) REP(l,2) if(dp[i][j][k][l][cur]>-INF){
      if(l==0){
        ll x1=dp[i][j][k][l][cur],y1=0;
        if(i==0){
          y1+=(-(2*k-1)*zz);
        }else if(i==m-1){
          y1+=(2*j-1)*zz;
        }else{
          y1+=(2*j-2*k)*zz;
        }
        dp[i][j][k][l][nx]=max(dp[i][j][k][l][nx],x1+y1);
        if(i==m&&l==1) printf("%d %d %d %d\n",i,j,k,l);
      }else{
        dp[i][j][k][l][nx]=max(dp[i][j][k][l][nx],dp[i][j][k][l][cur]);
  //      if(i==m&&l==1) printf("gg%d %d %d %d %lld %lld\n",i,j,k,l,zz,dp[i][j][k][l][cur]);
        if(i==m-1){
          ll x1=dp[i][j][k][l][cur]+(2*k-1)*zz;
          dp[i][k][0][0][nx]=max(dp[i][k][0][0][nx],x1);

        }else{
          ll x1=dp[i][j][k][l][cur]+(2*k-1)*zz;
          dp[i][k][0][0][nx]=max(dp[i][k][0][0][nx],x1+zz);
          dp[i][k][1][0][nx]=max(dp[i][k][1][0][nx],x1-zz);
        }
      }
    }
    dp[0][0][0][0][nx]=max(dp[0][0][0][0][nx],zz);
    dp[0][0][1][0][nx]=max(dp[0][0][1][0][nx],-zz);
    REP(i,m) REP(j,2) REP(k,2) dp[i+1][j][k][1][nx]=max(dp[i+1][j][k][1][nx],dp[i][j][k][0][nx]);
    cur=nx;
  }
  ll ans=0;
  REP(j,2) REP(k,2) ans=max(ans,dp[m][j][k][1][cur]);
  printf("%lld\n",ans);
  return 0;
}
