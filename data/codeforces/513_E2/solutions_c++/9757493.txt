#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <complex>
#define MINF 0xc0c0c0c0
#define INF 0x3f3f3f3f
#define MOD 1000000007

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef complex<ll> pt;

int n, k, a;
int PP[30001][201], mPP[30001][201];
int PN[30001][201], mPN[30001][201];
int NP[30001][201], mNP[30001][201];
int NN[30001][201], mNN[30001][201];

int main()
{
    ios::sync_with_stdio(0);
    cin >> n >> k;
    memset(PP, MINF, sizeof PP); memset(mPP, MINF, sizeof mPP);
    memset(PN, MINF, sizeof PN); memset(mPN, MINF, sizeof mPN);
    memset(NP, MINF, sizeof NP); memset(mNP, MINF, sizeof mNP);
    memset(NN, MINF, sizeof NN); memset(mNN, MINF, sizeof mNN);
    for (int i = 0; i <= n; ++i)
    {
		PP[i][0] = mPP[i][0] = 0;
		PN[i][0] = mPN[i][0] = 0;
		NP[i][0] = mNP[i][0] = 0;
		NN[i][0] = mNN[i][0] = 0;
    }
    for (int i = 1; i <= n; ++i)
    {
    	cin >> a;
		for (int j = 1; j <= k; ++j)
		{
			PP[i][j] = PN[i][j] = NP[i][j] = NN[i][j] = 0;
			if (j > 1)
				PP[i][j]+=a, PN[i][j]+=a, NP[i][j]-=a, NN[i][j]-=a;
			if (j < k)
				PP[i][j]+=a, PN[i][j]-=a, NP[i][j]+=a, NN[i][j]-=a;
			PP[i][j] += max(PP[i-1][j], max(mPN[i-1][j-1], mNN[i-1][j-1]));
			PN[i][j] += max(PN[i-1][j], max(mPN[i-1][j-1], mNN[i-1][j-1]));
			NP[i][j] += max(NP[i-1][j], max(mPP[i-1][j-1], mNP[i-1][j-1]));
			NN[i][j] += max(NN[i-1][j], max(mPP[i-1][j-1], mNP[i-1][j-1]));
			
			mPP[i][j] = max(mPP[i-1][j], PP[i][j]);
			mPN[i][j] = max(mPN[i-1][j], PN[i][j]);
			mNP[i][j] = max(mNP[i-1][j], NP[i][j]);
			mNN[i][j] = max(mNN[i-1][j], NN[i][j]);
		}
	}
	int ans = max(max(mPP[n][k],mPN[n][k]),max(mNP[n][k],mNN[n][k]));
	cout << ans << endl;
}
