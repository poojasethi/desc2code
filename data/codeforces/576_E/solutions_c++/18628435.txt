#include <queue>
#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define M 500500
#define col first
#define num second
#define time second
#define operation second
using namespace std;
int n,m,k,q;
struct edge{
    int x,y;
}edges[M];
pair<int,int> queries[M];
//first-color second-edge number
queue<pair<int,int> > modifictions[M];
//first-color second-time
vector<pair<int,int> > v[M<<2];
//first-color second-edge number
struct Union_Find_Set;
pair<Union_Find_Set*,int> stack[M<<2];int top;
//first-color second-operation
int color[M];
struct Union_Find_Set{
    int fa[M];
    char rank[M],dis[M];
    int Find(int x)
    {
        if(!fa[x])
            return x;
        return Find(fa[x]);
    }
    int Distance(int x)
    {
        if(!fa[x])
            return 0;
        return dis[x]^Distance(fa[x]);
    }
    void Union(int x,int y)
    {
        int fx=Find(x),fy=Find(y);
        if(fx==fy) return ;
        if(rank[fx]>rank[fy])
            swap(x,y),swap(fx,fy);
        if(rank[fx]==rank[fy])
            ++rank[fy],stack[++top]=pair<Union_Find_Set*,int>(this,-fy);
        dis[fx]=Distance(x)^Distance(y)^1;
        fa[fx]=fy;
        stack[++top]=pair<Union_Find_Set*,int>(this,fx);
    }
}dsu[51];
inline int read()
{
    int x=0;
    char ch=getchar();
    while (ch<'0'||ch>'9')
        ch=getchar();
    while (ch>='0'&&ch<='9')
    {
        x=x*10+ch-'0';
        ch=getchar();
    }
    return x;
}
void Restore(int bottom)
{
    while (top>bottom)
    {
        if (stack[top].second<0)
            stack[top].first->rank[-stack[top].second]--;
        else
            stack[top].first->fa[stack[top].second]=0;
        top--;
    }
}
void Insert(int o,int l,int r,int ql,int qr,pair<int,int> val)
{
    if (ql<=l&&r<=qr)
    {
        v[o].push_back(val);
        return ;
    }
    int mid=(l+r)>>1,lson=o<<1,rson=lson|1;
    if (qr<=mid)
        Insert(lson,l,mid,ql,qr,val);
    else
        if (ql>mid)
            Insert(rson,mid+1,r,ql,qr,val);
        else
        {
            Insert(lson,l,mid,ql,qr,val);
            Insert(rson,mid+1,r,ql,qr,val);
        }
}
void Divide_And_Conquer(int o,int l,int r)
{
    int mid=(l+r)>>1,bottom=top;
    for (int i=0;i<(signed)v[o].size();i++)
    {
        int x=edges[v[o][i].second].x;
        int y=edges[v[o][i].second].y;
        dsu[v[o][i].first].Union(x,y);
    }
    if (l==r)
    {
        Union_Find_Set &dsu=::dsu[queries[mid].col];
        int x=edges[queries[mid].num].x;
        int y=edges[queries[mid].num].y;
        if (dsu.Find(x)!=dsu.Find(y)||dsu.Distance(x)^dsu.Distance(y))
            puts("YES"),color[queries[mid].num]=queries[mid].col;
        else
            puts("NO");
        modifictions[queries[mid].num].pop();
        if (mid!=q)
            Insert(1,1,q,mid+1,modifictions[queries[mid].num].front().time,pair<int,int>(color[queries[mid].num],queries[mid].num));
    }
    else
    {
        Divide_And_Conquer(o<<1,l,mid);
        Divide_And_Conquer(o<<1|1,mid+1,r);
    }
    Restore(bottom);
}
int main()
{
    if (fopen("E.in","r")!=NULL)
    {
        freopen("E.in","r",stdin);
        freopen("E.out","w",stdout);
    }
    n=read(),m=read(),k=read(),q=read();
    for (int i=1;i<=m;i++)
        edges[i].x=read(),edges[i].y=read();
    for (int i=1;i<=q;i++)
    {
        queries[i].num=read(),queries[i].col=read();
        modifictions[queries[i].num].push(pair<int,int>(queries[i].col,i));
    }
    for (int i=1;i<=m;i++)
        modifictions[i].push(pair<int,int>(0,q));
    Divide_And_Conquer(1,1,q);
    return 0;
}

       