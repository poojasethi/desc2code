#include "bits/stdc++.h"
#define MAXN 500009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
//freopen("file.in","r",stdin);
//freopen("file.out","w",stdout);
PII qs[MAXN];
int last[MAXN],next[MAXN];
class ict{
	public:
	int from,to,rank,par,wagt;
	ict(){};
	ict make(int _from,int _to,int _rank,int _par,int _wagt){
		from=_from;
		to=_to;
		rank=_rank;
		par=_par;
		wagt=_wagt;
		return *this;
	}
};
int TIM;
struct dsu{
	int ata[MAXN],paint[MAXN],sz[MAXN];
	vector<ict>online;
	void init(int x){
		for(int i=1;i<=x;i++){
			ata[i]=i;
			sz[i]=1;
			paint[i]=0;
		}
	}
	int tap(int x){
		if(ata[x]==x)
			return x;;
		return tap(ata[x]);	
	}
	int bul(int x){
		if(ata[x]==x)
			return paint[x];
		return paint[x]^bul(ata[x]);	
	}
	void merge(int x,int y){
		TIM++;
		int c1=bul(x);	
		int c2=bul(y);
		x=tap(x);y=tap(y);
		if(x==y)
			return;
		if(sz[x]<sz[y])
			swap(x,y);
		int fr=c1==c2;	
		paint[y]^=fr;
		ata[y]=x;
		sz[x]+=sz[y];
		ict blg;	
		online.pb(blg.make(x,y,sz[y],fr,TIM));	
	}
	int ok(int x,int y){
		int c1=bul(x);
		int c2=bul(y);
		x=tap(x);y=tap(y);
		if(x==y and c1==c2)	
			return 0;
		return 1;
	}
	void reset(int x){
		while(online.size()>0 and online.back().wagt>x){
			ict son=online.back();
			sz[son.from]-=son.rank;
			paint[son.to]^=son.par;
			ata[son.to]=son.to;
			online.ppb();
		}
	}
}D[52];
vector<pair<PII,int> >s[MAXN<<2];
int u[MAXN],v[MAXN],C[MAXN];
void upd(int l,int r,int color,int indx,int nd,int x,int y){
	if(l>y or x>r)
		return;
	if(l<=x and y<=r){
		s[nd].pb(mp(mp(u[indx],v[indx]),color));
		return;
	}	
	int mid=(x+y)>>1;
	upd(l,r,color,indx,nd<<1,x,mid);
	upd(l,r,color,indx,nd<<1|1,mid+1,y);
}
int n,m,k,q;
void build(int nd,int x,int y){
	int TIMER=TIM;
	tr(it,s[nd])
		D[it->ss].merge(it->ff.ff,it->ff.ss);
	if(x==y){
		int ind=qs[x].ff;
		int col=qs[x].ss;
		if(D[col].ok(u[ind],v[ind])){
			puts("YES");
			upd(x+1,next[x]-1,C[ind]=col,ind,1,1,q);
		}
		else{
			puts("NO");
			if(C[ind])
				upd(x+1,next[x]-1,C[ind],ind,1,1,q);
		}
		return;
	}
	int mid=(x+y)>>1;
	build(nd<<1,x,mid);
	build(nd<<1|1,mid+1,y);
	for(int i=1;i<=k;i++)
		D[i].reset(TIMER);
}
int main(){
	scanf("%d%d%d%d",&n,&m,&k,&q);
	for(int i=1;i<=m;i++){
		scanf("%d%d",u+i,v+i);
		last[i]=q+1;
	}
	for(int i=1;i<=q;i++)
		scanf("%d%d",&qs[i].ff,&qs[i].ss);	
	for(int i=q;i>=1;i--){
		next[i]=last[qs[i].ff];
	//	printf("next[%d] = %d\n",i,next[i]);
		last[qs[i].ff]=i;
	}
	for(int i=1;i<=k;i++)
		D[i].init(n);
	build(1,1,q);
	return 0;
}
