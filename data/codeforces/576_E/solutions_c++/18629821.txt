#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
const int maxn=500000+10;
using namespace std;
int n,m,k,q,top;
int head[maxn<<2],cnt,color[maxn];
struct Edge{
    int u,v;
}e[maxn];
struct Query{
    int num,col;
    Query(){}
    Query(int num,int col): num(num),col(col){}
}query[maxn];
struct Node{
    int id,oper;
    Node(){}
    Node(int id,int oper): id(id),oper(oper){}
}stack[maxn<<2];
struct Store{
    int next;
    Query smg;
    Store(){}
    Store(int next,Query smg): next(next),smg(smg){}
}v[maxn<<4];
queue<int> modify[maxn];
struct UnionFindSet{
    int pre[maxn];
    char rank[maxn],dis[maxn];
    int find(int x)
    {
        return pre[x] ? find(pre[x]):x;
    }
    inline int Get_Dis(int x)
    {
        if (!pre[x])
            return 0;
        return dis[x]^Get_Dis(pre[x]);
    }
    inline void Union(int id,int x,int y)
    {
        int fx=find(x),fy=find(y);
        if (fx==fy)
            return ;
        if (rank[fx]>rank[fy])
        {
            swap(x,y);
            swap(fx,fy);
        }
        if (rank[fx]==rank[fy])
        {
            rank[fy]++;
            stack[++top]=Node(id,-fy);
        }
        dis[fx]=Get_Dis(x)^Get_Dis(y)^1;
        pre[fx]=fy;
        stack[++top]=Node(id,fx);
    }
}dsu[51];
inline int read()
{
    int x=0;
    char ch=getchar();
    while (ch<'0'||ch>'9')
        ch=getchar();
    while (ch>='0'&&ch<='9')
    {
        x=x*10+ch-'0';
        ch=getchar();
    }
    return x;
}
void Insert(int o,int l,int r,int ql,int qr,Query val)
{
    if (ql<=l&&r<=qr)
    {
        v[++cnt]=Store(head[o],val);
        head[o]=cnt;
        return ;
    }
    int mid=(l+r)>>1,lson=o<<1,rson=lson|1;
    if (qr<=mid)
        Insert(lson,l,mid,ql,qr,val);
    else
        if (ql>mid)
            Insert(rson,mid+1,r,ql,qr,val);
        else
        {
            Insert(lson,l,mid,ql,qr,val);
            Insert(rson,mid+1,r,ql,qr,val);
        }
}
inline void Restore(int bot)
{
    while (top>bot)
    {
        if (stack[top].oper<0)
            dsu[stack[top].id].rank[-stack[top].oper]--;
        else
            dsu[stack[top].id].pre[stack[top].oper]=0;
        top--;
    }
}
void solve(int o,int l,int r)
{
    int mid=(l+r)>>1,lson=o<<1,rson=lson|1,bot=top,x,y;
    for (int i=head[o],x,y;i;i=v[i].next)
    {
        x=e[v[i].smg.num].u,y=e[v[i].smg.num].v;
        dsu[v[i].smg.col].Union(v[i].smg.col,x,y);
    }
    if (l==r)
    {
        UnionFindSet &cur=dsu[query[mid].col];
        x=e[query[mid].num].u,y=e[query[mid].num].v;
        if (cur.find(x)!=cur.find(y)||cur.Get_Dis(x)^cur.Get_Dis(y))
        {
            puts("YES");
            color[query[mid].num]=query[mid].col;
        }
        else
            puts("NO");
        modify[query[mid].num].pop();
        if (mid!=q)
            Insert(1,1,q,mid+1,modify[query[mid].num].front(),Query(query[mid].num,color[query[mid].num]));
    }
    else
    {
        solve(lson,l,mid);
        solve(rson,mid+1,r);
    }
    Restore(bot);
}
int main()
{
    if (fopen("E.in","r")!=NULL)
    {
        freopen("E.in","r",stdin);
        freopen("E.out","w",stdout);
    }
    n=read(),m=read(),k=read(),q=read();
    for (int i=1;i<=m;i++)
        e[i].u=read(),e[i].v=read();
    for (int i=1;i<=q;i++)
    {
        query[i].num=read(),query[i].col=read();
        modify[query[i].num].push(i);
    }
    for (int i=1;i<=m;i++)
        modify[i].push(q);
    solve(1,1,q);
    return 0;
}

                              