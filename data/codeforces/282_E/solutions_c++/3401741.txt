#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <map>

using namespace std;

#define	MAXN	100010
#define	LL	long long

struct trie {
	map<int, trie> n;
};

trie root;
int n;
LL v[MAXN];

void insert(trie& t, LL x, int l) {
	if(l < 0) return ;
	if((x>>l)&1) insert(t.n[1], x, l-1);
	else insert(t.n[0], x, l-1);
}

LL query(trie& t, LL x, int l) {
	if(l < 0) return 0;
	if(x>>l & 1LL) {
		if(t.n.count(0)) return (1LL<<l) + query(t.n[0], x, l-1);
		else return query(t.n[1], x, l-1);
	}
	else {
		if(t.n.count(1)) return (1LL<<l) + query(t.n[1], x, l-1);
		else return query(t.n[0], x, l-1);
	}
}


int main (void) {
	int i;
	LL a, b, bsf;

	while(scanf("%d", &n) != EOF) {
		a = b = 0;
		root.n.clear();
		for(i=0; i < n; i++) {cin >> v[i]; a ^= v[i];}

		bsf = a;
		insert(root, 0, 40);
		for(i=n-1; i >= 0; i--) {
			a ^= v[i];
			b ^= v[i];
			insert(root, b, 40);
			bsf = max(bsf, query(root, a, 40));
		}
		cout << bsf << endl;
	}

	return 0;
}
