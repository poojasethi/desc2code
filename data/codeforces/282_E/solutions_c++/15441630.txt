#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
using namespace std;
#define LL long long

LL read()
{
	LL f=1,x=0;
	char ch=getchar();
	for (;ch<'0'||ch>'9';ch=getchar()) f=ch=='-'?-1:1;
	for (;ch>='0'&&ch<='9';ch=getchar()) x*=10,x+=ch-'0';
	return f*x;
}

const int N=100010,M=41;
int n,pt=1;
LL A[N],s[N],r[N],ans=0;

struct node
{
	int son[2];
}pl[N*M];

void insert(LL v)
{
	LL p=1;
	for (int i=M-1;i>=0;i--)
	{
		LL t=(v&(1ll<<i))?1:0;
		if (!pl[p].son[t]) pl[p].son[t]=++pt;
		p=pl[p].son[t];
	}
}

LL find(LL v)
{
	LL p=1,ans=0;
	for (int i=M-1;i>=0;i--)
	{
		int t=(v&(1ll<<i))?1:0;
		if (pl[p].son[t^1]) ans+=(1ll<<i),p=pl[p].son[t^1];
		else p=pl[p].son[t];
	}
	return ans;
}

int main()
{
	n=read();
	insert(0);
	for (int i=1;i<=n;i++) insert(s[i]=s[i-1]^(A[i]=read()));
	for (int i=n;i;i--) r[i]=r[i+1]^A[i],ans=max(ans,find(r[i]));
	cout<<ans;
	return 0;
}
					 			   			  		 			 		 	