from sys import stdin, stdout, setrecursionlimit
from math import sqrt
from collections import Counter, defaultdict
setrecursionlimit(12000)

def tostr(p):
    return str(p[0]) + ' ' + str(p[1])

def soln(v, ps, ws):
    specials = Counter([p[1]-p[0] for p in ps])
    if specials != Counter(ws):
        return "NO"
        
    assn = {}
    diags = defaultdict(int)
    for i, wp in enumerate(ws):
        if wp >= 0:
            assn[(diags[wp], diags[wp] + wp)] = i+1 #because 0 indexing
        else:
            assn[(diags[wp] + abs(wp), diags[wp])] = i+1 #because 0 indexing
        diags[wp] += 1
    for p in ps:
        pps = []
        if p[0] > 0:
            pps.append((p[0]-1, p[1]))
        if p[1] > 0:
            pps.append((p[0], p[1]-1))
        for pp in pps:
            if assn[pp] > assn[p]:
                return "NO"
    returnstring = "YES\n"
    returnstring += '\n'.join([tostr(val[0]) for val in sorted(assn.items(), key = lambda x: x[1])])
    return returnstring
    #print assn and "YES"

def main():
    lines = stdin.readlines()
    #lines = ['5\n', '2 0\n', '0 0\n', '1 0\n', '1 1\n', '0 1\n', '0 -1 -2 1 0']
    #lines = ['3\n', '1 0\n', '0 0\n', '2 0\n', '0 1 2']
    v = int(lines.pop(0))
    ws = [int(val) for val in lines.pop().split(' ')] 
    ps = [tuple([int(val) for val in line.split(' ')]) for line in lines]
    stdout.write(str(soln(v, ps, ws)))
    
main()