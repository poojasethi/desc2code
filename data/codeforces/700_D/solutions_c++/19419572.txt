#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 100005
#define mn2 320
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair

using namespace std;
int n, q, a[mn], cnt[mn], num[mn2], lQue[mn], rQue[mn];
int id[mn], all[mn], sqt, now[mn2];
vector<int> many;
long long ans[mn];
priority_queue< int , vector<int> , greater<int> > p;

bool com(int a, int b)
{
    if(lQue[a] / sqt == lQue[b] / sqt)
        return rQue[a] < rQue[b];
    return lQue[a] < lQue[b];
}

long long solve()
{
    long long re = 0;
    while(!p.empty())
        p.pop();
    FOR(i, 1, sqt - 1)
        num[i] = now[i];
    FOR(i, 0, int(many.size()) - 1)
    {
        int c = cnt[many[i]];
        if (c)
        {
            if (c < sqt)
                num[c] ++;
            else
                p.push(c);
        }
    }
    int bef = 0;
    FOR(i, 1, sqt - 1)
    if (num[i])
    {
        if (bef)
        {
            re += bef + i;
            num[i] --;
            if (bef + i < sqt)
                num[bef + i] ++;
            else
                p.push(bef + i);
        }
        if (num[i] > 1)
        {
            re += 1ll * i * ((num[i] >> 1) << 1);
            if ((i << 1) < sqt)
                num[i << 1] += (num[i] >> 1);
            else
                FOR(k, 1, num[i] >> 1)
                    p.push(i << 1);
            num[i] &= 1;
        }
        if (num[i])
            bef = i;
        else
            bef = 0;
    }
    if (bef)
        p.push(bef);
    while(p.size() > 1)
    {
        int f = p.top(); p.pop();
        int s = p.top(); p.pop();
        re += f + s;
        p.push(f + s);
    }
    return re;
}

void setup()
{
    cin >> n;
    sqt = sqrt(n);
    FOR(i, 1, n)
    {
        cin >> a[i];
        all[a[i]] ++;
    }
    FOR(i, 1, mn - 1)
    if (all[i] >= sqt)
        many.pb(i);
    cin >> q;
    FOR(i, 1, q)
    {
        cin >> lQue[i] >> rQue[i];
        id[i] = i;
    }
    sort(id + 1, id + q + 1, com);
}

void add(int val)
{
    cnt[val] ++;
    if (all[val] < sqt)
        now[cnt[val] - 1] --, now[cnt[val]] ++;
}

void cut(int val)
{
    cnt[val] --;
    if (all[val] < sqt)
        now[cnt[val] + 1] --, now[cnt[val]] ++;
}

void xuly()
{
    int l = 1, r = 0;
    FOR(i, 1, q)
    {
        while(r < rQue[id[i]])
            add(a[++ r]);
        while(l > lQue[id[i]])
            add(a[-- l]);
        while(r > rQue[id[i]])
            cut(a[r --]);
        while(l < lQue[id[i]])
            cut(a[l ++]);
        ans[id[i]] = solve();
    }
    FOR(i, 1, q)
        cout << ans[i] << '\n';
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
