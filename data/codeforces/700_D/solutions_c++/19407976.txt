#include <bits/stdc++.h>
using namespace std;

const int MAXS = 350;
const int MAXN = 100005;

int N, Q;
int L[MAXN];
int R[MAXN];
int q[MAXN];

bool cmp(const int &a, const int &b)
{
	if (L[a] / MAXS < L[b] / MAXS)
		return true;
	if (L[a] / MAXS == L[b] / MAXS)
	{
		return R[a] < R[b];
	}
	return false;
}

void sortQ()
{
	for (int i = 0; i < Q; i++)
		q[i] = i;
	sort(q, q + Q, cmp);
}

int a[MAXN];
int cnt[MAXN];
int cntF[MAXN];
vector<int> vals;
bool tk[MAXN];

void add(int ind)
{
	ind = a[ind];
	if (cnt[ind] > 0)
	{
		cntF[cnt[ind]]--;
	}
	cnt[ind]++;
	cntF[cnt[ind]]++;
	if (!tk[cnt[ind]])
	{
		tk[cnt[ind]] = true;
		vals.push_back(cnt[ind]);
	}
}

void rem(int ind)
{
	ind = a[ind];
	cntF[cnt[ind]]--;
	cnt[ind]--;
	if (cnt[ind] > 0)
		cntF[cnt[ind]]++;
	if (!tk[cnt[ind]])
	{
		tk[cnt[ind]] = true;
		vals.push_back(cnt[ind]);
	}
}

int sz1, sz2;
int i1, i2;
pair<int, int> q1[MAXN];
pair<int, int> q2[MAXN];

pair<int, int> front()
{
	if (i1 == sz1)
		return q2[i2];
	if (i2 == sz2)
		return q1[i1];
	return min(q1[i1], q2[i2]);
}

void pop()
{
	if (i1 == sz1)
	{
		i2++;
		return;
	}
	if (i2 == sz2)
	{
		i1++;
		return;
	}
	if (q1[i1] < q2[i2])
		i1++;
	else
		i2++;
}

void changeFront(int y)
{
	if (i1 == sz1)
	{
		q2[i2].second = y;
		return;
	}
	if (i2 == sz2)
	{
		q1[i1].second = y;
		return;
	}
	if (q1[i1] < q2[i2])
		q1[i1].second = y;
	else
		q2[i2].second = y;
}

int sz()
{
	return sz1 + sz2 - i1 - i2;
}

int process()
{
	int j = 0;
	for (int i = 0; i < vals.size(); i++)
	{
		if (cntF[vals[i]] > 0)
		{
			vals[j] = vals[i];
			j++;
		}
		else
		{
			tk[vals[i]] = false;
		}
	}
	vals.resize(j);
	sort(vals.begin(), vals.end());
	sz1 = vals.size();
	sz2 = 0;
	i2 = 0;
	i1 = 0;
	for (int i = 0; i < vals.size(); i++)
		q1[i] = make_pair(vals[i], cntF[vals[i]]);
	int res = 0;
	while (sz() > 1 || front().second > 1)
	{
		pair<int, int> t1, t2;
		t1 = front();
		if (t1.second > 1)
		{
			res += t1.first*(t1.second - (t1.second&1));
			q2[sz2++] = make_pair(2*t1.first, t1.second / 2);
			if (t1.second&1)
				changeFront(1);
			else
				pop();
			continue;
		}
		pop();
		t2 = front();
		res += t1.first + t2.first;
		t2.second--;
		if (t2.second == 0)
			pop();
		else
			changeFront(t2.second);
		q2[sz2++] = make_pair(t1.first + t2.first, 1);
	}
	return res;
}

int ans[MAXN];

int main()
{
	scanf("%d", &N);
	for (int i = 0; i < N; i++)
		scanf("%d", a+i);
	scanf("%d", &Q);
	for (int i = 0; i < Q; i++)
	{
		scanf("%d %d", L+i, R+i);
		L[i]--;
		R[i]--;
	}
	sortQ();
	int l, r;
	l = 0;
	r = -1;
	for (int i = 0; i < Q; i++)
	{
		while (r < R[q[i]])
			add(++r);
		while (r > R[q[i]])
			rem(r--);
		while (l < L[q[i]])
			rem(l++);
		while (l > L[q[i]])
			add(--l);
		ans[q[i]] = process();
	}
	for (int i = 0; i < Q; i++)
		printf("%d\n", ans[i]);
}