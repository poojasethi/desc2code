import sys

#sys.stdin = open("in.txt", "r")

def cal_sg(d):
    ret = 0
    for i in d:
        d[i].sort()
        tot, pre = 0, 0
        for t in d[i]:
            tot += max(0, t[0] - pre)
            pre = max(t[1], pre)
        ret ^= tot
    return ret

def cal_ans(d, val):
    #print d, val
    for i in d:
        tot, pre = 0, 0
        for t in d[i]:
            tot += max(0, t[0] - pre)
            pre = max(t[1], pre)
        rem = tot ^ val
        if rem >= tot:
            continue

        off = tot - rem
        pre = 0
        for t in d[i]:
            off -= max(0, t[0] - pre)
            pre = max(t[1], pre)
            if off <= 0:
                return [i, t[0] + off]
    return []

def solve():
    try:
        n, m, K = map(int, raw_input().split())
    except:
        return False

    dx = {}
    dy = {}
    for i in range(0, K):
        xb, yb, xe, ye = map(int, raw_input().split())
        if xb == xe:
            if xb not in dx:
                dx[xb] = [[m, m]]
            dx[xb].append([min(yb, ye), max(yb, ye)])
        else:
            if yb not in dy:
                dy[yb] = [[n, n]]
            dy[yb].append([min(xb, xe), max(xb, xe)])

    if (n - len(dx) - 1) % 2:
        for i in xrange(1, n):
            if i not in dx:
                dx[i] = [[m, m]]
                break
    if (m - len(dy) - 1) % 2:
        for i in xrange(1, m):
            if i not in dy:
                dy[i] = [[n, n]]
                break

    val = cal_sg(dx) ^ cal_sg(dy)

    if val:
        print 'FIRST'
        ans = cal_ans(dx, val)
        if len(ans) == 2:
            print ans[0], 0, ans[0], ans[1]
        else:
            ans = cal_ans(dy, val)
            print 0, ans[0], ans[1], ans[0]
    else:
        print 'SECOND'
    return True

if __name__ == '__main__':
    while True:
        if not solve():
            break
