#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cassert>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef pair<int,int> pi;
typedef long long ll;
const int inf=(int)1e9;
const double EPS=1e-9, INF=1e12;

int w, h, k;
map<int, vector<pi> > tate, yoko;
map<int, int> tatelen, yokolen;

int calc(int &sz, int len, vector<pi> &v){
	sort(all(v));
	map<int, int> m;
	m[0] = m[len] = 0;
	
	rep(i, v.size()) m[v[i].first]++, m[v[i].second]--;
	int s = 0, p = 0;
	sz = 0;
	each(i, m){
		if(s == 0) sz += i->first - p;
		s += i->second;
		p = i->first;
	}
	return sz;
}
int calc2(int sz, int len, vector<pi> &v){
	map<int, int> m;
	m[0] = m[len] = 0;
	rep(i, v.size()) m[v[i].first]++, m[v[i].second]--;
	int s = 0, p = 0, sum = 0;
	each(i, m){
		if(s == 0){
			int t = i->first - p;
			if(sum <= sz && sz <= sum + t) return p + sz - sum;
			sum += t;
		}
		s += i->second;
		p = i->first;
	}
	assert(0);
}

int main(){
	cin >> w >> h >> k;
	rep(i, k){
		int x, y, X, Y;
		cin >> x >> y >> X >> Y;
		if(x > X) swap(x, X);
		if(y > Y) swap(y, Y);
		if(x == X) tate[x].pb(mp(y, Y));
		else yoko[y].pb(mp(x, X));
	}
	int sum = 0;
	each(i, tate) sum ^= calc(tatelen[i->first], h, i->second);
	each(i, yoko) sum ^= calc(yokolen[i->first], w, i->second);
	if((w - 1 - tate.size()) % 2) sum ^= h;
	if((h - 1 - yoko.size()) % 2) sum ^= w;
	
	if(sum == 0){
		cout << "SECOND" << endl;
		return 0;
	}
	cout << "FIRST" << endl;
	
	each(i, tatelen){
		int l = i->second;
		if((sum ^ l) <= l){
			int ans = calc2(tatelen[i->first] - (sum ^ l), h, tate[i->first]);
			cout << i->first << " " << 0 << " " << i->first << " " << ans << endl;
			return 0;
		}
	}
	each(i, yokolen){
		int l = i->second;
		if((sum ^ l) <= l){
			int ans = calc2(yokolen[i->first] - (sum ^ l), w, yoko[i->first]);
			cout << 0 << " " << i->first << " " << ans << " " << i->first << endl;
			return 0;
		}
	}
	if(tate.size() < w - 1 && (sum ^ h) <= h){
		for(int i = 1 ; i < w; i++) if(!tate.count(i)){
			cout << i << " " << 0 << " " << i << " " << h - (sum ^ h) << endl;
			return 0;
		}
	}
	for(int i = 1 ; i < h; i++) if(!yoko.count(i)){
		cout << 0 << " " << i << " " << w - (sum ^ w) << " " << i << endl;
		return 0;
	}
	
	return 0;
}
