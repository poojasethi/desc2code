#include<algorithm>
#include<cassert>
#include<cstring>
#include<cstdio>
#include<vector>
#include<queue>
#include<set>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b);i>=(e);--i)
#define FOReach(it,V) for(__typeof((V).begin()) it=(V).begin();it!=(V).end();++it)

#define PB push_back
#define ALL(V) (V).begin(),(V).end()
#define SIZE(V) ((int)(V).size())

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
	#define debug(...) fprintf(stderr, __VA_ARGS__)
#else
	#define debug(...)
#endif

int stmp;
#define scanf stmp=scanf


const int MAX = 100000;
const int INF = 1000000001;

map<int,VPII> hor, ver;

int n, m, k;

int nimber(const VPII &V, int z) {
	int ret = 0, s = 0, last = 0;
	FOReach(it,V)
	{
		if(s == 0) ret += (it->ST - last);
		s += it->ND;
		last = it->ST;
	}
	ret += (z - last);
	return ret;
}

int move(int t, const VPII &V, int z) {
	int ret = 0, s = 0, last = 0;
	FOReach(it,V)
	{
		if(s == 0) ret += (it->ST - last);
		if(ret >= t)
			return it->ST - (ret - t);
		s += it->ND;
		last = it->ST;
	}
	return last + (t - ret);
}

void solve() {
	int sum = 0;
	FOReach(it,ver)
	{
		sort(ALL(it->ND));
		sum ^= nimber(it->ND, m);
	}
	FOReach(it,hor)
	{
		sort(ALL(it->ND));
		sum ^= nimber(it->ND, n);
	}
	if((n-1-SIZE(ver))&1) sum ^= m;
	if((m-1-SIZE(hor))&1) sum ^= n;
	if(sum) {
		printf("FIRST\n");
		FOReach(it,ver)
		{
			int nb = nimber(it->ND, m);
			if(nb > (sum^nb)) {
				int t = nb - (sum^nb);
				int r = move(t, it->ND, m);
				printf("%d %d %d %d\n", it->ST, 0, it->ST, r);
				return;
			}
		}
		FOReach(it,hor)
		{
			int nb = nimber(it->ND, n);
			if(nb > (sum^nb)) {
				int t = nb - (sum^nb);
				int r = move(t, it->ND, n);
				printf("%d %d %d %d\n", 0, it->ST, r, it->ST);
				return;
			}
		}
		int w = 1;
		for(;w < n && ver.count(w);++w);
		if(w < n && m > (sum^m)) {
			int t = m - (sum^m);
			printf("%d %d %d %d\n", w, 0, w, t);
			return;
		}
		w = 1;
		for(;w < m && hor.count(w);++w);
		if(w < m && n > (sum^n)) {
			int t = n - (sum^n);
			printf("%d %d %d %d\n", 0, w, t, w);
			return;
		}
		assert(false);
	}
	else
		printf("SECOND\n");
}

int main(int argc, char *argv[]) {
	scanf("%d %d %d", &n, &m, &k);
	while(k--)
	{
		int x1, x2, y1, y2;
		scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
		if(x1 == x2) {
			ver[x1].PB(MP(min(y1, y2), -1));
			ver[x1].PB(MP(max(y1, y2), 1));
		}
		else {
			hor[y1].PB(MP(min(x1, x2), -1));
			hor[y1].PB(MP(max(x1, x2), 1));
		}
	}
	solve();
	return 0;
}

