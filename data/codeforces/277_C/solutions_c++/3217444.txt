#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <ctime>
#include <cassert>
#include <queue>

using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define forit(it,con) for (typeof(con.begin()) it = con.begin(); it != con.end(); ++it)
#define f0(a) memset(a, 0, sizeof(a))
#define all(v) v.begin(), v.end()
#define pii pair<int,int>
#define vi vector<int>
#define ll long long

#ifdef WIN32
	#define I64 "%I64d"
#else 
	#define I64 "%lld"

#endif
const int maxn = (int)2e6;
int n, m, k, An, ans;

vector<pair<int, pii> > ver, hor;
pii A[maxn];

void Print(int x, bool ver, int need, int m) {
	
	int op = 0, un = 0;
	
	for (int k = 0; k < An; ++k) {
		if (op > 0) un += (A[k].f - A[k - 1].f);
		
		if (A[k].f - un >= need) {
			int yl = 0, yr = A[k].f;
			yr -= (A[k].f - un) - need;
			if (ver) {
				printf("%d %d ", x, yl);
				printf("%d %d\n", x, yr);
			} else {
				printf("%d %d ", yl, x);
				printf("%d %d\n", yr, x);
			}
	      	exit(0);			
		}
		if (A[k].s == -1) op++; else
		op--;
	}

	int yl = 0, yr = m;
	yr -= (m - un) - need;
	if (ver) {
		printf("%d %d ", x, yl);
		printf("%d %d\n", x, yr);
	} else {
		printf("%d %d ", yl, x);
		printf("%d %d\n", yr, x);
	}
	exit(0);			
}

void doit(vector<pair<int, pii> > &v, int n, int m, bool print, bool ver) {

	sort(all(v));

	int vn = v.size();

	int pol = 0, last = 0, fre;
	
	for (int i = 0; i < vn; ) {
	
		if (v[i].f - last > 1) {
			fre = last + 1;
		}

		last = v[i].f;
		
		int j = i;
		while (j < vn && v[i].f == v[j].f) 
			++j;

		An = 0;
		for (int k = i; k < j; ++k) {
			A[An++] = mp(v[k].s.f, -1);
			A[An++] = mp(v[k].s.s, 1);
		}

		sort(A, A + An);
	
		int op = 0, un = 0;
		for (int k = 0; k < An; ++k) {
			if (op > 0) un += (A[k].f - A[k - 1].f);
			if (A[k].s == -1) op++; else
			op--;
		}

		pol++; 
		
		if (!print) ans ^= (m - un); else {
			int xod = ((m - un) ^ ans);

			if (xod < (m - un)) { 
				Print(v[i].f, ver, (m - un) - xod, m);
			}
		}
		i = j;
	}
	if (last != n - 1) fre = n - 1;

	int rem = n - 1 - pol;

	if (rem & 1) {
		if (!print) 
			ans ^= m;
		else {
			int xod = (m ^ ans);
			if (xod < m) {
				An = 0;
				Print(fre, ver, m - xod, m); 
			}
		}
	}
}
int main() {
	#ifdef LOCAL
		freopen("in","r",stdin);
	#endif  

	scanf("%d%d%d", &n, &m, &k);
	for (int i = 0; i < k; ++i) {
		int xl, xr, yl, yr;
		scanf("%d%d%d%d", &xl, &yl, &xr, &yr);
		
		if (xl == xr) {
			if (yl > yr) swap(yl, yr);
			ver.pb(mp(xl, mp(yl, yr)));
		
		} else if (yl == yr) {
			if (xl > xr) swap(xl, xr);
			hor.pb(mp(yl, mp(xl, xr)));
		}
	}

	doit(ver, n, m, false, true);
	doit(hor, m, n, false, false);
	if (ans == 0) puts("SECOND"); else {
		puts("FIRST");
		doit(ver, n, m, true, true);
		doit(hor, m, n, true, false);
		assert(false);
	}
	return 0;
}

