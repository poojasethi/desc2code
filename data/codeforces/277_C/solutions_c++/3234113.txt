#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<fstream>
#include<map>
#include<ctime>
#include<set>
#include<queue>
#include<cmath>
#include<vector>
#include<bitset>
#include<functional>
#define x first
#define y second
#define mp make_pair
#define pb push_back
using namespace std;

typedef long long LL;
typedef double ld;

int n,m,k;
map<int,vector< pair<int,int> > > rr,ww;
map<int,vector< pair<int,int> > > dr,dw;
map<int,int> sumr,sumw;

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
	int i;
	scanf("%d%d%d",&n,&m,&k);
	int x1,y1,x2,y2;
	for(i=1;i<=k;++i)
	{
		scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
		if(x1==x2)
		{
			if(y1>y2)swap(y1,y2);
			rr[x1].pb(mp(y1,y2));
		}
		else
		{
			if(x1>x2)swap(x1,x2);
			ww[y1].pb(mp(x1,x2));
		}
	}
	int ans=0;
	if((n-1-rr.size())%2==1)ans^=m;
	if((m-1-ww.size())%2==1)ans^=n;
	map<int,vector< pair<int,int> > > ::iterator it;
	for(it=rr.begin();it!=rr.end();++it)
	{
		sort(it->y.begin(),it->y.end());
		int l=0,sum=0;
		size_t i;
		for(i=0;i<it->y.size();++i)
		{
			int x=it->y[i].x,y=it->y[i].y;
			if(l<x)
			{
				dr[it->x].pb(mp(l,x));
				sum+=x-l;
			}
			l=max(y,l);
		}
		if(l<m)
		{
			dr[it->x].pb(mp(l,m));
			sum+=m-l;
		}
		sumr[it->x]=sum;
		ans^=sum;
	}
	for(it=ww.begin();it!=ww.end();++it)
	{
		sort(it->y.begin(),it->y.end());
		int l=0,sum=0;
		size_t i;
		for(i=0;i<it->y.size();++i)
		{
			int x=it->y[i].x,y=it->y[i].y;
			if(l<x)
			{
				dw[it->x].pb(mp(l,x));
				sum+=x-l;
			}
			l=max(y,l);
		}
		if(l<n)
		{
			dw[it->x].pb(mp(l,n));
			sum+=n-l;
		}
		ans^=sum;
		sumw[it->x]=sum;
	}
	if(!ans)
		printf("SECOND\n");
	else
	{
		printf("FIRST\n");
		int c=ans^m;
		if(c<=m)
		{
			for(i=1;i<n;++i)
				if(rr[i].size()==0)
				{
					printf("%d %d %d %d\n",i,0,i,m-c);
					return 0;
				}
		}
		c=ans^n;
		if(c<=n)
		{
			for(i=1;i<m;++i)
				if(ww[i].size()==0)
				{
					printf("%d %d %d %d\n",0,i,n-c,i);
					return 0;
				}
		}
		for(it=dr.begin();it!=dr.end();++it)
		{
			size_t i;
			int k=sumr[it->x];
			int need=k^ans;
			if(need>k)continue;
			need=k-need;
			for(i=0;i<it->y.size();++i)
			{
				int x=it->y[i].x,y=it->y[i].y;
				if(y-x>=need)
				{
					printf("%d %d %d %d\n",it->x,it->y[0].x,it->x,x+need);
					return 0;
				}
				need-=y-x;
			}
		}
		for(it=dw.begin();it!=dw.end();++it)
		{
			size_t i;
			int k=sumw[it->x];
			int need=k^ans;
			if(need>k)continue;
			need=k-need;
			for(i=0;i<it->y.size();++i)
			{
				int x=it->y[i].x,y=it->y[i].y;
				if(y-x>=need)
				{
					printf("%d %d %d %d\n",it->y[0].x,it->x,x+need,it->x);
					return 0;
				}
				need-=y-x;
			}
		}
	}
	return 0;
}
