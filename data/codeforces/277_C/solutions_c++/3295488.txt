#include<iostream>
#include<fstream>
#include<sstream>
#include<cstdio>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<cstring>
using namespace std;

#define FOR(I,A,B) for (int I=int(A);I<int(B);++I)
#define MEM(A,B) memset(A,B,sizeof(A))
#define CPY(A,B) memcpy(A,B,sizeof(B))
#define FIN(A) freopen(A, "r", stdin)
#define FOUT(A) freopen(A, "w", stdout)
#define f first
#define s second
#define mp(A, B) make_pair(A, B)
typedef long long LL;
typedef vector<pair<int, int> > VP;

int n[2];
int k;
map<int, VP> line[2];

int calc(int len, VP &vec) {
    sort(vec.begin(), vec.end());
    int l = 0, r = 0;
    FOR(i, 0, vec.size()) {
        if (r < vec[i].f) l = r = vec[i].f;
        len += r;
        r = max(r, vec[i].s);
        len -= r;
    }
    return len;
}
pair<int, int> cut(int len, VP &vec, int sg) {
    int _sg = calc(len, vec);
    sg ^= _sg;
    sg = _sg - sg;
    if (sg < 0) return mp(0, -1);
    int l = 0, r = 0, tmp = 0;
    FOR(i, 0, vec.size()) {
        if (r < vec[i].f) {
            tmp += vec[i].f - r;
            l = r = vec[i].f;
        }
        if (tmp >= sg) break;
        r = max(r, vec[i].s);
    }
    return mp(0, l - (tmp - sg));
}
int main() {
    //freopen("in.txt", "r", stdin);
    cin >> n[0] >> n[1] >> k;
    FOR(i, 0, k) {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        if (x1 > x2) swap(x1, x2);
        if (y1 > y2) swap(y1, y2);
        if (x1 == x2) line[1][x1].push_back(mp(y1, y2));
        else line[0][y1].push_back(mp(x1, x2));
    }
    int sg = 0;
    FOR(i, 0, 2) {
        if ((n[i ^ 1] - line[i].size()) % 2 == 0) {
            FOR(j, 1, n[i ^ 1])
                if (!line[i].count(j)) {
                    line[i][j];
                    break;
                }
        }
        for (map<int, VP> :: iterator it = line[i].begin(); it != line[i].end(); ++it) {
            it->s.push_back(mp(n[i], n[i]));
            sg ^= calc(n[i], it->s);
        }
    }
    if (sg) {
        cout << "FIRST" << endl;
        FOR(i, 0, 2) {
            for (map<int, VP> :: iterator it = line[i].begin(); it != line[i].end(); ++it) {
                pair<int, int> se = cut(n[i], it->s, sg);
                if (se.f <= se.s) {
                    if (i) cout << it->f << " " << se.f << " " << it->f << " " << se.s << endl;
                    else cout << se.f << " " << it->f << " " << se.s << " " << it->f << endl; 
                    return 0;
                }
            }
        }
    }
    else cout << "SECOND" << endl;
    return 0;
}
