#include<cstdio>
#include<vector>
#include<map>
#include<algorithm>
using namespace std;
map<int,int>hashc,hashr,antic,antir;
vector<pair<int,int> >col[120000],row[120000];
int c,r;// c---n r---m;
int n,m,k;
int x1,x2,y1,y2,ans,last;
int valc[120000];
int valr[120000];
int main()
{
	scanf("%d %d %d",&n,&m,&k);
	while (k--)
	{
		scanf("%d %d %d %d",&x1,&y1,&x2,&y2);
		if(x1==x2)
		{
			if(y1>y2)swap(y1,y2);
			if(hashc.count(x1)==0)
			{
				c++;
				antic[c]=x1;
				hashc[x1]=c;
			}
			col[hashc[x1]].push_back(make_pair(y1,y2));
		}
		else
		{
			if(x1>x2)swap(x1,x2);
			if(hashr.count(y1)==0)
			{
				r++;
				antir[r]=y1;
				hashr[y1]=r;
			}
			row[hashr[y1]].push_back(make_pair(x1,x2));
		}
	}
	for (int i=1;i<=c;i++)
	{
		last=0;
		sort(col[i].begin(),col[i].end());
		for (int j=0;j<col[i].size();j++)
		{
			if(col[i][j].second<last)continue;
			valc[i]+=col[i][j].second-max(last,col[i][j].first);
			last=col[i][j].second;
		}
		valc[i]=m-valc[i];
		ans^=valc[i];//printf("%d %d %d\n",antic[i],valc[i],ans);
	}
	for (int i=1;i<=r;i++)
	{
		last=0;
		sort(row[i].begin(),row[i].end());
		for (int j=0;j<row[i].size();j++)
		{
			if(row[i][j].second<last)continue;
			valr[i]+=row[i][j].second-max(last,row[i][j].first);
			last=row[i][j].second;
		}
		valr[i]=n-valr[i];
		ans^=valr[i];//printf("%d %d %d\n",antir[i],valr[i],ans);
	}
	if(n%2==c%2)ans^=m;
	if(m%2==r%2)ans^=n;
//	printf("%d\n",ans);
	if(ans!=0)
	{
		printf("FIRST\n");
		for (int i=1;i<n;i++)
		{
			if(hashc.count(i)==0)
			{
				antic[0]=i;
				valc[0]=m;
				break;
			}
		}
		for (int i=1;i<m;i++)
		{
			if(hashr.count(i)==0)
			{
				antir[0]=i;
				valr[0]=n;
				break;
			}
		}
		for (int i=0;i<=c;i++)
		{
			if((ans^valc[i])<valc[i])
			{
				last=0;
				int tp2=0,tp1=valc[i]-(ans^valc[i]),res;//=tp1;
				col[i].push_back(make_pair(m+1,m+1));
				for (int j=0;j<col[i].size();j++)
				{
					if(col[i][j].first<last)
					{
						last=max(last,col[i][j].second);
						continue;
					}
					tp2+=col[i][j].first-last;
					if(tp2>=tp1)
					{
						res=col[i][j].first-(tp2-tp1);
						break;
					}
					last=max(last,col[i][j].second);
				}
				printf("%d %d %d %d\n",antic[i],0,antic[i],res);
				return 0;
			}
		}
		for (int i=0;i<=r;i++)
		{
			if((ans^valr[i])<valr[i])
			{
				last=0;
				row[i].push_back(make_pair(n+1,n+1));
				int tp2=0,tp1=valr[i]-(ans^valr[i]),res;//=tp1;
				for (int j=0;j<row[i].size();j++)
				{
					if(row[i][j].first<last)
					{
						last=max(last,row[i][j].second);
						continue;
					}
					tp2+=row[i][j].first-last;
					if(tp2>=tp1)
					{
						res=row[i][j].first-(tp2-tp1);
						break;
					}
					last=max(last,row[i][j].second);
				}
				printf("%d %d %d %d\n",0,antir[i],res,antir[i]);
				return 0;
			}
		}
	}
	else
	{
		printf("SECOND\n");
	}
	return 0;
}
