#include <map>
#include <vector>
#include <cstdio>
#include <iostream>
#include <algorithm>
#define REP(i, n) for (int i = 0; i < int(n); ++i)
#define FOR(i, c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define ALL(c) (c).begin(), (c).end()
using namespace std;
template<typename T> inline void checkMin(T& a, T b) { if (a > b) a = b; }
template<typename T> inline void checkMax(T& a, T b) { if (a < b) a = b; }

int n, m;
map<int, vector< pair<int, int> > > ver, hor;

int gao(vector< pair<int, int> >& pv, int L) {
	pv.push_back(make_pair(L, L));
	sort(ALL(pv));
	int left = 0, ans = 0;
	FOR (i, pv) {
		int l = i->first, r = i->second;
		if (left < l) ans += l - left;
		checkMax(left, r);
	}
	return ans;
}

int gao2(vector< pair<int, int> >& pv, int len) {
	int left = 0, ans = 0;
	FOR (i, pv) {
		int l = i->first, r = i->second;
		if (left < l) {
			if (ans + (l - left) >= len) {
				return left + (len - ans);
			}
			ans += l - left;
		}
		checkMax(left, r);
	}
	return -1;
}

void put(int x1, int y1, int x2, int y2) {
	cout << x1 << " " << y1 << " ";
	cout << x2 << " " << y2 << "\n";
}

int main() {
	std::ios_base::sync_with_stdio(false);
	int k;
	cin >> n >> m >> k;
	REP (i, k) {
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;
		if (x1 > x2) swap(x1, x2);
		if (y1 > y2) swap(y1, y2);
		if (x1 == x2) ver[x1].push_back(make_pair(y1, y2));
		else if (y1 == y2) hor[y1].push_back(make_pair(x1, x2));
	}
	int ans = 0;
	FOR (i, ver) ans ^= gao(i->second, m);
	ans ^= (n - 1 - (int)ver.size()) % 2 == 1 ? m : 0;
	FOR (i, hor) ans ^= gao(i->second, n);
	ans ^= (m - 1 - (int)hor.size()) % 2 == 1 ? n : 0;
	if (ans != 0) {
		cout << "FIRST\n";
		if ((int)ver.size() < n - 1 && (ans ^ m) <= m) {
			int x = 1;
			while (ver.count(x)) ++x;
			put(x, 0, x, m - (ans ^ m));
		} else if ((int)hor.size() < m - 1 && (ans ^ n) <= n) {
			int y = 1;
			while (hor.count(y)) ++y;
			put(0, y, n - (ans ^ n), y);
		} else {
			FOR (i, ver) {
				int len = gao(i->second, m), to;
				if ((ans ^ len) <= len && (to = gao2(i->second, len - (ans ^ len))) != -1) {
					put(i->first, 0, i->first, to);
					return 0;
				}
			}
			FOR (i, hor) {
				int len = gao(i->second, n), to;
				if ((ans ^ len) <= len && (to = gao2(i->second, len - (ans ^ len))) != -1) {
					put(0, i->first, to, i->first);
					return 0;
				}
			}
		}
	} else {
		cout << "SECOND\n";
	}
	return 0;
}
