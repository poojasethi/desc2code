#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
using namespace std;
struct ppp{
    int k,l,r;
}a[220000];
int i,j,k,l,n,m,ans,tot1,tot2,x1,y1,x2,y2;
ppp make(int k,int l,int r){
    if(l>r)swap(l,r);
    ppp res={k,l,r};
    return res;
}
bool cmp(const ppp&a,const ppp&b){
    return a.k<b.k || a.k==b.k && a.l<b.l;
}
void answer(int dir,int k,int l,int r){
    if(dir==0)
        printf("%d %d %d %d\n",k,l,k,r);
    else printf("%d %d %d %d\n",l,k,r,k);
//  system("pause");
    exit(0);
}
void work(int dir,int l,int r,int N,int M,int fl){
    int i,j,R,res,num=0,O=0;
    if(N &&(l>r || a[l].k!=1))O=1;
    for(i=l;i<=r;i=j){
        res=0;
        R=0;
        for(j=i;a[j].k==a[i].k;++j){
            if(a[j].l>R)res+=a[j].l-R,R=a[j].r;
            else R=max(R,a[j].r);
        }
        res+=M-R;
        if(fl){
            if(res>=(res^ans)){
                int Res=0,need=res-(res^ans);
                R=0;
                for(int k=i;k<j;++k){
                    if(a[k].l>R){
                        if(a[k].l-R<need)need-=a[k].l-R;
                        else{
                            answer(dir,a[k].k,0,R+need);
                        }
                        R=a[k].r;
                    }
                    else R=max(R,a[k].r);
                }
                answer(dir,a[i].k,0,R+need);
            }
        }
        if(!fl)ans^=res;
        num++;
        if(a[i].k!=N && a[i].k+1!=a[j].k)O=a[i].k+1;
    }
    if(!fl)
        if((N-num)&1)ans^=M;
        else;
    else{
        if(O && M>=(M^ans))answer(dir,O,0,M-(M^ans));
    }
}
int main(){
    scanf("%d%d%d",&n,&m,&k);
    tot1=0; tot2=k;
    for(i=1;i<=k;++i){
        scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
        if(x1==x2)a[++tot1]=make(x1,y1,y2);
        else a[++tot2]=make(y1,x1,x2);
    }
    sort(a+1,a+tot1+1,cmp);
    sort(a+k+1,a+tot2+1,cmp);
    work(0,1,tot1,n-1,m,0);
    work(1,k+1,tot2,m-1,n,0);
    if(ans){
//      printf("%d\n",ans);
        printf("FIRST\n");
        work(0,1,tot1,n-1,m,1);
        work(1,k+1,tot2,m-1,n,1);
    }
    else printf("SECOND\n");
//  system("pause");
}