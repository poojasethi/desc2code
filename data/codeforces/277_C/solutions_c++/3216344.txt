#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <set>
#include <map>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#define maxl 1000000000
#define maxn 101000
using namespace std;

//typedef long long ll;
typedef set<int>::iterator IT;

map<int,int> mm[2];
int tot,r,c;
int xz[maxn],dy[maxn],other[maxn];
vector<pair<int,int> > v[maxn];

void tj(int id,int x,int be,int en){
	int p;
	if(be>en)swap(be,en);
	if(mm[id].count(x)){
		p=mm[id][x];
	}else {
		mm[id][x]=++tot;
		xz[tot]=id;
		dy[tot]=x;
		p=tot;
	}
	v[p].push_back(make_pair(be,en));
}

int getOther(int id,vector<pair<int,int> > &vv){
	sort(vv.begin(),vv.end());
	vector<pair<int,int> > tmp;
	int ll=vv[0].first,rr=vv[0].second,i;
	for(i=1;i<vv.size();++i){
		if(vv[i].first<=rr)rr=max(vv[i].second,rr);else {
			tmp.push_back(make_pair(ll,rr));
			ll=vv[i].first;rr=vv[i].second;
		}
	}
	tmp.push_back(make_pair(ll,rr));
	vv=tmp;
	int ans;
	if(xz[id]==0)ans=c;else ans=r;
	for(i=0;i<tmp.size();++i)ans-=tmp[i].second-tmp[i].first;
	return ans;
}

void out(int xz,int dy,int l){
	if(xz==0){
		printf("%d %d %d %d\n",dy,0,dy,l);
	}else {
		printf("%d %d %d %d\n",0,dy,l,dy);
	}
}

void lookfor(int id,int need){
	if(v[id][0].first>=need){
		out(xz[id],dy[id],need);
		return;
	}
	need-=v[id][0].first;
	int i;
	for(i=1;i<v[id].size();++i){
		if(v[id][i].first-v[id][i-1].second>=need){
			out(xz[id],dy[id],v[id][i-1].second+need);
			return;
		}
		need-=v[id][i].first-v[id][i-1].second;
	}
	out(xz[id],dy[id],v[id][v[id].size()-1].second+need);
}
	

int main(){
	int n,i,x,y,xx,yy,ans,need;
	scanf("%d%d%d",&r,&c,&n);
	tot=0;
	for(i=1;i<=n;++i){
		scanf("%d%d%d%d",&x,&y,&xx,&yy);
		if(x==xx)tj(0,x,y,yy);else tj(1,y,x,xx);
	}
	//cout<<tot<<endl;
	for(i=1;i<=tot;++i)other[i]=getOther(i,v[i]);
	ans=0;
	if((r-1-mm[0].size())%2==1)ans^=c;
	if((c-1-mm[1].size())%2==1)ans^=r;
	for(i=1;i<=tot;++i)ans^=other[i];
	if(ans==0){
		printf("SECOND\n");
		return 0;
	}else {
		printf("FIRST\n");
		for(i=1;i<=tot;++i){
			need=ans^other[i];
			//cout<<need<<" "<<other[i]<<endl;
			if(need<other[i]){
				lookfor(i,other[i]-need);
				return 0;
			}
		}
		if(mm[0].size()<r-1){
			need=ans^c;
			if(need<c)for(i=1;i<r;++i)if(!mm[0].count(i)){
				printf("%d %d %d %d\n",i,0,i,c-need);
				return 0;
			}
		}
		if(mm[1].size()<c-1){
			need=ans^r;
			if(need<r)for(i=1;i<c;++i)if(!mm[1].count(i)){
				printf("%d %d %d %d\n",0,i,r-need,i);
				return 0;
			}
		}
		
	}
	return 1;
}
		