#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define Maxl 20
#define Maxp 100

int N[Maxl];
int d;
bool dp[Maxp][Maxl];
vector <int> ans[6];

long long make_number(int nr)
{
  long long res = 0;
  for(int i=ans[nr].size()-1; i>=0; i--)
  {
    res*=10ll;
    res+=ans[nr][i];
  }
  return res;
}

bool dfs(int p, int l)
{
  if(dp[p][l]) return false;
  dp[p][l] = true;
  if(l == d)
  {
    if(p == 0)
    {
      return true;
    }
    else return false;
  }
  for(int i=0; i<=6; i++) for(int j=0; j+i<=6; j++)
  {
    int value = 4*i + 7*j + p;
    for(int k=0; k<i; k++) ans[k].push_back(4);
    for(int k=i; k<i+j; k++) ans[k].push_back(7);
    for(int k=i+j; k<6; k++) ans[k].push_back(0);
    if(value%10 == N[l])
      if(dfs(value/10,l+1)) return true;
    for(int k=0; k<6; k++) ans[k].pop_back();
  }
  return false;
}

void solve()
{
  for(int i=0; i<6; i++) ans[i].clear();
  string n;
  cin>>n;
  d = n.size();
  for(int i=0; i<d; i++) N[d-1-i] = n[i]-'0';
  for(int i=0; i<Maxp; i++) for(int j=0; j<Maxl; j++) dp[i][j]=false;
  //cout<<"\n";
  if(dfs(0,0))
  {
    for(int i=0; i<6; i++) cout<<make_number(i)<<" ";
    cout<<"\n";
  }
  else cout<<"-1\n";
}

int main()
{
  int t; cin>>t;
  while(t--) solve();
  return 0;
}
