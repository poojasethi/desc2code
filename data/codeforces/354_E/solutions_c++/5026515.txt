#include <cstdio>
#include <memory.h>
using namespace std;
// just for test, sorry
struct aa {
	bool can;
	long long s[6];
} dp[20][5];

int i, j, t, p, q, now[6], to[50][6], z[20];
bool can[60];
long long n;

void dfs(int k, int s) {
	if (k == 6) {
		if (!can[s])	memcpy(to[s], now, sizeof(now));
		can[s] = true;
		return ;
	}
	now[k] = 0;
	dfs(k + 1, s);
	now[k] = 4;
	dfs(k + 1, s + 4);
	now[k] = 7;
	dfs(k + 1, s + 7);
}

int main() {
	dfs(0, 0);
	scanf("%d", &t);
	while (t--) {
		scanf("%I64d", &n);
		for (i = 19; i; i--) {
			z[i] = n % 10;
			n /= 10;
		}
		memset(dp, 0, sizeof(dp));
		dp[0][0].can = true;
		for (i = 1; i <= 19; i++)
			for (j = 0; j < 5; j++)
				if (dp[i - 1][j].can) {
					for (p = 0; p <= 42 && p <= j * 10 + z[i]; p++)
						if (can[p] && (j * 10 + z[i] - p < 5) && !dp[i][j * 10 + z[i] - p].can) {
							dp[i][j * 10 + z[i] - p].can = true;
							for (q = 0; q < 6; q++)	dp[i][j * 10 + z[i] - p].s[q] = dp[i - 1][j].s[q] * 10 + to[p][q];
						}
				}
		if (dp[19][0].can) {
			for (i = 0; i < 5; i++)	printf("%I64d ", dp[19][0].s[i]);
			printf("%I64d\n", dp[19][0].s[5]);
		}else	printf("-1\n");
	}
}