#include <cstdio>
#include <algorithm>
#include <map>
using namespace std;
typedef long long LL;
const int NMax=110000;
int N,M,P,A[NMax],B[NMax];
int T,Q[NMax];
int D[NMax],nn,dp[NMax];
map<int,int> have;
int POW(int a,int b,int p) {
	LL ret=1,tmp=a;
	while(b) {
		if(b&1) {
			ret=(ret*tmp)%p;
			--b;
		}
		tmp=(tmp*tmp)%p;
		b>>=1;
	}
	return ret;
}
int gcd(LL a,LL b){
	if(!b) return a;
	return gcd(b,a%b);
}
int main()
{
	scanf("%d%d%d",&N,&M,&P);
	for(int i=1;i<=N;i++) scanf("%d",A+i);
	for(int i=1;i<=M;i++) scanf("%d",B+i);
	T=P-1;
	for(int i=1;i<=M;i++) T=gcd(T,B[i]);
	for(int i=1;i*i<=P-1;i++) if((P-1)%i==0){
		D[nn++]=i;
		if((P-1)/i>i) D[nn++]=(P-1)/i;
	}
	sort(D,D+nn);
	for(int i=1;i<=N;i++) {
		for(int j=0;j<nn;j++) if(POW(A[i],D[j],P)==1){
			Q[i]=gcd((LL)(P-1)/(LL)D[j]*(LL)T,P-1);
			break;
		}
		have[Q[i]]=1;
	}
	int ans=0;
	for(int i=nn-1;i>=0;i--) if(have[D[i]]){
		dp[i]=(P-1)/D[i];
		for(int j=i+1;j<nn;j++) if(have[D[j]]&&D[j]%D[i]==0) dp[i]-=dp[j];
		ans+=dp[i];
	}
	printf("%d\n",ans);
	getchar();getchar();
	return 0;
}
