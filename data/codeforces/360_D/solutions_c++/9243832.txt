#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <map>
using namespace std;

#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP0(i, n) for (int i = 0; i < n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define FORE(i, x) for (int i = fi[x]; i != -1; i = e[i].n)

typedef long long m64;
#define MAX_N 110000
int a[MAX_N], q[MAX_N], f[MAX_N], n, m, p, g, tot;
int mpow(int x, int y, int s = 1)
{
    while (y) { if (y & 1) s = s * 1LL * x % p; x = x * 1LL * x % p, y >>= 1; }
    return s;    
}

int main(void)
{
	scanf ("%d%d%d", &n, &m, &p), g = p - 1; REP1(i, n) scanf ("%d", a + i);
	REP1(i, m) { int x; scanf ("%d", &x), g = __gcd(x, g); }
	for (int i = 1; i * i < p; i++) if ((p - 1) % i == 0)
        { q[++tot] = i; if (i * i != p - 1) q[++tot] = (p - 1) / i; }
    sort(q + 1, q + tot + 1);
    REP1(i, n) REP1(j, tot) if (mpow(a[i], g * q[j]) == 1)
        { a[i] = (p - 1) / q[j]; break; }
	sort(a + 1, a + n + 1), n = unique(a + 1, a + n + 1) - a - 1, reverse(a + 1, a + n + 1);
	int ans = 0;
	REP1(i, n)
	{
        f[i] = (p - 1) / a[i]; //printf ("%d\n", (p - 1) / a[i]);
        REP1(j, i - 1) if (a[j] % a[i] == 0) f[i] -= f[j]; ans += f[i];
    }
	printf("%d\n",ans);
	return 0;
}
