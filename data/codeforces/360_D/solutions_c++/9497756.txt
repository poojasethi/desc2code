#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int N = 10500;
int xu[N];
int yue[N];
int need[N];
int has[N];
int n,m,p;
int gcd(int x,int y)
{
	if(!y)
		return x;
	return gcd(y,x%y);
}
int power(int x,int y)
{
	long long now=x;
	long long res=1;
	while(y)
	{
		if(y&1)
		{
			res*=now;
			res%=p;
		}
		now*=now;
		now%=p;
		y>>=1;
	}
	int resx=res;
	return resx;
}
int main()
{
	int i,j,t;
	int now;
	scanf("%d%d%d",&n,&m,&p);
	t=p-1;
	for(i=1;i<=n;i++)
		scanf("%d",xu+i);
	for(i=1;i<=m;i++)
	{
		scanf("%d",&now);
		t=gcd(t,now);
	}
	for(i=1;i<=n;i++)
		xu[i]=power(xu[i],t);
	p--;
	for(i=1;i*i<=p;i++)
	{
		if(p%i==0)
		{
			yue[++yue[0]]=i;
			if(i*i!=p)
				yue[++yue[0]]=p/i;
		}
	}
	p++;
	sort(yue+1,yue+yue[0]+1);
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=yue[0];j++)
		{
			if(power(xu[i],yue[j])==1)
				break;
		}
		need[j]=1;
	}
	int ans=0;
	for(i=yue[0];i>0;i--)
	{
		now=need[i]-has[i];
		if(need[i]==1)
		{
			for(j=i-1;j>0;j--)
			{
				if(yue[i]%yue[j]==0)
					need[j]=1;
			}
		}
		for(j=i-1;j>0;j--)
		{
			if(yue[i]%yue[j]==0)
				has[j]+=now;
		}
		now*=yue[i];
		ans+=now;
	}
	printf("%d\n",ans);
	return 0;
}
