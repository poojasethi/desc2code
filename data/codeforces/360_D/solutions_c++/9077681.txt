#pragma GCC optimize(3)
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <ctime>
typedef long long LL;
#define f(x, y, z) for(int x = (y); x <= (z); ++x)
#define g(x, y, z) for(int x = (y); x < (z); ++x)
#define h(x, y, z) for(int x = (y); x >= (z); --x)
#define foreach(x, y) for(__typeof(y.begin()) x = y.begin(); x != y.end(); ++x)

LL n, m, p;

inline LL gcd(LL x, LL y){
	while(y){
		LL t = x % y; x = y; y = t;
	}
	return x;
}
inline LL pow(LL x, LL y){
	LL ans = 1;
	h(i, 62, 0){
		ans = ans * ans % p;
		if(y & (1LL << i)) ans = ans * x % p;
	}
	return ans;
}
#define div div233
LL div[10007], a[10007], val[10007], c[10007];

int main(){
	scanf("%I64d%I64d%I64d", &n, &m, &p);
	f(i, 1, n) scanf("%I64d", a + i);
	LL d = 0;
	while(m--){
		LL c; scanf("%I64d", &c);
		d = gcd(c, d);
	}
	f(i, 1, n) a[i] = pow(a[i], d);
	int cnt = 0;
	for(int i = 1; i * i < p; ++i) if((p - 1) % i == 0){
		div[cnt++] = i;
		if(i * i != p - 1) div[cnt++] = (p - 1) / i;
	}
	std::sort(div, div + cnt);
	f(i, 1, n) g(j, 0, cnt) if(pow(a[i], div[j]) == 1){
		c[i] = (p - 1) / div[j]; break;
	}
	std::sort(c + 1, c + n + 1);
	cnt = 1;
	f(i, 2, n) if(c[i] != c[cnt]) c[++cnt] = c[i];
	int ans = 0;
	h(i, cnt, 1){
		val[i] = (p - 1) / c[i];
		f(j, i + 1, cnt) if(c[j] % c[i] == 0) val[i] -= val[j];
		ans += val[i];
	}
	printf("%d\n", ans);
	return 0;
}
