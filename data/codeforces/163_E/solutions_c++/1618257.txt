#include <cstdio>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
string ss[100010];
char w[1000100];
int ok[1000100];
struct Trie
{
    Trie * nxt[26], * fail ;
    int ok;
}buf[1000010],*root;
Trie * q[1000100], * sp[1000100];
vector <Trie * > xx[1000100];
int idx,top;
void insert(Trie * p,int i,int j)
{
    if(ss[i][j]==0){
        sp[i]=p;
        p->ok=1;
        return ;
    }
    int x=ss[i][j]-'a';
    if(!p->nxt[x]){
        p->nxt[x]=&buf[top];
        top++;
    }
    insert(p->nxt[x],i,j+1);
}
void bfs()
{
    int f=0,r=0;
    q[r++]=root;
    while(f<r){
        Trie * p , *s;
        for(int i=0;i<26;i++){
            p=q[f];
            s=p->nxt[i];
            if(s){
                q[r++]=s;
                p=p->fail;
                while(!p->nxt[i]) p=p->fail;
                s->fail=p->nxt[i];
                xx[p->nxt[i]-buf].push_back(s);
                s->ok+=p->nxt[i]->ok;
            }
        }
        f++;
    }
}
long long work()
{
    int i=1;
    long long ans=0;
    Trie * p=root;
    while(w[i]){
        int x=w[i]-'a';
        while(!p->nxt[x]) p=p->fail;
        p=p->nxt[x];
        ans+=p->ok;
        i++;
    }
    return ans;
}
void sol(Trie * p,int v)
{
    int f=0,r=0;
    q[r++]=p;
    while(f<r){
        q[f]->ok+=v;
        int id=q[f]-buf,n=xx[id].size();
        for(int i=0;i<n;i++){
            q[r++]=xx[id][i];
        }
        f++;
    }
}
int main()
{
    //freopen("1.in","r",stdin);
    int n,k;
    root=&buf[1];
    root->fail=&buf[0];
    for(int i=0;i<26;i++) root->fail->nxt[i]=root;
    top=2;
    scanf("%d%d",&n,&k);
    for(int i=1;i<=k;i++){
        scanf("%s",w);
        ss[i]=w;
      //  cout << ss[i] <<endl;
        ok[i]=1;
        insert(root,i,0);
    }
    bfs();
    idx++;
    while(n--){
        scanf("%s",w);
        //puts(w);
        if(w[0]=='-'||w[0]=='+'){
            int s=0;
            for(int i=1;w[i];i++){
                s=10*s+w[i]-'0';
            }
            if(w[0]=='-'){
                if(ok[s]){
                    ok[s]=0;
                    sol(sp[s],-1);
                }
            }
            else {
                if(!ok[s]){
                    ok[s]=1;
                    sol(sp[s],1);
                }
            }
        }
        else {
            printf("%I64d\n",work());
        }
    }
}

 				 		 			 	   		 	 	 		