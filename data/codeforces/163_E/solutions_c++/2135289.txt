# include <cstdio>
# include <cstring>
# include <cstdlib>
# include <iostream>
# include <string>
# include <cmath>
# include <vector>
# include <algorithm>
# include <ctime>
# define INF 0x7FFFFFFF
# define REP(i,n) for(int i=0;i<n;i++)
# define REP1(i,n) for(int i=1;i<=n;i++)
# define CLR(i,x) memset(i,x,sizeof(i))
# define For(i,a,b)  for(int i=a;i<=b;i++)
# define shr(a,b) ((a)>>(b))
# define shl(a,b) ((a)<<(b))
# define vi vector<int>
# define it iterator
# define pb push_back
# define ALL(i,a) i=a.begin();i!=a.end();i++
using namespace std;

typedef long long int64;
void setIO(string name){
	string is=name+".in";
	string os=name+".out";
	freopen(is.c_str(),"r",stdin);
//	freopen(os.c_str(),"w",stdout);
}

const int maxn=1000100;
int Qn,n;
int trans[maxn][26],fail[maxn],cnt;
vi e[maxn];

int order[maxn],ont,bitpos[maxn],endpos[maxn];

# define low(i) (i&(-i))
struct BIT{
	int v[maxn],n;
	void add(int p,int t){
		for(;p<=n;p+=low(p))	v[p]+=t;
	}
	int getsum(int p){
		int ans=0;
		for(;p;p-=low(p))	ans+=v[p];
		return ans;
	}
} hentai;

void tree_modify(int i,int v){
	hentai.add(bitpos[i],v);
	hentai.add(endpos[i]+1,-v);
}

int insert(char *s){
	int pos=0;
	for(;*s;s++){
		int c=(*s)-'a';
		if(!trans[pos][c])	trans[pos][c]=++cnt;
		pos=trans[pos][c];
	}
	return pos;
}

void dfs(int x){
	order[++ont]=x;bitpos[x]=ont;
	for(vi::it ALL(p,e[x]))	dfs(*p);
	endpos[x]=ont;
}

int tpos[maxn],que[maxn],qf,qr;
void build(){
	REP(i,26)	if(trans[0][i])	que[qr++]=trans[0][i];
	while(qf!=qr){
		int x=que[qf++];
		REP(i,26){
			if(trans[x][i]){
				int q=trans[x][i];
				que[qr++]=q;
				fail[q]=trans[fail[x]][i];
			}else	trans[x][i]=trans[fail[x]][i];
		}
	}
	REP1(i,cnt)	e[fail[i]].pb(i);
	dfs(0);
	hentai.n=ont+1;
	REP1(i,n)	tree_modify(tpos[i],1);
}

int run(char *s){
	int pos=0,ans=0;
	for(;*s;s++){
		pos=trans[pos][(*s)-'a'];
		ans+=hentai.getsum(bitpos[pos]);
	}
	return ans;
}

int outseq[maxn];
char str[maxn];
void work(){
	scanf("%d %d\n",&Qn,&n);
	REP1(i,n)	scanf("%s\n",str),tpos[i]=insert(str);
	build();
	REP(i,Qn){
		char c=getchar();
		if(c!='?'){
			int t;scanf("%d\n",&t);
			if((c=='-'&&!outseq[t])||(c=='+'&&outseq[t])){
				tree_modify(tpos[t],c=='-'?-1:1);
				outseq[t]^=1;
			}
		}else{
			scanf("%s\n",str);
			printf("%d\n",run(str));
		}
	}
}

int main(){
//	setIO("e");
	work();
	return 0;
}
