#include<cstdlib>
#include<cctype>
#include<string>
#include<cstring>
#include<cstdio>
#include<queue>
#include<algorithm>
#include<iostream>
using namespace std;
const int state=2000000;
const int child=26;
int ac[state][child];
int fail[state],flag[state],top;
int w[128];
void init()
{
    memset(fail,0,sizeof(fail));
    memset(flag,0,sizeof(flag));
    memset(ac,0,sizeof(ac));
    top=1;
    for (int i='a';i<='z';i++)w[i]=i-'a';
}
bool can[state];
int pos[state];
void ins(char *s,int idx)
{
    int p=0,i=0,t;
    while (s[i])
    {
        t=w[s[i]];
        if (!ac[p][t])
        {
            flag[top]=0;
            ac[p][t]=top++;
        }
        p=ac[p][t];
        i++;
    }
    pos[idx]=p;
    flag[p]=idx;
    can[p]=1;
}
void build()
{
    queue<int>q;
    int i,j,k;
    q.push(0);
    fail[0]=0;
    while (!q.empty())
    {
        int p=q.front();q.pop();
        if (flag[fail[p]])flag[p]=1;
        for (i=0;i<child;i++)
        {
            if (!ac[p][i])
            {
                if (p==0)ac[p][i]=0;
                else ac[p][i]=ac[fail[p]][i];
            }
            else 
            {
                if (p==0)fail[ac[p][i]]=0;
                else fail[ac[p][i]]=ac[fail[p]][i];
                q.push(ac[p][i]);
            }
        }
    }
}
char str[1111111];
int main()
{
    int i,j,k,n,q,d;
    //for (i=0;i<state;i++)can[i]=1;
    init();
    scanf("%d%d",&q,&d);
    for (i=1;i<=d;i++)
    {
        scanf("%s",str);
        ins(str,i);
    }
    build();
    while (q--)
    {
        scanf("%s",str);
        if (str[0]=='-')
        {
            int x=atoi(str+1);
            can[pos[x]]=0;
        }
        else if (str[0]=='+')
        {
            int x=atoi(str+1);
            can[pos[x]]=1;
        }
        else 
        {
            int l=strlen(str),p=0,ans=0;
            for (i=1;i<l;i++)
            {
                p=ac[p][w[str[i]]];
                int tmp=p;
                while (flag[tmp])
                {
                    if (can[tmp]&&flag[tmp])ans++;
                    tmp=fail[tmp];
                }
            }
            printf("%d\n",ans);
        }
    }
    return 0;
}