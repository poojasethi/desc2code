#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>

using namespace std;

struct node {
	int jmp[26];
	int cnt;
	int fail;

	node() {
		memset(jmp,0,sizeof(jmp));
		fail=0;
		cnt=0;
	}
};

node a[1000010];
int n,k,N,pp,cur;
int q[1000010];
bool used[1000010];
char s[1000010];
vector<int> p[1000010];
int b[1000010][2];
int sum[1000010];
int posi[1000010];

void bfs() {
	int h=1,t=0;
	for (int i=0;i<26;++i)
		if (a[0].jmp[i]) q[++t]=a[0].jmp[i];
	while (h<=t) {
		int x=q[h];
		for (int i=0;i<26;++i)
			if (a[x].jmp[i]) {
				q[++t]=a[x].jmp[i];
				int y=q[t];
				a[y].fail=a[x].fail;
				while (a[y].fail && a[a[y].fail].jmp[i]==0) a[y].fail=a[a[y].fail].fail;
				if (a[a[y].fail].jmp[i]) a[y].fail=a[a[y].fail].jmp[i];
				a[y].cnt+=a[a[y].fail].cnt;
			}
		++h;
	}
}
void dfs(int x) {
	cur++;
	b[x][0]=cur;
	for (int i=0;i<(int)p[x].size();++i) dfs(p[x][i]);
	b[x][1]=cur;
}

inline int lowbit(int x) {
	return x&-x;
}

void change(int x,int y) {
	while (x<=N+5) {
		sum[x]+=y;
		x+=lowbit(x);
	}
}

int cc(int x) {
	int ans=0;
	while (x) {
		ans+=sum[x];
		x-=lowbit(x);
	}
	return ans;
}


int main() {
	//freopen("e.in","r",stdin);

	scanf("%d%d\n",&n,&k);
	N=0;
	for (int i=0;i<k;++i) {
		scanf("%s",s);
		int k1=0;
		int l=strlen(s);
		for (int j=0;j<l;++j) {
			if (a[k1].jmp[s[j]-'a']==0) a[k1].jmp[s[j]-'a']=++N;
			k1=a[k1].jmp[s[j]-'a'];
		};
		a[k1].cnt=1;
		posi[i]=k1;
	}

	bfs();

	for (int i=0;i<=N;++i) p[i].clear();
	for (int i=1;i<=N;++i) p[a[i].fail].push_back(i);
	cur=0;
	dfs(0);
	memset(used,true,sizeof(used));
	memset(sum,0,sizeof(sum));
	for (int i=0;i<n;++i) {
		scanf("%s",s);
		if (s[0]=='-' || s[0]=='+') {
			int x=0;
			for (register int j=1;j<(int)strlen(s);++j)
				x=x*10+s[j]-48;
			x--;
			if (s[0]=='-') {
				if (used[x]) {
					change(b[posi[x]][0],-1);
					change(b[posi[x]][1]+1,1);
					used[x]=false;
				}
			} else {
				if (!used[x]) {
					change(b[posi[x]][0],1);
					change(b[posi[x]][1]+1,-1);
					used[x]=true;
				}
			}
		} else {
			int k=0; long long ans=0;
			int l=strlen(s);
			for (register int j=1;j<l;++j) {
				while (k && a[k].jmp[s[j]-'a']==0) k=a[k].fail;
				k=a[k].jmp[s[j]-'a'];
				ans+=a[k].cnt;
				ans+=cc(b[k][0]);
			}
			cout << ans << endl;
		}

	}
	return 0;
}
