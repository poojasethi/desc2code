#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
using namespace std;
const int V=1000100;
struct tree
{
	tree *ne[26],*fail;
}tr[V],VD,*root,*Q[V];
int tn;
void init()
{
	tr[tn=0]=VD;
	root=tr+(tn++);
}
char s[V];
int pos[V];
void build(int id)
{
	tree *p=root;
	for(int i=0;s[i];i++)
	{
		if(p->ne[s[i]-'a']==NULL)
		{
			tr[tn]=VD;
			p->ne[s[i]-'a']=tr+(tn++);
		}
		p=p->ne[s[i]-'a'];
	}
	pos[id]=p-tr;
}
struct Edge{int num,ne;}e[V];
int p[V],K;
void add(int x,int y)
{e[K].num=y;e[K].ne=p[x];p[x]=K++;}
int l[V],r[V],cur[V],pr[V];
void dfs()
{
	int u=0,v,ti=1;
	for(int i=0;i<tn;i++)cur[i]=p[i];
	l[u]=ti++;
	while(1)
	{
		if(cur[u]==-1)
		{
			r[u]=ti++;
			if(u==0)break;
			u=pr[u];
		}
		else
		{
			v=e[cur[u]].num;cur[u]=e[cur[u]].ne;
			l[v]=ti++;pr[v]=u;u=v;
		}
	}
}
int tre[2*V];
void update(int k,int v)
{
	while(k<=2*tn)
	{
		tre[k]+=v;
		k+=k&-k;
	}
}
int read(int k)
{
	int ret=0;
	while(k)
	{
		ret+=tre[k];
		k-=k&-k;
	}
	return ret;
}
void pre()
{
	int i,top,tail;
	tree *P,*q;
	top=0;tail=0;
	for(i=0;i<26;i++)
	if(root->ne[i]!=NULL)
	{
		Q[++tail]=root->ne[i];
		root->ne[i]->fail=root;
	}
	else root->ne[i]=root;
	while(top<tail)
	{
		P=Q[++top];
		for(i=0;i<26;i++)
		if(P->ne[i]!=NULL)
		{
			q=P->ne[i];
			Q[++tail]=q;
			q->fail=P->fail->ne[i];
			if(q->fail==NULL)q->fail=root;
		}
		else P->ne[i]=P->fail->ne[i];
	}
	for(i=0;i<tn;i++)p[i]=-1;K=0;
	for(i=1;i<tn;i++)add(tr[i].fail-tr,i);
	dfs();memset(tre,0,sizeof(tre));
}
int in[V],Qn,n;
void doit()
{
	memset(in,0,sizeof(in));
	for(int i=0;i<n;i++)update(l[pos[i]],1),update(r[pos[i]],-1);
	while(Qn--)
	{
		scanf("%s",s);
		if(s[0]=='?')
		{
			tree *p=root;
			int ct=0;
			for(int i=1;s[i];i++)
			{
				p=p->ne[s[i]-'a'];
				ct+=read(l[p-tr]);
			}
			printf("%d\n",ct);
		}
		else
		{
			int t=0;
			for(int i=1;s[i];i++)
			t*=10,t+=s[i]-'0';
			t--;
			if(s[0]=='-')
			{
				if(in[t])continue;
				in[t]=1;
				update(l[pos[t]],-1);
				update(r[pos[t]],1);
			}
			else
			{
				if(!in[t])continue;
				in[t]=0;
				update(l[pos[t]],1);
				update(r[pos[t]],-1);
			}
		}
	}
}
int main()
{
	for(int i=0;i<26;i++)VD.ne[i]=NULL;
	while(~scanf("%d%d",&Qn,&n))
	{
		init();
		for(int i=0;i<n;i++)
		{scanf("%s",s);build(i);}
		pre();doit();
	}
}

	 		 			   	 	      		 		