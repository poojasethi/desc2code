#include <bits/stdc++.h>

#define	st first
#define	nd second
#define	mp make_pair
#define	pb push_back
#define	lli long long int
#define	all( gg )	gg.begin(),gg.end()
#define	foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	FP( ii,aa,bb ) for( lli ii=aa;ii<=bb;ii++ )
#define	FM( ii,aa,bb ) for( lli ii=aa;ii>=bb;ii-- )
#define	debug(ccc)	cout << #ccc << " = " << ccc << endl;

#define	mod	1000000007LL

using namespace std;

int	F[1000005];

void	update( int x,int y,int val ){
	y++;
	while( x<=1000003 ){
		F[x] += val;
		x += x&-x;
	}
	while( y<=1000003 ){
		F[y] -= val;
		y += y&-y;
	}
}
int	query( int x ){
	int	r=0;
	while( x ){
		r += F[x];
		x -= x&-x;
	}
	return	r;
}

int	n,m,beg[1000005],end[1000005],yer[1000005];
int	go[1000005][26],fail[1000005],root[1000005],come[1000005],I=1;
char	ok[1000005];

char	s[1000005];

vector<int>	v[1000005];

int	add( int nod,int c ){
	if( !go[nod][c] )	go[nod][c] = ++I;
	root[ go[nod][c] ] = nod;
	come[ go[nod][c] ] = c;
	return	go[nod][c];
}
int	GO( int nod,int c ){
	while( nod!=-1 and !go[nod][c] )	nod = fail[nod];
	if( nod==-1 )	return	1;
	return	go[nod][c];
}

int	Time;
void	dfs( int nod ){
	beg[nod] = ++Time;
	foreach( v[nod],it )
		dfs( *it );
	end[nod] = Time;
}

int	H[1000005];

int main(){
	fail[I] = -1;
	cin >> m >> n;
	FP( i,1,n ){
		scanf("%s",s+1);
		int	size = strlen( s+1 );
		int	nod = 1;
		FP( j,1,size )
			nod = add( nod,s[j]-'a' );
		ok[nod]++;
		yer[i] = nod;
		H[i]++;
	}
	queue< int >	Q;
	FP( i,0,25 )
		if( go[1][i] )	Q.push( go[1][i] );
	while( Q.size() ){
		int	x=Q.front();
		Q.pop();
		int	nod = fail[ root[x] ];
		while( nod!=-1 and !go[nod][come[x]] )	nod = fail[nod];
		if( nod==-1 )	fail[x] = 1;
		else	fail[x] = go[nod][come[x]];
		v[fail[x]].pb( x );
		FP( c,0,25 )
			if( go[x][c] )
				Q.push( go[x][c] );
	}
	dfs( 1 );
	FP( i,1,I )
		update( beg[i],end[i],ok[i] );
	while( m-- ){
		char	c;
		scanf(" %c",&c);
		if( c=='-' ){
			int	x;
			scanf("%d",&x);
			if( !H[x] )	continue;
			H[x]--;
			update( beg[yer[x]],end[yer[x]],-1 );
		}
		else	if( c=='+' ){
			int	x;
			scanf("%d",&x);
			if( H[x] )	continue;
			H[x]++;
			update( beg[yer[x]],end[yer[x]],+1 );
		}
		else{
			scanf("%s",s+1);
			int	size = strlen( s+1 );
			int	nod = 1;
			lli	res=0;
			FP( i,1,size ){
				nod = GO( nod,s[i]-'a' );
				res += query( beg[nod] );
			}
			printf("%lld\n",res);
		}
	}
}
