#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cstring>
#include <string>
#include <cmath>
#include <set>
#include <ctime>

using namespace std;

#define rep(i,l,r) for(i=l;i<=r;i++)
#define ser(i,r,l) for(i=r;i>=l;i--)
#define INF 1000005
#define inf 1000000007

typedef long long ll;
priority_queue<int >QwQ;

int tot,top=1,last=0,n,Q,ans=0,l=0,cnt=0;
int t[INF][30],fail[INF],id[INF],col[INF],q[INF],c[INF<<1],to[INF<<1],h[INF<<1],s[INF],L[INF],R[INF];
char s1[INF];
int read()
{
	int k=0,f=1;
	char ch;
	while(ch<'0' || ch>'9'){
	  if(ch=='-')f=-1;
	  ch=getchar();
	}
	while(ch>='0' && ch<='9')k=(k<<1)+(k<<3)+ch-'0',ch=getchar();
	return k*f;
}
int lowbit(int x){
	return x&(-x);
}
void hah(int x,int y)
{
	to[++l]=y,h[l]=s[x],s[x]=l;
}
void add(int x,int val)
{
	int i,j,k;
	for(i=x;i<=cnt;i+=lowbit(i))c[i]+=val;
}
int get_sum(int x)
{
	int i,j,k=0;
	for(i=x;i;i-=lowbit(i))k+=c[i];
	return k;
}
void Insert(int x)
{
	int i,j,k,l1,now=1;
	scanf("%s",s1);
	l1=strlen(s1);
	rep(i,0,l1-1){
		k=s1[i]-'a'+1;
		if(!t[now][k])t[now][k]=++tot;
		now=t[now][k];
	}
	col[x]=1,id[x]=now;
}
void build_fail()
{
	int i,j,k,p;
	q[0]=1,fail[1]=0;
	while(top>last){
		k=q[last++];
		rep(i,1,26)
		 if(t[k][i]){
		 	p=fail[k];
		 	while(!t[p][i])p=fail[p];
		 	fail[t[k][i]]=t[p][i];
		 	q[top++]=t[k][i];
		 }
	}
}
void dfs(int x)
{
	int i,j,k;
	L[x]=++cnt;
	for(i=s[x];i;i=h[i])
	 dfs(to[i]);
	R[x]=++cnt;
}
void init()
{
	int i,j,k,now,p,x,l1;
	tot=1;
	rep(i,1,26)t[0][i]=1;
	Q=read(),n=read();
	rep(i,1,n)Insert(i);
	build_fail();
	rep(i,1,tot)hah(fail[i],i);
	dfs(0);
	rep(i,1,n)add(L[id[i]],1),add(R[id[i]]+1,-1);
	while(Q--){
		scanf("%s",s1);
		l1=strlen(s1);
		if(s1[0]=='?'){
			now=1,ans=0;
			rep(i,1,l1-1){
				k=s1[i]-'a'+1;
				while(!t[now][k])now=fail[now];
				now=t[now][k];
				ans+=get_sum(L[now]);
			}
			printf("%d\n",ans);
		}
		else if(s1[0]=='-'){
			sscanf(s1+1,"%d",&x);
			if(col[x]){
				col[x]=0;
				add(L[id[x]],-1),add(R[id[x]]+1,1);
			}
		}
		else{
			sscanf(s1+1,"%d",&x);
			if(!col[x]){
				col[x]=1;
				add(L[id[x]],1),add(R[id[x]]+1,-1);
			}
		}
	}
}
void work()
{
	int i,j,k;
}
int main()
{
	init();
	work();
	return 0;
}
