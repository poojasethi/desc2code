#include<cstdio>
#include<cstdlib>
#include<cstring>

using namespace std;

#define newnode ++wmt
#define lb(x) ((x)&(-(x)))

const int maxn=1000010;

int n,m,en,root,wmt,y[maxn<<1],l[maxn],r[maxn],cnt,q[maxn],end[maxn];

bool exist[maxn];

char s[maxn];

struct node
{
	int next[26],fail;
	node()
	{
		memset(next,0,sizeof(next));
		fail=0;
	}
}z[maxn];

struct edge
{
	int e;
	edge *next;
}*v[maxn],ed[maxn];

void add_edge(int s,int e)
{
	en++;
	ed[en].next=v[s];v[s]=ed+en;v[s]->e=e;
}

void update(int p,int x)
{
	for (;p<=cnt;p+=lb(p))
		y[p]+=x;
}

int query(int p)
{
	int ans=0;
	for (;p;p-=lb(p))
		ans+=y[p];
	return ans;
}

int ins()
{
	scanf("%s",s+1);
	int l=strlen(s+1);
	int p=root;
	for (int a=1;a<=l;a++)
	{
		if (!z[p].next[s[a]-'a']) z[p].next[s[a]-'a']=newnode;
		p=z[p].next[s[a]-'a'];
	}
	return p;
}

void build_AC()
{
	int front=1,tail=1;
	q[1]=root;
	for (;front<=tail;)
	{
		int p=q[front++];
		for (int a=0;a<26;a++)
			if (z[p].next[a])
			{
				int nowp=z[p].fail;
				while (nowp)
				{
					if (z[nowp].next[a])
					{
						z[z[p].next[a]].fail=z[nowp].next[a];
						break;
					}
					nowp=z[nowp].fail;
				}
				if (!nowp) z[z[p].next[a]].fail=root;
				add_edge(z[z[p].next[a]].fail,z[p].next[a]);
				q[++tail]=z[p].next[a];
			}
	}
}

void dfs(int now)
{
	cnt++;
	l[now]=cnt;
	for (edge *e=v[now];e;e=e->next)
		dfs(e->e);
	cnt++;
	r[now]=cnt;
}

void query()
{
	long long ans=0;
	int len=strlen(s+1);
	int p=root;
	for (int a=2;a<=len;a++)
	{
		while (p && !z[p].next[s[a]-'a'])
			p=z[p].fail;
		p=z[p].next[s[a]-'a'];
		if (!p) p=root;
		ans+=query(l[p]);
	}
	printf("%I64d\n",ans);
}

int main()
{
	scanf("%d%d",&m,&n);
	root=newnode;
	for (int a=1;a<=n;a++)
	{
		exist[a]=true;
		end[a]=ins();
	}
	build_AC();
	dfs(root);
	for (int a=1;a<=n;a++)
		update(l[end[a]],1),update(r[end[a]],-1);
	for (int a=1;a<=m;a++)
	{
		scanf("%s",s+1);
		if (s[1]=='-')
		{
			int id;
			sscanf(s+2,"%d",&id);
			if (exist[id]) exist[id]=false,update(l[end[id]],-1),update(r[end[id]],1);
		}
		else
		{
			if (s[1]=='+')
			{
				int id;
				sscanf(s+2,"%d",&id);
				if (!exist[id]) exist[id]=true,update(l[end[id]],1),update(r[end[id]],-1);
			}
			else query();
		}
	}

	return 0;
}
