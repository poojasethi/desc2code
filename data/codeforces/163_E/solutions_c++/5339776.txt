#include <stdio.h>
#include <algorithm>
#include <string.h>
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int N = 1000010;

int C[N * 2];

void Insert(int id, int x){
	for(int i = id; i < N * 2; i += i & (-i))
		C[i] += x;
}

int Query(int id){
	int ret = 0;
	for(int i = id; i > 0; i -= i & (-i))
		ret += C[i];
	return ret;
}

struct ACtree{
	int p[26], f;
}T[N];

int tot, root, id[N], l[N], r[N], top, in[N];
vector<int> vt[N];

int newNode(){
	for(int i = 0; i < 26; i++)
		T[tot].p[i] = -1;
	T[tot].f = -1;
	return tot++;
}

void Insert(char s[], int x){
	int loc = root;
	for(int i = 0; s[i]; i++){
		if(T[loc].p[s[i] - 'a'] == -1){
			T[loc].p[s[i] - 'a'] = newNode();
		}
		loc = T[loc].p[s[i] - 'a'];
	}
	//cout << loc << endl;
	id[x] = loc;
}

void Build(){
	queue<int> que;
	que.push(root);
	while(que.size()){
		int x = que.front();
		que.pop();
		for(int i = 0; i < 26; i++){
			if(T[x].p[i] == -1) continue;
			int y = T[x].p[i];
			int t = T[x].f;
			while(t != -1 && T[t].p[i] == -1) t = T[t].f;
			if(t != -1 && T[t].p[i] != -1){
				T[y].f = T[t].p[i];
			}
			else T[y].f = root;
			vt[T[y].f].push_back(y);
			que.push(y);
		}
	}
}

int ACMatch(char s[]){
	int loc = root;
	int ret = 0;
	for(int i = 0; s[i]; i++){
		int c = s[i] - 'a';
		if(T[loc].p[c] == -1){
			while(loc != -1 && T[loc].p[c] == -1) loc = T[loc].f;
		}
		if(loc == -1) loc = root;
		else loc = T[loc].p[c];
		//cout << loc << " " << c << endl;
		ret += Query(l[loc]);
	}
	return ret;
}

void dfs(int u){
	l[u] = ++top;
	for(int i = 0; i < vt[u].size(); i++){
		int v = vt[u][i];
		dfs(v);
	}
	r[u] = ++top;
}

char s[N];

int main(){
	int n, m;
	scanf("%d%d", &n, &m);
	tot = 0; newNode();
	for(int i = 1; i <= m; i++){
		scanf("%s", s);
		Insert(s, i);
	}
	Build();
	dfs(0);
	for(int i = 1; i <= m; i++){
		int a = id[i];
		in[i] = 1;
		Insert(l[a], 1);
		Insert(r[a] + 1, -1);
	}
	for(int i = 1; i <= n; i++){
		scanf("%s", s);
		if(s[0] == '?'){
			printf("%d\n", ACMatch(s + 1));
		}
		else if(s[0] == '-'){
			int a;
			sscanf(s + 1, "%d", &a);
			if(in[a] == 0) continue;
			in[a] = 0;
			Insert(l[id[a]], -1);
			Insert(r[id[a]] + 1, 1);
		}
		else if(s[0] == '+'){
			int a;
			sscanf(s + 1, "%d", &a);
			if(in[a] == 1) continue;
			in[a] = 1;
			Insert(l[id[a]], 1);
			Insert(r[id[a]] + 1, -1);
		}
	}
	return 0;
}
