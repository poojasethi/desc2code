#include <bits/stdc++.h>
#define asd ar[last]

using namespace std;

const int maxn=1000100;

int N,K,at,tme,er[maxn],fw[maxn];
char s[maxn];

struct node{
	int ptr[26],fail,b,e;
	bool used;
	vector < int > rfail;
}ar[maxn];

void find_fails(){
	int q[maxn],l=0,r=0;
	
	for(int i=0;i<26;i++)
		if(ar[0].ptr[i])
			q[++r]=ar[0].ptr[i];
	
	while(l!=r){
		l++;
		int last=q[l];
		
		ar[asd.fail].rfail.push_back(last);
		
		for(int i=0;i<26;i++){
			int x = ar[asd.fail].ptr[i];
			if(asd.ptr[i]){
				ar[asd.ptr[i]].fail = x;
				
				q[++r]=asd.ptr[i];
			}
			
			else 
				asd.ptr[i] = x;
		}
	}
}

void dfs(int last){
	asd.b=++tme;
	
	for(int i=0;i<asd.rfail.size();i++)
		dfs(asd.rfail[i]);
	asd.e=tme;
}

void upd(int k,int a){
	while(k){
		fw[k]+=a;
		k&=k-1;		
	}
}

int find(int k){
	int ans=0;
	while(k<=tme){
		ans+=fw[k];
		k+=k&-k;
	}
	return ans;
}

int main(){
	scanf("%d %d",&N,&K);
	
	for(int k=1;k<=K;k++){
		scanf(" %s",s+1);
		int last=0;
		for(int i=1,w=strlen(s+1);i<=w;i++){
			if(!asd.ptr[s[i]-'a'])
				asd.ptr[s[i]-'a']=++at;
			
			last=asd.ptr[s[i]-'a'];
			s[i]=0;
		}
		
		er[k]=last;
	}
	
	find_fails();
	
	dfs(0);
	for(int i=1;i<=K;i++)
		upd(ar[er[i]].e,1) , upd(ar[er[i]].b-1,-1);
	
	for(int i=1;i<=N;i++){
		char komut;
		scanf(" %c",&komut);
		
		if(komut=='?'){
			scanf(" %s",s+1);
			long long ans=0;
			int last=0;
			for(int i=1,w=strlen(s+1);i<=w;i++){
				last=asd.ptr[s[i]-'a'];
				ans+=find(asd.b);
				s[i]=0;
			}
			printf("%lld\n",ans);
		}
		
		else if(komut == '-'){
			int i;
			scanf("%d",&i);
			
			if(!ar[er[i]].used){
				upd(ar[er[i]].e,-1) , upd(ar[er[i]].b-1,1);
				ar[er[i]].used=1;
			}
		}
		
		else{
			int i;
			scanf("%d",&i);
			
			if(ar[er[i]].used){
				upd(ar[er[i]].e,1) , upd(ar[er[i]].b-1,-1);
				ar[er[i]].used=0;
			}
		}
	}
	
	return 0;
}
