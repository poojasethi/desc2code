#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<vector>
#define N 1001000
using namespace std;
vector<int> e[N];
long long ans;
int next[N][26],fail[N],bfs[N],tree[N*2],tot,x,dfn1[N],dfn2[N],len,m,link[N],n,
	bo[N];
char c[N],cc;
void add(int &u){
	int l=strlen(c+1),i,p=1,j;
	for(i=1;i<=l;++i){
		j=c[i]-97;
		if(!next[p][j])next[p][j]=++tot;
		p=next[p][j];
	}
	u=p;
}
void build_AC(){
	int i,x,l=1,r=0,p,j,y;
	for(i=0;i<26;++i)if(x=next[1][i]){
		bfs[++r]=x;
		fail[x]=1;
	}
	while(l<=r){
		x=bfs[l++];
		for(i=0;i<26;++i)if(y=next[x][i]){
			for(p=fail[x];p!=0 && !next[p][i];p=fail[p]);
			if(!p)fail[y]=1;
			else fail[y]=next[p][i];
			bfs[++r]=y;
		}
	}
}
void add(int x,int y){
	for(int i=dfn1[x];i<=len;i+=i&(-i))tree[i]+=y;
	for(int i=dfn2[x];i<=len;i+=i&(-i))tree[i]-=y;
}
int calc(int x){
	int res=0;
	for(int i=x;i;i-=i&(-i))res+=tree[i];
	return res;
}
void dfs(int x){
	dfn1[x]=++len;
	for(int i=0;i<e[x].size();++i)dfs(e[x][i]);
	dfn2[x]=++len;
}
void pret(){
	build_AC();
	for(int i=2;i<=tot;++i)e[fail[i]].push_back(i);
	dfs(1);
	for(int i=1;i<=m;++i)add(link[i],1);
}
int main(){
	tot=1;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;++i){
		scanf("%s",c+1);
		add(link[i]);
		bo[i]=1;
	}
	pret();
	for(int i=1;i<=n;++i){
		while((cc=getchar())==' '||cc=='\n');
		if(cc=='+'){
			scanf("%d",&x);
			if(!bo[x])add(link[x],1);
			bo[x]=1;
		}
		if(cc=='-'){
			scanf("%d",&x);
			if(bo[x])add(link[x],-1);
			bo[x]=0;
		}
		if(cc=='?'){
			scanf("%s",c+1);
			int l=strlen(c+1),p=1;
			ans=0;
			for(int j=1;j<=l;++j){
				while(p!=0 && !next[p][c[j]-97])p=fail[p];
				if(p==0)p=1;
				else p=next[p][c[j]-97];
				ans+=calc(dfn1[p]);
			}
			printf("%I64d\n",ans);
		}
	}
}
