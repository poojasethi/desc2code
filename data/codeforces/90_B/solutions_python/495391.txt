#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import sys
from operator import getitem
input = sys.stdin
output = sys.stdout

def solve(size,lines):
    A = lines
    n,m = size
    
    # set of symbols
    
    symbols = {}
    for r in range(n):
        for c in range(m):
            a = A[r][c]
            if a not in symbols:
                symbols[a] = [(r,c)]
            else:
                symbols[a].append( (r,c) )
    
#    print symbols

    # finding cross positions 

    def positions_cross(p1,p2):
        return p1[0] == p2[0] or p1[1] == p2[1]

    Pcrossed = []
    for c,P in symbols.iteritems():
        np = len(P)
        
        rc = {}
        cr = {}
        for p in P:
            r,c = p
            if r not in rc:
                rc[r] = [c]
            else:
                rc[r].append(c)

            if c not in cr:
                cr[c] = [r]
            else:
                cr[c].append(r)
        
        for r,C in rc.iteritems():
            if len(C) > 1:
                for c in C:
                    Pcrossed.append((r,c))
        
        for c,R in cr.iteritems():
            if len(R) > 1:
                for r in R:
                    Pcrossed.append((r,c))
                    
#    print Pcrossed
    
    #  marking positions in matrix
    
    F = []
    for r in range(n):
        Fr = []
        for c in range(m):
            Fr.append(True)
        F.append(Fr)

    for p in Pcrossed:
        r,c = p
        F[r][c] = False
        
    # reading word
    
    word = []
    for r in range(n):
        for c in range(m):
            # if not crossed
            if F[r][c]:
                word.append(A[r][c])

    return ''.join(word)


S = input.readline().split(' ')
n = int(S[0])
m = int(S[1])
assert 1<=n and n<=100
assert 1<=m and m<=100

lines = []
for r in range(n):
    line = input.readline().strip()
    assert len(line) == m
    lines.append(line)

word = solve((n,m),lines)
output.write('%s\n' % word)
