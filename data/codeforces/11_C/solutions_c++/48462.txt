#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <sstream>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <set>
using namespace std;

int mx[] = {0,0,1,-1,1,1,-1,-1};
int my[] = {1,-1,0,0,1,-1,1,-1};

int n,m;

string a[500];
int used[500][500];
int qi[1000000];
int qj[1000000];
int qs,qe;

int bfs(int i,int j) {
	qs = 0;qe = 1;
	int ret = 0;
	qi[0] = i;
	qj[0] = j;
	used[i][j] = 1;
	++ret;
	int x,y,k;
	while(qs<qe) {
		x = qi[qs];
		y = qj[qs];
		++qs;
		for(k=0;k<8;++k) {
			x += mx[k];
			y += my[k];

			if(x>=0 && y>=0 && x<n && y<m) {
				if(a[x][y]=='1' && !used[x][y]) {
					++ret;
					qi[qe] = x;
					qj[qe] = y;
					++qe;
					used[x][y] = 1;
				}
			}

			x -= mx[k];
			y -= my[k];
		}
	}
	return ret;
}

bool tryNormal(int i, int j, int step) {
	int k;
	for(k=0;k<step;++k) {
		if(i+k>=n)return false;
		if(a[i+k][j]!='1')return false;
		if(j+k>=m)return false;
		if(a[i][j+k]!='1')return false;
		if(a[i+k][j+step-1]!='1')return false;
		if(a[i+step-1][j+k]!='1')return false;
	}
	return true;
}

bool tryDiagonal(int i, int j, int step) {
	if(j-step+1<0)return false;
	if(j+step-1>=m)return false;
	if(i+step-1+step-1>=n)return false;
	int k;
	int x = i+step-1+step-1;
	int y = j;
	for(k=0;k<step;++k) {
		if(a[i+k][j-k]!='1')return false;
		if(a[i+k][j+k]!='1')return false;
		if(a[x-k][y-k]!='1')return false;
		if(a[x-k][y+k]!='1')return false;
	}
	return true;
}

int main() {
	int T;
	cin>>T;
	int i,j,x,y,step;
	int cnt;
	bool bo;
	int ret;
	while(T--) {
		ret = 0;
		memset(used,0,sizeof used);
		cin>>n>>m;
		for(i=0;i<n;++i) {
			cin>>a[i];
		}
		for(i=0;i<n-1;++i) for(j=0;j<m;++j) if(a[i][j]=='1' && !used[i][j]) {
			cnt = bfs(i,j);
			//for(i=0;i<n;++i) {
			//	for(j=0;j<m;++j) cout<<used[i][j];
			//	cout<<endl;
			//}
			//cin.ignore();
			if(a[i+1][j]=='1') {
				// try normal
				x = i;
				while(x<n && a[x][j]=='1') {
					++x;
				}
				if(x-i>1)bo = tryNormal(i,j,x-i);
				else bo=false;
				step = x-i;
				if(cnt!=step*4-4)bo=false;
				if(bo)++ret;
			}
			else if(j>0) {
				x = 0;
				while(i+x<n && j-x>=0 && a[i+x][j-x]=='1') {
					++x;
				}
				if(x>1)bo = tryDiagonal(i,j,x);
				else bo = false;
				step = x;
				if(cnt!=step*4-4)bo=false;
				if(bo)++ret;
			}
		}
		cout<<ret<<endl;
	}
	return 0;
}
