#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <iostream>
#include <math.h>

using namespace std;
typedef long long ll;
static const double EPS = 1e-9;
static const double PI = acos(-1.0);

#define REP(i, n) for (int i = 0; i < (int)(n); i++)
#define FOR(i, s, n) for (int i = (s); i < (int)(n); i++)
#define FOREQ(i, s, n) for (int i = (s); i <= (int)(n); i++)
#define DEC(i, s) for (int i = (s); i >= 0; i--)

#define SIZE(v) (int)((v).size())
#define MEMSET(v, h) memset((v), h, sizeof(v))
#define FIND(m, w) ((m).find(w) != (m).end())

int w, h;
int field[260][260];
bool visit1[260][260];
bool visit2[260][260];
const int dx[8] = { 1, 1, 1, 0, -1, -1, -1, 0 };
const int dy[8] = { -1, 0, 1, 1, 1, 0, -1, -1 };

int dfs1(int x, int y) {
  if (visit1[y][x]) { return 0; }
  visit1[y][x] = true;
  int ret = 1;
  for (int i = 0; i < 8; i++) {
    int nx = x + dx[i];
    int ny = y + dy[i];
    if (field[ny][nx] == 1) {
      ret += dfs1(nx, ny);
    }
  }
  return ret;
}

int dfs2(bool first, int x, int y, int fx, int fy, int dir, int depth, int len, int cir) {
  if (!first && x == fx && y == fy) {
    if (depth != len * 4) { return 0; }
    return depth;
  }
  if (visit2[y][x]) { return 0; }
  visit2[y][x] = true;
  for (int i = 0; i < 8; i++) {
    if (!first && i % 2 == 1) { continue; }
    int ndir = (i + dir) % 8;
    int nx = x + dx[ndir];
    int ny = y + dy[ndir];
    if (field[ny][nx] == 1) {
      if (!first && i != 0) {
        cir++;
        if (len == -1) {
          len = depth;
        } else {
          if (depth != len * cir) { return 0; }
        }
      }
      return dfs2(false, nx, ny, fx, fy, ndir, depth + 1, len, cir);
    }
  }
  return 0;
}

int main() {
  int test;
  scanf("%d", &test);
  while (test--) {
    MEMSET(field, 0);
    MEMSET(visit1, false);
    MEMSET(visit2, false);
    scanf("%d %d", &h, &w);
    FOREQ(y, 1, h) FOREQ(x, 1, w) {
      char c;
      scanf(" %c ", &c);
      field[y][x] = c - '0';
    }
    int ans = 0;
    FOREQ(y, 1, h) FOREQ(x, 1, w) {
      if (!visit1[y][x] && field[y][x] == 1) {
        int d1 = dfs1(x, y);
        int d2 = dfs2(true, x, y, x, y, 0, 0, -1, 0);
        if (d1 == d2) { ans++; }
      }
    }
    printf("%d\n", ans);
  }
}
