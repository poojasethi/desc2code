#include <cstdio>
#include <cmath>
#include <cctype>
#include <ctime>
#include <cstring>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <iostream>
#include <sstream>

using namespace std;

typedef long long i64;
template<class T> int size(const T &a) {
	return int(a.size());
}
template<class T> T sqr(const T &a) {
	return a * a;
}
const int max_n = 260, max_n2 = max_n * max_n;
char a[max_n][max_n];
struct Pos {
	int i, j;
	void init(int i, int j) {
		this->i = i;
		this->j = j;
		a[i][j] = '0';
	}
} st[max_n2];
int n, m;
bool InField(int i, int j) {
	return i >= 0 && j >= 0 && i < n && j < m;
}
int go(int &i, int &j, int di, int dj) {
	int s = 0;
	while (InField(i + di, j + dj) && a[i + di][j + dj] == '1') {
		s++;
		i += di;
		j += dj;
	}
	return s;
}
const int di[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
const int dj[8] = {1, 1, 1, 0, -1, -1, -1, 0};
int bfs(int i, int j) {
	st[0].init(i, j);
	int u = 1;
	for (int d = 0; d < u; d++) {
		int i = st[d].i, j = st[d].j;
		for (int dir = 0; dir < 8; dir++) {
			int r = i + di[dir], c = j + dj[dir];
			if (InField(r, c) && a[r][c] == '1') {
				st[u++].init(r, c);
			}
		}
	}
	return u;
}
int main() {
#ifdef pperm
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	int T;
	scanf("%d", &T);
	while (T--) {
		scanf("%d %d", &n, &m);
		for (int i = 0; i < n; i++) {
			scanf("%s", a[i]);
		}
		int res = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (a[i][j] == '1') {
					int r = i, c = j;
					int s = go(r, c, 1, 0);
					bool g = 1;
					if (s) {
						if (go(r, c, 0, 1) != s) {
							g = 0;
						} else if (go(r, c, -1, 0) != s) {
							g = 0;
						} else if (go(r, c, 0, -1) != s) {
							g = 0;
						}
					} else {
						s = go(r, c, 1, -1);
						if (s && go(r, c, 1, 1) != s) {
							g = 0;
						} else if (go(r, c, -1, 1) != s) {
							g = 0;
						} else if (go(r, c, -1, -1) != s) {
							g = 0;
						}
					}
					int k = bfs(i, j);
					if (k == s * 4 && g) {
						res++;
					}
				}
			}
		}
		printf("%d\n", res);
	}
	return 0;
}
