#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#include <utility>
#include <cmath>
#include <map>
#include <set>

using namespace std;

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
const int MAXN = 250;
string s[MAXN];
int used[250][250];
vector<pair<int, int> > v;

int n, m;

void dfs(int vi, int vj)
{
	used[vi][vj] = 1;
	v.push_back(make_pair(vi, vj));
	for (int dx = -1; dx <= 1; ++dx)
		for (int dy = -1; dy <= 1; ++dy)
	{
		int vin = vi + dx;
		int vjn = vj + dy;
		if (vin >= 0 && vin < n && vjn >= 0 && vjn < m)
			if (s[vin][vjn] == '1' && !used[vin][vjn])
				dfs(vin, vjn);
	}
}

bool isHor()
{
	if (v.size() < 4)
		return false;
	int maxx = -1000000000;
	int minx = 1000000000;
	int maxy = -1000000000;
	int miny = 1000000000;
	for (int i = 0; i < (int)v.size(); ++i)
	{
		maxx = max(maxx, v[i].first);
		minx = min(minx, v[i].first);
		maxy = max(maxy, v[i].second);
		miny = min(miny, v[i].second);
	}

	if (maxy - miny != maxx - minx)
			return false;
	int len = maxy - miny;
	if (v.size() != len*4)
		return false;
	for (int i = 0; i < (int)v.size(); ++i)
		if (v[i].first != minx && v[i].second != miny && v[i].first != maxx && v[i].second != maxy)
			return false;
	return true;
}

bool isDiag()
{
	int chx = -1;
	int chy = -1;
	for (int i = 0; i < (int)v.size(); ++i)
	{
		int x = v[i].first;
		int y = v[i].second;
		v[i].first = x-y;
		v[i].second = x+y;
		if (!i)
		{
			chx = abs(x-y)%2;
			chy = abs(x+y)%2;
		}
		else if (chx != abs(x-y)%2 || chy != abs(x+y)%2)
			return false;

		v[i].first = (x-y+chx)/2;
		v[i].second = (x+y+chy)/2;
	}
	return isHor();

}
void solve()
{
	cin >> n >> m;
	for (int i = 0; i < n; ++i)
	{
		cin >> s[i];
		for (int j = 0; j < m; ++j)
			used[i][j] = 0;
	}

	int ans = 0;
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
			if (s[i][j] == '1' && !used[i][j])
			{
				v.clear();
				dfs(i, j);
				if (isHor())
					ans++;
				else if (isDiag())
					ans++;
			}
	printf("%d\n", ans);
}
int main()
{
	int test;
	scanf("%d", &test);
	while (test--)
		solve();
	return 0;
}