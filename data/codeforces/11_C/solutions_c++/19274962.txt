#include <iostream> 
#include <cstdio> 
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm> 
#include <vector>
#include <map>
using namespace std;
const int MAXN = 255;
string mat[MAXN];
int n, m;
int dx[8] = { 0, 1, 0, -1, 1, 1, -1, -1 };
int dy[8] = { 1, 0, -1, 0, -1, 1, -1, 1 };
void dfs(int x,int y,int &cur)
{
	if (x < 0 || x >= n || y < 0 || y >= m || mat[x][y] != '1')
		return;
	cur++;
	mat[x][y] = 'x';
	for (int i = 0; i < 8; i++)
		dfs(x + dx[i], y + dy[i], cur);
}
bool legal(int x, int y, int len, int l, int r)
{
	for (int i = 0; i <= len; i++)
	{
		for (int j = l; j<r; j++)
		{
			int tx = x + dx[j] * i;
			int ty = y + dy[j] * i;
			if (tx<0 || tx >= n || ty<0 || ty >= m || mat[tx][ty] != 'x') 
				return false;
		}

	}
	return true;
}
int main() 
{
	int t;
	cin >> t;
	while (t--)
	{
		int ans = 0;
		cin >> n >> m;
		for (int i = 0; i < n; i++)
			cin >> mat[i];
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (mat[i][j] == '1')
				{
					int cur = 0;
					dfs(i, j, cur);
					if (cur % 4 || cur / 4 > 250 || cur <= 0)
						continue;
					ans += legal(i, j, cur / 4, 0, 2) && legal(i + cur / 4, j + cur / 4, cur / 4, 2, 4);
					ans += legal(i, j, cur / 4, 4, 6) && legal(i + cur / 2, j, cur / 4, 6, 8);
				}
			}
		}
		cout << ans << endl;
	}
	return 0;
}