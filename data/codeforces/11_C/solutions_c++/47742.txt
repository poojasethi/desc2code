#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>


using namespace std;

int dx[] = {1, 1, 1, 0, -1, -1, -1, 0},
    dy[] = {-1, 0, 1, 1, 1, 0, -1, -1};

#define maxn 310

int was[maxn][maxn], sx[maxn * maxn], sy[maxn * maxn], sn;
char a[maxn][maxn];

void dfs( int y, int x )
{
  sx[sn] = x;
  sy[sn++] = y;
  was[y][x] = 1;
  for (int i = 0; i < 8; i++)
  {
    int ny = y + dy[i],
        nx = x + dx[i];
    if (!was[ny][nx] && a[ny][nx] == '1')
      dfs(ny, nx);
  }
}

void convert()
{
  for (int i = 0; i < sn; i++)
  {
    int x = sx[i] + sy[i],
        y = sx[i] - sy[i] + maxn * 2;
    sx[i] = x;
    sy[i] = y;
  }
}

int test( int rot )
{
  int l = maxn * 100, r = -maxn * 100,
      d = maxn * 100, u = -maxn * 100;

  for (int i = 0; i < sn; i++)
  {
    l = min(l, sx[i]);
    r = max(r, sx[i]);
    d = min(d, sy[i]);
    u = max(u, sy[i]);
  }
  int side = r - l;
//  fprintf(stderr, "!rot = %d, side = %d | %d\n", rot, side, u - d);
  if (side != u - d || side == 0)
      return 0;
  if (rot)
  {
    if (side % 2)
      return 0;
    if (l % 2 != d % 2)
      return 0;
    side /= 2;
  }
 // fprintf(stderr, "!rot = %d, side = %d\n", rot, side);
  if (sn != side * 4)
    return 0;
  for (int i = 0; i < sn; i++)
    if (sx[i] == l || sx[i] == r || sy[i] == u || sy[i] == d)
    {}
    else
      return 0;
  return 1;
}

int main( void )
{
  int tn;
  scanf("%d", &tn);
  while (tn--)
  {
    int res = 0;
    int n, m;
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
      scanf("%s", a[i] + 1);
    memset(a[n + 1], 0, sizeof(int) * (m + 5));

    
    for (int i = 0; i <= n + 1; i++)
      for (int j = 0; j <= m + 1; j++)
        was[i][j] = 0;

    for (int i = 1; i <= n; i++)
      for (int j = 1; j <= m; j++)
        if (!was[i][j] && a[i][j] == '1')
        {
          sn = 0;
          dfs(i, j);
          res += test(0);
          convert();
          res += test(1);
        }
    printf("%d\n", res);
  }

  return 0;
}

