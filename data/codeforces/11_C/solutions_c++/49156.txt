#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <climits>
#include <cmath>
#include <cctype>
#include <sstream>
#include <map>
#include <set>
#include <cstdio>
#include <queue>
#define f(i,x,y) for(int i=x;i<y;i++)
#define ll long long

using namespace std;

int t,m,n;
int A[250][250]; int reg=0; 
bool used[250][250];
//int di[8]={1,-1,0,0,1,1,-1,-1};
//int dj[8]={0,0,1,-1,1,-1,1,-1};
int di[8]={0,-1,0,1,1,1,-1,-1};
int dj[8]={-1,0,1,0,1,-1,-1,1};
vector<int> dir;  bool isnt;

void dfs(int i,int j){
    A[i][j]=reg; used[i][j]=1; 
    bool begin=1;
    f(k,0,8){
        int ni=i+di[k],nj=j+dj[k]; 
        if(0<=ni && ni<m && 0<=nj && nj<n && !used[ni][nj] && A[ni][nj]){ 
            if(begin) begin=0, dir.push_back(k);
            else isnt=1;//,printf(".%d %d %d\n",ni,nj,k);
            dfs(ni,nj);
        }
    }
}
void show(){
    f(i,0,dir.size())cout<<dir[i]<<" ";cout<<endl;
}
bool issquare(){
    if(isnt) return 0;
    if(dir.size()<3)return 0;
    if(dir.size()==3){
        int nums[3]; f(i,0,3)nums[i]=dir[i];
        sort(nums,nums+3);
        if(nums[0]<4 && nums[2]>=4)return 0;
        if(abs(dir[0]-dir[2])!=2)return 0;
    
        return 1;
    }
    dir.push_back(dir.back());
    if(dir.size()%4)return 0;
    int sd=dir.size()/4;
    
    f(i,1,sd){
        if(dir[i]!=dir[i-1])return 0;
        if(dir[i+sd]!=dir[i+sd-1])return 0;
        if(dir[i+2*sd]!=dir[i+2*sd-1])return 0;
        if(dir[i+3*sd]!=dir[i+3*sd-1])return 0;
    }
    int nums[4]; f(i,0,4)nums[i]=dir[i*sd];
    sort(nums,nums+4);
    if(nums[0]<4 && nums[3]>=4)return 0;
    if(abs(dir[0]-dir[2*sd])!=2)return 0;
    if(abs(dir[sd]-dir[3*sd])!=2)return 0;

    return 1;
}

int main()
{
    cin>>t;
    f(caso,1,t+1){
        cin>>m>>n; string cad;
        f(i,0,m){
            cin>>cad;
            f(j,0,n)A[i][j]=cad[j]-'0';
        }
        f(i,0,m)f(j,0,n)used[i][j]=0;
        reg=0; 
        int res=0;
        f(i,0,m)f(j,0,n)if(!used[i][j] && A[i][j]){
            isnt=0, dir.clear(), reg++, dfs(i,j);//, show();
            if(issquare()) res++;
        }
        cout<<res<<endl;        
//        f(i,0,m){f(j,0,n)printf("%d\t",A[i][j]); printf("\n");}
    }
}
