#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

char b[1000][1000];
bool vis[1000][1000];
int m,n;
typedef pair<int,int> pii;
#define MP make_pair

const int dx[]={0,1,0 ,-1,    1,  1, -1, -1};
const int dy[]={1,0,-1, 0,    1, -1, -1,  1};

bool in_range(int x, int y) { return 0 <= x && x < m && 0 <= y && y < n; }

vector<pii> comp;
void dfs(int x, int y) {
	if (vis[x][y]) return;
	vis[x][y] = 1;
	comp.push_back(MP(x,y));
	for (int k=0;k<8;++k) {
		int nx = x + dx[k], ny = y + dy[k];
		if (in_range(nx,ny) && b[nx][ny]=='1') {
			dfs(nx,ny);
		}
	}
}

int main() {
	int ncases;
	scanf("%d", &ncases);
	while (ncases-- > 0) {
		scanf("%d %d", &m, &n);
		//printf("TEST\n---------\n");
		for (int i=0;i<m;++i) {
			scanf("%s", b[i]);
			//printf("%s\n", b[i]);
			for (int j=0;j<n;++j) {
				vis[i][j] = 0;
			}
		}

		int ans = 0;
		for (int i=0;i<m;++i) {
			for (int j=0;j<n;++j) if (!vis[i][j] && b[i][j]=='1') {
				comp.clear();
				dfs(i,j);
				//printf("DFS %d %d SZ: %d\n", i,j,comp.size());
				if (comp.size() < 4) continue;
				comp.push_back(comp[0]);
				for (int start=0, end = 4;start <= 4; start += 4, end += 4) {
					int sides[4]={0,0,0,0};
					int at = 0;
					for (int k=start;k<end;++k) {
						while (at+1 < comp.size() && comp[at].first + dx[k] == comp[at+1].first && comp[at].second + dy[k] == comp[at+1].second) {
							++sides[k-start];
							++at;
						}
					}
					//printf("SIDES %d %d %d %d AT %d COMP SIZE %d\n", sides[0], sides[1], sides[2], sides[3], at, comp.size());
					if (at+1 == comp.size() && sides[0] >= 1 && sides[0]==sides[1] && sides[1]==sides[2] && sides[2] == sides[3]) {
						++ans;
					}
				}
			}
		}
		printf("%d\n", ans);
	}
}
