#include <cstdio>
#include <cstring>
#include <cassert>
#include <algorithm>
using namespace std;

#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
#define FOR(i, a, b) for (int i = (a); i < (int)(b); ++i)
#define FOREACH(i, c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)

int field[252][252];

int dfs1(int y, int x, int k)
{
  assert(field[y][x] == 1);
  field[y][x] = k;

  static const int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};
  static const int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};
  int count = 0;
  REP(j, 8) {
    int ny = y + dy[j], nx = x + dx[j];
    if (field[ny][nx] == 1) {
      count += dfs1(ny, nx, k);
    }
  }
  return count + 1;
}

int step_count[4];

int dfs2(int y, int x, int step, int k, int l)
{
  static const int dy[2][4] = {{-1, 0, 1, 0}, {-1, -1, 1, 1}};
  static const int dx[2][4] = {{0, -1, 0, 1}, {-1, 1, 1, -1}};

  REP(j, 2) {
    int ny = y - dy[l][step], nx = x - dx[l][step];
    if (field[ny][nx] == k) {
      ++step_count[step];
      return dfs2(ny, nx, step, k, l) + 1;
    }
    ++step;
    if (step == 4)
      return 0;
  }
  return -1;
}

int main()
{
  int T;
  scanf("%d", &T);
  while (T--) {
    memset(field, 0, sizeof(field));
    int n, m;
    scanf("%d%d", &n, &m);
    REP(y, n) {
      REP(x, m) {
        char c;
        scanf(" %c", &c);
        field[y+1][x+1] = c - '0';
      }
    }

    int k = 2, count = 0;
    FOR(y, 1, n+1) {
      FOR(x, 1, m+1) {
        if (field[y][x] == 1) {
          int c1 = dfs1(y, x, k);
          REP(j, 2) {
            memset(step_count, 0, sizeof(step_count));
            int c2 = dfs2(y, x, 0, k, j);
            if (c1 == c2) {
              bool ok = true;
              FOR(i, 1, 4) {
                if (step_count[i] != step_count[0]) {
                  ok = false;
                  break;
                }
              }
              if (ok) {
                ++count;
              }
            }
          }
        }
      }
    }

    printf("%d\n", count);
  }
}
