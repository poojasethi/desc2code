def find(x, parents):
    if parents[x] == x:
        return x
    parents[x] = find(parents[x], parents)
    return parents[x]


def union(x, y, parents):
    p1 = find(x, parents)
    p2 = find(y, parents)
    father[p1] = p2

n, m = map(int, raw_input().split())
father = range(m+1)
language = []
zero = 0
for _ in range(n):
    l = map(int, raw_input().split())
    if l[0] == 0:
        zero += 1
        continue
    l = l[1:]
    language += l
    for i in range(len(l)-1):
        union(l[i], l[i+1], father)

sub_graph_count = len(set(map(lambda x: find(x, father), set(language))))
print sub_graph_count - [0, 1][sub_graph_count > 0] + zero
