#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>

using namespace std;
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define LL long long
LL max(LL a,LL b){if (a>b){return a;} else {return b;}}
LL min(LL a,LL b){if (a<b){return a;} else {return b;}}

#define M 400001

int n, l;
LL x, y, t;

struct dat{
    int ma;
    LL cy, x, y;
}a[M];

bool operator< (dat u, dat v){return u.ma < v.ma;}

int f(LL d){
    if (d < 0) return f(-d);
    return d % 2;
}

int main(){
    scanf("%d%d", &n, &l);
    FOE(i, 1, n){
        scanf("%I64d%I64d%I64d", &t, &x, &y);
        if (f(x + y) != f(t)){
            puts("NO");
            return 0;
        }
        a[i].x = x;
        a[i].y = y;
        a[i].cy = t / (LL)l;
        a[i].ma = t % (LL)l;
    }

    a[0].x = 0;
    a[0].y = 0;
    a[0].cy = 0;
    a[0].ma = 0;

    a[++n].x = 0;
    a[n].y = 0;
    a[n].cy = -1;
    a[n].ma = l;

    sort(a, a + n);

    int mx = -1 * l, my = -1 * l, Mx = l, My = l;
    //mx is the x+y border, my is the x-y border
    FOE(i, 1, n){
        LL dx = abs(a[i].x - a[i - 1].x);
        LL dy = abs(a[i].y - a[i - 1].y);
        if ((dx + dy) > abs(a[i].cy - a[i - 1].cy) * l + abs(a[i].ma - a[i - 1].ma)){
            puts("NO");
            return 0;
        }

        if (a[i].cy != a[i - 1].cy){
            LL dif = a[i].ma - a[i - 1].ma;
            LL df = abs(a[i].cy - a[i - 1].cy);
            LL de = 1; if (a[i].cy < a[i - 1].cy) de = -1;
            LL ax = a[i].x - a[i - 1].x;
            LL ay = a[i].y - a[i - 1].y;
            ax *= de;
            ay *= de;
      //      printf("%d %I64d %I64d %I64d %I64d\n", i, dif, df, ax, ay);

            while (mx <= Mx && mx * df < ax + ay - dif) mx++;
            while (my <= My && my * df < ax - ay - dif) my++;
            while (mx <= Mx && Mx * df > dif + ax + ay) Mx--;
            while (my <= My && My * df > dif + ax - ay) My--;
     //       printf("Res = {%d, %d}, {%d, %d}\n", mx, Mx, my, My);
        }
    }

    if (f(mx) != f(l)) mx++;
    if (f(my) != f(l)) my++;

  //  printf("%d %d %d %d\n", mx, Mx, my, My);
    if (mx > Mx || my > My){
        puts("NO");
        return 0;
    }

    LL dx = (mx + my) / 2;
    LL dy = (mx - my) / 2;

  //  printf("%I64d %I64d\n", dx, dy);

    FOE(i, 0, n - 1){
        a[i].x -= a[i].cy * dx;
        a[i].y -= a[i].cy * dy;
    }

    int j = 0;
    int px = 0;
    int py = 0;

    a[n].x = dx;
    a[n].y = dy;
    FOE(i, 0, n){
      //  printf("TAR %I64d, %I64d now %d, %d\n", a[i].x, a[i].y, px, py);
        while (px < a[i].x){
            px++;
            j++;
            printf("R");
        }
        while (px > a[i].x){
            px--;
            j++;
            printf("L");
        }
        while (py < a[i].y){
            py++;
            j++;
            printf("U");
        }
        while (py > a[i].y){
            py--;
            j++;
            printf("D");
        }
        while (j != a[i].ma){
            printf("LR");
            j += 2;
        }
    }

    puts("");
    return 0;
}
