#include <iostream>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long int ll;

ll n,l;
ll t[5000000];

struct elem {
  ll tmod;
  ll pos;
  ll tdiv;
  elem() {
  }
  elem(ll intmod,ll inpos,ll intdiv) {
    tmod=intmod;pos=inpos;tdiv=intdiv;
  }
};

bool operator<(elem e1,elem e2)
{
  return e1.tmod<e2.tmod;
}
/*
ll divdown(ll a,ll b)
{
  if (a>=0) return a/b;
  return a/b-(a%b!=0);
}

ll divup(ll a,ll b)
{
  if (a>=0) return a/b+(a%b!=0);
  return a/b;
}
*/

ll divdown(ll x, ll y) {
    if (x >= 0) return x / y;
    return x / y - (x % y ? 1 : 0);
}

ll divup(ll x, ll y) {
    if (x >= 0) return (x + y - 1) / y;
    return x / y;
}


void soluciona(ll pos[5000000],int sol[5000000])
{
  /*
  cout<<"soluciona"<<endl;
  for (int i=0;i<n;i++)
    cout<<pos[i]<<",";
  cout<<endl;
  */
  vector<elem> v;
  v.push_back(elem(0,0,0));
  v.push_back(elem(l,0,-1));
  for (int i=0;i<n;i++)
    v.push_back(elem(t[i]%l,pos[i],t[i]/l));
  /*
  for (int i=0;i<int(v.size());i++)
    cout<<"("<<v[i].tmod<<","<<v[i].pos<<","<<v[i].tdiv<<")";
  cout<<endl;
  */
  sort(v.begin(),v.end());
  /*
  for (int i=0;i<int(v.size());i++)
    cout<<"("<<v[i].tmod<<","<<v[i].pos<<","<<v[i].tdiv<<")";
  cout<<endl;
  */
  ll inf=0;
  ll sup=l;
  /*
  if (v[0].tdiv) {
    sup=min(sup,divdown(v[0].pos,v[0].tdiv));
    inf=max(inf,divup(v[0].pos-v[0].tmod,v[0].tdiv));
  } else if (not (0<=v[0].pos and v[0].pos<=v[0].tmod)) {
    cout<<"NO"<<endl;
    exit(0);
  }
  */
  for (int i=1;i<int(v.size());i++) {
    ll rpos=v[i].pos-v[i-1].pos;
    ll rdiv=-(v[i].tdiv-v[i-1].tdiv);
    ll rmod=v[i].tmod-v[i-1].tmod;
    ll lh=-rpos;
    ll rh=rmod-rpos;
    if (rdiv<0) {
      rdiv=-rdiv;
      lh=-lh;
      rh=-rh;
      swap(lh,rh);
    }
    if (rdiv) {
      sup=min(sup,divdown(rh,rdiv));
      inf=max(inf,divup(lh,rdiv));
    } else if (not (lh<=0 and 0<=rh)) {
      cout<<"NO"<<endl;
      exit(0);
    }
    /*
    if (rdiv) {
      if (rdiv>0) {
	sup=min(sup,divdown(rpos,rdiv));
	inf=max(inf,divup(rpos-rmod,rdiv));
      } else {
	inf=max(inf,divup(rpos,rdiv));
	sup=min(sup,divdown(rpos-rmod,rdiv));
      }
    } else if (not (0<=rpos and rpos<=rmod)) {
      cout<<"NO"<<endl;
      exit(0);
    }
    */
  }
  if (inf>sup) {
    cout<<"NO"<<endl;
    exit(0);
  }
  //cout<<inf<<","<<sup<<endl;
  ll total=inf;
  ll unosant=0;
  for (int i=0;i<int(v.size());i++) {
    ll unos=v[i].pos-v[i].tdiv*total;
    for (int j=0;j<unos-unosant;j++)
      sol[v[i].tmod-1-j]=1;
    unosant=unos;
  }
  /*  
  ll unos=total;
  for (int j=0;j<unos-unosant;j++)
    sol[l-1-j]=1;
  */
  /*
  cout<<"solucion:"<<endl;
  for (int i=0;i<n;i++)
    cout<<sol[i];
  cout<<endl;
  */
}

ll pos[2][5000000];
int sol[2][5000000];

int main()
{
  ios::sync_with_stdio(false);
  cin>>n>>l;
  for (int i=0;i<n;i++) {
    ll x,y;
    cin>>t[i]>>x>>y;
    if ((t[i]+x+y)%2) {
      cout<<"NO"<<endl;
      exit(0);
    }
    pos[0][i]=(t[i]+x+y)/2;
    pos[1][i]=(t[i]+x-y)/2;
  }
  soluciona(pos[0],sol[0]);
  soluciona(pos[1],sol[1]);
  string s;
  for (int i=0;i<l;i++) {
    if (sol[0][i] and sol[1][i]) s+="R";
    else if (sol[0][i] and not sol[1][i]) s+="U";
    else if (not sol[0][i] and sol[1][i]) s+="D";
    else if (not sol[0][i] and not sol[1][i]) s+="L";
  }
  cout<<s<<endl;
}
