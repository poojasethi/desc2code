#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;

#define n	200005
#define m	2000005
#define lf	else if
#define I64	long long 
#define For(i,a,b)	for(int i=a;i<=b;i++)

int		N,M,L,Ans[2][m];
I64		T[n],X[n],Y[n];
bool	V[2];
struct	Nod{I64	t,x,s;}A[n];

void	End()	{puts("NO");exit(0);}
bool	Cmp(Nod a,Nod b)	{return	a.t<b.t;}

void	Work(I64*T,I64*X,int*Ans){
		V[0]=V[1]=1;M=0;
		For(i,1,N)	A[++M]=(Nod){T[i]%L,X[i],-T[i]/L};
		A[++M]=(Nod){0,0,0};	A[++M]=(Nod){L,0,1};
		sort(A+1,A+M+1,Cmp);	I64	Q=1ll<<60,P=-Q;

		For(i,1,M-1){
			I64	dt=A[i+1].t-A[i].t,dx=A[i+1].x-A[i].x,ds=A[i+1].s-A[i].s;
			I64	Dn=-dt-dx,Up=dt-dx;
			if	(ds&1)	V[Up&1^1]=0;
			lf	(Up&1)	End();

			if	(!ds){
				if	(Dn>Up)	End();	continue;
			}
			if	(ds<0)	Up*=-1,Dn*=-1,ds*=-1,swap(Up,Dn); 
			if	(Up>=0)	Q=min(Q,Up/ds);
				else	Q=min(Q,-(-Up-1)/ds-1);
			if	(Dn>0)	P=max(P,(Dn-1)/ds+1);
				else	P=max(P,Dn/ds);
		}

		if	(!V[0]&&!V[1])	End();
		if	(!V[P&1])	P++;
		if	(P>Q)	End();
		For(i,1,M-1){
			I64	t=(A[i+1].x+A[i+1].s*P)-(A[i].x+A[i].s*P);
			For(j,A[i].t+1,A[i+1].t)	Ans[j]=(t>0)?1:-1,t-=Ans[j];
		}
}

int		main(){
		scanf("%d%d",&N,&L);
		For(i,1,N)
			scanf("%I64d%I64d%I64d",&T[i],&X[i],&Y[i]),
			X[i]-=Y[i],Y[i]+=X[i]+Y[i]; 
		Work(T,X,Ans[0]);	Work(T,Y,Ans[1]);

		For(i,1,L){
			if	(Ans[0][i]==-1&&Ans[1][i]==-1)	putchar('L');
			if	(Ans[0][i]==-1&&Ans[1][i]==1)	putchar('U');
			if	(Ans[0][i]==1&&Ans[1][i]==-1)	putchar('D');
			if	(Ans[0][i]==1&&Ans[1][i]==1)	putchar('R');
		}
}