#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 155;
const int mod = 1e9 + 7;
int dp[N][N][N][2][2];
int f[N][N][N][2][2];
void add(int &x, int val) {
	x += val;
	if(x >= mod)
		x -= mod;
}
int Sum(int i, int a, int b, int c, int d, int x, int y) {
	if(a > b || c > d)	return 0;
	int ret = 0;
	add(ret, f[i][b][d][x][y]);
	add(ret, mod - f[i][b][c - 1][x][y]);
	add(ret, mod - f[i][a - 1][d][x][y]);
	add(ret, f[i][a - 1][c - 1][x][y]);
	return ret;
}
int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; i ++)
		for(int j = 1; j <= m; j ++)
			for(int k = j; k <= m; k ++)
				dp[i][j][k][1][1] = 1;
	int answer = 0;
	for(int i = 1; i <= n; i ++) {
		for(int j = 1; j <= m; j ++)
			for(int k = j; k <= m; k ++) {
				add(dp[i][j][k][1][1], Sum(i - 1, j, k, j, k, 1, 1)); // 1 1
				add(answer, dp[i][j][k][1][1]);
				int t = 0; 
				add(t, Sum(i - 1, j, k, k+1, m, 1, 1));								// 1 0
				add(t, Sum(i - 1, j, k, k, m, 1, 0));
				add(dp[i][j][k][1][0], t);
				add(answer, dp[i][j][k][1][0]);
				t = 0;
				add(t, Sum(i - 1, 1, j - 1, j, k, 1, 1));
				add(t, Sum(i - 1, 1, j, j, k, 0, 1));
				add(dp[i][j][k][0][1], t);
				add(answer, dp[i][j][k][0][1]);
				t = 0;
				add(t, Sum(i - 1, 1, j - 1, k+1, m, 1, 1));
				add(t, Sum(i - 1, 1, j - 1, k, m, 1, 0));
				add(t, Sum(i - 1, 1, j, k+1, m, 0, 1));
				add(t, Sum(i - 1, 1, j, k, m, 0, 0));
				add(dp[i][j][k][0][0], t);
				add(answer, dp[i][j][k][0][0]);
			}
		for(int j = 1; j <= m; j ++)
			for(int k = 1; k <= m; k ++)
				rep(a, 2) rep(b, 2) {
					int &res = f[i][j][k][a][b];
					res = dp[i][j][k][a][b];
					add(res, f[i][j - 1][k][a][b]);
					add(res, f[i][j][k - 1][a][b]);
					add(res, mod - f[i][j - 1][k - 1][a][b]);
				}
	}
	printf("%d\n", answer);
	return 0;
}

