#include <iostream>
#include <cstring>
#include <cassert>

#define M 1000000007
#define rep(i, l, r) for (int i = (l); i < (r); i++)
#define add(a, b) (a) = (0ll + (a)+(b)) % M

using namespace std;

int f[2][150][150][4], g[150][150][4];
int n, m;
int p;

int gg(int l, int r, int a) {
	if (0 <= l && l < m && 0 <= r && r < m) {
		return g[l][r][a];
	}
	return 0;
}

int sum(int l1, int r1, int l2, int r2, int a) {
	return (0ll + gg(r1, r2, a) - gg(r1, l2-1, a) - gg(l1-1, r2, a) + gg(l1-1, l2-1, a)) % M;
}

int main() {
	cin >> n >> m;
	int ans = 0;
	p = 0;
	rep (l, 0, m) {
		rep (r, l, m) {
			f[1-p][l][r][0] = 1;
			add(ans, 1);
		}
	}
	rep (_, 1, n) {
		memset(g, 0, sizeof(g));
		rep (k, 0, 4) {
			rep (l, 0, m) {
				rep (r, 0, m) {
					add(g[l][r][k], 0ll + gg(l-1, r, k) + gg(l, r-1, k) - gg(l-1, r-1, k) + f[1-p][l][r][k]);
				}
			}
		}
		memset(f[p], 0, sizeof(f[p]));
		rep (l, 0, m) {
			rep (r, l, m) {
				add(f[p][l][r][0], sum(l, r, l, r, 0));
				add(f[p][l][r][1], sum(0, l, l, r, 1));
				add(f[p][l][r][1], sum(0, l-1, l, r, 0));
				add(f[p][l][r][2], sum(l, r, r, m-1, 2));
				add(f[p][l][r][2], sum(l, r, r+1, m-1, 0));
				add(f[p][l][r][3], sum(0, l, r, m-1, 3));
				add(f[p][l][r][3], sum(0, l-1, r, m-1, 2));
				add(f[p][l][r][3], sum(0, l, r+1, m-1, 1));
				add(f[p][l][r][3], sum(0, l-1, r+1, m-1, 0));
				add(f[p][l][r][0], 1);
				rep (k, 0, 4) {
					add(ans, f[p][l][r][k]);
				}
			}
		}
		p = 1 - p;
	}
	if (ans < 0) {
		ans += M;
	}
	cout << ans << "\n";
	return 0;
}
