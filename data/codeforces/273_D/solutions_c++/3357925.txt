#include <iostream>
using namespace std;
typedef long long ll;
const ll P = 1000000007LL;
const int MAX = 160;

ll a[MAX][MAX][MAX], b[MAX][MAX][MAX], c[MAX][MAX][MAX], d[MAX][MAX][MAX];
ll ans;
int m, n;

void add(ll &y, ll x){
	y += x;
	y = (y % P + P) % P;
}

int main() {
	ios::sync_with_stdio(false);

	cin >> m >> n;
	for(int i = 1; i <= n; i++)
		for(int j = i; j <= n; j++)
			a[1][i][j] = 1;


	ans = n * (n + 1) / 2;

	for(int k = 2; k <= m; k++){

		for(int i = n; i > 0; i--){
			for(int j = i; j <= n; j++){
				a[k][i][j] = a[k - 1][i][j];
				add(a[k][i][j], a[k][i + 1][j] + a[k][i][j - 1] - a[k][i + 1][j - 1]);
			}
		}

		for(int i = 1; i <= n; i++)
			for(int j = i; j <= n; j++){
				a[k][i][j]++;
				add(ans, a[k][i][j]);
			}


		for(int i = n; i > 0; i--){
			for(int j = n; j >= i; j--){
				b[k][i][j] = b[k - 1][i][j];
				add(b[k][i][j], b[k][i + 1][j] + b[k][i][j + 1] - b[k][i + 1][j + 1] + a[k - 1][i][j + 1]);

				c[k][n - j + 1][n - i + 1] = b[k][i][j];

				add(ans, b[k][i][j]);
				add(ans, c[k][n - j + 1][n - i + 1]);
			}
		}

		for(int i = 1; i <= n; i++){
			for(int j = n; j >= i; j--){
				d[k][i][j] = d[k - 1][i][j];
				add(d[k][i][j], d[k][i - 1][j] + d[k][i][j + 1] - d[k][i - 1][j + 1]);
				add(d[k][i][j], a[k - 1][i - 1][j + 1] + b[k - 1][i - 1][j] + c[k - 1][i][j + 1]);

				add(ans, d[k][i][j]);
			}
		}

	}


	cout << ans << endl;

	return 0;
}
