#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <iostream>

using namespace std;

typedef long long ll;
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
#define N 155
using namespace std;

int n, m;
LLD ret, cnt, dp[N][N][N][2][2], S[2][2][N][N];
LLD MOD = 1000000007;

void Add(LLD &a, LLD b){
	a += b;
	while (a >= MOD) a -= MOD;
}

LLD Sum(int a, int b, int l1, int h1, int l2, int h2){
	if (l2 > h2 || l1 > h1) return 0;
	LLD ret = 0;
	ret += S[a][b][h1+1][h2+1];
	ret -= S[a][b][l1][h2+1];
	ret -= S[a][b][h1+1][l2];
	ret += S[a][b][l1][l2];
	return (ret % MOD + MOD) % MOD;
}

int main(){
	scanf("%d%d", &n, &m);
	FOR(i,0,m)
	FOR(j,i,m) dp[1][i][j][0][0] = 1;
	
	FOE(i,1,n){
		cnt = 0;
		CLR(S, 0);
		FOR(j,0,m)
		FOR(k,j,m)
		FOR(a,0,2)
		FOR(b,0,2){
			Add(cnt, dp[i][j][k][a][b]);
			S[a][b][j+1][k+1] = dp[i][j][k][a][b];
		}

		cnt = (cnt * (n - i + 1)) % MOD;
		ret = (ret + cnt % MOD) % MOD;
		
		FOR(a,0,2) FOR(b,0,2)
		FOE(j,1,m) FOE(k,1,m){
			S[a][b][j][k] += S[a][b][j-1][k] + S[a][b][j][k-1] - S[a][b][j-1][k-1] + MOD;
			Add(S[a][b][j][k], 0);
		}

		FOR(j,0,m)
		FOR(k,j,m){
			dp[i+1][j][k][0][0] = Sum(0, 0, j, k, j, k);
			
			dp[i+1][j][k][1][0] = Sum(0, 0, 0, j-1, j, k) + Sum(1, 0, 0, j, j, k);
			
			dp[i+1][j][k][0][1] = Sum(0, 0, j, k, k+1, m-1) + Sum(0, 1, j, k, k, m-1);
			
			dp[i+1][j][k][1][1] = Sum(0, 0, 0, j-1, k+1, m-1) +
			Sum(1, 0, 0, j, k+1, m-1) + Sum(0, 1, 0, j-1, k, m-1) + Sum(1, 1, 0, j, k, m-1);
			
			FOR(a,0,2) FOR(b,0,2) Add(dp[i+1][j][k][a][b], 0);
		}
	}
	
	printf("%I64d\n", ret);
	return 0;
}
