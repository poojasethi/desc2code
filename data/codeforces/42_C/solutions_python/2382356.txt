#!/usr/bin/python
def pickLarger(x):
	return (x if a[x] > a[x+2] else x+2)

def pickSmaller(x):
	return (x if a[x] < a[x+2] else x+2)

def assistant(x, y):
	if (y-x) % 4 == 1:
		return (x-1) % 4
	else:
		return x

def findLead(x, y):
	if (y-x) % 4 == 1:
		return x
	else:
		return y


a = [int(x) for x in raw_input().split()]

s0 = a[0] + a[2]
s1 = a[1] + a[3]
while s0 >= 10 and s1 >= 10:
	g = 0 if s0 >= s1 else 1
	x = pickLarger(g)
	y = pickSmaller(1-g)
	xinc = (a[x]//2 + 1) * 2 - a[x]
	yinc = (a[y]//2 + 1) * 2 - a[y]
	z = assistant(x, y)
	print ("+" + str(z+1) + "\n") * xinc,
	a[z]       += xinc
	a[(z+1)%4] += xinc
	z = assistant(y, x)
	print ("+" + str(z+1) + "\n") * yinc,
	a[z]       += yinc
	a[(z+1)%4] += yinc
	z = findLead(x, y)
	print "/" + str(z+1)
	assert(a[x] % 2 == 0)
	assert(a[y] % 2 == 0)
	a[x] /= 2
	a[y] /= 2
	s0 = a[0] + a[2]
	s1 = a[1] + a[3]

a, b, c, d = a

delta = a + c - (b + d)
if delta > 0:
	if b % 2 == 1:
		print "+2"
		b += 1
		c += 1
	if a % 2 == 1:
		print "+4"
		a += 1
		d += 1
	diff = a - b - 2 * delta
	if diff > 0:
		print "+2\n" * diff,
		b += diff
		c += diff
	elif diff < 0:
		print "+4\n" * (-diff),
		a += -diff
		d += -diff
	assert(a % 2 == 0)
	assert(b % 2 == 0)
	assert((a-b) == 2*delta)
	print "/1"
	a /= 2
	b /= 2
elif delta < 0:
	delta = - delta
	if b % 2 == 1:
		print "+2"
		b += 1
		c += 1
	if a % 2 == 1:
		print "+4"
		a += 1
		d += 1
	diff = b - a - 2 * delta
	if diff > 0:
		print "+4\n" * diff,
		a += diff
		d += diff
	elif diff < 0:
		print "+2\n" * (-diff),
		b += -diff
		c += -diff
	assert(a % 2 == 0)
	assert(b % 2 == 0)
	assert((b-a) == 2 * delta)
	print "/1"
	a /= 2
	b /= 2

assert(a + c == b + d)
diff = a - b
if diff > 0:
	print "+2\n" * diff,
	b += diff
	c += diff
elif diff < 0:
	print "+4\n"* (-diff),
	a += -diff
	d += -diff

assert(a == b and c == d)
while a > 1:
	if a % 2 == 1:
		print "+1"
		a += 1
		b += 1
	else:
		print "/1"
		a /= 2
		b /= 2
while c > 1:
	if c % 2 == 1:
		print "+3"
		c += 1
		d += 1
	else:
		print "/3"
		c /= 2
		d /= 2
