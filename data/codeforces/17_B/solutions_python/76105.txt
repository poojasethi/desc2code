#!/usr/bin/env python
# -*- coding:utf-8 -*-
#

from collections import defaultdict

def readint(): return int(raw_input())
def readfloat(): return float(raw_input())
def readarray(N, foo):
        res = []
        for _ in xrange(N):
                res.append(foo())
        return res
def readlinearray(foo): return map(foo, raw_input().split())

def get_cost_tree(q, applications):
    
    if len(applications) + 2 < len(q):
        return -1
    
    for candidates in applications.values():
        candidates.sort()
    
    cost = 0
    
    for candidates in applications.values():
        cost += candidates[0][0]
    
    return cost

    
if __name__ == '__main__':
    n = readint()
    q = [0] + readlinearray(int)
    m = readint()
    applications = defaultdict(list)
    
    temp = {}
    for _ in xrange(m):
        a, b, c = readlinearray(int)
        last_cost = temp.get((a, b), None)
        if last_cost is not None and c < last_cost:
            applications[b].remove((c, a))
            applications[b].append((c, a))
        else:
            applications[b].append((c, a))
    
    print get_cost_tree(q, applications)
