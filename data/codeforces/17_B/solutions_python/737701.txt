import operator
import itertools

class Done(Exception):
    pass

empl_count = int(raw_input())
qualification = [(i+1, int(q)) for i, q in enumerate(raw_input().split())]
apps_count = int(raw_input())
apps = [[i] + map(int, raw_input().split()) for i in range(apps_count)]

result = 0
try:
    qualification = sorted(qualification, key=operator.itemgetter(1))
    for q in qualification[:-1]:
        # find minimal valued contract
        # will raise ValueError if something happens
        contract = min([a for a in apps if a[2]==q[0]], key=operator.itemgetter(3))
        # print 'Contract', contract
        result += contract[3]

    raise Done


    if not apps_count or apps_count < empl_count-1:
        raise ValueError

    if apps_count == 1:
        if empl_count == 1:
            raise ValueError
        elif empl_count == 2 and (apps[0][1]-1) in range(2) and (apps[0][2]-1 in range(2)):
            result = apps[0][3]
            raise Done
        else:
            raise ValueError

    # We have more than 2 apps
    qualification = sorted(qualification, key=operator.itemgetter(1))[::-1]
    top = qualification[0]
    if top[1] == qualification[1][1]:
        # 2 people with the same highest qualification
        raise ValueError

    # choose minimal price from avail contracts
    managers = set([top])
    managers_id = [top[0]]
    workers = set(itertools.takewhile(lambda q: q[1] == qualification[1][1],
                                      qualification[1:]))

    # print 'Apps', apps
    while workers:
        # print 'Workers', workers
        # print 'Manager IDs', managers_id
        for work in workers:
            # find minimal valued contract
            # will raise ValueError if something happens
            contract = min([a for a in apps if (a[2]==work[0] and a[1] in managers_id)], key=operator.itemgetter(3))
            # print 'Contract', contract
            result += contract[3]
            managers.add(work)

        managers_id = [m[0] for m in managers]
        workers = set(itertools.takewhile(lambda q: q[1] == qualification[len(managers_id)][1],
                                          qualification[len(managers_id):]))

except (ValueError, IndexError), e:
    # print e
    result = -1
except Done:
    pass
finally:
    print result

