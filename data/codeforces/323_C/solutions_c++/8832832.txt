#include <cstdio>
#include <algorithm>

using namespace std;

const int N = 1000010, D = N * 22;

int n, px[N], py[N], a[N], root[N];
int sum[D], l[D], r[D], dn;
int m, key, ans;

int insert(int d, int lt, int rt, int w) {
	int md = (lt + rt) >> 1;
	int nd = ++dn;
	sum[nd] = sum[d] + 1;
	if (lt != rt) {
		if (w <= md) {
			l[nd] = insert(l[d], lt, md, w);
			r[nd] = r[d];
		} else {
			r[nd] = insert(r[d], md + 1, rt, w);
			l[nd] = l[d];
		}
	}
	return nd;
}
int query(int d, int lt, int rt, int lq, int rq) {
	if (!d) {
		return 0;
	}
	if (lq <= lt && rt <= rq) {
		return sum[d];
	}
	int md = (lt + rt) >> 1;
	int ret = 0;
	if (lq <= md) {
		ret += query(l[d], lt, md, lq, rq);
	}
	if (md < rq) {
		ret += query(r[d], md + 1, rt, lq, rq);
	}
	return ret;
}
int init() {
	int x;
	scanf("%d", &x);
	return (x - 1 + key) % n + 1;
}
int main() {
	scanf("%d", &n);
	for (int i = 1, v; i <= n; ++i) {
		scanf("%d", &v), px[v] = i;
	}
	for (int i = 1, v; i <= n; ++i) {
		scanf("%d", &v), py[v] = i;
	}

	for (int v = 1; v <= n; ++v) {
		a[px[v]] = v;
	}
	root[0] = ++dn;
	for (int i = 1; i <= n; ++i) {
		root[i] = insert(root[i - 1], 1, n, py[a[i]]);
	}

	scanf("%d", &m);
	ans = -1;
	for (int im = 1; im <= m; ++im) {
		key = ans + 1;
		int l1 = init(), r1 = init(), l2 = init(), r2 = init();
		if (l1 > r1) swap(l1, r1);
		if (l2 > r2) swap(l2, r2);
		ans = query(root[r1], 1, n, l2, r2) - query(root[l1 - 1], 1, n, l2, r2);
		printf("%d\n", ans);
	}
}
