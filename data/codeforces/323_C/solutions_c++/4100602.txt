#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
#define pb push_back
const int maxn = 1000000+10;
int n,a[maxn],b[maxn],m,pos[maxn],g;
vector <int> sum[maxn*4];
void add(int root, int lo, int hi, int P, int c) {
    if(P > hi || lo > P) return;
    if(P == lo && lo == hi) {
        sum[root].pb(c);
        return;
    }
    int mid = (lo+hi)/2;
    add(2*root,lo,mid,P,c);
    add(2*root+1,mid+1,hi,P,c);
    sum[root].pb(c);
}
int get(int root, int lo, int hi, int L, int R, int i, int j) {
    if(L > hi || lo > R) return 0;
    if(L <= lo && R >= hi) {
        int l = lower_bound(sum[root].begin(),sum[root].end(),i)-sum[root].begin();
        int r = upper_bound(sum[root].begin(),sum[root].end(),j)-sum[root].begin();
        return r-l;
    }
    int mid = (lo+hi)/2;
    return get(2*root,lo,mid,L,R,i,j)+get(2*root+1,mid+1,hi,L,R,i,j);
}
int main () {
    ios::sync_with_stdio(0);
    cin >> n;
    for(int i = 1; i <= n; i++) { cin >> a[i]; pos[a[i]] = i; }
    for(int i = 1; i <= n; i++) { cin >> b[i]; add(1,1,n,pos[b[i]],i); }
    for(int i = 1; i <= 4*n; i++) sort(sum[i].begin(),sum[i].end());
    cin >> m;
    for(int i = 0,g = 0; i < m; i++) {
        int x1,y1,x2,y2,a1,b1,a2,b2;
        cin >> x1 >> y1 >> x2 >> y2;
        a1 = 1+min((x1+g-1)%n,(y1+g-1)%n);
        b1 = 1+max((x1+g-1)%n,(y1+g-1)%n);
        a2 = 1+min((x2+g-1)%n,(y2+g-1)%n);
        b2 = 1+max((x2+g-1)%n,(y2+g-1)%n);
        int k = get(1,1,n,a1,b1,a2,b2);
        cout << k << endl;
        g = k+1;
    }
    return 0;
}
    
