#include<stdio.h>
#include<algorithm>
#define ls rt<<1
#define rs rt<<1|1
using namespace std;
	
const int maxn=1000005;
int a[maxn],b[maxn],ps[maxn],pos[maxn],ld,rd,x,n;
inline int f(const int z){return (z-1+x)%n+1;}
int *sq[maxn<<2];
void build(int l,int r,int rt){
	sq[rt]=new int[r-l+1];
	if(l==r) {sq[rt][0]=pos[l];return;}
	int i,m=(l+r)>>1,p,q;
	build(l,m,ls),build(m+1,r,rs);
	for(p=q=i=0;p<m-l+1&&q<r-m;i++){
		if(sq[ls][p]<sq[rs][q])
			sq[rt][i]=sq[ls][p++];
		else sq[rt][i]=sq[rs][q++];
	}
	if(p==m-l+1) for(;i<r-l+1;i++)
		sq[rt][i]=sq[rs][q++];
	else for(;i<r-l+1;i++)
		sq[rt][i]=sq[ls][p++];
}	
	
int query(int L,int R,int l,int r,int rt){
	if(L<=l&&r<=R)
		return (upper_bound(sq[rt],sq[rt]+r-l+1,rd)-sq[rt])-(lower_bound(sq[rt],sq[rt]+r-l+1,ld)-sq[rt]);
	int m=(l+r)>>1,ret=0;
	if(L<=m) ret+=query(L,R,l,m,ls);
	if(m<R) ret+=query(L,R,m+1,r,rs);
	return ret;
}	
	
int main(){
	int i,l,r,q,m;
	scanf("%d",&n);
	for(i=0;i<n;i++) scanf("%d",&a[i]);
	for(i=0;i<n;i++) scanf("%d",&b[i]),ps[b[i]]=i;
	for(i=0;i<n;i++) pos[i]=ps[a[i]];
	build(0,n-1,1);
	scanf("%d",&m);
	for(x=0;m--;){
		int a,b,c,d;
		scanf("%d%d%d%d",&a,&b,&c,&d);
		l=f(a)-1,r=f(b)-1,ld=f(c)-1,rd=f(d)-1;
		if(l>r) swap(l,r);
		if(ld>rd) swap(ld,rd);
		printf("%d\n",x=query(l,r,0,n-1,1));x++;
	}
	return 0;
}	