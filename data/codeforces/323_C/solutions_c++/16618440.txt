#include <bits/stdc++.h>
#define FOR(i, a, b) for(int i = a; i < b; ++i)
#define ROF(i, a, b) for(int i = a; i >= b; --i)
#define SZ(x) ((int)(x).size())
using namespace std;
typedef long long i64;
typedef pair<int,int> ii;

const int MAXN = 1e6 + 7;

int p[MAXN], q[MAXN], n, lst;
vector <int> seg[4 * MAXN];

inline int f(int x) {
	return ((x - 1 + lst) % n) + 1;
}

void add(int idx, int val, int x = 1, int xl = 0, int xr = n) {
	seg[x].push_back(val);
	if (xr - xl == 1)
		return;
	int xm = (xl + xr) >> 1;
	if (idx < xm)
		add(idx, val, x << 1, xl, xm);
	else
		add(idx, val, x << 1 | 1, xm, xr);
}

int get_tot(int ql, int qr, int qva, int qvb, int x = 1, int xl = 0, int xr = n) {
	if (ql >= xr || qr <= xl)
		return 0;
	if (ql <= xl && qr >= xr)
		return upper_bound(seg[x].begin(), seg[x].end(), qvb) - lower_bound(seg[x].begin(), seg[x].end(), qva);
	int xm = (xl + xr) >> 1;
	int tot = 0;
	tot += get_tot(ql, qr, qva, qvb, x << 1, xl, xm);
	tot += get_tot(ql, qr, qva, qvb, x << 1 | 1, xm, xr);
	return tot;
}

int32_t main() {
	scanf("%d", &n);
	FOR(i, 0, n) {
		scanf("%d", p + i);
		p[i] --;
	}
	FOR(i, 0, n) {
		int x;
		scanf("%d", &x);
		q[-- x] = i;
	}
	FOR(i, 0, n)
		add(i, q[p[i]]);
	FOR(i, 0, 4 * MAXN)
		sort(seg[i].begin(), seg[i].end());
	int m;
	scanf("%d", &m);
	while (m --) {
		int a, b, c, d;
		scanf("%d %d %d %d", &a, &b, &c, &d);
		a = f(a), b = f(b), c = f(c), d = f(d);
		if (a > b) swap(a, b);
		if (c > d) swap(c, d);
		a --, c --, d --;
		lst = get_tot(a, b, c, d);
		printf("%d\n", lst ++);
	}
}
