//In the name of God
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int N = 1e6 + 2;

int n, adr[N], q[N], x;
vector<int> t[4 * N];

void build(int n, int b, int e) {
	if (b == e) {
		t[n].push_back(adr[q[b]]);
		return;
	}
	int l = n << 1, r = l | 1, m = b + e >> 1;
	build(l, b, m);
	build(r, m + 1, e);
	int p1 = 0, p2 = 0;
	while (p1 < t[l].size() && p2 < t[r].size())
		if (t[l][p1] < t[r][p2])
			t[n].push_back(t[l][p1++]);
		else
			t[n].push_back(t[r][p2++]);
	while (p1 < t[l].size())
		t[n].push_back(t[l][p1++]);
	while (p2 < t[r].size())
		t[n].push_back(t[r][p2++]);
}
int query(int n, int b, int e, int u, int v, int x, int y) {
	if (e < u || v < b)
		return 0;
	if (u <= b && e <= v)
		return upper_bound(t[n].begin(), t[n].end(), y) - lower_bound(t[n].begin(), t[n].end(), x);
	int l = n << 1, r = l | 1, m = b + e >> 1;
	return query(l, b, m, u, v, x, y) + query(r, m + 1, e, u, v, x, y);
}
inline int f(int z) { return (z + x) % n; }

int main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 0, t; i < n; i++)
		cin >> t, adr[--t] = i;
	for (int i = 0; i < n; i++)
		cin >> q[i], q[i]--;
	build(1, 0, n - 1);
	int m; cin >> m;
	for (int i = 0; i < m; i++, x++) {
		int b, e, l, r;
		cin >> b >> e >> l >> r;
		b = f(--b), e = f(--e), l = f(--l), r = f(--r);
		cout << (x = query(1, 0, n - 1, min(l, r), max(l, r), min(b, e), max(b, e))) << '\n';
	}
	return 0;
}
