#include <cstdio>
#include <algorithm>
#include <map>
#include <utility>
#include <vector>
using namespace std;

const int MX_N = (1e6)+3; 
int cord[MX_N][2];
vector<int> tv[MX_N];
int n;

void insert(int x, int y)
{
	for( ; x <= n; x += (x & (-x)))
		tv[x].push_back(y);
}

void init()
{
	for(int i = 1; i <= n; ++i)
		sort(tv[i].begin(), tv[i].end());
}

int query(int x, int y)
{
	int res = 0;
	for( ; x > 0; x -= (x & (-x)))
		res += upper_bound(tv[x].begin(), tv[x].end(), y) - tv[x].begin();
	return res;
}

int main()
{
	scanf("%d", &n);
	for(int j = 0; j < 2; ++j)
		for(int i = 1; i <= n; ++i) {
			int x;
			scanf("%d", &x);
			cord[x][j] = i;
		}
	
	for(int i = 1; i <= n; ++i)
		insert(cord[i][0], cord[i][1]);
	init();
	
	int m;
	scanf("%d", &m);
	for(int x = 0; m > 0; --m, ++x) {
		int a[4];
		for(int i = 0; i < 4; ++i) {
			scanf("%d", a+i);
			a[i] = (a[i] - 1 + x) % n + 1;			
		}
		int l1 = min(a[0], a[1]);
		int r1 = max(a[0], a[1]);
		int l2 = min(a[2], a[3]);
		int r2 = max(a[2], a[3]);
		x = query(r1, r2) - query(l1-1, r2) - query(r1, l2-1) + query(l1-1, l2-1);
		printf("%d\n", x);
	}
	return 0;
}
