#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int N = 1000005;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define Me(x , y) memset(x , y , sizeof(x))

struct _three{
	int a , b , c;
}t[N * 25];

int n , m , tot , last_ans;
int a[N] , b[N] , pb[N] , root[N];

void Read(int &x){
	char c;
	while (c = getchar() , c < '0' || c > '9');
	x = c - '0';
	while (c = getchar() , c >= '0' && c <= '9') x = x * 10 + c - '0';
}

void Change(int &x , int y , int l , int r , int p){
	t[x = ++tot] = t[y]; t[x].c++;
	if (l == r) return;
	int mid = l + r >> 1;
	if (p <= mid)
		Change(t[x].a , t[y].a , l , mid , p);
	else
		Change(t[x].b , t[y].b , mid + 1 , r , p);
}

void Init(){
	Read(n);
	fo (i , 1 , n) Read(a[i]);
	fo (i , 1 , n){
		Read(b[i]); pb[b[i]] = i;
	}
	fo (i , 1 , n) Change(root[i] , root[i - 1] , 1 , n , pb[a[i]]);
}

int Find(int x , int l , int r , int st , int en){
	if (!x) return 0;
	if (st <= l && r <= en) return t[x].c;
	int mid = l + r >> 1 , temp = 0;
	if (st <= mid) temp += Find(t[x].a , l , mid , st , en);
	if (en > mid) temp += Find(t[x].b , mid + 1 , r , st , en);
	return temp;
}

int f(int x){
	return (x - 1 + last_ans) % n + 1;
}

void Work(){
	Read(m); int a , b , c , d;
	fo (i , 1 , m){
		Read(a); Read(b); Read(c); Read(d);
		a = f(a); b = f(b); c = f(c); d = f(d);
		if (a > b) swap(a , b);
		if (c > d) swap(c , d);
		last_ans = Find(root[b] , 1 , n , c , d) - Find(root[a - 1] , 1 , n , c , d);
		printf("%d\n" , last_ans++);
	}
}

int main(){
	Init();
	Work();
	return 0;
}
