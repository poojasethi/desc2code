#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>

using namespace std;
const int MAXN = 1000000+10;
struct node{
    int s,N; node* c[2];
    node(){ s = 0; c[0] = c[1] = NULL; }
}*R[MAXN];

#define md (l+r>>1)
int n,m,ql,qr,x,f[4],A[MAXN],B[MAXN];

node* modify(node* old,int l,int r,int at){
    node* cur = new node();
    if (old) *cur = *old;  cur->s ++;
    if (l != r){
        if (at <= md) cur->c[0] = modify(old ? old->c[0] : NULL,l,md,at);
        else cur->c[1] = modify(old ? old->c[1] : NULL,md+1,r,at);
    }return cur;
}
int sum(node *cur,int l,int r){
    if (!cur || qr < l || ql > r) return 0;
    if (ql <= l && qr >= r) return cur->s;
    return  sum(cur->c[0],l,md) + sum(cur->c[1],md+1,r);
}
int main()
{
    scanf("%d",&n);
    for (int i = 1; i <= n; i++)
      scanf("%d",&A[i]);
    for (int i = 1; i <= n; i++)
      scanf("%d",&x),B[x] = i;
      
    for (int i = 1; i <= n; i++)
      R[i] = modify(R[i-1],1,n,B[A[i]]);
    
    scanf("%d",&m); x = 0;
    while (m--)
    {
        for (int i = 0; i < 4; i++)
            scanf("%d",&f[i]),
            f[i] = (f[i]-1+x) % n + 1;
        sort(f,f+2); sort(f+2,f+4);
        ql = f[2], qr = f[3];
        printf("%d\n",x = sum(R[f[1]],1,n)-sum(R[f[0]-1],1,n));
        x ++ ;
    }
    
    return 0;
}
