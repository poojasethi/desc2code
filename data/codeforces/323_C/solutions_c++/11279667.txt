#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = int(1e6 + 6);
const int Nlg = 21;

struct rc
{
	int cnt;
	rc *l, *r;
}nil[N*Nlg], *root[N], *tot;

int a[N], b[N], c[N];
int n, m, x;

rc* ins(rc *x, int l, int r, int p)
{
	rc *ret = ++tot;
	if(x!=nil) (*ret) = (*x); else ret->l=ret->r=nil;
	++ret->cnt;
	
	if(l==r) return ret;
	
	int mid((l+r)>>1);
	if(p<=mid) ret->l = ins(ret->l, l, mid, p);
	else ret->r = ins(ret->r, mid+1, r, p);
	
	return ret;
}

int Q(rc *x, int l, int r, int p, int q)
{
	if(l==p && r==q) return x->cnt;
	if(x==nil) return 0;
	
	int mid((l+r)>>1);
	if(q<=mid) return Q(x->l, l, mid, p, q);
	else if(p>mid) return Q(x->r, mid+1, r, p, q);
	return Q(x->l, l, mid, p, mid) + Q(x->r, mid+1, r, mid+1, q);
}

int r()
{
	int ret(0), c; while(c=getchar(), c<'0');
	ret = c - '0'; while(c=getchar(), c>='0') ret = ret * 10 + c - '0';
	return ret;
}

void T(int &a){a = (a-1+x+1) % n + 1;}

int main()
{
	n = r();
	for(int i=1; i<=n; i++) a[i] = r(), b[a[i]] = i;
	for(int i=1; i<=n; i++) c[i] = r(), c[i] = b[c[i]];
	
	root[0] = tot = nil;
	for(int i=1; i<=n; i++) root[i] = ins(root[i-1], 1, n, c[i]);
	
	m = r(), x = -1;
	for(int u, v, p, q; m; --m)
	{
		u = r(), v = r(), p = r(), q = r();
		T(u), T(v); if(u>v) swap(u, v);
		T(p), T(q); if(p>q) swap(p, q);
		printf("%d\n", x = Q(root[q], 1, n, u, v) - Q(root[p-1], 1, n, u, v));
	}
	
	return 0;
}

