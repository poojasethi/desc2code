#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;
#define pb push_back
#define SZ(a) a.size()
#define ALL(a) a.begin(), a.end()

static int A[1000010], B[1000010], tmp[1000010];
int N, l1, r1, l2, r2, ANS=-1, Q;
vector< vector<int> > ST(3000030);

inline void build(int x, int y, int n){
    if(x==y)return void(ST[n].pb(B[x]));
    int m=(x+y)>>1;
    build(x, m, 2*n); build(m+1, y, 2*n+1);
    merge(ALL(ST[2*n]), ALL(ST[2*n+1]), back_inserter(ST[n]));
}
inline void query(int x, int y, int n){
    if(y<l2 || r2<x)return;
    if(l2<=x && y<=r2){
        int t=upper_bound(ALL(ST[n]), r1)-lower_bound(ALL(ST[n]), l1);
        ANS+=t; return;
    }
    int m=(x+y)>>1;
    query(x, m, 2*n); query(m+1, y, 2*n+1);
}
inline int f(int z){return ((z+ANS)%N);}

int main(){
    scanf("%d", &N);
    for(int i=1; i<=N; ++i){
        scanf("%d", &A[i]); tmp[A[i]]=i;
    }
    for(int i=1; i<=N; ++i){
        scanf("%d", &B[i]); B[i]=tmp[B[i]];
    }
    build(1, N, 1);

    scanf("%d", &Q);
    while(Q--){
        int a, b, c, d;
        scanf("%d %d %d %d", &a, &b, &c, &d);
        l1=min(f(a), f(b))+1; r1=max(f(a), f(b))+1;
        l2=min(f(c), f(d))+1; r2=max(f(c), f(d))+1;
        ANS=0; query(1, N, 1);
        printf("%d\n", ANS);
    }
    return 0;
}