//In the name of God
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int M=1<<20;
const int N=1e6+100;
int n,X;

#define f(z) ((((z)-1+X)%n)+1)
#define rng(v) (v).begin(),(v).end()

vector<int> stree[M*2];
int p[N],q[N];

int qu(int l1,int r1,int l2,int r2,int small=0,int big=M-1,int index=1)
{
  l1=max(l1,small);
  r1=min(r1,big);
  if(l1>r1)
    return 0;
  if(small==l1 and big==r1)
      return upper_bound(rng(stree[index]),r2)-lower_bound(rng(stree[index]),l2);
  return qu(l1,r1,l2,r2,small,(small+big)/2,2*index)+qu(l1,r1,l2,r2,(small+big)/2+1,big,index*2+1);
}

int main()
{
  ios_base::sync_with_stdio(0);
  int tmp;
  cin>>n;
  for(int i=1;i<=n;++i)
    {cin>>tmp; p[tmp]=i;}
  for(int i=1;i<=n;++i)
    {cin>>tmp; q[tmp]=i;}
  for(int i=1;i<=n;++i)
    stree[p[i]+M].push_back(q[i]);
  for(int i=M-1;i>=0;--i)
    merge(rng(stree[i*2]),rng(stree[i*2+1]),back_inserter(stree[i]));
  int m,a,b,c,d;
  cin>>m;
  while(m--)
    {
      cin>>a>>b>>c>>d;
      int l1=min(f(a),f(b)),r1=max(f(a),f(b)),l2=min(f(c),f(d)),r2=max(f(c),f(d));
      X=qu(l1,r1,l2,r2);
      cout<<X++<<endl;
    }
  
  return 0;
}
