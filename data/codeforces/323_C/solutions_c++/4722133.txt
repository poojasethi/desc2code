#include<cstdio>
#include<algorithm>
#include<vector>
using namespace std;
const int M = 1<<20;
int d1[M],d2[M],sv[M],n,x,m,a,b,c,d;
vector <int> v[2*M];
int f(int a){
	return (a-1+x)%n+1;
}
void build(int f,int l,int now){
	if(f == l){
		v[now].push_back(d1[f]);
		return ;
	}
	build(f,(f+l)/2,now*2);
	build((f+l)/2+1,l,now*2+1);
	v[now].resize(l-f+1);
	merge(v[2*now].begin(),v[2*now].end(),v[2*now+1].begin(),v[2*now+1].end(),v[now].begin());
}
int find(int now,int h,int t,int bf1,int bl1,int bf2,int bl2){
	if(h>=bf1 && t <= bl1){
		return upper_bound(v[now].begin(),v[now].end(),bl2) -v[now].begin() - 1 - (lower_bound(v[now].begin(),v[now].end(),bf2)-v[now].begin() - 1);
	}
	if(h > bl1 || t < bf1) 
		return 0;
	return find(now*2,h,(h+t)/2,bf1,bl1,bf2,bl2) + find(now*2+1,(h+t)/2+1,t,bf1,bl1,bf2,bl2);
}
int main(){
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d",&d1[i]);
	for(int i=1;i<=n;i++)
		scanf("%d",&d2[i]), sv[d2[i]] = i;
	for(int i=1;i<=n;i++)
		d1[i] = sv[d1[i]];
	build(1,n,1);
	scanf("%d",&m);
	for(int i=0;i<m;i++){
		scanf("%d%d%d%d",&a,&b,&c,&d);
		x = find(1,1,n,min(f(a),f(b)),max(f(a),f(b)),min(f(c),f(d)),max(f(c),f(d)));
		printf("%d\n",x);
		x++;
	}
		

}