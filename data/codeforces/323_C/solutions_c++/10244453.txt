#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;
const int N=1000005;
struct sl{
	int lson,rson,num;
}tree[N*40];
int n,m,z,x,y,to[N],p[N],root[N];
int a,b,c,d,l1,l2,r1,r2,node;
inline int f(int x){
	return (z-1+x)%n+1;
}
inline void ins(int now,int l,int r,int x){
	if (l==r){
		++tree[now].num;return;
	}
	int mid=(l+r)>>1;
	if (x<=mid){
		++node;
		tree[node]=tree[tree[now].lson];
		tree[now].lson=node;
		ins(tree[now].lson,l,mid,x);
	}
	else{
		++node;
		tree[node]=tree[tree[now].rson];
		tree[now].rson=node;
		ins(tree[now].rson,mid+1,r,x);
	}
	++tree[now].num;
}
inline int find(int now,int l,int r,int x,int y){
	if (now==0) return 0;
	if (x<=l && r<=y) return tree[now].num;
	int mid=(l+r)>>1,ans=0;
	if (x<=mid) ans=find(tree[now].lson,l,mid,x,y);
	if (y>mid) ans+=find(tree[now].rson,mid+1,r,x,y);
	return ans;
}
int main(){
	//freopen("cf323C.in","r",stdin);freopen("cf323C.out","w",stdout);
	scanf("%d",&n);
	for (int i=1;i<=n;++i){
		scanf("%d",&x);to[x]=i;
	}
	node=1;root[0]=1;
	for (int i=1;i<=n;++i) {
		scanf("%d",&x);
		p[i]=to[x];
		root[i]=++node;
		tree[node]=tree[root[i-1]];
		ins(root[i],1,n,p[i]);
	}
	z=0;
	scanf("%d",&m);
	for (int i=1;i<=m;++i){
		scanf("%d%d%d%d",&a,&b,&c,&d);
		x=0;y=0;
		l1=min(f(a),f(b));r1=max(f(a),f(b));l2=min(f(c),f(d));r2=max(f(c),f(d));
		x=find(root[l2-1],1,n,l1,r1);y=find(root[r2],1,n,l1,r1);
		z=y-x;
		printf("%d\n",z);
		++z;
	}
}