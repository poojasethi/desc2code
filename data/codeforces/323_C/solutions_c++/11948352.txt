#include <iostream>
#include <cstdio>

using namespace std;

#define maxn 1000010

struct node{
    int sz, lc, rc;
}f[maxn * 30];

int mx, a[maxn], b[maxn], root[maxn];

void Insert(int &p, int l, int r, int x) {
    f[++mx] = f[p], p = mx, f[p].sz++;
    if(l == r) return ;
    int mid = (l + r) >> 1;
    if(x <= mid) Insert(f[p].lc, l, mid, x);
    else Insert(f[p].rc, mid + 1, r, x);
}

int query(int x, int y, int l, int r, int s, int t) {
    if(s <= l && t >= r) return f[y].sz - f[x].sz;
    int mid = (l + r) >> 1, ans = 0;
    if(s <= mid) ans = query(f[x].lc, f[y].lc, l, mid, s, t);
    if(t > mid) ans += query(f[x].rc, f[y].rc, mid + 1, r, s, t);
    return ans;
}

int main() {
    int n;
    scanf("%d", &n);
    for(int i = 1; i <= n; i++) scanf("%d", &a[i]);
    for(int i = 1, x; i <= n; i++) {
        scanf("%d", &x); b[x] = i;
    }
    for(int i = 1; i <=n; i++) {
        root[i] = root[i - 1];
        Insert(root[i], 1, n, b[a[i]]);
    }
    int m;
    scanf("%d", &m);
    int p = 0, a, b, c, d, l1, r1, l2, r2;
    for(int i = 1; i <= m; i++) {
        scanf("%d%d%d%d", &a, &b, &c, &d);
        int tmp1 = (a - 1 + p) % n + 1, tmp2 = (b - 1 + p) % n + 1;
        l1 = min(tmp1, tmp2), r1 = max(tmp1, tmp2);
        tmp1 = (c - 1 + p) % n + 1, tmp2 = (d - 1 + p) % n + 1;
        l2 = min(tmp1, tmp2), r2 = max(tmp1, tmp2);
        printf("%d\n", p = query(root[l1 - 1], root[r1], 1, n, l2, r2)); p++;
    }
}