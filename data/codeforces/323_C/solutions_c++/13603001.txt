#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
using namespace std;
#define N 1000050
#define M 40000050
struct Point
 {Point *c[2];int s;} a[M],*gf[N];
int t[N],wz[N],n,m,ans,st;
inline int Read()
 {
    int x=0;char y;
    do y=getchar(); while (y<'0'||y>'9');
    do x=x*10+y-'0',y=getchar(); while (y>='0'&&y<='9');
    return x;
 }
inline int F(int x)
 {return (x-1+ans)%n+1;}
Point* Set_up(int x,int y,Point* z,int o)
 {
    int i=x + y >> 1,k=++st;a[k].s=z==NULL?1:z->s+1;
    if (x==y) return &a[k];
    if (o<=i) a[k].c[0]=Set_up(x,i,z==NULL?NULL:z->c[0],o); else
      a[k].c[0]=z==NULL?NULL:z->c[0];
    if (o>i) a[k].c[1]=Set_up(i+1,y,z==NULL?NULL:z->c[1],o); else
      a[k].c[1]=z==NULL?NULL:z->c[1];
    return &a[k];
 }
int Query(int x,int y,Point* z,Point* o,int p,int u)
 {
    int i=x + y >> 1,k=0;
    if (x==p&&y==u) return z==NULL?0:z->s-(o==NULL?0:o->s);
    if (p<=i) k=Query(x,i,z==NULL?NULL:z->c[0],
      o==NULL?NULL:o->c[0],p,min(u,i));
    if (u>i) k+=Query(i+1,y,z==NULL?NULL:z->c[1],
      o==NULL?NULL:o->c[1],max(p,i+1),u);
    return k;
 }
int main()
 {
    n=Read();
    for (int i=1;i<=n;i++) wz[Read()]=i;
    for (int i=1;i<=n;i++)
      gf[i]=Set_up(1,n,gf[i-1],wz[Read()]);
    m=Read();
    while (m--)
     {
        int k=F(Read()),l=F(Read()),q=F(Read()),w=F(Read());
        if (k>l) swap(k,l);if (q>w) swap(q,w);
        ans=Query(1,n,gf[w],gf[q-1],k,l);
        printf("%d\n",ans);ans++;
     }
    return 0;
 }