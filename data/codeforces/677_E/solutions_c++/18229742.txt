#include <cstdio>
#include <iostream>
#include <cmath>

#define FOR(x, a, b) for (int x = a; x <= b; ++x)
#define REP(x, a, b) for (int x = a; x < b; ++x)
#define ll long long
#define DEBUG(X) { cout << #X << " = " << X << endl; }
#define PR(A, n) { cout << #A << " = "; FOR(i, 1, n) cout << A[i] << " "; cout << endl; }
#define PR0(A, n) { cout << #A << " = "; REP(i, 0, n) cout << A[i] << " "; cout << endl; }

using namespace std;

const int MAXN = 1e3 + 4;
const int BASE = 1e9 + 7;

char a[MAXN][MAXN];
double logs[MAXN][MAXN], sum[9][MAXN][MAXN], log_2 = log(2.0), log_3 = log(3.0), ans = -1;
int n, pre[9][MAXN][MAXN], ansx, ansy, anssize, ansdir;
int dx[] = {-1, -1, 1, 1, -1, 0, 1, 0};
int dy[] = {-1, 1, 1, -1, 0, 1, 0, -1};

bool Inside(int x, int y)
{
    return (1 <= x && x <= n && 1 <= y && y <= n);
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif // ONLINE_JUDGE

    scanf("%d\n", &n);
    FOR(i, 1, n)
    {
        FOR(j, 1, n)
        {
            char c = getchar();
            a[i][j] = c;
            if (a[i][j] == '0') logs[i][j] = 0; else
                if (a[i][j] == '1') logs[i][j] = 0; else
                   if (a[i][j] == '2') logs[i][j] = log_2; else logs[i][j] = log_3;
        }
        scanf("\n");
    }
    FOR(dir, 0, 7)
    {
        //DEBUG(dir);
        FOR(i, 1, n)
         FOR(j, 1, n) if (!Inside(i - dx[dir], j - dy[dir]))
         {
            // DEBUG(i);
            // DEBUG(j);
             int d1 = dx[dir], d2 = dy[dir];
             for (int x = i, y = j; Inside(x, y); x += d1, y += d2)
             {
                 //DEBUG(x);
                // DEBUG(y);
                 if (a[x][y] != '0')
                 {
                     if (x == i && y == j)
                     {
                         sum[dir][x][y] = logs[x][y];
                         pre[dir][x][y] = 1;
                     } else
                     {
                         sum[dir][x][y] = sum[dir][x - d1][y - d2] + logs[x][y];
                         pre[dir][x][y] = pre[dir][x - d1][y - d2] + 1;
                     }
                 } else
                 {
                     sum[dir][x][y] = 0;
                     pre[dir][x][y] = 0;
                 }
             }
         }
    }
    FOR(i, 1, n)
     FOR(j, 1, n) if (a[i][j] != '0')
     {
         int temp = pre[0][i][j];
         FOR(k, 1, 3) temp = min(temp, pre[k][i][j]);
         double val = logs[i][j];

         FOR(k, 0, 3) val += sum[k][i + dx[k] * (temp - 1)][j + dy[k] * (temp - 1)] - sum[k][i][j];
         if (val > ans)
         {
             ans = val;
             ansx = i;
             ansy = j;
             anssize = temp;
             ansdir = 0;
         }
         temp = pre[4][i][j];
         FOR(k, 5, 7) temp = min(temp, pre[k][i][j]);
         val = logs[i][j];
         FOR(k, 4, 7) val += sum[k][i + dx[k] * (temp - 1)][j + dy[k] * (temp - 1)] - sum[k][i][j];
         if (val > ans)
         {
             ans = val;
             ansx = i;
             ansy = j;
             anssize = temp;
             ansdir = 4;
         }
     }
     if (ans == -1) putchar('0'); else
     {int total = a[ansx][ansy] - '0';

     FOR(dir, ansdir, ansdir + 3)
     {
        // DEBUG(total);
         FOR(i, 2, anssize)
         {
             total = (1ll * total * (a[ansx + dx[dir] * (i - 1)][ansy + dy[dir] * (i - 1)] - '0')) % BASE;
             //DEBUG(total);
         }
     }
     printf("%d", total);}



}
