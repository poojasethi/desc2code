#include<cmath>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define LL long long
const int MO = 1e9 + 7;

const int maxn=1100;
double Max_sum=0.0, lg2[4], pre[8][maxn][maxn];
int Px, Py, Pd, SWAP, Dis, n, g[maxn][maxn], near[8][maxn][maxn];
char S[maxn];

int main() {
  bool flag=1;
  scanf("%d", &n);
  for (int i=1;i<=n;i++) {
    scanf("%s", S);
    for (int j=1;j<=n;j++) {
      g[i][j]=S[j-1]-'0';
      if (g[i][j]) flag=0;
    }
  }
  if (flag) {printf("0\n"); return 0;}

  lg2[0]=-54321;
  for (int i=1;i<=3;i++) lg2[i]=log(i);

  for (int i=1;i<=n;i++)
  for (int j=1;j<=n;j++) {
    if (!g[i][j]) {
      near[0][i][j]=near[5][i][j]=0;
      near[1][i][j]=near[4][i][j]=0;
    }                      
    else {                 
      near[4][i][j]=1+near[4][i-1][j-1];
      near[5][i][j]=1+near[5][i-1][j+1];
      near[0][i][j]=1+near[0][i-1][j]  ;
      near[1][i][j]=1+near[1][i][j-1]  ;
    }
    pre[4][i][j]=lg2[g[i][j]]+pre[4][i-1][j-1];
    pre[0][i][j]=lg2[g[i][j]]+pre[0][i-1][j]  ;
    pre[5][i][j]=lg2[g[i][j]]+pre[5][i-1][j+1];
    pre[1][i][j]=lg2[g[i][j]]+pre[1][i][j-1]  ;
  }

  for (int i=n;i>=1;i--)
  for (int j=n;j>=1;j--) {
    if (!g[i][j]) {
      near[7][i][j]=near[2][i][j]    =0;
      near[6][i][j]=near[3][i][j]    =0;
    }                      
    else {                 
      near[7][i][j]=1+near[7][i+1][j+1];
      near[6][i][j]=1+near[6][i+1][j-1];
      near[2][i][j]=1+near[2][i][j+1]  ;
      near[3][i][j]=1+near[3][i+1][j]  ;
    }
    pre[6][i][j]=lg2[g[i][j]]+pre[6][i+1][j-1];
    pre[2][i][j]=lg2[g[i][j]]+pre[2][i][j+1]  ;
    pre[7][i][j]=lg2[g[i][j]]+pre[7][i+1][j+1];
    pre[3][i][j]=lg2[g[i][j]]+pre[3][i+1][j]  ;
  }

  for (int i=1;i<=n;i++)
  for (int j=1;j<=n;j++) {
    int Pd=12345;
    for (int k=0;k<=3;k++) Pd=min(Pd, near[k][i][j]);
    if (Pd) {
        double sum=pre[0][i+Pd-1][j]-pre[0][i-Pd][j]+pre[1][i][j+Pd-1]-pre[1][i][j-Pd]-lg2[g[i][j]];
        if (sum>Max_sum) Max_sum=sum, Px=i, Py=j, Dis=Pd, SWAP=1;
    }
    Pd=12345;
    for (int k=4;k<=7;k++) Pd=min(Pd, near[k][i][j]);
    if (Pd) {
        double sum=pre[4][i+Pd-1][j+Pd-1]-pre[4][i-Pd][j-Pd]+pre[5][i+Pd-1][j-Pd+1]-pre[5][i-Pd][j+Pd]-lg2[g[i][j]];
        if (sum>Max_sum) Max_sum=sum, Px=i, Py=j, Dis=Pd, SWAP=2;
    }
  }

  int CJ=1;
  if (SWAP==1) {
    for (int i=Px-Dis+1;i<=Px+Dis-1;i++)
		if (i!=Px) CJ=(LL)CJ*g[i][Py]%MO;
    for (int j=Py-Dis+1;j<=Py+Dis-1;j++)
      CJ=(LL)CJ*g[Px][j]%MO;
  }
  else {
    for (int i=-Dis+1;i<=Dis-1;i++)
		if (i) CJ=(LL)CJ*g[Px+i][Py-i]%MO;
    for (int i=-Dis+1;i<=Dis-1;i++)
      CJ=(LL)CJ*g[Px+i][Py+i]%MO;
  }
  printf("%d\n", CJ);
}