#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <functional>
#include <cmath>

using namespace std;
int dir[8][2] = { {0, 1},{1, 0},{-1, 0},{0, -1},{1, 1},{1, -1},{-1, 1},{-1, -1} };

int n;
int t[1001][1001];
int tZero[1001][1001][8];
double tSum[1001][1001][8];
bool markSum[1001][1001][8];

double GetLog(int x)
{
	//return log(double(x));
	if (x == 1)
		return 0;
	else if (x == 2)
		return 0.30102999566398119521373889472449;
	else if (x == 3)
		return 0.47712125471966243729502790325512;
}

bool IsValid(int x, int y)
{
	return (0 <= x && x < n && 0 <= y && y < n);
}

int GetZeros(int i, int j, int d)
{
	if (!IsValid(i, j))
		return 0;
	if (tZero[i][j][d] != -1)
		return tZero[i][j][d];
	tZero[i][j][d] = t[i][j] == 0 ? 0 : GetZeros(i - dir[d][0], j - dir[d][1], d) + 1;
	return tZero[i][j][d];
}

double GetSum(int i, int j, int d)
{
	if (!IsValid(i, j))
		return 0;
	if (markSum[i][j][d] == true)
		return tSum[i][j][d];
	//cout << "(" << t[i][j] << ' ' << GetLog(t[i][j]) << ")" << endl;
	tSum[i][j][d] = t[i][j] == 0 ? GetSum(i - dir[d][0], j - dir[d][1], d) : GetSum(i - dir[d][0], j - dir[d][1], d) + GetLog(t[i][j]);
	markSum[i][j][d] = true;
	return tSum[i][j][d];
}

double CalcSumN(int i, int j, int c)
{
	return GetSum(i + c, j, 1) - GetSum(i - c - 1, j, 1) + GetSum(i, j + c, 0) - GetSum(i, j - c - 1, 0) - GetLog(t[i][j]);
}

double CalcSumR(int i, int j, int c)
{
	/*double a = GetSum(i + c, j + c, 4);
	double b = GetSum(i - c - 1, j - c - 1, 4);
	double g = GetSum(i + c, j - c, 6);
	double d = GetSum(i - c + 1, j + c + 1, 6);
	double e = log(t[i][j]);*/
	return GetSum(i + c, j+c, 4) - GetSum(i - c - 1, j-c-1, 4) + GetSum(i+c, j-c, 5) - GetSum(i-c-1, j+c+1, 5) - GetLog(t[i][j]);
}

int main()
{
	cin >> n;
	char ch;
	bool allZero = true;
	memset(tZero, -1, sizeof(tZero));
	memset(tSum, 0, sizeof(tSum));
	memset(markSum, false, sizeof(markSum));
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cin >> ch;
			if (ch != '0')
				allZero = false;
			t[i][j] = ch - '0';
		}
	}

	/*for (int k = 0; k < 8; k++)
	{
		cout << "------------ "<<k<<"--------" << endl;
		for (size_t i = 0; i < n; i++)
		{
			for (size_t j = 0; j < n; j++)
			{
				cout << GetSum(i, j, k) << ' ';
			}
			cout << endl;
		}
		cout << "-------------------------" << endl;
	}*/
	int maxI = 1, maxJ = 1, maxR = 0;
	double maxi = 0;
	char maxType = 'R';
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (t[i][j] > 0)
			{
				int maxCN = 2000000;
				for (int k = 0; k < 4; k++)
					maxCN = min<int>(maxCN, GetZeros(i, j, k));
				int maxCR = 2000000;
				for (int k = 4; k < 8; k++)
					maxCR = min<int>(maxCR, GetZeros(i, j, k));
				maxCN--;
				maxCR--;
				double CN = CalcSumN(i, j, maxCN);
				double CR = CalcSumR(i, j, maxCR);
				//cout << i << ' ' << j << ' ' << maxCN << ' ' << CN << " "  << maxCR << " " << CR << endl;
				if (CN > maxi)
				{
					maxi = CN; maxI = i; maxJ = j; maxType = 'N', maxR = maxCN;
				}
				if (CR > maxi)
				{
					maxi = CR; maxI = i; maxJ = j; maxType = 'R', maxR = maxCR;
				}
			}
		}
	}
	//cout << maxI << ' ' << maxJ << ' ' << maxType << endl;

	long long ret = t[maxI][maxJ];
	if (maxType == 'R')
	{
		for (int k = 1; k <= maxR; k++)
		{
			for (int d = 4; d < 8; d++)
			{
				ret = (ret * t[maxI + k*dir[d][0]][maxJ + k*dir[d][1]]) % 1000000007;
			}
		}
	}
	else
	{
		for (int k = 1; k <= maxR; k++)
		{
			for (int d = 0; d < 4; d++)
			{
				ret = (ret * t[maxI + k*dir[d][0]][maxJ + k*dir[d][1]]) % 1000000007;
			}
		}
	}
	if (ret == 0 && !allZero)
		cout << 1 << endl;
	else
		cout << ret << endl;
	return 0;
}