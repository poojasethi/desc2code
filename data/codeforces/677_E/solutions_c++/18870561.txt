#include<stdio.h>
#include<iostream>
#include<algorithm>
#define ll long long
#include<math.h>
using namespace std;
char c[1111][1111];
const int inf=99999999;
const ll mod=1000000007;
int n;
int xx[8]={0,-1,-1,-1,0,1,1,1};
int yy[8]={-1,-1,0,1,1,1,0,-1};
struct node{
    int n1,n2,n3,l;
    node(){n1=n2=n3=l=0;}
    node(char c1)
    {
    	n1=n2=n3=l=0;
		if(c1=='1')n1=l=1;
    	else if(c1=='2')n2=l=1;
    	else if(c1=='3')n3=l=1;
    }
    node operator+(node &a)
    {
       node t;
	   t.n1=a.n1+n1;
	   t.n2=a.n2+n2;
	   t.n3=a.n3+n3;
	   return t;	
    }
    node operator-(node &a)
    {
        node t;
        t.n1=n1-a.n1; 
		t.n2=n2-a.n2; 
		t.n3=n3-a.n3;
        return t;
    }
};
node dp[8][1111][1111];
void init()
{
	scanf("%d",&n);
	int i,j,z;
	for(i=1;i<=n;i++)
	{
		scanf("%s",c[i]+1);
		for(j=1;j<=n;j++)
	    {
    		for(z=0;z<8;z++)dp[z][i][j]=node(c[i][j]);
    	}
	}
	for(z=0;z<4;z++)
	for(i=1;i<=n;i++)
	for(j=1;j<=n;j++)
	{
		int x1=i+xx[z],y1=j+yy[z];
		if(c[i][j]!='0')
		{
			dp[z][i][j]=dp[z][i][j]+dp[z][x1][y1];
			dp[z][i][j].l=dp[z][x1][y1].l+1;
		}
	}
	for(z=4;z<6;z++)
	for(i=n;i>=1;i--)
	for(j=n;j>=1;j--)
	{
		int x1=i+xx[z],y1=j+yy[z];
		if(c[i][j]!='0')
		{
			dp[z][i][j]=dp[z][i][j]+dp[z][x1][y1];
			dp[z][i][j].l=dp[z][x1][y1].l+1;
		}
	}
	for(z=6;z<8;z++)
	for(i=n;i>=1;i--)
	for(j=1;j<=n;j++)
	{
		int x1=i+xx[z],y1=j+yy[z];
		if(c[i][j]!='0')
		{
			dp[z][i][j]=dp[z][i][j]+dp[z][x1][y1];
			dp[z][i][j].l=dp[z][x1][y1].l+1;
		}
	}
}
ll quick(ll s,int x)
{
	if(s==0)return 0;
	ll ans1=1,ans2=s;
	while(x>0)
	{
		if(x%2){
			ans1*=ans2;
			ans1%=mod;
		} 
		ans2=ans2*ans2;
		ans2%=mod;
		x/=2;
	}
	return ans1;
}
int main()
{
	
	int i,j,z;
	init();
	int lonr,lont;
	double tan=0;
	node ans;
	for(i=1;i<=n;i++)
	for(j=1;j<=n;j++)
	{
		lonr=lont=inf;
		node no1,no2;
		for(z=0;z<8;z+=2)lonr=min(lonr,dp[z][i][j].l),no1=no1+dp[z][i][j];
		for(z=0;z<8;z+=2)
		{
		    if(dp[z][i][j].l>lonr)
		    {
    			int x1=i+xx[z]*(lonr),y1=j+yy[z]*(lonr);
				no1=no1-dp[z][x1][y1];
    		}
		} 
		for(z=1;z<8;z+=2)lont=min(lont,dp[z][i][j].l),no2=no2+dp[z][i][j];
		for(z=1;z<8;z+=2)
		{
		    if(dp[z][i][j].l>lont)
		    {
    			int x1=i+xx[z]*(lont),y1=j+yy[z]*(lont);
				no2=no2-dp[z][x1][y1];
    		}
		} 
		if(c[i][j]=='1')no1.n1-=3,no2.n1-=3;
		if(c[i][j]=='2')no1.n2-=3,no2.n2-=3;
		if(c[i][j]=='3')no1.n3-=3,no2.n3-=3;
		double tan1=no1.n2*log(2)+no1.n3*log(3);
		double tan2=no2.n2*log(2)+no2.n3*log(3);
		if(tan1>tan)tan=tan1,ans=no1;
		if(tan2>tan)tan=tan2,ans=no2;
		if(fabs(tan-0)<1e-9)
		{
			 if(ans.n1==0&&no1.n1!=0)ans=no1;
            else if(ans.n1==0&&no2.n1!=0) ans=no2;
		}
	}
    ll ans1=quick(2,ans.n2)*quick(3,ans.n3)%mod;
    if(ans.n2==0&&ans.n3==0&&ans.n1==0)ans1=0;
    cout<<ans1<<endl;
} 