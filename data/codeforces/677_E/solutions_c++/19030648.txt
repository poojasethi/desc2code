#include<cstdio>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<iostream>
#include<algorithm>
using namespace std;

typedef long long LL;
const int fx[] = {1,1,-1,-1,0,0,-1,1},
	  	  fy[] = {1,-1,-1,1,-1,1,0,0};
const int N = 1010;
const int P = 1e9 + 7;
char s[N];
int mp[N][N], n;
int len[10][N][N];
double b[N][N], sm[10][N][N];

void ready(){
	for(int i = n; i >= 1; i --)
		for(int j = n; j >= 1; j --)
			if (mp[i][j]){
				len[0][i][j] = len[0][i + 1][j + 1] + 1;
				len[5][i][j] = len[5][i][j + 1] + 1;
				len[7][i][j] = len[7][i + 1][j] + 1;
				sm[0][i][j] = (mp[i + 1][j + 1] ? sm[0][i + 1][j + 1] : 0) + b[i][j];
				sm[5][i][j] = (mp[i][j + 1] ? sm[5][i][j + 1] : 0) + b[i][j];
				sm[7][i][j] = (mp[i + 1][j] ? sm[7][i + 1][j] : 0) + b[i][j];
			}
	for(int i = 1; i <= n; i ++)
		for(int j = n; j >= 1; j --)
			if (mp[i][j]){
				len[3][i][j] = len[3][i - 1][j + 1] + 1;
				sm[3][i][j] = (mp[i - 1][j + 1] ? sm[3][i - 1][j + 1] : 0) + b[i][j];
			}
	for(int i = 1; i <= n; i ++)
		for(int j = 1; j <= n; j ++)
			if (mp[i][j]){
				len[2][i][j] = len[2][i - 1][j - 1] + 1;
				len[4][i][j] = len[4][i][j - 1] + 1;
				len[6][i][j] = len[6][i - 1][j] + 1;
				sm[2][i][j] = (mp[i - 1][j - 1] ? sm[2][i - 1][j - 1] : 0) + b[i][j];
				sm[4][i][j] = (mp[i][j - 1] ? sm[4][i][j - 1] : 0) + b[i][j];
				sm[6][i][j] = (mp[i - 1][j] ? sm[6][i - 1][j] : 0) + b[i][j];
			}
	for(int i = n; i >= 1; i --)
		for(int j = 1; j <= n; j ++)
			if (mp[i][j]){
				len[1][i][j] = len[1][i + 1][j - 1] + 1;
				sm[1][i][j] = (mp[i + 1][j - 1] ? sm[1][i + 1][j - 1] : 0) + b[i][j];
			}
}

int main(){
	scanf("%d", &n);
	for(int i = 1; i <= n; i ++){
		scanf("%s",s + 1);
		for(int j = 1; j <= n; j ++){
			mp[i][j] = s[j] - '0';
			b[i][j] = log(mp[i][j]);
		}
	}
	ready();
	int posx = 1, posy = 1, dir = -1;
	double mx = -1;
	for(int i = 1; i <= n; i ++)
		for(int j = 1; j <= n; j ++) if (mp[i][j]){
			int tmp = 10000;
			double now = -3 * b[i][j];
			for(int k = 0; k < 4; k ++)
				tmp = min(tmp, len[k][i][j]);
			for(int k = 0; k < 4; k ++)
				now = now + sm[k][i][j] - sm[k][i + tmp * fx[k]][j + tmp * fy[k]];
			if (now > mx){
				mx = now;
				dir = 0;
				posx = i;
				posy = j;
			}
			now = -3 * b[i][j]; tmp = 10000;
			for(int k = 4; k < 8; k ++)
				tmp = min(tmp, len[k][i][j]);
			for(int k = 4; k < 8; k ++)
				now = now + sm[k][i][j] - sm[k][i + tmp * fx[k]][j + tmp * fy[k]];
			if (now > mx){
				mx = now;
				dir = 1;
				posx = i;
				posy = j;
			}
		}
	if (dir == 0){
		int tmp = 10000;
		for(int k = 0; k < 4; k ++)
			tmp = min(tmp, len[k][posx][posy]);
		int ans = mp[posx][posy];
		for(int k = 0; k < 4; k ++)
			for(int i = 1; i < tmp; i ++)
				ans = (LL)ans * mp[posx + i * fx[k]][posy + i * fy[k]] % P;
		printf("%d\n",ans);
	}else{
		int tmp = 10000;
		for(int k = 4; k < 8; k ++)
			tmp = min(tmp, len[k][posx][posy]);
		int ans = mp[posx][posy];
		for(int k = 4; k < 8; k ++)
			for(int i = 1; i < tmp; i ++)
				ans = (LL)ans * mp[posx + i * fx[k]][posy + i * fy[k]] % P;
		printf("%d\n",ans);
	}
	return 0;
}
