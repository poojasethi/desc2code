/*
  ------------------------- Hachiikung ---------------------------------
  ---------------------- Worrachate Bosri ------------------------------
  ------ Faculty of Computer Engineering Chulalongkorn University ------
*/
#include <bits/stdc++.h>
using namespace std;
#define REP(i,FN) for(int i=0;i<FN;i++)
#define FOR(i,ST,FN) for(int i=ST;i<=FN;i++)
#define FORD(i,FN,ST) for(int i=FN;i>=ST;i--)
#define FORX(i,c) for(typeof(c.begin())i=c.begin();i!=c.end();i++)
#define pause system("pause")
#define S scanf
#define P printf
#define X first
#define Y second
#define pb push_back
#define PII pair<int,int>
#define mp make_pair
#define sz size()
#define eps 1e-8

const int MOD(1000000007);
const int INF((1<<30)-1);
const int MAXN(1005);

char a[MAXN][MAXN];

int n, b[MAXN][MAXN][8], ansx = -1, ansy = -1, ansr = -1, rot = -1;

int d[8][2] = {-1,-1,-1,0,-1,+1,0,-1,0,+1,+1,-1,+1,0,+1,+1};

double c[MAXN][MAXN][8], total = -1.0;

void cross(int i,int j,int p1,int p2,int p3,int p4,bool rt){

    int p[] = {p1,p2,p3,p4}, r = INF;

    REP(l,4)
    {
        int k = p[l];
        r = min(r, b[i][j][k]);
    }

    double t = 0.0;

    REP(l,4)
    {
        int k = p[l], x = i+d[k][0]*r, y = j+d[k][1]*r;
        if(x < 0 || x >= n || y < 0 || y >= n) t += c[i][j][k];
        else t += c[i][j][k]-c[x][y][k];
    }

    t -= 3.0*log(a[i][j]-'0');

    if(t > total)
    {
        total = t;
        ansx = i;
        ansy = j;
        ansr = r;
        rot = rt;
    }

}

void PR(int p1,int p2,int p3,int p4){

    int p[] = {p1,p2,p3,p4};

    long long product = a[ansx][ansy]-'0';

    REP(l,4)
    {
        int k = p[l], x = ansx, y = ansy;

        FOR(i,1,ansr-1)
        {
            x += d[k][0];
            y += d[k][1];
            product *= (a[x][y]-'0');
            product %= MOD;
        }
    }

    cout << product;

}

int main(){

    S("%d",&n);
    REP(i,n)
        S("%s",a[i]);

    REP(i,n)
        REP(j,n)
            REP(k,4)
            {
                if(a[i][j] == '0')
                {
                    b[i][j][k] = 0;
                    c[i][j][k] = 0.0;
                }

                else
                {
                    int x = i+d[k][0];
                    int y = j+d[k][1];

                    if(x < 0 || x >= n || y < 0 || y >= n)
                    {
                        b[i][j][k] = 1;
                        c[i][j][k] = log(a[i][j]-'0');
                    }

                    else
                    {
                        b[i][j][k] = b[x][y][k]+1;
                        c[i][j][k] = c[x][y][k]+log(a[i][j]-'0');
                    }
                }
            }

    FORD(i,n-1,0)
        FORD(j,n-1,0)
            FOR(k,4,7)
            {
                if(a[i][j] == '0')
                {
                    b[i][j][k] = 0;
                    c[i][j][k] = 0.0;
                }

                else
                {
                    int x = i+d[k][0];
                    int y = j+d[k][1];

                    if(x < 0 || x >= n || y < 0 || y >= n)
                    {
                        b[i][j][k] = 1;
                        c[i][j][k] = log(a[i][j]-'0');
                    }

                    else
                    {
                        b[i][j][k] = b[x][y][k]+1;
                        c[i][j][k] = c[x][y][k]+log(a[i][j]-'0');
                    }
                }
            }

    REP(i,n)
        REP(j,n)
        {
            if(a[i][j] == '0') continue;
            cross(i,j,1,3,4,6,false);
            cross(i,j,0,2,5,7,true);
        }

    if(ansx == -1) P("0");
    else if(!rot) PR(1,3,4,6);
    else PR(0,2,5,7);

}
