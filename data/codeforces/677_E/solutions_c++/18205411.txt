#include <math.h>
#include <vector>
#include <string>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <limits.h>
#include <algorithm>
#define X first 
#define Y second 
#define MP make_pair
#define PB push_back
#define ll long long
#define rep(i, a, b) for(int i = a; i <= b; i++)
#define drep(i, a, b) for(int i = a; i >= b; i--)
using namespace std;

const int Maxn = 1010, Mo = 1e9 + 7, INF = INT_MAX;
int n, m, p;
int a[Maxn][Maxn];
int lenU[Maxn][Maxn], lenD[Maxn][Maxn],lenR[Maxn][Maxn], lenL[Maxn][Maxn];
double logL[Maxn][Maxn],logR[Maxn][Maxn],logU[Maxn][Maxn], logD[Maxn][Maxn];
int lenLU[Maxn][Maxn],lenRU[Maxn][Maxn],lenLD[Maxn][Maxn],lenRD[Maxn][Maxn];
double logLU[Maxn][Maxn],logRU[Maxn][Maxn],logLD[Maxn][Maxn],logRD[Maxn][Maxn];
string st;
ll pw(ll a, int b){
    ll ans = 1;
    for (;b; a= a * a % Mo, b>>=1)
        if (b & 1) ans = ans * a % Mo;
    return ans;
}
int main(){
    cin >> n;
    rep(i,1,n) {
        cin >> st;
        rep(j,1,n) a[i][j] = st[j-1] - '0';
    }
    rep(i,1,n) 
        rep(j,1,n){
            if (a[i][j] == 0) continue;
            lenU[i][j] = lenU[i-1][j] + 1;
            lenL[i][j] = lenL[i][j-1] + 1;
            logU[i][j] = logU[i-1][j] + log(a[i][j]);
            logL[i][j] = logL[i][j-1] + log(a[i][j]);

            lenLU[i][j] = lenLU[i-1][j-1] + 1;
            lenRU[i][j] = lenRU[i-1][j+1] + 1;
            logLU[i][j] = logLU[i-1][j-1] + log(a[i][j]);
            logRU[i][j] = logRU[i-1][j+1] + log(a[i][j]);

        }
    drep(i,n,1) 
        drep(j,n,1){
            if (a[i][j] == 0) continue;
            lenD[i][j] = lenD[i+1][j] + 1;
            lenR[i][j] = lenR[i][j+1] + 1;
            logD[i][j] = logD[i+1][j] + log(a[i][j]);
            logR[i][j] = logR[i][j+1] + log(a[i][j]);

            lenRD[i][j] = lenRD[i+1][j+1] + 1;
            lenLD[i][j] = lenLD[i+1][j-1] + 1;
            logRD[i][j] = logRD[i+1][j+1] + log(a[i][j]);
            logLD[i][j] = logLD[i+1][j-1] + log(a[i][j]);
        }
    double Max = -1;
    ll ans = 1;
    int xlen;
    int x, y, ty = 3;
    rep(i,1,n) rep(j,1,n)
    {
        if (a[i][j] ==0) continue;        
        int len = min(min(lenL[i][j],lenR[i][j]), min(lenU[i][j],lenD[i][j]));    
        double nU = logU[i][j] - logU[i - len][j];
        double nL = logL[i][j] - logL[i][j - len];
        double nD = logD[i][j] - logD[i + len][j];
        double nR = logR[i][j] - logR[i][j + len];
        double now = nU + nL + nD + nR - 3 * log(a[i][j]);       
        if (now > Max){
            Max = now;
            x = i , y = j , ty = 0, xlen = len;
        }
        len = min(min(lenLU[i][j],lenRU[i][j]), min(lenLD[i][j],lenRD[i][j]));
        nU = logLU[i][j] - logLU[i - len][j - len];
        nL = logRU[i][j] - logRU[i - len][j + len];
        nD = logLD[i][j] - logLD[i + len][j - len];
        nR = logRD[i][j] - logRD[i + len][j + len];
        now = nU + nL + nD + nR - 3 * log(a[i][j]);
        if (now > Max){
            Max = now;
            x = i , y = j , ty = 1, xlen = len;
        }
    }
    xlen --;
    if (ty == 0){
        rep(i , x - xlen , x + xlen) ans = ans * a[i][y] % Mo;
        rep(i , y - xlen , y - 1) ans = ans * a[x][i] % Mo;
        rep(i , y + 1 , y + xlen) ans = ans * a[x][i] %Mo;
    }
    else if (ty == 1){
        rep(i , -xlen , xlen) ans = ans * a[x + i][y + i] % Mo;
        rep(i , -xlen , - 1) ans  = ans * a[x + i][y - i] % Mo;
        rep(i , 1 , xlen) ans = ans * a[x + i][y - i] %Mo;
    }
    else ans = 0;
    cout << ans << endl;

}