#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
using namespace std;

namespace MyEans {
	const int MOD = 1e9 + 7;
	const int Maxn = 1005;
	const double lg2 = log(2), lg3 = log(3);
	char a[Maxn][Maxn];
	const int dx[] = { 0,0,-1,1,1,-1,1,-1 };
	const int dy[] = { 1,-1,0,0,1,1,-1,-1 };
	int ablego[8][Maxn][Maxn];
	double sum[8][Maxn][Maxn], after[Maxn][Maxn];
#define inside(a) ((a)>=0&&(a)<n)
	int Getans() {
		int n;
		scanf("%d", &n);
		for (int i = 0; i < n; ++i) {
			scanf("%s", a[i]);
			for (int j = 0; j < n; ++j)
				if (a[i][j] == '2')
					after[i][j] = lg2;
				else if (a[i][j] == '3')
					after[i][j] = lg3;
	}
		for (int dir = 0; dir < 8; ++dir) {
			for (int i = 0; i < n; ++i)
				for (int j = 0,k,x,y; j < n; ++j) 
				if(!inside(i-dx[dir])||!inside(j-dy[dir])){
					k = 0;
					for (x = i, y = j; inside(x) && inside(y); x += dx[dir], y += dy[dir]) {
						if (a[x][y] != '0') {
							if (x == i&&y == j)
								sum[dir][x][y] = after[x][y];
							else sum[dir][x][y] = sum[dir][x - dx[dir]][y - dy[dir]] + after[x][y];
							++k;
						}
						else {
							sum[dir][x][y] = 0; k = 0;
						}
						ablego[dir][x][y] = k;
					}
				}
		}
		double ans = -1; int ansx(0), ansy(0), ansdir(0), anssize(0);
		for (int i = 0; i < n; ++i) 
			for (int j = 0; j < n; ++j) 
				if (a[i][j] != '0') {
					int tmpl = n + 10;
					for (int dir = 0; dir < 4; ++dir)
						tmpl = min(tmpl, ablego[dir][i][j]);
					double val = after[i][j];
					for(int dir = 0;dir < 4;++dir)
						val += sum[dir][i + dx[dir] * (tmpl - 1)][j + dy[dir] * (tmpl - 1)] - sum[dir][i][j];
					if (val > ans) {
						ans = val; ansx = i; ansy = j; ansdir = 0; anssize = tmpl;
					}
					tmpl = n + 10;
					for (int dir = 4; dir < 8; ++dir)
						tmpl = min(tmpl, ablego[dir][i][j]);
					val = after[i][j];
					for (int dir = 4; dir < 8; ++dir)
						val += sum[dir][i + dx[dir] * (tmpl - 1)][j + dy[dir] * (tmpl - 1)] - sum[dir][i][j];
					if (val > ans) {
						ans = val; ansx = i; ansy = j; ansdir = 4; anssize = tmpl;
					}
				}
		long long tot = a[ansx][ansy] - '0';
		for (int i = ansdir; i < ansdir + 4; ++i) {
			for (int j = 1; j < anssize; ++j)
				tot = tot * (a[ansx + dx[i] * j][ansy + dy[i] * j] - '0') % MOD;
		}
		return (int)tot;
	}
}


int main() {
	int b = MyEans::Getans();
	cout << b;
	return 0;
}