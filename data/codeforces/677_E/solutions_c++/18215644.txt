#include <stdio.h>
#include <math.h>
#define infdb (1e18)
#define inf ((1<<30)-1)
__int64 modu=1000000007,prod;
char map[1010][1010];
int len[1010][1010][8];
double val[1010][1010][8];
int min(int a,int b){
	return a<=b?a:b;
}
int main(){
	int n,i,j,k,shape,length,row,col,dist;
	double best,tmpv;
	scanf("%d",&n);
	for(i=0;i<n;i++) scanf("%s",map[i]);
	/*
425	
0*1
637	
	*/
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
		    if(j==0||map[i][j-1]=='0') len[i][j][0]=0,val[i][j][0]=0;
		    else len[i][j][0]=1+len[i][j-1][0],val[i][j][0]=val[i][j-1][0]+log((double)(map[i][j-1]-'0'));
		}
		for(j=n-1;j>=0;j--){
			if(j==n-1||map[i][j+1]=='0') len[i][j][1]=0,val[i][j][1]=0;
			else len[i][j][1]=1+len[i][j+1][1],val[i][j][1]=val[i][j+1][1]+log((double)(map[i][j+1]-'0'));
		}
		for(j=0;j<n;j++){
		    if(j==0||map[j-1][i]=='0') len[j][i][2]=0,val[j][i][2]=0;
		    else len[j][i][2]=1+len[j-1][i][2],val[j][i][2]=val[j-1][i][2]+log((double)(map[j-1][i]-'0'));
		}
		for(j=n-1;j>=0;j--){
		    if(j==n-1||map[j+1][i]=='0') len[j][i][3]=0,val[j][i][3]=0;
		    else len[j][i][3]=1+len[j+1][i][3],val[j][i][3]=val[j+1][i][3]+log((double)(map[j+1][i]-'0'));
		}
		for(j=0;j<n;j++){
		    if(i==0||j==0||map[i-1][j-1]=='0') len[i][j][4]=0,val[i][j][4]=0;
		    else len[i][j][4]=1+len[i-1][j-1][4],val[i][j][4]=val[i-1][j-1][4]+log((double)(map[i-1][j-1]-'0'));
		}
		for(j=n-1;j>=0;j--){
		    if(i==0||j==n-1||map[i-1][j+1]=='0') len[i][j][5]=0,val[i][j][5]=0;
		    else len[i][j][5]=1+len[i-1][j+1][5],val[i][j][5]=val[i-1][j+1][5]+log((double)(map[i-1][j+1]-'0'));
		}
		for(j=0;j<n;j++){
			if(i==0||j==0||map[n-i][j-1]=='0') len[n-1-i][j][6]=0,val[n-1-i][j][6]=0;
			else len[n-1-i][j][6]=1+len[n-i][j-1][6],val[n-1-i][j][6]=val[n-i][j-1][6]+log((double)(map[n-i][j-1]-'0'));
		}
		for(j=n-1;j>=0;j--){
		    if(i==0||j==n-1||map[n-i][j+1]=='0') len[n-1-i][j][7]=0,val[n-1-i][j][7]=0;
		    else len[n-1-i][j][7]=1+len[n-i][j+1][7],val[n-1-i][j][7]=val[n-i][j+1][7]+log((double)(map[n-i][j+1]-'0'));
		}
	}
	best=-infdb;
	shape=-1;
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			if(map[i][j]=='0') ;
			else{
				//0 +
				//1 x
			    length=inf;
			    for(k=0;k<4;k++) length=min(length,len[i][j][k]);
			    tmpv=log((double)(map[i][j]-'0'))+val[i][j][0]-val[i][j-length][0]+val[i][j][1]-val[i][j+length][1]+val[i][j][2]-val[i-length][j][2]+val[i][j][3]-val[i+length][j][3];
			    if(tmpv>best){
				    best=tmpv;
				    row=i,col=j,dist=length,shape=0;
				}
			    length=inf;
			    for(k=4;k<8;k++) length=min(length,len[i][j][k]);
			    tmpv=log((double)(map[i][j]-'0'))+val[i][j][4]-val[i-length][j-length][4]+val[i][j][5]-val[i-length][j+length][5]+val[i][j][6]-val[i+length][j-length][6]+val[i][j][7]-val[i+length][j+length][7];
			    if(tmpv>best){
				    best=tmpv;
				    row=i,col=j,dist=length,shape=1;
				}
			}
		}
	}
	if(shape==-1) printf("0\n");
	else if(shape==0){
		prod=map[row][col]-'0';
		for(i=1;i<=dist;i++){
		    prod=((map[row][col-i]-'0')*(map[row][col+i]-'0')*(map[row-i][col]-'0')*(map[row+i][col]-'0')*prod)%modu;
		}
		printf("%I64d\n",prod);
	}else{
		prod=map[row][col]-'0';
		for(i=1;i<=dist;i++){
		    prod=((map[row-i][col-i]-'0')*(map[row-i][col+i]-'0')*(map[row+i][col-i]-'0')*(map[row+i][col+i]-'0')*prod)%modu;
		}
		printf("%I64d\n",prod);
	}
	return 0;
}