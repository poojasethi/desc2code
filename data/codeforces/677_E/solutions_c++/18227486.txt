#include <iostream>
#include <stdio.h>
#include <string>
#include <cmath>
#define MOD 1000000007
#define N 2005
using namespace std;
typedef unsigned int ll;
ll i,j,n,h,x,y,cur_h,k,dir;
ll pre[8][N][N];
double sums[8][N][N],ans,logs[N][N],lg2,lg3;
ll ansx,ansy,anssize,ansdir;
ll total;
ll directions[8][2] = {{-1,-1},{-1,1},{1,-1},{1,1},{1,0},{0,1},{-1,0},{0,-1}};
char a[N][N];
bool in_range(ll x)
{
	return (x >= 0 && x < n);
}
int main()
{
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	lg2 = log(2);
	lg3 = log(3);
	cin >> n;
	for (i = 0; i < n; i++)
		scanf("%s",a[i]);
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
			if (a[i][j] == '3')
			   logs[i][j] = lg3;
			else if (a[i][j] == '2')
		 		 logs[i][j] = lg2;
	for (dir = 0; dir < 8; dir++)
	{
		for (i = 0; i < n; i++)
			for (j = 0; j < n; j++)
				if (!in_range(i-directions[dir][0]) || !in_range(j-directions[dir][1]))
				{
					k = 0;
					ll d1 = directions[dir][0], d2 = directions[dir][1];
					for (x = i, y = j; in_range(x) && in_range(y); x += d1, y += d2)
					{
						if (a[x][y] != '0')
						{
						   k++;
						   if (x == i && y == j)
							  sums[dir][x][y] = logs[i][j];
						   else
							   sums[dir][x][y] = sums[dir][x-d1][y-d2] + logs[x][y];
			   			}
						else
						{
							sums[dir][x][y] = 0;
							k = 0;
						}
						pre[dir][x][y] = k;
					}
				}
	}
	ans = -1;
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
		if (a[i][j] != '0')
		{
			ll tmp = n+5;
			for (k = 0; k < 4; k++)
				tmp = min(tmp, pre[k][i][j]);
			double val = logs[i][j];
			for (k = 0; k < 4; k++)
				val += sums[k][i+directions[k][0]*(tmp-1)][j+directions[k][1]*(tmp-1)] - sums[k][i][j];
			if (val > ans)
			{
				ans = val;
				ansx = i;
				ansy = j;
				anssize = tmp;
				ansdir = 0;
			}
			
			tmp = n+5;
			for (k = 4; k < 8; k++)
				tmp = min(tmp, pre[k][i][j]);
			val = logs[i][j];
			for (k = 4; k < 8; k++)
				val += sums[k][i+directions[k][0]*(tmp-1)][j+directions[k][1]*(tmp-1)] - sums[k][i][j];
			if (val > ans)
			{
				ans = val;
				ansx = i;
				ansy = j;
				anssize = tmp;
				ansdir = 4;
			}
		}
	total = a[ansx][ansy]-'0';
	for (k = ansdir; k < ansdir+4; k++)
	{
		for (i = 1; i < anssize; i++)
			total = (total*(a[ansx+directions[k][0]*i][ansy+directions[k][1]*i]-'0'))%MOD;
	}
	cout << total << endl;
	return 0;
}