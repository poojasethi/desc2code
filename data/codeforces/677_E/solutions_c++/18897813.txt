#include <bits/stdc++.h>
#define N 1005
#define BASE 1000000007

using namespace std;

long long i, j, n, x, y, k, dir;
long long cnt[8][N][N];
double sums[8][N][N], ans, logs[N][N], lg2, lg3;
long long ansi, ansj, anssize, ansdir;
long long res;
long long huong[8][2] = {{-1, -1}, {-1, 1}, {1, -1}, {1, 1}, {1, 0}, {0, 1}, {-1, 0}, {0, -1}};
string a[N];

bool in_range(long long x){
    return (x >= 0 && x < n);
}

int main(){
    ios_base::sync_with_stdio(false);
    //freopen("inp.txt","r",stdin);
    //freopen("out.txt","w",stdout);
	lg2 = log((float)2);
	lg3 = log((float)3);
	cin >> n;
	for (i = 0; i < n; i++)	cin >> a[i];
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
			if (a[i][j] == '3') logs[i][j] = lg3;
			else if (a[i][j] == '2') logs[i][j] = lg2;
	for (dir = 0; dir < 8; dir++){
		for (i = 0; i < n; i++)
			for (j = 0; j < n; j++)
				if (!in_range(i-huong[dir][0]) || !in_range(j-huong[dir][1])) {
					k = 0;
					long long d1 = huong[dir][0], d2 = huong[dir][1];
					for (x = i, y = j; in_range(x) && in_range(y); x += d1, y += d2){
						if (a[x][y] != '0')	{
						   k++;
						   if (x == i && y == j)
							  sums[dir][x][y] = logs[i][j];
						   else
							   sums[dir][x][y] = sums[dir][x-d1][y-d2] + logs[x][y];
			   			}
						else{
							sums[dir][x][y] = 0;
							k = 0;
						}
						cnt[dir][x][y] = k;
					}
				}
	}
	ans = -1;
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
		if (a[i][j] != '0')	{
			long long r = n;
			for (k = 0; k < 4; k++)
				r = min(r, cnt[k][i][j]);
			double val = logs[i][j];
			for (k = 0; k < 4; k++)
				val += sums[k][i+huong[k][0]*(r-1)][j+huong[k][1]*(r-1)] - sums[k][i][j];
			if (val > ans)	ans = val, ansi = i, ansj = j, anssize = r, ansdir = 0;
			r = n;
			for (k = 4; k < 8; k++)
				r = min(r, cnt[k][i][j]);
			val = logs[i][j];
			for (k = 4; k < 8; k++)
				val += sums[k][i+huong[k][0]*(r-1)][j+huong[k][1]*(r-1)] - sums[k][i][j];
			if (val > ans) ans = val, ansi = i, ansj = j, anssize = r, ansdir = 4;
		}
	res = a[ansi][ansj]-'0';
	for (k = ansdir; k < ansdir+4; k++)	{
		for (i = 1; i < anssize; i++)
			res = (res*(a[ansi+huong[k][0]*i][ansj+huong[k][1]*i]-'0'))%BASE;
	}
	cout << res;
}
