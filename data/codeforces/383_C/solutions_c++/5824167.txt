#include<bits/stdc++.h>
using namespace std;

const int Maxn=2e5+10;
int a[Maxn],n,m,l[Maxn],r[Maxn],tt,deep[Maxn],c[Maxn];
vector<int> edge[Maxn];

void dfs(int v,int fa)
{
	l[v]=++tt;
	for(int i=0;i<edge[v].size();i++)
	  if(edge[v][i]!=fa)
	  {
		  deep[edge[v][i]]=deep[v]+1;
		  dfs(edge[v][i],v);
	  }
	r[v]=tt;
}

inline int lowbit(int x) { return x&-x;}
void add(int x,int val)
{
	while(x<=n)
	  c[x]+=val,x+=lowbit(x);
}

int query(int x)
{
	int ret=0;
	while(x)
	  ret+=c[x],x-=lowbit(x);
	return ret;
}

int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
	  scanf("%d",&a[i]);
	for(int i=1;i<n;i++)
	{
		int u,v;
		scanf("%d%d",&u,&v);
		edge[u].push_back(v);
		edge[v].push_back(u);
	}
	deep[1]=0;
	tt=0;
	dfs(1,0);

	for(int i=0;i<m;i++)
	{
		int type;
		scanf("%d",&type);
		if(type==1)
		{
			int x,val;
			scanf("%d%d",&x,&val);
			if(deep[x]&1)
			  val=-val;
			add(l[x],val),add(r[x]+1,-val);
		}
		else
		{
			int x;
			scanf("%d",&x);
			int ans=query(l[x]);
			if(deep[x]&1)
			  ans=-ans;
			printf("%d\n",ans+a[x]);
		}
	}
	return 0;
}
