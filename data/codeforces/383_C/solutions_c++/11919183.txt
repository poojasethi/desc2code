#include <bits/stdc++.h>

using namespace std;

#define MAX 200005

int start[MAX], end[MAX], tree[2][MAX], level[MAX], t, a[MAX], n;
list<int> graph[MAX];

void dfs(int v, int d, int p){
	t++;
	start[v] = t;
	level[v] = d%2;

	list<int>::iterator i;
	for(i = graph[v].begin() ; i != graph[v].end() ; i++){
		if(*i != p){
			dfs(*i, d+1, v);
		}
	}

	end[v] = t;
}

void update(int idx, int val, int l){
	while(idx <= n){
		tree[l][idx] += val;
		idx += (idx & -idx);
	}
}

int query(int idx, int l){
	int sum = 0;
	while(idx > 0){
		sum += tree[l][idx];
		idx -= (idx & -idx);
	}
	return sum;
}

int main(){
	std::ios_base::sync_with_stdio(false);
	int m, u, v, x;
	cin>>n>>m;

	for(int i=0 ; i<n ; i++){
		cin>>a[i];
	}

	for(int i=0 ; i<n-1 ; i++){
		cin>>u>>v;

		graph[u].push_back(v);
		graph[v].push_back(u);
	}

	dfs(1, 0, -1);

	for(int i=0 ; i<m ; i++){
		cin>>u>>v;

		if(u == 1){
			cin>>x;
			update(start[v], x, level[v]);
			update(end[v]+1, -x, level[v]);
			update(start[v], -x, 1 - level[v]);
			update(end[v]+1, x, 1 - level[v]);
		} else {
			int ans = query(start[v], level[v]);
			cout<<a[v-1] + ans<<endl;
		}
	}

	return 0;
}