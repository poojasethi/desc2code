#include <iostream>
#include <vector>
using namespace std;
const int N=1<<18,M=N<<1;
int n,q,a[N],h[N],l[N],r[N],m=1,d[2][M];
vector<int>g[N];
void dfs(int x,int f=0,int k=0){
  l[x]=m++,h[x]=k;
  for(int i=0;i<g[x].size();++i){
    int y=g[x][i];
    if(y!=f)dfs(y,x,1-k);
  }
  r[x]=m++;
}
void upd(int u,int v,int* p){while(u<M)p[u]+=v,u+=u&-u;}
int qry(int u,int*p){
  int v=0;
  while(u>0)v+=p[u],u-=u&-u;
  return v;
}
int main(void) {
  cin>>n>>q;
  for(int i=1;i<=n;++i)cin>>a[i];
  for(int i=1,x,y;i<n&&cin>>x>>y;++i)g[x].push_back(y),g[y].push_back(x);
  dfs(1);
  for(int i=0,o,x,y;i<q&&cin>>o;++i){
    if(1==o){
      cin>>x>>y;
      upd(l[x],y,d[h[x]]),upd(r[x],-y,d[h[x]]);
    }else{
      cin>>x;
      cout<<(a[x]+qry(l[x],d[h[x]])-qry(l[x],d[1-h[x]]))<<endl;
    }
  }
}
