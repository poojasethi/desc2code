#include <stdio.h>
#include <vector>
int n,tree[500001][2],cost[200001],height[200001],h=1,inter[200001][2],cnt;
using namespace std;
vector<int> list[200001];
void back(int k){
	int i;
	height[k]=h++;
	inter[k][0]=cnt++;
	for(i=0;i<list[k].size();i++){
		if(height[list[k][i]]==0)
			back(list[k][i]);
	}
	inter[k][1]=cnt-1;
	h--;
}
void ins(int le,int ri,int p,int a){
	while(le<=ri){
		if(le&1){
			tree[le][a]+=p;
			le++;
		}
		if(!(ri&1)){
			tree[ri][a]+=p;
			ri--;
		}
		le>>=1;
		ri>>=1;
	}
}
int find(int a,int b){
	int sum=0;
	while(a!=0){
		sum+=tree[a][b];
		sum-=tree[a][!b];
		a>>=1;
	}
	return sum;
}
int main(){
	int i,m,k=1,a,b;
	scanf("%d %d",&n,&m);
	for(i=0;i<n;i++)
		scanf("%d",&cost[i]);
	for(i=0;i<n-1;i++){
		scanf("%d %d",&a,&b);
		a--;b--;
		list[a].push_back(b);
		list[b].push_back(a);
	}
	while(k<n)
		k<<=1;
	back(0);
	for(;m>=1;m--){
		scanf("%d",&a);
		if(a==1){
			scanf("%d %d",&a,&b);
			a--;
			ins(inter[a][0]+k,inter[a][1]+k,b,height[a]%2);
		}
		else{
			scanf("%d",&a);
			a--;
			printf("%d\n",find(inter[a][0]+k,height[a]%2)+cost[a]);
		}
	}
	return 0;
}
