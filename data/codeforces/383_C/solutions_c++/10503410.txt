#include <bits/stdc++.h>
using namespace std;

const int N=2e5+10;
vector<int> adj[N];
int a[N], t[N], in[N], out[N], level[N], T;

void dfs(int u, int p) {
    in[u]=++T;
    for(int i=0; i<adj[u].size(); i++) {
        int v=adj[u][i];
        if(v==p) continue;
        level[v]=level[u]+1;
        dfs(v, u);
    }
    out[u]=T;
}

void update(int idx, int v) {
    for(; idx>0; idx-=idx&-idx) t[idx]+=v;
}

int query(int idx) {
    int sum=0;
    for(; idx<N; idx+=idx&-idx) sum+=t[idx];
    return sum;
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);
    for(int i=1; i<=n; i++) scanf("%d", &a[i]);
    for(int i=1; i<n; i++) {
        int a, b;
        scanf("%d %d", &a, &b);
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    dfs(1, -1);
    for(int i=0; i<m; i++) {
        int op, x, v;
        scanf("%d %d", &op, &x);
        if(op==1) {
            scanf("%d", &v);
            int s=(level[x]&1) ? -1 : 1;
            update(out[x], s*v);
            update(in[x]-1, -s*v);
        }
        else {
            int s=(level[x]&1) ? -1 : 1;
            printf("%d\n", a[x]+s*query(in[x]));
        }
    }
    return 0;
}
