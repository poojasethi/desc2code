#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>

using namespace std;

const int maxn = 200005;

int board[2][maxn],n;
int lowbit(int x)
{
	return x&-x;
}

int query(int po,int p)
{
	int res = 0;
	for(;p;p-=lowbit(p))
		res += board[po][p];
	return res;
}

void modify(int po,int p,int v)
{
	for(;p<=n;p+=lowbit(p))
		board[po][p] += v;
}

int data[maxn],dep[maxn],finding[maxn],finish[maxn],tt;

vector<int> v[maxn];
void dfs(int x,int d)
{
	finding[x] = ++tt;dep[x] = d;
	for(int i=0;i<v[x].size();i++)
	{
		int toit = v[x][i];
		if(!finding[toit])
		{
			dfs(toit,1-d);
		}
	}
	finish[x] = tt;
}
int main()
{
	int a,b,c,q;
	scanf("%d%d",&n,&q);
	for(int i=1;i<=n;i++)
		scanf("%d",data+i);
	for(int i=1;i<n;i++)
	{
		scanf("%d%d",&a,&b);
		v[a].push_back(b);
		v[b].push_back(a);
	}
	dfs(1,0);
	while(q--)
	{
		scanf("%d%d",&a,&b);
		if(a==1)
		{
			scanf("%d",&c);
			modify(dep[b],finding[b],c);
			modify(dep[b],finish[b]+1,-c);
		}
		else
		{
			printf("%d\n",data[b]+query(dep[b],finding[b])-query(dep[b]^1,finding[b]));
		}
	}
}