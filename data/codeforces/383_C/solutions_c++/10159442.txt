#include <bits/stdc++.h>
using namespace std;

const int N=200005;
int n, m;
struct bit {
	int c[N];
	bit() { memset(c, 0, sizeof c); }
	void add(int x, int s) { for(; x<=n; x+=x&-x) c[x]+=s; }
	int sum(int x) { int r=0; for(; x; x-=x&-x) r+=c[x]; return r; }
	void upd(int l, int r, int s) { add(l, s); add(r+1, -s); }
}odd, even;
int ihead[N], cnt, FF[N], LL[N], a[N], ji[N], tot;
struct E { int next, to; }e[N<<1];
void add(int x, int y) {
	e[++cnt]=(E){ihead[x], y}; ihead[x]=cnt;
	e[++cnt]=(E){ihead[y], x}; ihead[y]=cnt;
}
void dfs(int x, int fa) {
	FF[x]=++tot; ji[x]=!ji[fa];
	for(int i=ihead[x]; i; i=e[i].next) if(e[i].to!=fa) dfs(e[i].to, x);
	LL[x]=tot;
}
int main() {
	scanf("%d%d", &n, &m);
	for(int i=1; i<=n; ++i) scanf("%d", &a[i]);
	for(int i=1; i<n; ++i) { int x, y; scanf("%d%d", &x, &y); add(x, y); }
	dfs(1, 0);
	for(int q=1; q<=m; ++q) {
		int c, x, y;
		scanf("%d", &c);
		if(c==1) {
			scanf("%d%d", &x, &y);
			if(ji[x]) y=-y;
			even.upd(FF[x], LL[x], y);
			odd.upd(FF[x], LL[x], -y);
		}
		else {
			scanf("%d", &x);
			if(ji[x]) printf("%d\n", odd.sum(FF[x])+a[x]);
			else printf("%d\n", even.sum(FF[x])+a[x]);
		}
	}
	return 0;
}