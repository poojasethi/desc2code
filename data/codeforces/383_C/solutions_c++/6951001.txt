#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

const int MAX_N = 200007;

int n, m;
vector<int> E[MAX_N];
int tim;
int a[MAX_N], dep[MAX_N];
int in[MAX_N], out[MAX_N];
int bit[MAX_N];

int lowbit(int x) {
	return x & -x;
}

int sum(int x) {
	int ret = 0;
	while (x > 0) {
		ret += bit[x];
		x -= lowbit(x);
	}
	return ret;
}

void add(int x, int val) {
	while (x < MAX_N) {
		bit[x] += val;
		x += lowbit(x);
	}
}

int dfs(int u, int fa) {
	in[u] = ++tim;
	for (int i = 0; i < E[u].size(); ++i) {
		int v = E[u][i];
		if (v == fa) continue;
		dep[v] = dep[u] + 1;
		dfs(v, u);
	}
	out[u] = tim;
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &a[i]);
	}
	for (int i = 1; i < n; ++i) {
		int u, v;
		scanf("%d%d", &u, &v);
		E[u].push_back(v);
	}
	dfs(1, -1);
	for (int i = 0; i < m; ++i) {
		int ty, u, val;
		scanf("%d", &ty);
		if (1 == ty) {
			scanf("%d%d", &u, &val);
			int val1 = (dep[u] & 1) ? -val : val;
			add(in[u], val1);
			add(out[u] + 1, -val1);
		} else {
			scanf("%d", &u);	
			val = (dep[u] & 1) ? -1 : 1;
			int ans = a[u] + val * sum(in[u]);
			printf("%d\n", ans);
		}
	}
	return 0;
}

				  		  	   			   	 	  	