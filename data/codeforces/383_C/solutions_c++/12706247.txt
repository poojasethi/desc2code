#include<bits/stdc++.h>
using namespace std;
#define foreach(i, x)  for(type(x) i=x.begin() ; i != x.end() ; i++)
#define FOR(ii, aa, bb) for(int ii = aa ; ii <= bb ; ii++)
#define type(x) __typeof(x.begin())
#define pb push_back
const int N = 2e5+5;
int start[N],end[N],T,i,j,k,n,m,x,y,type,F[N],val[N],depth[N];
vector< int > v[N];
int query(int x) { int sum = 0; for(;x<N;x+=x&-x) sum += F[x]; return sum;  }
void update(int x,int y,int t) { for(;y>0;y-=y&-y) F[y] += t; x--; for(;x>0;x-=x&-x) F[x] -= t;  }
void dfs(int node,int root) { start[node]=++T; depth[node]=depth[root]^1; foreach(it,v[node]) if(*it != root) dfs(*it,node); end[node]=T; }
int main(){
    scanf("%d %d",&n,&m);
    FOR(i,1,n) scanf("%d",&val[i]);
    FOR(i,2,n) {scanf("%d %d",&x,&y);v[x].pb(y);v[y].pb(x);}
    depth[0] = 1; dfs(1,0);
    FOR(i,1,m) {
        scanf("%d",&type);
        if(type == 1) { scanf("%d %d",&x,&y);  update(start[x],end[x],y * (2 * depth[x] - 1)); }
        else { scanf("%d",&x); printf("%d\n",query(start[x]) * (2 * depth[x] - 1) + val[x]); }
    } return 0;
}