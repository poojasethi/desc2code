#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
#include<vector>
using namespace std;
#define N 200001
int n,m,T[2][N],dep[N],cnt,a[N];
vector<int>G[N];
struct range{
	int l,r;
}R[N];
void dfs(int u){
	R[u].l=++cnt;
	for(int i=G[u].size()-1;i>=0;i--){
		int v=G[u][i];
		if(!R[v].l){
			dep[v]=dep[u]+1;
			dfs(v);
		}
	}
	R[u].r=cnt;
}
void add(int*BIT,int x,int v){
	for(;x<=n;x+=(x&(-x)))BIT[x]+=v;
}int query(int*BIT,int x){
	int tmp=0;
	for(;x;x-=(x&(-x)))tmp+=BIT[x];
	return tmp;
}
int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)scanf("%d",&a[i]);
	for(int i=1,u,v;i<n;i++){
		scanf("%d%d",&u,&v);
		G[u].push_back(v);
		G[v].push_back(u);
	}dfs(1);
	while(m--){
		int typ,u,x;
		scanf("%d%d",&typ,&u);
		if(typ==1){
			scanf("%d",&x);
			add(T[dep[u]%2],R[u].l,x);
			add(T[dep[u]%2],R[u].r+1,-x);
			add(T[(dep[u]%2)^1],R[u].l,-x);
			add(T[(dep[u]%2)^1],R[u].r+1,x);
		}else
			printf("%d\n",query(T[dep[u]%2],R[u].l)+a[u]);
	}
}
