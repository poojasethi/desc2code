#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;

const int maxn=200010;

long long c[2][maxn];

void upd(int x,int n,int k)
{
    while(n<maxn)
	c[x][n]+=k,n+=n&(-n);
}
long long get(int x,int n)
{
    long long ans=0;
    while(n)
	ans+=c[x][n],n-=n&(-n);
    return ans;
}
int first[maxn],nxt[maxn<<1],vv[maxn<<1],dep[maxn];
int fa[maxn];

int lft[maxn],rht[maxn],t;
void dfs(int n)
{
    lft[n]=++t;
    dep[n]=dep[fa[n]]+1;
    for(int e=first[n];e;e=nxt[e])if(vv[e]-fa[n])
    {
	fa[vv[e]]=n;
	dfs(vv[e]);
    }
    rht[n]=t;
}

int val[maxn];
int main()
{
    int n,m,i,j,k;
    int u,v,e=2;

    cin>>n>>m;

    for(i=1;i<=n;i++)
	scanf("%d",&val[i]);
    for(i=1;i<n;i++)
    {
	scanf("%d%d",&u,&v);
	nxt[e]=first[u],vv[e]=v,first[u]=e++;
	nxt[e]=first[v],vv[e]=u,first[v]=e++;
    }

    dfs(1);

    for(i=1;i<=m;i++)
    {
	scanf("%d",&j);
	if(j==1)
	{
	    scanf("%d%d",&j,&k);
	    upd(dep[j]&1,lft[j],k);
	    upd(dep[j]&1,rht[j]+1,-k);
	}
	else
	{
	    scanf("%d",&j);
	    long long ans=val[j]+get(dep[j]&1,lft[j])-get(1-(dep[j]&1),lft[j]);
	    int hehe=ans;
	    printf("%d\n",hehe);
	}
    }
}
