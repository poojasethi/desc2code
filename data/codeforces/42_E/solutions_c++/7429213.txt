#include<cstdio>
#include<algorithm>
#include<vector>
#define pii pair<int,int>
#define B second
#define A first
using namespace std;
int n,m,h[100001],chk,sv[100001],mp = 16,LV[100001],q;
pii dp[100001][17];
vector <pii> e[100001];
pair <int,pii> P[200001];
long long sum;
int H(int x){
    if(h[x] != x) h[x] = H(h[x]);
    return h[x];
}
void dfs(int now,int head,int lv){
    dp[now][0].A = head; LV[now] = lv;
    for(int i=0;i<e[now].size();i++)
        if(e[now][i].A != head){
            dp[e[now][i].A][0].B = e[now][i].B;
            dfs(e[now][i].A,now,lv+1);
        }
}
int main(){
    scanf("%d%d",&n,&m);
    for(int i=0,u,v,w;i<m;i++){
        scanf("%d%d%d",&u,&v,&w);
        P[i] = make_pair(w,pii(u,v));
    }
    sort(P,P+m);
    for(int i=1;i<=n;i++) h[i] = i;
    for(int i=0;i<m;i++){
        pii node = P[i].B;
        h[node.A] = H(node.A);
        h[node.B] = H(node.B);
        if(h[node.A] != h[node.B]){
            sum += P[i].A;
            h[h[node.A]] = h[node.B];
            e[node.A].push_back(pii(node.B,P[i].A));
            e[node.B].push_back(pii(node.A,P[i].A));
        }
    }
    for(int i=1;i<=n;i++){
        h[i] = H(i);
        if(sv[h[i]] == 0){
            chk++;
            sv[h[i]] = 1;
        }
    }
    if(chk == 1){
        dfs(1,0,0);
        for(int i=1;i<=mp;i++)
            for(int j=1;j<=n;j++){
                dp[j][i].A = dp[dp[j][i-1].A][i-1].A;
                dp[j][i].B = max(dp[dp[j][i-1].A][i-1].B,dp[j][i-1].B);
            }
    }
    scanf("%d",&q); LV[0] = -1;
    for(int i=0,u,v;i<q;i++){
        scanf("%d%d",&u,&v);
        if(chk > 2) printf("-1\n");
        else if(chk == 2)
            printf("%I64d\n",(H(u) == H(v) ? -1ll : sum));
        else{
            int maxl = 0;
            if(LV[u] < LV[v]) swap(u,v);
            for(int r = mp;r>=0;r--){
                if(LV[dp[u][r].A] >= LV[v]){
                    maxl = max(maxl,dp[u][r].B);
                    u = dp[u][r].A;
                }
            }
            for(int r = mp;r>=0 && u != v;r--){
                if(dp[u][r].A != dp[v][r].A){
                    maxl = max(maxl,dp[u][r].B);
                    maxl = max(maxl,dp[v][r].B);
                    u = dp[u][r].A; v = dp[v][r].A;
                }
            }
            if(u != v){
                maxl = max(maxl,dp[u][0].B);
                maxl = max(maxl,dp[v][0].B);
                u = dp[u][0].A; v = dp[v][0].A;
            }
            printf("%I64d\n",sum-maxl);
        }
    }
    return 0;
}