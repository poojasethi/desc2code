#include <iostream>
#include <algorithm>
#include <vector>
#define pb push_back
#define mp make_pair
#define PII pair <long long , long long>
#define f first
#define s second
using namespace std ;
const int maxn = 1000*100*2 + 152 ;
typedef long long ll ;
ll n , m , x , y , z , q , mark[maxn]  , k = 1 , par1[maxn] , sum[maxn] , h[maxn] ;
PII par[17][maxn] ;
vector <PII> v[maxn] ;
pair <ll , PII> edg[maxn] ;
void dfs (int x){
	mark[x] = k;
	for (int i=0 ; i<v[x].size() ; i++)
		if (!mark[v[x][i].f]){
			sum[k] += v[x][i].s ;
			par[0][v[x][i].f] = mp (x , v[x][i].s);
			h[v[x][i].f] = h[x]+1 ;
			dfs(v[x][i].f);
		}
}
int find_par (int x){
	if (x == par1[x])
		return x ;
	return par1[x] = find_par(par1[x]);
}
ll LCA (int x , int y){
	if (h[x] > h[y])
		swap (x , y);
	ll fa = h[y]-h[x] , jack = 0 , MAX = 0;
	for (int i=0 ; i<17 ; i++)
		if ((1<<i) & fa){
			MAX = max (MAX , par[i][y].s);
			y = par[i][y].f ;
		}
	for (int i=16 ; i>=0 ; i--)
		if (par[i][x].f != par[i][y].f){
			MAX = max (MAX , max(par[i][x].s , par[i][y].s));
			x = par[i][x].f ;
			y = par[i][y].f ;
		}
	if (x!=y)
		MAX = max(MAX , max(par[0][x].s , par[0][y].s));
	return MAX ;
}
int main(){
	cin >> n >> m ;
	for (int i=0 ; i<m ; i++)
		cin >> edg[i].s.f >> edg[i].s.s >> edg[i].f ;
	for (int i=1 ; i<=n ; i++)
		par1[i] = i ;
	sort (edg , edg+m);
	for (int i=0 ; i<m ; i++){
		int x = find_par(edg[i].s.f) , y = find_par(edg[i].s.s);
		if (x == y)
			continue ;
		v[edg[i].s.f].pb(mp(edg[i].s.s , edg[i].f));
		v[edg[i].s.s].pb(mp(edg[i].s.f , edg[i].f));
		par1[x] = y ;
	}
	for (int i=1 ; i<=n ; i++)
		if (!mark[i]){
			dfs (i);
			k++ ;
		}
	for (int i=1 ; i<17 ; i++)
		for (int j=1 ; j<=n ; j++)
			par[i][j] = mp (par[i-1][par[i-1][j].f].f , max(par[i-1][j].s , par[i-1][par[i-1][j].f].s)) ;
	cin >> q ;
	while (q--){
		cin >> x >> y ;
		if (k>3 || (k==3 && mark[x]==mark[y])){
			cout << -1 << endl ;
			continue ;
		}
		if (k == 3){
			cout << sum[1]+sum[2] << endl ;
			continue ;
		}
		ll jack = LCA (x , y);
		cout << sum[1]-jack << endl ;
	}
	return 0;
}
