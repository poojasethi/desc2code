#include <bits/stdc++.h>
using namespace std;

struct Edge
{
    int a, b, c;
};

const int MAXN = 100005;
Edge edges[MAXN * 2];
int fa[MAXN], sz[MAXN], d[MAXN];
int f0[MAXN], f1[MAXN];
long long ans;

bool comp(Edge e0, Edge e1)
{
    return e0.c < e1.c;
}

int GetFather(int now)
{
    if(fa[now] != 0) return GetFather(fa[now]);
    else return now;
}

int main() {

    int n, m, restn, qn, fn;

    // freopen("D:\\1.in", "r", stdin);
    // freopen("D:\\1.out", "w", stdout);

    scanf("%d%d", &n, &m);
    for(int i = 0; i < m; i ++) scanf("%d%d%d", &(edges[i].a), &(edges[i].b), &(edges[i].c));
    sort(edges, edges + m, comp);
    for(int i = 1; i <= n; i ++) sz[i] = 1;

    restn = n;
    for(int i = 0, x, y; i < m; i ++)
    if((x = GetFather(edges[i].a)) != (y = GetFather(edges[i].b)))
    {
        if(sz[x] > sz[y]) swap(x, y);
        sz[y] += sz[x];
        fa[x] = y;
        ans += (d[x] = edges[i].c);
        restn --;
    }

    scanf("%d", &qn);
    fn = 0;
    while(qn --)
    {
        int x0, x1, x;
        long long maxv;
        scanf("%d%d", &x0, &x1);
        fn ++;
        for(x = x0, maxv = 0; x > 0; maxv = max(maxv, (long long)d[x]), x = fa[x]) f0[x] = fn, f1[x] = maxv;
        for(x = x1, maxv = 0; x > 0 && f0[x] != fn; maxv = max(maxv, (long long)d[x]), x = fa[x]);
        if(restn > 2 || restn == 2 && f0[x] == fn) printf("-1\n");
        else if(restn == 2) printf("%I64d\n", ans);
        else printf("%I64d\n", ans - max(maxv, (long long)f1[x]));
    }

	return 0;
}
