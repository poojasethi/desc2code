#include<stdio.h>
#include<string.h>
#include<math.h>
#include<algorithm>
#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<string>
using namespace std;
typedef long long lld;
#define mp make_pair
#define X first
#define Y second
#define pb push_back
#define inf 0xfffffff
#define maxn 200010
struct Edge
{
    int v,s,next;
}edge[1000010];
int head[maxn];
int pos;
void insert(int x,int y,int s)
{
    edge[pos].v=y;
    edge[pos].s=s;
    edge[pos].next=head[x];
    head[x]=pos++;
}
struct E
{
    int x,y,s;
    void in()
    {
        scanf("%d %d %d",&x,&y,&s);
    }
}e[maxn];
bool cmp(E a,E b)
{
    return a.s < b.s;
}
int fa[maxn][20];
int find(int x)
{
    if(fa[x][0] != x)
        fa[x][0]=find(fa[x][0]);
    return fa[x][0];
}
int uunion(int x,int y,int s)
{
    int fx=find(x);
    int fy=find(y);
    if(fx == fy)
        return 0;
    fa[fx][0]=fy;
    insert(x,y,s);
    insert(y,x,s);
    return s;
}
int max_dep;
int dep[maxn];
lld big[maxn][20];
int topk;
bool vis[maxn];
void dfs(int now)
{
    vis[now]=true;
    max_dep=max(max_dep,dep[now]);
    for(int i=head[now];i;i=edge[i].next)
    {
        int v=edge[i].v;
        if(vis[v])
            continue;
        fa[v][0]=now;
        big[v][0]=edge[i].s;
        dep[v]=dep[now]+1;
        dfs(v);
    }
}
void buildpath(int n)
{
    topk=0;
    while((1<<topk) <= max_dep)
        topk++;
    for(int k=1;k<topk;k++)
        for(int i=1;i<=n;i++)
        {
            if(fa[i][k-1] != 0)
            {
                fa[i][k]=fa[fa[i][k-1]][k-1];
                int f=fa[i][k-1];
                big[i][k]=max(big[i][k-1],big[f][k-1]);
            }
        }
}
lld get_value(int x,int step)
{
    lld tmp=0;
    int k=topk-1;
    while(step)
    {
        while((1<<k) > step)
            k--;
        tmp=max(tmp,big[x][k]);
        x=fa[x][k];
        step-=(1<<k);
    }
    return tmp;
}
int findpa(int x,int step)
{
    int k=topk-1;
    while(step)
    {
        while((1<<k) > step)
            k--;
        x=fa[x][k];
        step-=(1<<k);
    }
    return x;
}
int findfa(int x,int y)
{
    int l=0;
    int r=min(dep[x],dep[y]);
    if(dep[x] < dep[y])
        y=findpa(y,dep[y]-dep[x]);
    if(dep[y] < dep[x])
        x=findpa(x,dep[x]-dep[y]);
    while(r-l > 1)
    {
        int m=(l+r)>>1;
        if(findpa(x,m) == findpa(y,m))
            r=m;
        else
            l=m;
    }
    if(findpa(x,l) == findpa(y,l))
        return findpa(x,l);
    else
        return findpa(x,r);
}
int belong[maxn];
int main()
{
    int n,m;
    scanf("%d %d",&n,&m);
    memset(head,0,sizeof(head));
    pos=1;
    for(int i=0;i<m;i++)
        e[i].in();
    sort(e,e+m,cmp);
    for(int i=1;i<=n;i++)
        fa[i][0]=i;
    lld ans=0;
    for(int i=0;i<m;i++)
        ans+=uunion(e[i].x,e[i].y,e[i].s);
    int total=0;
    for(int i=1;i<=n;i++)
    {
        belong[i]=find(i);
        if(belong[i] == i)
            total++;
    }
    memset(vis,false,sizeof(vis));
    max_dep=0;
    for(int i=1;i<=n;i++)
        if(!vis[i])
        {
            dep[i]=0;
            fa[i][0]=0;
            dfs(i);
        }
    buildpath(n);
    int Q;
    scanf("%d",&Q);
    while(Q--)
    {
        int x,y;
        scanf("%d %d",&x,&y);
        if(total == 1)
        {
            int f=findfa(x,y);
            lld tmp=0;
            tmp=max(tmp,get_value(x,dep[x]-dep[f]));
            tmp=max(tmp,get_value(y,dep[y]-dep[f]));
            printf("%I64d\n",ans-tmp);
        }
        else if(total == 2)
        {
            if(belong[x] == belong[y])
                printf("-1\n");
            else
                printf("%I64d\n",ans);
        }
        else
            printf("-1\n");
    }
    return 0;
}
