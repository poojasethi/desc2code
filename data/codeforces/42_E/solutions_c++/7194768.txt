#include<iostream>
#include<vector>
#include<string>
#include<cmath>
#include<algorithm>
#include<queue>
#include<stack>
#include<cstdlib>
#include<utility>
#include<map>
#include<set>
#include<fstream>
#include<iomanip>
#include<cstdio>
#include<cstring>
#include<complex>
#define PB push_back
#define F first
#define S second
#define X real()
#define Y imag()
#define MP make_pair
using namespace std;
typedef long long LL;
typedef unsigned long long ULL;
typedef double D;
typedef pair<long long,long long> PII;

const int maxn = 200*1000+2;

long long n,m,q,par[maxn],tmol,mstsum,h[maxn],p[maxn][25],mxval[maxn][25];
pair< long long , PII > yal[maxn];
vector< PII > adj[maxn];

int find(int x){
	if(par[x] == x)
		return x;
	return par[x] = find(par[x]);
}

bool uni(int x,int y){
	int fx = find(x) , fy = find(y);
	if(fx == fy)
		return false;
	tmol--;
	par[fx] = fy;
	return true;
}

void dfs(int x,int baba){
	p[x][0] = baba;
	for(int i = 1;i < 21; i++){
		int jad = p[x][i-1];
		p[x][i] = p[jad][i-1];
		mxval[x][i] = max( mxval[x][i-1] , mxval[jad][i-1] );
	}
	for(int i = 0;i < (int)adj[x].size(); i++){
		int next = adj[x][i].F;
		if(next == baba)
			continue;
		h[next] = h[x] + 1;
		mxval[next][0] = adj[x][i].S;
		dfs(next,x);
	}
}

int lca(int x,int y){
	// h[x] <= h[y]
	if(h[y] < h[x])
		swap(x,y);
	int d = h[y]-h[x];
	for(int i = 0;i < 21; i++)
		if((d>>i)&1)
			y = p[y][i];
	if(y == x)
		return x;
	for(int i = 20; i >= 0; i--)
		if(p[x][i] != p[y][i]){
			x = p[x][i];
			y = p[y][i];
		}
	return p[x][0];
}
long long output(int x,int jad){
	int d = h[x]-h[jad];
	long long ans = 0;
	for(int i = 0;i < 21; i++)
		if((d>>i)&1){
			ans = max(ans,mxval[x][i]);
			x = p[x][i];
		}
	return ans;
}

int main(){
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for(int i = 0;i < n; i++)
		par[i] = i;
	tmol = n;
	for(int i = 0;i < m; i++){
		int a,b,c;cin >> a >> b >> c;
		a--;b--;
		yal[i] = MP(c,MP(a,b));
	}
	sort(yal,yal+m);
	for(int i = 0;i < m; i++){
		int x = yal[i].S.F , y = yal[i].S.S;
		if(uni(x,y)){
			mstsum += yal[i].F;
			adj[x].PB(MP(y,yal[i].F));
			adj[y].PB(MP(x,yal[i].F));
		}
	}
	if(tmol == 1){
		memset(mxval,0,sizeof mxval);
		dfs(0,0);
	}
	cin >> q;
	for(int i = 0;i < q; i++){
		int a,b;cin >> a >> b;a--;b--;
		if(tmol >= 3){
			cout << -1 << endl;
			continue;
		}
		if(tmol == 2 && find(a) == find(b)){
			cout << -1 << endl;
			continue;
		}
		if(tmol == 2){
			cout << mstsum << endl;
			continue;
		}
		int jad = lca(a,b);
		cout << mstsum - max(output(a,jad),output(b,jad)) << endl;
	}
	return 0;
}






