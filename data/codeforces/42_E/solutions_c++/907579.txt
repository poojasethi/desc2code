#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

const int M = 234567;
const int N = 123456;
const int Q = 123456;

class Edge {
	public:
		int x, y, c;
		Edge(int _x=0, int _y=0, int _c=0) { x=_x; y=_y; c=_c; }
		bool operator<(const Edge &e) const {
			return c < e.c;
		}
		void read() { scanf("%d%d%d", &x, &y, &c); }
} e[M];

int g[N], siz[N];
int FIND(int x) { return g[x]==x?x:(g[x]=FIND(g[x])); }
vector<int> grp[N];
vector<pair<int, int> > query[N];
int ans[Q];
int qx[Q], qy[Q];

void UNION(int x, int y, int c, long long &total) {
	int A = FIND(x), B = FIND(y);
	if(A==B) return;
	total += c;
	if(siz[A] > siz[B]) { swap(x, y); swap(A, B); }
	
	for(int i=0;i<(int)grp[A].size();i++) {
		int obj = grp[A][i];
		grp[B].push_back(obj);
		for(int q=0;q<(int)query[obj].size();q++)
			if (FIND(query[obj][q].first) == B)
				ans[query[obj][q].second] = c;
	}

	g[A] = B;
	siz[B] += siz[A];
}

int getsize(int x, int y) {
	x = FIND(x);
	y = FIND(y);
	if(x==y) return siz[x];
	return siz[x]+siz[y];
}

int main(void) {
	int n, m, q;
	scanf("%d%d", &n, &m);
	for(int i=0;i<m;i++) e[i].read();
	sort(e, e+m);
	for(int i=1;i<=n;i++) { g[i] = i, siz[i] = 1; grp[i].push_back(i); }
	scanf("%d", &q);
	for(int i=0;i<q;i++) {
		int x, y;
		scanf("%d%d", &qx[i], &qy[i]);
		x=qx[i], y=qy[i];
		query[x].push_back(make_pair(y, i));
		query[y].push_back(make_pair(x, i));
		ans[i] = 0;
	}
	long long total = 0;
	for(int i=0;i<m;i++)
		UNION(e[i].x, e[i].y, e[i].c, total);
	for(int i=0;i<q;i++) {
		if (getsize(qx[i], qy[i]) < n) puts("-1");
		else printf("%I64d\n", total - ans[i]);
	}
	return 0;
}

