//In The Name Of God
#include<iostream>
#include<algorithm>
#include<cmath>
#include<string>
#include<vector>
#include<set>
#include<cstring>
#include<queue>
#include <stdio.h>
#include <conio.h>

#define inf 1e9+100;
#define pb push_back
#define M 1000000007;
#define pp pop_back
#define xx first
#define yy second
#define mp make_pair
using namespace std;

typedef long long ll;
const int maxn=1e5+1000;
const int maxm=1e5*2+1000;
//made in cin
int n;
int q;
int m;
pair<int,int> ask[maxn];
vector<pair<int,pair<int,int> > > mst;

int tedadmoalefe;
//made for LCA
int par[21][maxn];
int edge[21][maxn];
int lg[maxn];
//made in BFS
int baba[maxn];
int h[maxn];
bool mark[maxn];
//made in mst
int parmst[maxn];
vector<pair<int,int> > adj[maxn];
int zir[maxn];
ll ansmst;
long long LCA(ll x,ll y){
    int edgex=0;
    int edgey=0;
    while(h[x]!=h[y]){
        if(h[x]>h[y]){
            edgex=max(edge[lg[h[x]-h[y]]][x],edgex);
            x=par[lg[h[x]-h[y]]][x];
        }
        else{
            edgey=max(edge[lg[h[y]-h[x]]][y],edgey);
            y=par[lg[h[y]-h[x]]][y];
        }
    }
    if(x==y){
        return max(edgex,edgey);
    }
    for(int i=20;i>=0;i--){
        if(par[i][x]!=par[i][y]){
            edgex=max(edgex,edge[i][x]);
            edgey=max(edgey,edge[i][y]);
            x=par[i][x];
            y=par[i][y];
        }
    }
    edgex=max(edgex,edge[0][x]);
    edgey=max(edgey,edge[0][y]);
    return max(edgex,edgey);
}
void BFS(ll k){
    queue<int> bfs;
    mark[k]=true;
    bfs.push(k);
    while(!bfs.empty()){
        int x=bfs.front();
        bfs.pop();
        for(int i=0;i<adj[x].size();i++){
            int y=adj[x][i].xx;
            if(mark[y]==false){
                mark[y]=true;
                par[0][y]=x;
                edge[0][y]=adj[x][i].yy;
                h[y]=h[x]+1;
                baba[y]=baba[x];
                bfs.push(y);
            }
        }
    }
return;
}
void PREBFS(){
    for(int i=1;i<=n;i++){
        if(mark[i]==false){
            tedadmoalefe++;
            baba[i]=i;
            BFS(i);
        }
    }
    return;
}
void MST(){
    int p=0;
    while(p<mst.size()){
        int w=mst[p].xx;
        int x=mst[p].yy.xx;
        int y=mst[p].yy.yy;
        p++;
        queue<int> a;
        int a1=x;
        while(parmst[a1]!=0){
            a.push(a1);
            a1=parmst[a1];
        }
        int xp=a1;
        queue<int> b;
        int b1=y;
        while(parmst[b1]!=0){
            b.push(b1);
            b1=parmst[b1];
        }
        int yp=b1;
        if(xp!=yp){
            ansmst+=w;
            adj[x].pb(mp(y,w));
            adj[y].pb(mp(x,w));
            if(zir[xp]>zir[yp]){
                while(!b.empty()){
                    int tmp=b.front();
                    b.pop();
                    parmst[tmp]=xp;
                }
                parmst[yp]=xp;
                zir[xp]+=zir[yp]+1;
            }
            else{
                while(!a.empty()){
                    int tmp=a.front();
                    a.pop();
                    parmst[tmp]=yp;
                }
                parmst[xp]=yp;
                zir[yp]+=zir[xp]+1;
            }
        }
    }
    return ;
}
int main()
{
    ios_base::sync_with_stdio(false);
    for(int i=2;i<maxn;i++){
        lg[i]=lg[i/2]+1;
    }
    cin.tie();
    cout.tie();
    cin>>n;
    cin>>m;
    for(int i=0;i<m;i++){
        int v1,v2,w;
        cin>>v1>>v2>>w;
        mst.pb(mp(w,mp(v1,v2)));
    }
    sort(mst.begin(),mst.end());
    cin>>q;
    for(int i=0;i<q;i++){
        cin>>ask[i].xx>>ask[i].yy;
    }
    MST();
    PREBFS();
    for(int j=1;j<21;j++){
        for(int i=1;i<=n;i++){
            par[j][i]=par[j-1][par[j-1][i]];
            edge[j][i]=max(edge[j-1][i],edge[j-1][par[j-1][i]]);
        }
    }
    for(int i=0;i<q;i++){
        int x=ask[i].xx;
        int y=ask[i].yy;
        if(tedadmoalefe>2){
            cout<<"-1"<<endl;
            continue;
        }
        if(tedadmoalefe==2&&baba[x]==baba[y]){
            cout<<"-1"<<endl;
            continue;
        }
        if(tedadmoalefe==2&&baba[x]!=baba[y]){
            cout<<ansmst<<endl;
            continue;
        }
        cout<<ansmst-LCA(x,y)<<endl;
    }

return 0;
}

		 		  		  	   	  		     			 	