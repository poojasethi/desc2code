/*                                            In The Name Of GOD                               */
//Name : Seyed Sobhan Miryoosefi
# include <iostream>
# include <iomanip>
# include <fstream>
# include <string>
# include <algorithm>
# include <vector>
# include <queue>
# include <map>
# include <set>
# include <cstring>

# define PII pair<long long,long long>
# define FF first
# define SS second
# define LL long long
# define PB push_back
using namespace std;
const int MAX_N=100*1000+10;//Long long
const int MAX_P=20;

LL N,M,Comp,Ans,rank[MAX_N];
bool mrk[MAX_N];
PII LCA[MAX_N][MAX_P];
vector<PII> adj[MAX_N];
 
struct Edge
{
	LL a,b,w;
	Edge(){}
	Edge(LL a=0,LL b=0,LL w=0):a(a),b(b),w(w){}
	bool operator <(const Edge &Tmp)const
	{return w<Tmp.w;}
};
vector<Edge>E;
struct Type_DSU
{
	int par[MAX_N];
	int rank[MAX_N];
	void make_set(int x)
	{par[x]=x;rank[x]=0;Comp++;}
	int findpar(int x)
	{return par[x]=(par[x]==x?x:findpar(par[x]));}
	bool merge(int x,int y)
	{
		x=findpar(x);
		y=findpar(y);
		if(x==y)
			return false;
		Comp--;
		if(rank[x]<rank[y])
			swap(x,y);
		par[y]=x;
		rank[x]+=(rank[x]==rank[y]);
		return true;
	}
}DSU;

PII Par(int x,int lvl)
{
	LL MX=0;
	for(int i=0;i<MAX_P;i++)
		if((lvl>>i)&1)
		{
			MX=max(MX,LCA[x][i].SS);
			x=LCA[x][i].FF;
		}
	return PII(x,MX);
}

int Solve(int x,int y)
{
	LL MX=0;
	if(rank[x]<rank[y])
		swap(x,y);
	PII Tmp=Par(x,rank[x]-rank[y]);
	x=Tmp.FF;MX=Tmp.SS;
	if(x==y)
		return MX;
	for(int i=MAX_P-1;i>=0;i--)
		if(LCA[x][i].FF!=LCA[y][i].FF)
		{
			MX=max(MX,max(LCA[x][i].SS,LCA[y][i].SS));
			x=LCA[x][i].FF;
			y=LCA[y][i].FF;
		}
	MX=max(max(LCA[x][0].SS,LCA[y][0].SS),MX);
	return MX;
}

void DFS(int x)
{
	mrk[x]=true;
	for(int i=0;i<(int)adj[x].size();i++)
	{
		LL v=adj[x][i].FF,w=adj[x][i].SS;
		if(mrk[v])
			continue;
		LCA[v][0]=PII(x,w);
		for(int i=1;i<MAX_P;i++)
			LCA[v][i].FF=LCA[LCA[v][i-1].FF][i-1].FF,
			LCA[v][i].SS=max(LCA[v][i-1].SS,LCA[LCA[v][i-1].FF][i-1].SS);
		rank[v]=rank[x]+1;
		DFS(v);
	}
}


void INPUT()
{
	ios::sync_with_stdio(false);
	cin >> N >> M;
	for(int i=1;i<=N;i++)
			DSU.make_set(i);
	for(int i=0;i<M;i++)
	{
		LL a,b,w;
		cin >> a >> b >> w;
		E.PB(Edge(a,b,w));
	}
}

void MST()
{
	sort(E.begin(),E.end());
	for(int i=0;i<(int)E.size();i++)
	{
		LL a=E[i].a,b=E[i].b,w=E[i].w;	
		if(DSU.merge(a,b))
		{
			Ans+=w;
			adj[a].PB(PII(b,w));
			adj[b].PB(PII(a,w));
		}
	}
}

void OUTPUT()
{
	int Q;
	cin >> Q;
	while(Q--)
	{
		int a,b;
		cin >> a >> b;
		if(Comp>=3)
			cout<<-1<<endl;
		else if(Comp==2)
			cout<<(DSU.findpar(a)==DSU.findpar(b)?-1:Ans)<<endl;
		else
			cout<<Ans-Solve(a,b)<<endl;;	
	}
}

int main()
{
	INPUT();
	MST();
	DFS(1);
	OUTPUT();	
	return 0;
}
