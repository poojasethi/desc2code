#include <cstdio>
#include <algorithm>
const int N=200;
char pos[N][10];
int stre[N],def[N],atk[N],s[N],n,m,ans,cnt1,cnt2,sums[N],sumatk[N],tmp;
bool check()
{
	std::sort(stre+1,stre+1+n);
	for (int i=1,j=1;i<=n;++i,++j) {
		while (j <= m && s[j] < stre[i]) ++j;
		if (j > m) return 0;
	}
	return 1;
}
int main()
{
	scanf("%d%d\n",&n,&m);
	for (int i=1;i<=n;++i) {
		scanf("%s %d\n",pos[i],stre+i);
		if (pos[i][0]=='D') stre[i]++,def[++cnt2]=stre[i];
		else atk[++cnt1]=stre[i];
	}
	for (int i=1;i<=m;++i) scanf("%d",s+i);
	std::sort(s+1,s+1+m);
	std::sort(atk+1,atk+1+cnt1);
	for (int i=m;i;--i) sums[i]+=sums[i+1]+s[i];
	for (int i=1;i<=n;++i) sumatk[i]+=sumatk[i-1]+atk[i];
	for (int i=1,j=1;i<=cnt1;++i,++j) {
		while (j <= m && s[j] < atk[i]) ++j;
		if (j<=m) ans=std::max(ans,sums[m-i+1]-sumatk[i]);
		else break;
	}
	if (check()) {
		std::sort(def+1,def+1+cnt2);
		for (int i=1,j=1;i<=cnt2;++i,++j) {
			while (j <= m && s[j] < def[i]) ++j;
			tmp+=s[j];
		}
		ans=std::max(ans,sums[1]-tmp-sumatk[cnt1]);
	}
	printf("%d\n",ans);
}
