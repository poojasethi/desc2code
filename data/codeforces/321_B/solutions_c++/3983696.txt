#include <iostream>
#include <string>
#include <set>
#include <algorithm>
using namespace std;
int main(){
	int n,m;
	cin >> n >> m;
	multiset<int> atk,def,fox;
	for(int i=0;i<n;i++){
		string s;
		int hoge;
		cin >> s >> hoge;
		if(s=="ATK") atk.insert(hoge);
		if(s=="DEF") def.insert(hoge);
	}
	for(int i=0;i<m;i++){
		int hoge;
		cin >> hoge;
		fox.insert(hoge);
	}
	multiset<int>::iterator it,it2;
	multiset<int>::reverse_iterator rit,rit2;
	//ignoer def
	int ans1=0;
	for(it=atk.begin(),rit=fox.rbegin();it!=atk.end();it++,rit++){
		if(rit==fox.rend() || (*rit)<(*it)) break;
		ans1+=((*rit)-(*it));
	}
	//extinct
	bool flag=true;
	for(it=def.begin();it!=def.end();it++){
		it2=upper_bound(fox.begin(),fox.end(),(*it));
		if( it2 == fox.end()){
			flag=false;
			break;
		}
		fox.erase(it2);
	}
	for(rit=atk.rbegin(),rit2=fox.rbegin();rit!=atk.rend();rit++,rit2++){
		if( rit2==fox.rend() || (*rit) > (*rit2) ){
			flag=false;
			break;
		}
	}
	int ans2=0;
	if(flag){
		for(it=fox.begin();it!=fox.end();it++){
			ans2+=(*it);
		}
		for(it=atk.begin();it!=atk.end();it++){
			ans2-=(*it);
		}
	}
	cout << max(ans1,ans2);
	return 0;
}