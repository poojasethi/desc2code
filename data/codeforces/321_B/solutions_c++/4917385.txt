#include<iostream>
#include<algorithm>

using namespace std;

int n,m,fox[100],attack[100],def[100],nA=0,nD=0;
bool used[100];

int check(int x)
{
	for(int i=0;i<m;i++)
	{
		if(fox[i]>=x&&!used[i])
		{
			used[i] = 1;
			return i+1;
		}
	}
	return 0;
}

int attack_all()
{
	int i,sum=0,total_def=0;
	for(i=nD-1;i>=0;i--) 
	{
		int card = check(def[i]);
		if(!card||fox[card-1]==def[i]) return 0;
		total_def += fox[card-1];
	} 
	for(i=0;i<nA;i++) if(!check(attack[i])) return 0;
	for(i=0;i<m;i++) sum += fox[i];
	for(i=0;i<nA;i++) sum -= attack[i];
	sum -= total_def;
	return sum;
}

int attack_part()
{
	int i,j,sum=0;
	for(i=m-1,j=0;i>=0&&j<nA;i--,j++)
	{
		if(fox[i]<attack[j]) break;
		sum += fox[i] - attack[j];
	}
	return sum;
}

int main()
{
	int i,j,ans=0;
	string pos;
	cin >> n >> m;
	for(i=0;i<n;i++)
	{
		cin >> pos;
		if(pos=="ATK")
			cin >> attack[nA++];
		else
			cin >> def[nD++];
	}
	for(i=0;i<m;i++)
		cin >> fox[i];
	sort(attack,attack+nA);
	sort(def,def+nD);
	sort(fox,fox+m);
	ans = max(attack_all(),attack_part());
	cout << ans << endl;
	return 0;
}