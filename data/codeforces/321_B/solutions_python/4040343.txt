from sys import stdin

n, m = map(int, stdin.readline().split())

Jiro = [stdin.readline().split() for i in xrange(n)]
JiroATK = []
JiroDEF = []
for entry in Jiro:
	if entry[0] == 'ATK':
		JiroATK.append(int(entry[1]))
	else:
		JiroDEF.append(int(entry[1]))
nATK = len(JiroATK)
nDEF = len(JiroDEF)

Ciel = [int(stdin.readline()) for i in xrange(m)]

Jiro
JiroATK.sort()
JiroDEF.sort()
Ciel.sort()

#Case 1: Don't go after any DEF cards############
if nATK >= m:
	CielCase1 = Ciel[:]
	JiroCase1 = JiroATK[:m]
else:
	CielCase1 = Ciel[-nATK:]
	JiroCase1 = JiroATK[:]
size = min(nATK, m)

ansCase1 = 0
K = 0
while K+1 <= size:
	for i in xrange(K+1):
		if CielCase1[size-1-i] < JiroCase1[K-i]:
			break
	else: #if no break
		K += 1
		ansCase1 = max(ansCase1, sum(CielCase1[-K:]) - sum(JiroCase1[:K]))
		continue
	break
#################################################

#Case 2: Kill all cards##########################
ansCase2 = -1
if m > n: #Otherwise useless
	CielCase2 = Ciel[:]
	flag = True
	for i in xrange(nDEF):
		for j in xrange(m):
			if CielCase2[j] > JiroDEF[i]:
				CielCase2[j] = -1
				break
		else: #Some DEF card cannot be killed
			flag = False
			break
	if flag:
		CielCase2 = sorted(filter(lambda x: x >= 0, CielCase2))
		for i in xrange(-1, -nATK-1, -1):
			if CielCase2[i] < JiroATK[i]:
				break
		else:
			ansCase2 = sum(CielCase2) - sum(JiroATK)
#################################################

print max(ansCase1, ansCase2)
