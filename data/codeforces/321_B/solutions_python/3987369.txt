import sys

def _int(i):
    try:
        return int(i)
    except:
        return i
inp = [map(_int, i.split(' ')) for i in sys.stdin.read().strip().splitlines()]

n, m = inp[0]
jiro = [tuple(i) for i in inp[1:n+1]]
ciel = [i[0] for i in inp[n+1:]]

ciel.sort()
jiro.sort()

alt_ciel = ciel[:]
alt_jiro = filter(lambda x: x[0] != 'DEF', jiro)

for i in filter(lambda x: x[0] == 'DEF', jiro):
    f = False
    for j in xrange(len(alt_ciel)):
        if i[1] < alt_ciel[j]:
            alt_ciel = alt_ciel[:j] + alt_ciel[j+1:]
            f = True
            break
    if not f:
        alt_ciel = None
        break

def find(_jiro, _ciel):
    jiro = _jiro[:]
    ciel = _ciel[:]
    
    res = 0
    ciel_attacks = ciel[::-1]
    jiro_attacks = [x[1] for x in jiro if x[0] == 'ATK'][::-1]

    if jiro_attacks:
      for i in xrange(len(jiro_attacks)):
        _res = 0
        j, I = 0, i
        skips = False
        while j < len(ciel_attacks) and I < len(jiro_attacks):
            if ciel_attacks[j] >= jiro_attacks[I]:
                _res += ciel_attacks[j] - jiro_attacks[I]
                I += 1
                j += 1
            else:
                skips = True
                I += 1
        if not skips and i == 0 and I == len(jiro_attacks) and not filter(lambda x: x[0] == 'DEF', jiro):
            _res += sum(ciel_attacks[j:])
        res = max(res, _res)
    elif not jiro:
        res = max(res, sum(ciel_attacks))

    return res

res = find(jiro, ciel)
if alt_ciel:
    res = max(res, find(alt_jiro, alt_ciel))

sys.stdout.write(str(res))
