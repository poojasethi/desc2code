atk = []
_def = []
my = []

def findFirstLargerThan(v, val):
    for i in range(len(v)):
        if v[i] > val:
            return i
    return -1

def findFirstLargerOrQualsTo(v, val):
    for i in range(len(v)):
        if v[i] >= val:
            return i
    return -1

def removeAt(v, pos):
    ret = []
    for i in range(len(v)):
        if i != pos:
            ret.append(v[i])
    return ret

def killAll():
    global my
    for i in range(len(_def)):
        p = findFirstLargerThan(my, _def[i])
        if p == -1:
            return 0
        my = removeAt(my, p)
    ret = 0
    for i in range(len(atk)):
        p = findFirstLargerOrQualsTo(my, atk[i])
        if p == -1:
            return 0
        ret += my[p] - atk[i]
        my = removeAt(my, p)
    for i in my:
        ret += i
    return ret

def main():
    ans = 0
    n, m = map(int, raw_input().split())
    for i in range(n):
        s = raw_input().split(" ")
        if s[0] == "ATK":
            atk.append(int(s[1]))
        else:
            _def.append(int(s[1]))
    for i in range(m):
        s = int(raw_input())
        my.append(s)
    atk.sort()
    _def.sort()
    my.sort()
    for i in range(1, min(len(atk), len(my)) + 1):
        t = 0
        for j in range(i):
            t += max(0, my[j + len(my) - i] - atk[j])
        ans = max(ans, t)
    ans = max(ans, killAll())
    print ans
    
main()
