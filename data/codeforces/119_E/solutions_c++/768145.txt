#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

const int MaxN = 1200;
const double oo = 1e100;
const double eps = 1e-8;
const int ord[][4] = { { 0, 1, 3, 2 }, { 0, 2, 3, 1 }, { 1, 2, 3, 0 } };
double A, B, C;
double M[3][3];

int sgn(double x)
{
    return x < -eps ? -1 : x > eps;
}

int dbcmp(double x, double y)
{
    return sgn(x - y);
}

double sqr(double x)
{
    return x * x;
}

struct Point
{
    double x, y, z;
    Point()
    {
    }
    Point(double x, double y, double z) :
            x(x), y(y), z(z)
    {
    }
    Point operator+(const Point& p) const
    {
        return Point(x + p.x, y + p.y, z + p.z);
    }
    Point operator-(const Point& p) const
    {
        return Point(x - p.x, y - p.y, z - p.z);
    }
    double operator*(const Point& p) const
    {
        return x * p.y - y * p.x;
    }
    Point operator*(const double& d) const
    {
        return Point(x * d, y * d, z * d);
    }
    Point operator/(const double& d) const
    {
        return Point(x / d, y / d, z / d);
    }
    bool operator<(const Point& p) const
    {
        if (sgn(y - p.y)) return y < p.y;
        else return x < p.x;
    }
    Point operator^(const Point& p) const
    {
        return Point(y * p.z - z * p.y, z * x - x * p.z, x * p.y - y * p.x);
    }
    int operator&(const Point& p) const
    {
        return sgn(x * p.x + y * p.y + z * p.z);
    }
    double norm() const
    {
        return hypot(x, y);
    }
    double norm2() const
    {
        return x * x + y * y;
    }
    void init()
    {
        scanf("%lf%lf%lf", &x, &y, &z);
    }
} p[MaxN], tp[MaxN];
int n, m;

int xmult(const Point& p1, const Point& p2, const Point& p)
{
    return sgn((p1 - p) * (p2 - p));
}

void read()
{
    for (int i = 0; i < n; i++)
        tp[i].init();
}

void rotate()
{
    double x[3];
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < 3; j++)
            x[j] = M[j][0] * p[i].x + M[j][1] * p[i].y + M[j][2] * p[i].z;
        p[i].x = x[0];
        p[i].y = x[1];
        p[i].z = x[2];
    }
}

void getM(double a, double b, double& m11, double& m12, double& m21, double& m22)
{
    m11 = m22 = b / hypot(a, b);
    m21 = a / hypot(a, b);
    m12 = -m21;
}

void init()
{
    for (int i = 0; i < n; i++)
        p[i] = tp[i];
    if (sgn(A))
    {
        memset(M, 0, sizeof(M));
        M[2][2] = 1;
        getM(A, B, M[0][0], M[0][1], M[1][0], M[1][1]);
        rotate();
        B = hypot(A, B);
    }
    if (sgn(B))
    {
        memset(M, 0, sizeof(M));
        M[0][0] = 1;
        getM(B, C, M[1][1], M[1][2], M[2][1], M[2][2]);
        rotate();
        C = hypot(B, C);
    }
}

struct Line
{
    Point a, b;
    Line()
    {
    }
    Line(const Point& a, const Point& b) :
            a(a), b(b)
    {
    }
};

struct Circle
{
    Point o;
    double r;
} cir;

inline void CircleCenter(Point p0, Point p1, Point p2, Point &cp)
{
    double a1 = p1.x - p0.x, b1 = p1.y - p0.y, c1 = (sqr(a1) + sqr(b1)) / 2;
    double a2 = p2.x - p0.x, b2 = p2.y - p0.y, c2 = (sqr(a2) + sqr(b2)) / 2;
    double d = a1 * b2 - a2 * b1;
    cp.x = p0.x + (c1 * b2 - c2 * b1) / d;
    cp.y = p0.y + (a1 * c2 - a2 * c1) / d;

}

inline bool check(const Point &a)
{
    return (a - cir.o).norm2() <= cir.r + eps;
}

inline void doit(Point* p, int n)
{
    cir.r = 0;
    cir.o = Point(0, 0, 0);
    srand(time(NULL));
    random_shuffle(p, p + n);
    for (int i = 0; i < n; ++i)
        if (!check(p[i]))
        {
            cir.o = p[i];
            cir.r = 0;
            for (int j = 0; j < i; ++j)
                if (!check(p[j]))
                {
                    cir.o = (p[i] + p[j]) / 2;
                    cir.r = (cir.o - p[i]).norm2();
                    for (int k = 0; k < j; ++k)
                        if (!check(p[k]))
                        {
                            CircleCenter(p[i], p[j], p[k], cir.o);
                            cir.r = (cir.o - p[i]).norm2();
                        }
                }
        }
    printf("%.10f\n", sqrt(fabs(cir.r)));
}

int main()
{
#ifdef __FISH__
    freopen("in.txt", "r", stdin);
#endif
    while (scanf("%d%d", &n, &m) == 2)
    {
        read();
        while (m--)
        {
            scanf("%lf%lf%lf", &A, &B, &C);
            init();
            doit(p, n);
        }
#ifdef __FISH__
        puts("");
#endif
    }

    return 0;
}
