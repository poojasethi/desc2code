#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>


 
using namespace std;
 
const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;
 
#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
int N,M;
double xx[910][3];
double x[910][2];
int n[3];
double ort[2][3];
double calc(double c1 , double c2){
	double res = 0.0;
	double dx , dy;
	FOR(i,0,N){
		dx = x[i][0]-c1;
		dy = x[i][1]-c2;
		res = max(res,dx*dx+dy*dy);
	}
	return res;
}
double ternary2(double c1){
	double lo = -20000, hi = 20000;
	FOR(i,0,40){
		double m1 = lo + (hi - lo) * 0.45;
		double m2 = lo + (hi - lo) * 0.55;
		double f1 = calc(c1,m1);
		double f2 = calc(c1,m2);
		if(f1 < f2)hi = m2;
		else lo = m1;
	}
	return calc(c1,lo + (hi - lo) * 0.5);
}
double ternary1(){
	double lo = -20000, hi = 20000;
	FOR(i,0,40){
		double m1 = lo + (hi - lo) * 0.45;
		double m2 = lo + (hi - lo) * 0.55;
		double f1 = ternary2(m1);
		double f2 = ternary2(m2);
		if(f1 < f2)hi = m2;
		else lo = m1;
	}
	return ternary2(lo + (hi - lo) * 0.5);
}
int main(){
	scanf("%d%d",&N,&M);
	FOR(i,0,N)FOR(j,0,3)scanf("%lf",&(xx[i][j]));
	while(M--){
		FOR(i,0,3)scanf("%d",n+i);
		int O = 0;
		FOR(i,0,2)FOR(j,0,3)ort[i][j]=0.0;
		FOR(i,0,3)if(n[i]==0){
			ort[O++][i]=1.0;
		}
		if(O==0){
			ort[0][0]=n[2];
			ort[0][2]=-n[0];
			ort[1][1]=n[2];
			ort[1][2]=-n[1];
			O = 2;
		} else if(O==1){
			if(n[0]==0){
				ort[1][1]=n[2];
				ort[1][2]=-n[1];
			} else if(n[1]==0){
				ort[1][0]=n[2];
				ort[1][2]=-n[0];
			} else {
				ort[1][0]=n[1];
				ort[1][1]=-n[0];
			}
		}
		FOR(i,0,2){
			double len = 0;
			FOR(j,0,3)len += ort[i][j]*ort[i][j];
			len = sqrt(len);
			FOR(j,0,3)ort[i][j] /= len;
			if(i==0){
				double skal = 0;
				FOR(j,0,3)skal+= ort[0][j]*ort[1][j];
				FOR(j,0,3)ort[1][j]-=skal*ort[0][j];
			}
		}
		FOR(i,0,N){
			FOR(d,0,2){
				x[i][d] = 0;
				FOR(j,0,3)x[i][d]+=xx[i][j]*ort[d][j];
			}
		}
		printf("%.10lf\n",sqrt(ternary1()));
	}
	return 0;
}
