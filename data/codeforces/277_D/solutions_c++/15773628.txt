#include <bits/stdc++.h>
using namespace std;
#define xx first
#define yy second
#define rep(i, n) for(int i = 0;i < (n); ++i)
#define rep1(i, n) for(int i = 1; i <= (n); ++i)
typedef double db;
#define double long double
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
const int N = 1010, T = 2020;
struct P{
    int s[2], t[2];
    db f;
    inline void read(){ scanf("%d%d%d%d%lf", &s[0], &s[1], &t[0], &t[1], &f); }
    inline double operator - (const P& o) const { return (1 - o.f) * (t[1] + o.t[1]) + (1 - f) * o.f * t[1]; }
    inline bool operator < (const P& o) const { return *this - o < o - *this; }
};
P p[N];
pdd dp[N][T];
int n, t;
int main(){
    while(scanf("%d%d", &n, &t) == 2){
        rep1(i, n) p[i].read();
        sort(p + 1, p + 1 + n);
        rep(i, n + 1) rep(j, t + 1) dp[i][j] = pdd(0.0, 0.0);
        rep1(i, n) rep(j, t + 1){
            dp[i][j] = max(dp[i][j], dp[i - 1][j]);
            if(j >= p[i].t[0]) {
                const pdd& u = dp[i - 1][j - p[i].t[0]];
                dp[i][j] = max(dp[i][j], pdd(u.xx + p[i].s[0], u.yy - p[i].t[0]));
            }
            if(j >= p[i].t[0] + p[i].t[1]) {
                int tj = j - p[i].t[0] - p[i].t[1];
                const pdd& u = dp[i - 1][tj];
                dp[i][j] = max(dp[i][j], pdd(u.xx + p[i].s[0] + p[i].s[1] * (1 - p[i].f), p[i].f * (u.yy - p[i].t[0]) + (1 - p[i].f) * (-tj - p[i].t[0] - p[i].t[1])));
            }
        }
        pdd ans(0.0, 0.0);
        rep(i, t + 1) ans = max(ans, dp[n][i]);
        printf("%.15f %.15f\n", (db)ans.xx, (db)-ans.yy);
    }
    return 0;
}
	     	 	 	   	 								 				