#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<iostream>
using namespace std;
int n,T;
#define N 3000
struct problem{
	int small,large,t1,t2;
	long double p;
	void read(){
		scanf("%d%d%d%d",&small,&large,&t1,&t2);
		double P;
		scanf("%lf",&P);
		p=P;
	}
	bool operator<(const problem&rhs)const{
		return p*t2+p*rhs.p*rhs.t2<rhs.p*rhs.t2+p*rhs.p*t2;
	}
}A[N];
struct expect{
	long double x,y;
}f[N];
const long double EPS=1e-8;
expect calc(long double a,long double b,long double c,long double d){
	if(fabs(a-c)<=EPS)
		return (expect){a,min(b,d)};
	else{
		if(a>c)return (expect){a,b};
		else return (expect){c,d};
	}
}
int pos[N],id[N],tot,time[N];
int main(){
	scanf("%d%d",&n,&T);
	for(int i=1;i<=n;i++)
		A[i].read();
	sort(A+1,A+1+n);
	for(int i=1;i<=T;i++)
		f[i].y=1e9;
	for(int i=1;i<=n;i++){
		for(int j=T;j>=1;j--){
			if(j>=A[i].t1){
				long double x=f[j-A[i].t1].x+A[i].small,y=f[j-A[i].t1].y+A[i].t1;
				f[j]=calc(x,y,f[j].x,f[j].y);
			}
			if(j>=A[i].t2+A[i].t1){
				int u=j-A[i].t2-A[i].t1;
				long double x=f[u].x+A[i].small+A[i].large*(1-A[i].p),y=(A[i].p*f[u].y+(1-A[i].p)*(j-A[i].t1))+A[i].t1;
				f[j]=calc(x,y,f[j].x,f[j].y);
			}
		}
	}
	for(int i=1;i<=T;i++)
		f[0]=calc(f[0].x,f[0].y,f[i].x,f[i].y);
	printf("%.9f %.9f\n",(double)f[0].x,(double)f[0].y);
}
