#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
long double DP[10005],dp2[10005],dp[10005],DP2[10005],ANS;
int n,m,i,j;
double X;
const long double eps=1e-13;
struct node {int ss,sl,ts,tl; long double pf;} t[10005];
int cmp(node i,node j) {return (j.tl+i.tl)*(1-j.pf)+i.tl*j.pf*(1-i.pf)<(i.tl+j.tl)*(1-i.pf)+j.tl*i.pf*(1-j.pf);}
int main()
{
    scanf("%d%d",&n,&m);
    for (i=1; i<=n; i++) {scanf("%d%d%d%d%lf",&t[i].ss,&t[i].sl,&t[i].ts,&t[i].tl,&X); t[i].pf=X;}
    sort(t+1,t+n+1,cmp);
    for (i=1; i<=n; i++)
    {
        for (j=0; j<=m; j++) DP[j]=dp[j],DP2[j]=dp2[j];
        for (j=t[i].ts; j<=m; j++)
        {
            if (DP[j]<dp[j-t[i].ts]+t[i].ss-eps)
            {
                DP[j]=dp[j-t[i].ts]+t[i].ss;
                DP2[j]=dp2[j-t[i].ts]+t[i].ts;
            } else
              if (DP[j]<dp[j-t[i].ts]+t[i].ss+eps)
                DP2[j]=min(DP2[j],dp2[j-t[i].ts]+t[i].ts);
        }
        for (j=t[i].ts+t[i].tl; j<=m; j++)
        {
            if (DP[j]<dp[j-t[i].ts-t[i].tl]+t[i].ss+t[i].sl*(1-t[i].pf)-eps)
            {
                DP[j]=dp[j-t[i].ts-t[i].tl]+t[i].ss+t[i].sl*(1-t[i].pf);
                DP2[j]=(dp2[j-t[i].ts-t[i].tl]+t[i].ts)*t[i].pf+(1-t[i].pf)*j;
            } else
              if (DP[j]<dp[j-t[i].ts-t[i].tl]+t[i].ss+t[i].sl*(1-t[i].pf)+eps)
              DP2[j]=min(DP2[j],(dp2[j-t[i].ts-t[i].tl]+t[i].ts)*t[i].pf+(1-t[i].pf)*j);
        }
        for (j=0; j<=m; j++) {dp[j]=DP[j]; dp2[j]=DP2[j];}
    }
    ANS=dp2[m];
    for (j=m-1; j>=0; j--) if (dp[j]+eps<dp[m]) break;
    for (i=j+1; i<=m; i++) ANS=min(ANS,dp2[i]);
    printf("%.10f %.10f\n",(double)dp[j+1],(double)ANS);
    return 0;
}
