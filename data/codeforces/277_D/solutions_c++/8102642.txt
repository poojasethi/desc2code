#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#include <iomanip>
using namespace std;
typedef long double LD;
const int Maxn=1005,Maxt=1605;
int n,t;

struct info{
    LD p,f;
    info(){}
    info(LD p,LD f):p(p),f(f){}
    bool operator <(const info &rhs)const{
        static const LD eps=1e-10;
        return fabs(p-rhs.p)>eps?p<rhs.p:f>rhs.f;
    }
}g[Maxt];

template <class T>
inline void gmax(T &x,const T &y) {
    if (x<y) x=y;
}

struct Task{
    int s1,s2,t1,t2;
    LD f;
    void init() {
        cin>>s1>>s2>>t1>>t2>>f;
    }
    bool operator <(const Task &rhs)const{
        return t2*(1-f)*rhs.f+(t2+rhs.t2)*(1-rhs.f)<
                rhs.t2*(1-rhs.f)*f+(t2+rhs.t2)*(1-f);
    }
    void add() {
        for (int j=t;j>=1;j--) {
            if (j>=t1) gmax(g[j],info(g[j-t1].p+s1,g[j-t1].f+t1));
            if (j>=t1+t2) {
                const info &i=g[j-t1-t2];
                gmax(g[j],info(i.p+s1+s2*(1-f),i.f*f+t1+(1-f)*(j-t1)));
            }
        }
    }
}task[Maxn];

int main() {
    cin>>n>>t;
    int N=0;
    for (int i=1;i<=n;i++) task[i].init();
    sort(task+1,task+n+1);
    for (int i=1;i<=n;i++) task[i].add();
    info ans=info(0,0);
    for (int i=1;i<=t;i++) gmax(ans,g[i]);
    cout<<fixed<<showpoint;
    cout<<setprecision(10)<<ans.p<<' '<<ans.f<<endl;
    return 0;
}
