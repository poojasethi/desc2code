import collections
line = raw_input().split()
n = int(line[0])
m = int(line[1])
line = raw_input().split()
d = {}
ans = {}

neighbor = [[] for i in range(n + 1)]
c_v = [0 for i in range(n + 1)]

for i in range(1, n + 1):
    k = int(line[i - 1])
    c_v[i] = k
    if d.has_key(k):
        d[k].append(i)
    else:
        d[k] = [i]

for i in range(m):
    line = raw_input().split()
    a = int(line[0])
    b = int(line[1])
    neighbor[a].append(b)
    neighbor[b].append(a)

for key in d.keys():
    value = d[key]
    for v in value:
        neigh = neighbor[v]
        for nei in neigh:
            if ans.has_key(key) and c_v[nei] <> key:
                va = ans[key]
                if not c_v[nei] in va:
                    ans[key].append(c_v[nei])
            elif c_v[nei] <> key:
                ans[key] = [c_v[nei]]

oans = collections.OrderedDict(sorted(ans.items()))
m = 0
a = 0

for key in oans.keys():
    value = oans[key]
    if len(value) > m:
        a = key
        m = len(value)
        
if m <> 0:
    print a
else:
    c_v.sort()
    print c_v[1]
