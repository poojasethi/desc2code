inp = raw_input().split()
n, m = int(inp[0]), int(inp[1])
max_diversity = {}
col = [int(x) for x in raw_input().split()]
colors = {}

for i in range(len(col)):
    if col[i] not in max_diversity: max_diversity[col[i]] = {}
    
    colors[i + 1] = col[i]

Graph = {x + 1 : {} for x in range(n)}
for i in range(m):
    t = raw_input().split()
    a, b = int(t[0]), int(t[1])
    Graph[a][b] = 1
    Graph[b][a] = 1




for vertex in Graph:
    for neighbour in Graph[vertex]:
        if colors[neighbour] != colors[vertex] and neighbour not in max_diversity[colors[vertex]]: max_diversity[colors[vertex]][colors[neighbour]] = 1
        
        
        

#print max_diversity
max_color = -1
max_diversity[-1] = {}
for key in max_diversity:
    if len(max_diversity[key]) > len(max_diversity[max_color]):
        max_color = key

#print neg
if max_color == -1:
    answers = []
    once = False
    #choose any vertex with neg[vertex] = 0
    for vertex in max_diversity:
        if vertex != -1: answers.append(vertex)
    print min(answers)
        
            
    
else: print max_color
