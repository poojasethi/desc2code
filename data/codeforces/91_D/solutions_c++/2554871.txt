#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

#define pb push_back
#define qb pop_back

const int maxn = 200001,maxf = 6;

int n;
int ans;
int val[maxn],vis[maxn];
int num[maxf];
vector < int > opt[maxf][maxn][2];
vector < int > now;

void add(int x)
{
    int i;
    ++num[x];
    for (i = 0; i < x; ++i) opt[x][num[x]][0].pb(now[i]);
    for (i = 0; i < x; ++i) opt[x][num[x]][1].pb(now[(i+1)%x]);
}

int main()
{
    int i,j,k,l;

    scanf("%d",&n);
    for (i = 1; i <= n; ++i)
        scanf("%d",&val[i]);
    for (i = 1; i <= n; ++i)
        if (!vis[i])
        {
            for (j = i; !vis[j]; j = val[j])
            {
                vis[j] = true;
                if (now.size() == 5)
                {
                    add(5);
                    now.qb(),now.qb(),now.qb(),now.qb();
                }
                now.pb(j);
            }
            add(now.size());
            now.clear();
        }
loop:
    while (num[2] && num[3])
    {
        ++num[5];
        for (i = 0; i <= 1; ++i) 
            for (j = 0; j <= 1; ++j) 
                opt[5][num[5]][i].pb(opt[2][num[2]][i][j]);
        for (i = 0; i <= 1; ++i) 
            for (j = 0; j <= 2; ++j) 
                opt[5][num[5]][i].pb(opt[3][num[3]][i][j]);
        opt[2][num[2]][0].clear();
        opt[2][num[2]][1].clear();
        opt[3][num[3]][0].clear();
        opt[3][num[3]][1].clear();
        --num[2],--num[3];
    }

    while (num[2] > 1)
    {
        ++num[4];
        for (i = 0; i <= 1; ++i) 
            for (j = 0; j <= 1; ++j) 
                opt[4][num[4]][i].pb(opt[2][num[2]][i][j]);
        opt[2][num[2]][0].clear();
        opt[2][num[2]][1].clear();
        --num[2];
        for (i = 0; i <= 1; ++i) 
            for (j = 0; j <= 1; ++j) 
                opt[4][num[4]][i].pb(opt[2][num[2]][i][j]);
        opt[2][num[2]][0].clear();
        opt[2][num[2]][1].clear();
        --num[2];
    }

    while (num[3] > 2)
    {
        ++num[2];
        for (i = 0; i <= 1; ++i) opt[2][num[2]][0].pb(opt[3][num[3]][0][i]);
        for (i = 0; i <= 1; ++i) opt[2][num[2]][1].pb(opt[2][num[2]][0][i^1]);
        ++num[2];
        for (i = 0; i <= 1; ++i) opt[2][num[2]][0].pb(opt[3][num[3]][0][i+1]);
        for (i = 0; i <= 1; ++i) opt[2][num[2]][1].pb(opt[2][num[2]][0][i^1]); 
        opt[3][num[3]][0].clear();
        opt[3][num[3]][1].clear();
        --num[3];
        goto loop;
    }
    for (i = 2; i <= 5; ++i) ans += num[i];
    printf("%d\n",ans);
    for (i = 5; i >= 2; --i)
        for (j = 1; j <= num[i]; ++j)
        {
            printf("%d\n",i);
            for (k = 0; k <= 1; ++k)
            {
                for (l = 0; l < i; ++l)
                    printf("%d ",opt[i][j][k][l]);
                printf("\n");
            }
        }


    return 0;
}
