#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <cassert>
#include <string.h>

#define pb push_back
#define mp make_pair
#define PI 3.1415926535897932384626433832795
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;

const int maxn = 100010;
int n;
int a[maxn];

vector<pair<vector<int>, vector<int> > > ans;

void process(const vector<int>& v) {
	vector<int> res = v;
	
	int len = sz(v);
	forn(iter, len) {
		forn(i, len) {
			int cur = a[res[i]];
			int ind = -1;
			forn(j, sz(res)) {
				if (res[j] == cur) {ind = j; break;}
			}
			if (ind >= 0) swap(a[cur], a[res[i]]), swap(res[ind], res[i]);
		}
	}
	ans.pb(mp(v, res));
}

int u[maxn];

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	scanf("%d", &n);
	forn(i, n) scanf("%d", &a[i]), --a[i];
	vector<vector<int> > v2, v3;
	forn(i, n) {
		if (!u[i]) {
			int cur = i;
			vector<int> cycle;
			while (!u[cur]) {
				u[cur] = 1;
				cycle.pb(cur);
				cur = a[cur];
			}
			while (sz(cycle) > 3) {
				vector<int> poss;
				int cc = min(5, sz(cycle));
				forn(iter, cc) {
					poss.pb(cycle.back());
					if (iter < cc-1) cycle.pop_back();
				}
				process(poss);
			}
			if (sz(cycle) == 2) v2.pb(cycle); else if (sz(cycle) == 3) v3.pb(cycle);
		}
	}
	while (sz(v2) || sz(v3)) {
		if (sz(v2) && sz(v3)) {
			vector<int> cur = v2.back();
			cur.insert(cur.end(), ALL(v3.back()));
			v2.pop_back();
			v3.pop_back();
			process(cur);
		} else {
			while (sz(v2)) {
				int tt = min(2, sz(v2));
				vector<int> cur;
				forn(iter, tt) cur.insert(cur.end(), ALL(v2.back())), v2.pop_back();
				process(cur);
			}
			while (sz(v3)) {
				int tt = min(3, sz(v3));
				vector<int> cur;
				forn(iter, tt) cur.insert(cur.end(), ALL(v3.back())), v3.pop_back();
				int c1 = min(5, sz(cur));
				int rem = sz(cur)-c1;
				process(vector<int>(cur.begin(), cur.begin()+c1));
				vector<int> tmp;
				forn(i, sz(cur)) if (a[cur[i]] != cur[i]) tmp.pb(cur[i]);
//				if (rem) process(vector<int>(cur.begin()+c1, cur.end()));
				if (sz(tmp)) process(tmp);
			}
		}
	}
	printf("%d\n", sz(ans));
	forn(i, sz(ans)) {
		printf("%d\n", sz(ans[i].X));
		forn(j, sz(ans[i].X)) printf("%d ", ans[i].X[j]+1);
		printf("\n");
		forn(j, sz(ans[i].Y)) printf("%d ", ans[i].Y[j]+1);
		printf("\n");
	}
	return 0;
}
