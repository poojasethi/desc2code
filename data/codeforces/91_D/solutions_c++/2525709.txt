#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

struct op{
	int id ,cnt;
	op(){}
	op(int _id,int _cnt):id(_id), cnt(_cnt){}
};
vector<op> part, more;
vector<vector<int> > re;
vector<int> rc, tmp;
int val[100005], n, ans;
bool vis[100005];

inline bool operator < (const op &a, const op &b){return a.cnt > b.cnt;}

int main(){
	scanf("%d",&n);
	for (int i = 1; i <= n; i++) scanf("%d", val + i);

	int tid = 0;
	for (int i = 1; i <= n; i++){
		if (vis[i] || val[i] == i) continue;
		int p = i, cnt = 0;
		tmp.clear();
		while (!vis[p]){
			cnt++; vis[p] = true; p = val[p];
			tmp.push_back(p);
		}
		re.push_back(tmp); rc.push_back(1);
		
		while(true){
			if(cnt > 5){
				part.push_back(op(tid, 5));
				cnt -= 4; ans++;
			}else{
				part.push_back(op(tid, cnt));
				if (cnt > 3) ans++; else more.push_back(op(tid, cnt));
				break;
			}
		}
		tid++;
	}
	
	sort(more.begin(), more.end());
	sort(part.begin(), part.end()); 
	int size = more.size() - 1;
	for (int i = 0, j = size; i <= j; i++){
		if (more[j].cnt < 3) j--; else more[j].cnt--;
		ans++;
	}
	
	printf("%d\n", ans);
	size = part.size() - 1;
	for (int i = 0, j = size; i <= j; i++){
		if (part[i].cnt > 3 || i == j){
			printf("%d\n%d", part[i].cnt, re[part[i].id][0]);
			for (int k = 0; k < part[i].cnt - 1; k++) printf(" %d", re[part[i].id][k + rc[part[i].id]]);
			printf("\n");
			for (int k = 0; k < part[i].cnt - 1; k++) printf("%d ", re[part[i].id][k + rc[part[i].id]]);
			printf("%d\n", re[part[i].id][0]);
		}else{
			printf("%d\n%d", min(part[i].cnt + 2, 5), re[part[i].id][0]);
			for (int k = 0; k < part[i].cnt - 1; k++) printf(" %d", re[part[i].id][k + rc[part[i].id]]);
			printf(" %d %d\n", re[part[j].id][0], re[part[j].id][rc[part[j].id]]);
			for (int k = 0; k < part[i].cnt - 1; k++) printf("%d ", re[part[i].id][k + rc[part[i].id]]);
			printf("%d %d %d\n", re[part[i].id][0], re[part[j].id][rc[part[j].id]], re[part[j].id][0]);
			part[j].cnt -= 1; rc[part[j].id] += 1;
			if ((int)re[part[j].id].size() == rc[part[j].id]) j--;
		}
		rc[part[i].id] += part[i].cnt - 1;
	} 
}
