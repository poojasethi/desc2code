#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

typedef long long int64;
typedef long double real;

#ifdef DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

#ifdef WIN32
#define INT64 "%I64d"
#else
#define INT64 "%lld"
#endif

using namespace std;

const int MaxN = 100005, NA = -1, MaxC = 0x3F3F3F3F;

int a [MaxN];
int n;

inline void make_run (vector <int> & init, vector <int> & fini,
 vector <int> & cur, int & avail)
{
 int i, k, lim;
 lim = min (avail, (int) cur.size ());
// printf ("avail = %d, lim = %d, size = %d\n", avail, lim, (int) cur.size ());
 assert (lim > 1);
 k = NA;
 for (i = 0; i < lim; i++)
 {
  k = cur.back ();
  init.push_back (k);
  cur.pop_back ();
 }
 if (cur.size () > 0)
  cur.push_back (k);
 fini.push_back (init[init.size () - 1]);
 for (i = 0; i < lim - 1; i++)
  fini.push_back (init[init.size () - lim + i]);
 avail -= lim;
}

int main (void)
{
 int i, j, k;
 while (scanf (" %d", &n) != EOF)
 {
  for (i = 1; i <= n; i++)
   scanf (" %d", &a[i]);
  vector <vector <int> > v;
  for (i = 1; i <= n; i++)
   if (a[i] != i)
   {
    vector <int> temp;
    for (j = i; j != a[j]; )
    {
     temp.push_back (j);
     k = a[j];
     a[j] = j;
     j = k;
    }
    v.push_back (temp);
   }
  vector <pair <vector <int>, vector <int> > > ans;
  vector <vector <int> > p2, p3;
  while (v.size () > 0)
  {
   vector <int> cur;
   cur = v.back ();
   v.pop_back ();
   while (cur.size () > 3)
   {
    vector <int> init, fini;
    k = 5;
    make_run (init, fini, cur, k);
    assert (k <= 1);
    ans.push_back (make_pair (init, fini));
   }
   if (cur.size () == 2)
    p2.push_back (cur);
   else if (cur.size () == 3)
    p3.push_back (cur);
  }
  while (p2.size () > 0 || p3.size () > 0)
  {
   vector <int> init, fini;
   vector <int> cur;
   k = 5;
   if (p3.size () > 0)
   {
    cur = p3.back ();
    p3.pop_back ();
   }
   else if (p2.size () > 0)
   {
    cur = p2.back ();
    p2.pop_back ();
   }
   make_run (init, fini, cur, k);
   if (p2.size () > 0)
   {
    cur = p2.back ();
    p2.pop_back ();
   }
   else if (p3.size () > 0)
   {
    cur = p3.back ();
    p3.pop_back ();
   }
   if (cur.size () > 0)
    make_run (init, fini, cur, k);
   if (cur.size () > 0)
   {
    assert (cur.size () == 2);
    p2.push_back (cur);
   }
   assert ((k <= 1) || (p2.size () == 0 && p3.size () == 0));
   assert (init.size () > 0 && fini.size () > 0);
   ans.push_back (make_pair (init, fini));
  }
  printf ("%d\n", (int) ans.size ());
  for (i = 0; i < (int) ans.size (); i++)
  {
   k = (int) ans[i].first.size ();
   assert (k == (int) ans[i].second.size ());
   printf ("%d\n", k);
   for (j = 0; j < k; j++)
    printf ("%d%c", ans[i].first[j], j + 1 < k ? ' ' : '\n');
   for (j = 0; j < k; j++)
    printf ("%d%c", ans[i].second[j], j + 1 < k ? ' ' : '\n');
  }
 }
 return 0;
}
