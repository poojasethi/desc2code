/*
Author: LJQ
PROG: Codeforces Beta #75 Div1 D. Grocer's Problem
DATE: 2012.12.21
*/
#include <vector>
#include <cstdio>

using namespace std;

const int maxn = 200005;

#define pb push_back

int num[maxn];
int tmp3[maxn][4], tmp2[maxn][3];
int ret[maxn][6], ord[maxn][6];
int n, tot, s3, s2;

void init()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; i ++) scanf("%d", &num[i]);
}

vector <int> c;

void add4()
{
	int cs = c.size(); ret[++ tot][0] = cs;
	for (int i = 0; i < cs; i ++) ret[tot][i+1] = c[i];
	for (int i = 1; i <= cs; i ++) ord[tot][i] = ret[tot][i % cs + 1];
}

void add3()
{
	int cs = c.size(); tmp3[++ s3][0] = cs;
	for (int i = 0; i < cs; i ++) tmp3[s3][i+1] = c[i];
}

void add2()
{
	int cs = c.size(); tmp2[++ s2][0] = cs;
	for (int i = 0; i < cs; i ++) tmp2[s2][i+1] = c[i];
}

void work()
{
	//init & delete cycles whose length >= 4
	for (int i = 1; i <= n; i ++)
		while (num[i] != i){
			int p = i; c.clear(); c.pb(p);
			for (int j = 0; j < 4; j ++){
				p = num[p]; if (p == i) break; c.pb(p);
			}
			int cs = c.size(); num[i] = num[c.back()];
			for (int j = 0; j < cs-1; j ++) num[c[j+1]] = c[j+1];
			if (cs > 3) add4();
				else if (cs == 3) add3();
				else add2();
		}
	//(3, 3) => (0, 2)
	for (; s3 > s2 && s3 >= 2; s3 -= 2){
		ret[++ tot][0] = 5; s2 ++;
		for (int i = 1; i <= 3; i ++)
			ret[tot][i] = ord[tot][(i+1)%3+1] = tmp3[s3][i];
		tmp2[s2][1] = ret[tot][4] = ord[tot][5] = tmp3[s3-1][1];
		ret[tot][5] = ord[tot][4] = tmp3[s3-1][2];
		tmp2[s2][2] = tmp3[s3-1][3];
	}
	//(3, 2) => (0, 0)
	for (; s3 && s2; s3 --, s2 --){
		ret[++ tot][0] = 5;
		for (int i = 1; i <= 3; i ++)
			ret[tot][i] = ord[tot][(i+1)%3+1] = tmp3[s3][i];
		ret[tot][4] = ord[tot][5] = tmp2[s2][1];
		ret[tot][5] = ord[tot][4] = tmp2[s2][2];
	}
	//(2, 2) => (0, 0)
	while (s2 >= 2){
		ret[++ tot][0] = 4;
		for (int i = 1; i <= 2; i ++)
			ret[tot][i] = ord[tot][3 - i] = tmp2[s2][i]; s2 --;
		for (int i = 1; i <= 2; i ++)
			ret[tot][i+2] = ord[tot][5 - i] = tmp2[s2][i]; s2 --;			
	}	
	//3 => 0
	while (s3 --){
		ret[++ tot][0] = 3;
		for (int i = 1; i <= 3; i ++)
			ret[tot][i] = ord[tot][(i+1)%3+1] = tmp3[s3+1][i];
	}
	//2 => 0
	while (s2 --){
		ret[++ tot][0] = 2;
		for (int i = 1; i <= 2; i ++)
			ret[tot][i] = ord[tot][3 - i] = tmp2[s2+1][i];		
	}
}

void print()
{
	printf("%d\n", tot);
	for (int i = 1; i <= tot; i ++){
		int rs = ret[i][0];
		printf("%d\n", rs); 
		for (int j = 1; j <= rs; j ++) printf("%d ", ret[i][j]); puts("");
		for (int j = 1; j <= rs; j ++) printf("%d ", ord[i][j]); puts("");
	}
}

int main()
{
	init();
	work();
	print();
	return 0;
}
