#include <cstdio>
#include <cstdlib>
#include <climits>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <cstring>
#include <string>
#include <queue>
#include <map>
#include <vector>
#include <bitset>
#include <cmath>
#include <set>
using namespace std;

#define sqr(x) ((x)*(x))
#define fill(a, b) memset(a, b, sizeof(a))
#define mp(a, b) make_pair(a, b)
#define sz(a) ((int)a.size())
#define all(a) (a).begin(),(a).end()
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

typedef pair<vi, vi> T;
const int N = 100010;
int n, p[N], q[N];
vector<T> ans, two, three;

T gao(vi& v) {
	vi to;
	int n = sz(v);
	for (int i = 0; i < n; ++i) {
		to.push_back(v[(i + n - 1) % n]);
		if (i != n - 1)
			swap(p[v[i]], p[v[i + 1]]);
	}
	for (int i = 0; i < n; ++i) {
		q[p[v[i]]] = v[i];
	}
//	for (int i = 0; i < n; ++i)
//		printf("%d,", v[i]); puts("");
//	for (int i = 0; i < n; ++i)
//		printf("%d,", to[i]); puts("");
	return mp(v, to);
}

T merge(T& a, T& b) {
	vi u(a.first), v(a.second);
	u.insert(u.end(), b.first.begin(), b.first.end());
	v.insert(v.end(), b.second.begin(), b.second.end());
	return mp(u, v);
}

void split(T& a) {
	T u, v;
	u.first.push_back(a.first[0]);
	u.first.push_back(a.first[1]);
	u.second.push_back(a.first[1]);
	u.second.push_back(a.first[0]);
	two.push_back(u);

	v.first.push_back(a.first[0]);
	v.first.push_back(a.first[2]);
	v.second.push_back(a.first[2]);
	v.second.push_back(a.first[0]);
	two.push_back(v);
}

void solve() {
	ans.clear();
	two.clear();
	three.clear();
	for (int i = 1; i <= n; ++i) {
		scanf("%d", p + i);
		q[p[i]] = i;
	}
	for (int i = 1; i <= n; ++i) {
		if (q[i] == i) continue;
		vi chk(1, i);
		for (int j = q[i]; sz(chk) < 5 && j != i; j = q[j]) {
			chk.push_back(j);
		}
		T tmp = gao(chk);
		if (sz(tmp.first) == 2) two.push_back(tmp);
		else if (sz(tmp.first) == 3) three.push_back(tmp);
		else ans.push_back(tmp);
//		for (int j = 1; j <= n; ++j)
//			printf("%d,", p[j]);
//		puts("");
	}
	while (!three.empty()) {
		if (!two.empty()) {
			T tmp = merge(three.back(), two.back());
			ans.push_back(tmp);
			three.pop_back();
			two.pop_back();
		} else if (sz(three) == 1) {
			ans.push_back(three.back());
			three.pop_back();
		} else {
			split(three.back());
			three.pop_back();
		}
	}
	while (!two.empty()) {
		if (sz(two) == 1) {
			ans.push_back(two.back());
			two.pop_back();
		} else {
			T a = two.back(); two.pop_back();
			T b = two.back(); two.pop_back();
			T tmp = merge(a, b);
			ans.push_back(tmp);
		}
	}
	printf("%d\n", sz(ans));
	for (int i = 0; i < sz(ans); ++i) {
		printf("%d\n", sz(ans[i].first));
		for (int j = 0; j < sz(ans[i].first); ++j) {
			if (j) printf(" ");
			printf("%d", ans[i].first[j]);
		}
		puts("");
		for (int j = 0; j < sz(ans[i].second); ++j) {
			if (j) printf(" ");
			printf("%d", ans[i].second[j]);
		}
		puts("");
	}
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("in", "r", stdin);
#endif
    while (scanf("%d", &n) != EOF) {
    	solve();
 //   	puts("----------------------");
    }
	return 0;
}
