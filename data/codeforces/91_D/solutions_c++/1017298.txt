//91D Hewr
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <iomanip>
#include <set>
#include <map>
#include <bitset>
using namespace std;
#define fo(i,a,b) for (int i = a; i <= b; ++i)
#define fd(i,a,b) for (int i = a; i >= b; --i)
#define fe(i,x) for (int i = g[x], y = E[i].y; i; i = E[i].l, y = E[i].y)
#define forall(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); ++i)
#define pb push_back
#define SIZE(x) ((int) (x).size())
#define MP make_pair
#define fi first
#define se second
#define UNIQUE(x) x.resize(unique(x.begin(), x.end()) - x.begin())
#define clr(a,x) memset(&a, x, sizeof(a))
#define move(a,b) memcpy(&b, &a, sizeof(a))
#define Plus(a,b) (((LL) (a) + (b)) % mo)
#define Minus(a,b) ((((LL) (a) - (b) ) % mo + mo) % mo)
#define Mul(a,b) ((LL) (a) * (b) % mo)
#define updmin(a,b) (a = min(a, b))
#define updmax(a,b) (a = max(a, b))
#define sqr(x) ((x) * (x))

typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

const double eps = 1e-10;
const int oo = ~0u >> 2, mo = (int) 1e9 + 7;
const int mn = 110000;

int a[mn], w[mn];
int n, m;

vector<VI> Now;
vector<vector<PII> > Ans;
PII c[mn];

void work(int st){
	Now.pb(VI());
	for (int x = st; w[x]; x = a[x]) 
		Now.back().pb(x), w[x] = 0;
}

int calc(int x){ return (x - 2) % 4 + 2; }

void add(VI Q){
	int r = 0, len = SIZE(Q) - 1;
	while (r < len){
		if (Ans.empty() || SIZE(Ans.back()) >= 4) 
			Ans.pb(vector<PII>());
		int R = min(r + (4 - SIZE(Ans.back())), len), t = w[Q[0]];
		Ans.back().pb(MP(w[Q[0]], w[Q[r + 1]])), w[Q[0]] = w[Q[r + 1]];
		fo (i, r + 1, R - 1) 
			Ans.back().pb(MP(w[Q[i]], w[Q[i + 1]])), w[Q[i]] = w[Q[i + 1]];
		Ans.back().pb(MP(w[Q[R]], t)), w[Q[R]] = t;
		swap(Q[0], Q[R]), r = R;
	}
}

int main(){
	scanf("%d", &n);
	fo (i, 1, n) scanf("%d", a + i), w[a[i]] = i;
	fo (i, 1, n) if (w[a[i]] && a[i] != i) work(i);
	fo (i, 1, n) w[a[i]] = i;

	m = 0;
	fo (i, 0, SIZE(Now) - 1){
		int t = calc(SIZE(Now[i]));
		if (t >= 4){
			add(Now[i]);
			continue;
		}
		c[m++] = MP(t, i);
	}
	sort(c, c + m);

	int l = 0, r = m - 1;
	while (l < r && c[l].fi == 2 && c[r].fi == 3)
		add(Now[c[l++].se]), add(Now[c[r--].se]);
	while (l <= r) add(Now[c[l++].se]);

	printf("%d\n", SIZE(Ans));
	fo (i, 0, SIZE(Ans) - 1){
		int l = SIZE(Ans[i]);
		printf("%d\n", l);
		fo (j, 0, l - 1){
			printf("%d", Ans[i][j].fi);
			if (j == l - 1) printf("\n"); else printf(" ");
		}
		fo (j, 0, l - 1){
			printf("%d", Ans[i][j].se);
			if (j == l - 1) printf("\n"); else printf(" ");
		}
	}
}
