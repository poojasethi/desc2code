#include <cstdio>
#include <vector>
using namespace std;
int n,m,ans,cyc[100005],num[100005];
vector<int> vec[100005],atlen[5];
struct box
{
  int n,a[5],b[5];
}o[2000000];
void add(int q,int s,int t)
{
  ans++; int i;
  o[ans].n = t-s+1;
  for(i=0;i<=t-s;i++)
    o[ans].a[i] = vec[q][i+s];
  for(i=0;i<t-s;i++)
    o[ans].b[i] = o[ans].a[i+1];
  o[ans].b[t-s] = o[ans].a[0];
}
void addbonus(int q1,int s1,int t1,int q2,int s2,int t2)
{
  ans++; int i;
  o[ans].n = t1-s1+1+t2-s2+1;
  for(i=0;i<=t1-s1;i++) o[ans].a[i] = vec[q1][i+s1];
  for(i=0;i<t1-s1;i++) o[ans].b[i] = o[ans].a[i+1];
  o[ans].b[t1-s1] = o[ans].a[0];
  for(i=0;i<=t2-s2;i++) o[ans].a[t1-s1+1+i] = vec[q2][i+s2];
  for(i=0;i<t2-s2;i++) o[ans].b[t1-s1+1+i] = o[ans].a[t1-s1+i+2];
  o[ans].b[t1-s1+t2-s2+1] = o[ans].a[t1-s1+1];
}
void print()
{
  printf("%d\n",ans);
  for(int i=1;i<=ans;i++)
    {
      printf("%d\n",o[i].n);
      for(int j=0;j<o[i].n;j++) printf("%d ",o[i].a[j]);
      printf("\n");
      for(int j=0;j<o[i].n;j++) printf("%d ",o[i].b[j]);
      printf("\n");
    }
}
void find(int u)
{
  cyc[u] = m; vec[m].push_back(u);
  for(int v=num[u];v!=u;v=num[v])
    cyc[v] = m,vec[m].push_back(v);
  while(vec[m].size()>5)
    {
      add(m,vec[m].size()-5,vec[m].size()-1);
      vec[m].erase(vec[m].end()-4,vec[m].end());
    }
  if(vec[m].size() >= 4)
    {
      add(m,0,vec[m].size()-1);
      vec[m].erase(vec[m].begin(),vec[m].end());
    }
  if(vec[m].size())
    atlen[vec[m].size()].push_back(m);
}
int main()
{
  scanf("%d",&n); int i,a,b,c;
  for(i=1;i<=n;i++)
    scanf("%d",&num[i]);
  for(i=1;i<=n;i++)
    if(!cyc[i]) m++,find(i);
  while(atlen[3].size() && atlen[2].size())
    {
      a = *(atlen[3].rbegin()); atlen[3].pop_back();
      b = *(atlen[2].rbegin()); atlen[2].pop_back();
      addbonus(a,0,2,b,0,1);
    }
  while(atlen[3].size() > 2)
    {
      a = *(atlen[3].rbegin()); atlen[3].pop_back();
      b = *(atlen[3].rbegin()); atlen[3].pop_back();
      addbonus(a,0,2,b,1,2);
      c = *(atlen[3].rbegin()); atlen[3].pop_back();
      addbonus(c,0,2,b,0,1);
    }
  while(atlen[3].size())
    {
      a = *(atlen[3].rbegin()); atlen[3].pop_back();
      add(a,0,2);
    }
  while(atlen[2].size() > 1)
    {
      a = *(atlen[2].rbegin()); atlen[2].pop_back();
      b = *(atlen[2].rbegin()); atlen[2].pop_back();
      addbonus(a,0,1,b,0,1);
    }
  if(atlen[2].size())
    {
      a = *(atlen[2].rbegin()); atlen[2].pop_back();
      add(a,0,1);
    }
  print();
}
