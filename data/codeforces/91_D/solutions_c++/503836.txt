#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define size(x) int((x).size())
#define foreach(i,c) for(typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
typedef long long I64; typedef unsigned long long U64;
const double EPS=1e-12;
const int INF=999999999;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VVI;

const int kMaxN=100000;

int n;
int a[kMaxN];
VVI f;
vector<VVI> res;
VVI g[5];

void Solve() {
  f.clear();
  for(int i=0;i<n;++i) if(a[i]!=-1) {
    VI p;
    int u=i;
    while(1) {
      p.push_back(u);
      int v=a[u];
      a[u]=-1;
      if(v==i) break;
      u=v;
    }
    if(size(p)==1) continue;
    f.push_back(p);
  }

  res.clear();
  for(int i=0;i<size(f);++i) {
    while(size(f[i])>=5) {
      VVI p;
      if(size(f[i])==5) {
        p.push_back(f[i]);
        f[i].clear();
      } else {
        p.push_back(VI(f[i].begin() + (size(f[i])-5),f[i].end()));
        f[i].erase(f[i].begin() + (size(f[i])-4),f[i].end());
      }
      res.push_back(p);
    }
    if(size(f[i])==0) {
      f[i]=f.back();
      f.pop_back();
      --i;
    }
  }
  
  for(int i=2;i<=4;++i) g[i].clear();
  for(int i=0;i<size(f);++i) g[size(f[i])].push_back(f[i]);

  for(int i=0;i<size(g[4]);++i) {
    VVI p;
    p.push_back(g[4][i]);
    res.push_back(p);
  }
  for(int i=0;i<size(g[3]);++i) {
    VVI p;
    p.push_back(g[3][i]);
    if(size(g[2])>0) {
      p.push_back(g[2].back());
      g[2].pop_back();
    } else {
      if(i+1<size(g[3])) {
        ++i;
        p.push_back(VI(g[3][i].begin()+1,g[3][i].end()));
        g[2].push_back(VI(g[3][i].begin(),g[3][i].begin()+2));
      }
    }
    res.push_back(p);
  }
  for(int i=0;i<size(g[2]);++i) {
    VVI p;
    p.push_back(g[2][i]);
    if(i+1<size(g[2])) {
      ++i;
      p.push_back(g[2][i]);
    }
    res.push_back(p);
  }
}

void Output() {
  printf("%d\n",size(res));
  for(int i=0;i<size(res);++i) {
    int c=0;
    for(int j=0;j<size(res[i]);++j) c+=size(res[i][j]);
    printf("%d\n",c);
    
    for(int j=0;j<size(res[i]);++j)
      for(int k=0;k<size(res[i][j]);++k) printf("%d ",res[i][j][k]+1);
    printf("\n");

    for(int j=0;j<size(res[i]);++j) {
      for(int k=1;k<size(res[i][j]);++k) printf("%d ",res[i][j][k]+1);
      printf("%d ",res[i][j][0]+1);
    }
    printf("\n");
  }
}

int main() {
  scanf("%d",&n);
  for(int i=0;i<n;++i) {
    scanf("%d",&a[i]);
    --a[i];
  }

  Solve();
  Output();

  return 0;
}
