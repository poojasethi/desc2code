#include<cstdio>
#include<cstring>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;

struct Part{
	int id ,cnt;
	Part(){}
	Part(int _id,int _cnt):id(_id), cnt(_cnt){}
	friend bool operator< (const Part& a, const Part& b){
		return a.cnt>b.cnt;
	}
};

vector<Part> part;
vector<Part> more;
vector<vector<int> > res;
vector<int> rc;

vector<int> tmp;
int val[100005];
bool vis[100005];

int main(){
	int n;
	 
	while(~scanf("%d",&n)){
		for(int i=1;i<=n;i++){
			scanf("%d", &val[i]);
		}
		
		int ans=0;
		int tid = 0;
		for(int i=1;i<=n;i++){
			if(vis[i]) continue;
			if(val[i]==i) continue;
			int p=i, cnt=0;
			tmp.clear();
			while(!vis[p]){
				cnt++;
				vis[p]=true;
				p = val[p];
				tmp.push_back(p);
			}
			res.push_back(tmp);
			rc.push_back(1);
			
			while(true){
				if(cnt>5){
					part.push_back(Part(tid, 5));
					ans++;
					cnt-=4;
				}else{
					part.push_back(Part(tid, cnt));
					if(cnt>3) ans++;
					else more.push_back(Part(tid, cnt));
					break;
				}
			}
			tid++;
		}
		
		sort(more.begin(), more.end());
		sort(part.begin(), part.end()); 

		int sz=more.size()-1;
		for(int i=0, j=sz;i<=j;i++){
			if(more[j].cnt<3) j--;
			else more[j].cnt-=1;
			ans++;
		}
		
		printf("%d\n", ans);
		
		sz = part.size()-1;
		for(int i=0, j=sz;i<=j;i++){
			if(part[i].cnt>3||i==j){
				printf("%d\n", part[i].cnt);
				printf("%d", res[part[i].id][0]);
				for(int k=0;k<part[i].cnt-1;k++){
					printf(" %d", res[part[i].id][k+rc[part[i].id]]);
				}puts("");
				for(int k=0;k<part[i].cnt-1;k++){
					printf("%d ", res[part[i].id][k+rc[part[i].id]]);
				}
				printf("%d", res[part[i].id][0]);
				puts(""); 
			}else{
				printf("%d\n", min(part[i].cnt+2, 5));
				printf("%d", res[part[i].id][0]);
				for(int k=0;k<part[i].cnt-1;k++){
					printf(" %d", res[part[i].id][k+rc[part[i].id]]);
				}
				printf(" %d", res[part[j].id][0]);
				printf(" %d", res[part[j].id][rc[part[j].id]]);
				puts("");
				
				for(int k=0;k<part[i].cnt-1;k++){
					printf("%d ", res[part[i].id][k+rc[part[i].id]]);
				}
				printf("%d", res[part[i].id][0]);
				printf(" %d", res[part[j].id][rc[part[j].id]]);
				printf(" %d", res[part[j].id][0]);
				puts("");
				
				part[j].cnt-=1; 
				rc[part[j].id]+=1;
				if(res[part[j].id].size()==rc[part[j].id]) j--;
			}
			rc[part[i].id] += part[i].cnt-1;
		} 
	}
}

/*
8
2 3 4 5 6 7 8 1
9
2 3 1 5 6 4 8 9 7
*/
	 		 		  	  	   				 	 	