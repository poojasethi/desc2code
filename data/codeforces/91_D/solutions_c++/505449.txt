#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <numeric>
#include <vector>
#include <set>
#include <utility>
#include <string>
using namespace std;

const int NN = 100000 + 8;

int  N, A[NN], C[NN], P[NN], B[NN];
bool tag[NN];



vector<int>  get(vector<int>& s) {
	vector<int>  t;
	//t.push_back(s.back());
	for(int i=1; i<(int)s.size(); ++i)
		t.push_back(s[i]);
	t.push_back(s.front());
	for(size_t i=0; i<s.size(); ++i)
		B[s[i]] = A[s[i]];
	for(size_t i=0; i<s.size(); ++i)
		A[t[i]] = B[s[i]];
	return t;
}

vector<int> join(vector<int> a, vector<int> b) {
	vector<int> t = a;
	for(size_t i=0; i<b.size(); ++i)
		t.push_back(b[i]);
	return t;
}

void  output(vector<int> s, vector<int> t) {
	int  n = s.size();
	printf("%d\n", n);
	for(int i=0; i<n; ++i)
		printf("%d%c", s[i], i+1==n ? '\n' : ' ');
	for(int i=0; i<n; ++i)
		printf("%d%c", t[i], i+1==n ? '\n' : ' ');
}

void  print(string s, vector<int> t) {
	printf("%s: ", s.c_str());
	for(size_t i=0; i<t.size(); ++i)
		printf(" %d", t[i]);
	putchar('\n');
}

bool solve() {
	if(scanf("%d", &N) != 1) return false;

	for(int i=1; i<=N; ++i)
		scanf("%d", A+i), P[A[i]]=i, B[i]=A[i];
	memset(tag, false, sizeof(tag));
	memset(C, -1, sizeof(C));

	typedef pair<int, int> PII;


	//puts("OOOOOOOOOOOOO");

	set<PII>  Q;

	for(int i=1; i<=N; ++i) if(!tag[i]) {
		int  idx = i;
		int  cnt = 0;
		while(!tag[idx]) {
			tag[idx] = true;
			++cnt;
			idx = A[idx];
		}
		if(cnt > 1) {
			Q.insert(make_pair(cnt, i));
		}
	}

	//printf("(%d, %d)\n", Q.begin()->first, Q.begin()->second);
	//for(set<PII>::iterator it=Q.begin(); it!=Q.end(); ++it) {
	////	printf("(%d, %d)\n", it->first, it->second);
	//}
	vector<vector<int> >  src;
	vector<vector<int> >  dst;

	while(!Q.empty()) {
		//printf("Q.size() = %d\n", (int)Q.size());
		PII  p = *(--Q.end()); Q.erase(--Q.end());
		int  pn = p.first;
		int  idx = p.second;
		vector<int>  src1, dst1, src2, dst2;
		for(int i=0, j=idx; i<5 && i<pn; ++i) {
			src1.push_back(j);
			j = A[j];
		}
		dst1 = get(src1);

		//print("src1", src1);
		//print("dst", dst1);

		p.first -= (int)src1.size();
		if(A[p.second] != p.second)
			p.first++;

		if(src1.size() > 3 || Q.empty()) {
			src.push_back(src1);
			dst.push_back(dst1);
			//output(src1, dst1);
			if(p.first > 1) {
				Q.insert(p);
			} continue;
		}
		PII  q = *Q.begin();  Q.erase(Q.begin());
		int  qn = q.first;
		int  qIdx = q.second;

		for(int i=0, j=qIdx; i+src1.size()<5 && i<qn; ++i) {
			src2.push_back(j);
			j = A[j];
		}
		dst2 = get(src2);
		q.first -= (int)src2.size();
		if(A[qIdx] != qIdx) q.first++;
		//output(join(src1, src2), join(dst1, dst2));
		src.push_back(join(src1, src2));
			dst.push_back(join(dst1, dst2));
		if(p.first > 1) Q.insert(p);
		if(q.first > 1) Q.insert(q);
	}

	//for(int i=1; i<=N; ++i)
	//	printf("%d%c", A[i], i==N ? '\n' : ' ');

	printf("%d\n", (int)src.size());

	for(int i=0; i<(int)src.size(); ++i) {
		output(src[i], dst[i]);
	}

	return true;
}

int main(int argc, char *argv[])
{
	solve();
	return 0;
}
