#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>


 
using namespace std;
 
const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;
 
#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)

int per[100100];
bool vis[100100];
int od5[100100][2][5];
int od4[100100][2][4];
int od3[100100][2][3];
int od2[100100][2][2];
int am[6];
int ct[5];
void add(int len, int *sa1,int*sa2){
	FOR(i,0,len)sa1[i]=ct[i];
	FOR(i,0,len)sa2[i]=ct[(i+1)%len];
}
void printAr(int *pr, int len){
	FOR(i,0,len){
		if(i)printf(" ");
		printf("%d",pr[i]+1);
	}
	printf("\n");
}
int main(){
	int N;
	scanf("%d",&N);
	FOR(i,0,N)scanf("%d",per+i);
	FOR(i,0,N)--per[i];
	memset(vis,false,sizeof(vis));
	int res = 0, pos = 0;
	memset(am,0,sizeof(am));
	FOR(i,0,N){
		if(vis[i])continue;
		if(per[i]==i)continue;
		vis[i]=true;
		int cp = i;
		int cam = 1;
		ct[0]=i;
		while(true){
			int pcp = cp;
			cp = per[cp];
			if(vis[cp])break;
			vis[cp]=true;
			if(cam==5){
				add(5,od5[am[5]][0],od5[am[5]][1]);
				am[5]++;
		//		cout << "cp " << cp << endl;
		//		ct[0]=pcp;
				cam = 1;
			}
			ct[cam++]=cp;
		}
		switch(cam){
			case 2:add(2,od2[am[2]][0],od2[am[2]][1]);am[2]++;break;
			case 3:add(3,od3[am[3]][0],od3[am[3]][1]);am[3]++;break;
			case 4:add(4,od4[am[4]][0],od4[am[4]][1]);am[4]++;break;
			case 5:add(5,od5[am[5]][0],od5[am[5]][1]);am[5]++;break;
		}
	}
//	FOR(i,2,6)cout << "am " << i <<": " << am[i] << endl;
	do22:
	while(am[2]>0&&am[3]>0){
		--am[2];--am[3];
		FOR(i,0,2)FOR(j,0,2)od5[am[5]][i][j]=od2[am[2]][i][j];
		FOR(i,0,2)FOR(j,0,3)od5[am[5]][i][j+2]=od3[am[3]][i][j];
		am[5]++;
	}
	while(am[2]>1){
		--am[2];
		FOR(i,0,2)FOR(j,0,2)od4[am[4]][i][j]=od2[am[2]][i][j];
		--am[2];
		FOR(i,0,2)FOR(j,0,2)od4[am[4]][i][j+2]=od2[am[2]][i][j];
		++am[4];
	}
	while(am[3]>2){
		--am[3];
		FOR(i,0,2)od2[am[2]][0][i]=od3[am[3]][0][i];
		FOR(i,0,2)od2[am[2]][1][i]=od2[am[2]][0][i^1];
		++am[2];
		FOR(i,0,2)od2[am[2]][0][i]=od3[am[3]][0][i+1];
		FOR(i,0,2)od2[am[2]][1][i]=od2[am[2]][0][i^1];
		++am[2];
		goto do22;
	}
	int sum = 0;
	FOR(i,2,6)sum+=am[i];
	printf("%d\n",sum);
	FORD(i,2,6)FOR(j,0,am[i]){
		printf("%d\n",i);
		switch(i){
		case 2:printAr(od2[j][0],2);printAr(od2[j][1],2);break;
		case 3:printAr(od3[j][0],3);printAr(od3[j][1],3);break;
		case 4:printAr(od4[j][0],4);printAr(od4[j][1],4);break;
		case 5:printAr(od5[j][0],5);printAr(od5[j][1],5);break;
		}
	}
	return 0;
}
