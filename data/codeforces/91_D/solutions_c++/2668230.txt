#include <cstdio>
#include <cstring>
#include <cstdlib>

using namespace std;

enum {MAXN = 100010};
int seq[MAXN];
bool vis[MAXN];
int clen[MAXN],cpos[MAXN];
int out[MAXN][11];

void opt(int cir,int len,int *ans)
{
  for(int k = ans[0] + 1,p = cir;k <= ans[0] + len;k++)
    {
      ans[k] = p;
      if (k == ans[0] + len)
	{
	  ans[5 + k] = cir;
	  seq[cir] = seq[p];
	}
      else
	{
	  ans[5 + k] = seq[p];
	  p = seq[p];
	}
    }
  ans[0] += len;
}

int dt[3][MAXN];

int main()
{
  int n;
  scanf("%d",&n);
  for(int i=1;i<=n;i++) scanf("%d",&seq[i]);

  memset(vis,false,sizeof(vis));
  int ctot = 0;
  for(int i=1;i<=n;i++)
    if (!vis[i])
      {
	int c = 0;
	vis[i] = true;
	for(int j = seq[i];j != i;j = seq[j])
	  {
	    vis[j] = true;
	    ++c;
	  }

	cpos[ctot] = i;
	clen[ctot++] = c;
      }

  int ctimes = 0;
  int tot[3];
  memset(tot,0,sizeof(tot));
  for(int i=0;i<ctot;i++)
    {
      for(;clen[i] >= 4;clen[i] -= 4,ctimes++)
	{
	  out[ctimes][0] = 0;
	  opt(cpos[i],5,out[ctimes]);
	}

      
      if (clen[i] == 3)
	{
	  out[ctimes][0] = 0;
	  opt(cpos[i],4,out[ctimes]);
	  ++ctimes,clen[i] = 0;
	}
      
      dt[clen[i]][tot[clen[i]]++] = cpos[i];
    }

  int ans = tot[1] + tot[2],anst1 = 0;
  for(int t1 = 0;tot[2] - t1 * 2 >= 0;t1++)
    {
      int t2,s1 = tot[1] + t1,s2 = tot[2] - t1 * 2;
      if (s1 < s2)
	{
	  t2 = s2;
	}
      else
	{
	  t2 = s2 + (s1 - s2 + 1) / 2;
	}
      
      if (t1 + t2 < ans)
	{
	  ans = t1 + t2;
	  anst1 = t1;
	}
    }

  for(;anst1 > 0;anst1--)
    {
      out[ctimes][0] = 0;
      opt(dt[2][--tot[2]],3,out[ctimes]);
      opt(dt[2][--tot[2]],2,out[ctimes]);
      ++ctimes;
      
      dt[1][tot[1]++] = dt[2][tot[2]];
    }

  for(;tot[1] > 0 && tot[2] > 0;)
    {
      out[ctimes][0] = 0;
      opt(dt[1][--tot[1]],2,out[ctimes]);
      opt(dt[2][--tot[2]],3,out[ctimes]);
      ++ctimes;
    }

  for(;tot[2] > 0;)
    {
      out[ctimes][0] = 0;
      opt(dt[2][--tot[2]],3,out[ctimes]);
      ++ctimes;
    }

  for(;tot[1] > 1;)
    {
      out[ctimes][0] = 0;
      opt(dt[1][--tot[1]],2,out[ctimes]);
      opt(dt[1][--tot[1]],2,out[ctimes]);
      ++ctimes;
    }
  
  if (tot[1] == 1)
    {
      out[ctimes][0] = 0;
      opt(dt[1][--tot[1]],2,out[ctimes]);
      ++ctimes;
    }

  printf("%d\n",ctimes);
  for(int i=0;i<ctimes;i++)
    {
      printf("%d\n",out[i][0]);
      for(int k = 1;k <= out[i][0];k++) printf("%d ",out[i][k]);
      puts("");
      for(int k = 1;k <= out[i][0];k++) printf("%d ",out[i][k + 5]);
      puts("");
    }
  
  return 0;
}
