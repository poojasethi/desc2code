#!/usr/bin/python
import sys
import re

def input_numbers():
    return [int(n) for n in raw_input().split()]

n = input()
t = input_numbers()

inf = 150*1000*2
t = [inf] + t # Fake 0-th elem = inf.
if n % 2 == 0:
    t += [-inf]
else:
    t += [inf]

def is_locally_amusing(t, k):
    if k == 0 or k == len(t) - 1:
        return True
    if k % 2 != 0:
        return t[k] < t[k + 1] and t[k] < t[k - 1]
    else:
        return t[k] > t[k + 1] and t[k] > t[k - 1]

falses = []
for i in xrange(1, n + 1):
    amusing = is_locally_amusing(t, i)
    if not amusing:
        falses += [i] 

if len(falses) > 6:
    print 0
    exit()

def is_amusing(t, falses, i, j): # falses, i, j are true indices (0-based)
    t[i], t[j] = t[j], t[i]
    ans = is_locally_amusing(t, i) and is_locally_amusing(t, j) and is_locally_amusing(t, i + 1) and is_locally_amusing(t, j + 1) and is_locally_amusing(t, i - 1) and is_locally_amusing(t, j - 1) 
    for k in falses:
        if not ans: break
        ans = ans and is_locally_amusing(t, k) and is_locally_amusing(t, k - 1) and is_locally_amusing(t, k + 1)
    t[i], t[j] = t[j], t[i]
    return ans

ans = 0
for i in falses:
    for j in xrange(1, n + 1):
        if j not in falses:
            ans += is_amusing(t, falses, i, j)
for i in falses:
    for j in falses:
        if i < j:
            ans += is_amusing(t, falses, i, j)
print ans
