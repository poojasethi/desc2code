#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int tmp;
#define SWAP(a,b) {tmp = a; a = b; b = tmp;}

bool check_pos(int n, int *t, int p)
{
	if (p % 2 == 0)
	{
		if ((p && t[p-1] <= t[p]) || (p+1 < n && t[p] >= t[p+1]))
		{
			return false;
		}
	}
	else
	{
		if ((p && t[p-1] >= t[p]) || (p+1 < n && t[p] <= t[p+1]))
		{
			return false;
		}
	}

	return true;
}

int main()
{
	int n, *t, i, j, k, sz, count = 0;
	bool *b, is;
	vector <int> bad;

	cin>>n;

	t = new int[n];
	b = new bool[n];

	for (i = 0 ; i < n; i++)
	{
		cin>>t[i];
		b[i] = false;
	}

	for (i = 0; i < n; i++)
	{
		if (!check_pos(n, t, i))
		{
			if (i && !b[i-1])
			{
				b[i-1] = true;
				bad.push_back(i-1);
			}
			if (!b[i])
			{
				b[i] = true;
				bad.push_back(i);
			}
			if (i+1 < n && !b[i+1])
			{
				b[i+1] = true;
				bad.push_back(i+1);
			}
		}
	}

	sz = bad.size();
	if (sz > 50)
	{
		cout<<0<<endl;
		return 0;
	}

	for (i = 0; i < sz; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (!b[j] || j < bad[i])
			{
				SWAP(t[bad[i]], t[j]);

				if (check_pos(n,t,j))
				{
					is = true;
					for (k = 0; k < sz; k++)
					{
						if (!check_pos(n, t, bad[k]))
						{
							is = false;
							break;
						}
					}
					if (is) count++;
				}

				SWAP(t[bad[i]], t[j]);
			}
		}
	}

	cout<<count<<endl;
	return 0;
}
