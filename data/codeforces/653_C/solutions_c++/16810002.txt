#include <iostream>
#include <vector>
#include <cstdlib>

using namespace std;

const int limite=1000000;

int n;
int t[limite];
int env[limite];

bool posicioncorrecta(int i)
{
  if (i%2==1) {
    if ((1<i and t[i-1]<=t[i]) or (i<n and t[i]>=t[i+1]))
      return false;
  } else {
    if ((1<i and t[i-1]>=t[i]) or (i<n and t[i]<=t[i+1]))
      return false;
  }
  return true;;
}

bool comprueba(vector<int> v)
{
  for (int i=0;i<int(v.size());i++)
    if (not posicioncorrecta(v[i]))
      return false;
  return true;
}

int main()
{
  ios::sync_with_stdio(false);
  cin>>n;
  for (int i=1;i<=n;i++)
    cin>>t[i];
  vector<int> v;
  for (int i=1;i<=n;i++) {
    if (not posicioncorrecta(i)) {
      v.push_back(i);
      env[i]=1;
    }
  }
  if (int(v.size())>6) {
    cout<<0<<endl;
    exit(0);
  }
  int sol=0;
  for (int i=0;i<int(v.size());i++) {
    int pos1=v[i];
    for (int pos2=1;pos2<=n;pos2++) {
      if (pos1!=pos2 and (env[pos2]==0 or pos1<pos2)) {
	swap(t[pos1],t[pos2]);
	if (posicioncorrecta(pos2))
	  sol+=comprueba(v);
	swap(t[pos1],t[pos2]);
      }
    }
  }
  cout<<sol<<endl;
}
