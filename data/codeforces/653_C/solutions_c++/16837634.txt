#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e5+6e4;
int t[MAXN], n;
vector <int> Failed;
bool inFailed[MAXN];
long long res;
bool check(int x, int pos) {
	bool ret = true;
	if(pos&1) {
		if(pos>1) ret = (ret&&x<t[pos-1]); 
		if(pos<n) ret = (ret&&x<t[pos+1]);
	}else {
		if(pos>1) ret = (ret&&x>t[pos-1]); 
		if(pos<n) ret = (ret&&x>t[pos+1]);
	}
	return ret;
}
int main() {
	scanf("%d", &n);
	for(int i=1; i<=n; ++i)
		scanf("%d", t+i);
	for(int i=1; i<=n; ++i)
		if(!check(t[i], i)){
			Failed.push_back(i);
			inFailed[i] = true;
		}
	if(Failed.size()>6) {
		puts("0");
		return 0;
	}
	for(int i=0; i<Failed.size(); ++i)
	{
		int p = Failed[i];
		for(int q=1; q<=n; ++q)
		{
			swap(t[p], t[q]);
			if(check(t[q], q)) {
				bool find = true;
				for(int i=0; i<Failed.size(); ++i)
					if(!check(t[Failed[i]], Failed[i]))
					{
						find = false;
						break;
					}
				if(find) {
					if(inFailed[q]) res++;
					else res += 2;
				}
			}
			swap(t[p], t[q]);
		}
	}
	cout << (res>>1) <<endl;
	return 0;
}
