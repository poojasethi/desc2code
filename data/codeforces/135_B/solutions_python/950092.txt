import itertools
import sys

def dist(p1, p2):
    return (p1[0]-p2[0])**2 + (p1[1]-p2[1])**2

def vector(base, to):
    return [to[0]-base[0], to[1]-base[1]]

def dot(vec1, vec2):
    return vec1[0]*vec2[0] + vec1[1]*vec2[1]

inp = []
square = None
rect = None
for i in xrange(8):
    inp.append(map(int, raw_input().split()))
#search square
for cmb in itertools.combinations(range(8), 4):
    infer = [inp[i] for i in cmb]
    for ps in itertools.permutations(infer):
        #get length
        lengths = []
        for i in xrange(4):
            lengths.append(dist(ps[i], ps[i-1]))
        #all length is same
        if len(list(set(lengths))) == 1:
            #check angle
            for i in xrange(4):
                v1 = vector(ps[i], ps[i-1])
                v2 = vector(ps[i], ps[(i+1)%4])
                if dot(v1, v2) != 0:
                    break
            else:
                square = cmb
                break
    if square != None:
        break
                
if square == None:
    print "NO"
    sys.exit(0)

#search rectangle
cmb = list(set(range(8)).difference(square))
infer = [inp[i] for i in cmb]
for ps in itertools.permutations(infer):
    #get length
    lengths = []
    for i in xrange(4):
        lengths.append(dist(ps[i], ps[i-1]))
    #check length
    if len(list(set(lengths))) <= 2:
        #check angle
        for i in xrange(4):
            v1 = vector(ps[i], ps[i-1])
            v2 = vector(ps[i], ps[(i+1)%4])
            if dot(v1, v2) != 0:
                break
        else:
            rect = cmb
            break

if rect == None:
    print "NO"
else:
    print "YES"
    for i in square:
        print i+1,
    print
    for i in rect:
        print i+1,
