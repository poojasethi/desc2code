
def read_array(convertor=None):
  ret = raw_input().split()
  if convertor: ret = map(convertor, ret)
  return ret


edge = lambda x, y: (y[0]-x[0], y[1]-x[1])
dist = lambda pt: pt[0] ** 2 + pt[1] ** 2


def is_rect(p):
  p = sorted(p)
  edge1 = edge(p[0], p[1])
  edge2 = edge(p[0], p[2])
  edge3 = edge(p[1], p[3])
  edge4 = edge(p[2], p[3])
  return edge1 == edge4 and edge2 == edge3 and edge1[0] * edge2[0] + edge1[1] * edge2[1] == 0


def is_sq(p):
  p = sorted(p)
  edge1 = edge(p[0], p[1])
  edge2 = edge(p[0], p[2])
  edge3 = edge(p[1], p[3])
  edge4 = edge(p[2], p[3])
  return is_rect(p) and dist(edge1) == dist(edge2) and dist(edge1) == dist(edge3) and dist(edge1) == dist(edge4)


def main():
  points = [tuple(read_array(int)) for _ in range(8)]

  ok = False
  ans_sq = []
  ans_rect = []
  for bt in xrange(1<<8):
    rect = []
    sq = []
    for i in range(8):
      if (1<<i) & bt:
        rect.append(points[i])
      else:
        sq.append(points[i])
    if len(rect) != 4: continue

    if is_rect(rect) and is_sq(sq):
      ok = True
      ans_sq = []
      ans_rect = []
      for i in range(8):
        if (1<<i) & bt:
          ans_rect.append(i+1)
        else:
          ans_sq.append(i+1)

  print ok and 'YES' or 'NO'
  if ok:
    #print ans_sq[0], ans_sq[1], ans_sq[2], ans_sq[3]
    for p in ans_sq:
      print p,
    print ''
    print ans_rect[0], ans_rect[1], ans_rect[2], ans_rect[3]


main()
