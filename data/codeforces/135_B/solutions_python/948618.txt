import math

pts = []
for i in range(8):
    pts.append(map(float, raw_input().split()))

c = [0, 1, 2, 3]
cc = []

def nextC():
    global c
    if c[0] == 4:
        return False
    i = 0
    while i < 3:
        if c[i] < c[i + 1] - 1:
            break;
        i += 1
    c[i] += 1
    for j in xrange(i):
        c[j] = j
    return True
    
def testRect():
    global c, pts, cc
    sx = 0
    sy = 0
    for i in cc:
        p = pts[i]
        sx += p[0]
        sy += p[1]
    sx/=4
    sy/=4
    lst = [math.hypot(pts[i][0]-sx,pts[i][1]-sy) for i in cc]
    lst.sort()
    if lst[3]-lst[0]>1e-8:
        return False
    for i in range(1,4):
        sx1 = (pts[cc[0]][0]+pts[cc[i]][0])/2
        sy1 = (pts[cc[0]][1]+pts[cc[i]][1])/2
        if abs(sx-sx1)<1e-8 and abs(sy-sy1)<1e-8:
            t = cc[i]
            cc[i] = cc[1]
            cc[1] = t
            sx2 = (pts[cc[2]][0]+pts[cc[3]][0])/2
            sy2 = (pts[cc[2]][1]+pts[cc[3]][1])/2
            return abs(sx-sx2)<1e-8 and abs(sy-sy2)<1e-8
    return False

def test():
    global c, pts, cc
    sx = 0
    sy = 0
    for i in c:
        p = pts[i]
        sx += p[0]
        sy += p[1]
    sx/=4
    sy/=4
    lst = [math.hypot(pts[i][0]-sx,pts[i][1]-sy) for i in c]
    lst.sort()
    if lst[3]-lst[0]>1e-8:
        return False
    d = lst[0]
    x0 = pts[c[0]][0]
    y0 = pts[c[0]][1]
    lst = [math.hypot(pts[i][0]-x0,pts[i][1]-y0) for i in c]
    lst.sort()
    if abs(lst[3]-2*d)>1e-8 or abs(lst[2]-(2**0.5)*d)>1e-8 or lst[2]-lst[1]>1e-8:
        return False
    cc = [i for i in range(8) if i not in c]
    return testRect()

def prnResult():
    global c
    print 'YES'
    for i in c:
        print i + 1,
    print
    for i in cc:
        print i + 1,
    print

while True:
    if test():
        prnResult()
        exit()
    if not nextC():
        print 'NO'
        exit()

