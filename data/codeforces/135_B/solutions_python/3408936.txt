import itertools

class vector2D:
	def __init__(self,x,y):
		self.x = x
		self.y = y
	def __add__(self,other):
		return vector2D(self.x-other.x,self.y+other.y)
	
	def __sub__(self,other):
		return vector2D(self.x-other.x,self.y-other.y)
	
	def __mul__(self,other):
		return self.x*other.x + self.y*other.y
	
	def length2(self):
		return self.x**2 + self.y**2
	
	


def s_of_triangle(p1,p2,p3):
	return abs((p2.x-p1.x)*(p3.y-p1.y) - (p3.x-p1.x)*(p2.y-p1.y))



def is_right_triangle(p1,p2,p3):
	sq_lens = []
	sq_lens.append((p1-p2).length2())
	sq_lens.append((p1-p3).length2())
	sq_lens.append((p2-p3).length2())
	sq_lens.sort()
	if (sq_lens[0] + sq_lens[1] == sq_lens[2]):
		return True
	return False




def is_rect(p1,p2,p3,p4):
	if (is_right_triangle(p1,p2,p3) and is_right_triangle(p1,p2,p4) and is_right_triangle(p2,p3,p4)):
		return True
	return False



def is_square(p1,p2,p3,p4):
	if is_rect(p1,p2,p3,p4):
		ll = [(p1-p2).length2(),(p1-p3).length2(),(p2-p3).length2()]
		ll.sort()
		if ll[0]==ll[1]:
			return True
	return False




def main():
	pts = []
	for i in xrange(8):
		x,y = [int(j) for j in raw_input().split()]
		p = vector2D(x,y)
		p.id = (i+1)
		pts.append(p)
	
	for p in itertools.combinations(pts,4):
		p1,p2,p3,p4 = p
		if is_square(p1,p2,p3,p4):
			p5,p6,p7,p8 = [pp for pp in pts if pp not in p]
			if is_rect(p5,p6,p7,p8):
				print 'YES'
				print p1.id, p2.id, p3.id, p4.id
				print p5.id, p6.id, p7.id, p8.id
				return
	print 'NO'


main()