import sys
n = int(sys.stdin.readline())
s = sys.stdin.readline().strip()
chsbase = [0] * 30
for c in s:
    chsbase[ord(c) - ord('a')] += 1
class tree:
    def __init__(self, n, n_, k):
        self.n = n_
        self.arr = [0] * (self.n * 2)
        for i in xrange(n):
            self.add(i, k)
    def add(self, pos, k):
        pos += self.n
        while pos > 0:
            self.arr[pos] += k
            pos = pos / 2
    def work(self, cnt, node=1):
#        print self.arr
        while node < self.n:
            nnode = node * 2
            if cnt >= self.arr[nnode]:
                cnt -= self.arr[nnode]
                node = nnode + 1
            else:
                node = nnode
        self.add(node - self.n, -1)
        return node - self.n, cnt
func = lambda x: x if x >= n else func(x*2)
bit = [tree(n, func(1), x) for x in chsbase]
S = [s] * n
m = int(sys.stdin.readline())
for x in xrange(m):
    th, c = sys.stdin.readline().split()
    th = int(th) - 1
    k = ord(c) - ord('a')
    i, th = bit[k].work(th)
    pos = 0
    while pos < len(S[i]):
        if S[i][pos] == c:
            if not th: break
            else: th -= 1
        pos += 1
    if pos == len(S[i]) - 1:
        S[i] = S[i][:pos]
    elif pos >= 0:
        S[i] = S[i][:pos] + S[i][pos+1:]
#    print i, th, S[i]
print ''.join(S)
