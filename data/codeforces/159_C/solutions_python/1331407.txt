from bisect import bisect_right as search
 
def get_full(record,p):
    prev = 0
    i = search(record,p)
    while i != prev:
        p += i-prev
        prev = i
        i = search(record,p)
    return p,i

def get_idx(p,c,l):
    p -= 1
    z = len(indices[c])
    local_idx = p%z
    global_idx = p/z
    return global_idx*l + indices[c][local_idx]
    

indices = {}
k = int(raw_input())
s = raw_input().strip()
l = len(s)
record = {}

for i in range(l):
    try:
        indices[s[i]].append(i)
    except:
        indices[s[i]] = [i]
    record[s[i]] = []

exists = [True]*(l*k)
n = int(raw_input())
for _ in range(n):
    p,c = raw_input().split()
    p,i = get_full(record[c],int(p))
    record[c].insert(i,p)
    idx = get_idx(p,c,l)
    exists[idx] = False
    
remain = ""
for i in range(l*k):
    if exists[i]:
        remain += s[i%l]
print remain