from itertools import permutations

words = [raw_input() for x in range(6)]

def check_lengths(wl):
    assert(len(wl)==6)
    l = map(len,wl)
    return l[1] > 4 and l[4] > 4 and l[1] > max(l[0],l[2]) and l[4] > max(l[3],l[5]) and (l[0] + l[2] == l[1] +1) and (l[3] + l[5] == l[4] + 1)

def words_match(wl):
    to_match=[(wl[0][0],wl[3][0]),(wl[0][-1],wl[4][0]),(wl[3][-1],wl[1][0]),(wl[1][-1],wl[5][0]),
    (wl[2][0],wl[4][-1]),(wl[2][-1],wl[5][-1]),(wl[1][len(wl[0])-1],wl[4][len(wl[3])-1])]
    assert(len(to_match)==7)
    return all(z[0] == z[1] for z in to_match)

def works(word_list):
    return check_lengths(word_list) and words_match(word_list)

ans = None

def printpretty(words):
    wl = map(len,words)
    ret=[]
    ret.append(words[0]+"."*(wl[1]-wl[0]))
    ret+= [words[3][z]+"."*(wl[0]-2)+words[4][z]+"."*(wl[1]-wl[0]) for z in xrange(1,wl[3]-1)]
    ret.append(words[1])
    ret+= ["."*(wl[0]-1)+words[4][z+wl[3]-1]+"."*(wl[1]-wl[0]-1)+words[5][z] for z in xrange(1,wl[5]-1)]
    ret.append("."*(wl[0]-1)+words[2])
    return "\n".join(ret)

if min(map(len,words)) > 2:
    for c in permutations(words):
        if works(c) and (ans == None or printpretty(c) < printpretty(ans)):
            ans = c

if ans == None:
    print "Impossible"
else:
    print printpretty(ans)