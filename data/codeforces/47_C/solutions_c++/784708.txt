#include<algorithm>
#include<iostream>
#include<string>
#include<cstdio>
#include<vector>
#include<queue>
#include<set>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define FOR(x,y,z) for(int x=y;x<=z;++x)
#define FORD(x,y,z) for(int x=y;x>=z;--x)
#define FOReach(x,Z) for(__typeof((Z).begin()) x=(Z).begin();x!=(Z).end();++x)
#define REP(x,y) for(int x=0;x<y;++x)

#define PB push_back
#define ALL(X) (X).begin(),(X).end()
#define SZ(X) ((int)(X).size())
#define CLR(X,x) memset(X, x, sizeof(X))

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
#define debug printf
#else
#define debug(fmt, ...)
#endif


const int MAX = 100000;
const int INF = 1000000001;

string tab[6];

vector<string> out;

void go(string *t) {
	if(t[0].size() + t[5].size() != t[3].size() + 1)
		return;
	if(t[1].size() + t[4].size() != t[2].size() + 1)
		return;
	vector<string> res(t[2].size(), string(t[3].size(), '.'));
	REP(i,t[0].size())
		res[0][i] = t[0][i];
	REP(i,t[3].size())
		res[t[1].size()-1][i] = t[3][i];
	REP(i,t[5].size())
		res[t[2].size()-1][i+t[0].size()-1] = t[5][i];
	
	REP(i,t[1].size())
		if(res[i][0] == '.' || res[i][0] == t[1][i])
			res[i][0] = t[1][i];
		else
			return;
	REP(i,t[2].size())
		if(res[i][t[0].size()-1] == '.' || res[i][t[0].size()-1] == t[2][i])
			res[i][t[0].size()-1] = t[2][i];
		else
			return;
	REP(i,t[4].size())
		if(res[t[1].size()-1+i][t[3].size()-1] == '.' || res[t[1].size()-1+i][t[3].size()-1] == t[4][i])
			res[t[1].size()-1+i][t[3].size()-1] = t[4][i];
		else
			return;
	if(out.empty())
		out = res;
	else {
		if(res < out)
			out = res;
	}
}

void solve() {
	int per[6];
	REP(i,6)
		per[i] = i;
	string t[6];
	do
	{
		REP(i,6)
			t[i] = tab[per[i]];
		go(t);
	}
	while(next_permutation(per, per+6));
}

int main(int argc, char *argv[]) {
	REP(i,6)
		cin >> tab[i];
	solve();
	if(!out.empty()) {
		FOReach(i,out)
			cout << *i << endl;
	}
	else
		cout << "Impossible" << endl;
	return 0;
}

