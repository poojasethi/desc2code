#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

#define f(i, a, b) for(int i = a; i < b; i++)
#define rep(i, n)  f(i, 0, n)

int R, C;
char grid[50][50];
string s[6];

vector<string> convert() {

    vector<string> res;
    rep(i, R + 1)
        res.push_back(string(grid[i], grid[i] + C + 1));

    return res;

}

int go(int r, int c, int d, int idx, int term) {

    if(idx == 3 && term) {
        R = r, C = c;
        return 1;
    }
    if(idx == 6 && term)
        return R == r && C == c;

    string &t = s[idx];
    int l = t.length();
   
    // horizontal
    if(d == 0) {
        for(int j = 0; j < l; j++)
            if(grid[r][j + c] != t[j] && grid[r][j + c] != '.')
                return 0;
            else
                grid[r][j + c] = t[j];

        return go(r, c + l - 1, 1 - d, idx + 1, 1);
    }

    // vertical
    else {
        for(int i = 0; i < l; i++)
            if(grid[i + r][c] != t[i] && grid[i + r][c] != '.')
                return 0;
            else
                grid[i + r][c] = t[i];

        return go(r +  l - 1, c, 1 - d, idx + 1, 1);
    }
}

int main(){

    rep(i, 6) cin >> s[i];
    sort(s, s + 6);

    set<vector<string> > S;

    int ok = 0;
    do {

        memset(grid, '.', sizeof(grid));
        if(go(0, 0, 0, 0, 0) && go(0, 0, 1, 3, 0))
            S.insert(convert());

    }
    while(next_permutation(s, s + 6));

    if(S.size() == 0) printf("Impossible\n");
    else {

        vector<string> v = *S.begin();
        rep(i, v.size())
            cout << v[i] << endl;

    }
}
