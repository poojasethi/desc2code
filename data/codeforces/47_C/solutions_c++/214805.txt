#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <algorithm>
using namespace std;

int v[6] = {0, 1, 2, 3, 4, 5}, len[6];
char s[6][50], ans[50][50];
bool check() {

	if(len[v[3]] + len[v[5]] - 1 == len[v[4]]
		&& len[v[0]] + len[v[2]] - 1 == len[v[1]]
		&& s[v[0]][0] == s[v[3]][0]
		&& s[v[3]][len[v[3]] - 1] == s[v[1]][0]
		&& s[v[0]][len[v[0]] - 1] == s[v[4]][0]
		&& s[v[4]][len[v[3]] - 1] == s[v[1]][len[v[0]] - 1]
		&& s[v[4]][len[v[4]] - 1] == s[v[2]][0]
		&& s[v[1]][len[v[1]] - 1] == s[v[5]][0]
		&& s[v[2]][len[v[2]] - 1] == s[v[5]][len[v[5]] - 1])
		return true;
	return false;
}
void solve() {
	char g[50][50] = {0};
	for(int j = 0; j != len[v[0]]; ++j) g[j][0] = s[v[0]][j];
	for(int j = 0; j != len[v[1]]; ++j) g[j][len[v[3]] - 1] = s[v[1]][j];
	for(int j = 0; j != len[v[2]]; ++j) g[len[v[0]] + j - 1][len[v[4]] - 1] = s[v[2]][j];
	for(int j = 0; j != len[v[3]]; ++j) g[0][j] = s[v[3]][j];
	for(int j = 0; j != len[v[4]]; ++j) g[len[v[0]] - 1][j] = s[v[4]][j];
	for(int j = 0; j != len[v[5]]; ++j) g[len[v[1]] - 1][len[v[3]] + j - 1] = s[v[5]][j];
	
	for(int i = 0; i != len[v[1]]; ++i)
		for(int j = 0; j != len[v[4]]; ++j)
			if(!g[i][j]) g[i][j] = '.';	
	//for(int i = 0; i != len[v[1]]; ++i) puts(g[i]);
	//system("pause");
	if(!ans[0][0]) 
		memcpy(ans, g, sizeof ans);
	else {
		int f = 0;
		for(int i = 0; g[i][0]; ++i) {
			int t = strcmp(g[i], ans[i]);
			if(t == -1) { f = 1; break; } 
			else if(t == 1) break;
		}
		if(f) memcpy(ans, g, sizeof ans);
	}
}
int main() {
	for(int i = 0; i != 6; ++i) scanf("%s", s + i), len[i] = strlen(s[i]);
	do if(check()) solve();
	while(next_permutation(v, v + 6));
	if(!ans[0][0]) puts("Impossible");
	else for(int i = 0; ans[i][0]; ++i) puts(ans[i]);
	return 0;
}
