#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<string> print(vector<string > & word){
  vector<string> ans(word[4].size());
  for(size_t i=0;i<word[4].size();i++){
    for(size_t j =0;j<word[1].size();j++){
      ans[i] += '.';
    }
  }
  for(size_t i = 0;i<word[0].size();i++){
    ans[0][i] = word[0][i];
  }
  for(size_t i = 0;i<word[1].size();i++){
    ans[word[3].size()-1][i] = word[1][i];
  }
  for(size_t i = 0;i<word[2].size();i++){
    ans[word[4].size()-1][word[1].size()-i-1] = word[2][word[2].size()-i-1];
  }
  for(size_t i = 0;i<word[3].size();i++){
    ans[i][0] = word[3][i];
  }
  for(size_t i = 0;i<word[4].size();i++){
    ans[i][word[0].size()-1] = word[4][i];
  }
  for(size_t i = 0;i<word[5].size();i++){
    ans[word[4].size()-i-1][word[1].size()-1] = word[5][word[5].size()-i-1];
  }
  return ans;
}

bool possible(vector<string> & word){

  if(word[0].size() + word[2].size() -1 != word[1].size() ) return false;
  if(word[3].size() + word[5].size() -1 != word[4].size() ) return false;
  if(word[0][0] != word[3][0]) return false;
  if(word[0][word[0].size()-1] != word[4][0] ) return false;
  if(word[1][0] != word[3][word[3].size()-1]) return false;
  if(word[1][word[1].size()-1] != word[5][0]) return false;
  if(word[2][0] != word[4][word[4].size()-1]) return false;
  if(word[1][word[0].size()-1] != word[4][word[3].size()-1]) return false;
  if(word[2][word[2].size()-1] != word[5][word[5].size()-1]) return false;
  return true;
  
}

int main(){
  vector<string> word(6);
  for(int i= 0;i<6;i++){
    cin >> word[i];
  }
  sort(word.begin(), word.end());
  vector<vector<string> > ans;
  do{
    if(possible(word)){
      ans.push_back(print(word));
    }
  }while(next_permutation(word.begin(), word.end()));
  if(ans.size() ==0){
    cout << "Impossible" << endl;
  }else{
    sort(ans.begin(), ans.end());
    for(size_t i=0;i<ans[0].size();i++){
      cout << ans[0][i] << endl;
    }
  }
}
