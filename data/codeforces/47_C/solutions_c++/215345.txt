#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>

using namespace std;

struct node {
    int x,y;
    char r[31][31];
    node() {
        memset(r,'.',sizeof(r));
    }
    bool operator < (const node& rhs) const {
        int i=0;
        while (i<x&&i<rhs.x&&strcmp(r[i],rhs.r[i])==0)
            i++;
        return (i<x&&i<rhs.x)?((strcmp(r[i],rhs.r[i])<0)?true:false):false;
    }
};

string s[6];
vector<node> res;

inline void print(const node& n) {
    for (int i=0; i<n.x; i++) {
        for (int j=0; j<n.y; j++)
            cout<<n.r[i][j];
        cout<<endl;
    }
}

int main() {
    ios::sync_with_stdio(false);
    for (int i=0; i<6; i++)
        cin>>s[i];
    int c=720;
    do {
        if (s[1].size()==(s[0].size()+s[2].size()-1)&&s[4].size()==(s[3].size()+s[5].size()-1)&&s[0][0]==s[3][0]&&s[0][s[0].size()-1]==s[4][0]&&s[3][s[3].size()-1]==s[1][0]&&s[1][s[0].size()-1]==s[4][s[3].size()-1]&&s[1][s[1].size()-1]==s[5][0]&&s[4][s[4].size()-1]==s[2][0]&&s[5][s[5].size()-1]==s[2][s[2].size()-1]) {
            node n;
            n.x=s[4].size();
            n.y=s[1].size();
            for (unsigned int i=0; i<s[0].size(); i++)
                n.r[0][i]=s[0][i];
            for (int i=0; i<n.y; i++)
                n.r[s[3].size()-1][i]=s[1][i];
            int k=n.y-1;
            for (int i=s[2].size()-1; i>=0; i--)
                n.r[n.x-1][k--]=s[2][i];
            for (unsigned int i=0; i<s[3].size(); i++)
                n.r[i][0]=s[3][i];
            for (int i=0; i<n.x; i++)
                n.r[i][s[0].size()-1]=s[4][i];
            k=n.x-1;
            for (int i=s[5].size()-1; i>=0; i--)
                n.r[k--][n.y-1]=s[5][i];
            for (int i=0; i<n.x; i++)
                n.r[i][n.y]='\0';
            res.push_back(n);
        }
        next_permutation(s,s+6);
        c--;
    } while (c);
    if (res.size()) {
        if (res.size()>1)
            sort(res.begin(),res.end());
        print(res[0]);
    } else
        cout<<"Impossible"<<endl;
    return 0;
}
