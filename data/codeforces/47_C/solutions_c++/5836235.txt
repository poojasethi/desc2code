#include <set>
#include <cmath>
#include <stack>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <numeric>
#include <vector>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#define pi acos(-1.0)
#define INF 0x3f3f3f3f
#define clr(x)  memset(x,0,sizeof(x));
#define clrto(x,siz,y)  for(int xx=0;xx<=siz;xx++)  x[xx]=y;
#define clrset(x,siz)  for(int xx=0;xx<=siz;xx++)  x[xx]=xx;
#define clr_1(x) memset(x,-1,sizeof(x));
#define clrmax(x) memset(x,0x3f,sizeof(x));
#define clrvec(x,siz) for(int xx=0;xx<=siz;xx++)  x[xx].clear();
#define fop2   freopen(".in","r",stdin); //freopen(".out","w",stdout);
#define fop   freopen("in.txt","r",stdin);//freopen("out.txt","w",stdout);
#define myprogram By_135678942570
#define clrcpy(x,siz,y)  for(int xx=0;xx<siz;xx++)  x[xx]=y[xx];
#define pb push_back
using namespace std;
vector<string>res;
int check(char &a,char b)
{
	if(a!='.'&&a!=b)
		return 0;
	a=b;
	return 1;
}
int main()
{
	//fop;
	string s[11];
	for(int i=0;i<6;i++)
		cin>>s[i];
	sort(s,s+6);
	do
	{
		vector<string>restemp(s[0].size(),string(s[3].size(),'.'));
		int len[11]={0};
		for(int i=0;i<6;i++)
			len[i]=s[i].size();
		if(len[0]!=len[1]+len[2]-1)
			continue;
		if(len[3]!=len[4]+len[5]-1)
			continue;
		int can=1;
		for(int i=0;i<s[0].size();i++)
			can=can&check(restemp[i][s[4].size()-1],s[0][i]);
		for(int i=0;i<s[1].size();i++)
			can=can&check(restemp[i][0],s[1][i]);
		for(int i=0;i<s[2].size();i++)
			can=can&check(restemp[s[1].size()-1+i][s[3].size()-1],s[2][i]);
		for(int i=0;i<s[3].size();i++)
			can=can&check(restemp[s[1].size()-1][i],s[3][i]);
		for(int i=0;i<s[4].size();i++)
			can=can&check(restemp[0][i],s[4][i]);
		for(int i=0;i<s[5].size();i++)
			can=can&check(restemp[s[0].size()-1][s[4].size()-1+i],s[5][i]);
		if(can&&(res.size()==0||res>restemp))
		{
			res=restemp;
		}
	}while(next_permutation(s,s+6));
	if(res.size()==0)
		puts("Impossible");
	else
	{
		for(int i=0;i<res.size();i++)
			cout<<res[i]<<endl;
	}
}
 				  					   		   				 	