#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <cctype>

#define n 6

using namespace std;

int L[n];
vector< string >ans;
vector< string >S(n,"");
vector<string> temp;

void present()
{
	for( int i = 0 ; i < ans.size() ; ++i )
		cout << ans[i] << "\n";
	cout << "\n\n";
}

int main()
{
     while( cin >> S[0] )
     {
		for( int i = 1 ; i < n ; ++i )
			cin >> S[i];
		sort(S.begin(),S.end());
		bool ok = 0;
		do
		{
			for( int i = 0 ; i < n ; ++i )
				L[i] = S[i].size();
			if( L[0] + L[2] != L[1] + 1 )continue;
			if( L[3] + L[5] != L[4] + 1 )continue;
			if( S[0][0] != S[3][0] )continue;
			if( S[0][L[0]-1] != S[4][0] )continue;
			if( S[1][0] != S[3][L[3]-1] )continue;
			if( S[1][L[0]-1] != S[4][L[3]-1] )continue;			
			if( S[1][L[1]-1] != S[5][0] )continue;
			if( S[2][0] != S[4][L[4]-1] )continue;
			if( S[2][L[2]-1] != S[5][L[5]-1] )continue;
			vector<string> temp (L[4],string(L[1],'.'));
			for( int i = 0 ; i < L[0] ; ++i )
				temp[0][i] = S[0][i];
			for( int i = 0 ; i < L[1] ; ++i )
				temp[L[3]-1][i] = S[1][i];
			for( int i = 0 ; i < L[2] ; ++i )
				temp[L[4]-1][L[0]-1+i] = S[2][i];
			for( int i = 0 ; i < L[3] ; ++i )
				temp[i][0] = S[3][i];
			for( int i = 0 ; i < L[4] ; ++i )
				temp[i][L[0]-1] = S[4][i];
			for( int i = 0 ; i < L[5] ; ++i )
				temp[L[3]-1+i][L[1]-1] = S[5][i];
			if( ok == 0 )
			{
				ok = 1;
				ans = temp;	
			}else ans = min( ans , temp);
		}while( next_permutation(S.begin(),S.end()) );
		if( !ok )
			cout << "Impossible\n";
		else present();
     }
}
