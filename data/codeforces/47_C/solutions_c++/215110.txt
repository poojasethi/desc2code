#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#define pb push_back
#define mp make_pair
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define tr(c, i) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define rtr(c, i) for (typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); --i)
#define contains(c, x) ((c).find(x) != (c).end())
#define Contains(c, x) (find(all(c), x) != (c).end())
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, (n))
#define To_String to_string< char,std::char_traits<char>,std::allocator<char> >

typedef long long llong;
using namespace std;

int main()
{
	vector<vector<string> > res;
	vector<string> w(6);
	rep(i,6) cin >> w[i];
	sort(all(w));
	do {
		if (w[0].size() > w[3].size()) continue;
		if (w[1].size() > w[2].size()) continue;
		if (w[0][0] != w[1][0]) continue;
		if (w[0][w[0].size()-1] != w[2][0]) continue;
		if (w[3][0] != w[1][w[1].size()-1]) continue;
		if (w[3][w[0].size()-1] != w[2][w[1].size()-1]) continue;

		if (w[5].size() != w[3].size() - w[0].size() + 1) continue;
		if (w[4].size() != w[2].size() - w[1].size() + 1) continue;
		if (w[4][0] != w[3][w[3].size()-1]) continue;
		if (w[5][0] != w[2][w[2].size()-1]) continue;
		if (w[5][w[5].size()-1] != w[4][w[4].size()-1]) continue;

		vector<string> t(w[2].size(), string(w[3].size(), '.'));
		rep(i,w[0].size()) t[0][i]=w[0][i];
		REP(i,1,w[1].size()) t[i][0]=w[1][i];
		REP(i,1,w[2].size()) t[i][w[0].size()-1]=w[2][i];
		rep(i,w[3].size()) t[w[1].size()-1][i]=w[3][i];
		REP(i,1,w[4].size()) t[w[1].size()-1+i][w[3].size()-1]=w[4][i];
		REP(i,1,w[5].size()) t[w[2].size()-1][w[0].size()-1+i]=w[5][i];

		res.pb(t);
	} while (next_permutation(all(w)));
	if (!res.empty()) {
		sort(all(res));
		rep(i, res[0].size()) cout << res[0][i] << endl;
	}
	else {
		cout << "Impossible" << endl;
	}
	return 0;
}
