#include<algorithm>
#include<iostream>
#include<cstring>
#include<cctype>
#include<cstdio>

using namespace std;

int p[6] = { 0 , 1 , 2 , 3 , 4 , 5 };
string str[6];
char ans[100][100] , res[100][100];
int len[6] , n , m;

bool draw( int i , int r , int c , int p ) {
	if ( p == 0 ) {
		for ( int j = 0 ; j < len[i] ; j++ ) {
			if ( ans[r][c + j] != '.' && ans[r][c + j] != str[i][j] ) return false;
			ans[r][c + j] = str[i][j];
		}
	} else {
		for ( int j = 0 ; j < len[i] ; j++ ) {
			if ( ans[r + j][c] != '.' && ans[r + j][c] != str[i][j] ) return false;
			ans[r + j][c] = str[i][j];
		}
	}
	return true;
}

bool check( int N , int M ) {
	if ( n == 0 ) return true;
	for ( int i = 0 ; i < N && i < n ; i++ ) {
		string str1 , str2;
		for ( int j = 0 ; j < M ; j++ ) str1 += ans[i][j];
		for ( int j = 0 ; j < m ; j++ ) str2 += res[i][j];
		if ( str1 < str2 ) return true;
		if ( str1 > str2 ) return false;
	}
	return false;
}

bool solve() {
	if ( len[p[0]] + len[p[4]] - 1 != len[p[2]] ) return false;
	if ( len[p[1]] + len[p[5]] - 1 != len[p[3]] ) return false;
	for ( int i = 0 ; i < len[p[3]] ; i++ )
		for ( int j = 0 ; j < len[p[2]] ; j++ )
			ans[i][j] = '.';
	if ( !draw( p[0] , 0 , 0 , 0 ) ) return false;
	if ( !draw( p[1] , 0 , 0 , 1 ) ) return false;
	if ( !draw( p[2] , len[p[1]] - 1 , 0 , 0 ) ) return false;
	if ( !draw( p[3] , 0 , len[p[0]] - 1 , 1 ) ) return false;
	if ( !draw( p[4] , len[p[3]] - 1 , len[p[0]] - 1 , 0 ) ) return false;
	if ( !draw( p[5] , len[p[1]] - 1 , len[p[2]] - 1 , 1 ) ) return false;
	if ( check( len[p[3]] , len[p[2]] ) ) {
		n = len[p[3]];
		m = len[p[2]];
		for ( int i = 0 ; i < n ; i++ )
			for ( int j = 0 ; j < m ; j++ )
				res[i][j] = ans[i][j];
	}
	
	return true;
}

int main() {
	for ( int i = 0 ; i < 6 ; i++ ) {
		cin >> str[i];
		len[i] = str[i].length();
	}
	do {
		solve();
	} while ( next_permutation( p , p + 6 ) );
	
	if ( n == 0 ) printf( "Impossible\n" );
		else {
			for ( int i = 0 ; i < n ; i++ ) {
				for ( int j = 0 ; j < m ; j++ )
					printf( "%c" , res[i][j] );
				printf( "\n" );
			}
		}
	
	return 0;
}
