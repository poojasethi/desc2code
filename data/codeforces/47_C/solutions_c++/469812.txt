#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <iterator>
#include <limits>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;


/* Prewritten code begins */
#define VS          vector<string>
#define REP(i,n)    for(int i=0; i<(n); ++i)
#define SIZE(x)     (int)(x).size()
#define FORE(i,c)   for(VAR(i,(c).begin()); i!=(c).end(); ++i)
#define VAR(i,v)    __typeof(v) i=(v)
/* Prewritten code ends */

string s[6];
int l[6];
VS res, ret;
int main() {
	ret.assign(50,string(50,'z'));
	REP(i,6) cin >> s[i];
	sort(s, s+6);
	do {
		REP(i,6) l[i] = SIZE(s[i]);
		if(l[2] != l[0]+l[4]-1) goto C;
		if(l[3] != l[1]+l[5]-1) goto C;
		if(s[0][0] != s[1][0] || s[0][l[0]-1] != s[3][0]) goto C;
		if(s[2][0] != s[1][l[1]-1] || s[2][l[0]-1] != s[3][l[1]-1] || s[2][l[2]-1] != s[5][0]) goto C;
		if(s[4][0] != s[3][l[3]-1] || s[4][l[4]-1] != s[5][l[5]-1]) goto C;

		res.assign(l[3],string(l[2],'.'));
		REP(i,l[0]) res[0][i] = s[0][i];
		REP(i,l[2]) res[l[1]-1][i] = s[2][i];
		REP(i,l[4]) res[l[3]-1][l[0]-1+i] = s[4][i];

		REP(i,l[1]) res[i][0] = s[1][i];
		REP(i,l[3]) res[i][l[0]-1] = s[3][i];
		REP(i,l[5]) res[l[1]-1+i][l[2]-1] = s[5][i];

		if(res < ret) ret = res;
C:;	} while(next_permutation(s,s+6));
 	if(ret[0][0]=='z') cout << "Impossible" << endl;
	else FORE(i,ret) cout << *i << endl;
	return 0;
}
