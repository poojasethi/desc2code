#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<sstream>
#include<cassert>
#include<queue>
#include<stack>
#include<bitset>
#include<cstring>

#define REP(i,b,n) for(int i=b;i<n;i++)
#define rep(i,n)   REP(i,0,n)
#define ALL(C)     (C).begin(),(C).end()
#define FOR(it,o)  for(__typeof((o).begin()) it=(o).begin(); it!=(o).end(); ++it)

using namespace std;

class Pattern{
public:
  vector<vector<char> > V;
  bool operator<(const Pattern &P)const{
    return V > P.V;
  }
};

int main(){
  vector<string> s(6);
  rep(i, 6)cin >> s[i];
  sort(ALL(s));
  Pattern ANS; 
  bool first = false;
  do{
    if(s[0].length() + s[5].length() -1 != s[3].length())continue;
    if(s[1].length() + s[4].length() -1!= s[2].length())continue;
    if(s[0][0] != s[1][0])continue;
    if(s[0][s[0].length()-1] != s[2][0])continue;
    if(s[1][s[1].length()-1] != s[3][0])continue;
    if(s[3][s[0].length()-1] != s[2][s[1].length()-1])continue;
    if(s[3][s[3].length()-1] != s[4][0])continue;
    if(s[2][s[2].length()-1] != s[5][0])continue;
    if(s[4][s[4].length()-1] != s[5][s[5].length()-1])continue;
    vector<vector<char> > V(s[2].length());
    rep(i, s[2].length()){
      V[i] = vector<char>(s[3].length(), '.'); 
      V[i][s[0].length()-1] = s[2][i];
    }
    rep(j, s[3].length()){
      if(j < s[0].length())V[0][j] = s[0][j];
      //  else V[0][j] = ' ';
    }
    rep(j, s[3].length()){
      
      V[s[1].length()-1][j] = s[3][j];
    }
    rep(i, s[1].length()){
      V[i][0] = s[1][i];
    }
    rep(i, s[2].length()){
      if(i >= s[1].length() - 1){
        V[i][s[3].length()-1] = s[4][i-s[1].length()+1];
      }
    }
    REP(i, s[0].length(), s[3].length()){
      V[s[2].length()-1][i] = s[5][i - s[0].length() + 1];
    }
    Pattern p;
    p.V = V;
    if(!first)ANS = p;
    else ANS = max(p, ANS);
    first = true;
  }while(next_permutation(ALL(s)));
  if(!first){
    cout << "Impossible" << endl;
    return 0;
  }
  Pattern p = ANS;
  rep(i, p.V.size()){
    rep(j, p.V[i].size()){
      cout << p.V[i][j];
    }
    cout << endl;
  }
  return 0;
}
