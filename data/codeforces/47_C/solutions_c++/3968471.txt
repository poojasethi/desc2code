#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
#include <string>
#include <vector>
#define M 600
#define REP(i,n) for (int i=0; i<n; i++)
using namespace std;

typedef vector<string> vs;
string s[10];
bool deu;
int du[]={0,1,0,1,0,1};
int dv[]={1,0,1,0,1,0};
char t[M][M];

vs res;
bool us[10];
int fx,fy;

void busca(int x, int y, int p) {
    if (p==3 && x*y) {
        fx=x; fy=y;
        busca(0,0,p);
        return;
    }
    if (p==6) {
        if (x!=fx || y!=fy || t[fx-1][fy-1]!='.' || t[1][1]!='.') return;
        
        vs cr(fx+1);
        REP(i,fx+1)
            REP(j,fy+1) cr[i].push_back(t[i][j]);
            
        if (deu==0 || cr<res) {
            deu=1;
            res=cr;
        }
        return;
    }
    
    REP(i,6) if (!us[i]) {
        bool ok=1;
        vector<char> aux;
        
        REP(k,s[i].size()) {
            int nx=x+du[p]*k;
            int ny=y+dv[p]*k;
            
            if (nx<0 || ny<0 || (t[nx][ny]!='.' && t[nx][ny]!=s[i][k])) { 
                ok=0; break;
            }
            aux.push_back(t[nx][ny]);
            t[nx][ny]=s[i][k];
        }
        
        if (ok) {
            us[i]=1;
            busca(x+du[p]*(s[i].size()-1),y+dv[p]*(s[i].size()-1),p+1);
            us[i]=0;
        }
        REP(k,aux.size()) {
            int nx=x+du[p]*k;
            int ny=y+dv[p]*k;
            
            t[nx][ny]=aux[k];
        }
    }
}

int main() {
    while (1) {
        REP(i,6) {
            char st[100];
            if (scanf(" %s",st)!=1) return 0;
            s[i]=st;
        }
        
        sort(s,s+6);
        
        deu=0;
        memset(t,'.',sizeof(t));
        busca(0,0,0);
        
        if (!deu) printf("Impossible\n");
        else {
            REP(i,res.size()) {
                REP(j,res[i].size()) printf("%c",res[i][j]);
                printf("\n");
            }
        }
    }
    return 0;
}
