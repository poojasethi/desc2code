#include<bits/stdc++.h>
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define pii pair<int, int>
#define sz(a) (int)a.size()
#define fit(ta, a) for(ta::iterator i = a.begin(); i != a.end(); advance(i, 1))
#define rep(i, a, n) for(int i = a; i < n; i++)
#define dec(i, a, n) for(int i = a; i >= n; i--)
#define clr(a,v) memset(a,v,sizeof(a))
#define all(a) a.begin(),a.end()
#define debug printf
#define ler freopen("in","r",stdin)
#define MAXN 101010
typedef long long lint;
using namespace std;

vector<vector<vector<char> > >ans;
string s[6];

char ult(string a){return a[sz(a)-1];}
char pult(string a, string b){ return b[sz(a)-1];}

int main(){
    int aux[6];
    rep(i,0,6) aux[i]=i;
    rep(i,0,6) cin>>s[i];
    do{
        if(sz(s[aux[0]]) + sz(s[aux[5]]) - 1 != sz(s[aux[3]])) continue;
        if(sz(s[aux[1]]) + sz(s[aux[4]]) - 1 != sz(s[aux[2]])) continue;
        if(s[aux[0]][0] != s[aux[1]][0] || ult(s[aux[0]]) != s[aux[2]][0] ||
           ult(s[aux[1]]) != s[aux[3]][0] || ult(s[aux[3]]) != s[aux[4]][0] ||
           s[aux[5]][0] != ult(s[aux[2]]) || ult(s[aux[5]]) != ult(s[aux[4]]) ||
           pult(s[aux[0]],s[aux[3]]) != pult(s[aux[1]],s[aux[2]]))
                continue;
        vector<vector<char> >tans(sz(s[aux[2]]));
        rep(i,0,sz(tans)) tans[i].resize(sz(s[aux[3]]), '.');
        rep(i,0,sz(s[aux[0]])) tans[0][i] = s[aux[0]][i];
        rep(i,0,sz(s[aux[1]])) tans[i][0] = s[aux[1]][i];
        rep(i,0,sz(s[aux[2]])) tans[i][sz(s[aux[0]])-1] = s[aux[2]][i];
        rep(i,0,sz(s[aux[3]])) tans[sz(s[aux[1]])-1][i] = s[aux[3]][i];
        rep(i,0,sz(s[aux[4]])) tans[i+sz(s[aux[1]])-1][sz(s[aux[3]])-1] = s[aux[4]][i];
        rep(i,0,sz(s[aux[5]])) tans[sz(s[aux[2]])-1][i+sz(s[aux[0]])-1] = s[aux[5]][i];
        ans.pb(tans);
    }while(next_permutation(aux,aux+6));
    if(sz(ans)==0){
        printf("Impossible\n");
        return 0;
    }
    sort(all(ans));
    rep(i,0,sz(ans[0])){
        rep(j,0,sz(ans[0][i])) printf("%c",ans[0][i][j]);
        printf("\n");
    }
}
