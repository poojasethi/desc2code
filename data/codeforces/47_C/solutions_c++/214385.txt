#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

string s[6];
int p[6];

int a, b, c, d, ab, cd;
int found = 0;
vector <string> best, tmp;

void push (int i, int x, int y)
{
	//cout << "push" << endl;

	for (int xx = 0, yy = 0; xx < s[p[i]].size()  && yy < s[p[i]].size(); ((i % 2)?xx:yy) += 1)
		tmp[xx + x][yy + y] = s[p[i]][(i % 2)?xx:yy];

	//cout << "/push" << endl;
}

void makeString(int x, int y)
{
	//cout << "make string" << x << ' ' << y << endl;

	tmp.resize (x);
	for (int i = 0; i < x; i++)
	{
		tmp[i].resize (y);
		for (int j = 0; j < y; j++)
			tmp[i][j] = '.';
	}

	//cout << "After" << endl;
	
	push (0, 0, 0);
	push (5, 0, 0);
	push (1, 0, a - 1);
	push (4, d - 1, 0);
	push (2, ab - 1, a - 1);
	push (3, d - 1, cd - 1);

	if (!found)
	{
		found = 1;
		best = tmp;
		return;
	}

	for (int i = 0; i < min (best.size(), tmp.size()); i++)
	{
		if (best[i] != tmp[i])
		{
			if (best[i] > tmp[i])
				best = tmp;
			return;
		}
	}

	if (best.size() > tmp.size())
		best = tmp;
}

int main()
{
	for (int i = 0; i < 6; i++)
		cin >> s[i];

	for (int i = 0; i < 6; i++)
		p[i] = i;

	do
	{
		//for (int i = 0; i < 6; i++)
		//	cout << p[i] << ' ';
		//cout << endl;

		a = s[p[0]].size();
		b = s[p[2]].size();
		c = s[p[3]].size();
		d = s[p[5]].size();
		ab = s[p[1]].size();
		cd = s[p[4]].size();

		if (cd != a + b - 1 || ab != c + d - 1)
			continue;

		if (s[p[0]][0] != s[p[5]][0] ||
			s[p[0]][a - 1] != s[p[1]][0] ||
			s[p[5]][d - 1] != s[p[4]][0] ||
			s[p[1]][d - 1] != s[p[4]][a - 1] ||
			s[p[1]][ab - 1] != s[p[2]][0] ||
			s[p[4]][cd - 1] != s[p[3]][0] || 
			s[p[2]][b - 1] != s[p[3]][c - 1] )
			continue;

		makeString(ab, cd);

	} while (next_permutation (p, p + 6));

	if (!found)
	{
		cout << "Impossible" << endl;
		return 0;
	}

	for (int i = 0; i < best.size(); i++)
		cout << best[i] << endl;

	return 0;
}
