#include <cstring>
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

string w[6];
char res[77][77];
char tab[77][77];
int xres, yres, xtab, ytab, foi;

void pack() {
	xtab = w[2].size(), ytab = w[3].size();
	for(int x = 0; x < 77; x++)
		for(int y = 0; y < ytab; y++)
			if(!tab[x][y]) tab[x][y] = '.';
}

void update() {
	int up = 1;
	if(foi++) for(int x = 0; x < xtab; x++) {
		if(strcmp(tab[x],res[x]) < 0) {
			break;
		}
		if(strcmp(tab[x],res[x]) > 0) {
			up = 0;
			break;
		}
	}
	if(up) {
		xres = xtab, yres = ytab;
		memcpy(res,tab,sizeof(tab));
	}
}

bool can(int x, int y, int ix, int iy, int q) {
	for(int i = 0; i< w[q].size(); i++) {
		if(tab[x][y] && tab[x][y] != w[q][i]) return false;
		tab[x][y] = w[q][i], x += ix, y += iy;
	}
	return true;
}

void put(int x, int y, int ix, int iy, int q) {
	for(int i = 0; i< w[q].size(); i++) {
		tab[x][y] = w[q][i], x += ix, y += iy;
	}
}

int main() {
	for(int i = 0; i < 6; i++) cin >> w[i];
	sort(w,w+6);
	xres = yres = +1e9;
	do {
		if(w[0].size() + w[4].size() - 1 != w[3].size()) continue;
		if(w[1].size() + w[5].size() - 1 != w[2].size()) continue;
		memset(tab,0,sizeof(tab));
		// #0
		put(0,0, +0,+1, 0);
		// #1
		if(!can(0,0, +1,+0,1)) continue;
		put(0,0, +1,+0,1);
		// #2
		if(!can(0,w[0].size()-1, +1,+0,2)) continue;
		put(0,w[0].size()-1, +1,+0,2);
		// #3
		if(!can(w[1].size()-1,0, +0,+1, 3)) continue;
		put(w[1].size()-1,0, +0,+1, 3);
		// #4
		if(!can(w[2].size()-1,w[0].size()-1, +0,+1, 4)) continue;
		put(w[2].size()-1,w[0].size()-1, +0,+1, 4);
		// #5
		if(!can(w[1].size()-1,w[3].size()-1, +1,+0,5)) continue;
		put(w[1].size()-1,w[3].size()-1, +1,+0,5);
		pack();
		update();
	} while(next_permutation(w,w+6));
	if(!foi) cout << "Impossible" << endl;
	else {
		for(int x = 0; x < xres; x++) {
			cout << res[x] << endl;
		}	
	}
	return 0;
}
