#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
typedef pair<long long,long long> T;

long long ip(T a,T b) {
  return a.first*b.first+a.second*b.second;
}

T sub(T a,T b) {
  return make_pair(a.first-b.first,a.second-b.second);
}

long long dist2(T a,T b) {
  return (a.first-b.first)*(a.first-b.first)+(a.second-b.second)*(a.second-b.second);
}

bool solve(T as,T ae,T bs,T be,T cs,T ce) {
  if (ae==bs)
    swap(as,ae);
  else if (be==as)
    swap(bs,be);
  else if (be==ae)
    swap(as,ae),swap(bs,be);
  if (as!=bs) return false;
  
  T av=sub(ae,as);
  T bv=sub(be,bs);
  long long v=ip(av,bv);
  if (v<0) return false;
  if (v*v==ip(av,av)*ip(bv,bv)) return false;

  T ascv=sub(cs,as);
  v=ip(av,ascv);
  if (v*v!=ip(av,av)*ip(ascv,ascv))
    swap(cs,ce);
  ascv=sub(cs,as);
  T aecv=sub(cs,ae);
  v=ip(ascv,aecv);
  if (v>0)
    return false;
  if (v*v!=ip(ascv,ascv)*ip(aecv,aecv))
    return false;
  long long r1=dist2(cs,as);
  long long r2=dist2(cs,ae);
  if (r1==0 || r2==0)
    return false;
  if (r2>r1*16 || r1>r2*16)
    return false;

  T bscv=sub(ce,bs);
  T becv=sub(ce,be);
  v=ip(bscv,becv);
  if (v>0)
    return false;
  if (v*v!=ip(bscv,bscv)*ip(becv,becv))
    return false;
  r1=dist2(ce,bs);
  r2=dist2(ce,be);
  if (r1==0 || r2==0)
    return false;
  if (r2>r1*16 || r1>r2*16)
    return false;

  return true;
}

int main() {
  long long t;
  cin>>t;
  pair<long long,long long> sp[3],ep[3];
  for (long long ti=0;ti<t;ti++) {
    for (long long i=0;i<3;i++)
      cin>>sp[i].first>>sp[i].second>>ep[i].first>>ep[i].second;
    long long a[3]={0,1,2};
    bool right=false;
    do {
      if (solve(sp[a[0]],ep[a[0]],sp[a[1]],ep[a[1]],sp[a[2]],ep[a[2]])) {
        right=true;
      }
    } while (next_permutation(a,a+3));
    if (right)
      cout<<"YES"<<endl;
    else
      cout<<"NO"<<endl;
  }
  return 0;
}
