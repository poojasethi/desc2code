#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <complex>
#include <cmath>
#include <cstdio>
using namespace std;
typedef complex<double> point;
static const double EPS = 1e-9;

typedef pair<point, point> line;

double pon(const line& a, const point& p)
{
	point v = p - a.first;
	point u = a.second - a.first;
	point f = v/u;
	if( abs(f.imag())>EPS )
		return -1;
	return f.real();
}

bool isA_(const line& a, const line& b, const line& c)
{
	if( a.first != b.first )
		return false;
	double ag = arg( (a.second-a.first) / (b.second-b.first) );
	if( abs(ag) > atan2(1,0)+EPS )
		return false;

	double p1 = pon(a, c.first);
	double p2 = pon(b, c.second);
	if( p1<0.2-EPS || 0.8+EPS<p1 )
		return false;
	if( p2<0.2-EPS || 0.8+EPS<p2 )
		return false;

	return true;
}

bool isA(const line& a, const line& b, const line& c)
{
	line aa, bb, cc;
	for(int i=0; i<8; ++i)
	{
		aa.first = i&1 ? a.first : a.second;
		aa.second = i&1 ? a.second : a.first;
		bb.first = i&2 ? b.first : b.second;
		bb.second = i&2 ? b.second : b.first;
		cc.first = i&4 ? c.first : c.second;
		cc.second = i&4 ? c.second : c.first;
		if( isA_(aa,bb,cc) )
			return true;
	}
	return false;
}

int main()
{
	int t;
	cin >> t;
	while(t--)
	{
		line ls[3];
		for(int i=0; i<3; ++i)
		{
			double x1, y1, x2, y2;
//			scanf("%lf%lf%lf%lf",&x1,&y1,&x2,&y2);
			cin >> x1 >> y1 >> x2 >> y2;
			ls[i].first = point(x1,y1);
			ls[i].second = point(x2,y2);
		}

		if( isA(ls[0], ls[1], ls[2])
		 || isA(ls[0], ls[2], ls[1])
		 || isA(ls[1], ls[0], ls[2])
		 || isA(ls[1], ls[2], ls[0])
		 || isA(ls[2], ls[0], ls[1])
		 || isA(ls[2], ls[1], ls[0]) )
			cout << "YES" << endl;
		else
			cout << "NO" << endl;
	}
}
