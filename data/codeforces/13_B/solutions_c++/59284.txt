#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <complex>
#include <cmath>
#include <cstdio>
using namespace std;
typedef long long LL;
typedef complex<double> point;
static const double EPS = 1e-9;

struct line
{
	point p, q;
};

double pon(const line& a, const point& p)
{
	point v = p - a.p;
	point u = a.q - a.p;
	point f = v/u;
	if( abs(f.imag())>EPS )
		return -1;
	return f.real();
}

bool isA_(const line& a, const line& b, const line& c)
{
	if( a.p != b.p )
		return false;
	double ag = arg( (a.q-a.p) / (b.q-b.p) );
	if( abs(ag) > M_PI/2+EPS )
		return false;

	double p1 = pon(a, c.p);
	double p2 = pon(b, c.q);
	if( p1<0.2-EPS || 0.8+EPS<p1 )
		return false;
	if( p2<0.2-EPS || 0.8+EPS<p2 )
		return false;

	return true;
}

bool isA(line a, line b, line c)
{
	for(int i=0; i<8; ++i)
	{
		if( isA_(a,b,c) )
			return true;
		swap(a.p, a.q);
		if(i%2==0) swap(b.p, b.q);
		if(i%4==0) swap(c.p, c.q);
	}
	return false;
}

bool allPerm( line ls[3] )
{
	int ix[] = {0,1,2};
	do
		if( isA( ls[ix[0]], ls[ix[1]], ls[ix[2]] ) )
			return true;
	while( next_permutation(&ix[0], &ix[3]) );
	return false;
}

int main()
{
	int t;
	cin >> t;
	while(t--)
	{
		line ls[3];
		for(int i=0; i<3; ++i)
		{
			double x1, y1, x2, y2;
			scanf("%lf%lf%lf%lf",&x1,&y1,&x2,&y2);
			ls[i].p = point(x1,y1);
			ls[i].q = point(x2,y2);
		}
		
		cout << (allPerm(ls) ? "YES" : "NO") << endl;
	}
}
