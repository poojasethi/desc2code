#include<cstdio>
#include<algorithm>
#include<cmath>
using namespace std;
int sgn(double x){
    if(x < 1e-12 && x > -1e-12) return 0;
    return x < 0 ? -1 : 1;
}
typedef struct point{
    double x,y;
    void read(){ scanf("%lf%lf",&x,&y); }
}Point;
typedef struct line{
    point p1,p2;
    void read(){ p1.read(), p2.read(); }
}Line;
Line l[3];
int t,d[3];
bool same(point p1,point p2){
    return( sgn(p1.x-p2.x) == 0 && sgn(p1.y-p2.y) == 0 );
}
double dot(point p1,point p2,point p3){
    return (p2.x-p1.x)*(p3.x-p1.x) + (p2.y-p1.y)*(p3.y-p1.y);
}
double cross(point p1,point p2,point p3){
    return (p2.x-p1.x)*(p3.y-p1.y) - (p2.y-p1.y)*(p3.x-p1.x);
}
double dist(point p1,point p2){
    return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));
}
bool chk(int i,int j,int k){
    if(same(l[i].p2,l[j].p2)) swap(l[i].p1,l[i].p2);
    if(same(l[i].p1,l[j].p2)) swap(l[j].p1,l[j].p2);
    if(same(l[i].p1,l[j].p1)){
        double tmplf = dot(l[i].p1,l[i].p2,l[j].p2),d1 = dist(l[i].p1,l[i].p2),d2 = dist(l[j].p1,l[j].p2);
        if(sgn(tmplf) >= 0){
            if(sgn(dot(l[k].p2,l[i].p1,l[i].p2)) <= 0 && sgn(cross(l[k].p2,l[i].p1,l[i].p2)) == 0 && sgn(dot(l[k].p1,l[j].p1,l[j].p2)) <= 0 && sgn(cross(l[k].p1,l[j].p1,l[j].p2)) == 0)
                swap(l[k].p1,l[k].p2);
            if(sgn(dot(l[k].p1,l[i].p1,l[i].p2)) <= 0 && sgn(cross(l[k].p1,l[i].p1,l[i].p2)) == 0 && sgn(dot(l[k].p2,l[j].p1,l[j].p2)) <= 0 && sgn(cross(l[k].p2,l[j].p1,l[j].p2)) == 0){
                if(sgn(min(dist(l[i].p1,l[k].p1),dist(l[i].p2,l[k].p1))/d1-0.20) >= 0 && sgn(min(dist(l[j].p1,l[k].p2),dist(l[j].p2,l[k].p2))/d2-0.20) >= 0)
                    return true;
            }
        }
    }
    return false;
}
int main(){
    scanf("%d",&t);
    while(t--){
        for(int i=0;i<3;i++)
            l[i].read(),d[i] = i;
        do{
            if(chk(d[0],d[1],d[2])){
                printf("YES\n");
                goto out;
            }
        }while(next_permutation(d,d+3));
        printf("NO\n");
        out:;
    }
    return 0;
}