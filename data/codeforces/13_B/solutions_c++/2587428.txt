#include <cstdio>
#include <algorithm>
#include <iostream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <numeric>
#include <sstream>
#include <bitset>
#include <cctype>
#include <string>
#include <vector>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>
using namespace std;

int sgn(long long x) { return x > 0 ? 1 : x < 0 ? -1 : 0; }

struct P {
    long long x, y;
    P(long long x = 0, long long y = 0) : x(x), y(y) {}
    void G() { cin >> x >> y; }
    double len() { return sqrt(x * x + y * y + .0); }
};

bool operator == (P a, P b) { return a.x == b.x && a.y == b.y; }
P operator + (P a, P b) { return P(a.x + b.x, a.y + b.y); }
P operator - (P a, P b) { return P(a.x - b.x, a.y - b.y); }
long long dot(P a, P b) { return a.x * b.x + a.y * b.y; }
long long det(P a, P b) { return a.x * b.y - a.y * b.x; }

P A[10], W[10];

bool ok(P a, P b, P c) {
    return sgn(det(c - b, c - a)) == 0 && sgn(dot(c - b, c - a)) != 1 && (c - a).len() * 5 > (a - b).len() - 1e-9 && (c - b).len() * 5 > (a - b).len() - 1e-9;
}

bool sharp(P a, P b, P c) {
    return sgn(det(a - b, a - c)) != 0 && dot(b - a, c - a) / (a - b).len() / (a - c).len() > -1e-9;
}

int main() {
    ios :: sync_with_stdio(false);
    int T;
    cin >> T;
    for (; T--; ) {
        int a, b;
        for (int i = 0; i < 6; i++) A[i].G();
        for (int i = 0; i < 6; i++)
        for (int j = 0; j < 6; j++)
        if (i / 2 != j / 2 && A[i] == A[j]) {
            a = i;
            b = j;
            break;
        }
        W[0] = A[a];
        W[1] = A[a / 2 * 4 + 1 - a];
        W[2] = A[b / 2 * 4 + 1 - b];
        int w = (3 - a / 2 - b / 2) * 2;
    //  cout << sharp(W[0], W[1], W[2]) << ok(W[0], W[1], A[w]) << ok(W[0], W[2], A[w + 1]) << ok(W[0], W[1], A[w + 1]) << ok(W[0], W[2], A[w]) << endl;
        if ((sharp(W[0], W[1], W[2])) && (ok(W[0], W[1], A[w]) && ok(W[0], W[2], A[w + 1]) || ok(W[0], W[1], A[w + 1]) && ok(W[0], W[2], A[w])))
            cout << "YES\n";
        else
            cout << "NO\n";
    }
}