#include<iostream>
#include<vector>
#include<sstream>
#include<algorithm>
#include<numeric>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<complex>
#include<set>
#include<map>
#include<queue>
#include<cassert>

using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define rp(i,c) rep(i,(c).size())
#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int,int> pi;
typedef long long ll;

const int inf=1<<28;
const double INF=1e12,EPS=1e-9;

typedef complex<double> P;
namespace std {
  bool operator < (const P& a, const P& b) {
    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);
  }
}
double cross(const P& a, const P& b) {
  return imag(conj(a)*b);
}
double dot(const P& a, const P& b) {
  return real(conj(a)*b);
}
struct L : public vector<P> {
  L(const P &a, const P &b) {
    push_back(a); push_back(b);
  }
};
int ccw(P a, P b, P c) {
  b -= a; c -= a;
  if (cross(b, c) > 0)   return +1;       // counter clockwise
  if (cross(b, c) < 0)   return -1;       // clockwise
  if (dot(b, c) < 0)     return +2;       // c--a--b on line
  if (norm(b) < norm(c)) return -2;       // a--b--c on line
  return 0;
}
P p[3][2];
bool good(int l,int pt,int k){
	if(ccw(p[l][0],p[l][1],p[pt][k])!=0)return 0;
	double r=abs(p[pt][k]-p[l][0])/abs(p[l][1]-p[l][0]);
	return 0.2-EPS<r&&r<0.8+EPS;
}
bool solve(){
	rep(a,3)rep(b,3)if(a!=b)rep(ad,2)rep(bd,2)if(p[a][ad]==p[b][bd]){
		if(dot(p[a][1-ad]-p[a][ad],p[b][1-bd]-p[b][bd])<-EPS||
			abs(cross(p[a][1-ad]-p[a][ad],p[b][1-bd]-p[b][bd]))<EPS)continue;
		rep(k,2)if(good(a,3-a-b,k)&&good(b,3-a-b,1-k))return 1;
	}
	return 0;
}
void run()
{
	int t; cin>>t;
	while(t--){
		rep(i,3)rep(j,2){
			int x,y; cin>>x>>y;
			p[i][j]=P(x,y);
		}
		cout<<(solve()?"YES":"NO")<<endl;
	}
}

int main()
{
#ifndef ONLINE_JUDGE
	int cs=1;rep(i,cs)
#endif
	run();
}
