#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
typedef long long ll;
struct Point
{
    ll x,y;
    void input()
    {
        scanf("%I64d%I64d",&x,&y);
    }
    bool operator ==(const Point &p) const
    {
        return x==p.x&&y==p.y;
    }
};
struct Line
{
    Point p1,p2;
    void input()
    {
        p1.input();
        p2.input();
    }
}line[3];
int r[3];
ll dmult(Point p1,Point p2,Point p0)
{
    return (p1.x-p0.x)*(p2.x-p0.x)+(p1.y-p0.y)*(p2.y-p0.y);
}
ll xmult(Point p1,Point p2,Point p0)
{
    return (p1.x-p0.x)*(p2.y-p0.y)-(p1.y-p0.y)*(p2.x-p0.x);
}
bool in(ll x,ll a,ll b)
{
    return x>min(a,b)&&x<max(a,b);
}
bool in(Point p,Line l)
{
    if(xmult(p,l.p1,l.p2)!=0) return false;
    if(abs(l.p1.x-l.p2.x)>abs(l.p1.y-l.p2.y))
        return in(p.x,l.p1.x,l.p2.x);
    else
        return in(p.y,l.p1.y,l.p2.y);
}
bool ck(Point p1,Point p2,Point p3)
{
    int tmp1,tmp2;
    if(abs(p2.x-p3.x)>abs(p2.y-p3.y))
    {
        tmp1=p2.x-p1.x;
        tmp2=p1.x-p3.x;
    }
    else
    {
        tmp1=p2.y-p1.y;
        tmp2=p1.y-p3.y;
    }
    if(tmp1<0) tmp1*=(-1),tmp2*=(-1);
    if(tmp1>tmp2) swap(tmp1,tmp2);
    if(tmp1*4<tmp2) return false;
    return true;
}
bool ck(Line l1,Line l2,Line l3)
{
    if(l1.p2==l2.p1) swap(l1.p1,l1.p2);
    if(l1.p1==l2.p2) swap(l2.p1,l2.p2);
    if(l1.p2==l2.p2) swap(l1.p1,l1.p2),swap(l2.p1,l2.p2);
    if(!(l1.p1==l2.p1)) return false;
    if(dmult(l1.p2,l2.p2,l1.p1)<0||xmult(l1.p2,l2.p2,l1.p1)==0)
        return false;
    if(in(l3.p2,l1)) swap(l3.p1,l3.p2);
    if(!in(l3.p1,l1)||!in(l3.p2,l2)) return false;
    return ck(l3.p1,l1.p1,l1.p2)&&ck(l3.p2,l2.p1,l2.p2);
}
bool ck()
{
    do
    {
        if(ck(line[r[0]],line[r[1]],line[r[2]])) return true;
    }while(next_permutation(r,r+3));
    return false;
}
int main()
{
    int _;
    scanf("%d",&_);
    while(_--)
    {
        for(int i=0;i<3;i++) line[i].input(),r[i]=i;
        if(ck()) printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}
