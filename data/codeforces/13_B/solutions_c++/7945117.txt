#include <iostream>
#include <algorithm>


using namespace std;

typedef pair<long long,long long> point;

struct segment
{
	point p1;
	point p2;
}seg[3];

int ccw(point A,point B,point C)
{
    long long tmp = (A.first * B.second + B.first * C.second + C.first * A.second) - (A.first * C.second + B.first * A.second + C.first * B.second);
    if(tmp>0) return 1; //counter clockwise
    else if(tmp<0) return -1; //clockwise
    return 0; //on the line
}

bool online(point A,point B,point C){
	if(ccw(A,B,C)==0){
		long long sx=A.first;
		long long ex=B.first;
		long long sy=A.second;
		long long ey=B.second;
		if(sx>ex) swap(sx,ex);
		if(sy>ey) swap(sy,ey);
		if(sx<=C.first && C.first<=ex && sy<=C.second && C.second<=ey){
			long long r1=(C.first-A.first)*(C.first-A.first)+(C.second-A.second)*(C.second-A.second);
			long long r2=(C.first-B.first)*(C.first-B.first)+(C.second-B.second)*(C.second-B.second);
			if(r1>r2) swap(r1,r2);
			r1*=16;
			if(r1>=r2) return true;
		}
	}

	return false;
}

bool check(segment a, segment b, segment c){
	if(a.p1!=b.p1) return false;
	point v1(a.p2.first-a.p1.first,a.p2.second-a.p1.second);
	point v2(b.p2.first-b.p1.first,b.p2.second-b.p1.second);
	long long r = v1.first*v2.first+v1.second*v2.second;
	if(r<0) return false;
	if(!online(a.p1,a.p2,c.p1) || !online(b.p1, b.p2,c.p2)) return false;

	return true;
}

void solve(){
	int arr[3]={0,1,2};
	do{
		for(int i=0;i<2;i++){
			swap(seg[arr[0]].p1,seg[arr[0]].p2);
			for(int j=0;j<2;j++){
				swap(seg[arr[1]].p1,seg[arr[1]].p2);
				for(int k=0;k<2;k++){
					swap(seg[arr[2]].p1,seg[arr[2]].p2);
					if(check(seg[arr[0]],seg[arr[1]],seg[arr[2]])){
						cout<<"YES\n";
						return;
					}
				}
			}
		}
	}while(next_permutation(arr,arr+3));
	cout<<"NO\n";
}

int main(){
	int tc;
	cin>>tc;
	while(tc--){
		for(int i=0;i<3;i++){
			cin>>seg[i].p1.first>>seg[i].p1.second>>seg[i].p2.first>>seg[i].p2.second;
		}
		solve();
	}
	return 0;
}