#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <cctype>
#include <iostream>
#include <complex>
using namespace std;
typedef complex<double> point;
static const double eps = 1e-9;

struct line{
	point p, q;
};

double pon(line a, point p)
{
	point v = p - a.p;
	point u = a.q - a.p;
	point f = v / u;
	if (abs(f.imag()) > eps)
		return -1;
	return f.real();
}

bool isA(line a, line b, line c)
{
	if (a.p != b.p)  return false;
	double ag = arg( (a.q - a.p) / (b.q - b.p));
	if (abs(ag) > atan2(1.0, 0.0) + eps)
		return false;
	double p1 = pon(a, c.p);
	double p2 = pon(b, c.q);

	if (p1 < 0.2 - eps || p1 > eps + 0.8)
		return false;
	if (p2 < 0.2 - eps || p2 > eps + 0.8)
		return false;
    return true;
}

bool tryAllSwap(line a, line b, line c)
{
	for (int i = 0; i < 8; ++i)
	{
		if (isA(a, b, c))
			return true;
		if (i % 1 == 0) swap(a.p, a.q);
		if (i %2 == 0) swap(b.p, b.q);
		if (i %4 == 0) swap(c.p, c.q); // good
	}
	return false;
}
bool tryAllPerm(line ls[3])
{
	int ix[] = {0, 1, 2};
	do
		if (tryAllSwap(ls[ix[0]], ls[ix[1]], ls[ix[2]]) )
			return true;
		while (next_permutation(&ix[0], &ix[3]));
		return false;
}
int main()
{
	int T;
	cin >> T;
	while (T--)
	{
		line ls[3];
		for (int i = 0; i < 3; ++i)
		{
			double x1, y1, x2, y2;
			scanf("%lf%lf%lf%lf", &x1, &y1, &x2, &y2);
			ls[i].p = point(x1, y1);
			ls[i].q = point(x2, y2);
		}
		cout << (tryAllPerm(ls) ? "YES" : "NO") << endl;
	}
}
