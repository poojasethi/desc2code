#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <complex>
using namespace std;

typedef long long ll;
typedef complex<long double> pt;

bool is_on(pt &a, pt &b, pt &c)
{
  if (abs(arg((c-a)/(b-a)))>=1e-18) return false;
  if (abs(arg((c-b)/(a-b)))>=1e-18) return false;

  long double t=abs(c-a);
  long double u=abs(c-b);
  if (t/u<=1.0/4.0-1e-18L) return false;
  if (u/t<=1.0/4.0-1e-18L) return false;

  return true;
}

bool satisfy(pt &a, pt &b, pt &c, pt &d, pt &e, pt &f)
{
  if (b!=c) return false;
  if (a==b) return false;
  if (a==d) return false;
  if (a==e) return false;
  if (a==f) return false;
  if (b==d) return false;
  if (b==e) return false;
  if (b==f) return false;
  if (d==e) return false;
  if (d==f) return false;
  if (e==f) return false;

  const long double pi=atan(1.0L)*4;
  long double ang=arg((a-b)/(d-c));
  if (!(ang>=1e-18 && ang<pi/2+1e-18))
    return false;

  if (!is_on(a,b,e)) return false;
  if (!is_on(c,d,f)) return false;

  /*
  long double t[4];
  t[0]=abs(e-a);
  t[1]=abs(e-b);
  t[2]=abs(f-c);
  t[3]=abs(f-d);
  sort(t, t+4);
  if (t[0]/t[3]<=1.0/4.0-1e-10) return false;
  */

  return true;
}

int main()
{
  int cases; scanf("%d", &cases);
  while(cases--){
    pt p[6];
    for (int i=0; i<6; i++){
      int x, y;
      scanf("%d %d", &x, &y);
      p[i]=pt(x, y);
    }

    bool ok=false;
    int ord[3]={0,1,2};
    do{
      for (int f=0; f<(1<<3); f++){
	ok|=satisfy(p[ord[0]*2+(f&1)], p[ord[0]*2+(~f&1)],
		    p[ord[1]*2+((f>>1)&1)], p[ord[1]*2+(~(f>>1)&1)],
		    p[ord[2]*2+((f>>2)&1)], p[ord[2]*2+(~(f>>2)&1)]);
	if (ok) break;
      }
      if (ok) break;
    }while(next_permutation(ord, ord+3));
    cout<<(ok?"YES":"NO")<<endl;
  }
  return 0;
}
