#include <iostream>
#include <algorithm>

using namespace std;

struct point{
    long long x;
    long long y;
    point(){
    
    }
    point(long long x,long long y){
    this->x = x;
    this->y = y;
    }
    bool operator==(point& q){
    return (x == q.x) && (y == q.y);
    }
    point operator+(point& q){
    return point(x+q.x,y+q.y);
    }
    point operator-(point& q){
    return point(x-q.x,y-q.y);
    }
};

long long cross(point p,point q){
    return (p.x*q.y - p.y*q.x);
}

long long dot(point p,point q){
    return (p.x*q.x + p.y*q.y);
}

bool testd(point& s1,point& s2,point& p){
    long long d1 = dot(s1-p,s1-p);
    long long d2 = dot(s2-p,s2-p);
    
    long long m1 = max(d1,d2);
    long long m2 = min(d1,d2);
    
    return (m1 <= 16*m2);
}

bool inseg(point& p, point& s1,point& s2){
    if(cross(p-s1,p-s2) != 0){
    return false;
    }
    return (dot(p-s1,p-s2) < 0);
}

bool test(point& c,point& e1,point& e2,point& o1,point& o2){
    if(inseg(o1,c,e1) && inseg(o2,c,e2)){
    long long cr = cross(c-e1,c-e2);
    long long dt = dot(c-e1,c-e2);
    if(cr != 0 && dt >= 0){
        return testd(c,e1,o1) && testd(c,e2,o2);
    }
    else{
        return false;
    }
    }
    else if(inseg(o2,c,e1) && inseg(o1,c,e2)){
    return test(c,e1,e2,o2,o1);
    }
    
    return false;
}

int main(){
    int t;
    cin >> t;
    
    for(int lp=0;lp<t;++lp){
    point p[6];
    for(int j=0;j<6;++j){
        cin >> p[j].x >> p[j].y;
    }
    
    bool ret = false;
    for(int j=0;j<6;++j){
        for(int k=j+1;k<6;++k){
        if(p[j] == p[k]){
            int sj = j/2;
            int sk = k/2;
            
            int so = 3-sj-sk;
            ret |= test(p[j],p[4*sj+1-j],p[4*sk+1-k],p[2*so],p[2*so+1]);
            
        }
        }
    }
    
    if(ret){
        cout << "YES\n";
    }
    else{
        cout << "NO\n";
    }
    
    }
    
    return 0;
}