#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>

using namespace std;

typedef long long LL;
struct Point {
    LL x, y;
    Point() {
    }
    Point(LL x, LL y) :
        x(x), y(y) {
    }
    void init() {
        scanf("%I64d%I64d", &x, &y);
    }
    bool operator==(const Point& p) const {
        return x == p.x && y == p.y;
    }
    Point operator+(const Point& p) const {
        return Point(x + p.x, y + p.y);
    }
    Point operator-(const Point& p) const {
        return Point(x - p.x, y - p.y);
    }
    LL operator*(const Point& p) const {
        return x * p.y - y * p.x;
    }
    LL operator&(const Point& p) const {
        return x * p.x + y * p.y;
    }
    LL sqr() const {
        return x * x + y * y;
    }
};

struct Line {
    Point a, b;
    void init() {
        a.init();
        b.init();
    }
} l[5];

bool fit_in(const Point& a, const Point& b) {
    return a * b == 0 && b.sqr() <= 5 * (a & b) && 5 * (a & b) <= 4 * b.sqr();
}

bool check(const Line& a, const Line& b, const Line& c) {
    Point p = a.a;
    if (!(a.a == b.a))
        return false;
    return ((a.b - p) & (b.b - p)) >= 0 && ((a.b - p) * (b.b - p)) != 0
            && fit_in(c.a - p, a.b - p) && fit_in(c.b - p, b.b - p);
}

bool run() {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 2; k++) {
                for (int t = 0; t < 3; t++) {
                    if (check(l[t], l[(t + 1) % 3], l[(t + 2) % 3])) {
                        return true;
                    }
                }
                swap(l[2].a, l[2].b);
            }
            swap(l[1].a, l[1].b);
        }
        swap(l[0].a, l[0].b);
    }
    return false;
}

int main() {
    int T;


    scanf("%d", &T);
    while (T--) {
        for (int i = 0; i < 3; i++) {
            l[i].init();
        }

        if (run()) {
            puts("YES");
        } else {
            puts("NO");
        }
    }

    return 0;
}
