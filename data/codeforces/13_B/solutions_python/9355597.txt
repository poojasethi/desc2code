IN = lambda: map(int, raw_input().split())


def r_s():
    t = IN()
    return (t[0], t[1]), (t[2], t[3])


def dst(a, b):
    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2


def onS(s, p):
    x0, y0 = s[0]
    x1, y1 = s[1]
    x, y = p
    if (y - y0) * (x1 - x0) != (y1 - y0) * (x - x0):
        return False
    if x0 > x1:
        x0, x1 = x1, x0
    if y0 > y1:
        y0, y1 = y1, y0
    for _ in xrange(2):
        if not (x0 <= x <= x1 and x - x0 <= 4 * (x1 - x) and x1 - x <= 4 * (x - x0)):
            return False
        x0, x1, x, y0, y1, y = y0, y1, y, x0, x1, x
    return True


def ok(s):
    for i in xrange(2):
        for j in xrange(2):
            if s[0][i] == s[1][j]:
                s[0] = s[0][i], s[0][i ^ 1]
                s[1] = s[1][j], s[1][j ^ 1]
    if s[0][0] != s[1][0]:
        return False
    if not onS(s[0], s[2][0]):
        s[2] = s[2][1], s[2][0]
    if not onS(s[0], s[2][0]) or not onS(s[1], s[2][1]):
        return False
    if s[0][1] == s[1][1] or dst(s[0][1], s[1][1]) > dst(s[0][0], s[0][1]) + dst(s[1][0], s[1][1]):
        return False
    return True


for _ in xrange(input()):
    a, b, c = r_s(), r_s(), r_s()
    print 'YES' if ok([a, b, c]) or ok([a, c, b]) or ok([b, c, a]) else 'NO'
