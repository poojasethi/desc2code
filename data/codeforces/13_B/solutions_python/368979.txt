from math import *
epsilon = 0.0001

def isOn(pa, pb, pt):
    line = [pa[1]-pb[1], pb[0]-pa[0], pa[0]*pb[1]-pa[1]*pb[0]]
    return line[0]*pt[0] + line[1] * pt[1] + line[2] == 0

def inRatio(pa, pb, pt):
    x = pt[0]
    y = pt[1]
    x0 = min(pa[0], pb[0])
    x1 = max(pa[0], pb[0])
    y0 = min(pa[1], pb[1])
    y1 = max(pa[1], pb[1])
    if (x < x0 or x > x1 or y < y0 or y > y1):
        return False
    lx0 = x - x0
    lx1 = x1 - x
    ly0 = y - y0
    ly1 = y1 - y
    if (lx0 > lx1):
        lx0, lx1 = lx1, lx0
    if (ly0 > ly1):
        ly0, ly1 = ly1, ly0
    return lx0 * 4 >= lx1 and ly0 * 4 >= ly1

n = int(raw_input())
for case in xrange(n):
    pts = []
    for i in xrange(3):
        p = [int(x) for x in raw_input().strip().split()]
        pts.append(p[0:2])
        pts.append(p[2:4])
    c = 0
    for i in xrange(5):
        for j in xrange(i+1, 6):
            if (pts[i] == pts[j]):
                c += 1
                pa = i
                pb = j
    if (c != 1):
        print 'NO'
        continue
    if (pa % 2 == 1):
        pts[pa - 1], pts[pa] = pts[pa], pts[pa - 1]
        pa -= 1
    if (pb % 2 == 1):
        pts[pb - 1], pts[pb] = pts[pb], pts[pb - 1]
        pb -= 1
    pc = 6 - pa - pb
    a = [pts[pa+1][0] - pts[pa][0], pts[pa+1][1] - pts[pa][1]]
    b = [pts[pb+1][0] - pts[pb][0], pts[pb+1][1] - pts[pb][1]]
    if (a[0] * b[0] + a[1] * b[1] < 0):
        print 'NO'
        continue
    if (isOn(pts[pa], pts[pa+1], pts[pb+1])):
        print 'NO'
        continue
    if (isOn(pts[pa],pts[pa+1],pts[pc]) and isOn(pts[pb],pts[pb+1],pts[pc+1])):
        if (inRatio(pts[pa], pts[pa+1], pts[pc]) and inRatio(pts[pb], pts[pb+1], pts[pc+1])):
            print 'YES'
            continue
    if (isOn(pts[pa],pts[pa+1],pts[pc+1]) and isOn(pts[pb],pts[pb+1],pts[pc])):
        if (inRatio(pts[pa], pts[pa+1], pts[pc+1]) and inRatio(pts[pb], pts[pb+1], pts[pc])):
            print 'YES'
            continue
    print 'NO'