cas = input()

class Point(object):
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y

    def __eq__(self, otherPoint):
        return self.x == otherPoint.x and self.y == otherPoint.y

threePoint = [Point() for i in range(6)]

def isValid(x1, y1, x2, y2, x3, y3):
    if (y2-y1)*(x3-x2) != (x2-x1)*(y3-y2): return False
    t1 = (4 * x1 + x2);
    t2 = (x1 + 4 *x2);
    t3 = (4 * y1 + y2);
    t4 = (y1 + 4 * y2);
    if t1 > t2: t1, t2 = t2, t1
    if t3 > t4: t3, t4 = t4, t3
    return 5*x3 >= t1 and 5*x3 <= t2 and 5*y3 >= t3 and 5*y3 <= t4

def isLessRight(x1, y1, x2, y2):
    return x1*x2+y1*y2 >= 0 and y2*x1 != y1*x2

for cc in xrange(cas):
    result = False
    for i in range(3):
        threePoint[2*i].x, threePoint[2*i].y, threePoint[2*i+1].x, \
                           threePoint[2*i+1].y = map(int, raw_input().split(' '))
    for i in range(3):
        if threePoint[2*i] == threePoint[2*i+1]: continue
        for j in range(i+1,3):
            if threePoint[2*j] == threePoint[2*j+1]: continue
            if threePoint[2*i+1] == threePoint[2*j] or threePoint[2*i+1] == threePoint[2*j+1]:
                threePoint[2*i], threePoint[2*i+1] = threePoint[2*i+1], threePoint[2*i]
            if threePoint[2*j+1] == threePoint[2*i] or threePoint[2*j+1] == threePoint[2*i+1]:
                threePoint[2*j], threePoint[2*j+1] = threePoint[2*j+1], threePoint[2*j]
            #if i == 0 and j == 2: print threePoint[2*j].x, threePoint[2*j].y
            if(not (threePoint[2*i] == threePoint[2*j])): continue
            for k in range(3):
                if k == i or k == j: continue
                #print i, j, k
                if not isLessRight(threePoint[i*2+1].x-threePoint[i*2].x, threePoint[i*2+1].y-threePoint[i*2].y, threePoint[j*2+1].x-threePoint[j*2].x, threePoint[j*2+1].y-threePoint[j*2].y): continue
                if isValid(threePoint[i*2].x, threePoint[i*2].y, threePoint[i*2+1].x, threePoint[i*2+1].y, threePoint[k*2].x, threePoint[k*2].y) and \
                   isValid(threePoint[j*2].x, threePoint[j*2].y, threePoint[j*2+1].x, threePoint[j*2+1].y, threePoint[k*2+1].x, threePoint[k*2+1].y): result = True
                if isValid(threePoint[i*2].x, threePoint[i*2].y, threePoint[i*2+1].x, threePoint[i*2+1].y, threePoint[k*2+1].x, threePoint[k*2+1].y) and \
                   isValid(threePoint[j*2].x, threePoint[j*2].y, threePoint[j*2+1].x, threePoint[j*2+1].y, threePoint[k*2].x, threePoint[k*2].y): result = True

    print ('YES' if result else 'NO')
                
