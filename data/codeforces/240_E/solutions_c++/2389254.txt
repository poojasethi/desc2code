#include<iostream>
#include<cstring>
#include<cstdio>
using namespace std;
// graph
const int V = (int)1e5+5;
const int E = V;
int head[V],pnt[E],nxt[E],flag[E],e,n,m;
void add(int u,int v,int c){
	nxt[e] = head[u]; head[u] = e; pnt[e] = v;
	flag[e] = c; e++;
}
// tarjan
int pre[V], low[V], stk[V], tp, tm, stp, id[V];
void dfs(int u){
	stk[tp++] = u;
	int mn = (pre[u] = low[u] = tm++), t;
	for(int i = head[u]; i!=-1; i= nxt[i]) if(flag[i]){
		int v = pnt[i];
		if( -1 == pre[v] ) dfs(v);
		if( mn > low[v] ) mn = low[v];
	}
	if(mn != low[u]) {
		low[u] = mn; return ;
	}
	do{
		t = stk[--tp];
		id[t] = stp;
		low[t] = n;
	} while(t != u);
	stp ++;
}
int cnt[V];
void tarjan(){
	memset(pre , -1,sizeof(pre));
	tm = tp = stp = 0;
	for(int i = 1; i <= n; i++) if(-1 == pre[i]) dfs(i);
	for(int u = 1; u <= n; u++)
		for(int i = head[u]; i!=-1; i=nxt[i])
			if(flag[i]) cnt[pnt[i]] ++;
}
// bfs
int ans[E], len, Q[V], vis[V];
void bfs() {
	len = 0;
	int front = 0, tail = 1;
	Q[0] = vis[1] = 1;
	while(front < tail) {
		int u = Q[front++];
		for(int i = head[u]; i!=-1; i= nxt[i]) {
			int v = pnt[i];
			if(vis[v]) continue;
			if(flag[i]) {
				vis[v] = 1; Q[tail ++] = v;
			}
			else if(!cnt[v]) {
				ans[len ++] = i+1;
				vis[v] = 1; Q[tail ++] = v;
			}
		}
	}
	if(tail != n) len = -1;
}
int main(){
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	e = 0; memset(head,-1,sizeof(head));
	cin >> n >> m;
	for(int i = 0; i < m; i++){
		int u,v,c;
		cin >> u >> v >> c;
		add(u,v,!c);
	}
	tarjan();
	bfs();
	cout << len << endl;
	for(int i = 0; i < len; i++)
		cout<< ans[i] <<" ";
	cout<< endl;
}
