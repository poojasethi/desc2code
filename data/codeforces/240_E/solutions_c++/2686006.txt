#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

const int MAXN = 100010 ;
int n , m ;
struct edge{
      int v , id , st ;
};
vector<edge> e[MAXN] ;
int mark[MAXN] ;
bool visit[MAXN] ;

int main()
{
      freopen("input.txt","r",stdin);
      freopen("output.txt","w",stdout);
      scanf("%d%d",&n,&m);
      for (int i=1;i<=m;i++){
            int t1,t2,t3;
            scanf("%d%d%d",&t1,&t2,&t3);
            edge now;
            now.v = t2 ; now.st = t3 ; now.id = i ;
            e[t1].push_back(now);
      }
      memset(mark,0,sizeof(mark));
      memset(visit,false,sizeof(visit));
      queue<int> q;
      q.push(1); mark[1]=-1; visit[1]=1;
      while (!q.empty()){
            int u = q.front() ; q.pop() ;
            for (int i = 0 ; i < e[u].size() ; i++){
                  int v = e[u][i].v ;
                  if ((!mark[v]) || (mark[v]>0&&(!e[u][i].st))){
                        mark[v] = e[u][i].st ? e[u][i].id : -1 ;
                        if (!visit[v]){
                              q.push(v);
                              visit[v]=1;
                        }
                  }
            }
      }
      bool flag=1;
      for (int i=1;i<=n;i++)
            if (!mark[i]) flag=0;
      if (!flag)
            printf("-1\n");
      else{
            vector<int> outit ;
            for (int i=1;i<=n;i++)
                  if (mark[i]>0)
                        outit.push_back(mark[i]);
            printf("%d\n",outit.size());
            for (int i=0;i<outit.size();i++)
                  printf("%d ",outit[i]);
            printf("\n");
      }
      return 0;
}

				  		 	 	 	    			 		  	