#include <bits/stdc++.h>
using namespace std;
#define MAXN 100010
int Vis[MAXN];
vector < std::vector< pair < pair<int,int>,int> >  > G(MAXN);
int Bfs(int start)
{
	queue<int> Q;
	Vis[start] = -1;
	Q.push(start);
	while(!Q.empty())
	{
		int P = Q.front();
		Q.pop();
		for(int i = 0;i<G[P].size();i++)
		{
			int to = G[P][i].first.first;
			int stat = G[P][i].first.second;
			if((Vis[to]==0)||(Vis[to]>0&&stat==0))
			{
				Q.push(to);
				Vis[to] = (stat==0)?-1:G[P][i].second;
			}
		}
	}
}
int main()
{
	std::fstream myfile("input.txt", std::ios_base::in);
	std::fstream ofile("output.txt",std::ios_base::out);
	int N,M,A,B,C;
	myfile>>N>>M;
	for(int i = 1;i<=M;i++)
	{
		myfile>>A>>B>>C;
		G[A].push_back(make_pair(make_pair(B,C),i));
	}
	Bfs(1);
	bool NotPossible = false;
	std::vector<int> Ans;
	for(int i = 1;i<=N;i++)
	{
		if(Vis[i]!=-1)
			Ans.push_back(Vis[i]);
		if(Vis[i]==0){
			NotPossible = true;
		}
	}
	if(NotPossible){
		ofile<<-1<<endl;
		return 0;
	}
	ofile<<Ans.size()<<endl;
	for(int i = 0;i<Ans.size();i++)
		ofile<<Ans[i]<<" ";
	ofile;
	return 0;
}