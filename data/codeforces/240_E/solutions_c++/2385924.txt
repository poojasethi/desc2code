#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;

#define N 100100

struct Graph
{
	int id, next, pos;
	bool f;
}g[N], opp_g[N], G[N];
struct Egde
{
	int x, y, pos;
}e[N];
int st[N], opp_st[N], St[N], n, m, kind, tot, p[N], b[N], num, CC, f[N], tmp;
bool visit[N], ent[N];

void Add(int tot, Graph g[], int st[], int x, int y)
{
	g[tot].id = y, g[tot].next = st[x], st[x] = tot;
}
void init()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	scanf("%d%d", &n, &m);
	memset(st, -1, sizeof(st));
	memset(opp_st, -1, sizeof(opp_st));
	for (int i = 1; i <= m; i ++)
	{
		int x, y, type;
		scanf("%d%d%d", &x, &y, &type);
		if (type) e[++tot].x = x, e[tot].y = y, e[tot].pos = i;
		else Add(i, g, st, x, y), Add(i, opp_g, opp_st, y, x);
	}
}
void Visit1(int x)
{
	visit[x] = true;
	for (int i = st[x]; i != -1; i = g[i].next)
		if (!visit[g[i].id]) Visit1(g[i].id);
	p[++tmp] = x;
}
void Visit2(int x)
{
	b[x] = kind;
	for (int i = opp_st[x]; i != -1; i = opp_g[i].next)
		if (!b[opp_g[i].id]) Visit2(opp_g[i].id);
}
void DFS(int x)
{
	visit[x] = true, num ++;
	for (int i = St[x]; i != -1; i = G[i].next)
		if (!visit[G[i].id]) 
        {
            DFS(G[i].id);
            if (G[i].f) f[++ CC] = G[i].pos;
        }
}
void solve()
{
	for (int i = 1; i <= n; i ++) if (!visit[i]) Visit1(i);
	for (int i = n; i >= 1; i --) if (!b[p[i]]) kind++, Visit2(p[i]);
	memset(St, -1, sizeof(St));
	int tmp = 0;
	for (int i = 1; i <= n; i ++)
		for (int j = st[i]; j != -1; j = g[j].next)
			if (b[i] != b[g[j].id]) ent[b[g[j].id]] = true, Add(++tmp, G, St, b[i], b[g[j].id]);
	ent[b[1]] = true;
	for (int i = 1; i <= tot; i ++)
		if (!ent[b[e[i].y]] && b[e[i].x] != b[e[i].y]) Add(++tmp, G, St, b[e[i].x], b[e[i].y]), G[tmp].f = true, G[tmp].pos = e[i].pos;
	memset(visit, 0, sizeof(visit));
	DFS(b[1]);
	if (num != kind) puts("-1"), exit(0);
	printf("%d\n", CC);
	for (int i = 1; i <= CC; i ++) printf("%d ", f[i]);
}
int main()
{
	init();
	solve();
	return 0;
}

