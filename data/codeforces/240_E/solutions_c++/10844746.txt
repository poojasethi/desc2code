#include <iostream>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <queue>

using namespace std;
#define N 100010
#define out(x) cerr << #x"=" << x << endl


int n, m;
int head[N];
struct node {
  int v, next;
  int c;
} edges[N];
int visited[N];
vector<int> ans;

void addedge(int a, int b, int c, int i) {
  edges[i].v = b;
  edges[i].next = head[a];
  edges[i].c = c;
  head[a] = i;
}

void bfs(int src) {
  queue<int> q;
  q.push(src);
  visited[src] = -1;
  while (!q.empty()) {
    int tmp = q.front();
    q.pop();
    for (int k = head[tmp]; k != -1; k = edges[k].next) {
      int v = edges[k].v;
      int c = edges[k].c;
      if (!visited[v] || visited[v] > 0 && !c) {
        visited[v] = c ? k : -1;
        q.push(v);
      }
    }
  }
}

int main() {
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  scanf("%d%d", &n, &m);
  memset(head, -1, sizeof(head));
  for (int i = 1; i <= m; ++i) {
    int a, b, c;
    scanf("%d%d%d", &a, &b, &c);
    addedge(a, b, c, i);
  }
  bfs(1);
  bool ok = true;
  for (int i = 1; i <= n; ++i) {
    if (visited[i] == 0) ok = false;
    else if (visited[i] != -1) ans.push_back(visited[i]);
  }
  if (ok) {
    printf("%d\n", ans.size());
    if (ans.size() > 0) {
      printf("%d", ans[0]);
    }
    for (int i = 1; i < ans.size(); ++i) {
      printf(" %d", ans[i]);
    }
    printf("\n");
  } else {
    printf("-1\n");
  }
  return 0;
}
