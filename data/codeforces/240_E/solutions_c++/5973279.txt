#include <fstream>
#include <iostream>
#include <vector>
#include <bitset>
#include <string.h>
#include <algorithm>
#include <iomanip>
#include <math.h>
#include <time.h>
#include <stdlib.h>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <deque>

using namespace std;

const char infile[] = "input.txt";
const char outfile[] = "output.txt";

ifstream fin(infile);
ofstream fout(outfile);

const int MAXN = 100005;
const int oo = 0x3f3f3f3f;

typedef vector<pair<pair<int, int> , int> > Graph[MAXN];
typedef vector<pair<pair<int, int> , int> > :: iterator It;

const inline int min(const int &a, const int &b) { if( a > b ) return b;   return a; }
const inline int max(const int &a, const int &b) { if( a < b ) return b;   return a; }
const inline void Get_min(int &a, const int b)    { if( a > b ) a = b; }
const inline void Get_max(int &a, const int b)    { if( a < b ) a = b; }

int N, M, dp[MAXN];
Graph G;

inline void BFs(int stNode) {
    queue <int> Q;
    Q.push(stNode);
    dp[stNode] = -1;
    while(!Q.empty()) {
        int Node = Q.front();
        Q.pop();
        for(It it = G[Node].begin(), fin = G[Node].end(); it != fin ; ++ it)
            if(!dp[it->first.first] || (it->first.second == 0 && dp[it->first.first] > 0)) {
                dp[it->first.first] = (it->first.second == 0) ? -1 : it->second;
                Q.push(it->first.first);
            }
    }
}

int main() {
    freopen(infile, "r", stdin);
    freopen(outfile, "w", stdout);
    scanf("%d%d", &N, &M);
    for(int i = 1 ; i <= M ; ++ i) {
        int a, b, c;
        scanf("%d%d%d", &a, &b, &c);
        G[a].push_back(make_pair(make_pair(b, c), i));
    }
    BFs(1);
    bool Answer = true;
    vector <int> Ans;
    for(int i = 1 ; i <= N ; ++ i) {
        if(dp[i] != -1)
            Ans.push_back(dp[i]);
        if(!dp[i])
            Answer = false;
    }
    if(!Answer) {
        printf("-1\n");
        return 0;
    }
    printf("%d\n", int(Ans.size()));
    for(int i = 0 ; i < Ans.size() ; ++ i)
        printf("%d ", Ans[i]);
    return 0;
}
