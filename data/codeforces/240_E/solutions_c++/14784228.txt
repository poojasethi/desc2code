#include <stdio.h>
#include <string.h>
#include <queue>
#include <stack>
#include <set>
using namespace std;
struct ed
{
	int to, nx, tp, org;
}es[202020];
int rp[201010], nr = 101010;
int hd[201010], ne;
int dfn[101010], low[101010], nfn;
bool out[101010];
stack<int> st;
set<long long> stt;
int dfs(int nw)
{
	if (dfn[nw])
		return low[nw];
	dfn[nw] = low[nw] = ++nfn;
	st.push(nw);
	for (int i = hd[nw]; i != -1; i = es[i].nx)
		if (es[i].tp == 0 && !out[es[i].to])
			low[nw] = min(low[nw], dfs(es[i].to));
	if (dfn[nw] == low[nw])
	{
		while (st.top() != nw)
		{
			int now = st.top();
			st.pop();
			rp[now] = nr;
			out[now] = 1;
		}
		st.pop();
		rp[nw] = nr++;
		out[nw] = 1;
	}
	return low[nw];
}
int rd[202020];
void ae(int a, int b, int tp, int org = ne)
{
	es[ne].to = b;
	es[ne].org = org;
	es[ne].tp = tp;
	es[ne].nx = hd[a];
	hd[a] = ne++;
	if (tp == 0)
		rd[b]++;
}
int n, m;
void rebuild()
{
	for (int i = 1; i <= n; i++)
	{
		for (int j = hd[i]; j != -1; j = es[j].nx)
		{
			if (rp[i] == rp[es[j].to])
				continue;
			long long nb = rp[i] * 404040ll + rp[es[j].to] * 2 + es[j].tp;
			if (!stt.count(nb))
			{
				ae(rp[i], rp[es[j].to], es[j].tp, j);
				stt.insert(nb);
			}
		}
	}
}
bool vd[202020];
int as[202020], na;
bool can[202020];
int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	scanf("%d%d", &n, &m);
	memset(hd, -1, sizeof(hd));
	for (int i = 0; i < m; i++)
	{
		int a, b, c;
		scanf("%d%d%d", &a, &b, &c);
		ae(a, b, c);
	}
	for (int i = 1; i <= n; i++)
		if (!dfn[i])
			dfs(i);
	rebuild();
	int ans = -1;
	for (int i = 101010; i < nr; i++)
	{
		if (rd[i] == 0)
		{
			ans++;
			can[i]++;
		}
	}
	queue<int> q;
	q.push(rp[1]);
	vd[rp[1]] = 1;
	int nv = 1;
	while (!q.empty())
	{
		int nw = q.front();
		q.pop();
		for (int i = hd[nw]; i != -1; i = es[i].nx)
			if (!vd[es[i].to])
			{
				if (can[es[i].to])
				{
					can[es[i].to] = 0;
					as[na++] = es[i].org;
				}
				nv++;
				vd[es[i].to] = 1;
				q.push(es[i].to);
			}
	}
	if (nv + 101010 != nr)
	{
		printf("-1");
		return 0;
	}
	printf("%d\n", ans);
	for (int i = 0; i < na; i++)
	{
		printf("%d ", as[i] + 1);
	}
	return 0;
}
