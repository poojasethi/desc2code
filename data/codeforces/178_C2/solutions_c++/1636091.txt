#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
#define N 100005
using namespace std;

int n, m, op, cnt, len, pt;
int a[N], b[N];
int *B[N], SPACE[N], C[N];
map<int, int> A, D;
LLD ret;

int qry(int x, int y){
	int r = 0;
	for (int i=y; i>=1; i-=i&-i) r += B[x][i];
	return r;
}

int doit(int key){
	int x = a[key], y = b[key];
	int s = qry(x, y), lo, hi, md, res;
	
	if (qry(x, y-1) == s) return y;

	if (qry(x, C[x]) - s == C[x] - y){
		lo = 1, hi = y - 1;
		while (hi >= lo){
			md = (lo + hi) / 2;
			if (qry(x, md) < md) res = md, hi = md - 1;
			else lo = md + 1;
		}
		ret += C[x] - y + res;
	}
	else{
		lo = y + 1, hi = C[x];
		while (hi >= lo){
			md = (lo + hi) / 2;
			if (qry(x, md) - s < md - y) res = md, hi = md - 1;
			else lo = md + 1;
		}
		ret += res - y;
	}
	return res;
}

void upd(int x, int y, int v){
	for (int i=y; i<=C[x]; i+=i&-i) B[x][i] += v;
}

int main(){
	scanf("%d%d%d", &n, &m, &op);

	cnt = 0;
	FOR(i,0,n)
	if (!a[i]){
		cnt++;
		len = 0;
		
		a[i] = cnt;
		b[i] = ++len;
		for (int j=(i+m)%n; j!=i; j=(j+m)%n){
			a[j] = cnt;
			b[j] = ++len;
		}
		
		B[cnt] = &SPACE[pt];
		C[cnt] = len;
		pt += len + 1;
	}
	
	while (op--){
		int x, y;
		char s[3];
		scanf("%s", s);
		if (s[0] == '+'){
			scanf("%d%d", &x, &y);
			int t = doit(y);
			A[x] = t;
			D[x] = a[y];
			upd(a[y], t, 1);
		}
		else{
			scanf("%d", &x);
			upd(D[x], A[x], -1);
		}
	}
	
	printf("%I64d\n", ret);
	return 0;
}
