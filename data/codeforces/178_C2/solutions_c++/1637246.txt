using namespace std;
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<vector>
#include<cassert>
#include<cstring>
#include<cmath>

typedef double D; typedef unsigned long long LL;
typedef vector<int> VI; typedef vector<vector<int> > VVI;
typedef vector<bool> VB; typedef vector<VB> VVB;
typedef pair<int,int> pii; typedef vector<pii> VII;
#define IA(v) (v).begin()
#define IB(v) (v).end()
#define ALL(v) IA(v),IB(v)
#define REP(i, n) for (int i (0); i < (n); i ++)
#define FORIT(a,b, it) for(__typeof(b)it(a);it!=(b);++it)
#define FOREACH(v, it) FORIT(IA(v),IB(v),it)
#define len(v) ((int)(v).size())
#define append push_back
#define _ make_pair
#define fi first
#define se second
#define add insert
#define remove erase
#define TWO(x) (1<<(x))
#define UNIQUE(v) (v).erase(unique(ALL(v)),IB(v))
const int inf (1010101010);

int modu,step,g,qq,root[200005],key[200005];

#include<set>
struct bla{bool operator()(int i,int j)const{return key[i]<key[j];}};
set<int, bla> se;
#include<map>
map<int,int> waar;

bool try_ins(int pos,int&re)
{
	set<int,bla>::iterator it (se.lower_bound(pos));
	if (it == IB(se)) return false;
	if (root[*it]-root[pos])return false;
	re=*it;se.remove(it);return true;
}

void solve()
{
	if(!(cin>>modu>>step>>qq))exit(0);
	se=set<int,bla> (),waar=map<int,int> ();
	g=(__gcd(modu,step));
	int counter(0);
	REP(i,g)
	{
		root[i]=i,key[i]=counter ++;
		for (int x ((i+step)%modu); x!=i; x=(x+step)%modu)
		{
			root[x]=i,key[x]=counter ++;
		}
	}
	LL tot (0);
	REP(i,modu)se.add(i);
	int vv (modu/g);
	while(qq --)
	{
		char bla[5];scanf("%s",bla);int id;scanf("%d",&id);
		if(bla[0]=='+')
		{
			int pos;scanf("%d",&pos);
			int kk;
			if (!try_ins(pos,kk))try_ins(root[pos],kk);
			tot+=(vv+key[kk]-key[pos])%vv;
			waar[id] = kk;
		}
		else
		{
			se.add(waar[id]);
		}
	}
	cout<<tot<<endl;
}

main()
{
	#ifndef ONLINE_JUDGE
	freopen("A1.in","r",stdin);
	#endif
	while(1)solve();
}
