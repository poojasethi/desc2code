#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MaxN = 100010;

struct Node{
	int d[60];
	Node *lc,*rc;
	void update(){for(int i=0;i<60;i++) d[i]=rc->d[(i+lc->d[i])%60]+lc->d[i];}
}pool[MaxN*3],*tail=pool,*rt;

int a[MaxN],n,q;
char op[5];

void build(Node *&rt,int l,int r){
	rt=tail++;
	if(l==r) for(int i=0;i<60;i++) rt->d[i]=i%a[l] ? 1 : 2;
	else build(rt->lc,l,l+r>>1),build(rt->rc,(l+r>>1)+1,r),rt->update();
}

int qry(Node *rt,int l,int r,int ql,int qr,int t){
	if(ql<=l && qr>=r) return t+rt->d[t%60];
	else{
		int mid=l+r>>1;
		if(qr<=mid) return qry(rt->lc,l,mid,ql,qr,t);
		else if(ql>mid) return qry(rt->rc,mid+1,r,ql,qr,t);
		else return qry(rt->rc,mid+1,r,ql,qr,qry(rt->lc,l,mid,ql,qr,t));
	}
}

void mdf(Node *rt,int l,int r,int p,int x){
	if(l==r) {a[p]=x;for(int i=0;i<60;i++) rt->d[i]=i%a[l] ? 1 : 2;}
	else{
		int mid=l+r>>1;
		if(p<=mid) mdf(rt->lc,l,mid,p,x);
		else mdf(rt->rc,mid+1,r,p,x);
		rt->update();
	}
}

int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++) scanf("%d",&a[i]);
	build(rt,1,n);
	scanf("%d",&q);
	for(int i=1;i<=q;i++){
		int x,y;scanf("%s%d%d",op,&x,&y);
		if(op[0]=='C') mdf(rt,1,n,x,y);
		else printf("%d\n",qry(rt,1,n,x,y-1,0));
	}
	return 0;
}
