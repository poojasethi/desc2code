#include <algorithm>
#include <stdio.h>
#define  maxn      100001
using    namespace std;

int n,m;
int a[maxn];
int tree[60][4*maxn];

int query(int cx , int cy , int qx , int qy , int res , int pos)
{
  if(qy<cx  ||  cy<qx) return res;
  if(qx<=cx && cy<=qy) return res+tree[res%60][pos];
  int mid=(cx+cy)>>1;
  res=query(cx,mid,qx,qy,res,pos*2);
  return query(mid+1,cy,qx,qy,res,pos*2+1);
}

void update(int cx , int cy , int q , int val , int pos)
{
  if(cy<q || q<cx) return;
  if(cx==cy)
  {
    for(int kd=0 ; kd<60 ; kd++)
      tree[kd][pos]=1+!(kd%val);
    return;
  }
  int mid=(cx+cy)>>1;
  update(cx,mid,q,val,pos*2);
  update(mid+1,cy,q,val,pos*2+1);
  for(int kd=0 ; kd<60 ; kd++)
  {
    int tmp=tree[kd][pos*2];
    tree[kd][pos]=tmp+tree[(kd+tmp)%60][pos*2+1];
  }
}

void init(int x , int y , int pos)
{
  if(x==y)
  {
    for(int kd=0 ; kd<60 ; kd++)
      tree[kd][pos]=1+!(kd%a[x]);
    return;
  }
  int mid=(x+y)>>1;
  init(x,mid,pos*2);
  init(mid+1,y,pos*2+1);
  for(int kd=0 ; kd<60 ; kd++)
  {
    int tmp=tree[kd][pos*2];
    tree[kd][pos]=tmp+tree[(kd+tmp)%60][pos*2+1];
  }
}

int main()
{
  scanf("%d",&n);
  for(int i=1 ; i<=n ; i++)
    scanf("%d",&a[i]);
  init(1,n,1);
  scanf("%d",&m);
  for(int i=0,x,y ; i<m ; i++)
  {
    char s[5];
    scanf("%s%d%d",s,&x,&y);
    if(s[0]=='C')
      update(1,n,x,y,1);
    else
      printf("%d\n",query(1,n,x,y-1,0,1));
  }
  return 0;
}
