#include<cstdio>
#define N 100005
#define rep for (int p=0;p<60;p++) 
using namespace std;
struct Tree
{
  int l,r,s[60];
}a[N*4];int data[N];
char opt[2];int x,n,i,y,m,p,ok;
#define gets(k,x) rep a[k].s[p]=(p%x)?1:2
#define up(k) rep ok=a[k<<1].s[p],a[k].s[p]=ok+a[k<<1|1].s[(ok+p)%60]
void build(int k,int l,int r)
{
  a[k].l=l;a[k].r=r;int mid=(l+r)>>1;
  if (l==r) {gets(k,data[l]);return;}
  if (l<=mid) build(k<<1,l,mid);
  if (r>mid) build(k<<1|1,mid+1,r);
  up(k);
}
void update(int k)
{
  if (a[k].l==a[k].r) {data[a[k].l]=y;gets(k,y);return;}
  if (x<=a[k<<1].r) update(k<<1);else update(k<<1|1);up(k);
}
int ask(int k,int p)
{
  if (x<=a[k].l&&a[k].r<=y) return a[k].s[p];
  int tmp=0;
  if (x<=a[k<<1].r) tmp=ask(k<<1,p);
  if (y>a[k<<1].r) tmp+=ask(k<<1|1,(tmp+p)%60);
  return tmp;
}
int main()
{
  scanf("%d",&n);
  for (i=1;i<=n;i++)
    scanf("%d",&data[i]);
  scanf("%d",&m);
  build(1,1,n);
  while (m--)
  {
    scanf("%s%d%d",opt,&x,&y);
    if (opt[0]=='C') update(1);
    else y--,printf("%d\n",ask(1,0));
  }
}
