#include <bits/stdc++.h>
using namespace std;
int depth=(1<<17),seg_tree[60][(1<<18)];
int query(int root, int lmost, int rmost, int u, int v, int cmod)
{
	if(u<=lmost && rmost<=v)
		return seg_tree[cmod][root];
	int mid=(lmost+rmost)/2;
	int v1=0,v2=0;
	if(u <= mid)
		v1=query(2*root, lmost, mid, u, v, cmod);
	if(mid < v)
		v2=query(2*root + 1, mid+1, rmost, u, v, (cmod+v1)%60);
	return v1+v2;
}
void update(int pos)
{
	for (int i = 0; i < 60; ++i)
	{
		int v1=seg_tree[i][2*pos];
		int v2=seg_tree[(i+v1)%60][2*pos + 1];
		seg_tree[i][pos]=v1+v2;
	}
}
int main()
{
	// freopen("input.txt","r",stdin);
	// ios_base::sync_with_stdio(false);
	int n;
	scanf("%d",&n);
	for (int i = 0; i < n; ++i)
	{
		int temp;
		scanf("%d",&temp);
		for (int j = 0; j < 60; ++j)
		{
			if(j%temp==0)
				seg_tree[j][depth+i]=2;
			else
				seg_tree[j][depth+i]=1;
		}
	}
	for (int i = depth-1; i >= 1; --i)
	{
		update(i);
	}
	int q;
	scanf("%d",&q);
	while(q--)
	{
		char ch;
		int x,y;
		scanf(" %c %d %d",&ch, &x, &y);
		if(ch=='A')
			printf("%d\n", query(1, depth, (depth<<1)-1, depth+x-1, depth+y-2, 0));
		else
		{
			x=depth+x-1;
			for (int j = 0; j < 60; ++j)
			{
				if(j%y==0)
					seg_tree[j][x]=2;
				else
					seg_tree[j][x]=1;
			}
			x/=2;
			while(x>=1)
			{
				update(x);
				x/=2;
			}
		}
	}
	return 0;
}