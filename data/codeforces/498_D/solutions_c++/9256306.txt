#include <cstdio>
#define REP(i,n) for (int i=1;i<=n;++i)
using namespace std;

struct TTTT{int l,r,m,a[60];} t[400040];
int a[100010];
int n,m,q,x,y,ans;

inline void Update(int k) {
	for (int i=0;i<60;++i)
		t[k].a[i]=t[k+k].a[i]+t[k+k+1].a[(i+t[k+k].a[i])%60];
}

inline void Build(int k,int l,int r) {
	t[k].l=l; t[k].r=r;
	t[k].m=(l+r)>>1;
	if (l==r) {
		for (int i=0;i<60;++i)
			if (i%a[l]==0) t[k].a[i]=2;
			else t[k].a[i]=1;
		} else {
		Build(k+k,l,t[k].m);
		Build(k+k+1,t[k].m+1,r);
		Update(k);
	}
}

inline void Modify(int k,int x,int y) {
	if (t[k].l==t[k].r) {
		for (int i=0;i<60;++i)
			if (i%y==0) t[k].a[i]=2;
			else t[k].a[i]=1;
	} else {
		if (x<=t[k].m) Modify(k+k,x,y);
		else Modify(k+k+1,x,y);
		Update(k);
	}
}

inline void Query(int k,int l,int r) {
	if (l<=t[k].l && t[k].r<=r) {
		ans+=t[k].a[ans%60];
	} else {
		if (l<=t[k].m) Query(k+k,l,r);
		if (r>t[k].m) Query(k+k+1,l,r);
	}
}

inline int Gi() {
	char c=getchar();
	while (c<'0' || c>'9') c=getchar();
	int ret=0;
	while (c>='0' && c<='9') {ret=ret*10+c-'0';c=getchar();}
	return ret;
}

inline bool Get() {
	while (1) {
		char c=getchar();
		if (c=='C') return true;
		if (c=='A') return false;
	}
	return true;
}

int main() {
	scanf("%d",&n);
	REP(i,n) a[i]=Gi();
	scanf("%d",&q);
	Build(1,1,n);
	while (q--) {
		if (Get()) {
			x=Gi(); y=Gi();
			Modify(1,x,y);
		} else {
			x=Gi(); y=Gi();
			ans=0;
			Query(1,x,y-1);
			printf("%d\n",ans);
		}
	}
	return 0;
}