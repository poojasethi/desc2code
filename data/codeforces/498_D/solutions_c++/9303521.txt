#include <stdio.h>

#define N 100100
#define L id << 1
#define R id << 1 | 1

const int K = 60;

int n, a[N];
int f[N << 2][K];

char s[10];

void push_up(int md, int id){
	for(int j, i = 0; i < K; i ++){
		j = i + f[L][i];
		if(j % a[md] == 0)j ++;
		j ++;
		f[id][i] = j - i + f[R][j % K];
	}
}

void make_tree(int l, int r, int id){
	if(l == r){
		for(int i = 0; i < K; i ++)f[id][i] = 0;
		return;
	}
	int md = (l + r) >> 1;
	make_tree(l, md, L);
	make_tree(md + 1, r, R);
	push_up(md, id);
}

int get_value(int st, int x, int y, int l, int r, int id){
	if(x <= l && r <= y)return f[id][st];
	int rt = 0, flag = 0, md = (l + r) >> 1;
	if(md >= x){
		flag = 1;
		rt = get_value(st, x, y, l, md, L);
		st += rt;
	}
	if(md < y){
		if(flag){
			if(st % a[md] == 0)st ++, rt ++;
			st ++, rt ++;
		}
		rt += get_value(st % K, x, y, md + 1, r, R);
	}
	return rt;
}

void update(int x, int l, int r, int id){
	if(l == r)return;
	int md = (l + r) >> 1;
	if(md >= x)update(x, l, md, L);
	else update(x, md + 1, r, R);
	push_up(md, id);
}

int main(){
	scanf("%d", &n);
	for(int i = 1; i <= n; i ++)scanf("%d", a + i);
	n ++;
	int q, x, y;
	scanf("%d", &q);
	make_tree(1, n, 1);
	while(q --){
		scanf("%s %d %d\n", s, &x, &y);
		if(s[0] == 'A')printf("%d\n", get_value(0, x, y, 1, n, 1));
		else {
			a[x] = y;
			update(x, 1, n, 1);
		}
	}
	return 0;
}