#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

#define MAX_N 100010
#define MAX_M 60
struct SegmentTree {
#define lc o<<1
#define rc o<<1|1
#define lson l, m, lc
#define rson m+1, r, rc
	int sum[MAX_N << 2][MAX_M];
	void up(int o) {
		rep(i, MAX_M)
			sum[o][i] = sum[lc][i] + sum[rc][(sum[lc][i] + i)% MAX_M];
	}
	void update(int l, int r, int o, int L, int val) {
		if(l == r) {
			rep(i, MAX_M) {
				if(i % val == 0)
					sum[o][i] = 2;
				else
					sum[o][i] = 1;
			}
		} else {
			int m = l + r >> 1;
			if(L <= m) 
				update(lson, L, val);
			else
				update(rson, L, val);
			up(o);
		}
	}
	void query(int l, int r, int o, int &d, int L, int R) {
		if(L <= l && r <= R) {
			d += sum[o][d % MAX_M];
		} else {
			int m = l + r >> 1;
			if(L <= m)
				query(lson, d, L, R);
			if(R > m)
				query(rson, d, L, R);
		}
	}
}tree;



int main() {
	int N, x;
	scanf("%d", &N);
	rep(i, N) {
		scanf("%d", &x);
		tree.update(1, N, 1, i + 1, x);
	}
	int q;
	scanf("%d", &q);
	while(q --) {
		char op[2];
		int L, R, d;
		scanf("%s%d%d", op, &L, &R);
		if(*op == 'A') {
			d = 0;
			tree.query(1, N, 1, d, L, R - 1);	
			printf("%d\n", d);
		} else {
			tree.update(1, N, 1, L, R);
		}
	}
	return 0;
}

