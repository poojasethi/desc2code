#include<iostream>
#include<fstream>
#include<sstream>
#include<cstdio>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<cstring>
using namespace std;

#define FOR(I,A,B) for (int I=int(A);I<int(B);++I)
#define MEM(A,B) memset(A,B,sizeof(A));
#define CPY(A,B) memcpy(A,B,sizeof(B));
typedef long long LL;
const int N(100010);
int n;
LL k, t;
int a[N], c1[N], c2[N];
map<int, int> num;
int low(int x) {return x & (-x);}
void update(int *c, int x, int v)
{
	 for (; x <= n; x += low(x)) c[x] += v;
}
int sum(int *c, int x)
{
	int ret = 0;
	for (; x; x -= low(x)) ret += c[x];
	return ret;
}
int main()
{
	//freopen("in.txt", "r", stdin);
	cin >> n >> k;
	FOR(i, 1, n + 1) {
	   cin >> a[i];
	   num[a[i]] = 0;
	}
	int m = 0;
	for (map<int, int> :: iterator it = num.begin(); it != num.end(); ++it)
	    it->second = ++m;
	FOR(i, 1, n + 1) a[i] = num[a[i]];
	LL ans = 0, t = 0;
	int l, r;
	for (r = n; r >= 2; --r) {
		t += sum(c2, a[r] - 1);
	    update(c2, a[r], 1);
	}
	for (l = 1, r = 2; l < n; ++l) {
	    t += l - 1 - sum(c1, a[l]);
	    t += sum(c2, a[l] - 1);
	    update(c1, a[l], 1);
	    for (; l == r || r <= n && t > k; ++r) {
	        t -= l - sum(c1, a[r]);
	        t -= sum(c2, a[r] - 1);
	        update(c2, a[r], - 1);
	    }
	    ans += n - r + 1;
	}
	cout << ans << endl;
	return 0;
}
