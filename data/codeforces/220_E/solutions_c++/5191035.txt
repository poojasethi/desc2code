// in the name of god

#include<iostream>
#include<algorithm>
#include<vector>
#include<string>
#include<iomanip>
#include<map>
#include<cstdio>
#include<cstring>

#define PB push_back

typedef long long ll;

using namespace std;

const int maxn=1000*100+100;

struct fenwick{
	ll tree[maxn];
	fenwick(){
		memset(tree,0,sizeof tree);
	}
	ll C(ll i){
		ll ret=0;
		for(;i>0;i-=i&(-i))
			ret+=tree[i];
		return ret;
	}
	ll sum(int i,int j){
		return C(j)-C(i-1);
	}
	void update(ll x,ll val){
		for(;x<maxn;x+=x&(-x))
			tree[x]+=val;
	}
};

ll n,k,ans,l,r,x,y,z,t=1,a[maxn],b[maxn],d[maxn],m;

map<ll,ll>mp;

fenwick f,c;

bool flag;

int main(){
	ios::sync_with_stdio(false);
	cin>>n>>k;
	for(int i=1;i<=n;i++){
		cin>>d[i];
		a[i]=d[i];
	}
	sort(d+1,d+n+1);
	for(int i=1;i<=n;i++)
		if(!mp[d[i]])
			mp[d[i]]=t++;
	for(int i=1;i<=n;i++)
		b[i]=mp[a[i]];
	for(int i=1;i<=n;i++){
		x=f.sum(b[i]+1,n);
		m+=x;
		f.update(b[i],1);
	}
	if(m<=k){
		cout<<(n*(n-1))/2<<endl;
		return 0;
	}
	for(int i=1;i<=n;i++){
		x=0;
		if(i!=1){
			if(b[i-1]!=1)
				m+=f.sum(1,b[i-1]-1);
			m+=c.sum(b[i-1]+1,n);
			c.update(b[i-1],1);
		}	
		while(m>k){
			x=0;
			if(r==n){
				flag=1;
				break;
			}
			if(b[r+1]!=1)
				m-=f.sum(1,b[r+1]-1);
			m-=c.sum(b[r+1]+1,n);
			f.update(b[++r],-1);
		}
		if(flag)
			break;
		if(i!=1)
			ans+=(n-r);
	}
	cout<<ans<<endl;
	return 0;
}
