#include<iostream>
#include<algorithm>
using namespace std;

const int N = 110000;

int n, x[N], aib1[N], aib2[N], vmax;
long long rez, k, inv;
pair<int, int> t[N];

void add(int aib[], int poz, int val) {
	for(; poz <= n; poz += poz&(-poz))
		aib[poz] += val;
}

inline int sum(int aib[], int poz) {
	int r = 0;
	
	for(; poz; poz -= poz & (-poz))
		r += aib[poz];
	return r;
}

int q(int aib[], int pozx, int pozy) {
	return sum(aib, pozy) - sum(aib, pozx - 1);
}

int main() {
	int i, r, l;
	
	cin >> n >> k;
	
	for(i = 1; i<=n; ++i)
		cin >> x[i], t[i].first = x[i], t[i].second = i;
	
	sort(t + 1, t + n + 1);
	
	for(i = 1; i<=n; ++i)
		x[t[i].second] = (t[i - 1].first == t[i].first) ? x[t[i - 1].second] : x[t[i - 1].second] + 1,
		vmax = max(vmax, x[t[i].second]);
	
	r = n - 1;
	
	for(i = 1; i<=r; ++i) {
		add(aib1, x[i], 1);
		
		inv = inv + q(aib1, x[i] + 1, vmax);
	}
	
	for(l = n; l > 1; --l) {
		
		inv = inv + q(aib1, x[l] + 1, vmax) + q(aib2, 1, x[l] - 1);
		
		add(aib2, x[l], 1);
		
		while((r && inv > k) || r>=l) {
			add(aib1, x[r], -1);
			
			inv = inv - q(aib1, x[r] + 1, vmax) - q(aib2, 1, x[r] - 1);
			
			--r;
		}
		
		if(!r)
			break;
		
		rez += r;
	}
	
	cout << rez;
	
	return 0;
}
