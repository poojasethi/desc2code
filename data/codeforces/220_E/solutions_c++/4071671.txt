#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>

#define BUG(x) cerr << #x << " = " << x << endl;

using namespace std;

const int MAX = 100001;

typedef long long ll;

int a[MAX];
int b[MAX];
int N;

struct BIT
{
	ll bit[MAX];
	BIT()
	{
		memset(bit, 0, sizeof bit);
	}
	void update(int pos, int v)
	{
		for (; pos <= N; pos += pos & -pos)
			bit[pos] += v;
	}
	ll read(int pos)
	{
		if (pos <= 0)
			return 0;
		ll ret = 0;
		for (; pos; pos -= pos & -pos)
			ret += bit[pos];
		return ret;
	}
	ll query(int lo, int hi)
	{
		if (lo > hi)
			return 0;
		return read(hi) - read(lo - 1);
	}
};

int main()
{

	ll K;
	scanf("%d%I64d", &N, &K);

	for (int i = 0; i < N; ++i)
	{
		scanf("%d", a + i);
		b[i] = a[i];
	}

	sort(b, b + N);
	for (int i = 0; i < N; ++i)
		a[i] = lower_bound(b, b + N, a[i]) - b + 1;

	BIT L, R;
	ll total = 0, ret = 0;

	for (int i = N - 1; i > 0; --i)
	{
		total += R.query(0, a[i] - 1);
		R.update(a[i], 1);
	}

	for (int l = 0, r = 1; l < N; ++l)
	{
		total += L.query(a[l] + 1, N) + R.query(0, a[l] - 1);
		L.update(a[l], 1);
		//BUG(total);
		while (l >= r || (total > K && r < N))
		{
			total -= L.query(a[r] + 1, N);
			total -= R.query(0, a[r] - 1);
			R.update(a[r++], -1);
		}
		ret += N - r;
	}

	printf("%I64d\n", ret);

	return 0;
}
