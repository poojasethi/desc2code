#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#define N 120000
using namespace std;
int tree[2][N],n,l,r,p[N],a[N],i;
long long ans,k,v;
int der(int x){
	return lower_bound(p+1,p+n+1,x)-p;
}
int calc(int o,int x){
	if(!o)x=n-x+1;
	int res=0;
	for(int i=x;i;i-=i&(-i))res+=tree[o][i];
	return res;
}
void add(int o,int x,int flag){
	if(!o)x=n-x+1;
	for(int i=x;i<=n;i+=i&(-i))tree[o][i]+=flag;
}
int main(){
	scanf("%d%I64d",&n,&k);
	for(i=1;i<=n;++i)scanf("%d",&a[i]),p[i]=a[i];
	sort(p+1,p+n+1);
	for(i=n;i>=1;--i){
		a[i]=der(a[i]);
		v+=calc(1,a[i]-1);
		add(1,a[i],1);
	}
	r=1;
	for(l=1;l<=n;++l){
		v+=calc(0,a[l]+1)+calc(1,a[l]-1);
		add(0,a[l],1);
		while((r<=l || v>k) && r<=n){
			v-=calc(0,a[r]+1)+calc(1,a[r]-1);
			add(1,a[r],-1);
			r++;
		}
		ans+=n-r+1;
	}
	printf("%I64d\n",ans);
}
