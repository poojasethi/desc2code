#include <bits/stdc++.h>
//Practice makes perfect

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 1e5 + 100;

inline void add(int fen[], int i, int x){ i += 10;
	for (; i < MAXN; i += i & -i) fen[i] += x;
}

inline int get(int fen[], int i){  i += 10;
	int sum = 0;
	for (; i; i -= i & -i) sum += fen[i];
	return sum;
}

int t[MAXN], tsz;
inline int getid(int a){
	return lower_bound(t, t + tsz, a) - t;
}

int post[MAXN], pre[MAXN], a[MAXN];
int n; ll k;
ll cur = 0;

int rem(int r){
	add(post, getid( a[r] ), -1);

	cur -= get(post, getid( a[r] ) - 1);
	cur -= get(pre, n) - get(pre, getid( a[r] ) );
}

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	cin >> n >> k;
	for (int i = 0; i < n; i++) 
		cin >> a[i], t[i] = a[i];

	sort(t, t + n);
	tsz = unique(t, t + n) - t;

	int l = 0, r = 1;

	for (int i = n - 1; i >= 1; i--){
		cur += get(post, getid(a[i]) - 1);
		add( post, getid( a[i] ), 1);
	}
		

	ll ans = 0;

	do{
		if (r == l)
			rem( r++ );

		cur += get(post, getid( a[l] ) - 1);
		cur += get(pre, n) - get(pre, getid( a[l] ) );
		
		add( pre, getid( a[l] ), 1 );

		while(r < n - 1 && cur > k)
			rem( r++ );

		//cerr << "[" << l << ", " << r << ") : " << cur << endl;

		if (r < n && cur <= k)
			ans += n - r;
		
		l++;
	} while (l < n);

	cout << ans << endl;
}
