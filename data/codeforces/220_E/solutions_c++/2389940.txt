#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;
#define rep(i, n) for (long long i = 0; i < n; ++i)
long long a[100005], b[100005], f[100005], n;
long long sum[100005];
long long ans, k, tp;

long long ins(long long a, long long b) {
    for (; a <= tp; a += a & (-a)) f[a] += b;
}

long long tmp;
long long get(long long a) {
    tmp = 0;
    for (; a  > 0; a -= a & (-a)) tmp += f[a];
    return tmp;
}

int main() {
  //  freopen("in.txt", "r", stdin);
    cin >> n;
    cin >> k;
    rep(i, n) cin >> a[i], b[i] = a[i];
    sort(b, b + n);
    tp = unique(b, b + n) - b;
    rep(i, n) a[i] = lower_bound(b, b + tp, a[i]) - b + 1;
    ++tp;
    rep(i, n) {
        sum[i] += i - get(a[i]);
        ins(a[i], 1);
    }
    rep(i, n + 1) f[i] = 0;
    for (long long i = n - 1; i >= 0; --i) {
        sum[i] += get(a[i] - 1);
        ins(a[i], 1);
    }
    rep(i, n + 1) f[i] = 0;
    rep(i, n) if (i) sum[i] += sum[i - 1];
    long long tot = sum[n - 1] / 2;
    long long r = 1, ss = 0;
    rep(l, n) {
        while (r < n && tot - sum[r - 1] + sum[l] + ss > k) {
            ss += r - l - 1 - get(a[r]);
            ins(a[r], 1); ++r;
        }
        if (r == n) break;
        ans += n - r;
        if (r != l + 1) {
            ss -= get(a[l + 1] - 1);
            ins(a[l + 1], -1);
        } else ++r;
    }
    cout << ans << endl;
    return 0;
}
