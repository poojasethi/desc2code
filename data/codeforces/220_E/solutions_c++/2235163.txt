#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

int p[111111];
vector<int> axis;
struct TA
{
	int n;
	int a[111111];
	TA()
	{
		n = 100020;
		memset(a,0,sizeof(a));
	}

	inline int lowbit(int x)
	{
		return x & (-x);
	}

	void insert(int x,int t)
	{
		while (x <= n)
		{
			a[x] += t;
			x += lowbit(x);
		}
	}

	int get(int x)
	{
		int ret = 0;
		while (x)
		{
			ret += a[x];
			x -= lowbit(x);
		}
		return ret;
	}
}la,ra;


int main()
{
	ios::sync_with_stdio(false);
	int n;
	long long k;
	cin >> n >> k;
	axis.push_back(0);
	for (int i = 1;i <= n;++i)
	{
		cin >> p[i];
		axis.push_back(p[i]);
	}
	sort(axis.begin(),axis.end());
	axis.erase(unique(axis.begin(),axis.end()),axis.end());
	long long inv = 0;
	for (int i = n;i;--i)
	{
		int li = lower_bound(axis.begin(),axis.end(),p[i]) - axis.begin();
		ra.insert(li,1);
		inv += ra.get(li-1);
	}
	long long ans = 0;
	for (int l = 1,r = 1;l < n;++l)
	{
		int li = lower_bound(axis.begin(),axis.end(),p[l]) - axis.begin();
		la.insert(li,1);
		inv += l - la.get(li);
		inv += ra.get(li - 1);
		while (r <= l || r <= n && inv > k)
		{
			int ri = lower_bound(axis.begin(),axis.end(),p[r++]) - axis.begin();
			inv -= l - la.get(ri);
			inv -= ra.get(ri - 1);
			ra.insert(ri,-1);
		}
		ans += n + 1 - r;
	}
	cout << ans << endl;
	return 0;
}

 	    	  		  		    				