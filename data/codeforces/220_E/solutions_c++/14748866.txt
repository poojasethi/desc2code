# include <bits/stdc++.h>

using namespace std;

typedef long long int ll;

const int maxn = 1e5 + 100;

ll n, inv, ans;

int a[maxn], fen[maxn][2];

void add(int idx,int val,int dr){
	for (idx++; idx < maxn; idx += idx & -idx)
		fen[idx][dr] += val;
}

int get(int idx,int dr){
	int sum = 0;
	for (; idx > 0; idx -= idx & -idx)
		sum += fen[idx][dr];
	return sum;
}

int get(int l,int r,int dr){
	return get(r, dr) - get(l, dr);
}

void _add(int idx){
	add(a[idx], 1, 0);
	inv += get(0, a[idx], 1);
	inv += get(a[idx]+1, n, 0);
}

void _rem(int idx){
	add(a[idx], -1, 1);
	inv -= get(a[idx]+1, n, 0);
	inv -= get(0, a[idx], 1);
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);

	ll k;
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		cin >> a[i];

	vector <int> v;
	for (int i = 0; i < n; i++)
		v.push_back(a[i]);
	sort(v.begin(), v.end());
	v.resize(unique(v.begin(), v.end()) - v.begin());
	for (int i = 0; i < n; i++)
		a[i] = lower_bound(v.begin(), v.end(), a[i]) - v.begin();

	for (int i = 0; i < n; i++){
		add(a[i], 1, 1);
		inv += get(a[i] + 1, n, 1);
	}
	int r = 0;
	for (int l = 0; l < n; l++){
		_add(l);
		if(l == r)
            _rem(r++);
		while(r < n && inv > k)
			_rem(r++);

        ans += n - r;
	}

	cout << ans  << endl;

	return 0;
}
 				 		   		 	 	  		   		 				