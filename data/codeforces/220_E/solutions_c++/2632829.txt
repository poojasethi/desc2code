#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<algorithm>
#include<vector>
#include<queue>
#include<math.h>
#include<string>
#include<map>
#include<set>
using namespace std;
typedef long long ll;
const int inf = 1 << 30;
#define mod 1000000007

#define N 100010

int a[N];
vector<int> e;
map<int,int> mp;

int c[2][N];
int lowbit(int x)
{
	return x&(-x);
}
void add(int i,int x,int k)
{
	for(;i<=N;i=i+lowbit(i))
		c[k][i]+=x;
}
int sum(int i,int k)
{
	int s=0;
	for(;i;i=i-lowbit(i))
		s+=c[k][i];
	return s;
}
ll L[N],R[N];
int main()
{
	int n;
	ll k;
	scanf("%d%I64d",&n,&k);
	for(int i=1;i<=n;i++){
		scanf("%d",&a[i]);
		e.push_back(a[i]);
	}
	sort(e.begin(),e.end());
	int kk=1;
	for(int i=0;i<(int)e.size();i++){
		if(mp.find(e[i])==mp.end()){
			mp[e[i]]=kk++;
		}
	}
	memset(c,0,sizeof(c));
	for(int i=1;i<=n;i++){
		add(mp[a[i]],1,0);
		L[i]=L[i-1]+i-sum(mp[a[i]],0);
	}
	for(int i=n;i>=1;i--){
		add(mp[a[i]],1,1);
		R[i]=R[i+1]+sum(mp[a[i]]-1,1);
	}
	fill(c[0],c[0]+N,0);
	ll ans=0;
	int j=2;
	add(mp[a[1]],-1,1);
	ll z=0;
	for(int i=1;i<n;i++){
		add(mp[a[i]],1,0);
		ll s=L[i]+R[j];
		z+=sum(mp[a[i]]-1,1);
		//printf("%I64d %I64d\n",s,z);
		while(j<=n&&(s+z>k||j<i+1)){
			add(mp[a[j]],-1,1);
			z-=i-sum(mp[a[j]],0);
			j++;
			s=L[i]+R[j];
		}
		//printf("%d %d\n",i,j);
		ans+=n-j+1;
	}
	printf("%I64d\n",ans);

}
