#include<iostream>
#include<algorithm>
#include<map>

#define int long long

using namespace std;

const int MAXN = 100005;
int a[MAXN], fen[2][MAXN], b[MAXN], c[MAXN];
int n, k;
map<int, int> m;

void add(int x, int t, int val)
{
	for(; x <= n; x += x & (-x))
		fen[t][x] += val;
}

int get(int x, int t)
{
	int ans = 0;
	for(; x; x -= x & (-x))
		ans += fen[t][x];
	return ans;
}

main()
{
	cin >> n >> k;
	for(int i = 0; i < n; i++)
	{
		cin >> a[i];
		b[i] = c[i] = a[i];
	}
	sort(b, b + n);
	reverse(b, b + n);
	int in = 1;
	for(int i = 0; i < n; i++)
	{
		m[b[i]] = in++;
		while(i < n && b[i] == b[i + 1])
			i++;
	}
	for(int i = 0; i < n; i++)
		a[i] = m[a[i]];
	reverse(b, b + n);
	in = 1;
	for(int i = 0; i < n; i++)
	{
		m[b[i]] = in++;
		while(i < n && b[i] == b[i + 1])
			i++;
	}
	for(int i = 0; i < n; i++)
		b[i] = m[c[i]];
	int l = -1, x = 0;
	for(int i = 0; i < n; i++)
	{
		add(a[i], 0, 1);
		x += get(a[i] - 1, 0);
		if(x > k)
		{
			l = i - 1;
			x -= get(a[i] - 1, 0);
			add(a[i], 0, -1);
			break;
		}
	}
	if(l == -1)
	{
		cout << n * (n - 1) / 2 << endl;
		return 0;
	}
	int ans = 0;
	for(int i = n - 1; l >= 0; i--)
	{
		add(b[i], 1, 1);
		x += get(a[i] - 1, 0);
		x += get(b[i] - 1, 1);
		while(l >= 0 && x > k)
		{
			x -= get(a[l] - 1, 0) + get(b[l] - 1, 1);
			add(a[l], 0, -1);
			l--;
		}
		if(l < 0)
			break;
		ans += l + 1;
	}
	cout << ans << endl;
	return 0;
}
