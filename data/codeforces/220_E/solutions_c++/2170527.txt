#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

#define MN 100001
#define NN 131072

int N;
long long K,Ans,ans;
#define index Index
int A[MN],O[MN],index;

struct LT
{
    int S[NN<<1];
    void ins( int k, int s)
    {
        for (k+=NN;k;k>>=1) S[k]+=s;
    }
    int find( int l, int r)
    {
        int t=0;
        if (l>r) return 0;
        for (l+=NN-1,r+=NN+1;(l^r)!=1;l>>=1,r>>=1)
        {
            if (!(l&1)) t+=S[l+1];
            if (r&1) t+=S[r-1];
        }
        return t;
    }
    int findl( int s) {return find(1,s-1);}
    int findr( int s) {return find(s+1,index);}
} T1,T2;

bool cmp( int a, int b) {return A[a]<A[b];}

int main()
{
    scanf("%d%I64d",&N,&K);
    for (int i=1;i<=N;i++) scanf("%d",A+i),O[i]=i;
    sort(O+1,O+N+1,cmp);
    int last=-1;
    index=0;
    for (int i=1;i<=N;i++)
    {
        if (A[O[i]]!=last) index++;
        last=A[O[i]];
        A[O[i]]=index;
    }
    for (int i=1;i<=N;i++) T2.ins(A[i],1),Ans+=T2.findr(A[i]);
    for (int l=1,r=1;l<N;l++)
    {
        Ans+=T1.findr(A[l])+T2.findl(A[l]);
        T1.ins(A[l],1);
        while ((r<=l||Ans>K)&&r<N)
        {
            Ans-=T2.findl(A[r])+T1.findr(A[r]);
            T2.ins(A[r],-1);
            r++;
        }
        if (Ans<=K) ans+=N-r+1;
        
    }
    printf("%I64d\n",ans);
}