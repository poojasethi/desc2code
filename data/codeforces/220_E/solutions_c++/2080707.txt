#include <iostream>
#include <cstdio>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdlib>
using namespace std;

const int N = 1<<17;
int n, a[100500];
int rmql[2*N+1], rmqr[2*N+1];

void setv(int * rmq, int v, int val){
	for (v+=N; v; v/=2)
		rmq[v]+=val;
}

int getv(int *rmq, int l, int r){
	int ans = 0;
	l+=N, r+=N;
	while (l<=r){
		if (l%2) ans+=rmq[l++];
		if (!(r%2)) ans+=rmq[r--];
		if (r<l) break;
		l/=2, r/=2;
	}
	return ans;
}

int main(){
	//freopen("input.txt", "r", stdin);
	long long k;
	long long ans = 0;
	long long now = 0;
	cin >> n >> k;
	map<int, int> m;
	for (int i=0; i<n; ++i){
		cin >> a[i];
		m[a[i]];
	}
	int mx = 1;
	for (map<int, int>::iterator it = m.begin(); it!=m.end(); ++it)
		it->second = mx++;
	for (int i=0; i<n; ++i)
		a[i] = m[a[i]];
	int l, r = 0;
	for (int i=0; i<n; ++i){
		now += getv(rmqr, a[i]+1, n);
		setv(rmqr, a[i], +1);
	}
	if (now <= k){
		cout<<(long long)n*(long long)(n-1)/2LL<<endl;
		return 0;
	}
	for (l = 0; l<n; ++l){
		now += getv(rmql, a[l] + 1, n);
		now += getv(rmqr, 0, a[l] - 1);
		setv(rmql, a[l], +1);
		while (now > k && r < n){
			setv(rmqr, a[r], -1);
			now -= getv(rmql, a[r] + 1, n);
			now -= getv(rmqr, 0, a[r] - 1);
			r++;
		}
		ans += (long long)(n-r);
	}
	cout<<ans<<endl;
}