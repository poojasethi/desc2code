#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int maxN=100000+10,maxT=maxN*5;

int n,a[maxN];
int b[maxN],nb,d[maxN];
long long k;

void enter(){
    scanf("%d%I64d",&n,&k);
    for (int i=1;i<=n;i++) scanf("%d",&a[i]), b[i-1]=a[i];
    sort(b,b+n); nb=unique(b,b+n)-b;
    for (int i=1;i<=n;i++) a[i]=lower_bound(b,b+nb,a[i])-b+1;
}

void update_d(int i,int val){
    for(;i>0;i-=i&-i) d[i]+=val;
}
int get_d(int i){
    int res=0;
    for (;i<maxN;i+=i&-i) res+=d[i];
    return res;
}

void remove(long long &cc,int t){
    cc-=get_d(a[t]+1);
    for (int j=a[t]-1;j>0;j-=j&-j) cc-=b[j];
    update_d(a[t],-1);
}

void solve(){
    memset(b,0,sizeof b);
    memset(d,0,sizeof d);
    long long res=0,cc=0;
    for (int i=1;i<n;i++){
        update_d(a[i],1);
        cc+=get_d(a[i]+1);
    }
    int t=n-1;
    for (int i=n;i>=1;i--){
        for (int j=a[i]-1;j>0;j-=j&-j) cc+=b[j];
        for (int j=a[i];j<maxN;j+=j&-j) b[j]++;
        cc+=get_d(a[i]+1);
        while (cc>k&&t>0){
            remove(cc,t), t--;
        }
        //printf("t=%d\n",t);
        res+=t;
        if (t>0&&t==i-1) remove(cc,t), t--;
    }
    printf("%I64d\n",res);
}

int main(){
    //freopen("e136.inp","r",stdin);
    enter();
    solve();
    return 0;
}