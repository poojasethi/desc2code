#include<iostream>
#include<algorithm>
#include<utility>
#include<set>
#include<queue>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#define lowbit(x) ((x)&(-(x)))
using namespace std;
typedef long long ll;
const int fin=0,maxn=100010;
int N,m; ll K;
int a[maxn],b[maxn];
int c1[maxn],c2[maxn];

inline void upd(int *a,int x,int w){
for(;x<=m;x+=lowbit(x))a[x]+=w;
}
inline int sum(int *a,int x){
int s=0;
for(;x;x-=lowbit(x))s+=a[x];
return s;
}

int main(){
ll org,now,ans=0;
int i,l,r,mid;
scanf("%d%I64d",&N,&K);
for(i=1;i<=N;++i)scanf("%d",a+i),b[i]=a[i];
sort(b+1,b+N+1);
for(m=1,i=2;i<=N;++i)
if(b[m]!=b[i])b[++m]=b[i];
for(i=1;i<=N;++i){
l=1,r=m;
while(l<r){
mid=(l+r)>>1;
if(b[mid]==a[i]){
l=mid;
break;
}
if(a[i]<b[mid])r=mid-1;else l=mid+1;
}
a[i]=l;
}
for(i=1;i<=N;++i)upd(c2,a[i],1);
for(org=0,i=1;i<=N;++i){
upd(c2,a[i],-1);
org+=sum(c1,m)-sum(c1,a[i])+sum(c2,a[i]-1);
upd(c1,a[i],1);
}
org>>=1;
for(i=1;i<=m;++i)c1[i]=c2[i]=0;
upd(c1,a[1],1);
for(i=2;i<=N;++i)upd(c2,a[i],1);
for(now=org,r=1,l=2;l<=N;++l){
if(r<l-1){
upd(c2,a[++r],-1);
now-=(sum(c1,m)-sum(c1,a[r])+sum(c2,a[r]-1));
}
while(r<N&&now>K){
upd(c2,a[++r],-1);
now-=(sum(c1,m)-sum(c1,a[r])+sum(c2,a[r]-1));
}
if(r==N)break;
ans+=N-r;
now+=sum(c1,m)-sum(c1,a[l])+sum(c2,a[l]-1);
upd(c1,a[l],1);
}
printf("%I64d\n",ans);
return 0;
}