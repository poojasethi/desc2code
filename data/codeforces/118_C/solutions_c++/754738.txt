#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
using namespace std;

int main() {
  int n, k;
  string num;

  cin >> n >> k;
  cin >> num;

  vector<int> ct(256);
  for (int i = 0; i < n; ++i)
    ct[num[i]]++;

  vector< pair<int,string> > solutions;
  for (int d = '0'; d <= '9'; ++d) {
    int cost = 0;
    string out = num;

    int missing = max(0, k-ct[d]);
    for (int offset = 1; missing; ++offset) {
      for (int i = 0; missing && i < n; ++i)
        if (num[i] == d + offset) out[i] -= offset, missing -= 1, cost += offset;

      for (int i = n-1; missing && i >= 0; --i)
        if (num[i] == d - offset) out[i] += offset, missing -= 1, cost += offset;
    }

    solutions.push_back( make_pair(cost, out) );
  }
  sort( solutions.begin(), solutions.end() );
  cout << solutions[0].first << endl
       << solutions[0].second << endl;
  return 0;
}
