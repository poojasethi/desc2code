import sys

def solve(ss, k, d):
	
	s = list(ss)
	need = k-s.count(chr(ord('0')+d))
	if need <= 0:
		return [0, s]
	
	cost = 0;
	for offset in range(1, 10):
		for i in range(0, len(s)):
			if need <= 0:
				return [cost, s]
			if s[i] == chr(ord('0')+d+offset):
				s[i] = chr(ord('0')+d)
				need-=1
				cost += offset
				continue
		for i in range(len(s)-1, -1, -1):
			if need <= 0:
				return [cost, s]
			if s[i] == chr(ord('0')+d-offset):
				s[i] = chr(ord('0')+d)
				need-=1
				cost += offset
				continue
	return [cost, s]
		
	
	

if __name__ == '__main__':
	
	#cin = open("1.in", "r")
	#cout = sys.stdout
	cin = sys.stdin
	
	arr = []
	for i in range(0, 2):
		for token in cin.readline().split():
			arr.append(token)
	n = int(arr[0])
	k = int(arr[1])
	s = list(arr[2])
	
	best = [1000000, ""]
	for d in range(0, 10):
		cur = solve(s, k, d)
		if cur < best:
			best = cur
	
	print best[0]
	print ''.join(best[1])
	
