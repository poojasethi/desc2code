#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>

#define NMAX 1010

using namespace std;

pair<int,int> diff[NMAX];
int ht[NMAX];
int wd[NMAX];

int N;

int get_width(int mx){
	int i,tot,k;

	tot = 0;
	for(i =0; i < N; ++i){
		tot += wd[i];
	}


	k = N/2;

	for(i = 0; i < N; ++i){
		if(ht[i] <=  mx) continue;
		if(wd[i] > mx) return (1e9);
		tot -= wd[i];
		tot += ht[i];
		--k;
	}


	if(k < 0) return (1e9);

	for(i = 0; i < N; ++i){
		if(!k || diff[i].first >= 0) break;
		if(ht[diff[i].second] >= mx || wd[diff[i].second] > mx) continue;
		tot += diff[i].first;
		--k;
	}

	return tot;
}

int main(){
	int i;
	ios::sync_with_stdio(0);

	cin >> N;

	for(i =0 ; i < N; ++i){
		cin >> wd[i] >> ht[i];
		diff[i] = make_pair(ht[i]-wd[i],i);
	}

	sort(diff,diff+N);

	long long sol = (1e18);

	for(i =0 ; i < N; ++i){
		sol = min(sol,1LL*ht[i]*get_width(ht[i]));
		sol = min(sol,1LL*wd[i]*get_width(wd[i]));
	}

	cout << sol << "\n";

	return 0;
}
