#include <iostream>
#include <cstdio>
#include <utility>
#include <algorithm>
#include <set>
using namespace std;

long long N,M;
pair <pair <long long, long long>, int> gaps[200005];
multiset<pair <long long, int> > S;
int sol[200005];

int main() {
	scanf("%I64d%I64d",&N,&M);
	long long l1,r1,l2,r2;
	scanf("%I64d%I64d",&l1,&r1);
	for (int i=0;i<N-1;i++){
		scanf("%I64d%I64d",&l2,&r2);
		gaps[i] = make_pair(make_pair(r2 - l1,l2 - r1 ),i);
		l1 = l2;
		r1 = r2;
	}
	N--;
	sort(gaps,gaps+N);
	for (int i=0;i<M;i++){
		long long tmp;
		scanf("%I64d",&tmp);
		S.insert(make_pair(tmp,i));
	}

	for (int i=0;i<N;i++){
		long long req = gaps[i].first.second;
		long long maks = gaps[i].first.first;
		set<pair <long long, int> >::iterator it = S.lower_bound(make_pair(req,0));
		if (it == S.end()) {
			printf("No\n");
			return 0;
		}
		if (it->first > maks) {
			printf("No\n");
			return 0;		
		}
		sol[gaps[i].second] = it->second; 
		S.erase(it);
	}

	printf("Yes\n");
	printf("%d",sol[0]+1);
	for (int i=1;i<N;i++)
		printf(" %d",sol[i]+1);
	printf("\n");

}