#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<map>
#include<queue>
#include<deque>
#include<set>
using namespace std;
#define rep(i,n) for((i)=0;(i)<(int)n;(i)++)
int X,Y,D;
string board[20];
int dx[]={-1,1,0,0},dy[]={0,0,-1,1};
queue<vector<int> >q;
map<vector<int>,int>mp;
bool used[20][20];
void dfs(int x,int y)
{
    int i;
    if(x<0||x>=X||y<0||y>=Y||used[x][y]||board[x][y]=='#')
    return;
    used[x][y]=true;
    rep(i,4) dfs(x+dx[i],y+dy[i]);
}
int main()
{
    int i,j,k;
    cin>>X>>Y;
    rep(i,X)cin>>board[i];
    vector<int>init;
    for(k=0;;k++)
    {
        bool found=false;
        rep(i,X)rep(j,Y)
            if(board[i][j]==k+'1')
            {
                init.push_back(i);
                init.push_back(j);
                found=true;
            }
        if(!found)break;
    }
    D=k;
    dfs(init[0],init[1]);
    bool can = false;
    rep(i,X)rep(j,Y)if(board[i][j]=='@'&&used[i][j])can=true;
    if(!can)
    {
        cout<<"-1"<<endl;
        return 0;
    }
    q.push(init);
    mp[init]=0;
    while(!q.empty())
    {
        vector<int>v=q.front();
        q.pop();
        int d=mp[v];
        rep(i,4)
        {
            int x=v[0]+dx[i],y=v[1]+dy[i];
            if(x<0||y<0||x>=X||y>=Y||board[x][y]=='#')continue;
            bool bad=false;
            rep(j,D-1)if(x==v[j*2]&&y==v[j*2+1])bad=true;
            if(bad)continue;
            if(board[x][y]=='@')
            {
                cout<<d+1<<endl;
                return 0;
            }
            vector<int>w(2*D);
            w[0]=x;w[1]=y;
            rep(j,2*D-2)w[j+2]=v[j];
            if(mp.find(w)==mp.end())
            {
                mp[w]=d+1;
                q.push(w);
            }
        }
    }
    cout<<-1<<endl;
}
