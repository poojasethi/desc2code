#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

char a[16][16];
int n, m, len;
typedef int LL;
class State{
	public:
		char b[16][16];
		int steps;
		LL hash() {
			LL p=0;
			for(int i=0;i<n;i++) for(int j=0;j<m;j++) p=p*171+b[i][j];
			return p;
		}
		void takeout(char x) {
			for(int i=0;i<n;i++)
				for(int j=0;j<m;j++)
					if(b[i][j]==x)
						b[i][j] = '.';
		}
		void increase() {
			for(int i=0;i<n;i++) for(int j=0;j<m;j++) if(b[i][j]>='0' && b[i][j]<='9') ++b[i][j];
		}
};
queue<State> Q;
set<LL> used;
int answer = -1;
bool inrange(int x, int y) {
	return x>=0&&x<n&&y>=0&&y<m;
}

const int dx[4]={1,0,-1,0}, dy[4]={0,1,0,-1};
void move(State &state) {
	state.steps++;
	for(int i=0;i<n;i++) for(int j=0;j<m;j++) if(state.b[i][j]=='2') {
		for(int f=0;f<4;f++) {
			int x=i+dx[f], y=j+dy[f];
			if(inrange(x,y)) {
				if(state.b[x][y]=='@') { answer = state.steps; return; }
				if(state.b[x][y]=='.') {
					state.b[x][y] = '1';
					int h = state.hash();
					if(!used.count(h)) {
						Q.push(state);
						used.insert(h);
					}
					state.b[x][y] = '.';
				}
			}
		}
		return;
	}
}

int main(void) {
	scanf("%d%d", &n, &m);
	for(int i=0;i<n;i++) scanf("%s", a[i]);
	for(int i=0;i<n;i++) for(int j=0;j<m;j++) if(a[i][j]>='0' && a[i][j]<='9') len=max(len, a[i][j]-'0');
	State init;
	for(int i=0;i<n;i++) for(int j=0;j<m;j++) init.b[i][j] = a[i][j];
	init.steps = 0;
	used.insert(init.hash());
	Q.push(init);
	while(!Q.empty() && answer == -1) {
		State state = Q.front(); Q.pop();
		state.takeout(len+'0');
		state.increase();
		move(state);
	}
	printf("%d\n", answer);
	return 0;
}
