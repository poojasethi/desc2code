#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <string.h>

using namespace std;
#define inf 100000000
#define NN 20
#define beyond(r, c) (r<0 || c<0 || r>=n || c>=m)

typedef long long int64;
typedef pair<int, int> pii;

int n, m, len;
char grid[NN][NN];
int qf, qb, q[50000000];
int best[15][15][(1<<16)+10];
int dr[]={0, 1, 0, -1};
int dc[]={1, 0, -1, 0};

int bfs(int sr, int sc, int s) {
	int ret, i, r, c, nr, nc, j, k, ss, tmp;
	memset(best, 9, sizeof(best));
	qf=qb=0;
	q[qb++]=sr; q[qb++]=sc; q[qb++]=s;
	best[sr][sc][s]=0;
	while (qf<qb) {
		sr=q[qf++]; sc=q[qf++]; s=q[qf++];
		for (i=0; i<4; i++) {
			r=sr+dr[i]; c=sc+dc[i];
			if (beyond(r, c)) continue;
			if (grid[r][c]=='#') continue;
			nr=sr; nc=sc;
			for (j=0; j<len-2; j++) {
				k=s&(3<<(2*j)); k>>=2*j;
				nr+=dr[k]; nc+=dc[k];
				if (nr==r && nc==c) break;
			}
			if (j<len-2) continue;
			ss=s<<2; ss|=(i+2)%4;
			ss-=ss&(3<<(2*(len-1)));
			if (best[r][c][ss]>best[sr][sc][s]+1) {
				best[r][c][ss]=best[sr][sc][s]+1;
				q[qb++]=r; q[qb++]=c; q[qb++]=ss;
			}
			if (grid[r][c]=='@') return best[r][c][ss];
		}
	}
	return -1;
}

int main() {
	int i, j, k, s, r, c, rr, cc, tr, tc;
	int pr[100], pc[100];
	scanf("%d%d", &n, &m);
	for (i=0; i<n; i++) scanf("%s", grid[i]);
	len=0;
	for (i=0; i<n; i++) {
		for (j=0; j<m; j++) {
			if ('1'<=grid[i][j] && grid[i][j]<='9') {
				k=grid[i][j]-'0';
				pr[k-1]=i; pc[k-1]=j;
				len=max(len, k);
			}
		}
	}
	for (i=s=0; i<len-1; i++) {
		r=pr[i]; c=pc[i];
		for (k=0; k<4; k++) {
			rr=r+dr[k]; cc=c+dc[k];
			if (rr==pr[i+1] && cc==pc[i+1]) break;
		}
		s|=k<<(2*i);
	}
	printf("%d\n", bfs(pr[0], pc[0], s));
	
	return 0;
}
