#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <set>
#define Hash 2099
using namespace std;

const int N = 20;

struct node
{
	int x[N],y[N],step;
}source;

char mp[N][N];
int n,m,K,move[4][2] = {0,1,0,-1,1,0,-1,0};
set<int> vis;

int make_hash(node &s){
	int ret = 0;
	for(int i = 1;i <= K;i ++)
		ret = ret * Hash + s.x[i];
	for(int i = 1;i <= K;i ++)
		ret = ret * Hash + s.y[i];
	return ret;
}

node Move(node &s){
	node ret;
	for(int i = K;i >= 2;i --){
		ret.x[i] = s.x[i - 1];
		ret.y[i] = s.y[i - 1];
	}
	ret.step = s.step + 1;
	return ret;
}

int bfs(){
	queue<node> q;
	q.push(source);
	vis.insert(make_hash(source));
	while(! q.empty()){
		node u = q.front();q.pop();
		int x = u.x[1],y = u.y[1];
		// printf("(%d,%d)\n",x,y);
		for(int i = 0;i < 4;i ++){
			int a = x + move[i][0];
			int b = y + move[i][1];
			if(mp[a][b] == 0 || mp[a][b] == '#') continue;//wall
			if(mp[a][b] == '@') return u.step + 1;
			bool conflict = false;
			for(int j = 1;j < K && !conflict;j ++)
				if(a == u.x[j] && b == u.y[j]) /*printf("(%d,%d) -> (%d,%d)\n",x,y,a,b),*/conflict = true;
			if(conflict) continue;
			node v = Move(u);
			v.x[1] = a , v.y[1] = b;
			int check = make_hash(v);
			if(vis.find(check) == vis.end()){
				// printf("x:%d  y:%d  a:%d   b:%d\n",x,y,a,b);
				vis.insert(check);
				q.push(v);
			}
		}
	}
	return -1;
}

int main(){
	// freopen("input.txt","r",stdin);
	scanf("%d%d",&n,&m);
	for(int i = 1;i <= n;i ++)
		scanf("%s",&mp[i][1]);
	K = 0;
	source.step = 0;
	for(int i = 1;i <= n;i ++)
		for(int j = 1;j <= m;j ++)
			if(mp[i][j] >= '0' && mp[i][j] <= '9'){
				int idx = mp[i][j] - '0';
				// printf("idx:%d   (%d,%d)\n",idx,i,j);
				source.x[idx] = i;
				source.y[idx] = j;
				K ++;
			}
	int ans = bfs();
	printf("%d\n",ans);
	return 0;
}