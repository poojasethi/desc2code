#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int dir[4][2]={{0,-1},{-1,0},{0,1},{1,0}};
int n,m,cnt,end;
char st[20][20];
bool u[17][17][17][17],tab[20][20];

struct snake
{
    int t[10],h,dis;
};

snake q[500005];

inline bool Judge(int x,int y)
{
    return x<n && y<m && x>=0 && y>=0;
}

inline bool Check(snake& x,int tx,int ty)
{
	int nu=((tx<<4)|ty);
	int tail=(x.h-1+cnt)%cnt;
	for(int i=1,j=(x.h+1)%cnt;i<cnt;i++,j=(j+1)%cnt) if(x.t[j]==nu && j!=tail) return 0;
	return 1;
}

inline void in()
{
	scanf("%d%d",&n,&m);
    for(int i=0;i<n;i++) scanf("%s",st[i]);
}

int main()
{
    in(); snake s;
	cnt=0;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(st[i][j]=='#') tab[i][j]=1;
			else tab[i][j]=0;
			if(st[i][j]=='@') end=((i<<4)|j);
			else if(st[i][j]>='0' && st[i][j]<='9')
			{
				cnt=max(cnt,st[i][j]-'0');
				s.t[st[i][j]-49]=((i<<4)|j);
				st[i][j]='.';
			}
		}
	}
	s.h=s.dis=0;
	register int head=0,rear=1;
	q[0]=s;
	u[(s.t[(s.h-1+cnt)%cnt]>>4)][s.t[(s.h-1+cnt)%cnt]&15][s.t[(s.h)]>>4][s.t[(s.h)]&15]=true;
	while(head<rear)
	{
		snake x=q[head++];
		for(int i=0;i<4;i++)
		{
			snake nxt=x;
			int tx=(nxt.t[nxt.h]>>4)+dir[i][0],ty=(nxt.t[nxt.h]&15)+dir[i][1];
			if(!Judge(tx,ty) || tab[tx][ty] || !Check(x,tx,ty)) continue;
			nxt.h=(nxt.h-1+cnt)%cnt;
			nxt.t[nxt.h]=((tx<<4)|ty);
			nxt.dis=x.dis+1;
			if(nxt.t[nxt.h]==end) 
			{
				printf("%d\n",nxt.dis);
				return 0;
			}
			int sx=(nxt.t[(nxt.h-1+cnt)%cnt]>>4),sy=(nxt.t[(nxt.h-1+cnt)%cnt]&15);
			bool flag=u[sx][sy][tx][ty];
			if(flag) continue;
			u[sx][sy][tx][ty]=1;
			q[rear++]=nxt;
		}	
	}
	puts("-1");
    return 0;
}

 		 	 	 	  					 	  	   	 			 	