#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
using namespace std;

int main(){
  int n,m,k=0,APPLE=1000;
  cin >> n>>m;
  vector<vector<int> > a(n,vector<int>(m,1));
  map<int,int> h;
  for (int i = 0; i < n; i++) {
    string s; cin >> s;
    for (int j = 0; j < m; j++){
      if (s[j]=='#') a[i][j]=0;
      if (isdigit(s[j])){
        h[int(s[j]-'0')] = m*i+j;
        k = max(k,int(s[j]-'0'));
      }
      if (s[j]=='@') a[i][j]=APPLE;
    }
  }
  set<vector<int> > visited;
  queue<pair<int,vector<int> > > q;
  vector<int> snake;
  for (int i = 1; i <= k; i++)
    snake.push_back(h[i]);
  q.push(make_pair(0,snake));
  vector<int> t;
  vector<int>::iterator it;
  int d,i,j;
  bool ok;
  while (not q.empty()){
    pair<int,vector<int> > e=q.front();
    q.pop();
    d=e.first;
    t=e.second;
    i=t.front()/m, j=t.front()%m;
    t.pop_back();
    if (a[i][j]==APPLE){
      cout << d << endl;
      return 0;
    }
    for (int u = i-1; u <= i+1; u++)
      for (int v = j-1; v <= j+1; v++)
        if ((u==i)^(v==j))
          if (0<=u and u<n and 0<=v and v<m and a[u][v]>0){
            ok = true;
            for (it=t.begin(); it!=t.end(); it++)
              ok &= *it!=(m*u+v);
            if (ok){
              t.insert(t.begin(),m*u+v);
              if (visited.count(t)==0){
                visited.insert(t);
                q.push(make_pair(d+1,t));
              }
              t.erase(t.begin());
            }
          }
  }
  cout << -1 << endl;
  return 0;
}