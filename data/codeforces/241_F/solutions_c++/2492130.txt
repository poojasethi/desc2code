#include<algorithm>
#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<cstdio>
#include<bitset>
#include<queue>
#include<map>
#include<set>
#define CN 1001
using namespace std;
#define ll long long
#define P pair <int, int>
#define x first
#define y second
int n, m, k;
char a[CN][CN];
P whr[26];

int dir[4][2] = {{1, 0}, {-1, 0}, {0, -1}, {0, 1}};

int find_dir(P sr, P ds){
	if (sr.x == ds.x){
		if (sr.y < ds.y) return 3;
		else return 2;
	}
	else {
		if (sr.x < ds.x) return 0; 
		else return 1;
	}
}

int main(){
	int t = 1;
	//cin >> t;
	while (t--){
		cin >> m >> n >> k;
		
		for (int i = 1;i <= m;++i){
			for (int j = 1;j <= n;++j){
				cin >> a[i][j];
				if (a[i][j] <= 'z' && a[i][j] >= 'a'){
					whr[a[i][j] - 'a'] = P(i, j);
					a[i][j] = '1';
				}
			}
		}
		
		P s, d;
		string rt;
		cin >> s.x >> s.y >> rt >> d.x >> d.y;
		
		int go = 0, i = 0;
		for (;i < rt.size();++i){
			P des = whr[rt[i] - 'a'];
			int DDD = find_dir(s, des);
			while (s.x != des.x || s.y != des.y){
				go += a[s.x][s.y] - '0';
				if (go > k) break;
				s.x += dir[DDD][0];
				s.y += dir[DDD][1];
			}
			if (go >= k) break;
			//cout << s.x <<  " " << s.y << endl;
		}
		if (go < k){
			int DDD = find_dir(s, d);
			while (s.x != d.x || s.y != d.y){
				go += a[s.x][s.y] - '0';
				if (go > k) break;
				s.x += dir[DDD][0];
				s.y += dir[DDD][1];
			}
			if (go >= k) break;
		}
		cout << s.x << " " << s.y << endl;
	}
	return 0;
}