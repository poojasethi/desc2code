
#include <iostream>
#include <vector>
#include <map>
#include <list>

using namespace std;

vector<pair<int, int> > V[200000];
int colors[200000];
int w[200000];
list<int> q;

map<int, vector<int> >answ;

void DFS()
{
    while (!q.empty()) {
        int index = q.front();
        q.pop_front();
        colors[index] = 1;
        vector<pair<int, int> >::iterator it = V[index].begin();
        int d = 0;
        for ( ; it != V[index].end() ; it++ ) {
            if (colors[it->first] != -1)
                continue;
            d++;
            if (d == w[index])
                d++;
            q.push_front(it->first);
            colors[it->first] = 0;
            w[it->first] = d;
            answ[d].push_back(it->second);
        }
    }
}

int main()
{
    int n;
    cin >> n;

    for ( int i = 0 ; i < n ; i++ ) {
        colors[i] = -1;
        w[i] = 0;
    }

    for ( int i = 1 ; i < n ; i++ ) {
        int a, b;
        cin >> a >> b;
        a--;
        b--;
        V[a].push_back(pair<int, int>(b, i));
        V[b].push_back(pair<int, int>(a, i));
    }

    q.push_front(0);
    DFS();

    int maxW = 0;
    for ( int i = 0 ; i < n ; i++ ) {
        if (maxW < w[i])
            maxW = w[i];
    }

    cout << maxW << endl;

    for ( int i = 1 ; i <= maxW ; i++ ) {
        cout << answ[i].size() << " ";
        for ( int j = 0 ; j < answ[i].size() ; j++ ) {
            cout << answ[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

