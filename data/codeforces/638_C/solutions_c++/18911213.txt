#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cctype>
#include<ctime>
#include<cstdlib>
#include<string>
#include<queue>
#include<cmath>
#include<set>
#include<map>
#include<bitset>
#define Rep(x,a,b) for (int x=a;x<=b;x++)
#define Drp(x,a,b) for (int x=a;x>=b;x--)
#define Cross(x,a) for (int x=head[a];~x;x=next[x])
#define ll long long
#define oo (1<<29)
#define mk(a,b) make_pair(a,b)
#define fr first
#define sc second
using namespace std;
inline ll IN(){
	ll x=0;int ch=getchar(),f=1;
	while (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();
	if (ch=='-'){f=-1;ch=getchar();}
	while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}
	return x*f;
}
inline void OUT(ll x){
	if (x<0) putchar('-'),x=-x;
	if (x>=10) OUT(x/10),putchar(x%10+'0');
		else putchar(x+'0');
}
const int N=200005;
vector<int>Ans[N];
int k,n,cnt,to[N*2],next[N*2],id[N*2],head[N];
void AddEdge(int u,int v,int idx){
	to[cnt]=v;next[cnt]=head[u];id[cnt]=idx;head[u]=cnt++;
}
int Mx;
void DFS(int u,int fa,int d){
	int now=0;
	Cross(i,u){
		if (to[i]!=fa){
			now++;if (now==d) now++;
			Mx=max(Mx,now);
			Ans[now].push_back(id[i]);
			DFS(to[i],u,now);
		}
	}
}
int main(){
	n=IN();
	memset(head,-1,sizeof head);
	Rep(i,1,n-1){
		int u=IN(),v=IN();
		AddEdge(u,v,i);
		AddEdge(v,u,i);
	}
	DFS(1,0,0);
	OUT(Mx),putchar('\n');
	Rep(i,1,Mx){
		OUT(Ans[i].size()),putchar(' ');
		Rep(j,0,Ans[i].size()-1)
			OUT(Ans[i][j]),putchar(' ');
		putchar('\n');
	}
}
