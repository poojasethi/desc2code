#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#define ll long long
#define pb push_back
#define mp make_pair
#define M_PI 3.14159265358979323846
using namespace std;
int n;
vector <vector <int> > v(200000);
vector <vector <int> > u(200000);
int day[200000];
int fre[200000];
vector <set <int> > s(200000);
vector <vector <int> > ans(200000);
int t = 1;
void repair(int i, int j, int k) {
	if (s[i].find(k) == s[i].end()) s[i].insert(k);
	if (s[j].find(k) == s[j].end()) s[j].insert(k);
	while (s[i].find(fre[i]) != s[i].end()) fre[i]++;
	while (s[j].find(fre[j]) != s[j].end()) fre[j]++;
}
void dfs(int i) {
	for (int j = 0; j < v[i].size(); j++) {
		if (day[u[i][j]] != -1) continue;
		int k = max(fre[i], fre[v[i][j]]);
		t = max(t, k + 1);
		day[u[i][j]] = k;
		repair(i, v[i][j], k);
		dfs(v[i][j]);
	}
}
int main() {
    srand(time(NULL));
    ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int x, y;
		cin >> x >> y;
		x--;
		y--;
		v[x].pb(y);
		v[y].pb(x);
		u[x].pb(i);
		u[y].pb(i);
	}
	fill(day, day + n, -1);
	fill(fre, fre + n, 0);
	dfs(0);
	for (int i = 0; i < n - 1; i++) ans[day[i]].pb(i);
	cout << t << "\n";
	for (int i = 0; i < t; i++) {
		cout << ans[i].size() << " ";
		for (int j = 0; j < ans[i].size(); j++) cout << ans[i][j] + 1 << " ";
		cout << "\n";
	}
	return 0;
}