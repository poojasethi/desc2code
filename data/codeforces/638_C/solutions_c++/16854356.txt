#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <cstring>
#include <cassert>
#include <utility>
#include <iomanip>

using namespace std;

const int MAXN = 205000;

int n;
vector <int> g[MAXN];
bool used[MAXN];
vector <int> ind[MAXN];
vector <int> c[MAXN];
vector <int> ans[MAXN];
int mx = 0;

void dfs(int v, int bad = 0) {
	used[v] = true;
	int num = 1;
	for (int i = 0; i < (int) g[v].size(); i++) {
		int to = g[v][i];
		if (used[to]) {
			c[v].push_back(-1);
			continue;
		}
		else {
			if (num == bad)
				num++;
			c[v].push_back(num);
			dfs(to, num);
			mx = max(mx, num);
			ans[num].push_back(ind[v][i]);
			num++;
		}
	}
}

int main() {
	//assert(freopen("input.txt","r",stdin));
	//assert(freopen("output.txt","w",stdout));

	scanf("%d", &n);
	for (int i = 1; i < n; i++) {
		int from, to;
		scanf("%d %d", &from, &to);
		g[from].push_back(to);
		g[to].push_back(from);
		ind[from].push_back(i);
		ind[to].push_back(i);
	}

	dfs(1);

	cout << mx << endl;
	for (int i = 1; i <= mx; i++) {
		printf("%d ", (int) ans[i].size());
		for (int j = 0; j < (int) ans[i].size(); j++) {
			printf("%d ", ans[i][j]);
		}
		printf("\n");
	}

	return 0;
}