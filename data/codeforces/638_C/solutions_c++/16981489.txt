#include<bits/stdc++.h>
using namespace std;

#define MAXN 200006

map < pair < int , int > , int > Edges;
int deg[MAXN];
bool vis[MAXN];
vector < int > E[MAXN];
vector < int > ans[MAXN];

void dfs(int node, int taken)
{
	// printf("\t\t%d %d\n", node, taken);
	vis[node] = true;
	int i,x,y, tm=0;
	for (i=0; i<E[node].size(); ++i)
	{
		y = E[node][i];
		if (vis[y]) continue;
		if (++tm == taken) ++tm;
		dfs(y,tm);
		x = node;
		if (x > y) swap (x,y);
		ans[tm].push_back(Edges[make_pair(x,y)]);
	}
}

int main()
{	
	// freopen("data.txt", "r", stdin);
	int N,i,j,x,y,day;
	set < int > :: iterator is;
	while (scanf("%d", &N) != EOF)
	{
		Edges.clear();
		for (i=1; i<=N; ++i) E[i].clear(), ans[i].clear(), vis[i] = deg[i] = 0;
		day = 1;
		for (i=1; i<N; ++i)
		{
			scanf("%d %d", &x, &y);
			if (x > y) swap(x,y);
			Edges[make_pair(x,y)] = i;
			++deg[x], ++deg[y];
			E[x].push_back(y), E[y].push_back(x);
			day = max(day, max(deg[x],deg[y]));
		}
		printf("%d\n", day);
		dfs(1,0);
		for (i=1; i<=day; ++i)
		{
			printf("%d", ans[i].size());
			for (j=0; j<ans[i].size(); ++j) printf(" %d", ans[i][j]);
			puts("");
		}
	}
	return 0;
}