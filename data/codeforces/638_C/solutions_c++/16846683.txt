#include <iostream>
#include <vector>

using namespace std;

vector<vector<pair<int, int> > > g;
vector<vector<int> > ans;
vector<int> used;
int m;

void dfs(int x, int f) {
    used[x] = true;
    int c = 0;
    for (int i = 0; i < g[x].size(); ++i)
        if (!used[g[x][i].first]) {
            if (c == f)
                c++;
            ans[c].push_back(g[x][i].second);
            dfs(g[x][i].first, c);
            c++;
        }
}

int main()
{
    m = 0;
    int n;
    cin >> n;
    g.resize(n);
    used.resize(n, false);
    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        g[a - 1].push_back(make_pair(b - 1, i));
        g[b - 1].push_back(make_pair(a - 1, i));
        m = max(m, (int)g[a - 1].size());
        m = max(m, (int)g[b - 1].size());

    }
    ans.resize(m);
    dfs(0, -1);

    cout << m << "\n";
    for (int i = 0; i < m; ++i) {
        cout << ans[i].size() << " ";
        for (int j = 0; j < ans[i].size(); ++j)
            cout << ans[i][j] + 1 << " ";
        cout << "\n";
    }

    return 0;
}
