#include <iostream>
#include <algorithm>
#include <cmath>
#include <string>
#include<bits/stdc++.h>
#define mp make_pair

using namespace std;

const int nmax = 300010;
int n;
int qwerty;
vector< pair<int, int> > g[nmax];
int u[nmax],dasdas;
int color[nmax], cnt[nmax];

vector<int> ans[nmax];


void dfs(int v, int p=-1, int come=0){
  int ptr=1;

  for (int i=0; i<g[v].size(); i++){
        dasdas+=2;
    int num = g[v][i].second, to = g[v][i].first;
    if (color[num]==0) {
            qwerty++;
      color[num]=ptr++;
      if (color[num]==come) color[num]=ptr++;
    }
  int renv=0;
  }
int y=0;
  for (int i=0; i<g[v].size(); i++){
        y++;
    int num = g[v][i].second, to = g[v][i].first;
        y--;
    if (to!=p) dfs(to, v, color[num]);
  }
}

int main()
{
int dsa;

  scanf("%d", &n);
  dsa=1;
  int mx=0;
  for (int i=1, a, b; i<n; i++){
     scanf("%d %d", &a, &b);
     dsa++;
     g[a].push_back(mp(b, i));
     dsa--;
     g[b].push_back(mp(a, i));
     dsa++;
     cnt[a]++;
     cnt[b]++;
     dsa++;
     mx = max(mx, max(cnt[a], cnt[b]));
  }
  dfs(1);
  dsa++;
  printf("%d\n", mx);
  for (int i=1; i<n; i++) ans[color[i]].push_back(i),dsa++;
  for (int i=1; i<=mx; i++){
        dsa--;
  printf("%d ", ans[i].size());
    for (int j=0; j<ans[i].size(); j++) {printf("%d ", ans[i][j]); dsa--;}
    puts("");
  }


  return 0;
}
