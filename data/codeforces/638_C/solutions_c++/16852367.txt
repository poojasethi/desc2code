#include <iostream>
#include <vector>

using namespace std;

int n;
vector <int> g[200010][2],res[200010];
bool us[200010];

long long dfs(int v,int w)
{
    long long r=0,cnt=0,h=0;
    us[v]=1;
    for (int i=0;i<g[v][0].size();i++)
    {
        int to=g[v][0][i];
        if (!us[to])
        {
            h++;
            if (h==w)
                h++;
            res[h].push_back(g[v][1][i]);
            long long x=dfs(to,h);
            if (x==g[to][0].size()-1)
                x++;
            r=max(r,x);
            cnt++;
        }
    }
    r=max(r,cnt);
    return r;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;
    int a,b;
    for (int i=1;i<n;i++)
    {
        cin >> a >> b;
        g[a][0].push_back(b);
        g[a][1].push_back(i);
        g[b][0].push_back(a);
        g[b][1].push_back(i);
    }
    int x=dfs(1,0);
    cout << x << "\n";
    for (int i=1;i<=x;i++)
    {
        cout << res[i].size();
        for (int j=0;j<res[i].size();j++)
            cout << " " << res[i][j];
        cout << "\n";
    }
    return 0;
}
