#include <iostream>
#include <vector>
using namespace std;

struct r
{
    int to, n;
};

int max1 = 0;
bool vis[300000] = {0};
//?int color[300000] = {0};
vector <r> graph[200001];
vector <int> ans[200001];

void dfs(int v, int c)
{
    if (vis[v])
        return;
    vis[v] = 1;
    int p = 0;
    for (int i = 0; i < graph[v].size(); i++)
    {
        int to = graph[v][i].to;
        if (vis[to])
            continue;
        p++;
        if (p == c)
            p++;
        if (p > max1)
            max1 = p;
        ans[p].push_back(graph[v][i].n);
        dfs(to, p);
    }
}

int main()
{
    int n;
    cin >> n;
    for (int i = 0; i < n - 1; i++)
    {
        int a, b;
        cin >> a >> b;
        r r1, r2;
        r1.to = --b;
        r2.to = --a;
        r1.n = i + 1;
        r2.n = i + 1;
        graph[a].push_back(r1);
        graph[b].push_back(r2);
    }
    dfs(0, 0);
    cout << max1 << endl;
    for (int i = 1; i <= max1; i++)
    {
        cout << ans[i].size() << ' ';
        for (int j = 0; j < ans[i].size(); j++)
            cout << ans[i][j] << ' ';
        cout << endl;
    }
}
