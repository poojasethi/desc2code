#include <stdio.h>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

int *dels;
bool *used;
int *iter;
int *prev;
int lost;
vector< pair<int, int> > *edges;
vector<int> res[200000];

void dfs(int v) {
	used[v] = true;
	for (int i = 0; i < edges[v].size(); i++) {
		if (!dels[edges[v][i].second] && !used[edges[v][i].first]) {
			//cout << v << " -> " << edges[v][i].first << endl;
			int k = iter[v] + 1 == prev[v] ? iter[v] + 2 : iter[v] + 1;
			iter[v] = k;
			dels[edges[v][i].second] = k;
			prev[edges[v][i].first] = k;
			res[k - 1].push_back(edges[v][i].second);
			//iter[edges[v][i].first] = 1;
			
			dfs(edges[v][i].first);
		}
	}
}

int main() {
	int n;
	cin >> n;
	lost = n - 1;
	edges = new vector< pair<int, int> > [n];
	dels = new int[n - 1];
	used = new bool[n];
	iter = new int[n];
	prev = new int[n];
	for (int i = 0; i < n - 1; i++) {
		int a, b;
		dels[i] = 0;
		cin >> a >> b;
		pair<int, int> t(b - 1, i);
		edges[a - 1].push_back(t);
		t.first = a - 1;
		edges[b - 1].push_back(t);
	}

	int days = 0;
	for (int i = 0; i < n; i++) {
		int s = edges[i].size();
		iter[i] = 0;
		used[i] = false;
		prev[i] = 0;
		days = days < s ? s : days;		
	}
	cout << days << endl;

	dfs(0);
	int i = 0;
	while (res[i].size() > 0) {
		cout << res[i].size() << " ";
		for (int j = 0; j < res[i].size(); j++) 
			cout << res[i][j] + 1 << " ";
		cout << endl;
		i++;
	}

	return 0;
}