#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>

using namespace std;
const int maxn = 2e5+5;

struct Nod{
    int b,id,next;
    void init(int b,int id,int next){
        this->b=b;this->id=id;this->next=next;
    }
}buf[maxn<<1];
int n,len,E[maxn],mx;
vector<int> G[maxn];

void init(){
    len = 0;mx = 0;
    memset(E,-1,sizeof(E));
}
void add_edge(int a,int b,int c){
    buf[len].init(b,c,E[a]);E[a]=len++;
    buf[len].init(a,c,E[b]);E[b]=len++;
}
void dfs(int u,int pre,int lim){
    int i,v,c = 0;
    for(i = E[u];i != -1;i = buf[i].next){
        v = buf[i].b;
        if(v == pre) continue;
        ++c;if(c==lim)++c;
        G[c].push_back(buf[i].id);
        mx = max(mx,c);
        dfs(v,u,c);
    }
}

int main(){
    int i,j,u,v;
    scanf("%d",&n);
    init();
    for(i = 1;i < n;i++){
        scanf("%d%d",&u,&v);
        add_edge(u,v,i);
    }
    dfs(1,0,0);
    printf("%d\n",mx);
    for(i = 1;i <= mx;i++){
        printf("%d",G[i].size());
        for(j = 0;j < G[i].size();j++){
            printf(" %d",G[i][j]);
        }
        putchar('\n');
    }

    return 0;
}
