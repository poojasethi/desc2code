#!/usr/bin/python

import os
import sys
import itertools
import bisect


def solve(f):
    m = f.read_int()

    memo = {0: (0,0), 1: (1,1)}
    def dfs(num):
        if num in memo: return memo[num]
        ma = 0
        while (ma+1)**3 <= num: ma += 1

        cand = []
        r1 = dfs(num-ma**3)
        cand.append((r1[0]+1, r1[1]+ma**3))
        if ma > 0:
            r2 = dfs(ma**3-1-(ma-1)**3)
            cand.append((r2[0]+1, r2[1]+(ma-1)**3))

        res = max(cand, key=lambda x: (x[0], x[1]))
        memo[num] = res
        return res

    return "%d %d"%dfs(m)

class Reader(object):
    def __init__(self, filename=None):
        self.test_mode = filename is not None
        self.cases = 1
        self.buffer = []
        if self.test_mode:
            with open(filename) as f:
                blank_flg = False
                for line in f:
                    line = line.strip()
                    if line:
                        self.buffer.append(line)
                        blank_flg = False
                    else:
                        if not blank_flg: self.cases += 1
                        blank_flg = True

    def __readline(self):
        return self.buffer.pop(0) if self.test_mode else raw_input()

    def read_int(self):
        return int(self.__readline())
    def read_float(self):
        return float(self.__readline())
    def read_long(self):
        return long(self.__readline())
    def read_str(self):
        return self.__readline()

    def read_int_list(self):
        return [int(item) for item in self.__readline().split()]
    def read_float_list(self):
        return [float(item) for item in self.__readline().split()]
    def read_long_list(self):
        return [long(item) for item in self.__readline().split()]
    def read_str_list(self):
        return self.__readline().split()

if __name__ == '__main__':
    filename = sys.argv[1] if len(sys.argv)>1 else None
    f = Reader(filename)
    if f.test_mode:
        for c in xrange(f.cases):
            print "Case #%d"%(c+1)
            print solve(f)
    else:
        print solve(f)
