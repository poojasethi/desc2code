#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
pair <long long,long long> best;
long long p(long long x)
{
	return x*x*x;
}
void dfs(long long n,long long num,long long volum)
{
	if(n==0)
	{
		best=max(best,make_pair(num,volum));
		return;
	}
	int m=1;
	while(p(m+1)<=n)
	{
		m++;
	}
	dfs(n-p(m),num+1,volum+p(m));
	dfs(p(m)-1-p(m-1),num+1,volum+p(m-1));
}
int main()
{
	long long n;
	cin>>n;
	dfs(n,0,0);
	cout<<best.first<<' '<<best.second<<endl;
	//system("pause");
}
 	  				 	 	 	 				  	    	  		