#include <cstdio>

typedef long long LL;

const int maxn = 2000010, p = 1e9 + 7;
int k, w;
LL fac[maxn], inv[maxn], ans;

inline LL sqr(LL x){return x * x % p;}
inline LL power(int e){
	if (e == 1) return k;
	LL ret = power(e >> 1);
	ret = (ret * ret) % p;
	return (e & 1) ? ret * k % p : ret;
}

int main(){
	scanf("%d%d", &k, &w);
	fac[0] = fac[1] = inv[0] = inv[1] = 1;
	for (int i = 2; i <= k; i++){
		fac[i] = (fac[i - 1] * i) % p;
		inv[i] = ((-inv[p % i] * (p / i) % p) + p) % p;
	}
	for (int i = 2; i <= k; i++) inv[i] = (inv[i] * inv[i - 1]) % p;
	LL e = w - 1 > k ? power(w - 1 - k) : 1;
	for (int i = k; i; i--){
		if (w - 1 >= i) ans = (ans + sqr(fac[k]) * sqr(inv[k - i]) % p * i % p * e) % p, e = (e * k) % p;
		else ans = (ans + fac[k] * fac[k - i + w - 1] % p * sqr(inv[k - i]) % p * w % p) % p;
	}
	e = w - 2 > k - 1 ? power(w - 1 - k) : 1;
	for (int i = k - 1; i; i--){
		if (w - 2 >= i) ans = (ans + sqr(fac[k]) * inv[k - i] % p * inv[k - i - 1] % p * i % p * e) % p, e = (e * k) % p;
		else ans = (ans + fac[k] * fac[k - i + w - 2] % p * inv[k - i] % p * inv[k - i - 1] % p * (w - 1) % p) % p;
	}
	printf("%d", (int)ans);
}
