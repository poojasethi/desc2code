#include<cstdio>
#include<cstring>
#include<algorithm>
#define lim 1000000007
long long fac[1000005];
long long inv[1000005];
long long w,k;
long long qp(long long b,long long e)
{	long long ans,t;
	ans=1,t=b;
	while (e)
	{	if (e&1)
		{	ans*=t;
			ans%=lim;
		}
		t*=t;
		t%=lim;
		e>>=1;
	}
	return ans;
}
long long P(long long m,long long n)
{	if (m>n)
		return 0;
	if (m<0||n<0)
		return 0;
	return fac[n]*inv[n-m]%lim;
}
long long work()
{	long long l,d,t1,t2,t3,ans=0;
	for (l=1;l<=k;++l)
	{	if (w-l>=2)
		{	t1=qp(k,(l+w)-l*2-2)%lim;
			t2=(P(l,k)*P(l,k))%lim;
			t2=(t2*k)%lim*k%lim;
			t3=(P(l+1,k)*P(l+1,k))%lim;
			ans+=(t2-t3+lim)%lim*t1%lim;
			ans%=lim;
		}
		if (w-l==1)
		{	t1=(P(l,k)*P(l,k))%lim;
			t1=t1*k%lim;
			t2=(P(l+1,k)*P(l,k-1))%lim;
			ans+=(t1-t2+lim)%lim;
			ans%=lim;
		}
		if (w<=l)
		{	d=l-w;
			t1=(P(d,k)*P(w,k-d))%lim*P(w,k-d)%lim;
			t2=(P(d+2,k)*P(w-1,k-d-2))%lim*P(w-1,k-d-2)%lim;
			ans+=(t1-t2+lim)%lim;
			ans%=lim;
		}
	}
	return (ans+lim)%lim;
}
int main()
{	int i;
	scanf("%I64d%I64d",&k,&w);
	fac[0]=inv[0]=1;
	for (i=1;i<=k;++i)
	{	fac[i]=fac[i-1]*i;
		fac[i]%=lim;
		inv[i]=qp(fac[i],lim-2)%lim;
	}
	printf("%I64d\n",work());
	return 0;
}

   	 	    		 												