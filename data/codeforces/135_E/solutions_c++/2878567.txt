#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long LL;
const LL P=1e9+7;
int K;LL W;

LL sqr(LL x){
	x%=P;return x*x%P;
}
LL pow(LL x,int k){
	LL Fc=1;x%=P;
	for(;k;k>>=1)k&1?Fc=(Fc*x)%P:0,x=(x*x)%P;
	return Fc;
}
LL inv(LL x){
	return pow(x,P-2);
}

namespace Ninit{
	void init(){
		cin>>K>>W;
	}
}

namespace Nsolve{
	LL fac[1100000],Iac[1100000];
	LL F(LL n){
		int i;LL res,Fc=0;
		for(i=0;i<K;++i)if(n+i>W){
			2*(i+1)>=n+i
				?res=fac[K]*Iac[K+n-i-2]%P*sqr(fac[K+n-i-2]*Iac[K-i-1])%P
				:res=pow(K,n-i-2)*sqr(fac[K]*Iac[K-i-1])%P;
			Fc=(Fc+res)%P;
		}
		return Fc;
	}
	void solve(){
		int i;
		for(fac[0]=Iac[0]=1,i=1;i<=K;++i)
			fac[i]=fac[i-1]*i%P,Iac[i]=inv(fac[i]);
		cout<<(F(W+1)-F(W)+P)%P<<endl;
	}
}

int main(){
	Ninit::init();
	Nsolve::solve();
	return 0;
}
