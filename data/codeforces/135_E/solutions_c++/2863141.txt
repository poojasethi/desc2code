#include<cstdio>
#include<cstdlib>
const int N = 1000010;
const long long p = 1000000007;
long long f[N], a[N], b[N];
long long work(int n, int m)
{
    return(a[n] * b[m] % p);
}

long long pow(int n, int m)
{
    if (m == 0) return(1);
    if (m == 1) return(n);
    else 
    {
        long long temp = pow(n, m / 2);
        temp = temp * temp % p;
        if (m % 2 == 1)
        temp = temp * n % p;
        return(temp);
    }
}

int main()
{
    int k, w, i;
    long long ans = 0, t;
    scanf("%d %d", &k, &w);
    f[1] = a[0] = a[1] = b[0] = b[1] = 1;
    for (i = 2; i <= k; i++)
    {
        f[i] = p - p / i * f[p % i] % p;
        a[i] = a[i - 1] * i % p;
        b[i] = b[i - 1] * f[i] % p;
    }
    t = pow(k, w - 2);
    for (i = 1; i <= k; i++)
    {
        if (i <= w - 1)
        ans = (ans + work(k, k - i) * work(k, k - i) % p * i % p * t % p) % p;
        else
        ans = (ans + work(k, k - i) * work(k - i + w - 1, k - i) % p * w % p) % p;
        if (i == k) break;
        t = t * f[k] % p;
        if (i + 1 <= w - 1)
        ans = (ans + work(k, k - i) * work(k, k - i - 1) % p * i % p * t % p) % p;
        else
        ans = (ans + work(k, k - i) * work(k - i + w - 2, k - i - 1) % p * (w - 1) % p) % p;
    }
    printf("%I64d", ans);
    return(0);
} 
