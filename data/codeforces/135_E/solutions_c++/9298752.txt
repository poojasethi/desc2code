#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define mo 1000000007
#define N 1000010
#define int64 long long
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
int i,j,k,n,m,an;
int a[N],b[N],c[N];
int64 p,G;
inline int64 pow(int64 x,int64 y) {
	int64 an=1;
	for (;y;y/=2) {
		if (y&1) an=an*x%mo;
		x=x*x%mo;
	}
	return an;
}
inline int64 P(int m,int n) {
	if (m>n) return 0;
	return 1ll*a[n]*b[n-m]%mo;
}
inline int64 work1(int x) {
	return p*P(x-1,n)%mo*P(x,n)%mo*(x-1)%mo;
}
inline int64 work3(int x) {
	return p*P(x-1,n)%mo*P(x-1,n)%mo*(x-1)%mo*(x-1)%mo;
}
inline int64 work2(int x) {
	x=x-m+1;
	return P(x,n)*P(m-1,n-x)%mo*P(m-2,n-x)%mo*(m-1)%mo;
}
inline int64 work4(int x) {
	x=x-m+1;
	int64 an=P(x,n)*P(m-2,n-x)%mo*P(m-2,n-x)%mo*(m-1)%mo*(m-1)%mo;
	if (x>1) {
		x--;
		an+=P(x,n)*P(m-1,n-x)%mo*P(m-1,n-x)%mo;
	}
	return an;
}
int main() {
	scanf("%d%d",&n,&m);
	a[0]=b[0]=1; For(i,1,n) a[i]=1ll*a[i-1]*i%mo;
	b[n]=pow(a[n],mo-2);
	for (i=n-1;i;i--) b[i]=1ll*b[i+1]*(i+1)%mo;
	if (2<m) p=pow(n,m-3); G=pow(n,mo-2);
	For(i,2,n+1) {
		if (i<m) an=(2ll*work1(i)+work3(i)+an)%mo;
		else an=(2ll*work2(i)+work4(i)+an)%mo;
		p=p*G%mo;
	}
	printf("%d\n",an);
	return 0;
}
