#include <cstdio>
#include <cstdlib>
struct matrix{
	long long val[52][52];
	int N;
	matrix operator*(const matrix& other){
		matrix m;
		m.init(N);
		for(int i=0;i<N;i++)
		for(int j=0;j<N;j++){
		m.val[i][j]=0;
		for(int k=0;k<N;k++)
		m.val[i][j]=(m.val[i][j]+val[i][k]*other.val[k][j])%1000000007;
		}
		return m;
	}
	void init(int n){
		N=n;
		for(int i=0;i<N;i++)
			for(int j=0;j<N;j++)
				val[i][j]=(i==j);
	}
	matrix pow(long long n){
		matrix a;
		a.init(N);
		matrix buf[64];
		buf[0]=*this;
		for(int i=1;(1LL<<i)<=n;i++) buf[i]=buf[i-1]*buf[i-1];
		for(int i=0;(1LL<<i)<=n;i++) if(n&(1LL<<i)) a=a*buf[i];
		return a;
	}
};
long long N,M,K;
int main(){
	scanf("%I64d%I64d%I64d",&N,&M,&K);
	matrix m;
	m.init(M);
	for(int i=0;i<M;i++)
		for(int j=0;j<M;j++)
			m.val[i][j]=1;
	for(int i=0;i<K;i++){
		unsigned char c[3];
		scanf("%s",c);
		if(c[0]<'a') c[0]=c[0]+26-'A'+'a';
		if(c[1]<'a') c[1]=c[1]+26-'A'+'a';
		m.val[c[0]-'a'][c[1]-'a']=0;
	}
	m=m.pow(N-1);
	int res=0;
	for(int i=0;i<M;i++)
		for(int j=0;j<M;j++)
			res=(res+m.val[i][j])%1000000007; 
	printf("%d\n",res);
}
