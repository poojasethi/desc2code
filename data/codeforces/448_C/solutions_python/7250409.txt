import sys

n = int(sys.stdin.readline().strip())
a = [int(x) for x in sys.stdin.readline().split()]

class RMQ:
	def __init__(self, ary):
		self.n = 1
		while self.n < len(ary):
			self.n <<= 1
		self.dat = [sys.maxint] * (2*self.n-1)

		for k, x in enumerate(ary):
			self.update(k, x)

	def update(self, k, x):
		k += self.n - 1
		self.dat[k] = (x, k-self.n+1)
		while k > 0:
			k = (k-1)//2
			self.dat[k] = min(self.dat[2*k+1], self.dat[2*k+2])

	def query(self, a, b, k, l, r):
		if r <= a or b <=l:
			return (sys.maxint, -1)

		if a <= l and r <= b:
			return self.dat[k]
		else:
			vl = self.query(a, b, 2*k+1, l, (l+r)//2)
			vr = self.query(a, b, 2*k+2, (l+r)//2, r)
			return min(vl, vr)



def rec(l, r, under):
#	print l, r, under
	if (l>=r):
		return 0

	m = rmq.query(l, r, 0, 0, rmq.n)


	lp = rec(l, m[1], m[0])
	rp = rec(m[1]+1, r, m[0])

	return min(r-l, lp+rp+m[0]-under)

sys.setrecursionlimit(10000)

rmq = RMQ(a)

print rec(0, n, 0)