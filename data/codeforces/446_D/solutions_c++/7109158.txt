#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <queue>
#include <map>
#include <set>

#define int64 long long
#define uns unsigned int
#define ms(x) memset(x , 0 , sizeof(x))

using namespace std;

double c[110][110] ; 
double a[510][510 * 2] , h[501 << 1] ; 
int N ; 
int n , nt , K , m ; 
int du[510] ; 
int e[510][510] ; 
int v[510] ;
int id[510];

struct matrix{
    double d[110][110] ; 
    void operator *= (const matrix & a){
        ms(c) ;
        for(int i = 1 ; i <= nt ; i ++ )
            for(int j = 1 ; j <= nt ; j ++ )
                for(int k = 1 ; k <= nt ; k ++ )
                    c[i][j] += d[i][k] * a.d[k][j] ; 
        memcpy(d , c , sizeof(c)) ; 
    }
} E , ans , M ; 

matrix fpm(matrix a , int b){
    matrix ret = E ; 
    for( ; b ; b >>= 1 , a *= a)
        if(b & 1) ret *= a ; 
    return ret ; 
}

void gauss(){
    for(int i = 1 ; i <= n ; i ++ ){
        int r = i ; 
        for(int j = i + 1 ; j <= n ; j ++ ) if(fabs(a[j][i]) > fabs(a[r][i])) r = j ; 
        if(r != i) swap(a[r] , a[i]) ; 
        for(int j = i + 1 ; j <= n ; j ++ ){
            double t = a[j][i] / a[i][i] ; 
            for(int k = i ; k <= 2 * n ; k ++ ) a[j][k] -= t * a[i][k] ; 
        }
    }
    /*
    for(int i = n ; i ; i -- ){
        for(int j = i + 1 ; j <= n ; j ++ ) a[i][n + 1] -= a[i][j] * a[j][n + 1] ; 
        a[i][n + 1] /= a[i][i] ; 
    }
    */
}

int main(){
    
    cin >> n >> m >> K ; 
    
    for(int i = 1 ; i <= n ; i ++ ) cin >> v[i] ; 
    int x , y ; 
    for(int i = 1 ; i <= m ; i ++ ){
        scanf("%d %d",&x,&y) ; 
        du[x] ++ ; du[y] ++ ; 
        e[x][y] ++ ; e[y][x] ++ ; 
    }
    
    
    for(int i = 1 ; i <= n ; i ++ ) if(v[i]) id[i] = ++ nt ; id[1] = ++ nt ; 
    for(int i = 1 ; i <= nt ; i ++ ) E.d[i][i] = 1 ; 
    
    for(int j = 1 ; j <= n ; j ++ )
        for(int k = 1 ; k <= n ; k ++ )
            if(!v[k]) 
                a[j][k] = 1.0 * e[j][k] / du[j] ;  
    
    for(int j = 1 ; j <= n ; j ++ ) a[j][j] = - 1 , a[j][j + n] = -1 ; 
    
    gauss() ; 
    
    for(int i = 1 ; i <= n ; i ++ ){
        if(!v[i]) continue ;
        memset(h , 0 , sizeof(h)) ; 
        for(int j = 1 ; j <= n ; j ++ ) h[j + n] -= 1.0 * e[j][i] / du[j] ; 
        for(int j = n ; j ; j -- ){
            for(int k = j + 1 ; k <= 2 * n ; k ++ ) h[j] -= h[k] * a[j][k] ; 
            h[j] /= a[j][j] ; 
        }
        
        for(int j = 1 ; j <= n ; j ++ ) 
            if(id[j]) M.d[id[j]][id[i]] = h[j] ; 
    }
    
    ans.d[1][nt] = 1 ; 
    
    ans *= fpm(M , K - 1) ;
    
    cout << ans.d[1][nt - 1] << endl ;  
    return 0 ; 
}
