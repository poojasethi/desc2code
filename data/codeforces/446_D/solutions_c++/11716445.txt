#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#define fi first
#define se second
#define mk make_pair
#define pb push_back
#define For(i,x,y) for(int i=(int)x;i<=(int)y;i++)
#define Forn(i,x,y) for(int i=(int)x;i>=(int)y;i--)
using namespace std;
typedef long long ll;
typedef long double db;
const int N=505,M=105;

int n,m,K,U[N],imp[M],cnt;
db a[N][N],Inv[N][N],du[N],_a[N][N];
vector<int> e[N];
db tmp[M][M],xi[M];
struct matrix{
    db v[M][M];
    matrix(){
        memset(v,0,sizeof v);
    }
    void get(){
        For(i,1,cnt) v[i][i]=1.;
    }
    matrix operator *(const matrix &A){
        matrix res;
        For(i,1,cnt) For(j,1,cnt) For(k,1,cnt) res.v[i][j]+=v[i][k]*A.v[k][j];
        return res;
    }
}E,Ans;

int main(){
    scanf("%d%d%d",&n,&m,&K);
    int tot=n;
    For(i,1,n){
        scanf("%d",U+i);
        if(!U[i]) U[i]=i;else U[imp[++*imp]=i]=++tot;
    } cnt=*imp;
    For(i,1,m){
        int x,y;
        scanf("%d%d",&x,&y); ++du[x]; ++du[y];
        if(U[x]==x) a[y][x]++;
        if(U[y]==y) a[x][y]++;
        e[x].pb(y); e[y].pb(x);
    }
    For(i,1,n) For(j,1,n) a[i][j]/=du[j];
    For(i,1,n) a[i][i]=-1;
    memcpy(_a,a,sizeof a);
    
    For(i,1,n) Inv[i][i]=1.;
    For(i,1,n){
        For(j,i,n){
            if(a[j][i]==0)continue;
            For(k,1,n){
                swap(a[j][k],a[i][k]);
                swap(Inv[j][k],Inv[i][k]);
            }
            break;
        }
        db u=a[i][i];
        For(j,1,n) a[i][j]/=u,Inv[i][j]/=u;
        For(j,1,n){
            if(j==i)continue;
            db u=a[j][i]/a[i][i];
            For(k,1,n){
                a[j][k]-=a[i][k]*u;
                Inv[j][k]-=Inv[i][k]*u;
            }
        }
    }


    For(i,1,n){
        if(U[i]==i && (i>1))continue;
        if(i==1){
            For(j,0,e[i].size()-1){
                int v=e[i][j];
                For(k,1,cnt){
                    db u=Inv[imp[k]][v]*(-1./du[i]);
                    xi[k]+=u;   
                }
            }   continue;
        }
        For(j,0,e[i].size()-1){
            int v=e[i][j];
            For(k,1,cnt){
                db u=Inv[imp[k]][v]*(-1./du[i]);
                E.v[U[i]-n][k]+=u;  
            }
        }
    }
    
    
    Ans.get();
    for(K-=2;K;K>>=1,E=E*E) if(K&1) Ans=Ans*E;  
    db ans=0;
    For(i,1,cnt) ans+=xi[i]*Ans.v[i][cnt];
    
    printf("%.10lf\n",(double)ans);
    return 0;
}