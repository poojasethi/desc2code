#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#define rep(i,n) for (i=1; i<=n; i++)
using namespace std;
double m1[105][105],m2[105][105],m3[105][105],du[505],m[505][1005],s,ans;
int a[505],n,M,kk,A,B,head[200005],next[200005],e[200005],o,i,j,k,cnt,l,now,p[505];
const double eps=1e-13;
void add(int a,int b,int c)
{
    e[a]=c;
    next[a]=head[b];
    head[b]=a;
}
void ksm(int x)
{
    if (x==1) return;
    ksm(x/2); int i,j,k;
    rep (i,cnt+1) rep(j,cnt+1) {m3[i][j]=0; rep(k,cnt+1) m3[i][j]+=m1[i][k]*m1[k][j];}
    rep (i,cnt+1) rep(j,cnt+1) m1[i][j]=m3[i][j];
    if (x%2==1)
    {
        rep(i,cnt+1) rep(j,cnt+1) {m3[i][j]=0; rep(k,cnt+1) m3[i][j]+=m1[i][k]*m2[k][j];}
        rep(i,cnt+1) rep(j,cnt+1) m1[i][j]=m3[i][j];
    }
}
int main()
{
    scanf("%d%d%d",&n,&M,&kk);
    for (i=1; i<=n; i++) scanf("%d",&a[i]);
    for (i=1; i<=M; i++)
    {
        scanf("%d%d",&A,&B);
        add(++o,A,B);
        add(++o,B,A);
        du[A]+=1; du[B]+=1;
    }
    for (i=1; i<=n; i++) du[i]=1/(du[i]+0.0);
    for (i=1; i<=n; i++)
    {
        now=head[i];
        while (now!=0)
        {
            if (!a[e[now]])
           m[i][e[now]]+=du[e[now]];
            now=next[now];
        }
        m[i][i]=-1;
        m[i][n+i]=-1;
    }
    for (i=1; i<=n; i++)
    {
        for (j=i; j<=n; j++) if (fabs(m[j][i])>eps) break;
        for (k=1; k<=n+n; k++) swap(m[j][k],m[i][k]);
        for (j=i+1; j<=n; j++)
          if (fabs(m[j][i])>eps)
          {
              s=m[j][i]/m[i][i];
              for (l=i; l<=n+n; l++) m[j][l]-=m[i][l]*s;
          }
    }
    for (i=n-1; i>=1; i--)
    {

        for (j=i+1; j<=n; j++)
          if (fabs(m[i][j])>eps)
          {
              s=m[i][j]/m[j][j];
              for (k=n+1; k<=n+n; k++)
                m[i][k]-=m[j][k]*s;
          }
    }
    for (i=1; i<=n; i++) if (a[i]) p[++cnt]=i;
    for (i=1; i<=cnt; i++)
      for (j=1; j<=cnt; j++)
      {
          int now=head[p[i]];
          while (now!=0)
          {
              m1[i][j]+=du[p[i]]/m[p[j]][p[j]]*m[p[j]][n+e[now]];
              now=next[now];
          }
          m2[i][j]=m1[i][j];
      }
    m1[cnt][cnt+1]=m2[cnt][cnt+1]=1;
    ksm(kk-1);
    for (i=1; i<=cnt; i++) ans+=m[p[i]][n+1]/m[p[i]][p[i]]*m1[i][cnt+1];
    printf("%.10f\n",ans);
    return 0;
}
