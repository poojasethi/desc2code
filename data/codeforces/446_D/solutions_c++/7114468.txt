#include <bits/stdc++.h>
using namespace std;

const int MAXN = 510;

int trap[MAXN], d[MAXN], g[MAXN][MAXN];
double res[MAXN], nxtRes[MAXN];
double mp[MAXN][MAXN * 2], u[120][120], TmpU[120][120];
vector<int> traps;

int main() {
	int n, m, kk, s, t;
	scanf("%d%d%d", &n, &m, &kk);
	for (int i = 0; i < n; i++) {
		scanf("%d", &trap[i]);
		if (trap[i]) traps.push_back(i);
	}
	for (int i = 0; i < m; i++) {
		scanf("%d%d", &s, &t);
		--s, --t;
		++d[s], ++d[t];
		++g[s][t], ++g[t][s];
	}
	for (int i = 0; i < n; i++) {
		mp[i][i] = mp[i][i + n] = 1;
		for (int j = 0; j < n; j++)
			if ((!trap[j]) && (j != i))
				mp[i][j] = -((double) g[i][j]) / d[j];
	}
	for (int i = 0; i < n; i++) {
		double f = mp[i][i];
		for (int j = 0; j < 2 * n; j++)
			mp[i][j] /= f;
		for (int j = 0; j < n; j++)
			if (j != i) {
				f = mp[j][i];
				for (int k = 0; k < 2 * n; k++)
					mp[j][k] -= f * mp[i][k];
			}
	}
	
	m = traps.size();
	//printf("%d\n", m);

	for (int i = 0; i < m; i++) { // floyd
		for (int j = 0; j < m; j++) {
			u[j][i] = 0;
			for (int k = 0; k < n; k++)
				u[j][i] += mp[traps[i]][k + n] * g[traps[j]][k] / d[traps[j]];
		}
	}
	kk -= 2;

	for (int i = 0; i < m; i++) res[i] = mp[traps[i]][0 + n];
	
	/*for (int i = 0; i < m; i++)
		printf("%20.10lf", res[i]);
	puts("");*/
	
	for (; kk; kk >>= 1) {
		if (kk & 1) {
			for (int i = 0; i < m; i++) {
				nxtRes[i] = 0;
				for (int j = 0; j < m; j++) {
					nxtRes[i] += res[j] * u[j][i];
				}
			}
			for (int i = 0; i < m; i++)
				res[i] = nxtRes[i];
		}

		for (int i = 0; i < m; i++)
			for (int j = 0; j < m; j++) {
				TmpU[i][j] = 0;
				for (int k = 0; k < m; k++) {
					TmpU[i][j] += u[i][k] * u[k][j];
				}
			}
		for (int i = 0; i < m; i++)
			for (int j = 0; j < m; j++) {
				u[i][j] = TmpU[i][j];
			}
	}
	printf("%.10lf\n", res[m - 1]);
	return 0;
}

	  		 		  		 			 		 				