#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <vector>
#include <bitset>
#include <functional>
using namespace std;
const long long mod = 1e9 + 7;
const int maxn = 100005;
const long double eps = 1e-18;
inline int read ()
{
	int res, ok = 1;
	char ch;
	for (ch = getchar (); ch < '0' || ch > '9'; ch = getchar ())
	if (ch == '-')
	ok = -1;
	res = ch - '0';
	for (ch = getchar (); ch >= '0' && ch <= '9'; ch = getchar ())
	res = res * 10 + ch - '0';
	return res * ok;
}
int n, m, k, cnt, id[505], p[505], d[505];
long double w[505][1005], a[505][505], x[505][505], g[505][505];
struct matrix
{
	int n;
	long double a[105][105];
	void clear()
	{
		memset (a, 0, sizeof (a));
		n = 0;
	}
	void print ()
	{
		cout << n << endl;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < cnt; j++)
			cout << a[i][j] << " ";
			cout << endl;
		}
		cout << endl;
	}
	matrix operator * (const matrix &b) const
	{
		matrix c;
		c.clear();
		c.n = n;
		for (int i = 0; i < n; i++)
		for (int j = 0; j < cnt; j++)
		for (int k = 0; k < cnt; k++)
		c.a[i][j] += a[i][k] * b.a[k][j];
		return c;
	}
}one, st, by, ed;
inline matrix qpow (matrix a, int b)
{
	matrix sum = one;
	while (b)
	{
		if (b & 1)
		sum = sum * a;
		a = a * a;
		b >>= 1;
	}
	return sum;
}
inline void gauss()
{
	for (int i = 1; i <= n; i++)
	{
		int now = i;
		for (int j = i + 1; j <= n; j++)
		if (fabs (w[j][i]) > fabs (w[now][i]))
		now = j;
		if (now != i)
		for (int j = 1; j <= 2 * n; j++)
		swap (w[now][j], w[i][j]);
		if (fabs (w[i][i]) > eps)
		for (int j = i + 1; j <= n; j++)
		if (fabs (w[j][i]) > eps)
		for (int k = 2 * n; k >= i; k--)
		w[j][k] -= w[i][k] * w[j][i] / w[i][i];
	}
	for (int i = n; i >= 1; i--)
	if (fabs (w[i][i]) > eps)
	{
		for (int j = i + 1; j <= n; j++)
		for (int k = n + 1; k <= 2 * n; k++)
		w[i][k] -= w[i][j] * x[j][k - n];
		for (int j = n + 1; j <= 2 * n; j++)
		x[i][j - n] = w[i][j] / w[i][i];
	}
}
long double calc (int a, int b)
{
	long double res = 0;
	for (int i = 1; i <= n; i++)
	res += x[a][i] * g[i][b];
	return res;
}
int main ()
{
	n = read();
	m = read();
	k = read();
	for (int i = 1; i <= n; i++)
	{
		id[i] = read();
		if (id[i] == 1)
		{
			cnt++;
			p[cnt] = i;
		}
	}
	for (int i = 1; i <= m; i++)
	{
		int u, v;
		u = read();
		v = read();
		g[u][v]++;
		g[v][u]++;
		d[u]++;
		d[v]++;
	}
	for (int i = 1; i <= n; i++)
	for (int j = 1; j <= n; j++)
	{
		if (d[i])
		g[i][j] = (long double)g[i][j] / d[i];
		if (!id[j])
		w[i][j] = g[i][j];
	}
	for (int i = 1; i <= n; i++)
	{
		w[i][i] -= 1;
		w[i][i + n] = -1;
	}
	gauss ();
	one.n = by.n = cnt;
	st.n = 1;
	for (int i = 0; i < cnt; i++)
	one.a[i][i] = 1;
	for (int i = 0; i < cnt; i++)
	for (int j = 0; j < cnt; j++)
	by.a[i][j] = calc (p[i + 1], p[j + 1]);
	ed = qpow (by, k - 2);
	for (int i = 0; i < cnt; i++)
	st.a[0][i] = calc (1, p[i + 1]);
	st = st * ed;
	cout << st.a[0][cnt - 1] << endl;
	return 0;
}
