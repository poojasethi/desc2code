#include <cstdio>
#include <map>
#include <cmath>
#include <vector>
#include <cstring>
#include <iostream>
#define rep(i,a,b) for (int i=a;i<=(int)(b);++i)
#define REP(i,a) for (int i=0; i < (int)(a); ++i)
#define sz(x) ((int) (x.size()))
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define d(x) cout<<x<<endl
using namespace std;
int n;
int m;
double g[500][1000];
vector<int> w, v[500];
int trap[500];
int len;
int o;
double p[500];
double u[500][500];
double e[500][500];
double res[500];
double h[500];

int main() {
	
	scanf("%d%d%d", &n, &m, &len);
	REP(i,n) {
		scanf("%d", &trap[i]);
		if (trap[i]) w.pb(i);
	}
	o = sz(w);
	REP(i,m) {
		int a,b;
		scanf("%d%d", &a, &b); a--; b--;
		v[a].pb(b);
		v[b].pb(a);
	}
	
	REP(i,n) {
		g[i][i] = g[i][n+i] = 1;
		if (!trap[i])
			REP(j,sz(v[i]))
				g[i][v[i][j]] -= 1. / sz(v[i]);
	}
	REP(i,n) {
		int k = i;
		rep(j,i,n-1)
			if (abs(g[j][i]) > abs(g[k][i]))
				k  = j;
		REP(j,2*n) swap(g[i][j], g[k][j]);
		double tmp = g[i][i];
		REP(j,2*n) g[i][j] /= tmp;
		rep(j,i+1,n-1) {
			tmp = g[j][i];
			REP(k,2*n)
				g[j][k] -= g[i][k]*tmp;
		}
	}
	for (int i = n-1; i>=0; --i)
		for (int j = i-1; j>=0; --j) {
			double tmp = g[j][i];
			REP(k,2*n)
				g[j][k] -= g[i][k] * tmp;
		}
	REP(i,o) {
		REP(j,n) {
			double tmp = 0;
			REP(k,n) {
				tmp += g[j][k+n] * int(k == w[i]);
			}
			p[j] = tmp;
		}
		res[i] = p[0];
		REP(j,o) {
			double tmp = 0;
			REP(k,sz(v[w[j]]))
				tmp += p[v[w[j]][k]] / sz(v[w[j]]);
			u[j][i] = tmp;
		}
	}
	len -= 2;
	while (len) {
		if (len & 1) {
			REP(i,o) {
				h[i] = 0;
				REP(j,o) h[i] += res[j] * u[j][i];
			}
			REP(i,o) res[i] = h[i];
		}
		len /= 2;
		REP(i,o)
			REP(j,o) {
				e[i][j] = 0;
				REP(k,o) e[i][j] += u[i][k]*u[k][j];
			}
		REP(i,o)
			REP(j,o)
				u[i][j] = e[i][j];	
	}
	printf("%.10f\n", res[o-1]);
	return 0;
}

