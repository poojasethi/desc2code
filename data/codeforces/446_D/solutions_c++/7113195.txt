#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <ctime>
#include <cctype>
#define rep(i, n) for(int i = 0; i < n; ++ i)
#define rev_rep(i, n) for(int i = (int) n - 1; i >= 0; -- i)
#define clr(a, h) memset(a, (h), sizeof(a))
#define transfer(a, h) memcpy(a, (h), sizeof (a))
#define foreach(e, x) for(__typeof(x.begin()) e = x.begin(); e != x.end(); ++ e)
#define all(x) x.begin(), x.end()
#define sz(x) (int(x.size()))
#define pb push_back
#define mp make_pair
#define XX first
#define YY second
#define de(x) cout << #x << "=" << x << endl
#define two(x) (1 << (x))
#define twoL(x) (1ll << (x))
using namespace std;


typedef long long ll;
typedef long double ld;
typedef pair<int ,int > pi;
typedef pair< int , pi > pii;

const int INF = ~0U>>1;
const int Mod = int(1e9) + 7;
const int maxN = 500 + 10, maxTrap = 100 + 10;

template<class T> void tension(T & a, const T & b) {if (b < a) a = b;}
template<class T> void relax(T &a, const T & b) {if (b > a) a = b;}


int main(){
	#ifndef ONLINE_JUDGE
    	freopen("in","r", stdin);
    	#define out64(x) printf("%lld\n", x)
	#else 
    	#define out64(x) printf("%I64d\n", x)
    #endif

    int n, m, K; 
    scanf("%d%d%d", &n, &m, &K);
    vector<int> traps;
    static int trap[maxN]; 
    rep (i, n) {
    	scanf("%d", trap + i); 
    	if (trap[i]) traps.pb(i); 
    }

    static int g[maxN][maxN], d[maxN];
    clr(g, 0);
    clr(d, 0); 
    rep (i, m) {
    	int s, t;
    	scanf("%d%d", &s, &t);
    	-- s, -- t;
    	++ d[s], ++ d[t];
    	++ g[s][t], ++ g[t][s]; 
    }	
    
    static double A[maxN][maxN * 2];
    clr(A, 0); 
    rep (i, n) {
    	A[i][i] = 1;
    	A[i][i + n] = 1; // solve inverse of matrix
    	rep (j, n) 
    		if (! trap[j] && j != i) A[i][j] = - double(g[i][j]) / d[j]; 
    }

    rep (i, n) {
    	int o = i;
    	for (int j = i; j < n; ++ j)
    		if (fabs(A[j][i]) > fabs(A[o][i])) o = j;
    	if (o != i)
    		rep (j, 2 * n) swap(A[i][j], A[o][j]);
    	double f = A[i][i];
    	rep (j, 2 * n) A[i][j] /= f;
    	for (int j = i + 1; j < n; ++ j) {
    		f = A[j][i]; 
    		rep (k, 2 * n) A[j][k] -= f * A[i][k]; 
    	}
    }

    rev_rep (i, n) {
    	rev_rep (j, i) {
    		double f = A[j][i];
    		rep (k, 2 * n) A[j][k] -= f * A[i][k]; 
    	}
    }

    m = sz(traps);

    static double p[maxN], res[maxTrap], u[maxTrap][maxTrap]; 
   	clr(p, 0);
   	clr(res, 0);
   	clr(u, 0); 

   	rep (i, m)
   		res[i] = A[traps[i]][0 + n]; 

    rep (i, m) {
    	rep (j, n) p[j] = A[traps[i]][j + n]; // j to i
    	rep (j, m) {
    		double f = 0;
    		rep (k, n)
    			f += p[k] * g[traps[j]][k] / d[traps[j]]; 
    		u[j][i] = f; 
    	}
    }

    for (K -= 2; K; K >>= 1) {
    	if (K & 1) {
    		static double tRes[maxTrap];
    		transfer(tRes, res);
    		rep (i, m) {
    			res[i] = 0;
    			rep (j, m) res[i] += tRes[j] * u[j][i]; 
    		}
    	}
    	static double tU[maxTrap][maxTrap];
    	transfer(tU, u);
    	rep (i, m)
    		rep (j, m) {
    			u[i][j] = 0;
    			rep (k, m)
    				u[i][j] += tU[i][k] * tU[k][j]; 
    		}
    }
    printf("%.10lf\n", res[m - 1]);
	return 0;
}