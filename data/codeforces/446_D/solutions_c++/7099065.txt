#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>

using namespace std;

const int MAX_SIZE = 500;

int n;
int trap[110], tn, isTrap[MAX_SIZE + 10];
double mat[MAX_SIZE + 10][MAX_SIZE * 2 + 10];
int A[100010], B[100010], m;
int deg[MAX_SIZE + 10];
int step;

void elim(){
	for(int i = 0; i < n; i ++){
		int minn = i;
		for(int j = i + 1; j < n; j ++)
			if(fabs(mat[j][i]) > fabs(mat[minn][i]))
				minn = j;
		if(minn != i)
			for(int j = i; j < (n << 1); j ++)
				swap(mat[i][j], mat[minn][j]);
		for(int j = i + 1; j < n; j ++){
			double x = mat[j][i] / mat[i][i];
			for(int k = i; k < (n << 1); k ++)
				mat[j][k] -= mat[i][k] * x;
		}
	}
	for(int i = n - 1; i >= 0; i --){
		for(int j = 0; j < n; j ++)
			mat[i][n + j] /= mat[i][i];
		for(int j = i - 1; j >= 0; j --)
			for(int k = 0; k < n; k ++)
				mat[j][n + k] -= mat[i][n + k] * mat[j][i];
	}
}


struct Matrix{
	double mat[110][110];
	int h, w;
};

Matrix operator * (const Matrix& a, const Matrix& b){
	Matrix ans;
	ans.h = a.h;
	ans.w = b.w;
	for(int i = 0; i < ans.h; i ++)
		for(int j = 0; j < ans.w; j ++){
			ans.mat[i][j] = 0.0;
			for(int k = 0; k < b.h; k ++)
				ans.mat[i][j] += a.mat[i][k] * b.mat[k][j];
		}
	return ans;
}

Matrix st, cg;

Matrix fastPow(const Matrix& b, int p){
	Matrix cur = b, ans;
	memset(ans.mat, 0, sizeof(ans.mat));
	ans.h = ans.w = b.h;
	for(int i = 0; i < ans.h; i ++)
		ans.mat[i][i] = 1.0;
	while(p){
		if(p & 1)
			ans = ans * cur;
		p >>= 1;
		cur = cur * cur;
	}
	return ans;
}

int main(){
	scanf("%d%d%d", &n, &m, &step);
	for(int i = 0; i < n; i ++){
		int v;
		scanf("%d", &v);
		isTrap[i] = v;
		if(v)
			trap[tn ++] = i;
	}
	for(int i = 0; i < m; i ++){
		scanf("%d%d", A + i, B + i);
		-- A[i]; -- B[i];
		++ deg[A[i]]; ++ deg[B[i]];	
	}
	for(int i = 0; i < n; i ++)
		mat[i][i] = 1.0;
	for(int i = 0; i < m; i ++){
		if(isTrap[A[i]])
			mat[B[i]][n + A[i]] += 1.0 / deg[A[i]];
		else
			mat[B[i]][A[i]] -= 1.0 / deg[A[i]];
		if(isTrap[B[i]])
			mat[A[i]][n + B[i]] += 1.0 / deg[B[i]];
		else
			mat[A[i]][B[i]] -= 1.0 / deg[B[i]];
	}
	for(int i = 0; i < n; i ++)
		if(!isTrap[i])
			mat[i][n + i] = 1.0;
/*	for(int i = 0; i < n; i ++){
		for(int j = 0; j < (n << 1); j ++)
			printf("%.2f ", mat[i][j]);
		printf("\n");
	}*/
	elim();
/*	for(int i = 0; i < n; i ++){
		for(int j = 0; j < n; j ++)
			printf("%.2f ", mat[i][n + j]);
		printf("\n");
	}*/
	st.h = tn; st.w = 1;
	for(int i = 0; i < tn; i ++)
		st.mat[i][0] = mat[trap[i]][n];
	cg.h = cg.w = tn;
	for(int i = 0; i < tn; i ++)
		for(int j = 0; j < tn; j ++)
			cg.mat[i][j] = mat[trap[i]][n + trap[j]];
	st = fastPow(cg, step - 2) * st;
	printf("%.10f\n", st.mat[tn - 1][0]);

	return 0;
}


