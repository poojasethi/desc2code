#include <bits/stdc++.h>
#define MAX 300000

using namespace std;

int n, p, a[MAX], inv[MAX], q=1;
int XOR = 0;
long long seg[MAX], dig[MAX];
long long pow0[MAX];

int d(int x) {
  if (x < 10) return 1;
  return 1 + d(x / 10);
}

void toggle(int x) {
  XOR ^= a[x];
  int at = q + x - 1;
  if (seg[at] == 0) {
    seg[at] = a[x];
    dig[at] = d(a[x]);
  }
  else {
    seg[at] = 0;
    dig[at] = 0;
  }
  at /= 2;
  while (at > 0) {
    seg[at] = (pow0[dig[2*at+1]] * seg[2*at] + seg[2*at+1]) % p;
    dig[at] = dig[2*at] + dig[2*at+1];
    at /= 2;
  }
}

int main() {
  scanf ("%d %d", &n, &p);
  while (q < n) q *= 2;
  pow0[0] = 1;
  for (int i = 1; i <= 5 * n; i++) {
    pow0[i] = (10 * pow0[i-1]) % p;
  }
  for (int i = 1; i <= n; i++) {
    scanf ("%d", &a[i]);
    inv[a[i]] = i;
  }
  int cur = 0;
  while (seg[1] != 0 || dig[1] == 0) {
    int b = inv[rand() % min(n, 100) + 1];
    toggle(b);
    for (int i = 0; i < 20; i++) {
      if ((1 << i) & XOR) {
	toggle(inv[(1 << i)]);
      }
    }
    cur++;
    if (cur > 100 * p) {
      printf ("No\n");
      return 0;
    }
  }
  // finish
  printf ("Yes\n");
  vector <int> ans;
  for (int i = 1; i <= n; i++) {
    if (seg[q - 1 + i] != 0) ans.push_back(i);
  }
  printf ("%d\n", (int) ans.size());
  for (int i = 0; i < (int) ans.size(); i++) {
    printf ("%d ", ans[i]);
  }
  printf ("\n");
}
