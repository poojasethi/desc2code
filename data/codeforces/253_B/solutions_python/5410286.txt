from Queue import * # Queue, LifoQueue, PriorityQueue
from bisect import * #bisect, insort
from datetime import * 
from collections import * #deque, Counter,OrderedDict,defaultdict
import calendar
import heapq
import math
import copy
import itertools
myread = lambda : map(int,raw_input().split())
def solver():
    
    fin = open("input.txt","r")
    fout = open("output.txt","w")
    
    n = int(fin.readline()[:-1])
    num = fin.readline()[:-1]
    num = map(int,num.split())
    
    num.sort()
    ans = n
    for i in range(n):
        if ans <= i:
            break
        lp = i
        up = n - 1
        now_num = num[i]
        while lp != up:
            mid = (lp + up) / 2 + 1
            if 2 * now_num < num[mid]:
                up = mid - 1
            else:
                lp = mid
                
        ans = min(ans,n-(up-i)-1)

        
    fout.write(str(ans))



    

if __name__ == "__main__":
    solver()
    
