#include<iostream>
#include<algorithm>
#include<vector>
#include<cstdio>
#include<cstring>

#define Fail return puts("-1"),0
#define forE(x) for(int i=fs[x];i;i=next[i])

using std::max;
using std::vector;

const int fin=1,maxn=20010;
int n,m,p;
int d[maxn],fs[maxn],next[maxn],oth[maxn];
bool v[maxn],ve[maxn];
vector<int> odd,Q;

inline void add(int x,int y){
  oth[++m]=y,next[m]=fs[x],fs[x]=m;
  oth[++m]=x,next[m]=fs[y],fs[y]=m;
}
inline void dfs(int x){
  v[x]=1;
  if(d[x]&1)++p,odd.push_back(x);
  forE(x)if(!v[oth[i]])dfs(oth[i]);
}
inline void det(int x){
  forE(x)if(!ve[i])
    ve[i]=ve[i^1]=1,det(oth[i]),Q.push_back(i/2);
}

int main(){
  if(fin){
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
  }
  int M,x,y,i,r=0,f=0,s;
  scanf("%d",&M),m=1;
  if(M==1)Fail;
  for(i=0;i<M;++i){
    scanf("%d%d",&x,&y),add(x,y);
    n=max(n,max(x,y)),++d[x],++d[y];
  }
  for(i=1;i<=n;++i)if(!v[i]&&d[i]){
    if(r==2)Fail;
    ++r,p=0,dfs(i);
    if(p>4)Fail;
    if(p==4)f=1;
  }
  if(r==1){
    if(p==4)add(odd[2],odd[3]);
    det(p?odd[0]:n);
    if(p==4)
      for(s=0;Q[s+1]!=M+1;++s);
    else s=0;
    printf("%d\n",s+1);
    for(i=0;i<Q.size();++i){
      printf("%d ",Q[i]);
      if(i==s){
        if(p==4)++s,++i;
        printf("\n%d\n",Q.size()-s-1);
      }
    }
  }else{
    if(f)Fail;
    memset(v,0,sizeof(v));
    for(i=1;i<=n;++i)if(!v[i]&&d[i]){
      p=0,odd.clear(),dfs(i);
      Q.clear(),det(p?odd[0]:i);
      printf("%d\n",Q.size());
      for(int j=0;j<Q.size();++j)printf("%d ",Q[j]);
      puts("");
    }
  }
  return 0;
}
