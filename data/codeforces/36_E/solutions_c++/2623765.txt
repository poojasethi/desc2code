/*
Author: LJQ
PROG: Codeforces Beta #36 E. Two Paths
DATE: 2012.11.22
*/
#include <cstdio>
#include <vector>

using namespace std;

const int maxn = 10005;

struct Tedge{
	int y, id, next;
	Tedge(){}
	Tedge(int a, int c, int b){
		y = a; id = c; next = b;
	}
} adj[maxn << 1];

bool used[maxn];
int fch[maxn], deg[maxn], ord[maxn];
int n, m, os, odds, ms;

void add_edge(int x, int y, int id){
	adj[++ ms] = Tedge(y, id, fch[x]); fch[x] = ms;
}

void init()
{
	scanf("%d", &m);
	int u, v; ms = 0; n = 10000;
	for (int i = 1; i <= m; i ++){
		scanf("%d%d", &u, &v);
		add_edge(u, v, i);
		add_edge(v, u, i);
		deg[u] ++; deg[v] ++;
	}
}

void dfs(int t){
	ord[t] = os; odds += deg[t] & 1;
	for (int i = fch[t]; i; i = adj[i].next){
		int v = adj[i].y;
		if (!ord[v]) dfs(v);
	}
}

int ans[maxn], as;

void Euler(int t){
	for (int i = fch[t]; i; i = adj[i].next)
		if (!used[adj[i].id]){
			used[adj[i].id] = true;
			Euler(adj[i].y);
			ans[as ++] = adj[i].id;
		}
}

void check(int t){
	as = 0;
	for (int i = 1; i <= n; i ++)
		if (ord[i] == t && (deg[i] & 1)){
			Euler(i); return;
		}
	for (int i = 1; i <= n; i ++)
		if (ord[i] == t && deg[i]){
			Euler(i); return;
		}
}

void PRINT(){
	printf("%d\n", as);
	for (int i = 0; i < as; i ++) printf("%d ", ans[i]); putchar('\n');
}

void print()
{
	if (m == 1){
		puts("-1\n"); return;
	}
	odds = 0; bool flag = 0;
	for (int i = 1; i <= n; i ++)
		if (deg[i] && !ord[i]){
			int tmp = odds;
			os ++; dfs(i);
			if (os > 2 || (odds & 1) || odds > 4){
				puts("-1\n"); return;
			}
			if (odds - tmp == 4) flag = true;
		}
	if (os == 2 && flag){
		puts("-1\n"); return;
	}
	if (os == 2){
		check(1); PRINT(); check(2); PRINT();
	} else {
		if (flag){
			int id[4], is = 0;
			for (int i = 1; i <= n; i ++)
				if (deg[i] & 1) id[is ++] = i;
			add_edge(id[0], id[1], m + 1);
			add_edge(id[1], id[0], m + 1);
			deg[id[0]] ++; deg[id[1]] ++;
			check(1);
			for (int i = 0; i < as; i ++)
				if (ans[i] == m + 1){
					printf("%d\n", as - i - 1);
					for (int j = i+1; j < as; j ++) printf("%d ", ans[j]); putchar('\n');
					as = i; PRINT();
					break;
				}
		} else {
			check(1);
			printf("1\n"); printf("%d\n", ans[-- as]);
			PRINT();
		}
	}
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	init();
	print();
	return 0;
}
