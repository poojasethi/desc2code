#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
struct node{
	int v,w,next;
	bool f;
}edge[20010];
int head[10010],cnt,n=10000,m,a[2],deg[10010],sta[10010],fa[10010],rnk[10010],top;
void addedge(int u,int v,int w)
{
	++deg[v];
	edge[cnt].v=v;
	edge[cnt].w=w;
	edge[cnt].next=head[u];
	head[u]=cnt++;
}
int find(int x)
{
	if(!fa[x]||fa[x]==x)return fa[x]=x;
	return fa[x]=find(fa[x]);
}
void unite(int x,int y)
{
	x=find(x),y=find(y);
	if(x==y)return;
	if(rnk[x]>rnk[y])swap(x,y);
	if(rnk[x]==rnk[y])++rnk[y];
	fa[x]=y;
}
void dfs(int u)
{
	for(int i=head[u];~i;i=head[u])
	{
		head[u]=edge[head[u]].next;
		if(edge[i].f)continue;
		edge[i^1].f=1;
		dfs(edge[i].v);
		sta[++top]=edge[i].w;
	}
}
int main()
{
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
	memset(head,-1,sizeof head);
	scanf("%d",&m);
	if(m==1){puts("-1");return 0;}
	for(int i=1,u,v;i<=m;++i)
	{
		scanf("%d%d",&u,&v);
		addedge(u,v,i);
		addedge(v,u,i);
		unite(u,v);
	}
	for(int i=1;i<=n;++i)if(~head[i])
	{
		if(!a[0])a[0]=i;
		else if(find(i)!=find(a[0]))
		{
			if(!a[1])a[1]=i;
			else if(find(i)!=find(a[1]))return puts("-1"),0;
		}
	}
	if(a[1])
	{
		int cnt[2]={0,0},st[2]={a[0],a[1]};
		for(int i=1;i<=n;++i)if(deg[i]&1)
		{
			cnt[find(i)==find(a[1])]++;
			st[find(i)==find(a[1])]=i;
		}
		if(cnt[0]>2||cnt[1]>2)return puts("-1"),0;
		dfs(st[0]);
		printf("%d\n",top);
		while(top)printf("%d%c",sta[top],top==1?'\n':' '),--top;
		dfs(st[1]);
		printf("%d\n",top);
		while(top)printf("%d%c",sta[top],top==1?'\n':' '),--top;
	}
	else
	{
		int st[4]={0,0,0,0};
		for(int i=1;i<=n;++i)if(deg[i]&1)
		{
			if(!st[0])st[0]=i;
			else if(!st[1])st[1]=i;
			else if(!st[2])st[2]=i;
			else if(!st[3])st[3]=i;
			else return puts("-1"),0;
		}
		if(!st[0])
		{
			dfs(a[0]);
			printf("1\n%d\n",sta[top--]);
			printf("%d\n",top);
			while(top)printf("%d%c",sta[top],top==1?'\n':' '),--top;
		}
		else if(!st[2])
		{
			dfs(st[0]);
			printf("1\n%d\n",sta[top--]);
			printf("%d\n",top);
			while(top)printf("%d%c",sta[top],top==1?'\n':' '),--top;
		}
		else
		{
			addedge(st[0],st[1],m+1);
			addedge(st[1],st[0],m+1);
			dfs(st[2]);
			for(int i=1;i<=top;++i)
				if(sta[i]==m+1)
				{
					printf("%d\n",top-i);
					while(top>i)printf("%d%c",sta[top],top==i+1?'\n':' '),--top;
					break;
				}
			--top;
			printf("%d\n",top);
			while(top)printf("%d%c",sta[top],top==1?'\n':' '),--top;
		}
	}
}