#include <bits/stdc++.h>
#define NN 10005
#define FI "input.txt"
#define FO "output.txt"

using namespace std;
int n, m;
set< pair<int, int> > adj[NN];
vector< vector<int> > ans;
vector<int> odd, path;

void find_tour(int u) {
    while(!adj[u].empty()) {
        int v = adj[u].begin()->first, id = adj[u].begin()->second;
        adj[u].erase(make_pair(v, id));
        adj[v].erase(make_pair(u, id));
        find_tour(v);
        path.push_back(id);
    }
}

void split(vector<int> path) {
    int i, j, n = path.size();
    vector<int> cur;
    for(i = n-1; i && path[i] != -1; i--);
    for(j = 0; j < n; i++, j++) {
        if(path[i%n] == -1) {
            if(cur.size()) ans.push_back(cur);
            cur.clear();
        } else cur.push_back(path[i%n]);
    }
    if(cur.size()) ans.push_back(cur);
}

int main(void) {
    freopen(FI, "r", stdin);
    freopen(FO, "w", stdout);
    n = 0;
    scanf("%d", &m);
    for(int a, b, i = 1; i <= m; i++) {
        scanf("%d %d", &a, &b), n = max(n, max(a--, b--));
        adj[a].insert(make_pair(b, i));
        adj[b].insert(make_pair(a, i));
    }
    for(int i = 0; i < n; i++)
        if(adj[i].size()%2) odd.push_back(i);

    for(int i = 0; i < (int)odd.size(); i += 2)
        adj[odd[i]].insert(make_pair(odd[i+1], -1)), adj[odd[i+1]].insert(make_pair(odd[i], -1));

    for(int i = 0; i < n; i++) {
        find_tour(i);
        if(path.size()) split(path), path.clear();
    }
    if(ans.size() == 1 && ans[0].size() > 1) {
        ans.push_back(vector<int>(ans[0].begin(), ans[0].begin()+1));
        ans.push_back(vector<int>(ans[0].begin()+1, ans[0].begin()+ans[0].size()));
        ans.erase(ans.begin());
    }

    if(ans.size() == 2) {
        for(int i = 0; i < (int)ans.size(); i++) {
            printf("%d\n", ans[i].size());
            for(int j = 0; j < (int)ans[i].size(); j++) {
                if(j) printf(" ");
                printf("%d", ans[i][j]);
            }
            printf("\n");
        }
    } else printf("-1\n");

    return 0;
}
