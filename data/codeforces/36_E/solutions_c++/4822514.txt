#include<cstdio>
#include<vector>
#include<cstring>
#include<cstdlib>
#include<iostream>
using namespace std;
const int N_MAX=10000+10;
#ifndef ONLINE_JUDGE
	#define Debug(x){ cerr<<#x<<"="<<x<<endl; }
	#define Error() { cerr<<"Error"<<endl; }
	#define Fuck()  { cerr<<"Fuck"<<endl; }
#else
	#define Debug(x){}
	#define Error() {}
	#define Fuck()  {}
#endif
#define viter(x) vector<x>::iterator
inline void BAD(){ puts("-1");exit(0); }
int M;
struct Tedge{
	int son,id;
	Tedge(){}
	Tedge(int _son,int _id):son(_son),id(_id){}
};
vector <Tedge> EDGE[N_MAX];int idx[N_MAX];
void dfs(int x,int fa){
	if (idx[x]!=-1) return;
	idx[x]=fa;
	for (viter(Tedge) it=EDGE[x].begin(); it!=EDGE[x].end(); ++it)
		dfs(it->son,fa);
}
vector <int> path,ans1,ans2;bool used[N_MAX];int at[N_MAX];
void euler(int x){
	while (at[x]<EDGE[x].size()){
		int son=EDGE[x][at[x]].son,id=EDGE[x][at[x]++].id;
		if (used[id]) continue;
		used[id]=1;
		euler(son);
		path.push_back(id);
	}
}
int main(){
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
	scanf("%d", &M);
	for (int i=1; i<=M; ++i){
		int a,b;scanf("%d%d", &a, &b);
		EDGE[a].push_back(Tedge(b,i));
		EDGE[b].push_back(Tedge(a,i));
	}
	memset(idx,-1,sizeof(idx));vector<int> BLOCK;
	for (int i=0; i<N_MAX; ++i)
		if (idx[i]==-1 && !EDGE[i].empty()){
			dfs(i,i);
			BLOCK.push_back(i);
		}
	if (BLOCK.size()>2) BAD();
	vector<int> ODD;
	for (int i=0; i<N_MAX; ++i)
		if (EDGE[i].size()%2)
			ODD.push_back(i);
	if (ODD.size()>4) BAD();
	if (BLOCK.size()==2){
		vector<int> odd1,odd2;
		for (viter(int) it=ODD.begin(); it!=ODD.end(); ++it)
			if (idx[*it]==BLOCK[0])
				odd1.push_back(*it);
			else
				odd2.push_back(*it);
		if (odd1.size()>2 || odd2.size()>2) BAD();
		odd1.push_back(BLOCK[0]);
		odd2.push_back(BLOCK[1]);
		euler(odd1[0]); ans1=path;
		path.clear();
		euler(odd2[0]); ans2=path;
		path.clear();
	}
	else{
		if (ODD.size()<=2){
			ODD.push_back(BLOCK[0]);
			euler(ODD[0]);
			ans1=path;
			if (ans1.size()<2) BAD();
			ans2.push_back(ans1.back());
			ans1.pop_back();
		}
		else{
			int x=ODD[2],y=ODD[3];
			EDGE[x].push_back(Tedge(y,N_MAX-1));
			EDGE[y].push_back(Tedge(x,N_MAX-1));
			euler(ODD[0]);
			bool flag=0;
			for (viter(int) it=path.begin(); it!=path.end(); ++it)
				if (*it==N_MAX-1) flag=1;
				else if (flag) ans1.push_back(*it);
				else ans2.push_back(*it);
		}
	}
	printf("%d\n", ans1.size());
	for (viter(int) it=ans1.begin(); it!=ans1.end()-1; ++it)
		printf("%d ", *it);
	printf("%d\n%d\n", ans1.back(), ans2.size());
	for (viter(int) it=ans2.begin(); it!=ans2.end()-1; ++it)
		printf("%d ", *it);
	printf("%d\n", ans2.back());
	fclose(stdin); fclose(stdout);
	return 0;
}
		 	 		  	     	  		 	