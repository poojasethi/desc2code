#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

const int N = 10001, M = 10001;
vector<int> adj[N]; 
int x[M], y[M]; bool used[M]; 
int d[N], dd[N];
int p1[N], p2[N], l1, l2;
int n, m;


void insert(int a, int b, int c){
	adj[a].push_back(c), adj[b].push_back(c), n = max(n, max(a, b));
	d[a]++, d[b]++;
}

void print_path(){
	cout << l1 << endl;
	for (int i=1;i<l1;i++)
		cout << p1[i] << " ";
	cout << p1[l1] << endl;
	
	cout << l2 << endl;
	for (int i=1;i<l2;i++)
		cout << p2[i] << " ";
	cout << p2[l2] << endl;
}



void dfs(int u){
	//cout << u << endl;
	int v, j;
	for (int i=adj[u].size()-1;i>=0;i--){
		j = adj[u][i]; if (used[j]) continue;
		v = x[j]!=u ? x[j] : y[j];
		if (d[v]!=0){
			d[u]--, d[v]--, used[j] = true, dfs(v), 
			p1[++l1] = j;
		}
	}
}



void init(){
	cin >> m;
	for (int i=1;i<=m;i++){
		cin >> x[i] >> y[i]; 
		insert(x[i], y[i], i);
	}
}

void solve(){
	
	if (m < 2){
		cout << -1 << endl;
		return;
	}
	
	vector<int> s; int i;
	for (i=1;i<=n;i++)
		if ((d[i]&1)==1) s.push_back(i);
	
	

	if (s.size()==0){
		for (i=1;i<=n;i++)
			if (d[i]!=0) break;
		dfs(i);
		
		if (l1!=m){
			l2 = l1, memcpy(p2, p1, sizeof(p1)), l1 = 0;
			for (i=1;i<=n;i++)
				if (d[i]!=0) break;

			dfs(i);
			if (l1+l2!=m){
				cout << -1 << endl;
				return;
			}
		}
		else 
			p2[l2 = 1] = p1[l1--];
		
		print_path();
	}
	else if (s.size()==2){
		dfs(s[0]);
		if (l1!=m){
			l2 = l1, memcpy(p2, p1, sizeof(p1)), l1 = 0;
			for (i=1;i<=n;i++)
				if (d[i]!=0) break;
			dfs(i);
			
			if (l1+l2!=m){
				cout << -1 << endl;
				return;
			}
		}
		else 
			p2[l2 = 1] = p1[l1--];
		print_path();
	}
	else if (s.size()==4){
		memcpy(dd, d, sizeof(d));
		dfs(s[0]);
		if (l1!=m){
			l2 = l1, memcpy(p2, p1, sizeof(p1)), l1 = 0;
						
			i = d[s[1]]!=0 ? s[1] : s[2]; 
			dfs(i);
			
			if (l1+l2!=m){
				cout << -1 << endl;
				return;
			}
		}
		
		else {
			
			memset(used, false, sizeof(used));
			memcpy(d, dd, sizeof(d));
			x[0] = s[0], y[0] = s[1], m++;
			insert(s[0], s[1], 0);
			l1 = 0, dfs(s[2]);
			
			if (l1!=m){
				cout << -1 << endl;
				return;
			}
			
			while (l1>0 && p1[l1]!=0)
				p2[++l2] = p1[l1--];
			l1--;
		}
		print_path();
	}
	else
		cout << -1 << endl;
	
	
}

int main(){
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	init(); solve();
}