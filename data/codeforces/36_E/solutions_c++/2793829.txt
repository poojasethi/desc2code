#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;
bool flag;
int tot,n,m,i,j,k,a,b,t,odd,all,v;
int dl[10011],ans[100011];
int d[10011],root[10011],point[20011],next[20011];
bool vis[10011],used[20011];
void connect(int u,int v)
{
		 point[++tot]=v;
		 next[tot]=root[u];
		 root[u]=tot;
}
void search(int now)
{
		 vis[now]=true;
		 if (d[now]&1) odd++,dl[++all]=now;
		 for (int i=root[now];i;i=next[i])
		 		 if (!vis[point[i]]) search(point[i]);
}
void dfs(int now)
{
		 vis[now]=true;
		 for (int i=root[now];i;i=next[i])
		 		 if (!used[i])
		 		 {
		 		 		used[i]=used[(i&1)?(i+1):(i-1)]=true;
		 		 		dfs(point[i]);
		 		 		ans[++tot]=(i+1)/2;
		 		 }
}
int main()
{
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
 		scanf("%d",&m);
 		if (m==1)
 		{
 			 cout << -1;
 			 return 0;
 		}
 		for (i=1;i<=m;i++) scanf("%d%d",&a,&b),connect(a,b),connect(b,a),d[a]++,d[b]++;
 		for (i=1;i<=10000;i++)
 				if (!vis[i]&&root[i])
 				{
 					 if (++t>2)
 					 {
 					 		cout <<-1;
 					 		return 0;
 					 }
				 	 odd=0;
				 	 search(i);
				 	 if (odd&1)
				 	 {
				 	 		cout << -1;
				 	 		return 0;
				 	 }
				 	 if (odd>2) flag=true;
 				}
		if (all>4||t>=2&&flag)
		{
			 cout <<-1;
			 return 0;
		}
		memset(vis,0,sizeof(vis));
		if (t==1)
	  {
	  	 if (all>2) connect(dl[3],dl[4]),connect(dl[4],dl[3]);
   		 tot=0;
 	 		 if (all>0)
		   {
			 		dfs(dl[1]);
			 		if (all==2)
				 	{
					 	 printf("1\n%d\n%d\n",ans[1],tot-1);
					 	 for (i=tot;i>1;i--) printf("%d ",ans[i]);
					 	 return 0;
		 		  }
		 		  else
		 		  {
		 		  		for (i=1;i<=tot;i++) if (ans[i]>m) break;
		 		  		printf("%d\n",i-1);
		 		  		for (j=i-1;j>=1;j--) printf("%d ",ans[j]);
		 		  		printf("\n%d\n",tot-i);
		 		  		for (j=tot;j>i;j--) printf("%d ",ans[j]);
		 		  }
			 }
			 else
			 {
			 		 for (i=1;i<=10000;i++)
							 if (root[i])
							 {
							 		dfs(i);
 						 	 		break;
							 }
	 				 printf("1\n%d\n%d\n",ans[1],tot-1);
	 				 for (i=tot;i>1;i--) printf("%d ",ans[i]);
			 }
		}
		else
		{
				for (i=1;i<=all;i+=2)
				{
						tot=0;
						dfs(dl[i]);
						printf("%d\n",tot);
						for (j=tot;j>0;j--) printf("%d ",ans[j]);
						printf("\n");
				}
				for (i=1;i<=10000;i++)
						if (!vis[i]&&root[i])
						{
							 tot=0;
							 dfs(i);
							 printf("%d\n",tot);
							 for (j=tot;j>0;j--) printf("%d ",ans[j]);
						}
		}
 		return 0;
}