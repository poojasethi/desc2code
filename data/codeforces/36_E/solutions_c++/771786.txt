#include <stdio.h>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

vector<pair<int, int> > a[10005];
int u[10005], deg[10005], m;
vector<int> odd;
void go(int x, int fromedg, vector<int> &v) {
	for(int i=0;i<(int)a[x].size();i++)
		if(a[x][i].second != fromedg && !u[a[x][i].second]) {
			u[a[x][i].second] = 1;
			go(a[x][i].first, a[x][i].second, v);
			v.push_back(a[x][i].second);
		}
}
void output(vector<int> &r) {
	printf("%d\n", (int)r.size());
	for(int i=0;i<(int)r.size();i++)
		printf("%d ", r[i]);
	puts("");
}

bool go() {
	memset(u, 0, sizeof(u));
	vector<vector<int> > sol;
	for(int i=0;i<(int)odd.size();i++) {
		if(deg[odd[i]]%2) {
			vector<int> tmp;
			go(odd[i], -1, tmp);
			if(!tmp.empty())
				sol.push_back(tmp);
		}
	}
	for(int i=1;i<=10000;i++) {
		vector<int> tmp;
		go(i, -1, tmp);
		if(!tmp.empty())
			sol.push_back(tmp);
	}
	for(int i=0;i<(int)sol.size();i++) {
		vector<int>::iterator it = find(sol[i].begin(), sol[i].end(), m+1);
		if (it != sol[i].end()) {
			++it;
			vector<int> p = vector<int>(it, sol[i].end());
			--it;
			vector<int> q = vector<int>(sol[i].begin(), it);
			sol[i] = p;
			sol.push_back(q);
		}
	}

	if(sol.size()==0 || (sol.size()==1 && sol[0].size()<=1) ||sol.size()>2) {
		return false;
	}
	else if(sol.size()==2) { output(sol[0]); output(sol[1]); }
	else {printf("1\n%d\n", sol[0].back());
		sol[0].pop_back();
		output(sol[0]);
	}
	return true;
}

int main(void) {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	scanf("%d", &m);
	for(int i=1;i<=m;i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		a[x].push_back(make_pair(y, i));
		a[y].push_back(make_pair(x, i));
		deg[x]++;
		deg[y]++;
	}
	for(int i=1;i<=10000;i++) {
		if(deg[i]%2) odd.push_back(i);
	}
	if(odd.size()>4) {
		puts("-1");
		return 0;
	} else if(odd.size()<=2) {
		if(!go()) puts("-1");
	} else {
		int i;
		for(i=1;i<4;i++) {
			a[odd[0]].push_back(make_pair(odd[i], m+1));
			a[odd[i]].push_back(make_pair(odd[0], m+1));
			deg[odd[0]]++;
			deg[odd[i]]++;
			if (go()) break;
			a[odd[0]].pop_back();
			a[odd[i]].pop_back();
			--deg[odd[0]];
			--deg[odd[i]];
		}
		if(i==4) puts("-1");
	}
	return 0;
}
