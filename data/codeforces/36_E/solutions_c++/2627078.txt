#include<cstdio>
#define Cut flag[p]=flag[p^1]=1
#define N 20005
int n,m,x,y,l=1,odd,cnt,all,tmp,p;
int son[N],next[N],st[N],ed[N],f[N],g[N],pre[N],d[N],o[N];
bool b[N],flag[N];
void dfs(int x)
{
	if (b[x]) return; b[x]=1; if (d[x]&1) o[odd++]=x,tmp++;
	for (int p=son[x];p;p=next[p]) dfs(ed[p]);
}
void path(int x,int y)
{
	if (pre[x]) return; pre[x]=y;
	for (int p=son[x];p;p=next[p]) path(ed[p],p);
}
void find(int x,int *e)
{
	for (int p=son[x];p;p=next[p]) if (!flag[p]) Cut,find(ed[p],e),e[++e[0]]=p;
}
void prt(int *e)
{
	printf("%d\n",e[0]);
	for (int i=1;i<=e[0];i++) printf("%d%s",e[i]/2,i<e[0]?" ":"\n");
}
int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d",&m);
	for (int i=1;i<=m;i++)
		scanf("%d%d",&x,&y),d[x]++,d[y]++,n=x>n?x:n,n=y>n?y:n,
		st[++l]=x,ed[l]=y,next[l]=son[x],son[x]=l,
		st[++l]=y,ed[l]=x,next[l]=son[y],son[y]=l;
	for (int i=1;i<=n;i++) if (!b[i] && d[i]) tmp=0,dfs(i),all|=tmp>=4,cnt++;
	if (m<2 || odd>4 || all+cnt>2){printf("-1"); return 0;}
	if (cnt==1)
		if (!odd) p=2,f[++f[0]]=p,Cut,find(ed[2],g);
		else if (odd==2) p=son[o[0]],f[++f[0]]=p,Cut,find(o[1],g),find(o[0],g);
			else {
				path(o[0],-1);
				for (p=o[1];p!=o[0];p=st[p]) p=pre[p],Cut,f[++f[0]]=p;
				find(o[2],g);
				for (int i=1;i<=f[0];i++) flag[f[i]]=flag[f[i]^1]=0;
				f[0]=0,find(o[0],f);
				}
	else{
		if (odd) find(o[0],f),odd-=2; else find(n,f);
		if (odd) find(o[2],g);
		else for (int i=2;i<=l && !g[0];i++) if (!flag[i]) find(ed[i],g);
		}
	prt(f),prt(g); return 0;
}
