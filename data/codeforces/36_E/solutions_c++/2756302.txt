#include <cstring>
#include <cstdio>
using namespace std;

const int maxn=20010;
bool visit[maxn],flag[maxn],exist[maxn];
int tot,son[maxn],point[maxn],next[maxn],rk[maxn],degree[maxn],color[maxn],m;
int path1[maxn],path2[maxn],len1,len2;
int ps[10], p[10][10], blocks;
void addedge(int x, int y)
{
	next[++tot]=son[x]; son[x]=tot; point[tot]=y;
}
void dfs(int x)
{
	visit[x]=1; color[x]=blocks;
	for (int p=son[x]; p; p=next[p]) if (!visit[point[p]]) dfs(point[p]);
}

void find_path(int x, int from, int path[], int &len)
{
	for (int p=son[x]; p; p=next[p])
	{
		if (flag[p]) continue;
		flag[p]=flag[p^1]=1;
		find_path(point[p],rk[p],path,len);
	}
	if (from) path[++len]=from;
}

int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d",&m);
	tot=1;
	for (int i=1; i<=m; i++)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		exist[x]=exist[y]=1; degree[x]++, degree[y]++;
		addedge(x,y); rk[tot]=i; 
		addedge(y,x); rk[tot]=i;
	}
	
	blocks=0;
	for (int i=1; i<=10000; i++)
		if (exist[i] && !visit[i])
			++blocks,dfs(i);
	if (blocks>2){printf("-1\n");return 0;}
	for (int i=1; i<=10000; i++)
		if (exist[i])
		{
			if (degree[i]%2==1)
			{
				if (ps[color[i]]==4){printf("-1\n");return 0;}
				p[color[i]][++ps[color[i]]]=i;
			}
		}
	if (blocks==2)
	{
		if (ps[1]>2 || ps[2]>2){printf("-1\n");return 0;}
		if (ps[1]==2) find_path(p[1][1],0, path1, len1);
		else
			for (int i=1; i<=10000; i++)
				if (color[i]==1){find_path(i,0,path1,len1); break;}
		if (ps[2]==2) find_path(p[2][1],0, path2, len2);
		else
			for (int i=1; i<=10000; i++)
				if (color[i]==2){find_path(i,0,path2,len2); break;}
	}
	else
	{
		if (ps[1]>4){printf("-1\n");return 0;}
		if (ps[1]==0)
		{
			for (int i=1; i<=10000; i++)
				if (color[i]==1){find_path(i,0,path1,len1); break;}
			
			if (len1==1){printf("-1\n");return 0;}
			len2=len1-1, len1=1;
			for (int i=1; i<=len2; i++) path2[i]=path1[i+1]; 
		}
		else if (ps[1]==2)
		{
			find_path(p[1][1],0,path1,len1);
			if (len1==1){printf("-1\n");return 0;}
			len2=len1-1, len1=1;
			for (int i=1; i<=len2; i++) path2[i]=path1[i+1]; 
		}
		else
		{
			addedge(p[1][1],p[1][2]); rk[tot]=-1;
			addedge(p[1][2],p[1][1]); rk[tot]=-1;
			find_path(p[1][3],0,path1,len1);
			
			for (int i=1; i<=len1; i++)
				if (path1[i]==-1)
				{
					len2=len1-i; len1=i-1;
					for (int j=1; j<=len2; j++) path2[j]=path1[i+j];
					break;
				}
		}
	}
	printf("%d\n",len1);
	for (int i=1; i<=len1; i++) printf("%d ",path1[i]); printf("\n");
	printf("%d\n",len2);
	for (int i=1; i<=len2; i++) printf("%d ",path2[i]); printf("\n");
	//for (;;);
}
