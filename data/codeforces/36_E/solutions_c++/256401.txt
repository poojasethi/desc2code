#include <vector>
#include <set>
#include <cstdio>

#define NN 11234

using namespace std;

int n, m;
set< pair<int, int> > adj[NN];
vector< vector<int> > ans;
vector<int> odd, path;

void find_tour(int u) {
        while(!adj[u].empty()) {
                int v = adj[u].begin()->first, p = adj[u].begin()->second;
                adj[u].erase(make_pair(v, p));
                adj[v].erase(make_pair(u, p));
                find_tour(v);
                path.push_back(p);
        }
}

void split(vector<int> path) {
        int i, j, n = path.size();
        vector<int> cur;
        for(i = n-1; i && path[i] != -1; i--);
        for(j = 0; j < n; i++, j++) {
                if(path[i%n] == -1) {
                        if(cur.size()) ans.push_back(cur);
                        cur.clear();
                } else cur.push_back(path[i%n]);
        }
        if(cur.size()) ans.push_back(cur);
}

int main(void) {
        int i, j;

#ifdef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
#endif

        n = 0;
        scanf("%d", &m);
        for(i = 1; i <= m; i++) {
                int a, b;
                scanf("%d %d", &a, &b), n = max(n, max(a--, b--));
                adj[a].insert(make_pair(b, i));
                adj[b].insert(make_pair(a, i));
        }
        for(i = 0; i < n; i++)
                if(adj[i].size()%2)
                        odd.push_back(i);
        for(i = 0; i < (int)odd.size(); i += 2)
                adj[odd[i]].insert(make_pair(odd[i+1], -1)), adj[odd[i+1]].insert(make_pair(odd[i], -1));
        for(i = 0; i < n; i++) {
                find_tour(i);
                if(path.size()) split(path), path.clear();
        }
        if(ans.size() == 1 && ans[0].size() > 1) {
                ans.push_back(vector<int>(ans[0].begin(), ans[0].begin()+1));
                ans.push_back(vector<int>(ans[0].begin()+1, ans[0].begin()+ans[0].size()));
                ans.erase(ans.begin());
        }
        
        if(ans.size() == 2) {
                for(i = 0; i < (int)ans.size(); i++) {
                        printf("%d\n", ans[i].size());
                        for(j = 0; j < (int)ans[i].size(); j++) {
                                if(j) printf(" ");
                                printf("%d", ans[i][j]);
                        }
                        printf("\n");
                }
        } else printf("-1\n");

        return 0;
}