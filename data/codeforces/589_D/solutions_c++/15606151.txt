#include <cstdio>
#include <cstdlib>
#include <algorithm>

using namespace std;

const int maxn = 1e4 + 10;

struct walker
{
	int bg, ed, sp, t;
}p[maxn];

bool willmeet(walker a, walker b)
{
	if (b.t < a.t)
		swap(a, b);
	if (a.t + abs(a.bg - a.ed) < b.t)
		return 0;
	int pa = a.bg + a.sp * (b.t - a.t);
	int pb = b.bg;
	if (a.sp == b.sp)
	{
		if (pa != pb)
			return 0;
		return 1;
	}
	if (a.sp == -1)
		swap(a, b), swap(pa, pb);
	int x = min(abs(pa - a.ed) , abs(pb - b.ed));
	if(pa > pb || pa + a.sp * x < pb + x * b.sp)
		return 0;
	return 1;
}

int main()
{
	int n;
	scanf("%d", &n);
	for (int i = 0 ; i < n ; i++)
	{
		scanf("%d%d%d", &p[i].t, &p[i].bg, &p[i].ed);
		p[i].sp = (p[i].bg < p[i].ed) ? (1) : (-1);
	}
	
	for (int i = 0 ; i < n ; i++)
	{
		int ans = 0;
		for (int j = 0 ; j < n ; j++)
		{
			if (i == j)
				continue;
			ans += willmeet(p[i], p[j]);
		}
		printf("%d ", ans);
	}
	return 0;
}
 	  	  	      	 	  	   		   	