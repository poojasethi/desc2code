class BinNumber:
  bits = {}
  def Set(self, pow):
    k = pow
    while k in self.bits and self.bits[k] == 1:
      self.bits[k] = 0
      k += 1
    self.bits[k] = 1
  def Add(self, pow, times):
    i = 0
    while (1 << i) <= times:
      if times & (1 << i):
        self.Set(pow + i)
      i += 1
  def GetMaxBit(self):
    return max(self.bits.keys())
  def GetSettedBitsCount(self):
    return sum(self.bits.values())
  def GetZeroCount(self):
    return self.GetMaxBit() - self.GetSettedBitsCount() + 1
    
input()
count = {}
for i in map(int, raw_input().split()):
  if not i in count:
    count[i] = 1
  else:
    count[i] += 1
n = BinNumber()
for num in count.keys():
  n.Add(num, count[num])
print n.GetZeroCount()