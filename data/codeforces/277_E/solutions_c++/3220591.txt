#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define N 500000
using namespace std;

int n, ed, S, T;
int l[N], px[N], py[N], qd[N], qn[N], qc[N], q[N], u[N], f[N];
double ql[N], v[N], ret;

int SPFA(int S, int T){
	for (int i=0; i<=T; i++) v[i] = 1e10, u[i] = 0;
	v[S] = 0, q[0] = S;

	for (int i=0, j=0, s=1; s; i++){
		if (i == N) i = 0;
		u[q[i]] = 0;
		s--;
		for (int k=l[q[i]]; k; k=qn[k])
		if (qc[k] && v[q[i]] + ql[k] < v[qd[k]]){
			v[qd[k]] = v[q[i]] + ql[k];
			f[qd[k]] = k;
			if (!u[qd[k]]){
				if (++j == N) j = 0;
				s++;
				u[q[j]=qd[k]] = 1;
			}
		}
	}

	if (v[T] >= 1e9) return 0;
	ret += v[T];
	for (int i=T; i!=S; i=qd[f[i]^1]) qc[f[i]]--, qc[f[i]^1]++;
	return 1;
}

void bd(int x, int y, int c, double w){
	qd[++ed] = y, qn[ed] = l[x], l[x] = ed, ql[ed] = w, qc[ed] = c;
	if (ed % 2 == 0) bd(y, x, 0, -w);
}

double sqr(int x){return x * 1. * x;}

int main(){
	scanf("%d", &n);
	FOR(i,0,n) scanf("%d%d", &px[i], &py[i]);
	ed = 1;
	S = 1000;
	T = 1001;
	
	FOR(i,0,n){
		bd(2*i, T, 1, 0);
		bd(S, 2*i+1, 2, 0);
		FOR(j,0,n) if (py[i] > py[j]) bd(2*i+1, 2*j, 1, sqrt(sqr(px[i] - px[j]) + sqr(py[i] - py[j])));
	}
	
	FOR(i,0,n-1)
	if (!SPFA(S, T)){
		puts("-1");
		return 0;
	}
	
	printf("%.9f\n", ret);
	return 0;
}
