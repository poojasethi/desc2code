#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<set>
using namespace std;


void Get(int &T)
{
	char C;bool F=0;
	for(;C=getchar(),C<'0'||C>'9';)if(C=='-')F=1;
	for(T=C-'0';C=getchar(),C>='0'&&C<='9';T=T*10+C-'0');
	F&&(T=-T);
}

struct E
{
	int V,W;
	double C;
	int Next;
}Edge[1000005];
int EdgeTop=1;
int Head[1000005];
 
void Add(int U,int V,int W,double C)
{
	Edge[++EdgeTop]=(E){V,W,C,Head[U]};
	Head[U]=EdgeTop;
}

int N;
int X[1005];
int Y[1005];

double Dist(int A,int B)
{
	double DX=X[A]-X[B];
	double DY=Y[A]-Y[B];
	return sqrt(DX*DX+DY*DY);
}

void Init()
{
	Get(N);
	for(int i=1;i<=N;i++)
		Get(X[i]),Get(Y[i]);
	
	for(int i=1;i<=N;i++)
	{
		Add(N+N+1,i,2,0);
		Add(i,N+N+1,0,0);
		
		Add(i+N,N+N+2,1,0);
		Add(N+N+2,i+N,0,0);
		
		for(int j=1;j<=N;j++)
			if(Y[i]>Y[j])
			{
				double D=Dist(i,j);
				Add(i,N+j,1,D);
				Add(N+j,i,0,-D);
			}
	}
}

int S,T;
 
double Dis[1005];
int In[1005];
int Last[1005];
 
int Q[5005];
int L,R;
 
bool SPFA()
{
	for(int i=1;i<=N+N+2;i++)
	{
		Dis[i]=1.0/0.0;
	}
	
	
	memset(In,0,sizeof In);
	
	Dis[S]=0;
	
	Q[L=R=1]=S;
	In[S]=1;
	
	for(;;)
	{
		for(int i=Head[Q[L]];i;i=Edge[i].Next)
			if(Edge[i].W>0&&Dis[Edge[i].V]>Dis[Q[L]]+Edge[i].C)
			{
				Dis[Edge[i].V]=Dis[Q[L]]+Edge[i].C;
				Last[Edge[i].V]=i;
				if(In[Edge[i].V]==0)
				{
					In[Edge[i].V]=1;
					R++;if(R>5000)R=1;
					Q[R]=Edge[i].V;
				}
			}
		
		if(L==R)break;
		In[Q[L]]=0;
		L++;if(L>5000)L=1;
	}
	
	
	return Dis[T]<1.0/0.0;
}
 
double Ans;
int Flow;
 
void Adjust()
{
	Ans+=Dis[T];
	Flow++;
	
	for(int i=T;Last[i]!=0;i=Edge[Last[i]^1].V)
	{
		Edge[Last[i]].W--;
		Edge[Last[i]^1].W++;
	}
}

void Work()
{
	S=N+N+1;T=N+N+2;
	
	for(;SPFA();){Adjust();}
}

void Output()
{
	if(Flow<N-1)
		puts("-1");
	else
		printf("%.8lf\n",Ans);
}

int main()
{
	Init();
	Work();
	Output();
	return 0;
}