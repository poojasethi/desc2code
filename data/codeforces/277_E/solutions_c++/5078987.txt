#include <cstdio>
#include <cstring>
#include <cmath>

#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

const int kn = 805;

int n, source, dest, x[405], y[405], cap[kn][kn], fl[kn][kn];
double ans, cost[kn][kn];

inline double dist(int i, int j){
  return sqrt((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]));
}

int dad[kn], inq[kn];
double d[kn];

int blm(){
  for(int i = 1; i <= dest; ++i)
    d[i] = 2e9;
  memset(dad, 0, sizeof(dad));
  memset(inq, 0, sizeof(inq));

  d[source] = 0;
  inq[source] = 1;

  queue<int> q;
  q.push(source);

  while(!q.empty()){
    int now = q.front();
    inq[now] = 0;
    q.pop();

    for(int i = source; i <= dest; ++i)
      if(cap[now][i] - fl[now][i] > 0 && d[i] > d[now] + cost[now][i]){
        d[i] = d[now] + cost[now][i];
        dad[i] = now;
        if(!inq[i]){
          q.push(i);
          inq[i] = 1;
        }
      }
  }

  return dad[dest];
}

int flow(){
  int cflow = 0;

  while(blm()){
    ++cflow;
    ans += d[dest];
    for(int i = dest; i != source; i = dad[i]){
      fl[dad[i]][i] += 1;
      fl[i][dad[i]] -= 1;
    }
  }

  return cflow;
}

int main(){
  //freopen("binary.in" ,"r", stdin);
  //freopen("binary.out", "w", stdout);

  scanf("%d", &n);

  source = 0;
  dest = n * 2 + 1;

  for(int i = 1; i <= n; ++i)
    scanf("%d%d", &x[i], &y[i]);

  for(int i = 1; i <= n; ++i){
    cap[source][i] = 2;
    cap[i + n][dest] = 1;
    for(int j = 1; j <= n; ++j)
      if(y[i] > y[j]){
        cap[i][n + j] = 1;
        cost[i][n + j] = dist(i, j);
        cost[n + j][i] = -cost[i][n + j];
      }
  }

  int f = flow();

  if(f < n - 1)
    printf("-1");
  else
    printf("%lf", ans);

  return 0;
}
