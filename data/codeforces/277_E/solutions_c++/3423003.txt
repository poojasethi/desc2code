#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#define sqr(x) (x)*(x)
using namespace std;
const int maxn=40000,maxm=500000,oo=1073741819;
int next[maxm],flow[maxm],sora[maxm],powp[maxm];
int tail[maxn],st[maxn],pre[maxn],p[maxn],v[maxn],x[maxn],y[maxn];
double cost[maxm],ans,d[maxn];
int n,s,t,ss,tot;
int spfa(int s,int t)
{
	int h,r=h=0,ne,na;
	for (int i=s;i<=t;i++) d[i]=oo;
	st[r=1]=s,d[s]=0,v[s]=1;
	for (;h<r;) {
		ne=st[++h];
		for (int i=ne;next[i];) {
			i=next[i],na=sora[i];
			if (flow[i] && d[ne]+cost[i]<d[na]) {
				d[na]=d[ne]+cost[i],pre[na]=ne,p[na]=i;
				if (!v[na]) v[na]=1,st[++r]=na;
			}
		}
		v[ne]=0;
	}
	return d[t]<oo;
}
double widen()
{
	double sum=0;
	for (int i=t;i!=s;i=pre[i]) 
		sum+=cost[p[i]],flow[p[i]]--,flow[powp[p[i]]]++;
	return sum;
}
void origin()
{
	s=0,t=n+n+1,ss=t;
	for (int i=s;i<=t;i++) tail[i]=i;
}
void link(int x,int y,int z,double c)
{
	++ss,next[tail[x]]=ss,tail[x]=ss,sora[ss]=y,flow[ss]=z,cost[ss]=c;
	++ss,next[tail[y]]=ss,tail[y]=ss,sora[ss]=x,flow[ss]=0,cost[ss]=-c;
	powp[ss]=ss-1,powp[ss-1]=ss;
}
double dist(int i,int j)
{
	return sqrt(sqr(x[i]-x[j])+sqr(y[i]-y[j]));
}
int main()
{
	scanf("%d\n",&n);
	for (int i=1;i<=n;i++) scanf("%d%d\n",&x[i],&y[i]);
	origin();
	for (int i=1;i<=n;i++) {
		link(s,i,2,0);
		for (int j=1;j<=n;j++)
			if (y[i]>y[j]) link(i,j+n,1,dist(i,j));
		link(i+n,t,1,0);
	}
	ans=tot=0;
	for (;spfa(s,t);ans+=widen(),tot++) ;
    cout.precision(9);	
	if (tot==n-1) cout<<ans;else cout<<-1;
	return 0;
}
