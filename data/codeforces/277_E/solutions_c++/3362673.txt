#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
using namespace std;

#define N 802
#define INF 0x3f3f3f3f

int flow[N][N], cap[N][N];
double cost[N][N];

int vet[N][2];

pair<double, int> maxFlowMinCost(int S, int T, int n)
{
	pair<double, int> res = make_pair(0, 0);
	
	while (1)
	{
		vector<double> dist(n, INF);
		vector<int> flu(n, INF);
		vector<int> id(n, 0); // coisa do levit maluco
		vector<int> pre(n, -1);
		deque<int> que;
		dist[S] = 0;
		que.push_front(S);
		while (!que.empty())
		{
			int p = que.front();
			que.pop_front();
			id[p] = 0;
			for (int i = 0; i < n; ++i)
			{
				int f = cap[p][i]-flow[p][i];
				if (f)
				{
					double c = cost[p][i]+dist[p];
					if (c < dist[i])
					{
						dist[i] = c;
						que.push_back(i);
						if (id[i] == 0) que.push_back(i);
						//else if (id[i] == 2) que.push_front(i);
						id[i] = 1;
						pre[i] = p;
						flu[i] = min(flu[p], f);
					}
				}
			}
		}
		if (dist[T] > INF-1) break;
		res.first += dist[T];
		int f = flu[T];
		res.second += f;
		for (int p = T; p != S; p = pre[p])
			flow[pre[p]][p] += f, flow[p][pre[p]] -= f;
	}
	
	return res;
}

int main()
{
	int n;
	scanf("%d", &n);
	
	for (int i = 0; i < n; ++i)
		scanf("%d%d", &vet[i][0], &vet[i][1]);
	
	for (int i = 0; i < n; ++i)
	{
		// in, cost is 0
		cap[0][i+2] = 2;
		// out, cost is 0
		cap[n+i+2][1] = 1;
	}
	
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j) if (vet[i][1] > vet[j][1])
		{
			double dist = hypot(vet[i][0]-vet[j][0], vet[i][1]-vet[j][1]);
			cap[i+2][n+j+2] = 1;
			cost[i+2][n+j+2] = dist;
			cost[n+j+2][i+2] = -dist;
		}
	}
	
	pair<double, int> res = maxFlowMinCost(0, 1, 2*n+2);
	//printf("flow is %d\n", res.second);
	if (res.second < n-1) printf("-1\n");
	else printf("%.10lf\n", res.first);
}

