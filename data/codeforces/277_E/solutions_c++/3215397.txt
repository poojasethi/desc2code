#include <cstdio>
#include <cmath>
#define REP(i,n) for (int i=1;i<=n;++i)
#define DO double
using namespace std;

const DO INF=999999999.0;
const int MAXN=880;
struct VVVV{int s,e,w,next;DO c;} v[MAXN*MAXN];
DO ans,x[MAXN],y[MAXN],d[MAXN];
int n,t,way[MAXN],first[MAXN],line[MAXN<<4];
bool boo[MAXN];

void Add(int x,int y,int water,DO cost) {
	v[++t].s=x; v[t].e=y; v[t].w=water; v[t].c=cost;
	v[t].next=first[x]; first[x]=t;
	v[++t].s=y; v[t].e=x; v[t].c=-cost;
	v[t].next=first[y]; first[y]=t;
}

DO Dist(int i,int j) {
	return sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));
}

void Spfa() {
	for (int l=1,r=1;l<=r;++l) {
		for (int p=first[line[l]];p;p=v[p].next)
			if ((v[p].w)&&(d[v[p].e]>d[line[l]]+v[p].c)) {
				d[v[p].e]=d[line[l]]+v[p].c;
				way[v[p].e]=p;
				if (!boo[v[p].e]) {
					line[++r]=v[p].e;
					boo[v[p].e]=true;
				}
			}
		boo[line[l]]=false;
	}
}

void Back(int k) {
	if (k) Back(v[way[k]].s);
	ans+=v[way[k]].c;
	--v[way[k]].w;
	++v[way[k]^1].w;
}

int main() {
	scanf("%d",&n);
	t=1;
	REP(i,n) scanf("%lf%lf",&x[i],&y[i]);
	REP(i,n) Add(0,i,2,0.0);
	REP(i,n) REP(j,n)
		if (y[i]>y[j]) Add(i,n+j,1,Dist(i,j));
	REP(i,n) Add(n+i,n+n+1,1,0.0);
	REP(i,n-1) {
		REP(i,n+n+1) d[i]=INF;
		REP(i,n+n+1) boo[i]=false;
		Spfa();
		if (d[n+n+1]==INF) {
			puts("-1");
			return 0;
		} else
			Back(n+n+1);
	}
	printf("%.20lf\n",ans);
	return 0;
}
