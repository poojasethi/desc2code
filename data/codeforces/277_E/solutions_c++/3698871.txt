#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <iomanip>
#include <set>
using namespace std;

typedef long double LD;
const int MAXN = 400 + 10;
int n, X[MAXN], Y[MAXN];
int cap[MAXN + MAXN][MAXN + MAXN];
LD cost[MAXN + MAXN][MAXN + MAXN];

LD dist(int a, int b){
  int y = Y[a] - Y[b];
  int x = X[a] - X[b];
  return sqrt(x*x + y*y);
}

const LD INF = 1e16;
const LD EPS = 1e-9;
LD best[MAXN + MAXN];
int back[MAXN + MAXN];
bool mark[MAXN + MAXN];

bool dijkstra(){
  for(int i=0;i<MAXN+MAXN;i++){
    mark[i] = false;
    best[i] = INF;
  }
  best[0] = 0;
  for(int step=0;step<=2*n+1;step++){
    int Min = -1;
    for(int i=0;i<=2*n+1;i++)
      if((mark[i] == false) and (Min == -1 or best[Min] > best[i] + EPS))
	Min = i;
    if(Min == -1)
      break;
    mark[Min] = true;
    for(int i=0;i<=2*n+1;i++)
      if(cap[Min][i] > 0 and (best[i] > best[Min] + cost[Min][i] + EPS)){
	best[i] = best[Min] + cost[Min][i];
	back[i] = Min;
      }
  }
  if(best[2*n + 1] > 1e15 + EPS)
    return false;
  return true;
}

int main(){
  ios_base::sync_with_stdio(false);
  cin>>n;
  for(int i=1;i<=n;i++)
    cin>>X[i]>>Y[i];

  for(int i=1;i<=n;i++)
    for(int j=1;j<=n;j++)
      if(Y[i] < Y[j]){
	cap[i][j + n] = 1;
	cost[i][j + n] = dist(i, j);
	cost[j + n][i] = -cost[i][j + n];
      }

  for(int i=1;i<=n;i++){
    cap[0][i] = 1;
    cap[i+n][2*n+1] = 2;
  }
  
  LD ans = 0;
  int flow = 0;
  while(dijkstra()){
    flow++;
    ans += best[2*n + 1];
    int v = 2*n + 1;
    while(v != 0){
      int u = back[v];
      cap[u][v]--;
      cap[v][u]++;
      v = u;
    }
  }
  if(flow < n - 1)
    cout<<-1<<endl;
  else
    cout<<fixed<<setprecision(8)<<ans<<endl;
  return 0;
}
