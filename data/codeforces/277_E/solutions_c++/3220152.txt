#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
#define N 810
#define inf 1e9
const double eps=1e-10;
int x[N/2];
int y[N/2];
int res[N];
int rec[N/2];
bool vx[N/2];
bool vy[N];
double a[N/2];
double b[N];
double f[N/2][N];
double slack[N];
int n,root=1;

bool dfs(int i)
{
    vx[i]=1;
    for (int j=1; j<=n*2; j++)
		if (a[i]+b[j]<f[i][j]+eps && !vy[j]) {
			vy[j]=1;
			if ((!res[j])||dfs(res[j])) {
				res[j]=i;
				rec[i]=j;
				return 1;
			}
		} else if (!vy[j])
			slack[j]=min(slack[j], a[i]+b[j]-f[i][j]);
    return 0;
}

void KM()
{
	for (int i=1; i<=n; i++) 
	{
		a[i]=-1e9;
		for (int j=1; j<=n*2; j++) a[i]=max(a[i],f[i][j]);
	}
	memset(b, 0, sizeof b);
    for (int i=1; i<=n; i++) {
		if (root==i) continue;
        bool ok=0;
        while (!ok) {
            memset(vx, 0, sizeof(vx));
            memset(vy, 0, sizeof(vy));
			for (int j=1; j<=n*2; j++) slack[j]=1e9;
			ok=dfs(i);
            if (!ok) {
				double d=1e9;
                for (int i=1; i<=n*2; i++) if (!vy[i]) d=min(d, slack[i]);
                for (int i=1; i<=n; i++) if (vx[i]) a[i]-=d;
                for (int i=1; i<=n*2; i++) if (vy[i]) b[i]+=d;
            }
        }
    }
	double ans=0;
	for (int i=1; i<=n; i++) 
		if (i!=root) 
		{
			if (!rec[i]) { puts("-1"); return; }
			ans += f[i][rec[i]];
		}
	if (ans <= -1e9) puts("-1"); else printf("%.10lf\n",-ans);
}

double dist(double x1,double y1,double x2,double y2)
{
	return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
}

int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
	{
		scanf("%d%d",x+i,y+i);
		if(y[i]>y[root]) root=i;
	}
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;++j)
			f[i][j*2-1]=f[i][j*2]=-inf;
	for(int i=1;i<=n;i++) 
		if(i!=root)
			for(int j=1;j<=n;++j)
				if(y[i]<y[j])
				{
					double t=-dist(x[i],y[i],x[j],y[j]);
					f[i][j*2-1]=f[i][j*2]=t;
				}
	KM();
	return 0;
}
