#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <cmath>

using namespace std;
#define NN 1000

typedef long long int64;
typedef pair<int, int> pii;

int qf, qb, q[NN*NN];
int x[NN], y[NN];
int deg[NN], adj[NN][NN], cap[NN][NN], prev[NN];
double cost[NN][NN], d[NN];

int min_cost_flow(int N, int src, int tar, double &c) {
	int ret=0, i, u, v, bot;
	c=0;
	while (1) {
		for (i=0; i<N; i++) d[i]=1e20;
		qf=qb=0; d[src]=0; 
		q[qb++]=src;
		while (qf<qb) {
			u=q[qf++];
			for (i=0; i<deg[u]; i++) {
				v=adj[u][i];
				if (cap[u][v] && d[v]>d[u]+cost[u][v]) {
					prev[v]=u; d[v]=d[u]+cost[u][v];
					q[qb++]=v;
				}
			}
		}
		if (d[tar]>=1e10) return ret;
		bot=1000;
		for (u=tar; u!=src; u=prev[u]) 
			bot=min(bot, cap[prev[u]][u]);
		ret+=bot;
		c+=bot*d[tar];
		for (u=tar; u!=src; u=prev[u]) {
			cap[prev[u]][u]-=bot;
			cap[u][prev[u]]+=bot;
		}
	}
}

int main() {
	int N, i, j, src, tar, flow;
	double c;
	scanf("%d", &N);
	for (i=0; i<N; i++) scanf("%d%d", x+i, y+i);
	memset(cap, 0, sizeof(cap));
	memset(deg, 0, sizeof(deg));
	for (i=0; i<N; i++) {
		for (j=0; j<N; j++) {
			if (y[j]>=y[i]) continue;
			adj[i][deg[i]++]=N+j;
			adj[N+j][deg[N+j]++]=i;
			cap[i][N+j]=1;
			cost[i][N+j]=hypot(x[i]-x[j], y[i]-y[j]);
			cost[N+j][i]=-cost[i][N+j];
		}
	}
	src=2*N; tar=src+1;
	for (i=0; i<N; i++) {
		adj[src][deg[src]++]=i;
		adj[i][deg[i]++]=src;
		cap[src][i]=2;
		cost[src][i]=cost[i][src]=0;
	}
	for (i=0; i<N; i++) {
		adj[tar][deg[tar]++]=N+i;
		adj[N+i][deg[N+i]++]=tar;
		cap[N+i][tar]=1;
		cost[N+i][tar]=cost[tar][N+i]=0;
	}
	flow=min_cost_flow(2*N+2, src, tar, c);
	if (flow!=N-1) puts("-1"); 
	else printf("%.10lf\n", c);
	
	return 0;
}
