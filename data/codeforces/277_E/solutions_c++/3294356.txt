#include<iostream>
#include<cstdio>
#include<vector>
#include<queue>
#include<complex>
using namespace std;
typedef complex<double> pnt;
const int V = 1005;
const double inf = 1e9;
double cost[V][V],dp[V];
int flow[V][V],n,N,vis[V],par[V];
vector<int> G[V];
queue<int> Q;
pnt num[V];
int main(){
	cin >> n ;
	for(int i = 1; i <= n; i++){
		int x,y;
		cin >> x >> y;
		num[i] = pnt(x,y);
	}
	N = n*2 + 1;
	for(int i = 0; i <= N; i++)
		for(int j = 0; j <= N; j++)
			cost[i][j] = 0;
	for(int i = 1; i <= n; i++){
		G[0].push_back(i);
		G[n+i].push_back(N);
		flow[0][i] = 1;
		flow[n+i][N] = 2;
	}
	for(int i = 1; i <= n; i++)
		for(int j = 1; j <= n; j++) if(imag(num[i]) < imag(num[j])){
			double val = abs(num[i] - num[j]);
//			cout<<i<<" "<<j<<" "<<val<<endl;
			cost[i][j+n] = val;
			cost[j+n][i] = 0-val;
			flow[i][j+n] = 1;
			G[i].push_back(j+n);
			G[j+n].push_back(i);
		}
	double ans = 0;
	for(int i = 1; i < n; i++){
		for(int i = 0; i <= N; i++){
		   	dp[i] = inf;
			par[i] = -1;
		}
		dp[0] = 0;
		Q.push(0);
		vis[0] = 1;
		while(!Q.empty()){
			int u = Q.front(); Q.pop();
//			cout<<"u: "<<u<<" "<<dp[u]<<endl;
			vis[u] = 0;
			for(int i = 0; i < G[u].size(); i++){
				int v = G[u][i];
				if(flow[u][v] && dp[u] + cost[u][v] < dp[v]) {
					dp[v] = dp[u] + cost[u][v];
//					cout<<"v: "<<v<<" "<<dp[v]<<endl;
					par[v] = u;
					if(!vis[v]) {
						Q.push(v);
						vis[v] =1;
					}
				}
			}
		}
//		cout<<N<<" "<<dp[N]<<endl;
		if(dp[N] == inf) {
			cout<< -1 <<endl;
			return 0;
		}
		for(int i = N; par[i] != -1; i = par[i]) {
			int v = i,u = par[i];
			flow[u][v] --;
			flow[v][u] ++;
//			cout<<u<<" "<<v<<" "<<flow[u][v]<<endl;
		}
		ans += dp[N];
	}
	printf("%.10lf\n",ans);
}
