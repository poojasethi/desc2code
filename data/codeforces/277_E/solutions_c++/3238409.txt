#include <cmath>
#include <queue>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const double INF = 99999999999999.9;
const double eps = 1e-8;
const int MAXN = 404 << 1;

int x[MAXN], y[MAXN], p[MAXN];
int f[MAXN][MAXN];
double c[MAXN][MAXN];
double d[MAXN];
queue <int> q;
bool visit[MAXN];

inline int L(const int x) { return x << 1; }
inline int R(const int x) { return L(x) ^ 1 ; }
inline bool equ(const double x, const double xx) { return fabs(x - xx) < eps; }

int main() {
    int i, j, k;
    int m, n;
    int S, T;
    int idx;
    double tot(0), mn;

    scanf("%d", &n);
    S = 0, T = R(n);
    for (i=S; i<=T; ++i) fill(c[i], c[i]+T+1, INF);
    for (i=1; i<=n; ++i) {
        scanf("%d%d", x+i, y+i);
        f[S][i] = 1, f[i+n][T] = 2;
        c[S][i] = 0, c[i+n][T] = 0;
    }
    for (i=1; i<=n; ++i) for (j=1; j<=n; ++j) if (y[i] < y[j]) {
        f[i][j+n] = 1; 
        c[i][j+n] = hypot(x[i]-x[j], y[i]-y[j]), c[j+n][i] = -c[i][j+n];
    }
    int tc(n-1);
    while (tc--) {
        memset(visit, false, sizeof(visit));
        fill(d, d+T+1, INF);
        d[S] = 0;
        for (k=S; k<=T; ++k) {
            mn = INF;
            for (i=S; i<=T; ++i) if (!visit[i] && d[i] < mn) mn = d[i], idx = i;
            visit[idx] = true;
            for (i=S; i<=T; ++i) if (!visit[i] && f[idx][i] && d[idx] + c[idx][i] < d[i]) {
                d[i] = d[idx] + c[idx][i];
                p[i] = idx;
            }
        }
//      for (i=S; i<=T; ++i) printf("%.7lf ", d[i]); puts("");
        if (equ(d[T], INF)) {
            puts("-1");
            return 0;
        }
        k = T;
        while (k != S) {
            tot += c[p[k]][k];
            ++f[k][p[k]], --f[p[k]][k];
            k = p[k];   
        }
    }
    printf("%.16lf\n", tot);

    return 0;
}
