#include <bits/stdc++.h>
using namespace std;
const int maxn = 200005;
int dp[maxn][2], ok[maxn];
int vis[maxn], a[maxn];
struct Edge{
    int v, next;
}E[maxn << 1];
int head[maxn], tol;
int n, k, minNode, ans;

void Init(){
    memset(head, -1, sizeof head);
    tol = 0;
}

void add_edge(int u, int v){
    E[tol].v = v;
    E[tol].next = head[u];
    head[u] = tol++;
}

void dfs(int u){
    vis[u] = 1;
    ok[u] = 1;
    dp[u][0] = dp[u][1] = 1;
    int max1 = 0, max2 = 0;
    for(int i = head[u]; ~i; i = E[i].next){
        int v = E[i].v;
        if(vis[v]) continue;
        if(a[v] < minNode){
            ok[u] = 0;
            continue;
        }
        dfs(v);
        if(ok[v]){
            dp[u][0] += dp[v][0];
            dp[u][1] += dp[v][1];
        }else{
            ok[u] = 0;
            if(dp[v][0] > max1){
                max2 = max1;
                max1 = dp[v][0];
            }else if(dp[v][0] > max2){
                max2 = dp[v][0];
            }
        }
    }
    dp[u][0] += max1;
    dp[u][1] += max1 + max2;
    ans = max(ans, dp[u][1]);
}

bool solve(){
    memset(vis, 0, sizeof vis);
    memset(ok, 0, sizeof ok);
    bool all_big = true;
    for(int i = 1; i <= n; i++){
        if(a[i] >= minNode && !vis[i]){
            for(int j = head[i]; ~j ; j = E[j].next){
                if(a[E[j].v] < minNode){
                    ans = 0;
                    dfs(i);
                    if(ans >= k) return true;
                    break;
                }
            }
        }
        if(a[i] < minNode) all_big = false;
    }
    return all_big;
}

int main(){
    //freopen("test.in", "r", stdin);
    ios_base::sync_with_stdio(false);
    cin >> n >> k;
    for(int i = 1; i <= n; i++) cin >> a[i];
    Init();
    for(int i = 1; i < n; i++){
        int u, v;
        cin >> u >> v;
        add_edge(u, v);
        add_edge(v, u);
    }
    int l = 1, r = (int)(1e6);
    while(l < r){
        minNode = (l + r + 1) >> 1;
        if(solve())
            l = minNode;
        else
            r = minNode - 1;
    }
    cout << l << endl;
    return 0;
}
