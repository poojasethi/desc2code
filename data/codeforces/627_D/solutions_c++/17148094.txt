#include<bits/stdc++.h>
#define eps 1e-6
#define LL long long
#define pii pair<int, int>
#define pb push_back
#define mp make_pair
//#pragma comment(linker, "/STACK:1024000000,1024000000")
using namespace std;

const int MAXN = 200200;
//const int INF = 0x3f3f3f3f;
int n, k, a[MAXN], tag[MAXN], ans, cnt;
vector<int> G[MAXN];
int sz[MAXN], dp[MAXN], tag_cnt[MAXN];
void init(int val) {
	ans = cnt = 0;
	for (int i = 1; i <= n; i++) {  
		tag[i] = a[i] >= val;
		cnt += tag[i];
	}
	memset(tag_cnt, 0, sizeof(tag_cnt));
}
void dfs1(int cur, int fa) {
	sz[cur] = 1;
	for (int i = 0; i < G[cur].size(); i++) {
		int u = G[cur][i];
		if (u == fa) continue;
		dfs1(u, cur);
		sz[cur] += sz[u];
	}
}
void dfs2(int cur, int fa) {
	if (ans >= k) return;
	int all = 0, max1 = 0, max2 = 0;
	for (int i = 0; i < G[cur].size(); i++) {
		int u = G[cur][i];
		if (u == fa) continue;
		dfs2(u, cur);
		tag_cnt[cur] += tag_cnt[u];
		if (dp[u] == sz[u])
			all += dp[u];
		else if (dp[u] > max1)
			max2 = max1, max1 = dp[u];
		else if (dp[u] > max2)
			max2 = dp[u];
	}
	if (!tag[cur]) dp[cur] = 0;
	else {
		dp[cur] = all + max1 + 1;
		tag_cnt[cur]++;
	}
	if (n-sz[cur] == cnt-tag_cnt[cur])
		all += n - sz[cur];
	if (tag[cur])
		ans = max(ans, all+max1+max2+1);
}

int main()
{
    //freopen("input.txt", "r", stdin);
	scanf("%d%d", &n, &k);
	for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
	for (int i = 1; i < n; i++) {
		int u, v;
		scanf("%d%d", &u, &v);
		G[u].push_back(v);
		G[v].push_back(u);
	}
	int l = 1, r = 1000000;
	dfs1(1, 0);
	while (l <= r) {
		int mid = (l+r) >> 1;
		init(mid);
		dfs2(1, 0);
		if (ans >= k)
			l = mid + 1;
		else r = mid - 1;
	}
	printf("%d", r);
    return 0;
}
















 			   	  	  		  	  	  			 				