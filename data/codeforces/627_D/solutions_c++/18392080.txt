#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>

#define MAXN 210000

using namespace std;

int n,K;
int up[MAXN],dp[MAXN],val[MAXN];

struct edge
{
    int u,v,next;
}edges[MAXN*2];

int head[MAXN],nCount=0;

void AddEdge(int U,int V)
{
    edges[++nCount].u=U;
    edges[nCount].v=V;
    edges[nCount].next=head[U];
    head[U]=nCount;
}

int w[MAXN],size[MAXN];

void DFS(int u,int fa)
{
    size[u]=1;
    for(int p=head[u];p!=-1;p=edges[p].next)
    {
        int v=edges[p].v;
        if(v==fa) continue;
        DFS(v,u);
        w[u]+=w[v];
        size[u]+=size[v];
    }
}

bool can=false;

void DP(int u,int fa,int lim)
{
    int tmp=0;
    int maxv=0,secmaxv=0;
    for(int p=head[u];p!=-1;p=edges[p].next)
    {
        int v=edges[p].v;
        if(v==fa) continue;
        if(w[u]-w[v]==size[u]-size[v]&&up[u]) up[v]=1;
        DP(v,u,lim);
        if(val[v]<lim) continue;
        if(w[v]==size[v]) tmp+=size[v];
        else
        {
            if(dp[v]>maxv)
            {
                secmaxv=maxv;
                maxv=dp[v];
            }
            else if(dp[v]>secmaxv)
                secmaxv=dp[v];
        }
    }
    if(val[u]<lim) return;
    if(tmp+maxv+secmaxv+up[u]*(n-size[u])+1>=K) can=true;
    dp[u]=tmp+maxv+1;
}

bool check(int x)
{
    memset(up,0,sizeof(up));
    memset(w,0,sizeof(w));
    memset(dp,0,sizeof(dp));
    for(int i=1;i<=n;i++) w[i]=(val[i]>=x);
    up[1]=1;
    DFS(1,-1);
    can=false;
    DP(1,-1,x);
    return can;
}

int main()
{
    int maxval=0;
    memset(head,-1,sizeof(head));
    scanf("%d%d",&n,&K);
    for(int i=1;i<=n;i++) scanf("%d",&val[i]),maxval=max(maxval,val[i]);
    for(int i=1;i<n;i++)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        AddEdge(u,v);
        AddEdge(v,u);
    }
    //printf("%d\n",check(557321));
    int lowerBound=0,upperBound=maxval,ans=-1;
    while(lowerBound<=upperBound)
    {
        int mid=(lowerBound+upperBound)>>1;
        if(check(mid))
        {
            ans=mid;
            lowerBound=mid+1;
        }
        else upperBound=mid-1;
    }
    printf("%d\n",ans);
    return 0;
}