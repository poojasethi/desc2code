#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 2e5 + 5;

int all_cnt, sum[N], cnt[N], all[N], ok[N], n, m, a[N], x, y, z; 
vector< int > v[N];

int dfs(int node, int root, int big) {
	cnt[node] = a[node] < big;
	all[node] = 1;
	sum[node] = 1;
	ok[node] = 1;
	int mx = 0, mx2 = 0;
	foreach(it, v[node]) {
		if(*it == root) continue;
		if(dfs(*it, node, big)) return true;
		sum[node] += sum[*it]; 
		cnt[node] += cnt[*it]; 
		if(ok[*it] == 1) all[node] += all[*it];
		else { 
			ok[node] = 0;
			if(all[*it] >= mx) {
				mx2 = mx;
				mx = all[*it];
			} else mx2 = max(mx2, all[*it]);
		}
	}
	all[node] += mx;
	if(a[node] < big) { all[node] = 0; ok[node] = 0; }
	else if(all[node] + mx2 + (cnt[node] == all_cnt ? n - sum[node] : 0) >= m) return true;
	return false;
}

int main() {

	scanf("%d %d", &n, &m);

	FOR(i, 1, n) {
		scanf("%d", &a[i]);
	}

	FOR(i, 2, n) {
		scanf("%d %d", &x, &y);
		v[x].pb(y); v[y].pb(x);
	}

	int bas = 0, son = 1000000;

	while(bas < son) {
		int ort = bas + son >> 1;
		if(bas == ort) ort++;
		all_cnt = 0;
		FOR(i, 1, n) all_cnt += a[i] < ort;
		if(dfs(1, 0, ort)) bas = ort;
		else son = ort - 1;
	}

	cout << bas << endl;

	return 0;
}
