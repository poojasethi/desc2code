#include <bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define mp make_pair
#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)
#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(),a.end()
#define pw(x) (1LL<<(x))

using namespace std;

typedef long long ll;
typedef double dbl;
typedef vector<int> vi;
typedef pair<int, int> pi;

const int inf = (int)1.01e9;
const dbl eps = 1e-9;

/* --- main part --- */

#define TASK "1"

const int N = 2e5 + 10;

vi v[N];

int a[N];
int b[N];
int n;

int w[N], d[N];      
int f[N];

int res;

void dfs(int x)
{
    f[x] = w[x];
    vi vv;
    forn(i, sz(v[x]))
    {
        int y = v[x][i];
        if (w[y] && b[y] && !f[y])
        {
            dfs(y);
            f[x] = max(f[x], f[y] + w[x]);
            vv.pb(f[y]);
        }
    }
    sort(all(vv));
    reverse(all(vv));
    if (sz(vv) >= 2) res = max(res, w[x] + vv[0] + vv[1]);
    res = max(res, f[x]);
}


int calc(int T)
{
    forn(i, n) b[i] = a[i] >= T;
    forn(i, n) d[i] = sz(v[i]);
    forn(i, n) w[i] = 1;
    set<pi> S;
    forn(i, n) S.insert(mp(d[i], i));
    forn(_, n)
    {
        int x = S.begin()->S;
        S.erase(S.begin());
        if (d[x] != 1)
        {
            break;
        }
        int to = -1;
        forn(i, sz(v[x]))
        {
            int y = v[x][i];
            if (w[y])
            {
                to = y;
                break;
            }
        }
        if (b[x] && b[to])
        {
            S.erase(mp(d[to], to));
            d[to] -= 1;
            w[to] += w[x];
            w[x] = 0;
            S.insert(mp(d[to], to));
        }
    }
    forn(i, n) f[i] = 0;
    res = 0;
    forn(i, n) if (b[i] && w[i] && !f[i])
    {
        dfs(i);
    }        
    return res;
}




int main()
{
    #ifdef home
        assert(freopen(TASK".in", "r", stdin));
        assert(freopen(TASK".out", "w", stdout));
    #endif
    int k;
    scanf("%d%d", &n, &k);
    forn(i, n) scanf("%d", a + i);
    forn(i, n - 1)
    {
        int x, y;
        scanf("%d%d", &x, &y);
        --x, --y;
        v[x].pb(y);
        v[y].pb(x);
    }
    int l = 0, r = 1e6;

    while (l < r)
    {
        int m = (l + r + 1) >> 1;
        if (calc(m) >= k) l = m;
        else r = m - 1;
    } 

    printf("%d\n", l);
    #ifdef home
        eprintf("time = %d ms\n", (int)(clock() * 1000. / CLOCKS_PER_SEC));
    #endif
    return 0;
}