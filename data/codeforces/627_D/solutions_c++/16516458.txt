#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int N=200010;

int n,ans;
int a[N],head[N],size[N],dp[N];
bool v[N];

struct edge
{
	int to,next;
}e[2*N];

void push(int k,int x,int y)
{
	e[k].to=y;e[k].next=head[x];head[x]=k;
}

void dfs1(int k,int x)
{
	int p=head[k],ma=0;
	dp[k]=size[k]=v[k]=1;
	while (p)
	{
		if (!v[e[p].to])
		{
			dfs1(e[p].to,x);
			size[k]+=size[e[p].to];
			if (size[e[p].to]==dp[e[p].to]) dp[k]+=dp[e[p].to]; else ma=max(ma,dp[e[p].to]);
		}
		p=e[p].next;
	}
	dp[k]+=ma;
	if (a[k]<x) dp[k]=0;
}

void update(int &x,int &y,int z)
{
	if (z>x)
	{
		y=x;x=z;
	}
	else
		y=max(y,z);
}

void dfs2(int k,int x,int t)
{
	v[k]=1;
	int p=head[k],s=1,ma1=0,ma2=0;
	if (t==n-size[k]) s+=t; else update(ma1,ma2,t);
	while (p)
	{
		if (!v[e[p].to])
		{
			if (dp[e[p].to]==size[e[p].to]) s+=dp[e[p].to]; else update(ma1,ma2,dp[e[p].to]);
		}
		p=e[p].next;
	}
	if (a[k]>=x) ans=max(ans,s+ma1);
	p=head[k];
	while (p)
	{
		if (!v[e[p].to])
		{
			if (a[k]<x)
				dfs2(e[p].to,x,0);
			else
				if (dp[e[p].to]==size[e[p].to])
					dfs2(e[p].to,x,s+ma1-dp[e[p].to]);
				else
					if (dp[e[p].to]==ma1)
						dfs2(e[p].to,x,s+ma2);
					else
						dfs2(e[p].to,x,s+ma1);
		}
		p=e[p].next;
	}
}

int solve(int x)
{
	memset(v+1,0,n*sizeof(bool));
	dfs1(1,x);
	ans=0;memset(v+1,0,n*sizeof(bool));
	dfs2(1,x,0);
	return ans;
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	int k;scanf("%d%d",&n,&k);
	for (int i=1;i<=n;i++) scanf("%d",&a[i]);
	for (int i=1;i<n;i++)
	{
		int x,y;scanf("%d%d",&x,&y);
		push(2*i-1,x,y);push(2*i,y,x);
	}
	int l=1,r=1000000;
	while (l<=r)
	{
		int mid=(l+r)>>1;
		if (solve(mid)>=k) l=mid+1; else r=mid-1;
	}
	printf("%d\n",r);
	return 0;
}
