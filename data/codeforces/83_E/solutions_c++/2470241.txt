#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int L = 21, M = 1 << L, N = 200050;

int A[N], len, n;
int f[L][M];

inline int LCP (int m1, int m2)
{
	for (int i = len; i >= 0; --i)
		if ((m2 >> (len - i)) == (m1 & ((1 << i) - 1)))
			return i;
}
inline void update (int &x, int y) { if (x > y) x = y; }

void dp ()
{
	for (int i = 0; i <= len; ++i)
		fill(f[i], f[i] + (1 << i), len);
	int t = len;
	for (int i = 2; i <= n; ++i)
	{
		t += len - LCP(A[i - 1], A[i]);
		int d = len;
		for (int j = 0; j <= len; ++j)
			d = min(d, f[j][A[i] >> (len - j)] - j);
		d = d + LCP(A[i - 1], A[i]);
		for (int j = 0; j <= len; ++j)
			update(f[j][A[i - 1] & ((1 << j) - 1)], d);
	}
	int res(t);
	for (int i = 0; i <= len; ++i)
		for (int j = 0; j < (1 << i); ++j)
			res = min(res, f[i][j] + t);
	printf("%d\n", res);
}

int main ()
{
#ifdef LOCAL
	freopen("in", "r", stdin);
#endif
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
	{
		char str[22];
		scanf("%s", str);
		len = strlen(str);
		for (int z = 0; z < len; ++z)
			A[i] = A[i] * 2 + (str[z] == '1');
	}
	dp();
	return 0;
}

