#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
int n,L,V[200000];
char BUF[30];
int read(){
  scanf("%s",&BUF);
  int ret=0;
  for(L=0;BUF[L]!='\0';++L)ret=(ret<<1)+BUF[L]-'0';
  return ret;
}
inline int pref(int mask,int l){return(mask>>(L-l));}
inline int suf(int mask,int l){return(mask&((1<<l)-1));}
inline int get_max(int m1,int m2){
  for(int i=L;i>=0;--i)if(suf(m1,i)==pref(m2,i))return i;
}
int single=0,add=0;
int dp[1<<20][21];
int main(){
  memset(dp,-10,sizeof dp);
  int i,j,k;
  scanf("%d",&n);
  for(i=0;i<n;++i)V[i]=read();
  single=0;
  for(i=1;i<n;++i){
   int CP=single;
   for(j=0;j<=L;++j)CP=max(CP,dp[pref(V[i],j)][j]+add+j);
   single+=get_max(V[i-1],V[i]);
   add+=get_max(V[i-1],V[i]);
   for(j=0;j<=L;++j)dp[suf(V[i-1],j)][j]=max(dp[suf(V[i-1],j)][j],CP-add);
                  }
  int ans=single;
  for(i=0;i<=L;++i)
   for(j=0;j<(1<<i);++j)ans=max(ans,dp[j][i]+add);
  cout<<n*L-ans<<'\n';
  //system("pause");
  return 0;
}
