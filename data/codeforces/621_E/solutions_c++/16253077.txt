#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;
const int maxn = 50000 + 10;
const int M = 1e9 + 7;
struct Matrix{
	long long c[105][105];
}tmp;	//tmp表示从i到j有多少种方式
int d[maxn], n, b, k, x;
int cnt[105];

Matrix Mul(Matrix A, Matrix B){
	Matrix res;
	memset(res.c, 0, sizeof(res.c));
	for(int i = 0; i < x; i++){
		for(int j = 0; j < x; j++){
			for(int k = 0; k < x; k++){
				res.c[i][k] = (res.c[i][k] + A.c[i][j] * B.c[j][k]) % M;
			}
		}
	}
	return res;
}

Matrix Solve(Matrix A, int n){
	Matrix res;
	for(int i = 0; i < x; i++){
		res.c[i][i] = 1;
	}
	while(n){
		if(n & 1){
			res = Mul(res, A);
		}
		n >>= 1;
		A = Mul(A, A);
	}
	return res;
}

int main(){
	scanf("%d%d%d%d", &n, &b, &k, &x);
	for(int i = 0; i < n; i++){
		scanf("%d", &d[i]);
		cnt[d[i]]++;
	}
	for(int i = 0; i < x; i++){
		for(int j = 0; j < 10; j++){
			tmp.c[i][(i*10+j) % x] += cnt[j];
		}
	}
	Matrix res = Solve(tmp, b);
	printf("%I64d\n", res.c[0][k]);
}
 	 	  		   				   				  			   	