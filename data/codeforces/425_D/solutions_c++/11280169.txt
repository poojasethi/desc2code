#include<cstring>
#include<map>
#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<set>
using namespace std;
#define N 100005
vector<int>P1[N];
int n,block=520,ans;
bool find(int x,int y){
	vector<int>::iterator it=lower_bound(P1[x].begin(),P1[x].end(),y);
	if(it!=P1[x].end()&&(*it)==y)return 1;
	else return 0;
}
int main(){
	scanf("%d",&n);
	for(int i=1,x,y;i<=n;i++){
		scanf("%d%d",&x,&y);
		P1[x].push_back(y);
	}for(int i=0;i<N;i++){
		sort(P1[i].begin(),P1[i].end());
	}for(int i=0;i<N;i++){
		if(P1[i].size()<=block){
			int size=P1[i].size();
			for(int j=0;j<size;j++)
				for(int k=0;k<j;k++){
					int len=P1[i][j]-P1[i][k];
					if(i>=len){
						if(find(i-len,P1[i][j])&&find(i-len,P1[i][k]))
							ans++;
					}
				}
		}else{
			for(int j=0;j<i;j++){
				int len=i-j;
				for(int k=0;k<P1[j].size();k++){
					if(find(j,P1[j][k]+len)&&find(i,P1[j][k])&&find(i,P1[j][k]+len))
						ans++;
				}
			}
		}
	}cout<<ans<<endl;
}
