#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;
const int maxn=100001;
const int N=1000;
vector<int>vt[maxn]; 
int n;
void init(){
	for(int i=0;i<maxn;i++)
		 vt[i].clear();
}
bool judge(int vtt,int val){
	/*
if(vt[vtt].size()<val) return false;*/
	if(vtt>maxn) return false;
	return binary_search(vt[vtt].begin(),vt[vtt].end(),val);
}
int main(){
	int i,j,k,a,b;
	while(scanf("%d",&n)!=EOF){
		init();
		for(i=1;i<=n;i++){
			scanf("%d%d",&a,&b);
			vt[a].push_back(b);
		}
		for(i = 0;i < maxn;i ++)
			sort(vt[i].begin(),vt[i].end());
		
		__int64 ans=0;
		for(i = 0;i < maxn ;i ++){
			if(vt[i].size()<N){
				for(j = 0;j < vt[i].size();j ++){
					for(k = j+1;k < vt[i].size();k ++){
						int len=vt[i][k]-vt[i][j];
						if(judge(i+len,vt[i][j]) && judge(i+len,vt[i][k]))
							ans++;
					}
				}
			}else{
				for(k=i+1;k<maxn;k ++){
					for(j =0;j<vt[k].size();j++){
						int len=k-i;
						if(judge(i,vt[k][j])&&judge(i,vt[k][j]+len)&&judge(k,vt[k][j]+len))
							ans++;
					}
				}
			}
		}
		printf("%I64d\n",ans);
	}
}

 	 				 		      	    	 	  	