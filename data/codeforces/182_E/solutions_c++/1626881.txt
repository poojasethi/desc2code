#include <vector>
#include <iostream>
using namespace std;

#define M 1000000007

struct Plank {
	int w;
	int h;
	int t;

	Plank(int w_, int h_, int t_): w(w_), h(h_), t(t_) {
	}
};

int d[3000 + 1][2*100];

int main() {
	int n, l, a, b;
	vector<Plank> p;
	int s;

	cin >> n >> l;
	for (int i = 0; i < n; ++i) {
		cin >> a >> b;
		p.push_back(Plank(a, b, i));
		if (a != b)
			p.push_back(Plank(b, a, i));
	}

	for (int t = 0; t < (int)p.size(); ++t)
		d[0][t] = 1;

	for (int l_ = 1; l_ <= l; ++l_)
		for (int t = 0; t < (int)p.size(); ++t)
			if (p[t].w > l_)
				d[l_][t] = 0;
			else if (p[t].w == l_)
				d[l_][t] = 1;
			else {
				d[l_][t] = 0;
				for (int t_ = 0; t_ < (int)p.size(); ++t_)
					if (p[t_].t != p[t].t && p[t_].h == p[t].w)
						d[l_][t] = (d[l_][t] + d[l_ - p[t].w][t_])%M;
			}

	s = 0;
	for (int t = 0; t < (int)p.size(); ++t)
		s = (s + d[l][t])%M;

	cout << s;

	return 0;
}
