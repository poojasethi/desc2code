#include<iostream>
#include<cstdio>
#include<algorithm>
using namespace std;
const int N=2020,M=2020,Changed=-1;
int n,m,k,up[N][M]={},down[N][M]={},ans[N<<2]={};
int q1[M]={},q2[M]={},v1[M]={},v2[M]={};
char ch[N][M]={};
void limit(int p,int l,int r)
{
	if(l==r)
		return;
	int mid=(l+r)>>1;
	up[mid][p]=min(up[mid][p],mid-l+1);
	down[mid+1][p]=min(down[mid+1][p],r-mid);
	limit(p,l,mid),limit(p,mid+1,r);
}
void update(int p)
{
	for(int i=1;i<=n;++i)
		up[i][p]=ch[i][p]=='X' ? 0 : up[i-1][p]+1;
	for(int i=n;i>=1;--i)
		down[i][p]=ch[i][p]=='X' ? 0 : down[i+1][p]+1;
	limit(p,1,n);
}
void init()
{
	scanf("%d%d%d\n",&n,&m,&k);
	for(int i=1;i<=n;++i)
		scanf("%s\n",ch[i]+1);
	for(int j=1;j<=m;++j)
		update(j);
	fill(ans,ans+(N<<2),Changed);
}
int calc(int l,int r,int k)
{
	if(ans[k]!=Changed)
		return ans[k];
	if(l==r)
	{
		for(int j=1;j<=m;++j)
			if(ch[l][j]=='.')
				return 1;
		return 0;
	}
	int mid=(l+r)>>1;
	ans[k]=max(calc(l,mid,k<<1),calc(mid+1,r,(k<<1)+1));
	int h1=1,t1=0,h2=1,t2=0,pos=1;
	for(int j=1;j<=m;++j)
	{
		while(pos==j || pos-j <= v1[h1]+v2[h2])
		{
			ans[k]=max(ans[k],pos-j);
			while(h1<=t1 && up[mid][pos]<=v1[t1])
				--t1;
			++t1,q1[t1]=pos,v1[t1]=up[mid][pos];
			while(h2<=t2 && down[mid+1][pos]<=v2[t2])
				--t2;
			++t2,q2[t2]=pos,v2[t2]=down[mid+1][pos];
			++pos;
		}
		if(q1[h1]==j)
			++h1;
		if(q2[h2]==j)
			++h2;
	}
	return ans[k];
}
void work()
{
	calc(1,n,1);
	int x,y;
	while(k--)
	{
		scanf("%d%d",&x,&y);
		ch[x][y]='X';
		update(y);
		int l=1,r=n,k=1;
		ans[k]=Changed;
		while(l!=r)
		{
			int mid=(l+r)>>1;
			if(x<=mid)
				k<<=1,r=mid;
			else
				(k<<=1)+=1,l=mid+1;
			ans[k]=Changed;
		}
		printf("%d\n",calc(1,n,1));
	}
}
int main()
{	
	init();
	work(); 
	return 0;
}