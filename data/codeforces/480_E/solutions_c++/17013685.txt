#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=2010;
struct node
{
	int t,x,y;
}p[N];
int cmp(const node&a,const node&b)
{
	return a.t<b.t;
}
int n,m,x,y,z,K;
int xx[N],yy[N],t[N][N],up[N][N],down[N][N],T[N][N],ans[N],u[N],d[N],q1[N],q2[N];
char ch[N];
void solve(int L,int R)
{
	int i,j,k,cnt=0,mid=(L+R)/2,l1,l2,r1,r2,l=1,r,sum;
	if(L==R)
	{
		for(i=1;i<=m;i++)
		{
			if(T[L][i]) continue;
			if(!t[L][i]) ans[K+1]=max(ans[K+1],1);
			else ans[t[L][i]-1]=max(ans[t[L][i]-1],1);
		}
		return;
	}
	solve(L,mid);
	solve(mid+1,R);
	for(i=L;i<=R;i++)
		for(j=1;j<=m;j++)
			if(T[i][j]) p[++cnt]=(node){T[i][j],i,j};
	p[++cnt]=(node){K+1,0,0};
	sort(p+1,p+cnt+1,cmp);
	for(i=1;i<=m;i++)
	{
		u[i]=min(up[mid][i],mid-L+1);
		d[i]=min(down[mid+1][i],R-mid);
	}
	q1[1]=q2[1]=0;
	for(i=1;i<=cnt;i++)
	{
		sum=r1=r2=0;
		l=l1=l2=1;
		for(j=1;j<=m;j++)
		{
			while(l1<=r1&&u[j]<u[q1[r1]]) r1--;
			q1[++r1]=j;
			q1[r1+1]=0;
			while(l2<=r2&&d[j]<d[q2[r2]]) r2--;
			q2[++r2]=j;
			q2[r2+1]=0;
			while(u[q1[l1]]+d[q2[l2]]<j-l+1)
			{
				if(q1[l1]<q2[l2]&&l1<=r1)
				{
					l=q1[l1]+1;
					l1++;
				}
				else
				{
					l=q2[l2]+1;
					l2++;
				}
			}
			sum=max(sum,j-l+1);
		}
		ans[p[i].t-1]=max(ans[p[i].t-1],sum);
		x=p[i].x;
		y=p[i].y;
		if(x<=mid) u[y]=min(u[y],mid-x);
		else d[y]=min(d[y],x-mid-1);
	}
}
int main()
{
//	freopen("parking.in","r",stdin);
//	freopen("parking.out","w",stdout);
	int a,b,c,i,j;
	scanf("%d%d%d",&n,&m,&K);
	for(i=1;i<=n;i++)
	{
		scanf("%s",ch);
		for(j=0;j<m;j++)
			if(ch[j]=='X') t[i][j+1]=1;	
	}
	for(i=1;i<=n;i++)
		for(j=1;j<=m;j++)
			if(t[i][j]) up[i][j]=0;
			else up[i][j]=up[i-1][j]+1;
	for(i=n;i;i--)
		for(j=1;j<=m;j++)
			if(t[i][j]) down[i][j]=0;
			else down[i][j]=down[i+1][j]+1;
	for(i=1;i<=K;i++)
	{
		scanf("%d%d",&xx[i],&yy[i]);
		T[xx[i]][yy[i]]=i;
	}
	solve(1,n);
	for(i=K;i;i--)
		ans[i]=max(ans[i],ans[i+1]);
	for(i=1;i<=K;i++)
		printf("%d\n",ans[i]);
}