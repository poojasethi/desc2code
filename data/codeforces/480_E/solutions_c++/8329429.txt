#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#define MAXN 2005
using namespace std ;
typedef long long LL ;

struct DSU {
	int fa[MAXN] ;
	int find(int x) {return (fa[x]==x?x:(fa[x]=find(fa[x]))) ;}
} lt[MAXN], rt[MAXN] ;

int N, M, K, get ;
int gl[MAXN], gr[MAXN] ;
char map[MAXN][MAXN] ;
int qx[MAXN], qy[MAXN] ;
int ans[MAXN] ;
int f[MAXN][MAXN] ;

void Upd(int x, int y)
{
	lt[x].fa[y] = lt[x].find(y-1) ;
	rt[x].fa[y] = rt[x].find(y+1) ;
}

int main()
{
	int i, j ;
	scanf("%d %d %d", &N, &M, &K) ;
	for(i = 1; i <= N; i ++)
	{
		scanf("%s", map[i]) ;
		for(j = 1; j <= M+1; j ++)
			lt[i].fa[j] = j, rt[i].fa[j] = j ;
	}	
	for(i = 1; i <= K; i ++)	
	{
		scanf("%d %d", &qx[i], &qy[i]) ;
		map[qx[i]][qy[i]-1] = 'X' ;
	}
	for(i = 1; i <= N; i ++)
		for(j = 1; j <= M; j ++)
			if(map[i][j-1] == '.')
			{
				Upd(i, j) ;
				f[i][j] = min(f[i-1][j-1], min(f[i-1][j], f[i][j-1]))+1 ;
				get = max(get, f[i][j]) ;
			}
	for(i = K; i >= 1; i --)
	{
		ans[i] = get ;
		Upd(qx[i], qy[i]) ;
		for(j = 1; j <= N; j ++)
		{
			gl[j] = qy[i]-lt[j].find(qy[i]) ;
			gr[j] = rt[j].find(qy[i])-qy[i] ;
		}
		for(j = qx[i]; j > 1; j --)
			gl[j-1] = min(gl[j-1], gl[j]), gr[j-1] = min(gr[j-1], gr[j]) ;
		for(j = qx[i]; j < N; j ++)
			gl[j+1] = min(gl[j+1], gl[j]), gr[j+1] = min(gr[j+1], gr[j]) ;
		for(j = 1; j <= qx[i]; j ++)
			while(j+get <= N && j+get >= qx[i] && min(gl[j], gl[j+get])+min(gr[j], gr[j+get])-1 > get) get ++ ;
	} 
	for(i = 1; i <= K; i ++)
		printf("%d\n", ans[i]) ;
	//system("pause") ;
	return 0 ;
}
