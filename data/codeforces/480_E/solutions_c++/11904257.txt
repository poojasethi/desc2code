#include <stdio.h>
#include <algorithm>
#include <memory.h>
#include <vector>
#include <assert.h>
using namespace std;
#define M 2010
char s[M][M];
int a[M][M], sum[M][M], r[M], cnt[M], n, m, Q;

int v[M<<1][M], deg[M<<1];

inline int F(int x, int y, int xx, int yy){
	return !(sum[xx][yy] - sum[x-1][yy] - sum[xx][y-1] + sum[x-1][y-1]);
}

inline bool inside(int x, int y, int xx, int yy, int a, int b){
	return (x <= a && y <= b && a <= xx && b <= yy);
}

int main(){
//	freopen("E.in", "r", stdin);
	scanf("%d %d %d", &n, &m, &Q);
	for (int i = 1; i <= n; i++) scanf("%s", s[i]+1);
	int t = max(n, m);
	for (int i = 1; i <= t; i++) for (int j = 1; j <= t; j++)
		a[i][j] = (i > n || j > m || s[i][j] == 'X') ? 1 : 0;
	n = t;
	for (int i = 1; i <= n; i++) for (int j = 1; j <= n; j++) {
		r[j] = r[j-1] + a[i][j]; sum[i][j] = sum[i-1][j] + r[j];
	}
	for (int d = 1 - n; d < n; d++) {
		int st = max(1, d + 1), en = min(n, d + n);
		int h = st;
		for (int i = st; i <= en; i++) {
			while (h <= n && h - d <= n && F(i, i - d, h, h - d)) h++;
			v[d+n][deg[d+n]++] = h - st; cnt[h-i]++;
		}
	}
	int ans = n, E;
	while (Q--) {
		int x, y;
		scanf("%d %d", &x, &y);
		for (int d = 1 - n; d < n; d++) {
			int st = max(1, d + 1), en = min(n, d + n);
			if (!inside(st, st - d, en, en - d, x, y)) continue;
            int h = max(x-st, y-(st-d));
            int pos = upper_bound(v[n+d], v[n+d] + deg[n+d], h) - v[n+d];
            E = min(x-st, y-st+d); E++; E = min(E, en-st+1);
            for (int i = pos; i < E; i++) {
				cnt[v[n+d][i]-i]--; v[n+d][i] = h; cnt[h-i]++;
            }
		}
		for (int i = ans; i >= 0; i--) if (cnt[i]) {printf("%d\n", i); ans = i; break;}
	}
	return 0;
}
