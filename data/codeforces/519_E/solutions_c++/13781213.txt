#include <vector>
#include <iostream>
#define ll long long
#define f first
#define s second
#define mp make_pair

using namespace std;
const ll Maxn = 111111, log = 18, mod = 1e9 + 7;

ll n, q, sum, c, l, par[Maxn][log], dis[Maxn], sub[Maxn];
vector <ll> list[Maxn];
bool color[Maxn];

void dfs(ll v){
	color[v] = true, sub[v]++;
	for(ll i = 0; i < list[v].size(); i++){
		ll u = list[v][i];
		if(!color[u]){
			dis[u] = dis[v] + 1;
			par[u][0] = v;
			dfs(u);
			sub[v] += sub[u];
		}
	}
}

ll lca(ll v, ll u){
	if(dis[u] > dis[v])	swap(v, u);
	ll d = dis[v] - dis[u];
	for(ll j = log - 1; j >= 0; j--)	if(d & (1 << j))	v = par[v][j];
	if(v == u)	return v;
	for(ll j = log - 1; j >= 0; j--)	if(par[v][j] != par[u][j])	u = par[u][j], v = par[v][j];
	return par[v][0];
}

int main(){
	cin >> n;
	for(ll i = 1; i < n; i++){
		ll v, u;
		cin >> v >> u;
		list[v].push_back(u);
		list[u].push_back(v);
	}
	dfs(1);
	for(ll j = 1; j < log; j++)	for(ll i = 1; i <= n; i++)	par[i][j] = par[par[i][j - 1]][j - 1];
	cin >> q;
	cout << "\n\n";
	for(ll i = 1; i <= q; i++){
		ll v, u, p, d;
		cin >> v >> u;
		p = lca(v, u);
		d = dis[v] + dis[u] - dis[p] * 2;
		if(u == v){
			cout << n << endl;
		}else{
			if(d % 2 == 0){
				if(dis[u] > dis[v])	swap(v, u);
				d >>= 1, d--;
				if(dis[v] == dis[u]){
					for(int j = log - 1; j >= 0; j--)	if(d & (1 << j)) v = par[v][j], u = par[u][j];
					cout << n - sub[v] - sub[u] << endl;
				}else{
					for(int j = log - 1; j >= 0; j--)	if(d & (1 << j)) v = par[v][j];
					cout << sub[par[v][0]] - sub[v] << endl;
				}
			}else{
				cout << 0 << endl;
			}
		}
	}
	return 0;
}
	   			  					 			  	 	   	   	