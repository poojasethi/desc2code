//gskhirtladze

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>

#define  pb push_back
#define N 100020

using namespace std;

int in[N],out[N],P[N][19],timer;
vector < int > g[N];
int all[N],n,i,x,y,k,h[N],a,b,m;

void dfs(int p,int u)
 {
  P[u][0]=p;
  h[u]=h[p]+1;
  for (int k=1;k<=18;k++)
   P[u][k]=P[P[u][k-1]][k-1];
  in[u]=++timer;
  for (int i=0;i<g[u].size();i++)
   if (g[u][i] != p)
    { dfs(u,g[u][i]); all[u]+=all[g[u][i]]; }
  all[u]++;
  out[u]=++timer;
 }

bool parent(int A,int B)
 {
  return (in[A] >= in[B] && out[B] >= out[A]);
 }

int lca(int A,int B)
 {
  if (parent(A,B)) return B;
  for (k=18;k>=0;k--)
   if (P[B][k] && !parent(A,P[B][k]) ) B=P[B][k];
  return P[B][0];
 }

main()
 {
  scanf("%d",&n);
  for (i=1;i<n;i++)
   {
     scanf("%d%d",&a,&b);
     g[a].pb(b);
     g[b].pb(a);
   }
  dfs(0,1);
  scanf("%d",&m);
  while (m--)
   {
    scanf("%d%d",&x,&y);
    if (x == y)
     { cout<<n<<endl; continue; }
    k=lca(x,y);
    int dist=h[x]+h[y]-2*h[k];
    if (dist%2 == 1)
     { cout<<0<<endl; continue; }
    if (h[x] > h[y]) swap(x,y);
    dist/=2;
    int C=y;
    for (int K=18;K>=0;K--)
     if (P[C][K] && dist-(1<<K) > 0) { C=P[C][K]; dist-=(1<<K); }
    if (h[x] != h[y])
     {
      cout<<all[P[C][0]]-all[C]<<endl;
      continue;
     }
    int B=x;
    dist=(h[x]+h[y]-2*h[k])/2;
    for (int K=18;K>=0;K--)
     if (P[B][K] && dist-(1<<K) > 0) { B=P[B][K]; dist-=(1<<K); }
    cout<<n-all[B]-all[C]<<endl;
   }
 }
