#include <bits/stdc++.h>
#define MAX (1<<17)
#define MBT 17
using namespace std;

vector<int> g[MAX];
int n,m,p[MAX][MBT],d[MAX],sz[MAX];

void dfs(int u){
    sz[u] = 1;
    for (int i=0;i<(int)g[u].size();i++){
        int v = g[u][i];
        if (v!=p[u][0]){
            p[v][0] = u;
            d[v] = d[u]+1;
            for (int i=1;i<17;i++)
                p[v][i] = p[p[v][i-1]][i-1];
            dfs(v);
            sz[u] += sz[v];
        }
    }
}

int get(int u,int d){
    for (int i=0;i<MBT;i++)
        if (d&(1<<i)) u = p[u][i];
    return u;
}

int LCA(int u,int v){
    v = get(v,d[v]-d[u]);
    if (u==v) return u;
    for (int i=MBT-1;i>=0;i--)
    if (p[v][i]!=p[u][i]){
        u = p[u][i];
        v = p[v][i];
    }
    return p[u][0];
}

int main()
{
    int u,v;
    cin>>n;
    for (int i=1;i<n;i++){
        cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    for (int i=0;i<=MBT;i++) p[1][i] = 1;
    dfs(1);
    cin>>m;
    while(m--){
        cin>>u>>v;
        if (u==v) cout<<n<<endl;
        else{
            if (d[u]>d[v]) swap(u,v);
            int anc = LCA(u,v);
            int dist = d[u]+d[v]-d[anc]-d[anc];
            if (dist&1) cout<<'0'<<endl;
            else if (d[u]==d[v]){
                u = get(u,dist/2-1);
                v = get(v,dist/2-1);
                cout<<n-sz[u]-sz[v]<<endl;
            }else{
                v = get(v,dist/2-1);
                cout<<sz[p[v][0]]-sz[v]<<endl;
            }
        }
    }


    return 0;
}
