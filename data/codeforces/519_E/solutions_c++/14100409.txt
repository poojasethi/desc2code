#include<bits/stdc++.h>

using namespace std;

#define mp make_pair
#define pb push_back
#define st first
#define nd second
#define MAX (int)1e5+6

typedef long long ll;
typedef long long int lli;
typedef pair < int,int > pii;

int n,t;
int lvl[MAX];
int m[MAX];
int lca[MAX][20];

vector < int > v[MAX];

int dfs(int x,int parent,int level)
{
	int sum=1;
	lvl[x] = level;
	lca[x][0] = parent;
	for(int i=0; i<v[x].size(); i++)
		if(v[x][i] != parent)
			sum+=dfs(v[x][i],x,level+1);
	m[x] = sum;
	return sum;
}


int main ()
{
	cin>>n;

	for(int i=1; i<=n-1; i++)
	{
		int a,b;
		scanf("%d %d",&a,&b);
		v[a].pb(b);
		v[b].pb(a);
	}
		
	dfs(1,1,0);

	for(int i=1; i<=18; i++)
		for(int j=1; j<=n; j++)
			lca[j][i] = lca[lca[j][i-1]][i-1];
	
	cin>>t;
	while(t--)
	{
		int a,b;		
		
		scanf("%d %d",&a,&b);
		if(a==b) {printf("%d\n",n);continue;}
		if(lvl[a]<lvl[b]) swap(a,b);

		int x=a,y=b,z;

		
		for(int i=18; i>=0; i--)
	   		 if(lvl[a]-lvl[b] & (1<<i))
				 x = lca[x][i];

		for(int i=18;i>=0;i--)
			if(lca[x][i] != lca[y][i])
				x = lca[x][i],
				  y = lca[y][i];
		
		z = x==y ? x : lca[x][0];
		int lvl_a  = lvl[a] - lvl[z];
		int lvl_b  = lvl[b] - lvl[z];
		int middle = a;
		int dis    = lvl_a + lvl_b;
		int ans;
		
		for(int i=18; i>=0; i--)
			if((dis/2) & (1<<i))
				middle = lca[middle][i];

		if(dis & 1) ans = 0;
		
		else if(middle == lca[x][0])
			ans = n - (m[x]+m[y]);

		else
		{
			int k=a;	
			for(int i=18; i>=0; i--)
				if((lvl[a] - lvl[middle] - 1) & (1<<i))
					k = lca[k][i];
			ans = m[middle] - m[k];
		//	printf("--------->x = %d   y=%d  z=%d  middle=%d k=%d  dis=%d\n",x,y,z,middle,k,dis);
		}	
		printf("%d\n",ans);
	}
}
