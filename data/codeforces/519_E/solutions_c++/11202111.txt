#include <cstdio>
#include <vector>
#define N_Max 123456

using namespace std;

int n, m, cnt, a, b;
int dep[N_Max], size[N_Max], tin[N_Max], tout[N_Max];
int anc[N_Max][3*12];
vector<int> G[N_Max];

void dfs(int v, int par, int d) {
	dep[v] = d;
	size[v] = 1;
	tin[v] = cnt++;

	anc[v][0] = par;
	for (int i = 1; i <= 30; i++)
		anc[v][i] = anc[anc[v][i-1]][i-1];

	for (int i = 0; i < G[v].size(); i++) {
		int y = G[v][i];
		if (y != par) {
			dfs(y, v, d+1);
			size[v] += size[y];
		}
	}

	tout[v] = cnt++;
}

void init() {
	scanf("%d", &n);
	for (int i = 1; i < n; i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		G[x].push_back(y);
		G[y].push_back(x);
	}

	cnt = 0;
	dfs(1, 1, 0);
}

bool find(int a, int b) {
	return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int go_up(int a, int b) {
	for (int i = 30; i >= 0; i--)
		if (!find(anc[a][i], b))  a = anc[a][i];
	
	return a;
}

int lca(int a, int b) {
	if (find(a, b))
		return a;
	else if (find(b, a))
		return b;
	else
		return anc[go_up(a,b)][0];
}

int query(int a, int b) {
	if (a == b)  return n;

	int par = lca(a, b);
	if (dep[a] - dep[par] == dep[b] - dep[par]) {
		a = go_up(a, par);
		b = go_up(b, par);

		return n-size[a]-size[b];
	}

	if (dep[a] < dep[b]) {
		a ^= b;
		b ^= a;
		a ^= b;
	}

	int dis = dep[a] + dep[b] - 2*dep[par];
	if (dis&1)  return 0;
	dis /= 2;

	int y = a;
	for (int i = 30; i >= 0; i--)
		if (dep[a] - dep[anc[y][i]] < dis)
			y = anc[y][i];

	return size[anc[y][0]] - size[y];
}

void solve() {
	scanf("%d", &m);
	for (int i = 1; i <= m; i++) {
		scanf("%d%d", &a, &b);
		printf("%d\n", query(a, b));
	}
}

int main() {
	init();
	solve();
}
