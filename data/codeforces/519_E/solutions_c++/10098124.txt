//in the name of God

#include <iostream>
#include <vector>
using namespace std;

int n, m, lg, par[20][111111], dis[111111], sub[111111];
vector<int> g[111111];

void dfs(int p, int u)
{
	dis[u] = dis[p]+1;
	par[0][u] = p;
	for(int i=1; i<lg; i++)
		par[i][u] = par[i-1][par[i-1][u]];

	for(int i=0; i<g[u].size(); i++)
		if(g[u][i] != p)
		{
			dfs(u, g[u][i]);
			sub[u] += sub[g[u][i]];
		}
	sub[u]++;
}

int lca(int u, int v)
{
	if(dis[v] > dis[u])
		swap(u, v);

	for(int i=lg; i>=0; i--)
		if(dis[u]-(1<<i) >= dis[v])
			u = par[i][u];

	for(int i=lg; i>=0; i--)
		if(par[i][u] != par[i][v])
			u = par[i][u], v = par[i][v];

	if(u != v)
		u = par[0][u];
	return u;
}

int findpar(int u, int d)
{
	for(int i=lg; i>=0; i--)
		if((1<<i) <= d)
		{
			d -= (1<<i);
			u = par[i][u];
		}
	return u;
}

int main()
{
	cin >> n;
	while((1<<lg) <= n)
		lg++;
//	lg++;

	for(int i=1; i<n; i++)
	{
		int u, v;
		cin >> u >> v;
		u--, v--;
		g[u].push_back(v), g[v].push_back(u);
	}

	dis[0] = -1;
	dfs(0, 0);



	cin >> m;
	while(m--)
	{
		int u, v, p;
		cin >> u >> v;
		u--, v--;
		p = lca(u, v);

		int d = dis[u]+dis[v]-2*dis[p];

		if(d%2 == 1)
		{
			cout << 0 << endl;
			continue;
		}

		if(d == 0)
		{
			cout << n << endl;
			continue;
		}

		if(dis[v] > dis[u])
			swap(u, v);
		d /= 2;

		p = findpar(u, d);

		if(dis[u] == dis[v])
		{
			u = findpar(u, d-1);
			v = findpar(v, d-1);

			cout << n-sub[u]-sub[v] << endl;
		}
		else
		{
			u = findpar(u, d-1);
			cout << sub[p]-sub[u] << endl;
		}
	}

	return 0;
}

