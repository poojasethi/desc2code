#include<iostream>
#include<cstring>
#include<algorithm>
#include<cstdio>
#include<queue>
#define inf 0x3f3f3f3f
#define maxn 100005
using namespace std;
int n,m,x,y;
struct edge{
	int to;
	int next;
}e[maxn<<1];
int h[maxn],tp;
inline void ae(int u,int v)
{
	e[++tp].to=v;e[tp].next=h[u];h[u]=tp;
}
int siz[maxn],dep[maxn],fa[maxn][20];
void dfs(int u,int f,int d)
{
	fa[u][0]=f;dep[u]=d;siz[u]=1;
	for(int v,i=h[u];e[i].to;i=e[i].next)
	{
		v=e[i].to;
		if(v!=f) 
		{
			dfs(v,u,d+1);
			siz[u]+=siz[v];
		}
	}
}
void pre_LCA()
{
	for(int j=1;(1<<j)<=n;j++)
	{
		for(int i=1;i<=n;i++)
		if(dep[i]>=(1<<j)-1)
		fa[i][j]=fa[fa[i][j-1]][j-1];
	}
}
int lca(int x,int y)
{
	int t=dep[x]-dep[y];
	for(int i=0;(1<<i)<=t;i++)
	if(t&(1<<i)) x=fa[x][i];
	for(int i=19;i>=0;i--)
	if(fa[x][i]!=fa[y][i])
	x=fa[x][i],y=fa[y][i];
	if(x==y) return x;
	return fa[x][0];
}
int solve(int x,int y)
{
	if(x==y) return n;
	if(dep[x]<dep[y]) swap(x,y);
	int f=lca(x,y),len;
	if(f!=y) len=dep[x]+dep[y]-2*dep[f];
	else len=dep[x]-dep[y];
	if(len&1) return 0;
	len>>=1;
	for(int i=0;(1<<i)<=len-1;i++)
	if((len-1)&(1<<i)) x=fa[x][i];
	int t=fa[x][0];
	if(f==t)
	{
		len=dep[y]-dep[t];
        for(int i=0;(1<<i)<=len-1;i++)
		if((len-1)&(1<<i)) y=fa[y][i];
        return n-siz[x]-siz[y];
	}
	return siz[t]-siz[x];
}
int main()
{
	cin>>n;
	for(int i=1;i<n;i++)
	{
		scanf("%d%d",&x,&y);
		ae(x,y);
		ae(y,x); 
	}
	dfs(1,0,0);
	pre_LCA();
	cin>>m;
	while(m--)
	{
		scanf("%d%d",&x,&y);
		printf("%d\n",solve(x,y));
	}
	return 0;
}
