#include<bits/stdc++.h>
using namespace std ;
int n ;
vector<int> v[100009] ;

int sz[100009] ,d[100009],u[100009][20] ;

int dfs(int cur,int prev=0){
u[cur][0]= prev ;
sz[cur]= 1 ;
d[cur]= d[prev]+1 ;
for(int i =0;i<v[cur].size();i++)
{
    if(v[cur][i]!=prev)
    {
        sz[cur]+= dfs(v[cur][i],cur) ;
    }
}
return sz[cur] ;
}
int up(int x,int val){
 for(int i = 18;i>=0;i--){
   if((1<<i)<=val) {
    val  = val - (1<<i) ;
    x = u[x][i] ;}
 }
 return x ;
}
int main()
{
    int n ;
    cin>>n ;
    int x,y ;
    for(int i =1;i<n;i++)
    {
        cin>>x>>y ;
        v[x].push_back(y);
        v[y].push_back(x) ;
    }
    dfs(1) ;
    for(int i =1;i<=18;i++)
    {
        for(int j = 1;j<=n;j++){
          u[j][i] = u[u[j][i-1]][i-1] ;
        }
    }
    int m ;
    cin>>m ;
    for(int k = 1;k<=m;k++)
    {
        cin>>x>>y ;
        if(x==y){cout<<n<<endl ;continue;}
        if(d[x]<d[y]) swap(x,y) ;
        int z = up(x,d[x]-d[y]) ;
        int w = y ;
        if(z!=w){
        for(int i =18;i>=0;i--){if(u[z][i]!=u[w][i] )
        {
             w = u[w][i] ;
             z = u[z][i] ;
         }
        }
        z = u[z][0] ;
        }
      int dist = d[x]+d[y] - 2*d[z] ;
      if(dist&1) {cout<<"0"<<endl ;continue;}
      else{
        int ctr = up(x,dist/2 ) ;
        if(ctr!= z){
          int ans = sz[ctr] - sz[up(x,dist/2 - 1)] ;
          cout<<ans<<endl ;
         }
         else{
          int ans = n - sz[up(y,dist/2 - 1)] - sz[up(x,dist/2 - 1)] ;
          cout<<ans<<endl ;
        }
      }
    }
}

