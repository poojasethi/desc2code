#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MAXN = 1E5 + 5;
const int MAXH = 18;

int N, m;
vector<int> adj[MAXN];
int s[MAXN];
int depth[MAXN];
int M[MAXN][MAXH];

void dfs(int cur, int p) {
	depth[cur] = depth[p] + 1;
	s[cur] = 1;
	M[cur][0] = p;
	for (int i=0; i<adj[cur].size(); i++) {
		if (adj[cur][i] != p) {
			dfs(adj[cur][i], cur);
			s[cur] += s[adj[cur][i]];
		}
	}
}

void initlca() {
	for (int i=1; i<MAXH; i++) {
		for (int j=0; j<N; j++) {
			M[j][i] = M[M[j][i-1]][i-1];
		}
	}
}

int lca(int x, int y) {
	if (depth[x] < depth[y]) {
		swap(x,y);
	}
	int diff = depth[x] - depth[y];
	for (int i = MAXH; i>=0; i--) {
		if (1<<i & diff) {
			x = M[x][i];
		}
	}
	if (x==y) return x;
	for (int i = MAXH-1; i>=0; i--) {
		if (M[x][i] != M[y][i]) {
			y = M[y][i];
			x = M[x][i];
		}
	}
	return M[y][0];
}

int par(int x, int d) {
	for (int i=0; i<MAXH; i++) {
		if (1<<i & d) {
			x = M[x][i];
		}
	}
	return x;
}

int main() {
	cin>>N;
	for (int i=0; i<N-1; i++) {
		int a,b;
		cin>>a>>b; a--; b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	dfs(0, 0);
	initlca();

	cin>>m;
	for (int i=0; i<m; i++) {
		int a,b; cin>>a>>b; a--; b--;
		if (a==b) {
			cout<<N<<endl;
			continue;
		}
		int l = lca(a,b);
		int d = depth[a] + depth[b] - 2*depth[l];
		if (d%2 == 1) {
			cout<<"0"<<endl;
			continue;
		}
		if (depth[a] - depth[l] < depth[b] - depth[l]) swap(a,b);
		int mid = par(a, d/2);
		if (mid == l) {
			cout << s[0] - (s[par(a,d/2-1)] + s[par(b,d/2-1)]) <<endl;
		} else {
			cout << s[mid] - (s[par(a,d/2-1)]) << endl;
		}
	}
}