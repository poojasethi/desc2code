#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 1e5 + 10, MAXLG = 20;

int par[MAXLG][MAXN], d[MAXN], sub[MAXN];

vector<int> ng[MAXN];

void dfs(int x, int p, int depth) {
	par[0][x] = p;
	d[x] = depth;
	sub[x] = 1;
	for (int i = 0; i < ng[x].size(); i++) {
		int u = ng[x][i];
		if (u == p)
			continue;
		dfs(u, x, depth + 1);
		sub[x] += sub[u];
	}
}

int getPar(int x, int k) {
	for (int i = 0; i < MAXLG; i++)
		if (k & (1 << i))
			x = par[i][x];
	return x;
}

int lca(int x, int y) {
	if (d[x] > d[y])
		swap(x, y);
	y = getPar(y, d[y] - d[x]);
	if (y == x)
		return x;
	for (int i = MAXLG - 1; i >= 0; i--)
		if (par[i][x] != par[i][y])
			x = par[i][x], y = par[i][y];
	return par[0][x];
}

int getD(int x, int y) {
	return d[x] + d[y] - 2 * d[lca(x, y)];
}

int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int x, y;
		cin >> x >> y;
		x--, y--;
		ng[x].push_back(y);
		ng[y].push_back(x);
	}
	dfs(0, -1, 0);
	for (int j = 1; j < MAXLG; j++)
		for (int i = 0; i < n; i++)
			par[j][i] = par[j - 1][i] == -1 ? -1 : par[j - 1][par[j - 1][i]];
	int m;
	cin >> m;
	while (m--) {
		int a, b;
		cin >> a >> b;
		a--, b--;
		if (a == b) {
			cout << n << '\n';
			continue;
		}
		int c = getD(a, b);
		if (c % 2) {
			cout << 0 << '\n';
			continue;
		}
		if (d[a] < d[b])
			swap(a, b);
		c /= 2;
		int ans = 0;
		if (d[a] == d[b])
			ans = n - sub[getPar(a, c - 1)] - sub[getPar(b, c - 1)];
		else
			ans = sub[getPar(a, c)] - sub[getPar(a, c - 1)];
		cout << ans << '\n';
	}
	return 0;
}
