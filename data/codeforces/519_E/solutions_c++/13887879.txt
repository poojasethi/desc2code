#include <bits/stdc++.h>
using namespace std;

const int maxn = 1e5+123;

int n,m,depth[maxn],child[maxn],anc[maxn][20];
vector < int > way[maxn];

void dfs( int node , int dad ){
	anc[node][0] = dad;
	depth[node] = depth[dad] + 1;
	child[node] = 1;
	for( int i=0 ; i < (int)way[node].size() ; i++ ){
		int adj = way[node][i];
		if( adj == dad )
			continue;
		dfs( adj , node );
		child[node] += child[adj];
	}
}

int lca( int a , int b ){
	if( depth[a] < depth[b] )
		swap(a,b);
	for( int i=19 ; i > -1 ; i-- )
		if( depth[a] - (1<<i) >= depth[b] )
			a = anc[a][i];
	if( a == b )
		return a;
	for( int i=19 ; i > -1 ; i-- )
		if( anc[a][i] != anc[b][i] )
			a = anc[a][i] , b = anc[b][i];
	return anc[a][0];
}

int ancestor( int a , int b ){
	for( int i=19 ; i > -1 ; i-- )
		if( (1<<i) & b )
			a = anc[a][i];
	return a;
}

int main(){
	
	scanf("%d",&n);
	
	for( int i=1,a,b ; i < n ; i++ ){
		scanf("%d%d",&a,&b);
		way[a].push_back(b);
		way[b].push_back(a);
	}
	
	scanf("%d",&m);
	
	dfs( 1 , 0 );
	
	for( int i=1 ; i < 20 ; i++ )
		for( int k=1 ; k <= n ; k++ )
			anc[k][i] = anc[anc[k][i-1]][i-1];
	
	for( int i=1,a,b ; i <= m ; i++ ){
		scanf("%d%d",&a,&b);
		int x = lca(a , b);
		int dist = depth[a] + depth[b] - depth[x] - depth[x];
		
		if( dist & 1 ){
			printf("0\n");continue;}
		
		if( depth[a] == depth[b] ){
			printf("%d\n",n - child[ancestor(a , dist/2-1)] - child[ancestor(b , dist/2-1)]);
			continue;
		}
		
		if( depth[a] < depth[b] )
			swap(a,b);
		
		printf("%d\n",child[ancestor(a , dist/2)] - child[ancestor(a , dist/2-1)]);
	}
	
	return 0;
}
