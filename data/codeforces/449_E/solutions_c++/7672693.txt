#include <cstdio>
#include <algorithm>

using namespace std;

typedef long long int64;

const int maxn = 1e6;
const int mod = 1e9 + 7;

int flag[maxn + 10];
int pri[maxn + 10], pnum;
int phi[maxn + 10];

int f[maxn + 10];
int fs1[maxn + 10], fs2[maxn + 10], fs3[maxn + 10];

void inc(int& a, int b) {
    if (a += b, a >= mod) a -= mod;
}
void dec(int& a, int b) {
    if (a -= b, a < 0) a += mod;
}
void sieve() {
    phi[1] = 1;
    for (int i = 2; i <= maxn; ++i) {
        if (!flag[i]) {
            pri[++pnum] = i;
            phi[i] = i - 1;
        }
        for (int j = 1; j <= pnum; ++j) {
            int t = i * pri[j];
            if (t > maxn) break;
            flag[t] = 1;
            if (i % pri[j] == 0) {
                phi[t] = phi[i] * pri[j];
                break;
            } else {
                phi[t] = phi[i] * (pri[j] - 1);
            }
        }
    }
}
int main() {
    sieve();
    for (int g = 1; g <= maxn; ++g)
        for (int L = g; L <= maxn; L += g) {
            inc(f[L], (int64)g * phi[L / g] % mod);
        }
    for (int L = 1; L <= maxn; ++L) {
        f[L] = f[L] * 2 % mod;
        inc(f[L], ((int64)L * L % mod - L * 2  + mod) % mod * L % mod);
        dec(f[L], (int64)L * L % mod * (L + 1) % mod);
        inc(f[L], (int64)L * (L + 1) * (2 * L + 1) / 3 % mod);
    }
    for (int i = 1; i <= maxn; ++i) {
        fs1[i] = fs1[i - 1], inc(fs1[i], f[i]);
        fs2[i] = fs2[i - 1], inc(fs2[i], (int64)f[i] * i % mod);
        fs3[i] = fs3[i - 1], inc(fs3[i], (int64)f[i] * i % mod * i % mod);
    }

    int T, n, m;
    for (scanf("%d", &T); T--; ) {
        scanf("%d %d", &n, &m), ++n, ++m;
        int ans = 0;
        inc(ans, (int64)n * m % mod * fs1[min(n, m) - 1] % mod);
        dec(ans, (int64)(n + m) * fs2[min(n, m) - 1] % mod);
        inc(ans, fs3[min(n, m) - 1]);
        printf("%d\n", ans);
    }
}