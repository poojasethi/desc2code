#include<iostream>
#include<algorithm>

#define WAIT cout<<flush, system("PAUSE")
using namespace std;
typedef long long ll;
#define MAX 1100100
#define MOD 1000000007

ll Q, N, M;
ll lp[MAX], phi[MAX], SF[MAX];
ll X, sol;
ll sum1[MAX], sum2[MAX], sum3[MAX];

void add(ll&x, ll y){
    x = (x+y)%MOD;
    while(x<0)   x+=MOD;
    while(x>MOD) x-=MOD;
}

//SUM(1, L) gcd(L, i)
ll F(ll L){
    ll ret = 0;
    for(ll d=1; d*d<=L; d++) if (L%d==0){
        add(ret, d*phi[L/d]);
        
        if (L/d != d)
            add(ret, (L/d)*phi[d]);
    }
    return ret;
}

ll mpow(ll a, ll b){
    ll ret=1;
    while(b>0){
        if (b&1) ret = (ret*a)%MOD;
        a = (a*a)%MOD;
        b /= 2;
    }
    return ret;
}

int main(){
   ios_base::sync_with_stdio(0);
   cin.tie(0);
   
   for(ll I=2; I<MAX; I++) if (!lp[I]) 
      for(ll K=I; K<MAX; K+=I)
         if (!lp[K]) lp[K]=I;
         
   phi[1] = 1;
   for(ll I=2; I<MAX; I++){
      ll b = I;
      ll a = 1;
      while(b%lp[I]==0) 
         b/=lp[I], a*=lp[I];
      
      if (b==1) phi[I]=I-I/lp[I];
      else      phi[I]=phi[a]*phi[b];
   }
   
   //for(ll L=1; L<MAX; L++) SF[L]=F(L);
   for(int I=1; I<MAX; I++)
    for(int K=I; K<MAX; K+=I) SF[K] += phi[I]*(K/I);
   
   for(ll L=1; L<MAX; L++){
        ll s1=0, s2=0, s3=0;
        
        add(s1, L*(L+1));
        s1 = (s1*(2*L+1))%MOD;
        s1 = (s1*mpow(3, MOD-2))%MOD;
        
        add(s1, - 3*L*L);
        add(s1, 2*SF[L]);
        
        add(s2, L*s1);
        add(s3, L*s2);
        
        add(sum1[L], sum1[L-1]+s1);
        add(sum2[L], sum2[L-1]+s2);
        add(sum3[L], sum3[L-1]+s3);
    }
   
   
   cin >> Q;
   while(Q--){
      cin >> N >> M;
      if (N>M) swap(N, M);
      ll iN=N+1;
      ll iM=M+1;
      
      sol = 0;
      add(sol, sum1[N]*iN);
        sol = (sol*iM)%MOD;
        add(sol, - sum2[N]*iN);
        add(sol, - sum2[N]*iM);
        add(sol, + sum3[N]);
        
        cout << sol << "\n";
   }
   //WAIT;
}
// should AC
/*
1000
1000000 1000000
64319188
*/








