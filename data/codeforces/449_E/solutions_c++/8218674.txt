#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#define N 1000001
using namespace std;
typedef long long ll;
const ll mod = 1000000007;
ll n,m,i,j,k,x,y,z,ans;
ll f[11][11];
ll phi[N + 5];
ll gcd[N + 5];
ll a[N + 5];
ll b[N + 5];
ll c[N + 5];
ll is[N + 5];
ll prime[N + 5];
ll tot = 0;

ll getint(){
	ll ret = 0;
	char ch = getchar();
	while (ch < '0' || ch > '9') ch = getchar();
	while (ch >= '0' && ch <= '9'){
		ret = ret * 10 + ch - '0';
		ch = getchar();
	}
	return ret;
}  

int main()
{
    n = getint();

	phi[1] = 1;
	for (i = 2; i <= N; i++){
		if (!is[i]){
			prime[tot++] = i;
			phi[i] = i - 1;
		}
		for (j = 0; j < tot; j++){
			if (i * prime[j] > N) break;
			is[i * prime[j]] = 1;
			if (i % prime[j] == 0){
				phi[i * prime[j]] = phi[i] * prime[j];
				break;
			}
			else phi[i * prime[j]] = phi[i] * (prime[j] - 1);
		}
	}

	/*for (i = 1; i <= N; i++) phi[i] = i;
    for (i = 1; i <= N; i++) 
		for (j = i + i; j <= N; j += i) 
			phi[j] -= phi[i];*/

	for (i = 1; i <= N; i++)
		for (j = i; j <= N; j += i)
			gcd[j] = (gcd[j] + i * phi[j / i]) % mod;

	for (i = 1; i <= N; i++) gcd[i] = (gcd[i] * 2 % mod + i * (i + 1) * (2 * i + 1) / 3 - 3 * i * i) % mod;
		for (i = 1; i <= N; i++){
			a[i] = (a[i - 1] + gcd[i]) % mod;
			b[i] = (b[i - 1] + i * gcd[i] % mod) % mod;
			c[i] = (c[i - 1] + i * i % mod * gcd[i] % mod) % mod;
		}

	for (i = 1; i <= n; i++){
		x = getint(),y = getint();
		if (x > y) swap(x,y);ans = 0;
		x++,y++;
		ans = (x * y % mod * a[x] - (x + y) * b[x] + c[x]) % mod;
		if (ans < 0) ans += mod;
		printf("%I64d\n",ans);
	}
    return 0;
}
