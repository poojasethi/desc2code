#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#define N 1000000
#define mo 1000000007
using namespace std;
typedef long long LL;
LL f[N + 10], p[N], phi[N + 10], tot, u, A[N], B[N], L, S[N + 10], ans;
LL pre[N + 10][3], i;
int n, m;
void Prepare()
{
    phi[1] = 1;
    for (i = 2; i <= N; i++)
    {
        if (!f[i]) p[++tot] = i, phi[i] = i - 1;
        for (LL j = 1; j <= tot && p[j] * i <= N; j++)
        {
            f[i * p[j]] = true;
            if (i % p[j] == 0) {phi[i * p[j]] = phi[i] * p[j]; break;}
            else phi[i * p[j]] = phi[i] * (p[j] - 1);
        }
    }
}
void Calc(LL x)
{
    u = 0;
    for (i = 1; i <= tot && p[i] * p[i] <= x; i++)
        if (x % p[i] == 0)
        {
            A[++u] = p[i], B[u] = 0;
            while (x % p[i] == 0) x /= p[i], B[u]++;
        }
    if (x != 1) A[++u] = x, B[u] = 1;
}
void Dfs(LL x, LL s)
{
    if (x == u + 1)
    {
        ans += (phi[L / s] * s);
        return;
    }
    Dfs(x + 1, s);
    LL w = 1;
    for (LL i = 1; i <= B[x]; i++)
        w = w * A[x], Dfs(x + 1, s * w);
}
LL Mul(LL x, LL y, LL z)
{
    return ((((x % mo) * (y % mo)) % mo) * (z % mo)) % mo;
}
inline int getint()
{ 
    char ch=getchar(); 
    int tmp=0; 
    for (; ch>'9' || ch<'0'; ch=getchar()); 
    for (; '0'<=ch && ch<='9'; ch=getchar()) 
        tmp=tmp * 10 + int(ch) - 48; 
    return tmp;
}
int main()
{
    Prepare();
    for (L = 1; L <= N; L++)
    {
        Calc(L), ans = 0;
        Dfs(1, 1);
        S[L] = (Mul(ans, 2, 1) + (L * (L + 1) * (2 * L + 1) / 3) % mo - 3 * (L * L) % mo) % mo;
    }
    for (i = 1; i <= N; i++)
    {
        pre[i][0] = (pre[i - 1][0] + S[i]) % mo;
        pre[i][1] = (pre[i - 1][1] + Mul(S[i], i, 1)) % mo;
        pre[i][2] = (pre[i - 1][2] + Mul(S[i], i, i)) % mo;
    }
    int T;
    scanf("%d", &T);
    while (T--)
    {
        n = getint(), m = getint();
        int L = min(n, m);
        ans = (((1LL * (n + 1) * (m + 1)) % mo) * pre[L][0]) % mo; 
        ans = (ans - (1LL * (n + m + 2)) * pre[L][1] + pre[L][2]) % mo;
        printf("%I64d\n", (ans + mo) % mo);
    }
}