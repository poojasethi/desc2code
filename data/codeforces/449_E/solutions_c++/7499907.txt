#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>

bool isprime[1000000+7];
int prime[1000000+7];
int phi[1000000+7];

typedef long long ll;
const ll Mod=1000000007;
const ll Inv3=333333336;

ll g[1000000+7];
ll f[1000000+7];
ll h[1000000+7];

void GetPrime()
{
	phi[1]=1;
	for(int i=2; i<=1000000; i++)
	{
		if (!isprime[i]) prime[++prime[0]]=i, phi[i]=i-1;
		for (int j=1; j<=prime[0]&&prime[j]*i<=1000000; j++)
		{
			isprime[prime[j]*i]=true;
			if (i%prime[j]==0)
			{
				phi[i*prime[j]]=phi[i]*prime[j];
				break;
			} else phi[i*prime[j]]=phi[i]*(prime[j]-1);
		}
	}
}

ll gcd(ll a, ll b){return !b?a:gcd(b,a%b);}

void Prepare()
{
	for (int i=1; i<=1000000; i++)
	{
		g[i]=(Mod-i*1ll*i%Mod)%Mod;
		g[i]=(g[i]+i*1ll*(i+1)%Mod*(2*i+1)%Mod*Inv3)%Mod;
		g[i]=(g[i]-2ll*i*i)%Mod;
		g[i]=(g[i]+Mod)%Mod;
	}
	
	for (int i=1; i<=1000000; i++)
		for (int j=1; j*i<=1000000; j++)
			g[i*j]=(g[i*j]+2ll*i*phi[j])%Mod;
			
	for (int i=1; i<=1000000; i++)
	{
		h[i]=g[i]*i%Mod;
		f[i]=h[i]*i%Mod;
	}
	
	for (int i=1; i<=1000000; i++)
	{
		g[i]=(g[i]+g[i-1])%Mod;
		h[i]=(h[i]+h[i-1])%Mod;
		f[i]=(f[i]+f[i-1])%Mod;
	}
}

int main()
{
	GetPrime();
	Prepare();
	int TestCase;
	scanf("%d", &TestCase);
	for (int N, M; TestCase--; )
	{
		scanf("%d %d", &N, &M);
		if(N>M) N^=M,M^=N,N^=M;
		ll ans=(N+1ll)*(M+1ll)%Mod*g[N]%Mod;
		ans=(ans-(N+M+2ll)*h[N]%Mod)%Mod;
		ans=(ans+f[N])%Mod;
		ans=(ans+Mod)%Mod;
		printf("%I64d\n", ans);
	}
	return 0;
}