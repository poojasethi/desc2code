#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

typedef long long int64;
const int mod=1000000007;
const int maxn=1000000;
int task,n,m,tot,prime[100005],phi[1000005],sumg[1000005],f[1000005],sumf0[1000005],sumf1[1000005],sumf2[1000005],ans;
bool check[1000005];
inline void euler() {
	phi[1]=1;
	for (int i=2;i<=maxn;i++) {
		if (!check[i]) {
			prime[++tot]=i;
			phi[i]=i-1;
		}
		for (int j=1;j<=tot;j++) {
			if (i*prime[j]>maxn) break;
			check[i*prime[j]]=true;
			if (i%prime[j]==0) {
				phi[i*prime[j]]=phi[i]*prime[j];
				break;
			}
			phi[i*prime[j]]=phi[i]*(prime[j]-1);
		}
	}
	for (int i=1;i<=maxn;i++)
		for (int j=1;i*j<=maxn;j++) sumg[i*j]=(sumg[i*j]+(int64)i*phi[j])%mod;
	for (int i=1;i<=maxn;i++) f[i]=((((int64)i*(i+1)*(2*i+1)/3)-(int64)3*i*i+2*sumg[i])%mod+mod)%mod;
	for (int i=1;i<=maxn;i++) {
		sumf0[i]=(sumf0[i-1]+f[i])%mod;
		sumf1[i]=(sumf1[i-1]+(int64)i*f[i])%mod;
		sumf2[i]=(sumf2[i-1]+(int64)i*i%mod*(int64)f[i])%mod;
	}
}
int main() {
	euler();
	scanf("%d",&task);
	while (task--) {
		scanf("%d%d",&n,&m);
		ans=(int64)(n+1)*(m+1)%mod*(int64)sumf0[min(n,m)]%mod;
		ans=(ans-(int64)(n+m+2)*sumf1[min(n,m)]%mod+mod)%mod;
		ans=(ans+sumf2[min(n,m)])%mod;
		printf("%d\n",ans);
	}
	return 0;
}
