#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

typedef pair<int, int> PP;
typedef long long LL;
#define pb push_back
#define fr first
#define sc second
#define N 1000010
#define mod 1000000007LL
LL phi[N], sum[N], f[3][N];

void get_phi(){
	phi[1] = 0;
	for (int i = 2; i < N; i ++) 
		if (!phi[i]) {
			phi[i] = i - 1;
			for (int j = i; j < N; j += i) {
				if (!phi[j]) {
					if ((j / i) % i == 0) phi[j] = phi[j / i] * i;
					else phi[j] = phi[j / i] * (i - 1);
				}
			}
		}
}

void get_gcd_sum(int x){
	int i = 2;
	sum[x] += phi[x];
	for (i = 2; i * i < x; i ++) 
		if (x % i == 0) {
			sum[x] += phi[i] * (x / i);
			sum[x] += phi[x / i] * i;
			sum[x] %= mod;
		}
	if (x == i * i) sum[x] += phi[i] * i;
	sum[x] %= mod;
}

void get_f(){
	f[0][1] = f[1][1] = f[2][1] = 1;
	for (LL i = 2; i < N; i ++) {
		f[0][i] = (2 * i - i * i + (i - 1) * i * (2 * i - 1) / 3 + 2 * sum[i]) % mod;
		f[1][i] = (f[0][i] * i) % mod;
		f[2][i] = (f[1][i] * i) % mod;
	}
	for (int j = 0; j < 3; j ++) 
		for (int i = 2; i < N; i ++) 
			f[j][i] = (f[j][i] + f[j][i - 1]) % mod;
}



int main() {
	#ifdef _TEST_
	freopen("input.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	#endif
	get_phi(); //

	sum[1] = 0;
	for (int x = 2; x < N; x ++) get_gcd_sum(x);

	get_f();

	int k, l;
	LL m, n, res;
	scanf("%d", &k);
	//cin >> k;
	for (int i = 0; i < k; i ++) {
		//cin >> m >> n;
		scanf("%I64d%I64d", &m, &n);
		l = min(m, n); m ++; n ++;
		res = 0;
		res += (((m * n) % mod) * f[0][l]) % mod;
		res -= (((m + n) * f[1][l])) % mod;
		res += f[2][l];
		res = res % mod; 
		if (res < 0) res += mod;
		//cout << res << endl;
		printf("%I64d\n", res);
	}
	return 0;
}
