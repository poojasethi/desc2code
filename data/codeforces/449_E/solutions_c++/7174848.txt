#include <math.h>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <sstream>
#include <set>
using namespace std;

const int mmod = 1000000007;
const int max_n = 1000000;

int plus0[max_n+1];
int plus1[max_n+1];
int plus2[max_n+1];

int inv_mod(int a, int b) {
  if (a == 1) return b;
  int div = mmod / a + 1;
  return inv_mod((a * (long long)div) % mmod, (b * (long long)div) % mmod);
}

int mult(int a, int b) {
  return (a*(long long)b)% mmod;
}

int tot[max_n+1];
int sieve[max_n+1];

int main()
{
  for (int i=1; i<=max_n; i++) tot[i] = i;
  for (int i=2; i<=max_n; i++) if (!sieve[i]) {
    for (int j=i; j<=max_n; j+=i) {
      sieve[j] = 1;
      tot[j] = tot[j]*(long long)(i-1) / i;
    }
  }


  int div6 = inv_mod(6, 1);
  for (int m=1; m<=max_n; m++) {
    plus2[m] = plus2[m-1];
    plus2[m] = (plus2[m] + mult(mult(mult(m, m+1), 2*m+1), div6)) % mmod;
    plus2[m] = (plus2[m] + mult(mult(mult(m-1, m), 2*m-1), div6)) % mmod;
    plus2[m] = (plus2[m] + (mmod - mult(m, 2*m))) % mmod;

    for (int j=1; j*j<=m; j++) {
      if (m%j) continue;
      int mm = 2;
      if (j*j == m) mm = 1;
      plus2[m] = (plus2[m] + (long long)mult(mm*j, tot[m/j]) + (long long)mult(mm*(m/j), tot[j])) % mmod;
    }
    plus1[m] = (plus1[m-1] + plus2[m]) % mmod;
    plus0[m] = (plus0[m-1] + plus1[m-1] + (long long)plus1[m]) % mmod;
  }

  int t;
  scanf("%d", &t);
  for (int i=0; i<t; i++) {
    int n, m;
    scanf("%d %d", &n, &m);
    if (n>m) swap(n, m);

    printf("%d\n", (plus0[n] + mult(m-n, plus1[n])) % mmod);
  }
}
