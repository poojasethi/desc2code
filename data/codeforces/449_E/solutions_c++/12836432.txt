#include <iostream>
#include <vector>
#include <cstdlib>

using namespace std;

typedef long long int ll;

ll modulo=1e9+7;

const int limite=1000001;

int esprimo[limite];
int factor[limite];
int euler[limite];
vector<int> divisores[limite];
ll summcd[limite];
ll calculo[limite];
ll sumcalculo[limite];
ll sumlcalculo[limite];
ll sumllcalculo[limite];

int main()
{
  ios::sync_with_stdio(false);
  for (int i=2;i<limite;i++)
    esprimo[i]=1;
  factor[1]=1;
  for (int i=2;i<limite;i++) {
    if (esprimo[i]) {
      factor[i]=i;
      for (int j=i+i;j<limite;j+=i) {
	esprimo[j]=0;
	factor[j]=i;
      }
    }
  }
  euler[1]=1;
  for (int i=2;i<limite;i++)
    if (factor[i]==factor[i/factor[i]])
      euler[i]=factor[i]*euler[i/factor[i]];
    else
      euler[i]=(factor[i]-1)*euler[i/factor[i]];
  for (int i=1;i<limite;i++)
    for (int j=i;j<limite;j+=i)
      divisores[j].push_back(i);
  for (ll l=1;l<limite;l++) {
    summcd[l]=0;
    vector<int> &div=divisores[l];
    for (int j=0;j<int(div.size());j++) {
      ll d=div[j];
      summcd[l]=(summcd[l]+d*euler[l/d])%modulo;
    }
    calculo[l]=(l*(l+1)*(2*l+1)/3-3*l*l+2*summcd[l])%modulo;
    sumcalculo[l]=(sumcalculo[l-1]+calculo[l])%modulo;
    sumlcalculo[l]=(sumlcalculo[l-1]+l*calculo[l])%modulo;
    sumllcalculo[l]=(sumllcalculo[l-1]+l*l%modulo*calculo[l])%modulo;
  }
  int casos;
  cin>>casos;
  for (int cas=0;cas<casos;cas++) {
    int n,m;
    cin>>n>>m;
    int nm=min(n,m);
    ll sol=(sumcalculo[nm]*(n+1)%modulo*(m+1)%modulo-(n+1+m+1)*sumlcalculo[nm]+sumllcalculo[nm])%modulo;
    if (sol<0) sol+=modulo;
    cout<<sol<<endl;
  }
}
