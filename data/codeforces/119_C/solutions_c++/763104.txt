#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <utility>
#include <numeric>
#include <algorithm>
using namespace std;
#ifdef DEBUGRUN
#define LOG(a) (cerr<<__LINE__<<": "#a" = "<<(a)<<endl)
#define DBG(...) (__VA_ARGS__)
#else
#define LOG(...) ((void)0)
#define DBG(...) ((void)0)
#endif
#define rep(i, n) for(int i=0; i<(int)(n); i++)
#define mp make_pair
#define foreach(it, c) for(__typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
typedef long long Int;
#define INF (1000000000)
#define MOD (YOUR_MODULUS)

int n, m, k;
Int a[100], b[100], c[100], dp[64][64][128];
pair<int, int> pre[64][64][128];

void print(int i, int j, int k) {
    if(i>0) print(i-1, pre[i][j][k].first, pre[i][j][k].second);
    cout << j+1 << ' ' << a[j]+k << endl;
}

void solve() {
    rep(i, m) rep(j, b[i]-a[i]+1) dp[0][i][j] = a[i]+j;
    rep(i, n-1) rep(j, m) rep(z, b[j]-a[j]+1) if(dp[i][j][z]) {
        rep(q, m) if(c[j]<c[q]) {
            const Int cur = a[j]+z;
            if(a[q]<=cur*k && cur*k<=b[q]) {
                if(dp[i+1][q][cur*k-a[q]] < dp[i][j][z]+cur*k) {
                    dp[i+1][q][cur*k-a[q]] = dp[i][j][z]+cur*k;
                    pre[i+1][q][cur*k-a[q]] = mp(j, z);
                }
            }
            if(a[q]<=cur+k && cur+k<=b[q]) {
                if(dp[i+1][q][cur+k-a[q]] < dp[i][j][z]+cur+k) {
                    dp[i+1][q][cur+k-a[q]] = dp[i][j][z]+cur+k;
                    pre[i+1][q][cur+k-a[q]] = mp(j, z);
                }
            }
        }
    }
    Int mx = -1;
    pair<Int, int> ans = mp(-1, -1);
    rep(i, m) rep(j, b[i]-a[i]+1) {
        if(mx<dp[n-1][i][j]) {
            mx = dp[n-1][i][j];
            ans = mp(a[i]+j, i);
        }
    }
    if(mx>0) {
        cout << "YES" << endl;
        print(n-1, ans.second, ans.first-a[ans.second]);
    }
    else {
        cout << "NO" << endl;
    }
}

int main() {
    cin >> n >> m >> k;
    rep(i, m) cin >> a[i] >> b[i] >> c[i];
    solve();
    return 0;
}

