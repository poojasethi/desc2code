#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 55;
LL dp[N][N][101];
int pre[N][N][101], plus[N][N][101];
struct Sub {
	LL a, b;
	int c;
	void read() {
		scanf("%I64d%I64d%d", &a, &b, &c);
	}
}ly[N];
bool checkmax(LL &x, LL val) {
	if(x < val) {
		x = val;
		return true;
	}
	return false;
}
void Go(int n, int m, int k) {
	memset(pre, -1, sizeof pre);
	memset(dp, -1, sizeof dp);
	for(int j = 1; j <= m; j ++)
		rep(num, ly[j].b - ly[j].a + 1)
			dp[1][j][num] = ly[j].a + num;
	for(int i = 1; i < n; i ++) {
		for(int j = 1; j <= m; j ++) {
			for(int num = 0; num <= ly[j].b - ly[j].a; num ++) {
				LL val = dp[i][j][num];
				if(val == -1)	continue;
				for(int nxt = 1; nxt <= m; nxt ++) {
					if(ly[nxt].c <= ly[j].c) 	continue;
					LL t = ly[j].a + num + k;
					if(t >= ly[nxt].a && t <= ly[nxt].b) {
						int nxtS = t - ly[nxt].a;
						if(checkmax(dp[i + 1][nxt][nxtS], val + t)) {
							pre[i + 1][nxt][nxtS] = j;
							plus[i + 1][nxt][nxtS] = 1;
						}
					}
					t = (num + ly[j].a) * k;
				//	printf("%I64d\n", t);
					if(t >= ly[nxt].a && t <= ly[nxt].b) {
						int nxtS = t - ly[nxt].a;
						if(checkmax(dp[i + 1][nxt][nxtS], val + t)) {
							pre[i + 1][nxt][nxtS] = j;
							plus[i + 1][nxt][nxtS] = 0;
						}
					}
				}
			}
		}
	}
}
int n, m, k;
void Print(int id, LL num, int n) {
	if(n > 1 && plus[n][id][num - ly[id].a]) {
		Print(pre[n][id][num - ly[id].a], num - k, n - 1);
	} else if(n > 1)
		Print(pre[n][id][num - ly[id].a], num / k, n - 1);
	printf("%d %I64d\n", id, num);
}
int main() {
	scanf("%d%d%d", &n, &m, &k);
	for(int i = 1; i <= m; i ++)
		ly[i].read();
	Go(n, m, k);
	LL ans = 0;
	LL id, num;
	for(int i = 1; i <= m; i ++)
		for(int j = 0; j <= ly[i].b - ly[i].a; j ++) {
			if(dp[n][i][j] > ans) {
				ans = dp[n][i][j];
				id = i;
				num = j + ly[i].a;
			}
		}
	if(ans == 0) {
		puts("NO");
	} else {
		puts("YES");
		Print(id, num, n);
	}
	return 0;
}

