#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <map>
#include <vector>
#include <string>

using namespace std;

typedef long long LL;
const int MAXN = 52;
const int MAXD = 128;
LL dp[MAXN][MAXN][MAXD];
LL pre[MAXN][MAXN][MAXD];
LL pv[MAXN][MAXN][MAXD];
LL ar[MAXN], br[MAXN], cr[MAXN];
int n, m, k;
LL gao(int p, int c, LL v) {
    if (v < ar[p] || v > br[p]) return -2;
    if (c == 1) return v;
    int remain = v - ar[p];
    LL& ret = dp[p][c][remain];
    if (ret != -1) return ret;
    ret = -2;
    for (int i = 0; i < m; ++i) {
        if (cr[i] <= cr[p]) continue;
        LL tmp = gao(i, c - 1, v + k);
        if (tmp > ret) {
            ret = tmp;
            pre[p][c][remain] = i;
            pv[p][c][remain] = v + k;
        }
        tmp = gao(i, c - 1, v * k);
        if (tmp > ret) {
            ret = tmp;
            pre[p][c][remain] = i;
            pv[p][c][remain] = v * k;
        }
    }
    if (ret != -2) ret += v;
    return ret;
}

void solved(int nT) {
    memset(dp, -1, sizeof(dp));
    scanf("%d %d %d", &n, &m, &k);
    for (int i = 0; i < m; ++i) {
        cin >> ar[i] >> br[i] >> cr[i];
    }
    LL result = -2, pos = -1, val = -1;
    for (int i = 0; i < m; ++i) {
        for (LL k = ar[i]; k <= br[i]; ++k) {
            LL tmp = gao(i, n, k);
            if (tmp > result) {
                result = tmp;
                pos = i, val = k;
            }
        }
    }
    if (result == -2) {
        puts("NO");
    } else {
        puts("YES");
        for (int i = n; i; --i) {
            cout << pos + 1<< ' ' << val << endl;
            LL tp = pre[pos][i][val - ar[pos]];
            LL tpv = pv[pos][i][val - ar[pos]];
            pos = tp, val = tpv;
        }
    }
}

int main() {
    int T = 1;
    //scanf("%d", &T);
    for (int nT = 1; nT <= T; ++nT) {
        solved(nT);
    }
    return 0;
}

  	      	 	 		 	  	 	    	