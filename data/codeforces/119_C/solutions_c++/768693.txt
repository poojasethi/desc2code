#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
const int S(105);
typedef __int64 LL;
struct TNode {
       LL a,b;
       int c,p;
};
TNode p[S];
int N,M,K,i,j,k,ii,jj;
LL l,ans,x;
LL f[S/2][S/2][S];
bool cmp(TNode x,TNode y) {return x.c<y.c;}
void update(LL &v,LL nv)
{
     if (v<nv) v=nv;
}
void output(int ii,int N,int jj)
{
     x=p[ii].a+jj;
     if (N>1) {
        for (i=1;i<ii;++i) {
            if (p[i].a<=x-K&&x-K<=p[i].b&&f[i][N-1][x-K-p[i].a]!=-1) 
               if (f[i][N-1][x-K-p[i].a]+x==f[ii][N][jj]) {
                  output(i,N-1,x-K-p[i].a); break;
               }
            if (x%K==0) 
               if (p[i].a<=x/K&&x/K<=p[i].b&&f[i][N-1][x/K-p[i].a]!=-1) 
                  if (f[i][N-1][x/K-p[i].a]+x==f[ii][N][jj]) {
                     output(i,N-1,x/K-p[i].a); break;
                  }
        }
     }
     cout<<p[ii].p<<" "<<p[ii].a+jj<<endl; 
}
int main()
{
    cin>>N>>M>>K;
    for (i=1;i<=M;++i) {
        cin>>p[i].a>>p[i].b>>p[i].c;
        p[i].p=i;
    }
    sort(p+1,p+M+1,cmp);
    memset(f,255,sizeof(f));
    ans=-1;
    for (i=1;i<=M;++i) {
        for (j=1;j<i;++j)
            if (p[i].c>p[j].c) 
               for (k=1;k<=N;++k)
                   for (l=0;l<=p[j].b-p[j].a;++l) {
                       if (f[j][k-1][l]==-1) continue;
                       x=p[j].a+l;
                       if (p[i].a<=x+K&&x+K<=p[i].b) 
                          update(f[i][k][x+K-p[i].a],f[j][k-1][l]+x+K);
                       if (p[i].a<=x*K&&x*K<=p[i].b)
                          update(f[i][k][x*K-p[i].a],f[j][k-1][l]+x*K);
                   }
        for (j=0;j<=p[i].b-p[i].a;++j) {
            f[i][1][j]=p[i].a+j;
            if (ans<f[i][N][j]) {
               ans=f[i][N][j]; ii=i; jj=j;
            }
        }
    }
    if (ans==-1) cout<<"NO"<<endl;
    else {
         cout<<"YES"<<endl;
         output(ii,N,jj);
    }
    return 0;
}
