#include<cstdio>
#include<iostream>
#include<cmath>
#include<string.h>
#include<cstring>
#include<algorithm>
#include<queue>
#include<stack>
#include<vector>
using namespace std;
int n,m,k;
struct node
{
    int i,c;
    __int64 p;
} arr[6006];
bool used[6006];
int path[6006][55];
__int64 dp[6006][55];
vector<int> vc[6006];
int len;
void dfs(int u)
{
    dp[u][1]=arr[u].p;
    used[u]=1;
    int i,j,v;
    for(i=vc[u].size()-1; i>=0; i--)
    {
        v=vc[u][i];
        if(!used[v])dfs(v);
        for(j=2; j<=n; j++)
        {
            if(dp[v][j-1]==0)continue;
            if(dp[u][j]<dp[v][j-1]+dp[u][1])
            {
                dp[u][j]=dp[v][j-1]+dp[u][1];
                path[u][j]=v;
            }
        }
    }
}
int main()
{
       //freopen("c:/111.txt","r",stdin);
    scanf("%d%d%d",&n,&m,&k);
    int c;
    __int64 a,b,i,j;
    for(i=1; i<=m; i++)
    {
        scanf("%I64d%I64d%d",&a,&b,&c);
        for(j=a; j<=b; j++)
        {
            arr[len].i=i;
            arr[len].p=j;
            arr[len].c=c;
            len++;
        }
    }
    for(i=0; i<len; i++)
    {
        for(j=0; j<len; j++)
        {
            if(i==j)continue;
            if(arr[i].c>=arr[j].c)continue;
            if(arr[i].p+(__int64)k==arr[j].p||arr[i].p*(__int64)k==arr[j].p)
            {
                vc[i].push_back(j);
            }
        }
    }

    memset(path,-1,sizeof(path));
    for(i=0; i<len; i++)
    {
        if(!used[i])dfs(i);
    }
    int tag=0;
    for(i=0; i<len; i++)
    {
        if(dp[i][n]>dp[tag][n])tag=i;
    }
    if(dp[tag][n]==0)puts("NO");
    else
    {
        puts("YES");
        while(n)
        {
            if(tag==-1)while(1);
            printf("%d %I64d\n",arr[tag].i,arr[tag].p);
            tag=path[tag][n];
            n--;
        }
    }
    return 0;
}
