#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long llong;
const int Max=55,MaxGap=105;
struct course{
    llong a,b;
    int id,c;
    bool in(const llong &x){return a<=x && x<=b;}
};
bool operator <(const course &x,const course &y){
    return x.c<y.c;
}
int pre[Max][Max][MaxGap][2];
llong dp[Max][Max][MaxGap];
course cr[Max];
int n,m,l;

inline void set(int *a,int x,int y){
    a[0]=x,a[1]=y;
}
bool tomax(llong &a,const llong &b){
    return b>a?(a=b,true):false;
}
llong DP(int i,int j,llong v){
    if(!cr[j].in(v)) return 0;
    if(i==1) return v;
    llong &ret=dp[i][j][v-cr[j].a];
    if(ret>=0) return ret;
    int *path=pre[i][j][v-cr[j].a];
    ret=0;
    if(v>l){
        llong u=v-l;
        for(int t=i-2;t<j &&cr[t].c<cr[j].c;++t){
            if(DP(i-1,t,u)>0 && tomax(ret,DP(i-1,t,u)+v))
                path[0]=t,path[1]=u-cr[t].a;
        }
    }
    if(v%l==0){
        llong u=v/l;
        for(int t=i-2;t<j && cr[t].c<cr[j].c;++t){
            if(DP(i-1,t,u)>0 && tomax(ret,DP(i-1,t,u)+v))
                path[0]=t,path[1]=u-cr[t].a;
        }
    }
    return ret;
}
int main(){
    scanf("%d %d %d",&n,&m,&l);
    for(int i=0;i<m;++i){
        scanf("%I64d %I64d %d",&cr[i].a,&cr[i].b,&cr[i].c);
        cr[i].id=i+1;
    }
    sort(cr,cr+m);
    memset(dp,-1,sizeof(dp));
    int u=-1,v=-1;
    for(int j=n-1;j<m;++j){
        for(int k=0,ek=cr[j].b-cr[j].a;k<=ek;++k){
            if(u==-1 || DP(n,j,k+cr[j].a)>DP(n,u,v+cr[u].a))
                u=j,v=k;
        }
    }
    if(u==-1 || DP(n,u,v+cr[u].a)<=0) puts("NO");
    else {
        puts("YES");
        llong out[n+1][2],tmp;
        for(int i=n;i>=1;--i){
            out[i][0]=cr[u].id;
            out[i][1]=v+cr[u].a;
            tmp=u;
            u=pre[i][tmp][v][0];
            v=pre[i][tmp][v][1];
        }
        for(int i=1;i<=n;++i)
            printf("%I64d %I64d\n",out[i][0],out[i][1]);
    }
    return 0;
}
