#include <iostream>
#include <cstring>

using namespace std;

int n,m,k;
bool done[51][51][101];
long long memo[51][51][101],a[51],b[51];
int nxt1[51][51][101],nxt2[51][51][101],c[51],id[51];

long long solve(int pos, int have, long long x){
	if(have == n) return 0;
	
	long long &ret = memo[pos][have][x - a[pos]];
	
	if(!done[pos][have][x - a[pos]]){
		ret = -1;
		
		long long x1 = x + k;
		
		for(int i = pos + 1;i <= m;++i){
			if(x1 >= a[i] && x1 <= b[i] && c[i] > c[pos]){
				long long aux = solve(i,have + 1,x1);
				
				if(aux != -1 && (ret == -1 || aux + x1 > ret)){
					ret = aux + x1;
					nxt1[pos][have][x - a[pos]] = 1;
					nxt2[pos][have][x - a[pos]] = i;
				}
				
				break;
			}
		}
		
		long long x2 = x * k;
		
		for(int i = pos + 1;i <= m;++i){
			if(x2 >= a[i] && x2 <= b[i] && c[i] > c[pos]){
				long long aux = solve(i,have + 1,x2);
				
				if(aux != -1 && (ret == -1 || aux + x2 > ret)){
					ret = aux + x2;
					nxt1[pos][have][x - a[pos]] = 2;
					nxt2[pos][have][x - a[pos]] = i;
					
				}
				
				break;
			}
		}
		
		done[pos][have][x - a[pos]] = true;
	}
	
	return ret;
}

int main(){
	ios::sync_with_stdio(false);
	
	cin >> n >> m >> k;
	
	for(int i = 1;i <= m;++i){
		cin >> a[i] >> b[i] >> c[i];
		id[i] = i;
	}
	
	for(int i = 1;i <= m;++i){
		for(int j = i + 1;j <= m;++j){
			if(c[i] > c[j]){
				swap(a[i],a[j]);
				swap(b[i],b[j]);
				swap(c[i],c[j]);
				swap(id[i],id[j]);
			}
		}
	}
	
	memset(done,false,sizeof(done));
	
	long long best = -1;
	int s = -1;
	long long x0 = -1;
	
	for(int i = 1;i <= m;++i){
		for(int j = 0;j <= b[i]-a[i];++j){
			long long aux = solve(i,1,a[i] + j);
			
			if(aux != -1 && (best == -1 || aux + a[i] + j > best)){
				best = aux + a[i] + j;
				s = i;
				x0 = a[i] + j;
			}
		}
	}
	
	if(s == -1) cout << "NO" << endl;
	else{
		cout << "YES" << endl;
		cout << id[s] << " " << x0 << endl;
		
		for(int i = 1;i < n;++i){
			if(nxt1[s][i][x0 - a[s]] == 1){
				s = nxt2[s][i][x0 - a[s]];
				x0 += k;
			}else{
				s = nxt2[s][i][x0 - a[s]];
				x0 *= k;
			}
			
			cout << id[s] << " " << x0 << endl;
		}
	}
	
	return 0;
}
