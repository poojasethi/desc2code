#include <stdio.h>
#include <algorithm>
#include <string.h>

using namespace std;

struct node
{
	long long a, b;
	int c, index, len;
	bool operator < (const node &a) const
	{
		return c<a.c;
	}
} sub[110];

long long f[51][51][110];
int pre[51][51][110];
int n, m, K;

void try_put(int i, int j, long long val, int pi, int pj, long long pval)
{
	
	if (pi==0 || sub[pi].a<=pval && pval<=sub[pi].b)
	{
		int k = val-sub[i].a;
		int pk;
		if (pi==0) pk=0;
		else pk = pval - sub[pi].a;
		if (f[pi][pj][pk] == -1) return;
		long long now = f[pi][pj][pk] + val;
		if (now > f[i][j][k])
		{
			f[i][j][k] = now;			
			pre[i][j][k] = pi*1000+pk;
		}
	}
}

void print(int i, int j, int k)
{
	if (j>1)
	{
		int p = pre[i][j][k];
		print(p/1000, j-1, p%1000);
	}
	printf("%d %I64d\n", sub[i].index, sub[i].a+k);
}

int main()
{
	int i, j, k, pi;
	
	long long val, best;
	int ci, cj, ck;
	scanf("%d%d%d", &n, &m, &K);
	for (i=1; i<=m; i++)
	{
	  scanf("%I64d%I64d%d", &sub[i].a, &sub[i].b, &sub[i].c);
	  sub[i].index = i;
	  sub[i].len = sub[i].b - sub[i].a;
	}
	sort(sub+1, sub+m+1);
	memset(f, 0xff, sizeof(f));
	memset(f[0], 0, sizeof(f[0]));
	best = -1;
	for (i=1; i<=m; i++)
	 for (j=1; j<=i&&j<=n; j++)
	  for (k=0; k<=sub[i].len; k++)
	  {
	  	for (pi=j-1; pi<i; pi++)
	  	{
	  		if (sub[pi].c== sub[i].c) continue;
	  		val = sub[i].a + k;
	  		if (pi==0) try_put(i, j, val, pi, j-1, 0);
	  		else 
	  		{
	  			try_put(i, j, val, pi, j-1, val-K);
	  			if (val%K==0) try_put(i, j, val, pi, j-1, val/K);
	  		}	  		
	  	}
	  	if (j==n)
	  		if (f[i][j][k]>best)
	  		{
	  			best = f[i][j][k];
	  			ci = i;
	  			cj = j;
	  			ck = k;
	  		}
	  }
	if (best==-1) printf("NO\n");
	else 
	{
		printf("YES\n");
		print(ci, cj, ck);
	}
	  	
	return 0;
}
/*
1 2 10
100000000000000 100000000000099 10
2000000000000000 2000000000000099 20
2 3 10
1 100 1
1 100 2
1 100 2

1 1 10
3 3 3

2 3 11
20 30 3
20 30 2
1 11 1


6 8 2
50 60 100
70 75 4
1 10 1
1 100 5
1 100 9
1 100 16
2 15 2
40 40 3

*/