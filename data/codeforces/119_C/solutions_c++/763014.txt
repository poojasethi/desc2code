#include <cstdio>
#include <algorithm>
#include <cstring>
#define LL long long int
#define N 55

using namespace std;

struct task{
	LL a,b;
	int c,x;
	bool operator < (const task&T) const {return c<T.c;};
}T[N];

int n,m,sx,sy,tr[N][N][105],pr[N][N][105];
LL K,dp[N][N][105],AC;

void update(int i,int j,int k,LL r,int p){
	if (T[p].a<=r && r<=T[p].b)
		if (dp[i-1][p][r-T[p].a]!=-1){
			LL u = dp[i-1][p][r-T[p].a];
			if (dp[i][j][k] < u + T[j].a+k){
				dp[i][j][k] = u + T[j].a+k;
				tr[i][j][k] = p;
				pr[i][j][k] = r-T[p].a;
			}	
		}
		
}

void trace(int n,int x,int y){
	if (n>1)
		trace(n-1,tr[n][x][y],pr[n][x][y]);
	printf("%d %I64d\n",T[x].x,T[x].a+y);
}

int main(){
	scanf("%d%d%I64d",&n,&m,&K);
	for (int i=1;i<=m;i++){
		scanf("%I64d%I64d%d",&T[i].a,&T[i].b,&T[i].c);
		T[i].x = i;
	}
	
	sort(T+1,T+1+m);
	
	memset(dp,-1,sizeof(dp));
	
	for (int i=1;i<=n;i++){
		
		for (int j=1;j<=m;j++)
			for (int k=0;k<=T[j].b-T[j].a;k++){
				
				if (i==1)
					dp[i][j][k] = T[j].a+k;
				else {				
					for (int p=1;p<j;p++){
						if (T[j].c==T[p].c) continue;
						
						LL r;
						if ((k+T[j].a)%K==0){
							r = (k+T[j].a)/K;
							update(i,j,k,r,p);
						}
						r = (k+T[j].a)-K;
						update(i,j,k,r,p);
						
					}
				}
				//printf("DP[%d][%d][%d] = %I64d\n",i,j,k,dp[i][j][k]);
			}
		//scanf("%*d");
	
	}
	
	AC = -1;
	
	for (int i=1;i<=m;i++)
		for (int j=0;j<=100;j++)
			if (AC < dp[n][i][j]){
				AC = dp[n][i][j];
				sx = i;
				sy = j;
			}
	
	if (AC == -1) printf("NO\n");
	else {
		printf("YES\n");
		trace(n,sx,sy);
	}
	
	//scanf("\n");
	return 0;
}
