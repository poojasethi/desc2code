#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cassert>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef long long ll;
typedef pair<ll,ll> pi;
const int inf=(int)1e9;
const double EPS=1e-9, INF=1e12;

int n, m, x;
ll a[50], b[50], c[50];
ll prev[50][50][101], dp[50][50][101];

int main(){
	memset(dp, -1, sizeof(dp));
	cin >> n >> m >> x;
	rep(i, m){
		cin >> a[i] >> b[i] >> c[i];
		
		for(ll j = a[i]; j <= b[i]; j++){
			prev[0][i][j - a[i]] = -1;
			dp[0][i][j - a[i]] = j;
		}
	}
	
	rep(i, n) rep(p, m) rep(j, 101) rep(k, m){
		if(dp[i][p][j] < 0) continue;
		if(c[p] >= c[k]) continue;
		
		if(a[k] <= j + a[p] + x && j + a[p]+ x <= b[k]){
			ll nxt = j + a[p] + x;
			ll sum = dp[i][p][j] + nxt;
			if(sum > dp[i + 1][k][nxt - a[k]]){
				dp[i + 1][k][nxt- a[k]] = sum;
				prev[i + 1][k][nxt - a[k]] = p * 2;
			}
		}
		if(a[k] <= (j + a[p]) * x && (j + a[p]) * x <= b[k]){
			ll nxt = (j + a[p]) * x;
			ll sum = dp[i][p][j] + nxt;
			if(sum > dp[i + 1][k][nxt - a[k]]){
				dp[i + 1][k][nxt- a[k]] = sum;
				prev[i + 1][k][nxt - a[k]] = p * 2 + 1;
			}
		}
	}
	
	ll s, t, sum = -1;
	rep(i, m) rep(j, 101){
		if(dp[n - 1][i][j] > sum){
			sum = dp[n - 1][i][j];
			s = i;
			t = j + a[i];
		}
	}
	if(sum >= 0){
		cout << "YES" << endl;
		vector<pi> ans;
		ans.pb(mp(s, t));
		
		rep(i, n - 1){
			int type = prev[n - 1 - i][s][t - a[s]] % 2;
			s = prev[n - 1 - i][s][t - a[s]] / 2;
			if(type) t /= x;
			else t -= x;
			ans.pb(mp(s, t));
		}
		reverse(all(ans));
		rep(i, n) cout << ans[i].first + 1 << " " << ans[i].second << endl;
		return 0;
	}
	cout << "NO" << endl;
	return 0;
}
