#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <vector>
using namespace std;
typedef long long llong;
typedef pair<int,int> ii;
typedef pair<double,double> dd;
#define all(x) (x).begin(),(x).end()
#define sz(x) ((int)(x).size())
#define forn(i,n) for(int i=0;i<(n);++i)
#define x(a) (a.first)
#define y(a) (a.second)
template<typename T> void usort(vector<T> &x){sort(all(x));x.erase(unique(all(x)),x.end());}
template<typename T> int index(const vector<T> &a,const T &x){return lower_bound(all(x),x)-a.begin();}
template<typename T> T sq(const T &x){return x*x;}

inline int qd(const ii &a){
    if(y(a)>0)return 0;
    if(y(a)==0&&x(a)>0)return 0;
    return 1;
}

bool cmp_len(const ii &a,const ii &b){
    return sq(x(a))+sq(y(a))<sq(x(b))+sq(y(b));
}

bool cmp_cross(const ii &a,const ii &b){
    if(qd(a)!=qd(b))return qd(a)<qd(b);
    return x(a)*y(b)>x(b)*y(a);
}

int main(){
    vector<ii> p;
    forn(i,301){
        for(int j=i;j<=300;j++){
            if(i|j)p.push_back(make_pair(i,j));
        }
    }
    sort(all(p),cmp_len);
    
    int n;
    scanf("%d",&n);
    vector<ii> ans(n);
    
    int t=1;
    for(int i=1;i<sz(p);i++){
        if(cmp_len(p[i-1],p[i]))p[t++]=p[i];
    }
    p.erase(p.begin()+n+1,p.end());
    
    int sum=0;
    forn(i,n)sum+=x(p[i])+y(p[i]);
    if(sum&1){
        for(int i=n-1;i>=0;i--){
            if(((x(p[i])+y(p[i]))&1)
              ^((x(p[n])+y(p[n]))&1))
            {
                p.erase(p.begin()+i);
                break;
            }
        }
    }

    int x=0;
    int y=0;
    
        for (int i = n - 1; i >= 0; i--) {
                int nx = 1e9, ny = 1e9;
                for (int t = 1; t >= -1; t -= 2)
                        for (int q = 1; q >= -1; q -= 2) {
                                int mx = x + p[i].first * t, my = y + p[i].second * q;
                                if ((llong)mx * mx + (llong)my * my < (llong)nx * nx + (llong)ny * ny) {
                                        ans[i].first = p[i].first * t;
                                        ans[i].second = p[i].second * q;
                                        nx = mx;
                                        ny = my;
                                }
                                mx = x + p[i].second * t;
                                my = y + p[i].first * q;
                                if ((llong)mx * mx + (llong)my * my < (llong)nx * nx + (llong)ny * ny) {
                                        ans[i].first = p[i].second * t;
                                        ans[i].second = p[i].first * q;
                                        nx = mx;
                                        ny = my;
                                }
                        }
                x += ans[i].first;
                y += ans[i].second;
        }
    /*
    for(int i=n-1;i>=0;i--){
        int best=~0U>>1,l;
        for(int r=1;r>=-1;r-=2){
            for(int c=1;c>=-1;c-=2){
                l=sq(x+x(p[i])*r)+sq(y+y(p[i])*c);
                if(l<best){
                    ans[i]=make_pair(x(p[i])*r,y(p[i])*c);
                    best=l;
                }
                
                l=sq(x+x(p[i])*c)+sq(y+y(p[i])*r);
                if(l<best){
                    ans[i]=make_pair(x(p[i])*c,y(p[i])*r);
                    best=l;
                }
            }
        }
        x+=x(ans[i]);
        y+=y(ans[i]);
        //printf("%d %d\n",x(ans[i]),y(ans[i]));
    }*/

    sort(all(ans),cmp_cross);
    puts("YES");
    forn(i,n){
        printf("%d %d\n",x,y);
        x+=x(ans[i]);
        y+=y(ans[i]);
    }
    
#ifndef ONLINE_JUDGE
    system("pause");
#endif
    return 0;
}
