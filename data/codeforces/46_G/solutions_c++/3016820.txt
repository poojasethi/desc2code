#include<stdio.h>
#include<string.h>
#include<math.h>
#include<algorithm>
#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<string>
using namespace std;
typedef long long lld;
#define mp make_pair
#define X first
#define Y second
#define pb push_back
#define maxn 100010
vector<int> x[maxn];
vector<int> y[maxn];
bool can[maxn];
int ssqrt(int s)
{
    int x=sqrt(s);
    if(x*x == s)
        return x;
    else
        return -1;
}
void init()
{
    for(int i=1;i<maxn;i++)
    {
        can[i]=false;
        for(int a=0;a*a<=i;a++)
        {
            int b=ssqrt(i-a*a);
            if(b != -1)
            {
                can[i]=true;
                x[i].pb(a);
                y[i].pb(b);
            }
        }
    }
}
int pp[maxn];
int qq;
struct Node
{
    int x,y;
    double ang;
}p[maxn];
bool cmp(Node a,Node b)
{
    return a.ang < b.ang;
}
int myabs(int x)
{
    return max(x,-x);
}
int main()
{
    init();
    int n;
    scanf("%d",&n);
    qq=0;
    for(int i=1;i<maxn;i++)
    {
        if(can[i])
            pp[qq++]=i;
        if(qq == n)
            break;
    }
    int sum=0;
    for(int i=0;i<qq;i++)
        sum+=pp[i];
    if(sum&1)
    {
        for(int i=pp[qq-1]+1;i<maxn;i++)
            if(can[i])
            {
                pp[qq]=i;
                break;
            }
        for(int i=qq-1;i>=0;i--)
            if((pp[i]+pp[qq])&1)
            {
                swap(pp[i],pp[qq]);
                break;
            }
    }
    while(1)
    {
        sort(pp,pp+qq);
        reverse(pp,pp+qq);
        int xx=0;
        int yy=0;
        for(int i=0;i<qq;i++)
        {
            int len=x[pp[i]].size();
            int j=rand()%len;
            if(myabs(xx+x[pp[i]][j]) < myabs(xx-x[pp[i]][j]))
            {
                xx+=x[pp[i]][j];
                p[i].x=x[pp[i]][j];
            }
            else
            {
                xx-=x[pp[i]][j];
                p[i].x=-x[pp[i]][j];
            }
            if(myabs(yy+y[pp[i]][j]) < myabs(yy-y[pp[i]][j]))
            {
                yy+=y[pp[i]][j];
                p[i].y=y[pp[i]][j];
            }
            else
            {
                yy-=y[pp[i]][j];
                p[i].y=-y[pp[i]][j];
            }
        }
        if(xx == 0 && yy == 0)
            break;
    }
    for(int i=0;i<qq;i++)
        p[i].ang=atan2(p[i].y,p[i].x);
    sort(p,p+qq,cmp);
    printf("YES\n");
    int xx=0;
    int yy=0;
    for(int i=0;i<qq;i++)
    {
        xx+=p[i].x;
        yy+=p[i].y;
        printf("%d %d\n",xx,yy);
    }
    return 0;
}
