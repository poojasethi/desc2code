#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())


void check(){
	cout<<"MAX size 105 -> 1005"<<endl;
}
li n;
#define CHECK 17

vector<pair<li,li> > ans;
map<pair<li,li>,double> ang;
bool cmp(const pair<li,li> &p0,const pair<li,li> &p1){
	return ang[p0]<ang[p1];
/*
if(n==CHECK) cout<<p0.first<<" "<<p0.second<<" "<<p1.first<<" "<<p1.second<<endl;
	double d0=atan2(p0.second,p0.first);
	double d1=atan2(p1.second,p1.first);
	return d0<d1;
	return atan2((double)p0.second,(double)p0.first)<atan2((double)p1.second,(double)p1.first);
*/
}


#define MAX 505
int main(){
	cin>>n;
	li x[MAX*MAX*2],y[MAX*MAX*2],ok[MAX*MAX];
	rep(i,MAX*MAX) ok[i]=1;
	vector<li> power;
	rep(i,MAX)rep(j,1+i)if(i+j){
		x[i*i+j*j]=i;
		y[i*i+j*j]=j;
		power.pb(i*i+j*j);
	}
	sort(power.begin(),power.end());
	power.erase(unique(power.begin(),power.end()),power.end());
	li sum=0;
	rep(i,n+1) sum+=x[power[i]]+y[power[i]];
	for(li i=n;i>=0;i--){
		if((sum-x[power[i]]-y[power[i]])%2==0){
			ok[i]=false;
			break;
		}
	}
	li X=0,Y=0;
	for(li i=n;0<=i;i--)if(ok[i]){
		li best=1<<25;
		li ans_x,ans_y;
		rep(j,2){
			rep(k,2){
				rep(l,2){
					if(abs(X+x[power[i]])+abs(Y+y[power[i]])<best){
						best=abs(X+x[power[i]])+abs(Y+y[power[i]]);
						ans_x=x[power[i]];
						ans_y=y[power[i]];
					}
					x[power[i]]=-x[power[i]];
				}
				y[power[i]]=-y[power[i]];
			}
			swap(x[power[i]],y[power[i]]);
		}
		ans.pb(make_pair(ans_x,ans_y));
		X+=ans_x;
		Y+=ans_y;
	}
	rep(i,sz(ans)) ang[ans[i]]=atan2((double)ans[i].second,(double)ans[i].first);
	sort(ans.begin(),ans.end(),cmp);
	if(X*Y){
		cout<<"NO"<<endl;
		return 0;
	}
	cout<<"YES"<<endl;
	rep(i,sz(ans)){
		X+=ans[i].first;
		Y+=ans[i].second;
		cout<<X<<" "<<Y<<endl;
	}




//	check();
}

