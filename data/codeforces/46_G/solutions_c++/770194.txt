#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <map>
#include <cstdlib>
#include <cmath>
#include <cassert>

using namespace std;

const int MAXN = 10005;

int N;

int len[MAXN], L;

inline long long sqr(long long a) {return a * a;}
inline int isSqr(long long num) {
	int lo = 0, hi = 1000000;
	while (lo < hi) {
		int mid = (hi + lo) >> 1;
		if (sqr(mid) < num) {lo = mid + 1;}
		else {hi = mid;}
	}
	return (sqr(hi) == num ? hi : -1);
}

inline bool good(int s) {
	for(int i = 0 ; i * i < s ; i++) {
		if (isSqr(s - i * i) != -1)
			return true;
	}
	return false;
}

inline void check() {
	int sum = 0;
	for(int i = 0 ; i < N ; i++) {
		sum = (sum + len[i]) & 1;
	}
	if (sum == 0) {return;}
	
	int ind = N - 1;
	while (ind >= 0 && (len[ind] & 1) == (len[N] & 1)) {ind--;}
	//assert(ind >= 0);
	for(int i = ind ; i < N ; i++) {
		len[i] = len[i + 1];
	}
}

pair< double, pair<int, int> > output[MAXN];
int A;
pair< int, int > loc;

inline bool comp(pair< int, int > a, pair< int, int > b) {
	return (sqr(a.first) + sqr(a.second) < sqr(b.first) + sqr(b.second));
}

inline void add(int s) {
	int u = 0;
	while (isSqr(s - u * u) == -1) {u++;}
	int v = isSqr(s - u * u);
	vector< pair<int, int >  > vec;
	vec.push_back(make_pair(loc.first + u, loc.second + v));
	vec.push_back(make_pair(loc.first + u, loc.second - v));
	vec.push_back(make_pair(loc.first - u, loc.second + v));
	vec.push_back(make_pair(loc.first - u, loc.second - v));
	vec.push_back(make_pair(loc.first + v, loc.second + u));
	vec.push_back(make_pair(loc.first + v, loc.second - u));
	vec.push_back(make_pair(loc.first - v, loc.second + u));
	vec.push_back(make_pair(loc.first - v, loc.second - u));
	sort(vec.begin(), vec.end(), comp);
	output[A].second = make_pair(vec[0].first - loc.first, vec[0].second - loc.second);
	output[A].first = atan2(output[A].second.second, output[A].second.first);
	A++;
	loc = vec[0];
}

inline bool comp2(pair< int, int > a, pair< int, int > b) {
	return (atan2(a.second, a.first) < atan2(b.second, b.first));
}

int main() {
	cin >> N;
	for(int i = 1; L <= N;i++) {
		if (good(i)) {
			len[L++] = i;
		}
	}
	L--;
	check();
	for(int i = N - 1 ; i >= 0 ; i--) {
		add(len[i]);
	}
	sort(output, output + N);
	int x = 0, y = 0;
	if (loc.first == 0 && loc.second == 0) {
		printf("YES\n");
		for(int i = 0 ; i < N ; i++) {
			printf("%d %d\n",x,y);
			x += output[i].second.first;
			y += output[i].second.second;
		}
	}	else {
		printf("NO\n");
	}
	return 0;
}
