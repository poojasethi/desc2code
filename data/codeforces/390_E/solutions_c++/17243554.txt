#include <cstdio>
#include <memory.h>

using namespace std;

const int N = (int)4e6 + 228;

long long dx[N], dy[N], ty[N], tx[N], ans = 0, sum = 0;
int n, m, x, y, xx, yy, w, type, z;


void add(long long *arr, int i, int n, long long x)
{
    for(; i <= n; i -= i | (-i))
        arr[i] += x;
}

long long get(long long *arr, int i, int n)
{
    long long ans = 0;
    for(; i > 0; i -= i & (-i))
        ans += arr[i];
    return ans;
}

void addx(int lx, int rx, long long x)
{
    add(tx, lx, n, +x);
    add(tx, rx + 1, n, -x);

    add(dx, lx, n, - (lx - 1) * x);
    add(dx, rx + 1, n, (rx - lx + 1) * x + (lx - 1) * x);
}

void addy(int ly, int ry, long long y)
{
    add(ty, ly, m, +y);
    add(ty, ry + 1, m, -y);

    add(dy, ly, m, - (ly - 1) * y);
    add(dy, ry + 1, m, (ry - ly + 1) * y + (ly - 1) * y);
}

long long calcx(int lx, int rx)
{
    return get(tx, rx, n) * rx - get(tx, lx - 1, n) * (lx - 1) + get(dx, rx, n) - get(dx, lx - 1, n);
}

long long calcy(int ly, int ry)
{
    return get(ty, ry, m) * ry - get(ty, ly - 1, m) * (ly - 1) + get(dy, ry, m) - get(dy, ly - 1, m);
}

int main()
{
    //freopen(".in", "r", stdin);

    scanf("%d%d%d", &n, &m, &w);
    memset(dy, 0, sizeof(dy));
    memset(dx, 0, sizeof(dx));
    memset(ty, 0, sizeof(ty));
    memset(tx, 0, sizeof(tx));

    for(int i = 0; i < w; i++)
    {
        scanf("%d", &type);
        if(type == 0)
        {
            scanf("%d%d%d%d%d", &x, &y, &xx, &yy, &z);
            sum += 1LL * (xx - x + 1) * (yy - y + 1) * z;
            addx(x, xx, z * (yy - y + 1));
            addy(y, yy, z * (xx - x + 1));
        }
        else
        {
            scanf("%d%d%d%d", &x, &y, &xx, &yy);
            ans = calcx(x, xx) + calcy(y, yy) - sum;
            printf("%I64d\n", ans);
        }
    }
    return 0;
}
