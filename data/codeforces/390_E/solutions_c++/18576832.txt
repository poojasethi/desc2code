#include<bits/stdc++.h>
#define MAXN 4000009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"--------------"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define y1 KunFu
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
struct SegmentTree{
	ll s[MAXN<<2],lazy[MAXN<<2];
	void upd(int nd,int x,int y,ll v){
		lazy[nd]+=v;
		s[nd]+=(y-x+1)*v*1LL;
	}
	void shift(int nd,int x,int y){
		if(!lazy[nd])
			return;
		int mid=(x+y)>>1;
		upd(nd<<1,x,mid,lazy[nd]);
		upd(nd<<1|1,mid+1,y,lazy[nd]);
		lazy[nd]=0LL;	
	}
	void inc(int l,int r,ll v,int nd,int x,int y){
		if(l>y or x>r)
			return;
		if(l<=x and y<=r){
			upd(nd,x,y,v);
			return;
		}
		shift(nd,x,y);
		int mid=(x+y)>>1;
		inc(l,r,v,nd<<1,x,mid);
		inc(l,r,v,nd<<1|1,mid+1,y);
		s[nd]=s[nd<<1]+s[nd<<1|1];
	}
	ll tap(int l,int r,int nd,int x,int y){
		if(l>y or x>r)
			return 0;
		if(l<=x and y<=r)
			return s[nd];
		shift(nd,x,y);	
		int mid=(x+y)>>1;
		ll i1=tap(l,r,nd<<1,x,mid);
		ll i2=tap(l,r,nd<<1|1,mid+1,y);
		return i1+i2;		
	}
}T[2];
int main(){
	int n,m,q;
	scanf("%d%d%d",&n,&m,&q);
	while(q--){
		int type,x,y,x1,y1,v;
		scanf("%d%d%d%d%d",&type,&x,&y,&x1,&y1);
		if(type==0){
			scanf("%d",&v);
			T[0].inc(x,x1,(y1-y+1)*v,1,1,n);
			T[1].inc(y,y1,(x1-x+1)*v,1,1,m);
		}
		else
			printf("%lld\n",T[0].tap(x,x1,1,1,n)-T[1].tap(1,y-1,1,1,m)-T[1].tap(y1+1,m,1,1,m));
	}
	return 0;
}

