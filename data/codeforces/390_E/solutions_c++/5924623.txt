#include <cstdio>
#include <algorithm>
#define rep(i,l,r) for (int i=l;i<=r;++i)
typedef long long LL;
int getx(){
	char c;int x;
	for (c=getchar();c<'0'||c>'9';c=getchar());
	for (x=0;c>='0'&&c<='9';c=getchar())
		x=(x<<3)+(x<<1)+c-'0';
	return x;
}
const int MAX_N=4000005;
struct SegmentTree{
	LL k[MAX_N<<2],flag[MAX_N<<2];
	#define lcv v<<1
	#define rcv v<<1|1
	#define lc v<<1,l,mid
	#define rc v<<1|1,mid+1,r
	inline void down(int v,int l,int r){
		if (flag[v]){
			int mid=l+r>>1;
			k[lcv]+=flag[v]*(mid-l+1);
			k[rcv]+=flag[v]*(r-mid);
			flag[lcv]+=flag[v],flag[rcv]+=flag[v];
			flag[v]=0;
			}
		}
	inline void up(int v){
		k[v]=k[lcv]+k[rcv];
		}
	void modify(int v,int l,int r,int s,int t,LL x){
		if (s<=l&&r<=t){
			k[v]+=x*(r-l+1);
			flag[v]+=x;
			return;
			}
		down(v,l,r);
		int mid=l+r>>1;
		if (s<=mid) modify(lc,s,t,x);
		if (t> mid) modify(rc,s,t,x);
		up(v);
		}
	LL query(int v,int l,int r,int s,int t){
		if (s<=l&&r<=t) return k[v];
		down(v,l,r);
		int mid=l+r>>1;LL res=0;
		if (s<=mid) res+=query(lc,s,t);
		if (t> mid) res+=query(rc,s,t);
		return res;
		}
}row,col;
int n,m,w;
LL sum;
int main(){
	n=getx(),m=getx(),w=getx();
	rep(i,1,w){
		int opt=getx();
		if (opt==0){
			int x1=getx(),y1=getx(),x2=getx(),y2=getx();LL c=getx();
			sum+=c*(y2-y1+1)*(x2-x1+1);
			row.modify(1,1,n,x1,x2,(y2-y1+1)*c);
			col.modify(1,1,m,y1,y2,(x2-x1+1)*c);
			}else
		if (opt==1){
			int x1=getx(),y1=getx(),x2=getx(),y2=getx();
			printf("%I64d\n",col.query(1,1,m,y1,y2)-sum+row.query(1,1,n,x1,x2));
			}
		}
}