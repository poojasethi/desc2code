#include <stdio.h>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long LL;


struct BIT
{
	int size;
	long long tree[3][4000005];
	inline void init(int _size)
	{
		size=_size;
		memset(tree,0,sizeof(tree));
	}
	inline void add(int d,int x,LL val)
	{
		for(int p=x;p<=size;p+=p&(-p))tree[d][p]+=val;
	}
	inline LL _query(int d,int x)
	{
		LL ret=0;
		for(int p=x;p;p-=p&(-p))ret+=tree[d][p];
		return ret;
	}
	inline void modify(int L,int R,LL val)
	{
		add(1,L,val);add(1,R+1,-val);
		add(2,L,1ll*val*L);add(2,R+1,-1ll*(R+1)*val);
	}
	inline LL query(int L,int R)
	{
		LL sum1=1ll*_query(1,R)*(R+1)-_query(2,R);
		LL sum2=1ll*_query(1,L-1)*L-_query(2,L-1);
		return sum1-sum2;
	}
}Trex,Trey;
int n,m,Q;
LL ans;


int main()
{
	scanf("%d%d%d",&n,&m,&Q);
	Trex.init(n);Trey.init(m);
	while(Q--)
	{
		int opt,Lx,Rx,Ly,Ry;
		scanf("%d%d%d%d%d",&opt,&Lx,&Ly,&Rx,&Ry);
		if(opt==0)
		{
			LL v;scanf("%I64d",&v);
			LL aa=LL(Rx-Lx+1),bb=LL(Ry-Ly+1);
			LL val=aa*bb*v;
			ans+=val;
			Trex.modify(Lx,Rx,v*bb);
			Trey.modify(Ly,Ry,v*aa);
		}else
		{
			LL dx=Trex.query(Lx,Rx),dy=Trey.query(Ly,Ry);
			printf("%I64d\n",dx+dy-ans);
		}
	}
	return 0;
}