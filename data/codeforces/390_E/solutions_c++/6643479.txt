#include<cstdio>
#include <cstring>
#include<map>
#include<algorithm>
#include<vector>
#include<string>
#include<stack>
#include<iostream>
#include<cmath>
#include<bitset>
#include<queue>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const int maxn = 4000050;

int N,M,W;
ll bitX[2][maxn];	//0 : p <= q	1 : p > q
ll bitY[2][maxn];

inline int lowbit(int n)
{
	return n & -n;
}
void add(ll bit[],int upper,int p,ll v)
{
	for(int i = p; i <= upper; i += lowbit(i)) bit[i] += v; 
}
ll getSum(ll bit[],int p)
{
	ll ans = 0;
	for(int i = p; i > 0; i -= lowbit(i)) ans += bit[i];
	return ans;
}
void inc(ll bit[][maxn],int upper,int p,ll v)
{
	add(bit[0],upper,p,p*v);
	add(bit[1],upper,1,v);
	add(bit[1],upper,p,-v);
}
void _update(ll bit[][maxn],int upper,int l,int r,ll v)
{
	inc(bit,upper,r,v);
	if(l != 1) inc(bit,upper,l-1,-v);
}

void update(int x1,int y1,int x2,int y2,ll v)
{
	_update(bitX,N,x1,x2,(y2-y1+1) * v); 
	_update(bitY,M,y1,y2,(x2-x1+1) * v);
}

ll find(ll bit[][maxn],int q)
{
	return getSum(bit[0],q) + getSum(bit[1],q) * q;
}
ll _query(ll bit[][maxn],int l,int r)
{
	if(l > r) return 0;
	return find(bit,r) - find(bit,l-1);
}
ll query(int x1,int y1,int x2,int y2)
{
	return _query(bitY,y1,y2) - (_query(bitX,1,x1-1) + _query(bitX,x2+1,N));
}
int main()
{
	cin >> N >> M >> W;
	for(int w = 0; w < W; ++w) {
		int cmd,x1,y1,x2,y2;
		cin >> cmd >> x1 >> y1 >> x2 >> y2;
		if(cmd == 0) {
			ll v;
			cin >> v;
			update(x1,y1,x2,y2,v);
		} else if(cmd == 1) {
			cout << query(x1,y1,x2,y2) << endl;
		}
		
	}
}
