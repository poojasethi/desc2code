#include <cstdio>
#include <algorithm>
using namespace std;
long long int sat[3*4000005],lsat[3*4000005],sut[3*4000005],lsut[3*4000005],Top;
int N,M,W;
int op,x1,x2,y1,y2,upd;
long long int upsat(int k,int b,int s,int ab,int as)
{
	if(b >= ab && as >= s)	 {lsat[k]+=upd; return lsat[k] * (s-b+1) + sat[k];}
	if(as < b || ab > s) 	 return lsat[k] * (s-b+1) + sat[k];
	sat[k] = upsat(k*2,b,(b+s)/2,ab,as) + upsat(k*2+1,(b+s)/2+1,s,ab,as);
	return sat[k] + lsat[k] * (s-b+1);
}
long long int upsut(int k,int b,int s,int ab,int as)
{
	if(b >= ab && as >= s)	 {lsut[k]+=upd; return lsut[k] * (s-b+1) + sut[k];}
	if(as < b || ab > s) 	 return lsut[k] * (s-b+1) + sut[k];
	sut[k] = upsut(k*2,b,(b+s)/2,ab,as) + upsut(k*2+1,(b+s)/2+1,s,ab,as);
	return sut[k] + lsut[k] * (s-b+1);
}
long long int fsat(int k,int b,int s,int ab,int as)
{
	if(b >= ab && as >= s)	 return lsat[k] * (s-b+1) + sat[k];
	if(as < b || ab > s) 	 return 0;
	long long int ret = fsat(k*2,b,(b+s)/2,ab,as) + fsat(k*2+1,(b+s)/2+1,s,ab,as);
	return ret + lsat[k] * (min(s,as) - max(b,ab) + 1);
}
long long int fsut(int k,int b,int s,int ab,int as)
{
	if(b >= ab && as >= s)	 return lsut[k] * (s-b+1) + sut[k];
	if(as < b || ab > s) 	 return 0;
	long long int ret = fsut(k*2,b,(b+s)/2,ab,as) + fsut(k*2+1,(b+s)/2+1,s,ab,as);
	return ret + lsut[k] * (min(s,as) - max(b,ab) + 1);
}
int main()
{
	scanf("%d %d %d",&N,&M,&W);
	for(int i = 0;i<W;i++)
	{
		scanf("%d %d %d %d %d",&op,&x1,&y1,&x2,&y2);
		if(!op)
		{
			scanf("%d",&upd);
			int xx = upd;
			upd = xx * (y2 - y1 + 1);
			upsat(1,1,N,x1,x2);
			upd = xx * (x2 - x1 + 1);
			upsut(1,1,M,y1,y2);
			Top+=(x2-x1+1) *1ll* (y2-y1+1) * xx;
		}
		else
		{
			long long int cev = Top - fsat(1,1,N,x1,x2) - fsut(1,1,M,y1,y2);
			printf("%I64d\n",-cev);
		}
	}
	return 0;
}
