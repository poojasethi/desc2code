#include <iostream>
#include <cmath>
#include <algorithm>
#define maxn 4000000
typedef long long ll;

using namespace std;

ll sum[4*maxn][2];
ll bar[4*maxn][2];

void add(int p, int low, int high, int l, int r, int tree, int s)
{
    int len = (r - l + 1);
    if (low == l && high == r)
    {
        bar[p][tree] += s;
        return;
    }
    sum[p][tree] += len*s;
    int mid = (low + high)/2;
    if (l <= mid)
        add(2*p + 1, low, mid, l, min(mid, r), tree, s);
    if (r > mid)
        add(2*p + 2, mid+1, high, max(l, mid+1), r, tree, s);

}

ll get(int p, int low, int high, int l, int r, int tree)
{
    sum[p][tree] += (high - low + 1)*bar[p][tree];
    if (low != high)
    {
        bar[2*p + 1][tree] += bar[p][tree];
        bar[2*p + 2][tree] += bar[p][tree];
    }
    bar[p][tree] = 0;
    if (low == l && high == r)
        return sum[p][tree];
    int mid = (low + high)/2;
    ll ans = 0;
    if (l <= mid)
        ans += get(2*p + 1, low, mid, l, min(mid, r), tree);
    if (r > mid)
        ans += get(2*p + 2, mid+1, high, max(l, mid+1), r, tree);
    return ans;
}

int main()
{
    ll all = 0;
    int n, m, w;
    cin >> n >> m >> w;
    while (w--)
    {
        int c, x1, x2, y1, y2, v;
        cin >> c >> y1 >> x1 >> y2 >> x2;        
        if (c == 0)
        {
            cin >> v;
            int s = (y2 - y1 + 1)*v;
            add(0, 1, m, x1, x2, 0, s);           
            s = (x2 - x1 + 1)*v;
            add(0, 1, n, y1, y2, 1, s);
            all += (x2 - x1 + 1)*(y2 - y1 + 1)*v;
        }
        else
            cout << get(0, 1, m, x1, x2, 0) + get(0, 1, n, y1, y2, 1) - all << endl;
    }
    return 0;
}
