#include<iostream>
#include<math.h>
#include<algorithm>
#include<string>
#include<string.h>
#include<vector>
#include<set>
#include<map>
#include<cstdio>
#include<queue>
#include<sstream>
#include<ctime>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long long int lli;
#define mp make_pair
#define pb push_back
const int N = 4000009;
struct tree{
    ll Mul[4000009];
    ll Sub[4000009];
    void update(int left, int right, ll by){
        internalUpdate(left, by, by*(left - 1));
        internalUpdate(right + 1, -by, -by*right);
    }
    void internalUpdate(int at,ll mul, ll sub){
        while(at < N){
            Mul[at] += mul;
            Sub[at] += sub;
            at += (at & -at);
        }
    }
    ll query(int at){
        ll mul = 0, sub = 0;
        int start = at;
        while(at > 0){
            mul += Mul[at];
            sub += Sub[at];
            at -= (at & -at);
        }
        return mul * start - sub;
    }
    ll rangeQuery(ll a,ll b){
        return query(b) - query(a-1);
    }
} rows, cols;
int main()
{
    //ios_base::sync_with_stdio(false);
    //freopen("input.txt", "r", stdin);
    int n,m,k;
    cin>>n>>m>>k;
    int mode;
    int x1,y1,x2,y2,t;
    while(k--){
        cin>>mode;
        if(mode==0){
            cin>>x1>>y1>>x2>>y2>>t;
            rows.update(x1,x2,(y2-y1+1)*t*1ll);
            cols.update(y1,y2,(x2-x1+1)*t*1ll);
        }
        else {
            cin>>x1>>y1>>x2>>y2;
            cout<<-rows.rangeQuery(1,n) + rows.rangeQuery(x1,x2) + cols.rangeQuery(y1,y2)<<endl;
        }
    }
    return 0;
}
