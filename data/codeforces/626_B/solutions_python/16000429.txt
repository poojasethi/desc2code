#!/usr/bin/env python

n = int(raw_input())
cards = list(raw_input())

def solve(R, G, B, cache={}):
	if (R,G,B) in cache: return cache[(R,G,B)]
	if R+G+B == 1:
		if R == 1:
			return ['R']
		if G == 1:
			return ['G']
		return ['B']

	res = []
	if R > 1:
		res.extend(solve(R-1, G, B))
	if G > 1:
		res.extend(solve(R, G-1, B))
	if B > 1:
		res.extend(solve(R, G, B-1))
	if R>0 and G>0:
		res.extend(solve(R-1, G-1, B+1))
	if R>0 and B>0:
		res.extend(solve(R-1, G+1, B-1))
	if B>0 and G>0:
		res.extend(solve(R+1, G-1, B-1))

	cache[(R,G,B)] = sorted(res)
	return cache[(R,G,B)]

print ''.join(sorted(list(set(solve(2 if cards.count('R')>2 else cards.count('R'), 2 if cards.count('G')>2 else cards.count('G'), 2 if cards.count('B')>2 else cards.count('B'))))))
