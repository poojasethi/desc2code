#include <stdio.h>
#include <algorithm>
#include <stack>

const int kMaxN = 1000000;

int a[kMaxN], x[kMaxN];
long long f[kMaxN + 1], occ[kMaxN + 1];
int n;

void ReadIn() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", a + i);
    x[i] = a[i];
  }
  std::sort(x, x + n);
}

void Insert(long long *f, int x, long long t) {
  while (x <= n) {
    f[x] += t;
    x += x & (x ^ (x - 1));
  }
}

long long Find(long long *f, int x) {
  long long result = 0;
  while (x > 0) {
    result += f[x];
    x -= x & (x ^ (x - 1));
  }
  return result;
}

void Solve() {
  long long result = 0;
  for (int i = 0; i < n; ++i) {
    int id = n - (std::lower_bound(x, x + n, a[i]) - x);
    result += Find(f, id - 1);
    Insert(f, id, Find(occ, id - 1));
    Insert(occ, id, 1);
  }
  printf("%I64d\n", result);
}

int main() {
  ReadIn();
  Solve();
  return 0;
}
