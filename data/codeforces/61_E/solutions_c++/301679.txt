#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
#define int ll
const int MN = 1e6 + 50;
int tree[MN], tree2[MN];;

int arr[MN];
int vals[MN];
int N;

void add(int n, int v, int* tree) {
	n = N-n+5;
	while(n < MN) {
		tree[n] += v;
		n += n&-n;
	}
}
int get(int n, int* tree) {
	n = N-n+5;
	int r=0;
	while(n) {
		r += tree[n];
		n &= n-1;
	}
	return r;
}

main()
{
	cin>>N;
	for(int i=0; i<N; ++i) cin>>arr[i], vals[i]=arr[i];
	sort(vals,vals+N);
	for(int i=0; i<N; ++i) {
		arr[i] = lower_bound(vals, vals+N, arr[i]) - vals + 1;
	}
	ll r=0;
	for(int i=0; i<N; ++i) {
		int a = arr[i];
		int x = get(a, tree);
		int y = get(a, tree2);

		r += y;
		add(a, 1, tree);
		add(a, x, tree2);
	}
	cout<<r<<'\n';
}
