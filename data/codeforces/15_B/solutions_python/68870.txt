#! /usr/bin/python
# coding: utf-8
import sys

class Cell:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    


t=int(sys.stdin.readline())
for i in range(t):
    n, m, x1, y1, x2, y2 = map(int, sys.stdin.readline().split())
    # nums = line.split()
    # n = int(nums[0])
    # m = int(nums[1])
    # l1 = Cell(x1, y1)   # ἀκτινοβόλον 1
    # l2 = Cell(x2, y2)   # ἀκτινοβόλον 2

    if x1 < x2:  # Τὸ l1 βρίσκεται ἀριστερώτερα τοῦ l2
        Dx = x2 - x1
        l1x_min = 1
        l1x_max = n-Dx
        l2x_min = 1+Dx
        l2x_max = n
        # r2x = range(1+Dx, n+1)
    elif x1 > x2:  # Τὸ l1 βρίσκεται δεξιώτερα τοῦ l2
        Dx = x1 - x2
        l1x_min = 1 + Dx
        l1x_max = n
        l2x_min = 1
        l2x_max = n - Dx
        # r1x = range(1+Dx, n+1)
        # r2x = range(1, n-Dx+1)
    else:  # Τὸ l1 καὶ τὸ l2 βρίσκονται κατακόρυφα τὸ ἓν ὑπὸ τὸ ἄλλο
        l1x_min = 1
        l1x_max = n
        l2x_min = 1
        l2x_max = n
        # r1x = range(1, n+1)
        # r2x = range(1, n+1)


    if y1 < y2:  # Τὸ l1 βρίσκεται ἀνωτέρω τοῦ l2
        Dy = y2 - y1
        l1y_min = 1
        l1y_max = m - Dy
        l2y_min = 1 + Dy
        l2y_max = m
        # r1y = range(1, m-Dy+1)
        # r2y = range(1+Dy, m+1)
    elif y1 > y2:  # Τὸ l1 βρίσκεται κατωτέρω τοῦ l2
        Dy = y1 - y2
        l1y_min = 1 + Dy
        l1y_max = m
        l2y_min = 1
        l2y_max = m - Dy
        # r1y = range(1+Dy, m+1)
        # r2y = range(1, m-Dy+1)
    else: # Τὸ l1 καὶ τὸ l2 βρίσκονται ὁριζόντια τὸ ἓν δίπλα στ' ἄλλο
        l1y_min = 1
        l1y_max = m
        l2y_min = 1
        l2y_max = m
        # r1y = range(1, m+1)
        # r2y = range(1, m+1)
        



        
        
        
    # if l1[0] < l2[0]:
    #     xsmallest = l1
    #     xlargest = l2
    # else:
    #     xsmallest = l2
    #     xlargest = l1

    # if l1[1] < l2[1]:
    #     ysmallest = l1
    #     ylargest = l2
    # else:
    #     ysmallest = l2
    #     ylargest = l1
   
    # if l1 > l2:
    #     l1, l2 = l2, l1
    # else:
    #     if l1[1] == l2[1] and l1[0] >= l2[0]:
    #         l1, l2 = l2, l1
            
    # Dx = abs(l2[0] - l1[0])
    # Dy = abs(l2[1] - l1[1])
    # r1x = set(range(1,n+1-Dx))
    # r1y = set(range(1,m+1-Dy))
    # r2x = set(range(1+Dx,n+1))
    # r2y = set(range(1+Dy,m+1))
    l12x_min = max(l1x_min, l2x_min)
    l12x_max = min(l1x_max, l2x_max)
    l12y_min = max(l1y_min, l2y_min)
    l12y_max = min(l1y_max, l2y_max)

    if  l12x_min > l12x_max or l12y_min > l12y_max:
        l12_cells = 0
    else:
        l12_cells = (l12x_max - l12x_min + 1) * (l12y_max - l12y_min + 1)

    l1_cells = (l1x_max - l1x_min + 1) * (l1y_max - l1y_min + 1)
    l2_cells = (l2x_max - l2x_min + 1) * (l2y_max - l2y_min + 1)
    # r12x = set(r1x).intersection(set(r2x))
    # r12y = set(r1y).intersection(set(r2y))
    # intersectSize = len(r12x)*len(r12y)
    cannot_melt = n*m - (l1_cells + l2_cells - l12_cells)
    # unmelt=2*(Dx * Dy)
    print(cannot_melt)


# def cmp_pos(pos1, pos2):
#     if pos1[1] < pos2[1]:
#         return -1
#     elif pos1[1] > pos2[1]:
#         return +1

#     else:  # pos1[1] == pos2[1]
#         if pos1[0] < pos2[0]:
#             return -1
#         elif pos1[0] > pos2[0]:
#             return +1
#         else:
#             return 0
