#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long LL;
const LL mod = 1000000007LL;
LL dp[1111][1111][2];
int t, k;
char s[1111];
LL dfs(int pos, int last, int S, bool limit) {
	if (pos < 1)
		return S == 1;
	if (dp[pos][last][S] != -1 && !limit)
		return dp[pos][last][S];
	LL ans = 0;
	int lmt = limit?(s[pos]-'0'):(9);
	for(int i = 0; i <= lmt; i++) {
		if(i == 4 || i == 7)
			ans += dfs(pos - 1, pos, S | (((last-pos)<=k)&&last), limit && i == lmt), ans %= mod;
		else 
			ans += dfs(pos - 1, last, S, limit && i==lmt), ans %= mod;
	}
	if (ans < 0) ans += mod;
		ans %= mod;
	if (!limit)
		dp[pos][last][S] = ans;
	return ans;
}
char T[1111];
int main() {
	scanf("%d%d", &t, &k);
	memset(dp, -1, sizeof(dp));
	while(t--) {
		scanf("%s",T);
		int len = strlen(T), Add=1;
		for(int i = len - 1; i >= 0; i--)
			s[Add++]=T[i];
		LL Left = dfs(len,0,0,1), ans = 0;
		int p = -3000;
		for (int i = 0; i < len; i++) {
			if (T[i] == '4' || T[i] == '7') {
				if(i - p <= k) {
					ans = 1;
					break;
				}
				p = i;
			}
		}
		scanf("%s",T);
		len = strlen(T);
		Add = 1;
		for(int i = len - 1; i >= 0; i--)
			s[Add++] = T[i];
		LL Rst = (dfs(len,0,0,true) - Left + ans) % mod;
		if(Rst < 0)
			Rst += mod;
		printf("%I64d\n",Rst);
	}
}