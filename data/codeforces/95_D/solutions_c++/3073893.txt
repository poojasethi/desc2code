#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

#define N 3333 
typedef long long LL;
const LL MOD = (LL) 1e9 + 7;
LL dp[N][N][2];
int k;
char s[N], t[N];

LL getDP(int i, int j, int b) {
    LL & res = dp[i][j][b];
    if(res != -1) return res;
    if(i == 0) return res = b;
    res = 0;
    for(int x = 0; x < 10; ++x)
        if(x == 4 || x == 7) res = (res + getDP(i-1, 1, b | (j <= k))) % MOD;
        else res = (res + getDP(i-1, j+1, b)) % MOD;
    return res;
    return res = (getDP(i-1, j+1, b) * 8LL + getDP(i-1, 1, b | (j <= k)) * 2LL) % MOD;
}

LL F(char * s, bool include = false) {
    int n = strlen(s), dis = k+1, f = 0;
    LL res = 0;
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < s[i] - '0'; ++j)
            if(j == 4 || j == 7) res = (res + getDP(n-i-1, 1, f | (dis <= k))) % MOD;
            else res = (res + getDP(n-i-1, dis+1, f)) % MOD; 
        if(s[i] == '4' || s[i] == '7') {
            f |= dis <= k;
            dis = 1;
        } else ++dis;
    }
    return (res + (f && include)) % MOD;
}

int main() {
    memset(dp, -1, sizeof dp);
    int tc; scanf("%d%d",&tc,&k);
    while(tc--) {
        scanf("%s%s",s,t);
        printf("%I64d\n", (F(t, true) - F(s) + MOD * MOD) % MOD);
    }
    return 0;
}
