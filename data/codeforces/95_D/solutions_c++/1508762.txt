// I'm on the run.

#include <cstdio>
#include <iostream>
#include <string>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <cfloat>
#include <map>
#include <queue>
#include <vector>
#include <climits>
#include <sstream>
#include <locale>

#define Maxn 2050
#define P 1000000007

using namespace std ;

long long f[Maxn][Maxn][2] ;
int d[Maxn] ;
char s[Maxn] ;
int cases , m ;

long long solve ( int len , bool less , bool exist , int dis ) {
	if ( len == 0 ) {
		if ( exist ) return 1 ;
		return 0 ;
	}
	if ( less && f[len][dis][exist] >= 0 )
		return f[len][dis][exist] ;
	int lim = less ? 9 : d[len] ;
	long long res = 0 ;
	for ( int i = 0 ; i <= lim ; ++i ) {
		int tmp = dis + 1 ;
		bool est = exist ;
		if ( i == 4 || i == 7 ) {
			if ( tmp <= m ) est = true ;
			else tmp = 0 ;
		}
		res = ( res + solve ( len - 1 , less || i < lim , est , tmp ) ) % P ;
	}
	if ( less )
		f[len][dis][exist] = res ;
	return res ;
}

long long calc() {
	s[0] = '0' ;
	int num = 0 , len = strlen ( s ) - 1 ;
	for ( int i = 1 ; i <= len ; ++i )
		d[len-i+1] = s[i] - 48 ;
	long long ret = solve ( len , false , false , m + 1 ) ;
	return ret ;
}

int main() {
	ios::sync_with_stdio(false);
	cin >> cases >> m ;
	memset ( f , -1 , sizeof ( f ) ) ;
	while ( cases -- ) {
		cin >> s + 1 ;
		s[0] = '0' ;
		int i = strlen ( s ) - 1 ;
		while ( s[i] == 0 ) { s[i] = '9' ; i -- ; }
		s[i] -- ;
		long long ans1 = calc() ;
		cin >> s + 1 ;
		long long ans2 = calc() ;
		cout << ( ans2 - ans1 + P + P ) % P << endl ;
	}
	return 0 ;
}