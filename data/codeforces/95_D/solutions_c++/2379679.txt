#include <stdio.h>
#include <string.h>

int T, K ;
const int NN = 1100 ;
char s[ NN ];
int d[ NN ] ;
const int Mod = 1000000007  ;
int dp[NN][NN*2][2] ;

int init( char *s ){
    int len = strlen( s ) ;
    for(int i=len;i>=1;i--){
        d[i] = s[len-i]-'0' ;
    }
    return len ;
}

bool check(){
    int pre = -1 ;
    for(int i=0;s[i];i++){
        if( s[i]=='4'||s[i]=='7'){
            if(pre!=-1 && i-pre<=K )   return true ;
            pre = i ;
        }
    }
    return false ;
}

int dfs(int pos, int k , bool limit , int f ){
    if( !limit && dp[pos][k][f]!=-1 )   return dp[pos][k][f] ;
    if( pos == 0 ){
        return f ;
    }
    int end = limit ? d[pos] : 9 , _m = 0 ;

    for(int i=0;i<=end;i++){
        int nk = k + 1 ,nf = f ;
        if(i==4||i==7){
            nk = 1 ;
            if( k<=K )  nf = 1 ;
        }
        _m += dfs( pos-1 , nk , limit&&(i==end) , nf ) ;
        if( _m >= Mod ) _m -= Mod ;
    }
    if( !limit )    dp[pos][k][f] = _m ;
    return _m;
}

int main(){
    while( scanf("%d %d",&T,&K) == 2 ){
        memset( dp ,-1, sizeof(dp) );
        for(int i=0;i<T;i++){
            scanf("%s",s);
            int res1 = dfs( init(s) , K+1 , 1 , 0 );
            if( check() )   res1 -- ;
            if( res1 >= Mod )   res1 -= Mod ;
            scanf("%s",s);
            int res2 = dfs( init(s) , K+1 , 1 , 0 ) ;
            res2 = (res2 - res1 + Mod) % Mod ;
            printf("%d\n",res2) ;
        }
    }
    return 0 ;
}
