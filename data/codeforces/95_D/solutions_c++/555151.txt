#include <iostream>
#include <cstring>
#include <cstdio>
using namespace std;

const int MOD = 1000000007;
const int N = 1005;
int dp[N][N * 2];
int digit[N];
int k;

int dfs(int pos, int dist, bool doing)
{
    if (pos == -1)
        return dist == 0;
    if (!doing && dp[pos][dist] != -1)
        return dp[pos][dist];
    int end = doing ? digit[pos] : 9;
    int ans = 0;
    for (int i = 0; i <= end; i++)
    {
        int ndist = dist == 0 ? 0 : dist + 1;
        if (i == 4 || i == 7)
        {
            if (dist <= k)
                ndist = 0;
            else
                ndist = 1;
        }
        ans = (ans + dfs(pos - 1, ndist, doing && i == end)) % MOD;
    }
    if (!doing)
        dp[pos][dist] = ans;
    return ans;
}
int cal(char str[])
{
    int pos = 0;
    int len = strlen(str);
    for (int i = len - 1; i >= 0; i--)
        digit[pos++] = str[i] - '0';
    return dfs(pos - 1, k + 2, 1);
}
bool check(char str[])
{
    int dist = k + 1;
    for (int i = 0; str[i]; i++)
    {
        if (dist == 0) break;
        if (str[i] == '4' || str[i] == '7')
        {
            if (dist <= k) dist = 0;
            else dist = 1;
        }
        else dist++;
    }
    return dist == 0;
}
int main()
{
    //freopen("in.txt", "r", stdin);

    memset(dp, -1, sizeof(dp));
    int T;
    cin >> T >> k;
    char s1[N], s2[N];
    while (T--)
    {
        scanf("%s%s", s1, s2);
        int b = cal(s2);
        int a = cal(s1);
        if (check(s1)) a--;
        b = ((b - a) % MOD + MOD) % MOD;
        cout << b << endl;
    }
}
