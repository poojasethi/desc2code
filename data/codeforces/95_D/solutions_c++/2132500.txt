#include<cstdio>
#include<cstring>
#define i64 __int64
const i64 inf = 1000000007 ;
i64 d[1100][2100][2];
int tes,m,s[1100];
i64 dp(int len,int pre,int equ,int k)
{
    if(!equ&&d[len][pre][k]!=-1)    return d[len][pre][k];
    if(len==0)
        return equ?k:d[len][pre][k]=k;
    i64 res=0;
    for(int i=0;i<10;++i)
    {
        if(equ&&i>s[len])   break;
        int nexp=pre+1,nexk=k;
        if(i==4||i==7)
        {
            nexp=1;
            if(pre<=m)  nexk=1;
        }
        if(equ&&i==s[len])
            res+=dp(len-1,nexp,1,nexk);
        else
            res+=dp(len-1,nexp,0,nexk);
    }
    return equ?res%inf:d[len][pre][k]=res%inf;
}
int init(char t[])
{
    int len=strlen(t);
    for(int i=1;i<=len;++i) s[i]=t[len-i]-'0';
    return len;
}
bool ok(char t[])
{
    int pre=-100000;
    for(int i=0;t[i];++i)if(t[i]=='4'||t[i]=='7')
    {
        if(i-pre<=m)    return true;
        pre=i;
    }
    return false;
}
char t[1100];
int main()
{
    scanf("%d %d",&tes,&m);
    memset(d,-1,sizeof(d));
    while(tes--)
    {
        scanf("%s",t);
        i64 res=inf-dp(init(t),m+1,1,0);
        if(ok(t))   res++;
        scanf("%s",t);
        res+=dp(init(t),m+1,1,0);
        printf("%I64d\n",res%inf);
    }
    return 0;
}
