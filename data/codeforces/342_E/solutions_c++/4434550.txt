#include<stdio.h>
#include<string.h>
#include<queue>
using namespace std;
struct node
{
	int x,step,pre;
};
int d[100010];
vector<int> G[100010];
bool col[100010];
void bfs(int s)
{
	queue<int> q;
	while (!q.empty()) q.pop();
	q.push(s);
	d[s]=0;
	col[s]=true;
	while (!q.empty())
	{
		int x=q.front();
		q.pop();
		for (int i=0;i<G[x].size();i++)
		{
			int v=G[x][i];
			if (d[v]>d[x]+1)
			{
				d[v]=d[x]+1;
				q.push(v);
			}
		}
	}
}
int BFS(int s)
{
	if (col[s]) return 0;
	queue<node> q;
	while (!q.empty()) q.pop();
	node S;
	S.x=s;
	S.step=0;
	S.pre=0;
	q.push(S);
	while (!q.empty())
	{
		S=q.front();
		q.pop();
		for (int i=0;i<G[S.x].size();i++)
		{
			int v=G[S.x][i];
			if (v==S.pre) continue;
			if (col[v]) return S.step+1;
			else 
			{
				node tmp;
				tmp.x=v;
				tmp.step=S.step+1;
				tmp.pre=S.x;
				q.push(tmp);
			}
		}
	}
}
int main()
{
	int N,M;
	//freopen("input.txt","r",stdin);
	while (scanf("%d%d",&N,&M)!=EOF)
	{
		for (int i=1;i<=N;i++) G[i].clear();
		for (int i=1;i<N;i++)
		{
			int x,y;
			scanf("%d%d",&x,&y);
			G[x].push_back(y);
			G[y].push_back(x);
		}
		for (int i=1;i<=N;i++) d[i]=0x7FFFFFFF;
		memset(col,false,sizeof(col));
		col[1]=true;
		bfs(1);
		int cnt=0;
		for (int i=1;i<=M;i++)
		{
			int Q,P;
			scanf("%d%d",&Q,&P);
			if (Q==1)
			{
				cnt++;
				if (cnt<500) bfs(P);
				else col[P]=true;
			}
			else
			{
				if (cnt<500) printf("%d\n",d[P]);
				else printf("%d\n",BFS(P));
			}
		}
	}
	return 0;
}