#include <iostream>
#include <cstdio>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <cassert>
#include <cstring>
#include <cmath>
using namespace std;

const double EPS = 1e-6;
const double PI = 3.1415926;

struct node{
    int dist;
    vector<int> neigh;
};

node *tree;

void update(int r){
    queue<int> q;
    q.push(r);
    while (!q.empty()){
        int tmp = q.front();
        q.pop();
        for (int i = 0; i < tree[tmp].neigh.size(); i++){
            int t = tree[tmp].neigh[i];
            if (tree[tmp].dist+1 < tree[t].dist){
                tree[t].dist = tree[tmp].dist+1;
                q.push(t);
            }
        }
    }
    return;
}

int main(){
#ifdef YA
    freopen("infile", "r", stdin);
#endif

    int n, m;
    cin >> n >> m;

    tree = new node[n+1];
    for (int i = 0; i < n+1; i++){
        tree[i].dist = n+1;
        tree[i].neigh.clear();
    }

    for (int i = 0; i < n-1; i++){
        int s, t;
        cin >> s >> t;
        tree[s].neigh.push_back(t);
        tree[t].neigh.push_back(s);
    }

    vector<int> up;
    up.push_back(1);
    tree[1].dist = 0;
    for (int i = 0; i < m; i++){
        int t, v;
        cin >> t >> v;
        
        if (t == 1){
            up.push_back(v);
            tree[v].dist = 0;
        }
        else{
            for (int i = 0; i < up.size(); i++)
                update(up[i]);
            up.clear();
            cout << tree[v].dist << endl;
        } 
    }
    delete []tree;

    return 0;
}
