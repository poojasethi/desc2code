//#define OSW

#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <list>
#include <algorithm>
#include <complex>
#include <string>

using namespace std;


vector<int> e[100005];

queue<int> q;
int dist [100005];
int used [100005];

void bfs() {
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        for (int i=0; i!=e[x].size(); ++i) {
            int y = e[x][i];
            if (dist[y]>dist[x]+1) {
                dist[y] = dist[x]+1;
                q.push(y);
            }
        }
    }
}

int main() {
    #ifdef OSW
    freopen("C:\\Users\\Osw\\Desktop\\in.txt","r",stdin);
    #endif // OSW
    ios::sync_with_stdio(0);

    int n,m; cin >> n >> m;
    for (int i=0; i!=n-1; ++i) {
        int x,y; cin >> x >> y;
        e[x].push_back(y);
        e[y].push_back(x);
    }
    fill (dist+1, dist+1+n, n+1);

    q.push(1);
    dist[1] = 0;

    for (int i=0; i!=m; ++i) {
        int qq,x;
        cin >> qq >> x;
        if (1==qq) q.push(x),dist[x] = 0;
        else {
            bfs();
            cout << dist[x] << endl;
        }
    }
}


