#include <cstdio>
#include <queue>
#include <cstring>
#include <algorithm>
#define N 100010
using namespace std;

int head[N],cnt;
struct Edge{
	int v,next;
}edge[N*2];

void init(){
	memset(head,-1,sizeof(head));
	cnt=0;
}

void addedge(int u,int v){
	edge[cnt].v=v;
	edge[cnt].next=head[u];
	head[u]=cnt++;
}

int q[N],s,t;
int d[N];

void bfs(){
	while(s<=t){
		int u=q[s++];
		//vis[u]=0;
		for(int i=head[u];i!=-1;i=edge[i].next){
			int v=edge[i].v;
			if(d[v]>d[u]+1){
				d[v]=d[u]+1;
				//if(!vis[v]){
					//vis[v]=1;
					q[t++]=v;//q.push(v);
				//}
			}
		}
	}s=t=0;
}

int main(){
	int n,m;
	scanf("%d %d",&n,&m);
	init();
	for(int i=0;i<n-1;i++){
		int u,v;
		scanf("%d %d",&u,&v);
		addedge(u,v);
		addedge(v,u);
	}
	for(int i=1;i<=n;i++) d[i]=N;//vis[i]=0;
	d[1]=0;//vis[1]=1;
	s=t=0;
	q[t++]=1;
	for(int i=0;i<m;i++){
		int type,v;
		scanf("%d %d",&type,&v);
		if(type==1){
			d[v]=0;
			//if(!vis[v]){
				q[t++]=v;//q.push(v);
				//vis[v]=1;
			//}
		}
		else{
			bfs();
			printf("%d\n",d[v]);
		}
	}
    return 0;
}
