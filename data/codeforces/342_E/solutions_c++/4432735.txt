#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <cstring>
#include <string>
#include <cmath>
#include <cassert>
#include <ctime>
#include <algorithm>
#include <sstream>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <cstdlib>
#include <cstdio>
#include <iterator>
#include <functional>
#include <bitset>
#include <iostream>

using namespace std;

#define INF (1<<29)
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
#define TIMESTAMP(x) eprintf("["#x"] Time : %.3lf s.\n", clock()*1.0/CLOCKS_PER_SEC)

int n, m;

#define NMAX 100005

vector<int> vec[NMAX];
int d[NMAX];
queue<int>q;

void bfs(void){
	while(!q.empty()){
		int node = q.front(); q.pop();
		
		for(unsigned i = 0; i < vec[node].size(); ++i)
			if(d[vec[node][i]] > d[node] + 1){ 
				d[vec[node][i]] = d[node] + 1;
				q.push(vec[node][i]);
			}
	}
}

int main()
{
	cin >> n >> m;
	
	for(int i = 0; i < n - 1; ++i)
	{
		int a, b;
		cin >> a >> b;
		vec[a].push_back(b);
		vec[b].push_back(a);
	}
	
	for(int i = 0; i <= n; ++i) d[i] = (1<<29);
	
	q.push(1);
	d[1] = 0;
	bfs();
			
	for(int i = 0;i < m; ++i){
		int type, node;
		cin >> type >> node;
		if(type == 1){
			d[node] = 0;
			q.push(node);
		}	
		else{
			bfs();
			cout << d[node] << endl;
		}
	}

	return 0;
}