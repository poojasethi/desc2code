#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
typedef unsigned int uint;
const int N = 100005;
int dis[N];
char vis[N];
int n, m;
vector<int>vt;
queue<int>q;

struct Edge {
	int v, nxt;
}e[N<<1];
int idx, head[N];

void addedge(int a, int b) {
	e[idx].v = b, e[idx].nxt = head[a];
	head[a] = idx++;
}

void spread() {
	memset(vis, 0, sizeof (vis));
	for (uint i = 0; i < vt.size(); ++i) {
		dis[vt[i]] = 0;
		vis[vt[i]] = 1;
		q.push(vt[i]);
	}
	vt.clear();
	while (!q.empty()) {
		int u = q.front(); q.pop();
		vis[u] = 0;
		for (int i = head[u]; ~i; i = e[i].nxt) {
			int v = e[i].v;
			if (dis[v] > dis[u] + 1) {
				dis[v] = dis[u] + 1;
				if (!vis[v]) vis[v] = 1, q.push(v);
			}
		}
	}
}

int main() {
	int a, b;
	idx = 0;
	memset(head, 0xff, sizeof (head));
	memset(dis, 0x3f, sizeof (dis));
	scanf("%d %d", &n, &m);
	for (int i = 1; i < n; ++i) {
		scanf("%d %d", &a, &b);
		addedge(a, b), addedge(b, a);
	}
	vt.push_back(1);
	for (int i = 0; i < m; ++i) {
		scanf("%d %d", &a, &b);
		if (a == 1) vt.push_back(b);
		else spread(), printf("%d\n", dis[b]);
	}
	return 0;
}