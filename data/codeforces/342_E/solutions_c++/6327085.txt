//In the name of God
#include <iostream>
#include <vector>
using namespace std;
const int N = 1e5 + 5, oo = 1e9, sq = 320, lg = 17;

int n, m, h[N], q[3 * N], st, ed, dis[N], par[N][lg];
bool mark[N];
vector<int> adj[N];

void dfs(int v) {
	mark[v] = true;
	for (int i = 1; i < lg; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (int i = 0; i < adj[v].size(); i++) {
		int u = adj[v][i];
		if (!mark[u]) {
			dis[u] = h[u] = h[v] + 1;
			par[u][0] = v;
			dfs(u);
		}
	}
}
void bfs() {
	for (int i = st; i < ed; i++)
		dis[q[i]] = 0;
	while (st < ed) {
		int v = q[st++];
		for (int i = 0; i < adj[v].size(); i++) {
			int u = adj[v][i];
			if (dis[u] > dis[v] + 1) {
				dis[u] = dis[v] + 1;
				q[ed++] = u;
			}
		}
	}
	st = ed = 0;
}
int lca(int u, int v) {
	if (h[u] < h[v])
		swap(u, v);
	for (int i = lg - 1; i >= 0; i--)
		if (h[u] - h[v] >= 1 << i)
			u = par[u][i];
	for (int i = lg - 1; i >= 0; i--)
		if (par[u][i] != par[v][i]) {
			v = par[v][i];
			u = par[u][i];
		}
	return u == v? u: par[u][0];
}

int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		u--, v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(0);
	while (m--) {
		int t, v;
		cin >> t >> v; v--;
		if (t == 1) {
			q[ed++] = v;
			if (ed - st == sq)
				bfs();
		}
		else {
			int ans = dis[v];
			for (int i = st; i < ed; i++)
				ans = min(ans, h[v] + h[q[i]] - 2 * h[lca(v, q[i])]);
			cout << ans << '\n';
		}
	}
	return 0;
}
