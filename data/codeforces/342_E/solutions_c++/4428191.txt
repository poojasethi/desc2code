#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <queue>
using namespace std;
const int ARRLEN = 100005;
const int INF = 1 << 30;
vector<int> tree[ARRLEN];
bool visited[ARRLEN];
int depth[ARRLEN];

void bfs(vector<int> x) {
    int q[2][ARRLEN];
    int len[2];
    int s = 0, t = 1;
    memset(visited, 0, sizeof(visited));
    int dist = 0;
    len[s] = 0;
    for(vector<int>::iterator it = x.begin(); it != x.end(); ++it) {
        q[s][len[s]++] = *it;
        depth[*it] = 0;
    }
    while(len[s]) {
        dist++;
        len[t] = 0;
        for(int i = 0; i < len[s]; ++i) {
            int ind = q[s][i];
            for(vector<int>::iterator it = tree[ind].begin(); it != tree[ind].end(); ++it) {
                if(!visited[*it] && depth[*it] > dist) {
                    depth[*it] = dist;
                    q[t][len[t]++] = *it;
                }
            }
        }
        s ^= 1; t ^= 1;
    }
}

int main() {
   // freopen("input", "r", stdin);
    int n, m;
    scanf("%d%d", &n, &m);
    for(int i = 0; i < n - 1; ++i) {
        int s, t;
        scanf("%d%d", &s, &t);
        tree[s].push_back(t);
        tree[t].push_back(s);
    }
    for(int i = 1; i <= n; ++i) {
        depth[i] = INF;
    }
    vector<int> x;
    x.push_back(1);
    for(int i = 0; i < m; ++i) {
        int flag, val;
        scanf("%d%d", &flag, &val);
        if(flag == 2) {
            bfs(x);
            x.clear();
            printf("%d\n", depth[val]);
        } else {
            x.push_back(val);
        }
    }
    return 0;
}
