#include<iostream>
#include<vector>
#include<algorithm>
#include<cstring>
using namespace std;

#define pb push_back

const int maxn=100000+10,inf=1e9,SQRT=350;
int n,m,par[maxn][20],h[maxn],dis[maxn],number;
bool mark[maxn];
vector <int> adj[maxn],vert;

void dfs(int u){
	mark[u]=true;
	for(int i=0;i<adj[u].size();i++){
		int v=adj[u][i];
		if(!mark[v]){
			par[v][0]=u;
			h[v]=h[u]+1;
			for(int i=1;i<20;i++)	par[v][i]=par[par[v][i-1]][i-1];
			dfs(v);
		}
	}
}

inline int LCA(int x,int y){
	if(x==y)	return x;
	if(h[x]>h[y])	swap(x,y);
	for(int i=19;i>=0;i--)
		if(h[par[y][i]]>=h[x])	y=par[y][i];
	if(x==y)	return x;
	for(int i=19;i>=0;i--)
		if(par[x][i]!=par[y][i]){x=par[x][i];y=par[y][i];}
	return par[x][0];		
}

void BFS(){
	memset(mark,0,sizeof(mark));
	int head=0,tail=vert.size();
	for(int i=0;i<vert.size();i++){dis[vert[i]]=0;mark[vert[i]]=1;}
	while(head<tail){
		int u=vert[head];
		head++;
		for(int i=0;i<adj[u].size();i++){
			int v=adj[u][i];
			if(!mark[v]){
				mark[v]=1;
				vert.pb(v);
				dis[v]=min(dis[v],dis[u]+1);
				tail++;
			}
		}
	}
	vert.clear();
}

int main(){
	cin>>n>>m;
	for(int i=1;i<n;i++){
		int a,b;cin>>a>>b;
		adj[a].pb(b);adj[b].pb(a);
	}
	for(int i=0;i<20;i++)	par[1][i]=1;
	dfs(1);
	
	vert.pb(1);
	for(int i=1;i<=n;i++)	dis[i]=inf;
	
	for(int i=0;i<m;i++){
		int type,v;cin>>type>>v;
		if(type==1)	vert.pb(v);
		else{
			int ans=dis[v];
			for(int i=0;i<vert.size();i++)
				ans=min(ans,h[v]+h[vert[i]]-2*h[LCA(v,vert[i])]);
			cout<<ans<<endl;
		}
		if(i/SQRT>number){
			number++;
			BFS();
		}
	}
}