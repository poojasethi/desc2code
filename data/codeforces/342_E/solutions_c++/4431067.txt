#include <iostream>
#include <queue>
using namespace std;
#define MAXN 111111
int N,M,u,v,t;
int Dis[MAXN];
queue<int> Q;
struct Edge
{
    int v;
    Edge* next;
}Edges[MAXN<<1];
int tot;
Edge* Head[MAXN];
void add(int u,int v)
{
    Edges[++tot].v=v;
    Edges[tot].next=Head[u];
    Head[u]=Edges+tot;
}
void BFS()
{
    while(!Q.empty())
    {
        int u=Q.front();
        Q.pop();
        for(Edge* p=Head[u];p;p=p->next)
        {
            int v=p->v;
            if(Dis[v]>Dis[u]+1)
            {
                Dis[v]=Dis[u]+1;
                Q.push(v);
            }
        }
    }
}
int main()
{
    cin>>N>>M;
    for(int n=2;n<=N;++n)
        Dis[n]=N;
    for(int n=1;n<N;++n)
    {
        cin>>u>>v;
        add(u,v);
        add(v,u);
    }
    Q.push(1);
    BFS();
    while(M--)
    {
        cin>>t>>u;
        if(t==1)
        {
            Dis[u]=0;
            Q.push(u);
        }
        else
        {
            BFS();
            cout<<Dis[u]<<endl;
        }
    }
    return 0;
}
