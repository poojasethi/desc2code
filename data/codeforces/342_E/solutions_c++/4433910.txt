#include <cstdio>
#include <iostream>
#include <queue>

using namespace std;

#define N 100001

/// Globals
queue<int> q;
int f[N], n[N << 1], v[N << 1], d[N], size;

inline void make_edge(int a, int b);
inline void bfs();

int main(int argc, char **argv){
	int n, m;
	cin >> n >> m;
	
	for(register int i = 0; i < n - 1; i++){
		register int a, b;
		cin >> a >> b;
		make_edge(a, b); make_edge(b, a);
	}

	//Set initial distances
	for(register int i = 1; i <= n; i++) d[i] = n;
	d[1] = 0;
	q.push(1);
	bfs();

	while(m--){
		register int a, b;
		cin >> a >> b;
		if(a == 1){
			d[b] = 0;
			q.push(b);
		} else {
			bfs();
			printf("%d\n", d[b]);
		}
	}

	//system("pause");
	return 0;
}

inline void make_edge(int a, int b){
	v[++size] = b;
	n[size] = f[a];
	f[a] = size;
}

inline void bfs(){
	register int x;
	while(!q.empty()){
		//Get the next node
		x = q.front(); q.pop();

		for(register int p = f[x]; p; p = n[p])
			if(d[x] + 1 < d[v[p]]){
				//update distance and enque for updating
				d[v[p]] = d[x] + 1;
				q.push(v[p]);
			}
	}
}