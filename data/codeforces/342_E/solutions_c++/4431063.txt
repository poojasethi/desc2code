#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#define maxn 100005
#define LL int
using namespace std;

vector< int > g[maxn];
int n, m;
int d[maxn];
int vis[maxn];
queue<int> q;
inline bool scan_d(LL &num)
{
    char in;
    bool IsN=false;
    in=getchar();
    if(in==EOF) return false;
    while(in!='-'&&(in<'0'||in>'9')) in=getchar();
    if(in=='-')
    {
        IsN=true;
        num=0;
    }
    else num=in-'0';
    while(in=getchar(),in>='0'&&in<='9')
    {
        num*=10,num+=in-'0';
    }
    if(IsN) num=-num;
    return true;
}
void bfs()
{
    memset(vis, 0, sizeof(vis));
    while(!q.empty())
    {
        int u = q.front(); q.pop();
        for(int i = 0; i < g[u].size(); i ++)
        {
            int v = g[u][i];
            if(!vis[v])
            {
                if(d[v] > d[u] + 1)
                {
                    d[v] = d[u] +1;
                    q.push(v);
                }
            }
        }
    }
}
int main()
{
    cin >> n >> m;
    memset(d, 0x3f, sizeof(d));
    for(int i = 0; i < n-1; i ++)
    {
        int u, v;
        scan_d(u);scan_d(v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
            d[1] = 0;
        q.push(1);
    while(m--)
    {
        int cmd, v;
        scan_d(cmd);
        scan_d(v);

        if(cmd == 1)
        {
            d[v] = 0;
            q.push(v);
        }
        else
        {
            bfs();
            printf("%d\n", d[v]);
        }

    }
}
