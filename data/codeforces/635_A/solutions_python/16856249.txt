# -*- coding: utf-8 -*-

class Orchestra(object):
	def __init__(self):
		self.r, self.c, self.n, self.k = map(int, raw_input().split())
		self.L = []
		for i in range(self.r):
			self.L.append([])
			for j in range(self.c):
				self.L[i].append(0)
		for i in range(self.n):
			x, y = map(int, raw_input().split())
			self.L[x-1][y-1] = 1
		L = self.L
		for i in range(self.r):
			for j in range(self.c):
				if i > 0:
					L[i][j] += L[i-1][j]
				if j > 0:
					L[i][j] += L[i][j-1]
				if i > 0 and j > 0:
					L[i][j] -= L[i-1][j-1]
	
	def test(self):
		for i in range(self.r):
			s = '|'
			for j in range(self.c):
				s += ' ' + str(self.L[i][j])
			print s
	
	def get(self, x1, y1, x2, y2):
		L = self.L
		res = L[x2][y2]
		if x1 > 0:
			res -= L[x1-1][y2]
		if y1 > 0:
			res -= L[x2][y1-1]
		if x1 > 0 and y1 > 0:
			res += L[x1-1][y1-1]
		return res
	def cal(self):
		r, c, res = self.r, self.c, 0
		for x1 in range(r):
			for y1 in range(c):
				for x2 in range(x1, r):
					for y2 in range(y1, c):
						if self.get(x1, y1, x2, y2) >= self.k:
							res += 1
							#print 'one : %d : (%d,%d) to (%d,%d)' % (res, x1,y1,x2,y2)
							#print self.get(x1, y1, x2, y2)
		return res

if __name__ == '__main__':
	orchestra = Orchestra()
	print orchestra.cal()
	#orchestra.test()

