import sys
from Queue import Queue
from sets import Set

class pythonin:
    _data = []
    _ldata = []
    _cur = 0
    _lcur = 0
    
    def __init__(self):
        while True:
            try: self._ldata.append(raw_input())
            except EOFError : break

    def _convert(self):
        if self._lcur == len(self._ldata) : return
        l = self._ldata[self._lcur].split(" ")
        self._lcur += 1
        for x in l :
            if x != "" and x != "\t" :
                self._data.append(x)
        
    def eof(self) : 
        self._convert()
        return self._cur == len(self._data)

    def nextToken(self) :
        if self.eof() : return
        self._cur += 1
        return self._data[self._cur - 1]
    
    def nextInt(self) :
        return int(self.nextToken())
    
    def nextFloat(self) :
        return float(self.nextToken())
    
    def nextLine(self) :
        if self._lcur == len(self._ldata) : return 
        self._lcur += 1
        return self._ldata[self._lcur - 1]
    
#sys.stdin = open("input.txt", "r")
#sys.stdout = open("output.txt", "w")

pin = pythonin()

k = [pin.nextInt() for i in xrange(0, 3)]
t = [pin.nextInt() for i in xrange(0, 3)]

n = pin.nextInt()

c = [pin.nextInt() for i in xrange(0, n)]

was = c

def pushQ(cnt, time, q) :
    l = 0
    res = []
    s = min(len(q), cnt)
    for i in xrange(0, s) : 
        res.append(q[i] + time)
    for i in xrange(s, len(q)) :
        if q[i] - res[l] >= 0 :
            res.append(q[i] + time)
            l += 1
        else :
            res.append(q[i] + time + (res[l] - q[i]))
            l += 1
    return res

for i in xrange(0, 3) :
    c = pushQ(k[i], t[i], c)

res = 0
    
for i in xrange(0, n) :
    res = max(res, c[i] - was[i])
    
print res