#include <cstdio>
#include <cassert>
#include <iostream>
#include <cstring>
using namespace std;

const int N = 105;
int ans[N][N];
bool vis[N][N][2];
int dist[N][N][2];
pair<pair<int, int>, int> list[N * N * 2];
int clist, m, n;

pair<pair<int, int>, int> make_triple(int x, int y, int z)
{return make_pair(make_pair(x, y), z);}

void work()
{
	memset(vis, 0, sizeof(vis));
	memset(dist, 0x3f, sizeof(dist));
	vis[m][m][0] = true;
	dist[m][m][0] = 0;
	list[clist = 1] = make_triple(m, m, 0);
	for (int l = 1; l <= clist; ++l) {
		int lg = list[l].first.first, lw = list[l].first.second;
		int rg = m - lg, rw = m - lw;
		if (list[l].second == 0) {
			for (int g = 0; g <= lg; ++g) for (int w = 0; w <= lw && (w <= g || g == 0) && w + g <= n; ++w) {
				if (g + w == 0) continue;
				if (lw - w > lg - g && lg - g != 0) continue;
				if (rw + w > rg + g && rg + g != 0) continue;
				if (!vis[lg - g][lw - w][1]) {
					vis[lg - g][lw - w][1] = true;
					list[++clist] = make_triple(lg - g, lw - w, 1);
					dist[lg - g][lw - w][1] = dist[lg][lw][0] + 1;
				}
			}
		} else {
			for (int g = 0; g <= rg; ++g) for (int w = 0; w <= rw && (w <= g || g == 0) && w + g <= n; ++w) {
				if (g + w == 0) continue;
				if (lw + w > lg + g && lg + g != 0) continue;
				if (rw - w > rg - g && rg - g != 0) continue;
				if (!vis[lg + g][lw + w][0]) {
					vis[lg + g][lw + w][0] = true;
					list[++clist] = make_triple(lg + g, lw + w, 0);
					dist[lg + g][lw + w][0] = dist[lg][lw][1] + 1;
				}
			}
		}
	}
	ans[m][n] = min(dist[0][0][0], dist[0][0][1]);
	//printf("%d %d:%d\n", m, n, dist[0][0][1]);
}

int tans[N][N];
int main()
{

	scanf("%d%d", &m, &n);
	if (n == 1) {
		printf("-1\n");
		return 0;
	}
	if (n == 2) {
		if (m == 1) printf("1\n"); else 
		if (m == 2) printf("5\n"); else
		if (m == 3) printf("11\n"); else
		printf("-1\n");
		return 0;
	}
	if (n == 3) {
		if (m == 1) printf("1\n"); else
		if (m == 2) printf("3\n"); else
		if (m == 3) printf("5\n"); else
		if (m == 4) printf("9\n"); else
		if (m == 5) printf("11\n"); else
		printf("-1\n");
		return 0;
	}
	if (m == 1) {
		printf("1\n");
		return 0;
	}
	int ret = 0;
	if ((n - 1) & 1) 
		ret = (m - 2) / (n / 2 - 1) * 2 + 1;
	else {
		int l3 = n / 2 + 1;
		int r3 = n - 1;
		int l7 = n + n / 2 - 1;
		int r7 = n * 2 - 3;
		if (m < l3)
			ret = 1;
		else if (m <= r3)
			ret = 3;
		else if (m < l7)
			ret = 5;
		else if (m <= r7)
			ret = 7;
		else 
			ret = (m - r7 - 1) / (n / 2 - 1) * 2 + 9;
	}
	printf("%d\n", ret);
	/*
	for (m = 1; m <= 50; ++m) for (n = 1; n <= 20; ++n) work();
	for (m = 1; m <= 20; ++m) for (n = 1; n <= 20; ++n) {
		int tn = n / 2;
		if (tans[m][n] <= 0) tans[m][n] = 1;
	}
	for (m = 1; m <= 20; ++m) for (n = 4; n <= 20; ++n) {
		int tn = n / 2;
		tans[m][n] = (m - 2) / (tn - 1) * 2 + 1;
		if (tans[m][n] < 0) tans[m][n] = 1;
		if (n == 20) printf("\n");
	}
	for (m = 1; m <= 50; ++m) for (n = 1; n <= 20; ++n) {
		if (ans[m][n] == 0x3f3f3f3f) printf(" NO"); else {
		printf("%3d", ans[m][n]);
		if (ans[m][n] != tans[m][n]) {
			int t = t;
			t += 2;
			t -= t;
		}
		}
		if (n == 20) printf("\n");
	}
	*/
}