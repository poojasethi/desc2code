#include <cstring>

#include <iostream>
#include <algorithm>
using namespace std;

typedef long long LL;
typedef LL mat[2][2];

mat A, B, C;
LL modu;

inline void mult (mat A, mat B, mat C)
{
	mat D;
	D[0][0] = (A[0][0] * B[0][0] + A[0][1] * B[1][0]) % modu;
	D[0][1] = (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % modu;
	D[1][0] = (A[1][0] * B[0][0] + A[1][1] * B[1][0]) % modu;
	D[1][1] = (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % modu;
	memcpy(C, D, sizeof(mat));
}

inline LL fpow (LL r)
{
	B[0][0] = B[1][1] = 1; B[0][1] = B[1][0] = 0;
	A[0][0] = 0, A[0][1] = A[1][0] = A[1][1] = 1;
	for (; r; r >>= 1, mult(A, A, A)) if (r & 1) mult(B, A, B);
	return B[0][1];
}

int main ()
{
	LL l, r, k, re(1);
	cin >> modu >> l >> r >> k;
	--l;
	for (LL i = 1; i * i <= r; ++i)
	{
		LL j = r / i;
		if (r / i - l / i >= k) re = max(re, i);
		if (r / j - l / j >= k) re = max(re, j);
	}
	cout << fpow(re) << endl;
	return 0;
}

