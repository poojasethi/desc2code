#include <iostream>
#include <utility>
using namespace std;

long long m,l,r,k,D,N;
typedef pair<long long, long long> PLL;

PLL recfib(long long n) {
  if ( !n ) return PLL(0,1);
  PLL ab = recfib( n>>1 );
  long long a = ab.first % m;
  long long b = ab.second % m;
  long long c = a * ((2*b - a)%m);
  long long d = ((a*a)%m) + ((b*b)%m);
  if ( n&1 ) return PLL(d,c+d);
  return PLL(c,d);
}

int
main() {
  cin>>m>>l>>r>>k;
  D = (r-l)/(k-1);
  while ( D>1 && (1+(r/D)-((l+D-1)/D))<k ) {
    N = 1 + (r/D);
    D -= ( ((N*D)-r) + (N-1) ) / N;
  }
  cout << (((recfib(D).first%m)+m)%m) << endl;
  return 0;
}
/*
import sys
def recfib(n,m):
  if n==0: return (0,1,)
  a, b = recfib(n / 2,m)
  return ( [ a*(((2*b)-a)%m), ((b*b)%m)+((a*a)%m)][n%2]%m, [ ((b*b)%m)+((a*a)%m), b*((2*a+b)%m)][n%2]%m, )
m,l,r,k = map( int, sys.stdin.readline().strip().split()[:4] )
D = (r-l)/(k-1)
while D > 1 and (1+(r/D)-((l+D-1)/D))<k:
  N = 1 + (r/D)
  D -= ( ((N*D)-r) + (N-1) ) / N
print( recfib( D, m)[0] )
*/
