#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
typedef long long ll;

int m;
ll l,r,k;

struct Mat{
   ll mat[3][3];
};

Mat operator * (Mat a,Mat b){
   Mat c;
   memset(c.mat,0,sizeof(c.mat));
   for(int i=0;i<2;i++){
       for(int k=0;k<2;k++){
           if(a.mat[i][k]){
               for(int j=0;j<2;j++){
                   c.mat[i][j]=(c.mat[i][j]+a.mat[i][k]*b.mat[k][j])%m;
               }
           }
       }
   }
   return c;
}

Mat operator ^ (Mat a,ll p){
   Mat b;
   memset(b.mat,0,sizeof(b.mat));
   for(int i=0;i<2;i++)
       b.mat[i][i]=1;
   while(p){
       if(p&1) b=b*a;
       a=a*a;
       p>>=1;
   }
   return b;
}

int main()
{
    ios::sync_with_stdio(false);
    cin>>m>>l>>r>>k;
    int x=(int)sqrt(r*1.0);
    ll ans=1;
    for(int i=1;i<=x;i++){
        ll j=r/i;
        if(i>ans&&r/i-(l-1)/i>=k) ans=i;
        if(j>ans&&r/j-(l-1)/j>=k) ans=j;
    }
    Mat A;
    A.mat[0][0]=1;A.mat[0][1]=1;
    A.mat[1][0]=1;A.mat[1][1]=0;
    A=A^(ans-1);
    cout<<A.mat[0][0]%m<<endl;
    return 0;
}
