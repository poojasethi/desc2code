// HPFDF
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

#define rep(i,n) for(int i=0;i<(n);++i)
#define fab(i,a,b) for(int i=(a);i<=(b);++i)
#define clr(a) memset(a,0,sizeof(a))
typedef long long ll;

typedef ll mx[2][2];
mx a,b,c;

ll d,l,r,k;


void mul(mx x, mx y)
{
    clr(c);
    rep(i,2) rep(j,2) rep(k,2)
        (c[i][j]+=x[i][k]*y[k][j]%d) %= d;
    memcpy(x,c,sizeof(mx));
}

void pmx(ll x)
{
    clr(a),clr(b);

    a[0][1]=a[1][0]=a[1][1]=1;
    b[0][0]=b[1][1]=1;

    while (x)
    {
        if (x&1)
            mul(b,a);
        mul(a,a);
        x>>=1;
    }
}

int main()
{
    cin>>d>>l>>r>>k;

    --l;
    ll x=1;

    for(ll i=1;i*i<=r;++i)
    {
        ll j=r/i;
        if (r/(i)-l/(i)>=k)
            x=max(x,i);
        if (r/(j)-l/(j)>=k)
            x=max(x,j);
    }
    
    pmx(x);

    cout << b[0][1] % d << endl;
    return 0;
}




