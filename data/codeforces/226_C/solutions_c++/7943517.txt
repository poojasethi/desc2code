#include<cstdio>
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long LL;
LL m, l, r, k, G;
struct Matrix{
    LL a, b, c, d;
    };
Matrix Mul(Matrix A, Matrix B, LL mo)
{
    Matrix D;
    D.a=(A.a * B.a + A.b * B.c) % mo;
    D.b=(A.a * B.b + A.b * B.d) % mo;
    D.c=(A.c * B.a + A.d * B.c) % mo;
    D.d=(A.c * B.b + A.d * B.d) % mo;
    return D;
}
Matrix Pow(LL x, LL mo)
{
    Matrix Ans={1, 0, 0, 1}, t={0, 1, 1, 1};
    while (x)
    {
        if (x & 1) Ans=Mul(Ans, t, mo);
        t=Mul(t, t, mo);
        x >>= 1;
    }
    return Ans;
}
int main()
{
    scanf("%I64d%I64d%I64d%I64d", &m, &l, &r, &k);
    for (LL i=1; i<l;)
    {
        LL L=(l - 1) / ((l - 1) / i),
           R=r / (r / i);
        if (r / i - (l - 1) / i >= k) G=min(L, R);
        i=min(L, R) + 1;
    }
    for (LL i=l; i<=r;)
    {
        LL R=r / (r / i);
        if (r / i - (l - 1) / i >= k ) G=R;
        i=R + 1;
    }
    if (G <= 2) {printf("%I64d",1 % m); return 0;}
    Matrix Ans=Pow(G - 2, m);
    printf("%I64d\n", (Ans.b + Ans.d) % m);
}