class Matrix:
    def __init__(self):
        self.a = [[1, 1], 
                  [1, 0],]
    def clear(self):
        for i in xrange(2):
            for j in xrange(2):
                self.a[i][j] = 0
    def unit(self):
        self.a[0][0] = self.a[1][1] = 1
        self.a[1][0] = self.a[0][1] = 0
    def mul(self, other, mod):
        p = Matrix()
        p.clear()
        for i in xrange(2):
            for j in xrange(2):
                for k in xrange(2):
                    p.a[i][j] = (p.a[i][j] + self.a[i][k] * other.a[k][j]) % mod
        return p

def cal_max_gcd(l, r, k):
    ret = (r - l) / (k - 1)
    while ret > 1 and r / ret - (l - 1) / ret < k:
        N = 1 + (r / ret)
        ret -= ((N * ret - r) + (N - 1)) / N
    return ret
def cal_fib(x, mod):
    if x == 1 or x == 2: return 1 % mod
    x -= 2
    tem = Matrix()
    ret = Matrix()
    ret.unit()
    while x:
        if x & 1: ret = ret.mul(tem, mod)
        x >>= 1
        tem = tem.mul(tem, mod)
    return (ret.a[0][0] + ret.a[0][1]) % mod

mod, l, r, k = map(int, raw_input().split())
print cal_fib(cal_max_gcd(l, r, k), mod)




