#include<iostream>
#include<cstdio>
#include<map>
using namespace std;

const int N=100005;
int n,a[N];
int l[N<<2],r[N<<2];
pair<int,int> mx[N<<2];
long long sum,dp[N];

inline int read()
{
	int a=0,f=1; char c=getchar();
	while (c<'0'||c>'9') {if (c=='-') f=-1; c=getchar();}
	while (c>='0'&&c<='9') {a=a*10+c-'0'; c=getchar();}
	return a*f;
}

void build(int k,int x,int y)
{
	l[k]=x; r[k]=y;
	if (l[k]==r[k]) 
	{
		mx[k]=make_pair(a[l[k]],l[k]);
		return;
	}
	int mid=l[k]+r[k]>>1;
	build(k<<1,x,mid); build(k<<1|1,mid+1,y);
	mx[k]=max(mx[k<<1],mx[k<<1|1]);
}

pair<int,int> query(int k,int x,int y)
{
	if (l[k]==x&&r[k]==y) return mx[k];
	int mid=l[k]+r[k]>>1;
	if (y<=mid) return query(k<<1,x,y);
	else if (x>mid) return query(k<<1|1,x,y);
	else return max(query(k<<1,x,mid),query(k<<1|1,mid+1,y));
}

int main()
{
	n=read();
	for (int i=1;i<n;i++) a[i]=read();
	build(1,1,n);
	for (int i=n-1;i;i--)
	{
		pair<int,int> ans=query(1,i+1,a[i]);
		int m=ans.second;
		dp[i]=dp[m]-a[i]+m+n-i;
		sum+=dp[i];
	}
	cout << sum << endl;
	return 0;
}