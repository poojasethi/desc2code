#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define lson rt<<1,l,mid
#define rson rt<<1|1,mid+1,r
#define inf 0x7f7f7f7f7f7f7f7f
#define maxn 100005
ll tree[maxn<<2];
int n,a[maxn];
void update(int rt,int l,int r,int pos,ll val){
	if(l==r){ tree[rt]=val; return; }
	int mid=(l+r)>>1;
	if(pos<=mid)update(lson,pos,val);
	else update(rson,pos,val);
	tree[rt]=min(tree[rt<<1],tree[rt<<1|1]);
}
ll query(int rt,int l,int r,int ql,int qr){	
	if(ql<=l&&qr>=r)return tree[rt];
	int mid=(l+r)>>1;
	ll ans=inf;
	if(ql<=mid)ans=min(ans,query(lson,ql,qr));
	if(qr>mid)ans=min(ans,query(rson,ql,qr));
	return ans;
}
int main(){
	scanf("%d",&n);
	for(int i=1;i<n;i++)
		scanf("%d",&a[i]);
	memset(tree,0x7f,sizeof(tree));//维护dp[i]+i的最小值
	update(1,1,n,n,n);//dp[n]=0
	ll ans=0;
	for(int i=n-1;i;i--){
		ll val=query(1,1,n,i+1,a[i])+n-a[i]-i;
		ans+=val,update(1,1,n,i,val+i);
	}
	printf("%I64d\n",ans);
	return 0;
}
