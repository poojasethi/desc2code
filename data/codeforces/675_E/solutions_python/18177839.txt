MAX = 100000

def push(loc, value):
	key = value + loc
	cur = base_loc + loc
	tree[cur] = key * MAX + loc
	while cur > 1:
		cur /= 2
		if tree[cur] / MAX > key:
			tree[cur] = key * MAX + loc
		else:
			break

def minimum(loc):
	cur = 1
	cur_low = 0
	cur_high = tree_width
	sofar = 5000000000 * MAX
	while cur < tree_size:
		if tree[cur] < sofar and tree[cur] % MAX <= loc:
			sofar = tree[cur]
		mid = (cur_low + cur_high) / 2
		if loc < mid:
			cur = cur * 2
			cur_high = mid
		else:
			if cur * 2 < tree_width:
				if tree[cur * 2] < sofar and tree[cur * 2] % MAX <= loc:
					sofar = tree[cur * 2]
			cur = cur * 2 + 1
			cur_low = mid
	return sofar

n = input()
data = map(int, raw_input().split())

base_loc = 2 ** n.bit_length()
tree_width = 2 ** n.bit_length()
tree_size = (2 ** n.bit_length()) * 2
tree = [5000000000 * MAX] * (tree_size)
s = 1l
push(n - 2, 1)
i = n - 3
while i >= 0:
	ai = data[i] - 1
	m = minimum(ai)
	numticket = n - 1 - ai + m / MAX - i
	push(i, numticket)
	s += numticket
	i -= 1

print s

 	      	 			  		 		  	 			  		