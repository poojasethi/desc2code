def push(loc, value):
	key = value + loc
	cur = base_loc + loc
	tree[cur] = (key, loc, value)
	while cur > 1:
		cur /= 2
		if tree[cur][0] > key:
			tree[cur] = (key, loc, value)
		else:
			break

def minimum(loc):
	cur = 1
	cur_low = 0
	cur_high = tree_width
	sofar = (5000000000, -1, 0)
	while cur < tree_size:
		if tree[cur][1] <= loc and (tree[cur][0] < sofar[0]):
			sofar = tree[cur]
		mid = (cur_low + cur_high) / 2
		if loc < mid:
			cur = cur * 2
			cur_high = mid
		else:
			if cur * 2 < tree_width:
				if tree[cur * 2][1] <= loc and (tree[cur * 2][0] < sofar[0]):
					sofar = tree[cur * 2]
			cur = cur * 2 + 1
			cur_low = mid
	return sofar

n = input()
data = map(int, raw_input().split())

base_loc = 2 ** n.bit_length()
tree_width = 2 ** n.bit_length()
tree_size = (2 ** n.bit_length()) * 2
tree = [(5000000000, -1, 0)] * (tree_size)
s = 1
push(n - 2, 1)
i = n - 3
while i >= 0:
	ai = data[i] - 1
	m = minimum(ai)
	numticket = n - 1 - ai + m[2] + m[1] - i
	push(i, numticket)
	s += numticket
	i -= 1

print s

	 	 		      	  	 	  		    			