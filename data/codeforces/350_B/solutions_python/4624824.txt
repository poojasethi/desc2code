from collections import deque
n = input()
tip = list(map(int, raw_input().split()))
a = list(map(int, raw_input().split()))

inf = 10**9
v = [ [] for i in range(0, n)]

startingFrom = [0 for i in range(0, n)]

for i in range(0, n):
    if a[i] == 0: continue
    startingFrom[a[i]-1] += 1

    v[i].append(a[i]-1)

q = deque([i for i in range(0, n) if tip[i] == 1])      #bag toate hotelurile in coada
cost = [inf for i in range(0, n)]
pre = [-1 for i in range(0, n)]
for i in range(0, n):
    if tip[i] == 1: cost[i] = 0

def bfs():
    global q, v, startingFrom, cost
    while len(q) > 0:
        cur = q[0]
        q.popleft()

        for vecin in v[cur]:
            if startingFrom[vecin] != 1: continue

            if cost[vecin] == inf:
                cost[vecin] = cost[cur] + 1
                pre[vecin] = cur
                q.append(vecin)


bfs()

sol = 0
for i in range(0, n):
    if cost[i] != inf: sol = max(sol, cost[i])
print sol+1       #lungimea lantului

for i in range(0, n):
    if cost[i] == sol:
        sol = i
        break


v = []
while tip[sol] != 1:
    v.append(sol)
    sol = pre[sol]
v.append(sol)

print ' '.join(str(x+1) for x in v)

#print ' '.join(str(x) for x in cost)
#print ' '.join(str(x) for x in pre)




    
