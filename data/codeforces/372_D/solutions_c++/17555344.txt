#include <bits/stdc++.h>
using namespace std;
#define DEBUG(x) cerr << #x << " = " << x << endl;
typedef set<int>::iterator Iterator;

const int N = (int) 1e5 + 10;
int n, k, sz, x[N], r[N], timer, h[N], p[N][21];
vector<int> adj[N];
bool fre[N];
set<int> S;

void DFS(int u) {
	fre[u] = false; x[u] = ++timer; r[timer] = u;
	for (int i = 0; i < (int) adj[u].size(); ++i) {
		int v = adj[u][i];
		if (fre[v]) {
			p[v][0] = u;
			h[v] = h[u] + 1;
			DFS(v);
		}
	}
}

void Prepare() {
	for (int j = 1; 1 << j <= n; ++j)
		for (int i = 1; i <= n; ++i)
			p[i][j] = p[p[i][j - 1]][j - 1];
}

int LCA(int u, int v) {
	if (h[u] < h[v]) swap(u, v);
	for (int i = 20; i >= 0; --i) if (h[u] - (1 << i) >= h[v]) u = p[u][i];
	if (u == v) return u;
	for (int i = 20; i >= 0; --i) if (p[u][i] != p[v][i]) {
		u = p[u][i];
		v = p[v][i];
	}
	return p[u][0];
}

int Distance(int u, int v) {
	return h[u] + h[v] - 2 * h[LCA(u, v)];
}

int Count(int i) {
	if (S.size() == 1) return Distance(i, r[*S.begin()]);
	Iterator a = S.lower_bound(x[i]);
	Iterator b = S.upper_bound(x[i]);
	int u, v;
	if (a != S.begin() && b != S.end()) u = r[*(--a)], v = r[*b]; else {
		u = r[*S.begin()]; b = S.end();
		v = r[*(--b)];
	}
	return (Distance(u, i) + Distance(v, i) - Distance(u, v)) / 2;
}

void Add(int i) {
	sz += Count(i);
	S.insert(x[i]);
}

void Remove(int i) {
	S.erase(x[i]);
	sz -= Count(i);
}

int main() {
#ifdef LOCAL
	freopen("Data.inp", "r", stdin);
	freopen("Data.out", "w", stdout);
#endif

	scanf("%d%d", &n, &k);
	for (int i = 1; i <= n - 1; ++i) {
		int u, v; scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	memset(fre, true, sizeof fre);
	timer = 0; DFS(1); Prepare();

	int ans = 1; sz = 1; S.insert(x[1]);
	for (int i = 2, p = 1; i <= n; ++i) {
		Add(i);
		while (sz > k) Remove(p++);
		ans = max(ans, i - p + 1);
	}

	printf("%d", ans);
	return 0;
}
