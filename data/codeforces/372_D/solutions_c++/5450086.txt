#include <cstdio>
#include <set>
using namespace std;

#define N 110000
int n, k, i, a, b, len, Time, ans, q, sum, L[N], to[N], d[N], till[N], go[N * 2], next[N * 2], fa[N * 2][21];

set <int> Set;
set<int>::iterator it;

void add(int x, int y) {
	next[++len] = till[x];
	till[x] = len;
	go[len] = y;
}

void dfs(int k, int ff) {
	d[k] = d[ff] + 1;
	L[k] = ++Time;
	to[Time] = k;
	fa[k][0] = ff;
	for (int i = 1; i <= 20; i++)	fa[k][i] = fa[fa[k][i - 1]][i - 1];
	for (int i = till[k]; i; i = next[i])
		if (go[i] != ff)	dfs(go[i], k);
}

int dis(int x, int y) {
	int l = 0;
	if (d[x] < d[y])	swap(x, y);
	for (int i = 20; i >= 0; i--)
		if (d[fa[x][i]] >= d[y])	x = fa[x][i], l += (1 << i);
	if (x == y)	return l;
	for (int i = 20; i >= 0; i--)
		if (fa[x][i] != fa[y][i])	x = fa[x][i], y = fa[y][i], l += (1 << (i + 1));
	return l + 2;
}

void join(int x) {
	it = Set.lower_bound(x);
	int p = *it, q = *(--it);
	if (q && p <= n)	sum -= dis(to[p], to[q]);
	if (q)	sum += dis(to[x], to[q]);
	if (p <= n)	sum += dis(to[x], to[p]);
	Set.insert(x);
}

void del(int x) {
	Set.erase(x);
	it = Set.lower_bound(x);
	int p = *it, q = *(--it);
	if (q && p <= n)	sum += dis(to[p], to[q]);
	if (q)	sum -= dis(to[x], to[q]);
	if (p <= n)	sum -= dis(to[x], to[p]);
}

int fx() {
	int p, q;
	it = Set.find(0);
	p = *(++it);
	it = Set.find(n + 1);
	q = *(--it);
	return (sum + dis(to[p], to[q])) / 2 + 1;
}

int main() {
	scanf("%d%d", &n, &k);
	for (i = 1; i < n; i++) {
		scanf("%d%d", &a, &b);
		add(a, b);
		add(b, a);
	}
	dfs(1, 0);
	q = 1;
	Set.insert(0);
	Set.insert(n + 1);
	for (i = 1; i <= n; i++) {
		join(L[i]);
		while (fx() > k)	del(L[q++]);
		ans = max(ans, i - q + 1);
	}
	printf("%d\n", ans);
}
