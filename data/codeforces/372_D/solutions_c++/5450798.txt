#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<utility>
#include<set>

using namespace std;

const int maxn = 100010,maxm = maxn*2,LOG = 20;
int n,m,pos[maxn],d[maxn],an,st[maxn*2][LOG];
int tot;

struct edge {
	int j; edge *nx;
}e[maxm],*v[maxn];
int en;

set<int> s;
typedef set<int>::iterator it;

inline void add_e(int i,int j) {
	e[++en].nx = v[i]; v[i] = e+en; v[i]->j = j;
}

void dfs(int i,int p,int dep) {
	d[i] = dep; st[++an][0] = dep; pos[i] = an;
	for (edge *e=v[i]; e; e=e->nx)
		if (e->j != p) {
			dfs(e->j,i,dep+1);
			st[++an][0] = dep;
		}
}

int rmq(int l,int r) {
	int i;
	for (i=0; (2<<i)<r-l+1; i++);
	return min(st[l][i],st[r-(1<<i)+1][i]);
}

int add(int i) {
	it ti = s.lower_bound(pos[i]);
	int lit = -1,lt;
	if (ti!=s.end()) lit = max(lit,rmq(pos[i],*ti));
	if (ti!=s.begin()) lit = max(lit,rmq(*(--ti),pos[i]));
	lt = rmq(*s.begin(),*(--(ti=s.end())));
	int r = d[i]-lit;
	if (lt>lit) r += lt-lit;
	return r;
}

int main() {
	int i,j,k,t;
	scanf("%d%d",&n,&m);
	en = 0; memset(v,0,sizeof(v));
	for (i=1; i<n; i++) {
		scanf("%d%d",&j,&k);
		add_e(j,k); add_e(k,j);
	}
	an = 0; dfs(1,0,0);
	for (i=1; (1<<i)<an; i++)
		for (j=1; j+(1<<i)-1<=an; j++)
			st[j][i] = min(st[j][i-1],st[j+(1<<(i-1))][i-1]);
	int ans = 1;
	j=1; s.insert(pos[1]); tot = 1;
	for (i=2; i<=n; i++) {
		tot += add(i);
		s.insert(pos[i]);
		while (tot>m) {
			s.erase(pos[j]);
			tot -= add(j);
			j++;
		}
		ans = max(ans,i-j+1);
	}
	printf("%d\n",ans);

	return 0;
}
