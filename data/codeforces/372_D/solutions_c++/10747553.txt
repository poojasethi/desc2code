//In the name of God
#include <bits/stdc++.h>
using namespace std;
const int Maxn = 1e5 + 9;
const int lg = 20;
int st[Maxn];
int st_to_id[Maxn];
int par[Maxn][lg];
int h[Maxn];
int ts;
vector<int> al[Maxn];
set<int> Que;
void dfs(int v,int p = -1){
	if(p + 1)
		h[v] = h[p] + 1;
	par[v][0] = p;
	for(int i = 1; i < lg;i++)
		if(par[v][i-1] + 1)
			par[v][i] = par[par[v][i-1]][i-1];
		else
			par[v][i] = -1;
	st[v] = ts;
	st_to_id[ts++] = v;
	for(int i = 0; i < al[v].size();i++){
		int u = al[v][i];
		if(u == p)
			continue;
		dfs(u,v);
	}
	return;
}
int go_up(int v,int x){
	for(int i = lg-1; i + 1;--i)
		if((1 << i) & x)
			v = par[v][i];
	return v;
}
int lca(int u,int v){
	if(h[u] < h[v])
		swap(u,v);
	u = go_up(u,h[u]-h[v]);
	if(u == v)
		return v;
	for(int i = lg-1;i + 1;--i)
		if(par[v][i] != par[u][i])
			u = par[u][i],v = par[v][i];
	return par[v][0];
}
int get_dis(int u,int v){
	return h[u] + h[v] - 2 * h[lca(u,v)];
}
int pls(int v){
	if(!Que.size())
		return 0;
	set<int>::iterator ed = Que.end();
	ed--;
 	set<int>::iterator it = Que.lower_bound(st[v]);
	if(it == Que.begin())
		return get_dis(st_to_id[*(Que.begin())],v) + get_dis(st_to_id[*(ed)],v) - get_dis(st_to_id[*(ed)],st_to_id[*(Que.begin())]);
	if(it == Que.end())
		return get_dis(st_to_id[*(ed)],v) + get_dis(st_to_id[*(Que.begin())],v) - get_dis(st_to_id[*(ed)],st_to_id[*(Que.begin())]);
	set<int>::iterator low = it;
	low--;
	return get_dis(st_to_id[*(low)],v) + get_dis(st_to_id[*(it)],v) - get_dis(st_to_id[*(low)],st_to_id[*(it)]);
}
int main(){
	int n,k;
	scanf("%d%d",&n,&k);
	for(int i = 0; i < n-1;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		al[--u].push_back(--v);
		al[v].push_back(u);
	}
	dfs(0);
	int ed = 0;
	int cnt = 0;
	int ans = 0;
	for(int bg = 0; bg < n;bg++){
		int pl = pls(ed);
		while(ed != n && cnt + pl <= 2 * k - 2){
			cnt += pl;
			Que.insert(st[ed++]);
			pl = pls(ed);
		}
		ans = max(ans,(int)Que.size());
		Que.erase(st[bg]);
		cnt -= pls(bg);
	}
	cout << ans << endl;
	return 0;
}