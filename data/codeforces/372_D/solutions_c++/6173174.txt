#include <iostream>
#include <cstdio>
#include <cmath>
#include <memory.h>
#include <algorithm>
#include <set>

#define MX 210005

using namespace std;

set<int> H;
int q[MX];
int p[MX], dfn[MX];
int par[MX][21], d[MX];
int head[MX], next[MX];
int cnt, L;
int n, K;

void dfs(int id) {
	p[++cnt] = id, dfn[id] = cnt;
	for (int i = 1; i <= L; i++) par[id][i] = par[par[id][i - 1]][i - 1];
	
	for (int i = head[id]; i; i = next[i]) if (q[i] != par[id][0]) {
		d[q[i]] = d[id] + 1, par[q[i]][0] = id;
		dfs(q[i]);
	}
}

int lca(int x, int y) {
	if (d[x] < d[y]) swap(x, y);
	for (int i = L; i >= 0; i--) {
		if (d[par[x][i]] >= d[y]) x = par[x][i];
		if (x == y) return x;
	}
	for (int i = L; i >= 0; i--) {
		if (par[x][i] != par[y][i])
			x = par[x][i], y = par[y][i];
	}
	return par[x][0];
}

int ins(int id) {
	set<int>::iterator it, it1;
	if (H.empty()) return 1;
	it = H.lower_bound(dfn[id]), it1 = it--;
	if (it1 == H.begin() || it1 == H.end())
		it = H.begin(), it1 = H.end(), it1--;
	int x = p[*it], y = p[*it1];
	return d[id] - d[lca(id, x)] - d[lca(id, y)] + d[lca(x, y)];
}

main() {
	
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	int x, y, ans, tp, rlt;
	scanf("%d%d", &n, &K);
	L = int(log2(n));
	for (int i = 1; i < n; i++) {
		scanf("%d%d", &x, &y);
		q[i] = y, next[i] = head[x], head[x] = i;
		q[i + n] = x, next[i + n] = head[y], head[y] = i + n;
	}
	d[1] = 1, rlt = ans = 0;
	dfs(1);

	for (int i = 1, j = 0; i <= n; i++) {
		for (j++; j <= n; j++) {
			tp = ins(j);
			if (tp + rlt > K) break;
			rlt += tp;
			H.insert(dfn[j]);
		}
		
		ans = max(ans, j - i);
		H.erase(dfn[i]);
		rlt -= ins(i);
		j--;
	}
	cout << ans << endl;
}
