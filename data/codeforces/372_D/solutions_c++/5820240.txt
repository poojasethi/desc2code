#include<cstdio>
#include<cstring>
#include<vector>
#include<set>
#include<iostream>
using namespace std;

const int MAXN = (int) 1e5 + 10;

int n, k, x, y, lg;
int ans = 0, cnt = 0;

vector<int> g[MAXN];
int anc[MAXN][20], dep[MAXN], pos[MAXN], s[MAXN];

void dfs(int x, int pre, int d){
	anc[x][0] = pre;
	dep[x] = d;
	s[cnt] = x;
	pos[x] = cnt++;
	for (int i = 1; i < lg; ++i)
		anc[x][i] = anc[x][i-1] ? anc[anc[x][i-1]][i-1] : 0;
	for (int i = 0; i < g[x].size(); ++i)
		if (g[x][i] != pre)
			dfs(g[x][i], x, d+1);
	}

int lca(int u, int v) { 
    if (dep[u] < dep[v]) swap(u, v); 
    for (int i=0, d=dep[u]-dep[v]; i<lg && d; ++i, d>>=1) 
        if (d&1) u = anc[u][i]; 
    if (u == v) return u; 
    for (int i = lg-1; i >= 0; --i) 
        if (anc[u][i] != anc[v][i]) { 
            u = anc[u][i]; 
            v = anc[v][i]; 
        } 
    return anc[u][0]; 
} 

set<int> homura;
	
int cost(int x){
	if (homura.empty()) return 1;
	set<int>::iterator it = homura.lower_bound(pos[x]);
	int r = s[it==homura.end() ? *homura.begin() : *it]; 
    int l = s[it==homura.begin() ? *homura.rbegin(): *(--it)]; 
	return dep[x]-dep[lca(x, l)]-dep[lca(x, r)]+dep[lca(l, r)];
	}

int main()
{
	scanf("%d%d", &n, &k);
	int tmp = n;
	for (lg=0; tmp; lg++, tmp >>= 1);
	for (int i = 1; i < n; ++i)
	{
		scanf("%d%d", &x, &y);
		g[x].push_back(y);
		g[y].push_back(x);
		}
	dfs(1, 0, 0);
	int size = 0;
	ans = 0;
	for (int i = 1 , j = 1; i <= n; i++){
		for (; size <= k; ++j){
			ans = max (ans, j-i);
			if (j > n) break;
			size += cost(j);
			homura.insert(pos[j]);
			}
		homura.erase(pos[i]);
		size -= cost(i);
		}
	cout << ans << endl;
	//system("pause");
	return 0;
	}