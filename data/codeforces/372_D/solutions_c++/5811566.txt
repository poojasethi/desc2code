#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>

using namespace std;

const int T(20), N(100010);

int tt, n, cnt, k, a, b, ans;
vector<int> g[N];
set<int> idx;
int fa[T][N];
int dep[N], po[N], li[N], si[N];

int go(int x, int d) {
	for (int i = T - 1; i != -1; --i)
		if (d & (1 << i)) x = fa[i][x];
	return x;
}

int lca(int a, int b) {
	if (a == b) return a;
	if (dep[a] < dep[b]) swap(a, b);
	if (dep[a] != dep[b]) return lca(go(a, dep[a] - dep[b]), b);
	for (int i = T - 1; i != -1; --i)
		if (fa[i][a] != fa[i][b]) {
			a = fa[i][a]; b = fa[i][b];
		}
	return fa[0][a];
}

void dfs(int x) {
	si[x] = 1;
	po[x] = ++tt; li[tt] = x;
	for (int i = 1; i != T; ++i)
		fa[i][x] = fa[i - 1][fa[i - 1][x]];
	for (int i = 0; i != g[x].size(); ++i)
		if (g[x][i] != fa[0][x]) {
			fa[0][g[x][i]] = x;
			dep[g[x][i]] = dep[x] + 1;
			dfs(g[x][i]);
			si[x] += si[g[x][i]];
		}
}

int count(int x) {
	if (idx.empty()) {
		idx.insert(po[x]);
		return 1;
	}
	int l = lca(li[*idx.begin()], li[*(--idx.end())]);
	idx.insert(po[x]);
	if (lca(l, x) != l) return dep[l] + dep[x] - 2 * dep[lca(l, x)];
	int ret = n + 1;
	set<int> :: iterator it = idx.find(po[x]);
	++it;
	if (it != idx.end()) {
		if (po[x] < *it && *it < po[x] + si[x]) return 0;
		ret = min(ret, dep[x] - dep[lca(li[*it], x)]);
	}
	--it;
	if (it != idx.begin()) {
		--it;
		ret = min(ret, dep[x] - dep[lca(li[*it], x)]);
		++it;
	}
	return ret;
}

void add(int x) {
	cnt += count(x);
}

void del(int x) {
	idx.erase(idx.find(po[x]));
	cnt -= count(x);
	idx.erase(idx.find(po[x]));
}

int main() {
	//freopen("in.txt", "r", stdin);
	cin >> n >> k;
	for (int i = 1; i != n; ++i) {
		cin >> a >> b;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	dfs(1);
	for (int i = 1, j = 1; i <= n; ++i) {
		if (i > 1) del(i - 1);
		for (; j <= n && cnt <= k; ++j) 
			add(j);
		if (cnt <= k) ans = max(ans, j - i);
		else ans = max(ans, j - i - 1);
	}
	cout << ans << endl;
	return 0;
}
