//In the name of God
#include <iostream>
#include <vector>
#include <set>
using namespace std;
const int N = 1e5 + 5, oo = 1e9;
typedef pair<int, int> pii;


int n, k, st[N], par[N][22], l, r, size, ans, h[N];
bool mark[N];
vector<int> adj[N];
set<pii> s;

int LCA(int u, int v) {
	if (h[u] > h[v])
		swap(u, v);
	for (int i = 20; i >= 0; i--)
		if (h[v] - h[u] >= 1 << i)
			v = par[v][i];
	for (int i = 20; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return u == v? v: par[v][0];
}
int dis(int u, int v) { return h[u] + h[v] - 2 * h[LCA(u, v)]; }
void add() {
	set<pii>::iterator it = s.lower_bound(pii(st[r], r));
	int u = (it == s.end()? s.begin(): it)-> second, v = (it == s.begin()? s.rbegin()-> second: (--it)-> second);
	s.insert(pii(st[r], r));
	size += (dis(r, v) + dis(r, u) - dis(u, v)) / 2, r++;
}
void del() {
	s.erase(pii(st[l], l));
	if (!s.empty()) {
		set<pii>::iterator it = s.lower_bound(pii(st[l], l));
		int u = (it == s.end()? s.begin(): it)-> second, v = (it == s.begin()? s.rbegin()-> second: (--it)-> second);
		size -= (dis(l, v) + dis(l, u) - dis(u, v)) / 2, l++;
	}
	else
		size = 0;
}
void dfs(int v) {
	static int cnt = 0;
	mark[v] = true;
	st[v] = cnt++;
	for (int i = 1; i <= 20; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (int i = 0; i < adj[v].size(); i++) {
		int u = adj[v][i];
		if (!mark[u]) {
			par[u][0] = v;
			h[u] = h[v] + 1;
			dfs(u);
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> k;
	if (n == 1 || k == 1) {
		cout << 1 << '\n';
		return 0;
	}
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		u--, v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(0);
	s.insert(pii(st[0], 0));
	size = r = 1;
	do {
		while (r < n && size <= k)
			add();
		ans = max(ans, r - l - (size > k));
		del();
	} while (r < n);
	cout << ans << '\n';
	return 0;
}
