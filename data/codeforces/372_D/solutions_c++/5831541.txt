#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <set>
#define N 200010
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
int i,j,k,n,m,sum,an,t,x,y;
int a[N],next[N],head[N],id[N],fa[N][20],cnt[N],dep[N],L[N];
set<int> S;
typedef set<int>::iterator w1;
inline void add(int x,int y) {
	a[++t]=y,next[t]=head[x],head[x]=t;
	a[++t]=x,next[t]=head[y],head[y]=t;
}
void dfs(int x) {
	int v,i;
	L[x]=++t; id[t]=x;
	for (v=head[x];v;v=next[v])
	if (a[v]!=fa[x][0]) {
		dep[a[v]]=dep[x]+1;
		fa[a[v]][0]=x;
		For(i,1,cnt[dep[a[v]]]) fa[a[v]][i]=fa[fa[a[v]][i-1]][i-1];
		dfs(a[v]);
	}
}
inline int lca(int x,int y) {
	int i,s=dep[x]+dep[y];
	if (dep[x]<dep[y]) swap(x,y);
	for (i=cnt[dep[x]-dep[y]];i>=0;i--)
	if (dep[y]+(1<<i)<=dep[x]) x=fa[x][i];
	if (x==y) return s-dep[x]*2;
	for (i=cnt[dep[x]];i>=0;i--)
	if ((1<<i)<=dep[x]&&fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];
	x=fa[x][0];
	return s-dep[x]*2;
}
inline void Into(int x,int type) {
	if (type>0) S.insert(L[x]);
	if (S.size()==1) return;
	w1 A=S.lower_bound(L[x]),B,C;
	B=C=A; C++;
	if (B==S.begin()) B=S.end(); B--;
	if (C==S.end()) C=S.begin();
	sum+=(lca(x,id[*B])+lca(x,id[*C])-lca(id[*B],id[*C]))*type;
	if (type<0) S.erase(L[x]);
}
int main() {
	scanf("%d%d",&n,&m); m=(m-1)*2;
	For(i,1,n-1) scanf("%d%d",&x,&y),add(x,y);
	For(i,2,N-1) cnt[i]=cnt[i/2]+1;
	t=0; dfs(1); j=1;
	For(i,1,n) {
		for (;j<=n&&sum<=m;j++) Into(j,1);
		if (sum<=m&&j>n) {
			an=max(an,j-i); break;
		}
		an=max(an,j-i-1);
		Into(i,-1);
	}
	printf("%d\n",an);
	return 0;
}
