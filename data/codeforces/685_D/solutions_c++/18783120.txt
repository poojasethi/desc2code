#include <bits/stdc++.h>
using namespace std;

#define X first
#define Y second
#define mp make_pair
#define sp putchar(' ')
#define ln putchar('\n')
#define dprintf(...) fprintf(stderr, __VA_ARGS__)
#define Exit(...) dprintf(__VA_ARGS__), exit(0)
#define rep(i, x, y) for(int i = (x), _end = (y); i <= _end; ++ i)
#define per(i, x, y) for(int i = (x), _end = (y); i >= _end; -- i)
#define disp(x) cerr << #x << '=' << x << ' '

template <class T> inline bool chkmin(T &a, T b) { return a > b ? a = b, true : false; }
template <class T> inline bool chkmax(T &a, T b) { return a < b ? a = b, true : false; }

const int NANA = -427394241, maxN = 1e5 + 5, maxK = 305;

typedef long long LL;

int N, K;

struct Event {
    int x, y, tp;

    Event() {}
    Event(int x, int y, int tp):
        x(x),y(y), tp(tp) {}

    void print() {
        dprintf("x = %d y = %d tp = %d", x, y, tp);
    }
}ev[maxN<<1];

int Hash[maxN*maxK], totHash = 0;

void init() {
    cin >> N >> K;

    rep(i, 1, N) {
        int x, y;
        cin >> x >> y;
        ev[i*2-1] = Event(x, y, +1);
        ev[i*2] = Event(x+K, y, -1);

        rep(k, 0, K-1)
            Hash[++totHash] = y+k;
    }

    sort(Hash + 1, Hash + totHash + 1);

    totHash = unique(Hash + 1, Hash + totHash + 1) - Hash - 1;

    N <<= 1;

    rep(i, 1, N) {
        ev[i].y = lower_bound(Hash + 1, Hash + totHash + 1, ev[i].y) - Hash;
    }
}

int *last, cnt[maxN*maxK];
LL ans[maxN];

bool cmp(const Event& x, const Event& y) {
    return x.x < y.x || (x.x == y.x && x.y < y.y) ;
}

void solve() {
    sort(ev + 1, ev + N + 1, cmp);

    last = Hash;

    rep(i, 0, totHash) last[i] = NANA;

    rep(i, 1, N) {
        int x = ev[i].x,
            y = ev[i].y,
            tp = ev[i].tp;

        rep(k, 0, K - 1) {
            if(last[y + k] != NANA) {
                ans[cnt[y+k]] += x - last[y+k];
            }

            cnt[y+k] += tp;

            last[y+k] = x;
        }
    }

    rep(i, 1, N>>1)
        cout << ans[i] << ' ';
}

int main()
{
#ifdef Leeson
    freopen("tmp.in", "r", stdin);
    freopen("tmp.out", "w", stdout);
#endif

    ios::sync_with_stdio(false);
    init();
    solve();

    return 0;
}

                 