#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cstdlib>
#include<map>
#include<queue>
#include<iterator>
using namespace std;
#define FOR(i,s,e) for(int i = (s); i < (e); i++)
#define FOE(i,s,e) for(int i = (s); i <= (e); i++)
#define FOD(i,s,e) for(int i = (s); i >= (e); i--)
#define CLR(a) memset(a,0,sizeof(a))
#define ll long long
#include<ctime>
#include<cmath>
#include<vector>
#include<iostream>
#include<set>
#define mp make_pair

int n, m, x, y, z, k, w, t, cur, r, a, b;
int v[200005], p[200005], q[200005], R[200005], Merge[200005];
ll ans[100005];

struct node {
	int x, y;
	bool operator < (node const & T) const { return T.y > y; }
}A[100005];

vector<int> s[200005];
vector<int> :: iterator it;

int bs(int val)
{
	int mid, low = -1, high = w;
	while(high - low > 1)
	{
		mid = (high + low) / 2;
		if (v[mid] < val) low = mid;
		else high = mid;
	}
	return high; // first 1 >= val
}

int main ()
{
	scanf("%d %d", &n, &k);
	FOR(i, 0, n) scanf("%d %d", &A[i].x, &A[i].y);
	
	sort(A, A + n);
	
	FOR(i, 0, n)
	{
		v[w++] = A[i].x - k + 1;
		v[w++] = A[i].x + 1;
	}
	
	sort(v, v + w);
		
	x = 1;
	FOR(i, 1, w) if (v[i] != v[x - 1]) v[x++] = v[i];
	w = x;
	
	FOR(i, 0, n)
	{
		x = bs(A[i].x - k + 1);
		y = bs(A[i].x + 1);
		FOR(j, x, y) s[j].push_back(A[i].y);
	}

	FOR(i, 0, w)
	{
		m = 0;
		for (it = s[i].begin(); it != s[i].end(); it++) { R[m] = *it; p[m] = *it - k + 1; q[m++] = *it + 1; }
		
		x = y = 0; r = m;
		
		FOR(j, 0, 2 * m)
		{
			if (x < m) a = p[x]; else a = 2000000000;
			if (y < m) b = q[y]; else b = 2000000000;
			if (a < b) { Merge[j] = a; x++; }
			else { Merge[j] = b; y++; }
		}
	
		
		m = 2 * m;
		FOR(j, 0, m) p[j] = Merge[j];
		
		t = 1;
		FOR(j, 1, m) if (p[j] != p[t - 1]) p[t++] = p[j];
		m = t;
		
		x = 0; y = 0; cur = 0;
		FOR(j, 0, m - 1)
		{
			while(R[x] >= p[j] && R[x] < p[j] + k && x < r) { x++; cur++; }
			while(R[y] < p[j] && y < r) { y++; cur--; }
			ans[cur] += 1ll * (p[j + 1] - p[j]) * (v[i + 1] - v[i]);
		}
	}
	
	FOE(i, 1, n) printf("%I64d ", ans[i]);
	return 0;
}
			