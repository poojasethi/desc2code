#include<bits/stdc++.h>
#define FT first
#define SC second
#define PB push_back
#define MP make_pair
#define REP(i, l, r) for(int i = (l); i <= (r); i++)
#define PER(i, r, l) for(int i = (r); i >= (l); i--)
#define FOR(i, n) for(int i = 0; i < (n); i++)
#define ROF(i, n) for(int i = (n) - 1; i >= 0; i--)
#define VEP(i, x) for(int i = 0; i < x.size(); i++)
#define DFOR(i, x) for(int i = hd[x]; i; i = e[i].nxt)
#define MEM(a, b) memset(a, b, sizeof(a))
#define rint read<int>()
#define rll read<LL>()

using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PI;
const int inf = 0x7fffffff;
const int MOD = 1000000007;

template <typename tn>
inline tn read(){
	char ch; tn f = 1;
	while (!isdigit(ch = getchar())) if (ch == '-') f = -1;
	tn x = ch - '0';
	while (isdigit(ch = getchar())) x = x * 10 + ch - '0';
	return x * f;
}
template <typename tn> inline void cmax(tn &a, tn b){ if (a < b) a = b; }
template <typename tn> inline void cmin(tn &a, tn b){ if (a > b) a = b; }
const int N = 200000 + 5, M = 30000000 + 3;
struct Data{ int x, l, r, d; } d[N];
inline bool operator < (const Data &a, const Data &b){ return a.x < b.x; }
PI p[N], c[N];
LL ans[N];
int cnt[M], lst[M];

int main(){
	int n = rint, k = rint, tot = 0, now = -inf;
	REP(i, 1, n) p[i].FT = rint, p[i].SC = rint;
	REP(i, 1, n) c[i].FT = p[i].SC, c[i].SC = p[i].SC + k - 1;
	sort(c + 1, c + n + 1);
	REP(i, 1, n) for (cmax(now, c[i].FT); now <= c[i].SC; cnt[++tot] = now++);
	REP(i, 1, n)
		c[i].FT = lower_bound(cnt + 1, cnt + tot + 1, p[i].SC) - cnt,
		c[i].SC = lower_bound(cnt + 1, cnt + tot + 1, p[i].SC + k - 1) - cnt;
	REP(i, 1, n)
		d[i * 2 - 1] = (Data){p[i].FT, c[i].FT, c[i].SC, 1},
		d[i * 2] = (Data){p[i].FT + k, c[i].FT, c[i].SC, -1};
	sort(d + 1, d + 2 * n + 1);
	REP(i, 1, tot) cnt[i] = 0, lst[i] = -inf;
	REP(i, 1, 2 * n) REP(j, d[i].l, d[i].r) ans[cnt[j]] += d[i].x - lst[j], cnt[j] += d[i].d, lst[j] = d[i].x;
	REP(i, 1, n) printf("%I64d%c", ans[i], " \n"[i == n]);
} 
