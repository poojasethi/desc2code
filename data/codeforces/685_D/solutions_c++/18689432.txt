#include <bits/stdc++.h>
using namespace std;

int n, k;
pair<int, int> p[100005];

long long cnt[100005];
int pre[30000005];
int size[30000005];
int lst[100005];
int y[100005];
int main()
{
	scanf("%d %d", &n, &k);
	for (int i = 0; i < n; i++)
	{
		scanf("%d %d", &p[i].first, &p[i].second);
		y[i] = p[i].second;
	}
	sort(p, p+n);
	sort(y, y+n);
	int fin = -1000000600;
	int sz = 0;
	for (int i = 0; i < n; i++)
	{
		if (y[i]-k > fin)
			sz += k;
		else
			sz += y[i]-fin;
		lst[i] = sz;
		fin = y[i];
	}
	for (int i = 0; i < n; i++)
	{
		int yi = lower_bound(y, y+n, p[i].second) - y;
		for (int j = 1; j <= k; j++)
		{
			size[lst[yi]-j+1]++;
		}
	}
	for (int i = 1; i < sz; i++)
	{
		size[i] += size[i-1];
	}
	size[sz] = size[sz-1];
	for (int i = 0; i < n; i++)
	{
		int yi = lower_bound(y, y+n, p[i].second) - y;
		for (int j = 1; j <= k; j++)
		{
			pre[size[lst[yi]-j]++] = (p[i].first);
		}
	}
	memset(cnt, 0, sizeof(cnt));
	int state = 0;
	int li;
	for (int x = 0; x < sz; x++)
	{
		state = 0;
		li = -1000000600;
		int z = 0;
		if (x)
			z = size[x-1];
		int j = z;
		while (z < size[x])
		{
			if (j == size[x] || pre[z]+k < pre[j])
			{
				cnt[state] += pre[z]+k - li;			
				state--;
				li = pre[z]+k;
				z++;
			}
			else
			{
				cnt[state] += pre[j] - li;			
				state++;
				li = pre[j];
				j++;
			}
		}
	}
	for (int i = 1; i <= n; i++)
		printf("%lld\n", cnt[i]);
}