#include <iostream>
#include <cstdio>
#include <vector>
#include <string>
#include <algorithm>
#define  fi first
#define  se second
#define  MAXN 100010
#define  NotANumber -1000000001

using namespace std;
typedef long long ll;
typedef pair<int,int> ii;

int N,K;


struct node{
	
	int row, l, r;
	bool a;
	int lbl, ubr;
	node(int _row, int _l, int _r, bool _a) {
		
		row = _row;
		l = _l;
		r = _r;
		a = _a;
	}

	bool operator < (const node& other) const {
		
		return row < other.row;
	}
};

int main() {
	
	int xs;
	vector< node> qs;

	cin >> N >> K;

	{
		
		vector< ii > ar(N);
		
		for(int i=0;i<N;i++)
			cin >> ar[i].fi >> ar[i].se;

		sort(ar.begin(),ar.end());
	
		vector<int> xc;
		for(int i=0;i<N;i++) {
		
			int s = xc.empty() ? ar[i].fi - K + 1 : max(xc.back() + 1, ar[i].fi - K + 1);

			for(int j=s; j<=ar[i].fi; j++)
				xc.push_back(j);
		}

		for(int i=0;i<N;i++) {
				
			qs.push_back( node(ar[i].se - K + 1, ar[i].fi - K + 1, ar[i].fi, true) );

			qs.push_back( node(ar[i].se + 1, ar[i].fi - K + 1, ar[i].fi, false) );
		}
	
		for(int i=0;i<(int)qs.size(); i++) {
		
			node& q = qs[i];
			q.lbl = lower_bound(xc.begin(), xc.end(), q.l) - xc.begin();
			q.ubr = upper_bound(xc.begin(), xc.end(), q.r) - xc.begin();
		}
	
		xs = xc.size();
	}
	

	sort(qs.begin(), qs.end());
		
	vector<int> vec(xs, 0);
	vector<int> lastChanged(xs, NotANumber);
	vector<ll> ans(N);

	for(int t=0;t<(int)qs.size(); t++) {
		
		node& q = qs[t];
		
		for(int i=q.lbl; i<q.ubr; i++) {
			
			if(lastChanged[i] != NotANumber && vec[i] != 0)
				ans[vec[i]-1] += q.row-lastChanged[i];
			
			
			vec[i] = (q.a) ? vec[i]+1 : vec[i]-1;

			lastChanged[i] = q.row;
		}
	}	
	

	for(int i=0;i<N;i++)
		cout << ans[i] << " ";
	cout << endl;

	return 0;
} 
