#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
#define x first
#define y second
#define  REP(i, j, k) for(int i = (j); i <= (k); ++i)
#define REPD(i, j, k) for(int i = (j); i >= (k); --i)

const int maxn = 100100;
const int maxk = 310;

struct QUES
{
	int y, l, r, type;							// 0 -> add 1 -> del
	bool operator <(const QUES t) const
	{
		return y < t.y;
	}
}que[maxn*2];

int n, K, m;
pair<int,int> point[maxn];
int lsh[maxn*maxk];

void init()														// 0 -> add 1 -> del
{
	scanf("%d%d", &n, &K);
	REP(i,1,n)
		scanf("%d%d", &point[i].x, &point[i].y);
	sort(point + 1, point + n + 1);
	REP(i,1,n)
		REP(j,0,K-1)
		lsh[++m] = point[i].x - j;
	sort(lsh + 1, lsh + m + 1);
	m = unique(lsh + 1, lsh + m + 1) - lsh - 1;
	REP(i,1,n)
	{
		que[i*2-1].l = que[i*2].l = lower_bound(lsh+1,lsh+m+1,point[i].x-K+1)-lsh;
		que[i*2-1].r = que[i*2].r = lower_bound(lsh+1,lsh+m+1,point[i].x)-lsh;
		que[i*2-1].y = point[i].y - K + 1;
		que[i*2].y   = point[i].y + 1;
		que[i*2-1].type = 0;
		que[i*2].type   = 1;
	}
	sort(que + 1, que + 2*n + 1);
}

int v[maxn*maxk];
long long ans[maxn];

void solve(int *last)
{
	REP(i,1,2*n)
	{
		REP(j,que[i].l,que[i].r)
			if(v[j])
				ans[v[j]] += 1LL*(que[i].y - last[j]);
		if(que[i].type == 0)
		{
			REP(j,que[i].l,que[i].r)
				++v[j], last[j] = que[i].y;
		}else
		{
			REP(j,que[i].l,que[i].r)
				--v[j], last[j] = que[i].y;
		}
	}
	REP(i,1,n)
		cout<<ans[i]<<' ';
	cout<<endl;
}

int main()
{
	init();
	solve(lsh);
	return 0;
}
