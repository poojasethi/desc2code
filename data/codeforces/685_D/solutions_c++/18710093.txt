#include<bits/stdc++.h>
using namespace std;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define sd(mark) scanf("%d",&mark)
#define ss(mark) scanf("%s",&mark)
#define slld(mark) scanf("%lld",&mark)
#define clr(mark) memset(mark,0,sizeof(mark))
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define sz(x) (int((x).size()))
#define PII pair<int,int>
#define PIL pair<int,long long>
#define PLL pair<long long,long long>
#define PIS pair<int,string>
#define MII map<int,int>
#define LL long long
#define FILEIO(name) \
    freopen(name".in", "r", stdin); \
    freopen(name".out", "w", stdout);
#define INF 2000000000 // 2 * 10^9
#define INFLL 1000000000000000000LL  // 10^18
#define mod 1000000007

#define N 100001

pair<int,int> a[N];
short rs[N*300];
map<int,int> M;
int pr[N*300];
LL rrs[N];
pair<pair<int,int>,short> v[2*N];

void solve()
{
    int n,k,i,j;
    sd(n);
    sd(k);
    for(i=0;i<n;++i)
    {
        sd(a[i].F);
        sd(a[i].S);
        M[a[i].S] = 1;
    }
    map<int,int>::iterator itr = M.begin();
    int prv = -INF;
    int cnt = 0;
    for(;itr!=M.end();++itr)
    {
        itr->S = cnt + min((itr->F)-prv,300);
        prv = itr->F;
        cnt = itr->S;
    }
    int x,y,ch;
    for(i=0;i<n;++i)
    {
        a[i].S = M[a[i].S];
    }
    M.clear();
    for(i=0;i<n;++i)
    {
        //cout << "i: " << i << " " << a[i].S << endl;
        x = a[i].F - (k-1);
        y = a[i].S;
        v[(i<<1)]=MP(MP(x,y),1);
        v[(i<<1)^1]=MP(MP(x+k,y),-1);
    }
    sort(v,v+(n<<1));
    for(i=0;i<(n<<1);++i)
    {
        x = v[i].F.F;
        ch = v[i].S;
        //cout << " x: " << x << " ch: " << ch << " y: ";
        for(j=0;j<k;++j)
        {
            y = v[i].F.S - j;
            //cout << y << " " ;
            rrs[rs[y]] += (x - pr[y]);
            pr[y] = x;
            rs[y] += ch;
        }
        //cout << endl;
    }
    for(i=1;i<=n;++i)
        printf("%lld ",rrs[i]);
}

int main()
{
    int t = 1;
    //scanf("%d",&t);
    while(t--)
    {
        solve();
    }
}
