#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <bitset>
using namespace std;

#define bll long long
#define dou double
#define For(i,a,b) for (int i=(a),_##i=(b); i<=_##i; i++)
#define Rof(i,a,b) for (int i=(a),_##i=(b); i>=_##i; i--)
#define rep(i,a,b) for (int i=(a),_##i=(b); i<=_##i; i++)
#define rek(i,a,b) for (int i=(a),_##i=(b); i>=_##i; i--)
#define Mem(a,b) memset(a,b,sizeof(a))
#define Cpy(a,b) memcpy(a,b,sizeof(b))

const int maxn=100000+100,oo=1<<30;
struct Point
{
    int x,y;
    Point() { x=y=0; }
    Point(int a,int b) { x=a,y=b; }
    void read() { scanf("%d%d",&x,&y); }
    friend bool operator < (const Point &a,const Point &b)
    {
        if (a.x!=b.x) return a.x<b.x;
        return a.y<b.y;
    }
};
int N,K;
Point A[maxn];
long long Ans[maxn];

void scanline_y(int x1,int x2,int r,Point *A,int n)
{
    static int y[maxn],m,g[maxn];
//printf("%d %d %d\n",x1,x2,r);
    Point key=Point(x1-1,oo);
    int lo=upper_bound(A+1,A+n+1,key)-A;
    key=Point(x2,oo);
    int hi=upper_bound(A+1,A+n+1,key)-A;
    m=0;
    for (int i=lo; i<hi; i++)
        y[++m]=A[i].y;
    if (m==0) return ;
    sort(y+1,y+m+1);
    g[1]=1;
    int mm=1;
    For(i,2,m)
        if (y[i]!=y[mm]) y[++mm]=y[i],g[mm]=1;
            else g[mm]++;
    m=mm;
//printf("-- %d\n",m);
    int a=y[1]-K+1,b=y[1],i=1,j=2;
    int c=g[1];
    while(a<=y[m])
    {
        int l1=y[i]+1-a;
        int l2=(j<=m ? y[j]-b : l1);
        int len=min(l1,l2);
        Ans[c]+=(bll)r*len;
        a+=len,b+=len;
//printf("! %d %d\n",a,b);
        if (i<=m && a>y[i]) c-=g[i++];
        if (j<=m && b==y[j]) c+=g[j++];
    }
}

void scanline_x(Point *A,int n)
{
    static int x[maxn],m;
    sort(A+1,A+n+1);
    For(i,1,N) x[i]=A[i].x;
    m=unique(x+1,x+n+1)-x-1;
    int a=x[1]-K+1,b=x[1],i=1,j=2;
    while(a<=x[m])
    {
        int l1=x[i]+1-a;
        int l2=(j<=m ? x[j]-b : l1);
        int len=min(l1,l2);
        scanline_y(a,b,len,A,n);
        a+=len,b+=len;
        if (i<=m && a>x[i]) i++;
        if (j<=m && b==x[j]) j++;
    }
}

int main(int argc, char* argv[])
{
    for (; scanf("%d%d",&N,&K)!=EOF; )
    {
        For(i,1,N) A[i].read();
        For(i,1,N) Ans[i]=0;
        scanline_x(A,N);
        For(i,1,N) printf("%I64d ",Ans[i]);
        printf("\n");
    }
    return 0;
}
