#include <cstdio>
#include <queue>
#include <algorithm>

using namespace std;

struct node
{
  long long sum;
  int x,y;
  bool operator<(const node& p) const
  {
    if(sum!=p.sum)
      return sum<p.sum;
    if(x!=p.x)
      return x<p.x;
    return y<p.y;
  }
};

deque<int> q;
int v[1001][1001],d[1001][1001];
long long s[1001][1001];
node w[1000001],ans[1000001];
bool used[1001][1001];

int main(void)
{
  int n,m,a,b;
  scanf("%d %d %d %d",&n,&m,&a,&b);
  for(int i=1;i<=n;++i)
  {
    q.clear();
    for(int j=1;j<=m;++j)
    {
      scanf("%d",&v[i][j]);
      s[i][j]=v[i][j]+s[i-1][j]+s[i][j-1]-s[i-1][j-1];
      if((!q.empty())&&(q.front()<=j-b))
        q.pop_front();
      while((!q.empty())&&(v[i][j]<=v[i][q.back()]))
        q.pop_back();
      q.push_back(j);
      d[i][j]=v[i][q.front()];
    }
  }
  for(int j=1;j<=m;++j)
  {
    q.clear();
    for(int i=1;i<=n;++i)
    {
      if((!q.empty())&&(q.front()<=i-a))
        q.pop_front();
      while((!q.empty())&&(d[i][j]<=d[q.back()][j]))
        q.pop_back();
      q.push_back(i);
      v[i][j]=d[q.front()][j];
    }
  }
  int tot=0;
  for(int i=a;i<=n;++i)
  {
    for(int j=b;j<=m;++j)
    {
      node temp;
      temp.x=i-a+1;
      temp.y=j-b+1;
      temp.sum=s[i][j]-s[i-a][j]-s[i][j-b]+s[i-a][j-b]-(long long)v[i][j]*a*b;
      w[++tot]=temp;
    }
  }
  sort(w+1,w+tot+1);
  int t=0;
  for(int i=1;i<=tot;++i)
  {
    if(used[w[i].x][w[i].y])
      continue;
    ans[++t]=w[i];
    for(int j=max(w[i].x-a+1,0);j<w[i].x+a;++j)
      for(int k=max(w[i].y-b+1,0);k<w[i].y+b;++k)
        used[j][k]=true;
  }
  printf("%d\n",t);
  for(int i=1;i<=t;++i)
    printf("%d %d %I64d\n",ans[i].x,ans[i].y,ans[i].sum);
  return 0;
}