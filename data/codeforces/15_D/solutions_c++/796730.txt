#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#include<vector>
using namespace std;
typedef long long ll;
#define MAXN 1005
int n,m,a,b;
int mn[MAXN][MAXN],h[MAXN][MAXN];
ll sum[MAXN][MAXN];
struct Node
{
    int x,y;
    ll v;
    Node(){}
    Node(int x,int y,ll v):x(x),y(y),v(v){}
    bool operator <(const Node& node) const
    {
        if(v!=node.v) return v>node.v;
        if(x!=node.x) return x>node.x;
        return y>node.y;
    }
};
inline ll get_sum(int i,int j)
{
    int ii=i+a-1,jj=j+b-1;
    return sum[ii][jj]-sum[i-1][jj]-sum[ii][j-1]+sum[i-1][j-1];
}
priority_queue<Node> que;
vector<Node> v;
int mp[MAXN][MAXN];
inline bool ck(int x,int y)
{
    return mp[x][y]==0&&mp[x+a-1][y]==0&&mp[x][y+b-1]==0&&mp[x+a-1][y+b-1]==0;
}
int q[MAXN],top,buttom;
int main()
{
    scanf("%d%d",&n,&m);
    scanf("%d%d",&a,&b);
    for(int i=1;i<=n;i++)
    {
        top=0,buttom=0;
        for(int j=1;j<=m;j++)
        {
            scanf("%d",&h[i][j]);
            while(top>buttom&&h[i][q[top-1]]>=h[i][j]) top--;
            q[top++]=j;
            if(q[buttom]<=j-b) buttom++;
            mn[i][j]=h[i][q[buttom]];
            sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+h[i][j];
        }
    }
    for(int j=1;j+b<=m+1;j++)
    {
        top=0,buttom=0;
        for(int i=1;i<=a-1;i++)
        {
            while(top>buttom&&mn[q[top-1]][j+b-1]>=mn[i][j+b-1]) top--;
            q[top++]=i;
        }
        for(int i=1;i+a<=n+1;i++)
        {
            while(top>buttom&&mn[q[top-1]][j+b-1]>=mn[i+a-1][j+b-1]) top--;
            q[top++]=i+a-1;
            if(q[buttom]<i) buttom++;
            int ans=mn[q[buttom]][j+b-1];
            que.push(Node(i,j,get_sum(i,j)-1ll*a*b*ans));
        }
    }
    while(!que.empty())
    {
        Node tmp=que.top();
        que.pop();
        if(ck(tmp.x,tmp.y))
        {
            v.push_back(tmp);
            for(int i=tmp.x;i<tmp.x+a;i++)
                for(int j=tmp.y;j<tmp.y+b;j++) mp[i][j]=1;
        }
    }
    printf("%u\n",v.size());
    for(vector<Node>::iterator it=v.begin();it!=v.end();it++)
    {
        printf("%d %d %I64d\n",it->x,it->y,it->v);
    }
    return 0;
}
