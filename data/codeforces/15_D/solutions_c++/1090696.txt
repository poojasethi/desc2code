#include <iostream>
#include <algorithm>
#include <set>
#include <vector>

using namespace std;

#define pie pair <int, int>
#define ff first
#define ss second

const int maxN = 1000 + 100;

int n, m, a, b;
int h[maxN][maxN];

long long sum[maxN][maxN];
int c[maxN][maxN];
long long d[maxN][maxN];
int f[maxN][maxN];

struct cmp
{
	bool operator () (pie a, pie b)
	{
		if (d[a.ff][a.ss] != d[b.ff][b.ss])
			return d[a.ff][a.ss] < d[b.ff][b.ss];
		return a < b;
	}
};

int tmpc[maxN][maxN];
void fillD ()
{
	cerr << "here " << endl;
	multiset <int, less <int> > minf;
	for (int i = 0; i < n; i++)
	{
		minf.clear();
		for (int j = 0; j < m; j++)
		{
			minf.insert (h[i][j]);
			if (j >= b - 1)
				tmpc[i][j - b + 1] = *minf.begin(),
				minf.erase (minf.find (h[i][j - b + 1]));
		}
	}
	cerr << "shere " << endl;	
	for (int j = 0; j <= m - b; j++)
	{
		minf.clear();
		for (int i = 0; i < n; i++)
		{
			minf.insert (tmpc[i][j]);
			if (i >= a - 1)
				c[i - a + 1][j] = *minf.begin(),
				minf.erase (minf.find (tmpc[i - a + 1][j]));
		}
	}
	
	cerr << "zhere " << endl;		
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			sum [i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + h[i - 1][j - 1];
			
	for (int i = 0; i <= n - a; i++)
		for (int j = 0; j <= m - b; j++)
			d[i][j] = sum[i + a][j + b] - sum[i + a][j] -
				sum[i][j + b] + sum[i][j] - (long long) a * b * c[i][j];
}
	
main()
{
	ios::sync_with_stdio (false);
	cin >> n >> m >> a >> b;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> h[i][j];
			//h[i][j] = 1000 * 1000 * 1000;
	fillD ();
	vector <pie> tmp;
	for (int i = 0; i <= n - a; i++)
		for (int j = 0; j <= m - b; j++)
			tmp.push_back (pie (i, j));
	
	sort (tmp.begin(), tmp.end(), cmp());
	
	vector <pie> res;
	for (int i = 0; i < tmp.size(); i++)
	{
		pie x = tmp[i];
		if (f[x.ff][x.ss])
			continue;
		res.push_back (x);
		for (int i = x.ff - a + 1; i < x.ff + a; i++)
			for (int j = x.ss - b + 1; j < x.ss + b; j++)
				if (0 <= i && i <= n - a && 0 <= j && j <= m - b)
					f[i][j] = 1;
	}
	
	cout << res.size() << endl;
	for (int i = 0; i < res.size(); i++)
		cout << res[i].ff + 1 << ' ' << res[i].ss + 1 << ' ' << d[res[i].ff][res[i].ss] << endl;
	
	{ int _; cin >> _; }
	return 0;
}
