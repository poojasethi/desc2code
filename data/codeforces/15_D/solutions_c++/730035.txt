#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<iostream>
using namespace std;
typedef long long LL;
const int V=1010;
LL s[V][V];
int A[V][V],mi[V][V],q[V];
struct Node
{
	int r,c;
	LL ret;
}tmp[V*V];
bool cmp(Node x,Node y)
{
	if(x.ret!=y.ret)return x.ret<y.ret;
	if(x.r!=y.r)return x.r<y.r;
	return x.c<y.c;
}
int vis[V][V],ans[V*V];
int i,j,k,n,m,a,b,top,tail,ct;
int main()
{
	while(~scanf("%d%d%d%d",&n,&m,&a,&b))
	{
		for(i=1;i<=n;i++)
		for(j=1;j<=m;j++)
		scanf("%d",&A[i][j]);
		for(i=1;i<=n;i++)
		{
			top=0;tail=0;
			for(j=1;j<=b;j++)
			{
				while(top!=tail&&A[i][q[tail]]>A[i][j])tail--;
				q[++tail]=j;
			}
			mi[i][1]=A[i][q[top+1]];
			for(j=b+1;j<=m;j++)
			{
				if(q[top+1]+b<=j)top++;
				while(top!=tail&&A[i][q[tail]]>A[i][j])tail--;
				q[++tail]=j;
				mi[i][j-b+1]=A[i][q[top+1]];
			}
		}
		for(i=1;i<=m;i++)
		{
			top=0;tail=0;
			for(j=1;j<=a;j++)
			{
				while(top!=tail&&mi[q[tail]][i]>mi[j][i])tail--;
				q[++tail]=j;
			}
			mi[1][i]=mi[q[top+1]][i];
			for(j=a+1;j<=n;j++)
			{
				if(q[top+1]+a<=j)top++;
				while(top!=tail&&mi[q[tail]][i]>mi[j][i])tail--;
				q[++tail]=j;
				mi[j-a+1][i]=mi[q[top+1]][i];
			}
		}
		for(i=0;i<=n;i++)s[i][0]=0;
		for(j=0;j<=m;j++)s[0][j]=0;
		for(i=1;i<=n;i++)
		for(j=1;j<=m;j++)
		s[i][j]=s[i][j-1]+s[i-1][j]+A[i][j]-s[i-1][j-1];
		for(i=1;i<=n;i++)
		for(j=1;j<=m;j++)
		vis[i][j]=0;
		int id=0;
		for(i=1;i+a-1<=n;i++)
		for(j=1;j+b-1<=m;j++)
		{
			tmp[id].r=i;
			tmp[id].c=j;
			tmp[id].ret=s[i+a-1][j+b-1]+s[i-1][j-1]-s[i-1][j+b-1]-s[i+a-1][j-1];
			tmp[id].ret-=(LL)a*b*mi[i][j];
			id++;
		}
		sort(tmp,tmp+id,cmp);
		ct=0;
		for(i=0;i<id;i++)
		{
			if(vis[tmp[i].r][tmp[i].c])continue;
			ans[ct++]=i;
			for(j=max(1,tmp[i].r-a+1);j<tmp[i].r+a;j++)
			for(k=max(1,tmp[i].c-b+1);k<tmp[i].c+b;k++)
			vis[j][k]=1;
		}
		printf("%d\n",ct);
		for(i=0;i<ct;i++)
		printf("%d %d %I64d\n",tmp[ans[i]].r,tmp[ans[i]].c,tmp[ans[i]].ret);
	}
}
	 	 			       		  		   	  	