#include <math.h>
#include <stdio.h>
#include <algorithm>
using namespace std;
typedef long long ll;
typedef const int& CI;
#define N 1001
int idx[N*N], h[N][N], n, m;
ll sum[N][N];
bool vis[N][N];
struct node {
    int x, y;
    ll c;
}p[N*N];
bool cmp(CI a, CI b) {
    if (p[a].c != p[b].c) return p[a].c < p[b].c;
    if (p[a].x != p[b].x) return p[a].x < p[b].x;
    return p[a].y < p[b].y;
}
int main() {
    int a, b, logA, logB, delA, delB;
    ll tmp, area;
    scanf("%d%d%d%d", &n, &m, &a, &b);
    logA = (int)log2(a), delA = a - (1<<logA);
    logB = (int)log2(b), delB = b - (1<<logB);
    for (int i = 1; i <= n; ++i) {
        tmp = 0;
        for (int j = 1; j <= m; ++j){
            scanf("%d", &h[i][j]);
            tmp += h[i][j];
            sum[i][j] = sum[i-1][j] + tmp;
        }
    }
    for (int i = 1, len; i <= n; ++i) {
        len = 1;
        for (int k = 1; k <= logB; ++k, len<<=1)
        for (int j = m; j > len; --j)
            h[i][j] = min(h[i][j], h[i][j-len]);
        for (int j = m; j >= b; --j)
            h[i][j] = min(h[i][j], h[i][j-delB]);
    }
    for (int j = b, len; j <= m; ++j) {
        len = 1;
        for (int k = 1; k <= logA; ++k, len<<=1)
        for (int i = n; i > len; --i)
            h[i][j] = min(h[i][j], h[i-len][j]);
        for (int i = n; i >= a; --i)
            h[i][j] = min(h[i][j], h[i-delA][j]);
    }
    area = a * b;
    int pt = 0, dx, dy, cnt = 0;
    for (int i = a; i <= n; ++i) {
        for (int j = b; j <= m; ++j) {
            dx = i - a, dy = j - b;
            p[pt].c = sum[i][j] - sum[dx][j] - sum[i][dy] + sum[dx][dy] - h[i][j]*area;
            p[pt].x = i, p[pt].y = j;
            idx[pt+1] = pt, ++pt;
        }
    }
    sort(idx + 1, idx + pt + 1, cmp);
    for (int i = 1; i <= pt; ++i) {
        node& r = p[idx[i]];
        if (vis[r.x][r.y]) continue;
        idx[cnt++] = idx[i];
        for (int j = r.x-a+1, mj = min(n, r.x+a-1); j <= mj; ++j)
        for (int k = r.y-b+1, mk = min(m, r.y+b-1); k <= mk; ++k)
            vis[j][k] = true;
    }
    printf("%d\n", cnt);
    for (int i = 0; i < cnt; ++i) {
        printf("%d %d %I64d\n", p[idx[i]].x-a+1, p[idx[i]].y-b+1, p[idx[i]].c);
    }
    return 0;
}