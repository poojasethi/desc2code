#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#include <string.h>
#include <string>
#include <ctype.h>
#include <ctime>

using namespace std;

typedef long long INT;
typedef pair<int, int> pii;

#define beyond(r, c) (r<0 || c<0 || r>=R || c>=C)
#define NN 1100

int next[NN], a[NN][NN], vst[NN][NN], b[NN][NN], val[NN][NN];
INT sum[NN][NN], res[NN][NN];

pii p[NN*NN], ans[NN*NN];

bool cmp(pii u, pii v) {
	if (res[u.first][u.second]!=res[v.first][v.second]) 
		return res[u.first][u.second]<res[v.first][v.second];
	return u<v;
}

int main() {
	int N, M, n, ansn, A, B, i, j, k, x, y;
	
	scanf("%d%d%d%d", &N, &M, &A, &B);
	for (i=1; i<=N; i++) for (j=1; j<=M; j++) {
		scanf("%d", &a[i][j]);
	}
	for (i=0; i<=N; i++) for (j=0; j<=M; j++) {
		if (i==0 || j==0) { sum[i][j]=0; continue; }
		sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+a[i][j];
	}
	for (i=1; i<=N; i++) {
		next[M+1]=M+1;
		for (j=M; j>=1; j--) {
			k=j+1;
			while(k<=M) {
				if (a[i][k]<a[i][j]) break;
				k=next[k];
			}
			next[j]=k;
		}
		k=1;
		for (j=B; j<=M; j++) {
			if (k==j-B) k++;
			while(1) {
				if (next[k]<=j) k=next[k];
				else break;
			}
			b[i][j]=a[i][k];
		}
	}
	for (i=B; i<=M; i++) {
		next[N+1]=N+1;
		for (j=N; j>=1; j--) {
			k=j+1;
			while(k<=N) {
				if (b[j][i]>b[k][i]) break;
				k=next[k];
			}
			next[j]=k;
		}
		k=1;
		for (j=A; j<=N; j++) {
			if (k==j-A) k++;
			while(1) {
				if (next[k]<=j) k=next[k];
				else break;
			}
			val[j][i]=b[k][i];
		}
	}
	n=0;
	for (i=A; i<=N; i++) for (j=B; j<=M; j++) {
		res[i][j]=sum[i][j]-sum[i-A][j]-sum[i][j-B]+sum[i-A][j-B]-(INT)val[i][j]*A*B;
		p[n++]=pii(i, j);
	}
	sort(p, p+n, cmp); ansn=0;
	for (i=0; i<n; i++) {
		j=p[i].first; k=p[i].second;
		if (vst[j][k]) continue;
		ans[ansn++]=p[i];
		for (x=j-A+1; x<=N && x<j+A; x++) for (y=k-B+1; y<=M && y<k+B; y++) vst[x][y]=1;
	}
	printf("%d\n", ansn);
	for (i=0; i<ansn; i++) {
		printf("%d %d %I64d\n", ans[i].first-A+1, ans[i].second-B+1, res[ans[i].first][ans[i].second]);
	}
	
	return 0;
}

