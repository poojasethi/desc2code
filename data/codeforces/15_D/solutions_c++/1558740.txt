#include<cstdio>
#include<algorithm>
using namespace std;
int n,m,a,b;
int map[1005][1005],mi[1005][1005],mi2[1005][1005];
__int64 sum[1005][1005];
int qu[1005],s,t;
struct node
{
    int x,y;
    __int64 v;
} arr[1000005];
int ans[1000005];
bool used[1005][1005];
int cmp(const node &a,const node &b)
{
    if(a.v!=b.v)return a.v<b.v;
    if(a.x!=b.x)return a.x<b.x;
    return a.y<b.y;
}
int main()
{
    int i,j,k;
    scanf("%d%d%d%d",&n,&m,&a,&b);
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=m; j++)
        {
             scanf("%d",&map[i][j]);
             sum[i][j]=sum[i][j-1]+sum[i-1][j]+map[i][j]-sum[i-1][j-1];
        }

    }
    for(i=1; i<=n; i++)
    {
        s=t=0;
        for(j=1; j<=m; j++)
        {
            while(s<t&&j-qu[s]>=b)s++;
            while(s<t&&map[i][j]<=map[i][qu[t-1]])t--;
            qu[t++]=j;
            mi[i][j]=map[i][qu[s]];
        }
    }
    for(j=1; j<=m; j++)
    {
        s=t=0;
        for(i=1; i<=n; i++)
        {
            while(s<t&&i-qu[s]>=a)s++;
            while(s<t&&mi[i][j]<=mi[qu[t-1]][j])t--;
            qu[t++]=i;
            mi2[i][j]=mi[qu[s]][j];
        }
    }
    int len=0;
    for(i=a; i<=n; i++)
    {
        for(j=b; j<=m; j++)
        {
            arr[len].x=i-a+1;
            arr[len].y=j-b+1;
            arr[len].v=sum[i][j]-sum[i][j-b]-sum[i-a][j]+sum[i-a][j-b];
            arr[len].v-=(__int64)a*b*mi2[i][j];
            len++;
        }
    }
    sort(arr,arr+len,cmp);
    int tot=0;
    for(k=0; k<len; k++)
    {
        if(used[arr[k].x][arr[k].y])continue;
        for(i=1-a; i<a; i++)
        {
            for(j=1-b; j<b; j++)
            {
                if(arr[k].x+i<1||arr[k].x+i>n||arr[k].y+j<1||arr[k].y+j>m)continue;
                used[arr[k].x+i][arr[k].y+j]=1;
            }
        }
        ans[tot++]=k;
    }
    printf("%d\n",tot);
    for(i=0; i<tot; i++)
    {
        printf("%d %d %I64d\n",arr[ans[i]].x,arr[ans[i]].y,arr[ans[i]].v);
    }
    return 0;
}
