
#include<stdio.h>
#include<iostream>
#include<string.h>
#include<set>
#include<vector>
#include<map>
#include<math.h>
#include<queue>
#include<string>
#include<stdlib.h>
#include<algorithm>
using namespace std;
#define N 1015
#define ll int
#define LL long long
ll x[N], dou[N];
void work(ll len, ll top){
	deque<ll>q;// q.front() -> q.back()
	for(ll i = 1; i <= top; i++) {
		while(!q.empty() && q.front() + len <= i)q.pop_front();
		while(!q.empty() && x[i] <= x[q.back()]) q.pop_back();
		q.push_back(i);
		dou[i] = x[q.front()];
	}
}
ll n, m, a, b;
struct node{
	ll x,y;
	LL val;
	node(ll a1=0,ll a2=0,LL a3=0):x(a1),y(a2),val(a3){}
	bool operator<(const node& Node) const{
		if(Node.val==val)
		{
			if(Node.x==x) return Node.y<y;
			else return Node.x<x;
		}
		else return Node.val<val;
	}
};
priority_queue<node>q;
vector<node>ans;
bool use[N][N];
void go(){
	ans.clear();
	while(!q.empty()){
		node u =q.top(); q.pop();
		if(use[u.x][u.y] || use[u.x+a-1][u.y+b-1] || use[u.x][u.y+b-1] || use[u.x+a-1][u.y])continue;
		ans.push_back(u);
		for(ll i = u.x; i < u.x+a; i++)
			for(ll j = u.y; j < u.y+b; j++)
				use[i][j] = 1;
	}
	ll siz = ans.size();
	printf("%d\n",siz);
	for(ll i = 0; i < siz; i++) printf("%d %d %I64d\n",ans[i].x,ans[i].y,ans[i].val);
}
ll val[N][N], mp[N][N];
LL sum[N][N];
int main(){
	ll i,j;
	while(~scanf("%d %d %d %d",&n,&m,&a,&b)) {
		for(i=1;i<=n;i++)for(j=1;j<=m;j++)
		{
			scanf("%d",&mp[i][j]);
			sum[i][j] = (LL)mp[i][j] + sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1];
		}
		for(i=1;i<=n;i++) {
			memcpy(x, mp[i], sizeof x);
			work(b, m);
			for(j=1;j<=m;j++) val[i][j] = dou[j];
		}
		for(i=b;i<=m;i++) {
			for(j=1;j<=n;j++) x[j] = val[j][i];
			work(a, n);
			for(j=1;j<=n;j++) val[j][i] = dou[j];
		}
		for(i=a; i<=n; i++)
			for(j=b;j<=m;j++)
				q.push(node(i-a+1,j-b+1,sum[i][j]-sum[i-a][j]-sum[i][j-b]+sum[i-a][j-b]-(LL)a*(LL)b*(LL)val[i][j]));
		go();
	}
	return 0;
}
                                                                                                                    