#include<cstdio>
#include<algorithm>
using namespace std;

const int maxn=1000+10;
pair<long long,pair<int,int> > p[maxn*maxn];
long long sum[maxn][maxn];
int t[maxn][maxn];
int h[maxn][maxn];
int col[maxn][maxn];
int row[maxn][maxn];
int n,m,a,b,tot;
int que[maxn];

void prepare()
{
	scanf("%d%d%d%d",&n,&m,&a,&b);
	//n=m=1000;a=b=10;

	for (int i=1;i<=n;i++)
	for (int j=1;j<=m;j++)
		scanf("%d",&h[i][j]);
		//h[i][j]=rand()*rand()%1000000000;

	for (int i=1;i<=m;i++)
	{
		int l=1,r=0;
		for (int j=n;j;j--)
		{
			while (l<=r && que[l]-j>=a) l++;
			while (l<=r && h[que[r]][i]>=h[j][i]) r--;
			que[++r]=j;
			col[j][i]=h[que[l]][i];
		}
	}
	for (int i=1;i<=n;i++)
	{
		int l=1,r=0;
		for (int j=m;j;j--)
		{
			while (l<=r && que[l]-j>=b) l++;
			while (l<=r && col[i][que[r]]>=col[i][j]) r--;
			que[++r]=j;
			row[i][j]=col[i][que[l]];
		}
	}
	for (int i=1;i<=n;i++)
	for (int j=1;j<=m;j++)
		sum[i][j]=h[i][j]+sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1];

	for (int i=1;i+a-1<=n;i++)
	for (int j=1;j+b-1<=m;j++)
		p[tot++]=make_pair(sum[i+a-1][j+b-1]-sum[i+a-1][j-1]-sum[i-1][j+b-1]+sum[i-1][j-1]-(long long)a*b*row[i][j],make_pair(i,j));
	sort(p,p+tot);
}

int calc(int x,int y)
{
	int res=0;
	for (int i=x;i;i-=i&-i)
	for (int j=y;j;j-=j&-j)
		res+=t[i][j];
	return res;
}

void work()
{
	int cnt=0;
	for (int i=0;i<tot;i++)
	{
		int x=p[i].second.first,y=p[i].second.second;
		int x1=max(1,x-a+1),y1=max(1,y-b+1),x2=x+a-1,y2=y+b-1;
		int sum=calc(x2,y2)-calc(x1-1,y2)-calc(x2,y1-1)+calc(x1-1,y1-1);
		if (!sum)
		{	
			cnt++;
			//printf("%d %d %I64d\n",x,y,p[i].first);
			for (int i=x;i<=n;i+=i&-i)
			for (int j=y;j<=m;j+=j&-j)
				t[i][j]++;
		} else p[i].first=-1;
	}

	printf("%d\n",cnt);
	for (int i=0;i<tot;i++)
	if (p[i].first>=0) printf("%d %d %I64d\n",p[i].second.first,p[i].second.second,p[i].first);
}

int main()
{
	prepare();
	work();
}
