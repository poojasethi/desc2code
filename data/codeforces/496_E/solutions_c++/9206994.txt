#include<iostream>
#include<set>
#include<Algorithm>
using namespace std;
#define MAXN 100010
struct Node
{
	int x,y,id;
	bool operator <(const Node &a) const{
		return x<a.x;
	}
}a[MAXN],b[MAXN];
int k[MAXN];
struct Point
{
	int x,id;
	Point () {};
	Point(int a,int b){
		x=a;id=b;
	}
	bool operator <(const Point &a)const{
		if(x!=a.x)return x<a.x;
		return id<a.id;
	}
};
int ans[MAXN];
set<Point>actor;
int main()
{
	int n,m;
	cin>>n;
	for(int i=0;i<n;i++)
	{
		cin>>a[i].x>>a[i].y;
		a[i].id=i+1;
	}
	cin>>m;
	for(int i=0;i<m;i++)
	{
		cin>>b[i].x>>b[i].y>>k[i+1];
		b[i].id=i+1;
	}
	sort(a,a+n);
	sort(b,b+m);
	int pro=0,ac=0;
	int flag=0;
	while(pro<n)
	{
		if(ac<m&&b[ac].x<=a[pro].x)
		{
			actor.insert(Point(b[ac].y,b[ac].id));
			ac++;
			continue;
		}
		set<Point>::iterator pos=actor.lower_bound(Point(a[pro].y,0));
		if(pos==actor.end())
		{
			flag=1;break;
		}
		ans[a[pro].id]=pos->id;
		k[pos->id]--;
		if(k[pos->id]==0)
		{
			actor.erase(pos);
		}
		pro++;
	}
	if(flag)
	{
		cout<<"NO"<<endl;
	}
	else
	{
		cout<<"YES"<<endl;
		for(int i=1;i<n;i++)
		{
			cout<<ans[i]<<" ";
		}
		cout<<ans[n]<<"\n";
	}
	return 0;
}