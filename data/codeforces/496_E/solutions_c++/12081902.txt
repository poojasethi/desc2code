#include<cstdio>
#include<cstring>
#include<set>
#include<algorithm>
using namespace std;
#define N 100007
struct Node{
	int a,id;
	Node(int _a,int _id){
		a=_a,id=_id;
	}
	bool operator<(const Node &p) const{
			return a<p.a || (a==p.a && id<p.id);
	}
	bool operator>=(const Node &p) const{
			return a>=p.a && id>=p.id;
	}
	bool operator==(const Node &p) const{
			return a==p.a && id==p.id;
	}
};
struct Segment{
	int l,r,id;
}	a[N],b[N];
bool C(Segment p,Segment q){
	return p.l<q.l;
}
int f[N];
int g[N];
set<Node> s;
set<Node>::iterator it;
int main(){
	bool flag;
	int n,m,i,j;
	scanf("%d",&n);
	for(i=0;i<n;++i){
		a[i].id=i;
		scanf("%d %d",&a[i].l,&a[i].r);
	}
	scanf("%d",&m);
	for(i=0;i<m;++i){
		scanf("%d %d %d",&b[i].l,&b[i].r,&g[i]);
		b[i].id=i;
	}
	sort(a,a+n,C);
	sort(b,b+m,C);
	flag=true;
	s.clear();
	for(i=0,j=-1;i<n;++i){
		while(j+1<m && b[j+1].l<=a[i].l){
			++j;
			s.insert(Node(b[j].r,b[j].id));
		}
		it=s.lower_bound(Node(a[i].r,0));
		if(it==s.end()){
			flag=false;
			break;
		}
		Node tmp = *it;
		f[a[i].id]=tmp.id+1;
		if(--g[tmp.id]==0) s.erase(tmp);
	}
	puts(flag?"YES":"NO");
	if(flag){
		for(i=0;i<n;++i) printf("%d ",f[i]);
	}
	return 0;
}

			     	 			   		    	 		 		