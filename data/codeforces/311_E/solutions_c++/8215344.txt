#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define rep(i,n) for (int i=1;i<=n;i++)
const int N = 12005, M = 10000005, inf = 1 << 28;
int n, m, S, T, l = 1, g, fr, v, w, ans;
int a[N], c[N], k[N], o[N][15], ed[M], next[M], data[M], son[N], d[N], f[N];
void add(int x, int y, int z)
{
    ed[++l] = y, data[l] = z, next[l] = son[x], son[x] = l;
    ed[++l] = x, data[l] = 0, next[l] = son[y], son[y] = l;
}
bool build()
{
    int h = 0, t = 1;
    f[1] = S;
    memset(d, -1, sizeof(d)), d[S] = 0;
    while (h < t)
    {
        int x = f[++h];
        for (int p = son[x]; p; p = next[p]) if (data[p])
            {
                int y = ed[p];
                if (d[y] < 0) d[y] = d[x] + 1, f[++t] = y;
                if (y == T) return 1;
            }
    }
    return 0;
}
int dinic(int x, int low)
{
    if (x == T) return low;
    int w = 0, res;
    for (int p = son[x]; p && w < low; p = next[p]) if (data[p])
        {
            int y = ed[p];
            if (d[y] == d[x] + 1 && (res = dinic(y, min(data[p], low - w))))
                data[p] -= res, data[p ^ 1] += res, w += res;
        }
    if (!w) d[x] = -1;
    return w;
}
bool cross(int x, int y)
{
    rep(i, k[x]) rep(j, k[y]) if (o[x][i] == o[y][j]) return 1;
    return 0;
}
int main()
{
    scanf("%d%d%d", &n, &m, &g), S = 0, T = n + m + 1;
    rep(i, n) scanf("%d", a + i);
    rep(i, n)
    {
        scanf("%d", &v);
        if (a[i]) add(S, i, v);
        else add(i, T, v);
    }
    rep(i, m)
    {
        scanf("%d%d%d", c + i, &w, k + i);
        rep(j, k[i]) scanf("%d", o[i] + j);
        scanf("%d", &fr);
        ans += w;
        if (fr) w += g;
        if (c[i]) add(S, n + i, w);
        else add(n + i, T, w);
        rep(j, k[i])
            if (c[i]) add(i + n, o[i][j], inf);
            else add(o[i][j], i + n, inf);
    }
    while (build()) ans -= dinic(S, inf);
    printf("%d\n", ans);
    return 0;
}