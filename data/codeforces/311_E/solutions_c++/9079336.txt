#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <bitset>
#include <ctime>
#include <map>
#include <queue>
#include <set>
using namespace std;

const int oo=10000000;
const int maxx=10000+2000+15;
const int maxn=(10000+2000*10)*8;
int n,m,gg;
int S,T,fre,head[maxx],node[maxn],next[maxn],vv[maxn];
int a[maxn],x,ans,w,k,g;	
int dep[maxx],last[maxx];
int line[maxx],hh,tt;
int inser(int x,int y,int z)
{
	node[++fre]=y;
	next[fre]=head[x];
	head[x]=fre;
	vv[fre]=z;
	return 0;
}
bool bfs()
{
	memset(dep,-1,sizeof(dep));
	for (int i=S;i<=T;i++) last[i]=head[i];
	line[hh=tt=1]=S;
	dep[S]=0;
	for (;hh<=tt;hh++)
	 for (int u=head[line[hh]];u>=0;u=next[u])
	  if (vv[u]>0 && dep[node[u]]==-1)
	  {
	  	dep[node[u]]=dep[line[hh]]+1;
	  	line[++tt]=node[u];
	  	if (node[u]==T) return true;
	  }
	return false;
}
int dfs(int now,int minn)
{
	if (now==T) return minn;
	int value=0,minx;
	for (int u=last[now];u>=0;last[now]=u=next[u])
	 if (vv[u]>0 && dep[node[u]]==dep[now]+1)
	 {
	 	minx=dfs(node[u],min(minn,vv[u]));
	 	minn-=minx;
	 	value+=minx;
	 	vv[u]-=minx;
	 	vv[u^1]+=minx;
	 	if (minn==0) return value;
	 }
	return value;
}
int main()
{
	scanf("%d%d%d",&n,&m,&gg);
	S=0;T=n+m+1;
	fre=-1;
	memset(head,-1,sizeof(head));
	for (int i=1;i<=n;i++) scanf("%d",&a[i]);
	for (int i=1;i<=n;i++)
	{
		scanf("%d",&x);
		if (a[i]==0) inser(S,i,x),inser(i,S,0);
		 else inser(i,T,x),inser(T,i,0);
	}
	for (int i=1;i<=m;i++)
	{
		scanf("%d%d%d",&g,&w,&k);
		ans+=w;
		for (int j=1;j<=k;j++)
		{
			scanf("%d",&x);
			if (g==0) inser(n+i,x,oo),inser(x,n+i,0);
			 else inser(x,n+i,oo),inser(n+i,x,0);
		}
		scanf("%d",&x);
		if (g==1) inser(n+i,T,x*gg+w),inser(T,n+i,0);
		 else inser(S,n+i,x*gg+w),inser(n+i,S,0);
	}
	while (bfs()) ans-=dfs(S,oo);
	printf("%d\n",ans);
	return 0;
}