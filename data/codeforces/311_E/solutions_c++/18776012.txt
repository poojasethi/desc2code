#include <cstdio>
#include <cstring>
#include <cassert>
#include <algorithm>
#define rep(i,s,t) for(int i=s;i<=t;i++)
#define red(i,t,s) for(int i=t;i>=s;i--)
#define vtson(k,x) for (int k=o[x];k;k=nex[k])
using namespace std;
const int inf=1e9;
const int NN=13100;
const int MM=81010;
typedef long long LL;

int n,m,g,S,T,sum=0,sta[NN],cos[NN];
int cc=1,to[MM],nex[MM],o[NN],fl[MM];
inline void add(int x,int y,int f)
{
//	printf("%d %d %d\n",x,y,f);
	to[++cc]=y,nex[cc]=o[x],o[x]=cc,fl[cc]=f;
	to[++cc]=x,nex[cc]=o[y],o[y]=cc,fl[cc]=0;
}

int d[NN],q[NN];
bool found()
{
	int l=0,r=1;
	memset(d,63,sizeof(d));
	q[1]=S,d[S]=0;
	while(l<r)
	{
		int x=q[++l];
		vtson(k,x)
		{
			int y=to[k];
			if(fl[k]&&d[y]>d[x]+1)
				d[y]=d[x]+1,q[++r]=y;
		}
	}
	
	return d[T]!=d[0];
}

int dfs(int x,int flow)
{
	if(x==T)return flow;
	int res=0;
	vtson(k,x)
	{
		int y=to[k];
		if(fl[k]&&d[y]==d[x]+1)
		{
			int tmp=dfs(y,min(flow-res,fl[k]));
			res+=tmp,fl[k]-=tmp,fl[k^1]+=tmp;
			if(res==flow)return flow;
		}
	}
	if(res==0)d[x]=-1;
	return res;
}

int dinic()
{
	int ans=0;
	while(found())
		ans+=dfs(S,inf);
	return ans;
}

int main()
{
//	freopen("1.in","r",stdin);
	scanf("%d%d%d",&n,&m,&g);
	rep(i,1,n)scanf("%d",&sta[i]);
	rep(i,1,n)scanf("%d",&cos[i]);
	S=n+m+1,T=S+1;
	rep(i,1,n)
		if(sta[i]==0)add(S,i,cos[i]);
		else add(i,T,cos[i]);
	rep(i,1,m)
	{
		int num,c,kd,x;
		scanf("%d%d%d",&kd,&c,&num);
		sum+=c;
		if(kd==1)
			rep(j,1,num)scanf("%d",&x),add(x,i+n,inf);
		else
			rep(j,1,num)scanf("%d",&x),add(i+n,x,inf);
		scanf("%d",&x);
		if(x)c+=g;
		if(kd==1)add(i+n,T,c);
		else add(S,i+n,c);
	}
	
	int ans=dinic();
//	printf("%d %d\n",sum,ans);
	ans=sum-ans;
	printf("%d\n",ans);
	return 0;
}