#include<cstdio>
#include<cstring>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;

#define ll long long

const int N=13000;
const int inf=0xfffffff;

struct edge {int u,v,c,f;};

int n,m,g,s,t;
int d[N],w[N];
bool se[N],v[N];
vector<int> G[N];
vector<edge> E;

void addedge(int u,int v,int c) {
	E.push_back((edge){u,v,c,0});
	E.push_back((edge){v,u,0,0});
	m=E.size();
	G[u].push_back(m-2);
	G[v].push_back(m-1);
}

bool bfs() {
	memset(v,0,sizeof v);
	queue<int> q;
	q.push(s),v[s]=1;
	while (!q.empty()) {
		int x=q.front(); q.pop();
		for (int i=0;i<G[x].size();i++) {
			edge& e=E[G[x][i]];
			if (!v[e.v]&&e.c>e.f) v[e.v]=1,q.push(e.v),d[e.v]=d[x]+1;
		}
	}
	return v[t];
}

int dfs(int x,int a) {
	if (x==t||a==0) return a;
	int flow=0,f;
	for (int i=0;i<G[x].size();i++) {
		edge& e=E[G[x][i]];
		if (d[x]+1==d[e.v]&&(f=dfs(e.v,min(a,e.c-e.f)))>0) {
			e.f+=f;
			E[G[x][i]^1].f-=f;
			flow+=f;
			a-=f;
			if (a==0) break;
		}
	}
	return flow;
}

int mf() {int flow=0;while (bfs()) flow+=dfs(s,inf);return flow;}

int main() {
//	freopen("test.in","r",stdin);
	
	scanf("%d%d%d",&n,&m,&g);
	s=0,t=n+m+1;
	for (int i=1;i<=n;i++) scanf("%d",&se[i]);
	for (int i=1;i<=n;i++) {
		scanf("%d",&w[i]);
		if (se[i]) addedge(s,i,w[i]);
		else addedge(i,t,w[i]);
	}
	int in=0,x,y,z,rec,tot;
	for (int i=n+1;i<t;i++) {
		scanf("%d%d%d",&rec,&x,&tot);
		in+=x;
		if (rec) {
			while (tot--) scanf("%d",&y),addedge(i,y,inf);
			scanf("%d",&z);
			if (z) addedge(s,i,x+g);else addedge(s,i,x);
		} else {
			while (tot--) scanf("%d",&y),addedge(y,i,inf);
			scanf("%d",&z);
			if (z) addedge(i,t,x+g);else addedge(i,t,x);
		}
	}
	printf("%d\n",in-mf());
	return 0;
}
	 			   		  			 			  			 	   		