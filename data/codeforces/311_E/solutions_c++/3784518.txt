//#define FILE_IO

#include<iostream>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#include<queue>
#include<cstdio>
#include<cstring>

using namespace std;

const int maxn=13000,maxm=70010;
const int inf=(1LL<<31)-1;
int tot,m=1,S,T;
int Dog[maxn],Rich[maxn];
int fs[maxn],oth[maxm],cap[maxm],next[maxm];
int cur[maxn],h[maxn],gap[maxn];
int gen[maxn];
int found,maxf,flow;

void assign(int &x){
  x=++tot;
}
void add(int x,int y,int w){
  oth[++m]=y,cap[m]=w,next[m]=fs[x],fs[x]=m;
  oth[++m]=x,cap[m]=0,next[m]=fs[y],fs[y]=m;
  //printf("%d %d %d\n",x,y,w);
}

void dfs(int x){
  if(x==T){
    found=1;
    maxf+=flow;
    return;
  }
  int pre=flow,i,t;
  for(i=cur[x];i;i=next[i])
    if(cap[i]&&h[t=oth[i]]+1==h[x]){
      cur[x]=i;
      flow=min(flow,cap[i]);
      dfs(t);
      if(found)break;
      if(h[S]>=tot)return;
      flow=pre;
    }
  if(found){
    cap[i]-=flow;
    cap[i^1]+=flow;
  }else{
    for(t=tot-1,i=fs[x];i;i=next[i])
      if(cap[i])t=min(t,h[oth[i]]);
    if(!--gap[h[x]])h[S]=tot;
    ++gap[h[x]=t+1],cur[x]=fs[x];
  }
}

int main(){
#ifdef FILE_IO
  freopen("t.in","r",stdin);
  freopen("t.out","w",stdout);
#endif
  int n,m,G,i,t,w,k,x,y;
  int ans=0;
  scanf("%d%d%d",&n,&m,&G);
  assign(S),assign(T);
  for(i=1;i<=n;++i)assign(Dog[i]);
  for(i=1;i<=m;++i)assign(Rich[i]);
  for(i=1;i<=n;++i)scanf("%d",gen+i);
  for(i=1;i<=n;++i)
    if(scanf("%d",&w),gen[i])
      add(Dog[i],T,w);
    else
      add(S,Dog[i],w);
  for(i=1;i<=m;++i){
    scanf("%d%d%d",&t,&w,&k);
    ans+=w;
    while(k--){
      scanf("%d",&x);
      if(t)
        add(Dog[x],Rich[i],inf);
      else
        add(Rich[i],Dog[x],inf);
    }
    if(scanf("%d",&y),y)
      w+=G;
    if(t)
      add(Rich[i],T,w);
    else
      add(S,Rich[i],w);
  }
  for(i=1;i<=tot;++i)
    cur[i]=fs[i];
  gap[0]=tot;
  while(h[S]<tot){
    found=0,flow=inf;
    dfs(S);
  }
  printf("%d",ans-maxf);
  return 0;
}
