#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#define X first
#define Y second
#define pb push_back
#define fr(i,n) for(int i=1;i<=n;i++)
#define fo(i,n) for(int i=0;i<n;i++)

using namespace std;

typedef long long ll;

const int mod=(int)1e9+7;

const int INF=0x3f3f3f3f;
const int N=12010;
const int M=200100;
int n,m,g,v[N],S,T,ans;
int head[N],key[M],next[M],flow[M],cnt;
int ch[N],q[M];

void add(int x,int y,int z){
    next[cnt]=head[x];key[cnt]=y;flow[cnt]=z;head[x]=cnt++;
    next[cnt]=head[y];key[cnt]=x;flow[cnt]=0;head[y]=cnt++;
}

bool bfs(){
    int h=1,t=1;
    memset(ch,-1,sizeof ch);
    ch[S]=0;
    q[t++]=S;
    while(h<t){
        int sta=q[h++];
        for(int i=head[sta];~i;i=next[i])
            if(ch[key[i]]==-1&&flow[i])
                ch[key[i]]=ch[sta]+1,q[t++]=key[i];
    }
    return ch[T]!=-1;
}

int maxflow(int x,int f){
    if(x==T) return f;
    int r=0;
    for(int i=head[x];~i&&f>r;i=next[i])
        if(ch[key[i]]==ch[x]+1&&flow[i]){
            int t=maxflow(key[i],min(flow[i],f-r));
            flow[i]-=t,flow[i^1]+=t,r+=t;
        }
    if(!r) ch[x]=-1;
    return r;
}

int main(){
    memset(head,-1,sizeof head);
    scanf("%d%d%d",&n,&m,&g);
    S=0,T=n+m+1;
    fr(i,n){
        scanf("%d",&v[i]);
    }
    fr(i,n){
        int x;
        scanf("%d",&x);
        if(v[i]) add(S,i,x);
        else add(i,T,x);
    }
    fr(i,m){
        int x,y,z;
        scanf("%d%d%d",&x,&y,&z);
        ans+=y;
        fr(j,z){
            int u;
            scanf("%d",&u);
            if(x) add(n+i,u,INF);
            else add(u,n+i,INF);
        }
        scanf("%d",&z);
        if(z) y+=g;
        if(x) add(S,n+i,y);
        else add(n+i,T,y);
    }
    while(bfs())ans-=maxflow(S,INF);
    cout<<ans<<endl;
    return 0;
}
