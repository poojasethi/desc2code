#include <iostream>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
#define N 20050
#define M 1000050
#define INF 0x7f7f7f7f
int n,m,c[M][3],fi[N],S=N-1,T=N-2,g,ans,ss=1,li[N],h[N];
bool b[N];
inline int Read()
 {
 	int x=0;char y;
 	do y=getchar(); while (y<'0'||y>'9');
 	do x=x*10+y-'0',y=getchar(); while (y>='0'&&y<='9');
 	return x;
 }
inline void Line(int x,int y,int z)
 {
 	c[++ss][0]=y;c[ss][1]=fi[x];c[ss][2]=z;fi[x]=ss;
 	c[++ss][0]=x;c[ss][1]=fi[y];fi[y]=ss;
 }
int BFS()
 {
 	memset(h,0,sizeof(h));
 	int le=1,ri=1;li[1]=S;h[S]=1;
 	for (;le<=ri;le++)
 	 for (int i=fi[li[le]];i;i=c[i][1])
 	  if (c[i][2]&&!h[c[i][0]])
 	  	h[li[++ri]=c[i][0]]=h[li[le]]+1;
 	return h[T]>0;
 }
int DFS(int x,int y)
 {
 	if (x==T) return y;
 	int k,l=0;
 	for (int i=fi[x];i&&y;i=c[i][1])
 	 if (c[i][2]&&h[c[i][0]]==h[x]+1)
 	  {
 	  	 k=DFS(c[i][0],min(y,c[i][2]));
 	  	 if (!k) continue;
 	  	 l+=k;y-=k;c[i^1][2]+=k;c[i][2]-=k;
 	  }
 	return l;
 }
int main()
 {
 	n=Read();m=Read();g=Read();
 	for (int i=1;i<=n;i++) b[i]=Read();
 	for (int i=1;i<=n;i++)
 	 if (b[i]) Line(S,i,Read());else
 	   Line(i,T,Read());
 	for (int i=1;i<=m;i++)
 	 {
 	 	int q=Read(),w=Read(),e=Read();
 	 	ans+=w;
 	 	while (e--)
 	 	 if (q) Line(i+n,Read(),INF);else Line(Read(),i+n,INF);
 	 	w+=Read()?g:0;
 	 	if (q) Line(S,i+n,w);else Line(i+n,T,w);
 	 }
 	while (BFS()) ans-=DFS(S,INF);
 	cout <<ans<<endl;
 	return 0;
 }