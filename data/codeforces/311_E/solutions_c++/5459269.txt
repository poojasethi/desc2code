#include <cstdio>
#include <cstring>
#include <algorithm>
#define rep(i,s,t) for (int i = s; i <= t; ++i)
#define per(i,s,t) for (int i = s; i >= t; --i)
#define inf 2147483647
#define N 12010
using namespace std;
struct edge{
	int b, c, next;
}e[200010];
int n, m, g, S, T, cp, sum;
int col[N];
int H[N], cur[N], dis[N], cnt[N], low[N], pre[N];
inline void add(int u, int v, int k){
	e[++cp].b = v, e[cp].c = k, e[cp].next = H[u], H[u] = cp;
	e[++cp].b = u, e[cp].c = 0, e[cp].next = H[v], H[v] = cp;
}
void Init(){
	scanf("%d%d%d", &n, &m, &g);
	int x;
	S = 0, T = n+m+1, cp = 1;
	rep(i,1,n) scanf("%d", &col[i]);
	rep(i,1,n){
		scanf("%d", &x);
		if (col[i] == 0) add(S, i, x);
		else add(i, T, x);
	}
	rep(i,1,m){
		int Col, w, k, x, Fri; scanf("%d%d%d", &Col, &w, &k); sum+=w;
		rep(j,1,k){
			scanf("%d", &x);
			if (Col == 0) add(n+i, x, inf);
			else add(x, n+i, inf);
		}
		scanf("%d", &Fri); if (Fri == 1) w+=g;
		if (Col == 0) add(S, n+i, w);
		else add(n+i, T, w);
	}
}
int Sap(){
	rep(i,S,T) { dis[i] = 0, cur[i] = H[i]; } cnt[0] = T+1; low[S] = inf;
	int flow = 0, u = S, v, now;
	while (dis[S] < T+1){
		for (now = cur[u]; now; now = e[now].next) if (e[now].c && dis[u] == dis[e[now].b]+1) break; cur[u] = now;
		if (now){
			pre[v = e[now].b] = now; low[v] = min(e[now].c, low[u]);
			if ((u = v) == T){
				do{ e[pre[u]].c-=low[T], e[pre[u]^1].c+=low[T], u = e[pre[u]^1].b; }while (u != S);
				flow+=low[T];
			}
		}
		else{
			if (--cnt[dis[u]] == 0) break; cur[u] = H[u]; dis[u] = T+1;
			for (now = H[u]; now; now = e[now].next) if (e[now].c) dis[u] = min(dis[u], dis[e[now].b]+1);
			++cnt[dis[u]];
			if (u != S) u = e[pre[u]^1].b;
		}
	}
	return flow;
}
int main(){
	Init();
	printf("%d\n", sum-Sap());
	return 0;
}