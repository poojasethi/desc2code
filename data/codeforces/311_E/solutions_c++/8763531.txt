#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int inf=0x3f3f3f3f;
struct node
{
	int point,link,c,f;
}list[64050];
int v[12050],q[12050],d[12050];
bool vis[12050];
int a[10050];
int n,m,N,num;
void join(int x,int y,int c)
{
	num++; list[num].point=y; list[num].c=c;
	list[num].f=0; list[num].link=v[x]; v[x]=num;
}
bool bfs()
{
	int i,h,t,x;
	memset(vis,false,sizeof(vis));
	h=0; t=1; q[1]=1; d[1]=0; vis[1]=true;
	while (h<t)
	{
		h++; x=q[h]; i=v[x];
		while (i!=-1)
		{
			if ((list[i].c>list[i].f)&&(!vis[list[i].point]))
			{
				d[list[i].point]=d[x]+1; vis[list[i].point]=true;
				t++; q[t]=list[i].point;
			}
			i=list[i].link;
		}
	}
	return vis[N];
}
int dfs(int i,int t)
{
	int j,u,tt;
	if (i==N) return t;
	j=v[i]; tt=t;
	while (j!=-1)
	{
		if ((list[j].c>list[j].f)&&(d[list[j].point]==d[i]+1))
		{
			u=dfs(list[j].point,min(t,list[j].c-list[j].f));
			t-=u; list[j].f+=u; list[j^1].f-=u;
		}
		if (!t) break;
		j=list[j].link;
	}
	if (t) d[i]=-1;
	return tt-t;
}
int main()
{
	int i,j,g,x,y,w,k,z,ans;
	scanf("%d%d%d",&n,&m,&g);
	N=n+m+2; num=-1; ans=0;
	memset(v,0xff,sizeof(v));
	for (i=1;i<=n;i++) scanf("%d",&a[i]);
	for (i=1;i<=n;i++)
	{
		scanf("%d",&x);
		if (a[i]==0)
		{
			join(1,i+1,x); join(i+1,1,0);
		}
		else
		{
			join(i+1,N,x); join(N,i+1,0);
		}
	}
	for (i=1;i<=m;i++)
	{
		scanf("%d%d%d",&x,&w,&k);
		ans+=w;
		for (j=1;j<=k;j++)
		{
			scanf("%d",&y);
			if (x==0)
			{
				join(i+n+1,y+1,inf); join(y+1,i+n+1,0);
			}
			else
			{
				join(y+1,i+n+1,inf); join(i+n+1,y+1,0);
			}
		}
		scanf("%d",&z);
		if (z) w+=g;
		if (x==0)
		{
			join(1,i+n+1,w); join(i+n+1,1,0);
		}
		else
		{
			join(i+n+1,N,w); join(N,i+n+1,0);
		}
	}
	while (bfs()) ans-=dfs(1,inf);
	printf("%d\n",ans); return 0;
}