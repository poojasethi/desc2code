#include <cstdio>
using namespace std;
const int N=12004,M=70004,oo=1000000000;
int n,m,g,s[N],q[N],d[N];
int E,first[N],cur[N],next[M],des[M],cap[M];
void adde(int u,int v,int w)
{
	next[++E]=first[u]; first[u]=E;
	des[E]=v; cap[E]=w;
}
void add(int u,int v,int w) {adde(u,v,w); adde(v,u,0);}
bool augment(int u,int &f)
{
	if (u==n) return true;
	for (int &i=cur[u];i;i=next[i])
	{
		if ((!cap[i])||(d[u]+1!=d[des[i]])) continue;
		int ff=((cap[i]<f)?cap[i]:f);
		if (augment(des[i],ff))
		{
			cap[i]-=ff; cap[((i-1)^1)+1]+=ff;
			f=ff; return true;
		}
	}
	return false;
}
bool bfs(int &flow)
{
	int head=1,tail=1,i; q[1]=d[0]=0;
	for (i=1;i<=n;i++) d[i]=oo;
	while (head<=tail)
	{
		int u=q[head++];
		for (i=first[u];i;i=next[i])
		{
			int v=des[i];
			if ((!cap[i])||(d[v]<oo)) continue;
			d[v]=d[u]+1; q[++tail]=v;
		}
	}
	if (d[n]==oo) return false;
	bool ret=false; int delta;
	for (i=0;i<=n;i++) cur[i]=first[i];
	while (augment(0,delta=oo)) ret=true,flow+=delta;
	return ret;
}
int dinic()
{
	int flow=0;
	while (bfs(flow));
	return flow;
}
int main()
{
	int i,j; scanf("%d%d%d",&n,&m,&g);
	for (i=1;i<=n;i++) scanf("%d",&s[i]);
	E=0; for (i=0;i<=n+m+1;i++) first[i]=0;
	for (i=1;i<=n;i++)
	{
		int v; scanf("%d",&v);
		if (s[i]) add(i,n+m+1,v); else add(0,i,v);
	}
	int tot=0;
	for (i=1;i<=m;i++)
	{
		int s,k,w,f;
		scanf("%d%d%d",&s,&w,&k); tot+=w;
		for (j=1;j<=k;j++)
		{
			int x; scanf("%d",&x);
			if (!s) add(n+i,x,oo); else add(x,n+i,oo);
		}
		scanf("%d",&f); if (f) w+=g;
		if (s) add(n+i,n+m+1,w); else add(0,n+i,w);
	}
	n+=m+1; printf("%d\n",tot-dinic());
	return 0;
}