#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<iostream>
#include<algorithm>
using namespace std;

const int Maxn=12000+10;
const int INF=1e9;
int n,m,p,x,u,w,k,f,g,now,last,t,sum,tot,ans,head[Maxn],corrent[Maxn],d[Maxn],a[Maxn],v[Maxn];
queue<int>Q;

struct Node{
	int next,go,w;
	Node(){};
	Node(int a,int b,int c){next=a;go=b;w=c;}
}lik[6100000];

void build(int a,int b,int c){
	lik[++p]=Node(head[a],b,c);head[a]=p;
	lik[++p]=Node(head[b],a,0);head[b]=p;
}

bool Bfs(){
	memset(d,-1,sizeof(d));
	d[now]=1;Q.push(now);
	while (!Q.empty()){
		t=Q.front();Q.pop();
		for (int i=head[t];i!=0;i=lik[i].next)
			if (lik[i].w&&d[lik[i].go]==-1){
				d[lik[i].go]=d[t]+1;
				Q.push(lik[i].go);
			}
	}
	return d[last]>0;
}

int find(int t,int sum){
	if (t==last) return sum;
	int ans;
	for (int i=corrent[t];i!=0;i=lik[i].next){
		corrent[t]=i;
		if (lik[i].w&&d[lik[i].go]==d[t]+1&&(ans=find(lik[i].go,min(sum,lik[i].w)))){
			lik[i].w-=ans;
			lik[i^1].w+=ans;
			return ans;
		}
	}
	return 0;
}

void init(){
	scanf("%d%d%d\n",&n,&m,&g);p=1;now=n+m+1;last=n+m+2;
	for (int i=1;i<=n;++i) scanf("%d",&a[i]);
	for (int i=1;i<=n;++i){
		scanf("%d",&v[i]);
		if (a[i]==0) build(now,i,v[i]);else build(i,last,v[i]);
	}
	for (int i=1;i<=m;++i){
		scanf("%d%d%d",&x,&w,&k);
		for (int j=1;j<=k;++j){
			scanf("%d",&u);(x==0)?build(n+i,u,INF):build(u,n+i,INF);
		}
		scanf("%d\n",&f);
		if (f==1){sum-=g;w+=g;}
		sum+=w;
		(x==1)?build(n+i,last,w):build(now,n+i,w);
	}
	while (Bfs()){
		memcpy(corrent,head,sizeof(head));
		while (ans=find(now,INF)) tot+=ans;
	}
	printf("%d\n",sum-tot);
}

int main()
{
	init();
	return 0;
}
 	  	 	 		 				 		 	 	  			 	