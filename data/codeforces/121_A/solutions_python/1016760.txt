import re

def ones(n):
  return int('1' * n or 0)

trivial = re.compile("^[47]*$")
smaller = re.compile("^[0-3]")
medium = re.compile("^[5-6]")
bigger = re.compile("^[8-9]")
sophisticated = re.compile("^(?P<prefix>[47]*)(?P<suffix>.*$)")

def nxt(n):
  # print n
  s = str(n)

  if re.search(trivial, s):
    return n
  elif re.search(smaller, s):
    return ones(len(s)) * 4
  elif re.search(medium, s):
    return ones(len(s)) * 7 - ones(len(s) - 1) * 3
  elif re.search(bigger, s):
    return ones(len(s) + 1) * 4
  elif re.search(sophisticated, s):
    m = re.match(sophisticated, s)
    p = m.group('prefix').strip()
    s = m.group('suffix').strip()
    # print p, s
    fst = int(p)
    snd = nxt(int(s))
    # print fst, snd
    if snd > (10 ** (len(s))):
      # print "trick"
      snd %= (10 ** (len(s)))
      fst = nxt(fst + 1)

    fst *=  (10 ** (len(s)))
    return fst + snd

def solve(a, b):
  res = 0
  
  while True:
    c = nxt(a)
    # print a, b,
    # print c,
    # print res
    if c < b:
      res += (c - a + 1) * c
      a = c + 1
    else:
      res += (b - a + 1) * c      
      return res

[a, b] = map(int, raw_input().split())
print solve(a, b)
