from sys import stdin
import fractions

def line():
    return stdin.readline().split()
def read_int():
    return int(line()[0])
def read_ints():
    return [int(x) for x in line()]
def memo(fn):
    table = {}
    def memoized(*args):
        if args not in table:
            table[args] = fn(*args)
        return table[args]
    return fn

def lucky_numbers(length=10):
    yield 4
    yield 7
    if length == 1:
        return
    else:
        prev = list(lucky_numbers(length - 1))
        for num in prev:
            yield 10 * num + 4
            yield 10 * num + 7

def solve(l, r, nums):
    if len(nums) == 1:
        return nums[0] * (r - l + 1)

    total = nums[0] * (nums[0] - l + 1)
    for i in range(1, len(nums) - 1):
        total += nums[i] * (nums[i] - nums[i - 1])
    total += nums[-1] * (r - nums[-2])
    return total

l, r = read_ints()
nums = list(lucky_numbers())
nums = [x for x in nums if x >= l]
max_num = min(x for x in nums if x >= r)
nums = [x for x in nums if x <= max_num]
print solve(l, r, nums)
