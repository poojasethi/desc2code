#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 200005;

struct arr {
	int l;
	int r;
	int id;
	bool operator < (const arr& a) const {
		return l > a.l;
	}
} q[N];
int w[N], tree[N], ans[N];
vector<int> re[N];

int swap(int &x, int &y) {
	int a = x;
	x = y;
	y = a;
}

int main() {
	int n, m, x;
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &x);	
		w[x] = i;
	}
	for (int i = 1; i <= n; i++)
		for (int j = i; j <= n; j += i) {
			int u = w[i], v = w[j];
			if (u > v) swap(u, v);
			re[u].push_back(v);	
		}
	for (int i = 0; i < m; i++) {
		scanf("%d%d", &q[i].l, &q[i].r);
		q[i].id = i;
	}
	sort(q, q + m);
	int p = n;
	for (int i = 0; i < m; i++) {
		int l = q[i].l, r = q[i].r, id = q[i].id; 
		for (; p >= l; p--) {
			for (int j = 0; j < re[p].size(); j++) {
				int t = re[p][j];
				for (int k = t; k <= n; k += k & -k) tree[k]++;
			}
		}
		for (int k = r; k; k -= k & -k) ans[id] += tree[k];
	}
	for (int i = 0; i < m; i++) printf("%d\n", ans[i]);
	return 0;
}
