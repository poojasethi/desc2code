#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

int n, m;
int arr[200100], tree[200100];
vector<int> pairs[200100], queries[200100], indexes[200100];
int ans[200100];

void add(int x)
{
  while(x <= n)
  {
    tree[x]++;
    x += x & -x;
  }
}

int sum(int x)
{
  int sum = 0;

  while(x)
  {
    sum += tree[x];
    x -= x & -x;
  }

  return sum;
}

int main(void)
{
  cin >> n >> m;

  memset(tree, 0, 200100);

  for(int i = 1; i <= n; i++)
  {
    int input;
    cin >> input;
    arr[input] = i;
  }

  for(int i = 1; i <= n; i++)
  {
    for(int j = i; j <= n; j += i)
      pairs[max(arr[i], arr[j])].push_back(min(arr[i], arr[j]));
  }

  for(int i = 1; i <= m; i++)
  {
    int l, r;
    cin >> l >> r;
    queries[max(l, r)].push_back(min(l, r));
    indexes[max(l, r)].push_back(i);
  }

  for(int i = 1; i <= n; i++)
  {
    for(int j = 0; j < pairs[i].size(); j++)
      add(pairs[i][j]);
    for(int j = 0; j < queries[i].size(); j++)
      ans[indexes[i][j]] = sum(i) - sum(queries[i][j] - 1);
  }

  for(int i = 1; i <= m; i++)
    cout << ans[i] << endl;

  return 0;
}
