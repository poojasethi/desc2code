#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pie;

#define L first
#define R second
#define MP make_pair
#define PB push_back

const int maxn = 2e5 + 100;

int ans[maxn], a[maxn], tree[maxn], pos[maxn];
vector<int> v[maxn];
pair<pie, int> sg[maxn];

void addToSegs(int fi, int se){
	if(fi > se)
		return addToSegs(se, fi);
	v[fi].PB(se);
}

void add(int idx){
	while(idx <= 200000){
		tree[idx]++;
		idx += idx & (-idx);
	}
}

int get(int idx){
	int ret = 0;
	while(idx > 0){
		ret += tree[idx];
		idx -= idx & (-idx);
	}
	return ret;
}

int main(){
	ios_base::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	for(int i=1;i<=n;i++){
		cin >> a[i];
		pos[a[i]] = i;
	}
	for(int i=1;i<=m;i++){
		cin >> sg[i].L.L >> sg[i].L.R;
		sg[i].R = i;
	}
	sort(sg+1, sg+m+1);
	for(int i=1;i<=n;i++)
		for(int j=1;j*i<=n;j++)
			addToSegs(pos[i], pos[i*j]);
	int now = n;
	for(int i=m;i>=1;i--){
		while(now >= 1 and sg[i].L.L <= now){
			for(int j=0;j<v[now].size();j++)
				add(v[now][j]);
			now --;
		}
		ans[sg[i].R] = get(sg[i].L.R);
	}
	for(int i=1;i<=m;i++)
		cout << ans[i] << '\n';
}
