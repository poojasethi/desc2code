#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<iostream>
#include<vector>
#include<map>
using namespace std;
const int N = 200005;
typedef __int64 ll;
typedef pair<int,int> per;
#define mp(x,y) make_pair(x,y)
int a[N],ps[N],c[N];
int lowbit(int x)
{
	return x&(-x);
}
void up(int x,int v)
{
	while(x<N)
	{
		c[x]+=v;
		x+=lowbit(x);
	}
}
int getsum(int x)
{
	int r=0;
	while(x>0)
	{
		r+=c[x];
		x-=lowbit(x);
	}
	return r;
}
per sg[N*20];
struct P
{
	int l,r,id;
}data[N];
bool cmp(P x,P y)
{
	return x.l<y.l;
}
int ret[N];
int main()
{
	int n,m,i,j,k=0;
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
		ps[a[i]]=i;
	}
	for(i=1;i<=n;i++)
	{
		for(j=i;j<=n;j+=i)
		{
			int l=ps[i],r=ps[j];
			if(l>r)l^=r^=l^=r;
			sg[k++]=mp(l,r);
		}
	}
	sort(sg,sg+k);
	for(i=0;i<m;i++)
	{
		scanf("%d%d",&data[i].l,&data[i].r);
		data[i].id=i;
	}
	sort(data,data+m,cmp);
	j=k-1;
	for(i=m-1;i>=0;i--)
	{
		while(j>=0&&sg[j].first>=data[i].l)
		{
			up(sg[j].second,1);
			j--;
		}
		ret[data[i].id]=getsum(data[i].r);
	}
	for(i=0;i<m;i++)printf("%d\n",ret[i]);
    return 0;
}
	  	  	 	 	  		 	 		    		