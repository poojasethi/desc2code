#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long I;

const int M = 2e5+5;
int N,Q;
int arr[M];I t[M]; int s[M];
int lowbit(int i){return i&-i; }
I ans[M];
struct node
{
	int l,r;int id;
};
node q[M];
bool cmp(node a,node b)
{
	return a.l<b.l;
}
void add(int i)
{
	while(i<=N)
	{
		t[i]+=1; i+=lowbit(i);
	}
}
I getsum(int i)
{
	I m=0;
	while(i)
	{
		m+=t[i]; i-=lowbit(i);
	} return m;
}
int main()
{
	cin>>N>>Q;
	for(int i=1;i<=N;i++) scanf("%d",&arr[i]);
	for(int i=0;i<Q;i++) scanf("%d%d",&q[i].l,&q[i].r),q[i].id=i;
	sort(q,q+Q,cmp);
	for(int i=N,j=Q-1;i;i--)
	{
		for(int k=1;k*k<=arr[i];k++)
		{
			if(arr[i]%k==0)
			{
				int kk=arr[i]/k;
				if(s[k]) add(s[k]);
				if(k!=kk)
				if(s[kk]) add(s[kk]);
			}
		}
		for(int k=2;k*arr[i]<=N;k++)
		if(s[k*arr[i]]) add(s[k*arr[i]]);
		s[arr[i]]=i;
		for(;q[j].l==i&&j>=0;j--)
		{
			ans[q[j].id]=getsum(q[j].r)+q[j].r-q[j].l+1;
		}
	}
	for(int i=0;i<Q;i++) cout<<ans[i]<<endl;
	return 0;
}
/*
9 5
9 3 1 2 4 5 6 7 8 
1 2
1 3
1 9
1 7
*/
 		     					   	 			 		