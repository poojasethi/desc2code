#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

const int N = 2e5+5;
vector<pair<int, int> > Q[N];
vector<int> edg[N];
int bit[N], pos[N], a[N], sol[N], tot;

void add(int x) {
	++tot;
	while(x<N) { bit[x]++; x += (x&-x); }
}
int get(int x) {
	int ret=0;
	while(x) { ret += bit[x]; x -= (x&-x); }
	return ret;
}

int main(void) {
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i=1;i<=n;i++) {
		scanf("%d", &a[i]);
		pos[a[i]] = i;
	}
	for(int i=0;i<m;i++) { int L, R; scanf("%d%d", &L, &R); Q[R].push_back(make_pair(L, i)); }
	for(int i=1;i<=n;i++) {
		int x = a[i];
		for(int j=x;j<=n;j+=x) if(pos[j] <= i) add(pos[j]); else edg[pos[j]].push_back(i);
		FOR(it, edg[i]) add(*it);
		FOR(it, Q[i]) sol[it->second] = tot - get(it->first - 1);
	}
	for(int i=0;i<m;i++) printf("%d\n", sol[i]);
	return 0;
}
