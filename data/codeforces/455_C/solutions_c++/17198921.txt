#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

const int N = 300050;
int p[N], len[N];
vector < int > G[N];
int find(int u) {
	if(u == p[u]) return u;
	return p[u] = find(p[u]);
}

int ans;
int dfs(int u, int p) {
	int mx1 = 0, mx2 = 0;
	for(int i = 0; i < (int)G[u].size(); ++i)
		if(G[u][i] != p) {
			mx2 = max(mx2, 1+dfs(G[u][i], u));
			if(mx2 > mx1)
				swap(mx2, mx1);
		}
	ans = max(ans, mx1+mx2);
	return mx1;
}

int main() {
	int n, m, q;
	scanf("%d%d%d", &n, &m, &q);
	for(int i = 1; i <= n; ++i) {
		p[i] = i;
		len[i] = 0;
	}
	for(int i = 0, a, b; i < m; ++i) {
		scanf("%d%d", &a, &b);
		G[a].push_back(b);
		G[b].push_back(a);
		a = find(a);
		b = find(b);
		if(a != b) p[a] = b;
	}
	for(int i = 1; i <= n; ++i) {
		find(i);
		if(i != p[i]) continue;
		ans = 0;
		dfs(i, -1);
		len[i] = ans;
	}
	for(int i = 0, t, a, b; i < q; ++i) {
		scanf("%d", &t);
		if(t == 2) {
			scanf("%d%d", &a, &b);
			a = find(a);
			b = find(b);
			if(a == b) continue;
			len[b] = max(len[b], max(len[a], (len[a]+1) / 2 + (len[b]+1) / 2 + 1));
				p[a] = b;
		}
		else {
			scanf("%d", &a);
			printf("%d\n", len[find(a)]);
		}
	}

	return 0;
}
