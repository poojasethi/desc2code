#include<stdio.h>
#include<algorithm>
#include<vector>
using namespace std;
vector <int> edge[333333];
int p[333333],LL[333333],n,m,q,i,a,b,t;
int lo(int nn,int pp){
    p[nn]=pp;
    int t,m1=0,m2=0;
    for(vector <int>::iterator it=edge[nn].begin();it!=edge[nn].end();it++){
        if(p[*it]==pp)continue;
        t=lo(*it,pp);
        if(t>m2)m2=t;
        if(t>m1){m2=m1;m1=t;}
    }
    LL[pp]=max(LL[pp],m1+m2);
    return m1+1;
}
int fp(int x){
    if(p[x]==x)return x;
    else {
        return p[x]=fp(p[x]);
    }
}
int main(){
    scanf("%d %d %d",&n,&m,&q);
    for(i=0;i<m;i++){
        scanf("%d %d",&a,&b);
        edge[a].push_back(b);
        edge[b].push_back(a);
    }
    for(i=1;i<=n;i++)if(p[i]==0)lo(i,i);
    for(i=0;i<q;i++){
//        for(int j=1;j<=n;j++)if(p[j]==j)printf("%d ",LL[j]);
//        printf("\n");
        scanf("%d",&t);
        if(t==1){
            scanf("%d",&a);
            printf("%d\n",LL[fp(a)]);
        }
        else {
            scanf("%d %d",&a,&b);
            a=fp(a);
            b=fp(b);
            if(a==b)continue;
//            printf("%d %d\n",p[a],p[b]);
            LL[b]=max((LL[a]+1)/2+(LL[b]+1)/2+1,max(LL[a],LL[b]));
            p[a]=b;
        }
    }
}
