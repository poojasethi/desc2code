#include <iostream>
#include <string.h>
#include <algorithm>
#include <stdio.h>
#include <vector>
using namespace std;
#define MAX 300010

vector<int> e[MAX];
int d[MAX], f[MAX], fa[MAX];
int n, m, q;

void optimize(int u, int v)
{
	d[u] = max(d[u], f[u] + f[v] + 1);
	f[u] = max(f[u], f[v] + 1);

	d[u] = max(d[u], d[v]);
}

void dfs(int u)
{
	for (int i = 0; i < e[u].size(); ++i)
	{
		int v = e[u][i];
		if (fa[v] < 0)
		{
			fa[v] = u;
			dfs(v);
			
			optimize(u, v);
		}
	}
}

int getroot(int u)
{
	if (!fa[u]) return u;
	return fa[u] = getroot(fa[u]);
}

int main()
{
//	freopen("input.txt", "r", stdin);
	scanf("%d%d%d", &n, &m, &q);
	for (int i = 0; i < m; ++i)
	{
		int u, v;
		scanf("%d%d", &u, &v);
		e[u].push_back(v);
		e[v].push_back(u);
	}

	memset(fa, -1, sizeof(fa));
	for (int i = 1; i <= n; ++i)
	if (fa[i] < 0)
	{
		fa[i] = 0;
		dfs(i);
	}

	while (q--)
	{
		int k, x, y;
		scanf("%d", &k);
		if (k == 1)
		{
			scanf("%d", &x);
			int r = getroot(x);
			printf("%d\n", d[r]);
		}
		else
		{
			scanf("%d%d", &x, &y);
			int rx = getroot(x), ry = getroot(y);
			if (rx != ry)
			{
				fa[ry] = rx;
				d[rx] = max(max(d[ry], d[rx]), (d[rx] + 1) / 2 + (d[ry] + 1) / 2 + 1);
			}
		}
	}
}