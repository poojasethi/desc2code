#include <bits/stdc++.h>
#define maxn 310000

using namespace std;

typedef pair<int,int> ii;
int N,M,K,dad[maxn],tut[maxn],used[maxn],mx,nd;
vector<int> v[maxn];

int find(int a){
	if(dad[a]==a)
		return a;
	return dad[a]=find(dad[a]);
}

void dfs(int a,int dad,int tut){
	used[a]=1;
	if(tut>mx){
		mx=tut;
		nd=a;
	}
	for(int i=0;i<v[a].size();i++)
		if(dad!=v[a][i])
			dfs(v[a][i],a,tut+1);
}

int main(){
	int a,b,c;
	scanf(" %d %d %d",&N,&M,&K);
	for(int i=1;i<=N;i++)
		dad[i]=i;
	for(int i=1;i<=M;i++){
		scanf(" %d %d",&a,&b);
		v[a].push_back(b);
		v[b].push_back(a);
		dad[find(a)]=find(b);
	}
	for(int i=1;i<=N;i++)
		if(!used[i]){
			nd=mx=0;
			dfs(i,0,0);
			dfs(nd,0,0);
			tut[find(i)]=mx;
		}
	for(int i=1;i<=K;i++){
		scanf(" %d",&a);
		if(a==1){
			scanf(" %d",&b);
			printf("%d\n",tut[find(b)]);
		}
		else{
			scanf(" %d %d",&b,&c);
			if(find(b)==find(c))
				continue;
			int tmp=ceil(tut[find(b)]/2.00);
			int tmp1=ceil(tut[find(c)]/2.00);
			if(tut[find(c)]>tut[find(b)]){
				tut[find(c)]=max(tmp+tmp1+1,tut[find(c)]);
				dad[find(b)]=find(c);
			}
			else{
				tut[find(b)]=max(tmp+tmp1+1,tut[find(b)]);
				dad[find(c)]=find(b);
			}
		}
	}
	return 0;
}
