#include<bits/stdc++.h>
using namespace std;

const int N = 300030;
int n, m, q, x, y, type, p[N], l[N], ans=0, parent;
vector<int> g[N];
bool vis[N];

int dfs(int u, int par) {
	p[u] = parent;
	int cur=0,  mx=0;
	for(int i=0 ; i<(int)g[u].size() ; ++i) {
		if(g[u][i] != par) {
			cur = 1 + dfs(g[u][i], u);
			ans = max(ans, mx+cur);
			mx = max(mx, cur);
		}
	}
	return mx;
}

int find(int x){
	if(x == p[x]) return x;
	return p[x] = find(p[x]);
}

int main(int argc, char **argv) {
#ifndef ONLINE_JUDGE
	freopen("a.in", "r", stdin);
#endif
	scanf("%d%d%d", &n, &m, &q);
	for(int i=0 ; i<=n ; ++i) {
		p[i] = i;
	}
	while(m--) {
		scanf("%d%d", &x, &y);
		g[x].push_back(y);
		g[y].push_back(x);
	}
	vector<int> v;
	for(int i=1 ; i<=n ; ++i) {
		if(p[i] == i) {
			parent = i;
			ans = 0;
			dfs(i, 0);
			l[i] = ans;
		}
	}
	while(q--) {
		scanf("%d%d", &type, &x);
		if(type == 1) {
			printf("%d\n", l[find(x)]);
		} else {
			scanf("%d", &y);
			x = find(x);
			y = find(y);
			if(x == y) continue;
			p[x] = y;
			l[y] = max(l[y], max(l[x], (l[x]+1)/2 + (l[y]+1)/2 + 1));
		}
	}
	return 0;
}
