#include<bits/stdc++.h>
#include<algorithm>
using namespace std;
const int Maxn = 1000005;
int tot,toit[Maxn],next[Maxn],lis[Maxn];
int n,m,k,l,u,v,Maxdis,Maxver,q;
int f[Maxn],longest[Maxn],flag[Maxn]; 
void add(int k,int l)
{
	tot++;
	toit[tot] = l;
	next[tot] = lis[k];
	lis[k] = tot;
}
int gf(int u)
{
	if (f[u] == u) return u;
	f[u] = gf(f[u]);
	return f[u];
}

void dfs(int u,int mark,int dis,int i)
{
	flag[u]++;
	f[u] = i;
	if (dis>Maxdis)
	{
		Maxdis = dis;
		Maxver = u;
	}
	for (int k=lis[u];k!=0;k=next[k])
	{
		if (flag[toit[k]]==mark) dfs(toit[k],mark,dis+1,i);
	}
}
int main()
{
//	freopen("1.in","r",stdin);
	scanf("%d%d%d",&n,&m,&q);
	for (int i=0;i<m;i++)
	{
		scanf("%d%d",&k,&l);
		add(k,l);
		add(l,k);
	}
	for (int i=1;i<=n;i++)
	{
		if (f[i]) continue;
		Maxdis = -1; dfs(i,0,0,i);
		Maxdis = -1; dfs(Maxver,1,0,i);
		longest[i] = Maxdis;
	}
	int x,y;
	for (int i=0;i<q;i++)
	{
		scanf("%d",&x);
		if (x==1)
		{
			scanf("%d",&x);
			printf("%d\n",longest[gf(x)]);
			continue;
		}
		else
		{
			scanf("%d%d",&x,&y);
			x = gf(x); y = gf(y);
			if (x!=y)
			{
				f[x] = y;
				longest[y] = max(max(longest[x],longest[y]),(longest[x] + 1) / 2 + (longest[y] + 1) / 2 + 1);
			}
		}
	}
} 
