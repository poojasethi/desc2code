#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
const int maxn = 500000;
int n, m, q, r, dis, p, f[maxn], size[maxn], used[maxn];
vector<int> rou[maxn];
int Find(int x) {
  if (f[x] == x) return x;
  return f[x] = Find(f[x]);
}
void Merge(int u, int v) {
  int x = Find(u), y = Find(v);
  if (x == y) return;
  if (size[x] > size[y]) swap(x, y);
  f[x] = y;
  size[y] = max(size[y], ((size[y]+1)>>1)+((size[x]+1)>>1)+1);
}
void dfs(int u, int d, int m) {
  f[u] = r, used[u] = m+1;
  if (d > dis) {
    dis = d;
    p = u;
  }
  for (int i = 0; i < rou[u].size(); i++) {
    int v = rou[u][i];
    if (used[v] <= m) dfs(v, d+1, m);
  }
}
int main()
{
  scanf("%d%d%d", &n, &m, &q);
  for (int u, v, i = 0; i < m; i++) {
    scanf("%d%d", &u, &v);
    rou[u].push_back(v), rou[v].push_back(u);
  }
  for (int i = 1; i <= n; i++) 
    if (used[i] == 0) {
      r = i;
      dis = -1, dfs(i, 0, 0), dfs(p, 0, 1);
      size[i] = dis;
    }
  for (int t, x, y, i = 0; i < q; i++) {
    scanf("%d%d", &t, &x);
    if (t == 1) {
      printf("%d\n", size[Find(x)]);
    } else {
      scanf("%d", &y);
      Merge(x, y);
    }
  }
}
