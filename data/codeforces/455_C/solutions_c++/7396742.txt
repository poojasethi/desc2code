#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
const int MAX = 300005;
vector<int> adj[MAX];
int par[MAX], diam[MAX], d[MAX];
int find(int v)
{
	return (par[v] == v ? v : par[v] = find(par[v]));
}
void merge(int u, int v)
{
	par[v] = u;
	diam[u] = max(diam[u], max(diam[v], (diam[u] + 1) / 2 + (diam[v] + 1) / 2 + 1));
}
int dfs(int p, int v)
{
	int ans = v;
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		if (u != p)
		{
			d[u] = d[v] + 1;
			int x = dfs(v, u);
			if (d[ans] < d[x])
				ans = x;
		}
	}
	return ans;
}
int main()
{
	ios::sync_with_stdio(false);
	for (int i = 0; i < MAX; i++)
		par[i] = i;
	int n, m, q;
	cin >> n >> m >> q;
	for (int i = 0; i < m; i++)
	{
		int u, v;
		cin >> u >> v;
		merge(find(u), find(v));
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	memset(diam, -1, sizeof(diam));
	for (int v = 1; v <= n; v++)
		if (diam[find(v)] == -1)
		{
			int u = dfs(0, v);
			d[u] = 0;
			diam[find(v)] = d[dfs(0, u)];
		}
	while (q--)
	{
		int type;
		cin >> type;
		if (type == 1)
		{
			int v;
			cin >> v;
			cout << diam[find(v)] << endl;
		}
		else
		{
			int u, v;
			cin >> u >> v;
			u = find(u);
			v = find(v);
			if (u != v)
				merge(u, v);
		}
	}
	return 0;
}
