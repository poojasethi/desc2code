#include<cstdio>
#include<algorithm>
#include<cstdlib>
#include<cmath>
#include<iostream>
const int N=3*(1e5)+1;
using namespace std;
struct st{int to,next;} e[N<<1];
int n,m,k,x,y,z,cnt,i,p,q,root,fi[N],fa[N],f[N],g[N],ans[N];
bool vis[N]; 
void add(int x,int y)
{
	e[++cnt].to=y; e[cnt].next=fi[x]; fi[x]=cnt;
	e[++cnt].to=x; e[cnt].next=fi[y]; fi[y]=cnt;
}
int find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}
void dp(int x)
{
	vis[x]=1;
	for (int i=fi[x];i;i=e[i].next)
		if (!vis[e[i].to])
		{
			int y=e[i].to;
			fa[y]=x;
			dp(y);
			if (f[y]+1>f[x]) g[x]=f[x],f[x]=f[y]+1;
			else if (f[y]+1>g[x]) g[x]=f[y]+1;
		}
	ans[root]=max(ans[root],f[x]+g[x]);
}

int main()
{
		scanf("%d%d%d\n",&n,&m,&k);
		for (i=1;i<=n;i++) fa[i]=i;
		for (;m;m--)
		{
			scanf("%d%d\n",&x,&y);
			add(x,y);
		}
		for (i=1;i<=n;i++)
			if (!vis[i]) dp(root=i);
		for (;k;k--)
		{
			scanf("%d",&z);
			if (z==1)
			{
				scanf("%d\n",&x);
				printf("%d\n",ans[find(x)]);
			}
			else
			{
				scanf("%d%d\n",&x,&y);
				p=find(x);
				q=find(y);
				if (p==q) continue;
				fa[q]=p;
				ans[p]=max(max(ans[p],ans[q]),(ans[p]%2?(ans[p]>>1)+1:(ans[p]>>1))+(ans[q]%2?(ans[q]>>1)+1:(ans[q]>>1))+1);
			}
		}
}
