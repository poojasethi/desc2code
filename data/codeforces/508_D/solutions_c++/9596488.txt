#include <bits/stdc++.h>
using namespace std;
const int N = 400010;
typedef pair<int,int> pii;
#define X first
#define Y second


int ptr[N];
vector<pii>g[N];
bool marked[N];
int vcnt = 0 , in[N];
stack<int>st;
map<int,string>rv;
map<string,int>mp;
string a;

int getVertex( string s ) {
	
	if( mp.find(s) == mp.end() ) {
		mp[s] = vcnt ;
		rv[vcnt] = s ;
		vcnt++;
	}
	return mp[s];
}

void dfs( int v ) {
	for( ; ptr[v] < (int)g[v].size() ; ptr[v]++ ) {
		if( !marked[ g[v][ptr[v]].Y ] ) {
			marked[ g[v][ptr[v]].Y ] = true ;
			dfs( g[v][ptr[v]].X ) ;
		}
	}
	st.push(v);
}

int main()
{
	int n ; cin >> n ;
	for( int i = 0 ; i < n ; ++i ) {
		cin >> a ;
		string u = "" ;
		u += a[0];
	    u += a[1] ;
		string v = "" ;
		v+= a[1];
	    v+= a[2] ;
//		cout << u << " " << v << endl ;
		int un = getVertex(u);
		int vn = getVertex(v);
		g[un].push_back(pii(vn,i));
		in[vn]++;
	}
	int s = 0 , cnt = 0;
	for( int i = 0 ; i < vcnt ; ++i ) {
		if( g[i].size() > in[i] ) {
			cnt += g[i].size() - in[i] ;
			if( cnt > 1 ) {
				cout << "NO" << endl ; return 0 ;
			}
			s = i ;
		}
	}
	dfs(s);
	if( st.size() < n + 1 ) cout << "NO" << endl ;
	else {
		cout << "YES" << endl;
		cout << rv[st.top()];
		st.pop();
		while( !st.empty() ) {
			cout << rv[st.top()][1];
			st.pop();
		}
		cout << endl ;
	}
}
