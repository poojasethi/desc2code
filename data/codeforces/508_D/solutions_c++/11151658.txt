#include <cstdio>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;
const int MX = 128*128+128;
int n, in[MX], out[MX];
vector<int> adj[MX], cyc;

void dfs(int u) {
	while (!adj[u].empty()) {
		int v = adj[u].back();
		adj[u].pop_back();
		dfs(v);
		cyc.push_back(v);
	}
}

int main() {
	scanf("%d", &n);
	char a[10];
	int def;
	for (int i = 0; i < n; i++) {
		scanf("%s", &a);
		int x = (int)a[0]*128+(int)a[1], y = (int)a[1]*128+(int)a[2];
		adj[x].push_back(y);
		out[x]++; in[y]++;
		def = x;
	}
	int s = -1, e = -1;
	for (int i = 0; i < MX; i++) {
		if (out[i]+1 == in[i]) {
			if (e == -1) e = i;
			else {
				printf("NO\n"); return 0;
			}
		}
		if (out[i] == in[i]+1) {
			if (s == -1) s = i;
			else {
				printf("NO\n"); return 0;
			}
		}
		else if (abs(out[i]-in[i]) > 1) {
			printf("NO\n"); return 0;
		}
	}
	if (s == -1) s = def;
	dfs(s);
	cyc.push_back(s);
	if (cyc.size() != n+1) {
		printf("NO\n"); return 0;
	}
	reverse(cyc.begin(), cyc.end());
	printf("YES\n");
	for (int i = 0; i < cyc.size(); i++) {
		if (!i) {
			printf("%c", (char)(cyc[i]/128));
		}
		printf("%c", (char)(cyc[i]%128));
	}
	return 0;
}