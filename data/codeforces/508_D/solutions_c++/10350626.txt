#include<iostream>
#include<map>
#include<vector>
using namespace std;

const int maxn = 5000;

vector<int> g[maxn];
int mark[maxn], head[maxn];
int deg1[maxn], deg2[maxn];
int n, I;
string s;
vector<int> l;
map<string, int> M;

int A(char c){
	if (c >= 'a' && c <= 'z')
		return c - 'a';
	if (c >= 'A' && c <= 'Z')
		return c - 'A' + 26;
	return c - '0' + 26 + 26;
}

char C(int x){
	if (x<26)
		return 'a' + x;
	if (x<26+26)
		return 'A' + x - 26;
	return '0' + x - 26 - 26;
}	

void dfs(int x){
	while(head[x]<g[x].size()){
		head[x]++;
		dfs(g[x][head[x]-1]);
	}
	l.push_back(x);
}	

int main(){
	ios::sync_with_stdio(0);
	cin >> n;
	for (int i=0 ; i<n ; i++){
		cin >> s;
		M[s]++;
		int a = A(s[0]);
		int b = A(s[1]);
		int c = A(s[2]);
		int x = a*62 + b;
		int y = b*62 + c;
		g[x].push_back(y);
		deg1[x]++;
		deg2[y]++;
		I = x;
	}
	for (int i=0 ; i<62 * 62 ; i++)
		if (deg1[i] > deg2[i])
			I = i;
	dfs(I);
	string S;		
	for (int i=l.size()-1 ; i>=0 ; i--){
		S.push_back(C(l[i]/62));
		if (!i) S.push_back(C(l[i]%62));
	}
	for (int i=0 ; i<((int)S.size())-2 ; i++)
		M[S.substr(i,3)]--;
	for (map<string,int> :: iterator i = M.begin() ; i!=M.end() ; i++)
		if (i->second){
			cout << "NO" << endl;
			return 0;
		}	
	if (S.size() != n+2) cout << "NO" << endl;
	else cout << "YES" << endl << S << endl;
}
