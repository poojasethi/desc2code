#include <iostream>
#include <map>
#include <vector>
#include <stack>

using namespace std;

const int MAXN = 2 * 200010;

typedef pair<int, int> pii;

int ptr[MAXN];
vector<pii> edges[MAXN];
bool marked[MAXN];
int vcnt = 0, in[MAXN];
stack<int> st;
map<int, string> rv;
map<string, int> mp;
char a[3];

int getVertex(string s)
{
	if (mp.find(s) == mp.end())
	{
		mp[s] = vcnt;
		rv[vcnt] = s;
		vcnt++;
	}
	return mp[s];
}

void dfs(int v)
{
	for (; ptr[v] < edges[v].size(); ptr[v]++)
		if (!marked[edges[v][ptr[v]].second])
		{
			marked[edges[v][ptr[v]].second] = true;
			dfs(edges[v][ptr[v]].first);
		}
	st.push(v);
}

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> a[0] >> a[1] >> a[2];
		string u = "";
		u += a[0];
		u += a[1];
		string v = "";
		v += a[1];
		v += a[2];
		int un = getVertex(u);
		int vn = getVertex(v);
		edges[un].push_back(pii(vn, i));
		in[vn]++;
	}
	int source = 0, cnt = 0;
	for (int i = 0; i < vcnt; i++)
		if (edges[i].size() > in[i])
		{
			cnt += edges[i].size() - in[i];
			if (cnt > 1)
			{
				cout << "NO" << endl;
				return 0;
			}
			source = i;
		}
	dfs(source);
	if (st.size() < n + 1)
		cout << "NO" << endl;
	else
	{
		cout << "YES" << endl;
		cout << rv[st.top()];
		st.pop();
		while (!st.empty())
		{
			cout << rv[st.top()][1];
			st.pop();
		}
		cout << endl;
	}
}
