#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <queue>
#include <map>
using namespace std;
const int MAXN = 200000;
const int MAXP = 3850;
int ans[MAXN+10], cnt;
int ind[MAXP+10], out[MAXP+10], G[MAXP+10][MAXP+10];
inline int ID(char c)
{
	if('0' <= c && c <= '9') return c - '0';
	if('a' <= c && c <= 'z') return c - 'a' + 10;
	return c - 'A' + 36;
}
inline void print(int x)
{
	if(0 <= x && x <= 9) putchar(x+'0');
	else if(10 <= x && x < 36) putchar(x-10+'a');
	else putchar(x-36+'A');
}
int fint_st()
{
	int st = -1,i;
	for(i = 0;i <= MAXP;i++)
	{
		if(abs(ind[i] - out[i] > 1)) return -1;
		if(out[i] > ind[i])
		{
			if(st != -1) return -1;
			else
				st = i;
		}
	}
	if(st == -1) for(i = 0;i <= MAXP;i++) if(out[i]) return i;
	return st;
}
void dfs(int u)
{
	for(int v = 0; v <= MAXP; v++)
		if(G[u][v])
		{
			G[u][v]--;
			dfs(v);
			ans[++cnt] = v;
		}
}
int main()
{
	int n,i;
	scanf("%d",&n);
	char s[10];
	for(i = 1; i <= n; i++)
	{
		scanf("%s", s);
		int u = 62 * ID(s[0]) + ID(s[1]);
		int v = 62 * ID(s[1]) + ID(s[2]);
		out[u]++; ind[v]++; G[u][v]++;
	}
	int st = fint_st();
	if(st == -1) { puts("NO"); return 0; }
	dfs(st);
	ans[++cnt] = st;
	if(cnt != n+1) { puts("NO"); return 0; }
	puts("YES");
	for(int i = cnt; i >= 1; i--)
	{
		if(i == cnt) { print(ans[i]/62); print(ans[i]%62); }
		else print(ans[i]%62);
	}
}
	 			 	 	 		    		 		 	    	