#include <bits/stdc++.h>

using namespace std;

const int MAXN = 66000;

multiset<int> e[MAXN];
string ans;
vector<int> in(MAXN), out(MAXN);

void dfs(int v)
{
    while (!e[v].empty())
    {
        int to = *e[v].begin();
        e[v].erase(e[v].begin());
        dfs(to);
    }
    ans += (char)(v % 256);
}

int main()
{
    bool ok = true;
    int n, v;
    cin >> n;

    for (int i = 0; i < n; i++)
    {
        string s;
        cin >> s;
        int a, b;
        a = s[0] * 256 + s[1];
        b = s[1] * 256 + s[2];
        e[v = a].insert(b);
        out[a]++; in[b]++;
    }

    int v1 = -1, v2 = -1, c1 = 0, c2 = 0;
    for (int i = 0; i < MAXN; i++)
        if (in[i] - out[i] != 0)
        {
            if (in[i] == out[i] + 1)
                c1++, v1 = i;
            else if (in[i] == out[i] - 1)
                c2++, v2 = i;
            else if (in[i] - out[i])
                ok = false;
        }
    if (c1 > 1 || c2 > 1)
        ok = false;
    if (c1 + c2 == 1)
        ok = false;

    if (v2 != -1)
        v = v2;
    dfs(v); ans += (char)(v / 256);

    reverse(ans.begin(), ans.end());

    if (ok && ans.size() == n + 2)
    {
        cout << "YES\n";
        cout << ans;
    }
    else
        cout << "NO";
    return 0;
}
