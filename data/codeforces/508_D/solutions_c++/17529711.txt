#include <cstdio>
#include <cctype>
#include <algorithm>
#define repu(i,x,y) for (int i=x; i<=y; ++i)
using namespace std;

int n,cnt[4000],tot,root,ans[200100];
char str[5];
bool flag1,flag2;
struct edge
{
    int v;
    edge *nxt;
} pool[200100],*tp=pool,*fst[4000];

int num(char ch)
{
    if (isdigit(ch))
        return ch-'0';
    if (islower(ch))
        return ch-'a'+10;
    return ch-'A'+36;
}

char chr(int x)
{
    if (x<10)
        return '0'+x;
    if (x<36)
        return 'a'+x-10;
    return 'A'+x-36;
}

void addedge(int u,int v)
{
    ++cnt[u],--cnt[v];
    *tp=(edge){v,fst[u]},fst[u]=tp++;
}

void dfs(int x)
{
    for (edge *i=fst[x]; i; i=fst[x])
        fst[x]=i->nxt,dfs(i->v),ans[++tot]=i->v;
}

int main()
{
    scanf("%d",&n);
    repu(i,1,n)
    {
        scanf("%s",str);
        addedge(root=num(str[0])*62+num(str[1]),num(str[1])*62+num(str[2]));
    }
    repu(i,0,3843)
    {
        if (cnt[i]==1 && cnt[root]==1 && i!=root || abs(cnt[i])>1)
        {
            printf("NO\n");
            return 0;
        }
        if (cnt[i]==1)
            root=i;
    }
    dfs(root);
    if (tot<n)
    {
        printf("NO\n");
        return 0;
    }
    for (printf("YES\n%c%c",chr(root/62),chr(root%62)); tot; --tot)
        printf("%c",chr(ans[tot]%62));
    return 0;
}