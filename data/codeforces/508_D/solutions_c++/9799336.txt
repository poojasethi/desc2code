#include<iostream>
using namespace std;

struct edge
{
	int p,t;
} a[200000];
int n,en,s,f,len;
int last[5000],Id[5000],Od[5000];
char buf[1000000];


int I(char c)
{
	if(c>='0'&&c<='9') return c-'0';
	if(c>='a'&&c<='z') return c-'a'+10;
	return c-'A'+36;
}

char C(int i)
{
	if(i>=0&&i<=9) return i+'0';
	if(i>=10&&i<=35) return i+'a'-10;
	return i+'A'-36;
}

void add_edge(int from, int to)
{
	Id[to]++;
	Od[from]++;
	a[en].t=to;
	a[en].p=last[from];
	last[from]=en;
	en++;
}

void dfs(int v)
{
	while(last[v]!=-1)
	{
		int mem=a[last[v]].t;
		last[v]=a[last[v]].p;
		dfs(mem);
	}
	buf[len++]=C(v%63);
}

int main()
{
	char str[5];
	cin>>n;
	for(int i=0;i<5000;i++) last[i]=-1;
	for(int i=0;i<n;i++)
	{
		cin>>str;
		add_edge(I(str[0])*63+I(str[1]),I(str[1])*63+I(str[2]));
	}
	
	for(s=0;s<5000&&Od[s]-Id[s]!=1;s++);
	for(f=0;f<5000&&Id[f]-Od[f]!=1;f++);
	if(s==5000&&f==5000)
	{
		for(s=0;Od[s]==0;s++);
		f=s;
	}
	else
		if(s==5000||f==5000)
		{
			cout<<"NO";
			return 0;
		}
	
	for(int i=0;i<5000;i++)
		if(Id[i]!=Od[i]&&i!=s&&i!=f)
		{
			cout<<"NO";
			return 0;
		}
		
	dfs(s);
	if(len+1!=n+2)
		cout<<"NO";
	else
	{
		cout<<"YES"<<endl<<C(s/63);
		for(int i=len-1;i>=0;i--) cout<<buf[i];
	}
	return 0;
}