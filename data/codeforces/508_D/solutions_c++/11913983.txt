#include<bits/stdc++.h>
using namespace std;
map<string,vector<string> >adj;
map<string,int>in,out,yes;
set<string>allnodes;
int edges;
vector<string>path;
void dfs(string u)
{
    for(;yes[u]<adj[u].size();)
    {
      string v=adj[u][yes[u]];
      yes[u]++;
      dfs(v);
    }
    edges++;
    path.push_back(u);
}
int main()
{
   int n;
   cin>>n;
   string start;
   for(int i=0;i<n;i++)
   {
     string inp,x,y;
     cin>>inp;
     x+=inp[0];x+=inp[1];
     y+=inp[1];y+=inp[2];
     adj[x].push_back(y);
     allnodes.insert(x);allnodes.insert(y);
     in[y]++;out[x]++;
   }
   int cnt1=0,cntStart=0,cntEnd=0;
   set<string,int>::iterator it=allnodes.begin();
   for(;it!=allnodes.end();it++)
   {
        string tmp=*it;
        if(start=="")start=tmp;
        if(in[tmp]==out[tmp])cnt1++;
        if((out[tmp]-in[tmp])==1)cntStart++,start=tmp;
        if((in[tmp]-out[tmp])==1)cntEnd++;
   }
   int cnt2=cntStart+cntEnd;
   if((cntStart!=0 && cntStart!=1)||(cntEnd!=0 && cntEnd!=1)){puts("NO");return 0;}
   if((cnt2!=0 && cnt2!=2)|| (cnt1+cnt2!=allnodes.size())){puts("NO");return 0;}
    dfs(start);
    if(edges!=n+1){puts("NO");return 0;}
     reverse(path.begin(),path.end());
     printf("YES\n");
     cout<<path[0];
     for(int i=1;i<path.size();i++)
        cout<<path[i][1];
     cout<<endl;
   return 0;
}
