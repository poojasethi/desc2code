#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <vector>

#define pb push_back

int edges = 0;
std::map< std::string, std::vector< std::string > > adj;
std::map< std::string, int > in, out, e;
std::set< std::string > set;
std::vector< char > ans;

void DFS(std::string s){
 while(e[s] < (int)adj[s].size()){
	 edges++;
	 DFS(adj[s][e[s]++]);
 }
 
 ans.pb(s[1]);
}

int main(){
 int N;
 std::string str;
 
 scanf("%d",&N);
 for(int i = 1; i <= N; i++){
	 std::cin >> str;
	 std::string s = "", t = "";
	 s += str[0]; s += str[1];
	 t += str[1]; t += str[2];
	 
	 adj[s].pb(t);
	 out[s]++; in[t]++;
	 set.insert(s); set.insert(t);
 }
 
 std::string start = "", end = "";
 bool ok = 0;
 for(std::set< std::string >::iterator it = set.begin(); it != set.end(); it++){
	 std::string s = *it;
	 if(out[s] == in[s]+1){
		 if(start != "") goto INVALID;
		 start = s;
	 }
	 else if(in[s] == out[s]+1){
		 if(end != "") goto INVALID;
		 end = s;
	 }
	 else if(in[s] != out[s]) goto INVALID;
 }
 if(start == "") start = *set.begin();
 
 DFS(start);
 if(edges != N) goto INVALID;
 
 ok = true;
 ans.pb(start[0]);
 std::reverse(ans.begin(), ans.end());
 
 puts("YES");
 for(int i = 0; i < (int)ans.size(); i++) printf("%c",ans[i]);
 puts("");
 
 INVALID:
 if(!ok) puts("NO");
 
 return 0;
}
