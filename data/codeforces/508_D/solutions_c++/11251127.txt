#include <bits/stdc++.h>

using namespace std;

string res;
vector <queue <int> > G;


void findEulerPath(int u) {
    while(!G[u].empty()) {
        int v = G[u].front();
        G[u].pop();
        findEulerPath(v);
    }
    res += static_cast<char>(u%255);
}

int main() {
    int n;
    scanf("%d",&n);
    G = vector< queue <int> >(66000);
    int degree[66000] = {0};
    int k = 0;

    string cur;
    for(int i = 0; i < n; ++i) {
        cin >> cur;

        int u = static_cast<int>(cur[0])*255 + static_cast<int>(cur[1]);
        int v = static_cast<int>(cur[1])*255 + static_cast<int>(cur[2]);
        
        G[u].push(v);
        ++degree[u];
        --degree[v];
    }

    int start = -1, end = -1;
    for(int i = 0; i < 66000; ++i) 
        if(degree[i] == 1 && start == -1) 
            start = i;
        else if(degree[i] == -1 && end == -1)
            end = i;
        else if(degree[i] == 0)
            continue;
        else {
            cout << "NO" << endl;
            return 0;
        }

    if(start == -1) 
        start = static_cast<int>(cur[0])*255 + static_cast<int>(cur[1]);

    findEulerPath(start);

    res += static_cast<char>(start/255);

    reverse(res.begin(), res.end());

    if(res.size() != n+2)
        cout << "NO" << endl;
    else
        cout << "YES\n" << res << endl;

    return 0;
}