#include <bits/stdc++.h>
#define L first
#define R second
#define MP make_pair
#define LL long long
#define PB push_back

using namespace std;

typedef pair<int, int> pie;

const int maxn = 200;
int n, m, p[maxn][maxn];
vector<pie> e[maxn][maxn][2];
string ans;
vector<bool> mark[maxn][maxn];
bool odd = true;
pie start, des;

void chk(string s){
	e[s[0] - '0'][s[1] - '0'][0].PB(MP(s[1] - '0', s[2] - '0'));
	mark[s[0] - '0'][s[1] - '0'].PB(0);
	e[s[1] - '0'][s[2] - '0'][1].PB(MP(s[0] - '0', s[1] - '0'));
}

void dfs(pie v){
	for(;p[v.L][v.R] < e[v.L][v.R][0].size();p[v.L][v.R] ++)
		if(!mark[v.L][v.R][p[v.L][v.R]])
			mark[v.L][v.R][p[v.L][v.R]] = true,
			dfs(e[v.L][v.R][0][p[v.L][v.R]]);
	ans += (char)(v.R + '0');
}

main(){
	multiset<string> st;
	st.clear();
	string s;
	cin >> n;
	for(int i = 0;i < n;i ++)
		cin >> s,
		st.insert(s),
		chk(s);
	start = MP(-1, -1);
	int tp = 0;
	for(int i = 0;i < maxn;i ++)
		for(int j = 0;j < maxn;j ++)
			if(e[i][j][0].size() > e[i][j][1].size()){
				tp += e[i][j][0].size() - e[i][j][1].size();
				if(tp > 1){
					cout << "NO\n";
					return 0;
				}
				start = MP(i, j);
			}
	if(start == MP(-1, -1))
		start = MP(s[0] - '0', s[1] - '0');
	dfs(start);
	reverse(ans.begin(), ans.end());
	ans = (char)(start.L + '0') + ans;
	if(ans.size() < n + 1)
		cout << "NO\n";
	else
		cout << "YES\n" << ans << endl;
	return 0;
}
