#include <bits/stdc++.h>

using namespace std;

const long long linf = 5e18 + 9;
const int inf = 1e9 + 9;
const int  N = 1e5 + 9;

vector< int > ans, edge[N];

int n, temp, node, out[N], in[N];

bool flag;

void dfs(int node) {
	while (!edge[node].empty()) {
		int v = edge[node].back();
		edge[node].pop_back();
		dfs(v);
		ans.push_back(v);
	}
}

int main() {

	cin >> n;
	
	for (int i = 1; i <= n; i++) {
		string str;
		cin >> str;
		int u = str[0] * 300 + str[1];
		int v = str[1] * 300 + str[2];
		edge[u].push_back(v);
		temp = u;
		out[u]++;
		in[v]++;
	}

	for (int i = 1; i < 300 * 300; i++) {
		if (out[i] - in[i] == 1) {
			if (node) {
				cout << "NO" << endl;
				return 0;
			}
			node = i;
		}
		else if (in[i] - out[i] == 1) {
			if (flag == true) {
				cout << "NO" << endl;
				return 0;
			}
			flag = true;
 		}
		else if (abs(out[i] - in[i]) > 1) {
			cout << "NO" << endl;
			return 0;
		}
	}

	if (!node) {
		node = temp;
	}	

	dfs(node);

	ans.push_back(node);

	if (ans.size() != n + 1) {
		cout << "NO" << endl;
		return 0;
	}

	reverse(ans.begin(), ans.end());

	cout << "YES" << endl;

	for (int i = 0; i < ans.size(); i++) {
		if (!i) {
			cout << (char) (ans[i] / 300);
		}
		cout << (char) (ans[i] % 300);
	}

	return 0;
}
