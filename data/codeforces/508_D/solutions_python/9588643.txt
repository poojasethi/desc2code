def readlist(f): return map(f, raw_input().split())
def readint(): return int(raw_input())
def printlist(l): print ' '.join(map(str, l))

n = readint()

from collections import defaultdict

Gin = defaultdict(list)
Gout = defaultdict(list)
root = None
T = []
for i in range(n):
  w = raw_input()
  T.append(w)
  if root == None: root = (w[0], w[1])
  w = T[-1]
  Gout[w[0], w[1]].append(w[2])
  Gin[w[1], w[2]].append(w[0])

ok = defaultdict(lambda: False)
Q = [root]
ok[root] = True
chk1 = None
chk2 = None
while len(Q) > 0:
  a, b = Q.pop()
  outd = len(Gout[a, b])
  ind = len(Gin[a, b])
  if outd <> ind:
    if outd - ind == 1 and chk1 == None:
      chk1 = a, b
    elif ind - outd == 1 and chk2 == None:
      chk2 = a, b
    else:
      print 'NO'
      exit()
  for c in Gout[a, b]:
    if ok[b, c]: continue
    ok[b, c] = True
    Q.append((b, c))
  for c in Gin[a, b]:
    if ok[c, a]: continue
    ok[c, a] = True
    Q.append((c, a))
for w in T:
  if ok[w[0], w[1]] and ok[w[1], w[2]]: continue
  print 'NO'
  exit()

print 'YES'

if chk1 != None:
  node = chk1
else:
  node = T[0][0], T[0][1]
res = [node[0]]
path = []
S = []
while len(S) > 0 or len(Gout[node]) > 0:
  if len(Gout[node]) == 0:
    path.append(node)
    node = S.pop()
  else:
    S.append(node)
    c = Gout[node].pop()
    node = node[1], c
path.reverse()
for a, _ in path:
  res.append(a)
res.append(path[-1][1])
print ''.join(res)
