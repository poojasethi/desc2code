
#include <algorithm>
#include<iostream>
#include<vector>
using namespace std;
long long total,eff[200005];
vector<int>v[200005];
pair<long long, long long> dfs(int tar)
{
	
	long long res1 = 0,_min=10000000,res2=0;
	for (int i = 0; i < v[tar].size();i++)
	{
		pair<long long,long long>p=dfs(v[tar][i]);
		res1 += p.first;
		if (p.first-p.second<_min)
		{
			_min = p.first-p.second;
			
		}
	}
	if (v[tar].size() & 1)
	{res2 =max((long long)0,res1-_min);
		res1 = max(res1, res2 + eff[tar]);
		
	}
	else
	{
		res2 = res1;
		res1 += eff[tar];
		
	}
	
	return make_pair(res1, res2);
}
int main()
{
	cin >> total;
	int a, b;
	cin >> a >> b;
	eff[1] = b;
	for (int i = 2; i <= total;i++)
	{
		cin >> a >> b;
		v[a].push_back(i);
		eff[i] = b;
	}
	cout << dfs(1).first;
	return 0;
}