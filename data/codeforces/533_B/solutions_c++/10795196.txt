#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 200010;
std::vector<int> G[N];
LL dp[N][2], sum[N], root;
void dfs(int u) {
	int sz = G[u].size();
	dp[u][1] = dp[u][0] = 0;
	rep(i, sz) {
		int v = G[u][i];
		dfs(v);
		LL t0, t1;
		if(dp[u][1]) {
			t0 = std::max(dp[u][1] + dp[v][1], dp[u][0] + dp[v][0]);
			t1 = std::max(dp[u][0] + dp[v][1], dp[u][1] + dp[v][0]);
		} else {
			t0 = dp[u][0] + dp[v][0];
			t1 = dp[u][0] + dp[v][1];
		}
		dp[u][1] = t1;
		dp[u][0] = t0;
	}
	dp[u][1] = std::max(dp[u][1], dp[u][0] + sum[u]);
//	printf("%d: %I64d  %I64d\n", u, dp[u][0], dp[u][1]);
}
int main() {
	int n, u, v, p;
	scanf("%d", &n);
	rep(i, n) {
		scanf("%d%I64d", &p, sum + i);
		if(~p)
			G[p-1].push_back(i);
		if(p == -1)
			root = i;
	}
	dfs(root);
	printf("%I64d\n", dp[root][1]);
	return 0;
}

