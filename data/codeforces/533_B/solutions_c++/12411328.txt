#define N (1<<18)
#define LL long long
#define INFP (1ll<<60)
#include <bits/stdc++.h>

using namespace std;

LL dp[N][2];
int n,x,c[N];
vector<int> g[N];

int main()
{
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		cin>>x>>c[i];
		if(x!=-1) g[x].push_back(i);
	}
	for(int i=n;i>=1;i--)
	{
		int cnt=0; 
		LL mx=INFP,sum=0;
		for(int j=0;j<g[i].size();j++)
		{
			int v=g[i][j];
			if(dp[v][1]>dp[v][0])
				cnt++;
			
			sum+=max(dp[v][1],dp[v][0]);
			mx=min(mx,abs(dp[v][0]-dp[v][1]));
		}
		
		if(cnt&1)
			dp[i][0]=sum-mx,dp[i][1]=max(sum,sum-mx+c[i]);
		else
			dp[i][0]=sum,dp[i][1]=sum+c[i];

	}

	cout<<max(dp[1][0],dp[1][1])<<endl;
}