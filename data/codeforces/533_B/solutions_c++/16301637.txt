#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
using namespace std;
const int maxn = 2e5 + 10;
long long a[maxn], dp[maxn][2];
vector <int> Q[maxn];

void dfs(int u){
	int len = Q[u].size();
	dp[u][1] = -(1LL << 60);
	for(int i = 0; i < len; i++){
		int v = Q[u][i];
		dfs(v);
		long long tmp1 = max(dp[u][1] + dp[v][1], dp[u][0] + dp[v][0]);
		long long tmp2 = max(dp[u][0] + dp[v][1], dp[u][1] + dp[v][0]);
		dp[u][0] = tmp1;
		dp[u][1] = tmp2;
	}
	dp[u][1] = max(dp[u][1], dp[u][0] + a[u]);	//所有下属都只能是偶数，加上上司即为奇数 
}

int main(){
	int n, boss;
	scanf("%d", &n);
	for(int i = 1; i <= n; i++){
		int p;
		scanf("%d%I64d", &p, &a[i]);
		if(p != -1){
			Q[p].push_back(i);
		}
		else{
			boss = i;
		}
	}
	dfs(boss);
	printf("%I64d\n", dp[boss][1]);
}
							 	 	 			   				    					