import sys

factorials = [1]

def newton(n, k):
  global factorials
  return factorials[n] / (factorials[k] * factorials[n - k])

def solve(x):
  if len(x) == 1:
    return 1
  last = x.pop() - 1
  n = sum(x) + last
  k = last
  return (solve(x) * newton(n, k)) % 1000000007

def preprocess():
  for i in xrange(1, 1001):
    factorials.append(factorials[-1] * i)

if __name__ == '__main__':
  sys.setrecursionlimit(1010)
  k = int(raw_input())
  x = []
  preprocess()
  for i in xrange(k):
    x.append(int(raw_input()))
  print solve(x)
