#include <stdio.h>
#include <iostream>
#include <map>
#include <algorithm>
using namespace std;

string my, X, Y, cmd, wst;
int n;
map<string, int> mp;

struct tt{
    string nm;
    int pt;
}mps[222];

void add(const string &a, int pt){
    if (mp.count(a) == 0) mp[a] = pt; else mp[a]+=pt;
}

bool cmp(const tt &a, const tt &b){
    return (a.pt > b.pt || a.pt == b.pt && a.nm < b.nm);
}

int main(){
    cin>>my;
    cin>>n;
    mp.clear();
    while (n--){
        cin>>X;
        cin>>cmd;
        if (cmd[0]!='l') cin>>wst;
        cin>>Y;
        Y = Y.substr(0, Y.length()-2);
        cin>>wst;
        bool a = (X==my), b = (Y==my);
        if (!a && !b) add(X, 0), add(Y,0) ;else {
        int pt = 5;
        if (cmd[0] == 'c') pt+=5;
        if (cmd[0] == 'p') pt+=10;
        if (a) add(Y, pt); else add(X, pt);}
    }
    int cnt = 0;
    for (map<string, int>::iterator it = mp.begin(); it!=mp.end(); it++){
        mps[cnt].nm = it->first;
        mps[cnt].pt = it->second;
        cnt++;
    }
    sort(mps, mps+cnt, cmp);
    for (int i=0; i<cnt; i++){
        if (mps[i].nm != my) cout<<mps[i].nm<<endl;
    }
}
