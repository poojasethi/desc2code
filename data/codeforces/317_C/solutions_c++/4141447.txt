#include<iostream>
#include<sstream>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cassert>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf=(int)1e9;
const double EPS=1e-9, INF=1e12;

vector<pair<pi, int> > ans;
int n, m, v, a[300], b[300];
bool e[300][300], ok[300], used[300], finished[300];

void rec(int c, int num){
	//dbg(c); dbg(num);
	used[c] = 1;
	rep(i, n) if(e[c][i] && !finished[i] && !used[i]){
		rec(i, num);
		if(num > 0){
			int t = min(a[c], min(v - a[i], num));
			num -= t;
			a[c] -= t;
			a[i] += t;
			if(t) ans.pb(mp(mp(c+1, i+1), t));
		}
		if(num < 0){
			int t = min(v - a[c], min(a[i], -num));
			num += t;
			a[c] += t;
			a[i] -= t;
			if(t) ans.pb(mp(mp(i+1, c+1), t));
		}
		if(num == 0) return;
	}
}
void dfs(int c){
	ok[c] = 1;
	rep(i, n) if(e[c][i] && !ok[i]) dfs(i);
	
	memset(used, 0, sizeof(used));
	finished[c] = 1;
	rec(c, a[c] - b[c]);
}

int main(){
	cin >> n >> v >> m;
	rep(i, n) cin >> a[i];
	rep(i, n) cin >> b[i];
	rep(i, m){
		int a, b;
		cin >> a >> b;
		a--; b--;
		e[a][b] = e[b][a] = 1;
	}
	rep(i, n) if(!ok[i]) dfs(i);
	/*
	rep(i, n) cerr<<a[i]<<(i==n-1?"\n":" ");
	rep(i, n) cerr<<b[i]<<(i==n-1?"\n":" ");
	*/
	rep(i, n) if(a[i] != b[i]){
		cout << "NO" << endl;
		return 0;
	}
	cout << ans.size() << endl;
	rep(i, ans.size()) cout << ans[i].first.first << " " <<
		ans[i].first.second << " " << ans[i].second << endl;
	
	return 0;
}
