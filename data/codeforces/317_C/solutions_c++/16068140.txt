#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>

using namespace std;

const int MAXN=300+10;
const int MAXM=2*50000+100;

struct edge
{
	int next,to,w;
}
e[MAXM];
int p[MAXN],l;
void ins(int a,int b)
{
	e[l].next = p[a];
	e[l].to = b;
	p[a] = l;
	l++;
}

int ansnum,ansx[MAXN*MAXN*2],ansy[MAXN*MAXN*2],ansk[MAXN*MAXN*2];
void addans(int x,int y,int k)
{
	ansnum++;
	ansx[ansnum] = x;
	ansy[ansnum] = y;
	ansk[ansnum] = k;
}

int n,v,m;
long long a[MAXN],b[MAXN];
long long suma,sumb;
int vis[MAXN];
long long num[MAXN];

void flow(int x,int y,long long k)
{
	if(k < 0)
	{
		swap(x,y);
		k = -k;
	}
	k = min(k,a[x]);
	k = min(k,v-a[y]);
	a[x] -= k;
	a[y] += k;
	if(k == 0)
		return ;
	addans(x,y,k);
}

void dfs(int x)
{
	num[x] = 0;
	num[x] += b[x]-a[x];
	vis[x] = true;
	for(int i=p[x];i!=-1;i=e[i].next)
	{
		int b=e[i].to;
		if(vis[b] == false)
		{
			dfs(b);
			num[x] += num[b];
			flow(x,b,num[b]);
		}
	}
}

bool check()
{
	for(int i=1;i<=n;i++)
		if(a[i] != b[i])
			return false;
	return true;
}

int main()
{
	ios::sync_with_stdio(false);
	memset(p,-1,sizeof(p));
	cin>>n>>v>>m;
	for(int i=1;i<=n;i++)
		cin>>a[i];
	for(int i=1;i<=n;i++)
		cin>>b[i];
	for(int i=1;i<=m;i++)
	{
		int x,y;
		cin>>x>>y;
		ins(x,y);
		ins(y,x);	
	}
	for(int i=1;i<=n;i++)
	{
		suma += a[i];
		sumb += b[i];	
	}
	if(suma != sumb)
	{
		cout<<"NO"<<endl;
		return 0;
	}
	
	for(int i=1;i<=2*n;i++)
	{
		memset(vis,false,sizeof(vis));
		for(int i=1;i<=n;i++)
			if(!vis[i])
				dfs(i);
		if(check())
			break;
	}
	if(!check())
	{
		cout<<"NO"<<endl;
		return 0;
	}
	
	cout<<ansnum<<endl;
	for(int i=1;i<=ansnum;i++)
		cout<<ansx[i]<<' '<<ansy[i]<<' '<<ansk[i]<<endl;
	
	return 0;	
}
