#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;
const int N=305,M=50005;
int n,m,v;
struct node;
vector< pair<pair<node*,node*>,int> > ans;
struct edge{
	node *ed;
	edge *next;
} E[M<<1],*newE=E;
struct node{
	edge *son;
	node *belong;
	int a,b;
	node* get(){
		return belong?(belong=belong->get()):this;
	}
} V[N];
int tot;
node *q[N];
bool dfs(node *s,node *t){
	q[++tot]=s;
	if(s==t) return 1;
	for(edge *e=s->son;e;e=e->next) if(e->ed!=q[tot-1])
		if(dfs(e->ed,t)) return 1;
	tot--;
	return 0;
}
void flow(node *s,node *t,int c){
	tot=0;
	if(!dfs(s,t)) return;
	int last=tot;
	for(int i=tot-1;i;i--) if(q[i]->a>=c){
		for(int j=i;j<last;j++) ans.push_back(make_pair(make_pair(q[j],q[j+1]),c));
		last=i;
	}
	s->a-=c;
	t->a+=c;
}
int main(){
	scanf("%d%d%d",&n,&v,&m);
	for(int i=1;i<=n;i++) scanf("%d",&V[i].a);
	for(int i=1;i<=n;i++) scanf("%d",&V[i].b);
	for(int i=0;i<m;i++){
		int a,b; scanf("%d%d",&a,&b);
		node *x=V[a].get(),*y=V[b].get();
		if(x==y) continue;
		x->belong=y;
		*newE=(edge){V+b,V[a].son},V[a].son=newE++;
		*newE=(edge){V+a,V[b].son},V[b].son=newE++;
	}
	for(int i=1;i<=n;i++)
		for(int j=1;V[i].a>V[i].b&&j<=n;j++) if(V[j].a<V[j].b){
			int tmp=min(V[i].a-V[i].b,V[j].b-V[j].a);
			if(tmp>(v+1)/2){
				flow(V+i,V+j,(v+1)/2);
				flow(V+i,V+j,tmp-(v+1)/2);
			}
			else
				flow(V+i,V+j,tmp);
		}
	bool ok=1;
	for(int i=1;i<=n;i++) ok&=V[i].a==V[i].b;
	if(!ok) return puts("NO"),0;
	printf("%d\n",ans.size());
	for(int i=0;i<ans.size();i++)
		printf("%d %d %d\n",ans[i].first.first-V,ans[i].first.second-V,ans[i].second);
}
