#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

typedef long long LL;

#define LLF "%I64d"

const int MAX_N = 100000;

int n, m, K, p;
int H[MAX_N + 10], R[MAX_N + 10];
LL F[MAX_N + 10];
pair<LL, int> heap[MAX_N + 10];
int cnt[MAX_N + 10];

inline bool cmp(const pair<LL, int>& a, const pair<LL, int>& b){
	return a.first > b.first;
}

bool check(LL lim){
	memset(cnt, 0, sizeof(cnt));
	for(int i = 1; i <= n; i ++)
		heap[i] = make_pair(lim / R[i] + 1, i);
	make_heap(heap + 1, heap + n + 1, cmp);
	int remcnt = 0;
	for(int i = 1; i <= m; i ++){
		for(int j = 1; j <= K; j ++){
			if(heap[1].first <= i)
				return false;
			if(heap[1].first <= m){
				pop_heap(heap + 1, heap + n + 1, cmp);
				++ cnt[heap[n].second];
				heap[n].first = ((LL)p * cnt[heap[n].second] + lim) / R[heap[n].second] + 1;
				push_heap(heap + 1, heap + n + 1, cmp);
			} else
				++ remcnt;
		}
	}
	for(int i = 1; i <= n; i ++){
		LL cval = (LL)p * cnt[i] + lim - (LL)R[i] * m;
		while(cval < H[i]){
			if(remcnt == 0)
				return false;
			cval += p;
			-- remcnt;
		}
	}
	return true;
}

int main(){
#ifdef LOCAL
	freopen("test.in", "r", stdin);
	freopen("test.out", "w", stdout);
#endif
	scanf("%d%d%d%d", &n, &m, &K, &p);
	LL l = 1, r = 0;
	for(int i = 1; i <= n; i ++){
		scanf("%d%d", H + i, R + i);
		F[i] = H[i] + (LL)R[i] * m;
		if(F[i] > r)
			r = F[i];
	}
	while(l < r){
		LL mid = (l + r) >> 1;
		if(check(mid))
			r = mid;
		else
			l = mid + 1;
	}
	if(!check(l))
		++ l;
//	printf("%d\n", check(14));
	printf(LLF "\n", l);

	return 0;
}


