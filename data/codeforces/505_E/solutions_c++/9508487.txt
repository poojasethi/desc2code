#include <cstdio>
#include <cstring>
#include <algorithm>
template <typename T> inline void relax(T &a, T b){if (a<b) a=b;}
inline unsigned int getuint(){
    char w=getchar();
    while (w<'0'||'9'<w) w=getchar();
    unsigned int ans=0;
    for (;'0'<=w&&w<='9';w=getchar()) ans=ans*10+w-'0';
    return ans;
}
int n, m, k;
unsigned int p;
const int MAXN=100005;
unsigned long long a[MAXN], d[MAXN], now[MAXN];
int cnt[MAXN];
typedef std::pair<unsigned long long, int> pii;
inline bool cmp(const pii &i, const pii &j){return i.first>j.first;}
pii heap[MAXN];
bool check(unsigned long long tar){
    memset(cnt+1, 0, n*sizeof(int));
    for (int i=1;i<=n;i++) heap[i]=std::make_pair((now[i]=tar)/d[i]+1, i);
    std::make_heap(heap+1, heap+n+1, cmp);
    int rest=0;
    for (int i=1;i<=m;i++) for (int j=1;j<=k;j++){
        if (heap[1].first<=i) return false;
        if (heap[1].first<=m){
            std::pop_heap(heap+1, heap+n+1, cmp);
            int num=heap[n].second;
            cnt[num]++, heap[n].first=(now[num]+=p)/d[num]+1;
            std::push_heap(heap+1, heap+n+1, cmp);
        } else rest++;
    }
    for (int i=1;rest>=0&&i<=n;i++) for (;now[i]<a[i];rest--) now[i]+=p;
    return rest>=0;
}
int main(){
    //freopen("ex.in", "r", stdin);
    n=getuint(), m=getuint(), k=getuint(), p=getuint();
    unsigned long long l=0, r=0;
    for (int i=1;i<=n;i++) a[i]=getuint(), d[i]=getuint(), relax(r, a[i]+=d[i]*m);
    while (r-l>1){
        unsigned long long mid=(l+r)>>1;
        //printf("%llu %llu %llu\n", l, mid, r);
        if (check(mid)) r=mid; else l=mid;
    }
    printf("%I64u\n", r);
    return 0;
}