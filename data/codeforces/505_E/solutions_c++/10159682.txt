#include <iostream>
#include <string>
#include <string.h>
#include <cstdio>
#include <math.h>

#define LL long long 
using namespace std;
const int maxn = 1e5+5;

int n,m,p,k;
LL h[maxn] , a[maxn] , all[maxn];

LL need[maxn] , t[maxn];
int cnt[maxn];
bool check(LL level){
	for(int i=1;i<=n;i++){
		need[i] = max( (LL)0,all[i]-level);
		t[i] = need[i]/p;
		if ( t[i]*p<need[i] ) t[i]++;
	}
	LL tot = 0;
	for(int i=1;i<=n;i++)
		tot += t[i];
	if ( tot>(LL)k*m ) return false;

	memset(cnt,0,sizeof(cnt));
	for(int i=1;i<=n;i++){
		for(int j=(int)t[i];j>=1;j--){
			if ( need[i]<h[i] ){
				cnt[1]++; need[i] -= p;
				continue;
			}
			LL now = (need[i]-h[i])/a[i];
			if ( a[i]*now==need[i]-h[i] ) now--;
			now++;
			cnt[(int)now+1]++;
			need[i] -= p; 
		}
	}

	for(int i=1;i<=m;i++)
		if ( cnt[i]>k ) cnt[i+1] += cnt[i]-k;

	if ( cnt[m+1]>0 ) return false;
	else return true;
}

int main(){

	while ( scanf("%d%d%d%d",&n,&m,&k,&p)!=EOF ){
		for(int i=1;i<=n;i++){
			scanf("%I64d%I64d",&h[i],&a[i]);
			all[i] = h[i]+a[i]*m;
		}

		LL l = 0 , r = -1 , mid;
		for(int i=1;i<=n;i++)
			r = max(r,all[i]);			
		while ( l<r-1 ){
			mid = (l+r)>>1;
			if ( check(mid) ) r = mid;
			else l = mid;
		}
		if ( check(l) ) mid = l;
		else mid = r;
		printf("%I64d\n" , mid);
	}


	return 0;
}