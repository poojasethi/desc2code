#include <iostream>
#include <cstdio>
#include <queue>
#include <vector>
using namespace std;
typedef pair<int,int> pa;
const int maxn = 100005;
int64_t a[maxn],h[maxn],nowh[maxn];
int64_t n,m,k,p;
bool check(int64_t lastMaxH)
{
    for(int i = 0; i<n; i++)
        nowh[i] = lastMaxH;
    priority_queue<pa,vector<pa>,greater<pa> > s;
    for(int i = 0; i<n; i++)
    {
        if(nowh[i] - m*a[i] >=0) continue;
        s.push(make_pair(nowh[i]/a[i]-1,i));
    }
    int total = 0;
    for(; total<=m*k; total++)
    {
        if(s.empty()) break;
        pa now = s.top();
        s.pop();
        if(now.first < total/k) return false;
        nowh[now.second] +=p;
        if(nowh[now.second] - m*a[now.second] >=0) continue;
        s.push(make_pair(nowh[now.second]/a[now.second]-1,now.second));
    }
    if(total > m*k) return false;
    for(int i =0; i<n; i++)
    {
        if(nowh[i]-m*a[i]>=h[i]) continue;
        total+=((h[i]-nowh[i]+m*a[i])+p-1)/p;
        if(total>m*k) return false;
    }
    return true;
}
int main()
{
    scanf("%I64d%I64d%I64d%I64d",&n,&m,&k,&p);
    for(int i =0; i <n; i++)
    {
        scanf("%I64d%I64d",&h[i],&a[i]);
    }
    int64_t ans = -1,low = 0,high = 1e13,mid;
    while(low <= high)
    {
        mid =(low+high)/2;
        if(check(mid))
        {
            ans = mid;
            high = mid - 1;
        }
        else
            low = mid+1;
    }
    cout << ans  << endl;
    return 0;
}

   		    	 		  	   	  				 	