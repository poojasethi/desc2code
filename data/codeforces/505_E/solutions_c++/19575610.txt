#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<queue>
#include<stack>
#include<map>
#include<bitset>
#include<vector>
#define maxn 100005
using namespace std;
typedef long long LL;
LL n,m,k,p;
LL h[maxn],a[maxn];
LL h2[maxn];
struct node{
	int ti,id;
	bool operator > (const node& x) const
	{
		return ti>x.ti; 
	}
};
bool can(LL x)
{
	fill_n(h2,n+1,x);
	priority_queue<node, vector<node>, greater<node> > q;
	for(int i=1;i<=n;i++)
	{
		if(h2[i]-m*a[i]>=0)
		continue;
		q.push((node){h2[i]/a[i]-1,i});
	}
	int ci;
	for(ci=0;ci<m*k;ci++)
	{
		if(q.empty())
		break;
		node now=q.top();
		q.pop();
		if(now.ti<ci/k)
		return false;
		h2[now.id]+=p;
		if(h2[now.id]-m*a[now.id]>=0)
		continue;
		q.push((node){h2[now.id]/a[now.id]-1,now.id});
	}
	for(int i=1;i<=n;i++)
	{
		if(h2[i]-m*a[i]>=h[i])
		continue;
		ci+=(h[i]-(h2[i]-m*a[i])+p-1)/p;
		if(ci>m*k)
		return false;
	}
	return true; 
}
int main()
{
	cin>>n>>m>>k>>p;
	for(int i=1;i<=n;i++)
	cin>>h[i]>>a[i];
	LL l=0,r=1LL<<50;
	while(r-l>1)
	{
		LL mid=(l+r)/2;
		if(can(mid))
		r=mid;
		else
		l=mid;
	}
	cout<<r<<endl;
	return 0;
}
		 				 	   	      	       	