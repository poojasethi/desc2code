#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 1e5+20;
const int M = 5e3+40;
long long a[N],h[N];
int n,m,k,p,s[M];

bool judge(long long H)
{
    long long res = 0;
    for(int i=1;i<=n;i++){
        long long tmp = a[i]+h[i]*m;
        long long t = tmp>H?(tmp-H)/p+((tmp-H)%p!=0):0;
        res += t;
    }
    if(res>1LL*m*k)return false;
    memset(s,0,sizeof(s));
    for(int i=1;i<=n;i++){
        if(h[i] == 0){
            if(a[i]>H)return false;
            else continue;
        }
        long long tmp = a[i]+h[i]*m;
        long long t = tmp>H?(tmp-H)/p+((tmp-H)%p!=0):0;
        if(t>0){
            long long sum = H;
            for(int j=1;j<=t;j++){
                int pos = m-min((sum/h[i]),1LL*m)+1;
                s[pos]++;
                sum += p;
            }
        }
    }
    for(int i=1;i<m;i++){
        if(s[i]>k)s[i+1] += s[i]-k;
    }
    return s[m]<=k;
}
long long l,r;
void sovle()
{
    while(l<=r){
        long long mid = (l+r)/2;
        if(judge(mid)) r = mid-1;
        else l = mid+1;
    }
    printf("%I64d\n",l);
}
int main()
{
    while(scanf("%d%d%d%d",&n,&m,&k,&p)!=EOF){
        l = 0,r=0;
        for(int i=1;i<=n;i++){
           scanf("%I64d%I64d",&a[i],&h[i]);
           r = max(a[i]+h[i]*m,r);
           l = max(h[i],l);
        }
        sovle();
    }
    return 0;
}
