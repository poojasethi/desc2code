#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back

inline int max(int a,int b){return a<b?b:a;}
inline int min(int a,int b){return a>b?b:a;}
inline ll max(ll a,ll b){return a<b?b:a;}
inline ll min(ll a,ll b){return a>b?b:a;}
const int mod = 1e9+7;
const int N = 1e6+10;
const ll INF = 1e18;
//#define DEBUG

#ifdef DEBUG
#define dprintf(fmt,...) fprintf(stderr,fmt,__VA_ARGS__)
#else
#define dprintf(fmt,...)
#endif

pii G[N][2];
char s[10];
int u[N];
void ex(){
  printf("IMPOSSIBLE\n"); exit(0);
}
vector<int> ans;
int dfs(int v,int m){
  u[v]=1;
  if(m<v) ex();
  int nx=v+1;
  if(G[v][0].X!=mod){
    if(u[v+1]) ex();
    nx=dfs(v+1,G[v][0].Y);
  }
  //printf("%d\n",v);
  ans.pb(v);
  if(G[v][1].X!=mod){
    if(G[v][1].X<nx) ex();
    nx=dfs(nx,max(m,G[v][1].Y));
  }else{
    if(m>=nx){
      nx=dfs(nx,m);
    }
  }
  return nx;
}
int main(){
  int n,m; scanf("%d%d",&n,&m);
  REP(i,n) G[i][0]=mp(mod,-1),G[i][1]=mp(mod,-1);
  REP(i,m){
    int x,y; scanf("%d%d%s",&x,&y,s);
    x--;y--;
    if(y<=x) {
      printf("IMPOSSIBLE\n"); exit(0);
    }
    if(s[0]=='L') G[x][0].X=min(G[x][0].X,y),G[x][0].Y=max(G[x][0].Y,y);
    else G[x][1].X=min(G[x][1].X,y),G[x][1].Y=max(G[x][1].Y,y);
  }
  dfs(0,n-1);
  assert(ans.size()==n);
  REP(i,n) printf("%d ",ans[i]+1);
  printf("\n");
  return 0;
}
