#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 1000010;
const int MAXC = 100010;

vector<int> v;
int a[MAXC], b[MAXC];
string type[MAXC];
int fin[MAXN], pl[MAXN];
int seg[4 * MAXN];
bool has_left[MAXN];


void print(int s, int e)
{
	if (e - s == 0)
		return;
	if (e - s == 1)
	{
		pl[s] = v.size();
		v.push_back(s);
		return;
	}
	if (has_left[s])
	{
		print(s + 1, fin[s + 1]);
		pl[s] = v.size();
		v.push_back(s);
		print(fin[s + 1], e);
	}
	else
	{
		pl[s] = v.size();
		v.push_back(s);
		print(s + 1, e);
	}
}

int getMax(int v, int f, int e, int l, int r)
{
	if (f >= r || l >= e)
		return -1;
	if (f >= l && e <= r)
		return seg[v];
	int mid = (f + e) / 2;
	return max(getMax(2 * v, f, mid, l, r), getMax(2 * v + 1, mid, e, l, r));
}

void setMax(int v, int f, int e, int x, int val)
{
	if (e - f == 1)
	{
		seg[v] = val;
		return;
	}
	int mid = (f + e) / 2;
	if (x < mid)
		setMax(2 * v, f, mid, x, val);
	else
		setMax(2 * v + 1, mid, e, x, val);
	seg[v] = max(seg[2 * v], seg[2 * v + 1]);
}


int main()
{
	int n, c;
	cin >> n >> c;
	for (int i = 0; i < n; i++)
		fin[i] = i + 1;
	for (int i = 0; i < c; i++)
	{
		cin >> a[i] >> b[i] >> type[i];
		a[i]--, b[i]--;
		if (a[i] >= b[i])
		{
			cout << "IMPOSSIBLE" << endl;
			return 0;
		}
		if (type[i] == "RIGHT")
			fin[a[i]] = max(fin[a[i]], b[i] + 1);
		else
		{
			has_left[a[i]] = true;
			fin[a[i]] = max(fin[a[i]], b[i] + 1);
			fin[a[i] + 1] = max(fin[a[i] + 1], b[i] + 1);
		}
	}
	for (int i = n - 1; i >= 0; i--)
	{
		fin[i] = max(fin[i], getMax(1, 0, n, i + 1, fin[i]));
		setMax(1, 0, n, i, fin[i]);
	}
	print (0, n);
	for (int i = 0; i < c; i++)
		if ((type[i] == "RIGHT" && pl[a[i]] > pl[b[i]]) || (type[i] == "LEFT" && pl[a[i]] < pl[b[i]]))
		{
			cout << "IMPOSSIBLE" << endl;
			return 0;
		}
	for (int i = 0; i < n; i++)
		cout << v[i] + 1 << " ";
	cout << endl;

}
