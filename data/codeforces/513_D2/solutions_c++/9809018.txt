#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <queue>
#include <set>
#include <map>
#define REP(I,A,B) for(int I=A,END=B;I<=END;I++)
#define REPD(I,A,B) for(int I=A,END=B;I>=END;I--)
#define RI(X) scanf("%d",&X)
#define RS(X) scanf("%s",&X)
#define GCH getchar()
#define PCH(X) putchar(X)
#define MAX(A,B) (((A)>(B))?(A):(B))
#define MIN(A,B) (((A)<(B))?(A):(B))
#define MS(X,Y) memset(X,Y,sizeof(X))
#define MC(X,Y,var,len) memcpy((X),(Y),sizeof(var)*(len))
#define debug(...) fprintf(stderr,__VA_ARGS__)
#define MAXN 1000100
using namespace std;
int c,flag,e,n,q;
int l[MAXN],r[MAXN],t[MAXN],v[MAXN];
//  ����             ����  ����λ 
void open()
{
  freopen("D.in","r",stdin);
  freopen("D.out","w",stdout);
}
void close()
{
  fclose(stdin);
  fclose(stdout);
}
void dfs(int i,int g,int h)
{
  e++;
  g=max(g,t[i]);
  if (r[i]<=l[i] || g>=h) 
  {
    flag=1;
    return ;
  }
  if (l[i]!=-1)
  {
    dfs(i+1,l[i],min(r[i],h));
  }
  v[c++]=i;
  if (e<=g)
    dfs(e,g,h);
}
void work()
{
  RI(n);
  RI(q);
  REP(i,0,n-1)
    l[i]=-1,r[i]=n,t[i]=-1;
  char str[10];
  int i,j;
  REP(hhh,1,q)
  {
    scanf("%d%d%s",&i,&j,str);
    i--;
    j--;
    if (i>=j)
    {
	  printf("IMPOSSIBLE\n");
	  close();
	  exit(0);
	}
	if (str[0]=='L') l[i]=max(l[i],j);//����ֻ��������������һ����˭��
	else 
	  r[i]=min(r[i],j),t[i]=max(t[i],j);//����ֻ������С��һ����˭	   
  }
  dfs(0,n-1,n);
  if (flag)
  {
    printf("IMPOSSIBLE\n");
    close();
    exit(0);
  }
  else 
    REP(i,0,n-1)
      printf("%d ",v[i]+1);
}
int main()
{
  //open();
  work();
  close();
  return 0;
}

