#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <complex>
#include <locale>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <bitset>
using namespace std;
int n, m, mxLef[1000009], mnRig[1000009], mxRig[1000009];
vector<int> vAns;

int Dfs(int x, int y)
{
    int tmp = x;
    if(x + 1 <= mxLef[x])
    {
        tmp = Dfs(x + 1, mxLef[x]);
    }
    if(tmp >= mnRig[x])
    {
        return n + 1;
    }
    vAns.push_back(x);
    if(tmp >= max(y, mxRig[x]))
    {
        return tmp;
    }
    return Dfs(tmp + 1, max(y, mxRig[x]));
}

int main()
{
    //ifstream cin("d.inp");
    //ofstream cout("d.out");
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cin >> n >> m;
    for(int i = 1; i <= n; i++)
    {
        mxLef[i] = i;
        mnRig[i] = n + 1;
        mxRig[i] = i;
    }
    for(int i = 1; i <= m; i++)
    {
        int x, y;
        string s;
        cin >> x >> y >> s;
        if(x >= y)
        {
            cout << "IMPOSSIBLE\n";
            return 0;
        }
        if(s == "LEFT")
        {
            mxLef[x] = max(mxLef[x], y);
        }
        else
        {
            mnRig[x] = min(mnRig[x], y);
            mxRig[x] = max(mxRig[x], y);
        }
    }
    if(Dfs(1, n) > n)
    {
        cout << "IMPOSSIBLE\n";
    }
    else
    {
        for(int i = 0; i < vAns.size(); i++)
        {
            cout << vAns[i] << " ";
        }
        cout << "\n";
    }
    return 0;
}
