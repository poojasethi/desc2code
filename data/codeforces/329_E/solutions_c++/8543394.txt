#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

typedef long long ll;

const int N = 100005;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define Me(x , y) memset(x , y , sizeof(x))

struct _two{
	int a , b;
}a[N];

int x[N] , y[N];
int n;

void Init(){
	scanf("%d" , &n);
	fo (i , 1 , n){
		scanf("%d%d" , x + i , y + i);
		a[i] = (_two){x[i] , y[i]};
	}
	sort(x + 1 , x + n + 1);
	sort(y + 1 , y + n + 1);
}

bool check(int lx , int rx , int ly , int ry){
	int A = 0 , B = 0 , C = 0 , D = 0;
	fo (i , 1 , n){
		if (a[i].a < lx && a[i].b < ly) A++;
		if (a[i].a > rx && a[i].b > ry) C++;
		if (a[i].a < lx && a[i].b > ry) B++;
		if (a[i].a > rx && a[i].b < ly) D++;
	}
	return A + C && B + D;
}

void Work(){
	ll ans = 0; bool tf = 0;
	if (n & 1){
		bool flag = 0;
		fo (i , 1 , n)
			if (a[i].a == x[n + 1 >> 1] && a[i].b == y[n + 1 >> 1]){
				flag = 1; break;
			}
		fo (i , 1 , n){
			if (i + i < n)
				ans -= x[i] + y[i];
			if (i + i > n + 1)
				ans += x[i] + y[i];
		}
		if (flag && check(x[n + 1 >> 1] , x[n + 1 >> 1] , y[n + 1 >> 1] , y[n + 1 >> 1]))
			ans -= min(min(x[n + 1 >> 1] - x[n >> 1] , y[n + 1 >> 1] - y[n >> 1]) , min(x[n + 3 >> 1] - x[n + 1 >> 1] , y[n + 3 >> 1] - y[n + 1 >> 1]));
	}
	else{
		fo (i , 1 , n)
			if (i <= n >> 1)
				ans -= x[i] + y[i];
			else
				ans += x[i] + y[i];
		if (check(x[n >> 1] + 1 , x[(n >> 1) + 1] - 1 , y[n >> 1] + 1 , y[(n >> 1) + 1] - 1))
			ans -= min(x[(n >> 1) + 1] - x[n >> 1] , y[(n >> 1) + 1] - y[n >> 1]);
	}
	printf("%I64d\n" , ans << 1);
}

int main(){
	Init();
	Work();
	return 0;
}
