#include <bits/stdc++.h>

#define st first
#define nd second
#define mp make_pair
#define lli long long int
#define FP( ii,aa,bb ) for( lli ii=aa;ii<=bb;ii++ )
#define FM( ii,aa,bb ) for( lli ii=aa;ii>=bb;ii-- )

using namespace std;

pair<pair<lli,lli>,lli> tarr[200000],arr[200000];

map<lli,lli> yer;
lli n,T,ind,val,result[200000],a[200000];

lli solve(){
	priority_queue< pair<lli,lli> > Q;
	if( Q.size() ) cout << "FASDFA" << endl;
	FP( i,1,n ) tarr[i] = arr[i];
	sort( tarr+1,tarr+n+1 );
	lli lasttime=tarr[1].st.st;
	pair<lli,lli> t;
	Q.push( mp(tarr[1].nd,tarr[1].st.nd) );
	lli retval;
	FP( i,2,n ){
		while( lasttime<tarr[i].st.st and Q.size() ){
			t = Q.top();
			Q.pop();
			if( lasttime+t.nd>tarr[i].st.st ){
				Q.push( mp( t.st,t.nd-(tarr[i].st.st-lasttime ) ) );
				break;
			}
			else{
				result[yer[t.st]] = lasttime+t.nd;
				if( t.st==val ) retval = lasttime+t.nd;
				lasttime += t.nd;
			}
		}
		Q.push( mp( tarr[i].nd,tarr[i].st.nd ) );
		lasttime = tarr[i].st.st;
	}
	while( Q.size() ){
		t = Q.top();
		Q.pop();
		lasttime += t.nd;
		if( t.st==val ) retval = lasttime;
		result[yer[t.st]] = lasttime;
	}
	return retval;
}

lli duzenle( lli x ){
	sort( a+1,a+n+1 );
	FP( i,1,n )
		if( x==a[i] ) x++;
	if( x<1000000001 ) return x;
	FM( i,n,1 )
		if( x==a[i] ) x--;
	return x;
}

int main(){

	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);

	cin >> n;
	FP( i,1,n ){
		cin >> arr[i].st.st >> arr[i].st.nd >> arr[i].nd;
		yer[arr[i].nd] = i;
		if( arr[i].nd==-1 ) ind = i;
		a[i] = arr[i].nd;
	}
	cin >> T;

	lli bas,son,orta;
	bas = 1;
	son = 1000000000;

	while( bas<son ){
		orta = (bas+son)/2;
		val = arr[ind].nd = duzenle( orta );
		yer[ duzenle( orta ) ] = ind;
		if( solve()==T ){ bas=orta; break; }
		if( solve() >T )  bas = (bas+son)/2+1;
		else			  son = (bas+son)/2;
	}

	cout << duzenle(bas) << endl;
	FP( i,1,n ) cout << result[i] << " ";
	cout << endl;

}
