#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <queue>
#include <iostream>
#include <algorithm>

using namespace std;

struct file{
    long long i,t,s,p;
    bool operator < (const file& x) const{
        return p < x.p;
    }
}a[50005];

bool cmp(const file& x, const file& y) {
    return x.t < y.t;
}
int n,x;
long long T, ans[50005];
long long gao(int prior){
    long long nowTime = a[0].t;
    priority_queue<file> q;
    memset(ans, 0, sizeof(ans));
    a[x].p = prior;
    q.push(a[0]);
    for(int i = 1;i < n; ++i){
        long long nxtTime = a[i].t;
        while(!q.empty() && nxtTime - nowTime > 0){
            file now = q.top(); q.pop();
            if(now.s > nxtTime - nowTime){
                now.s -= nxtTime - nowTime;
                nowTime = nxtTime;
                q.push(now);
            }else{
                nowTime += now.s;
                ans[now.i] = nowTime;
            }
        }
        nowTime = nxtTime;
        q.push(a[i]);
    }
    while(!q.empty()){
        file now = q.top(); q.pop();
        ans[now.i] = (nowTime += now.s);
    }
    return ans[a[x].i];
}
int main(int argc, char** argv) {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cin >> n;
    for(int i = 0;i < n; ++i){
        long long t, s, p; cin >> t >> s >> p;
        a[i].i = i, a[i].p = p, a[i].s = s, a[i].t = t;
    }
    cin >> T;
    sort(a, a + n, cmp);
    for(int i = 0;i < n; ++i) if(a[i].p == -1){ x = i; break; }
    int low = 1, high = 1000000001, mid;
    while(low < high){
        mid = (low + high) >> 1;
        long long ToT = gao(mid);
        if(ToT == T){ cout << mid << endl; break; }
        if(ToT < T) high = mid;
        else low = mid + 1;
    }
    for (int i = 0;i < n - 1; ++i) cout << ans[i] << " ";
    cout << ans[n - 1] << endl;
    return 0;
}

