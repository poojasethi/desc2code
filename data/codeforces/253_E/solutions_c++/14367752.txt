#include<cstdio>
#include<algorithm>
#include<queue>
#define N 300010
using namespace std;
typedef long long ll;
typedef pair<int,int> P;
priority_queue<P>Q;
struct Node{int t,s,p,id;}a[N];
inline bool cmp(Node a,Node b){return a.t<b.t;}
int n,i,j,b[N],pool[N],l=1,r,mid,pos,tmp,remain,s[N];
ll T,fin[N],ans[N],now,nxt;
inline void read(int&a){
  char c;bool f=0;a=0;
  while(!((((c=getchar())>='0')&&(c<='9'))||(c=='-')));
  if(c!='-')a=c-'0';else f=1;
  while(((c=getchar())>='0')&&(c<='9'))(a*=10)+=c-'0';
  if(f)a=-a;
}
int main(){
  freopen("input.txt","r",stdin);
  freopen("output.txt","w",stdout);
  read(n);
  for(i=1;i<=n;i++){
    read(a[i].t),read(a[i].s),read(a[i].p),a[i].id=i;
    if(~a[i].p)b[++remain]=a[i].p;
  }
  scanf("%I64d",&T);
  sort(a+1,a+n+1,cmp);
  sort(b+1,b+n);
  if(b[1]>1)pool[++r]=1;
  for(i=2;i<n;i++)if(b[i-1]+1!=b[i])pool[++r]=b[i]-1;
  if(b[n-1]<1000000000)pool[++r]=1000000000;
  for(i=1;i<=n;i++)if(a[i].p==-1){pos=i;break;}
  while(1){
    a[pos].p=pool[mid=(l+r)>>1];
    for(i=1;i<=n;i++)s[i]=a[i].s;
    for(now=a[j=1].t,remain=n;remain;now=nxt){
      while(j<=n&&now==(ll)a[j].t)Q.push(P(a[j].p,j)),j++;
      if(Q.empty())nxt=a[j].t;
      else{
        tmp=Q.top().second;Q.pop();
        nxt=now+s[tmp];
        if(j<=n)if(nxt>(ll)a[j].t)nxt=a[j].t;
        s[tmp]-=nxt-now;
        if(s[tmp])Q.push(P(a[tmp].p,tmp));else fin[tmp]=nxt,remain--;
      }
    }
    if(fin[pos]==T)break;
    if(fin[pos]<T)r=mid-1;else l=mid+1;
  }
  printf("%d\n",pool[mid]);
  for(i=1;i<=n;i++)ans[a[i].id]=fin[i];
  for(i=1;i<=n;i++)printf("%I64d ",ans[i]);
  return 0;
}