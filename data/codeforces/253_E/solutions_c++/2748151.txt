#include <cstdio>
#include <cstring>
#include <queue>
#include <iostream>
#include <algorithm>
using namespace std;

struct node{
    long long t,s,p;
    int i;
    bool operator < (const node tt) const{
        if(p != tt.p) return p < tt.p;
        else return t > tt.t;
    }
}a[50010];

int cmp(node a,node b){
    return a.t < b.t;
}

priority_queue<node>Q;
int n,tmp;
long long T;
long long res[50010];

long long solve(int m){
    while(!Q.empty()) Q.pop();
    memset(res,0,sizeof(res));
    a[tmp].p = m;
    long long st = 0;
    Q.push(a[1]);
    for(int i = 2; i <= n; i++){
        st = a[i-1].t;
        long long tmp1 = a[i].t-a[i-1].t;
        while(!Q.empty()&&tmp1){
            node ttt = Q.top();
            Q.pop();
            long long cnt = min(tmp1,ttt.s);
            st += cnt;
            ttt.s -= cnt;
            tmp1 -= cnt;
            if(ttt.s == 0) res[ttt.i] = st;
            else Q.push(ttt);
        }
        st = a[i].t;
        Q.push(a[i]);
    }
    while(!Q.empty()){
        st += Q.top().s;
        res[Q.top().i] = st;
        Q.pop();
    }
    return res[a[tmp].i];
}

int main(){

    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

    cin>>n;
    for(int i = 1; i <= n; i++){
        cin>>a[i].t>>a[i].s>>a[i].p;
        a[i].i = i;
    }
    cin>>T;
    sort(a+1,a+n+1,cmp);
    for(int i = 1; i <= n; i++)
        if(a[i].p == -1) tmp = i;
    int l = 1,r = 1e9;
    while(l < r){
        int m = (l+r)>>1;
        long long dd = solve(m);
        if(dd == T) {
            cout<<m<<endl;
            break;
        }
        if(dd < T) r = m;
        else l = m+1;
    }

    for(int i = 1; i <= n; i++)
        cout<<res[i]<<" ";
    cout<<endl;
    return 0;
}
