#include <cstdio>
#include <iostream>
#include <cstring>
#include <cctype>
#include <cmath>
#include <stack>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
using namespace std;
#define INF 0x3f3f3f3f
#define REP(i,n) for(int64 i=0; i<(int64)n; i++)
typedef long long int64;
typedef pair<int64,int64> pii;
#define MAXN 100100

struct task {
	int64 t;
	int64 s,p,id;
} v[MAXN];

bool cmpt(task a, task b) {
	return a.t<b.t;
}

int64 n;
int64 res[MAXN], rs[MAXN];

int64 run(int64 xid, int64 px) {
	v[xid].p=px;
	v[n].t=INF*1LL*INF;

	if (px==4)
		n=3;

	priority_queue<pii> pq;
	int64 ut=0;
	REP(i,n+1) {
		while (!pq.empty() && ut<v[i].t) {
			pii hp=pq.top();
			int64 inc=min(v[i].t-ut, rs[hp.second]);
			rs[hp.second]-=inc;
			ut+=inc;
			if (!rs[hp.second]) {
				res[v[hp.second].id]=ut;
				pq.pop();
			}
		}
		ut=v[i].t;
		rs[i]=v[i].s;
		pq.push(pii(v[i].p,i));
	}

	return res[v[xid].id];
}

int main() {
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	
	while (scanf("%lld",&n)==1) {
		vector<int64> dps;
		REP(i,n) {
			scanf("%lld%lld%lld",&v[i].t,&v[i].s,&v[i].p);
			if (v[i].p > 0) dps.push_back(v[i].p);
			v[i].id=i;
		}
		dps.push_back(1);
		dps.push_back(INF);
		sort(dps.begin(),dps.end());

		vector<int64> cps;
		REP(i,dps.size()-1)
			if (dps[i]!=dps[i+1] && dps[i]+1!=dps[i+1])
				cps.push_back(dps[i]+1);

		sort(v,v+n,cmpt);

		int64 xid;
		REP(i,n)
			if (v[i].p==-1) xid=i;

		int64 tx;
		scanf("%lld",&tx);
		int64 es=0, di=cps.size()-1;
		while (di>es) {
			int64 me=(es+di)/2;

			if (run(xid,cps[me]) <= tx) di=me;
			else es=me+1;
		}
		run(xid,cps[es]);
		printf("%lld\n",cps[es]);

		REP(i,n) printf("%lld ",res[i]);
		printf("\n");
	}
	return 0;
}
