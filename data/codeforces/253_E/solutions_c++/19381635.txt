#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <queue>
#include <algorithm>
#define ff first
#define ss second
#define mp make_pair
using namespace std;

typedef int long long ll;
typedef pair<ll,int> pii;
const int MAX=50005;

int n;
int x;
ll limit;
ll ans[MAX];
priority_queue<pii> Q,Q1;

struct task
{
	int order;
	ll t,s,p;
}t[MAX];

inline bool cmp(task a,task b)
{
	return a.t<b.t;
}

void Add(int cur)
{
	for(int i=cur;i<=n;i++)
		if(t[i].t<=limit)
			Q1.push(mp(t[i].p,i));
	
	ll rest=limit-t[x].t+1-t[x].s;
	if(rest==1)
	{
		t[x].p=1000000000;
		return;
	}
	
	int idx;	
	while(!Q1.empty())
	{
		pii next=Q1.top();
		Q1.pop();
		
		idx=next.second;
		rest=rest-t[idx].s;
		if(rest==1)
		{
			t[x].p=t[idx].p-1;
			return;
		}
	}
	
	t[x].p=1;
}

void Work()
{
	t[n+1].t=1000000001LL*1000000000;
	
	ll T,rest;
	int idx;
	for(int i=1;i<=n;i++)
	{
		T=t[i].t;
		
		if(T==t[x].t)
		{
			Q1=Q;
			Add(i);
		}
		
		while(t[i].t==T && i<=n)
		{
			Q.push(mp(t[i].p,i));
			i++;
		}
		i--;
		
		rest=t[i+1].t-T;
		while(!Q.empty())
		{
			pii cur=Q.top();
			Q.pop();
			idx=cur.second;
			
			if(t[idx].s>rest)
			{
				T+=rest;
				t[idx].s-=rest;
				Q.push(mp(t[idx].p,idx));
				break;
			}
			
			rest-=t[idx].s;
			T+=t[idx].s;
			ans[t[idx].order]=T;
		}
	}
}

int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	cin>>n;
	
	for(int i=1;i<=n;i++)
		cin>>t[i].t>>t[i].s>>t[i].p,t[i].order=i;
	
	cin>>limit;
	
	sort(t+1,t+n+1,cmp);
	for(int i=1;i<=n;i++)
		if(t[i].p==-1)
			x=i;
	
	Work();
	
	cout<<t[x].p<<endl;
	for(int i=1;i<=n;i++)
		cout<<ans[i]<<' ';
	
	return 0;
}
