#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;

#define maxn 50010

struct node
{
	int i,t,s,p;
}a[maxn],b[maxn];

bool operator <(node a,node b)
{
	return a.p<b.p;
}

priority_queue<node> ti;
long long res[maxn];
long long T;
int q;
int N;

bool cmp(node a,node b)
{
	return a.t<b.t;
}

int search(int k)
{
	int l=1,r=1000000000,mid;
	while (l+1<r)
	{
		//cout<<l<<' '<<r<<endl;
		mid=(l+r)>>1;
		int t=mid;
		for(int i=1;i<=N;i++)
		{
			if (a[i].p!=-1 && a[i].p<=mid) t--;
		}
		if (t<=k)
			l=mid;
		else
			r=mid-1;
	}
	return l;
}

void solve(int ans)
{
	for(int i=1;i<=N;i++)
	{
		b[i]=a[i];
		if (b[i].p==-1) b[i].p=ans;
	}
	sort(b+1,b+1+N,cmp);
	long long p=0;
	for(int i=1,j;i<=N;)
	{
		long long len=b[i].t-p;
		while (!ti.empty())
		{
			node t=ti.top();
			ti.pop();
			if (t.s<=len)
			{
				len-=t.s;
				p+=t.s;
				res[t.i]=p;
			}
			else
			{
				t.s-=len;
				p+=len;
				ti.push(t);
				break;
			}
		}
		p=b[i].t;

		j=i+1;

		while (j<=N && b[j].t==b[i].t) 
			j++;
		for(int l=i;l<j;l++)
			ti.push(b[l]);

		i=j;
	}
	while (!ti.empty())
	{
		node t=ti.top();
		ti.pop();
		p+=t.s;
		res[t.i]=p;
	}
}

int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	ios::sync_with_stdio(false);
	cin>>N;
	for(int i=1;i<=N;i++)
	{
		cin>>a[i].t>>a[i].s>>a[i].p;
		a[i].i=i;
		if (a[i].p==-1)
			q=i;
	}
	cin>>T;
	int l=1,r=1000000000,ans,mid;
	while (true)
	{
		//cout<<l<<' '<<r<<endl;
		mid=(l+r)>>1;
		int t=search(mid);
		//cout<<t<<endl;
		solve(t);
		if (res[q]==T)
		{
			ans=t;
			break;
		}
		if (res[q]<T)
			r=mid-1;
		else
			l=mid+1;
	}
	cout<<ans<<endl;
	for(int i=1;i<=N;i++)
	{
		cout<<res[i]<<' ';
	}
	cout<<endl;
	return 0;
}
	
	
