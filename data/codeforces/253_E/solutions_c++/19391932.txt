#include<iostream>
#include<cstdio>
#include<queue>
#include<algorithm>
#include<utility>
#include<vector>
#include<cstring>
using namespace std;
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef pair<int,int> pii;

const int N=50005;

struct task{
	int t,s,p,pos;
	
} a[N];

bool cmp(const task &a,const task &b){
	return a.t<b.t;
}

priority_queue<pii,vector<pii>,less<pii> > q;
vector<ll> tmp,pri;
int n,x;
ll T;

task b[N];
void getans(vector<ll> &ans){
	memcpy(b,a,sizeof(a));
	while(!q.empty()) q.pop();
	ans.resize(n,0);
	ll now=0;
	for(int i=0;i<n;i++){
		while(now<a[i].t&&!q.empty()){
			pii p=q.top();
			int id=p.second;
			if(now+b[id].s<=a[i].t){
				now+=b[id].s;
				b[id].s=0;
				ans[b[id].pos]=now;
				q.pop();
			}else{
				b[id].s-=a[i].t-now;
				now=a[i].t;
			}
		}
		q.push(mp(a[i].p,i));
		now=a[i].t;
	}
	while(!q.empty()){
		pii p=q.top();q.pop();
		int id=p.second;
		now+=b[id].s;
		ans[a[id].pos]=now;
	}
}

bool check(int unknown){
	a[x].p=unknown;
	getans(tmp);
	return tmp[a[x].pos]<=T;
}
 

int main(){
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d%d%d",&a[i].t,&a[i].s,&a[i].p);
		a[i].pos=i;
		if(a[i].p!=-1) tmp.pb(a[i].p);
	}
	scanf("%I64d",&T);
	sort(a,a+n,cmp);
	for(int i=0;i<n;i++) if(a[i].p==-1){
		x=i;break;
	}
	sort(tmp.begin(),tmp.end());
	pri.pb(tmp[0]-1);
	for(int i=0;i<tmp.size()-1;i++){
		if(tmp[i+1]-tmp[i]>1) pri.pb(tmp[i]+1);
	}
	pri.pb(tmp[tmp.size()-1]+1);
	int ul=-1,ur=pri.size()-1;
	while(ur-ul>1){
		int mid=ul+ur>>1;
		if(check(pri[mid])) ur=mid;else ul=mid;
	}
	a[x].p=pri[ur];
	getans(tmp);
	//	for(int i=0;i<n;i++) printf("pos=%d prio=%d size=%d finish_at=%d in_queue=%d\n",a[i].pos,a[i].p,a[i].s,tmp[a[i].pos],a[i].t);
	printf("%d\n",pri[ur]);
	for(int i=0;i<tmp.size();i++) printf("%I64d%c",tmp[i],i==tmp.size()-1?'\n':' ');
	return 0;
}
