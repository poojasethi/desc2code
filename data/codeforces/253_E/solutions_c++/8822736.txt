#include <cstdio>
#include <algorithm>
#include <queue>
using namespace std;
typedef long long ll;
const int N=50004;
const ll oo=1000000000000000;
struct rec {int x,r,p;};
int n,m,l[N],p[N],ord[N],ordp[N];
ll E,tot,t[N],cnt[N],ans[N];
bool operator <(rec a,rec b) {return (a.p<b.p);}
priority_queue <rec> q;
bool com(int x,int y) {return t[x]<t[y];}
bool comp(int x,int y) {return p[x]<p[y];}
void work(bool sp)
{
	ll T=t[ord[1]];
	while (!q.empty()) q.pop();
	if (sp) for (int i=1;i<=n;i++) cnt[i]=0;
	int k=1; tot=E-t[m];
	while ((k<=n)||(!q.empty()))
	{
		if ((q.empty())&&(t[ord[k]]>T)) T=t[ord[k]];
		while ((k<=n)&&(t[ord[k]]==T))
		{
			if ((!sp)||(ord[k]!=m))
			{
				rec a; a.x=ord[k];
				a.r=l[ord[k]]; a.p=p[ord[k]];
				q.push(a);
			}
			else if (q.empty()) T=t[ord[k+1]];
			k++;
		}
		rec a=q.top(); q.pop();
		ll L=(T<t[m])?t[m]:T;
		if (T+a.r<=t[ord[k]]) T+=a.r,ans[a.x]=T;
		else
		{
			a.r-=t[ord[k]]-T; T=t[ord[k]];
			q.push(a);
		}
		ll R=(E>T)?T:E;
		if ((sp)&&(L<R)) cnt[a.x]+=R-L,tot-=R-L;
	}
}
int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	int i; scanf("%d",&n);
	for (i=1;i<=n;i++)
	{
		scanf("%d%d%d",&t[i],&l[i],&p[i]);
		if (p[i]==-1) m=i;
		ord[i]=ordp[i]=i;
	}
	scanf("%I64d",&E);
	sort(ord+1,ord+n+1,com);
	ord[n+1]=n+1; t[n+1]=oo;
	work(1);
	sort(ordp+1,ordp+n+1,comp);
	int min=0;
	if (l[m]>tot)
		for (i=2;i<=n;i++)
		{
			tot+=cnt[ordp[i]];
			min=p[ordp[i]];
			if (tot>=l[m]) break;
		}
	for (i=1;i<=n;i++) if (p[ordp[i]]==min+1) min++;
	printf("%d\n",p[m]=min+1);
	work(0);
	for (i=1;i<=n;i++) printf("%I64d",ans[i]),putchar((i==n)?'\n':' ');
	fclose(stdin); fclose(stdout);
	return 0;
}