#include<iostream>
#include<set>
#include<queue>
#include<algorithm>
#include<cstdio>
using namespace std;
struct task
{
	long long t,s,p,id;
	void input(long long i)
	{
		cin>>t>>s>>p;
		id=i;
	}
	bool operator < (task u) const
	{
		if (t!=u.t) return t<u.t;
		return p>u.p;
	}
}a[111111];
long long n,tim,missed,low,high,mid,endtime[111111],ct;
long long pos[111111],pagerest[111111],t;
set<long long> s;
void doit(long long mp)
{
	priority_queue<pair<long long,long long> > q;
	for (long long i=1;i<=n;i++)
	{
		pagerest[i]=a[i].s;
	}
	a[missed].p=mp;
	for (long long i=1;i<=n;i++)
	{
		if (i==1) ct=0;
		else ct=a[i-1].t;
		while(!q.empty() && ct<a[i].t)
		{
			long long x=q.top().second;
			long long tme=min(a[i].t-ct,pagerest[x]);
			ct+=tme;
			pagerest[x]-=tme;
			if (!pagerest[x]) 
			{
				endtime[a[x].id]=ct;
				q.pop();
			}
		}
		q.push(make_pair(a[i].p,i)); 
	}
	ct=a[n].t;
	while(!q.empty())
	{
		long long x=q.top().second;q.pop();
		ct+=pagerest[x];
		endtime[a[x].id]=ct;
	}
}
int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	cin>>n;
	for (long long i=1;i<=n;i++)
	{
		a[i].input(i);
	    s.insert(a[i].p);
	}
	cin>>tim;
	sort(a+1,a+n+1);
	for (long long i=1;i<=n;i++)
	{
		if (a[i].p==-1) missed=i;
	}
	for (set<long long>::iterator it=s.begin();it!=s.end();it++)
	{
		long long qq=*it;
		if (qq<0) continue;
		if (qq>1 && s.find(qq-1)==s.end()) pos[t++]=qq-1;
		if (qq<1e9 && s.find(qq+1)==s.end()) pos[t++]=qq+1;
	}
	low=0;
	high=t-1;
	sort(pos,pos+t);
	while(low<=high)
	{
		mid=(low+high)/2;
		doit(pos[mid]);
		if (endtime[a[missed].id]==tim)
		{
			cout<<pos[mid]<<endl;
			for (long long i=1;i<=n;i++)
			{
				if (i-1) cout<<" ";
				cout<<endtime[i];
			}
			return 0;
		}
		if (endtime[a[missed].id]>tim) low=mid+1;
		else high=mid-1;
	}
	return 0;
}
