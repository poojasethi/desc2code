#include<cstdio>
#include<cstring>
#include<deque>
#include<queue>
#include<algorithm>
#define LL long long
using namespace std;
struct task
{
	LL t,s;
	int p,id;
	const bool operator<(task a) const
	{
		return p<a.p;
	}
}A[50050],B[50050];
priority_queue<task> Q;
LL ans[50050];
int seq[50050];
LL T;
int n,tot;
bool cmp(task a,task b)
{
	return a.t<b.t;
}
bool can(int x)
{
	task C;
	LL t0;
	int i;
	memcpy(B,A,sizeof(A));
	t0=0; B[1].p=seq[x];
	sort(B+1,B+n+1,cmp);
	for (i=1;i<=n;i++)
	{
		while (t0<B[i].t)
		{
			if (Q.empty()) t0=B[i].t;
			else
			{
				C=Q.top(); Q.pop();
				if (C.s<=B[i].t-t0)
				{
					t0+=C.s; ans[C.id]=t0;
				}
				else
				{
					C.s-=B[i].t-t0; Q.push(C); t0=B[i].t;
				}
			}
		}
		Q.push(B[i]);
	}
	while (!Q.empty())
	{
		C=Q.top(); Q.pop();
		t0+=C.s; ans[C.id]=t0;
	}
	return ans[A[1].id]<=T;
}
int main()
{
	int i,h,t,mid;
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d",&n);
	for (i=1;i<=n;i++)
	{
		scanf("%I64d%I64d%d",&A[i].t,&A[i].s,&A[i].p);
		A[i].id=i;
	}
	scanf("%I64d",&T);
	sort(A+1,A+n+1);
	if (A[2].p>1)
	{
		tot=1; seq[1]=1;
	}
	else tot=0;
	for (i=2;i<=n-1;i++)
		if (A[i+1].p-A[i].p>=2)
		{
			tot++; seq[tot]=A[i].p+1;
		}
	if (A[n].p<1000000000)
	{
		tot++; seq[tot]=A[n].p+1;
	}
	h=1; t=tot;
	while (h<t)
	{
		mid=(h+t)/2;
		if (can(mid)) t=mid;
		else h=mid+1;
	}
	printf("%d\n",seq[h]);
	can(h);
	for (i=1;i<=n;i++) printf("%I64d ",ans[i]);
	printf("\n"); return 0;
}