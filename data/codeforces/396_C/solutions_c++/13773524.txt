#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long LL;
const int N = 300010;
const LL MOD = 1e9 + 7;

struct Edge{
	int v, next;
	Edge() {}
	Edge(int v, int next): v(v), next(next) {};
}E[N];

int n, q, tot, idx;
int head[N], dep[N], l[N], r[N];
LL bit[2][N];

inline int lowbit(int x) {
	return x & (-x);
}

void Modify(int x, LL w, int i) {
	while (x < N) {
		bit[i][x] = (bit[i][x] + w) % MOD;
		x += lowbit(x);
	}
}

LL Query(int v) {
	LL a = 0, b = 0;
	int x = l[v];
	while (x) {
		a += bit[0][x];
		b += bit[1][x];
		x -= lowbit(x);
	}
	return ((a - b * dep[v]) % MOD + MOD) % MOD;
}

void dfs(int u, int fa) {
	l[u] = idx++;
	if (u == 1) dep[u] = 1;
	else dep[u] = dep[fa] + 1;

	for (int i = head[u]; ~i; i = E[i].next) dfs(E[i].v, u);
	r[u] = idx - 1;
}

void init() {
	memset(head, -1, sizeof(head));
	tot = 0;

	int fa;
	for (int i = 2; i <= n; i++) {
		scanf("%d", &fa);
		E[tot] = Edge(i, head[fa]);
		head[fa] = tot++;
	}
	idx = 1;
	dfs(1, 0);
}

void solve() {
	scanf("%d", &q);
	int op, v;
	LL x, k;
	while (q--) {
		scanf("%d%d", &op, &v);
		if (op == 2) printf("%lld\n", Query(v));
		else {
			scanf("%lld%lld", &x, &k);
			Modify(l[v], x + dep[v] * k, 0);
			Modify(r[v] + 1, -(x + dep[v] * k), 0);
			Modify(l[v], k, 1);
			Modify(r[v] + 1, -k , 1);
		}
	}
}

int main() {
	scanf("%d", &n);
	init();
	solve();
	return 0;
}

					      	 				  	  			    		