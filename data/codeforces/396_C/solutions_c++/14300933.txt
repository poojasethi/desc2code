#include <bits/stdc++.h>

#define SZ(x) (( int(x.size()) ))

using namespace std;

const long long maxn = 3ll*100*1000 + 10ll, MOD = 1000ll*1000*1000 + 7ll;

long long n, m, h[maxn];
vector <int> vertex[maxn];
long long fen[2][maxn], st[maxn], et[maxn], T = 0;

void add(int indx, int x, long long v)
{
	for(x++; x < maxn; x += (x & -x)){
		fen[indx][x] += v;
		fen[indx][x] %= MOD;
	}
	return;
}

long long get(int indx, int x)
{
	long long ret = 0;
	for(; x; x -= (x & -x)){
		ret += fen[indx][x];
		ret %= MOD;
	}
	return ret;
}

void dfs(int root, int par)
{
	st[root] = T++;
	for(int i = 0; i < SZ(vertex[root]); i++){
		int adj = vertex[root][i];
		if(adj == par)
			continue;
		h[adj] = h[root] + 1;
		dfs(adj, root);
	}
	et[root] = T;
	return;
}

int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);

	cin >> n;
	for(int i = 1; i < n; i++){
		int p;
		cin >> p;
		vertex[i].push_back(p-1);
		vertex[p-1].push_back(i);
	}

	dfs(0, -1);

	cin >> m;
	for(int i = 0; i < m; i++){
		int t;
		cin >> t; t--;
		if(t){
			int v;
			cin >> v; v--;
			cout << ((get(0, st[v]+1)%MOD) - (((get(1, st[v]+1)%MOD) * h[v])%MOD) + 2*MOD)%MOD << endl;
		}
		else{
			long long v, x, k;
			cin >> v >> x >> k; v--;
			add(0, st[v], x + (h[v]*k));
			add(0, et[v], -x - (h[v]*k));
			add(1, st[v], k);
			add(1, et[v], -k);
		}
	}

	return 0;
}

 	 	 	 	 		   	   	  	 		 				