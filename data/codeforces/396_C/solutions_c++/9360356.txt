#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
#define MOD 1000000007
#define N 303030

struct Edge
{
    int v,next;
}e[N];
int last[N],len=0,dfn[N],fa[N],sz[N],tot=0,depth[N],bit[2][N],n;

void addedge(int u,int v)
{
    e[++len].v=v;
    e[len].next=last[u];
    last[u]=len;
}

void dfs(int i)
{
    dfn[i]=++tot;
    sz[i]=1;
    for (int j=last[i];j;j=e[j].next)
        if (fa[i]!=e[j].v)
        {
            depth[e[j].v]=depth[i]+1;
            dfs(e[j].v);
            sz[i]+=sz[e[j].v];
        }
}

void add(int o,int x,int d)
{
    for (;x<=n;x+=x&(-x)) bit[o][x]=(bit[o][x]+d)%MOD;
}

int sum(int o,int x)
{
    int ret=0;
    for (;x;x-=x&(-x)) ret=(ret+bit[o][x])%MOD;
    return ret;
}

int main()
{
    int q,v,x,k,type;
    scanf("%d",&n);
    for (int i=2;i<=n;i++)
    {
        scanf("%d",&v);
        fa[i]=v;
        addedge(v,i);
    }
    dfs(1);
    scanf("%d",&q);
    while (q--)
    {
        scanf("%d",&type);
        if (type==1)
        {
            scanf("%d%d%d",&v,&x,&k);
            add(0,dfn[v],(x+1ll*k*depth[v])%MOD);
            add(0,dfn[v]+sz[v],-((x+1ll*k*depth[v])%MOD));
            add(1,dfn[v],k);
            add(1,dfn[v]+sz[v],MOD-k);
        }
        else
        {
            scanf("%d",&v);
            printf("%I64d\n",((sum(0,dfn[v])-1ll*sum(1,dfn[v])*depth[v])%MOD+MOD)%MOD);
        }
    }
    return 0;
}

 	 	  	     	  				 	    	 	 	