#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
const int maxn = 300005;
const int mod  = 1000000007;

vector<int> G[maxn];

int l[maxn],r[maxn],d[maxn],nn = 0;
void dfs(int u,int dep) {
    d[u] = dep;
    l[u] = ++nn;
    for (int i = 0; i < G[u].size(); i++) {
        int v = G[u][i];
        dfs(v,dep + 1);
    }
    r[u] = nn;
}

#define add(a,b) a+=b,a%=mod;

ll a[maxn],b[maxn];
inline int lowbit(int x) {
    return x&(-x);
}
void update(int pos,ll x,ll k) {
    while(pos<=nn) {
        add(a[pos],x);
        add(b[pos],k);
        pos+=lowbit(pos);
    }
}
ll getSum(int pos,int deep) {
    ll res1 = 0, res2 = 0;
    while(pos) {
        add(res1,a[pos]);
        add(res2,b[pos]);
        pos-=lowbit(pos);
    }
    return (res1 - res2 * deep) % mod;
}

int main(){
	int n,p;
	scanf("%d",&n);
	for (int i = 2; i <= n; i++) {
        scanf("%d",&p);
        G[p].push_back(i);
    }
    dfs(1,1);
    int q,t,v; ll x,k;
    scanf("%d",&q);
    while(q--){
        scanf("%d",&t);
        if (t == 1) {
            scanf("%d%I64d%I64d",&v,&x,&k);
            add(x, k * d[v]);
            update(l[v],x,k);
            update(r[v]+1,-x,-k);
        } else if (t == 2) {
            scanf("%d",&v);
            ll ans = getSum(l[v],d[v]);
            printf("%I64d\n",(ans + mod) % mod);
        }
    }
	return 0;
}
