//ITNOG
#include<bits/stdc++.h>

using namespace std;

#define int long long
#define X first 
#define Y second
const int maxN = 300*1000 + 5;
const int mo = 1000*1000*1000 + 7;

int fen[2][maxN];
vector<int> a[maxN];
int cnt;
int start[maxN], finish[maxN];
int h[maxN];

void dfs(int v)
{
    start[v] = ++ cnt;
    for(int i = 0; i < a[v].size(); i ++)
	  h[a[v][i]] = h[v] + 1, dfs(a[v][i]);
    finish[v] = cnt;
}

inline void add(int pos, int n, int k)
{
    for(; n > 0; n -= n & (-n))
	  fen[pos][n] += k, fen[pos][n] %= mo;
}

inline int get(int pos, int n)
{
    int ans = 0;
    for(;n < maxN; n += n & (-n))
	  ans += fen[pos][n], ans %= mo;
    return ans;
}
main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    int n;cin >> n;
    for(int i = 1; i < n; i ++)
    {
	  int p; cin >> p; p --;
	  a[p].push_back(i);
    }
    dfs(0);
    int q; cin >> q;
    for(int i = 0; i < q; i ++)
    {
	  int t; cin >> t;
	  if(t == 1)
	  {
		int v, x, k;
		cin >> v >> x >> k; v --; int val = x + h[v] * k;
		add(0, finish[v], val % mo);
		add(0, start[v] - 1, (-val) % mo);
		add(1, finish[v], k);
		add(1, start[v] - 1, -k);
	  }
	  else
	  {
		int v; cin >> v; v --;
		int co = get(1, start[v]), re = get(0, start[v]);
		int ans = re - co * h[v]; ans %= mo; ans += mo; ans %= mo;
		cout << ans << endl;
	  }
    }
    return 0;
}
