#include <bits/stdc++.h>
using namespace std;
#define LL long long
#define MOD 1000000007
#define MAXN 3*100010
std::vector<int> Edge[MAXN];
LL Tree[MAXN][2];
LL level[MAXN];
LL Left[MAXN];
LL Right[MAXN];
int next = 1;
int N;
void Add(int idx,LL val,int opt)
{	
	while(idx<=N)
	{
		Tree[idx][opt] += val;
		Tree[idx][opt]%=MOD;
		idx+=(idx & -idx);
	}
}
LL Read(int idx,int opt)
{
	LL S = 0;
	while(idx)
	{
		S+=Tree[idx][opt];
		idx-=(idx & -idx);
	}
	return S%MOD;
}
void dfs(int idx,int depth)
{
	level[idx] = depth;
	Left[idx] = next++;
	for(int i = 0;i<Edge[idx].size();i++)
		dfs(Edge[idx][i],depth+1);
	Right[idx] = next-1;
}
int main()
{
	int u;
	cin>>N;
	for(int i = 2;i<=N;i++)
	{
		cin>>u;
		Edge[u].push_back(i);
	}
	dfs(1,0);
	int Q;
	cin>>Q;
	LL X,K;
	for(int i = 0;i<Q;i++)
	{
		int opt;
		cin>>opt;
		if(opt==1)
		{
			cin>>u>>X>>K;
			LL val = X + level[u]*K;
			val%=MOD;
			Add(Left[u],val,0);
			Add(Right[u]+1,MOD - val,0);
			Add(Left[u],K,1);
			Add(Right[u]+1,MOD-K,1);
		}
		else
		{
			cin>>u;
			LL p1 = Read(Left[u],0);
			LL p2 = Read(Left[u],1);
			LL Res = (p1 - (level[u]*p2))%MOD;
			if(Res<0)
				Res+=MOD;
			cout<<Res<<endl;
		}
	}
}