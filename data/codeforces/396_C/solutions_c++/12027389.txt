#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;
typedef long long ll;
const int mo = 1e9 + 7;
int n;
#define N 300005
int l[N], r[N], cnt;
vector<int> e[N];


ll a[N], b[N], d[N];
void add(int x, ll y1, ll y2){
    for (int i = x; i <= n; i += (i&-i)){
        a[i] = (a[i] + y1) % mo;
        b[i] = (b[i] + y2) % mo;
    }
}

ll get(int x){
    ll ret = 0;
    for (int i = x; i > 0; i -= (i&-i)){
        ret = (ret + a[i]) % mo;
        ret = (ret + b[i] * d[x] % mo) % mo;
    }
    return ret;
}

void dfs(int k){
    l[k] = ++ cnt;
    for (int i = 0; i < e[k].size(); ++ i){
        int u = e[k][i];
        d[cnt+1] = d[l[k]] + 1;
        dfs(u);
    }
    r[k] = cnt;
}

int main(){

    scanf("%d", &n);
    int t, v, x, k;
    for (int i = 2; i <= n; ++ i){
        scanf("%d", &x);
        e[x].push_back(i);
    }
    d[1] = 1;
    dfs(1);
    int q;
    scanf("%d", &q);
    while (q--){
        scanf("%d", &t);
        if (t == 1){
            scanf("%d%d%d", &v, &x, &k);
            add(l[v], (d[l[v]] * k % mo + x) % mo, -k);
            add(r[v] + 1, -(d[l[v]] * k % mo + x) % mo, k);
        } else {
            scanf("%d", &v);
            int ans = get(l[v]);
            if (ans < 0) ans += mo;
            printf("%d\n", ans);
        }
    }
    return 0;
}