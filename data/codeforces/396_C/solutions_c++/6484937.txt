#include <cstdio>
#include <vector>
using namespace std;
int par[300100];
int ans[300100];
int dpth[300100], l[300100], r[300100];
vector<int> ch[300100];
const int mod = 1000000007;
int c;
void dfs(int v, int d) {
	dpth[v] = d;
	l[v] = ++c;
	for (int i = 0; i < ch[v].size(); i++) {
		dfs(ch[v][i], d+1);
	}
	r[v] = c+1;
}
long long b1[300100], b2[300100];
long long sum(long long *b, int k) {
	long long res = 0;
	while (k > 0) {
		res += b[k];
		res %= mod;
		if (res < 0) res += mod;
		k -= k & -k;
	}
	return res;
}
void add(long long *b, int k, long long x) {
	while (k < 300100) {
		b[k] += x;
		b[k] %= mod;
		if (b[k] < 0) b[k] += mod;
		k += k & -k;
	}
}
int main() {
	int n, q, v, k, x, t;
	scanf("%d", &n);
	for (int i = 1; i < n; i++) {
		scanf("%d", &par[i]);
		ch[--par[i]].push_back(i);
	}
	dfs(0, 0);
	scanf("%d", &q);
	while (q--) {
		scanf("%d%d", &t, &v);
		--v;
		if (t == 1) {
			scanf("%d%d", &x, &k);
			long long tmp = dpth[v];
			tmp = ((tmp * k) % mod + x) % mod;
			if (tmp < 0) tmp += mod;
			add(b1, l[v], tmp);
			add(b1, r[v], mod - tmp);
			add(b2, l[v], mod - k);
			add(b2, r[v], k);
		} else {
			long long tmp = sum(b1, l[v]);
			tmp += sum(b2, l[v]) * dpth[v] % mod;
			tmp %= mod;
			if (tmp < 0) tmp += mod;
			printf("%d\n", (int)tmp);
		}
	}
	return 0;
}
