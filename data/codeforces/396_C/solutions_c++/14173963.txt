#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
 
#define mp make_pair

const ll N = 4e5;
const ll M = 20;
const ll SQRT = 350;
const ll INF = 1e16;
const ll MOD = 1e9+7;

ll n,q,st[N],ft[N],cnt,d[N];
ll fen[2][N];
vector<ll> v[N];

void add(int id,int p,ll val)
{
	for (p++; p<N; p += p&-p)
		fen[id][p] = (fen[id][p]+val)%MOD;
}

ll get(int id,int p)
{
	ll ans = 0;
	for ( ; p ; p -= p&-p)
		ans = (ans+fen[id][p])%MOD;
	return ans;
}

void dfs(int x,int h)
{
	d[x] = h;
	st[x] = cnt++;
	int l = v[x].size();
	for (int i = 0; i<l; i++)
		dfs(v[x][i],h+1);
	ft[x] = cnt;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	for (int i = 1; i<n; i++)
	{
		int x;
		cin >> x;
		x--;
		v[x].push_back(i);
	}
	dfs(0,0);
	cin >> q;
	for (int i = 0; i<q; i++)
	{
		ll c,x;
		cin >> c >> x;
		x--;
		if (c==1)
		{
			ll y,k;
			cin >> y >> k;
			ll tmp = (y+k*d[x])%MOD;
			add(0,st[x],tmp);
			add(0,ft[x],(-tmp+MOD)%MOD);
			add(1,st[x],k);
			add(1,ft[x],(-k+MOD)%MOD);
		}
		else
		{
			cout << (get(0,st[x]+1)-get(1,st[x]+1)*d[x]%MOD+MOD)%MOD << "\n";
		}
	}
	return 0;
}
 	  					 			    					 	    		