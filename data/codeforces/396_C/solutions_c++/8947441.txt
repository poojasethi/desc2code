//In the name of God
#include <iostream>
#include <vector>
using namespace std;
const int N = 3e5 + 5, mod = 1e9 + 7;

int st[N], ed[N], n, q, h[N], f[N], g[N];
vector<int> adj[N];

void dfs(int v) {
    static int cnt = 0;
    st[v] = ++cnt;
    for (int i = 0; i < adj[v].size(); i++)
        dfs(adj[v][i]);
    ed[v] = cnt;
}
void add(int *f, int m, int x) {
    while (m) {
        f[m] = (f[m] + x) % mod;
        m -= m & -m;
    }
}
int query(int *f, int m) {
    int res = 0;
    while (m < N) {
        res = (res + f[m]) % mod;
        m += m & -m;
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin >> n;
    for (int i = 1; i < n; i++) {
        int p;
        cin >> p; p--;
        adj[p].push_back(i);
        h[i] = h[p] + 1;
    }
    dfs(0);
    cin >> q;
    while (q--) {
        int t, v, x, k;
        cin >> t;
        if (t == 1) {
            cin >> v >> x >> k;
            v--;
            add(f, ed[v], (x + 1ll * k * h[v]) % mod);
            add(f, st[v] - 1, -(x + 1ll * k * h[v]) % mod);
            add(g, ed[v], k);
            add(g, st[v] - 1, -k);
        }
        else {
            cin >> v; v--;
            cout << ((query(f, st[v]) - 1ll * h[v] * query(g, st[v])) % mod + mod) % mod << '\n';
        }
    }
    return 0;
}