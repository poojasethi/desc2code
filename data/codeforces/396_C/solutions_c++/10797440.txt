#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <climits>

using namespace std;

typedef int arr[3000010];
typedef long long ll;
pair<int, int> Int[3000010];

const int mo = (int) 1e9 + 7;
int n, id, q, tot;
ll ans;
arr head, pnt, next, depth;

inline void add(int a, int b) { next[++tot] = head[a]; head[a] = tot; pnt[tot] = b; }

struct BIT {
	ll c[1000010];
	inline void ins(int x, ll v)
	{
		for (; x <= n; x += x & -x)
			c[x] = (c[x] + v) % mo;
	}
	inline ll ask(int x)
	{
		ll ans = 0;
		for (; x; x -= x & -x) ans = (ans + c[x]) % mo;
		return ans;
	}
}c1, c2;
	
inline void dfs(int x, int dis)
{
	Int[x].first = ++id; depth[x] = dis + 1;
	for (int i = head[x]; i; i = next[i]) dfs(pnt[i], dis + 1);
	Int[x].second = id;
}
			
int main()
{
	scanf("%d", &n);
	for (int i = 2, a; i <= n; i ++) scanf("%d", &a), add(a, i);
	scanf("%d", &q);
	dfs(1, 0);
	for (int type, v, x, k; q --; )
		{
			scanf("%d", &type);
			if (type == 1)
				{
					scanf("%d%d%d", &v, &x, &k);
					c1.ins(Int[v].first, -k); c1.ins(Int[v].second + 1, k);
					c2.ins(Int[v].first, (x + 1LL * depth[v] * k) % mo);
					c2.ins(Int[v].second + 1, (- x - 1LL * depth[v] * k) % mo);
				}
			else {
				scanf("%d", &v);
				ans = (ll)c1.ask(Int[v].first) * (ll)depth[v] % mo + c2.ask(Int[v].first);
				printf("%I64d\n", (ans % mo + mo) %mo);
			}
		}
	return 0;
}
