#include<bits/stdc++.h>
#define MAX 300005
#define ll long long int
#define M 1000000007
using namespace std;
vector<ll>adj[MAX];
ll depth[MAX],pos=1;
pair<ll,ll>range[MAX];

ll BIT[2][MAX];

void update(ll i,ll index,ll value)
{
	while(index<=MAX-1)
	{
		BIT[i][index]+=value;
		BIT[i][index]%=M;
		index+=(index & -index);
	}
}

ll qry(ll i,ll index)
{
	ll ans=0;
	while(index)
	{
		ans+=BIT[i][index];
		index-=(index & -index);
	}
	return ans%M;
}

void dfs(ll v,ll dep)
{
	depth[v]=dep;
	range[v].first=pos++;
	for(int i=0;i<adj[v].size();i++)
		dfs(adj[v][i],dep+1);
	range[v].second=pos-1;
}

int main()
{
	ll n,q,parent;
	scanf("%I64d",&n);
	for(int i=2;i<=n;i++)
	{
		scanf("%I64d",&parent);
		adj[parent].push_back(i);
	}
	dfs(1,0);
	scanf("%I64d",&q);
	while(q--)
	{
		ll typ,v,x,k;
		scanf("%I64d %I64d",&typ,&v);
		if(typ==1)
		{
			scanf("%I64d %I64d",&x,&k);
			ll val=x+depth[v]*k;
			update(0,range[v].first,val);
			update(0,range[v].second+1,M-val);
			update(1,range[v].first,k);
			update(1,range[v].second+1,M-k);
		}
		else
		{
			ll ans1=qry(0,range[v].first);
			ll ans2=qry(1,range[v].first);
			ll result=(ans1-(ans2*depth[v]))%M;
			if(result<0)
			    result+=M;
			cout<<result<<endl;
		}
	}

}