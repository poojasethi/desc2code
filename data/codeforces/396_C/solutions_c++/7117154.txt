#include<stdio.h>
#include<string.h>
# include<vector>
#include<algorithm>
using namespace std;
const int maxn=300010;
const int mod=1000000007;
typedef long long LL;
vector<int> G[maxn];
int n,q;
int dep[maxn],fa[maxn],dfn[maxn],dfs_clock=0,end[maxn];

inline int lowbit(int x){ return x&(-x);}
struct FenwickTree{
	LL C[maxn];int n;
	void init(int nn) {n=nn;memset(C,0,sizeof(C));}
	void add(int x,LL val){
		while(x<=n) C[x]=(C[x]+val)%mod,x+=lowbit(x);
	}
	LL sum(int x){
		LL res=0;
		while(x>0) res+=C[x],x-=lowbit(x);
		res%=mod;
		return res;
	}
}A,B;

void dfs(int x){
	dfn[x]=++dfs_clock;
	for(int e=0;e<G[x].size();e++){
		dep[G[x][e]]=dep[x]+1;
		dfs(G[x][e]);
	}
	end[x]=dfs_clock;
}

int main(){
	LL ans;
	int v,x,k,op;
	scanf("%d",&n);
	fa[1]=1;
	for(int i=2;i<=n;i++)
		scanf("%d",&fa[i]),G[fa[i]].push_back(i);
	dep[1]=0;dfs(1);
	A.init(n);B.init(n);
	scanf("%d",&q);
	while(q--){
		scanf("%d",&op);
		if(op==1){
			scanf("%d%d%d",&v,&x,&k);
			A.add(dfn[v],((LL)dep[v]*k+x)%mod);
			A.add(end[v]+1,((LL)-dep[v]*k-x)%mod);
			B.add(dfn[v],k);
			B.add(end[v]+1,-k);
		}
		else{
			scanf("%d",&v);
			ans=((A.sum(dfn[v])-(LL)B.sum(dfn[v])*dep[v]%mod)%mod+mod)%mod;
			printf("%lld\n",ans);
		}
	}
	return 0;
}
