#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1000000007;
const int MAXN = 300005;
int N, Q;
vector<int> adj[MAXN];
long long level[MAXN];
int range[MAXN][2];
int idx = 1;
int BIT[MAXN][2];

void update(int idx, int val, int type)
{
	for (; idx < MAXN; idx += idx&-idx)
		BIT[idx][type] = (BIT[idx][type] + val) % MOD;
}

int query(int idx, int type)
{
	int val = 0;
	for (; idx > 0; idx -= idx&-idx)
		val = (val + BIT[idx][type]) % MOD;
	return val;
}

void dfs(int node, int lev)
{
	level[node] = lev;
	range[node][0] = idx++;

	for (int i = 0; i < adj[node].size(); i++)
		dfs(adj[node][i], lev + 1);

	range[node][1] = idx;
}

int main()
{
	cin >> N;
	for (int i = 2; i <= N; i++)
	{
		int p;
		cin >> p;
		adj[p].push_back(i);
	}

	dfs(1, 0);

	cin >> Q;
	for (int i = 0; i < Q; i++)
	{
		int type;
		cin >> type;

		if (type == 1)
		{
			int v, x, k;
			cin >> v >> x >> k;
			int val = (x + ((long long)level[v]*k % MOD)) % MOD;
			update(range[v][0], val, 0);
			update(range[v][1], -val, 0);
			update(range[v][0], k, 1);
			update(range[v][1], -k, 1);
		}
		else
		{
			int v;
			cin >> v;
			int q1 = query(range[v][0], 0), q2 = query(range[v][0], 1);
			int ans = (q1 - ((long long)level[v]*q2 % MOD)) % MOD;
			if (ans >= 0)
				cout << ans << "\n";
			else
				cout << ans + MOD << "\n";
		}
	}

	return 0;
}