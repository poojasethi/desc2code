#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <stack>
#include <cassert>
#include <string.h>

#define pb push_back
#define mp make_pair
#define PI 3.1415926535897932384626433832795
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;

const int mod = 1000000007;
struct num {
	int x;
	num():x(0) {}
	num(int x):x(x) {}
	num operator+(const num& o) const {
		num res(x+o.x);
		if (res.x >= mod) res.x -= mod;
		return res;
	}
	num operator-(const num& o) const {
		num res(x-o.x);
		if (res.x < 0) res.x += mod;
		return res;
	}
	num operator*(const num& o) const {
		return num(x*(ll)o.x%mod);
	}
};


struct MAGIC {
	num n, a1, an, S, T;
};

MAGIC add(const MAGIC& m, num x) {
	MAGIC res = {m.n, m.a1+x, m.an+x, m.S+m.n*x, m.T+(m.n-1)*x*x+x*(m.S*2-m.a1-m.an)};
	return res;
}

MAGIC merge(const MAGIC& m1, const MAGIC& m2) {
	MAGIC res = {m1.n+m2.n, m1.a1, m2.an, m1.S+m2.S, m1.T+m2.T+m1.an*m2.a1};
	return res;
}


num solve(const string& s) {
	MAGIC mall = {2,4,7,4+7,4*7};
	MAGIC msuff = {1,4,4,4,0};
	if (s[sz(s)-1] == '7') msuff = mall;
	num ten(1);
	for (int i = sz(s)-2; i >= 0; --i) {
		ten = ten * num(10);
		if (s[i] == '4') msuff = add(msuff, ten * 4);
		else msuff = merge(add(mall, ten * 4), add(msuff, ten * 7));
		mall = merge(add(mall, ten * 4), add(mall, ten * 7));
	}
	return msuff.T;
}



int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	string sl, sr; cin >> sl >> sr;
	num r1 = solve(sr);
	num r2 = solve(sl);
	num res = r1-r2;
	printf("%d\n", res.x);
	return 0;
}
