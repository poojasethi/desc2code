#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

typedef long long LL;
typedef pair<LL, LL> PI;

const int N = int(1e5 + 5);
const int MOD = int(1e9 + 7);

int a[N], b[N], n;
LL f[N], g[N];

void rd(int *f, int &n)
{
	int c; while(c=getchar(), c<'4'); f[n=1]=(c=='7');
	while(c=getchar(), c>='4') f[++n]=(c=='7');
}

PI add(LL f, LL g, LL p, LL c, LL n)
{
	LL F = (f + (((p * p) % MOD * (c-1)) % MOD * (n * n)) % MOD + ((p * n) % MOD * g) % MOD) % MOD;
	LL G = (g + ((p * n) % MOD * (c + c - 2)) % MOD) % MOD;
	return PI(F, G);
}

LL cal(int *a)
{
	PI now(0, 0), tep;
	for(LL i = n, l4 = 0, l7 = 0, nc = 1, c = 1, p1 = 1; i>=1; i--)
	{
		if(!a[i])
		{
			now = add(now.first, now.second, p1, nc, 4);
		}
		else
		{
			now = add(now.first, now.second, p1, nc, 7);
			tep = add(f[n-i], g[n-i], p1, c, 4);
			
			now.first = (now.first + tep.first + ((p1 * 4 + l7) % MOD * (p1 * 7 + l4) % MOD) % MOD) % MOD;
			now.second = (now.second + tep.second + l4 + l7 + p1 * 4 + p1 * 7) % MOD;
			
			(nc += c) %= MOD;
		}
		
		p1 = (p1 * 10) % MOD;
		c = (c + c) % MOD;
		l4 = (l4 * 10 + 4) % MOD;
		l7 = (l7 * 10 + 7) % MOD;
	}
	
	return now.first;
}

int main()
{
	
	rd(a, n), rd(b, n);
	
	for(LL i = 1, l4 = 0, l7 = 0, c = 1, p1 = 1; i<=n; i++)
	{
		
		PI s4 = add(f[i-1], g[i-1], p1, c, 4);
		PI s7 = add(f[i-1], g[i-1], p1, c, 7);
		
		f[i] = (s4.first + s7.first + ((p1 * 4 + l7) % MOD * (p1 * 7 + l4) % MOD) % MOD) % MOD;
		g[i] = (s4.second + s7.second + l4 + l7 + p1 * 4 + p1 * 7) % MOD;
		
		p1 = (p1 * 10) % MOD;
		c = (c + c) % MOD;
		l4 = (l4 * 10 + 4) % MOD;
		l7 = (l7 * 10 + 7) % MOD;
	}
	
	printf("%d\n", int((cal(b) - cal(a) + MOD) % MOD));
	
	return 0;
}
