#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const int N=100005;
const ll mod=1000000007;
ll F[N],S[N],T[N],K[N];
char s1[N],s2[N];
inline ll add(ll a, ll b) {
	if (b < 0) b += mod;
	a += b;
	return a >= mod ? a - mod : a;
}

inline ll mul(ll a, ll b) {
	return a * b % mod;
}
ll solve(char res[])
{
    int i;
    ll last,first;
    F[0]=S[0]=T[0]=0;K[0]=1;
    last=0,first=0;
    for(i=1;res[i];i++)
    {
        F[i] = add(mul(add(F[i-1], T[i-1]), 100), mul(S[i-1], 220));
		F[i] = add(add(F[i], mul(56, K[i-1]-1)), mul(70, last-first));
		K[i] = mul(K[i-1], 2);
		S[i] = add(mul(S[i-1], 20), mul(K[i-1]-1, 11));
		T[i] = add(add(mul(T[i-1], 200), mul(S[i-1], 220)), mul(K[i-1]-1, 65));
		if (res[i] == '7') {
			int t = mul(last, 10);
			F[i] = add(F[i], mul(t+4, t+7));
			S[i] = add(S[i], t+4);
			T[i] = add(T[i], mul(t+4, t+4));
		} else {
			K[i] = add(K[i], -1);
		}
		last = add(mul(last, 10), res[i]-'0');
		first = add(mul(first, 10), 4);
        /*F[i]=add(add(mul(100ll,add(F[i-1],T[i-1])),mul(220ll,S[i-1])),add(mul(70ll,last-first),mul(56ll,K[i-1]-1)));
        S[i]=add(mul(20ll,S[i-1]),mul(11ll,(K[i-1]-1)));
        T[i]=add(add(mul(200ll,T[i-1]),mul(65,K[i-1]-1)),mul(220,S[i-1]));
        K[i]=2*K[i-1]-1;
        if(res[i]=='7')
        {
            F[i]=add(F[i],mul(last*10+4,last*10+7));
            S[i]=add(S[i],last*10+4);
            T[i]=add(T[i],mul(last*10+4,last*10+4));
            K[i]++;
            first=first*10+4;
            last=last*10+7;
        }
        else
        {
            first=first*10+4;
            last=last*10+4;
        }
        if(F[i]>=mod)F[i]%=mod;
        if(S[i]>=mod)S[i]%=mod;
        if(T[i]>=mod)T[i]%=mod;
        if(K[i]>=mod)K[i]%=mod;
        if(first>=mod)first%=mod;
        if(last>=mod)last%=mod;*/
    }
    return F[i-1];
}
int main()
{
    //freopen("data.in","r",stdin);
    scanf("%s",s1+1);
    scanf("%s",s2+1);
    ll ans1=solve(s1),ans2=solve(s2);
    printf("%I64d\n",(ans2-ans1+mod)%mod);
    return 0;
}
