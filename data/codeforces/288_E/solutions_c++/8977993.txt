#include<cstdio>
#include<algorithm>
#include<cstring>
#define rep(i,l,r) for (int i=l; i<=r; ++i)
#define dep(i,r,l) for (int i=r; i>=l; --i)
using namespace std;

typedef long long i64;

const int N=100010;
const int mod=1e9+7;

char lim[N];
bool preped;
int pw[11][N],z1[N],sum[N],ans[N];

void inc(int& a,int b){
	if (a+=b,a>=mod) a-=mod;
}
int add(int n,i64 px){
	int ret=0;
	inc(ret,px*px%mod*(pw[2][n]-1+mod)%mod);
	int al=4LL*z1[n]%mod;
	int ar=7LL*z1[n]%mod;
	inc(ret,px*(2LL*sum[n]-al-ar+2*mod)%mod);
	inc(ret,ans[n]);
	return ret;
}
int solve(){
	int n=strlen(lim);
	if (!preped){
		preped=1;
		rep(x,1,10) rep(i,0,n){
			pw[x][i]=!i?1:(i64)pw[x][i-1]*x%mod;
		}
		rep(i,1,n){
			int x00=pw[10][i-1];
			z1[i]=(10LL*z1[i-1]+1)%mod;
			inc(sum[i],2LL*sum[i-1]%mod);
			inc(sum[i],11LL*x00%mod*pw[2][i-1]%mod);
			inc(ans[i],(add(i-1,4LL*x00%mod)+add(i-1,7LL*x00%mod))%mod);
			int x=(4LL*x00 + 7LL*z1[i-1])%mod;
			int y=(7LL*x00 + 4LL*z1[i-1])%mod;
			inc(ans[i],(i64)x*y%mod);
		}
	}
	int ret=0;
	i64 px=0;
	rep(i,0,n-1){
		if (lim[i]=='7'){
			int L=n-1-i,x00=pw[10][L];
			inc(ret,add(L,(px*10+4)%mod*x00%mod));
			int x=((px*10+4)%mod*x00 + 7LL*z1[L])%mod;
			int y=((px*10+7)%mod*x00 + 4LL*z1[L])%mod;
			inc(ret,(i64)x*y%mod);
		}
		px=(px*10+lim[i]-'0')%mod;
	}
	return ret;
}
int main(){
	int zans=0;
	scanf("%s",lim),inc(zans,mod-solve());
	scanf("%s",lim),inc(zans,solve());
	printf("%d\n",zans);
}
