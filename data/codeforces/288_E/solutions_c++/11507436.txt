#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <map>
#include <set>
using namespace std;

const int N = 100100;
const int INF = 1000000000;
const long long Mod = 1000000007;

char s[N];
int n;
long long f4[N], f7[N], f[N], dp[N], sum[N];

long long pow_mod(long long a, long long k)
{
    long long ret=1;
    while(k)
    {
        if(k&1)ret=ret*a%Mod;
        a=a*a%Mod;
        k>>=1;
    }
    return ret;
}

long long get(long long a, int k)
{
    long long tot=pow_mod(2, k)-1;
    long long ret=tot*(a*a%Mod)%Mod+dp[k]+sum[k]*2*a%Mod;
    ret=(ret-f4[k]*a%Mod-f7[k]*a%Mod+2*Mod)%Mod;
    return ret;
}

long long multi(long long a, int k)
{
    return ((a+4*f[k]+f7[k])%Mod)*((a+7*f[k]+f4[k])%Mod)%Mod;
}

void predeal()
{
    f[0]=1;f4[0]=f7[0]=0;dp[0]=0;sum[0]=0;
    for(int i=1;i<N;i++)
    {
        f[i]=f[i-1]*10%Mod;
        f4[i]=(f4[i-1]*10+4)%Mod;
        f7[i]=(f7[i-1]*10+7)%Mod;
        sum[i]=(sum[i-1]*2+(11*f[i-1]%Mod)*pow_mod(2, i-1)%Mod)%Mod;
        dp[i]=(get(4*f[i-1]%Mod, i-1)+get(7*f[i-1]%Mod, i-1)+multi(0, i-1))%Mod;
    }
//    for(int i=1;i<=5;i++)
//    {
//        printf("i=%d %I64d %I64d\n", i, sum[i], dp[i]);
//        printf("%I64d %I64d %I64d\n", get(4, i-1), get(7, i-1), multi(0, i-1));
//    }
}

long long solve()
{
    long long ret=0, now=0;
    for(int i=0;i<n;i++)
    {
        if(s[i]=='7')
        {
            ret=(ret+get((now+f[n-1-i]*4)%Mod, n-1-i)+multi(now, n-1-i))%Mod;
        }
        now=(now+f[n-i-1]*(s[i]-'0'))%Mod;
    }
    return ret;
}

int main()
{
    predeal();
    scanf("%s", s);
    n=strlen(s);
    long long ans=-solve();
    scanf("%s", s);
    ans+=solve();
    ans=(ans%Mod+Mod)%Mod;
    cout<<ans<<endl;
    return 0;
}
	   	   		   	 			  				  		 		