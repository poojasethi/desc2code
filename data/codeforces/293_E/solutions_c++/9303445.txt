#include<bits/stdc++.h>
using namespace std;
#define FE(u) for(int i=fir[u];i;i=next[i])if(!dv[to[i]])
int n,L,W,fir[100010],next[200001],to[200001],w[200001],ind;
int v[100010],nd[100010],num,sz[100001],msz[100001];
int d1[100010],d2[100001];
bool dv[100001];long long ans;
void add(int x,int y,int p)
{
	next[++ind]=fir[x];fir[x]=ind;to[ind]=y;w[ind]=p;
	next[++ind]=fir[y];fir[y]=ind;to[ind]=x;w[ind]=p;
}
void insert(int x,int p)
{
	for(++x;x<=n+1;x+=x&-x)v[x]+=p;
}
int ask(int x)
{
	int ret=0;
	for(++x;x;x-=x&-x)ret+=v[x];
	return ret;
}
void dfs(int x,int fa)
{
	sz[x]=1;msz[x]=0;
	FE(x)if(to[i]!=fa)
	{
		d1[to[i]]=d1[x]+1;
		d2[to[i]]=d2[x]+w[i];
		dfs(to[i],x);
		sz[x]+=sz[to[i]];
		msz[x]=max(msz[x],sz[to[i]]);
	}
	nd[++num]=x;
}
bool cmp(int x,int y){return d2[x]<d2[y];}
void getans(int type)
{
	sort(nd+1,nd+num+1,cmp);
	int now=0;
	for(int i=num;i;--i)
	{
		while(now<num&&d2[nd[i]]+d2[nd[now+1]]<=W)insert(d1[nd[++now]],1);
		if(d1[nd[i]]<=L)ans+=type*ask(L-d1[nd[i]]);
	}
	while(now)insert(d1[nd[now--]],-1);
}
void work(int x)
{
	num=0;dfs(x,-1);int tot=sz[x],rt=x;
	for(int i=1;i<=num;i++)
	if(max(msz[rt],tot-msz[rt])>max(msz[nd[i]],tot-msz[nd[i]]))
	rt=nd[i];num=0;d1[rt]=d2[rt]=0;dv[rt]=true;
	dfs(rt,-1);
	getans(1);
	FE(rt)
	{
		num=0;dfs(to[i],-1);
		getans(-1);
	}
	FE(rt)work(to[i]);
}
int main()
{
	scanf("%d%d%d",&n,&L,&W);
	for(int i=1,pp,ww;i<n;i++)
	{
		scanf("%d%d",&pp,&ww);
		add(pp,i+1,ww);
	}
	work(1);
	cout<<(ans-n>>1)<<endl;
}
