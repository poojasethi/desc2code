#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <bitset>
#include <ctime>
#include <map>
#include <queue>
#include <set>
using namespace std;

const int maxn=100000*2+15;
struct Node
{
	int d1,d2;
}sz[maxn];
struct Cmp
{
	int wz,key;
}sd[maxn];
int n,l,w,x,y,z;
int fre,node[maxn],nex[maxn],head[maxn],vv[maxn];
long long ans;
int tree[maxn];
bool boo[maxn];
int hh,tt,line[maxn],fa[maxn],sum[maxn],maxx[maxn];
int inser(int x,int y,int z)
{
	node[++fre]=y;
	nex[fre]=head[x];
	head[x]=fre;
	vv[fre]=z;
	return 0;
}
int inser(int x,int y)
{
	for (;x<=n;x+=x & (-x)) tree[x]+=y;
	return 0;
}
int found(int x)
{
	int s=0;
	for (;x;x-=x & (-x)) s+=tree[x];
	return s;
}
int bfs(int now)
{
	line[hh=tt=1]=now;
	fa[now]=-1;
	maxx[now]=0;
	sum[now]=1;
	for (;hh<=tt;hh++)
	 for (int u=head[line[hh]];u;u=nex[u])
	  if (node[u]!=fa[line[hh]] && !boo[node[u]])
	  {
	  	line[++tt]=node[u];
	  	fa[node[u]]=line[hh];
	  	sz[node[u]].d1=sz[line[hh]].d1+1;
	  	sz[node[u]].d2=sz[line[hh]].d2+vv[u];
	  	maxx[node[u]]=0;
	  	sum[node[u]]=1;
	  }
	for (hh=tt;hh>=2;hh--)
	   {
	   	maxx[fa[line[hh]]]=max(maxx[fa[line[hh]]],sum[line[hh]]);
	   	sum[fa[line[hh]]]+=sum[line[hh]];
	   }
	return 0;
}
bool cmp(Cmp x,Cmp y)
{
	return x.key<y.key;
}
int findans(int xs)
{
	for (int i=1;i<=tt;i++) sd[i].wz=line[i],sd[i].key=sz[line[i]].d2;
	sort(sd+1,sd+tt+1,cmp);
	int now=1;
	for (int i=tt;i>0;i--)
	{
		while (now<=tt && sd[now].key+sd[i].key<=w) inser(sz[sd[now].wz].d1+1,1),now++;
		if (l>=sz[sd[i].wz].d1) ans+=xs*found(l-sz[sd[i].wz].d1+1);
	}
	for (int i=1;i<now;i++) inser(sz[sd[i].wz].d1+1,-1);
	return 0;
}
int dfs(int now)
{
	sz[now].d1=sz[now].d2=0;
	bfs(now);
	int root=now;
	for (hh=2;hh<=tt;hh++)
	 if (max(maxx[root],tt-maxx[root])>max(maxx[line[hh]],tt-maxx[line[hh]]))
	  root=line[hh];
	boo[root]=true;
	sz[root].d1=sz[root].d2=0;
	bfs(root);
	findans(1);
	for (int u=head[root];u;u=nex[u])
	 if (!boo[node[u]])
	 {
	 	bfs(node[u]);
	 	findans(-1);
	 }
	for (int u=head[root];u;u=nex[u])
	 if (!boo[node[u]]) 
       dfs(node[u]);
	return 0;
}
int main()
{
	scanf("%d%d%d",&n,&l,&w);
	l=min(l,n-1);
	for (int i=1;i<n;i++)
	{
		x=i+1;
		scanf("%d%d",&y,&z);
		inser(x,y,z);
		inser(y,x,z);
	}
    dfs(1);
	printf("%I64d\n",(ans-n)/2);
	return 0;
}
