#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#define N 120000
#define inf 100000000
using namespace std;
struct ppp{
    int x,y;
    void make(int x_,int y_){
        x=x_; y=y_;
    }
}a[N];
int i,j,k,l,n,m,tree[N],fa[N],bfs[N],c[N*2],e[N*2],next[N*2],len,
    head[N],b[N],size[N],tot,w,d[N],dis[N],x,y,L;
long long ans;
bool cmp(const ppp&a,const ppp&b){
    return a.x<b.x;
}
void addedge(int x,int y,int k){
    next[++len]=head[x]; head[x]=len; e[len]=y; c[len]=k;
}
int getroot(int x){
    int l,r,i,j,smaxx=inf,root;
    bfs[l=r=1]=x;
    fa[x]=0;
    while(l<=r){
        x=bfs[l++];
        for(i=head[x];i;i=next[i])if(!b[e[i]] && e[i]!=fa[x]){
            bfs[++r]=e[i];
            fa[e[i]]=x;
        }
    }
    for(i=r;i>=1;--i){
        x=bfs[i];
        size[x]=1;
        int maxx=-1;
        for(j=head[x];j;j=next[j])if(e[j]!=fa[x] && !b[e[j]]){
            maxx=max(maxx,size[e[j]]);
            size[x]+=size[e[j]];
        }
        maxx=max(maxx,r-size[x]);
        if(maxx<smaxx)smaxx=maxx,root=x;
    }
    return root;
}
void add(int x,int flag){
    x++;
    for(int i=x;i<=n;i+=i&(-i))tree[i]+=flag;
}
int calc(int x){
    x++;
    int res=0;
    if(x<0)return 0;
    for(int i=x;i;i-=i&(-i)) res+=tree[i];
    return res;
}
void work(int l,int r,int flag){
    int i,j;
    sort(a+l,a+r+1,cmp);
    j=l;
    for(i=r;i>=l;--i){
        while(j<i && a[j].x+a[i].x<=w){
            add(a[j].y,1);
            j++;
        }
        while(j-1>=i){
            j--;
            add(a[j].y,-1);
        }
        ans+=flag*calc(L-a[i].y);
    }
}
void getdis(int x){
    a[++tot].make(d[x],dis[x]);
    for(int i=head[x];i;i=next[i])if(!b[e[i]] && e[i]!=fa[x]){
        fa[e[i]]=x;
        d[e[i]]=d[x]+c[i];
        dis[e[i]]=dis[x]+1;
        getdis(e[i]);
    }
}
void dfs(int x){
    int root=getroot(x),tmp=0,i;
    b[root]=1;
    tot=0;
    for(i=head[root];i;i=next[i])if(!b[e[i]]){
        dis[e[i]]=1;
        d[e[i]]=c[i];
        fa[e[i]]=0;
        getdis(e[i]);
        work(tmp+1,tot,-1);
        tmp=tot;
    }
    a[++tot].make(0,0);
    work(1,tot,1);
    for(i=head[root];i;i=next[i])if(!b[e[i]])dfs(e[i]);
}
int main(){
    scanf("%d%d%d",&n,&L,&w);
    L=min(L,n-1);
    for(i=2;i<=n;++i){
        scanf("%d%d",&x,&y);
        addedge(x,i,y);
        addedge(i,x,y);
    }
    dfs(1);
    printf("%I64d\n",ans);
//  system("pause");
}