#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
using namespace std;
#define N 200050
#define INF 0x3f7f7f7f
#define fr first
#define sc second
#define ll long long
pair <ll,ll> v[N];
ll n,m,p,ss=1,fi[N],la[N],s[N],c[N*2][3],h[N][2],li[N];
bool TF[N];ll ans;
struct BI_Tree
 {
    int s[N];
    inline int lowbit(int x)
     {return x&(-x);}
    void Modify(int x,int y)
     {while (x<=m) s[x]+=y,x+=lowbit(x);}
    int Query(int x)
     {int cnt=0;while (x) cnt+=s[x],x-=lowbit(x);return cnt;}
 } A;
inline int Read()
 {
    int x=0;char y;
    do y=getchar(); while (y<'0'||y>'9');
    do x=x*10+y-'0',y=getchar(); while (y>='0'&&y<='9');
    return x;
 }
inline void Line(int x,int y,int z)
 {
    c[++ss][0]=y;c[ss][1]=fi[x];c[ss][2]=z;fi[x]=ss;
    c[++ss][0]=x;c[ss][1]=fi[y];c[ss][2]=z;fi[y]=ss;
 }
int BFS(int x)
 {
    int le=1,ri=1;li[1]=x;h[x][0]=0;h[x][1]=0;la[x]=0;
    for (;le<=ri;le++)
     for (int i=fi[li[le]];i;i=c[i][1])
      if (c[i][0]!=la[li[le]]&&!TF[c[i][0]])
        li[++ri]=c[i][0],h[li[ri]][0]=h[li[le]][0]+1,
        h[li[ri]][1]=h[la[li[ri]]=li[le]][1]+c[i][2];
    return ri;
 }
int Get_Rt(int x)
 {
    for (int i=1;i<=x;i++) s[li[i]]=1;
    for (int i=x;i>1;i--) s[la[li[i]]]+=s[li[i]];
    int now=li[1];
    while (true)
     {
        bool flag=false;
        for (int i=fi[now];i;i=c[i][1])
         if (!TF[c[i][0]]&&c[i][0]!=la[now]&&s[c[i][0]]*2>=x)
          {flag=true;now=c[i][0];break;}
        if (!flag) return now;
     }
 }
ll Get_Ans(int x,int y,int z)
 {
    ll cnt=0;int ri=0,now=1;
    for (int i=2;i<=x;i++)
     if (h[li[i]][0]+y*2<=m&&h[li[i]][1]+z*2<=p)
       cnt++,v[++ri].sc=h[li[i]][0]+y,v[ri].fr=h[li[i]][1]+z;
    if (!ri) return cnt;
    sort(v+1,v+ri+1);
    A.Modify(v[1].sc,1);
    for (int i=2;i<=ri;i++)
     {
        while (now&&v[now].fr+v[i].fr>p) A.Modify(v[now--].sc,-1);
        cnt+=A.Query(m-v[i].sc);
        if (now==i-1&&v[i].fr*2<=p) A.Modify(v[++now].sc,1);
     }
    while (now) A.Modify(v[now--].sc,-1);
    return cnt;
 }
void Divide(int x,int y)
 {
    int ri=BFS(x);ans-=Get_Ans(ri,1,y);
    int Rt=Get_Rt(ri);BFS(Rt);
    ans+=Get_Ans(ri,0,0);TF[Rt]=1;
    for (int i=fi[Rt];i;i=c[i][1])
     if (!TF[c[i][0]]) Divide(c[i][0],c[i][2]);
 }
int main()
 {
    n=Read();m=Read();p=Read();
    for (int i=1;i<n;i++)
     {int k=Read(),l=Read();Line(i+1,k,l);}
    Divide(1,INF);
    cout <<ans<<endl;
    return 0;
 }