#include <cstdio>
#include <algorithm>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
const int N=(int)1e5+5;
int n,L,W;
ll ans;

struct node;
struct edge{
	node *ed;
	edge *next;
	int w;
} E[N<<1],*newE=E;
struct node{
	edge *son;
	bool done,vis;
	int size,dl,dw;
} V[N];

void dfs1(node *u,node *fa){
	u->size=1;
	u->dl=u->dw=0;
	u->vis=false;
	for(edge *e=u->son;e;e=e->next) if(!e->ed->done&&e->ed!=fa){
		dfs1(e->ed,u);
		u->size+=e->ed->size;
	}
}

int head,tail;
node *seq[N];
pii ord[N];

void bfs(node *u){
	head=tail=0;
	seq[tail++]=u;
	while(head<tail){
		node *u=seq[head++];
		u->vis=true;
		for(edge *e=u->son;e;e=e->next) if(!e->ed->done&&!e->ed->vis)
			seq[tail++]=e->ed;
	}
}

int t[N];

void add(int x,int d){
	x++;
	for(;x<=tail+1;x+=x&-x) t[x]+=d;
}
int query(int x){
	x++;
	x=min(x,tail+1);
	int s=0;
	for(;x;x-=x&-x) s+=t[x];
	return s;
}

ll calc(){
	ll res=0;
	for(int i=0;i<tail;i++) ord[i]=pii(seq[i]->dw,seq[i]->dl);
	sort(ord,ord+tail);
	for(int i=0;i<tail;i++) add(ord[i].second,1);
	int j=tail-1;
	for(int i=0;i<tail;i++){
		for(;j>=0&&ord[j].first+ord[i].first>W;j--)
			add(ord[j].second,-1);
		if(L-ord[i].second>=0) res+=query(L-ord[i].second);
	}
	for(;j>=0;j--) add(ord[j].second,-1);
	return res;
}

void dfs(node *u){
	dfs1(u,NULL);
	for(;;){
		for(edge *e=u->son;e;e=e->next) if(!e->ed->done){
			node *v=e->ed;
			if(v->size*2>u->size){
				int tmp=v->size;
				v->size=u->size;
				u->size-=tmp;
				u=v;
				goto out;
			}
		}
		break;
		out:;
	}
	bfs(u);
	u->dl=u->dw=0;
	for(int i=0;i<tail;i++){
		node *u=seq[i];
		u->vis=false;
		for(edge *e=u->son;e;e=e->next) if(!e->ed->done&&e->ed->vis){
			node *v=e->ed;
			v->dl=u->dl+1;
			v->dw=u->dw+e->w;
		}
	}
	ans+=calc();
	u->done=true;
	for(edge *e=u->son;e;e=e->next) if(!e->ed->done){
		bfs(e->ed);
		ans-=calc();
	}
	for(edge *e=u->son;e;e=e->next) if(!e->ed->done){
		dfs(e->ed);
	}
}

int main(){
	scanf("%d%d%d",&n,&L,&W);
	for(int u=2;u<=n;u++){
		int v,w; scanf("%d%d",&v,&w);
		*newE=(edge){V+v,V[u].son,w},V[u].son=newE++;
		*newE=(edge){V+u,V[v].son,w},V[v].son=newE++;
	}
	dfs(V+1);
	printf("%I64d\n",(ans-n)/2);
}
