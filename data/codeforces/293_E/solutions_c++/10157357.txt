#include <cstdio>
#include <iostream>
#include <algorithm>
#define N 100010
using namespace std;
struct stu{int l,w;}q[N];
int n,L,W,tot,dis[N],sum[N],num[N*4];
int e,son[N],next[N*2],key[N*2],val[N*2];
int Size,G,size[N],w[N],del[N];
long long ans;
void get_G(int x,int fa){
	size[x]=1,w[x]=0;
	for(int i=son[x];i;i=next[i])
	    if(!del[key[i]] && key[i]!=fa){
	    	get_G(key[i],x);
	    	size[x]+=size[key[i]];
	    	w[x]=max(w[x],size[key[i]]);
	    }
	w[x]=max(w[x],Size-size[x]);
	if(w[x]<w[G])G=x;
}
void dfs(int x,int fa){
	size[x]=1;
	for(int i=son[x];i;i=next[i])
	    if(!del[key[i]] && key[i]!=fa){
	    	dis[key[i]]=dis[x]+1;
	    	sum[key[i]]=sum[x]+val[i];
	    	dfs(key[i],x);
	    	size[x]+=size[key[i]];
	    }
}
void Dfs(int x,int fa){
	q[++tot].l=dis[x],q[tot].w=sum[x];
	for(int i=son[x];i;i=next[i])
	    if(!del[key[i]] && key[i]!=fa)Dfs(key[i],x);
}
bool cmp(stu x,stu y){return x.w<y.w;}
void modify(int k,int l,int r,int pos,int delta){
	if(l==r){num[k]+=delta;return;}
	int mid=(l+r)>>1;
	if(pos<=mid)modify(k*2,l,mid,pos,delta);
	else modify(k*2+1,mid+1,r,pos,delta);
	num[k]=num[k*2]+num[k*2+1];
}
long long count(int k,int l,int r,int left,int right){
	if(left<=l && r<=right)return num[k];
	int res=0,mid=(l+r)>>1;
	if(left<=mid)res+=count(k*2,l,mid,left,right);
	if(right>mid)res+=count(k*2+1,mid+1,r,left,right);
	return res;
}
long long calc(int x){
	long long res=0;
	tot=0,Dfs(x,0);
	sort(q+1,q+tot+1,cmp);
	int l=1,r=tot;
	for(int i=1;i<=tot;++i)modify(1,0,n,q[i].l,1);
	while(l<=r){
		modify(1,0,n,q[l].l,-1);
		while(l<r && q[l].w+q[r].w>W){
			modify(1,0,n,q[r].l,-1);
		    --r;
		}
		if(q[l].l<=L)res+=count(1,0,n,0,L-q[l].l);
		++l;
	}
	return res;
}
void solve(int x){
	w[G=0]=n,get_G(x,0);
	dis[G]=sum[G]=0,dfs(G,0);
	ans+=calc(G),del[G]=1;
	for(int i=son[G];i;i=next[i])
	    if(!del[key[i]])ans-=calc(key[i]);
	for(int i=son[G];i;i=next[i])
	    if(!del[key[i]])Size=size[key[i]],solve(key[i]);
}
int main(){
	scanf("%d%d%d",&n,&L,&W);
	for(int i=2,p,v;i<=n;++i){
		scanf("%d%d",&p,&v);
		next[++e]=son[p],key[son[p]=e]=i,val[e]=v;
		next[++e]=son[i],key[son[i]=e]=p,val[e]=v;
	}
	Size=n,solve(1);
    printf("%I64d",ans);
}
