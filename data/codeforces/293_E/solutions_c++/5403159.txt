#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define N 200010
#define int64 long long
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int l,w;
} c[N],d[N];
int i,j,k,n,m,L,W,x,y,t,h;
int a[N],b[N],next[N],head[N],fa[N],g[N],gg[N],F[N],tr[N];
int64 an;
inline void add(int x,int y,int z) {
	a[++t]=y,b[t]=z,next[t]=head[x],head[x]=t;
	a[++t]=x,b[t]=z,next[t]=head[y],head[y]=t;
}
inline int get(int x) {
	int l,r,v,mi=n,k;
	g[l=r=1]=x; fa[x]=0;
	for (;l<=r;l++)
	for (v=head[g[l]];v;v=next[v])
	if (!F[a[v]]&&a[v]!=fa[g[l]]) g[++r]=a[v],fa[a[v]]=g[l];
	for (l--;l;l--) {
		gg[g[l]]=1;
		for (v=head[g[l]];v;v=next[v])
		if (!F[a[v]]&&a[v]!=fa[g[l]]) gg[g[l]]+=gg[a[v]];
	}
	For(l,1,r) {
		int ma=r-gg[g[l]];
		for (v=head[g[l]];v;v=next[v])
		if (!F[a[v]]&&a[v]!=fa[g[l]]) ma=max(ma,gg[a[v]]);
		if (ma<mi) mi=ma,k=g[l];
	}
	return k;
}
void dfs_(int x,int l,int w) {
	int v;
	d[++h].l=l,d[h].w=w;
	for (v=head[x];v;v=next[v])
	if (!F[a[v]]&&a[v]!=fa[x]) fa[a[v]]=x,dfs_(a[v],l+1,w+b[v]);
}
inline bool cc1(const ww &a,const ww &b) {
	return a.w<b.w;
}
inline void inc(int x,int y) {
	x++;
	for (;x<=n;x+=x&-x) tr[x]+=y;
}
inline int calc(int x) {
	x=max(x+1,0);
	int an=0;
	for (;x;x-=x&-x) an+=tr[x];
	return an;
}
inline int64 cal() {
	int i,j;
	int64 an=0;
	sort(d+1,d+h+1,cc1);
	j=1;
	for (i=h;i;i--) {
		for (;j<=h&&d[j].w+d[i].w<=W;j++) inc(d[j].l,1);
		an+=calc(L-d[i].l);
	}
	for (j--;j;j--) inc(d[j].l,-1);
	return an;
}
inline void work(int x) {
	int i,v;
	int64 s=1;
	c[m=1].l=0,c[1].w=0;
	for (v=head[x];v;v=next[v])
	if (!F[a[v]]) {
		fa[a[v]]=x;
		h=0,dfs_(a[v],1,b[v]);
		s+=cal(); 
		For(i,1,h) c[++m]=d[i];
	}
	h=m; For(i,1,m) d[i]=c[i];
	an+=(cal()-s)/2;
}
void dfs(int x) {
	int root=get(x),v;
	F[root]=1;
	work(root);
	for (v=head[root];v;v=next[v])
	if (!F[a[v]]) dfs(a[v]);
}
int main() {
	//freopen("293e.in","r",stdin);
	scanf("%d%d%d",&n,&L,&W); L=min(L,n-1);
	For(i,2,n) {
		scanf("%d%d",&x,&y);
		add(i,x,y);
	}
	dfs(1);
	printf("%I64d\n",an);
	//for(;;);
	return 0;
}
