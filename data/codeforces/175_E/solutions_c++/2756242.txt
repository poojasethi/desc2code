#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <ctime>
using namespace std;

const int maxn = 1001;

int num;
int n1,n2,n3,n;
int r1,r2,r3;
double d1,d2,d3;
int c1,c2;
double ans;
double B[maxn];
int A[maxn],C[maxn],pos[maxn];

void ins(double x,int y){B[++num] = x,C[num] = y;}
int cmp(int a,int b){return B[a] < B[b];}

void check()
{
	int i,j;
	double sum1 = 0,res = 0;
	int sum2 = 1;
	num = 0;

	if(n%2==0)
	{
		i = A[1]  +A[2]*10;
		j = A[n-1]+A[n]*10;
		if(i > j) return;
	}
  
	for (i = 1; i <= n; ++i)
		if (A[i] == 1) ins((i-1)/2-d1,1),ins((i-1)/2+d1,-1);
		else if (A[i] == 2) ins((i-1)/2-d2,2),ins((i-1)/2+d2,-2);
		else ins((i-1)/2-d3,3),ins((i-1)/2+d3,-3);
	for (i = 1; i <= num; ++i) pos[i] = i;
	sort(pos+1,pos+num+1,cmp);
	for (i = 1; i < num; ++i)
	{
		if (abs(C[pos[i]]) == 1) sum1 += (C[pos[i]] > 0 ? 1:-1)*c1;
		else if (abs(C[pos[i]]) == 2) sum1 += (C[pos[i]] > 0 ? 1:-1)*c2;
		else sum2 += (C[pos[i]] > 0 ? 1:-1);
		res += (B[pos[i+1]]-B[pos[i]])*sum1*sum2;
	}
	ans = max(ans,res);
}

void dfs(int now)
{
	if (now == n+1) check();
	if (n1)
	{
		A[now] = 1;	n1--;
		if (now % 2 == 1 || A[now] >= A[now-1]) dfs(now+1);
		n1++;
	}
	if (n2)
	{
		A[now] = 2;	n2--;
		if (now % 2 == 1 || A[now] >= A[now-1]) dfs(now+1);
		n2++;
	}
	if (n3)
	{
		A[now] = 3;	n3--;
		if (now % 2 == 1 || A[now] >= A[now-1]) dfs(now+1);
		n3++;
	}
}

int main()
{

	scanf("%d %d %d",&n1,&n2,&n3);
	scanf("%d %d %d",&r1,&r2,&r3);
	d1 = sqrt(r1*r1-1);
	d2 = sqrt(r2*r2-1);
	d3 = sqrt(r3*r3-1);
	scanf("%d %d",&c1,&c2);
	n = n1+n2+n3;
	dfs(1);

	printf("%.8lf",ans);
	

	return 0;
}
