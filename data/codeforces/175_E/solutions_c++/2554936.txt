//program 175-E

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>

using namespace std;

int N0,N1,N2,MaxLen;
double R0,R1,R2,D0,D1,Ans;
int A[20];

double Calc()
{
  double W0[20],W1[20];
  for(int i=0;i<MaxLen;i++)
    {
      W0[i]=R0*2*D0;
      W1[i]=R1*2*D1;
      for(int j=0;j<MaxLen;j++)
        {
          double L=max(i-R0,j-R2);
          double R=min(i+R0,j+R2);
          W0[i]+=A[j]*max(R-L,0.0)*D0;
        }
      for(int j=0;j<MaxLen;j++)
        {
          double L=max(i-R1,j-R2);
          double R=min(i+R1,j+R2);
          W1[i]+=A[j]*max(R-L,0.0)*D1;
        }
    }
  static double DP[20][21][21];
  memset(DP,0,sizeof(DP));
  for(int i=0;i<MaxLen;i++)
    for(int j=0;j<=N0;j++)
      for(int k=0;k<=N1;k++)
        for(int _j=0;_j<=2;_j++)
          for(int _k=0;_k<=2;_k++)
            if(j>=_j&&k>=_k&&_j+_k+A[i]<=2)
              DP[i+1][j][k]=max(DP[i+1][j][k],DP[i][j-_j][k-_k]+_j*W0[i]+_k*W1[i]);
  return DP[MaxLen][N0][N1];
}

void DFS(int Depth,int Current)
{
  if(Depth==MaxLen)
    {
      if(!Current)Ans=max(Ans,Calc());
      return;
    }
  for(A[Depth]=0;A[Depth]<=2;A[Depth]++)
    if(Current>=A[Depth])
      DFS(Depth+1,Current-A[Depth]);
}

int main()
{
  scanf("%d%d%d%lf%lf%lf%lf%lf",&N0,&N1,&N2,&R0,&R1,&R2,&D0,&D1);
  R0=sqrt(R0*R0-1);R1=sqrt(R1*R1-1);R2=sqrt(R2*R2-1);
  MaxLen=(N0+N1+N2)/2+1;
  Ans=0;DFS(0,N2);
  printf("%0.10lf\n",Ans);
  return 0;
}
