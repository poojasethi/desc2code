
#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <functional>
#include <iomanip>

using namespace std;

const int maxn = 21;
int n, nf, ne, ns, rf, re, rs, df, de;
bool bf[maxn];
double rrf, rre, rrs, result;

double build_tf(int pos) {
	pos = (pos + 1) / 2;
	double l = pos - rrf, r = pos + rrf, res = 2 * rrf * df;
	for (int i = 1; i <= n; ++i) {
		if (bf[i]) {
			double ll = (i + 1) / 2 - rrs, rr = (i + 1) / 2 + rrs;
			ll = max(ll, l), rr = min(rr, r);
			if (rr > ll) res += (rr - ll) * df;
		}
	}
	return res;
}

double build_te(int pos) {
	pos = (pos + 1) / 2;
	double l = pos - rre, r = pos + rre, res = 2 * rre * de;
	for (int i = 1; i <= n; ++i) {
		if (bf[i]) {
			double ll = (i + 1) / 2 - rrs, rr = (i + 1) / 2 + rrs;
			ll = max(ll, l), rr = min(rr, r);
			if (rr > ll) res += (rr - ll) * de;
		}
	}
	return res;
}

double work() {
	double ans = 0, temp[maxn];
	int cnt = 0;
	for (int i = 1; i <= n; ++i) {
		if (!bf[i]) {
			double v1 = build_tf(i), v2 = build_te(i);
			ans += v1;
			temp[++cnt] = v2 - v1;
		}
	}
	sort(temp + 1, temp + 1 + cnt, greater<double>());
	for (int i = 1; i <= ne; ++i) {
		ans += temp[i];
	}
	return ans;
}

void dfs(int depth, int cnt) {
	if (cnt > ns) return;
	if (depth == n + 1) {
		if (cnt == ns) {
			result = max(result, work());
		}
	} else {
		dfs(depth + 1, cnt);
		bf[depth] = true;
		dfs(depth + 1, cnt + 1);
		bf[depth] = false;
	}
}

int main() {
	cin >> nf >> ne >> ns >> rf >> re >> rs >> df >> de;
	n = nf + ne + ns;
	rrf = sqrt(rf * rf - 1.0), rre = sqrt(re * re - 1.0), rrs = sqrt(rs * rs - 1.0);
	dfs(1, 0);
	cout << setprecision(10) << result << endl;
	return 0;
}
