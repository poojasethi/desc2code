#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
#include<cmath>
using namespace std;
int nf,ne,ns,rf,re,rs,df,de;
int n,top,place[13];
double V[100],ans=0,lf,le,ls;
double cross(double l1,double r1,double l2,double r2){
    if(l2>=r1||l1>=r2) return 0;
    return min(r1,r2)-max(l1,l2);
}

void cal(){
    top=0;
    double res=0;    
    for(int i=0,c=0;i<n&&c<nf+ne;i++)
        if(place[i]<2){
            double t1=lf*df,t2=le*de;
            for(int j=0;j<n;j++)
                if(place[j]){
                    t1+=df*place[j]*cross(j-ls/2,j+ls/2,i-lf/2,i+lf/2);
                    t2+=de*place[j]*cross(j-ls/2,j+ls/2,i-le/2,i+le/2);
                }
            res+=t1,c++,V[top++]=t2-t1;
            if(c==nf+ne) break;
            if(place[i]==1) continue;
            res+=t1,c++,V[top++]=t2-t1;
        }
    sort(V,V+top);
    for(int i=0;i<ne;i++) res+=V[nf+i];
    ans=max(res,ans);
}

void dfs(int p,int left){
    if((n-p)*2<left) return;
    if(p==n){cal();return;}
    for(int i=0;i<=2&&left>=i;i++){place[p]=i;dfs(p+1,left-i);}
}
int main(){
    //freopen("in.in","r",stdin);
    cin>>nf>>ne>>ns>>rf>>re>>rs>>df>>de;
    n=(nf+ne+ns+1)/2;
    lf=2*sqrt(rf*rf-1.0);
    le=2*sqrt(re*re-1.0);
    ls=2*sqrt(rs*rs-1.0);
    dfs(0,ns);
    printf("%.10lf\n",ans);    
    return 0;
}
