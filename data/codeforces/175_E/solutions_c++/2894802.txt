//Codeforces 175E Power Defence
#include<fstream>
#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iomanip>
#include<cmath>
using namespace std;

int n1,n2,n3;
int a1,a2;
double r1,r2,r3;
double ans=0;
int n;
int c[100];
int h;
double i1[100],i2[100];
double dp[30][30];

double its(double l1,double r1,double l2,double r2)
{
    return max(0.0,min(r1,r2)-max(l1,l2));
}

void chk()
{
    for(int i=1;i<=h;i++) i1[i]=2*r1*a1,i2[i]=2*r2*a2;
    for(int i=1;i<=h;i++)
    for(int j=1;j<=h;j++)
    if(c[j]!=0)
    {
        double L1=i-r1,R1=i+r1,L2=j-r3,R2=j+r3;
        i1[i]+=its(L1,R1,L2,R2)*a1*c[j];
        L1=i-r2,R1=i+r2;
        i2[i]+=its(L1,R1,L2,R2)*a2*c[j];
    }
    memset(dp,0,sizeof(dp));
    dp[0][0]=0;
    for(int i=1;i<=h;i++)
    for(int k=1;k<=2-c[i];k++)
    {
        for(int p=n1;p>=0;p--)
        for(int q=n2;q>=0;q--)
        {
            if(dp[p][q]+i1[i]>dp[p+1][q]) dp[p+1][q]=dp[p][q]+i1[i];
            if(dp[p][q]+i2[i]>dp[p][q+1]) dp[p][q+1]=dp[p][q]+i2[i];
        }
    }
    if(dp[n1][n2]>ans) ans=dp[n1][n2];
}

void dfs(int p,int m)
{
    if(p>h)
    {
        if(m==n3) chk();
        return;
    }
    if(m>n3) return;
    c[p]=0;dfs(p+1,m);
    c[p]=1;dfs(p+1,m+1);
    c[p]=2;dfs(p+1,m+2);
}

int main()
{
    cin>>n1>>n2>>n3;
    cin>>r1>>r2>>r3;
    cin>>a1>>a2;
    n=n1+n2+n3;
    h=(n*2+1)/3;
    r1=sqrt(r1*r1-1);
    r2=sqrt(r2*r2-1);
    r3=sqrt(r3*r3-1);
    dfs(1,0);
    cout<<setiosflags(ios::fixed)<<setprecision(10)<<ans<<endl;
    
    return 0;
}
/*
Sample Input1:
1 0 0
10 10 10
100 100
Sample Output1:
1989.97487421

Sample Input2:
1 0 1
10 10 10
100 100
Sample Output2:
3979.94974843
*/
