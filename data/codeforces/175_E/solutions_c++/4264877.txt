#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
#define maxn 40
using namespace std;
int nF,nE,nI,n,F[maxn];
double rF,rE,rI,ans,vF,vE;
void calc(int p,double &x,double &y)
{
	y=1;
	if(p>(n+1)/2)
		y=-1,p=p-(n+1)/2;
	x=p;
}
void check()
{
	static bool use[maxn];
	static double s1[maxn],s2[maxn];
	double sum=0;
	for(int i=1;i<=n;++i)
		use[i]=false,s1[i]=0,s2[i]=0;
	for(int i=1;i<=nI;++i)
		use[F[i]]=true;
	for(int i=1;i<=n;++i)
		if(use[i]==false)
		{
			double px,py,qx,qy,x1,x2,x3,x4;
			calc(i,px,py);
			sum=sum+sqrt(rF*rF-1)*2*vF;
			s1[i]=sqrt(rF*rF-1)*2*vF;
			s2[i]=sqrt(rE*rE-1)*2*vE;
			for(int j=1;j<=nI;++j)
			{
				calc(F[j],qx,qy);
				x1=px-sqrt(rF*rF-1),x2=px+sqrt(rF*rF-1);
				x3=qx-sqrt(rI*rI-1),x4=qx+sqrt(rI*rI-1);
				if(x1>x3)
					swap(x1,x3),swap(x2,x4);
				if(x2>=x3)
				{
					double dis=min(x2,x4)-x3;
					sum=sum+dis*vF;
					s1[i]=s1[i]+dis*vF;
				}
				x1=px-sqrt(rE*rE-1),x2=px+sqrt(rE*rE-1);
				x3=qx-sqrt(rI*rI-1),x4=qx+sqrt(rI*rI-1);
				if(x1>x3)
					swap(x1,x3),swap(x2,x4);
				if(x2>=x3)
				{
					double dis=min(x2,x4)-x3;
					s2[i]=s2[i]+dis*vE;
				}
			}
		}
	for(int i=1;i<=nE;++i)
	{
		int id;
		for(id=1;id<=n&&use[id]==true;id++);
		for(int j=id+1;j<=n;++j)
			if(use[j]==false&&s2[j]-s1[j]>s2[id]-s1[id])
				id=j;
		sum=sum+s2[id]-s1[id],use[id]=true;
	}
	ans=max(ans,sum);
}
void DFS(int p)
{
	if(p>nI)
	{
		check();
		return ;
	}
	for(int i=F[p-1]+1;i<=n;i++)
	{
		F[p]=i;
		DFS(p+1);
	}
}
int main()
{
	cin>>nF>>nE>>nI>>rF>>rE>>rI>>vF>>vE;
	n=nF+nE+nI;
	DFS(1);
	printf("%.10lf\n",ans);
	return 0;
}
 	    	  	 	 	 	   	 	  		