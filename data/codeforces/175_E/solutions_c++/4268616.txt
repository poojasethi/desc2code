#include <set>
#include <queue>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#define LL long long
using namespace std;
const int MAXN=25;
struct Range{
	double l,r;
	Range() {}
	Range(double l,double r):l(l),r(r){}
};
Range F[MAXN],E[MAXN],S[MAXN];
double ans,cha[MAXN];
int nf,ne,ns,de,df,rf,re,rs,N,top;
int v[MAXN],t[MAXN];
double Check()
{
	top=0;
	double tmp=(nf*df*sqrt(rf*rf-1)+ne*de*sqrt(re*re-1))*2;
	for(int i=0;i<N;i++)
		if(!v[i])
		{
			double tmpl=0,tmpr=0;
			for(int j=0;j<ns;j++)
			{
				double getl=max(F[i/2].l,S[t[j]/2].l);
				double getr=min(F[i/2].r,S[t[j]/2].r);
				if(getl<getr)
					tmpl+=(getr-getl)*df;
				getl=max(E[i/2].l,S[t[j]/2].l);
				getr=min(E[i/2].r,S[t[j]/2].r);
				if(getl<getr)
					tmpr+=(getr-getl)*de;
			}
			tmp+=tmpl;
			cha[top++]=tmpr-tmpl;
		}
	sort(cha,cha+top);
	for(int i=nf;i<nf+ne;i++)
		tmp+=cha[i];
	return tmp;
}
void dfs(int x,int y)
{
	if(y==ns)
		ans=max(ans,Check());
	if(x==N)
		return ;
	v[x]=1;
	t[y]=x;
	dfs(x+1,y+1);
	v[x]=0;
	dfs(x+1,y);
}
int main()
{
	scanf("%d%d%d",&nf,&ne,&ns);
	scanf("%d%d%d",&rf,&re,&rs);
	scanf("%d%d",&df,&de);
	N=nf+ne+ns;
	for(int i=0;i<(N+1)/2;i++)
	{
		F[i]=Range(i-sqrt(rf*rf-1),i+sqrt(rf*rf-1));
		E[i]=Range(i-sqrt(re*re-1),i+sqrt(re*re-1));
		S[i]=Range(i-sqrt(rs*rs-1),i+sqrt(rs*rs-1));
	}
	dfs(0,0);
	printf("%.6lf\n",ans);
	return 0;
}
		 		  		 	 	 	   			   	