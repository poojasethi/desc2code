#include <cstdio>
#include <vector>
#include <algorithm>
#include <queue>
#define oo 987654321
int n, q, ST, V[100001], GD[100001], chk[100001], rG[100001] = { 1, 1, };
std::vector<int> G[100001];

void make_parent(void)
{
    std::queue<int> Q;
    Q.push(1); chk[1] = 1;
    while(!Q.empty())
    {
        int parent = Q.front(); Q.pop();
        for(int i = 0 ; i < G[parent].size() ; i++ )
            if( chk[G[parent][i]] == 0 )
                chk[G[parent][i]] = 1, rG[G[parent][i]] = parent, Q.push(G[parent][i]);
    }
}

int f(int v)
{
    if( 1 == ST ) return -1;
    if( std::__gcd(V[ST], V[v]) > 1 ) return v;
    else if( v == 1 ) return -1;
    else return f( rG[v] );
}

int main()
{
    scanf("%d%d",&n,&q);
    for(int i = 1 ; i <= n ; i++ )
        scanf("%d", V+i);
    for(int i = 0 ; i < n-1 ; i++ )
    {
        int a, b;
        scanf("%d%d",&a,&b);
        G[a].push_back(b);
        G[b].push_back(a);
    }
    make_parent();
    while(q--)
    {
        int m, a, b;
        scanf("%d", &m);
        if( m == 1 )
        {
            scanf("%d", &a); ST = a;
            printf("%d\n", f(rG[ST]));
        }
        else
        {
            scanf("%d%d",&a, &b);
            V[a] = b;
        }
    }
}