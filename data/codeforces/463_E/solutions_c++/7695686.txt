#include <iostream>
#include <vector>
using namespace std;
int vals[100001];
int par[100001];
int n,q;
vector< vector<int> > adj(0, vector<int>(0));


void findParents(int p, int o)
{
    par[o]=p;
    for(int j=0;j<adj[o].size();j++)
    {
        if(adj[o][j]!=p)
            findParents(o, adj[o][j]);
    }
}
int gcd(int a, int b)
{
    if(b>a)
    {
        int t = a;
        a = b;
        b = t;
    }
    while(b!=0)
    {
        int r = a%b;
        a = b;
        b = r;
    }
    return a;
}


int findS(int vVal, int on)
{
    if(on==0)
        return -1;

    if(gcd(vVal,vals[on])>1)
        return on;
    else
        return findS(vVal, par[on]);


}
int main()
{
    cin >> n >> q;
    for(int j=1;j<=n;j++)
        cin >> vals[j];
    adj.resize(n+1);

    for(int j=0;j<n-1;j++)
    {
        int x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    findParents(0,1);
    for(int j=0;j<q;j++)
    {
        int t;
        cin >> t;
        if(t==2)
        {
            int n1, n2;
            cin >> n1 >> n2;
            vals[n1]=n2;
        }
        else
        {
            int n1;
            cin >> n1;
            cout << findS(vals[n1],par[n1]) << endl;


        }

    }


}
