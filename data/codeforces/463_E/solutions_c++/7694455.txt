#include <iostream>
#include <vector>
using namespace std;
const int maxn = 100000+10;
vector<int> g[maxn];
int n;
int q;
int values[maxn];
int f[maxn];
void dfs_gentree(int u,int p)
{
    f[u]=p;
    for(vector<int>::iterator it = g[u].begin();it!=g[u].end();++it)
    {
        if(*it!=p)
        {
            dfs_gentree(*it,u);
        }
    }
}
int gcd (int a, int b)
{
    if(b==0)return a;
    else return gcd(b,a%b);
}
int getans(int v)
{
    int ans=-1;
    int target = values[v];
    while(f[v]!=0)
    {
        ans = gcd(values[f[v]],target);
        if(ans > 1) return f[v];
        v = f[v];
    }
    return -1;
}
int main()
{
    cin>>n>>q;
    for(int i=1;i<=n;i++)
    {
        cin>>values[i];
    }
    for(int i=1;i<=n-1;i++)
    {
        int a,b;
        cin>>a>>b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    dfs_gentree(1,0);
    for(int i=1;i<=q;i++)
    {
        int qc;
        cin>>qc;
        if(qc==1)
        {
            int v;
            cin>>v;
            int result = getans(v);
            cout<<result<<endl;
        }
        else{
            int v,w;
            cin>>v>>w;
            values[v]=w;
        }
    }
    return 0;
}
