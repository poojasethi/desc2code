#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
const int MAX = 2000005;
vector<int> adj[MAX], ft[MAX], prime[MAX];
bool p[MAX];
int a[MAX], ans[MAX], d[MAX];
void dfs(int p, int v)
{
	d[v] = d[p] + 1;
	ans[v] = 0;
	for (int i = 0; i < ft[a[v]].size(); i++)
	{
		int pr = ft[a[v]][i];
		if (!prime[pr].empty())
		{
			int val = prime[pr].back();
			if (d[ans[v]] < d[val])
				ans[v] = val;
		}
		prime[pr].push_back(v);
	}
	if (!ans[v])
		ans[v] = -1;
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		if (u != p)
			dfs(v, u);
	}
	for (int i = 0; i < ft[a[v]].size(); i++)
	{
		int pr = ft[a[v]][i];
		prime[pr].pop_back();
	}
}
int main()
{
	ios::sync_with_stdio(false);
	memset(p, true, sizeof(p));
	p[0] = p[1] = false;
	for (int i = 2; i < MAX; i++)
		if (p[i])
		{
			ft[i].push_back(i);
			for (int j = 2 * i; j < MAX; j += i)
			{
				p[j] = false;
				ft[j].push_back(i);
			}
		}
	int n, q;
	cin >> n >> q;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(0, 1);
	while (q--)
	{
		int t;
		cin >> t;
		if (t == 1)
		{
			int v;
			cin >> v;
			cout << ans[v] << endl;
		}
		else
		{
			int v, w;
			cin >> v >> w;
			a[v] = w;
			dfs(0, 1);
		}
	}
	return 0;
}
