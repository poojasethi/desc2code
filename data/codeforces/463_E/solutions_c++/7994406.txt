#include <iostream>
#include <vector>

#define maxn 100005

using namespace std;

int parent[maxn];

vector<int> edge[maxn];
int value[maxn];
int n, q;

using namespace std;

void dfs(int source, bool *visited) {
	
	visited[source] = true;

	for (vector<int>::iterator it = edge[source].begin(); 
			it != edge[source].end(); it++) {
		if (!visited[*it]) {
			parent[*it] = source;
			dfs(*it, visited);
		}
	}
}

bool visited[maxn];

void convert() {
	parent[1] = 0;

	dfs(1, visited);

}


int gcd(int a, int b) {
	if (b == 0)
		return a;

	return gcd(b, a % b);
}


int find_gcd(int v) {

	int current = parent[v];

	while (current) {
		int g = gcd(value[current], value[v]);

		if (g > 1)
			return current;

		else 
			current = parent[current];
	}

	return -1;
}


int main() {
	
	cin >> n >> q;
	
	int i;
	for (i = 1; i < n+1; i++) 
		cin >> value[i];

	for (i = 0; i < n-1; i++) {
		int u, v;
		cin >> u >> v;

		edge[u].push_back(v);
		edge[v].push_back(u);

	}

	convert();

	for (i = 0; i < q; i++) {
		int kind;
		cin >> kind;

		if (kind == 1) {
			int v;
			cin >> v;
			cout << find_gcd(v) << endl;
		} else {
			int v, w;
			cin >> v >> w;
			value[v] = w;
		}
	}

	return 0;
}



	
