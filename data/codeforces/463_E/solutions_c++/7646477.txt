#include <vector>
#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;
const int NMAX  = 100004;
vector < int > Tree[NMAX];
int Father[NMAX], value[NMAX];
inline void DFS(const int node,const int father){
    Father[node] = father;
    for(vector < int > ::iterator it = Tree[node].begin(); it != Tree[node].end(); ++it)
        if(*it!=father)
            DFS(*it,node);
}

int main(){
    #ifndef ONLINE_JUDGE
        freopen("date.in","r",stdin);
        freopen("date.ok","w",stdout);
    #endif
    cin.sync_with_stdio(false);
    int n, m;
    cin >> n >> m;
    for(int i = 1;i <= n; ++i)
        cin >> value[i];
    for(int i = 1;i < n; ++i){
        int x, y;
        cin >> x >> y;
        Tree[x].push_back(y);
        Tree[y].push_back(x);
    }
    DFS(1,-1);
    while(m--)
    {
        int operation, x;
        cin >> operation >> x;
        if(operation==1){
            int y = Father[x];
            while(y > 0 && __gcd(value[y],value[x])==1)
                y = Father[y];
            cout<<(y?y:-1)<<"\n";
        }
        else{
            int y;
            cin >> y;
            value[x] = y;
        }
    }
    return 0;
}
