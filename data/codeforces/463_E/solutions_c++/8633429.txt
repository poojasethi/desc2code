#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int maxn = 100 * 1000 + 100;

int n, q;
int val[maxn], par[maxn];
vector<int> adj[maxn];
bool mark[maxn];
vector<int> ans;

int gcd(int a, int b);
void dfs(int v);

int main() {
	ios :: sync_with_stdio(false);
	cin.tie(0);

	cin >> n >> q;
	for (int i = 0; i < n; i++) 
		cin >> val[i];
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		u--, v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	par[0] = -1;
	dfs(0);
	for (int i = 0; i < q; i++) {
		int t;
		cin >> t;
		if (t == 1) {
			int v;
			cin >> v;
			v--;
			int u = par[v];
			while (u != -1) {
				if (gcd(val[v], val[u]) > 1) {
					ans.push_back(u + 1);
					break;
				}
				u = par[u];
			}
			if (u == -1)
				ans.push_back(u);
		}
		else {
			int v, w;
			cin >> v >> w;
			v--;
			val[v] = w;
		}
	}

	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << '\n';

	return 0;
}

int gcd(int a, int b) {
	if (a < b)
		swap(a, b);
	if (!(a % b))
		return b;
	return gcd(b, a % b);
}

void dfs(int v) {
	mark[v] = true;
	for (int i = 0; i < adj[v].size(); i++) {
		int u = adj[v][i];
		if (!mark[u]) {
			par[u] = v;
			dfs(u);
		}
	}
}
