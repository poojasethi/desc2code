#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int MAX_N = 100 + 20 , INF = 1000000LL * 1000;
const int MAX_M = 20 + 3 , MAX_MA = (1<<20) + 20;
int a[MAX_N] , team[MAX_M];
char move[MAX_M];
int dp[MAX_MA];
int n , m;



int main()
{
	ios::sync_with_stdio(false);
	
	cin >> n;
	for ( int i = 0 ; i < n ; i++ ) cin >> a[i];
	sort( a ,a+n ,greater<int> () );
	cin >> m;
	for ( int i = 0 ; i < m ; i++ ) cin >> move[i] >> team[i];
	if ( m < n ) n = m;
	reverse( a,a+n );
	for ( int mask = (1<<n) - 2 ; mask >= 0 ; mask-- ){
		int d = __builtin_popcount(mask);
		if ( team[d] == 1 ) dp[mask] = -INF;
		else dp[mask] = INF;
		for ( int i = 0 ; i < n ; i++ )
			if ( !( mask & (1<<i) ) ){
				if ( move[d] == 'b' ){
					if ( team[d] == 1 ) dp[mask] = max( dp[mask] , dp[mask|(1<<i)] );
					else dp[mask] = min( dp[mask] , dp[mask|(1<<i)] );
				} else{
					if ( team[d] == 1 ) dp[mask] = max( dp[mask] , dp[mask|(1<<i)] + a[i] );
					else dp[mask] = min( dp[mask] , dp[mask|(1<<i)] - a[i] );
				}
			}
	}
	cout << dp[0] << endl;
	return 0;
}
