#include <iostream>
#include <algorithm>
using namespace std;

const int NMAX = 110, MMAX = 25, INF = 0x3f3f3f3f;

int N, M, V[NMAX], Best[1 << 20];
char Action[MMAX];
int Team[MMAX];

int Go(int Step, int Conf)
{
    if(Step == M) return 0;
    if(Best[Conf] != INF) return Best[Conf];

    if(Team[Step] == 1) Best[Conf] = -INF;
    else Best[Conf] = INF;

    for(int i = 0; i < M; ++ i)
        if(!(Conf & (1 << i)))
        {
            int AddVal = V[i];
            if(Action[Step] == 'b') AddVal = 0;
            if(Team[Step] == 1) Best[Conf] = max(Best[Conf], Go(Step + 1, Conf ^ (1 << i)) + AddVal);
            else Best[Conf] = min(Best[Conf], Go(Step + 1, Conf ^ (1 << i)) - AddVal);
        }

    return Best[Conf];
}

int main()
{
    cin >> N;
    for(int i = 0; i < N; ++ i)
        cin >> V[i];
    cin >> M;
    for(int i = 0; i < M; ++ i)
        cin >> Action[i] >> Team[i];

    sort(V, V + N);
    reverse(V, V + N);

    for(int i = 0; i < (1 << M); ++ i)
        Best[i] = INF;

    cout << Go(0, 0);
}
