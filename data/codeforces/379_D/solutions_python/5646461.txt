import timeit
para = raw_input()
start = timeit.default_timer()
para_l = [int(i) for i in para.split()]
cur = [[1,0,0,0,0,1],[0,1,0,0,0,2]]
k = 3
x = para_l[1]
n = para_l[2]
m = para_l[3]
a = [0,1]
sol = []
S1 = ''
S2 = ''
def f(l1, l2, k):
    tmp = 0
    for i in range(k):
        tmp += l1[i] * l2[i]
    return tmp

def solve(result):
    test = [[i,j,k] for i in a for j in a for k in a]
    for i in test:
        if f(i, result[2:], 3) < x:
            s1 = 0
            while s1 <= n//2 and s1 * result[0] <= x:
                s2 = 0
                while s2 <= m//2 and s2 * result[1] <= x:
                    tmp_l = [s1, s2]
                    tmp_l.extend(i)
                    #print tmp_l
                    tmp = f(tmp_l, result, 5)
                    #print tmp
                    if tmp == x:
                        sol.append(tmp_l)
                        #print tmp, tmp_l
                        break
                    #print 's2', s2
                    s2 += 1
                #print 's1', s1    
                s1 += 1
        elif f(i, result[2:], 3) == x:
            tmp_l = [0, 0]
            tmp_l.extend(i)
            sol.append(tmp_l)
            
def eva(sol):
    global S1, S2
    flag = False 
    #print sol
    while flag == False:
        
        S1 = '' + 'AC' * sol[0][0]
        S2 = '' + 'AC' * sol[0][1]
        a = sol[0][0]
        b = sol[0][1]
        #print a, b
        obj = sol[0][2:]
        for item in obj:
            if item != 0:
                item = 1
        flag = False
        #print obj
        if obj == [0, 0, 0]:
            if len(S1) != n:
                S1 = S1 + 'A' * (n-len(S1))
            if len(S2) != m:
                S2 = S2 + 'A' * (m-len(S2))
            if (S1 + S2).count('AC') == a + b and (S2 + S1).count('AC') == a + b and (S2 + S2).count('AC') == b + b: 
                flag = True
            else:
                if n == 1:
                    S1 = 'B'
                if m == 1:
                    S2 = 'B'
                flag = True
        elif obj == [0,0,1]:
            if len(S2) >= m-1:
                pass
            else:
                if len(S1) != n:
                    S1 = S1 + 'B' * (n-len(S1)-1)
                    S1 = 'A' + S1
                S2 = 'C' + S2 + 'A' * (m-len(S2)-1)
                if (S1 + S2).count('AC') == a + b and (S2 + S1).count('AC') == a + b and (S2 + S2).count('AC') >= b + b + 1: 
                    flag = True
                else:
                    if n == 1:
                        S1 = 'B'
                    if m == 1:
                        S2 = 'B'
                    flag = True
        elif obj == [0,1,0]:
            if len(S1) == n:
                pass
            elif len(S2) == m:
                pass
            else:
                S1 = 'C' * (n-len(S1)) + S1
                S2 = S2 + 'A' * (m-len(S2))
                if (S1 + S2).count('AC') == a + b and (S2 + S1).count('AC') >= a + b + 1 and (S2 + S2).count('AC') == b + b: 
                    flag = True
                else:
                    if n == 1:
                        S1 = 'B'
                    if m == 1:
                        S2 = 'B'
                    flag = True
        elif obj == [0,1,1]:
            if len(S1) == n:
                pass
            elif len(S2) >= m-1:
                pass
            else:
                S1 = 'C' * (n-len(S1)) + S1
                S2 = 'C' + S2 + 'A' * (m-len(S2)-1)
                if (S1 + S2).count('AC') == a + b and (S2 + S1).count('AC') >= a + b + 1 and (S2 + S2).count('AC') >= b + b + 1: 
                    flag = True
                else:
                    if n == 1:
                        S1 = 'B'
                    if m == 1:
                        S2 = 'B'
                    flag = True
        elif obj == [1,0,0]:
            if len(S1) == n:
                pass
            elif len(S2) == m:
                pass
            else:
                S1 = S1 + 'A' * (n-len(S1))
                S2 = 'C' * (m-len(S2)) + S2
                if (S1 + S2).count('AC') >= a + b + 1 and (S2 + S1).count('AC') == a + b and (S2 + S2).count('AC') == b + b: 
                    flag = True
                else:
                    if n == 1:
                        S1 = 'B'
                    if m == 1:
                        S2 = 'B'
                    flag = True
        elif obj == [1,0,1]:
            if len(S1) == n:
                pass
            elif len(S2) >= m-1:
                pass
            else:
                S1 = S1 + 'A' * (n-len(S1))
                S2 = 'C' + S2 + 'A' * (m-len(S2)-1)
                if (S1 + S2).count('AC') >= a + b + 1 and (S2 + S1).count('AC') == a + b and (S2 + S2).count('AC') >= b + b + 1: 
                    flag = True
                else:
                    if n == 1:
                        S1 = 'B'
                    if m == 1:
                        S2 = 'B'
                    flag = True
        elif obj == [1,1,0]:
            pass
        elif obj == [1,1,1]:
            if len(S1) >= n-1:
                pass
            elif len(S2) >= m-1:
                pass
            else:
                S1 = 'C' + S1 + 'A' * (n-len(S1)-1)
                S2 = 'C' + S2 + 'A' * (m-len(S2)-1)
                if (S1 + S2).count('AC') >= a + b + 1 and (S2 + S1).count('AC') >= a + b + 1 and (S2 + S2).count('AC') >= b + b + 1: 
                    flag = True
                else:
                    if n == 1:
                        S1 = 'B'
                    if m == 1:
                        S2 = 'B'
                    flag = True
        if len(sol) > 1:
            sol.pop(0)
        else:
            break
        
            
    if flag:
        print S1
        print S2
    else:
        print 'Happy new year!'

while k <= para_l[0]:
    tmpl = [i + j for (i,j) in zip(cur[0], cur[1])]
    tmpl[-1] = k
    cur.append(tmpl)
    if k == 3:
        cur[2][2] += 1
    if k >= 4:
        if k % 2 == 0:
            cur[2][3] += 1
        else:
            cur[2][4] += 1
    cur.pop(0)
    k += 1
    
result = cur[1]
result.pop(-1)
#print result

if x == 0:
    S1 = 'A' * n
    S2 = 'A' * m
    print S1
    print S2
else:
    solve(result)
    #print sol
    if len(sol) == 0:
        print 'Happy new year!'
    else:
        eva(sol)
    
stop = timeit.default_timer()
#print 'runtime:', stop - start
    
    
