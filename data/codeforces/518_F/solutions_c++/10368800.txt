#include<iostream>
using namespace std;

const int maxn = 3000;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

int n, m;
long long J;
int a[maxn][maxn][4];
string s[maxn];

int inboard(int x, int y){
	return x>=0 && y>=0 && x<n && y<m;
}	

void init(){
	for (int k=0 ; k<4 ; k++)
	for (int i=0 ; i<n ; i++)
	for (int j=0 ; j<m ; j++){
		a[i][j][k] |= (s[i][j]=='#');
		int ni = i + dx[k];
		int nj = j + dy[k];
		if (!inboard(ni, nj)) continue;
		a[i][j][k] |= a[ni][nj][k];
	}
	for (int k=0 ; k<4 ; k++)
	for (int i=n-1 ; i>=0 ; i--)
	for (int j=m-1 ; j>=0 ; j--){
		a[i][j][k] |= (s[i][j]=='#');
		int ni = i + dx[k];
		int nj = j + dy[k];
		if (!inboard(ni, nj)) continue;
		a[i][j][k] |= a[ni][nj][k];
	}
}

int main(){
	ios::sync_with_stdio(0);
	cin >> n >> m;
	for (int i=0 ; i<n ; i++)
		cin >> s[i];
	init();	
	for (int i=1 ; i<n-1 ; i++)
		J += (a[i][0][1] == 0);
	for (int j=1 ; j<m-1 ; j++)
		J += (a[0][j][2] == 0);
	
	for (int i=1 ; i<n-1 ; i++)
	for (int j=1 ; j<m-1 ; j++){
		J += ((a[i][j][1] | a[i][j][0]) == 0);
		J += ((a[i][j][1] | a[i][j][2]) == 0);
		J += ((a[i][j][3] | a[i][j][0]) == 0);
		J += ((a[i][j][3] | a[i][j][2]) == 0);
	}
	int t1 = 0, t2 = 0;
	for (int i=1 ; i<n-1 ; i++){
		t1 = t2 = 0;
	for (int j=1 ; j<m-1 ; j++){
		if (s[i][j]=='#'){
			t1 = t2 = 0;
			continue;
		}
		if (a[i][j][2]==0) J += t1 + t2 - (j!=1 && a[i][j-1][2]==0);
		if (a[i][j][0]==0) J += t1 + t2 - (j!=1 && a[i][j-1][0]==0);
		t1 += (a[i][j][0]==0);	
		t2 += (a[i][j][2]==0);
	}
	}
	for (int j=1 ; j<m-1 ; j++){
		t1 = t2 = 0;
	for (int i=1 ; i<n-1 ; i++){
		if (s[i][j]=='#'){
			t1 = t2 = 0;
			continue;
		}
		if (a[i][j][3]==0) J += t1 + t2 - ((i!=(n-2)) && a[i+1][j][3]==0);
		if (a[i][j][1]==0) J += t1 + t2 - ((i!=(n-2)) && a[i+1][j][1]==0);
		t1 += (a[i][j][1]==0);
		t2 += (a[i][j][3]==0);
	}
	}
	cout << J << endl;
}
