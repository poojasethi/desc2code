#include <iostream>
#include <cstring>

using namespace std;

const int MAXN = 2010;

int n, m;

char a[MAXN][MAXN];

char tmpC[MAXN][MAXN];
void rotate() {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			tmpC[j][n - 1 - i] = a[i][j];
	swap(n, m);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			a[i][j] = tmpC[i][j];
}

bool reachBot[MAXN][MAXN], reachEdge[2][MAXN][MAXN];

long long solve(bool countRow) {
	memset(reachBot, 0, sizeof reachBot);
	memset(reachEdge, 0, sizeof reachEdge);
/*	cerr << "table " << endl;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++)
			cerr << a[i][j];
		cerr << endl;
	}
	cerr << " end of table " << endl;*/
	long long ans = 0;
//	cerr << "reaching bot " << endl;
	for (int j = 0; j < m; j++) {
		for (int i = n - 1; i >= 0; i--) {
			reachBot[i][j] = (i == n - 1) || reachBot[i + 1][j];
			if (a[i][j] == '#')
				reachBot[i][j] = false;
//			cerr << reachBot[i][j] << " ";
		}
//		cerr << endl;
	}
//	cerr << "	end reaching bot " << endl;
	for (int i = 1; i < n - 1; i++) {
		bool bad = false;
		for (int j = 0; j < m; j++) {
			if (a[i][j] == '#')
				bad = true;
			if (j > 0 && j < m - 1 && !bad && reachBot[i][j]) {
//				cerr << i << " " << j << " good for one turn " << endl;
				ans++;
			}
			reachEdge[0][i][j] = !bad;
		}
		if (!bad && countRow) {
//			cerr << "row add " << endl;
			ans++;
		}
	}
	for (int j = 1; j < m - 1; j++) {
		int cnt = 0;
		for (int i = 1; i < n - 1; i++) {
			if (a[i][j] == '#') {
				cnt = 0;
				continue;
			}
			if (reachEdge[0][i][j]) {
//				cerr << i << " " << j << " cnt 2turn same " << cnt << endl;
				if (i > 1 && reachEdge[0][i - 1][j]) {
//					cerr << " one was chert " << endl;
					ans--;
				}
				ans += cnt;
				cnt++;
			}
		}
	}
	for (int i = 1; i < n - 1; i++)
		for (int j = m - 1; j >= 0; j--) {
			reachEdge[1][i][j] = (j == m - 1) || reachEdge[1][i][j + 1];
			if (a[i][j] == '#')
				reachEdge[1][i][j] = false;
		}
	for (int j = 1; j < m - 1; j++) {
		int cnt = 0;
		for (int i = countRow ? n - 2 : 1; (countRow ? i > 0 : i < n - 1); (countRow ? i-- : i++)) {
			if (a[i][j] == '#') {
				cnt = 0;
				continue;
			}
			if (reachEdge[0][i][j]) {
				ans += cnt;
//				cerr << i << " " << j << " cnt 2turn different " << cnt << endl;
			}
			if (reachEdge[1][i][j])
				cnt++;
		}
	}
//	cerr << ans << endl;
	return ans;
}

int main() {
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> a[i][j];
	a[0][0] = a[n - 1][0] = a[0][m - 1] = a[n - 1][m - 1] = '#';
	long long ans = 0;
	for (int o = 0; o < 4; o++) {
		ans += solve(o / 2);
		rotate();
	}
	cout << ans << endl;
	return 0;
}
