#include <bits/stdc++.h> 

#define FOR(i, a, b) for(int i = a; i < b; ++i) 
#define FORR(i, n) FOR(i, 0, n) 
#define sz(v) int((v).size()) 
#define pb push_back 
#define all(e) (e).begin(), (e).end()
#define LSOne(S) (S & (-S)) // bit menos significativo

using namespace std;

#define ii pair<int,int>
#define ll long long

const int MOD = 1000000007;
const int MAXN = 2003;

char mat[MAXN][MAXN];

ll pd[4][3][MAXN][MAXN];
int v1[] = {0, 1, 0, -1};
int v2[] = {-1, 0, 1, 0};
int n, m;

bool valid (int a, int b) {
	if (a<0||a>=n) return 0;
	if (b<0||b>=m) return 0;
	if (mat[a][b]=='#') return 0;
	if (a==0) if (b==0||b==m-1) return 0;
	if (a==n-1) if (b==0||b==m-1) return 0;
	return 1;
}

bool end (int a, int b) {
	if (a==0) return 1;
	if (b==0) return 1;
	if (b==m-1) return 1;
	if (a==n-1) return 1;
	return 0;
}

ll solve (int d, int t, int a, int b) {
	if (t>2) return 0;
	if (!valid(a,b)) return 0;
	if (end(a,b)) return 1;
	if (pd[d][t][a][b]==-1) {
		ll ans = 0;
		int na, nb, nd;

		//Case 1:
		nd = (3+d)%4;
		na = a+v1[nd], nb = b+v2[nd];
		if (valid(na, nb) && t<2) {
			if (end(na, nb)) {
				ans++;
			} else {
				ans += solve (nd, t+1, na+v1[nd], nb+v2[nd]);
				ans += solve (d, t+2, na+v1[d], nb+v2[d]);
			}
		}

		//Case 2:		
		ans += solve (d, t, a+v1[d], b+v2[d]);

		//Case 3:
		nd = (1+d)%4;
		na = a+v1[nd], nb = b+v2[nd];
		if (valid(na, nb) && t<2) {
			if (end(na, nb)) {
				ans++;
			} else {
				ans += solve (nd, t+1, na+v1[nd], nb+v2[nd]);
				ans += solve (d, t+2, na+v1[d], nb+v2[d]);
			}
		}

		pd[d][t][a][b] = ans;
	}
	return pd[d][t][a][b];
}

int main (){
	while (scanf (" %d %d", &n, &m)!=EOF) {
		FORR (i, n) scanf ("%s", mat[i]);
		ll res = 0;
		memset (pd, -1, sizeof pd);
		FOR (i, 1, m-1) if (valid(0,i))	res += solve (1, 0, 1, i);
		FOR (i, 1, m-1) if (valid(n-1,i)) res += solve (3, 0, n-2, i);
		FOR (i, 1, n-1) if (valid(i,0)) res += solve (2, 0, i, 1);
		FOR (i, 1, n-1) if (valid(i,m-1)) res += solve (0, 0, i, m-2);
		cout << res/2 << endl; 
	}
}