#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>
#include <cstring>

using namespace std;


int dir[4][2] = { {1,0}, {0,1}, {-1,0}, {0,-1} };

typedef long long lli;

lli mem[2010][2010][4][3];

int N,M;

char A[2010][2010];

inline int border(int i, int j){
	return (!i || !j || i >= M-1 || j >= N-1);
}

lli ways(int i, int j, int d, int t){

	if(t < 0) return 0;
	if(A[i][j] == '#') return 0;
	if(border(i,j)) return 1;
	lli &val = mem[i][j][d][t];
	if(val >= 0) return val;

	int ti,tj,k;


	val = ways(i+dir[d][0],j+dir[d][1],d,t);
	for(k = -1; k < 2; ++k){
		if(!k) continue;
		int k1 = (k+d+4)&3;
		ti = i+dir[k1][0], tj = j+dir[k1][1];
		val += ways(ti,tj,k1,t-1);
		int k2 = (k1+k+4)&3;
		if(!border(ti,tj) && A[ti][tj] != '#') val -= ways(ti+dir[k2][0],tj+dir[k2][1],k2,t-2);
	}

	return val;
}

int main(){

	int i,j;
	lli tot;

	memset(mem,-1,sizeof(mem));

	scanf("%d%d",&M,&N);

	for(i =0 ; i < M; ++i) scanf("%s",A[i]);

	memset(mem,-1,sizeof(mem));

	tot =0;
	for(j = 1; j < N-1; ++j){
		if(A[0][j] != '#') tot += ways(1,j,0,2);
		if(A[M-1][j] != '#') tot += ways(M-2,j,2,2);
	}


	for(i = 1; i < M-1; ++i){
		if(A[i][0] != '#') 	tot += ways(i,1,1,2);
		if(A[i][N-1] != '#') 	tot += ways(i,N-2,3,2);
	}

	printf("%lld\n",tot/2);

	return 0;
}

