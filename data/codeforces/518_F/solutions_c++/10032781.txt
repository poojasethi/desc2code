#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long LL;
typedef pair<int,int> PII;
const int L_N=2000+10;
int N,M,n,m,f[2][L_N];
bool up[L_N][L_N],dow[L_N][L_N];
char girds[L_N][L_N],tmp[L_N][L_N];
void sol_1(int i,int l,int r,LL & ans1){
    bool ok1=r==m && girds[i][r+1]=='.';
    for(int j=l;j<=r;j++){
        ans1+=ok1 && up[i][j];
    }
}
void sol_2_4(int i,int l,int r,LL & ans2,LL & ans4){
    f[0][l]=up[i][l], f[1][l]=dow[i][l];
    for(int j=l+1;j<=r;j++){
        f[0][j]=up[i][j]+f[0][j-1];
        f[1][j]=dow[i][j]+f[1][j-1];
        if(up[i][j]){
            if(j>l+1) ans2+=f[0][j-2];
            ans4+=f[1][j-1];
        }
        if(dow[i][j]){
            ans4+=f[0][j-1];
        }
    }
}
void solve(LL & ans1,LL & ans2,LL & ans3,LL & ans4){
    n=N-2, m=M-2;
    for(int j=1;j<=m;j++){
        up[0][j] = girds[0][j]=='.';
        for(int i=1;i<=n+1;i++){
            if(girds[i][j]=='.') up[i][j]=up[i-1][j];
            else up[i][j]=false;
        }
        
        dow[n+1][j] = girds[n+1][j]=='.';
        for(int i=n;i>=0;i--){
            if(girds[i][j]=='.') dow[i][j]=dow[i+1][j];
            else dow[i][j]=false;
        }
    }
    
    for(int i=1;i<=n;i++){
        int l=1,r=1;
        while(l<=m){
            while(girds[i][l]!='.' && l<=m) l++;
            r=l;
            while(girds[i][r]=='.' && r<=m) r++;
            r--;
            if(l>m) break;
            
            sol_1(i,l,r,ans1);
            sol_2_4(i,l,r,ans2,ans4);
            l=r+1;
        }
    }
    for(int j=1;j<=m;j++)
        ans3+=up[n+1][j] && dow[0][j];
}
void rotate(){
    for(int i=0;i<N;i++) for(int j=0;j<M;j++){
        tmp[M-j-1][i]=girds[i][j];
    }
    swap(N,M);
    for(int i=0;i<N;i++) for(int j=0;j<M;j++){
        girds[i][j]=tmp[i][j];
    }
}
int main(){
    //freopen("in.txt","r",stdin);
    scanf("%d %d",&N,&M);
    for(int i=0;i<N;i++) scanf("%s",&girds[i]);
    LL ans1=0, ans2=0, ans3=0, ans4=0;
    for(int i=0;i<4;i++){
        solve(ans1,ans2,ans3,ans4);
        if(i<3) rotate();
    }
    LL ans=ans1+ans2+ans3/2+ans4/2;
    //printf("ans1:%I64d ans2:%I64d ans3:%I64d ans4:%I64d\n",ans1,ans2,ans3,ans4);
    printf("%I64d\n",ans);
    return 0;
}
