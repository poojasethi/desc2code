//be naame khodaa

#include <bits/stdc++.h>

typedef long long ll;

using namespace std;

const int MAX = 2005;

int _left[MAX][MAX], _right[MAX][MAX], _up[MAX][MAX], _down[MAX][MAX];

void fillArray(int n, int m, char a[MAX][MAX])
{
	for (int i = 0; i < n; i++)
	{
		bool empty = true;
		for (int j = 0; j < m; j++)
		{
			if (a[i][j] == '#')
				empty = false;
			_left[i][j] = (empty ? 1 : 0);
		}
		empty = true;
		for (int j = m - 1; j >= 0; j--)
		{
			if (a[i][j] == '#')
				empty = false;
			_right[i][j] = (empty ? 1 : 0);
		}
	}
	for (int j = 0; j < m; j++)
	{
		bool empty = true;
		for (int i = 0; i < n; i++)
		{
			if (a[i][j] == '#')
				empty = false;
			_up[i][j] = (empty ? 1 : 0);
		}
		empty = true;
		for (int i = n - 1; i >= 0; i--)
		{
			if (a[i][j] == '#')
				empty = false;
			_down[i][j] = (empty ? 1 : 0);
		}
	}
}

long long ans;

void solve(int n, int m, char a[MAX][MAX])
{
//	ans = 0;
	for (int i = 1; i < n - 1; i++)
	{
		int last = -1, x, y;
		for (int j = 1; j < m - 1; j++)
		{
			if (a[i][j] == '#')
				continue;
			if (j > last)
			{
				x = 0;
				y = 0;
				for (last = j; last < m - 1 && a[i][last] == '.'; last++)
				{
					x += _up[i][last] + _down[i][last];
					y += _down[i][last];
				}
			}
			int ur = (j + 1 < m - 1 ? _up[i][j + 1] : 0);
			int dr = (j + 1 < m - 1 ? _down[i][j + 1] : 0);
			if (_up[i][j])
				ans += (x - _up[i][j] - _down[i][j] - ur);
			if (_down[i][j])
				ans += (y - _down[i][j] - dr);
//			cout << "y " << i << " " << j << " " << y << endl;
//			cout << "d " << (y - _down[i][j] - dr) << endl;
			x -= _up[i][j];
			y -= _down[i][j];
		}
	}
//	cout << ans << endl;
	for (int i = 1; i < n - 1; i++)
		ans += _right[i][0];
}

char a[MAX][MAX], b[MAX][MAX];

int main()
{
	ios_base::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> a[i][j];

	fillArray(n, m, a);

	// 1 TURN
	for (int i = 1; i < n - 1; i++)
		for (int j = 1; j < m - 1; j++)
			if (a[i][j] == '.')
				ans += (_up[i][j] + _down[i][j]) * (_left[i][j] + _right[i][j]);

	// 0 AND 2 TURN
	solve(n, m, a);

	// ROTATE
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			b[m - j - 1][i] = a[i][j];

	fillArray(m, n, b);
	solve(m, n, b);

	cout << ans << endl;
	
	return 0;
}

