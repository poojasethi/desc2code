#include <iostream>
using namespace std;
const int MAX = 1005000;
int par[25][MAX], d[MAX];
void update(int v)
{
	for (int h = 1; h < 25; h++)
		par[h][v] = par[h - 1][par[h - 1][v]];
}
int get_parent(int v, int k)
{
	for (int h = 24; h >= 0; h--)
		if ((1 << h) & k)
			v = par[h][v];
	return v;
}
int lca(int u, int v)
{
	if (d[u] < d[v])
		swap(u, v);
	u = get_parent(u, d[u] - d[v]);
	if (u == v)
		return v;
	for (int h = 24; h >= 0; h--)
		if (par[h][v] != par[h][u])
		{
			v = par[h][v];
			u = par[h][u];
		}
	return par[0][v];
}
int dist(int u, int v)
{
	return d[u] + d[v] - 2 * d[lca(u, v)];
}
int main()
{
	ios::sync_with_stdio(false);
	int n = 4, q;
	cin >> q;
	par[0][2] = par[0][3] = par[0][4] = 1;
	d[2] = d[3] = d[4] = 1;
	int u = 2, v = 4;
	while (q--)
	{
		int x;
		cin >> x;
		d[n + 1] = d[n + 2] = d[x] + 1;
		par[0][n + 1] = par[0][n + 2] = x;
		update(n + 1);
		update(n + 2);
		if (dist(u, n + 1) > dist(u, v))
			v = n + 1;
		if (dist(v, n + 2) > dist(u, v))
			u = n + 2;
		n += 2;
		cout << dist(u, v) << endl;
	}
	return 0;
}
