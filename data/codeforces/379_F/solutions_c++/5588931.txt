#include<cstdio>
#include<algorithm>
#define N 1000005
#define M 20
using namespace std;
int n,qv[N];

int prv[M][N];
int dist[N];

int build()
{
	for(int i=1;i<M;++i)
		for(int v=1;v<=n;++v)
			prv[i][v] = prv[i-1][prv[i-1][v]];
}

int query(int v, int u)
{
	if(dist[v]<dist[u]) swap(v,u);

	int d = dist[v]-dist[u];
	for(int i=0;d;d>>=1,++i) if(d&1)
		v = prv[i][v];
	
	if(v==u) return v;
		
	for(int i=M-1;i>=0;--i)
		if(prv[i][v] != prv[i][u])
			v = prv[i][v], u = prv[i][u];
	return prv[0][v];
}
int main()
{
	n = 4;
	dist[1] = 0; prv[0][1] = 1; 
	dist[2] = dist[3] = dist[4] = 1;
	prv[0][2] = prv[0][3] = prv[0][4] = 1;

	int q; scanf("%d",&q);
	for(int i=0;i<q;++i)
	{
		scanf("%d",qv+i);
		for(int j=0;j<2;++j)
		{
			dist[++n] = dist[qv[i]]	+1;
			prv[0][n] = qv[i];
		}
	}
	build();

	int dp = 2 , di=2;

	for(int i=0;i<q;++i)
	{
		int nw = 5+2*i;
		if( dist[nw] > dist[dp] )
		{
			dp = nw;
			++di;
		}else
		{
			int lca = query(nw,dp);
			di = max(di, dist[nw]+dist[dp] - 2*dist[lca]);
		}
		printf("%d\n",di);
	}
	return 0;
}
