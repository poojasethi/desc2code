#include<cstdio>
#include<vector>
#include<cstring>
#include<algorithm>

using namespace std;
typedef  long long  ll;
const int N = 50002;
const int M = 2602;

char str[N];
int dp[M][M];
vector<char> vec;

int Dfs(int i,int j)
{
    if(i>j) return 0;
    if(i==j) return 1;
    if(dp[i][j]!=-1) return dp[i][j];
    if(str[i]==str[j]) return dp[i][j]=Dfs(i+1,j-1)+2;
    int l=Dfs(i+1,j),r=Dfs(i,j-1);
    if(l>r) return dp[i][j]=l;
    else return dp[i][j]=r;
}
void Dfs_Ans(int i,int j,int rest)
{
    if(i>j || rest==0) return;
    if(i==j) vec.push_back(str[i]);
    else
    {
        if(rest==1)
        {
            vec.push_back(str[i]);
            return;
        }
        if(str[i]==str[j])
        {
            vec.push_back(str[i]);
            Dfs_Ans(i+1,j-1,rest-2);
            vec.push_back(str[j]);
            return;
        }
        if(dp[i+1][j]>dp[i][j-1]) Dfs_Ans(i+1,j,rest);
        else Dfs_Ans(i,j-1,rest);
    }
}
int main()
{
    scanf("%s",str+1);
    memset(dp,-1,sizeof(dp));
    int len=min(2600,(int)strlen(str+1));
    Dfs(1,len);
    Dfs_Ans(1,len,100);
    for(vector<char>::iterator it=vec.begin();it!=vec.end();it++) putchar(*it);
    puts("");
    return 0;
}
