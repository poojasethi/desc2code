#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;
const int maxn=50010;
int f[maxn][26];
int dp[101][maxn];
char s[110000];
void dfs(int l, int r, int k)
{
    if (k==1)
    {
        printf("%c",s[l]);
        return;
    }
    if (k==2)
    {
        printf("%c%c",s[l],s[r]);
        return;
    }
    printf("%c",s[l]);
    int i;
    for(i=l+1;dp[k-2][i]>=r;i++);
    dfs(i,dp[k-2][i],k-2);
    printf("%c",s[r]);
}
int main()
{
    int n,k;
    scanf("%s",s);
    n=strlen(s);
    for(int i=0;i<26;i++) f[n][i]=n;
    for(int i=n-1;i>=0;i--)
    {
        memcpy(f[i],f[i+1],sizeof(f[i]));
        f[i][s[i]-'a']=i;
    }
    int m=1;
    for(int i=0;i<n;i++)
    {
        dp[1][i]=i;
        dp[2][i]=f[i+1][s[i]-'a'];
        if(dp[2][i]<n) m=2;
    }
    for(int i=3;i<=100;i++)
    {
        int now=n;
        for(int j=n-1;j>=0;j--)
        {
            if(now<n-1 && f[now+1][s[j]-'a']<n) m=i, dp[i][j]=f[now+1][s[j]-'a'];
            else dp[i][j]=n;
            now=min(dp[i-2][j],now);
        }
    }
    int i;
    for(i=0;dp[m][i]>=n;i++);
    dfs(i,dp[m][i],m);
    return 0;
}