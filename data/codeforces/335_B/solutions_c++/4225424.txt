#include<cstring>
#include<cstdio>
#include<iostream>
using namespace std;
const int N = 50005;
int pos[N][26];
int lef[N][105];
int path[N][105];
char ch[N];
void dfs(int r,int l,int len){
	if(len == 0) return ;
//	for(int i = 0; i <= l; i++)
//		printf("%c",ch[i]);
//	puts("");
	printf("%c",ch[l]);
	if(len == 1) return ;
	dfs(path[r-1][len-2],lef[r-1][len-2],len-2);
	printf("%c",ch[r]);
	
}
int main(){
	memset(lef,-1,sizeof(lef));
	memset(pos,-1,sizeof(pos));
	cin >> ch;
	int len = strlen(ch);
	for(int i = 0; i < len; i++){
		int x = ch[i] - 'a';
		for(int j = 0; j < 26; j++)
			if(j == x) pos[i][j] = i;
			else if(i > 0) pos[i][j] = pos[i-1][j];
		if(i && pos[i-1][x] != -1) lef[i][2] = pos[i-1][x], path[i][2] = i;
		if(i > 0 && lef[i][2] < lef[i-1][2]) lef[i][2] = lef[i-1][2], path[i][2] = path[i-1][2];
		lef[i][1] = i; path[i][1] = i;
		for(int p = 3; p <= i + 1 && p <= 100; p ++){
			int leftpos = lef[i-1][p-2];
			if(leftpos > 0){
				lef[i][p] = pos[leftpos-1][x];
				path[i][p] = i;
			}
			if(lef[i][p] < lef[i-1][p]){
				lef[i][p] = lef[i-1][p];
				path[i][p] = path[i-1][p];
			}
		}
	}
	for(int p = 100; p >= 1; p --) if(lef[len-1][p] != -1){
		dfs(path[len-1][p],lef[len-1][p],p);
		break;
	}
}
