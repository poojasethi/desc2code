from math import factorial
def choose(n, c):
    return factorial(n) / factorial(c) / factorial(n - c)

tab = {}
#number of ways to draw t humps with n points, in which the 1st point's y-coordinate is y
def amount(y, n, t):
    #special case where t is 0 and n is 1
    #the reason we don't test for n == t == 0 is in the next recursion,
    #we start with bottom point, so it is repeated and there is at least 1 point
    if n == 1 and t == 0:
        return 1
    if n > 6 * t + 1 or t == 0 or n <= 0 or y >= 4:
        return 0
    if (y, n, t) not in tab:
        res = 0
        for top in xrange(y + 1, 5):
            for bottom in xrange(1, top):
                for i in xrange(top - y):
                    for j in xrange(top - bottom):
                        res += amount(bottom, n - (i + j + 3) + 1, t - 1) * choose(top - y - 1, i) * choose(top - bottom - 1, j)
        tab[(y, n, t)] = res
    return tab[(y, n, t)]

n, t = map(int, raw_input().split())
res = 0
for i in xrange(1, 4):
    res += amount(i, n, t)
print res
