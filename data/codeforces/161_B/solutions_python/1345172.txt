class Item(object):
    def __init__(self,i,cost,Type):
        self.idx = i
        self.cost = cost
        self.Type = Type
        self.used = False
        
    def __lt__(self,other):
        return self.cost > other.cost
        
    def __str__(self):
        return str(self.idx+1)
    
    
class Cart(list):
    def __init__(self):
        list.__init__(self)
        self.stool = False
        self.stoolval = None
    
    def __str__(self):
        string = str(len(self))
        for item in self:
            string += " "+str(item)
        return string
    
    def cost(self):
        s = 0
        m = 99999999999999
        for item in self:
            s += item.cost
            m = min(item.cost,m)
        if self.stool:
            s -= m/2.0
        return s
        
n,k = map(int,raw_input().split())
carts = [Cart() for z in range(k)]
highstool = 0 #index of last cart that has a stool

items = []
stools = []
for i in range(n):
    c,t = map(int,raw_input().split())
    thing = Item(i,c,t)
    items.append(thing)
    if t == 1:
        stools.append(thing)
items.sort()
stools.sort()

for i in range(min(len(stools),k)):
    carts[i].stool = True
    carts[i].append(stools[i])
    carts[i].stoolval = stools[i].cost
    stools[i].used = True
highstool = min(len(stools),k)

if highstool < k:
    for item in items:
        if not item.used:
            carts[highstool].append(item)
            highstool = min(k-1,highstool+1)
else:
    #all carts have a stool
    for item in items:
        if not item.used:
            carts[highstool-1].append(item)
    
total = 0
for cart in carts: 
    total += cart.cost()
print "%.1f" %(total)
for cart in carts: 
    print cart