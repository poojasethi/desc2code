#include <iostream>
#include <complex>
#include <algorithm>
#include <iostream>
using namespace std;

typedef long double ll;
typedef complex<ll> point;

const int MAXN = 100005;
int N, T;
ll ang [2 * MAXN];
point points [2 * MAXN];

int main ()
{
	cin >> N;

    for (int i = 0; i < N; i++)
		cin >> points [i].real () >> points [i].imag ();
	
	cin >> T;

	while (T--)
	{
		point p; cin >> p.real () >> p.imag ();

		for (int i = 0; i < N; i++)
			ang [i] = arg (points [i] - p);

		sort (ang, ang + N);

		for (int i = 0; i < N; i++)
			ang [N + i] = ang [i] + 2 * M_PI;

		long long total = (long long) N * (N - 1) * (N - 2) / 6;

		for (int i = 0, j = 0; i < N; i++)
		{
			while (j + 1 < 2 * N && ang [j + 1] < ang [i] + M_PI )
				j++;

			total -= (long long) (j - i) * (j - i - 1) / 2;
		}

		cout << total << '\n';
	}
    return 0;
}
