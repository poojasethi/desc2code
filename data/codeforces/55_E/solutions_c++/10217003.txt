#include<iostream>
#include<complex>

using namespace std;

#define pnt complex<double>
#define X real()
#define Y imag()
#define cross(a, b) imag(conj((a)) * (b))
#define ll long long

const ll N = 100100;

ll n, m;
pnt inp[N], cen;

void load () {
	cin >> n;
	for (ll i = n - 1; i >= 0; --i) 
		cin >> inp[i].X >> inp[i].Y;
	cin >> m;
}

ll solve () {
	ll sum = 0, flag = 0, t = 0;
	for (ll i = 0; i < n; ++i) {
		while (cross(inp[(flag + 1) % n] - inp[i], cen - inp[i]) >= 0) {
			++flag;
			flag %= n;
			++t;
		}
		sum += t * (t - 1) / 2;
		--t;
	}
	
	sum = (n * (n - 1) * (n - 2) / 6) - sum;
	return sum;
}

int main () {
	ios_base::sync_with_stdio();
	load();
	while (m--) {
		cin >> cen.X >> cen.Y;
		bool chk = 1;
		for (ll i = 0; i < n; ++i) 
			if (cross(inp[(i + 1) % n] - inp[i], cen - inp[i]) < 0) 
				chk = 0;
				
		if (chk)
			cout << solve() << endl;
		else
			cout << 0 << endl;
	}
	return 0;
}