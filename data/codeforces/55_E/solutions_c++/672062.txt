#include <iostream>
#include <vector>
#include <algorithm>
#include <complex>

using namespace std;

typedef long long int lint;

typedef complex<double> point;

double prodvec(point p1,point p2)
{
  return imag(conj(p1)*p2);
}

point llegeix()
{
  double x,y;
  cin>>x>>y;
  return point(x,y);
}

int main()
{
  lint n;
  cin>>n;
  vector<point> v(n);
  for (int i=0;i<n;i++) v[i]=llegeix();
  reverse(v.begin(),v.end());
  int casos;
  cin>>casos;
  for (int cas=0;cas<casos;cas++) {
    point p;p=llegeix();
    bool error=false;
    for (int i=0;i<n and not error;i++)
      if (prodvec(v[(i+1)%n]-v[i],p-v[i])<0)
	error=true;
    if (error) {
      cout<<0<<endl;
    } else {
      int itope=1;
      lint total=0;
      for (int i=0;i<n;i++) {
	while (prodvec(v[(itope+1)%n]-v[i],p-v[i])>0)
	  itope=(itope+1)%n;
	lint amount=(itope+n-i)%n;
	total+=(amount*(amount-1))/2;
      }
      cout<<n*(n-1)*(n-2)/6-total<<endl;
    }
  }
}

