#include <iostream>
#include <complex>
#define ll long long 
#define X real()
#define Y imag()
using namespace std ;
typedef complex < ll > point;

const ll maxn=10000*10*2+2  ;
point p[maxn] , d ;
ll n , t , ans ;
ll cross(point a , point b){
	return imag(b*conj(a));
}
void find(){
	ans=(n*(n-1)*(n-2))/6 ;
	ll j=0 ;
	for (int i=0 ; i<n ; i++){
		if (cross(p[i+1]-p[i] , d-p[i])>0){
			cout << 0 << endl ;
			return ;
		}
		j=max(j , (ll)i);
		while (cross(p[i]-p[j+1] , p[i]-d)<0)
			j++ ;
		ans-=((j-i)*(j-i-1))/2 ;	
	}
	cout << ans << endl ;
}
int main (){
	ios::sync_with_stdio(false);
	cin >> n ;
	for (int i=0 ; i<n ; i++){
		cin >> p[i].X >> p[i].Y ;
		p[i+n]=p[i] ;
	}
	cin >> t ;
	while (t--){
		cin >> d.X >> d.Y ;
		find();
	}
	return 0;
}

