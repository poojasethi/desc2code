#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <iterator>
#include <limits>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;


/* Prewritten code begins */
#define MP          make_pair
#define LL          long long
#define FORE(i,c)   for(VAR(i,(c).begin()); i!=(c).end(); ++i)
#define VAR(i,v)    __typeof(v) i=(v)
#define X           first
#define Y           second
#define CAST(x,t)   *({OSS oss; oss << (x); ISS iss(oss.str()); static t _cast_ret; iss >> _cast_ret; &_cast_ret;})
#define ISS         istringstream
#define OSS         ostringstream
#define ALL(x)      (x).begin(),(x).end()
/* Prewritten code ends */

int dig(char c) {
	if(isdigit(c)) return c-'0';
	return toupper(c)-'A'+10;
}
char dig2str(int x) {
	if(x < 10) return '0'+x;
	return 'A'+x-10;
}
pair<int, string> roman[] = {MP(1000, "M"), MP(900, "CM"), MP(500, "D"), MP(400, "CD"), MP(100, "C"),MP(90, "XC"), MP(50, "L"), 
	MP(40, "XL"), MP(10, "X"), MP(9, "IX"), MP(5, "V"), MP(4, "IV"), MP(1, "I")};
int main() {

	LL v;
	string sb, sc;
	int a, b;
	cin >> a >> sb >> sc;
	v = 0;
	FORE(i,sc) v *= a, v += dig(*i);
	sc = "";

	if(sb[0] == 'R') {
		int pos = 0;
		while(v) {
			while(roman[pos].X > v) pos++;
			sc += roman[pos].Y;
			v -= roman[pos].X;
		}
	} else {
		b = CAST(sb, int);
		do {
			sc += dig2str(v%b);
			v /= b;
		} while(v);
		reverse(ALL(sc));
	}
	cout << sc << endl;
	return 0;
}
