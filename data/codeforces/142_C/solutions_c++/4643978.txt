#include <cstdio>
#include <cstring>
using namespace std;

const int dy[][5] = {  {0,1,1,1,2}, {0,0,0,1,2},{0,1,2,2,2}, {0,1,1,1,2}};
const int dx[][5] = {  {2,0,1,2,2},{0,1,2,1,1},{1,1,0,1,2}, {0,0,1,2,0}};

int N, M;
char now[9][9 + 1];
char ans_way[9][9 + 1];
int ans, rest, nowans;
#define doit int ny = y + dy[p][d], nx = x + dx[p][d];
void set(int y, int x, int p, char ch){
	for(int d = 0; d < 5; d++){
		doit
		now[ny][nx] = ch;
	}
}

bool check(int y, int x, int p){
	for(int d=0; d<5; d++){
		doit
		if(!(0<=ny && ny<N && 0<=nx && nx<M && now[ny][nx]=='.'))
			return false;
	}
	return true;
}
void dfs(int y, int x){
	if(x == M){
		if(y < N)
			dfs(y+1, 0);
		return ;
	}

	if(nowans + rest / 5 <= ans)
		return ;

	if(y <= N-3 && x <= M-3) {
		int tmp = rest;
		for(int p=0; p<4; p++){
			if(check(y, x, p)){
				set(y, x, p, 'A' + nowans);nowans++;
				if(ans < nowans) {
					ans = nowans;
					memcpy(ans_way, now, sizeof(now));
				}
				rest -= 5 + (now[y][x] == '.' ? 1 : 0);
				dfs(y, x+1);
				rest = tmp;
				nowans--;
				set(y, x, p, '.');
			}
		}
	}

	if(now[y][x] == '.')
		rest--;
	dfs(y, x+1);
	if(now[y][x] == '.')
		rest++;
}

int main(){
	scanf("%d%d", &N, &M);
	for(int i=0; i<N; i++){
		for(int j=0; j<M; j++){
			now[i][j] = ans_way[i][j] = '.';
		}
	}
	nowans = 0;
	rest = N * M;
	dfs(0, 0);
	printf("%d\n", ans);
	for(int i=0; i<N; i++)
		printf("%s\n",ans_way[i]);
	return 0;
}