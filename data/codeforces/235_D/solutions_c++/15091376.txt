#include<queue>
#include<math.h>
#include<stdio.h>
#include<string.h>
#include<algorithm>
#define N 3100
#define pr pair<int,int>
using namespace std;
int to[N<<1],next[N<<1],head[N],ce=1;
int deep[N],fa[N],cf[N],dic[N],dis[N][N],len;
bool vis[N<<1],inc[N];
double ans;
priority_queue<pr,vector<pr>,greater<pr> >q;
void add(int x,int y)
{
	to[++ce]=y;
	next[ce]=head[x];
	head[x]=ce;
}
void getCir(int x,int pre)
{
	vis[x]=1;
	for(int i=head[x];i;i=next[i])
	{
		if(!vis[to[i]]&&(i^1)!=pre)
			deep[to[i]]=deep[x]+1,fa[to[i]]=x,getCir(to[i],i);
		else if(deep[x]>deep[to[i]]&&(i^1)!=pre)
		{
			len=deep[x]-deep[to[i]]+1;
			for(int k=x;k!=to[i];k=fa[k])
				inc[k]=1;
			inc[to[i]]=1;
		}
	}
}
void init(int x,int pre,int d,int t)
{
	cf[x]=t;
	dic[x]=d;
	for(int i=head[x];i;i=next[i])
	{
		if(!inc[to[i]]&&to[i]!=pre)
		{
			fa[to[i]]=x;
			init(to[i],x,d+1,t);
		}
	}
}
void dij(int st)
{
	memset(vis,0,sizeof(vis));
	q.push(pr(0,st));
	dis[st][st]=0;
	int x,i;
	while(!q.empty())
	{
		x=q.top().second,q.pop();
		if(vis[x])	continue;
		vis[x]=1;
		for(i=head[x];i;i=next[i])
		{
			if(dis[st][to[i]]>dis[st][x]+1)
			{
				dis[st][to[i]]=dis[st][x]+1;
				q.push(pr(dis[st][to[i]],to[i]));
			}
		}
	}
}
int main()
{
	int n,m,i,j,k,x,y;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		scanf("%d%d",&x,&y);
		x++,y++;
		add(x,y),add(y,x);
	}
	getCir(1,0);
	for(x=1;x<=n;x++)
	{
		if(inc[x])
			fa[x]=0,init(x,0,0,x);
	}
	memset(dis,0x3f,sizeof(dis));
	for(x=1;x<=n;x++)
	{
		dij(x);
	}
	for(x=1;x<=n;x++)
	{
		for(y=1;y<=n;y++)
		{
			if(cf[x]==cf[y])
			{
				ans+=1.0/(dis[x][y]+1);
			}
			else
			{
				k=dis[x][y]-dic[x]-dic[y];
				ans+=1.0/(dis[x][y]+1)+1.0/(dis[x][y]-k+len-k+1)-1.0/(dic[x]+dic[y]+len);
			}
		}
	}
	printf("%.15lf\n",ans);
	return 0;
}
