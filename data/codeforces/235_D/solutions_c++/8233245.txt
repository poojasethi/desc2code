#include <cstdio>
#include <algorithm>

using namespace std;

const int N = 3030;

int n, csize, de[N];
int sta[N], top, vis[N], V;

struct edge {
	int to, nx;
} ee[N * 2];

int eq[N], en = 1;

double ans;

void link(int u, int v) {
	ee[++en] = (edge) {v, eq[u]}, eq[u] = en;
}
void dfs(int u, int A, int B) {
	if (de[u] == 2) ++B;
	else ++A;
	vis[u] = V;

	if (B == csize) ans += 1.0 / (A + 2);
	else if (B <= 2) ans += 1.0 / (A + B);
	else {
		ans += 1.0 / (A + B) + 1.0 / (A + csize - B + 2) - 1.0 / (A + csize);
	}
	
	for (int j = eq[u], v; v = ee[j].to, j; j = ee[j].nx)
		if (vis[v] != V) {
			dfs(v, A, B);
		}
}
int main() {
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		int u, v;
		scanf("%d %d", &u, &v), ++u, ++v;
		++de[u], ++de[v];
		link(u, v), link(v, u);
	}

	for (int i = 1; i <= n; ++i)
		if (de[i] == 1) sta[++top] = i;
	while (top) {
		int u = sta[top--];
		for (int j = eq[u], v; v = ee[j].to, j; j = ee[j].nx)
			if (--de[v] == 1) sta[++top] = v;
	}
	for (int i = 1; i <= n; ++i) {
		if (de[i] == 2) ++csize;
	}

	for (V = 1; V <= n; ++V) {
		dfs(V, 0, 0);
	}
	printf("%.10lf\n", ans);
}
