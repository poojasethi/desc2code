#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <iostream>
using namespace std;

#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP0(i, n) for (int i = 0; i < n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define FORE(i, x) for (int i = fi[x]; i != -1; i = e[i].n)

#define MAX_N 11000

struct node { int t, n; } e[MAX_N];
int fi[MAX_N], di[MAX_N], q[MAX_N];
bool used[MAX_N], in[MAX_N];
int n, tot, len; double ans;

inline void insert(const int& x, const int& y){e[++tot] = (node) { y, fi[x] }, fi[x] = tot;}
void dfs(int x, int l1, int l2)
{
 	 used[x] = true;
 	 if (l2 <= 1) ans += 1.0 / l1;
 	 else ans += 1.0 / l1 + 1.0 / (l1 - l2 + len - l2 + 2) - 1.0 / (l1 - l2 + len);
 	 FORE(i, x) if (!used[e[i].t]) dfs(e[i].t, l1 + 1, l2 + in[e[i].t]);
}

int main(void)
{
	scanf ("%d", &n), fill(fi, fi + n + 1, -1), tot = 1;
	REP1(i, n)
	{
	    int x, y; scanf ("%d%d", &x, &y), x++, y++;
        insert(x, y), insert(y, x), di[x]++, di[y]++;
	}
	//REP1(i, n) FORE(j, i) printf ("%d %d\n", i, e[j].t);
	int h = 1, t = 0;
	REP1(i, n) if (di[i] == 1) q[++t] = i;
	while (h <= t) { FORE(i, q[h]) if ((--di[e[i].t]) == 1) q[++t] = e[i].t; h++; }
	len = n - t;
//	printf ("%d\n", len);
	REP1(i, n) if (di[i] > 1) in[i] = true;
	REP1(i, n) fill(used, used + n + 1, false), dfs(i, 1, in[i]);
	printf("%.8lf\n", ans);
	return 0;
}
