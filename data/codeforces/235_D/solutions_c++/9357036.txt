#include<cstdio>
#include<cstring>

const int MAX_N = 3000;

double ans = 0.0;
int nodes[MAX_N + 10], nxt[MAX_N * 2 + 10], to[MAX_N * 2 + 10];
int cn, cid[MAX_N + 10];
int n, en;
bool vis[MAX_N + 10];

inline void addEdge(int f, int t){
    ++ en;
    to[en] = t;
    nxt[en] = nodes[f];
    nodes[f] = en;
}

int dfs(int cur, int fa){
    vis[cur] = true;
    for(int e = nodes[cur]; e; e = nxt[e]){
        if(to[e] == fa)
            continue;
        if(vis[to[e]]){
            cid[cur] = ++ cn;
            return to[e];
        }
        int res = dfs(to[e], cur);
        if(res == -1)
            return -1;
        else if(res){
            cid[cur] = ++ cn;
            return res == cur ? -1 : res;
        }
    }
    return 0;
}

int s;

void dfsAns(int cur, int cnt, int clen, int fa){
    vis[cur] = true;
    ans += 1.0 / (cnt + clen) + 1.0 / (cnt + cn - clen - 2) -
        1.0 / (cnt + cn - 2);
    for(int e = nodes[cur]; e; e = nxt[e]){
        if(vis[to[e]])
            continue;
        dfsAns(to[e], cnt + (s == cur || !cid[cur] || (cid[cur] && (!cid[to[e]] || !cid[fa]))),
                clen + (s != cur && cid[cur] && cid[to[e]] && cid[fa]), cur);
    }
}

int main(){
#ifndef ONLINE_JUDGE
    freopen("test.in", "r", stdin);
    freopen("test.out", "w", stdout);
#endif
    scanf("%d", &n);
    for(int i = 0; i < n; i ++){
        int a, b;
        scanf("%d%d", &a, &b);
        addEdge(a + 1, b + 1);
        addEdge(b + 1, a + 1);
    }
    dfs(1, 0);
    for(s = 1; s <= n; s ++){
        memset(vis, 0, sizeof(vis));
        dfsAns(s, 1, 0, 0);
    }
    printf("%.10f\n", ans);

    return 0;
}
