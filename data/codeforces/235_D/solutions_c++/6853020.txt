#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef int arr[500010];
arr head,next,d,pnt,dis,_dis,q;
int n,size,tot;
bool vis[500010];

inline void add(int a,int b)
{
    next[++tot] = head[a]; pnt[tot] = b; head[a] = tot; d[a] ++;
}

inline void find_circle()
{
    int st = 0 ,ed = 0;
    for (int i = 1;i <= n;i++)
    if (d[i] == 1) q[++ed] = i;
    while (st < ed) 
    {
        int x = q[++st];
        for (int i = head[x];i;i = next[i])
        if (--d[pnt[i]] == 1) q[++ed] = pnt[i];
    }
    size = n - ed;
}

double ans;
inline void dfs(int x)
{
    vis[x] = true;
    for (int i = head[x];i;i = next[i])
    if (!vis[pnt[i]])
        {
        dis[pnt[i]] = dis[x] + 1;
        if (!_dis[pnt[i]])
            {
            _dis[pnt[i]] = _dis[x] + 1;
            ans += 1.0 / _dis[pnt[i]];
            }
        else
            ans += 1.0 / dis[pnt[i]] - 1.0 / ((dis[pnt[i]] + _dis[pnt[i]] + size - 2) / 2);
        dfs(pnt[i]);
        }
    vis[x] = false;
}
        
int main()
{
    scanf("%d",&n);
    int a,b;
    for (int i = 1;i <= n;i++)
    scanf("%d%d",&a,&b) , add(a + 1,b + 1) , add(b + 1,a + 1);

    find_circle();

    for (int i = 1;i <= n;i++)
    {
        memset(dis,0,sizeof(dis)); dis[i] = 1;
        memset(_dis,0,sizeof(_dis)); _dis[i] = 1;
        dfs(i);
    }
    return printf("%.10lf",ans + n) , 0;
}
    
