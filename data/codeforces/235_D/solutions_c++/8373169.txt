#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <set>
#include <map>
using namespace std;

#define rep(i,a,b) for (int i = a; i <= b; ++i)
#define dep(i,a,b) for (int i = a; i >= b; --i)
typedef long long ll;

const int nn = 3010;
vector<int> E[nn];
int N,cs;
int v[nn],inq[nn],in[nn],q[nn];
double ans;

void dfs(int x, int l, int s) {
	v[x] = 1;
	if (s <= 1) ans += 1./l;
	else {
		ans += 1./l + 1./(l-s+cs-s+2) - 1./(cs-s+l);
	}
	for (int i = 0; i < E[x].size(); ++i) {
		int j = E[x][i];
		if (v[j]) continue;
		dfs(j, l+1, s+in[j]);
	}
}
int main() {
	scanf("%d", &N);
	rep(i,1,N) {
		int x,y;
		scanf("%d%d", &x, &y);
		x++;
		y++;
		E[x].push_back(y);
		E[y].push_back(x);
		++inq[x];
		++inq[y];
	}
	int l = 0, r = 0;
	rep(i,1,N) if (inq[i] == 1) q[++r] = i;
	while (l < r) {
		int x = q[++l];
		for (int i = 0; i < E[x].size(); ++i) {
			int j = E[x][i];
			if (--inq[j] == 1) q[++r] = j;
		}
	}
	cs = N - r;
	rep(i,1,N) in[i] = 1;
	rep(i,1,r) in[q[i]] = 0;
	rep(i,1,N) {
		rep(j,1,N) v[j] = 0;
		dfs(i,1,in[i]);
	}
	printf("%.10f\n", ans);
	return 0;
}
