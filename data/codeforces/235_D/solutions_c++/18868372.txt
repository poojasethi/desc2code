#include <cstdio>
#include <cstring>
#include <cmath>
#include <functional>
#include <algorithm>
#define rep(i,s,t) for(int i=s;i<=t;i++)
#define red(i,t,s) for(int i=t;i>=s;i--)
#define vtson(k,x) for(int k=o[x];k;k=nex[k])
#define LL long long
#define DD double
using namespace std;
const int inf=1e9;
const int NN=3011;
typedef unsigned int ui;
inline int read()
{
    int t=0,f=1;char ch=getchar();
    while(ch<'0'||ch>'9')f=(ch=='-')?-1:1,ch=getchar();
    while(ch>='0'&&ch<='9')t=t*10+ch-'0',ch=getchar();
    return t*f;
}
DD ans=0;
int n,tot=0,a[NN<<1],num[NN],fa[NN];
bool huan[NN],vt[NN];
int cc=1,to[NN<<1],nex[NN<<1],o[NN];
inline void add(int x,int y)
{
	to[++cc]=y,nex[cc]=o[x],o[x]=cc;
	to[++cc]=x,nex[cc]=o[y],o[y]=cc;
}

bool dfs(int x,int pre)
{
	vt[x]=1;
	vtson(k,x)
	{
		if((k^1)==pre)continue;
		int y=to[k];
		if(vt[y])
		{
			a[++tot]=y,huan[y]=1;
			while(x!=y)
				huan[x]=1,a[++tot]=x,x=fa[x];
			
			return 1;
		}
		fa[y]=x;
		if(dfs(y,k))return 1;
	}
	return 0;
}

void work(int x,int t1,int t2)
{
//	printf("(%d,%d,%d)  ",x,t1,t2);
	vt[x]=1;
	if(t2<0)ans+=1.0/t1;
	else ans+=1.0/t1+1.0/t2-1.0/((t1+t2-2-tot)/2+tot);
	if(huan[x]&&t2<0&&tot>1)
	{
		int now=num[x];
		rep(i,now+1,now+tot-1)vt[a[i]]=1;
		rep(i,1,tot-1)
			work(a[now+i],t1+i,t1+tot-i);
	}
	vtson(k,x)
	{
		int y=to[k];
		if(vt[y])continue;
		work(y,t1+1,t2+1);
	}
}

int main()
{
//    freopen("1.in","r",stdin);//freopen("1.out","w",stdout);    
	n=read();
	rep(i,1,n)add(read()+1,read()+1);
	dfs(1,0);
//	rep(i,1,tot)printf("%d ",a[i]);puts("");
	rep(i,1,tot)a[tot+i]=a[i],num[a[i]]=i;
	rep(i,1,n)
	{
		memset(vt,0,sizeof(bool)*(n+10));
		work(i,1,-inf);

	}
	printf("%.10lf\n",ans);
    return 0;
}
