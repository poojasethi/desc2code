#include <bits/stdc++.h>
using namespace std;

const int NK = 410;

vector<pair<int, int> > adj[NK];
int n, k;
short to[NK], qtd[NK], best[NK][NK][NK], cnt[NK];
pair<int, int> edge[NK][NK];

void rec(int u, int many){
    for(int e = cnt[u]; e >= 1; e--){
        int idx = edge[u][e].first, v = edge[u][e].second;
        bool cut = true;
        for(int j = 1; j <= min(many - 1, (int)qtd[v]); j++){
            if(best[u][e][many] == best[u][e - 1][many - j] + best[v][cnt[v]][j]){
                cut = false;
                rec(v, j);
                many -= j;
                break;
            }
        }
        if(cut) printf("%d ", idx);
    }
}

void dfs(int u, int p = -1, int ep = -1){
    to[u] = ep;
    qtd[u] = 1;
    for(int i = 0; i < adj[u].size(); i++){
        int v = adj[u][i].first, idx = adj[u][i].second;
        if(v != p){
            dfs(v, u, idx);
            qtd[u] += qtd[v];
        }
    }
    best[u][0][1] = 0;
    for(int i = 0; i < adj[u].size(); i++){
        int v = adj[u][i].first, idx = adj[u][i].second;
        if(v != p){
            cnt[u]++;
            edge[u][cnt[u]] = make_pair(idx, v);
            for(int i = 1; i <= min(k, (int)qtd[u]); i++){
                best[u][cnt[u]][i] = best[u][cnt[u] - 1][i] + 1;
                for(int j = 1; j <= min(i - 1, (int)qtd[v]); j++){
                    best[u][cnt[u]][i] = min((int)best[u][cnt[u]][i], best[u][cnt[u] - 1][i - j] + best[v][cnt[v]][j]);
                }
            }
        }
    }
}

int main(){
    scanf("%d %d", &n, &k);
    for(int i = 1, a, b; i < n; i++){
        scanf("%d %d", &a, &b);
        adj[a].push_back(make_pair(b, i));
        adj[b].push_back(make_pair(a, i));
    }
    for(int i = 0; i <= n; i++){
        for(int j = 0; j <= n; j++){
            for(int k = 0; k <= n; k++){
                best[i][j][k] = 1 << 14;
            }
        }
    }
    dfs(1);
    int root = 1, ans = best[1][cnt[1]][k];
    for(int i = 2; i <= n; i++){
        if(1 + best[i][cnt[i]][k] < ans){
            ans = 1 + best[i][cnt[i]][k];
            root = i;
        }
    }
    printf("%d\n", ans);
    if(to[root] != -1){
        printf("%d ", to[root]);
    }
    rec(root, k);
    printf("\n");
    return 0;
}