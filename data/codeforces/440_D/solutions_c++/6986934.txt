#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> PII;
const int MAXN = 500;
vector<PII> G [MAXN];
int parent[MAXN];
int childCnt[MAXN];
void dfs(int cur, int p) {
  parent[cur] = p;
  //  childCnt[cur] = 1;
  for(int i=0; i<G[cur].size(); i++) {
    int next = G[cur][i].first;
    if(next==p) continue;
    dfs(next, cur);
    childCnt[cur] += childCnt[next];
  }  
}

bitset<MAXN> memo[MAXN][MAXN];
bool check[MAXN][MAXN];
int dp[MAXN][MAXN];

bitset<MAXN> ans;
int finalAns = 10000;

int N,K;
void solve(int v, int prevID) {
  dp[v][0] = 0;
  dp[v][1] = 0;
  childCnt[v] = 1;
  //cout<<" hoge"<<v<<endl;
  for(int z=0; z<G[v].size(); z++) {
    int u = G[v][z].first, edgeID = G[v][z].second;
    if(u==parent[v]) continue;
    solve(u, edgeID);
    int ndp[MAXN]={10000};
    bitset<MAXN>  nmemo[MAXN];
    for(int i=1; i<=childCnt[v]; i++) {
      ndp[i] = dp[v][i] + 1;
      nmemo[i] = memo[v][i];
      nmemo[i][edgeID] = true;
    }
    for(int i=childCnt[v]+1; i<=childCnt[v]+childCnt[u]; i++) {
      ndp[i] = 10000;
      nmemo[i][edgeID] = true;
    }
    for(int i=1; i<=childCnt[v]; i++) {
      for(int j=1; j<=childCnt[u]; j++) {
    if(ndp[i+j] > dp[v][i] + dp[u][j]) {
      ndp[i+j] = dp[v][i] + dp[u][j];
      //  cout<<"  "<<i<<" "<<j<<" "<<ndp[i+j]<<endl;
      nmemo[i+j] = memo[v][i] | memo[u][j];
    }
      }
    }
    childCnt[v] += childCnt[u];
    for(int i=0; i<=childCnt[v]; i++) {
      dp[v][i] = ndp[i];
      memo[v][i] = nmemo[i];
      //cout<<v<<" "<<z<<" "<<i<<endl;
      //cout << ndp[i] << endl;
    }
  }
  if(childCnt[v]>=K) {
    
    if(finalAns > dp[v][K] + (v!=0) ) {
      finalAns = dp[v][K] + (v!=0);
      ans = memo[v][K];
      if(v!=0) ans[prevID] = true;
    }
  }
  
}

int main() {
  for(int i=0; i<MAXN; i++)
    for(int j=0; j<MAXN; j++) {
      check[i][j] = false;
     
    }
  for(int i=0; i<MAXN; i++)
    ans[i] = true;
  cin >> N >> K;
  vector<PII> input;
  for(int i=0; i<N-1; i++) {
    int p,q;
    cin>>p>>q;
    p--;q--;
    input.push_back(PII(p,q));
    G[p].push_back(PII(q, i));
    G[q].push_back(PII(p, i));
  }
  dfs(0,-1);
  
  solve(0,-1);
  cout<<finalAns<<endl;
  int cnt = 0;
  for(int i=0; i<N; i++) if(ans[i]) {
      cnt++;
      cout << i+1;
      if(cnt==finalAns) {
    cout<<endl;
      }
      else cout<<" ";
    }
  cout<<endl;
  
  return 0;
}
