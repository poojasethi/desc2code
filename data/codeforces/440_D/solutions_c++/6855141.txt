#include <algorithm>
#include <climits>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<queue>
#define N 100050
#define LL __int64
#define INF 1000000000
#define MOD 1000000007
#define min(x,y) ((x)<(y)?(x):(y))
using namespace std;
vector<int> e[500];
int d[500][500];
int pre[500][500];
int num[500][500];
int val[500][500];
int n;
int id[500][500];
int fat[500];
void gao(int now, int fa) {
	fat[now] = fa;
	d[now][1] = e[now].size();
	if (fa != -1)
		d[now][1]--;
	for (int i = 0; i < e[now].size(); i++) {
		int u = e[now][i];
		if (fa == u)
			continue;
		gao(u, now);
		for (int j = n; j >= 1; j--) {
			if (d[now][j] <= n) {
				for (int k = n - j; k >= 1; k--) {
					if (d[now][j + k] > d[now][j] + d[u][k] - 1) {
						d[now][j + k] = d[now][j] + d[u][k] - 1;
						pre[now][j + k] = u;
						num[now][j + k] = k;
						val[now][j + k] = d[u][k];
					}
				}
			}
		}
	}
}
bool bo[500];

void solve(int pos, int kk, int va) {
	bo[pos] = true;
	//if(pos==4&&kk==4)
	//printf(":%d %d %d\n",pos,kk,va);
	if(kk==1)return;
	if (pre[pos][kk] == -1)
		return;
	int f[500];
	for (int i = 0; i <= n; i++)
		f[i] = INF;
	f[1] = e[pos].size();
	if (fat[pos] != -1)
		f[1]--;
	for (int i = 0; i < e[pos].size(); i++) {
		int u = e[pos][i];
		if (u == fat[pos])
			continue;
		for (int j = n; j >= 1; j--) {
			if (f[j] <= n) {
				for (int k = n - j; k >= 1; k--) {
					if (f[j + k] > f[j] + d[u][k] - 1) {
						f[j + k] = f[j] + d[u][k] - 1;
						if (f[kk] == va) {
							solve(u, k, d[u][k]);
							solve(pos, j, f[j]);
							return;
						}
					}
				}
			}
		}
	}
//	if(pos==4&&kk==4)printf(":fuck:%d %d %d\n",f[4],f[1],fat[pos]);
}
int main() {
	memset(bo, 0, sizeof(bo));
	memset(id, 0, sizeof(id));
	memset(pre, -1, sizeof(pre));
	int k, i, j;
	scanf("%d%d", &n, &k);
	for (i = 1; i < n; i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		id[x][y] = id[y][x] = i;
		e[x].push_back(y);
		e[y].push_back(x);
	}
	for (i = 0; i <= n; i++)
		for (j = 0; j <= n; j++)
			d[i][j] = INF;
	gao(1, -1);
	int ans, pos;
	ans = d[1][k];
	pos = 1;
	for (i = 2; i <= n; i++)
		if (d[i][k] + 1 < ans) {
			ans = d[i][k] + 1;
			pos = i;
		}
	printf("%d\n", ans);
	//printf("pos:%d %d\n",pos,d[4][4]);
	if(pos!=1)
		solve(pos, k, ans-1);
	else
		solve(pos,k,ans);
	int flag = 0;
	for (i = 1; i <= n; i++) {
		for (j = i + 1; j <= n; j++) {
			if (id[i][j] != 0 && (bo[i] && !bo[j] || bo[j] && !bo[i])) {
				if (flag)
					printf(" ");
				flag = 1;
				printf("%d", id[i][j]);

			}
		}
	}
	puts("");
}
