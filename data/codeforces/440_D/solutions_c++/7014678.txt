#include <iostream>
#include <set>
#include <cctype>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
using namespace std;


vector <int> e[405];
int id[405][405],dp[405][405];
int p[405][405][405];
int n,k,f[405];

void dfs(int u,int pre)
{
		f[u]=pre;
		dp[u][1]=0;
		for (int i=0; i<e[u].size(); i++) {
				int v=e[u][i];
				if (v==pre) continue;
				dfs(v,u);
				for (int j=n; j>=0; j--) {
						dp[u][j]++;
						p[u][v][j]=0;
						for (int k=0; k<=j; k++) if (dp[u][j]>=dp[v][k]+dp[u][j-k]) {
								dp[u][j]=dp[v][k]+dp[u][j-k];
								p[u][v][j]=k;
						}
				}
		}
		return ;
}

void print(int u, int k , int pre)
{
		for (int i=e[u].size()-1; i>=0; i--) {
				int v=e[u][i];
				if (v==pre) continue;
				if (p[u][v][k]==0) cout<<id[u][v]<<endl;
				else {
						print(v,p[u][v][k],u);
						k-=p[u][v][k];
				}
		}
		return ;
}

int main()
{
		cin>>n>>k;
		for (int i=1; i<n; i++) {
				int u,v;
				cin>>u>>v;
				e[u].push_back(v); e[v].push_back(u);
				id[u][v]=id[v][u]=i;
		}
		memset(dp,0x11,sizeof dp);
		dfs(1,0);
		int ans=dp[1][k],root=1;
		for (int i=2; i<=n; i++) if (dp[i][k]+1<ans) {
				ans=dp[i][k]+1;
				root=i;
		}
		cout<<ans<<endl;
		if (root>1) cout<<id[root][f[root]]<<endl;
		print(root,k,f[root]);
		//system("pause");
		return 0;
}