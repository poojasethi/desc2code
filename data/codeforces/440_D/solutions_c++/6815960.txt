#include<stdio.h>
#include<iostream>
#include<string.h>
#include<queue>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<fstream>
#include<cmath>
#include<iomanip>
#include<time.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define inf 1000000007
#define mod 1000000007
#define pii pair<int,int>
#define vi vector<int>
#define VS vector<string>
#define all(x) x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define N 410
#define pi 3.14159265358979323846
#define DBG(vari) cerr<<#vari<<"="<<(vari)<<endl;
#define FOREACH(i,t) for(__typeof(t.begin()) i=t.begin();i!=t.end();i++)

int K,sz[N],n,dp[N][N],f[N][N],ans;
vector<pii>g[N];
vi v[N][N],cur;
vi merge(vi &a,vi &b)
{
    vi c;
    FOREACH(it,a)c.pb(*it);
    FOREACH(it,b)c.pb(*it);
    return c;
}
void dfs(int u,int fa,int id)
{
    sz[u]=1;
    for(int i=0;i<g[u].size();i++)
    {
        int j=g[u][i].x;
        if(j==fa)continue;
        dfs(j,u,g[u][i].y);
        sz[u]+=sz[j];
    }
    for(int i=0;i<=n;i++)dp[u][i]=inf;
    dp[u][1]=0;dp[u][sz[u]]=0;
    for(int i=0;i<g[u].size();i++)
    {
        int j=g[u][i].x;
        if(j==fa)continue;
        vi p[N];
        for(int x=1;x<=sz[u];x++)
        {
            f[u][x]=dp[u][x]+1;
            p[x]=v[u][x];p[x].pb(g[u][i].y);
            for(int y=1;y<=sz[j]&&y<x;y++)
            if(f[u][x]>dp[u][x-y]+dp[j][y])
            f[u][x]=dp[u][x-y]+dp[j][y],p[x]=merge(v[u][x-y],v[j][y]);
        }
        for(int x=1;x<=sz[u];x++)dp[u][x]=f[u][x],v[u][x]=p[x];
    }
    int t=dp[u][K]+(u==1?0:1);if(u>1)v[u][K].pb(id);
    if(ans>t)ans=t,cur=v[u][K];
}
int main()
{
    int k,i,j,T,ca=0,m;
    while(~scanf("%d%d",&n,&K))
    {
        for(i=1;i<=n;i++)g[i].clear();
        for(i=1;i<n;i++)
        {
            scanf("%d%d",&j,&k);
            g[j].pb(mp(k,i));g[k].pb(mp(j,i));
        }
        ans=inf;
        dfs(1,0,0);
        //for(i=1;i<=n;i++)DBG(dp[1][i])
        if(ans==inf){puts("0");continue;}
        printf("%d\n",ans);
        sort(all(cur));
        for(i=0;i<ans;i++)printf("%d ",cur[i]);
        puts("");
    }
    return 0;
}