#include "iostream"
#include "vector"
#include "cstring"

using namespace std;

int n, m, f[401][401], size[401], d[401][401][401], fa[401];
vector<pair<int, int> > E[401];
bool v[401];

void dfs(int x) {
	v[x] = true; size[x] = 1; f[x][0] = 1; f[x][1] = 0;
	for (int i = 0; i < E[x].size(); i++)
		if (!v[E[x][i].first]) {
			int now = E[x][i].first;
			fa[now] = E[x][i].second;
			dfs(now); size[x] += size[now];
			for (int j = size[x]; j; j--) {
				int tmp = n + 1;
				for (int k = 0; k <= min(j - 1, size[now]); k++)
					if (tmp > f[x][j - k] + f[now][k]) {
						tmp = f[x][j - k] + f[now][k];
						d[x][j][i] = k;
					}
				f[x][j] = tmp;
			}
		}
}

void dfs1(int x, int y) {
	size[x] = 1;
	for (int i = E[x].size() - 1; i >= 0; i--)
		if (E[x][i].second != fa[x]) {
			int now = E[x][i].first;
			if (d[x][y][i]) dfs1(now, d[x][y][i]);
			else cout << E[x][i].second << " ";
			y -= d[x][y][i];
		}
}

int main() {
	memset(f, 63, sizeof(f));
	cin >> n >> m;
	for (int i = 1; i < n; i++) {
		int u, v; cin >> u >> v;
		E[u].push_back(pair<int, int>(v, i));
		E[v].push_back(pair<int, int>(u, i));
	}
	dfs(1);
	int ans = f[1][m], best = 1;
	for (int i = 2; i <= n; i++)
		if (ans > f[i][m] + 1)
			ans = f[i][m] + 1, best = i;
	cout << ans << endl;
	if (ans != 0) {
		memset(v, 0, sizeof(v));
		if (best != 1) cout << fa[best] << " ";
		dfs1(best, m);
		cout << endl;
	}
}
