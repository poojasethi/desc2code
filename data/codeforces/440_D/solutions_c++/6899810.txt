#include <algorithm>
#include <memory.h>
#include <stdio.h>
#include <vector>

using namespace std;

#define NN 410

int N, K;
int adj[NN][NN], deg[NN];
int dp[NN][NN];
vector<int> sz[NN][NN];
int par[NN], edge[NN][NN];
int val[NN], cnt;
int tmp[NN][NN], last[NN][NN];

void dfs(int u) {
	int i, j, k, v, cur;
	for (i=0; i<deg[u]; i++) {
		v=adj[u][i];
		if (v==par[u]) {
			swap(adj[u][i], adj[u][--deg[u]]);
			i--;
			continue;
		}
		par[v]=u; dfs(v);
	}
	memset(tmp, 0x3f, sizeof(tmp));
	tmp[0][1]=0;
	for (i=0; i<deg[u]; i++) {
		v=adj[u][i];
		for (k=1; k<=K; k++) for (j=1; j<=k; j++) {
			cur=tmp[i][j];
//			printf("%d %d %d\n", k, j, cur);
			if (j==k) cur++;
			else cur+=dp[v][k-j];
			if (tmp[i+1][k]>cur) {
				tmp[i+1][k]=cur;
				last[i+1][k]=k-j;
			}
		}
	}
//	printf("%d : ", u);
	for (i=1; i<=K; i++) {
		dp[u][i]=tmp[deg[u]][i];
//		printf("%d ", dp[u][i]);
		j=deg[u]; k=i;
		while (j--) {
			sz[u][i][j]=last[j+1][k];
			k-=last[j+1][k];
		}
	}
//	puts("");
}

int make(int u, int k) {
	int i, v;
	for (i=0; i<deg[u]; i++) {
		v=adj[u][i];
		if (sz[u][k][i]==0) val[cnt++]=edge[u][v];
		else make(v, sz[u][k][i]);
	}
}

int main() {
	int i, j, u, v;
	
	scanf("%d%d", &N, &K);
	for (i=1; i<N; i++) {
		scanf("%d%d", &u, &v); u--, v--;
		adj[u][deg[u]++]=v;
		adj[v][deg[v]++]=u;
		edge[u][v]=edge[v][u]=i;
	}
	
	for (i=0; i<N; i++) for (j=0; j<NN; j++) sz[i][j].resize(deg[i]);
	dfs(0);
	
	int ans=dp[0][K]; u=0;
	for (i=1; i<N; i++) if (ans>dp[i][K]) {
		ans=dp[i][K]+1;
		u=i;
	}
	
	cnt=0;
	make(u, K);
	
	if (u) val[cnt++]=edge[u][par[u]];
	
	printf("%d\n", cnt);
	for (i=0; i<cnt; i++) printf("%d ", val[i]); puts("");
	
	return 0;
}