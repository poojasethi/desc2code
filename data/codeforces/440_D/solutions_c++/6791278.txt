#pragma  comment(linker, "/STACK:36777216")
#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <queue>
#include <stack>
#include <cstdio>
#include <string>
#include <vector>
#include <iomanip>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#define  lc(x) (x << 1)
#define  rc(x) (lc(x) + 1)
#define  lowbit(x) (x & (-x))
#define  PI    (acos(-1))
#define  lowbit(x) (x & (-x))
#define  EPS   1e-10
#define  MAXN  1005
#define  MAXM  2005
#define  LL    long long
#define  DB    double
#define  ULL   unsigned long long
#define  PII   pair<int, int>
#define  INF   0x3fffffff
#define  pb    push_back
#define  mp    make_pair
#define  MOD   1000000007

using namespace std;

struct edge{
    int v, next;
} e[MAXN << 1];

int first[MAXN], ecnt, d[MAXN], id[405][405];

void addedge(int u, int v){
    e[++ ecnt].v = v, e[ecnt].next = first[u], first[u] = ecnt;
}

int n, m, u, v, f[405][405];

vector <PII> p[405][405];

PII fl[405];

void dp(int u, int pre){
    f[u][1] = d[u];
    for(int i = first[u]; i != -1; i = e[i].next){
        int v = e[i].v;
        if(v == pre) continue;
        dp(v, u);
        memset(fl, 0, sizeof(fl));
        for(int k = 400; k >= 1; k --)
            for(int j = 1; j <= k; j ++){
                if(f[u][k - j] != INF){
                        if(f[u][k] > f[u][k - j] + f[v][j]){
                            f[u][k] = f[u][k - j] + f[v][j];
                            fl[k] = mp(j, v);
                        }
                }
            }
        for(int j = 400; j >= 1; j --)
            if(fl[j] != mp(0, 0)){
                p[u][j].clear();
                p[u][j] = p[u][j - fl[j].first];
                p[u][j].pb(mp(fl[j].first, fl[j].second));
            }
    }
}

vector <int> vec;

void gao(int u, int k){
    vec.pb(u);
    if(k == 1) return;
    for(int i = 0; i < p[u][k].size(); i ++)
        gao(p[u][k][i].second, p[u][k][i].first);
}

vector <int> ans;

int flag[405];

int main(){
    //freopen("in.txt", "r", stdin);
    cin >> n >> m;

    memset(first, -1, sizeof(first)), ecnt = -1;
    for(int i = 0; i <= 400; i ++)
        for(int j = 0; j <= 400; j ++) f[i][j] = INF;

    for(int i = 1; i < n; i ++){
        scanf("%d%d", &u, &v), d[u] ++, d[v] ++;
        addedge(u, v), addedge(v, u);
        id[u][v] = id[v][u] = i;
    }

    if(n == m){
        printf("0\n"); return 0;
    }

    dp(1, 0);

    int mn = INF, pos;
    for(int i = 1; i <= n; i ++){
        if(f[i][m] < mn) mn = f[i][m], pos = i;
    }

    cout << mn - 2 * (m - 1) << endl;
    gao(pos, m);
    for(int i = 0; i < vec.size(); i ++){
        flag[vec[i]] = true;
        //cout << vec[i] << ' ';
    } //cout << endl;
    for(int i = 0; i < vec.size(); i ++){
        for(int j = 1; j <= n; j ++)
            if(id[vec[i]][j] && flag[j] == false){
                ans.pb(id[vec[i]][j]);
            }
    }


    for(int i = 0; i < ans.size(); i ++){
        cout << ans[i]; if(i != ans.size() - 1) cout << ' '; else cout << endl;
    }
    cout << endl;
}
