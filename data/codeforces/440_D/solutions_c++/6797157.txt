#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int n,k;
int ma[410][410];
int dp[410][410];
int f[410];
int path[401][401][401];
vector<int >g[410];


void dfs(int u,int fa){
    dp[u][1]=0;
    f[u]=fa;
    for(int i = 0;i < (int)g[u].size();i ++){
        int v=g[u][i];
        if(v==fa) continue;
        dfs(v,u);
        dp[u][1]++;
    }

    for(int i = 0;i < (int)g[u].size();i ++){
        int v=g[u][i];
        if(v==fa) continue;
        for(int j=n;j>=1;j--){
            path[u][v][j]=0;
            for(int x=1;x<j;x++){
                dp[u][j]=min(dp[u][j],dp[u][j-x]+dp[v][x]-1);
                if(dp[u][j]>=dp[u][j-x]+dp[v][x]-1) path[u][v][j]=x;
            }
          //  printf("dp[%d][%d][%d]= %d\n",u,j,1,dp[u][j][1]);
        }
    }
}

vector<int>vec;

void output(int fa,int u,int num){
    for(int i = (int)g[u].size() - 1;i >= 0;i --){
        int v=g[u][i];
        if(fa==v) continue;
        if(path[u][v][num]==0){
           vec.push_back(ma[u][v]);
        }
        else{
            output(u,v,path[u][v][num]);
            num-=path[u][v][num];
        }
    }
}

int main()
{
    memset(dp,0x3f,sizeof dp);
    cin>>n>>k;
    for(int i=1;i<n;i++){
        int u,v;
        scanf("%d%d",&u,&v);
        ma[u][v]=ma[v][u]=i;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1,0);
    int ans=dp[1][k],id=1;
    for(int i=2;i<=n;i++){
        if(dp[i][k]+1<ans) ans=dp[i][k]+1,id=i;
    }
    cout<<ans<<endl;
    if(ans==0) return 0;
    if(id!=1){
        vec.push_back(ma[f[id]][id]);
    }
    output(f[id],id,k);
    for(int i=0;i<vec.size();i++){
        if(i==0) cout<<vec[i];
        else cout<<" "<<vec[i];
    }
    puts("");
    return 0;
}
