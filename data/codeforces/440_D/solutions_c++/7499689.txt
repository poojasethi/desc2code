#include <bits/stdc++.h>

#define R "%d"
#define RL "%I64d"
#define RD "%lf"
#define W "%.8lf"

#define Max(x, y) ((x) > (y) ? (x) : (y))
#define Min(x, y) ((x) < (y) ? (x) : (y))
#define Set(x, y) memset(x, y, sizeof(x))
#define Cpy(x, y) memcpy(x, y, sizeof(y))
#define All(x) x.begin(), x.end()
#define Sqr(x) ((x) * (x))
#define Sz(x) ((LL)x.size())

#define Mk make_pair
#define Pb push_back
#define Pk pop_back
#define Fr first
#define Se second

#define FOR(x, l, r) for (LL x = (l), end = (r); x <= end; ++x)
#define ROF(x, l, r) for (LL x = (l), end = (r); x >= end; --x)
#define Edge(x, y) for (LL x = g[y]; x; x = nt[x])

#define Read(x) ((x) = Get())
#define Lowbit(x) ((x) & (-x))
using namespace std;

typedef int LL;
typedef long long ll;
typedef double LD;
typedef long double real;

typedef map <LL, LL> MI;
typedef pair <LL, LL> PI;
typedef set <LL> SI;
typedef vector <LL> VI;

inline LL Get() {
	LL res = 0, q = 1;
	char ch = getchar();
	while ((ch < '0' || ch > '9') && ch != '-') ch = getchar();
	if (ch == '-') q = -1, ch = getchar();
	while (ch >= '0' && ch <= '9') res = res * 10 + ch - '0', ch = getchar();
	return res * q;
}

const LD eps = 1e-12, pi = M_PI;
const LL oo = (LL)2e9, mod = (LL)1e9 + 7;
const ll INF = (ll)1e17;

const LL N = 400;
typedef LL arrv[N + 10];
typedef LL arre[2 * N + 10];

arrv X, Y, g, f[N + 10], d, sz, h[N + 10], dp, ft;
arre pt, nt;
LL n, k, tot, node;
bool in[N + 10];

void Link(LL x, LL y) {
	pt[++tot] = y, nt[tot] = g[x], g[x] = tot, ++d[x];
	pt[++tot] = x, nt[tot] = g[y], g[y] = tot, ++d[y];
}

void Dp(LL x, LL fa) {
	f[x][0] = 1, f[x][1] = d[x], sz[x] = 1;
	Edge (i, x)
		if (pt[i] != fa) {
			Dp(pt[i], x), sz[x] += sz[pt[i]], ft[pt[i]] = x;
			memcpy(dp, f[x], sizeof(f[x]));
			FOR (j, 1, sz[x]) {
				FOR (p, 0, Min(sz[pt[i]], j - 1))
					if (f[pt[i]][p] + f[x][j - p] - 1 - (p > 0) < dp[j]) dp[j] = f[pt[i]][p] + f[x][j - p] - 1 - (p > 0), h[pt[i]][j] = p;
			}
			FOR (j, 1, sz[x]) f[x][j] = dp[j];
		}
}

void Init() {
#ifndef ONLINE_JUDGE
	freopen("berland.in", "r", stdin);
	freopen("berland.out", "w", stdout);
#endif

	scanf(R R "\n", &n, &k);
	if (k == n) { printf("0\n"); exit(0); }

	FOR (i, 1, n - 1) scanf(R R "\n", &X[i], &Y[i]), Link(X[i], Y[i]);
}

void Relink() {
	Set(g, 0), tot = 1;
	ROF (i, n - 1, 1) Link(X[i], Y[i]);
}

void Print(LL x, LL rem, LL fa) {
	if (!rem && node == k) return;
	LL total = rem;
	Edge (i, x)
		if (pt[i] != fa)
			Print(pt[i], h[pt[i]][total], x), total -= h[pt[i]][total];
	if (node == k) return;
	if (total) in[x] = 1, ++node;
}

LL main() {
	Init(), Set(f, 127);
	Dp(1, 0);
	LL ans = oo, t = 0;
	FOR (i, 1, n)
		if (f[i][k] < ans) ans = f[i][k], t = i;
	printf(R "\n", ans);
	Relink();
	Print(t, k, ft[t]);
	FOR (i, 1, n - 1)
		if (in[X[i]] ^ in[Y[i]]) printf(R " ", i);
	
	return 0;
}
