#include <iostream>
#include <algorithm>
using namespace std;

const int MAXn = 1000+10;
int srt[MAXn];
int x[MAXn], y[MAXn], t[MAXn];
double p[MAXn], exp[MAXn];
int n;
bool cmp(int i, int j) { return t[i] < t[j]; }

int main() {
	ios::sync_with_stdio(false);
	cin >> n;
	for(int i = 0; i < n; i++)
		cin >> x[i] >> y[i] >> t[i] >> p[i];
	for(int i = 0; i < n; i++)
		srt[i] = i;
	sort(srt, srt + n, cmp);
	for(int _i = n-1; _i >= 0; _i--) {
		int i = srt[_i];
		exp[i] = p[i];
		for(int _j = _i+1; _j < n; _j++) {
			int j = srt[_j];
			int dx = x[i]-x[j];
			int dy = y[i]-y[j];
			long long dt = t[j]-t[i];
			if(dx*dx + dy*dy <= dt*dt)
				exp[i] = max(exp[i], exp[j] + p[i]);
		}
	}
	double mx = 0;
	for(int j = 0; j < n; j++)
		mx = max(mx, exp[j]);
	cout.precision(10);
	cout << mx << endl;
	return 0;
}
