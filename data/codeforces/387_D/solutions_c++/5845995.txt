#include <iostream>
#include <memory.h>
#include <vector>

using namespace std;

#define INF 1000000000
#define MAXN 510

int n;
int del;
vector<int> edges[MAXN];
int mat[3][MAXN];
bool marked[MAXN];
int inDeg[MAXN];

bool DFS(int v)
{
	if (marked[v])
		return false;
	marked[v] = true;
	for (int i = 0; i < edges[v].size(); i++)
		if (edges[v][i] != del)
			if (mat[1][edges[v][i]] == -1 || DFS(mat[1][edges[v][i]]))
			{
				mat[0][v] = edges[v][i];
				mat[1][edges[v][i]] = v;
				return true;
			}
	return false;
}
int maximumMatching()
{
	memset(mat, -1, sizeof mat);
	bool found = true;
	int ans = 0;
	while (found)
	{
		found = false;
		memset(marked, false, sizeof marked);
		for (int i = 0;i < n; i++)
			if (!marked[i] && mat[0][i] == -1 && i != del && DFS(i))
			{
				ans++;
				found = true;
			}

	}
	return ans;
}

int main()
{
	int m;
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		a--, b--;
		edges[a].push_back(b);
		if (a != b)
			inDeg[b]++;
	}
	int ans = INF;
	for (int i = 0; i < n; i++)
	{
		del = i;
		int mxm = maximumMatching();
		int cs1 = (n - 1) - mxm + m - mxm - edges[i].size() - inDeg[i];
		int cs2 = 2 * n - 1 - (edges[i].size() + inDeg[i]);
		//cout << cs1 << " " << cs2 << endl;
		ans = min(ans, cs1 + cs2);
	}
	cout << ans << endl;
}
