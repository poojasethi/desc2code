#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <vector>

typedef long long ll;

using namespace std;

const int INF = 1000 * 1000 * 1000;
const int MaxN = 500;

vector<vector<int> > g;
bool used[MaxN];
int mt[MaxN];

bool try_kuhn(int v, int center) {
	if (used[v]) return false;
	used[v] = true;
	for (int i = 0; i < (int)g[v].size(); i++) {
		int to = g[v][i];
		if (to == center) continue;
		if (mt[to] == -1 || try_kuhn(mt[to], center)) {
			mt[to] = v;
			return true;
		}
	}
	return false;
}

int main () {
	int n, m;
	scanf ("%d%d", &n, &m);
	g.resize(n);
	for (int i = 0; i < m; i++) {
		int x, y;
		scanf ("%d%d", &x, &y);
		x--, y--;
		g[x].push_back(y);
	}
	int res = INF;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			mt[j] = -1;
		int withI = 0;
		int other = 0;
		for (int j = 0; j < n; j++)
			for (int k = 0; k < (int)g[j].size(); k++)
				if (j == i || g[j][k] == i) withI++; else other++;
		for (int j = 0; j < n; j++) {
			if (i == j) continue;
				for (int k = 0; k < n; k++)
					used[k] = false;
				try_kuhn(j, i);
		}
		int len = 0;
		for (int j = 0; j < n; j++)
			if (mt[j] != -1)
				len++;
		res = min(res, 2 * n - 1 - withI + other - len + (n - 1) - len);
	}
	printf ("%d", res);
}
