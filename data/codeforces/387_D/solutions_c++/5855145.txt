#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

typedef pair<int, int> pii;

const int MAXN = 501;
vector<int> ng[MAXN];
int match[MAXN][2], out[MAXN], in[MAXN], n, m;
bool mark[MAXN], tof[MAXN];

bool dfs(int x, int v)
{
	if (mark[x]) return false;
	mark[x] = true;
	for (int i = 0; i < ng[x].size(); i++)
	{
		int u = ng[x][i];
		if (u == v) continue;
		if (match[u][1] == -1 || dfs(match[u][1], v))
		{
			match[x][0] = u;
			match[u][1] = x;
			return true;
		}
	}
	return false;
}

int matching(int v)
{
	memset(match, -1, sizeof match);
	bool found = true;
	int sizeMatching = 0;
	while (found)
	{
		memset(mark, 0, sizeof mark);
		found = false;
		for (int i = 0; i < n; i++)
			if (i != v && !mark[i] && match[i][0] == -1)
				if (dfs(i, v))
				{
					sizeMatching++;
					found = true;
				}
	}
	int ret = n - 1 - sizeMatching + m - sizeMatching - in[v] - out[v];
	return ret;
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int x, y;
		cin >> x >> y; x--; y--;
		ng[x].push_back(y);
		out[x]++; in[y]++;
		if (x == y) in[y]--;
	}
	int ans = 1e9;
	for (int i = 0; i < n; i++)
		ans = min(matching(i) + 2 * n - out[i] - in[i] - 1, ans);
	cout << ans << endl;
	return 0;
}
