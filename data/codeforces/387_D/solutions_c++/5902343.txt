#include<cstdio>
#include<vector>
#include<cstring>
using namespace std;
int E[10000][2];
int P[500];
bool visited[500];
vector<int> G[500];
int n, m;
bool DFS(int start){
	visited[start] = true;
	for (int i = 0; i < G[start].size(); i++){
		int end = G[start][i];
		if (P[end] == -1 || (!visited[P[end]] && DFS(P[end]))){
			P[end] = start;
			return true;
		}
	}
	return false;
}
int main(){
	while (scanf("%d%d", &n, &m) == 2){
		for (int i = 0; i < m; i++){
			scanf("%d%d", &E[i][0], &E[i][1]);
			E[i][0]--, E[i][1]--;
		}
		int ans = 2e9;
		for (int i = 0; i < n; i++){ // �a�|�C�ӳ��I
			int res = 0, convertex = 0, other = 0, fix = 0;
			for (int j = 0; j < n; j++)
				G[j].clear(), P[j] = -1;
			for (int j = 0; j < m; j++){
				if (E[j][0] == i || E[j][1] == i)
					convertex++;
				else{
					other++;
					G[E[j][0]].push_back(E[j][1]);
				}
			}
			for (int j = 0; j < n; j++){
				memset(visited, false, sizeof(visited));
				DFS(j);
			}
			for (int j = 0; j < n; j++){
				if (P[j] != -1)
					fix++;
			}
			res = 2 * (n - 1) + 1 - convertex + other - fix + (n - 1) - fix;
			// �H i �����I, ��N�Ҧ��I�P i �@��V�쵲, �A�N��l�I�Φ��@����, �A��h�h�l����
			if (res < ans)
				ans = res;
		}
		printf("%d\n", ans);
	}
	return 0;
}