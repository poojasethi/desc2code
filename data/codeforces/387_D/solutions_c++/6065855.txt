#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
using namespace std;

int n, m, ans, tmp,tim;
int cx[600], cy[600];
int sy[600];
bool u[600][600];
vector<int> g[600];

void init()
{
	memset(g, 0, sizeof(g));
	memset(u, 0, sizeof(u));
	scanf("%d%d", &n, &m);
	int x, y;
	for (int i = 0; i < m; i++) {
		scanf("%d%d", &x, &y);
		g[x].push_back(y);
		u[x][y] = true;
	}
}

bool find(int k, int forbid)
{
	for (int i = 0; i < g[k].size(); i++) {
		if (g[k][i] == forbid) continue;
		if (sy[g[k][i]] == tim) continue;
		sy[g[k][i]] = tim;
		if (cy[g[k][i]] == 0 || find(cy[g[k][i]], forbid)) {
			cx[k] = g[k][i];
			cy[g[k][i]] = k;
			return true;
		}
	}
	return false;
}

void solve()
{
	ans = 100000000; tim = 0;
	for (int i = 1; i <= n; i++) {
		tmp = 3 * n + m - 2; 
		for (int j = 1; j <= n; j++) {
			if (u[i][j]) tmp -= 2;
			if (u[j][i]) tmp -= 2;
		}
		if (u[i][i]) tmp += 2;
		memset(cx, 0,sizeof(cx));
		memset(cy, 0,sizeof(cy));
		for (int j = 1; j <= n; j++) {
			if (i == j) continue; 
			++tim;
			if (find(j, i)) tmp -= 2;
		}
		ans = min(ans, tmp);
	}
	cout << ans << endl;
}

int main()
{
	init();
	solve();
}

