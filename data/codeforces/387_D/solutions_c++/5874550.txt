#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;
class EdgeNode{
public:
    int a, b;
};
vector<int> adjList[1001];
int useIf[1001];
int link[1001];
bool dps(int v) {
    for (vector<int>::iterator iter = adjList[v].begin();iter != adjList[v].end();iter++)
        if (useIf[*iter]==0) {
            useIf[*iter] = 1;
            if (link[*iter]==0 || dps(link[*iter])) {
                link[*iter] = v;
                return true;
            }
        }
    return false;
}
int main(){
    int n, m;
    cin >> n >> m;
    vector<EdgeNode> edge(m);
    for (int i=0;i<m;i++) cin >> edge[i].a >> edge[i].b;
    int res = 10000;
    for (int i=1;i<=n;i++) {
        int cnt = 0;
        for (int j=1;j<=2*n;j++) adjList[j].clear();
        for (int j=0;j<m;j++)
            if (edge[j].a==i || edge[j].b==i)
                cnt++;
            else {
                adjList[edge[j].a].push_back(edge[j].b+n);
                adjList[edge[j].b+n].push_back(edge[j].a);
            }
        memset(link,0,sizeof(link));
        for (int j=1;j<=n;j++) {
            memset(useIf,0,sizeof(useIf));
            if (dps(j)) cnt ++;
        }
        res = min(res,3*n+m-cnt*2-2);
    }
    cout << res << endl;
    return 0;
}
