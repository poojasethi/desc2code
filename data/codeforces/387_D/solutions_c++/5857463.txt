#include <cstdio>
#include <cstring>

#define MAXN 510

struct edge
{
  int y,next;
};

edge e[1010];
int n,m,cen,tocen;
int a[MAXN];
int link[MAXN];
bool cover[MAXN];
int scen[MAXN];

bool find(int x)
{
  int k,y,g;
  k=a[x];
  while (k!=-1)
  {
    y=e[k].y;
    if (!cover[y] && y!=cen)
    {
      g=link[y];
      link[y]=x;
      cover[y]=true;
      if (g==0 || find(g))
        return true;
      link[y]=g;
    }
    k=e[k].next;
  }
  return false;
}

inline int work()
{
  int k,ret,i,s,remove;
  ret=n-1<<1;
  ret++;
  ret+=n-1;
  //----
  ret-=scen[cen];
  tocen=0;
  s=0;
  memset(link,0,sizeof(link));
  for (i=1;i<=n;i++)
  {
    if (i==cen) continue;
    memset(cover,false,sizeof(cover));
    if (find(i)) s++;
  }
  remove=m-scen[cen]-s;
  return ret-s+remove;
}

int main()
{
  int i,x,ans;
  scanf("%d%d",&n,&m);
  memset(a,-1,sizeof(a));
  memset(scen,0,sizeof(scen));
  for (i=1;i<=m;i++)
  {
    scanf("%d%d",&x,&e[i].y);
    e[i].next=a[x];
    a[x]=i;
    scen[x]++;
    if (x!=e[i].y) scen[e[i].y]++;
  }
  ans=-1;
  for (i=1;i<=n;i++)
  {
    cen=i;
    x=work();
    if (ans==-1 || x<ans)
      ans=x;
  }
  printf("%d\n",ans);
  return 0;
}