# include <stdio.h>
# include <vector>
# include <algorithm>

# define mi(x,y) (x<y ? x : y)
# define MAXN 509
# define sz(c) (int)(c).size()
# define tr(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)

using namespace std;

int n, m, ans = MAXN*MAXN;
int curnode, E[MAXN];
vector<int> G[MAXN];

class bmp{
	public:
	vector<int> l, r;
	vector<bool> used;
	
	bool dfs(int node){
		if(used[node])	return 0;
		used[node] = 1;
		
		tr(i, G[node]){
			int to = *i + n;
			
			if(curnode+n != to  &&  (r[to] == -1  ||  dfs(r[to]))){
				r[to] = node;
				l[node] = to;
				return 1;
			}
		}
		
		return 0;
	}
	
	int tap(){
		l = vector<int>(n, -1);
		r = vector<int>(2*n, -1);
		
		for(bool phase=1; phase;){
			phase = 0;
			used = vector<bool> (n, 0);
			for(int i=0; i<n; i++)
				if(l[i] == -1  &&  curnode != i)
					phase |= dfs(i);
		}
		
		int ret = 0;
		
		tr(i, l)
			ret += *i != -1;
		
		return ret;
	}
	
} fn;

int main(){
	
	scanf("%d %d",&n,&m);
	
	for(int i=0; i<m; i++){
		int a, b;
		
		scanf("%d %d",&a,&b);
		
		a--, b--;
		
		G[a].push_back(b);
		
		E[a]++;
		
		if(a != b)
			E[b]++;
	}
	
	for(int i=0; i<n; i++){
		int alter = 2*n - 1 - E[i];
		curnode = i;
		
		int mxm = fn.tap();
		
		ans = mi(ans, alter + n - 1 - mxm + (m - mxm - E[i]));
	}
	
	printf("%d\n",ans);
}
