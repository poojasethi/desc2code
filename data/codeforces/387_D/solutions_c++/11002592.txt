#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <vector>
#include <map>
#include <queue>

using namespace std;

const int maxn=505;
const int maxm=1005;

int b[2*maxn],linker[2*maxn];
bool vis[2*maxn];
int a[2*maxm],next[2*maxm];
int num;
struct Edge
{
	int x,y;
}edge[maxm];
int n,m,ans,dqans,dq,now;
void addedge(int x,int y)
{
	++num;a[num]=y;next[num]=b[x];b[x]=num;
}
bool dfs(int x)
{
	for (int i=b[x];i!=0;i=next[i])
	{
		int y=a[i];
		if (!vis[y])
		{
			vis[y]=true;
			if (linker[y]==-1||dfs(linker[y]))
			{
				linker[y]=x;
				return true;
			}
		}
	}
	return false;
}
int main()
{
	scanf("%d%d",&n,&m);
	ans=19950920;
	for (int i=1;i<=m;++i) scanf("%d%d",&edge[i].x,&edge[i].y);
	for (int z=1;z<=n;++z)
	{
		num=0;
		memset(b,0,sizeof(b));
		for (int i=1;i<=m;++i)
		{
			if (edge[i].x==z) continue;
			if (edge[i].y==z) continue;
			addedge(edge[i].x,n+edge[i].y);
		}
		dqans=0;
		for (int i=1;i<=m;++i)
		{
			if (edge[i].x!=z&&edge[i].y!=z) continue;
			dqans++;
		}	
		memset(linker,-1,sizeof(linker));
		dq=0;
		for (int i=1;i<=n;++i)
		{
			if (i==z) continue;
			memset(vis,false,sizeof(vis));
			if (dfs(i)) dq++;
		}
		now=m-dqans-dq+n-1-dq+2*n-1-dqans;
		ans=min(now,ans);
	}
	printf("%d\n",ans);
	return 0;
}
  		 	 	 	 	 					  		 		  	 		