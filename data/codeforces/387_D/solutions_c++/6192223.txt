#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
using namespace std;

int mt[501];
int n, m;
bool g[501][501], gg[501][501];
int ans = 1e9;
int was[501];
int wascnt;

bool kuhn(int v)
{
    if (v < 0)
        return true;
    if (was[v] == wascnt)
        return false;
    was[v] = wascnt;
    for (int i = 0; i < n; ++i)
    {
        if (gg[v][i] && kuhn(mt[i]))
        {
            mt[i] = v;
            return true;
        }
    }
    return false;
}

int solve(int center)
{
    int adjToCenter = 0;
    memset(mt, 0xff, sizeof mt);
    memcpy(gg, g, sizeof g);
    memset(was, 0, sizeof was);
    for (int i = 0; i < n; ++i)
    {
        gg[center][i] = gg[i][center] = false;
        adjToCenter += g[center][i];
        if (i != center)
            adjToCenter += g[i][center];
    }
    int cost = 0;
    for (wascnt = 1; wascnt <= n; ++wascnt)
        if (wascnt - 1 != center)
            cost += kuhn(wascnt - 1);
    return 3 * n - 2 - 2 * adjToCenter + m - 2 * cost;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin >> n >> m;
    for (int i = 0, a, b; i < m; ++i)
    {
        cin >> a >> b;
        g[--a][--b] = true;
    }
    for (int center = 0; center < n; ++center)
        ans = min(ans, solve(center));
    cout << ans << endl;
    return 0;
}
