/*
 * 2011-08-13  Martin  <Martin@Martin-desktop>

 * 
 */
#include <iostream>
#include <fstream>

using namespace std;

#define rep(i, n) for (int i = 0; i < n; ++ i)
#define MaxiN 10

double ans = 0.0, prob;
int n, k, A;
int Level[MaxiN], Loyalty[MaxiN];

void dfs2(int now, int pos, int negsum, double p)
{
	if (now == n)
	{
		if (pos + pos > n)
			prob += p;
		else
			prob += p * (double) A / (double) (A + negsum);
		return;
	}
	dfs2(now + 1, pos + 1, negsum, p * 0.01 * min(100, Loyalty[now]));
	dfs2(now + 1, pos, negsum + Level[now], p * 0.01 * max(0, 100 - Loyalty[now]));
}

void dfs1(int now, int rest)
{
	if (now == n)
	{
		prob = 0.0;
		dfs2(0, 0, 0, 1.0);
		if (prob > ans)
			ans = prob;
		return;
	}
	for (int i = 0; i <= rest; ++ i)
	{
		Loyalty[now] += i * 10;
		dfs1(now + 1, rest - i);
		Loyalty[now] -= i * 10;
	}
}

int main()
{
	cin >> n >> k >> A;
	rep (i, n)
		cin >> Level[i] >> Loyalty[i];
	dfs1(0, k);
	printf("%.10lf\n", ans);
	return 0;
}
