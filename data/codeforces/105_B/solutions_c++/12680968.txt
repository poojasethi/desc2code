#include<iostream>
#include<cstdio>
#include<algorithm>

using namespace std;

double dx[9]={0};
double level[9]={0};
double loyal[9]={0};
int n,k;
double A;
double res=0;

double cal()
{
	double ans=0;
	double ans2=0;
	double sumb=0;
	int counter;
	int i,j;
	for(i=0;i<=(1<<n)-1;i++)
	{
		ans=1.0;
		counter=0;
		sumb=0;
		for(j=0;j<n;j++)
		{
			if(i&(1<<j))
			{
				ans*=(loyal[j]+dx[j]*10)/100;
				counter++;
			}
			else
			{
				sumb+=level[j];
				ans*=(1-(loyal[j]+dx[j]*10)/100);
			}
		}
		if(counter>n/2)
		{
			ans2+=ans;
		}
		else
		{
			ans2+=ans*A/(A+sumb);
		}
	}
	return ans2;
}

void dfs(int rest,int rank)
{
	if(rank==n)
	{
		res=max(res,cal());
		return;
	}
	int i;
	for(i=0;i<=rest&&i<=(10-(int)loyal[rank]/10);i++)
	{
		dx[rank]=i;
		dfs(rest-i,rank+1);
	}
	return;
}

int main()
{
	int i,j;
	cin>>n>>k>>A;
	for(i=0;i<n;i++)
		cin>>level[i]>>loyal[i];
	dfs(k,0);
	printf("%.10lf",res);
//	cout<<res<<endl;?
	return 0;
}
		  	 	  	 	 							   					  	