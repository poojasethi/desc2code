#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
const int N=5E5+5;
const int MOD=1E9+7;
const ll inf=1E18;
struct map{
    int x; ll t;
}a[4];
ll x,y,n,h,w,p,to,U[N],D[N],L[N],R[N];
ll ans,u,d,l,r,t;
char s[N];

int main()
{
    cin>>n>>h>>w;
    u=l=1; r=w; d=h;
    scanf("\n%s",s+1);
    for (int i=1;i<=n;i++)
    {
        if (s[i]=='U') 
        {
            x--;
            if (x<0&&!U[-x]) U[-x]=i;
        } else 
        if (s[i]=='D') 
        {
            x++;
            if (x>0&&!D[x]) D[x]=i;
        } else
        if (s[i]=='L') 
        {
            y--;
            if (y<0&&!L[-y]) L[-y]=i;
        } else 
        {
            y++;
            if (y>0&&!R[y]) R[y]=i;
        }
    }
    a[0].x=a[1].x=a[2].x=a[3].x=1;
    a[0].t=U[1]; a[1].t=D[1]; a[2].t=L[1]; a[3].t=R[1]; 
    for (;;)
    {
        p=0;
        for (int j=1;j<4;j++) if (a[j].t&&(!a[p].t||a[j].t<a[p].t)) p=j;
        if (!a[p].t)
        {
            cout<<-1; return 0;
        }
        t=a[p].t;
        if (p==0)
        {
            ans=(ans+a[p].t%MOD*(r-l+1))%MOD;
            u++;
            a[p].t=t+U[a[p].x+1]-U[a[p].x];
            if (!U[a[p].x+1])
            {
                to=a[p].x+x+1;
                if (to<N&&U[to]) a[p].t=t+n-U[a[p].x]+U[to];
                a[p].x=to;
            } else a[p].x++;
        } else
        if (p==1)
        {
            ans=(ans+a[p].t%MOD*(r-l+1))%MOD;
            d--;
            a[p].t=t+D[a[p].x+1]-D[a[p].x];
            if (!D[a[p].x+1])
            {
                to=a[p].x-x+1;
                if (to<N&&D[to]) a[p].t=t+n-D[a[p].x]+D[to];
                a[p].x=to;
            } else a[p].x++;
        } else
        if (p==2)
        {
            ans=(ans+a[p].t%MOD*(d-u+1))%MOD;
            l++;
            a[p].t=t+L[a[p].x+1]-L[a[p].x];
            if (!L[a[p].x+1])
            {
                to=a[p].x+y+1;
                if (to<N&&L[to]) a[p].t=t+n-L[a[p].x]+L[to];
                a[p].x=to;
            } else a[p].x++;
        } else
        {
            ans=(ans+a[p].t%MOD*(d-u+1))%MOD;
            r--;
            a[p].t=t+R[a[p].x+1]-R[a[p].x];
            if (!R[a[p].x+1])
            {
                to=a[p].x-y+1;
                if (to<N&&R[to]) a[p].t=t+n-R[a[p].x]+R[to];
                a[p].x=to;
            } else a[p].x++;
        }
        if (u>d||l>r)
        {
            cout<<ans; return 0;
        }
    }   
}
