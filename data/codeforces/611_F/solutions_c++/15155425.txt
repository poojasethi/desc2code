//what happen?
#include<bits/stdc++.h>
using namespace std;
#define rep(i,s,t) for (int i=s;i<=t;i++)
#define pi acos(-1)
typedef long long LL;
typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef pair<PII, PII> PPP;
typedef pair<PII, int> PPI;
#define repp(i,s,t) for (int i=s;i>=t;i--)
template<class T> T sqr(T x) {return x*x;}
#define debug(x) cerr<<#x"="<<(x)<<endl;
#define pb(x) push_back(x);
#define ori(x) x-'a'
const LL mod = 1e9 + 7;
const int maxn = 1000000;
const LL inf = 10000000000000000ll;
int n, w, h;
char str[maxn];
LL mpx[maxn], mpy[maxn];
int main()
{
	scanf("%d%d%d",&n,&w,&h);
	scanf("%s",str);
	int shift = 0;
	rep(i,0,max(w,h)) mpx[i] = mpy[i] = inf;
	rep(i,0,n-1)
	{
		if (str[i] == 'U') shift++;
		else if (str[i] == 'D') shift--;
		if (shift > 0 && shift <= w) mpx[shift-1] = min(mpx[shift-1], 1ll*i);
		if (w + shift >= 0 && shift < 0) mpx[w + shift] = min(mpx[w + shift], 1ll*i);
	}
	if (shift > 0) rep(i, shift, w-1) mpx[i] = min(mpx[i], mpx[i-shift] + n);
	else if (shift < 0) repp(i, w + shift, 0) mpx[i] = min(mpx[i], mpx[i-shift] + n);
	
	shift = 0;
	rep(i,0,n-1)
	{
		if (str[i] == 'L') shift++;
		else if (str[i] == 'R') shift--;
		if (shift > 0 && shift <= h) mpy[shift-1] = min(mpy[shift-1], 1ll*i);
		if (h + shift >= 0 && shift < 0) mpy[h + shift] = min(mpy[h + shift], 1ll*i);
	}
	if (shift > 0) rep(i, shift, h-1) mpy[i] = min(mpy[i], mpy[i-shift] + n);
	else if (shift < 0) repp(i, h + shift, 0) mpy[i] = min(mpy[i], mpy[i-shift] + n);
	int flag1 = 0, flag2 = 0;
	rep(i,0,w-1) 
	{
		if (mpx[i] == inf) flag1 = 1;
	//	cout << i << " " << mpx[i] << endl;
	}
	rep(i,0,h-1)
	{
		if (mpy[i] == inf) flag2 = 1;
	//	cout << i << " " << mpy[i] << endl;
	}
	if (flag1 && flag2)
	{
		puts("-1");
		return 0;
	}

	LL ans = 1ll * w * h;
	int lx = 0, ly = 0, rx = w - 1, ry = h - 1;
	while (lx <= rx && ly <= ry)
	{
		LL tmp = min(min(mpx[lx], mpx[rx]), min(mpy[ly], mpy[ry]));
		if (tmp == mpx[lx]) lx++, ans = (ans + 1LL * (ry - ly + 1) * tmp) % mod;
		else if (tmp == mpx[rx]) rx--, ans = (ans + 1LL * (ry - ly + 1) * tmp) % mod;			
		else if (tmp == mpy[ly]) ly++, ans = (ans + 1LL * (rx - lx + 1) * tmp) % mod;
		else ry--, ans = (ans + 1LL * (rx - lx + 1) * tmp) % mod;
	}
	cout << ans << endl;
}
