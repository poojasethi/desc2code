#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <map>
#include <vector>
#include <set>
#include <iomanip>
using namespace std;

const int size = 1000111;
const int bas  =  500011;
typedef long long ll;
typedef  double dd;
typedef pair<int, int> pp;
int mod = 1000000007;
ll inf = 1e18;

int n, h, w, nx, ny, maxx, minx, maxy, miny;
char ch[size];
ll dx[size], dy[size];

void move(int &x, int &y, char ch) {
    if (ch == 'U') x++;
    else if (ch == 'D') x--;
    else if (ch == 'L') y--;
    else y++;
}

int loop() {
    dx[bas] = dy[bas] = 0;
    for (int i = 0; i < n; i++) {
        move(nx, ny, ch[i]);
        maxx = max(maxx, nx);
        minx = min(minx, nx);
        maxy = max(maxy, ny);
        miny = min(miny, ny);
        dx[bas+nx] = min(dx[bas+nx], i+1ll);
        dy[bas+ny] = min(dy[bas+ny], i+1ll);
    }
    if (nx == 0 && ny == 0) {
        if (maxx - minx < h && maxy - miny < w) return 1;
    }
    return 0;
}

void init() {
    if (nx > 0) {
        for (int i = bas; i < size; i++) {
            if (dx[i] == inf && dx[i-nx] != inf) {
                dx[i] = n + dx[i-nx];
            }
        }
    }
    if (ny > 0) {
        for (int i = bas; i < size; i++) {
            if (dy[i] == inf && dy[i-ny] != inf) {
                dy[i] = n + dy[i-ny];
            }
        }
    }
    if (nx < 0) {
        for (int i = bas; i; i--) {
            if(dx[i] == inf && dx[i-nx] != inf) {
                dx[i] = n + dx[i-nx];
            }
        }
    }
    if (ny < 0) {
        for (int i = bas; i; i--) {
            if(dy[i] == inf && dy[i-ny] != inf) {
                dy[i] = n + dy[i-ny];
            }
        }
    }
}

ll tmp[size], sum[size];

int cal() {
    init();
    for (int col = 1; col <= w; col++) {
        tmp[col] = min(dy[bas-col], dy[bas+w-col+1]);
    }
    sort(tmp+1, tmp+w+1);
    for (int col = 1; col <= w; col++)
        sum[col] = sum[col-1] + tmp[col];
    ll ans = 0;
    for (int row = 1; row <= h; row++) {
        ll cnt = min(dx[bas-row], dx[bas+h-row+1]);
        int idx = lower_bound(tmp+1, tmp+w+1, cnt) - tmp - 1;
        ans = (ans + cnt * (w - idx) + sum[idx]) % mod;
    }
    return ans;
}

int main() {
    cin >> n >> h >> w;
    scanf("%s", ch);
    for (int i = 0; i < size; i++) dx[i] = dy[i] =inf;
    if (loop()) cout << -1 <<endl;
    else cout << cal() <<endl;
}

	  		  		  	   			 	 	  					 	