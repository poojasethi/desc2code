#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <utility>
using namespace std;
#define MOD 1000000007
int n;
char s[2202020];

inline void ADD(int &a, int b)
{
    a += b;
    if (a>=MOD)
        a-=MOD;
}
inline int MUL(int a, int b)
{
    return (long long)a*b%MOD;
}
vector<long long> _getmat(char forw, char backw, int bound)
{
    vector<long long>res;
    int x = 0, xl = 0, xr = 0;
    for (int i=0;i<n;i++)
    {
        if (s[i] == forw)
        {
            x++;
            if (x > xr)
            {
                xr = x;
                res.push_back(i);
            }
        }
        else if(s[i] == backw)
        {
            x--;
            if (x < xl)
            {
                xl = x;
                res.push_back(i);
            }
        }
    }
    
    {
        vector<long long>loop;
        for (int i=0;i<n;i++)
        {
            if (s[i] == forw)
            {
                x++;
                if (x > xr)
                {
                    xr = x;
                    loop.push_back(i);
                }
            }
            else if(s[i] == backw)
            {
                x--;
                if (x < xl)
                {
                    xl = x;
                    loop.push_back(i);
                }
            }
        }
        
        if (!loop.empty())
        {
            while ((int)res.size() < bound)
            {
                for (int i=0;i<(int)loop.size();i++)
                {
                    loop[i]+=n;
                    res.push_back(loop[i]);
                }
            }
        }
    }

    for (int i=0;i<(int)res.size();i++)
        res[i]++;
    return res;
}
#define go_x (yptr==ycnt||(xptr<xcnt&&xs[xptr]<ys[yptr]))
int main()
{
    int h, w;
    scanf("%d %d %d", &n, &h, &w);
    scanf("%s", s);
    vector<long long>xs = _getmat('R', 'L', w);
    vector<long long>ys = _getmat('U', 'D', h);
    int xcnt = xs.size();
    int ycnt = ys.size();
    int xptr = 0;
    int yptr = 0;
    int ans = 0;
    while (xptr < xcnt || yptr < ycnt)
    {
        if (!h || !w)
            break;
        if (go_x)
        {
            ADD(ans, MUL(h, xs[xptr]%MOD));
            xptr++;
            w--;
        }
        else
        {
            ADD(ans, MUL(w, ys[yptr]%MOD));
            yptr++;
            h--;
        }
    }

    if (h>0&&w>0)
        printf("-1\n");
    else
        printf("%d\n", ans);
    return 0;
}
		 		 		 		  				  	 				 		