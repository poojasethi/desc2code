#include <iostream>
#include <cassert>
#include <vector>
using namespace std;

const long long MOD = 1000000007LL;
const int N = 555555;
int n, h, w;
char cmd[N];
int f[N], fn;

long long add(long long a, long long b) { return (a + b) % MOD; }
long long mul(long long a, long long b) { return (a * b) % MOD; }

long long calc() {
    int minx = 0, maxx = 0, miny = 0, maxy = 0, x = 0, y = 0;
    long long ans = 0;
    for (int i = 0; i < n && h && w; i++) {
        switch (cmd[i]) {
            case 'U': if (--x < minx) { minx = x; ans = add(ans, mul(w, i + 1)); h--; } break;
            case 'D': if (++x > maxx) { maxx = x; ans = add(ans, mul(w, i + 1)); h--; } break;
            case 'L': if (--y < miny) { miny = y; ans = add(ans, mul(h, i + 1)); w--; } break;
            case 'R': if (++y > maxy) { maxy = y; ans = add(ans, mul(h, i + 1)); w--; } break;
        }
    }
    if (h && w && x == 0 && y == 0) { return -1; }
    if (h == 0 || w == 0) return ans;
    fn = 0;
    for (int i = 0; i < n; i++) {
        switch (cmd[i]) {
            case 'U': if (--x < minx) { minx = x; f[fn++] = i; } break;
            case 'D': if (++x > maxx) { maxx = x; f[fn++] = i; } break;
            case 'L': if (--y < miny) { miny = y; f[fn++] = i; } break;
            case 'R': if (++y > maxy) { maxy = y; f[fn++] = i; } break;
        }
    }
    int idx = 0;
    long long inc = n;
    while (h && w) {
        switch (cmd[f[idx]]) {
            case 'U': case 'D': ans = add(ans, mul(w, inc + f[idx] + 1)); h--; break;
            case 'L': case 'R': ans = add(ans, mul(h, inc + f[idx] + 1)); w--; break;
        }
        if (++idx == fn) { inc = add(inc, n); idx = 0; }
    }
    return ans;
}

int main() {
    cin >> n >> h >> w;
    cin >> cmd;
    cout << calc() << endl;
    return 0;
}
