#include <cstdio>
#include <algorithm>
#define N 500005
#define M 1000000007
#define INF (1LL << 60)
#define LL long long
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
#define fe(a, b, c) for(int a = (b); a; a = c[a])
using namespace std;

int n, w, h, dx, dy, bx, by, sx, sy, lb, rb, ans, lsum[N], rsum[N];
LL *x, *y, buf[N * 4];
char s[N];
bool lf, rf;

LL tt(int dis, int s, int d, int sign, LL x[]){
	LL ret = x[dis];
	if(d * sign > 0 && abs(dis) > abs(s)){
		LL rd = (LL) (abs(dis) - abs(s) - 1) / abs(d) + 1;
		ret = min(ret, rd * n + x[(abs(dis) - abs(d) * rd) * sign]);
	}
	return ret;
}

int crash(int cy, int cx, LL &t){
	t = tt(-cx, sx, dx, -1, x);
	t = min(t, tt(w - cx + 1, bx, dx, 1, x));
	t = min(t, tt(-cy, sy, dy, -1, y));
	t = min(t, tt(h - cy + 1, by, dy, 1, y));
	
	if(t == tt(-cx, sx, dx, -1, x)) return 3;
	if(t == tt(w - cx + 1, bx, dx, 1, x)) return 1;
	if(t == tt(-cy, sy, dy, -1, y)) return 0;
	if(t == tt(h - cy + 1, by, dy, 1, y)) return 2;
}

int main(){
	scanf("%d %d %d %s", &n, &h, &w, s);
	
	fi(i, 0, N * 4) buf[i] = INF;
	x = &buf[N];
	y = &buf[3 * N];
	
	x[0] = y[0] = 0;
	fi(i, 0, n){
		if(s[i] == 'U') dy--;
		if(s[i] == 'R') dx++;
		if(s[i] == 'D') dy++;
		if(s[i] == 'L') dx--;
		
		if(x[dx] == INF) x[dx] = i + 1;
		if(y[dy] == INF) y[dy] = i + 1;
		
		bx = max(bx, dx);
		by = max(by, dy);
		sx = min(sx, dx);
		sy = min(sy, dy);
	}
	
	if(!dx && !dy && by - sy < h && bx - sx < w){
		puts("-1");
		return 0;
	}
	
	lb = 0;
	rb = w + 1;
	
	FI(i, 1, w) lsum[i] = ((LL) tt(-i, sx, dx, -1, x) + lsum[i - 1]) % M;
	FD(i, w, 1) rsum[i] = ((LL) tt(w - i + 1, bx, dx, 1, x) + rsum[i + 1]) % M;
	
	FI(i, 1, h){
		LL t;
		if(!lf && crash(i, lb, t) != 3) lf = 1;
		if(!rf && crash(i, rb, t) != 1) rf = 1;
		
		if(lf) while(crash(i, lb, t) != 3) lb--;
		else while(crash(i, lb + 1, t) == 3) lb++;
		
		if(rf) while(crash(i, rb, t) != 1) rb++;
		else while(crash(i, rb - 1, t) == 1) rb--;
		
		ans = (ans + lsum[lb]) % M;
		ans = (ans + rsum[rb]) % M;
		
		if(lb < rb - 1){
			crash(i, lb + 1, t);
			ans = (t % M * (rb - lb - 1) + ans) % M;
		}
	}
	
	printf("%d\n", ans);
	scanf("\n");
}
