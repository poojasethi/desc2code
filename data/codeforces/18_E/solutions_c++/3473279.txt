#include <cstdio>
#include <cstring>
const int MAXN = 500;
char map[MAXN][MAXN];
int dp[MAXN][26][26];
char path[MAXN][26][26][2];
int count[MAXN][2][26]; // char on single/double index
int main(int argc, char const *argv[])
{
	int n, m;
	scanf("%d %d ", &n, &m);
	for (int i = 0; i < n; ++i) {
		for (int j = 0, k = 0; j < m; ++j, k ^= 1) {
			map[i][j] = getchar();
			++count[i][k][map[i][j] - 'a'];
		}
		getchar();
	}
	memset(dp, 0x7f, sizeof(dp));
	int r = MAXN * MAXN;
	char r1, r2;
	for (int i = 0; i < n; ++i)
	{
		for (int c1 = 0; c1 != 26; ++c1) {
			for (int c2 = 0; c2 != 26; ++c2) {
				if (c1 == c2) continue;
				int v = m - count[i][0][c1] - count[i][1][c2];
				if (!i) {
					dp[i][c1][c2] = v;
				} else {
					for (int pc1 = 0; pc1 != 26; ++pc1) {
						if (pc1 == c1) continue;
						for (int pc2 = 0; pc2 != 26; ++pc2) {
							if (pc2 == c2 || pc1 == pc2) continue;
							if (dp[i][c1][c2] > v + dp[i - 1][pc1][pc2]) {
								dp[i][c1][c2] = v + dp[i - 1][pc1][pc2];
								path[i][c1][c2][0] = pc1;
								path[i][c1][c2][1] = pc2;
							}
						}
					}
				}
				if (i == n - 1 && dp[i][c1][c2] < r) {
					r = dp[i][c1][c2];
					r1 = c1;
					r2 = c2;
				}
			}
		}
	}
	for (int i = n - 1; i >= 0; --i) {
		for (int j = 0, k = 0; j != m; ++j, k ^= 1) {
			map[i][j] = 'a' + (k? r2 : r1);
		}
		char* p = path[i][r1][r2];
		r1 = p[0];
		r2 = p[1];
	}
	printf("%d\n", r);
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			putchar(map[i][j]);
		}
		putchar('\n');
	}
	return 0;
}