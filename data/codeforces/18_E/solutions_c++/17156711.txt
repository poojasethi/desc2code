#include<map>
#include<cmath>
#include<queue>
#include<stack>
#include<string>
#include<vector>
#include<cstdio>
#include<bitset>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
using namespace std;
typedef long long LL;
const int low(int x){ return x&-x; }
const int INF = 0x7FFFFFFF;
const int mod = 1e9 + 7;
const int maxn = 5e2 + 10;
int T, n, m;
int cnt[2][maxn];
int u[maxn][maxn], t, p[maxn][maxn];
string v[maxn][maxn];
char s[maxn];

void dfs(int x, int y)
{
	if (!x) return;
	dfs(x - 1, p[x][y]);
	for (int i = 0; i < m; i++)
	{
		if (i & 1) printf("%c", v[x][y][1]);
		else printf("%c", v[x][y][0]);
	}
	printf("\n");
}

int main()
{
	scanf("%d%d", &n, &m);
	u[0][0] = 0;	v[0][0] = "12";
	for (int now = 1; now <= n; now++)
	{
		scanf("%s", s);	 t = 0;
		for (int k = 'a'; k <= 'z'; k++) cnt[0][k] = cnt[1][k] = 0;
		for (int k = 0; k < m; k++) cnt[k & 1][s[k]]++;
		for (char i = 'a'; i <= 'z'; i++)
		{
			for (char j = 'a'; j <= 'z'; j++)
			{
				if (i == j) continue;
				v[now][t] = "";
				v[now][t] = v[now][t] + i + j;
				u[now][t] = (m + 1) / 2 - cnt[0][i] + (m / 2) - cnt[1][j];
				for (int k = 0; k < 50; k++)
				{
					if (v[now][t][0] == v[now - 1][k][0]) continue;
					if (v[now][t][1] == v[now - 1][k][1]) continue;
					u[now][t] += u[now - 1][k]; p[now][t] = k; break;
				}
				for (int k = t; k; k--)
				{
					if (u[now][k] < u[now][k - 1])
					{
						swap(u[now][k], u[now][k - 1]);
						swap(v[now][k], v[now][k - 1]);
						swap(p[now][k], p[now][k - 1]);
					}
					else break;
				}
				if (t < 50) t++;
			}
		}
	}
	printf("%d\n", u[n][0]);
	dfs(n , 0);
	return 0;
}
         	  	  				 	    	 			