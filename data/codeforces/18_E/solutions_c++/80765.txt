#include <cstdio>
#include <cstring>

int R, C;
char a[512][512];
int cnt[512][2][26];

int memo[512][26][26];

char sol[512][2];

int rec( int r, int c1, int c2, int reconstruct ) {
   if( r == R ) return 0;

   if( !reconstruct && memo[r][c1][c2] != -1 ) return memo[r][c1][c2];

   int ret = 1000000000;
   
   for( int d1 = 0; d1 < 26; ++d1 ) 
      for( int d2 = 0; d2 < 26; ++d2 ) {
         if( d1 == d2 ) continue;
         if( c1 == d1 ) continue;
         if( c2 == d2 ) continue;
         
         int cost = C - cnt[r][0][d1] - cnt[r][1][d2];
         int t = cost + rec( r+1, d1, d2, 0 );

         if( t < ret ) ret = t;
      }

   if( !reconstruct ) memo[r][c1][c2] = ret;
   else {
      for( int d1 = 0; d1 < 26; ++d1 ) 
         for( int d2 = 0; d2 < 26; ++d2 ) {
            if( d1 == d2 ) continue;
            if( c1 == d1 ) continue;
            if( c2 == d2 ) continue;
            
            int cost = C - cnt[r][0][d1] - cnt[r][1][d2];
            int t = cost + rec( r+1, d1, d2, 0 );
            
            if( t == ret ) {
               sol[r][0] = d1+'a';
               sol[r][1] = d2+'a';
               return cost + rec( r+1, d1, d2, 1 );
            }
         }
   }
   return ret;
}

int main( void ) {
   scanf( "%d%d", &R, &C );
   for( int r = 0; r < R; ++r ) {
      scanf( "%s", a[r] );
      for( int c = 0; c < C; ++c ) 
         ++cnt[r][c&1][a[r][c]-'a'];      
   }

   memset( memo, -1, sizeof memo );
   
   printf( "%d\n", rec( 0, -1, -1, 1 ) );
   for( int r = 0; r < R; ++r ) {
      for( int c = 0; c < C; ++c ) 
         printf( "%c", sol[r][c&1] );
      printf( "\n" );
   }
   
   return 0;
}
