import sys
k,n,m,q=map(int,sys.stdin.readline().strip().split(' '))

# Basic name to item number dict
basic_artifacts={}

# Composite name to array of
# tuples (item number, # of items) dict
composite_artifacts={}

for i in range(n):
    artifact=sys.stdin.readline().strip()
    basic_artifacts[artifact]=i

for i in range(m):
    line=sys.stdin.readline().strip()
    composite_name, rest_half =line.split(': ')
    components =rest_half.split(', ')
    composition=[]
    for component in components:
        basic_artifact,quantity=component.split(' ')
        composition.append((basic_artifact,int(quantity)))
    composition.sort()
    composite_artifacts[composite_name]=composition

hero_basic_artifacts=[{} for i in range(101)]
hero_composite_artifacts=[{} for i in range(101)]

for i in range(q):
    buyer,item=sys.stdin.readline().strip().split(' ')
    buyer=int(buyer)
    #item_no=basic_artifacts[item]
    hero_basic_artifacts[buyer].setdefault(item,0)
    hero_basic_artifacts[buyer][item]+=1

    for composite_name,composition in composite_artifacts.iteritems():
        impos=False
        for (item, quantity) in composition:
            if not hero_basic_artifacts[buyer].has_key(item):
                impos=True
                break
            if hero_basic_artifacts[buyer][item]<quantity:
                impos=True
                break
        if not impos:
            for (item,quantity) in composition:
                hero_basic_artifacts[buyer][item]-=quantity
            hero_composite_artifacts[buyer].setdefault(composite_name,0)
            hero_composite_artifacts[buyer][composite_name]+=1
            break

for i in range(1,k+1):
    items=[]
    for item,quantity in hero_basic_artifacts[i].iteritems():
        if quantity>0:
            items.append((item,quantity))
    for item,quantity in hero_composite_artifacts[i].iteritems():
        if quantity>0:
            items.append((item,quantity))
    items.sort()
    print len(items)
    for item,quantity in items:
        print item,quantity


            


