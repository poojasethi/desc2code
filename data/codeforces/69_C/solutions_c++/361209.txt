#include <map>
#include <string>
#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

int main()
{
	int f, i, c, b;
	char vet[102];
	vector<pair<string, map<string, int> > > combos;
	map<string, int> friends[101];
	
	scanf("%d%d%d%d", &f, &i, &c, &b);
	
	for (int z = 0; z < i; ++z)
		scanf("%s", vet);
		
	for (int z = 0; z < c; ++z)
	{
		scanf(" %s ", vet);
		vet[strlen(vet)-1] = 0;
		pair<string, map<string, int> > p;
		p.first = vet;
		while (true)
		{
			scanf(" %s ", vet);
			string s = vet;
			scanf(" %s ", vet);
			bool stop = false;
			if (vet[strlen(vet)-1] != ',')
				stop = true;
			int a;
			sscanf(vet, "%d", &a);
			p.second.insert(make_pair(s, a));
			if (stop)
				break;
		} 
		combos.push_back(p);
	}
	
	for (int z = 0; z < b; ++z)
	{
		int a;
		scanf(" %d %s ", &a, vet);
		string aux = vet;
		friends[a][vet] += 1;
		// checa os combos
		for (vector<pair<string, map<string, int> > >::iterator it = combos.begin(); it != combos.end(); ++it)
		{
			bool good = true;
			for (map<string, int>::iterator ot = it->second.begin(); ot != it->second.end(); ++ot)
			{
				if (friends[a][ot->first] < ot->second)
				{
					good = false;
					break;
				}
			}
			if (good)
			{
				for (map<string, int>::iterator ot = it->second.begin(); ot != it->second.end(); ++ot)
				{
					friends[a][ot->first] += -(ot->second);
				}
				friends[a][it->first] += 1;
				break;
			}
		}
	}
	
	for (int z = 1; z <= f; ++z)
	{
		for (map<string, int>::iterator it = friends[z].begin(); it != friends[z].end(); )
		{
			if (it->second == 0)
				friends[z].erase(it++);
			else
				++it;
		}
		printf("%d\n", friends[z].size());
		for (map<string, int>::iterator it = friends[z].begin(); it != friends[z].end(); ++it)
			printf("%s %d\n", it->first.c_str(), it->second);
	}
	
	return 0;
}

