#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <cstdlib>

using namespace std;

const int N = 100;

map<string, int> mb[N];
map<string, int> mc[N];

int main() {
  int n, m, c, q; cin >> n >> m >> c >> q;

  string s;
  for (int i = 0; i < m; i++) cin >> s;

  map< string, vector< pair<string, int> > > cc;
  for (int i = 0; i < c; i++) {
    cin >> s; s = s.substr(0, s.size()-1);
    vector< pair<string, int> > v;
    while (true) {
      bool cont = false;
      string b, temp; cin >> b >> temp;
      if (temp[temp.size()-1] == ',') {
        cont = true;
        temp = temp.substr(0, temp.size()-1);
      }
      v.push_back(make_pair(b, atoi(temp.c_str())));
      if (!cont) break;
    }
    cc[s] = v;
  }

  for (int i = 0; i < q; i++) {
    int id; cin >> id; id--;
    cin >> s;
    mb[id][s]++;
    map<string, vector< pair<string, int> > >::iterator it = cc.begin();
    while (it != cc.end()) {
      bool valid = true;
      for (int j = 0; valid && j < it->second.size(); j++) {
        if (mb[id][it->second[j].first] < it->second[j].second) valid = false;
      }

      if (valid) {
        mc[id][it->first]++;
        for (int j = 0; j < it->second.size(); j++) mb[id][it->second[j].first] -= it->second[j].second;
        break;
      }
      it++;
    }
  }

  for (int i = 0; i < n; i++) {
    map<string, int>::iterator it = mc[i].begin();
    while (it != mc[i].end()) {
      mb[i][it->first] = it->second;
      it++;
    }

    it = mb[i].begin();
    vector< pair<string, int> > v;
    while (it != mb[i].end()) {
      if (it->second > 0) {
        v.push_back(make_pair(it->first, it->second));
      }
      it++;
    }

    cout << v.size() << endl;
    for (int i = 0; i < v.size(); i++) cout << v[i].first << " " << v[i].second << endl;
  }

  return 0;
}

