#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <stack>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

char buf[1000000];

string input(void){
    gets(buf);
    string s = buf;
    return s;
}

int K,N,M,Q;
string basic[60],composite[60];
map <string, int> mp; // basic -> id
vector <int> v[60];
int cnt[110][60]; // people, id
map <string, int> ans[110];

void parse(int id, string s){
    int x,i;
    
    REP(i,s.length()) if(s[i] == ':' || s[i] == ',') s[i] = ' ';
    istringstream ss(s);
    
    ss >> composite[id];
    
    REP(i,N) v[id].push_back(0);
    while(ss >> s >> x) v[id][mp[s]] = x;
}

void query(int p, int x){
    int i,j;
    
    cnt[p][x]++;
    ans[p][basic[x]]++;
    
    REP(i,M){
        bool can = true;
        REP(j,N) if(cnt[p][j] < v[i][j]) can = false;
        if(can){
            REP(j,N){
                cnt[p][j] -= v[i][j];
                ans[p][basic[j]] -= v[i][j];
            }
            ans[p][composite[i]]++;
        }
    }
}

int main(void){
    int i,p;
    
    cin >> K >> N >> M >> Q;
    REP(i,N) {cin >> basic[i]; mp[basic[i]] = i;}
    input();
    REP(i,M) parse(i,input());
    REP(i,Q){
        scanf("%d%s",&p,buf);
        string s = buf;
        query(p-1,mp[s]);
    }
    
    REP(i,K){
        int cnt = 0;
        foreach(ans[i],itr) if((itr->second) > 0) cnt++;
        printf("%d\n",cnt);
        foreach(ans[i],itr) if((itr->second) > 0) printf("%s %d\n",(itr->first).c_str(),(itr->second));
    }
    
    return 0;
}
