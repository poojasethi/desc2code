#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <map>
#include <vector>
#include <memory.h>
#include <string>
#include <set>

using namespace std;

map<string,int> conv;

int K, N, M,Q;

string name[50];

vector<string> sol[50];

int hero[100][50];

multiset<string> person[100];

struct Component
{
	string name;
	int require[50];
}com[50];

bool Build(int n, int m)
{
	for(int k=0;k<N;k++)
	{
		if(hero[n][k]<com[m].require[k])
		{
			return false;
		}
	}
	
	for(int k=0;k<N;k++)
	{
		hero[n][k]-=com[m].require[k];
	}
	
	person[n].insert(com[m].name);
	
	return true;
}

int main()
{
	scanf("%d %d %d %d",&K,&N,&M,&Q);
	
	memset(hero,0,sizeof(hero));
	
	for(int n=0;n<N;n++)
	{
		cin>>name[n];
		conv[name[n]]=n;
		
		//cout<<"NAME: "<<name[n]<<endl;
	}
	
	for(int m=0;m<M;m++)
	{
		memset(com[m].require,0,sizeof(com[m].require));
		
		char help[200];
		scanf("%s:",help);
		
		help[strlen(help)-1]=0;
		
		com[m].name = help;
			
		string str;
		int num;
		
		while(true)
		{
			cin>>str;
			scanf("%d",&num);
			
			com[m].require[conv[str]]+=num;
	
			char ch = getchar();
			
			if(ch!=',')
			{
				break;
			}
		}
	}
	
	for(int q=0;q<Q;q++)
	{
		int num;
		string str;
		cin>>num>>str;
		num--;
		hero[num][conv[str]]++;
		
		for(int m=0;m<M;m++)
		{
			if(Build(num,m))
			{
				break;
			}
		}
	}
	
	
	for(int k=0;k<K;k++)
	{

		
		for(int n=0;n<N;n++)
		{
			while(hero[k][n]>0)
			{
				hero[k][n]--;
				person[k].insert(name[n]);
			}
		}
		
		
		vector< pair<string,int> > v;
		
		while(!person[k].empty())
		{
			int counter =1;
			string HELP = *person[k].begin();
			person[k].erase(person[k].begin());
			
			while(!person[k].empty() && *person[k].begin()==HELP)
			{
				counter++;
				person[k].erase(person[k].begin());
			}
			
			v.push_back(pair<string,int>(HELP,counter));
		}
		
		printf("%d\n",v.size());
		
		for(vector< pair<string,int> >::iterator it = v.begin();it!=v.end();it++)
		{
			cout<<(it->first);
			printf(" %d\n",it->second);
		}
		
		
		
	}
	
	
	
}