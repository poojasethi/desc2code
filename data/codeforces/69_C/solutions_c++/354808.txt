#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <sstream>

using namespace std;

int main()
{
  int k,n,m,q;
  cin>>k>>n>>m>>q;
  vector<map<string,int> > tiene(k);
  map<string,vector<pair<string,int> > > composite;
  string s;
  for (int i=0;i<n;i++)
    cin>>s;
  for (int i=0;i<m;i++) {
    string name;
    cin>>name;
    name=name.substr(0,int(name.size())-1);
    string line;
    getline(cin,line);
    istringstream ci(line);
    string basic;
    int num;
    char c;
    while (ci>>basic>>num) {
      composite[name].push_back(pair<string,int> (basic,num));
      //cout<<"ponemos "<<name<<","<<basic<<","<<num<<endl;
      ci>>c;
    }
  }







  for (int i=0;i<q;i++) {
    int id;
    string basic;
    cin>>id>>basic;
    id--;
    tiene[id][basic]++;
    map<string,int> &ti=tiene[id];
    for (map<string,vector<pair<string,int> > >::iterator it=composite.begin();
	 it!=composite.end();it++) {
      string compo=it->first;
      vector<pair<string,int> > &v=it->second;
      bool sepuede=true;
      for (int j=0;j<int(v.size()) and sepuede;j++) {
	pair<string,int> &p=v[j];
	string &basic=p.first;
	int num=p.second;
	sepuede=(ti[basic]>=num);
      }
      if (sepuede) {
	//cout<<"SEpuede"<<endl;
	for (int j=0;j<int(v.size()) and sepuede;j++) {
	  pair<string,int> &p=v[j];
	  string &basic=p.first;
	  int num=p.second;
	  ti[basic]-=num;
	}
	ti[compo]++;
	break;
      }
    }
  }
  for (int i=0;i<k;i++) {
    map<string,int> ti=tiene[i];
    int numdif=0;
    for (map<string,int>::iterator it=ti.begin();it!=ti.end();it++) {
      if (it->second>0) numdif++;
    }
    cout<<numdif<<endl;
    for (map<string,int>::iterator it=ti.begin();it!=ti.end();it++) {
      if (it->second>0) {
	cout<<it->first<<" "<<it->second<<endl;
      }
    }
  }
}
