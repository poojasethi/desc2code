#include<iostream>
#include<string>
#include<map>
#include<algorithm>
#include<utility>
#include<cstring>
#include<cstdio>

using namespace std;

int butuh[101][101],punya[101][101];
pair<string,int> output[101];
string name[101],haha,hihi;
map<string,int> number;
int ally,basic,composite,query,nomor;

int main()
{
	scanf("%d %d %d %d",&ally,&basic,&composite,&query);
	for (int i=0;i<basic;i++)
	{
		cin>>name[i];
		number[name[i]] = i;
	}
	
	memset(punya,0,sizeof(punya));
	for (int i=basic;i<basic+composite;i++)
	{
		cin>>name[i];
		name[i].erase(name[i].length()-1);
		cin>>haha>>hihi;
		char c = getchar();
		while (c == ' ')
		{
			int total = 0;
			for (int j=0;j<hihi.length()-1;j++) total = total*10+hihi[j]-48;
			butuh[i][number[haha]] = total;
			cin>>haha>>hihi;
			c = getchar();
		}
		int total = 0;
		for (int j=0;j<hihi.length();j++) total = total*10+hihi[j]-48;
		butuh[i][number[haha]] = total;
		number[name[i]] = i;
	}
	
	for (int i=1;i<=query;i++)
	{
		cin>>nomor>>haha;
		punya[nomor][number[haha]]++;
		for (int j=basic;j<basic+composite;j++)
		{
			bool bisa = true;
			for (int k=0;k<basic;k++)
			{
				if (butuh[j][k] > punya[nomor][k])
				{
					bisa = false;
					break;
				}
			}
			
			if (bisa)
			{
				punya[nomor][j]++;
				for (int k=0;k<basic;k++) punya[nomor][k] -= butuh[j][k];
				break;
			}
		}
	}
	
	for (int i=1;i<=ally;i++)
	{
		int sum = 0;
		for (int j=0;j<basic+composite;j++)
		{
			if (punya[i][j])
			{
				sum++;
				output[sum] = make_pair(name[j],punya[i][j]);
			}
		}
		sort(output+1,output+sum+1);
		printf("%d\n",sum);
		for (int j=1;j<=sum;j++) cout<<output[j].first<<" "<<output[j].second<<endl;
	}
	return 0;
}
