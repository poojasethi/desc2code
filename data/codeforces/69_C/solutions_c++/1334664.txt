#include <iostream>
#include <sstream>
#include <algorithm>
#include <map>
#include <vector>
using namespace std;

map<string, int> namemap;
string names[100];
int z;
int geti(string& s) {
	if (!namemap.count(s)) {
		names[z] = s;
		namemap[s] = z;
		return z++;
	}
	return namemap[s];
}

int need[50][50];
int has[100][100];

int main() {
	int pn, n, m, q;
	cin >> pn >> n >> m >> q;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		geti(s);
	}
	for (int i = 0; i < m; i++) {
		string line;
		do {
			getline(cin, line);
		} while (line.size() <= 2);
		
		for (int j = 0; j < (int)line.size(); j++) {
			if (line[j] == ':' || line[j] == ',') {
				line[j] = ' ';
			}
		}
		
		istringstream ss(line);
		
		string t;
		ss >> t;
		geti(t);
		int c;
		while (ss >> t >> c) {
			need[i][geti(t)] += c;
		}
	}
	for (int i = 0; i < q; i++) {
		int id;
		string t;
		cin >> id >> t;
		id--;
		int item = geti(t);
		
		has[id][item]++;
		for (int j = 0; j < m; j++) {
			bool ok = true;
			for (int k = 0; k < n; k++) {
				if (has[id][k] >= need[j][k]) {
				} else {
					ok = false;
				}
			}
			if (ok) {
				for (int k = 0; k < n; k++) {
					has[id][k] -= need[j][k];
				}
				has[id][j + n]++;
				break;
			}
		}
	}
	for (int i = 0; i < pn; i++) {
		vector<pair<string, int> > out;
		for (int j = 0; j < n + m; j++) {
			if (has[i][j]) {
				out.push_back(make_pair(names[j], has[i][j]));
			}
		}
		sort(out.begin(), out.end());
		cout << out.size() << '\n';
		for (int j = 0; j < out.size(); j++) {
			cout << out[j].first << ' ' << out[j].second << '\n';
		}
	}
}
