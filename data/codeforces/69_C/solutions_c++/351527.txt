#include <algorithm>
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <limits.h>
#include <sstream>
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;

class Item {
public:
	string name;
	vector< pair<string, int> > components;
};

vector< map<string,int> > allies;
Item items[100];
vector< string > basic;

int main() {
	int k, n, m, q;
	scanf("%d %d %d %d", &k, &n, &m, &q);
	string s;
	basic.resize(n);
	for ( int i = 0; i < n; i++ ) { cin >> s; basic.push_back(s); }

	getline(cin,s);
	for ( int i = 0; i < m; i++ ) {
		getline(cin, s);
		stringstream ss(s);
		ss >> items[i].name;
		int n;
		string ttt;
		while ( ss >> s ) {
			ss >> n;
			ss >> ttt;
			items[i].components.push_back(make_pair(s,n));
		}
	}

//	for ( int j = 0; j < m; j++ ) {
//		cout << items[j].name;
//		for ( int l = 0; l < items[j].components.size(); l++ )
//			cout << " " << items[j].components[l].first << " " << items[j].components[l].second << " ";
//		cout << endl;
//	}

	allies.resize(k+1);
	int ind;
	for ( int l = 0; l < q; l++ ) {
		cin >> ind >> s;
		allies[ind][s]++;
		for ( int i = 0; i < m; i++ ) {
			bool ok = true;
			for ( int j = 0; j < items[i].components.size(); j++ )
				if ( allies[ind][items[i].components[j].first] < items[i].components[j].second ) ok = false;

			if ( ok ) {
				allies[ind][items[i].name.substr(0,items[i].name.size()-1)]++;
				for ( int j = 0; j < items[i].components.size(); j++ )
					allies[ind][items[i].components[j].first] -= items[i].components[j].second;
				break;
			}
		}
	}

	for ( int i = 1; i <= k; i++ ) {
		int cnt = 0;
		map<string,int>::iterator it;
		for ( it = allies[i].begin(); it != allies[i].end(); it++ ) if( (*it).second > 0 ) cnt++;
		printf("%d\n", cnt);
		for ( it=allies[i].begin(); it != allies[i].end(); it++ )
			if ( (*it).second > 0 )
				cout << (*it).first << " " << (*it).second << endl;
	}
		
}
