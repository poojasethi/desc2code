#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <map>
#include <string>

const int kMaxM = 50, kMaxK = 100, kMaxL = 100;

std::map<std::string, int> name;
std::string b_name[kMaxM * 2];
int c[kMaxM][kMaxM][2], nc[kMaxM];
int hash[kMaxK][kMaxM];
std::map<std::string, int> ans[kMaxK];
int k, n, m, q;

char str[100000 + 1], name_t[kMaxL + 1];

int main() {
  scanf("%d%d%d%d", &k, &n, &m, &q);
  for (int i = 0; i < n; ++i) {
    scanf("%s", name_t);
    name[name_t] = i;
    b_name[i] = name_t;
  }
  gets(str);
  for (int i = 0; i < m; ++i) {
    gets(str);
    sscanf(str, "%[^:]", name_t);
    b_name[i + n] = name_t;
    for (char *s = strtok(str, ":,"); s; s = strtok(NULL, ":,")) {
      sscanf(s, "%s%d", name_t, &c[i][nc[i]][1]);
      c[i][nc[i]][0] = name[name_t];
      if (c[i][nc[i]][1]) ++nc[i];
    }
  }
  int k_id;
  for (int i = 0; i < q; ++i) {
    scanf("%d%s", &k_id, name_t);
    ++hash[--k_id][name[name_t]];
    for (int j = 0; j < m; ++j) {
      bool found = true;
      for (int k = 0; k < nc[j]; ++k)
        if (c[j][k][1] > hash[k_id][c[j][k][0]]) {
          found = false;
          break;
        }
      if (found) {
        for (int k = 0; k < nc[j]; ++k)
          hash[k_id][c[j][k][0]] -= c[j][k][1];
        ++ans[k_id][b_name[j + n]];
        break;
      }
    }
  }
  for (int i = 0; i < k; ++i) {
    for (int j = 0; j < n; ++j)
      if (hash[i][j]) ans[i][b_name[j]] = hash[i][j];
    printf("%u\n", ans[i].size());
    for (__typeof(ans[i].begin()) itr = ans[i].begin(); itr != ans[i].end(); ++itr) {
      printf("%s %d\n", itr->first.c_str(), itr->second);
    }
  }
  return 0;
}
