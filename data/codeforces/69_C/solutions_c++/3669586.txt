#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <cassert>
#include <sstream>
#include <numeric>
#include <climits>
#include <string>
#include <cctype>
#include <ctime>
#include <iomanip>
#include <cmath>
#include <vector>
#include <queue>
#include <list>
#include <map>
#include <set>
using namespace std;

#define foreach(e, x) for (__typeof((x).begin()) e = (x).begin(); e != (x).end(); ++e)

typedef long long int64; 

const int MAX_N = 111;

int nAllies, nBasic, nComp, nPurchase;
vector <string> basicArtifact;
vector <pair <string, int> > compositeArifact[MAX_N];
map <string, int> number[MAX_N];
char buffer[111111];

bool check(int x, int k) {
	foreach (e, compositeArifact[k]) {
		if (number[x][e->first] < e->second) {
			return false;
		}
	}
	return true;
}

void tryComposite(int x) {
	while (true) {
		bool flag = false;
		for (int i = 0; i < nComp; i++) {
			if (check(x, i)) {
				flag = true;
				foreach (e, compositeArifact[i]) {
					number[x][e->first] -= e->second;
				}
				number[x][compositeArifact[i].begin()->first]++;
			}
		}
		if (!flag) {
			break;
		}
	}
}

int main() {
	cin >> nAllies >> nBasic >> nComp >> nPurchase;
	for (int i = 0; i < nBasic; i++) {
		scanf("%s", buffer);
		basicArtifact.push_back(string(buffer));
	}
	gets(buffer);
	for (int i = 0; i < nComp; i++) {
		gets(buffer);
		istringstream sin(buffer);
		string t;
		sin >> t;
		t.erase((int)t.size() - 1);
		compositeArifact[i].push_back(make_pair(t, 0));
		while (sin >> t) {
			int x;
			sin >> x;
			compositeArifact[i].push_back(make_pair(t, x));
			sin >> t;
		}
	}
	while (nPurchase--) {
		int x;
		scanf("%d%s", &x, buffer);
		number[x][string(buffer)]++;
		tryComposite(x);
	}
	for (int i = 1; i <= nAllies; i++) {
		vector <pair <string, int> > v;
		foreach (e, number[i]) {
			if (e->second > 0) {
				v.push_back(*e);
			}
		}
		sort(v.begin(), v.end());
		printf("%d\n", (int)v.size());
		foreach (e, v) {
			printf("%s %d\n", e->first.c_str(), e->second);
		}
	}
}

