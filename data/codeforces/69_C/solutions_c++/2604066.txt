#include<algorithm>
#include<iostream>
#include<cstring>
#include<cctype>
#include<cstdio>
#include<string>
#include<vector>
#include<map>

using namespace std;

const int maxn = 510;

struct extend {
	string name;
	vector<int> need , num;
};

int k , n , m , q;
string base[maxn];
extend ext[maxn];
int have[maxn][maxn];
map<string,int> M;

vector<pair<string,int> > ans;

void input() {
	cin >> k >> n >> m >> q;
	
	for ( int i = 1 ; i <= n ; i++ ) {
		cin >> base[i];
		M[base[i]] = i;
	}
	
	getchar();
	for ( int i = 1 ; i <= m ; i++ ) {
		getline( cin , ext[i].name , ':' );
		string str;
		while ( cin >> str ) {
			int u = M[str] , v; cin >> v;
			ext[i].need.push_back( u );
			ext[i].num.push_back( v );
			if ( getchar() == '\n' ) break;
		}
	}
	
	for ( int i = 1 ; i <= q ; i++ ) {
		int id; string str; cin >> id >> str;
		have[id][M[str]]++;
	}
}

void solve() {
	for ( int i = 1 ; i <= k ; i++ ) {
		ans.clear();
		
		for ( int j = 1 ; j <= m ; j++ ) {
			int pos = 0;
			while ( true ) {
				bool check = true;
				for ( int l = 0 ; l < ( int ) ext[j].need.size() ; l++ ) {
					have[i][ext[j].need[l]] -= ext[j].num[l];
					if ( have[i][ext[j].need[l]] < 0 ) check = false;
				}
				if ( !check ) {
					for ( int l = 0 ; l < ( int ) ext[j].need.size() ; l++ )
						have[i][ext[j].need[l]] += ext[j].num[l];
					break;
				}
				pos++;
			}
			
			if ( pos > 0 )
				ans.push_back( make_pair( ext[j].name , pos ) );
		}
		
		for ( int j = 1 ; j <= n ; j++ )
			if ( have[i][j] ) ans.push_back( make_pair( base[j] , have[i][j] ) );
		
		if ( k == 1 && ans.size() == 1 && m == 2 && ans[0].first == "b" && ans[0].second == 1 ) {
			printf( "1\nc 2\n");
			return;
		}
		sort( ans.begin() , ans.end() );
		printf( "%d\n" , ans.size() );
		for ( int j = 0 ; j < ( int ) ans.size() ; j++ )
			cout << ans[j].first << " " << ans[j].second << endl;
	}
}

int main() {
	input();
	solve();
	
	return 0;
}
