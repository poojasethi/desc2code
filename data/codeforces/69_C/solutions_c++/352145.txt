#include <algorithm>
#include <iostream>
#include <sstream>
#include <fstream>
#include <memory>
#include <vector>
#include <string>
#include <bitset>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <climits>
#include <cstring>
#include <cstdio>
#include <cmath>
#define sz(a) ((int)(a).size())
#define foreach(i, v) for(typeof((v).begin()) i=(v).begin(); i!=(v).end(); i++)
using namespace std;
typedef long long llong;
typedef pair<string, int> Item;

const int Maxn = 1000+10;
const int INF = 0x7f7f7f7f;
const double eps = 1e-10;
const double pi = acos(-1.0);
inline int compare(double a, double b){ return (a>b+eps) ? 1 : ((a+eps<b)?-1:0); }

char in[50000];
map<string, int> all[110];
map<string, vector<Item> > mp;

void mo__mo(int t)
{
	foreach(p, mp)
	{
		bool f = true;
		foreach(p1, p->second)
			if( all[t][p1->first] < p1->second )
			{
				f = false;
				break;
			}
		if( f )
		{
			foreach(p1, p->second)
				all[t][p1->first] -= p1->second;
			all[t][p->first]++;
		}
	}
}

int main()
{
	string s;
	char str[200];
	int k, n, m, q;
	int len, t;
	ios::sync_with_stdio(0);

	scanf("%d %d %d %d", &k, &n, &m, &q);
    for(int i=0; i<n; i++)
		scanf("%s", str);
	for(int i=0; i<m; i++)
	{
		vector<Item> vt;
		scanf("%s", str);
		gets(in);
		len = strlen(in);
		for(int j=0; j<len; j++)
			if( in[j] == ',' )
				in[j] = ' ';
		stringstream ss;
		ss<<string(in);
		while( ss>>s>>t )
			vt.push_back(Item(s, t));
		mp[string(str).substr(0, strlen(str)-1)] = vt;
	}
	for(int i=0; i<q; i++)
	{
		scanf("%d %s", &t, str);
		all[t][str]++;
		mo__mo(t);
	}
	for(int i=1; i<=k; i++)
	{
		int cnt = 0;
		foreach(p, all[i])
			if( p->second > 0 )
				cnt++;
		printf("%d\n", cnt);
		foreach(p, all[i])
			if( p->second > 0 )
				printf("%s %d\n", (p->first).c_str(), p->second);
	}

    return 0;
}
