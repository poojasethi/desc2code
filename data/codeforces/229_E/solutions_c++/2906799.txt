#include<algorithm>
#include<cstdio>

using namespace std;

const int N = 1010;

struct node {
	int x, y;
	bool operator <(const node &o) const {
		return x > o.x; 
	}
} gift[N];

int n, m, tot, tmp;
int num[N], now[N];
double p = 1, f[N][N];

int main() {
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= m; i++) {
		scanf("%d", num + i);
		for (int j = 1; j <= num[i]; j++) {
			gift[++tot].y = i;
			scanf("%d", &gift[tot].x);
		}
	}
	sort(gift + 1, gift + tot + 1);
	for (int i = 1; i <= n; i++)
		if (gift[i].x != gift[n].x)
			tmp = gift[i].y, p = p * (now[tmp] + 1) / (num[tmp] - now[tmp]), now[tmp]++;
	int l = n, r = n;
	while (l > 1 && gift[l - 1].x == gift[n].x) l--;
	while (r < tot && gift[r + 1].x == gift[n].x) r++;
	int want = n - l + 1;
	for (int i = l; i <= r; i++) gift[i - l + 1] = gift[i];
	int nn = r - l + 1; f[0][0] = p;
	for (int i = 1; i <= nn; i++) {
		f[i][0] = f[i - 1][0];
		for (int j = 1; j <= want; j++){
			tmp = gift[i].y;
			f[i][j] = f[i - 1][j - 1] * (now[tmp] + 1) / (num[tmp] - now[tmp]) * j / i +
			f[i - 1][j] * (i - j) / i;
		}
	}
	printf("%.9lf", f[nn][want]);
}
