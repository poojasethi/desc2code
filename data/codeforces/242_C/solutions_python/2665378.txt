from collections import deque

def bfs(x0, y0, x1, y1, board):
    dx = [-1,-1,-1, 0, 0, 1, 1, 1]
    dy = [-1, 0, 1,-1, 1,-1, 0, 1]
    queue = deque([(x0, y0, 0)])
    seen = {(x0, y0)}
    while queue:
        curx, cury, steps = queue.popleft()
        if curx == x1 and cury == y1:
            return steps
        for i in range(8):
            newx, newy = curx + dx[i], cury + dy[i]
            if (newx, newy) in board and (newx, newy) not in seen:
                seen.add((newx, newy))
                queue.append((newx, newy, steps + 1))
    return -1   

def main():
    x0, y0, x1, y1 = (int(x) for x in raw_input().split())
    n = int(raw_input())
    board = set()
    for i in range(n):
        r, a, b = (int(x) for x in raw_input().split())
        for j in range(a, b + 1):
            board.add((r, j))
    print bfs(x0, y0, x1, y1, board)
    
if __name__ == "__main__":
    main()