from collections import deque

start_row, start_col, end_row, end_col = map(int, raw_input().split())
n = int(raw_input())
allowed = {}
max = 10**9 + 1

for _ in range(n):
    row, col_start, col_end = map(int, raw_input().split())
    for c in range(col_start, col_end + 1):
        allowed[(row,c)] = True

def adjacent(r, c):
    moves = []
    for dr in [-1, 0, 1]:
        for dc in [-1, 0, 1]:
            if (dr or dc) and allowed.get((r + dr, c + dc)):
                moves.append((r + dr, c + dc))
    return moves

queue = deque([(start_row, start_col, 0)])
visited = set([(start_row, start_col)])
while queue:
    row, col, i = queue.pop()
    if (row, col) == (end_row, end_col):
        print i
        break
    for adj_r, adj_c in adjacent(row, col):
        if (adj_r, adj_c) not in visited:
            visited.add((adj_r, adj_c))
            queue.appendleft((adj_r, adj_c, i+1))
else:
    print -1
