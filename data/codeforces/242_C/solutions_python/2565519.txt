import sys
from collections import deque

#sys.stdin = open(r"U:\Algorithms\Codeforces\2012\149\king\test2.txt")

def around(x, y):
    for dx in range(-1, 2):
        for dy in range(-1, 2):
            if dx == dy == 0: continue
            yield x + dx, y + dy

args = sys.stdin.readline().split(' ')
x0, y0, x1, y1 = map(int, args)
lines = int(sys.stdin.readline())
allowed = {}
for _ in range(lines):
    args = sys.stdin.readline().split(' ')
    r, a, b = map(int, args)
    allowed.setdefault(r, {})
    for i in range(a, b + 1):
        allowed[r][i] = True
#print allowed

tovisit = deque()
visited = {}
def doVisit(x, y, level):
    visited.setdefault(x, {})
    visited[x][y] = level

def isAllowed(x, y):
    return allowed.get(x, {}).get(y, False)

def printfield(width, height):
    for y in range(1, height + 1):
        line = []
        for x in range(1, width + 1):
            line.append("%d %2d" % (allowed.get(x, {}).get(y, 0), visited.get(x, {}).get(y, -1)))
        print "|".join(line)

tovisit.append((x0, y0))
doVisit(x0, y0, 0)
while len(tovisit) > 0:
    #printfield(10, 10)
    #print "=" * 20
    curx, cury = tovisit.popleft()
    level = visited[curx][cury]
    if not isAllowed(curx, cury):
        continue
    elif curx == x1 and cury == y1:
        print visited[curx][cury]
        sys.exit()
    else:
        for xnew, ynew in around(curx, cury):
            if not visited.get(xnew, {}).get(ynew, False):
                tovisit.append((xnew, ynew))
                doVisit(xnew, ynew, level + 1)
print -1