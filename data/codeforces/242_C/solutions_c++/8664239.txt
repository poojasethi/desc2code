#include<iostream>
#include<queue>
#include<map>

using namespace std;

#define int long long
const int MAX = 1e9 + 5;
queue<int> q;
int n;
map<int, int> m, mark, dist;

int st(int x, int y)
{
	return MAX * x + y;
}

void enque(int x, int d)
{
	if(x < 0)
		return;
	q.push(x);
	dist[x] = d + 1;
	mark[x] = true;
}

int BFS(int s, int e)
{
	int ix[] = {-MAX + 1, 1, MAX + 1, MAX, MAX - 1, -1, -MAX - 1, -MAX};
	dist[e] = -1;
	enque(s, -1);
	while(!q.empty())
	{
		int x = q.front();
		q.pop();
		for(int i = 0; i < 8; i++)
			if(!mark[x + ix[i]] && m[x + ix[i]] == 1)
				enque(x + ix[i], dist[x]);
	}
	return dist[e];
}

main()
{
	int x1, y1, x2, y2;
	cin >> x1 >> y1 >> x2 >> y2;
	cin >> n;
	for(int i = 0; i < n; i++)
	{
		int x, l, r;
		cin >> x >> l >> r;
		for(int j = l; j <= r; j++)
			m[st(x, j)] = 1;
	}
	cout << BFS(st(x1, y1), st(x2, y2)) << endl;
	return 0;
}
