/*
 * main.cpp
 *
 *  Created on: 2013-7-10
 *      Author: whd
 */
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<string>
#include<iostream>
#include<cmath>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<set>
#include<queue>
#define pb push_back
#define mp make_pair
using namespace std;

typedef long long big;
const int inf=0x3f3f3f3f,oo=314000000;
const int N=102000;
struct lst
{
	vector<int>a;
	int dia;
};
struct node
{
	int s,d;
	node(){}
	node(int _s,int _d):s(_s),d(_d){}
	bool operator<(const node &b)const
	{
		return d>b.d;
	}
};
vector<lst>adj[N];
vector<int>radj[N];
int dia[N],prod[N];
int n,m,ind[N],dis[N];
priority_queue<node>heap;
int noww[N];
int type[N];
int vis[N],opt[N];
void dij()
{
	int i;
	node s;
	for(i=1;i<=n;i++)
		dis[i]=inf;
	for(i=1;i<=m;i++)
		if(!ind[i])
		{
			dis[prod[i]]=min(dis[prod[i]],dia[i]);
		}
	for(i=1;i<=n;i++)
		if(dis[i]<inf)
			heap.push(node(i,dis[i]));
	while(!heap.empty())
	{
		s=heap.top();
		heap.pop();
		if(dis[s.s]!=s.d)continue;
		for(i=0;i<radj[s.s].size();i++)
		{
			--ind[radj[s.s][i]];
			noww[radj[s.s][i]]+=dis[s.s];
			if(!ind[radj[s.s][i]]&&dis[prod[radj[s.s][i]]]>noww[radj[s.s][i]])
			{
				dis[prod[radj[s.s][i]]]=noww[radj[s.s][i]];
				heap.push(node(prod[radj[s.s][i]],dis[prod[radj[s.s][i]]]));
			}
		}
	}
	for(i=1;i<=n;i++)
		if(dis[i]==inf)type[i]=-1;

}
void dfs(int x)
{
	int i,j,s=0;
	vis[x]=1;
	opt[x]=dis[x];
	if(dis[x]==inf)
	{
		opt[x]=-1;
		vis[x]=2;
		return ;
	}
	for(i=0;i<adj[x].size();i++)
	{
		s=adj[x][i].dia;
		for(j=0;j<adj[x][i].a.size();j++)
		{
			if(!vis[adj[x][i].a[j]])dfs(adj[x][i].a[j]);
			if(vis[adj[x][i].a[j]]==1||opt[adj[x][i].a[j]]==-2)
				s=-2;
			if(opt[adj[x][i].a[j]]==-1)
			{
				s=-1;
				break;
			}
			if(s!=-2)s+=opt[adj[x][i].a[j]];
		}
		if(s==-2)
		{
			opt[x]=-2;
			break;
		}
		if(opt[x]!=-2&&opt[x]<s)opt[x]=s;
	}
	if(opt[x]>oo)opt[x]=oo;
	vis[x]=2;
}
int main()
{
	int w,i,x,y,z;
	lst tmp;
	scanf("%d%d",&m,&n);
	for(i=1;i<=m;i++)
	{
		scanf("%d",&x);
		scanf("%d",&y);
		tmp.a.clear();
		w=0;
		while(y--)
		{
			scanf("%d",&z);
			if(z==-1)w++;
			else
			{
				tmp.a.pb(z);
				radj[z].pb(i);
				ind[i]++;
			}
		}
		prod[i]=x;
		dia[i]=w;
		tmp.dia=w;
		noww[i]=dia[i];
		adj[x].pb(tmp);
	}
	dij();
	for(i=1;i<=n;i++)
		if(!vis[i])dfs(i);
	for(i=1;i<=n;i++)
	{
		if(dis[i]==inf)dis[i]=-1;
		if(dis[i]>=oo)dis[i]=oo;
		printf("%d %d\n",dis[i],opt[i]);
	}
}
