#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<vector>
#include<queue>
using namespace std;
typedef pair<int,int> pr;
#define mp(x,y) make_pair(x,y)
#define N 110000
#define inf 1000000000
#define INF 314000000
priority_queue<pr,vector<pr>,greater<pr> >Q;
vector<int>edge[N],b[N],E[N];
int Max[N],f[N],n,m,vis[N],a[N],cnt[N],dis[N],s[N];
bool ok[N];
int dfs(int u){
    if(vis[u])return Max[u];
    vis[u]=1;
    for(int i=0;i<E[u].size();i++){
      int t=E[u][i],pd=1;
      for(int j=0;j<b[t].size();j++)
        if(f[b[t][j]]>inf){pd=0;break;}
      if(!pd)continue;
      int ff=s[t];
      for(int j=0;j<b[t].size();j++)
        if(vis[b[t][j]]==1)ok[u]=1;
        else{
          ff=min(ff+dfs(b[t][j]),INF);
          if(ok[b[t][j]])ok[u]=1;
        }
      Max[u]=max(Max[u],ff);
    }
    vis[u]=2;
    return Max[u];
}
int main(){
    scanf("%d%d",&m,&n);
    for(int i=1;i<=m;i++){
      scanf("%d",&a[i]);
      int k;scanf("%d",&k);
      E[a[i]].push_back(i);
      for(int j=1;j<=k;j++){
        int x;scanf("%d",&x);
        if(x>0)b[i].push_back(x),edge[x].push_back(i),++cnt[i];
        else dis[i]++,s[i]++;
      }
      if(!cnt[i])Q.push(mp(dis[i],a[i]));
    }
    memset(f,60,sizeof f);
    while(!Q.empty()){
      pr rec=Q.top();Q.pop();
      int x=rec.first,y=rec.second;
      if(vis[y])continue;
      vis[y]=1;
      f[y]=x;
      for(int i=0;i<edge[y].size();++i){
        int t=edge[y][i];
        cnt[t]--;
        dis[t]=min(dis[t]+x,INF);
        if(!cnt[t])Q.push(mp(dis[t],a[t]));
      }
    }
    memset(vis,0,sizeof vis);
    for(int i=1;i<=n;i++)if(i<inf)dfs(i);
    for(int i=1;i<=n;i++)
      if(f[i]>inf)printf("-1 -1\n");
      else printf("%d %d\n",f[i],ok[i]?-2:Max[i]);
    return 0;
} 
