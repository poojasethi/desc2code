#include <cmath>
#include <map>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <bitset>
#include <memory.h>
#include <functional>
#include <queue>
#include <fstream>
#include <ctime>
#include <deque>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <cctype> 
#include <numeric> 
#include <iomanip>
#include <assert.h>
using namespace std;
#define sqr(_) ((_)*(_))

typedef pair<int, int> Pii;
#define x first
#define y second
#define mp make_pair
#define pb push_back

typedef long long LL;

const int MAXN = 100000 + 10, INF = 314000000;

int n, m, d[MAXN], f[MAXN], p[MAXN], co[MAXN], g[MAXN], used[MAXN];
bool vis[MAXN], l[MAXN];
vector<int> e[MAXN], v[MAXN], c[MAXN];
priority_queue<Pii> q;

void DFS(int x)
{
	if (used[x]) return ;
	used[x] = 1;
	for (int i = 0; i < (int)e[x].size(); ++i)
	{
		int y = e[x][i];
		bool flag = false;
		for (int k = 0; k < (int)v[y].size(); ++k)
			if (v[y][k] > 0 && f[v[y][k]] > (int)1e9)
			{
				flag = true;
				break;
			}
		if (flag) continue ;
		int Tohka = 0;
		for (int k = 0; k < (int)v[y].size(); ++k)
		{
			int t = v[y][k];
			if (t > 0)
			{
				if (used[t] == 1)
					flag = true;
				else
				DFS(t),
				Tohka = min(Tohka + g[t], INF),
				l[x] |= l[t];
			}
			else
			++Tohka, Tohka = min(Tohka, INF);
		}
		g[x] = max(g[x], Tohka);
		l[x] |= flag;
	}
	used[x] = 2;
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
#endif
	
	scanf("%d%d", &m, &n);
	for (int i = 1; i <= m; ++i)
	{
		scanf("%d", &p[i]);
		int num;
		scanf("%d", &num);
		e[p[i]].pb(i);
		for (int j = 1; j <= num; ++j)
		{
			int x;
			scanf("%d", &x);
			v[i].pb(x);
			if (x > 0)
				c[x].pb(i), ++d[i];
			else
			++co[i];
		}
		if (!d[i])
			q.push(mp(-co[i], p[i]));
	}
	memset(f, 0x3f, sizeof(f));
	while (!q.empty())
	{
		Pii w = q.top();
		q.pop();
		int x = w.y;
		if (vis[x]) continue ;
		vis[x] = true;
		f[x] = -w.x;
		for (int i = 0; i < (int)c[x].size(); ++i)
		{
			int y = c[x][i];
			co[y] = min(co[y] + f[x], INF);
			--d[y];
			if (!d[y])
				q.push(mp(-co[y], p[y]));
		}
	}
	for (int i = 1; i <= n; ++i)
		if (f[i] < (int)1e9)
			DFS(i);
	for (int i = 1; i <= n; ++i)
		if (f[i] < (int)1e9)
			if (l[i])
				printf("%d -2\n", f[i]);
			else
			printf("%d %d\n", f[i], g[i]);
		else
		puts("-1 -1");
	
	fclose(stdin);
	fclose(stdout);
	return 0;
}
