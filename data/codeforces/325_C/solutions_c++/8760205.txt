#include <cstdio>
#include <algorithm>
#include <map>
#include <set>
#include <vector>

#define forVI(itt, name) for (VI::iterator itt = name.begin(); itt != name.end(); ++itt)

using namespace std;

const int N = 100010;
const int inf = 1e9, lim = 314000000;

typedef pair<int,int> PII;
typedef vector<int> VI;

int n, m, sc[N], bad[N], src[N], cnt[N];
int done[N], f0[N], stat[N], f1[N];
VI has[N], trs[N], inw[N];
set<PII> S;

void inc(int& a, int b) {
	if (a == -2 || b == -2) a = -2;
	else if (a += b, a >= lim) a = lim;
}
void release(int d) {
	if (++cnt[d] == trs[d].size()) {
		int u = src[d], tot = sc[d];
		forVI(it, trs[d])
			inc(tot, f0[*it]);
		if (tot < f0[u]) {
			f0[u] = tot;
			S.insert(make_pair(tot, u));
		}
	}
}
void solve_0() {
	fill(f0 + 1, f0 + n + 1, inf);
	for (int i = 1; i <= m; ++i)
		if (!trs[i].size()) {
			int u = src[i];
			f0[u] = min(f0[u], sc[i]);
		}
	for (int i = 1; i <= n; ++i)
		S.insert(make_pair(f0[i], i));
	while (S.size()) {
		int u = (*S.begin()).second;
		S.erase(S.begin());
		if (done[u]) continue; else done[u] = 1;
		if (f0[u] == inf) break;
		forVI(it, inw[u]) {
			release(*it);
		}
	}
}
void dp(int u) {
	stat[u] = 1;
	f1[u] = f0[u];
	forVI(tt, has[u])
		if (!bad[*tt]) {
			int tot = sc[*tt];
			forVI(it, trs[*tt]) {
				int v = *it;
				if (stat[v] == 1) inc(tot, -2);
				else {
					if (!stat[v]) dp(v);
					inc(tot, f1[v]);
				}
			}
			if (tot == -2 || tot > f1[u]) f1[u] = tot;
			if (f1[u] == -2) break;
		}
	stat[u] = 2;
}
void solve_1() {
	for (int i = 1; i <= n; ++i)
		if (f0[i] == inf) {
			forVI(it, inw[i]) bad[*it] = 1;
		}
	for (int i = 1; i <= n; ++i)
		if (f0[i] == inf) f1[i] = -2;
		else dp(i);
}
int main() {
	scanf("%d %d", &m, &n);
	for (int i = 1; i <= m; ++i) {
		int u, k;
		scanf("%d %d", &u, &k);
		has[u].push_back(i);
		src[i] = u;
		while (k--) {
			int v;
			scanf("%d", &v);
			if (v == -1) sc[i]++;
			else {
				trs[i].push_back(v);
				inw[v].push_back(i);
			}
		}
	}
	solve_0();
	solve_1();
	for (int i = 1; i <= n; ++i) {
		if (f0[i] == inf) printf("-1 -1\n");
		else printf("%d %d\n", f0[i], f1[i]);
	}
}
