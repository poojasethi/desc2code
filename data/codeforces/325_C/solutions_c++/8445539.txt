#include<cstdio>
#include<cstring>
#include<deque>
#include<queue>
#include<algorithm>
#define PI pair<int,int>
#define FR first
#define SC second
#define MP make_pair
using namespace std;
const int TB=314000000;
struct node
{
	int point,link;
}list[100050],list0[100050];
priority_queue<PI,deque<PI>,greater<PI> > Q;
int v[100050],v0[100050],v1[100050],c[100050],T[100050];
int d0[100050],d[100050],e[100050],f[100050],vis[100050];
int next[100050],head[100050];
bool a[100050],b[100050];
int n,m,num;
void dfs(int i)
{
	int j,k,z,ans;
	vis[i]=1; j=head[i];
	while (j!=0)
	{
		if (a[j])
		{
			k=v0[j]; ans=e[j];
			while (k!=0)
			{
				z=list0[k].point;
				if (vis[z]==1) ans=-2;
				else
				{
					if (vis[z]==0) dfs(z);
					if (ans!=-2)
						if (f[z]==-2) ans=-2;
						else ans=min(ans+f[z],TB);
				}
				k=list0[k].link;
			}
			if (f[i]!=-2)
				if (ans==-2) f[i]=-2;
				else f[i]=max(f[i],ans);
		}
		j=next[j];
	}
	vis[i]=2;
}
int main()
{
	PI A;
	int i,j,x,y,t;
	scanf("%d%d",&m,&n);
	memset(v,0,sizeof(v));
	memset(v0,0,sizeof(v0));
	memset(c,0,sizeof(c));
	memset(d0,0,sizeof(d0));
	memset(b,false,sizeof(b));
	memset(head,0,sizeof(head));
	num=0;
	for (i=1;i<=m;i++)
	{
		scanf("%d%d",&T[i],&t);
		next[i]=head[T[i]]; head[T[i]]=i;
		for (j=1;j<=t;j++)
		{
			scanf("%d",&y);
			if (y==-1) d0[i]++;
			else
			{
				c[i]++; num++; list[num].point=i;
				list[num].link=v[y]; v[y]=num;
				list0[num].point=y; list0[num].link=v0[i]; v0[i]=num;
			}
		}
	}
	memcpy(e,d0,sizeof(d0));
	for (i=1;i<=n;i++) d[i]=TB+1;
	for (i=1;i<=m;i++)
		if (c[i]==0) d[T[i]]=min(d[T[i]],d0[i]);
	for (i=1;i<=n;i++)
		if (d[i]<=TB) Q.push(MP(d[i],i));
	memset(vis,0,sizeof(vis));
	while (!Q.empty())
	{
		A=Q.top(); Q.pop();
		if (vis[A.SC]) continue;
		vis[A.SC]=1; i=v[A.SC];
		while (i!=0)
		{
			y=list[i].point; c[y]--; d0[y]=min(d0[y]+d[A.SC],TB);
			if (c[y]==0)
				if ((!vis[T[y]])&&(d0[y]<d[T[y]]))
				{
					d[T[y]]=d0[y]; Q.push(MP(d[T[y]],T[y]));
				}
			i=list[i].link;
		}
	}
	for (i=1;i<=n;i++)
		if (!vis[i]) d[i]=-1;
	memset(a,true,sizeof(a));
	for (i=1;i<=m;i++)
	{
		j=v0[i];
		while (j!=0)
		{
			if (d[list0[j].point]==-1)
			{
				a[i]=false; break;
			}
			j=list0[j].link;
		}
	}
	memset(vis,0,sizeof(vis));
	memset(f,0,sizeof(f));
	for (i=1;i<=n;i++)
		if ((d[i]!=-1)&&(!vis[i])) dfs(i);
	for (i=1;i<=n;i++)
		if (d[i]==-1) printf("-1 -1\n");
		else printf("%d %d\n",d[i],f[i]);
	return 0;
}