#include <cstdio>
#include <algorithm>
#include <vector>
#include <string.h>
#include <map>
#include <queue>
#define mp make_pair
#define pb push_back
#define x first
#define y second
using namespace std;
typedef long long LL;
typedef double ld;
typedef pair<int,int> pii;
const int NMax=101000,INF=314000000,INF1=2147483647;
int M,N,left[NMax],D[NMax],D1[NMax],D2[NMax],B[NMax],F[NMax],bad[NMax];
vector<int>Rule[NMax],P[NMax];
vector<pii>Mem[NMax];
priority_queue<pii,vector<pii>,greater<pii> >Q;
int DFS(int a) {
	if(D2[a]!=-1) return D2[a];
	//if(F[a]) return -1;
	for(int i=0;i<Mem[a].size();i++) if(!bad[Mem[a][i].x]) {
		int cnt=Mem[a][i].y;
		for(int j=0;j<Rule[Mem[a][i].x].size();j++) {
			int a1=Rule[Mem[a][i].x][j];
			if(F[a1]) {
				D2[a]=-1;
				return -1;
			}
			F[a1]=1;
			int t=DFS(a1);
			if(t==-1) {
				D2[a]=-1;
				return -1;
			}		
			cnt+=t;
			if(cnt>INF) cnt=INF;
			F[a1]=0;
		}
		D2[a]=max(D2[a],cnt);
		if(D2[a]>INF) D2[a]=INF;
	}
	return D2[a];
}
int main()
{
	scanf("%d%d",&M,&N);
	for(int i=1;i<=M;i++) {
		int x,y;
		scanf("%d%d",&x,&y);
		B[i]=x;
		//Mem.pb(i);
		int flag=0;
		for(int j=1;j<=y;j++) {
			int z;
			scanf("%d",&z);
			if(z!=-1)Rule[i].pb(z),left[i]++,P[z].pb(i);
			else flag++;
		}
		Mem[x].pb(mp(i,flag));
		D1[i]=flag;
		//else D1[i]=100000000;
	}
	//memset(D,-1,sizeof(D));
	for(int i=1;i<=N;i++) {
		int minn=INF1;
		for(int j=0;j<Mem[i].size();j++)
			if(left[Mem[i][j].x]==0){
				minn=min(minn,Mem[i][j].y);
			//	D1[Mem[i][j].x]=Mem[i][j].y;
			}
		D[i]=minn;
		if(minn!=INF1)
			Q.push(mp(D[i],i));
	}
	while(!Q.empty()) {
		pii x=Q.top();Q.pop();
		if(x.x!=D[x.y]) continue;
		int a=x.x,b=x.y;
		for(int i=0;i<P[b].size();i++) {
			int c=B[P[b][i]];
			D1[P[b][i]]+=a;left[P[b][i]]--;
			if(D1[P[b][i]]>INF) D1[P[b][i]]=INF;
			if(left[P[b][i]]==0) {
				if(D1[P[b][i]]<D[c]){
					D[c]=D1[P[b][i]];
					Q.push(mp(D[c],c));
				}
			}
		}
	}
	for(int i=1;i<=N;i++) {
		D2[i]=-1;
		if(D[i]==INF1) F[i]=1;
	}
	for(int i=1;i<=M;i++) {
		for(int j=0;j<Rule[i].size();j++) {
			if(F[Rule[i][j]]) {
				bad[i]=1;
				break;
			}
		}
	}
	for(int i=1;i<=N;i++) {
		if(!F[i]) {
			F[i]=1;
			DFS(i);
			F[i]=0;
		}
	}
	for(int i=1;i<=N;i++) {
		if(D[i]==INF1) puts("-1 -1");
		else {
			printf("%d ",D[i]);
			if(D2[i]==-1) puts("-2");
			else printf("%d\n",D2[i]);
		}
	}
	return 0;
}

