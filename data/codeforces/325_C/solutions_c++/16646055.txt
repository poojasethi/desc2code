#include <bits/stdc++.h>

#define fi first
#define se second
#define mm ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)
#define inf ((lint)1e18+9)
#define max3(a,b,c) max((a),max((b),(c)))
#define bit(k) (1ll<<(k))
#define fbit(k,i) ((k) & (bit(i)))
#define pq priority_queue
#define all(v) v.begin(),v.end()
#define type(x) __typeof(x.begin())

using namespace std;

typedef double db;
typedef long long lint;
typedef pair <lint,lint> ii;
typedef pair <lint,vector <lint> > iv;
typedef pair <ii,lint> iii;
typedef vector <lint> vi;
typedef vector <ii> vii;

const lint maxn=1e5+20;

lint N,M,mn[maxn],mx[maxn],used[maxn];
vector <vi > vmx[maxn];
vii use[maxn],vmn[maxn];

void find_mn(){
	pq <ii , vii , greater <ii> > heap;
	for(lint i=1;i<=N;i++)
		if(mn[i]!=inf)
			heap.push(ii(mn[i],i));
	
	while(!heap.empty()){
		ii x=heap.top();
		heap.pop();
		if(used[x.se]) continue;
		//~ printf("%lld %lld \n",x.fi,x.se);
		lint node=x.se;
		lint val=x.fi;
		used[node]=1;
		mn[node]=val;
		
		for(lint i=0;i<use[node].size();i++){
			ii a=use[node][i];
			ii &asd=vmn[a.fi][a.se];
			
			asd.fi--;
			asd.se+=mn[node];
			if(asd.fi==0){
				umin(mn[a.fi],asd.se);
				heap.push(ii(mn[a.fi],a.fi));
			}
		}
	}
}

lint fmx(lint node){
	if(used[node]==1) return inf;
	
	lint &x=mx[node];
	
	if(x) return x;
	
	used[node]=1;
	
	for(lint i=0;i<vmx[node].size();i++){
		vi &v=vmx[node][i];
		
		bool flag=0;
		for(lint j=0;j<v.size();j++)
			if(mn[v[j]]==inf){
				flag=1;
				break;
			}
		if(flag) continue;
		
		lint sum=0;
		for(lint j=0;j<v.size();j++){
			if(v[j]==-1){
				sum++;
				continue;
			}
			
			lint a=fmx(v[j]);
			
			if(a==inf){
				sum=inf;
				break;
			}
			
			sum+=a;
		}
		
		umax(x,sum);
	}
	
	used[node]=2;
	
	return x;
}

void find_mx(){
	memset(used,0,sizeof used);
	
	for(lint i=1;i<=N;i++)
		if(!used[i])
			fmx(i);
}

int main(){
	//~ freopen("canavar.gir","r",stdin);
	//~ freopen("canavar.cik","w",stdout);
	
	cin >> M >> N;
	
	for(lint i=1;i<=N;i++)
		mn[i]=inf;
	
	for(lint i=1;i<=M;i++){
		lint type,piece;
		scanf("%lld %lld",&type,&piece);
		
		vi v;
		lint mon=0,sum=0;
		
		for(lint j=1;j<=piece;j++){
			lint a;
			scanf("%lld",&a);
			if(a!=-1){
				mon++;
				use[a].push_back(ii(type,vmn[type].size()));
			}
			
			else sum++;
			v.push_back(a);
		}
		
		vmn[type].push_back(ii(mon,sum));
		if(!mon)
			umin(mn[type],sum);
		vmx[type].push_back(v);
	}
	
	find_mn();
	find_mx();
	
	for(lint i=1;i<=N;i++){
		if(mn[i]==inf){
			puts("-1 -1");
			continue;
		}
		printf("%lld ",min(314000000ll,mn[i]));
			
		if(mx[i]==inf)
			puts("-2");
		else
			printf("%lld\n",min(314000000ll,mx[i]));
	}
	
	return 0;
}
