#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <bitset>
#include <ctime>
#include <map>
#include <queue>
#include <set>
using namespace std;

const int maxm=100000+15;
const int maxx=314000000;
struct Edge
{
	int m,l,deg,sum;
	vector <int> out;
}a[maxm];
struct Bian
{
	int x,y,next;
	Bian() {x=y=next=0;} 
	Bian(int x,int y,int next):x(x),y(y),next(next) {}
}eg1[maxm],eg2[maxm];
struct Bj
{
	int key,wz;
	Bj() {key=wz=0;}
	Bj(int key,int wz):key(key),wz(wz) {}
};
const bool operator < (const Bj &a,const Bj &b)
{
	return a.key>b.key;
}
priority_queue <Bj> que;
int hea1[maxm],hea2[maxm];
int m,n,fre1,fre2,x;
int ans1[maxm],ans2[maxm],ls[maxm];
bool vis[maxm];
bool cant[maxm];
int ins1(int x,int y)
{
	eg1[++fre1]=Bian(x,y,hea1[x]);
	hea1[x]=fre1;
	return 0;
} 
int ins2(int x,int y)
{
	eg2[++fre2]=Bian(x,y,hea2[x]);
	hea2[x]=fre2;
	return 0;
}
int found(int xx)
{
	if (vis[xx]) return ans2[xx]=-2;
	if (ans2[xx]!=0) return ans2[xx];
	vis[xx]=true;
	int ww=-2;
	for (int u=hea1[xx];u;u=eg1[u].next)
	{
		int w=eg1[u].y;
		if (cant[w]) continue;
		int anss=a[w].sum;
		for (int i=0;i<a[w].l-a[w].sum;i++)
		{
			int x=found(a[w].out[i]);
			if (x==-2) 
			{
				vis[xx]=false;
				return ans2[xx]=-2;
			}
			anss=min(anss+x,maxx);
		}
		ww=max(ww,anss);
	}
	vis[xx]=false;
	return ans2[xx]=ww;
}
int main()
{
	scanf("%d%d",&m,&n);
	for (int i=1;i<=m;i++)
	{
		scanf("%d%d",&a[i].m,&a[i].l);
		ins1(a[i].m,i);
		a[i].deg=0;
		for (int j=1;j<=a[i].l;j++)
		{
			scanf("%d",&x);
			if (x==-1)
			{
				a[i].sum++;
				continue;
			}
			a[i].deg++;
			a[i].out.push_back(x);
			ins2(x,i);	
		}
		ls[i]=a[i].sum;
	}
	for (int i=1;i<=m;i++) 
	 if (a[i].deg==0) que.push(Bj(min(maxx,a[i].sum),a[i].m));
	memset(ans1,-1,sizeof(ans1));
	while (!que.empty()) 
	{
		Bj g=que.top();
		while (ans1[g.wz]!=-1) 
		{
		   que.pop();
		   if (que.empty()) break;
 		   g=que.top();
	    }
	    if (que.empty()) break;
 		ans1[g.wz]=g.key;
		que.pop();
		for (int u=hea2[g.wz];u;u=eg2[u].next)
		 {
		 	int gg=eg2[u].y;
		 	a[gg].deg--;
		 	ls[gg]=min(ls[gg]+g.key,maxx);
		 	if (a[gg].deg==0) que.push(Bj(ls[gg],a[gg].m));
		 }
	}
	for (int i=1;i<=m;i++)
	 for (int j=0;j<a[i].l-a[i].sum;j++)
	  if (ans1[a[i].out[j]]==-1) cant[i]=true;
	for (int i=1;i<=n;i++)
	 if (ans1[i]==-1) ans2[i]=-1;
	  else found(i);
	for (int i=1;i<=n;i++) printf("%d %d\n",ans1[i],ans2[i]);
	return 0;
}
