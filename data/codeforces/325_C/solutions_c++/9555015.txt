#include <bits/stdc++.h>
#define ft first
#define sd second
#define mp make_pair
#define pb push_back
using namespace std;

typedef pair<int,int> pii;

const int N=200000+5;
const int M=200000+5;
const int INF=1000000000;
const int lim=314000000;

int n,m,cnt[M],v[M],to[M],minv[N],maxv[N],used[N];
bool vis[N],inf[N];
priority_queue<pii,vector<pii>,greater<pii> > pq;
vector<int> rel[N],use[N],rule[M];

inline void cmin(int& x,int y){if (y<x) x=y;}
inline void cmax(int& x,int y){if (y>x) x=y;}

inline void dij(void)
{
	int now;
	vector<int>::iterator iter;
	while (!pq.empty())
	{
		while (!pq.empty() && vis[pq.top().sd]) pq.pop();
		if (pq.empty()) break;
		vis[now=pq.top().sd]=1;pq.pop();
		for (iter=rel[now].begin();iter!=rel[now].end();++iter)
		{
			cmin(v[*iter]+=minv[now],lim);
			if (!--cnt[*iter]) cmin(minv[to[*iter]],v[*iter]),pq.push(mp(minv[to[*iter]],to[*iter]));
		}
	}
}

inline int dfs(int now)
{
	if (used[now]) return maxv[now];
	used[now]=1;
	vector<int>::iterator iter,it;
	bool flag,cyc=0;
	int sum;
	for (iter=use[now].begin();iter!=use[now].end();++iter)
	{
		flag=1;sum=0;
		for (it=rule[*iter].begin();it!=rule[*iter].end();++it)
			if (minv[*it]==INF){flag=0;break;}
		if (!flag) continue;
		for (it=rule[*iter].begin();it!=rule[*iter].end();++it)
		{
			if (!~(*it)) cmin(++sum,lim);else
			if (used[*it]==1) cyc=1;
			else{
				cmin(sum+=dfs(*it),lim);
				if (inf[*it]) cyc=1;
			}
		}
		cmax(maxv[now],min(sum,lim));
		if (cyc){inf[now]=1;break;}
	}
	used[now]=2;
	return maxv[now];
}

int main()
{
	int w,x;
	scanf("%d%d",&m,&n);
	for (int i=1;i<=n;++i) minv[i]=INF;
	for (int i=1;i<=m;++i)
	{
		scanf("%d%d",&to[i],&w);
		use[to[i]].pb(i);
		for (int j=1;j<=w;++j)
		{
			scanf("%d",&x);rule[i].pb(x);
			if (!~x) ++v[i];else ++cnt[i],rel[x].pb(i);
		}
		if (!cnt[i]) cmin(minv[to[i]],v[i]),pq.push(mp(minv[to[i]],to[i]));
	}
	dij();
	for (int i=1;i<=n;++i)
		if (minv[i]!=INF) dfs(i);
	for (int i=1;i<=n;++i)
		if (minv[i]==INF) puts("-1 -1");
		else printf("%d %d\n",minv[i],inf[i]?-2:maxv[i]);
	return 0;
}
