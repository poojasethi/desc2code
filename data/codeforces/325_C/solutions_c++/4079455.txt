//
// ^|feennohmo_taI_g__d
//
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <deque>
#include <set>
#include <vector>
#include <map>
#include <string>
#include <cstring>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <sstream>

#define For(i,a,n) for(int i =a ; i < n ; ++i )
#define all(x) (x).begin(),(x).end()
#define n(x) (int)(x).size()
#define pb(x) push_back(x)
#define fr first
#define sc second

using namespace std;
typedef long long ll;
typedef pair<ll,ll> pii;
const ll maxn = 100*1000+100;
const ll mod = 314*1000*1000;
ll n , m , k;

vector <ll> ty;
vector <ll> adj[maxn];
vector <ll> badj[maxn];
vector <ll> rul[maxn] ; 
priority_queue <pii,vector<pii>,greater<pii> > pq;
ll dd[maxn];
ll d[maxn];
ll mark[maxn];
ll bd[maxn];

void memz(ll v)
{
	if(mark[v])
		return;
	mark[v]=true;
	if(v==0)
	{
		dd[v]=1;
		return;
	}
	dd[v]=-2;
	ll ret = 0 ;
	For(i,0,n(adj[v]))
	{
		ll ans=0;
		ll p = adj[v][i];
		bool isvalid=true;
		For(j,0,n(rul[p]))
		{
			ll u = rul[p][j];
			memz(u);
			if(dd[u] == -1)
			{
				isvalid=false;
				break;
			}
			if(ans!=-2 && dd[u]!=-2)
				ans=min(ans+dd[u],mod);
			else
				ans=-2;
		}
		if(isvalid)
		{
			if(ans==-2 || ret==-2)
				ret=-2;
			else
				ret = max(ret,ans);
		}
	}
	dd[v]=ret;
}

void apply(int r)
{
	ll ret = 0;
	For(i,0,n(rul[r]))
		ret=min(ret+bd[rul[r][i]],mod);
	pq.push(pii(ret,ty[r]));
}

void dij(int v,long long dis)
{
	if(mark[v])
		return;
	mark[v]=true;
	bd[v]=dis;
	For(i,0,n(badj[v]))
	{
		d[badj[v][i]]--;
		if(!d[badj[v][i]])
			apply(badj[v][i]);
	}
}


int main()
{
	ios::sync_with_stdio(false);
	cin >> m >> n;
	For(i,0,m)
	{
		int mi,nu;
		cin >> mi;
		ty.pb(mi);
		cin >> nu;
		For(j,0,nu)
		{
			int tmp;
			cin >> tmp;
			if(tmp < 0 )
				tmp++;
			else
				d[i]++;
			badj[tmp].pb(i);
			rul[i].pb(tmp);
		}
		adj[mi].pb(i);
	}

	fill(bd,bd+n+1,mod);
	mark[0]=true;
	bd[0]=1;
	For(i,0,m)
		if(d[i]==0)
			apply(i);
	while(!pq.empty())
	{
		pii vp=pq.top();
		pq.pop();
		dij(vp.sc,vp.fr);
	}

	For(i,0,n+1)
		if(!mark[i])
			bd[i]=dd[i]=-1;

	fill(mark,mark+n+1,false);
	For(i,0,n+1)
		if(dd[i]==-1)
			mark[i]=true;
	For(i,1,n+1)
		memz(i);

	For(i,1,n+1)
		cout << bd[i] << " " << dd[i] << endl;
	return 0;
}
