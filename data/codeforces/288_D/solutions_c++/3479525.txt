#include <cstdio>
#include <vector>
#include <iostream>

using namespace std;

const int N = 80000 + 10;

typedef long long int64;
vector<int> a[N];
int64 ans;
int64 sz[N];

int n;
void DFS(int u, int p) {
  sz[u] = 1;
  int64 sum = 0;
  for (vector<int>::iterator it = a[u].begin(); it != a[u].end(); ++it) {
    int v = *it;
    if (v == p) continue;
    DFS(v, u);
    sz[u] += sz[v];
    sum += sz[v] * sz[v];
  }
  int64 cnt = (sz[u] * sz[u] - sum) / 2;
  ans -= cnt * cnt + cnt * (n - sz[u]) * sz[u] * 2;
}

int main() {
  scanf("%d", &n);
  for (int i = 1; i < n; ++i) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u; --v;
    a[u].push_back(v);
    a[v].push_back(u);
  }
  ans = (int64)n * (n - 1) / 2;
  ans *= ans;
  DFS(0, -1);
  cout << ans << endl;
  return 0;
}
