#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <stack>
#include <map>
#include <vector>
using namespace std;

typedef long long LL;

int n,m,k,a,b;
LL ans;
vector<int> p[80010];
int sz[80010];

void dfs(int now, int pre)
{
    LL s=0;
    sz[now]=1;
    for (vector<int>::iterator i=p[now].begin();i!=p[now].end();i++)
    {
        int next=*i;
        if (next==pre) continue;
        dfs(next,now);
        s+=sz[now]*sz[next];
        sz[now]+=sz[next];
    }
    ans-=s*s+2*s*sz[now]*(n-sz[now]);
}

int main()
{
    cin>>n;
    for (int i=0;i<n-1;i++)
    {
        cin>>a>>b;
        p[a].push_back(b);
        p[b].push_back(a);
    }
    ans=((LL)n*(n-1))/2;
    ans*=ans;
    dfs(1,0);
    cout<<ans<<endl;
    return 0;
}
