#include<iostream>
#include<vector>
using namespace std;
typedef long long ll;

const int MAX = 100*1000+1;

#define N(v) ((int)adj[v].size())
#define U adj[v][i]

vector<int> adj[MAX+10];
bool mrk[MAX+10];
ll cnt[MAX+10];
int ch[MAX+10];
int n;

ll sum = 0;

void dfs(int v)
{
	mrk[v] = true;
	ch[v] = 1;
	for(int i=0; i<N(v); i++)
		if( !mrk[U] )
		{
			dfs(U);
			cnt[v] += (ll)ch[v] * ch[U];
			ch[v] += ch[U];
		}
	sum += cnt[v] * ( cnt[v] - 1 ) / 2;
	sum += cnt[v] * ( n - ch[v] ) * ch[v];
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n;
	for(int i=1; i<n; i++)
	{
		int a,b;
		cin >> a >> b;
		a--; b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	dfs(0);
	ll roads = (ll)n*(n-1)/2;
	cout << 2 * (roads*(roads-1)/2 - sum ) << endl;
	return 0;
}
