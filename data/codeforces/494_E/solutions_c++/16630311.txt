#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
using namespace std;
#define all(_v) _v.begin(),_v.end()
inline void readi(int &x);
const int maxn=100005;
int n,m,k;
vector<int> Y;

struct event
{
	int x,yl,yr,c;
	event(){}
	event(int t1,int t2,int t3,int t4):x(t1),yl(t2),yr(t3),c(t4){}
	bool operator<(const event &o)const{return x<o.x;} 
}e[maxn*2];

struct node
{
	int cov;
	int xs;
	node *lc,*rc;
	
	void Cover(int l,int r,const int &a,const int &b,const int &c)
	{
		if(l>=a&&r<=b)
		{
			cov+=c;
			if(cov)xs=Y[r]^Y[l-1];
			else if(l<r)xs=lc->xs^rc->xs;
			else xs=0;
			return;
		}
		int mid=l+r>>1;
		if(a<=mid)lc->Cover(l,mid,a,b,c);
		if(b>mid)rc->Cover(mid+1,r,a,b,c);
		if(cov==0)xs=lc->xs^rc->xs;
	}
	
}ndl[maxn*4],*root,*ns=ndl;

node* build(int l,int r)
{
	node *x=ns++;
	if(l<r)
		x->lc=build(l,l+r>>1),
		x->rc=build(l+r+2>>1,r);
	return x;
}

int main()
{
	readi(n),readi(m),readi(k);
	for(int x1,y1,x2,y2,i=1;i<=m;i++)
		readi(x1),readi(y1),readi(x2),readi(y2),
		e[i+i-1]=event(x1-1,y1-1,y2,1),
		e[i+i]=event(x2,y1-1,y2,-1),
		Y.push_back(y1-1),Y.push_back(y2);
	sort(e+1,e+m+m+1);
	sort(all(Y));
	Y.erase(unique(all(Y)),Y.end());
	int yn=Y.size()-1,res=0,px=0;
	root=build(1,yn);
	for(int i=1,a,b;i<=m+m;i++)
	{
		res^=(e[i].x^px)&root->xs;px=e[i].x;
		a=lower_bound(all(Y),e[i].yl)-Y.begin();
		b=lower_bound(all(Y),e[i].yr)-Y.begin();
		root->Cover(1,yn,a+1,b,e[i].c);
	}
	int kk;
	for(kk=1;kk<=k;kk<<=1);
	if(res&kk-1)puts("Hamed");
	else puts("Malek");
	return 0;
}

inline void readi(int &x)
{char c;while(c=getchar(),c<'0'||c>'9');
x=c^'0';while(c=getchar(),c>='0'&&c<='9')x=x*10+(c^'0');}
