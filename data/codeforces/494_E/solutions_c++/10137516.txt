#undef NDEBUG
#ifdef SU2_PROJ
#define _GLIBCXX_DEBUG
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <cassert>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>
#include <numeric>
#include <functional>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define x first
#define y second
#define eprintf(...) fprintf(stderr, __VA_ARGS__)

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9) + 2;
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 50 * 1000 + 3;

int X, n, k;
pt a[N], b[N];

inline bool read()
{
	// 23:23
	//
	if (!(cin >> X >> n >> k)) return false;
	forn(i, n) scanf("%d%d%d%d", &a[i].x, &a[i].y, &b[i].x, &b[i].y);
	return true;
}

struct node
{
	node *l, *r;
	int add, mval, mcnt;
	node() { clear(0); }
	void clear(int len) { l = r = NULL; add = mval = 0; mcnt = len; }
};

typedef node* tree;

int hpos;
const int MAX = 5000 * 1000 + 3;
node heap[MAX];

void ensure(tree& t, int len)
{
	if (!t)
	{
		t = &heap[hpos++];
		t->clear(len);
	}
}

void push(tree t, int len)
{
	ensure(t->l, (len + 1) >> 1);
	ensure(t->r, len >> 1);
	t->l->add += t->add;
	t->l->mval += t->add;
	t->r->add += t->add;
	t->r->mval += t->add;
	t->add = 0;
}

void lift(tree t)
{
	t->mval = t->l->mval;
	t->mcnt = t->l->mcnt;
	if (t->mval > t->r->mval) t->mval = t->r->mval, t->mcnt = 0;
	if (t->mval == t->r->mval) t->mcnt += t->r->mcnt;
}

void inc(tree t, int l, int r, int lf, int rg, int dv)
{
	if (l == lf && r == rg)
	{
		t->add += dv;
		t->mval += dv;
	}
	else
	{
		push(t, r - l + 1);
		int mid = (l + r) >> 1;
		if (lf <= mid) inc(t->l, l, mid, lf, min(mid, rg), dv);
		if (mid < rg) inc(t->r, mid + 1, r, max(lf, mid + 1), rg, dv);
		lift(t);
	}
}

ostream& operator<< (ostream& out, const pt& p) { return out << "(" << p.x << ", " << p.y << ")"; }

inline void solve()
{
	for (int g = 1; g <= k; g <<= 1)
	{
		//forn(i, n) cerr << a[i] << ' ' << b[i] << endl;

		vector<pt> q;
		forn(i, n)
		{
			if (a[i].x > b[i].x || a[i].y > b[i].y) continue;
			q.pb(mp(a[i].x, i));
			q.pb(mp(b[i].x + 1, ~i));
		}
		sort(all(q));

		hpos = 0;
		tree root = &heap[hpos++];
		root->clear(INF);

		int ans = 0;
		forn(i, sz(q) - 1)
		{
			if (q[i].y >= 0) inc(root, 1, INF, a[q[i].y].y, b[q[i].y].y, +1);
			else inc(root, 1, INF, a[~q[i].y].y, b[~q[i].y].y, -1);
			int cur = INF - root->mcnt;
			//if (g == 2) cerr << cur << ' ' << (q[i + 1].x - q[i].x) << endl;
			ans ^= (cur & 1) & ((q[i + 1].x - q[i].x) & 1);
		}

		if (ans)
		{
			puts("Hamed");
			return;
		}

		forn(i, n)
		{
			a[i].x = (a[i].x + 1) >> 1;
			a[i].y = (a[i].y + 1) >> 1;
			b[i].x = b[i].x >> 1;
			b[i].y = b[i].y >> 1;
		}
	}

	puts("Malek");
}

int main()
{
#ifdef SU2_PROJ
	assert(freopen("input.txt", "rt", stdin));
	assert(freopen("output.txt", "wt", stdout));
#endif
	
	cout << setprecision(10) << fixed;
	cerr << setprecision(5) << fixed;
	
	while (read())
	{
		solve();
		break;
	}
	
	return 0;
}
