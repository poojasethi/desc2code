#include <iostream>
#include <vector>
#include <set>

using namespace std;

vector<vector<pair<int,int> > > g;
vector<set<int> > sets;
vector<int> amount;

void fusiona(int iset,int isetnext)
{
  set<int> &s=sets[iset];
  set<int> &snext=sets[isetnext];
  for (set<int>::iterator it=snext.begin();it!=snext.end();it++) {
    if (s.count(*it)>0)
      s.erase(*it);
    else
      s.insert(*it);
  }
}

int genera(int u,int p) {
  int iset=u;
  vector<pair<int,int> > &ar=g[u];
  int apadre=-1;
  for (int i=0;i<int(ar.size());i++) {
    if (ar[i].first==p) {
      apadre=ar[i].second;
    } else {
      int isetnext=genera(ar[i].first,u);
      if (int(sets[iset].size())<int(sets[isetnext].size()))
	swap(iset,isetnext);
      fusiona(iset,isetnext);
    }
  }
  if (apadre!=-1)
    amount[apadre]=int(sets[iset].size());
  return iset;
}

int main()
{
  int n;
  cin>>n;
  g=vector<vector<pair<int,int> > > (n);
  amount=vector<int> (n-1,0);
  for (int i=0;i<n-1;i++) {
    int u,v;
    cin>>u>>v;
    u--;v--;
    g[u].push_back(pair<int,int> (v,i));
    g[v].push_back(pair<int,int> (u,i));
  }
  sets=vector<set<int> > (n);
  int k;
  cin>>k;
  for (int i=0;i<k;i++) {
    int a,b;
    cin>>a>>b;
    a--;b--;
    if (a!=b) {
      sets[a].insert(i);
      sets[b].insert(i);
    }
  }
  genera(0,-1);
  for (int i=0;i<n-1;i++) {
    if (i>0) cout<<" ";
    cout<<amount[i];
  }
  cout<<endl;
}
