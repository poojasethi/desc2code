#include<iostream>
#include<vector>
#include<map>
using namespace std;
int n,k;
vector<int> v[100010];
int d[100010][20];
bool visited[100010];
bool visited2[100010];
int h[100010];
int g[100010];
int a[100010];
map<pair<int,int> , int> mp;
int dfs2(int x)
{
	int r=0;
	visited2[x]=true;
	for(int i=0;i<v[x].size();i++)
		if(!visited2[v[x][i]])
		{
			int o=dfs2(v[x][i]);
			a[mp[make_pair(x,v[x][i])]]=o;
		//	cout<<mp[make_pair(x,v[x][i])]<<" "<<o<<endl;
			r+=o;
		}
	return r+g[x];
}
void dfs(int x)
{
	visited[x]=true;
	for(int i=0;i<19;i++)
		d[x][i+1]=d[d[x][i]][i];
	for(int i=0;i<v[x].size();i++)
	{
		if(!visited[v[x][i]])
		{
			d[v[x][i]][0]=x;
			h[v[x][i]]=h[x]+1;
			dfs(v[x][i]);
		}
	}
}
int lca(int u,int y)
{
	if(h[u]>h[y])
	swap(u,y);
	int p=h[y]-h[u];
	int e=0;
	while(p>0)
	{
		if(p%2)
		y=d[y][e];
		p/=2;
		e++;
	}
	if(u==y)
	return u;
	for(int i=19;i>=0;i--)
	{
		if(d[u][i]!=d[y][i])
		{
			u=d[u][i];
			y=d[y][i];
		}
	}
	return d[u][0];
}
int main()
{
	cin>>n;
	for(int i=0;i<n-1;i++)
	{
		int u,y;
		cin>>u>>y;
		v[u].push_back(y);
		v[y].push_back(u);
		mp[make_pair(u,y)]=i;
		mp[make_pair(y,u)]=i;
	}
	dfs(1);
	cin>>k;
	for(int i=0;i<k;i++)
	{
		int u,y;
		cin>>u>>y;
		g[u]++;
		g[y]++;
		g[lca(u,y)]-=2;
	}
	dfs2(1);
	for(int i=0;i<n-1;i++)
	cout<<a[i]<<" ";
	cout<<endl;
//	cin>>k;
}