#include <cstdio>
#include <new>
#include <set>
const int N=200000,K=100000;
struct road{
	int i,to;
	road *next;
	road(){}
	road(int i,int to,road *next):i(i),to(to),next(next){}
}*points[N],roads[2*N];
struct rec{
	int pairi;
	rec *next;
	rec(){}
	rec(int pairi,rec *next):pairi(pairi),next(next){}
}recs[2*K];
std::set<int> pairs[N];
int s[N];
void dfs(int pos,int fa){
	for(road *p=points[pos];p;p=p->next){
		if(p->to!=fa){
			dfs(p->to,pos);
			s[p->i]=pairs[p->to].size();
			if(pairs[p->to].size()>pairs[pos].size()){
				pairs[pos].swap(pairs[p->to]);
			}
		}
	}
	for(road *p=points[pos];p;p=p->next){
		if(p->to!=fa){
			for(std::set<int>::iterator it=pairs[p->to].begin();it!=pairs[p->to].end();it++){
				std::pair <std::set<int>::iterator,bool> inserted=pairs[pos].insert(*it);
				if(!inserted.second){
					pairs[pos].erase(inserted.first);
				}
			}
		}
	}
}
int main(){
	int n;
	scanf("%d",&n);
	road *roadl=roads;
	for(int i=0;i<n-1;i++){
		int a,b;
		scanf("%d%d",&a,&b);
		a--;
		b--;
		points[a]=new(roadl++) road(i,b,points[a]);
		points[b]=new(roadl++) road(i,a,points[b]);
	}
	int k;
	scanf("%d",&k);
	for(int i=0;i<k;i++){
		int a,b;
		scanf("%d%d",&a,&b);
		if(a!=b){
			pairs[a-1].insert(i);
			pairs[b-1].insert(i);
		}
	}
	dfs(0,-1);
	for(int i=0;i<n-1;i++){
		if(i){
			putchar(' ');
		}
		printf("%d",s[i]);
	}
	return 0;
}

	 			 	    	 	 	  	  	 		