#include <cstdio>
#include <iostream>
#include <vector>
#define MAXN 100000
using namespace std;
struct node
{
	int b,e;
};
int n,m,T,K;
int P[MAXN+1];
int used[MAXN];
int ar[20][2*MAXN];
int update[MAXN+1];
int B[MAXN+1];
int res[MAXN+1];
int visited[MAXN+1];
vector <int> A[MAXN+1],G[MAXN+1];
int gf(int x)
{
	visited[x]=1;
	int i;
	int r=0,k;
	for(i=0;i<A[x].size();i++)
	{
		if(visited[A[x][i]]) continue;
		k=gf(A[x][i]);
		r+=k;
		res[G[x][i]]+=k;
	}
	return r+update[P[x]];
}
int qf(int a,int b)
{
	int k;
	for(k=0;(1<<k) <= b-a+1 ;k++);
	k--;
	return min(ar[k][a],ar[k][b-(1<<k)+1]);
}
void dfs(int x)
{
	int i;
	B[x]=K+1;
	P[x]=++T;
	used[x]=1;
	ar[0][++K]=P[x];
	for(i=0;i<A[x].size();i++)
		if(!used[A[x][i]])
		{
			dfs(A[x][i]);
			ar[0][++K]=P[x];
		}
}

int main()
{
	int i,k;
	int a,b;
	scanf(" %d",&n);
	for(i=1;i<n;i++)
	{
		scanf(" %d %d",&a,&b);
		A[a].push_back(b);
		A[b].push_back(a);
		++m;
		G[a].push_back(m);
		G[b].push_back(m);
	}
	dfs(1);
	
	for(k=1;(1<<k) <= K;k++)
		for(i=1;i+(1<<k)-1<=K;i++)
			ar[k][i]=min(ar[k-1][i],ar[k-1][i+(1<<(k-1))]);
	

	scanf(" %d",&m);
	while(m--)
	{
		scanf(" %d %d",&a,&b);
		update[P[a]]++;
		update[P[b]]++;
		update[qf(min(B[a],B[b]),max(B[a],B[b]))]-=2;
	}
	gf(1);
	for(i=1;i<n;i++)
		printf("%d ",res[i]);
	printf("\n");
	return 0;
}
