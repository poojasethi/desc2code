#include<iostream>
#include<vector>
using namespace std;
typedef pair<int, int> PII;
const int MAX_N = int(1e5)+10;
vector< PII > G[MAX_N];
vector< int > fool[MAX_N];
int parent[MAX_N];
int find(int x)
{
  return (x == parent[x])?x:parent[x] = find(parent[x]);
}
int ans[MAX_N], f[MAX_N];
bool vis[MAX_N];
void dfs(int x)
{
  parent[x] = x;
  vis[x] = true;
  for (int i = 0; i < fool[x].size(); i++) {
    int y = fool[x][i];
    f[x]++;
    if (vis[y]) f[find(y)] -= 2;
  }
  for (int i = 0; i < G[x].size(); i++) {
    int y = G[x][i].first;
    if (vis[y]) continue;
    int e = G[x][i].second;
    dfs(y);
    f[x] += (ans[e] = f[y]);
    parent[find(y)] = x;
  }
}
int main()
{
  int n, k;
  cin>>n;
  for (int i = 1; i <= n-1; i++) {
    int a, b;
    cin>>a>>b;
    G[a].push_back(PII(b,i));
    G[b].push_back(PII(a,i));
  }
  cin>>k;
  for (int i = 1; i <= k; i++) {
    int a, b;
    cin>>a>>b;
    if (a == b) continue;
    fool[a].push_back(b);
    fool[b].push_back(a);
  }
  dfs(1);
  for (int i = 1; i <= n-1; i++)
    cout<<ans[i]<<" ";cout<<endl;
  return 0;
}
