#include <cstdio>
#include <algorithm>
#define N 100005
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define fe(a, b) for(int a = (b); a; a = o[a])
using namespace std;

int n, v[N + N], o[N + N], f[N], t, g[N + N];
int e[N + N], l[N], h[N], s[18][N + N], c[N], a[N];

int odp(int a, int b){ return l[a] < l[b] ? a : b;}

void dfs(int V, int P){
	h[V] = ++t;
	l[V] = l[P] + 1;
	e[t] = V;

	fe(i, f[V]) if(v[i] != P){
		dfs(v[i], V);
		e[++t] = V;
	}
}

int cnt(int V, int P){
	fe(i, f[V]) if(v[i] != P)
		c[V] += a[i + 1 >> 1] = cnt(v[i], V);

	return c[V];
}

int main(){
	scanf("%d", &n);

	fi(i, 1, n){
		int a, b;
		scanf("%d %d", &a, &b);
		v[++t] = b; o[t] = f[a]; f[a] = t;
		v[++t] = a; o[t] = f[b]; f[b] = t;
	}

	t = 0;
	dfs(1, 0);

	g[1] = 0;
	FI(i, 2, t) g[i] = g[i >> 1] + 1;

	FI(i, 1, t) s[0][i] = e[i];
	FI(j, 1, g[t])
		FI(i, 1, t + 1 - (1 << j))
			s[j][i] = odp(s[j - 1][i], s[j - 1][i + (1 << j - 1)]);


	scanf("%d", &t);
	while(t--){
		int a, b, j;
		scanf("%d %d", &a, &b);
		c[a]++; c[b]++;

		a = h[a], b = h[b];
		if(a > b) swap(a, b);
		j = g[b - a + 1];
		c[odp(s[j][a], s[j][b - (1 << j) + 1])] -= 2;
	}

	cnt(1, 0);
	fi(i, 1, n) printf("%d%c", a[i], i == n - 1 ? '\n' : ' ');
}
