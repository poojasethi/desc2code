#include <iostream>
#include <cmath>
#include <vector>

#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;

int n,t1,t2,t3,dep[100010],par[100010][21],cnt[100010],s[100010],path[100010][2];
vector<int> g[100010];

void dfs(int v,int p,int d){
  par[v][0] = p;
  dep[v] = d;
  rep(i,g[v].size())if(g[v][i]!=p)dfs(g[v][i],v,d+1);
}

int lca(int u,int v){
  if(dep[u]>dep[v])swap(u,v);
  rep(k,20)if(dep[v]-dep[u]>>k&1) v = par[v][k];
  if(u==v)return v;
  for(int k=20;k>=0;k--){
    if(par[u][k]!=par[v][k]){
      u = par[u][k];
      v = par[v][k];
    }
  }
  return par[u][0];
}

int dfs2(int v,int p){
  s[v] = cnt[v];
  rep(i,g[v].size())if(p!=g[v][i])s[v]+=dfs2(g[v][i],v);
  return s[v];
}

int main(){

  cin>>n;
  rep(i,n-1){
    cin>>t1>>t2;t1--;t2--;
    g[t1].push_back(t2);
    g[t2].push_back(t1);
    path[i][0] = t1;
    path[i][1] = t2;
  }

  dfs(0,-1,0);

  rep(k,19)rep(v,n){
    if(par[v][k]<0)par[v][k+1]=-1;
    else par[v][k+1] = par[par[v][k]][k];
  }
  
  cin>>t3;
  
  rep(ii,t3){
    cin>>t1>>t2;t1--;t2--;
    cnt[t1]++;cnt[t2]++;
    cnt[lca(t1,t2)]-=2;
  }
  
  dfs2(0,-1);

  rep(i,n-1)cout<<((dep[path[i][0]]>dep[path[i][1]])?s[path[i][0]]:s[path[i][1]])<<" ";
  cout<<endl;

}
