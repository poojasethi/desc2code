#include <cstdio>
#include <vector>

using namespace std;

#define foreach(i,c) for( __typeof__((c).end()) i=(c).begin(); i!=(c).end(); i++ )

#define POW 17
#define N 1<<POW

int n, k, s[N], t[N], p[N][POW], d[N], cnt[N];
vector<int> g[N];

void preprocess( int v )
{
	for( int i = 1; i < POW; i++ ) p[v][i] = p[p[v][i-1]][i-1];
	for( int i = 0; i < g[v].size(); i++ )
	{
		int u = g[v][i];
		if( u == p[v][0] ) continue;
		p[u][0] = v;
		d[u] = d[v] + 1;
		preprocess(u);
	}
}

int lca( int a, int b )
{
	if( d[a] > d[b] ) a ^= b, b ^= a, a ^= b;
	if( d[a] < d[b] )
	{
		int del = d[b] - d[a];
		for( int i = 0; i < POW; i++ ) if( del & ( 1 << i ) ) b = p[b][i];
	}
	if( a != b )
	{
		for( int i = POW-1; i >= 0; i-- ) if( p[a][i] != p[b][i] ) a = p[a][i], b = p[b][i];
		a = p[a][0], b = p[b][0];
	}
	return a;
}

void dfs( int v )
{
	for( int i = 0; i < g[v].size(); i++ )
	{
		int u = g[v][i];
		if( u == p[v][0] ) continue;
		dfs( g[v][i] );
		cnt[v] += cnt[u];
	}
}

int main()
{
	scanf( "%d", &n );
	for( int i = 0; i < n - 1; i++ )
	{
		scanf( "%d%d", &s[i], &t[i] );
		g[s[i]].push_back(t[i]), g[t[i]].push_back(s[i]);
	}
	preprocess(1);

	scanf( "%d", &k );
	for( int i = 0; i < k; i++ )
	{
		int a, b;
		scanf( "%d%d", &a, &b );
		int c = lca( a, b );
		cnt[a]++, cnt[b]++;
		cnt[c] -= 2;
	}

	dfs(1);
	for( int i = 0; i < n - 1; i++ ) printf( "%d ", cnt[ d[s[i]] > d[t[i]] ? s[i] : t[i] ] );
	printf( "\n" );

	return 0;
}
