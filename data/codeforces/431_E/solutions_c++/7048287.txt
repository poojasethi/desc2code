#include <iostream>
#include <cstdio>
#include <string.h>
#include <set>
#include <map>
using namespace std;
const int maxn =100005;
__int64 h[1<<19];
__int64 T[1<<19];
__int64 to[2][maxn],n,q,use=0,cap[1<<19];
__int64 A[maxn*2];
__int64 B[maxn*2];
int lowbit(__int64 x){
   return x&( - x);
}
void add(__int64 *T,__int64 x,__int64 d){
        while(x<=use){
            T[x]+=d; x+=lowbit(x);
        }
}
__int64 sum(__int64 *T,int x){
    __int64 ans=0;
    while(x>0){
        ans+=T[x]; x-=lowbit(x);
    }
    return ans;
}
__int64 solve(__int64 H){
    __int64 hi = cap[H]*n;
    __int64 num=sum(A,use)-sum(A,H);
    __int64 RE = sum(B,H);
    hi = hi-cap[H]*num-RE;
    return hi;
}
int main()
{

      set<__int64>Q;
      map<__int64,__int64>MP,TP;
      scanf("%I64d%I64d",&n,&q);
      for(int i =1; i<= n; ++i){
            scanf("%I64d",&h[i]);
            Q.insert(h[i]);
        }
      for(int i =0; i<q; ++i){
           scanf("%I64d",&T[i]);
           if(T[i] == 1){
                  scanf("%I64d%I64d",&to[0][i],&to[1][i]);
                  Q.insert(to[1][i]);
              }
           else scanf("%I64d",&to[0][i]);
      }
      for(set<__int64>::iterator it=Q.begin(); it!= Q.end(); ++it){
            int W=*it;
        MP.insert(make_pair(W,use+1));
        TP.insert(make_pair(use+1,W));
        ++use;
        cap[use]=W;
      }
      for(int i =1; i<= n; ++i){
         __int64 t=MP[h[i]];
          add(A,t,1);
          add(B,t,h[i]);
      }
      for(int i =0; i<q; ++i){
          if(T[i]==1){
               __int64 t=MP[h[to[0][i]]];
               add(A,t,-1);
               add(B,t,-h[to[0][i]]);
               h[ to[ 0 ][ i ] ]=to[1][i];
               t = MP[h[to[0][i]]];
               add(A,t,1);
               add(B,t,h[to[0][i]]);
          }
          else {

                int H=0;
                for(int e =20 ; e>=0 ; --e){
                    if((H+(1<<e))>use) continue;
                    if(solve(H+(1<<e))<=to[0][i])
                        H+=(1<<e);
                }
                double ans = cap[H];
                long long V1= solve(H);
                __int64 ge =sum(A,H);
                ans+=((to[0][i]-V1)/double(ge));
                printf("%.5lf\n",ans);
          }
      }
      return 0;
}
