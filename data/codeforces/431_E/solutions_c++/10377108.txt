#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_popcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 1e5 + 5;

int n, m, a[N], c[N], k[N];

ll x[N], fen[2][N << 1];

vector < int > v;

void up(bool w, int x, int k) {

	for(; x < (N << 1); x += x & (-x))
		fen[w][x] += k;

}

ll qu(bool w, int x) {

	ll sum = 0;

	for(; x; x -= x & (-x))
		sum += fen[w][x];

	return sum;

}

int f(ll x) {

	return upper_bound(v.begin(), v.end(), x) - v.begin();

}

int main() {
	
	ios :: sync_with_stdio(0);

	cin >> n >> m;

	FOR(i, 1, n)
	{
		cin >> a[i];

		v.pb(a[i]);
	}

	FOR(i, 1, m)
	{
		cin >> c[i] >> x[i];

		if(c[i] == 1)
		{
			cin >> k[i];

			v.pb(k[i]);
		}
	}

	sort(v.begin(), v.end());

	FOR(i, 1, n)
	{
		up(0, f(a[i]), a[i]);

		up(1, f(a[i]), 1);
	}

	FOR(i, 1, m)
	{
		if(c[i] == 1)
		{
			up(0, f(a[x[i]]), -a[x[i]]);

			up(1, f(a[x[i]]), -1);

			a[x[i]] = k[i];

			up(0, f(a[x[i]]), a[x[i]]);

			up(1, f(a[x[i]]), 1);
		}

		if(c[i] == 2)
		{
			double l = 0, r = 1e15;

			FOR(j, 1, 100)
			{
				double m = (l + r) / 2;

				if(qu(1, f(m)) * m - qu(0, f(m)) >= x[i])
					r = m;
				else
					l = m;
			}

			cout << fixed << setprecision(6) << l << endl;
		}
	}

	return 0;

}
