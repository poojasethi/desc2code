#include <iostream>
#include <cstdio>
#include <string.h>
#include <set>
#include <map>
using namespace std;
const int maxn=200005;
int h[maxn],T[100005],n,q,max_h=0;
int p[100005],x[100005],cap[maxn];
__int64 V[100005];
__int64 A[maxn],B[maxn];
int lowbit(int x){
  return x&(-x);
}
void add(__int64 *C, int x,__int64 d){
      while(x<=max_h){
         C[x]+=d; x+=lowbit(x);
      }
}
__int64 sum(__int64 *C,int x){
     __int64 ans=0;
     while(x>0){
         ans+=C[x]; x-=lowbit(x);
     }
     return ans;
}
__int64 solve(int H){
    __int64 num=sum(A,H);
    __int64 remain = sum(B,H);
    __int64 line=cap[H];
    __int64 ans = num * line - remain;
    return ans;
}
int main()
{
       set<int>Live;
       scanf("%d%d",&n,&q);
       for(int i =1; i<=n; ++i){
          scanf("%d",&h[i]);
          Live.insert(h[i]);
       }

       for( int i =0; i<q; ++i){
          scanf("%d",&T[i]);
          if(T[i] == 1){
             scanf("%d%d",&p[i],&x[i]);
             Live.insert(x[i]);
          }else scanf("%I64d",&V[i]);
       }
       map<int,int>MP;
       for(set<int>::iterator it=Live.begin(); it!=Live.end(); ++it){
           int E = *it;
           MP.insert(make_pair(E,max_h+1));
           ++max_h;
           cap[max_h] = E;
       }
       for(int i =1; i<=n; ++i){
          int loc = MP[h[i]];
          add(A,loc,1);
          add(B,loc,h[i]);
       }
       for(int e=0; e<q; ++e){
           if(T[e]==1){
                int t = p[e];
                int loc = MP[h[t]];
                add(A, loc, -1);
                add(B, loc, -h[t]);
                h[t] = x[e];
                loc  = MP[h[t]];
                add(A, loc, 1);
                add(B, loc, h[t]);
           }else{
                int H=0;
                for(int i =20 ; i>=0; -- i){
                    if((H+(1<<i))>max_h) continue;
                    if(solve((H+(1<<i)))<=V[e])
                        H=H+(1<<i);
                }
                double remain=solve(H);
                double num=sum(A,H);
                double ans = cap[H];
                ans =ans + (double(V[e]) - remain)/num;
                printf("%.5lf\n",ans);
           }

       }
       return 0;
}
