#include <cstdio>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;
int a[100010];
int t[100010], p[100010], na[100010];
long long v[100010];
map<int, int> m;
vector<int> w;
long long s[1 << 19];
int c[1 << 19], h[1 << 19];
void add(int pos, int d) {
	long long tmp = w[pos];
	pos += 1 << 18;
	c[pos] += d;
	s[pos] += d * tmp;
	h[pos] = tmp;
	while (pos > 1) {
		pos >>= 1;
		c[pos] = c[pos*2] + c[pos*2+1];
		s[pos] = s[pos*2] + s[pos*2+1];
		if (c[pos*2+1]) {
			h[pos] = h[pos*2+1];
		} else if (c[pos*2]) {
			h[pos] = h[pos*2];
		} else {
			h[pos] = 0;
		}
	}
}
double query(long long k) {
	int pos = 1, sc = 0;
	long long ss = 0;
	double res = 1e51;
	while (pos < 1 << 18) {
		int npos = pos << 1;
		long long rest = (long long)(c[npos] + sc) * h[npos] - s[npos] - ss;
		if (rest <= k) {
			sc += c[npos];
			ss += s[npos];
			pos = npos + 1;
			res = min(res, (double)(k + ss) / sc);
		} else {
			pos = npos;
		}
	}
	sc += c[pos];
	ss += s[pos];
	return min(res, (double)(k + ss) / sc);
}
int main() {
	int n, q;
	scanf("%d%d", &n, &q);
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
		w.push_back(a[i]);
	}
	for (int i = 0; i < q; i++) {
		scanf("%d", &t[i]);
		if (t[i] == 1) {
			scanf("%d%d", &p[i], &na[i]);
			--p[i];
			w.push_back(na[i]);
		} else {
			scanf("%I64d", &v[i]);
		}
	}
	sort(w.begin(), w.end());
	w.resize(unique(w.begin(), w.end()) - w.begin());
	for (int i = 0; i < w.size(); i++) {
		m[w[i]] = i;
	}
	for (int i = 0; i < n; i++) {
		add(m[a[i]], 1);
	}
	for (int i = 0; i < q; i++) {
		if (t[i] == 1) {
			int k = m[a[p[i]]];
			add(k, -1);
			a[p[i]] = na[i];
			k = m[na[i]];
			add(k, 1);
		} else {
			printf("%.12f\n", query(v[i]));
		}
	}
	return 0;
}
