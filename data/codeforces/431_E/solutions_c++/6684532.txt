#include <iostream>
#include <algorithm>
#include <cstdio>
using namespace std;
typedef pair<long long, int> Tp;
Tp lsh[200005];int gs;
long long bh[100005];
long long data[100005];
int n,q;
struct Task
{
    int type;
    int p;
    long long x;
}ask[100005];
long long bit[200005],bits[200005];
void add(int i,long long x,int t)
{
    for (;i<=200000;i+=i&(-i)) bit[i]+=x*t,bits[i]+=t;
}
long long askb(int i)
{
    long long res=0;
    for (;i;i-=i&(-i)) res+=bit[i];
    return res;
}
long long asks(int i)
{
    long long res=0;
    for (;i;i-=i&(-i)) res+=bits[i];
    return res;
}
int main()
{
    scanf("%d%d",&n,&q);
    for (int i=1;i<=n;i++)
    {
        scanf("%I64d",data+i);
        lsh[i]=Tp(data[i],i);
    }
    gs=n;
    for (int i=1;i<=q;i++)
    {
        scanf("%d",&ask[i].type);
        if (ask[i].type==1)
        {
            scanf("%d%I64d",&ask[i].p,&ask[i].x);
            lsh[++gs]=Tp(ask[i].x,n+i);
        }else scanf("%I64d",&ask[i].x);
    }
    sort(lsh+1, lsh+1+gs);
    int last=0;lsh[0].first=-99999;
    for (int i=1;i<=gs;i++)
    {
        if (lsh[i].first!=lsh[i-1].first) bh[++last]=lsh[i].first;
        
        if (lsh[i].second<=n) data[lsh[i].second]=last;
        else ask[lsh[i].second-n].x=last;
    }
    for (int i=1;i<=n;i++) add((int)data[i], bh[data[i]],1);
    for (int i=1;i<=q;i++)
    {
        if (ask[i].type==1)
        {
            add((int)data[ask[i].p], bh[data[ask[i].p]], -1);
            data[ask[i].p]=ask[i].x;
            add((int)data[ask[i].p], bh[data[ask[i].p]],  1);
        }else
        {
            int l=0,r=last+1;
            while (l+1!=r)
            {
                int mid=(l+r)/2;
                long long t=bh[mid]*asks(mid)-askb(mid);
                if (t<=ask[i].x) l=mid;else r=mid;
            }
            long long t=bh[l]*asks(l)-askb(l);
            printf("%.8lf\n",bh[l]+(ask[i].x-t)*1.0/asks(l));
        }
    }
    return 0;
}