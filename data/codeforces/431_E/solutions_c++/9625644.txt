#include<stdio.h>
#include<map>
#include<vector>
#include<algorithm>
#define INF 1000000000000000.0F
using namespace std;
typedef pair<int,long long> P;

int bit1[200001];
long long bit2[200001];
int bit_n;
vector<int> cmp;

void init(int n){
    bit_n=n;
    for(int i=0;i<=n;i++){
        bit1[i]=0;
        bit2[i]=0;
    }
}

void add(int p,int t){
    long long x=cmp[p];
    p++;
    while(p<=bit_n){
        bit1[p]+=t;
        bit2[p]+=x*t;
        p+=p&-p;
    }
}

int sum1(int p){
    p++;
    int s=0;
    while(p>0){
        s+=bit1[p];
        p-=p&-p;
    }
    return s;
}

long long sum2(int p){  
    p++;
    long long s=0;
    while(p>0){
        s+=bit2[p];
        p-=p&-p;
    }
    return s;
}

P q[100000];
int h[100000];

int pos(int x){
    return lower_bound(cmp.begin(),cmp.end(),x)-cmp.begin();
}

double solve(double x){
    int r=upper_bound(cmp.begin(),cmp.end(),x)-cmp.begin();
    return x*sum1(r-1)-sum2(r-1);
}

int main(){
    int n,m,i;
    scanf("%d %d",&n,&m);
    for(i=0;i<n;i++){
        scanf("%d",&h[i]);
        cmp.push_back(h[i]);
    }
    for(i=0;i<m;i++){
        int t;
        scanf("%d",&t);
        P pr;
        if(t==1){
            int p,x;
            scanf("%d %d",&p,&x);
            p--;
            pr=P(p,x);
            cmp.push_back(x);
        }
        if(t==2){
            long long x;
            scanf("%I64d",&x);
            pr=P(-1,x);
        }
        q[i]=pr;
    }
    sort(cmp.begin(),cmp.end());
    init(n+m);
    for(i=0;i<n;i++)add(pos(h[i]),1);
    for(i=0;i<m;i++){
        int p=q[i].first;
        long long x=q[i].second;
        if(p==-1){
            double l=0,r=INF;
            for(int j=0;j<70;j++){
                double mid=(l+r)/2;
                if(solve(mid)>=x)r=mid;
                else l=mid;
            }
            printf("%.6lf\n",r);
        }
        else{
            add(pos(h[p]),-1);
            h[p]=x;
            add(pos(x),1);
        }
    }
    return 0;
}