#include <cstdio>
#include <iostream>
#include <map>
#include <iomanip>

using namespace std;
const int NMAX = 100004;
int N;
class AIB{
    private :
    long long  a[2*NMAX];
    public :
    inline void Update(int pos,int val){
        for(; pos <= N; pos += (pos&(-pos)))
            a[pos] += val;
    }
    inline long long Query(int pos){
        long long ret = 0;
        for(; pos ; pos -= (pos&(-pos)))
            ret += a[pos];
        return ret;
    }
};
map < int , bool > m; 
map < int , int > pos;
int op[NMAX], a[NMAX];
long long v[NMAX] ,V;
int p[NMAX], x[NMAX];
int b[2*NMAX], n;
AIB sum, cnt;
inline long long Sol(const int p){
    long long cost = 1LL*b[p]*n;
    long long c = cnt.Query(N) - cnt.Query(p);
    cost -= 1LL*c*b[p];
    cost -= 1LL*sum.Query(p);
    return cost; 
}

int main(){
    #ifndef ONLINE_JUDGE
        freopen("date.in","r",stdin);
        freopen("date.out","w",stdout);
    #endif
    int M;
    cin.sync_with_stdio(false);
    cin >> n >> M;
    for(int i = 1;i <= n ;++i){
        cin >> a[i];
        m[a[i]] = 1;
    }
    for(int i = 1;i <= M; ++i){
        cin >> op[i];
        if(op[i]==1){
            cin >> p[i] >> x[i];
            m[x[i]] = 1;
        }
        else
            cin >> v[i];
    }
    int ind = 0;
    for(map < int , bool > ::iterator it = m.begin(); it != m.end(); ++it){
        ++ind;
        pos[(*it).first] = ind;
        b[ind] = (*it).first;
    }
    N = ind;
    for(int i = 1;i <= n; ++i){
        cnt.Update(pos[a[i]],1);
        sum.Update(pos[a[i]],a[i]);
    }
    cout<<setprecision(5)<<fixed;
    for(int i = 1;i <= M; ++i){
        if(op[i]==1){
            sum.Update(pos[a[p[i]]],-a[p[i]]);
            sum.Update(pos[x[i]],x[i]);
            cnt.Update(pos[a[p[i]]],-1);
            cnt.Update(pos[x[i]],1);
            a[p[i]] = x[i];
        }
        else{
            V = v[i]; 
            int sol = 0;
            int Left = 1;
            int Right = N;
            while(Left <= Right){
                int Mid = (Left + Right)/2;
                if(Sol(Mid)<=V){
                    sol = Mid;
                    Left = Mid+1;
                }
                else
                    Right = Mid-1;
            }
            int p = cnt.Query(sol); 
            V -= Sol(sol);
            cout<<b[sol] + 1.0*V/p<<"\n";
        }
    }
    return 0;
}
