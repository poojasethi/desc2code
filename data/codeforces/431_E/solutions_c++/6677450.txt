#include <map> 
#include <algorithm>
#include <iostream> 
#include <cstdio>
#include <cmath>
using namespace std;

typedef long long ll;
#define rep(i,n) for(int i=0;i<n;i++)

#define N 333000
int a[N], b[N], x[N], y[N], ty[N];
ll B2[N], B1[N], xl[N];
double bl[N];
void U(int ind, int v, ll *B) {
	for(ind += 5; ind < N; ind += (ind & -ind)) B[ind] += v;
}
ll Q(int ind, ll *B) {
	ll ret = 0;
	for(ind += 5; ind; ind -= (ind & -ind)) ret += B[ind];
	return ret;
}
int main() {
	int n, q;
	scanf("%d%d", &n, &q);
	rep(i, n) {
		scanf("%d", &a[i]);
		b[i] = a[i];
	}
	int nm = n;
	rep(i, q) {
		scanf("%d", &ty[i]);
		if(ty[i] == 1) {
			scanf("%d%d", &x[i], &y[i]);
			b[nm++] = y[i];
		} else {
			cin >> xl[i];
		}
	}
	sort(b, b+nm);
	nm = unique(b, b+nm) - b;
	map <int, int> M;
	rep(i, nm) M[b[i]] = i;
	rep(i, n) {
		U(M[a[i]], 1, B1);
		U(M[a[i]], a[i], B2);
	}
	rep(i, nm) bl[i] = b[i];
	rep(i, q) {
		if(ty[i] == 1) {
			int j = x[i] - 1;
			U(M[a[j]], -1, B1);
			U(M[a[j]], -a[j], B2);
			a[j] = y[i];
			U(M[a[j]], 1, B1);
			U(M[a[j]], a[j], B2);
		} else {
			//binary search
			double hi = 1e16, lo = 0, mid;
			rep(j, 70) {
				mid = (hi + lo)*0.5;
				ll lob = ceil(mid);
				int ind = lower_bound(bl, bl+nm, double(lob)) - bl;
				int quan = Q(ind-1, B1);
				ll filled = Q(ind-1, B2);
				double have = quan*mid - filled;
				if(have >= xl[i]) {
					hi = mid;
				} else lo = mid;
			}
			printf("%.10lf\n", hi);
		}
	}
}