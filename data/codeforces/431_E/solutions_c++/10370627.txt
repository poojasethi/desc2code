#include <bits/stdc++.h>

using namespace std;

#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl

#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)

#define type(x) __typeof(x.begin())

#define pb push_back
#define mp make_pair

#define nd second
#define st first

#define endl '\n'

#define pii pair < int ,int >

typedef long long ll;

const int inf = 1e9;
const int N = 1e5+5;

int p[N], n, m, x, y, t;

class node{
	
	public:

		ll sum;
		int size;

		node *left, *right;

		node(){ sum = size = 0; left = right = NULL; } 
	
};

typedef node* pnode;

pnode ST;

ll sum(pnode ST){ if(ST) return ST->sum; return 0; }
int size(pnode ST){ if(ST) return ST->size; return 0; }

pnode merge(pnode &ST){
	
	ST->sum = sum(ST->left) + sum(ST->right);
	
	ST->size = size(ST->left) + size(ST->right);

	return ST;
}

pnode update(pnode &ST,int bas,int son,int x,ll t,int w){
	
	if(bas > x || son < x) return ST;
	
	if(!ST) ST = new node;

	if(bas == son){ ST->sum += t; ST->size += w; return ST; }

	int orta = bas + son >> 1;

	update(ST->left,bas,orta,x,t,w), update(ST->right,orta+1,son,x,t,w);
	
	return merge(ST);
	
}

pair< ll , int > query(pnode ST,int bas,int son,int x,int y){
	
	if(bas > y || son < x) return mp(0,0);

	if(!ST) return mp(0,0);
	
	if(x <= bas && son <= y) return mp(ST->sum,ST->size);

	int orta = bas + son >> 1;

	pair< ll , int > l = query(ST->left,bas,orta,x,y), r = query(ST->right,orta+1,son,x,y);

	return mp(l.st+r.st,l.nd+r.nd);		

}

 main(){
	
	scanf("%d %d",&n,&m);

	FOR(i,1,n){ scanf("%d",&p[i]); update(ST,0,inf,p[i],p[i],1); } 

	ll v = 0;

	FOR(i,1,m){
	
		scanf("%d",&t);

		if(t == 1){ scanf("%d %d",&x,&y); update(ST,0,inf,p[x],-p[x],-1); update(ST,0,inf,y,y,1); p[x] = y; }

		else {

			scanf("%lld",&v);
			
			double bas = 0, son = 1e16;

			FOR(j,1,100){
				
				double orta = (bas + son) / 2;

				pair< ll , int > temp = query(ST,0,inf,0,min((ll)orta,(ll)inf));

				if(v <= orta * temp.nd - temp.st) son = orta;

				else bas = orta;
				
			}
			
			printf("%.5lf\n",bas);
			
		}
		
	}
	
    return 0;
}
