#include<stdio.h>
#include<string.h>
#include<vector>
#include<algorithm>
#define M 200000
#include<math.h>
#define ll long long
#include<map>
using namespace std;
vector<int> a,b;
map<int,int> mp;
struct Fenwick_tree{
    ll bit[M + 5];
    void update(int x,int v){
        for(;x <= M ; x+=x&-x) bit[x]+=v;   
    }
    ll get(int x){
        ll res = 0;
        for(;x > 0 ; x-=x&(-x)) res+=bit[x];
        return res;
    }
};
Fenwick_tree sum , num;
ll v[M + 5];
int p[M + 5] , x[M + 5] , tmp[M + 5] , t[M + 5] , h[M + 5];
int n,q;
void doit(int x,int y){
    sum.update(mp[h[x]] , -h[x]);
    sum.update(mp[y] , y);
    num.update(mp[h[x]] , -1);
    num.update(mp[y] , 1);
    h[x] = y; 
}
void input(){
    scanf("%d %d",&n,&q);
    for(int i = 1 ; i <= n ; i++){
        scanf("%d",&tmp[i]);
        a.push_back(tmp[i]);
    }
    a.push_back(0);
    for(int i = 1 ; i <= q ; i++){
        scanf("%d",&t[i]);
        if(t[i] == 2) scanf("%I64d",&v[i]);
        else{
            scanf("%d %d",&p[i],&x[i]);
            a.push_back(x[i]);
        }
    }
    sort(a.begin(),a.end());
    for(int i = 0 ; i < a.size() ; i++)
        if(i == 0 || a[i] != a[i - 1]) b.push_back(a[i]);
    for(int i = 0 ; i < b.size() ; i++) mp[b[i]] = i + 1;
    sum.update(1 , 0);
    num.update(1 , n);
}
void solve(){
    for(int i = 1 ; i <= n ; i++)   doit(i , tmp[i]);
    for(int i = 1 ; i <= q ; i++){
        if(t[i] == 1) doit(p[i],x[i]);
        else{
            double lo = 0;
            double hi = 1e15;
            int turn = 0;
            while(turn <= 80){
                turn++;
                double mid = (lo + hi)/2;
                int ptr = upper_bound(b.begin(),b.end(),floor(mid)) - b.begin();
                if((double) v[i] <= (double) num.get(ptr)*mid - (double) sum.get(ptr)) hi = mid;
                else lo = mid;
            }
            printf("%.5lf\n",lo);
        }
            
    }
}
main(){
//  freopen("test.inp","r",stdin);
    input();
    solve();
}