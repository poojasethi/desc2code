#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

#define pii pair<long long, long long>
#define MAXN 300010
#define MAXL 100
#define MAXM 1000000002

vector<int> dif;
long long fen[3][MAXN + 10];
int h[MAXN];
vector<pii> quer;
void add(int t, int x, int v)
{
	for (; x <= MAXN; x += x & -x)
		fen[t][x] += v;
}
long long get(int t, int x)
{
	long long ans = 0;
	for (; x > 0; x -= x & -x)
		ans += fen[t][x];
	return ans;
}
void ins(int k)
{
	//cout << " inserted " << k << endl;
	int x = lower_bound(dif.begin(), dif.end(), k) - dif.begin();
	add(0, x + 1, k);
	add(1, x + 1, 1);
}
void ers(int k)
{
	//cout << "erased" << " " << k << endl;
	int x = lower_bound(dif.begin(), dif.end(), k) - dif.begin();
	add(0, x + 1, -k);
	add(1, x + 1, -1);
}
pii get(long long k)
{
	int x = upper_bound(dif.begin(), dif.end(), k) - dif.begin();
	return pii(get(0, x), get(1, x));
}
int main()
{
	ios_base::sync_with_stdio(false);
	int n, q;
	cin >> n >> q;
	for (int i = 0; i < n; i++)
	{
		cin >> h[i];
		dif.push_back(h[i]);
	}
	cout.precision(5);
	for (int i = 0; i < q; i++)
	{
		int t;
		cin >> t;
		if (t == 1)
		{
			int id, x;
			cin >> id >> x;
			id--;
			quer.push_back(pii(id, x));
			dif.push_back(x);

		}
		else
		{
			long long v;
			cin >> v;
			quer.push_back(pii(v, -1));
		}
	}
	sort(dif.begin(), dif.end());
	dif.resize(unique(dif.begin(), dif.end()) - dif.begin());
	for (int i = 0; i < n; i++)
		ins(h[i]);
	for (int i = 0; i < q; i++)
	{
		if (quer[i].second != -1)
		{
			ers(h[quer[i].first]);
			h[quer[i].first] = quer[i].second;
			ins(h[quer[i].first]);
		}
		else
		{
			long long v = quer[i].first;
			long double lo = -1, hi = ((v + n - 1) / n) + MAXM;
			//cout << get(1).first << " " << get(1).second << endl;
			for (int i = 0; i < MAXL; i++)
			{
				long double mid = (lo + hi) / 2;
				long long rm = mid;
				pii x = get(rm);
				if (mid * x.second - x.first >= v)
					hi = mid;
				else
					lo = mid;
			}
			cout << fixed << hi << endl;
		}
	}


}
