#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>

int h[101010];
int pos[101010];

int vn;
int arr[202020];

int t[101010];
int x[101010];
int y[101010];
long long v[101010];

struct fenwick {
  long long a[202020];
  void update(int i, int v) {
    for ( ; i <= vn; i += i & -i)
      a[i] += v;
  }  
  long long query(int i) {
    long long res = 0;
    for ( ; i; i -= i & -i)
      res += a[i];
    return res;
  }  
} sfw, cfw;

int main() {
  //assert(freopen("input.txt", "r", stdin));
  //assert(freopen("output.txt", "w", stdout));
  //std::ios::sync_with_stdio(0);
  //std::cin.tie(0);
  int n, q;
  scanf("%d %d", &n, &q);
  for (int i = 1; i <= n; ++i) {
    scanf("%d", h + i);
    arr[++vn] = h[i];
  }  
  for (int i = 1; i <= q; ++i) {
    scanf("%d", t + i);
    if (t[i] == 1) {
      scanf("%d %d", x + i, y + i);
      arr[++vn] = y[i];
    } else {
      scanf("%I64d", v + i);
    }
  }
  std::sort(arr + 1, arr + vn + 1);
  vn = std::unique(arr + 1, arr + vn + 1) - arr - 1;
  for (int i = 1; i <= n; ++i) {
    pos[i] = std::lower_bound(arr + 1, arr + vn + 1, h[i]) - arr;
    sfw.update(pos[i], h[i]);
    cfw.update(pos[i], 1);
  }
  for (int i = 1; i <= q; ++i) {
    if (t[i] == 1) {
      sfw.update(pos[x[i]], -h[x[i]]);
      cfw.update(pos[x[i]], -1);
      pos[x[i]] = std::lower_bound(arr + 1, arr + vn + 1, y[i]) - arr;
      sfw.update(pos[x[i]], y[i]);
      cfw.update(pos[x[i]], 1);
      h[x[i]] = y[i];
    } else {
      int x = -1;      
      for (int lo = 1, hi = vn; lo <= hi; ) {
        int mi = (lo + hi) >> 1;
        long long sq = sfw.query(mi);
        int cq = cfw.query(mi);
        if (1ll * arr[mi] * cq - sq < v[i]) {
          lo = mi + 1;
          x = mi;
        } else {
          hi = mi - 1;
        }
      }
      printf("%.16lf\n", 1.0 * (v[i] + sfw.query(x)) / cfw.query(x));
    }
  }
}