#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#include<iomanip>
#include<vector>
#include<ctime>
#include<cstdlib>
#include<sstream>
#include<set>
#include<map>
#include<cmath>
using namespace std;

typedef long long ll;
const int size=200200;

void add(ll a[],int x,ll s){
    for(;x<size;x+=(x&(-x)))a[x]+=s;
}
ll get(ll a[],int x){
    ll ans=0;
    for(;x>0;x-=(x&(-x)))ans+=a[x];
    return ans;
}
struct query{
    int type;
    int p,x;
    ll v;
}Q[size];
int n,q,num[size];
map<int,int> id,mas,cd;
ll sum[size],d[size];

int main(){
    cin>>n>>q;
    for(int i=1;i<=n;i++)cin>>num[i],mas[num[i]]=1;
    for(int i=1;i<=q;i++){
        cin>>Q[i].type;
        if(Q[i].type==2)cin>>Q[i].v;
        else {
            cin>>Q[i].p>>Q[i].x;
            mas[Q[i].x]=1;
        }
    }
    int idx=1;
    for(map<int,int>::iterator it=mas.begin();it!=mas.end();it++){
        id[it->first]=idx;
        cd[idx]=it->first;
        idx++;
    }
    for(int i=1;i<=n;i++){
        add(d,id[num[i]],1);
        add(sum,id[num[i]],num[i]);
    }
    cd[0]=0;
    for(int i=1;i<=q;i++){
        if(Q[i].type==1){
            int x=num[Q[i].p];
            add(d,id[x],-1);add(sum,id[x],-x);
            x=num[Q[i].p]=Q[i].x;
            add(d,id[x],1);add(sum,id[x],x);
        }
        else{//cout<<get(d,idx)<<endl;
            ll x=Q[i].v;
            int  low=1,high=idx-1,mid;
            while(high>low+1){
                mid=(low+high)/2;
                if(get(d,mid)*cd[mid]-get(sum,mid)<=x)low=mid;
                else high=mid-1;
            }
            mid=high;
            if(get(d,mid)*cd[mid]-get(sum,mid)>x)mid--;
            double ans=(x-(get(d,mid)*cd[mid]-get(sum,mid)));
            ans/=get(d,mid);//cout<<mid<<" "<<get(d,mid)<<endl;
            printf("%.6lf\n",cd[mid]+ans);
        }
    }
}
