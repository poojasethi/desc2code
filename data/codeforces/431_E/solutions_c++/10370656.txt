#include <bits/stdc++.h>

#define mp make_pair
#define st first
#define nd second
#define pb push_back

using namespace std;

typedef long long ll;
typedef pair< ll,ll > pll;
typedef pair< int,int > pii;

const int inf = 2000000000, N = 100000, M = 200005;
ll MAX = 1000000000;

struct fenwick_tree {
	ll f[M+5];

	void upd(int x, ll t) {
		for (; x <= M; x += x & -x)
			f[x] += t;
	}

	ll que(int x) {
		ll ans = 0;

		for (; x; x -= x & -x)
			ans += f[x];

		return ans;
	}
};

fenwick_tree f1, f2;
int n, q, a[N+5], cmd[N+5], y[N+5];
ll x[N+5];
vector<int> v;

int get(ll x) {
	int search = min(x, (ll) inf);

	return upper_bound(v.begin(), v.end(), search) - v.begin();
}

int main()
{
	scanf("%d %d", &n, &q);

	for (int i = 1; i <= n; i++) {
		scanf("%d", a+i);

		v.pb(a[i]);
	}

	for (int i = 1; i <= q; i++) {
		scanf("%d", cmd+i);

		if (cmd[i] == 1) {
			scanf("%lld %d", x+i, y+i);
			
			v.pb(y[i]);
		}
		else
			scanf("%lld", x+i);
	}

	v.pb(inf+5);
	
	sort(v.begin(), v.end());
	v.resize(unique(v.begin(), v.end()) - v.begin());

	for (int i = 1; i <= n; i++) {
		f1.upd(get(a[i]), a[i]);
		f2.upd(get(a[i]), 1);
	}

	for (int i = 1; i <= q; i++) {	
		if (cmd[i] == 1) {
			f1.upd(get(a[x[i]]), -a[x[i]]);
			f2.upd(get(a[x[i]]), -1);

			a[x[i]] = y[i];

			f1.upd(get(a[x[i]]), a[x[i]]);
			f2.upd(get(a[x[i]]), 1);
		}
		else {
			double l = 0, r = 1e15;

			for (int j = 0; j < 75; j++) {
				double mi = (l + r) / 2;

				if (x[i] <= mi * f2.que(get(mi)) - f1.que(get(mi)))
					r = mi;
				else
					l = mi;
			}
			
			printf("%.9lf\n", l);
		}
	}
	
	return 0;
}
