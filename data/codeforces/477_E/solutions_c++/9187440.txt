#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <map>
#include <queue>
#include <vector>
using namespace std;

int n, data[400050], done[400050], f[5][20][400050];

int Rand()
{
    return (rand() << 15) | rand();
}

int  Read()
{
int  result = 0;
char flag = getchar();
     
     for (; flag < '0' || '9' < flag; flag = getchar());
     for (; '0' <= flag && flag <= '9'; flag = getchar())
     {
         result = 10 * result + flag - 48;
     }
     
     return result;
}

void Init_RMQ()
{
int  Log = done[n], flag, i, j;
     
     for (flag = 0; flag <= 4; flag++)
     {
         for (i = 1; i <= Log; i++)
         {
             for (j = 1; j + (1 << i) - 1 <= n; j++)
             {
                 f[flag][i][j] = min(f[flag][i - 1][j], f[flag][i - 1][j + (1 << (i - 1))]);
             }
         }
     }
     
     return;
}

int  Ask(int nowleft, int nowright, int flag)
{
int  Log = (int) (done[nowright - nowleft + 1]);
     
     return min(f[flag][Log][nowleft], f[flag][Log][nowright - (1 << Log) + 1]);
}

int  Same(int r1, int c1, int r2, int c2)
{
int  answer = min(max(c1 - c2, c2 - c1), min(c2, data[r2] - c2) + 1), low, mid, high, temp;
     
     low = 0;
     high = r2;
     while (low + 1 < high)
     {
           mid = (low + high) >> 1;
           if  (Ask(mid, r2, 4) < c2)
           {
               low = mid;
           }   else
           {
               high = mid;
           }
     }
     temp = Ask(high, r2, 2) + 2 * r2 - c2;
     if  (c1 < c2)
     {
         temp++;
     }
     answer = min(answer, temp);
     if  (low != 0)
     {
         temp = f[0][0][low] + 2 * r2 + c2;
         if  (c1 < c2)
         {
             temp++;
         }
         answer = min(answer, temp);
     }
     
     low = r2;
     high = n + 1;
     while (low + 1 < high)
     {
           mid = (low + high) >> 1;
           if  (Ask(r2, mid, 4) >= c2)
           {
               low = mid;
           }   else
           {
               high = mid;
           }
     }
     temp = Ask(r2, low, 3) - 2 * r2 - c2;
     if  (c1 < c2)
     {
         temp++;
     }
     answer = min(answer, temp);
     if  (high != n + 1)
     {
         temp = f[1][0][high] - 2 * r2 + c2;
         if  (c1 < c2)
         {
             temp++;
         }
         answer = min(answer, temp);
     }
     
     return answer;
}

int  DR(int r1, int c1, int r2, int c2)
{
int  answer = 999999999, temp, low, mid, high, tl, th;
     //up
     if  (Ask(r1, r2, 4) > c2)
     {
         low = 0;
         high = r1;
         while (low + 1 < high)
         {
               mid = (low + high) >> 1;
               if  (Ask(mid, r1, 4) < c2)
               {
                   low = mid;
               }   else
               {
                   high = mid;
               }
         }
         answer = min(answer, r2 - r1 + 1 + Ask(high, r1, 2) + 2 * r1 - c2);
         if  (low != 0)
         {
             answer = min(answer, r2 - r1 + 1 + f[0][0][low] + 2 * r1 + c2);
         }
     }
     //mid
     low = r1;
     high = r2;
     while (low + 1 < high)
     {
           mid = (low + high) >> 1;
           if  (Ask(mid, r2, 4) < c2)
           {
               low = mid;
           }   else
           {
               high = mid;
           }
     }
     tl = Ask(low, r2, 4);
     th = Ask(high, r2, 4);
     answer = min(answer, r2 - r1 + 1 + max(tl - c2, c2 - tl));
     answer = min(answer, r2 - r1 + 1 + max(th - c2, c2 - th));
     //down
     temp = min(c1, Ask(r1 + 1, r2, 4));
     answer = min(answer, r2 - r1 + Same(r2, temp, r2, c2));
     
     return answer;
}

int  DL(int r1, int c1, int r2, int c2)
{
int  answer = 999999999, temp, low, mid, high, tl, th;

     //up
     
     if  (Ask(r1, r2, 4) > c2)
     {
         low = 0;
         high = r1;
         while (low + 1 < high)
         {
               mid = (low + high) >> 1;
               if  (Ask(mid, r1, 4) < c2)
               {
                   low = mid;
               }   else
               {
                   high = mid;
               }
         }
         answer = min(answer, r2 - r1 + Ask(high, r1, 2) + 2 * r1 - c2);
         if  (low != 0)
         {
             answer = min(answer, r2 - r1 + f[0][0][low] + 2 * r1 + c2);
         }
     }
     
     //mid
     low = r1;
     high = r2;
     while (low + 1 < high)
     {
           mid = (low + high) >> 1;
           if  (Ask(mid, r2, 4) < c2)
           {
               low = mid;
           }   else
           {
               high = mid;
           }
     }
     tl = Ask(low, r2, 4);
     th = Ask(high, r2, 4);
     answer = min(answer, r2 - r1 + 1 + max(tl - c2, c2 - tl));
     answer = min(answer, r2 - r1 + 1 + max(th - c2, c2 - th));
     //down
     temp = min(c1, Ask(r1 + 1, r2, 4));
     answer = min(answer, r2 - r1 + Same(r2, temp, r2, c2));
     
     return answer;
}

int  UR(int r1, int c1, int r2, int c2)
{
int  answer = 999999999, temp, low, mid, high, tl, th;
     
     //up
     temp = min(c1, Ask(r2, r1 - 1, 4));
     answer = min(answer, r1 - r2 + Same(r2, temp, r2, c2));
     //mid
     low = r2;
     high = r1;
     while (low + 1 < high)
     {
           mid = (low + high) >> 1;
           if  (Ask(r2, mid, 4) >= c2)
           {
               low = mid;
           }   else
           {
               high = mid;
           }
     }
     tl = Ask(r2, low, 4);
     th = Ask(r2, high, 4);
     answer = min(answer, r1 - r2 + 1 + max(tl - c2, c2 - tl));
     answer = min(answer, r1 - r2 + 1 + max(th - c2, c2 - th));
     //down
     if  (Ask(r2, r1, 4) > c2)
     {
         low = r1;
         high = n + 1;
         while (low + 1 < high)
         {
               mid = (low + high) >> 1;
               if  (Ask(r1, mid, 4) >= c2)
               {
                   low = mid;
               }   else
               {
                   high = mid;
               }
         }
         answer = min(answer, r1 - r2 + 1 + Ask(r1, low, 3) - 2 * r1 - c2);
         if  (high != n + 1)
         {
             answer = min(answer, r1 - r2 + 1 + f[1][0][high] - 2 * r1 + c2);
         }
     }
     
     return answer;
}

int  UL(int r1, int c1, int r2, int c2)
{
int  answer = 999999999, temp, low, mid, high, tl, th;
     
     //up
     temp = min(c1, Ask(r2, r1 - 1, 4));
     answer = min(answer, r1 - r2 + Same(r2, temp, r2, c2));
     //mid
     low = r2;
     high = r1;
     while (low + 1 < high)
     {
           mid = (low + high) >> 1;
           if  (Ask(r2, mid, 4) >= c2)
           {
               low = mid;
           }   else
           {
               high = mid;
           }
     }
     tl = Ask(r2, low, 4);
     th = Ask(r2, high, 4);
     answer = min(answer, r1 - r2 + 1 + max(tl - c2, c2 - tl));
     answer = min(answer, r1 - r2 + 1 + max(th - c2, c2 - th));
     //down
     if  (Ask(r2, r1, 4) > c2)
     {
         low = r1;
         high = n + 1;
         while (low + 1 < high)
         {
               mid = (low + high) >> 1;
               if  (Ask(r1, mid, 4) >= c2)
               {
                   low = mid;
               }   else
               {
                   high = mid;
               }
         }
         answer = min(answer, r1 - r2 + Ask(r1, low, 3) - 2 * r1 - c2);
         if  (high != n + 1)
         {
             answer = min(answer, r1 - r2 + f[1][0][high] - 2 * r1 + c2);
         }
     }
     
     return answer;
}

int main()
{
int q, i, r1, c1, r2, c2;
    
//    freopen("e.in", "r", stdin);
//    freopen("e.out", "w", stdout);
    
    srand((unsigned) time (0));
    
    n = Read();
    for (i = 1; i <= n; i++)
    {
        data[i] = Read();
        f[0][0][i] = -data[i] - 2 * i;
        f[1][0][i] = -data[i] + 2 * i;
        f[2][0][i] = data[i] - 2 * i;
        f[3][0][i] = data[i] + 2 * i;
        f[4][0][i] = data[i];
    }
    
    for (i = 1; i <= n; i++)
    {
        done[i] = (int) (log2(i));
    }
    
    Init_RMQ();
    
    q = Read();
    for (i = 1; i <= q; i++)
    {
        r1 = Read();
        c1 = Read();
        r2 = Read();
        c2 = Read();
        
        if  (r1 == r2)
        {
            printf("%d\n", Same(r1, c1, r2, c2));
        }   else
        if  (r1 < r2)
        {
            if  (c1 < c2)
            {
                printf("%d\n", DR(r1, c1, r2, c2));
            }   else
            {
                printf("%d\n", DL(r1, c1, r2, c2));
            }
        }   else
        {
            if  (c1 < c2)
            {
                printf("%d\n", UR(r1, c1, r2, c2));
            }   else
            {
                printf("%d\n", UL(r1, c1, r2, c2));
            }
        }
    }
    
    return 0;
}
