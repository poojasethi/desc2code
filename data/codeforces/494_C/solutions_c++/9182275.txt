#include<cstring>
#include<cmath>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#define forout(i,l,r) for(i=l;i<=r;i++)
#define forin(i,l,r) for(int i=l;i<=r;i++)
#define antiforin(i,r,l)for(int i=r;i>=l;i--)
#define antiforout(i, r, l)for (i = r; i >= l;i--)
#define clearit(a,k) memset(a,k,sizeof(a))
#define foredge(x) for(int i=ind[x];i;i=nex[i])
#define formatrix for(int i=1;i<= m;i++)for(int j=1;j<=n;j++)
using namespace std;
#pragma warning(disable:4996)
int n, m;
double f[5555][5555] = { 0 };
bool visit[5555] = { 0 };
int mm[111111][17] = { 0 };
int val[5555] = { 0 };
struct master{
    int l, r;
    double k;
    void input(){
        scanf("%d%d%lf", &l, &r, &k);
    }
}cd[5555];
bool cmp(const master &a, const master &b){
    return a.r - a.l < b.r - b.l;
}
int LOG[111111] = { 0 };
int findmax(int l, int r){
    return max(mm[l][LOG[r - l + 1]], mm[r - (1 << LOG[r - l + 1]) + 1][LOG[r - l + 1]]);
}
int main(){
    scanf("%d%d", &n, &m);
    forin(i,1,n)scanf("%d", &mm[i][0]);
    forin(k,1,16)
    forin(i,1,n-(1<<k)+1)
        mm[i][k] = max(mm[i][k - 1], mm[i + (1 << (k - 1))][k - 1]);
    int nex = 1;
    LOG[0] = -1;
    forin(i,1,100000){
        LOG[i] = LOG[i - 1];
        if (i == nex)LOG[i]++, nex <<= 1;
    }
    forin(i,1,m)cd[i].input();
    sort(cd + 1, cd + m + 1, cmp);
    cd[++m].l = 1, cd[m].r = n, cd[m].k = 0;
    forin(i,1,m){
    val[i] = findmax(cd[i].l, cd[i].r);
    forin(j, 0, m)f[i][j] = 1.;
    forin(j,1,i-1)if(cd[j].l>=cd[i].l&&cd[j].r<=cd[i].r){
            if (visit[j])continue;
            visit[j] = 1;
            forin(k, val[i] - val[j], m)f[i][k-val[i]+val[j]] *= f[j][k];
    }
    antiforin(k, m, 1)f[i][k] = f[i][k] * (1. - cd[i].k) + f[i][k - 1] * cd[i].k;
        f[i][0] *= (1. - cd[i].k);
    }
    double ans = 0;
    for (int i = 1; i <= m; i++)
        ans += (f[m][i] - f[m][i - 1])*(val[m] + i);
    ans += f[m][0] * val[m];
        printf("%.8f\n", ans);
    return 0;
}