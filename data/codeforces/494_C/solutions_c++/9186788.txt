#include<cstdio>
#include<cstdlib>
#include<algorithm>
#define N 100005
#define M 5500
#define rep(i,t) for(int i=son[t],v=ed[i];i;i=next[i],v=ed[i])
#define For(i,l,r) for(int i=l;i<=r;i++)
#define Dor(i,r,l) for(int i=r;i>=1;i--)
using namespace std;
struct rec{int l,r; double p;}E[N];
bool cmp(const rec &i,const rec &j){return i.l==j.l?i.r>j.r:i.l<j.l;}
int data[4*N],ll,rr,ret,n,m;
int mx[M],be[M];
double sum[M][M],tmp[M],ans[M][M];

void build(int t,int l,int r){
    if(l==r){scanf("%d",&data[t]); return;}
    int mid=(l+r)>>1;
    build(t*2,l,mid);
    build(t*2+1,mid+1,r);
    data[t]=max(data[t*2],data[t*2+1]);
}
void query(int t,int l,int r){
    if(ll<=l&&r<=rr){ret=max(ret,data[t]); return;}
    int mid=(l+r)>>1;
    if(ll<=mid) query(t*2,l,mid);
    if(rr>mid) query(t*2+1,mid+1,r);
}
void init(){
    scanf("%d%d",&n,&m); build(1,1,n);
    For(i,1,m) scanf("%d%d%lf",&E[i].l,&E[i].r,&E[i].p);
    E[++m]=(rec){1,n,0};
    sort(E+1,E+1+m,cmp);
    For(i,1,m){
        ll=E[i].l; rr=E[i].r; ret=0;
        query(1,1,n); mx[i]=ret;
    }
}
void work(){
    Dor(t,m,1){
        For(j,0,m) tmp[j]=1;
        For(v,t+1,m)
        if(!be[v]&&E[t].l<=E[v].l&&E[v].r<=E[t].r){
            be[v]=1;
            For(j,0,m) tmp[j]*=ans[v][min(m,mx[t]+j-mx[v])];
        }
        Dor(j,m,1) tmp[j]-=tmp[j-1];
        For(j,0,m) ans[t][j]=tmp[j]*(1-E[t].p)+tmp[j-1]*E[t].p;
        For(j,1,m) ans[t][j]+=ans[t][j-1];
    }
    int t=1; double ret=0;
    Dor(j,m,1) ans[t][j]-=ans[t][j-1];
    For(j,0,m) ret+=ans[t][j]*(mx[t]+j);
    printf("%.12lf\n",ret);
}
int main(){
    init();
    work();
}
