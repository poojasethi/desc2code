#pragma comment(linker, "/STACK:100000000")
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <ctime>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;
#define int64 long long
#define ldb long double
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(a) ((int) (a).size())
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define taskname "task_c"
const ldb pi = acos(-1.0);
const int N = (int) 1e5 + 10;
const int Q = 5005;
int n, m, l[Q], r[Q], a[N], mx[Q], q;
double p[Q], ans[Q][Q], tmp[Q], res;
bool used[Q];
set<int> all;

int main() {
//	assert(freopen(taskname".in", "r", stdin));
//	assert(freopen(taskname".out", "w", stdout));
	scanf("%d%d", &n, &q);
	for (int i = 0; i < n; ++i)
		scanf("%d", &a[i]), all.insert(i);
	for (int i = 0; i < q; ++i) {
		scanf("%d%d%lf", &l[i], &r[i], &p[i]), l[i]--, r[i]--;
		for (int j = 0; j < i; ++j)
			if (r[j] - l[j] > r[i] - l[i]) {
				swap(l[i], l[j]);
				swap(r[i], r[j]);
				swap(p[i], p[j]);
			}
	}
	l[q] = 0, r[q] = n - 1, p[q] = 0, q++;
	for (int i = 0; i < q; ++i) {
		mx[i] = 0;
		vector<int> ch;
		for (int j = 0; j < i; ++j)
			if ((l[i] <= l[j]) && (r[j] <= r[i]) && !used[j]) {
				used[j] = true;
				ch.pb(j);
				mx[i] = max(mx[i], mx[j]);
			}
		while (true) {
			set<int>::iterator it = all.lower_bound(l[i]);
			if ((it != all.end()) && (*it <= r[i])) {
				mx[i] = max(mx[i], a[*it]);
				all.erase(it);
			} else break;
		}
		for (int k = 0; k <= q; ++k)
			tmp[k] = 1;
		for (int tj = 0; tj < sz(ch); ++tj) {
			int j = ch[tj];
			for (int k = 0; k <= q; ++k)
				if (mx[i] + k - mx[j] <= q) tmp[k] *= ans[j][mx[i] + k - mx[j]];
		}
		for (int k = q; k >= 1; --k)
			tmp[k] -= tmp[k - 1];
		ans[i][0] = (1 - p[i]) * tmp[0];
		for (int k = 1; k <= q; ++k)
			ans[i][k] = ans[i][k - 1] + p[i] * tmp[k - 1] + (1 - p[i]) * tmp[k];
	}
	res = ans[q - 1][0] * mx[q - 1];
	for (int i = 1; i <= q; ++i)
		res += (ans[q - 1][i] - ans[q - 1][i - 1]) * (mx[q - 1] + i);
	printf("%.10lf\n", res);
	return 0;
}