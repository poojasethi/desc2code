#include<iostream>
#include<vector>
#include<algorithm>
#include<iomanip>
#define f first
#define s second
#define mp make_pair
using namespace std;



int n, q, a[100000], nextjump[5001], maxa;
pair<pair<int, int>, double> jump[5001];

double jumpval[5001][10004];



bool sortfunc(pair<pair<int, int>, double> l, pair<pair<int, int>, double> r) {
	return mp(mp(l.f.f, -l.f.s), l.s) < mp(mp(r.f.f, -r.f.s), r.s);
}





//Format: (prob, expected larger than size)
void solve(int jind) {
	
	int cmax = -5002, cind = jind + 1, cpos = jump[jind].f.f;
	
	while(cpos < jump[jind].f.s) {
		if(cind < q && cpos == jump[cind].f.f) {
			cpos = jump[cind].f.s;
			
			cind = nextjump[cind];
		}
		else {
			cmax = max(cmax, a[cpos]);
			cpos++;
		}
	}
	
	if(cmax < maxa - 5002)
		jumpval[jind][0] = 1;
	else
		jumpval[jind][5002-maxa+cmax] = 1;
		
		
	cind = jind + 1;
	
	
	while(cind < q && jump[cind].f.f < jump[jind].f.s) {
		solve(cind);
		
		//Perform the combination
		double lsum = 0, rsum = 0, cpval;
		
		for(int i=0;i<10004;i++) {
			cpval = jumpval[jind][i];
			
			jumpval[jind][i] = rsum * jumpval[jind][i];
			lsum += cpval;
			
			jumpval[jind][i] += lsum * jumpval[cind][i];
			rsum += jumpval[cind][i];
		}
		
		cind = nextjump[cind];
	}
	
	//Finally consider the shift
	
	for(int i=10003;i>0;i--)
		jumpval[jind][i] = (1 - jump[jind].s) * jumpval[jind][i] + jump[jind].s * jumpval[jind][i-1];
}




int main() {
	cin.sync_with_stdio(false);
	
	cin >> n >> q;
	
	for(int i=0;i<n;i++)
		cin >> a[i], maxa = max(maxa, a[i]);
		
	for(int i=0;i<q;i++)
		cin >> jump[i].f.f >> jump[i].f.s >> jump[i].s, jump[i].f.f--;
	
	jump[q++] = mp(mp(0, n), 0.0);
	
	
	sort(jump, jump + q, sortfunc);
	
	nextjump[q-1] = q;
	
	for(int i=q-2;i>=0;i--) {
		nextjump[i] = i+1;
		
		while(nextjump[i] != q && jump[i].f.s > jump[nextjump[i]].f.f)
		nextjump[i] = nextjump[nextjump[i]];
	}
	
	
	
	solve(0);
	
	double result = 0;
	
	for(int i=0;i <= q;i++)
		result += jumpval[0][5002 + i] * (maxa + i);
	
	
	cout << fixed << setprecision(7) << result << '\n';
	
	return 0;
}






























