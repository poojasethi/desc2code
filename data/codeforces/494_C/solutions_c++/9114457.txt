#include <math.h>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <sstream>
#include <set>
using namespace std;

int a[100000];

struct lrp {
  int l, r;
  double p;
  lrp(int _l, int _r, double _p) { l = _l; r = _r; p = _p; }
  lrp() {}
  bool operator < (const lrp & another) const {
    if (l != another.l) return l < another.l;
    return r > another.r;
  }
};

vector<lrp> L;

double prob[5002][10004];
int n, q;
int best;

int solve(int start) {
  int ll = L[start].l;
  int rr = L[start].r;
  double pp = L[start].p;

  int bb = -20000;
  for (int i=ll; i<=rr; i++) bb = max(bb, a[i]);
  for (int i=max(0, bb-best+q); i>=0; i--)
    prob[start][i] = 1.0;

  int now = start + 1;
  vector<int> idx;
  idx.push_back(start);
  while (now < q && L[now].l <= L[start].r) {
    idx.push_back(now);
    int ret = solve(now);
    now = ret;
  }

  int sz = idx.size();
  for (int i=0; i<=2*q; i++) {
    double res = 1.0;
    for (int j=0; j<sz; j++) {
      res *= 1-prob[idx[j]][i];
      if (res < 1e-30) break;
    }
    prob[start][i] = 1 - res;
  }
  for (int i=2*q; i>0; i--)
    prob[start][i] = prob[start][i] * (1-pp) + prob[start][i-1] * pp;

  return now;
}

int main()
{
  cin >> n >> q;
  for (int i=0; i<n; i++) {
    scanf("%d", &a[i]);
    best = max(best, a[i]);
  }

  for (int i=0; i<q; i++) {
    int l, r;
    double p;
    cin >> l >> r >> p;
    L.push_back(lrp(l-1, r-1, p));
  }
  L.push_back(lrp(0, n-1, 0.0));
  q++;
  sort(L.begin(), L.end());

  solve(0);
  double res = best;
  for (int i=q; i<=2*q; i++)
    res += (prob[0][i] - prob[0][i+1]) * (i-q);
  printf("%.14f\n", res);
}
