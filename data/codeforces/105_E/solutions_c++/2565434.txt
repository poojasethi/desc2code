#include <cstdio>
#include <cstring>

const int mo = 100000007;
int x[3], mr[3], tr[3], gr[3], grd[3], ans, cnt;
bool access[mo];

inline int max(int x, int y){return x > y ? x : y;}

int hash(int s){
	s = (((s * 19 + x[0]) % mo * 19  + x[1]) % mo * 19  + x[2]) % mo;
	s = (((s * 17 + gr[0] + 1) % mo * 17 + gr[1] + 1) % mo * 17 + gr[2] + 1) % mo;
	s = (((s * 13 + grd[0]) % mo + 13 + grd[1]) % mo * 13 + grd[2]) % mo;
	return s;
}

void dfs(int s){
	ans = max(ans, max(x[0], max(x[1], x[2])));
	if (!s) return;
	int id = hash(s);
	if (access[id]) return;
	for (int i = 0; i < 3; i++){
		int os = i * 3;
		if (gr[i] < 0 && !grd[i] && ((1 << os) & s)){
			for (int nx = max(1, x[i] - mr[i]); nx <= x[i] + mr[i]; nx++){
				if (x[0] == nx || x[1] == nx || x[2] == nx) continue;
				int tx = x[i]; x[i] = nx;
				dfs(s ^ (1 << os));
				x[i] = tx;
			}
		}
		if (!grd[i] && ((2 << os) & s)){
			for (int k = 0; k < 3; k++)
				if ((x[i] - x[k] == 1 || x[k] - x[i] == 1) && !grd[k]){
					gr[i] = k; grd[k] = 1;
					int tx = x[k]; x[k] = x[i];
					dfs(s ^ (2 << os));
					x[k] = tx; gr[i] = -1; grd[k] = 0;
				}
		}
		if (!grd[i] && gr[i] >= 0 && ((4 << os) & s)){
			for (int nx = max(1, x[i] - tr[i]); nx <= x[i] + tr[i]; nx++){
				if (x[0] == nx || x[1] == nx || x[2] == nx) continue;
				int tgr = gr[i]; x[tgr] = nx; gr[i] = -1; grd[tgr] = 0;
				if (gr[tgr] >= 0) x[gr[tgr]] = nx;
				dfs(s ^ (4 << os));
				if (gr[tgr] >= 0) x[gr[tgr]] = x[i];
				grd[tgr] = 1; gr[i] = tgr; x[tgr] = x[i];
			}
		}
	}
	access[id] = true;
}

int main(){
	for (int i = 0; i < 3; i++) scanf("%d%d%d", x + i, mr + i, tr + i);
	gr[0] = gr[1] = gr[2] = -1;
	dfs((1 << 9) - 1);
	printf("%d", ans);
	return 0;
}
