#include <iostream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>

using namespace std;

const int MOD=1000007;

int ans,x[5],go[5],thr[5],hang[5];
bool f[1000007],hung[5];

int hash(long long s)
{
	for (int i=0; i<3; ++i)
		s=(s*1007+x[i]*101+hung[i]*97+hang[i]*61)%MOD;
	return int(s);
}

void dfs(int s)
{
	ans=max(max(max(x[0],x[1]),x[2]),ans);
	if (s==0) return;
	int h=hash(s);
	if (f[h]) return;
	f[h]=1;
	for (int k=0; k<3; ++k){
		int p=3*k;
		if (s&(1<<p) && !hung[k] && hang[k]==-1)
			for (int i=max(1,x[k]-go[k]); i<=x[k]+go[k]; ++i){
				if (x[0]==i || x[1]==i || x[2]==i) continue;
				int tx=x[k];
				x[k]=i;
				dfs(s^(1<<p));
				x[k]=tx;
			}
		if (s&(2<<p) && !hung[k] && hang[k]==-1)
			for (int i=0; i<3; ++i)
				if (!hung[i] && (x[k]-x[i]==1 || x[i]-x[k]==1)){
					int tx=x[i];
					x[i]=x[k];
					hung[i]=1;
					hang[k]=i;
					if (hang[i]!=-1) x[hang[i]]=x[k];
					dfs(s^(2<<p));
					x[i]=tx;
					hung[i]=0;
					hang[k]=-1;
					if (hang[i]!=-1) x[hang[i]]=tx;
				}
		if (s&(4<<p) && !hung[k] && hang[k]!=-1)
			for (int i=max(1,x[k]-thr[k]); i<=x[k]+thr[k]; ++i){
				if (x[0]==i || x[1]==i || x[2]==i) continue;
				int tb=hang[k];
				x[tb]=i;
				hang[k]=-1;
				hung[tb]=0;
				if (hang[tb]!=-1) x[hang[tb]]=i;
				dfs(s^(4<<p));
				x[tb]=x[k];
				hang[k]=tb;
				hung[tb]=1;
				if (hang[tb]!=-1) x[hang[tb]]=x[k];
			}
	}
}

int main()
{
	for (int i=0; i<3; ++i){
		cin >> x[i] >> go[i] >> thr[i];
		hang[i]=-1;
	}
	dfs(511);
	cout << ans << endl;
}
 			 		 	  		 			   			  	  			