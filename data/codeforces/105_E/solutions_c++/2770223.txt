#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
int pos[4],mor[4],thr[4],hold[4],i,ans;
bool v[8][8][8][60][60][60];

int ocupy(int x)
{
	if(x<=0) return 4;
	if(pos[1]==x) return 1;
	if(pos[2]==x) return 2;
	if(pos[3]==x) return 3;
	return 0;
}

void dfs(int sta,int stb,int stc);

void go(int k,int sta,int stb,int stc)
{
	if(pos[k]<=0) return;
	int st,re,i,j,rea=sta,reb=stb,rec=stc;
	k==1?(st=sta):(k==2?(st=stb):(st=stc));
	if(!(st&1)&&!hold[k])
	{
		k==1?(sta=st|1):(k==2?(stb=st|1):(stc=st|1));
		for(j=1;j<=mor[k];j++)
		{
			if(!ocupy(pos[k]-j))
			{
				pos[k]-=j;
				dfs(sta,stb,stc);
				pos[k]+=j;
			}
			if(!ocupy(pos[k]+j))
			{
				pos[k]+=j;
				dfs(sta,stb,stc);
				pos[k]-=j;
			}
		}
	}
	if(!(st>>1&1)&&!hold[k])
	{
		sta=rea,stb=reb,stc=rec;
		k==1?(sta=st|2):(k==2?(stb=st|2):(stc=st|2));
		if(i=ocupy(pos[k]-1),i>0&&i<4)
		{
			hold[k]=i;
			re=pos[i],pos[i]=0;
			dfs(sta,stb,stc);
			pos[i]=re,hold[k]=0;
		}
		if(i=ocupy(pos[k]+1),i>0&&i<4)
		{
			hold[k]=i;
			re=pos[i],pos[i]=0;
			dfs(sta,stb,stc);
			pos[i]=re,hold[k]=0;
		}
	}
	if(!(st>>2&1)&&hold[k])
	{
		sta=rea,stb=reb,stc=rec;
		k==1?(sta=st|4):(k==2?(stb=st|4):(stc=st|4));
		for(j=1;j<=thr[k];j++)
		{
			if(!ocupy(pos[k]-j))
			{
				pos[hold[k]]=pos[k]-j;
				re=hold[k],hold[k]=0;
				dfs(sta,stb,stc);
				hold[k]=re,pos[hold[k]]=0;
			}
			if(!ocupy(pos[k]+j))
			{
				pos[hold[k]]=pos[k]+j;
				re=hold[k],hold[k]=0;
				dfs(sta,stb,stc);
				hold[k]=re,pos[hold[k]]=0;
			}
		}
	}
}

void dfs(int sta,int stb,int stc)
{
	if(v[sta][stb][stc][pos[1]][pos[2]][pos[3]]) return;
	v[sta][stb][stc][pos[1]][pos[2]][pos[3]]=1;
	ans=max(max(ans,pos[1]),max(pos[2],pos[3]));
	go(1,sta,stb,stc);
	go(2,sta,stb,stc);
	go(3,sta,stb,stc);
}

int main()
{
	for(i=1;i<=3;i++) cin>>pos[i]>>mor[i]>>thr[i];
	dfs(0,0,0);
	cout<<ans<<endl;
}