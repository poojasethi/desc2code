#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())


li pos[3],move[3],throws[3],grab[3],grabed[3];
li res=0;

void recur(li mask){
	rep(i,3)if((mask>>(i*3+2))&1){
		if(grabed[i]) continue;
		pos[i]-=move[i]+1;
		for(li j=-move[i];j<=move[i];j++){
			pos[i]++;
			if(j==move[i] || pos[i]-pos[0]==1 || pos[i]-pos[1]==1 || pos[i]-pos[2]==1) recur(mask^(1<<(i*3+2)));
			if(j==move[i]-1 && (pos[0]-pos[i]==1 || pos[1]-pos[i]==1 || pos[2]-pos[i]==1)) recur(mask^(1<<(i*3+2)));
		}
		pos[i]-=move[i];
	}
	rep(i,3)if((mask>>(i*3+1))&1){
		if(grabed[i]) continue;
		rep(j,3)if(i!=j){
			if(abs(pos[i]-pos[j])==1){
				li save=pos[j];
				pos[j]=pos[i];
				grabed[j]=true;
				grab[i]=j;
				recur(mask^(1<<(i*3+1)));
				grab[i]=-1;
				grabed[j]=false;
				pos[j]=save;
			}
		}
	}
	rep(i,3)if((mask>>(i*3))&1){
		if(grabed[i]) continue;
		if(grab[i]==-1) continue;
		li save=grab[i];
		grab[i]=-1;
		grabed[save]=false;
		pos[save]-=throws[i]+1;
		for(li j=-throws[i];j<=throws[i];j++){
			pos[save]++;
			if(j==throws[i] || pos[save]-pos[0]==1 || pos[save]-pos[1]==1 || pos[save]-pos[2]==1 ) recur(mask^(1<<(i*3)));
			if(j==throws[i]-1 && (pos[0]-pos[save]==1 || pos[1]-pos[save]==1 || pos[2]-pos[save]==1)) recur(mask^(1<<(i*3)));
		}
		pos[save]-=throws[i];
		grabed[save]=true;
		grab[i]=save;
	}
//rep(i,3) cout<<pos[i]<<" "; cout<<endl;
	res=max(max(pos[0],pos[1]),max(res,pos[2]));
}


int main(){
	rep(i,3) cin>>pos[i]>>move[i]>>throws[i];
	rep(i,3) grabed[i]=false;
	rep(i,3) grab[i]=-1;
	recur((1<<9)-1);
	cout<<res<<endl;
}
