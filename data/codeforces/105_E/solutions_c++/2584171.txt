#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>
using namespace std;

const int P = 100007,Q = 100003,R = 103,T = 31,mo = 1000000009;

map < int , int > vis;

int ans;
int sit[10],up[10],lo[10],move[10],thro[10];

int Hash(int now)
{
	long long ha = now;
	for (int i = 1; i <= 3; ++i)
		ha = (ha*P+sit[i]*Q+up[i]*R+lo[i]*T)%mo;
	return ha;
}

void dfs(int now)
{
	int x,y,z,tmps,i,ha;
	ha = Hash(now);
	if (vis[ha]) return ;
	vis[ha] = true;

	for (x = 1; x <= 3; ++x)
	{
		ans = max(ans,sit[x]);
		y = (x-1)*3;
		if ((now & (1 << y)) && !up[x] && !lo[x])
			for (i = max(1,sit[x]-move[x]); i <= sit[x]+move[x]; ++i)
			{
				if (sit[1] == i || sit[2] == i || sit[3] == i) continue ;
				tmps = sit[x];
				sit[x] = i;
				dfs(now ^ (1 << y));
				sit[x] = tmps;
			}
		if ((now & (2 << y)) && !up[x] && !lo[x])
			for (i = 1; i <= 3; ++i)
				if (abs(sit[x]-sit[i]) == 1 && !up[i])
				{
					up[i] = true;
					lo[x] = i;
					tmps = sit[i];
					sit[i] = sit[x];
					if (lo[i]) sit[lo[i]] = sit[x];
					dfs(now ^ (2 << y));
					up[i] = false;
					lo[x] = 0;
					sit[i] = tmps;
					if (lo[i]) sit[lo[i]] = tmps;	
				}
		if ((now & (4 << y)) && !up[x] && lo[x])
			for (i = max(1,sit[x]-thro[x]); i <= sit[x]+thro[x]; ++i)
			{
				if (sit[1] == i || sit[2] == i || sit[3] == i) continue ;
				z = lo[x];
				lo[x] = 0;
				up[z] = false;
				sit[z] = i;
				if (lo[z]) sit[lo[z]] = i;
				dfs(now ^ (4 << y));
				lo[x] = z;
				up[z] = true;
				sit[z] = sit[x];
				if (lo[z]) sit[lo[z]] = sit[x];
			}
	}
}

int main()
{

  for (int i = 1; i <= 3; ++i)
	  scanf("%d%d%d",&sit[i],&move[i],&thro[i]);
  dfs((1 << 9)-1);
  printf("%d",ans);
  
  return 0;
}
