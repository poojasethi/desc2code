#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<cstdio>
#include<ctime>
#include<map>
#define int64 long long
using namespace std;
map<int64,int> M;
int w[3],can[3],ju[3],ans,move[4],thr[4];
bool check(){
	int64 res=0;
	for(int i=0;i<3;++i)res=res*50+w[i];
	for(int i=0;i<3;++i)res=res*10+can[i];
	for(int i=0;i<3;++i)res=res*10+ju[i];
	if(M[res])return 1;
	M[res]=1;
//	printf("%I64d\n",res);
	ans=max(ans,max(max(w[0],w[1]),w[2]));
	return 0;
}
void cpy(int a[],int b[]){
	a[0]=b[0]; a[1]=b[1]; a[2]=b[2];
}
bool beiju(int i){
	if(ju[0]==i || ju[1]==i || ju[2]==i)return 1;
	return 0;
}
bool jianzhi(int x,int i){
	for(int j=0;j<3;++j){
		int z=1;
		if(ju[j]!=4)z=2;
		if(abs(x-w[j])<=z)return 0;
	}
	//if(ju[i]!=4 && abs(x-w[i])<=2)return 0;
	return 1;
}
void dfs(){
	if(check())return;
	int w_[3],can_[3],ju_[3];
	cpy(w_,w); cpy(can_,can); cpy(ju_,ju);
	for(int i=0;i<3;++i){
		//move
		if(!(can[i]&1) && ju[i]==4 && !beiju(i)){
			for(int j=-move[i];j<=move[i];++j){
				int x=w[i]+j;
				if(x==w[0] || x==w[1] || x==w[2])continue;
				if(jianzhi(x,i) && abs(j)!=move[i])continue;
				w[i]=x;
				can[i]|=1;
				dfs();
				cpy(w,w_); cpy(can,can_); cpy(ju,ju_);
			}
		}
		//pick up sb
		if(!(can[i]&2) && !beiju(i)){
			for(int j=0;j<3;++j)if(i!=j && abs(w[i]-w[j])==1 && !beiju(j)){
				can[i]|=2;
				ju[i]=j;
				w[j]=w[i];
				if(ju[j]!=4)w[ju[j]]=w[i];
				dfs();
				cpy(w,w_); cpy(can,can_); cpy(ju,ju_);
			}
		}
		//throw sb
		if(!(can[i]&4) && ju[i]!=4 && !beiju(i)){
			for(int j=-thr[i];j<=thr[i];++j){
				int x=w[i]+j;
				if(x==w[0] || x==w[1] || x==w[2])continue;
				if(jianzhi(x,i) && abs(j)!=thr[i])continue;
				can[i]|=4;
				w[ju[i]]=x;
				if(ju[ju[i]]!=4)w[ju[ju[i]]]=x;
				ju[i]=4;
				dfs();
				cpy(w,w_); cpy(can,can_); cpy(ju,ju_);
			}
		}
	}
}
int main(){
	for(;;){
		for(int i=0;i<3;++i){
			if(scanf("%d%d%d",&w[i],&move[i],&thr[i])==EOF)return 0;
		}
		M.clear();
		can[0]=can[1]=can[2]=0;
		ju[0]=ju[1]=ju[2]=4;
		ans=-1<<30;
		dfs();
		printf("%d\n",ans);
	}
}
