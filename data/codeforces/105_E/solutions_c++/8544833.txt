#include <bits/stdc++.h>

#define ll long long
#define ld long double
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<ld,ld>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define MAXINT ((~0) ^ (1 << 31))
#define MAXLL ((~0) ^ ((ll)1 << 63))
#define INF ((int)2e9)
#define INFL ((ll)9e18)
#define FOR(i,j,k) for(int i = j; i < k; i++)
#define REP(i,j,k) for(int i = j; i >= k; i--)
#define setmax(i) const int maxn = (int) i;
#define setmod(i) const int MOD = (int) i;
#define all(a) a.begin(),a.end()


//srand (time(NULL));

using namespace std;

int p[3],m[3],t[3], ans, cnt =0;
bool moved[3], grabed[3];
int grab[3];

bool dp[45][45][45][2][2][2][5][5][5];

void dfs()
{

    bool& now = dp[p[0]][p[1]][p[2]][moved[0]][moved[1]][moved[2]][grab[0]+2][grab[1]+2][grab[2]+2];
    if(now) return;
    now = true;

    //ans = max(ans, *max_element(p,p+3));
    ans = (ans < p[0]?p[0]:ans);
    ans = (ans < p[1]?p[1]:ans);
    ans = (ans < p[2]?p[2]:ans);
    
   // FOR(i,0,3) cout << p[i] << " ";
   // cout << endl;
    
    //move free
    FOR(i,0,3)
    {
	if(!grabed[i] && (grab[i] == -1 || grab[i] == -2) && !moved[i])
	{
	    int pos = p[i];
	    moved[i] = true;
	    FOR(j,max(1,pos-m[i]),pos+m[i]+1) if(j != pos)
	    {
		p[i] = j;
		dfs();
	    }
	    p[i] = pos;
	    moved[i] = false;
	}
    }
    //movefree done
	
    //cathcing
    FOR(i,0,3) FOR(j,0,3)
    {
	if(i == j) continue;
	if(!grabed[i] && grab[i] == -1 && !grabed[j] && abs(p[i]-p[j]) == 1)
	{
	    grab[i] = j;
	    grabed[j] = true;
	    int pos = p[j];
	    p[j] = p[i];

	    dfs();

	    grab[i] = -1;
	    grabed[j] = false;
	    p[j] = pos;
	}
    }
    //chatching done

    //trowing
    FOR(i,0,3)
    {
	if(grab[i] != -1 && grab[i] != -2)
	{
	    int j = grab[i];
	    grab[i] = -2;
	    grabed[j] = false;

	    FOR(k,max(i,p[i]-t[i]),p[i]+t[i]+1)
	    {
		p[j] = k;
		dfs();
	    }

	    grab[i] = j;
	    grabed[j] = true;
	}
    }
}

int main()
{
    ios_base::sync_with_stdio(0);cin.tie(0);
    FOR(i,0,3)
    {
	cin >> p[i] >> m[i] >> t[i];
	grab[i] = -1;
    }
    dfs();
    cout << ans;
}
