#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;

const int mod = 100000007;
int x[5], mr[5], tr[5], loc[5], ins[5];
bool used[mod];
int ans;

int gethash(int s) {
    s = (((s * 19 + x[0]) % mod * 19 + x[1]) % mod * 19 + x[2]) % mod;
    s = (((s * 5 + loc[0]) % mod * 5 + loc[1]) % mod * 5 + loc[2]) % mod;
    s = (((s * 2 + ins[0]) % mod * 2 + ins[1]) % mod * 2 + ins[2]) % mod;
    return s;
}

void dfs(int s) {
    int i, k, tx, id, w, t;
    ans = max(ans, max(x[0], max(x[1], x[2])));
    if (!s) return ;
    id = gethash(s);
    if (used[id]) return ;
    for (i = 0; i < 3; ++i) {
        w = i * 3;
        if (loc[i] == 3 && !ins[i] && (s & (1 << w)))
            for (tx = max(1, x[i] - mr[i]); tx <= x[i] + mr[i]; ++tx)
                if (tx != x[0] && tx != x[1] && tx != x[2]) {
                    t = x[i]; x[i] = tx; dfs(s ^ (1 << w)); x[i] = t;
                }
        if (!ins[i] && (s & (2 << w)))
            for (k = 0; k < 3; ++k)
                if ((x[k] - x[i] == 1 || x[i] - x[k] == 1) && !ins[k]) {
                    loc[i] = k; ins[k] = 1;
                    t = x[k]; x[k] = x[i];
                    dfs(s ^ (2 << w));
                    x[k] = t; ins[k] = 0; loc[i] = 3;
                }
        if (!ins[i] && loc[i] < 3 && (s & (4 << w)))
            for (tx = max(1, x[i] - tr[i]); tx <= x[i] + tr[i]; ++tx)
                if (tx != x[0] && tx != x[1] && tx != x[2]) {
                    t = loc[i]; x[t] = tx; loc[i] = 3; ins[t] = 0;
                    if (loc[t] < 3) x[loc[t]] = tx;
                    dfs(s ^ (4 << w));
                    if (loc[t] < 3) x[loc[t]] = x[i];
                    ins[t] = 1; loc[i] = t; x[t] = x[i];
                }
    }
    used[id] = true;
}

int main() {
    for (int i = 0; i < 3; ++i)
        scanf("%d%d%d", x + i, mr + i, tr + i);
    loc[0] = loc[1] = loc[2] = 3;
    dfs((1 << 9) - 1);
    printf("%d\n", ans);
    return 0;
}
