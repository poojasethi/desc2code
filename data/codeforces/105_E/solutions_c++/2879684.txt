#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <set>
#include <ctime>
#include <map>
#include <vector>
#include <bitset>
#include <queue>
using namespace std;
#define rep(x, n) for (int x = 1; x <= n; ++x)
#define zrp(x, n) for (int x = n; x; --x)
#define FOR(x, l, r) for (int x = l; x <= r; ++x)
#define foredge(i, x) for (int i = start[x]; i; i = e[i].l)
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define abs(a) ((a) > 0 ? (a) : (-(a)))
typedef pair<int, int> PII;
typedef long long int64;
const int Mod = 100000007;
int x[5], mv[5], tr[5], lift[5], by[5], ans;
bool bo[Mod];

int getHash(int64 s)
{
    rep(i, 3) s = (s * 23 + x[i]) % Mod;
    rep(i, 3) s = (s * 41 + lift[i]) % Mod;
    rep(i, 3) s = (s * 73 + by[i]) % Mod;
    return s;
}

void dfs(int s)
{
    ans = max(ans, x[1]);
    ans = max(ans, x[2]);
    ans = max(ans, x[3]);
    if (ans == 42) return;
    if (!s) return;
    int id = getHash(s);
    if (bo[id]) return;
    rep(i, 3)
    {
        int pp = (i - 1) * 3;
        if (lift[i] == 0 && !by[i] && ((1 << pp) & s))
            FOR(nx, max(1, x[i] - mv[i]), x[i] + mv[i])
            {
                if (x[1] == nx || x[2] == nx || x[3] == nx) continue;
                int tx = x[i]; x[i] = nx;
                dfs(s - (1 << pp));
                x[i] = tx;
            }
        
        if (!by[i] && ((2 << pp) & s)) rep(k, 3)
            if ((x[i] - x[k] == 1 || x[k] - x[i] == 1) && !by[k])
            {
                lift[i] = k; by[k] = 1;
                int tx = x[k]; x[k] = x[i];
                dfs(s - (2 << pp));
                x[k] = tx; lift[i] = 0; by[k] = 0;
            }
        
        if (!by[i] && lift[i] && ((4 << pp) & s))
            FOR(nx, max(1, x[i] - tr[i]), x[i] + tr[i])
            {
                if (x[1] == nx || x[2] == nx || x[3] == nx) continue;
                int tgr = lift[i]; x[tgr] = nx; lift[i] = 0; by[tgr] = 0;
                if (lift[tgr]) x[lift[tgr]] = nx;
                dfs(s - (4 << pp));
                if (lift[tgr]) x[lift[tgr]] = x[i];
                by[tgr] = 1; lift[i] = tgr; x[tgr] = x[i];
            }
    }
    bo[id] = true;
}

void init()
{
    rep(i, 3)
        scanf("%d%d%d", x + i, mv + i, tr + i);
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    init();
    dfs(511);
    printf("%d", ans);
    return 0;
}
