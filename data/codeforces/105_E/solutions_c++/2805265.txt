/*
Author: LJQ
PROG: Codeforces Beta #81 Div1 E. Lift and Throw
DATE: 2012.12.22
*/
#include <cstdio>

using namespace std;

const int maxx = 50;
const int maxs = (1 << 9) | 1;
//A: 0~2, B: 3~5, C: 6~8
//X: xx0: move?; 00x: not lift, lift 1, lift 2, thrown

bool vis[maxs][maxx][maxx][maxx];
int a[3], b[3], c[3];//position, move, throw
int ret;

inline int Fmax(int x, int y){
	return x > y ? x : y;
}

inline void checkmax(int &x, int a, int b, int c){
	if (a > x) x = a;
	if (b > x) x = b;
	if (c > x) x = c;
}

void init()
{
	ret = 0;
	for (int i = 0; i < 3; i ++){
		scanf("%d%d%d", &a[i], &b[i], &c[i]);
		ret = Fmax(ret, a[i]);
	}
}

int d[3][2];
int cat[3], move[3], lift[3], done[3];

void decode(int s){
	cat[0] = cat[1] = cat[2] = 0;
	for (int i = 0; i < 3; i ++){
		move[i] = s & 1; s >>= 1;
		if ((s & 3) == 3) done[i] = 1; 
			else {
				done[i] = 0;
				if ((s & 3) == 2) lift[i] = d[i][1], cat[d[i][1]] = 1;
				else if ((s & 3) == 1) lift[i] = d[i][0], cat[d[i][0]] = 1;
				else lift[i] = -1;
			}
		s >>= 2;
	}
}

int encode(){
	int s = 0;
	for (int i = 2; i >= 0; i --){
		s <<= 2;
		if (done[i]) s |= 3;
			else if (lift[i] == d[i][1]) s |= 2;
			else if (lift[i] == d[i][0]) s |= 1;
		s <<= 1;
		s |= move[i];
	}
	return s;
}

inline int Fabs(int x){
	return x < 0 ? -x : x;
}

void dfs(int s, int x0, int x1, int x2)
{
	if (vis[s][x0][x1][x2]) return;
	vis[s][x0][x1][x2] = true;
	checkmax(ret, x0, x1, x2);
	decode(s);
	int x[3]; x[0] = x0; x[1] = x1; x[2] = x2;
	for (int i = 0; i < 3; i ++){
		if (cat[i]) continue;
		//move
		if (!move[i] && lift[i] == -1){
			for (int j = -b[i]; j <= b[i]; j ++){
				int nx = x[i] + j;
				if (nx <= 0 || nx == x[0] || nx == x[1] || nx == x[2]) continue;
				move[i] = 1; x[i] += j;
				dfs(encode(), x[0], x[1], x[2]);
				decode(s); x[0] = x0; x[1] = x1; x[2] = x2;
			}
		}
		//grab
		if (lift[i] == -1 && !done[i]){
			for (int j = 0; j < 3; j ++)
				if (Fabs(x[j] - x[i]) == 1 && !cat[j]){
					lift[i] = j; int tmp = x[j]; x[j] = 0;
					dfs(encode(), x[0], x[1], x[2]);
					decode(s); x[0] = x0; x[1] = x1; x[2] = x2;
				}
		}
		//throw
		if (lift[i] != -1){
			int k = lift[i];
			for (int j = 1; j <= c[i]; j ++){
				int nx = x[i] + j;
				if (nx == x[0] || nx == x[1] || nx == x[2]) continue;
				lift[i] = -1; done[i] = 1; x[k] = nx; 
				dfs(encode(), x[0], x[1], x[2]);
				decode(s); x[0] = x0; x[1] = x1; x[2] = x2;
			}
		}
	}
}

void work()
{
	d[0][0] = 1, d[0][1] = 2;
	d[1][0] = 0, d[1][1] = 2;
	d[2][0] = 0, d[2][1] = 1;
	dfs(0, a[0], a[1], a[2]);
}

void print()
{
	printf("%d\n", ret);
}

int main()
{
	init();
	work();
	print();
	return 0;
}
