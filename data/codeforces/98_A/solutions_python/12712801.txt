from itertools import permutations as p

def equivalent(s):
    alts = []
    ind = [[0,1,2,3,4,5],
            [0,2,3,4,1,5],
            [0,3,4,1,2,5],
            [0,4,1,2,3,5],
            [3,0,2,5,4,1],
            [2,0,1,5,3,4],
            [1,0,4,5,2,3],
            [4,0,3,5,1,2],
            [4,1,0,3,5,2],
            [3,4,0,2,5,1],
            [2,3,0,1,5,4],
            [1,2,0,4,5,3],
            ##
            [5,3,2,1,4,0],
            [5,2,1,4,3,0],
            [5,1,4,3,2,0],
            [5,4,3,2,1,0],
            [5,1,4,3,2,0],
            [5,4,3,2,1,0],
            [5,3,2,1,4,0],
            [5,2,1,4,3,0],
            [1,5,2,0,4,3],
            [4,5,1,0,3,2],
            [3,5,4,0,2,1],
            [2,5,3,0,1,4],
            [2,1,5,3,0,4],
            [3,2,5,4,0,1],
            [4,3,5,1,0,2],
            [1,4,5,2,0,3]]
    for ind_poss in ind:
        alts.append("".join([s[i] for i in ind_poss]))
    return alts

s = raw_input()
a = set()

for q in p(s):
    z = equivalent(q)
    if not any(map(lambda x: x in a, z)):
        a.add(z[0])

print len(a)
#print a