#include <algorithm>
#include <iostream>

using namespace std;
const long long INF = 1e18 * 2;
const long long Maxn = 111;

long long n, m, p, ans = INF;
long long dp[1 << 20], pr[Maxn], cnt[Maxn], qu[Maxn], mon[Maxn], o[Maxn];

bool cmp(int i, int j){
	return mon[i] < mon[j];
}

int main(int argc, char **argv){
	cin >> n >> p >> m;
	for(int i = 1; i <= n; i++){
		o[i] = i;
		cin >> pr[i] >> mon[i] >> cnt[i];
		for(int j = 1; j <= cnt[i]; j++){
			int x;
			cin >> x;
			qu[i] |= (1 << --x);
		}
	}
	sort(o + 1, o + 1 + n, cmp);
	for(int mask = 1; mask < (1 << p); mask++){
		dp[mask] = INF;
    }
	for(int i = 1; i <= n; i++){
		for(int mask = 0; mask < (1 << p); mask++){
			dp[mask | qu[o[i]]]= min(dp[mask | qu[o[i]]], dp[mask] + pr[o[i]]);
		}
		ans = min(ans, dp[(1 << p) - 1] + mon[o[i]] * m);
	}
	cout << (ans == INF ? -1 : ans) << endl;
	return 0;
}

	   			  			 	 				  	 	  	 			