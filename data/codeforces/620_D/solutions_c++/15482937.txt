#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<iostream>
#include<set>
#define inf 1000000000000000000ll
#define maxn 2010

using namespace std;

set<long long> p;
long long a[maxn],b[maxn];
int n,m;
int s1[5],s2[5],id;
long long sum1,sum2,ans,q;

long long fabs(long long x)
{
	if (x<0) return -x;
	else return x;
}

int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;i++) {scanf("%I64d",&a[i]);sum1+=a[i];}
	scanf("%d",&m);
	for (int i=1;i<=m;i++) {scanf("%I64d",&b[i]);sum2+=b[i];}
	ans=fabs(sum1-sum2);id=0;
	for (int i=1;i<=n;i++)
	  for (int j=1;j<=m;j++)
	  {
	  	long long sum=fabs((sum1-a[i]+b[j])-(sum2-b[j]+a[i]));
	  	if (sum<ans) id=1,s1[1]=i,s2[1]=j,ans=sum;
	  }
	if (n>=2 && m>=2)
	{
		p.insert(-inf);p.insert(inf);
		for (int i=1;i<=m;i++)
	  	  for (int j=i+1;j<=m;j++)
	   		p.insert(2*(b[i]+b[j]));
		for (int i=1;i<=n;i++)
	  	  for (int j=i+1;j<=n;j++)
	  	  {
	  		long long sum=sum1-2*a[i]-2*a[j]-sum2;
	  		long long a=fabs(sum+*--p.lower_bound(-sum)),b=fabs(sum+*p.lower_bound(-sum));
	  		long long Sum=min(a,b);
	  		if (Sum<ans)
	  		{
	  		  id=2;
	  		  s1[1]=i;s1[2]=j;
	  		  if (a>b) q=*p.lower_bound(-sum); else q=*--p.lower_bound(-sum);
	  		  ans=Sum;
	  		}
	  	  }
	}
	if (id==0) printf("%I64d\n%d\n",ans,id);
	else
	  if (id==1)
	  {
	  	printf("%I64d\n%d\n",ans,id);
	  	printf("%d %d\n",s1[1],s2[1]);
	  }
	  else
	  {
	  	printf("%I64d\n%d\n",ans,id);
	  	bool w=1;
	  	for (int i=1;i<=m && w;i++) 
	  	  for (int j=i+1;j<=m && w;j++)
	  	    if ((b[i]+b[j])*2==q) s2[1]=i,s2[2]=j,w=0;
	  	printf("%d %d\n",s1[1],s2[1]);
	  	printf("%d %d\n",s1[2],s2[2]);
	  }
	return 0;
}
