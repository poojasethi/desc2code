#include<stdio.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
#include<cmath>
using namespace std;
typedef __int64 ll;
#define pii pair<ll,pair<int,int> > 
const int N = 2005;
int n,m,res[2][2];
ll a[N],b[N];

int main(void){
	int i,j;
	while(~scanf("%d",&n)){
		ll sa=0;
		for(i=1;i<=n;i++){
			scanf("%I64d",&a[i]);
			sa+=a[i];
		}
		scanf("%d",&m);
		ll sb=0;
		for(i=1;i<=m;i++){
			scanf("%I64d",&b[i]);
			sb+=b[i];
		}
		ll sum=sa-sb,ans=abs(sa-sb),ans2=0;
		if(!sum){
			puts("0\n0");
			continue;
		}
		for(i=1;i<=n;i++){
			for(j=1;j<=m;j++){
				ll temp=abs(sum-2*(a[i]-b[j]));
				if(temp<ans){
					ans=temp; ans2=1;
					res[0][0]=i; res[0][1]=j;
				}
			}
		}
		if(!ans){
			puts("0\n1");
			printf("%d %d\n",res[0][0],res[0][1]);
		}
		vector<pii> vec;
		for(i=1;i<m;i++){
			for(j=i+1;j<=m;j++){
				vec.push_back(pii((ll)(b[i]+b[j]),make_pair(i,j)));
			}
		}
		sort(vec.begin(),vec.end());
		for(i=1;i<n;i++){
			for(j=i+1;j<=n;j++){
				int low=0,up=vec.size()-1,mid;
				ll temp=sum-2*(a[i]+a[j]);
				//if(i==1 && j==4) printf("teemp %I64d\n",temp); 
				while(low<=up){
					mid=low+up>>1;
					ll k=vec[mid].first;
					int l=vec[mid].second.first,r=vec[mid].second.second;
					if(temp+2*k>0){
						up=mid-1;
						if(ans>abs(temp+2*k)){
							ans=abs(temp+2*k);
							ans2=2;
							res[0][0]=i; res[0][1]=l;
							res[1][0]=j; res[1][1]=r;
						}
					}
					else if(temp+2*k<0){
						low=mid+1;
						if(ans>abs(temp+2*k)){
							ans=abs(temp+2*k);
							ans2=2;
							res[0][0]=i; res[0][1]=l;
							res[1][0]=j; res[1][1]=r;
						}
					}
					else{
						ans=0; ans2=2;
						res[0][0]=i; res[0][1]=l;
						res[1][0]=j; res[1][1]=r;
					}
					if(!ans) break;
				}
				if(!ans) break;
			}
			if(!ans) break;
		}
		printf("%I64d\n%I64d\n",ans,ans2);
		for(i=0;i<ans2;i++)
			printf("%d %d\n",res[i][0],res[i][1]);
	}
	return 0;
} 
