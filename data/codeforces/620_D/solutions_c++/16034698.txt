#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <vector>

#define mp make_pair
#define pb push_back

using namespace std;

typedef long long ll;

const int inf = 0x3f3f3f3f;

int n, m;
int a[10001], b[10001];
ll sum1 = 0, sum2 = 0;
pair<int, int> x, y;
int n1 = 0, n2 = 0;
pair<ll, pair<int, int> > c[4000001], d[4000001];

int main( )
{
	scanf("%d", &n);
	for (int i = 1; i <= n; i ++)
		scanf("%d", &a[i]), sum1 += a[i];
	scanf("%d", &m);
	for (int i = 1; i <= m; i ++)
		scanf("%d", &b[i]), sum2 += b[i];

	x = mp(-1, -1), y = mp(-1, -1);
	sum1 -= sum2;
	ll ans = abs(sum1);
	for (int i = 1; i <= n; i ++)
		for (int j = 1; j <= m; j ++)
			if (abs(sum1 - a[i] + b[j] - a[i] + b[j]) < ans)
			{
				ans = abs(sum1 - 1LL * (a[i] - b[j]) * 2);
				x = mp(i, j);
			}
	for (int i = 1; i <= n; i ++)
		for (int j = i + 1; j <= n; j ++)
			c[++ n1] = mp(2LL * (a[i] + a[j]), mp(i, j));
	for (int i = 1; i <= m; i ++)
		for (int j = i + 1; j <= m; j ++)
			d[++ n2] = mp(2LL * (b[i] + b[j]), mp(i, j));
	sort(d + 1, d + 1 + n2);
	for (int i = 1; i <= n1; i ++)
	{
		int pos = (int )(lower_bound(d + 1, d + 1 + n2, mp(c[i].first - sum1, mp(-inf, -inf))) - d);
		if (pos != n2 + 1)
		{
			if (abs(sum1 - c[i].first + d[pos].first) < ans)
			{
				ans = abs(sum1 - c[i].first + d[pos].first);
				x = c[i].second;
				y = d[pos].second;
			}
		}
		if (pos > 1)
		{
			pos --;
			if (abs(sum1 - c[i].first + d[pos].first) < ans)
			{
				ans = abs(sum1 - c[i].first + d[pos].first);
				x = c[i].second;
				y = d[pos].second;
			}
		}
	}
	printf("%I64d\n", ans);
	if (x == mp(-1, -1)) printf("0\n");
	else if (y == mp(-1, -1)) printf("1\n%d %d\n", x.first, x.second);
	else printf("2\n%d %d\n%d %d\n", x.first, y.first, x.second, y.second);
	return 0;
}