#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <string>
#include <iostream>
#include <complex>
#include <queue>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<int,int> P;
int n,m;
ll a[2001],b[2001];
ll suma,sumb;
vector<ll> vec;

ll labs(ll x){
	if(x<0)return -x;
	return x;
}

int main(void){
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%lld",&a[i]);
		suma+=a[i];
	}
	scanf("%d",&m);
	for(int i=0;i<m;i++){
		scanf("%lld",&b[i]);
		sumb+=b[i];
	}
	ll res=labs(suma-sumb);
	ll st=suma-sumb;
	int rk=0;
	vector<P> rv;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			ll c=a[i]-b[j];
			if(labs(st-c*2LL)<res){
				res=labs(st-c*2LL);
				rk=1;
				rv.clear();
				rv.push_back(P(i,j));
			}
		}
	}
	for(int i=0;i<n;i++){
		for(int j=i+1;j<n;j++){
			vec.push_back((a[i]+a[j])*2LL);
		}
	}
	sort(vec.begin(),vec.end());
	ll aall=0;
	for(int i=0;i<m;i++){
		for(int j=i+1;j<m;j++){
			ll best=st+(b[i]+b[j])*2LL;
			int k=lower_bound(vec.begin(),vec.end(),best)-vec.begin();
			if(k<vec.size() && labs(best-vec[k])<res){
				res=labs(best-vec[k]);
				rk=2;
				aall=vec[k];
				rv.clear();
				rv.push_back(P(0,i));
				rv.push_back(P(0,j));
			}
			if(k-1>=0 && labs(best-vec[k-1])<res){
				res=labs(best-vec[k-1]);
				rk=2;
				aall=vec[k-1];
				rv.clear();
				rv.push_back(P(0,i));
				rv.push_back(P(0,j));
			}
		}
	}
	printf("%lld\n",res);
	printf("%d\n",rk);
	if(rk==2){
		for(int i=0;i<n;i++){
			for(int j=i+1;j<n;j++){
				if(aall==(a[i]+a[j])*2LL){
					rv[0].first=i;
					rv[1].first=j;
				}
			}
		}
	}
	for(int i=0;i<rk;i++){
		printf("%d %d\n",rv[i].first+1,rv[i].second+1);
	}
	return 0;
}