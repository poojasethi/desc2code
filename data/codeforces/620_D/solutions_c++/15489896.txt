#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <climits>
#include <cmath>
#include <stdio.h>
#include <cstring>
#include <fstream>

#define ll long long
#define pb push_back
#define FOR(i,x,n) for(ll i = x;i <n; i++)

using namespace std;

ll n[2001];
ll m[2001];

struct Node
{
	ll i;
	ll j;
	ll diff;
	Node(){};
	Node(ll i, ll j, ll diff):i(i),j(j), diff(diff){};
	bool operator<(const Node& rhs) const
	{
		return diff < rhs.diff;
	};
};
Node diff[2001*2001];

int main()
{
	int N,M;
	ll nsum=0,msum=0;
	cin>>N;
	FOR(i,0,N)
	{
		cin >> n[i];
		nsum+=n[i];
	}
	cin>>M;
	FOR(i,0,M)
	{
		cin >> m[i];
		msum+=m[i];
	}
	ll d = nsum-msum;
	if(d==0)
	{
		cout<<0<<endl<<0;
		return 0;
	}
	Node res(-1,-1,0);
	Node res2(-1,-1,0);
	FOR(i,0,N)
	{
		FOR(j,0,M)
		{
			Node nd(i,j,2*(n[i]-m[j]));
			if(abs(nd.diff-d) < abs(res.diff-d))
				res=nd;
			diff[i*M+j]=nd;
		}
	}
	sort(diff,diff+N*M);	
//	FOR(i,0,N*M)
//		cout<<diff[i].i<<" "<<diff[i].j<<" "<<diff[i].diff<<endl;
	int l=0; 
	int r=N*M-1;
//	cout<<"------"<<endl;
	while(l<r)
	{
		Node n1=diff[l];
		Node n2=diff[r];
		ll d1 =n1.diff+n2.diff-d;
//		cout<<l<<" "<<r<<" "<<d1<<" "<<res.diff+res2.diff-d<<endl;
		if(abs(d1)<abs(res.diff+res2.diff-d))
		{
			if(!(n1.i==n2.i || n1.j == n2.j || n1.j==n2.i || n1.i==n2.j)){
			res=n1;
			res2=n2;}
		}
		if(d1<0)
			l++;
		else if(d1>0)
			r--;
		else
			break;
	}
	cout<<abs(res.diff+res2.diff-d)<<endl;
	if(res2.i>=0)
		cout<<2<<endl;
	else if(res.i>=0)
		cout<<1<<endl;
	else
	{
		cout<<0;
		return 0;
	}
	cout<<res.i+1<<" "<<res.j+1<<endl;	
	if(res2.i>=0)
		cout<<res2.i+1<<" "<<res2.j+1<<endl;	
}
