#include <iostream>
#include <cstdio>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <algorithm>
#include <map>
#include <vector>

using namespace std;
const int N = 2005;
typedef long long lag;

int n, m;
int a[N], b[N];
lag asum, bsum;
map<long long, pair<int, int> > am;

int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%d", a + i);
		asum += a[i];
	}
	scanf("%d", &m);
	for (int i = 0; i < m; ++i) {
		scanf("%d", b + i);
		bsum += b[i];
	}
	long long zero = abs(asum - bsum);
	// swap one
	long long one = LLONG_MAX;
	int ou = -1, ov = -1;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			// try swapping i, j
			long long test = abs(asum + 2LL*b[j] - 2LL * a[i] - bsum);
			if (one > test) {
				one = test;
				ou = i + 1;
				ov = j + 1;
			}
		}
	}
	// swap two
	long long two = LLONG_MAX;
	int A, B, AA, BB;
	for (int i = 0; i < n; ++i)
		for (int j = i + 1; j < n; ++j) {
			am[2LL*a[i] + 2LL*a[j]] = make_pair(i, j);
		}
	for (int i = 0; i < m; ++i)
		for (int j = i + 1; j < m; ++j) {
			long long search = asum + 2L * b[i] + 2LL * b[j] - bsum;
			map<long long, pair<int, int> >::iterator it = am.lower_bound(search);
			// cout << "Searching: " << search << ' ' << b[i] + b[j] << endl;
			if (it != am.end() && abs(it->first - search) < two) {
				two = abs(it->first - search);
				A = it->second.first + 1;
				B = i + 1;
				AA = it->second.second + 1;
				BB = j + 1;
			}
			if (it != am.begin()) {
				--it;
				if (abs(it->first - search) < two) {
					two = abs(it->first - search);
					A = it->second.first + 1;
					B = i + 1;
					AA = it->second.second + 1;
					BB = j + 1;
				}
			}
		}
	// cout << two << endl;
	if (zero <= one && zero <= two) {
		printf("%I64d\n0\n", zero);
	} else if (one <= zero && one <= two) {
		printf("%I64d\n1\n%d %d\n", one, ou, ov);
	} else {
		printf("%I64d\n2\n%d %d\n%d %d\n", two, A, B, AA, BB);
	}
}