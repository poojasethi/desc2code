#define sd(n) scanf("%d",&n)
#define slld(n) scanf("%lld",&n)

#define pd(n) printf("%d",n)
#define plld(n) printf("%lld",n)
#define pdws(n) printf("%d ",(n))
#define pnl() printf("\n")

#define getmax(a,b) (((a)>(b))?(a):(b))

#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
using namespace std;
typedef pair<long long int , long long int> pli;
map<long long int , pli > swap2Get;
map<long long int , pli >::iterator it;
long long int  a[2016], b[2016];
vector <pli> best;
int main() {
	//freopen("CF.in","r",stdin);
	int N,M;
	long long int sa=0,sb=0,cvb,tc,tc2,v;
	pli p;
	scanf("%d",&N);
	for(int i=0;i<N;i++) 
	{
		scanf("%lld",&a[i]);
	    sa+=a[i];
	}
	scanf("%d",&M);
	for(int i=0;i<M;i++) 
	{
		scanf("%lld",&b[i]);
	    sb+=b[i];
	}
	//Min Target
	cvb = abs(sa-sb); 

	//Single Swap
	for(int i=0;i<N;i++)
		for(int j=0;j<M;j++) 
		{
			tc = abs( sa - sb + 2*( b[j] - a[i] ) );
			//cout<<i<<" "<<j<<endl<<tc<<endl;
			if(tc < cvb)
			{
				best.clear();
				cvb=tc;
				best.push_back( pli(i,j) );
			}
		}
	
	//Precompute achievable sums of A
	for(int i=0;i<N;i++) 
		for(int j=i+1;j<N;j++) 
			swap2Get[ 2*(a[i] + a[j]) ] = pli(i,j);

	//Two Swaps
	for(int i=0;i<M;i++) 
		for(int j=i+1;j<M;j++) {
			v=sa-sb+2*(b[i]+b[j]);
			it=swap2Get.lower_bound(v);
			if(it!=swap2Get.begin())
				it--;
			for(int k=0;k<=1;k++) {
				if(it==swap2Get.end())
					break;
				tc=abs(v-it->first);
				p=it->second;
				if(tc<cvb){
					best.clear();
					cvb=tc;
					best.push_back(pli(p.first,i));
					best.push_back(pli(p.second,j));
				}
				it++;
			}
		}
	//Output
	cout<<cvb<<"\n"<<best.size()<<"\n";
	for (int i = 0; i < best.size(); ++i)
		cout<<best[i].first + 1<<" "<<best[i].second + 1<<"\n";

}