#include <iostream>
#include <cstdio>
#include <cstring>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

#define mk make_pair
#define X first
#define Y second
typedef long long LL;
typedef pair<int,int> PII;
const LL INF = LL(1e18);
const int maxn = 2000+10;

LL a[maxn],b[maxn],sa,sb,ret;
map<LL,PII >da;
vector<pair<int,int> >vp;


int main() {
	ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
	#ifndef ONLINE_JUDGE
    freopen("in", "r", stdin);
	#endif
	int n,m;
	

	sa = sb = 0;
	ret = INF;
	vp.clear();
	cin >> n;
	for(int i = 0; i < n; i++) {
		cin >> a[i];
		sa += a[i];
	}
	cin >> m;
	for(int i = 0; i < m; i++) {
		cin >> b[i];
		sb += b[i]; 
	}
	if(abs(sa-sb) < ret) {
		ret = abs(sa-sb);
	}
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < m; j++) {
			if(abs(sa-sb-2*a[i]+2*b[j]) < ret) {
				ret = abs(sa-sb-2*a[i]+2*b[j]);
				vp.clear();
				vp.push_back(mk(i+1,j+1));
			}
		}
	}
	for(int i = 0; i < n; i++) {
		for(int j = i+1; j < n; j++) {
			da[2*(a[i]+a[j])] = mk(i+1,j+1);
		}
	}
	for(int i = 0; i < m; i++) {
		for(int j = i+1; j < m; j++) {
			LL ob = (b[i]+b[j])*2LL;
			map<LL,PII>::iterator it = da.upper_bound(sa-sb+ob);
			if(it != da.begin()) it--;
			for(int k = 0; k < 2; k++) {
				if(it==da.end()) break;
				PII tmp = it->Y;
				if(abs(sa-sb+ob-it->X) < ret) {
					ret = abs(sa-sb+ob-it->X);
					vp.clear();
					vp.push_back(mk(tmp.X,i+1));
					vp.push_back(mk(tmp.Y,j+1));
				}
				it++;
			}
		}
	}
	cout<<ret<<endl;
	cout<<vp.size()<<endl;
	for(int i = 0; i < vp.size(); i++) {
		cout<<vp[i].X<<" "<<vp[i].Y<<endl;
	}
	



}