#include <iostream>
#include <algorithm>
using namespace std;
const int m_size=2001;
struct tri
{
	long long v;
	int n1;
	int n2;
	bool operator < (const long long &b) const
	{
		return v < b;
	}
	bool operator < (const tri &b) const
	{
		return v < b.v;
	}
}ti[m_size*m_size];
long long a[m_size], b[m_size];
int n, m,at,bt,resA[2],resB[2],t,flag,ct,p;
long long v,temp,s,v1,v2,v3;
long long ABS(long long);
void check(long long x,int pos,int i,int j)
{
	if (ABS(x - ti[pos].v)< v3) 
	{
		resA[0] = ti[pos].n1;
		resA[1] = ti[pos].n2;
		resB[0] = i;
		resB[1] = j;
		v3 = ABS(x - ti[pos].v);
	}
}
int main()
{
	int i,j,k;
	cin >> n;
	for (i = 0; i < n; i++)
		cin >> a[i];
	cin >> m;
	for (i = 0; i < m; i++)
		cin >> b[i];
	for (i = 0, j = 0; i < n || j<m; i++,j++)
	{
		if(i<n)
			s += a[i];
		if (j < m)
			s -= b[j];
	}
	for (k=0,i = 0; i < n-1; i++)
		for (j = i + 1; j < n; j++,k++)
		{
			ti[k].v = a[i] + a[j];
			ti[k].v *= 2;
			ti[k].n1 = i;
			ti[k].n2 = j;
		}
	sort(ti,ti+k);
	p = k;
	v1  = ABS(s);

//swap once
	at = bt = -1;
	v2 = v1;
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++)
		{
			temp = ABS(s+ 2*b[j] - 2*a[i]);
			if (temp < v2)
			{
				v2 = temp;
				at = i;
				bt = j;
			}
		}
	resA[0] = at;
	resB[0] = bt;

//swap twice
	at = bt = -1;
v3=v2;
	for (i = 0; i < m-1&&p>1; i++)
		for (j = i + 1; j < m; j++)
		{
			long long sv = s + 2 * (b[i] + b[j]);
			int pos = lower_bound(ti, ti + p, sv) - ti;
			if (pos == p)
				pos--;
			check(sv, pos, i, j);
			if (pos > 0)
				check(sv, --pos, i, j);
		}
				

	if (v1 <= v2&&v1 <= v3)
	{
		v = v1;
		flag = 0;
	}
	else if (v2 < v1&&v2 <= v3)
	{
		v = v2;
		flag = 1;
	}
	else if (v3 < v1&&v3 < v2)
	{
		v = v3;
		flag = 2;
	}
	cout << v << endl << flag << endl;
	for (i = 0; i < flag;i++)
	cout << resA[i] + 1 << " " << resB[i] + 1 << endl;
	//while(1);
}

long long ABS(long long x)
{
	return x > 0 ? x : -x;
}
		  	 				 					       		 			