#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
#include <cstring>
#define maxk 505
using namespace std;

string s;
int n;
char ch[maxk];
int low[maxk],high[maxk],L,R,K;
vector<int> pos[256];
pair<int,int> event[1005];
int eventCount = 0;
int last[256];

int main() {
  cin >> s;
  n = s.size();
  scanf("%d %d %d\n", &K, &L, &R);
  for (int i = 0; i < K; i++) scanf("%c %d %d\n", &ch[i], &low[i], &high[i]);
  for (int i = 0; i < 256; i++) pos[i].push_back(-1);
  for (int i = 0; i < n; i++) pos[s[i]].push_back(i);

  long long ret = 0;
  for (int start = 0; start < n; start++) {
    eventCount = 0;
    int startCount = 0,endCount = 0;
    for (int i = 0; i < K; i++) {
      if (last[ch[i]] + low[i] >= pos[ch[i]].size()) continue;
      int Li = max(start,pos[ch[i]][last[ch[i]] + low[i]]);      
      int Ri = (last[ch[i]] + high[i] + 1 >= pos[ch[i]].size()) ? n : pos[ch[i]][last[ch[i]] + high[i] + 1];
      if (Li > start) event[eventCount++] = make_pair(Li,1); else startCount++;
      if (Ri < n) event[eventCount++] = make_pair(Ri,-1); else endCount++;
    }
    event[eventCount++] = make_pair(start,startCount);
    event[eventCount++] = make_pair(n,endCount);
    sort(event,event + eventCount);
    int delta = 0,LF = 0,prevMark = start;
    while (LF < eventCount) {
      if (L <= delta && delta <= R) ret += event[LF].first - prevMark;
      int RF = LF;
      while (RF < eventCount && event[LF].first == event[RF].first) {
        delta += event[RF].second;
	RF++;
      }
      prevMark = event[LF].first;
      LF = RF;
    }
    last[s[start]]++;
  }

  cout << ret << endl;
}
