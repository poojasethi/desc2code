#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include "vector"
using namespace std;
const int MAXN=100;
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define CL(a,b) memset((a),(b),sizeof(a))
#define N 1100
#define LL  __int64
#define mod 1000000007
#define EPS 1e-8
#define inf 1000000000
#define tpty long double
#define L(x) (x<<1)
#define R(x) ((x<<1)|1)
char s[100005];
struct node
{
    char c;
    int l,r;
}p[510];
int meet[100002];
vector<int>q[27];
int l,r;
__int64 tot;
void update(int ll,int rr,int v)
{
     int i;
     for (i=ll;i<=rr;i++)
     {
          if(meet[i]>=l&&meet[i]<=r)  tot--;
          meet[i]+=v;
          if(meet[i]>=l&&meet[i]<=r)  tot++;
     }
}
int main(){
//  freopen("E://in.txt","r",stdin);
    //freopen("E://out.txt","w",stdout);
    while(scanf("%s",s)!=EOF)
    {
          int k;
          scanf("%d%d%d",&k,&l,&r);
          int i;
          memset(meet,0,sizeof(meet));
          for (i=0;i<k;i++)
          {
               scanf(" %c%d%d",&p[i].c,&p[i].l,&p[i].r);
          }
          int j;
          for(i=0;i<26;i++) 
          {
              q[i].clear();
              q[i].push_back(-1);
          }
          __int64 ans=0;
          tot=0;
          for (i=0;s[i];i++)
          { 
              if(l==0) tot++;
              int id=s[i]-'a';
              q[id].push_back(i);
               for (j=0;j<k;j++)
               {
                    if(p[j].c==s[i])
                    {
                          int size=q[id].size();
                          if(size>p[j].l&&p[j].l)
                          {
                                update(q[id][size-1-p[j].l]+1,q[id][size-p[j].l],1);

                          }
                          if (size>p[j].r+1)
                          {
                              update(q[id][size-2-p[j].r]+1,q[id][size-p[j].r-1],-1);
                          }
                    } 
                   if(p[j].l==0) update(i,i,1);
               }
               ans+=tot;
          }
          printf("%I64d\n",ans);
    }
    return 0;
}