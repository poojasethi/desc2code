#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <iostream>
#include <cassert>
#include <list>
#include <cstring>
using namespace std;


#define INF 1e+9
#define mp make_pair
#define pii pair<int, int>
#define MAXN 200000

char s[MAXN];
int L, R, k, n;

char c[MAXN];
int dl[MAXN];
int x[MAXN];
int r[MAXN], sm[MAXN];
int csum[MAXN];

//pii lst[MAXN];
//int lsz;
int mtch = 0;

bool match(int x) {
    return x <= R && L <= x;
}

void move(int i, int dl) {
    int nv = csum[i] - dl;
    mtch += ((int)match(nv)) - ((int)match(csum[i]));
    csum[i] = nv;
}

void postmove(int l) {
    for (int i = 0; i < k * 2; i++)
        while (r[i] < l) {
            sm[i] += s[r[i]];
            move(r[i]++, dl[i]);
        }   
}

void gmove(int l) {
    for (int i = 0; i < k * 2; i++) {
        while (r[i] <= n && sm[i] < x[i]) {
            move(r[i], dl[i]);
            sm[i] += s[r[i]++] == c[i];
        }
        sm[i] -= s[l] == c[i];
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    memset(s, 0, sizeof s);
    gets(s); n = strlen(s);
    scanf("%d%d%d\n", &k, &L, &R);
    for (int i = 0; i < k; i++) {
        char cc; int li, ri;
        scanf("%c %d %d\n", &cc, &li, &ri);
        c[2 * i] = c[2 * i + 1] = cc;
        dl[2 * i] = 1;
        dl[2 * i + 1] = -1;
        x[2 * i] = li;
        x[2 * i + 1] = ri + 1;
    }
    if (L <= 0) mtch += n + 1;
    long long ans = 0;
    memset(r, 0, sizeof r);
    memset(sm, 0, sizeof sm);
    memset(csum, 0, sizeof csum);
    for (int l = 0; l < n; l++) {
        gmove(l);
        ans += mtch - match(csum[l]);
     //   cout << l << " " << mtch - match(csum[l]) << endl;
        postmove(l + 1);
        mtch -= match(csum[l]);
    }
    cout << ans;
}
