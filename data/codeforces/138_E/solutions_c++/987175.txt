#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
const int maxn = 100005, maxk = 505;
int n, K, L, R;
char map[maxn], w[maxk];
int l[maxk], r[maxk], atL[maxk], atR[maxk];
int cnt[maxn];   // cnt[j]维护着从递增的起点i开始str[i, j]满足多少个条件

int find(char *str, char key, int ind) {
	int cnt = 0, i, len = strlen(str);
	for (i = 0; i < len; i++)  {
		if (str[i] == key) cnt++;
		if (cnt >= ind) break;
	}
	//之前图省两行代码写错了，这样可以考虑到ind = 0等特殊情况
	return i;	
}

int main() {
//freopen("test.in", "r", stdin);
	cin >> map;
	n = strlen(map);
	cin >> K >> L >> R;
	for (int i = 0; i < K; i++) 
		cin >> w[i] >> l[i] >> r[i];
	for (int i = 0; i < K; i++) {
		atL[i] = find(map, w[i], l[i]);
		atR[i] = find(map, w[i], r[i] + 1);
		for (int j = atL[i]; j < atR[i]; j++)
			cnt[j]++;
	}
	int curNum = 0;
	for (int i = 0; i < n; i++) if (L <= cnt[i] && cnt[i] <= R) 
		curNum++;
	long long res = curNum;
	for (int i = 0; i < n - 1; i++) {
		for (int k = 0; k < K; k++) if (w[k] == map[i]) {
			int at = atL[k];
			while (at < n) {
				if (at >= i) {
					cnt[at]--;
					if (cnt[at] == L - 1) 
						curNum--;
					if (cnt[at] == R)
						curNum++;
				}
				at++;
				if (at == n || map[at] == w[k])
					break;
			}
			atL[k] = at;
			at = atR[k];
			while (at < n) {
				if (at >= i) {
					cnt[at]++;
					if (cnt[at] == R + 1)
						curNum--;
					if (cnt[at] == L)
						curNum++;
				}
				at++;
				if (at == n || map[at] == w[k])
					break;
			}
			atR[k] = at;
		}
		if (L <= cnt[i] && cnt[i] <= R)
			curNum--;
		res += curNum;
	}
	cout << res << endl;
//	printf("%I64d\n", res);
}
