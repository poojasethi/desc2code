#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;
const int N = 4e5 + 10;
int firste[N], nexte[N << 1], v[N << 1];
int raw[N], pl[N], pr[N];
bool flag[N << 2], used[N];
long long color[N << 2];
int n, m, cnt, e = 1;
void build_edge(int x, int y)
{
	nexte[++e] = firste[x];
	firste[x] = e;
	v[e] = y;
}
void update(int x, int L, int R, int tl, int tr, long long c);
void pushdown(int x, int tl, int tr)
{
	int mid = (tl + tr) >> 1;
	if(flag[x])
	{
		flag[x] = 0;
		update(x << 1, tl, mid, tl, mid, color[x]);
		update(x << 1 | 1, mid + 1, tr, mid + 1, tr, color[x]);
	}
}
void update(int x, int L, int R, int tl, int tr, long long c)
{
	if(L <= tl && tr <= R)
	{
		color[x] = c;
		flag[x] = 1;
		return;
	}
	int mid = (tl + tr) >> 1;
	pushdown(x, tl, tr);
	if(L <= mid)
		update(x << 1, L, R, tl, mid, c);
	if(R > mid)
		update(x << 1 | 1, L, R, mid + 1, tr, c);
	color[x] = color[x << 1] | color[x << 1 | 1];
}
void dfs(int u)
{
	pl[u] = ++cnt;
	used[u] = 1;
	for(int p = firste[u]; p; p = nexte[p])
		if(!used[v[p]])
			dfs(v[p]);
	pr[u] = cnt;
}
long long query(int x, int L, int R, int tl, int tr)
{
	if(L <= tl && tr <= R)
		return color[x];
	pushdown(x, tl, tr);
	long long re = 0;
	int mid = (tl + tr) >> 1;
	if(L <= mid)
		re |= query(x << 1, L, R, tl, mid);
	if(R > mid)
		re |= query(x << 1 | 1, L, R, mid + 1, tr);
	return re;
}
int getans(long long x)
{
	int re = 0;
	for(; x; x -= x & -x)
	{
		++re;
	}
	return re;
}
int main()
{
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; ++i)
	{
		scanf("%d", &raw[i]);
		--raw[i];
	}
	int x, y;
	for(int i = 1; i < n; ++i)
	{
		scanf("%d%d", &x, &y);
		build_edge(x, y);
		build_edge(y, x);
	}
	dfs(1);
	for(int i = 1; i <= n; ++i)
		update(1, pl[i], pl[i], 1, n, 1LL << raw[i]);
	int t;
	for(int i = 1; i <= m; ++i)
	{
		scanf("%d", &t);
		if(t == 1)
		{
			scanf("%d%d", &x, &y);
			--y;
			update(1, pl[x], pr[x], 1, n, 1LL << y);
		}
		else
		{
			scanf("%d", &x);
			printf("%d\n", getans(query(1, pl[x], pr[x], 1, n)));
		}
	}
	return 0;
}

	    	 				     	  	  		 		  	