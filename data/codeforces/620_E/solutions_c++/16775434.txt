#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
const int N=4e5+5;
vector<int>e[N];
int fir[N],la[N],a[N],ha[N];
bool vis[N];
int id;
void dfs(int u)
{
    fir[u]=id; ha[id]=u; vis[u]=1;
    for(int i=0;i<e[u].size();i++){
        if(!vis[e[u][i]]){
            ++id;dfs(e[u][i]);
        }
    }
    la[u]=id;
}
ll sum[N<<2];
int col[N<<2];
void pushup(int rt)
{
    sum[rt]=sum[rt<<1]|sum[rt<<1|1];
}
void pushdown(int rt)
{
    if(col[rt]){
        col[rt<<1]=col[rt<<1|1]=col[rt];
        sum[rt<<1]=sum[rt<<1|1]=1ll<<col[rt];
        col[rt]=0;
    }
}
void build(int l,int r,int rt)
{
    if(l==r){
        sum[rt]=1ll<<(a[ha[l]]);
        col[rt]=0;return;
    }
    int m=(l+r)>>1;
    build(lson);
    build(rson);
    pushup(rt);
}
void update(int a,int b,int c,int l,int r,int rt)
{
    if(a<=l&&r<=b){
        sum[rt]=1ll<<c;
        col[rt]=c;
        return;
    }
    int m=(l+r)>>1;
    pushdown(rt);
    if(a<=m)update(a,b,c,lson);
    if(b>m)update(a,b,c,rson);
    pushup(rt);
}
ll query(int a,int b,int l,int r,int rt)
{
    if(a<=l&&r<=b){
        return sum[rt];
    }
    int m=(l+r)>>1;
    pushdown(rt);
    ll ans=0;
    if(a<=m)ans|=query(a,b,lson);
    if(b>m)ans|=query(a,b,rson);
    return ans;
}
int main()
{
    int n,m,u,v;
    //freopen("f.txt","r",stdin);
    scanf("%d%d",&n,&m);
    memset(vis,0,sizeof(vis));
    for(int i=1;i<=n;i++)scanf("%d",&a[i]);
    for(int i=1;i<n;i++){
        scanf("%d%d",&u,&v);
        e[u].push_back(v);e[v].push_back(u);
    }
    id=1;
    dfs(1);
    build(1,n,1);
    while(m--){
        int op,col;
        scanf("%d",&op);
        if(op==1){
            scanf("%d%d",&u,&col);
            update(fir[u],la[u],col,1,n,1);
        }
        else{
            scanf("%d",&u);
            ll ans=query(fir[u],la[u],1,n,1);
            int tot=0;
            while(ans){
                if(ans&1)tot++;
                ans>>=1;
            }
            printf("%d\n",tot);
        }
    }
    return 0;
}