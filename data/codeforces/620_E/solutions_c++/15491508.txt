#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#define N 400010
using namespace std;
vector<int> G[N];
int L[N], R[N], ref[N*2], c[N], ind;
long long seg[N*6], set[N*6];
void dfs(int u,int f) {
	int i, v;
	L[u] = ind; ref[ind++] = u;
	for(i = 0; i < G[u].size(); i++) {
		v = G[u][i];
		if(v != f)
			dfs(v,u);
	}
	R[u] = ind; ref[ind++] = u;
}
void build(int L,int R,int k) {
	if(L == R) {
		seg[k] = (1LL << (1LL*c[ref[L]]));
		return ;
	}
	int M = (L+R)/2;
	build(L  ,M,k<<1  );
	build(M+1,R,k<<1|1);
	seg[k] = (seg[k<<1] | seg[k<<1|1]);
}
void push(int k) {
	if(set[k]!=-1) {
		set[k<<1|1] = set[k<<1] = set[k];
		seg[k<<1|1] = seg[k<<1] = (1LL << set[k]);
		set[k] = -1;
	}
}
void Set(int L,int R,int a,int b,long long c,int k) {
	if(a <= L && R <= b) {
		set[k] = c;
		seg[k] = (1LL << c);
	} else {
		int M = (L+R)/2;
		push(k);
		if(a <= M) Set(L  ,M,a,b,c,k<<1  );
		if(M <  b) Set(M+1,R,a,b,c,k<<1|1);
		seg[k] = (seg[k<<1] | seg[k<<1|1]);
	}
}
long long query(int L,int R,int a,int b,int k) {
	if(a <= L && R <= b)
		return seg[k];
	else {
		int M = (L+R)/2;
		push(k);
		long long ans = 0;
		if(a <= M) ans |= query(L  ,M,a,b,k<<1  );
		if(M <  b) ans |= query(M+1,R,a,b,k<<1|1);
		return ans;
	}
}
int main () {
	int n, q, i, u, v, type, col;
	scanf("%d%d", &n, &q);
	for(i = 1; i <= n; i++)
		scanf("%d", &c[i]);
	for(i = 1; i < n; i++) {
		scanf("%d%d", &u, &v);
		G[u].push_back(v);
		G[v].push_back(u);
	}
	ind = 1;
	memset(set, -1, sizeof(set));
	dfs(1,-1);
	build(1, --ind, 1);
	//for(i = 1; i <= n; i++)
	//		printf("%d %d\n",L[i],R[i]);
	while(q--) {
		scanf("%d", &type);
		if(type == 1) {
			scanf("%d%d", &v, &col);
			Set(1, ind, L[v], R[v], 1LL*col, 1);
		} else {
			scanf("%d", &v);
			long long color = query(1, ind, L[v], R[v], 1), cnt = 0;
			//printf("%lld\n",color);
			while(color) {
				cnt += (color & 1LL);
				color >>= 1;
				//printf("%lld\n",color);
			}
			printf("%I64d\n", cnt);
		}
	}
}