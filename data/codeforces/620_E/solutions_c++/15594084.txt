#include <iostream>
#include <vector>
#include <cstdio>

using namespace std;

const int N = 400010;

long long int t[4*N], add[4*N];
int tt, tin[N], tout[N], vs[N];
int n, m, c[N];
vector<int> tree[N];

void dfs(int v, int p) {
	vs[tt] = v;
	tin[v] = tt++;
	for(int i = 0; i < tree[v].size(); ++i) {
		int u = tree[v][i];
		if(u != p)	dfs(u, v);
	}
	tout[v] = tt;
}

void build(int v, int l, int r) {
	add[v] = -1;
	if(l+1 == r)	t[v] = 1ll<<c[vs[l]];
	else {
		int mid = l + (r - l)/2ll;
		build(2*v+1, l, mid);
		build(2*v+2, mid, r);
		t[v] = t[2*v+1] | t[2*v+2];
	}
}

void push(int v) {
	if(add[v] == -1)	return;
	for(int i = 1; i < 3; ++i) {
		t[2*v+i] = add[2*v+i] = add[v];
	}
	add[v] = -1;
}

void paint(int v, int l, int r, int lf, int rg, int c) {
	if(lf >= rg)	return;
	if(l == lf && r == rg) {
		t[v] = 1ll<<c;
		add[v] = 1ll<<c;
	}
	else {
		push(v);
		int mid = l + (r-l)/2ll;
		paint(2*v+1, l, mid, lf, min(rg, mid), c);
		paint(2*v+2, mid, r, max(lf, mid), rg, c);
		t[v] = t[2*v+1] | t[2*v+2];
	}
}

long long int get(int v, int l, int r, int lf, int rg) {
	if(lf >= rg)	return 0;
	if(l == lf && r == rg)	return t[v];
	push(v);
	int mid = l + (r-l)/2;
	long long int ans = 0;
	ans |= get(2*v+1, l, mid, lf, min(mid, rg));
	ans |= get(2*v+2, mid, r, max(lf, mid), rg);
	return ans;
}

int main(void) {

	scanf("%d %d", &n, &m);
	for(int i = 0; i < n; ++i)
		scanf("%d", &c[i]);
	for(int i = 0; i < n-1; ++i) {
		int a, b;
		scanf("%d %d", &a, &b);
		--a, --b;
		tree[a].push_back(b);
		tree[b].push_back(a);
	}

	tt = 0;
	dfs(0, -1);
	build(0, 0, n);

	for(int i = 0; i < m; ++i) {
		int q;
		scanf("%d", &q);
		if(q == 1) {
			int v, c;
			scanf("%d %d", &v, &c);
			--v;
			paint(0, 0, n, tin[v], tout[v], c);
		}
		else {
			int v;
			scanf("%d", &v);
			--v;
			long long int mask = get(0, 0, n, tin[v], tout[v]);
			int ans = 0;
			for(int j = 0; j < 61; ++j) {
				ans += (int)((mask>>j) & 1);
			}
			printf("%d\n", ans);
		}
	}

	return 0;
}