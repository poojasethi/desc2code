#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <iostream>
using namespace std;
int n,m;
struct p
{
	long long color;
}tree[1600000];
int st[410000],ed[410000],tot,lazy[1600000];
int head[410000],nextt[810000],ver[810000],ff[410000];
void add(int x,int y){tot++;nextt[tot]=head[x];head[x]=tot;ver[tot]=y;}
void dfs(int x,int pre)
{
	st[x]=++tot;
	for (int i = head[x];i;i=nextt[i])
		if (ver[i] != pre)
			dfs(ver[i],x);
	ed[x]=tot;
}
void f(int x,int l,int r)
{
	int t = lazy[x];lazy[x]=0;
	if (l == r) return ;
	lazy[x*2] = t;
	lazy[x*2+1] = t;
	tree[x*2].color = (1ll<<(t-1));
	tree[x*2+1].color = (1ll<<(t-1));
}
void add(int x,int l,int r,int ll,int rr,int c)
{
	if (lazy[x]) f(x,l,r);
	if (l > rr || r < ll) return ;
	if (ll <= l && r <= rr)
	{
		tree[x].color = (1ll<<(c-1));
		lazy[x] = c;
		f(x,l,r);
		return ;
	}
	int mid = (l + r)/2;
	add(x*2,l,mid,ll,rr,c);
	add(x*2+1,mid+1,r,ll,rr,c);
	tree[x].color = tree[x*2].color|tree[x*2+1].color;
}
long long ans;
void find(int x,int l,int r,int ll,int rr)
{
	if (lazy[x]) f(x,l,r);
	if (l > rr || r < ll) return ;
	if (ll <= l && r <= rr)
	{
		ans|=tree[x].color;
		return ;
	}
	int mid = (l + r)/2;
	find(x*2,l,mid,ll,rr);
	find(x*2+1,mid+1,r,ll,rr);
	tree[x].color = tree[x*2].color|tree[x*2+1].color;
}

int main()
{
	cin >> n >> m;
	for (int i = 1;i <= n;i++) scanf("%d",&ff[i]);
	for (int i = 1;i < n;i++) {int x,y;scanf("%d%d",&x,&y);add(x,y);add(y,x);}
	tot = 0;
	dfs(1,0);

	for (int i = 1;i <= n;i++) add(1,1,n,st[i],st[i],ff[i]);
	for (int i = 1;i <= m;i++)
	{
		int x,y,z;
		scanf("%d",&x);
		if (x == 1) {scanf("%d%d",&y,&z);add(1,1,n,st[y],ed[y],z);}
		if (x == 2) 
		{
			scanf("%d",&y);ans = 0;
			find(1,1,n,st[y],ed[y]);
			int temp = 0;
			for (int j = 1;j <= 60;j++)
				if (ans&(1ll<<(j-1))) temp++;
			printf("%d\n",temp);
		}
	}
}
	  		 	 	    	 	 	 			   		 			