#include <stdio.h>
#include <vector>

using namespace std;

const int N = 500000;

long long g[N*5], t[N*5], c[N], col;

vector<int> gr[N];
int a, b, i, n, m, v, ty, l[N], r[N], cnt;


void push(int v, int l, int r)
{
	if(g[v] == 0)
		return;
	t[v] = g[v];
	if(l != r)
	{
		g[v << 1] = g[v];
		g[(v << 1) ^ 1] = g[v];
	}
	g[v] = 0;	
}

void modify(int ll, int rr, int l, int r, int v, long long x)
{
	push(v, l, r);
	if(r < ll || rr < l)
		return;
	if(ll <= l && r <= rr)
	{
		g[v] = 1LL << x;
		push(v, l, r);
//		printf("modify(%d, %d, %d, %d, %d, %I64d), t[v] == %I64d\n", ll, rr, l, r, v, x, t[v]);
		return;
	}
	
	int c = (l + r) >> 1;
	modify(ll, rr, l, c, v << 1, x);
	modify(ll, rr, c + 1, r, (v << 1) ^ 1, x);
	t[v] = t[v << 1] | t[(v << 1) ^ 1];
//	printf("modify(%d, %d, %d, %d, %d, %I64d), t[v] == %I64d\n", ll, rr, l, r, v, x, t[v]);
}

long long get(int ll, int rr, int l, int r, int v)
{
	push(v, l, r);
	if(r < ll || rr < l)
		return 0;
	if(ll <= l && r <= rr)
		return t[v];
	int c = (l + r) >> 1;
	return get(ll, rr, l, c, v << 1) | get(ll, rr, c + 1, r, (v << 1) ^ 1);
}

void dfs(int v, int pr = 0)
{
	l[v] = ++cnt;	
	for(int i = 0; i < gr[v].size(); i++)
		if(gr[v][i] != pr)
			dfs(gr[v][i], v);
	r[v] = ++cnt;
}

int main()
{
	scanf("%d%d", &n, &m);
	for(i = 0; i < n; i++)
	{
		scanf("%I64d", &c[i + 1]);
	}

	for(i = 0; i < n - 1; i++)
	{
		scanf("%d%d", &a, &b);
		gr[a].push_back(b);
		gr[b].push_back(a);
	}
	cnt = 0;
	dfs(1);
	for(i = 1; i <= n; i++)
	{
		modify(l[i], l[i], 1, cnt, 1, (long long)c[i]);
		modify(r[i], r[i], 1, cnt, 1, (long long)c[i]);
//		printf("t[1] == %I64d\n", t[1]);
	}
/*	for(i = 1; i <= n; i++)
		printf("col == %I64d\n", get(l[i], l[i], 1, cnt, 1)/*c[i]);
*/
	for(i = 0; i < m; i++)
	{
		scanf("%d", &ty);
		if(ty == 1)
		{
			scanf("%d%I64d", &v, &col);
			modify(l[v], r[v], 1, cnt, 1, col);
		}
		else
		{
			scanf("%d", &v);                   
			printf("%d\n", __builtin_popcountll(get(l[v], r[v], 1, cnt, 1)));
		}
	}
	return 0;
}

