#include <bits/stdc++.h>
using namespace std;

#define forall(i,a,b) for(int i=a;i<b;++i)
#define ll long long
#define pb push_back
#define N 400010

int n,m,st[N],en[N],pos[N],tim=1,t1,t2,t3,col[N];
bool lazy[4*N];
ll tree[4*N];
vector<int> g[N];

void dfs(int ind,int co){
	st[ind]=tim;
	pos[tim++]=ind;
	forall(i,0,g[ind].size()) {
		int v=g[ind][i];
		if(v==co) continue;
		dfs(g[ind][i],ind);
	}
	en[ind]=tim-1;
}

void build(int i,int l,int r){
	if(l==r) tree[i]=1LL<<col[pos[l]];
	else{
		int mid=(l+r)/2;
		build(2*i,l,mid);
		build(2*i+1,mid+1,r);
		tree[i]=tree[2*i]|tree[2*i+1];
	}
}

void push(int x){
	if(lazy[x]){
		lazy[x]=false;
		lazy[2*x]=lazy[2*x+1]=true;
		tree[2*x]=tree[2*x+1]=tree[x];
	}
}

void modify(int i,int l,int r,int ql,int qr,ll dif){
	if(l>qr || r<ql) return;
	else if(l>=ql && r<=qr){
		tree[i]=dif;
		lazy[i]=true;
		return;
	}
	else{
		push(i);
		int mid=(l+r)/2;
		modify(2*i,l,mid,ql,qr,dif);
		modify(2*i+1,mid+1,r,ql,qr,dif);
		tree[i]=tree[2*i]|tree[2*i+1];
	}
}

ll query(int i,int l,int r,int ql,int qr){
	if(l>qr || r<ql) return 0;
	else if(l>=ql && r<=qr) return tree[i];
	else{
		push(i);
		int mid=(l+r)/2;
		ll ans;
		ans=query(2*i,l,mid,ql,qr);
		ans=ans|query(2*i+1,mid+1,r,ql,qr);
		return ans;
	}
}

int main(){
	scanf("%d%d",&n,&m);
	forall(i,1,n+1) scanf("%d",&col[i]);
	forall(i,1,n){
		scanf("%d%d",&t1,&t2);
		g[t2].pb(t1);
		g[t1].pb(t2);
	}
	dfs(1,-1);
	//forall(i,0,n) cout << st[i+1] << ' ' << en[i+1] << endl;
	//forall(i,0,n) cout << pos[i+1] << endl;
	//return 0;
	build(1,1,n);
	// cout << __builtin_popcountll(tree[13]|tree[7]) << endl;
	forall(i,0,m){
		scanf("%d",&t1);
		if(t1==1) {
			scanf("%d%d",&t2,&t3);
			modify(1,1,n,st[t2],en[t2],1LL<<t3);
		}
		else {
			scanf("%d",&t2);
			printf("%d\n", __builtin_popcountll(query(1,1,n,st[t2],en[t2])));
		}
	}
}