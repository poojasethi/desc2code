#include<bits/stdc++.h>

using namespace std;

#define tm (tl + tr >> 1)
#define N 400005
#define ll long long

vector < int > V[N];

int D[N],F[N],Node[N],n,w,h,u,v,x,i,l,r,asd,T;
ll s[4*N],lz[4*N],A[N];

int H[64];

void push(int v){
	if(lz[v]){
		lz[v*2] = lz[v*2+1] = s[v*2] = s[v*2+1] = lz[v];
		lz[v] = 0;
	}
}
ll bld(int v, int tl, int tr){
	if(tl == tr)
	{ return s[v] = (1LL << A[ Node[tl] ]); }
	return s[v] = bld(v*2, tl, tm) | bld(v*2+1, tm+1, tr);
}

ll qry(int v, int tl, int tr){
	if(tl > r || tr < l)
		return 0;

	if(tl >= l && tr <= r)
		return s[v];
	push(v);
	return qry(v*2, tl, tm)|qry(v*2+1, tm+1, tr);
}

ll up(int v, int tl, int tr){
	if(tl > r || tr < l)
		return s[v];

	if(tl >= l && tr <= r)
		return lz[v] = s[v] = (1LL << x);
	push(v);
	return s[v] = up(v*2, tl, tm) | up(v*2+1, tm+1, tr);
}


void f(int x){

	D[x] = ++T;
	Node[T] = x;

	for(int i=0; i<V[x].size(); i++)
		if(!D[ V[x][i] ])
			 f( V[x][i] );

	F[x] = T;
}

int main(){

	scanf("%d%d",&n,&w);

	for(i=1;i<=n;i++)
		scanf("%lld",&A[i]);

	for(i=n;--i;){
		scanf("%d%d",&u,&v);
		V[u].push_back(v);
		V[v].push_back(u);
	}

	f(1);  bld(1,1,n);

	while(w--){

		scanf("%d%d",&h,&v);

		l = D[v];
		r = F[v];

		if(h == 1){
			scanf("%d",&x);
			up(1,1,n);
		}

		else
			printf("%d\n",__builtin_popcountll(qry(1,1,n)));
	
	}

	return 0;
}
