#include <bits/stdc++.h>

using namespace std;

const int N = 400005;

int n, m;

vector <int> g[N];

int first[N], last[N];
int ttt = 1;

void dfs(int u, int p) {
	first[u] = ttt++;
	for (int i = 0; i < g[u].size(); i++) {
		int v = g[u][i];
		if (v == p) continue;
		dfs(v, u);
	}
	last[u] = ttt - 1;
}

long long t[4 * N];
int lazy[4 * N];

inline void push(int x, int l, int r) {
	if (lazy[x]) {
		t[x] = (1LL << ((long long)lazy[x] - 1LL));
		if (l != r) {
			lazy[2 * x] = lazy[x];
			lazy[2 * x + 1] =lazy[x];
		}
	}
	lazy[x] = 0;
}

void update(int x, int l, int r, int ul, int ur, int v) {
	push(x, l, r);
	if (l > ur || r < ul) return;
	if (l >= ul && r <= ur) {
		lazy[x] = v;
		push(x, l, r);
		return;
	}
	int mid = (l + r) >> 1;
	update(2 * x, l, mid, ul, ur, v);
	update(2 * x + 1, mid + 1, r, ul, ur, v);
	t[x] = t[2 * x] | t[2 * x + 1];
}

long long query(int x, int l, int r, int ql, int qr) {
	push(x, l, r);
	if (l > qr || r < ql) return 0;
	if (l >= ql && r <= qr) return t[x];
	int mid = (l + r) >> 1;
	long long q1 = query(2 * x, l, mid, ql, qr);
	long long q2 = query(2 * x + 1, mid + 1, r, ql, qr);
	return q1 | q2;
}

int c[N];

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		cin >> c[i];
	}
	for (int i = 1; i < n; i++) {
		int x, y;
		cin >> x >> y;
		g[x].push_back(y);
		g[y].push_back(x);
	}
	dfs(1, 1);

	for (int i = 1; i <= n; i++) {
		update(1, 1, n, first[i], first[i], c[i]);
	}
	while (m--) {
		int t;
		cin >> t;
		if (t == 1) {
			int x, y;
			cin >> x >> y;
			update(1, 1, n, first[x], last[x], y);
		} else {
			int x;
			cin >> x;
			long long mask = query(1, 1, n, first[x], last[x]);
			int ans = 0;
			for (int i = 0; i < 60; i++) {
				if (mask & (1LL << i)) ans++;
			}
			cout << ans << "\n";
		}
	}
}
