#include <cstdio>
#include <algorithm>
#include <iostream>
#include <cstring>

using namespace std;

#define Rep(i,x,y) for (i=x;i<=y;++i)

const int N = 401000;
int n,m,i,To[N<<1],Next[N<<1],C[N],c,x,Last[N<<1],Tot,L[N],R[N],y,Node;
long long Add[N<<2],t,Ans[N<<2];

void Pushdown(int x) {
	if (Add[x]>0) {
		Add[x<<1]=Add[x];   Ans[x<<1]=Add[x];
		Add[x<<1|1]=Add[x];   Ans[x<<1|1]=Add[x];
		Add[x]=0;
	}
}

void AddEdge(int x,int y) {  
	To[++Tot]=y; Next[Tot]=Last[x];   Last[x]=Tot;  
}

void Pushup(int x) {
	Ans[x]=Ans[x<<1]|Ans[x<<1|1];
}

void Dfs(int x,int y) {
	int i;
	L[x]=++Node;
	for (i=Last[x];i;i=Next[i]) if (To[i]!=y) Dfs(To[i],x);  
	R[x]=Node;
}

long long Query(int x,int L,int R,int l,int r) {  
	if (L<=l&&r<=R) return Ans[x];
	int Mid=(l+r)>>1;  long long T=0;
	Pushdown(x);
	if (L<=Mid) T|=Query(x<<1,L,R,l,Mid);
	if (Mid+1<=R) T|=Query(x<<1|1,L,R,Mid+1,r);
	Pushup(x);
	return T;
}  

int Count(long long x) {  
	int T=0;
	while (x) {
		if (x&1) ++T;
		x>>=1;
	}
	return T;
}

void Insert(int x,int y,int L,int R,int l,int r) {
	if (L<=l&&r<=R) { Add[x]=(1LL<<(y-1)); Ans[x]=(1LL<<(y-1));  return;  }   
	int Mid=(l+r)>>1;
	Pushdown(x);
	if (L<=Mid) Insert(x<<1,y,L,R,l,Mid);
	if (Mid+1<=R) Insert(x<<1|1,y,L,R,Mid+1,r);
	Pushup(x);
}
int main () {
	scanf("%d%d",&n,&m);
	Rep(i,1,n) scanf("%d",&C[i]);
	Rep(i,1,n-1) scanf("%d%d",&x,&y),AddEdge(x,y),AddEdge(y,x);   
	Dfs(1,0);   
	Rep(i,1,n) Insert(1,C[i],L[i],L[i],1,n);  
	Rep(i,1,m) {
		scanf("%d",&c);  
		if (c==1) { scanf("%d%d",&x,&y); Insert(1,y,L[x],R[x],1,n); }   
		if (c==2) { scanf("%d",&x); t=Query(1,L[x],R[x],1,n);  printf("%d\n",Count(t));   }
	}   
	return 0;
}
	 			   		 	 	  							  			