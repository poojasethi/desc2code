#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#define P (p << 1)
#define M ((L + R) >> 1)

using namespace std;
const int N = 400005;
typedef unsigned long long ull;

int n, m, c[N], L[N], R[N];
int cb[1 << 16];
int count_bits(ull x) {
	unsigned mask = (1U << 16) - 1;
	return cb[x & mask] + cb[(x >> 16) & mask] + cb[(x >> 32) & mask] + cb[(x >> 48) & mask];
}
vector<int> adj[N];
ull st[N << 2];
ull flag[N << 2];

inline void push(int p, int L, int R) {
	if (flag[p] != 0) {
		st[p] = flag[p];
		if (L != R) {
			flag[P] = flag[P + 1] = flag[p];
		}
		flag[p] = 0;
	}
}

inline void pull(int p) {
	st[p] = st[P] | st[P+1];
}

void update(int a, int b, ull mask, int p=1, int L=1, int R=n) {
	push(p, L, R);
	if (b < L || R < a) return;
	if (a <= L && R <= b) {
		flag[p] = mask;
		push(p, L, R);
		return;
	}
	update(a, b, mask, P, L, M);
	update(a, b, mask, P+1, M+1, R);
	pull(p);
}

ull query(int a, int b, int p=1, int L=1, int R=n) {
	push(p, L, R);
	if (b < L || R < a) return 0;
	if (a <= L && R <= b) return st[p];
	ull qa = query(a, b, P, L, M);
	ull qb = query(a, b, P+1, M+1, R);
	pull(p); return qa | qb;
}

void dfs(int u, int p = -1) {
	static int ID = 1;
	L[u] = ID++;
	for (int i = 0; i < adj[u].size(); ++i) {
		int v = adj[u][i];
		if (v != p) {
			dfs(v, u);
		}
	}
	R[u] = ID - 1;
}

int main() {
	for (int i = 1; i < (1 << 16); ++i)
		cb[i] = cb[i >> 1] + (i & 1);
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i)
		scanf("%d", c + i);
	for (int i = 1; i < n; ++i) {
		int u, v; scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(1);
	for (int i = 1; i <= n; ++i)
		update(L[i], L[i], (1ull << c[i]));
	while (m--) {
		int t, v;
		scanf("%d%d", &t, &v);
		if (t == 1) {
			int ck; scanf("%d", &ck);
			update(L[v], R[v], (1ull << ck));
		} else {
			printf("%d\n", count_bits(query(L[v], R[v])));
		}
	}
}