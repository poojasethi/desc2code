#include<bits/stdc++.h>
using namespace std;
vector<int> v[400010]; 
int n,m,x,y,c[400010],T=0,h[400010],t[400010];
long long a[1200010],b[1200010]; 

int dfs(int k,int l){
    T++;
	h[k]=T;
	for (int i=0; i<v[k].size(); i++) if (v[k][i]!=l) dfs(v[k][i],k);
	t[k]=T;
}

int build(int k,int l,int r){
	if (l==r) return 0;
    int mid=(l+r)/2; 
    build(k*2,l,mid);
    build(k*2+1,mid+1,r);
}

int pushdown(int k,int l,int r){
	b[k*2]=b[k];
	b[k*2+1]=b[k];
	a[k*2]=b[k];
	a[k*2+1]=b[k];
	b[k]=0;
}

int update(int k,int l,int r,int L,int R,int co){
	if (l>=L && r<=R){
		a[k]=(long long)(1)<<(co-1);
		b[k]=a[k];
		return 0;
	}
	if (b[k]) pushdown(k,l,r);
    int mid=(l+r)/2;
	if (mid>=L) update(k*2,l,mid,L,R,co);
	if (mid+1<=R) update(k*2+1,mid+1,r,L,R,co);
	a[k]=a[k*2]|a[k*2+1]; 
}

long long query(int k,int l,int r,int L,int R){
    if (l>=L && r<=R) return a[k];
    if (b[k]!=0) pushdown(k,l,r);
    int mid=(l+r)/2;
    return ((mid>=L?query(k*2,l,mid,L,R):(long long)(0))|(mid+1<=R?query(k*2+1,mid+1,r,L,R):(long long)(0)));
}

int main(){
	scanf("%d%d",&n,&m);
	for (int i=1; i<=n; i++) scanf("%d",&c[i]);
	for (int i=1; i<=n-1; i++){
		scanf("%d%d",&x,&y);
		v[x].push_back(y);
		v[y].push_back(x);
	}
	dfs(1,0);
	build(1,1,n);
	for (int i=1; i<=n; i++) update(1,1,n,h[i],h[i],c[i]);
	for (int i=1; i<=m; i++){
	    scanf("%d",&x);
		if (x==1){
		    scanf("%d%d",&x,&y);
			update(1,1,n,h[x],t[x],y);
		}
		else {
			scanf("%d",&x);
			long long ans=query(1,1,n,h[x],t[x]);
			int count=0;
			while (ans){
				count++;
				ans=ans-(ans&(-ans));
			}
			printf("%d\n",count);
		}
	}
}