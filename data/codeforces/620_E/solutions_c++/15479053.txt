//In the name of God

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstring>
using namespace std;
#define mp make_pair
#define lol long long
#define left(x) ((x)*2)
#define right(x) (((x)*2)+1)
const int MAXN=4e5+10;
int now=0;
lol seg[MAXN*4],flag[MAXN*4];
int st[MAXN],en[MAXN],c[MAXN];
vector <int> g[MAXN];

void dfs(int v,int p=0)
{
  st[v]=now++;
  for(int i=0;i<g[v].size();i++)
    {
      int u=g[v][i];
      if(u!=p)
	dfs(u,v);
    }
  en[v]=now;
}

inline void relax(int s,int e,int ind)
{
  if(flag[ind]==0)
    return;
  lol f=flag[ind];
  flag[ind]=0;
  flag[left(ind)]=flag[right(ind)]=f;
  seg[left(ind)]=seg[right(ind)]=(1ll<<f);
}

void update(int s,int e,int ind)
{
  seg[ind]=seg[left(ind)]|seg[right(ind)];
}

void add(int s,int e,int ind,int x,int y,lol c)
{
  if(s>=y or e<=x)
    return;
  if(s>=x and e<=y)
    {
      flag[ind]=c;
      seg[ind]=(1ll<<c);
      return;
    }
  int mid=(s+e)/2;
  relax(s,e,ind);
  add(s,mid,left(ind),x,y,c);
  add(mid,e,right(ind),x,y,c);
  update(s,e,ind);
}

lol fin(int s,int e,int ind,int x,int y)
{
  if(s>=y or e<=x)
    return 0;
  if(s>=x and e<=y)
    return seg[ind];
  relax(s,e,ind);
  int mid=(s+e)/2;
  return fin(s,mid,left(ind),x,y)|fin(mid,e,right(ind),x,y);
}

int count(lol x)
{
  int res=0;
  while(x)
    {
      if(x%2)
	res++;
      x/=2;
    }
  return res;
}

main()
{
  ios::sync_with_stdio(false);
  int n,m;
  cin>>n>>m;
  for(int i=0;i<n;i++)
    cin>>c[i];
  for(int i=1;i<n;i++)
    {
      int v,u;
      cin>>v>>u;
      v--;u--;
      g[v].push_back(u);
      g[u].push_back(v);
    }
  dfs(0);
  for(int i=0;i<n;i++)
    add(0,n,1,st[i],st[i]+1,c[i]);
  for(int i=0;i<m;i++)
    {
      int t;
      cin>>t;
      if(t==1)
	{
	  int v,col;
	  cin>>v>>col;
	  v--;
	  add(0,n,1,st[v],en[v],col);
	}
      else
	{
	  int v;
	  cin>>v;
	  v--;
	  cout<<count(fin(0,n,1,st[v],en[v]))<<'\n';
	}
    }
  return 0;
}
