#include<math.h>
#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
const double eps=1e-8;
const double pi=acos(-1.0);
int sign(double x){
    return (x>eps)-(x<-eps);
}
struct Point{
    double x,y;
    Point(double _x=0,double _y=0){
        x=_x,y=_y;
    }
    Point operator+(const Point &a){
        return Point(x+a.x,y+a.y);
    }
    Point operator-(const Point &a){
        return Point(x-a.x,y-a.y);
    }
    Point operator*(const double &a){
        return Point(x*a,y*a);
    }
    Point operator/(const double &a){
        return Point(x/a,y/a);
    }
    friend bool operator<(const Point &l,const Point &r){
        return l.y<r.y||(!sign(l.y-r.y)&&l.x<r.x);
    }
    double angle(){
        return atan2(y,x);
    }
    void input(){
        scanf("%lf%lf",&x,&y);
    }
}p[50030],q[200000],tp[200000];
int Minkowski(int n,int m){
    int s1=0,s2=0;
    for(int i=0;i<n;i++) if(q[i]<q[s1]) s1=i;
    for(int i=0;i<m;i++) if(p[i]<p[s2]) s2=i;
//    printf("%f %f\n",p[2].x,p[2].y);
    int cnt=0;
    tp[cnt++]=q[s1]+p[s2];
//    printf("%f %f -------\n",tp[cnt-1].x,tp[cnt-1].y);
    for(int i=0,j=0;i<n||j<m;){
        int f;
        int k1=(i+s1)%n,l1=(k1+1)%n;
        int k2=(j+s2)%m,l2=(k2+1)%m;
        if(i==n) f=1;
        else if(j==m) f=0;
        else{
            double a1=(q[l1]-q[k1]).angle();
            double a2=(p[l2]-p[k2]).angle();
            while(sign(a1)<0) a1+=2.0*pi;
            while(sign(a2)<0) a2+=2.0*pi;
//            printf("%f %f %f %f %d %d %d\n",p[l2].x,p[l2].y,p[k2].x,p[k2].y,s2,k2,l2);
//            printf("%f %f ~~\n",a1,a2);
            f=(a1>a2);
        }
        if(!f){
            tp[cnt]=(q[l1]-q[k1])+tp[cnt-1];
            i++;cnt++;
        }else{
            tp[cnt]=(p[l2]-p[k2])+tp[cnt-1];
            j++;cnt++;
        }
//        printf("%f %f -------\n",tp[cnt-1].x,tp[cnt-1].y);
    }
    cnt--;
    return cnt;
}
double mult(Point a,Point b,Point c){
    return (a.x-c.x)*(b.y-c.y)-(a.y-c.y)*(b.x-c.x);
}
int graham(Point pnt[],int n,Point res[]){
    int i,len,k=0,top=1;
    sort(pnt,pnt+n);
    if(n==0) return 0;res[0]=pnt[0];
    if(n==1) return 1;res[1]=pnt[1];
    if(n==2) return 2;res[2]=pnt[2];
    for(i=2;i<n;i++){
        while(top&&sign(mult(pnt[i],res[top],res[top-1]))>=0) top--;
        res[++top]=pnt[i];
    }
    len=top;res[++top]=pnt[n-2];
    for(i=n-3;i>=0;i--){
        while(top!=len&&sign(mult(pnt[i],res[top],res[top-1]))>=0) top--;
        res[++top]=pnt[i];
    }
    return top;
}
bool isin(const Point&a,int cnt,Point res[]){
    Point g=(res[0]+res[(cnt/3)]+res[(2*cnt/3)])/3.0;
    int l=0,r=cnt;
    while(l+1<r){
        int mid=(l+r)/2;
        double k=mult(res[l],res[mid],g);
        double res1=mult(res[l],a,g);
        double res2=mult(res[mid],a,g);
        if(sign(k)>0){
            if(sign(res1)>=0&&sign(res2)<0) r=mid;
            else l=mid;
        }else{
            if(sign(res1)<0&&sign(res2)>=0) l=mid;
            else r=mid;
        }
    }
    r%=cnt;
    int z=sign(mult(res[r],res[l],a));
    if(z<=0) return 1;//-1,界内;0,边界;1,界外
    else return 0;
}
int n;
double area(){
    double ret=0;
    for(int i=1;i<n-1;i++) ret+=mult(q[i],q[i+1],q[0]);
    return fabs(ret)/2.0;
}
int main(){
    while(scanf("%d",&n)!=EOF){
        for(int i=0;i<n;i++) q[i].input();
        for(int i=1;i<3;i++){
            int tmp;
            scanf("%d",&tmp);
            for(int j=0;j<tmp;j++) p[j].input();
            n=Minkowski(n,tmp);
            n=graham(tp,n,q);
        }
//        for(int i=0;i<n;i++) printf("%f %f\n",q[i].x,q[i].y);
//        printf("%d %.3f\n",n,area());
        int Q;scanf("%d",&Q);
        for(int i=0;i<Q;i++){
            int cnt=0;
            Point tmp;
            tmp.input();tmp=tmp*3;
            if(isin(tmp,n,q)) puts("YES");
            else puts("NO");
        }
    }
    return 0;
}
/*
3
1 0
1 1
0 1
3
0 0
1 0
0 1



-2.000000 -2.000000
-1.000000 -2.000000
7.000000 2.000000
17.000000 8.000000
17.000000 9.000000
9.000000 5.000000
-1.000000 -1.000000
*/

 		   				  	 	 		 	   	 	  	