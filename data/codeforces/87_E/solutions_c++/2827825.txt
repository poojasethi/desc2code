#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>
#include <string>
#include <queue>
#include <vector>

using namespace std;

struct Point {

  int x, y;

  Point (int x = 0, int y = 0) : x(x), y(y) {}

  Point operator + (Point rhs) {
    return Point(x + rhs.x, y + rhs.y);
  }

  Point operator - (Point rhs) {
    return Point(x - rhs.x, y - rhs.y);
  }

  long long operator % (Point rhs) {
    return x * (long long) rhs.y - y * (long long) rhs.x;
  }

} conv[200000], poly[50010];

int HalfPlane(Point p) {
  if (p.y > 0) return -1;
  if (p.y < 0) return 1;
  if (p.x > 0) return -1;
  return 1;
}

bool Compare(Point p, Point q) {
  int qp = HalfPlane(p);
  int qq = HalfPlane(q);
  if (qp != qq) return qp < qq;
  return p % q > 0;
}

int main() {

  Point lower(0,0);
  int  n_edges = 0;
  for (int i = 0; i < 3; i++) {
    int n_sides;
    scanf("%d", &n_sides);
    int lowest = 0;
    for (int j = 0; j < n_sides; j++) {
      scanf("%d%d", &poly[j].x, &poly[j].y);
      if (poly[j].y < poly[lowest].y || (poly[j].y == poly[lowest].y && poly[j].x < poly[lowest].x)) {
          lowest = j;
      }
    }
    lower = lower + poly[lowest];
    poly[n_sides] = poly[0];
    for (int j = 1; j <= n_sides; j++) {
      conv[n_edges++] = poly[j] - poly[j-1];
    }
  }
  sort(conv, conv + n_edges, Compare);

  conv[n_edges] = lower;
  for (int i = n_edges-1; i >= 0; i--) {
    conv[i] = conv[i+1] - conv[i];
  }
  int next = 1;
  for (int i = 1; i < n_edges; i++) {
    if ((conv[i] - conv[next - 1]) % (conv[i + 1] - conv[next - 1]) != 0) {
      conv[next++] = conv[i];
    }
  }
  n_edges = next;

  int queries;
  scanf("%d", &queries);

  for (int i = 0; i < queries; i++) {
    Point q;
    scanf("%d%d", &q.x, &q.y);
    q.x *= 3;
    q.y *= 3;
    int left = 1, right = n_edges-1;
    while (left + 1 < right) {
      int mid = (left + right) / 2;
      if ((conv[mid] - conv[0]) % (q - conv[0]) >= 0) {
        left = mid;
      } else {
        right = mid;
      }
    }
    if (((conv[left] - conv[0]) % (q - conv[0]) >= 0) &&
        ((conv[right] - conv[left]) % (q - conv[left]) >= 0) &&
        ((conv[0] - conv[right]) % (q - conv[right]) >= 0)) {
      printf("YES\n"); 
    } else {
      printf("NO\n");
    }
  }

  return 0;
}

