#include <cstdio>
#include <algorithm>
#include <iostream>
#include <cstring>
#define rep(i,j,k) for (int i=j; i<=k; i++)
using namespace std;
typedef long long LL;

const int maxn=210000;

const double eps=1e-13;

int sign(double x){
    if (x<-eps) return -1; return x>eps;
}

class point{public:
    LL x,y;
    point(LL _x,LL _y):x(_x),y(_y){}
    point(){}
    bool operator<(point a){
        return (y<a.y||y==a.y&&x<a.x);
    }
    point operator+(point a){
        return point(x+a.x,y+a.y);
    }
    point operator-(point a){
        return point(x-a.x,y-a.y);
    }
    LL operator*(point a){
        return x*a.y-y*a.x;
    }
    int pos(){
        if (x>=0&&y>=0) return 1;
        if (x<=0&&y>=0) return 2;
        if (x<=0&&y<=0) return 3;
        return 4;
    }
    void read(){
        int _x,_y;
        scanf("%d%d",&_x,&_y);
        x=_x, y=_y;
    }
};


bool lower(point a, point b){
    if (a.pos()>b.pos()) return false;
    if (a.pos()<b.pos()) return true;
    return a*b>0;
}

int n[4],tot,now[4]={1,1,1,1};
point a[4][maxn],b[maxn];

bool in_triangle(point a, point b, point c, point q){
    return ((q-a)*(b-a)<=0 && (q-b)*(c-b)<=0 && (q-c)*(a-c)<=0);
}

int main(){
    point ori(0,0);
    rep(o,1,3){
        cin>>n[o];
        int m=1;
        rep(i,1,n[o]){
            a[o][i].read();
            if (a[o][i]<a[o][m]) m=i;
        }
        ori=ori+a[o][m];
        rep(i,1,n[o]) b[i]=a[o][i];
        rep(i,m,n[o]) a[o][i-m+1]=b[i];
        rep(i,1,m-1)  a[o][n[o]-m+1+i]=b[i];        
        a[o][n[o]+1]=a[o][1];
    }
    
    tot=1; b[1]=ori;
    
    while (1){
        point q;
        int sp=-1;
        rep(o,1,3)if(now[o]<=n[o]){
            if(sp==-1 || lower(a[o][now[o]+1]-a[o][now[o]],q) )
                q=a[o][now[o]+1]-a[o][now[o]], sp=o;
        }
        if (sp==-1) break;
        now[sp]++;
        tot++;
        b[tot]=b[tot-1]+q;
        if (tot>=3&&(b[tot]-b[tot-2])*(b[tot-1]-b[tot-2])==0)
            b[tot-1]=b[tot],--tot;
    }
    
    int m;
    tot--;
    cin>>m;
    rep(mm,1,m){
        point q; 
        q.read();
        q.x*=3,q.y*=3;
        
        int l=2,r=tot,mid;
        while (l<r){
            if (l+1==r){
                if (in_triangle(b[1],b[l],b[r],q))
                    puts("YES"); else
                    puts("NO");
                break;
            }           
            mid=(l+r)/2;
            LL tmp=(b[mid]-b[1])*(q-b[1]);
            if (tmp<0)
                r=mid; else
                l=mid;
        }
    }

    return 0;
}
