#include <iostream>
#include <cmath>
#include <cstdlib>

using namespace std;

typedef long long int ll;

typedef pair<ll,ll> point;

point operator+(point p1,point p2)
{
  p1.first+=p2.first;
  p1.second+=p2.second;
  return p1;
}

point operator-(point p1,point p2)
{
  p1.first-=p2.first;
  p1.second-=p2.second;
  return p1;
}

ll prodvec(point p1,point p2)
{
  return p1.first*p2.second-p1.second*p2.first;
}

const int limite=1000000;

void leer(int &n,point p[limite],int &iinf)
{
  point inf(1000000000,1000000000);
  cin>>n;
  for (int i=0;i<n;i++) {
    cin>>p[i].first>>p[i].second;
    if (p[i]<inf) {
      inf=p[i];
      iinf=i;
    }
  }
}

int n1,n2,n3;
point p1[limite];
point p2[limite];
point p3[limite];

int n;
point p[limite];
int i1inf,i2inf,i3inf;

int m;

int main()
{
  ios::sync_with_stdio(false);
  leer(n1,p1,i1inf);
  leer(n2,p2,i2inf);
  leer(n3,p3,i3inf);
  int i1=i1inf;
  int i2=i2inf;
  int i3=i3inf;
  n=0;
  do {
    p[n++]=p1[i1]+p2[i2]+p3[i3];
    //cout<<i1<<" "<<i2<<" "<<i3<<" "<<p[n-1].first<<" "<<p[n-1].second<<endl;
    int nexti1=(i1+1)%n1;
    int nexti2=(i2+1)%n2;
    int nexti3=(i3+1)%n3;
    point v1=p1[nexti1]-p1[i1];
    //cout<<"v1 "<<v1.first<<" "<<v1.second<<endl;
    point v2=p2[nexti2]-p2[i2];
    //cout<<"v2 "<<v2.first<<" "<<v2.second<<endl;
    point v3=p3[nexti3]-p3[i3];
    //cout<<"v3 "<<v3.first<<" "<<v3.second<<endl;
    ll pv12=prodvec(v1,v2);
    ll pv23=prodvec(v2,v3);
    ll pv13=prodvec(v1,v3);
    if (pv12>=0 and pv13>=0) i1=nexti1;
    else if (pv23>=0) i2=nexti2;
    else i3=nexti3;
  } while (not (i1==i1inf and i2==i2inf and i3==i3inf));
  //cout<<"hola"<<endl;
  cin>>m;
  int ifirst=1;
  while (prodvec(p[ifirst]-p[0],p[ifirst+1]-p[0])==0)
    ifirst++;
  int ilast=n-1;
  while (prodvec(p[0]-p[ilast],p[0]-p[ilast-1])==0)
    ilast--;
  for (int i=0;i<m;i++) {
    point h;
    cin>>h.first>>h.second;
    h.first*=3;
    h.second*=3;
    point vh=h-p[0];
    int le=ifirst;
    int ri=ilast;
    while (le+1<ri) {
      int med=(le+ri)/2;
      point vmed=p[med]-p[0];
      if (prodvec(vmed,vh)>=0)
	le=med;
      else
	ri=med;
    }
    if (prodvec(p[le]-p[0],h-p[0])>=0 and prodvec(p[ri]-p[le],h-p[le])>=0 and prodvec(p[0]-p[ri],h-p[ri])>=0)
      cout<<"YES"<<endl;
    else
      cout<<"NO"<<endl;
  }
}
 
