from sys import stdin, stdout
from collections import defaultdict

def f(n = 20):
    c = 0
    s = []
    for x in xrange(n):
        if c and random.randint(0,1):
            s.append(random.choice(')>]}'))
            c -= 1
        else:
            s.append(random.choice('(<[{'))
            c += 1
    for x in xrange(c):
        s.append(random.choice(')>]}'))
    return ''.join(s)

def pmove(ss):
    ob = '[({<'
    cb = '])}>'
    m = lambda x: {']':'[', ')':'(', '}':'{', '>':'<'}[x]
    cd = defaultdict(int)
    for char in ss:
        if char in ob:
            cd[char] += 1
        else:
            cd[m(char)] -= 1
    return sum((abs(val) for val in cd.values()))/2
            
def solve(bs):
    ob = '[({<'
    cb = '])}>'
    c = 0
    ls = 0
    sbs = []
    for i, char in enumerate(bs):
        if char in ob:
            c+=1
        elif char in cb:
            c-=1
        if c == 0:
            sbs.append(bs[ls:i+1])
            ls = i+1
    if c != 0:
        return 'Impossible'
    else:
        return sum((pmove(ss) for ss in sbs))

def solve2(bs):
    stack = []
    c = 0
    ob = '[({<'
    cb = '])}>'
    m = lambda x: {']':'[', ')':'(', '}':'{', '>':'<'}[x]
    for char in bs:
        if char in ob:
            stack.append(char)
        else:
            if not stack:
                return 'Impossible'
            if stack[-1] != m(char):
                c += 1
            stack.pop()
    if stack:
        return 'Impossible'
    return c

def main():
    lines = stdin.readlines()
    #lines = ['[(){][<]>{}}\n']
    stdout.write(str(solve2(lines[0].strip())))
    
main()
