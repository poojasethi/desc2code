#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstring>
#include <ctime>
#include <map>
#define x first
#define y second
using namespace std;
map<int, int> t[2];
typedef map<int, int> :: iterator iter;
typedef long long ll;
int m;
ll cross(int ax, int ay, int bx, int by, int cx, int cy) { return (ll )(bx - ax) * (cy - ay) - (ll )(by - ay) * (cx - ax); }  
bool Query(int x, int y, int flag)
{
	if (!t[flag].size()) return false;
	if (t[flag].find(x) != t[flag].end()) return y >= t[flag][x];
	if (x < (*(t[flag].begin())).x || x > (*(-- t[flag].end())).x) return false;
	iter tmp1 = t[flag].lower_bound(x), tmp2 = tmp1; 
	tmp2 --;
	return cross(x, y, (*tmp2).x, (*tmp2).y, (*tmp1).x, (*tmp1).y) >= 0;
}
void auto_update(int x, int y, int flag)
{
	if (Query(x, y, flag)) return ;
	t[flag][x] = y;
	iter tmp = t[flag].upper_bound(x); 
	iter vp = tmp; vp --;
	iter tmp1 = vp; tmp1 --; 
	iter tmp2 = tmp1; tmp2 --;
	if (tmp != t[flag].end())
	{
		iter tmp3 = tmp; tmp3 ++;
		while (tmp3 != t[flag].end() && cross(x, y, (*tmp3).x, (*tmp3).y, (*tmp).x, (*tmp).y) >= 0)
			t[flag].erase(tmp), tmp = tmp3, tmp3 ++;
	}
	if (vp == t[flag].begin() || tmp1 == t[flag].begin()) return ;
	while (tmp1 != t[flag].begin() && cross(x, y, (*tmp1).x, (*tmp1).y, (*tmp2).x, (*tmp2).y) >= 0)
		t[flag].erase(tmp1), tmp1 = tmp2, tmp2 --;
}
int main( )
{
	int d, x, y;
	scanf("%d", &m);
	for (int i = 1; i <= m; i ++)
	{
		scanf("%d %d %d", &d, &x, &y);
		if (d == 1) auto_update(x, y, 0), auto_update(x, -y, 1);
		else printf((Query(x, y, 0) && Query(x, -y, 1)) ? "YES\n" : "NO\n");
	}
	return 0;
}

  						  	 			 		 	 		   	