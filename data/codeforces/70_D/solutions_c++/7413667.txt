#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
using namespace std;
typedef pair<int, int> pii;
typedef long long ll;
typedef set <pii > ::iterator iter;
#define mp make_pair
#define X first
#define Y second
int q, op, x, y;
set <pii > up, down;
const int inf = 1e9;
ll cross(pii o, pii a, pii b) {
	return (ll)(a.X-o.X)*(b.Y-o.Y) - (ll)(a.Y-o.Y)*(b.X-o.X);
}
bool inside(set<pii > &st, int x, int y) {
	if(!st.size()) return 0;
	if(x < st.begin()->X || x > st.rbegin()->X) return 0;
	iter c = st.lower_bound(mp(x, -inf));
	if(c != st.end() && c->X == x)
		return y >= c->Y;

	iter r = st.lower_bound(mp(x, y));
	iter l = r; l--;
	return  cross(*l, mp(x, y), *r) <= 0;
}
void add(set<pii > &st, int x, int y)
{
    if(inside(st, x, y)) return;
    iter c = st.lower_bound(mp(x, -inf));
    if(c != st.end() && c->X == x)
    	st.erase(c);
    st.insert(mp(x, y));
    iter cur = st.lower_bound(mp(x, y)), i, j;
    for(i = cur, i--, j = i, j--; i != st.begin() && cur != st.begin(); i = j, j--)
        if(cross(*cur, *i,*j) >= 0) st.erase(i);
        else break;
    for(i = cur, i++, j = i, j++; i != st.end() && j != st.end(); i = j, j++)
        if(cross(*cur, *i, *j) <= 0) st.erase(i);
        else break;
}

int main() {
	scanf("%d", &q);
	while(q--) {
		scanf("%d%d%d", &op, &x, &y);
		if(op == 1) {
			add(up, x, -y);
			add(down, x, y);
		}
		else if(inside(up, x, -y) && inside(down, x, y))
			puts("YES");
		else puts("NO");
	}
	return 0;
}

         		 	  	 	 		