#include <cstdio>
#include <map>
#include <algorithm>
using namespace std;
typedef pair<int, int> pii;
typedef long long lld;
#define MP make_pair
#define X first
#define Y second
map<int, int> Convex[2];
map<int, int>::iterator p , it , it1 , it2 ,q;
lld cross(pii a, pii b, pii c) {
	return (lld) (b.X - a.X) *(c.Y - a.Y) - (lld) (b.Y - a.Y) *(c.X - a.X);
}
bool judge(map<int, int> &st, int x, int y) {
	if (!st.size())    return false;
	if (st.find(x) != st.end())  return y >= st[x];
	if (x < st.begin()->X || (--st.end())->X < x)   return false;
	p = st.lower_bound(x);
	q = p;  q --;
	return cross(MP(x, y), *q, *p) >= 0;
}
void insert(map<int, int> &st, int x, int y) {
	if (judge(st, x, y))   return; 
	st[x] = y;
	p = st.upper_bound(x);
	it1 = it2 = it = p; it-- ; 
	it1 = it;  it1--;  it2 = it1; it2--;
	if(p != st.end() ){
	    q = p; q++;
		while(q != st.end() && cross(MP(x,y),*q,*p) >= 0)	{
			st.erase(p);	p = q;	q ++;
		}
	}
	if(it == st.begin() || it1 == st.begin()) return ;
	while(it1 != st.begin() && cross(MP(x,y),*it1,*it2) >= 0){
		st.erase(it1);  it1 = it2 ;  	it2 --;
	}
}
int main() {
	int Q, op, x, y;
	scanf("%d", &Q);
	while (Q--) {
		scanf("%d%d%d", &op, &x, &y);
		if (op == 1) {
			insert(Convex[0], x, y);
			insert(Convex[1], x, -y);
		} else {
			bool ans1 = judge(Convex[0], x, y) ;
			bool ans2 = judge(Convex[1], x, -y);
			if (ans1 && ans2)
				puts("YES");
			else
				puts("NO");
		}
	}
	return 0;
}

	 						 	 	 		 	  		   	  				