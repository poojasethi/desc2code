#include<cstdio>
#include<cstring>
#include<algorithm>
#include<map> 
using namespace std;
typedef long long LL;

struct P{
	double x,y;
	P(double x=0,double y=0):x(x),y(y){}
	P operator +(const P&b)const{
		return P(x+b.x,y+b.y);
	}
	P operator -(const P&b)const{
		return P(x-b.x,y-b.y);
	}
};
double cross(P a,P b){
	return a.x*b.y - a.y*b.x;
}
typedef map<int,int>::iterator It;
map<int,int>mp[2];
bool isin(map<int,int>&mp,int x,int y){
	if(mp.size()==0)return 0;
	if(mp.find(x)!=mp.end())return mp[x]<=y;
	if(x<(mp.begin())->first||(--(mp.end()))->first<x)return 0;//!!
	It l,r;
	l=r=mp.lower_bound(x);
	--l;
	P L(l->first,l->second),R(r->first,r->second),now(x,y);
	return cross(R-L,now-L)>=0;
}
void insert(map<int,int>&mp,int x,int y){
	if(isin(mp,x,y))return;
	mp[x]=y;
	It r=mp.upper_bound(x);
	It r2=r;
	if(r!=mp.end()){
		++r2;
		P now(x,y);
		while(r2!=mp.end()){
			P R(r->first,r->second);
			P R2(r2->first,r2->second);
			if(cross(R-now,R2-now)<0){
				mp.erase(r);
				r=r2;
				++r2;
			}else break;
		}
	}
	It l=mp.lower_bound(x);
	if(l!=mp.begin()){
		--l;
		if(l!=mp.begin()){
			It l2=l;
			--l2;
			P now(x,y);
			while(l!=mp.begin()){
				P L(l->first,l->second),L2(l2->first,l2->second);
				if(cross(L2-now,L-now)<0){
					mp.erase(l);
					l=l2;
					--l2;
				}else break;
			}
		}
	}
	
}
int main(){
	int n;
	scanf("%d",&n);
	int op,x,y;
	while(n--){
		scanf("%d%d%d",&op,&x,&y);
		if(op==1){
			insert(mp[0],x,y);
			insert(mp[1],x,-y);
		}else{
			bool v1=isin(mp[0],x,y);
			bool v2=isin(mp[1],x,-y);
			puts(v1&&v2?"YES":"NO");
		}
	}
	return 0;
}

