#include<cstdio>
#include<cstring>
#include<cmath>
#include<map>
#include<algorithm>
#define X first
#define Y second
using namespace std;
map<int,int> up,down;
typedef map<int,int> ::iterator iter;
typedef long long ll;
ll mult(iter c,iter a,iter b){
    return (ll)(a->X-c->X)*(b->Y-c->Y)-(ll)(a->Y-c->Y)*(b->X-c->X);
}
bool inside(map<int,int> &p,int x,int y){
    if(!p.size()) return 0;
    if(x<p.begin()->X||x>p.rbegin()->X) return 0;
    if(p.count(x)) return y>=p[x];
    p[x]=y;
    iter cur=p.lower_bound(x),i,j;
    i=cur;j=cur;j++,i--;
    bool ret=mult(i,cur,j)<=0;
    p.erase(x);
    return ret;
}
void add(map<int,int> &p,int x,int y){
    if(inside(p,x,y)) return ;
    p[x]=y;
    iter cur=p.lower_bound(x),i,j;
    for(i=cur,i--,j=i,j--;i!=p.begin()&&cur!=p.begin();i=j--)
        if(mult(cur,i,j)>=0) p.erase(i);
        else break;
    for(i=cur,i++,j=i,j++;i!=p.end()&&j!=p.end();i=j++)
        if(mult(cur,i,j)<=0) p.erase(i);
        else break;
}
int main(){
    int q,x,y,op;
    scanf("%d",&q);
    while(q--){
        scanf("%d%d%d",&op,&x,&y);
        if(op==1){
            add(up,x,-y);
            add(down,x,y);
        }else{
            if(inside(up,x,-y)&&inside(down,x,y)) puts("YES");
            else puts("NO");
        }
    }
}
