#include<cstdio>
#include<set>
using namespace std;
struct point
{	long long x,y;
    point(long long x=0,long long y=0):x(x),y(y) {};
    bool operator <(const point &rhs) const
    {	return x<rhs.x||(x==rhs.x&&y<rhs.y);
    }
};
point operator -(point a,point b)
{	return point(a.x-b.x,a.y-b.y);
}
set<point> up,down;
long long cp(point a,point b)
{	return a.x*b.y-b.x*a.y;
}
bool in(set<point> &pset,point p)
{	set<point> ::iterator l,r;
	if (pset.size()<=1)
		return 0;
    if (p.x<(*pset.begin()).x||*pset.rbegin()<p)
		return 0;
    r=pset.lower_bound(p);
    l=r,--l;
    if (p.x==(*r).x)
		return 1;
    return cp(p-(*l),(*r)-(*l))>=0;
}
void ins(set<point> &pset,point p)
{	set<point> ::iterator l,r,i,cur;
	pset.insert(p);
    l=r=cur=pset.lower_bound(p);
    l--,r++;
    for (i=r,++i;r!=pset.end()&&i!=pset.end();r=i,++i)
        if (cp(*r-p,*i-p)>=0)
			pset.erase(r);
        else break;
    for (i=l,i--;cur!=pset.begin()&&l!=pset.begin();l=i,i--)
        if (cp(*l-(*i),p-(*i))>=0)
			pset.erase(l);
        else break;
}
int main()
{	int q,opr,x,y;
	scanf("%d",&q);
	while (q--)
    {	scanf("%d%d%d",&opr,&x,&y);
        if (opr==1)
        {	if (!in(up,point(x,y)))
				ins(up,point(x,y));
            if (!in(down,point(x,-y)))
				ins(down,point(x,-y));
        }
        else if (in(up,point(x,y))&&in(down,point(x,-y)))
			     puts("YES");
        	 else puts("NO");
    }
    return 0;
}
 			 				 		  	   	 	 	   	