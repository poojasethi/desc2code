#include <cstdio>
#include <map>

using namespace std;

typedef long long LL;
typedef map<int, int>::iterator iter;

const double eps = 1e-10;
int q, t, x, y;
map<int, int> up, down;

LL cross(iter base, iter a, iter b){
    return (LL)(a->first - base->first) * (b->second - base->second) - (LL)(b->first - base->first) * (a->second - base->second);
}

void add(map<int, int> &ch, int x, int y){
    ch[x] = y;
    iter cur = ch.find(x), i, j;
    for(i = cur, i--, j = i, j--; cur != ch.begin() && i != ch.begin(); i = j, j = i, j--)
        if(cross(j, i, cur) >= 0) ch.erase(i->first); else break;
    for(i = cur, i++, j = i, j++; i != ch.end() && j != ch.end(); i = j, j = i, j++)
        if(cross(cur, i, j) >= 0) ch.erase(i->first); else break;
}

bool ok(map<int, int> &ch, int x, int y){
    if (!ch.size()) return false;
    if (x < ch.begin()->first || x > ch.rbegin()->first) return false;
    if (ch.count(x)) return y <= ch[x];
    ch[x] = y;
    iter i = ch.lower_bound(x), j = i ,k = i; j--; k++;
    bool ret = cross(j, i, k) >= 0;
    return ch.erase(x), ret;
}

int main(){
    scanf("%d", &q);
    while(q--){
        scanf("%d%d%d", &t, &x, &y);
        if (t == 1){
            if (!ok(up, x, y)) add(up, x, y);
            if (!ok(down, x, -y)) add(down, x, -y);
        }else
            if(ok(up, x, y) && ok(down, x, -y)) printf("YES\n"); else printf("NO\n");
    }
}