#include<cstdio>
#include<cstring>
#include<map>
#include<algorithm>

using namespace std;

typedef long long LL;

typedef map<int, int> Hull;
typedef map<int, int>::iterator Point;

#define x first
#define y second

bool above(Hull& h, int x, int y){
	if(h.empty())
		return false;
	Point r = h.lower_bound(x);
	if(r == h.end())
		return false;
	Point l = h.upper_bound(x);
	if(l == h.begin())
		return false;
	-- l;
	if(l == r)
		return l -> y <= y;
	return (LL)l -> y * (r -> x - x) + 
		(LL)r -> y * (x - l -> x) <= (LL)y * (r -> x - l -> x);
}

inline LL det(int x1, int y1, int x2, int y2){
	return (LL)x1 * y2 - (LL)x2 * y1;
}

void insert(Hull& h, int x, int y){
	if(above(h, x, y))
		return;
	h[x] = y;
	Point cur;
	cur = h.upper_bound(x);
	while(cur != h.end()){
		Point nxt = cur;
		++ nxt;
		if(nxt == h.end())
			break;
		if(det(nxt -> x - x, nxt -> y - y, cur -> x - x, cur -> y - y) < 0)
			break;
		swap(nxt, cur);
		h.erase(nxt);
	}
	cur = h.lower_bound(x);
	if(cur == h.begin())
		return;
	-- cur;
	while(cur != h.begin()){
		Point nxt = cur;
		-- nxt;
		if(det(cur -> x - x, cur -> y - y, nxt -> x - x, nxt -> y - y) < 0)
			break;
		swap(nxt, cur);
		h.erase(nxt);
	}
}

Hull up, down;

int main(){
	int n;
	scanf("%d", &n);
	while(n --){
		int o, x, y;
		scanf("%d%d%d", &o, &x, &y);
		if(o == 1){
			insert(down, x, y);
			insert(up, x, -y);
		} else{
			if(above(down, x, y) && above(up, x, -y))
				fputs("YES\n", stdout);
			else
				fputs("NO\n", stdout);
		}
	}

	return 0;
}


