from sys import stdin, stdout
from bisect import bisect_left
def main():
    RL = lambda: stdin.readline()
    read_ints = lambda: map(int, RL().split())
    n, m = read_ints()
    s = RL().strip()
    t = RL().strip()
    ma = [0] * n
    sps = []
    for i in xrange(n):
        if s[i] == 'X':
            ma[i] += 1
        if t[i] == 'X':
            ma[i] += 2
        if ma[i]:
            sps.append(i)
    gr = [0] * n
    c = 0
    for i in xrange(n-1):
        gr[i] = c
        if (ma[i] | ma[i+1]) == 3:
            c += 1
    gr[-1] = c
    def coor(v):
        h = 0 if v <= n else 1
        w = v-1 if v <= n else v-n-1
        return (h, w)
    l = len(sps)
    def nei(w):
        return bisect_left(sps, w)
    dif = [0]
    for i in xrange(l-1):
        dif.append(dif[-1])
        if (ma[sps[i]] & ma[sps[i+1]]) == 0:
            dif[-1] += 1
    dif.append(dif[-1])
    ans = []
    for _ in xrange(m):
        v, w = map(coor, read_ints())
        if gr[v[1]] != gr[w[1]]:
            ans.append(-1)
            continue
        if v[1] > w[1]:
            v, w = w, v
        vidx, widx = map(nei, (v[1], w[1]))
        #print vidx, widx, sps[vidx], sps[widx]
        if vidx == widx:
            ans.append(w[1] - v[1] + (0 if v[0] == w[0] else 1))
            continue
        l0 = sps[vidx] - v[1] + (0 if v[0] == 2-ma[sps[vidx]] else 1)
        widx -= 1
        l1 = dif[widx] - dif[vidx] + sps[widx] - sps[vidx]
        l2 = w[1] - sps[widx] + (0 if w[0] == 2-ma[sps[widx]] else 1)
        #print l0, l1, l2
        ans.append(l0 + l1 + l2)
    stdout.write('\n'.join(map(str, ans)))
main()
