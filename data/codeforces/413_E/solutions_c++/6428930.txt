#include <cstdio>
#include <cstring>
#include <set>
#include <cmath>
 
using namespace std;

const int MAX_N = 400003;

int n, m;
char p[2][MAX_N];
int nt[MAX_N], d[MAX_N]; 
set<int> S;

int main() {
	scanf("%d%d", &n, &m);
	scanf("%s", p[0] + 1);
	scanf("%s", p[1] + 1);
	int prex = 0, prey = 0;
	for (int i = 1; i <= n; ++i) {
		d[i] = d[i - 1] + 1;
		if (p[0][i] == 'X' && p[1][i] == 'X') ++nt[i << 1];
		if (p[0][i] == 'X' && p[1][i + 1] == 'X' ||
		 p[0][i + 1] == 'X' && p[1][i] == 'X') ++nt[1 + (i << 1)];
		if (p[0][i] != p[1][i]) {
			int nowx = 0;
			if (p[0][i] != '.') nowx = 1;
			if (prey != 0 && nowx != prex) ++d[i];
			prex = nowx, prey = i;
			S.insert(i);
		}
	}
	for (int i = 1; i <= 2 * n; ++i) {
		nt[i] += nt[i - 1];
	}
	for (int i = 0; i < m; ++i) {
		int u, v;
		scanf("%d%d", &u, &v);
		--u, --v;
		int x1 = u / n, y1 = u % n + 1;
		int x2 = v / n, y2 = v % n + 1;
		if (y1 > y2) swap(y1, y2), swap(x1, x2);
		if (nt[y1 << 1] != nt[y2 << 1]) {
			puts("-1");
			continue;
		}
		if (S.lower_bound(y1) == S.lower_bound(y2)) {
			int ans = abs(x2 - x1) + abs(y2 - y1);
			printf("%d\n", ans);
			continue;
		}
		int ans = 0;
		set<int>::iterator it = S.lower_bound(y1);
		int nowx = 0;
		if (p[0][*it] != '.') nowx = 1;
		ans += abs(nowx - x1) + abs(*it - y1);
		y1 = *it;
		it = S.lower_bound(y2);
		if (it == S.end() || *it > y2) --it;
		nowx = 0;
		if (p[0][*it] != '.') nowx = 1;
		
		ans += abs(nowx - x2) + abs(*it - y2);
		ans += abs(d[*it] - d[y1]);
		printf("%d\n", ans);
	}
	return 0;
}
