#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <string>
#define fs first
#define sc second
using namespace std;

const int MAXN = 200001;
const int INF = 1000 * 1000 * 10;
const int LG = 20;
int a[MAXN][LG][2][2];
pair <int, int> p1, p2;
string s[2];
vector <int> ans;
int main()
{
	int n, m;
	cin >> n >> m >> s[0] >> s[1];
	for (int i = 0; i < n - 1; i++)
	{
		if ((s[0][i] == '.') && (s[0][i + 1] == '.')) a[i][0][0][0] = 1;
		else a[i][0][0][0] = INF;
		if ((s[1][i] == '.') && (s[1][i + 1] == '.')) a[i][0][1][1] = 1;
		else a[i][0][1][1] = INF;
		if ((s[0][i] == '.') && (s[1][i + 1] == '.') && ((s[0][i + 1] == '.') || (s[1][i] == '.'))) a[i][0][0][1] = 2;
		else a[i][0][0][1] = INF;
		if ((s[1][i] == '.') && (s[0][i + 1] == '.') && ((s[1][i + 1] == '.') || (s[0][i] == '.'))) a[i][0][1][0] = 2;
		else a[i][0][1][0] = INF;
	}
	for (int j = 1; j < LG; j++)
	{
		for (int i = 0; i < n - 1; i++)
		{
			if (i + (1 << j) < n)
			{
				for (int l1 = 0; l1 < 2; l1++)
				{
					for (int l2 = 0; l2 < 2; l2++)
					{
						a[i][j][l1][l2] = min(INF, 
							min(a[i][j - 1][l1][0] + a[i + (1 << (j - 1))][j - 1][0][l2], a[i][j - 1][l1][1] + a[i + (1 << (j - 1))][j - 1][1][l2]));
					}
				}
			}
		}
	}
	for (int i = 0; i < m; i++)
	{
		int t;
		cin >> t;
		p1.fs = (t - 1) % n, p1.sc = (t - 1) / n;
		cin >> t;
		p2.fs = (t - 1) % n, p2.sc = (t - 1) / n;
		if (p1 > p2) swap(p1, p2);
		if (p1.fs == p2.fs)
		{
			ans.push_back(abs(p1.sc - p2.sc));
			continue;
		}
		int c[2];
		c[0] = c[1] = INF;
		int cur = p1.fs;
		c[p1.sc] = 0;
		for (int j = LG - 1; j >= 0; j--)
		{
			if (cur + (1 << j) <= p2.fs)
			{
				int nc0 = min(INF, min(c[0] + a[cur][j][0][0], c[1] + a[cur][j][1][0]));
				int nc1 = min(INF, min(c[0] + a[cur][j][0][1], c[1] + a[cur][j][1][1]));
				c[0] = nc0, c[1] = nc1;
				cur += (1 << j);
			}
		}
		if (c[p2.sc] == INF) ans.push_back(-1);
		else ans.push_back(c[p2.sc]);
	}
	for (int i = 0; i < m; i++) cout << ans[i] << endl;
	return 0;
}