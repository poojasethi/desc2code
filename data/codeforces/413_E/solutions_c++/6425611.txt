#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <ctime>
#include <bitset>
#include <ctype.h>
#include <complex>
#include <cassert>


using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)
template<class T> inline void chkmin(T &a, T b) { if (a>b) a=b; }
template<class T> inline void chkmax(T &a, T b) { if (a<b) a=b; }

typedef long long INT;
typedef pair<int, int> pii;

#define inf 0x3f3f3f3f
#define NN 210000

char board[2][NN];

#define ls (u*2)
#define rs (u*2+1)
#define mid ((l+r)/2)
int d[NN<<2][2][2];
void build(int u, int l, int r) {
	int i, j, k;
	if (r==l) {
		if (board[0][l]=='.' && board[1][l]=='.') {
			d[u][0][0]=d[u][1][1]=0;
			d[u][0][1]=d[u][1][0]=1;
		} else if (board[0][l]=='.') {
			d[u][0][0]=0;
		} else if (board[1][l]=='.') {
			d[u][1][1]=0;
		}
		return ;
	}
	build(ls, l, mid); build(rs, mid+1, r);
	for (i=0; i<2; i++)
		for (j=0; j<2; j++)
			for (k=0; k<2; k++)
				chkmin(d[u][i][j], d[ls][i][k]+d[rs][k][j]+1);
}

void calc(int u, int l, int r, int L, int R, int dis[2][2]) {
	int i, j, k;
	chkmax(L, l); chkmin(R, r);
	if (L==l && R==r) {
		for (i=0; i<2; i++)
			for (j=0; j<2; j++)
				dis[i][j]=d[u][i][j];
		return ;
	}
	if (R<=mid) calc(ls, l, mid, L, R, dis);
	else if (L>mid) calc(rs, mid+1, r, L, R, dis);
	else {
		int ld[2][2], rd[2][2];
		calc(ls, l, mid, L, R, ld);
		calc(rs, mid+1, r, L, R, rd);
		for (i=0; i<2; i++) for (j=0; j<2; j++) dis[i][j]=inf;
		for (i=0; i<2; i++)
			for (j=0; j<2; j++)
				for (k=0; k<2; k++)
					chkmin(dis[i][j], ld[i][k]+rd[k][j]+1);
	}
}

int main() {
	
	int N, Q, u, v, sr, sc, tr, tc, d[2][2];
	
	scanf("%d%d", &N, &Q);
	scanf("%s%s", board[0], board[1]);
	
	memset(::d, 0x3f, sizeof(::d));
	
	build(1, 0, N-1);
	
	while (Q--) {
		scanf("%d%d", &u, &v); u--, v--;
		sr=u/N, sc=u%N;
		tr=v/N, tc=v%N;
		if (sc>tc) swap(sr, tr), swap(sc, tc);
		calc(1, 0, N-1, sc, tc, d);
		if (d[sr][tr]==inf) puts("-1");
		else printf("%d\n", d[sr][tr]);
	}
	
	return 0;
}

