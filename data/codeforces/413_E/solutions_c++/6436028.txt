#include    <iostream>
#include    <algorithm>

#define FOR(i, a, b) for (int i = (a), _b = (b); i < _b; i++)
#define FOR_(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define _FOR(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)

#define PI 3.14159265358979323846
#define LL long long
#define NM 200001

using namespace std;

int n, m, a[NM][2], area[NM], cnt[NM], cnt_[NM], pos[NM], cntEach[NM][2];

void    Convert(int x, int &r, int &c) {
    x--;
    r = x / n;
    c = x % n;
}

int main() {

    ios::sync_with_stdio(0);    
    cin >>n >>m;
    char c;
    FOR(j, 0, 2) {
        FOR(i, 0, n) {
            cin >>c;
            a[i][j] = (c == 'X');
        }
    }
    area[0] = 0;
    FOR(i, 1, n) {
        area[i] = area[i - 1];
        if ((a[i][1] && a[i][0]) || (a[i][0] && a[i - 1][1]) || (a[i][1] && a[i - 1][0])) area[i]++;
    } 
    cnt[0] = 0;
    pos[0] = 2;
    cntEach[0][0] = a[0][0];
    cntEach[0][1] = a[0][1];
    cnt_[0] = -1;
    int last = 0;
    FOR(i, 1, n) {
        cnt[i] = cnt[i - 1];
        pos[i] = pos[i - 1];
        cnt_[i] =  cnt[i] - 1;
        FOR(j, 0, 2) {
            if (j != pos[i - 1] && a[i][j]) {
                cnt[i]++;
                pos[i] = j;
                FOR_(k, last, i) cnt_[k]++;
            }
            if (j == pos[i] && a[i][j]) last = i;
        }
        FOR(j, 0, 2) cntEach[i][j] = cntEach[i - 1][j] + a[i][j];
    }
    int r1, c1, r2, c2, res, thisC, thisP, x;
    FOR(i, 0, m) {
        cin >>x;
        Convert(x, r1, c1);
        cin >>x;
        Convert(x, r2, c2);
        if (area[c1] != area[c2]) {
            cout <<-1 <<'\n';
            continue;
        }
        if (c1 > c2) {
            swap(c1, c2);
            swap(r1, r2);
        }
        res = c2 - c1;
        thisC = 0; thisP = 0;
        if (c2 > 0) {
            thisC = cnt[c2 - 1] - cnt_[c1];
            thisP = pos[c2 - 1];
        }
        if (cntEach[c2][thisP] - (c1 > 0? cntEach[c1 - 1][thisP] : 0) == 0) thisC = 0;
        if (thisC > 0 && thisP != r2) thisC--;
        res += thisC;
        if (thisC % 2) r2 = 1 - r2;
        cout <<res + (r1 != r2) <<'\n';
    }
    return 0;
    
}