#include<stdio.h>
#include<algorithm>
using namespace std;
const int maxn=200050,big=1e6;
struct Node
{
	int k[4];
	Node(int k1=0,int k2=0,int k3=0,int k4=0) { k[0]=k1,k[1]=k2,k[2]=k3,k[3]=k4; }
}tr[maxn*2];
int n,m,ma[maxn][2],ans;
int ts=0,l[maxn*2],r[maxn*2];
inline int Min(int a,int b) { return min(big,min(a,b)); }
Node get(Node a,Node b)
{
	return Node(Min(a.k[0]+b.k[0],a.k[1]+b.k[2]),Min(a.k[0]+b.k[1],a.k[1]+b.k[3]),Min(a.k[2]+b.k[0],a.k[3]+b.k[2]),Min(a.k[2]+b.k[1],a.k[3]+b.k[3]));
}
void build(int x,int ll,int rr)
{
	int mid=(ll+rr)>>1;
	if(rr-ll==1)
	{
		tr[x].k[0]=(!ma[ll][0]&&!ma[rr][0])?1:big;
		tr[x].k[1]=(!ma[ll][0]&&!ma[rr][1]&&(!ma[ll][1]||!ma[rr][0]))?2:big;
		tr[x].k[2]=(!ma[ll][1]&&!ma[rr][0]&&(!ma[ll][0]||!ma[rr][1]))?2:big;
		tr[x].k[3]=(!ma[ll][1]&&!ma[rr][1])?1:big;
		return ;
	}
	if(ll<mid)
		build(l[x]=++ts,ll,mid);
	if(rr>mid)
		build(r[x]=++ts,mid,rr);
	tr[x]=get(tr[l[x]],tr[r[x]]);
}
Node que(int x,int ll,int rr,int a,int b)
{
	int mid=(ll+rr)>>1;
	Node s1,s2;
	if(a<=ll&&rr<=b) return tr[x];
	if(a<mid) s1=que(l[x],ll,mid,a,b);
	if(b>mid) s2=que(r[x],mid,rr,a,b);
	if(a<mid&&b>mid)
		return get(s1,s2);
	else if(a<mid)
		return s1;
	else 
		return s2;
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("data.in","r",stdin);
#endif
	int i,j,x,y;
	scanf("%d%d\n",&n,&m);
	for(i=0;i<2;i++)
	{
		for(j=0;j<n;j++)
			ma[j][i]=getchar()=='X';
		scanf("\n");
	}
	build(++ts,0,n-1);
	//for(i=1;i<=ts;i++) for(j=0;j<4;j++) printf("%d%c",tr[i].k[j],j<3?' ':'\n');
	for(i=0;i<m;i++)
	{
		scanf("%d%d",&x,&y);
		x--,y--;
		if(x%n>y%n) swap(x,y);
		if(x%n==y%n)
			ans=x==y?0:((ma[x%n][x>=n]||ma[y%n][y>=n])?big:1);
		else 
			ans=que(1,0,n-1,x%n,y%n).k[(x>=n)*2+(y>=n)];
		printf("%d\n",ans==big?-1:ans);
	}
	return 0;
}
