#include <iostream>

using namespace std;

typedef struct{
    long long val[2][2];
} node;
const long long INF = 1000*1000;
const int MAXN = 200010;
node makeNode(char a, char b){
    node x;
    x.val[0][0] = x.val[1][1] = 0;
    x.val[1][0] = x.val[0][1] = 1;
    if(a=='X'){
        x.val[0][0] = x.val[1][0] = x.val[0][1] = INF;
    }
    if(b=='X'){
        x.val[1][1] = x.val[1][0] = x.val[0][1] = INF;
    }
    return x;
}

node nMerge(node A, node B){
    node C;
    C.val[0][0] = min(A.val[0][0]+1+B.val[0][0], A.val[0][1]+1+B.val[1][0]);
    C.val[0][1] = min(A.val[0][0]+1+B.val[0][1], A.val[0][1]+1+B.val[1][1]);
    C.val[1][0] = min(A.val[1][0]+1+B.val[0][0], A.val[1][1]+1+B.val[1][0]);
    C.val[1][1] = min(A.val[1][0]+1+B.val[0][1], A.val[1][1]+1+B.val[1][1]);
    return C;
}
node t[4*MAXN];
char a[MAXN][2];
void build(int v, int tl, int tr){
    if(tl==tr){
        t[v] = makeNode(a[tl][0], a[tl][1]);
    } else{
        int tm=(tl+tr)/2;
        build(v+v, tl, tm);
        build(v+v+1, tm+1, tr);
        t[v] = nMerge(t[v+v], t[v+v+1]);
    }
}
node query(int v, int tl, int tr, int l, int r){
    if(tl==l && tr==r){
        return t[v];
    }
    int tm=(tl+tr)/2;
    if(r<=tm){
        return query(v+v, tl,tm, l, r);
    }
    if(l>tm){
        return query(v+v+1,tm+1, tr, l, r);
    }
    return nMerge(
        query(v+v,tl, tm, l, tm),
        query(v+v+1,tm+1, tr, tm+1, r)
    );
}
int main()
{
    int n, m;
    cin>>n>>m;
    for(int i=0; i<2; ++i){
        for(int j=0; j<n; ++j){
            cin>>a[j][i];
        }
    }
    build(1, 0, n-1);
    for(int i=0; i<m; ++i){
        int l, r;
        cin>>l>>r;
        int x=0,y=0;
        --l; --r;
        if(l>=n){
            l=l-n;
            x=1;
        }
        if(r>=n){
            r=r-n;
            y=1;
        }
        if(r<l){
            int p=l;
            l=r; r=p;
            swap(x, y);
        }
        //cout<<l<<" "<<r<<endl;
        node A=query(1, 0, n-1, l, r);
        if(A.val[x][y]>INF){
            cout<<"-1"<<endl;
        } else{
            cout<<A.val[x][y]<<endl;
        }
        /*cout<<A.val[0][0]<<endl;
        cout<<A.val[0][1]<<endl;
        cout<<A.val[1][0]<<endl;
        cout<<A.val[1][1]<<endl;*/
    }
    return 0;
}
