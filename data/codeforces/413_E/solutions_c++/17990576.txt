#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

const int N = 2e5 + 10;
char s[2][N];
int sum[N], que[N][2], f[N * 2], p[2][N], bq[N * 2][2];
int n, q, cnt;

void init()
{
	scanf("%d%d", &n, &q);
	for (int i = 0; i <= 1; ++ i)
		for (int j = 1; j <= n; ++ j)
			scanf(" %c", &s[i][j]);
}

void bfs(int k)
{
	int r = 0;
	for (int t = 0; t < 2; ++ t) if (s[t][k] == '.')
	{
		if (p[t][k]) return;
		bq[++ r][0] = t, bq[r][1] = k;
		p[t][k] = 1;
	}
	for (int l = 1; l <= r; ++ l)
	{
		int x = bq[l][0], y = bq[l][1];
		f[x * n + y] = k;
		if (s[x ^ 1][y] == '.' && !p[x ^ 1][y])
			bq[++ r][0] = x ^ 1, bq[r][1] = y, p[x ^ 1][y] = 1;
		if (s[x][y + 1] == '.' && !p[x][y + 1])
			bq[++ r][0] = x, bq[r][1] = y + 1, p[x][y + 1] = 1;
	}
}

void pre()
{
	for (int i = 1; i <= n; ++ i) 
	{
		bfs(i);
		sum[i] = sum[i - 1];
		if (s[0][i] != s[1][i])
		{
			que[++ cnt][1] = i, que[cnt][0] = (s[1][i] == '.');
			sum[i] += (que[cnt][0] != que[cnt - 1][0]);
		}
	}
}

int findl(int x)
{
	int l = 1, r = cnt, ret = 0;
	while (l <= r)
	{
		int mid = (l + r) >> 1;
		if (que[mid][1] >= x) r = mid - 1, ret = mid;
		else l = mid + 1;
	}
	return ret;
}

int findr(int x)
{
	int l = 1, r = cnt, ret = 0;
	while (l <= r)
	{
		int mid = (l + r) >> 1;
		if (que[mid][1] <= x) l = mid + 1, ret = mid;
		else r = mid - 1;
	}
	return ret;
}

void solve()
{
	for (int i = 1; i <= q; ++ i)
	{
		int u, v;
		scanf("%d%d", &u, &v);
		int x1 = (u - 1) / n, y1 = (u - 1) % n + 1, x2 = (v - 1) / n, y2 = (v - 1) % n + 1;
		if (y1 > y2) swap(x1, x2), swap(y1, y2);
		if (s[x1][y1] == 'X' || s[x2][y2] == 'X' || f[u] != f[v])
		{
			puts("-1");
			continue;
		}
		int l = findl(y1 + 1), r = findr(y2 - 1);
		if (que[l][1] >= y2 || que[r][1] <= y1)
		{
			printf("%d\n", y2 - y1 + (x1 != x2));
			continue;
		}
		int ans = y2 - y1 + sum[que[r][1]] - sum[que[l][1]];
		ans += (x1 != que[l][0]) + (x2 != que[r][0]);
		printf("%d\n", ans);
	}
}

int main()
{
	init();
	pre();
	solve();
}
	 	 	     	 		 		    	  		 	