#include <iostream>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <utility>
#include <algorithm>
#include <cmath>
#define MAXN 1<<18
#define INF 1000000000

using namespace std;

struct qq {
	int q[2][2];
};

int n,m;
char mz[2][MAXN];
qq st[4*MAXN];

void init(int i, int l, int r) {
	if (l == r) {
		st[i].q[0][1] = st[i].q[1][0] = (mz[0][l]=='.' && mz[1][l]=='.' ? 1 : INF);
		return;
	}
	int mid = (l+r)/2;
	init(2*i,l,mid);
	init(2*i+1,mid+1,r);
	for (int a = 0; a < 2; a++) {
		for (int b = 0; b < 2; b++) {
			st[i].q[a][b] = INF;
			if (mz[0][mid] == '.' && mz[0][mid+1] == '.')
				st[i].q[a][b] = min(st[i].q[a][b],st[2*i].q[a][0]+st[2*i+1].q[0][b]+1);
			if (mz[1][mid] == '.' && mz[1][mid+1] == '.')
				st[i].q[a][b] = min(st[i].q[a][b],st[2*i].q[a][1]+st[2*i+1].q[1][b]+1);
		}
	}
}

qq query(int i, int l, int r, int ll, int rr) {
	qq ret;
	ret.q[0][0] = ret.q[0][1] = ret.q[1][0] = ret.q[1][1] = 0;
	if (r < ll || l > rr) return ret;
	if (l >= ll && r <= rr) return st[i];
	int mid = (l+r)/2;
	qq q1 = query(2*i,l,mid,ll,rr);
	qq q2 = query(2*i+1,mid+1,r,ll,rr);
	for (int a = 0; a < 2; a++) {
		for (int b = 0; b < 2; b++) {
			ret.q[a][b] = INF;
			if (mid >= rr) {
				ret.q[a][b] = q1.q[a][b];
				continue;
			}
			if (mid < ll) {
				ret.q[a][b] = q2.q[a][b];
				continue;
			}
			if (mz[0][mid] == '.' && mz[0][mid+1] == '.')
				ret.q[a][b] = min(ret.q[a][b],q1.q[a][0]+q2.q[0][b]+1);
			if (mz[1][mid] == '.' && mz[1][mid+1] == '.')
				ret.q[a][b] = min(ret.q[a][b],q1.q[a][1]+q2.q[1][b]+1);
		}
	}
	return ret;
}

int main() {
	cin >> n >> m >> mz[0] >> mz[1];
	init(1,0,n-1);
	while (m--) {
		int v,u;
		cin >> v >> u;
		v--,u--;
		if (v%n > u%n) swap(v,u);
		int vv = v/n, uu = u/n;
		v %= n;
		u %= n;
		qq ans = query(1,0,n-1,v,u);
		cout << (ans.q[vv][uu] < INF ? ans.q[vv][uu] : -1) << '\n';
	}
}