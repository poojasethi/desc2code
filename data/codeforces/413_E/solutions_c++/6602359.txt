#include<iostream>
#include<cstdio>
#include<cstring>
#define N 200001
#define M 600001
#define inf 500000000
using namespace std;
int n,m;
int mp[3][N];
char ch[N];
struct data{int d1,d2,d3,d4;};
struct segtree{int l,r;data d;}t[M];
//左上到右上，左上到右下，左下到右上，左下到右下
data merge(data a,data b)
{
    data tmp;
    tmp.d1=min(inf,min(a.d1+b.d1,a.d2+b.d3)+1);
    tmp.d2=min(inf,min(a.d1+b.d2,a.d2+b.d4)+1);
    tmp.d3=min(inf,min(a.d3+b.d1,a.d4+b.d3)+1);
    tmp.d4=min(inf,min(a.d3+b.d2,a.d4+b.d4)+1);
    return tmp;
}
void build(int k,int l,int r) 
{
    t[k].l=l;t[k].r=r;
    if(l==r)
    {
        t[k].d.d1=t[k].d.d2=t[k].d.d3=t[k].d.d4=inf;
        if(mp[1][l])t[k].d.d1=0;
        if(mp[2][l])t[k].d.d4=0;
        if(mp[1][l]&&mp[2][l])t[k].d.d2=t[k].d.d3=1;
        return;
    }
    int mid=(l+r)>>1;
    build(k<<1,l,mid);
    build(k<<1|1,mid+1,r);
    t[k].d=merge(t[k<<1].d,t[k<<1|1].d);
}
data query(int k,int x,int y)
{
    int l=t[k].l,r=t[k].r;
    if(x==l&&y==r)return t[k].d;
    int mid=(l+r)>>1;
    if(mid>=y)
       return query(k<<1,x,y);
    else if(mid<x)
       return query(k<<1|1,x,y);
    else 
       return merge(query(k<<1,x,mid),query(k<<1|1,mid+1,y));
}
int ask(int x,int y)
{
    int a=(x-1)%n+1,b=(y-1)%n+1;
    if(a>b){swap(x,y);swap(a,b);}
    data tmp=query(1,a,b);
    if(x<=n&&y<=n)return tmp.d1;
    if(x<=n&&y>n)return tmp.d2;
    if(x>n&&y<=n)return tmp.d3;
    if(x>n&&y>n)return tmp.d4;
}
int main()
{
    scanf("%d%d",&n,&m);
    for(int i=1;i<=2;i++)
    {
        scanf("%s",ch);
        for(int j=1;j<=n;j++)
           if(ch[j-1]=='.')mp[i][j]=1;
    }
    build(1,1,n);
    for(int i=1;i<=m;i++)
    {
        int x,y;
        scanf("%d%d",&x,&y);
        int ans=ask(x,y);
        if(ans<inf)printf("%d\n",ans);
        else printf("-1\n");
    }
    return 0;
}