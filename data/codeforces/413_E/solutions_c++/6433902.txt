#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
using namespace std;
const int INF=400005;
const int X=262144;
char s1[300005],s2[300005];
long long tree[X*2][6],n,m,i,nowx,nowy,A,B;
void work(int root,int l,int r)
{
    if (tree[root][0]==l && tree[root][1]==r)
    {
        long long X=nowx,Y=nowy;
        nowx=min(X+tree[root][2],Y+tree[root][5]);
        nowy=min(Y+tree[root][3],X+tree[root][4]);
        return;
    }
    int mid=(tree[root][0]+tree[root][1])/2;
    if (l<=mid) work(root*2,l,min(mid,r));
    if (r>mid) work(root*2+1,max(l,mid+1),r);
}
void Update(int x)
{
    tree[x][2]=min(tree[x*2][2]+tree[x*2+1][2],tree[x*2][4]+tree[x*2+1][5]);
    tree[x][3]=min(tree[x*2][3]+tree[x*2+1][3],tree[x*2][5]+tree[x*2+1][4]);
    tree[x][4]=min(tree[x*2][2]+tree[x*2+1][4],tree[x*2][4]+tree[x*2+1][3]);
    tree[x][5]=min(tree[x*2][3]+tree[x*2+1][5],tree[x*2][5]+tree[x*2+1][2]);
}
int main()
{
    scanf("%d%d",&n,&m);
    scanf("%s",s1);
    scanf("%s",s2);
    for (i=X; i<2*X; i++) 
    {
        tree[i][0]=tree[i][1]=i;
        tree[i][2]=tree[i][3]=tree[i][4]=tree[i][5]=INF;
    }
    for (i=X-1; i>=1; i--)
    {
        tree[i][0]=tree[i*2][0];
        tree[i][1]=tree[i*2+1][1];
        tree[i][2]=tree[i][3]=tree[i][4]=tree[i][5]=INF;
    }
    for (i=0; i<n-1; i++) 
    {
        if (s1[i]=='.'&& s1[i+1]=='.') tree[i+X][2]=1; // zuo shang  you shang
        if (s2[i]=='.'&& s2[i+1]=='.') tree[i+X][3]=1;//  zuo xia    you  xia 
        if (s1[i]=='.'&& s2[i+1]=='.' && (s2[i]=='.' || s1[i+1]=='.')) tree[i+X][4]=2; // zuo shang you xia
        if (s2[i]=='.'&& s1[i+1]=='.' && (s2[i+1]=='.' || s1[i]=='.')) tree[i+X][5]=2; // zuo xia  you shang
    }
    
    for (i=X-1; i>=1; i--) Update(i);
    while (m--)
    {
        scanf("%d%d",&A,&B);
        if (A==B) {printf("0\n"); continue;}
        if (A+n==B || B+n==A) {printf("%d\n",s1[min(A,B)-1]=='.' && s2[(min(A,B)-1)]=='.'); continue;}
        if ((A-1)%n>(B-1)%n) swap(A,B);
        nowx=(A<=n?0:INF); nowy=(A>n?0:INF);
        work(1,(A-1)%n+X,(B-1)%n+X-1);
        if (nowx>=INF) nowx=-1; if (nowy>=INF) nowy=-1;
        printf("%d\n",(B>n?nowy:nowx));
    }
    return 0;
}
