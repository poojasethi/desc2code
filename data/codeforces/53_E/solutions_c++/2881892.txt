//CF49E; Dead Ends; State Compression DP
#include <cstdio>
#include <cstdlib>
#include <iostream>
using namespace std;
#define N 10
typedef long long ll;
ll ans = 0LL;
bool con[N + 1][N + 1];
int n, m, k, x, y, f[1 << N][1 << N], cur, to[N + 1];
void dfs(int x, int y, int c)
{
    if (x == (1 << n) - 1)
    {
        if (c == k) ++ans;
        return ;
    }
    if (!y) return ;
    int p = __builtin_ctz(y);
    int a = (to[p + 1] ^ x) & to[p + 1];
    for (int i = a, px, py, pc, t; i; i = (i - 1) & a)
    {
        px = x | i, py = (y ^ (1 << p)) | i;
        t = __builtin_popcount(i);
        pc = c - 1 + t;
        if (x == 1 && t == 1) ++pc;
        dfs(px, py, pc);
    }
    dfs(x, y ^ (1 << p), c);
}
int main()
{
    cin >> n >> m >> k;
    for (int i = 1; i <= m; ++i)
    {
        cin >> x >> y;
        con[x][y] = con[y][x];
        to[x] |= 1 << y - 1, to[y] |= 1 << x - 1;
    }
    dfs(1, 1, 1);
    cout << ans << endl;
    return 0;
}