#include<iostream>
#include<cstring>
using namespace std;

int N,M,K;
bool w[15][15];
int dp[1200][1200];
int mask[11];
int sol(int taken,int dead)
{
	int bits = __builtin_popcount(dead);
	int nbits = __builtin_popcount(taken);
	if(nbits <= 1)
		return dead == taken;
	if(bits < 2)
		return 0;
	int& res = dp[taken][dead];
	if(res != -1)
		return res;
	int cur;
	res = 0;
	for(cur = 0 ; cur < N; cur++)
		if(dead & (1 << cur))
			break;
	for(int i = 0 ; i < N; i++)
		if(w[i][cur] && (taken & (1 << i)) && (!(dead & (1 << i)) || nbits == 2))
		{
			res += sol(taken ^ (1 << cur), dead ^ (1 << cur));
			res += sol(taken ^ (1 << cur), (dead ^ (1 << cur)) | (1 << i));

		}
	return res;
}

int main()
{
	memset(dp,-1,sizeof dp);
	cin >> N >> M >> K;
	while(M--)
	{
		int a,b;
		cin >> a >> b;
		a--;b--;
		w[a][b] = w[b][a] = 1;
		mask[a] |= (1 << b);
		mask[b] |= (1 << a);
	}
	int ans = 0;
	for(int i = 0 ; i <= (1<<N) - 1; i++)
		if(__builtin_popcount(i) == K)
			ans += sol((1 << N) - 1,i);
	cout << ans / 2 << endl;
}
