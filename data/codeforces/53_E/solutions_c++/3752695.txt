#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
#define LL long long
using namespace std;
LL f[1<<10][1<<10],ans;
int next[100],d[100],last[10],top=0;
int n;
LL dp(int gr1,int gr2)
{
	if(f[gr1][gr2]+1)
		return f[gr1][gr2];
	int x;LL &ans=f[gr1][gr2];ans=0;
	for(x=1;x<=n;x++)
		if(((gr1>>x-1)&1)&&!((gr2>>x-1)&1))
			break;
	if(x>n)return ans;
	for(int i=last[x];i;i=next[i])
		if(((gr1>>d[i]-1)&1)&&((gr2>>d[i]-1)&1))
			ans+=dp(gr1^(1<<x-1),gr2)+dp(gr1^(1<<x-1),gr2^(1<<d[i]-1));
	return ans;
}
void dfs(int x,int d,int now)
{
	if(!x){ans+=dp((1<<n)-1,now);return;}
	if(x>d)dfs(x-1,d,(now<<1)+1);
	if(d)dfs(x-1,d-1,now<<1);
}
void add(int x,int y)
{
	next[++top]=last[x];last[x]=top;d[top]=y;
}
int main()
{
	memset(f,-1,sizeof(f));
	int m,k;
	scanf("%d%d%d",&n,&m,&k);
	for(int i=1;i<=m;i++)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		add(x,y);add(y,x);
	}
	for(int i=1;i<=n;i++)
		for(int j=last[i];j;j=next[j])
			f[(1<<i-1)+(1<<d[j]-1)][0]=1;
	dfs(n,k,0);
	printf("%I64d\n",ans);
	return 0;
}
   	   		 		 			  		 		