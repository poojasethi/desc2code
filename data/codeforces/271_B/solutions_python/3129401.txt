#!/usr/bin/python

import io;
import sys;
import math;
from bisect import *;
# IO Method #

def read_int():
	return map(int, raw_input().split());
	pass

# Binary Search #

def index(a, x):
    'Locate the leftmost value exactly equal to x'
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    raise ValueError

def find_lt(a, x):
    'Find rightmost value less than x'
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_le(a, x):
    'Find rightmost value less than or equal to x'
    i = bisect_right(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_gt(a, x):
    'Find leftmost value greater than x'
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

def find_ge(a, x):
    'Find leftmost item greater than or equal to x'
    i = bisect_left(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

# Self Implemented #



def sieve_prime(limit) :
	primes = [];
	visited = [True for _ in xrange(limit)];
	sqlimit = int(math.ceil(math.sqrt(limit)));
	for ii in xrange(2, sqlimit+1) :
		if visited[ii] == True : 
			for jj in xrange(ii*ii, limit, ii) :
				visited[jj] = False;
				pass
			pass
		pass
	for ii in xrange(2, limit) :
		if visited[ii] :
			primes.append(ii);
	return primes;

	pass

if __name__ == '__main__':
	
	

	primes = sieve_prime(10**5+5);

	row, col = read_int();

	matrix = [];
	for ii in xrange(row) :
		matrix.append(read_int());
		pass

	primematrix = [];

	for ii in xrange(row) :
		primematrix.append([]);
		for jj in xrange(col) :
			primematrix[ii].append(find_ge(primes, matrix[ii][jj]));
			pass
		pass

	res = 9123456789123456;
	for ii in xrange(row) :
		now = 0;
		for jj in xrange(col) :
			now += primematrix[ii][jj] - matrix[ii][jj];
			pass
		res = min(res, now);
		pass

	for ii in xrange(col) :
		now = 0;
		for jj in xrange(row) :
			now += primematrix[jj][ii] - matrix[jj][ii];
			pass
		res = min(res, now);

	print res;



	

	pass