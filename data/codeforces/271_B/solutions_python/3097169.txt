from bisect import *

def primes(n):
  low = 3
  lNum = range(low, n + 1, 2)
  iRoot= n ** 0.5
  iMid = len(lNum)
  i = 0
  m = 3
  while m < iRoot:
    if lNum[i] != 0:
      j = (m*m - low) / 2
      while (j<iMid):
        if (j >= 0):
          lNum[j] = 0
        j += m
    i += 1
    m += 2
  return [2] + [x for x in lNum if x != 0]
  
n, m = map(int, raw_input().split())
a = []
for i in range(n):
  a.append(map(int, raw_input().split()))
  
p = primes(2 * (10 ** 5))
  
min_by_row = 10**5
for i in range(n):
  count = 0
  for j in range(m):
    k = bisect_left(p, a[i][j])
    count += p[k] - a[i][j]
  min_by_row = min(min_by_row, count)

min_by_col = 10**5  
for j in range(m):
  count = 0
  for i in range(n):
    k = bisect_left(p, a[i][j])
    count += p[k] - a[i][j]
  min_by_col = min(min_by_col, count)
  
print min(min_by_row, min_by_col)