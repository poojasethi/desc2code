from Queue import * # Queue, LifoQueue, PriorityQueue
from bisect import * #bisect, insort
from datetime import * 
from collections import * #deque, Counter,OrderedDict,defaultdict
import calendar
import heapq
import math
import copy
import itertools
myread = lambda : map(int,raw_input().split())
def solver():
    n,m = myread()
    matrix = [myread() for i in range(n)]

    mymax = 100000 + 100
    
    prime = []
    is_prime = [True] * mymax
    is_prime[0] = False
    is_prime[1] = False
    for i in range(2,mymax):
        if is_prime[i]:
            prime.append(i)
            j = 2 * i
            while j < mymax:
                is_prime[j] = False
                j += i
    
    diff_matrix = [[0] * m for i in range(n)]

    for i in range(n):
        for j in range(m):
            index = bisect_left(prime,matrix[i][j])
            diff_matrix[i][j] = prime[index] - matrix[i][j]

    #print diff_matrix

    ans = sum(diff_matrix[0])
    for i in range(n):
        ans = min(sum(diff_matrix[i]),ans)
    
    for j in range(m):
        sum_gyou = 0
        for i in range(n):
            sum_gyou += diff_matrix[i][j]

        ans = min(sum_gyou,ans)

    print ans


    




if __name__ == "__main__":
    solver()
    
