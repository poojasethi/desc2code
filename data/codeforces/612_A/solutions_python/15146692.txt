#coding:utf-8
'''

You are given the string s of length n and the numbers p, q. Split the string s to pieces of length p and q.

For example, the string "Hello" for p = 2, q = 3 can be split to the two strings "Hel" and "lo" or to the two strings "He" and "llo".

Note it is allowed to split the string s to the strings only of length p or to the strings only of length q (see the second sample test).

Input
The first line contains three positive integers n, p, q (1 ≤ p, q ≤ n ≤ 100).

The second line contains the string s consists of lowercase and uppercase latin letters and digits.

Output
If it's impossible to split the string s to the strings of length p and q print the only number "-1".

Otherwise in the first line print integer k — the number of strings in partition of s.

Each of the next k lines should contain the strings in partition. Each string should be of the length p or q. The string should be in order of their appearing in string s — from left to right.

If there are several solutions print any of them.


'''
n,p,q = map(int,raw_input().split())
s = raw_input()
for i in xrange(n//p+1):
    if (n-i*p)%q == 0:
        print i+(n-i*p)/q
        for j in xrange(i):
            print s[:p]
            s = s[p:]
        while s:
            print s[:q]
            s = s[q:]
        exit()
print -1
