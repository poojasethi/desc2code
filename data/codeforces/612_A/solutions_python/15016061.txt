### TEMPLATE BEGIN

from collections import defaultdict

def read_int():
    return int(raw_input())

def read_ints():
    return (int(x) for x in raw_input().split())

def read_int_list():
    return [int(x) for x in raw_input().split()]

def read_float():
    return float(raw_input())

def read_floats():
    return (float(x) for x in raw_input().split())

def read_float_list():
    return [float(x) for x in raw_input().split()]

def read_list():
    return [x for x in raw_input().split()]

def read_str():
    return raw_input()

### TEMPLATE END
n, p, q = read_ints()
s = read_str()

npq = n / (p + q)
# np = (n % (p + q)) / p if n % p == 0 else 0
# nq = (n % (p + q)) / q if n % q == 0 else 0
    # spliting npq
i = 0
finished = False
res = ''
partitions = 0
while True:
    j = i * (p + q)
    rest = n - j
    if rest % p == 0:
        while j < n:
            partitions += 1
            res += s[j:j+p] + '\n'
            j += p
        finished = True
    elif rest % q == 0:
        while j < n:
            partitions += 1
            res += s[j:j+q] + '\n'
            j += q
        finished = True
    elif (j + p + q) <= n:
        partitions += 2
        res += s[j:j+p] + '\n'
        res += s[j+p:j+p+q] + '\n'
        i += 1
    else:
        print -1
        break
    if finished:
        print partitions
        print res[:-1]
        break
    if i > npq:
        print -1
        break
# start = npq * (p + q)
# i = 0
# while i < np:
#     j = i * p + start
#     print s[j:j+p]
#     i += 1
# start = npq * (p + q) + np * p
# i = 0
# while i < nq:
#     j = i * q + start
#     print s[j:j+q]
#     i += 1

