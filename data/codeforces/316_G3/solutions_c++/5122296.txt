#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
#include <string.h>
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define ABS(a) ((a)>0?(a):(-(a)))
#define lowbit(a) (a&(a^(a-1)))
using namespace std;
typedef long long LL;
typedef double ld;
const int NMax=51000;
struct node {
	int l;
	node *p,*t[30];
	int type[20];
}*T,pool[NMax*11];
int N,L;
char S[NMax];
vector<node*>A;
void insert(node *p,int a) {
	node *q=&pool[L++];
	A.pb(q);
	q->l=p->l+1;
	for(;p&&p->t[a]==NULL;p=p->p) p->t[a]=q;
	if(!p) q->p=T;
	else {
		node *p1=p->t[a];
		if(p->l+1==p1->l)q->p=p1;
		else {
			node *r=&pool[L++];
			A.pb(r);
			r->l=p->l+1;
			r->p=p1->p;
			//r->t[0]=p1->t[0];
			for(int i=0;i<26;i++)r->t[i]=p1->t[i];
			//for(int i=0;i<=N;i++)r->type[i]=p1->type[i];
			for(;p&&p->t[a]==p1;p=p->p)p->t[a]=r;
			p1->p=q->p=r;
		}
	}
}	
void add(char *a,int len,int l,int r,int t) {
	node *p=T;
	for(int i=0;i<len;i++) {
		insert(p,a[i]-'a');
		p=p->t[a[i]-'a'];
		p->type[t]++;
	}
}
bool cmp(node *a,node *b){
	return a->l>b->l;
}
pair<int,int>limit[20];
int main()
{
	T=&pool[L++];
	scanf("%s",S);
	add(S,strlen(S),1,strlen(S),0);
	limit[0].x=1;limit[0].y=strlen(S);
	scanf("%d",&N);
	for(int i=1;i<=N;i++) {
		int x,y;
		scanf("%s%d%d",S,&x,&y);
		limit[i].x=x;limit[i].y=y;
		add(S,strlen(S),x,y,i);
	}
	sort(A.begin(),A.end(),cmp);
	int ret=0;
	for(int i=0;i<A.size();i++) {
		int flag=1;
		for(int j=0;j<=N;j++) {
			A[i]->p->type[j]+=A[i]->type[j];
			flag=flag && (limit[j].x<=A[i]->type[j]&&A[i]->type[j]<=limit[j].y);
		}
		if(flag) ret+=A[i]->l-A[i]->p->l;
	}
	printf("%d\n",ret);
	getchar();getchar();getchar();getchar();
	return 0;
}
