#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 1000000;
int ch[N][27], len[N], cnt[N][11], fail[N];
int tail, tot, root;
void extend(int c, int id = -1) {
	int p = tail;
	tail = ++ tot;
	len[tail] = len[p] + 1;
	if(~id)	cnt[tail][id] = 1;
	while(~p && !ch[p][c])
		ch[p][c] = tail, p = fail[p];
	if(p == -1) {
		fail[tail] = root;
	} else if(len[ch[p][c]] + 1 == len[p]){
		fail[tail] = ch[p][c];
	} else {
		len[++ tot] = len[p] + 1;
		int tmp = ch[p][c];
		memcpy(ch[tot], ch[tmp], sizeof ch[tmp]);
		fail[tot] = fail[tmp];
		fail[tmp] = fail[tail] = tot;
		while(~p && ch[p][c] == tmp)
			ch[p][c] = tot, p = fail[p];
	}
}
char buf[N];
std::vector<int> G[N];
int answer, n;
int L[N], R[N];
void dfs(int u) {
	rep(_, G[u].size()) {
		int v = G[u][_];
		dfs(v);
		rep(i, n + 1)
			cnt[u][i] += cnt[v][i];
	}
	bool can = true;
	rep(i, n) {
		if(L[i] > cnt[u][i+1] || cnt[u][i+1] > R[i])
			can = false;
	}
	if(can && cnt[u][0])
		answer += len[u] - len[fail[u]];
}
int main() {
	tot = root = 0;
	fail[root] = -1;
	scanf("%s", buf);
	for(int i = 0; buf[i]; i ++)
		extend(buf[i] - 'a', 0);
	extend(26);
	scanf("%d", &n);
	rep(_, n) {
		scanf("%s%d%d", buf, &L[_], &R[_]);
		for(int i = 0; buf[i]; i ++)
			extend(buf[i] - 'a', _ + 1);
		extend(26);
	}
	for(int i = 1; i <= tot; i ++)
		G[fail[i]].push_back(i);
	dfs(root);
	printf("%d\n", answer);
	return 0;
}

