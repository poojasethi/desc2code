#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
using namespace std;
#define N 1100050
#define M 27
struct State
 {State *pre,*go[M],*fi,*ne;int val,ri[11];};
State statePool[N],*root,*last,*cur,*li[N];
int n,m,ans,c[M][2];char b[N];
void extend(int x,int y)
 {
 	State *p=last,*np=cur++;
 	if (y!=-1) np->ri[y]++;np->val=p->val+1;
 	while (p!=NULL&&!p->go[x])
 	  p->go[x]=np,p=p->pre;
 	if (!p)
 	  np->pre=root; else
 	 {
 	 	State *q=p->go[x];
 	 	if (q->val==p->val+1)
 	 	  np->pre=q; else
 	 	 {
 	 	 	State *nq=cur++;
 	 	 	memcpy(nq->go,q->go,sizeof nq->go);
 	 	 	nq->val=p->val+1;
 	 	 	nq->pre=q->pre;
 	 	 	q->pre=np->pre=nq;
 	 	 	while (p!=NULL&&p->go[x]==q)
 	 	 	  p->go[x]=nq,p=p->pre;
 	 	 }
 	 }
 	last=np;
 }
void Set_up(int x)
 {for (char *i=b;*i;i++) extend(*i-'a',x);extend(26,-1);}
void Calc_Ri()
 {
 	State *k=root;int le=1,ri=1;
 	for (k++;k!=cur;k++)
 	  k->ne=k->pre->fi,k->pre->fi=k;
 	li[1]=root;
 	for (;le<=ri;le++)
 	 for (State *i=li[le]->fi;i!=NULL;i=i->ne)
 	   li[++ri]=i;
 	for (int i=ri;i>1;i--)
 	 for (int j=0;j<=n;j++)
 	   li[i]->pre->ri[j]+=li[i]->ri[j];
 }
void Solve()
 {
 	int cnt=0;
 	Calc_Ri();
 	for (++root;root!=cur;root++)
 	 if (root->ri[0])
 	  {
 	  	 bool flag=true;
 	  	 for (int i=1;i<=n&&flag;i++)
 	  	   flag&=root->ri[i]>=c[i][0]&&root->ri[i]<=c[i][1];
 	  	 if (flag)
 	  	   ans+=root->val-root->pre->val;
 	  }
 }
int main()
 {
 	cur=statePool;root=last=cur++;
 	scanf("%s%d",b,&n);Set_up(0);
 	for (int i=1;i<=n;i++)
 	  scanf("%s%d%d",b,&c[i][0],&c[i][1]),Set_up(i);
 	Solve();
 	cout <<ans<<endl;
 	return 0;
 }