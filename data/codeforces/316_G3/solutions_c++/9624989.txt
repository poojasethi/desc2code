#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
using namespace std;
const int N = 11;
const int P = 26;
const int T = 38;
const int M = 50010;
const int MAXM = 600000;
int n,tot,l[N],r[N],zl[N];
char s[M],t[N][M];
long long ans;
int dp[MAXM][N];
bool vis[MAXM];
struct Node
{
	int len,num,i;
	Node *ch[T],*fa;
	Node()
	{
		len=0;
		fa=0;
		for(i=0;i<T;i++)
			ch[i]=0;
	}
}*last,*root,*pool[MAXM];
void Add(int c)
{
	Node *np=pool[++tot]=new Node;
	np->num=tot;
	np->len=last->len+1;
	Node *p=last;
	while(p && !p->ch[c])
	{
		p->ch[c]=np;
		p=p->fa;
	}
	if(!p)
		np->fa=root;
	else
	{
		Node *q=p->ch[c];
		if(q->len!=p->len+1)
		{
			Node *nq=pool[++tot]=new Node;
			nq->num=tot;
			nq->len=p->len+1;
			for(int i=0;i<T;i++)
				nq->ch[i]=q->ch[i];
			nq->fa=q->fa;
			q->fa=np->fa=nq;
			while(p && p->ch[c]==q)
			{
				p->ch[c]=nq;
				p=p->fa;
			}
		}
		else
			np->fa=q;
	}
	last=np;
}
void DFS(int u)
{
	if(vis[u])
		return;
	int i,j;
	vis[u]=1;
	for(i=0;i<=n;i++)
	{
		if(pool[u]->ch[P+i])
			dp[u][i]=1;
	}
	for(i=0;i<P;i++)
	{
		if(pool[u]->ch[i])
		{
			int v=pool[u]->ch[i]->num;
			DFS(v);
			for(j=0;j<=n;j++)
				dp[u][j]+=dp[v][j];
		}
	}
	if(u && dp[u][0])
	{
		bool flag=1;
		for(i=1;i<=n && flag;i++)
			flag=(l[i]<=dp[u][i] && dp[u][i]<=r[i]);
		if(flag)
			ans+=pool[u]->len-pool[u]->fa->len;
	}
}
int main()
{
	last=root=pool[tot]=new Node;
	scanf("%s",s);
	int i,j;
	int m=strlen(s);
	for(i=0;i<m;i++)
		Add(s[i]-'a');
	Add(P);
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		scanf("%s%d%d",t[i],l+i,r+i);
		zl[i]=strlen(t[i]);
		for(j=0;j<zl[i];j++)
			Add(t[i][j]-'a');
		Add(P+i);
	}
	ans=0;
	DFS(0);
	cout<<ans<<endl;
	return 0;
}
