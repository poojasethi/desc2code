#include <stdio.h>
#include <string.h>
#include <queue>
#include <algorithm>
using namespace std;
struct node
{
	int to[27];
	int par, l, r[12];
} ns[1010101];
int root = 1, nn = 1, last = 1;
void add(int x, int lb)
{
	int p = last;
	int np = ++nn;
	last = np;
	ns[np].l = ns[p].l + 1;
	ns[np].r[lb] = 1;
	while (p && !ns[p].to[x])
		ns[p].to[x] = np, p = ns[p].par;
	if (!p)
		ns[np].par = root;
	else
	{
		int q = ns[p].to[x];
		if (ns[q].l == ns[p].l + 1)
			ns[np].par = q;
		else
		{
			int nq = ++nn;
			memcpy(ns[nq].to, ns[q].to, sizeof(ns[q].to));
			ns[nq].l = ns[p].l + 1;
			ns[nq].par = ns[q].par;
			ns[q].par = ns[np].par = nq;
			while (p && ns[p].to[x] == q)
				ns[p].to[x] = nq, p = ns[p].par;
		}
	}
}
void add(char *a, int l, int lb)
{
	for (int i = 0; i < l; i++)
		add(a[i] - 'a', lb);
	add(26, 11);
}
int rd[1010101];
int l[11], r[11];
char bf[50505];
int main()
{
	int n;
	scanf("%s%d", bf, &n);
	add(bf, strlen(bf), 0);
	for (int i = 1; i <= n; i++)
	{
		scanf("%s%d%d", bf, l + i, r + i);
		add(bf, strlen(bf), i);
	}
	for (int i = 2; i <= nn; i++)
		rd[ns[i].par]++;
	queue<int> q;
	for (int i = 2; i <= nn; i++)
		if (!rd[i])
			q.push(i);
	long long ans = 0;
	while (!q.empty())
	{
		int nw = q.front();
		q.pop();
		if (nw == root)
			continue;
		if (!--rd[ns[nw].par])
			q.push(ns[nw].par);
		for (int i = 0; i <= n; i++)
			ns[ns[nw].par].r[i] += ns[nw].r[i];
		bool fl = ns[nw].r[0];
		for (int i = 1; fl && i <= n; i++)
			if (ns[nw].r[i] > r[i] || ns[nw].r[i] < l[i])
				fl = 0;
		if (fl)
			ans += ns[nw].l - ns[ns[nw].par].l;
	}
	printf("%I64d", ans);
	return 0;
}
