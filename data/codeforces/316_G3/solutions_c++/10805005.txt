#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
using namespace std;
const int LEN=5e4+200;
const int N(5e5+2000);
const int T(12);
char a[T][LEN];
struct hh{
    hh* par,*son[26];
    int val,nl[T];
}pool[N],*root,*last;
int n,mx,tot,tot1,l[T],r[T],L[T],sum[N],top[N];
inline hh* newnode(int _){
    hh* x=pool+(tot++);
    x->val=_;mx=max(mx,x->val);
    return x;
}
inline hh* insert(int x){
    hh* p=last,*np=newnode(p->val+1);
    for(;p&&!p->son[x];p=p->par)p->son[x]=np;
    if(!p)np->par=root;
    else{
        hh* q=p->son[x];
        if(q->val==p->val+1)np->par=q;
        else{
            hh* nq=newnode(p->val+1);
            nq->par=q->par;
            memcpy(nq->son,q->son,sizeof q->son);
            q->par=np->par=nq;
            for(;p&&p->son[x]==q;p=p->par)p->son[x]=nq;
        }
    }
    return np;
}
int main(){
    last=root=newnode(0);
    scanf("%s",a[0]);L[0]=strlen(a[0]);
    scanf("%d",&n);
    for(int i(1);i<=n;i++)scanf("%s",a[i]),L[i]=strlen(a[i]),scanf("%d%d",l+i,r+i);
    for(int t(0);t<=n;t++){
        last=root;
        for(int i(0);i<L[t];i++)
            last=insert(a[t][i]-'a');
    }
    for(int i(1);i<tot;i++)sum[pool[i].val]++;
    for(int i(1);i<=mx;i++)sum[i]+=sum[i-1];
    for(int i(tot-1);i>=1;i--)top[--sum[pool[i].val]]=i;
    for(int t(0);t<=n;t++){
        hh* now=root;
        for(int i(0);i<L[t];i++){
            now=now->son[a[t][i]-'a'];
            now->nl[t]=1;
        }
        for(int i(tot-1);i>=1;i--){
            now=pool+top[i];
            if(now->par)
                now->par->nl[t]+=now->nl[t];
        }
    }
    long long ans=0;
    for(int i(1);i<tot;i++){
        hh *now=pool+i;
        if(now->nl[0]){
            bool haha=0;
            for(int t(1);t<=n&&!haha;t++)
                if(now->nl[t]<l[t]||now->nl[t]>r[t])
                    haha=1;
            if(!haha)ans+=now->val-now->par->val;
        }
    }
    cout<<ans<<endl;
    return 0;
}