#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

typedef long long ll;

const int N = 50005 , inf = (int)1e9;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define fd(i , st , en) for (int i = st; i >= en; i--)
#define Me(x , y) memset(x , y , sizeof(x))

struct _node{
	int len , state , flag , num , fail , deer;
	_node *To[26] , *p;
}t[N * 22];

ll ans;
_node *a[N * 11] , *qu[N * 22];
int n , tot , times , state , qu_n;
char ch[N];

void Ins(char *ch){
	int n = strlen(ch + 1); _node *last = t + 1;
	fo (i , 1 , n){
		int x = ch[i] - 'a';
		if (last->To[x] && last->To[x]->len == last->len + 1)
			last = last->To[x];
		else{
			_node *p = last; last = t + ++tot; last->len = p->len + 1;
			for (; p && !p->To[x]; p = p->p) p->To[x] = last;
			if (!p)
				last->p = t + 1;
			else{
				_node *r = p->To[x];
				if (r->len == p->len + 1)
					if (last->len == r->len) last = r; else	last->p = r;
				else{
					_node *q = t + ++tot; *q = *r; q->len = p->len + 1; r->p = last->p = q;
			 		if (last->len == q->len) last = q;
					for (; p && p->To[x] == r; p = p->p) p->To[x] = q;
				}
			}
		}
		a[i] = last;
	}
	qu_n = n;
}

void Calc(int l , int r , int p){
	times++;
	fo (i , 1 , qu_n){
		a[i]->flag = times; a[i]->num = 1; a[i]->deer = 0;
	}
	t[1].flag = times; t[1].deer = 1;
	fo (i , 1 , qu_n){
		_node *p = a[i]->p;
		for (; p->flag != times; p = p->p){
			p->deer = 1; p->flag = times; p->num = 0;
		}
		p->deer++;
	}
	int be = 0 , en = 0;
	fo (i , 1 , qu_n)
		if (!a[i]->deer) qu[++en] = a[i];
	while (be < en){
		++be;
		if (!--qu[be]->p->deer) qu[++en] = qu[be]->p;
		qu[be]->p->num += qu[be]->num;
		if (l <= qu[be]->num && qu[be]->num <= r) qu[be]->state |= 1 << p; else qu[be]->fail = 1;
	}
}

int main(){
	scanf("%s" , ch + 1); tot = 1; Ins(ch); Calc(1 , inf , 0);
	int x , y; scanf("%d" , &n);
	fo (i , 1 , n){
		scanf("%s%d%d" , ch + 1 , &x , &y);
		Ins(ch); Calc(x , y , i);
		if (!x) state |= 1 << i;
	}
	fo (i , 2 , tot)
		if ((t[i].state | state) == (1 << n + 1) - 1 && !t[i].fail)
			ans += t[i].len - t[i].p->len;
	printf("%I64d\n" , ans);
	return 0;
}
