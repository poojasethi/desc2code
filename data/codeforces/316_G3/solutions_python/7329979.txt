#include <iostream>
#include <cstring>

using namespace std;

const int MaxN = 500100;

struct Node{int len,nxt[27],fa;}pool[MaxN*2];

int tail=1,ed=1,op=1,n;
int cnt[MaxN*2][11],d[MaxN*2];
int q[MaxN*2],l[11],r[11],S,T;
long long ans=0;
char s[MaxN];

void extend(int ch,int len,int num){
	int p=ed,np=ed=++tail;
	pool[np].len=len;cnt[np][num]++;
	for(;p && !pool[p].nxt[ch];p=pool[p].fa) pool[p].nxt[ch]=np;
	if(!p) pool[np].fa=op;
	else if(pool[pool[p].nxt[ch]].len==pool[p].len+1) pool[np].fa=pool[p].nxt[ch];
	else{
		int q=pool[p].nxt[ch],r=++tail;pool[r]=pool[q];
		pool[r].len=pool[p].len+1;pool[q].fa=pool[np].fa=r;
		for(;p && pool[p].nxt[ch]==q;p=pool[p].fa) pool[p].nxt[ch]=r;
	}
}

int check(int p){
	if(!cnt[p][0]) return 0;
	for(int i=1;i<=n;i++) if(cnt[p][i]<l[i] || cnt[p][i]>r[i]) return 0;
	return 1;
}
int main()
{
	int len=0;
	ios::sync_with_stdio(false);
	cin>>s+1>>n;len=strlen(s+1);
	for(int i=1,j;i<=n;i++) cin>>s+len+2>>l[i]>>r[i],len+=strlen(s+len+2)+1;
	for(int i=1,t=0;i<=len;i++) s[i] ? extend(s[i]-'a'+1,i,t) : extend(0,i,++t);
	for(int i=1;i<=tail;i++) d[pool[i].fa]++;
	for(int i=1;i<=tail;i++) if(!d[i]) q[++T]=i;
	for(S=1;S<=T;S++){
		int x=q[S],y=pool[x].fa;ans+=(pool[x].len-pool[y].len)*check(x);
		cnt[y][0]|=cnt[x][0];for(int i=1;i<=n;i++) cnt[y][i]+=cnt[x][i];
		if(!--d[y]) q[++T]=y;
	}
	cout<<ans<<endl;
	return 0;
}
