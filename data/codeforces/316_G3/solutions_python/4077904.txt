#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<fstream>
#include<map>
#include<ctime>
#include<set>
#include<queue>
#include<cmath>
#include<vector>
#include<bitset>
#include<functional>
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define REP(i,l,r) for((i)=(l);(i)<=(r);++(i))
#define REP2(i,l,r) for((i)=(l);(i)!=(r);++(i))
using namespace std;

typedef long long LL;
typedef double ld;

const int MAX=200000+10;
const int ALPHA=30;
const int NUM=12;

int T;
char a[MAX];

struct Node
{
    Node* ch[ALPHA],*p;
    int cc[NUM];
    int len;
    Node()
    {
        memset(ch,0,sizeof ch);
        p=0;
        len=0;
        memset(cc,0,sizeof cc);
    }
}*Root=new Node;
int L[NUM],R[NUM];
vector<Node*> all;

int cmp(Node* a,Node* b)
{
    return a->len<b->len;
}

void add(Node* v,int id,int len)
{
    /*if(v->ch[id] && v->ch[id]->len==len)
        return;*/
    Node* u=new Node;
    all.pb(u);
    u->len=len;
    for(;v && !v->ch[id];v=v->p)
        v->ch[id]=u;
    if(!v)
        u->p=Root;
    else
    {
        Node* nu=v->ch[id];
        if(nu->len==v->len+1)
            u->p=nu;
        else
        {
            Node* nnu=new Node;
            all.pb(nnu);
            *nnu=*nu;
            memset(nnu->cc,0,sizeof nnu->cc);
            u->p=nnu;
            nu->p=nnu;
            nnu->len=v->len+1;
            for(;v && v->ch[id]==nu;v=v->p)
                v->ch[id]=nnu;
        }
    }
    return;
}

void init(char* a,int n,int l,int r,int lab)
{
    L[lab]=l;
    R[lab]=r;
    int i;
    Node* now=Root;
    REP(i,1,n)
    {
        int id=a[i]-'a';
        add(now,id,i);
        now=now->ch[id];
        now->cc[lab]=1;
    }
}

int main()
{
#ifndef ONLINE_JUDGE
    //freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
    int i,x,y;
    scanf("%s",a+1);
    init(a,strlen(a+1),1,strlen(a+1),0);
    scanf("%d",&T);
    REP(i,1,T)
    {
        scanf("%s%d%d",a+1,&x,&y);
        init(a,strlen(a+1),x,y,i);
    }
    int j;
    LL ans=0;
    sort(all.begin(),all.end(),cmp);
    for(i=(int)all.size()-1;i>=0;--i)
    {
        int flag=1;
        REP(j,0,T)
        {
            all[i]->p->cc[j]+=all[i]->cc[j];
            flag=flag && (all[i]->cc[j]<=R[j] && all[i]->cc[j]>=L[j]);
        }
        if(flag)
            ans+=all[i]->len-all[i]->p->len;
    }
    cout<<ans<<endl;
    return 0;
}