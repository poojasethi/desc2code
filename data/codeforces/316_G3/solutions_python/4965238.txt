#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>

using namespace std;

#define FOR(I, A, B) for (int I = int(A); I < int(B); ++I)
#define CPY(A, B) memcpy(A, B, sizeof(B))

const int LEN(50010), N(12), C(27);

int tail, t, n, ans;
char s[LEN], p[LEN];
int le[N], ri[N];
int g[2 * N * LEN][C];
int cnt[2 * N * LEN][N];
int fa[2 * N * LEN], l[2 * N * LEN], maxl[2 * N * LEN];
vector<int> tr[2 * N * LEN];

void add(int c) {
	int p = tail, np = ++t;
	l[np] = l[p] + 1;
	for (; p && !g[p][c]; p = fa[p]) g[p][c] = np;
	tail = np;
	if (!p) fa[np] = 1;
	else if (l[p] + 1 == l[g[p][c]]) fa[np] = g[p][c];
	else {
		int q = g[p][c], r = ++t;
		CPY(g[r], g[q]);
		fa[r] = fa[q];
		l[r] = l[p] + 1;
		fa[q] = fa[np] = r;
		for (; p && g[p][c] == q; p = fa[p]) g[p][c] = r;
	}
}

void dfs(int x) {
	FOR(i, 0, tr[x].size()) {
		dfs(tr[x][i]);
		maxl[x] = max(maxl[x], maxl[tr[x][i]]);
		FOR(j, 0, n)
			cnt[x][j] += cnt[tr[x][i]][j];
	}
	maxl[x] = min(maxl[x], l[x]);
	bool flag = true;
	FOR(i, 0, n)
		if (le[i] > cnt[x][i] || cnt[x][i] > ri[i]) {
			flag = false; break;
		}
	if (flag) 
		ans += max(0, maxl[x] - l[fa[x]]);
}

int main() {
	int m;
	//freopen("in.txt", "r", stdin);
	scanf("%s%d", s, &n);
	tail = t = 1;
	FOR(i, 0, n) {
		scanf("%s%d%d", p, &le[i], &ri[i]);
		m = strlen(p);
		FOR(j, 0, m) {
			add(p[j] - 'a');
			++cnt[tail][i];
		}
		add(26);
	}
	m = strlen(s);
	FOR(i, 0, m)
		add(s[i] - 'a');
	FOR(i, 2, t + 1)
		tr[fa[i]].push_back(i);
	m = strlen(s);
	int x = 0, len = 0;
	FOR(i, 0, m) {
		if (!x) x = 1;
		for (; x && !g[x][s[i] - 'a']; x = fa[x]);
		len = min(len, l[x]); x = g[x][s[i] - 'a'];
		if (x == 0) continue;
		++len;
		maxl[x] = max(maxl[x], len);
	}
	dfs(1);
	printf("%d\n", ans);
	return 0;
}
