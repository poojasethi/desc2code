#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <vector>
using namespace std;

#define mxn 400005
#define mod 1000000007
#define LL long long

int son[mxn][37], pre[mxn], stp[mxn], last, tot, n;
int l[mxn], r[mxn], dp[mxn][11];
bool vis[mxn];
char s[mxn];
LL ans;

inline void Extend( int x ){
	stp[++tot] = stp[last] + 1;
	int p = last, np = tot;
	for( ; p != -1 && son[p][x] == 0; p = pre[p] )
		son[p][x] = np;
	if( p == -1 ) pre[np] = 0;
	else {
		int q = son[p][x];
		if( stp[q] != stp[p] + 1 ){
			stp[++tot] = stp[p] + 1;
			int nq = tot;
			memcpy( son[nq], son[q], sizeof(son[q]) );
			pre[nq] = pre[q];
			pre[q] = pre[np] = nq;
			for( ; son[p][x] == q; p = pre[p] )
				son[p][x] = nq;
		}
		else pre[np] = q;
	}
	last = np;
}

void dfs( int u ) {
	if( vis[u] ) return ;
	vis[u] = true;
	for( int i = 0; i <= n; ++i )
		if( son[u][26+i] )
			dp[u][i] = 1;
	for( int i = 0; i < 26; ++i ) {
		if( son[u][i] ) {
			int v = son[u][i];
			dfs( v );
			for( int j = 0; j <= n; ++j )
				dp[u][j] += dp[v][j];
		}
	}
	if( u && dp[u][0] ) {
		bool ok = true;
		for( int i = 1; i <= n; ++i )
			if( dp[u][i] < l[i] || dp[u][i] > r[i] )
				ok = false;
		if( ok ) ans += stp[u] - stp[pre[u]];
	}
}

int main()
{
	pre[0] = -1;
	int len;
	scanf( "%s", s );
	len = strlen(s);
	for( int i = 0; i < len; ++i ) Extend( s[i] - 'a' );
	Extend(26);
	scanf( "%d", &n );
	for( int i = 1; i <= n; ++i ) {
		scanf( "%s%d%d", s, l + i, r + i );
		len = strlen(s);
		for( int j = 0; j < len; ++j ) Extend( s[j] - 'a' );
		Extend(26 + i);
	}
	dfs(0);
	cout << ans << endl;
    return 0;
}