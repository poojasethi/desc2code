#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
const int LCM = 2520;
const int N = 33;

int d[N];
int id[LCM+1];
ll dp[N][50][LCM+1];

ll dfs(int len,int lcm,int sum,bool fp){
	if (!len)
		return sum%lcm==0? 1:0;
	if ( !fp && dp[len][id[lcm]][sum]!=-1)
		return dp[len][id[lcm]][sum];
	ll ret=0;
	int fpmax=fp? d[len]:9;
	for (int i=0;i<=fpmax;i++){
		int tlcm= i==0? lcm:lcm/__gcd(lcm,i)*i;
		int tsum= (sum*10+i)%LCM;
		ret+=dfs(len-1,tlcm,tsum,fp&&i==fpmax);
	}
	if (!fp) dp[len][id[lcm]][sum]=ret;
	return ret;
}

ll calc(ll n){
	int len=0;
	while(n){
		d[++len]=n%10;
		n/=10;
	}
	return dfs(len,1,0,true);
}

void init()
{
	memset(dp,-1,sizeof(dp));
	int cnt=0;
	for (int i=1;i<=LCM;i++)
		if (LCM%i==0) id[i]=cnt++;
}

int main()
{
	int T;
	scanf("%d",&T);
	init();
	ll a,b;
	while(T--){
		scanf("%I64d %I64d",&a,&b);
		printf("%I64d\n",calc(b)-calc(a-1));
	}
	return 0;
}

    		   			 	    	 	 		 	