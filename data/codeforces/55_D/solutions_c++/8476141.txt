#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

typedef long long LL;

int __lcm[2527];
char num[27];
LL dp[20][2527][60];

LL dfs(int p, int mod, int lcm, int limit)
{
	if (p<0) return (mod % lcm == 0);
	if (!limit && ~dp[p][mod][__lcm[lcm]]) return dp[p][mod][__lcm[lcm]];
	int e = limit ? num[p] : 9;
	LL rslt = 0;
	int mod10 = mod*10;
	for(int i=0; i<=e; ++i)
		rslt += dfs(p-1, (mod10 + i) % 2520, i!=0? i*lcm/__gcd(i,lcm) : lcm, limit && i==e);
	if (!limit) dp[p][mod][__lcm[lcm]] = rslt;
	return rslt;
}

LL solve(LL n)
{
	int t = 0;
	do num[t++] = n%10; while(n/=10);
	return dfs(t-1, 0, 1, 1);
}

int main(void)
{
	int T;
	scanf("%d", &T);
	for(int i=1, j = 0; i<=2520; ++i)
		if (2520 % i == 0) __lcm[i] = j++;
	memset(dp, -1, sizeof dp);
	for(int t = 1; t<=T; ++t) {
		LL l, r;
		scanf("%I64d%I64d", &l, &r);
		printf("%I64d\n", solve(r) - solve(l-1));
	}	
}
