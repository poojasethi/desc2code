#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sys
import math
import random
import operator
from fractions import Fraction, gcd
from decimal import Decimal, getcontext
from itertools import product, permutations, combinations
from Queue import Queue, PriorityQueue
from collections import deque, defaultdict, Counter


MODS = [
    random.randint(1 << 30, 1 << 31)
    for _ in xrange(2)
]


digits = dict(a=0, b=1, c=2)


def ton(s):
    return [digits[c] for c in s]


def hashik(ds, m):
    res = 0
    for c in ds:
        res = res * 3 + c
        res %= m
    return res


added = set()
mxlen = 0
n, Q = map(int, raw_input().split())
dbs = [{} for m in MODS]
for _ in xrange(n):
    s = sys.stdin.readline()[:-1]
    if s in added:
        continue
    added.add(s)

    ds = ton(s)
    mxlen = max(mxlen, len(ds))
    for dbm, m in zip(dbs, MODS):
        if len(ds) not in dbm:
            dbm[len(ds)] = set()
        dbm[len(ds)].add(hashik(ds, m))

pow3 = {}
for mod in MODS:
    lst = pow3[mod] = [0] * (mxlen + 1)
    r = 1
    for i in xrange(mxlen + 1):
        lst[i] = r
        r = (r * 3) % mod


def check(ds):
    xxx = [(m, hashik(ds, m), dbm) for dbm, m in zip(dbs, MODS)]
    for i in xrange(len(ds)):
        dist = len(ds) - 1 - i
        for m, h0, dbm in xxx:
            dbm = dbm.get(len(ds), ())
            if not dbm:
                break
            # mult = pow(3, dist, m)
            mult = pow3[m][dist]
            h0 -= mult * ds[i]
            h0 %= m
            for c in (0, 1, 2):
                if c == ds[i]:
                    continue
                if (h0 + mult * c) % m in dbm:
                    # print >>sys.stderr, "MATCH", i, c
                    break
            else:
                break
        else:
            return 1
    return 0


cached = {}
for _ in xrange(Q):
    s = sys.stdin.readline()[:-1]
    if not s in cached:
        cached[s] = check(ton(s))
    res = cached[s]
    # try:
    #     res = cached[s]
    # except KeyError:
    #     res = cached[s] = check(ton(s))
    # res = check(ton(s))
    sys.stdout.write("YES\n" if res else "NO\n")
