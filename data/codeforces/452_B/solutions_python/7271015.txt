import math


def dist(p, q):
    return math.sqrt((p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2)


def solve(n, m):

    def f(l):
        ret = 0.0
        for i in range(1, len(l)):
            ret += dist(l[i - 1], l[i])
        return ret

    if n == 0:
        return [(0, 1), (0, m), (0, 0), (0, m - 1)]
    elif m == 0:
        return [(1, 0), (n, 0), (0, 0), (n - 1, 0)]
    elif n == 1 and m == 1:
        return [(0, 0), (1, 1), (1, 0), (0, 1)]
    else:
        return max([(0, 0), (n, m), (0, m), (n, 0)],
                [(0, 0), (n, m), (n, 0), (0, m)],
                [(1, 0), (n, m), (0, 0), (n - 1, m)],
                [(0, 1), (n, m), (0, 0), (n, m - 1)],
                key=f)


if __name__ == '__main__':
    n, m = [int(x) for x in raw_input().split()]
    for p in solve(n, m):
        print '%d %d' % p
