import math

if __name__ == "__main__":
    n, m = map(int, raw_input().split())

    points = list(set(filter(lambda x: x[0] <= n and x[1] <= m and x[0] >= 0 and x[1] >= 0, [(0, 0), (1, 0), (0, 1), (n, 0), (n - 1, 0), (n, 1), (
        0, m), (0, m - 1), (1, m), (n, m), (n - 1, m), (n, m - 1)])))

    used = [False] * len(points)

    ans = 0
    ans_p = []
    ans_t = tuple()

    def dist(x, y):
        if x < 0 or y < 0:
            return 0
        return (points[x][0] - points[y][0]) ** 2 + (points[x][1] - points[y][1]) ** 2

    def solve(r):
        global ans_p
        if len(ans_p) == 4:
            global ans
            global ans_t
            if r > ans:
                ans = r
                ans_t = tuple(ans_p)
            return None
        for x in xrange(len(points)):
            if x not in ans_p:
                prev = ans_p[len(ans_p) - 1] if ans_p else -1
                ans_p.append(x)
                solve(r + dist(prev, x))
                ans_p.pop()

    solve(0)

    for i in ans_t:
        print points[i][0], points[i][1]
