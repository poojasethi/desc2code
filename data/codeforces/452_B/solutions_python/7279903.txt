#!/usr/bin/python
import sys

def Ni(): return tuple(map(int, sys.stdin.readline().split()))

n, m = Ni()

Flipped = False

#assert n <= m
if m < n:
    m, n = n, m
    Flipped = True

assert n <= m

LC = set([(0, 0), (0, min(1, m)), (min(1, n), 0)])
RC = set([(n, m), (n, max(m-1, 0)), (max(n-1, 0), m)])
#print LC
#print RC

from math import sqrt
from itertools import combinations

def d((x0, y0), (x1, y1)):
    return sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1))

def total(p0, p1, p2, p3):
    return d(p0, p1) + d(p1, p2) + d(p2, p3)

best = None

if n > 0:
    best = [(0,0), (n, m), (n, 0), (0, m)]
    bestDistance = total(*best)

for p0 in LC:
    for p1 in RC - set((p0,)):
        for p2 in LC - set((p0,p1,)):
            for p3 in RC - set((p0,p1,p2)):
                thisD = total(p0, p1, p2, p3)
                #print p0, p1, p2, p3, thisD
                if best == None or thisD > bestDistance:
                    bestDistance = thisD
                    best = [ p0, p1, p2, p3 ]

#print best

for x, y in best:
    if Flipped:
        print y, x
    else:
        print x, y
