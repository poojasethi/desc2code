import sys


def siftup(ind):
    global tree
    while (ind != 1) and (frendly[tree[ind]] < frendly[tree[ind // 2]]):
        tree[ind], tree[ind // 2] = tree[ind // 2], tree[ind]
        ind //= 2
    

def siftdown(ind):
    global tree
    while (ind * 2 + 1 <= len(tree) - 1) and (frendly[tree[ind]] > frendly[tree[ind * 2]] or frendly[tree[ind]] > frendly[tree[ind * 2 + 1]]):
        if frendly[tree[ind * 2]] > frendly[tree[ind * 2 + 1]]:
            tree[ind], tree[ind * 2 + 1] = tree[ind * 2 + 1], tree[ind]
            ind = ind * 2 + 1
        else:
            tree[ind], tree[ind * 2] = tree[ind * 2], tree[ind]
            ind *= 2
    if (ind * 2 <= len(tree) - 1) and (frendly[tree[ind]] > frendly[tree[ind * 2]]):
        tree[ind], tree[ind * 2] = tree[ind * 2], tree[ind]
        ind *= 2
        
    
n, k, q = map(int, sys.stdin.readline().split())
frendly = [0] + list(map(int, sys.stdin.readline().split()))
bearsout = set([i for i in range(1, n + 1)])
tree = [0]
for i in range(q):
    lab, b = map(int, sys.stdin.readline().split())
    if lab == 1:
        if len(tree) > k:
            if frendly[b] > frendly[tree[1]]:
                bearsout.discard(b)
                bearsout.add(tree[1])
                tree[1] = b
                siftdown(1)
        else:
            tree.append(b)
            bearsout.discard(b)
            siftup(len(tree) - 1)
    else:
        if b in bearsout:
            sys.stdout.write('NO' + '\n')
        else:
            sys.stdout.write('YES' + '\n')#@