# -*- coding: UTF-8 -*-

# from itertools import *
# from collections import defaultdict

# def gcd(a,b):
#     while b > 0: a,b = b, a%b
#     return a

# def baseN(num,b,numerals="0123456789abcdefghijklmnopqrstuvwxyz"):
#     return ((num == 0) and  "0" ) or ( baseN(num // b, b).lstrip("0") + numerals[num % b])

# T = input()
# St = raw_input()
T, memory_s = map(int, raw_input().split())
comms = [ raw_input().split() for i in xrange(T) ]
ident = 1
memory = "0"*memory_s
memory_pointers = {}

for i in comms:
    if i[0] == "alloc":
        size = int(i[1])
        try:
            point = memory.index("0"*size)
            memory = memory[:point]+chr(ident)*size + memory[point+size:]
            memory_pointers[ident] = [point, size]
            print ident
            ident += 1
        except ValueError:
            print "NULL"
            
    if i[0] == "erase":
        cval = int(i[1])
        try:
            point, size = memory_pointers[cval]
            memory = memory[:point] + "0"*size+memory[point+size:]
            del memory_pointers[cval]
        except KeyError:
            print "ILLEGAL_ERASE_ARGUMENT"
            
    if i[0] == "defragment":
        def_memory = "".join(memory.split("0"))
        memory = def_memory + "0"*(memory_s-len(def_memory))
        for i in memory_pointers.keys():
            memory_pointers[i] = memory.index(chr(i)), memory_pointers[i][1]
