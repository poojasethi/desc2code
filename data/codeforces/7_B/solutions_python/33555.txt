def alloc(mem, size):
    if len(filter(lambda x: x <= 0, mem)) < size:
        return 'NULL'
    index = max(map(lambda x: abs(x), mem)) + 1
    i = 0
    while i in range(0, len(mem)):
        doContinue = False
        if mem[i] > 0:
            i += 1
            continue
        if i + size > len(mem):
            return 'NULL'
        for j in range(0, size):
            if mem[i + j] > 0:
                i = i + j + 1
                doContinue = True
                break
        if not doContinue:
            for j in range(0, size):
                mem[i + j] = index
            return index

def erase(mem, index):
    if mem.count(index) == 0:
        return False
    if index <= 0:
        return False
    for i in range(0, len(mem)):
        if mem[i] == index:
            mem[i] = -index
    return True

def defrag(mem):
    i = 0
    while i in range(0, len(mem)):
        if mem[i] > 0:
            i += 1
            continue
        if len(filter(lambda x: x > 0, mem[i:])) == 0:
            return
        mem.append(mem.pop(i))
    
t, m = map(lambda x: int(x), raw_input().split())

mem = [0] * m

for opI in range(0, t):
    try:
        cmd, arg = raw_input().split()
        arg = int(arg)
    except ValueError:
        cmd = 'defragment'
        arg = 0
    
    if cmd == 'alloc':
        print alloc(mem, arg)    
    elif cmd == 'erase':
        deleted = erase(mem, arg)
        if not deleted:
            print 'ILLEGAL_ERASE_ARGUMENT'
    elif cmd == 'defragment':
        defrag(mem)

