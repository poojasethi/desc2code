def alloc(par):
    global blocknum
    oldend = addblock = 0
    par = int(par)
    for num,(begin,end,tmp) in enumerate(mem):
        if (begin - oldend) > par:
            blocknum += 1
            mem.insert(num,(oldend+1,oldend+par,blocknum))
            return blocknum
        oldend = end 
    return 'NULL'
    
def erase(par):
    par = int(par)
    if par: 
        blockremove = 0
        for (begin,end,blockn) in mem[1:-1]:
            if par == blockn: 
                mem.remove((begin,end,blockn))
                return
    return 'ILLEGAL_ERASE_ARGUMENT'

def defragment(par):
    oldend = 0
    for num,(begin,end,blockn) in enumerate(mem):
        if blockn:
            delta = begin - oldend
            if delta > 1:
                mem[num] = (begin - delta + 1, end - delta + 1, blockn)
                oldend = end - delta + 1
            else: oldend = end

n,size = map(int,raw_input().split())
commands = [raw_input() for i in xrange(n)]
blocknum = 0
mem = [(0,0,0),(size+ 1,size + 1,0)]
defs = {'alloc':alloc,'erase':erase,'defragment':defragment}

for command in commands:
    cmd,sep,par = command.partition(' ')
    res =  defs.get(cmd)(par)
    if res: print res
