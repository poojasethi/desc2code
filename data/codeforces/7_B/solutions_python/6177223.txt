import operator

def find_start(m,n,mem):
    if not mem :
        if m>=n:
            return 0
        return -1
    if mem[0][1] - 0 >= n:
        return 0
    for i in range(len(mem)-1):
        if mem[i+1][1] - mem[i][2] >= n:
            return mem[i][2]
    if m - mem[-1][2] >= n:
        return mem[-1][2]



t,m = map(int,raw_input().split())
mem = []#id,start,end
iden = 0
while t>0:
    t-=1
    ins = raw_input()
    if 'alloc' in ins :
        n = ins.split()
        n = int(n[1])
        mem.sort(key=operator.itemgetter(1))
        start = find_start(m,n,mem)
        if start >= 0:
            iden+=1
            mem.append( [iden,start,start+n] )
            print iden
        else:
            print 'NULL'
    if 'erase' in ins:
        x = ins.split()
        x = int(x[1])
        for i in range(len(mem)):
            if mem[i][0] == x:
                del mem[i]
                break
        else:
            print 'ILLEGAL_ERASE_ARGUMENT'
    if 'defragment' in ins:
        mem.sort(key=operator.itemgetter(1))
        if mem:
            mem[0][2] = mem[0][2] - mem[0][1]
            mem[0][1] = 0
        for i in range(len(mem)-1):
            diff = mem[i+1][1] - mem[i][2]
            if diff != 0:
                mem[i+1][1]-=diff
                mem[i+1][2]-=diff


