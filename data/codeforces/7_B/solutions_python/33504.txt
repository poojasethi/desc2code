# 7.B
import sys

debug = False
mem = [0] * 102
m_size = 0
block_id = 0 			# last allocated block
allocated_blocks = {}	# id -> (start, stop)

def is_free (start, stop):
	global mem
	for i in xrange (start, stop):
		if mem[i]:
			return False
	return True

def mark_used (start, stop, value):
	global mem
	for i in xrange (start, stop):
		mem[i] = value

def allocate (blk_id, start, size):
	''' don't check, i CAN allocate'''
	mark_used (start, start + size, blk_id)
	allocated_blocks[ blk_id ] = (start, start + size)

def alloc (size):
	global block_id, m_size, mem
	for i in xrange (1, m_size - size + 2):
		if is_free (i, i + size):
			block_id += 1
			allocate (block_id, i, size)
			return str (block_id)
	return 'NULL'

def get_block_info (blk_id):
	'''Returns (start, stop) of a block or (-1, -1)'''
	global mem
	if blk_id not in allocated_blocks:
		return (-1, -1)
	return allocated_blocks[ blk_id ]

def erase (id_to_erase):
	'''Returns False if operation arg is incorrect'''
	global mem
	start, stop = get_block_info (id_to_erase)
	if (start, stop) == (-1, -1):
		return False
	del allocated_blocks[ id_to_erase ]
	mark_used (start, stop, 0)
	return True

def move_block (blk_id, idx0):
	start, stop = get_block_info (blk_id)
	erase (blk_id)
	allocate (blk_id, idx0, stop - start)

def defragment():
	global m_size, mem
	while 0 in mem[1 : m_size + 1]:
		idx0 = mem.index (0, 1, m_size + 1)
		idxN = -1
		for i in xrange (idx0, m_size + 1):
			if mem[i] > 0:
				idxN = i
				break
		if idxN == -1:
			break
		id_to_move = mem [idxN]
		move_block (id_to_move, idx0)

def main():
	global m_size, mem
	n_cmd, m_size = map (int, sys.stdin.readline().split())
	mem[0], mem[m_size + 1] = -1, -1
	if debug: print mem[0 : m_size + 2]
	for i in xrange (n_cmd):
		s = sys.stdin.readline().split()
		if debug: print s
		cmd = s[0]
		if len(s) == 2:
			arg = int (s[1])
		if cmd == 'alloc':
			print alloc (arg)
		elif cmd == 'erase':
			if not erase (arg):
				print 'ILLEGAL_ERASE_ARGUMENT'
		elif cmd == 'defragment':
			defragment()
		else:
			print 'Unknown command'
			sys.exit (1)
		if debug: print mem[0 : m_size + 2]

if len (sys.argv) > 1:
	sys.stdin = open (sys.argv[1], 'r')

main()