class fragment:
    def __init__(self, a, b, c):
        self.begin = a
        self.end = a + b
        self.len = b
        self.n = c
    def __lt__(self, other):
        return self.begin < other.begin

t, m = [int(x) for x in raw_input().split()]

n = 0
memory = '0' * m
blocks = []

for i in range(t):
    a = raw_input()
    if a == "defragment":
        summ = 0
        free = 0
        for j in blocks:
            k = j.begin - free
            j.begin = free
            j.end -= k
            summ += j.len
            free = j.end
        memory = '1' * summ + '0' * (m - summ)
    else:
        name, arg = a.split()
        arg = int(arg)
        if name == "alloc":
            begin = memory.find('0' * arg)
            if(begin != -1):
                n += 1
                print n
                k = fragment(begin, arg, n)
                j = 0
                while j < len(blocks) and blocks[j] < k:
                    j += 1
                blocks.insert(j, k)
                memory = memory[: begin] + '1' * arg + memory[begin + arg: ]
            else:
                print "NULL"
        if name == "erase":
            fl = 0
            for j in blocks:
                if j.n == arg:
                    memory = memory[: j.begin] + '0' * j.len + memory[j.end: ]
                    blocks.remove(j)
                    fl = 1
            if fl == 0:
                print "ILLEGAL_ERASE_ARGUMENT"

