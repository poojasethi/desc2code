#include <cstdio>
#include <algorithm>
using namespace std;
int T,ans=0,MaxR[500005],n;
struct Lady
{
	int B,I,R,Ord;
}L[500005];
int Get_MaxR(int pos)
{
	int ans=0;
	for (int i=pos-1;i;i-=i&-i) ans=max(MaxR[i],ans);
	return ans;
}
inline void Update_MaxR(int pos,int k)
{
	for (int i=pos;i<=T;i+=i&-i)
	{
		if (MaxR[i]>k) break;
		else MaxR[i]=k;
	}
}
inline bool cmp1(const Lady& A,const Lady& B)
{
	return A.B>B.B;
}
inline bool cmp2(const Lady& A,const Lady& B)
{
	return A.I>B.I;
}
int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;i++) scanf("%d",&L[i].B);
	for (int i=1;i<=n;i++) scanf("%d",&L[i].I);
	for (int i=1;i<=n;i++) scanf("%d",&L[i].R);
	sort(L+1,L+n+1,cmp1);
	L[1].Ord=T=1;
	for (int i=2;i<=n;i++)
	{
		if (L[i].B==L[i-1].B)L[i].Ord=T;
		else L[i].Ord=++T;
	}
	sort(L+1,L+n+1,cmp2);
	int i=1,j;
	while (i<=n)
	{
		if (Get_MaxR(L[i].Ord)>L[i].R) ans++;
		j=i;
		while (j+1<=n && L[j+1].I==L[i].I)
		{
			j++;
			if (Get_MaxR(L[j].Ord)>L[j].R) ans++;
		}
		for (;i<=j;i++) Update_MaxR(L[i].Ord,L[i].R);
	}
	printf("%d\n",ans);
	return 0;
}
