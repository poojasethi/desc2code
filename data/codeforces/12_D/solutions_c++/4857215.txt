#include <iostream>
#include <algorithm>
#include <memory.h>
using namespace std;

const int MAXN = 500009;
struct Node {
	int x, y, z;
}node[MAXN];
int c[MAXN], n;

bool operator < (Node a, Node b)
{
	return a.x != b.x ? a.x > b.x : a.y < b.y;
}

int lowbit(int x)	{	return x & -x; }
int getmax(int end)
{
	int ans = -1;
	while(end > 0)
	{
		ans = max(c[end], ans);
		end -= lowbit(end);
	}
	return ans;
}
void update(int pos, int maxz)
{
	while(pos <= n)
	{
		c[pos] = max(c[pos], maxz);
		pos += lowbit(pos);
	}
}

int main()
{
	cin >> n;
	for(int i = 0; i < n; i++)	cin >> node[i].x;
	for(int i = 0; i < n; i++)	cin >> node[i].y;
	for(int i = 0; i < n; i++)	cin >> node[i].z;

	for(int i = 0; i < n; i++)	c[i] = node[i].y;
	sort(c, c + n);
	sort(node, node + n);
	
	for(int i = 0; i < n; i++)
		node[i].y = n - (lower_bound(c, c + n, node[i].y) - c);
	
	memset(c, -1, sizeof(c));
	int ans = 0;

	for(int i = 0; i < n; i++)
	{
		int maxz = getmax(node[i].y - 1);
		if(maxz > node[i].z)
			ans++;
		update(node[i].y, node[i].z);
	}
	cout << ans << endl;
	return 0;
}
