#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <ctime> 

using namespace std;

int neigh[4][2]={{0,1},{1,0},{0,-1},{-1,0}};

map<int,pair<pair<int,int>,int> > d[55][55];
vector<pair<pair<int,int>,int> > q[2];
vector<pair<pair<int,int>,int> > qq[26];

char a[55][55];

int main()
{
	int i,j,n,m,k,x,y,now,sx,sy,tx,ty,o,tmp,cnt;
	pair<pair<int,int>,int> pp;
	char c;
	scanf("%d%d%d",&m,&n,&k);
	for (i=0;i<m;i++)
		scanf("%s",a[i]);
	for (i=0;i<m;i++)
		for (j=0;j<n;j++)
		{
			if (a[i][j]=='S')
			{
				sx=i;sy=j;
			}
			if (a[i][j]=='T')
			{
				tx=i;ty=j;
			}
		}
	q[0].clear();
	q[0].push_back(make_pair(make_pair(tx,ty),0));
	for (i=0;i<m;i++)
		for (j=0;j<n;j++)
			d[i][j].clear();
	d[sx][sy][0]=make_pair(make_pair(-1,-1),-1);
	now=0;
	while (1)
	{
		if (q[now].size()==0) break;
		c='S';
		for (i=0;i<q[now].size();i++)
		{
			for (j=0;j<4;j++)
			{
				x=q[now][i].first.first+neigh[j][0];
				y=q[now][i].first.second+neigh[j][1];
				if ((x>=0)&&(x<m)&&(y>=0)&&(y<n)&&(a[x][y]==c))
				{
					pp=q[now][i];
					while (pp!=make_pair(make_pair(tx,ty),0))
					{
						printf("%c",a[pp.first.first][pp.first.second]);
						pp=d[pp.first.first][pp.first.second][pp.second];
					}
					printf("\n");
					return 0;
				}
			}
		}
		for (i=0;i<26;i++) qq[i].clear();
		for (i=0;i<q[now].size();i++)
		{
			for (j=0;j<4;j++)
			{
				x=q[now][i].first.first+neigh[j][0];
				y=q[now][i].first.second+neigh[j][1];
				if ((x>=0)&&(x<m)&&(y>=0)&&(y<n)&&(a[x][y]!='S')&&(a[x][y]!='T'))
				{
					tmp=q[now][i].second;
					if (((1<<(a[x][y]-'a'))&tmp)==0)
					{
						tmp|=(1<<(a[x][y]-'a'));
						cnt=0;
						for (o=0;o<26;o++)
							if (((1<<o)&tmp)!=0) cnt++;
						if (cnt>k) continue;
					}
					if (d[x][y].find(tmp)==d[x][y].end())
					{
						d[x][y][tmp]=q[now][i];
						qq[a[x][y]-'a'].push_back(make_pair(make_pair(x,y),tmp));
					}
				}
			}
		}
		q[1-now].clear();
		for (i=0;i<26;i++)
			for (j=0;j<qq[i].size();j++)
				q[1-now].push_back(qq[i][j]);
		now=1-now;
	}
	printf("-1\n");
	return 0;
}

