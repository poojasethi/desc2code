#include <cstdio>
#include <cstring>
#include <map>
#include <vector>
#include <algorithm>
#include <iostream>
#include <set>
#include <queue>

using namespace std;

const int MAXN = 55 ;

struct node{
    string route ;
    int x,y,hash,alr;
    node(int x_,int y_,int hash_,int alr_,string route_){
        x=x_; y=y_; hash=hash_ ; alr=alr_ ; route=route_ ;
    }
    friend bool operator < (const node &a,const node &b){
        if (a.route.length() != b.route.length()) return a.route.length() > b.route.length() ;
        return a.route > b.route ;
    }
};
int n,m,k;
set<int> visit[MAXN][MAXN] ;
char s[MAXN][MAXN] ;
int pre[MAXN][MAXN];

priority_queue<node> q ;

bool inside(int x,int y){
    return (x>=0&&x<n&&y>=0&&y<m) ;
}

int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};

void bfs(int sx,int sy){
    q.push(node(sx,sy,0,0,"")) ;
    while (!q.empty()){
        node u = q.top() ; q.pop() ;
        int x = u.x , y = u.y ;
        //cout << u.x << " " << u.y << " " << u.route << " " << u.alr << " " << u.hash << endl ;
        for (int i = 0 ; i < 4 ; i++){
            int lx = x + dx[i] ;
            int ly = y + dy[i] ;

            if (!inside(lx,ly)) continue ;
            if (s[lx][ly]=='T'){
                cout << u.route << endl ;
                exit(0);
            }
            if (s[lx][ly]=='S') continue ;
            int lhash = u.hash | (1<<(s[lx][ly]-'a')) ;

            if (visit[lx][ly].find(lhash) != visit[lx][ly].end()) continue ;
            if (pre[lx][ly]!=0 && (pre[lx][ly] & lhash)==pre[lx][ly]) continue;
            pre[lx][ly] = lhash ;
            int newalr = u.alr+1-((u.hash>>(s[lx][ly]-'a')&1)) ;
            if (newalr > k) continue ;
            visit[lx][ly].insert(lhash) ;
            q.push(node(lx,ly,lhash,newalr,u.route+s[lx][ly]));
        }
    }
}

int main(){
    //freopen("input.txt","r",stdin);
    scanf("%d%d%d",&n,&m,&k) ;
    for (int i=0;i<n;i++)
        scanf("%s",s[i]);
    for (int i=0;i<n;i++)
        for (int j=0;j<m;j++)
            if (s[i][j]=='S') bfs(i,j);
    printf("-1\n");
    return 0 ;
}
