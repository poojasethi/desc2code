#include <iostream>
#include <string>
#include <utility>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>


using namespace std;

#define pii pair<int,int>
#define X first
#define Y second
#define pb push_back

int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,-1,1 };
int n,m,k,sx,sy,fx,fy;
string s[60],a[60][60],res;
vector <int> qx,qy;
bool ok[26];
bool valid(int x,int y) { if(x >= 0 && y >= 0 && x < n && y < m) return 1; return 0; }
void bfs() {
    for(int i = 0; i < qx.size(); i++) {
        int x, y;
        for(int j = 0; j < 4; j++) {
            x = qx[i]+dx[j];
            y = qy[i]+dy[j];
            if(valid(x,y) && ( s[x][y] == 'T' || s[x][y] == 'S' || ok[s[x][y]-'a'])) {
                if(a[x][y].size() == 0) {
                    qx.pb(x);
                    qy.pb(y);
                    a[x][y] = a[qx[i]][qy[i]]+s[x][y];
                } else if((a[x][y].size() > a[qx[i]][qy[i]].size()+1) || (a[x][y].size() == a[qx[i]][qy[i]].size()+1 && a[x][y] > a[qx[i]][qy[i]] + s[x][y])) {
                    a[x][y] = a[qx[i]][qy[i]] + s[x][y];
                }
            }
        }
    }
}

void f(int x,int y) {
    if(x == 0) { 
        for(int i = 0; i < n; i++) for(int j = 0; j < m; j++) a[i][j].clear();
        qx.clear();
        qy.clear();
        qx.pb(sx);
        qy.pb(sy);
        bfs();      
        if(a[fx][fy].size()) {
            if(!res.size() || res.size() > a[fx][fy].size() || (a[fx][fy].size() == res.size()  &&  res > a[fx][fy])) {
                res = a[fx][fy];
            }
        }
    }
    else { for(int i = y; i < 26; i++) { ok[i] = 1; f(x-1,i+1); ok[i] = 0; } }
}
int main () {
    cin >> n >> m >> k;
    for(int i = 0; i < n; i++) cin >> s[i];
    for(int i = 0; i < n; i++) for(int j = 0; j < m; j++) {
        if(s[i][j] == 'S') { sx = i; sy = j; }
        if(s[i][j] == 'T') { fx = i; fy = j; }
    }
    f(k,0);
    if(res.size()) { for(int i = 0; i < res.size()-1; i++) cout << res[i]; cout << endl; }
    else cout << -1 << endl;
    return 0;
}
                
