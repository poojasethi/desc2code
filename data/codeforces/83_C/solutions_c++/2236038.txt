#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<string>
#include<queue>
#include<map>
#include<set>
#include<vector>
#include<cctype>
#include<cmath>
using namespace std;
const int N = 55;
char ssG[N][N];
int R,C,KK;
int stx,sty,enx,eny;
struct nodexx
{
    string str;
    int x,y,val;
    bool operator<(const nodexx t)const
    {
        int lenaa=str.size(), lenbb=t.str.size();
        if(lenaa - lenbb)
            return lenaa > lenbb;
        return str > t.str;
    }
}XA,XB;
priority_queue<nodexx>QQ;
typedef pair<int,int> pii;
typedef pair<pii,int> pii00;
set<pii00>SET;
int dirc[4][2]={{0,1},{0,-1},{1,0},{-1,0}};
int has[55][55];
bool Judge(int x)
{
    int cnt=0;
    while(x > 0)
    {
        cnt += x%2;
        x /= 2;
    }
    return cnt<=KK;
}
string BFS()
{
    memset(has, 0, sizeof has);
    SET.clear();
    while(QQ.size())
        QQ.pop();
    XA.str="", XA.x=stx, XA.y=sty, XA.val=0, QQ.push(XA);
    SET.insert(make_pair(make_pair(stx,sty),0));
    int k,r,c,val;
    while(QQ.size())
    {
        XA=QQ.top(), QQ.pop();
        for(k=0; k < 4; k++)
        {
            r=XA.x+dirc[k][0], c=XA.y+dirc[k][1];
            if(r>=0 && r<R && c>=0 && c<C && ssG[r][c] != 'S')
            {
                if(ssG[r][c] == 'T')
                    return XA.str;
                val = XA.val|(1<<(ssG[r][c]-'a'));
                if(Judge(val) && SET.count(make_pair(make_pair(r,c),val))==0  )
                {
                    if(has[r][c] && (has[r][c]&val)==has[r][c])
                        continue;
                    has[r][c] = val;
                    SET.insert(make_pair(make_pair(r,c),val));
                    XB.str = XA.str+ssG[r][c];
                    XB.val = val;
                    XB.x = r;
                    XB.y = c;
                    QQ.push(XB);
                }
            }
        }
    }
    return "-1" ;
}
void cyh()
{
    cout << BFS() << endl;
}
int main()
{
    int e,f;
    while(cin >> R >> C >> KK)
    {
        for(e=0; e < R; e++)
        {
            scanf("%s", ssG[e]);
            for(f=0; f < C; f++)
            {
                if(ssG[e][f] == 'S')
                    stx=e, sty=f;
                if(ssG[e][f] == 'T')
                    enx=e, eny=f;
            }
        }
        cyh();
    }
    return 0;
}

