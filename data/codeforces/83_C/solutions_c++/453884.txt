//Catch me if you can!
#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<deque>
#include<string>
#include<cctype>
#include<cmath>
#include<string>
#include<sstream>
#include<numeric>
#include<complex>
#include<queue>
#include<cstring>
#include<cassert>
#include<limits.h>
#include<ext/hash_set>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

#define big long long
const int SIZE = 100;

string grid[SIZE];
int R, C, K;
struct state{
	int r, c, s;
	bool operator<(const state& st)const{
		return grid[r][c] < grid[st.r][st.c];
	}
};

map<int, state> next[SIZE][SIZE];
vector<state> v;
vector<state> sorter[27];

int sr, sc, tr, tc;
int dir[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
bool valid(int r, int c){
	return r >= 0 && r < R && c >= 0 && c < C;
}

void print(state st){
	if(st.r == tr && st.c == tc)
		return;
	cout << grid[st.r][st.c];
	print(next[st.r][st.c][st.s]);
}

int main(){

	//freopen("2.in", "rt", stdin);
	cin >> R >> C >> K;

	for(int i = 0 ; i < R ; i++){
		cin >> grid[i];
		for(int j = 0 ; j < C ; j++)
			if(grid[i][j] == 'S'){
				sr = i;
				sc = j;
			}else if(grid[i][j] == 'T'){
				tr = i;
				tc = j;
			}
	}

	state st= {tr, tc, 0};
	next[st.r][st.c][st.s] = st;
	v.push_back(st);

	while(!v.empty()){

		for(int i = 0 ; i < 27 ; i++)
			sorter[i].clear();

		for(int x = 0 ; x < v.size() ; x++){
			state vi = v[x];
			if(vi.r == sr && vi.c == sc){
				print(next[vi.r][vi.c][vi.s]);
				return 0;
			}
			for(int d = 0 ; d < 4 ; d++){
				state st = vi;
				st.r += dir[d][0];
				st.c += dir[d][1];
				if(!valid(st.r,st.c))
					continue;
				if(islower(grid[st.r][st.c]))
					st.s |= (1<<(grid[st.r][st.c]-'a'));
				if(__builtin_popcount(st.s) > K)
					continue;
				if(next[st.r][st.c].find(st.s) != next[st.r][st.c].end())
					continue;
				next[st.r][st.c][st.s] = vi;
				int code = islower(grid[st.r][st.c])?grid[st.r][st.c]-'a':26;
				sorter[code].push_back(st);
			}
		}
		v.clear();
		for(int i = 0 ; i < 27 ; i++)
			v.insert(v.end(), sorter[i].begin(), sorter[i].end());
	}
	cout << -1 << endl;
	return 0;
}
