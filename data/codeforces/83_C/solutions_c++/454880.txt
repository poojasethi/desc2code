#include <cstdio>
#include <cstring>
#include <set>
#include <queue>
#include <string>
#include <algorithm>
using namespace std;
typedef long long LL;
const int MaxN = 55;
char g[MaxN][MaxN];
int sx,sy;
const int MaxQ = 5000005;
struct Node
{
    string path;
    int s,pos;
    Node(string path, int s, int pos)
        : path(path), s(s), pos(pos) { }
};

bool operator<(const Node& p1, const Node& p2)
{
    int l1 = p1.path.size(), l2 = p2.path.size();
    if(l1 != l2)return l1 > l2;
    return p1.path > p2.path;
}

priority_queue <Node> q;

int dx[4] = {0,0,1,-1};
int dy[4] = {1,-1,0,0};
set< LL >mp;
int vst[55][55];
int n,m,K;

bool check(int x,int y)
{
    if(x<0||x>=n||y<0||y>=m||g[x][y]=='S')return 0;
    return 1;
}

int Count(int x)
{
    int Ct = 0;
    for(;x;x-=x&(-x))Ct++;
    return Ct;
}

void bfs()
{
    memset(vst, 0, sizeof(vst));
    q.push(Node("",0,sx*m+sy));
    mp.clear();
    mp.insert(sx*m+sy);
    while(!q.empty())
    {
        Node u = q.top();
        q.pop();
        for(int i = 0; i < 4; i++)
        {
            int x = u.pos/m+dx[i], y = u.pos%m+dy[i];
            if(!check(x,y))continue;
            if(g[x][y]=='T')
            {
                printf("%s\n",u.path.c_str());
                return;
            }

            if(g[x][y]!='T' && !(u.s&(1<<(g[x][y]-'a'))) && Count(u.s)>=K)continue;
            Node v = Node(u.path+g[x][y], u.s | (1<<(g[x][y]-'a')), x*m+y);
            LL tp = v.s * 10000 + v.pos;
            if(mp.find(tp) != mp.end())continue;
            if(vst[x][y] && (vst[x][y]&v.s)==vst[x][y])continue;
            vst[x][y] = v.s;
            mp.insert(tp);
            q.push(v);
        }
    }
    puts("-1");
}

int main()
{
    //freopen("in.txt","r",stdin);


    while(scanf("%d%d%d",&n,&m,&K)==3)
    {
        for(int i = 0; i < n; i++)
        {
            scanf("%s",g[i]);
            for(int j = 0; j < m; j++)
                if(g[i][j]=='S')sx=i,sy=j;
        }
        bfs();
    }


    return 0;
}
