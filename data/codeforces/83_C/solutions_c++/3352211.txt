#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <map>
#include <cmath>
#include <set>
#include <queue>
#include <string>
using namespace std;
typedef long long LL;

const int maxn = 100005;

int n, m, k;
char str[55][55];
int v[55][55];
set<LL> se;
int cnt[maxn];
int dir[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
string ans;
int sx, sy, ex, ey;

struct node
{
	int x, y;
	int s;
	string str;
	node(int _x = 0, int _y = 0, int _s = 0, string _str = "") : x(_x), y(_y), s(_s), str(_str){}
};

bool operator < (const node &a, const node &b)
{
	int lena = a.str.length(), lenb = b.str.length();
	if (lena != lenb)
		return lena > lenb;
	return a.str > b.str;
}

int cot(int n)
{
	int ret = 0;
	for(; n; n -= n & (-n))
		ret++;
	return ret;
}

void BFS(int sx, int sy, int ex, int ey)
{
	priority_queue<node> q;
	q.push(node(sx, sy, 0, ""));
	se.insert(sx * m + sy);
	while (!q.empty())
	{
		node temp = q.top();
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			int tx = temp.x + dir[i][0];
			int ty = temp.y + dir[i][1];
			if (tx == ex && ty == ey)
			{
				cout << temp.str << endl;
				return ;
			}
			if (tx == sx && ty == sy)
				continue;
			if (tx < 0 || ty < 0 || tx >= n || ty >= m)
				continue;
			int news = temp.s | (1 << (str[tx][ty] - 'a'));
			if (cot(news) > k)
				continue;
			string ss = temp.str + str[tx][ty];
			LL tv = news * n * m + tx * m + ty;
			if (se.find(tv) == se.end())
			{
				if (v[tx][ty] && ((v[tx][ty] & news) == v[tx][ty]))
					continue;
				v[tx][ty] = news;
				se.insert(tv);
				q.push(node(tx, ty, news, temp.str + str[tx][ty]));
			}
		}
	}
	cout << "-1" << endl;
}

int main() {
	//freopen("input.txt","r",stdin);
	scanf ("%d %d %d", &n, &m, &k);
	for (int i = 0; i < n; i++)
		scanf ("%s", str[i]);
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (str[i][j] == 'S')
				sx = i, sy = j;
			if (str[i][j] == 'T')
				ex = i, ey = j;
		}
	}
	BFS(sx, sy, ex, ey);
	return 0;
}

/*
3 4 3
cccT
aaca
Sdab
*/
			 	  		 		  		  	 		 		