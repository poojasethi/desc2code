#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<queue>
#include<string>
#include<iostream>
#include<set>
#define INF 1e9
#define maxn 55
using namespace std;
int n,m,num;
char s[maxn][maxn];
int d[maxn][maxn];
int dx[]={0,0,-1,1},dy[]={-1,1,0,0};
set<int>st[maxn][maxn];
int last[maxn][maxn];
int bitcount(int x)
{
    return x==0?0:bitcount(x>>1)+(x&1);
}
struct node
{
    int x,y,hash;
    string r;
    bool operator<(const node &rhs)const
    {
        if(r.length()!=rhs.r.length())
            return r.length()>rhs.r.length();
        return r>rhs.r;
    }
};
int Dijkstra(int sx,int sy)
{
    priority_queue<node>q;
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
            d[i][j]=INF;
    node tmp;tmp.x=sx;tmp.y=sy;tmp.hash=0;tmp.r="";
    q.push(tmp);
    while(!q.empty())
    {
        node now=q.top();
        q.pop();
        int x=now.x;
        int y=now.y;
        for(int k=0;k<4;k++)
        {
            int nx=x+dx[k];
            int ny=y+dy[k];
            if(nx>=0&&nx<n&&ny>=0&&ny<m)
            {
                if(s[nx][ny]=='S')continue;
                if(s[nx][ny]=='T')
                {
                    cout<<now.r;
                    return 1;
                }
                int nhash=now.hash|(1<<(s[nx][ny]-'a'));
                if(bitcount(nhash)>num)
                    continue;
                if(st[nx][ny].count(nhash))
                    continue;
                if(last[nx][ny]&&(last[nx][ny]&nhash)==last[nx][ny])
                    continue;
                last[nx][ny]=nhash;
                st[nx][ny].insert(nhash);
                tmp.x=nx;tmp.y=ny;tmp.hash=nhash;tmp.r=now.r+s[nx][ny];
                q.push(tmp);
            }
        }
    }
    return 0;
}
int main()
{
    scanf("%d%d%d",&n,&m,&num);
    for(int i=0;i<n;i++)
        scanf("%s",s[i]);
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
    {
        if(s[i][j]=='S')
        {
            if(Dijkstra(i,j))
                return 0;
            else
            {
                printf("-1");
                return 0;
            }
        }
    }
    return 0;
}
