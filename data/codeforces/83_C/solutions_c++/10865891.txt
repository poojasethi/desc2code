#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<queue>
#include<set>
#define rep(i,n) for(int i=0;i<n;i++)
#define fr(i,c) for(__typeof (c.begin()) i=c.begin(); i!=c.end(); i++)
#define all(c) (c).begin(), (c).end()
#define mp make_pair
using namespace std;

typedef pair<int,int> pi;
typedef long long ll;

typedef pair<int,pair<pair<string,int>,int> > node;
const int dy[]={-1,0,1,0}, dx[]={0,-1,0,1};
inline int D(int x1,int y1,int x2,int y2){ return abs(x1-x2)+abs(y1-y2); }

int h,w,k;
string in[50];


void run(){
  cin>>h>>w>>k;
  int sy,sx,gy,gx;
  rep(i,h){
    cin>>in[i];
    rep(j,w){
      if(in[i][j]=='S')sy=i, sx=j;
      else if(in[i][j]=='T')gy=i, gx=j;
    }
  }
  set<pi> s;
  priority_queue<node,vector<node>,greater<node> > q;
  q.push(mp(D(sy,sx,gy,gx),mp(mp("",0),sy*w+sx)));
  while(!q.empty()){
    int y=q.top().second.second/w, x=q.top().second.second%w;
    string str=q.top().second.first.first;
    int mask=q.top().second.first.second;
    q.pop();
    if(s.count(mp(mask,y*w+x)))continue;
    s.insert(mp(mask,y*w+x));
    
    rep(d,4){
      int ny=y+dy[d], nx=x+dx[d];
      if(ny<0||nx<0||ny>=h||nx>=w||ny==sy&&nx==sx)continue;
      if(ny==gy&&nx==gx){
        cout<<str<<endl; return;
      }
      string next=str+in[ny][nx];
      int nmask=mask|1<<in[ny][nx]-'a';
      if(__builtin_popcount(nmask)<=k)
        q.push(mp(D(ny,nx,gy,gx)+next.size(),mp(mp(next,nmask),ny*w+nx)));
    }
  }
  cout<<-1<<endl;
}
int main(){
#ifndef ONLINE_JUDGE
  rep(i,3)
#endif
    run();
  return 0;
}