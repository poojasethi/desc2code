#include <stdio.h>
#include <string.h>

#define MAXN 55
#define INF 0x3f3f3f3f

int n, m, k;

char mp[MAXN][MAXN], str[MAXN * MAXN];
int prei[MAXN][MAXN], prej[MAXN][MAXN], dis[MAXN][MAXN], vst[MAXN][MAXN];
int q2[2][MAXN * MAXN], r2[2], q[MAXN * MAXN];
int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};
bool used[MAXN];

int res = INF, si, ti, sj, tj;

void solve() {
	memset(dis, INF, sizeof(dis));
	dis[ti][tj] = 0;
	int l = 0, r = 0;
	q[r++] = ti * m + tj;
	while(l != r) {
		int mask= q[l++];
		int x = mask / m, y = mask % m;
		for(int i = 0; i < 4; ++i) {
			int nx = x + dx[i], ny = y + dy[i];
			if(nx >= 0 && nx < n && ny >= 0 && ny < m && (mp[nx][ny] == 'S' || mp[nx][ny] == 'T' || used[mp[nx][ny] - 'a']) && dis[x][y] + 1 < dis[nx][ny]) {
				dis[nx][ny] = dis[x][y] + 1;
				q[r++] = nx * m + ny;
			}
		}
	}
	if(dis[si][sj] == INF || dis[si][sj] > res) return;
	bool ok = false;
	if(dis[si][sj] < res) {
		ok = true;
		res = dis[si][sj];
	}
	memset(vst, 0, sizeof(vst));
	bool id = false;
	r2[id] = 0;
	q2[id][r2[id]++] = si * m + sj;
	for(int i = 0; i < dis[si][sj]; ++i) {
		id = !id;
		r2[id] = 0;
		char mini = 'z' + 1;
		for(int j = 0; j < r2[!id]; ++j) {
			int mask = q2[!id][j];
			int x = mask / m, y = mask % m;
			if(mp[x][y] < mini) mini = mp[x][y];
		}
		if(!ok && mini > str[i + 1]) return;
		if(mini < str[i + 1]) ok = true;
		str[i + 1] = mini;
//		putchar(mini);
		for(int j = 0; j < r2[!id]; ++j) {
			int mask = q2[!id][j];
			int x = mask / m, y = mask % m;
			if(mp[x][y] == mini) {
				for(int h = 0; h < 4; ++h) {
					int nx = x + dx[h], ny = y + dy[h];
					if(nx >= 0 && nx < n && ny >= 0 && ny < m && dis[x][y] - 1 == dis[nx][ny]) {
						if(vst[nx][ny] != i + 1) {
							vst[nx][ny] = i + 1;
							q2[id][r2[id]++] = nx * m + ny;
						}
					}
				}
			}
		}
	}
}

void dfs(int dep, int count) {
	if(dep == 26) {
		if(count == k) solve();
		return;
	}
	dfs(dep + 1, count);
	if(count < k) {
		used[dep] = true;
		dfs(dep + 1, count + 1);
		used[dep] = false;
	}
}
int main() {
	scanf("%d%d%d", &n, &m, &k);
	for(int i = 0; i < n; ++i) {
		scanf("%s", mp[i]);
		for(int j = 0; j < m; ++j)
			if(mp[i][j] == 'S')  si = i, sj = j;
			else if(mp[i][j] == 'T') ti = i, tj = j;
	}
	dfs(0, 0);
	if(res == INF) puts("-1");
	else {
		for(int i = 2; i <= res; ++i) putchar(str[i]);
		puts("");
	}
	return 0;
}
