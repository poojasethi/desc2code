#include<iostream>
#include<set>

using namespace std;

const int MAXN = 1e5 + 5, INF = 2e9;
int a[MAXN], in[MAXN], dp[MAXN];
multiset<int> s;

int main()
{
	int n, l, p;
	cin >> n >> p >> l;
	for(int i = 0; i < n; i++)
		cin >> a[i];
	int j = 0;
	for(int i = 0; i < n; i++)
	{
		s.insert(a[i]);
		while(s.size() && *s.rbegin() - *s.begin() > p)
			s.erase(s.find(a[j++]));
		in[i] = s.size();
	}
	j = 0;
	while(s.size())
		s.erase(s.begin());
	for(int i = 0; i < n; i++)
	{
		if(in[i] < l)
			dp[i] = INF;
		else if(in[i] == i + 1)
			dp[i] = 1;
		else
		{
			while(i - j > in[i])
				s.erase(s.find(dp[j++]));
			if(s.size() == 0)
				dp[i] = INF;
			else
				dp[i] = *s.begin() + 1;
		}
		if(i - l + 1 >= 0)
			s.insert(dp[i - l + 1]);
	}
	if(dp[n - 1] >= INF)
		cout << -1 << endl;
	else
		cout << dp[n - 1] << endl;
	return 0;
}
