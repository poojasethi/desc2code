#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
#include <numeric>
using namespace std;

#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define forit(it,S) for(__typeof(S.begin()) it = S.begin(); it != S.end(); ++it)
#ifdef WIN32
#define I64d "%I64d"
#else
#define I64d "%lld"
#endif

typedef pair <int, int> pi;
typedef vector <int> vi;
typedef long long ll;

const int mod = int(1e9) + 7;
const int inf = int(1e9);

char s[5555];
int n, dp[5005][5005], f[5005][5005];
int lcp[5005][5005];
int p[5005];

int get(int j, int i) {
	if (j == 0) return 0;
	int len = i - j;
	if (j < len) return j;


	int jj = j - len + 1, ii = i - len + 1;

	int l = lcp[jj][ii];
	if (l >= len || (l < len && s[jj + l] < s[ii + l])) {
		return len;
	} else {
		return len - 1;
	} 
}

int calc(int i, int len) {
	int res = 0;
	for (int j = 0; j < len; ++j) if (s[i - j] == '1') {
		res += p[j];
		if (res >= mod) res -= mod;	
	}
	return res;
}

int main() {
	scanf("%s", &s[1]);
	s[0] = '*';
	n = strlen(s) - 1;

	p[0] = 1;
	for (int i = 1; i <= n; ++i) {
		p[i] = p[i - 1] + p[i - 1];
		if (p[i] >= mod) p[i] -= mod;
	}

	for (int i = n; i > 0; --i) {
		for (int j = i + 1; j <= n; ++j) {
			if (s[i] == s[j]) {
				lcp[i][j] = 1 + lcp[i + 1][j + 1];
			}
		}
	}

	dp[0][0] = 1;
	f[0][0] = 0;
	for (int i = 1; i <= n; ++i) {
		dp[i][0] = 0;
		f[i][0] = inf;
		
		int sum = 0, mn = inf;
		for (int len = 1; len <= i; ++len) {
			int j = i - len;
			int mx = get(j, i);

			if (s[i - len + 1] == '1') {
				int cur = dp[j][mx];	
				sum += cur;
				if (sum >= mod) sum -= mod;

				mn = min(mn, 1 + f[j][mx]);
			}

			dp[i][len] = sum;
			f[i][len] = mn;
		}
	}

	printf("%d\n", dp[n][n]);

	int m = 1;
	while (f[n][m] == inf) {
		++m;
	}	

	if (m < 20) {
		int res = inf;
		for (m = 1; m < 20; ++m) if (s[n - m + 1] == '1') {
			 int x = calc(n, m);
		     int j = n - m;
		     
		     int mx = get(j, n);
		     if (f[j][mx] + 1 == f[n][m]) {
		     	x += f[n][m];
		     	res = min(res, x);
		     }

		}
		printf("%d\n", res);
	}  else {
		printf("%d\n", (f[n][m] + calc(n, m)) % mod);
	}
    return 0;
}