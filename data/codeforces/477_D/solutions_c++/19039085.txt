#include <iostream>
#include <stdio.h>
#include <cmath>
#include <stdlib.h>
#include <string.h>

using namespace std;
#define mst(A, k) memset(A, k, sizeof(A))
#define rep(i, s, t) for(int i = s; i < t; i++)
typedef long long LL;
const int mod = 1e9 + 7;

int n;
char a[5005];
int mul[5005][5005];
int dif[5005][5005];
int cnt[5005][5005], mit[5005][5005];

inline int add_mod(int a, int b, int mod) {
	a += b;
	if(a >= mod) a -= mod;
	return a;
}
inline int mul_mod(int a, int b, int mod) {
	LL ret = a * 1LL * b % mod;
	return (int)ret;
}
inline int getval(char c) {
	return c - '0';
}
int lmin(int a, int b) {
	if(b <= 0) return a;
	if(a <= 0) return b;
	return a > b ? b : a;
}
int main() {

	scanf("%s", a + 1);
	n = strlen(a + 1);
	mul[0][0] = 0;
	for(int i = 1; i <= n; i++) {
		mul[i][1] = getval(a[i]);
		for(int j = 2; j <= i; j++) mul[i][j] = add_mod(getval(a[i]), mul_mod(mul[i - 1][j - 1], 2, mod), mod);
	}
	for(int i = n; i >= 1; i--) {
		for(int j = n; j > i; j--) {
			if(a[i] != a[j]) dif[i][j] = dif[j][i] = 0;
			else if(j == n) dif[i][j] = dif[j][i] = 1;
			else dif[i][j] = dif[j][i] = dif[i + 1][j + 1] + 1;
		}
	}
	mst(cnt, 0);
	cnt[1][1] = 1;
	mst(mit, -1);
	mit[1][1] = 1;
	for(int i = 1; i < n; i++) {
		for(int j = 1; j <= i; j++) {
			cnt[i + 1][j + 1] = add_mod(cnt[i + 1][j + 1], cnt[i][j], mod);
			mit[i + 1][j + 1] = lmin(mit[i + 1][j + 1], mit[i][j]);
			if(a[i + 1] == '1') {
				int d = dif[i - j + 1][i + 1];
				if(d >= j) {
					cnt[i + j][j] = add_mod(cnt[i + j][j], cnt[i][j], mod);
					if(mit[i][j] >= 0) mit[i + j][j] = lmin(mit[i + j][j], add_mod(mit[i][j], 1, mod));
				}
				else if(i + j > n) continue;
				else if(a[i + 1 + d] > a[i - j + 1 + d]) {
					cnt[i + j][j] = add_mod(cnt[i + j][j], cnt[i][j], mod);
					if(mit[i][j] >= 0) mit[i + j][j] = lmin(mit[i + j][j], add_mod(mit[i][j], 1, mod));
				}
				else if(i + 1 + j <= n) {
					cnt[i + j + 1][j + 1] = add_mod(cnt[i + j + 1][j + 1], cnt[i][j], mod);
					if(mit[i][j] >= 0) mit[i + j + 1][j + 1] = lmin(mit[i + j + 1][j + 1], add_mod(mit[i][j], 1, mod));
				}
			}
		}
	}
	//for(int i = 9; i <= 1100; i += 6) cout << i << " " << mit[i][6] << "\n";
	int ans1 = 0;
	for(int i = 1; i <= n; i++) {
		ans1 = add_mod(ans1, cnt[n][i], mod);
	}
	int ans2 = -1;
	for(int i = 1; i <= n; i++) if(~mit[n][i]) {
		ans2 = lmin(ans2, add_mod(mul[n][i], mit[n][i], mod));
		if(i > 20 && ans2 != -1) break;
	}
	printf("%d\n%d\n", ans1, ans2);
}
	 				 	   	 				     		      	