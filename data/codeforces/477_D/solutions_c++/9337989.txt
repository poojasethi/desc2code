#include <cstdio>
#include <algorithm>
#define N 5005
#define M 1000000007
#define INF (1 << 29)
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
#define fe(a, b, c) for(int a = (b); a; a = c[a])
using namespace std;

int n, dp[N][N], sp[N][N], c[N][N], ans, tot;
char s[N];

void add(int &a, int b){
	a = (a + b) % M;
}

void gmin(int &a, int b){
	a = min(a, b);
}

int main(){
	scanf("%s", s + 1);
	while(s[n + 1]) n++;
	FI(k, 1, n / 2){
		int sta = 0, last;
		FD(i, n - k, 1){
			if(s[i] < s[i + k]) sta = -1, last = i;
			else if(s[i] > s[i + k]) sta = 1, last = i;
			if(last >= i + k) sta = 0;
			c[i][i + k] = sta < 1;
		}
	}
	
	FI(i, 1, n) FI(j, 1, n) sp[i][j] = INF;
	dp[1][1] = 1;
	sp[1][1] = 1;
	
	FI(i, 1, n){
		fi(j, i, n){
			add(dp[i][j + 1], dp[i][j]);
			gmin(sp[i][j + 1], sp[i][j]);
			if(s[j + 1] == '0') continue;
			if(j + j - i + 1 <= n){
				if(c[i][j + 1]){
					add(dp[j + 1][j + j - i + 1], dp[i][j]);
					gmin(sp[j + 1][j + j - i + 1], sp[i][j] + 1);
				}else if(j + j - i + 2 <= n){
					add(dp[j + 1][j + j - i + 2], dp[i][j]);
					gmin(sp[j + 1][j + j - i + 2], sp[i][j] + 1);
				}
			}
		}
	}
	
	ans = INF;
	bool found = 0;
	FD(i, n, 1) if(sp[i][n] < INF){
		add(tot, dp[i][n]);
		if(n - i < 20){
			int ret = 0;
			FI(j, i, n) ret = ret * 2 + s[j] - '0';
			gmin(ans, ret + sp[i][n]);
			found = 1;
		}else if(!found){
			ans = 0;
			FI(j, i, n) ans = (ans * 2 + s[j] - '0') % M;
			add(ans, sp[i][n]);
			found = 1;
		}
	}
	
	printf("%d\n%d\n", tot, ans);
	scanf("\n");
}
