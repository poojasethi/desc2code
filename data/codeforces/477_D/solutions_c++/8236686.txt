#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;

typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> pii;

const int N = 5010;
const int mod = 1e9 + 7;

int n;
char a[N];
ull hash[N], f[N];
ll dp[N][N];
ll cnt[N][N];

inline void getMin(ll &x, ll y){
    if(x == -1) x = y;
    else x = min(x, y);
}
inline void add(ll &x, ll y){
    x += y;
    if(x >= mod) x -= mod;
}
ull getHash(int L, int R){
    return (hash[R] - hash[L - 1]) * f[n - R];
}
int find(int L, int R, int length){
    int l = 0, r = n - R + 1;
    while(r > l){
        int mid = l + r + 1 >> 1;
        if(getHash(L, L + mid - 1) == getHash(R, R + mid - 1)) l = mid;
        else r = mid - 1;
    }
    if(l >= length) return R + length - 1;
    else{
        if(a[L + l] < a[R + l]) return R + length - 1;
        else if(R + length <= n) return R + length;
        return -1;
    }
}
int main(){
    n = strlen(gets(a + 1));
    f[0] = 1;
    for(int i = 1; i < N; ++i) f[i] = f[i - 1] * 3;
    
    for(int i = 1; i <= n; ++i){
        hash[i] = hash[i - 1] + f[i] * (a[i] - '0' + 1);
    }
    
    memset(dp, -1, sizeof(dp));
    
    dp[1][1] = cnt[1][1] = 1;
    
    for(int i = 1; i <= n; ++i){
        for(int j = 1; j <= i; ++j){
            if(dp[j][i] == -1) continue;
            
            getMin(dp[j][i + 1], dp[j][i]);
            add(cnt[j][i + 1], cnt[j][i]);
            if(a[i + 1] == '1' && n - i >= i - j + 1){
                int k = find(j, i + 1, i - j + 1);
                if(k != -1){
                    getMin(dp[i + 1][k], dp[j][i] + 1);
                    add(cnt[i + 1][k], cnt[j][i]);
                }
            }
        }
    }
    
    ll total_cnt = 0;
    for(int i = 1; i <= n; ++i)
        add(total_cnt, cnt[i][n]);
    cout << total_cnt << endl;
    
    ll ans = -1, cur = 1, num = 0;
    for(int i = n, j = 0; i >= 1; --i, ++j, cur = (cur * 2) % mod){
        if(a[i] == '1'){
            num = (num + cur) % mod;
            if(j <= 20){
                if(dp[i][n] != -1) getMin(ans, num + dp[i][n]);
            }
            else{
                if(ans != -1) break;
                
                if(dp[i][n] != -1){
                    ans = (dp[i][n] + num) % mod;
                    break;
                }
            }
        }
    }
    cout << ans << endl;
    
    return 0;
}