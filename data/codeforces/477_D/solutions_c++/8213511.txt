#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
#define mod 1000000007
#define maxn 5010
using namespace std;
char str[maxn];
int dp[maxn][maxn],LCP[maxn][maxn],minv[maxn][maxn];
int cmp(int a,int b,int c,int d)
{
    if(b-a+1!=d-c+1)
        return b-a+1<d-c+1?-1:1;
    int x=LCP[a][c];
    if(x>=min(b-a+1,d-c+1))
        return 0;
    return str[a+x]<str[c+x]?-1:1;
}
void Dp()
{
    int n=strlen(str+1);
    for(int i=n;i>=1;--i)
        for(int j=n;j>=1;--j)
            LCP[i][j]=str[i]!=str[j]?0:LCP[i+1][j+1]+1;
    for(int i=1;i<=n;++i)
        dp[1][i]=1;
    int ans1=1,ans2=0,id=1;
    for(int i=2;i<=n;++i)
    {
        if(str[i]=='1')
        {
            int minval=1<<30,s=0;
            if(str[i-1]=='1')
                minval=minv[i-1][i-1]+1,s=dp[i-1][i-1];
            for(int j=i,k=i-2;j<=n;++j)
            {
                while(k>=1&&(str[k]=='0'||cmp(k,i-1,i,j)<=0))
                {
                    if(str[k]=='1')
                        minval=min(minval,minv[k][i-1]+1),s=(s+dp[k][i-1])%mod;
                    --k;
                }
                minv[i][j]=minval,dp[i][j]=s;
                if(j==n&&dp[i][j])
                {
                    ans1=(ans1+dp[i][j])%mod;
                    id=i;
                }
            }
        }
    }
    for(int i=id;i<=n;++i)
        ans2=(ans2*2+str[i]-'0')%mod;
    ans2=(ans2+minv[id][n]+1)%mod;
    for(int i=max(1,n-20);i<=n;++i)
        if(dp[i][n])
        {
            int val=0;
            for(int j=i;j<=n;++j)
                val=val*2+str[j]-'0';
            ans2=min(ans2,val+minv[i][n]+1);
        }
    printf("%d\n%d\n",ans1,ans2);
}
int main()
{
    scanf("%s",str+1);
    Dp();
    return 0;
}
