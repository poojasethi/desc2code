#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int maxn=5010,MOD=int(1e9+7),INF=0x3f3f3f3f;
typedef long long LL;

char str[maxn];
int n;

int lcp[maxn][maxn];
int D[maxn][maxn],F[maxn][maxn];

void update(int a,int b,int c,int d,int dlt) {
    F[a][b]=(F[a][b]+F[c][d])%MOD;
    D[a][b]=min(D[a][b],D[c][d]+dlt);
}

bool cmp(int a,int b,int c,int d) {
    if(b-a!=d-c) {
        return b-a>d-c;
    }
    if(lcp[a][c]>=b-a+1) {
        return 0;
    }
    return str[a+lcp[a][c]]=='1';
}

LL eval(char* s,int mod) {
    LL val=0;
    for(;*s;s++) {
        val=(val<<1)|(*s-'0');
        if(mod) {
            val%=mod;
        }
    }
    return val;
}

int main() {
    //freopen("input.txt","r",stdin);
    scanf("%s",str);
    n=strlen(str);
    for(int i=n-1;i>=0;i--) {
        for(int j=n-1;j>=0;j--) {
            if(str[i]==str[j]) {
                lcp[i][j]=lcp[i+1][j+1]+1;
            }
        }
    }
    for(int i=0;i<n;i++) {
        for(int j=0;j<=i;j++) {
            D[i][j]=INF;
            F[i][j]=0;
        }
    }
    F[0][0]=1;
    D[0][0]=1;
    for(int i=0;i<n;i++) {
        for(int j=0;j<=i;j++) {
            if(str[j]=='1') {
                update(i+1,j,i,j,0);//ÕâÀïÓÃ²¿·ÖºÍÓÅ»¯×ªÒÆ
                if(str[i+1]=='1') {
                    int L=i-j+1;
                    if(i+L<n&&!cmp(j,i,i+1,i+L)) {
                        update(i+L,i+1,i,j,1);
                    } else if(i+L+1<n) {
                        update(i+L+1,i+1,i,j,1);
                    }
                }
            }
        }
    }
    int ans1=0;
    LL ans2=0;
    bool flag=false;
    for(int i=0;i<n;i++) {
        if(str[i]=='1'&&F[n-1][i]) {
            ans1=(ans1+F[n-1][i])%MOD;
            if(n-i<=40) {//Èç¹û¸ß¾«¶ÈÊýÌ«´óÁË£¬D[][]µÄÖµ²»ÄÜÓ°Ïì×îÓÅÐÔ 
                if(!flag) {
                    flag=true;
                    ans2=eval(str+i,0)+D[n-1][i];
                } else {
                    ans2=min(ans2,eval(str+i,0)+D[n-1][i]);
                }
            } else {
                ans2=(eval(str+i,MOD)+D[n-1][i])%MOD;
            }
        }
    }
    printf("%d\n%d\n",ans1,int(ans2%MOD));
    return 0;
}