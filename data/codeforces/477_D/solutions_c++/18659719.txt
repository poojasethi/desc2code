#include <algorithm>
#include <cstdio>
#include <memory.h>
#include <set>
#include <queue>
#include <string.h>
#include <vector>
#include <cmath>
#include <bitset>
#include <map>

using namespace std;

#define NN 5050
#define rep(i, a, b) for (int i = (a); i < (b); i ++)
#define clr(a, b) memset(a, b, sizeof(a))
#define eps 1e-10
#define inf 1000000000
#define MOD 1000000007

typedef long long INT;
typedef pair<int, int> pii;
typedef pair<pii, int> pi3;

int best[NN][NN], val[NN][NN], len[NN][NN], mlen[NN][NN], nxt[NN];
char str[NN];
int can[NN][NN];


int main() {
	
	int le, x, y, st, ans, mn, va, res;
	scanf("%s", str);
	le = strlen(str);
	clr(nxt, 0x3f3f3f3f); clr(can, 0x3f3f3f3f);
	
	rep(i, 0, le) {
		rep(j, i, le) if (str[j] == '1') {
			nxt[i] = j;
			break ;
		}
	}
	
	
	for (int i = le - 1; i >= 0; i --) {
		rep(j, i + 1, le) {
			if (str[i] != str[j]) can[i][j] = j;
			else can[i][j] = can[i + 1][j + 1];
		}
	}
	
	rep(i, 0, le) {
		len[i][i] = mlen[i][i] = inf;
		for (int j = i; j >= 0; j --) {
			if (j < i) {
				val[i][j] = val[i][j + 1];
				mlen[i][j] = mlen[i][j + 1];
			}
			if (str[j] == '0') continue ;
			if (j == 0) {
				best[i][j] = 1;
				val[i][j] = (val[i][j] + best[i][j]) % MOD;
				len[i][j] = 1;
				mlen[i][j] = 1;
				continue ;
			}
			x = j - 1;
			y = x + j - i;
			if (y < 0) st = 0;
			else if (can[y][j] > i || str[can[y][j] - (i - x)] < str[can[y][j]]) st = y;
			else st = y + 1;
			st = nxt[st];
			if (st >= j) continue ;
			best[i][j] = val[x][st];
			val[i][j] = (val[i][j] + best[i][j]) % MOD;
			len[i][j] = 1 + mlen[x][st];
			if (j == i) mlen[i][j] = len[i][j];
			else mlen[i][j] = min(mlen[i][j], len[i][j]);
		}
	}
	ans = val[le - 1][0];
	bool ok = false ;
	va = 0; res = 1;
	for (int i = le - 1; i >= 0; i --) {
		if (str[i] == '1') va = (va + res) % MOD;
		res = res * 2 % MOD;
		if (ok && le - i > 20) break ;
		if (str[i] == '0') continue ;
		if (best[le - 1][i] == 0) continue ;
		if (!ok) {
			mn = (len[le - 1][i] + va) % MOD;
			ok = true ;
			if (le - i > 20) break ;
		} else mn = min(mn, len[le - 1][i] + va);
	}
	printf("%d\n%d\n", ans, mn);
	
	return 0;
}
                               