#include <set>
#include <map>
#include <list>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#include <cctype>
#include <string>
#include <vector>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <functional>
using namespace std;
const int maxn = 5010, mod = 1000000007, INF = 0x7f7f7f7f;
int n, p[maxn][maxn], f[maxn][maxn], g[maxn][maxn];
char str[maxn];
void upd(int &x, int y)
{
	if(x > y)
		x = y;
}
void inc(int &x, int y)
{
	x += y;
	if(x >= mod)
		x -= mod;
}
int main()
{
	scanf("%s", str + 1);
	n = strlen(str + 1);
	for(int i = n; i > 0; --i)
		for(int j = n; j > i; --j)
			p[i][j] = str[i] == str[j] ? p[i + 1][j + 1] + 1 : 0;
	memset(g, 0x7f, sizeof g);
	f[1][1] = 1;
	g[1][1] = 1;
	for(int i = 1; i < n; ++i)
	{
		for(int j = 1; j <= i; ++j)
		{
			// f[i][j] -> f[i+1][j+1]
			{
				inc(f[i + 1][j + 1], f[i][j]);
				upd(g[i + 1][j + 1], g[i][j]);
			}
			if(i + j <= n && str[i + 1] != '0')// f[i][j] -> f[i+j][j] or f[i+j+1][j+1]
			{
				int len = p[i - j + 1][i + 1] < j ? p[i - j + 1][i + 1] + 1 : j;
				if(str[i - j + len] <= str[i + len])
				{
					inc(f[i + j][j], f[i][j]);
					upd(g[i + j][j], g[i][j] + 1);
				}
				else if(i + j + 1 <= n)
				{
					inc(f[i + j + 1][j + 1], f[i][j]);
					upd(g[i + j + 1][j + 1], g[i][j] + 1);
				}
			}
		}
	}
	/*for(int i = 1; i <= n; ++i)
		for(int j = 1; j <= i; ++j)
			printf("%d%c", f[i][j], " \n"[j == i]);
	for(int i = 1; i <= n; ++i)
		for(int j = 1; j <= i; ++j)
			printf("%d%c", g[i][j], " \n"[j == i]);*/
	int ans1 = 0, ans2 = INF;
	for(int i = 1; i <= n; ++i)
		inc(ans1, f[n][i]);
	for(int i = 1, pow2 = 1, tmp = 0; i <= n; ++i, inc(pow2, pow2))
	{
		if(str[n + 1 - i] == '1')
			inc(tmp, pow2);
		if(g[n][i] != INF && ans2 > tmp + g[n][i])
			ans2 = tmp + g[n][i];
		if(i >= 13 && ans2 != INF)
			break;
	}
	printf("%d\n%d\n", ans1, ans2);
	return 0;
}
	 		 	   		    	  		 	 		 					