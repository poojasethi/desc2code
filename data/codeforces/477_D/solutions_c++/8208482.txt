#include <iostream>

using namespace std;

const int INF = 1000000000;
const int MOD = 1000000007;
const int MAXN = 5010;
const int MAXL = 30;
int dp[MAXN][MAXN];
int sum[MAXN][MAXN];
int lng[MAXN][MAXN];
string s;
bool checkLess(int a, int b, int len)
{
	if (lng[a][b] == 0)
		return false;
	if (lng[a][b] >= len)
		return true;
	return s[a + lng[a][b]] < s[b + lng[a][b]];
}
int main()
{
	cin >> s;
	int n = s.length();
	for (int i = n - 1; i >= 0; i--)
		for (int j = i + 1; j < n; j++)
			if (s[i] != s[j])
				lng[i][j] = 0;
			else
				lng[i][j] = lng[i + 1][j + 1] + 1;
	dp[0][0] = 1; 
	for (int i = 0; i <= n; i++)
		sum[0][i] = 1;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= i; j++)
		{
			dp[i][j] = 0;
			sum[i][j] = sum[i][j - 1];
			if (s[i - j + 1 - 1] == '0')
				continue;
			dp[i][j] = (dp[i][j] + sum[i - j][j - 1]) % MOD;
			if (i >= 2 * j && checkLess(i - 2 * j, i - j, j))
				dp[i][j] = (dp[i][j] + dp[i - j][j]) % MOD;
			sum[i][j] = (sum[i][j] + dp[i][j]) % MOD;
			//cerr << i << " " << j << " " << dp[i][j] << " " << sum[i][j] << endl;
		}
		for (int j = i + 1; j <= n; j++)
		{
			dp[i][j] = 0;
			sum[i][j] = sum[i][i];
		}
	}
	cout << sum[n][n] << endl;
	dp[0][0] = 0; 
	for (int i = 0; i <= n; i++)
		sum[0][i] = 0;
	for (int i = 1; i <= n; i++)
	{
		dp[i][0] = INF;
		sum[i][0] = INF;
		for (int j = 1; j <= i; j++)
		{
			dp[i][j] = INF;
			sum[i][j] = sum[i][j - 1];
			if (s[i - j + 1 - 1] == '0')
				continue;
			dp[i][j] = min(dp[i][j], sum[i - j][j - 1] + 1);
			if (i >= 2 * j && checkLess(i - 2 * j, i - j, j))
				dp[i][j] = min(dp[i][j], dp[i - j][j] + 1);
			sum[i][j] = min(sum[i][j], dp[i][j]);
		}
		for (int j = i + 1; j <= n; j++)
		{
			dp[i][j] = INF;
			sum[i][j] = sum[i][i];
		}
	}
	int ans2 = -1;
	for (int j = 1; j < MAXL && j <= n; j++)
		if (dp[n][j] != INF)
		{
			int ans = 0;
			for (int x = n - j; x < n; x++)
				ans = (ans * 2 + s[x] - '0') % MOD;
			ans = (ans + dp[n][j]) % MOD;
			if (ans2 != -1)
				ans2 = min(ans2, ans);
			else
				ans2 = ans;
		}
	if (ans2 != -1)
	{
		cout << ans2 << endl;
		return 0;
	}
	for (int j = MAXL; j <= n; j++)
		if (dp[n][j] != INF)
		{
			int ans = 0;
			for (int x = n - j; x < n; x++)
				ans = (ans * 2 + s[x] - '0') % MOD;
			ans = (ans + dp[n][j]) % MOD;
			cout << ans << endl;
			break;
		}
	return 0;
}

