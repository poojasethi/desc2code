#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int MAXN=5005;
const int INF=0x3f3f3f3f;
const int MOD=1000000007;
char x[MAXN];
int lcp[MAXN][MAXN],cnt[MAXN][MAXN],dp[MAXN][MAXN],val[MAXN];
bool check(int a,int b,int l) {
    return lcp[a][b]<l?x[a+lcp[a][b]]<x[b+lcp[a][b]]:true;
}
int main() {
    while(~scanf("%s",x+1)) {
        int len=strlen(x+1);
        memset(lcp,0,sizeof(lcp));
        memset(cnt,0,sizeof(cnt));
        memset(dp,0x3f,sizeof(dp));
        for(int i=len; i; --i)
            for(int j=len; j; --j)
                lcp[i][j]=x[i]==x[j]?lcp[i+1][j+1]+1:0;
        cnt[0][0]=1;
        dp[0][0]=0;
        for(int i=1; i<=len; ++i)
            for(int j=1; j<=i; ++j) {
                cnt[i][j]=cnt[i][j-1];
                dp[i][j]=dp[i][j-1];
                if(x[i-j+1]=='0')
                    continue;
                if(i-j<j) {
                    cnt[i][j]+=cnt[i-j][i-j];
                    if(dp[i-j][i-j]!=INF)
                        dp[i][j]=min(dp[i][j],dp[i-j][i-j]+1);
                } else if(check(i-j-j+1,i-j+1,j)) {
                    cnt[i][j]+=cnt[i-j][j];
                    if(dp[i-j][j]!=INF)
                        dp[i][j]=min(dp[i][j],dp[i-j][j]+1);
                } else {
                    cnt[i][j]+=cnt[i-j][j-1];
                    if(dp[i-j][j-1]!=INF)
                        dp[i][j]=min(dp[i][j],dp[i-j][j-1]+1);
                }
                if(cnt[i][j]>=MOD)
                    cnt[i][j]-=MOD;
            }
        val[len+1]=0;
        int base=1;
        for(int i=len; i; --i) {
            val[i]=val[i+1];
            if(x[i]=='1') {
                val[i]+=base;
                if(val[i]>=MOD)
                    val[i]-=MOD;
            }
            base<<=1;
            if(base>=MOD)
                base-=MOD;
        }
        int ans=INF;
        for(int i=1; i<=15; ++i)
            ans=min(ans,dp[len][i]+val[len-i+1]);
        for(int i=16; i<=len&&ans==INF; ++i)
            ans=min(ans,dp[len][i]+val[len-i+1]);
        printf("%d\n%d\n",cnt[len][len],ans);
    }
}

  		          			  	 	 				  		