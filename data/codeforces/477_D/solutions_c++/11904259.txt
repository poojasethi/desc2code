#include <stdio.h>
#include <algorithm>
#include <string.h>
using namespace std;
#define M 5010
#define min(a, b) (a > b ? b : a)

const int mod = 1000000007;
char s[M];
int f[M][M], g[M][M], n;
short int lcp[M][M], mn[M][M], MN[M][M];

int calc(int l, int en){
	int tp = 0;
	for (int i = en - l + 1; i <= en; i++) {tp = 2 * tp + s[i] - '0'; tp %= mod;}
	return tp;
}

int main(){
//	freopen("D.in", "r", stdin);
	scanf("%s", s + 1); n = strlen(s + 1);
	for (int i = 0; i <= n; i++) for (int j = 0; j <= n; j++) mn[i][j] = M, MN[i][j] = M;
	for (int i = 0; i <= n; i++) MN[0][i] = 0, mn[0][i] = 0;
	for (int i = 0; i <= n; i++) g[0][i] = 1;
	for (int i = n; i; i--) for (int j = i + 1; j <= n; j++) {
		if (s[i] != s[j]) lcp[i][j] = 0; else lcp[i][j] = lcp[i+1][j+1] + 1;
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= i; j++) {
			if (s[i-j+1] == '0') continue;
			mn[i][j] = min(mn[i][j], MN[i-j][j-1]+1);

			f[i][j] += g[i-j][j-1]; if (f[i][j] >= mod) f[i][j] -= mod;

			if (i < 2 * j) {if (f[i][j] >= mod) f[i][j] -= mod; mn[i][j] = min(MN[i-j][j]+1, mn[i][j]);}
			else {
				int bf = 1;
				int x = lcp[i-2*j+1][i-j+1];
				if (x < j && s[i-2*j+x+1] > s[i-j+x+1]) bf = 0;
				if (bf) {
					f[i][j] += f[i-j][j]; if (f[i][j] >= mod) f[i][j] -= mod; mn[i][j] = min(MN[i-j][j]+1, mn[i][j]);
				}
			}
		}
		for (int j = 1; j <= n; j++) {
			g[i][j] = g[i][j-1] + f[i][j]; if (g[i][j] >= mod) g[i][j] -= mod; MN[i][j] = min(MN[i][j-1], mn[i][j]);
		}
	}
	printf("%d\n", g[n][n]);
	int L, ans = M*M, tp;
	for (int i = 1; i <= min(20, n); i++) {
		if (f[n][i]){
			tp = calc(i, n);
			if (2 * i > n) tp += (MN[n-i][i] + 1);
			else {
				int x = lcp[n-2*i+1][n-i+1];
				if (x < i && s[n-2*i+x+1] > s[n-i+x+1]) tp += (MN[n-i][i-1] + 1);
				else tp += (MN[n-i][i] + 1);
			}
			if (tp < ans) ans = tp;
		}
	}
	if (ans < M * M) return printf("%d\n", ans), 0;
	for (int i = 1; i <= n; i++) if (f[n][i]) {L = i; break;}
	ans = calc(L, n);
	if (2 * L > n) ans += (MN[n-L][L] + 1);
	else {
		int x = lcp[n-2*L+1][n-L+1];
		if (x < L && s[n-2*L+x+1] > s[n-L+x+1]) ans += (MN[n-L][L-1] + 1);
		else ans += (MN[n-L][L] + 1);
	}
	printf("%d\n", ans%mod);
	return 0;
}
