/*
	Orz*inf
	Codeforces Round #272 (Div. 1)
*/

#include<cstdio>
#include<algorithm>
#include<cstring>
#include<queue>
#include<map>
#include<vector>
#include<set>
#include<cmath>
#include<cstdlib>
#define rep(i,x,y) for(int i=x;i<=y;++i)
#define dep(i,x,y) for(int i=x;i>=y;--i)
#define LL long long
#define LB long double
#define UL unsigned long long
#define mod 1000000007
#define hash1 100000007
#define hash2 1000000007
#define inf 0x7f7f7f7f
#define infl 0x7f7f7f7f7f7f7f7fll
using namespace std;
inline int lowbit(int x){return x&-x;}
inline int ABS(int x){return x<0?-x:x;}
inline LL ABS(LL x){return x<0?-x:x;}
inline void MAX(int &a,int b){if(b>a)a=b;}
inline void MAX(LL &a,LL b){if(b>a)a=b;}
inline void MIN(int &a,int b){if(b<a)a=b;}
inline void MIN(LL &a,LL b){if(b<a)a=b;}
inline void SUM(int &a,int b){a=(a+b)%mod;}
int fast(int x,int v){int ans=1;for(;v;v>>=1,x=(LL)x*x%mod)if(v&1)ans=(LL)ans*x%mod;return ans;}
LL fast(LL x,LL v){LL ans=1;for(;v;v>>=1,x=x*x%mod)if(v&1)ans=ans*x%mod;return ans;}
inline LL sqr(int x){return x*x;}

#define N 5005

char s[N];
int n,f[N][N],g[N][N],lcp[N][N],ans1,ans2;

int main(){
	scanf("%s",s+1);
	n=strlen(s+1);
	dep(i,n,1) rep(j,i,n)
		lcp[i][j]=s[i]==s[j]?lcp[i+1][j+1]+1:0;
	
	memset(g,0x7f,sizeof(g));
	rep(i,1,n) f[1][i]=1,g[1][i]=0;
	rep(i,1,n) if(s[i]=='1'){
		int sumf=0,ming=inf;
		rep(j,i,n){
			SUM(f[i][j],sumf);
			MIN(g[i][j],ming);
			if(j-i+1<i && s[2*i-j-1]=='1'){
				SUM(sumf,f[2*i-j-1][i-1]);
				MIN(ming,g[2*i-j-1][i-1]+1);
				if(lcp[2*i-j-1][i]>=j-i+1 || s[2*i-j-1+lcp[2*i-j-1][i]]<s[i+lcp[2*i-j-1][i]]){
					SUM(f[i][j],f[2*i-j-1][i-1]);
					MIN(g[i][j],g[2*i-j-1][i-1]+1);
				}
			}
		}
		SUM(ans1,f[i][n]);
	}
	printf("%d\n",ans1);
	
	ans2=-1;
	int base=1,tot=0;
	for(int i=n;i>=n-min(n-1,20) || ans2<0;--i){
		if(s[i]=='1'){
			if(ans2<0){if(g[i][n]<mod) ans2=((g[i][n]%mod+base)%mod+1+tot)%mod;}
			else{if(g[i][n]<mod) MIN(ans2,((g[i][n]%mod+base)%mod+1+tot)%mod);}
			SUM(tot,base);
		}
		SUM(base,base);
	}
	printf("%d\n",ans2);
}
