#include <iostream>
#include <iomanip>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <string>

using namespace std;

const long long MOD = 1e9 + 7;

string s;

const int MAXN = 5100;

int num[MAXN][MAXN];
int same[MAXN][MAXN];
int f[MAXN][MAXN];
int g[MAXN][MAXN];

bool bigger(int x, int y, int l) {
    int c = same[x][y];
    if (c >= l)
        return false;
    return s[x + c] > s[y + c];
}

int main() {
    cin >> s;
    int l = s.length();

    for (int i = 0; i < l; i++) {
        long long x = 0;
        for (int j = i; j < l; j++) {
            x = (x * 2 + (s[j] - '0')) % MOD;
            num[i][j] = x;
        }
    }

    for (int i = l - 1; i >= 0; i--) {
        for (int j = l - 1; j >= 0; j--) {
            if (s[i] != s[j])
                same[i][j] = 0;
            else
                same[i][j] = same[i + 1][j + 1] + 1;
        }
    }

    for (int i = 0; i < l; i++) {
        f[0][i] = 1;
        g[0][i] = 1;
    }

    for (int i = 1; i < l; i++) {
        long long sum = 0;
        int mn = 100000;
        int now = i;
        for (int j = i; j < l; j++) {
            while (now > 0 && (j - i > i - now || j - i == i - now && !bigger(now - 1, i, j - i + 1))) {
                now--;
                sum = (sum + f[now][i - 1]) % MOD;
                mn = min(mn, g[now][i - 1] + 1);
            }
            if (s[i] == '1') {
                f[i][j] = sum;
                g[i][j] = mn;
            } else {
                f[i][j] = 0;
                g[i][j] = 100000;
            }
        }
    }


    long long ansf = 0;
    long long ansg = 1e18;
    for (int i = 0; i < l; i++) {
        ansf = (ansf + f[i][l - 1]) % MOD;
    }
    cout << ansf << endl;
    for (int i = l - 1; i >= 0; i--) {
        if (f[i][l - 1] != 0) {
            ansg = min(ansg, (num[i][l - 1] + g[i][l - 1]) % MOD);
            if (l - i > 30 || i == 0) {
                cout << ansg << endl;
                return 0;
            }
        }
    }
    return 0;
}
