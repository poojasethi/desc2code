#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <bitset>

typedef long long LL;
#define pb push_back
#define MPII make_pair<int, int>
#define PII pair<int, int>
#define sz(x) (int)x.size()

using namespace std;

template<class T> T abs(T x){if (x < 0) return -x; else return x;}

const int maxn = 5010;
const int inf = ~0U >> 1;
const int MOD = 1000000007;
char buf[maxn];
int n;
int lcp[maxn][maxn];
int f[maxn][maxn], sum[maxn][maxn];
int g[maxn][maxn], Min[maxn][maxn];

int main(){
	scanf("%s", buf + 1);
	n = strlen(buf + 1);
	for (int i = n; i >= 1; --i)
		for (int j = n; j >= 1; --j)
			if (buf[i] == buf[j]) lcp[i][j] = lcp[i + 1][j + 1] + 1; else lcp[i][j] = 0;
	f[0][0] = 1;
	sum[0][0] = 1;
	Min[0][0] = 0;
	g[0][0] = 0;
	for (int i = 1; i <= n; ++i){
		for (int j = 1; j <= i; ++j)
			g[i][j] = inf;
		for (int j = 1; j <= i; ++j){
			if (buf[i - j + 1] == '0') continue;
			int u = i - j;
			int v = min(u, j);
			if (v == j){
				int len = lcp[u - v + 1][i - j + 1];
				if (len < j && buf[u - v + 1 + len] == '1') --v;
			}
			f[i][j] = f[i][j] + sum[u][v];
			f[i][j] %= MOD;
			if (Min[u][v] == inf) g[i][j] = inf; else g[i][j] = Min[u][v] + 1;
		}
		sum[i][0] = 0;
		Min[i][0] = inf;
		for (int j = 1; j <= i; ++j){
			Min[i][j] = min(Min[i][j - 1], g[i][j]);
			sum[i][j] = sum[i][j - 1] + f[i][j];
			sum[i][j] %= MOD;
		}
	}

	int S = 0;
	for (int i = 1; i <= n; ++i){
		S += f[n][i];
		S %= MOD;
	}
	printf("%d\n", S);
	int ans = inf, tmp = 0, tt = 1;
	for (int i = 1; i <= min(20, n); ++i){
		if (buf[n - i + 1] == '1') tmp += tt;
		tt <<= 1;
		if (g[n][i] == inf) continue;
		ans = min(ans, g[n][i] + tmp);
	}
	if (ans == inf){
		for (int i = 21; i <= n; ++i){
			if (buf[n - i + 1] == '1'){
				tmp += tt;
				tmp %= MOD;
			}
			tt <<= 1;
			tt %= MOD;
			if (g[n][i] != inf){
				ans = tmp + g[n][i];
				ans %= MOD;
				break;
			}
		}
	}
	printf("%d\n", ans);
	return 0;
}
