#include <bits/stdc++.h>

using namespace std;

#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl

#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)

#define type(x) __typeof(x.begin())

#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)

#define pb push_back
#define mp make_pair

#define nd second
#define st first

#define endl '\n'

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 5004;

int P[N], sum[N][N], dp2[N][N], mn[N][N], dp1[N][N], n, m, x, y, z, t, lcp[N][N], ans;
string str;
char s[N];

int find(int x, int y) {
	int sz = y - x, tt = x - sz + 1;
	if(sz > x) return x;
	int w = lcp[x-sz+1][x+1];
	if(w >= sz) return sz;
	if(str[x+w+1] > str[tt+w]) return sz;
	return sz - 1;
}


int main() {
	
	scanf("%s", s + 1);

	s[0] = '0';
	n = strlen(s + 1);
	str = s;

	if(n == 1) {
		cout << 1 << endl << 1 + (str[1] == '1') << endl; 
		return 0;
	}

	ROF(i, n, 1) 
		ROF(j, n, 1) 
			if(str[i] == str[j])
				lcp[i][j] = lcp[i+1][j+1] + 1;

	memset(dp2, 10, sizeof dp2);
	memset(mn, 10, sizeof mn);

	FOR(j, 1, n) {
		FOR(i, 0, j-1) {
			int k = find(i, j);
			
			if(str[i+1] == '0' && i) continue;
			
			if(i) { 
				dp1[i][j] = sum[i-k][i]; 
				dp2[i][j] = mn[i-k][i] + 1; 
			}

			else {
				dp1[i][j] = 1;
				dp2[i][j] = 1;
				if(str[1] == '0' && i + 1 != j)
					dp1[i][j] = 0,
					dp2[i][j] = inf;
			}
			
			if(j == n) ans = (ans + dp1[i][j]) % mod;
	
		}
		
		ROF(i, j-1, 0)
			sum[i][j] = (sum[i+1][j] + dp1[i][j]) % mod; 
		
		ROF(i, j-1, 0)
			mn[i][j] = min(mn[i+1][j], dp2[i][j]);

	}
	
 	cout << ans << endl;

	ans = inf * 2;

	ROF(i, n, max(0, n-15)) {
		P[i] = ((1 << (n-i)) * (str[i] == '1')) + P[i+1];
		if(str[i] == '1' && dp2[i-1][n] <= n) {
			ans = min(ans, P[i] + dp2[i-1][n]);
		} 
	}
	if(ans != inf * 2) {
		cout << ans % mod << endl;
		return 0;
	}
	
	ans = 0;
	int t = 1;

	ROF(i, n, 0) {
		if(str[i] == '1')
			ans = (ans + t) % mod;
		t = t * 2 % mod;
		if(str[i] == '1' && dp2[i-1][n] < n) {
			cout << (ans + dp2[i-1][n]) % mod << endl;
			return 0;
		}
	}

	return 0;
}
