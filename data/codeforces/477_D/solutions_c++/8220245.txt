
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;

const int INF = ~0U>>1;
const int MOD = (int)1e9+7;
const int MAXN = 5010;
int dp[MAXN][MAXN];
int mi[MAXN][MAXN];
int lcp[MAXN][MAXN],n;
char s[MAXN];

int add(int a,int b)
{
    a+=b;
    if(a>=MOD)a-=MOD;
    return a;
}

int cmp(int a,int b,int c,int d)
{
    if(b-a!=d-c)return b-a < d-c ? -1:1;
    if(lcp[a][c]>=b-a+1)return 0;
    return s[a+lcp[a][c]]=='0' ? -1:1;
}

int main()
{
    scanf("%s",s+1);
    n=strlen(s+1);
    for(int i=n;i>=1;i--){
        for(int j=n;j>=1;j--){
            lcp[i][j]= (s[i]==s[j] ? lcp[i+1][j+1]+1 : 0);
        }
    }
    int ans1=1,ans2=INF,id=1;
    for(int i=1;i<=n;i++)dp[1][i]=1;
    for(int i=2;i<=n;i++){
        if(s[i]=='0')continue;

        int minv=INF>>1;
        int res=0;
        if(s[i-1]=='1')minv=mi[i-1][i-1]+1,res=dp[i-1][i-1];

        for(int j=i,k=i-2;j<=n;j++){

            while(k>=1 && (s[k]=='0' || cmp(k,i-1,i,j)<=0)){

                if(s[k]=='1')minv=min(minv,mi[k][i-1]+1),res=add(res , dp[k][i-1]);
                k--;
            }
            mi[i][j]=minv;
            dp[i][j]=res;
            if(j==n&&dp[i][j]){
                ans1=add(ans1,dp[i][j]);
                id=i;
            }
        }

    }/*
    for(int i=1;i<=n;i++){

        for(int j=i;j<=n;j++)printf("dp[%d][%d] = %d\n",i,j,mi[i][j]);
    }*/
    if(id<(n-20)){
        int res=0;
        for(int i=id;i<=n;i++){
            res=(res*2 + s[i]-'0')%MOD;
        }
        res=add(res,mi[id][n]+1);
        ans2=res;
    }
    else {
    for(int i=max(1,n-20);i<=n;i++){
        if(dp[i][n]){
            int res=0;
            for(int j=i;j<=n;j++){
                res=(res<<1) + s[j]-'0';
            }
            res=res + mi[i][n]+1;
            ans2=min(ans2,res);
        }
    }
    }
    printf("%d\n%d\n",ans1,ans2);
    return 0;
}