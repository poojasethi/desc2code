#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstring>
using namespace std;
#define mod 1000000007
#define lim 5001
#define inf 1000000000
#define p(x) cout<<#x<<":"<<x<<"\n"
int i,j,m,k,res,n;
int M[lim][lim],D[lim][lim],DP[lim][lim];
char Xb[lim];
int main()
{
  scanf("%s",Xb);
  n=strlen(Xb);
  for(i=n-1;i>=0;i--)
    for(j=0;j<n;j++)
      if(Xb[i]==Xb[j])
        M[i][j]=M[i+1][j+1]+1;
      else
        M[i][j]=0;
  D[0][1]=1;
  for(i=0;i<lim;i++)
    fill(DP[i],DP[i]+lim,inf);
  DP[0][1]=1;
  for(j=0;j<n;j++)
  {
    for(i=0;i<j;i++)
    {
      D[i][j+1]=(D[i][j+1]+D[i][j])%mod;
      DP[i][j+1]=min(DP[i][j+1],DP[i][j]);
      m=M[i][j];
      if(m>=j-i || (j+m<n && Xb[i+m]<Xb[j+m]))
        k=2*j-i;
      else
        k=2*j-i+1;
      if(k<=n && Xb[j]=='1')
      {
        D[j][k]=(D[j][k]+D[i][j])%mod;
        DP[j][k]=min(DP[j][k],DP[i][j]+1);
      }
      //printf("%d ",DP[i][j]);
    }
    //printf("\n");
  }
  for(i=0;i<n;i++)
    res=(res+D[i][n])%mod;
    
    long long ans1 = D[0][n] ;
  int ans2 = 0 ;
    long long dif = 1 ;
    for(int s=1;s<n;s++)
    {
        if(DP[s][n]<inf)
        {
            ans1 = (ans1+D[s][n])%mod ;
            //the answer would be X[s..len]+sp[s][len]
            //so diff would be X[ans2..len]+sp[ans2][len]-X[s..len]-sp[s][len]
            //if previous value >= 0 than ans2=s
            //previous value could be expressed as dif*2^(len-s)+sp[ans2][len]-sp[s][len]
            //so if dif*2^(len-s)>=sp[s][len]-sp[ans2][len] will do, BTW the latter max is len or 2000
            long long val = DP[s][n]-DP[ans2][n] ;
            if(val<=0 || s-ans2>12 || n-s>12 || dif*(1<<(n-s))>=val)
            {
                dif = 0 ;
                ans2 = s ;
            }
        }
        dif = (dif<<1)+Xb[s]-'0' ;
    }
    long long ans2val = 0 ;
    for(int i=ans2;i<n;i++)
        ans2val = ((ans2val<<1)+Xb[i]-'0')%mod ;
    ans2val = (ans2val+DP[ans2][n])%mod ;
    
  printf("%d\n%d\n",res,(int)ans2val);
  return 0;
}
