#include <set>
#include <map>
#include <queue>
#include <ctime>
#include <cmath>
#include <vector>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
#define LL long long
bool stt;
const int maxn=10000000;
const LL pp=(1e9)+7;
LL N,res,ans,len;
LL f[maxn+10],p[1000010];
LL q[110],a[500010],mi[500010],ctb[maxn+10],g[maxn];
bool enn;
void dfs(int step,int s){
	if (step==len){
		ctb[s]++;
		return;
	}
	dfs(step+1,s);
	dfs(step+1,s*q[step]);
}
void fact(int x){
	len=0;
	while (x>1){
		q[len]=f[x];
		while (f[x]==q[len])x/=f[x];
		len++;
	}
}
void calc(int step,int s,int miu){
	if (step==len){
		if (s>1)
			res=(res-ctb[s]*miu)%pp;
		return;
	}
	calc(step+1,s,miu);
	calc(step+1,s*q[step],-miu);
}
int main(){
	for (int i=2;i<=maxn;i++){
		if (!f[i]){f[i]=i;p[++len]=i;}
		for (int j=1;j<=len&&p[j]<=f[i]&&p[j]*i<=maxn;j++)
			f[p[j]*i]=p[j];
	}
	scanf("%I64d",&N);
	for (int i=1;i<=N;i++){
		scanf("%I64d",&a[i]);
		fact(a[i]);
		dfs(0,1);
	}
	mi[0]=1;
	for (int i=1;i<=N;i++)mi[i]=mi[i-1]*2%pp;
	for (int i=1;i<=maxn;i++)
		if (ctb[i])ctb[i]=mi[ctb[i]]-1;
	for (int i=maxn;i;i--)
		if (ctb[i]){
			g[i]=ctb[i];
			for (int j=i<<1;j<=maxn;j+=i)
				g[i]-=g[j];
		}
	for (int i=1;i<=N;i++){
		fact(a[i]);
		res=1+g[1];
		calc(0,1,1);
		ans=(ans+mi[N]-res+pp)%pp;
	}
	printf("%I64d",ans);
}