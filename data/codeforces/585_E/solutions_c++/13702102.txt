#include <iostream>

using namespace std;

typedef long long int ll;

ll modulo=1e9+7;

const int limite=10000001;

int esprimo[limite];
int factor[limite];
int anterior[limite];
int incluyen[limite];

void genera(int x,int prod)
{
  if (x==1) {
    incluyen[prod]=2*incluyen[prod]%modulo;
    return;
  }
  genera(anterior[x],prod);
  genera(anterior[x],prod*factor[x]);
}

void calcula(int x,int prod,int cuantos,int &acum)
{
  if (x==1) {
    if (cuantos%2==1) {
      acum=(acum+incluyen[prod]-1)%modulo;
    } else if (cuantos>0) {
      acum=(acum-(incluyen[prod]-1))%modulo;
    }
    return;
  }
  calcula(anterior[x],prod,cuantos,acum);
  calcula(anterior[x],prod*factor[x],cuantos+1,acum);
}

int n;
int a[1000000];

int main()
{
  ios::sync_with_stdio(false);
  for (int i=2;i<limite;i++)
    esprimo[i]=1;
  for (int i=2;i<limite;i++) {
    if (esprimo[i]) {
      factor[i]=i;
      for (int j=i+i;j<limite;j+=i) {
	esprimo[j]=0;
	factor[j]=i;
      }
    }
  }
  for (int i=2;i<limite;i++) {
    anterior[i]=i/factor[i];
    if (factor[i]==factor[anterior[i]])
      anterior[i]=anterior[anterior[i]];
  }
  cin>>n;
  for (int i=0;i<n;i++)
    cin>>a[i];
  for (int i=2;i<limite;i++)
    incluyen[i]=1;
  int total=0;
  for (int i=0;i<n;i++) {
    int acum=0;
    calcula(a[i],1,0,acum);
    total=(total+acum+1)%modulo;
    genera(a[i],1);
  }
  int sol=0;
  for (int i=0;i<n;i++) {
    int acum=0;
    calcula(a[i],1,0,acum);
    sol=(sol+(total-acum)%modulo)%modulo;
  }
  cout<<((sol%modulo+modulo)%modulo)<<endl;
}
