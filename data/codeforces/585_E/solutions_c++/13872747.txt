#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
using namespace std;
typedef long long i64;
const int N = 5e5 + 10, M = 1e7 + 10, MOD = 1e9 + 7;

template <class T>
inline void Read(T &x) {
	bool f = 0;
	char c;
	x = 0;
	while (c = getchar(), (c < '0' || c > '9') && c != '-');
	if (c == '-') f = 1; else x = c - '0';
	while (c = getchar(), c >= '0' && c <= '9') x = x * 10 + c - '0';
	if (f) x = -x;
}

int n, a[N], b[N][10], c[N], cnt[M], power_2[M];
int prime[M], tot, flag[M], miu[M];

void PreProcess() {
	miu[1] = 1;
	for (int i = 2; i < M; ++ i) {
		if (! flag[i]) { flag[i] = i, prime[++ tot] = i, miu[i] = -1; }
		for (int j = 1; j <= tot && i * prime[j] < M; ++ j) {
			flag[i * prime[j]] = prime[j];
			if (i % prime[j] == 0) { miu[i * prime[j]] = 0; break; }
			else miu[i * prime[j]] = miu[i] * miu[prime[j]];
		}
	}
	power_2[0] = 1;
	for (int i = 1; i < M; ++ i)
		power_2[i] = 1ll * power_2[i - 1] * 2 % MOD;
}

void Dfs(int x, int l, int idx, int prod = 1) {
	if (x > l) { ++ cnt[prod]; return; }
	Dfs(x + 1, l, idx, prod);
	Dfs(x + 1, l, idx, prod * b[idx][x]);
}

void Init() {
	Read(n);
	for (int i = 1; i <= n; ++ i) {
		Read(a[i]);
		int x = a[i], &t = c[i];
		while (x != 1) {
			int pr = flag[x];
			b[i][++ t] = pr;
			while (x % pr == 0) x = x / pr;
		}
		Dfs(1, t, i);
	}
}

int A, B;

void Solve() {
	for (int i = 1; i < M; ++ i) 
		A = (A + 1ll * miu[i] * (power_2[cnt[i]] - 1) % MOD) % MOD;
	A = (A + MOD) % MOD;
	B = ((power_2[n] - 1 - A) % MOD + MOD) % MOD;
	int ans = 0;
	for (int i = 1; i <= n; ++ i) {
		int res = 0, full = (1 << c[i]) - 1;
		for (int j = 1; j <= full; ++ j) {
			int prod = 1;
			for (int k = 1, s = j; s; s >>= 1, ++ k)
				if (s & 1) prod = prod * b[i][k];
			res = (res - 1ll * miu[prod] * (power_2[cnt[prod]] - 1) % MOD) % MOD;
		}
		res = (res + MOD) % MOD;
		res = (B - res + MOD) % MOD;
		ans = (ans + res) % MOD;
	}
	printf("%d\n", ans);
}

int main() {

	PreProcess();
	Init();
	Solve();

	return 0;
}


