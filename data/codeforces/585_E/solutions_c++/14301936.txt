#include <bits/stdc++.h>
#define fi first
#define se second
#define m ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)
#define bit(a,b) (a & (1<<b))
#define foreach(asd,it) for(__typeof(asd.begin()) it=asd.begin();it!=asd.end();it++)
#define count(aa) __builtin_popcount(aa)
#define endl '\n'

using namespace std;

typedef long long lint;
typedef double db;
typedef pair <lint,lint> ii;
typedef vector <lint> vi;
typedef vector <ii> vii;

const lint lim=1e7+1,mod=1e9+7;

int N,S,res,cnt[lim+10],rem[lim+10],sm[lim+10],pow2[lim+10];
vi v;

lint carp(lint a,lint b){ return (1ll*a*b)%mod;}
lint top(lint a,lint b){ return (a+b >= mod ? a+b-mod: a+b);}
lint cik(lint a,lint b){ return (a-b<0 ? a-b+mod : a-b);}

void find_div(lint a){
	v.clear();
	
	while(a!=1){
		while(sm[a]==sm[a/sm[a]]) a/=sm[a];
		v.push_back(sm[a]);
		a/=sm[a];
	}
	
	S=v.size();
}

void find_sm(){
	for(lint i=2;i<lim;i++) if(!sm[i]){
		sm[i]=i;
		for(lint j=1ll*i*i;j<lim;j+=i)
			if(!sm[j]) sm[j]=i;
	}
}

void add(lint x){
	for(lint i=0;i<(1<<S);i++){
		lint asd=1;
		
		for(lint k=0;k<S;k++) if(bit(i,k))
			asd=carp(asd,v[k]);
			
		cnt[asd]=top(cnt[asd],x);
	}
}

lint prw(lint a){
	find_div(a);
	
	lint ret=N;
	
	for(lint i=0;i<(1<<S);i++){
		lint asd=1;
		
		for(lint k=0;k<S;k++) if(bit(i,k))
			asd*=v[k];
		
		if(count(i)&1)
			ret=cik(ret,rem[asd]);
		else
			ret=top(ret,rem[asd]);
		
		if(asd<a)
			cnt[asd]=cik(cnt[asd],cnt[a]);
	}
	return ret;
}

int main(){
	pow2[0]=1;
	for(int i=1;i<=lim;i++)
		pow2[i]=(pow2[i-1]*2)%mod;
	
	find_sm();
	
	cin >> N;
	
	for(lint i=1;i<=N;i++){
		lint a;
		scanf("%lld",&a);
		vi v;
		
		find_div(a);
		add(1);
	}

	for(lint i=2;i<lim;i++) rem[i]=cnt[i] , cnt[i]=cik(pow2[cnt[i]],1);
	
	for(lint i=lim-1;i>1;i--) if(cnt[i])
		res=top(res,carp(cnt[i],prw(i)));
	
	cout << res << endl;
	
	return 0;
}
