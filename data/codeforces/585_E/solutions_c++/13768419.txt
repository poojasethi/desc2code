#include <cstdio>

typedef long long ll;

const int MAXA = 1E7 + 10, MAXN = 5E5 + 10, MAXD = 8;
const ll MOD = 1E9 + 7;

bool np[MAXA + 1];
int minp[MAXA + 1];
int pcnt, prime[MAXA / 10];

void EulerSieve(){
	pcnt = 0;
	for (int i = 2; i <= MAXA; ++i){
		if (!np[i]){
			minp[i] = i;
			prime[pcnt++] = i;
		}
		for (int j = 0; j < pcnt && prime[j] <= MAXA / i; ++j){
			np[prime[j] * i] = true;
			minp[prime[j] * i] = prime[j];
			if (i % prime[j] == 0)
				break;
		}
	}
}

ll exp2[MAXN];

int n, a[MAXN];
int cntd[MAXN], div[MAXN][MAXD];
int cnt[MAXA];
ll tot, tot2;

void insert(int d[], int dep, int num, bool flag){
	if (dep < 0){
		if (num > 1){
			if (flag)
				tot = (tot + exp2[cnt[num]]) % MOD;
			else
				tot = (tot - exp2[cnt[num]]) % MOD;
			++cnt[num];
		}
		return;
	}

	insert(d, dep - 1, num, flag);
	insert(d, dep - 1, num * d[dep], !flag);
}

void count(int d[], int dep, int num, bool flag){
	if (dep < 0){
		if (num > 1){
			if (flag)
				tot2 = (tot2 + exp2[cnt[num] - 1]) % MOD;
			else
				tot2 = (tot2 - exp2[cnt[num] - 1]) % MOD;
		}
		return;
	}

	count(d, dep - 1, num, flag);
	count(d, dep - 1, num * d[dep], !flag);
}

int main(){
	EulerSieve();
	exp2[0] = 1;
	for (int i = 1; i < MAXN; ++i)
		exp2[i] = (exp2[i - 1] << 1) % MOD;

	scanf("%d", &n);
	tot = 1;
	for (int u, i = 0; i < n; ++i){
		scanf("%d", &a[i]);
		cntd[i] = 1;
		div[i][0] = minp[a[i]];
		for (u = a[i] / minp[a[i]]; u > 1; u /= minp[u])
			if (minp[u] != div[i][cntd[i] - 1])
				div[i][cntd[i]++] = minp[u];
		insert(div[i], cntd[i] - 1, 1, false);
	}

	tot2 = 0;
	for (int i = 0; i < n; ++i)
		count(div[i], cntd[i] - 1, 1, false);

	printf("%I64d\n", ((tot * n - tot2 * 2) % MOD + MOD) % MOD);
	return 0;
}
