#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

const int mod=1000000007;
int n,m,a[500005],cnt[10000005],power[500005],set[10000005],prime[10000005],fact[10000005],pnum,ans;
bool ok[10000005];
vector<int> factor;
vector<pair<int,int> > pfact;
inline void euler() {
	for (int i=2;i<=10000000;i++) {
		if (!ok[i]) prime[++pnum]=i,fact[i]=i;
		for (int j=1;j<=pnum;j++) {
			if (i*prime[j]>10000000) break;
			ok[i*prime[j]]=true;
			fact[i*prime[j]]=prime[j];
			if (i%prime[j]==0) break;
		}
	}
}
void get_all_fact(int now,int number) {
	if (now==pfact.size()) {
		factor.push_back(number);
		return;
	}
	for (int i=0;i<=pfact[now].second;i++) {
		get_all_fact(now+1,number);
		number*=pfact[now].first;
	}
}
inline void getfact(int x) {
	while (x!=1) {
		if ((!pfact.empty())&&(pfact[pfact.size()-1].first==fact[x])) pfact[pfact.size()-1].second++; else pfact.push_back(make_pair(fact[x],1));
		x/=fact[x];
	}
	get_all_fact(0,1);
}
int main() {
	euler();
	power[0]=1;
	for (int i=1;i<=500000;i++) power[i]=(power[i-1]<<1)%mod;
	scanf("%d",&n);
	for (int i=1;i<=n;i++) {
		scanf("%d",&a[i]);
		factor.clear();
		pfact.clear();
		getfact(a[i]);
		for (int j=0;j<factor.size();j++) cnt[factor[j]]++;
	}
	for (int i=1;i<=10000000;i++) set[i]=(power[cnt[i]]-1+mod)%mod; 
	for (int i=10000000;i;i--)
		for (int j=i<<1;j<=10000000;j+=i) set[i]=(set[i]-set[j]+mod)%mod;
	for (int i=2;i<=10000000;i++) {
		if (set[i]==0) continue;
		int x=i,num=0;
		factor.clear();
		while (x!=1) {
			factor.push_back(fact[x]);
			while (fact[x]==factor[factor.size()-1]) x/=fact[x];
		}
		for (int j=0;j<1<<factor.size();j++) {
			int x=1,f=1;
			for (int k=0;k<factor.size();k++) if (j&(1<<k)) x*=factor[k],f*=-1;
			num=(num+f*cnt[x]+mod)%mod;
		}
		ans=(ans+(long long)num*set[i]%mod+mod)%mod;
	}
	ans=(ans+mod)%mod;
	printf("%d\n",ans);
	return 0;
}
