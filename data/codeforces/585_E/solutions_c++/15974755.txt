#include <bits/stdc++.h>
//Keep your friends rich, and your enemies rich, and wait to find out which is which.

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXA = 1e7 + 5, MOD = 1e9 + 7, MAXN = 5e5 + 5;

int p[MAXA], cnt[MAXA], a[MAXN], pw[MAXN];

int t[10];
vector<int> msk[MAXN];
int val[MAXN], vN;
inline void factorize(int ind, int x){
	int tN = 0;
	while (x != 1){
		t[tN] = p[x];
		while (x % t[tN] == 0)
			x /= t[tN];
		tN++;
	}

	for (int i = 0; i < (1 << tN); i++){
		int tmp = 1;
		for (int j = 0; j < tN; j++)
			if (i >> j & 1) tmp *= t[j];
		msk[ind].push_back(tmp);
	}
}

ll ans = 0;
inline void add(int ind, int q){
	for (int i = 0; i < msk[ind].size(); i++){
		int ex = msk[ind][i];
		cnt[ex] += q;

		ans += (__builtin_popcount(i) % 2 ? -1 : 1) * (pw[cnt[ex]] - pw[cnt[ex] - q]), ans %= MOD;
		//cerr << "added " << ans - tmp << " : " << pw[cnt[ex]] " - " << pw[cnt" for " << ex << endl;
	}
}

int main(){
	//ios::sync_with_stdio( false );
	//cout.tie(0); cin.tie(0);

	for (int i = 2; i < MAXA; i++)
		if (!p[i]) for (int j = i; j < MAXA; j += i)
			p[j] = i;

	pw[0] = 1;
	for (int i = 1; i < MAXN; i++)
		pw[i] = (pw[i - 1] * 2) % MOD;
	for (int i = 0; i < MAXN; i++) pw[i]--;

	

	int n; scanf("%d", &n);
	for (int i = 0; i < n; i++){
		scanf("%d", &a[i]);
		val[vN++] = a[i];
//		cerr << i << " : " << ans << endl;
	}

	sort(val, val + vN);
	vN = unique(val, val + vN) - val;

	for (int i = 0; i < vN; i++) factorize(i, val[i]);

	for (int i = 0; i < n; i++){
		a[i] = lower_bound(val, val + vN, a[i]) - val;
		add(a[i], 1);
	}
//	cerr << ans << endl;

	ll tmp = ans, outp = 0;
	for (int i = 0; i < n; i++){
		add(a[i],  -1 );
		outp += (tmp - ans * 2) % MOD;
		outp %= MOD;
		//cerr << "removed " << i << " : " << ans << endl;
		add(a[i],  1 );
	}

	cout << (outp + MOD) % MOD << endl;
}

