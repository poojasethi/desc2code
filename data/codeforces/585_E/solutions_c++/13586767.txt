#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>

using namespace std;

const long long oo = 1000000007;
bool vis[5000];
int p[5000] , tot[10000010] , mu[10000010] , v[100] , a[500010];
long long p2[500010];

void init()
{
	for( int i = 2 ; i <= 3300 ; i++ )
		if( !vis[i] )
		{
			p[++p[0]] = i;
			for( int j = i+i ; j <= 3300 ; j += i )
				vis[j] = 1;
		}
	for( int i = 1 ; i <= 10000000 ; i++ )
	{
		int target = i == 1 , delta = target-mu[i];
		mu[i] = delta;
		for( int j = i+i ; j <= 10000000 ; j += i )
			mu[j] += delta;
	}
	p2[0] = 1;
	for( int i = 1 ; i <= 500000 ; i++ )
		p2[i] = p2[i-1]*2%oo;
}

void seperate( int x )
{
	v[0] = 0;
	for( int i = 1 ; p[i]*p[i] <= x ; i++ )
		if( x%p[i] == 0 )
		{
			v[++v[0]] = p[i];
			for( ; x%p[i] == 0 ; x /= p[i] );
		}
	if( x != 1 )
		v[++v[0]] = x;
}

void add()
{
	for( int i = 0 ; i < (1<<v[0]) ; i++ )
	{
		int cur = 1;
		for( int j = 0 ; j < v[0] ; j++ )
			if( i&(1<<j) )
				cur *= v[j+1];
		tot[cur]++;
	}
}

long long delta()
{
	long long ret = 0;
	for( int i = 1 ; i < (1<<v[0]) ; i++ )
	{
		int sgn = -1 , cur = 1;
		for( int j = 0 ; j < v[0] ; j++ )
			if( i&(1<<j) )
			{
				sgn *= -1;
				cur *= v[j+1];
			}
		ret += sgn*(p2[tot[cur]]-1);
	}
	return ret;
}

int main()
{
	init();
	int n;
	cin >> n;
	for( int i = 0 ; i < n ; i++ )
	{
		cin >> a[i];
		seperate( a[i] );
		add();
	}
	long long com = 0 , ans = 0;
	for( int i = 2 ; i <= 10000000 ; i++ )
		com = (com-mu[i]*(p2[tot[i]]-1))%oo;
	for( int i = 0 ; i < n ; i++ )
	{
		seperate( a[i] );
		ans = (ans+com-delta())%oo;
	}
	cout << (ans+oo)%oo << endl;
	return 0;
}
