#include <bits/stdc++.h>

using namespace std;

#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl

#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)

#define type(x) __typeof(x.begin())

#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)

#define pb push_back
#define mp make_pair

#define nd second
#define st first

#define endl '\n'

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 5e5 + 5;
const int M = 1e7 + 5;

int K, n, a[N], P[N], C[M], ans[M], h[M], q[100], odd[N], D[M], res;

inline int take(int x) {
	int s = 0, res = 0;	
	while(x > 1) {
		int t = D[x];
		while(x > 1 && D[x] == t) 
			x /= t;
		q[s++] = t;
	}
	int go = (1 << s) , t;
	for(int i = 0; i < go; i++) {
		t = 1;
		for(int j = 0; j < s; j++)
			if(i & (1 << j))
				t *= q[j];
		res += (2 * odd[i] - 1) * C[t];
	} 
	return n - res;
}

int main() {
	
	scanf("%d",&n);
	
	FOR(i,1,n) {
		scanf("%d",&a[i]);
		h[a[i]]++;
	}
	P[0] = 1;
	FOR(i, 1, N-1)
		P[i] = P[i-1] * 2 % mod;
	for(int i = 0; i < N; i++)
		odd[i] = (__builtin_popcount(i) & 1);
	for(int i = M-1; i > 1; i--) {
		K = 0;
		C[i] = h[i];
		D[i] = i;
		for(int j = 2*i; j < M; j += i) {
			C[i] += h[j];
			D[j] = i;
			ans[i] = (ans[i] - ans[j] + mod) % mod;
		}
		ans[i] = ((ans[i] + P[C[i]]) % mod - 1 + mod) % mod;
	}
	for(int i = M-1; i > 1; i--) {
		if(ans[i])
			res = (res + ans[i] * (ll) take(i) % mod) % mod;	
	}
	cout << res << endl;
    return 0;
}
