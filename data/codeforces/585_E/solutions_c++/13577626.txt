#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 5e5 + 5;
const int K = 1e7 + 5;
const int mod = 1e9 + 7;

int n;
int a[N], power[N], cntG[K], ans[K];

inline int add(int x, int y) {
	return x + y >= mod ? x + y - mod : x + y;
}

inline int mul(int x, int y) {
	return (ll) x * y % mod;
}

const int BIT = 8;

int lp[K];
int my_log[1 << BIT], ppp[1 << BIT], wl[1 << BIT], ls[1 << BIT], prod[1 << BIT];

int sz;
int divs[BIT], cnt[K];

inline int make_divs(int x) {
	sz = 0;
	while(x != 1) {
		int cd = lp[x];
		divs[sz++] = cd;
		while(x % cd == 0)
			x /= cd;
	}
}

inline int get(int i) {
	int ans = 0;
	prod[0] = 1;
	make_divs(i);
	sz = 1 << sz;
	for(int mask = 1; mask < sz; mask++) {
		prod[mask] = prod[wl[mask]] * divs[ls[mask]];
		if(ppp[mask])
			ans += cnt[prod[mask]];
		else
			ans -= cnt[prod[mask]];
	}
	return n - ans;
}

int main() {

	for(int i = 2; i < (1 << BIT); i++)
		my_log[i] = my_log[i >> 1] + 1;
	
	for(int i = 1; i < (1 << BIT); i++)
		ppp[i] = !ppp[i - (i & -i)];
	
	for(int i = 1; i < (1 << BIT); i++)
		wl[i] = i - (i & -i);
	
	for(int i = 1; i < (1 << BIT); i++)
		ls[i] = my_log[i & -i];
	
	scanf("%d", &n);

	for(int i = 1; i <= n; i++) {
		scanf("%d", a + i);
		cntG[a[i]]++;
	}

	power[0] = 1;

	for(int i = 1; i <= n; i++) {
		power[i] = add(power[i - 1], power[i - 1]);
	}

	for(int i = K - 1; i >= 2; i--) {
		int new_c = cntG[i];
		lp[i] = i;
		for(int j = i + i; j < K; j += i) {
			new_c += cntG[j];
			ans[i] = add(ans[i], mod - ans[j]);
			lp[j] = i;
		}
		cnt[i] = new_c;
		ans[i] = add(ans[i], add(power[new_c], mod - 1));
	}

	int rans = 0;

	for(int i = 2; i < K; i++) {
		if(ans[i])
			rans = add(rans, mul(ans[i], get(i)));
	}

	printf("%d\n", rans);

	return 0;

}
