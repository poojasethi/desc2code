#!/usr/bin/env python
# -*- coding:utf-8 -*-
#

def readint(): return int(raw_input())
def readfloat(): return float(raw_input())
def readarray(N, foo):
        res = []
        for _ in xrange(N):
                res.append(foo())
        return res
def readlinearray(foo): return map(foo, raw_input().split())

from collections import defaultdict

def get(N, roads):
    r = defaultdict(lambda: defaultdict(int))
    for a, b, c in roads:
        r[a][b] = 0
        r[b][a] = c
    
    minn = 10**5
    
    _city1 = r.keys()[0]
    city1 = _city1
    visited = (N+1) * [False]
    visited[city1] = True
    _city2, _city3 = r[city1].keys()
    city2, city3 = _city2, _city3
    
    cost = 0
    while True:
        cost += r[city1][city2]
        if visited[city2]:
            break
        visited[city2] = True
        city1 = city2
        city2, city3 = r[city1].keys()
        if visited[city2] and visited[city3]:
            break
        if visited[city2]:
            city2 = city3
    cost += r[city1][_city1]
    minn = min(minn, cost)

    cost = 0
    city1 = _city1
    city2, city3 = _city3, _city2
    visited = (N+1) * [False]
    visited[city1] = True
    while True:
        cost += r[city1][city2]
        if visited[city2]:
            break
        visited[city2] = True
        city1 = city2
        city2, city3 = r[city1].keys()
        if visited[city2] and visited[city3]:
            break
        if visited[city2]:
            city2 = city3
    cost += r[city1][_city1]
    minn = min(minn, cost)
    
    return minn

if __name__ == '__main__':
    N = input()
    roads = []
    for n in xrange(N):
        a, b, c = map(int, raw_input().split())
        roads.append((a, b, c))
    print get(N, roads)
        
