
def main():
    in_edges = {}
    out_edges = {}
    in_out={}
    n = int(raw_input())
    for i in range(0,n):
        ss = map(int, raw_input().split())
        out_edges.setdefault(ss[0],[]).append(ss)
        in_edges.setdefault(ss[1],[]).append(ss)
        in_out[(ss[0],ss[1])]=ss[2]
    start=1
    ring=[1]
    #print in_edges
    #print out_edges
    while len(ring)<n:
        node = ring[-1]
        #print 'node=',node
        for nn in [s[0] for s in in_edges.get(node,[])]+[s[1] for s in out_edges.get(node,[])]:
            #print nn
            if nn not in ring:
                ring.append(nn)
                break
        #print ring
    cost_in=cost_out=0
    for i in range(0,n-1):
        cost_in += in_out.get((ring[i],ring[i+1]),0)
        cost_out += in_out.get((ring[i+1],ring[i]),0)
        #print 'node=%s,cost_in=%s,cost_out=%s' %(ring[i],cost_in,cost_out)
    cost_in += in_out.get((ring[-1],ring[0]),0)
    cost_out += in_out.get((ring[0],ring[-1]),0)
    #print 'node=%s,cost_in=%s,cost_out=%s' %(ring[-1],cost_in,cost_out)
    print min(cost_out,cost_in)
    
if __name__ == '__main__':
    main()
