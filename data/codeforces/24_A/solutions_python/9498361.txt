ni = lambda: int(raw_input())
nai = lambda: map(int, raw_input().split())

n = ni()

maps = [[] for __ in range(n + 1)]

for _ in range(n):
    a, b, r = nai()
    maps[a].append((b, 0))
    maps[b].append((a, r))

used = [False for x in range(n + 1)]

ans = 100000
# print maps


def dfs(node, cost_so_far, route):
    if node in route:
        if len(route) == n and node == 1:
            global ans
            # print "min( on ", ans, " and ", cost_so_far, " ", route
            ans = min(ans, cost_so_far)
        return
    route.append(node)
    for to, cost in maps[node]:
        # print "from: ", node, " to: ", to, " cost: ", cost
        dfs(to, cost + cost_so_far, route)
    route.remove(node)

dfs(1, 0, [])

print ans
