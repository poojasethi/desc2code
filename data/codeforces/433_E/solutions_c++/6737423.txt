#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
typedef long long ll ;

const int N = 510 ;

struct node
{
    int val,fail,s[21];
}   tree[N];
int n,m,K;
int Llen,Rlen,root,cnt=0,q[N];
int L[N],R[N],num[N];

int read(int *s)
{
    int len;
    cin>>len;
    for(int i=0;i<len;i++)
        cin>>s[i];
    return len;
}

void insert(int *s,int len,int w)
{
    int p=root;
    for(int i=0;i<len;i++)
    {
        if(!tree[p].s[s[i]]) tree[p].s[s[i]]=++cnt;
        p=tree[p].s[s[i]];
    }
    tree[p].val+=w;
}

void build()
{
    int h=0,t=0;
    q[t++]=root;
    while(h<t)
    {
        int cur=q[h++];
        for(int i=0;i<m;i++)
        {
            int p=tree[cur].fail;
            while(p && !tree[p].s[i]) p=tree[p].fail;
            if(!p) p=root;
            else p=tree[p].s[i];
            
            int son = tree[cur].s[i];
            if(son)
            {
                //int son = tree[cur].s[i];
                tree[son].fail = p;
                tree[son].val += tree[tree[son].fail].val;
                q[t++]=son;
            }
            else 
            {
                tree[cur].s[i]=p;
            }
        }
    }
}

const int mod = int(1e9) + 7;

int f[210][N][210][2][2];
//length / val / node / leading 0 / upper 

void add(int &x,int y)
{
    x+=y;
    if(x>=mod) x-=mod;
}

int cal(int *a,int len)
{
    memset(f,0,sizeof(f));
    f[0][0][root][1][1]=1;
    
    for(int i=0;i<len;i++)
    for(int k=0;k<=K;k++)
    for(int j=1;j<=cnt;j++)
    for(int l=0;l<2;l++)
    for(int u=0;u<2;u++)
    {
        if(!f[i][k][j][l][u]) continue;
        for(int x=0;x<m;x++)
        {
            if(x>a[i] && u) break;
            int nl=0,nu=0,node=tree[j].s[x];
            if(x==0 && l) nl=1;
            if(x==a[i] && u) nu=1;
            if(nl) add(f[i+1][k][j][nl][nu] , f[i][k][j][l][u]) ;
            else if(k+tree[node].val <= K)
                add(f[i+1][k+tree[node].val][node][nl][nu],f[i][k][j][l][u]);  
        }
    }
    int ret=0;
    for(int k=0;k<=K;k++)
    for(int j=1;j<=cnt;j++)
    for(int l=0;l<2;l++)
    for(int u=0;u<2;u++)
        add(ret,f[len][k][j][l][u]);
    return ret;
}

int main()
{
    cin>>n>>m>>K;
    Llen=read(L),Rlen=read(R);
    root=++cnt;
    for(int i=1;i<=n;i++)
    {
        int len=read(num),w;
        cin>>w;
        insert(num,len,w);
    }
    build();
    
    int ans = cal(R,Rlen);
    --L[Llen-1];
    for(int i=Llen-1;i>0;i--)
        if(L[i]<0) --L[i-1] , L[i]+=m;
    
    if(L[0]==0)
    {
        for(int i=0;i<Llen-1;i++)
            L[i]=L[i]+1;
        --Llen; 
    }
    ans=(ans-cal(L,Llen) + mod) % mod;
    cout<<ans<<endl;
    return 0;
}