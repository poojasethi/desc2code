#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
#define LL long long
#define CLR(x,y) memset(x,y,sizeof(x))

const int N=222,sz=22,INF=0x3f3f3f3f,mod=1000000007;

int n,m,K,bit1[N],bit2[N],tot1,tot2;

queue<int> Q;
int tot,ch[N][sz],val[N],f[N],dp[202][202][502][2],P[N];
void init(){
    tot=0;CLR(ch[0],0);val[0]=0;
}
void insert(){
    int u=0,n;
    cin>>n;
    for(int i=0;i<n;++i) cin>>P[i];
    for(int i=0;i<n;i++){
        int c=P[i];
        if(!ch[u][c]){
            ++tot;
            CLR(ch[tot],0);
            val[tot]=0;
            ch[u][c]=tot;
        }
        u=ch[u][c];
    }
    int t;cin>>t;
    val[u]+=t;
}
void getFail(){
    int u,v,r;f[0]=0;
    for(int c=0;c<sz;++c) if(u=ch[0][c]) f[u]=0,Q.push(u);
    while(!Q.empty()){
        r=Q.front();Q.pop();
        for(int c=0;c<sz;++c){
            if(!(u=ch[r][c])) {ch[r][c]=ch[f[r]][c];continue;}
            v=f[r];while(v&&!ch[v][c]) v=f[v];
            f[u]=ch[v][c];
            val[u]+=val[f[u]];
            Q.push(u);
        }
    }
}

void add(int& a,int b)
{
    a+=b;
    if(a>=mod) a-=mod;
}

int dfs(int len,int j,int v,int lim,int pre)
{
    if(v>K) return 0;
//    cout<<len<<" "<<j<<" "<<v<<" "<<lim<<" "<<pre<<endl;
    if(len==-1) return pre==0&&v<=K;
//    cout<<dp[len][j][v][pre]<<endl;
    if(!lim&&dp[len][j][v][pre]>=0) return dp[len][j][v][pre];
    int up=lim?bit2[len]:m-1;
//    cout<<len<<"^"<<lim<<" "<<up<<endl;
    int tmp=0;
    for(int i=0;i<=up;++i)
    {
        if(i==0&&pre) add(tmp,dfs(len-1,j,v,0,1));
        else
        {
            int nj=ch[j][i];
            add(tmp,dfs(len-1,nj,v+val[nj],lim&&(i==up),0));
        }
    }
//    cout<<len<<" "<<j<<" "<<v<<" "<<lim<<" "<<pre<<"*"<<tmp<<endl;
    if(lim) return tmp;
    return dp[len][j][v][pre]=tmp;
}

int solve()
{
    CLR(dp,-1);
    int ret=dfs(tot2-1,0,0,1,1);
//    cout<<ret<<endl;
    CLR(dp,-1);
    for(int i=0;i<tot1;++i) bit2[i]=bit1[i];
    for(int i=0;i<tot1;++i)
    {
        if(bit2[i]) {--bit2[i];break;}
        bit2[i]=m-1;
    }
    if(bit2[tot1-1]==0) --tot1;
    add(ret,mod-dfs(tot1-1,0,0,1,1));
//    cout<<ret<<endl;
    return ret;
}

int main()
{
    cin>>n>>m>>K;
    cin>>tot1;
    for(int i=tot1-1;i>=0;--i) cin>>bit1[i];
    cin>>tot2;
    for(int i=tot2-1;i>=0;--i) cin>>bit2[i];
    while(n--)
    {
        insert();
    }
    getFail();
    cout<<solve()<<endl;
    return 0;
}
