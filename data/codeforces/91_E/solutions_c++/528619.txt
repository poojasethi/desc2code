//For Future
//By JFantasy

#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long LL;

const int maxn = 100005;

vector<int> seg[maxn*4];
int a[maxn] , b[maxn] , list[maxn] , tmp[maxn] , que[maxn] , n , m;

bool cmp( int i , int j ) {  return a[i] > a[j] || ( a[i] == a[j] && b[i] > b[j] );  }

void build( int flag , int lower , int upper ) {
    for ( int i = lower; i <= upper; i++ ) list[i] = i;
    sort( list+lower , list+upper+1 , cmp );
    int tl = 0;
    tmp[0] = 0;
    for ( int i = lower; i <= upper; i++ ) {
        if ( i > lower && b[list[i]] <= b[list[i-1]] ) continue;
        tmp[++tmp[0]] = list[i];
    }
    for ( int i = 1; i <= tmp[0]; i++ ) {
        while ( tl > 1 ) {
            int x = que[tl-2] , y = que[tl-1] , z = tmp[i];
            if ( LL(a[y]-a[z])*(b[y]-b[x]) <= LL(a[x]-a[y])*(b[z]-b[y]) ) tl--;
            else break;
        }
        que[tl++] = tmp[i];
    }
    for ( int i = 0; i < tl; i++ ) seg[flag].push_back(que[i]);
    if ( lower == upper ) return;
    int mid = ( lower + upper ) >> 1;
    build( flag*2 , lower , mid );
    build( flag*2+1 , mid+1 , upper );
}

int getans( int flag , int tim ) {
    int lower = 0 , upper = seg[flag].size()-1;
    while ( lower < upper ) {
        int mid = ( lower + upper ) >> 1;
        int x = seg[flag][mid] , y = seg[flag][mid+1];
        if ( a[x]+LL(b[x])*tim <= a[y]+LL(b[y])*tim ) lower = mid + 1;
        else upper = mid;
    }
    return seg[flag][lower];
}

int query( int flag , int lower , int upper , int st , int ed , int tim ) {
    if ( lower == st && upper == ed ) return getans(flag,tim);
    int mid = ( lower + upper ) >> 1;
    if ( ed <= mid ) return query( flag*2 , lower , mid , st , ed , tim );
    else if ( st > mid ) return query( flag*2+1 , mid+1 , upper , st , ed , tim );
    else {
        int i = query( flag*2 , lower , mid , st , mid , tim ) , j = query( flag*2+1 , mid+1 , upper , mid+1 , ed , tim );
        return a[i]+LL(b[i])*tim >= a[j]+LL(b[j])*tim ? i : j;
    }
}

int main() {
    scanf( "%d%d" , &n , &m );
    for ( int i = 1; i <= n; i++ ) scanf( "%d%d" , &a[i] , &b[i] );
    build(1,1,n);
    while (m--) {
        int x , y , z;
        scanf( "%d%d%d" , &x , &y , &z );
        printf( "%d\n" , query(1,1,n,x,y,z) );
    }
    return 0;
}
