#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long LL;

struct query{
	int id, le, ri, ti;
	bool operator<(const query &a) {
		return ti < a.ti;
	}
} Q[101000];
const int maxN = 101000;

int ans[maxN];
int a[maxN], b[maxN];
int sq[18][maxN], id[maxN];
int he[maxN<<2], ta[maxN<<2];
int n, m;
int Ti;

bool small(int x, int y) {
	return (LL)a[x] + (LL)b[x] * Ti <= (LL)a[y] + (LL)b[y] * Ti;
}

int find(int v, int dep, int le, int ri, int bb, int e)
{
	if(bb > ri || e < le) return -1;
	if(le >= bb && ri <= e) {
		while(he[v]<ta[v] && small(sq[dep][he[v]], sq[dep][he[v]+1]))
			he[v]++;
		return sq[dep][he[v]];
	}
	int mid = (le + ri) / 2;
	int x = find(v*2, dep+1, le, mid, bb, e);
	int y = find(v*2+1, dep+1, mid+1, ri, bb, e);
	if(x == -1) return y;
	if(y == -1) return x;
	if((LL)a[x] + (LL)b[x] * Ti > (LL)a[y] + (LL)b[y] * Ti)
		return x;
	else
		return y;
}

void solve()
{
	for(int i = 0; i < m; ++i) {
		Ti = Q[i].ti;
		ans[Q[i].id] = find(1, 0, 0, n-1, Q[i].le-1, Q[i].ri-1);
	}
	for(int i = 0; i < m; ++i)
		printf("%d\n", ans[i]+1);
}

bool cmp(int i, int j) { return a[i] > a[j] || (a[i]==a[j]&&b[i] > b[j]); }

bool superior(int i, int j, int k) {
	LL tmp1 = (LL)(a[j]-a[k]) * (b[j] - b[i]);
	LL tmp2 = (LL)(b[k]-b[j]) * (a[i] - a[j]);
	return tmp1 <= tmp2;
}

void calc(int v, int dep, int le, int ri)
{
	for(int i = le; i <= ri; ++i)
		id[i] = i;
	sort(id+le, id+ri+1, cmp);
	he[v] = le; ta[v] = le-1;
	for(int i = le; i <= ri; ++i) {
		if(he[v]<=ta[v]) {
			int t = sq[dep][ta[v]];
			if(b[id[i]] <= b[t])continue;
		}
		while(he[v] < ta[v] && superior(sq[dep][ta[v]-1], sq[dep][ta[v]], id[i])) ta[v]--;
		sq[dep][++ta[v]] = id[i];
	}
	/*
	printf("%d %d %d: ", dep, le, ri);
	for(int i = he[v]; i <= ta[v]; ++i) 
		printf("%d ", sq[dep][i]);
	puts("");
	*/
	if(le >= ri) return;
	int mid = (le + ri) / 2;
	calc(v*2, dep+1, le, mid);
	calc(v*2+1, dep+1, mid+1, ri);
}
bool cmp2(const query &a, const query &b) { return a.ti < b.ti; }

void init()
{
	scanf("%d%d", &n, &m);
	for(int i = 0; i < n; ++i)
		scanf("%d%d", &a[i], &b[i]);
	for(int i = 0; i < m; ++i) {
		scanf("%d%d%d", &Q[i].le, &Q[i].ri, &Q[i].ti);
		Q[i].id = i;
	}
	sort(Q, Q + m, cmp2);
	
	calc(1, 0, 0, n-1);
}

int main()
{
	init();
	solve();
	return 0;
}
