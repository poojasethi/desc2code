#include <string>
#include <vector>
#include <map>
#include <list>
#include <map>
#include <set>
#include <math.h> 
#include <fstream>
#include <iostream>
#include <algorithm>


#define pb(a) push_back(a) 
#define sz size()

typedef long long ll;
typedef long double ld;

inline void swap(int &a, int &b){int tmp=a;a=b;b=tmp;}
inline void swap(ll &a, ll &b){ll tmp=a;a=b;b=tmp;}
inline void swap(ld &a, ld &b){ld tmp=a;a=b;b=tmp;}

inline int MIN(const int &a, const int &b) {return a<b?a:b;}
#define forn(i,n) for(int i=0;i!=n;i++)
#define for1(i,n) for(int i=1;i<=n;i++)
#define forab(i,a,b) for(int i=a;i!=b;i++)
#define for1ab(i,a,b) for(int i=a+1;i<=b;i++)
#define ford(i,n) for(int i=n-1;i!=-1;i--)
#define ford1(i,n) for(int i=n;i!=0;i--)

#define tochn 1e-7
#define INTinf 2147483647
#define LLinf 9223372036854775807
#define pii pair<int,int>
using namespace std; 

ll a[100005];
ll b[100005];
int n,m;
int bl[318];
int l, r, t, p1, p2;
map<int, int, greater<int> > leader[317];
int main(){
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	cin>>n>>m;
	forn(i,n) cin>>a[i]>>b[i];
	int x=0;
	int z=0;
	while (x<n){
		bl[z++]=x;
		x+=317;
	}
	bl[z]=n;
	forn(i,z){
		int MNOM=bl[i];
		forab(j,bl[i]+1,bl[i+1]) if (a[j]>a[MNOM]) MNOM=j;
		leader[i].insert(pii(0, MNOM));
		bool ok;
		while(true){
			ok=false;
			int tmp=-1;
			int tmpT=INTinf;
			forab(j, bl[i], bl[i+1]){
				if (j!=MNOM){
					if (b[j]>b[MNOM]){
						ll T = (a[MNOM]-a[j]-1L)/(b[j]-b[MNOM])+1L;
						if (T<tmpT){
							tmpT=T;
							tmp=j;
							ok=true;
						} else {
							if (T==tmpT){
								if ((p1=a[tmp]+b[tmp]*T)<(p2=a[j]+b[j]*T))
									tmp=j; 
								else 
									if ((p1==p2)&&(b[tmp]<b[j])){
										tmp=j;
									}
							}
						}
					}
				}
			}
			if (ok){
				leader[i].insert(pii(tmpT,tmp));
				MNOM=tmp;
			} else break;
		}
	}
	forn(i,m){
		cin>>l>>r>>t;
		ll H=-1;
		int NOM=-1;
		ll tmpH;
		int tmpN;
		for(int j=l-1; j<r;){
			int pos;
			if ((j%317==0)&&(bl[(pos=j/317)+1]<=r)){
				tmpN = leader[pos].lower_bound(t)->second;
				tmpH = a[tmpN]+b[tmpN]*t;
				if (tmpH>H){
					H=tmpH;
					NOM=tmpN;
				}
				j=bl[pos+1];
			} else {
				tmpH = a[j]+b[j]*t;
				if (tmpH>H){
					H=tmpH;
					NOM=j;
				}
				j++;
			}
		}
		cout<<NOM+1<<endl;
	}
	return 0;
}