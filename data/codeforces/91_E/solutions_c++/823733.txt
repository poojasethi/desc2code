#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

#define MAX_N 100000
#define MAX_T 1000000

int a[MAX_N],b[MAX_N];
vector< pair<int, int> > order[17][MAX_N];

int calc_cross(int x, int y){
    return (a[y] - a[x] + b[x] - b[y] - 1) / (b[x] - b[y]);
}

void get_order(int idx, int s, int e){
    vector< pair< pair<int, int>, int > > line;
    
    for(int i = s;i <= e;++i)
        line.push_back(make_pair(make_pair(a[i], b[i]), i));
    
    sort(line.rbegin(),line.rend());
    
    int n = e - s + 1,sz = 1;
    vector<int> aux;
    aux.push_back(line[0].second);
    
    for(int i = 1;i < n;++i){
        int ind = line[i].second;
        
        if(b[ind] > b[aux[sz - 1]]){
            while(sz > 1 && calc_cross(ind,aux[sz - 1]) <= calc_cross(aux[sz - 1],aux[sz - 2])){
                aux.pop_back();
                --sz;
            }
            
            aux.push_back(ind);
            ++sz;
        }
    }
    
    vector< pair<int, int> > &ret = order[idx][s];
    
    for(int i = 0;i + 1 < sz;++i)
        ret.push_back(make_pair(calc_cross(aux[i + 1], aux[i]), aux[i]));
    ret.push_back(make_pair(MAX_T + 1, aux[sz - 1]));
}

int main(){
    int n,q;
    scanf("%d %d",&n,&q);
    
    for(int i = 0;i < n;++i)
        scanf("%d %d",&a[i],&b[i]);
    
    for(int len = 1,j = 0;len <= n;len <<= 1,++j)
        for(int i = 0;i < n;i += len)
            get_order(j,i,min(n,i + len) - 1);
    
    int x,y,t,lg,ind,ans;
    
    while(q--){
        scanf("%d %d %d",&x,&y,&t);
        --x; --y;
        
        ans = -1;
        
        while(x <= y){
            lg = x? __builtin_ctz(x) : 31 - __builtin_clz(y - x + 1);
            while(x + (1 << lg) - 1 > y) --lg;
            
            vector< pair<int, int> > &A = order[lg][x];
            ind = lower_bound(A.begin(),A.end(),make_pair(t,MAX_N))->second;
    
            if(ans == -1 || a[ind] + b[ind] * (long long)t > a[ans] + b[ans] * (long long)t) ans = ind;
            
            x += (1 << lg);
        }
        
        printf("%d\n",ans + 1);
    }
    
    return 0;
}