#include<cstdio>
#include<cstdlib>
#include<vector>
#include<algorithm>
#define N 100005
#define pb push_back
#define inf 2000000005
#define rep(i,n) for(int i=1;i<=n;i++)
using namespace std;
struct rec{int k,b,id;}E[N],Q[N],stk[N];
bool cmp(const rec &i,const rec &j){return i.k==j.k?i.b<j.b:i.k<j.k;}
vector <int> d[4*N],id[4*N];
int val,res,ll,rr,n,m;
long long ans;
int calc(const rec &i,const rec &j){
	return (j.b-i.b)/(i.k-j.k)+1;
}
bool better(const rec &i,const rec &j,const rec &k){
	return 1LL*(j.b-i.b)*(i.k-k.k)<1LL*(k.b-i.b)*(i.k-j.k);
}
bool great(const rec &i,const rec &j){
	return i.k>=j.k&&i.b>=j.b;
}
void doit(int t,int l,int r){
	for(int i=l;i<=r;i++) E[i]=Q[i];
	sort(E+l,E+1+r,cmp);
	int top=0;
	for(int i=l;i<=r;i++){
		while (top>0&&great(E[i],stk[top])) top--;
		while (top>1&&better(E[i],stk[top],stk[top-1])) top--;
		stk[++top]=E[i];
	}
	rep(i,top-1){
		d[t].pb(calc(stk[i],stk[i+1])); id[t].pb(stk[i].id);
	}
	d[t].pb(inf); id[t].pb(stk[top].id);
}
void build(int t,int l,int r){
	doit(t,l,r);
	if(l==r) return;
	int mid=(l+r)>>1;
	build(t*2,l,mid); build(t*2+1,mid+1,r);
}
long long function(const int &i){return 1LL*Q[i].k*val+Q[i].b;}
void work(int t){
	int j=upper_bound(d[t].begin(),d[t].end(),val)-d[t].begin();
	if(function(id[t][j])>ans) ans=function(id[t][j]),res=id[t][j];
}
void query(int t,int l,int r){
	if(ll<=l&&r<=rr){
		work(t); return;
	}
	int mid=(l+r)>>1;
	if(ll<=mid) query(t*2,l,mid);
	if(rr>mid) query(t*2+1,mid+1,r);
}
int main(){
	scanf("%d%d",&n,&m);
	rep(i,n) scanf("%d%d",&Q[i].b,&Q[i].k),Q[i].id=i;
	build(1,1,n);
	rep(i,m){
		scanf("%d%d%d",&ll,&rr,&val);
		ans=-1; query(1,1,n);
		printf("%d\n",res);
	}
}