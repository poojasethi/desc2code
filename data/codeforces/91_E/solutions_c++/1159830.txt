#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
using namespace std;
const int N = 100005;
typedef __int64 ll;
struct p
{
	ll a,b,id;
}data[N],d[351][351];
struct pp
{
	int l,r,t,id;
}q[N];
bool cmp1(p x,p y)
{
	return x.b<y.b;
}
bool cmp2(pp x,pp y)
{
	return x.t<y.t;
}
int k[351],z[351],all;
ll r[N];
void up(int t)
{
	int i;
	for(i=0;i<all;i++)
	{
		while(z[i]<k[i]-1&&d[i][z[i]].a+d[i][z[i]].b*t<=d[i][z[i]+1].a+d[i][z[i]+1].b*t)z[i]++;
	}
}
void get(int x)
{
	ll res=0,rid;
	int i,L,R,j;
	L=q[x].l/350;
	R=q[x].r/350;
	if(L==R)
	{
		for(i=q[x].l;i<=q[x].r;i++)
		{
			if(data[i].a+data[i].b*q[x].t>res){res=data[i].a+data[i].b*q[x].t;rid=data[i].id;}
		}
		r[q[x].id]=rid;
		//printf("what  id:%d  %I64d\n",q[x].id,res);
		return ;
	}
	for(i=L+1;i<R;i++)
	{
		if(res<d[i][z[i]].a+d[i][z[i]].b*q[x].t){res=d[i][z[i]].a+d[i][z[i]].b*q[x].t;rid=d[i][z[i]].id;}
	}
	j=(L+1)*350;
	for(i=q[x].l;i<j;i++)
	{
		if(data[i].a+data[i].b*q[x].t>res){res=data[i].a+data[i].b*q[x].t;rid=data[i].id;}
	}
	for(i=R*350;i<=q[x].r;i++)
	{
		if(data[i].a+data[i].b*q[x].t>res){res=data[i].a+data[i].b*q[x].t;rid=data[i].id;}	
	}
	r[q[x].id]=rid;
	//printf("what id:%d  %I64d\n",q[x].id,res);
}
int main()
{
	int n,m,i,j,h;
	scanf("%d%d",&n,&m);
	for(i=0;i<n;i++)
	{
		scanf("%I64d%I64d",&data[i].a,&data[i].b);
		data[i].id=i+1;
		d[i/350][i%350]=data[i];
	}
	memset(k,0,sizeof(k));
	memset(z,0,sizeof(z));
	all=(n-1)/350;
	for(i=0;i<all;i++)
	{
		sort(d[i],d[i]+350,cmp1);
		for(j=0;j<350;j++)
		{
			for(h=j+1;h<350;h++)
			{
				if(d[i][h].a>=d[i][j].a)break;
			}
			if(h==350)
			{
				while(k[i]>1&&(d[i][k[i]-1].a-d[i][j].a)*(d[i][k[i]-1].b-d[i][k[i]-2].b)
					<=(d[i][k[i]-2].a-d[i][k[i]-1].a)*(d[i][j].b-d[i][k[i]-1].b))k[i]--;
				d[i][k[i]++]=d[i][j];
			}
		}
	}
	for(i=0;i<m;i++)
	{
		scanf("%d%d%d",&q[i].l,&q[i].r,&q[i].t);
		q[i].l--;
		q[i].r--;
		q[i].id=i;
	}
	sort(q,q+m,cmp2);
	for(i=0;i<m;i++)
	{
		up(q[i].t);
		get(i);
	}	
	for(i=0;i<m;i++)printf("%d\n",r[i]);
	return 0;
}
