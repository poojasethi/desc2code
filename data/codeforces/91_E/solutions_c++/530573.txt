#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())

#define MAX 100005
vector<int> st[MAX*4];
li a[MAX];
li b[MAX];
li l[MAX];
li r[MAX];
li t[MAX];
li n,q;

void init(li num,li left,li right){
	if(left+1<right){
		li mid=(left+right)/2;
		init(num*2,left,mid);
		init(num*2+1,mid,right);
	}
	vector<pair<pair<li,li>,int> > vec(right-left);
	rep(i,right-left) vec[i]=make_pair(make_pair(b[i+left],a[i+left]),left+i);
	sort(vec.begin(),vec.end());
	vector<int> v(sz(vec));
	int l=0;
	rep(i,sz(vec)){
		int n=vec[i].second;
		while((0<l && a[v[l-1]]<=a[n]) ||
					(1<l && (b[v[l-1]]-b[n])*(a[v[l-1]]-a[v[l-2]])>
						(b[v[l-2]]-b[v[l-1]])*(a[n]-a[v[l-1]]))){
			l--;
		}
		v[l++]=n;
	}
	rep(i,l) st[num].pb(v[i]);
}

li perform(li num,li left,li right,li l,li r,li time){
	if(right<=l || r<=left) return -1;
	if(l<=left && right<=r){
		li low=0,high=sz(st[num]);
		while(low+1<high){
			li mid=(low+high)/2;
			li tl=a[st[num][mid-1]]+b[st[num][mid-1]]*time;
			li th=a[st[num][mid]]+b[st[num][mid]]*time;
			if(tl<th) low=mid;
			else high=mid;
		}
		return st[num][low];
	}
	li mid=(left+right)/2;
	li res0=perform(num*2,left,mid,l,r,time);
	li res1=perform(num*2+1,mid,right,l,r,time);
	if(res0==-1) return res1;
	if(res1==-1) return res0;
	if(a[res0]+b[res0]*time<a[res1]+b[res1]*time) return res1;
	return res0;
}

int main(){
	cin>>n>>q;
	rep(i,n) cin>>a[i]>>b[i];
	rep(i,q) cin>>l[i]>>r[i]>>t[i];
	init(1,0,n);
	rep(i,q) 	cout<<1+perform(1,0,n,l[i]-1,r[i],t[i])<<endl;
}
