#include <iostream>
#include <cstdio>
#include <set>
#include <algorithm>
#include <vector>

#define MAX_N 100005
#define MAX_Q 100005
#define MAX_NODE 300005

using namespace std;

typedef long long lld;

int bl,br,bm;
int n,q,i,j;
int s[MAX_N];
int tmps[MAX_N];
int a[MAX_N],b[MAX_N];
int l[MAX_Q],r[MAX_Q],t[MAX_Q];
int st[MAX_N],en;
pair<int,int> tmp[MAX_N];
vector<int> V[MAX_NODE];

bool myfunction(int tmpx,int tmpy)
{
	if(b[tmpx]!=b[tmpy])
		return b[tmpx]<b[tmpy];
	else
		return a[tmpx]<a[tmpy];
}

void init(int numnode,int left,int right)
{
	if(left!=right)
	{
		int mi=(left+right)/2;
		init(numnode*2,left,mi);
		init(numnode*2+1,mi+1,right);
	}
	sort(s+left,s+right+1,myfunction);
	en=0;
	for(i=left;i<=right;i++)
	{
		while((en>0&&a[st[en-1]]<=a[s[i]])
			||(en>1&&((lld)b[st[en-1]]-b[s[i]])*(a[st[en-1]]-a[st[en-2]])>
			  ((lld)b[st[en-2]]-b[st[en-1]])*(a[s[i]]-a[st[en-1]])))
		{
			en--;
		}
		st[en]=s[i];
		en++;
	}
	for(i=0;i<en;i++)
	{
		V[numnode].push_back(st[i]);
	}
	return ;
}

int answer(int numnode,int treeleft,int treeright,int left,int right,int ti)
{
	if(treeleft==left&&treeright==right)
	{
		bl=0;
		br=V[numnode].size();
		while(br>bl+1)
		{
			bm=(br+bl)/2;
			if(((lld)(b[V[numnode][bm]]))*ti+a[V[numnode][bm]]>
				((lld)(b[V[numnode][bm-1]]))*ti+a[V[numnode][bm-1]])
			{
				bl=bm;
			}
			else
			{
				br=bm;
			}
		}
		return V[numnode][bl];
	}
	int treemi=(treeleft+treeright)/2;
	if(treemi>=right)
	{
		return answer(numnode*2,treeleft,treemi,left,right,ti);
	}
	else if(treemi<left)
	{
		return answer(numnode*2+1,treemi+1,treeright,left,right,ti);
	}
	else
	{
		int tmpans1=answer(numnode*2,treeleft,treemi,left,treemi,ti);
		int tmpans2=answer(numnode*2+1,treemi+1,treeright,treemi+1,right,ti);
		if(((lld)(b[tmpans1]))*ti+a[tmpans1]>((lld)(b[tmpans2]))*ti+a[tmpans2])
		{
			return tmpans1;
		}
		else
		{
			return tmpans2;
		}
	}
}

int main()
{
	scanf("%d",&n);
	scanf("%d",&q);
	for(i=1;i<=n;i++)
	{
		scanf("%d %d",&a[i],&b[i]);
	}
	for(i=1;i<=n;i++)
	{
		s[i]=i;
	}
	init(1,1,n);
	for(i=0;i<q;i++)
	{
		scanf("%d %d %d",&l[i],&r[i],&t[i]);
		printf("%d\n",answer(1,1,n,l[i],r[i],t[i]));
	}
	return 0;
}