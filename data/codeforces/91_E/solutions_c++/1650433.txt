#include <stdio.h>
const int nmax = 100000, tmax = 1 << 18, smax = nmax * 18;

int a[nmax + 18], b[nmax + 18], sta[nmax + 18], st;
int L[tmax + 18], R[tmax + 18], pl[smax + 18], pt;
int n, m, M = 1;

bool cmp(int i, int j)
{
    return a[i] == a[j] ? b[i] <= b[j] : a[i] <= a[j];
}

void update(long long &a, int &b, long long c, int d)
{
    if (a < c) a = c, b = d;
    else if (a == c && b > d) b = d;
}

long long cross(int x, int y, int z)
{
    return (a[y] - a[x])*1LL*(b[z] - b[x]) - (a[z] - a[x])*1LL*(b[y] - b[x]);
}

void merge(int &L, int &R, int ll, int lr, int rl, int rr)
{
    st = 0;
    L = pt + 1;
    while (ll < lr || rl < rr) {
    int np;
    if (ll >= lr) np = pl[rl++];
    else if (rl >= rr) np = pl[ll++];
    else np = cmp(pl[rl], pl[ll]) ? pl[rl++] : pl[ll++];
    while (st > 1 && cross(sta[st - 1], sta[st], np) >= 0) --st;
    sta[++st] = np;
    }
    for (int i = 1; i <= st; ++i) pl[++pt] = sta[i];
    R = pt + 1;
}

long long check(int i, int k)
{
    return a[i] *1LL* k + b[i];
}

void gets(int i, long long &s, int &p, int k)
{
    int l = L[i], r = R[i] - 1;
    for (int mid; l < r; ) {
    if ((mid = (l + r) >> 1) == r) --mid;
    check(pl[mid], k) >= check(pl[mid + 1], k) ? r = mid : l = mid + 1;
    }
    s = check(pl[l], k), p = pl[l];
}

int solve(int l, int r, int p)
{
    long long ans = -(1LL << 61), tans;
    int ansp = 0, tansp;
    for (l += M - 1, r += M + 1; l ^ r ^ 1; l >>= 1, r >>= 1) {
    if (~l & 1) gets(l ^ 1, tans, tansp, p), update(ans, ansp, tans, tansp);
    if ( r & 1) gets(r ^ 1, tans, tansp, p), update(ans, ansp, tans, tansp);
    }
    return ansp;
}

void prepare()
{
    while (M <= n) M <<= 1;
    for (int i = 1; i <= n; ++i) 
    ++pt, L[M + i] = pt, R[M + i] = pt + 1, pl[pt] = i;
    for (int i = M - 1; i; --i)
    merge(L[i], R[i], L[i << 1], R[i << 1], L[i << 1 | 1], R[i << 1 | 1]);
}

int main()
{
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; ++i)
    scanf("%d%d", b + i, a + i);
    prepare();
    for (int l, r, p; m--; ) 
    scanf("%d%d%d", &l, &r, &p), printf("%d\n", solve(l, r, p));
    return 0;
}
