#include <cstdio>
#include <algorithm>
#include <vector>
#define N 100005
#define LL long long int
#define eps (1e-9)
using namespace std;

int n,NQ;
int L[3*N],R[3*N],c[N],S[3*N],P[3*N],y;
LL mx;

struct query{
	int l,r,x,AC;
	LL t;
}Q[N];

struct node{
	LL a,b;
	int x;
	bool operator < (const node & G) const {
		if (b!=G.b) return b<G.b;
		else return a<G.a;
	}
}T[N],W[N],TR[N];

vector <int> V[3*N];

bool tim(query a,query b){return a.t<b.t;}
bool order(query a,query b){return a.x<b.x;}

void build(int x,int l,int r){
	
	L[x]=l;
	R[x]=r;
	if (l!=r){
		int k=(l+r)/2;
		build(x*2,l,k);
		build(x*2+1,k+1,r);
	}
	
	for (int i=l;i<=r;i++) W[i]=T[i];
	sort(W+l,W+r+1);
	
	mx=W[r].a;
	c[r]=1;
	
	for (int i=r-1;i>=l;i--){
		if (mx>=W[i].a) c[i]=0;
		else c[i]=1;
		mx=max(mx,W[i].a);
	}
	
	V[x].clear();
	S[x]=0;
	P[x]=0;
	
	for (int i=l;i<=r;i++)
		if (c[i] && (i==r || W[i].b!=W[i+1].b)){
			
			while (S[x]>1){
				double t1=(double)(T[V[x][S[x]-2]].a-T[V[x][S[x]-1]].a)/(double)(T[V[x][S[x]-1]].b-T[V[x][S[x]-2]].b);
				double t2=(double)(T[V[x][S[x]-1]].a-W[i].a)/(double)(W[i].b-T[V[x][S[x]-1]].b);
				if (t1-t2>eps){
					S[x]--;
					V[x].pop_back();
				}
				else break;
			}	
			V[x].push_back(W[i].x);
			S[x]++;
		}
	
}

LL cost(int x,int y,LL t){
	return T[V[x][y]].a+T[V[x][y]].b*t;
}

int query(int x,int l,int r,LL t){
	if (L[x]==l && R[x]==r){
		
		while (P[x]+1<S[x] && cost(x,P[x]+1,t)>cost(x,P[x],t)) P[x]++;
		return V[x][P[x]];
		
	}
	else {
		int k=(L[x]+R[x])/2,t1,t2;
		if (r<=k) return query(x*2,l,r,t);
		else if (l>=k+1) return query(x*2+1,l,r,t);
		else {
			t1=query(x*2,l,k,t);
			t2=query(x*2+1,k+1,r,t);
			LL C1 = T[t1].a+T[t1].b*t;
			LL C2 = T[t2].a+T[t2].b*t;
			if (C1>C2) return t1;
			else return t2;
		}
	}
	
}

int main(){
	scanf("%d%d",&n,&NQ);
	for (int i=1;i<=n;i++){
		scanf("%I64d%I64d",&T[i].a,&T[i].b);
		T[i].x=i;
	}
	
	build(1,1,n);
	
	for (int i=0;i<NQ;i++){
		scanf("%d%d%I64d",&Q[i].l,&Q[i].r,&Q[i].t);
		Q[i].x=i;
	}
	
	sort(Q,Q+NQ,tim);
	
	for (int i=0;i<NQ;i++)
		Q[i].AC=query(1,Q[i].l,Q[i].r,Q[i].t);		
	
	sort(Q,Q+NQ,order);
	for (int i=0;i<NQ;i++)
		printf("%d\n",Q[i].AC);
	
	scanf("\n");
	return 0;
}
