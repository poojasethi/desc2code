#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <string>
using namespace std;
const int N = 2*100000+5;

vector< int > graph[ 2 ][ N ];
int pe[2][ N ], n;
bool mark[ N ];
int u;

int tmr, tin[2][ N ], tout[2][ N ], l[2][N];
void dfs(int v)
{
   ++ tmr;
   l[u][tmr] = v;
   tin[u][v] = tmr;
   for(int j = 0; j < (int)graph[u][v].size(); ++ j)
      dfs( graph[u][v][j] );
   tout[u][v] = tmr;
}
struct elem
{
   int s, f, i;
};
bool cmp0(const elem & l, const elem &r)
{
   return (l.s < r.s);
}
bool cmp1(const elem & l, const elem & r)
{
   return (l.f < r.f);
}
int in[ 2 ][ 2 ][ N ];
elem e[ 2 ][ 2 ][ N ];

int ma[ 2 ][ 4*N ], mi[ 2 ][ 4*N ];
void fix(bool u, int v)
{
   int i1 = ma[u][v+v];
   int i2 = ma[u][v+v+1];
   if(i1==0)
      ma[u][v] = i2;
   else
   if(i2==0)
      ma[u][v] = i1;
   else
      ma[u][v] = (e[u][0][i1].f < e[u][0][i2].f)?i2:i1;

   i1 = mi[u][v+v];
   i2 = mi[u][v+v+1];
   if(i1==0)
      mi[u][v] = i2;
   else
   if(i2==0)
      mi[u][v] = i1;
   else
      mi[u][v] = (e[u][1][i1].s < e[u][1][i2].s)?i1:i2;
}
void build(bool u, int v, int tl, int tr)
{
   if(tl==tr)
   {
      ma[u][v] = tl;
      mi[u][v] = tl;
      return;
   }
   int tm = (tl+tr)/2;
   build(u, v+v, tl, tm);
   build(u, v+v+1, tm+1, tr);
   fix(u, v);
}
void del(bool u,bool t, int v, int tl, int tr,int pos)
{
   if(tl==tr)
   {
      if(t==0)
         ma[u][v] = 0;
      else
         mi[u][v] = 0;
      return;
   }
   int tm = (tl+tr)/2;
   if(pos <= tm)
      del(u,t, v+v, tl, tm, pos);
   else
      del(u,t, v+v+1, tm+1, tr, pos);

   fix(u, v);
}
int findma(bool u, int v, int tl, int tr, int l, int r)
{
   if(e[u][0][tr].s < l || e[u][0][tl].s > r)return 0;
   if(e[u][0][tl].s >= l && e[u][0][tr].s <= r)return ma[u][v];
   int tm = (tl+tr)/2;
   int i1 = findma(u, v+v, tl, tm, l, r);
   int i2 = findma(u, v+v+1, tm+1, tr, l, r);

   if(i1==0)return i2;
   if(i2==0)return i1;
   return (e[u][0][i1].f < e[u][0][i2].f)?i2:i1;
}
int findmi(bool u, int v, int tl, int tr, int l, int r)
{
   if(e[u][1][tr].f < l || e[u][1][tl].f > r)return 0;
   if(e[u][1][tl].f >= l && e[u][1][tr].f <= r)return mi[u][v];
   int tm = (tl+tr)/2;
   int i1 = findmi(u, v+v, tl, tm, l, r);
   int i2 = findmi(u, v+v+1, tm+1, tr, l, r);

   if(i1==0)return i2;
   if(i2==0)return i1;
   return (e[u][1][i1].s < e[u][1][i2].s)?i1:i2;
}

vector< int > v1;
vector< int > v2;
int main()
{
   //freopen("input.txt", "r", stdin);
   scanf("%d", &n);
   for(u = 0; u < 2; ++ u)
   {
      for(int i = 1; i < n; ++ i)
      {
         scanf("%d", &pe[u][i]);
         -- pe[u][i];
         graph[ u ][ pe[u][i] ].push_back( i );
      }
   }
   for(u = 0; u < 2; ++ u)
   {
      //memset(mark, 0, sizeof( mark ) );
      tmr = 0;
      dfs(0);
      for(int i = 1; i < n; ++ i)
      {
         int u1 = pe[ u^1 ][ i ], u2 = i;
         if(tin[u][u1] > tin[u][u2])
            swap(u1, u2);

         e[u][0][i].s = tin[u][u1];
         e[u][0][i].f = tin[u][u2];
         e[u][0][i].i = i;

         e[u][1][i] = e[u][0][i];
      }
      sort(e[u][0]+1, e[u][0]+n, cmp0);
      sort(e[u][1]+1, e[u][1]+n, cmp1);
      for(int i = 1; i < n; ++ i)
      {
         for(int t = 0; t < 2; ++ t)
         {
            int i1 = e[u][t][i].i;
            in[ u ][ t ][ i1 ] = i;
         }
      }
      build(u, 1, 1, n-1);
   }

   ////
/*   for(u = 0; u < 2; ++ u)
   {
      for(int i = 1; i <= n; ++ i)
      {
         cout<<l[u][i]<<" ";
      }
      cout<<endl;
      for(int i = 0; i < n; ++ i)
      {
         cout<<tin[u][i]<<" "<<tout[u][i]<<",";
      }
      cout<<endl;
      for(int t = 0; t < 2; ++ t)
      {
         for(int i = 1; i < n; ++ i)
         {
            cout<<e[u][t][i].s<<" "<<e[u][t][i].f<<" "<<e[u][t][i].i<<",";
         }
         cout<<endl;
      }
   }
*/   ////
   int sind;
   scanf("%d", &sind);
   v1.push_back(sind);


  // cout<<e[0][0][4].i<<" "<<in[ 0 ][ 0 ][ e[0][0][4].i ]<<endl;
   del(1,0, 1, 1, n-1, in[1][0][ sind ]);
   del(1,1, 1, 1, n-1, in[1][1][ sind ]);
   u = 0;
   while(!v1.empty())
   {
      printf(u?"Red\n":"Blue\n");
      sort(v1.begin(), v1.end());
      for(int i = 0; i < (int)v1.size(); ++ i)
         printf("%d ", v1[i]);
      printf("\n");
      while(!v1.empty())
      {
         int v = v1.back();
         while(1)
         {
            int i2 = findma(u, 1, 1, n-1, tin[u][ v ], tout[u][ v ]);
            if(i2!=0 && e[u][0][i2].f > tout[u][v])
            {
               //cout<<u<<" "<<i2<<endl;
               i2 = e[u][0][i2].i;
              // cout<<i2<<" "<<in[u][0][i2]<<" "<<in[u][1][i2]<<endl;

               v2.push_back(i2);
               del(u, 0, 1, 1, n-1, in[u][0][i2]);
               del(u, 1, 1, 1, n-1, in[u][1][i2]);
               continue;
            }
            break;
         }
         while(1)
         {
            int i2 = findmi(u, 1, 1, n-1, tin[u][ v ], tout[u][ v ]);
            if(i2!=0 && e[u][1][i2].s < tin[u][v])
            {
               i2 = e[u][1][i2].i;

               v2.push_back(i2);
               del(u, 0, 1, 1, n-1, in[u][0][i2]);
               del(u, 1, 1, 1, n-1, in[u][1][i2]);
               continue;
            }
            break;
         }
         v1.pop_back();
      }
      v1 = v2;
      v2.clear();
      u = u^1;
   }
   return 0;
}
