#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<map>
#include<set>
#include<string>
#include<vector>
#define pb push_back
#define rep(i,j,k) for(int i=(j);i<=(int)k;i++)
#define per(i,j,k) for(int i=(j);i>=(int)k;i--)
#define lowbit(x) ((x)&(-(x)))
#define fi first
#define se second
#define pii pair<int,int>
#define VI vector<int>
#define S(x) x.size()
using namespace std;
typedef long long LL;
typedef double db;
const int MAXN=210000;
int st[2][MAXN],ed[2][MAXN];
bool use[2][MAXN];int q[2][MAXN];
int u[2][MAXN],v[2][MAXN];
struct tree{
	bool k;string color;
	vector<int>p[MAXN];
	vector<pii>mes[MAXN*4];int l[MAXN*4],r[MAXN*4];
	int n;int tot;
	void dfs(int x,int fa){
		st[k][x]=++tot;
		rep(i,0,S(p[x])-1)if(p[x][i]!=fa)dfs(p[x][i],x);
		ed[k][x]=tot;
	}
	void init(bool cp,int me,string co){
		n=me;color=co;k=cp;
		rep(i,1,n-1){
			int x;scanf("%d",&x);p[x].pb(i+1);p[i+1].pb(x);
			u[k][i]=x;v[k][i]=i+1;
		}
		dfs(1,0);
	}
	void add(int me,int ll,int rr,int x,pii info){
		mes[me].pb(info);if(ll==rr)return ;int mid=(ll+rr)>>1;
		if(x<=mid)add(me*2,ll,mid,x,info);else add(me*2+1,mid+1,rr,x,info);
	}
	void adder(int x,int y,int id){
		add(1,1,n,st[k][x],pii(st[k][y],id));
		add(1,1,n,st[k][y],pii(st[k][x],id));
	}
	void deal(int me,int ll,int rr){
		sort(mes[me].begin(),mes[me].end());l[me]=0;r[me]=S(mes[me])-1;
		if(ll==rr)return;int mid=(ll+rr)>>1;
		deal(me*2,ll,mid);deal(me*2+1,mid+1,rr);
	}
	void fuck(int me,int xx,int yy){
		if(!S(mes[me]))return;
		if(r[me]<l[me])return;
		if(xx==1){
			while(l[me]<=r[me]&&mes[me][l[me]].fi<=yy){
				int id=mes[me][l[me]].se;l[me]++;if(use[k^1][id])continue;use[k^1][id]=1;
				q[k^1][++q[k^1][0]]=id;
			}
		}
		else{
			while(l[me]<=r[me]&&mes[me][r[me]].fi>=xx){
				int id=mes[me][r[me]].se;r[me]--;if(use[k^1][id])continue;use[k^1][id]=1;
				q[k^1][++q[k^1][0]]=id;
			}
		}
	}
	void work(int me,int ll,int rr,int x,int y,int xx,int yy){
		if(x<=ll&&rr<=y){fuck(me,xx,yy);return;}
		int mid=(ll+rr)>>1;
		if(x<=mid)work(me*2,ll,mid,x,y,xx,yy);
		if(y>mid)work(me*2+1,mid+1,rr,x,y,xx,yy);
	}
	void Do(){
		if(!q[k][0])exit(0);
		printf("%s\n",color.c_str());
		sort(q[k]+1,q[k]+1+q[k][0]);
		rep(i,1,q[k][0])printf("%d ",q[k][i]);printf("\n");
		for(;q[k][0];q[k][0]--){
			int id=q[k][q[k][0]];
			int x=u[k][id];int y=v[k][id];
			if(st[k][x]<=st[k][y]&&ed[k][y]<=ed[k][x])swap(x,y);
			if(ed[k][x]^n)work(1,1,n,st[k][x],ed[k][x],ed[k][x]+1,n);
			if(st[k][x]^1)work(1,1,n,st[k][x],ed[k][x],1,st[k][x]-1);
		}
		q[k][0]=0;
	}
}tr[2];
int n;
int main(){
	scanf("%d",&n);tr[0].init(0,n,"Blue");tr[1].init(1,n,"Red");
	rep(p,0,1)rep(i,1,n-1)tr[p].adder(u[p^1][i],v[p^1][i],i);
	rep(uu,0,1)tr[uu].deal(1,1,n);
	int biu;scanf("%d",&biu);q[0][q[0][0]=1]=biu;use[0][biu]=1;biu=0;
	for(;;){tr[biu].Do();biu^=1;}
	return 0;
}
