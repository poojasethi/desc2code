from collections import defaultdict


def create_node():
	return defaultdict(create_node)


def get_words_parity(node, breakParity, length):
	# fast forward single char nodes
	while len(node) == 1:
		node = node.values()[0]
		breakParity = 1 - breakParity
		length += 1

	if len(node) == 0:
		return length % 2

	for nextNode in node.values():
		if get_words_parity(nextNode, 1 - breakParity, length + 1) == breakParity:
			return breakParity

	return 1 - breakParity


(wordCount, gameCount) = [int(x) for x in raw_input().split()]
words = [raw_input() for i in range(0, wordCount)]

wordsTree = create_node()
for word in words:
	node = wordsTree
	for ch in word:
		node = node[ch]

firstCanWin = get_words_parity(wordsTree, 1, 0) == 1
firstCanLoose = get_words_parity(wordsTree, 0, 0) == 0

if not firstCanWin:
	print "Second"
elif firstCanLoose:
	print "First"
else:
	print "First" if gameCount % 2 == 1 else "Second"
