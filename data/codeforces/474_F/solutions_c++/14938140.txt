#include <bits/stdc++.h>
using namespace std;
int gcd(int a,int b){
	if(a>b)swap(a,b);
	if(a)return gcd(b%a,a);
	return b;
}
const int N = 1e5+1;
int tree[4*N],ar[N];
void make_tree(int l,int r,int pos){
	if(l==r){
		tree[pos]= ar[l];return;
	}
	int mid = (l+r)/2;
	make_tree(l,mid,2*pos);
	make_tree(mid+1,r,2*pos+1);
	tree[pos]= gcd(tree[pos*2],tree[2*pos+1]);
}
int querry(int l,int r,int a,int b,int pos){
	if(r<a || b<l)return 0;
	if(a<=l && r<=b)return tree[pos];
	int mid = (l+r)/2;
	return gcd(querry(l,mid,a,b,pos*2),querry(mid+1,r,a,b,2*pos+1));
}
#define vii vector<pair<int,int> >
#define all(v) v.begin(),v.end()
int main(){
	int m,l,r,n,i;scanf("%d",&n);
	vii v;
	for(i=0;i<n;++i){
		scanf("%d",&ar[i]);
		v.push_back(make_pair(ar[i],i));
	}
	sort(v.begin(),v.end());
	make_tree(0,n-1,1);cin>>m;
	for(i=0;i<m;++i){
		cin>>l>>r;--l,--r;
		int gc = querry(0,n-1,l,r,1),ret =lower_bound(all(v),make_pair(gc,r+1))-lower_bound(all(v),make_pair(gc,l));
		cout<<r-l+1-ret<<endl;
	}
}
