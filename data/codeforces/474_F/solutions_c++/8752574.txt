#include <iostream>
#include <algorithm>
using namespace std;

const int maxn = 1 << 17;

typedef pair<int,int> pii;
typedef pair<int, pii> tri;

int gcd(int a, int b) {
	return a ? gcd(b % a, a) : b;
}

pii merge(pii a, pii b) {
	return a.first == b.first ? pii(a.first, a.second + b.second) : min(a, b);
}
tri merge(tri a, tri b) {
	if (a.first < 1) return b;
	if (b.first < 1) return a;
	return tri(gcd(a.first, b.first), merge(a.second, b.second));
}

int get(tri a) {
	return a.first == a.second.first ? a.second.second : 0;
}

tri seg[2 * maxn];
int main() {
	ios_base::sync_with_stdio(0);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		int t;
		cin >> t;
		seg[i + maxn] = tri(t, pii(t, 1));
	}
	for (int i = maxn - 1; i >= 1; i--) {
		seg[i] = merge(seg[i * 2], seg[i * 2 + 1]);
	}
	int m;
	cin >> m;
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		a--;
		int len = b - a;
		a += maxn;
		b += maxn;
		tri res(0, pii(0, 0));
		while (a < b) {
			if (a % 2) {
				res = merge(res, seg[a]);
				a++;
			}
			if (b % 2) {
				b--;
				res = merge(res, seg[b]);
			}
			a /= 2;
			b /= 2;
		}
		cout << len - get(res) << '\n';
	}
}
