#include<bits/stdc++.h>
using namespace std;
pair<int,int> s[100005];
int tree[400005];
void build(int root,int l,int r){
    if(l==r){
        tree[root]=s[l].first;
        return;
    }
    int m=(l+r)/2;
    build(root*2,l,m);
    build(root*2+1,m+1,r);
    tree[root]=__gcd(tree[root*2],tree[root*2+1]);

}
int query(int root,int l,int r,int L,int R){
    if(r<L || R<l) return 0;
    if(L<=l && r<=R) return tree[root];
    int m=(l+r)/2;
    return __gcd(query(root*2,l,m,L,R),query(root*2+1,m+1,r,L,R));
}
int main(){
    int n,m,i,j,x,y,l,r;
    scanf("%d",&n);
    for(i=1;i<=n;i++){
        scanf("%d",&s[i].first);
        s[i].second=i;
    }
    build(1,1,n);
    sort(s+1,s+n+1);
    scanf("%d",&m);
    while(m--){
        scanf("%d%d",&l,&r);
        int val=query(1,1,n,l,r);
        x=lower_bound(s+1,s+n+1,make_pair(val,l))-s-1;
        y=upper_bound(s+1,s+n+1,make_pair(val,r))-s-1;
        printf("%d\n",r-l+1-y+x);
    }
}