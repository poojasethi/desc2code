#include<bits/stdc++.h>

using namespace std;

#define pp pair < int , int > 
#define segment int v, int tl, int tr
#define tm  (tl + tr >> 1)
#define sol v*2, tl, tm
#define sag v*2+1, tm+1, tr
#define N 300005

pp s[4*N],pr;

int gc[4*N],A[N],n,w,i,l,r,gcd;

pp mrg(pp a, pp b) {  if(a.first == b.first)  return make_pair(a.first , a.second + b.second);  return min(a,b);  }   

void bld(segment){
	if(tl == tr)
	{  s[v] = make_pair(A[tl] , 1);  gc[v] = A[tl];  return;  } 
	bld(sol);  bld(sag);
	s[v] = mrg(s[v*2] , s[v*2+1]);
	gc[v] = __gcd(gc[v*2] , gc[v*2+1]);
}

pp qry(segment){
	if(tl > r || tr < l)
		return make_pair(1000000009 , 0);
	if(tl >= l && tr <= r)
		return s[v];
	return mrg( qry(sol) , qry(sag) );
}

int qry2(segment){
	if(tl > r || tr < l)
		return 0;
	if(tl >= l	 && tr <= r)
		return gc[v];
	return __gcd( qry2(sol) , qry2(sag) );
}

int main(){

	scanf("%d",&n);

	for(i=1;i<=n;i++)
		scanf("%d",&A[i]);

	bld(1,1,n);

	scanf("%d",&w);

	while(w--){

		scanf("%d%d",&l,&r);

		pr = qry(1,1,n);
		gcd = qry2(1,1,n);

		printf("%d\n", (r - l + 1) - (pr.first == gcd ? pr.second : 0));

	}

	return 0;
}
