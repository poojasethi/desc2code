#include <cstdio>
#include <algorithm>

struct NODE{ int v, c; } IDX[1<<18];
int base, n, t;

int GCD(int a, int b)
{
    int G = 0;
    while( a <= b )
    {
        if( a%2 == 1 ) G = std::__gcd(G, IDX[a].v), a++;
        if( b%2 == 0 ) G = std::__gcd(G, IDX[b].v), b--;
        a>>=1, b>>=1;
    }
    return G;
}

int SUM(int a, int b, int g)
{
    int S = 0;
    while( a <= b )
    {
        if( a%2 == 1 ) S += IDX[a].c*(IDX[a].v == g), a++;
        if( b%2 == 0 ) S += IDX[b].c*(IDX[b].v == g), b--;
        a>>=1, b>>=1;
    }
    return S;
}

int main()
{
    scanf("%d", &n);
    for(base = 1 ; base < n ; base<<=1 );
    for(int i = 0 ; i < n ; i++ )
        scanf("%d", &IDX[base+i].v), IDX[base+i].c = 1;
    for(int i = base-1 ; i >= 0 ; i-- )
    {
        IDX[i].v = std::__gcd(IDX[2*i].v, IDX[2*i+1].v);
        IDX[i].c = (IDX[2*i].v==IDX[i].v)*IDX[2*i].c + (IDX[2*i+1].v==IDX[i].v)*IDX[2*i+1].c;
    }
    scanf("%d", &t);
    while(t--)
    {
        int l, r, g, sol;
        scanf("%d%d",&l,&r);
        g = GCD(l+base-1, r+base-1);
        sol = r-l+1;
        printf("%d\n", sol - SUM(l+base-1, r+base-1, g));
    }
}