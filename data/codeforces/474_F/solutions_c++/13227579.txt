#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <utility>

using namespace std;

const int N = 1e5 + 7;
const int M = 320;

int sg[4*N];
int ar[N];
int t,n,foo,bar;

pair<int,int> br[N],p;

void build(int pt,int st,int en)
{
	if(st == en)
	{
		sg[pt] = ar[st];
		return;
	}
	int m = (st+en)>>1;
	build(2*pt+1,st,m);
	build(2*pt+2,m+1,en);
	sg[pt] = __gcd(sg[2*pt+1],sg[2*pt+2]);
}
int query(int pt,int st,int en,int qs,int qe)
{
	if(st>qe or en<qs) return 0;
	if(st>=qs and en<=qe) return sg[pt];
	int m = (st+en)>>1;
	return __gcd(query(2*pt+1,st,m,qs,qe),query(2*pt+2,m+1,en,qs,qe));
}
int main()
{
	#ifndef ONLINE_JUDGE
		freopen("I.in","r",stdin);
	#endif
	cin>>n;
	for(int i=0;i<n;i++) scanf("%d",&ar[i]);
	for(int i=0;i<n;i++) br[i]=make_pair(ar[i],i);
	build(0,0,n-1);
	sort(br,br+n);
	cin>>t;
	while(t--)
	{
		scanf("%d%d",&foo,&bar);
		foo--;bar--;
		int tp = query(0,0,n-1,foo,bar);
		p = make_pair(tp,foo);
		int from = lower_bound(br,br+n,p)-br;
		p = make_pair(tp,bar+1);
		int to = lower_bound(br,br+n,p)-br;
		printf("%d\n",(bar-foo+1)-(to-from));
	}
	return 0;
}