#include<bits/stdc++.h>

#define lson l,m,rt<<1
#define rson m+1,r, rt<<1|1
#define N 111111

#define mp make_pair
using namespace std;
pair<int,int>a[N];

int s[N<<2];

int gcd(int x,int y)
{
    if (y==0) return x;
    if (x%y==0) return y;
    return gcd(y,x%y);
    }

void pushup(int rt)
{
    s[rt]=gcd(s[rt<<1],s[rt<<1|1]);
    }

void build(int l,int r,int rt)
{
    if (l==r)
    {
       s[rt]=a[l].first;
       return;
    }
    int m=(l+r)>>1;
    build(lson);
    build(rson);
    pushup(rt);
}

int query(int L,int R,int l,int r,int rt)
{
    if (L<=l&&R>=r)
        return s[rt];
    int m=(l+r)>>1;
    int ret=0;
    if (L<=m)  ret=gcd(ret,query(L,R,lson));
    if (R>m)   ret=gcd(ret,query(L,R,rson));
    return ret;
}

int main()
{
    int n;
    scanf("%d",&n);
    for (int i=1;i<=n;i++) scanf("%d",&a[i].first),a[i].second=i;
    build(1,n,1);
    sort(a+1,a+n+1);

    int Q;
    scanf("%d",&Q);
    while (Q--)
    {
        int l,r;
        scanf("%d%d",&l,&r);
        int mi=query(l,r,1,n,1);
        int x=upper_bound(a+1,a+n+1,mp(mi,r))-lower_bound(a+1,a+n+1,mp(mi,l));
        printf("%d\n",r-l+1-x);
    }
    return 0;
}
