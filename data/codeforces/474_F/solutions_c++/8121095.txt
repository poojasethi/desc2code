#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cmath>
#include <climits>

using namespace std;

const int MAXN = 100005;

int n, dp[20][MAXN];

void build() {
	for (int i = 1; (1 << i) <= n; i++)
		for (int j = 1; j + (1 << i) - 1 <= n; j++)
			dp[i][j] = __gcd(dp[i - 1][j], dp[i - 1][j + (1 << (i - 1))]);
}

int query(int l, int r) {
	int d = int(log2(r - l + 1));
	return __gcd(dp[d][l], dp[d][r - (1 << d) + 1]);
}

map<int, vector<int> > m;

int main() {
    //freopen("dat.in", "r", stdin);
	cin >> n;
	for (int i = 1, x; i <= n; i++) {
		cin >> x;
		dp[0][i] = x;
		m[x].push_back(i);
	}
    build();
	int q;
	cin >> q;
	while (q--) {
		int l, r;
		cin >> l >> r;
		int g = query(l, r);
		//cout << g << "\n";
		int a = lower_bound(m[g].begin(), m[g].end(), l) - m[g].begin();
		int b = upper_bound(m[g].begin(), m[g].end(), r) - m[g].begin();
		int ans = b - a;
		cout << r - l + 1 - ans << "\n";
	}
}
