#include<iostream>
#include<algorithm>
#define N 100010
#define F first
#define S second
using namespace std;

int n,t;
int s[N];
int seg[N<<2];
pair<int,int> p[N];

void pushup(int rt){
    seg[rt]=__gcd(seg[rt<<1],seg[rt<<1|1]);
}

void build(int l,int r,int rt){
    if(l==r){
        seg[rt]=p[l].F;
        return;
    }
    int m=(l+r)>>1;
    build(l,m,rt<<1);
    build(m+1,r,rt<<1|1);
    pushup(rt);
}

int query(int L,int R,int l,int r,int rt){
    if(L<=l&&R>=r) return seg[rt];
    int m=(l+r)>>1;
    int x=0,y=0;
    if(L<=m) x=query(L,R,l,m,rt<<1);
    if(R>m) y=query(L,R,m+1,r,rt<<1|1);
    return __gcd(x,y);
}

int main()
{
    ios::sync_with_stdio(false);
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>p[i].F;
        p[i].S=i;
    }
    build(0,n-1,1);
    sort(p,p+n);
    cin>>t;
    int l,r;
    while(t--){
        cin>>l>>r;
        l--,r--;
        int x=query(l,r,0,n-1,1);
        cout<<r-l+1-(upper_bound(p,p+n,make_pair(x,r))-lower_bound(p,p+n,make_pair(x,l)))<<endl;
    }
    return 0;
}
