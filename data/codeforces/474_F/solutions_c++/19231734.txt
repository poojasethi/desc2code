#include <cstdio>
#include <algorithm>
#define N 100005
using namespace std;

pair <int, int> p1, p2, d[N];
struct node
{
	int x, y, gcd;
}c[4 * N];
int n, a[N];

int gtgcd(int x, int y)
{
	int z;
	while(y)
	{
		z = x % y;
		x = y;
		y = z;
	}
	return x;
}
void build(int x, int y, int i)
{
	c[i].x = x; c[i].y = y;
	if(x == y)
	{
		c[i].gcd = a[x];
		return ;
	}
	int mid = (x + y) / 2;
	build(x, mid, i * 2);
	build(mid + 1, y, i * 2 + 1);
	c[i].gcd = gtgcd(c[i * 2].gcd, c[i * 2 + 1].gcd);
}
int solve(int x, int y, int i)
{
	if(x <= c[i].x && c[i].y <= y)
		return c[i].gcd;
	int s, s1 = 0, s2 = 0, mid = (c[i].x + c[i].y) / 2;
	if(x <= mid)
		s1 = solve(x, y, i * 2);
	if(y > mid)
		s2 = solve(x, y, i * 2 + 1);
	s = gtgcd(s1, s2);
	return s;
}
int main()
{
	int i, t, x, y, g, l, r;
	scanf("%d", &n);
	for(i = 1; i <= n; ++i)
	{
		scanf("%d", a + i);
		d[i - 1] = make_pair(a[i], i);
	}
    sort(d, d + n);
	build(1, n, 1);
	scanf("%d", &t);
	while(t --)
	{
		scanf("%d%d", &x, &y);
		g = solve(x, y, 1);
		p1 = make_pair(g, x);
		p2 = make_pair(g, y + 1);
        l = lower_bound(d, d + n, p1) - d;
		r = lower_bound(d, d + n, p2) - d;
		printf("%d\n", y - x + 1 - (r - l));
	}
}

	 	  	 			  	  	   	  					 		