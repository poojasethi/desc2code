#include <bits/stdc++.h>
//Practice makes perfect

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 1e5 + 100;

int gcd[MAXN * 4], a[MAXN];
map< int, vector<int> > num;

void build(int x, int xl, int xr){
	if (xr - xl == 1) {
		gcd[x] = a[xl];
		return;
	}

	int mid = (xl + xr) / 2, l = 2 * x, r = l + 1;
	build(l, xl, mid);
	build(r, mid, xr);
	gcd[x] = __gcd(gcd[l], gcd[r]);
}

int getgcd(int x, int xl, int xr, int ql, int qr){
	if (xl >= qr || xr <= ql) return -1;
	if (xl >= ql && xr <= qr) return gcd[x];

	int mid = (xl + xr) / 2, l = 2 * x, r = l + 1;

	int f = getgcd(l, xl, mid, ql, qr), s = getgcd(r, mid, xr, ql, qr);

	if (f == -1) return s;
	else if (s == -1) return f;
	else return __gcd(f, s);
}

int main(){
	int n; scanf("%d", &n);
	for (int i = 0; i < n; i++){
		scanf("%d", &a[i]);
		num[ a[i] ].push_back(i);
	}

	build(1, 0, n);

	int t; scanf("%d", &t);

	while(t--){
		int l, r; scanf("%d%d", &l, &r);
		l--;

		int temp = getgcd(1, 0, n, l, r);
		vector<int> :: iterator s = num[temp].begin(), e = num[temp].end();
		printf("%d\n", r - l - (lower_bound(s, e, r) - lower_bound(s, e, l)) );
	}

}
