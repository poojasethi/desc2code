#include<cstdio>
#include<vector>
#include<algorithm>
#include<map>
using namespace std;
int n, q, l, r, i, j, s[110000], f[110000][30], U[110000];
map<int, vector<int> >C;
int gcd(int a, int b)
{
	if (!b) return a;
	return gcd(b, a % b);
}
int Calc(int x, int l, int r)
{
	int L = lower_bound(C[x].begin(), C[x].end(), l) - C[x].begin(),
		R = upper_bound(C[x].begin(), C[x].end(), r) - C[x].begin();
	return (r - l + 1 - R + L);
}
int Rmq(int l, int r)
{
	return gcd(f[l][U[r - l + 1]], f[r + 1 - (1 << U[r - l + 1])][U[r - l + 1]]);	
}
int main()
{
	scanf("%d", &n);
	for (i = 1; i <= n; i++) scanf("%d", &s[i]);
	for (i = 1; i <= n; i++) 
		f[i][0] = s[i], C[s[i]].push_back(i);
	for (i = 1; 1 << i <= n; i++)
		for (j = 1; j + (1 << i) <= n + 1; j++)
			f[j][i] = gcd(f[j + (1 << (i - 1))][i - 1], f[j][i - 1]); 
	for (i = 1; 1 << i <= n; i++) U[1 << i] = i;
	for (i = 1; i <= n; i++) if (!U[i]) U[i] = U[i - 1]; 
	scanf("%d", &q);
	while (q--)
	{
		scanf("%d%d", &l, &r);
		printf("%d\n", Calc(Rmq(l, r), l, r));
	}
	return 0;
}