from collections import deque

def valid_point(grid, row, col):
	return row >= 0 and row < len(grid) \
	and col >= 0 and col < len(grid[0]) \
	and grid[row][col] == "nv"

def traverse(grid, startx, starty):
	global points

	stack = [(startx, starty)]
	while stack:
		row, col = stack.pop()
		if not valid_point(grid, row, col): continue
		if grid[row][col] != "nv": continue
		grid[row][col] = "."
		points.append((row,col))
		
		stack.append((row-1, col))
		stack.append((row, col-1))
		stack.append((row+1, col))
		stack.append((row, col+1))

n, m, walls = map(int, raw_input().strip().split())

grid = []
for line in range(n):
	grid.append([c for c in raw_input().strip()])

points = deque(maxlen=walls)

if walls > 0:
	for r in range(n):
		for c in range(m):
			if grid[r][c] == ".":
				start = r, c
				grid[r][c] = "nv" # Not visited
	
	traverse(grid, start[0], start[1])


while points:
	r,c = points.pop()
	grid[r][c] = "X"

for line in grid:
	#for i in range(len(line)):
		#if line[i] == "nv":
	#		line[i] = "."
	print("".join(line))
