def dfs(graph, start, tam, k):
    visited, stack = set(), [start]
    cont = 0
    while stack:
	if cont == tam - k: break

	vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)
	    cont += 1
    return visited

a = raw_input().split()
a = map(int, a)
n, m, k = a

l = []
for i in range(n):
	l.append(list(raw_input()))

graph = {}
for i in range(n):
	for j in range(m):
		if l[i][j] == ".":
			graph[(i, j)] = set()
			start = (i, j)
			if i + 1 < n and l[i + 1][j] == ".":
				graph[(i, j)].add((i + 1, j))
			if i - 1 >= 0  and l[i - 1][j] == ".":
				 graph[(i, j)].add((i - 1, j))
			if j + 1 < m  and l[i][j + 1] == ".":
				 graph[(i, j)].add((i, j + 1))
			if j - 1 >= 0  and l[i][j - 1] == ".":
				 graph[(i, j)].add((i, j - 1))

conec = dfs(graph, start, len(graph), k)

for i in range(n):
        for j in range(m):
		if (i, j) not in conec and l[i][j] == ".":
			l[i][j] = "X"

for i in range(n):
	print "".join(l[i])
