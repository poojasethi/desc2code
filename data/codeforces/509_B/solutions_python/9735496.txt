#!/usr/bin/python

"""
Problem: http://codeforces.com/contest/509/problem/B
"""

def distribute_colors(stones_in_pile, colors_n):
    def next_color(color):
        return (color+1) % colors_n

    def pre_validate(stones_in_pile):
        for i in range(len(stones_in_pile)):
            for j in range(i, len(stones_in_pile)):
                if abs(stones_in_pile[i] - stones_in_pile[j]) > colors_n:
                    return False
        return True

    if not pre_validate(stones_in_pile):
        return None

    all_stones = sum(stones_in_pile)
    color = 0
    colored_stones = []
    uncolored_stones_per_pile = []
    for stones_num in stones_in_pile:
        colored_stones.append([])
        uncolored_stones_per_pile.append(stones_num)

    min_ai = min(stones_in_pile)

    # color up to min_ai stones in first color
    for i, pile in enumerate(stones_in_pile):
        to_paint = min(min_ai, pile)
        uncolored_stones_per_pile[i] -= to_paint
        colored_stones[i].extend([color for _ in range(to_paint)])
        all_stones -= to_paint
    while(all_stones):
        color = next_color(color)
        for i, pile in enumerate(stones_in_pile):
            to_paint = min(uncolored_stones_per_pile[i], 1)
            uncolored_stones_per_pile[i] -= to_paint
            colored_stones[i].extend([color for _ in range(to_paint)])
            all_stones -= to_paint
    return colored_stones

if __name__ == "__main__":
    piles_colors = raw_input()
    piles_n, colors_n = [int(i) for i in piles_colors.split(' ')]
    stones_in_pile = [int(i) for i in raw_input().split()]

    result = distribute_colors(stones_in_pile, colors_n)
    if not result:
        print "NO"
    else:
        print "YES"
        for line in result:
            print " ".join(str(x+1) for x in line)
