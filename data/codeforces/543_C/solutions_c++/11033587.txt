#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 21;
const int MAXMASK = 1 << MAXN;
const int ALPHA = 26;
const int INF = 1000000000;

int dp[MAXMASK];
int a[MAXN][MAXN];
int sum[MAXN][ALPHA];
int mx[MAXN][ALPHA];
int mask[MAXN][ALPHA];
string s[MAXN];

int main()
{
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> s[i];
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
		{
			cin >> a[j][i];
			sum[j][s[i][j] - 'a'] += a[j][i];
			mx[j][s[i][j] - 'a'] = max(mx[j][s[i][j] - 'a'], a[j][i]);
			mask[j][s[i][j] - 'a'] |= 1 << i;
		}
	int mxmask = 1 << n;
	for (int i = 0; i < mxmask; i++)
		for (int j = 0; j < n; j++)
			if ((i >> j) & 1)
			{
				int tmp = INF;
				for (int k = 0; k < m; k++)
					tmp = min(tmp, a[k][j]);
				dp[i] += tmp;
			}
	dp[0] = 0;
	for (int i = 0; i < m; i++)
		for (int j = 0; j < ALPHA; j++)
			for (int k = mxmask - 1; k >= 0; k--)
				dp[k] = min(dp[k], dp[k & (mxmask - 1 -  mask[i][j])] + sum[i][j] - mx[i][j]);
	cout << dp[mxmask - 1] << endl;

}
