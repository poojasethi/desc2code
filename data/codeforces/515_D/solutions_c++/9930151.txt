#include <iostream>
#include <string>
#include <queue>

using namespace std;

#define NMAX 2007

int N,M,i,j,k,dir;
char c[NMAX][NMAX];
int deg[NMAX][NMAX];
const int dx[]={0,0,-1,1};
const int dy[]={-1,1,0,0};
const string s[2]={"<>^v","><v^"};
string t;
queue < int > Qx,Qy;

int main()
{
cin>>N>>M;

for (i=1;i<=N;++i)
{
    cin>>t;

    for (j=1;j<=M;++j)
    c[i][j]=t[j-1];
}

for (i=1;i<=N;++i)
for (j=1;j<=M;++j)
{
    if (c[i][j]=='*') continue;

    for (k=0;k<=3;++k)
    if (c[i+dx[k]][j+dy[k]]=='.') ++deg[i][j];

    if (deg[i][j]==1)
    {
        Qx.push(i);
        Qy.push(j);
    }
}

while (Qx.size())
{
    i=Qx.front();
    j=Qy.front();
    Qx.pop(),Qy.pop();

    if (c[i][j]!='.') continue;

    for (k=0,dir=4;k<=3;++k)
    if (c[i+dx[k]][j+dy[k]]=='.') dir=k;

    if (dir==4)
    {
        cout<<"Not unique"<<'\n';
        return 0;
    }

    c[i+dx[dir]][j+dy[dir]]=s[0][dir];
    c[i][j]=s[1][dir];

    deg[i+dx[dir]][j+dy[dir]]=0;
    deg[i][j]=0;

    for (k=0;k<=3;++k)
    {
        --deg[i+dx[dir]+dx[k]][j+dy[dir]+dy[k]];

        if (deg[i+dx[dir]+dx[k]][j+dy[dir]+dy[k]]!=1) continue;

        Qx.push(i+dx[dir]+dx[k]);
        Qy.push(j+dy[dir]+dy[k]);
    }
}

for (i=1;i<=N;++i)
for (j=1;j<=M;++j)
if (c[i][j]=='.')
{
    cout<<"Not unique"<<'\n';
    return 0;
}

for (i=1;i<=N;++i,cout<<'\n')
for (j=1;j<=M;++j)
cout<<c[i][j];

return 0;
}
