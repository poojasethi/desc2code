#include <stdio.h>

const int N = 600000;

int first[N + 10];
int next[2 * N + 10];
int to[2 * N + 10];
bool del[2 * N + 10];
void add_r(int f,int t)
{
	static int tot = 1;
	tot ++;
	to[tot] = t;
	next[tot] = first[f];
	first[f] = tot;
}

void add(int f,int t)
{
	add_r(f,t);
	add_r(t,f);
}

int f[N + 10];
bool good[N + 10];
int find(int a)
{
	if(f[a] == a)
		return a;
	return f[a] = find(f[a]);
}

int tot = 0;

int stack[N + 10];
int top = 0;
int low[N + 10];
int dfn[N + 10];
bool done[N + 10];
int tim = 0;
void DFS(int d)
{
	if(dfn[d])
		return;
	stack[++top] = d;
	low[d] = dfn[d] = ++tim;
	for(int r = first[d];r;r = next[r])
	{
		if(del[r])
			continue;
		del[r ^ 1] = true;
		DFS(to[r]);
		if((!done[to[r]]) && low[to[r]] < low[d])
			low[d] = low[to[r]];
	}

	if(dfn[d] == low[d])
	{
		while(stack[top+1] != d)
		{
			if(good[find(stack[top])])
				good[find(d)] = true;
			f[find(stack[top])] = find(d);
			done[d] = true;
			top --;
		}
	}
}

int main()
{
//	freopen("ex.in","r",stdin);
//	freopen("ex.out","w",stdout);

	for(int i = 1;i <= N;i++)
		f[i] = i;

	int n = 0;
	int m = 0;
	int a = 0;
	int b = 0;

	scanf("%d%d",&n,&m);

	int u = 0;
	int v = 0;
	int l = 0;
	for(int i = 1;i <= m;i++)
	{
		scanf("%d%d%d",&u,&v,&l);

		n ++;

		add(u,n);
		add(v,n);

		good[find(n)] = l;
	}

	scanf("%d%d",&a,&b);

	add(a,b);

	DFS(a);

	bool res = good[find(a)];

	printf(res ? "YES\n" : "NO\n");

	return 0;
}
