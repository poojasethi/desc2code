#include<cstdio>
#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
const int N=3e5+10;
struct Edge {
    int v,next,id;
    Edge(int v=-1,int next=-1,int id=-1):v(v),next(next),id(id){}
}e[N*2];
int head[N],total;
void init(){
    total=0;memset(head,-1,sizeof(head));
}
void adde(int u,int v,int id){
    e[total]=Edge(v,head[u],id);head[u]=total++;
}

int dfn[N],low[N],clock,cut[N];

void dfs(int u,int f){
    //printf("%d %d\n",f,u);
    dfn[u]=low[u]=++clock;
    for(int i=head[u];i!=-1;i=e[i].next){
        int v=e[i].v;if(v==f)continue;
        if(!dfn[v]){
            dfs(v,u);
            low[u]=min(low[u],low[v]);
            if(low[v]>dfn[u]){
                cut[e[i].id]=1;
            }
        }
        else {
            low[u]=min(low[u],dfn[v]);
        }
    }
}

int aa[N],bb[N],cc[N];
int f[N];
int Find(int x){
    if(x==f[x])return x;
    return f[x]=Find(f[x]);
}
int sum[N];
int vis[N];
int dis[N];
int main(){
    #ifdef DouBi
    freopen("in.cpp","r",stdin);
    #endif // DouBi
    int n,m;while(scanf("%d%d",&n,&m)!=EOF){
        init();
        for(int i=0;i<m;i++){
            scanf("%d%d%d",&aa[i],&bb[i],&cc[i]);
            adde(aa[i],bb[i],i);adde(bb[i],aa[i],i);
        }
        clock=0;memset(cut,0,sizeof(cut));memset(dfn,0,sizeof(dfn));
        dfs(1,0);
        //for(int i=0;i<m;i++)printf("%d ",cut[i]);printf("\n");
        //for(int i=1;i<=n;i++)printf("%d \n",low[i]);printf("\n");
        for(int i=1;i<=n;i++)f[i]=i;memset(sum,0,sizeof(sum));
        for(int i=0;i<m;i++)if(!cut[i]){
            int a=Find(aa[i]),b=Find(bb[i]);
            if(a!=b){
                f[a]=b;sum[b]|=sum[a];
            }
            sum[b]|=cc[i];
        }
        for(int i=1;i<=n;i++)Find(i);
        init();
        for(int i=0;i<m;i++)if(cut[i]){
            int a=f[aa[i]],b=f[bb[i]];
            adde(a,b,i);adde(b,a,i);
        }
        int a,b;scanf("%d%d",&a,&b);
        memset(vis,0,sizeof(vis));
        queue<int> qq;qq.push(f[a]);vis[f[a]]=1;dis[f[a]]=sum[f[a]];
        while(!qq.empty()){
            int u=qq.front();qq.pop();
            for(int i=head[u];i!=-1;i=e[i].next){
                int v=e[i].v;if(vis[v])continue;
                dis[v]=sum[v]|dis[u]|cc[e[i].id];
                vis[v]=1;qq.push(v);
            }
        }
        if(dis[f[b]])printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}

 				 	        	 	 		 								