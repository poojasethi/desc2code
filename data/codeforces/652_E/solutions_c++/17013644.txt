#include<bits/stdc++.h>
#define N 300050
using namespace std;
struct edge{
    int id,w;
    edge *next;
};
bool ok,vis[N],have[N],vism[N];
int st,ed,ednum,dfn[N],low[N],id[N],s[N],p,num,t,son[N];
edge edges[N<<1];
edge *adj[N];
inline void add_edge(int a,int b,int c){
    edge *tmp=&edges[ednum++];
    tmp->id=b;
    tmp->next=adj[a];
    tmp->w=c;
    adj[a]=tmp;
}
void tarjan(int pos){
    dfn[pos]=low[pos]=++num;
    s[++p]=pos;
    for(edge *it=adj[pos];it;it=it->next){
        if(!dfn[it->id]){
            son[pos]=it->id;
            tarjan(it->id);
        }
        if(son[it->id]!=pos)
            low[pos]=min(low[pos],low[it->id]);
    }
    if(low[pos]==dfn[pos]){
        t++;
        int y;
        do{
            y=s[p--];
            id[y]=t;
        }while(y!=pos);
    }
}
void dfs(int pos){
    vism[pos]=1;
    if(!have[id[pos]]){
        for(edge *it=adj[pos];it;it=it->next){
            if(id[it->id]==id[pos]){
                if(it->w) have[id[pos]]=1;
                if(!vism[it->id])dfs(it->id);
            }
        }
    }
}
void dfs2(int pos,bool h){
    vism[pos]=1;
    h=h||have[id[pos]];
    if(id[ed]==id[pos]&&h)ok=1;
    for(edge *it=adj[pos];it;it=it->next){
        if(!vism[it->id]){
            dfs2(it->id,h||it->w);
        }
    }
}
int  main()
{
    stack<int>ss;
    int n,m;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=m;i++){
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        add_edge(a,b,c);
        add_edge(b,a,c);
    }
    scanf("%d%d",&st,&ed);
    tarjan(1);
    for(int i=1;i<=n;i++){
        if(!vis[id[i]]){
            vis[id[i]]=1;
            dfs(i);
        }
    }
    memset(vism,0,sizeof(vism));
    dfs2(st,0);
    if(ok)puts("YES");
    else puts("NO");
}

  	   						  	 			   	  	    	