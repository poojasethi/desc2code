#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
using namespace std;

#define TRACE(x) cout << #x << " = " << x << endl;

typedef pair<int, int> par;

#define X first
#define Y second

const int MAXN = 300010;

int n, m, poc, kraj, timer = 1;
int imam_kraj, imam_jedinicu;

int disc[MAXN], lowlink[MAXN], bio[MAXN];

vector<par> graf[MAXN], novi[MAXN];

map<par, int> bridge;

void spoji(int a, int b, int c)
{
    graf[a].push_back(par(b, c));
    graf[b].push_back(par(a, c));
}

int tarjan(int cvor, int roditelj)
{
    if(lowlink[cvor] != 0) return lowlink[cvor];
    disc[cvor] = timer++;
    lowlink[cvor] = disc[cvor];
    for(int i = 0; i < graf[cvor].size(); i++)
    {
        int kamo = graf[cvor][i].X;
        if(kamo == roditelj) continue;
        int t = tarjan(kamo, cvor);
        lowlink[cvor] = min(lowlink[cvor], t);
        if(t > disc[cvor])
            bridge[par(cvor, kamo)] = bridge[par(kamo, cvor)] = 1;
    }
    return lowlink[cvor];
}

void dfs(int cvor)
{
    if(bio[cvor]) return;
    bio[cvor] = 1;
    if(cvor == kraj) imam_kraj = 1;
    for(int i = 0; i < graf[cvor].size(); i++)
    {
        int kamo = graf[cvor][i].X;
        int tip = graf[cvor][i].Y;
        if(bridge[par(cvor, kamo)]) continue;
        if(tip == 1) imam_jedinicu = 1;
        dfs(kamo);
    }
}

int main()
{
    scanf("%d %d", &n, &m);
    for(int i = 0; i < m; i++)
    {
        int a, b, c;
        scanf("%d %d %d", &a, &b, &c);
        spoji(a, b, c);
    }
    scanf("%d %d", &poc, &kraj);
    spoji(poc, 0, 0);
    spoji(kraj, 0, 0);
    tarjan(1, -1);
    dfs(poc);
    if(imam_kraj && imam_jedinicu)
        printf("YES\n");
    else
        printf("NO\n");
    return 0;
}
