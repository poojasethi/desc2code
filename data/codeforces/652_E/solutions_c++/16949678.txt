#include <bits/stdc++.h>
#define fi first
#define se second
using namespace std;

typedef pair < int , int > ii;

const int maxn = 3e5 + 5;

int n,m,s,t,disc[maxn],low[maxn],bcc[maxn];
vector < ii > way[maxn];
map < int , int > edge[maxn];
bool ok[maxn],used[maxn];

int findset( int x ){
	if( x == bcc[x] ) return x;
	return bcc[x] = findset(bcc[x]);
}

void dfs( int node , int dad ){
	static int time = 0;
	disc[node] = low[node] = ++time;
	for( int i = 0 ; i < (int)way[node].size() ; i++ ){
		int adj = way[node][i].fi;
		if( adj == dad ) continue;
		if( !disc[adj] ){
			dfs(adj , node);
			if( low[node] > low[adj] )
				low[node] = low[adj] , bcc[node] = bcc[adj];
		} else if( low[node] > disc[adj] )
				low[node] = disc[adj] , bcc[node] = bcc[adj];
	}
}

void solve( int node , bool flag ){
	used[node] = 1;
	flag |= ok[node];
	if( node == t ){
		puts(flag ? "YES" : "NO");
		exit(0);
	}
	for( map < int , int > :: iterator it = edge[node].begin() ; it != edge[node].end() ; it++ )
		if( !used[it -> fi] )
			solve(it -> fi , flag | it -> se);
}

int main(){
	
	scanf("%d%d",&n,&m);
	
	for( int i = 0,a,b,c ; i < m ; i++ ){
		scanf("%d%d%d",&a,&b,&c);
		way[a].push_back(ii(b,c));
		way[b].push_back(ii(a,c));
	}
	
	for( int i = 1 ; i <= n ; i++ ) bcc[i] = i;
	
	dfs(1 , 0);
	
	for( int i = 1 ; i <= n ; i++ ) findset(i);
	
	for( int i = 1 ; i <= n ; i++ )
		for( int j = 0 ; j < (int)way[i].size() ; j++ ){
			int a = bcc[i] , b = bcc[way[i][j].fi];
			if( a == b ) ok[a] |= way[i][j].se;
			else edge[a][b] |= way[i][j].se;
		}
	scanf("%d%d",&s,&t);
	s = bcc[s] , t = bcc[t];
	
	solve(s , 0);
	
	return 0;
}
