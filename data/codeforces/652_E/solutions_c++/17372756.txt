#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int MX = 3e5 + 5;
int head[MX], l=2;
int h[MX << 1],V[MX<<1],last[MX<<1],t[MX<<1];

void add(int u, int y, int z)
{
	t[l] = u;V[l] = z;h[l] = y;
    last[l] = head[u];
    head[u] = l++;
}

int n, m;
int dfn[MX], low[MX], cnt;
int St[MX], is[MX], Belong[MX],N,st;
int A[MX];
void tarjan(int x,int fa)
{
//	printf("%d",x);
	is[x] = 1;St[++st] = x;
	dfn[x] = low[x] = ++cnt;
	for (int i = head[x];i;i = last[i])
	{
		if ((i^1) == fa) continue;
		int j = h[i];
		if (!dfn[j]) tarjan(j,i),low[x] = min(low[x],low[j]);
		else if (dfn[j]<dfn[x]) low[x] = min(low[x],dfn[j]);
	}
	if (dfn[x] == low[x])
	{
		int v = St[st--];
	//	printf("%d",v);
        is[v] = 0;
        Belong[v] = ++N;
        for (;st && v != x;v = St[st--],is[v]=0,Belong[v] = N);
    }
}
int DFS(int st, int ed, int f, int s) {
    s |= A[st];
    if(st == ed) return s;
    for(int i = head[st];i; i = last[i])
	{
        int v = h[i];
        if(v == f) continue;
        if(DFS(v, ed, st, s | V[i])) return 1;
    }
    return 0;
}

int main()
{
	scanf("%d%d",&n,&m);
	for (int i = 1;i <= m;i++)
	{
		int x,y,z;
		scanf("%d%d%d",&x,&y,&z);
		add(x,y,z);
		add(y,x,z);
	}
	for (int i = 1;i <= n;i++)
		if (!dfn[i]) tarjan(i,-1);
	int etot = l;
	l = 1;memset(head,0,sizeof(head));
    for(int i = 1; i < etot;i++)
	{
        int u = Belong[t[i]],v = Belong[h[i]];
        if(u == v) A[u] |= V[i];
        else add(u, v, V[i]);
    }
    int st,ed;
    scanf("%d%d",&st,&ed);
    if(DFS(Belong[st],Belong[ed],-1,0)) puts("YES");
	else puts("NO");
    return 0;
}