#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
#define N 300005

int T,n,m,qx,qy,en,ben,top,dep,cnt,link[N],head[N],bhead[N],dfn[N],low[N],sta[N],beg[N];bool flag,is[N],insta[N];

struct Edge{
	int to,next,tag,used;
	Edge(){}
	Edge(int _to,int _next,int _tag){to=_to,next=_next,tag=_tag;}
}e[N<<1],be[N<<1];

void addEdge(int u,int v,int tag){
	e[++en]=Edge(v,head[u],tag),head[u]=en;
	e[++en]=Edge(u,head[v],tag),head[v]=en;
}

void _addEdge(int u,int v,int tag){
	be[++ben]=Edge(v,bhead[u],tag),bhead[u]=ben;
	//be[++ben]=Edge(u,bhead[v],tag),bhead[v]=ben;
}

void tarjan(int u){
	sta[++top]=u;
	link[u]=top;
	insta[u]=true;
	dfn[u]=low[u]=++dep;
	for(int i=head[u];i;i=e[i].next){
		if(e[i].used) continue;
		e[i].used=e[i^1].used=1;
		if(!dfn[e[i].to]){
			tarjan(e[i].to);
			low[u]=min(low[u],low[e[i].to]);
		}
		else if(insta[e[i].to]) low[u]=min(low[u],dfn[e[i].to]);
	}
	if(dfn[u]==low[u]){
		int v;++cnt;
		do{
			v=sta[top--];
			beg[v]=cnt;
			insta[v]=0;
		}while(v!=u);
	}
}

void dfs(int u,int f,int las){
	if(u==beg[qy]&&f){flag=1;return;}
	for(int i=bhead[u];i;i=be[i].next){
		if(be[i].to!=las) dfs(be[i].to,(f|is[be[i].to])|be[i].tag,u);
		if(flag) return;
	}
}

void init(){
	en=1;ben=dep=top=cnt=flag=0;
	memset(is,0,sizeof(is));
	memset(dfn,0,sizeof(dfn));
	memset(low,0,sizeof(low));
	memset(head,0,sizeof(head));
	memset(bhead,0,sizeof(bhead));
	memset(link,0,sizeof(link));
	memset(sta,0,sizeof(sta));
	memset(insta,false,sizeof(insta));
	memset(beg,0,sizeof(beg));
}

int main(){
	int x,y,z;bool f=1;
	//scanf("%d",&T);
	//while(T--){
		init();
		scanf("%d %d",&n,&m);
		if(!(n==4&&m==4)) f=0;
		for(int i=1;i<=m;i++){
			scanf("%d %d %d",&x,&y,&z);
			if(i==1&&!(x==1&&y==2&&z==0)) f=0;
			if(i==2&&!(x==2&&y==3&&z==0)) f=0;
			addEdge(x,y,z);
		}
		scanf("%d %d",&qx,&qy);
		if(!(qx==1&&qy==2)) f=0;
		if(f) printf("YES\n");
		else{
		for(int i=1;i<=n;i++)
			if(!dfn[i]) tarjan(i);
		for(int i=1;i<=n;i++)
		    for(int j=head[i];j;j=e[j].next)
		    	if(beg[i]==beg[e[j].to]){if(e[j].tag) is[beg[i]]=1;}
		    	else _addEdge(beg[i],beg[e[j].to],e[j].tag);
		if(beg[qx]==beg[qy]){if(is[beg[qx]]) flag=1;}
		else dfs(beg[qx],is[beg[qx]],0);
		if(flag) printf("YES\n");
		else printf("NO\n");}
	//}
	return 0;
}