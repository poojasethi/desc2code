//Copyright(c)2016 liuchenrui
#include<bits/stdc++.h>
using namespace std;
inline void splay(int &v){
	v=0;char c=0;int p=1;
	while(c<'0' || c>'9'){if(c=='-')p=-1;c=getchar();}
	while(c>='0' && c<='9'){v=(v<<3)+(v<<1)+c-'0';c=getchar();}
	v*=p;
}
struct Edge{
	int to,next;
	bool is;
}edge[1200010];
bool f[1200010];
int low[1200010],dfn[1200010],size,first[1200010];
int tot,insta[1200010];
int is[1200010],can[1200010],ned[1200010];
int sta[1200010],top;
int n,m,s,t;
void addedge(int x,int y){
	size++;
	edge[size].to=y;
	edge[size].next=first[x];
	first[x]=size;
}
void add(int x,int y){
	addedge(x,y),addedge(y,x);
}
void dfs(int now,int fa){
	dfn[now]=low[now]=++tot;
	insta[now]=1,sta[++top]=now;
	for(int u=first[now];u;u=edge[u].next){
		if(edge[u].to==fa)continue;
		if(!dfn[edge[u].to]){
			dfs(edge[u].to,now);
			low[now]=min(low[now],low[edge[u].to]);
		}
		else if(insta[edge[u].to]){
			low[now]=min(low[now],dfn[edge[u].to]);
		}
		if(low[edge[u].to]>dfn[now]){
			edge[u].is=1;
			edge[((u-1)^1)+1].is=1;
		}
	}
	if(low[now]==dfn[now]){
		int x=0;
		do{
			x=sta[top--];
			insta[x]=0;
		}while(x!=now);
	}
}
bool vis[300010];
void dfs2(int x){
	vis[x]=1;
	for(int u=first[x];u;u=edge[u].next){
		if(edge[u].is)continue;
		if(ned[u+1>>1])puts("YES"),exit(0);
		if(!vis[edge[u].to]){
			dfs2(edge[u].to);
		}
	}
}
int main(){
	splay(n),splay(m);
	for(int i=1;i<=m;i++){
		int x,y;splay(x),splay(y);
		add(x,y);splay(ned[i]);
	}
	splay(s),splay(t);
	add(s,++n),add(n,t);
	dfs(s,0);dfs2(s);
	puts("NO");
}