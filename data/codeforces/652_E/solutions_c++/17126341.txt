#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cmath>
#include <algorithm>
using namespace std;
const int maxn=600010;
struct Edge{
	int from,to,next,w;
}edge[maxn*2],edge2[maxn*2];
int n,m,head[maxn],p;
void addedge(int a,int b,int c){
	edge[++p]=(Edge){a,b,head[a],c};
	head[a]=p;
}
int dfn[maxn],low[maxn],Time,tot,stack[maxn],color[maxn],cnt,type[maxn];
void dfs(int a,int b){
	dfn[a]=low[a]=++Time;
	for (int i=head[a];i;i=edge[i].next)
		if (i!=(b^1)){
			if (!dfn[edge[i].to]){
				stack[++tot]=i;
				dfs(edge[i].to,i);
				low[a]=min(low[a],low[edge[i].to]);
			}
			else //if (!color[edge[i].to])
				stack[++tot]=i,low[a]=min(low[a],dfn[edge[i].to]);
		}
	if (dfn[a]==low[a]){
		cnt++;
		color[a]=cnt;
		do{
			int now=stack[tot];
			color[edge[now].to]=cnt;
			if (now!=b)
				type[cnt]|=edge[now].w;
		}while (tot&&stack[tot--]!=b);
	}
}
int head2[maxn],p2;
void connect(int a,int b,int c){
	edge2[++p2]=(Edge){a,b,head2[a],c};
	head2[a]=p2;
}
int s,t;
int line[maxn],vis[maxn];
void bfs(){
	int cl=0,op=1;
	line[op]=color[s];
	vis[color[s]]=1;
	for (;cl<op;){
		int now=line[++cl];
		for (int i=head2[now];i;i=edge2[i].next)
			if (!vis[edge2[i].to]){
				vis[edge2[i].to]=1;
				line[++op]=edge2[i].to;
				type[edge2[i].to]|=type[now];
				type[edge2[i].to]|=edge2[i].w;
			}
	}
	if (type[color[t]])
		printf("YES");
	else printf("NO");
}
int main(){
//	freopen("a.in","r",stdin);
//	freopen("a.out","w",stdout);
	p=1;
	scanf("%d%d",&n,&m);
	for (int i=1;i<=m;i++){
		int a,b,c;
		scanf("%d%d%d",&a,&b,&c);
		addedge(a,b,c);
		addedge(b,a,c);
	}
	scanf("%d%d",&s,&t);
	dfs(1,0);
	for (int i=2;i<=p;i++)
		if (color[edge[i].to]!=color[edge[i].from])
			connect(color[edge[i].from],color[edge[i].to],edge[i].w);
//	printf("%d %d %d %d\n",color[s],color[t],type[color[s]],type[color[t]]);
	bfs();
//	fclose(stdin);
//	fclose(stdout);
	return 0;
}
