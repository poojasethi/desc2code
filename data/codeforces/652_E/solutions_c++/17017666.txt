#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxn=300010;

struct Graph
{
	int head[maxn],next[maxn<<1],E[maxn<<1],D[maxn<<1],Ecnt;
	void Add_Edge(int x,int y,int z) {next[++Ecnt]=head[x];head[x]=Ecnt;E[Ecnt]=y;D[Ecnt]=z;next[++Ecnt]=head[y];head[y]=Ecnt;E[Ecnt]=x;D[Ecnt]=z;}
}G,T;

int n,m,S,E;

int DFN[maxn],Low[maxn],dcnt;
int Stack[maxn],top;
int belong[maxn],bcnt;

void DFS(int x,int fa)
{
	DFN[x]=Low[x]=++dcnt;
	Stack[++top]=x;
	for (int i=G.head[x];i;i=G.next[i]) if (G.E[i]!=fa)
		if (!DFN[G.E[i]]) DFS(G.E[i],x),Low[x]=min(Low[x],Low[G.E[i]]);
		else Low[x]=min(Low[x],DFN[G.E[i]]);
	if (DFN[x]==Low[x])
	{
		++bcnt;
		while (Stack[top]!=x) belong[Stack[top--]]=bcnt;
		belong[Stack[top--]]=bcnt;
	}
}

int v[maxn];
int ans;

void DFS2(int x,int fa,int res)
{
	if (x==belong[E]) ans=res;
	for (int i=T.head[x];i;i=T.next[i]) if (T.E[i]!=fa) DFS2(T.E[i],x,res|T.D[i]|v[T.E[i]]);
}

int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1,x,y,z;i<=m;i++) scanf("%d%d%d",&x,&y,&z),G.Add_Edge(x,y,z);
	scanf("%d%d",&S,&E);
	DFS(1,0);
	for (int x=1;x<=n;x++)
		for (int i=G.head[x];i;i=G.next[i]) if (belong[x]==belong[G.E[i]]) v[belong[x]]|=G.D[i];else if (belong[x]<belong[G.E[i]]) T.Add_Edge(belong[x],belong[G.E[i]],G.D[i]);
	DFS2(belong[S],0,v[belong[S]]);
	if (ans) puts("YES");else puts("NO");
	return 0;
}
