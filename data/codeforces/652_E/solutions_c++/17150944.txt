#include <bits/stdc++.h>

#define fi first
#define se second
#define mm ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)
#define inf 1000000009
#define max3(a,b,c) max((a),max((b),(c)))
#define bit(k) (1ll<<(k))
#define fbit(k,i) ((k) & (bit(i)))
#define count(a) __builtin_popcount(a)
#define pq priority_queue
#define all(v) v.begin(),v.end()
#define type(x) __typeof(x.begin())
#define foreach(v,it) for(type(v) it=v.begin(); it!=v.end();it++)

using namespace std;

typedef double db;
typedef long long lint;
typedef pair <int,int> ii;
typedef pair <ii,int> iii;
typedef vector <int> vi;
typedef vector <ii> vii;

const int maxn=3e5+20;

int N,M,dad[maxn],d[maxn],low[maxn],used[maxn],ans,part[maxn],pre[maxn],is[maxn],at,tme,start,end;
vii komsu[maxn];

void dfs(int u,int p){
	dad[u]=p;
	d[u]=++tme;
	low[u]=tme;
	used[u]=1;
	
	foreach(komsu[u],it){
		int v=it->fi;
		
		if(v==p) continue;
		
		if(!used[v]){
			dfs(v,u);
			umin(low[u],low[v]);
		}
		
		if(used[v])
			umin(low[u],d[v]);
	}
}

void cal(int u,int p,int gr){
	//~ printf("%d %d %d\n",u,p,gr);
	part[u]=gr;
	used[u]=1;
	if(!pre[gr]) pre[gr]=part[p];
	
	foreach(komsu[u],it){
		ii v=*it;
		
		if(used[v.fi]){
			is[gr]|=v.se;
			continue;
		}
		
		if(low[v.fi]>d[u])
			cal(v.fi,u,++at);
		
		else
			cal(v.fi,u,gr);
	}
}

int main(){
	cin >> N >> M;
	
	for(int i=1;i<=M;i++){
		int a,b,c;
		scanf("%d %d %d",&a,&b,&c);
		komsu[a].push_back(ii(b,c));
		komsu[b].push_back(ii(a,c));
	}
	scanf("%d %d",&start,&end);
	
	dfs(start,0);
	memset(used,0,sizeof used);
	cal(start,0,++at);
	
	int node=part[end];
	
	while(node){
		ans|=is[node];
		if(node==1) break;
		node=pre[node];
	}
	
	if(ans)
		puts("YES");
	
	else
		puts("NO");
	
	return 0;
}
