#include <stdio.h>
#include <iostream>
#include <cstring>
const int N=300005;
int n,m,data,now,tim,head[N],th[N];
int dfn[N],low[N],vis[N],num,beg,end;
int st[N],top,ins[N],bel[N],val[N];
using namespace std;

int read()
{
	int x=0;
	char c;
	while (c=getchar(),c<'0' || c>'9');
	x=c-'0';
	while (c=getchar(),c>='0' && c<='9') x=x*10+(c-'0');
	return x;
}
struct node
{
	int t,w,next;
}adj[N*2],tadj[N*2];
void add(int s,int t,int w)
{
	adj[++now]=(node){t,w,head[s]};
	head[s]=now;
}
void addt(int s,int t,int w)
{
	tadj[++now]=(node){t,w,th[s]};
	th[s]=now;
}
void dfs(int s,int fa)
{
	vis[s]=tim,dfn[s]=low[s]=++now;
	st[++top]=s,ins[s]=1;
	int i;
	for (i=head[s];i;i=adj[i].next)
	{
		if (vis[adj[i].t]!=tim && adj[i].t!=fa) dfs(adj[i].t,s),low[s]=min(low[s],low[adj[i].t]);
		else if (ins[adj[i].t] && adj[i].t!=fa) low[s]=min(low[s],dfn[adj[i].t]);
	}
	if (low[s]==dfn[s])
	{
		num++;
		while (top && st[top]!=s) bel[st[top]]=num,ins[st[top]]=0,top--;
		bel[s]=num,ins[s]=0,top--;
	}
}
int find(int s,int fa,int ok)
{
	if (s==bel[end]) return ok;
	int i;
	for (i=th[s];i;i=tadj[i].next)
	if (tadj[i].t!=fa && find(tadj[i].t,s,ok|tadj[i].w|val[tadj[i].t])) return 1;
	return 0;
}
int main()
{
	//freopen ("magician.in","r",stdin);
	//freopen ("magician.out","w",stdout);
	data=1;//read();
	for (tim=1;tim<=data;tim++)
	{
		n=read(),m=read();
		int i,j,s,t,w;now=0;
		memset(head,0,sizeof(head));
		memset(th,0,sizeof(th));
		memset(val,0,sizeof(val));
		for (i=1;i<=m;i++)
		{
			s=read(),t=read(),w=read();
			add(s,t,w),add(t,s,w);
		}
		beg=read(),end=read();
		now=0;num=0;top=0;
		for (i=1;i<=n;i++)
		if (vis[i]!=tim) dfs(i,0);
		now=0;
		for (i=1;i<=n;i++)
		for (j=head[i];j;j=adj[j].next)
		if (bel[i]==bel[adj[j].t]) val[bel[i]]|=adj[j].w;
		else addt(bel[i],bel[adj[j].t],adj[j].w);
		if (find(bel[beg],0,val[bel[beg]])) printf ("YES\n");
		else printf ("NO\n");
	}
	return 0;
}

