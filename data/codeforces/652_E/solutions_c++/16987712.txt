#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
using namespace std;

typedef long long ll;
typedef double lf;
typedef long double Lf;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;

#define TRACE(x) cerr << #x << "  " << x << endl
#define FOR(i, a, b) for (int i = (a); i < int(b); i++)
#define REP(i, n) FOR(i, 0, n)
#define all(x) (x).begin(), (x).end()
#define _ << " " <<

#define fi first
#define sec second

const int MAXN = 300100;

int n, m, a, b1, c[MAXN], x, y, dis[MAXN], low[MAXN], b[MAXN];

vector <pii> v[MAXN];

int bio[MAXN], tajm;

void dfs(int cvor, int par) {
	bio[cvor] = 1;
	tajm++;
	dis[cvor] = low[cvor] = tajm;

	REP(i, (int)v[cvor].size()) {
		int ncvor = v[cvor][i].fi;
		if (ncvor == par) continue;
		if (bio[ncvor] == 1) low[cvor] = min(low[cvor], dis[ncvor]);
		if (bio[ncvor]) continue;
		dfs(ncvor, cvor);
		low[cvor] = min(low[cvor], low[ncvor]);
		if (low[ncvor] > dis[cvor]) b[v[cvor][i].sec] = 1;
	}
	bio[cvor] = 2;
}

void rek(int cvor) {
	bio[cvor] = 1;

	REP(i, (int)v[cvor].size()) {
		int ncvor = v[cvor][i].fi;
		if (b[v[cvor][i].sec]) continue;
		if (c[v[cvor][i].sec]) {
			puts("YES");
			exit(0);
		}
		if (bio[ncvor]) continue;
		rek(ncvor);
	}
}

int main() {
	scanf("%d %d",&n,&m);
	REP(i, m) {
		scanf("%d %d %d",&a,&b1,&c[i]);
		v[a].push_back(make_pair(b1, i));
		v[b1].push_back(make_pair(a, i));
	}

	scanf("%d %d",&x,&y);
	v[x].push_back(make_pair(MAXN-1,MAXN-1));
	v[MAXN-1].push_back(make_pair(x,MAXN-1));
	v[y].push_back(make_pair(MAXN-1,MAXN-1));
	v[MAXN-1].push_back(make_pair(y,MAXN-1));

	dfs(x, -1);
	memset(bio, 0, sizeof bio);
	rek(x);

	puts("NO");
	return 0;
}