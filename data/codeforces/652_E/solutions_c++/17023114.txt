#include<cstdio>
#include<cstring>
#include<iostream>
using namespace std;
const int maxm=311111;
struct edge{
	int va,v,nxt,u;
}e[maxm<<1];

int node[maxm],instack[maxm],sume,begin[maxm],dfn[maxm],stack[maxm],low[maxm],belong[maxm],top,time,zu;

void adde(int u,int v,int va){
	e[sume].va=va;
	e[sume].v=v;
	e[sume].u=u;
	e[sume].nxt=begin[u];
	begin[u]=sume;
	sume++;
}

void init(){
	memset(stack,0,sizeof(stack));
	memset(belong,0,sizeof(belong));
	memset(dfn,0,sizeof(dfn));
	memset(low,0,sizeof(low));
	memset(instack,0,sizeof(instack));
	memset(begin,-1,sizeof(begin));
	sume=zu=top=0;
	time=1;
}

int trajan(int now,int pre){
	dfn[now]=low[now]=time++;
	stack[top++]=now;
	instack[now]=1;
	for(int i=begin[now];~i;i=e[i].nxt){
		if((i^1)==pre)	continue;
		int v=e[i].v;
		if(!dfn[v]){
			trajan(v,i);
			low[now]=min(low[now],low[v]);
		}
		else if(instack[v]){
			 low[now]=min(low[now],low[v]);
		}
	}
	if(dfn[now]==low[now]){
		zu++;int v;
		do{
			v=stack[--top];
			instack[v]=0;
			belong[v]=zu;
		}while(top&&v!=now);
	}
}
int dfs(int u,int v,int va,int pre){
	va|=node[u];
	if(u==v)	return va;
	for(int i=begin[u];~i;i=e[i].nxt){
		
		if(e[i].v==pre)	continue;
		
		if(dfs(e[i].v,v,va+e[i].va,u))	return 1;
	}
	return 0;
}
int main(){
	int n,m,u,v,va;
	scanf("%d%d",&n,&m);
	init();
	for(int i=0;i<m;i++){
		scanf("%d%d%d",&u,&v,&va);
		adde(u,v,va);
		adde(v,u,va);
	}
	
	for(int i=1;i<=n;i++){
		if(!dfn[i])
		trajan(i,-1);
	}
	
	int nsume=sume;
	memset(begin,-1,sizeof(begin));
	memset(node,0,sizeof(node));
	sume=0;
	for(int i=0;i<nsume;i++){
		
		u=belong[e[i].u],v=belong[e[i].v];
		
		if(u==v) node[u]|=e[i].va;
		else	adde(u,v,e[i].va);
		
	}
	scanf("%d%d",&u,&v);
	if(dfs(belong[u],belong[v],0,-1))	printf("YES\n");
	else printf("NO\n");
	return 0;
} 