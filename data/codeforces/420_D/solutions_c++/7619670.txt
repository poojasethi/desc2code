#include <iostream>
#include <cstdio>
#include <string>
#include <algorithm>
#include <cctype>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#define lson rt << 1, l, mid
#define rson rt << 1 | 1, mid + 1, r

using namespace std;

const int N = 2111111;
int cnt[N << 2];
int n, m, used[N], now[N], ans[N];

void build (int rt, int l , int r) 
{
	if (l == r) {
		if (l > m) 
			cnt[rt] = 1;
		else 
			cnt[rt] = 0;
	} else {
		int mid = (l + r) >> 1;
		build(lson);
		build(rson);
		cnt[rt] = cnt[rt<<1] + cnt[rt<<1|1];
	}
}

int get(int rt, int l, int r, int need) 
{
	if (l == r) {
		return l;
	} else {
		int mid = (l + r) >> 1;
		if (cnt[rt<<1] >= need) return get(lson, need);
		else return get(rson, need - cnt[rt<<1]);
	}
}

void update (int rt, int l, int r, int pos, int val) 
{
	cnt[rt] += val;
	if (l == r) return;
	int mid = (l + r) >> 1;
	if (pos <= mid) update (lson, pos, val);
	else update(rson, pos, val);
}

int main () {
	memset (ans , -1 , sizeof (ans));
	memset (now , -1 , sizeof (now));
	memset (used , -1 , sizeof (used));
	scanf ("%d %d" , &n , &m);
	build (1 , 1 , n + m);
	for (int i = 0 ; i < m ; i ++) {
		int x , y;
		scanf ("%d %d" , &x , &y);
		int pos = get (1, 1, n + m, y);
		if (used[x] != -1 && used[x] != pos) {
			puts ("-1");
			return 0;
		} 
		if (now[pos] != -1 && now[pos] != x) {
			puts ("-1");
			return 0;
		}
		now[pos] = -1;
		now[m - i] = x;
		if (used[x] == -1) ans[pos - m] = x;
		used[x] = m - i;
		update (1, 1, n + m, pos, -1);
		update (1, 1, n + m, m - i, 1);
	}
	int nouse = 1;
	for (int i = 1 ; i <= n ; i ++) {
		if (ans[i] != -1) printf ("%d " , ans[i]);
		else {
			while (used[nouse] != -1) {
				nouse ++;
			}
			printf ("%d " , nouse ++);
		}
	}
	printf("\n");
	return 0;
}

	  	 	    	   										  	