        //      . .. ... .... ..... be name khoda ..... .... ... .. .       \\
        
#include <bits/stdc++.h>
using namespace std;

inline int in(){ int x; scanf("%d", &x); return x; }
const int N = 1 << 22;

int fen[N + 1], x[N], y[N], id[N], p[N], ans[N];
bool mark[N];

void add(int i, int val)
{
    for(; i <= N; i += i & -i)
        fen[i] += val;
}

int getKth(int k)
{
    int pos = 0;
    for(int i = N; i; i /= 2)
        if(fen[pos + i] < k)
        {
            pos += i;
            k -= fen[pos];
        }
    return pos + 1;
}

void out()
{
    cout << "-1\n";
    exit(0);
}

int main()
{
    int n = in(), m = in();
    for(int i = 1; i <= n; i++)
    {
        add(m + i, 1);
        id[m + i] = i;
    }
    for(int i = 0; i < m; i++)
    {
        int x = in(), y = in();
        int pos = getKth(y);
        if(!p[x])
            p[x] = id[pos];
        else if(p[x] != id[pos])
            out();
        add(pos, -1);
        add(m - i, 1);
        id[m - i] = id[pos];
    }
    for(int i = 1; i <= n; i++)
        if(p[i])
        {
            if(mark[p[i]])
                out();
            mark[p[i]] = 1;
            ans[p[i]] = i;
        }
    fill(mark, mark + n + 1, 0);
    for(int i = 1; i <= n; i++)
        mark[ans[i]] = 1;
    vector <int> have;
    for(int i = n; i; i--)
        if(!mark[i])
            have.push_back(i);
    for(int i = 1; i <= n; i++)
    {
        if(!ans[i])
        {
            ans[i] = have.back();
            have.pop_back();
        }
        cout << ans[i] << " ";
    }
    cout << endl;
}