#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
int i,j,k,n,m,a[1100001],c[1100001],now,q[1100001][2],l,r,mid,p[1100001],lim,w[1100001],f[1100001];
void change(int x,int d){
	for (;x<=lim;x+=x&(-x)) c[x]+=d;
}
int query(int x){
	int res=0;
	for (;x;x-=x&(-x)) res+=c[x];
	return res;
}
int getfa(int x){
	return (f[x])?f[x]=getfa(f[x]):x;
}
void merge(int x,int y){
	int i=getfa(x),j=getfa(y);
	if (i==j) return;
	f[j]=i;
}
int check(int p,int x){
	p=getfa(p);
	if (p==n+1) return 1;
	return (x-p)-(query(n)-query(p));
}
int solve(int x){
	int l,r,m,k;
	for (l=1,r=x;l<r-1;){
		m=(l+r)>>1;
		k=check(m,x);
		if (k==0){
			r=m;continue;
		}
		if (k>0) l=m+1;else r=m-1;
	}
	if (check(l,x)==0) return l;
	if (check(r,x)==0) return r;
	return -1;
}
int main(){
	scanf("%d%d",&n,&m);memset(a,0,sizeof(a));memset(c,0,sizeof(c));lim=max(n,m);
	for (i=1,now=0;i<=m;i++){
		scanf("%d%d",&q[i][0],&q[i][1]);
		if (a[q[i][0]]){
			if (q[i][1]>now){
				puts("-1");return 0;
			}
		}else{
			k=solve(q[i][1]);
			if (k==-1){
				puts("-1");return 0;
			}
			now++;a[q[i][0]]=k;change(k,1);merge(k==1?n+1:k-1,k);
		}
	}
	for (i=1;i<=n;i++){
		if (!a[i]) continue;
		p[a[i]]=i;
	}
	for (i=1,w[0]=0;i<=n;i++)
	 if (!p[i]) w[++w[0]]=i;
	for (i=1,j=0;i<=n;i++)
	 if (!a[i]) a[i]=w[++j],p[a[i]]=i;
	memset(w,0,sizeof(w));memset(c,0,sizeof(c));
	for (i=1;i<=m;i++){
		if (w[q[i][0]]){
			k=query(i-1)-query(w[q[i][0]]);
			if (q[i][1]!=k+1){
				puts("-1");return 0;
			}
			change(w[q[i][0]],-1);
		}
		w[q[i][0]]=i;change(w[q[i][0]],1);
	}
	for (i=1;i<=n;i++) printf("%d ",p[i]);
	puts("");
	return 0;
}