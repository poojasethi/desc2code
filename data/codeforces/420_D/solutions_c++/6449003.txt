#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

#define sz(v) int(v.size())
#define endl '\n'
typedef long long ll;
typedef pair<int,int> pii;

const int MAXn = 1e6+5;
int val[MAXn+MAXn];
int tree[MAXn*2];
int a[MAXn*2];
int n, m;
bool mark[MAXn];

void inc(int ind, int v = 1) {
	a[ind] += v;
	while(ind <= n+m) {
		tree[ind] += v;
		ind += (ind&-ind);
	}
}

int find(int x) {
	int ind = 0;
	for(int i = 20; i >= 0; i--) {
		ind += (1<<i);
		if(ind > n+m || tree[ind] > x)
			ind -= (1<<i);
		else if(tree[ind] == x) {
			if(a[ind] == 0)
				ind -= (1<<i);
			else
				return ind;
		} else 
			x -= tree[ind];
	}
	return ind;
}

int main() {
	scanf("%d %d", &n, &m);
	for(int i = m+1; i <= n+m; i++) {
		int j = i-(i&-i);
		tree[i] = i-max(m, j);
		a[i] = 1;
	}
	memset(val, -1, sizeof(val));
	for(int i = 0; i < m; i++) {
		int x, y;
		scanf("%d %d", &x, &y);
		int f = find(y);
		if((val[f] == -1 && mark[x]) || (val[f] != -1 && val[f] != x)) {
			printf("-1\n");
			return 0;
		}
		val[m-i] = x;
		val[f] = x;
		mark[x] = true;
		inc(f, -1);
		inc(m-i, 1);
	}
	int p = 1;
	for(int i = 0; i < n; i++) {
		if(val[m+i+1] == -1) {
			while(mark[p]) p++;
			val[m+i+1] = p;
			mark[p] = true;
		}
	}
	for(int i = 0; i < n; i++)
		printf("%d ", val[m+1+i]);
	printf("\n");


	return 0;
}
