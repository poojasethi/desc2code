#include <cstdio>
#include <cstring>
using namespace std;

const int N = 1000005;
struct St{
	int l, r, sz;
} st[N<<2];

int hav[N], ans[N];
bool vis[N];
void build(int l, int r, int i){
	st[i].l = l;
	st[i].r = r;
	st[i].sz = r-l+1;
	if(l==r) return;
	int mid = (l+r)>>1;
	build(l,mid,i<<1);
	build(mid+1,r,i<<1|1);
}

int find(int whe, int i){
	if(st[i].l == st[i].r){
		st[i].sz = 0;
		return st[i].l;
	}
	int mid = (st[i].l+st[i].r)>>1, res;
	if(whe<=st[i<<1].sz){
		res = find(whe, i<<1);
	}
	else{
		res = find(whe-st[i<<1].sz, i<<1|1);
	}

	st[i].sz = st[i<<1].sz + st[i<<1|1].sz;
	return res;
}


int c[N];
void add(int x, int u){
	for(; x<N; x+=x&-x){
		c[x] += u;
	}
}

int sum(int x){
	int res = 0;
	for(; x; x-=x&-x){
		res += c[x];
	}
	return res;
}

int main(){
	int n, m, head, x, y;
	scanf("%d%d",&n,&m);
	build(1,n,1);
	head = 1000005;

	int now = 0;
	while(m--){
		scanf("%d%d",&x,&y);
		if(hav[x]){
			if(sum(hav[x]) != y) break;
			add(hav[x], -1);
			hav[x] = --head;
			add(head, 1);
		}
		else{
			if(y<=now) break;
			ans[find(y-now, 1)] = x;
			vis[x] = true;
			hav[x] = --head;
			add(head, 1);
			++now;
		}
	}
	if(m>=0) puts("-1");
	else{
		now = 1;
		for(int i=1;i<=n;++i){
			if(!ans[i]){
				while(vis[now]) ++now;
				printf("%d ", now);
				++now;
			}
			else printf("%d ", ans[i]);
		}
	}
	return 0;
}
