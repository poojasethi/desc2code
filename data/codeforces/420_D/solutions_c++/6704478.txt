#include <algorithm>
#include <string>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <cassert>
#include <queue>
#include <cstdlib>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define lli long long int
#define all( gg )	gg.begin(),gg.end()
#define foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define FP( ii,aa,bb ) for( int ii=aa;ii<=bb;ii++ )
#define FM( ii,aa,bb ) for( int ii=aa;ii>=bb;ii-- )

#define maxn	2000005

using namespace std;

int n,m,sira[maxn],ne[maxn],h[maxn],F[maxn];

void update( int x,int val ){
	while( x ){
		F[x] += val;
		x -= x & -x;
	}
}
int query( int x ){
	int res=0;
	while( x<maxn ){
		res += F[x];
		x += x & -x;
	}
	return res;
}

int main(){

	ios_base::sync_with_stdio( false );
	
	cin >> n >> m;
	
	FP( i,1,n ){
		sira[i] = n-i+1;
		update( i,1 );
	}
	
	int ind=n;
	
	while( m-- ){
		int x,y;
		cin >> x >> y;
		int bas=1,son=ind,orta;
		while( bas<son ){
			orta = (bas+son)/2+1;
			if( query(orta)>=y )	bas = orta;
			else	son = orta-1;
		}
		int indis = sira[bas];
		if( ( !ne[indis] and !h[x] ) or ne[indis]==x ){
			h[x] = 1;
			ne[indis] = x;
			update( bas,-1 );
			sira[++ind] = indis;
			update( ind,1 );
		}
		else{
			cout << -1 << endl;
			return 0;
		}
	}
	
	ind = 0;
	FM( i,n,1 )	if( !h[i] )	sira[++ind] = i;
	FP( i,1,n )
		if( ne[i] )	cout << ne[i] << " ";
		else	cout << sira[ind--] << " ";
	cout << endl;
	
}
