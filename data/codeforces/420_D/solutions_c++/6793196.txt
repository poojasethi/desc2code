#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>

using namespace std;

int N,M,Num;
int x,y,v;
int tree[8000005];
int que[2000005],Ans[1000005],cnt[1000005];
bool yes[1000005];

void add(int root,int le,int ri)
{
	if ((le>y) || (ri<x)) return;
	if ((le>=x) && (ri<=y))
	{
		tree[root]+=v;
		return;
	}
	int mid=(le+ri)/2;
	add(2*root,le,mid);
	add(2*root+1,mid+1,ri);
	tree[root]=tree[2*root]+tree[2*root+1];
}

int search(int root,int le,int ri)
{
	if (le==ri) return le;
	int mid=(le+ri)/2;
	int lson=2*root, rson=2*root+1;
	if (tree[lson]>=x) return search(lson,le,mid);
	else 
	{
		x-=tree[lson];
		return search(rson,mid+1,ri);
	}
}

int main()
{
	scanf("%d%d",&N,&M);
	Num=N+M;
	for (int i=1; i<=N; i++) 
	{
		x=y=M+i; v=1;
		add(1,1,Num);
	}
	for (int i=M+1; i<=M+N; i++) que[i]=i-M;
	int tail=M+1;
	memset(yes,false,sizeof(yes));
	bool flag=true;
	for (int i=1; i<=M; i++)
	{
		int xx,yy;
		scanf("%d%d",&xx,&yy);
		x=y=yy;
		int tmp=search(1,1,Num);
		x=y=tmp; v=-1;
		add(1,1,Num);
		if ((Ans[que[tmp]]!=0) && (Ans[que[tmp]]!=xx)) flag=false;
		if (Ans[que[tmp]]==0)
		{
			Ans[que[tmp]]=xx;
			cnt[xx]++;
			if (cnt[xx]>1) flag=false;
		}
		tail--;
		que[tail]=que[tmp];
		yes[xx]=true;
		x=y=tail; v=1;
		add(1,1,Num);
	}
	if (!flag)
	{
		printf("-1\n");
		return 0;
	}
	int j=1;
	for (int i=1; i<=N; i++)
		if (Ans[i]!=0) printf("%d ",Ans[i]);
	else
	{
		for (; yes[j]; j++);
		printf("%d ",j);
		j++;
	}
	return 0;
}
		  	  		 	 				     		 		