#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cmath>

using namespace std;
struct Node
{
	int l,r,w;
}tree[10000000];
int n,m,pos[2000005],from[2000005],ans[2000005],x,y,dqpos,dq;
void build(int x,int l,int r)
{
	tree[x].l=l;tree[x].r=r;tree[x].w=0;
	if (tree[x].l==tree[x].r)
	{
		if (tree[x].l>m)tree[x].w=1;
		return;
	}
	int mid=(l+r)/2;
	build(x*2,l,mid);
	build(x*2+1,mid+1,r);
	tree[x].w=tree[x*2].w+tree[x*2+1].w;
}
int find(int w)
{
	int dq=1;
	while (tree[dq].l<tree[dq].r)
	{
		if (tree[dq*2].w>=w) dq=dq*2;
		else
		{
			w-=tree[dq*2].w;
			dq=dq*2+1;
		}
	}
	return tree[dq].l;
}
int change(int pos,int w)
{
	int dq=1;
	while (tree[dq].l<tree[dq].r)
	{
		tree[dq].w+=w;
		int mid=(tree[dq].l+tree[dq].r)/2;
		if (pos<=mid) dq=dq*2;else dq=dq*2+1;
	}
	tree[dq].w+=w;
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;++i) pos[i+m]=i;
	build(1,1,n+m);
	for (int i=m;i>=1;--i)
	{
		scanf("%d%d",&x,&y);
		dqpos=find(y);
		pos[i]=pos[dqpos];
		change(dqpos,-1);change(i,1);
		if (ans[pos[i]]&&ans[pos[i]]!=x)
		{
			printf("-1\n");
			return 0;
		}
		ans[pos[i]]=x;
		if (from[x]&&from[x]!=pos[i])
		{
			printf("-1\n");
			return 0;
		}
		from[x]=pos[i];
	}
	dq=1;
	for (int i=1;i<=n;++i)
	{
		if (ans[i]) continue;
		while (from[dq])++dq;
		ans[i]=dq;
		++dq;
	}
	for (int i=1;i<=n;++i) printf("%d ",ans[i]);
	return 0;
}
					  	 	       		 	 	 	 		