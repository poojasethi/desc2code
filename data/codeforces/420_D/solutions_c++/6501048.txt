//In the name of God
#include <iostream>
#include <cstdio>
#include <cstdlib>
using namespace std;
const int N = 1e6 + 6;


int n, m, ans[N], state[N], f[2 * N], x[N], y[N];
bool mark[N];

void update(int m, int c) { m = N - m - 2;
	while (m < 2 * N)
		f[m] += c, m += m & -m;
}
int query(int m) { m = N - m - 2;
	int res = 0;
	while (m)
		res += f[m], m -= m & -m;
	return res;
}
bool acc(int d, int cur) {
	int l = d + query(d + 1);
	if (l != cur)
		return l < cur;
	return ans[d] == -1;
}
void EXIT() {
	cout << -1 << '\n';
	exit(0);
}
int main() {
	fill(ans, ans + N, -1);
	scanf("%d%d", &n, &m);
//	cerr << '\n';
	for (int i = 0; i < m; i++) {
		scanf("%d%d", x + i, y + i);
		if (mark[x[i]]++)
			continue;
		int st = 1, ed = n + 1;
		while (ed - st > 1) {
			int mid = st + ed >> 1;
			(acc(mid, y[i])? st: ed) = mid;
		}
		if (acc(st, y[i])) {
			ans[st] = x[i];
			update(st, 1);
		}
		else
			EXIT();
	}
	for (int p1 = 1, p2 = 1; p1 <= n; p1++)
		if (!mark[p1]) {
			while (ans[p2] != -1)
				p2++;
			ans[p2] = p1;
		}
//	for (int i = 1; i <= n; i++)
//		cerr << ans[i] << ' ';
//	cerr << '\n';
	for (int i = 1; i <= n; i++)
		state[ans[i]] = i;
	fill(f, f + 2 * N, 0);
	for (int i = 1; i <= n; i++)
		update(i, 1);
	for (int i = 0; i < m; i++)
		if (y[i] == n - query(state[x[i]] + 1)) {
			update(state[x[i]], -1);
			state[x[i]] = -i - 1;
			update(state[x[i]], 1);
		}
		else
			EXIT();
	for (int i = 1; i <= n; i++)
		printf("%d ", ans[i]);
	printf("\n");
	return 0;
}
