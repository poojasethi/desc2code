#include<iostream>
#include<cstring>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<string>
#define N 1000010
#define MIN(x,y) ((x)<(y)?(x):(y))
#define MAX(x,y) ((x)>(y)?(x):(y))
#define LL __int64
using namespace std;
struct info
{
	int x,y;
}a[1010000];
struct node
{
	int id;
}q[3010000];
struct nd
{
	int l,r,x;
}tree[8010000];
int n,m,ans[3010000],num[1010000];
bool bo[1010000];
void change(int x,int y,int p)
{
	tree[p].x+=y;
	if(tree[p].l==tree[p].r) return;
	int lef=p<<1,rig=p<<1|1;
	if(tree[lef].r>=x) change(x,y,lef);
	else change(x,y,rig);
}
int search(int y,int p)
{
	if(tree[p].l==tree[p].r) return tree[p].l;
	int lef=p<<1,rig=p<<1|1;
	if(tree[lef].x>=y) return search(y,lef);
	else return search(y-tree[lef].x,rig);
}
void mtree(int l,int r,int p)
{
	tree[p].l=l; tree[p].r=r;
	if(l==r)
	{
		if(l>m&&l<=m+n) tree[p].x=1;
		return;
	}
	int lef=p<<1,rig=p<<1|1,mid=(l+r)>>1;
	mtree(l,mid,lef);
	mtree(mid+1,r,rig);
	tree[p].x=tree[lef].x+tree[rig].x;
}
int main()
{
	int i,j,k,t,T,x,y,xx,yy,p,z,id,now;
	int tail;
	scanf("%d%d",&n,&m);
	mtree(1,m+n,1);
	for(i=m+1;i<=m+n;i++)
	{
		q[i].id=i-m;
	}
	tail=m+1;
	bool flag=true;
	for(i=1;i<=m;i++)
	{
		scanf("%d%d",&a[i].x,&a[i].y);
		x=search(a[i].y,1);
		change(x,-1,1);
		if(ans[q[x].id]!=0&&ans[q[x].id]!=a[i].x) flag=false;
		if(ans[q[x].id]==0)
		{
			ans[q[x].id]=a[i].x;
			num[a[i].x]++;
			if(num[a[i].x]>1) flag=false;
		}
		tail--;
		q[tail].id=q[x].id;
		bo[a[i].x]=true;
		change(tail,1,1);
	}
	if(!flag)
	{
		puts("-1");
		return 0;
	}
	for(i=j=1;i<n;i++)
		if(ans[i])
			printf("%d ",ans[i]);
		else
		{
			while(bo[j]) j++;
			printf("%d ",j++);
		}
	if(ans[n])
		printf("%d\n",ans[n]);
	else
	{
		while(bo[j]) j++;
		printf("%d\n",j++);
	}
}

					 							 					    		