#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>

using namespace std;

const int MAX=1000100;
const int oo=0x3f3f3f3f;
struct Node{
	int l,r;
	int val,ma,size;
	
	Node(){
		l=r=0;
		val=ma=size=0;
	}
}node[MAX];

int find(int k,int val){
	if(k==0){
		return 0;
	}
	if(val<=node[node[k].r].ma){
		return node[node[k].l].size+1+find(node[k].r,val);
	}else if(val<=node[k].val){
		return node[node[k].l].size+1;
	}else{
		return find(node[k].l,val);
	}
}

void update(int k){
	node[k].size=node[node[k].l].size+node[node[k].r].size+1;
	node[k].ma=max(node[k].val,max(node[node[k].l].ma,node[node[k].r].ma));
}

void split(int k,int id,int& l,int& r){
	if(k==0){
		l=r=0;
		return;
	}
	if(node[node[k].l].size>=id){
		split(node[k].l,id,l,node[k].l);
		r=k;
	}else if(node[node[k].l].size+1<id){
		split(node[k].r,id-node[node[k].l].size-1,node[k].r,r);
		l=k;
	}else{
		l=node[k].l;
		r=k;
		node[k].l=0;
	}
	update(k);
}

int join(int x,int y){
	if(x==0){
		return y;
	}else if(y==0){
		return x;
	}else{
		if(rand()%1000<500){
			node[x].r=join(node[x].r,y);
			update(x);
			return x;
		}else{
			node[y].l=join(x,node[y].l);
			update(y);
			return y;
		}
	}
}

bool done;
void dfs(int k){
	if(node[k].l){
		dfs(node[k].l);
	}
	if(done){
		putchar(' ');
	}else{
		done=true;
	}
	printf("%d",k);
	if(node[k].r){
		dfs(node[k].r);
	}
}

int main(){
	int n,root=0;
	int id,x;
	int l,r;
	
	node[0].ma=node[0].val=-oo;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%d%d",&id,&x);
		x=max(i-x,find(root,id)+1);
		split(root,x,l,r);
		node[i].val=id;
		update(i);
		l=join(l,i);
		root=join(l,r);
	}
	done=false;
	dfs(root);
	puts("");
	
	return 0;
}
