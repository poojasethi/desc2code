#include <iostream>
#include <cstdio>
#include <cstdlib>
using namespace std;


struct tver{
    int l,r,ma;
    int kol;
};
const int DIM=110*1000,inf=1000*1000*1000;
int n,h,aa[DIM];
tver ver[DIM];
bool f;
int get(int v,int val){
    if (v==0) return 0;
    if (ver[ver[v].r].ma>=val){
        return ver[ver[v].l].kol+1+get(ver[v].r,val);
    } else if (aa[v]>=val){
        return ver[ver[v].l].kol+1;
    } else {
        return get(ver[v].l,val);
    }
}
void upd(int v){
    ver[v].kol=ver[ver[v].l].kol+ver[ver[v].r].kol+1;
    ver[v].ma=max(aa[v],ver[ver[v].l].ma);
    ver[v].ma=max(ver[v].ma,ver[ver[v].r].ma);
}
void split(int v,int k,int &l,int &r){
    if (v==0){
        l=r=0;
        return;
    }
    if (ver[ver[v].l].kol>=k){
        split(ver[v].l,k,l,ver[v].l);
        r=v;
    } else if (ver[ver[v].l].kol+1<k){
        split(ver[v].r,k-ver[ver[v].l].kol-1,ver[v].r,r);
        l=v;
    } else {
        l=ver[v].l;
        r=v;
        ver[v].l=0;
    }
    upd(v);
}
int join(int vl,int vr){
    if (vl==0 || vr==0) return (vl+vr);
    if (rand()%(ver[vl].kol+ver[vr].kol)<ver[vl].kol){
        ver[vl].r=join(ver[vl].r,vr);
        upd(vl);
        return vl;
    } else {
        ver[vr].l=join(vl,ver[vr].l);
        upd(vr);
        return vr;
    }
}
void pri(int v){
    if (v==0) return;
    pri(ver[v].l);
    if (!f) printf(" ");
    printf("%d",v);
    f=0;
    pri(ver[v].r);
}
int main(){
    ver[0].ma=-inf;
    scanf("%d",&n);
    for (int i=0;i<n;i++){
        int a,c;
        scanf("%d%d",&a,&c);
        c=i-c+1;
        int rr=get(h,a)+1;
        rr=max(rr,c);
        int l,r;
        split(h,rr,l,r);
        aa[i+1]=a;
        upd(i+1);
        l=join(l,i+1);
        h=join(l,r);
    }
    f=1;
    pri(h);
    printf("\n");
    return 0;
}
