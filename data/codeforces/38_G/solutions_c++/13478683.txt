#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

/*
 * */
#define MAXN 100010
int N, root, tot;
struct NODE
{
	int l, r, val, sz, mval, rd, id;
} tree[MAXN];
void update(int rt)
{
	int ll = tree[rt].l, rr = tree[rt].r;
	tree[rt].sz = tree[ll].sz + tree[rr].sz + 1;
	tree[rt].mval = max(tree[rt].val, max(tree[ll].mval, tree[rr].mval));
}
void rot_left(int &rt)
{
	int tmp = tree[rt].r;
	tree[rt].r = tree[tmp].l;
	tree[tmp].l = rt;
	rt = tmp;
	update(tree[rt].l);
	update(rt);
}
void rot_right(int &rt)
{
	int tmp = tree[rt].l;
	tree[rt].l = tree[tmp].r;
	tree[tmp].r = rt;
	rt = tmp;
	update(tree[rt].r);
	update(rt);
}
void insert(int &rt, int vv, int ss, int id)
{
	if(rt == -1)
	{
		rt = tot++;
		tree[rt].val = tree[rt].mval = vv;
		tree[rt].sz = 1;
		tree[rt].l = tree[rt].r = -1;
		tree[rt].rd = rand();
		tree[rt].id = id;
		return;
	}
	int &ll = tree[rt].l, &rr = tree[rt].r;
	if(vv > tree[rt].val && vv > tree[rr].mval && ss > tree[rr].sz)
	{
		insert(ll, vv, ss - tree[rr].sz - 1, id);
		if(tree[ll].rd < tree[rt].rd)
			rot_right(rt);
	}
	else
	{
		insert(rr, vv, ss, id);
		if(tree[rr].rd < tree[rt].rd)
			rot_left(rt);
	}
	update(rt);
	return;

}
void output(int rt)
{
	if(rt == -1) return;
	output(tree[rt].l);
	printf("%d ", tree[rt].id);
	output(tree[rt].r);
}
int main()
{
	//freopen("input.txt", "r", stdin);
	root = -1, tot = 0;
	scanf("%d", &N);
	for(int i = 1, x, y; i <= N; i++)
	{
		scanf("%d%d", &x, &y);
		insert(root, x, y, i);
	}
	output(root);
	return 0;
}
