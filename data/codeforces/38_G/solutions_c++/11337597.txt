// 10 monthes remaining for red =D
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>
#include <string>
#include <vector>

using namespace std;

const int MaxN = 100005, MaxK = 400, MedK = MaxK >> 1, MaxL = 502,
 MaxC = 0x3F3F3F3F, NA = -1;

struct piece
{
 int body [MaxK];
 int len;
 int maxa;
 int & operator [] (int index) {return body[index];}
 piece () {len = 0; maxa = 0;}
};

piece * p [MaxL];
int a [MaxN], c [MaxN];
int l, n;

int main (void)
{
 int i, j, k, m;
 while (scanf (" %d", &n) != EOF)
 {
  for (i = 0; i < n; i++)
   scanf (" %d %d", &a[i], &c[i]);
  l = 0;
  p[l] = new piece ();
  l++;

  for (i = 0; i < n; i++)
  {
   k = l - 1;
   while (k > 0 && c[i] >= (*p[k]).len && a[i] > (*p[k]).maxa)
   {
    c[i] -= (*p[k]).len;
    k--;
   }
   piece & q = *p[k];
   m = q.len - 1;
   while (m >= 0 && c[i] > 0 && a[i] > a[q[m]])
   {
    c[i]--;
    m--;
   }

   m++;
   for (j = q.len; j > m; j--)
    q[j] = q[j - 1];
   q[m] = i;
   q.maxa = max (q.maxa, a[q[m]]);
   q.len++;

   if (q.len == MaxK)
   {
    for (j = l; j > k + 1; j--)
     p[j] = p[j - 1];
    l++;
    p[k + 1] = new piece ();
    piece & r = *p[k + 1];
    q.maxa = 0;
    q.len = MedK;
    for (j = 0; j < q.len; j++)
     q.maxa = max (q.maxa, a[q[j]]);
    r.len = MedK;
    for (j = 0; j < r.len; j++)
    {
     r[j] = q[j + q.len];
     r.maxa = max (r.maxa, a[r[j]]);
    }
   }
  }

  k = n;
  for (i = 0; i < l; i++)
   for (j = 0; j < (*p[i]).len; j++)
   {
    k--;
    printf ("%d%c", (*p[i])[j] + 1, k > 0 ? ' ' : '\n');
   }
 }
 return 0;
}
