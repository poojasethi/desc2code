#include <iostream>
#include <cstdlib>
#include <cstdio>

using namespace std;

struct Node
{
    Node *l;
    Node *r;
    int a;
    int key;
    int maxa;
    int size;
    Node() {}
    Node(int a):l(0), r(0), a(a), maxa(-1), size(0), key(rand()) {}
};

int id[100005];

int getmax(Node *rt)
{
    if (rt == 0) return -1;
    return rt->maxa;
}
int getsize(Node *rt)
{
    if (rt == 0) return 0;
    return rt->size;
}
void update(Node *rt)
{
    rt->maxa = max( rt->a, max( getmax(rt->l), getmax(rt->r) ) );
    rt->size = getsize(rt->l) + getsize(rt->r) +1;
}
Node * zig(Node *rt)
{
    Node *p = rt->l;
    rt->l = p->r;
    p->r = rt;
    update(p->r);
    update(p);
    return p;
}
Node * zag(Node *rt)
{
    Node *p = rt->r;
    rt->r = p->l;
    p->l = rt;
    update(p->l);
    update(p);
    return p;
}
Node * insert(Node *rt, int a, int c)
{
    if (rt == 0)
    {
        rt = new Node(a);
    }
    else if (a > rt->a && a > getmax(rt->r) && c > getsize(rt->r))
    {
        rt->l = insert(rt->l, a, c - getsize(rt->r) -1);
        if (rt->l->key < rt->key)
        {
            rt = zig(rt);
        }
    }
    else
    {
        rt->r = insert(rt->r, a, c);
        if (rt->r->key < rt->key)
        {
            rt = zag(rt);
        }
    }
    update(rt);
    return rt;
}

void print(Node *rt)
{
    if (rt == 0)
    {
        return;
    }
    print(rt->l);
    printf("%d ", id[rt->a]);
    print(rt->r);
}

int main()
{
    Node *rt = 0;
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
    {
        int a, c;
        scanf("%d%d", &a, &c);
        id[a] = i;
        rt = insert(rt, a, c);
    }
    print(rt);
    return 0;
}

	  					  	 			 	     	 		