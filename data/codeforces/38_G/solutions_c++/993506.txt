#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
const int pt=300;

struct seg {
	int mx;
	vector<int> dat;
	void reset() {
		mx=*max_element(dat.begin(),dat.end());
	}
};

int len=1;
seg order[400];
int findp(int a) {
	int c=0;
	for(int i=0;i<len;i++) {
		if(a>order[i].mx) {
			c+=order[i].dat.size();
		} else {
			for(int j=0;;j++) {
				if(a<order[i].dat[j]) {
					return c+j;
				}
			}
		}
	}
	return c;
}
void insert(int a,int ind) {
	for(int i=0;i<len;i++) {
		if(ind<=order[i].dat.size()) {
			order[i].dat.insert(order[i].dat.begin()+ind,a);
			order[i].mx=max(order[i].mx,a);
			return;
		}
		ind-=order[i].dat.size();
	}
}
vector<int> v;
void rebuild() {
	v.clear();
	for(int i=0;i<len;i++) {
		v.insert(v.end(),order[i].dat.begin(),order[i].dat.end());
		order[i].dat.clear();
	}
	len=0;
	for(int i=0;i<v.size();i+=pt) {
		order[len].dat.assign(v.begin()+i,v.begin()+min((int)v.size(),i+pt));
		order[len].reset();
		len++;
	}
}
int mem[100100];
int main() {
	int n;
	cin>>n;
	for(int i=1;i<=n;i++) {
		if(i%pt==0) {
			rebuild();
		}
		int a,c;
		cin>>a>>c;
		int ind=findp(a);
		insert(a,min(ind,c));
		mem[a]=i;
	}
	rebuild();
	for(int i=v.size()-1;i>=0;i--) {
		cout<<mem[v[i]]<<' ';
	}
}
