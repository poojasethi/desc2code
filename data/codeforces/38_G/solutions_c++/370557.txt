#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int maxN= 100*1000 + 5;
const int maxL= 500;

int n,cnt=1,beg=1,fin=1;
int pos[maxN];
vector <int> Q[maxN];

struct node{
    int prev, next, maxi;

    node (int prev=-1, int next=-1, int maxi=-1) : prev(prev), next(next), maxi(maxi) {}

}p[maxN];
/***********************************/
inline void update (int a, int c){
    int poi= fin;

    while (poi!=-1){
        if ((int)Q[poi].size()>c)
            break;
        if (p[poi].maxi>a)
            break;

        c -= Q[poi].size();
        poi= p[poi].prev;
    }

    if (poi==-1){
        poi= beg; c+= (int)Q[beg].size();
    }

    Q[poi].push_back (a);

    for (int i=(int)Q[poi].size()-2;i>=0 && c; i--) 
        if (Q[poi][i+1]>Q[poi][i]){
            swap (Q[poi][i+1], Q[poi][i]); c--;
        }
        else
            break;

    if ((int)Q[poi].size()==maxL){
        p[poi].maxi=-1;
        for (int i=0;i<maxL/2;i++)
            p[poi].maxi= max (p[poi].maxi, Q[poi][i]);
        cnt++;
        for (int i=maxL/2;i<maxL;i++){
            Q[cnt].push_back (Q[poi][i]);
            p[cnt].maxi= max (p[cnt].maxi, Q[poi][i]);
        }

        Q[poi].resize (maxL/2);
        p[cnt].prev= poi; p[cnt].next= p[poi].next;
        p[poi].next= cnt;

        if (p[cnt].next!=-1)
            p[p[cnt].next].prev= cnt;
        else
            fin= cnt;
    }

    else
        p[poi].maxi= max (p[poi].maxi, a);
}
/***********************************/
int main(){
    scanf ("%d", &n);
    for (int i=1;i<=n;i++){
        int a,c; scanf ("%d%d", &a, &c); pos[a]= i; 
        update (a,c);
    }

    while (beg!=-1){
        for (int i=0;i<(int)Q[beg].size();i++)
            printf ("%d ", pos[Q[beg][i]]);
        beg= p[beg].next;
    }
    printf ("\n");

    return 0;
}
