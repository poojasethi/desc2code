#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<ctime>

using namespace std;

int n,a,b,R,cnt;
struct node{int s,v,val,no,l,r,p;} P[100010];

inline void update(int x){
	P[x].s=P[P[x].l].s+P[P[x].r].s+1;
	P[x].v=max(max(P[P[x].l].v, P[P[x].r].v), P[x].val);
}

int lr(int x){
	int k=P[x].r; P[x].r=P[k].l; P[k].l=x;
	update(x); update(k);
	return k;
}

int rr(int x){
	int k=P[x].l; P[x].l=P[k].r; P[k].r=x;
	update(x); update(k);
	return k;
}

int insert(int x, int no, int a, int b){
	if (x==0){
		P[++cnt].s=1; P[cnt].v=P[cnt].val=a; P[cnt].no=no;
		P[cnt].l=P[cnt].r=0; P[cnt].p=rand();
		return cnt;
	}else{
	    int ret;
		if (max(P[P[x].r].v, P[x].val)<=a && P[P[x].r].s+1<=b){
			P[x].l=insert(P[x].l, no, a, b-P[P[x].r].s-1);
			if (P[P[x].l].p>P[x].p) ret=rr(x); else ret=x;
		}else{
			P[x].r=insert(P[x].r, no, a, b);
			if (P[P[x].r].p>P[x].p) ret=lr(x); else ret=x;
		}
		update(ret);
		return ret;
	}
}

void print(int x){
	if (x==0) return;
	else{
		print(P[x].l);
		printf("%d ", P[x].no);
		print(P[x].r);
	}
}

int main(){
	scanf("%d", &n);
	srand((int)time(0));
	for (int i=0; i<n; i++){
		scanf("%d%d", &a, &b);
		R=insert(R, i+1, a, b);
	}
	print(R);
	printf("\n");
}
