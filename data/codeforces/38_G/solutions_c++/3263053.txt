#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
#include <ctime>
#include <queue>
#include <stack>
#include <map>
#include <set>

#define forn(a,b,c) for(int (a)=(b);(a)<=(c);(a)++)
#define forr(a,b,c) for(int (a)=(b);(a)>=(c);(a)--)
#define SET(A,b) memset(A,b,sizeof (A) )
#define SIZE(A) ((int)(A).size())
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define num(a) (1LL<<(a))
using namespace std;

typedef double db;
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;

const int inf = 1e8;

const int MAXN = 1e5+10;

struct node{
	int size,maxx,key,a;
	node *r,*l;
	node(int _a=0){
		r=NULL;
		l=NULL;
		a=_a;
		size=0;
		maxx=-inf;
		key=rand();
	}
}*rt;

int get_max(node *a){
	if(a==0)	return -1;
	return a->maxx;
}

int get_size(node *a){
	if(a==0)	return 0;
	return a->size;
}

void update(node *rt){
	rt->maxx=max( rt->a , max( get_max(rt->l),get_max(rt->r) ) );
	rt->size=get_size(rt->l)+get_size(rt->r)+1;
}

node *zig(node *rt){
	node *x;
	x=rt->l;
	rt->l=x->r;
	x->r=rt;
	update(x->r);
	return x;
}
node *zag(node *rt){
	node *x;
	x=rt->r;
	rt->r=x->l;
	x->l=rt;
	update(x->l);
	return x;
}

node * insert(node *rt,int a,int c){
	
	if(rt==0)
		rt=new node(a);
	else if(a>rt->a && a>get_max(rt->r) && c>get_size(rt->r)){
		
		rt->l=insert(rt->l,a,c-get_size(rt->r)-1);
		
		if(rt->l->key<rt->key)
			rt=zig(rt);
			
	}
	else{
		rt->r=insert(rt->r,a,c);
		
		if(rt->r->key<rt->key)
			rt=zag(rt);
		
	}
	
	update(rt);
	
	return rt;
	
}

int pos[MAXN];

void rec(node *rt){
	
	if(rt==0)	return ;
	
	rec(rt->l);
	printf("%d ",pos[rt->a]);
	rec(rt->r);
	
}

int main(){
	
	srand(time(0));
	
	int N,a,c;
	
	scanf("%d",&N);
	
	forn(i,1,N){
		
		scanf("%d %d",&a,&c);
		
		rt=insert(rt,a,c);
		
		pos[a]=i;
		
	}
	
	rec(rt);
	puts("");
	
	return 0;
	
}
