#include <vector>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <string>
#include <bitset>
#include <complex>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <climits>
using namespace std;

int a[111111], c[111111];
    const int maxn = 110000;
    int lc[maxn], rc[maxn], gtr[maxn], size[maxn], root;
    int pri[maxn];

    void update(int x) {
        size[x] = size[lc[x]] + 1 + size[rc[x]];
        gtr[x] = max(max(gtr[lc[x]], gtr[rc[x]]), a[x]);
    }

    void right(int x, int &y) {
        lc[y] = rc[x];
        rc[x] = y;
        update(y);
        update(x);
        y = x;
    }

    void left(int x, int &y) {
        rc[y] = lc[x];
        lc[x] = y;
        update(y);
        update(x);
        y = x;
    }

    void insert(int &x, int i) {
        if (x == 0) {
            x = i;
            pri[x] = rand();
        } else {
            if (max(a[x], gtr[rc[x]]) <= a[i] && 1 + size[rc[x]] <= c[i]) {
                c[i] -= 1 + size[rc[x]];
                insert(lc[x], i);
                if (pri[lc[x]] < pri[x]) right(lc[x], x);
            } else {
                insert(rc[x], i);
                if (pri[rc[x]] < pri[x]) left(rc[x], x);
            }
        }
        update(x);
    }

void out(int x) {
    if (x) {
        out(lc[x]);
        cout << x << " ";
        out(rc[x]);
    }
}

int main() {
    int n;
    root = 0;
    cin >> n;
    pri[0] = INT_MAX;
    gtr[0] = INT_MIN;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i] >> c[i]; 
        //out(root);
        //cout << endl;
        insert(root, i);
    }
    out(root);
}


  			  				 		  	 				 		