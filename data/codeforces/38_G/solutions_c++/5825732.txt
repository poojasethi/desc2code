#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<cstdio>
#include<assert.h>
using namespace std;
struct Splay{
	int s,l,r,fa,key,maxx;
}a[120000];
int i,root,n,x,y;
void renew(int p){
	int x=a[p].l,y=a[p].r;
	a[p].s=a[x].s+a[y].s+1;
	a[p].maxx=max(a[p].key,max(a[x].maxx,a[y].maxx));
}
void left(int p){
	int y=a[p].fa,x=a[y].fa;
	a[p].fa=x; a[y].fa=p; a[a[p].l].fa=y;
	if(a[x].l==y)a[x].l=p;
	else a[x].r=p;
	a[y].r=a[p].l; a[p].l=y;
	renew(y);
	renew(p);
}
void right(int p){
	int y=a[p].fa,x=a[y].fa;
	a[p].fa=x; a[y].fa=p; a[a[p].r].fa=y;
	if(a[x].l==y)a[x].l=p;
	else a[x].r=p;
	a[y].l=a[p].r; a[p].r=y;
	renew(y);
	renew(p);
}
void insert(int &p,int x,int y,int ff){
	if(!p){
		p=i;
		a[p].fa=ff;
		a[p].s=1;
		a[p].maxx=a[p].key=x;
		return;
	}
//	if(x>a[a[p].r].maxx && x>a[p].key && y>=a[a[p].r].s+1)insert(a[p].l,x,y-a[a[p].r].s-1,p);
//	else insert(a[p].r,x,y,p);
	if(x<a[a[p].r].maxx || x<a[p].key || y<=a[a[p].r].s)insert(a[p].r,x,y,p);
	else insert(a[p].l,x,y-a[a[p].r].s-1,p);
	renew(p);
}
void splay(int p){
	int x,y;
	while(a[p].fa){
		x=a[p].fa; y=a[x].fa;
		if(!y){
			if(a[x].l==p)right(p);
			else left(p);
			break;
		}
		if(a[y].l==x){
			if(a[x].l==p)right(x),right(p);
			else left(p),right(p);
		}else{
			if(a[x].l==p)right(p),left(p);
			else left(x),left(p);
		}
	}
	root=p;
}
void dfs(int p){
	if(a[p].l)dfs(a[p].l);
	printf("%d ",p);
	if(a[p].r)dfs(a[p].r);
}
int main(){
	scanf("%d",&n);
	for(i=1;i<=n;++i){
		scanf("%d%d",&x,&y);
		insert(root,x,y,0);
		splay(i);
	}
	dfs(root);
}