#include <stdio.h>
#include <algorithm>
using namespace std;
#include <math.h>
#define NMAX 100030
#define NSQRT 320
int A[NSQRT * 2][NSQRT * 2], S[NSQRT*2];
int f[NMAX], v[NMAX];
int n, nsqrt;
void add_in_bucata(int buc,int p, int import, int pasi){
	int i;
	for(i = A[buc][0]; i && pasi && f[A[buc][i]] < import; --i, --pasi)
		A[buc][i+1] = A[buc][i];
	A[buc][i+1] = p;
	A[buc][0]++;
	if(S[buc] < import) S[buc] = import;
}
void add(int p, int import, int pasi){
	int buc = (p - 1) / nsqrt + 1;
	int nr = pasi;
	for(int i = buc; i; --i)
		if(i != 1 && nr - A[i][0] > 0 && S[i] < import) 
			nr -= A[i][0];
		else {
			add_in_bucata(i,p,import,nr);
			break;
		}
	
}
void optimize(){
	v[0] = 0;
	for(int i = 1; i <= nsqrt; ++i){
		//if(A[i][0] == 0) break;
		for(int j = 1; j <= A[i][0]; ++j)
			v[++v[0]] = A[i][j];
	}
	for(int i = 1; i <= nsqrt; ++i){
		S[i] = 0;
		for(int j = 1; j <= nsqrt && j + (i-1)*nsqrt <= v[0]; ++j){
			A[i][j] = v[j + (i-1)*nsqrt];
			A[i][0] = j;
			if(S[i] < f[A[i][j]]) S[i] = f[A[i][j]];
		}
	}
}
int main(){
//	freopen("G.in", "r", stdin);
//	freopen("G.out", "w", stdout);
	scanf("%d", &n);
	nsqrt = (int)sqrt(n) + 1;
	for(int i = 1; i <= n; ++i){
		int x, y;
		scanf("%d%d", &x, &y);
		f[i] = x;
		add(i, x, y);
		if(i % nsqrt == 0) optimize();
	}
	for(int i = 1; i <= nsqrt; ++i)
		for(int j = 1; j <= A[i][0]; ++j)
			printf("%d ", A[i][j]);
	printf("\n");
	return 0;
}
