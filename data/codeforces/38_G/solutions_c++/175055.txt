#include <cstdio>
#include <cstdlib>
#define max(a, b) ((a) > (b) ? (a) : (b))
const int N = 100050;

struct Tnode;
typedef Tnode *Tlink;
struct Tnode {
	int size;
	int key, val, rp;
	Tlink lch, rch;
} nodebuf[N], *null, *root;
int orz[N];
int n, cnodebuf;

Tlink newnode()
{
	Tlink ret = &nodebuf[++cnodebuf];
	return ret;
}

void update(Tlink t)
{
	t->size = t->lch->size + t->rch->size + 1;
	t->val = max(t->lch->val, max(t->rch->val, t->key));
}

void zig(Tlink &x)
{
	Tlink y = x->rch;
	x->rch = y->lch; y->lch = x;
	update(x);
	update(y);
	x = y;
}

void zag(Tlink &x)
{
	Tlink y = x->lch;
	x->lch = y->rch; y->rch = x;
	update(x);
	update(y);
	x = y;
}

void add(Tlink &t, int imp, int c)
{
	if (t == null) {
		t = newnode();
		t->size = 1;
		t->key = t->val = imp;
		t->lch = t->rch = null;
		t->rp = rand() * 32768 + rand();
		return;
	}
	if (max(t->rch->val, t->key) > imp || c <= t->rch->size) {
		add(t->rch, imp, c);
		update(t);
		if (t->rch->rp < t->rp) zig(t);
	} else {
		add(t->lch, imp, c - t->rch->size - 1);
		update(t);
		if (t->lch->rp < t->rp) zag(t);
	}
}

void dfs(Tlink t)
{
	if (t == null) return;
	dfs(t->lch);
	printf("%d ", orz[t->key]);
	dfs(t->rch);
}

int main()
{
	//freopen("G.in", "r", stdin);
	scanf("%d", &n);
	null = newnode();
	null->lch = null->rch = null;
	null->size = 0;
	null->key = null->val = -0x3f3f3f3f;
	root = null;
	for (int i = 1; i <= n; ++i) {
		int imp, c;
		scanf("%d%d", &imp, &c);
		orz[imp] = i;
		add(root, imp, c);
	}
		dfs(root);
		printf("\n");
}