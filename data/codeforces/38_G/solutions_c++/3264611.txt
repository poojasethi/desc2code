#include <cstdio>
#include <cstring>
#include <climits>
#include <algorithm>

const int N = 100000 + 1;

int n, a[N];

int treap_count, weight[N], size[N], maximum[N], children[N][2];

void update(int &x) {
    size[x] = size[children[x][0]] + 1 + size[children[x][1]];
    maximum[x] = std::max(a[x], std::max(maximum[children[x][0]], maximum[children[x][1]]));
}

void rotate(int &x, int t) {
    int y = children[x][t];
    children[x][t] = children[y][1 ^ t];
    children[y][1 ^ t] = x;
    update(x);
    update(y);
    x = y;
}

void insert(int &x, int k, int limit) {
    if (!x) {
        x = k;
        weight[x] = rand();
    } else {
        int t = -1;
        if (std::max(a[x], maximum[children[x][1]]) < a[k] && 1 + size[children[x][1]] <= limit) {
            t = 0;
            insert(children[x][0], k, limit - 1 - size[children[x][1]]);
        } else {
            t = 1;
            insert(children[x][1], k, limit);
        }
        if (weight[children[x][t]] < weight[x]) {
            rotate(x, t);
        }
    }
    update(x);
}

void print(int root) {
    if (root) {
        print(children[root][0]);
        printf("%d ", root);
        print(children[root][1]);
    }
}

int main() {
    weight[0] = INT_MAX;
    maximum[0] = INT_MIN;
    memset(children, 0, sizeof(children));
    scanf("%d", &n);
    int root = 0;
    for (int i = 1; i <= n; ++ i) {
        int c;
        scanf("%d%d", a + i, &c);
        insert(root, i, c);
    }
    print(root);
    puts("");
    return 0;
}

  	 	 		 	   	 	 	   	 	