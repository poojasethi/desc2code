from collections import deque
def bfs(g,root):
    global out
    if len(g[root]) == 0:
        return -1,0
    v = g[root][0][0]
    visited = {root:1}
    tap = -1
    dist = g[root][0][1]
    while not visited.has_key(v):
        visited[v] = 1
        if out[v] == 0:
            return v,dist
        dist = min(dist,g[v][0][1])
        v = g[v][0][0]
        
    return -1,0
        
                

n,m = map(int,raw_input().split(" "))
g = {i:[] for i in range(1,n+1)}
inc = {i:0 for i in range(1,n+1)}
out = {i:0 for i in range(1,n+1)}
for i in range(m):
    a,b,d = map(int,raw_input().split(" "))
    g[a].append((b,d))
    inc[b] += 1
    out[a] += 1

tanks = [k for k,v in inc.items() if v == 0]
rez = []
for tank in tanks:
    tap,dist = bfs(g,tank)
    if tap != -1:
        rez.append((tank,tap,dist))

print len(rez)
for tank,tap,dist in rez:
    print "%d %d %d" % (tank,tap,dist)
        
