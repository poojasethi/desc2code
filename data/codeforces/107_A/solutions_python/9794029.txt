from sys import stdin

def isConnected(adjMat, house):
  isConnected = False
  for i in range(len(adjMat[house])):
    if (adjMat[house][i] != 0):
      isConnected = True
  return (isConnected)

def find_tank(adjMat):
  tanks = []
  for i in range(len(adjMat[0])):
    pipeTo = False
    for j in range (len(adjMat)):
      if (adjMat[j][i] != 0):
        pipeTo = True
        break
    ##how to handle if there are only 0s and is not connected
    if not pipeTo:
      if (isConnected(adjMat, i)):
        tanks.append(i)
  return tanks

def findPath(graph, tank):
  canGo = True
  minDiam = 10**6 + 1
  idx = tank

  while (canGo):
    found = False
    for i in range(len(graph[0])):
      if (graph[idx][i] != 0):
        if (graph[idx][i] < minDiam):
          minDiam = graph[idx][i]
        idx = i
        found = True
    if (found == False):
      canGo = False
   
  if (minDiam == 10 ** 6 + 1):
    return
  return (idx, minDiam)
  

def main():
  info = stdin.readline().rstrip().split(' ')
  n = int(info[0])
  p = int(info[1])

  if (n == 0) or (p == 0):
    print ('0')
    return

  graph = []
  for i in range(n):
    row = []
    for j in range(n):
      row.append(0)
    graph.append(row)

  for i in range(p):
    pipe = stdin.readline().rstrip().split(' ')
    start = int(pipe[0])
    end = int(pipe[1])
    diameter = int(pipe[2])

    graph[start-1][end-1] = diameter


  tanks = find_tank(graph)
  if (len(tanks)==0):
    print ('0')
    return

  print (str(len(tanks)))

  for k in range(len(tanks)):
    info = findPath(graph, tanks[k])
    if (info==None):
      continue
    print (str(tanks[k]+1) + ' ' + str(info[0]+1) + ' ' + str(info[1]))

main()
