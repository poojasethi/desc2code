#include <bits/stdc++.h>
using namespace std;

const int sz = 2048;

int m, n = 0, lsb[sz];
bitset<sz> matrix[sz], row_mask[sz];

int main()
{
	scanf("%d", &m);
	for(int i = 0; i < m; i++)
	{
		char buf[650];
		scanf("%s", buf);
		int l = strlen(buf);
		long long num[80] = {0};
		bitset<sz> bin;
		for(int j = 0; j < l; j++)
		{
			int pos = (l - 1 - j) / 9;
			num[pos] = num[pos] * 10 + (buf[j] - '0');
		}
		for(int k = 0; 29 * k < sz; k++)
		{
			long long carry = 0LL, mod = 1LL << 29LL;
			for(int j = 79; j >= 0; j--)
			{
				num[j] += carry * 1000000000LL;
				carry = num[j] % mod;
				num[j] /= mod;
			}
			bin ^= (bitset<sz>(carry) << (29 * k));
		}

		bitset<sz> row_bin;
		for(int j = 0; j < n; j++)
			if(bin[lsb[j]])
			{
				bin ^= matrix[j];
				row_bin ^= row_mask[j];
			}
		int clsb;
		for(clsb = 0; clsb < sz; clsb++)
			if(bin[clsb])
				break;
		if(clsb < sz)
		{
			lsb[n] = clsb;
			matrix[n] = bin;
			row_mask[n] = row_bin;
			row_mask[n].set(i);
			for(int j = 0; j < n; j++)
				if(matrix[j][clsb])
				{
					matrix[j] ^= matrix[n];
					row_mask[j] ^= row_mask[n];
				}
			n++;
			printf("0\n");
		}
		else
		{
			vector<int> ans;
			for(int j = 0; j < sz; j++)
				if(row_bin[j])
					ans.push_back(j);
			printf("%d", int(ans.size()));
			for(int j = 0; j < int(ans.size()); j++)
				printf(" %d", ans[j]);
			printf("\n");
		}
	}

	return 0;
}
