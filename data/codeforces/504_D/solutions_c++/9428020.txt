#include <cstdio>
#include <algorithm>
#include <cstring>
#define LL long long
#define N 2005
#define M 37
#define K 58
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
using namespace std;

int n, b[N], len[N], mat;
char str[N];
LL temp[M], x[N][M], c[N][M];

int main(){
	fi(i, 0, N) b[i] = -1;
	scanf("%d", &n);
	fi(i, 0, n){
		scanf("%s", str);
		int l = strlen(str);
		
		fi(j, 0, M) x[i][j] = 0;
		fi(j, 0, l){
			fi(k, 0, M - 1) x[i][k] *= 10;
			x[i][0] += str[j] - '0';
			fi(k, 0, M - 1){
				x[i][k + 1] += x[i][k] / (1LL << K);
				x[i][k] %= (1LL << K);
			}
		}
		
		FD(j, M - 1, 0) if(x[i][j]){
			len[i] = 64 - __builtin_clzll(x[i][j]) + j * K;
			break;
		}
		
		while(len[i] && b[len[i]] > -1){
			fi(k, 0, M) x[i][k] ^= x[b[len[i]]][k];
			fi(k, 0, M) c[i][k] ^= c[b[len[i]]][k];
				
			bool find = 0;
			FD(k, M - 1, 0) if(x[i][k]){
				len[i] = 64 - __builtin_clzll(x[i][k]) + k * K;
				find = 1;
				break;
			}
			if(!find) len[i] = 0;
		}
		
		if(len[i]){
			c[i][i / K] ^= 1LL << (i % K);
			puts("0");
			b[len[i]] = i;
		}else{
			int cnt = 0;
			fi(j, 0, M) cnt += __builtin_popcountll(c[i][j]);
			printf("%d", cnt);
			fi(j, 0, M) fi(k, 0, K) if(c[i][j] & 1LL << k) printf(" %d", j * K + k);
			puts("");
		}
	}
}
