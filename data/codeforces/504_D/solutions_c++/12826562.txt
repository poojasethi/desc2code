/*
 * Problem : 
 * Author : Hwhitetooth
 * Date : 
 * Result :
 */

#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cctype>
#include <cstring>
#include <string>
#include <bitset>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <algorithm>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;

const int N = 2000 + 10;

struct BigInteger {
	int a[N];
	int n;

	BigInteger() {
	}
	BigInteger(char *s) {
		n = strlen(s);
		for (int i = 0; i < n; ++i) {
			a[n - 1 - i] = s[i] - '0';
		}
	}

	void div2() {
		int k = 0;
		for (int i = n - 1; i >= 0; --i) {
			k = k * 10 + a[i];
			a[i] = k / 2;
			k = k & 1;
		}
		if (a[n - 1] == 0) {
			--n;
		}
	}
} number;
char s[N];
bitset<N + N> a[N];
int pivot[N];
int id[N];
bitset<N> bits[N];
int n;

int main() {
	memset(pivot, -1, sizeof pivot);
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%s", s);
		number = BigInteger(s);
		for (int j = 0; number.n > 0; number.div2(), ++j) {
			if (number.a[0] & 1) {
				a[i].set(j);
			}
		}
		bits[i].set(i);
		for (int j = N - 1; j >= 0; --j) {
			if (pivot[j] != -1 && a[i].test(j)) {
				a[i] ^= a[pivot[j]];
				bits[i] ^= bits[pivot[j]];
			}
		}
		if (a[i].any()) {
			printf("0\n");
			for (int j = N - 1; j >= 0; --j) {
				if (a[i].test(j)) {
					pivot[j] = i;
					for (int k = j + 1; k < N; ++k) {
						if (pivot[k] != -1 && a[pivot[k]].test(j)) {
							a[pivot[k]] ^= a[i];
							bits[pivot[k]] ^= bits[i];
						}
					}
					break;
				}
			}
		}
		else {
			printf("%d", (int)bits[i].count() - 1);
			for (int j = 0; j < i; ++j) {
				if (bits[i].test(j)) {
					printf(" %d", j);
				}
			}
			printf("\n");
		}
	}
	return 0;
}
