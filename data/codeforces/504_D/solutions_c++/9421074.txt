#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define N 2005
#define D 74
#define UI unsigned int
using namespace std;

int n, dim;
UI s[N];
char _s[N];
int u[N], v[N];
UI t[N];
UI b[N][N];
UI real[N][D+5];
UI basis[N][D+5];

void convert(UI s[], UI b[], int n){
	int m = 0;
	reverse(s, s + n);
	for (int i=n; i>=1; i--) s[i] = s[i-1];
	s[0] = 0;
	while (n){
		for (int i=n; i>=1; i--){
			s[i-1] += 10 * (s[i] & ((1 << 28) - 1));
			s[i] >>= 28;
		}
		b[m++] = s[0] / 10;
		s[0] = 0;
		while (n && !s[n]) --n;
	}
}

int inSpace(UI b[], UI t[]){
	FOR(i,0,dim){
		if (b[u[i]] & (1<<v[i])){
			FOR(j,0,D) t[j] ^= real[i][j];
			FOR(j,0,D) b[j] ^= basis[i][j];
		}
	}
	FOR(i,0,D) if (b[i]) return 0;
	return 1;
}

void Gaussian(){
	FOR(j,0,D){
		if (basis[dim-1][j]){
			FOR(k,0,32) if (basis[dim-1][j] & (1<<k)){
				u[dim-1] = j;
				v[dim-1] = k;
			}
			break;
		}
	}
	FOR(i,0,dim-1) if ((basis[i][u[dim-1]] & (1 << v[dim-1]))){
		FOR(j,0,D) basis[i][j] ^= basis[dim-1][j];
		FOR(j,0,D) real[i][j] ^= real[dim-1][j];
	}
}


int main(){
	scanf("%d", &n);
	FOR(i,0,n){
		scanf("%s", _s);
		int l = strlen(_s);
		FOR(j,0,l) s[j] = _s[j] - '0';
		convert(s, b[i], l);
		FOR(i,0,D) t[i] = 0;
		if (inSpace(b[i], t)){
			int sum = 0;
			FOR(j,0,D) sum += __builtin_popcount(t[j]);
			printf("%d", sum);
			FOR(j,0,D){
				FOR(k,0,32) if (t[j] & (1<<k)) printf(" %d", k + (j << 5));
			}
			puts("");
		}
		else{
			puts("0");
			FOR(j,0,D) basis[dim][j] = b[i][j];
			FOR(j,0,D) real[dim][j] = t[j];
			real[dim][i >> 5] |= (1 << (i & 31));
			++dim;
			Gaussian();
		}
	}
	return 0;
}
