#include<cstdio>
#include<cstring>
#include<bitset>

using namespace std;

const int MAX_N = 2000;

bitset<MAX_N> f[MAX_N + 10], g[MAX_N + 10];
int n;
char str[MAX_N + 10];
int dig[MAX_N + 10], len;

int div2(){
	int rem = 0;
	for(int i = len - 1; i >= 0; i --){
		rem = rem * 10 + dig[i];
		dig[i] = rem >> 1;
		rem &= 1;
	}
	while(len > 0 && dig[len - 1] == 0)
		-- len;
	return rem;
}

void convert(bitset<MAX_N>& v){
	len = strlen(str);
	for(int i = 0; i < len; i ++)
		dig[i] = str[len - i - 1] - '0';
	int c = 0;
	while(len != 0)
		v[c ++] = div2();
}

int po[MAX_N + 10], pn;

int main(){
#ifndef ONLINE_JUDGE
	freopen("test.in", "r", stdin);
	freopen("test.out", "w", stdout);
#endif
	scanf("%d", &n);
	for(int i = 0; i < n; i ++){
		scanf("%s", str);
		convert(f[i]);
	}
	for(int i = 0; i < n; i ++)
		g[i][i] = 1;
	for(int i = 0; i < n; i ++){
		int j;
		for(j = 0; j < MAX_N; j ++)
			if(f[i][j])
				break;
		if(j == MAX_N){
			pn = 0;
			for(int k = 0; k < i; k ++)
				if(g[i][k]){
					po[pn ++] = k;
				}
			printf("%d ", pn);
			for(int k = 0; k < pn; k ++)
				printf("%d ", po[k]);
			printf("\n");
		} else{
			printf("0\n");
			for(int k = i + 1; k < n; k ++)
				if(f[k][j]){
					f[k] ^= f[i];
					g[k] ^= g[i];
				}
		}
	}

	return 0;
}

