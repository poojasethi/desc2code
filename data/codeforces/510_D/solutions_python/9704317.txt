from fractions import gcd

def primes(n):
    ps = range(n + 1)
    ps[0] = None
    ps[1] = None
    for i in xrange(n+1):
        if ps[i] is None:
            continue
        ps[i + i::i] = [None] * ((n / i) - 1)
    return filter(None, ps[2:])

def remove_mults(i, ps):
    for p in ps:
        while i % (p * p ) == 0:
            i /= p
        if i < p*p:
            break
    return i

n = int(raw_input())
ls = map(int, raw_input().split())
cs = map(int, raw_input().split())
max_cost = 3 * 10 ** 7 + 1
ps = primes(int(10 ** 9 ** 0.5) + 1)
ls = map(lambda i: remove_mults(i, ps), ls)
divs = {}
for i in xrange(n):
    if ls[i] == 1:
        max_cost = min(max_cost, cs[i])
    else:
        update = {ls[i]: cs[i]}
        for g, c in divs.items():
            if c >= max_cost:
                divs.pop(g)
                continue
            gg = gcd(g, ls[i])
            if gg == 1:
                max_cost = min(max_cost, c + cs[i])
            else:
                update[gg] = min(update.get(gg, c+cs[i]), c+cs[i])
        for g, c in update.iteritems():
            divs[g] = min(divs.get(g, c), c)
if max_cost == 3 * 10 ** 7 + 1:
    print -1
else:
    print max_cost
