#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;
const int maxN=300010,modP=1000000007;
#define fi "452E.INP"
#define fo "452E.OUT"
#define foru(i,l,r) for(int i=l;i<=r;++i)
#define ford(i,r,l) for(int i=r;i>=l;--i)
#define repu(i,r) for(int i=0;i<r;++i)
int n,res[maxN],parent[maxN],s_arr[maxN],LCM[maxN],num[maxN][4],rank_[maxN],pos[maxN],gap,key[maxN],type[maxN],len;
char s[maxN],s_[maxN];
struct cmp_{
    bool operator()(int i,int j){
        return LCM[j]>LCM[i];
    }
};
priority_queue<int,vector<int>,cmp_>heap;
int get_root(int u){
    if (parent[u]==u) return u;
    parent[u]=get_root(parent[u]);
    return parent[u];
}
bool cmp(int i,int j){
    if (pos[i]!=pos[j])
        return pos[i]<pos[j];
    if ((i+gap<len)&&(j+gap<len)) return pos[i+gap]<pos[j+gap];
    else return (i>j);
}
void build_Suffix_Array(){
    repu(i,len) s_arr[i]=i,pos[i]=int(s[i]);
    for(gap=1;;gap*=2){
        sort(s_arr,s_arr+len,cmp);
        repu(i,len-1) key[i+1]=key[i]+cmp(s_arr[i],s_arr[i+1]);
        repu(i,len) pos[s_arr[i]]=key[i];
        if (key[len-1]==len-1) return;
    }
}
void build_LCM(){
    repu(i,len) rank_[s_arr[i]]=i;
    LCM[0]=0; int p=0;
    repu(i,len-1){
        int j=s_arr[rank_[i]-1];
        while (s[i+p]==s[j+p]) ++p;
        LCM[rank_[i]]=p--;
        if (p<0) p=0;
    }
}
int main(){
    //freopen(fi,"r",stdin);
    //freopen(fo,"w",stdout);
    int n=maxN;
    foru(i,1,3){
        scanf("%s\n",&s_);
        int len_=strlen(s_);
        if (i==1) s_[len_++]='@';
        if (i==2) s_[len_++]='&';
        if (i==3) s_[len_++]='*';
        foru(j,1,len_) type[len]=i,s[len++]=s_[j-1];
        n=min(n,len_-1);
    }
    s[len++]='%';
    build_Suffix_Array();
    build_LCM();
    repu(i,len) heap.push(i);
    repu(i,len) parent[i]=i,num[i][1]=(type[i]==1),num[i][2]=(type[i]==2),num[i][3]=(type[i]==3);
    while (!heap.empty()){
        int u=heap.top(); heap.pop();
        if (LCM[u]==0) break;
        int l=LCM[u];
        int v=u-1; u=s_arr[u]; v=s_arr[v];
        int u_=get_root(u),v_=get_root(v);
        if (u_!=v_){
            res[l]=(1ll*res[l]+1ll*num[u_][1]*num[u_][2]*num[v_][3])%modP;
            res[l]=(1ll*res[l]+1ll*num[u_][2]*num[u_][3]*num[v_][1])%modP;
            res[l]=(1ll*res[l]+1ll*num[u_][3]*num[u_][1]*num[v_][2])%modP;
            res[l]=(1ll*res[l]+1ll*num[u_][3]*num[v_][1]*num[v_][2])%modP;
            res[l]=(1ll*res[l]+1ll*num[u_][1]*num[v_][3]*num[v_][2])%modP;
            res[l]=(1ll*res[l]+1ll*num[u_][2]*num[v_][3]*num[v_][1])%modP;
            parent[u_]=v_;
            foru(i,1,3)
                num[v_][i]+=num[u_][i];
        }
    }
    ford(i,len,1) res[i]=(res[i]+res[i+1])%modP;
    foru(i,1,n) printf("%d ",res[i]);
    fclose(stdin);
    fclose(stdout);
}
