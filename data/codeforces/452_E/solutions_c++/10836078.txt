#include<cstdio>
#include<cstring>
#include<algorithm>
#define fo(i,a,b) for(int i=a;i<=b;i++)
#define fd(i,a,b) for(int i=a;i>=b;i--)
using namespace std;
typedef long long LL;

struct Sam
{
    int l, fa, son[29];
    int r[3];
};
const int Mo = 1000000007;
const int maxlong = int(1e9);
const int N = int(3e5)+5;
char s[N];
Sam S[N<<1];
int tot , last , n , len;
int du[N<<1];
bool v[N<<1];
LL Ans[N];

void add(int x,int b)
{
    int p = ++tot , bj = last;
    S[p].l = S[bj].l + 1;
    for(; bj!=-1 && !S[bj].son[x]; bj=S[bj].fa) S[bj].son[x] = p;
    if (bj == -1) S[p].fa = 0;else
    if (S[bj].l+1 == S[S[bj].son[x]].l) S[p].fa = S[bj].son[x];else
    {
        int r = ++tot , q = S[bj].son[x];
        S[r] = S[q];
        fo(k,0,2) S[r].r[k] = 0;
        S[p].fa = S[q].fa = r;
        S[r].l = S[bj].l+1;
        for(; bj!=-1 && S[bj].son[x]==q; bj=S[bj].fa) S[bj].son[x] = r;
    }
    S[last = p].r[b] ++;
}

void Init()
{
    n = maxlong;
    S[0].fa = -1;
    tot = last = 0;
    fo(j,0,2)
    {
        scanf("%s",s+1);
        len = strlen(s+1);
        n = min(n , len);
        fo(i,1,len) add(s[i] - 'a' , j);
        add('z'-'a'+j+1 , j);
    }
}

void Dfs(int x)
{
    if (!v[x]) return;
    v[x] = 0;
    if (S[x].fa > 0)
    {
        fo(k,0,2) (S[S[x].fa].r[k] += S[x].r[k]) %= Mo;
        du[S[x].fa] --;
        if (!du[S[x].fa]) Dfs(S[x].fa);
    }
}

void Work()
{
    fo(i,1,tot) du[S[i].fa] ++ , v[i] = 1;
    fo(i,1,tot)
        if (!du[i]) Dfs(i);
    fo(i,1,tot)
    {
        int tmp = LL(S[i].r[0]) * S[i].r[1] % Mo * S[i].r[2] % Mo;
        (Ans[S[i].l] += tmp) %= Mo;
        (Ans[S[S[i].fa].l] -= tmp) %= Mo;
    }
    fd(i,n,1) Ans[i] = ((Ans[i] + Ans[i+1]) % Mo + Mo) % Mo;
    fo(i,1,n) printf("%d ",Ans[i]);
}

int main()
{
    
    Init();
    Work();
    
    return 0;
}