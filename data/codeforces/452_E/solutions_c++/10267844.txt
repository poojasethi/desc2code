#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

using namespace std;
const int N = 300033;
int sa[N], t[N], t2[N], c[N];
bool cmp(int *r, int a, int b, int l) {
	return r[a] == r[b] && r[a + l] == r[b + l];
}
void build_sa(char *s, int n, int m) {
	int p = 1, *x = t, *y = t2;
	rep(i, m)	c[i] = 0;
	rep(i, n)	c[x[i] = s[i]] ++;
	for(int i = 1; i < m; i ++)	c[i] += c[i - 1];
	for(int i = n - 1; i >= 0; i --) sa[--c[x[i]]] = i;
	for(int j = 1; p<n; j<<=1, m=p) {
		p = 0;
		for(int i = n - j; i < n; i ++)	y[p ++] = i;
		rep(i, n)if(sa[i]>=j) y[p ++] = sa[i] - j;
		rep(i, m)	c[i] = 0;
		rep(i, n)	c[x[y[i]]] ++;
		for(int i = 1; i < m; i ++)	c[i] += c[i - 1];
		for(int i = n-1; ~i; i--)	sa[-- c[x[y[i]]]] = y[i];
		swap(x, y);
		p=1, x[sa[0]] = 0;
		for(int i = 1; i < n; i ++)
			x[sa[i]] = cmp(y, sa[i - 1], sa[i], j)?p-1:p++;
	}
}
int rnk[N], H[N];
void getheight(char *s, int n) {
	int i, j, k = 0;
	for(i = 1; i <= n; i ++)	rnk[sa[i]] = i;
	for(i=0;i<n;H[rnk[i++]]=k)
		for(k?k--:0,j=sa[rnk[i]-1];s[i+k]==s[j+k];k++);
}
char s[N];
typedef pair<int, int> P;
#define pair(x, y) make_pair(x, y)
P height[N];
int belong[N];
const int mod = 1e9 + 7;
int answer[N];
struct Dsu {
	int f[N], n, cnt[N][3];
	void init(int n) {
		this->n = n;
		rep(i, n) {
			f[i] = i;
			cnt[i][belong[i]] = 1;
		}
	}
	int find(int x) {
		return x == f[x] ? x: f[x] = find(f[x]);
	}
	void merge(int x, int y, int length) {
		int fx = find(x), fy = find(y);
		if(fx == fy)	return;
		f[fy] = fx;
		for(int mask = 1; mask < 7; mask ++) {
			LL t = 1;
			rep(i, 3) if(mask >> i & 1) {
				t = t * cnt[fx][i] % mod;
			} else {
				t = t * cnt[fy][i] % mod;
			}
			(answer[length] += t) %= mod;
		}
		rep(i, 3)	cnt[fx][i] += cnt[fy][i];
	}
}ly;
void Go(int n, int m) {
	ly.init(n);
	for(int i = 2; i <= n; i ++)	height[i] = pair(H[i], i);
	sort(height + 2, height + n + 1);
	reverse(height + 2, height + n + 1);
	for(int i = 2; i <= n; i ++) {
		if(height[i].first == 0)	break;
		ly.merge(sa[height[i].second], sa[height[i].second - 1], height[i].first);
	}
	n = m;
	for(int i = n - 1; i; i --)
		(answer[i] += answer[i + 1]) %= mod;
	for(int i = 1; i <= n; i ++)
		printf("%d%c", answer[i], " \n"[i == n]);
}
char buf[N];
int main() {
	int n = 0, m = 1e9;
	rep(i, 3) {
		scanf("%s", buf);
		int len = strlen(buf);
		rep(j, len) {
			belong[n] = i;
			s[n ++] = buf[j];
		}
		s[n ++] = '#';
		m = min(m, len);
	}
	s[-- n] = 0;
	build_sa(s, n + 1, 128);
	getheight(s, n);
	Go(n, m);
	return 0;
}

