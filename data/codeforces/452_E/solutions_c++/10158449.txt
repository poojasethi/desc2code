#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_pop_bcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 3e5 + 5;

const int LOG = 20;

const int mod = 1e9 + 7;

int n, m, suf[N], p[N], cur[N], sorted[N], res[N], root[N], cnt[4][N];

pii C[N];

string s, s1, s2, s3;

char a[N];

vector < pair < int, pii > > v;

vector < int > print;

bool cmp(int x, int y) {

	return C[x] < C[y];

}

int f(int x) {

	return root[x] = root[x] == x ? x : f(root[x]);

}

int main() {
	
	ios :: sync_with_stdio(0);

	cin >> s1 >> s2 >> s3;

	s = s1 + "#" + s2 + "#" + s3;

	int sz1 = s1.size();
	int sz2 = s2.size();
	int sz3 = s3.size();

	int m = min(sz1, min(sz2, sz3));

	n = s.size();

	FOR(i, 1, n) a[i] = s[i - 1];

	FOR(i, 1, n) cur[i] = i;

	FOR(i, 1, sz1) p[i] = 1;
	FOR(i, sz1 + 2, sz1 + 1 + sz2) p[i] = 2;
	FOR(i, sz1 + sz2 + 3, sz1 + sz2 + 2 + sz3) p[i] = 3;

	FOR(i, 1, n) suf[i] = a[i];

	FOR(i, 1, LOG - 1)
	{
		FOR(j, 1, n)
			if(j + (1 << i - 1) <= n)
				C[j] = mp(suf[j], suf[j + (1 << i - 1)]);
			else
				C[j] = mp(suf[j], 0);

		sort(cur + 1, cur + n + 1, cmp);

		FOR(j, 1, n) suf[cur[j]] = suf[cur[j - 1]] + (C[cur[j]] != C[cur[j - 1]]);
	}

	FOR(i, 1, n) sorted[suf[i]] = i;

	int j = 0;

	FOR(i, 1, n)
	{
		if(suf[i] == 1) continue;

		while(i + j <= n and sorted[suf[i] - 1] + j <= n and a[i + j] == a[sorted[suf[i] - 1] + j]) j++;

		res[suf[i]] = j;

		if(j) j--;
	}

	FOR(i, 2, n) v.pb(mp(res[i], mp(sorted[i - 1], sorted[i])));

	FOR(i, 1, n)
	{
		root[i] = i;

		cnt[p[i]][i] = 1;
	}

	sort(v.rbegin(), v.rend());

	j = 0;

	ll ans = 0;

	ROF(i, m, 1)
	{
		for(; j < v.size() and v[j].F >= i; j++)
		{
			int x = f(v[j].S.F);
			int y = f(v[j].S.S);

			if(x == y) continue;

			root[y] = x;

			ans -= (ll) cnt[1][x] * cnt[2][x] * cnt[3][x] + (ll) cnt[1][y] * cnt[2][y] * cnt[3][y];

			FOR(i, 1, 3) cnt[i][x] += cnt[i][y];

			ans += (ll) cnt[1][x] * cnt[2][x] * cnt[3][x];
		}

		print.pb(ans % mod);
	}

	reverse(print.begin(), print.end());

	foreach(it, print) cout << *it << ' ';

	cout << endl;

	return 0;

}
