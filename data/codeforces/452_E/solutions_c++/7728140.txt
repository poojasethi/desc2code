#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <string>
#include <queue>
#include <stack>

#define LL long long

using namespace std;

const int maxn = 300005;
int mod = 1e9 + 7;

struct State {
    State *suf, *go[30], *nxt;
    int val, cnt; LL right[3];
    State() :
    suf(0), val(0) {
        memset(go, 0, sizeof go);
    }
    void in() {
        suf = NULL;
        memset(go, NULL, sizeof go);
        memset(right, 0, sizeof right);
        val = cnt = 0;
    }
}*root, *last;

State statePool[maxn * 2], *cur;
char s[maxn];
LL num[maxn*2];

void init() {
    cur = statePool;
    last = root = cur++;
}

void extend(int w) {
    State *p=last, *np=cur++;
    np->in();
    np->val=p->val+1;
    np->cnt=1;
    while(p && !p->go[w]) p->go[w] = np, p = p->suf;
    if(!p) np->suf = root;
    else {
        State *q = p->go[w];
        if(q->val == p->val + 1) np->suf = q;
        else {
            State *nq = cur++;
            nq->in();
            memcpy(nq->go, q->go, sizeof q->go);
            nq->val = p->val + 1;
            nq->suf = q->suf;
            q->suf = nq;
            np->suf = nq;
            while(p && p->go[w] == q) p->go[w] = nq, p = p->suf;
        }
    }
    last = np;
}

bool vis[maxn * 2];

void dfs(State *u) {
    if(vis[u - statePool]) return ;
    vis[u - statePool] = 1;
    for(int i = 0; i < 3; i ++) if(u->go[26 + i]) u->right[i] = 1;
    for(int i = 0; i < 26; i ++) {
        if(!u->go[i]) continue;
        dfs(u->go[i]);
        for(int j = 0; j < 3; j ++)
            u->right[j] = (u->right[j] + u->go[i]->right[j])%mod;
    }
}

int main() {
    init();
    int n = 1e9;

    scanf("%s", s);
    n = min(n, (int)strlen(s));
    for(int i = 0; s[i]; i ++) extend(s[i] - 'a');
    extend(26);

    scanf("%s", s);
    n = min(n, (int)strlen(s));
    for(int i = 0; s[i]; i ++) extend(s[i] - 'a');
    extend(27);

    scanf("%s", s);
    n = min(n, (int)strlen(s));
    for(int i = 0; s[i]; i ++) extend(s[i] - 'a');
    extend(28);

    dfs(root);

    int tot = cur - statePool;
    for(int i = 1; i < tot; i ++) {
        State *p = &statePool[i];
        LL tmp = p->right[0]%mod * p->right[1] %mod * p->right[2] %mod;
        num[p->val] = (num[p->val] + tmp)%mod;
        num[p->suf->val] = ((num[p->suf->val] - tmp)%mod + mod)%mod;
    }

    for(int i = tot - 2; i > 0; i --)
        num[i] = (num[i] + num[i+1])%mod;

    for(int i = 1; i <= n; i ++) {
        printf("%I64d%s", num[i], i==n?"\n":" ");
    }
    return 0;
}
