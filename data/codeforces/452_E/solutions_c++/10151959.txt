#include <bits/stdc++.h>

#define mp make_pair
#define st first
#define nd second
#define pb push_back

using namespace std;

typedef long long ll;
typedef pair< ll,ll > pll;
typedef pair< int,int > pii;

const int inf = 1000000000, N = 300000, LOGN = 19;

string s;
char a[N+5], b[N+5], c[N+5];
int n, m, an, bn, cn, h[N+5], suf[N+5], order[N+5], lcp[N+5];
int cnt[N+5][4], p[N+5];
ll curAns, ans[N+5];

int findSet(int x) {
	if (p[x] != x)
		return p[x] = findSet(p[x]);
	return x;
}

void unionSet(int x, int y) {
	x = findSet(x);
	y = findSet(y);

	if (x != y) {
		p[y] = x;
		curAns -= (ll) cnt[x][1] * cnt[x][2] * cnt[x][3] + (ll) cnt[y][1] * cnt[y][2] * cnt[y][3];
		for (int i = 1; i <= 3; i++)
			cnt[x][i] += cnt[y][i];
		curAns += (ll) cnt[x][1] * cnt[x][2] * cnt[x][3];
	}
}

int main()
{
	scanf("%s %s %s", a, b, c);

	s = (string) a + "$" + b + "#" + c;
	
	an = strlen(a);
	bn = strlen(b);
	cn = strlen(c);
	n = s.size();
	m = min(an, min(bn, cn));

//	cout << s << endl;

	for (int i = 0; i < n; i++) {
		if (i < an)
			h[i] = 1;
		else if (i != an && i <= an+bn)
			h[i] = 2;
		else if (i != an && i != an+bn+1)
			h[i] = 3;
	}

	vector< pair<pii, int> > v;

	for (int i = 0; i < n; i++)
		v.pb( mp(mp(s[i], 0), i) );

	for (int l = 0; l <= LOGN; l++) {
		sort(v.begin(), v.end());

		suf[v[0].nd] = 0;
		for (int i = 1; i < n; i++) {
			suf[v[i].nd] = suf[v[i-1].nd] + (v[i].st != v[i-1].st); 
		}

		v.clear();
		for (int i = 0; i < n; i++) {
			if (i + (1 << l) < n)
				v.pb( mp(mp(suf[i], suf[i + (1 << l)]), i) );
			else
				v.pb( mp(mp(suf[i], 0), i) );
		}
	}

	for (int i = 0; i < n; i++) {
		order[suf[i]] = i;
	}
	
	int j = 0;
	for (int i = 0; i < n; i++) {
		if (suf[i] == 0)
			continue;

		while (i+j < n && order[suf[i] - 1]+j < n && s[i+j] == s[order[suf[i] - 1]+j])
			j++;

		lcp[suf[i]] = j;

		if (j) j--;
	}

	vector< pair<int, pii> > edges;

	for (int i = 1; i < n; i++) {
		edges.pb( mp(lcp[i], mp(order[i-1], order[i])) );	
	}

	sort(edges.rbegin(), edges.rend());

	for (int i = 0; i < n; i++) {
		p[i] = i;
		cnt[i][h[i]] = 1;
	}

	j = 0;
	for (int i = m; i >= 1; i--) {
		for (; j < edges.size() && edges[j].st >= i; j++) {
			unionSet(edges[j].nd.st, edges[j].nd.nd);
		}

		ans[i] = curAns;
	}

	for (int i = 1; i <= m; i++) {
		printf("%lld ", ans[i] % 1000000007);
	}
	puts("");
	
	return 0;
}
