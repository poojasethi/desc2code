#include<bits/stdc++.h>

using namespace std;

#define ALL(c) c.begin(), c.end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define DB( x ) cout << #x << " = " << x << endl;
#define OUT( a , n ) for( int J = 0; J < (n); J++ )cout<< (a)[J] << " \n"[J == (n) - 1 ]
#define WAIT cout << flush , system("PAUSE");
#define lowbit(x) ((x) & (-x))

typedef pair<int, int> pii;
typedef long long ll;

const ll MOD = 1e9+7;


const int LEN = 3e5 + 5, MAXS = 2 * LEN, K = 29;
int go[MAXS][K], slink[MAXS], length[MAXS], final[MAXS], p, q, size = 2, last = 1, n;
char s[LEN], t[LEN];
int endpos[MAXS];
bool clone[MAXS];

void extend (int c, int pos)
{
    for (p = last; !go[p][c]; p = slink[p])
        go[p][c] = size;

    q = go[p][c];
    length[size] = length[last] + 1;
    endpos[size] = pos;
    last = size++;


    if (!p)
        slink[last] =  1;
    else if (length[p] + 1 == length[q])
        slink[last] = q;
    else
    {
        for (length[size] = length[p] + 1; go[p][c] == q; p = slink[p])
            go[p][c] = size;

        clone[size] = true;
        endpos[size] = endpos[q];
        memcpy(go[size], go[q], sizeof go[size]);
        slink[size] = slink[q];
        slink[last] = slink[q] = size++;
    }
}

void build ()
{
    fill(go[0], go[0] + K, 1);
    length[0] = -1;

    for (int i = 0; s[i]; ++i)
        extend(s[i] - 'a', i);

    //for (; last > 0; last = slink[last])
        //final[last] = 1;
}

ll dp[3][MAXS];
bool mk[MAXS];
void solve(int st)
{
    if(mk[st])return;
    mk[st] = true;

    for( int i = 0; i < K; i++ )
    {
        int to = go[st][i];
        if(to)
        {
            if(i > 25)
            {
                dp[i - 26][st]++;
                continue;
            }

            solve(to);

            for(int j = 0; j < 3; j++ )
                dp[j][st] = (dp[j][st] + dp[j][to])%MOD;
        }
    }
}

ll add[MAXS];

ll get( int st)
{
    ll sol = 1;
    for( int i = 0; i < 3; i++ )
        sol = (sol * dp[i][st])%MOD;

    return sol;
}

int L[3];
int main()
{
    cin.sync_with_stdio(false);
    cin.tie(0);

    for( int i = 0; i < 3; i++ )
    {
        cin >> t;
        L[i] = strlen(t);
        for( int j = 0; t[j]; j++ )
            s[n++] = t[j];
        s[n++] = '{' + i;
    }

    build();
    solve(1);

    for( int st = last; st >= 2; st-- )
    {
        //if(clone[st])continue;
        int r = length[st] + 1;
        int l = length[slink[st]] + 1;
        l = max(1 , l);
        ll g = get(st);
        if(!g)continue;
        add[l] =( add[l] + g ) % MOD;
        add[r] =( add[r] + MOD - g ) % MOD;
    }

    for( int i = 2; i <= n; i++ )
        add[i] = (add[i-1] + add[i])%MOD;

    int len = min(L[0], min(L[1], L[2]));
    OUT(add + 1, len);

    return 0;
}

