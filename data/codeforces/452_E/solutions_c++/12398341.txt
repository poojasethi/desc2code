#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#define N 400005
#define mo 1000000007
#define LL long long
#define oo (1<<30)
#define TAT "%I64d"
using namespace std;
LL  BC[N],AC[N]; int map[N];
LL  S[N],A[N],B[N],C[N],AB[N]; char  T[N];
int n,m,q,len,c[N],f[N] ,r_64; char st[N];
int sa[N],x[N],y[N],rk[N],h[N],ht[N],d[N];
void init()
{
    int i,x; r_64=oo;
    scanf("%s" ,T+1);
    x=strlen(T+1);
    r_64=min(r_64,x);
    for(i=1;i<=x;i++)
        st[++n]=T[i],map[n]=1;
    st[++n]='#';
    scanf("%s" ,T+1);
    x=strlen(T+1);
    r_64=min(r_64,x);
    for(i=1;i<=x;i++)
        st[++n]=T[i],map[n]=2;
    st[++n]='*';
    scanf("%s" ,T+1);
    x=strlen(T+1);
    r_64=min(r_64,x);
    for(i=1;i<=x;i++)
        st[++n]=T[i],map[n]=3;
}
void Suffix_Array()
{
    int i,k; m=max(n,200);
    for(i=0;i<=m;i++) c[i]=0;
    for(i=1;i<=n;i++) c[x[i]=st[i]]++;
    for(i=1;i<=m;i++) c[i]+=c[i-1];
    for(i=n;i>=1;i--) sa[c[x[i]]--]=i;
    for(k=1;k<=n;k<<=1){
        for(i=1,len=0;i<=n;i++) if(i+k>n) y[++len] = i;
        for(i=1;i<=n;i++) if(sa[i]>k) y[++len]=sa[i]-k;
        for(i=0;i<=m;i++) c[i]=0;
        for(i=1;i<=n;i++) c[x[y[i]]]++;
        for(i=1;i<=m;i++) c[i]+=c[i-1];
        for(i=n;i>=1;i--) sa[c[x[y[i]]]--]=y[i];
        for(i=1;i<=n;i++) swap(x[i],y[i]);
        x[sa[1]]=1;
        for(i=2;i<=n;i++)
            x[sa[i]]=(y[sa[i-1]]==y[sa[i]]&&y[sa[i-1]+k]==y[sa[i]+k]) ? x[sa[i-1]] : x[sa[i-1]]+1;
      }
    for(i=1;i<=n;i++) rk[sa[i]]=i;
    for(i=1;i<=n;i++){
        h[i] = max(1,h[i-1]-1) ,k = sa[rk[i]+1];
        for(;st[i+h[i]-1]==st[k+h[i]-1];h[i]++);
        h[i]--;
      }
    for(i=1;i<=n;i++) ht[i]=h[sa[i]];
}
bool cmp(int x,int y){ return ht[x]>ht[y];}
int find(int x){ return f[x] ? f[x]=find(f[x]) : x;}
void merge(int x,int y,int t)
{
    x=find(x),y=find(y);
    if(x==y) return ;
    S[t]+=A[x]*BC[y];
    S[t]+=B[x]*AC[y];
    S[t]+=C[x]*AB[y];
    S[t]+=AB[x]*C[y];
    S[t]+=AC[x]*B[y];
    S[t]+=BC[x]*A[y];
    AB[y]+=AB[x]+A[x]*B[y]+A[y]*B[x];
    AC[y]+=AC[x]+A[x]*C[y]+A[y]*C[x];
    BC[y]+=BC[x]+B[x]*C[y]+B[y]*C[x];
    A[y]+=A[x];
    B[y]+=B[x];
    C[y]+=C[x];
    f[x]=y;
}
void work()
{
    int i;
    for(i=1;i<n;i++) d[i]=i;
    sort(d+1,d+n+1,cmp);
    for(i=1;i<=n;i++) f[i]=0;
    for(i=1;i<=n;i++){
        if(map[sa[i]]==1) A[i]=1;
        if(map[sa[i]]==2) B[i]=1;
        if(map[sa[i]]==3) C[i]=1;
      }
    sort(d+1,d+n,cmp);
    for(i=1;i<n;i++)
        merge(d[i],d[i]+1,ht[d[i]]);
    for(i=r_64;i>=1;i--)
        S[i]+=S[i+1];
    for(i=1;i<=r_64;i++)
        printf(TAT" ",S[i]%mo);
}
int main()
{
    init();
    Suffix_Array();
    work();
    return 0;
}
