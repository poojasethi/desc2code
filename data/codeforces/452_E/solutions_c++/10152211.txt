#include <bits/stdc++.h>

#define	st first
#define	nd second
#define	mp make_pair
#define	pb push_back
#define	lli long long int
#define	all( gg )	gg.begin(),gg.end()
#define	foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	FP( ii,aa,bb ) for( lli ii=aa;ii<=bb;ii++ )
#define	FM( ii,aa,bb ) for( lli ii=aa;ii>=bb;ii-- )
#define	debug(ccc)	cout << #ccc << " = " << ccc << endl;

#define	mod	1000000007LL
using namespace std;

int	n,N,g[400000];
char	s[400000],p[400000],q[400000];

lli	A[400000],B[400000],C[400000],ata[400000];
lli	res;

int	atabul( int nod ){
	return	ata[nod]==nod ? nod : ata[nod] = atabul( ata[nod] );
}

void	merge( int x,int y ){
	x = atabul(x);
	y = atabul(y);
	if( x==y )	assert(0);
	res -= A[x]*B[x]*C[x];
	res -= A[y]*B[y]*C[y];
	A[x]+=A[y];
	B[x]+=B[y];
	C[x]+=C[y];
	res += A[x]*B[x]*C[x];
	ata[y] = x;
}

pair< pair<int,int>,pair<int,int> >	SUF[800000];
int	sira[800000];

void	suffix_array(){
	FP( i,1,n )
		SUF[i] = mp( mp( s[i],0 ),mp( i,g[i] ) );
	sort( SUF+1,SUF+n+1 );
	for( int k=1;k<=n;k*=2 ){
		FP( i,1,n )	sira[SUF[i].nd.st] = sira[SUF[i-1].nd.st]+(SUF[i].st!=SUF[i-1].st);
		FP( i,1,n )	SUF[i] = mp( mp(sira[i],sira[i+k]),mp(i,g[i]) );
		sort( SUF+1,SUF+n+1 );
	}
	FP( i,1,n ){
		sira[ SUF[i].nd.st ] = i;
		if( SUF[i].nd.nd==1 )	A[i] = 1;
		if( SUF[i].nd.nd==2 )	B[i] = 1;
		if( SUF[i].nd.nd==3 )	C[i] = 1;
	}
}

int	l[400000];

vector<int>	v[400000];

int lcp_array(){
	int	h=0;
	FP( i,1,n ){
		if( sira[i]==n )	continue;
		while( s[i+h]==s[ SUF[ sira[i]+1 ].nd.st+h ] )	h++;
		v[h].pb( sira[i] );
		l[sira[i]] = h;
		if( h )	h--;
	}
	//FP( i,1,n )	cout << s+SUF[i].nd.st << "   " << l[i] <<  "    " << SUF[i].nd.nd << endl;
}

int main(){
	int	a,b,c;
	scanf("%s",s+1);
	scanf("%s",p+1);
	scanf("%s",q+1);
	a = strlen( s+1 );
	b = strlen( p+1 );
	c = strlen( q+1 );
	N = min( a , min( b , c ) );
	n = a + b + c + 2;
	FP( i,1,n )	ata[i] = i;
	FP( i,1,a )
		g[i] = 1;
	FP( i,a+2,a+b+1 )
		g[i] = 2;
	FP( i,a+b+3,a+b+c+2 )
		g[i] = 3;
	strcat( s+1,"$" );
	strcat( s+1,p+1 );
	strcat( s+1,"#" );
	strcat( s+1,q+1 );
	suffix_array();
	lcp_array();
	vector<lli>	ret;
	FM( i,max(a,max(b,c)),1 ){
		foreach( v[i],it ){
			merge( *it,*it+1 );
		}
		if( i<=N )
			ret.pb( res%mod );
	}
	reverse( all(ret) );
	foreach( ret,it )
		cout << *it << " ";
	cout << endl;
}
