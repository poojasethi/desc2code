//SAM
#include <fstream>
#include <iostream>
#include <cstdio>
#include <stdio.h>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#define MAXN 600005
#define modd 1000000007
using namespace std;

typedef long long LL;
int n,L,cnt,ans[MAXN],sum[MAXN];
char s[MAXN];
struct Node  {
	Node *go[28], *par;
	int val, s[3], num;
	void Clear (int _val)
	{
		for (int i=0; i<28; i++) go[i]=NULL;
		par=NULL;
		s[0]=s[1]=s[2]=0;
		val=_val;
	}
} *root, *last, *a[MAXN], *b[MAXN];

void Extend(int w)
{
	Node *p=last, *np=new Node;
	a[++cnt]=np; np->num=cnt;
	np->Clear(p->val+1);
	for (; (p) && (!p->go[w]); p=p->par) p->go[w]=np;
	if (!p) np->par = root;
	else {
		Node *q = p->go[w]; 
		if (q->val == p->val+1) np->par = q;
		else {
			Node *nq = new Node;
			a[++cnt]=nq; nq->num=cnt;
			nq->Clear(p->val+1);
			for (int i=0; i<28; i++) nq->go[i]=q->go[i]; 
			nq->par = q->par;
			q->par = np->par = nq;
			for (; (p) && (p->go[w]==q); p=p->par) p->go[w]=nq; 
		}
	}
	last=np;
}
void Init()
{
	last=root=new Node; 
	root->Clear(0);
	cnt = 0;
	
	scanf ("%s", &s);
	L=n=strlen(s);
	for (int i=0; i<n; i++, last->s[0]++) Extend(s[i]-'a');
	Extend(26);
	
	scanf ("%s", &s);
	n=strlen(s); L=min(L,n); 
	for (int i=0; i<n; i++, last->s[1]++) Extend(s[i]-'a');
	Extend(27);
	
	scanf ("%s", &s);
	n=strlen(s); L=min(L,n); 
	for (int i=0; i<n; i++, last->s[2]++) Extend(s[i]-'a');
}
void Work()
{
	for (int i=0; i<=cnt; i++) sum[i]=0;
	for (int i=1; i<=cnt; i++) sum[a[i]->val]++;
	for (int i=1; i<=cnt; i++) sum[i]+=sum[i-1];
	for (int i=1; i<=cnt; i++) b[sum[a[i]->val]--] = a[i];
	
	for (int i=cnt; i>=1; i--)
	{
		Node *u = b[i];
		for (int j=0; j<3; j++) u->par->s[j] += u->s[j];
		int tmp = ((LL)(((LL)u->s[0] * u->s[1]) % modd) * u->s[2]) % modd, le=u->par->val+1, ri=u->val+1;
		ans[le] = (ans[le]+tmp) % modd;
		ans[ri] = (ans[ri]-tmp) % modd;
	}
	for (int i=1; i<=L; i++) 
	{
		ans[i]=(ans[i-1]+ans[i]) % modd;
		printf("%d ", (ans[i]+modd) % modd);
	}
	printf ("\n");
}
int main()
{
	Init();
	Work(); 
	return 0; 
} 
