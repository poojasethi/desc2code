#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<iostream>
#define pb push_back
#define mkp make_pair
using namespace std;

const int maxn = 300005;
const int mod = 1000000007;
typedef long long ll;

char s[maxn];

ll ans[maxn];
struct sam
{
    struct node
    {
        node *par,*go[27];
        int val,g,cnt[3];
        node():par(0),g(0)
        {
            memset(go,0,sizeof(go));
        }
    };
    node *root,*last,*da[2*maxn];
    node pool[2*maxn],*cur;
    void init()
    {
        cur = pool;
        root = last = cur++;
    }
    void extend(int w,int id)
    {
        node *p = last;
        node *np = cur++;
        np->val = p->val+1;
        if(id>=0)
            np->cnt[id] = 1;
        while(p&&p->go[w]==0)
            p->go[w]=np,p=p->par;
        if(!p)
            np->par = root;
        else
        {
            node *q = p->go[w];
            if(p->val+1==q->val)
                np->par = q;
            else
            {
                node *nq = cur++;
                memcpy(nq->go,q->go,sizeof q->go);
                nq->val = p->val + 1;
                nq->par = q->par;
                q->par = nq;
                np->par = nq;
                while(p&&p->go[w]==q)
                    p->go[w]=nq,p=p->par;
            }
        }
        last = np;
    }
    int c[maxn];
    void sol()
    {
        init();
        int tl=0,la,lb,lc;
        scanf("%s",s);la=strlen(s);
        for(int i=0;s[i];i++)
            extend(s[i]-'a',0);
        extend(26,-1);
        scanf("%s",s);lb=strlen(s);
        for(int i=0;s[i];i++)
            extend(s[i]-'a',1);
        extend(26,-1);
        scanf("%s",s);lc=strlen(s);
        for(int i=0;s[i];i++)
            extend(s[i]-'a',2);
        tl = la+lb+lc+2;
        la = min(la,min(lb,lc));
        int n = cur-pool;
        for(int i=1;i<n;i++)
            c[pool[i].val]++;
        for(int i=1;i<=tl;i++)
            c[i]+=c[i-1];
        for(int i=1;i<n;i++)
            da[c[pool[i].val]--] = &pool[i];
        for(int i=n-1;i;i--)
        {
            node* p = da[i];ll tp = 1;
            for(int j=0;j<3;j++)
            {
                p->par->cnt[j]+=p->cnt[j];
                tp = tp*p->cnt[j]%mod;
            }
            ans[p->val] = (ans[p->val]+tp)%mod;
            ans[p->par->val] = (ans[p->par->val]-tp)%mod;
        }
        for(int i=la;i>=1;i--)
            ans[i]=(ans[i]+ans[i+1])%mod;
        for(int i=1;i<=la;i++)
            printf("%d ",(ans[i]%mod+mod)%mod);
    }
} st;

int main()
{
    st.sol();
}
