#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const int MOD = 1000000007;
const int MAX = 300005;
int rank[20][MAX], par[MAX], cnt[3][MAX];
vector<pair<pair<int, int>, int> > v;
vector<pair<int, pair<int, int> > > edges;
vector<pair<int, int> > suf;
int res[MAX], ans = 0, n;
int find(int v)
{
	return (par[v] == v ? v : par[v] = find(par[v]));
}
int get(int v)
{
	v = find(v);
	return 1LL * cnt[0][v] * cnt[1][v] * cnt[2][v] % MOD;
}
void merge(int u, int v)
{
	u = find(u);
	v = find(v);
	ans = (ans - get(u) + MOD) % MOD;
	ans = (ans - get(v) + MOD) % MOD;
	for (int i = 0; i < 3; i++)
		cnt[i][u] += cnt[i][v];
	par[v] = u;
	ans = (ans + get(u)) % MOD;
}
int lcp(int x, int y)
{
	int r = 0;
	for (int i = 19; i >= 0 && x < n && y < n; i--)
		if (rank[i][x] == rank[i][y])
		{
			x += (1 << i);
			y += (1 << i);
			r |= (1 << i);
		}
	return r;
}
int main()
{
	ios::sync_with_stdio(false);
	string s = "";
	string s1, s2, s3;
	cin >> s1 >> s2 >> s3;
	s = s1 + '&' + s2 + '&' + s3;
	n = s.length();
	for (int i = 0; i < n; i++)
		rank[0][i] = s[i];
	for (int i = 1; i < 20; i++)
	{
		v.clear();
		for (int j = 0; j < n; j++)
			v.push_back(make_pair(make_pair(rank[i - 1][j], (j + (1 << (i - 1)) >= n ? -1 : rank[i - 1][j + (1 << (i - 1))])), j));
		sort(v.begin(), v.end());
		for (int j = 1; j < v.size(); j++)
			rank[i][v[j].second] = (v[j].first == v[j - 1].first ? rank[i][v[j - 1].second] : j);
	}
	int x = 0;
	for (int i = 0; i < n; i++)
		if (s[i] == '&')
			x++;
		else
		{
			par[i] = i;
			cnt[x][i]++;
		}
	for (int i = 0; i < n; i++)
		if (s[i] != '&')
			suf.push_back(make_pair(rank[19][i], i));
	sort(suf.begin(), suf.end());
	for (int i = 1; i < suf.size(); i++)
		edges.push_back(make_pair(lcp(suf[i - 1].second, suf[i].second), make_pair(suf[i - 1].second, suf[i].second)));
	sort(edges.begin(), edges.end());
	reverse(edges.begin(), edges.end());
	int p = n;
	for (int i = 0; i < edges.size(); i++)
	{
		int u = edges[i].second.first;
		int v = edges[i].second.second;
		int w = edges[i].first;
		while (p != w)
			res[p--] = ans;
		merge(u, v);
	}
	while (p)
		res[p--] = ans;
	for (int i = 1; i <= min(s1.size(), min(s2.size(), s3.size())); i++)
		cout << res[i] << " ";
	cout << endl;
	return 0;
}
