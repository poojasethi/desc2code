#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
using namespace std;
#define N 100001
#define M 301
#define LL long long
int n, m, k;
int c[N][3], best[M][M];
LL dp[M][M];

LL solve(int p, int z)
{
	if (z >= k) return 0;
	if (p > n) return 1e18;
	LL& res = dp[p][z];
	if (res != -1) return res;
	res = solve(p+1, z);
	for (int i = p; i <= n; ++i) if (best[p][i])
		res = min(res, c[best[p][i]][2]+solve(c[best[p][i]][1]+1, z+c[best[p][i]][1]+1-p));
	return res;
}

int main()
{
	scanf("%d%d%d", &n, &m, &k);
	for (int i = 1; i <= m; ++i)
	{
		scanf("%d%d%d", &c[i][0], &c[i][1], &c[i][2]);
		for (int j = c[i][0]; j <= c[i][1]; ++j)
		{
			int& b = best[j][c[i][1]];
			if (b == 0 || c[b][2] > c[i][2]) b = i;
		}
	}
	memset(dp, -1, sizeof dp);
	LL r = solve(1, 0);
	if (r > (LL)(1e18)-1) r = -1;
	cout << r << endl;
}

