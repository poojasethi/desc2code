#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int maxn=200100,blk=1030;

namespace IO{
	char op,sta[100],top;
	inline void read(int &a){
		do{op=getchar();}while(op<'0'||op>'9');
		a=op-'0';
		op=getchar();
		while(op>='0'&&op<='9'){
			a=a*10-'0'+op;
			op=getchar();
		}
		return;
	}
	inline void print(int a){
		if (a==0) putchar('0');
		else{
			while(a){
				sta[++top]=a%10;
				a/=10;
			}
			while(top) putchar('0'+sta[top--]);
		}
		putchar(' ');
		return;
	}
}

int n,m,top;
struct point{
	int q,c;
	bool operator < (const point &a)const{
		if (q!=a.q) return q>a.q;
		return c<a.c;
	}
}nod[maxn];

struct rec{
	int l,r,ad,cost;
}v[maxn];
int id[maxn],B[maxn],ans[maxn];
inline bool cmp(const int a,const int b){
	return B[a]<B[b];
}

inline int find(int x){
	int l=1,r=m,mid;
	while(l<r){
		mid=(l+r)/2;
		if (B[id[mid]]>=x) r=mid-1;
		else{
			if (l==mid){
				if (B[id[r]]<x) return r;
				return l;
			}
			l=mid;
		}
	}
	return l;
}

inline void build(){
	for (int i=1;i<=top;i++){
		for (int j=v[i].l;j<=v[i].r;j++){
			ans[id[j]]+=v[i].ad;
			B[id[j]]-=v[i].cost;
		}
	}
	top=1;
	v[1].l=1;
	v[1].r=m;
	v[1].ad=0;
	v[1].cost=0;
	sort(id+1,id+1+m,cmp);
	return;
}

int main(){
//	freopen("in.txt","r",stdin);
//	freopen("out.txt","w",stdout);
	IO::read(n);
	for (int i=1;i<=n;i++){
		IO::read(nod[i].c);
		IO::read(nod[i].q);
	}
	sort(nod+1,nod+1+n);
	IO::read(m);
	for (int i=1;i<=m;i++){
		IO::read(B[i]);
		id[i]=i;
	}
	sort(id+1,id+1+m,cmp);
	top=1;
	v[1].l=1;
	v[1].r=m;
	v[1].ad=0;
	v[1].cost=0;
	for (int i=1;i<=n;i++){
		for (int j=top;j>0;j--){
			if (B[id[v[j].l]]>=nod[i].c+v[j].cost){
				v[j].ad++;
				v[j].cost+=nod[i].c;
			}
			else if (B[id[v[j].r]]>=nod[i].c+v[j].cost){
				int k=find(v[j].cost+nod[i].c);
				top++;
				v[top].l=k+1;
				v[top].r=v[j].r;
				v[top].ad=v[j].ad+1;
				v[top].cost=v[j].cost+nod[i].c;
				v[j].r=k;
			}
		}
		if (top>blk) build();
	}
	build();
	for (int i=1;i<=m;i++) IO::print(ans[i]);
	return 0;
}
