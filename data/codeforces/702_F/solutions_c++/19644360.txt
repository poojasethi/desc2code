//learn from someone
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>
#define N 200010
using namespace std;
int n, m;
struct Q{
	int id, v, ans;
	Q(){}
	Q(int a, int b){
		id = a;
		v = b;
	}
	friend bool operator < (const Q &a, const Q &b){
		return a.v < b.v;
	}
	friend bool operator < (const Q &a, int b){
		return a.v < b;
	}
}q[N];
struct Interval{
	int l, r, delta, cnt;
	Interval(){}
	Interval(int a, int b, int c = 0, int d = 0){
		l = a;
		r = b;
		delta = c;
		cnt = d;
	} 
};
pair<int, int> p[N];
vector<Interval> block;
void rebuild(){
	for(int i = 0; i < block.size(); i ++){
		for(int j = block[i].l; j <= block[i].r; j ++){
			q[j].ans += block[i].cnt;
			q[j].v += block[i].delta;
		}
	}
	sort(q + 1, q + m + 1);
	block.clear();
	block.push_back(Interval(1, m));
}
bool cmp(const Q &a, const Q &b){
	return a.id < b.id;
}
int main(){
	scanf("%d", &n);
	for(int i = 1; i <= n; i ++){
		scanf("%d%d", &p[i].second, &p[i].first);
		p[i].first = -p[i].first;
	}
	sort(p + 1, p + n + 1);
	scanf("%d", &m);
	for(int i = 1; i <= m; i ++){
		scanf("%d", &q[i].v);
		q[i].id = i;
		q[i].ans = 0;
	}
	
	rebuild();
	for(int i = 1; i <= n; i ++){
		int tmp = p[i].second;
		int sz = block.size();
		for(int j = 0; j < sz; j ++){
			if(q[block[j].l].v + block[j].delta >= tmp){
				block[j].delta -= tmp;
				block[j].cnt ++;
			}
			else{
				if(q[block[j].r].v + block[j].delta >= tmp){
					int pos = lower_bound(q + block[j].l, q + block[j].r + 1, tmp - block[j].delta) - q;
					block.push_back(Interval(pos, block[j].r, block[j].delta - tmp, block[j].cnt + 1));
					block[j].r = pos - 1;
				}
			}
		}
		if(block.size() >= 450) rebuild();
	}
	
	
	for(int i = 0; i < block.size(); i ++){
		for(int j = block[i].l; j <= block[i].r; j ++){
			q[j].ans += block[i].cnt;
			q[j].v += block[i].delta;
		}
	}
	
	sort(q + 1, q + m + 1, cmp);
	for(int i = 1; i <= m; i ++){
		printf("%d ", q[i].ans);
	}
	return 0;
}