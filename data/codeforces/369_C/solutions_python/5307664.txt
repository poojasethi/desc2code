__author__ = 'Shailesh'

n = int(raw_input())

heights = [0 for i in xrange(n + 1)]
heights[1] = [1]
reverse = []
links = [[] for i in xrange(n + 1)]
damaged = 0
for i in xrange(n - 1):
    x, y, t = map(int, raw_input().split())
    if t == 2:
        damaged += 1
        links[x].append([y, True])
        links[y].append([x, True])
    else:
        links[x].append([y, False])
        links[y].append([x, False])

marked = [False for i in xrange(n + 1)]
city = 1
child = [city, 1]
queue = [child]
marked[1] = True
index = 0
while index < n:
    node = queue[index]
    city, t = node
    for child in links[city]:
        if not marked[child[0]]:
            marked[child[0]] = True
            queue.append(child)
            ls = child + [city]
            if child[1]:
                reverse.append(ls)
            heights[child[0]] = ls
    index += 1

size = 0
nodes = []
visited = [False for i in xrange(n + 1)]
visited[1] = True
for i in xrange(len(reverse) - 1, -1, -1):
    node = reverse[i]
    if visited[node[0]]:
        continue
    size += 1
    nodes.append(node[0])
    while not visited[node[0]]:
        visited[node[0]] = True
        if node[1]:
            node[1] = 1
            damaged -= 1
        if damaged == 0:
            break
        node = heights[node[2]]

print size
print " ".join(map(str, nodes))


