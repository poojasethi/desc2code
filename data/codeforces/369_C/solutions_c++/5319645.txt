#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;

const int maxn = 110000;
int n, gao[maxn], dp[maxn];
vector<pair<int, int> > ve[maxn];

void dfs(int u, int p)
{
	for(int i=0; i<ve[u].size(); i++)
	{
		int v = ve[u][i].first, w = ve[u][i].second;
		if(v == p) continue;
		dfs(v, u);
		if(w == 2)
		{
			if(dp[v] == 0)
				gao[v] = 1;
			dp[u] += max(1, dp[v]);
		}
		else
			dp[u] += dp[v];
	}
}

int main()
{
	cin >> n;
	for(int i=1; i<n; i++)
	{
		int u, v, w;
		cin >> u >> v >> w;
		ve[u].push_back(make_pair(v, w));
		ve[v].push_back(make_pair(u, w));
	}
	dfs(1, 0);
	cout<<dp[1]<<endl;
	for(int i=1; i<=n; i++)
		if(gao[i])
			cout<<i<<endl;
	return 0;
}
