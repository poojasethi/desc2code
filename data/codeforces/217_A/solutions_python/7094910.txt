from sys import stdin

def read_int():
	return int(stdin.readline().split()[0])
def read_ints():
	return [int(x) for x in stdin.readline().split()]

def merge(networks, net1, net2):
	if net1 == net2: return
	row_set, col_set = networks[net1]
	rs2, cs2 = networks[net2]
	row_set |= rs2
	col_set |= cs2
	networks.pop(net2)

def solve(drifts):
	networks = []
	for r, c in drifts:
		row_net, col_net = None, None
		for network in range(len(networks)):
			row_set, col_set = networks[network]
			if r in row_set:
				row_net = network
			if c in col_set:
				col_net = network
		if row_net is not None and col_net is not None:
			merge(networks, row_net, col_net)
		elif row_net is not None:
			networks[row_net][1].add(c)
		elif col_net is not None:
			networks[col_net][0].add(r)
		else:
			networks.append((set([r]), set([c])))
	return len(networks) - 1

n = read_int()
drifts = []
for _ in range(n):
	drifts.append(read_ints())

print solve(drifts)
