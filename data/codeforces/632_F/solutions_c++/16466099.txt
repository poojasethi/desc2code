#include <bits/stdc++.h>
using namespace std;
#define LL long long
int N,l,r,pt;
int st[2510],ne[5010],go[5010],w[5010];
int a[2510][2510];
int dist[2510],q[2510],f[2510];
class rec{
	public:
	int x,y,w;
}P[7000010];
bool cmp(const rec &A,const rec &B){return A.w<B.w;}
void Add(int x,int y,int ww){ne[++pt]=st[x];st[x]=pt;go[pt]=y;w[pt]=ww;}
int findset(int x){
	if (f[x]==x)return x;
	return f[x]=findset(f[x]);
}
int main(){
	scanf("%d",&N);
	for (int i=1;i<=N;i++)
		for (int j=1;j<=N;j++){
			P[(i-1)*N+j].x=i;
			P[(i-1)*N+j].y=j;
			scanf("%d",&a[i][j]);
			P[(i-1)*N+j].w=a[i][j];
		}
	for (int i=1;i<=N;i++)
		for (int j=1;j<=N;j++)
			if (a[i][j]!=a[j][i]||(i==j&&a[i][j])){
				printf("NOT MAGIC\n");
				return 0;
			}
	sort(P+1,P+N*N+1,cmp);
	for (int i=1;i<=N;i++)f[i]=i;
	for (int i=1;i<=N*N;i++)
		if (findset(P[i].x)!=findset(P[i].y)){
			Add(P[i].x,P[i].y,P[i].w);
			Add(P[i].y,P[i].x,P[i].w);
			f[findset(P[i].x)]=findset(P[i].y);
		}
	for (int i=1;i<=N;i++){
		memset(dist,255,sizeof(dist));
		q[l=r=1]=i;dist[i]=0;
		for (;l<=r;l++){
			int x=q[l];
			for (int j=st[x];j;j=ne[j])
				if (dist[go[j]]==-1){
					dist[go[j]]=max(dist[x],w[j]);
					q[++r]=go[j];
				}
		}
		for (int j=1;j<=N;j++)
			if (a[i][j]!=dist[j]){
				printf("NOT MAGIC\n");
				return 0;
			}
	}
	printf("MAGIC\n");
	return 0;
}