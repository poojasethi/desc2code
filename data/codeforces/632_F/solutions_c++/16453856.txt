#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 2511;

int n, arr[N][N], root[N];
vector< pair< int, pii > > all;

int findset(int x) { return root[x] = root[x] == x ? x : findset(root[x]); }

int main() {

	scanf("%d", &n);

	FOR(i, 1, n)
		FOR(j, 1, n) {
			scanf("%d", &arr[i][j]);
			if(i == j) {
				if(arr[i][j]) {
					cout << "NOT MAGIC\n";
					return 0;
				}
			}
			else 
				all.pb(mp(arr[i][j], mp(i, j)));
		}

	FOR(i, 1, n)
		FOR(j, 1, n)
			if(arr[i][j] != arr[j][i]) {
				cout << "NOT MAGIC\n";
				return 0;
			}

	FOR(i, 1, n) root[i] = i;

	sort(all.begin(), all.end());
	
	FOR(i, 0, (int) all.size() - 1) {
		int j = i;
		int t = all[i].st;
		while(j < all.size()) {
			if(all[j].st != t) break;
			if(findset(all[j].nd.st) == findset(all[j].nd.nd)) {
				cout << "NOT MAGIC\n";
				return 0;
			} j++;
		}
		j = i;
		while(j < all.size()) {
			if(all[j].st != t) break;
			root[findset(all[j].nd.st)] = findset(all[j].nd.nd);
			j++;
		}
		i = j - 1;
	}

	cout << "MAGIC\n";

	return 0;
}
