#include<cstdio>
#include<bitset>
#include<algorithm>
using namespace std;
const int maxn = 2600;
int n;
int map[maxn][maxn];
bitset<maxn>b[maxn];

struct node
{
	int x, y;
	int w;
	
}a[maxn*maxn];

bool cmp(node a, node b)
{
	return a.w < b.w;
}

int main()
{
	scanf("%d", &n);
	bool flag = true;
	int cnt = 0;
	for(int i = 1;i<=n;i++)
	{
		for(int j = 1;j<=n;j++)
		{
			scanf("%d", &map[i][j]);
			if(i == j && map[i][j] != 0)
				flag = false;
			a[cnt].x = i, a[cnt].y = j;
			a[cnt].w = map[i][j];
			cnt++;
		}		
	}
	if(!flag)
	{
		printf("NOT MAGIC\n");
		return 0;
	}
	for(int i = 1;i<=n;i++)
	{
		for(int j = 1;j<=n;j++)
		{
			if(map[i][j] != map[j][i])
			{
				printf("NOT MAGIC\n");
				return 0;
			}
		}
	}
	sort(a, a+cnt, cmp);
	int t = 0;
	for(int i = 0;i<cnt;i++)
	{
		int x = a[i].x, y = a[i].y;
		while(t < cnt && a[t].w < a[i].w)
		{
			b[a[t].x][a[t].y] = 1;
			b[a[t].y][a[t].x] = 1;
			t++;
		}
		if((b[x] & b[y]).any())
		{
			printf("NOT MAGIC\n");
			return 0;
		}
	}
	printf("MAGIC\n");
	return 0;
}
  								 	  	 	 	 						 		