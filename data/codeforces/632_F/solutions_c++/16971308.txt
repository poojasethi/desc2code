#include <bits/stdc++.h>

#define fi first
#define se second
#define mm ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)
#define inf 1000000009
#define max3(a,b,c) max((a),max((b),(c)))
#define bit(k) (1ll<<(k))
#define fbit(k,i) ((k) & (bit(i)))
#define count(a) __builtin_popcount(a)
#define pq priority_queue
#define all(v) v.begin(),v.end()
#define type(x) __typeof(x.begin())
#define foreach(v,it) for(type(v) it=v.begin(); it!=v.end();it++)

using namespace std;

typedef double db;
typedef long long lint;
typedef pair <int,int> ii;
typedef pair <int,ii> iii;
typedef vector <int> vi;
typedef vector <ii> vii;

const int maxn=2525;

int N,P[maxn],ar[maxn][maxn];
vector <iii> v;

void NO(){
	puts("NOT MAGIC");
	exit(0);
}

int findset(int a){
	if(P[a]==a) return a;
	return P[a]=findset(P[a]);
}

void merge(int a,int b){
	P[findset(a)]=findset(b);
}

int main(){
	cin >> N;
	
	for(int i=1;i<=N;i++){
		P[i]=i;
		for(int j=1;j<=N;j++){
			scanf("%d",&ar[i][j]);
			if(i!=j)
				v.push_back(iii(ar[i][j],ii(i,j)));
		}
	}
	
	for(int i=1;i<=N;i++)
		for(int j=1;j<=N;j++){
			if(i==j && ar[i][j])
				NO();
			
			if(ar[i][j]!=ar[j][i])
				NO();
		}

	sort(all(v));
	
	for(int i=0,j=0;i<v.size();i=j){
		while(j<v.size() && v[j].fi==v[i].fi) j++;
		
		for(int k=i;k<j;k++)
			if(findset(v[k].se.fi) == findset(v[k].se.se))
				NO();
		
		for(int k=i;k<j;k++)
			merge(v[k].se.fi,v[k].se.se);
	}
	
	puts("MAGIC");
	
	return 0;
}
