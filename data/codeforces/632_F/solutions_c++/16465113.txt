#include <cstdio>
#include <queue>
#include <vector>
using namespace std;
int a[2510][2510];
bool b[2510][2510];
bool bf[2510];
int n;
vector <int> E[2510];

struct cp
{
    int x,y,z;
    cp(){}
    cp(int X,int Y, int Z):x(X),y(Y),z(Z){}
};

class comp_class
{
    public:

    bool operator() (const cp& x, const cp& y) const
    {
        return x.z > y.z;
    }
};

priority_queue <cp, vector<cp>, comp_class> H;


void prim()
{
    for (int j = 2;j <= n;j++)
        H.push(cp(1,j,a[1][j]));
    bf[1] = true;

    for (int i = 1;i < n;i++)
    {
        while (bf[H.top().y] == true) H.pop();

        cp ax = H.top();
        H.pop();
        bf[ax.y] = true;
        E[ax.x].push_back(ax.y);
        E[ax.y].push_back(ax.x);
        for (int j = 1; j <= n;j ++)
            if (bf[j] == false)
            {
                H.push(cp(ax.y,j,a[ax.y][j]));
            }
    }
}
bool ok =true;

void dfs(int t,int x, int mx)
{
    b[t][x] = true;
    if (!ok) return;
    if (mx != a[t][x])
    {
        printf("NOT MAGIC");
        ok = false;
        return;
    }
    for (int i = 0;i<E[x].size();i++)
        if (b[t][E[x][i]] == false && t!=E[x][i])
        {
            int mx2 = max(mx, a[x][E[x][i]]);
            dfs(t,E[x][i],mx2);
        }
}

int main()
{
    //freopen("input.txt","r",stdin);

    scanf("%d",&n);

    for (int i = 1;i <= n;i++)
        for (int j = 1;j <= n;j++)
            scanf("%d",&a[i][j]);

    for (int i = 1;i <= n;i++)
    {
        if (a[i][i] != 0)
        {
            printf("NOT MAGIC");
            return 0;
        }
        for (int j = 1;j <= i;j++)
            if (a[i][j] != a[j][i])
            {
                printf("NOT MAGIC");
                return 0;
            }
    }

    prim();
    for (int i = 1;i <= n && ok;i++)
        dfs(i,i,0);
    if (ok)
        printf("MAGIC");

    return 0;
}

