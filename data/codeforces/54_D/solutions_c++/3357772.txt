#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

int fail[205];
int n, k, l;
char p[205], s[205], ret[205];
int lcp[205][26];
bool vis[205][205];

void kmp()
{
    fail[0] = -1;
    int o = -1;
    l = strlen(p);
    for (int i = 1; i < l; i++) {
        while (o != -1 && p[o+1] != p[i]) o = fail[o];
        if (p[o+1] == p[i]) o++;
        fail[i] = o;
    }
//    for (int i = 1; i < l; i++) printf("fail[%d] = %d\n", i, fail[i]);
    for (int i = 0; i <= l; i++) {
        for (int j = 0; j < k; j++) {
            o = i-1;
            while (o != -1 && p[o+1] != j+'a') o = fail[o];
            if (p[o+1] == j+'a') o++;
            lcp[i][j] = o+1;
        }
    }
}

bool dp(int pos, int pref)
{
    if (pos >= l) {
        if (s[pos-l] == '1' && pref != l) return false;
        if (s[pos-l] == '0' && pref == l) return false;
    }
    if (pos == n) return true;
    if (vis[pos][pref]) return false;
    for (int j = 0; j < k; j++) {
        if (dp(pos+1, lcp[pref][j])) {
            ret[pos] = j+'a';
            return true;
        }
    }
    vis[pos][pref] = true;
    return false;
}
int main()
{
    scanf("%d%d%s%s", &n, &k, p, s);
    kmp();
    memset(vis, false, sizeof(vis));
    if (dp(0, 0)) {
        ret[n] = '\0';
        printf("%s\n", ret);
    } else {
        printf("No solution\n");
    }
    return 0;
}

 		  					  	  		   		   	