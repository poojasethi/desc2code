#include <iostream>
#include <string>
#include <vector>
#include <memory.h>

using namespace std;


int N, K;
string name;
int end[101];

int pref[101][26];

int get_prefix(const string& s) {
  for (int k=min(s.size(), name.size()); k > 0; k--) {
    bool good = true;
    for (int i=0; i < k && good; i++)
      if (name[i] != s[s.size() - k + i])
        good = false;
    if (good)
      return k;
  }
  return 0;
}

string d[101][101];

int main() {
  cin >> N >> K >> name;

  string s;
  cin >> s;

  memset(end, 0, sizeof(end));
  for (int i=0; i < s.size(); i++)
    end[i+name.size()-1] = s[i] == '1';


  for (int p=0; p <= name.size(); p++)
    for (int c=0; c < K; c++)
      pref[p][c] = get_prefix(name.substr(0, p) + (char)(c + 'a'));


  for (int i=0; i < N; i++) {
    for (int j=0; j <= name.size(); j++) {
      if (d[i][j].size() || i == 0 && j == 0) {
        for (int c=0; c < K; c++) {
          int p = pref[j][c];

          if (end[i] == (p == name.size()))
            d[i+1][p] = d[i][j] + (char)(c + 'a');
        }
      }
    }
  }

  for (int i=0; i <= name.size(); i++)
    if (d[N][i].size()) {
      cout << d[N][i] << endl;
      return 0;
    }

  cout << "No solution" << endl;
  return 0;
}
