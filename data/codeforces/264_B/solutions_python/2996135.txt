import math

N = 100000

n = int(raw_input())
X = [int(x) for x in raw_input().split()]

if X[0] == 1:
    X.pop(0)

if not X:
    print 1
    exit(0)

prime = [True] * (N + 1)
primes = []

for i in range(2, int(math.sqrt(N) + 1)):
    if prime[i]:
        for j in range(i * i, N + 1, i):
            prime[j] = False
        primes.append(i)

positions = {} # map number to bucket to location
buckets = {} # map prime to list of multiples
for x in X:
    c = x
    for p in primes:
        if prime[c]:
            buckets.setdefault(c, []).append(x)
            positions.setdefault(x, {})[c] = len(buckets[c])
            break
        if c % p == 0:
            buckets.setdefault(p, []).append(x)
            positions.setdefault(x, {})[p] = len(buckets[p])
            while c % p == 0:
                c /= p
        if c == 1:
            break

dp = [-1] * (N + 1)
def solve(x):
    if dp[x] != -1:
        return dp[x]

    res = 0
    for bucket, position in positions[x].iteritems():
        if position < len(buckets[bucket]):
            res = max(res, solve(buckets[bucket][position]))
    res += 1
    dp[x] = res
    return res

res = 0
for x in X:
    res = max(res, solve(x))

print res

