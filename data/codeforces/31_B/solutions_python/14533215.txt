from math import *
from Queue import *



s = raw_input()
at = [-2]
for i in range(len(s)):
    if s[i] == '@':
        at.append(i)
at.append(i+2)
diff = []
sol = True
for i in range(1, len(at)):
    diff.append(at[i]-at[i-1])
    if diff[-1] <= 2:
        sol = False
if len(diff) < 2:
    sol = False
if not sol:
    print('No solution')
else:
    ans = []
    br = [0]
    for i in range(1,len(at)-2):
        br.append(at[i] + 2)
    br.append(len(s))
    for i in range(len(br)-1):
        ans.append(s[br[i]:br[i+1]])
    print(','.join(ans))



"""l = map(int, raw_input().split())
n, m, k = l[0], l[1], l[2]

marked = [[True for j in range(m+1)] for i in range(n+1)]
nbr = [[[] for j in range(m+1)] for i in range(n+1)]
pictures = [0]
com = [[0 for j in range(m+1)] for i in range(n+1)]


M = []
for i in range(n):    
    M.append(raw_input())
for i in range(n):
    for j in range(m):
        if M[i][j] == '.':
            marked[i][j] = False
            for di in [(1,0), (-1,0), (0,1), (0,-1)]:
                if M[i+di[0]][j+di[1]] == '.':
                    nbr[i][j].append([di[0],di[1]])
c = 0
for i in range(n):
    for j in range(m):
        if not marked[i][j]:
            marked[i][j] = True
            c += 1
            com[i][j] = c
            pictures.append(0)
            Q = [(i,j)]
            while len(Q)>0:
                v = Q.pop()
                pictures[c] += 4 - len(nbr[v[0]][v[1]])
                for nr in nbr[v[0]][v[1]]:
                    if not marked[v[0]+nr[0]][v[1]+nr[1]]:
                        marked[v[0]+nr[0]][v[1]+nr[1]] = True
                        Q.append((v[0]+nr[0],v[1]+nr[1]))
                        com[v[0]+nr[0]][v[1]+nr[1]] = c
positions = []
for i in range(k):
    l = map(int, raw_input().split())
    positions.append([l[0]-1, l[1]-1])
for i in range(k):
    print(pictures[com[positions[i][0]][positions[i][1]]])"""



"""c = [[[1000000 for k in range(61)] for m in range(31)] for n in range(31)]
for n in range(31):
    for m in range(31):
        c[n][m][0] = 0
        c[n][m][n+m] = 0
for n in range(31):
    for k in range(n+1):
        c[n][1][k] = 1
        c[1][n][k] = 1
for n in range(2,31):
    for m in range(2,31):
        for k in range(min(n*m,50)):
            l = [1000000]
            for i in range(1,n):
                for t in range(k+1):
                    l.append(c[i][m][t]+c[n-i][m][k-t])
            for j in range(1,m):
                for t in range(k+1):
                    l.append(c[n][j][t]+c[n][m-j][k-t])
            c[n][m][k] = min(l)
print(c[2][2][1])"""
                    
