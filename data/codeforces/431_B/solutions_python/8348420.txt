
def cal():
	return buf[L[0]][L[1]] + buf[L[1]][L[0]]\
			+ 2*buf[L[2]][L[3]] + 2*buf[L[3]][L[2]]\
			+ buf[L[1]][L[2]] + buf[L[2]][L[1]]\
			+ 2*buf[L[4]][L[3]] + 2*buf[L[3]][L[4]]
	# return ret
	
def dfs():
	global buf, L, maxx
	if len(L)==5:
		tmp = cal()
		if tmp > maxx:
			maxx = tmp
		return
	for i in range(5):
		if i not in L:
			L.append(i)
			dfs()
			L.pop(-1)

maxx = -1
buf = []
L = []				
for i in range(5):
	buf.append([int(item) for item in raw_input().split()])
dfs()
print maxx