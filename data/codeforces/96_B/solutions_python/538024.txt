#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import sys
from operator import getitem
from bisect import bisect_left
input = sys.stdin
output = sys.stdout
import itertools

def digits_reversed(n):
    if n<0:
        n = -n
    D = []
    while True:
        n,m = divmod(n,10)
        D.append(m)
        if n==0:
            break
    return D

def digits_reversed_to_number(digits):
    n = 0
    p = 1
    for d in digits:
        n += d*p
        p *= 10
    return n

def make_simple_happy_number(n):
    assert n%2 == 0
    m = n/2
    D = [7] * m
    D.extend([4] * m)
    return digits_reversed_to_number(D)

def solve(n):
    #print n
    D = digits_reversed(n)
    Do = list(D)
    nd = len(D)
    if nd % 2 != 0:
        return make_simple_happy_number(nd+1)
    else:
        m = nd/2
        D = [7] * m
        D.extend([4] * m)
        A = []
        for t in itertools.product([4,7], repeat=nd):
            if len(filter(lambda d: d==4, t)) == nd/2:
                nn = digits_reversed_to_number(t)
                A.append(nn)
        A = sorted(A)
        pos = bisect_left(A, n)
        if pos < len(A):
            return A[pos]
        return make_simple_happy_number(nd+2)

n = int(input.readline())
assert 1<=n and n<=10**9

m = solve(n)
output.write('%s\n' % str(m))
