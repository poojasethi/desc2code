#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

typedef long long LL;

LL vertex[8][3];

void printVertice() {
	for (int i = 0; i < 8; ++i) {
		for (int j = 0; j < 3; ++j) {
			cout << vertex[i][j];
			if (j != 2) cout << " ";
		}
		cout << endl;
	}
}

inline LL sqr(const LL& d) {
	return d * d;
}

bool check() {
	vector<LL> chk;
	chk.reserve(28);
	
	for (int i = 0; i < 8; ++i) {
		for (int j = i+1; j < 8; ++j) {
			chk.push_back(sqr(vertex[i][0] - vertex[j][0]) + sqr(vertex[i][1] - vertex[j][1]) + sqr(vertex[i][2] - vertex[j][2]));	
		}
	}
	
	sort(chk.begin(), chk.end());
	if (chk[12] != 2 * chk[0]) return false;
	if (chk[24] != 3 * chk[0]) return false;
	if (chk[0] != chk[11]) return false;
	if (chk[0] == chk[12]) return false;
	if (chk[12] != chk[23]) return false;
	if (chk[12] == chk[24]) return false;
	if (chk[27] != chk[24]) return false;
	return true;
}

void solve(const int& v) {
	if (v == 8) {
		if (check()) {
			cout << "YES" << endl;
			printVertice();
			exit(0);
		}
		return;
	}
	do {
		solve(v+1);
	} while (next_permutation(vertex[v], vertex[v]+3));
}

int main() {
	for (int i = 0; i < 8; ++i) {
		for (int j = 0; j < 3; ++j) {
			cin >> vertex[i][j];
		}
		sort(vertex[i], vertex[i]+3);
	}

	solve(1);
	cout << "NO" << endl;

	return 0;
}