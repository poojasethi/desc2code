#include <stdio.h>
#include <algorithm>
#include <vector>
#include <map>
#include <string.h>
#include <iostream>

typedef long long lld;

int A[8][3];

lld sqr(lld x) { return x * x; }

lld getDis(int a,int b) {
	return sqr(A[a][0]-A[b][0]) + sqr(A[a][1]-A[b][1]) + sqr(A[a][2]-A[b][2]);
}

bool check() {
	std::map<lld,int> map;
	for (int i = 0; i < 8; ++ i) {
		for (int j = i+1; j < 8; ++ j) {
			map[getDis(i,j)] ++;
		}
	}
	if (map.size() != 3) {
		return false;
	}
	lld v[3];
	int cnt = 0,d[3] = {12,12,4};
	for (std::map<lld,int>::iterator it = map.begin(); it != map.end(); ++ it) {
		v[cnt++] = it->first;
		if (it->second != d[cnt-1]) return false;
	}
	if (v[0] == 0) return false;
	if (v[0]*2 != v[1]) return false;
	if (v[0]*3 != v[2]) return false;
}

bool dfs(int p) {
	if (p == 8) {
		return check();
	}
	std::sort(A[p],A[p]+3);
	do {
		if (dfs(p+1)) return true;
	} while (std::next_permutation(A[p],A[p]+3));
	return false;
}

int main() {
	for (int i = 0; i < 8; ++ i) {
		for (int j = 0; j < 3; ++ j) {
			scanf("%d",&A[i][j]);
		}
	}
	if (!dfs(1)) {
		puts("NO");
	} else {
		puts("YES");
		for (int i = 0; i < 8; ++ i) {
			for (int j = 0; j < 3; ++ j) {
				printf("%d%c",A[i][j]," \n"[j==2]);
			}
		}
	}
	return 0;
}