#!/usr/bin/python
#encoding=utf-8

import sys
def readlines():
    return sys.stdin.readline().strip()
    
def js(x, y, xx, yy):
    return (2 * x + 3 * y - 2 * xx - 3 * yy, 2 * x + 3 * y, 2 * xx + 3 * yy)
def solve(team, first, second, n, m):
    def real_solve(i, f_pos, s_pos):
        while f_pos < n and team[i] >= first[f_pos]:
            f_pos += 1
        while s_pos < m and team[i] >= second[s_pos]:
            s_pos += 1
        return js(f_pos, n - f_pos, s_pos, m - s_pos), f_pos, s_pos
    return real_solve

n = int(raw_input())
first = readlines()
first = [int(v) for v in first.split()]
first.sort()

m = int(raw_input())
second = readlines()
second = [int(v) for v in second.split()]
second.sort()

team = sorted(first + second)
team.insert(0, team[0] -1)
team.append(team[-1] + 1)

my_solve = solve(team, first, second, n, m)
result = (-10000000, -10000000, -10000000)
s_pos = f_pos = 0

for i in xrange(0, n + m + 2):
    if i != n + m + 1 and team[i] == team[i+1]:
        continue
    re, f_pos, s_pos = my_solve(i, f_pos, s_pos)
    result = max(re, result)
    # while f_pos < n and team[i] >= first[f_pos]:
    #     f_pos += 1
    # while s_pos < m and team[i] >= second[s_pos]:
    #     s_pos += 1
    # re = js(f_pos, n - f_pos, s_pos, m - s_pos)
    # result = max(re, result)

print str(result[1]) + ":" + str(result[2])


