from _bisect import bisect_right
import sys

f_throws = []
s_throws = []
dists = set()


def read_throws(thr):
    raw_input()
    thr.extend(map(int, raw_input().split(' ')))
    [dists.add(thr[i]) for i in xrange(0, len(thr))]
    thr.sort()


read_throws(f_throws)
read_throws(s_throws)

dists.add(0)
sorted_dists = list(dists)
sorted_dists.sort()

scores = [0, sys.maxint]

for d in sorted_dists:
    fi = bisect_right(f_throws, d)
    si = bisect_right(s_throws, d)
    f_score = fi * 2 + (len(f_throws) - fi) * 3
    s_score = si * 2 + (len(s_throws) - si) * 3
    #print 'd:', d, 'fi:', fi, 'si:', si, f_score, s_score
    if f_score - s_score > scores[0] - scores[1]:
        scores[0] = f_score
        scores[1] = s_score
    if si == len(s_throws):
        break

print str(scores[0]) + ':' + str(scores[1])