#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#define N 100000

using namespace std;

int prime[N], cnt[N], pow10[5], m;

void perTreat()
{
	bool isprime[N];
	for(int i = 2; i < N; ++i) {
		isprime[i] = true;
	}
	for(int i = 2; i * i < N; ++i) {
		if(isprime[i]) {
			for(int j = i * i; j < N; j += i) {
				isprime[j] = false;
			}
		}
	}
	pow10[0] = 1;
	for(int i = 1; i < 5; ++i) {
		pow10[i] = pow10[i - 1] * 10;
	}
	for(int i = 2, temp; i < N; ++i) {
		if(isprime[i]) {
			prime[m++] = temp = i;
			for(int j = 0; j < 5; ++j, temp /= 10) {
				++cnt[temp * pow10[j]];
			}
		}
	}
}

void DFS(int k, int bits[5], int &ans) {
	if(k == 0) {
		ans += cnt[bits[0] * 10];
		return;
	}
	int begin = bits[k] * pow10[k + 1], end = (bits[k] + 1) * pow10[k + 1];
	int pos = lower_bound(prime, prime + m, begin) - prime;
	for(int i = 0; i + pos < m && prime[i + pos] < end; ++i) {
		int p = prime[i + pos];
		bool has = true;
		for(int j = 0; j < k; ++j, p /= 10) {
			bits[j] = bits[j] * 10 + p % 10;
			has = has && cnt[bits[j] * pow10[k]];
		}
		if(has) {
			DFS(k - 1, bits, ans);
		}
		for(int j = 0; j < k; ++j) {
			bits[j] /= 10;
		}
	}
}

int solve(int n) {
	int bits[5] = {0}, k = 0;
	while(n) {
		bits[k++] = n % 10;
		n /= 10;
	}
	int ans = 0;
	DFS(k - 2, bits, ans);
	return ans;
}

int main()
{
	int t, n;
	perTreat();
	cin >> t;
	while(t --) {
		cin >> n;
		cout << solve(n) << endl;
	}
	return 0;
}
