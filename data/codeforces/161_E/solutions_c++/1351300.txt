#include<iostream>
#include<string>
#include<map>
using namespace std;
map<string,int> Map;
int n;
bool f[6][16*16*16*16*16+123];
const int p10[7]={1,10,100,1000,10000,100000};
bool isprime(int x){
	for(int i=2; i*i<=x; i++)
		if(x%i==0)return false;
	return true;
}
int ans;
int a[5];
void dfs(int x,int y){
	if(x==0){
		if(y==1)ans++;else
			dfs(y-1,y-1);
		return;
	}
	a[x]-=(10<<((n-1-y)*4));
	if(y!=x)a[y]-=(10<<((n-1-x)*4));
	for(int i=0; i<10; i++){
		if(f[n][a[x]] && f[n][a[y]])
			dfs(x-1,y);
		a[x]+=1<<((n-1-y)*4);
		if(y!=x)a[y]+=1<<((n-1-x)*4);
	}
}
int main(){
	int _;
	string s;
	int dig[9];
	for(int x=2; x<100000; x++)
		if(isprime(x)){
			for(int i=0; i<5; i++)
				dig[i]=x/p10[i]%10;
			for(int k=2; k<=5; k++)if(x<p10[k]){
				for(int mask=0; mask<(1<<k); mask++){
					int tmp=0;
					for(int j=k-1; j>=0; j--)
						if(mask&(1<<j))
							tmp=(tmp<<4)+dig[j];
						else
							tmp=(tmp<<4)+10;
					f[k][tmp]=true;
				}
			}
		}
	for(cin>>_; _--;){
		cin>>s;
		if(Map.find(s)!=Map.end()){
			cout<<Map[s]<<endl;
			continue;
		}
		n=s.length();
		for(int i=0; i<n; i++){
			a[i]=0;
			for(int j=0; j<n; j++)
				if(i==0)
					a[i]=a[i]*16+s[j]-'0';
				else
				if(j==0)
					a[i]=a[i]*16+s[i]-'0';
				else
					a[i]=a[i]*16+10;
		}
		ans=0;
		dfs(n-1,n-1);
		cout<<ans<<endl;
		Map[s]=ans;
	}
	return 0;
}
