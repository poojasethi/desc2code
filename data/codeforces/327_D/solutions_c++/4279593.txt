#include <iostream>
#include <sstream>
using namespace std;
#define rep(i,n) for(int _n=n,i=0;i<_n;++i)
char grid[500][501];
int n, m, moves[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}, nc, nr, res;
stringstream solution;

void dfs(int r, int c, bool first = false) {
  res += 1;
  solution << "B " << r + 1 << ' ' << c + 1 << endl;
  grid[r][c] = '#';
  rep(i, 4) {
    nr = r + moves[i][0];
    nc = c + moves[i][1];
    if (nr < 0 || nr >= n) continue;
    if (nc < 0 || nc >= m) continue;
    if (grid[nr][nc] != '.') continue;
    dfs(nr, nc);
  }
  if (!first) {
    res += 2;
    solution << "D " << r + 1 << ' ' << c + 1 << endl;
    solution << "R " << r + 1 << ' ' << c + 1 << endl;
  }
}

int main() {
  cin >> n >> m;
  rep(i, n) cin >> grid[i];
  rep(i, n) rep(j, m)
    if (grid[i][j] == '.')
      dfs(i, j, true);
  cout << res << endl;
  cout << solution.str();
  return 0;
}
