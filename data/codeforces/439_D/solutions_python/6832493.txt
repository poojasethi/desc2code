#!/usr/bin/python

import sys
from math import *
from bisect import *

def prefixsum(c):
    prefixs = [c[0]]
    for _c in c[1:]:
        prefixs.append(_c + prefixs[-1])
    return prefixs

def Ni(): return tuple(map(int, sys.stdin.readline().split()))
def Nil(): return map(int, sys.stdin.readline().split())

n, m = Ni()
a = Nil()
b = Nil()

# Looking for min(a) >= max(b)

a.sort()
b.sort()

pa = prefixsum(a)
pb = prefixsum(b)

def acost(mx):
    """
    Find cost to increase a such that min(a) >= mx
    """
    k = bisect(a, mx)
    return 0 if k == 0 else mx * k - pa[k-1]

def bcost(mx):
    """
    Find cost to decrease b a such that max(b) <= mx
    """
    k = bisect(b, mx)
    if k == 0:
        costb = pb[-1] - mx * m
    elif k == m:
        costb = 0
    else:
        costb = pb[-1] - pb[k-1] - mx * (m - k)

    return costb

def ternarySearch(f, v, left, right):
    """
    Find index i such that f(v[i]) is minimal over convex array
    """
    while True:
        leftThird = left + (right - left) / 3
        rightThird = left + (right - left) * 2 / 3

        if right - left <= 2:
            return min((f(v[i]), v[i]) for i in range(left, right+1))
 
        if f(v[leftThird]) > f(v[rightThird]):
            left = leftThird
        else:
            right = rightThird

def objective(balance):
    return acost(balance) + bcost(balance)

c = a + b
c.sort()

f, v = ternarySearch(objective, c, 0, len(c) - 1)
print f

