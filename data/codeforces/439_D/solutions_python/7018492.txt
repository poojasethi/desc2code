from sys import stdin

def read_int():
    return [int(x) for x in stdin.readline().split()][0]
def read_ints():
    return [int(x) for x in stdin.readline().split()]
def char_list():
    return [c for c in stdin.readline()][:-1]
def toss():
    stdin.readline()
def list_to_dict(lst):
    dct = {}
    for elt in lst:
        if elt not in dct:
            dct[elt] = 0
        dct[elt] += 1
    return dct

toss()
a_list = read_ints()
b_list = read_ints()
a_dict = list_to_dict(a_list)
b_dict = list_to_dict(b_list)
all_numbers = sorted(list(set(a_list) | set(b_list)))
rall_numbers = list(reversed(all_numbers))

raise_cost = {}
cur_cost = 0
cur_increment = 0
for i in range(len(all_numbers)):
    k = all_numbers[i]
    raise_cost[k] = cur_cost
    if k in a_dict:
        cur_increment += a_dict[k]
    if i < len(all_numbers) - 1:
        cur_cost += cur_increment * (all_numbers[i + 1] - k)

drop_cost = {}
cur_cost = 0
cur_decrement = 0
for i in range(len(rall_numbers)):
    k = rall_numbers[i]
    drop_cost[k] = cur_cost
    if k in b_dict:
        cur_decrement += b_dict[k]
    if i < len(rall_numbers) - 1:
        cur_cost += cur_decrement * (k - rall_numbers[i + 1])

assert len(raise_cost) == len(drop_cost)
assert len(raise_cost) == len(all_numbers)

if min(a_list) >= max(b_list):
    print 0
else:
    cost = min(raise_cost[k] + drop_cost[k] for k in all_numbers)
    print cost
        
