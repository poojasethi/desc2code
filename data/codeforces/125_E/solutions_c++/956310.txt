#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <cstdlib>

#define LL long long
#define pb(x) push_back(x)
#define size(S) S.size()

using namespace std;

const int maxn=5010, maxm=100010;
int n, m, k, fa[maxn], res[maxn], cnt;
struct edge{int x, y, no; double w;} e[maxm], bak[maxm];

inline bool cmp(edge a, edge b){return a.w<b.w;}

inline int getanc(int x){return fa[x]<0?x:fa[x]=getanc(fa[x]);}

inline int kruskal(double M){
	for (int i=0; i<m; i++) if (e[i].x==1) e[i].w+=M;
	sort(e, e+m, cmp);

	memset(fa, 255, sizeof(fa));
	int all=0, ot=0; cnt=0;
	for (int i=0; i<m; i++){
		int x=getanc(e[i].x), y=getanc(e[i].y);
		if (x==y) continue;
		fa[x]=y; all++; 
		res[cnt++]=e[i].no;
		if (e[i].x==1) ot++;
		if (all==n-1) break;
	}
	return ot;
}

int main(){
	cin.sync_with_stdio(false);
	cin>>n>>m>>k;
	for (int i=0; i<m; i++){
		cin>>e[i].x>>e[i].y>>e[i].w;
		e[i].no=i+1; e[i].w+=1e-7*i;
		if (e[i].x>e[i].y) swap(e[i].x, e[i].y);
	}
	
	double L=-1e10, R=1e10; int ret;
	bool flag=false;
	memcpy(bak, e, sizeof(e));
	while (R-L>1e-8){
		double M=(L+R)/2;
		ret=kruskal(M);
		memcpy(e, bak, sizeof(e));
		if (ret<k) R=M;
		else if (ret>k) L=M;
		else{flag=true; break;}
	}

	if (!flag || ret!=k){
		cout<<-1<<endl;
		return 0;
	}
	cout<<n-1<<endl;
	for (int i=0; i<n-1; i++) cout<<res[i]<<' ';
	cout<<endl;
}
