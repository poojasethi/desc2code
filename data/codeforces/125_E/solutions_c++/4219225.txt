#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
struct edge
{	int a,b,pos;
	double w;
};
edge e[100005];
edge e1[100005];
int f[100005];
int ans[100005];
int n,m,k,i,now,a,b;
double l=-1e6,r=1e6,mid;
bool operator <(edge e,edge e1)
{	return e.w<e1.w;
}
int find(int x)
{	if (f[x]==0)
		return x;
	f[x]=find(f[x]);
	return f[x];
}
int kruskal()
{	int i,t=0,now=0;
	for (i=1;i<=m;++i)
	{	e1[i]=e[i];
		e1[i].a==1?e1[i].w+=mid:0;
	}
	memset(f,0,sizeof(f));
	sort(e1+1,e1+m+1);
	for (i=1;i<=m;++i)
	{	a=find(e1[i].a),b=find(e1[i].b);
		if (a!=b)
		{	ans[++t]=e1[i].pos;
			now+=e1[i].a==1;
			f[a]=b; 
		}
	}
	return now;
}
int main()
{	int i;
	scanf("%d%d%d",&n,&m,&k);
	for (i=1;i<=m;++i)
	{	scanf("%d%d%lf",&e[i].a,&e[i].b,&e[i].w);
		if (e[i].a>e[i].b)
			swap(e[i].a,e[i].b);
		e[i].pos=i; 
	}
	for (i=1;i<=100;++i)
	{	mid=(l+r)/2;
		now=kruskal();
		if (now==k)
			break;
		if (now<k)
			r=mid;
		else l=mid;
	}
	if (now==k)
	{	printf("%d\n",n-1);
		for (i=1;i<n;++i)
			printf("%d ",ans[i]);
	}
	else printf("-1\n");
	return 0;
}
 	    				 				 	   			 	