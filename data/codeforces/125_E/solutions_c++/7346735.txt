#include <bits/stdc++.h>
using namespace std;

typedef pair<int,int> pii;
#define FOR(i,a,b) for ( int i(a); i < int(b); ++i )
#define ALL(c) (c).begin(), (c).end()
#define pb push_back
#define mp make_pair
#define X first
#define Y second


const int MAX_N = 5000 + 20;
vector < pair< pair<double,int> , pii > > edge, nEdge;
int par[MAX_N];
int deg[MAX_N];
vector <int> seq;
int n, m, k;

int find( int v )
{ return par[v] = par[v] == v ? v : find( par[v] ) ; } 
int merge( int v, int u )
{
	v = find(v), u = find(u);
	par[u] = v;
	return v != u;
}

void solve( double val )
{
	FOR(i ,0,n)
		par[i] = i, deg[i] = 0;
	seq.clear();
	edge = nEdge;
	FOR(i,0,edge.size()) if ( edge[i].Y.X == 0 || edge[i].Y.Y == 0 )
		edge[i].X.X += val;
	sort( ALL(edge) );
	FOR(i,0, edge.size()){
		int v = edge[i].Y.X, u = edge[i].Y.Y;
		if ( merge(v, u) ){
			++deg[v] , deg[u]++;
			seq.pb( edge[i].X.Y );
		}
	}
}

int main()
{
	ios::sync_with_stdio(false);

	cin >> n >> m >> k;
	FOR(i ,0,m){
		int v, u;
		double w;
		cin >> v >> u >> w;
		--v , u--;
		nEdge.pb( mp( mp(w, i), mp(v, u) ) );
	}
	double st = -1e6, en = 1e6;
	FOR(loop, 0, 100){
		double mid = ( st + en ) /2;
		solve(mid);
		if ( deg[0] < k )
			en = mid;
		else
			st = mid;
	}
	solve(st);
	if ( deg[0] == k && seq.size() == n-1 ){
		cout << seq.size() << endl;
		FOR(i,0,seq.size())
			cout << seq[i] +1 << ' ';
	} else cout << -1;
	cout << endl;
	return 0;
}
