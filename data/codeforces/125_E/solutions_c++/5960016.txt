#include <cstdio>
#include <algorithm>
#define maxn 100005
using namespace std;

struct edge
{
	int x,y,p;
	double z;
	bool operator <(const edge&B) const {return z<B.z||(z==B.z&&x==1);}
} e[maxn];
int N,M,K,q[maxn],f[maxn];

int find(int x) {return x==f[x]?x:f[x]=find(f[x]);}

int calc(double d,bool bg)
{
	for (int i=1; i<=M; i++) if (e[i].x==1) e[i].z+=d;
	sort(e+1,e+M+1),q[0]=0;
	for (int i=1; i<=N; i++) f[i]=i;
	int s=0,t=0;
	for (int i=1,x,y; s<N-1&&i<=M; i++)
	{
		x=find(e[i].x),y=find(e[i].y);
		if (x!=y&&(bg||t+(e[i].x==1)<=K)) f[x]=y,s++,t+=(e[i].x==1),q[++q[0]]=e[i].p;
	}
	for (int i=1; i<=M; i++) if (e[i].x==1) e[i].z-=d;
	return s<N-1?1e9:t;
}

int main()
{
	scanf("%d%d%d",&N,&M,&K);
	double l=-1e6,r=1e6,m;
	for (int i=1; i<=M; i++)
	{
		scanf("%d%d%lf",&e[i].x,&e[i].y,&e[i].z),e[i].p=i;
		if (e[i].x>e[i].y) swap(e[i].x,e[i].y);
	}
	int ans;
	for (int i=1; i<=100; i++)
	{
		ans=calc(m=(l+r)/2,1);
		if (ans==K) goto BG; else if (ans<K) r=m; else l=m;
	}
	ans=calc(l,0);
	if (ans!=K) return puts("-1"),0;
	BG:printf("%d\n",q[0]);
	for (int i=1; i<=q[0]; i++) printf("%d ",q[i]);
}