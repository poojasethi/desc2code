#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstring>
#include <algorithm>
#define INF 999999999.0
using namespace std;
struct edge
{
	int x, y, v;
	double z;
	edge() {}
	edge(int x, int y, int v, double z) : x(x), y(y), v(v), z(z) {}
};
edge p[500001], e[500001];
int f[500001], stack[500001];
int n, m, k;
int getfa(int x) { return (!f[x]) ? x : (f[x] = getfa(f[x])); }
bool cmp(const edge& p1, const edge& p2) { return p1.z < p2.z; }
int Kruscal(double x)
{
	int ans = 0, top = 0;
	for (int i = 1; i <= m; i ++)
		p[i] = e[i], p[i].z += e[i].x == 1 ? x : 0;
	memset(f, 0, sizeof(f));
	sort(p + 1, p + 1 + m, cmp);
	for (int i = 1; i <= m; i ++)
	{
		int tmpx = getfa(p[i].x), tmpy = getfa(p[i].y);
		if (tmpx == tmpy) continue ;
		stack[++ top] = p[i].v;
		f[tmpx] = tmpy;
		if (p[i].x == 1) ++ ans;
	}
	return ans;
}
int main( )
{
	int beta = 0;
	double get = 0.0;
	scanf("%d %d %d", &n, &m, &k);
	for (int i = 1; i <= m; i ++)
	{
		scanf("%d %d %lf", &e[i].x, &e[i].y, &e[i].z);
		if (e[i].x > e[i].y) swap(e[i].x, e[i].y);
		e[i].v = i;
	}
	double l = -INF, r = INF;
	while (beta <= 500)
	{
		double mid = (l + r) / 2.0;
		int tmp = Kruscal(mid);
		if (tmp == k) { get = mid; break; }
		if (tmp < k) r = mid;
		else l = mid;
		beta ++;
	}
	if (Kruscal(get) == k) 
	{
		printf("%d\n", n - 1);
		for (int i = 1; i < n; i ++)
			printf("%d ", stack[i]);
		printf("\n");
	}
	else printf("-1\n");
	return 0;
}
 				  	 											