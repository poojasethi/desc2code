#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int t=100005;
const int v=5005;
struct edge{
	int a,b,d;
	double c;
} e[t];
bool p[t];
bool cmp(edge x,edge y){
	return x.c<y.c;
}
int si[v],fa[v];
int findfa(int a){
	return a==fa[a]?a:fa[a]=findfa(fa[a]);
}
bool merge(int a,int b){
	a=findfa(a),b=findfa(b);
	if (a!=b){
		if (si[a]>si[b]) swap(a,b);
		si[fa[a]=b]+=si[a];
		return true;
	} else return false;
}
int tree(int n,int m,double mid){
	int cnt=0,i;
	for (i=1;i<=n;i++) si[fa[i]=i]=1;
	for (i=0;i<m;i++){
		p[i]=false;
		if (e[i].a==1) e[i].c+=mid;
	}
	sort(e,e+m,cmp);
	for (i=0;i<m;i++) if (merge(e[i].a,e[i].b)){
		p[e[i].d]=true;
		if (e[i].a==1) cnt++;
	}
	for (i=0;i<m;i++) if (e[i].a==1) e[i].c-=mid;
	return cnt;
}
int main(){
//	freopen("125e.in","r",stdin);
//	freopen("125e.out","w",stdout);
	int n,m,k,i,cnt;
	double l,r,mid;
	scanf("%d%d%d",&n,&m,&k);
	for (i=1;i<=n;i++) si[fa[i]=i]=1;
	for (i=cnt=0;i<m;i++){
		scanf("%d%d%lf",&e[i].a,&e[i].b,&e[i].c);
		if (e[i].a>e[i].b) swap(e[i].a,e[i].b);
		e[i].d=i;
		e[i].c+=1e-6*i;
	}
	for (l=-(1e6),r=1e6,i=0;i<=50;i++){
		mid=(l+r)/2;
		cnt=tree(n,m,mid);
		if (cnt==k) break;
		if (cnt>k) l=mid; else r=mid;
	}
	cnt=tree(n,m,mid);
	if (cnt==k && si[findfa(1)]==n){
		printf("%d",n-1);
		for (cnt=i=0;i<m;i++) if (p[i]){
			printf(cnt?" %d":"\n%d",i+1);
			cnt=1;
		}
		puts("");
	} else puts("-1");
	return 0;
}
