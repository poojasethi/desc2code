#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
struct edge
{	int a,b,pos;
	double w;
};
edge e[100005];
edge e1[100005];
int res[100005];
int f[100005];
int n,m,k;
bool operator <(edge a,edge b)
{	return a.w<b.w;
}
int find(int x)
{	if (f[x]==0)
		return x;
	f[x]=find(f[x]);
	return f[x];
}
int kruskal(double x)
{	int i,fx,fy,c,s;
	c=s=0;
	for (i=1;i<=m;++i)
	{	e1[i]=e[i];
		if (e1[i].a==1)
			e1[i].w+=x;
	}
	memset(f,0,sizeof(f));
	sort(&e1[1],&e1[m+1]);
	for (i=1;i<=m;++i)
	{	fx=find(e1[i].a),fy=find(e1[i].b);
		if (fx!=fy)
		{	res[++c]=e1[i].pos;
			if (e1[i].a==1)
				++s;
			f[fx]=fy;
		}
	}
	return s;
}
void work()
{	int i,cur,cnt=0;
	double l,r,mid;
	l=-1e6,r=1e6;
	while (cnt<500)
	{	mid=(l+r)/2;
		cur=kruskal(mid);
		++cnt;
		if (cur==k)
			break;
		if (cur<k)
			r=mid;
		else l=mid;
	}
	if (cur==k)
	{	printf("%d\n",n-1);
		for (i=1;i<n;++i)
			printf("%d ",res[i]);
	}
	else printf("-1\n");
}
int main()
{	int i;
	scanf("%d%d%d",&n,&m,&k);
	for (i=1;i<=m;++i)
	{	scanf("%d%d%lf",&e[i].a,&e[i].b,&e[i].w);
		if (e[i].a>e[i].b)
			swap(e[i].a,e[i].b);
		e[i].pos=i; 
	}
	work();
	return 0;
}

			     			 	 	  		  			  	