#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;
#define M 100010
#define N 5010

struct Edge{
    int u,v,id;
    double w;
};

Edge e[M];
Edge e1[M];
int f[N];
int ans[M];
int n,m,k,i,cnt,u,v;
double mid;
bool operator <(const Edge& e,const Edge& e1)
{
    return e.w<e1.w;
}
int find(int x)
{
	if(x != f[x]) f[x] = find(f[x]);
	return f[x];
}
int kruskal()
{
    int i,t=0,now=0;
    for (i = 1; i <= m; i++){
        e1[i] = e[i];
        e1[i].u == 1 ? e1[i].w += mid : 0;
    }
    for(int i=1; i<=n;i++) f[i]=i;
    sort(e1 + 1, e1 + m + 1);
    for (i = 1; i <= m; i++){
        u = find(e1[i].u);
		v = find(e1[i].v);
        if(u != v){
            ans[++t]=e1[i].id;
            now+=e1[i].u==1;
            f[u]=v;
        }
    }
    return now;
}
int main()
{
    scanf("%d%d%d",&n, &m, &k);
    for (int i = 1; i <= m; i++){
        scanf("%d%d%lf", &e[i].u, &e[i].v, &e[i].w);
        if(e[i].u > e[i].v) swap(e[i].u, e[i].v);
        e[i].id = i;
    }

	double l=-1e6, r=1e6;
    while(l < r) {
        mid = (l + r) / 2;
        cnt = kruskal();
        if(cnt == k) break;
        if(cnt < k) r = mid;
        else l = mid;
    }
    if (cnt==k){
        printf("%d\n",n-1);
        for (int i = 1; i < n; i++)
            printf("%d ",ans[i]);
    }
    else{
		printf("-1\n");
	}
    return 0;
}