#include<cstdio>
#include<cstring>
#include<algorithm>
#define fo(i,a,b) for(i=a;i<=b;++i)
using namespace std;
const int mn=101000;
struct edge{int x,y,v,d;}a[mn],e[mn];
int n,m,D,i,j,L,lo,hi,mid;
int ans[mn],f[mn];
bool cmp(edge a,edge b){return a.v<b.v;}
int fat(int r)
{
    if(f[r]!=r)return f[r]=fat(f[r]);
    else return r;
}
int calc(int v)
{
    int res=0,i,x,y;
    memcpy(e+1,a+1,(m+1)*sizeof(edge));
    fo(i,1,m)if(e[i].x==1)e[i].v-=v;
    fo(i,1,n)f[i]=i;
    sort(e+1,e+1+m,cmp);
    L=0;
    fo(i,1,m)
    {
        x=fat(e[i].x),y=fat(e[i].y);
        if(x!=y)
        {
            if(e[i].x==1)++res;
            f[x]=y,ans[++L]=e[i].d;
            if(L==n-1)break;
        }
    }
    return res;
}
int main()
{
    scanf("%d%d%d",&n,&m,&D);
    fo(i,1,m)
    {
        scanf("%d%d%d",&a[i].x,&a[i].y,&a[i].v);
        a[i].v*=2;
        if(a[i].y==1)swap(a[i].x,a[i].y);
        a[i].d=i;
    }
    lo=-200000,hi=1000000;
    while(hi)
    {
        mid=lo+hi/2;
        if(calc(mid)<D)lo=mid+1;
        hi/=2;
    }
    if(calc(lo)==D)
    {
        printf("%d\n",L);
        if(L==0)return 0;
        printf("%d",ans[1]);
        fo(i,2,n-1)printf(" %d",ans[i]);
        printf("\n");
    }
    else printf("-1\n");
    return 0;
}