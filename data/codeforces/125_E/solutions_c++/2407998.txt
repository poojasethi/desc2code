#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;
const int M = 101011;
struct edge{ int x,y,w,l;}c[M],b[M];
bool operator< (const edge a, const edge b) {return a.w < b.w;}
int pre[M],l,r,K,k,n,m,ans[M];
int findset(int r) {
    if (pre[r] == 0 || pre[r] == r) return r;
    else return pre[r] = findset(pre[r]);
}
int calc(int d) {
    memcpy(b , c, sizeof(edge)*(m+1));
    for (int i = 1; i <= m; ++i) if (b[i].x == 1) b[i].w += d;
    sort(b + 1, b + m + 1);
    fill(pre, pre + m + 1, 0);
    int ret = 0;
    K = 0;
    for (int i = 1; i <= m; ++i) 
        if (findset(b[i].x) != findset(b[i].y)) {
           pre[findset(b[i].x)] = findset(b[i].y);
           if (b[i].x == 1) ++ret;
           ans[++K] = b[i].l;
           if (K == m-1) break;
        }
    //for (int i = 1; i <= m; ++i) if (b[i].x == 1) b[i].w -= d;
    return ret;
}
int main() {
    scanf("%d%d%d", &n, &m, &k);
    for (int i = 1; i <= m; ++i) {
        scanf("%d%d%d", &c[i].x, &c[i].y, &c[i].w);
        c[i].w *= 2;
        if (c[i].x > c[i].y) swap(c[i].x, c[i].y);
        c[i].l = i;
    }
    for (l = 200000, r = 1000000; r; ) {
        int t = l - r / 2 ;
        if (calc(t) < k) l = t - 1;
        r /= 2;
    }
    if (calc(l) == k) {
       printf("%d\n", K);
       for (int i = 1; i <= K; ++i) printf("%d ", ans[i]);
       printf("\n");
    }else printf("-1\n");
    
    return 0;
}
