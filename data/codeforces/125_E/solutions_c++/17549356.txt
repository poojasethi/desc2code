#include <cstdio>
#include <algorithm>

using namespace std;

const int MaxN = 100010;

int x[MaxN], y[MaxN], w[MaxN], id[MaxN];
int KCnt, Top, Stack[MaxN];
int N, M, K;
double l = -1e5, r = 1e5, mid;
int Fa[MaxN];

int GetFa(int x) {
	return Fa[x] == x ? x : Fa[x] = GetFa(Fa[x]);
}

bool Cmp(int i, int j) {
	return (x[i] == 1) * mid + w[i] < (x[j] == 1) * mid + w[j];
}

void Check(int Flag) {
	KCnt = Top = 0;
	for (int i = 1; i <= N; ++ i) Fa[i] = i;
	std :: sort(id + 1, id + M + 1, Cmp);
	for (int i = 1; i <= M; ++ i) {
		int j = id[i];
		int Fax = GetFa(x[j]), Fay = GetFa(y[j]);
		if (Fax != Fay && (KCnt + (x[j] == 1) <= K || Flag)) {
			Fa[Fax] = Fay;
			Stack[++ Top] = j;
			if (x[j] == 1) ++ KCnt;
		}
	}
}

int main() {
	scanf("%d%d%d", &N, &M, &K);
	int tot = 0;
	for (int i = 1; i <= M; ++ i) {
		scanf("%d%d%d", x + i, y + i, w + i);
		id[i] = i;
		if (x[i] > y[i]) swap(x[i], y[i]);
		x[i] == 1 ? ++ tot : 0;
	}
	if (tot < K || (N > 1 && K == 0)) {
		puts("-1");
		return 0;
	}
	mid = 0;
	Check(1);
	if (Top < N - 1) {
		printf("-1");
		return 0;
	}
	while (l + .1 < r && KCnt != K) {
		mid = (l + r) / 2;
		Check(1);
		KCnt < K ? r = mid : l = mid;
	}
	if (KCnt != K) mid = (l + r) / 2;
	Check(0);
	printf("%d\n", Top);
	std :: sort(Stack + 1, Stack + Top + 1);
	for (int i = 1; i <= Top; ++ i) {
		printf("%d ", Stack[i]);
	}
	return 0;
}