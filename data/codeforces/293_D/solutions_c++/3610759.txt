#include <algorithm>
#include <map>
#include <vector>
#include <string>
#include <stdio.h>
#include <string.h>
#include <math.h>

using namespace std;

double x[100000], y[100000];
double Intersection(int i, int j, int level) {
  return (double)(level - y[i]) / (y[j] - y[i]) * (x[j] - x[i]) + x[i];
}
void Scan(int n, double& sum, double& square_sum, long long& ct) {
  int start = 0;
  for (int i = 1; i < n; ++i) {
    if (y[i] > y[start]) {
      start = i;
    }
  }
  int a = start, b = start;
  while (y[(b + 1) % n] == y[b]) {
    b = (b + 1) % n;
  }
  b = (b + 1) % n;
  while (y[(a - 1 + n) % n] == y[a]) {
    a = (a - 1 + n) % n;
  }
  a = (a - 1 + n) % n;
  int level = y[start];
  while (true) {
    double l = Intersection(a, (a + 1) % n, level);
    double r = Intersection(b, (b - 1 + n) % n, level);
    if (l > r) swap(l, r);
    l = ceil(l);
    r = floor(r);
    ct += r - l + 1;
    sum += (l + r) * (r - l + 1) / 2;
    --l;
    square_sum += r * (r + 1) * (2 * r + 1) / 6 -
                  l * (l + 1) * (2 * l + 1) / 6;
    if (y[a] == level) {
      a = (a - 1 + n) % n;
      if (y[a] >= level)
        break;
    }
    if (y[b] == level) {
      b = (b + 1) % n;
    }
    --level;
  }
}

int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%lf%lf", x + i, y + i);
    //x[i] += 1000000;
    //y[i] += 1000000;
    if (i > 0 && x[i] == x[i - 1] && y[i] == y[i - 1]) {
      --i, --n;
    }
  }
  if (x[n - 1] == x[0] && y[n - 1] == y[0]) {
    --n;
  }
  double sum = 0;
  double square_sum = 0;
  long long ct = 0;
  Scan(n, sum, square_sum, ct);

  double answer = ct * square_sum - sum * sum;

  for (int i = 0; i < n; ++i) {
    swap(x[i], y[i]);
  }
  sum = 0;
  square_sum = 0;
  ct = 0;
  Scan(n, sum, square_sum, ct);
  answer += ct * square_sum - sum * sum;

  printf("%.10f\n", answer / ct / (ct - 1));
  return 0;
}
