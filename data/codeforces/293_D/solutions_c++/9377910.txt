#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef long double LD;

const int N=100000+5;
const int INF=1000000+5;

int n,x[N],y[N],cnt[INF*2+111];
LD down[INF*2+111],up[INF*2+111];

template <typename tn1,typename tn2>
inline void cmin(tn1& x,tn2 y){if (y<x) x=y;}
template <typename tn1,typename tn2>
inline void cmax(tn1& x,tn2 y){if (y>x) x=y;}

inline LD solve(int *x,int *y)
{
	int minn=INF,maxn=-INF;
	LL tot=0;
	LD t1=0.0,t2=0.0,t3=0.0,ans=0.0,ty;
	for (int i=0;i<=INF*2;++i) down[i]=INF,up[i]=-INF;
	for (int i=1,j;i<=n;++i)
	{
		j=(i==n)?1:i+1;
		cmin(minn,x[i]);cmax(maxn,x[i]);
		if (x[i]<x[j])
		{
			for (int tx=x[i];tx<=x[j];++tx)
			{
				ty=(y[j]-y[i])/(LD)(x[j]-x[i])*(tx-x[i])+y[i];
				cmin(down[tx+INF],ty);cmax(up[tx+INF],ty);
			}
		}else
		if (x[i]>x[j])
		{
			for (int tx=x[j];tx<=x[i];++tx)
			{
				ty=(y[j]-y[i])/(LD)(x[j]-x[i])*(tx-x[i])+y[i];
				cmin(down[tx+INF],ty);cmax(up[tx+INF],ty);
			}
		}else{
			cmin(down[x[i]+INF],y[i]);
			cmin(down[x[i]+INF],y[j]);
			cmax(up[x[i]+INF],y[i]);
			cmax(up[x[i]+INF],y[j]);
		}
	}
	for (int i=minn;i<=maxn;++i)
		tot+=(cnt[i-minn]=(int)floor(up[i+INF])-(int)ceil(down[i+INF])+1);
	for (int i=0;i<=maxn-minn;++i)
	{
		ans+=cnt[i]*(i*(LD)i*t1+t2-2.0*i*t3);
		t1+=cnt[i];
		t2+=i*(LD)i*cnt[i];
		t3+=i*(LD)cnt[i];
	}
	return ans*2.0/(tot*(LD)(tot-1));
}

int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;++i) scanf("%d%d",&x[i],&y[i]);
	printf("%.10f\n",double(solve(x,y)+solve(y,x))/2.0);
	return 0;
}
