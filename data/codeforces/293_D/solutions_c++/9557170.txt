#include <stdio.h>
#include <math.h>

char ch;
inline void read(int &x)
{
	x=0;ch=getchar();
	while (ch<=32) ch=getchar();
	int f=1;
	if (ch=='-') f=-1,ch=getchar();
	while (ch>32) x=x*10+ch-48,ch=getchar();
	x*=f;
}

template <class T>
inline void swap(T &a,T &b){T t=a;a=b;b=t;}
template <class T>
inline T max(T a,T b){return a>b?a:b;}
template <class T>
inline T min(T a,T b){return a<b?a:b;}

#define MAXN 100005

int n;
int X[MAXN],Y[MAXN];

int L[2000010],U[2000010];

inline int floordiv(long long a,int b)
{
	return a/b-(a<0 && a%b!=0);
}

inline void add(int x1,int y1,int x2,int y2)
{
	if (x1>x2) swap(x1,x2),swap(y1,y2);
	if (x1==x2) {
		L[x1]=min(L[x1],min(y1,y2));
		U[x1]=max(U[x1],max(y1,y2));
		return;
	}
	int i;
	for (i=x1;i<=x2;i++) {
		int yU=floordiv(1LL*(i-x1)*(y2-y1),(x2-x1))+y1;
		int yL=yU+(1LL*(i-x1)*(y2-y1)%(x2-x1)!=0);
		L[i]=min(L[i],yL);
		U[i]=max(U[i],yU);
	}
}

inline double calc()
{
	int i;
	long long cnt=0;
	double sx=0;
	double sx2=0;
	double ret=0;
	for (i=1;i<=2000005;i++) {
		if (L[i]>U[i]) continue;
		int k=U[i]-L[i]+1;
		ret+=k*((double)i*i*cnt+sx2-2.0*i*sx);
		sx+=1LL*k*i;
		sx2+=1LL*k*i*i;
		cnt+=k;
	}
	return ret/((double)cnt*(cnt-1));
}

inline double solvex()
{
	int i;
	for (i=1;i<=2000005;i++) {
		L[i]=0x3f3f3f3f,U[i]=-0x3f3f3f3f;
	}
	for (i=1;i<=n;i++) {
		add(X[i],Y[i],X[i-1],Y[i-1]);
	}
	return calc();
}

inline double solvey()
{
	int i;
	for (i=1;i<=2000005;i++) {
		L[i]=0x3f3f3f3f,U[i]=-0x3f3f3f3f;
	}
	for (i=1;i<=n;i++) {
		add(Y[i],X[i],Y[i-1],X[i-1]);
	}
	return calc();
}

int main()
{
	read(n);
	int i;
	for (i=1;i<=n;i++) {
		read(X[i]);read(Y[i]);
		X[i]+=1000003;
		Y[i]+=1000003;
	}
	X[0]=X[n];Y[0]=Y[n];
	printf("%.10lf\n",solvex()+solvey());
}
	 	  	 			       	   		  	  		