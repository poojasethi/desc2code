#include <cstdio>
#include <cstring>
#include <iostream>
#include <cctype>
#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#define INF 0x7fffffff
#define FOR(i, l, r) for (int i = l; i < r; i++)
using namespace std;

typedef long long LL;
typedef unsigned int UI;

int T, loc[4][2];
int ans[4][2];
int res;
int ord[24][4];
void update(int k, vector<int> p[])
{
    FOR(i, 0, 24) {
        int len = 0;
        bool flag = true;
        FOR(j, 0, 4) {
            int des[2] = {p[0][j & 1], p[1][j >> 1]};
            int tmp = (k >> ord[i][j]) & 1;
            if (loc[ord[i][j]][tmp] != des[tmp]) {
                flag = false;
                break;
            }
            len = max(len, abs(loc[ord[i][j]][1 - tmp] - des[1 - tmp]));
        }
        if (flag) {
            if (len < res) {
                res = len;
                FOR(j, 0, 4) {
                    ans[ord[i][j]][0] = p[0][j & 1];
                    ans[ord[i][j]][1] = p[1][j >> 1];
                }
            }
        }
    }
}
void dfs(int a[], int k, int& n)
{
    if (k == 4) {
        FOR(i, 0, 4) {
            ord[n][i] = a[i];
        }
        n++;
        return;
    }
    FOR(i, k, 4) {
        swap(a[k], a[i]);
        dfs(a, k + 1, n);
        swap(a[k], a[i]);
    }
}
void init()
{
    int tmp[4] = {0, 1, 2, 3};
    int n = 0;
    dfs(tmp, 0, n);
}
void solve(int k)
{
    vector<int> p[2];
    int rf[2][4];
    memset(rf, 0, sizeof(rf));
    FOR(i, 0, 4) {
        int tmp = (k >> i) & 1;
        bool flag = true;
        FOR(j, 0, p[tmp].size()) {
            if (loc[i][tmp] == p[tmp][j]) {
                flag = false;
                rf[tmp][j]++;
                if (rf[tmp][j] > 1) {
                    return;
                }
                break;
            }
        }
        if (flag) {
            p[tmp].push_back(loc[i][tmp]);
        }
    }
    if (p[0].size() > 2 || p[1].size() > 2 || (p[0].size() != 2 && p[1].size() != 2)) {
        return;
    }
    if (p[0].size() == 2 && p[1].size() == 2) {
        if (abs(p[0][0] - p[0][1]) == abs(p[1][0] - p[1][1])) {
            update(k, p);
        }
        return;
    }
    FOR(i, 0, 2) {
        if (p[i].size() == 1) {
            int d = p[1 - i][0] - p[1 - i][1];
            p[i].push_back(p[i][0] + d);
            update(k, p);
            p[i][1] -= 2 * d;
            update(k, p);
        }
        else if (p[i].size() == 0) {
            vector<int> q[2];
            FOR(a, 0, 4) {
                FOR(b, 0, 2) {
                    if (loc[a][1 - i] == p[1 - i][b]) {
                        q[b].push_back(loc[a][i]);
                    }
                }
            }
            FOR(_, 0, 2) {
                if (q[_][0] > q[_][1]) {
                    swap(q[_][0], q[_][1]);
                }
            }
            vector<int> ax;
            int d = abs(p[1 - i][0] - p[1 - i][1]);
            FOR(a, 0, 2) {
                FOR(b, 0, 2) {
                    ax.push_back(q[a][b] + (b ? 0 : d));
                }
            }
            sort(ax.begin(), ax.end());
            int tt = (ax[0] + ax[3]) / 2;
            p[i].push_back(tt - d);
            p[i].push_back(tt);
            update(k, p);
        }
    }
}


int main()
{
    //freopen("1.in", "r", stdin);
    init();
    scanf("%d", &T);
    while (T--) {
        FOR(i, 0, 4) {
            scanf("%d%d", &loc[i][0], &loc[i][1]);
        }
        res = INF;
        FOR(i, 0, 16) {
            solve(i);
        }
        if (res == INF) {
            res = -1;
        }
        printf("%d\n", res);
        if (res != -1) {
            FOR(i, 0, 4) {
                printf("%d %d\n", ans[i][0], ans[i][1]);
            }
        }
    }
    return 0;
}
 		 	 	 	 				 	      	  		 		