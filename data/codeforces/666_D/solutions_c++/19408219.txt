//枚举每一个点前进的方向和抵达的位置 4*4*4!
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int T;
int X[4],Y[4];
int ans;
int val[4];
int dist[4];
int pos[4][2];
int perm[4];
const int INF = 0x3f3f3f3f;
//上下为odd 左右为even
bool setNum(int num, int value) {
    if (val[num] != 0x3f3f3f3f && val[num]!=value) return false;

    val[num] = value;
    return true;
}
int calc(int aim, int dir, int p) {
    if (aim == 0) {
        if (dir % 2 == 0) return setNum(1,Y[p]);
        else return setNum(0,X[p]);
    }
    else if (aim == 1) {
        if (dir % 2 == 0) return setNum(1, Y[p]);
        else return setNum(2,X[p]);
    }
    else if (aim == 2) {
        if (dir % 2 == 0) return setNum(3, Y[p]);
        else return setNum(0, X[p]);
    }
    else {
        if (dir % 2 == 0) return setNum(3,Y[p]);
        else return setNum(2,X[p]);
    }
}

int find_dist(int aim,int dir,int p) {
    if (aim == 0) {
        if (dir % 2 == 0) return abs(X[p] - val[0]);
        else return abs(Y[p] - val[1]);
    }
    else if (aim == 1) {
        if (dir % 2 == 0) return abs(X[p] - val[2]);
        else return abs(Y[p] - val[1]);
    }
    else if (aim == 2) {
        if (dir % 2 == 0) return abs(X[p] - val[0]);
        else return abs(Y[p] - val[3]);
    }
    else {
        if (dir % 2 == 0) return abs(X[p] - val[2]);
        else return abs(Y[p] - val[3]);
    }
}
void getPos(int num, int &x, int &y) {
    if (num == 0) {
        x = val[0];
        y = val[1];
    }
    else if (num == 1) {
        x = val[2];
        y = val[1];
    }
    else if (num == 2) {
        x = val[0];
        y = val[3];
    }
    else  {
        x = val[2];
        y = val[3];
    }
}
//void getRela(int i, int &p, int &q) {
//    if (i == 0) p = 0,q = 2;
//    if (i == 1) p = 0,q = 1;
//    if (i == 2) p = 1,q = 3;
//    if (i == 4) p = 2,q = 3;
//}

int ii[4];
void work() {
    ans = 0x3f3f3f3f;
    for ( ii[0] = 1; ii[0] <= 4; ii[0]++)
    for ( ii[1] = 1; ii[1] <= 4; ii[1]++)
    for ( ii[2] = 1; ii[2] <= 4; ii[2]++)
    for ( ii[3] = 1; ii[3] <= 4; ii[3]++)
    {

        for (int i = 0; i < 4; i++)
            perm[i] = i;
        do {
            val[0] = val[1] = val[2] = val[3] = 0x3f3f3f3f;
            if (calc(perm[0],ii[0],0)
                && calc(perm[1],ii[1],1)
                && calc(perm[2],ii[2],2)
                && calc(perm[3],ii[3],3)) {
                int dist = 0;
                if (abs(val[3]-val[1]) == abs(val[2]-val[0]) && abs(val[3]-val[1])!= 0) {
                    dist = 0;
                    dist = max(find_dist(perm[0],ii[0],0),dist);
                    dist = max(find_dist(perm[1],ii[1],1),dist);
                    dist = max(find_dist(perm[2],ii[2],2),dist);
                    dist = max(find_dist(perm[3],ii[3],3),dist);
                    if (ans > dist) {
                        ans = min(dist, ans);
                        for (int i = 0; i < 4; i++)
                            getPos(perm[i],pos[i][0],pos[i][1]);
                    }
                }
                else {
                    int length = INF*2;
                    if (val[3] != INF and val[1]!=INF)
                        length = min(length,abs(val[3] - val[1]));
                    if (val[2] != INF and val[0]!=INF)
                        length = min(length,abs(val[2] - val[0]));
                    int _perm[4];
                    for (int i = 0; i < 4; i++)
                        _perm[perm[i]] = i;

                    int cnt = 0;
                    int position[2];
                    for (int i = 0; i < 4; i++) {
                        if (val[i] == 0x3f3f3f3f) {
                            position[cnt++] = i;
                        }
                    }
//                    cout<<cnt<<endl;
                    if (cnt == 1) {
                        if (position[0] < 2)
                            val[position[0]] = val[position[0]+2] - length;
                        else
                            val[position[0]] = val[position[0]-2] - length;

                        dist = max(find_dist(perm[0],ii[0],0),dist);
                        dist = max(find_dist(perm[1],ii[1],1),dist);
                        dist = max(find_dist(perm[2],ii[2],2),dist);
                        dist = max(find_dist(perm[3],ii[3],3),dist);
                        if (ans > dist) {
                            ans = min(dist, ans);
                            for (int i = 0; i < 4; i++)
                                getPos(perm[i],pos[i][0],pos[i][1]);
                        }
                        dist = 0;
                        if (position[0] < 2)
                            val[position[0]] = val[position[0]+2] + length;
                        else
                            val[position[0]] = val[position[0]-2] + length;

                            dist = max(find_dist(perm[0],ii[0],0),dist);
                            dist = max(find_dist(perm[1],ii[1],1),dist);
                            dist = max(find_dist(perm[2],ii[2],2),dist);
                            dist = max(find_dist(perm[3],ii[3],3),dist);

                        if (ans > dist) {
                        ans = min(dist, ans);
                        for (int i = 0; i < 4; i++)
                            getPos(perm[i],pos[i][0],pos[i][1]);
                        }
                    }
//
                    if (cnt == 2) {
//                            cout<<1<<endl;
                        if (val[0] == INF && val[2] == INF) {
//                                cout<<1<<endl;
                            int perm2[4] = {0,1,2,3};
                            do {
                                dist  = 0;
                                int d[4] = {X[perm2[0]], X[perm2[1]], X[perm2[2]]-length, X[perm[3]]-length};
                                sort(d,d+4);

                                int _dist = (d[0]+d[3])/2 - d[0];
//                                if (_dist == 4) system("pause");
                                val[0] = d[0]+_dist;
                                val[2] = val[0]+length;
                                dist = max(find_dist(perm[0],ii[0],0),dist);
                                dist = max(find_dist(perm[1],ii[1],1),dist);
                                dist = max(find_dist(perm[2],ii[2],2),dist);
                                dist = max(find_dist(perm[3],ii[3],3),dist);
                                if (ans > dist) {
                                    ans = min(dist, ans);
                                    for (int i = 0; i < 4; i++)
                                        getPos(perm[i],pos[i][0],pos[i][1]);
                                }
                            } while(next_permutation(perm2,perm2+4));
                        }
                        else {
                            int perm2[4] = {0,1,2,3};
                            do {
                                dist  = 0;
                                int d[4] = {Y[perm2[0]], Y[perm2[1]], Y[perm2[2]]-length, Y[perm[3]]-length};
                                sort(d,d+4);
                                int _dist = (d[0]+d[3])/2 - d[0];
                                val[1] = d[0]+_dist;
                                val[3] = val[1]+length;
                                dist = max(find_dist(perm[0],ii[0],0),dist);
                                dist = max(find_dist(perm[1],ii[1],1),dist);
                                dist = max(find_dist(perm[2],ii[2],2),dist);
                                dist = max(find_dist(perm[3],ii[3],3),dist);
                                if (ans > dist) {
                                    ans = min(dist, ans);
                                    for (int i = 0; i < 4; i++)
                                        getPos(perm[i],pos[i][0],pos[i][1]);
                                }
                            } while(next_permutation(perm2,perm2+4));
                        }
                    }

//                    cout<<val[0]<<" "<<val[1]<<" "<<val[2]<<" "<<val[3]<<endl;
////                    system("pause");
                }
//
            }


        } while(next_permutation(perm,perm+4));
    }
    if (ans == 0x3f3f3f3f) printf("-1\n");
    else {
        printf("%d\n",ans);
        for (int i = 0; i < 4; i++)
            printf("%d %d\n",pos[i][0],pos[i][1]);

    }
}


int main()
{
    scanf("%d",&T);
    while(T--) {
        for (int i = 0; i < 4; i++)
            scanf("%d %d",&X[i],&Y[i]);
        work();
    }
}

/*
1
31 85
9 49
52 57
11 85
*/

					 		  	 	 		    	 		  			