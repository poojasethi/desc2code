#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long int ll;

int absolut(int x)
{
  if (x<0) return -x;
  return x;
}

struct point {
  int x,y;
  point() {}
  point(int x,int y):x(x),y(y) {}
};

point leer()
{
  int x,y;
  cin>>x>>y;
  return point(x,y);
}

ll coste(point p1,point p2)
{
  return max(absolut(p1.x-p2.x),absolut(p1.y-p2.y));
}

const ll infinito=4000000000000000000LL;

point pinput[4];
point psol[4];
ll costesol;
int P[4];
point pini[4];
point pfin[4];

bool mover(int i,point p)
{
  if (p.x!=pini[i].x and p.y!=pini[i].y) return false;
  pfin[i]=p;
  return true;
}

ll coste()
{
  ll maximo=0;
  for (int i=0;i<4;i++)
    maximo=max(maximo,coste(pini[i],pfin[i]));
  return maximo;
}

void mejorarsolucion()
{
  ll c=coste();
  if (c<costesol) {
    costesol=c;
    for (int i=0;i<4;i++)
      psol[P[i]]=pfin[i];
  }
}

void intenta(int x,int y,int lado)
{
  if (not mover(0,point(x,y)) or
      not mover(1,point(x,y-lado)) or
      not mover(2,point(x+lado,y-lado)) or
      not mover(3,point(x+lado,y)))
    return;
  mejorarsolucion();
}

void intentaxxy(int x1,int x2,int y)
{
  int lado=absolut(x1-x2);
  if (lado==0) return;
  intenta(x1,y,lado);
  intenta(x1,y+lado,lado);
}

void intentaxyy(int x,int y1,int y2)
{
  int lado=absolut(y1-y2);
  if (lado==0) return;
  intenta(x,y1,lado);
  intenta(x-lado,y1,lado);
}

void intentaxx(int x1,int x2)
{
  if (x2<=x1) return;
  int lado=x2-x1;
  if (pini[0].x!=x1 or pini[1].x!=x1 or pini[2].x!=x2 or pini[3].x!=x2) return;
  int inf=0,sup=0;
  for (int i=0;i<4;i++) {
    inf=min(inf,pini[i].y)-lado;
    sup=max(sup,pini[i].y)+lado;
  }
  while (inf+2<sup) {
    int med1=(inf+inf+sup)/3;
    int med2=(inf+sup+sup)/3;
    intenta(x1,med1,lado);
    int c1=coste();
    intenta(x1,med2,lado);
    int c2=coste();
    if (c2<c1) inf=med1;
    else sup=med2;
  }
  for (int y=inf;y<=sup;y++)
    intenta(x1,y,lado);
}

void intentayy(int y1,int y2)
{
  if (y2>=y1) return;
  int lado=y1-y2;
  if (pini[0].y!=y1 or pini[3].y!=y1 or pini[1].y!=y2 or pini[2].y!=y2) return;
  int inf=0,sup=0;
  for (int i=0;i<4;i++) {
    inf=min(inf,pini[i].x)-lado;
    sup=max(sup,pini[i].x)+lado;
  }
  //cout<<"intentayy "<<y1<<" "<<y2<<" "<<inf<<" "<<sup<<endl;
  while (inf+2<sup) {
    int med1=(inf+inf+sup)/3;
    int med2=(inf+sup+sup)/3;
    intenta(med1,y1,lado);
    int c1=coste();
    intenta(med2,y1,lado);
    int c2=coste();
    //cout<<"med1 "<<med1<<" c1 "<<c1<<" med2 "<<med2<<" c2 "<<c2<<endl;
    if (c2<c1) inf=med1;
    else sup=med2;
  }
  for (int x=inf;x<=sup;x++)
    intenta(x,y1,lado);
}

int main()
{
  int casos;
  cin>>casos;
  for (int cas=0;cas<casos;cas++) {
    costesol=infinito;
    for (int i=0;i<4;i++) pinput[i]=leer();
    for (int i=0;i<4;i++) P[i]=i;
    do {
      for (int i=0;i<4;i++) 
	pini[i]=pinput[P[i]];
      for (int i1=0;i1<4;i1++) {
	for (int i2=0;i2<4;i2++) {
	  for (int i3=0;i3<4;i3++) {
	    intentaxxy(pini[i1].x,pini[i2].x,pini[i3].y);
	    intentaxyy(pini[i1].x,pini[i2].y,pini[i3].y);
	  }
	}
      }
      for (int i1=0;i1<4;i1++) {
	for (int i2=0;i2<4;i2++) {
	  intentaxx(pini[i1].x,pini[i2].x);
	  intentayy(pini[i1].y,pini[i2].y);
	}
      }
    } while (next_permutation(P,P+4));
    if (costesol==infinito) cout<<-1<<endl;
    else {
      cout<<costesol<<endl;
      for (int i=0;i<4;i++)
	cout<<psol[i].x<<" "<<psol[i].y<<endl;
    }
  }
}
