from pprint import pprint as pp
def GI(): return int(raw_input())
def GIS(): return map(int, raw_input().split())

def main():
    # Working but memory-inefficient.
    n = GI()
    xs = GIS()
    d = {}
    ml = 0
    get = lambda a: d.get(a, -1)

    for p, x in enumerate(xs):
        d[x] = p

        mo = get(x-1)
        po = get(x+1)
        mt = get(x-2)
        pt = get(x+2)
        l = sorted([mo, po, mt, pt])
        ml = max(ml, p-l[-2])

    return ml

def main():
    n = GI()
    xs = GIS()
    ml = 0
    last_change = 0
    l = 0

    for p in xrange(1, n):
        change = xs[p] - xs[p-1]
        if change:
            if change == last_change:
                ml = max(ml, p-l)
                l = j
            else:
                last_change = change
            j = p
    ml = max(ml, p+1-l)
    return ml



print main()
