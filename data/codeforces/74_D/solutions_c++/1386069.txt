#include<cstdio>
#include<cstring>
#include<map>
#include<algorithm>
#include<iostream>
using namespace std;
const int N = 200005;
map<int,int>lzs;
map<int,int>seen;
struct P
{
int l,r,d,id;
}sg[N];
struct Q
{
int a,b,c;
}data[N];
bool cmp(const P &x,const P &y)
{
if(x.d==y.d)return x.r>y.r;
return x.d>y.d;
}
int k,f[N],L[N],R[N],num;
void up(int x)
{
P o=sg[x];
while(x>1&&cmp(o,sg[x/2]))
{
sg[x]=sg[x/2];
f[sg[x].id]=x;
x/=2;
}
sg[x]=o;
f[sg[x].id]=x;
}
void down(int x)
{
P o=sg[x];
int c=x*2;
if(c<k&&cmp(sg[c+1],sg[c]))c++;
while(c<=k&&cmp(sg[c],o))
{
sg[x]=sg[c];
f[sg[x].id]=x;
x=c;
c*=2;
if(c<k&&cmp(sg[c+1],sg[c]))c++;
}
sg[x]=o;
f[sg[x].id]=x;
}
void push(int l,int r,int id)
{
P o;
o.l=l;o.r=r;o.d=r-l;o.id=id;
sg[++k]=o;
up(k);
}
void del(int x)
{
sg[x]=sg[k--];
up(x);
down(x);
}
int c[N+N],cnt;
int lowbit(int x)
{
return x&(-x);
}
void up1(int x,int v)
{
while(x<cnt)
{
c[x]+=v;
x+=lowbit(x);
}
}
int getsum(int x)
{
int r=0;
while(x>0)
{
r+=c[x];
x-=lowbit(x);
}
return r;
}
int a[N+N],b[N+N],h[N+N],hash[N+N];
bool cmpp(int x,int y)
{
return a[x]<a[y];
}
int main()
{
int n,m,i,j;
scanf("%d%d",&n,&m);
push(0,n+1,0);
num=1;
lzs[0]=1;
lzs[n+1]=2;
j=3;
L[1]=-1;
R[1]=0;
L[2]=0;
R[2]=-1;
cnt=0;
for(i=0;i<m;i++)
{
scanf("%d",&data[i].a);
if(!data[i].a)
{
scanf("%d%d",&data[i].b,&data[i].c);
a[cnt++]=data[i].b;
a[cnt++]=data[i].c;
}
else
{
if(seen.find(data[i].a)==seen.end())
{
P fr=sg[1];
int mid=(fr.r+fr.l+1)/2;
hash[j]=mid;
seen[data[i].a]=lzs[mid]=j++;
data[i].b=mid;
int lid=lzs[fr.l],rid=lzs[fr.r];
del(1);
push(fr.l,mid,num);
  L[j-1]=num;
R[lid]=num++;
push(mid,fr.r,num);
  R[j-1]=num;
L[rid]=num++;
a[cnt++]=mid;
}
else
{
data[i].b=-1;
int id=seen[data[i].a],ld=sg[f[L[id]]].l,rd=sg[f[R[id]]].r;
del(f[L[id]]);
del(f[R[id]]);
push(ld,rd,num);
int lid=lzs[ld],rid=lzs[rd];
R[lid]=L[rid]=num;
num++;
a[cnt++]=hash[seen[data[i].a]];
seen.erase(data[i].a);
}
}
}
for(i=0;i<cnt;i++)b[i]=i;
sort(b,b+cnt,cmpp);
int fv=1;
h[b[0]]=1;
for(i=1;i<cnt;i++)
{
if(a[b[i]]!=a[b[i-1]])fv++;
h[b[i]]=fv;
}
for(i=j=0;i<m;i++)
{
if(!data[i].a)
{
printf("%d\n",getsum(h[j+1])-getsum(h[j]-1));
j+=2;
}
else if(data[i].b!=-1)
{
up1(h[j],1);
j++;
}
else
{
up1(h[j],-1);
j++;
}
}
return 0;
}
