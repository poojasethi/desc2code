#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#define N 100010
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int l,r,a;
} tr[N*40];
struct w {
	int l,r;
	inline bool operator < (const w &A) const {
		return !(r-l>A.r-A.l||r-l==A.r-A.l&&r>A.r);
	}
	inline bool operator == (const w &A) {
		return l==A.l&&r==A.r;
	}
};
int i,j,k,n,m,t,root;
set<int> a;
map<int,int> b;
priority_queue<w> q,la;
typedef set<int>::iterator w1;
int Cal(int q,int x,int y,int k) {
	ww A=tr[q];
	if (!A.a) return 0;
	if (k<x) return 0;
	if (y<=k) return A.a;
	int mid=(x+y)/2;
	return Cal(tr[q].l,x,mid,k)+Cal(tr[q].r,mid+1,y,k);
}
void inc(int &q,int x,int y,int k,int v) {
	if (!q) q=++t;
	tr[q].a+=v;
	if (x==y) return;
	int mid=(x+y)/2;
	if (k<=mid) inc(tr[q].l,x,mid,k,v);
	else inc(tr[q].r,mid+1,y,k,v);
}
inline void cal() {
	int x,y;
	scanf("%d%d",&x,&y);
	printf("%d\n",Cal(root,1,n,y)-Cal(root,1,n,x-1));
}
inline void inc(int x) {
	for (;!la.empty();) {
		w A=q.top();
		w B=la.top();
		if (A==B) {
			q.pop();
			la.pop();
		} else break;
	}
	w A=q.top();
	int B=(A.l+A.r+1)/2;
	q.pop();
	if (A.l<B) q.push((w){A.l,B-1});
	if (B<A.r) q.push((w){B+1,A.r});
	inc(root,1,n,B,1);
	b[x]=B;
	a.insert(B);
}
inline void del(int x) {
	int A=b[x];
	b[x]=0;
	a.erase(A);
	w1 a_=a.lower_bound(A);
	int r=*a_,l=*(--a_);
	l++,r--;
	if (l<A) la.push((w){l,A-1});
	if (A<r) la.push((w){A+1,r});
	q.push((w){l,r});
	inc(root,1,n,A,-1);
}
int main() {
	//freopen("74d.in","r",stdin);
	scanf("%d%d",&n,&m);
	a.insert(0),a.insert(n+1);
	q.push((w){1,n});
	For(i,1,m) {
		scanf("%d",&k);
		if (!k) cal();
		else if (b[k]) del(k);
		else inc(k);
	}
	//for(;;);
	return 0;
}
