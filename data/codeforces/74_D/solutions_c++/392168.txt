#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>


 
using namespace std;
 
const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;
 
#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)

map<int,int> atPos;
set<pii,greater<pii > > ava;
map<int,int> lenAtPos;
int in[100100][3];
int M;
int bit[200100];
map<int,int> tmp;
void insertPos(int n,int dif){
//	cout << n << " "<< dif << endl;
	map<int,int>::iterator it =tmp.lower_bound(n);
	if(it==tmp.end())return;
	int nn=1;
	if(it->first==n){
		nn = it->second+1;
	} else {
		nn = it->second;
	}
	while(nn<=M){
		bit[nn]+=dif;
		nn += nn&(-nn);
	}
}
int query(int n){
	int res = 0;
	while(n){
		res +=bit[n];
		n-=n&(-n);
	}
	return res;
}
int main(){	
	memset(bit,0,sizeof(bit));
	int N,Q;
	scanf("%d%d",&N,&Q);
	set<int> xx = set<int>();
	FOR(i,0,Q){
		scanf("%d",&(in[i][0]));
		if(in[i][0]==0){
			scanf("%d%d",&(in[i][1]),&(in[i][2]));
			++in[i][2];
			xx.insert(in[i][1]);
			xx.insert(in[i][2]);
		}
	}
	xx.insert(0);
	M=0;
	tmp.clear();
	FORIT(it,xx)tmp[*it]=M++;
	lenAtPos.clear();
	lenAtPos[1]=N;
	ava.clear();
	ava.insert(pii(N,1));
	atPos.clear();
	FOR(i,0,Q){
		if(in[i][0]){
			int id = in[i][0];
			if(atPos.find(id)==atPos.end()){
				pii fr = *(ava.begin());
				int len = fr.first;
				int sid = fr.second;
				int rlen = len -1;
				int p1 = len>>1;
				int p2 = rlen - p1;
				ava.erase(ava.begin());
				ava.insert(pii(p1,sid));
				ava.insert(pii(p2,sid+p1+1));
				lenAtPos[sid+p1+1]=p2;
				lenAtPos[sid]=p1;
				atPos[id]=sid+p1;
				insertPos(sid+p1,1);
			} else {
				int sid = atPos[id];
				insertPos(sid,-1);
				atPos.erase(id);
				map<int,int>::iterator it =lenAtPos.find(sid+1);
				int len2 = it->second;
				it--;
				int len1 = it->second;
				int fid = it->first;
				lenAtPos.erase(sid+1);
				lenAtPos[fid]=len1+len2+1;
				ava.erase(pii(len1,fid));
				ava.erase(pii(len2,sid+1));
				ava.insert(pii(len1+len2+1,fid));
			}
		//	FORIT(it,ava)cout << "("<<it->first<< ","<< it->second << ")";
		//	cout << endl;
		} else {
			printf("%d\n",query(tmp[in[i][2]])-query(tmp[in[i][1]]));
		}
	}
	return 0;
}
