#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<string>
#include<set>
#include<map>

using namespace std;

int n,q;

struct Node
{
	int l,r;
	Node(){}
	Node(int ll,int rr):l(ll),r(rr){}
};

bool operator==(Node a,Node b)
{
	return a.l==b.l&&a.r==b.r;
}

bool operator<(Node a,Node b)
{
	return (a.r - a.l>b.r - b.l)||(a.r-a.l==b.r-b.l&&a.l>b.l);
}

set<Node>s;
set<int>ls;
map<int,int>mp;
map<int,int>sum;

void add(int i,int c)
{
	for(;i<=n;i+=(i)&(-i))	sum[i] += c;
}

int search(int i)
{
	int ans = 0;
	for(;i>0;i-=(i)&(-i))	
	if(sum.find(i)!=sum.end()) ans += sum[i];
	
	return ans;
}

int main()
{
	while(scanf("%d%d",&n,&q)==2)
	{
		s.clear();
		ls.clear();
		mp.clear();
		sum.clear();
		
		s.insert(Node(1,n));
		ls.insert(0);
		ls.insert(n+1);
		Node now;
		while(q-->0)
		{
			int a;
			scanf("%d",&a);
			if(a)
			{
				if(mp[a]==0)
				{
					now = *(s.begin());
					int k = (now.r + now.l + 1)>>1;
					mp[a] = k;
					s.erase(now);
					if(now.l<k)	s.insert(Node(now.l,k-1));	
					if(k<now.r)	s.insert(Node(k+1,now.r));
					ls.insert(k);
					add(k,1);
				}
				else
				{
					int k = mp[a];
					mp[a] = 0;
					add(k,-1);
					set<int>::iterator it1,it2;
					it1 = it2 = ls.find(k);
					int l = *(--it1),r = *(++it2);
					ls.erase(k);
					if(r>=k+2)	s.erase(Node(k+1,r-1));
					if(l+2<=k)	s.erase(Node(l+1,k-1));
					if(r>=l+2)	s.insert(Node(l+1,r-1));
				}
			}
			else
			{
				int a,b;
				scanf("%d%d",&a,&b);
				printf("%d\n",search(b) - search(a-1));
			}
		}
	}
	return 0;
}
	 		 							    			 	 				