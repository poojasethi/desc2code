#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

map<int, int> a;
class Seg{
	public:
		int L, R, mL, mR, mX, tot;
		Seg(){};
		Seg(int len) {L=R=-1; mL=mR=mX=len; tot=0;}
} seg[4000005];
int nseg=0;
void push(int x, int ll, int rr) {
	if(seg[x].L == -1) {
		seg[x].L = nseg++;
		seg[x].R = nseg++;
		seg[seg[x].L] = Seg((ll+rr)/2-ll+1);
		seg[seg[x].R] = Seg(rr-(ll+rr)/2);
	}
}

void pull(int x, int ll, int rr) {
	if(seg[x].L == -1) return;
	int L = seg[x].L, R = seg[x].R;
	int mm = (ll+rr)/2;
	seg[x].mL = (seg[L].mL == mm-ll+1? seg[L].mL+seg[R].mL: seg[L].mL);
	seg[x].mR = (seg[R].mR == rr-mm? seg[R].mR+seg[L].mR: seg[R].mR);
	seg[x].mX = max(seg[L].mX, seg[R].mX);
	seg[x].mX = max(seg[x].mX, seg[L].mR + seg[R].mL);
	seg[x].tot = seg[L].tot + seg[R].tot;
}

int pos(int x, int L, int R) {
	if(seg[x].L == -1) return (L+R+1)/2;
	if(seg[seg[x].R].mX == seg[x].mX) return pos(seg[x].R, (L+R)/2+1, R);
	if(seg[seg[x].L].mR + seg[seg[x].R].mL == seg[x].mX)
		return (L+R)/2-seg[seg[x].L].mR+1+seg[x].mX/2;
	return pos(seg[x].L, L, (L+R)/2);
}

void ins(int x, int L, int R, int p) {
	if(L==R) {
		seg[x].tot = 1;
		seg[x].mL = seg[x].mR = seg[x].mX = 0;
		return;
	}
	push(x, L, R);
	int M=(L+R)/2;
	if(p<=M) ins(seg[x].L, L, M, p);
	if(p>M) ins(seg[x].R, M+1, R, p);
	pull(x, L, R);
}

void del(int x, int L, int R, int p) {
	//printf("del (%d-%d) %d\n", L, R, seg[x].tot);
	if(L==R) {
		seg[x].tot = 0;
		seg[x].mL = seg[x].mR = seg[x].mX = 1;
		return;
	}
	push(x, L, R);
	int M=(L+R)/2;
	if(p<=M) del(seg[x].L, L, M, p);
	if(p>M) del(seg[x].R, M+1, R, p);
	pull(x, L, R);
}

int find(int x, int L, int R, int ll, int rr) {
	if(ll<=L && rr>=R) return seg[x].tot;
	push(x, L, R);
	int M=(L+R)/2, ret=0;
	if(ll<=M) ret += find(seg[x].L, L, M, ll, rr);
	if(rr>M) ret += find(seg[x].R, M+1, R, ll, rr);
	pull(x, L, R);
	return ret;
}

int main(void) {
	int n, q;
	scanf("%d%d", &n, &q);
	seg[nseg++] = Seg(n);
	while(q--) {
		int id;
		scanf("%d", &id);
		if(id==0) {
			int x, y;
			scanf("%d%d", &x, &y);
			int ans = find(0, 1, n, x, y);
			printf("%d\n", ans);
		} else {
			if(a.find(id)==a.end() || a[id]==0) {
				int p = pos(0, 1, n);
				//printf("p=%d\n", p);
				ins(0, 1, n, p);
				a[id] = p;
			} else {
				del(0, 1, n, a[id]);
				a[id] = 0;
			}
		}
	}
	return 0;
}

