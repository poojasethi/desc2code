#include <algorithm>
#include <iostream>
#include <sstream>
#include <fstream>
#include <memory>
#include <vector>
#include <string>
#include <bitset>
#include <limits>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <climits>
#include <cstring>
#include <cstdio>
#include <cmath>
#define fir first
#define sec second
#define sz(a) ((int)(a).size())
#define foreach(i, v) for(__typeof((v).begin()) i=(v).begin(); i!=(v).end(); i++)
using namespace std;
typedef long long llong;

struct Item
{
	int l, r;
	Item() {}
	Item(int a, int b): l(a), r(b) {}
	bool operator < (const Item& t) const
	{
		return (r-l)>(t.r-t.l) || ((r-l)==(t.r-t.l) && r>t.r);
	}
};

int n;
set<Item> seg;
set<int> arr;
set<int>::iterator p1, p2;
map<int, int> pos, s;

int sum(int x)
{
	int res = 0;
	for(int i=x; i>0; i-=(i&(-i)))
		res += s[i];
	return res;
}
void insert(int x, int det)
{
	for(int i=x; i<=n; i+=(i&(-i)))
		s[i] += det;
}

int main()
{
	int q, t1, t2;
    ios::sync_with_stdio(0);

	cin>>n>>q;
	arr.insert(0);
	arr.insert(n+1);
	seg.insert(Item(1, n));
    while( q-- )
    {
    	cin>>t1;
    	if( t1 == 0 )
    	{
    		cin>>t1>>t2;
    		printf("%d\n", sum(t2)-sum(t1-1));
    	}
    	else
    	{
    		if( pos[t1] == 0 )
    		{
    			Item it = *seg.begin();
    			seg.erase(seg.begin());
    			int mid = (it.l+it.r+1)/2;
    			if( it.l <= mid-1 )
					seg.insert(Item(it.l, mid-1));
				if( mid+1 <= it.r )
					seg.insert(Item(mid+1, it.r));
    			pos[t1] = mid;
    			arr.insert(mid);
    			insert(mid, 1);
    		}
    		else
    		{
    			int pre, mid=pos[t1], nxt;
    			p1 = p2 = arr.find(mid);
    			pre=*(--p1);  nxt=*(++p2);
    			if( pre+1 <= mid-1 )
					seg.erase(Item(pre+1, mid-1));
				if( mid+1 <= nxt-1 )
					seg.erase(Item(mid+1, nxt-1));
				if( pre+1 <= nxt-1 )
					seg.insert(Item(pre+1, nxt-1));
				pos[t1] = 0;
				insert(mid, -1);
				arr.erase(mid);
    		}
    	}
    }

    return 0;
}
