#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cstdio>

#define tr(cont, it) for( typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it)
#define tri(cont, it, i) int i=0; for( typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); ++it, ++i)
#define be(b, e, i) for(typeof(b) i=(b); i!=(e); ++i)

#define mp(a, b) make_pair(a, b)
#define pb(x) push_back(x)

#define deb if(debug) cout

const bool debug = false;

using namespace std;

typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;

template<class A, class B>
ostream& operator<<(ostream &out, const pair<A, B> &p) {
    out << '[' << p.first << ", " << p.second << ']';
    return out;
}

int n;
map<int, int> t;

int sum(int x) {
    ++x;
    int i,r=0;
    for ( i=x; i; i-=i&-i )
            if ( t.find(i)!=t.end() ) r+=t[i];
    return r;
}

void add(int x, int k) {
    ++x;
    for ( int i=x; i<=n; i+=i&-i ) t[i]+=k;
}

int main()
{
    int q;
    cin >> n >> q;

    set< ii, greater< ii > > B;
    B.insert(mp(n, 0));

    map<int, int> ves;
    map<int, pair<int, int> > pn;
    set<int> all;
    all.insert(-1);
    all.insert(n);

    for(int i=0; i<q; ++i) {
        int p,a,b;
        scanf("%d", &p);
        if(p == 0) {
            scanf("%d%d", &a, &b);
            if(a == 1)
                printf("%d\n", sum(b-1));
            else
                printf("%d\n", sum(b-1) - sum(a-2));
        } else {
            if(ves.count(p) == 0 || ves[p] == -1) {
                int l = B.begin()->second;
                int r = B.begin()->second + B.begin()->first - 1;
                int c = (l+r+1)/2;
                deb << "ves " << c << endl;
                B.erase(B.begin());
                if(l<c) B.insert(mp(c-l, l));
                if(r>c) B.insert(mp(r-c, c+1));

                all.insert(c);

                ves[p] = c;

                add(c, 1);
            } else {
                int c = ves[p];
                set<int>::iterator it = all.find(c);
                    set<int>::iterator il=it; --il;
               int     l = *il+1;

                set<int>::iterator ir=it; ++ir;
               int     r = *ir-1;

                ves[p] = -1;
                deb << "UNves " << c << ' ' << l << ' ' << r << endl;
                add(c, -1);
                if(l<c) B.erase(mp(c-l, l));
                if(r>c) B.erase(mp(r-c, c+1));
                if(l<=r) B.insert(mp(r-l+1, l));
                all.erase(it);
            }
        }
    }

    return 0;
   }