#include <ctime>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <utility>
#define CLR(x,y) memset(x,y,sizeof(x))
using namespace std;
const int MAXN = 100010, INF = 0x3f3f3f3f;

struct Node {
	int key,prev,prio,sz,maxl;
	#define lc c[0]
	#define rc c[1]
	Node *c[2];
	Node();
	void update() {
		sz=lc->sz+rc->sz+1;
		maxl=max(max(lc->maxl,rc->maxl),key-prev);
	}
}TNode[MAXN],*nil=TNode,*PNode=nil+1,*rt=nil;
Node::Node(){ lc=rc=nil; maxl=sz=0; prio=INF; }

void zig(Node*&x,bool w) {
	Node *y=x->c[w]; x->c[w]=y->c[!w]; y->c[!w]=x;
	x->update(); y->update(); x=y;
}

void insert(Node*&x,int k) {
	if (x==nil){ x=PNode++; x->key=k; x->sz=1; x->prio=rand()%65535; return; }
	bool w=k>x->key;
	insert(x->c[w],k);
	if (x->prio>x->c[w]->prio) zig(x,w);else x->update();
}

void remove(Node*&x,int k) {
	if (x==nil) return;
	if (k<x->key) --x->sz, remove(x->lc,k); else
	if (k>x->key) --x->sz, remove(x->rc,k); else
	if (x->lc==nil) x=x->rc; else
	if (x->rc==nil) x=x->lc; else
	if (x->lc->prio<x->rc->prio){ zig(x,0); remove(x->rc,k); }
	else { zig(x,1); remove(x->lc,k); }
}

Node* next(Node *x) {
	if (x->rc!=nil) {
		x=x->rc;
		while (x->lc!=nil) x=x->lc;
		return x;
	}
	static Node* a[100];
	int n=0;
	for (Node *y=rt;y!=x;a[n++]=y,y=y->c[x->key>y->key]);
	a[n]=x;
	while (a[n]->key>a[n-1]->key) --n;
	return a[n-1];
}

void find(Node *x,int k) {
	if (k!=x->key) find(x->c[k>x->key],k);
	x->update();
}

struct HashTable {
	static const int P = (1<<21)-1;
	int h[P+1];
	Node *p[P+1];
	HashTable(){ CLR(h,0); CLR(p,0); }
	Node* &operator[](int i) {
		int j=i&P;
		while (h[j]&&h[j]!=i) ++j, j&=P;
		if (!h[j]) h[j]=i;
		return p[j];
	}
}H;

int getPos(Node *x) {
	while (1) {
		if (x->maxl==x->rc->maxl) x=x->rc; else
		if (x->maxl==x->key-x->prev) break; else x=x->lc;
	}
	return x->prev+x->key+1>>1;
}

int query(Node *x,int k) {
	int ret=0;
	while (x!=nil) {
		if (k>=x->key) ret+=x->lc->sz+1, x=x->rc;
		else if (k>=x->prev){ ret+=x->lc->sz; break; }
		else x=x->lc;
	}
	return ret;
}

int main() {
//	freopen("a.in","r",stdin); freopen("a.out","w",stdout);
	int n,tot,x,y;
	scanf("%d%d",&n,&tot);
	
	srand(time(NULL));
	insert(rt,n+1); insert(rt,0);

	while (tot--) {
		scanf("%d",&x);
		if (!x) {
			scanf("%d%d",&x,&y);
			printf("%d\n",query(rt,y)-query(rt,x-1));
		}
		else {
			Node*&hx=H[x];
			if (hx) {
				Node *t=next(hx);
				t->prev=hx->prev;
				remove(rt,hx->key);
				find(rt,t->key);
				hx=NULL;
			}
			else {
				int k=getPos(rt);
				insert(rt,k);
				hx=PNode-1;
				Node *t=next(hx);
				hx->prev=t->prev; t->prev=k;
				find(rt,t->key);
				find(rt,hx->key);
			}
		}
	}
}
