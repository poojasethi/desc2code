#include <cstdio>
#include <algorithm>
#include <map>
#include <cstring>
#define FOR(i,s,e) for (int i=(s); i<(int)(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(int)(e); i++)
using namespace std;

struct node{
	int x,y,s,v,lmx,rmx,mx,st;
	node *l, *r;
};

void init(node *T,int x,int y){
	T->v = 0;
	T->x = x, T->y = y;
	T->l = T->r = NULL;
	T->lmx = T->rmx = T->mx = T->s = y-x+1;
	T->st = x;
}

void upd(node *T, int pos,int v){
	if (T->x == T->y){
		T->v += v;
		if (T->v == 0){
			T->lmx = T->rmx = T->mx = 1;
			T->st = T->x;
		}
		else T->lmx = T->rmx = T->mx = 0;
	}
	else{
		int x,y;
		if (T->l == NULL){
			x = T->x;
			y = T->y;
			T->l = new node;
			init(T->l, x, (x+y)/2);
			T->r = new node;
			init(T->r, (x+y)/2+1, y);
		}
		if (pos <= T->l->y) upd(T->l, pos, v);
		else upd(T->r, pos, v);
		
		T->lmx = T->l->lmx;
		if (T->l->lmx == T->l->s) T->lmx = T->l->s + T->r->lmx;
		
		T->rmx = T->r->rmx;
		if (T->r->rmx == T->r->s) T->rmx = T->r->s + T->l->rmx;
		
		T->st = T->r->st;
		T->mx = T->r->mx;
		
		if (T->l->rmx + T->r->lmx > T->mx){
			T->mx = T->l->rmx + T->r->lmx;
			T->st = T->r->x - T->l->rmx;
		}
		
		if (T->l->mx > T->mx){
			T->mx = T->l->mx;
			T->st = T->l->st;
		}
		
		T->v = T->l->v + T->r->v;
		
	}
}

int query(node *T, int x, int y){
	if (x<=T->x && y>=T->y) return T->v;
	if (T->l == NULL) return 0;
	int ret = 0;
	if (x<=T->l->y) ret+=query(T->l,x,y);
	if (y>T->l->y) ret+=query(T->r,x,y);
	return ret;
}


int n,m,w,x,y,len,st,pos;
node *T;
map<int,int> a;


int main(){

	scanf("%d%d", &n, &m);
	T = new node;
	init(T, 1, n);
	
	while (m--){
		scanf("%d", &w);
		if (w==0){
			scanf("%d%d",&x,&y);
			printf("%d\n",query(T,x,y));
		}
		else{
			if (a[w]==0){
				len = T->mx;
				st = T->st;
				pos = st+len/2;
				a[w] = pos;
				upd(T, a[w], 1);
			}
			else{
				upd(T, a[w], -1);
				a[w] = 0;
			}
		}
	}
	
	return 0;
}
