#include<stdio.h>
#include<string.h>
#include<set>
#include<map>
#include<algorithm>
using namespace std;
map<int,int> h;
map<int,int>::iterator it;
map<int,int> h2;
map<int,int>::iterator it2;
struct empty_seg
{
	int x,y;
};
bool operator <(const empty_seg &a,const empty_seg &b)
{
	if (a.y-a.x!=b.y-b.x)
		return a.y-a.x<b.y-b.x;
	else
		return a.x<b.x;
}
empty_seg r;
set<empty_seg> he;
set<empty_seg>::iterator ite;
struct node
{
	int l,r,c,s;
	node *left,*right;
};
node a[5000000];
int z;
node *head;
node* new_node(int l,int r)
{
	node *p;
	p=&a[z];
	z++;
	p->l=l;
	p->r=r;
	p->c=(l+r)/2;
	p->s=0;
	p->left=p->right=NULL;
	return p;
}
void inst(node *p,int x)
{
	if (x==p->l&&x==p->r)
	{
		p->s++;
		return;
	}
	if (x<=p->c)
	{
		if (p->left==NULL)
			p->left=new_node(p->l,p->c);
		inst(p->left,x);
	}
	else
	{
		if (p->right==NULL)
			p->right=new_node(p->c+1,p->r);
		inst(p->right,x);
	}
	p->s++;
	return;
}
void del1(node *p,int x)
{
	if (x==p->l&&x==p->r)
	{
		p->s--;
		return;
	}
	if (x<=p->c)
		del1(p->left,x);
	else
		del1(p->right,x);
	p->s--;
	return;
}
int cal(node *p,int l,int r)
{
	if (p==NULL)
		return 0;
	if (p->l==l&&p->r==r)
		return p->s;
	if (p->c>=r)
		return cal(p->left,l,r);
	if (p->c<l)
		return cal(p->right,l,r);
	return cal(p->left,l,p->c)+cal(p->right,p->c+1,r);
}
int main()
{
	int n,q,x,y,u,v,w;
	scanf("%d %d",&n,&q);
	h.clear();
	h2.clear();
	h2.insert(pair<int,int>(0,-1));
	h2.insert(pair<int,int>(n+1,-1));
	he.clear();
	r.x=0;
	r.y=n+1;
	he.insert(r);
	z=0;
	head=new_node(0,n+1);
	inst(head,0);
	inst(head,n+1);
	while (q>0)
	{
		q--;
		scanf("%d",&x);
		if (x!=0)
		{
			it=h.find(x);
			if (it!=h.end())
			{
				w=it->second;
				//printf("God2!! %d\n",w);
				it2=h2.find(w);
				it2--;
				u=it2->first;
				it2++;
				it2++;
				v=it2->first;
				it2--;
				h2.erase(it2);
				del1(head,w);
				r.x=u;
				r.y=w;
				//printf("God2!! %d %d\n",r.x,r.y);
				//printf("GOD!! %d %d %d\n",w,u,v);
				he.erase(he.find(r));
				r.x=w;
				r.y=v;
				//printf("God2!! %d %d\n",r.x,r.y);
				he.erase(he.find(r));
				r.x=u;
				r.y=v;
				he.insert(r);
				h.erase(it);
			}
			else
			{
				ite=he.end();
				ite--;
				r=*ite;
				u=r.x;
				v=r.y;
				w=(r.x+r.y+1)/2;
				he.erase(ite);
				r.x=u;
				r.y=w;
				//printf("God1!! %d %d\n",r.x,r.y);
				he.insert(r);
				r.x=w;
				r.y=v;
				//printf("God1!! %d %d\n",r.x,r.y);
				he.insert(r);
				h.insert(pair<int,int>(x,w));
				h2.insert(pair<int,int>(w,x));
				inst(head,w);
				//printf("God1!! %d\n",w);
			}
		}
		else
		{
			scanf("%d %d",&x,&y);
			printf("%d\n",cal(head,x,y));
		}
	}
	return 0;
}
