#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cassert>
#include<map>
#include<set>
#define rep(i,n) for(int i=0;i<n;i++)
#define fr(i,c) for(__typeof (c.begin()) i=c.begin(); i!=c.end(); i++)
#define all(c) (c).begin(), (c).end()
#define pb push_back
using namespace std;

typedef vector<int> vi;
typedef long long ll;

struct itv{
  int l,r;
  bool operator<(const itv &b)const{
    return r-l!=b.r-b.l?r-l>b.r-b.l:r>b.r;
  }
};
int n,q;
map<int,int> bit;
int sum(int i){
  int res=0;
  for(;i;i-=i&-i)if(bit.count(i))res+=bit[i];
  return res;
}
void add(int i,int x){
  for(;i<=n;i+=i&-i)bit[i]+=x;
}
set<itv> itvs;
set<int> nums;
set<int>::iterator it,jt;
map<int,int> pos;

void run(){
  scanf("%d%d",&n,&q);
  nums.insert(0);
  nums.insert(n+1);
  itvs.insert((itv){ 1, n });
  
  rep(i,q){
    int id; scanf("%d",&id);
    if(id==0){
      int l,r; scanf("%d%d",&l,&r);
      printf("%d\n",sum(r)-sum(l-1));
    }
    else{
      if(pos[id]==0){
        itv mx=*itvs.begin();
        itvs.erase(mx);
        int mid=(mx.l+mx.r+1)/2;
        pos[id]=mid;
        nums.insert(mid);
        add(mid,1);
        if(mx.l<=mid-1)itvs.insert((itv){ mx.l,mid-1 });
        if(mid+1<=mx.r)itvs.insert((itv){ mid+1,mx.r });
      }
      else{
        int pre,mid,nxt;
        mid=pos[id];
        it=jt=nums.find(mid);
        pre=*--it;
        nxt=*++jt;
        if(pre+1<=mid-1)itvs.erase((itv){ pre+1,mid-1 });
        if(mid+1<=nxt-1)itvs.erase((itv){ mid+1,nxt-1 });
        if(pre+1<=nxt-1)itvs.insert((itv){ pre+1,nxt-1 });
        nums.erase(mid);
        add(mid,-1);
        pos[id]=0;
      }
      cerr<<endl;
    }
  }
}
int main(){
#ifndef ONLINE_JUDGE
  rep(i,3)
#endif
    run();
  return 0;
}
