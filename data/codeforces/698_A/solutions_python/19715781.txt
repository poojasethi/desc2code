# -*- coding: utf-8 -*-

import operator
import sys

sys.setrecursionlimit(1000000)

lookup_table = {}
def DP(a_tuple, i, last_activity, n):
    if (a_tuple, i, last_activity, n) in lookup_table:
        return lookup_table[(a_tuple, i, last_activity, n)]
    if i > n-1:
        return 0
    else:
        if a_tuple[i] == 0:
            possibilities = (None, )
        elif a_tuple[i] == 1:
            possibilities = (None, 'cp')
        elif a_tuple[i] == 2:
            possibilities = (None, 'sports')
        elif a_tuple[i] == 3:
            possibilities = (None, 'sports', 'cp')
        if last_activity and last_activity in possibilities:
            possibilities = tuple(p for p in possibilities
                                  if p != last_activity)
        results = []
        for p in possibilities:
            prev_call = DP(a_tuple, i+1, p, n)
            if p == None:
                results.append(prev_call+1)
            else:
                results.append(prev_call)
        result = min(results)
        lookup_table[(a_tuple, i, last_activity, n)] = result
        return result

if __name__ == '__main__':
    n = int(raw_input())
    aa = tuple(map(int, raw_input().split()))
    result = DP(aa, 0, None, n)
    print(str(result))
