#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;

const int MaxN = 510, MaxM = MaxN << 1;
int En[MaxN], Next[MaxM], Point[MaxM], V[MaxM], tot;
int N, X, A[MaxN][MaxN], col[MaxN];

void Add(int x, int y, int z) {
	Next[++tot] = En[x];
	En[x] = tot;
	Point[tot] = y;
	V[tot] = z;
}

bool vis[MaxN];
void dfs(int root, int now, int dist) {
	if (dist > X) return;
	vis[now] = 1;
	A[root][now] = 1;
	for (int i = En[now]; i; i = Next[i])
		if (!vis[Point[i]]) dfs(root, Point[i], dist + V[i]);
	vis[now] = 0;
}

class Simplex_Template {
public:
	static const int MaxN = 510, MaxM = 510;
	static const double eps = 1e-8, inf = 1e100;
	double c[MaxN][MaxM];
	int N, M;

	void Debug() {
		for (int i = 0; i <= M; ++i) {
			for (int j = 0; j <= N; ++j) printf("%.3lf ", c[i][j]);
			puts("");
		}
		puts("");
	}

	void Pivot(int col, int row) {
		double inv = 1.0 / c[row][col];
		for (int i = 0; i <= N; ++i) c[row][i] *= inv;
		for (int i = 0; i <= M; ++i)
			if ((i != row) && (fabs(c[i][col]) > eps)) {
				double tmp = c[i][col];
				for (int j = 0; j <= N; ++j)
					c[i][j] -= c[row][j] * tmp;
				c[i][col] = -tmp * inv;
			}
		c[row][col] = inv;
	}

	double simplex(int n, int m) {
		N = n;	M = m;
		while (1) {
			double tmp = -inf;
			int row = 0, col = 0;
			for (int i = 1; i <= N; ++i)
				if (c[0][i] > tmp) {
					tmp = c[0][i];
					col = i;
				}
			if (tmp < eps) return -c[0][0];
			tmp = inf;
			for (int i = 1; i <= M; ++i)
				if ((c[i][col] > eps) && (c[i][0] / c[i][col] < tmp)) {
					tmp = c[i][0] / c[i][col];
					row = i;
				}
			if (tmp >= inf) return inf;
			Pivot(col, row);
		}
	}
}	s;

int main()
{
	scanf("%d%d", &N, &X);
	int sum = 0;
	for (int i = 1; i <= N; ++i) {
		scanf("%d", col + i);
		sum += col[i];
	}
	for (int i = 1; i < N; ++i) {
		int u, v, w;
		scanf("%d%d%d", &u, &v, &w);
		Add(u, v, w);
		Add(v, u, w);
	}
	for (int i = 1; i <= N; ++i) dfs(i, i, 0);
	for (int i = 1; i <= N; ++i) s.c[0][i] = 1;
	s.c[0][N + 1] = -sum;
	for (int i = 1; i <= N; ++i) {
		for (int j = 1; j <= N; ++j)
			if (A[i][j]) s.c[i][j] = 1;
		s.c[i][N + 1] = -1;
		s.c[i][0] = !col[i];
	}
	double ans = s.simplex(N + 1, N);
	if (ans >= s.inf) cout << -1 << endl;
	else cout << int(ans) << endl;
	return 0;
}
