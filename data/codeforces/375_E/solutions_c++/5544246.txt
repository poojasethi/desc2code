#include <iostream>
#include <algorithm>
#include <cstring>
#include <climits>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <cmath>
#include <cstdio>
using namespace std;
const short INF = 30000;
vector<int> adj[505];
int N, D, siz[501];
bool C[505];
long long dist[505][505];
short F[501][501][501], G[501][501], distr[501];
void go(int x, int p = 0) {
	siz[x] = 1;
	for (int i = 0; i < adj[x].size(); ++i)
		if (adj[x][i] != p) {
			go(adj[x][i], x);
			siz[x] += siz[adj[x][i]];
		}
	for (int c = 1; c <= N; ++c) {
		for (int i = 0; i < siz[x]; ++i) distr[i] = INF;
		if (dist[x][c] <= D) {
			int n = 0;
			distr[0] = 0;
			for (int i = 0; i < adj[x].size(); ++i) {
				int y = adj[x][i];
				if (y == p) continue;
				for (int j = n + siz[y]; j >= 0; --j) {
					int v = INF;
					for (int k = max(0, j - n); k <= min(j, siz[y]); ++k) {
						short val = k == siz[y] ? INF : F[y][c][k];
						if (k) val = min(val, G[y][k - 1]);
						v = min(v, distr[j - k] + val);
					}
					distr[j] = v;
				}
				n += siz[y];
			}
		}
		for (int i = 0; i < siz[x]; ++i) F[x][c][i] = distr[i];
	}
	for (int i = 0; i < siz[x]; ++i) {
		G[x][i] = INF;
		for (int c = 1; c <= N; ++c)
			G[x][i] = min((int)G[x][i], F[x][c][i] + C[c]);
	}
}
int main() {
	int blacks = 0;
	scanf("%d%d", &N, &D);
	for (int i = 1; i <= N; ++i) {
		scanf("%d", &C[i]);
		blacks += C[i];
		C[i] = 1 - C[i];
	}
	for (int i = 1; i <= N; ++i)
		for (int j = 1; j <= N; ++j)
			dist[i][j] = i == j ? 0 : (1LL << 60);
	for (int i = 1; i < N; ++i) {
		int a, b, w;
		scanf("%d%d%d", &a, &b, &w);
		dist[a][b] = dist[b][a] = w;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	for (int k = 1; k <= N; ++k)
		for (int i = 1; i <= N; ++i)
			for (int j = 1; j <= N; ++j)
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
	go(1);
	int ans = INF;
	if (blacks) {
		for (int c = 1; c <= N; ++c)
			ans = min(ans, F[1][c][blacks - 1] + C[c]);
	}
	printf("%d\n", ans == INF ? -1 : ans);
}
