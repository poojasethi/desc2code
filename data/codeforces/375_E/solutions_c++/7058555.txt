#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

typedef long long ll;

const int N = 505;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define fd(i , st , en) for (int i = st; i >= en; i--)
#define Me(x , y) memset(x , y , sizeof(x))
#define Mc(x , y) memcpy(x , y , sizeof(x))

struct _three{
    int a , b , c;
}edge[N + N];

struct _two{
    int a; ll b;
}temp[N];

bool operator < (_two x , _two y){
    if (x.a != y.a) return x.a < y.a;
    return x.b < y.b;
}

int n , len , tot;
int st[N] , c[N] , s[N];
_two f[N][N];

void Init(){
    scanf("%d%d" , &n , &len); int x , y , z;
    fo (i , 1 , n) scanf("%d" , c + i);
    fo (i , 1 , n - 1){
        scanf("%d%d%d" , &x , &y , &z);
        edge[++tot] = (_three){y , st[x] , z}; st[x] = tot;
        edge[++tot] = (_three){x , st[y] , z}; st[y] = tot;
    }
}

void Calc(int x , int y , int l){
    Me(temp , 63);
    fo (i , 0 , s[y]){
        if (f[y][i].b > len + 1 && f[y][i].b - len - 2 + l > len){
            f[y][i].a++; f[y][i].b = 0;
        }
        if (f[y][i].b <= len && f[y][i].b + l > len + 1)
            f[y][i].b = len + 1;
        else
            f[y][i].b += l;
    }
   fo (i , 0 , s[y])
       fo (j , 0 , s[x]){
           ll t1 = f[y][i].b , t2 = f[x][j].b;
           _two tt = (_two){f[y][i].a + f[x][j].a , 0};
           if (t2 - len - 2 + t1 <= len)
               tt.b = min(t1 , t2);
           else tt.b = max(t1 , t2);
           if (tt < temp[i + j]) temp[i + j] = tt;
       }
    s[x] += s[y]; Mc(f[x] , temp);
}

void dfs(int x , int fa){
    for (int i = st[x]; i; i = edge[i].b)
        if (edge[i].a != fa) dfs(edge[i].a , x);
    s[x] = c[x] == 1;
    if (c[x]){
        f[x][0] = (_two){-1 , len + 2};
        f[x][1] = (_two){0 , 0};
    }
    else
        f[x][0] = (_two){0 , len + 2};
    for (int i = st[x]; i; i = edge[i].b)
        if (edge[i].a != fa) Calc(x , edge[i].a , edge[i].c);
}

void Work(){
    dfs(1 , 0);
    fd (i , s[1] , 0){
        if (f[1][i].b > len + 1) f[1][i].a++;
        if (f[1][i].a <= 0){
            printf("%d\n" , s[1] - i);
            return;
        }
    }
    puts("-1");
}

int main(){
    Init();
    Work();
    return 0;
}
