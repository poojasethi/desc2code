#include <cstdio>
#include <vector>
#include <memory.h>
#include <cmath>
using namespace std;

#define eps 1e-10
int n, x, i, j, p, sum, a, b, c, zhan[1100], cc[510], zhu[510];
vector <int> ve[510], l[510];
long double z[510][1100];

void dfs(int k, int ll, int fa, int p) {
	z[p][k]++;
	for (int i = 0; i < ve[k].size(); i++)
		if (ve[k][i] != fa && ll + l[k][i] <= x)	dfs(ve[k][i], ll + l[k][i], k, p);
}

void avoid(int x, int y) {
	z[x][zhu[x]] -= 1;
	zhu[x] = y;
	for (int i = 0; i <= 2 * n + 3; i++)	if (i != y)	z[x][i] /= -z[x][y];
	z[x][y] = 0;
	zhan[0] = 0;
	for (int i = 0; i <= 2 * n + 3; i++)	if (abs(z[x][i]) > eps)	zhan[++zhan[0]] = i;
	for (int i = 0; i <= n + 2; i++)
		if (abs(z[i][y]) > 0) {
			for (int j = 1; j <= zhan[0]; j++)
				z[i][zhan[j]] += z[x][zhan[j]] * z[i][y];
			z[i][y] = 0;
		}
}

void simplex(int x) {
	int k = 0;
	for (int i = 1; i <= n + 2; i++)
		if (z[i][x] < -eps && (!k || z[i][0] / z[i][x] > z[k][0] / z[k][x]))	k = i;
	avoid(k, x);
}

void doit() {
	while (true) {
		int i, k = 1;
		for (i = 1; i <= 2 * n + 3; i++)
			if (z[0][i] > z[0][k])	k = i;
		if (z[0][k] > eps)	simplex(k);
		else	break;
	}
}

int main() {
	// freopen("data.in", "r", stdin);
	scanf("%d%d", &n, &x);
	for (i = 1; i <= n; i++) {
		scanf("%d", &cc[i]);
		sum += cc[i];
	}
	for (i = 1; i < n; i++) {
		scanf("%d%d%d", &a, &b, &c);
		ve[a].push_back(b);
		l[a].push_back(c);
		ve[b].push_back(a);
		l[b].push_back(c);
	}
	for (i = 1; i <= n; i++)	dfs(i, 0, i, i), z[i][0] -= 1;
	for (i = 1; i <= n; i++) {
		z[n + 1][i] += 1;
		z[n + 2][i] -= 1;
	}
	z[n + 1][0] = -sum;
	z[n + 2][0] = sum;
	for (i = 1; i <= n + 2; i++)	zhu[i] = i + n;
	for (i = 1; i <= n + 2; i++)	z[i][2 * n + 3] += 1;
	z[0][2 * n + 3] = -1;
	avoid(n + 1, 2 * n + 3);
	doit();
	if (z[0][0] < -eps) {
		printf("-1\n");
		return 0;
	}
	for (i = 1; i <= n + 2; i++)
		if (zhu[i] == 2 * n + 3)	break;
	if (i < n + 3) {
		for (j = 1; j <= 2 * n + 2; j++)
			if (abs(z[i][j]) > eps)	break;
		avoid(i, j);
	}
	for (i = 0; i <= n + 2; i++)	z[i][2 * n + 3] = 0;
	memset(z[0], 0, sizeof(z[0]));
	for (i = 1; i <= n; i++)
		if (cc[i] == 0) {
			for (j = 1; j <= n + 2; j++)
				if (zhu[j] == i) break;
			if (j <= n + 2)	for (p = 0; p <= 2 * n + 2; p++)	z[0][p] -= z[j][p];
			else	z[0][i]--;
		}
	doit();
	printf("%d\n", int(-z[0][0] + 0.5));
}
