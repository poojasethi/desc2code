#include <ctime>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
using namespace std;

const int Sn = 502, inf = 10000;

int n, x, col[Sn], bnum, D[Sn][Sn], C[Sn], tC, sz[Sn];
short dp[Sn][Sn][Sn], sp[Sn][Sn], best[Sn][Sn], Ans;

struct edge {
     int to, nx, le;
} E[Sn*2];
int qE[Sn], En = 1;

void dfs(int d, int ff, int p, int rt)
{
     if (p > x + 1) p = x + 1;
     D[rt][d] = p;
     for (int j = qE[d], k; k = E[j].to, j; j = E[j].nx)
	  if (k != ff) dfs(k, d, p + E[j].le, rt);
}
void dpto(short b, short& a) {
     if (b < a) a = b;
}
void workans(int d, int ff)
{
     sz[d] = 1;
     for (int j = qE[d], k; k = E[j].to, j; j = E[j].nx)
	  if (k != ff) workans(k, d), sz[d] += sz[k];
     
     for (int e = 1; e <= n; e ++) {
	  
	  for (int j = 0; j <= bnum; j ++)
	       dp[d][j][e] = inf;
	  if (D[e][d] > x) continue;
	  
	  tC = 0;
	  for (int j = qE[d], k; k = E[j].to, j; j = E[j].nx)
	       if (k != ff) C[++tC] = k;

	  for (int j = 0; j <= bnum; j ++)
	       sp[0][j] = inf;
	  sp[0][0] = 0;
	  for (int q = 1, c, all = 0; c = C[q], q <= tC; q ++) {

	       for (int j = 0; j <= bnum; j ++)
		    sp[q][j] = inf;
	       for (int a = 0; a <= all && a <= bnum; a ++)
		    for (int b = 0; b <= sz[c] && a + b <= bnum; b ++) {
			 dpto(sp[q - 1][a] + dp[c][b][e], sp[q][a + b]);
			 dpto(sp[q - 1][a] + best[c][b], sp[q][a + b]);
		    }
	       all += sz[c];
	  }
	  
	  for (int j = 0; j <= bnum; j ++)
	       dp[d][j][e] = sp[tC][j];
     }

     best[d][0] = inf;
     for (int j = 0; j < bnum; j ++) {
	  best[d][j + 1] = inf;
	  for (int e = 1; e <= n; e ++)
	       dpto(dp[d][j][e] + (!col[e]), best[d][j + 1]);
     }
}

int main()
{
#ifndef ONLINE_JUDGE
     freopen("cf.in" , "r", stdin);
     freopen("cf.out", "w", stdout);
#endif
     scanf("%d%d", &n, &x);
     for (int i = 1; i <= n; i ++)
	  scanf("%d", col + i), bnum += col[i];
     for (int i = 1, u, v, w; i < n; i ++) {
	  scanf("%d%d%d", &u, &v, &w);
	  E[++En] = (edge){v, qE[u], w}, qE[u] = En;
	  E[++En] = (edge){u, qE[v], w}, qE[v] = En;
     }
     
     for (int i = 1; i <= n; i ++)
	  dfs(i, 0, 0, i);
     workans(1, 0);

     Ans = inf;
     for (int j = 0; j <= bnum; j ++)
	  Ans = min(Ans, best[1][j]);
     printf("%d\n", (Ans == inf)? -1: Ans);
}
