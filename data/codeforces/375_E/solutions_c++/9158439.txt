#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#define MAXN 506
using namespace std ;
typedef long long LL ;

struct road {
	int x, next ;
	int dis ;
} r[MAXN*2] ;

int N, M ;
short dp[MAXN][MAXN][MAXN], INF ;
short best[MAXN][MAXN], G[MAXN], H[MAXN] ;
int st[MAXN], w ;
int col[MAXN], size[MAXN] ;
LL D[MAXN][MAXN], K ;

void Add(int x, int y, int dis)
{
	r[++w].x = y, r[w].next = st[x] ;
	st[x] = w, r[w].dis = dis ;
	D[x][y] = dis ;
}

void Dfs(int x, int fr)
{
	int i, j, t, k, tmp ;
	for(i = st[x]; i; i = r[i].next)
		if((tmp=r[i].x) != fr)
			Dfs(tmp, x) ;
	for(i = 1; i <= N; i ++)
		if(D[x][i] <= K)
		{
			size[x] = 1 ;
			memset(G, 62, sizeof(G)) ;
			G[1] = col[i] ;
			for(j = st[x]; j; j = r[j].next)
				if((tmp=r[j].x) != fr)
				{
					memset(H, 62, sizeof(H)) ;
					for(t = 1; t <= min(size[x]+1, M+2); t ++)
						for(k = 1; k <= min(size[tmp]+1, M+2); k ++)
							if(t+k <= M+5)
							{
								H[t+k] = min((int)H[t+k], G[t]+best[tmp][k]) ;
								H[t+k-1] = min((int)H[t+k-1], G[t]+dp[tmp][k][i]-col[i]) ;
							}
					memcpy(G, H, sizeof(H)) ;
					size[x] += size[tmp] ;
				}
			for(j = 1; j <= size[x]+1; j ++)
				dp[x][j][i] = min(dp[x][j][i], G[j]), 
				best[x][j] = min(best[x][j], G[j]) ;
		}
}

int main()
{
	int i, j, t ;
	int fr, to, dis ;
	//freopen("1.in", "r", stdin) ;
	//freopen("1.out", "w", stdout) ;
	scanf("%d %I64d", &N, &K) ;
	memset(D, 62, sizeof(D)) ;
	for(i = 1; i <= N; i ++)
	{
		scanf("%d", &col[i]) ;
		M += col[i], col[i] ^= 1 ;
		D[i][i] = 0 ;
	}
	for(i = 1; i < N; i ++) 
	{
		scanf("%d %d %d", &fr, &to, &dis) ;
		Add(fr, to, dis), Add(to, fr, dis) ;
	}
	for(t = 1; t <= N; t ++)
		for(i = 1; i <= N; i ++)
			for(j = i+1; j <= N; j ++)
				D[i][j] = D[j][i] = min(D[i][j], D[i][t]+D[t][j]) ;
	memset(best, 62, sizeof(best)) ;
	memset(dp, 62, sizeof(dp)) ;
	INF = best[0][0] ;
	Dfs(1, 0) ;	
	if(best[1][M]==INF) puts("-1") ;
	else printf("%d\n", best[1][M]) ;
	//system("pause") ;
	return 0 ;
}
