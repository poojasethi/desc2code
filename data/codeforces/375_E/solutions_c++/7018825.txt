#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <map>
#include <set>
#include <vector>
#include <bitset>
#include <queue>
using namespace std;

#define rep(i, s, t) for (int i = (s); i <= (t); ++i)
#define REP(i, n) rep(i, 1, n)
typedef long long LL;
#define INF 1000000007
#define inf 10007

const int MAX_N = 502;
int d[MAX_N][MAX_N];
int g[MAX_N << 1], nxt[MAX_N << 1], c[MAX_N], nm;
int n, D, m;
int a[MAX_N];
short f[MAX_N][MAX_N][MAX_N];
int F[MAX_N][MAX_N], h[MAX_N], q[MAX_N];
int s[MAX_N];

inline void relax(int &x, int y){
    if (x > y) x = y;
}

void addedge(int x, int y){
    g[nm] = y; nxt[nm] = c[x]; c[x] = nm; nm++;
}

void dfs(int i, int p){
    REP(e, m) F[i][e] = inf;
    REP(x, n) REP(e, m)
        f[i][x][e] = inf;
    for (int k = c[i]; ~k; k = nxt[k]){
        int j = g[k];
        if (j != p) dfs(j, i);
    }
    REP(x, n){
        if (d[i][x] > D) continue;
        s[i] = 1;
        q[1] = a[x];
        rep(e, 2, m) q[e] = inf;
        for (int k = c[i]; ~k; k = nxt[k]){
            int j = g[k];
            if (j == p) continue;
            REP(e, s[i]) h[e] = q[e], q[e] = inf;
            REP(e1, s[i]){
                int mx = s[j];
                relax(mx, m - e1 + 1);
                REP(e2, mx){
                    relax(q[e1 + e2], h[e1] + F[j][e2]);
                    if (d[j][x] <= D)
                        relax(q[e1 + e2 - 1], h[e1] + f[j][x][e2] - a[x]);
                }
            }
            s[i] += s[j];
        }
        REP(e, m){
            relax(F[i][e], q[e]);
            f[i][x][e] = q[e];
            //printf("f[%d,%d,%d] =  %d\n", i, x, e, q[e]);
        }
    }
}

int main(){
    memset(c, -1, sizeof c);
    scanf("%d%d", &n, &D);
    REP(i, n){
        scanf("%d", &a[i]);
        m += a[i];
        a[i] ^= 1;
    }
    REP(i, n) REP(j, n)
        d[i][j] = i == j ? 0 : INF;
    REP(i, n - 1){
        int x, y, w;
        scanf("%d%d%d", &x, &y, &w);
        addedge(x, y);
        addedge(y, x);
        d[x][y] = d[y][x] = w;
    }
    REP(k, n) REP(i, n) REP(j, n){
        if (k == i || i == j || k == j) continue;
        relax(d[i][j], d[i][k] + d[k][j]);
    }
    dfs(1, -1);
    if (F[1][m] == inf)
        puts("-1");
    else printf("%d\n", F[1][m]);
    //system("pause");
}