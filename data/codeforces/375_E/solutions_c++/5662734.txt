#include <map>
#include <queue>
#include <ctime>
#include <vector>
#include <string>
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
typedef long long llong;
using namespace std;
#define rep(i,n) for(int i=0 ; i<(n) ; i++ )
#define ls ((rt)<<1)
#define rs (((rt)<<1)+1)
#define mid ((l+r)>>1)
#define maxn 501
#define INF 10001
struct node{
	int v,w;
};vector<node> e[maxn];
short dp[maxn][maxn][maxn];
int dp2[maxn][maxn],best[maxn][maxn],
col[maxn],dist[maxn][maxn],n,x,sz[maxn];

void initdist(int u,int fa,int rt,int d) {
	if (d>=x+1) d=x+1;
	dist[rt][u]=d;
	rep (i,(int)e[u].size()) {
		if (e[u][i].v==fa) continue;
		initdist(e[u][i].v,u,rt,d+e[u][i].w);
	}
}

void dfs(int u,int fa) {
	int chd[maxn],nch=0;
	sz[u]=1;
	rep (i,(int)e[u].size()) {
		if (e[u][i].v==fa) continue;
		dfs(e[u][i].v,u);
		chd[nch++]=e[u][i].v;
		sz[u] += sz[e[u][i].v];
	}
//	printf("*********************************\n");
//	printf("u:%d\n",u);
	rep (w,n) {
		if (dist[u][w]>x) continue;
		if (nch) {
			int tot=1,c,c1;
			c = chd[0];
			tot += sz[c];
			rep (i,tot)
				dp2[c][i] = min((int)dp[c][i][w],best[c][i]);
			for (int i=0 ; i<nch-1 ; i++ ) {
				c = chd[i];
				c1 = chd[i+1];
				rep (j,tot+sz[c1]+1) dp2[c1][j] = INF;
				rep (j,tot) rep(k,sz[c1]+1) {
					if (k<sz[c1]) dp2[c1][j+k] = min(dp2[c1][j+k],dp2[c][j]+dp[c1][k][w]);
					dp2[c1][j+k] = min(dp2[c1][j+k],dp2[c][j]+best[c1][k]);
				}
				tot += sz[c1];
			}
		}
	//	printf("w:%d\n",w);
	//	rep (i,nch) rep (j,sz[u]+1) printf("dp2[%d][%d]=%d\n",chd[i],j,dp2[chd[i]][j]);
		rep (i,sz[u]) {
			if (nch) dp[u][i][w] = dp2[chd[nch-1]][i];
			else dp[u][i][w] = 0;
	//		printf("dp[%d][%d][%d]=%d\n",u,i,w,dp[u][i][w]);
		}
		rep (i,sz[u]) {
			best[u][i+1] = min(best[u][i+1],dp[u][i][w]+(col[w]==0));
		}
	}
//	rep (i,sz[u]+1) printf("best[%d][%d]=%d\n",u,i,best[u][i]);
//	printf("*********************************\n");
}

void solv() {
	rep (i,n) initdist(i,-1,i,0);
	rep (i,maxn) rep (j,maxn) rep (k,maxn) dp[i][j][k]=INF;
	rep (i,maxn) rep (j,maxn) dp2[i][j]=INF,best[i][j]=INF;
	dfs(0,-1);
	int ans = INF;
	int cntb=0;
	rep (i,n) cntb += col[i];
	rep (i,cntb+1) ans = min(ans,best[0][i]);
	printf("%d\n",ans==INF?-1:ans);
}

int main(){
//	freopen("test.txt","r",stdin);
	scanf("%d%d",&n,&x);
	rep (i,n) scanf("%d",&col[i]);
	rep (i,n-1) {
		int u,v,w;
		scanf("%d%d%d",&u,&v,&w);
		u--, v--;
		e[u].push_back((node){v,w});
		e[v].push_back((node){u,w});
	}
	solv();
	return 0;
}
