#include <iostream>
using namespace std;

const int INF = (1 << 30) + 1;
int ans,a,b,c,d;

void dfs(int n, int a, int b, int c, int d)
{
	if (n < 1 || a < 1 || b < 1 || c < 1 || d < 1 || a > n || b > n || c > n || d > n || a > b || c > d) return;
	if (a <= c && b >= d) { ans = max(ans, d - c + 1); return ;}
	if (c <= a && d >= b) { ans = max(ans, b - a + 1); return ;}

	int mid = n / 2 + 1;
	if (a <= mid && mid <= b && c <= mid && mid <= d) ans = max(ans, min(b, d) - max(a, c) + 1);
	int X[][2] = {{a, b}, {a, b < mid ? -1 : mid-1}, {a > mid ? INF : mid+1, b}};
	int Y[][2] = {{c, d}, {c, d < mid ? -1 : mid-1}, {c > mid ? INF : mid+1, d}};
	for (int i=0; i<3; i++)
		for (int j=0; j<3; j++)
		{
			dfs(n/2, X[i][0], X[i][1], Y[j][0], Y[j][1]);
			dfs(n/2, X[i][0]-mid, X[i][1]-mid, Y[j][0], Y[j][1]);
			dfs(n/2, X[i][0], X[i][1], Y[j][0]-mid, Y[j][1]-mid);
			dfs(n/2, X[i][0]-mid, X[i][1]-mid, Y[j][0]-mid, Y[j][1]-mid);
		}
}
int main(void)
{
	cin >> a >> b >> c >> d;
	dfs((1<<30)-1, a, b, c, d);
	cout << ans << "\n";

	return 0;
}

