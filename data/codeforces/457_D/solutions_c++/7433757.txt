// {{{
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <numeric>
#define REP(i, n) for (int i = 0; i < (int) (n); ++i)
#define FOR(i, a, b) for (int i = (int) (a); i <= (int) (b); ++i)
#define FORD(i, a, b) for (int i = (int) (a); i >= (int) (b); --i)
#define FORE(it, c) for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
#define SIZE(x) ((int) ((x).size()))
#define DEBUG(x) { cerr << #x << ": " << (x) << endl; }
#define SQR(x) ((x) * (x))
#define INF 1023456789
using namespace std;

template<typename T, typename U> ostream& operator << (ostream& os, const pair<T, U>& p) {
    os << "(" << p.first << "," << p.second << ")"; return os;
}

template<typename T> ostream& operator << (ostream& os, const vector<T>& v) {
    os << "["; FORE(i, v) { if (i != v.begin()) os << ", "; os << *i; } os << "]"; return os;
}

typedef long long LL;
typedef pair<int, int> PI;
typedef pair<int, PI> TRI;
typedef vector<int> VI;
typedef vector<VI> VVI;
// }}}

int main() {
    int n, m, k;
    scanf("%d%d%d", &n, &m, &k);

    vector<vector<double> > C(n + 1);
    FOR(i, 0, n) {
        C[i].resize(i + 1);
        C[i][0] = 1;
        FOR(j, 1, i - 1)
            C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
        C[i][i] = 1;
    }

    vector<double> P(SQR(n) + 1, 0);
    P[0] = 1.0;
    FOR(i, 1, SQR(n))
        P[i] = P[i - 1] * (k - i + 1) / (m - i + 1);

    double res = 0.0;
    FOR(a, 0, n) FOR(b, 0, n)
        res += C[n][a] * C[n][b] * P[(a + b) * n - a * b];

    printf("%.10lf\n", min(res, 1e99));
}
