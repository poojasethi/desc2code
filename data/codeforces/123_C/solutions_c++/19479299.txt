#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
const int N = 201;
int p[N][N] , dir[2*N] , n , m;
long long dp[2*N][2*N];
int v[N];
long long f(){
    dp[0][1] = 1LL;
    for(int i=1 ; i<=n+m-2 ; i++)
        for(int j=0 ; j<=n+m ; j++){
            dp[i][j] = 0;
            long long l1 = dp[i-1][j+1] , l2 = ( j>0 ? dp[i-1][j-1] : 0 );
            if( dir[i] == 1 ) dp[i][j] = l1;
            if( dir[i] == 0 ) dp[i][j] = l2;
            if( dir[i] == -1 )
                dp[i][j] = l1 + l2;
            if( dp[i][j] > 1e18+1e9 ) dp[i][j] = 1e18+1e9;
        }

    return dp[n+m-2][0];
}

int main(){
    fill(dir , dir+2*N , -1);
    long long k;scanf("%d%d%I64d" , &n , &m , &k); k --;
    vector< pair<int , int> > t;
    for(int i=0 ; i<n ; i++)
        for(int j=0 ; j<m ; j++){
            scanf("%d" , &p[i][j]);
            if( v[i+j] == 0 || v[i+j] > p[i][j] )
                v[i+j] = p[i][j];
        }
    for(int i=0 ; i<=n+m-2 ; i++) t.push_back( pair<int , int>( v[i] , i ) );
    sort( t.begin() , t.end() );
    for(int i=0 ; i<=n+m-2 ; i++){
        dir[ t[i].second ] = 0;
        long long F = f();
        if( F <= k)
            k-=F , dir[ t[i].second ] = 1;
    }
    for(int i=0 ; i<n ; i++){
        for(int j=0 ; j<m ; j++){
            printf( "%c" , (dir[i+j] == 0 ? '(' : ')' ) );
        }
        printf("\n");
    }
}
