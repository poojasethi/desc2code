#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long int lint;

lint tope=1000000000000000000LL;

lint cuantos(int n,vector<int> &sol)
{
  vector<lint> v(n,0);
  v[0]=1;
  for (int i=0;i<n;i++) {
    vector<lint> nextv(n,0);
    if (sol[i]==0 or sol[i]==-1) {
      for (int j=1;j<n;j++)
	nextv[j]=min(nextv[j]+v[j-1],tope);
    }
    if (sol[i]==1 or sol[i]==-1) {
      for (int j=0;j<n-1;j++)
	nextv[j]=min(nextv[j]+v[j+1],tope);
    }
    v=nextv;
  }
  return v[0];
}

vector<int> kesimo(int n,vector<int> &orden,lint k)
{
  vector<int> sol(n,-1);
  for (int i=0;i<n;i++) {
    int pos=orden[i];
    sol[pos]=0;
    lint c=cuantos(n,sol);
    if (c<k) {
      sol[pos]=1;
      k-=c;
    }
  }
  return sol;
}

int main()
{
  int n,m;
  lint k;
  cin>>n>>m>>k;
  vector<int> prioridad(n+m-1,n*m);
  for (int i=0;i<n;i++) {
    for (int j=0;j<m;j++) {
      int p;
      cin>>p;
      prioridad[i+j]=min(prioridad[i+j],p);
    }
  }
  vector<pair<int,int> > parpri;
  for (int i=0;i<n+m-1;i++)
    parpri.push_back(pair<int,int> (prioridad[i],i));
  sort(parpri.begin(),parpri.end());
  vector<int> orden;
  for (int i=0;i<n+m-1;i++)
    orden.push_back(parpri[i].second);
  vector<int> sol=kesimo(n+m-1,orden,k);
  for (int i=0;i<n;i++) {
    for (int j=0;j<m;j++) {
      if (sol[i+j]==0)
	cout<<"(";
      else
	cout<<")";
    }
    cout<<endl;
  }
}
