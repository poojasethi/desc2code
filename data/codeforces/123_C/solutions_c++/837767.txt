#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
using namespace std;

typedef long long int64;
const int maxn = 210;

int c[maxn][maxn];
int x[10005], y[10005];
int n, m;
int64 k;

void Read () {
	scanf("%d%d%I64d", &n, &m, &k);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++) {
			scanf("%d", &c[i][j]);
			x[c[i][j]] = i;
			y[c[i][j]] = j;
		}
}

int v[maxn];
int64 f[maxn][maxn];
bool exceed[maxn][maxn];

void Dp () {
	memset(exceed, false, sizeof(exceed));
	memset(f, 0, sizeof(f));
	f[0][0] = 1;
	for (int i = 0; i < n + m -1; i++)
		for (int j = 0; j <= n + m; j++) 
			if (f[i][j]) {
				if (v[i + 1] != 1) {
					f[i + 1][j + 1] += f[i][j];
					if (f[i + 1][j + 1] < 0 || exceed[i][j]) exceed[i + 1][j + 1] = true; 
				}
				if (v[i + 1] != 0 && j > 0) {
					f[i + 1][j - 1] += f[i][j];
					if (f[i + 1][j - 1] < 0 || exceed[i][j]) exceed[i + 1][j - 1] = true;
				}
			}
}

void Solve () {
	memset(v, -1, sizeof(v));
	for (int i = 1; i <= n * m; i++) if (v[x[i] + y[i] - 1] == -1) {
		v[x[i] + y[i] - 1] = 0;
		Dp();
		if (f[n + m - 1][0] >= k || exceed[n + m - 1][0]) continue;
		v[x[i] + y[i] - 1] = 1;
		k -= f[n + m - 1][0];
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if (v[i + j - 1] == 0) printf("(");
				else printf(")");
		}
		printf("\n");
	}
}

int main () { 
	Read();
	Solve();
	return 0;
}
