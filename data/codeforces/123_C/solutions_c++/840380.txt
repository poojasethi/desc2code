#include <cstdio>
#include <iostream>
#include <cstring>

using namespace std;

#define MaxN 110
#define llint long long
#define MAX 1000000000000000001LL

struct field {
  int r, c;

  field (int _r = 0, int _c = 0) {
    r = _r;
    c = _c;
  }
};

int N, M, D [2 * MaxN];
field F [MaxN * MaxN];
llint K, dp [2 * MaxN][2 * MaxN];
char ans [MaxN][MaxN];

llint f (int r, int s) {
  if (r == N + M - 1) return (s == 0) ? 1 : 0;
  if (dp[r][s] != -1) return dp[r][s];

  llint ret = 0;
  
  if (D[r] != 0) {
    if (s > 0 || (s == 0 && D[r] == 1))
      ret = f(r + 1, s + D[r]);
  }
  else {
    ret += f(r + 1, s + 1);
    if (s > 0)
      ret += f(r + 1, s - 1);
  }

  if (ret > MAX)
    ret = MAX;

  return dp[r][s] = ret;
}

int main (void) {
  scanf("%d %d",&N,&M);
  cin >> K;
  for (int r = 0; r < N; ++r)
    for (int c = 0; c < M; ++c) {
      int x;
      scanf("%d",&x);
      F[x - 1] = field(r,c);
    }

  for (int i = 0; i < N * M; ++i) {
    memset (dp, -1, sizeof(dp));
    bool contr = false;
    llint cnt = 0;

    if (D[F[i].r + F[i].c] == -1)
      contr = true;

    if (!contr) {
      D[F[i].r + F[i].c] = 1;
      ans[F[i].r][F[i].c] = '(';
      cnt = f(0,0);
    }
    
    if (contr || K > cnt) {
      K -= cnt;
      ans[F[i].r][F[i].c] = ')';
      D[F[i].r + F[i].c] = -1;
    }   
  }
  
  for (int r = 0; r < N; ++r)
    printf("%s\n",ans[r]);
  

  return 0;
}
