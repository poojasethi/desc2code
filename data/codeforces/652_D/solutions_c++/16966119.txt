#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;
struct node{
	int l,r,id;
}no[211111];
int b[211111],ans[211111],sum[211111<<3];

bool cmp(node a,node b){
	if(a.r<b.r)	return true;
	else if(a.r>b.r)	return false;
	else	return a.l>b.l;	
}

int query(int L,int R,int l,int r,int rt){
	if(l>R||r<L)	return 0;
	if(l<=L&&R<=r){
		return sum[rt];
	}
	int m=(L+R)>>1;
	return query(L,m,l,r,rt*2)+query(m+1,R,l,r,rt*2+1);
}
void update(int L,int R,int aim,int rt){
	if(L==R){
		sum[rt]++;
		return;
	}
	int m=(L+R)>>1;
	if(aim<=m)	update(L,m,aim,rt*2);
	else update(m+1,R,aim,rt*2+1);
	sum[rt]=sum[rt*2]+sum[rt*2+1];
}

int main(){
	int n;
	scanf("%d",&n);
	
	for(int i=1;i<=n;i++){
		scanf("%d%d",&no[i].l,&no[i].r);
		no[i].id=i;
		b[i]=no[i].l;
	}
	memset(sum,0,sizeof(sum));
	sort(no+1,no+n+1,cmp);
	sort(b+1,b+n+1);
	for(int i=1;i<=n;i++){
		int x=lower_bound(b+1,b+1+n,no[i].l)-b;
		ans[no[i].id]=query(1,n,x,n,1);
		update(1,n,x,1); 
	}
	for(int i=1;i<=n;i++)	printf("%d\n",ans[i]);
	return 0;
} 