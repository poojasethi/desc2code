#include<iostream>
#include<cstring>
#include<algorithm>
#include<map>
using namespace std;
map<int,int>s;
struct inf{
	int b;
	int e;
	int num;
}segments[200005];
int anss[200005];
bool cmp1(inf a,inf b)
{
	return a.b<b.b;
}
bool cmp2(inf a,inf b)
{
	return a.e<b.e;
}
int p[250000];
int lowbit(int x)
{
	return x&(-x);
}
void upd(int x,int num)
{
	while(x<=250000)
	{
		p[x]+=num;
		x+=lowbit(x);
	}
}
int read(int x)
{
	int ans=0;
	while(x>0)
	{
		ans+=p[x];
		x-=lowbit(x);
	}
	return ans;
}
int main()
{
	ios::sync_with_stdio(0);
	int n;
	int b,e;
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		cin>>b>>e;
		segments[i].b=b;
		segments[i].e=e;
		segments[i].num=i;
	}
	sort(segments+1,segments+1+n,cmp1);
	for(int i=1;i<=n;i++)
	{
		segments[i].b=i;
	}
	sort(segments+1,segments+1+n,cmp2);
	for(int i=1;i<=n;i++)
	{
		anss[segments[i].num]=read(n)-read(segments[i].b);
		upd(segments[i].b,1);
	}
	for(int i=1;i<=n;i++)
	cout<<anss[i]<<endl;
}