#include <bits/stdc++.h>
using namespace std;
const int N = 500010;
int tree[N];
int value(int id){
	int ans = 0; 
	while (id > 0){
	    ans += tree[id];
	    id -= id & -id;
	}
	return ans;
}
void update(int id, int val){
	while (id < N){
	    tree[id] += val;
	    id += id & -id;
	}
}
map<long long, pair<long long, int> > m;
int ans[200010];
long long far = 1e12; 
vector<long long> pts; 
map<long long, int> comp; 
int main(){
	int n;
	cin>>n;
	int x, y;
	for (int i = 0; i < n; i++) {
		scanf("%d %d", &x, &y);
		m[far + x] = make_pair(y, i);
		m[y] = make_pair(-far, i);
		pts.push_back(y);
		pts.push_back(far + x);
	}
	sort(pts.begin(), pts.end());
	for (int i = 0; i < int(pts.size()); i++) comp[pts[i]] = i + 1;
	for (int i = 0; i < int(pts.size()); i++) {
		long long st = m[pts[i]].first;
		int ind = m[pts[i]].second;
		if(st == -far) update(comp[pts[i]], 1);
		else {
			update(comp[st], -1);
			ans[ind] = value(comp[st]); 
		}
	}
	for (int i = 0; i < n; i++) printf("%d\n", ans[i]);
}