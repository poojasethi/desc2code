#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxn=200010;

struct Segment {int l,r,id,ans;}S[maxn];
int cmpr(const Segment &a,const Segment &b) {return a.r<b.r;}
int cmpi(const Segment &a,const Segment &b) {return a.id<b.id;}

int temp[maxn<<1],ts;
int f[maxn<<1];
int n;

int lowbit(int x) {return x&-x;}
void Add(int x) {while (x<=ts) f[x]++,x+=lowbit(x);}
int Query(int x) {int res=0;while (x) res+=f[x],x-=lowbit(x);return res;}

int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;i++) scanf("%d%d",&S[i].l,&S[i].r),S[i].id=i,temp[++ts]=S[i].l,temp[++ts]=S[i].r;
	sort(temp+1,temp+1+ts);
	ts=unique(temp+1,temp+1+ts)-(temp+1);
	for (int i=1;i<=n;i++) S[i].l=lower_bound(temp+1,temp+1+ts,S[i].l)-temp,S[i].r=lower_bound(temp+1,temp+1+ts,S[i].r)-temp;
	sort(S+1,S+1+n,cmpr);
	for (int i=1;i<=n;i++)
	{
		S[i].ans=Query(S[i].r)-Query(S[i].l-1);
		Add(S[i].l);
	}
	sort(S+1,S+1+n,cmpi);
	for (int i=1;i<=n;i++) printf("%d\n",S[i].ans);
	return 0;
}
