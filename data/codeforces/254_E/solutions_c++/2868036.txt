#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;

const int MAXN = 404, INF = 0x3f3f3f3f;

int n, v, a[MAXN], m, l[MAXN], r[MAXN], f[MAXN];
vector <pair <int, int> > fr[MAXN];
int cache[MAXN][MAXN];
int best[MAXN][MAXN];

int rec(int day, int food)
{
    if (day == n)
        return 0;

    if (food+a[day] < v) return -INF;

    int& ret = cache[day][food];
    if (ret != -1) return ret;

    ret = rec(day+1, min(a[day], a[day]+food-v));
    best[day][food] = 0;

    int cost = 0;

    for (int i=0; i<fr[day].size(); i++)
    {
        cost += fr[day][i].first;
        if (food+a[day] < v+cost) break;

        int tmp = ret;
        ret = max(ret, i+1+rec(day+1, min(a[day], a[day]+food-v-cost)));
        if (ret > tmp)
            best[day][food] = i+1;
    }
    return ret;
}

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    memset(cache, -1, sizeof(cache));

    cin >> n >> v;
    for (int i=0; i<n; i++)
        cin >> a[i];

    cin >> m;
    for (int i=0; i<m; i++)
        cin >> l[i] >> r[i] >> f[i];

    for (int i=0; i<m; i++)
        for (int j=l[i]-1; j<r[i]; j++)
            fr[j].push_back(make_pair(f[i], i+1));

    for (int i=0; i<n; i++)
        sort(fr[i].begin(), fr[i].end());

    cout << rec(0, 0) << endl;
    
    int food = 0;
    for (int i=0; i<n; i++)
    {
        cout << best[i][food];
        int cost = 0;
        for (int j=0; j<best[i][food]; j++)
        {
            cost += fr[i][j].first;
            cout << ' ' << fr[i][j].second;
        }
        cout << endl;

        food = min(a[i], a[i]+food-v-cost);
    }
    return 0;
}
