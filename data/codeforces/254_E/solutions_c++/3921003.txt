//In the name of God
#include <fstream>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

typedef pair<int, int> pii;
const int oo = 1e9;
ifstream fin("input.txt");
ofstream fout("output.txt");
//#define fin cin
//#define fout cout

int n, m, a[401], v, dp[500][500];
pii par[500][500];
vector<pii> per[401];
vector<int> ans;

int main() {
	ios_base::sync_with_stdio(false);
	fin >> n >> v;
	for (int i = 1; i <= n; i++)
		fin >> a[i];
	for (int i = 1; i <= n; i++)
		per[i].push_back(pii(v, 0));
	fin >> m;
	for (int i = 1; i <= m; i++) {
		int l, r, f;
		fin >> l >> r >> f;
		for (int j = l; j <= r; j++)
			per[j].push_back(pii(f, i));
	}
	for (int i = 1; i <= n; i++)
		if (per[i].size() > 1)
			sort(per[i].begin() + 1, per[i].end());
	fill(dp[0], dp[n + 1], -oo);
	dp[0][0] = 0;
	for (int day = 1; day <= n; day++)
		for (int num = 0, need = 0; num < per[day].size(); num++) {
			need += per[day][num].first;
			for (int rem = 0; rem <= a[day]; rem++)
				if (rem + need - a[day] <= 400)
					if (dp[day][rem] < dp[day - 1][max(0, rem + need - a[day])] + num) {
						dp[day][rem] = dp[day - 1][max(0, rem + need - a[day])] + num;
						par[day][rem] = pii(num, max(0, rem + need - a[day]));
					}
		}
	int l = max_element(dp[n], dp[n + 1]) - dp[n];
	fout << dp[n][l] << '\n';
	for (int i = n; i; i--) {
		ans.push_back(par[i][l].first);
		l = par[i][l].second;
	}
	for (int i = n - 1; i >= 0; i--) {
		fout << ans[i] << ' ';
		for (int j = 1; j <= ans[i]; j++)
			fout << per[n - i][j].second << ' ';
		fout << '\n';
	}
	return 0;
}
