#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>

using namespace std;

#define MN 500

vector<int> F[MN];
int G[MN][MN],A[MN];
int L[MN][MN],C[MN][MN];

void upd( int a1, int a2, int c, int last, int count)
{
    if (G[a1][a2]==-1||G[a1][a2]<c)
    {
        G[a1][a2]=c;
        L[a1][a2]=last;
        C[a1][a2]=count;
    }
}

void Outp( int a, int b)
{
    if (a<=1) return;
    Outp(a-1,L[a][b]);
    bool f=0;
    if (C[a][b]==-1)
        puts("0");
    else 
        printf("%d",C[a][b]+1);
    for (int i=0;i<=C[a][b];i++) 
    {
        printf(" %d",F[a-1][i]);
    }
    puts("");
}

int a[MN],b[MN],c[MN];
int N,V,M,MM;

bool cmp( int a, int b) {return c[a]<c[b];}

int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    scanf("%d%d",&N,&V);
    for (int i=1;i<=N;i++) scanf("%d",A+i);
    scanf("%d",&M);
    for (int i=1;i<=M;i++)
    {
        scanf("%d%d%d",&a[i],&b[i],&c[i]);
        for (int j=a[i];j<=b[i];j++) F[j].push_back(i);
    }
    for (int i=1;i<=N;i++) sort(F[i].begin(),F[i].end(),cmp);
    memset(G,0xff,sizeof G);
    G[1][0]=0;
    for (int i=1;i<=N;i++)
        for (int j=0;j<=400;j++)
            if (G[i][j]!=-1&&A[i]+j>=V)
            {
                int t=A[i]+j-V;
                upd(i+1,min(t,A[i]),G[i][j],j,-1);
                for (int k=0;k<F[i].size();k++)
                {
                    if (t>=c[F[i][k]]) upd(i+1,min(t-c[F[i][k]],A[i]),G[i][j]+k+1,j,k);
                    else break;
                    t-=c[F[i][k]];
                }
            }
    M=0;
    for (int j=0;j<=400;j++)
        if (G[N+1][j]>M)
        {
            M=G[N+1][j];
            MM=j;
        }
    printf("%d\n",M);
    Outp(N+1,MM);
}