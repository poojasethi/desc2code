#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<set>
#include<map>
#include<queue>
#include<complex>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cassert>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef pair<int,int> pi;
typedef long long ll;
const int inf=(int)1e9;
const double EPS=1e-9, INF=1e12;

int n, m, v;
int l[500], r[500], f[500];
int a[500];
int dp[500][500], prev[500][500];
vector<pi> w[500];

int main(){
	#ifdef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	#endif
	
	memset(dp, -1, sizeof(dp));
	dp[0][0] = 0;
	
	cin >> n >> v;
	rep(i, n) cin >> a[i];
	cin >> m;
	rep(i, m) cin >> l[i] >> r[i] >> f[i];
	
	rep(i, n){
		rep(j, m) if(l[j] <= i + 1 && i + 1 <= r[j]) w[i].pb(mp(f[j], j));
		sort(all(w[i]));
		
		rep(j, 500) if(dp[i][j] >= 0){
			int food = j + a[i] - v;
			if(food < 0) continue;
			
			int l = 0;
			for(; l <= w[i].size(); l++){
				int nj = min(food, a[i]);
				if(dp[i + 1][nj] < dp[i][j] + l){
					dp[i + 1][nj] = dp[i][j] + l;
					prev[i + 1][nj] = j;
				}
				if(l == w[i].size() || food < w[i][l].first) break;
				food -= w[i][l].first;
			}
		}
	}
	int ai = 0;
	rep(i, 500) if(dp[n][i] > dp[n][ai]) ai = i;
	cout << dp[n][ai] << endl;
	
	vi path;
	for(int i = n; i > 0; i--){
		int p = prev[i][ai];
		path.pb(dp[i][ai] - dp[i - 1][p]);
		ai = p;
	}
	reverse(all(path));
	
	rep(i, n){
		cout << path[i];
		rep(j, path[i]) cout << " " << w[i][j].second + 1;
		cout << endl;
	}
	return 0;
}
