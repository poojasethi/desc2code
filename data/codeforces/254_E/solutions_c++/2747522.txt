
#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <bitset>

using namespace std;

const int maxn = 401;
int n, v, a[maxn], m, g[maxn][maxn], p[maxn][maxn];
struct friend_t {
	int l, r, f, ind;
	bool operator<(const friend_t &r) const {
		return f < r.f;
	}
} f[maxn];

void dump(int i, int j) {
	if (i == 0) return;
	dump(i - 1, p[i][j]);
	int cnt = g[i][j] - g[i - 1][p[i][j]];
	printf("%d", cnt);
	for (int k = 1; k <= m; ++k) {
		if (i >= f[k].l && i <= f[k].r) {
			if (--cnt >= 0) {
				printf(" %d", f[k].ind);
			}
		}
	}
	printf("\n");
}

int main() {
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	scanf("%d%d", &n, &v);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", &a[i]);
	}
	scanf("%d", &m);
	for (int i = 1; i <= m; ++i) {
		scanf("%d%d%d", &f[i].l, &f[i].r, &f[i].f);
		f[i].ind = i;
	}
	sort(f + 1, f + 1 + m);
	memset(g, -1, sizeof(g));
	g[0][0] = 0;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j <= a[i]; ++j) {
			if (g[i][j] >= 0) {
				int r = a[i + 1] + j - v;
				if (g[i + 1][min(r, a[i + 1])] < g[i][j]) {
					g[i + 1][min(r, a[i + 1])] = g[i][j];
					p[i + 1][min(r, a[i + 1])] = j;
				}
				for (int k = 1, cnt = 0; k <= m; ++k) {
					if (i + 1 >= f[k].l && i + 1 <= f[k].r) {
						++cnt;
						r -= f[k].f;
						if (r >= 0) {
							if (g[i + 1][min(r, a[i + 1])] < g[i][j] + cnt) {
								g[i + 1][min(r, a[i + 1])] = g[i][j] + cnt;
								p[i + 1][min(r, a[i + 1])] = j;
							}
						}
					}
				}
			}
		}
	}
	int ret = *max_element(g[n], g[n] + 1 + a[n]);
	printf("%d\n", ret);
	for (int i = 0; i <= a[n]; ++i) {
		if (ret == g[n][i]) {
			dump(n, i);
			break;
		}
	}
	return 0;
}
