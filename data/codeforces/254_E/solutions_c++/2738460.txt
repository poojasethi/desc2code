/*
ID: espr1t
TASK: 
KEYWORDS: 
*/

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;
FILE *in; FILE *out;

const int MAX = 512;
const int INF = 1000000000;

int n, m, k;
int a[MAX];
int r[MAX][MAX], len[MAX];
vector < pair <int, int> > v[MAX];
int dyn[MAX][MAX], with[MAX][MAX];

int recurse(int idx, int rem) {
    if (idx >= n)
        return 0;
    if (dyn[idx][rem] != -1)
        return dyn[idx][rem];
    
    int ans = -INF, wth = -1;
    for (int i = 0; i <= (int)v[idx].size(); i++) {
        if (a[idx] + rem < r[idx][i])
            break;
        int nrem = a[idx] - (rem >= r[idx][i] ? 0 : r[idx][i] - rem);
        int cur = recurse(idx + 1, nrem) + i;
        if (ans < cur)
            ans = cur, wth = i;
    }
    with[idx][rem] = wth;
    return dyn[idx][rem] = ans;
}

int main(void) {
	in = stdin; out = stdout;
	in = fopen("input.txt", "rt"); out = fopen("output.txt", "wt");
	
	fscanf(in, "%d %d", &n, &k);
	for (int i = 0; i < n; i++)
        fscanf(in, "%d", &a[i]);

	fscanf(in, "%d", &m);
	for (int i = 0; i < MAX; i++)
        len[i] = 1;
	for (int i = 0; i < m; i++) {
	    int l, r, f;
	    fscanf(in, "%d %d %d", &l, &r, &f);
	    for (int c = l - 1; c <= r - 1; c++)
            v[c].push_back(make_pair(f, i));
	}
	for (int i = 0; i < n; i++) {
	    sort(v[i].begin(), v[i].end());
	    r[i][0] = k;
	    for (int c = 1; c <= (int)v[i].size(); c++)
            r[i][c] = r[i][c - 1] + v[i][c - 1].first;
	}
	memset(dyn, -1, sizeof(dyn));
	int ans = recurse(0, 0);
	fprintf(out, "%d\n", ans);
	int rem = 0;
	for (int idx = 0; idx < n; idx++) {
	    fprintf(out, "%d", with[idx][rem]);
	    for (int i = 0; i < with[idx][rem]; i++)
            fprintf(out, " %d", v[idx][i].second + 1);
        fprintf(out, "\n");
        rem = a[idx] - (rem >= r[idx][with[idx][rem]] ? 0 : r[idx][with[idx][rem]] - rem);
	}
	return 0;
}
