#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;
int N,V,M,d[405],dyn[405][405],go[405][405];
struct kek
{
	int x,ind;
}ydk;
bool cmp(kek a,kek b)
{
	return a.x<b.x;
}
vector <kek> v[405];
int fun(int day,int lft)
{	
	if (day==N+1)
	{
		return 0;
	}
	if (dyn[day][lft]!=-1) return dyn[day][lft];

	int food=lft+d[day];
	if (food<V) return -10000;
	food-=V;
	int res=fun(day+1,min(d[day],food));
	go[day][lft]=0;
	for (int i=0;i<(int)v[day].size() && food-v[day][i].x>=0;i++)
	{
		food-=v[day][i].x;
		int tmp=fun(day+1,min(d[day],food))+i+1;
		if (tmp>res)
		{
			res=tmp;
			go[day][lft]=i+1;
		}
	}
//	printf("%d %d %d\n",day,lft,res);
	return dyn[day][lft]=res;
}
int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	memset(dyn,-1,sizeof(dyn));
	scanf("%d %d",&N,&V);
	for (int i=1;i<=N;i++)
		scanf("%d",&d[i]);
	scanf("%d",&M);
	for (int i=1,a,b,c;i<=M;i++)
	{
		scanf("%d %d %d",&a,&b,&c);
		for (int k=a;k<=b;k++)
		{
			ydk.x=c;
			ydk.ind=i;
			v[k].push_back(ydk);
		}
	}
//	printf("-------------\n");
	for (int i=1;i<=N;i++)
		sort(v[i].begin(),v[i].end(),cmp);
	printf("%d\n",fun(1,0));
	int tmpday=1,tmplft=0;
	while(1)
	{
		if (tmpday==N+1) break;
		printf("%d",go[tmpday][tmplft]);
		int sum=V;
		for (int i=0;i<go[tmpday][tmplft];i++)
		{
			printf(" %d",v[tmpday][i].ind);
			sum+=v[tmpday][i].x;
		}
	//	printf(" sum %d ",sum);
		puts("");
		tmplft=min(tmplft+d[tmpday]-sum,d[tmpday]);
		tmpday++;
	}
	/*for (int i=1;i<=N;i++,puts(""))
		for (int j=0;j<=10;j++)
			printf("%d ",go[i][j]);*/
}
