#include <iostream>
#include <fstream>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

ifstream fin("input.txt");
ofstream fout("output.txt");

#define MAXN 410

vector< pair<int, int> > v[MAXN];

int N, V, M, a[MAXN], dp[MAXN][MAXN], elim[MAXN][MAXN];

int dinamicu(int pas, int rem) {
    if (pas > N)
        return 0;
    if (dp[pas][rem] != -1)
        return dp[pas][rem];

    int avem = rem - V;
    int sum = 0, ans = 0;

    ans = dinamicu (pas + 1, avem < 0 ? a[pas] + avem : a[pas]);
    elim[pas][rem] = -1;

    for (int i = 0; i < v[pas].size(); ++i) {
        sum += v[pas][i].first;

        int nrem = sum > avem ? avem + a[pas] - sum : a[pas];

        if (nrem < 0) break;

        int rez = dinamicu(pas + 1, nrem) + i + 1;

        if (rez > ans) {
            ans = rez;
            elim[pas][rem] = i;
        }
    }

    dp[pas][rem] = ans;

    return dp[pas][rem];
}

int main() {
    fin >> N >> V;

    for (int i = 1; i <= N; ++i)
        fin >> a[i];
    fin >> M;

    for (int i = 1; i <= M; ++i) {
        int st, fn, f;

        fin >> st >> fn >> f;

        for (int j = st; j <= fn; ++j)
            v[j].push_back(make_pair(f, i));
    }

    for (int i = 1; i <= N; ++i)
        sort(v[i].begin(), v[i].end());

    memset(dp, -1, sizeof(dp));

    fout << dinamicu(1, 0) << "\n";

    int rem = 0, sum = 0;
    for (int i = 1; i <= N; ++i) {
        sum = V;
        fout << elim[i][rem] + 1 << " ";

        for (int j = 0; j <= elim[i][rem]; ++j) {
            sum += v[i][j].first;
            fout << v[i][j].second << " ";
        }

        rem = sum > rem ? rem + a[i] - sum : a[i];
        fout << "\n";
    }

    return 0;
}
