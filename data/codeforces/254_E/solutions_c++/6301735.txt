#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <string.h>

using namespace std;
#define NN 1000

typedef long long int64;
typedef pair<int, int> pii;

int best[NN][NN], cnt[NN][NN], pos[NN][NN];
int deg[NN], adj[NN][NN], anscnt[NN];
int f[NN], a[NN];

bool cmp(int u, int v) {
	return f[u]<f[v];
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

	int n, v, i, m, l, r, j, s, k, ans;
	scanf("%d%d", &n, &v);
	for (i=0; i<n; i++) scanf("%d", a+i);
	scanf("%d", &m);
	memset(deg, 0, sizeof(deg));
	for (i=0; i<m; i++) {
		scanf("%d%d%d", &l, &r, f+i);
		l--; r--;
		for (j=l; j<=r; j++) adj[j][deg[j]++]=i;
	}
	memset(cnt, 0, sizeof(cnt));
	for (i=0; i<n; i++) {
		if (!deg[i]) continue;
		sort(adj[i], adj[i]+deg[i], cmp);
		for (j=s=0; j<deg[i]; j++) {
			s+=f[adj[i][j]];
			if (s>=NN) break;
			cnt[i][s]=j+1;
		}
		for (j=1; j<NN; j++) cnt[i][j]=max(cnt[i][j], cnt[i][j-1]);
	}
	
	memset(best, -1, sizeof(best));
	for (i=0; i<=a[0]-v; i++) {
		best[0][i]=cnt[0][a[0]-v-i];
		pos[0][i]=0;
	}
	for (i=1; i<n; i++) {
		for (j=0; j<=a[i]; j++) {
			for (k=0; k<=a[i-1]; k++) {
				if (best[i-1][k]==-1) continue;
				s=a[i]+k-v-j;
				if (s<0) continue;
				if (best[i][j]<best[i-1][k]+cnt[i][s]) {
					best[i][j]=best[i-1][k]+cnt[i][s];
					pos[i][j]=k;
				}
			}
		}
	}
	ans=k=0;
	for (i=0; i<=a[n-1]; i++) {
		if (best[n-1][i]>ans) {
			ans=best[n-1][i];
			k=i;
		}
	}
	for (i=n-1; i>=0; i--) {
		j=pos[i][k];
		s=a[i]+j-v-k;
		anscnt[i]=cnt[i][s];
		k=j;
	}
	printf("%d\n", ans);
	for (i=0; i<n; i++) {
		printf("%d", anscnt[i]);
		for (j=0; j<anscnt[i]; j++) printf(" %d", adj[i][j]+1);
		puts("");
	}

	return 0;
}
