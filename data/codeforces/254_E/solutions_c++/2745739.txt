//program 254-E

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<vector>

using namespace std;

struct Data
{
  int Food,Number;
};

bool operator <(Data A,Data B)
{
  return A.Food<B.Food;
}

const int inf=1000000000;

int main()
{
  freopen("input.txt","r",stdin);
  freopen("output.txt","w",stdout);
  int N,V;scanf("%d%d",&N,&V);
  static int A[400];
  for(int i=0;i<N;i++)scanf("%d",&A[i]);
  int M;scanf("%d",&M);
  vector<Data> List[400];
  for(int i=0;i<M;i++)
    {
      int L,R,U;scanf("%d%d%d",&L,&R,&U);
      for(int j=L-1;j<R;j++)
        List[j].push_back((Data){U,i+1});
    }
  static int Cost[400][401];
  for(int i=0;i<N;i++)
    {
      sort(List[i].begin(),List[i].end());
      Cost[i][0]=V;
      for(int j=0;j<List[i].size();j++)
        Cost[i][j+1]=Cost[i][j]+List[i][j].Food;
    }
  static int DP[401][401],Opt[401][401];
  for(int i=0;i<=400;i++)DP[N][i]=0;
  for(int i=N-1;i>=0;i--)
    for(int j=0;j<=400;j++)
      {
        DP[i][j]=-inf;
        for(int k=0;k<=List[i].size();k++)
          {
            if(j+A[i]<Cost[i][k])continue;
            int Temp=DP[i+1][A[i]-max(Cost[i][k]-j,0)];
            if(Temp<0)continue;
            if(Temp+k>DP[i][j])
              {
                DP[i][j]=Temp+k;
                Opt[i][j]=k;
              }
          }
      }
  printf("%d\n",DP[0][0]);
  for(int i=0,j=0;i<N;i++)
    {
      int T=Opt[i][j];
      printf("%d",T);
      for(int k=0;k<T;k++)
        printf(" %d",List[i][k].Number);
      putchar('\n');
      j=A[i]-max(Cost[i][T]-j,0);
    }
  return 0;
}
