#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;

#define rep(i,l,r) for (int i=(l); i<=(r); i++)
#define repd(i,r,l) for (int i=(r); i>=(l); i--)

#define maxn 410
#define INF 1000000000

vector< pair<int,int> > vec[maxn];
int dp[maxn][maxn], way[maxn][maxn], pre[maxn][maxn], a[maxn], cn[maxn];

void upd(int &a, int &c, int &e, int b, int d, int f)
{
	if (b>a) a=b, c=d, e=f;
}

void lemon()
{
	int n, vn; scanf("%d%d",&n,&vn);
	rep(i,1,n) scanf("%d",&a[i]);
	int m; scanf("%d",&m);
	rep(i,1,n) vec[i].clear();
	rep(i,1,m) 
	{
		int l,r,need; scanf("%d%d%d",&l,&r,&need);
		rep(j,l,r) vec[j].push_back(make_pair(need,i));
	}
	rep(i,1,n) sort(vec[i].begin(),vec[i].end());
	//dp[n][S] max popularity when having S kilos of yesterday's food left on day n
	rep(i,1,n+1) rep(j,0,400) dp[i][j]=-INF;
	dp[1][0]=0;
	rep(i,1,n)
		rep(j,0,400)
			if (dp[i][j]>=0)
			{
				int k=j-vn, p=0, c=0; while (p<vec[i].size() && k>=vec[i][p].first) k-=vec[i][p].first, p++, c++;
				if (k>=0) upd(dp[i+1][a[i]],way[i+1][a[i]],pre[i+1][a[i]],dp[i][j]+c,p,j);
				k+=a[i]; 
				if (k>=0 && k<a[i]) upd(dp[i+1][k],way[i+1][k],pre[i+1][k],dp[i][j]+c,p,j);
				while (p<vec[i].size() && k>=vec[i][p].first)
				{
					k-=vec[i][p].first; c++; p++;
					upd(dp[i+1][k],way[i+1][k],pre[i+1][k],dp[i][j]+c,p,j);
				}
			}
	int final=-1, bestj;
	rep(j,0,400) if (dp[n+1][j]>final) final=dp[n+1][j], bestj=j;
	printf("%d\n",final);
	repd(i,n+1,2)
	{
		cn[i-1]=way[i][bestj];
		bestj=pre[i][bestj];
	}
	rep(i,1,n)
	{
		printf("%d",cn[i]);
		rep(j,0,cn[i]-1) printf(" %d",vec[i][j].second);
		printf("\n");
	}
}

int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	lemon();
	return 0;
}