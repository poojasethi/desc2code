#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<fstream>
#include<map>
#include<ctime>
#include<set>
#include<queue>
#include<cmath>
#include<vector>
#include<bitset>
#include<functional>
#define x first
#define y second
#define mp make_pair
#define pb push_back
using namespace std;

typedef long long LL;
typedef double ld;

const int MAX=500+10;

int n,v,a[MAX],m;
int l[MAX],r[MAX],f[MAX];

vector<int> pp[MAX];

int cmp(int a,int b)
{
	return f[a]<f[b];
}

int dp[MAX][MAX],come[MAX][MAX],cost[MAX][MAX];
int q[MAX];

int main()
{
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
	int i,j,k;
	scanf("%d%d",&n,&v);
	for(i=1;i<=n;++i)
		scanf("%d",&a[i]);
	scanf("%d",&m);
	for(i=1;i<=m;++i)
	{
		scanf("%d%d%d",&l[i],&r[i],&f[i]);
		for(j=l[i];j<=r[i];++j)
			pp[j].pb(i);
	}
	for(i=1;i<=n;++i)
		sort(pp[i].begin(),pp[i].end(),cmp);
	for(i=0;i<MAX;++i)
		for(j=0;j<MAX;++j)
			dp[i][j]=-1;
	dp[0][0]=0;
	for(i=1;i<=n;++i)
		for(j=0;j<=400;++j)
			if(dp[i-1][j]!=-1)
			{
				int dd=a[i]+j,sum=v,re;
				if(sum>dd)continue;
				re=min(a[i],dd-sum);
				if(dp[i][re]==-1 || dp[i][re]<dp[i-1][j]+0)
				{
					dp[i][re]=dp[i-1][j]+0;
					cost[i][re]=0;
					come[i][re]=j;
				}
				for(k=0;k<(int)pp[i].size();++k)
				{
					sum+=f[pp[i][k]];
					if(sum>dd)break;

					re=min(a[i],dd-sum);
					if(dp[i][re]==-1 || dp[i][re]<dp[i-1][j]+k+1)
					{
						dp[i][re]=dp[i-1][j]+k+1;
						cost[i][re]=k+1;
						come[i][re]=j;
					}
				}
			}
	int dd=-1;
	for(i=0;i<MAX;++i)
		if(dd==-1 || dp[n][dd]<dp[n][i])
			dd=i;
	printf("%d\n",dp[n][dd]);
	for(i=n;i>=1;--i)
	{
		q[i]=cost[i][dd];
		dd=come[i][dd];
	}
	for(i=1;i<=n;++i)
	{
		printf("%d ",q[i]);
		for(j=0;j<q[i];++j)
			printf("%d ",pp[i][j]);
		printf("\n");
	}
	return 0;
}
