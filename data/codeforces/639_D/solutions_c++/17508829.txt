#include <stdio.h>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <map>
#include <iostream>
#include <stdlib.h>
#include <math.h>
#include <algorithm>
#define inf 0x3f3f3f3f
#define mem0(x , y)  memset(x , y , sizeof(x))
#define ll long long
using namespace std ;
ll a[1000000] ;
ll ans = 1000000000000000000 ;
struct node{
    ll val ; int id ;
    bool operator < (const node & n)const{
        return val < n.val  ;
    }
}tnode ;
int main(){
    ///freopen("1" , "r" ,stdin) ;
    int n , k , b,  c ;
    scanf("%d%d%d%d" , &n,&k,&b,&c) ;
    for(int i=1;i<=n;i++) {
        scanf("%I64d" , &a[i]) ; a[i] += 1e9 ;
    }
    sort(a+1 , a+n+1) ;
    ll mcost = min(b , 5*c) ;
    for(int yu=0;yu<5;yu++){
        priority_queue <node> q ;
        ll tans = 0 ;
        ll last = 0 ;
        for(int i=1;i<=n;i++){
            for(int j=0;j<5;j++) if((a[i]+j)%5 == yu){
                ll tmp = a[i] + j ;
                tans += q.size() * mcost * (tmp - last)/5 ;
                last = tmp ;
                tnode.id = i ; tnode.val = j*c - mcost * (tmp-yu)/5 ;
                if(q.size() == k){
                    tans -= q.top().val + mcost * (tmp-yu)/5 ;
                    q.pop() ;
                }
                q.push(tnode) ; tans += j * c ;
                if(q.size() == k) ans = min(ans , tans) ;
            }
        }
    }
    cout << ans << endl ;
}
