#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <set>
#include <map>
#include <vector>
#include <cstring>

using namespace std;
const int N = 1<<24;
const int inf=(int) 1e9;
int dist[25][25];
int back[25];
int best[N];
int path[N];
int n,x,y;
int main(){
	
	//cout<<N;
	cin>>x>>y;
	cin>>n;
	int tx[25],ty[25];
	for (int i=0;i<n;i++)
	cin>>tx[i]>>ty[i];
	for (int i=0;i<n;i++)
	for (int j=0;j<n;j++)
	dist[i][j]=(tx[i]-tx[j])*(tx[i]-tx[j])+(ty[i]-ty[j])*(ty[i]-ty[j]);
	for (int i=0;i<n;i++)
	back[i]=(x-tx[i])*(x-tx[i])+(y-ty[i])*(y-ty[i]);
	memset(best,127,sizeof(best));
	//cout<<best[0]<<endl;
	best[0]=0;
	for (int mask=0;mask<(1<<n);mask++){
		if (best[mask]>inf) continue;
		for (int k=0;k<n;k++)
		if (!(mask&(1<<k))){
			for (int j=k;j<n;j++)
			if (!(mask&(1<<j)))
			{
				int next=mask|1<<j|1<<k;
				int newvalue=best[mask]+back[j]+back[k]+dist[j][k];
				if (best[next]>newvalue){
					best[next]=newvalue;
					path[next]=mask;
				}
			}
			break;
		}
	}
	cout<<best[(1<<n)-1]<<endl<<"0";
	for (int i=(1<<n)-1;i;i=path[i]){
		int j=i^path[i];
		for (int t=0;t<n;t++)
		if (j&1<<t)
		cout<<" "<<(t+1);
		cout<<" 0";
		
	}
	
	
}