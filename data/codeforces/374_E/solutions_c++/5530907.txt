#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <bitset>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <climits>
typedef long long LL;
using namespace std;

struct seg{
    int a,l,r;
    seg(){}
    seg(int _a,int _l,int _r){
        a=_a; l=_l; r=_r;
    }   
};
vector<int> a[2100],b[2100];
int u[2100],v[2100],N,M;
bool flag[2100][2100];

void initPoint(int &N,vector<int> a[],int u[],int d){
    map<int,int> p;
    int n=0,i;
    for (i=0;i<N;i++){
        int x,y;
        scanf("%d%d",&x,&y); 
        int t=x+y*d;
        if (!p[t]){
            p[t]=++n; u[n]=t;
        }
        a[p[t]].push_back(x);
    }
    N=n;
    for (i=1;i<=N;i++) sort(a[i].begin(),a[i].end());
}

void initSeg(int N,vector<int> a[],int u[],vector<seg> &s,int d){
    int i,j;
    for (i=1;i<=N;i++){
        int l=a[i][0]-d,r=a[i][0]+d,size=a[i].size();
        for (j=1;j<size;j++){
            int x=a[i][j];
            if (x-d<=r) r=x+d;
            else{
                s.push_back(seg(u[i],l<<1,r<<1));
                l=x-d; r=x+d;
            }
        }
        s.push_back(seg(u[i],l<<1,r<<1));
    }
}

bool gao(int d){
    vector<seg> s,t;
    initSeg(N,a,u,s,d); initSeg(M,b,v,t,d);
    vector<int> a;
    int i,j,k;
    memset(flag,0,sizeof(flag));
    for (i=0;i<s.size();i++){
        a.clear();
        for (j=0;j<t.size();j++){
            int x=s[i].a+t[j].a;
            if (s[i].l<=x && x<=s[i].r && t[j].l<=x && x<=t[j].r) a.push_back(j);
        }
        for (j=0;j<a.size();j++)
            for (k=j+1;k<a.size();k++){
                int x=a[j],y=a[k];
                if (flag[x][y]) return 1;
                flag[x][y]=1;
            }
    }
    return 0;
}

int main(){
    cin >> N >> M;
    initPoint(N,a,u,1); initPoint(M,b,v,-1);
    if (N==1 || M==1){
        puts("Poor Sereja!"); return 0;
    }
    int l=1,r=10000000;
    while (l<r){
        int mid=l+r>>1;
        if (gao(mid)) r=mid;
        else l=mid+1;
    }
    cout << r << endl;
}
