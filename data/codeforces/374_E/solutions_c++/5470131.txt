#include <algorithm>
#include <iostream>
#include <cstring>
#include <sstream>
#include <vector>
#include <cmath>
#include <set>
#include <map>

using namespace std;

#define int long long

#define ff first
#define ss second
#define mp make_pair
#define sqr(x) ((x)*(x))

typedef long long ll;
typedef pair <int, int> pie;

const int maxN = 2000 + 100;

int n, m;
pie a[maxN], b[maxN];
map <int, vector <int> > red, blue;
vector <pair <int, pie> > reds, blues;
vector <int> adj[maxN];
bool inc[maxN][maxN];

bool check (int x) {
//	cerr << "check " << x <<endl;
	reds.clear(), blues.clear();
	for (int i = 0; i < maxN; i++)
		adj[i].clear();
	memset (inc, 0, sizeof inc);
	for (map <int, vector <int> >::iterator it = red.begin(); it != red.end(); it++) {
		vector <pie> T;
		for (int i = 0; i < (it -> ss).size(); i++)
			T.push_back (a[(it -> ss)[i]]);
		sort (T.begin(), T.end());
		vector <pie> ans;
		for (int i = 0; i < T.size(); ) {
			int j = i + 1; 
			while (j < T.size() && T[j - 1].ff + x >= T[j].ff - x) j++;
			reds.push_back (make_pair (it -> ff, pie (T[i].ff - x, T[j - 1].ff + x)));
			i = j;
		}
	}
	for (map <int, vector <int> >::iterator it = blue.begin(); it != blue.end(); it++) {
		vector <pie> T;
		for (int i = 0; i < (it -> ss).size(); i++)
			T.push_back (b[(it -> ss)[i]]);
		sort (T.begin(), T.end());
		vector <pie> ans;
		for (int i = 0; i < T.size(); ) {
			int j = i + 1; 
			while (j < T.size() && T[j - 1].ff + x >= T[j].ff - x) j++;
			blues.push_back (make_pair (it -> ff, pie (T[i].ff - x, T[j - 1].ff + x)));
			i = j;
		}
	}
	int N = reds.size(), M = blues.size();
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++) {
			int x1 = reds[i].ss.ff, x2 = reds[i].ss.ss;
			int y1 = reds[i].ff - x1, y2 = reds[i].ff - x2;
			int x3 = blues[j].ss.ff, x4 = blues[j].ss.ss;
			int y3 = x3 - blues[j].ff, y4 = x4 - blues[j].ff;
			if (x3 + y3 <= x1 + y1 && x1 + y1 <= x4 + y4 &&
				x1 - y1 <= x3 - y3 && x3 - y3 <= x2 - y2)
				adj[i].push_back (j);
		}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < adj[i].size(); j++)
			for (int k = 0; k < j; k++) {
				int x = adj[i][j], y = adj[i][k];
				if (x > y) swap (x, y);
				if (inc[x][y]) return true;
				inc[x][y] = 1;
			}
	}
	return false;
}

main() {
	ios::sync_with_stdio (false);
	
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> a[i].ff >> a[i].ss,
		red[a[i].ff + a[i].ss].push_back (i);
	for (int i = 0; i < m; i++)
		cin >> b[i].ff >> b[i].ss,
		blue[b[i].ff - b[i].ss].push_back (i);

	if (red.size() < 2 || blue.size() < 2) {
		cout << "Poor Sereja!" << endl;
		return 0;
	}

	int s = 0, e = 1000 * 1000 * 1000;
	while (e - s > 1) {
		int m = (s + e) / 2;
		if (check (m)) e = m;
		else s = m;
	}

	cout << e << endl;

	return 0;
}
