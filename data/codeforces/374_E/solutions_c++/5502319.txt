#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <cstdlib>
using namespace std;
#define MAXN 2005
struct Point{
    int x,y;
    Point(){};
    Point(int x,int y):x(x),y(y){};
};
int n,m,p,q;
Point red[MAXN],blue[MAXN];
int Map[MAXN][MAXN];
int inter[MAXN];
int tot;
struct Segment{
    Point a,b;
    Segment(){};
};
Segment Blue[MAXN],Red[MAXN];

int x,y;

int cmp_blue(Point a,Point b){
    if (a.x!=b.x) return a.x<b.x;
    else
        return a.y<b.y;
}

int cmp_red(Point a,Point b){
    if (a.y!=b.y) return a.y<b.y;
    else
        return a.x<b.x;
}

void Union_blue(Segment &a,Segment &b){
    if (b.a.x==a.a.x)
    if (b.a.y<=a.b.y){
        a.b.y=b.b.y;
        return;
    }
    Blue[p++]=b;
    return;
}

void Union_red(Segment &a,Segment &b){
    if (b.a.y==a.a.y)
    if (b.a.x<a.b.x){
        a.b.x=b.b.x;
        return;
    }
    Red[q++]=b;
    return;
}

int check(int d){
    //printf("Check%d\n",d);
    Blue[0].a=Point(blue[0].x,blue[0].y-2*d);
    Blue[0].b=Point(blue[0].x,blue[0].y+2*d);
    p=1;
    for (int i=1;i<n;i++){
        Blue[i].a=Point(blue[i].x,blue[i].y-2*d);
        Blue[i].b=Point(blue[i].x,blue[i].y+2*d);
        Union_blue(Blue[p-1],Blue[i]);
    }
    /*for (int i=0;i<p;i++){
        printf("%d,%d,%d,%d\n",Blue[i].a.x,Blue[i].a.y,Blue[i].b.x,Blue[i].b.y);
    }*/
    Red[0].a=Point(red[0].x-2*d,red[0].y);
    Red[0].b=Point(red[0].x+2*d,red[0].y);
    q=1;
    for (int i=1;i<m;i++){
        Red[i].a=Point(red[i].x-2*d,red[i].y);
        Red[i].b=Point(red[i].x+2*d,red[i].y);
        Union_red(Red[q-1],Red[i]);
    }
    /*for (int i=0;i<q;i++){
        printf("%d,%d,%d,%d\n",Red[i].a.x,Red[i].a.y,Red[i].b.x,Red[i].b.y);
    }*/
    memset(Map,0,sizeof Map);
    for (int i=0;i<p;i++){
        tot=0;
        for (int j=0;j<q;j++){
            if ((Blue[i].a.y<=Red[j].a.y)&&
                (Blue[i].b.y>=Red[j].a.y)&&
                (Red[j].a.x<=Blue[i].a.x)&&
                (Red[j].b.x>=Blue[i].a.x)
                )
            inter[tot++]=j;
        }
        //printf("tot=%d\n",tot);
        for (int j=0;j<tot;j++)
        for (int k=j+1;k<tot;k++)
            if (Map[inter[j]][inter[k]]) return 1;
            else
                Map[inter[j]][inter[k]]=Map[inter[k]][inter[j]]=1;
    }
    return 0;
}


int main(){
    scanf("%d%d",&n,&m);
    for (int i=0;i<n;i++){
        scanf("%d%d",&x,&y);
        blue[i].x=x+y;
        blue[i].y=x-y;
    }
    sort(blue,blue+n,cmp_blue);
    for (int i=0;i<m;i++){
        scanf("%d%d",&x,&y);
        red[i].x=x+y;
        red[i].y=x-y;
    }
    sort(red,red+m,cmp_red);

    int l=1,r=4000000;
    int mid;
    while (l<=r){
        mid=(l+r)/2;
        if (check(mid)) r=mid-1;
        else l=mid+1;
    }
    if (l>=4000000) printf("Poor Sereja!\n");
        else printf("%d\n",l);
}
