#include <cmath>
#include <map>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <bitset>
#include <memory.h>
#include <functional>
#include <queue>
#include <fstream>
#include <ctime>
#include <deque>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <cctype> 
#include <numeric> 
#include <iomanip>
using namespace std;
#define sqr(_) ((_)*(_))

typedef pair<int, int> Pii;
typedef pair<int, Pii> Pip;
#define x first
#define y second
#define mp make_pair

typedef long long LL;

const int MAXN = 2000 + 10, D = 2000000 + 10, MAXM = D * 2;

int n, m, f[MAXM], Nx, Ny;
vector<int> X[MAXM], Y[MAXM];
Pip x[MAXN], y[MAXN];

void Gen(vector<int> *X, Pip *x, int &Nx, int d)
{
	for (int i = 0; i < MAXM; ++i)
		for (int j = 0; j < (int)X[i].size(); ++j)
			if (!j || X[i][j - 1] + d < X[i][j] - d)
				x[++Nx] = mp(i, mp(X[i][j] - d, X[i][j] + d));
			else
			x[Nx].y.y = X[i][j] + d;
	for (int i = 1; i <= Nx; ++i)
		x[i].y.x = max(x[i].y.x, 0), x[i].y.y = min(x[i].y.y, MAXM - 1);
}
bool cmp(const Pip &a, const Pip &b) {
	return a.y.y < b.y.y;
}
int lowbit(int x) {
	return x & -x;
}
void Add(int x, int d)
{
	for (; x < MAXM; f[x] += d, x += lowbit(x));
}
int Gets(int x)
{
	int Tohka = 0;
	for (; x > 0; Tohka += f[x], x -= lowbit(x));
	return Tohka;
}
bool check(int d)
{
	Nx = Ny = 0;
	Gen(X, x, Nx, d), Gen(Y, y, Ny, d);
	sort(y + 1, y + Ny + 1, cmp);
	memset(f, 0, sizeof(f));
	for (int i = 1; i < Nx; ++i)
	{
		queue<int> q;
		for (int j = 1; j <= Ny; ++j)
			if (x[i].y.x <= y[j].x && y[j].x <= x[i].y.y && y[j].y.x <= x[i].x && x[i].x <= y[j].y.y)
				Add(y[j].x, 1), q.push(j);
		for (int j = i + 1; j <= Nx; ++j)
		{
			for (; !q.empty() && y[q.front()].y.y < x[j].x; Add(y[q.front()].x, -1), q.pop());
			if (Gets(x[j].y.y) - Gets(x[j].y.x - 1) >= 2)
				return true;
		}
		for (; !q.empty(); Add(y[q.front()].x, -1), q.pop());
	}
	return false;
}
int Find(int l, int r)
{
	while (l <= r)
	{
		int mid = (l + r) / 2;
		if (check(mid * 2))
			r = mid - 1;
		else
		l = mid + 1;
	}
	return l;
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i)
	{
		int x, y;
		scanf("%d%d", &x, &y);
		Y[x + y + D].push_back(x - y + D);
	}
	for (int i = 1; i <= m; ++i)
	{
		int x, y;
		scanf("%d%d", &x, &y);
		X[x - y + D].push_back(x + y + D);
	}
	for (int i = 0; i < MAXM; ++i)
		sort(X[i].begin(), X[i].end()), sort(Y[i].begin(), Y[i].end());
	int Tohka = Find(1, MAXM);
	if (Tohka > MAXM)
		puts("Poor Sereja!");
	else
	cout << Tohka << endl;
	fclose(stdin);
	fclose(stdout);
	return 0;
}
