#include<algorithm>
#include <iostream>
#include <string.h>
#include <stdlib.h>
#include  <stdio.h>
#include   <math.h>
#include   <time.h>
#include   <vector>
#include    <queue>
#include      <map>
#include      <set>
using namespace std;

typedef long long LL;

typedef set<int> Lzz;

const int N=200500;

struct Node
{
    Node *pre,*son[27];
    vector<Node*> Tson;
    int l,f,sum;
}T[N*3],*root=T,*last=T,*Now=T;

int n,k;

string s[N];

void Extend(int x,int f)
{
    Node *p=last,*np=++Now;
    np->l=p->l+1;
    last=np;
    np->f=f;
    for(;p&&!p->son[x];p=p->pre)
        p->son[x]=np;
    if(!p)
        np->pre=root;
    else
    {
        Node *q=p->son[x];
        if(q->l==p->l+1) np->pre=q;
        else
        {
            Node *nq=++Now;
            *nq=*q;
            nq->l=p->l+1;
            nq->f=0;
            q->pre=np->pre=nq;
            for(;p&&p->son[x]==q;p=p->pre)
                p->son[x]=nq;
        }
    }
}

Lzz* Merge(Lzz* a,Lzz* b)
{
    if(a->size()<b->size())
        swap(a,b);
    a->insert(b->begin(),b->end());
    delete b;
    return a;
}

Lzz* dfs(Node* x)
{
    Lzz* k=new Lzz;
    if(x->f!=0)
        k->insert(x->f);
    vector<Node*>::iterator it=x->Tson.begin();
    for(;it!=x->Tson.end();it++)
        k=Merge(k,dfs(*it));
    x->sum=k->size();
    return k;
}

int main()
{
    cin>>n>>k;
    for(int i=1;i<=n;i++)
    {
        cin>>s[i];
        for(int j=0;j<s[i].size();j++)
            Extend(s[i][j]-'a',i);
        Extend(26,0);
    }
    int L=Now-T;
    for(int i=1;i<=L;i++)
        T[i].pre->Tson.push_back(T+i);
    dfs(root);
    for(int i=1;i<=n;i++)
    {
        LL Ans=0;
        int l=0;
        Node* p=root;
        for(int j=0;j<s[i].size();j++)
        {
            int ch=s[i][j]-'a';
            while(p&&!p->son[ch])
            {
                p=p->pre;
                if(!p)
                    l=0;
                else
                    l=p->l;
            }
            if(p)
                p=p->son[ch],l++;
            else
                p=root;
            while(p&&p->sum<k)
            {
                p=p->pre;
                if(!p)
                    l=0;
                else
                    l=p->l;
            }
            Ans+=l;
        }
        printf("%I64d ",Ans);
    }
    return 0;
}
