//In the name of God
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
typedef pair<int, int> pii;
const int N = 3e5 + 5, lg = 18, oo = 1e9;

int n, m, k;
int suf[N], log[N], p[N], end[N], len[N];
long long ans[N];
int r[lg][N], rmq[lg][N];
string s;

int lcps(int x, int y) {
	int ans = 0;
	for (int i = lg - 1; i >= 0; i--)
		if (r[i][x] == r[i][y]) {
			ans += 1 << i;
			x += 1 << i;
			y += 1 << i;
		}
	return ans;
}
int lcp(int x, int y) {
	if (x == y)
		return n - suf[x];
	if (x > y)
		swap(x, y);
	if (x == --y)
		return rmq[0][x];
	int p = log[y - x];
	return min(rmq[p][x], rmq[p][y - (1 << p) + 1]);
}
void suffix_array() {
	for (int i = 0; i < n; i++)
		r[0][i] = s[i];
	vector<pair<pii, int> > v(n);
	for (int i = 1; i < lg; i++) {
		for (int j = 0; j < n; j++)
			v[j] = make_pair(pii(r[i - 1][j], j + (1 << i - 1) < n? r[i - 1][j + (1 << i - 1)]: -1), j);
		sort(v.begin(), v.end());
		for (int j = 0; j < n; j++)
			r[i][v[j].second] = (j && v[j].first == v[j - 1].first? r[i][v[j - 1].second]: j + 1);
	}
	for (int i = 0; i < n; i++)
		suf[i] = v[i].second;
	for (int i = 0; i < n - 1; i++)
		rmq[0][i] = lcps(suf[i], suf[i + 1]);
	for (int i = 1; i < lg; i++)
		for (int j = 0; j + (1 << i) <= n - 1; j++)
			rmq[i][j] = min(rmq[i - 1][j], rmq[i - 1][j + (1 << i - 1)]);
}
bool acc(int d, int l) {
	int st = -1, ed = d;
	while (ed - st > 1) {
		int mid = st + ed >> 1;
		if (lcp(mid, d) >= l)
			ed = mid;
		else
			st = mid;
	}
	return lcp(ed, max(end[ed], d)) >= l;
}
int main() {
	for (int i = 2; i < N; i++)
		log[i] = log[i >> 1] + 1;
	ios_base::sync_with_stdio(false);
	cin >> n >> k;
	for (int i = 0; i < n; i++) {
		string t; cin >> t;
		for (int j = s.size(); j < s.size() + t.size(); j++)
			p[j] = i, len[j] = t.size() + s.size() - j;
		p[s.size() + t.size()] = n + 2;
		s += t + '#';
	}
	m = n, n = s.size();
	suffix_array();
	{
		int rep[N] = {}, cnt = 0;
		rep[m + 2] = oo;
		for (int p1 = 0, p2 = 0; p1 < n; p1++) {
			while (p2 < n && cnt < k) {
				if (!rep[p[suf[p2]]]++)
					cnt++;
				p2++;
			}
			end[p1] = (cnt < k? n + 1: p2 - 1);
			if (!--rep[p[suf[p1]]])
				cnt--;
		}
	}
	for (int i = 0; i < n; i++)
		if (s[suf[i]] != '#') {
			int st = 0, ed = len[suf[i]] + 1;
			while (ed - st > 1) {
				int mid = st + ed >> 1;
				(acc(i, mid)? st: ed) = mid;
			}
			ans[p[suf[i]]] += st;
		}
	for (int i = 0; i < m; i++)
		cout << ans[i] << ' ';
	cout << '\n';
	return 0;
}
