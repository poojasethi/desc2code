#include<set>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
#define LL long long
using namespace std;
const int maxn=200010;
set<int>d[maxn];
set<int>::iterator it;
int n,K,tot=1,h[maxn],sum[maxn];
struct edge{int to,next;}G[maxn*6];
string s[maxn];

struct Suffix_Automation{
	int son[maxn][26],l[maxn],tot;
	int fa[maxn],last,root;
	void init(){
		tot=0; last=root=++tot;
	}
	void add(int w,int id){
        int p=last,np=last=++tot; last=np; l[np]=l[p]+1; d[np].insert(id);
        while (p&&!son[p][w]) son[p][w]=np,p=fa[p];
        if (!p) fa[np]=root;
        else{
            int q=son[p][w];
            if (l[q]==l[p]+1) fa[np]=q;
            else{
                int nq=++tot; l[nq]=l[p]+1; fa[nq]=fa[q];
                for (int i=0;i<26;++i) son[nq][i]=son[q][i];
                fa[q]=fa[np]=nq;
                while (son[p][w]==q) son[p][w]=nq,p=fa[p];
            }
        }
    }
}sam;

void add(int x,int y){
	G[++tot].to=y;G[tot].next=h[x];h[x]=tot;
}

void dfs(int x){
	for (int i=h[x];i;i=G[i].next){
		int v=G[i].to; dfs(v);
		if (d[x].size()<d[v].size())
			swap(d[x],d[v]);
		for (it=d[v].begin();it!=d[v].end();++it)
		    d[x].insert(*it);
	} sum[x]=d[x].size();
}

int main(){
	int __size__ = 20 << 20;
  	char *__p__ = (char*)malloc (__size__) + __size__;
  	__asm__("movl %0, %%esp" :: "r"(__p__));
	scanf("%d%d",&n,&K);
	sam.init();
	for (int i=1;i<=n;++i){
		cin>>s[i];
		int len=s[i].length();
		for (int j=0;j<len;++j) sam.add(s[i][j]-'a',i);
		sam.last=1;
	}
	for (int i=1;i<=sam.tot;++i)
	    if (sam.fa[i]) add(sam.fa[i],i);
	dfs(sam.root);
	if (K>n){
		for (int i=1;i<=n;++i) printf("0 ");
		return 0;
	}
	for (int i=1;i<=n;++i){
		LL ans=0;
		int now=sam.root,len=s[i].length();
		for (int j=0;j<len;++j){
			now=sam.son[now][s[i][j]-'a'];
			while (sum[now]<K) now=sam.fa[now];
			ans+=sam.l[now];
		}
		printf("%lld ",ans);
	}
}

 				  	  		 	  	 	    	 	 	 		