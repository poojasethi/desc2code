#include<bits/stdc++.h>
using namespace std;

struct sam
{int l,sr,num,par,id,pre;
 int ch[27];
};
struct sam b[200010];

int n,k,last,tot,n1;
int l1[100010],q[200010],d[200010];
long long ans;
char a[100010];
set<int> s[200010];

void extend(int x,int id)
{int p,q,np,nq;
 p=last;
 np=++tot;
 b[np].l=b[p].l+1;
 b[np].id=id;
 last=np;
 while(p && b[p].ch[x]==0)
 {	b[p].ch[x]=np;
 	p=b[p].par;
 }
 if(!p)
 	b[np].par=1;
 else	
 {	q=b[p].ch[x];
 	if(b[q].l==b[p].l+1)
 		b[np].par=q;
 	else
	{	nq=++tot;
		b[nq].l=b[p].l+1;
		memcpy(b[nq].ch,b[q].ch,sizeof(b[q].ch));
		b[nq].par=b[q].par;
		b[q].par=b[np].par=nq;
		while(p && b[p].ch[x]==q)
		{	b[p].ch[x]=nq;
			p=b[p].par;
		}
	}
 }
}

void merge(int &i,int j)
{set<int>::iterator p;
 if(i && s[i].size()>s[j].size())
 	s[i].insert(s[j].begin(),s[j].end());
 else
 {	s[j].insert(s[i].begin(),s[i].end());
 	i=j;
 }
}

void calc(int i)
{if(!i || b[i].pre || b[i].sr>=k) return;
 calc(b[i].par);
 b[i].pre=b[b[i].par].pre;
}

void work()
{int i,j,t=1,w=0,w1=0;
 
 for(i=1;i<=tot;i++)
 	if(d[i]==0)
 	{	q[++w]=i;
 		b[i].num=++n1;
 		s[n1].insert(b[i].id);
 	}
 w1=w;	
 while(t<=w)
 {	if(b[q[t]].id) s[b[q[t]].num].insert(b[q[t]].id);
 	b[q[t]].sr=s[b[q[t]].num].size();
 	merge(b[b[q[t]].par].num,b[q[t]].num);
 	if(!(--d[b[q[t]].par])) q[++w]=b[q[t]].par;
	t++;
 }
 for(i=1;i<=tot;i++) if(b[i].sr>=k) b[i].pre=i;
 for(i=1;i<=w1;i++) calc(q[i]);
}

int main()
{int i,j,p;
 
 scanf("%d%d",&n,&k);
 if(k>n)
 {	for(i=1;i<=n;i++)
 	{	printf("%d",0);
 		printf("%c",i!=n?' ':'\n');
 	}
 	return 0;
 }
 last=tot=1;
 for(i=1;i<=n;i++)
 {	scanf("%s",a+l1[i-1]+1);
 	l1[i]=strlen(a+1);
 	last=1;
 	for(j=l1[i-1]+1;j<=l1[i];j++)
 		extend(a[j]-96,i);
 }
 for(i=1;i<=tot;i++) d[b[i].par]++;
 work();
 for(i=1;i<=n;i++)
 {	ans=0;
 	p=1;
 	for(j=l1[i-1]+1;j<=l1[i];j++)
 	{	while(p && b[p].ch[a[j]-96]==0) p=b[p].par;
	 	if(!p) p=1; else p=b[p].ch[a[j]-96];
	 	ans+=b[b[p].pre].l;
	}
	printf("%I64d",ans);
	printf("%c",i!=n?' ':'\n');
 }
 return 0;
}