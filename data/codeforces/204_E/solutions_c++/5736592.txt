#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;

const int maxn=300005;

int N, K, n, belong[maxn], tank[maxn], tmp[maxn], sa[maxn], rank[maxn], rk[maxn], rmq[maxn][20], flag[maxn], need[maxn], last[maxn];
long long ans[maxn];
char s[maxn];

inline int RMQ(int l, int r)
{
	l++;
	if (l>r) return 0x7fffffff;
	int k=log2(r-l+1);
	return min(rmq[l][k],rmq[r-(1<<k)+1][k]);
}

int main()
{
	scanf("%d%d",&N,&K);
	n=1;
	for (int i=1;i<=N;i++)
	{
		scanf("%s",s+n);
		while (s[n]) belong[n++]=i;
		if (i<N) s[n++]='{';
	}
	n--;
	for (int i=n;i;i--) last[i]=(s[i]=='{')?0:last[i+1]+1;
	for (int i=1;i<=n;i++) tank[s[i]-'a']++;
	for (int i=1;i<=26;i++) tank[i]+=tank[i-1];
	for (int i=1;i<=n;i++) sa[tank[s[i]-'a']--]=i;
	for (int i=1,j=0;i<=n;i++)
	{
		if (i==1 || s[sa[i]]>s[sa[i-1]]) j++;
		rank[sa[i]]=j;
	}
	for (int k=1;1+k<=n;k<<=1)
	{
		int j(0);
		for (int i=1;i<=k;i++) tmp[++j]=n+i-k;
		for (int i=1;i<=n;i++) if (sa[i]>k) tmp[++j]=sa[i]-k;
		memset(tank,0,(n+2)*4);
		for (int i=1;i<=n;i++) tank[rank[tmp[i]]]++;
		for (int i=1;i<=n;i++) tank[i]+=tank[i-1];
		for (int i=n;i;i--) sa[tank[rank[tmp[i]]]--]=tmp[i];
		copy(rank+1,rank+n+1,rk+1);
		for (int i=1,j=0;i<=n;i++)
		{
			if (i==1 || rk[sa[i]]>rk[sa[i-1]] || rk[sa[i]]==rk[sa[i-1]] && rk[sa[i]+k]>rk[sa[i-1]+k]) j++;
			rank[sa[i]]=j;
		}
	}
	for (int i=1;i<=n;i++)
	{
		rmq[rank[i]][0]=max(0,rmq[rank[i-1]][0]-1);
		while (s[i+rmq[rank[i]][0]]==s[sa[rank[i]-1]+rmq[rank[i]][0]]) rmq[rank[i]][0]++;
	}
	for (int j=0,k=1;1+k<=n;j++,k<<=1)
		for (int i=1;i+k<=n;i++)
			rmq[i][j+1]=min(rmq[i][j],rmq[i+k][j]);
	int CNT(0);
	for (int i=1,j=1;i<=n;CNT-=(--flag[belong[sa[i++]]]==0))
	{
		while (j<=n && CNT<K) CNT+=(flag[belong[sa[j++]]]++==0);
		if (CNT==K) need[i]=j-1; else need[i]=-1;
	}
	for (int i=1;i<=n;i++) if (s[sa[i]]!='{')
	{
		int l(1), r(i), ret(-1);
		while (l<=r)
		{
			int mid((l+r)>>1), tmp1, tmp2;
			tmp1=RMQ(mid,i);
			if (need[mid]==-1) tmp2=-1; else tmp2=RMQ(mid,need[mid]);
			ret=max(ret,min(tmp1,tmp2));
			if (tmp1<=tmp2) l=mid+1;
			else r=mid-1;
		}
		ret=min(ret,last[sa[i]]);
		if (ret<0) continue;
		ans[belong[sa[i]]]+=ret;
	}
	for (int i=1;i<N;i++) printf("%I64d ",ans[i]);
	printf("%I64d\n",ans[N]);
	return 0;
}
