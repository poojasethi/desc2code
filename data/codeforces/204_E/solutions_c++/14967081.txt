#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
const int maxn=100015;
char s[maxn];
int n,k,l[maxn],r[maxn];
void init(){
    scanf("%d%d",&n,&k);
    for (int i=1;i<=n;++i){
        l[i]=r[i-1]+1;
        scanf("%s",s+l[i]);
        r[i]=l[i]+strlen(s+l[i])-1;
    }
}
namespace sam{
    const int maxnode=::maxn<<2;
    struct node{
        int64 res;
        node *f,*c[27];
        int fmx,vis,mat,done;
        void init(int v){
            f=0;memset(c,0,sizeof(c));
            fmx=v;vis=mat=res=0;
        }
    }*root,*last,t[maxnode];
    int tot;
    void clear(){tot=0;root=t;root->init(0);}
    node *newnode(int v){node *x=t+(++tot);x->init(v);return x;}
    void append(int ch){
        node *p=last,*np;
        if (p->c[ch]){
            node *q=p->c[ch];
            if (q->fmx==p->fmx+1) np=q;
            else{
                node *nq=newnode(p->fmx+1);
                nq->f=q->f;q->f=nq;
                memcpy(nq->c,q->c,sizeof(q->c));
                while (p&&p->c[ch]==q){p->c[ch]=nq;p=p->f;}
                np=nq;
            }
        }
        else{
            np=newnode(p->fmx+1);
            while (p&&!p->c[ch]){p->c[ch]=np;p=p->f;}
            if (!p) np->f=root;
            else{
                node *q=p->c[ch];
                if (q->fmx==p->fmx+1) np->f=q;
                else{
                    node *nq=newnode(p->fmx+1);
                    nq->f=q->f;np->f=q->f=nq;
                    memcpy(nq->c,q->c,sizeof(q->c));
                    while (p&&p->c[ch]==q){p->c[ch]=nq;p=p->f;}
                }
            }
        }
        last=np;
    }
    int64 calc(node *x){
        if (x==root||x->done) return x->res;x->done=1;
        return x->res=(x->mat>=k)*(x->fmx-x->f->fmx)+calc(x->f);
    }
}
using namespace sam;
void work(){
    clear();
    for (int i=1;i<=n;++i){
        last=root;
        for (int j=l[i];j<=r[i];++j) append(s[j]-'a');
    }
    for (int i=1;i<=n;++i){
        node *x=root;
        for (int j=l[i];j<=r[i];++j){
            x=x->c[s[j]-'a'];
            for (node *p=x;p&&p->vis!=i;p=p->f){p->vis=i;++p->mat;}
        }
    }
    for (int i=1;i<=n;++i){
        node *x=root;int64 res=0;
        for (int j=l[i];j<=r[i];++j){
            x=x->c[s[j]-'a'];
            res+=calc(x);
        }
        printf("%I64d ",res);
    }
}
int main(){
    init();
    work();
    return 0;
}