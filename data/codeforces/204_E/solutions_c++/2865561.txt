#include <cstdio>
#include <cstring>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

const int N=201000;

char s[N];
int n,K,t,cnt,len,d,b,f,g;
int a[N],p[N],r[N+N],h[N],sa[N],q[N+N],S[N],l[N];
long long ans[N];

pair<pair<int,int>,int> c[N];
vector<int> in[N],out[N];
int L[N];
multiset<int,greater<int> > heap;

void push(int i)
{
  if (f==g) t=l[sa[b]];
  else t=min(l[sa[b]],h[q[f]]);
  in[b].push_back(t);
  out[i].push_back(t);
}

int main()
{
  scanf("%d%d",&n,&K);
  for(int i = 0;i < n;i++)
    {
      scanf("%s",s);
      L[i] = len = strlen(s);
      for (char *S=s;*S;S++)
	p[t] = i+1,l[t] = len--,a[t++] = *S-'a';a[t++] = i + 26;
    }
  for(int i = 0;i < t;i++) r[i]=a[i];
  for (int d = 1;d < t;d += d)
    {
      for(int i = 0;i < t;i++) c[i] = make_pair(make_pair(r[i],r[i+d]),i);
      sort(c,c+t);
      cnt = r[c[0].second] = 0;
      for(int i = 0;i < t-1;i++)
	r[c[i+1].second]=(cnt+=(c[i].first!=c[i+1].first));
      if (cnt==t) break;
    }
  for(int i = 0;i < t;i++) sa[r[i]]=i;
  for (int k=0,i=0,j;i<t;h[r[i++]]=k,k=max(k-1,0))
    if (r[i]!=0)
      for (j=sa[r[i]-1];a[j+k]==a[i+k];k++);
  b = -1;cnt = f = g = 0;

  for (int i=0;n>=K&&p[sa[i-1]];)
    {
      while (cnt<K)
	{
	  if (!(S[p[sa[i]]]++)) cnt++;
	  while (f<g && h[q[g-1]]>=h[i]) g--;q[g++]=i++;
	  if (cnt!=K&&b!=-1) push(i);
	}
      b++;while (f<g&&q[f]<=b) f++;push(i);
      if (!(--S[p[sa[b]]])) cnt--;
    }
  for (int i=0;p[sa[i]];i++)
    {
      for(int j = 0;j < out[i].size();j++) heap.erase(heap.lower_bound(out[i][j]));
      for(int j = 0;j < in[i].size(); j++) heap.insert(in[i][j]);
      ans[p[sa[i]]-1] += *heap.begin();
    }
  for(int i = 0;i < n;i++) printf("%I64d ",ans[i]);
}
