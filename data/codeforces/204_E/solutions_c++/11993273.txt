#include<bits/stdc++.h>
using namespace std;

const int N=500100;
struct State{
    State *pre,*go[27];
    int step,ss;
    set<int> s;
}*root,*last;
State statePool[N],*b[N],*cur;
int c[N];

void init(){
    cur=statePool;
    root=last=cur++;
}

void extend(int w,int idx){
    State *p=last;
    State *np=cur++;
    np->step=p->step+1;
    if(~idx)np->s.insert(idx);
    while(p&&!p->go[w]){
        p->go[w]=np;
        p=p->pre;
    }
    if(0==p){
        np->pre=root;
    }
    else{
        State *q=p->go[w];
        if(p->step+1==q->step){
            np->pre=q;
        }
        else{
            State *nq=cur++;
            memcpy(nq->go,q->go,sizeof(q->go));
            nq->step=p->step+1;
            nq->pre=q->pre;
            q->pre=nq;
            np->pre=nq;
            while(p&&p->go[w]==q){
                p->go[w]=nq;
                p=p->pre;
            }
        }
    }
    last=np;
}

char s[N];
int len[N];

int main(){
    init();

    int n,K;
    scanf("%d%d",&n,&K);
    for(int i=1;i<=n;i++){
        scanf("%s",s+len[i-1]);
        len[i]=len[i-1]+strlen(s+len[i-1]);
        for(int j=0;j<len[i]-len[i-1];j++){
            extend(s[len[i-1]+j]-'a',i);
        }
        extend(26,-1);
    }

    int mx=0;
    for(State *p=statePool;p<cur;p++){
        c[p->step]++;
        mx=max(mx,p->step);
    }
    for(int i=1;i<=mx;i++){
        c[i]+=c[i-1];
    }
    for(State *p=cur-1;p>=statePool;p--){
        b[--c[p->step]]=p;
    }
    for(int i=cur-statePool-1;i;i--){
        State *p=b[i];
        p->ss=p->s.size();
        for(set<int>::iterator it=p->s.begin();it!=p->s.end();it++){
            p->pre->s.insert(*it);
        }
        p->s.clear();
    }
    root->ss=root->s.size();
    for(int i=1;i<=n;i++){
        int L=len[i]-len[i-1];
        State *p=root;
        long long ret=0;
        for(int j=0,cc=0;j<L;j++){
            int x=s[len[i-1]+j]-'a';
            while(p&&!p->go[x]){
                p=p->pre;
                if(p)cc=p->step;
            }
            if(0==p){
                p=root;
                cc=0;
                continue;
            }
            cc++;
            p=p->go[x];
            while(p&&p->ss<K){
                p=p->pre;
                if(p)cc=p->step;
            }
            if(0==p)break;
            ret+=cc;
        }
        printf("%I64d ",ret);
    }

    return 0;
}

	 	  	      	  	 	 		   		 		 	