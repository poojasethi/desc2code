#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define rep(i,n) for(int i=0;i<n;i++)
#define For(i,n) for(int i=1;i<=n;i++)
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define ForD(i,n) for(int i=n;i;i--)
#define N 100030
int n,m,p,q,sp=25,l,k,x,b[18],v[N<<1],a[N<<1],h[N<<1],id[N<<1],
	SA[2][N<<1],rk[2][N<<1],ST[N<<1][18],cnt[N],f[N];
long long ans[N];
char s[N];
void Init()
{
	scanf("%d%d",&n,&m);
	For(i,n)
	{
		scanf("%s",s);
		k=strlen(s);
		if (m==1) printf("%I64d ",(long long)k*(k+1)/2);
		rep(j,k)
		{
			a[++l]=s[j]-'a';
			id[l]=i;
		}
		a[++l]=++sp;
	}
	if (m==1) exit(0);
}
void Calc_SA(int sa[N<<1],int rk[N<<1],int SA[N<<1],int RK[N<<1])
{
	For(i,l) v[rk[sa[i]]]=i;
	ForD(i,l)
	    if (sa[i]>k)
	        SA[v[rk[sa[i]-k]]--]=sa[i]-k;
	FOR(i,l-k+1,l) SA[v[rk[i]]--]=i;
	For(i,l)
		RK[SA[i]]=RK[SA[i-1]]+(rk[SA[i-1]]!=rk[SA[i]] || rk[SA[i-1]+k]!=rk[SA[i]+k]);
	    
}
void Create_SA()
{
	p=0,q=1,a[0]=-1;
	For(i,l) v[a[i]]++;
	For(i,sp) v[i]+=v[i-1];
	For(i,l) SA[0][v[a[i]]--]=i;
	For(i,l)
	    rk[0][SA[0][i]]=rk[0][SA[0][i-1]]+(a[SA[0][i-1]]!=a[SA[0][i]]);
	k=1;
	while (rk[p][SA[p][l]]<l)
	{
		Calc_SA(SA[p],rk[p],SA[q],rk[q]);
		p^=1;q^=1;k<<=1;
	}
}
void Calc_Height()
{
	k=0;
	For(i,l)
	{
		if (k) k--;
		int j=SA[p][rk[p][i]-1];
		while (a[i+k]==a[j+k]) k++;
		h[rk[p][i]]=k;
	}
}
inline int RMQ(int l,int r)
{
	int x=v[r-l];
	return min(ST[l][x],ST[r-b[x]+1][x]);
}
void Sparse_Table()
{
	rep(i,18) b[i]=1<<i;
	k=0;
	For(i,l)
	{
		if (i==b[k+1]) k++;
		v[i]=k;
		ST[i][0]=h[i];
	}
	For(x,17)
	    For(i,l-b[x])
			ST[i][x]=min(ST[i][x-1],ST[i+b[x-1]][x-1]);
}
void DP()
{
	l-=n;int j=k=0;
	For(i,l)
	{
		if (!(--cnt[ id[SA[p][i-1]] ])) k--;
		while (k<m&&j<=l)
			if (!( cnt[id[SA[p][++j]]]++ )) k++;
		f[i]=max(min(f[i-1],h[i]),RMQ(i+1,j));
		ans[id[SA[p][i]]]+=f[i];
	}

}
int main()
{
	Init();
	Create_SA();
	Calc_Height();
	Sparse_Table();
	DP();
	For(i,n) printf("%I64d ",ans[i]);
	return 0;
}
