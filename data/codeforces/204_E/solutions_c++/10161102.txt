#include<set>
#include<cstdio>
#include<vector>
#include<cstring>
#include<iostream>
using namespace std;
typedef long long LL;
#define N 105000
#define Orz set<int>
Orz* merge(Orz* a,Orz* b)
{if(a->size()<b->size()) swap(a,b);
 a->insert((*b).begin(),(*b).end());
 delete b;
 return a;
}
struct Node
{Node *pre,*Son[27];
 vector<Node*> Tson;
 int l,f,Num;
 Orz* dfs()
 {Orz* k=new Orz;
  if(f!=-1) k->insert(f);
  for(vector<Node*>::iterator it=Tson.begin();it!=Tson.end();it++) k=merge(k,(*it)->dfs());
  Num=k->size();
  return k;
 }
}T[N*5],*root=T,*last=T,*Now=T;
int n,k;
string s[N];
void Extend(int x,int f=-1)
{Node *p=last,*np=++Now;
 np->l=p->l+1;last=np;np->f=f;
 for(;p&&!p->Son[x];p=p->pre) p->Son[x]=np;
 if(!p) np->pre=root;
 else if(p->Son[x]->l==p->l+1) np->pre=p->Son[x];
 else
 {Node *q=p->Son[x],*nq=++Now;
  *nq=*q;nq->l=p->l+1;nq->f=-1;
  q->pre=np->pre=nq;
  for(;p&&p->Son[x]==q;p=p->pre) p->Son[x]=nq;
 }
}
int main()
{cin>>n>>k;
 for(int i=1;i<=n;i++)
 {cin>>s[i];
  for(int j=0;j<s[i].size();j++) Extend(s[i][j]-'a',i);
  Extend(26);
 }
 for(Node* i=T+1;i!=Now;i++) i->pre->Tson.push_back(i);
 root->dfs();
 for(int i=1;i<=n;i++)
 {LL Ans=0,l=0;
  Node* p=root;
  for(int j=0,w;j<s[i].size();j++)
  {w=s[i][j]-'a';
   while(p&&!p->Son[w]) p=p->pre,l=p?p->l:0;
   if(p) p=p->Son[w],l++;
   else p=root;
   while(p&&p->Num<k) p=p->pre,l=p?p->l:0;
   Ans+=l;
  }
  cout<<Ans<<" ";
 }
 return 0;
}
