#include<stdio.h>
#include<string.h>
#include<iostream>
#include<algorithm>
using namespace std;
struct node
{
    node*fa,*son[27];long long step,value,times,last;bool calced;
}a[400001],*fir,*ed;
long long n,k,ind,begin[100001],end[100001];
char s[2000001];
void add(long long x)
{
    node*p=ed,*np=&a[++ind];np->step=p->step+1;
    for(;p&&!p->son[x];p=p->fa)p->son[x]=np;
    if(!p)np->fa=fir;
    else if(p->step+1==p->son[x]->step)np->fa=p->son[x];
    else
    {
        node *q=p->son[x],*nq=&a[++ind];*nq=*q;nq->step=p->step+1;
        np->fa=q->fa=nq;
        for(;p&&p->son[x]==q;p=p->fa)p->son[x]=nq;
    }ed=np;
}
void update(node*t,long long y)
{
    while(t)
    {
        if(t->last==y)return ;
        t->times++;
        t->last=y;
        t=t->fa;
    }
}
long long calc(node*t,long long o)
{
    if(t->calced)return t->value; 
    if(t->fa)t->value=calc(t->fa,o);
    if(t->times>=k)t->value+=min(t->step,o)-(t->fa?t->fa->step:0);
    t->calced=true;
    return t->value;
}
int main()
{
    scanf("%I64d%I64d",&n,&k);fir=ed=&a[++ind];
    for(long long i=1;i<=n;i++)
    {
        begin[i]=end[i-1]+1;
        scanf("%s",s+begin[i]);
        end[i]=begin[i]+strlen(s+begin[i]);
    }
    for(long long i=1;i<=n;i++)
    {
        for(long long j=begin[i];j<end[i];j++)
            add(s[j]-'a');
        add(26);
    }
    for(long long i=1;i<=n;i++)
    {
        node*now=fir;
        for(long long j=begin[i];j<end[i];j++)
        {
            now=now->son[s[j]-'a'];
            update(now,i);
        }
    }
    for(long long i=1;i<=n;i++)
    {
        long long ans=0;node*now=fir;
        for(long long j=begin[i];j<end[i];j++)
        {
            now=now->son[s[j]-'a'];
            ans+=calc(now,j-begin[i]+1);
        }
        printf("%I64d ",ans);
    }puts("");
    return 0;
}
/*
2 2
acadd
c 
*/