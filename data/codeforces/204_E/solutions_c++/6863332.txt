#include <set>
#include <string>
#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
using namespace std;

const int MAXN = 400005;

struct sanode{
	sanode *f, *ch[27];
	vector<sanode*> vec;
	int ml, id, sz;

	set<int>* merge(set<int>*a, set<int>*b){
		if(a->size() < b->size()) swap(a,b);
		a->insert(b->begin(), b->end());
		delete b;
		return a;
	}

	set<int>* dfs(){
		set<int>* s = new set<int>();
		if(id!=0) s->insert(id);
		for(vector<sanode*>::iterator it = vec.begin(); it != vec.end(); ++it){
			s = merge((*it)->dfs(), s);
		}
		sz = s->size();
		return s;
	}


} *root, *tail, pool[MAXN], *q[MAXN];

int tot;

string s[MAXN];
void init(){
	memset(pool, 0, sizeof(pool));
	tot = 0;
	root = tail = &pool[tot++];
}

void add(int c, int id){
    sanode *p = tail, *np = &pool[tot++];
    np->ml = tail->ml + 1;
	np->id = id;
    for(;p&&!p->ch[c];p=p->f) p->ch[c] = np;
    tail = np;
    if(!p) np->f = root;
    else
        if(p->ch[c]->ml == p->ml+1) np->f = p->ch[c];
        else{
            sanode *q = p->ch[c], *r = &pool[tot++];
            *r = *q;
            r->ml = p->ml + 1;
            q->f = np->f = r;
            for(;p&&p->ch[c]==q;p=p->f) p->ch[c] = r;
        }
}


int main(){
	int n, k, i, j;

	init();
	scanf("%d%d",&n,&k);
	for(i=1;i<=n;++i){
		cin >> s[i];
		for(j=0;j<s[i].size();++j){
			add(s[i][j]-'a', i);
		}
		add(26, 0);
	}
	for(sanode* i=pool+1;i<pool+tot;++i){
		i->f->vec.push_back(i);
	}
	root->dfs();
	for(i=1;i<=n;++i){
		sanode *p = root;
		long long ans = 0, l = 0;
		for(j=0;j<s[i].size();++j){
			int x = s[i][j]-'a';
			for(;p&&!p->ch[x];){
				p = p->f;
				if(p) l = p->ml;
			}
			if(p){
				p=p->ch[x];
				l++;
			}
			else{
				l = 0;
				p = root;
			}

			for(;p&&p->sz<k;){
				p = p->f;
				if(p) l = p->ml;
			}

			ans += l;
		}
		cout << ans << ' ';
	}
	cout << endl;
	return 0;
}
