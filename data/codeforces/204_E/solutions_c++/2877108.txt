#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<ctime>
using namespace std;
const int u=200012;
int a[u],c[u],d[u][20],h[u],sa[u],rank[u],fir[u],sec[u],v[u],f[u],ed[u],Log[u];
char s[u],str[u];
int n,m,t,l,r,mid,i,j,k,len;
__int64 ans[u];

bool comp(int i,int j,int k)
{
	return sec[i]==sec[j]&&sec[i+k]==sec[j+k];
}
void sufarr(int n)
{
	int i,p,l,m=u;
	for(i=0;i<m;i++) c[i]=0;
	for(i=0;i<n;i++) c[rank[i]=a[i]]++;
	for(i=1;i<m;i++) c[i]+=c[i-1];
	for(i=n-1;i>=0;i--) sa[--c[a[i]]]=i;
	for(p=l=1;p<n;l*=2,m=p)
	{
		for(p=0,i=n-l;i<n;i++) sec[p++]=i;
		for(i=0;i<n;i++)
			if(sa[i]>=l) sec[p++]=sa[i]-l;
		for(i=0;i<n;i++) fir[i]=rank[sec[i]];
		for(i=0;i<m;i++) c[i]=0;
		for(i=0;i<n;i++) c[fir[i]]++;
		for(i=1;i<m;i++) c[i]+=c[i-1];
		for(i=n-1;i>=0;i--) sa[--c[fir[i]]]=sec[i];
		memcpy(sec,rank,sizeof(rank));
		rank[sa[0]]=0;
		for(i=p=1;i<n;i++)
			rank[sa[i]]=comp(sa[i],sa[i-1],l)?p-1:p++;
	}
}
void calh()
{
	int i,j,k=0;
	for(i=1;i<=n;i++) rank[sa[i]]=i;
	for(i=0;i<n;h[rank[i++]]=k)
		for(k?k--:0,j=sa[rank[i]-1];a[i+k]==a[j+k];k++);
}

void rmqst()
{
	int i,j;
	for(i=1;i<=n;i++) d[i][0]=h[i];
	for(i=1;i<19;i++)
		for(j=1;j<=n-(1<<i)+1;j++)
			d[j][i]=min(d[j][i-1],d[j+(1<<i-1)][i-1]);
}
inline int query(int l,int r)
{
	int k=Log[r-l+1];
	return min(d[l][k],d[r-(1<<k)+1][k]);
}

bool solve(int ctr,int len)
{
	int l,r,mid,L,R;
	l=1,r=ctr;
	while(l<r)
	{
		mid=(l+r)>>1;
		if(query(mid+1,ctr)>=len) r=mid; else l=mid+1;
	}
	L=l;
	l=ctr,r=n;
	while(l<r)
	{
		mid=(l+r+1)>>1;
		if(query(ctr+1,mid)>=len) l=mid; else r=mid-1;
	}
	R=l;
	return L<=R&&f[R]>=L;
}

int main()
{
	int st=clock();
	cin>>m>>t;
	for(i=1;i<=m;i++)
	{
		scanf("%s",str);
		len=strlen(str); 
		for(j=len-1;j>=0;j--)
			s[n+j]=str[j],v[n+j]=i,ed[n+j]=n+len;
		n+=len+1; 
	}
	for(i=j=0;i<n;i++) a[i]=s[i]?s[i]-'a'+1:26+(++j);
	sufarr(n+1);
	calh();
	rmqst();
	memset(c,0,sizeof(c));
	for(i=j=1;i<=n;i++)
	{
		c[v[sa[i]]]++;
		if(c[v[sa[i]]]==1) k++;
		while(k>=t)
		{
			c[v[sa[j]]]--;
			if(!c[v[sa[j]]]) k--;
			if(k<t) {c[v[sa[j]]]++; k++; break;}
			j++;
		}
		if(k>=t) f[i]=j;
	}
	for(i=1;i<=n;i++) Log[i]=log(i*1.0)/log(2.0);
	for(i=1;i<=n;i++)
		if(v[sa[i]])
		{
			l=0,r=ed[sa[i]]-sa[i];
			while(l<r)
			{
				mid=(l+r+1)>>1;
				if(solve(i,mid)) l=mid; else r=mid-1;
			}
			ans[v[sa[i]]]+=l;
			if(clock()-st>2900) {cout<<i<<endl; return 0;}
		}
	for(i=1;i<=m;i++) printf("%I64d ",ans[i]);
	return 0;
}