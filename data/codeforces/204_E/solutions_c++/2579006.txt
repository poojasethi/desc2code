#include<stdio.h>
#include<string.h>
#include<queue>
using namespace std;
const int maxn=100010;
int n,K;
typedef long long ll;
struct edge
{
	int v;
	edge *n;
};
edge EPool[maxn*2],*g[maxn*2],*ep=EPool;
inline void addedge(int u,int v,edge *&ep,edge **g)
{
	ep->v=v,ep->n=g[u],g[u]=ep++;
}
namespace trie
{
	int trans[maxn][26],fa[maxn],ch[maxn];
	int N=1;
	edge EPool[maxn],*ep=EPool,*g[maxn];
	void insert(char *S,int l,int id)
	{
		int p=1;
		for(int i=1;i<=l;i++)
		{
			int c=S[i];
			if(trans[p][c])p=trans[p][c];
			else trans[p][c]=++N,fa[N]=p,ch[N]=c,p=N;
			addedge(p,id,ep,g);
		}
	}
};
namespace SAM
{
	int trans[2*maxn][26];
	int val[2*maxn];
	int fail[2*maxn];
	int N=1;
	int add(int ch,int p)
	{
		int np=++N;
		val[np]=val[p]+1;
		while(p&&!trans[p][ch])trans[p][ch]=np,p=fail[p];
		if(!p)fail[np]=1;
		else
		{
			int q=trans[p][ch];
			if(val[q]==val[p]+1)fail[np]=q;
			else
			{
				int nq=++N;
				val[nq]=val[p]+1;
				fail[nq]=fail[q];
				fail[q]=fail[np]=nq;
				memcpy(trans[nq],trans[q],26*sizeof(int));
				while(p&&trans[p][ch]==q)trans[p][ch]=nq,p=fail[p];
			}
		}
		return np;
	}
};
char S[maxn];
int t2a[maxn],a2t[2*maxn];
queue<int> Q;
int cnt[maxn*2],last[maxn];
ll aans[maxn*2];
ll ans[maxn];
int r[maxn*2],top[maxn*2],sz[maxn*2];
int getfa(int x)
{
	return r[x]==x?x:r[x]=getfa(r[x]);
}
void uni(int u,int v)//merge u to v
{
	int ru=getfa(u),rv=getfa(v);
	if(sz[ru]<=sz[rv])r[ru]=rv,sz[rv]+=sz[ru];
	else r[rv]=ru,sz[ru]+=sz[rv],top[ru]=top[rv];
}
void dfs(int u,int fa)
{
	if(a2t[u])
		for(edge *i=trie::g[a2t[u]];i;i=i->n)
		{
			int t=i->v;
			int v=last[t];	
			int a=top[getfa(v)];
			cnt[a]--;
			cnt[u]++;
			last[t]=u;
		}
	for(edge *i=g[u];i;i=i->n)dfs(i->v,u);
	uni(u,fa);
}
void dfs2(int u,int fa)
{
	for(edge *i=g[u];i;i=i->n)dfs2(i->v,u),cnt[u]+=cnt[i->v];
	if(cnt[u]>=K)aans[u]=SAM::val[u]-SAM::val[fa];
}
void dfs3(int u,int fa)
{
	aans[u]+=aans[fa];
	if(a2t[u])
		for(edge *i=trie::g[a2t[u]];i;i=i->n)ans[i->v]+=aans[u];
	for(edge *i=g[u];i;i=i->n)dfs3(i->v,u);
}
int main()
{
	scanf("%d%d",&n,&K);
	for(int i=1;i<=n;i++)
	{
		scanf("%s",S+1);
		int l=strlen(S+1);
		for(int i=1;i<=l;i++)S[i]-='a';
		trie::insert(S,l,i);
	}
	t2a[1]=1;
	Q.push(1);
	while(!Q.empty())
	{
		int u=Q.front();Q.pop();
		if(u!=1)t2a[u]=SAM::add(trie::ch[u],t2a[trie::fa[u]]),a2t[t2a[u]]=u;
		for(int i=0;i<26;i++)if(trie::trans[u][i])Q.push(trie::trans[u][i]);
	}
	for(int i=1;i<=SAM::N;i++)addedge(SAM::fail[i],i,ep,g);
	for(int i=0;i<=SAM::N;i++)r[i]=top[i]=i,sz[i]=1;
	dfs(1,0);
	dfs2(1,0);
	dfs3(1,0);
	for(int i=1;i<n;i++)printf("%I64d ",ans[i]);printf("%I64d\n",ans[n]);
	return 0;
}
