import sys
sys.setrecursionlimit(10**5)

def find_tour(G):
    """
    Where G is an undirected graph
    """
    
    tour=[]
    visited_edges=defaultdict(int)

    for u in G:
        for v in G[u]:
            visited_edges[u,v]+=1
    

    def recurse(u):
        
        for v in G[u]:
            if not visited_edges[u,v]:continue
            visited_edges[u,v]-=1           
            visited_edges[v,u]-=1
            recurse(v)
        
        
        tour.append(u)
        

    

    current=G.keys()[0]
    count=0
    for u in G:
        if len(G[u])%2:
            current=u
            count+=1

    if count>2:return None
    
    recurse(current)
    tour.reverse()
    return tour

from collections import defaultdict


def main():
    G=defaultdict(list)
    n=input()
    E=defaultdict(list)
    En=0
    for i in range(n):
        a,b=map(int,raw_input().strip().split())
        G[a].append(b)
        G[b].append(a)
        E[(a,b)].append(i+1)
        En+=1

    r=find_tour(G)
    if not r or En!=len(r)-1:
        print "No solution"
        return
    
    for i in range(len(r)-1):
        if (r[i],r[i+1]) in E and E[r[i],r[i+1]] :print str(E[r[i],r[i+1]].pop())+" +"
        else:print str(E[r[i+1],r[i]].pop())+" -"

main()








