#include <stdio.h>

struct sEdge {
    int u, prev;
    int num;
    char type;
    bool used; int opp;
} e[209];
int ee;
int start[7];
int degree[7];

int AddEdge(int u, int v, int num, char type)
{
    ee++;
    e[ee].u = v;
    e[ee].prev = start[u];
    e[ee].num = num;
    e[ee].type = type;
    start[u] = ee;
    return ee;
}

int path[100];
int pathSize;

void Euler(int v)
{
    for (int i = start[v]; i; i = e[i].prev) {
        if (e[i].used) continue;
        e[i].used = e[ e[i].opp ].used = true;
        Euler(e[i].u);
        path[pathSize++] = e[i].opp;
    }
}

int main()
{
    //freopen("input.txt", "r", stdin);

    int n;
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        int u, v;
        scanf("%d %d", &u, &v);

        degree[u]++; degree[v]++;

        int a = AddEdge(u, v, i+1, '+');
        int b = AddEdge(v, u, i+1, '-');

        e[a].opp = b;
        e[b].opp = a;
    }

    int cnt = 0;
    int s = 0;
    for (int i = 0; i <= 6; i++) {
        if (cnt == 0 && degree[i]) s = i;
        if (degree[i] % 2) cnt++, s = i;
    }

    if (cnt > 2) {
        printf("No solution\n");
    }
    else {
        Euler(s);
        if (pathSize < n) {
            printf("No solution\n");
        }
        else {
            for (int i = 0; i < pathSize; i++) {
                printf("%d %c\n", e[path[i]].num, e[path[i]].type);
            }
        }
    }
}
