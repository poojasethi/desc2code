#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>

struct edge
{
	int a , b , id ;
	
	edge(int _a = 0 , int _b = 0 , int _i = 0)
	{
		a = _a , b = _b , id = _i ;
	}
} ;

const int SIZE_N = (100 + 10) ;

int n ;
edge ary[SIZE_N] ;

int deg[10] ;
std::vector< edge > edg[10] ;

int vis[SIZE_N] ;

std::vector< int > pat ;

void solve(int now)
{
	for(int i = 0 ; i < edg[now].size() ; ++i)
	{
		int id = edg[now][i].id ;
		if(vis[edg[now][i].id] == 1) continue ;
		int ne = (edg[now][i].a == now ? edg[now][i].b : edg[now][i].a) ;
		if(edg[now][i].a != now) id = -id ;
		vis[edg[now][i].id] = 1 ;
		solve(ne) ;
		pat.push_back(id) ;
	}
}

int main(void)
{
	scanf("%d" , &n) ;
	for(int i = 0 ; i < n ; ++i)
	{
		scanf("%d%d" , &ary[i].a , &ary[i].b) ; ary[i].id = i + 1 ;
		edg[ary[i].a].push_back(ary[i]) , edg[ary[i].b].push_back(ary[i]) ; 
		++deg[ary[i].a] , ++deg[ary[i].b] ;
	}
	
	int st = 0 ;
	{
		int cnt = 0 ;
		for(int i = 0 ; i < 7 ; ++i) cnt += ((deg[i] & 1) == 1) ;
		for(int i = 0 ; i < 7 ; ++i) if(deg[i] != 0) st = i ;
		for(int i = 0 ; i < 7 ; ++i) if((deg[i] & 1) == 1) st = i ;
		if(cnt != 0 && cnt != 2)
		{
			puts("No solution") ;
			return 0 ;
		}
	}
	
	solve(st) ;
	
	if(pat.size() != n)
	{
			puts("No solution") ;
			return 0 ;
	}
	for(int i = 0 ; i < n ; ++i)
	{
		printf("%d %c\n" , pat[i] < 0 ? -pat[i] : pat[i] , pat[i] < 0 ? '+' : '-') ;
	}
	
	return 0 ;
}

