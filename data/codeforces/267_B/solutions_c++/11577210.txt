#include <bits/stdc++.h>
using namespace std;

const int N = 110, V = 10;

pair<int,int> edge[N];
int degree[V], adj[V][V];
deque<int> resp;
bool used[N];

void dfs(int u){
    for(int v = 0; v <= 6; v++){
        if(adj[u][v]){
            adj[u][v]--, adj[v][u]--;
            dfs(v);
        }
    }
    resp.push_front(u);
}

int main(){
    int n;

    scanf("%d", &n);
    for(int i = 1; i <= n; i++){
        int a, b;
        scanf("%d %d", &a, &b);
        edge[i] = make_pair(a,b);
        degree[a]++, degree[b]++;
        adj[a][b]++, adj[b][a]++;
    }
    int qtd_odd = 0, start = edge[1].first;
    for(int i = 0; i <= 6; i++){
        if(degree[i]%2==1){
            qtd_odd++;
            start = i;
        }
    }
    dfs(start);
    if(qtd_odd>2||resp.size()!=n+1) printf("No solution\n");
    else{
        for(int i = 0; i < n; i++){
            for(int j = 1; j <= n; j++) if(!used[j]){
                int a = edge[j].first, b = edge[j].second;
                if(a==resp[i]&&b==resp[i+1]) printf("%d +\n", j);
                else if(b==resp[i]&&a==resp[i+1]) printf("%d -\n", j);
                else continue;
                used[j] = true;
                break;
            }
        }
    }

    return 0;
}