#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>

using namespace std;

const int maxn = 110;
int N, S, T, deep;
int con[10][10], sum[10];
class Poi
{
	int a, b;
	public:
		void read()
		{
			cin >> a >> b;
			++con[a][b], ++sum[a];
			++sum[b], ++con[b][a];
		}
		bool match(int a1, int b1)
		{
			return (a == a1) && (b == b1);
		}
		void print()
		{
			cerr << a << ' ' << b << endl;
		}
} color[maxn];
bool use[maxn];
int ans[2 * maxn];

void dfs(int v)
{
	for (int i = 0; i < 7; ++i) if (con[v][i])
	{
		--con[v][i], --con[i][v];
		dfs(i);
	}
	ans[++deep] = v;
}

void read()
{
	memset(sum, 0, sizeof sum);
	memset(con, 0, sizeof con);
	
	cin >> N;
	for (int i = 1; i <= N; ++i) color[i].read();
}

void getans()
{
	S = -1;
	int total = 0;
	for (int i = 0; i < 7; ++i) if (sum[i] & 1)
	{
		if (S == -1) S = i;
		else if (++total > 1)
		{
			printf("No solution\n");
			return;
		}
	}
	if (S == -1)
	{
		for (int i = 0; i < 7; ++i) if (sum[i])
		{
			S = i; break;
		}
	}

	deep = 0;
	dfs(S);
	if (deep != (N + 1))
	{
		printf("No solution\n");
		return;
	}

	memset(use, 0, sizeof use);
	for (; deep > 1; --deep)
	{
		bool ff = false;
		for (int i = 1; i <= N; ++i) if (!use[i])
		{
			char ope[2] = {'+', '-'};
			for (int j = 0; j < 2; ++j) if (color[i].match(ans[deep - j], ans[deep - (1 - j)]))
			{
				use[i] = ff = true;
				printf("%d %c\n", i, ope[j]);
				break;
			}
			if (ff) break;
		}
	}
}
		
int main()
{
	read();
	getans();
}
