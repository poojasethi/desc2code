#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;
struct Edge {
    int num,y;
};
int n;
int d[7];
bool vi[111];
vector <Edge> g[7];
vector <int> ans;
void dfs(int x) {
    for (int i=0; i<g[x].size(); i++) {
        Edge now=g[x][i];
        if (!vi[abs(now.num)]) {
            vi[abs(now.num)]=1;
            dfs(now.y);
            ans.push_back(now.num);
        }
    }
}
int main() {
    memset(d,0,sizeof(d));
    memset(vi,0,sizeof(vi));
    int st;
    scanf("%d",&n);
    for (int i=1; i<=n; i++) {
        int x,y;
        scanf("%d%d",&x,&y);
        g[x].push_back((Edge) {i,y});
        g[y].push_back((Edge) {-i,x});
        d[x]++,d[y]++;
        st=x;
    }
    int cnt=0;
    for (int i=0; i<7; i++) {
        if (d[i]>0&&(d[i]&1)) {
            cnt++;
            st=i;
        }
    }
    if (cnt==2||cnt==0) {
        ans.clear();
        dfs(st);
        if (ans.size()==n) {
            for (int i=n-1; i>=0; i--) {
                if (ans[i]>0) printf("%d +\n",ans[i]);
                else printf("%d -\n",-ans[i]);
            }
        } else printf("No solution\n");
    } else printf("No solution\n");
    return 0;
}

	 			 				 		       	    		  		