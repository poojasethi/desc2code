#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

#define SZ(v) ((int)(v).size())
#define AB(v) ((v) < 0 ? -(v) : (v))

const int kMaxN = 7;
const int kMaxM = 110;

vector<int> P[kMaxN];
vector<int> ID[kMaxN];
vector<int> result;
int vis[kMaxM], du[kMaxN];
int m, init_x;

void cal(int x) 
{
  for (int i = 0; i < SZ(P[x]); ++i)
    if (!vis[AB(ID[x][i])]) {
      vis[AB(ID[x][i])] = 1;
      cal(P[x][i]);
      result.push_back(-ID[x][i]);
    }
}

void solve()
{
  cal(init_x);
  if (SZ(result) != m) 
    puts("No solution");
  else {
    for (int i = 0; i < SZ(result); ++i)
      printf("%d %c\n", AB(result[i]), result[i] < 0 ? '-' : '+');
  }
}

int main()
{
  scanf("%d", &m);
  for (int x, y, i = 1; i <= m; ++i) {
    scanf("%d%d", &x, &y);
    ++du[x]; ++du[y];
    P[x].push_back(y);
    ID[x].push_back(i);
    P[y].push_back(x);
    ID[y].push_back(-i);
  }
  int cnt = 0;
  for (int i = 0; i < kMaxN; ++i) if (du[i]) { init_x = i; break; }
  for (int i = 0; i < kMaxN; ++i) 
    if (du[i]&1) { ++cnt; init_x = i; }
  if (cnt > 2)
    puts("No solution");
  else
    solve();

  return 0;
}
