#include <iostream>
#include <cstdio>
#include <algorithm>
#include <string>
#include <cmath>
#include <vector>
using namespace std;

const int N = 111;
int a[N], n, c[10], g[10][10], was[10];
vector <int> b[10][10];

void dfs(int v){
	for(int i = 0; i <= 6; i++)
		if(g[v][i])g[v][i]--, g[i][v]--, dfs(i);
	a[++a[0]] = v;
}

void dfs2(int v){
	was[v] = 1;
	for(int i = 0; i <= 6; i++)
		if(!was[i] && g[v][i])dfs2(i);
}

int main(){
//	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	
	scanf("%d", &n);
	if(n == 1){
		puts("1 +");
		return 0;
	}
	for(int i = 1; i <= n; i++){
		int x, y;
		scanf("%d%d", &x, &y);
		g[x][y]++, g[y][x]++;
		c[x]++, c[y]++;
		b[x][y].push_back(i);
	}
	
	int id = -1, cnt = 0;
	for(int i = 0; i <= 6; i++){
		cnt += c[i] % 2;
		if(c[i] % 2)id = i;
	}
	if(cnt > 2){
		puts("No solution");
		return 0;
	}
	
	cnt = 0;
	for(int i = 0; i <= 6; i++)
		if(c[i] && !was[i])++cnt, dfs2(i);
	if(cnt > 1){
		puts("No solution");
		return 0;
	}
	if(id == -1){
		for(int i = 0; i <= 6; i++)
			for(int j = 0; j <= 6; j++)
				if(g[i][j])dfs(i);
	}else{
		dfs(id);
	}
		
	for(int i = 1; i < a[0]; i++){
		int v1 = a[i], v2 = a[i + 1];
		if(b[v1][v2].size()){
			printf("%d +\n", b[v1][v2][b[v1][v2].size() - 1]);
			b[v1][v2].pop_back();
		}else{
			printf("%d -\n", b[v2][v1][b[v2][v1].size() - 1]);
			b[v2][v1].pop_back();
		}
	}
	
	return 0;
}
