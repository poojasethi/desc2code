#include <bits/stdc++.h>
#define PB push_back

using namespace std;

int n, st, odd;
vector <int> a[7][7];
vector <int> b[7][7];

void cnct(int v) {
	for (int i = 0; i < 7; i++)
		if (b[v][i].size() > 0) {
			b[v][i].erase(b[v][i].begin());
			b[i][v].erase(b[i][v].begin());
			cnct(i);
		}
}

void dfs(int v, int in){
	for (int i = 0; i < 7; i++)
		if (a[v][i].size() > 0) {
			int x = a[v][i][0];
			a[v][i].erase(a[v][i].begin());
			a[i][v].erase(a[i][v].begin());
			dfs(i, x);
		}
	if (in != 100000)
		cout << abs(in) << " " << (in < 0? '+': '-') << '\n';
}

int main() {
	cin >> n;
	for (int x, y, i = 1; i <= n; i++) {
		cin >> x >> y;
		a[x][y].PB(i);
		a[y][x].PB(-i);
		b[x][y].PB(i);
		b[y][x].PB(-i);
		st = x;
	}
	for (int i = 0; i < 7; i++) {
		int k = 0;
		for (int j = 0; j < 7; j++) {
				k += a[i][j].size();
		}
		if (k % 2) {
			st = i;
			odd++;
		}
		if (odd > 2) {
			cout << "No solution\n";
			return 0;
		}
	}
	cnct(st);
	for (int i = 0; i < 7; i++)
		for (int j = 0; j < 7; j++)
			if (b[i][j].size() != 0) {
				cout << "No solution\n";
				return 0;
			}
	dfs(st, 100000);
	return 0;
}