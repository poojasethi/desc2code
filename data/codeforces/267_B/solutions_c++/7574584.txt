
#include <iostream>
#include <vector>

using namespace std;

class Domino
{
public:
	int x, e;
	bool rotate;
	Domino(int x, bool rotate, int e):x(x), rotate(rotate), e(e){}
};

const int MAX_EDGE = 105;

vector <Domino> g[10];
vector <pair <int, char> > print;
bool mark[MAX_EDGE];

void dfs(int u, int edge, bool rotate)
{
	for (int i = 0; i < g[u].size(); i++)
	{
		int x = g[u][i].x , e = g[u][i].e;
		bool r = g[u][i].rotate;
		if (!mark[e])
		{
			mark[e] = true;
			dfs(x, e, r);
		}
	}
	if (edge != -1)
		print.push_back(make_pair(edge, (!rotate ? '+' : '-')));
}

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int a, b;
		cin >> a >> b;
		g[a].push_back(Domino(b, false, i));
		g[b].push_back(Domino(a, true, i));
	}
	int start = -1, odd = 0;
	for (int i = 0; i <= 6; i++)
		if (g[i].size() % 2 == 1)
		{
			start = i;
			odd++;
		}
	if (start == -1)
		for (int i = 0; i <= 6; i++)
			if (g[i].size() != 0)
			{
				start = i;
				break;
			}
	if (start == -1 || odd > 2)
	{
		cout << "No solution" << endl;
		return 0;
	}

	dfs(start, -1, false);
	for (int i = 0; i < n; i++)
		if (!mark[i])
		{
			cout << "No solution" << endl;
			return 0;
		}
	for (int i = print.size() - 1; i >= 0 ; i--)
		cout << print[i].first + 1 << " " << print[i].second << endl;
}