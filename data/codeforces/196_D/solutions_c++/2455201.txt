#include <cstdio>
#include <cstring>

#include <algorithm>
using namespace std;

typedef unsigned long long ULL;

const int N = 400050;
const ULL M = 31;

char s[N], res[N];
ULL hv[N], rv[N], pow[N];
int d, n;

bool check (int l, int r) {
	ULL n = hv[r] - hv[l - 1] * pow[r - l + 1],
			 x = rv[r] - rv[l - 1];
	return n * pow[l] == x;
}

bool dfs (int p, bool greater)
{
	if (p == n + 1) return greater;
	for (char ch = greater ? 'a' : s[p]; ch <= 'z'; ++ch)
	{
		res[p] = ch;
		hv[p] = hv[p - 1] * M + ch - 'a' + 1;
		rv[p] = rv[p - 1] + (ch - 'a' + 1) * pow[p];
		if (p >= d && check(p - d + 1, p)) continue;
		if (p > d && check(p - d, p)) continue;
		if (dfs(p + 1, greater || (ch > s[p]))) return true;
	}
	return false;
}

int main ()
{
#ifdef LOCAL
	freopen("in", "r", stdin);
#endif
	scanf("%d", &d);
	scanf("%s", s + 1);
	n = strlen(s + 1);
	pow[0] = 1;
	for (int i = 1; i <= n; ++i)
		pow[i] = pow[i - 1] * M;
	if (dfs(1, 0)) printf("%s\n", res + 1);
	else puts("Impossible");
	return 0;
}

