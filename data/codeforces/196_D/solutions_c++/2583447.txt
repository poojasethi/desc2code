#include<stdio.h>
#include<string.h>
const int maxn=400010;
typedef long long ll;
const ll seed=1000000007;
char S[maxn],T[maxn];
int n,m;
ll H[maxn],HR[maxn],P[maxn];
bool ok;
bool check(int i,int m)
{
	if(i<m)return 0;
	int M=m>>1;
	if(m&1)
	{
		ll rh=H[i]-H[i-M]*P[M];
		rh*=P[i];
		ll lh=HR[i-M-1]-HR[i-m];
		lh*=P[m];
		return rh==lh;
	}
	else
	{
		ll rh=H[i]-H[i-M]*P[M];
		rh*=P[i];
		ll lh=HR[i-M]-HR[i-m];
		lh*=P[m];
		return rh==lh;
	}
}
void dfs(int i,bool free)
{
	if(i>n)
	{
		ok=true;
		for(int i=1;i<=n;i++)putchar('a'+T[i]);
		putchar('\n');
		return;
	}
	char &x=T[i];
	for(x=free?0:S[i];x<26;x++)
	{
		H[i]=H[i-1]*seed+x;
		HR[i]=HR[i-1]+x*P[i-1];
		if(!check(i,m)&&!check(i,m+1))dfs(i+1,free||x!=S[i]);
		if(ok)return;
	}
}
int main()
{
	scanf("%d%s",&m,S+1);
	n=strlen(S+1);
	for(int i=1;i<=n;i++)S[i]-='a';
	int t=n;
	while(t&&S[t]==25)S[t]=0,t--;
	if(!t)return puts("Impossible"),0;
	S[t]++;
	P[0]=1;
	for(int i=1;i<=n;i++)P[i]=P[i-1]*seed;
	dfs(1,0);
	if(!ok)puts("Impossible");
	return 0;
}
