#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;

typedef long long LL;
const int maxn = 400005, mod = 1000000007;
LL pow[maxn], hl[maxn], hr[maxn];
char s[maxn], ans[maxn];
int n, d;

bool palindrome(int x, int d) {
    if (x < d) return false;
    LL t = (hl[x] - hl[x - d] * pow[d] % mod) % mod * pow[x - d] % mod;
    return (t + mod) % mod == (hr[x] - hr[x - d] + mod) % mod;
}

bool dfs(int u, bool flag) {
    if (u == n + 1) return flag;
    for (int c = flag ? 0 : s[u] - 'a'; c < 26; ++c) {
        ans[u] = 'a' + c;
        hl[u] = (hl[u - 1] * 29 + c) % mod;
        hr[u] = (hr[u - 1] + c * pow[u - 1]) % mod;
        if (!palindrome(u, d) && !palindrome(u, d + 1))
            if (dfs(u + 1, flag || ans[u] > s[u])) return true;
    }
    return false;
}

int main() {
    int i;
    scanf("%d", &d);
    scanf("%s", s + 1);
    n = strlen(s + 1);
    for (i = 1, pow[0] = 1; i <= n; ++i)
        pow[i] = pow[i - 1] * 29 % mod;
    printf("%s\n", dfs(1, false) ? ans + 1 : "Impossible");
    return 0;
}
