#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int P = 1000009;
const int maxn = 1000001;

typedef long long i64;

i64 n,m;
i64 L[maxn],R[maxn],Q[maxn];
char st[maxn],sz[maxn];

i64 huiwen(i64 x,i64 y)
{
    if (x < y) return 0;
    return (L[x]-L[x-y]*Q[y])*Q[x-y] == R[x]-R[x-y];
}

i64 find(i64 x,i64 top)
{
    if (x == n+1) 
        return true;
    for (i64 i = top? st[x]:'a'; i <= 'z'; ++i)
    {
        sz[x] = i;
        L[x] = L[x-1]*P+i;
        R[x] = R[x-1]+i*Q[x-1];
        if (!huiwen(x,m) && !huiwen(x,m+1) && find(x+1,top && (i == st[x]))) return true;
    }
    return false;
}

int main()
{
    i64 i;

    scanf("%I64d\n",&m);
    scanf("%s",st+1);
    for (n = 0; st[n+1]; ++n) ;
    for (Q[0] = 1,i = 1; i <= n; ++i) Q[i] = Q[i-1]*P;
    for (i = n; i && st[i] == 'z'; --i) st[i] = 'a';
    st[i]++;
    if (!i || !find(1,1)) printf("Impossible\n");
    else for (i = 1; i <= n; ++i) printf("%c",sz[i]);

    return 0;
}
