#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
typedef unsigned long long qword;
const int sd = 137, N = 400010;
int d, n;
char s[N], t[N];
qword P[N], a[N], b[N];
bool ok;
bool can(int k, int l) {
	if (++k < l)
		return true;
	qword val1 = a[k] - a[k - l] * P[l];
	qword val2 = b[k] - b[k - l];
	return val1 * P[k - l] != val2;
}
void dfs(int k, bool f) {
	if (k == n) {
		ok = true;
		return;
	}
	for (t[k] = f ? 'a' : s[k]; t[k] <= 'z'; t[k]++) {
		a[k + 1] = a[k] * sd + t[k];
		b[k + 1] = t[k] * P[k] + b[k];
		if (can(k, d) && can(k, d + 1))
			dfs(k + 1, f ? f : t[k] != s[k]);
		if (ok)
			return;
	}
}
int main() {
	scanf("%d%s", &d, s);
	n = strlen(s);
	int w = n - 1;
	while (s[w] == 'z' && w >= 0)
		s[w--] = 'a';
	if (w < 0)
		return puts("Impossible"), 0;
	s[w]++;
	P[0] = 1;
	for (int i = 1; i < N; ++i)
		P[i] = P[i - 1] * sd;
	dfs(0, 0);
	puts(ok ? t : "Impossible");
}
