from bisect import bisect_left
m = int(raw_input())

genned = []

insts = []
sizes = []
size = 0

for i in xrange(m):
  inst = map (int, raw_input().split(" "))
  if len(genned) < 100000:
    if inst[0] == 1:
      genned.append(inst[1])
      size += 1
    else:
      genned = genned + genned[:inst[1]] * inst[2]
      size += inst[1] * inst[2]
  else:
    if inst[0] == 1:
      size += 1
    else:
      size += inst[1] * inst[2]
    insts.append(inst)
    sizes.append(size)

n = int(raw_input())
ns = map(int, raw_input().split(" "))

orig_size = len(genned)

index = 0
for n in ns:
  if n - 1 < orig_size:
    print genned[n - 1],
  else:
    if n > sizes[index]:
      index = bisect_left(sizes, n, index)
    inst = insts[index]

    if inst[0] == 1:
      print inst[1],
    else:
      lower_size = orig_size
      if index > 0:
        lower_size = sizes[index - 1]
      print genned[(n - lower_size - 1) % inst[1]],

print ""