#include <bits/stdc++.h>
using namespace std;

const int maxn = 6e5;

int N,ar[maxn],prev[maxn],seg[maxn<<2];
map < int , int > last;
vector < int > ans;

inline void update( int k , int b , int e , int x , int y ){
	
	if( x == b and x == e ){
		seg[k] = y;return;}
	
	int m = (b+e) >> 1;
	
	if( x <= m )
		update( k+k , b , m , x , y );
	else
		update( k+k+1 , m+1 , e , x , y );
	
	seg[k] = max( seg[k+k] , seg[k+k+1] );
}

inline int find( int k , int b , int e , int x , int y ){
	
	if( e < x or b > y )
		return 0;
	
	if( b >= x and e <= y )
		return seg[k];
	
	int m = (b+e) >> 1;
	
	return max( find( k+k , b , m , x , y ) , find( k+k+1 , m+1 , e , x , y ) );
}

int main(){
	
	scanf("%d",&N);
	
	for( int i=1 ; i <= N ; i++ ){
		scanf("%d",&ar[i]);
		prev[i] = last[ar[i]];
		last[ar[i]] = i;
	}
	
	for( int i=1,x,cut=1 ; i <= N ; i++ ){
		
		if( prev[prev[prev[i]]] >= cut ){
			ans.push_back( prev[prev[prev[i]]] );
			ans.push_back( prev[prev[i]] );
			ans.push_back( prev[i] );
			ans.push_back( i );
			cut = i+1;
		}
		
		if( prev[i] )
			update( 1 , 1 , N , prev[i] , i );
		
		if( cut <= prev[i]-1 and (x = find( 1 , 1 , N , cut , prev[i]-1 )) > prev[i] ){
			ans.push_back( prev[x] );
			ans.push_back( prev[i] );
			ans.push_back( x );
			ans.push_back( i );
			cut = i+1;
		}
	}
	
	printf("%d\n",ans.size());
	for( int i=0 ; i < (int)ans.size() ; i++ )
		printf("%d ",ar[ans[i]]);
	
	return 0;
}
