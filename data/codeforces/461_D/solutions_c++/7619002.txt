#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <utility>
#include <functional>
#include <vector>
using namespace std;
typedef pair<int,int> PII;
typedef vector<PII>::iterator VPI;
typedef long long LL;
#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define MOD 1000000007
#define MN 100005

int n,q;

inline int jdz(int x) {return (x<0 ? 0-x : x);}


vector<PII> e[MN];
inline void addedge(int x,int y,int z)
{
    e[x].pb(mp(y,z));
    e[y].pb(mp(x,z));
}

LL ans;
int col[MN];

inline LL pow(LL x,LL y)
{
    LL res=1;
    for(;y>0;y>>=1)
    {
        if(y&1) (res*=x)%=MOD;
        (x*=x)%=MOD;
    }
    return res;
}

bool dfs(int x,int c)
{
    col[x]=c;
    for(VPI it=e[x].begin();it!=e[x].end();++it)
    {
        PII i=*it;
        if(col[i.X]!=-1 && c^i.Y!=col[i.X]) return false;
        else if(col[i.X]==-1)
        {
            if(!dfs(i.X,c^i.Y)) return false;
        }
    }
    return true;
}

int main()
{
    char c;
    int x,y,z;
    
    cin>>n>>q;
    while(q--)
    {
        scanf("%d%d",&x,&y);
        c=getchar();
        while(c!='o' && c!='x') c=getchar();
        z=(c=='o' ? 1 : 0);
        
        int _x,_y;
        _x=n-1-jdz(x-y),_y=jdz(x+y-n-1);
        if(_x>_y) swap(_x,_y);
        addedge(_x,_y+2,z);
    }
    
    bool ok=1;
    ans=-2;
    memset(col,-1,sizeof(col));
    for(int i=0;i<=n+1;++i)
    if(col[i]==-1)
    {
        ++ans;
        if(!dfs(i,0)) {ok=0; break;}
    }
    
    if(ok==0) printf("0\n");
    else cout<<pow(2,ans)<<endl;
    //getchar(); getchar();
    return 0;
}
