#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<iostream>
#include<vector>
#include<string>
using namespace std;
typedef long long LL;
const int V=100100;
const int P=1000000007;
struct Edge{int v,w,ne;}e[V*2];
int p[V],K=0;
void add(int u,int v,int w)
{
    e[K].v=v;e[K].w=w;
    e[K].ne=p[u];p[u]=K++;
    e[K].v=u;e[K].w=w;
    e[K].ne=p[v];p[v]=K++;
}
int can,vis[V];
void dfs(int u)
{
    for(int i=p[u];i!=-1;i=e[i].ne)
    {
        int v=e[i].v;
        if(vis[v]!=-1)
        {
            if(vis[v]^vis[u]!=e[i].w)
            can=0;
        }
        else
        {
            vis[v]=vis[u]^e[i].w;
            dfs(v);
        }
    }
}
int n,m,x,y;
char s[120];
int main()
{
    while(~scanf("%d%d",&n,&m))
    {
        memset(p,-1,sizeof(p));K=0;
        while(m--)
        {
            scanf("%d%d%s",&x,&y,s);
            if(x+y>n)
            {
                int yy=n+1-x;
                int xx=n+1-y;
                x=xx;y=yy;
            }
            if(x>y)swap(x,y);
            int u=y-x+2;
            int v=x+y;
            if(s[0]=='o')add(u-2,v,1);
            else add(u-2,v,0);
            //printf("%d %d\n",u,v);
        }
        int ret=1;
        memset(vis,-1,sizeof(vis));
        for(int i=0;i<=n+1;i++)
        {
            if(vis[i]==-1)
            {
                vis[i]=0;
                can=1;
                dfs(i);
                if(can)
                {
                    if(i>1)
                    ret=(ret*2)%P;
                }
                else ret=0;
            }
        }
        printf("%d\n",ret);
    }
    return 0;
}
