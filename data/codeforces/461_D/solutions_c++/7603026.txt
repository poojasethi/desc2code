#include<bits/stdc++.h>
using namespace std;

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define each(i,c) for(__typeof(c.begin()) i=c.begin();i!=c.end();i++)
#define pb push_back
#define mp make_pair
#define all(c) c.begin(),c.end()
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf=(int)1e9;
const double EPS=1e-9, INF=1e12;

const int MX = 220000;
int odd[MX], even[MX];
int root(int *p, int x){
	if(x == p[x]) return x;
	return p[x] = root(p, p[x]);
}
bool merge(int *p, int a, int b){
	a = root(p, a); b = root(p, b);
	if(a == b) return 0;
	p[b] = a;
	return 1;
}

int n, q;

int main(){
	scanf("%d%d", &n, &q);
	rep(i, 2 * n + 2){
		odd[i] = i;
		even[i] = i;
	}
	int cmp = n;
	while(q--){
		int x, y; char c;
		scanf("%d%d %c", &y, &x, &c);
		x--; y--;
		
		int L = abs(x - y);
		int R = min(x + y, 2 * (n - 1) - x - y);
		
		int *target = (x + y) % 2 ? odd : even;
		int res = 0;
		
		if(R % 2 != (x + y) % 2) R--;
		L /= 2; R /= 2;
		R++;
		
		if(c == 'o'){
			res |= merge(target, 2 * L, 2 * R + 1);
			res |= merge(target, 2 * L + 1, 2 * R);
		}
		else{
			res |= merge(target, 2 * L, 2 * R);
			res |= merge(target, 2 * L + 1, 2 * R + 1);
		}
		cmp -= res;
	}
	ll ans = 1;
	rep(i, cmp) ans *= 2, ans %= inf + 7;
	rep(i, n){
		if(root(odd, 2 * i) == root(odd, 2 * i + 1)) ans = 0;
		if(root(even, 2 * i) == root(even, 2 * i + 1)) ans = 0;
	}
	cout << ans << endl;
	return 0;
}
