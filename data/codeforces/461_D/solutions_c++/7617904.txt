#include<iostream>
#include<cstdio>
#include<utility>
using namespace std;

int N, K, r[200010], cnt;
long long ans = 1;
const int MOD = 1000000007;

inline int enemy(int x){
	return x >= N + 2 ? x - N - 2 : x + N + 2;
}

pair<int, int> getInterval(int x, int y){ // x <= y
	if (x > y) return getInterval(y, x);
	if (x + y > N + 1) return getInterval(N + 1 - y, N + 1 - x);
	return make_pair(y - x, y + x);
}

int findR(int x){
	return r[x] < 0 ? x : r[x] = findR(r[x]);
}

int Union(int x, int y){
	if (findR(x) == findR(enemy(y))) return 1;
	x = findR(x), y = findR(y);
	if (x == y) return 2;
	r[x] = y;
	return 0;
}

int work(pair<int, int> p, bool b){
	int x = p.first, y = p.second;
	char ret = b ? (Union(x, enemy(y)), Union(enemy(x), y))
				 : (Union(x, y), Union(enemy(x), enemy(y)));
	if (1 == ret) return 1;
	if (2 == ret) ++cnt;
	return 0;
}

int main(){
	int x, y;
	char c;
	pair<int, int> p;
	scanf("%d%d", &N, &K);
	for (int i = 0; i <= N + 1; ++i)
		r[i] = r[enemy(i)] = -1;
	cnt = N - K;
	while (K--){
		scanf("%d%d %c", &x, &y, &c);
		if (1 == work(getInterval(x, y), 'o' == c)){
			cnt = -1;
			break;
		}
	}
	if (cnt >= 0)
		while (cnt--) ans = (ans << 1) % MOD;
	else
		ans = 0;
	cout << ans << endl;
	return 0;
}
