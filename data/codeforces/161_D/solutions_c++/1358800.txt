#include <iostream>
#include <vector>
using namespace std;
const int MaxN = 50*1000 + 10, MaxV=510 ;
bool mark[MaxN];
int w;
int n;
int k;
int u;
int v;
int q[MaxN][MaxV];
vector <int> h[MaxN];

void dfs(int v)
{
q[v][0] = 1;  mark[v] = 1;
for (int i = 0 ; i < h[v].size() ; i++)
if (!mark[h[v][i]])
{
dfs(h[v][i]);
for (int j = 0 ; j < k ; j++)
{
w += q[h[v][i]][j]*q[v][k-j-1];
}
for (int j = 1 ; j <= k ; j++)
{
q[v][j] += q[h[v][i]][j-1];
}
}
}
int main()
{
cin >> n >> k;
for (int i = 0 ; i < n-1 ; i++)
{
cin >> u ;
cin >> v;
h[u].push_back(v);
h[v].push_back(u);
}
dfs(1);
cout << w ;
return 0;
}
