#include <cstdio>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long LL;
map<LL, int> M;
const int MAXN = 300300;
LL T[MAXN];
LL PS[MAXN];

int main() {
  int n; scanf ("%d", &n);
  LL best = -(1LL << 62);
  int bb, be;
  for (int i = 0; i < n; i++) {
    scanf("%I64d", &T[i]);
    PS[i] = i == 0 ? max(0LL, T[i]) : (PS[i-1] + max(0LL,T[i]));
    if (M.find(T[i]) == M.end()) M[T[i]] = i;
    else {
      if (best < PS[i-1] - PS[M[T[i]]] + 2*T[i]) {
        best = PS[i-1] - PS[M[T[i]]] + 2*T[i];
        bb = M[T[i]]; be = i;  
      }
    }
  }
  vector<int> V;
  for (int i = 0; i < n; i++) 
    if (i < bb || i > be || (T[i] < 0 && i != bb && i != be))
      V.push_back(i);
  printf ("%I64d %d\n", best, V.size());
  for (int i = 0; i < V.size(); i++)
    printf ("%d ", V[i]+1);
  printf ("\n");
  return 0;
}
