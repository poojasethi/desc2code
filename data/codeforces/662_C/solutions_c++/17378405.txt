#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

#define ll long long

const int N = 20, M = 100000;

int n, m;
int a[M+9];
char s[M+9];
ll c[1<<N], d[1<<N];
ll ans;

inline void FWT(ll *a, int f) {
    for(int i = 1; i <= n; ++i)
        for(int j = 0; j < (1<<n); ++j)
            if(!(j&(1<<(i-1)))) {
                ll x = a[j], y = a[j^(1<<(i-1))];
                a[j] = x+y, a[j^(1<<(i-1))] = x-y;
            }
    if(f == -1) {
        for(int i = 0; i < (1<<n); ++i)
            a[i] >>= n;
    }
}

int main() {
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; ++i) {
        scanf("%s", s+1);
        for(int j = 1; j <= m; ++j)
            if(s[j] == '1')
                a[j] |= 1<<(i-1);
    }
    for(int i = 1; i <= m; ++i)
        c[a[i]]++;
    for(int i = 0; i < (1<<n); ++i) {
        int x = __builtin_popcount(i);
        d[i] = std::min(x, n-x);
    }
    FWT(c, 1), FWT(d, 1);
    for(int i = 0; i < (1<<n); ++i)
        c[i] *= d[i];
    FWT(c, -1), ans = n*m;
    for(int i = 0; i < (1<<n); ++i)
        ans = std::min(ans, c[i]);
    std::cout << ans << std::endl;
    return 0;
}
