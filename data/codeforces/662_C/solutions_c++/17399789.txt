#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAXN = (1 << 20) + 5;

typedef long long LL;

LL C[MAXN],Mi[MAXN];
int V[MAXN],N,M;

void FWT(LL *A,int l,int r)
{
	if (r - l < 2) return;
	int mid = l + r >> 1;
	for(int i = l;i < mid;i ++) 
	{
		LL u = A[i],v = A[i + mid - l];
		A[i] = u + v,A[i + mid - l] = u - v;
	}
	FWT(A,l,mid),FWT(A,mid,r);
}

void UTF(LL *A,int l,int r)
{
	if (r - l < 2) return;
	int mid = l + r >> 1;
	for(int i = l;i < mid;i ++) 
	{
		LL u = A[i],v = A[i + mid - l];
		A[i] = (u + v) / 2,A[i + mid - l] = (u - v) / 2;
	}
	UTF(A,l,mid),UTF(A,mid,r);
}

int main()
{
	scanf("%d%d", &N, &M);
	char c;
	for(int i = 0;i < N;i ++)
	{
		for(int j = 0;j < M;j ++) 
		{
			while (c = getchar(),c < '0' || c > '9');
			V[j] |= (c - 48) * (1 << i);
		}
	}
	for(int i = 0;i < (1 << N);i ++) 
	{
		int v = __builtin_popcount(i);
		Mi[i] = min(v,N - v);
	}
	for(int j = 0;j < M;j ++) C[V[j]] ++;
	FWT(C,0,1 << N);
	FWT(Mi,0,1 << N);
	for(int j = 0;j < (1 << N);j ++) C[j] *= Mi[j];
	UTF(C,0,1 << N);
	int ans = (1 << 30);
	for(int j = 0;j < (1 << N);j ++) ans = min(ans,int(C[j]));
	printf("%d\n", ans);	
	return 0;
}
