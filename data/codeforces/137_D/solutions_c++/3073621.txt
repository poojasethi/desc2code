#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
struct node
{
    int val,f;
}dp[550][550];
char s[1000];
int d2[550][550];
void dfs(int n,int K)
{
    if(!dp[n][K].f)
    {
        for(int i=0;i<=n;i++)
        {
            if(i>n/2)
                printf("%c",s[n-i]);
            else
                printf("%c",s[i]);
        }
        return ;
    }
    dfs(dp[n][K].f-1,K-1);
    printf("+");
    for(int i=dp[n][K].f;i<=n;i++)
    if(i<=(n+dp[n][K].f)/2)
        printf("%c",s[i]);
    else
        printf("%c",s[n-i+dp[n][K].f]);
}
int main()
{
    int K;
    scanf("%s%d",s,&K);
    K--;
    int n=strlen(s);
    memset(d2,0,sizeof(d2));
    for(int i=0;i<n;i++)
    for(int j=i;j<n;j++)
    for(int k=i;k<=(i+j)/2;k++)
    if(s[k]!=s[j-k+i])
    d2[i][j]++;
    for(int i=0;i<n;i++)
    dp[i][0].val=d2[0][i],dp[i][0].f=0;
    for(int i=0;i<n;i++)
    for(int j=1;j<=K;j++)
    {
        dp[i][j]=dp[i][j-1];
        for(int k=0;k<=i;k++)
        if(dp[i][j].val>dp[k][j-1].val+d2[k+1][i])
        {
            dp[i][j].val=dp[k][j-1].val+d2[k+1][i];
            dp[i][j].f=k+1;
        }
    }
    printf("%d\n",dp[n-1][K].val);
    dfs(n-1,K);
}

   		  	  	   	 	    		 		