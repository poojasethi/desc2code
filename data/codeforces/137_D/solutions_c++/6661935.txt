#include <iostream>
#include <string.h>
#include <stdio.h>
#include <vector>
#include <queue>
#include <string>
#include <algorithm>
using namespace std;
#define ll long long

const int N = 509,inf=0x3f3f3f3f;
int dp[N][N],num,cha[N][N];
char s[N],str[N][N][N];
void pre()
{
	for(int i=0;s[i];i++)
	{
		for(int j=i;s[j];j++)
		{
			int sj=j,si=i;
			while(sj>=si)
			{
				str[i][j][sj-i]=str[i][j][si-i]=s[si];
				if(s[sj]!=s[si])
				cha[i][j]++;
				sj--,si++;
			}
			str[i][j][j-i+1]=0;
		}
	}
}
int bac[N][N];
int dfs(int st,int num)
{
	// printf("%d %d\n",st,num);
	int &d=dp[st][num];
	if(d+1) return d;
	if(s[st]==0) {return d=0;}
	if(num==0) return d=inf;
	d=inf;
	for(int i=st;s[i];i++)
	{
		if(dfs(i+1,num-1)+cha[st][i]<d)
		{
			d=dfs(i+1,num-1)+cha[st][i];
			bac[st][num]=i+1;
		}
	}
	// printf("%d %d: %d\n",st,num,d);
	return d;
}
bool ok=0;
void DFS(int st,int num)
{
	if(s[st]==0)return;
	if(ok) printf("+");
	ok=1;
	printf("%s",str[st][bac[st][num]-1]);
	DFS(bac[st][num],num-1);
}
int main()
{
	scanf("%s%d",s,&num);
	pre();
	// cout<<cha[0][6]<<endl;
	memset(dp,-1,sizeof(dp));
	memset(bac,-1,sizeof(bac));
	cout<<dfs(0,num)<<endl;
	DFS(0,num);
	puts("");
	return 0;
}