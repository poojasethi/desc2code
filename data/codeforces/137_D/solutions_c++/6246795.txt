#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int N = 503;
const int mod = 1e9+7;
const int INF = 0x3fffffff;
int n, k;
int dp[N][N], f[N][N], pre[N][N];
char s[N];
void dfs(int x, int y) {
	if(!x) return;
	dfs(x-1, pre[x][y]);
	if(x!=1) printf("+");
	int l = pre[x][y]+1, r = y, i;
	int p = (r-l+1)/2;
	for(i = 0; i < p; i++)
		printf("%c", s[i+l]);
	if((r-l+1)&1)
		printf("%c", s[i+l]);
	for(i = p-1; i >= 0; i--)
		printf("%c", s[i+l]);
}
int main() {
	int i, j, u;
	scanf("%s%d", s+1, &k);
	n = strlen(s+1);
	for(i = 1; i <= n; i++) 
		for(j = 1; i+j-1 <= n; j++)
			for(u = 0; u<(j/2); u++)
				if(s[i+u] != s[i+j-1-u]) f[i][i+j-1]++;
	for(i = 0; i <= n; i++)
		for(j = 0; j <= n; j++)
			dp[i][j] = INF;
	dp[0][0] = 0;
	for(i = 0; i < k; i++)
		for(j = i; j < n; j++) if(dp[i][j] != INF) {
			for(u = 1; u+j<=n; u++) {
				int val = dp[i][j] +  f[j+1][j+u];
				if(dp[i+1][j+u] > val) {
					dp[i+1][j+u] = val;
					pre[i+1][j+u] = j;
				}
			}
		}
	int ans = INF, pos = -1;
	for(i = 1; i <= k; i++)
		if(ans > dp[i][n]) {
			ans = dp[i][n];
			pos = i;
		}
	printf("%d\n", ans);
	dfs(pos, n);
	return 0;
}

			  	  	 	 	   						 	  	