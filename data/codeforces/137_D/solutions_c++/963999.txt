#include <algorithm>
#include <vector>
#include <iomanip>
#include <iostream>
#include <cstring>
using namespace std;
string s;
int n,k;
int cnt[501][501];
int solve(int start,int end){
	int res=0;
	for(int i=start;i<end;i++){
		res+=(s[i]!=s[end-i-1+start]);
	}
	return res/2;
}
string solve2(int start,int end){
	string res;
	for(int i=start;i<end;i++){
		res.push_back(min(s[i],s[end-i-1+start]));
	}
	return res;
}
int dp[503][503];
int back[503][503];
string res[503];
int main() {
	cin>>s;
	cin>>k;
	n=s.size();
	for(int i=0;i<n;i++){
		for(int j=i+1;j<=n;j++){
			cnt[i][j]=solve(i,j);
		}
	}
	memset(dp,0x7F,sizeof(dp));
	dp[0][0]=0;
	for(int j=0;j<=k;j++){
		for(int i=0;i<n;i++){
			for(int k=i+1;k<=n;k++){
				if(dp[j+1][k]>dp[j][i]+cnt[i][k]){
					dp[j+1][k]=dp[j][i]+cnt[i][k];
					back[j+1][k]=i;
				}
			}
		}
	}
	int ans=99999999;
	for(int i=1;i<=k;i++){
		ans=min(ans,dp[i][n]);
	}
	cout<<ans<<endl;
	int tra=0;
	for(int i=1;i<=k;i++){
		if(dp[i][n]==ans)tra=i;
	}
	int i=tra,j=n;
	int c=0;
	while(1){
		res[c++]=solve2(back[i][j],j);
		j=back[i][j];
		i-=1;
		if(i==0)break;
	}
	std::reverse(res,res+c);
	for(int i=0;i<c;i++){
		if(i)cout<<"+";
		cout<<res[i];
	}
	cout<<endl;
	return 0;
}
