#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
using namespace std;
#define re(i,n) for(int i=0;i<n;i++)
#define re1(i,n) for(int i=1;i<=n;i++)
#define re2(i,n) for(int i=0;i<=n;i++)
#define re3(i,n) for(int i=1;i<n;i++)
#define clr(a,n) memset(a,n,sizeof(a))
#define debug(n) cout<<#n<<"="<<n<<endl
struct node {
	int v,cut;
} dp[501][501];
int flag[501][501];
char ch[501];
int k;
void dfs(int p,int x){
	if(!dp[p][x].cut) {re2(i,p)printf("%c",i>p/2?ch[p-i]:ch[i]); return ;}
	dfs(dp[p][x].cut-1,x-1); printf("+"); //cout<<dp[p][k].cut<<" "<<p;
	for(int i=dp[p][x].cut;i<=p;i++){
//	cout<<i<<" "<<p-i+dp[p][k].cut;
	if(i<=(p+dp[p][x].cut)/2)printf("%c",ch[i]); else printf("%c",ch[p-i+dp[p][x].cut]);
	}
}
int main(){
	while(cin>>ch>>k){
		k--;
		int n= strlen(ch);
		clr(flag,0);
		re(i,n) re(j,n) if(i<=j){
			for(int k = i;k<=(i+j)/2;k++)
				if(ch[k]!=ch[j-k+i]) flag[i][j]++;
		}
		re(i,n) dp[i][0].v = flag[0][i] , dp[i][0].cut = 0;
		re(i,n) re1(j,k) {
			dp[i][j] = dp[i][j-1];
			re(x,i)
			if(dp[i][j].v>dp[x][j-1].v+flag[x+1][i]){
				dp[i][j].v = dp[x][j-1].v+flag[x+1][i];
				dp[i][j].cut = x+1;
			}
		}
		cout<<dp[n-1][k].v<<endl;
		dfs(n-1,k); puts("");
	}
}

