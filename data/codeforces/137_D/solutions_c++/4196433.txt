#include <algorithm>
#include <iostream>
#include <memory.h>
#include <string>
#include <vector>
#include <cstdio>
#include <map>
using namespace std;

#define P pair <int, int>
#define x first
#define y second
#define MAX 505
#define ll long long
#define INF 1000000001
int K, n;
int mem[MAX][MAX];
int bes[MAX][MAX];
int pre[MAX][MAX];
int calc(int p, int k){
	if (p == n){
		if (k <= K) return 0;
		else return INF;
	}
	if (mem[p][k] != -1) return mem[p][k];
	
	int mn = INF, idx = -1;
	for (int i = p;i < n;++i){
		int tmp = calc(i + 1, k + 1) + pre[p][i];
		if (tmp < mn){
			mn = tmp;
			idx = i;
		}
	}
	bes[p][k] = idx;
	return mem[p][k] = mn;
}

string pal(string s){
	for (int k = 0;k < s.size() / 2;++k)
		s[k] = s[s.size() - k - 1];
	return s;
}

int main(){
	string s;
	cin >> s >> K;
	n = s.size();
	for (int i = 0;i < n;++i){
		for (int j = i;j < n;++j){
			int ans = 0, len = j - i + 1;
			for (int k = 0;k < len / 2;++k)
				if (s[i + k] != s[j - k])
					++ans;
			pre[i][j] = ans;
		}
	}
	memset(mem, -1, sizeof mem);
	cout << calc(0, 0) << endl;
	int p = 0, k = 0;
	while (p != n){
		cout << pal(s.substr(p, bes[p][k] - p + 1));
		p = bes[p][k] + 1;
		k++;
		if (p != n) cout << '+';
	}
	return 0;
}
 			 		  				 			 	  	