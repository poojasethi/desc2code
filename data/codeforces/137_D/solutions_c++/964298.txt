#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstring>
using namespace std;
string str;
int diff[505][505];
int dp[505][505];
int state[505][505];
int solve(int idx, int rem){
	int &ret = dp[idx][rem];
	if(ret != -1){
		return ret;
	}
	ret = 0x3f3f3f3f;
	if(rem == 0 && idx < str.size()){
		return ret;
	}
	if(idx == str.size()){
		return ret = 0;
	}
	for(int i = idx; i < str.size(); i++){
		int val = diff[idx][i] + solve(i+1, rem-1);
		if(val < ret){
			ret = val;
			state[idx][rem] = i - idx + 1;
		}
	}
	return ret;
}
int main(){
	int K;
	cin >> str >> K;
	for(int i = 0; i < (int)str.size(); i++){
		for(int j = i; j < (int)str.size(); j++){
			for(int k = i, l = j; k < l; k++, l--){
				diff[i][j] += str[k] != str[l];
			}
		}
	}
	memset(dp,-1,sizeof dp);
	memset(state,-1,sizeof state);
	cout << solve(0, K) << endl;
	int idx = 0, rem = K;
	while(idx < (int) str.size()){
		
		int t = state[idx][rem];
		for(int k = idx, l = idx+t-1; k < l; k++, l--){
			str[l] = str[k];
		}
		for(int i = idx; i < idx+t; i++){
			cout << str[i];
		}
		idx += t;
		rem--;
		if(idx < (int)str.size())cout << "+";
	}
	cout << endl;
	//TODO
	return 0;
}
