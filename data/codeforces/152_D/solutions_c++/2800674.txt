#include <vector>
#include <cstdio>
#include <set>
#include <map>
#include <algorithm>
#include <cstdlib>
#include <sstream>
#include <numeric>
#include <queue>
#include <iostream>
#include <string>
#include <cstring>
#include <utility>
#define sz(a) ((int)(a).size())
#define pb push_back
#define mk make_pair
#define fi first
#define se second
#define Rep(i,j,k) for (int i=(j); i<=(k); i++)
#define Repd(i,j,k) for (int i=(j); i>=(k); i--)
#define ALL(c) (c).begin(),(c).end()
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define SUM(a) accumulate(all(a),string())
#define online1
#define RAND ((rand()<<15)+rand())
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> II;
typedef long long LL;

const int N=1000+10;

char s[N][N];
int n, m;
bool f[N][N];

bool color(II a, II b){
	if (b.fi-a.fi<2 ||
		b.se-a.se<2)
			return 0;
	Rep(x,a.fi,b.fi)
		Rep(y,a.se,b.se)
			if (x==a.fi || x==b.fi || y==a.se || y==b.se)
				f[x][y]|=1;
	return 1;
}	

void doit(II a0, II b0, II a1, II b1){
	memset(f,0,sizeof f);
	if (!color(a0,a1))
		return;
	if (!color(b0,b1))
		return;
	
	Rep(i,1,n)
		Rep(j,1,m)
			if (f[i][j] && s[i][j]=='#' ||
			   !f[i][j] && s[i][j]=='.')
			;else
				return;

	puts("YES");
	cout<<a0.fi<<" "<<a0.se<<" "<<a1.fi<<" "<<a1.se<<endl;
	cout<<b0.fi<<" "<<b0.se<<" "<<b1.fi<<" "<<b1.se<<endl;
	exit(0);
}

int main(){
	
	cin>>n>>m;
	Rep(i,1,n)
		scanf("%s",s[i]+1);
		
	vector<II> a,b;
	
	Rep(i,1,n-2) if (sz(a)<5){
	int cnt=0;
	Rep(j,1,m-2) if (sz(a)<5 && cnt<3)
		if (s[i][j]=='#'&&s[i+1][j]=='#'&&s[i+2][j]=='#'
						&&s[i][j+1]=='#'&&s[i][j+2]=='#')
			a.pb(mk(i,j)), cnt++;
	}
			
	Repd(i,n,3) if (sz(b)<5){
	int cnt=0;
	Repd(j,m,3) if (sz(b)<5 && cnt<3)
		if (s[i][j]=='#'&&s[i-1][j]=='#'&&s[i-2][j]=='#'
						&&s[i][j-1]=='#'&&s[i][j-2]=='#')
			b.pb(mk(i,j)), cnt++;
	}
			
	/*
	TR(a,x) cout<<x->fi<<" "<<x->se<<endl;
	cout<<endl;
	TR(b,x) cout<<x->fi<<" "<<x->se<<endl;
	cout<<endl;	
	*/
			
	TR(a,x)
		TR(b,y)	
			doit(a[0],*x,b[0],*y),
			doit(a[0],*x,*y,b[0]);
			
	puts("NO");

    return 0;
}
