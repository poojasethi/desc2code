#include <algorithm>
#include <cstdio>
#include <set>

using namespace std;

int m, n, r[1010], c[1010], maxc[1010], maxr[1010], R, C, d[1010][1010], step, total;
char map[1010][1010];

int fill(int lx, int rx, int ly, int ry){
	int cnt = 0;
	for (int x = lx + 1; x < rx; x++){
		if (map[x][ly] == '.' || map[x][ry] == '.') return -1;
		cnt += (d[x][ly] != step) + (d[x][ry] != step);
		d[x][ly] = d[x][ry] = step;
	}
	for (int y = ly; y <= ry; y++){
		if (map[lx][y] == '.' || map[rx][y] == '.') return -1;
		cnt += (d[lx][y] != step) + (d[rx][y] != step);
		d[lx][y] = d[rx][y] = step;
	}
	return cnt;
}

bool verify(int x1, int x2, int y1, int y2, int x3, int x4, int y3, int y4){
	if (x2 - x1 < 2 || y2 - y1 < 2 || x4 - x3 < 2 || y4 - y3 < 2) return false;
	step++;
	if (fill(x1, x2, y1, y2) + fill(x3, x4, y3, y4) == total){
		printf("YES\n%d %d %d %d\n%d %d %d %d", x1 + 1, y1 + 1, x2 + 1, y2 + 1, x3 + 1, y3 + 1, x4 + 1, y4 + 1);
		return true;
	}
	return false;
}

void check(int m, int l[], int maxl[], int &R){
	for (int i = 0; i < m; i++) if (maxl[i] >= 3) l[R++] = i;
	if (R > 4){
		for (int i = 2; i; i--) l[4 - i] = l[R - i];
		R = 4;
	}
}

int main(){
	scanf("%d%d", &m, &n);
	for (int i = 0; i < m; i++){
		scanf("%s", map[i]);
		for (int j = 0; j < n; j++) total += (map[i][j]=='#');
	}

	for (int i = 0; i < m; i++)
		for (int j = 0, cnt = 0; j < n; j++) 
			if (map[i][j] == '#') maxr[i] = max(maxr[i], ++cnt); else cnt = 0;		
	check(m, r, maxr, R);

	for (int j = 0; j < n; j++)
		for (int i = 0, cnt = 0; i < m; i++)
			if (map[i][j] == '#') maxc[j] = max(maxc[j], ++cnt); else cnt = 0;	
	check(n, c, maxc, C);
	
	for (int x1 = 0, x2 = 1; x2 < R; x2++)
		for (int y1 = 0; y1 < C; y1++)
			for (int y2 = y1 + 1; y2 < C; y2++)
				for (int x3 = 0; x3 < R; x3++)
					for (int x4 = x3 + 1; x4 < R; x4++)
						for (int y3 = 0; y3 < C; y3++)
							for (int y4 = y3 + 1; y4 < C; y4++)
								if (verify(r[x1], r[x2], c[y1], c[y2], r[x3], r[x4], c[y3], c[y4])) return 0;
	printf("NO");
}

