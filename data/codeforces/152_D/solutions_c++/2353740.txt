#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <set>
#include <map>
#include <vector>
#include <utility>
#include <queue>
#include <functional>
#include <ctime>
#include <bitset>
#include <string>

#define mkp make_pair
#define pb push_back
#define Cpy(x, y) (memcpy(x, y, sizeof(x)))
#define Fill(x, y) (memset(x, y, sizeof(x)))
#define fi first
#define se second
#define bg begin
#define en end
#define it iterator
#define sz size
#define SQR(x) ((x) * (x))
#define LB lower_bound
#define UB upper_bound

using namespace std;

typedef long long LL;
typedef pair <int, int> PI;
typedef pair <int, PI> PII;

const int MAXN = 1005, INF = (int) 1e9;

char s[MAXN][MAXN];
int r[MAXN], c[MAXN], mr[MAXN], mc[MAXN], v[MAXN][MAXN];
int i, j, k, N, M, R, C, x0 = 0, x1, y0, y1, x2, y2, x3, y3, tot, cnt, id;

void Revise(int a[], int ma[], int len, int &n)
 {
	for (i = 1, n = 0; i <= len; i ++) if (ma[i] >= 3) a[n ++] = i;
	if (n >= 8) { for (i = 4; i; i --) a[8 - i] = a[n - i]; n = 8; }
 }
 
void init()
 {
	scanf("%d%d", &N, &M);
	for (i = 1; i <= N; i ++) scanf("%s", s[i] + 1);
	for (i = 1; i <= N; i ++)
		for (j = 1, cnt = 0; j <= M; j ++)
			if (s[i][j] == '#')
			 {
				++ tot, ++ cnt;
				mr[i] = max(mr[i], cnt);
			 } else cnt = 0;
	for (j = 1; j <= M; j ++)
		for (i = 1, cnt = 0; i <= N; i ++)
			if (s[i][j] == '#')
			 {
				++ cnt;
				mc[j] = max(mc[j], cnt);
			 } else cnt = 0;
	Revise(r, mr, N, R), Revise(c, mc, M, C);
 }

inline int Cover(int x0, int x1, int y0, int y1)
 {
	for (i = x0, k = 0; i <= x1; i ++)
	 {
		if (s[i][y0] == '.' || s[i][y1] == '.') return INF;
		if (v[i][y0] < id) ++ k, v[i][y0] = id;
		if (v[i][y1] < id) ++ k, v[i][y1] = id;
	 }
	for (i = y0 + 1; i < y1; i ++)
	 {
		if (s[x0][i] == '.' || s[x1][i] == '.') return INF;
		if (v[x0][i] < id) ++ k, v[x0][i] = id;
		if (v[x1][i] < id) ++ k, v[x1][i] = id;
	 }
	return k;
 }
 
inline void Check(int x0, int x1, int y0, int y1, int x2, int x3, int y2, int y3)
 {
	// Check length
	if (x1 - x0 < 2 || y1 - y0 < 2 || x3 - x2 < 2 || y3 - y2 < 2) return; ++ id;
	if (Cover(x0, x1, y0, y1) + Cover(x2, x3, y2, y3) == tot)
	 {
		printf("YES\n%d %d %d %d\n%d %d %d %d\n", x0, y0, x1, y1, x2, y2, x3, y3);
		exit(0);
	 }
 }
 
void work()
 {
	for (x1 = 1; x1 < R; x1 ++)
	for (y0 = 0; y0 < C; y0 ++)
	for (y1 = y0 + 1; y1 < C; y1 ++)
	for (x2 = 0; x2 < R; x2 ++)
	for (x3 = x2 + 1; x3 < R; x3 ++)
	for (y2 = 0; y2 < C; y2 ++)
	for (y3 = y2 + 1; y3 < C; y3 ++)
		Check(r[x0], r[x1], c[y0], c[y1], r[x2], r[x3], c[y2], c[y3]);
	puts("NO");
 }
 
int main()
 {
	init();
	work();
	return 0;
 }
