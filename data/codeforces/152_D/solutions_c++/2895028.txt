#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
using namespace std;
#define rep(x, n) for (int x = 1; x <= n; ++x)
#define zrp(x, n) for (int x = n; x; --x)
#define FOR(x, l, r) for (int x = l; x <= r; ++x)
#define foredge(i, x) for (int i = start[x]; i; i = e[i].l)
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define abs(a) ((a) > 0 ? (a) : (-(a)))
typedef long long int64;
typedef vector<int> VI;
const int maxN = 1005;
int n, m, w, cnt, tot; char s[maxN][maxN];
int bo[maxN][maxN];
VI xx, yy;

void init()
{
    scanf("%d%d", &n, &m);
    rep(i, n)
    {
        scanf("%s", s[i] + 1);
        rep(j, m) if (s[i][j] == '#')
            ++tot;
    }
    rep(i, n)
    {
        bool flag = 0;
        rep(j, m - 2) if (s[i][j] == '#' && s[i][j + 1] == '#' && s[i][j + 2] == '#')
            flag = 1;
        if (flag) xx.push_back(i);
    }
    rep(i, m)
    {
        bool flag = 0;
        rep(j, n - 2) if (s[j][i] == '#' && s[j + 1][i] == '#' && s[j + 2][i] == '#')
            flag = 1;
        if (flag) yy.push_back(i);
    }
}

bool check(int x1, int x2, int y1, int y2)
{
    FOR(i, x1, x2)
    {
        if (bo[i][y1] != w)
        {
            if (s[i][y1] != '#') return 0;
            bo[i][y1] = w; ++cnt;
        }
        if (bo[i][y2] != w)
        {
            if (s[i][y2] != '#') return 0;
            bo[i][y2] = w; ++cnt;
        }
    }
    FOR(i, y1, y2)
    {
        if (bo[x1][i] != w)
        {
            if (s[x1][i] != '#') return 0;
            bo[x1][i] = w; ++cnt;
        }
        if (bo[x2][i] != w)
        {
            if (s[x2][i] != '#') return 0;
            bo[x2][i] = w; ++cnt;
        }
    }
    return 1;
}

void work()
{
    int nn, mm;
    if (xx.size() > 4) xx.erase(++++xx.begin(), ----xx.end());
    if (yy.size() > 4) yy.erase(++++yy.begin(), ----yy.end());
    nn = xx.size() - 1; mm = yy.size() - 1;
    FOR(ax1, 0, nn) FOR(ax2, ax1, nn) if (xx[ax2] - xx[ax1] >= 2)
    FOR(ay1, 0, mm) FOR(ay2, ay1, mm) if (yy[ay2] - yy[ay1] >= 2)
    FOR(bx1, 0, nn) FOR(bx2, bx1, nn) if (xx[bx2] - xx[bx1] >= 2)
    FOR(by1, 0, mm) FOR(by2, by1, mm) if (yy[by2] - yy[by1] >= 2)
    {
        cnt = 0; ++w;
        if (check(xx[ax1], xx[ax2], yy[ay1], yy[ay2]) && check(xx[bx1], xx[bx2], yy[by1], yy[by2]) && cnt == tot)
        {
            puts("YES");
            printf("%d %d %d %d\n", xx[ax1], yy[ay1], xx[ax2], yy[ay2]);
            printf("%d %d %d %d\n", xx[bx1], yy[by1], xx[bx2], yy[by2]);
            return;
        }
    }
    puts("NO");
}

int main()
{
    init();
    work();
    return 0;
}
