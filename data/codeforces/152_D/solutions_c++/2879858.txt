#include <cstdio>
#include <algorithm>
using namespace std;
int n,m,r[1010],c[1010],mc[1010],mr[1010],R,C,d[1010][1010],col,tot;
char a[1011][1011];
bool ok;

int fill(int xs,int xt,int ys,int yt)
{
    int cnt=0;
    for (int i=xs+1; i<xt; i++)
    {
        if (a[i][ys]=='.' || a[i][yt]=='.') return 2222222;
        cnt+=(d[i][ys]!=col)+(d[i][yt]!=col);
        d[i][ys]=d[i][yt]=col;
    }
    for (int j=ys; j<=yt; j++)
    {
        if (a[xs][j]=='.' || a[xt][j]=='.') return 2222222;
        cnt+=(d[xs][j]!=col)+(d[xt][j]!=col);
        d[xs][j]=d[xt][j]=col;
    }
    return cnt;
}

void solve(int x1,int x2,int y1,int y2,int x3,int x4,int y3,int y4)
{
    if (x2-x1<2 || y2-y1<2 || x4-x3<2 || y4-y3<2) return;
    col++;
    if (fill(x1,x2,y1,y2)+fill(x3,x4,y3,y4)==tot)
    {
        printf("YES\n");
        printf("%d %d %d %d\n",x1+1,y1+1,x2+1,y2+1);
        printf("%d %d %d %d\n",x3+1,y3+1,x4+1,y4+1);
        ok=true;
    }
}

void check(int n,int r[],int mr[],int &R)
{
    for (int i=0;i<n;i++)
        if (mr[i]>=3) 
            r[R++]=i;
    if (R>8) 
    {
        for (int i=4; i; i--)
            r[8-i]=r[R-i];
        R=8;
    }
}

int main()
{
    scanf("%d%d",&n,&m);
    for (int i=0; i<n; i++)
    {
        scanf("%s",a[i]);
        for (int j=0; j<m; j++) tot+=(a[i][j]=='#');
    }
    
    for (int i=0; i<n; i++)
        for (int j=0,cnt=0; j<m; j++)
            if (a[i][j]=='#')
                mr[i]=max(mr[i],++cnt);
            else
                cnt=0;      
    check(n,r,mr,R);
    
    for (int j=0; j<m; j++)
        for (int i=0,cnt=0; i<n; i++)
            if (a[i][j]=='#')
                mc[j]=max(mc[j],++cnt);
            else
                cnt=0;
    check(m,c,mc,C);
    
    for (int x1=0,x2=1; x2<R; x2++)
        for (int y1=0; y1<C; y1++)
            for (int y2=y1+1; y2<C; y2++)
                for (int x3=0; x3<R; x3++)
                    for (int x4=x3+1; x4<R; x4++)
                        for (int y3=0; y3<C; y3++)
                            for (int y4=y3+1; y4<C; y4++)
                            {
                                solve(r[x1],r[x2],c[y1],c[y2],r[x3],r[x4],c[y3],c[y4]);
                                if (ok) return 0;
                            }
    printf("NO\n");
}