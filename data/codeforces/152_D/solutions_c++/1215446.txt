#include<iostream>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<string>
#define mp make_pair
#define x_ first
#define y_ second
using namespace std;
int n,m,r_,c_,tot,now;
string S[1000];
bool map[1000][1000];
int R[1001],C[1001];


bool can(int x1,int x2,int y1,int y2)
{
	for(int x=x1;x<=x2;++x)if(!map[x][y1]||!map[x][y2])return 0;
	for(int y=y1;y<=y2;++y)if(!map[x1][y]||!map[x2][y])return 0;
	return 1;
}

void fill(int x1,int x2,int y1,int y2)
{
	for(int x=x1;x<=x2;++x)now+=map[x][y1]+map[x][y2],map[x][y1]=map[x][y2]=0;
	for(int y=y1;y<=y2;++y)now+=map[x1][y]+map[x2][y],map[x1][y]=map[x2][y]=0;
}

void ret(int x1,int x2,int y1,int y2)
{
	for(int x=x1;x<=x2;++x)map[x][y1]=map[x][y2]=1;
	for(int y=y1;y<=y2;++y)map[x1][y]=map[x2][y]=1;
	
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("cf.in","rb",stdin);
		freopen("cf.out","wb",stdout);
	#endif
	cin>>n>>m;
	for(int i=0;i<n;++i)cin>>S[i];
	for(int i=0;i<n;++i)
		for(int j=0;j<m;++j)tot+=(map[i][j]=(S[i][j]=='#'));
	for(int i=0;i<n;++i)
		for(int j=2;j<m;++j)
			if(map[i][j]&&map[i][j-1]&&map[i][j-2])
			{
				R[r_++]=i;
				break;
			}
	for(int i=0;i<m;++i)
		for(int j=2;j<n;++j)
			if(map[j][i]&&map[j-1][i]&&map[j-2][i])
			{
				C[c_++]=i;
				break;
			}
	if(r_>4)R[2]=R[r_-2],R[3]=R[r_-1],r_=4;
	if(c_>4)C[2]=C[c_-2],C[3]=C[c_-1],c_=4;
	for(int a=0;a<r_-1;++a)
		for(int b=a+1;b<r_;++b)
			if(R[a]<R[b]-1)
				for(int c=0;c<c_-1;++c)
					for(int d=c+1;d<c_;++d)
						if(C[c]<C[d]-1)
							if(can(R[a],R[b],C[c],C[d]))
								for(int u=0;u<r_-1;++u)
									for(int v=u+1;v<r_;++v)
										if(R[u]<R[v]-1)
											for(int w=0;w<c_-1;++w)
												for(int x=w+1;x<c_;++x)
													if(C[w]<C[x]-1)
														if(can(R[u],R[v],C[w],C[x]))
														{
															now=0;
															fill(R[u],R[v],C[w],C[x]);
															fill(R[a],R[b],C[c],C[d]);
															if(now==tot)
															{
																cout<<"YES"<<endl;
																cout<<R[u]+1<<' '<<C[w]+1<<' '<<R[v]+1<<' '<<C[x]+1<<endl;
																cout<<1+R[a]<<' '<<1+C[c]<<' '<<R[b]+1<<' '<<C[d]+1<<endl;
																return 0;
															}
															ret(R[u],R[v],C[w],C[x]);
															ret(R[a],R[b],C[c],C[d]);
														}								
	cout<<"NO"<<endl;
	return 0;
}
