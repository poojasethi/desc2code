#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <algorithm>
#define mp make_pair
#define x first
#define y second
using namespace std;
typedef pair<int, int> point;
point stack1[100001], stack2[100001];
int n, m, top1 = 0, top2 = 0, flag = 0;
char str[1001][1001];
int a[1001][1001], f[1001][1001];
void make_color(point p, point q)
{
	for (int i = p.x; i <= q.x; i ++)
		for (int j = p.y; j <= q.y; j ++)
			if (i == p.x || i == q.x || j == p.y || j == q.y)
				f[i][j] = 1;
}
bool check(point p1, point q1, point p2, point q2)
{
	memset(f, 0, sizeof(f));
	if (p2.x - p1.x + 1 < 3 || p2.y - p1.y + 1 < 3) return false;
	if (q2.x - q1.x + 1 < 3 || q2.y - q1.y + 1 < 3) return false;
	make_color(p1, p2), make_color(q1, q2);
	for (int i = 1; i <= n; i ++)
		for (int j = 1; j <= m; j ++)
			if (a[i][j] ^ f[i][j]) return false;
	return true;
}
int main( )
{
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i ++)
	{
		scanf("%s", str[i]);
		for (int j = 0; j < m; j ++)
			a[i + 1][j + 1] = str[i][j] == '#' ? 1 : 0;
	}
	for (int i = 1; i <= n - 2 && top1 <= 5; i ++)
	{
		int tmp = 0;
		for (int j = 1; tmp <= 3 && top1 <= 5 && j <= m - 2; j ++)
			if (a[i][j] && a[i + 1][j] && a[i][j + 1] && a[i + 2][j] && a[i][j + 2])
				stack1[++ top1] = mp(i, j), ++ tmp;
	}
	for (int i = n; i >= 3 && top2 <= 5; i --)
	{
		int tmp = 0;
		for (int j = m; j >= 3 && top2 <= 5 && tmp <= 3; j --)
			if (a[i][j] && a[i - 1][j] && a[i][j - 1] && a[i][j - 2] && a[i - 2][j])
				stack2[++ top2] = mp(i, j), ++ tmp;
	}
	for (int i = 1; i <= top1; i ++)
	{
		for (int j = 1; j <= top2; j ++)
		{
			if (check(stack1[1], stack1[i], stack2[1], stack2[j]))
			{
				printf("YES\n");
				printf("%d %d %d %d\n", stack1[1].x, stack1[1].y, stack2[1].x, stack2[1].y);
				printf("%d %d %d %d\n", stack1[i].x, stack1[i].y, stack2[j].x, stack2[j].y);
				flag = 1; break;
			}
			if (check(stack1[1], stack1[i], stack2[j], stack2[1]))
			{
				printf("YES\n");
				printf("%d %d %d %d\n", stack1[1].x, stack1[1].y, stack2[j].x, stack2[j].y);
				printf("%d %d %d %d\n", stack1[i].x, stack1[i].y, stack2[1].x, stack2[1].y);
				flag = 1; break;
			}
		}
		if (flag) break;
	}
	if (!flag) printf("NO\n");
	return 0;
}
			
	

		 	 	    							 	 	  	