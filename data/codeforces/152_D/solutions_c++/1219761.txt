#include <iostream>
#include <stdio.h>
#include <vector>
#define PB push_back

using namespace std;

int count;
char a[1000][1000];

inline bool cover(int r1, int r2, int c1, int c2)
{
    for (int i = r1; i <= r2; i++) {
        if (a[i][c1] == '.' || a[i][c2] == '.') return false;
        if (a[i][c1] == '#') a[i][c1] = '%', count++;
        if (a[i][c2] == '#') a[i][c2] = '%', count++;
    }
    for (int j = c1; j <= c2; j++) {
        if (a[r1][j] == '.' || a[r2][j] == '.') return false;
        if (a[r1][j] == '#') a[r1][j] = '%', count++;
        if (a[r2][j] == '#') a[r2][j] = '%', count++;
    }
    return true;
}

inline void reset(int r1, int r2, int c1, int c2)
{
    for (int i = r1; i <= r2; i++) {
        if (a[i][c1] == '%') a[i][c1] = '#';
        if (a[i][c2] == '%') a[i][c2] = '#';
        if (a[i][c1] == '.' || a[i][c2] == '.') break;
    }
    for (int j = c1; j <= c2; j++) {
        if (a[r1][j] == '%') a[r1][j] = '#';
        if (a[r2][j] == '%') a[r2][j] = '#';
        if (a[r1][j] == '.' || a[r2][j] == '.') break;
    }
}

int main()
{
    int n, m, total = 0;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++) {
        scanf("%s", a[i]);
        for (int j = 0; j < m; j++)
            if (a[i][j] == '#') total++;
    }
    vector<int> R, C;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m - 2; j++)
            if (a[i][j] == '#' && a[i][j + 1] == '#' && a[i][j + 2] == '#') {
                if (R.size() < 4) R.PB(i);
                else R[2] = R[3], R[3] = i;
                break;
            }
    for (int j = 0; j < m; j++)
        for (int i = 0; i < n - 2; i++)
            if (a[i][j] == '#' && a[i + 1][j] == '#' && a[i + 2][j] == '#') {
                if (C.size() < 4) C.PB(j);
                else C[2] = C[3], C[3] = j;
                break;
            }
    vector<int> R1, R2, C1, C2;
    for (int r1 = 0; r1 < int(R.size()) - 1; r1++)
        for (int r2 = r1 + 1; r2 < R.size(); r2++)
            if (R[r2] - R[r1] > 1)
                for (int c1 = 0; c1 < int(C.size()) - 1; c1++)
                    for (int c2 = c1 + 1; c2 < C.size(); c2++)
                        if (C[c2] - C[c1] > 1)
                            R1.PB(R[r1]), R2.PB(R[r2]), C1.PB(C[c1]), C2.PB(C[c2]);
    for (int i = 0; i < R1.size(); i++)
        for (int j = i; j < R1.size(); j++) {
            count = 0;
            if (cover(R1[i], R2[i], C1[i], C2[i]) && cover(R1[j], R2[j], C1[j], C2[j]) && count == total) {
                printf("YES\n");
                printf("%d %d %d %d\n%d %d %d %d\n", R1[i] + 1, C1[i] + 1, R2[i] + 1, C2[i] + 1, R1[j] + 1, C1[j] + 1, R2[j] + 1, C2[j] + 1);
                return 0;
            }
            reset(R1[i], R2[i], C1[i], C2[i]), reset(R1[j], R2[j], C1[j], C2[j]);
        }
    printf("NO\n");
    return 0;
}
