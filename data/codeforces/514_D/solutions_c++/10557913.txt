#include <iostream>
using namespace std;
const int MAX = 100005;
int rmq[17][MAX][5], lg[MAX];
int get_max(int id, int l, int r)
{
	if (l == r)
		return 0;
	return max(rmq[lg[r - l]][l][id], rmq[lg[r - l]][r - (1 << lg[r - l])][id]);
}
int cost(int l, int r)
{
	int ans = 0;
	for (int i = 0; i < 5; i++)
		ans += get_max(i, l, r);
	return ans;
}
int main()
{
	ios::sync_with_stdio(false);
	for (int i = 2; i < MAX; i++)
		lg[i] = lg[i / 2] + 1;
	int n, m, k;
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> rmq[0][i][j];
	for (int b = 0; b < m; b++)
		for (int i = 1; i < 17; i++)
			for (int j = 0; j < n; j++)
				if (j + (1 << (i - 1)) >= n)
					rmq[i][j][b] = rmq[i - 1][j][b];
				else
					rmq[i][j][b] = max(rmq[i - 1][j][b], rmq[i - 1][j + (1 << (i - 1))][b]);
	int l = 0, r = 0, p = 0;
	for (int i = 0; i < n; i++)
	{
		while (p <= n && cost(i, p) <= k)
			p++;
		if (p - 1 - i > r - l)
		{
			l = i;
			r = p - 1;
		}
	}
	for (int i = 0; i < m; i++)
		cout << get_max(i, l, r) << " ";
	cout << endl;
	return 0;
}
