#include <cstdio>
#include <vector>
#include <algorithm>

#define N 100100

using namespace std;

typedef __int64 LL;
typedef pair <double, int> PDI;

int a[N];

int t[N], I[N], b[N];
int Max[N], pos[N];

vector <int> V[N];
vector <PDI> M;
int sto[N];

bool cmp(int x, int y) { return b[x] > b[y]; }
bool cmp1(int x, int y) { return t[x] < t[y]; }

main() {
//	freopen("D.in", "r", stdin);
	int k, n, m;
	scanf("%d %d %d", &k, &n, &m);
	for (int i = 1; i <= k; i ++) scanf("%d", a + i);
    for (int i = 1; i <= n; i ++) {
    	scanf("%d %d %d", t + i, I + i, b + i);
    	int idx = I[i];
    	if (t[i] == 1) {
			b[i] -= a[idx];
			if (b[i] > Max[idx]) Max[idx] = b[i], pos[idx] = i;
    	} else if (t[i] == 2) V[idx].push_back(i);
        else M.push_back(PDI(-1.0 * b[i], i));
    }
    for (int i = 1; i <= k; i ++) {
    	if (Max[i] > 0) V[i].push_back(pos[i]);
    	sort(V[i].begin(), V[i].end(), cmp);
    	LL cur = a[i];
    	for (int j = 0; j < V[i].size(); j ++) {
    		M.push_back(PDI(-1.0 * (cur + b[V[i][j]]) / cur, V[i][j]));
			cur += b[V[i][j]];
    	}
    }
    sort(M.begin(), M.end());
    int sz = M.size();
    if (sz < m) m = sz;
	for (int i = 0; i < m; i ++) sto[i] = M[i].second;
	sort(sto, sto + m, cmp1);
	printf("%d\n", m);
	for (int i = 0; i < m; i ++) printf("%d ", sto[i]);
}
