#include<algorithm>
#include<bitset>
#include<cctype>
#include<climits>
#include<cmath>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<string>
#include<vector>

using namespace std;

const int maxn=100001;

typedef long long LL;
typedef long double LD;
typedef int array[maxn];

struct Improvement
{
	LL a,b;
	int id,type;
	Improvement(LL a,LL b,int id,int type):a(a),b(b),id(id),type(type){}
	friend bool operator < (Improvement x,Improvement y)
	{
		return double(x.a)/x.b>double(y.a)/y.b;
	}
};
int k,n,m;
array a;
pair<int,int> maxa[maxn];
vector<pair<int,int> > add[maxn];
vector<Improvement> ans;

int main()
{
#ifdef LOCAL_TEST
	freopen("data.in","r",stdin);
// 	freopen("data.out","w",stdout);
#endif
	cin>>k>>n>>m;
	for(int i=1;i<=k;i++)
		scanf("%d",&a[i]);
	for(int i=1;i<=n;i++)
	{
		int t,x,b;
		scanf("%d%d%d",&t,&x,&b);
		if(t==1)
			maxa[x]=max(maxa[x],make_pair(b,i));
		else if(t==2)
			add[x].push_back(make_pair(b,i));
		else
			ans.push_back(Improvement(b,1,i,3));
	}
	for(int i=1;i<=k;i++)
	{
		if(maxa[i].first>a[i])
			add[i].push_back(make_pair(maxa[i].first-a[i],maxa[i].second));
		sort(add[i].begin(),add[i].end(),greater<pair<int,int> >());
		LL s=a[i];
		for(int j=0;j<int(add[i].size());j++)
		{
			ans.push_back(Improvement(s+add[i][j].first,s,add[i][j].second,add[i][j].second==maxa[i].second?1:2));
			s+=add[i][j].first;
		}
	}
	sort(ans.begin(),ans.end());
	printf("%d\n",min(int(ans.size()),m));
	for(int i=0;i<min(int(ans.size()),m);i++)
		if(ans[i].type==1)
		   printf("%d ",ans[i].id);
	for(int i=0;i<min(int(ans.size()),m);i++)
		if(ans[i].type==2)
		   printf("%d ",ans[i].id);
	for(int i=0;i<min(int(ans.size()),m);i++)
		if(ans[i].type==3)
		   printf("%d ",ans[i].id);
	printf("\n");
	return 0;
}
