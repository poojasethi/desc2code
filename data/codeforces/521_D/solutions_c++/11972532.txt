#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <vector>
using namespace std;

const int N = 100005;

struct Upgrade { int type, pos, delta; };
Upgrade g[N];
pair<double, int> cdt[N];
int tot;
vector<pair<int, int> > to[N];
int a[N];
pair<int, int> h[N];
int K, n, m;

void init()
{
    cin >> K >> n >> m;
    for(int i = 1; i <= K; i ++) scanf("%d", &a[i]), h[i].first = -10000;
    for(int i = 1; i <= n; i ++)
    {
        scanf("%d%d%d", &g[i].type, &g[i].pos, &g[i].delta);
        if(g[i].type == 1) h[g[i].pos] = max(h[g[i].pos], make_pair(g[i].delta - a[g[i].pos], i));
        if(g[i].type == 2) to[g[i].pos].push_back(make_pair(g[i].delta, i));
        if(g[i].type == 3) cdt[++tot] = make_pair((double)g[i].delta, i);
    }
    for(int i = 1; i <= K; i ++) if(h[i].first > 0) to[i].push_back(h[i]);
}
bool cmp_type(int x, int y) { return g[x].type < g[y].type; }
void work()
{
    for(int i = 1; i <= K; i ++)
    {
        sort(to[i].begin(), to[i].end(), greater<pair<int, int> >());
        long long tmp = a[i];
        for(int j = 0; j < to[i].size(); j ++)
        {
            cdt[++tot] = make_pair((double)(tmp + to[i][j].first) / tmp, to[i][j].second);
            tmp += to[i][j].first;
        }
    }
    sort(cdt + 1, cdt + tot + 1, greater<pair<double, int> >());
    static int ans[N];
    ans[0] = min(m, tot);
    for(int i = 1; i <= ans[0]; i ++) ans[i] = cdt[i].second;
    sort(ans + 1, ans + ans[0] + 1, cmp_type);
    cout << ans[0] << endl;
    for(int i = 1; i <= ans[0]; i ++) printf("%d ", ans[i]);
    cout << endl;
}

int main()
{
    //freopen("D.in", "r", stdin);
    //freopen("D.out", "w", stdout);
    init(), work();
    return 0;
}