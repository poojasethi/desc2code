#include <cstring>
#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

const int MAXN = 1e6 + 5;

struct Node {
	double Num; int Ord;
	Node(double num = 0, int ord = 0) {Num = num, Ord = ord;}
} Max[MAXN];

vector<Node> Add[MAXN], Mul;
int K, N, M, A[MAXN], type[MAXN];

bool Cmp(Node A, Node B) { return A.Num > B.Num;}

int main() {
	scanf("%d%d%d", &K, &N, &M);
	for (int i = 1; i <= K; i ++) scanf("%d", &A[i]);
	for (int i = 1; i <= N; i ++) {
		int Ord, a;
		double b;
		scanf("%d%d%lf", &Ord, &a, &b);
		if (Ord == 1 && b > Max[a].Num) Max[a] = Node(b, i);
		if (Ord == 2) Add[a].push_back(Node(b, i));
		if (Ord == 3) Mul.push_back(Node(b, i));	
		type[i] = Ord;
	}
	
	for (int i = 1; i <= K; i ++) {
		if (Max[i].Num > A[i]) Add[i].push_back(Node(Max[i].Num - A[i], Max[i].Ord));
		sort(Add[i].begin(), Add[i].end(), Cmp);
		double Sum = A[i];
		for (int j = 0; j < Add[i].size(); Sum += Add[i][j].Num, j ++)
			Mul.push_back(Node((Sum + Add[i][j].Num) / Sum, Add[i][j].Ord));
	}
	
	sort(Mul.begin(), Mul.end(), Cmp);
	int Ans = min(M, (int)Mul.size());
	printf("%d\n", Ans);
	for (int i = 0; i < Ans; i ++) if (type[Mul[i].Ord] == 1) printf("%d ", Mul[i].Ord);
	for (int i = 0; i < Ans; i ++) if (type[Mul[i].Ord] == 2) printf("%d ", Mul[i].Ord);
	for (int i = 0; i < Ans; i ++) if (type[Mul[i].Ord] == 3) printf("%d ", Mul[i].Ord);
}