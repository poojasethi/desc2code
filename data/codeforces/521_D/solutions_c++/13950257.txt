#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
typedef long double dou;
const int N=1E5+5;
struct map{
    int t,i,b,p;
    dou x;
}a[N];
int n,m,k,A[N];
long long sum;
bool o[N],O;
vector <int> G[4];

int cmp1(const map&a,const map&b)
{
    if (a.i!=b.i) return a.i<b.i; 
    return a.b>b.b;
}

int cmp2(const map&a,const map&b)
{
    return a.x>b.x;
}

int main()
{
    cin>>k>>n>>m;
    for (int i=1;i<=k;i++) scanf("%d",&A[i]);
    for (int i=1;i<=n;i++) 
    {
        scanf("%d%d%d",&a[i].t,&a[i].i,&a[i].b);
        if (a[i].t==1) a[i].b-=A[a[i].i];
        a[i].p=i;
    }
    sort(a+1,a+n+1,cmp1);
    for (int i=1;i<=n;i++)
    {
        if (a[i].i!=a[i-1].i) O=1,sum=A[a[i].i];
        if (a[i].t==3) a[i].x=a[i].b; else 
        {
            a[i].x=(dou)(sum+a[i].b)/sum;
            if (a[i].t==1)
            {
                if (O) sum+=a[i].b;
                O=0;
            } else sum+=a[i].b;
        }
    }
    sort(a+1,a+n+1,cmp2);
    for (int k=1;m&&k<=n;k++,m--) if (a[k].b>0)
    {
        if (a[k].t==1)
        {
            if (!o[a[k].i]) G[1].push_back(a[k].p); else m++;
            o[a[k].i]=1;
        } else G[a[k].t].push_back(a[k].p);
    }
    cout<<G[1].size()+G[2].size()+G[3].size()<<endl;
    for (int i=1;i<=3;i++)
        for (int j=0;j<G[i].size();j++) printf("%d ",G[i][j]);
}

