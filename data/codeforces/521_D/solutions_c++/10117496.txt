#include <cstdio>
#include <algorithm>
using namespace std;

#define n   200005
#define Pop pop_heap
#define Pus push_heap
#define I64 long long

I64     P[n];
int     N,M,K,D,T,B[n],C[n],E[n],st[n],Ans[n];
struct  Nod{I64 a,b,ID;}A[n],H[n];

bool    Cmp1(Nod a,Nod b)   {
        return  a.a<b.a||a.a==b.a&&a.b>b.b;
}
bool    Cmp2(Nod a,Nod b)   {
        return  1.*a.a*b.b<1.*b.a*a.b;
}
bool    Cmp3(int a,int b)   {return E[a]<E[b];}

int     main(){
        scanf("%d%d%d",&N,&M,&K);
        for (int i=1;i<=N;i++)  scanf("%d",&P[i]);
        for (int i=1,k,x,b;i<=M;i++){
            scanf("%d%d%d",&k,&x,&b);E[i]=k;
            if  (k==1&&b>B[x])  B[x]=b,C[x]=i;
            if  (k==2)  A[++D]=(Nod){x,b,i};
            if  (k==3)  H[++T]=(Nod){b,1,M+i},A[M+i].ID=i,Pus(H+1,H+T+1,Cmp2);
        }
        for (int i=1;i<=N;i++)
            if  (B[i]>P[i]) A[++D]=(Nod){i,B[i]-P[i],C[i]};
        sort(A+1,A+D+1,Cmp1);
        for (int i=1;i<=D;i++)
            if  (!st[A[i].a])   st[A[i].a]=i;
        for (int i=1;i<=N;i++)
        if  (st[i]) {
            H[++T]=(Nod){P[i]+A[st[i]].b,P[i],st[i]};   Pus(H+1,H+T+1,Cmp2);
        }
        for (;K--&&T;){
            Nod u=H[1]; int i=u.ID,j=A[i].a;
            Ans[++*Ans]=A[i].ID;Pop(H+1,H+T+1,Cmp2);T--;
            if  (E[A[i].ID]==3) continue;   st[j]++;
            if  (st[j]>D||A[st[j]].a!=j)   continue;
            P[j]=u.a;   H[++T]=(Nod){P[j]+A[st[j]].b,P[j],st[j]};
            Pus(H+1,H+T+1,Cmp2);
        }
        sort(Ans+1,Ans+*Ans+1,Cmp3);printf("%d\n",*Ans);
        for (int i=1;i<=*Ans;i++)   printf("%d ",Ans[i]);
}