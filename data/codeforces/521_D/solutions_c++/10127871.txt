#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<vector>
#define N 300005
#define For(i,l,r) for(int i=l;i<=r;i++)
using namespace std;
vector <int> E[N];
int n,m,Q,cnt;
int w[N],val[N],ch[N],id[N];
bool cmp(const int &i,const int &j){return val[i]>val[j];}
struct rec{int id; long double val; int ch;}OP[N];
bool cmp1(const rec &i,const rec &j){return i.val>j.val;}
bool cmp2(const rec &i,const rec &j){return i.ch<j.ch;}
int main(){
    scanf("%d%d%d",&n,&m,&Q);
    For(i,1,n) scanf("%d",&w[i]);
    For(i,1,m){
        int skl; scanf("%d%d%d",&ch[i],&skl,&val[i]); ch[i]--;
        if(ch[i]==0){
            val[i]-=w[skl];
            if(val[i]>val[id[skl]]) id[skl]=i;
        }
        if(ch[i]==1) E[skl].push_back(i);
        if(ch[i]==2) OP[++cnt]=(rec){i,val[i],2};
    }
    For(i,1,n) if(id[i]) E[i].push_back(id[i]);
    For(i,1,n) sort(E[i].begin(),E[i].end(),cmp);
    For(i,1,n){
        long double vx=w[i],vy=w[i];
        For(k,0,(int)E[i].size()-1){int j=E[i][k];
            vx+=val[j];
            OP[++cnt]=(rec){j,vx/vy,ch[j]};
            vy+=val[j];
        }
    }
    Q=min(Q,cnt);
    
    sort(OP+1,OP+1+cnt,cmp1);
    sort(OP+1,OP+1+Q,cmp2);
    
    printf("%d\n",Q);
    For(i,1,Q) printf("%d ",OP[i].id); printf("\n");
}
