#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
#define N 100010
typedef long long LL;
int k,n,m,assign[N],wh[N],a[N];
double sum[N];
struct out{
	int num,id;double w;
	bool operator < (const out &t)const{
		return w>t.w;
	}
	out(){}
	out(int num,int id,double w):
		num(num),id(id),w(w){}
};
vector<out>add[N],ans,output;
bool cmp(const out &u,const out &v){
	return u.num<v.num;
}
int main(){
	scanf("%d%d%d",&n,&m,&k);
	for(int i=1;i<=n;i++)scanf("%d",&a[i]);
	for(int i=1;i<=m;i++){
		int opt,id,b;
		scanf("%d%d%d",&opt,&id,&b);
		if(opt==1&&b>assign[id])assign[id]=b,wh[id]=i;
		else if(opt==2)add[id].push_back(out(2,i,b));
		else if(opt==3)ans.push_back(out(3,i,b));
	}
	for(int i=1;i<=n;i++)
		if(assign[i]>a[i])
			add[i].push_back(out(1,wh[i],assign[i]-a[i]));
	for(int i=1;i<=n;i++){
		sort(add[i].begin(),add[i].end());
	 	for(int j=1;j<=add[i].size();j++)sum[j]=sum[j-1]+add[i][j-1].w;
	 	for(int j=0;j<add[i].size();j++){
	 		int num=add[i][j].num,id=add[i][j].id;double w=add[i][j].w;
	 		double ret=a[i]+sum[j];
			ans.push_back(out(num,id,(ret+w)/ret));
	 	}
	}
	sort(ans.begin(),ans.end());int x=ans.size();k=min(k,x);
	for(int i=0;i<k;i++)output.push_back(ans[i]);
	sort(output.begin(),output.end(),cmp);
	printf("%d\n",k);
	for(int i=0;i<k;i++)printf("%d ",output[i].id);
	printf("\n");
	return 0;
} 
