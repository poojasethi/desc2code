#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

const int MAXN = 100010;

typedef pair<long long, long long> pii;
typedef pair<pii, int> ppi;

struct cmp
{
	bool operator () (ppi a, ppi b)
	{
		long long x1 = a.first.first * b.first.second;
		long long x2 = a.first.second * b.first.first;
		if (x1 == x2)
			return a.second < b.second;
		else
			return x1 < x2;
	}
};

vector<pii> add[MAXN];
priority_queue<ppi, vector<ppi>, cmp> q;
int ptr[MAXN];
long long a[MAXN];
vector<pii> chosen;
pii c[MAXN];
int type[MAXN];

inline void update(int x)
{
	q.push(ppi(pii(add[x][ptr[x]].first, a[x]), x));
}

int main()
{
	int n, m, k;
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		c[i] = pii(a[i], -1);
	}
	for (int i = 0; i < m; i++)
	{
		int t, x, b;
		cin >> t >> x >> b;
		x--;
		if (t == 3)
			add[n].push_back(pii(b, i));
		else if (t == 1)
			c[x] = max(c[x], pii(b, i));
		else
			add[x].push_back(pii(b, i));
		type[i] = t;
	}
	for (int i = 0; i < n; i++)
	{
		if (c[i].first > a[i])
			add[i].push_back(pii(c[i].first - a[i], c[i].second));
		sort(add[i].begin(), add[i].end(), greater<pii>());
	}
	a[n] = 1;
	sort(add[n].begin(), add[n].end(), greater<pii>());
	for (int i = 0; i < add[n].size(); i++)
		add[n][i].first--;
	for (int i = 0; i <= n; i++)
		if (ptr[i] < add[i].size())
			update(i);
	for (int i = 0; i < k; i++)
	{
		if (q.empty())
			break;
		int x = q.top().second;
		q.pop();
		int qn = add[x][ptr[x]].second;
		chosen.push_back(pii(type[qn], qn));
		if (x < n)
			a[x] += add[x][ptr[x]].first;
		ptr[x]++;
		if (ptr[x] < add[x].size())
			update(x);
	}
	sort(chosen.begin(), chosen.end());
	cout << chosen.size() << endl;
	for (int i = 0; i < chosen.size(); i++)
		cout << chosen[i].second + 1 << " ";
		
}
