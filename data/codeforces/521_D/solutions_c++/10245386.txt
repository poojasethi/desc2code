#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

typedef long long ll;

const int N = 100010;

struct Add {
    int v, n;
    Add(int _v = 0, int _n = 0) {v = _v, n = _n;}
};

struct Bag {
    ll a, b; int n;
    Bag(ll _a = 0, ll _b = 0, int _n = 0) {a = _a, b = _b, n = _n;};
};

vector<Add> add[N];

Bag mul[N];
int a[N], sta[N], num[N], tp[N], ans[N];
int K, n, m, mn;


bool cmpadd(Add x, Add y) {
    return x.v > y.v;
}

bool cmpbag(Bag x, Bag y) {
    return ll(x.a - x.b) * y.b > ll(y.a - y.b) * x.b;
}

bool cmpans(int x, int y) {
    return tp[x] < tp[y];
}

int main() {
    
    scanf("%d%d%d", &K, &n, &m);
    for (int i = 1; i <= K; i++) scanf("%d", &a[i]);
    for (int i = 1; i <= n; i++) {
        int t, p, v;
        scanf("%d%d%d", &t, &p, &v);
        tp[i] = t;
        if (t == 1) {
            if (sta[p] < v) sta[p] = v, num[p] = i;
        } else if (t == 2) {
            add[p].push_back(Add(v, i));
        } else if (t == 3){
            mul[++mn] = Bag(v, 1, i);
        }
    }
    
    for (int i = 1; i <= K; i++) if (sta[i] > a[i]) add[i].push_back(Add(sta[i] - a[i], num[i]));
    
    for (int i = 1; i <= K; i++) {
        sort(add[i].begin(), add[i].end(), cmpadd);
        ll s = a[i];
        for (int j = 0; j < add[i].size(); j++) 
            mul[++mn] = Bag(s + add[i][j].v, s, add[i][j].n), s += add[i][j].v;
    }
    
    sort(mul + 1, mul + 1 + mn, cmpbag);
    
    m = min(m, mn);
    for (int i = 1; i <= m; i++) ans[i] = mul[i].n;
    sort(ans + 1, ans + 1 + m, cmpans);
    
    printf("%d\n", m);
    for (int i = 1; i <= m; i++) printf("%d ", ans[i]);
    
    return 0;
}
