import sys


class Charact(object):

    def __init__(self, key):
        self.key = key
        self.options = [[], [], []]

k, n, m = map(int, sys.stdin.readline().strip().split())
a = []
for val in map(int, sys.stdin.readline().split()):
    a.append(Charact(val))
for j in xrange(n):
    t, i, b = map(int, sys.stdin.readline().strip().split())
    if t == 1:
        if len(a[i - 1].options[t - 1]) == 0 or a[i - 1].options[t - 1][0] < b:
            a[i - 1].options[t - 1] = (b, j + 1, t - 1)
    else:
        a[i - 1].options[t - 1].append((b, j + 1, t - 1))
    

finalOptions = []
for charact in a:
    if charact.options[0] and charact.options[0][0] > charact.key:
        charact.options[1].append((charact.options[0][0] - charact.key, charact.options[0][1], 0))
    charact.options[1] = sorted(charact.options[1], reverse=True, key=lambda (k, v, m): k)
    currSum = float(charact.key)
    for option in charact.options[1]:
        finalOptions.append(((option[0] + currSum) / currSum, option[1], option[2]))
        currSum += option[0]
    for option in charact.options[2]:
        finalOptions.append(option)


finalOptions = sorted(finalOptions, reverse=True, key=lambda (k,v, m): k)


answer = sorted(finalOptions[:min(m, len(finalOptions))], key=lambda (k, v, m): m)
print min(m, len(finalOptions))
print " ".join(str(opt[1]) for opt in answer)
