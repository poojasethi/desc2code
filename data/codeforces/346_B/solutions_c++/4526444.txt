#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <string>
using namespace std;

const int MAXN = 110;

int mat[MAXN];
char s1[MAXN], s2[MAXN], vir[MAXN];

struct P {
	int val;
	string s;
}dp[2][MAXN][MAXN], p;

P gao(P a, P b) {
	if (a.val > b.val) return a;
	return b;
}

int main() {
	scanf("%s%s%s", s1, s2, vir);
	int n = strlen(s1), m = strlen(s2);
	mat[0] = -1;
	string v = vir;
	for (int i = 1; i < v.size(); i++) {
		for (int j = i; j >= 0; j--) {
			if (v.substr(0, j) == v.substr(i - j + 1, j)) {
				mat[i] = j - 1;
				break;
			}
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			for (int k = 0; k < v.size(); k++) {
				dp[(i+1)%2][j+1][k] = gao(dp[i%2][j+1][k], dp[(i+1)%2][j][k]);
			}
			for (int k = 0; k < v.size(); k++) {
				if (s1[i] == s2[j]) {
					char c = s1[i];
					int l = k - 1;
					while (l >= 0 && v[l+1] != c) {
						l = mat[l];
					}
					if (v[l+1] == c) l++;
					p = dp[i%2][j][k];
					p.val += 1;
					p.s += c;
					dp[(i+1)%2][j+1][l+1] = gao(dp[(i+1)%2][j+1][l+1], p);
					// printf("dp[%d][%d][%d] = %d %s\n", i+1, j+1, l+1, dp[(i+1)%2][j+1][l+1].val, dp[(i+1)%2][j+1][l+1].s.c_str());
				}
			}
		}
	}
	int u = 0;
	for (int i = 1; i < v.size(); i++) {
		if (dp[n%2][m][u].val < dp[n%2][m][i].val) u = i;
		// printf("dp = %d\n", dp[1][1][1].val);
	}
	// printf("u = %d\n", u);
	if (dp[n%2][m][u].val > 0) {
		printf("%s\n", dp[n%2][m][u].s.c_str());
	} else{
		puts("0");
	}
}
