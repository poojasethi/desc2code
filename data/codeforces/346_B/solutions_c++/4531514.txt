#include<cstdio>
#include<iostream>
#include<algorithm>
#include<set>
#include<map>
#include<vector>
#include<string>
using namespace std;
#define REP(i,n) for(int i=0;i<(int)n;++i)
vector<int> get_kmp(string s) {
  vector<int> res(s.size()+1,-1);
  int j=-1;
  int i=0;
  while(i<(int)s.size()) {
    if(j>=0 && s[i]!=s[j]) j=res[j];else res[++i]=++j;
  }

  return res;
}
void MV(string &a, string b) {
  if(a.size()<b.size()) a=b;
}
string best[2][101][101];
int main() {
string a,b,c;
cin>>a>>b>>c;
vector<int> kmp=get_kmp(c);

REP(ii,a.size()+1) {
  int i=ii & 1;
  REP(j,b.size())REP(k,c.size()) best[i^1][j][k]="";
  REP(j, b.size()+1) { //bug: forgot to go last row so value will propagate

    REP(k,c.size()) {
      MV(best[i^1][j][k], best[i][j][k]);
      if(j+1<=(int)b.size())MV(best[i][j+1][k], best[i][j][k]);
      if(a[ii]==b[j]&& j+1<=(int)b.size()) {
        int d=k;
        while(d>=0 && c[d] != a[ii]) d=kmp[d];

        d++;
//        cout<<best[i][j][k]<<" "<<a[ii]<<" "<<(i^1)<<" "<<(j+1)<<" "<<d<<endl;
        if(d<(int)c.size()) MV(best[i^1][j+1][d], best[i][j][k] + string(1,a[ii]));
      }

    }
  }
}
string rval;
REP(i,c.size()) MV(rval, best[(a.size()&1) ][b.size()][i]);
if(rval=="") rval="0";
cout<<rval<<endl;

}
// issue choosing small type
