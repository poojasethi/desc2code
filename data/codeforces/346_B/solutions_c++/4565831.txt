#include <cstdio>

int n, m, l;
char a[105], b[105], c[105];
int pi[105];
int dp[105][105][105];
int sol[105][105][105];
char ans[105];


inline void printSol(int i, int j, int k) {
  if(sol[i][j][k] == 0) {
    return;
  }
  if(sol[i][j][k] == 1) {
    printSol(i-1, j, k);
  } else if(sol[i][j][k] == 2) {
    printSol(i, j-1, k);
  } else {
    printSol(i-1, j-1, sol[i][j][k]-3);
    printf("%c", a[i-1]);
  }
}

inline void updateMax(int i, int j, int k, int y, int z) {
  if(dp[i][j][k] < y) {
    dp[i][j][k] = y;
    sol[i][j][k] = z;
  } 
}

int main() {
  scanf("%s", a); for(; a[n]; n++);
  scanf("%s", b); for(; b[m]; m++);
  scanf("%s", c); for(; c[l]; l++);
  for(int i = 1; i < l; i++) {
    int j = i;
    for(; j > 0 and c[i] != c[pi[j-1]]; j = pi[j-1]);
    pi[i] = j > 0? pi[j-1]+1: 0;
  }
  for(int i = 0; i <= n; i++) {
    for(int j = 0; j <= m; j++) {
      for(int k = 0; k < l; k++) {
	updateMax(i+1, j, k, dp[i][j][k], 1);
	updateMax(i, j+1, k, dp[i][j][k], 2);
	if(i < n and j < m and a[i] == b[j]) {
	  int z = k;
	  for(; z > 0 and a[i] != c[z]; z = pi[z-1]);
	  z += a[i] == c[z];
	  updateMax(i+1, j+1, z, dp[i][j][k]+1, 3+k);
	}
      }
    }
  }
  int mx = 0;
  for(int k = 0; k < l; k++) {
    mx = dp[n][m][k] > mx? dp[n][m][k]: mx;
  }
  if(mx == 0) {
    printf("0");
  } else {
    for(int k = 0; k < l; k++) {
      if(dp[n][m][k] == mx) {
	printSol(n, m, k);
	break;
      }
    }
  }
  printf("\n");
}
