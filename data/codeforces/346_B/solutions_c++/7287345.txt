#include <stdio.h>
#include <memory.h>
#include <algorithm>
using namespace std;
char A[101], B[101], v[101], f[101];
int dp[101][101][101];
int F(int i, char &c){
	while (i && v[i] != c)
		i = f[i - 1];
	return i + (v[i] == c);
}
int calc(int i, int j, int k){
	if (!v[k])
		return -101;
	if (!A[i] || !B[j])
		return 0;
	if (dp[i][j][k] == -1){
		dp[i][j][k] = max(calc(i + 1, j, k), calc(i, j + 1, k));
		if (A[i] == B[j])
			dp[i][j][k] = max(dp[i][j][k], 1 + calc(i + 1, j + 1, F(k, A[i])));
	}
	return dp[i][j][k];
}
void print(int i, int j, int k){
	if (!A[i] || !B[j])
		return;
	if (dp[i][j][k] == calc(i + 1, j, k))
		print(i + 1, j, k);
	else if (dp[i][j][k] == calc(i, j + 1, k))
		print(i, j + 1, k);
	else{
		printf("%c", A[i]);
		print(i + 1, j + 1, F(k, A[i]));
	}
}
int main()
{
	gets(A);
	gets(B);
	gets(v);
	int j = 0;
	for (int i = 1; v[i]; ++i){
		while (j && v[j] != v[i])
			j = f[j - 1];
		if (v[i] == v[j])
			++j;
		f[i] = j;
	}
	memset(dp, -1, sizeof(dp));
	j = calc(0, 0, 0);
	if (!j)
		puts("0");
	else
		print(0, 0, 0);
	return 0;
}