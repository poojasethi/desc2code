def cycle(start, end, bound):
    def move(cursor):
        return cursor + 1 if cursor < bound else 0
    
    curr = start
    while curr != end:
        curr = move(curr)
        yield curr

n, x = map(int, raw_input().strip().split())
x -= 1
a = map(int, raw_input().strip().split())

d = min(a) # cycles count
# start position in array
if x == n-1:
    di = x - list(reversed(a)).index(d)
else:
    di = x - list(reversed(a[x+1:] + a[:x+1])).index(d)

dn = d * n # count of droped in cycling
a = map(lambda p: p-d, a) # "before" put everything to buckets

for i in cycle(di, x, n-1):
    dn += 1
    a[i] -= 1

a[di] = dn
print " ".join(map(str, a))