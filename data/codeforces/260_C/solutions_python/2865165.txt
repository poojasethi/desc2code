import sys

def distance(x, y, n):
	if x <= y:
		return y - x
	else:
		return y + n - x;

def find_initial_arrangement(list, x):
	min_value = list[x]
	min_index = x

	for i in range(len(list)):
		if list[x-i] < min_value:
			min_index = (x-i + len(list)) % len(list)
			min_value = list[x-i];
	
	for i in range(len(list)):
		if i != min_index:
			list[i] -= list[min_index]
			
			if min_index < i <= x or ( (min_index < i or i <= x) and x < min_index) :
				list[i] -= 1;

	list[min_index] = list[min_index] * len(list) + distance(min_index, x, len(list))
				
	return list

def main():
	text = raw_input()
	[n, x] = [int(a) for a in text.split(' ')]
	
	list = [int(a) for a in raw_input().split(' ')]
	
	list = find_initial_arrangement(list, x - 1)
	
	print " ".join([str(a) for a in list])
	
if __name__ == "__main__":
	main()
