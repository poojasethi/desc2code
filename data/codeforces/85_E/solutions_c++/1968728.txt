#include<iostream>
#include<cstring>
#include<algorithm>
#include<cstdio>
using namespace std;
const int M=5*1000+3;
short mark[M];
bool f=true, c=true;
pair < int , int> P[M];
int D[M][M],n,m;
void dfs(int a)
{	

	for(int i=0; i<n; i++)
	if(i!=a)
		if(D[a][i]>m)
		{
			if(mark[i]==0)
			{
				mark[i]=3-mark[a];
				dfs(i);
			}
			else
				if(mark[i]!=3-mark[a])
				{
					f=false;	
					return;
				}
		}
}
int main()
{
	cin >> n;
	for(int i=0;i<n; i++)
	{
		scanf("%d%d",&P[i].first, &P[i].second);
		for(int j=0; j<i; j++)
		D[j][i]=D[i][j]=abs(P[i].first-P[j].first)+abs(P[i].second-P[j].second);
	}
			
	int s=0, e=10001,k;
	while(c)
	{
		k=1;
		m=(s+e)/2;

		for(int i=0; i<n; i++)
			mark[i]=0;
			
		for(int i=0; i<n; i++)
			if(mark[i]==0)
			{
				k*=2;
				if(k>1000*1000*1000)
					k%=1000*1000*1000+7;
				mark[i]=1;
				dfs(i);
				if(f==false)
					break;
			}
		if(e-s<2)	
		{
			if(f==true)
				m=s, c=false;
			else
				s=m+1,e=m+2, f=true;
			
		}
		else
		{	
			if(f==false)
				s=m+1, f=true;
			else
				e=m;
		}
	}
	
	cout << m <<endl<<k;
	return 0;
}
