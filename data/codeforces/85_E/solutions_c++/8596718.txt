#include<iostream>
#include<algorithm>

using namespace std;

typedef long long int ll;

const int N=5000+5;
const int base=1e9+7;

struct point{
    int x, y;
};

int n;
point p[N];
int c[N];

bool dfs(int v, int r, int k)
{
    c[v]=r;
    for (int i=0; i<n; i++)
    {
        int dis=abs(p[v].x-p[i].x)+abs(p[v].y-p[i].y);
        if (dis>k)
        {
            if (c[v]==c[i] || (!c[i] && !dfs(i, 3-r, k)))
                return 0;
        }
    }
    return 1;
}

int valid(int k)
{
    fill(c, c+N, 0);
    ll compon=0;
    for (int i=0; i<n; i++)
        if (!c[i])
        {
            compon++;
            if (!dfs(i, 1, k))
                return 0;
        }
    return compon;
}

int main ()
{
    cin >> n;

    for (int i=0; i<n; i++)
        cin >> p[i].x >> p[i].y;

    ll l=-1, r=2*N;
    while (r-l>1)
    {
        ll q=(r+l)/2;
        if (valid(q))
            r=q;
        else
            l=q;
    }
    cout << r << endl;
    int c=valid(r), ans=1;
    for (int i=0; i<c; i++)
        ans=(ans*2)%base;
    cout << ans;
}
