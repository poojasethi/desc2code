# -*- coding: utf-8 -*-

import copy

invalid = []

def isWin(board, mi, mj, turn):
    for row in board:
        if 'S' in row:
            return False
    return True

def dfs(board, mi, mj, turn):

    if isWin(board, mi, mj, turn):
        return True
    elif (mi*100+mj*10+turn) in invalid:
        return False
    else:
        for i in range(-1, 2):
            for j in range(-1, 2):
                # Maria's turn
                if (-1 < mi+i and mi+i < 8) and (-1 < mj+j and mj+j < 8) and (board[mi+i][mj+j] != 'S'):
                    next_board = copy.deepcopy(board)
                    next_board[mi][mj] = '.'
                    # next_board[mi+i][mj+j] = 'M'

                    # Statues's turn
                    if mi+i == 0 or next_board[mi+i-1][mj+j] != 'S':
                        next_board = [['.']*8] + next_board[: -1]
                        next_board[mi+i][mj+j] = 'M' 
                        if dfs(next_board, mi+i, mj+j, turn+1):
                            return True
        invalid.append(mi*100+mj*10+turn)
        return False

def main():
    board = [[cell for cell in raw_input()] for _ in range(8)]

    if dfs(board, 7, 0, 0):
        print 'WIN'
    else:
        print 'LOSE'

if __name__ == '__main__':
    main()

