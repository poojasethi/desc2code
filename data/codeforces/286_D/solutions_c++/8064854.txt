#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <set>
#define N 400010
#define int64 long long
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int x,y;
} b[N],c[N];
struct W {
	int l,r,z;
} d[N],e[N];
int i,j,k,n,m,x,y,z,t,w;
int a[N];
multiset<int> Set;
int64 an,s[N],S;
typedef multiset<int>::iterator w1;
inline bool cc1(const ww &A,const ww &B) {
	return A.x<B.x;
}
int main() {
	scanf("%d%d",&n,&m);
	For(i,1,m) {
		scanf("%d%d%d",&x,&y,&z);
		a[++t]=x,a[++t]=y;
		b[i]=(ww){x,z};
		c[i]=(ww){y,z};
	}
	sort(a+1,a+t+1);
	w=0; For(i,1,t) if (!w||a[w]<a[i]) a[++w]=a[i];
	sort(b+1,b+m+1,cc1);
	sort(c+1,c+m+1,cc1);
	j=k=1; t=0;
	For(i,1,w-1) {
		int A=a[i];
		for (;j<=m&&b[j].x==A;j++) Set.insert(b[j].y);
		for (;k<=m&&c[k].x==A;k++) {
			w1 A=Set.find(c[k].y);
			Set.erase(A);
		}
		if (!Set.empty()) d[++t]=(W){a[i],a[i+1]-1,*Set.begin()};
	}
	For(i,1,t) {
		b[i]=(ww){d[i].z-d[i].r-1,d[i].z-d[i].l+1};
		c[i]=(ww){b[i].y,b[i].x};
	}
	sort(b+1,b+t+1,cc1);
	sort(c+1,c+t+1,cc1);
	j=w=1;
	For(i,1,n) {
		scanf("%d",&k);
		for (;j<=t&&b[j].x<=k;j++) {
			an-=b[j].x;
			S++;
		}
		for (;w<=t&&c[w].x<=k;w++) {
			an+=c[w].y;
			S--;
			an+=c[w].x-c[w].y-1;
		}
		int64 ans=an+S*k;
		printf("%I64d\n",ans);
	}
	return 0;
}
