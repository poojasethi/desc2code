#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#include<vector>
#include<string>
#define LL long long
#define MP make_pair
#define PII pair<int,int>
#define PIII pair<PII,int>
#define FI first
#define SE second
using namespace std;
int n,m,q[100010],c[200010],f[200010],tot,inf=2e9,nwt[200010],cnt;
PIII p[100010];
PII P[400010];
void read(int &x)
{
	char ch=getchar();int mark=1;for(;ch!='-'&&(ch<'0'||ch>'9');ch=getchar());if (ch=='-') mark=-1,ch=getchar();
	for(x=0;ch>='0'&&ch<='9';ch=getchar()) x=x*10+ch-48;x*=mark;
}
int find(int x){return (f[x]==x)?x:f[x]=find(f[x]);}
inline bool cmp(PIII a,PIII b){return a.SE<b.SE;}
int main()
{
	read(n);read(m);
	for(int i=1;i<=m;i++)
	{
		read(p[i].FI.FI);read(p[i].FI.SE);read(p[i].SE);
		c[++tot]=p[i].FI.FI;
		c[++tot]=p[i].FI.SE;
	}
	for(int i=1;i<=n;i++) read(q[i]);
	sort(c+1,c+tot+1);
	sort(p+1,p+m+1,cmp);
	tot=unique(c+1,c+tot+1)-(c+1);
	for(int i=1;i<=tot;i++) f[i]=i,nwt[i]=-inf;
	for(int i=1;i<=m;i++)
	{
		int x=lower_bound(c+1,c+tot+1,p[i].FI.FI)-c,y=lower_bound(c+1,c+tot+1,p[i].FI.SE)-c;
		for(int j=find(x);j<y;j=find(j))
		{
			f[j]=j+1;nwt[j]=p[i].SE;
		}
	}
	for(int i=1;i<=tot;i++)
		if (nwt[i]!=-inf)
		{
			P[++cnt].FI=nwt[i]-c[i];
			P[cnt].SE=-1;
			P[++cnt].FI=nwt[i]-c[i+1];
			P[cnt].SE=1;
		}
	sort(P+1,P+cnt+1);
	LL ans=0,K=0;
	int now=1;
	for(int i=1;i<=n;i++)
	{
		for(;now<=cnt&&P[now].FI<=q[i];now++)
		{
			ans-=P[now].FI*P[now].SE;K+=P[now].SE;
		}
		printf("%I64d\n",ans+K*q[i]);
	}
	return 0;
}
