#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

int c[100010][3];
int u[100010];
pair<int,int> ev[200010];
priority_queue<pair<int,int> > que;

class EV{
    public:
        int x,t,d;
        EV(){}
        EV(int _x,int _t,int _d){
            x=_x; t=_t; d=_d;
        }
        bool operator<(const EV& e) const{
            if(x==e.x) return t<e.t;
            return x<e.x;
        }
};
EV bv[1000000];
int g;
long long ans[100000];

int main(){
    int n,m,r,i,x,y,H,L,R;
    long long S,D;
    scanf("%d %d",&n,&m);
    r=0;
    for( i=0; i<m; i++ ){
        scanf("%d %d %d",&c[i][0],&c[i][1],&c[i][2]);
        ev[r++]=make_pair(c[i][0],i);
        ev[r++]=make_pair(c[i][1],i);
    }
    sort(ev,ev+r);
    que.push(make_pair(-1000000001,m));
    u[m]=1;
    g=0;
    L=-1000000;
    for( i=0; i<r; i++ ){
        R=ev[i].first;
        while(!u[que.top().second]){
            que.pop();
        }
        if(que.top().second!=m){
            H=-que.top().first;
            bv[g++]=EV(H-R,0,1);
            bv[g++]=EV(H-L,0,-1);
        }
        L=R;

        x=ev[i].second;
        if(u[x]){
            u[x]=0;
        }else{
            u[x]=1;
            que.push(make_pair(-c[x][2],x));
        }
    }
    for( i=0; i<n; i++ ){
        scanf("%d",&x);
        bv[g++]=EV(x,-1,i);
    }
    sort(bv,bv+g);
    S=D=0;
    L=bv[0].x;
    for( i=0; i<g; i++ ){
        S+=(long long)(bv[i].x-L)*D;
        L=bv[i].x;
        if(bv[i].t==0){
            D+=bv[i].d;
        }else{
            ans[bv[i].d]=S;
        }
    }
    for( i=0; i<n; i++ ){
        printf("%I64d\n",ans[i]);
    }
    
    return 0;
}
