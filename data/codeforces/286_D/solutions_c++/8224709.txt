#include <map>
#include <set>
#include <cstdio>
#include <algorithm>

using namespace std;

const int N = 400040;

int n, m;

struct event {
	int x, t, ty;
} ev[N];

int evt, lst[N], sv[N], svt;

multiset<int> S;

bool cmp_ev(const event& a, const event& b) {
	return a.x < b.x || (a.x == b.x && a.ty > b.ty);
}
void add(int l, int r, int t) {
	sv[++svt] = t - r;
	sv[++svt] = t - l;
}
bool cmp_sv(int i, int j) {
	return sv[i] < sv[j];
}
int main() {
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= m; ++i) {
		int l, r, t;
		scanf("%d %d %d", &l, &r, &t);
		ev[++evt] = (event) {l, t, 1};
		ev[++evt] = (event) {r, t, 0};
	}
	sort(ev + 1, ev + evt + 1, cmp_ev);

	for (int i = 1; i <= evt; ) {
		int j = i;
		for (; j <= evt && ev[j].x == ev[i].x; ++j) {
			if (ev[j].ty)  S.insert(ev[j].t);
			else  S.erase(S.find(ev[j].t));
		}
		if (j <= evt) {
			if (!S.empty()) {
				add(ev[i].x, ev[j].x, *S.begin());
			}
		}
		i = j;
	}

	for (int i = 1; i <= svt; ++i) {
		lst[i] = i;
	}
	sort(lst + 1, lst + svt + 1, cmp_sv);
	
	int qt = 1;
	int ans = 0, now_cnt = 0;
	while (n--) {
		int t;
		scanf("%d", &t);
		for (; qt <= svt && sv[lst[qt]] <= t; ++qt) {
			int delta = sv[lst[qt]] - sv[lst[qt - 1]];
			ans += delta * now_cnt;
			if (lst[qt] & 1)  ++now_cnt;
			else  --now_cnt;
		}
		printf("%d\n", ans + now_cnt * (t - sv[lst[qt - 1]]));
	}
}
