#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <memory.h>

using namespace std;

#define FOREACH(a,b)\
    for(typeof(b.begin())a=b.begin();a!=b.end();a++)
#define MP(a,b) make_pair(a,b)

/*
 * */

#define MAXN 100005

int N,M;
vector<pair <int,pair <int,bool> > > w;
multiset<int> S;
int sumL,sumR;
int L[MAXN<<1],R[MAXN<<1],szL,szR;

int main()
{
    scanf("%d%d",&N,&M);
    for(int i=0;i<M;i++)
    {
        int l,r,t;
        scanf("%d%d%d",&l,&r,&t);
        w.push_back(MP(l,MP(t,true)));
        w.push_back(MP(r,MP(t,false)));
    }

    sort(w.begin(),w.end());

    szL = szR = 0;
    for(int i=0;i<(int)w.size();i++)
    {
        if(i && S.size())
        {
            int mi = *S.begin();
            L[++szL] = mi-w[i-1].first;
            R[++szR] = mi-w[i].first;
        }
        int t = w[i].second.first;
        if(w[i].second.second) S.insert(t);
        else S.erase(S.find(t));
    }

    sort(L+1,L+szL+1);
    sort(R+1,R+szR+1);
    sumL = sumR = 0;

    int headL,headR;
    headL = headR = 0;
    for(int i=1;i<=N;i++)
    {
        int tt;
        scanf("%d",&tt);
        for(;headL<szL && L[headL+1]<tt;)
            sumL += L[++headL];
        for(;headR<szR && R[headR+1]<tt;)
            sumR += R[++headR];
        int ans = (headR-headL)*tt+(sumL-sumR);
        printf("%d\n",ans);
    }

	return 0;
}

