#include <cstdio>
#include <algorithm>
#include <set>
#define VAR(v,n) __typeof(n) v=n
#define REP(x,n) for(int x=0; x<(n); ++x)
#define MP make_pair
#define ST first
#define ND second
using namespace std;
typedef pair<int, int> PII;

const int N = 1e5;
const int INF = 1e9+1;

int n, m, k;
PII ev[10*N];

void read()
{
	scanf("%d%d", &n, &m);
	
	pair<int, PII> t[m];
	REP(i, m) scanf("%d%d%d", &t[i].ND.ST, &t[i].ND.ND, &t[i].ST);
	sort(t, t+m);
	
	set<PII> s;
	s.insert(MP(INF, 1));
	
	REP(i, m) {
		PII x = t[i].ND;
		
		VAR(at, s.lower_bound(MP(x.ST, INF)));
		while (x.ST < x.ND) {
			if (at->ND == 1) {
				int a = x.ST, b = min(x.ND, at->ST);
				ev[k++] = MP(t[i].ST-b, 1);
				ev[k++] = MP(t[i].ST-a, -1);
				if (t[i].ND.ST == a) s.insert(MP(a, 1));
				if (t[i].ND.ND == b) s.insert(MP(b, -1));
			}
			x.ST = at->ST;
			if (x.ST < x.ND) s.erase(at++);
		}
	}
	
	REP(i, n) {
		int x; scanf("%d", &x);
		ev[k++] = MP(x, 0);
	}
	
	sort(ev, ev+k);
}


int main()
{
	read();
	
	int now = 0, len = 0;
	for (int i=0; i<k; ++i) {
		if (i) now += (ev[i].ST - ev[i-1].ST) * len;
		if (ev[i].ND) len += ev[i].ND;
		else printf("%d\n", now);
	}
	
	return 0;
}
