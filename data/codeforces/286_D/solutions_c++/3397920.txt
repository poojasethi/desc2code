#include <cstdio>
#include <map>
#include <algorithm>
using namespace std;

#define Px first
#define Py second

const int N = 100050;

namespace SVR {
	struct event { int x, ty; } evt[N * 5];
	int ec = 0, ans[N];
	void addInterval (int l, int r, int t) { // (l, r) @ Time t
		evt[++ec] = (event){t - r, +1};
		evt[++ec] = (event){t - l, -1};
	}
	int evtcomp (const event &l, const event &r) {
		return l.x != r.x ? l.x < r.x : l.ty < r.ty;
	}
	void solve (int m) {
		for (int i = 1, t; i <= m; ++i) {
			scanf("%d", &t);
			evt[++ec] = (event){t, N + i};
		}
		sort(evt + 1, evt + 1 + ec, evtcomp);
		int delt = 0, cnt = 0;
		for (int i = 1; i <= ec; ++i) {
			if (evt[i].ty == +1) delt -= evt[i].x, ++cnt;
			else if (evt[i].ty == -1) delt += evt[i].x, --cnt;
			else ans[evt[i].ty - N] = delt + cnt * evt[i].x;
		}
		for (int i = 1; i <= m; ++i) {
			printf("%d\n", ans[i]);
		}
	}
}

namespace PSR {
	struct event { int x, t, ty; } evt[N * 2];
	int n, m, ec;
	int evtcomp (const event &l, const event &r) {
		return l.x == r.x ? l.t < r.t : l.x < r.x;
	}
	map<int, int> mint;
	void solve () {
		scanf("%d%d", &m, &n);
		for (int i = 1; i <= n; ++i) {
			int l, r, t;
			scanf("%d%d%d", &l, &r, &t);
			evt[++ec] = (event){l, t, +1};
			evt[++ec] = (event){r, t, -1};
		}
		sort(evt + 1, evt + 1 + ec, evtcomp);
		evt[0].x = -1;
		for (int i = 1; i <= ec; ++i) {
			if (evt[i].x != evt[i - 1].x && !mint.empty()) {
				SVR::addInterval(evt[i - 1].x, evt[i].x, mint.begin()->Px);
			}
			if (evt[i].ty == +1) {
				++mint[evt[i].t];
			}
			else {
				if (!--mint[evt[i].t]) mint.erase(evt[i].t);
			}
		}
		SVR::solve(m);
	}
}

int main () {
#ifdef LOCAL
	freopen("in", "r", stdin);
#endif
	PSR::solve();
	return 0;
}

