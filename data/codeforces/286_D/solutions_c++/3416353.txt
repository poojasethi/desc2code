#include<stdio.h>
#include<string.h>
#include<set>
#include<algorithm>
#include<utility>
#include<vector>
#define LL long long
#define MP make_pair 
#define PB push_back
using namespace std;
struct A{
    int w,t,s;
    A(int w,int t,int s):w(w),t(t),s(s){}
    int operator < (const A &a)const{
        return w<a.w;
    }
};
vector <A> q;
vector <pair<int,int> > e;
multiset<int> hash;
int n,m;
LL ans;
int main(){
    int i,j,cnt;
    int l,r,t;
    scanf("%d%d",&n,&m);
    for (i=0;i<m;i++){
        scanf("%d%d%d",&l,&r,&t);
        q.PB(A(l,t,1));
        q.PB(A(r,t,0));
    }
    sort(q.begin(),q.end());
    l=-1;
    for (i=0;i<q.size();i++){
        r=q[i].w;
        if (l>=0&&r>l&&!hash.empty()){
            t=*hash.begin();
            e.PB(MP(t-l,1));
            e.PB(MP(t-r,-1));
        }
        l=r;
        t=q[i].t;
        if (q[i].s>0) hash.insert(t);
        else hash.erase(hash.find(t));
    }
    sort(e.begin(),e.end());
    j=cnt=0;
    for (i=0;i<n;i++){
        scanf("%d",&t);
        for (;j<e.size()&&e[j].first<t;j++){
            if (e[j].second<0){
                ans-=e[j].first;
                cnt++;
            }else{
                ans+=e[j].first;
                cnt--;
            }
        }
        printf("%I64d\n",ans+(LL)t*cnt);
    }
    return 0;
}
