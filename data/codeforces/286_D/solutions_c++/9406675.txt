#include <cstdio>
#include <algorithm>
const int N = 100000 + 9;
const int M = N * 60;
int nodes,n,m,lc[M],rc[M],L,R,cnt,lastl,lastr,lastt,lastp,rt,sum[M];
struct wall
{
	int l,r,t;
	bool operator<(const wall &o)const{return t < o.t;}
}a[N],b[N * 2];
struct opt
{
	int k,p;
	bool operator<(const opt &o)const{return p < o.p;}
}c[N * 2];
void work(int &id,int l,int r)
{
	if (!id) id = ++nodes;
	if (sum[id] == r - l) return;
	if (L <= l && r <= R && sum[id] == 0) {
		sum[id] = r - l;
		if (lastr != l) {
			if (lastr != -1) {
				c[++cnt].p = lastt - lastr; c[cnt].k = 1;
				c[++cnt].p = lastt - lastl; c[cnt].k = -1;
			}
			lastl = l; lastr = r;
		}else lastr = r;
		return;
	}
	const int mid = (l + r) / 2;
	if (L < mid) work(lc[id],l,mid);
	if (mid < R) work(rc[id],mid,r);
	sum[id] = sum[lc[id]] + sum[rc[id]];
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("286D.in","r",stdin);
	freopen("286D.out","w",stdout);
	#endif
	scanf("%d%d",&n,&m);
	for (int i = 1; i <= m; ++i)
		scanf("%d%d%d",&a[i].l,&a[i].r,&a[i].t);
	std::sort(a + 1,a + 1 + m);
	for (int i = 1; i <= m; ++i) {
		L = a[i].l; R = a[i].r; lastr = -1; lastt = a[i].t;
		work(rt,0,1000000000);
		if (lastr == -1) continue;
		c[++cnt].p = lastt - lastr; c[cnt].k = 1;
		c[++cnt].p = lastt - lastl; c[cnt].k = -1;
	}
	std::sort(c + 1,c + 1 + cnt);
	for (int q,i = 1,j = 1,k = 0,s = 0; i <= n; ++i) {
		scanf("%d",&q);
		for (; j <= cnt && c[j].p <= q; ++j) {
			s += k * (c[j].p - lastp);
			k += c[j].k;
			lastp = c[j].p;
		}
		s += k * (q - lastp);
		lastp = q;
		printf("%d\n",s);
	}
}
