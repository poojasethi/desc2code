#include <queue>
#include <vector>
#include <utility>
#include <iostream>
#include <algorithm>

#define MAXN 100005

using namespace std;

struct wall
{
  int l, r, t;
} a[MAXN];

int n, m;
vector<pair<int, int> > query, c;

int nhap()
{
  cin >> n >> m;
  for (int i = 1; i <= m; i++) 
  {
    cin >> a[i].l >> a[i].r >> a[i].t;
    query.push_back(make_pair(a[i].l, i));
    query.push_back(make_pair(a[i].r, -i));
  }
  sort(query.begin(), query.end());
}

int chbi()
{
  priority_queue<pair<int, int > > q;
  for (int i = 0, j; query[i].first < query.back().first; i = j)
  {
    for (j = i; j < query.size() && query[i].first == query[j].first; j++)
      if (query[j].second > 0) q.push(make_pair(-a[query[j].second].t, query[j].second));
      
    while (!q.empty() && a[q.top().second].r <= query[i].first) q.pop();
    if (q.empty()) continue;
    c.push_back(make_pair(-q.top().first - query[i].first, -1));
    c.push_back(make_pair(-q.top().first - query[j].first, 1));
  }
  sort(c.begin(), c.end());
}

int xuli()
{
  int i = 0;
  long long p, x, y;
  x = 0; y = 0;
  while (n--)
  {
    cin >> p;
    for (; i < c.size() && c[i].first <= p; i++)
    {
      x += c[i].second;
      y -= c[i].first * c[i].second;
    }
    
    cout << x * p + y << "\n";
  }
}

main()
{
  nhap();
  chbi();
  xuli();
 // system("pause");
}
