#include<stdio.h>
#include<algorithm>
#define mp make_pair
#define ft first
#define sd second
using namespace std;
typedef pair<int,int> pii;
const int maxn=300050,maxb=25,maxl=maxn*2;
int lb[maxl];
int n,len,q;
char str[maxn];
int es=0,he[maxn],ne[maxn*2],to[maxn*2];
int dep[maxn],fa[maxn][maxb],siz[maxn],top[maxn],ff[maxn],son[maxn];
int ss[maxl],ll,ls=0,pos[2][maxn],pp[maxl];
int sa[maxl],rank[maxl],h[maxl],mh[maxb][maxl];
int cnt[maxl],xt[maxl],yt[maxl];
pii pa[2][maxb];
int cp[2];
void ins(int x,int y)
{
	ne[++es]=he[x],he[x]=es,to[es]=y;
}
void dfs(int x)
{
	int i,y;
	siz[x]=1;
	for(i=0;fa[x][i];i++)
		fa[x][i+1]=fa[fa[x][i]][i];
	for(i=he[x];i;i=ne[i])
		if((y=to[i])!=fa[x][0])
		{
			dep[y]=dep[x]+1;
			fa[y][0]=x;
			dfs(y);
			siz[x]+=siz[y];
		}
}
void dfs2(int x,int t)
{
	int i,y,ch=0;
	top[x]=t;
	ff[x]=fa[x][0];
	ss[pos[0][x]=len-1-ls]=ss[pos[1][x]=ls]=str[x]-'a'+1;
	pp[ls]=pp[len-1-ls]=x;
	ls++;
	for(i=he[x];i;i=ne[i])
		if((y=to[i])!=fa[x][0]&&siz[y]>siz[ch])
			ch=y;
	son[x]=ch;
	if(!ch) return ;
	dfs2(ch,t);
	for(i=he[x];i;i=ne[i])
		if((y=to[i])!=fa[x][0]&&y!=ch)
			dfs2(y,y);
}
void get_sa()
{
	int i,j,k,m=30,*x=xt,*y=yt;
	for(i=0;i<ll;i++) cnt[x[i]=ss[i]]++;
	for(i=1;i<=m;i++) cnt[i]+=cnt[i-1];
	for(i=ll-1;i>=0;i--) sa[--cnt[x[i]]]=i;
	for(i=1;i<=ll;i<<=1)
	{
		k=0;
		for(j=ll-i;j<ll;j++) y[k++]=j;
		for(j=0;j<ll;j++) if(sa[j]>=i) y[k++]=sa[j]-i;
		for(j=0;j<=m;j++) cnt[j]=0;
		for(j=0;j<ll;j++) cnt[x[y[j]]]++;
		for(j=1;j<=m;j++) cnt[j]+=cnt[j-1];
		for(j=ll-1;j>=0;j--) sa[--cnt[x[y[j]]]]=y[j];
		swap(x,y);
		x[sa[0]]=m=0;
		for(j=1;j<ll;j++)
			x[sa[j]]=(y[sa[j]]==y[sa[j-1]]&&y[sa[j]+i]==y[sa[j-1]+i]?m:++m);
		if(m>=ll-1) break;
	}
}
void get_h()
{
	int i,j;
	for(i=0;i<ll;i++) rank[sa[i]]=i;
	for(i=j=0;i<ll;i++)
	{
		if(j) j--;
		while(rank[i]&&ss[i+j]==ss[sa[rank[i]-1]+j]) j++;
		mh[0][rank[i]]=h[rank[i]]=j;
	}
	for(i=0;i<ll;i++)
		for(j=0;mh[j][i];j++)
			mh[j+1][i]=min(mh[j][i],mh[j][i-(1<<j)]);
}
inline int LCA(int x,int y)
{
	if(dep[x]<dep[y]) swap(x,y);
	int i;
	for(i=maxb-1;i>=0;i--)
		if(dep[x]-dep[y]>=1<<i)
			x=fa[x][i];
	if(x==y) return x;
	for(i=maxb-1;i>=0;i--)
		if(fa[x][i]!=fa[y][i])
			x=fa[x][i],y=fa[y][i];
	return fa[x][0];
}
inline void get_pa(int c,int x,int des)
{
	cp[c]=0;
	pa[c][++cp[c]]=mp(x,son[x]);
	while(dep[x=top[x]]>dep[des])
		pa[c][++cp[c]]=mp(ff[x],x),x=ff[x];
}
inline int next(int c,bool &z,int lca,int y,int x)
{
	if(x==lca) z=1;
	if(!z) return ff[x];
	if(cp[c]&&pa[c][cp[c]].ft==x) x=pa[c][cp[c]].sd,cp[c]--;
	else x=son[x];
	return x;
}
inline int LCP(int x,int y)
{
	x=rank[x],y=rank[y];
	if(x>y) swap(x,y);
	if(x==y) return maxn;
	int t=lb[y-x];
	return min(mh[t][y],mh[t][x+(1<<t)]);
}
int query(int x1,int y1,int x2,int y2)
{
	int l1=LCA(x1,y1),l2=LCA(x2,y2),s0=min(dep[x1]+dep[y1]-dep[l1]*2,dep[x2]+dep[y2]-dep[l2]*2)+1,s=0;
	bool z1=0,z2=0;
	if(x1==l1) z1=1;
	if(x2==l2) z2=1;
	get_pa(0,y1,l1);
	get_pa(1,y2,l2);
	while(1)
	{
		int t1=(!z1?top[x1]:pa[0][cp[0]].ft),t2=(!z2?top[x2]:pa[1][cp[1]].ft),l0,l00;
		if(dep[t1]<dep[l1]) t1=l1;
		if(dep[t2]<dep[l2]) t2=l2;
		l00=min(abs(dep[t1]-dep[x1]),abs(dep[t2]-dep[x2]))+1;
		l0=LCP(pos[z1][x1],pos[z2][x2]);
		s+=min(l0,l00);
		if(l0<l00||s>=s0) break;
		l0=min(l0,l00);
		x1=next(0,z1,l1,y1,pp[pos[z1][x1]+l0-1]);
		x2=next(1,z2,l2,y2,pp[pos[z2][x2]+l0-1]);
	}
	return s;
}
int main()
{
	int i,j,x,y,x2,y2;
	for(i=2;i<maxl;i++)
		lb[i]=(i&1?lb[i-1]:lb[i>>1]+1);
	scanf("%d%s",&n,str+1);
	ll=len=n*2;
	for(i=1;i<n;i++)
		scanf("%d%d",&x,&y),ins(x,y),ins(y,x);
	dfs(1);
	dfs2(1,1);
	ss[ll++]=0;
	get_sa();
	get_h();
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d%d%d%d",&x,&y,&x2,&y2);
		printf("%d\n",query(x,y,x2,y2));
	}
	return 0;
}
