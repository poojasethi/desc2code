#include <cstdio>
#include <cstring>
#include <iostream>
#include <cmath>
#include <algorithm>
#define N 500010
#define Inf 0x3f3f3f3f
using namespace std;
int n, m, maxlen;
int a[N], L[N], R[N], Cnt[N], g[N];
int ans[N];
struct node{
	int l, r, id, val, pos;
}q[N];

void getL(){
	int p = 1, i, j;
	for (i = 1; i <= n; ++ i)
		g[i] = Inf;
	for (i = 1; i <= n; ++ i){
		while (p <= m && q[p].pos == i){
			int pos = lower_bound(g + 1, g + 1 + n, q[p].val) - g;
			q[p].l = pos;
			p++;
		}
		int pos = lower_bound(g + 1, g + n + 1, a[i]) - g;
		L[i] = pos;
		g[pos] = a[i];
		maxlen = max(pos, maxlen);
	}
}

void getR(){
	int p = m, i;
	for (i = 1; i <= n; ++ i)
		g[i] = Inf;
	for (int i = n; i > 0; -- i){
		while (p > 0 && q[p].pos == i){
			int pos = lower_bound(g + 1, g + 1 + n, -q[p].val) - g;
			q[p].r = pos;
			-- p;
		}
		int pos = lower_bound(g + 1, g + 1 + n, - a[i]) - g;
		R[i] = pos;
		g[pos] = -a[i];
	}
}

void getCnt(){
	for (int i = 1; i <= n; ++ i)
	if (L[i] + R[i] > maxlen)   Cnt[L[i]]++;
}
bool cmp(node fst, node snd){
	return fst.pos < snd.pos;
}

int main(){
	int i, j;
	scanf("%d%d", &n, &m);
	for (i = 1; i <= n; ++ i){
		scanf("%d", &a[i]);
	}
	for (i = 1; i <= m; ++ i){
		scanf("%d%d", &q[i].pos, &q[i].val);
		q[i].id = i;
	}
	sort(q + 1, q + 1 + m, cmp);
	getL();
	getR();
	getCnt();
	for (i = 1; i <= m; ++ i){
		int j = q[i].pos;
		if (q[i].l + q[i].r > maxlen)  ans[q[i].id] = q[i].l + q[i].r - 1;
		else if (L[j] + R[j] > maxlen && Cnt[L[j]] == 1) ans[q[i].id] = maxlen - 1;
		else ans[q[i].id] = maxlen;
	}
	for (i = 1; i <= m; ++ i) printf("%d\n", ans[i]);
	return 0;
}
	 		 	 			    	 						    	   	