#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;
const int maxn=4e5+5;

int p[maxn],v[maxn];
int a[maxn],pos[maxn<<1];
int f[maxn],g[maxn];
int t[maxn],have[maxn];
int n,m;

struct data{
	int x,y,idx;
	bool operator<(const data&cmp)
		const{return x<cmp.x;}
}q[maxn];
int ans[maxn];

int c[maxn<<1];
void update(int x,int w){
	for(int i=x;i<=(n+m);i+=(i&-i)) c[i]=max(c[i],w);
}
int query(int x){
	int ret=0;
	for(int i=x;i;i-=(i&-i)) ret=max(ret,c[i]);
	return ret;
}

int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		scanf("%d",&a[i]),pos[i]=a[i];
		
	for(int i=1;i<=m;i++){
		scanf("%d%d",&p[i],&v[i]);
		pos[i+n]=v[i];
	}
	
	sort(pos+1,pos+n+m+1);
	for(int i=1;i<=n;i++) a[i]=lower_bound(pos+1,pos+n+m+1,a[i])-pos;
	for(int i=1;i<=m;i++) v[i]=lower_bound(pos+1,pos+n+m+1,v[i])-pos;
	
	int len=0;
	for(int i=1;i<=n;i++){
		f[i]=query(a[i]-1)+1,update(a[i],f[i]);
		len=max(len,f[i]);
	}
		
	memset(c,0,sizeof(c));
	for(int i=n;i>=1;i--)
		g[i]=query(n+m-a[i])+1,update(n+m+1-a[i],g[i]);
	
	memset(c,0,sizeof(c));
	for(int i=1;i<=n;i++){
		int x=query(a[i]-1);
		if(x+g[i]==len) t[g[i]]++,have[i]=1;
		update(a[i],f[i]);
	}
	
	for(int i=1;i<=m;i++)
		q[i]=(data){p[i],v[i],i};
	sort(q+1,q+m+1);
	
	int j=1;
	memset(c,0,sizeof(c));
	for(int i=1;i<=n;i++){
		while(j<=m&&q[j].x==i)
			ans[q[j].idx]+=query(q[j].y-1)+1,j++;
		update(a[i],f[i]);
	}
	
	j=m;
	memset(c,0,sizeof(c));
	for(int i=n;i>=1;i--){
		while(j&&q[j].x==i)
			ans[q[j].idx]+=query(n+m-q[j].y),j--;
		update(n+m+1-a[i],g[i]);
	}
	
	for(int i=1;i<=m;i++){
		if(have[p[i]]&&t[g[p[i]]]==1) ans[i]=max(ans[i],len-1);
		else ans[i]=max(ans[i],len);
		printf("%d\n",ans[i]);
	}
		
	return 0;
}
