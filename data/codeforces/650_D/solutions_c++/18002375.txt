#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<queue>
#include<vector>
using namespace std;

const int N=800010;
struct node{
	int x,y,l,r,id;
	friend bool operator <(node &a,node &b){
		return a.x<b.x;
	}
}q[N];
int n,m,cnt,x,y,a[N],c[N],b[N],ans[N],l[N],r[N],num[N];

void change(int x,int y){
	for(;x<=n+m;x+=x&-x) c[x]=max(c[x],y);
}
int query(int x){
	int tmp=0;
	for(;x;x-=x&-x) tmp=max(tmp,c[x]);
	return tmp;
}
int find(int x){
	int l=0,r=cnt,mid;
	while(r-l>1){
		mid=(l+r)>>1;
		if(b[mid]>=x) r=mid;
		else l=mid;
	}
	return r;
}
int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++){
		scanf("%d",a+i);
		b[++cnt]=a[i];
	}
	for(int i=1;i<=m;i++){
		scanf("%d%d",&q[i].x,&q[i].y);
		b[++cnt]=q[i].y; 
		q[i].id=i;
	}
	sort(q+1,q+1+m);
	sort(b+1,b+1+cnt);
	cnt=unique(b+1,b+1+cnt)-b-1;
	for(int i=1;i<=n;i++) a[i]=find(a[i]);
	for(int i=1;i<=m;i++) q[i].y=find(q[i].y);
	int now=1,k;
	for(int i=1;i<=n;i++){
		for(;q[now].x==i;now++) 
		q[now].l=query(q[now].y-1)+1;
		change(a[i],l[i]=query(a[i]-1)+1);
	}
	k=query(n+m);
	memset(c,0,sizeof(c)); now=m;
	for(int i=n;i;i--){
		for(;q[now].x==i;now--) 
		q[now].r=query(n+m-q[now].y)+1;
		change(n+m-a[i]+1,r[i]=query(n+m-a[i])+1);
	}
	for(int i=1;i<=n;i++)
	if(r[i]+l[i]-1==k) num[l[i]]++;
	for(int i=1;i<=m;i++)
	if(q[i].l+q[i].r-1>k) ans[q[i].id]=k+1;
	else if(num[l[q[i].x]]+(l[q[i].x]+r[q[i].x]-1!=k)>1||q[i].l+q[i].r-1==k)
	ans[q[i].id]=k;
	else ans[q[i].id]=k-1;
	for(int i=1;i<=m;i++) printf("%d\n",ans[i]);
	return 0;
}