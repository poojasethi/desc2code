#include<stdio.h>
#include<map>
#include<algorithm>
#include<cstring>
#define N 800005
#define lowbit(o) o&-o
using namespace std;
int i,j,k,l,s,n,m,ans,da[N],f[N],F[N],q[N],r,a[N],tot,v[N];
int L[N],R[N];
struct node {
	int x,y,id,Lv,Rv;
}b[N];
map<int,int>ma;
inline bool cmp(const node &x,const node &y) {
	return x.x<y.x;
}
inline void orzgtw() {
	for (int i=1;i<=n;i++) q[++r]=a[i];
	for (int i=1;i<=m;i++) q[++r]=b[i].y;
	sort(q+1,q+1+r);
	for (int i=1;i<=r;i++) if (!ma[q[i]]) ma[q[i]]=++tot;
	for (int i=1;i<=n;i++) a[i]=ma[a[i]];
	for (int i=1;i<=m;i++) b[i].y=ma[b[i].y];
}
inline void change(int o,int p) {
	for (;o<=tot;o+=lowbit(o)) f[o]=max(f[o],p);
}
inline int ask(int o) {
	int s=0;
	for (;o;o-=lowbit(o)) s=max(s,f[o]);
	return s;
}
inline void Change(int o,int p) {
	for (;o;o-=lowbit(o)) F[o]=max(F[o],p);
}
inline int Ask(int o) {
	int s=0;
	for (;o<=tot;o+=lowbit(o)) s=max(s,F[o]);
	return s;
}
int main() {
	scanf("%d%d",&n,&m);
	for (i=1;i<=n;i++) scanf("%d",&a[i]);
	
	for (i=1;i<=m;i++) scanf("%d%d",&b[i].x,&b[b[i].id=i].y);
	orzgtw();
	sort(b+1,b+1+m,cmp);
	j=1;
	for (i=1;i<=n;i++) {
		L[i]=ask(a[i]-1);
		while (b[j].x==i) {
			b[j].Lv=ask(b[j].y-1); j++;
		}
		change(a[i],L[i]+1);
	}
	j=m;
	for (i=n;i;i--) {
		R[i]=Ask(a[i]+1);
		while (b[j].x==i&&j) {
			b[j].Rv=Ask(b[j].y+1); j--;
		}
		Change(a[i],R[i]+1);
	}
	for (i=1;i<=n;i++) ans=max(ans,L[i]+R[i]+1);
	for (i=1;i<=n;i++) if (L[i]+R[i]+1==ans) v[L[i]]++;
	for (i=1;i<=m;i++) {
		if (L[b[i].x]+R[b[i].x]+1<ans) da[b[i].id]=max(ans,b[i].Lv+b[i].Rv+1);
		else if (v[L[b[i].x]]>1) da[b[i].id]=max(ans,b[i].Lv+b[i].Rv+1);
		else da[b[i].id]=max(ans-1,b[i].Lv+b[i].Rv+1);
	}
	for (i=1;i<=m;i++) printf("%d\n",da[i]);
}
		