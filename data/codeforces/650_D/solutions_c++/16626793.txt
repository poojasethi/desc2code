#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstring>
#include <cstdio>
#define x first
#define y second

using namespace std;

const int N = 400100;
int h[N], l[N], r[N], sz[N * 2], L[N], R[N];
vector<int> v;
vector<pair<int, int> > qu[N];
int ans[N], len, cnt[N], ma;

int Hash(int val) {
    return lower_bound(v.begin(), v.end(), val) - v.begin() + 1;
}

int get(int id) {
    int res = 0;
    for (int i = id; i > 0; i -= (i & (-i))) res = max(res, sz[i]);
    return res;
}

void update(int id, int val) {
    for (int i = id; i <= len; i += (i & (-i))) sz[i] = max(sz[i], val);
}

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++) {
        scanf("%d", &h[i]);
        v.push_back(h[i]);
    }
    for (int i = 0; i < m; i++) {
        int a, b;
        scanf("%d%d", &a, &b);
        a--; v.push_back(b);
        qu[a].push_back(make_pair(b, i));
    }
    sort(v.begin(), v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    len = v.size();
    for (int i = 0; i < n; i++) {
        int k = Hash(h[i]);
        int res = get(k - 1);
        l[i] = res;
        for (int j = 0; j < qu[i].size(); j++) {
            int nk = Hash(qu[i][j].x);
            res = get(nk - 1);
            L[qu[i][j].y] = res;
        }
        update(k, l[i] + 1);
    }
    memset(sz, 0, sizeof(sz));
    for (int i = n - 1; i >= 0; i--) {
        int k = len - Hash(h[i]) + 1, res = get(k - 1);
        r[i] = res;
        for (int j = 0; j < qu[i].size(); j++) {
            int nk = len - Hash(qu[i][j].x) + 1;
            res = get(nk - 1);
            R[qu[i][j].y] = res;
        }
        update(k, r[i] + 1);
        ma = max(ma, l[i] + r[i] + 1);
    }
    for (int i = 0; i < n; i++) {
        if (l[i] + r[i] + 1 == ma) cnt[l[i]]++;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < qu[i].size(); j++) {
            ans[qu[i][j].y] = ma;
            if (l[i] + r[i] + 1 == ma && cnt[l[i]] == 1) ans[qu[i][j].y]--;
        }
    }
    for (int i = 0; i < m; i++) {
        ans[i] = max(ans[i], L[i] + R[i] + 1);
        printf("%d\n", ans[i]);
    }
}
