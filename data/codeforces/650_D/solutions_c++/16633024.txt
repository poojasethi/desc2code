#include<bits/stdc++.h>
#define pii pair<int,int>
#define x first
#define y second
using namespace std;
map<int,int>mp;
vector<int>v;
vector<pii>Qx[1000010];
pii Q[1000010];
int n,m,a[1000010],f1[1000010],f2[1000010],cnt[1000010],f3[1000010],f4[1000010];
struct node{
	int l,r,mx;
}tree[4000040];
void pushup(int x)
{
	tree[x].mx=max(tree[2*x].mx,tree[2*x+1].mx);
}
void build(int x,int l,int r)
{
	tree[x].l=l,tree[x].r=r,tree[x].mx=0;
	if(l==r)return;
	build(2*x,l,(l+r)/2);
	build(2*x+1,(l+r)/2+1,r);
}
void update(int x,int pos,int v)
{
	if(tree[x].l==pos&&tree[x].r==pos){tree[x].mx=max(tree[x].mx,v);return;}
	if(pos<=(tree[x].l+tree[x].r)/2)update(2*x,pos,v);
	else update(2*x+1,pos,v);
	pushup(x);
}
int query(int x,int l,int r)
{
	if(l>r)return 0;
	if(tree[x].l==l&&tree[x].r==r)return tree[x].mx;
	if(r<=(tree[x].l+tree[x].r)/2)return query(2*x,l,r);
	if(l>(tree[x].l+tree[x].r)/2)return query(2*x+1,l,r);
	return max(query(2*x,l,(tree[x].l+tree[x].r)/2),query(2*x+1,(tree[x].l+tree[x].r)/2+1,r));
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;++i)scanf("%d",&a[i]),v.push_back(a[i]);
	for(int i=1;i<=m;++i)scanf("%d%d",&Q[i].x,&Q[i].y),v.push_back(Q[i].y);
	sort(v.begin(),v.end());
	v.erase(unique(v.begin(),v.end()),v.end());
	for(int i=0;i<v.size();++i)mp[v[i]]=i+1;
	for(int i=1;i<=n;++i)a[i]=mp[a[i]];
	for(int i=1;i<=m;++i)Q[i].y=mp[Q[i].y],Qx[Q[i].x].push_back(pii(i,Q[i].y));
	build(1,1,v.size()+5);
	for(int i=1;i<=n;++i)
	{
		f1[i]=query(1,1,a[i]-1)+1;
		for(int j=0;j<Qx[i].size();++j)
		{
			int id=Qx[i][j].x,x=Qx[i][j].y;
			f3[id]=query(1,1,x-1)+1;
		}
		update(1,a[i],f1[i]);
	}
	reverse(a+1,a+1+n);
	build(1,1,v.size()+5);
	for(int i=1;i<=n;++i)
	{
		f2[i]=query(1,a[i]+1,v.size())+1;
		for(int j=0;j<Qx[n-i+1].size();++j)
		{
			int id=Qx[n-i+1][j].x,x=Qx[n-i+1][j].y;
			f4[id]=query(1,x+1,v.size())+1;
		}
		update(1,a[i],f2[i]);
	}
	int LIS=0;
	for(int i=1;i<=n;++i)LIS=max(LIS,f1[i]);
	for(int i=1;i<=n;++i)
		if(f1[i]+f2[n-i+1]==LIS+1)++cnt[f1[i]];
	for(int i=1;i<=m;++i)
	{
		int ans=LIS,x=Q[i].x;
		if(f1[x]+f2[n-x+1]==LIS+1&&cnt[f1[x]]==1)--ans;
		ans=max(ans,f3[i]+f4[i]-1);
		printf("%d\n",ans);
	}
}
	  		  	 	   	   	 			 			 		