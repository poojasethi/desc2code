#include<bits/stdc++.h>

using namespace std;

#define pii pair<int,int>
#define ll long long
#define N (int)(4e5+10)
#define mod 1000000007
#define mp make_pair
#define pb push_back
#define nd second
#define st first
#define inf mod
#define endl '\n'
#define sag (sol|1)
#define sol (root<<1)
#define ort ((bas+son)>>1)
#define bit(x,y) ((x>>y)&1)

int i,j,k,n,m,x,y,z;
int A[N],R[N],L[N],all[N];
int a[N],b[N],s,t;
int ans[N],St[4*N];
pii c[N];
vector< pair< pii ,int > > q;

int que(int root,int bas,int son,int x,int y){
	if(bas > y or son < x)
		return 0;

	if(x <= bas and son <= y)
		return St[root];

	return max(que(sol,bas,ort,x,y) , que(sag,ort+1,son,x,y));
}

int upd(int root,int bas,int son,int x,int y){
	if(bas > x or son < x)
		return St[root];

	if(bas==son)
		return St[root] = y;
	
	return St[root] = max( upd(sol,bas,ort,x,y) , upd(sag,ort+1,son,x,y) ) ;
}

int main(){
	cin >> n >> m;

	for(i=1 ; i<=n ; i++){
		scanf("%d",a+i);
		c[i].st = a[i];
		c[i].nd = i;
	}

	sort(c+1,c+1+n);

	for(i=1 ; i<=n ; i++){
		int t = lower_bound(b,b+s,a[i])-b;
		L[i] = t+1;
		b[t] = a[i];
		if(t == s)
			s++;
	}

	for(i=1 ; i<=n ; i++)
		a[i] = -a[i];

	s=0;

	for(i=n ; i>=1 ; i--){
		int t = lower_bound(b,b+s,a[i])-b;
		R[i] = t+1;
		b[t] = a[i];
		if(t==s)
			s++;
	}

	for(i=1 ; i<=n ; i++)
		if(L[i] + R[i] - 1 == s)
			A[L[i]]++;

	for(i=1 ; i<=n ; i++)
		if(L[i] + R[i] - 1 == s and A[L[i]]==1)
			all[i] = 1;

	for(i=1 ; i<=m ; i++){
		scanf("%d %d",&x,&y);
		q.pb(mp(mp(y,x),i));
	}

	sort(q.begin(),q.end());

	int t = 1;

	for(i=0 ; i<m ; i++){
		while(t<=n and c[t].st < q[i].st.st){
			upd(1,1,n,c[t].nd,L[c[t].nd]);
			t++;
		}
		ans[q[i].nd] += que(1,1,n,1,q[i].st.nd-1);
	}

	t = n;

	memset(St,0,sizeof St);

	for(i=m-1 ; i>=0 ; i--){
		while(t>=1 and c[t].st > q[i].st.st){
			upd(1,1,n,c[t].nd,R[c[t].nd]);
			t--;
		}
		ans[q[i].nd] += que(1,1,n,q[i].st.nd+1,n) + 1;

		if(all[q[i].st.nd])
			ans[q[i].nd] = max(ans[q[i].nd],s-1);
		else
			ans[q[i].nd] = max(ans[q[i].nd],s);
	}

	for(i=1 ; i<=m ; i++)
		printf("%d\n",ans[i]);
}
