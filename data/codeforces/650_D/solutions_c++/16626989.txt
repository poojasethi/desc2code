#include <cstdio>
#include <algorithm>
template <typename T> inline void relax(T &a, const T &b){if (a<b) a=b;}
inline unsigned int getuint(){
	char w=getchar();
	while (w<'0'||'9'<w) w=getchar();
	unsigned int ans=0;
	for (;'0'<=w&&w<='9';w=getchar()) ans=ans*10+w-'0';
	return ans;
}
const int MAXN=400005;
int a[MAXN], predp[MAXN], sufdp[MAXN], stack[MAXN], dp[MAXN], dpcnt[MAXN];
struct Query{int id, x, y;} Q[400005];
inline bool operator <(const Query &i, const Query &j){return i.x<j.x;}
int ans[400005];
int main(){
	//freopen("ex.in", "r", stdin);
	int n=getuint(), q=getuint();
	for (int i=1;i<=n;i++) a[i]=getuint();
	stack[0]=0;for (int i=1;i<=n;i++) stack[i]=0x3f3f3f3f;
	for (int i=1;i<=n;i++) stack[(predp[i]=std::lower_bound(stack, stack+n+1, a[i])-stack)--]=a[i];
	stack[0]=-0x3f3f3f3f;for (int i=1;i<=n;i++) stack[i]=0;
	for (int i=n;i;i--) stack[(sufdp[i]=std::lower_bound(stack, stack+n+1, -a[i])-stack)--]=-a[i];
	int maxdp=0;
	for (int i=1;i<=n;i++) relax(maxdp, dp[i]=predp[i]+1+sufdp[i]);
	for (int i=1;i<=n;i++) if (dp[i]==maxdp) dpcnt[predp[i]+1]++;
	for (int i=1;i<=q;i++) Q[Q[i].id=i].x=getuint(), Q[i].y=getuint();
	std::sort(Q+1, Q+q+1);
	stack[0]=0;for (int i=1;i<=n;i++) stack[i]=0x3f3f3f3f;
	for (int i=1, j=1;i<=n;i++){
		for (;j<=q&&i==Q[j].x;j++) ans[Q[j].id]=std::lower_bound(stack, stack+n+1, Q[j].y)-stack;
		stack[predp[i]+1]=a[i];
	}
	stack[0]=-0x3f3f3f3f;for (int i=1;i<=n;i++) stack[i]=0;
	for (int i=n, j=q;i;i--){
		for (;j&&i==Q[j].x;j--) ans[Q[j].id]+=std::lower_bound(stack, stack+n+1, -Q[j].y)-stack;
		stack[sufdp[i]+1]=-a[i];
	}
	for (int i=1;i<=q;i++) relax(--ans[Q[i].id], maxdp-(dp[Q[i].x]==maxdp&&dpcnt[predp[Q[i].x]+1]==1));
	for (int i=1;i<=q;i++) printf("%d\n", ans[i]);
	return 0;
}
