#include <bits/stdc++.h>
#define pii pair < int, int >
#define mkp make_pair
#define v first
#define id second
using namespace std;
const int maxn = 400005;
const int INF = 0x3f3f3f3f;
vector < pii > query[maxn];
int a[maxn], lis[2][maxn], dp[maxn], cnt[maxn], q[maxn], ans[maxn], n;

void solve(int l, int r, int f){
    int sign = f <= 0 ? 1 : -1;
    memset(q, 0x3f, sizeof q);
    q[0] = -INF;
    int val, p;
    for(int i = l; i != r; i += sign){
        for(int j = 0; j < query[i].size(); j++){
            val = sign * query[i][j].v;
            dp[query[i][j].id] += lower_bound(q, q + 1 + n, val) - q;
        }
        int len = lower_bound(q, q + 1 + n, sign * a[i]) - q;
        q[len] = sign * a[i];
        lis[f][i] = len;
    }
}

int main(){
    int m, val, p;
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; i++){
        scanf("%d", &a[i]);
    }
    for(int i = 1; i <= m; i++){
        scanf("%d%d", &p, &val);
        query[p].push_back(mkp(val, i));
    }
    solve(1, n + 1, 0);
    solve(n, 0, 1);
    int maxLen = 0;
    for(int i = 1; i <= n; i++){
        maxLen = max(maxLen, lis[0][i]);
    }
    for(int i = 1; i <= n; i++){
        if(lis[0][i] + lis[1][i] - 1 == maxLen)
            cnt[lis[0][i]]++;
    }
    for(int i = 1; i <= n; i++){
        for(int j = 0; j < query[i].size(); j++){
            int len = maxLen;
            p = query[i][j].id;
            if(lis[0][i] + lis[1][i] - 1 == maxLen && cnt[lis[0][i]] == 1)
                len--;
            ans[p] = max(len, dp[p] - 1);
        }
    }
    for(int i = 1; i <= m; i++) printf("%d\n", ans[i]);
    return 0;
}
