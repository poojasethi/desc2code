#include <bits/stdc++.h>
#define type(x) __typeof(x.begin())
using namespace std;

const int maxn = 400400;

int n,m,h[maxn],ans[maxn],qa[maxn],qb[maxn],seg[maxn<<3],dp[maxn],cnt[maxn],mx[maxn],have[maxn];
map < int , int > zip;
vector < int > query[maxn];
bool used[maxn];

int update( int k , int b , int e , int x , int v ){
	if( b > x or e < x ) return seg[k];
	if( b == e ) return seg[k] = v;
	int m = (b + e) >> 1;
	return seg[k] = max(update(k + k , b , m , x , v) , update(k + k + 1 , m + 1 , e , x , v));
}

int find( int k , int b , int e , int x , int y ){
	if( b > y or e < x ) return 0;
	if( b >= x and e <= y )	return seg[k];
	int m = (b + e) >> 1;
	return max(find(k + k , b , m , x , y) , find(k + k + 1 , m + 1 , e , x , y));
}

int main(){
	
	scanf("%d%d",&n,&m);
	
	for( int i = 1 ; i <= n ; i++ ){
		scanf("%d",&h[i]);
		zip[h[i]] = 1;
	}
	
	for( int i = 1 ; i <= m ; i++ ){
		scanf("%d%d",&qa[i],&qb[i]);
		query[qa[i]].push_back(i);
		zip[qb[i]] = 1;
	}
	
	int max_val = 0;
	for( type(zip) it = zip.begin() ; it != zip.end() ; it++ )
		it -> second = ++max_val;
	
	for( int i = 1 ; i <= n ; i++ )
		h[i] = zip[h[i]];
	
	for( int i = 1 ; i <= m ; i++ )
		qb[i] = zip[qb[i]];
	
	int best = 0;
	
	for( int i = 1 ; i <= n ; i++ ){
		for( int j = 0 ; j < (int)query[i].size() ; j++ )
			ans[query[i][j]] = find(1 , 1 , max_val , 1 , qb[query[i][j]] - 1) + 1;
		dp[i] = find(1 , 1 , max_val , 1 , h[i] - 1) + 1;
		best = max(best , dp[i]);
		update(1 , 1 , max_val , h[i] , dp[i]);
	}
	
	mx[best + 1] = 1e9;
	
	for( int i = n ; i ; i-- )
		if( h[i] < mx[dp[i] + 1] ){
			used[i] = 1;
			cnt[dp[i]]++;
			mx[dp[i]] = max(mx[dp[i]] , h[i]);
		}
	
	for( int i = 1 ; i <= n ; i++ )
		have[i] = used[i] and cnt[dp[i]] == 1;
		
	memset(seg , 0 , sizeof seg);
	
	for( int i = n ; i ; i-- ){
		for( int j = 0 ; j < (int)query[i].size() ; j++ )
			ans[query[i][j]] += find(1 , 1 , max_val , qb[query[i][j]] + 1 , max_val);
		int x = find(1 , 1 , max_val , h[i] + 1 , max_val) + 1;
		update(1 , 1 , max_val , h[i] , x);
	}
	
	for( int i = 1 ; i <= m ; i++ )
		printf("%d\n",max(best - have[qa[i]] , ans[i]));
	
	return 0;
}
