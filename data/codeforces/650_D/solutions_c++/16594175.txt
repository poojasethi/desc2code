#include <bits/stdc++.h>

using namespace std;

#define N 400005

int n, q;
vector <int> ID[N], V[N];
int a[N], pre[N], rlt[N], dis[N];
int bit[N << 1], sto[N << 1], m;

int cmax[N], last[N];

void add(int p, int v) {
	for (int i = p; i <= m; i += i & -i) if (bit[i] < v) bit[i] = v;
}

int calc(int p) {
	int rlt = 0;
	for (int i = p; i; i -= i & -i) if (rlt < bit[i]) rlt = bit[i];
	return rlt;
}

main() {
	scanf("%d %d", &n, &q);
	for (int i = 1; i <= n; i ++) {
		scanf("%d", a + i);
		sto[++ m] = a[i];
	}
	for (int i = 1; i <= q; i ++) {
		int x, y;
		scanf("%d %d", &x, &y);
		sto[++ m] = y;
		V[x].push_back(y);
		ID[x].push_back(i);
	}
	sort(sto + 1, sto + m + 1);
	m = unique(sto + 1, sto + m + 1) - sto - 1;

	int mx = 0;
    for (int i = 1; i <= n; i ++) {
    	a[i] = lower_bound(sto + 1, sto + m + 1, a[i]) - sto;
		add(a[i], dis[i] = calc(a[i] - 1) + 1);
		if (mx < dis[i]) mx = dis[i];
    }
    for (int i = n; i; i --) {
    	int d = dis[i];
		if (d < mx && cmax[d + 1] <= a[i]) pre[i] = mx;
		else {
			if (!last[d]) last[d] = i, pre[i] = mx - 1;
			else pre[i] = pre[last[d]] = mx;
			if (cmax[d] < a[i]) cmax[d] = a[i];
		}
    }

	for (int i = 1; i <= m; i ++) bit[i] = 0;
	for (int i = 1; i <= n; i ++) {
		for (int j = 0; j < V[i].size(); j ++) {
			int id = ID[i][j];
			int b = lower_bound(sto + 1, sto + m + 1, V[i][j]) - sto;
			rlt[id] = 1 + calc(b - 1);
		}
		int p = a[i];
        add(p, 1 + calc(p - 1));
	}

	for (int i = 1; i <= m; i ++) bit[i] = 0;
	for (int i = n; i; i --) {
		for (int j = 0; j < V[i].size(); j ++) {
			int id = ID[i][j];
			int b = lower_bound(sto + 1, sto + m + 1, V[i][j]) - sto;
			rlt[id] += calc(m - b);
			if (rlt[id] < pre[i]) rlt[id] = pre[i];
		}
		int p = m + 1 - a[i];
        add(p, 1 + calc(p - 1));
	}
	for (int i = 1; i <= q; i ++) printf("%d\n", rlt[i]);
}
