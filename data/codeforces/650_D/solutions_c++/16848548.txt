#include<bits/stdc++.h>
using namespace std;
const int maxn=400100;
int l[maxn],r[maxn];
int a[maxn],b[maxn],ans[maxn];
struct node{
    int x,y,id;
}Q[maxn];

int DP1(int n,int q){
    int i,len,pos;
    b[1]=a[1];
    l[1]=1,len=1;
    int tot=1;
    while(Q[tot].x==1&&tot<=q){
        ans[Q[tot].id]=1;
        tot++;
    }
    for(int i=2;i<=n;i++){
        while(Q[tot].x==i&&tot<=q){
            pos=lower_bound(b+1,b+len+1,Q[tot].y)-b;
            ans[Q[tot].id]=pos;
            tot++;
        }
        if(a[i]>b[len])
            len=len+1,l[i]=len,b[len]=a[i];
        else{
            pos=lower_bound(b+1,b+len+1,a[i])-b;
            b[pos]=a[i],l[i]=pos;
        }
    }
    return len;
}

void DP2(int n,int q){
    int i,len,pos;
    b[1]=-a[n];
    r[n]=0,len=1;
    int tot=q;
    while(Q[tot].x==n&&tot>=1)
        tot--;
    for(int i=n-1;i>=1;i--){
        while(Q[tot].x==i&&tot>=1){
            pos=lower_bound(b+1,b+n+1,-Q[tot].y)-b;//�ҵ���һ��С�ڵ�������
            ans[Q[tot].id]+=pos-1;
            tot--;
        }
        if(-a[i]>b[len])
            len=len+1,r[i]=len-1,b[len]=-a[i];
        else{
            pos=lower_bound(b+1,b+len+1,-a[i])-b;
            b[pos]=-a[i],r[i]=pos-1;
        }
    }
}

int C[maxn],ok[maxn];
bool cmp(node x,node y){
    return x.x<y.x;
}
int line[maxn];
int main(){
    int n,q;
    scanf("%d%d",&n,&q);
    for(int i=1;i<=n;i++)
        scanf("%d",&a[i]);
    for(int i=1;i<=q;i++){
        scanf("%d%d",&Q[i].x,&Q[i].y);
        line[i]=Q[i].x;
        Q[i].id=i;
    }
    sort(Q+1,Q+q+1,cmp);
    int LISLEN=DP1(n,q);
    DP2(n,q);
    for(int i=1;i<=n;i++){
        if(l[i]+r[i]!=LISLEN)
            continue;
        C[l[i]]++;
    }
    for(int i=1;i<=n;i++){
        if(l[i]+r[i]!=LISLEN)
            continue;
        ok[i]=(C[l[i]]==1);
    }
//    for(int i=1;i<=n;i++)
//        printf("%d %d %d\n",l[i],r[i],ok[i]);
    for(int i=1;i<=q;i++)
        printf("%d\n",max(ans[i],LISLEN-ok[line[i]]));
    return 0;
}
