#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

const int MAXN = 400005,INF = int(1e9);

typedef pair<int,int> P;

struct Node
{
	int l,r,mx;
}T[MAXN * 50];

bool Need[MAXN],Type;
vector<P> Lk[MAXN];
int Ord[MAXN],A[MAXN],F[MAXN],Must[MAXN],Ans[MAXN],N,M,Root,cnt;

int Query(int l,int r,int i,int j,int jd)
{
	if (j < l || i > r || !jd) return 0;
	if (i <= l && r <= j) return T[jd].mx;
	int mid = l + r >> 1;
	return max(Query(l,mid,i,j,T[jd].l),Query(mid + 1,r,i,j,T[jd].r));
}

int Insert(int l,int r,int p,int v,int jd)
{
	int nt = jd;
	if (!Type || !nt) nt = ++ cnt;
	T[nt] = T[jd];
	T[nt].mx = max(T[nt].mx,v);
	if (l == r) return nt;
	int mid = l + r >> 1;
	if (p <= mid) T[nt].l = Insert(l,mid,p,v,T[jd].l); else
		T[nt].r = Insert(mid + 1,r,p,v,T[jd].r);
	return nt;
}

int main()
{
	//freopen("data.in","r",stdin),freopen("data.out","w",stdout);
	scanf("%d%d", &N, &M);
	for(int i = 1;i <= N;i ++) scanf("%d", &A[i]);
	int Len = 0;
	for(int i = 1;i <= N;i ++)
	{
		Ord[i] = Ord[i - 1];
		F[i] = Query(1,INF,1,A[i] - 1,Ord[i]) + 1;
		Len = max(Len,F[i]);
		Ord[i] = Insert(1,INF,A[i],F[i],Ord[i]);
	}
	for(int i = 1;i <= M;i ++)
	{
		int u,v;
		scanf("%d%d", &u, &v);
		Lk[u].push_back(P(v,i));
	}
	int lc = cnt;
	Type = 1;
	for(int i = N;i;i --)
	{
		int f = Query(1,INF,A[i] + 1,INF,Root) + 1;
		if (f + F[i] - 1 == Len) Must[F[i]] ++,Need[i] = 1;
		Root = Insert(1,INF,A[i],f,Root);
	}
	for(int i = lc + 1;i <= cnt;i ++) T[i].mx = T[i].l = T[i].r = 0;
	cnt = lc;
	Root = 0;
	for(int i = N;i;i --)
	{
		int f = Query(1,INF,A[i] + 1,INF,Root) + 1;
		for(int j = 0;j < Lk[i].size();j ++)
		{
			int val = Lk[i][j].first,ref = Lk[i][j].second;
			Ans[ref] = max(Len - 1,Query(1,INF,1,val - 1,Ord[i - 1]) + Query(1,INF,val + 1,INF,Root) + 1);
			if (!Need[i] || Must[F[i]] > 1) Ans[ref] = max(Ans[ref],Len);
		}
		Root = Insert(1,INF,A[i],f,Root);
	}
	for(int i = 1;i <= M;i ++) printf("%d\n", Ans[i]);
	return 0;
}
