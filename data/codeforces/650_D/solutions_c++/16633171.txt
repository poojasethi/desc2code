#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<vector>
#include<utility>
#include<assert.h>
#define fi first
#define se second
#define rep(i,a,b) for(int i=a;i<=b;++i)
#define erp(i,a,b) for(int i=a;i>=b;--i)
using namespace std;
const int MAXN = 400005;
typedef pair<int,int> pii;
typedef unsigned int u32;
typedef vector<pii>::iterator v_it;
inline void gmax(int&a, int b) { if(a<b) a=b; }

template<typename T>
void get(T&r) {
	char c, f=0; r=0;
	do {c=getchar();if(c=='-')f=1;} while(c<'0'||c>'9');
	do r=r*10+c-'0',c=getchar(); while(c>='0'&&c<='9');
	if (f) r = -r;
}

int N, M, h[MAXN], hi[MAXN], nhi[MAXN];
int dat[MAXN*4], dn;
int idx(int x) { return lower_bound(dat+1, dat+dn+1, x)-dat; }
vector<pii> task[MAXN];
int c[MAXN*4], lef[MAXN], rig[MAXN], f[MAXN], g[MAXN], cnt[MAXN], pp[MAXN];
int mxlen;
bool must[MAXN];

void up(int i, int x)
{
	for (; i<=dn; i+=i&-i) gmax(c[i], x);
}
int qmax(int i)
{
	int res = 0;
	for (; i>0; i-=i&-i) gmax(res, c[i]);
	return res;
}

void work1() //classic lis
{
	rep(i, 1, N) f[i] = qmax(hi[i]-1)+1, up(hi[i], f[i]);
	erp(i, N, 1) g[i] = qmax(nhi[i]-1)+1, up(nhi[i], g[i]);
	rep(i, 1, N) gmax(mxlen, f[i]);
	rep(i, 1, N) if (f[i]+g[i]-1==mxlen) ++cnt[f[i]];
	rep(i, 1, N) if (f[i]+g[i]-1==mxlen && cnt[f[i]]==1) must[i] = 1;
}

void work2()
{
	memset(c, 0, sizeof c);
	rep(i, 1, N)
	{
		for (v_it p = task[i].begin(); p!=task[i].end(); p++)
			lef[p->se] = qmax(idx(p->fi) - 1);
		up(hi[i], f[i]);
	}
	memset(c, 0, sizeof c);
	erp(i, N, 1)
	{
		for (v_it p = task[i].begin(); p!=task[i].end(); p++)
			rig[p->se] = qmax(idx(- p->fi) - 1);
		up(nhi[i], g[i]);
	}
}

int main()
{
	get(N), get(M);
	int t1, t2;
	rep(i, 1, N) get(h[i]), dat[++dn] = h[i], dat[++dn] = -h[i];
	rep(i, 1, M)
	{
		get(t1), get(t2);
		pp[i] = t1;
		task[t1].push_back(pii(t2, i));
		dat[++dn] = t2;
		dat[++dn] = -t2;
	}
	sort(dat+1, dat+dn+1);
	dn = unique(dat+1, dat+dn+1)-dat-1;
	rep(i, 1, N) hi[i] = idx(h[i]), nhi[i] = idx(-h[i]);
	work1();
	work2();
	int ans;
	rep(i, 1, M)
	{
		ans = max(mxlen-must[pp[i]], lef[i]+rig[i]+1);
		printf("%d\n", ans);
	}
	return 0;
}

	  		 		 	 				   			 		    		