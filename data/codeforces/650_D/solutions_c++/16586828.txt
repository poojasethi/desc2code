#include<bits/stdc++.h>
#define M 1000000
#define fi first
#define se second
using namespace std;
typedef pair < int , int > ii;
int bit[M + 5] , LIS , delta[M + 5] , f[M + 5] , g[M + 5] , n , m , a[M + 5] , b[M + 5] , ff[M + 5] , gg[M + 5] , h[M + 5];
vector < int > query[M + 5] , l[M + 5];
vector < ii  > ret;
void maximize(int &a,int b){
	if(a < b)	a = b;
}
void upd(int x,int v){
	for(; x <= M ; x += x&(-x))		maximize(bit[x] , v);
}
int get(int x){
	int ret = 0;
	for( ; x > 0 ; x-=x&(-x))	maximize(ret , bit[x]);
	return ret;
}
void input(){
	scanf("%d %d",&n,&m);
	for(int i = 1 ; i <= n ; i++)	scanf("%d",&h[i]);
	for(int i = 1 ; i <= m ; i++){
		scanf("%d %d",&a[i],&b[i]);
		query[a[i]].push_back(i);
	}
}
void compress(){
	for(int i = 1 ; i <= n ; i++)	ret.push_back(ii(h[i] , i));
	for(int i = 1 ; i <= m ; i++)	ret.push_back(ii(b[i] , n + i));
	sort(ret.begin() , ret.end());
	int c = 0;
	for(int i = 0 ; i < ret.size() ; i++){
		if(i == 0 || ret[i].fi != ret[i - 1].fi)	c++;
		if(ret[i].se <= n)	h[ret[i].se] = c;
		else b[ret[i].se - n] = c;
	}
}
void solve(){
	for(int i = 1 ; i <= n ; i++){
		f[i] = get(h[i] - 1) + 1;
		maximize(LIS , f[i]);
		for(int j = 0 ; j < query[i].size() ; j++)	ff[query[i][j]] = get(b[query[i][j]] - 1) + 1;
		upd(h[i] , f[i]); 	
	}
	memset(bit , 0 , sizeof bit);
	for(int i = n ; i >= 1 ; i--){
		g[i] = get(M - h[i]) + 1;
		for(int j = 0 ; j < query[i].size() ; j++)	gg[query[i][j]] =  get(M - b[query[i][j]]) + 1;
		upd(M - h[i] + 1, g[i]);
	}
	for(int i = 1 ; i <= n ; i++)	if(f[i] + g[i] - 1 == LIS)	l[f[i]].push_back(i);	
	for(int i = 1 ; i <= LIS ; i++)
		if(l[i].size() == 1)	delta[l[i].back()] = 1;
	for(int i = 1 ; i <= m ; i++)	printf("%d\n",max(ff[i] + gg[i] - 1 , LIS - delta[a[i]]));
}
main(){
//	freopen("test.inp","r",stdin);
	input();
	compress();
	solve();
}