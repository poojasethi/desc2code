#include <cstdio>
#include <algorithm>
#include <vector>
#define N 400005
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
#define fe(a, b, c) for(int a = (b); a; a = c[a])
using namespace std;

int n, m, h[N], a[N], b[N], c[N + N], p, bit[N], ans[N], l[N], r[N], best;
vector<int> u[N + N], q[N + N], hv[N];
bool all[N];

bool cmp(int x, int y){
	return a[x] < a[y];
}

int get(int x){
	int ret = 0;
	for(int i = x; i; i -= i & -i) ret = max(ret, bit[i]);
	return ret;
}

int upd(int x, int y){
	for(int i = x; i <= n; i += i & -i) bit[i] = max(bit[i], y);
}

int main(){
	scanf("%d %d", &n, &m);
	FI(i, 1, n){
		scanf("%d", &h[i]);
		c[p++] = h[i];
	}
	
	fi(i, 0, m){
		scanf("%d %d", &a[i], &b[i]);
		c[p++] = b[i];
		ans[i] = 1;
	}
	
	sort(c, c + p);
	p = unique(c, c + p) - c;
	
	FI(i, 1, n){
		h[i] = lower_bound(c, c + p, h[i]) - c;
		u[h[i]].push_back(i);
	}
	
	fi(i, 0, m){
		b[i] = lower_bound(c, c + p, b[i]) - c;
		q[b[i]].push_back(i);
	}
	
	FI(i, 1, n) bit[i] = 0;
	fi(i, 0, p){ // increase
		fi(j, 0, q[i].size()){
			int x = q[i][j];
			ans[x] += get(a[x] - 1);
		}
		
		if(u[i].size()) FD(j, u[i].size() - 1, 0){
			int x = l[u[i][j]] = get(u[i][j] - 1);
			upd(u[i][j], x + 1);
		}
	}
	
	FI(i, 1, n) bit[i] = 0;
	FD(i, p - 1, 0){ // increase
		fi(j, 0, q[i].size()){
			int x = q[i][j];
			ans[x] += get(n - a[x]);
		}
		
		fi(j, 0, u[i].size()){
			int x = r[u[i][j]] = get(n - u[i][j]);
			upd(n - u[i][j] + 1, x + 1);
		}
	}
	
	FI(i, 1, n) best = max(l[i] + r[i] + 1, best);
	FI(i, 1, n) if(best == l[i] + r[i] + 1)
		hv[l[i]].push_back(i);
	
	fi(i, 0, n) if(hv[i].size() == 1) all[hv[i][0]] = 1;
	
	fi(i, 0, m){
		ans[i] = max(ans[i], best - all[a[i]]);
		printf("%d\n", ans[i]);
	}
	scanf("\n");
}
