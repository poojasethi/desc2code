#include <cstdio>
#include <iostream>
#include <cstring>
#include <map> 
#include <algorithm>
using namespace std;
struct ASK
{
	int a,b,pre,suc,num;
} ask[800010];
int tot,Tot,n,m,maxlen,ans[800010],s[800020],jud[800010],pre[800010],suc[800010],f[800010],h[800010];
map <int,int> hash;
bool camp(ASK a,ASK b)
{
	 return a.a<b.a;
}
int lowbit(int x)
{
	return x & (-x); 
}
int find(int x)
{
	int k=x;
	int ans=0;
	while(k)
	{
		ans=max(f[k],ans);
		k-=lowbit(k);
	}
	return ans;
} 
int Find(int x)
{
	int k=x;
	int ans=0;
	while(k <= Tot)
	{
		ans=max(f[k],ans);
		k+=lowbit(k);
	}
	return ans;
} 
void insert(int x,int v)
{
	int k=x;
	while(k <= Tot)
	{
		f[k]=max(f[k],v);
		k+=lowbit(k);
	}
}
void Insert(int x,int v)
{
	int k=x;
	while(k)
	{
		f[k]=max(f[k],v);
		k-=lowbit(k);
	}
}
void read()
{
	cin.sync_with_stdio(false);
	cin>>n>>m;
	for(int i=1;i <= n;i++)
	{
		cin>>h[i];
		s[++tot]=h[i];
	}
	for(int i=1;i <= m;i++)
	{
		cin>>ask[i].a>>ask[i].b;
		ask[i].num=i;
		s[++tot]=ask[i].b; 
	}
	sort(s+1,s+1+tot);
	for(int i=1;i <= tot;i++)
	 if(s[i] != s[i-1])
	  hash[s[i]]=++Tot;
	for(int i=1;i <= n;i++)
	 h[i]=hash[h[i]];
	for(int i=1;i <= m;i++)
	 ask[i].b=hash[ask[i].b];
}
void deal()
{
	sort(ask+1,ask+m+1,camp);
	int now=0;
	for(int i=1;i <= n;i++)
	{
		pre[i]=find(h[i]-1)+1;
		while(ask[now+1].a == i)
		{
			now++;
			ask[now].pre=find(ask[now].b-1)+1;
		}
		insert(h[i],pre[i]);
	}
	memset(f,0,sizeof(f));
	now=m+1;
	for(int i=n;i >= 1;i--)
	{
		suc[i]=Find(h[i]+1)+1;
		maxlen=max(maxlen,suc[i]);
		while(ask[now-1].a == i)
		{
			now--;
			ask[now].suc=Find(ask[now].b+1)+1;
		} 
		Insert(h[i],suc[i]);
	}
	for(int i=1;i <= n;i++)
	 if(suc[i]+pre[i] == maxlen+1) jud[suc[i]]++;
	for(int i=1;i <= m;i++)
	{
		int ans1=ask[i].suc+ask[i].pre-1;
		int ans2=(suc[ask[i].a]+pre[ask[i].a] != maxlen+1) || (ans2=jud[suc[ask[i].a]] != 1) ? maxlen:maxlen-1;
		ans[ask[i].num]=max(ans1,ans2);
	}
} 
void write()
{
	for(int i=1;i <= m;i++)
	 cout<<ans[i]<<endl;
}
int main()
{
    read();
	deal();
	write();
 } 
