#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <utility>
#include <map>
#include <set>
#include <string>
using namespace std;
#define INF (int(1e9))
#define INFL (LL(1e18))
#define in2(n,m) scanf("%d %d",&n,&m);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define in4(p,q,r,s) scanf("%d %d %d %d",&p,&q,&r,&s);
#define getcx getchar
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
string A,B,C;
string ansA,ansB,ansC;

bool visit[50][8][8][8][10][2][2];
bool memo[50][8][8][8][10][2][2];

bool func(int len,int posA,int posB,int posC,int carry,int stateA,int stateB)
{
    //printf("len is %d pos A B C is %d %d %d carry is %d and states are %d %d %d\n",len,posA,posB,posC,carry,stateA,stateB);
    if(len<0)
    {
        return false;
    }
    if(len==0)
    {
        if(posA==A.size() && posB==B.size() && posC==C.size() && carry==0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    if(visit[len][posA][posB][posC][carry][stateA][stateB]==true)
    {
        return memo[len][posA][posB][posC][carry][stateA][stateB];
    }
    visit[len][posA][posB][posC][carry][stateA][stateB]=true;


    for(int i=0; i<=9; i++)
    {
        for(int j=0; j<=9; j++)
        {
            for(int k=0; k<=9; k++)
            {
                if( (i+j+k)/10!=carry )
                {
                    continue;
                }

                int diff=0;
                if(stateA==0 && i==0)
                {
                        diff++;
                }
                if(stateB==0 && j==0)
                {
                    diff++;
                }

                int newA,newB,newC;
                if(posA<A.size() && A[posA]-48==i)
                {
                    newA=posA+1;
                }
                else
                {
                    newA=posA;
                }
                if(posB<B.size() && B[posB]-48==j)
                {
                    newB=posB+1;
                }
                else
                {
                    newB=posB;
                }
                int l=(i+j+k)%10;
                if(posC<C.size() && C[posC]-48==l)
                {
                    newC=posC+1;
                }
                else
                {
                    newC=posC;
                }

                int newStateA,newStateB;
                if(stateA==1 || i>0)
                {
                    newStateA=1;
                }
                else
                {
                    newStateA=0;
                }
                if(stateB==1 || j>0)
                {
                    newStateB=1;
                }
                else
                {
                    newStateB=0;
                }

                bool fnd=func(len-3+diff,newA,newB,newC,k,newStateA,newStateB);
                if(fnd==true)
                {
                    //printf("true len is %d i j and k are %d %d %d\n",len,i,j,k);

                    char ch;

                    ch=i+48;
                    ansA+=ch;

                    ch=j+48;
                    ansB+=ch;

                    ch=l+48;
                    ansC+=ch;

                    return true;
                }
            }
        }
    }
    memo[len][posA][posB][posC][carry][stateA][stateB]=false;
    return false;
}
string restore(string s)
{
    int low=0;
    int up=s.size()-1;
    while(low<up)
    {
        char tmp=s[low];
        s[low]=s[up];
        s[up]=tmp;

        low++;
        up--;
    }
    string ans="";
    for(int i=0; i<s.size(); i++)
    {
        if(s[i]>48)
        {
            for(int j=i; j<s.size(); j++)
            {
                ans+=s[j];
            }
            break;
        }
    }
    return ans;
}
int main()
{
    string s;
    cin>>s;

    int pos=0;
    string str="";
    while(1)
    {
        if(pos==s.size())
        {
            C=str;
            break;
        }
        if(s[pos]=='+')
        {
            A=str;
            str="";

            pos++;
            continue;
        }
        if(s[pos]=='=')
        {
            B=str;
            str="";

            pos++;
            continue;
        }
        str+=s[pos];
        pos++;
    }
    //cout<<"Input is :"<<" A is "<<A<<" B is "<<B<<" C is "<<C<<"\n";

    int len=A.size() + B.size() + C.size();

    int ansLen,ansPosA,ansPosB,ansPosC,ansCarry,ansStateA,ansStateB;

    ansA="";
    ansB="";
    ansC="";
    while(1)
    {
        //printf("len is %d\n",len);
        bool fnd=false;
        for(int i=0; i<=9; i++)
        {
            for(int j=0; j<=9; j++)
            {
                for(int k=0; k<=9; k++)
                {
                    if(i==0 && j==0)
                    {
                        continue;
                    }

                    int newA,newB,newC;
                    if(A[0]-48==i)
                    {
                        newA=1;
                    }
                    else
                    {
                        newA=0;
                    }
                    if(B[0]-48==j)
                    {
                        newB=1;
                    }
                    else
                    {
                        newB=0;
                    }
                    int curr=(i+j+k);
                    int cnt=2;
                    if(curr<10)
                    {
                        cnt++;
                        if(C[0]-48==curr%10)
                        {
                            newC=1;
                        }
                        else
                        {
                            newC=0;
                        }
                    }
                    else
                    {
                        cnt+=2;
                        if(C.size()>1)
                        {
                            if(C[0]-48==curr/10 && C[1]-48==curr%10)
                            {
                                newC=2;
                            }
                            else if(C[0]-48==curr/10 || C[0]-48==curr%10)
                            {
                                newC=1;
                            }
                            else
                            {
                                newC=0;
                            }
                        }
                        else if(C.size()==1)
                        {
                            if(C[0]-48==curr/10)
                            {
                                newC=1;
                            }
                            else
                            {
                                newC=0;
                            }
                        }
                    }
                    int newStateA,newStateB;
                    if(i>0)
                    {
                        newStateA=1;
                    }
                    else
                    {
                        newStateA=0;
                    }
                    if(j>0)
                    {
                        newStateB=1;
                    }
                    else
                    {
                        newStateB=0;
                    }

                    int diff=0;
                    if(newStateA==0)
                    {
                        diff++;
                    }
                    if(newStateB==0)
                    {
                        diff++;
                    }
                    fnd = func(len-cnt+diff,newA,newB,newC,k,newStateA,newStateB);
                    if(fnd==true)
                    {
                        ansLen=len-3+diff;
                        ansPosA=newA;
                        ansPosB=newB;
                        ansPosC=newC;
                        ansCarry=k;
                        ansStateA=newStateA;
                        ansStateB=newStateB;

                        //printf("true len is %d i j k are %d %d %d\n",len,i,j,k);

                        char ch;

                        ch=i+48;
                        ansA+=ch;

                        ch=j+48;
                        ansB+=ch;

                        int curr=(i+j+k);
                        //printf("curr is %d\n",curr);
                        if(curr<10)
                        {
                            ch=curr+48;
                            ansC+=ch;
                        }
                        else if(curr>=10)
                        {
                            ch=curr%10+48;
                            ansC+=ch;

                            ch=curr/10+48;
                            ansC+=ch;
                        }
                        break;
                    }
                }
                if(fnd==true)
                    break;
            }
            if(fnd==true)
                break;
        }
        if(fnd==true)
            break;
        len++;
    }
    string x=restore(ansA);
    string y=restore(ansB);
    string z=restore(ansC);

    cout<<x<<"+"<<y<<"="<<z<<"\n";

    return 0;
}
