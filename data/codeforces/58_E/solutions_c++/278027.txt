#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <ctime> 

using namespace std;

struct rec
{
	int d;
	int j,k,l,o;
	int x,y;
};

rec d[20][10][10][10][2];
int n1,n2,n3;
string s1,s2,s3;

void getsted(int f,string s,int l,int p,int &st,int &ed,int i)
{
	if (i>=l)
	{
		st=0;ed=0;
	}
	else if (f==0)
	{
		st=0;ed=9;
		if (p+1==l) st=1;
	}
	else
	{
		st=s[p]-'0';ed=s[p]-'0';
	}
}

int solve(int x,int y,int z)
{
	int i,j,k,l,o,n,p,q,st1,ed1,st2,ed2,st3,ed3,jin,rem,jj,kk,ll,tmp;
	n=z;
	if (x>n) return 0;
	if (y>n) return 0;
	memset(d,0,sizeof(d));
	d[0][0][0][0][0].d=1;
	for (i=0;i<n;i++)
	{
		for (j=0;j<=n1;j++)
			for (k=0;k<=n2;k++)
				for (l=0;l<=n3;l++)
					if ((d[i][j][k][l][0].d!=0)||(d[i][j][k][l][1].d!=0))
					{
						for (o=0;o<(1<<3);o++)
						{
							if (((j==n1)||(i>=x))&&((o&1)!=0)) continue;
							if (((k==n2)||(i>=y))&&((o&2)!=0)) continue;
							if ((l==n3)&&((o&4)!=0)) continue;
							jj=j;kk=k;ll=l;
							if ((o&1)!=0) jj++;
							if ((o&2)!=0) kk++;
							if ((o&4)!=0) ll++;
							getsted(o&1,s1,x,j,st1,ed1,i);
							getsted(o&2,s2,y,k,st2,ed2,i);
							getsted(o&4,s3,z,l,st3,ed3,i);
							for (p=st1;p<=ed1;p++)
							{
								if ((d[i+1][jj][kk][ll][0].d!=0)&&(d[i+1][jj][kk][ll][1].d!=0)) break;
								for (q=st2;q<=ed2;q++)
								{
									if ((d[i+1][jj][kk][ll][0].d!=0)&&(d[i+1][jj][kk][ll][1].d!=0)) break;
									tmp=p+q;
									if (d[i][j][k][l][0].d!=0)
									{
										if (tmp>=10)
										{
											jin=1;
											rem=tmp-10;
										}
										else
										{
											jin=0;
											rem=tmp;
										}
										if ((st3<=rem)&&(rem<=ed3))
										{
											d[i+1][jj][kk][ll][jin].d=-1;
											d[i+1][jj][kk][ll][jin].x=p;
											d[i+1][jj][kk][ll][jin].y=q;
											d[i+1][jj][kk][ll][jin].j=j;
											d[i+1][jj][kk][ll][jin].k=k;
											d[i+1][jj][kk][ll][jin].l=l;
										}
									}
									if (d[i][j][k][l][1].d!=0)
									{
										tmp++;
										if (tmp>=10)
										{
											jin=1;
											rem=tmp-10;
										}
										else
										{
											jin=0;
											rem=tmp;
										}
										if ((st3<=rem)&&(rem<=ed3))
										{
											d[i+1][jj][kk][ll][jin].d=1;
											d[i+1][jj][kk][ll][jin].x=p;
											d[i+1][jj][kk][ll][jin].y=q;
											d[i+1][jj][kk][ll][jin].j=j;
											d[i+1][jj][kk][ll][jin].k=k;
											d[i+1][jj][kk][ll][jin].l=l;
										}
									}
								}
							}
						}
					}
	}
	if (d[n][n1][n2][n3][0].d==0) return 0;
	vector<int> ans1,ans2,ans3;
	rec r;
	ans1.clear();
	ans2.clear();
	ans3.clear();
	i=n;j=n1;k=n2;l=n3;o=0;
	while (i>0)
	{
		r=d[i][j][k][l][o];
		if (i-1<x) ans1.push_back(r.x);
		if (i-1<y) ans2.push_back(r.y);
		tmp=r.x+r.y;
		if (r.d==1) tmp++;
		tmp%=10;
		ans3.push_back(tmp);
		i--;
		j=r.j;
		k=r.k;
		l=r.l;
		if (r.d==-1) o=0;
			else o=1;
	}
	for (i=0;i<ans1.size();i++) printf("%d",ans1[i]);
	printf("+");
	for (i=0;i<ans2.size();i++) printf("%d",ans2[i]);
	printf("=");
	for (i=0;i<ans3.size();i++) printf("%d",ans3[i]);
	printf("\n");
	return 1;
}

int main()
{
	//freopen("pa.in","r",stdin);
	char s[1000];
	int i,j,k,l,tot,ans;
	string ss;
	scanf("%s",s);
	ss=s;
	n1=ss.find_first_of('+');
	s1=ss.substr(0,n1);
	ss.erase(0,n1+1);
	n2=ss.find_first_of('=');
	s2=ss.substr(0,n2);
	ss.erase(0,n2+1);
	n3=ss.length();
	s3=ss;
	reverse(s1.begin(),s1.end());
	reverse(s2.begin(),s2.end());
	reverse(s3.begin(),s3.end());
	for (ans=0;;ans++)
	{
		tot=n1+n2+n3+ans;
		for (i=n1;i+n2+n3<=tot;i++)
		{
			for (j=n2;i+j+n3<=tot;j++)
			{
				k=tot-i-j-n3;
				if (solve(i,j,k)==1)
				{
					return 0;
				}
			}
		}
	}
	return 0;
}
