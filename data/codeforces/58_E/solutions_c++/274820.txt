#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#define PB push_back
#define MP make_pair
typedef long long LL;
using namespace std;

LL ansa, ansb;
int ansL = 100;

LL Add(LL a, LL b, int pos) {
    while (pos > 0) {
        b *= 10;
        pos --;
    }
    return a + b;
}

int Len(LL a) {
    int res = 0;
    while (a > 0) {
        res ++;
        a/=10;
    }
    return res;
}

int Dfs(LL a, LL b, LL c, LL nowa, LL nowb, int cp, int L, int pos) {
    if (ansL <= L || L > 12) return 0;

    if (a==0 && b==0 && c==0 && cp==0) {
        ansa = nowa;
        ansb = nowb;
        ansL = L;
        return 0;
    }
    if (c == 0) {
        Dfs(0, 0, 0, Add(nowa, a, pos), Add(nowb, b, pos), 0, L + Len(a + b + cp), pos);
        return 0;
    }
    if (a % 10 + b % 10 + cp == c % 10) {
        Dfs(a / 10, b / 10, c / 10, Add(nowa, a % 10, pos), Add(nowb, b % 10, pos), 0, L, pos + 1);
    } else if (a % 10 + b % 10 + cp == c % 10 + 10) {
        Dfs(a / 10, b/10, c/10, Add(nowa, a % 10, pos), Add(nowb, b % 10, pos), 1, L, pos + 1);
    }
    
    if (a % 10 != (c+10-b%10-cp)%10) {
        Dfs(a*10+(c+10-b%10-cp)%10, b, c, nowa, nowb, cp, L+1, pos);
    }
    if (b % 10 != (c+10-a%10-cp)%10) {
        Dfs(a, b*10+(c+10-a%10-cp)%10, c, nowa, nowb, cp, L+1, pos);
    }
    if (c % 10 != (a+b+cp)%10) {
        Dfs(a, b, c*10+(a+b+cp)%10, nowa, nowb, cp, L+1, pos);
    }
    return 0;
}

int main() {

//    freopen("in", "r", stdin);
    LL a, b, c;
    char tmp;
    cin >> a >> tmp >> b >> tmp >> c;
    Dfs(a, b, c, 0, 0, 0, 0, 0);
    cout << ansa << "+" << ansb << "=" << ansa+ansb << endl;
//    cout << ansL << endl;
//    cout << Len(ansa) + Len(ansb) + Len(ansa+ansb) - Len(a) - Len(b) - Len(c) << endl;
    return 0;
}