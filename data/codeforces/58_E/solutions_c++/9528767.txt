#include<iostream>
#include<algorithm>
#include<cstring>
#include<vector>

#define SZ(c) int((c).size())
#define REP(I, N) for(int I=0; I<N; I++)
#define WAIT cout<<flush, system("PAUSE")
using namespace std;
#define MAX 30
const int oo = 1e9;

int NA, NB, NC, sol;
string s, a, b, c;
int A[MAX], B[MAX], C[MAX];

int dp[MAX][MAX][MAX][2][2][2][2];
vector<int> prev[MAX][MAX][MAX][2][2][2][2];

void create(int ai, int bi, int ci, int nc, int af, int bf, int cf){
   if (ai==0&&bi==0&&ci==0&&nc==0&&af==0&&bf==0&&cf==0){
      a=b=c="";
      return;
   }
   vector<int> tmp=prev[ai][bi][ci][nc][af][bf][cf];
   create(tmp[0], tmp[1], tmp[2], tmp[3], tmp[4], tmp[5], tmp[6]);
   if (!tmp[4]) a=string(1, tmp[7]+'0')+a;
   if (!tmp[5]) b=string(1, tmp[8]+'0')+b;
   if (!tmp[6]) c=string(1, tmp[9]+'0')+c;
   //cout << tmp[4] << " " << tmp[5] << " " << tmp[6] << endl;
   //cout << a << " " << b << " " << c << endl;
}

int main(){
   ios_base::sync_with_stdio(0);
   cin.tie(0);
   

   cin >> s;
   a = s.substr(0, s.find("+"));
   s = s.substr(s.find("+")+1);
   b = s.substr(0, s.find("="));
   s = s.substr(s.find("=")+1);
   c = s;
   //cout << a << " " << b << " " << c << endl;
   NA=SZ(a);
   NB=SZ(b);
   NC=SZ(c);
   REP(I, NA) A[I]=a[NA-I-1]-'0';
   REP(I, NB) B[I]=b[NB-I-1]-'0';
   REP(I, NC) C[I]=c[NC-I-1]-'0';
   //cout << A << " " << B << " " << C << endl;
   
   fill((int*)dp, (int*)dp+MAX*MAX*MAX*2*2*2*2, oo);
   dp[0][0][0][0][0][0][0]=0;
   REP(ai, NA+1) REP(bi, NB+1) REP(ci, NC+1) REP(c, 2) REP(af, 2) REP(bf, 2) REP(cf, 2){
      if (dp[ai][bi][ci][c][af][bf][cf]==oo)
         continue;
         
      //cout<<ai<<" "<<bi<<" "<<ci<<" "<<c<<" "<<af<<" "<<bf<<" "<<cf<<"-->"<<dp[ai][bi][ci][c][af][bf][cf]<<endl;
      REP(ad, 10) REP(bd, 10){
         if (ad&&af)continue;
         if (bd&&bf)continue;
         int cd = (ad+bd+c)%10;
         int nc = (ad+bd+c)/10;
         if ((cd+nc)&&cf)continue;
         
         int ai2 = ai;
         if (ai<NA && A[ai]==ad) ai2++;
         int bi2 = bi;
         if (bi<NB && B[bi]==bd) bi2++;
         int ci2 = ci;
         if (ci<NC && C[ci]==cd) ci2++;
         
         int xtra = 3-af-bf-cf;
         
         for(int af2=af; af2<2; af2++)
         for(int bf2=bf; bf2<2; bf2++)
         for(int cf2=cf; cf2<2; cf2++){
            if (af2&&ai2<NA)continue;
            if (bf2&&bi2<NB)continue;
            if (cf2&&ci2<NC)continue;
         
            if (dp[ai2][bi2][ci2][nc][af2][bf2][cf2]>dp[ai][bi][ci][c][af][bf][cf]+xtra){
               dp[ai2][bi2][ci2][nc][af2][bf2][cf2] = dp[ai][bi][ci][c][af][bf][cf] + xtra;
               int tmp[] = {ai, bi, ci, c, af, bf, cf, ad, bd, cd};
               prev[ai2][bi2][ci2][nc][af2][bf2][cf2] = vector<int>(tmp, tmp+10);
            }
         }         
      }
   }   
   //cout << dp[NA][NB][NC][0][1][1][1] << endl;
   create(NA, NB, NC, 0, 1, 1, 1);
   cout << a << "+" << b << "=" << c << endl;
   //WAIT;
}



/*Input

2+4=5

Output

21+4=25

Input

1+1=3

Output

1+31=32

Input

1+1=2

Output

1+1=2
*/




















