#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <bitset>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)(v).size())


string str,sa,sb,sc;
bool dp[30][2][20][20][20];
struct _before{
	int pos,carry,a,b,c;
};
struct _ans{
	int a,b,c;
};
_before before[30][2][20][20][20];
_ans ans[30][2][20][20][20];

bool cal(li la,li lb,li lc){
	rep(i,30)rep(j,2)rep(k,20)rep(l,20)rep(m,20) dp[i][j][k][l][m]=false;
	dp[0][0][0][0][0]=true;
	li maxi=max(sz(sa)+la,sz(sb)+lb);
	li longest=max(maxi,sz(sc)+lc);
	if(sz(sc)+lc!=maxi && sz(sc)+lc!=maxi+1) return false;
	{
		rep(pos,longest)rep(carry,2)
		rep(a,min(pos+1,la+1))rep(b,min(pos+1,lb+1))rep(c,min(pos+1,lc+1)){
			if(!dp[pos][carry][a][b][c]) continue;
			if(sz(sa)-1-(pos-a)<-1 && la!=a) continue;
			if(sz(sb)-1-(pos-b)<-1 && lb!=b) continue;
			li na=(0<=sz(sa)-1-(pos-a))?(sa[sz(sa)-1-(pos-a)]-'0'):0;
			li nb=(0<=sz(sb)-1-(pos-b))?(sb[sz(sb)-1-(pos-b)]-'0'):0;
			li nc=(0<=sz(sc)-1-(pos-c))?(sc[sz(sc)-1-(pos-c)]-'0'):0;
			{
				dp[pos+1][0][a+1][b+1][c]=true;
				before[pos+1][0][a+1][b+1][c]=(_before){pos,carry,a,b,c};
				ans[pos+1][0][a+1][b+1][c]=(_ans){0,nc,nc};
			}
			if(nc<9){
				dp[pos+1][1][a+1][b+1][c]=true;
				before[pos+1][1][a+1][b+1][c]=(_before){pos,carry,a,b,c};
				ans[pos+1][1][a+1][b+1][c]=(_ans){9,nc+1,nc};
			}
			if(na+carry<=nc){
				dp[pos+1][0][a][b+1][c]=true;
				before[pos+1][0][a][b+1][c]=(_before){pos,carry,a,b,c};
				ans[pos+1][0][a][b+1][c]=(_ans){na,nc-na-carry,nc};
			}else{
				dp[pos+1][1][a][b+1][c]=true;
				before[pos+1][1][a][b+1][c]=(_before){pos,carry,a,b,c};
				ans[pos+1][1][a][b+1][c]=(_ans){na,nc+10-na-carry,nc};
			}
			if(nb+carry<=nc){
				dp[pos+1][0][a+1][b][c]=true;
				before[pos+1][0][a+1][b][c]=(_before){pos,carry,a,b,c};
				ans[pos+1][0][a+1][b][c]=(_ans){nc-nb-carry,nb,nc};
			}else{
				dp[pos+1][1][a+1][b][c]=true;
				before[pos+1][1][a+1][b][c]=(_before){pos,carry,a,b,c};
				ans[pos+1][1][a+1][b][c]=(_ans){nc+10-nb-carry,nb,nc};
			}
			if(na!=10 && nb!=10 && nc!=10){
				li sum=na+nb+carry;
				li tmp=0;
				if(10<=sum) tmp++,sum-=10;
				{
					dp[pos+1][tmp][a][b][c+1]=true;
					before[pos+1][tmp][a][b][c+1]=(_before){pos,carry,a,b,c};
					ans[pos+1][tmp][a][b][c+1]=(_ans){na,nb,sum};
				}
				if(sum==nc){
					dp[pos+1][tmp][a][b][c]=true;
					before[pos+1][tmp][a][b][c]=(_before){pos,carry,a,b,c};
					ans[pos+1][tmp][a][b][c]=(_ans){na,nb,nc};
				}
			}
		}
	}
	return dp[longest][0][la][lb][lc];
}

void print(li la,li lb,li lc){
	string ra="",rb="",rc="";
	li longest=max(sz(sa)+la,max(sz(sb)+lb,sz(sc)+lc));
	li carry=0;
	while(longest){
		_ans answer=ans[longest][carry][la][lb][lc];
		ra+=answer.a+'0'; if(ra=="0") ra="";
		rb+=answer.b+'0'; if(rb=="0") rb="";
		rc+=answer.c+'0'; if(rc=="0") rc="";
		_before bef=before[longest][carry][la][lb][lc];
		la=bef.a; lb=bef.b; lc=bef.c; carry=bef.carry; longest=bef.pos;
	}
	cout<<ra<<"+"<<rb<<"="<<rc<<endl;
}

int main(){
	stringstream ss;
	cin>>str;
	rep(i,sz(str))if(str[i]=='+' || str[i]=='=') str[i]=' ';
	ss<<str; ss>>sa; ss>>sb; ss>>sc;
	rep(i,1000)rep(a,i+1)rep(b,i+1-a)if(cal(a,b,i-a-b)){
		print(a,b,i-a-b);
		return 0;
	}
	cout<<"nothing"<<endl;
}
