#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#include <string.h>
#include <string>
#include <ctype.h>
#include <ctime>

using namespace std;

typedef long long INT;
typedef pair<int, int> pii;

#define beyond(r, c) (r<0 || c<0 || r>=R || c>=C)
#define NN 200

char a[3][NN], tmp[3][NN], ans[3][NN];
int len[3], res, best;

void Find(int k, int x, int y, int z, int p) {
	int tres, i, j, s, ss, ii, jj;
	tres=0;
	if (x<len[0]) tres+=k;
	else {
		for (i=k-1; i>=0; i--) if (tmp[0][i]!='0') break;
		tres+=i+1;
	}
	if (y<len[1]) tres+=k;
	else {
		for (i=k-1; i>=0; i--) if (tmp[1][i]!='0') break;
		tres+=i+1;
	}
	if (z<len[2]) tres+=k;
	else {
		for (i=k-1; i>=0; i--) if (tmp[2][i]!='0') break;
		tres+=i+1;
	}
	if (tres>=res) return;
	if (x>=len[0] && y>=len[1] && z>=len[2] && p==0) {
		res=tres; best=k;
		memcpy(ans, tmp, sizeof(ans));
		return;
	}
	if (x<len[0]) i=a[0][x]-'0';
	else i=0;
	if (y<len[1]) j=a[1][y]-'0';
	else j=0;
	if (z<len[2]) s=a[2][z]-'0';
	else s=0;
	
	if ((i+j+p)%10==s) {
		tmp[0][k]=i+'0'; tmp[1][k]=j+'0'; tmp[2][k]=s+'0';
		Find(k+1, x+1, y+1, z+1, (i+j+p)/10);
	}
	ii=(s+20-j-p)%10;
	tmp[0][k]=ii+'0'; tmp[1][k]=j+'0'; tmp[2][k]=s+'0';
	if (y<len[1] || z<len[2]) Find(k+1, x, y+1, z+1, (ii+j+p)/10);
	jj=(s+20-i-p)%10;
	tmp[0][k]=i+'0'; tmp[1][k]=jj+'0'; tmp[2][k]=s+'0';
	if (x<len[0] || z<len[2]) Find(k+1, x+1, y, z+1, (i+jj+p)/10);
	ss=(i+j+p)%10;
	tmp[0][k]=i+'0'; tmp[1][k]=j+'0'; tmp[2][k]=ss+'0';
	if (x<len[0] || y<len[1]) Find(k+1, x+1, y+1, z, (i+j+p)/10);
}

int main() {
	char str[100];
	int i, j, ok;
	
	scanf("%s", str);
	for (i=j=0; i<3; i++) {
		len[i]=0;
		while(str[j]) {
			if (isdigit(str[j])) {
				a[i][len[i]++]=str[j++];
			} else { j++; break; }
		}
		a[i][len[i]]=0;
		reverse(a[i], a[i]+len[i]);
	}
	res=10000;
	Find(0, 0, 0, 0, 0);
	for (ok=0, i=best-1; i>=0; i--) {
		if (ans[0][i]!='0') ok=1;
		if (ok) printf("%c", ans[0][i]);
	}
	printf("+");
	for (ok=0, i=best-1; i>=0; i--) {
		if (ans[1][i]!='0') ok=1;
		if (ok) printf("%c", ans[1][i]);
	}
	printf("=");
	for (ok=0, i=best-1; i>=0; i--) {
		if (ans[2][i]!='0') ok=1;
		if (ok) printf("%c", ans[2][i]);
	}
	puts("");
	return 0;
}

