#include <stdio.h>
#include <vector>
#include <cmath>

using std::vector;

typedef struct
{
    int a, b, c, w;
    vector<int> x, y, z;
} Expr;

void print( vector<int> v )
{
    while ( v.back() == 0 )
        v.pop_back();
    while ( v.empty() == false )
    {
        printf( "%d", v.back() );
        v.pop_back();
    }
}

int main( void )
{
    int a, b, c;
    scanf( "%d+%d=%d", &a, &b, &c );

    Expr expr; expr.a = a, expr.b = b, expr.c = c, expr.w = 0;
    vector<Expr> v, vSucc;
    int cnt = 0;

    if ( expr.a + expr.b == expr.c )
    {
        printf( "%d+%d=%d", expr.a, expr.b, expr.c );
        return 0;
    }

    v.push_back( expr );
    cnt++;

    while ( cnt )
    {
        Expr e = v.back();
        v.pop_back();
        cnt--;

        Expr ne[4];
        int diff, sum;

        // Modify a
        ne[0].a = e.a; ne[0].b = e.b / 10; ne[0].c = e.c / 10;
        diff = e.c % 10 - e.b % 10 - e.w;
        ne[0].w = ( diff < 0 ) ? 1 : 0;
        if ( diff < 0 )
            diff += 10;
        ne[0].x = e.x; ne[0].y = e.y; ne[0].z = e.z;
        ne[0].x.push_back( diff ); ne[0].y.push_back( e.b % 10 ); ne[0].z.push_back( e.c % 10 );

        // Modify b
        ne[1].a = e.a / 10; ne[1].b = e.b; ne[1].c = e.c / 10;
        diff = e.c % 10 - e.a % 10 - e.w;
        ne[1].w = ( diff < 0 ) ? 1 : 0;
        if ( diff < 0 )
            diff += 10;
        ne[1].x = e.x; ne[1].y = e.y; ne[1].z = e.z;
        ne[1].x.push_back( e.a % 10 ); ne[1].y.push_back( diff ); ne[1].z.push_back( e.c % 10 );

        // Modify c
        sum = e.a % 10 + e.b % 10 + e.w;
        ne[2].a = e.a / 10; ne[2].b = e.b / 10; ne[2].c = e.c;
        ne[2].w = sum / 10;
        ne[2].x = e.x; ne[2].y = e.y; ne[2].z = e.z;
        ne[2].x.push_back( e.a % 10 ); ne[2].y.push_back( e.b % 10 ); ne[2].z.push_back( sum % 10 );

        int nn = 3;

        // No modification
        if ( ( e.a + e.b + e.w ) % 10 == e.c % 10 )
        {
            nn = 4;
            sum = e.a % 10 + e.b % 10 + e.w;
            ne[3].a = e.a / 10; ne[3].b = e.b / 10; ne[3].c = e.c / 10;
            ne[3].w = sum / 10;
            ne[3].x = e.x; ne[3].y = e.y; ne[3].z = e.z;
            ne[3].x.push_back( e.a % 10 ); ne[3].y.push_back( e.b % 10 ); ne[3].z.push_back( e.c % 10 );
        }

        for ( int j = 0; j < nn; ++j )
        {
            if ( ( ne[j].a + ne[j].b + ne[j].w ) == ne[j].c )
                vSucc.push_back( ne[j] );
            else if ( ne[j].a == 0 && ne[j].b == 0 && ne[j].c == 0 )
            {
                ne[j].c = 1;
                vSucc.push_back( ne[j] );
            }
            else if ( ne[j].a == 0 && ne[j].b == 0 )
            {
                ne[j].a = ne[j].c - ne[j].w;
                vSucc.push_back( ne[j] );
            }
            else if ( ne[j].c == 0 )
            {
                ne[j].c = ne[j].a + ne[j].b + ne[j].w;
                vSucc.push_back( ne[j] );
            }
            else
            {
                v.push_back( ne[j] );
                cnt++;
            }
        }
    }

    for ( unsigned i = 0; i < vSucc.size(); ++i )
    {
        while ( vSucc[i].a != 0 )
        {
            vSucc[i].x.push_back( vSucc[i].a % 10 );
            vSucc[i].a /= 10;
        }
        while ( vSucc[i].x.back() == 0 )
            vSucc[i].x.pop_back();

        while ( vSucc[i].b )
        {
            vSucc[i].y.push_back( vSucc[i].b % 10 );
            vSucc[i].b /= 10;
        }
        while ( vSucc[i].y.back() == 0 )
            vSucc[i].y.pop_back();

        while ( vSucc[i].c )
        {
            vSucc[i].z.push_back( vSucc[i].c % 10 );
            vSucc[i].c /= 10;
        }
        while ( vSucc[i].z.back() == 0 )
            vSucc[i].z.pop_back();
    }

    int minSize = vSucc[0].x.size() + vSucc[0].y.size() + vSucc[0].z.size();
    int min = 0;
    for ( unsigned i = 1; i < vSucc.size(); ++i )
    {
        int size = vSucc[i].x.size() + vSucc[i].y.size() + vSucc[i].z.size();
        if ( size < minSize )
        {
            minSize = size;
            min = i;
        }
    }

    print( vSucc[min].x ); printf( "+" );
    print( vSucc[min].y ); printf( "=" );
    print( vSucc[min].z );

    return 0;
}
