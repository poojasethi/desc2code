#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

int dp[10][10][10][2], A[10]={-1}, B[10]={-1}, C[10]={-1}, L1, L2, L3;
vector<int> ans[10][10][10][2][3];
char s[105];
const int Inf = 100000000;

void Print(vector<int> ret[3])
{
    for (int i = 0; i < 3; i++)
    {
        int z = 1;
        for (int j = ret[i].size() - 1; j >= 0; j--)
        {
            if (j && z && ret[i][j] == 0)
                continue;
            z = 0;
            printf("%d", ret[i][j]);
        }
        if (i == 0)
            printf("+");
        else if (i == 1)
            printf("=");
        else
            printf("\n");
    }
}

int main()
{
    memset(A,-1,sizeof(A));
    memset(B,-1,sizeof(B));
    memset(C,-1,sizeof(C));
    scanf("%s", s);
    int n = strlen(s), p = 0;
    while (p < n && s[p] != '+')
    {
        A[L1++] = s[p] - '0';
        p++;
    }
    p++;
    while (p < n && s[p] != '=')
    {
        B[L2++] = s[p] - '0';
        p++;
    }
    p++;
    while (p < n)
    {
        C[L3++] = s[p] - '0';
        p++;
    }
    reverse(A, A + L1);
    reverse(B, B + L2);
    reverse(C, C + L3);
    for (int i = 0; i <= L1 + 1; i++)
        for (int j = 0; j <= L2 + 1; j++)
            for (int k = 0; k <= L3 + 1; k++)
                for (int p = 0; p < 2; p++)
                    dp[i][j][k][p] = Inf;
    dp[0][0][0][0] = 0;
    for (int i = 0; i <= L1 + 1; i++)
        for (int j = 0; j <= L2 + 1; j++)
            for (int k = 0; k <= L3 + 1; k++)
                for (int p = 0; p < 2; p++)
                {
                    for (int d1 = 0; d1 < 10; d1++)if(!d1 || i<=L1)
                        for (int d2 = 0; d2 < 10; d2++)if(!d2 || j<=L2)
                            for (int d3 = 0; d3 < 10; d3++)if(!d3 || k<=L3)
                            {
                                if(k>L3 && p)continue;
                                for (int ai = 0; ai < 2; ai++)
                                {
                                    if(ai && (d1||i<L1))continue;
                                    for (int aj = 0; aj < 2; aj++)
                                    {
                                        if(aj && (d2||j<L2))continue;
                                        for (int ak = 0; ak < 2; ak++)
                                        {
                                            if(ak && (d3||k<L3))continue;
                                            int ni = min(i + (A[i] == d1), L1)+ai;
                                            int nj = min(j + (B[j] == d2), L2)+aj;
                                            int nk = min(k + (C[k] == d3), L3)+ak;
                                            int np = p + d1 + d2;
                                            if (np % 10 != d3)
                                                continue;
                                            np /= 10;
                                            int add = 0;
                                            add += (A[i] != d1 && ni<=L1);
                                            add += (B[j] != d2 && nj<=L2);
                                            add += (C[k] != d3 && nk<=L3);

                                            if (dp[ni][nj][nk][np]
                                                    > dp[i][j][k][p] + add)
                                            {
                                                dp[ni][nj][nk][np]
                                                        = dp[i][j][k][p] + add;
                                                for (int q = 0; q < 3; q++)
                                                    ans[ni][nj][nk][np][q]
                                                            = ans[i][j][k][p][q];
                                                if(ni<=L1)
                                                ans[ni][nj][nk][np][0].push_back(
                                                        d1);
                                                if(nj<=L2)
                                                ans[ni][nj][nk][np][1].push_back(
                                                        d2);
                                                if(nk<=L3)
                                                ans[ni][nj][nk][np][2].push_back(
                                                        d3);
//                                              if(ni==6 && nj==6 && nk==5)
//                                              {
//                                                  Print(ans[ni][nj][nk][np]);
//                                                  Print(ans[i][j][k][p]);
////                                                    printf("%d %d %d %d %d\n",(A[i] != d1 && ni<=L1),(B[j] != d2 && nj<=L2),(C[6]),(d3),(nk<=L3));
//                                                  printf("%d %d %d %d %d\n",add,i,j,k,p);
//                                                  printf("%d %d %d %d %d\n",ni,nj,nk,np,dp[ni][nj][nk][np]);
//                                              }
                                            }
                                        }
                                    }
                                }
                            }
                }
    int mx = Inf;
    vector<int> ret[3];
    for(int i = L1; i <= L1+1; i++)
        for(int j = L2; j <= L2+1; j++)
            for(int k = L3; k <= L3+1; k++)
            {
                if(mx > dp[i][j][k][0])
                {
//                  printf("%d %d %d %d\n",i,j,k,mx);
                    mx = dp[i][j][k][0];
                    for(int p = 0; p < 3; p++)
                        ret[p] = ans[i][j][k][0][p];
                }
            }
//  printf("%d\n",mx);
    Print(ret);

    return 0;
}
