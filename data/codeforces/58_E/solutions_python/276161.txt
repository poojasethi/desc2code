s = raw_input().strip()
A = int( s.split('+')[0] )
B = int( s.split('+')[1].split( '=' )[0] )
C = int( s.split('+')[1].split( '=' )[1] )

min_addition = 13
A_sol = 0
B_sol = 0

#-----------------------------------------------------------
# A = lA * 10^x + rA
# B = lB * 10^x + rB
# x = length of rA, rB
def dequy( lA, lB, lC, rA, rB, nho, Addition, pow10 ):
    global min_addition
    if ( Addition > 12 )or( min_addition <= Addition ):
        return
    
    if ( not lA )and( not lB )and( not lC )and( not nho ):
        min_addition = Addition
        global A_sol
        global B_sol
        A_sol = rA
        B_sol = rB
        return
    
    if not lC:
        dequy( 0, 0, 0, rA + lA * 10**pow10, rB + lB * 10**pow10, 0, Addition + len( str( lA + lB + nho ) ), pow10 )
        return
    
    csA = lA % 10
    csB = lB % 10
    csC = lC % 10
    if ( ( csA + csB + nho ) % 10 ) == csC:
        dequy( lA/10, lB/10, lC/10, rA + csA * 10**pow10, rB + csB * 10**pow10, (csA + csB + nho )/10, Addition, pow10+1 )
        
    # add a digit to the right of lA
    add_A = ( csC - csB - nho + 10 ) % 10
    if add_A is not csA:
        dequy( lA * 10 + add_A, lB, lC, rA, rB, nho, Addition+1, pow10 )
        
    # add a digit to the right of lB
    add_B = ( csC - csA - nho + 10 ) % 10
    if add_B is not csB:
        dequy( lA, lB * 10 + add_B, lC, rA, rB, nho, Addition+1, pow10 )
        
    # add a digit to the right of lC
    add_C = ( csA + nho + csB ) % 10
    if add_C is not csC:
        dequy( lA, lB, lC * 10 + add_C, rA, rB, nho, Addition+1, pow10 )
#-----------------------------------------------------------

dequy( A, B, C, 0, 0, 0, 0, 0 )
print str(A_sol) + '+' + str(B_sol) + '=' + str(A_sol + B_sol)