#!/usr/bin/env python
# -*- coding:utf-8 -*-
#

from math import fabs

abs = lambda v : int(fabs(v))

def readint(): return int(raw_input())
def readfloat(): return float(raw_input())
def readarray(N, foo):
        res = []
        for _ in xrange(N):
                res.append(foo())
        return res
def readlinearray(foo): return map(foo, raw_input().split())

def get_len(((x1, y1), (x2, y2))):
    return abs((x1 - x2)) + abs((y1 - y2)) 

def seg_length_ok(points):
    seg1, seg2, seg3, seg4 = points
    return get_len(seg1) == get_len(seg3) and get_len(seg2) == get_len(seg4)

def first_point_equals_last(points):
    return points[0][0] == points[-1][1]

def is_parallel_to_coordinate_axes(((x1, y1), (x2, y2))):
    return x1 == x2 or y1 == y2

def is_area_positive(points):
    for (p1, p2) in points:
        if p1 == p2:
            return False
    return True

def found_cycle_size_four(segs, cresult):
    
    if len(cresult) > 4: return False
    
    (seg1p1, seg1p2) = last_seg = cresult[-1]
    for current_seg in segs:
        seg2p1, seg2p2 = current_seg
        if last_seg == current_seg: continue #Exactly the same segment
        if seg1p1 == seg2p2 and seg1p2 == seg2p1: continue #The same segment if swap points
        if seg1p2 == seg2p1:
            cresult.append(current_seg)
            if len(cresult) == 4 and seg_length_ok(cresult) and first_point_equals_last(cresult) and is_area_positive(cresult): return True
            if found_cycle_size_four(segs, cresult):
                return True
            cresult.pop()
    return False

#TRUE if the four given segments form a rectangle of a positive area and with sides parallel to coordinate axes
def is_rectangle(segs):
    
    nsegs = []
    for seg in segs:
        p1, p2 = seg
        if p1 != p2:
            nsegs.append((p2, p1))
    segs = segs + nsegs
    
    for seg in segs:
        if found_cycle_size_four(segs, [seg]):
            return True
    
    return False

if __name__ == '__main__':
    x1, y1, x2, y2 = readlinearray(int)
    seg1 = ((x1, y1), (x2, y2))
    
    x1, y1, x2, y2 = readlinearray(int) 
    seg2 = ((x1, y1), (x2, y2))
    
    x1, y1, x2, y2 = readlinearray(int)
    seg3 = ((x1, y1), (x2, y2))
    
    x1, y1, x2, y2 = readlinearray(int)
    seg4 = ((x1, y1), (x2, y2))
    
    segs = [seg for seg in [seg1, seg2, seg3, seg4] if is_parallel_to_coordinate_axes(seg)]
    if is_rectangle(segs):
        print 'YES'
    else:
        print 'NO'
