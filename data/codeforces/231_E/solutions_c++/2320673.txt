#include <cstdio>
#include <iostream>
#include <string>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <sstream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <cstdlib>

using namespace std;
 
typedef long long ll;
typedef pair<int, int> pii;


#define MAX (100010)
#define LMAX (20)
#define MOD (1000000007)

int pai[MAX][LMAX];
int c[MAX];
int val[MAX][LMAX];
int dist[MAX];
int low[MAX];

int grafo[MAX];
int prox[2*MAX];
int vert[2*MAX];
int nume;
int N;

int pot[MAX];

void add_edge(int i, int j)
{
  int e = nume++;
  prox[e] = grafo[i];
  grafo[i] = e;
  vert[e] = j;
}

void dfs(int i)
{
  low[i] = dist[i];
  for(int e = grafo[i]; e != -1; e = prox[e]){
    int j = vert[e];
    if(j == pai[i][0])
      continue;
    if(dist[j] != -1){
      if(dist[j] < dist[i]){
	c[j] = 1;
	low[i] = dist[j];
      }
      continue;
    }
    dist[j] = dist[i] + 1;
    pai[j][0] = i;
    dfs(j);
    low[i] = min(low[i], low[j]);
  }
}

int lca(int i, int j)
{
  if(dist[i] < dist[j]) return lca(j, i);
  int k = LMAX-1;
  while(k >= 0){
    if((1<<k) <= dist[i] - dist[j]){
      i = pai[i][k];
    }
    k--;
  }

  if(i == j) return i;

  k = LMAX - 1;
  while(k >= 0){
    int a = pai[i][k];
    int b = pai[j][k];
    if(a != b){
      i = a;
      j = b;
    }
    k--;
  }
  return pai[i][0];
}

int conta(int i, int j)
{
  int k = LMAX - 1;
  int r = c[i];

  //printf("%d %d", i+1, j+1);
  while(k >= 0){
    if((1<<k) <= dist[i] - dist[j]){
      r += val[i][k] - c[i];
      i = pai[i][k];
    }
    k--;
  }
  //printf(" %d\n", r);
  return r;
}
 
int main()
{
  int M;
  scanf(" %d %d", &N, &M);

  nume = 0;
  memset(grafo, -1, sizeof grafo);
  while(M--){
    int i, j;
    scanf(" %d %d", &i, &j);
    i--; j--;
    add_edge(i, j);
    add_edge(j, i);
  }

  for(int i = 0; i < N; i++){
    c[i] = 0;
    dist[i] = -1;
  }

  dist[0] = 0;
  pai[0][0] = 0;
  dfs(0);

  val[0][0] = c[0];
  for(int i = 1; i < N; i++)
    val[i][0] = c[i] + c[pai[i][0]];

  for(int k = 1; k < LMAX; k++){
    for(int i = 0; i < N; i++){
      pai[i][k] = pai[pai[i][k-1]][k-1];
      val[i][k] = val[i][k-1] + val[pai[i][k-1]][k-1] - c[pai[i][k-1]];
    }
  }
  pot[0] = 1;
  for(int i = 1; i <= N; i++){
    pot[i] = (2*pot[i-1])%MOD;
  }


  int Q;
  scanf(" %d", &Q);
  while(Q--){
    int i, j;
    scanf(" %d %d", &i, &j);
    i--; j--;
    int k = lca(i, j);
    //printf("%d %d -> %d\n",i+1, j+1, k+1);
    int r = conta(i, k) + conta(j, k) - c[k];
    if(low[k] < dist[k]) r++;
    printf("%d\n", pot[r]);
  }
  /*
  for(int i = 0; i < N; i++)
    printf("%d %d\n", i+1, c[i]);
  */
  return 0;
}
