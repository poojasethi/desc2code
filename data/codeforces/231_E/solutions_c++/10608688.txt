#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
int a[200100][3],b[100100],p2[100100];
int aa[200100][2],bb[100100],sum[100100];
int dfn[100100],low[100100],stack[100100],id[100100],f[100100];
bool v[100100];
int n,m,q,s,top,ss;

void add(int i,int j,int k){
	a[++s][0]=b[i];
	b[i]=s;
	a[s][1]=j;
	a[s][2]=k;
}
void addb(int i,int j){
	aa[++ss][0]=bb[i];
	bb[i]=ss;
	aa[ss][1]=j;
}
void tarjan(int k,int father){
	int i,j;
	dfn[k]=low[k]=++ss;
	stack[++top]=k;
	for (i=b[k];i;i=a[i][0]){
		j=a[i][1];
		if (!dfn[j]){
			tarjan(j,k);
			low[k]=min(low[k],low[j]);
		}
		else if (j!=father) low[k]=min(low[k],dfn[j]);
	}
	if (dfn[k]==low[k]){
		m++;
		do{
			j=stack[top--];
			id[j]=m;
			sum[m]++;
		}while (j!=k);
	}
}
void bridge(){
	int i;
	memset(low,0,sizeof(low));
	memset(dfn,0,sizeof(dfn));
	m=0;
	for (i=1;i<=n;i++)
		if (!dfn[i]){
			ss=0;
			tarjan(i,0);
		}
}
int getfather(int k){
	if (f[k]==k || f[k]==0) return k;
	f[k]=getfather(f[k]);
	return f[k];
}
void lca(int k,int dd){
	int i,j;
	dfn[k]=dd;
	for (i=bb[k];i;i=aa[i][0]){
		j=aa[i][1];
		if (!v[j]){
			v[j]=1;
			lca(j,(sum[j]>2)+dd);
			f[getfather(j)]=getfather(k);
		}
	}
	for (i=b[k];i;i=a[i][0]){
		j=a[i][1];
		low[a[i][2]]=dfn[k]+dfn[j]-2*dfn[getfather(j)]+(sum[getfather(j)]>2);
	}
}
int main(){
	p2[0]=1;
	for(int i=1;i<100002;i++) p2[i]=((long long)p2[i-1]*2)%1000000007;
	scanf("%d%d",&n,&m);
	while(m--){
		int i,j;
		scanf("%d%d",&i,&j);
		add(i,j,0);
		add(j,i,0);
	}
	bridge();
	ss=0;
	for(int k=1;k<=s;k+=2){
		int i,j;
		i=id[a[k][1]];
		j=id[a[k+1][1]];
		if (i!=j) addb(i,j),addb(j,i);
	}
	scanf("%d",&q);
	memset(b,0,sizeof(b));
	int k;
	for(s=k=0;k<q;k++){
		int i,j;
		scanf("%d%d",&i,&j);
		i=id[i];
		j=id[j];
		add(i,j,k);
		add(j,i,k);
	}
	memset(stack,0,sizeof(stack));
	memset(dfn,0,sizeof(dfn));
	dfn[1]=(sum[1]>2);
	v[1]=1;
	lca(1,0);
	for(int i=0;i<q;i++) printf("%d\n",p2[low[i]]);
	return 0;
}

	 		  		  	 	 		        		  			