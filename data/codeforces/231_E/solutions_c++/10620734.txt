#include <cstdio>
#include <utility>

#define N 100000

struct Edge{int v;Edge *x;}E[2*N+9],F[2*N+9];
Edge *e=E,*f=F,*l[N+9],*r[N+9];
const int mod=1000000007;
int n,m,k,u,v,w,cnt,g[N+9];
int stp,dfn[N+9];
int sp,stack[N+9];
bool cyc[N+9];

int s[N+9],h[N+9],d[N+9][19];

void edge(int u,int v)
{
	e->v=v;
	e->x=l[u];
	l[u]=e++;
}
void edge2(int u,int v)
{
	f->v=v;
	f->x=r[u];
	r[u]=f++;
}
void dfs(int f,int u)
{
	dfn[u]=++stp;
	stack[sp++]=u;
	for (Edge *p=l[u];p;p=p->x) if (p->v!=f)
	{
		if (dfn[p->v])
		{
			if (dfn[u]>dfn[p->v])
			{
				cyc[++cnt]=true;
				int w;
				do
				{
					w=stack[--sp];
					g[w]=cnt;
				}
				while (w!=p->v);
			}
		}
		else
		{
			dfs(u,p->v);
		}
	}
	if (!g[u])
	{
		--sp;
		g[u]=++cnt;
	}
}
void dfs2(int f,int u)
{
	//printf("%d %d\n",f,u);
	s[u]=s[f]+cyc[u];
	h[u]=h[f]+1;
	d[u][0]=f;
	for (int i=1;i<16;++i) d[u][i]=d[d[u][i-1]][i-1];
	for (Edge *p=r[u];p;p=p->x) if (p->v!=f) dfs2(u,p->v);
}
int lca(int u,int v)
{
	if (h[u]>h[v]) std::swap(u,v);
	int det=h[v]-h[u];
	for (int i=0;i<16;++i) if (det>>i&1) v=d[v][i];
	if (u==v) return u;
	for (int i=15;i>=0;--i) if (d[u][i]!=d[v][i]) u=d[u][i],v=d[v][i];
	return d[u][0];
}
int main()
{
	scanf("%d%d",&n,&m);
	while (m--)
	{
		scanf("%d%d",&u,&v);
		edge(u,v);
		edge(v,u);
	}
	
	dfs(0,1);
	
	for (int i=1;i<=n;++i)
	{
		for (Edge *p=l[i];p;p=p->x) if (g[i]!=g[p->v])
		{
			edge2(g[i],g[p->v]);
		}		
	}
	dfs2(0,1);
	scanf("%d",&m);
	while (m--)
	{
		scanf("%d%d",&u,&v);
		u=g[u],v=g[v];
		int w=lca(u,v);
		int k=s[u]+s[v]-2*s[w]+cyc[w];
		long long a=2,t=1;
		do
		{
			if (k&1) t=t*a%mod;
			a=a*a%mod;
		}
		while (k>>=1);
		printf("%d\n",(int)t);
	}
	return 0;
}

	 	   	 			 							  		  	  		