#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <string>
#include <sstream>
#include <vector>
#include <map>
#include <set>
#include <queue>
using namespace std;
#define N 100005
#define mod 1000000007
int dfn[N],low[N],T,Bcnt,sta[N],tp,be[N],in[N];
int head[N],idx,ev[N*2],nt[N*2];
int n,m,x[N],y[N],z[N];
int num[N];
vector<int> g[N],pr[N];
int cnt;
void add(int a,int b){
    ev[idx]=b,nt[idx]=head[a],head[a]=idx++;
}
void tarjan(int u,int f){
    low[u]=dfn[u]=++T;
    sta[tp++]=u;
    in[u]=1;
    for(int i=head[u];i;i=nt[i]){
        int v=ev[i];
        if(v==f) continue;
        if(!dfn[v]){
            tarjan(v,u);
            low[u]=min(low[u],low[v]);
        }
        else if(in[v]) low[u]=min(low[u],dfn[v]);
    }
    if(dfn[u]==low[u]){
        Bcnt++;
        int t;
        do{
            t=sta[--tp];
            num[Bcnt]++;
            in[t]=0;
            be[t]=Bcnt;
        }while(t!=u);
    }
}
int fa[N],ff[N],dep[N];
bool col[N];
int find(int u) {if(fa[u]==u) return u;return fa[u]=find(fa[u]); }
long long md[N];
void dfs(int u,int f){

    ff[u]=fa[u]=u;

    for(int i=0;i<g[u].size();i++){

        int v=g[u][i];
        if(v==f) continue;
        dep[v]=dep[u]+(num[v]>1);
        dfs(v,u);
        int a=find(u),b=find(v);
        ff[fa[a]=b]=u;
    }
    col[u]=1;
    for(int i=0;i<pr[u].size();i++){
        int t=pr[u][i];
        if(col[x[t]]&&col[y[t]])
        {
           if(x[t]==u) z[t]=ff[find(y[t])];
           else  z[t]=ff[find(x[t])];

        }
    }
}
int main(){
   ios::sync_with_stdio(false);
  //freopen("input.txt","r",stdin);
  cin>>n>>m;
  idx=1;
  for(int i=0;i<m;i++){
      int a,b;
      cin>>a>>b;
      add(a,b);add(b,a);
  }
  T=tp=Bcnt=0;
  tarjan(1,0);
  md[0]=1;
  for(int i=1;i<=Bcnt;i++)
  {
      md[i]=md[i-1]<<1;
      if(md[i]>mod) md[i]%=mod;
  }

  for(int i=1;i<=n;i++)
      for(int j=head[i];j;j=nt[j]) if(be[i]!=be[ev[j]]) g[be[i]].push_back(be[ev[j]]);

      cin>>cnt;
  for(int i=0;i<cnt;i++){
      cin>>x[i]>>y[i];
      x[i]=be[x[i]],y[i]=be[y[i]];
      pr[x[i]].push_back(i);
      pr[y[i]].push_back(i);
  }
  dep[1]=(num[1]>1);
  dfs(1,0);
  for(int i=0;i<cnt;i++)  cout<<md[dep[x[i]]+dep[y[i]]-2*dep[z[i]]+(num[z[i]]>1)]<<endl;
}
/*
11 13
1 2
2 3
2 7
3 7
3 4
4 5
4 6
5 6
7 8
8 9
9 10
9 11
10 11
5
5 11
1 8
1 5
4 8
8 5
*/
