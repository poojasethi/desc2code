
#include<stdio.h>   
#include<string.h>   
#include <cmath>
#include<algorithm>   
#include <vector>
#define fr(i,s,n) for(int i=s;i<n;i++)
#define fi freopen("in.txt","r",stdin)
#define cl(a) memset(a,0,sizeof(a))
using namespace std;
typedef long long ll;

int n,m;
const int N=100010;
struct E{
	int u,v,nxt;
}edg[200010];
int tote,head[N];
void init(){
	tote=0;
	memset(head,-1,sizeof(head));	
}
inline void addedg(int u,int v){
	edg[tote].u=u;edg[tote].v=v;edg[tote].nxt=head[u];head[u]=tote++;
};

int fa[N][18],belong[N],v;
bool vst[N],cyc[N];
bool in[N];
void dfs(int  u,int f){  //dfs缩点
	vst[u]=1;
	belong[u]=u;
	fa[u][0]=f;
	in[u]=1;
	for(int i=head[u];i!=-1;i=edg[i].nxt){
		v=edg[i].v;
		if (v==f) continue;
		if (in[v]){
			cyc[v]=1;
			int tmp=u;
			while(tmp!=v){
				belong[tmp]=v;
				tmp=fa[tmp][0];
			}
		}else if(!vst[v]) dfs(v,u);
	}
	in[u]=0;
}
vector<int> dag[N];
void makedag(){
	fr(i,1,n+1) fa[i][0] = belong[fa[i][0]];
	fr(i,1,n+1){
		if (belong[i]==i){
			dag[ fa[i][0] ].push_back(i);
		}
	}
}

int deep[N];
int sum[N];
void rmqinit(int u,int d){
	deep[u]=d;
	sum[u]=sum[ fa[u][0] ]+cyc[ u ];
	fr(i,1,18) fa[u][i]=fa[ fa[u][i-1] ][ i-1 ];
	int siz=dag[u].size();
	fr(i,0,siz){
		rmqinit(dag[u][i],d+1);
	}
};
int lca(int a,int b){
	int tmp=deep[a]-deep[b];
	if (tmp<0) {tmp=-tmp;a^=b^=a^=b;}
	for(int i=17;i>=0;i--) if ( (tmp>>i)&1 ) a=fa[ a ][ i ];
	if (a==b) return a;
	for ( int i=17; i>=0; i-- ) if ( fa[a][i]!=fa[b][i] ) a=fa[a][i],b=fa[b][i];
	return fa[a][0];
}
int main(){
	
	init();
	scanf("%d%d",&n,&m);
	int u,v;
	fr(i,0,m){
		scanf("%d%d",&u,&v);
		addedg( u,v );
		addedg( v,u );
	}
	{
		cl(vst);cl(cyc);
		dfs(1,0);
	}
	makedag();
	rmqinit(1,1);
	int q;
	scanf("%d",&q);
	while(q--){
		scanf("%d%d",&u,&v);
		u=belong[u],v=belong[v];
		int ca=lca(u,v);
		int s=sum[u]+sum[v]-2*sum[ca]+cyc[ca];
		int ans=1,p=2;
		while ( s ) {
			if ( s&1 ) ans=1LL*ans*p%1000000007;
			s>>=1;
			p=1LL*p*p%1000000007;
		}
		printf("%d\n",ans);
	}
	return 0;
}
