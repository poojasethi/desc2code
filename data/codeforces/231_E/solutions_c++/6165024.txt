#include <cstdio>
#include <vector>
using namespace std;
typedef long long ll;
typedef vector<int> vi;

#define pb push_back
#define forn(i,n) for(int i=0;i<(n);++i)
const int mod = 1e9 + 7;

ll powm(ll a,ll p,ll m){ll r=1 % m;while(p){if(p&1)r=r*a%m;p>>=1;a=a*a%m;}return r;}

int n, m, k, a, b, uses[100000], cnt = 0, type[100000], ccnt[100000], in[100000], out[100000], timer = 0, up[100000][21];
vi lst[100000], path, lst2[100000];

void dfs(int v, int p)
{
    if(uses[v] == -1)
    {
        type[cnt] = 1;
        uses[v] = ++cnt;
        for(int i = path.size() - 1; path[i] != v; --i)
            uses[path[i]] = cnt;
    }
    else if(uses[v] == 0)
    {
        uses[v] = -1;
        path.pb(v);
        forn(i, lst[v].size())
            if(lst[v][i] != p)
                dfs(lst[v][i], v);
        if(uses[v] == -1)
            uses[v] = ++cnt;
        path.pop_back();
    }
}

void dfs2(int v, int p, int c)
{
    in[v] = timer++;
    ccnt[v] = c + type[v];
    up[v][0] = p;
    for(int i = 1; i <= 20; ++i)
        up[v][i] = up[up[v][i - 1]][i - 1];
    forn(i, lst2[v].size())
        if(lst2[v][i] != p)
            dfs2(lst2[v][i], v, ccnt[v]);
    out[v] = timer++;
}

bool upper(int i, int j)
{
    return in[i] <= in[j] && out[j] <= out[i];
}

int lca(int i, int j)
{
    if(upper(i, j))
        return i;
    if(upper(j, i))
        return j;
    for(int k = 20; k >= 0; --k)
        if(! upper(up[i][k], j))
            i = up[i][k];
    return up[i][0];
}

int main()
{
    scanf("%d%d", &n, &m);
    forn(i, m)
    {
        scanf("%d%d", &a, &b);
        lst[a - 1].pb(b - 1);
        lst[b - 1].pb(a - 1);
    }
    dfs(0, 0);
    forn(i, n)
        uses[i]--;
    forn(i, n)
        forn(j, lst[i].size())
            if(uses[lst[i][j]] != uses[i])
                lst2[uses[i]].pb(uses[lst[i][j]]);
    dfs2(0, 0, 0);
    scanf("%d", &k);
    forn(i, k)
    {
        scanf("%d%d", &a, &b);
        a = uses[a - 1], b = uses[b - 1];
        int tmp = lca(a, b);
        printf("%d\n", (int) powm(2, ccnt[a] + ccnt[b] - 2 * ccnt[tmp] + type[tmp], mod));
    }
    return 0;
}
