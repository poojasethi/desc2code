#include <iostream>
#define MAXN 100010
#include <cstring>
#include <vector>

using namespace std;

typedef long long ll;
ll pot[MAXN];
const ll MOD = 1000000007;
int n;
vector<int> adjt[MAXN];
int C[MAXN], pi[MAXN];
bool cycle[MAXN];

void mark(int root, int u) {
    do {
        C[u] = root;
        u = pi[u];
    } while(u!=root);
    C[u] = root;
    cycle[root] = true;
}

void dfst(int u) {
    int v;
    for(int i=0; i<adjt[u].size(); i++) {
        v = adjt[u][i];
        if(pi[v] == -1) {
            pi[v] = u;
            dfst(v);
        }
        else if(pi[u] != v and C[v] == v)
            mark(v, u);
    }
}

vector<int> adj[MAXN];
int d[MAXN];

void dfs(int u) {
    int v;
    for(int i=0; i<adj[u].size(); i++) {
        v = adj[u][i];
        if(d[v] == -1) {
            d[v] = d[u] + 1;
            pi[v] = u;
            dfs(v);
        }
    }
}

int getans(int u, int v) {
    int ans = 0;
    while(u!=v) {
        //cout << "> " << u << " " << v <<endl;
        if(d[u] > d[v]) {
            ans += cycle[u];
            u = pi[u];
        }
        else {
            ans += cycle[v];
            v = pi[v];
        }
    }
    ans += cycle[u];
    return ans;
}

int main () {
    ios::sync_with_stdio(0);
    int m, u, v, q;
    cin >> n >> m;
    pot[0] = 1;
    for(int i=1; i<=n; i++)
        pot[i] = (pot[i-1] * 2)%MOD;
    while (m--) {
        cin >> u >> v;
        adjt[u].push_back(v);
        adjt[v].push_back(u);
    }
    for(u=1; u<=n; u++)
        C[u] = u;
    memset(pi, -1, sizeof pi);
    memset(cycle, false, sizeof cycle);
    pi[1] = 1;
    dfst(1);
    for(u=1; u<=n; u++) {
        for(int i=0; i<adjt[u].size(); i++) {
            v = adjt[u][i];
            if(C[v] != C[u]) {
                adj[C[u]].push_back(C[v]);
                adj[C[v]].push_back(C[u]);
            }
        }
    }
    memset(d, -1, sizeof d);
    d[1] = 0;
    dfs(1);
    cin >> q;
    while (q--) {
        cin >> u >> v;
        cout << pot[getans(C[u], C[v])] << endl;
    }
}
