//By momo
#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
#define N 100010
#define M 1000000007
#define PB push_back
#define MP make_pair
#define LL long long
#define FOR(it, c) for(__typeof((c).begin())it=(c).begin();it!=(c).end();it++)
using namespace std;
typedef pair<int,int> PII;

int n, m;
int loop = 1, bcc[N], cact[N];
vector<int> G[N], B[N];

int low[N], dfn[N], stk[N], sn;
void dfs(int p, int f, int l){
	stk[sn++] = p;
	dfn[p] = low[p] = l;
	FOR(it, G[p]){
		if(*it == f) continue;
		if(dfn[*it] == -1){
			dfs(*it, p, l+1);
			low[p] = min(low[p], low[*it]);
		}
		else if(dfn[*it] < dfn[p])
			low[p] = min(low[p], dfn[*it]);
	}
	if(dfn[p] == low[p]){
		while(sn > 0 && low[stk[sn-1]] >= dfn[p])
			bcc[stk[sn-1]] = loop, sn--;
		loop++;
	}
}

int fa[N][22], cn[N][22], lev[N];
void tree(int p, int f, int l){
	lev[p] = l;
	fa[p][0] = p;
	fa[p][1] = f;
	cn[p][0] = (cact[p] > 0);
	cn[p][1] = cn[p][0] + cn[f][0];
	FOR(it, B[p]) if(*it != f) tree(*it, p, l+1);
}

int LCA(int a, int b){
	if(lev[a] > lev[b]) swap(a, b);
	int ret = cn[b][0];
	for(int i = 21; i >= 1; i--){
		if(lev[a] <= lev[fa[b][i]]){
			ret += cn[b][i] - cn[b][0];
			b = fa[b][i];
		}
	}
	if(a == b) return ret;
	ret += cn[a][0];
	for(int i = 21; i >= 1; i--){
		if(fa[a][i] != fa[b][i]){
			ret += cn[a][i] + cn[b][i]
				 - cn[a][0] - cn[b][0];
			a = fa[a][i]; b = fa[b][i];
		}
	}
	return ret + cn[fa[a][1]][0];
}

void Become_tree(){
	scanf("%d%d", &n, &m);
	for(int i = 0; i < m; i++){
		int a, b; scanf("%d%d", &a, &b);
		G[a].PB(b); G[b].PB(a);
	}
	memset(dfn, -1, sizeof(dfn));
	dfs(1, 0, 0);
	for(int i = 1; i <= n; i++) cact[bcc[i]]++;
	for(int i = 1; i <= n; i++) FOR(it, G[i])
		if(bcc[i] != bcc[*it]) B[bcc[i]].PB(bcc[*it]);
	//for(int i = 1; i <= n; i++)
	//	printf("-> %d\n", bcc[i]);
}

int pow2[N];
void Create_LCA(){
	n = loop - 1;
	for(int i = 1; i <= n; i++) cact[i] = (cact[i] > 1);
	tree(1, 0, 0); lev[0] = -1;
	//for(int i = 1; i <= n; i++)
	//	printf("%d -> %d\n", i, fa[i][1]);
	for(int j = 2; j < 22; j++){
		for(int i = 1; i <= n; i++){
			fa[i][j] = fa[fa[i][j-1]][j-1];
			cn[i][j] = cn[i][j-1] + cn[fa[i][j-1]][j-1]
				     - cn[fa[i][j-1]][0];
		}
	}
	pow2[0] = 1;
	for(int i = 1; i <= n; i++)
		pow2[i] = (pow2[i-1] * 2) % M;
}

void Quuuuuuery(){
	int q; scanf("%d", &q);
	while(q--){
		int a, b; scanf("%d%d", &a, &b);
		a = bcc[a]; b = bcc[b];
		int ans = LCA(a, b);
		printf("%d\n", pow2[ans]);
	}
}

int main (){
	Become_tree();
	Create_LCA();
	Quuuuuuery();
}
