#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define N 100005
using namespace std;

int n, m, bcc, ed, t, x, y, z;
int l[N], L[N], qd[N<<2], qn[N<<2], v[N], w[N], col[N], b[N], size[N];
int h[N], v2[N+N], f[N], T[N+N][20];
int pow[N], sum[N];

void bd(int x, int y){
	qd[++ed] = y, qn[ed] = l[x], l[x] = ed;
}

void dfs(int x, int y){
	v[x] = w[x] = ++t;
	EXP(i,l[x])
	if (!v[qd[i]]){
		dfs(qd[i], x);
		w[x] = min(w[x], w[qd[i]]);
		if (w[qd[i]] > v[x]) b[i>>1] = 1;
	}
	else if (qd[i] != y) w[x] = min(w[x], v[qd[i]]);
}

void color(int x, int y){
	col[x] = y;
	++size[y];
	EXP(i,l[x])
	if (!col[qd[i]]){
		if (!b[i>>1]) color(qd[i], y);
		else{
			++bcc;
			qd[++ed] = bcc;
			qn[ed] = L[y];
			L[y] = ed;
			color(qd[i], bcc);
		}
	}
}



int hmin(int x, int y){return h[x] < h[y] ? x : y;}

void dfs2(int x, int y){
	h[x] = y;
	v2[++t] = x;
	f[x] = t;
	sum[x] += (size[x] > 1);
	EXP(i,L[x]){
		sum[qd[i]] = sum[x];
		dfs2(qd[i], y+1);
		v2[++t] = x;
	}
}

void pre(){
	for (int i=1; i<=t; i++) T[i][0] = v2[i];
	for (int j=1; (1<<j)<=t; j++)
	for (int i=1; i+(1<<j)-1<=t; i++)
	T[i][j] = hmin(T[i][j-1], T[i+(1<<(j-1))][j-1]);
}

int lca(int x, int y){
	int t;
	x = f[x];
	y = f[y];
	if (x > y) swap(x, y);
	for (t=0; (1<<(t+1))<=(y-x+1); t++);
	return hmin(T[x][t], T[y-(1<<t)+1][t]);
}

int main(){
	scanf("%d%d", &n, &m);
	ed = 1;
	while (m--){
		scanf("%d%d", &x, &y);
		bd(x, y), bd(y, x);
	}
	
	dfs(1, 0);
	bcc = 1;
	color(1, 1);
	
	t = 0;
	dfs2(1, 0);
	pre();
	
	pow[0] = 1;
	FOR(i,0,n) pow[i+1] = (pow[i] << 1) % 1000000007;
	
	scanf("%d", &m);
	while (m--){
		scanf("%d%d", &x, &y);
		x = col[x];
		y = col[y];
		z = lca(x, y);
		printf("%d\n", pow[sum[x] + sum[y] - 2 * sum[z]+ (size[z] > 1)]);
	}
	return 0;
}
