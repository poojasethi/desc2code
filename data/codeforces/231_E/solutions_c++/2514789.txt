#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <ctime>

using namespace std;

const int N = 100010;
const int mod = 1e9 + 7;

#define pb push_back

int n, m, q;
vector<int> e[N];
vector<int> tree[N];

int fa[N][20], f[N], dep[N];
int sz[N], dfn[N], st[N], col[N], low[N], top, cnt, scnt, w[N];

void dfs(int x, int pre){
    dfn[x] = low[x] = cnt++;
    st[++top] = x;
    for(int i = 0; i < e[x].size(); ++i){
        if(e[x][i] == pre) continue;
        if(dfn[e[x][i]] == -1){
            dfs(e[x][i], x);
            low[x] = min(low[x], low[e[x][i]]);
        }
        else low[x] = min(low[x], dfn[e[x][i]]);
    }
    if(dfn[x] == low[x]){
        int u;
        do{
            col[u = st[top--]] = scnt;
            sz[scnt]++;
        }while(u != x);
        scnt++;
    }
}
void make_tree(int x, int pre, int _w, int depth){
    w[x] = _w;
    fa[x][0] = pre;
    dep[x] = depth;
    for(int i = 0; i < tree[x].size(); ++i)
        if(tree[x][i] != pre)
            make_tree(tree[x][i], x, _w + (sz[tree[x][i]] > 1), depth + 1);
}
void init(){
    f[0] = 1;
    for(int i = 1; i <= 100000; ++i) f[i] = (f[i - 1] << 1) % mod;
    cin >> n >> m;
    for(int i = 0, x, y; i < m; ++i){
        cin >> x >> y;
        e[x].pb(y), e[y].pb(x);
    }
    cnt = top = scnt = 0;
    memset(sz, 0, sizeof(sz));
    memset(dfn, -1, sizeof(dfn));
    dfs(1, -1);

    for(int i = 1; i <= n; ++i)
        for(int j = 0; j < e[i].size(); ++j)
            if(col[i] > col[e[i][j]]){
                tree[col[i]].pb(col[e[i][j]]);
                tree[col[e[i][j]]].pb(col[i]);
            }
    memset(fa, -1, sizeof(fa));
    make_tree(0, -1, sz[0] > 1, 0);
    for(int j = 1; j < 20; ++j)
        for(int i = 0; i < scnt; ++i)
            if(fa[i][j - 1] != -1) fa[i][j] = fa[fa[i][j - 1]][j - 1];
}
int LCA(int x, int y){
    if(dep[x] < dep[y]) swap(x, y);
    for(int i = 19; i >= 0; --i)
        if((dep[x] - dep[y]) & (1 << i)) x = fa[x][i];
    if(x == y) return x;
    for(int i = 19; i >= 0; --i)
        if(fa[x][i] != fa[y][i]) x = fa[x][i], y = fa[y][i];
    return fa[x][0];
}
void solve(){
    cin >> q;
    for(int i = 0, x, y; i < q; ++i){
        cin >> x >> y;
        x = col[x], y = col[y];
        int lca = LCA(x, y);
        int cnt = w[x] + w[y] - 2 * w[lca] + (sz[lca] > 1);
        cout << f[cnt] << endl;
    }
}
int main(){
    init();
    solve();
    return 0;
}