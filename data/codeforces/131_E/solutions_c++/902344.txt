#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <string>
#include <climits>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <list>

#define FOR(i, m, n) for (int i=m; i<n; i++)

using namespace std;

struct Bod {
  int x;
  int y;
  int index;
  bool operator<(const Bod &b) const {
    return (y<b.y || (y==b.y && x<b.x));
  }
};

#define EE 200000

int R[400000];
int S[400000];
int U1[400000];
int U2[400000];
int t[400000];
Bod q[400000];
int ret[10];
int N, M;

int main()
{
  scanf("%d%d", &N, &M);
  FOR (i, 1, M+1) {
    int x; int y; scanf("%d%d", &x, &y);
    q[i].x = x; q[i].y = y; q[i].index = i;
  }
  sort (q+1, q+M+1);
  FOR (i, 1, M+1) {
    int x; int y; int index;
    x = q[i].x; y = q[i].y;
    index = q[i].index;
    if (R[y]>0) { t[R[y]]++; t[index]++; }
    if (S[x]>0) { t[S[x]]++; t[index]++; }
    if (U1[EE+y-x]>0) { t[U1[EE+y-x]]++; t[index]++; }
    if (U2[x+y]>0) { t[U2[x+y]]++; t[index]++; }
    R[y] = index; S[x] = index; U1[EE+y-x] = index; U2[x+y] = index;
  }
  FOR (i, 1, M+1) {
    ret[t[i]]++;
  }
  FOR (i, 0, 9) printf("%d ", ret[i]);
  printf("\n");
  return 0;
}
