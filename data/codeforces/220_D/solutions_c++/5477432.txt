#include <cstdio>
#include <iostream>

using namespace std;

#define mod ((int)1e9 + 7)
#define LL long long

int has(int mask, int bit)
{
	return (mask & (1 << bit)) > 0;
}

int n, m;
long long ans, cnt[2][2];

int gcd(int a, int b)
{
	if (a < b)
		swap(a, b);

	while (b)
	{
		a %= b;
		swap(a, b);
	}

	return a;
}

int main()
{
	cin >> n >> m;

	for (int i = 0; i <= n; ++i)
		cnt[0][i % 2]++;

	for (int i = 0; i <= m; ++i)
		cnt[1][i % 2]++;

	ans = 0;

	for (int i = 0; i < 2; ++i)
		for (int j = 0; j < 2; ++j)
			for (int mask = 0; mask < 16; ++mask)
			{
				int x = (has(mask, 0) - i);
				int x2 = (has(mask, 2) - i);
				int y = (has(mask, 1) - j);
				int y2 = (has(mask, 3) - j);
				int s = (x2 * y - y2 * x); 

				if (s < 0)
					s = -s;

				if (s % 2 == 0)
				{
					long long p = 1;
					for (int k = 0; k < 4; ++k)
						p = (p * cnt[k % 2][has(mask, k)]) % mod;

					p = p * cnt[0][i] * cnt[1][j] % mod;
					ans = (ans + p) % mod;
				}
			}

	LL nm = (n + 1) * (m + 1) % mod;
	ans = (ans - nm + mod) % mod;
	ans = (ans - nm * (nm - 1) * 3 % mod + mod) % mod;

	for (int dx = 0; dx <= n; ++dx)
		for (int dy = 0; dy <= m; ++dy)
			if (dx || dy)
			{
				LL cur = 6ll * (n - dx + 1) * (m - dy + 1) * (gcd(dx, dy) - 1) % mod;
				if (dx > 0 && dy > 0)
					cur = cur * 2 % mod;

				ans = (ans - cur + mod) % mod;
			}

	cout << ans;
}

     		   			   	   		