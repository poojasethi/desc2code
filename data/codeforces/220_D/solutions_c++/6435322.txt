#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#include <string.h>
#include <string>
#include <ctype.h>
#include <ctime>
#include <bitset>
#include <vector>
#include <cassert>

using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)
template <class T> inline void chkmin(T &a, T b) { if (a>b) a=b; }
template <class T> inline void chkmax(T &a, T b) { if (a<b) a=b; }

typedef long long INT;
typedef pair<int, int> pii;

#define MOD 1000000007

int X,Y;
int cnt[10][10];
int gcd[4010][4010];

int main() {
	int i, j, a, b, c, d, e, f, x1, x2, y1, y2;
	scanf("%d%d", &X, &Y); X++, Y++;
	
	for (i=0; i<2; i++) 
		for (j=0; j<2; j++)
			cnt[i][j]=((i==1)?X/2:(X-X/2))*((j==1)?Y/2:(Y-Y/2));
	
	INT ans=0, s, z;
	for (a=0; a<2; a++) for (b=0; b<2; b++) 
	for (c=0; c<2; c++) for (d=0; d<2; d++) 
	for (e=0; e<2; e++) for (f=0; f<2; f++) {
		x1=c-a, x2=e-a, y1=d-b, y2=f-b;
		s=x1*y2-x2*y1;
		if (s%2==0) {
			ans+=1LL*cnt[a][b]*cnt[c][d]%MOD*cnt[e][f]%MOD;
			ans%=MOD;
		}
	}
	
	z=0; s=X*Y;
	assert(s>0);
	z=(z+s)%MOD;
	z=(z+s*(s-1)%MOD*3%MOD)%MOD;
	z=(z+1LL*X*Y%MOD*(Y-1)%MOD*(Y-2)%MOD)%MOD;
	z=(z+1LL*Y*X%MOD*(X-1)%MOD*(X-2)%MOD)%MOD;
	
	for (i=1; i<X; i++) for (j=1; j<Y; j++) {
		d=__gcd(i, j);
		if (d<2) continue;
		z=(z+1LL*(d-1)*(X-i)%MOD*(Y-j)%MOD*12%MOD)%MOD;
	}
	
	ans=(ans-z+MOD)%MOD;
	printf("%I64d\n", ans);
	
	return 0;
}
