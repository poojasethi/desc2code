#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

#define pause cout << " press any key to continue...",  cin >> chh
#define file_r(x) freopen(x,  "r",  stdin)
#define file_w(x) freopen(x,  "w",  stdout)
#define lowbit(x) ((x) & (-(x)))
#define repit(i, c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define rep(i, r) for (int i = 0; i <= r; i++)
#define rep2(i, l, r) for (int i = l; i <= r; i++)

using namespace std;
int chh;

typedef long long LL;

const LL N = 4005, MOD = 1000000007;

LL n, m;
int gcd[N][N];

inline LL C(LL n, LL f) {
    if (f % 2) return (n + 1) / 2;
    return n / 2 + 1;
}

inline void A(LL &x, LL y) {
    x = (x + y) % MOD;
}

inline LL M(LL x, LL y) {
    return x * y % MOD;
}

int main() {
    LL res, d, r, tmp;
    while (cin >> n >> m) {
        res = 0;
        rep(x, 1) rep(y, 1) rep(x1, 1) rep(y1, 1) rep(x2, 1) rep(y2, 1) {
            if (((x1 - x) * (y2 - y) - (x2 - x) * (y1 - y)) % 2) continue;
            A(res, M(M(C(n, x) * C(m, y), C(n, x1) * C(m, y1)), C(n, x2) * C(m, y2)));
        }
        d = max(n, m);
        rep(i, d) rep(j, i) gcd[i][j] = j ? gcd[j][i % j] : i;
        rep(i, d) rep2(j, i + 1, d) gcd[i][j] = gcd[j][i];
        r = 0;
        A(r, (n + 1) * (m + 1));
        rep(x, n) rep(y, m) {
            if (!x && !y) continue;
            tmp = 6LL * gcd[x][y] * (n - x + 1) * (m - y + 1);
            A(r, tmp);
            if (!x || !y) continue;
            A(r, tmp);
        }
        cout << (res - r + MOD) % MOD << endl;;
    }
    return 0;
}
