#include<map>
#include<set>
#include<ctime>
#include<cmath>
#include<queue>
#include<stack>
#include<bitset>
#include<vector>
#include<cstdio>
#include<string>
#include<cassert>
#include<cstring>
#include<numeric>
#include<sstream>
#include<iterator>
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long LL;
#define MM(a, x) memset(a, x, sizeof(a))
#define P(x) cout << #x << " = " << x << endl;

const LL mod = LL(1e9) + 7;

int gcd[4010][4010];
LL ways[2][2];

int main() {
	int r, c;
	cin >> r >> c;
	r++, c++;
	int t = max(r, c);
	gcd[0][0] = 1;
	for(int i = 1; i <= t; i++) gcd[i][0] = gcd[0][i] = i;
	for(int i = 1; i <= t; i++) for(int j = 1; j <= i; j++) gcd[i][j] = gcd[j][i] = gcd[i - j][j];
	for(int i = 0; i < r; i++) for(int j = 0; j < c; j++) ++ways[i & 1][j & 1];
	LL ret = 0;
	for(int x1 = 0; x1 < 2; x1++) for(int y1 = 0; y1 < 2; y1++)
			for(int x2 = 0; x2 < 2; x2++) for(int y2 = 0; y2 < 2; y2++)
					for(int x = 0; x < 2; x++) for(int y = 0; y < 2; y++) {
							int t = (x1 - x) * (y2 - y) - (x2 - x) * (y1 - y);
							if(t % 2 == 0) ret += ways[x1][y1] * ways[x2][y2] % mod * ways[x][y] % mod;
						}
	LL tot = (r * c) % mod;
	LL zero = tot;
	zero += tot * (tot - 1) * 3 % mod;
	for(int dx = 0; dx < r; dx++) for(int dy = 0; dy < c; dy++) {
			zero += 6LL * (r - dx) * (c - dy) % mod * (gcd[dx][dy] - 1) * ((dx > 0 && dy > 0) ? 2 : 1) % mod;
		}
	ret = (ret - zero % mod + mod) % mod;
	cout << ret << endl;
#ifdef WANBO_LOCAL
	system("pause");
#endif
	return 0;
}