#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

const int maxn = 1000+1;

string a, b;
int n, m;

int dp[maxn][maxn];
int par[maxn][maxn];

int check(int x) {
	return max(1, x);
}

void trace(int x, int y) {
//	cerr << x << " " << y << " " << par[x][y] << endl;
	if (!x && !y)
		return;
	if (par[x][y] == 0) {
		trace(x-1, y-1);
	}
	if (par[x][y] == 1) {
		trace(x-1, y);
		cout << "INSERT " << check(x) << " " << a[x-1] << endl;
	}
	if (par[x][y] == 2) {
		trace(x-1, y-1);
		cout << "REPLACE " << check(x) << " " << a[x-1] << endl;
	}
	if (par[x][y] == 3) {
		trace(x, y-1);
		cout << "DELETE " << x+1 << endl;		
	}

}

int main() {
	cin >> a >> b;
	swap(a, b);
	n = a.length();
	m = b.length();
	for (int i = 0; i <= n; ++i) { dp[i][0] = i; par[i][0] = 1;}
	for (int i = 0; i <= m; ++i) { dp[0][i] = i; par[0][i] = 3;}
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= m; ++j)
			if (a[i-1] == b[j-1])
				dp[i][j] = dp[i-1][j-1];
			else {
				dp[i][j] = dp[i-1][j]+1;
				par[i][j] = 1;
				if (dp[i-1][j-1]+1 <= dp[i][j]) {
					dp[i][j] = dp[i-1][j-1]+1;
					par[i][j] = 2;
				}
				if (dp[i][j-1]+1 <= dp[i][j]) {
					dp[i][j] = dp[i][j-1]+1;
					par[i][j] = 3;
				}
			}
	cout << dp[n][m] << endl;
	trace(n, m);
	return 0;

}

