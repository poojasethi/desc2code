#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int MAX_L = 1e3 + 5;

char A[MAX_L], B[MAX_L];
int dp[MAX_L][MAX_L];

void input()
{
    scanf("%s", A + 1);
    scanf("%s", B + 1);
}

void dfs(int i, int j)
{
    if (0 == i && 0 == j) return;
    if (A[i] == B[j] && dp[i][j] == dp[i - 1][j - 1])
    {
        dfs(i - 1, j - 1);
    }
    else if (i && j && dp[i][j] == dp[i - 1][j - 1]  + 1)
    {
        printf("REPLACE %d %c\n", i , B[j]);
        dfs(i - 1, j - 1);
    }
    else if (i && dp[i][j] == dp[i-1][j] + 1)
    {
        printf("DELETE %d\n", i );
        dfs(i - 1, j);
    }
    else if (j && dp[i][j] == dp[i][j-1] + 1)
    {
        printf("INSERT %d %c\n", i + 1, B[j]);
        dfs(i, j-1);    
    }
}

void solve()
{
    int n = strlen(A + 1);
    int m = strlen(B + 1);

    dp[0][0] = 0;
    for (int i = 1; i <= n; i++)
        dp[i][0] = i;
    for (int j = 1; j <= m; j++)
        dp[0][j] = j;

    for (int i = 1; i <= n; i ++)
        for (int j = 1; j <= m; j ++)
            dp[i][j] = min( min(dp[i-1][j], dp[i][j - 1]) + 1, dp[i - 1][j - 1]  + (A[i] != B[j]) );

    printf("%d\n", dp[n][m]);

    dfs(n, m);
}

int main()
{
//    freopen("nimo.in", "r", stdin);
    input();
    solve();
    return 0;
}