#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;
typedef __int64 LL;
const int maxn=200+7;
const int maxk=1000+5;
const int mod=1e9+7;
int dp[3][maxn][maxk],a[maxn];

void add(int &x,int y){
	x=(x+y)%mod;
}

int main()
{
	int i,j,n,m,k;
	while(scanf("%d%d",&n,&k)!=EOF){
		for(i=1;i<=n;i++) scanf("%d",&a[i]);
		sort(a+1,a+n+1);
		a[0]=a[1];
		int d=0;
		memset(dp,0,sizeof(dp));
		dp[0][0][0]=1;
		for(i=1;i<=n;i++){
			memset(dp[d^1],0,sizeof(dp[d^1]));
			for(j=0;j<=i;j++){
				for(int p=0;p<=k;p++){
					if(p+j*(a[i]-a[i-1])>k) break;
					add(dp[d^1][j][p+j*(a[i]-a[i-1])],dp[d][j][p]);		//新建一个非open
					if(j>0){
						add(dp[d^1][j-1][p+j*(a[i]-a[i-1])],(LL)dp[d][j][p]*j%mod);	//关闭一个open
						add(dp[d^1][j][p+j*(a[i]-a[i-1])],(LL)dp[d][j][p]*j%mod);	//移动到一个open里
					}
					add(dp[d^1][j+1][p+j*(a[i]-a[i-1])],dp[d][j][p]);		//新建一个open
				}
			}
			d^=1;
		}
		__int64 res=0;
		for(i=0;i<=k;i++){
			res+=dp[d][0][i];
			res%=mod;
		}
		printf("%I64d\n",res);
	}
	return 0;
}