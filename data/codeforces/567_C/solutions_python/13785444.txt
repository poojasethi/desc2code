def find_threes(n, k, l):

    d = {}
    count = 0
    
    for i in range(n):
        if l[i] not in d:
            d[l[i]] = [0,0,1]
        else:
            d[l[i]][2] += 1

        if l[i]/float(k) in d and k != 1 and l[i] != 0:
            d[l[i]][1] += d[l[i]/k][2]
            if l[i]/float(k**2) in d:
                count -= d[l[i]][0]
                d[l[i]][0] += d[l[i]/k][1]
                count += d[l[i]][0]
        elif (k == 1or l[i] == 0) and d[l[i]][2] >= 3:
            z = d[l[i]][2]
            count += (z**2 - 3*z + 2)/2

    return count

def main():
    (n, k) = (int(_) for _ in raw_input().split())
    l = [int(_) for _ in raw_input().split()]

    print(find_threes(n,k,l))

if __name__ == '__main__':
    main()
