import numpy as np
from collections import Counter

def choose(n, k):
    """
    A fast way to calculate binomial coefficients by Andrew Dalke (contrib).
    """
    if 0 <= k <= n:
        ntok = 1
        ktok = 1
        for t in xrange(1, min(k, n - k) + 1):
            ntok *= n
            ktok *= t
            n -= 1
        return ntok // ktok
    else:
        return 0

n, k = [int(x) for x in raw_input().split()]

a = [int(x) for x in raw_input().split()]

memo = {}
s = set()

if k == 1:
	res = 0
	hist = dict(Counter(a))
	for key in hist.keys():
		res += choose(hist[key], 3)
	print res
else:
	for x in a:
		s.add(x)
		if (x%(k**2) == 0):
			memo[(x,3)] = memo.get((x,3), 0) + memo.get((x/k, 2), 0)
			# print x, 'l=3', memo[(x,3)]
		
		if (x%k == 0):
			memo[(x,2)] =  memo.get((x,2), 0) + memo.get((x/k, 1), 0)
			# print x, 'l=2', memo[(x,2)]
		
		memo[(x,1)] = memo.get((x,1), 0) + 1
		# print x, 'l=1', memo[(x,1)]

	count = 0
	for x in s:
		count += memo.get((x,3), 0)

	print count
