#include <cstdio>
#include <cstring>
#include <cstdlib>

using namespace std;

const int MAXN = 205;

int c[MAXN], d[MAXN], dp[MAXN][MAXN], w[MAXN][MAXN], ct[MAXN], ans[MAXN];
int i, j, k, N, K, u, v;

int MIN(int x, int y)
 {
    return x < y ? x : y;
 }
 
void init()
 {
     scanf("%d%d", &N, &K);
     for (i = 1, d[0] = 0; i < N; i ++)
         scanf("%d", &d[i]);
     memset(w, 60, sizeof(w));
     for (i = 1; i <= N; i ++)
         w[i][i] = 0, c[i] = 1;
     for (i = 1; i < N; i ++)
      {
         scanf("%d%d", &u, &v);
         w[u][v] = w[v][u] = 1;
      }
 }

void Floyd()
 {
     for (k = 1; k <= N; k ++)
         for (i = 1; i <= N; i ++)
             for (j = 1; j <= N; j ++)
                 w[i][j] = MIN(w[i][j], w[i][k] + w[k][j]);
 }

void DP(int x, int fa)
 {
     for (int i = 1; i <= N; i ++)
         dp[x][i] = d[w[x][i]] + K;
     for (int i = 1; i <= N; i ++)
         if (w[x][i] == 1 && i != fa)
          {
            DP(i, x);
            for (int j = 1; j <= N; j ++)
                dp[x][j] += MIN(dp[i][j]-K, dp[i][c[i]]);
          }
     for (int i = 2; i <= N; i ++)
         if (dp[x][i] < dp[x][c[x]]) c[x] = i;
 }
 
void Construct(int x, int fa, int rc)
 {
     ans[x] = rc;
     for (int i = 1; i <= N; i ++)
         if (w[x][i] == 1 && i != fa)
            if (dp[i][rc]-K < dp[i][c[i]]) Construct(i, x, rc);
               else Construct(i, x, c[i]);
 }
 
void work()
 {
     Floyd();
     DP(1, -1);
     printf("%d\n", dp[1][c[1]]);
     Construct(1, -1, c[1]);
     for (i = 1; i < N; i ++)
         printf("%d ", ans[i]);
     printf("%d\n", ans[N]);
 }
 
int main()
 {
    init();
    work();
    return 0;
 }
