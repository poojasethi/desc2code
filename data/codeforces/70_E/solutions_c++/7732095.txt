#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define N 400
#define inf 100000000
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int a,b,c;
} g[N][N],f[N];
int i,j,k,n,m,x,y,t;
int d[N],a[N],next[N],head[N],h[N][N],an[N];
inline void add(int x,int y) {
	a[++t]=y,next[t]=head[x],head[x]=t;
	a[++t]=x,next[t]=head[y],head[y]=t;
}
void dfs(int x,int y) {
	int v,j,k;
	for (v=head[x];v;v=next[v]) if (a[v]!=y) {
		int A=a[v];
		dfs(A,x);
	}
	For(j,0,n-1) {
		int s=0,F=0;
		for (v=head[x];v;v=next[v]) if (a[v]!=y) {
			int A=a[v];
			F=1;
			s+=min(f[A].a,h[A][j+1]);
		}
		h[x][j]=min(inf,s+(!j?m:0))+d[j];
		if (!F) {
			if (j) continue;
			g[x][j].a=m;
		}
		for (v=head[x];v;v=next[v]) if (a[v]!=y) {
			int A=a[v],B=j?g[A][j-1].a-min(f[A].a,h[A][j+1]):m;
			if (g[x][j].a>B+s) {
				g[x][j].a=B+s;
				g[x][j].b=A;
				if (j) g[x][j].c=g[A][j-1].c;
			}
		}
		if (!j) g[x][j].c=x;
		g[x][j].a+=d[j];
		if (f[x].a>g[x][j].a) {
			f[x].a=g[x][j].a;
			f[x].b=j;
		}
	}
}
void dfs(int x,int y,int z,int fa,int ans);
inline void get(int x,int y,int z) {
	int A=f[x].b;
	if (g[x][A].a<h[x][z]) dfs(x,A,0,y,0);
	else dfs(x,z,1,y,an[y]);
}
void dfs(int x,int y,int z,int fa,int ans) {
	int v;
	if (!z) {
		an[x]=g[x][y].c;
		int A=0;
		if (y) {
			A=g[x][y].b;
			dfs(A,y-1,0,x,0);
		}
		for (v=head[x];v;v=next[v]) if (a[v]!=fa&&a[v]!=A) get(a[v],x,y+1);
	} else {
		an[x]=ans;
		for (v=head[x];v;v=next[v]) if (a[v]!=fa) get(a[v],x,y+1);
	}
}
int main() {
	scanf("%d%d",&n,&m);
	For(i,1,n-1) scanf("%d",&d[i]);
	For(i,1,n-1) {
		scanf("%d%d",&x,&y);
		add(x,y);
	}
	For(i,0,n)For(j,0,n) g[i][j].a=h[i][j]=inf;
	For(i,0,n) f[i].a=inf;
	dfs(1,0);
	printf("%d\n",f[1].a);
	dfs(1,f[1].b,0,0,0);
	For(i,1,n) printf("%d ",an[i]);
	printf("\n");
	//for(;;);
	return 0;
}
