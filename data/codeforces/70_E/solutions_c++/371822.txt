#include <stdio.h>
#include <vector>
#include <string.h>

const int kMaxN = 180;

int map[kMaxN][kMaxN];
int dp[kMaxN][kMaxN], center[kMaxN];
int d[kMaxN];
int n, k;

void Floyd() {
  for (int i = 0; i < n; ++i) map[i][i] = 0;
  for (int k = 0; k < n; ++k)
    for (int i = 0; i < n; ++i) if (i != k && map[i][k] != -1)
      for (int j = 0; j < n; ++j) if (j != i && j != k && map[k][j] != -1)
        if (map[i][j] == -1 || map[i][j] > map[i][k] + map[k][j])
          map[i][j] = map[i][k] + map[k][j];
}

void Calc(int u, int f) {
  std::vector<int> edge;
  edge.clear();
  for (int i = 0; i < n; ++i) {
    if (map[u][i] == 1 && i != f) {
      Calc(i, u);
      edge.push_back(i);
    }
  }
  center[u] = 0;
  for (int i = 0; i < n; ++i) {
    dp[u][i] = d[map[u][i]];
    for (size_t j = 0; j < edge.size(); ++j) {
      int v = edge[j];
      dp[u][i] += std::min(dp[v][i], dp[v][center[v]] + k);
    }
    if (dp[u][i] < dp[u][center[u]]) center[u] = i;
  }
}

void Retrieve(int u, int f) {
  for (int i = 0; i < n; ++i) {
    if (map[u][i] == 1 && i != f) {
      if (dp[i][center[i]] + k > dp[i][center[u]])
        center[i] = center[u];
      Retrieve(i, u);
    }
  }
}

int main() {
  scanf("%d%d", &n, &k);
  d[0] = 0;
  for (int i = 1; i < n; ++i) scanf("%d", d + i);
  memset(map, -1, sizeof(map));
  int x, y;
  for (int i = 1; i < n; ++i) {
    scanf("%d%d", &x, &y);
    --x; --y;
    map[x][y] = map[y][x] = 1;
  }
  Floyd();
  Calc(0, -1);
  Retrieve(0, -1);
  printf("%d\n", dp[0][center[0]] + k);
  for (int i = 0; i < n; ++i) {
    if (i != 0) printf(" ");
    printf("%d", center[i] + 1);
  }
  puts("");
  return 0;
}
