#include <iostream>
#include <algorithm>
#include <cstring>
#include <climits>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <cmath>
#include <cstdio>
using namespace std;
const int INF = 1000000000;
int D[185], dist[185][185], N, K, F[185][185], G[185], ans[185];
void go(int x, int p = 0) {
	for (int c = 1; c <= N; ++c)
		F[x][c] = D[dist[x][c]] + K;
	for (int i = 1; i <= N; ++i)
		if (dist[x][i] == 1 && p != i) {
			go(i, x);
			for (int c = 1; c <= N; ++c)
				F[x][c] += min(F[i][c] - K, F[i][G[i]]);
		}
	G[x] = 1;
	for (int c = 1; c <= N; ++c)
		if (F[x][G[x]] > F[x][c]) G[x] = c;
}
void getAns(int x, int c, int p = 0) {
	ans[x] = c;
	for (int i = 1; i <= N; ++i)
		if (dist[x][i] == 1 && p != i) {
			int nc = F[i][c] - K < F[i][G[i]] ? c : G[i];
			getAns(i, nc, x);
		}
}
int main() {
	scanf("%d%d", &N, &K);
	for (int i = 1; i < N; ++i) scanf("%d", &D[i]);
	for (int i = 1; i <= N; ++i)
		for (int j = 1; j <= N; ++j)
			dist[i][j] = i == j ? 0 : INF;
	for (int i = 1; i < N; ++i) {
		int a, b;
		scanf("%d%d", &a, &b);
		dist[a][b] = dist[b][a] = 1;
	}
	for (int k = 1; k <= N; ++k)
		for (int i = 1; i <= N; ++i)
			for (int j = 1; j <= N; ++j)
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
	go(1);
	printf("%d\n", F[1][G[1]]);
	getAns(1, G[1]);
	for (int i = 1; i <= N; ++i) printf("%d ", ans[i]);
	printf("\n");
}
