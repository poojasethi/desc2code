#include <vector>
#include <cstdio>
#include <set>
#include <map>
#include <algorithm>
#include <cstdlib>
#include <sstream>
#include <numeric>
#include <queue>
#include <iostream>
#include <string>
#include <cstring>
#include <utility>
#define sz(a) ((int)(a).size())
#define pb push_back
#define mk make_pair
#define fi first
#define se second
#define Rep(i,j,k) for (int i=(j); i<=(k); i++)
#define Repd(i,j,k) for (int i=(j); i>=(k); i--)
#define ALL(c) (c).begin(),(c).end()
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define SUM(a) accumulate(all(a),string())
#define online1
#define RAND ((rand()<<15)+rand())
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> II;
typedef long long LL;
#define N 200

int n, k;
int e[N][N], dis[N][N], len[N];
int f[N][N];

void Solve(int x, int fa){
	Rep(c,1,n)
		f[x][c]=len[dis[x][c]]+k;
	Rep(y,1,n)
		if (e[x][y] && y!=fa){
			Solve(y,x);
			Rep(c,1,n)
				f[x][c]+=min(f[y][0], f[y][c]-k);
		}
	f[x][0]=*min_element(f[x]+1,f[x]+n+1);
}

int ans[N];

void Construct(int x, int c, int fa){
	if (!c) c=min_element(f[x]+1,f[x]+n+1)-f[x];
	ans[x]=c;
	Rep(y,1,n)
		if (e[x][y] && y!=fa)
			if (f[y][0]<f[y][c]-k)
				Construct(y, 0, x);
			else
				Construct(y, c, x);
}

int main(){
	
	cin>>n>>k;
	Rep(i,1,n-1) cin>>len[i];
	
	memset(dis,16,sizeof dis);
	Rep(x,1,n) dis[x][x]=0;
	Rep(i,1,n-1){
		int x,y;
		cin>>x>>y;
		e[x][y]=e[y][x]=1;
		dis[x][y]=dis[y][x]=1;
	}
	
	Rep(k,1,n)
		Rep(x,1,n)
			Rep(y,1,n)
				dis[x][y]=min(dis[x][y], dis[x][k]+dis[k][y]);
				
	Solve(1,0);	
	
	cout<<f[1][0]<<endl;
	
	Construct(1,0,0);
	
	Rep(i,1,n)
		cout<<ans[i]<<" ";
	cout<<endl;

    return 0;
}
