#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
int n,C;
int a[300];
int dist[300][300];
struct edge
{
	int v;
	edge *n;
};
edge EPool[600],*ep=EPool,*g[300];
inline void addedge(int u,int v)
{
	ep->v=v,ep->n=g[u],g[u]=ep++;
}
bool vis[300];
int dp[300][300],from[300][300],fa[300];
void work(int u)
{
	vis[u]=1;
	for(int i=1;i<=n;i++)dp[u][i]=a[dist[u][i]];
	for(edge *i=g[u];i;i=i->n)
	{
		int v=i->v;
		if(vis[v])continue;
		fa[v]=u;
		work(v);
		for(int x=1;x<=n;x++)
		{
			int t=dp[v][x],p=x,tt;
			for(int y=1;y<=n;y++)if((tt=dp[v][y]+C)<t)t=tt,p=y;
			dp[u][x]+=t;
			from[v][x]=p;
		}
	}
}
int ans[300];
void determin(int u)
{
	if(!ans[fa[u]])determin(fa[u]);
	ans[u]=from[u][ans[fa[u]]];
}
int main()
{
	scanf("%d%d",&n,&C);
	for(int i=1;i<n;i++)scanf("%d",a+i);
	memset(dist,0x0f,sizeof(dist));
	for(int i=1;i<=n;i++)dist[i][i]=0;
	for(int i=1;i<n;i++)
	{
		int u,v;
		scanf("%d%d",&u,&v);
		dist[u][v]=dist[v][u]=1;
		addedge(u,v),addedge(v,u);
	}
	for(int k=1;k<=n;k++)
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++)dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);
	work(1);
	int t=dp[1][1],p=1;
	for(int i=2;i<=n;i++)if(dp[1][i]<t)t=dp[1][i],p=i;
	ans[1]=p;
	printf("%d\n%d",dp[1][p]+C,p);
	for(int i=2;i<=n;i++)determin(i),printf(" %d",ans[i]);putchar('\n');

	return 0;
}
