#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <queue>
#ifdef WIN32
#define TAT "%I64d"
#else
#define TAT "%lld"
#endif 
#define int64 long long

using namespace std;

int n,K,d[1010],dis[1010][1010],f[1010][1010],p[1010],ans[1010];
int head[1010],next[10010],to[100100],top;

void link(int x,int y)
{
	next[++top] = head[x];   head[x] = top;   to[top] = y; 
}
void dfs(int node,int fa,int diss,int rt)
{
	dis[rt][node] = diss;
	for (int i = head[node],y;y = to[i],i;i = next[i])
		if (y != fa)    dfs(y,node,diss + 1,rt);
}
void dfs(int node,int fa)
{
	for (int i = head[node],y;y = to[i],i;i = next[i])
		if (y != fa)    dfs(y,node);
	for (int i = 1;i <= n;i++)    f[node][i] = K + d[dis[node][i]];
	for (int i = head[node],y;y = to[i],i;i = next[i])
		if (y != fa)
			{
				for (int j = 1;j <= n;j++)
					f[node][j] = f[node][j] + min(f[y][j] - K,f[y][p[y]]);
			}
	p[node] = 1;
	for (int i = 2;i <= n;i++)
		if (f[node][i] < f[node][p[node]])    p[node] = i;
}
void dfs(int node,int fa,int whe)
{
	ans[node] = whe;
	for (int i = head[node],y;y = to[i],i;i = next[i])
		if (y != fa)
			{
				if (f[y][whe] - K < f[y][p[y]])    dfs(y,node,whe);
				else dfs(y,node,p[y]);
			}
}
void work()
{
	for (int i = 1;i <= n;i++)
		dfs(i,-1,0,i);
	dfs(1,0);
	printf("%d\n",f[1][p[1]]);
	dfs(1,0,p[1]);
	for (int i = 1;i <= n;i++)    printf("%d ",ans[i]);
}

int main()
{
	cin >> n >> K;   int x,y;
	for (int i = 1;i < n;i++)    scanf("%d",&d[i]);
	for (int i = 1;i < n;i++)
		scanf("%d %d",&x,&y),link(x,y),link(y,x);
	work();
}
  
