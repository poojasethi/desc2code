#include<cstdio>
#include<algorithm>

using namespace std;

const int MAX_N = 185;

const int INF = -1u / 4;

int n, k;
int cost[MAX_N];
int w[MAX_N][MAX_N];
int dp[MAX_N][MAX_N];
int best[MAX_N];

inline void dfs(int u, int p){
  for(int v = 0; v < n; v++){
    if(v != p and w[u][v] == 1){
      dfs(v, u);
    }
  }
  best[u] = 0;
  for(int c = 0; c < n; c++){
    dp[u][c] = cost[w[u][c]];
    for(int v = 0; v < n; v++){
      if(v != p and w[u][v] == 1){
	dp[u][c] += min(dp[v][c], dp[v][best[v]] + k);
      }
    }
    if(dp[u][c] < dp[u][best[u]]){
      best[u] = c;
    }
  }
}

inline void find_sol(int u, int p){
  for(int v = 0; v < n; v++){
    if(v != p and w[u][v] == 1){
      if(dp[v][best[u]] < dp[v][best[v]] + k){
	best[v] = best[u];
      }
      find_sol(v, u);
    }
  }
}

int main(){
  scanf("%d %d", &n, &k);
  for(int i = 1; i < n; i++){
    scanf("%d", cost + i);
  }
  
  fill_n(&w[0][0], sizeof(w) / 4, INF);
  for(int i = 0; i < n; i++){
    w[i][i] = 0;
  }
  for(int i = 1; i < n; i++){
    int u, v;
    scanf("%d %d", &u, &v);
    w[--u][--v] = w[v][u] = 1;
  }

  for(int k = 0; k < n; k++){
    for(int i = 0; i < n; i++){
      for(int j = 0; j < n; j++){
	w[i][j] = min(w[i][j], w[i][k] + w[k][j]);
      }
    }
  }
  
  dfs(0, -1);
  printf("%d\n", dp[0][best[0]] + k);
  find_sol(0, -1);
  for(int i = 0; i < n; i++){
    printf("%d ", best[i] + 1);
  }
  printf("\n");
}
