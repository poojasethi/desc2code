#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
int N, K;
int d[205];
const int INF = 1000000000;
int mat[205][205];
void floyd() {
	for (int k = 0; k < N; k++) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				mat[i][j] = min(mat[i][j], mat[i][k] + mat[k][j]);
			}
		}
	}
}
int opt[205][205], prt[205];
void dfs(int np, int fp) {
	for (int i = 0; i < N; i++) {
		if (mat[np][i] == 1 && i != fp) {
			dfs(i, np);
		}
	}
	prt[np] = 0;
	for (int c = 0; c < N; c++) {
		opt[np][c] = d[mat[np][c]];
		for (int i = 0; i < N; i++) {
			if (mat[np][i] == 1 && i != fp) {
				opt[np][c] += min(opt[i][c], opt[i][prt[i]] + K);
			}
		}
		if (opt[np][c] < opt[np][prt[np]]) {
			prt[np] = c;
		}
	}
}
void gen(int np, int fp) {
	for (int i = 0; i < N; i++) {
		if (mat[np][i] == 1 && i != fp) {
			if (opt[i][prt[i]] + K > opt[i][prt[np]]) {
				prt[i] = prt[np];
			}
			gen(i, np);
		}
	}
}
int main() {
	scanf("%d%d", &N, &K);
	d[0] = 0;
	for (int i = 1; i <= N - 1; i++) {
		scanf("%d", &d[i]);
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			mat[i][j] = INF;
		}
		mat[i][i] = 0;
	}
	for (int i = 1; i < N; i++) {
		int u, v;
		scanf("%d%d", &u, &v);
		u--, v--;
		mat[u][v] = mat[v][u] = 1;
	}
	floyd();
	memset(opt, 0, sizeof(opt));
	memset(prt, 0, sizeof(prt));
	dfs(0, -1);
	printf("%d\n", opt[0][prt[0]] + K);
	gen(0, -1);
	for (int i = 0; i < N; i++) {
		printf("%d%c", prt[i] + 1, (i == N - 1) ? '\n' : ' ');
	}
	return 0;
}
