#include <cstdio>
#include <cstring>
#include <cstdlib>
using namespace std;

const int N=181;

struct G
{
	int v,nxt;
}map[N+N];
int tt,hd[N];
int d[N],cost[N][N];
int f[N][N],p[N];
int belong[N];
int n,K;

inline int read(void)
{
	int s=0; char c=getchar();
	for (;c<'0'||c>'9';c=getchar());
	for (;'0'<=c&&c<='9';c=getchar()) s=s*10+c-'0';
	return s;
}

inline void ins(int u,int v)
{
	map[++tt].v=v;
	map[tt].nxt=hd[u];
	hd[u]=tt;
}

void getcost(int cent,int now,int pre,int deep)
{
	cost[now][cent]=d[deep];
	for (int k=hd[now];k;k=map[k].nxt)
		if (map[k].v^pre)
			getcost(cent,map[k].v,now,deep+1);
}

void init(void)
{
	int x,y;
	n=read(),K=read();
	for (int i=1;i<n;i++) d[i]=read();
	for (int i=1;i<n;i++)
	{
		x=read(),y=read();
		ins(x,y),ins(y,x);
	}
	for (int i=1;i<=n;i++) getcost(i,i,0,0);
}

inline int min(int i,int j)
{
	return i<j?i:j;
}

void treedp(int now,int pre)
{
	for (int i=1;i<=n;i++) f[now][i]=cost[now][i]+K;
	for (int k=hd[now];k;k=map[k].nxt)
		if (pre^map[k].v)
		{
			treedp(map[k].v,now);
			for (int i=1;i<=n;i++)
				f[now][i]+=min(f[map[k].v][p[map[k].v]],f[map[k].v][i]-K);
		}
	p[now]=1; for (int i=2;i<=n;i++) if (f[now][p[now]]>f[now][i]) p[now]=i;
}

void color(int now,int pre,int cent)
{
	belong[now]=cent;
	for (int k=hd[now];k;k=map[k].nxt)
		if (pre^map[k].v)
			color(map[k].v,now,f[map[k].v][cent]-K<f[map[k].v][p[map[k].v]]?cent:p[map[k].v]);
}

void work(void)
{
	treedp(1,0);
	color(1,0,p[1]);
	
	printf("%d\n",f[1][p[1]]);
	for (int i=1;i<n;i++) printf("%d ",belong[i]);
	printf("%d\n",belong[n]);
}

int main(void)
{	
	init();
	work();
	
	return 0;
}
	  	  		    	  		 		 	     	  	