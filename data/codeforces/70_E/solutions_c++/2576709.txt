#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;
#define mx 200
int m,n,j,k,l,i,o,p,__t;
int dist[mx][mx],F[mx][mx],represent[mx],D[mx],print[mx];

void solve(int P,int fa){
	for (int i = 1;i <= m;i ++) F[P][i] = D[dist[P][i]] + n;
	for (int i = 1;i <= m;i ++) if (dist[i][P] == 1 && i != fa){
		solve(i,P);
		for (int j = 1;j <= m;j ++) F[P][j] += min(F[i][j] - n,F[i][represent[i]]);
	}
	represent[P] = P;
	for (int i = 1;i <= m;i ++) if (F[P][i] < F[P][represent[P]]) represent[P] = i;
}

void check(int P,int fa,int near){
	print[P] = near;
	for (int i = 1;i <= m;i ++) if (dist[P][i] == 1 && i != fa){
		if (F[i][near] - n < F[i][represent[i]])
			check(i,P,near); else check(i,P,represent[i]);
	}
}

int main(){
	scanf("%d%d",&m,&n);
	memset(dist,63,sizeof dist);
	for (int i = 1;i <= m;i ++) dist[i][i] = 0;
	for (int i = 1;i < m;i ++)
		scanf("%d",D + i);
	for (int i = 1;i < m;i ++){
		scanf("%d%d",&j,&k);
		dist[j][k] = dist[k][j] = 1;
	}
	for (int k = 1;k <= m;k ++)
		for (int i = 1;i <= m;i ++)
			for (int j = 1;j <= m;j ++)
					dist[i][j] = min(dist[i][k] + dist[k][j],dist[i][j]);
	solve(1,0);
	printf("%d\n",F[1][represent[1]]);
	check(1,0,represent[1]);
	for (int i = 1;i <= m;i ++) printf("%d ",print[i]);
	return 0;
}