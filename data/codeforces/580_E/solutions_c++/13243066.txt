#include <iostream>
using namespace std;
long long n,m,k,pref[1<<18],seg[1<<18],lazy[1<<18];
char str[1<<18];
void push(int node){
    if(lazy[node]>=0){
        seg[node]=(pref[node]*lazy[node])%1000000007;
        if(node<(1<<17)){
            lazy[node*2]=lazy[node];
            lazy[node*2+1]=lazy[node];
        }
        lazy[node]=-1;
    }   
}
void update(int node,int l,int r,int L,int R,int val){
    if(L>=r||R<=l)return;
    if(L>=l&&R<=r){
        lazy[node]=val;
        return;
    }
    push(node);
    update(node*2,l,r,L,(L+R)/2,val);
    update(node*2+1,l,r,(L+R)/2,R,val);
    push(node*2);
    push(node*2+1);
    seg[node]=(seg[node*2]+seg[node*2+1])%1000000007;
}
long long sum(int node,int l,int r,int L,int R){
    push(node);
    if(L>=r||R<=l)return 0;
    if(L>=l&&R<=r)return seg[node];
    return (sum(node*2,l,r,L,(L+R)/2)+sum(node*2+1,l,r,(L+R)/2,R))%1000000007;
}
int main() {
    cin>>n>>m>>k;
    cin>>str;
    pref[1<<17]=1;
    for(int i=1;i<n;i++){
        pref[i+(1<<17)]=(pref[(1<<17)+i-1]*31324)%1000000007;
    }
    for(int i=0;i<n;i++){
        seg[i+(1<<17)]=(pref[i+(1<<17)]*(str[i]-'0'))%1000000007;
        lazy[i+(1<<17)]=-1;
    }
    for(int i=(1<<17)-1;i>0;i--){
        seg[i]=(seg[i*2]+seg[i*2+1])%1000000007;
        pref[i]=(pref[i*2]+pref[i*2+1])%1000000007;
        lazy[i]=-1;
    }
    for(int i=0;i<m+k;i++){
        int a,b,c,d;
        cin>>a>>b>>c>>d;
        if(a==1){
            update(1,b-1,c,0,1<<17,d);
        }
        else{
            if((sum(1,b-1,c-d,0,1<<17)*pref[(1<<17)+d])%1000000007==sum(1,b+d-1,c,0,1<<17))cout<<"YES\n";
            else cout<<"NO\n";
        }
    }
}