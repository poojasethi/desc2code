#include <iostream>
#include <sstream>
#include <algorithm>
#include <bitset>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <functional>
#include <numeric>
#include <iomanip>
#include <utility>

using namespace std;

struct kieu
{
    long long mang[5][5];
};

string need,s[10],p,xau;
int f[200000],base=1000000007;
kieu matrix;
long long dp[10],n,full;

int tinh()
{
    int q,i,ans;
    q=0;  ans=0;
    for (i=0;  i<=int(need.length())-1;  i++)
        {
            while ((q!=0)&&(need[i]!=p[q])) q=f[q];
            if (need[i]==p[q]) q++;
            if (q==int(p.length()))
                {
                    ans++;  q=f[q];
                }
        }
    return ans;
}

void init()
{
    int i,q;
    q=0;  f[1]=0;
    for (i=2;  i<=int(p.length());  i++)
        {
            while ((q!=0)&&(p[i-1]!=p[q])) q=f[q];
            if (p[i-1]==p[q]) q++;  f[i]=q;
        }
}

kieu nhan(kieu u, kieu v)
{
    int i,j,t;  kieu c;
    memset(c.mang,0,sizeof(c.mang));
    for (i=1;  i<=4;  i++)
        for (j=1;  j<=4;  j++)
            for (t=1;  t<=4;  t++)
                c.mang[i][j]=(c.mang[i][j]+u.mang[i][t]*v.mang[t][j])%base;
    return c;
}

kieu power(long long x)
{
    if (x==1) return matrix;
    else
        {
            kieu p;  p=power(x/2);  p=nhan(p,p);
            if (x&1) p=nhan(p,matrix);
            return p;
        }
}

void solve()
{
    kieu q;  int j,t;  long long ans;  n=full;
    if (n<=2)
        {
            need=s[n];  cout <<tinh();  return;
        }
    n-=2;
    while (s[1].length()<p.length())
        {
            xau=s[2]+s[1];  s[1]=s[2];  s[2]=xau;
            n--;  if (n==0) break;
        }
 //   cout <<s[1]<<" "<<s[2]<<" "<<n;
    if (n==0)
        {
            need=s[2];  cout <<tinh();  return;
        }
    s[3]=s[2]+s[1];  s[4]=s[3]+s[2];
    need=s[1];  dp[1]=tinh();
    need=s[2];  dp[2]=tinh();
    need=s[3];  dp[3]=tinh();
    need=s[4];  dp[4]=tinh();
    if (n+2<=4)
        {
            cout <<dp[n+2];  return;
        }
    q=power(n-2);  ans=0;
    for (j=4;  j<=4;  j++)
        for (t=1;  t<=4;  t++)
            ans=(ans+dp[t]*q.mang[t][j])%base;
    cout <<ans;
}

void khoitaomatran()
{
    memset(matrix.mang,0,sizeof(matrix.mang));
    matrix.mang[4][4]=1;
    matrix.mang[3][4]=2;
    matrix.mang[2][4]=base-1;
    matrix.mang[1][4]=base-1;
    matrix.mang[4][3]=1;
    matrix.mang[3][2]=1;
    matrix.mang[2][1]=1;
}

int main()
{
 //   freopen("test.inp","r",stdin);
    int test,ntest;
    cin >>n;
    scanf("%d\n",&test);  full=n;
    for (ntest=1;  ntest<=test;  ntest++)
        {
            s[1]="a";  s[2]="b";
            getline(cin,p);
            khoitaomatran();
            init();
            solve();
            cout <<endl;
        }
    return 0;
}
