#include <cstring>
#include <iostream>
#include <string>

using namespace std;

typedef long long LL;

const LL MOD = 1000000007;

LL m1[4][4]={
	{1,1,0,0},
	{1,0,0,0},
	{0,0,1,1},
	{0,0,1,0}
}, m2[4][4]={
	{1,1,0,0},
	{1,0,0,0},
	{1,0,0,0},
	{0,0,1,0}
};
LL c[4][4],d[4][4],n;

int m,nxt[100010];
string s;

void kmp_init(){
	nxt[0]=-1;
	for(int i=0,p=0;i<s.length();i++){
		for(p=nxt[i];(~p)&&s[p]!=s[i];p=nxt[p]);
		nxt[i+1]=++p;
	}
}
LL kmp(const string &a,int l,int r){
	LL ans=0;
	for(int i=0,p=0;i<a.length();i++){
		for(;(~p)&&s[p]!=a[i];p=nxt[p]);
		if(++p == s.length()){
			if(i>=l && i<r) ans++;
			p=nxt[p];
		}
	}
	return ans;
}
void mul(LL a[][4],LL b[][4],LL c[][4]){
	LL t[4][4]={0};
	for(int i=0;i<4;i++)
		for(int j=0;j<4;j++)
			for(int k=0;k<4;k++)
				(t[i][j]+=a[i][k]*b[k][j])%=MOD;
	memcpy(c,t,sizeof(t));
}

void print(LL c[][4]){
	for(int i=0;i<5;i++){
		for(int j=0;j<5;j++) cout << c[i][j] << ' ';
		cout << endl;
	}
}

void pow(LL t){
	memset(c,0,sizeof(c));
	for(int i=0;i<4;i++) c[i][i]=1;mul(m2,m1,d);
	for(LL x=t>>1;x;x>>=1,mul(d,d,d)) if(x&1) mul(c,d,c);
	if(t&1) mul(m1,c,c);
}
LL solve(){
	string a="a",b="b";
	kmp_init();
	if(n==1) return kmp(a,0,a.length());
	if(n==2) return kmp(b,0,b.length());
	int x=1;
	while(a.length()<s.length() && x<=n) a=b+a,swap(a,b),x++;
	if(x>n) return 0;
	if(x==n) return kmp(a,0,a.length());
	pow(n-x-1);
	LL y[4]={0};
	int la=a.length(),lb=b.length(),ls=s.length();
	for(int i=0;i<4;i++) y[i]=c[i][0]%MOD;
	return (y[0]*kmp(b,0,lb)+y[1]*kmp(b+a,lb,lb+la)+y[2]*kmp(a+b,la,la+ls-1)+y[3]*kmp(b+b,lb,lb+ls-1))%MOD;
}
int main()
{
	cin >> n >> m;
	for(int i=0;i<m;i++){
		cin >> s;
		cout << solve() << endl;
	}
	return 0;
}
