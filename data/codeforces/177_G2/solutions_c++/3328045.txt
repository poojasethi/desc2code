#include <cstdio>
#include <string>
#include <cstring>
using namespace std;

#define _match(a,b) ((a)==(b))

const int N = 1000000007;

typedef __int64 ll;
int fail[100005] = {-1};
string s[3];
char p[100005];
int matrix[66][2][2];

void mul(int a[2][2],int b[2][2],int c[2][2]) {
int i,j,k;
ll temp;
    for (i = 0; i < 2; ++i) {
        for (j = 0; j < 2; ++j) {
            temp = 0;
            for (k = 0; k < 2; ++k) {
                temp += ((ll) a[i][k]) * ((ll) b[k][j]) % N;
                if (temp >= N) {
                    temp -= N;
                }
            }
            c[i][j] = temp;
        }
    }
}

int get(ll x) {
int i, t[2][2],temp[2][2];
    if (x <= 2) {
        return 1;
    }
    
    matrix[0][0][0] = 1;
    matrix[0][1][0] = 1;
    matrix[0][0][1] = 1;
    matrix[0][1][1] = temp[0][1] = temp[1][0] = 0;
    temp[0][0] = temp[1][1] = 1;
    x -= 2;
    for (i = 1; x >> i; ++i) {
        mul(matrix[i - 1], matrix[i - 1], matrix[i]);
    }
    for (i = 0; x ; ++i, x >>= 1) {
        if (x  & 1) {
            mul(temp, matrix[i],t);
            memcpy(temp,t,sizeof(t));
        }
    }
    i = temp[0][0] + temp[1][0];
    return (i >= N)?(i - N):i;

}

void getfail(const char *pat,int lp) {
int i,j;
    for (j=1;j<lp;j++){
        for (i=fail[j-1];i>=0&&!_match(pat[i+1],pat[j]);i=fail[i]);
        fail[j]=(_match(pat[i+1],pat[j])?i+1:-1);
    }
}

int pat_match(int ls,const char * str,int lp,const char * pat){
int i,j;
    for (i=j=0;i<ls&&j<lp;i++)
        if (_match(str[i],pat[j]))
            j++;
        else if (j)
            j=fail[j-1]+1,i--;
    return j==lp?(i-lp):-1;
}


void run(ll n,const char *p) {
int len,now,i,j,c,last;
    if (n == 1) {
        puts(strcmp(p,"a")?"0":"1");
        return;
    }
    if (n == 2) {
        puts(strcmp(p,"b")?"0":"1");
        return;
    }
    if (strcmp(p,"a") == 0) {
        printf("%d\n",get(n - 2));
        return;
    }
    if (strcmp(p,"b") == 0) {
        printf("%d\n",get(n - 1));
        return;
    }
    s[0] = 'a';
    s[1] = 'b';
    len = strlen(p);
    getfail(p, len);
    for (i = 2,now = 1;;) {
        if (++now == 3) {
            now = 0;
        }
        s[now] = s[(now + 2) % 3] + s[(now + 1) % 3];
        if (++i == n) {
            break;
        }
        if (s[now].size() >= len) {
            break;
        }
    }
    if (s[now].size() >= len) {
        for (j = i;;) {
            if ((last = pat_match(s[now].size(),s[now].c_str(),len,p)) >= 0) {
                break;
            }
            if (j - i == 3) {
                break;
            }
            if (j == n) {
                break;
            }
            ++j;
            if (++now == 3) {
                now = 0;
            }
            s[now] = s[(now + 2) % 3] + s[(now + 1) % 3];
        }
        if (last < 0) {
            puts("0");
            return;
        }
        i = j;
        for (c = 1;;) {
            j = pat_match(s[now].size() - last - 1,s[now].c_str() + last + 1,len,p);
            if (j < 0) {
                break;
            }
            last = j + last + 1;
            ++c;
        }
        /*while (c != 1)
        ;*/

        if (i == n) {
            puts("1");
            return;
        }
        if (++now == 3) {
            now = 0;
        }
        ++i;
        s[now] = s[(now + 2) % 3] + s[(now + 1) % 3];
        for (c = 1;;) {
            j = pat_match(s[now].size() - last - 1,s[now].c_str() + last + 1,len,p);
            if (j < 0) {
                break;
            }
            last = j + last + 1;
            ++c;
        }
        if (i == n) {
            printf("%d\n",c);
            return;
        }
        if (c == 2) { // 1 2 4 7...
            // i - 1 .. 3
            // i.. 4
            i = get(n - i + 4) - 1;
            if (i < 0) {
                i += N;
            }
            printf("%d\n",i);

            return;
        }
        // 1 1
        /*while (c != 1)
        ;*/
        ++i;
        if (++now == 3) {
            now = 0;
        }
        s[now] = s[(now + 2) % 3] + s[(now + 1) % 3];
        for (c = 1;;) {
            j = pat_match(s[now].size() - last - 1,s[now].c_str() + last + 1,len,p);
            if (j < 0) {
                break;
            }
            last = j + last + 1;
            ++c;
        }
        if (i == n) {
            printf("%d\n",c);
            return;
        }
        if (c == 2) { // 1 1 2
            //i .. 3
            printf("%d\n",get(n - i + 3));


        }
        else { // 1 1 3
            /*while (c != 3)
            ;*/
            i = get(n - i + 4) -  ((n - i) & 1);
            if (i < 0) {
                i += N;
            }
            printf("%d\n",i);
        }   
    }
    else {
        /*while (i != n)
        ;*/
        puts("0");
        return;
    }
}
int main() {
ll n;
int i;
    for (scanf("%I64d%d",&n,&i);i;--i) {
        scanf("%s",p);
        run(n,p);
      }
    return 0;
}