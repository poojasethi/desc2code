#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <queue>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>          //cout<<fixed<<setprecision(10);
//#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
//#include <ctime>
//#include <memory.h>
//#include <cassert>

#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, A, B) for (int I = (A); I < (B); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) ((int)strlen(X))
#define F first
#define S second
#define IOS ios_base::sync_with_stdio(0)
#ifdef ONLINE_JUDGE
#define FILEIO(name) \
    freopen(name".in", "r", stdin); \
    freopen(name".out", "w", stdout);
#else
#define FILEIO(name)
#endif

using namespace std;

typedef long long ll;
typedef long double ld;
/*#include<complex.h>
typedef complex<double> co;
#define X real()
#define Y imag()*/

const ll mod = 1e9 + 7;

const int maxn = 4;
template<class T>
struct Matrix {
	int r, c;
	T a[maxn][maxn];
	Matrix() {
		memset(a, 0, sizeof a);
	}
	Matrix(int si) {
		memset(a, 0, sizeof a);
		r = c = si;
		for(int i = 0; i < si; i++)
			a[i][i] = 1;
	}
	Matrix operator*(const Matrix &rhs) {
		Matrix<T> ret;
		ret.r = r;
		ret.c = rhs.c;
		for(int k = 0; k < c; ++k)
			for(int i = 0; i < ret.r; ++i)
				for(int j = 0; j < ret.c; ++j)
					ret.a[i][j] = (ret.a[i][j] + (ll)a[i][k] * rhs.a[k][j]) % mod;
		return ret;
	}
	Matrix operator ^ (ll b) {
		Matrix<T> ret, base = *this;
		int setret = 0;
		while(b) {
			if(b & 1) ret = (setret ? ret*base : base), setret = 1;
			base = base * base;
			b >>= 1;
		}
		return ret;
	}
};

int P[1000000];
int KMP(string A, string B) {
	int l = A.length();
	A = A + "#" + B;
	P[0] = -1;
	int x = -1, ret = 0;
	REP(i, 1, A.length()) {
		while(x >= 0 && A[x + 1] != A[i])x = P[x];
		if(A[x + 1] == A[i])x++;
		P[i] = x;
		if(P[i] == l - 1)ret++;
	}
	return ret;
}

Matrix<int> M;//BA=A,B,AB,BB
string fs[30];
string instr;
ll k;

int go() {
	if(k < 30)return KMP(instr, fs[k]);
	string A, B;
	int I;
	for(int i = 1; i < 30; i++) {
		if(fs[i].length() >= instr.length()) {
			B = fs[i + 1];
			A = fs[i];
			I = i;
			break;
		}
	}
	ll CA = KMP(instr, A);
	ll CB = KMP(instr, B);
	ll CBA = KMP(instr, B + A) - CB - CA;
	ll CAB = KMP(instr, A + B) - CA - CB;
	ll CBB = KMP(instr, B + B) - CB - CB;
	Matrix<int> co;
	co.r = 1;
	co.c = 4;
	co.a[0][1] = 1;
	co = co * (M ^ (k - I - 1));
	return (co.a[0][0] * (CBA + CA) + co.a[0][1] * CB + co.a[0][2] * CAB + co.a[0][3] * CBB) % mod;
}

int main() {
	M.r = M.c = 4;
	M.a[0][1] = M.a[0][2] = M.a[1][0] = M.a[1][1] = M.a[2][3] = M.a[3][2] = 1;

	fs[1] = "a";
	fs[2] = "b";
	for(int i = 3; i < 30; ++i)
		fs[i] = fs[i - 1] + fs[i - 2];

	int m;
	cin >> k >> m;
	while(m--) {
		cin >> instr;
		cout << go() << endl;
	}
	return 0;
}
