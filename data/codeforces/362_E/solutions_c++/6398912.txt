//In the name of God
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <climits>
#include <complex>
#include <fstream>
#include <cassert>
#include <cstdio>
#include <bitset>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>

#define X first
#define Y second
// #define X real()
// #define Y imag()
// #define cin fin
// #define cout fout

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef complex<ld> point;
typedef pair<int, int> pii;
typedef pair<pii, int> piii;
const int maxn = 50;

int n, k, par[maxn], best[maxn], c[maxn][maxn], org[maxn][maxn];

inline int dij (int st)
{
  fill(best, best + n, 1e9);
  best[st] = 0;
  memset(par, -1, sizeof par);
  set<pii> s;
  for(int i = 0 ; i < n ; i++)
    s.insert(pii(best[i], i));
  for(; s.size() ;)
    {
      int v = s.begin()->Y;
      s.erase(*s.begin());
      for(int i = 0 ; i < n ; i++)
	if((org[v][i] && c[v][i] == 0) || c[v][i])
	  {
	    int w = c[v][i] == 0;
	    if(best[i] > best[v] + w)
	      {
		s.erase(pii(best[i], i));
		best[i] = best[v] + w;
		s.insert(pii(best[i], i));
		par[i] = v;
	      }
	  }
    }
  if(best[n - 1] > k)
    return 0;
  k -= best[n - 1];
  int ret = 1e9;
  for(int i = n - 1 ; par[i] != -1 ; i = par[i])
    {
      if(c[par[i]][i] == 0)
	c[par[i]][i] = 1;
      ret = min(ret, c[par[i]][i]);
    }
  for(int i = n - 1 ; par[i] != -1 ; i = par[i])
    c[par[i]][i] -= ret, c[i][par[i]] += ret;
  return ret;
}

inline int maxflow ()
{
  int ret = 0;
  while(1)
    {
      int hlp = dij(0);
      if(hlp == 0)
	break;
      ret += hlp;
    }
  return ret;
}

int main ()
{
  ios_base :: sync_with_stdio(0);
  cin >> n >> k ;
  for(int i = 0 ; i < n ; i++)
    for(int j = 0 ; j < n ; j++)
      {
	cin >> c[i][j] ; 
	org[i][j] = c[i][j];
      }
  cout << maxflow() << endl ;
}
