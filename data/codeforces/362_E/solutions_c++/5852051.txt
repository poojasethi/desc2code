#include <iostream>
#include <cstring>
#include <queue>
#include <set>
using namespace std;
const int INF = 1000000000;
const int MAX = 55;
int c[MAX][MAX], par[MAX], d[MAX], len[MAX], n, k;
bool good[MAX][MAX];
int bfs(int s, int t)
{
	memset(par, -1, sizeof(par));
	memset(len, 0, sizeof(len));
	for (int i = 0; i < MAX; i++)
		d[i] = INF;
	queue<int> q;
	d[s] = 0;
	len[s] = INF;
	q.push(s);
	while (!q.empty())
	{
		int v = q.front();
		q.pop();
		for (int u = 0; u < n; u++)
			if (c[v][u] && d[u] > d[v] + 1)
			{
				d[u] = d[v] + 1;
				par[u] = v;
				len[u] = c[v][u];
				q.push(u);
			}
	}
	int mn = INF;
	if (par[t] == -1)
		return 0;
	int v = t;
	while (v != -1)
	{
		mn = min(mn, len[v]);
		v = par[v];
	}
	return mn;
}
void dij(int st)
{
	for (int i = 0; i < MAX; i++)
		d[i] = INF;
	set<pair<int, int> > s;
	d[st] = 0;
	s.insert(make_pair(d[st], st));
	while (!s.empty())
	{
		int v = s.begin()->second;
		s.erase(s.begin());
		for (int u = 0; u < n; u++)
			if (good[v][u])
			{
				int w;
				if (c[v][u] == 0)
					w = 1;
				else
					w = 0;
				if (d[u] > d[v] + w)
				{
					par[u] = v;
					s.erase(make_pair(d[u], u));
					d[u] = d[v] + w;
					s.insert(make_pair(d[u], u));
				}
			}
	}
}
int flow()
{
	int ans = 0, mn;
	while (mn = bfs(0, n - 1))
	{
		ans += mn;
		int v = n - 1;
		while (true)
		{
			int u = par[v];
			if (u == -1)
				break;
			c[u][v] -= mn;
			c[v][u] += mn;
			v = par[v];
		}
	}
	while (true)
	{
		dij(0);
		if (k >= d[n - 1])
		{
			ans++;
			k -= d[n - 1];
			int v = n - 1;
			while (true)
			{
				int u = par[v];
				if (u == -1)
					break;
				if (c[u][v] == 0)
					c[u][v]++;
				c[u][v]--;
				c[v][u]++;
				v = par[v];
			}
		}
		else
			break;
	}
	return ans;
}
int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			cin >> c[i][j];
			if (c[i][j])
				good[i][j] = true;
		}
	cout << flow();
	return 0;
}
