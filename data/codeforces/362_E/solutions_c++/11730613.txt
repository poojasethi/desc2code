#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
const int INF = 1e9;
bool vis[55], flag;
int a[55], q[500005], cost[500005];
int d[55], way[55], path[55];
int node[500005], next[500005], flow[500005];
int l,r,n,k,i,j,ans,tot,minx,x;

void add(int x,int y,int z1,int z2){
  node[++tot]=y; next[tot]=a[x]; a[x]=tot; flow[tot]=z1; cost[tot]=z2;
  node[++tot]=x; next[tot]=a[y]; a[y]=tot; flow[tot]=0; cost[tot]=-z2;
}

void spfa(){
  memset(d,10,sizeof(d));
  memset(vis,0,sizeof(vis));
  d[1]=0; vis[1]=1;
  for (q[l=r=1]=1;l<=r;vis[q[l++]]=0)
    for (i=a[q[l]];i;i=next[i])
    if (flow[i] && d[node[i]]>d[q[l]]+cost[i]){
      d[node[i]] = d[q[l]]+cost[i];
      path[node[i]] = q[l]; way[node[i]]=i;
      if (!vis[node[i]]) vis[q[++r]=node[i]]=1;
    }
}

int main(){
  scanf("%d%d",&n,&k);
  for (i=1,tot=1;i<=n;i++)
    for (j=1;j<=n;j++){
      scanf("%d",&x);
      if (x){
        add(i,j,x,0);
        add(i,j,INF,1);
      }
    }
  while (k>=0){
    spfa();
    if (d[n]==d[0]) break;
    minx = INF;
    for (i=n;i>1;i=path[i])
      minx = min(minx, flow[way[i]]);
    if (d[n]<=k/minx){
      for (i=n;i>1;i=path[i])
        flow[way[i]]-=minx, flow[way[i]^1]+=minx;
      k -= d[n]*minx; ans+=minx;
    } else
    {
      ans+=k/d[n];
      break;
    }
  }
  printf("%d\n",ans);
  return 0;
}