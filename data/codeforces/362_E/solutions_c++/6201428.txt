#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;


struct e
{
    int u,v,w,c,pre;
}edge[55*55*4];
int n,UpperLimit,x,dex=-1;
int dis[55],visit[55],adj[55],pre[55],qe[55];
int ans_cost,ans;


inline void add(int u,int v,int w,int c)
{
    edge[++dex].u=u;
    edge[dex].v=v;
    edge[dex].w=w;
    edge[dex].c=c;
    edge[dex].pre=adj[u];
    adj[u]=dex;
}


inline int spfa()
{
    memset(dis,0x7f,sizeof(dis));
    memset(visit,0,sizeof(visit));
    memset(pre,-1,sizeof(pre));
    memset(qe,-1,sizeof(qe));
    queue<int>q;
    visit[1]=1;dis[1]=0;
    q.push(1);
    while(!q.empty())
    {
        int u=q.front();q.pop();
        for(int i=adj[u];i!=-1;i=edge[i].pre)
        if(edge[i].w)
        {
            int v=edge[i].v;
            if(dis[u]+edge[i].c<dis[v])
            {
                dis[v]=dis[u]+edge[i].c;
                pre[v]=u;qe[v]=i;
                if(!visit[v])
                {
                    visit[v]=1;
                    q.push(v);
                }
            }
        }
        visit[u]=0;
    }
    if(dis[n]>10000000)return 0;
    return 1;
}


inline int ek()
{
    int aug=1<<30;
    for(int i=n;i!=1;i=pre[i])
    {
        aug=min(aug,edge[qe[i]].w);
    }
    if(ans_cost+dis[n]*aug>UpperLimit)
    {
        ans+=(UpperLimit-ans_cost)/dis[n];
        return 0;
    }
    ans_cost+=dis[n]*aug;
    ans+=aug;
    for(int i=n;i!=1;i=pre[i])
    {
        edge[qe[i]].w-=aug;
        edge[qe[i]^1].w+=aug;
    }
    return 1;
}


int main()
{
    scanf("%d%d",&n,&UpperLimit);
    memset(adj,-1,sizeof(adj));
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            scanf("%d",&x);
            if(x)
            {
                add(i,j,x,0);
                add(j,i,0,0);
                add(i,j,UpperLimit,1);
                add(j,i,0,-1);
            }
        }   
    }
    while(spfa())
        if(!ek())break;
    printf("%d\n",ans);
    return 0;
}
