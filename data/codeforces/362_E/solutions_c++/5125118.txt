#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#define clear(a,v) memset((a),(v),sizeof(a))
using namespace std;
const int N=50+10;
const int M=N*N*4;
const int INF=0x3f3f3f3f;
int u[M],v[M],w[M],cap[M],first[N],next[M],e;
int pre[N],d[N],n,m;
queue<int> q;
bool inq[N];
void init(){
    clear(first,-1);
    e=0;
}
void insert(int f,int t,int val,int cost,int type=1){
    u[e]=f; v[e]=t; cap[e]=val; w[e]=cost;
    next[e]=first[f]; first[f]=e++;
    if(type) insert(t,f,0,-cost,0);
}
void spfa(int s,int cnt){
    clear(inq,false);
    clear(pre,-1);
    for(int i=0;i<=cnt;i++) d[i]=INF;
    d[s]=0;
    q.push(s);
    inq[s]=true;
    while(!q.empty()){
        int x=q.front();
        q.pop();
        inq[x]=false;
        for(int i=first[x];i+1;i=next[i]){
            int y=v[i];
            if(cap[i]&&d[x]+w[i]<d[y]){
                d[y]=d[x]+w[i];
                pre[y]=i;
                if(!inq[y]){
                    q.push(y);
                    inq[y]=true;
                }
            }
        }
    }
}
int min_cost(int s,int t,int cnt){
    int ans=0;
    while(1){
        spfa(s,cnt);
        if(d[t]==INF) break;
        int tmp=INF;
        if(d[t]>0){
            tmp=m/d[t];
            if(tmp==0) break;
        }
        for(int i=pre[t];i+1;i=pre[u[i]]) tmp=min(tmp,cap[i]);
        for(int i=pre[t];i+1;i=pre[u[i]]){
            cap[i]-=tmp;
            cap[i^1]+=tmp;
        }
        ans+=tmp;
        m-=d[t]*tmp;
    }
    return ans;
}
int main(){
    //freopen("in.cpp","r",stdin);
    while(scanf("%d%d",&n,&m)==2){
        init();
        int s=1, t=n;
        for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++){
            int k;
            scanf("%d",&k);
            if(k) insert(i,j,k,0);
            if(i!=j&&k) insert(i,j,INF,1);
        }
        printf("%d\n",min_cost(s,t,n));
    }
    return 0;
}
