#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;


struct edge {
	int v, c, q, next;
};

edge w[9999];
int ww[99], dist[99], visit[99], stq[99], que[1 << 20], N, M, W = 1;


void addEdge(int u, int v, int c, int q) {
	w[++ W].v = v; w[W].c = c; w[W].q = q;  w[W].next = ww[u]; ww[u] = W;
	w[++ W].v = u; w[W].c = 0; w[W].q = -q; w[W].next = ww[v]; ww[v] = W;
}

int main() {
//	freopen("E.in", "r", stdin);
//	freopen("E.out", "w", stdout);
	
	scanf("%d%d", &N, &M);
	for (int i = 1; i <= N; ++ i)
		for (int j = 1, x; j <= N; ++ j) {
			scanf("%d", &x);
			if (x) addEdge(i, j, x, 0), addEdge(i, j, 1 << 30, 1);
		}
	
	int nowcost = 0, maxflow = 0;
	for (int la, s = 1, t = N; ; ) {
		memset(dist, 60, sizeof(dist));
		memset(visit, 0, sizeof(visit));	
		dist[s] = 0; visit[s] = 1; que[la = 1] = s;
		for (int fi = 1; fi <= la; ++ fi) {
			int	u = que[fi];
			for (int i = ww[u]; i; i = w[i].next) if (w[i].c) {
				int	v = w[i].v;
				if (dist[v] <= dist[u] + w[i].q) continue;
				dist[v] = dist[u] + w[i].q; stq[v] = i;
				if (visit[v]) continue;
				visit[v] = 1; que[++ la] = v;
			}
			visit[u] = 0;
		}
		if (dist[t] > 1 << 29) break;
		int	flow = 9999999;
		for (int i = t; i != s; i = w[stq[i] ^ 1].v) flow = min(flow, w[stq[i]].c);
		if (nowcost + flow * dist[t] <= M) {
			maxflow += flow;
			nowcost += flow * dist[t];
			for (int i = t; i != s; i = w[stq[i] ^ 1].v) w[stq[i]].c -= flow, w[stq[i] ^ 1].c += flow;
			continue;
		}
		flow = (M - nowcost) / dist[t];
		maxflow += flow;
		break;
	}
	
	printf("%d\n", maxflow);
	
	return 0;
}