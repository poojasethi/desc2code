#include <iostream>
#include <cstdio>
#include <vector>

using namespace std;

const int inf = 1000 * 1000 * 1000;
const int maxn = 1000;

struct Edge {
	int a, b, c, cost, f;
};

Edge edge[maxn * maxn];

int n, k, sz, q[maxn * maxn], p[maxn], d[maxn], f[maxn], ans, in[maxn], l, r;
vector <int> g[maxn];

void add_edge(int a, int b, int c, int cost) {
	edge[sz].a = a;
	edge[sz].b = b;
	edge[sz].c = c;
	edge[sz].cost = cost;
	g[a].push_back(sz++);
	edge[sz].a = b;
	edge[sz].b = a;
	edge[sz].c = 0;
	edge[sz].cost = - cost;
	g[b].push_back(sz++);
	return;
}

void init() {
	for (int i = 1; i <= n; i++) {
		p[i] = - 1;
		in[i] = false;
		d[i] = inf;
		f[i] = 0; 
	}

	l = r = 0;
	q[++r] = 1;
	in[1] = true;
	f[1] = inf;
	d[1] = 0;
	return;
}

bool bfs() {
	init();

	int v, to, id;

	while (l < r) {
		v = q[++l];
		in[v] = false;

		for (int i = 0; i < (int)g[v].size(); i++) {
	        	id = g[v][i];
			to = edge[id].b;

			if (edge[id].c - edge[id].f > 0 && d[to] > d[v] + edge[id].cost) {
	                	d[to] = d[v] + edge[id].cost;
				f[to] = min(f[v], edge[id].c - edge[id].f);
				p[to] = id;
				if (!in[to]) {
		                	in[to] = true;
					q[++r] = to;
				} 
			}                             
		}                               
	}

	if (f[n] > 0)
		return true;
	return false;
}

int x;

int main() {
//	freopen("in", "r", stdin);
//	freopen("out", "w", stdout);

	cin >> n >> k;

	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++) {
			cin >> x;
			if (x) {
				add_edge(i, j, x, 0);
				add_edge(i, j, inf, 1);
			}
		}

	while (bfs()) {
		int v = n, cur;
		if (d[n] == 0)
			cur = f[n];
		else
			cur = min(f[n], k / d[n]);

		if (!cur)
			break;

		k -= cur * d[n];
		ans += cur;	
	
		while (p[v] != - 1) {
			edge[p[v]].f += cur;
			edge[p[v] ^ 1].f -= cur;
			v = edge[p[v]].a;
		}
	}
	
	cout << ans;
	
	return 0;
}
