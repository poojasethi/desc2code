#include<stdio.h>
#include<memory.h>
#include<queue>
using namespace std;
const int inf=1<<30,N=101,M=999999;
int ne,nv,fc[M],fw[M],to[M],next[M];
int cost[N],v[N],pe[N],pv[N];
bool vis[N];
queue <int> q;
int MCMF(int s,int t,int m){
	int i,maxflow=0,mincost=0;
	while(1){
		memset(pv,-1,sizeof(int)*(nv+1));
		memset(vis,0,sizeof(bool)*(nv+1));
		for(i=0;i<nv;i++) cost[i]=inf;
		cost[s]=0;
		q.push(s);
		while(!q.empty()){
			int x=q.front();q.pop();
			vis[x]=0;
			for(int i=v[x];i!=-1;i=next[i]){
				int y=to[i];
				if(fc[i]&&cost[x]+fw[i]<cost[y]){
					cost[y]=cost[x]+fw[i];
					if(!vis[y]) vis[y]=1,q.push(y);
					pv[y]=x;pe[y]=i;
				}
			}
		}
		if(pv[t]==-1) break;
		int aug=-1;
		for(int y=t;y!=s;y=pv[y])
			if(aug==-1||fc[pe[y]]<aug) aug=fc[pe[y]];
		if(cost[t]*aug+mincost>m){
			maxflow+=(m-mincost)/cost[t];break;
		}
		maxflow+=aug;
		mincost+=cost[t]*aug;
		for(int y=t;y!=s;y=pv[y]){
			fc[pe[y]]-=aug;
			fc[pe[y]^1]+=aug;
		}
	}
	return maxflow;
}	
void add(int x,int y,int w,int c,int cc=0){
	fc[ne]=c;to[ne]=y;
	fw[ne]=w;next[ne]=v[x];v[x]=ne++;
	fc[ne]=cc;to[ne]=x;
	fw[ne]=-w;next[ne]=v[y];v[y]=ne++;
}	
int a[101][101];
int main(){
	int n,m,i,j,k,x,y,t;
	scanf("%d%d",&n,&m);
	memset(v,-1,sizeof v);
	for(nv=n,ne=i=0;i<n;i++){
		for(j=0;j<n;j++){
			scanf("%d",&a[i][j]);
			if(a[i][j]) add(i,j,0,a[i][j]),add(i,j,1,m);
		}
	}
	printf("%d\n",MCMF(0,nv-1,m));
	return 0;
}	