#include <bits/stdc++.h>
using namespace std;

const int MAX_N = 105;
const int MAX_E = MAX_N * MAX_N * 2;
const int INF   = 1 << 30;

int n, k, flow, d [MAX_N], q [MAX_N], p [MAX_N], seen [MAX_N];
int e, last [MAX_N], from [MAX_E], to [MAX_E], c [MAX_E], w [MAX_E];

void add_edge (int u, int v, int cap, int cost){
    from [e] = last[u]; last [u] = e; to [e] = v; c [e] = cap; w [e++]=cost;
    from [e] = last[v]; last [v] = e; to [e] = u; c [e] = 0; w [e++]=-cost;
}

void mcmf () {
    int i, l, r, u, v, f;
    int s = 1, t = n;
    while (true) {
        for (i = s; i <= t; ++i) d [i] = INF;
        d [s] = 0, q [1] = s;
        for (l = 1, r = 1; l <= r; ++l) {
            u = q [l]; seen [u] = 0;
            for (i = last [u]; ~i; i = from [i]) {
                v = to [i];
                if (c [i] && d [u] + w [i] < d [v]) {
                    d [v] = d [u] + w [i];
                    p [v] = i;
                    if (!seen [v]) seen [v] = 1, q [++r] = v;
                }
            }
        }

        if (d [t] == INF) return;
        f = INF;
        for (i = t; i != s; i = to [p [i] ^ 1]) f = min (f, c [p [i]]);
        for (i = t; i != s; i = to [p [i] ^ 1])
            c [p [i]] -= f, c [p [i] ^ 1] += f;
        if (1ll * f * d [t] <= k) k -= f * d [t], flow += f;
        else { flow += k / d [t]; break; }
    }
}

int main () {
//  freopen ("input.txt", "r", stdin);
    scanf ("%d %d", &n, &k);

    memset (last, -1, sizeof last);
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            int x; scanf ("%d", &x);
            if (!x) continue;
            add_edge (i, j, x, 0);
            add_edge (i, j, INF, 1);
        }
    }
    
    mcmf ();
    printf ("%d\n", flow);
}
