#include <bits/stdc++.h>
using namespace std;

const int MAX_N = 105;
const int MAX_E = MAX_N * MAX_N * 2;
const int INF   = 1 << 30;

int n, k, flow;

int e, head [MAX_N], from [MAX_E], to [MAX_E], c [MAX_E], w [MAX_E];
void add_edge (int u, int v, int cap, int cost){
	from [e] = head [u]; head [u] = e; to [e] = v; c [e] = cap; w [e++] = cost;
	from [e] = head [v]; head [v] = e; to [e] = u; c [e] = 0; w [e++] = -cost;
}

bool seen [MAX_N];
int Q [MAX_N], d [MAX_N], p [MAX_N];
void mcmf () {
	int s = 0, t = n - 1;
	while (true) {
		fill (d, d + n, INF);
		d [s] = 0;

		int l = 0, r = 0;
		Q [r++] = s;
		while (l < r) {
			int u = Q [l++];
			seen [u] = 0;

			for (int i = head [u]; ~i; i = from [i]) {
				int v = to [i];
				if (c [i] && d [u] + w [i] < d [v]) {
					d [v] = d [u] + w [i];
					p [v] = i;

					if (!seen [v]) {
						Q [r++] = v;
						seen [v] = 1;
					}
				}
			}
		}

		if (d [t] == INF) break;

		int f = INF;
		for (int i = t; i != s; i = to [p [i] ^ 1])
			f = min (f, c [p [i]]);
		for (int i = t; i != s; i = to [p [i] ^ 1])
			c [p [i]] -= f, c [p [i] ^ 1] += f;

		if (1ll * f * d [t] <= k) k -= f * d [t], flow += f;
		else {
			flow += k / d [t];
			break;
		}
	}
}

int main () {
	// freopen ("input.txt", "r", stdin);
	scanf ("%d %d", &n, &k);

	memset (head, -1, sizeof head);
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			int x; scanf ("%d", &x);
			if (!x) continue;
			add_edge (i, j, x, 0);
			add_edge (i, j, INF, 1);
		}
	}

	mcmf ();
	printf ("%d\n", flow);
}


	 					 	    	 	 			 	  		  	 	