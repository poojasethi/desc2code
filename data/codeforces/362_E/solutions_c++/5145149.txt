#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <cstdlib>

using namespace std;

int n,k;

int c[100][100];
int haypipe[100][100];
int visto[100];
int anterior[100];
int dist[100];

int aumenta()
{
  for (int u=0;u<n;u++)
    visto[u]=0;
  queue<int> q;
  q.push(0);
  visto[0]=1;
  while (not q.empty() and not visto[n-1]) {
    int u=q.front();
    q.pop();
    for (int v=0;v<n;v++) {
      if (not visto[v] and c[u][v]) {
	visto[v]=1;
	anterior[v]=u;
	q.push(v);
      }
    }
  }
  if (not visto[n-1]) return 0;
  int bot=1000000000;
  {
    int u=n-1;
    while (u!=0) {
      int antu=anterior[u];
      bot=min(bot,c[antu][u]);
      u=antu;
    }
  }
  {
    int u=n-1;
    while (u!=0) {
      int antu=anterior[u];
      c[antu][u]-=bot;
      c[u][antu]+=bot;
      u=antu;
    }
  }
  return bot;
}

int flujototal=0;

void maxflow()
{
  for (;;) {
    int f=aumenta();
    if (f==0) break;
    flujototal+=f;
  }
}

void pillaceros()
{
  for (int u=0;u<n;u++)
    dist[u]=1000000000;
  priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;
  visto[0]=1;
  dist[0]=0;
  q.push(pair<int,int> (0,0));
  while (not q.empty() and not visto[n-1]) {
    pair<int,int> p=q.top();
    q.pop();
    int u=p.second;
    int du=p.first;
    for (int v=0;v<n;v++) {
      int duv=c[u][v]==0;
      if (u!=v and haypipe[u][v] and du+duv<dist[v]) {
	dist[v]=du+duv;
	q.push(pair<int,int> (dist[v],v));
	anterior[v]=u;
      }
    }
  }  
  if (dist[n-1]==1000000000) {
    cout<<flujototal<<endl;
    exit(0);
  }
  {
    int u=n-1;
    while (u!=0) {
      int antu=anterior[u];
      if (c[antu][u]==0) {
	if (k==0) {
	  cout<<flujototal<<endl;
	  exit(0);
	}
	k--;
	c[antu][u]++;
      }
      u=antu;
    }
  }
}

int main()
{
  cin>>n>>k;
  for (int i=0;i<n;i++) {
    for (int j=0;j<n;j++) {
      cin>>c[i][j];
      if (c[i][j]) haypipe[i][j]=1;
    }
  }
  for (;;) {
    maxflow();
    pillaceros();
  }
}
