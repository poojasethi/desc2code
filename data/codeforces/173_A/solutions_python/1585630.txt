def gcd(a, b):
    while a != b:
        if a > b:
            a -= b
        else:
            b -= a
    
    return a

def lcm(a, b):
    return a * b / gcd(a,b)

def solve():
    rounds = int(raw_input())
    str_a  = raw_input()
    str_b  = raw_input()
    
    len_a = len(str_a)
    len_b = len(str_b)
    
    pos_a = 0
    pos_b = 0
    
    spots_a = 0
    spots_b = 0
    
    cyc_spots_a = 0
    cyc_spots_b = 0
    
    lcm_val = lcm(len_a, len_b)
    num_cycles = rounds / lcm_val
    rem_rounds = rounds - (num_cycles * lcm_val)
    for i in range(lcm_val):
        c = str_a[pos_a] + str_b[pos_b]
        if c == 'RS' or c == 'PR' or c == 'SP':
            cyc_spots_b += 1
        elif c == 'RP' or c == 'PS' or c == 'SR':
            cyc_spots_a += 1
            
        if i == (rem_rounds - 1):
            spots_a = cyc_spots_a
            spots_b = cyc_spots_b
        
        pos_a = (pos_a + 1) % len_a
        pos_b = (pos_b + 1) % len_b
    
    spots_a += (cyc_spots_a * num_cycles)
    spots_b += (cyc_spots_b * num_cycles)
        
    print "%d %d" % (spots_a, spots_b) 
                        
if __name__ == '__main__':
    solve()