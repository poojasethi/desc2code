from fractions import gcd

win = {"R": "S", "S": "P", "P": "R"}

def cmp_sym(s1, s2):
    if s1 == s2:
        return 0
    elif win[s1] == s2:
        return 2
    else:
        return 1

def cycle_iter(inp):
    while True:
        for i in inp:
            yield i

if __name__ == "__main__":
    n = int(raw_input())
    s1 = raw_input()
    s2 = raw_input()
    res = [0, 0, 0]
    part = len(s1) * len(s2) / gcd(len(s1), len(s2))
    s1 = cycle_iter(s1)
    s2 = cycle_iter(s2)
    for i in range(part):
        res[cmp_sym(s1.next(), s2.next())] += 1
    pp = n / part
    res[1] *= pp
    res[2] *= pp
    n -= pp * part
    for i in range(n):
        res[cmp_sym(s1.next(), s2.next())] += 1
    print res[1], res[2]
