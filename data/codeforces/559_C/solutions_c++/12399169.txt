#include <cstdio>
#include <utility>
#include <algorithm>
using namespace std;

const int maxN = 2e3 + 7, maxS = 2e5 + 7, M = 1e9 + 7;
pair<int, int> pnt[maxN];
int h, w, n, r, c, dp[maxN], f[maxS];

int pos(int x, int k) {
	if (k == 0) return 1;
	int t = pos(x, k >> 1);

	t = (1LL * t * t) % M;
	if (k & 1) 
		return (1LL * t * x) % M; 
	else
		return t;
}

int C(int n, int m) {
	return (1LL * f[n + m] * pos((1LL * f[n] * f[m]) % M, M - 2)) % M;
}

int main()
{
	scanf("%d%d%d", &h, &w, &n);
	for (int i = 0; i < n; i ++) {
		scanf("%d%d", &r, &c);
		pnt[i] = make_pair(r - 1, c - 1);
	}
	pnt[n] = make_pair(h - 1, w - 1);

	sort(pnt, pnt + n + 1);

	f[0] = 1;
	for (int i = 1; i < maxS; i ++) f[i] = (1LL * f[i - 1] * i) % M;

	for (int i = 0; i <= n; i ++) {
		dp[i] = C(pnt[i].first, pnt[i].second);
		for (int j = 0; j < i; j ++)
			if (pnt[j].first <= pnt[i].first && pnt[j].second <= pnt[i].second)
				dp[i] = (dp[i] - 1LL * dp[j] * C(pnt[i].first - pnt[j].first, pnt[i].second - pnt[j].second)) % M;
	}

	printf("%d\n", (dp[n] + M) % M); 
}
