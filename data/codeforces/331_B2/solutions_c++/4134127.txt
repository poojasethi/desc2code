#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<cctype>
#include<algorithm>

using namespace std;

const int MaxN = 300000 + 5;

int N, M, cnt;
int a[MaxN], pos[MaxN], old[MaxN], c[MaxN];

void insert(int x, int cnt) {
    int d = cnt - old[x];
    old[x] = cnt;
    for (; x <= N; x += x & -x)
        c[x] += d;
}

int query(int x) {
    int res = 0;
    for (; x; x -= x & -x)
        res += c[x];
    return res;
}

int main() {

    scanf("%d", &N);    
    for (int i = 1; i <= N; ++i) {
        scanf("%d", a + i);
        pos[a[i]] = i;
    }
    pos[0] = N + 1;
    memset(old, 0, sizeof(old));
    for (int i = 1; i <= N; ++i) {
        insert(i, pos[i - 1] > pos[i]);
    }
    scanf("%d", &M);
    int tp, x, y;
    while (M--) {
        scanf("%d%d%d", &tp, &x, &y);
        if (tp == 1) printf("%d\n", 1 + query(y) - query(x));
        else {
            swap(a[x], a[y]); 
            pos[a[x]] = x; pos[a[y]] = y;
            insert(a[x], pos[a[x] - 1] > pos[a[x]]);
            insert(a[y], pos[a[y] - 1] > pos[a[y]]);
            if (a[x] != N) insert(a[x] + 1, pos[a[x]] > pos[a[x] + 1]);
            if (a[y] != N) insert(a[y] + 1, pos[a[y]] > pos[a[y] + 1]);
        }
    }

    return 0;

}
