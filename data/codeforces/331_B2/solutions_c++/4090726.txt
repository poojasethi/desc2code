#include<iostream>
using namespace std;
#define lc pos<<1
#define rc pos<<1|1
#define mid (l+r>>1)
#define lson lc,l,mid
#define rson rc,mid+1,r
const int N = 300005;
int a[N],p[N];
int seg[N<<2],lef[N<<2],righ[N<<2],n;
void update(int p,int val,int pos = 1,int l = 1,int r = n){
	if(l==r){
		lef[pos] = righ[pos] = val;
		seg[pos] = 1;
		return ;
	}
	if(p <= mid) update(p,val,lson);
	else update(p,val,rson);
	lef[pos] = lef[lc];
	righ[pos] = righ[rc];
	seg[pos] = seg[lc] + seg[rc] - (lef[rc] > righ[lc]);
}
int ans,last ;
void query(int L,int R,int pos = 1,int l = 1,int r= n){
	if(L <= l && R >= r){
		if(last < lef[pos]) ans --;
		last = righ[pos];
		ans += seg[pos];
		return ;
	}
	if(L <= mid)   query(L,R,lson);
	if(R >  mid)   query(L,R,rson);
	
}
int main(){
	int  tst;
	cin >> n;
	for(int i = 1; i <= n; i++){
		cin >> a[i]; p[a[i]] = i;
		update(a[i],i);	
	}
	cin >> tst;
	while(tst--){
		int c, l,r;
		cin >> c >> l >> r;
		if(c == 2){
			int x = a[l], y=a[r];
			update(x,p[y]);
			update(y,p[x]);
			swap(p[x],p[y]);
			swap(a[l],a[r]);
		} else {
			ans = 1, last = -1;
			query(l,r) ;
			cout << ans << endl;
		}
	}
}
