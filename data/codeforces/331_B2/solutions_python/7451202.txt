#include <cstdio>
#include <algorithm>
using namespace std;
const int MAX_N = 320005;
int bit[MAX_N] , A[MAX_N];
struct FOX
{
	int value, pos;
} fox[MAX_N];

int n, num[MAX_N];

int get_sum(int i)
{
	int s = 0;
	while (i > 0)
	{
		s += bit[i];
		i -= i & -i;
	}
	return s;
}

void add(int i, int x)
{
	while (i <= n)
	{
		bit[i] += x;
		i += i & -i;
	}
}

bool Fox_cmp(FOX a, FOX b)
{
	return a.value < b.value;
}

void edit(int k)
{
	int now;
	if (k == 1) return;
	if (fox[k].pos < fox[k-1].pos) now = 1;
		else now = 0;

	if (A[k] != now)
	{
		add(k, now - A[k]);
		A[k] = now;
	}
}

int main()
{
	//freopen("nimo.in", "r", stdin);
	scanf("%d", &n);
	for (int i = 1; i <= n; i++)
	{
		scanf("%d", &fox[i].value);
		num[i] = fox[i].value;
		fox[i].pos = i;
	}
	sort(fox + 1, fox + n + 1, Fox_cmp);
	for (int i = 2; i <= n; i++)
		if (fox[i].pos < fox[i-1].pos) 
		{
			add(i, 1);
			A[i] = 1;
		}
	int qn;
	scanf("%d", &qn);
	while (qn--)
	{
		int op, x, y;
		scanf("%d%d%d", &op, &x, &y);
		if (op == 1)
		{
			int ans = get_sum(y) - get_sum(x) + 1;
			printf("%d\n", ans);
		}
		else
		{
			int a = num[x];
			int b = num[y];

			int tmp = fox[a].pos;
			fox[a].pos = fox[b].pos;
			fox[b].pos = tmp;

			edit(a);
			if (a < n) edit(a+1);
			edit(b);
			if (b < n) edit(b+1);

			int o = num[x];
			num[x] = num[y];
			num[y] = o;
		}
	}
	return 0;
}