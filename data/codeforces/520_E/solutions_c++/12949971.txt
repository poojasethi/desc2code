#include <cstdio>
#include <algorithm>
using namespace std;

#define long long long

const int M = 1e9 +7;
const int MAX_N = 1e5 +7;

long n, k;

inline long pow(long a, long b) {
  long ret = 1;
  for (long x = a; b > 0; x = (x * x) % M, b >>= 1) {
    if (b & 1) {
      ret = (ret * x) % M;
    }
  }
  return ret;
}

long f[MAX_N];

inline long C(long n, long r) {
  return (f[n] * pow(f[n-r], M-2) % M) * pow(f[r], M-2) % M;
}

char s[MAX_N];
long a[MAX_N];
long A[MAX_N];

int main() {
  scanf("%I64d %I64d\n", &n, &k);
  f[0] = 1;
  for (long i = 1; i <= n; i++) {
    f[i] = (f[i-1] * i) % M;
  }
  scanf("%s", s+1);
  for (int i = 1; i <= n; i++) {
    a[i] = s[i] - '0';
    A[i] = (A[i-1] + a[i]) % M;
  }
  long ans = 0;
  for (int i = 0; i < n-k; i++) {
    ans += (A[n-i-1] * pow(10, i) % M) * C(n-i-2, k-1) % M;
    ans += (a[n-i] * pow(10, i) % M) * C(n-i-1, k) % M;
    ans %= M;
  }
  printf("%I64d\n", ans);
}
