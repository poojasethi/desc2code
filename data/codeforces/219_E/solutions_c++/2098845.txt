#include<cstdio>
#include<algorithm>
#include<set>
using namespace std;

const int MAX_ID = 1e6 + 5;
const int MAX_N = 2e5 + 5;

#define pii pair<int, int>

int n, m;
int park[MAX_ID];
set<int> s;
struct cmp{
  bool operator () (const pii a, const pii b) const{
    return a.first != b.first? a.first > b.first: a.second < b.second; 
  }
};
set<pii, cmp> q;

int main(){
  scanf("%d %d", &n, &m);
  q.insert(pii(n, 1));
  for(; m --> 0; ){
    int id;
    scanf("%*d %d", &id);
    if(park[id]){
      int x = park[id], l, r;
      s.erase(x);
      if(s.empty()){
	q.clear();
	q.insert(pii(n, 1));
	continue;
      }
      set<int>::iterator it = s.upper_bound(x);
      if(it == s.end()){
	q.erase(pii(n - x, n));
	r = -1;
      }
      else{
	int pos = (*it + x) >> 1;
	q.erase(pii(pos - x, pos));
	r = *it;
      }
      if(it == s.begin()){
	q.erase(pii(x - 1, 1));
	l = -1;
      }
      else{
	int pos = (x + *--it) >> 1;
	q.erase(pii(pos - *it, pos));
	l = *it;
      }
      if(r == -1){
	q.insert(pii(n - l, n));
      }
      else if(l == -1){
	q.insert(pii(r - 1, 1));
      }
      else{
	int pos = (l + r) >> 1;
	q.insert(pii(pos - l, pos));
      }
    }
    else{
      pii x = *q.begin();
      q.erase(q.begin());
      set<int>::iterator it = s.insert(park[id] = x.second).first;
      if(it == s.begin()){
	q.insert(pii(x.second - 1, 1));
      }
      else{
	int a = *--it, b = *++it, pos = (a + b) >> 1;
	q.insert(pii(pos - a, pos));
      }
      if(++it == s.end()){
	q.insert(pii(n - x.second, n));
      }
      else{
	int b = *it, a = *--it, pos = (a + b) >> 1;
	q.insert(pii(pos - a, pos));
      }
      printf("%d\n", x.second);
    }
  }
}
