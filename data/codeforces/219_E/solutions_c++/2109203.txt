#include <cstdio>
#include <algorithm>
#include <set>
#include <map>

using namespace std;

typedef pair<int, int> pii;

struct intervalo{
  int a, b;
};

int N;
set<int> ocupados;
set<intervalo> S;

int posicao(intervalo i)
{
  if(i.a == 0) return 1;
  if(i.b == N+1) return N;
  return (i.a+i.b)/2;
}

int distancia(intervalo i)
{
  int x = posicao(i);
  if(i.a != 0 && i.b != N+1)
    return min(x - i.a, i.b - x);
  else
    return i.b - i.a-1;
}

bool operator < (intervalo i1, intervalo i2)
{
  int d1 = distancia(i1);
  int d2 = distancia(i2);
  if(d1 == d2)
    return make_pair(i1.a, i1.b) < make_pair(i2.a, i2.b);
  else
    return d1 > d2;
}

int adiciona()
{
  intervalo i = *S.begin();
  S.erase(S.begin());

  int x = posicao(i);
  intervalo a = (intervalo){i.a, x};
  intervalo b = (intervalo){x, i.b};

  S.insert(a);
  S.insert(b);
  ocupados.insert(x);

  return x;
}


pii vizinhos(int p)
{
  set<int>::iterator it = ocupados.find(p);
  it--;
  int a = *it;
  it++; it++;
  int b = *it;
  return make_pair(a, b);
}

void retirar(int p)
{
  pii viz = vizinhos(p);

  intervalo a = (intervalo){viz.first, p};
  intervalo b = (intervalo){p, viz.second};
  intervalo novo = (intervalo){a.a, b.b};

  ocupados.erase(p);
  S.erase(a);
  S.erase(b);
  S.insert(novo);
}

int main()
{
  int M;
  scanf(" %d %d", &N, &M);

  S.clear();
  ocupados.clear();
  map<int, int> lista;

  S.insert((intervalo){0, N+1});
  ocupados.insert(0);
  ocupados.insert(N+1);

  while(M--){
    int t, id;
    scanf(" %d %d", &t, &id);
    if(t == 1){
      int x = adiciona();
      lista[id] = x;
      printf("%d\n", x);
    }else{
      retirar(lista[id]);
      lista.erase(id);
    }
  }

  return 0;
}
