#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
#define N 200005
int mxL[N<<2],mxR[N<<2],mx[N<<2];
int n,m;
int ps[N*5];
#define lc i<<1,l,mid
#define rc i<<1|1,mid+1,r
void build(int i,int l,int r){
    mx[i]=mxL[i]=mxR[i]=r-l+1;
    if(l==r) return;
    int mid=(l+r)>>1;
    build(lc);build(rc);
}
int ask(int i,int l,int r,int c){

    if(l==1&&mxL[i]>=c) return 1;
    if(l==r) return l;
    int mid=(l+r)>>1;
    if(mx[i<<1]+1>=2*c) return ask(lc,c);
    if(mxR[i<<1]+mxL[i<<1|1]+1>=2*c) return mid+c-mxR[i<<1];
    return ask(rc,c);
}
void update(int i,int l,int r,int k){
    if(l==r){
        if(k<0) mx[i]=mxL[i]=mxR[i]=1;else mx[i]=mxL[i]=mxR[i]=0;
        return;
    }
    int mid=(l+r)>>1;
    if(abs(k)<=mid) update(lc,k);else update(rc,k);
    mx[i]=max(mx[i<<1],mx[i<<1|1]),mx[i]=max(mx[i],mxR[i<<1]+mxL[i<<1|1]);
    mxL[i]=mxL[i<<1],mxR[i]=mxR[i<<1|1];
    if(mxL[i<<1]>=mid-l+1) mxL[i]+=mxL[i<<1|1];
    if(mxR[i<<1|1]>=r-mid)  mxR[i]+=mxR[i<<1];
}
int main(){
    cin>>n>>m;
    build(1,1,n);
    while(m--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        if(a==1){
            int t=(mx[1]+1)/2;
            t=max(t,mxL[1]);t=max(t,mxR[1]);
            ps[b]=ask(1,1,n,t);
            update(1,1,n,ps[b]);
            cout<<ps[b]<<endl;
        }
        else update(1,1,n,-ps[b]);
    }
}
