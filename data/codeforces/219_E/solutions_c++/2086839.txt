#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
using namespace std;
const int MAX=0x7fffffff;
const int nMax=2000100;
typedef pair<int,int>PII;
typedef pair<int,PII>PIP;

set<PIP>S;
int n;
int in[nMax],L[nMax],R[nMax],P[nMax];
PIP Pair(int l,int r)
{
	if(l==0 && r==n+1) return make_pair(-MAX,make_pair(1,n+1));
	if( l == 0 )	 return make_pair(-(r-1),make_pair(1,r));
	if( r == n+1 )	 return make_pair(-(n-l),make_pair(n,n+1));
	return make_pair( -(r-l)/2,make_pair( (l+r)>>1,r ) );
}


int main()
{
	int m,i,j,k,l,r,kind,pos,p;
	while(scanf("%d%d",&n,&m)!=EOF){
		L[n+1]=0;	R[0]=n+1;
		S.clear();	
		PII itr;
		S.insert(Pair(0,n+1));
		while(m--){
			scanf("%d%d",&kind,&pos);
			if(kind^2){
				itr=S.begin()->second;	
				r=itr.second;		l=L[r];		p=itr.first;	//printf("l=%d\tr=%d\tp=%d\n",l,r,p);
				L[r]=p;		R[p]=r;
				L[p]=l;		R[l]=p;
				printf("%d\n",P[pos]=p);
				S.erase(S.begin());
				S.insert(Pair(l,p));	S.insert(Pair(p,r));
				
			}else{
				p=P[pos];	l=L[p];	r=R[p];		L[r]=l;	R[l]=r;	//printf("l=%d\tr=%d\tp=%d\n",l,r,p);
				S.erase(Pair(l,p));
				S.erase(Pair(p,r));
				S.insert(Pair(l,r));
			}
		}
	}
	return 0;
}
