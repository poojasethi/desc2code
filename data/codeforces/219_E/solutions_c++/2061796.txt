#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <fstream>
#include <sstream>
#include <stack>
#include <queue>
#include <utility>
#include <cmath>
#include <algorithm>
#include <limits.h>
#include <iterator>
#include <map>
#include <set>

using namespace std;

#define pb push_back
#define SIZE(x) (int)x.size()
#define MP make_pair
typedef pair<int,int> PII;
typedef pair<int,PII> PIII;

const int INF=10000000;

int L[200001],R[200001];
map<int,int> cars;
set<PIII> lists;
int n,m;

PIII itv(int a, int b)
{
	if(a==0 && b==n+1) return MP(-INF,MP(0,1));
	else
	{
		if(a==0) return MP(-(b-1),MP(0,1));
		else if(b==n+1) return MP(-(n-a),MP(a,n));
		else return MP(-(b-a)/2,MP(a,a+(b-a)/2));
	}
}

int main()
{
#ifdef LOCAL
	freopen("in.txt", "r", stdin);
#endif
	scanf("%d%d",&n,&m);

	lists.insert(itv(0,n+1));
	L[n+1]=0;
	R[0]=n+1;

	for(int i=0;i<m;++i)
	{
		int t,id; scanf("%d%d",&t,&id);

		if(t==1)
		{
			int prv=(*lists.begin()).second.first;
			int cur=(*lists.begin()).second.second;
			int nxt=R[prv];
			lists.erase(lists.begin());
			R[prv]=cur; R[cur]= nxt; L[cur]=prv; L[nxt]=cur;
			lists.insert(itv(prv,cur));
			lists.insert(itv(cur,nxt));
			cars[id]=cur;
			cout<<cur<<endl;
		}
		else
		{
			int cur=cars[id];
			int prv=L[cur];
			int nxt=R[cur];
			lists.erase(itv(prv,cur));
			lists.erase(itv(cur,nxt));
			R[prv]=nxt;
			L[nxt]=prv;
			lists.insert(itv(prv,nxt));
		}
	}
	return 0;
}
