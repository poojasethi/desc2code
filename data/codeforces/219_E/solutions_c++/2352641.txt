#include<stdio.h>
#include<iostream>
#include<stdlib.h>
#include<cstring>
#include<set>
#define rep(i,s,t) for (int i=s;i<=t;i++)
using namespace std;
typedef pair<int,int> PII;
int s; 
set <PII> tree;
int i,j,m,n,k,l,o,p,x,y,q,tag;
set <int> car;
const int maxn = 1000001;
int place[maxn];
PII gao(int l,int r)
{
    if (l == 1) return PII(-r+1,l);
    if (r == n) return PII(-(n-l),r);
    return PII(-((r+l)/2 - l),(r+l)/2);
}
int main()
{
    scanf("%d%d",&n,&q);
    tree.insert(gao(1,n));
    set<int>::iterator tt;
    car.insert(-1);
    car.insert(1 << 20); 
    rep(kk,1,q)
    {
        scanf("%d%d",&tag,&x);
        if (tag == 1)
        {
            s = tree.begin()->second;
            //cout << tree.begin() -> first << endl;
            place[x] = s;
            tree.erase(tree.begin());
            //cout << tree.begin()-> first << endl;
            //cout << tree.begin()-> second << endl;
            tt = car.upper_bound(s);
            x = *(--tt);
            y = *(++tt);
            if (x == -1) x = 1;else ++x;
            if (y == 1 << 20) y = n; else --y;
            car.insert(s);
            if (s > 1) tree.insert(gao(x,s-1));
            if (s < n) tree.insert(gao(s+1,y));
            printf("%d\n",s);
        }
        else
        {
            s = place[x];
            car.erase(s);
            tt = car.upper_bound(s);
            x = *(--tt);
            y = *(++tt);
            if (x == -1) x = 1;else ++x;
            if (y == 1 << 20) y = n; else --y;
            if (s > 1) tree.erase(gao(x,s-1));
            if (s < n) tree.erase(gao(s+1,y));
            tree.insert(gao(x,y));
        }
    }
    return 0;
}
