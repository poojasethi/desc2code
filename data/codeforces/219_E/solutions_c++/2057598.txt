#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <string>
#include <string.h>
#include <algorithm>
using namespace std ;

#define INF 1000000000
#define fo(i,a,b) for(int i=a;i<=b;i++)
#define fi(i,a,b) for(int i=a;i>=b;i--)
#define MP make_pair

int N , M ;
int L[200009] , R[200009] ;
int ans[1000009] ;
set< pair< int , pair<int,int> > > S ;

pair< int , pair<int,int> > Add( int s , int t ) {
	if ( s == 0 && t == N+1 ) return MP(-INF,MP(0,1)) ;
	if ( s == 0 ) return MP(-(t-1),MP(0,1)) ;
	if ( t == N+1 ) return MP(-(N-s),MP(s,N)) ;
	return MP(-(t-s)/2,MP(s,s+(t-s)/2)) ;
}

int main() {
	cin >> N >> M ;
	R[0] = N+1 ; L[N+1] = 0 ; S.clear() ; S.insert( MP(-INF,MP(0,1)) ) ;
	fo(t,1,M) {
		int u , v ; cin >> u >> v ;
		if ( u == 1 ) {
			pair<int,int> tmp = (S.begin())->second ;
			S.erase(S.begin()) ;
			int p1 = tmp.first ;
			int p2 = tmp.second ;
			int p3 = R[p1] ;
			
			ans[v] = p2 ;
			R[p1] = p2 ; R[p2] = p3 ;
			L[p2] = p1 ; L[p3] = p2 ;
			S.insert( Add(p1,p2) ) ;
			S.insert( Add(p2,p3) ) ;
			
			cout << p2 << "\n" ;
		} else {
			int p2 = ans[v] ;
			int p1 = L[ans[v]] ;
			int p3 = R[ans[v]] ;
			
			S.erase( Add(p1,p2) ) ;
			S.erase( Add(p2,p3) ) ;
			
			R[p1] = p3 ;
			L[p3] = p1 ;
			S.insert( Add(p1,p3) ) ;
		}
	}
}