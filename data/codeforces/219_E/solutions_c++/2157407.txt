#include<cstdio>
#include<cstring>
#include<vector>
#include<map>
#include<algorithm>
#include<queue>
#include<set>
using namespace std;
#define MAX 1000005
#define INF (1<<29)
typedef pair<int,int> PII;
typedef pair<int,PII> PIP;
set <PIP> S;
int left[MAX],right[MAX],id[MAX];
int n,m;
PIP make(int lf,int rg){
    if(lf==0 && rg==n+1)
        return make_pair(-INF,make_pair(1,n+1));
    else if(lf==0)
        return make_pair(-(rg-1),make_pair(1,rg));
    else if(rg==n+1)
        return make_pair(-(n-lf),make_pair(n,n+1));
    else
        return make_pair(-(rg-lf)/2,make_pair((lf+rg)>>1,rg));
}
int main(){
    scanf("%d %d",&n,&m);
    right[0]=n+1;
    left[n+1]=0;
    S.insert(make(0,n+1));
    while(m--){
        int t,d;
        scanf("%d %d",&t,&d);
        if(t==1){
            PII bst=S.begin()->second;
            S.erase(S.begin());
            int rg=bst.second;
            int middle=bst.first;
            int lf=left[rg];
            id[d]=middle;
            printf("%d\n",middle);
            left[middle]=lf;
            right[middle]=rg;
            right[lf]=left[rg]=middle;
            S.insert(make(lf,middle));
            S.insert(make(middle,rg));
        }else{
            int middle=id[d];
            int lf=left[middle];
            int rg=right[middle];
            left[rg]=lf;
            right[lf]=rg;
            S.erase(make(lf,middle));
            S.erase(make(middle,rg));
            S.insert(make(lf,rg));
        }
    }
    return 0;
}