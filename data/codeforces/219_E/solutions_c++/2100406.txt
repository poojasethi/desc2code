#include <cstdio>
#include <cstring>
#include <set>
#include <utility>


using namespace std;


#define X first
#define Y second
#define MP make_pair

const int MAXN = 200010;
const int MAXM = 1000010;

typedef pair < int, pair < int, int > > Tblank;


int n, m;
int l[MAXN], r[MAXN];
int pos[MAXM];
set<Tblank> h;

int get(int l, int r)
{
    if (l == 0) return r - 1;
    else if (r > n) return n - l;
    else return (r - l) / 2;
}

int getp(int l, int r)
{
    if (l == 0) return 1;
    else if (r > n) return n;
    else return (l + r) / 2;
}

int main()
{
    scanf("%d %d", &n, &m);
    memset(pos, 0xff, sizeof(pos));
    l[0] = n + 1;
    r[n + 1] = 0;
    h.clear();
    h.insert(MP(-get(0, n + 1), MP(0, n + 1)));
    int opt, k, p, s, t;
    while (m--)
    {
        scanf("%d %d", &opt, &k);
        if (opt == 1)
        {
            Tblank tmp = *h.begin();
            s = tmp.Y.X; t = tmp.Y.Y;
            p = getp(s, t);
            //printf("%d %d %d\n", tmp.X, s, t);
            printf("%d\n", p);
            pos[k] = p;
            l[p] = s; r[s] = p;
            r[p] = t; l[t] = p;
            h.erase(h.begin());
            h.insert(MP(-get(s, p), MP(s, p)));
            h.insert(MP(-get(p, t), MP(p, t)));
        }
        else
        {
            p = pos[k];
            s = l[p]; t = r[p];     
            r[s] = t; l[t] = s;
            h.erase(h.find(MP(-get(s, p), MP(s, p))));
            h.erase(h.find(MP(-get(p, t), MP(p, t))));
            h.insert(MP(-get(s, t), MP(s, t)));
        }
    }
    return 0;
}