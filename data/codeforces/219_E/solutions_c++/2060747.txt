#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <map>
#include <string.h>
#include <queue>
#include <set>

const int N=1000100;
const int inf=0x3f3f3f3f;

using namespace std;

int n,m;

struct data
{
	int l,r,id,len,i;
	data() {}
	data(int _l,int _r,int _i)
	{
		l=_l,r=_r;i=_i;
		if(l==0) len=(r-2),id=1;
		else if(r==n+1) len=(n-l-1),id=n;
		else len=(r-l-2)/2,id=l+len+1;
	}
	bool operator < (const data &d) const
	{
		if(len!=d.len) return len<d.len;
		return id>d.id;
	}
};

map<int,int> l,r,I;

#define sz(x) ((x).size())

set<int> st;
priority_queue<data> que;

int h[N];

int main()
{
	scanf("%d%d",&n,&m);
	int cnt=0,ret=0;
	for(int i=0;i<m;i++)
	{
		int t,id;
		scanf("%d%d",&t,&id);
		if(t==1)
		{
			if(cnt==0)
			{
				h[id]=1;
				cout<<1<<endl;
				while(sz(que)) que.pop();
				st.clear();
				l.clear(),r.clear();
				l[1]=0;
				r[1]=1+n;
				r[n+1]=1;
				l[0]=1;
				cnt++;I[1]=++ret;
				que.push(data(1,n+1,ret));
			}
			else
			{
				cnt++;
				data u;
				while(1)
				{
					u=que.top();
					que.pop();
					if(u.l+1==u.r) continue;
					//cout<<u.l<<" "<<u.r<<" "<<u.id<<" "<<u.len<<" "<<u.i<<endl;
					if(st.count(u.i)) continue;
					break;
				}
				//cout<<u.l<<" "<<u.r<<" "<<u.id<<" "<<u.len<<" "<<u.i<<endl;
				int tmp=u.id;h[id]=tmp;
				l[tmp]=u.l;l[u.r]=tmp;
				r[u.l]=tmp;r[tmp]=u.r;
				st.insert(I[u.l]);
				I[u.l]=++ret;que.push(data(u.l,tmp,ret));
				I[tmp]=++ret;que.push(data(tmp,u.r,ret));
				cout<<tmp<<endl;
			}
		}
		else
		{
			cnt--;
			st.insert(I[l[h[id]]]);
			st.insert(I[h[id]]);
			r[l[h[id]]]=r[h[id]];
			l[r[h[id]]]=l[h[id]];
			I[l[h[id]]]=++ret;que.push(data(l[h[id]],r[h[id]],ret));
			h[id]=0;
		}
	}
	return 0;
}
