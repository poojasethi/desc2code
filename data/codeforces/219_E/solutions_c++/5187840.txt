#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <set>
#include <map>
#define  fi             first
#define  se             second
#define  mp             make_pair
#define  INF            1 << 30
#define  MAXK           1000002
using    namespace      std;
typedef  pair<int,int>  pi;
typedef  pair<int,pi >  pii;

int N,M;
set< pii >S;
map<int,int>hash,L,R;

pii Make_Pair(int l , int r)
{
  if(l==0 && r==N+1)     return mp(-INF,mp(1,N+1));
  if(l==0)               return mp(-(r-1),mp(1,r));
  if(r==N+1)             return mp(-(N-l),mp(N,N+1));
  return mp(-(r-l)/2,mp((l+r)/2,r));
}

int main()
{
  cin >> N >> M;
  R[0]=N+1;
  S.insert(Make_Pair(0,N+1));
  for(int i=0 ; i<M ; i++)
  {
    int ok,id;
    scanf("%d%d",&ok,&id);
    if(ok==1)
    {
      pi tmp=S.begin()->se;
      int m=tmp.fi;
      int r=tmp.se;
      int l=L[r];
      hash[id]=m;
      L[m]=l,R[m]=r;
      L[r]=m,R[l]=m;
      S.insert(Make_Pair(l,m));
      S.insert(Make_Pair(m,r));
      S.erase(Make_Pair(l,r));
      printf("%d\n",m);
    }
    else
    {
      int m=hash[id];
      int l=L[m];
      int r=R[m];
      L[r]=l;
      R[l]=r;
      S.insert(Make_Pair(l,r));
      S.erase(Make_Pair(l,m));
      S.erase(Make_Pair(m,r));
    }
  }
  return 0;
}
