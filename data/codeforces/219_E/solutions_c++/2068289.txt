#include <iostream>
#include <fstream>
#include <cstring>
#include <algorithm>
#include <set>

using namespace std;

#define mp make_pair
#define N 1000001
#define INF 999999999
#define ff first
#define ss second

typedef pair<int, int> PII;
typedef pair<int, PII> PIP;

ifstream in("input.txt");
ofstream out("output.txt");

int n, m;
set<PIP> place;
int park[N], L[N], R[N];

PIP FP(int l, int r) {
    if (l == 0 && r == n + 1) return mp(-INF, mp(1, n + 1));
    if (l == 0) return mp(-(r - 1), mp(1, r));
    if (r == n + 1) return mp(-(n - l), mp(n, n + 1));
    return mp(-(r - l) / 2, mp((l + r) / 2, r));
}

int main() {
    cin >> n >> m;
    L[n + 1] = 0, R[0] = n + 1;
    place.insert(FP(0, n + 1));
    for (int i = 0; i < m; i++) {
        int t, id;
        cin >> t >> id;
        if (t == 1) {
            PII opt = place.begin()->ss;
            int r = opt.ss, m = opt.ff, l = L[r];
            park[id] = m;
            cout << m << "\n";
            L[m] = l, R[m] = r;
            L[r] = m, R[l] = m;
            place.erase(FP(l, r));
            place.insert(FP(l, m));
            place.insert(FP(m, r));
        }
        else {
            int m = park[id], l = L[m], r = R[m];
            L[r] = l, R[l] = r;
            place.erase(FP(l, m));
            place.erase(FP(m, r));
            place.insert(FP(l, r));
        }
    }
    return 0;
}
