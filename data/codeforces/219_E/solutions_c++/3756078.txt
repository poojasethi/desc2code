#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

const int N = 8e5+5, A = 1e6+5;
int lsp[N], rsp[N], sp[N];
int park[A];

void pre(int x, int L, int R) {
	lsp[x]=rsp[x]=sp[x]=R-L+1;
	if(L!=R) { int M=(L+R)/2; pre(x*2, L, M); pre(x*2+1, M+1, R); }
}

inline int f(int x) {
	return (x+1)/2;
}
int find(int x, int L, int R) {
	if(L==R) return L;
	int M=(L+R)/2;
	if(f(sp[x])==f(sp[x*2])) return find(x*2, L, M);
	if(f(sp[x])==f(rsp[x*2] + lsp[x*2+1])) return M-rsp[x*2]+1;
	return find(x*2+1, M+1, R);
}

void pull(int x, int L, int R) {
	int M=(L+R)/2;
	sp[x] = max(sp[x*2], sp[x*2+1]);
	sp[x] = max(sp[x], rsp[x*2] + lsp[x*2+1]);
	lsp[x] = sp[x*2]==M-L+1? sp[x*2]+lsp[x*2+1]: lsp[x*2];
	rsp[x] = sp[x*2+1]==R-M? sp[x*2+1]+rsp[x*2]: rsp[x*2+1];
}

void ins(int x, int L, int R, int v, int EMPTY) {
	if(L==R) { sp[x]=lsp[x]=rsp[x]=EMPTY; return; }
	int M=(L+R)/2;
	if(v<=M) ins(x*2, L, M, v, EMPTY);
	else ins(x*2+1, M+1, R, v, EMPTY);
	pull(x, L, R);
}

int main(void) {
	int n, m;
	scanf("%d%d", &n, &m);
	pre(1,1,n);
	while(m--) {
		int t, x;
		scanf("%d%d", &t, &x);
		if(t==1) {
			int v = find(1, 1, n);
			if(lsp[1] >= f(sp[1]) && lsp[1] >= rsp[1]) v = 1;
			else if(f(sp[1]) > lsp[1] && f(sp[1]) >= rsp[1]) v = (v+sp[1]-1+v)/2;
			else v=n;
			park[x] = v;
			printf("%d\n", v);
			ins(1, 1, n, v, 0);
		} else {
			ins(1, 1, n, park[x], 1);
		}
	}
	return 0;
}
