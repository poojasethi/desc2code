//program 219-E

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<set>

using namespace std;

struct Data
{
  int L,R;
};

bool operator <(Data A,Data B)
{
  int X=(A.R-A.L)/2,Y=(B.R-B.L)/2;
  return (X==Y)?(A.L<B.L):(X>Y);
}

int N;
set<int> All;
set<Data> List;

int GetMin()
{
  return *All.begin();
}

int GetMax()
{
  set<int>::iterator it=All.end();
  return *--it;
}

void Add(int X)
{
  set<int>::iterator it=All.lower_bound(X);
  int R=((it==All.end())?N:*it)-1;
  int L=(it==All.begin())?0:(*--it+1);
  List.erase((Data){L,R});
  if(L<X)List.insert((Data){L,X-1});
  if(X<R)List.insert((Data){X+1,R});
  All.insert(X);
}

void Delete(int X)
{
  set<int>::iterator it=All.find(X);
  int L=(it==All.begin())?0:(*--it+1);
  it=All.find(X);it++;
  int R=((it==All.end())?N:*it)-1;
  List.erase((Data){L,X-1});
  List.erase((Data){X+1,R});
  List.insert((Data){L,R});
  All.erase(X);
}

int GetBest()
{
  Data T=*List.begin();
  int Ans=(T.R-T.L)/2+1,Best=(T.L+T.R)/2;
  if(!All.size())
    Best=0;
  else
    {
      if(GetMin()>=Ans){Ans=GetMin();Best=0;}
      if(N-1-GetMax()>Ans){Ans=N-1-GetMax();Best=N-1;}
    }
  Add(Best);
  return Best+1;
}

int main()
{
  int M;scanf("%d%d",&N,&M);
  List.insert((Data){0,N-1});
  static int Number[1000001];
  while(M--)
    {
      int Type,X;scanf("%d%d",&Type,&X);
      if(Type==1)
        printf("%d\n",Number[X]=GetBest());
      else
        Delete(Number[X]-1);
    }
  return 0;
}
