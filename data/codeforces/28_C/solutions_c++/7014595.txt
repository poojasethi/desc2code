#include <stdio.h>
#include <algorithm>
using namespace std;
const int N = 51;
int n,m,v[N];
double dp[N][N][N];
bool vis[N][N][N];
long long nCk[N][N];
double cal(int k, int i, int mx){
    if(i == m)
        return (double)mx*!k;
    if(!vis[k][i][mx]){
        vis[k][i][mx]=true;
        double p=1.0;
        dp[k][i][mx] = 0;
        for(int j = 0; j <= k; p /= m, ++j)
            dp[k][i][mx] += p* nCk[k][j]*cal(k-j, i+1, max(mx, (j+v[i]-1)/v[i]));
    }
    return dp[k][i][mx];
}
int main() {
    scanf("%d%d", &n, &m);
    for(int i=0;i<m;++i) {
        scanf("%d",v+i);
    }
    nCk[0][0]=1;
    for(int i = 1; i < N; i++) {
        for(int j = 0; j <= i; j++) {
			if(!i || !j) nCk[i][j]=1;
            else nCk[i][j] = nCk[i-1][j] + nCk[i-1][j-1];
        }
    }
    printf("%.10f\n", cal(n,0,0));
    return 0;
}
  			   		  		 		 				 			