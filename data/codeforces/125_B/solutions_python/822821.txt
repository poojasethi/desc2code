class Node:
    def __init__(self, cargo=None, next=None):
        self.cargo = cargo
        self.next = next
    def __str__(self):
        return str(self.cargo)

        
class Stack:
    def __init__(self):
        self.length = 0
        self.head = None
    def isEmpty(self):
        return (self.length == 0)
    
    def insert(self, cargo):
        node = Node(cargo)
        node.next = None
        if self.length == 0:
            #if list is empty the new node goes first
            self.head = node
        else:
            #append the new node
            node.next = self.head
            self.head = node
        self.length = self.length + 1
        
    def remove(self):
        cargo = self.head.cargo
        self.head = self.head.next
        self.length = self.length - 1
        if self.length == 0:
            self.head = None
        return cargo
        
    def peek(self):
        return self.head.cargo

def isend(start,end):
    if(start[1] is end[2]):
        return True
    else:
        return False
 
text = raw_input()
def readtag(index, string):
    i = index
    while(string[i] != '>'):
        i += 1
    return string[index:i+1], i+1
stack = Stack()
next = 0
spaces = 0
while next < len(text):
    stub, next = readtag(next,text)
    if(not stack.isEmpty() and isend(stack.peek(), stub)):
        spaces -= 1
        stack.remove()
        for i in range(2*spaces):
            print '',        
        print stub

    else:
        for i in range(2*spaces):
            print '',
        stack.insert(stub)
        print stub
        spaces += 1
