#include<cstdio>
#include<cstring>
#include<algorithm>
#define rep(i,n) for(int i=0;i<n;i++)
#define For(i,n) for(int i=1;i<=n;i++)
using namespace std;
int n,m,w,k,l,r,f[1048576],a[100],
	p[21],x[21],g[21][21],q[10010],d[10010];
void BFS(int x)
{
	memset(d,0,sizeof(d));
	d[x]=1;
	q[l=r=1]=x;
	while(l<=r)
	{
		x=q[l++];
		For(i,w)
		{
		    if (x-a[i]>0 && !d[x-a[i]]) d[q[++r]=x-a[i]]=d[x]+1;
		    if (x+a[i]<=n+1 && !d[x+a[i]]) d[q[++r]=x+a[i]]=d[x]+1;
		}
	}
}
int main()
{
	scanf("%d%d%d",&n,&k,&w);
	l=-1;
	For(i,k)
	{
		scanf("%d",&r);
		if (l+1<r)
		{
			if (l>0) x[++m]=l+1;
			x[++m]=r;
		}
		l=r;
	}
	x[++m]=r+1;
	For(i,w) scanf("%d",&a[i]);
	For(i,m)
	{
		BFS(x[i]);
		For(j,m) g[i][j]=(d[x[j]])?d[x[j]]-1:~0U>>2;
	}
	memset(f,0x3F,sizeof(f));
	f[0]=0;
	rep(i,m+1) p[i]=1<<i;
	For(opt,p[m]-1)
	{
		w=0;
		rep(i,m)
		    if (opt & p[i]) x[++w]=i;
		if (w & 1) continue;
		k=opt-p[x[1]];
		for(int i=2;i<=w;i++)
			f[opt]=min(f[opt],f[k-p[x[i]]]+g[x[1]+1][x[i]+1]);
	}
	printf("%d\n",(f[p[m]-1]<(~0U>>3))?f[p[m]-1]:-1);
	return 0;
}
