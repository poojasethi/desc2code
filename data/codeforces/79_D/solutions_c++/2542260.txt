#include<stdio.h>
#include<queue>
#include<stdlib.h>
#include<algorithm>
#include<utility>
using namespace std;
int getint()
{
	int ret=0;bool ok=false;
	for(;;)
	{
		int c=getchar();
		if(c>='0'&&c<='9')ret=(ret<<3)+ret+ret+c-'0',ok=true;
		else if(ok)return ret;
	}
}
int n,K,l;
int kl[20];
int a[110];
bool b[10010];
int dist[30][10010];
queue<pair<int,int> > Q;
const int maxn=(1<<20)+10;
int cnt[maxn],log2[maxn];
int N;
int _dp[maxn];
const int inf=~0U>>3;
int dp(int S)
{
	if(!S)return 0;
	if(_dp[S])return _dp[S];
	int ret=inf;
	int t=log2[S&-S],_S=S-(1<<t);
	for(int i=t+1;i<K;i++)if(_S&(1<<i))
			if(dist[t][kl[i]])ret=min(ret,dp(_S-(1<<i))+dist[t][kl[i]]);
			else if(dist[i][kl[t]])ret=min(ret,dp(_S-(1<<i))+dist[i][kl[t]]);
	return _dp[S]=ret;
}
int main()
{
	n=getint()+1,K=getint(),l=getint();
	for(int i=1;i<=K;i++)
	{
		kl[i]=getint();
		b[kl[i]]=1;
	}
	for(int i=n;i;i--)b[i]^=b[i-1];
	K=0;
	for(int i=1;i<=n;i++)if(b[i])kl[K++]=i;
	for(int i=0;i<K;i++)log2[1<<i]=i;
	N=1<<K;
	for(int i=1;i<N;i++)cnt[i]=cnt[i-(i&-i)]+1;
	for(int i=1;i<=l;i++)
	{
		a[i]=getint();
		for(int j=0;j<K;j++)
		{
			if(kl[j]+a[i]<=n)dist[j][kl[j]+a[i]]=1,Q.push(make_pair(j,kl[j]+a[i]));
			if(kl[j]-a[i]>0)dist[j][kl[j]-a[i]]=1,Q.push(make_pair(j,kl[j]-a[i]));
		}
	}
	while(!Q.empty())
	{
		int u=Q.front().first,v=Q.front().second,d=dist[u][v];
		Q.pop();
		for(int i=1;i<=l;i++)
		{
			int v1=v+a[i];
			int v2=v-a[i];
			if(v1<=n&&!dist[u][v1])dist[u][v1]=d+1,Q.push(make_pair(u,v1));
			if(v2>1&&!dist[u][v2])dist[u][v2]=d+1,Q.push(make_pair(u,v2));
		}
	}
	int ans=dp(N-1);
	printf("%d\n",ans<inf?ans:-1);
	return 0;
}
