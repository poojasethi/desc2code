#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<string.h>

using namespace std;

#define INF (1<<29)

int n,l,k;
int dp[1<<21];
int arr[100005];
int A[105];
int tk=0;
int tokens[25];
int dist[30][30];
int _distance[100005];

void bfs(int u)
{
	queue<int> q;
	memset(_distance,-1,sizeof(_distance));
	_distance[u] = 0;
	q.push(u);
	while(!q.empty())
	{
		u = q.front();
		q.pop();
		for(int i=0;i<l;i++)
		{
			if(u-A[i]>=0&&_distance[u-A[i]]==-1)
			{
				_distance[u-A[i]] = _distance[u] + 1;
				q.push(u-A[i]);
			}
			if(u+A[i]<=n&&_distance[u+A[i]]==-1)
			{
				_distance[u+A[i]] = _distance[u] + 1;
				q.push(u+A[i]);
			}
		}
	}
}

int solve(int mask)
{
	if(mask==0)return 0;
	if(dp[mask]!=-1)return dp[mask];
	dp[mask] = INF;
	for(int i=0;i<tk;i++) if(mask&(1<<i))
		for(int j=i+1;j<tk;j++) if(mask&(1<<j))
			dp[mask] = min(dp[mask],dist[i][j]+solve(mask ^ (1<<i) ^ (1<<j)));
	return dp[mask];
}

int main()
{
	cin >> n >> k >> l;
	int x;

	for(int i=0;i<k;i++)
	{
		cin >> x;
		arr[x] ^= 1;
		arr[x-1] ^= 1;
	}

	for(int i=0;i<l;i++)
		cin >> A[i];

	for(int i=0;i<25;i++)for(int j=0;j<25;j++) dist[i][j] = INF;

	for(int i=0;i<=n;i++)
		if(arr[i]==1)
			tokens[tk++] = i;

	for(int i=0;i<tk;i++)
	{
		bfs(tokens[i]);
		for(int j=0;j<tk;j++)
		{
			if(_distance[tokens[j]]!=-1)
				dist[i][j] = _distance[tokens[j]];
		}
	}

	memset(dp,-1,sizeof(dp));
	int ans = solve((1<<tk)-1);
	if(ans > -1 && ans < INF)
		cout << ans << endl;
	else
		cout << -1 << endl;
	return 0;
}