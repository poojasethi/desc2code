#include <iostream>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;

const int INF = 100000000;

int n, k, l, x[23], a[111], m;
int d[10011], c[23][10011];
bool y[10011];
queue<int> q;

void init()
{
	ios::sync_with_stdio(false);
	cin >> n >> k >> l;
	for (int i = 0; i < k; ++i) cin >> x[i], y[x[i]] = 1;
	for (int i = 0; i < l; ++i) cin >> a[i];
	for (int j = 0; j <= n; ++j)
	{
		if (y[j] == y[j+1]) continue;
		memset(d, 0, sizeof(d));
		d[j] = 1; q.push(j);
		for (int u; q.size() && (u = q.front(), 1); q.pop())
			for (int i = 0, v1, v2; i < l; ++i)
			{
				v1 = u + a[i], v2 = u - a[i];
				if (v1 <= n && !d[v1]) d[v1] = d[u] + 1, q.push(v1);
				if (v2 >= 0 && !d[v2]) d[v2] = d[u] + 1, q.push(v2);
			}
		for (int i = 0; i <= n; ++i) c[m][i] = d[i] ? d[i] - 1 : INF;
		x[m++] = j;
	}
}

#define full(X) ((1 << (X + 1)) - 1)

int f[9999999];

void work()
{
	fill(f, f + full(m - 1) + 1, INF);
	f[0] = 0;
	for (int i = 1; i <= full(m - 1); ++i)
	{
		int a = __builtin_ctz(i);
		for (int j = i & ~(1 << a); j; j &= j - 1)
		{
			int b = __builtin_ctz(j);
			f[i] = min(f[i], f[i&~(1<<a)&~(1<<b)] + c[a][x[b]]);
		}
	}
	cout << (f[full(m - 1)] == INF ? -1 : f[full(m - 1)]) << endl;
}

int main()
{
	init();
	work();
	return 0;
}
