#include<iostream>
#include<cstdio>
#include<queue>
#include<cstring>
#define Max 10005
#define mMax 21
#define INF (1<<25)

using namespace std;

int n;
int e[Max], en;
bool vis[Max];
int arr[mMax], an;

int dis[mMax][mMax];
int dp[Max];

int dpp[1<<mMax];

void bfs(int now)
{
	int i, a, b;

	queue<int> q;

	memset(vis, 0, sizeof(vis));
	for(i=0;i<n;i++)
		dp[i] = INF;

	vis[now] = 1;
	dp[now] = 0;
	q.push(now);

	while(!q.empty())
	{
		a = q.front();
		q.pop();

		for(i=0;i<en;i++)
		{
			b = a + e[i];

			if(b >= 0 && b <= n && !vis[b])
			{
				vis[b] = 1;
				dp[b] = dp[a] + 1;

				q.push(b);
			}

		}
	}
}

int f(int s)
{
	int i, j, t;

	if(dpp[s] != -1)
		return dpp[s];

	t = INF;
	for(i=0;i<an;i++)
		if(s & (1<<i))
			break;

	for(j=i+1;j<an;j++)
		if(s & (1<<j))
			t = min(f(s ^ (1<<j) ^ (1<<i)) + dis[i][j], t);

	return dpp[s] = t;
}

int main()
{
	int m, k, i, j, t;
	scanf("%d %d %d", &n, &m, &k);

	for(i=0;i<m;i++)
	{
		scanf("%d", &t);

		vis[t] = 1;
	}

	an = 0;
	for(i=0;i<=n;i++)
		if(vis[i] ^ vis[i+1])
			arr[an++] = i;
	
	en = 0;
	while(k--)
	{
		scanf("%d", &t);

		e[en++] = t;
		e[en++] = -t;
	}

	for(i=0;i<an;i++)
	{
		bfs(arr[i]);

		for(j=0;j<an;j++)
		{
			dis[i][j] = dp[ arr[j] ];
		}
	}
	memset(dpp, -1, sizeof(dpp));
	dpp[0] = 0;
	t = f((1<<an) - 1);

	printf("%d\n", t == INF ? -1 : t);
}
