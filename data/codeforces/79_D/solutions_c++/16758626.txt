#include <cstdio>
#include <cstring>
#include <algorithm>
#define repu(i,x,y) for (int i=x; i<=y; ++i)
#define repd(i,x,y) for (int i=x; i>=y; --i)
using namespace std;

int n,k,m,x,tot,p[10100],len[110],dis[30][30],d[10100],q[10100],head,tail,f[1048576];
bool a[10100];

void update(int x,int dis)
{
    if (x>0 && x<=n && dis<d[x])
        d[x]=dis,q[++tail]=x;
}

void bfs(int x)
{
    memset(d,1,sizeof(d)),d[x]=0;
    for (q[head=tail=0]=x; head<=tail; ++head)
        repu(i,1,m)
            update(q[head]+len[i],d[q[head]]+1),update(q[head]-len[i],d[q[head]]+1);
    repu(i,1,n)
        if (a[i])
            dis[p[x]][p[i]]=d[i];
}

int main()
{
    scanf("%d%d%d",&n,&k,&m),++n;
    repu(i,1,k)
        scanf("%d",&x),a[x]=1;
    repu(i,1,m)
        scanf("%d",&len[i]);
    repd(i,n,1)
        if (a[i]^=a[i-1])
            p[i]=++tot;
    repu(i,1,n)
        if (a[i])
            bfs(i);
    memset(f,80,sizeof(f)),f[0]=0;
    repu(i,1,(1<<tot)-1)
        repu(j,1,tot)
            if (i&(1<<j-1))
            {
                repu(k,j+1,tot)
                    if (i&(1<<k-1))
                        f[i]=min(f[i],f[i^(1<<j-1)^(1<<k-1)]+dis[j][k]);
                break;
            }
    printf("%d\n",f[(1<<tot)-1]>1<<20?-1:f[(1<<tot)-1]);
    return 0;
}
