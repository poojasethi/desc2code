#include<cstdio>
#include<cstring>

#define MN 10001
#define ML 101
#define MK 21
#define MS 1<<(MK-1)
#define INF 0x7fffffff
#define LOWBIT(x) ((x)&(-(x)))
#define min(a,b) ((a)<(b)?(a):(b))

int A[MN],U[ML],B[MN];
int D[MK][MK];
int O[MN];
int N,L,K,sz,one;

void BFS( int k, int d[]){
	static int Q[MN],F[MN];
	int h,t,v;
	memset(F,0,sizeof F);
	F[k]=1;
	Q[h=t=1]=k;
	for (;h<=t;h++){
		for (int i=1;i<=L;i++){
			if ((v=Q[h]+U[i])<=N&&!F[v]){
				F[v]=F[Q[h]]+1;
				Q[++t]=v;
			}
			if ((v=Q[h]-U[i])>=0&&!F[v]){
				F[v]=F[Q[h]]+1;
				Q[++t]=v;
			}
		}
	}
	for (int i=0;i<=N;i++)
		if (O[i]){
			if (F[i]&&i!=k) d[O[i]]=F[i]-1;
			else d[O[i]]=INF;
		}
}

int F[MS],Q[MS],h,t;

void UPD( int k, int f){
	if (F[k]){
		F[k]=min(F[k],f);
	} else {
		F[k]=f;Q[++t]=k;
	}
}

int P[MS];

void DP(){
	int j;
	for (int i=1;i<=sz;i++) P[1<<(i-1)]=i;
	F[Q[h=t=1]=(1<<sz)-1]=1;
	for (;h<=t;h++){
		if (Q[h]==0) break;
		j=LOWBIT(Q[h]);
		for (int k=1;k<=sz;k++)
			if (D[P[j]][k]!=INF&&Q[h]&(1<<(k-1))) UPD(Q[h]^((1<<(k-1))|j),F[Q[h]]+D[P[j]][k]);
	}
	if (F[0]) printf("%d\n",F[0]-1);
	else puts("-1");
}

int main(){
	scanf("%d%d%d",&N,&K,&L);
	for (int i=1;i<=K;i++) scanf("%d",&t),A[t]=1;
	for (int i=1;i<=L;i++) {
		scanf("%d",U+i);
		//if (U[i]==1) one=1;
	}
	for (int i=0;i<=N;i++) {
		B[i]=A[i]^A[i+1];
		if (B[i]) Q[++sz]=i,O[i]=sz;
	}
	for (int i=1;i<=sz;i++)
		BFS(Q[i],D[i]);
	DP();
}
