#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
using namespace std;

const int N = 100005;
int a[N], c[N], D[N], v[N], q[N], g[1 << 21], d[25][25], n, m, k, len, x;

inline void Min(int &x, int y)
{
	if (y < x) x = y;
}

void bfs(int j)
{
	int h = 0, t = 1, x = c[j];
	memset(D, -1, sizeof(D));
	q[1]=x,D[x] = 0;
	while (h < t)
	{
		x = q[++h];
		for (int i = 1; i <= m * 2; i++)
		{
			int y = x + v[i];
			if (y < n + 2 && y > 0 && D[y] < 0) D[y] = D[x] + 1, q[++t] = y;
		}
	}
	for (int i = 0; i < len; i++) d[j][i] = D[c[i]];
}
int main()
{
	scanf("%d%d%d",&n,&k,&m);
	for (int i = 1; i <= k; i++) scanf("%d",&x), a[x] ^= 1, a[x + 1] ^= 1;
	for (int i = 1; i <= m; i++) scanf("%d",&v[i]), v[m + i] = -v[i];
	for (int i = 1; i <= n + 1; i++) if (a[i]) c[len++] = i;
	for (int i = 0; i < len; i++) bfs(i);
	n = len;
	memset(g, 66, sizeof(g));
	g[0] = 0;
	for (int i = 0; i < 1 << n; i++)
	{
		int cnt = 0;
		for (k = 0; k < n; k++) cnt += (i & 1 << k) > 0;
		if (cnt & 1) continue;
		for (k = 0; k < n; k++) if (!(i & 1 << k)) break;
		for (int j = k + 1; j < n; j++) if (!(i & 1 << j) && d[k][j] >= 0)
				Min(g[i | 1 << k | 1 << j], g[i] + d[k][j]);
	}
	if (g[(1 << n) - 1] > 1 << 30) g[(1 << n) - 1] = -1;
	printf("%d\n", g[(1 << n) - 1]);
	
	//for (;;);
	return 0;
}
