# include <cstdio>
# include <algorithm>
using namespace std;

# define REP(i, n) for (int i = 1; i <= n; ++ i)
# define REP_0(i, n) for (int i = 0; i < n; ++ i)
# define REP_0N(i, n) for (int i = 0; i <= n; ++ i)

const int inf = 1 << 28;
int n, m, K, L, f[1 << 20], p[20], dt[25][10010], d[200], q[10010];
bool a[10010];
int main () {
    scanf ("%d%d%d", &n, &K, &L); int t1;
    REP (i, K) scanf ("%d", &t1), a[t1] = true;
    REP (i, L) scanf ("%d", &d[i]);
    REP_0N (i, n) if (a[i] != a[i + 1]) p[m ++] = i;
    REP_0 (id, m) {
        int head = 1, tail = 1, cur, s = p[id];
        REP_0N (i, n) dt[id][i] = inf; dt[id][q[1] = s] = 0;
        while (head <= tail) {
            cur = q[head ++];
            REP (i, L) {
                if (cur - d[i] >= 0 && dt[id][cur - d[i]] == inf) 
                    dt[id][q[++ tail] = cur - d[i]] = dt[id][cur] + 1;
                if (cur + d[i] <= n && dt[id][cur + d[i]] == inf) 
                    dt[id][q[++ tail] = cur + d[i]] = dt[id][cur] + 1;
            }
        }   
    }
    int M = 1 << m;
    REP (s, M - 1) {
        int l = -1; f[s] = inf;
        REP_0 (i, m) if (s >> i & 1) {
            if (l == -1) l = i;
            else f[s] = min (f[s], f[s ^ (1 << l) ^ (1 << i)] + dt[i][p[l]]);
        }
    }
    printf ("%d\n", f[M - 1] == inf ? -1 : f[M - 1]);
    return 0;
}