#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

int m, n, k, l, MAX;
int f[1050000], g[20][11000], d[30], x[30], a[110], cnt;
int st, en, q[11000];

inline void update(int k, int index, int value){
	if (g[k][index]==MAX){
		g[k][index]=value;
		q[++en]=index;
	}
}

int main(){
	//freopen("led.in", "r", stdin); freopen("led.out", "w", stdout);
	//for (scanf("%d", &m); m; m--){
		scanf("%d%d%d", &n, &k, &l);
		for (int i=1; i<=k; i++) scanf("%d", x+i);
		for (int i=1; i<=l; i++) scanf("%d", a+i);
		sort(x+1, x+k+1);
		memset(f, 60, sizeof(f)); MAX=f[0]; f[0]=0;
		memset(g, 60, sizeof(g));
		cnt=0; x[0]=x[k+1]=-10;
		for (int i=1; i<=k; i++){
			if (x[i]!=x[i-1]+1) d[cnt++]=x[i]-1;
			if (x[i]!=x[i+1]-1) d[cnt++]=x[i];
		}
		for (int kk=0; kk<cnt; kk++){
			q[st=en=1]=d[kk]; g[kk][d[kk]]=0;
			while (st<=en){
				int tmp=q[st++];
				for (int i=1; i<=l; i++){
					if (tmp+a[i]<=n && g[kk][tmp+a[i]]>g[kk][tmp]+1) update(kk, tmp+a[i], g[kk][tmp]+1);
					if (tmp-a[i]>0 && g[kk][tmp-a[i]]>g[kk][tmp]+1) update(kk, tmp-a[i], g[kk][tmp]+1);
				}
			}
		}
		k=cnt;
		for (int s=0; s<(1<<k)-1; s++){
			if (f[s]==MAX) continue;
			int first=0, p;
			while (((1<<first)&s)>0) first++;
			for (p=first+1; p<k; p++) if (((1<<p)&s)==0){
				f[s+(1<<first)+(1<<p)]=min(f[s+(1<<first)+(1<<p)], f[s]+g[first][d[p]]);
			}
		}
		if (f[(1<<k)-1]==MAX) f[(1<<k)-1]=-1;
		printf("%d\n", f[(1<<k)-1]);
	//}
}
