#include <cstdio>
#include <bitset>
#include <algorithm>
using namespace std;

const int N = 100050, K = 22, L = 105, inf = ~0u >> 2;

int f[1 << K];
int A[N], dis[K][K], pos[K], len[L];
int n, k, l;
typedef bitset<K> state;

static void bfs (int j, int s)
{
	static int dis[N], que[N];
	int l(0), r(0);
	fill(dis, dis + n + 1, -1);
	dis[que[++r] = s] = 0;
	while (l != r)
	{
		int x = que[++l];
		for (int i = 1; i <= ::l; ++i)
		{
			if (x - len[i] >= 0 && dis[x - len[i]] == -1)
				dis[que[++r] = x - len[i]] = dis[x] + 1;
			if (x + len[i] <= n && dis[x + len[i]] == -1)
				dis[que[++r] = x + len[i]] = dis[x] + 1;
		}
	}
	for (int i = 1; i <= k; ++i)
		::dis[j][i] = dis[pos[i]];
}

int solve (state s)
{
	if (s.none()) return 0;
	int &res = f[s.to_ulong()];
	if (res) return res;
	res = inf;
	int sp, i; state ns(s);
	for (sp = 0; !s[sp]; ++sp) ;
	ns.set(sp, false);
	for (i = sp + 1; i < K; ++i)
		if (s[i] && dis[sp][i] != -1)
		{
			ns.set(i, false);
			res = min(res, solve(ns) + dis[sp][i]);
			ns.set(i, true);
		}
	return res;
}

int main ()
{
	static int A[N];
#ifdef LOCAL
	freopen("in", "r", stdin);
#endif
	scanf("%d%d%d", &n, &k, &l);
	for (int i = 1, a; i <= k; ++i)
	{
		scanf("%d", &a);
		A[a] = 1;
	}
	k = 0;
	state s(0);
	for (int i = 0; i <= n; ++i)
		if (A[i] != A[i + 1])
		{
			pos[++k] = i;
			s.set(k, true);
		}
	for (int i = 1; i <= l; ++i)
		scanf("%d", len + i);
	for (int i = 1; i <= k; ++i)
		bfs(i, pos[i]);
	int r = solve(s);
	printf("%d\n", r == inf ? -1 : r);
}

