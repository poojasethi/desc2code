#include <bits/stdc++.h>
//Damned if I don't take what I want.

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
#define smin(a, b) if (a > b) a = b;

const int MAXN = 2e5 + 100, MAXK = 20, MAXB = 1 << MAXK;

int n, l, k;
int c[MAXN];
int x[MAXK], change[MAXK], cN, dp[MAXB];

inline bool found(int a){
	int ind = lower_bound(x, x + k, a) - x;
	return (ind != k && x[ind] == a);
}

int dis[MAXK][MAXN];

void bfs(int s, int dis[]){
	memset(dis, 63, sizeof ::dis[0]);
	dis[s] = 0;
	
	queue<int> q;
	for (q.push(s); q.size(); q.pop()){
		int u = q.front();
		for (int i = 0; i < l; i++){
			int v = c[i] + u;
			if (v <= n + 1 && v >= 1 && dis[v] > 1e9){
				dis[v] = dis[u] + 1;
				q.push(v);
			}
		}
	}
}

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	cin >> n >> k >> l;

	for (int i = 0; i < k; i++)
		cin >> x[i];
	for (int i = 0; i < l; i++)
		cin >> c[i], c[i + l] = -c[i];
	l += l;

	for (int i = 1; i <= n + 1; i++)
		if (found(i) != found(i - 1)) change[cN++] = i;

	for (int i = 0; i < cN; i++)
		bfs(change[i], dis[i]);

	memset(dp, 63, sizeof dp);
	dp[0] = 0;

	int MSK = 1 << cN;
	for (int mask = 0; mask < MSK; mask++)
		for (int i = 0; i < cN; i++) if ((mask >> i & 1) == 0)
			for (int j = i + 1; j < cN; j++) if ((mask >> j & 1) == 0){
				int len = dis[i][change[j]];
				if (len < 1e9) {
					//cerr << "from " << bitset<4>(j) << " : " << dp[j] << " to " << bitset<4>(j | 1
					smin(dp[mask | (1 << i) | (1 << j)], dp[mask] + len);
				}
			}
	
	if (dp[MSK - 1] < 1e9) cout << dp[MSK - 1] << endl;
	else cout << -1 << endl;
}

