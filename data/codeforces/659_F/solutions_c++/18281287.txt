#include <bits/stdc++.h>
using namespace std;

int n, m;

int ind(int i, int j)
{
	if (i < 0 || i >= n || j < 0 || j >= m)
		return -1;
	return i*m + j;
}

int p[1000005];
int sz[1000005];

int find(int i)
{
	if (p[i] == i || p[i] == -1)
		return i;
	return p[i] = find(p[i]);
}

void un(int i, int j)
{
	i = find(i);
	j = find(j);
	if (i == j)
		return ;
	sz[i] += sz[j];
	p[j] = i;
}

int size(int i, int j)
{
	return sz[find(ind(i, j))];
}

int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
int a[1001][1001];

int add(int i, int j)
{
	int i1 = ind(i, j);
	for (int k = 0; k < 4; k++)
	{
		int i2 = ind(i+dx[k], j+dy[k]);
		if (i2 < 0)
			continue;
		if (a[i+dx[k]][j+dy[k]] < a[i][j])
			continue;
		un(i1, i2);
	}
	return size(i, j);
}

int ans[1001][1001];

void floodfill(int i, int j, int &rem, int th)
{
	if (ind(i, j) < 0)
		return;
	if (a[i][j] < th)
		return;
	if (rem == 0)
		return;
	a[i][j] = 0;
	ans[i][j] = th;
	rem--;
	for (int k = 0; k < 4; k++)
		floodfill(i+dx[k], j+dy[k], rem, th);
}

bool solve(long long k)
{
	memset(ans, 0, sizeof(ans));
	memset(p, -1, sizeof(p));
	for (int i = 0; i < n*m; i++)
		sz[i] = 1;
	vector<pair<int, pair<int, int> > > all;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			all.push_back(make_pair(a[i][j], make_pair(i, j)));

	sort(all.begin(), all.end());
	for (int i = all.size()-1; i >= 0; i--)
	{
		int com = add(all[i].second.first, all[i].second.second);

		if (k % all[i].first == 0 && k / all[i].first <= com)
		{
			int rem = k / all[i].first;
			floodfill(all[i].second.first, all[i].second.second, rem ,all[i].first);
			return true;
		}
	}
	return false;
}

int main()
{
	long long k;
	scanf("%d %d %lld", &n, &m, &k);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			scanf("%d", &a[i][j]);
	bool res = solve(k);
	if (res)
	{
		printf("YES\n");
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				printf(" %d", ans[i][j]);
			}
			printf("\n");
		}
	}
	else
		printf("NO\n");
}