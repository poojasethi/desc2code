#include<cstdio>
#include<queue>
#include<cstring>
#include<iostream>
#include<vector>
using namespace std;
const int maxn = 1e3 + 5;
#define x first
#define y second
#define sa(a) scanf("%d", &a)
#define sal(a) scanf("%I64d", &a)
typedef pair<int, int> pii;
int vis[maxn][maxn];
int a[maxn][maxn], checked[maxn][maxn];
int m, n;
long long k;
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, -1, 1};
bool bfs(pii pa,long long res)
{
    queue<pii>q;
    memset(vis, 0, sizeof(vis));
    q.push(pa);
    int cnt = 0;
    while(!q.empty()){
        pii t = q.front();q.pop();
        if(vis[t.x][t.y]) continue;
        vis[t.x][t.y] = 1;
        cnt++;
        if(cnt == res) return true;
        int x = t.x, y = t.y;
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx >= 0 && nx < n && ny >= 0 && ny < m){
                if(a[nx][ny] < a[pa.x][pa.y]) continue;
                if(a[nx][ny] == a[pa.x][pa.y]) checked[nx][ny] = 1;
                q.push(pii(nx, ny));
            }
        }
    }
    return false;
}
int solve()
{
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            if(checked[i][j]) continue;
            long long cnt = k/ a[i][j];
            if(k % a[i][j] == 0 &&  cnt <= m * n){
                if(bfs(pii(i, j), cnt)) return a[i][j];
                }
            }
        }
    return -1;
}
int main (void)
{
    sa(n),sa(m),sal(k);
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            sa(a[i][j]);
        }
    }
    int ans = solve();
    if(ans == -1) return printf("NO\n"), 0;
    printf("YES\n");
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            if(vis[i][j]) printf("%d%c", ans, j == m - 1? '\n':' ');
            else printf("0%c", j == m - 1?'\n':' ');
        }
    }
    return 0;
}
