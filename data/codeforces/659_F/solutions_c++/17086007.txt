#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <complex>
#include <cmath>
#include <map>
#include <set>
#include <string>
#include <queue>
#include <stack>
#include <bitset>
using namespace std;
typedef pair<int, int>pii;
#define ll long long
#define mem(a) memset(a, 0, sizeof(a))
#define x first
#define y second
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, -1, 1};
const int maxn = 1005;
int vis[maxn][maxn], a[maxn][maxn], c[maxn][maxn];
int n, m;
ll sum;
bool bfs(int i, int j)
{
    queue <pii> q;
    int cnt = 0;
    q.push(pii(i, j));
    mem(vis);
    while(!q.empty()) {
         pii p = q.front(); q.pop();
        if(vis[p.x][p.y])  continue;
        cnt++;
        vis[p.x][p.y] = 1;
        if(cnt == sum/a[i][j]) return true;
         for(int k = 0; k < 4; k++){
            int nx = p.x + dx[k];
            int ny = p.y + dy[k];
            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m){
                if(a[nx][ny] < a[i][j]) continue;
                if(a[nx][ny] == a[i][j]) c[nx][ny] = 1;
                q.push(pii(nx, ny));
            }
            }
        }
    return false;
}
int solve() {
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            if(sum % a[i][j] == 0 && sum/a[i][j] <= n*m && !c[i][j]) {
                if(bfs(i, j))
                    return a[i][j];
            }
        }
    }
    return -1;
}
int main()
{
    cin>>n>>m>>sum;
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            scanf("%d", &a[i][j]);
        }
    }
    int ans = solve();
    if(ans == -1) {
        puts("NO");
    } else {
        puts("YES");
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                if(vis[i][j]) {
                    printf("%d ", ans);
                } else {
                    printf("0 ");
                }
            }
            puts(" ");
        }
    }
    return 0;
}
