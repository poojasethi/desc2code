#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define PB pop_back
#define fs first
#define se second
#define eps (1e-8)
#define INF (0x3f3f3f3f)

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> P;

const int maxn=1e6+30000;
int a[1005][1005];
int dic[maxn],dh=0;
vector<int> pos[maxn];
int n,m;
int cnt[maxn];
int fa[maxn];
int find(int x){
	if(fa[x]==x) return x;
	return fa[x]=find(fa[x]);
}
#define idx(x) (lower_bound(dic,dic+dh,x)-dic)
const int drx[]={0,0,-1,1};
const int dry[]={-1,1,0,0};
void unite(int a,int b){
	if(find(a)==find(b)) return;
	int c=cnt[find(a)];
	fa[find(a)]=find(b);
	cnt[find(b)]+=c;
}
ll K;
int mcnt;
int st;
bool vis[maxn];
void dfs(int v){
	if(mcnt==0) return;
	vis[v]=1;
	mcnt--;
	if(mcnt==0) return;
	int x=v/m,y=v%m;
	for(int i=0;i<4;i++){
		int dx=x+drx[i],dy=y+dry[i];
		if(dx<0||dx>=n||dy<0||dy>=m) continue;
		int u=dx*m+dy;
		if(find(u)==st&&!vis[u]) dfs(u);
	}
}
int main(){
   //	freopen("/home/slyfc/CppFiles/in","r",stdin);
   	for(int i=0;i<maxn;i++)
   		fa[i]=i,cnt[i]=1;
   	cin>>n>>m>>K;
   	for(int i=0;i<n;i++){
   		for(int j=0;j<m;j++){
   			scanf("%d",&a[i][j]);
   			dic[dh++]=a[i][j];
   		}
   	}
   	sort(dic,dic+dh);
   	dh=unique(dic,dic+dh)-dic;
   	for(int i=0;i<n;i++){
   		for(int j=0;j<m;j++){
   			a[i][j]=idx(a[i][j]);
   			pos[a[i][j]].pb(i*m+j);
   		}
   	}
   	for(int i=dh-1;i>=0;i--){
   		for(int j=0;j<pos[i].size();j++){
   			int x=pos[i][j]/m,y=pos[i][j]%m;
   			for(int k=0;k<4;k++){
   				int dx=x+drx[k],dy=y+dry[k];
   				if(dx<0||dx>=n||dy<0||dy>=m||a[dx][dy]<i) continue;
   				unite(dx*m+dy,x*m+y);
   			}
   		}
   		if(K%dic[i]!=0) continue;
   		ll need=K/dic[i];
   		for(int j=0;j<pos[i].size();j++){
   			int v=pos[i][j];
   			int f=find(v);
   			if(cnt[f]>=need){
   				mcnt=need;
   				st=f;
   				puts("YES");
   				dfs(f);
   				for(int x=0;x<n;x++){
   					for(int y=0;y<m;y++){
   						if(vis[x*m+y]) printf("%d ",dic[i]);
   						else printf("0 ");
   					}
   					puts("");
   				}
   				return 0;
   			}
   		}
   	}
   	puts("NO");
    return 0;
}
