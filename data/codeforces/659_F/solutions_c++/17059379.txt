#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 1e3 + 5;

int n, m, x, y, z, t, ans[N][N], yon[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}, root[N * N + N], size[N * N + N], mx, h[N][N];
vector< pair< int , pii > > v;
ll k;

int findset(int x) { return root[x] = root[x] == x ? x : findset(root[x]); } 

int get(int x, int y) { return x * m + y; }

 void merge(int x, int y) {
	x = findset(x); 
	y = findset(y);
	if(x == y) return ;
	root[y] = x;
	size[x] += size[y];
	mx = max(mx, size[x]);	
}


void add(int x, int y) {
	root[get(x, y)] = get(x, y);
	size[get(x, y)] = 1;
	h[x][y] = 1;
	mx = max(mx, 1);
	FOR(i, 0, 3) {
		int xx = x + yon[i][0];
		int yy = y + yon[i][1];
		if(h[xx][yy]) {
			merge(get(x, y), get(xx, yy));
		}
	}
}

void bfs(int x, int y, int z) {
	queue< pii > q;
	int need = k / z; 
	q.push(mp(x, y));	
	h[x][y] = 0;

	while(q.size() && need) {
		x = q.front().st;
		y = q.front().nd;
		q.pop(); --need;
		ans[x][y] = z;
		FOR(i, 0, 3) {
			int xx = x + yon[i][0];
			int yy = y + yon[i][1];
			if(h[xx][yy]) {
				q.push(mp(xx, yy));
				h[xx][yy] = 0;
			}
		}
	}
	FOR(i, 1, n) {
		FOR(j, 1, m) 
			printf("%d ", ans[i][j]);
		cout << endl;
	}
}

int main() {

	scanf("%d %d %lld", &n, &m, &k);

	FOR(i, 1, n)
		FOR(j, 1, m) {
			scanf("%d", &x);
			v.pb(mp(x, mp(i, j)));
		}

	sort(v.begin(), v.end());

	ROF(i, n * m - 1, 0) {
		add(v[i].nd.st, v[i].nd.nd);
		if(k % v[i].st == 0 && v[i].st * (ll) mx >= k) {
			cout << "YES\n";
			bfs(v[i].nd.st, v[i].nd.nd, v[i].st);			
			return 0;
		}
	}

	cout << "NO\n";

	return 0;
}
