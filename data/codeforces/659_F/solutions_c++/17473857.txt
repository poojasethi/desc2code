#include <iostream>
#include <vector>
#include <utility>

using namespace std;

#define LLI long long int
#define LI long int

int n, m;
LLI k;
LLI hay[1005][1005];

LLI count = 0;
bool visited[1005][1005];
bool cand[1005][1005];
vector<pair<int, int> > visitedNodes = vector<pair<int, int> >();

void initVisited()
{
	for (LLI i = 0; i < visitedNodes.size(); i++)
	{
		visited[visitedNodes[i].first][visitedNodes[i].second] = false;
	}
	visitedNodes = vector<pair<int, int> >();
}

void discardCandidates()
{
	LLI cnt = visitedNodes.size();
	LLI totHay = 0;

	for (LLI i = 0; i < cnt; i++)
		totHay = totHay + hay[visitedNodes[i].first][visitedNodes[i].second];

	for (LLI i = 0; i < cnt; i++)
	{
		int l = visitedNodes[i].first, u = visitedNodes[i].second;
		if ((totHay < k) || ((hay[l][u] * cnt) < k))
		{
			cand[l][u] = false;
		}
	}
}

bool dfs(int i, int j, LLI val)
{
	if ((i < 0) || (j < 0) || (i >= n) || (j >= m) || visited[i][j] || (val > hay[i][j]))
		return false;

	if (val == hay[i][j])
		cand[i][j] = false;
	visited[i][j] = true;
	visitedNodes.push_back(make_pair(i, j));
	count++;

	if (count*val == k)
		return true;

	return (dfs(i-1, j, val) || dfs(i, j-1, val) || dfs(i+1, j, val) || dfs(i, j+1, val));
}



int main()
{

	cin >> n >> m >> k;


	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> hay[i][j];
		}
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cand[i][j] = true;
			visited[i][j] = false;
		}
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (cand[i][j] && (k % hay[i][j] == 0))
			{
				initVisited();
				count = 0;
				if (dfs(i, j, hay[i][j]))
				{
					cout << "YES" << endl;
					for (int i1 = 0; i1 < n; i1++)
					{
						for (int j1 = 0; j1 < m; j1++)
						{
							int temp = visited[i1][j1] ? hay[i][j] : 0;
							cout << temp << " ";
						}
						cout << endl;
					}

					return 0;
				}
				else
				{
					discardCandidates();
				}
			}
		}
	}

	cout << "NO" << endl;
	return 0;
}