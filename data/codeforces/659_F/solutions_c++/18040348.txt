#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int go[4][2] = {0, 1, 1, 0, 0, -1, -1, 0};

#define ran 1111111

int n, m;
long long int k;
int v[1111][1111], ans[1111][1111];
pair<int,int> a[ran];
int p[ran], sz[ran];

int rem, key;

int get_p(int x) {
	return p[x]==-1 ? x : p[x] = get_p(p[x]);
}

void merge(int id1, int id2) {
	int a = get_p(id1), b = get_p(id2);
	if(a==b) return;
	p[b] = a;
	sz[a]+=sz[b];
}

void dfs(int x, int y) {
	if (!rem) return;
	
	rem--;
	ans[x][y] = key;
	for(int i=0;i<4;i++) {
		int xx = x+go[i][0], yy=y+go[i][1];
		if(xx<0||xx>=n||yy<0||yy>=m) continue;
		if(ans[xx][yy] || v[xx][yy]<key) continue;
		dfs(xx, yy);
	}
}

int main() {
	scanf("%d%d%I64d", &n, &m, &k);
	int cnt=0;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++) {
			scanf("%d", &v[i][j]);
			a[cnt++] = make_pair(v[i][j], i*m+j);
		}
	sort(a,a+cnt);
	
	for(int i=0;i<cnt;i++) {
		p[i] = -1;
		sz[i] = 1;
	}
	
	bool fnd = false;
	for(int i=cnt-1;i>=0;i--) {
		int val = a[i].first;
		int id = a[i].second, x = a[i].second/m, y = a[i].second%m;
		for(int j=0;j<4;j++) {
			int xx = x+go[j][0], yy=y+go[j][1];
			if(xx<0||xx>=n||yy<0||yy>=m) continue;
			if(val > v[xx][yy]) continue;
			
			merge(id, xx*m+yy);
		}
		if(k%val==0 && k/val<=sz[get_p(id)]) {
			rem = k/val;
			key = val;
			dfs(x, y);
			fnd = true;
			break;
		}
	}
	if(!fnd) puts("NO");
	else {
		puts("YES");
		for(int i=0;i<n;i++)
			for(int j=0;j<m;j++)
				printf("%d%c", ans[i][j], j<m-1 ? ' ' : '\n');
	}
	
	return 0;
}