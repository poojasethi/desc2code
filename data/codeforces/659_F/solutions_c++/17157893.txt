#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#define N 1005
#define P pair<int,int>
using namespace std;


int dir[4][2]={{0,1},{1,0},{0,-1},{-1,0}};
int map[N][N],vis[N][N],c[N][N];
int n,m;
long long k;


bool bfs(P pa,int cnt)
{
	queue<P> q;
	memset(vis,0,sizeof(vis));
	vis[pa.first][pa.second]=1;
	q.push(pa);
	int num=1;
	while(!q.empty())
	{
		int i;
		P now=q.front();q.pop();
		int x=now.first,y=now.second;
		if(num==cnt) return 1;
		for(i=0;i<4;i++)
		{
			int xc=x+dir[i][0];
			int yc=y+dir[i][1];
			if(xc>=0&&xc<n&&yc>=0&&yc<m&&!vis[xc][yc])
			{
				if(map[xc][yc]<map[pa.first][pa.second]) continue;
				if(map[xc][yc]==map[pa.first][pa.second]) c[xc][yc]=1;
				num++;
				q.push(P(xc,yc));
				vis[xc][yc]=1;
				if(num==cnt) return 1;
			}
		}
	}
	return 0;
}

int solve()
{
	int i,j;
	memset(c,0,sizeof(c));
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		{
			if(c[i][j]) continue;
			long long cnt=k/map[i][j];
			if(k%map[i][j]==0&&cnt<=m*n)
				if(bfs(P(i,j),cnt)) return map[i][j];
		}
	}
	return -1;
}

int main()
{
	int i,j;
	while(~scanf("%d%d%lld",&n,&m,&k))
	{
		for(i=0;i<n;i++)
		{
			for(j=0;j<m;j++)
			{
				scanf("%d",&map[i][j]);
			}
		}
		int ans=solve();
		if(ans!=-1)
		{
			printf("YES\n");
			for(i=0;i<n;i++)
			{
				for(j=0;j<m;j++)
				{
					printf("%d%c",vis[i][j]?ans:0,j<m-1?' ':'\n');
				}
			}
		}
		else printf("NO\n");
	}
	return 0;
}
 		   	   	   		  	 			  				 	