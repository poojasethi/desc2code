#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;


int n,m, d[100000], low[100000];
bool finished[100000];
struct edge{
	int u, v, f;
};
vector<int> ady[100000];
bool ok = true;
edge all[300100];
int dfs(int u, int f) {
	d[u] = (f!=-1)?d[f]+1:1;
	low[u] = d[u];
	for(int i = 0; i < ady[u].size(); i++) {
		int v = all[ady[u][i]].v^all[ady[u][i]].u^u;
		if (v == f) continue;
		if(d[v] != 0) {
			if(!finished[v]) {
				all[ady[u][i]].f = u;
				low[u] = min(low[u],d[v]);
			}
		} else {
			all[ady[u][i]].f = u;
			low[u] = min(low[u],dfs(v,u));
			if(low[v]>d[u]) {
				ok = false;
				return 0;
			}
		}
	}
	finished[u] = true;
	return low[u];
}


int main () {
	scanf("%d%d", &n, &m);
	int u,v, ec=0;
	memset(d,0,sizeof(d));
	memset(finished,0,sizeof(finished));
	for(int i = 0; i < m; i++) {
		scanf("%d%d", &u, &v);u--,v--;
		all[ec].u = u;
		all[ec].v = v;
		ady[u].push_back(ec);
		ady[v].push_back(ec++);
	}
	dfs(0,-1);
	if(!ok) {
		printf("0\n");
	} else {
		for(int i = 0; i < m; i++) {
			printf("%d %d\n", all[i].f+1, (all[i].u^all[i].v^all[i].f)+1);
		}
	}
	return 0;
}

