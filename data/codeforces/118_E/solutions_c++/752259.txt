#include <iostream>
#include <string>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

int n, m;
vector<int> edges[100001];
vector<int> ans[100001];

int t;
int low[100001];
int d[100001];

int dfs(int p, int last) {
	low[p] = t;
	d[p] = t++;
	for (int i = 0; i < edges[p].size(); i++) {
		int q = edges[p][i];
		if (q == last) continue;

		if (d[q]) {
			if (d[q] > d[p]) continue;
			low[p] = min(low[p], d[q]);
			ans[p].push_back(q);
		} else {
			if (!dfs(q, p)) return 0;
			low[p] = min(low[p], low[q]);
			if (low[q] > d[p]) return 0;
			ans[p].push_back(q);
		}
	}
	return 1;
}

int main() {
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; i++) {
		int a, b;
		scanf("%d %d", &a, &b);
		edges[a].push_back(b);
		edges[b].push_back(a);
	}

	t = 1;
	if (!dfs(1, 0)) {
		puts("0");
	} else {
		for (int i = 1; i <= n; i++)
			for (int j = 0; j < ans[i].size(); j++)
				printf("%d %d\n", i, ans[i][j]);
	}
	return 0;
}