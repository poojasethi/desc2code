#include <iostream>
#include<fstream>
#include <vector>
#include<algorithm>
#include<cstdlib>
#include<sstream>

using namespace std;

int n,m;
vector<int> G[100000+10];
int viz[100000+10],lev[100000+10],minlev[100000+10];
ostringstream ss;
void DFS(int nod,int from)
{
	viz[nod]=true;
	minlev[nod]=lev[nod]+1;
	for(int i=0,stop=G[nod].size();i<stop;++i)
	{
		int vecin=G[nod][i];
		if(!viz[vecin])
		{
			ss<<nod<<' '<<vecin<<'\n';
			lev[vecin]=lev[nod]+1;
			DFS(vecin,nod);
			minlev[nod]=min(minlev[nod],minlev[vecin]);
			if(minlev[vecin]>lev[nod])
			{
				cout<<0<<'\n';
				exit(0);
			}
		}
		else if(vecin!=from && lev[nod]>lev[vecin])
		{
			ss<<nod<<' '<<vecin<<'\n';
			minlev[nod]=min(minlev[nod],lev[vecin]);
		}
	}
}
int main() 
{

	
	//ifstream cin("e.in");


	cin>>n>>m;
	for (int i=1; i<=m; ++i) 
	{
		int x, y;
		cin>>x>>y;
		G[x].push_back(y);
		G[y].push_back(x);
	}
	lev[1]=0;
	DFS(1,0);
	cout<<ss.str();
	return 0;
}
