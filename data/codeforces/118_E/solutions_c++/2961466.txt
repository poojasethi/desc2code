#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <cmath>
using namespace std;
const int M = 100002;
vector<int>g[M],path[M];
int dfn[M],low[M],cnt,n,m;
bool flag;

void init(){
	cnt=0,flag=1;
	memset(dfn,-1,sizeof(dfn));
	for(int i=0;i<=n;i++){
		g[i].clear();
		path[i].clear();
	}
}
void dfs(int u,int father){
	dfn[u]=low[u]=++cnt;
	for(int i=0;i<g[u].size();i++){
		int v=g[u][i];
		if(-1==dfn[v]){
			dfs(v,u);
			low[u]=min(low[u],low[v]);
			path[u].push_back(v);
		}
		else{
			if(v!=father){
				low[u]=min(low[u],dfn[v]);
				if(dfn[u]>dfn[v])
					path[u].push_back(v);
			}
		}
		if(low[v]>dfn[u])
			flag=0;
	}
}
int main(){
	while(cin>>n>>m){
		init();
		while(m--){
			int u,v;
			cin>>u>>v;
			g[u].push_back(v);
			g[v].push_back(u);
		}
		for(int i=1;i<=n;i++)
			if(-1==dfn[i])
				dfs(i,0);
		cout<<endl;
		if(flag)
			for(int i=1;i<=n;i++)
				for(int j=0;j<path[i].size();j++)
					cout<<i<<" "<<path[i][j]<<endl;
		else
			cout<<"0"<<endl;
	}
	return 0;
}
