#include <algorithm>
#include <iostream>
#include <stdio.h>
#define  MAXN 100005
#define  MAXM 600005
using namespace std;

int N,M,E=1,dfs_cnt;
int Y[MAXM];
int Nx[MAXM];
int Dir[MAXM];
int Fs[MAXN];
int Dfn[MAXN];
int Low[MAXN];

bool DFS(int X)
{
  Dfn[X] = Low[X] = ++dfs_cnt;
  for(int v=Fs[X] ; v ; v=Nx[v])
  if(!Dir[v])
  {
    Dir[v]  = 1;
    Dir[v^1]= -1;
    if(!Dfn[Y[v]])
    {
      bool st=DFS(Y[v]);
      if(st==false)    return 0;
      Low[X]=min(Low[X],Low[Y[v]]);
    }
    else Low[X] = min ( Low[X] , Dfn[Y[v]] );
  }
  if(X!=1 && Dfn[X]==Low[X])   return 0;
  return 1;
}

int main()
{
  cin >> N >> M;
  for(int i=0 ; i<M ; i++)
  {
    int x,y;
    cin >> x >> y;
    Nx[++E] = Fs[x] , Fs[x] = E , Y[E] = y;
    Nx[++E] = Fs[y] , Fs[y] = E , Y[E] = x;
  }
  bool st=DFS(1);
  if(st==false) cout << 0 << endl;
  else 
    for(int i=1 ; i<=N ; i++)
      for(int v=Fs[i] ; v ; v=Nx[v])
        if(Dir[v]==1)
          cout << i << ' ' << Y[v] << endl;
  return 0;
}
