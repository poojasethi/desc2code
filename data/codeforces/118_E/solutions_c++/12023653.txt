#include <bits/stdc++.h>
using namespace std;

const int MAX = 3e5 + 5;
int n, m, t, l, a[MAX], b[MAX], td[MAX], low[MAX];
vector <int> g[MAX];

void dfs(int nod, int p) {
    low[nod] = td[nod] = ++t;

    for(int i = 0; i < g[nod].size(); i++) {
        int newn = g[nod][i];

        if(!low[newn]) {
            a[++l] = nod, b[l] = newn;
            dfs(newn, nod);

            if(low[newn] < low[nod])
                low[nod] = low[newn];

            if(low[newn] > td[nod]) {
                printf("0\n");
                exit(0);
            }
        }

        else if(newn != p) {
            if(td[nod] > td[newn])
                a[++l] = nod, b[l] = newn;

            if(td[newn] < low[nod])
                low[nod] = td[newn];
        }
    }
}

int main() {
    //freopen("a.in", "r", stdin);
    //freopen("a.out", "w", stdout);

    scanf("%d%d", &n, &m);
    for(int i = 1; i <= m; i++) {
        int a, b; scanf("%d%d", &a, &b);
        g[a].push_back(b);
        g[b].push_back(a);
    }

    dfs(1, -1);

    for(int i = 1; i <= l; i++)
        printf("%d %d\n", a[i], b[i]);

    return 0;
}
