#include <bits/stdc++.h>

using namespace std;

const int N = 1e5 + 1;
vector <pair <int, int> > g[N];
vector <int> v[N];
int a[3 * N], b[3 * N], h[N];
bool mark[N], is[3 * N];

void dfs(int x, int dad, int dis) {
	mark[x] = true;
	h[x] = dis;
	for (int i = 0; i < g[x].size(); i++)
		if (!mark[g[x][i].first]) {
			is[g[x][i].second] = true;
			dfs(g[x][i].first, x, dis + 1);
		}
}

void SC(int x) {
	mark[x] = true;
	for (int i = 0; i < v[x].size(); i++)
		if (!mark[v[x][i]])
			SC(v[x][i]);
}

main() {
	int n, m;
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; i++) {
		int u, v;
		scanf("%d %d", &u, &v);
		--u, --v;
		g[u].push_back(make_pair(v, i));
		g[v].push_back(make_pair(u, i));
		a[i] = u, b[i] = v;
	}
	dfs(0, 0, 0);
	fill(mark, mark + N, false);
	for (int i = 0; i < m; i++) {
		if (is[i] && h[b[i]] < h[a[i]])
			swap(a[i], b[i]);
		if (!is[i] && h[b[i]] > h[a[i]])
			swap(a[i], b[i]);
		v[b[i]].push_back(a[i]);
	}
	SC(0);
	int ind = min_element(mark, mark + n) - mark;
	if (!mark[ind])
		return cout << 0 << endl, 0;
	for (int i = 0; i < m; i++)
		printf("%d %d\n", a[i] + 1, b[i] + 1);
}
