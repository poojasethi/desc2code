#include <cstdio>
#include <vector>
using namespace std;

struct Edge {
	int u, v;
	bool used;
};

vector<Edge> E;
vector<vector<int> > G;

int _di, _fi, _count;
vector<int> _d, _f;

int solve(int u) {
	int low = _d[u] = _di++;
	for (int i = 0; i < G[u].size(); ++i) {
		Edge& e = E[G[u][i]];
		if (e.used) continue;
		if (e.u != u) swap(e.u, e.v);
		int v = e.v;
		e.used = true;

		if (_d[v] == -1) {
			low = min(low, solve(v));
		} else if (_f[v] == -1) {
			low = min(low, _d[v]);
		}
	}
	if (low == _d[u]) {
		++_count;
	}
	_f[u] = _fi++;
	return low;
}

int solve() {
	_count = _di = _fi = 0;
	_d = _f = vector<int>(G.size(), -1);
	for (int i = 0; i < G.size(); ++i) {
		if (_d[i] == -1) {
			solve(i);
		}
	}
	return _count;
}

int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	G = vector<vector<int> > (n);
	for (int i = 0; i < m; ++i) {
		int u, v;
		scanf("%d%d", &u, &v);
		Edge e = { u-1, v-1, false };
		E.push_back(e);
		G[u-1].push_back(E.size()-1);
		G[v-1].push_back(E.size()-1);
	}
	int res = solve();
	if (res == 1) {
		for (int i = 0; i < E.size(); ++i) {
			printf("%d %d\n", E[i].u+1, E[i].v+1);
		}
	} else {
		printf("0\n");
	}
	return 0;
}

 	  	 	   				   	  	 			 		  	