

#include <vector>
#include <iostream>
#include <stdio.h>

using namespace std;

#define maxn 100009
#define maxe 900009
typedef pair<int,int>par;

vector<int>grafo[maxn];
bool mk[maxn];
int n,m;
int time = 1;
int low[maxn],d[maxn], parent[maxn];
int cant[maxn];
bool bridges;
int path[maxe];
int pos;

void dfs(int v, int p)
{
	low[v] = d[v] = time++;
	mk[v] = true;
	int size = grafo[v].size();

	for(int i = 0; i < size; i++)
	{
		int w = grafo[v][i];

		if(p != w)
		{

			if(!mk[w])
			{
				path[pos++] = v;
				path[pos++] = w;
				dfs(w,v);
				low[v] = min(low[w],low[v]);
				if(low[w] > d[v])
					bridges = true;
			}
			else
			{
				low[v] = min(low[v],d[w]);
				if(d[w] < d[v])
				{
					path[pos++] = v;
					path[pos++] = w;
				}

			}
		}
	}
}
int main()
{
	scanf("%d %d", &n, &m);

	int a,b;
	while(m--)
	{
		scanf("%d %d", &a, &b);
		grafo[a].push_back(b);
		grafo[b].push_back(a);
	}
	//cout << "------------- " << endl;
	dfs(1,-1);

	if(bridges)
		cout << 0 << endl;
	else
	{
		for(int i = 0; i < pos - 1; i+=2)
			cout << path[i] << " " << path[i + 1] << endl;
	}

	return 0;
}
