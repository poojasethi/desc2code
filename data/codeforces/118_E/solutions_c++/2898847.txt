#include <iostream>
//#include <conio.h>
#include <vector>

using namespace std ;

const int maxn = 1000000 ;
vector <int> v[maxn] , vj[maxn] ;
int n , m , x , y , mark[maxn] ;
bool mark1[maxn] ;
void dfs (int x,int par){
	mark[x]++ ;
	for (int i=0 ; i<v[x].size () ; i++){
		if (mark[v[x][i]]==0)	{dfs (v[x][i],x) ; vj[v[x][i]].push_back(x) ;}
		else if (mark[v[x][i]]==1 && par != v[x][i])	{vj[v[x][i]].push_back(x) ;}
	}
	mark[x]++;
}
void godfs (int x){
	mark1[x]=true ;
	for (int i=0 ; i<vj[x].size () ; i++)
		if (!mark1[vj[x][i]])	godfs (vj[x][i]) ;
}
int main (){
	cin >> n >> m ;
	for (int i=0 ; i<m ; i++){	
		cin >> x >> y ;
		x-- ; y-- ;
		v[x].push_back(y) ;
		v[y].push_back(x) ;
	}
	dfs (0 , -1) ;
	godfs (0) ;
	for (int i=0 ; i<n ; i++)
		if (!mark1[i])	{cout << 0 << endl ; return 0;}
	for (int i=0 ; i<n ; i++)
		for (int j=0 ; j<vj[i].size () ; j++)
			cout << i+1 << " " << vj[i][j]+1 << endl ;		
	//getch ();
	return 0;
}	
	
