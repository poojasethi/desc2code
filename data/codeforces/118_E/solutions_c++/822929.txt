#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

const int MAXN = 100001;;

typedef pair <int, int> pii;

int N, M;
vector < int > E[ MAXN ];

int time = 0;
int discover[ MAXN ];
int lowlink[ MAXN ];

vector < pii > sol;

void dfs( int n, int d ) {
	discover[n] = ++time;
	lowlink[n] = discover[n];
	
	for (int i = 0; i < (int) E[n].size(); ++i) {
		int w = E[n][i];
		if (w == d) continue;
		
		if (discover[w]) {
			if (discover[n] > discover[w]) {
				lowlink[n] = min(lowlink[n], discover[w]);
				sol.push_back( pii(n, w) );
			}
		} else {
			dfs( w, n );
			
			if (lowlink[w] > discover[n]) 
				throw -1;
				
			lowlink[n] = min(lowlink[n], lowlink[w]);
			sol.push_back( pii(n, w) );
		}
	}
}

int main()
{
	scanf("%d%d", &N, &M);
	for (int i = 0; i < M; ++i) {
		int x, y; scanf("%d%d", &x, &y);
		--x, --y;
		E[x].push_back(y);
		E[y].push_back(x);
	}
	
	try {
		dfs( 0, -1 );
		for (int i = 0; i < (int) sol.size(); ++i) 
			printf("%d %d\n", sol[i].first+1, sol[i].second+1);
	} catch ( int ex ) {
		puts("0");
	}
	
	return 0;
}



