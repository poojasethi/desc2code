#include<iostream>
#include<vector>
#include<cstdlib>
using namespace std;

#define pb push_back
#define maxn 100009

int level[maxn],low[maxn];
bool visit[maxn];

vector<int> graf[maxn];

vector<int> ax,ay;

int d=1;

void dfs( int v, int p )
{

  visit[v]=true;

   level[v]=low[v]=d++;

  for(int i=0;i<graf[v].size();i++)
   {

     int c=graf[v][i];
   
     if(c==p)
    continue;

    if( visit[c] )
    {
         low[v]=min( low[v] , level[c] ); //t

         if( level[c] < level[v] ) //yuptuns's edge revrsal
            { ax.pb(v);
              ay.pb(c);
            }
     }
     else
     {

         ax.pb(v); 
         ay.pb(c);
      
         dfs(c,v);
    
          low[v]=min( low[v] , low[c] );
       
         if( low[c] > level[v] )//Bridge
           { cout<<"0\n";
         exit(0);
          }
     }//end else

    }//end for
}



int main()
{
int m,n,a,b;


 cin>>n>>m;


  for(int i=1;i<=m;i++)
   { cin>>a>>b;
     graf[a].pb(b);
     graf[b].pb(a);
   }

 dfs(1,-1);

 for(int i=0;i<ax.size();i++)
  cout<<ax[i]<<" "<<ay[i]<<endl;

  return 0;
}














  