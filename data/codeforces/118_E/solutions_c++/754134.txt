#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>

#define MAX (100010)

using namespace std;


int N;
vector<int> G[MAX];
int low[MAX], lbl[MAX];
int t;

set< pair<int,int> > resp;

bool dfs(int i, int p)
{
  lbl[i] = t++;
  low[i] = lbl[i];

  for(int k = 0; k < G[i].size(); k++){
    int j = G[i][k];
    if(j == p) continue;
    if(lbl[j] == -1){
      resp.insert(make_pair(j, i));
      if(!dfs(j, i)) return false;
      if(low[j] > lbl[i]) return false;
      low[i] = min(low[i], low[j]);
    } else{
      low[i] = min(low[i], lbl[j]);
      if(lbl[j] > lbl[i])
	resp.insert(make_pair(i, j));
    }
  }

  return true;
}


int main()
{
  int m;
  scanf(" %d %d", &N, &m);
  for(int i = 0; i < N; i++){
    G[i].clear();
    lbl[i] = low[i] = -1;
  }
  while(m--){
    int a, b;
    scanf(" %d %d", &a, &b);
    a--; b--;
    G[a].push_back(b);
    G[b].push_back(a);
  }
  t = 0;
  if(!dfs(0, -1)){
    printf("0\n");
  } else{
    for(set< pair<int, int> >::iterator it = resp.begin(); it != resp.end(); it++){
      printf("%d %d\n", it->first+1, it->second+1);
    }
  }
  return 0;
}
