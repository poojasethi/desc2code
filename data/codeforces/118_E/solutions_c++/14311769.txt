#include<bits/stdc++.h>
using namespace std;
int const maxn = 1e5+10;
int n, m, low[maxn], h[maxn], mrk[maxn], cont;
vector<int> adj[maxn];
bool bridge;
void dfs(int v, int par){
	mrk[v] = 1;
	low[v] = h[v] = ++cont;
	for(int i = 0; i < adj[v].size(); i++){
		int w = adj[v][i];
		if(w == par) continue;
		if(!mrk[w]){
			dfs(w,v);
			low[v] = min( low[v], low[w]);
			if(low[w] > h[v]) bridge = true;
		}
		else low[v] = min( low[v], h[w]);
	}
}

typedef pair<int,int> pii;
map<pii,int> in;

void solve(int v, int par){
	mrk[v] = 1;
	for(int i = 0; i < adj[v].size(); i++){
		int w = adj[v][i];
		if(w == par) continue;
		if(!mrk[w]){
			if(!in[pii(w,v)] && !in[pii(v,w)]) printf("%d %d \n", v, w), in[pii(w,v)] = 1;
			solve(w,v);
		}
		else if(!in[pii(w,v)] && !in[pii(v,w)]) printf("%d %d \n", v, w), in[pii(v,w)] = 1;
	}
}
int main(){
	scanf("%d%d",&n,&m);
	for(int i = 1; i <= m; i++){
		int u, v;
		scanf("%d%d",&u,&v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(1,1);
	if(bridge){
		printf("0\n");
		return 0;
	}
	memset(mrk,0,sizeof(mrk));
	solve(1,1);
}
