#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 2e5 + 5;
const int M = N << 2;

int n;
int a[M], b[M], dc[M];
int s[M], f[M], vs[M];

int to[M], next[M], end[M], ch[M], tms;

void link(int x, int y)
{
	to[++tms]=y, next[tms]=end[x], end[x]=tms;
	to[++tms]=x, next[tms]=end[y], end[y]=tms;
}

int st[N], cur[N], top;

void walk(int S)
{
	top = 1, st[1] = S;
	for(; top; )
	{
		int x = st[top]; vs[x] = 1;
		if(!cur[x]) {--top; continue;}
		for(int p; cur[x]; cur[x]=next[cur[x]]) if(p=cur[x], !ch[p])
		{ch[p]=1, ch[p^1]=2, st[++top]=to[p]; break;}
	}
}

int main()
{
	scanf("%d", &n), dc[0]=0, tms=1;
	for(int i=1; i<=n; i++) scanf("%d%d", &a[i], &b[i]), --a[i];
	for(int i=1; i<=n; i++) dc[++dc[0]]=a[i], dc[++dc[0]]=b[i];
	
	sort(dc+1, dc+dc[0]+1), dc[0]=unique(dc+1, dc+dc[0]+1)-dc-1;
	for(int i=1; i<=n; i++) a[i]=lower_bound(dc+1, dc+dc[0]+1, a[i])-dc, b[i]=lower_bound(dc+1, dc+dc[0]+1, b[i])-dc;
	for(int i=1; i<=n; i++) s[a[i]]++, s[b[i]]--;
	for(int i=1; i<dc[0]; i++) if(s[i]+=s[i-1], s[i]&1) link(i, i+1);
	for(int i=1; i<=n; i++) link(a[i], b[i]), f[i]=tms;
	for(int i=1; i<=dc[0]; i++) cur[i] = end[i];
	for(int i=1; i<=dc[0]; i++) if(!vs[i]) walk(i);
	for(int i=1; i<=n; i++) printf("%d ", ch[f[i]]-1);
	
	return 0;
}

	  	 		 		 		   	  		 	 	  		