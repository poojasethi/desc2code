#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

const int MAX_SIZE = 100000;

int nodes[MAX_SIZE * 2 + 10], en;
int n, to[MAX_SIZE * 4 + 10], nxt[MAX_SIZE * 4 + 10];
int pos[MAX_SIZE * 2 + 10], rank[MAX_SIZE * 2 + 10];
int tag[MAX_SIZE * 2 + 10], sx[MAX_SIZE * 2 + 10];

bool cmp(const int& a, const int& b){
	if(pos[a] == pos[b])
		return sx[a] < sx[b];
	return pos[a] < pos[b];
}

inline void addEdge(int f, int t){
	++ en;
	to[en] = t;
	nxt[en] = nodes[f];
	nodes[f] = en;
}

void dfs(int cur, int tt){
	tag[cur] = tt;
	for(int e = nodes[cur]; e; e = nxt[e])
		if(tag[to[e]] == -1)
			dfs(to[e], tt ^ 1);
}

int main(){
	scanf("%d", &n);
	for(int i = 0; i < n; i ++){
		int a, b;
		scanf("%d%d", &a, &b);
		pos[i << 1] = a;
		pos[(i << 1) | 1] = b;
		sx[i << 1] = 0;
		sx[(i << 1) | 1] = 1;
		addEdge(i << 1, (i << 1) | 1);
		addEdge((i << 1) | 1, i << 1);
	}
	for(int i = 0; i < (n << 1); i ++)
		rank[i] = i;
	sort(rank, rank + (n << 1), cmp);
	for(int i = 0; i < n; i ++){
		addEdge(rank[i << 1], rank[(i << 1) | 1]);
		addEdge(rank[(i << 1) | 1], rank[i << 1]);
	}
	memset(tag, -1, sizeof(tag));
	for(int i = 0; i < n; i ++){
		if(tag[i << 1] == -1)
			dfs(i << 1, 0);
		printf("%d ", tag[i << 1]);
	}
	printf("\n");

	return 0;
}

