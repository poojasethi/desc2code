#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int N = 1e5 + 5;

int x[N], y[N], n;
int ap[N<<1], v[N<<1];

int to[N<<2], next[N<<2], end[N<<1], d[N<<2], tms;
int ito[N<<1], f[N<<2], ans[N], lab;

void adk(int x, int y, int z)
{
	to[++tms] = y, next[tms] = end[x], end[x] = tms, d[tms] = z;
	to[++tms] = x, next[tms] = end[y], end[y] = tms, d[tms] = z;
}

int dfss[N<<2], cur[N<<1];

void color(int x)
{
	v[x] = 1;
	for(int p=end[x]; p; p=next[p]) if(!f[p])
	{
		f[p] = f[p^1] = 1, ans[d[p]] = x > to[p];
		color(to[p]);
	}
}

int main()
{
	scanf("%d", &n);
	for(int i=1; i<=n; i++)
	{
		scanf("%d%d", &x[i], &y[i]), ++y[i];
		ap[++ap[0]] = x[i], ap[++ap[0]] = y[i];
	}
	
	sort(ap+1, ap+ap[0]+1), ap[0] = unique(ap+1, ap+ap[0]+1) - ap - 1;
	
	tms = 1;
	for(int i=1; i<=n; i++)
	{
		x[i] = lower_bound(ap+1, ap+ap[0]+1, x[i]) - ap;
		y[i] = lower_bound(ap+1, ap+ap[0]+1, y[i]) - ap;
		++ito[x[i]], ++ito[y[i]];
		adk(x[i], y[i], i);
	}
	
	for(int i=1, j=-1; i<=ap[0]; i++)
	{
		if(ito[i]&1)
		{
			if(j<0) j = i;
			else adk(j,i,0), j = -1;
		}
	}
	
	for(int i=1; i<=ap[0]; i++) if(!v[i]) color(i);
	for(int i=1; i<n; i++) printf("%d ", ans[i]);
	printf("%d\n", ans[n]);
	
	return 0;
}
