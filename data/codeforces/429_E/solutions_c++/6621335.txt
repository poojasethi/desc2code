#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#include <utility>

using namespace std;

typedef pair<int,int> PII;

const int MaxN = 200010;

int n;
vector<int> g[MaxN];
vector<PII> list;
int c[MaxN];

inline void make_edge(int u,int v){
	g[u].push_back(v);
	g[v].push_back(u);
}
void dfs(int u, int tc) {
	if (c[u]!=-1)return;
	c[u]=tc;
	for (vector<int> :: iterator p=g[u].begin();p!=g[u].end();p++) dfs(*p,tc^1);
}

int main()
{
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		int l,r;
		scanf("%d%d",&l,&r);
		l*=2,r=r*2+1;
		make_edge(i*2,i*2+1);
		list.push_back(PII(l,2*i));
		list.push_back(PII(r,2*i+1));
	}
	sort(list.begin(),list.end());
	for(int i=0;i<n;i++) make_edge(list[i*2].second,list[i*2+1].second);
	memset(c,0xff,sizeof(c));
	for(int i=0;i<n*2;i++) if(c[i]==-1) dfs(i,0);
	for(int i=0;i<n;i++) printf("%d ",c[i*2]);
	puts("");
	return 0;
}
