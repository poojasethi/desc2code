#include <bits/stdc++.h>

typedef long long ll;

using namespace std;

const int MaxN = 1e5;

struct Segment {
	int l, r;
	int pos;
	Segment() {}
	Segment(int l, int r, int pos) : l(l), r(r), pos(pos) {}
	bool operator < (const Segment &to) const {
		return l > to.l || (l == to.l && r > to.r);
	}
};

Segment a[MaxN];
priority_queue<Segment> q;

vector<int> g[MaxN];
int res[MaxN];
bool used[MaxN];

void dfs (int v, int c = 0) {
	used[v] = true;
	res[v] = c;
	for (int i = 0; i < (int)g[v].size(); i++) {
		int to = g[v][i];
		if (!used[to])
			dfs(to, 1 ^ c);
	}
}

int main () {
	int n;
	scanf ("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf ("%d%d", &a[i].l, &a[i].r);
		a[i].pos = i;
	}
	sort(a, a + n);
	for (int i = 0; i < n; i++)
		q.push(a[i]);

	while (q.size() > 1) {
		Segment A = q.top();
		q.pop();
		Segment B = q.top();
		q.pop();
		if (A.r < B.l) {
			q.push(B);
		} else {
			g[A.pos].push_back(B.pos);
			g[B.pos].push_back(A.pos);
			if (A.r < B.r) {
				q.push(Segment(A.r + 1, B.r, B.pos));
			}
			if (A.r > B.r) {
				q.push(Segment(B.r + 1, A.r, A.pos));
			}
		}
	}

	for (int i = 0; i < n; i++)
		if (!used[i])
			dfs(i);
	for (int i = 0; i < n; i++)
		printf ("%d ", res[i]);
}
