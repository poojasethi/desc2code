#include <iostream>
#include <algorithm>
#include <vector>
#include <string.h>
using namespace std;
#define MAX 200001

int head[MAX], col[MAX];
struct {
    int v, link;
} e[2 * MAX];

int n, m;

void addEdge(int u, int v)
{
    e[m] = { v, head[u] };
    head[u] = m++;
}

void dfs(int u, int c)
{
    if (col[u] != -1)
        return;

    col[u] = c;

    for (int i = head[u]; i != -1; i = e[i].link) 
        dfs(e[i].v, 1 - c);
}

int main()
{
    ios_base::sync_with_stdio(0);

//  freopen("input.txt", "r", stdin);
    cin >> n;
    vector < pair<int, int> > list;
    memset(head, -1, sizeof(head));

    for (int i = 0; i < n; ++i)
    {
        int l, r;
        cin >> l >> r;

        list.push_back(make_pair(l * 2, i * 2));
        list.push_back(make_pair(r * 2 + 1, i * 2 + 1));

        addEdge(i * 2, i * 2 + 1);
        addEdge(i * 2 + 1, i * 2);
    }

    sort(list.begin(), list.end());

    for (int i = 0; i < 2*n; i += 2)
    {
        addEdge(list[i].second, list[i + 1].second);
        addEdge(list[i + 1].second, list[i].second);
    }

    memset(col, -1, sizeof(col));
    for (int i = 0; i < n * 2; ++i)
    if (col[i] < 0)
        dfs(i, 0);

    for (int i = 0; i < n; ++i) cout << col[i * 2] << " ";
    return 0;
}