#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <vector>
using namespace std;
const int N = 200005;
int a,b,c,d,e,f,g,h,i,j,k;
pair<int,int> G[N];
vector<int> GG[N];
bool hash[N], an[N];

void Init()
{
    cin >> a;
    for(int ii = 1; ii <= a; ii ++)
    {
        scanf("%d%d", &c, &d), d ++;
        G[2 * ii - 1] = make_pair(c, 2 * ii - 1);
        G[2 * ii] = make_pair(d, 2 * ii);
    }
}
void soso(int x,bool y)
{
    hash[x] = true, an[x] = y;
    for(int ii = 0; ii < GG[x].size(); ii ++)
    {
        int jj = GG[x][ii];
        if(hash[jj] == false) soso(jj, y ^ true);
        else if(an[jj] != (y ^ true))
        {
            printf("-1\n");
            exit(0);
        }
    }
}
void Work()
{
    sort(G + 1, G + 2 * a + 1);
    for(int ii = 1; ii <= a; ii ++)
    {
        c = G[2 * ii - 1].second, d = G[2 * ii].second;
        GG[c].push_back(d), GG[d].push_back(c);
        c = 2 * ii - 1, d = 2 * ii;
        GG[c].push_back(d), GG[d].push_back(c);
    }
    for(int ii = 1; ii <= 2 * a; ii ++)
    if(hash[ii] == false)
        soso(ii, false);
    for(int ii = 1; ii <= a; ii ++)
        printf("%d ", an[2 * ii - 1]);
    cout << endl;
}

int main()
{
    Init(), Work();
    return 0;
}