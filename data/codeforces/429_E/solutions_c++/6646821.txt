#include <cstdio>
#include <algorithm>
#include <map>
#include <cstring>

#define i0  (i << 1 | 0)
#define i1  (i << 1 | 1)
#define foredge(d)  for (int j = eq[d], k; k = ee[j].to, j; j = ee[j].nx)

using namespace std;

const int N = 200020;

int n, col[N];
pair<int,int> ray[N];

struct edge {
	int to, nx;
} ee[N << 2];
int eq[N], en = 1;

void link2(int u, int v) {
	ee[++en] = (edge) {v, eq[u]}, eq[u] = en;
	ee[++en] = (edge) {u, eq[v]}, eq[v] = en;
}
void dfs(int d, int c) {
	if (col[d] < 0)  col[d] = c;
	else  return;
	foredge(d)
		dfs(k, !c);
}
int main() {
#ifndef ONLINE_JUDGE
	freopen("cf.in" , "r", stdin);
	freopen("cf.out", "w", stdout);
#endif
	scanf("%d", &n);
	for (int i = 0; i < n; i ++) {
		int l, r;
		scanf("%d %d", &l, &r);
		l = l * 2;
		r = r * 2 + 1;
		ray[i0] = make_pair(l, i0);
		ray[i1] = make_pair(r, i1);
		link2(i0, i1);
	}
	sort(ray, ray + 2 * n);
	for (int i = 0; i < n; i ++)
		link2(ray[i0].second, ray[i1].second);

	memset(col, -1, sizeof(col));
	for (int i = 0; i < n * 2; i ++) {
		if (col[i] < 0)  dfs(i, 0);
		if (~i & 1)  printf("%d ", col[i]);
	}
}
