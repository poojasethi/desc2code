#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;
#define maxn 601000
struct edges{
	int to,next,b,id;
}edge[maxn];
int L,next[maxn];
inline void addedge(int x,int y,int z) {
	L++;
	edge[L*2]=(edges){y,next[x],0,z};next[x]=L*2;
	edge[L*2+1]=(edges){x,next[y],0,z};next[y]=L*2+1;
}
int ans[maxn];
bool b[maxn];
inline void dfs(int x){
	b[x]=1;
	while (next[x]) {
		int i=next[x];
		if (!edge[i].b) {
			edge[i].b=edge[i^1].b=1;
			dfs(edge[i].to);
			ans[edge[i].id]=edge[i].to>x?1:0;
		}
		next[x]=edge[i].next;
	}
}
int l[maxn],r[maxn],s[maxn];
vector<int> q;
#define pb push_back
int main(){
	int n;
	scanf("%d",&n);
	for (int i=1;i<=n;i++) {
		scanf("%d%d",l+i,r+i);
		r[i]++;
		q.pb(l[i]);
		q.pb(r[i]);
	}
	sort(q.begin(),q.end());
	q.resize(unique(q.begin(),q.end())-q.begin());
	for (int i=1;i<=n;i++) {
		l[i]=lower_bound(q.begin(),q.end(),l[i])-q.begin()+1;
		r[i]=lower_bound(q.begin(),q.end(),r[i])-q.begin()+1;
		s[l[i]]++;s[r[i]]--;
		addedge(l[i],r[i],i);
	}
	for (int i=1;i<q.size();i++) s[i]+=s[i-1];
	for (int i=1;i<q.size();i++) 
		if (s[i]&1) addedge(i+1,i,0);
	for (int i=0;i<q.size();i++) if (!b[i+1]) dfs(i+1);
	for (int i=1;i<=n;i++) printf("%d ",ans[i]);
	return 0;
}
