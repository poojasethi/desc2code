#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
using namespace std;
typedef __int64 LL;
#define maxN 200005
#define pb(x) push_back(x)
#define MOD 100000007
#define lson i<<1
#define rson (i<<1)+1
struct station
{
    int t,x;
}g[maxN];
int N;
int r[maxN];
int gas[4][maxN],cnt[4];
int dp[maxN][3],eh[4][maxN];
int num;
int e,s,n,m;
bool cmp(const station &a,const station &b){return a.x<b.x;}
int Search_far(int lft,int rht,int a[],int len)
{
    int l=0,h=len-1;
    if(lft>rht) return -1;
    if(lft>a[h]||rht<a[l]) return -1;
    while(l<h)
    {
        int mid=(l+h+1)/2;
        if(a[mid]<lft) l=mid+1;
        else if(a[mid]>rht) h=mid-1;
        else l=mid;
    }
    if(a[l]<lft||a[l]>rht) return -1;
    return l;
}
int main()
{
    int t,x;
    while(scanf("%d %d %d %d",&e,&s,&n,&m)!=EOF)
    {
        memset(dp,-1,sizeof(dp));
        memset(cnt,0,sizeof(cnt));
        num=0;
        for(int i=1;i<=n;i++)
        {
            scanf("%d %d",&t,&x);
            if(x>=e) continue;
            g[num].x=x;
            g[num++].t=t;

        }
        g[num].x=e;g[num++].t=3;
        sort(g,g+num,cmp);
        for(int i=0;i<num;i++)
        {
            t=g[i].t;x=g[i].x;
            gas[t][cnt[t]]=x;
            eh[t][cnt[t]++]=i;
        }
        dp[num-1][1]=dp[num-1][2]=0;
        for(int i=num-2;i>=0;i--)
        {
            if(g[i+1].x-g[i].x>s) break;
            if(g[i].t==1)
            {
                    int d=g[i+1].x-g[i].x;
                    dp[i][1]=dp[i+1][1]+d;
                    dp[i][2]=dp[i+1][2];
            }
            else if(g[i].t==2)
            {
                int p3=lower_bound(gas[3],gas[3]+cnt[3],g[i].x+1)-gas[3];
                    if(gas[3][p3]-g[i].x<=s) //�ҵ���
                    {
                        int p=eh[3][p3];
                        int d=gas[3][p3]-g[i].x;
                        dp[i][2]=dp[p][2]+d;
                        dp[i][1]=dp[p][1];
                        continue;
                    }
                    int p2=Search_far(g[i].x+1,g[i].x+s,gas[2],cnt[2]);
                    if(p2!=-1) //�ҵ���
                    {
                        int p=eh[2][p2];
                        int d=g[p].x-g[i].x;
                        dp[i][2]=dp[p][2]+d;
                        dp[i][1]=dp[p][1];
                        continue;
                    }
                    int p1=Search_far(g[i].x+1,g[i].x+s,gas[1],cnt[1]);
                    if(p1!=-1)
                    {
                        int p=eh[1][p1];
                        int d=gas[1][p1]-g[i].x;
                        dp[i][1]=max(dp[p][1]-(s-d),0);
                        int opt=dp[p][1]-dp[i][1];
                        dp[i][2]=dp[p][2]+d+opt;
                        continue;
                    }
                    break;
            }
            else
            {
                int p3=Search_far(g[i].x+1,g[i].x+s,gas[3],cnt[3]);
                    if(p3!=-1)
                    {
                        int p=eh[3][p3];
                        dp[i][2]=dp[p][2];
                        dp[i][1]=dp[p][1];
                        continue;
                    }
                    int p2=Search_far(g[i].x+1,g[i].x+s,gas[2],cnt[2]);
                    if(p2!=-1) //�ҵ���
                    {
                        int p=eh[2][p2];
                        int d=gas[2][p2]-g[i].x;
                        dp[i][2]=max((dp[p][2]-(s-d)),0);
                        dp[i][1]=dp[p][1];
                        continue;
                    }
                    int p1=Search_far(g[i].x+1,g[i].x+s,gas[1],cnt[1]);
                    if(p1!=-1)
                    {
                        int p=eh[1][p1];
                        int d=gas[1][p1]-g[i].x;
                        dp[i][2]=dp[p][2];
                        dp[i][1]=max(dp[p][1]-(s-d),0);
                        continue;
                    }
                    break;
            }
        }
        //for(int i=0;i<num;i++) printf("%d %d %d %d\n",g[i].t,g[i].x,dp[i][1],dp[i][2]);
        while(m--)
        {
            bool ok=false;
            int ans1=-1,ans2=-1;
            scanf("%d",&x);
            int p3=Search_far(x+1,x+s,gas[3],cnt[3]);
            int p2=Search_far(x+1,x+s,gas[2],cnt[2]);
            int p1=Search_far(x+1,x+s,gas[1],cnt[1]);
            if(p3!=-1)
            {
                int p=eh[3][p3];
                if(dp[p][1]!=-1)
                {
                    ans2=dp[p][2];
                    ans1=dp[p][1];
                }
            }
            else if(p2!=-1) //�ҵ���
            {
                int p=eh[2][p2];
                if(dp[p][1]!=-1)
                {
                    int d=gas[2][p2]-x;
                    ans2=max((dp[p][2]-(s-d)),0);
                    ans1=dp[p][1];
                }
            }
            else if(p1!=-1)
            {
                int p=eh[1][p1];
                if(dp[p][1]!=-1)
                {
                     int d=gas[1][p1]-x;
                    ans2=dp[p][2];
                    ans1=max(dp[p][1]-(s-d),0);
                }
            }
            printf("%d %d\n",ans1,ans2);
        }
    }
    return 0;
}
