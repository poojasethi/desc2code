#include <iostream>
#include <cmath>
#include <iomanip>
#include <cstring>
#include <string>
#include <algorithm>
#include <queue>
#include <map>
#include <deque>
#include <set>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <fstream>

#define pb push_back
#define mp make_pair
#define F first
#define S second

#define foreach(i, c) for (typeof(c.begin()) i = c.begin(); i != c.end(); ++i)

using namespace std;

const int INF = int(1e9) + 1;
const long long INFll = 1ll * INF * INF;
const long double EPS = 1e-26;
const int MOD = 1000000007;
const int N = 5050;

struct sg{
    int l, r, type;
    sg() : l(0), r(0), type(0){}
    sg(int l, int r, int type) {
        this->l = l;
        this->r = r;
        this->type = type;
    }
};

#define FILE "taxes"
int main() {
    ios_base::sync_with_stdio(0);
#ifdef LOCAL
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //freopen(FILE ".in", "r", stdin);
    //freopen(FILE ".out", "w", stdout);
#endif // LOCAL
    int e, s, n, m;
    cin >> e >> s >> n >> m;
    vector<pair<int, int> > v;
    int x, y;
    for (int i = 0; i < n; i++) {
        cin >> x >> y;
        v.pb(mp(y, 4 - x));
    }
    sort(v.begin(), v.end());
    vector<sg> t(1);
    t[0].l = v[0].F;
    t[0].r = v[0].F + s - 1;
    t[0].type = v[0].S;
    for (int i = 1; i < v.size(); i++) {
        while (t.back().type > v[i].S) {
            if (t.back().r < v[i].F) break;
            if (v[i].F <= t.back().l) {
                t.pop_back();
                continue;
            }
            t.back().r = v[i].F - 1;
            break;
        }
        t.pb({max(v[i].F, t.back().r + 1), v[i].F + s - 1, v[i].S});
    }
//    for (int i = 0; i < t.size(); i++) {
//        cout << t[i].l << " " << t[i].r << " " << t[i].type << endl;
//    }
//    cout << endl;
    vector<int> k2(t.size() + 1, 0), k3(t.size() + 1, 0), a2(t.size());
    for (int i = 0; i < t.size(); i++) {
        a2[i] = t[i].l;
    }
    int it = 0;
    while (it < t.size() && t[it].r < e - 1) it++;
    int can;
    if (it == t.size() || t[it].l > e - 1) can = e;
    else {
        int calc = e;
        while (true) {
            k2[it] = k2[it + 1];
            k3[it] = k3[it + 1];
            if (t[it].type == 2)
                k2[it] += calc - t[it].l;
            if (t[it].type == 3)
                k3[it] += calc - t[it].l;
            calc = t[it].l;
            it--;
            if (it < 0 || t[it].r < t[it + 1].l - 1) break;
        }
        can = calc;
    }
    for (int i = 0; i < m; i++) {
        int start;
        cin >> start;
        start += s;
        if (start < can) {
            cout << "-1 -1\n";
            continue;
        }
        if (start >= e) {
            cout << "0 0\n";
            continue;
        }
        int num = lower_bound(a2.begin(), a2.end(), start) - a2.begin();
        int ans1 = k2[num];
        int ans2 = k3[num];
        if (start < a2[num]) {
            num--;
            ans1 = k2[num];
            ans2 = k3[num];
            if (t[num].type == 2) ans1 -= start - a2[num];
            else if (t[num].type == 3) ans2 -= start - a2[num];
        }
        cout << ans2 << " " << ans1 << "\n";
    }
    return 0;
}
