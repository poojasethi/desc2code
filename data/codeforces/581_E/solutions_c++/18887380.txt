#include <iostream>
#include <cstdlib>
#include <cstdio>
using namespace std;
const int N = 200000;
int fill1[N], fill2[N];
void qs(int q, int w) {
  int e = q, r = w, t = fill2[q + (rand() % (w - q + 1))];
  do {
    while (fill2[e] < t) e++;
    while (fill2[r] > t) r--;
    if (e <= r) {
      swap(fill1[e], fill1[r]);
      swap(fill2[e], fill2[r]);
      e++; r--;
    }
  } while (e <= r);
  if (q < r) qs(q, r);
  if (e < w) qs(e, w);
}
int q, fin, max_val;
int bp(int w) {
  int c = 0, v;
  for (v = 1<<17; v; v >>= 1) {
    if ((c + v < q) && (fill2[c + v] <= w)) {
      c += v;
    }
  }
  if (fill2[c] > w) {
    c = -1;
  }
  return c;
}

int bp_min(int w) {
  int c = q - 1, v;
  for (v = 1<<17; v; v >>= 1) {
    if ((c - v >= 0) && (fill2[c - v] >= w)) {
      c -= v;
    }
  }
  if (fill2[c] < w) {
    c = -1;
  }
  return c;
}
int next[3][N + 1];
int last[3][N];
int f[3][N];
int buff[3];

void calc(int pos, int type) {
  int w, w1, e, r, c, v, fuel_in_tank[] = {0, 0, 0};
  int used_fuel[] = {0, 0, 0};
  
  int if_this_fill = bp(pos);
  if ((if_this_fill >= 0) && ((fill2[if_this_fill] == pos) && (type == fill1[if_this_fill]))) {
    if (f[0][if_this_fill] != -2) {
      for (e = 0; e < 3; e++) {
        buff[e] = f[e][if_this_fill];
      }
      return;
    }
  } else {
    if_this_fill = -1;
  }
  
  fuel_in_tank[type] = max_val;
  
  while (1) {
    w = bp(pos + max_val);
    if ((w < 0) || (fill2[w] <= pos)) {
      if (pos + max_val >= fin) {
        r = fin - pos;
        for (e = 2; e >= 0; e--) {
          c = min(r, fuel_in_tank[e]);
          r -= c;
          used_fuel[e] += c;
        }
        break;
      }
      
      for (e = 0; e < 3; e++) {
        used_fuel[e] = -1;
      }
      break;
    }
    
    int min_st = -1;
    w1 = bp_min(pos + 1);
    
    for (e = type + 1; e < 3; e++) {
      if ((next[e][w1] >= 0) && (fill2[next[e][w1]] <= pos + max_val)) {
        if ((min_st < 0) || (fill2[min_st] > fill2[next[e][w1]] )) {
          min_st = next[e][w1];
        }
      }
    }
    
    if (min_st >= 0) {
      r = fill2[min_st] - pos;
      for (e = 2; e >= 0; e--) {
        c = min(r, fuel_in_tank[e]);
        fuel_in_tank[e] -= c;
        r -= c;
        used_fuel[e] += c;
      }
      calc(fill2[min_st], fill1[min_st]);
      
      if (buff[0] >= 0) {
        for (e = 0; e < 3; e++) {
          used_fuel[e] += buff[e];
        }
      } else {
        for (e = 0; e < 3; e++) {
          used_fuel[e] = -1;
        }
      }
      
      break;
    }     //  ������� �� ������, � ���������
    
    for (e = type; e >= 0; e--) {  // �������� ��� ����� ������ �� �������.
      if ((last[e][w] >= 0) && (fill2[last[e][w]] > pos)) {
        break;
      }
    }
    v = last[e][w];
    
    r = fill2[v] - pos;
    for (e = 2; e >= 0; e--) {
      c = min(r, fuel_in_tank[e]);
      r -= c;
      fuel_in_tank[e] -= c;
      used_fuel[e] += c;
    }
    
    c = 0;
    for (e = fill1[v] + 1; e < 3; e++) {
      c += fuel_in_tank[e];
    }
    
    if (!c) {
      calc(fill2[v], fill1[v]);
      if (buff[0] >= 0) {
        for (e = 0; e < 3; e++) {
          used_fuel[e] += buff[e];
        }
      } else {
        for (e = 0; e < 3; e++) {
          used_fuel[e] = -1;
        }
      }
      break;
    }
    
    for (e = 0; e < fill1[v]; e++) {
      fuel_in_tank[e] = 0;
    }
    fuel_in_tank[fill1[v]] = max_val - c;
    
    pos = fill2[v];
    type = fill1[v];
  }
  
  if (if_this_fill >= 0) {
    for (e = 0; e < 3; e++) {
      f[e][if_this_fill] = used_fuel[e];
    }
  }
  
  for (e = 0; e < 3; e++) {
    buff[e] = used_fuel[e];
  }
}

int main() {
  #ifdef Vlad_kv
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  #endif // Vlad_kv
  int w, e, r, t, numQ;
  scanf("%d%d%d%d", &fin, &max_val, &q, &numQ);
  for (w = 0; w < q; w++) {
    scanf("%d%d", &fill1[w], &fill2[w]);
    fill1[w]--;
    for (e = 0; e < 3; e++) {
      f[e][w] = -2;
    }
  }
  qs(0, q - 1);
  while ((q > 0) && (fill2[q - 1] > fin)) {
    q--;
  }
  if (q == 0) {
    fill2[0] = fin;
    fill1[0] = 2;
    q = 1;
  }
  
  for (w = 0; w < 3; w++) {
    next[w][q] = last[w][0] = -1;
  }
  
  for (w = q - 1; w >= 0; w--) {
    for (e = 0; e < 3; e++) {
      next[e][w] = next[e][w + 1];
    }
    next[fill1[w]][w] = w;
  }
  
  last[fill1[0]][0] = 0;
  for (w = 1; w < q; w++) {
    for (e = 0; e < 3; e++) {
      last[e][w] = last[e][w - 1];
    }
    last[fill1[w]][w] = w;
  }
  
  for (w = 0; w < numQ; w++) {
    scanf("%d", &e);
    calc(e, 2);
    printf("%d %d\n", buff[0], buff[1]);
  }
  return 0;
}