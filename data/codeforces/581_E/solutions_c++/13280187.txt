#include<stdio.h>
#include<cstring>
#include<algorithm>
#include<utility>
#include<vector>
#include<list>
#include<queue>
#include<set>
#include<map>
using namespace std;
#define NSIZ 1000010
#define MSIZ 1000010
#define inf 1010580540
#define mxint 2147483647
#define mxll 9223372036854775807LL
#define prime15 1000000000000037LL
#define prime16 10000000000000061LL
#define mod 1000000007LL
#define F first
#define S second
#define itt ::iterator
#define MAXPQ(T) priority_queue<T>
#define MINPQ(T) priority_queue<T,vector<T>,greater<T> >
#define ab(x) ((x)<0?-(x):(x))
typedef pair<int,int> pii;
typedef pair<long long,int> pli;
typedef pair<long long,long long> pll;
typedef pair<double,double> pdd;
typedef pair<int,pair<int,int> > pip;
typedef pair<pair<int,int>,pair<int,int> > ppp;

int n, m, o, re=0;
long long res=0;
pii a[NSIZ], b[NSIZ];
bool chk[NSIZ];
vector<pii> ve, typ[4];
int main(){
    int i, j, k, l;
    long long ll=0, rr=mxll, mid;
    scanf("%d %d %d %d", &n, &m, &o, &re);
    for(i=0; i<o; i++){
        scanf("%d %d", &j, &k);
       b[i]=pii(k,j);
    }
    sort(b,b+o);
    i=lower_bound(b,b+o,pii(n,0))-b;
    ve.push_back(pii(n,3));i--;
    for(; i>=0; i--){
        if(b[i].F==ve.back().F)continue;
        ve.push_back(b[i]);
    }
    sort(ve.begin(),ve.end());
    for(i=0; i<ve.size(); i++){
        typ[ve[i].S].push_back(pii(ve[i].F,i));
    }
    a[ve.size()-1]=pii(0,0);
    for(i=ve.size()-2; i>=0; i--){
        if(ve[i+1].F-ve[i].F>m)break;
        if(ve[i].S==3){
            j=lower_bound(typ[3].begin(),typ[3].end(),pii(ve[i].F+1,0))-typ[3].begin();
            if(j<typ[3].size() && typ[3][j].F-ve[i].F<=m){a[i]=a[typ[3][j].S];continue;}
            j=lower_bound(typ[2].begin(),typ[2].end(),pii(ve[i].F+m+1,0))-typ[2].begin()-1;
            if(j>=0 && typ[2][j].F>ve[i].F){
                a[i]=a[typ[2][j].S];
                a[i].S-=m-(typ[2][j].F-ve[i].F);
                continue;
            }
            j=lower_bound(typ[1].begin(),typ[1].end(),pii(ve[i].F+m+1,0))-typ[1].begin()-1;
            if(j>=0 && typ[1][j].F>ve[i].F){
                a[i]=a[typ[1][j].S];
                a[i].F-=m-(typ[1][j].F-ve[i].F);
                continue;
            }
            a[i]=pii(-1,-1);
        }
        else if(ve[i].S==2){
            j=lower_bound(typ[3].begin(),typ[3].end(),pii(ve[i].F,0))-typ[3].begin();
            if(j<typ[3].size() && typ[3][j].F-ve[i].F<=m){
                a[i]=a[typ[3][j].S];
                a[i].S+=typ[3][j].F-ve[i].F;
                continue;
            }
            j=lower_bound(typ[2].begin(),typ[2].end(),pii(ve[i].F+1,0))-typ[2].begin();
            if(j<typ[2].size() && typ[2][j].F-ve[i].F<=m){
                a[i]=a[typ[2][j].S];
                a[i].S+=typ[2][j].F-ve[i].F;
                continue;
            }
            j=lower_bound(typ[1].begin(),typ[1].end(),pii(ve[i].F+m+1,0))-typ[1].begin()-1;
            if(j>=0 && typ[1][j].F>ve[i].F){
                a[i]=a[typ[1][j].S];
                a[i].F-=m-(typ[1][j].F-ve[i].F);
                a[i].S+=m;
                continue;
            }
            a[i]=pii(-1,-1);
        }
        else{
            j=lower_bound(typ[3].begin(),typ[3].end(),pii(ve[i].F,0))-typ[3].begin();
            int jj=lower_bound(typ[2].begin(),typ[2].end(),pii(ve[i].F,0))-typ[2].begin();
            if(j<typ[3].size() && (jj==typ[2].size() || typ[3][j].F<=typ[2][jj].F) && typ[3][j].F-ve[i].F<=m){
                a[i]=a[typ[3][j].S];
                a[i].F+=typ[3][j].F-ve[i].F;
                continue;
            }
            if(jj<typ[2].size() && (j==typ[3].size() || typ[2][jj].F<=typ[3][j].F) && typ[2][jj].F-ve[i].F<=m){
                a[i]=a[typ[2][jj].S];
                a[i].F+=typ[2][jj].F-ve[i].F;
                continue;
            }
            a[i]=a[i+1];
            a[i].F+=ve[i+1].F-ve[i].F;
        }
    }
    while(i>=0){
        a[i--]=pii(-1,-1);
    }
//    for(i=0; i<ve.size(); i++){
//        printf("%d %d = %d %d\n", ve[i], a[i]);
//    }
    for(i=0; i<re; i++){
        scanf("%d", &k);
        j=lower_bound(ve.begin(),ve.end(),pii(k,0))-ve.begin();
        if(a[j]==pii(-1,-1) || ve[j].F-k>m){printf("-1 -1\n");continue;}
        j=lower_bound(typ[3].begin(),typ[3].end(),pii(k,0))-typ[3].begin();
        if(j<typ[3].size() && typ[3][j].F-k<=m){printf("%d %d\n", a[typ[3][j].S]);continue;}
        j=lower_bound(typ[2].begin(),typ[2].end(),pii(k+m+1,0))-typ[2].begin()-1;
        if(j>=0 && typ[2][j].F>k){
            b[i]=a[typ[2][j].S];
            b[i].S-=m-(typ[2][j].F-k);
            printf("%d %d\n", b[i]);
            continue;
        }
        j=lower_bound(typ[1].begin(),typ[1].end(),pii(k+m+1,0))-typ[1].begin()-1;
        if(j>=0 && typ[1][j].F>k){
            b[i]=a[typ[1][j].S];
            b[i].F-=m-(typ[1][j].F-k);
            printf("%d %d\n", b[i]);
            continue;
        }
        printf("-1 -1\n");
    }
    return 0;
}

