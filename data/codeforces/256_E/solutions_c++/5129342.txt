#include <cstdio>
using namespace std;

#define P 777777777
int n, m, i, j, x, y, lucky[3][3];

struct T {
	int f[3][3];
	int sum() {
		int s = 0;
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++)
				s = (s + f[i][j]) % P;
		return s;
	}
	T operator + (T &a) {
		T b;
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++) {
				b.f[i][j] = 0;
				for (int p = 0; p < 3; p++)
					for (int q = 0; q < 3; q++)
						if (lucky[p][q])	b.f[i][j] = (b.f[i][j] + 1LL * f[i][p] * a.f[q][j]) % P;
			}
		return b;
	}
} node[300000];

void mkt(int k, int q, int h) {
	if (q < h) {
		mkt(k * 2, q, (q + h) / 2);
		mkt(k * 2 + 1, (q + h) / 2 + 1, h);
		node[k] = node[k * 2] + node[k * 2 + 1];
	}else	for (int i = 0; i < 3; i++)	node[k].f[i][i] = 1;
}

void modify(int k, int q, int h, int x, int y) {
	if (q == h) {
		for (int i = 0; i < 3; i++)
		if (i == y - 1 || !y)	node[k].f[i][i] = 1;
		else	node[k].f[i][i] = 0;
	}else {
		if (x <= (q + h) / 2)	modify(k * 2, q, (q + h) / 2, x, y);
		else	modify(k * 2 + 1, (q + h) / 2 + 1, h, x, y);
		node[k] = node[k * 2] + node[k * 2 + 1];
	}
}

int main() {
	scanf("%d%d", &n, &m);
	for (i = 0; i <= 2; i++)
		for (j = 0; j <= 2; j++)	scanf("%d", &lucky[i][j]);
	mkt(1, 1, n);
	while (m--) {
		scanf("%d%d", &x, &y);
		modify(1, 1, n, x, y);
		printf("%d\n", node[1].sum());
	}
}