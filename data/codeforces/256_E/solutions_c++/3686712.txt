#include<cstdio>
#include<cstring>
#include<iostream>
#define Inc(x,y) ((x)+(y))%mod
using namespace std;
typedef long long LL;
const int mod=777777777;
const int maxn=80000;
int n,m,xx,num,i,j,k,l,ans;
struct Matrix{int M[3][3];};
Matrix tr[maxn<<2],M;
void Read(){
    scanf("%d%d",&n,&m);
    for(i=0;i<3;i++)
        for(j=0;j<3;j++)scanf("%d",&M.M[i][j]);
}
void Update(const int &x){
    for(i=0;i<3;i++)
        for(j=0;j<3;j++)
            for(k=0;k<3;k++)
                for(l=0;l<3;l++)
                    tr[x].M[i][l]=Inc(tr[x].M[i][l],(LL)tr[x<<1].M[i][j]*M.M[j][k]*tr[x<<1|1].M[k][l]);
}
void Paint(int x,int l,int r){
    if(l==r){
        if(!num)tr[x].M[0][0]=tr[x].M[1][1]=tr[x].M[2][2]=1;
        else{
            memset(tr[x].M,0,sizeof(tr[x].M));
            tr[x].M[num-1][num-1]=1;
        }
        return;
    }
    if(xx<=l+r>>1)Paint(x<<1,l,l+r>>1);
    else Paint(x<<1|1,(l+r>>1)+1,r);
    memset(tr[x].M,0,sizeof(tr[x].M));
    Update(x);
}
void Bt(int x,int l,int r){
    if(l==r)tr[x].M[0][0]=tr[x].M[1][1]=tr[x].M[2][2]=1;
    else{
        Bt(x<<1,l,l+r>>1);
        Bt(x<<1|1,(l+r>>1)+1,r);
        Update(x);
    }
}
void Solve(){
    int i,j,x,y;
    Bt(1,1,n);
    while(m--){
        scanf("%d%d",&x,&y);
        xx=x,num=y;Paint(1,1,n);
        for(ans=i=0;i<3;i++)
            for(j=0;j<3;j++)
                ans=Inc(ans,tr[1].M[i][j]);
        printf("%d\n",ans);
    }
}
int main(){
    Read();
    Solve();
}