#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>

typedef long long ll;

using namespace std;

const int K = 2000;
const int mod = 777777777;
const int MAXN = 100000;

int n, m;
int good[4][4];
unsigned long long d[MAXN*4][3][3];

void upd(int i, int l, int r, int v, int x)
{
 	if (i < l || i > r) return;
 	if (l == r)
 	{
		d[v][0][0] = d[v][1][1] = d[v][2][2] = !x;
		if (x) d[v][x-1][x-1] = 1;
 	}
 	else
 	{
		upd(i, l, (l+r)>>1, v<<1, x);
		upd(i, ((l+r)>>1)+1, r, (v<<1)+1, x);

		memset(d[v], 0, sizeof(d[v]));
		for (int i = 0; i < 3; i++)
			for (int l = 0; l < 3; l++)
				for (int j = 0; j < 3; j++)
				{
					for (int k = 0; k < 3; k++)
						if (good[j][k])
							d[v][i][l] += d[v<<1][i][j]*d[(v<<1)+1][k][l];
					d[v][i][l] %= mod;
				}
 	}
}

int main()
{
	scanf("%d%d", &n, &m);

	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			scanf("%d", &good[i][j]);

	for (int i = 0; i < n; i++)
		upd(i, 0, n-1, 1, 0);

	for (; m--;)
	{
		int x, y, p;
		scanf("%d%d", &x, &y); x--;

		upd(x, 0, n-1, 1, y);

		int res = 0;
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++)
				if ((res += d[1][i][j])>=mod)
					res -= mod;

		printf("%d\n", res);
	}

	return 0;
}

