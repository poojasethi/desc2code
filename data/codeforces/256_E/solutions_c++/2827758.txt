#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <queue>
#include <vector>
#include <cmath>
#include <map>
using namespace std;
typedef long long ll;
const ll MOD = 777777777;
const int N = 77787;
int mp[5][5];
struct node {
	int l, r;
	ll s[10];
}tr[N * 5];
void up(int x) {
	memset(tr[x].s, 0, sizeof(tr[x].s));
	for (int i = 0; i < 3; ++i) for (int j = 0; j < 3; ++j) {
		if (!mp[i][j]) continue;
		for (int a = 0; a < 3; ++a) for (int b = 0; b < 3; ++b) {
			tr[x].s[a * 3 + b] = (tr[x].s[a * 3 + b]
			+ tr[x<<1].s[a * 3 + i] * tr[x<<1|1].s[j * 3 + b]) % MOD;
		}
	}
}
void build(int L, int R, int x) {
	tr[x].l = L;
	tr[x].r = R;
	if (L == R) {
		memset(tr[x].s, 0, sizeof(tr[x].s));
		for (int i = 0; i < 3; ++i)
			tr[x].s[i * 4] = 1;
		return ;
	}
	int mid = L + R >> 1;
	build(L, mid, x<<1);
	build(mid + 1, R, x<<1|1);
	up(x);
}
void update(int id, int x, int val) {
	if (tr[x].l == tr[x].r) {
		memset(tr[x].s, 0, sizeof(tr[x].s));
		if (val != -1) tr[x].s[val * 4] = 1;
		else for (int i = 0; i < 3; ++i)
			tr[x].s[i * 4] = 1;
		return ;
	}
	int mid = tr[x].l + tr[x].r >> 1;
	if (mid >= id) update(id, x<<1, val);
	else update(id, x<<1|1, val);
	up(x);
}
int main() {
	int n, m, v, t;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < 3; ++i) for (int j = 0; j < 3; ++j)
		scanf("%d", &mp[i][j]);
	build(1, n, 1);
	while (m--) {
		scanf("%d%d", &v, &t);
		update(v, 1, t - 1);
		ll ans = 0;
		for (int i = 0; i < 9; ++i) 
			ans += tr[1].s[i];
		ans %= MOD;
		cout << ans << endl;
	}
	return 0;
}
 					 	 	 			  	  	 	 			