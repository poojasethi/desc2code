#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 77777;
const int mod = 777777777;
void add(int &x, int val) {
	x += val;
	if(x >= mod)
		x -= mod;
}
bool g[3][3];
struct SegTree {
#define lc o<<1
#define rc o<<1|1
#define lson l,m,lc
#define rson m+1,r,rc
	int sum[N << 2][3][3];
	void up(int o) {
		rep(i, 3)
			rep(j, 3) {
				sum[o][i][j] = 0;
				rep(lj, 3)
					rep(ri, 3) {
						if(g[lj][ri])
							add(sum[o][i][j], (LL)sum[lc][i][lj]*sum[rc][ri][j]%mod);
					}
			}
	}
	void build(int l, int r, int o) {
		if(l == r) {
			rep(i, 3)
				sum[o][i][i] = 1;
		} else {
			int m = l + r >> 1;
			build(lson);
			build(rson);
			up(o);
		}
	}
	void modify(int l, int r, int o, int L, int val) {
		if(l == r) {
			rep(i, 3)	sum[o][i][i] = 0;
			if(val == -1) {
				rep(i, 3)
					sum[o][i][i] = 1;
			} else {
				sum[o][val][val] = 1;
			}
		} else {
			int m = l + r >> 1;
			if(L <= m)	modify(lson, L, val);
			else		modify(rson, L, val);
			up(o);
		}
	}
}ly;
int main() {
	int n, m, x;
	scanf("%d%d", &n, &m);
	rep(i, 3)
		rep(j, 3) {
			scanf("%d", &x);
			if(x)
				g[i][j] = true;
		}
	ly.build(1, n, 1);
	rep(i, m) {
		int k;
		scanf("%d%d", &x, &k);
		k --;
		ly.modify(1, n, 1, x, k);
		int ans = 0;
		rep(a, 3)
			rep(b, 3)
				add(ans, ly.sum[1][a][b]);
		printf("%d\n", ans);
	}
	return 0;
}

