
#include <iostream>
#include <cstdio>
#include <cstring>

using namespace std;

typedef long long LL;
const int maxn = 77778, mod = 777777777;
int n, m, good[4][4];
struct Tree {
	LL f[4][4];
} T[maxn << 2];

void update(int node, int l, int r, int ind, int v) {
	if (l == r) {
		T[node].f[1][1] = T[node].f[2][2] = T[node].f[3][3] = 0;
		if (v == 0) {
			T[node].f[1][1] = T[node].f[2][2] = T[node].f[3][3] = 1;
		} else {
			T[node].f[v][v] = 1;
		}
	} else {
		int mid = (l + r) / 2;
		if (ind <= mid) {
			update(node << 1, l, mid, ind, v);
		} else {
			update(node << 1 | 1, mid + 1, r, ind, v);
		}
		for (int i = 1; i <= 3; ++i) {
			for (int j = 1; j <= 3; ++j) {
				T[node].f[i][j] = 0;
				for (int a = 1; a <= 3; ++a) {
					for (int b = 1; b <= 3; ++b) {
						if (good[a][b]) {
							T[node].f[i][j] += T[node << 1].f[i][a] * T[node << 1 | 1].f[b][j];
							T[node].f[i][j] %= mod;
						}
					}
				}
			}
		}
	}
}

int main() {
	int ind, v, sum;
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= 3; ++i) {
		for (int j = 1; j <= 3; ++j) {
			scanf("%d", &good[i][j]);
		}
	}
	for (int i = 1; i <= n; ++i) {
		update(1, 1, n, i, 0);
	}
	while (m--) {
		sum = 0;
		scanf("%d%d", &ind, &v);
		update(1, 1, n, ind, v);
		for (int i = 1; i <= 3; ++i) {
			for (int j = 1; j <= 3; ++j) {
				sum += T[1].f[i][j];
				if (sum >= mod) sum -= mod;
			}
		}
		printf("%d\n", sum);
	}
	return 0;
}
