#include <cstdio>
#include <cstring>
#define int64 long long

const int mdl = 777777777;
const int N = (int) 77777;
const int A = 3;

int is_good[A][A], n, m, x, y;

struct vertex {
	int way[A][A];
	vertex(int tmp = -1) {
		memset(way, 0, sizeof(way));
		if (tmp != -1)
			way[tmp][tmp] = 1;
		else
			for (int i = 0; i < A; ++i)
				way[i][i] = 1;
	}
	int sum() {
		int sum = 0;
		for (int i = 0; i < A; ++i)
			for (int j = 0; j < A; ++j)
				sum = (sum + way[i][j]) % mdl;
		return sum;
	}
} rmq[4 * N];

vertex operator+(const vertex &a, const vertex &b) {
	vertex c;
	for (int k = 0; k < A; ++k)
		for (int l = 0; l < A; ++l) {
			int64 tmp = 0;
			for (int i = 0; i < A; ++i)
				for (int j = 0; j < A; ++j)
					if (is_good[i][j])
						tmp += a.way[k][i] * (int64) b.way[j][l];
			c.way[k][l] = tmp % mdl;
		}
	return c;
}

void update(int t, int l, int r, int x, int y) {
	if ((x < l) || (x > r))
		return;
	if (l == r)
		rmq[t] = vertex(y);
	else {
		int m = (l + r) / 2;
		update(t * 2 + 1, l, m, x, y);
		update(t * 2 + 2, m + 1, r, x, y);
		rmq[t] = rmq[t * 2 + 1] + rmq[t * 2 + 2];
	}
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < A; ++i)
		for (int j = 0; j < A; ++j)
			scanf("%d", &is_good[i][j]);
	for (int i = 0; i < n; ++i)
		update(0, 0, n - 1, i, -1);
	for (int i = 0; i < m; ++i) {
		scanf("%d%d", &x, &y);
		--x, --y;
		update(0, 0, n - 1, x, y);
		printf("%d\n", rmq[0].sum());
	}
	return 0;
}