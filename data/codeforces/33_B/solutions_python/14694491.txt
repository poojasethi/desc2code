import sys
import string

INF=1<<30

def main():
    get_char=lambda a:ord(a)-ord('a')
    s1=raw_input()
    s2=raw_input()
    n=int(raw_input())
    a=[[INF for i in range(26)]for i in range(26)]
    for i in range(n):
        u,v,cost=raw_input().split()
        u,v=get_char(u),get_char(v)
        a[u][v]=min(a[u][v],int(cost))
    for i in range(26):
        a[i][i]=0
    if len(s1)!=len(s2):
        print -1
        return
    d=floyd_warshall(a)
    ans=0
    ans_str=''
    for i in range(len(s1)):
        u,v=get_char(s1[i]),get_char(s2[i])
        if d[u][v][0]>=INF/2:
            print -1
            return
        ans=ans+d[u][v][0]
        ans_str=ans_str+chr(d[u][v][1]+ord('a'))
    print ans
    print ans_str

def floyd_warshall(a,n=26):
    get_char=lambda a:ord(a)-ord('a')
    d=[[INF for i in range(n)]for i in range(n)]
    cost=[[(INF,0) for i in range(n)]for i in range(n)]
    for i in range(n):
        for j in range(n):
            d[i][j]=a[i][j]
    for k in range(n):
        for i in range(n):
            for j in range(n):
                d[i][j]=min(d[i][j],d[i][k]+d[k][j])
    for i in range(n):
        for j in range(n):
            for k in range(n):
                if d[i][k]+d[j][k]<cost[i][j][0]:
                    cost[i][j]=(d[i][k]+d[j][k],k)
    return cost

if __name__=='__main__':
    main()