n, m = map(int, raw_input().split())

class Group:
    
    def __init__(self):
        self.bucket_1 = None
        self.bucket_2 = None
        self.bucket_3 = None
    
    def best(self, score, bucket):
        return score >= bucket[2] 
    
    def update(self, name, group, score):
        if self.bucket_1 == None:
            self.bucket_1 = (name, group, score)
        else:
            if self.best(score, self.bucket_1):
                self.bucket_1, self.bucket_2, self.bucket_3 = (name, group, score), self.bucket_1, self.bucket_2
            else:
                self.try_bucket2(name, group, score)
    
    def try_bucket2(self, name, group, score):                          
        if self.bucket_2 == None:
            self.bucket_2 = (name, group, score)    
        else:
            if self.best(score, self.bucket_2):
                self.bucket_2, self.bucket_3 = (name, group, score), self.bucket_2
            else:
                self.try_bucket3(name, group, score)                
                
    def try_bucket3(self, name, group, score):                          
        if self.bucket_3 == None or self.best(score, self.bucket_3):
            self.bucket_3 = (name, group, score)
            
    def get_result(self):
        if self.bucket_3 == None:
            return "%s %s" % (self.bucket_1[0], self.bucket_2[0])
        else:
            if self.bucket_3[2] >= self.bucket_2[2]:
                return "?"
            else:
                return "%s %s" % (self.bucket_1[0], self.bucket_2[0])


groups = dict()
for gid in xrange(1, m+1):
    groups[gid] = Group()

for x in xrange(n):
    name, g, s = raw_input().split()
    gid, score = int(g), int(s)
    groups[gid].update(name, gid, score)
    
for gid in xrange(1, m+1):
    print groups[gid].get_result()
