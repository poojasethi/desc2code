from sys import stdin

def split_line():
    return stdin.readline().split()
def line_first():
    return split_line()[0]
def read_chars():
    return [x for x in line_first()]
def read_int():
    return int(line_first())
def read_ints():
    return [int(x) for x in split_line()]

def permutations(length, k):
    if length == 0:
        yield []
        return
    for perm in permutations(length - 1, k):
        for i in range(k):
            yield [i+1] + perm

def is_connected(lst):
    connected = set([1])
    for _ in range(8):
        for i in range(len(lst)):
            if lst[i] in connected:
                connected.add(i + 1)
    return (len(connected) == len(lst))

def first_connected(k):
    count = 0
    for perm in permutations(k - 1, k):
        if is_connected([1] + perm):
            count += 1
    return count*k

lookup = [
    1*1,
    1*2,
    3*3,
    16*4,
    125*5,
    1296*6,
    16807*7,
    262144*8]

#for i in range(1, 9):
#    print first_connected(i)
n, k = read_ints()
current = lookup[k - 1]
for _ in range(n-k):
    current = (current * (n - k)) % 1000000007
print current
