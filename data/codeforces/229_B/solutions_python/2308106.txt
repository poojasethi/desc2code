import sys
from collections import deque

# sys.stdin = open('in.txt')

def ReadIn():
	input = [ int(x) for x in sys.stdin.read().split() ]
	n, m = input[0 : 2]
	offset = 2
	edges = [ [] for i in xrange(n) ]
	for i in xrange(m):
		x, y, z = input[offset : offset + 3]
		offset += 3
		edges[x - 1].append((y - 1, z))
		edges[y - 1].append((x - 1, z))
	delay = []
	for i in xrange(n - 1):
		cnt = input[offset]
		offset += 1
		blocks = input[offset : offset + cnt]
		offset += cnt
		d = {}
		for j in xrange(cnt - 1, -1, -1):
			d[blocks[j]] = d[blocks[j] + 1] if blocks[j] + 1 in d else blocks[j] + 1
		delay.append(d)
	delay.append({})
	return n, edges, delay

def Solve(n, edges, delay):
	def mex(x, delay):
		return delay[x] if x in delay else x
		
	INF = 0x7fffffff
	q = deque([0])
	inQueue = set([0])
	d = [0] + [INF] * (n - 1)
	d[0] = mex(0, delay[0])
	while q:
		p = q.popleft()
		inQueue.discard(p)
		for v, t in edges[p]:
			nd = mex(d[p] + t, delay[v])
			if d[v] > nd:
				d[v] = nd
				if v not in inQueue:
					inQueue.add(v)
					q.append(v)
	return d[n - 1] if d[n - 1] < INF else -1
	
n, edges, delay = ReadIn()
print Solve(n, edges, delay)