#!/usr/bin/python
import sys
import heapq

def solve():
	go={}
	visited=set()
	if 0 in W[0]:q=[(W[0][0],0)]
	else:q=[(0,0)]
	while len(q)>0:
		val,v=heapq.heappop(q)
		visited.add(v)
		if n-1 in go and go[n-1]<=val:
			print go[n-1]
			return
		if val in W[v]:val=W[v][val]
		for i in graph[v]:
			if i in visited:continue
			if i not in go or graph[v][i]+val<go[i]:
				go[i]=graph[v][i]+val
				heapq.heappush(q,(go[i],i))
	print -1

line=sys.stdin.readline().strip().split()
n=int(line[0])
m=int(line[1])
graph=[{}for i in xrange(n)]
W=[{}for i in xrange(n)]
for i in xrange(m):
	line=map(int,sys.stdin.readline().strip().split())
	a=line[0]-1
	b=line[1]-1
	c=line[2]
	graph[a][b]=c
	graph[b][a]=c
for i in xrange(n):
	line=map(int,sys.stdin.readline().strip().split())
	for j in xrange(line[0],0,-1):
		W[i][line[j]]=line[j]+1 if line[j]+1 not in W[i] else W[i][line[j]+1]
solve()
		
