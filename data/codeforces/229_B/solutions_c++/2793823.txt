#include <cstdio>
#include <set>
#include <vector>
#include <queue>
#include <cstring>

using namespace std;

vector<int> adj[111111];
vector<int> cost[111111];
int n;
set<int> bad[111111];
int dist[111111];
queue<int> Q;
bool inque[111111];

int main()
{
  int m;
  scanf("%d%d",&n,&m);
  for (int i = 0; i < m; i++) {
    int f,t,v; scanf("%d%d%d",&f,&t,&v);
    adj[f].push_back(t); cost[f].push_back(v);
    adj[t].push_back(f); cost[t].push_back(v);
  }
  for (int i = 1; i <= n; i++) {
    scanf("%d",&m);
    while (m--) {
      int t; scanf("%d",&t);
      bad[i].insert(t);
    }
  }
  memset(dist,0x7f,sizeof(dist));
  dist[1] = 0; Q.push(1); inque[1] = true;
  while (Q.size()) {
    int now = Q.front(); Q.pop(); inque[now] = false;
    int tmp = dist[now];
    while (bad[now].count(tmp)) tmp ++;
    for (int i = 0; i < adj[now].size(); i++) {
      int next = adj[now][i];
      int c = cost[now][i];
      if (dist[next] > tmp + c) {
	dist[next] = tmp + c;
	if (!inque[next]) {
	  inque[next] = true;
	  Q.push(next);
	}
      }
    }
  }
  if (dist[n]>=0x3f3f3f3f) dist[n] = -1;
  printf("%d\n",dist[n]);
  return 0;
}
