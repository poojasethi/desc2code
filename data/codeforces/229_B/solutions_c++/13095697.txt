#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <iostream>

using namespace std;

int n, m;
set<int> travellers[200005];
vector< pair<int, int> > e[200005];

int MIN[200005];

int main() {
	scanf("%d %d", &n, &m);
	for(int i = 1; i <= m; ++i) {
		int a, b, c;
		scanf("%d %d %d", &a, &b, &c);
		e[a].push_back(make_pair(b, c));
		e[b].push_back(make_pair(a, c));
	}
	for(int i = 1; i <= n; ++i) {
		int k;
		scanf("%d", &k);
		for(int j = 1; j <= k; ++j) {
			int t;
			scanf("%d", &t);
			travellers[i].insert(t);
		}
	}
	memset(MIN, 0x80, sizeof MIN);
	
	priority_queue<pair<int, int> > pq;
	pq.push(make_pair(MIN[1] = 0, 1));
	while(!pq.empty()) {
		pair<int, int> _ = pq.top();
		pq.pop();
		int c = _.first,
			u = _.second;
		
		while(travellers[u].find(-c) != travellers[u].end()) {
			--c;
		}
		
		for(int i = 0, size = e[u].size(); i < size; ++i) {
			int v = e[u][i].first,
				d = e[u][i].second,
				total = c - d;
			
			if(total > MIN[v]) {
				pq.push(make_pair(MIN[v] = total, v));
			}
		}
	}
	printf("%d\n", MIN[n] > 0x80808080 ? -MIN[n] : -1);
	return 0;
}

	 		  	  				  	 	 									