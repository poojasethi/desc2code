#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
#define N 100005
#define M 200005
using namespace std;

struct node{
	int x, s;
	bool operator < (node const &T) const{return s > T.s;}
};

int n, m, x, y, w, t, ed;
int l[N], *list[N], v[N], len[N];
int MLC[M], qd[M], qn[M], qw[M];
priority_queue<node> q;

void bd(int x, int y, int w){
	qd[++ed] = y, qn[ed] = l[x], l[x] = ed, qw[ed] = w;
}

int main(){
	scanf("%d%d", &n, &m);
	while (m--){
		scanf("%d%d%d", &x, &y, &w);
		bd(x, y, w), bd(y, x, w);
	}

	FOE(i,1,n){
		scanf("%d", &len[i]);
		list[i] = &MLC[t];
		FOR(j,0,len[i]) scanf("%d", &list[i][j]);
		t += len[i];
	}

	CLR(v, -1);
	q.push((node){1, 0});
	while (!q.empty()){
		node cur = q.top();
		x = cur.x;
		q.pop();
		if (v[x] != -1) continue;
		if (v[n] != -1 && cur.s >= v[n]) break;
		v[x] = cur.s;

		t = v[x];
		FOR(i,0,len[x])
		if (t == list[x][i]) ++t;

		EXP(i, l[x]) q.push((node){qd[i], t + qw[i]});
	}

	printf("%d\n", v[n]);
	return 0;
}
