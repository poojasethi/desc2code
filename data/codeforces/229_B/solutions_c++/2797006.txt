//By momo
#include<set>
#include<queue>
#include<cstdio>
#include<vector>
#include<algorithm>

#define N 100010
#define F first
#define S second
#define INF 2000000000
#define MP make_pair
#define FOR(it,c) for(__typeof((c).begin())it=(c).begin();it!=(c).end();it++)

using namespace std;
typedef pair<int,int> PII;

struct edge{
	int t, c;
	edge(){}
	edge(int _t, int _c){t=_t,c=_c;}
};
int dis[N];
set<int> peo[N];
vector<edge> G[N];
priority_queue<PII> que;

int main(){
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i = 0; i < m; i++){
		int a, b, c;
		scanf("%d%d%d", &a, &b, &c);
		G[a].push_back(edge(b, c));
		G[b].push_back(edge(a, c));
	}
	for(int i = 1; i <= n; i++){
		int k; scanf("%d", &k);
		for(int j = 0; j < k; j++){
			int t; scanf("%d", &t);
			peo[i].insert(t);
		}
	}

	for(int i = 1; i <= n; i++) dis[i] = INF;
	que.push(MP(dis[1] = 0, 1));
	while(!que.empty()){
		PII p = que.top(); que.pop();
		if(dis[p.S] < p.F) continue;
		int tme = -p.F;
		while(peo[p.S].count(tme)) tme++;
		FOR(it, G[p.S]){
			if(dis[it->t] > tme + it->c){
				dis[it->t] = tme + it->c;
				que.push(MP(-dis[it->t], it->t));
			}
		}
	}
	if(dis[n] == INF) printf("-1\n");
	else printf("%d\n", dis[n]);
}
