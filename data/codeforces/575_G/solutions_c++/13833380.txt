#include <cstdio>
#include <vector>
#include <queue>
#include <utility>
#include <algorithm>
using namespace std;
typedef pair<int, int> P;
vector<P> e[100010];
int done[100010];
int prev[100010];
char ch[100010];
int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		int a, b, c;
		scanf("%d%d%d", &a, &b, &c);
		e[a].push_back(make_pair(c, b));
		e[b].push_back(make_pair(c, a));
	}
	done[n - 1] = 1;
	vector<int> init;
	queue<int> Q;
	Q.push(n - 1);
	while (Q.size()) {
		int v = Q.front();
		Q.pop();
		init.push_back(v);
		for (int i = 0; i < e[v].size(); i++) {
			int co = e[v][i].first, to = e[v][i].second;
			if (!co && !done[to]) {
				Q.push(to);
				done[to] = 1;
				prev[to] = v;
				ch[to] = '0';
			}
		}
	}
	queue<vector<int> > q;
	q.push(init);
	while (q.size()) {
		vector<int> v = q.front();
		q.pop();
		vector<P> w[10];
		for (int i = 0; i < v.size(); i++) {
			int a = v[i];
			for (int j = 0; j < e[a].size(); j++) {
				int co = e[a][j].first, to = e[a][j].second;
				if (done[to]) continue;
				w[co].push_back(P(to, a));
			}
		}
		for (int i = 0; i < 10; i++) {
			vector<int> t;
			for (int j = 0; j < w[i].size(); j++) {
				int to = w[i][j].first, p = w[i][j].second;
				if (!done[to]) {
					t.push_back(to);
					done[to] = 1;
					prev[to] = p;
					ch[to] = '0' + i;
				}
			}
			if (t.size()) {
				q.push(t);
			}
		}
	}
	prev[n - 1] = n - 1;
	int g = 0;
	vector<int> ans(1, g);
	while (g != n - 1) {
		g = prev[g];
		ans.push_back(g);
	}
	int z = 1;
	for (int i = ans.size() - 2; i >= 0; i--) {
		if (ch[ans[i]] != '0') {
			putchar(ch[ans[i]]);
			z = 0;
		} else if (!z) {
			putchar('0');
		}
	}
	if (z) printf("0");
	printf("\n%d\n", ans.size());
	for (int i = 0; i < ans.size(); i++) {
		printf("%d ", ans[i]);
	}
	puts("");
	return 0;
}
