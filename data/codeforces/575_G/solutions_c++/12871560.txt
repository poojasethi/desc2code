/*
 * Problem : 
 * Author : Hwhitetooth
 * Date : 
 * Result :
 */

#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cctype>
#include <cstring>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <algorithm>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;

const int N = 100000 + 10;

vector<pair<int, int> > e[N];
queue<int> que;
int dis[N];
int vis[N];
vector<int> vertex[N];
int rk[N];
int val[N], suc[N];
int n, m;

int cmp(int u, int v) {
	return rk[suc[u]] < rk[suc[v]] || (rk[suc[u]] == rk[suc[v]] && val[u] < val[v]);
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i) {
		static int u, v, w;
		scanf("%d%d%d", &u, &v, &w);
		e[u].push_back(make_pair(v, w));
		e[v].push_back(make_pair(u, w));
	}
	dis[0] = 1;
	que.push(0);
	for (; !que.empty(); que.pop()) {
		static int u, v;
		u = que.front();
		for (int i = 0; i < (int)e[u].size(); ++i) {
			v = e[u][i].first;
			if (!dis[v]) {
				dis[v] = dis[u] + 1;
				que.push(v);
			}
		}
	}

	fill(val, val + n, 10);
	vector<int> des;
	int minDis = n;
	vis[n - 1] = 1;
	que.push(n - 1);
	rk[n - 1] = 1;
	for (; !que.empty(); que.pop()) {
		static int u, v;
		u = que.front();
		minDis = min(minDis, dis[u]);
		for (int i = 0; i < (int)e[u].size(); ++i) {
			if (e[u][i].second == 0) {
				v = e[u][i].first;
				if (!vis[v]) {
					vis[v] = 1;
					que.push(v);
					suc[v] = u;
					val[v] = 0;
					rk[v] = rk[u] + 1;
				}
			}
		}
	}
	for (int i = 0; i < n; ++i) {
		if (vis[i] && dis[i] == minDis) {
			vertex[minDis].push_back(i);
		}
	}
	sort(vertex[minDis].begin(), vertex[minDis].end(), cmp);
	for (int i = 0; i < (int)vertex[minDis].size(); ++i) {
		static int u, v, w;
		u = vertex[minDis][i];
		rk[u] = 0;
		for (int j = 0; j < (int)e[u].size(); ++j) {
		v = e[u][j].first;
			w = e[u][j].second;
			if (dis[v] == minDis - 1) {
				if (val[v] == 10) {
					vertex[minDis - 1].push_back(v);
				}
				if (val[v] == 10 || (rk[suc[v]] == rk[u] && val[v] > w)) {
					val[v] = w;
					suc[v] = u;
				}
			}
		}
	}

	for (int d = minDis - 1; d > 1; --d) {
		sort(vertex[d].begin(), vertex[d].end(), cmp);
		int t = 0;
		for (int i = 0; i < (int)vertex[d].size(); ++i) {
			static int u, v, w;
			u = vertex[d][i];
			if (cmp(vertex[d][t], u)) {
				t = i;
			}
			rk[u] = t;
			for (int j = 0; j < (int)e[u].size(); ++j) {
				v = e[u][j].first;
				w = e[u][j].second;
				if (dis[v] == d - 1) {
					if (val[v] == 10) {
						vertex[d - 1].push_back(v);
					}
					if (val[v] == 10 || (rk[suc[v]] == rk[u] && val[v] > w)) {
						val[v] = w;
						suc[v] = u;
					}
				}
			}
		}
	}
	vector<int> ans;
	for (int u = 0; u != n - 1; u = suc[u]) {
		ans.push_back(val[u]);
	}
	int zero = 1;
	for (int i = (int)ans.size() - 1; i >= 0; --i) {
		if (ans[i] == 0 && zero) {
			continue;
		}
		printf("%d", ans[i]);
		zero = 0;
	}
	if (zero) {
		printf("0");
	}
	printf("\n");
	printf("%d\n", (int)ans.size() + 1);
	for (int u = 0; u != n - 1; u = suc[u]) {
		printf("%d ", u);
	}
	printf("%d\n", n - 1);
	return 0;
}
