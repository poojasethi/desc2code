#include<bits/stdc++.h>
#define N 200005
#define pb push_back
using namespace std;
vector<int>a[N],b[N];
int deep[N],first[N],Q[N],f[N],num[N],pre[N],last[N],flag[N];
int n,m,x,y,z,k,i,TMP,Len;
struct data
{
  int id;
  friend inline int operator < (const data &a,const data &b){
    int k=a.id,x=b.id;
    if (deep[k]!=deep[x]) return deep[k]<deep[x];
    if (last[k]!=last[x]) return last[k]<last[x];
    //if (num[k]!=num[x]) return num[k]<num[x];
    return 0;
  }
}q[N];
void Bfs0()
{
	int h=0,t=1;q[1]=(data){n};num[n]=1;
  while (h<t){
    int k=q[++h].id;
    for (i=0,x;i<a[k].size();i++)
      if (!b[k][i]&&!num[x=a[k][i]])
        pre[x]=k,num[x]=num[k]+1,q[++t]=(data){x};
  }
  for (int i=1;i<=t;i++) 
		first[q[i].id]=1;
	TMP=t;
}
void Bfs1()
{
	int h=0,t=1;Q[1]=1;f[1]=1;Len=n;
  while (h<t){
		int k=Q[++h];
		if (first[k]) {Len=min(Len,f[k]);continue;}
		for (i=0,x;i<a[k].size();i++)
			if (!f[x=a[k][i]]) 
				Q[++t]=x,f[x]=f[k]+1;
  }
}
void Bfsn()
{
  int h=0,t=TMP,start=1,End=t;
  for (int i=1;i<=n;i++) 
		deep[i]=first[i]?1:n+1;
	for (int i=1;i<=t;i++) flag[q[i].id]=1;
  while (h<t){
    int k=q[++h].id;
    if (f[k]==Len) 
    for (int i=0;i<a[k].size();i++){
      x=a[k][i];
      if (f[k]!=f[x]+1||deep[k]+1>deep[x]) continue;
      if (deep[k]+1==deep[x])
        if (last[x]<b[k][i]||last[x]==b[k][i]&&num[x]<num[k]) continue;
      last[x]=b[k][i];deep[x]=deep[k]+1;num[x]=num[k];pre[x]=k;
      if (!flag[x]) flag[x]=1,q[++t]=(data){x};
    }
    if (h==End){
      if (End==t) break;Len--;
      sort(q+End+1,q+t+1);
      for (i=h+1;i<t;i++)
        if (q[i]<q[i+1]) break;
      start=h+1;End=t=i;
    }
  }
}
int main()
{
	scanf("%d%d",&n,&m);
  for (i=1;i<=m;i++)
    scanf("%d%d%d",&x,&y,&z),
    ++x,++y,a[x].pb(y),a[y].pb(x),
    b[x].pb(z),b[y].pb(z);
  Bfs0();
  Bfs1();
  Bfsn();
	for (i=1;i!=n;i=pre[i])
		Q[++*Q]=last[i];
	Len=*Q+1;
  for (i=*Q;i;i--)
		if (Q[i]) break;
	if (!i) Q[i=1]=0;
	for (;i;i--)
		printf("%d",Q[i]);
  printf("\n%d\n",Len);
  for (i=1;i;i=pre[i])
    printf("%d ",i-1);
}