#include<cstdio>
#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
const int N=1e5+100;
struct Edge {
    int v,next,w;
    Edge(){}
    Edge(int v,int next,int w):v(v),next(next),w(w){}
}e[N*2];
int head[N],total;
void init(){
    memset(head,-1,sizeof(head));total=0;
}
void adde(int u,int v,int w){
    e[total]=Edge(v,head[u],w);head[u]=total++;
}

int dep[N];
int sta[2][N],top[2];
int pre[N],val[N];
int vis[N];

int main(){
    #ifdef DouBi
    freopen("in.cpp","r",stdin);
    #endif // DouBi
    int n,m;
    while(scanf("%d%d",&n,&m)!=EOF){
        init();
        for(int i=0;i<m;i++){
            int a,b,w;scanf("%d%d%d",&a,&b,&w);
            adde(a,b,w);adde(b,a,w);
        }
        memset(dep,-1,sizeof(dep));dep[0]=0;
        queue<int> qq;qq.push(0);
        while(!qq.empty()){
            int u=qq.front();qq.pop();
            for(int i=head[u];i!=-1;i=e[i].next){
                int v=e[i].v;if(dep[v]==-1){
                    dep[v]=dep[u]+1;
                    qq.push(v);
                }
            }
        }

        int x=n;top[0]=0;
        memset(vis,-1,sizeof(vis));
        qq.push(n-1);vis[n-1]=0;pre[n-1]=-1;val[n-1]=0;
        while(!qq.empty()){
            int u=qq.front();qq.pop();
            sta[0][top[0]++]=u;
            x=min(x,dep[u]);
            for(int i=head[u];i!=-1;i=e[i].next){
                int v=e[i].v;if(e[i].w==0&&vis[v]==-1){
                    pre[v]=u;val[v]=0;vis[v]=vis[u]+1;qq.push(v);
                }
            }
        }
        int cnt=0;
        for(int i=0;i<top[0];i++){
            if(dep[sta[0][i]]==x){
                sta[0][cnt++]=sta[0][i];
            }
        }
        top[0]=cnt;

        int p=0;
        while(vis[0]==-1){
            x=10;
            for(int i=0;i<top[p];i++){
                int u=sta[p][i];
                for(int j=head[u];j!=-1;j=e[j].next){
                    int v=e[j].v;if(dep[v]==dep[u]-1){
                        x=min(x,e[j].w);
                    }
                }
            }
            top[p^1]=0;
            for(int i=0;i<top[p];i++){
                int u=sta[p][i];
                for(int j=head[u];j!=-1;j=e[j].next){
                    int v=e[j].v;if(dep[v]==dep[u]-1&&e[j].w==x){
                        if(vis[v]==-1){
                            pre[v]=u;val[v]=x;vis[v]=vis[u]+1;sta[p^1][top[p^1]++]=v;
                        }
                        else if(vis[v]>vis[u]+1){
                            pre[v]=u;val[v]=x;vis[v]=vis[u]+1;
                        }
                    }
                }
            }
            p^=1;
        }
        top[0]=0;
        top[1]=0;
        int u=0;
        while(u!=-1){
            sta[0][top[0]++]=val[u];
            sta[1][top[1]++]=u;
            u=pre[u];
        }

        while(top[0]>1&&sta[0][top[0]-1]==0)top[0]--;
        for(int i=top[0]-1;i>=0;i--){
            printf("%d",sta[0][i]);
        }printf("\n");
        printf("%d\n",top[1]);
        for(int i=0;i<top[1];i++){
            printf("%d",sta[1][i]);
            if(i==top[1]-1)printf("\n");
            else printf(" ");
        }
    }
    return 0;
}

	 	 		     	 	    	  	   						