#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#define fi first
#define se second

using namespace std;

const int maxN = 1e5+10;
struct graph { int x,y,w; };
typedef pair <int, int> ii;
typedef int array1[maxN];
int N,M,H;
array1 C,D,par;
graph G[maxN];
vector <ii> F[maxN];

bool cmpf(ii a, ii b) { return a.se < b.se; }
bool cmp(graph a, graph b) { return a.w < b.w; }

int main()
{
    //freopen("575G.inp","r",stdin);
    //freopen("575G.out","w",stdout);
        scanf("%d%d",&N,&M);
        for (int i=1; i <= M; i++)
        {
            int x,y,w;
            scanf("%d%d%d",&x,&y,&w);
            F[x].push_back(ii(y,w));
            F[y].push_back(ii(x,w));
        }
        for (int i=0; i < N; i++) sort(F[i].begin(),F[i].end(),cmpf);
        queue <int> Q;
        vector <int> tmp;
        Q.push(N-1); par[N-1] = -1;
        tmp.push_back(N-1);
        while (! Q.empty())
        {
            int x = Q.front(); Q.pop();
            for (int i=0; i < F[x].size(); i++)
            {
                int y = F[x][i].fi, w = F[x][i].se;
                if (par[y] != 0 || w > 0) continue;
                par[y] = x; Q.push(y);
                tmp.push_back(y);
            }
        }
        queue < vector<int> > que;
        que.push(tmp);
        while (! que.empty())
        {
            tmp = que.front(); que.pop();
            H = 0;
            for (int k=0; k < tmp.size(); k++)
            {
                int x = tmp[k];
                for (int i=0; i < F[x].size(); i++)
                {
                    int y = F[x][i].fi, w = F[x][i].se;
                    if (par[y] != 0) continue;
                    G[++H].x = x; G[H].y = y; G[H].w = w;
                }
            }
            sort(G+1,G+H+1,cmp);
            tmp.clear();
            for (int i=1; i <= H; i++)
            {
                if (G[i].w != G[i-1].w && tmp.size() != 0)
                {
                    que.push(tmp);
                    tmp.clear();
                }
                int x = G[i].x, y = G[i].y, w = G[i].w;
                if (par[y] != 0) continue;
                par[y] = x; D[y] = w;
                tmp.push_back(y);
            }
            if (tmp.size() != 0) que.push(tmp);
        }
        int k = 0;
        vector <int> ans,num;
        while (k >= 0)
        {
            ans.push_back(k);
            num.push_back(D[k]);
            k = par[k];
        }
        while (num.size() > 1 && ! num[num.size()-1]) num.pop_back();
        for (int i=num.size()-1; i >= 0; i--) printf("%d",num[i]);
        printf("\n");
        printf("%d\n",ans.size());
        for (int i=0; i < ans.size(); i++) printf("%d ",ans[i]);
}
