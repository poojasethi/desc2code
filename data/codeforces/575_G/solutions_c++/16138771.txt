#include <cstdio>
#include <vector>
#include <utility>
#include <queue>
#include <algorithm>
#include <cstring>

using namespace std;

const int N = 100001;

int n, m;
vector<int> t[N], v[N];
int p[N], l[N];
bool vis[N];
queue<int> c, d;
vector<int> e;
int ans[N], q;

void print() {
	for (int i = 0; i != n - 1; i = p[i]) {
		ans[q++] = i;
	}
	ans[q] = n - 1;
	bool flag = false;
	for (int i = q - 1; i >= 0; i--) {
		if (l[ans[i]] != 0) {
			flag = true;
		}
		if (flag) {
			printf("%d", l[ans[i]]);
		}
	}
	if (flag == false) {
		printf("0");
	}
	printf("\n");
	printf("%d\n", q + 1);
	for (int i = 0; i < q; i++) {
		printf("%d ", ans[i]);
	}
	printf("%d\n", ans[q]);
}
inline bool cmp(int i, int j) {
	return l[i] < l[j];
}
void cal() {
	memset(p, -1, sizeof(p));
	memset(l, -1, sizeof(l));
	c.push(n - 1);
	d.push(n - 1);
	vis[n - 1] = true;
	while (!d.empty()) {
		int i = d.front();
		d.pop();
		for (int j = 0; j < t[i].size(); j++) {
			int u = t[i][j];
			if (v[i][j] == 0 && vis[u] == false) {
				vis[u] = true;
				p[u] = i;
				l[u] = 0;
				d.push(u);
				c.push(u);
			}
		}
	}
	c.push(-1);
	while (!c.empty()) {
		int i = c.front();
		c.pop();
		if (i == -1) {
			sort(e.begin(), e.end(), cmp);
			for (int j = 0; j < e.size(); j++) {
				vis[e[j]] = true;
				if (j != 0 && l[e[j]] != l[e[j - 1]]) {
					c.push(-1);
				}
				c.push(e[j]);
			}
			if (!e.empty()) {
				c.push(-1);
			}
			e.clear();
		} else {
			for (int j = 0; j < t[i].size(); j++) {
				int u = t[i][j];
				if (vis[u] == false) {
					if (l[u] == -1) {
						e.push_back(u);
					}
				   	if (l[u] == -1 || l[u] > v[i][j]) {
						p[u] = i;
						l[u] = v[i][j];
					}
				}
			}
		}
	}
}
int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		int x, y, z;
		scanf("%d%d%d", &x, &y, &z);
		t[x].push_back(y);
		t[y].push_back(x);
		v[x].push_back(z);
		v[y].push_back(z);
	}
	cal();
	print();
	return 0;
}
