#include <cstdio>
#include <algorithm>
#define N 100005
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
#define fe(a, b, c) for(int a = (b); a; a = c[a])
using namespace std;

int n, m, f[N], v[N + N], o[N + N], w[N + N], pv[N], pw[N], d[N], p, q[N], l, h, r[N], rr, path[N], pp;
bool z[N];

void bd(int a, int b, int c){
	v[++p] = b; o[p] = f[a]; f[a] = p; w[p] = c;
}

bool cmp(int x, int y){
	return r[pv[x]] < r[pv[y]] || r[pv[x]] == r[pv[y]] && pw[x] < pw[y]; 
}

int main(){
	scanf("%d %d", &n, &m);
	fi(i, 0, m){
		int a, b, c;
		scanf("%d %d %d", &a, &b, &c);
		bd(a, b, c);
		bd(b, a, c);
	}
	
	fi(i, 0, n) d[i] = N;
	d[n - 1] = 1;
	q[h++] = n - 1;
	while(l < h){
		int y = q[l++];
		z[y] = 1;
		fe(i, f[y], o) if(!w[i]){
			if(d[v[i]] > d[y] + 1){
				d[v[i]] = d[y] + 1;
				pv[v[i]] = y;
				pw[v[i]] = w[i];
				q[h++] = v[i];
			}
		}
	}
	
	l = h = 0;
	fi(i, 0, n){
		if(z[i]){
			r[i] = 0;
			q[h++] = i;
		}
	}
	
	rr = N;
	while(l < h){
		int ol = l, oh = h;
		fi(i, ol, oh){
			int y = q[l++];
			fe(i, f[y], o) if(!z[v[i]]){
				if(d[v[i]] == N){
					d[v[i]] = d[y] + 1;
					pv[v[i]] = y;
					pw[v[i]] = w[i];
					q[h++] = v[i];
				}else if(r[pv[v[i]]] > r[y] || r[pv[v[i]]] == r[y] && pw[v[i]] > w[i] || r[pv[v[i]]] == r[y] && pw[v[i]] == w[i] && d[pv[v[i]]] > d[y]){
					d[v[i]] = d[y] + 1;
					pv[v[i]] = y;
					pw[v[i]] = w[i];
				}
			}
		}
		
		sort(q + oh, q + h, cmp);
		r[q[oh]] = ++rr;
		fi(i, oh + 1, h){
			if(r[pv[q[i]]] == r[pv[q[i - 1]]] && pw[q[i]] == pw[q[i - 1]]) r[q[i]] = r[q[i - 1]];
			else r[q[i]] = ++rr;
		}
		
		//fi(i, oh, h) printf("r %d %d\n", q[i], r[q[i]]);
	}
	
	for(int i = 0; i != n - 1; i = pv[i]) path[pp++] = i;
	bool hv = 0;
	FD(i, pp - 1, 0){
		if(pw[path[i]]){
			hv = 1;
			printf("%d", pw[path[i]]);
		}else if(hv) printf("0");
	}
	
	if(!hv) printf("0");
	puts("");
	
	printf("%d\n", d[0]);
	for(int i = 0; i != n - 1; i = pv[i]) printf("%d\n", i);
	printf("%d\n", n - 1);

	scanf("\n");
}
/*
7 8
0 2 3
2 4 1
0 1 2
1 3 2
3 6 2
4 6 0
6 5 0
5 4 0
*/
