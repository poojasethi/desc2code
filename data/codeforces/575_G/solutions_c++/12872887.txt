#include <queue>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
using namespace std;

int lst[131072];

struct edge {
	int d, s, l;
}e[262144];

int n, m, gs = 0;
queue <int> q;
int d[131072];
int rd[131072];
int suc[131072];
bool v[131072];
vector <int> cd[131072];

void addEdge (int x, int y, int l) {
	e[++gs].d = y;
	e[gs].s = lst[x];
	e[gs].l = l;
	lst[x] = gs;
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i) {
		int x, y, l;
		scanf("%d%d%d", &x, &y, &l);
		addEdge(x, y, l);
		addEdge(y, x, l);
	}
	memset(d, 255, sizeof(d));
	memset(rd, 255, sizeof(rd));
	d[0] = 0;
	q.push(0);
	while (!q.empty()) {
		int now = q.front();
		q.pop();
		for (int i = lst[now]; i > 0; i = e[i].s)
			if (d[e[i].d] == -1) {
				d[e[i].d] = d[now] + 1;
				q.push(e[i].d);
			}
	}
	q.push(n - 1);
	rd[n - 1] = 0;
	int a1 = n;
	while (!q.empty()) {
		int now = q.front();
		q.pop();
		if (d[now] < a1)
			a1 = d[now];
		for (int i = lst[now]; i > 0; i = e[i].s)
			if (rd[e[i].d] == -1 && e[i].l == 0) {
				rd[e[i].d] = rd[now] + 1;
				q.push(e[i].d);
			}
	}
	for (int i = 0; i < n; ++i) {
		if (d[i] == a1 && rd[i] != -1) {
			v[i] = true;
			cd[a1].push_back(i);
		}
	}
	for (int turn = a1; turn > 0; turn --) {
		int s = cd[turn].size();
		int mi = 10;
		for (int i = 0; i < s; ++i) {
			for (int j = lst[cd[turn][i]]; j > 0; j = e[j].s) {
				if (d[e[j].d] == turn - 1 && e[j].l < mi)
					mi = e[j].l;
			}
		}
		printf("%d", mi);
		for (int i = 0; i < s; ++i) {
			for (int j = lst[cd[turn][i]]; j > 0; j = e[j].s)
				if (d[e[j].d] == turn - 1 && e[j].l == mi) {
					if (!v[e[j].d]) {
						v[e[j].d] = true;
						suc[e[j].d] = cd[turn][i];
						cd[turn - 1].push_back(e[j].d);
						rd[e[j].d] = rd[cd[turn][i]];
					} else {
						if (rd[cd[turn][i]] < rd[e[j].d]) {
							rd[e[j].d] = rd[cd[turn][i]];
							suc[e[j].d] = cd[turn][i];
						}
					}
				}
		}
	}
	int a2 = rd[0];
	if (a1 == 0) {
		printf("0");
	}
	printf("\n%d\n", a1 + a2 + 1);
	int now = 0;
	printf("0");
	for (int i = 0; i < a1; ++i) {
		now = suc[now];
		printf(" %d", now);
	}
	for (int i = 0; i < a2; ++i) {
		for (int j = lst[now]; j > 0; j = e[j].s) {
			if (rd[now] - 1 == rd[e[j].d] && e[j].l == 0) {
				now = e[j].d;
				break;
			}
		}
		printf(" %d", now);
	}
	printf("\n");
	return 0;
}