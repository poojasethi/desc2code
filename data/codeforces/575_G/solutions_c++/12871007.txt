#include<set>
#include<map>
#include<cmath>
#include<ctime>
#include<queue>
#include<cstdio>
#include<string>
#include<vector>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>

using namespace std;

#define pb push_back
#define mp make_pair

typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;

int pre[100010],ways[100010],d[100010],q[100010],ans1[100010],ans2[100010];
vi e[100010][10];
bool v[100010];

namespace input
{
    int read()
    {
        char ch;
        for (ch=getchar();(ch<'0'||ch>'9')&&ch!='-';) ch=getchar();
        int d=0,t=1;if (ch=='-') {t=-1;ch=getchar();}
        for (;ch>='0'&&ch<='9';ch=getchar()) d=d*10+ch-48;
        return d*t;
    }
}

int main()
{
    #ifdef waltz
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int n=input::read(),m=input::read();
    for (int i=1;i<=m;i++)
    {
        int x=input::read()+1,y=input::read()+1,z=input::read();
        e[x][z].pb(y);
        e[y][z].pb(x);
    }
    memset(v,0,sizeof(v));v[n]=1;d[n]=0;
    int f=1,r=1;q[1]=n;
    while (f<=r)
    {
        int x=q[f++];
        for (vi::iterator p=e[x][0].begin();p!=e[x][0].end();p++)
            if (!v[*p])
            {
                q[++r]=*p;v[*p]=1;d[*p]=0;pre[*p]=x;ways[*p]=0;
            }
    }
    int dis=0,k=1;
    while (k<=r)
    {
        int j=k;
        while (j<=r&&d[q[j]]==d[q[k]]) j++;
        for (int c=0;c<10;c++)
        {
            dis++;
            for (int i=k;i<j;i++)
            {
                for (vi::iterator p=e[q[i]][c].begin();p!=e[q[i]][c].end();p++)
                {
                    if (!v[*p])
                    {
                        v[*p]=1;q[++r]=*p;d[q[r]]=dis;
                        pre[*p]=q[i];ways[*p]=c;
                    }
                }
            }
        }
        k=j;
    }
    int cnt=1;ans2[1]=1;k=1;
    while (k!=n)
    {
        ans1[cnt]=ways[k];
        ans2[++cnt]=pre[k];
        k=pre[k];
    }
    int len=cnt-1;
    while (len>1&&(!ans1[len])) len--;
    for (int i=len;i;i--) printf("%d",ans1[i]);
    printf("\n%d\n",cnt);
    for (int i=1;i<=cnt;i++) printf("%d ",ans2[i]-1);
    return 0;
}
