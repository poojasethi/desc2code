#include<iostream>
#include<sstream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cstdlib>
#include<cmath>
#include<cctype>
#include<ctime>
#include<algorithm>
#include<iomanip>
#include<vector>
#include<queue>
#include<map>
#include<set>
#include<cassert>
#include<bitset>

using namespace std;

const int N = 2e5+100;

int tot = 0;
int nxt[N], to[N], w[N], last[N];
int from[N], len[N];
unsigned long long hashv[N];
unsigned long long legalhash = 1ll;

void add(int x, int y, int z){
nxt[tot] = last[x];
to[tot] = y;
w[tot] = z;
last[x] = tot;
tot ++;
}

int q[2][N], f[2];
int now = 0;
void inque(int x, int y, int z){
from[x] = y;
len[x] = z;
q[1 - now][f[1 - now]++] = x;
}

int ans, aa[N], bb[N];
int can[N], que[N], ff = 0, rr = 0, up[N], dis[N];
int main() {
int n, m;
memset(last, -1, sizeof(last));
memset(from, -1, sizeof(from));
scanf("%d%d", &n, &m);
for(int i = 0; i < m; ++i){
int x, y, z;
scanf("%d%d%d", &x, &y, &z);
add(x, y, z);
add(y, x, z);
}
{
can[n-1] = 1;
que[ff++] = n-1;
while(rr < ff){
int tmp = que[rr++];
int ed = last[tmp];
while(ed != -1){
if(!can[to[ed]] && w[ed] == 0){
can[to[ed]] = 1;
que[ff ++] = to[ed];
up[to[ed]] = tmp;
dis[to[ed]] = dis[tmp] + 1;
}
ed = nxt[ed];
}
}
}
inque(0, -2, 0);
hashv[0] = 1ll;
int canget = can[0];
if(canget) legalhash = 1ll;
while(f[1 - now] && canget == 0){
f[now] = 0;
now = 1 - now;
for(int l = 0; l < 10; ++l){
for(int i = 0; i < f[now]; ++i){
int tmp = q[now][i];
int ed = last[tmp];
while(ed != -1){
if(w[ed] == l && from[to[ed]] == -1){
int y = to[ed];
inque(y, tmp, l);
hashv[y] = hashv[tmp] * 31 + 1 + l;
if(can[y]){
if(canget == 0){
legalhash = hashv[y];
}
canget = 1;
}
}
ed = nxt[ed];
}
}
}
}
{
int use = -1;
for(int i = 0; i < n; ++i){
if(can[i] && from[i] != -1 && legalhash == hashv[i]){
if(use == -1 || dis[use] > dis[i]){
use = i;
}
}
}
ans = 0;
int tmp = use;
while(tmp != n - 1){
aa[ans] = 0;
bb[ans] = tmp;
ans++;
tmp = up[tmp];
}
for(int i = 0; i < ans/2; ++i){
swap(bb[i], bb[ans - 1 - i]);
}
tmp = use;
while(tmp != 0){
aa[ans] = len[tmp];
bb[ans] = from[tmp];
ans++;
tmp = from[tmp];
}
}
int ok = 0;
for(int i = 0; i < ans; ++i){
if(aa[i] != 0)
ok = 1;
if(ok) printf("%d", aa[i]);
}
if(ok == 0) printf("0");
printf("\n");
printf("%d\n", ans + 1);
for(int i = ans - 1; i >= 0; --i){
printf("%d ", bb[i]);
}
printf("%d\n", n - 1);
return 0;
}