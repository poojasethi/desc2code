#include<iostream>
#include<cstring>
#include<vector>
using namespace std;
const int MAX=100005;
vector<pair<int,int> >adj[MAX];
int q[MAX],d[MAX],d2[MAX],par[MAX],val[MAX];
bool mark[MAX];
vector<int>best;
int main()
{
	ios::sync_with_stdio(false);
	int n,m;
	cin>>n>>m;
	for(int i=0;i<m;i++)
	{
		int u,v,w;
		cin>>u>>v>>w;
		adj[u].push_back(make_pair(v, w));
		adj[v].push_back(make_pair(u, w));
	}
	memset(d,63,sizeof(d));
	int h=0,t=0;
	d[0]=0;
	q[t++]=0;
	while(h<t)
	{
		int v=q[h++];
		for(int i=0;i<adj[v].size();i++)
		{
			int u=adj[v][i].first;
			if(d[u]>d[v]+1)
			{
				d[u]=d[v]+1;
				q[t++]=u;
			}
		}
	}
	h=0;t=0;
	memset(d2,63,sizeof(d2));
	d2[n-1]=0;
	par[n-1]=-1;
	q[t++]=n-1;
	while(h<t)
	{
		int v=q[h++];
		best.push_back(v);
		mark[v]=true;
		for(int i=0;i<adj[v].size();i++)
		{
			int u=adj[v][i].first;
			int w=adj[v][i].second;
			if(w==0 && d2[u]>d2[v]+1)
			{
				d2[u]=d2[v] + 1;
				q[t++]=u;
				par[u]=v;
				val[u]=-1;
			}
		}
	}
	vector<int> nxt;
	pair<int,pair<int,int> >init;
	init.first=1e9;
	for(int i=0;i<best.size();i++)
	{
		int v=best[i];
		if(v==0)
		{
			cout<<"0 \n"<<d2[v]+1<< endl;
			while (v!=-1)
			{
				cout<<v<<" ";
				v=par[v];
			}
			cout<<endl;
			return 0;
		}
		for(int j=0;j<adj[v].size();j++)
		{
			int u=adj[v][j].first;
			int w=adj[v][j].second;
			if(!w)
				continue;
			if(mark[u])
				continue;
			pair<int,pair<int,int> >state;
			state.first=d[u];
			state.second.first=w;
			state.second.second=d[u]+d2[v]+1;
			if(init>state)
			{
				nxt.clear();
				init=state;
			}
			if(init==state)
			{
				par[u]=v;
				val[u]=w;
				nxt.push_back(u);
			}
		}
	}
	best=nxt;
	nxt.clear();
	while(true)
	{
		bool f=false;
		for(int i=0;i<best.size();i++)
		{
			mark[best[i]]=true;
			if(best[i]==0)
				f=true;
		}
		if(f)
			break;
		pair<int,int> mn;
		mn.first=1e9;
		for(int i=0;i<best.size();i++)
		{
			int v=best[i];
			for(int j=0;j<adj[v].size();j++)
			{
				int u=adj[v][j].first;
				int w=adj[v][j].second;
				if(mark[u])
					continue;
				pair<int,int>state;
				state.first=d[u];
                state.second=w;
				if (mn>state)
				{
					nxt.clear();
					mn=state;
				}
				if (mn==state)
				{
					par[u]=v;
					val[u]=w;
					nxt.push_back(u);
				}
			}
		}
		best=nxt;
		nxt.clear();
	}
	int v=0;
	vector<int> path;
	while(v!=-1)
	{
		path.push_back(v);
		v=par[v];
	}
	for(int i=(int)path.size()-2;i>=0;i--)
		if(val[path[i]]!=-1)
			cout<<val[path[i]];
	cout<<"\n";
	cout<<path.size()<<"\n";
	for(int i=0;i<path.size();i++)
		cout<<path[i]<<" ";
	cout<<endl;
	return 0;
}
