#include<stdio.h>
#include<vector>
#include<algorithm>
using namespace std;
vector<int>con[100010];
vector<int>con2[100010];
struct data
{
    int x,cnt,pos,bef,lev;
    bool operator<(const data&r)const
    {
        if(x==r.x) return cnt<r.cnt;
        return x<r.x;
    }
}q[300010];
data q2[300010],ch[300010];
int cnt,s,n,m,x,y,z,visit[300010],p,go[300010];
void dfs(int x)
{
    if(x==-1) return;
    p=q[x].pos;
    dfs(q[x].bef);
    printf("%d",q[x].x);
    cnt++;
}
void dfs2(int x)
{
    if(x==-1) return;
    printf("%d ",q[x].pos-1);
    dfs2(q[x].bef);
}
void bfs()
{
    int i,f=-1,r=0,f2=-1,r2,p2;
    q[0].x=n; visit[n]=1;
    for(i=1;i<=n;i++) ch[i].x=2147483647;
    while(f!=r)
    {
        f++;
        if(q[f].x==1)
        {
            printf("0\n");
            p=q[f].x;
            printf("%d\n",q[f].cnt+1);
            while(p){printf("%d ",p-1); p=go[p];}
            return;
        }
        for(i=0;i<con[q[f].x].size();i++)
        {
            if(con2[q[f].x][i] && visit[con[q[f].x][i]]==0)
            {
                if(ch[con[q[f].x][i]].x>con2[q[f].x][i] || (ch[con[q[f].x][i]].x==con2[q[f].x][i] && ch[con[q[f].x][i]].cnt>q[f].cnt))
                {
                    go[con[q[f].x][i]]=q[f].x;
                    ch[con[q[f].x][i]].x=con2[q[f].x][i];
                    ch[con[q[f].x][i]].cnt=q[f].cnt;
                    ch[con[q[f].x][i]].pos=con[q[f].x][i];
                }
            }
            else if(con2[q[f].x][i]==0 && visit[con[q[f].x][i]]==0){r++; q[r].x=con[q[f].x][i]; q[r].cnt=q[f].cnt+1; go[q[r].x]=q[f].x; visit[q[r].x]=1;}
        }
    }
    r=-1; f=-1;
    for(i=1;i<=n;i++)
    {
        if(ch[i].x!=2147483647)
        {
            r++; q[r].x=ch[i].x; q[r].cnt=ch[i].cnt; q[r].pos=ch[i].pos; q[r].bef=-1;
            if(q[r].pos==1)
            {
                dfs(r); p2=p;
                while(p){p=go[p], cnt++;} printf("\n%d\n",cnt-1);
                dfs2(r);
                while(p2){p2=go[p2]; if(p2==0) break; printf("%d ",p2-1);}
                return;
            }
        }
    }
    sort(q,q+r+1);
    s=r; r2=-1;
    while(f!=r)
    {
        f++;
        if(q[f].lev!=q[f-1].lev || q[f].x!=q[f-1].x){sort(q+r2+1,q+r+1); r2=r;}
        if(visit[q[f].pos]) continue;
        visit[q[f].pos]=1;
        if(q[f].pos==1)
        {
            dfs(f); p2=p;
            while(p){p=go[p], cnt++;} printf("\n%d\n",cnt-1);
            dfs2(f);
            while(p2){p2=go[p2]; if(p2==0) break; printf("%d ",p2-1);}
            return;
        }
        for(i=0;i<con[q[f].pos].size();i++)
        {
            if(visit[con[q[f].pos][i]]) continue;
            r++; q[r].x=con2[q[f].pos][i]; q[r].cnt=q[f].cnt; q[r].pos=con[q[f].pos][i]; q[r].bef=f; q[r].lev=q[f].lev+1;
        }
    }
}
int main()
{
    int i;
    scanf("%d %d",&n,&m);
    for(i=1;i<=m;i++){scanf("%d %d %d",&x,&y,&z); x++; y++; con[x].push_back(y); con[y].push_back(x); con2[x].push_back(z); con2[y].push_back(z);}
    bfs();
    return 0;
}
