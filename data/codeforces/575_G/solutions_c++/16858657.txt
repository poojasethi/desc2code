#include<iostream>
#include<vector>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<queue>
#include<set>
using namespace std;
int n,m,a,b,l;
int zdist[100001],bfsdist[100001],zpar[100001],bfspar[100001];
pair<int,int> par[100001];
vector<pair<int,int> >neigh[100001];
const int INF=1e9;
set<int>s,ns;
void bfs(int v,int dist[],int par[],bool f)
{
	bool ok[10]={};
	ok[0]=true;
	if(!f)fill(ok+1,ok+10,true);
	fill(dist,dist+n,INF);dist[v]=0;
	queue<int>q;
	q.push(v);
	while(!q.empty())
	{
		int v=q.front();
		q.pop();
		for(int i=0;i<neigh[v].size();i++)
		{
			pair<int,int>u=neigh[v][i];
			if(ok[u.second] && dist[v]+1<dist[u.first])
			{
				dist[u.first]=dist[v]+1;
				par[u.first]=v;
				q.push(u.first);
			}
		}
	}
}
int main()
{
	cin>>n>>m;
	for(int i=1;i<=m;i++)
	{
		cin>>a>>b>>l;
		neigh[a].push_back(make_pair(b,l));
		neigh[b].push_back(make_pair(a,l));
	}
	bfs(n-1,zdist,zpar,true);
	bfs(0,bfsdist,bfspar,false);
	int rlen=INF;
	for(int i=0;i<n;i++)
	{
		if(i==n-1 || zdist[i]<INF)if(bfsdist[i]<rlen)rlen=bfsdist[i];
	}
	fill(par,par+n,make_pair(INF,0));
	for(int i=0;i<n;i++)
	{
		if(i==n-1 || zdist[i]<INF)
		{
			if(bfsdist[i]==rlen)
			{
				par[i]=make_pair(zdist[i],i);
				s.insert(i);
			}
		}
	}
	for(int i=0;i<rlen;i++)
	{
		ns.clear();
		int best=10;
		for(set<int>::iterator it=s.begin();it!=s.end();it++)
		{
			for(int j=0;j<neigh[*it].size();j++)
			{
				pair<int,int>u=neigh[*it][j];
				if((bfsdist[*it]-1)!=bfsdist[u.first])continue;
				if(u.second<best)
				{
					best=u.second;ns.clear();
				}
				if(u.second==best)
				{
					if(ns.find(u.first)!=ns.end())
					{
						par[u.first]=min(par[u.first],make_pair(par[*it].first,*it));
					}
					else
					{
						ns.insert(u.first);par[u.first]=make_pair(par[*it].first,*it);
					}
				}
			}	
		}
		cout<<best;
		s=ns;
	}
	if(rlen==0)cout<<0;
	cout<<endl;
	int tlen=rlen+par[0].first;
	cout<<tlen+1<<endl;
	int v=0;
	for(int i=0;i<rlen;i++)
	{
		cout<<v<<" ";v=par[v].second;
	}
	for(int i=0;i<tlen-rlen;i++)
	{
		cout<<v<<" ";v=zpar[v];
	}
	cout<<v;
	return 0;
}