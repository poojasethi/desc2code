#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

#define LY(p) freopen (p".in", "r", stdin); freopen (p".out", "w", stdout)
#define N 100010
#define M 100010

bool vis[N];
int tot, h[N], x, y, z, now;
int n, m, head, tail, top, tim, d[N], q[N], num[N], ed[N], step[N];

struct edge {
	int u, v, w, n;

	edge () {}
	edge (int x, int y, int z, int t): u(x), v(y), w(z), n(t) {}
} e[M * 2];

bool cmp_pre (int i, int j) {return e[i].w > e[j].w;}

bool cmp_work (int i, int j)
{return e[i].w == e[j].w? step[ e[i].u ] < step[ e[j].u ] : e[i].w < e[j].w;}
//{return e[i].w == e[j].w? i < j : e[i].w < e[j].w;}

void link (int x, int y, int z) {e[++ tot] = edge (x, y, z, h[x]), h[x] = tot;}

void link (int o, int x) {e[x].n = h[o], h[o] = x;}

void init() {
	scanf ("%d%d", &n, &m);
	for (int i = 1; i <= m; i++)
		scanf ("%d%d%d", &x, &y, &z), link (x, y, z), link (y, x, z);
}

void pre() {
	for (int i = 0; i < n; i++) {
		tail = 0;
		for (int x = h[i]; x; x = e[x].n)
			d[++ tail] = x;
		sort (d + 1, d + 1 + tail, cmp_pre);

		h[i] = 0;
		for (int j = 1; j <= tail; j++)
			link (i, d[j]);
	}
}

void BFS (int T) {
	int o;
	head = 0, tail = 0;

	vis[T] = 1, d[++ tail] = T, num[tail] = ++ tim;
	while (head ++ < tail) {
		o = d[head];
		for (int x = h[o], y; y = e[x].v, x && e[x].w == 0; x = e[x].n)
			if (! vis[y])
				vis[y] = 1, ed[y] = x, step[y] = step[o] + 1,
					d[++ tail] = y, num[tail] = tim;
	}

	head = 0;
	while (head < tail) {
		top = ++ head;
		
		//while (num[top + 1] == num[top] && step[ d[top + 1] ] == step[ d[top] ])
		while (num[top + 1] == num[top])
			top ++;

		q[0] = 0;
		for (int i = head; i <= top; i++)
			for (int x = h[ d[i] ]; x; x = e[x].n)
				q[++ q[0]] = x;
		sort (q + 1, q + 1 + q[0], cmp_work);

		now = step[ d[top] ];
		for (int i = 1; i <= q[0]; i++) {
			if (i == 1 || e[q[i]].w != e[q[i - 1]].w)
				tim ++;
			if (! vis[ e[q[i]].v ])
				vis[ e[q[i]].v ] = 1, ed[ e[q[i]].v ] = q[i], step[ e[q[i]].v ] = now + 1,
					++ tail, d[tail] = e[q[i]].v, num[tail] = tim;
		}

		head = top;
	}
}

void print() {
	int o = 0; q[0] = 0;
	while (o != n - 1)
		q[++ q[0]] = ed[o], o = e[ ed[o] ].u;

	for (int i = q[0], fz = 0; i >= 1; i--) {
		if (e[ q[i] ].w == 0)
			if (fz || i == 1) printf ("0");
			else;
		else
			fz = 1, printf ("%d", e[ q[i] ].w);
	}
	printf ("\n%d\n", q[0] + 1);
	for (int i = 1; i <= q[0]; i++) {
		printf ("%d ", e[ q[i] ].v);
		if (i == q[0]) printf ("%d ", e[ q[i] ].u);
	}
}

int main()
{
	//LY("G");
	init();
	pre();
	BFS (n - 1);
	print();
	return 0;
}
