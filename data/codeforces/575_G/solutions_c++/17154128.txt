#include<iostream>
#include<sstream>
#include<fstream>
#include<cstring>
#include<cmath>
#include<ctime>
#include<cstdio>
#include<cstdlib>
#include<string>
#include<string.h>
#include<math.h>
#include<cassert>
#include<iomanip>
#include<utility>
#include<bitset>
#include<set>
#include<map>
#include<list>
#include<queue>
#include<deque>
#include<stack>
#include<vector>
#include<functional>
#include<algorithm>
#include<memory.h>
#include<assert.h>
#include<numeric>
#include<limits.h>
using namespace std;
const int LAR=1e9;
int n,m,dist1[100005],dist2[100005],f1[100005],f2[100005];
pair<int,int>f[100005];
set<int>s,ns;
vector<pair<int,int> >g[100005];
void bfs(int u,int dist[],int f[],bool ff)
{
	bool ok[10];
	memset(ok,false,sizeof(ok));
	if(ff)ok[0]=true;else memset(ok,true,sizeof(ok));
	fill(dist,dist+n,LAR);
	dist[u]=0;
	queue<int>q;
	q.push(u);
	while(!q.empty())
	{
		int i=q.front();
		q.pop();
		for(int j=0;j<g[i].size();j++)
		{
			pair<int,int> k=g[i][j];
			if(ok[k.second]&&dist[k.first]>dist[i]+1)
			{
				dist[k.first]=dist[i]+1;
				f[k.first]=i;
				q.push(k.first);
			}
		}
	}
}
int main()
{
	scanf("%d%d",&n,&m);
	while(m--)
	{
		int a,b,len;
		scanf("%d%d%d",&a,&b,&len);
		g[a].push_back(make_pair(b,len));
		g[b].push_back(make_pair(a,len));
	}
	bfs(n-1,dist1,f1,true);
	bfs(0,dist2,f2,false);
	int len1=LAR;
	for(int i=0;i<n;i++)
		if(i==n-1||dist1[i]<LAR)
			if(dist2[i]<len1)len1=dist2[i];
	fill(f,f+n,pair<int,int>(LAR,0));
	for(int i=0;i<n;i++)if(i==n-1||dist1[i]<LAR)
		if(dist2[i]==len1)
		{
			s.insert(i);
			f[i]=make_pair(dist1[i],i);
		}
	for(int i=0;i<len1;i++)
	{
		ns.clear();
		int digit=10;
		for(set<int>::iterator it=s.begin();it!=s.end();it++)
		{
			for(int j=0;j<g[*it].size();j++)
			{
				pair<int,int> u=g[*it][j];
				if(dist2[*it]-1!=dist2[u.first])continue;
				if(u.second<digit)
				{
					digit=u.second;
					ns.clear();
				}
				if(u.second==digit)
				{
					if(ns.find(u.first)!=ns.end())
						f[u.first]=min(f[u.first],make_pair(f[*it].first,*it));
					else
					{
						ns.insert(u.first);
						f[u.first]=make_pair(f[*it].first,*it);
					}
				}
			}
		}
		cout<<digit;
		s=ns;
	}
	if(len1==0)cout<<"0";
	cout<<endl;
	int len2=f[0].first;
	int len=len1+len2;
	cout<<len+1<<endl;
	int u=0;
	for(int i=0;i<len1;i++){cout<<u<<" ";u=f[u].second;}
	for(int i=0;i<len2;i++){cout<<u<<" ";u=f1[u];}
	cout<<u<<endl;
	return 0;
}
