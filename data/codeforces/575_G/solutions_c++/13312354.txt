#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
#define pb push_back
#define mp make_pair
typedef pair<int, int> pii;
const int MN = 1E5+10;
int n, m;
vector<pii> a[MN];
int q[MN], tr[MN], f[MN], first, last;

void enter() {
    scanf("%d %d", &n, &m);
    for(int i = 1; i <= m; ++i) {
        int x, y, c;
        scanf("%d %d %d", &x, &y, &c);
        ++x; ++y;
        ///cout << x << " " << y << " "  << c << "\n";
        a[x].pb(mp(c,y));
        a[y].pb(mp(c,x));
    }
    for(int i = 1; i <= n; ++i) sort(a[i].begin(), a[i].end());
}

void solve() {
    q[first = last = 1] = n; tr[n] = -1;
    while (first <= last) {
        int u = q[first++];
        for(int i = 0; i < (int) a[u].size(); ++i)
        {
            int v = a[u][i].second, c = a[u][i].first;
            if (!tr[v] && c == 0) tr[v] = u, q[++last] = v;
        }
    }

    queue< vector<int> > qu;
    vector<int> t;
    for(int i = 1; i <= last; ++i) t.pb(q[i]);
    qu.push(t);

    while (!qu.empty()) {
        t = qu.front(); qu.pop();
        for(int turn = 0; turn < 10; ++turn) {
            vector<int> to;
            for(int i = 0; i < (int) t.size(); ++i)
            {
                int u = t[i];
                for(int j = 0; j < (int) a[u].size(); ++j)
                {
                    int v = a[u][j].second, c = a[u][j].first;
                    ///cout << u << " " << v << " " << c << "\n";
                    if (c!=turn) continue;
                    if (!tr[v]) {
                        tr[v] = u; f[v] = turn;
                        to.pb(v);
                    }
                }
            }
            if (!to.empty()) qu.push(to);
        }
    }

    vector<int> ans, path;
    int v = 1;
    while (v != -1) {
        path.pb(v-1); ans.pb(f[v]); v = tr[v];
    }
    ans.pb(0);
    while ((int)ans.size() > 1 && ans.back() == 0) ans.pop_back();
    for(int i = (int) ans.size()-1; i >= 0; --i) printf("%d", ans[i]);
    printf("\n%d\n", (int) path.size());
    for(int i = 0; i < (int) path.size(); ++i) printf("%d ", path[i]);
}

int main() {
    //freopen("test.inp", "r", stdin);
    enter();
    solve();
}
