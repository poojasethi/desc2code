#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<iostream>
using namespace std;
const int N = 100500;
const int M = 200500;
int point[N],to[M],next[M],len[M],cc=0;
int ceng[N],dui[N],top,tail;
bool ever[N];
int xu[2][N];
int end[N],endx[N];
int pre[N],prex[N],prelen[N];
int n,m;
int getint()
{
	int res=0;
	char ch=getchar();
	while((ch<'0' || ch>'9') && ch!='-')
		ch=getchar();
	bool fan=0;
	if(ch=='-')
	{
		fan=1;
		ch=getchar();
	}
	while('0'<=ch && ch<='9')
	{
		res=res*10+ch-'0';
		ch=getchar();
	}
	if(fan)
		res=-res;
	return res;
}
void AddEdge(int x,int y,int z)
{
	cc++;
	next[cc]=point[x];
	point[x]=cc;
	to[cc]=y;
	len[cc]=z;
}
void GetData()
{
	n=getint();
	m=getint();
	while(m--)
	{
		int a=getint();
		int b=getint();
		int c=getint();
		AddEdge(a,b,c);
		AddEdge(b,a,c);
	}
}
void BFS()
{
	memset(ceng,0x3f,sizeof ceng);
	ceng[0]=0;
	ever[0]=1;
	dui[1]=0;top=0;tail=1;
	while(top<tail)
	{
		int now=dui[++top];
		int then=point[now];
		while(then)
		{
			int tox=to[then];
			if(!ever[tox])
			{
				ever[tox]=1;
				ceng[tox]=ceng[now]+1;
				dui[++tail]=tox;
			}
			then=next[then];
		}
	}
}
void FindEnd()
{
	memset(ever,0,sizeof ever);
	ever[n-1]=1;
	dui[1]=n-1;top=0;tail=1;
	end[0]=1;
	end[1]=n-1;
	while(top<tail)
	{
		int now=dui[++top];
		int then=point[now];
		while(then)
		{
			int tox=to[then];
			if(!len[then] && !ever[tox])
			{
				ever[tox]=1;
				end[++end[0]]=tox;
				endx[tox]=endx[now]+1;
				pre[tox]=now;
				prex[tox]=-1;
				prelen[tox]=prelen[now]+1;
				dui[++tail]=tox;
			}
			then=next[then];
		}
	}
}
void FindAns()
{
	int i;
	int minlen=987654321;
	for(i=1;i<=end[0];i++)
		minlen=min(minlen,ceng[end[i]]);
	int v=0;
	for(i=1;i<=end[0];i++)
	{
		if(ceng[end[i]]==minlen)
			xu[0][++xu[0][0]]=end[i];
	}
	memset(ever,0,sizeof ever);
	while(minlen)
	{
		minlen--;
		int minz=10;
		for(i=1;i<=xu[v][0];i++)
		{
			int now=xu[v][i];
			int then=point[now];
			while(then)
			{
				int tox=to[then];
				if(ceng[tox]==minlen)
					minz=min(minz,len[then]);
				then=next[then];
			}
		}
		xu[v^1][0]=0;
		for(i=1;i<=xu[v][0];i++)
		{
			int now=xu[v][i];
			int then=point[now];
			while(then)
			{
				int tox=to[then];
				if(ceng[tox]==minlen && len[then]==minz)
				{
					if(!ever[tox])
					{
						xu[v^1][++xu[v^1][0]]=tox;
						ever[tox]=1;
						pre[tox]=now;
						prex[tox]=minz;
						prelen[tox]=prelen[now]+1;
					}
					else if(prelen[tox]>prelen[now]+1)
					{
						pre[tox]=now;
						prex[tox]=minz;
						prelen[tox]=prelen[now]+1;
					}
				}
				then=next[then];
			}
		}
		v^=1;
	}
}
void PrintA(int x)
{
	if(prex[x]>=0 && x!=n-1)
	{
		PrintA(pre[x]);
		printf("%d",prex[x]);
	}
	else if(!x)
		printf("0");
}
void Print()
{
	PrintA(0);
	printf("\n");
	printf("%d\n",prelen[0]+1);
	int now=0;
	while(now!=n-1)
	{
		printf("%d ",now);
		now=pre[now];
	}
	printf("%d\n",n-1);
}
void DoIt()
{
	BFS();
	FindEnd();
	FindAns();
	Print();
}
int main()
{
	GetData();
	DoIt();
	return 0;
}
