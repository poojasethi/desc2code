#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n   200005
#define INF (1<<30)
#define For(i,a,b)  for(int i=a;i<=b;i++)

int     N,M,D,st[n],Pre[n],Dis[n],Suf[n],Aim[n],Q[n*20];
bool    V[n];

struct  Lin{int v,c,f,next;}E[n];
vector<int>G[n];

void    Link(int u,int v,int c) {
        E[++D]=(Lin){v,c,0,st[u]};  st[u]=D;
        E[++D]=(Lin){u,c,0,st[v]};  st[v]=D;
}
void    Work1() {
        For(i,1,N)  Aim[i]=INF; Aim[Q[1]=N]=0;
        for (int l=0,r=1;l<r;)  {
            int u=Q[++l];   V[u]=0;
            for (int i=st[u],v;i;i=E[i].next)
            if  (!E[i].c&&Aim[u]+1<Aim[v=E[i].v]){
                Aim[v]=Aim[u]+1;    Suf[v]=u;
                if  (!V[v]) V[Q[++r]=v]=1;
            }
        }
}
void    Work2() {
        For(i,1,N)  Dis[i]=INF; Dis[Q[1]=1]=0;
        for (int l=0,r=1;l<r;){
            int u=Q[++l];   V[u]=0;
            for (int i=st[u],v;i;i=E[i].next)
            if  (Dis[u]+1<Dis[v=E[i].v]){
                Dis[v]=Dis[u]+1;
                if  (!V[v]) V[Q[++r]=v]=1;
            }
        }
}
void    Work3(){
        V[Q[1]=1]=1;
        for (int l=0,r=1;l<r;){
            int u=Q[++l];
            for (int i=st[u],v;i;i=E[i].next)
            if  (E[i].f&&!V[v=E[i].v])  V[Q[++r]=v]=1,Pre[v]=u;
        }
}

void    Print1(int u){
        printf("%d ",u-1);
        if  (u!=N)  Print1(Suf[u]);
}
void    Print2(int u){
        if  (!u)    return; Print2(Pre[u]);
        printf("%d ",u-1);
}

int     main(){
        scanf("%d%d",&N,&M);    D=1;
        for (int i=1,u,v,c;i<=M;i++)
            scanf("%d%d%d",&u,&v,&c),Link(u+1,v+1,c);
        Work1();    Work2();

        if  (Aim[1]!=INF)   {
            printf("%d\n%d\n",0,Aim[1]+1);  Print1(1);  return  0;
        }
        int Min=1<<30;
        For(i,1,N)  if  (Aim[i]!=INF)   Min=min(Min,Dis[i]);
        For(i,1,N)  if  (Aim[i]!=INF&&Dis[i]==Min)  G[Min].push_back(i);

        int tmp=Min;
        for (;Min;Min--){
            For(c,0,9)  {
                int flag=0,S=G[Min].size()-1;
                For(d,0,S)  {
                    int u=G[Min][d];
                    for (int i=st[u],v;i;i=E[i].next)
                    if  (E[i].c==c&&Dis[v=E[i].v]+1==Dis[u])    flag=1;
                }
                if  (!flag) continue;
                For(d,0,S)  {
                    int u=G[Min][d];
                    for (int i=st[u],v;i;i=E[i].next)
                    if  (E[i].c==c&&Dis[v=E[i].v]+1==Dis[u])    E[i^1].f=1,G[Min-1].push_back(v);
                }
                printf("%d",c); break;
            }
        }
        puts("");

        Work3();    int P=0;
        For(i,1,N)  if  (Aim[i]!=INF&&Dis[i]==tmp&&V[i]&&(!P||Aim[i]<Aim[P]))   P=i;
        printf("%d\n",Aim[P]+Dis[P]+1);
        Print2(Pre[P]); Print1(P);
}