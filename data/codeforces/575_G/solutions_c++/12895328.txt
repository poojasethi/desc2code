#define X first
#define Y second

#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

typedef pair<int, int> pii;

const int MAXN = 1e5 + 1;

int n, m;
vector<pii > next[MAXN];
int dist[MAXN];
int vis[MAXN];
pii way[MAXN];
int prev[MAXN], pprev[MAXN];       
vector<int> cities, pcities, ans;

inline bool comp(int x, int y) {
    return (way[x] < way[y]);
}

int main() {
    scanf("%d %d", &n, &m);
    for(int i = 0; i < m; i++) {
        int a, b, c;
        scanf("%d %d %d", &a, &b, &c);
        next[a].push_back(make_pair(b, c));
        next[b].push_back(make_pair(a, c));
    }

    vector<int> q;
    q.push_back(n-1);
    dist[n-1] = 1;
    for(int i = 0; i < (int)q.size(); i++) {
        int v = q[i];
        for(int j = 0; j < (int)next[v].size(); j++) {
            pii u = next[v][j];
            if(!u.Y && !dist[u.X]) {
                q.push_back(u.X);
                dist[u.X] = dist[v] + 1;
                pprev[u.X] = v;
            }
        }
    }

    cities.push_back(0);
    vis[0] = 1;
    way[0] = make_pair(0, 0);
    bool finish = 0;
    int fv = 0;
    if(dist[0]) {
        finish = 1;
    }                              
    for(int t = 2; !finish; t++) { 
        pii min_way = make_pair(10, 0);   
        pcities = cities;
        sort(pcities.begin(), pcities.end(), comp);
        cities.clear();
        int group = 0;
        for(int i = 0; i < (int)pcities.size(); i++) {
            int v = pcities[i];
            if(i && way[i] != way[i-1]) group++;
            for(int j = 0; j < (int)next[v].size(); j++) {
                int u = next[v][j].X;
                int l = next[v][j].Y;
                if(!vis[u]) {
                    vis[u] = t;    
                    if(dist[u]) finish = 1;
                    way[u] = make_pair(10, 0);
                    cities.push_back(u);
                } 
                if(vis[u] == t) {
                    pii new_way = make_pair(l, group);
                    if(way[u] > new_way) {
                        way[u] = new_way;
                        prev[u] = v;
                    }
                    if(dist[u]) {
                        if(make_pair(way[u], dist[u]) < make_pair(min_way, dist[fv])) {
                            fv = u;
                            min_way = way[u];
                        }
                    }
                }   
            } 
        } 
    }
    int v = fv;
    while(v) {
        ans.push_back(v);
        v = prev[v];
    }
    for(int i = 0; i < (int)ans.size(); i++) {
        putchar(way[ans[i]].X+'0');
    }
    if(!ans.size()) putchar('0');
    printf("\n%d\n0 ", ans.size() + dist[fv]);
    for(int i = ans.size() - 1; i >= 0; i--) {
        printf("%d ", ans[i]);
    }
    while(fv != n-1) {
        fv = pprev[fv];
        printf("%d ", fv);
    }
    return 0; 
}