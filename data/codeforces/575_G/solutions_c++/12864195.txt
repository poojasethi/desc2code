#include <iostream>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <algorithm>
#include <queue>
using namespace std;
const int N=100000;

class Graph{
	int n,m;
	struct Point{
		int flag,first,v,f,w;
	}po[N+10];
	struct Line{
		int l,w,next;
	}li[N+N+10];
	struct Data{
		int i,a,b;
		Data(int _i=0,int _a=0,int _b=0){i=_i,a=_a,b=_b;}
		bool operator <(const Data &d)const{
			return a>d.a;
		}
	};
	priority_queue<Data> q;
	void Push(int j,int k,int w){
		q.push(Data(j,po[k].v*10+w,k));
	}
	void Bfs(){
		int i,j,k,s=0,t=1;
		static int lis[N+10];
		lis[0]=n-1;po[n-1].flag=1;
		while (s!=t){
			k=lis[s++];
			for (i=po[k].first;i;i=li[i].next){
				if (!po[j=li[i].l].flag){
					if (li[i].w==0) po[j].f=k,lis[t++]=j,po[j].flag=1;
					else Push(j,k,li[i].w);
				}
			}
		}
	}
public:
	void Init(int _n){n=_n;}
	void Add(int a,int b,int c){
		li[++m].next=po[a].first,po[a].first=m,li[m].l=b,li[m].w=c;
		li[++m].next=po[b].first,po[b].first=m,li[m].l=a,li[m].w=c;
	}
	void Work(){
		int i,j,k,t=0,tot=0,pre=0,tot2=0;Data tmp;
		static int lis[N+10],lis2[N+10];
		Bfs();
		while (po[0].flag==0){
			while (po[(tmp=q.top()).i].flag) q.pop();
			if (tmp.a!=pre) t++,pre=tmp.a;
			po[k=tmp.i].flag=1;
			po[k].v=t;
			po[k].f=tmp.b;
			po[k].w=tmp.a%10;
			if (k==0) break;
			for (i=po[k].first;i;i=li[i].next)
				if (!po[j=li[i].l].flag)
					Push(j,k,li[i].w);
		}k=0;
		while (k!=n-1){
			if (po[k].v!=0) lis2[tot2++]=po[k].w;
			lis[tot++]=k;
			k=po[k].f;
		}if (po[0].v==0) printf("0");
		for (i=tot2-1;i>=0;i--) printf("%d",lis2[i]);
		printf("\n%d\n",tot+1);
		for (i=0;i<tot;i++) printf("%d ",lis[i]);
		printf("%d\n",n-1);
	}
}gp;

int main(){
	int i,j,n,m,a,b,c;
	//freopen("g.in","r",stdin);
	scanf("%d%d",&n,&m);
	gp.Init(n);
	for (i=1;i<=m;i++){
		scanf("%d%d%d",&a,&b,&c);
		gp.Add(a,b,c);
	}
	gp.Work();
	return 0;
}
