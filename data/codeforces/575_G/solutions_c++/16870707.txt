#include<algorithm>
#include<bitset>
#include<cassert>
#include<cctype>
#include<cerrno>
#include<cfloat>
#include<ciso646>
#include<climits>
#include<clocale>
#include<cmath>
#include<complex>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<ctype.h>
#include<cwchar>
#include<cwctype>
#include<deque>
#include<exception>
#include<fstream>
#include<functional>
#include<iomanip>
#include<ios>
#include<iosfwd>
#include<iostream>
#include<istream>
#include<iterator>
#include<limits>
#include<list>
#include<locale>
#include<map>
#include<math.h>
#include<memory>
#include<new>
#include<numeric>
#include<ostream>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<stdexcept>
#include<stdio.h>
#include<stdlib.h>
#include<streambuf>
#include<string.h>
#include<string>
#include<typeinfo>
#include<utility>
#include<valarray>
#include<vector>
#define m_p make_pair
#define p_b push_back
#define x first
#define y second
using namespace std;
int fa[100010],tpe[100010],num[100010];
vector<pair<int,int> > adj[100010];
int main(void){
	int n,m;
	scanf("%d%d",&n,&m);
	getchar();
	int u,v,d;
	for (int i=1;i<=m;i++){
		scanf("%d%d%d",&u,&v,&d);
		adj[u].p_b(m_p(v,d));
		adj[v].p_b(m_p(u,d));
		getchar();
	}
	memset(tpe,255,sizeof(tpe));
	tpe[n-1]=0;
	fa[n-1]=n-1;
	vector<int> ed;
	queue<int> inq;
	ed.p_b(n-1);
	inq.push(n-1);
	while(!inq.empty()){
		int id=inq.front();
		inq.pop();
		for (int i=0,sz=(int)adj[id].size();i<sz;i++){
			if (adj[id][i].y==0&&tpe[adj[id][i].x]==-1){
				tpe[adj[id][i].x]=0;
				inq.push(adj[id][i].x);
				ed.p_b(adj[id][i].x);
				fa[adj[id][i].x]=id;
			}
		}
	}
	int clr=1;
	queue<vector<int> > q;
	q.push(ed);
	while(!q.empty()){
		vector<int> st=q.front(),sn,cse[10];
		q.pop();
		for (int i=0,sz=(int)st.size();i<sz;i++){
			for (int j=0,sz1=(int)adj[st[i]].size();j<sz1;j++){
				int nxt=adj[st[i]][j].x,val=adj[st[i]][j].y;
				if (tpe[nxt]==-1){
					tpe[nxt]=clr;
					num[nxt]=val;
					sn.p_b(nxt);
					fa[nxt]=st[i];
				}
				if (tpe[nxt]==clr&&num[nxt]>val){
					num[nxt]=val;
					fa[nxt]=st[i];
				}
			}
		}
		for (int i=0,sz=(int)sn.size();i<sz;i++){
			cse[num[sn[i]]].p_b(sn[i]);
		}
		for (int i=0;i<=9;i++){
			if (!cse[i].empty()) q.push(cse[i]);
		}
		clr++;
	}
	int i=0,cnt=0;
	if (tpe[i]==0) printf("%d\n",0);
	string s;
	while(tpe[i]!=0){
		s=(char)(((int)'0')+num[i])+s;
		i=fa[i];
	}
	printf("%s\n",s.c_str());
	i=fa[0];
	while(i!=n-1){
		cnt++;
		i=fa[i];
	}
	printf("%d\n",cnt+2);
	i=0;
	while(i!=n-1){
		printf("%d ",i);
		i=fa[i];
	}
	printf("%d",n-1);
	return 0;
}
/*
8 10
0 1 1
1 2 5
2 7 6
0 3 2
3 7 3
0 4 0
4 5 0
5 7 2
0 6 0
6 7 7
-----
32
3
0 3 7
*/
		  		 		  	  	 	  		 			