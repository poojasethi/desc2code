#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

const int N = 1e5 + 5;

int first[N], tot;

struct Edge {
    int y, s, nex;
}edge[N << 1];

void addedge(int x, int y, int s) {
    edge[tot] = (Edge) {y, s, first[x]};
    first[x] = tot++;
}

int bot[N], pret[N];

void bfs(int n) {
    memset(bot, -1, sizeof(bot));
    bot[n] = 0;
    queue<int> que;
    que.push(n);
    while (!que.empty()) {
        int x = que.front(); que.pop();
        for (int k = first[x]; k != -1; k = edge[k].nex)
            if (edge[k].s == 0 && bot[edge[k].y] == -1) {
                bot[edge[k].y] = bot[x] + 1;
                pret[edge[k].y] = x;
                que.push(edge[k].y);
            }
    }
}

int bos[N], pres[N], level[N];

void bfs1() {
    memset(bos, -1, sizeof(bos));
    bos[1] = 0;
    vector<int> que;
    que.push_back(1);
    level[1] = 1;
    while (!que.empty()) {
        vector<int> que1;
        int flag = 0;
        for (int i = 0; i < 10; ++i) {
            int s = 0;
            if (!que1.empty())
                s = level[que1.back()]; 
            for (int j = 0; j < que.size(); ++j) {
                int x = que[j];
                for (int k = first[x]; k != -1; k = edge[k].nex)
                    if (edge[k].s == i && bos[edge[k].y] == -1) {
                        int y = edge[k].y;
                        bos[y] = i;
                        pres[y] = x;
                        que1.push_back(y);
                        level[y] = level[x] + s;
                        if (bot[y] != -1) flag = 1;
                    }
            }
        }
        if (flag) break;
        que = que1;
    }
}

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    memset(first, -1, sizeof(first));
    tot = 0;
    for (int i = 1; i <= m; ++i) {
        int x, y, s;
        scanf("%d%d%d", &x, &y, &s);
        ++x; ++y;
        addedge(x, y, s);
        addedge(y, x, s);
    }
    bfs(n);
    bfs1();
    int p = 0;
    for (int i = 1; i <= n; ++i)
        if (bot[i] != -1 && bos[i] != -1)
            if (p == 0 || (level[i] < level[p]) ||
                (level[i] == level[p] && bot[i] < bot[p]))
                p = i;
    vector<int> ans;
    for (int x = p; x != 1; x = pres[x]) {
        ans.push_back(x);
        putchar(bos[x] + '0');
    }
    if (ans.empty()) puts("0");
    else puts("");
    ans.push_back(1);
    reverse(ans.begin(), ans.end());
    for (int x = p; x != n; x = pret[x]) {
        if (x != ans.back()) ans.push_back(x);
    }
    if (ans.back() != n) ans.push_back(n);
    printf("%d\n", (int)ans.size());
    for (int i = 0; i < ans.size(); ++i)
        printf("%d%c", ans[i] - 1, " \n"[i == ans.size() - 1]);
    
    return 0;
}
