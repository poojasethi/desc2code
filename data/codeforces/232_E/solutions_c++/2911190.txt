#include<iostream>
#include<cstdio>
#include<bitset>
using namespace std;

const int maxn = 510, maxq = 600010, maxd = 12;

char dat[maxn][maxn];
int n, m, q;
int datq[maxq][4];

bitset<maxn> reach[2][maxn][maxn];
void getreach(int left, int right, bitset<maxn> resl[][maxn], bitset<maxn> resr[][maxn])
{
	if (left > right) return;
	int mid = (left + right) / 2;
	
	for (int i = 1; i <= m; i++)
		if (dat[mid][i] == '.') resr[mid][i] = resr[mid][i - 1], resr[mid][i][i] = true;
		else resr[mid][i].reset();
	for (int i = m; i >= 1; i--)
		if (dat[mid][i] == '.') resl[mid][i] = resl[mid][i + 1], resl[mid][i][i] = true;
		else resl[mid][i].reset();
	
	if (left == right) return;
	
	for (int i = mid + 1; i <= right; i++)
		for (int j = 1; j <= m; j++)
			if (dat[i][j] == '.')
				resr[i][j] = resr[i - 1][j] | resr[i][j - 1];
			else resr[i][j].reset();
	
	for (int i = mid - 1; i >= left; i--)
		for (int j = m; j >= 1; j--)
			if (dat[i][j] == '.')
				resl[i][j] = resl[i + 1][j] | resl[i][j + 1];
			else resl[i][j].reset();
}

inline bool inrange(int x, int left, int right) {return x >= left && x <= right;}

bool ans[maxq];
void solve(int left, int right)
{
	if (left > right) return;
	getreach(left, right, reach[0], reach[1]);
	int mid = (left + right) / 2;
	for (int i = 0; i < q; i++)
		if (inrange(datq[i][0], left, mid) && inrange(datq[i][2], mid, right))
			ans[i] = (reach[0][datq[i][0]][datq[i][1]] & reach[1][datq[i][2]][datq[i][3]]).any();
	solve(left, mid - 1);
	solve(mid + 1, right);
}

void init()
{
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) scanf("%s", dat[i] + 1);
	scanf("%d", &q);
	for (int i = 0; i < q; i++) scanf("%d%d%d%d", &datq[i][0], &datq[i][1], &datq[i][2], &datq[i][3]);
}

void work()
{
	solve(1, n);
	for (int i = 0; i < q; i++) if (ans[i]) printf("Yes\n"); else printf("No\n");
}

int main()
{
	init();
	work();
	return 0;
}
