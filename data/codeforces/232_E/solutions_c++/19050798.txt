#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
#include <bitset>
using namespace std;

typedef long long ll;
typedef double lf;
typedef long double Lf;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;

#define TRACE(x) cerr << #x << "  " << x << endl
#define FOR(i, a, b) for (int i = (a); i < int(b); i++)
#define REP(i, n) FOR(i, 0, n)
#define all(x) (x).begin(), (x).end()
#define _ << " " <<

#define fi first
#define sec second
#define mp make_pair

const int MAXN = 505;
const int MAXQ = 600100;

int n, m, q, a[MAXQ], b[MAXQ], c[MAXQ], d[MAXQ];
int sol[MAXQ];

bitset <500> B[MAXN][MAXN], bt, B1[MAXN][MAXN];

char p[MAXN][MAXN];

vector <int> v1;

void solve(int l, int r, const vector <int> &v) {
	if (r < l || v.empty()) return;
	int mid = (l + r) / 2;

	REP(i, n) FOR(j, l, r + 1) {
		B[i][j].reset();
		B1[i][j].reset();
	}

	REP(i, n) {
		if (p[i][mid] == '.') {
			B[i][mid][i] = 1;
			B1[i][mid][i] = 1;
		}
		if (i && p[i][mid] == '.') B[i][mid] |= B[i-1][mid];
	}

	for (int i = n - 2; i >= 0; i--)
		if (p[i][mid] == '.') B1[i][mid] |= B1[i + 1][mid];

	FOR(j, mid + 1, r + 1) {
		REP(i, n) {
			if (p[i][j] != '.') continue;
			if (j) B[i][j] |= B[i][j - 1];
			if (i) B[i][j] |= B[i - 1][j];
		}
	}

	for (int j = mid - 1; j >= l; j--) {
		for (int i = n - 1; i >= 0; i--) {
			if (p[i][j] != '.') continue;
			if (i != n - 1) B1[i][j] |= B1[i + 1][j];
			if (j != m - 1) B1[i][j] |= B1[i][j + 1];
		}
	}
	
	vector <int> L, R, T;

	REP(i, (int)v.size()) {
		int j = v[i];
		if (b[j] > mid+1 && d[j] > mid+1) R.push_back(j);
		else if (b[j] < mid+1 && d[j] < mid+1) L.push_back(j);
		else T.push_back(j);
	}

	REP(i, (int)T.size()) {
		int j = T[i];
		a[j]--; b[j]--; c[j]--; d[j]--;
		bt.reset();
		bt = B1[a[j]][b[j]];
		bt &= B[c[j]][d[j]];
		if (bt.count()) sol[j] = 1;
	}

	solve(l, mid - 1, L);
	solve(mid + 1, r, R);
}


int main() {
	scanf("%d %d",&n,&m);
	REP(i, n) scanf("%s",p[i]);

	scanf("%d",&q);

	REP(i, q) scanf("%d %d %d %d",&a[i],&b[i],&c[i],&d[i]);

	REP(i, q) v1.push_back(i);

	solve(0, m - 1, v1);

	REP(i, q) if (sol[i]) puts("Yes"); else puts("No");

	return 0;
}
