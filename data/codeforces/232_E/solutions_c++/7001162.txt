#include <cstdio>
#include <cstring>
#include <vector>
#include <bitset>

using namespace std;

const int MaxM = 600010;

struct Node{
	int x1,y1,x2,y2,num;
	Node(){}
	Node(int _x1,int _y1,int _x2,int _y2,int _num)
		: x1(_x1),y1(_y1),x2(_x2),y2(_y2),num(_num) {}
};
vector<Node> list;
int n,m,q;
char grid[510][510];
int flag[MaxM];
bitset<510> f[510][510],g[510][510];
void solve(int l,int r,vector<Node> &list){
	if(l>r) return;
	int mid=l+r >> 1;
	for(int i=mid;i>=l;i--)
		for(int j=m;j>=1;j--){
			f[i][j]=0;
			if(grid[i][j]=='.'){
				if(i==mid) f[i][j][j]=1;
				else f[i][j]|=f[i+1][j];
				if(j<m) f[i][j]|=f[i][j+1];
			}
		}
	for(int i=mid;i<=r;i++)
		for(int j=1;j<=m;j++){
			g[i][j]=0;
			if(grid[i][j]=='.'){
				if(i==mid) g[i][j][j]=1;
				else g[i][j]|=g[i-1][j];
				if(j>1) g[i][j]|=g[i][j-1];
			}
		}
	vector<Node> l1,l2;
	for(vector<Node> :: iterator p=list.begin();p!=list.end();p++){
		if(p->x1>mid) l2.push_back(*p);
		else if(p->x2<mid) l1.push_back(*p);
		else flag[p->num]=(f[p->x1][p->y1]&g[p->x2][p->y2]).any();
	}
	solve(l,mid-1,l1);
	solve(mid+1,r,l2);
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) scanf("%s",grid[i]+1);
	scanf("%d",&q);
	for(int i=1;i<=q;i++){
		int x1,y1,x2,y2;scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
		list.push_back(Node(x1,y1,x2,y2,i));
	}
	solve(1,n,list);
	for(int i=1;i<=q;i++) puts(flag[i] ? "Yes" : "No");
	return 0;
}
