#include <cstdio>
#include <bitset>
using namespace std;

inline void R(int &x) {
	char ch = getchar(); x = 0;
	for (; ch<'0'; ch = getchar());
	for (; ch>='0'; ch=getchar()) x = x*10 + ch-'0';
}
const int N = 505;
int n, m, qn;
bool a[N][N];
bitset<N> f[N][N], g[N][N];
struct quest{
	int x1, y1, x2, y2;
	bool ans;
	inline void read() {
		R(x1); R(y1); R(x2); R(y2);
	}
} q[600005], *p[600005];
char ch[N];
void solve(int l, int r, int ql, int qr) {
	int mid = (l + r) >> 1, qm = ql, qt = ql;
	for (int j=m; j; --j)
		if (a[mid][j])
			f[mid][j] = f[mid][j+1], f[mid][j].set(j); else
			f[mid][j] = 0;
	for (int i=mid-1; i>=l; --i)
		for (int j=m; j; --j)
			f[i][j] = a[i][j] ? f[i+1][j] | f[i][j+1] : 0;
	for (int j=1; j<=m; ++j)
		if (a[mid][j])
			g[mid][j] = g[mid][j-1], g[mid][j].set(j); else
			g[mid][j] = 0;
	for (int i=mid+1; i<=r; ++i)
		for (int j=1; j<=m; ++j)
			g[i][j] = a[i][j] ? g[i-1][j] | g[i][j-1] : 0;
	quest *c;
	for (int i=ql; i<=qr; ++i) {
		c = p[i];
		if (c->x1<=mid && c->x2>=mid) c->ans = (f[c->x1][c->y1] & g[c->x2][c->y2]).any();
		if (c->x2 < mid) p[qt++] = p[qm], p[qm++] = c; else
		if (c->x1 > mid) p[qt++] = c;
	}
	if (l < mid && ql < qm) solve(l, mid-1, ql, qm-1);
	if (mid < r && qm < qt) solve(mid+1, r, qm, qt-1);
}
int main() {
	R(n); R(m);
	for (int i=1; i<=n; ++i) {
		scanf("%s", ch);
		for (int j=1; j<=m; ++j)
			a[i][j] = (ch[j-1] == '.');
	}
	R(qn);
	for (int i=1; i<=qn; ++i) {
		q[i].read();
		p[i] = &q[i];
	}
	solve(1, n, 1, qn);
	for (int i=1; i<=qn; ++i)
		puts(q[i].ans ? "Yes" : "No");
	return 0;
}