#include <bits/stdc++.h>

#define INF 1000000010
#define FO(i,a,b) for (int (i) = (a); (i) < (b); ++(i))

using namespace std;
//PAIRS:
#define mp make_pair
#define fi first
#define se second
typedef pair<int,int> pii;

/*~~~~TEMPLATE END~~~~*/

#define MAX_R 505
#define MAX_Q 600005

int R, C;
char gr[MAX_R][MAX_R];

int hR[MAX_R][MAX_R], lX[MAX_R][MAX_R], rX[MAX_R][MAX_R];

int Q;
int qX1[MAX_Q], qY1[MAX_Q], qX2[MAX_Q], qY2[MAX_Q];
bool ans[MAX_Q];
vector <int> rowQ[MAX_R];


int main() {
    scanf ("%d %d", &R, &C);
    FO (i,1,R+1) FO (p,1,C+1) scanf (" %c ", &gr[i][p]);
    FO (i,1,C+1) gr[0][i] = gr[R+1][i] = '#';
    FO (i,1,R+1) gr[i][0] = gr[i][C+1] = '#';
    FO (i,1,R+1) {
        FO (p,0,C+1) {
            if (gr[i][p] == '#') hR[i][p] = MAX_R+5;
            else {
                hR[i][p] = i;
                hR[i][p] = min (min (hR[i-1][p], hR[i][p-1]), hR[i][p]);
            }
        }
    }
    scanf ("%d", &Q);
    FO (i,0,Q) {
        scanf ("%d %d %d %d", &qY1[i], &qX1[i], &qY2[i], &qX2[i]);
        rowQ[qY2[i]].push_back (i);
    }
    FO (i,1,R+1) {
        for (int p = C+1; p > 0; p--) {
            if (gr[i][p] == '#') { rX[i][p] = 0; lX[i][p] = MAX_R+5; }
            else {
                lX[i][p] = p;
                rX[i][p] = max (p, rX[i][p+1]);
            }
        }
        for (int p = i-1; p > 0; p--) {
            for (int t = C+1; t > 0; t--) {
                if (gr[p][t] == '#') { rX[p][t] = 0; lX[p][t] = MAX_R+5; }
                else {
                    rX[p][t] = max (rX[p][t+1], rX[p+1][t]);
                    lX[p][t] = min (lX[p][t+1], lX[p+1][t]);
                }
            }
        }
        FO (p,0,rowQ[i].size()) {
            int x1 = qX1[rowQ[i][p]];
            int y1 = qY1[rowQ[i][p]];
            int x2 = qX2[rowQ[i][p]];
            int y2 = qY2[rowQ[i][p]];
            if (lX[y1][x1] <= x2 && rX[y1][x1] >= x2 && hR[y2][x2] <= y1) ans[rowQ[i][p]] = true;
        }
    }
    FO (i,0,Q) {
        if (ans[i]) printf ("Yes\n");
        else printf ("No\n");
    }
    return 0;
}
                
                
                
                
                
