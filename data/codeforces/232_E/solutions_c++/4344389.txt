#include<cstdio>
#include<cstring>
#include<bitset>
#include<queue>
#define maxn 505
using namespace std;

bitset<maxn> g[maxn][maxn],f[maxn][maxn];
char s[maxn][maxn];
int n,m;
bool ans[600010];

struct  Query{
    int id,x0,x1,y0,y1;
    void init(int _id){
        id = _id;
        scanf("%d%d%d%d", &x0, &y0, &x1, &y1 );
        x0-- , y0--, x1--, y1--;
    }
}Que[600010];

void cdq(int L , int R , queue<int> que ){
    int mid = (L+R)/2;
    queue<int> que0,queL,queR;
    while ( !que.empty() ) {
        if ( Que[que.front()].x1 < mid ) queL.push( que.front() );
        else if ( Que[que.front()].x0 > mid ) queR.push( que.front() );
        else que0.push( que.front() );
        que.pop();
    }
    if ( !queL.empty() ) cdq( L , mid-1 , queL );
    if ( !queR.empty() ) cdq( mid+1 , R , queR );
    if ( que0.empty() ) return;
    for (int i = mid; i<=R; i++ ) 
        for (int j = 0; j<m; j++ ) {
            f[i][j].reset();
            if ( s[i][j] == '.' ) {
                if ( i == mid ) f[i][j][j] = 1;
                if ( i > mid ) f[i][j] |= f[i-1][j];
                if ( j ) f[i][j] |= f[i][j-1];
            }
        }
    for (int i = mid; i>=L; i-- ) 
        for (int j = m-1; j>=0; j-- ) {
            g[i][j].reset();
            if ( s[i][j] == '.' ) {
                if ( i == mid ) g[i][j][j] = 1;
                if ( i < mid ) g[i][j] |= g[i+1][j];
                if ( j != m-1 ) g[i][j] |= g[i][j+1];
            }
        }
    while ( !que0.empty() ) {
        int tmp = que0.front(); que0.pop();
        ans[tmp] = (g[Que[tmp].x0][Que[tmp].y0]&f[Que[tmp].x1][Que[tmp].y1]).any();
    }
}
int main()
{
    scanf("%d%d", &n, &m );
    for (int i = 0; i<n; i++ ) scanf("%s", s[i] );
    int q;
    scanf("%d", &q );
    queue<int> que;
    for (int i = 0; i<q; i++ ) {
        Que[i].init(i);
        que.push(i);
    }
    cdq( 0 , n-1 , que );
    for (int i = 0; i<q; i++ ) printf(ans[i]?"Yes\n":"No\n");
    return 0;
}