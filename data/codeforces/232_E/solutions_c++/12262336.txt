#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <vector>
#include <algorithm>
#include <bitset>
using namespace std;
const int maxn = 510;
const int maxq = 610000;

struct point {
    int x, y;
};

int n, m, q, u[maxq], w;
int v[maxq], vt;
bool a[maxn][maxn];
bitset<maxn> f[maxn][maxn], g[maxn][maxn];
point s[maxq], t[maxq];

void init() {
    scanf("%d%d", &n, &m); w = (n-1) / 30 + 1;
    char ch[maxn];
    for (int i = 0; i < n; i++) {
        scanf("%s", ch);
        for (int j = 0; j < m; j++) {
            if (ch[j] == '.') a[i][j] = true; else a[i][j] = false;
        }
    }
    memset(u, 0, sizeof(u));
    scanf("%d", &q);
    for (int i = 0; i < q; i++) {
        scanf("%d%d%d%d", &s[i].x, &s[i].y, &t[i].x, &t[i].y);
        --s[i].x; --s[i].y; --t[i].x; --t[i].y;
    }
}

void solve(int l, int r, int mid) {
    vt = 0;
    for (int i = 0; i < q; i++) {
        if (u[i] != 0) continue;
        if (s[i].y <= mid && t[i].y >= mid) v[vt++] = i;
    }
    if (vt == 0) return;
    f[n-1][mid] = 0;
    if (a[n-1][mid]) f[n-1][mid][n-1] = 1;
    for (int i = n-2; i >= 0; i--) {
        if (!a[i][mid]) f[i][mid] = 0; else {
            f[i][mid] = f[i+1][mid];
            f[i][mid][i] = 1;
        }
    }
    for (int j = mid - 1; j >= l; j--) {
        if (a[n-1][j]) f[n-1][j] = f[n-1][j+1];
        for (int i = n - 2; i >= 0; i--) {
            if (!a[i][j]) continue;
            f[i][j] = f[i+1][j] | f[i][j+1];
        }
    }
    g[0][mid] = 0;
    if (a[0][mid]) g[0][mid] = 1;
    for (int i = 1; i < n; i++) {
        if (!a[i][mid]) g[i][mid] = 0; else {
            g[i][mid] = g[i-1][mid];
            g[i][mid][i] = 1;
        }
    }
    for (int j = mid + 1; j <= r; j++) {
        if (a[0][j]) g[0][j] = g[0][j-1];
        for (int i = 1; i < n; i++) {
            if (!a[i][j]) continue;
            g[i][j] = g[i-1][j] | g[i][j-1];
        }
    }
    for (int i = 0; i < vt; i++) {
        u[v[i]] = -1;
        if ((f[s[v[i]].x][s[v[i]].y] & g[t[v[i]].x][t[v[i]].y]).any()) u[v[i]] = 1;
    }
}

void BinSearch(int l, int r) {
    if (l > r) return;
    int mid = (l + r) / 2;
    solve(l, r, mid);
    BinSearch(l, mid - 1);
    BinSearch(mid + 1, r);
}

int main() {
    init();
    BinSearch(0, m - 1);
    int yes = 0, no = 0;
    for (int i = 0; i < q; i++) {
        if (u[i] == 1)
            ++yes, puts("Yes");
        else
            ++no, puts("No");
    }
    return 0;
}
