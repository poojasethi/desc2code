#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;

struct query {
	int x1, y1, x2, y2, no;
};

bitset<500> f[500][500], g[500][500];
char field[500][501];
bool ans[600000];

void solve(int l, int r, int m, vector<query> &q) {
	if (l + 1 == r) {
		for (int i = m - 1; i >= 0; i --)
			if (field[l][i] == '.') {
				g[l][i][i] = true;
				if (i < m - 1) g[l][i] |= g[l][i + 1];
			}
		for (int i = 0; i < q.size(); i ++)
			ans[q[i].no] = g[l][q[i].y1][q[i].y2];
		return;
	}
	int mid = (l + r) / 2;
	for (int i = mid; i < r; i ++)
		for (int j = 0; j < m; j ++) {
			f[i][j].reset();
			if (field[i][j] == '.') {
				if (i == mid) f[i][j][j] = true;
				if (i > mid) f[i][j] |= f[i - 1][j];
				if (j > 0) f[i][j] |= f[i][j - 1];
			}
		}
	for (int i = mid - 1; i >= l; i --)
		for (int j = m - 1; j >= 0; j --) {
			g[i][j].reset();
			if (field[i][j] == '.') {
				if (i == mid - 1) g[i][j][j] = true;
				if (i < mid - 1) g[i][j] |= g[i + 1][j];
				if (j < m - 1) g[i][j] |= g[i][j + 1];
			}
		}
	vector<query> q1, q2;
	for (int i = 0; i < q.size(); i ++) {
		if (q[i].x2 < mid) {
			q1.push_back(q[i]);
		} else if (q[i].x1 >= mid) {
			q2.push_back(q[i]);
		} else {
			bitset<500> tmp = g[q[i].x1][q[i].y1] & f[q[i].x2][q[i].y2];
			ans[q[i].no] = tmp.any();
		}
	}
	q.clear();
	solve(l, mid, m, q1);
	solve(mid, r, m, q2);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i ++) scanf("%s", field[i]);
	
	int t;
	scanf("%d", &t);
	vector<query> q(t);
	for (int i = 0; i < t; i ++) {
		scanf("%d%d%d%d", &q[i].x1, &q[i].y1, &q[i].x2, &q[i].y2);
		q[i].x1 --;
		q[i].y1 --;
		q[i].x2 --;
		q[i].y2 --;
		q[i].no = i;
	}
	
	solve(0, n, m, q);
	for (int i = 0; i < t; i ++)
		if (ans[i]) printf("Yes\n"); else printf("No\n");
	
	return 0;
}
