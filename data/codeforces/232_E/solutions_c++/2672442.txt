#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>
#include<cmath>
#include<assert.h>

#define FO(i,s,e,p) for(int i=(s);i<(e);i+=p)
#define FOD(i,s,e,p) for(int i=(s);i>(e);i-=p)


#define FOR(i,s,e) FO(i,s,e,1)
#define FORE(i,s,e) FOR(i,s,e+1)
#define FORD(i,s,e) FOD(i,s,e,1)
#define FORDE(i,s,e) FORD(i,s,e-1)

#define ALL(i,s) for(__typeof(s.begin()) i=s.begin();i!=s.end();i++)

#define MEM(tab,fill) memset(tab,fill,sizeof(tab))

#include<iostream>
#include<set>
#include<vector>
#include<string>
#include<sstream>
#include<stack>
#include<queue>
#include<algorithm>
#include<utility>
#include<bitset>
#include<map>

using namespace std;
#define ll long long
#define inf ((1<<20)-1)
#define deb(a) cout<<#a<<" "<<a<<endl
#define pb push_back
#define mp make_pair

#define llu unsigned long long
#define PI pair<int,int>
#define SZ 510
bool in[SZ][SZ];
int n,m;



bitset<SZ> wrk[10][2][SZ][SZ];



void doit(int s,int mid,int e,int pp)
{

    FORDE(i,n-1,0){
        FORDE(j,mid,s){
            if(!in[i][j]) continue;
            if(j==mid) wrk[pp][0][i][j][i]=1;

            if(j+1<=mid) wrk[pp][0][i][j]|=wrk[pp][0][i][j+1];
            if(i+1<n) wrk[pp][0][i][j]|=wrk[pp][0][i+1][j];

        }
    }

    FOR(i,0,n)
        FORE(j,mid,e){
            if(!in[i][j]) continue;
            if(j==mid) wrk[pp][1][i][j][i]=1;

            if(j-1>=mid) wrk[pp][1][i][j]|=wrk[pp][1][i][j-1];
            if(i-1>=0)   wrk[pp][1][i][j]|=wrk[pp][1][i-1][j];
    }


}

int tb[SZ][SZ];

void req(int s,int e,int dep=0)
{
    if(s>e) return;
    int mid=(s+e)>>1;
    doit(s,mid,e,dep);





    FORE(i,s,e)
    FORE(j,s,e) tb[i][j]=dep;




    req(s,mid-1,dep+1);req(mid+1,e,dep+1);

}

int main()
{
  // freopen("C:\\a","r",stdin);
   cin>>n>>m;

   FOR(i,0,n)
   FOR(j,0,m){
    char c;
    while(isspace(c=getchar()));
    in[i][j]=(c=='.');
   }

   req(0,m-1);

    int q;cin>>q;
    while(q--){


        int x1,y1,x2,y2;
        scanf("%d%d%d%d",&y1,&x1,&y2,&x2);

        x1--;x2--;y1--;y2--;


        int gv=tb[x1][x2];

        int a=0;

        if(x1>x2 || y1>y2) a=0;
        else a=(wrk[gv][0][y1][x1]&wrk[gv][1][y2][x2]).any();





        if(a) cout<<"Yes"<<endl;
        else  cout<<"No"<<endl;
    }








    return 0;
}
