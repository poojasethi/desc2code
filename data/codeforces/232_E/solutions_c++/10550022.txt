#include <bits/stdc++.h>

using namespace std;

#define F first
#define S second

#define endl '\n'

#define mp make_pair
#define pb push_back

#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

#define sol (root + root)
#define sag (root + root + 1)
#define orta ((bas + son) >> 1)

#define bit __builtin_popcount

#ifndef D
	#define dbg(x) 0
	#define dbgs(x) 0
#else
	#define dbg(x) cerr << (#x) << " --> " << (x) << endl
	#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#endif

typedef long long ll;
typedef pair < int, int > pii;

const int inf = 1e9 + 5;
const ll linf = 1e18 + 5;

const int N = 500 + 5;
const int M = 6e5 + 5;

int n, m, q, ans[M];
char a[N][N];
bitset < N > dpl[N][N], dpr[N][N];

void solve(int l, int r, vector < pair < pair < pii, pii > , int > > &v) {

	if(l > r) return;

	int mid = l + r >> 1;

	vector < pair < pair < pii, pii > , int > > left, right;

	ROF(i, n, 1) {
		dpl[i][mid].reset();
		if(a[i][mid] == '.') {
			dpl[i][mid][i] = 1;
			dpl[i][mid] |= dpl[i + 1][mid];
		}
	}

	ROF(j, mid - 1, l)
		ROF(i, n, 1)
			if(a[i][j] == '.')
				dpl[i][j] = dpl[i][j + 1] | dpl[i + 1][j];

	FOR(i, 1, n) {
		dpr[i][mid].reset();
		if(a[i][mid] == '.') {
			dpr[i][mid][i] = 1;
			dpr[i][mid] |= dpr[i - 1][mid];
		}
	}

	FOR(j, mid + 1, r)
		FOR(i, 1, n)
			if(a[i][j] == '.')
				dpr[i][j] = dpr[i][j - 1] | dpr[i - 1][j];

	foreach(it, v) {
		if(it -> F.S.S < mid) { left.pb(*it); continue; }
		if(it -> F.F.S > mid) { right.pb(*it); continue; }

		ans[it -> S] = (dpl[it -> F.F.F][it -> F.F.S] & dpr[it -> F.S.F][it -> F.S.S])._Find_first() != N;
	}

	solve(l, mid - 1, left);
	solve(mid + 1, r, right);

}

int main() {

	cin >> n >> m;

	FOR(i, 1, n)
		scanf("%s", a[i] + 1);

	cin >> q;

	vector < pair < pair < pii, pii >, int > > v;

	FOR(i, 1, q) {
		int x1, y1, x2, y2;
		scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
		v.pb(mp(mp(mp(x1, y1), mp(x2, y2)), i));
	}

	solve(1, m, v);

	FOR(i, 1, q)
		if(ans[i])
			puts("Yes");
		else
			puts("No");

	return 0;

}
