#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<bitset>
#define X first
#define Y second
#define fo(i,n) for(int i=0;i<n;i++)
#define fr(i,n) for(int i=1;i<=n;i++)
#define pb push_back

using namespace std;

typedef long long ll;

const int mod=(int)1e9+7;

const int N=510;
int n,m,Q,ans[601000];
char a[N][N];
bitset<N>f[N][N],g[N][N];

struct Que{
    int x1,y1,x2,y2,id;
};

void solve(int l,int r,vector<Que> v){
    if(l>r) return;
    int mid=l+r>>1;
    for(int i=mid;i>=l;i--)
        for(int j=m;j>=1;j--){
            f[i][j]=0;
            if(a[i][j]=='.'){
                if(i==mid) f[i][j][j]=1;
                else f[i][j]|=f[i+1][j];
                if(j!=m) f[i][j]|=f[i][j+1];
            }
        }
    for(int i=mid;i<=r;i++)
        for(int j=1;j<=m;j++){
            g[i][j]=0;
            if(a[i][j]=='.'){
                if(i==mid) g[i][j][j]=1;
                else g[i][j]|=g[i-1][j];
                if(j!=1) g[i][j]|=g[i][j-1];
            }
        }
    int sz=v.size();
    vector<Que>v1,v2;
    fo(i,sz){
        if(v[i].x2<mid) v1.pb(v[i]);
        if(v[i].x1>mid) v2.pb(v[i]);
        if(v[i].x1<=mid&&v[i].x2>=mid) ans[v[i].id]=(f[v[i].x1][v[i].y1]&g[v[i].x2][v[i].y2]).any();
    }
    solve(l,mid-1,v1);
    solve(mid+1,r,v2);
    return;
}

int main(){
    scanf("%d%d",&n,&m);
    fr(i,n)
        scanf("%s",a[i]+1);
    vector<Que>v;
    scanf("%d",&Q);
    fr(i,Q){
        Que q;
        scanf("%d%d%d%d",&q.x1,&q.y1,&q.x2,&q.y2),q.id=i;
        v.pb(q);
    }
    solve(1,n,v);
    fr(i,Q)
        puts(ans[i]?"Yes":"No");
    return 0;
}
