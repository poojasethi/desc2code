#include<stdio.h>
#include<vector>
#include<bitset>
#include<algorithm>

#define maxdim 505
#define maxqueries 600005

using namespace std;

int n,m,q;
int sol[maxqueries];
char A[maxdim][maxdim];
bitset<501>D[maxdim][maxdim],aux,mst[maxdim],mdr[maxdim];

struct query{
	int x1,y1;
	int x2,y2;
	int ind;
}Q[maxqueries];

void solve ( int st , int dr ){
	
	int middle = (st+dr)>>1;
	
	for ( int i = n ; i >= 1 ; --i ){
		D[i][middle].reset();
		mst[i].reset();
		if ( A[i][middle] == '.' ){
			D[i][middle][i] = 1;
			D[i][middle] |= D[i+1][middle];
			mst[i][i] = 1;
			mst[i] |= mst[i+1];
		}
	}
	
	for ( int j = middle-1 ; j >= st ; --j ){
		for ( int i = n ; i >= 1 ; --i ){
			D[i][j].reset();
			if ( A[i][j] == '.' ){
				D[i][j] |= D[i+1][j];
				D[i][j] |= D[i][j+1];
			}
		}
	}
	
	for ( int i = 1 ; i <= n ; ++i ){
		D[i][middle].reset();
		mdr[i].reset();
		if ( A[i][middle] == '.' ){
			D[i][middle][i] = 1;
			D[i][middle] |= D[i-1][middle];
			mdr[i][i] = 1;
			mdr[i] |= mdr[i-1];
		}
	}
	
	for ( int j = middle+1 ; j <= dr ; ++j ){
		for ( int i = 1 ; i <= n ; ++i ){
			D[i][j].reset();
			if ( A[i][j] == '.' ){
				D[i][j] |= D[i-1][j];
				D[i][j] |= D[i][j-1];
			}
		}
	}
	
	for ( int i = 1 ; i <= q ; ++i ){
		if ( Q[i].y1 <= middle && middle <= Q[i].y2 ){
			if ( Q[i].y1 != middle )
				aux = D[Q[i].x1][Q[i].y1];
			else
				aux = mst[Q[i].x1];
			if ( Q[i].y2 != middle )
				aux &= D[Q[i].x2][Q[i].y2];
			else
				aux &= mdr[Q[i].x2];
			
			if ( aux.any() ){
				sol[Q[i].ind] = 1;
			}
			
			swap(Q[i],Q[q--]);
			--i;
		}
	}
	
	if ( st != dr ){
		solve(st,middle);
		solve(middle+1,dr);
	}
}

int main () {
	
	#ifndef ONLINE_JUDGE
	freopen("a.in","r",stdin);
	freopen("a.out","w",stdout);
	#endif
	
	scanf("%d %d",&n,&m);
	for ( int i = 1 ; i <= n ; ++i ){
		scanf("%s",A[i]+1);
	}
	scanf("%d",&q);
	for ( int i = 1 ; i <= q ; ++i ){
		scanf("%d %d %d %d",&Q[i].x1,&Q[i].y1,&Q[i].x2,&Q[i].y2);
		Q[i].ind = i;
	}
	
	int actual_q = q;
	solve(1,m);
	
	for ( int i = 1 ; i <= actual_q ; ++i ){
		if ( sol[i] ){
			printf("Yes\n");
		}
		else{
			printf("No\n");
		}
	}
	
	return 0;
}
