#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 5e5 + 5;

char C[N];
int X[N], Y[N];
int n, m;
int sz1[N], sz2[N], in[N], last[N];
ll add[N], del[N], ans[N];
vector < ii > q[N], dads1[N], dads2[N];
vector < int > gr1[N], gr2[N];

ll get(int x) {
    ll sum = 0;
    foreach(it, dads1[x]) {
        int u = it -> second;
        sum += add[u];
    }
    return sum;
}

int main () {
    
    scanf("%d %d", &n, &m);
    
    for(int i = 1; i <= n; i++) {
        in[i] = 0;
        sz1[i] = 1;
        sz2[i] = 1;
        gr1[i].push_back(i);
        gr2[i].push_back(i);
        dads1[i].push_back({0, i});
        dads2[i].push_back({0, i});
    }
    
    for(int i = 1; i <= m; i++) {
        scanf(" %c %d", C + i, X + i);
        if(C[i] == 'U' or C[i] == 'M')
            scanf("%d", Y + i);
    }
    
    for(int i = 1; i <= m; i++) {
        char c = C[i];
        int x = X[i];
        int y = Y[i];
        if(c == 'M') {
            x = dads2[x].back().second;
            y = dads2[y].back().second;
            //printf("x = %d y = %d\n", x, y);
            if(sz2[y] > sz2[x])
                swap(x, y);
            foreach(it, gr2[y]) {
                int u = *it;
                gr2[x].push_back(u);
                dads2[u].push_back({i, x});
            }
            sz2[x] += sz2[y];
        }
        else if(c == 'Z') {
            x = dads2[x].back().second;
            last[x] = i;
        }
        else if(c == 'Q') {
            int my_time = 0;
            foreach(it, dads2[x]) {
                int t = it -> first;
                int u = it -> second;
                if(last[u] > t)
                    my_time = max(my_time, last[u]);
            }
            if(my_time > 0) {
                q[my_time].push_back({x, i});
            }
            //printf("i = %d my_time = %d\n", i, my_time);
        }
    }
    
    for(int i = 1; i <= m; i++) {
        char c = C[i];
        int x = X[i];
        int y = Y[i];
        if(c == 'U') {
            x = dads1[x].back().second;
            y = dads1[y].back().second;
            //printf("turn -> x = %d y = %d\n", x, y);
            if(sz1[y] > sz1[x])
                swap(x, y);
            foreach(it, gr1[y]) {
                int u = *it;
                del[u] += add[x];
                gr1[x].push_back(u);
                dads1[u].push_back({i, x});
            }
            sz1[x] += sz1[y];
        }
        else if(c == 'A') {
            x = dads1[x].back().second;
            add[x] += sz1[x];
        }
        else if(c == 'Q') {
            ans[i] += get(x) - del[x];
            printf("%lld\n", ans[i]);
        }
        foreach(it, q[i]) {
            int x = it -> first;
            int t = it -> second;
            ans[t] -= get(x) - del[x];
        }
    }
    
    return 0;
    
}
