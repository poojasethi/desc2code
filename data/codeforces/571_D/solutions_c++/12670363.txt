#include <bits/stdc++.h>
using namespace std;
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define type(x) __typeof(x.begin())
#define pb push_back
#define mp make_pair
#define nd second
#define st first
typedef pair < int , long long > pii;
typedef long long ll;
const int N = 5e5+5;
int n, m, q, c, x, y, z, root[N], root2[N], emp[N];
vector< int > uni[N], mil[N];
vector< pii > v[N], bel[N], bel2[N];
int findset(int x) { return root[x] = (root[x] == x ? x : findset(root[x])); }
int findset2(int x) { return root2[x] = (root2[x] == x ? x : findset2(root2[x])); }
int main() {
    scanf("%d %d",&n,&q);
    FOR(i, 1, n) {
        root[i] = root2[i] = i;
        uni[i].pb(i);
        mil[i].pb(i);
        bel[i].pb(mp(i,0));
        bel2[i].pb(mp(i,0));
        v[i].pb(mp(0,0));
    }
    FOR(i, 1, q) {
        scanf(" %c %d",&c,&x);
        if(c == 'U') {
            scanf("%d",&y);
            x = findset(x), y = findset(y);
            if(uni[x].size() < uni[y].size()) swap(x, y);
            root[y] = x;
            while(uni[y].size()) {
                uni[x].pb(uni[y].back());
                bel[uni[y].back()].pb(mp(x,i));
                uni[y].pop_back();
            }
        }
        if(c == 'M') {
            scanf("%d",&y);
            x = findset2(x), y = findset2(y);
            if(mil[x].size() < mil[y].size()) swap(x, y);
            root2[y] = x;
            while(mil[y].size()) {
                mil[x].pb(mil[y].back());
                bel2[mil[y].back()].pb(mp(x,i));
                mil[y].pop_back();
            }
        }
        if(c == 'A') {
            x = findset(x);
            v[x].pb(mp(i, v[x].back().nd+(int)uni[x].size()));
        }
        if(c == 'Z') {
            emp[findset2(x)] = i;
        }
        if(c == 'Q') {
            int last = 0;
            foreach(it,bel2[x]) {
                if(emp[it->st] > it->nd)
                    last = max(last, emp[it->st]);
            }
            ll ans = 0;
            foreach(it, bel[x]) {
               int tt = max((ll)last, it->nd);
               ans += v[it->st].back().nd;
               if(tt) ans -= (lower_bound(v[it->st].begin(), v[it->st].end(), mp(tt,0LL))-1)->nd;
            }
            printf("%lld\n",ans);
        }
    }
}

