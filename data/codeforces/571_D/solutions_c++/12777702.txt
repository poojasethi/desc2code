#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstdio>
using namespace std;
const int maxn=6e5;
vector<int> ux[maxn],mx[maxn];
vector<pair<int,long long> > add[maxn];
long long sm[maxn],ans[maxn];
int dl[maxn],n,m,x,y,uf[maxn],mf[maxn],lastchange[maxn];
char c;
void update(int x, int ii) {
    int rt=mf[x];
    int l=max(dl[rt],lastchange[x]);
    if (l==dl[rt]) ans[x]=0;
    rt=uf[x];
    int k=lower_bound(add[rt].begin(),add[rt].end(),make_pair(l,1ll*0))-add[rt].begin();
    if (k!=0) k--;
    ans[x]+=add[rt][add[rt].size()-1].second-add[rt][k].second;
    lastchange[x]=ii;
}
int main() {
    scanf("%d%d",&n,&m);
    for (int i=1;i<=n;i++) {
        uf[i]=i;
        mf[i]=i;
        ux[i].push_back(i);
        mx[i].push_back(i);
        add[i].push_back(make_pair(0,0));

    }
    for (int ii=1;ii<=m;ii++) {
        scanf("%c",&c);
        scanf("%c",&c);
        if (c=='U') {
            scanf("%d%d",&x,&y);
            x=uf[x];
            y=uf[y];
            if (ux[x].size()<ux[y].size()) swap(x,y);
            for (int i=0;i<ux[y].size();i++) update(ux[y][i],ii);
            for (int i=0;i<ux[y].size();i++) {
                ux[x].push_back(ux[y][i]);
                uf[ux[y][i]]=x;
            }
        }
        if (c=='M') {
            scanf("%d%d",&x,&y);
            x=mf[x];
            y=mf[y];
            if (mx[x].size()<mx[y].size()) swap(x,y);
            for (int i=0;i<mx[y].size();i++) update(mx[y][i],ii);
            for (int i=0;i<mx[y].size();i++) {
                mx[x].push_back(mx[y][i]);
                mf[mx[y][i]]=x;
            }
        }
        if (c=='A') {
            scanf("%d",&x);
            x=uf[x];
            add[x].push_back(make_pair(ii,sm[x]+ux[x].size()));
            sm[x]+=ux[x].size();
        }
        if (c=='Z') {
            scanf("%d",&x);
            x=mf[x];
            dl[x]=ii;
        }
        if (c=='Q') {
            scanf("%d",&x);
            update(x,ii);
            printf("%I64d\n",ans[x]);
        }
    }
    return 0;
}
