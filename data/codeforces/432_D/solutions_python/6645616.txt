def c_z(text):
	i = 1
	L = R = 0
	n = len(text)
	z = [0]*n
	z[0] = n
	while (i < n):
		if i > R:
			L = R = i
			while (R<n and (text[R-L] == text[R] )): R+=1
			z[i] = R-L
			R -= 1
		else:
			k = i-L
			if (z[k] < R-i+1):
				z[i] = z[k]
			else:
				L = i
				while (R<n and (text[R-L] == text[R])): R+=1
				z[i] = R-L
				R -= 1
		i += 1
	return z


def solve(text, zfunc):
	n = len(text)
	occ = [0]*(n+1)
	eq = []
	i=0
	#print zfunc
	while i<n:
		occ[ zfunc[i] ] +=1
		i += 1
	#print occ
	i = n - 1
	while i>=0:
		occ[i] += occ[i+1]
		i -= 1
	#print occ
	i = 0
	while i<n:
		if zfunc[i] == n - i:
			#print i, zfunc[i]
			eq.extend( [ [zfunc[i], occ[ zfunc[i]  ] ] ] )
		i+=1
	#print 'unsorted ',eq
	eq.sort(key=lambda x: int(x[0]))
	print len(eq)
	for item in eq:
		print item[0], item[1]


if __name__ == '__main__':
	text = str( raw_input() )

	solve(text, c_z(text))