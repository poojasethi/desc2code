

def compute_prefix_function(P): 
    m = len(P) 
    f = [0] * (m) 
    k = 0 
    for q in range(2, m): 
        while k > 0 and P[k+1] != P[q]: 
            k = f[k] 
        
        if P[k+1] == P[q]: 
            k += 1 

        f[q] = k 

    return f 

def get_length_cnt(f): 
    m = len(f) - 1 
    a = [0 for _ in range(m+1)] 

    for i in range(m, 0, -1): 
        a[f[i]] += 1 

    for i in range(m, 0, -1): 
        a[f[i]] += a[i] 

    return a 

if __name__ == '__main__': 
    # padding a char, index starts with 1. 
    pattern = '_' + raw_input() 
    m = len(pattern) - 1 
    f = compute_prefix_function(pattern) 
    cnt_map = get_length_cnt(f) 

    results = [(m, 1)] 
    i = m 
    while f[i] != 0: 
        results += [(f[i], cnt_map[f[i]] + 1)] 
        i = f[i] 

    print len(results) 
    print '\n'.join(map(lambda tup: ' '.join(map(str, tup)), results[::-1])) 
