#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

typedef long long ll;

const int inf = 0x3f3f3f3f;
const int N = 300010;

#define pb push_back
#define sz(x) ((x).size())

int n, m;

struct Data{
	int x, id;
	bool operator < (const Data &O) const{
		return x < O.x;
	}
}da[N];

vector<int> vt[N], ans;
int d[N];

int main()
{
	scanf("%d%d", &n, &m);
	int c = m;
	for(int k = 0; k < n; k++){
		c++;
		for(int j = 0; j < m; j++)
			scanf("%d", &da[j].x), da[j].id = j;
		sort(da, da + m);
		for(int i = 0, j = 0; i < m; i = j){
			while(j < m && da[j].x == da[i].x) j++;
			if(da[i].x == -1) continue;
			c++;
			for(int l = i; l < j; l++){
				vt[da[l].id].pb(c);
				d[c]++;
				vt[c - 1].pb(da[l].id);
				d[da[l].id]++;
			}
		}
	}
	queue<int> que;
	for(int i = 0; i <= c; i++){
		if(d[i] == 0) que.push(i);
	}
	while(que.size()){
		int u = que.front();
		que.pop();
		if(u < m) ans.pb(u);
		for(int i = 0; i < sz(vt[u]); i++){
			int v = vt[u][i];
			d[v]--;
			if(d[v] == 0) que.push(v);
		}
	}
	if(ans.size() != m) cout << -1 << "\n";
	else{
		for(int i = 0; i < sz(ans); i++)
			cout << ans[i] + 1 << " ";
		cout << endl;
	}
    return 0;
}