#include<cstdio>
#include<algorithm>
#include<vector>
#include<queue>
#define MAXN 100010

using namespace std;

vector<int> g[MAXN << 1], topo;
vector< pair<int, int> > in;
int n, m, in_deg[MAXN << 1];
queue<int> qu;

int main()
{
	scanf("%d %d", &n, &m);
	int cnt = 0;
	for(int i = 0; i < n; i++)
	{
		in.clear();
		for(int j = 1; j <= m; j++)
		{
			int t;
			scanf("%d", &t);
			in.push_back(make_pair(t, j));
		}
		sort(in.begin(), in.end());
		for(int j = 0; j < m; j++)
			if(in[j].first != -1)
			{
				if(j == 0 || in[j].first != in[j - 1].first)
					cnt++;
				g[in[j].second].push_back(m + cnt + 1);
				g[m + cnt].push_back(in[j].second);	
			}
		cnt++;
	}
	for(int i = 1; i < m + cnt + 1; i++)
		for(vector<int>::iterator v = g[i].begin(); v != g[i].end(); v++)
			in_deg[*v]++;
	for(int i = 1; i < m + cnt; i++)
		if(in_deg[i] == 0)
			qu.push(i);
	while(qu.size())
	{
		int u = qu.front();
		qu.pop();
		if(u <= m)
			topo.push_back(u);
		for(vector<int>::iterator v = g[u].begin(); v != g[u].end(); v++)
			if(--in_deg[*v] == 0)
				qu.push(*v);
	}
	if(topo.size() < m)
		return puts("-1"), 0;
	for(int i = 0; i < m; i++)
		printf("%d%c", topo[i], i < m - 1 ? ' ': '\n');
}


