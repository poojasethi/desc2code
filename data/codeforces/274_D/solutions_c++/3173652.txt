#include <algorithm>
#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;
#define F first
#define S second
const int MAXN=2*1000*100+10;
typedef pair<int,int> P;
int n,m;
P a[MAXN];
vector <int> A[MAXN];
bool mark[MAXN];
int what[MAXN],topo[MAXN],siz;
void dfs(int v)
{
	mark[v]=1;
	for(int i=0;i<A[v].size();i++)
		if(!mark[A[v][i]])
			dfs(A[v][i]);
	what[v]=siz;
	topo[siz++]=v;
}
int main()
{
	cin >> n >> m;
	int end=m;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			scanf("%d",&a[j].F);
			a[j].S=j;
		}
		sort(a,a+m);
		int last=-1;
		for(int j=0;j<m;j++)
			if(a[j].F>=0)
			{
				int k=j;
				while(k<m&&a[k].F==a[j].F)
				{
					if(last!=-1)
						A[last].push_back(a[k].S);
					A[a[k].S].push_back(end);
					k++;
				}
				j=k-1;
				last=end++;
			}
	}
	for(int i=0;i<end;i++)
		if(!mark[i])
			dfs(i);
	int u;
	for(int i=0;i<end;i++)
		for(int j=0;j<A[i].size();j++)
		{
			u=A[i][j];
			if(what[i]<what[u])
			{
				cout << "-1\n";
				return 0;
			}
		}
	for(int i=end-1;i>=0;i--)
		if(topo[i]<m)
			cout << topo[i]+1 << " ";
	cout << endl;
	return 0;
}
