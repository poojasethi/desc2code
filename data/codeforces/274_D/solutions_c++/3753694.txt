#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

const int N = 1e5+5;
vector<int> srt[N], a[N], sol;
int INDEX, u[N];
int start[N], n;

bool cmp(int x, int y) {
	return a[INDEX][x] < a[INDEX][y];
}

void dfs(int x) {
	u[x] = 1;
	for(int i=0;i<n;i++) {
		if(a[i][x] == -1) continue;
		for(int j=start[i];j<SZ(srt[i]) && a[i][srt[i][j]]<a[i][x];j++,start[i]++)
			if(!u[srt[i][j]])
				dfs(srt[i][j]);
	}
	sol.push_back(x);
}

int main(void) {
	int m;
	scanf("%d%d", &n, &m);
	for(int i=0;i<n;i++) for(int j=0;j<m;j++) {
		int x;
		scanf("%d", &x);
		a[i].push_back(x);
		if(x>=0) srt[i].push_back(j);
	}
	for(int i=0;i<n;i++) {
		INDEX = i;
		sort(srt[i].begin(), srt[i].end(), cmp);
	}
	for(int i=0;i<m;i++)
		if(u[i] == 0)
			dfs(i);
	for(int i=0;i<n;i++) {
		int last=-1;
		for(int j=0;j<m;j++) {
			if(a[i][sol[j]] == -1) continue;
			if(a[i][sol[j]] < last) { puts("-1"); return 0; }
			last = a[i][sol[j]];
		}
	}
	for(int i=0;i<m;i++)
		printf("%d ", sol[i]+1);
	return 0;
}
