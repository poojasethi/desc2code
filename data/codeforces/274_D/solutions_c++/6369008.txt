#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm> 

using namespace std;

const int MAX_N = 100001;

int n, m;
int ans[MAX_N];
int degree[MAX_N << 1];
struct node {
	int v, id;
	bool operator < (const node &rhs) const {
		return v < rhs.v;
	}
} a[MAX_N];
queue<int> q;
vector<int> edge[MAX_N << 1];

void addedge(int u, int v) {
	++degree[v];
	edge[u].push_back(v);
} 

int main() {
	scanf("%d%d", &n, &m);
	int cnt = 0;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			scanf("%d", &a[j].v);
			a[j].id = j;
		}
		sort(a, a + m);
		for (int j = 0; j < m; ++j) {
			if (a[j].v == -1) continue;
			if (j == 0 || j > 0 && a[j].v != a[j - 1].v) ++cnt;
			addedge(a[j].id, m + cnt + 1);
			addedge(m + cnt, a[j].id);
		}
		++cnt;
	}
	
	for (int i = 0; i < m + cnt; ++i) {
		if (degree[i] == 0) q.push(i);
	}
	int x = 0;
	while (!q.empty()) {
		int u = q.front(); q.pop();
		if (u < m) ans[x++] = u;
		for (int i = 0; i < edge[u].size(); ++i) {
			int v = edge[u][i];
			if (--degree[v] == 0) q.push(v);
		}
	}
	if (x < m) puts("-1");
	else {
		for (int i = 0; i < m; ++i) {
			printf("%d ", ans[i] + 1);
		}
	}
	return 0;
} 
			 		    	   			  		     	