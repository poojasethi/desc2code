#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<algorithm>
#include<vector>
#include<math.h>
#include<queue>
#include<set>
#include<map>
using namespace std;
typedef long long ll;

const int inf=1<<29;

#define N 100010

vector<int> e[N*3];
int a[N],p[N];

int cmp(int x,int y)
{
	return a[x]<a[y];
}

int cnt[N*3];
vector<int> ans;
int TopoOrder(int n) {
	int i, top = -1;
	for (i = 1; i <= n; ++i)
		if (cnt[i] == 0) {
			cnt[i] = top;
			top = i;
		}
	for (i = 1; i <= n; ++i)
		if (top == -1) {
			return 0;
		} else {
			int j = top;
			top = cnt[top];
			ans.push_back(j);
			for (int k = 0; k < (int)e[j].size(); ++k)
				if ((--cnt[e[j][k]]) == 0) {
					cnt[e[j][k]] = top;
					top = e[j][k];
				}
		}
	return 1;
}

int main() {

	int n,m,t;
	scanf("%d%d",&n,&m);
	t=m;
	for(int i=0;i<n;i++){
		for(int j=1;j<=m;j++){
			scanf("%d",&a[j]);
			p[j]=j;
		}
		sort(p+1,p+m+1,cmp);
		int j=1;
		while(j<=m&&a[p[j]]==-1) j++;
		for(t++;j<=m;t++){
			int k=j;
			while(k<=m&&a[p[k]]==a[p[j]]){
				e[t].push_back(p[k]);
				cnt[p[k]]++;
				e[p[k]].push_back(t+1);
				cnt[t+1]++;
				k++;
			}
			j=k;
		}
	}

	if(!TopoOrder(t)) printf("-1\n");
	else{
		for(int i=0;i<(int)ans.size();i++){
			if(ans[i]<=m) printf("%d ",ans[i]);
		}
	}

}
