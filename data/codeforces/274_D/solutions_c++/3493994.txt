#include<queue>
#include<vector>
#include<iostream>
#include<algorithm>
using namespace std;
const int maxn = 100010;
struct node {
    int num , id;
    bool operator < (const node&cmp) const {
        return num < cmp.num;
    }
}in[maxn];
vector<int> edge[maxn*2];
int ind[maxn*2];
int main()
{
    int n , m , k = 0;
    cin >> n >> m;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            cin>>in[j].num;
            in[j].id = j;
        }
        sort(in,in+m);
        for(int j= 0; j < m; j++) if(in[j].num!=-1)
        {
            if(j==0 || in[j].num!=in[j-1].num) k++;
            edge[in[j].id].push_back(m+k);
            edge[m+k-1].push_back(in[j].id);
        }
        k++;
    }
    for(int i = 0; i < m+k; i++) for(int j = 0; j < edge[i].size(); j++) ++ind[edge[i][j]];
    queue<int> Q; vector<int> ans;
    for(int i = 0; i < m+k; i++) if(ind[i]==0) Q.push(i);
    while(!Q.empty())
    {
        int fr = Q.front(); Q.pop();
        if(fr < m) ans.push_back(fr);
        for(int i=0;i<edge[fr].size();i++) if((--ind[edge[fr][i]])==0) Q.push(edge[fr][i]);
    }
    if(ans.size()==m)
    {
        for(int i = 0; i < ans.size(); i++) cout<<ans[i]+1<<" ";
    }
    else cout<<"-1";
    return 0;
}
