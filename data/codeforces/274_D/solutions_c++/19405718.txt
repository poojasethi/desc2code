#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
#include<set> 
using namespace std;
int n,m;
vector<pair<int,int> >a[100001];
vector<int>v[100001];
int f[100001];
bool vis[100001];
vector<int>ans;
priority_queue<int>q;
int main()
{
	cin>>n>>m;
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=m;j++)
		{
			int x;
			cin>>x;
			a[i].push_back(make_pair(x,j-1));
		}
	}
	if(n==1)
	{
		sort(a[1].begin(),a[1].end());
		for(int i=0;i<m;i++)cout<<a[1][i].second+1<<" ";
		return 0;
	}
	for(int i=1;i<=n;i++)
	{
		sort(a[i].begin(),a[i].end());
	}
	for(int i=1;i<=n;i++)
	{
		for(int j=0;j<m-1;j++)
		{
			for(int k=j+1;k<m;k++)
			{
				if(a[i][j].first!=-1 && a[i][k].first!=-1)
				{
					if(a[i][j].first<a[i][k].first)
					{
						v[a[i][j].second].push_back(a[i][k].second);
						f[a[i][k].second]++;
					}
				}
			}
		}
	}
	for(int i=0;i<m;i++)
	{
		if(f[i]==0)
		{
			q.push(-i);
			vis[i]=true;
		}
	}
	while(!q.empty())
	{
		int x=-q.top();
		ans.push_back(x+1);
		q.pop();
		for(int i=0;i<v[x].size();i++)
		{
			if(!vis[v[x][i]])
			{
				f[v[x][i]]--;
				if(f[v[x][i]]==0)
				{
					vis[v[x][i]]=true;
					q.push(-v[x][i]);
				}
			}
		}
	}
	if(ans.size()!=m)
	{
		cout<<-1;
		return 0; 
	}
	for(int i=0;i<ans.size();i++)cout<<ans[i]<<" "; 
	return 0;
} 
 		  	  	 	   		   		   					