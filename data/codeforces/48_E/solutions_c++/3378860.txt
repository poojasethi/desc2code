#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

#define WIN 0
#define LOSE node

const int maxn		=	205;
const int maxnode	=	maxn*maxn;

vector<int> adj[maxnode];
int hh[maxn],ht[maxn],tt[maxn],th[maxn],dist[maxnode];
int node,id[maxn][maxn];

inline void add(int a,int b)
{
//printf("add: %d -> %d\n",a,b);
	adj[a].push_back(b);
}

inline bool bfs(int s)
{
	queue<int> q;
	q.push(s);
	dist[s]=0;
	while (q.size()){
		int u=q.front();
		q.pop();
		for (int i=0;i<adj[u].size();++i){
			int v=adj[u][i];
			if (dist[v]==-1){
				dist[v]=dist[u]+1;
				q.push(v);
			}
		}
	}
	
	return dist[WIN]!=-1;
}

bool instack[maxnode];

inline bool dfs(int u)
{
	dist[u]=1;
	instack[u]=true;
	for (int i=0;i<adj[u].size();++i){
		int v=adj[u][i];
		if (instack[v]){
			return true;
		}
		if (dist[v]==-1 && dfs(v)){
			return true;
		}
	}
	instack[u]=false;
	return false;
}

inline int solve(int u)
{
	if (u==LOSE){
		return 0;
	}
	int &res=dist[u];
	if (res!=-1){
		return res;
	}
	res=0;
	for (int i=0;i<adj[u].size();++i){
		int v=adj[u][i];
		res=max(res,solve(v)+1);
	}
	return res;
}

int main()
{
	int h,t,R,n,m;
	scanf("%d%d%d",&h,&t,&R);
	scanf("%d",&n);
	for (int i=1;i<=n;++i){
		scanf("%d%d",&hh[i],&ht[i]);
	}
	scanf("%d",&m);
	for (int i=1;i<=m;++i){
		scanf("%d%d",&th[i],&tt[i]);
	}
	
	node=0;
	for (int a=0;a<=R;++a){
		for (int b=0;a+b<=R;++b){
			id[a][b]=node++;
		}
	}
//printf("node = %d\n",node);
	for (int a=0;a<=R;++a){
		for (int b=0;a+b<=R;++b){
			for (int i=1;i<=n && i<=a;++i){
				int na=a-i+hh[i],nb=b+ht[i];
				int next;
				if (na+nb>R){
					next=LOSE;
				}else if (na+nb==0){
					next=WIN;
				}else{
					next=id[na][nb];
				}
				
				add(id[a][b],next);
			}
			
			for (int i=1;i<=m && i<=b;++i){
				int na=a+th[i],nb=b-i+tt[i];
				int next;
				if (na+nb>R){
					next=LOSE;
				}else if (na+nb==0){
					next=WIN;
				}else{
					next=id[na][nb];
				}
				
				add(id[a][b],next);
			}
		}
	}
//printf("build up\n");
//puts("start bfs");
	memset(dist,-1,sizeof(dist));
	if (bfs(id[h][t])){
		puts("Ivan");
		printf("%d\n",dist[WIN]);
		return 0;
	}
//printf("start dfs: %d\n",id[h][t]);
	memset(dist,-1,sizeof(dist));
	if (dfs(id[h][t])){
		puts("Draw");
		return 0;
	}
//puts("start dp");
	memset(dist,-1,sizeof(dist));
	puts("Zmey");
	printf("%d\n",solve(id[h][t]));
	
	return 0;
}

 	 		   		 	  	   						  	