#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;
#define REP(i,a,b) for(i=a;i<b;i++)
#define PB push_back

queue< int > q;
int dfn[41000],low[41000],stk[41000],vis[41000],D[41000],a[210],b[210],c[210],d[210],num[210][210];
int sign,tt,top,n,m,H,T,R;
vector< int > e[41000];

bool dfs(int u){
        int i,v;
        dfn[u]=low[u]=++sign;
        stk[++top]=u;vis[u]=1;
        REP(i,0,e[u].size()){
                v=e[u][i];
                if (v==u) return 1;
                if (!dfn[v]){
                        if (dfs(v)) return 1;
                        low[u]=min(low[u],low[v]);
                }else if (vis[v]) low[u]=min(low[u],dfn[v]);
        }
        if (dfn[u]==low[u]){
                if (stk[top]!=u) return 1;
                while (stk[top]!=u) vis[stk[top--]]=0;
                vis[stk[top--]]=0;
        }
        return 0;
}

int solve(int s,int k){
        int i,u,v;
        memset(D,-1,sizeof D);
        q.push(s);
        D[s]=0;vis[s]=1;
        while (!q.empty()){
                u=q.front();q.pop();
                REP(i,0,e[u].size()){
                        v=e[u][i];
                        if ((D[u]+1)*k<(D[v])*k||D[v]==-1){
                                D[v]=D[u]+1;
                                if (!vis[v])vis[v]=1,q.push(v);
                        }
                }
                vis[u]=0;
        }
        //int j;REP(i,0,R+1)REP(j,0,R+1) cout<<i<<' '<<j<<' '<<D[num[i][j]]<<endl;
        if (k==1)return D[0];else return D[tt];
}

int main(){
        int i,j,k,p;
        cin>>H>>T>>R;
        cin>>n;
        REP(i,1,n+1) cin>>a[i]>>b[i];
        cin>>m;
        REP(i,1,m+1) cin>>c[i]>>d[i];
        tt=0;
        REP(i,0,R+1)REP(j,0,R+1)if (i+j<=R) num[i][j]=tt++;
        REP(i,0,R+1)REP(j,0,R+1)if (i+j<=R){
                p=num[i][j];
                REP(k,1,min(n,i)+1){
                        int i0=i-k+a[k],j0=j+b[k];
                        if (i0+j0>R) e[p].PB(tt);
                        else e[p].PB(num[i0][j0]);
                }
                REP(k,1,min(m,j)+1){
                        int i0=i+c[k],j0=j-k+d[k];
                        if (i0+j0>R) e[p].PB(tt);
                        else e[p].PB(num[i0][j0]);
                }
        }
        sign=top=0;
        int ans=solve(num[H][T],1);
        if (ans!=-1) cout<<"Ivan"<<endl<<ans<<endl;
        else if(dfs(num[H][T])) cout<<"Draw"<<endl;
        else cout<<"Zmey"<<endl<<solve(num[H][T],-1)<<endl;
}
