#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())


#define MAX 205
struct _atack{
	li ch,ct,gh,gt;
};
vector<_atack> atack;
li dp[MAX][MAX];
li head,tail,R,n;
li state[MAX][MAX];

li recur(li x,li y){
	if(R<x+y) return 0;
	if(state[x][y]==1) return 1<<25;
	state[x][y]=1;
	li &res=dp[x][y];
	if(res!=-1){
		state[x][y]=0;
		return res;
	}
	res=1;
	rep(i,sz(atack)){
		li xx=x-atack[i].ch;
		li yy=y-atack[i].ct;
		if(0<=xx && 0<=yy){
			xx+=atack[i].gh;
			yy+=atack[i].gt;
			res=max(res,recur(xx,yy)+1);
		}
	}
	state[x][y]=0;
	return res;
}
	

int main(){
	cin>>head>>tail>>R>>n;
	rep(i,n){
		li a,b;
		cin>>a>>b;
		atack.pb((_atack){i+1,0,a,b});
	}
	cin>>n;
	rep(i,n){
		li a,b;
		cin>>a>>b;
		atack.pb((_atack){0,i+1,a,b});
	}
	rep(i,MAX)rep(j,MAX) dp[i][j]=(i==head && j==tail)?0:-1;
	queue<pair<li,li> > q;
	q.push(make_pair(head,tail));
	while(sz(q)){
		li x=q.front().first;
		li y=q.front().second;
		q.pop();
		rep(i,sz(atack)){
			li xx=x-atack[i].ch;
			li yy=y-atack[i].ct;
			if(0<=xx && 0<=yy){
				xx+=atack[i].gh;
				yy+=atack[i].gt;
				if(xx==0 && yy==0){
					cout<<"Ivan"<<endl<<dp[x][y]+1<<endl;
					return 0;
				}
				if(xx+yy<=R && dp[xx][yy]==-1){
					dp[xx][yy]=dp[x][y]+1;
					q.push(make_pair(xx,yy));
				}
			}
		}
	}
	rep(i,MAX)rep(j,MAX) dp[i][j]=-1;
	rep(i,MAX)rep(j,MAX) state[i][j]=0;
	li res=recur(head,tail);
	if(res<(1<<25)) cout<<"Zmey"<<endl<<res<<endl;
	else cout<<"Draw"<<endl;
}
