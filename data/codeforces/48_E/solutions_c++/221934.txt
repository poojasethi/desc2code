#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <queue>
#include <cmath>
#include <map>
#include <iomanip>
#include <iostream>
using namespace std;

const int maxn = 222;
bool done[ maxn ][ maxn ];
int dp[ maxn ][ maxn ];
int h , t , R;
int n , m;
int hh[ 2 ][ maxn ] , tt[ 2 ][ maxn ];

queue<pair<int, int> > que;

void read() {
	scanf("%d", &n);
	for ( int i = 1 ; i <= n ; i ++ ) {
		scanf("%d%d", &hh[ 0 ][ i ], &tt[ 0 ][ i ]);
	}
	scanf("%d", &m);
	for ( int i = 1 ; i <= m ; i ++ ) {
		scanf("%d%d", &hh[ 1 ][ i ], &tt[ 1 ][ i ]);
	}
}
void win() {
	while ( !que.empty() )
		que.pop();
	memset(dp, -1, sizeof( dp ));
	memset(done, false, sizeof( done ));
	done[ 0 ][ 0 ] = true;
	dp[ 0 ][ 0 ] = 0;
	que.push(make_pair(0, 0));
	while ( !que.empty() ) {
		int H = que.front().first;
		int T = que.front().second;
		que.pop();
		for ( int i = 1 ; i <= n ; i ++ ) {
			if ( H >= hh[ 0 ][ i ] && T >= tt[ 0 ][ i ] ) {
				int HH = H - hh[ 0 ][ i ] + i;
				int TT = T - tt[ 0 ][ i ];
				if ( HH + TT > R ) continue;
				if ( done[ HH ][ TT ] ) continue;
				dp[ HH ][ TT ] = dp[ H ][ T ] + 1;
				done[ HH ][ TT ] = true;
				que.push(make_pair(HH, TT));
			}
		}
		for ( int i = 1 ; i <= m ; i ++ ) {
			if ( H >= hh[ 1 ][ i ] && T >= tt[ 1 ][ i ] ) {
				int HH = H - hh[ 1 ][ i ];
				int TT = T - tt[ 1 ][ i ] + i;
				if ( HH + TT > R ) continue;
				if ( done[ HH ][ TT ] ) continue;
				dp[ HH ][ TT ] = dp[ H ][ T ] + 1;
				done[ HH ][ TT ] = true;
				que.push(make_pair(HH, TT));
			}
		}
	}
}

int dfs(int h, int t) {
	if ( h + t > R ) return 0;
	if ( dp[ h ][ t ] != -1 ) return dp[ h ][ t ];
	dp[ h ][ t ] = -2;
	int ret = -2;
	for ( int i = 1 ; i <= n && i <= h ; i ++ ) {
		int temp = dfs(h - i + hh[ 0 ][ i ], t + tt[ 0 ][ i ]);
		if ( temp < 0 ) return dp[ h ][ t ] = -2;
		ret = max(ret, temp + 1);
	}
	for ( int i = 1 ; i <= m && i <= t ; i ++ ) {
		int temp = dfs(h + hh[ 1 ][ i ], t - i + tt[ 1 ][ i ]);
		if ( temp < 0 ) return dp[ h ][ t ] = -2;
		ret = max(ret, temp + 1);
	}
	return dp[ h ][ t ] = ret;
}
int main() {
	while ( ~scanf("%d%d%d", &h, &t, &R) ) {
		read();
		win();
		if ( done[ h ][ t ] ) {
			puts("Ivan");
			printf("%d\n", dp[ h ][ t ]);
			continue;
		}
		int ans = dfs(h, t);
		if ( ans > 0 ) {
			puts("Zmey");
			printf("%d\n", ans);
		} else {
			puts("Draw");
		}
	}
	return 0;
}
