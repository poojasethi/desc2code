#include <iostream>
#include <cstring>
#include <vector>
#include <cstdlib>

using namespace std;

const int MAXN = 201;

typedef pair <int, int> PII;

#define X first 
#define Y second

int H, T, R, n, m, headH[MAXN], tailH[MAXN], headT[MAXN], tailT[MAXN], mark[MAXN][MAXN], dis[MAXN][MAXN];
vector <PII> g[MAXN][MAXN];

void bfs()
{
	memset(dis, 0, sizeof(dis));
	vector <PII> Q;
	Q.push_back(PII(H, T));
	mark[H][T] = 1;
	for (int i = 0 ; i < (int)Q.size() ; i++)
	{
		int u = Q[i].X, v = Q[i].Y;
		for (int j = 0 ; j < (int)g[u][v].size() ; j++)
		{
			int uu = g[u][v][j].X, vv = g[u][v][j].Y;
			if (!mark[uu][vv])
			{
				Q.push_back(PII(uu, vv));
				dis[uu][vv] = dis[u][v] + 1;
				mark[uu][vv] = 1;
			}
		}
	}
}

void dfs(int h, int t)
{
	mark[h][t] = 2;
	for (int i = 0 ; i < (int)g[h][t].size() ; i++)
	{
		int u = g[h][t][i].X, v = g[h][t][i].Y;
		if (!mark[u][v])
			dfs(u, v);
		else if (mark[u][v] == 2)
		{
			cout << "Draw" << endl;
			exit(0);
		}
		dis[h][t] = max(dis[h][t], dis[u][v]+1);
	}
	mark[h][t] = 1;
}

int main()
{
	cin >> H >> T >> R;
	cin >> n;
	for (int i = 1 ; i <= n ; i++)
		cin >> headH[i] >> tailH[i];
	cin >> m;
	for (int i = 1 ; i <= m ; i++)
		cin >> headT[i] >> tailT[i];
	for (int i = 0 ; i <= R ; i++)
		for (int j = 0 ; j <= R ; j++)
		{
			for (int k = 1 ; k <= min(i, n) ; k++)
				if (i-k+headH[k]+j+tailH[k] <= R)
					g[i][j].push_back(PII(i-k+headH[k], j+tailH[k]));
			for (int k = 1 ; k <= min(j, m) ; k++)
				if (i+headT[k]+j-k+tailT[k] <= R)
					g[i][j].push_back(PII(i+headT[k], j-k+tailT[k]));
		}
	bfs();
	if (dis[0][0])
	{
		cout << "Ivan" << endl << dis[0][0] << endl;
		return 0;
	}
	memset(mark, 0, sizeof(mark));
	memset(dis, 0, sizeof(dis));
	dfs(H, T);
	cout << "Zmey" << endl << dis[H][T]+1 << endl;
	return 0;
}
