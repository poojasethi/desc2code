#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
using namespace std;

const int MAXN = 220;
const int INF = 11000000;
int h, t, r;
int n, m;

struct Att{
    int d1, d2, u1, u2;
    Att(){};
    Att(int a, int b, int c, int d){
        d1 = a;
        d2 = b;
        u1 = c;
        u2 = d;
    }
};
vector <Att> p;

typedef pair <int, int> Node;
queue <Node> q;

int found[MAXN][MAXN];
int dp[MAXN][MAXN];
int inq[MAXN][MAXN];

int DP(int a, int b){

    if (dp[a][b] != -1){
        return dp[a][b];
    }
    inq[a][b] = 1;
    dp[a][b] = 1;
    for (vector<Att>::iterator it = p.begin(); it != p.end(); it++){
        int na = a - it->d1;
        int nb = b - it->d2;
        if (na < 0 || nb < 0) continue;
        na += it->u1;
        nb += it->u2;
        if (na + nb > r){
            dp[a][b] = max(dp[a][b], 1);
        }
        else if (inq[na][nb] == 1){
            dp[a][b] = INF;
        }
        else{
            dp[a][b] = max(dp[a][b], DP(na, nb) + 1);
        }
    }
    inq[a][b] = 0;
    return dp[a][b];
}

int main(){

//    freopen("in", "r", stdin);
    scanf("%d %d %d", &h, &t, &r);
    int a, b;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++){
        scanf("%d %d", &a, &b);
        p.push_back(Att(i, 0, a, b));
    }
    scanf("%d", &m);
    for (int i = 1; i <= m; i++){
        scanf("%d %d", &a, &b);
        p.push_back(Att(0, i, a, b));
    }

    memset(found, -1, sizeof(found));
    found[0][0] = 0;
    q.push( make_pair<int, int>(0, 0) );
    while (!q.empty()){
        Node now = q.front();
        q.pop();
        for (vector<Att>::iterator it = p.begin(); it != p.end(); it++){
            a = now.first - it->u1;
            b = now.second - it->u2;
            if (a < 0 || b < 0) continue;
            a += it->d1;
            b += it->d2;
            if (a + b > r) continue;
            if (found[a][b] != -1) continue;
            found[a][b] = found[now.first][now.second] + 1;
            q.push(make_pair<int, int>(a, b));
        }
    }
    if (found[h][t] != -1){
        puts("Ivan");
        printf("%d\n", found[h][t]);
        return 0;
    }
    memset(dp, -1, sizeof(dp));
    memset(inq, 0, sizeof(inq));
    inq[h][t] = 1;
    DP(h, t);
    if (dp[h][t] >= INF){
        puts("Draw");
    }
    else{
        puts("Zmey");
        printf("%d\n", dp[h][t]);
    }
    return 0;
}