#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <cassert>
#include <cstring>
#include <queue>

#define big long long int
#define SZ(x) int(x.size())
#define InTheNameOfGod ios::sync_with_stdio(false); cin.tie(0);

using namespace std;

const int maxn = 5 * 100 * 100 + 121;
const int mod = 1000 * 1000 * 1000 + 7;

int h, t, r, n, m, b, s, num;
int g[300][300];
bool ans[10];
int d[maxn];
vector <int> adj[maxn];
bool mark[maxn], in[maxn];

void init() {
	for (int i = 0; i <= r; i++) {
		for (int j = 0; j <= r; j++) {
			if (i == h && j == t) s = b;
			g[i][j] = b++;
		}
	}
}

void dfs(int v) {
	if (v == 0) ans[0] = 1;
	if (v == b) ans[2] = 1;
	mark[v] = 1;
	in[v] = 1;
	for (int i = 0; i < SZ(adj[v]); i++) {
		int u = adj[v][i];
		if (mark[u]) {
			if (in[u]) ans[1] = 1;
			continue;
		}
		dfs(u);
	}
	in[v] = 0;
}

int bfs (int s) {
	queue <int> q;
	q.push(s);
	mark[s] = 1;
	while (!q.empty()) {
		int v = q.front();
		q.pop();
		for (int i = 0; i < SZ(adj[v]); i++) {
			int u = adj[v][i];
			if (mark[u]) continue;
			mark[u] = 1;
			d[u] = d[v] + 1;
			q.push(u);
		}
	}
	return d[0];
}

int lps(int v) {
	if (mark[v] || v == b) return d[v];
	mark[v] = 1;
	int mx = 0;
	for (int i = 0; i < SZ(adj[v]); i++) {
		int u = adj[v][i];
		mx = max(mx, lps(u));
	}
	d[v] = mx+1;
	return mx+1;
}

int main () {
	InTheNameOfGod;
	cin >> h >> t >> r;
	init();
	cin >> n;
	for (int k = 1; k <= n; k++) {
		int x, y; cin >> x >> y;
		for (int i = k; i <= r; i++) {
			for (int j = 0; j <= r; j++) {
				// cout << ":: " << i <<" " << j << endl;
				if (i+j-k+x+y > r) {
					adj[g[i][j]].push_back(b);
					continue;
				}
				adj[g[i][j]].push_back(g[i-k+x][j+y]);

			}
		}
	}
	cin >> m;
	for (int k = 1; k <= m; k++) {
		int x, y; cin >> x >> y;
		for (int i = 0; i <= r; i++) {
			for (int j = k; j <= r; j++) {
				if (i+j-k+x+y > r) {
					adj[g[i][j]].push_back(b);
					continue;
				}
				adj[g[i][j]].push_back(g[i+x][j-k+y]);
			}
		}
	}

	// return 0;
	dfs(s);
	fill(mark, mark+maxn-10, 0);
	if (ans[0]) {
		cout << "Ivan\n" << bfs(s) << endl;
		return 0;
	}
	if (ans[1]) {
		cout << "Draw" << endl;
		return 0;
	}

	cout << "Zmey\n" << lps(s) << endl;
	return 0;
}