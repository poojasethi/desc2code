#include <algorithm>
#include <iostream>
#include <sstream>
#include <memory>
#include <limits>
#include <vector>
#include <string>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <climits>
#include <cstring>
#include <cstdio>
#include <cmath>
using namespace std;

const int Maxn = 555;
const int INF = 100000000;

typedef pair<int, int> Item;

int n, m;
int h, t, R;
int head[Maxn][2], tail[Maxn][2];
int used[Maxn][Maxn], f[Maxn][Maxn], dp[Maxn][Maxn];

int solve(int hh, int tt)
{
    if( hh+tt > R )
        return 0;
    if( used[hh][tt] == 1 )
        return f[hh][tt];
    if( used[hh][tt] == -1 )
        return INF;

    used[hh][tt] = -1;
    for(int i=1; i<=min(hh,n); i++)
        f[hh][tt] = max(f[hh][tt], solve(hh-i+head[i][0], tt+head[i][1])+1);
    for(int i=1; i<=min(tt,m); i++)
        f[hh][tt] = max(f[hh][tt], solve(hh+tail[i][0], tt-i+tail[i][1])+1);
    used[hh][tt] = 1;

    return f[hh][tt];
}

int main()
{
    ios::sync_with_stdio(0);

    cin>>h>>t>>R;
    cin>>n;
    for(int i=1; i<=n; i++)
        cin>>head[i][0]>>head[i][1];
    cin>>m;
    for(int i=1; i<=m; i++)
        cin>>tail[i][0]>>tail[i][1];

    queue<Item> que;
    que.push(Item(h, t));
    memset(dp, -1, sizeof(dp));
    dp[h][t] = 0;
    while( !que.empty() )
    {
        Item it= que.front();
        que.pop();
        for(int i=1; i<=min(it.first, n); i++)
        {
            int hh = it.first-i+head[i][0];
            int tt = it.second+head[i][1];
            if( hh+tt<=R && dp[hh][tt]==-1 )
            {
                dp[hh][tt] = dp[it.first][it.second]+1;
                que.push(Item(hh, tt));
            }
        }
        for(int i=1; i<=min(it.second, m); i++)
        {
            int hh = it.first+tail[i][0];
            int tt = it.second-i+tail[i][1];
            if( hh+tt<=R && dp[hh][tt]==-1 )
            {
                dp[hh][tt] = dp[it.first][it.second]+1;
                que.push(Item(hh, tt));
            }
        }
    }

    if( dp[0][0] != -1 )
    {
        cout<<"Ivan\n";
        cout<<dp[0][0]<<endl;
        return 0;
    }
    solve(h, t);
    if( f[h][t] >= INF )
        cout<<"Draw\n";
    else
    {
        cout<<"Zmey\n";
        cout<<f[h][t]<<endl;
    }

    return 0;
}
