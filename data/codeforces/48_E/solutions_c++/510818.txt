#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <string>
#include <queue>
#define rep(i,a,n) for(int i=a;i<n;i++)
#define in(n) scanf("%d",&n)
#define inl(n) scanf("%lld",&n)
#define out(n) printf("%d ",n)
#define outln(n) printf("%d\n",n)
#define outl(n) printf("%lld ",n)
#define outlln(n) printf("%lld\n",n)
#define LL long long 
#define pb push_back
using namespace std;
int res[256][256];
queue < pair<int,int> > Q;
int H[256][2],T[256][2];
bool draw=false;
int n,m,r;
void gogo(int h,int t)
{
	if(h+t>r)return;
	int hh,tt;
	res[h][t]=1;
	for(int i=1;i<=min(h,n);i++)
	{
		hh=h-i+H[i][0];tt=t+H[i][1];
		if(hh+tt>r)continue;
		if(res[hh][tt]==1)
		{
			draw=true;
			return;
		}
		if(res[hh][tt]==-1)gogo(hh,tt);
	}
	for(int i=1;i<=min(t,m);i++)
	{
		hh=h+T[i][0];tt=t-i+T[i][1];
		if(hh+tt>r)continue;
		if(res[hh][tt]==1)
		{
			draw=true;
			return;
		}
		if(res[hh][tt]==-1)gogo(hh,tt);
	}
	res[h][t]=2;

}
int memo[256][256];
int get(int h,int t)
{
	if(h+t>r)return 0;
	if(memo[h][t]!=-1)return memo[h][t];
	int hh,tt,tmp;
	int mmax=0;
	for(int i=1;i<=min(h,n);i++)
	{
		hh=h-i+H[i][0];tt=t+H[i][1];
		tmp=get(hh,tt);
		if(tmp>mmax)mmax=tmp;
	}
	for(int i=1;i<=min(t,m);i++)
	{
		hh=h+T[i][0];tt=t-i+T[i][1];
		tmp=get(hh,tt);
		if(tmp>mmax)mmax=tmp;
	}
	return memo[h][t]=1+mmax;

}
int main()
{
	memset(memo,-1,sizeof(memo));
	memset(res,-1,sizeof(res));
	int h,t,ih,it;
	cin>>h>>t>>r;
	ih=h;it=t;
	cin>>n;
	rep(i,1,n+1)cin>>H[i][0]>>H[i][1];
	cin>>m;
	rep(i,1,m+1)cin>>T[i][0]>>T[i][1];
	Q.push(make_pair(h,t));
	res[h][t]=0;
	int pres,hh,tt,mmax=-1;
	while(!Q.empty())
	{
		h=(Q.front()).first;t=(Q.front()).second;
		Q.pop();
		if(h==0 && t==0)
		{
			puts("Ivan");
			printf("%d\n",res[0][0]);
			return 0;
		}
		pres=res[h][t];
		for(int i=1;i<=min(h,n);i++)
		{
			hh=h-i+H[i][0];tt=t+H[i][1];
			if(hh+tt>r)continue;
			if(res[hh][tt]!=-1)continue;
			res[hh][tt]=pres+1;
			Q.push(make_pair(hh,tt));
		}
		for(int i=1;i<=min(t,m);i++)
		{
			hh=h+T[i][0];tt=t-i+T[i][1];
			if(hh+tt>r)continue;
			if(res[hh][tt]!=-1)continue;
			res[hh][tt]=pres+1;
			Q.push(make_pair(hh,tt));
		}
	}
	memset(res,-1,sizeof(res));
	gogo(ih,it);
	if(draw)puts("Draw");
	else 
	{
		puts("Zmey");
		printf("%d\n",get(ih,it));
	}


	return 0;
}
