#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <string>
#include <cmath>
#include <stdio.h>
#include <iomanip>
#include <queue>
#include <map>

#define pb push_back
#define mp make_pair
#define f1 first
#define f2 second
#define X first
#define Y second

using namespace std;

typedef long long LL;
typedef pair <int, int> PII; 

const int maxn = 200 + 5;
const int mod = 1000 * 1000 * 1000 + 7;
const int INF = (1 << 30);

int h1[maxn], t1[maxn];
int h2[maxn], t2[maxn];

int mark[maxn][maxn];
int d[maxn][maxn];
int h, t, R;
int n, m;

int bfs()
{
	for (int i = 0; i <= R; i++)
		for (int j = 0; j <= R; j++)
			d[i][j] = -1;
	
	vector <PII> que;
	que.pb(mp(h, t));
	d[h][t] = 0;
	for (int i = 0; i < (int)que.size(); i++)
	{	
		int hs = que[i].f1;
		int ts = que[i].f2;
		for (int i = 1; i <= hs && i <= n; i++)
		{
			int hn = hs - i + h1[i], tn = ts + t1[i];
			if (hn + tn <= R && d[hn][tn] == -1)
			{
				d[hn][tn] = d[hs][ts] + 1;
				que.pb(mp(hn, tn));
			}
		}
		for (int i = 1; i <= ts && i <= m; i++)
		{
			int hn = hs + h2[i], tn = ts - i + t2[i];
			if (hn + tn <= R && d[hn][tn] == -1)
			{
				d[hn][tn] = d[hs][ts] + 1;
				que.pb(mp(hn, tn));
			}
		}
	}

	return d[0][0];
}

bool DAG = true;

void dfs(PII x)
{
	int hs = x.f1, ts = x.f2;
	mark[hs][ts] = 1;
	for (int i = 1; i <= hs && i <= n; i++)
	{
		int hn = hs - i + h1[i], tn = ts + t1[i];
		if (hn + tn <= R)
		{
			if (!mark[hn][tn])
				dfs(mp(hn, tn));
			else if (mark[hn][tn] == 1)
				DAG = false;

			d[hs][ts] = max(d[hs][ts], d[hn][tn] + 1);
		}
	}
	for (int i = 1; i <= ts && i <= m; i++)
	{
		int hn = hs + h2[i], tn = ts - i + t2[i];
		if (hn + tn <= R)
		{
			if (!mark[hn][tn])
				dfs(mp(hn, tn));
			else if (mark[hn][tn] == 1)
				DAG = false;

			d[hs][ts] = max(d[hs][ts], d[hn][tn] + 1);
		}
	}
	mark[hs][ts] = 2;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin >> h >> t >> R;
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> h1[i] >> t1[i];
	cin >> m;
	for (int i = 1; i <= m; i++)
		cin >> h2[i] >> t2[i];
	
	int win = bfs();
	if (win != -1)
	{
		cout << "Ivan" << endl;
		cout << win << endl;
	}
	else
	{
		for (int i = 0; i <= R; i++)
			for (int j = 0; j <= R; j++)
				d[i][j] = 1;
		dfs(mp(h, t));
		if (!DAG)
			cout << "Draw" << endl;
		else
			cout << "Zmey" << endl << d[h][t] << endl;

	}

	return 0;
}

