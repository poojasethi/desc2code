#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 100010;

vector <int> adj[MAXN];
vector <int> bit[MAXN];
pair <int, int> e[MAXN];
int h[MAXN];
int cnt[MAXN];
int branch[MAXN];
int branch_cnt;
int root;
int n, m;

void Init(){
	memset(h, 0, sizeof(h));
	memset(cnt, 0, sizeof(cnt));
	memset(branch, 0, sizeof(branch));
	for(int i = 0; i < MAXN; i ++){
		adj[i].clear();
		bit[i].clear();
	}
}

void DFS(int u, int p){
	branch[u] = branch_cnt;
	cnt[branch[u]] ++;
	h[u] = h[p] + 1;

	for(int i = 0; i < adj[u].size(); i ++){
		int v = adj[u][i];
		if(v != p){
			DFS(v, u);
		}
	}
}

void update(int br, int pos, int val){
	for(int i = pos; i <= cnt[br]; i += i & (-i)){
		bit[br][i] += val;
	}
}
int getSum(int br, int pos){
	int ret = 0;
	for(int i = pos; i > 0; i -= i & (-i)){
		ret += bit[br][i];
	}

	return ret;
}

int main(){
	scanf("%d", &n);
	int u, v;
	for(int i = 1; i < n; i ++){
		scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
		e[i] = make_pair(u, v);
	}

	root = 1;
	for(int i = 1; i <= n && root == 1; i ++){
		if(adj[i].size() > 2) {root = i;}
	}
	branch_cnt = 0;
	for(int i = 0; i < adj[root].size(); i ++){
		branch_cnt ++;
		DFS(adj[root][i], root);
		bit[branch_cnt].resize(cnt[branch_cnt] + 1, 0);
	}
	int op, id;
	scanf("%d", &m);
	for(int i = 1; i <= m; i ++){
		scanf("%d", &op);
		if(op == 3){
			scanf("%d%d", &u, &v);
			if(branch[u] == branch[v] || u == root || v == root){
				if(h[u] > h[v]) {swap(u, v);}
				int tmp = getSum(branch[v], h[v]) - getSum(branch[u], h[u]);
				printf("%d\n", tmp ? -1 : h[v] - h[u]);				
			}
			else{
				int tmp = getSum(branch[v], h[v]) + getSum(branch[u], h[u]);
				printf("%d\n", tmp ? -1 : h[v] + h[u]);
			}
		}else{
			scanf("%d", &id);
			u = e[id].first, v = e[id].second;
			if(h[u] > h[v]) {swap(u, v);}
			if(op == 1) {update(branch[v], h[v], -1);}
			else {update(branch[v], h[v], 1);}
		}
	}

	return 0;
}
