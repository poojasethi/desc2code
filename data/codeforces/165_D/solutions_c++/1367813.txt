#include <cstdio>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

#define N 100001
#define F first
#define S second

int n, m;
vector<int> adj[N];
vector<pair<int, int> > are;
int dis[N], col[N], cen;
set<int> cuts[N];

void findcenter()
{
	cen = 1;
	for (int i = 2; i <= n; ++i)
		if (adj[i].size() > 2)
		{
			cen = i;
			return;
		}
}

void dfs(int p, int l, int d, int c)
{
	dis[p] = d;
	col[p] = c;
	
	for (int i = 0; i < adj[p].size(); ++i)
	{
		int v = adj[p][i];
		if (v == l) continue;
		if (dis[v]) continue;
		if (l == -1) c = v;
		dfs(v, p, d+1, c);
	}
}

void restore(int a)
{
	pair<int, int> p = are[a];
	if (dis[p.S] < dis[p.F]) swap(p.F, p.S);
	cuts[col[p.S]].erase(dis[p.S]);
}

void destroy(int a)
{
	pair<int, int> p = are[a];
	if (dis[p.S] < dis[p.F]) swap(p.F, p.S);
	cuts[col[p.S]].insert(dis[p.S]);
}

int path(int a, int b)
{
	if (a==b) return 0;
	if (col[a] != col[b])
	{
		if (cuts[col[a]].size() && *cuts[col[a]].begin() <= dis[a]) return -1;
		if (cuts[col[b]].size() && *cuts[col[b]].begin() <= dis[b]) return -1;
		return dis[a]+dis[b];
	}
	if (dis[a] > dis[b]) swap(a,b);
	typeof(cuts[col[a]].begin()) it = cuts[col[a]].lower_bound(dis[a]+1);
	if (it == cuts[col[a]].end())
		return abs(dis[a]-dis[b]);
	if (*it > dis[a] && *it <= dis[b]) return -1;
	return abs(dis[a]-dis[b]);
}

int main()
{
	scanf("%d", &n);
	are.push_back(make_pair(0,0));
	
	for (int i = 0; i < n-1; ++i)
	{
		int a, b;
		scanf("%d%d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
		are.push_back(make_pair(a, b));
	}
	
	findcenter();
	dfs(cen, -1, 0, 0);
	
	scanf("%d", &m);
	
	for (int i = 0; i < m; ++i)
	{
		int a, b, c;
		scanf("%d%d", &a, &b);
		if (a == 3) scanf("%d", &c);
		
		if (a == 1) restore(b);
		else if (a == 2) destroy(b);
		else if (a == 3) printf("%d\n", path(b, c));
	}
	
	return 0;
}

