#include<stdio.h>
int lowbit(int x)
{
	return x&-x;
}
struct artree
{
	int data[200001],len;
	void ins(int i,int a)
	{
		for(;i<=len;i+=lowbit(i))
			data[i]+=a;
	}
	int query(int i)
	{
		if(i<0)
			return 0;
		int ans=0;
		for(;i;i-=lowbit(i))
			ans+=data[i];
		return ans;
	}
}stat;

struct fe
{
	int b;
	fe *next;
}tree[1000001];
int elen;
void ins(int a,int b)
{
	tree[elen]=(fe){b,tree[a].next};
	tree[a].next=tree+elen++;
}

int deg[200001],bl[200001],lib[200001],dep[200001];
int ea[200001],eb[200001];

int main()
{
	int n,m,i,j,k,last,r=1,llen=0;
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	scanf("%d",&n);
	elen=n+1;
	for(i=1;i<=n-1;++i)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		ea[i]=a,eb[i]=b;
		ins(a,b);
		ins(b,a);
		deg[a]++;
		deg[b]++;
	}
	for(i=1;i<=n;++i)
		if(deg[i]>2)
		{
			r=i;
			break;
		}
	for(fe *j=tree[r].next;j;j=j->next)
		for(last=r,k=j->b;;)
		{
			dep[k]=dep[last]+1;
			bl[k]=j->b;
			lib[k]=++llen;
			if(deg[k]==1)
				break;
			int k2=k;
			if(tree[k].next->b==last)
				k=tree[k].next->next->b;
			else
				k=tree[k].next->b;
			last=k2;
		}
	for(i=1;i<=n-1;++i)
		if(dep[eb[i]]>dep[ea[i]])
			ea[i]=eb[i];
	stat.len=n;
	
	scanf("%d",&m);
	for(i=1;i<=m;++i)
	{
		int opt,a,b;
		scanf("%d",&opt);
		if(opt==1)
		{
			scanf("%d",&a);
			stat.ins(lib[ea[a]],-1);
		}
		if(opt==2)
		{
			scanf("%d",&a);
			stat.ins(lib[ea[a]],1);
		}
		if(opt==3)
		{
			scanf("%d%d",&a,&b);
			if(dep[a]>dep[b])
				a^=b,b^=a,a^=b;
			if(bl[a]==bl[b])
			{
				if(stat.query(lib[b])-stat.query(lib[a]))
					printf("-1\n");
				else
					printf("%d\n",dep[b]-dep[a]);
			}
			else
			{
				if(stat.query(lib[b])-stat.query(lib[bl[b]]-1)+stat.query(lib[a])-stat.query(lib[bl[a]]-1))
					printf("-1\n");
				else
					printf("%d\n",dep[a]+dep[b]);
			}
		}
	}
	return 0;
}
