//By Lin
#include<cstdio>
#include<cstring>
#include<algorithm>
#define maxn 100010
using namespace std; 

int		d[maxn],n,p[maxn],st[maxn],cnt,w[maxn],tree[maxn],in[maxn],now; 
struct	Edge{
	int to,num; 
	Edge *next; 
}*mat[maxn], edges[maxn*2]; 

void	link(int x ,int to ,int num )
{
	edges[cnt].to = to; 
	edges[cnt].num = num; 
	edges[cnt].next = mat[x]; 
	mat[x] = &edges[cnt++];
}

void	dfs(int x ,int father ,int belong )
{
	for ( Edge *pp = mat[x]; pp ; pp = pp->next )
	{
		int to = pp->to; 
		if ( to == father )  continue; 
		w[to] = now; 
		p[to] = belong; 
		in[pp->num] = now++; 
		dfs(to , x , belong );
	}
}

void	updata(int x , int k )
{
	for (int i = x; i<=n+5; i+= (i&(i^(i-1))) ) 
		tree[i] += k; 
}

int		ask(int st ,int ed )
{
	int a = 0, b = 0; 
	for (int i = st; i>=1; i-=(i&(i^(i-1)))) a += tree[i]; 
	for (int i = ed; i>=1; i-=(i&(i^(i-1)))) b += tree[i]; 
	return b-a; 
}
int main()
{
	scanf("%d", &n );
	for (int i = 0; i<n-1; i++)
	{
		int x ,y; 
		scanf("%d%d", &x ,&y ); 
		link( x ,y , i+1); 
		link( y ,x , i+1);
		d[x]++; d[y]++; 
	}
	int root = -1;
	for (int i = 0; i<n; i++)
		if ( d[i] > 2 ) root = i; 
	if ( root == -1 )
		for (int i = 0; i<n; i++)
			if ( d[i] == 1 ) root = i; 
	cnt = 0; 
	now = 1; 
	for ( Edge *pp = mat[root]; pp ; pp = pp->next )
	{
		st[cnt] = now; 
		w[pp->to] = now; 
		in[pp->num] = now++; 
		p[pp->to] = cnt; 
		dfs(pp->to , root , cnt );
		cnt++; 
	}
	int m; 
	scanf("%d", &m ); 
	while ( m-- )
	{
		int k , x, y; 
		scanf("%d", &k );
		if ( k == 3 ) {
			scanf("%d%d", &x ,&y );
			if ( p[x] != p[y] ) {
				if ( ask(st[p[x]]-1 , w[x]) == 0   && ask(st[p[y]]-1 , w[y] ) == 0 ) 
					printf("%d\n" , w[x]-st[p[x]]+w[y]-st[p[y]]+2);
				else printf("-1\n");
			}
			else 
			{
				if ( ask(min(w[x],w[y]),max(w[x],w[y])) == 0 ) 
					printf("%d\n" , abs(w[x]-w[y]) ); 
				else printf("-1\n");
			}
		}
		else 
		{
			scanf("%d", &x );
			if ( k == 1 ) 
				updata( in[x] , -1 );
			else updata( in[x] , 1 );
		}
	}
}
