#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<cmath>
using namespace std;
const int N = 100000 + 2;
#define lowbit(x) (x & (-x))
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)
int c[N], n, in[N], deep[N], root = 1;
vector<int> p[N];
pair<int, int> pr[N];
int getsum(int x)
{
    int sum = 0;
    while(x)
    {
        sum += c[x];
        x -= lowbit(x);
    }
    return sum;
}
void updates(int x, int cnt)
{
    while(x <= n)
    {
        c[x] += cnt;
        x += lowbit(x);
    }
}
int idx;
void dfs(int x, int d)
{
    deep[x] = d;
    in[x] = ++idx;
    foreach(it, p[x])
        if(in[*it] < 0)
            dfs(*it, d + 1);
}
int main()
{
    cin >> n;
    int x, y, z;
    for(int i = 1; i < n; ++i)
    {
        scanf("%d%d", &x, &y);
        pr[i].first = x, pr[i].second = y;
        --in[x];
        --in[y];
        p[x].push_back(y);
        p[y].push_back(x);
        if(in[x] < -2) root = x;
        else if(in[y] < -2) root = y;
    }
    dfs(root, 0);
    int m;cin >> m;
    while(m--)
    {
        scanf("%d%d", &z, &x);
        if(z == 3)
        {
            scanf("%d", &y);
            int t1 = getsum(in[x]), t2 = getsum(in[y]);
            if(in[x] - deep[x] == in[y] - deep[y])
                printf("%d\n", t1 == t2 ? abs(deep[x] - deep[y]) : -1);
            else if((t1 - getsum(in[x] - deep[x]))|| (t2 - getsum(in[y] - deep[y])))
                puts("-1");
            else
                printf("%d\n", deep[x] + deep[y]);
        }
        else
        {
            updates(max(in[pr[x].first], in[pr[x].second]), z * 2 - 3);
        }
    }
    return 0;
}
