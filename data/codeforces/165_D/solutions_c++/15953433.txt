#include <bits/stdc++.h>
using namespace std;
const int N = 1e5+10;
int sum[N],par[N][20],pedge[N],h[N],ord[N];
vector<pair<int,int> >adj[N];
#define mp make_pair
#define x first
#define y second
void dfs(int root,int parent){
	static int pos=1;
	int i,u;
	par[root][0]=parent;
	h[root]= h[parent]+1;
	for(i=1;i<20;++i)
		par[root][i]= par[par[root][i-1]][i-1];
	for(i=0;i<adj[root].size();++i){
		u = adj[root][i].x;
		if(u!=parent){
			pedge[u]= adj[root][i].y;
			ord[pedge[u]]=pos++;
			dfs(u,root);
		}
	}
}
void add(int x,int v){
	int i;
	for(i=x;i<N;i+=i&-i)
		sum[i]+=v;
}
int get(int x){
	int i,ret=0;
	while(x>0){
		ret+= sum[x];
		x= x&(x-1);
	}
	return ret;
}
pair<int,int> lca(int a,int b){
	if(h[a]<h[b])swap(a,b);
	int x= pedge[a],y=pedge[b],diff= h[a]-h[b],i,j,temp =a,u=a,v=b;
	for(i=0;i<20;++i)
		if(diff&(1<<i))
			a= par[a][i];
	if(a==b){
		--diff;
		for(i=0;i<20;++i)
			if(diff&(1<<i))
				temp= par[temp][i];
		return make_pair(get(ord[pedge[u]])-get(ord[pedge[temp]]-1),h[u]-h[b]);
	}
	else{
		for(i=19;i>=0;--i)
			if(par[a][i]!=par[b][i])
				a=par[a][i],b=par[b][i];
		int ret=0;
		if(get(ord[pedge[u]])-get(ord[pedge[a]]-1))ret=1;
		if(get(ord[pedge[v]])-get(ord[pedge[b]]-1))ret=1;
		a=par[a][0];
		return make_pair(ret,h[u]-h[a]+h[v]-h[a]);
	}
}
int main(){
	int type,a,b,n,i,j,m;scanf("%d",&n);
	for(i=1;i<=n-1;++i)
		scanf("%d%d",&a,&b),
			adj[a].push_back(mp(b,i)),adj[b].push_back(mp(a,i));
	int beard=1;
	for(i=1;i<=n;++i)
		if(adj[i].size()>2)beard=i;
	dfs(beard,0);
	cin>>m;
	while(m--){
		scanf("%d",&type);
		if(type==1){
			scanf("%d",&a);
			add(ord[a],-1);
		}
		else if(type==2){
			scanf("%d",&a);
			add(ord[a],1);
		}
		else{
			scanf("%d%d",&a,&b);
			if(a==b)
				printf("0\n");
			else{
				pair<int,int> R= lca(a,b);
				if(R.first!=0)printf("-1\n");
				else
					printf("%d\n",R.second);
			}
		}
	}
}
