#include<cstdio>
#include<cstring>
#define mem(a,b) memset(a,b,sizeof(a))
#include<algorithm>
using namespace std;
typedef long long ll;

const int N = 201111, D = 20, P = 1000000000007LL;

int en, head[N], ver[N], nxt[N];
void einit() {
	en=0; mem(head,-1);
}
void addE(int u, int v) {
	ver[en]=v;
	nxt[en]=head[u];
	head[u]=en++;
}

int cnt, st[N], ed[N], dep[N];
int jmp[N][D];
void dfs(int x, int p) {
	dep[x]= p<0?0:(dep[p]+1);
	jmp[x][0]=p;
	for(int i=0; ~jmp[x][i]; i++) {
		jmp[x][i+1]=jmp[jmp[x][i]][i];
	}
	st[x]=++cnt;
	for(int i=head[x]; ~i; i=nxt[i]) if(ver[i]!=p) {
		dfs(ver[i], x);
	}
	ed[x]=++cnt;
}

int go_up(int v,int d) {
	for(int i=D-1; i>=0; i--) {
		if(d & (1<<i)) {
			v=jmp[v][i];
		}
	}
	return v;
}

int lca(int u,int v) {
	if(dep[u]>dep[v]) return lca(v,u);
	v = go_up(v,dep[v]-dep[u]);
	if(u==v) return u;
	for(int i=D-1; i>=0; i--) {
		if(jmp[u][i]!=jmp[v][i]) {
			u=jmp[u][i];
			v=jmp[v][i];
		}
	}
	return jmp[u][0];
}

ll val[N*D];
void insert(int l,int r,int t,int L,int R,ll d) {
	if(L>r||l>R) return;
	if(l==L&&r==R) {
		val[t]+=d;
		return;
	}
	int m=(l+r)/2;
	insert(l,m,t*2,L,min(m,R),d);
	insert(m+1,r,t*2+1,max(m+1,L),R,d);
}
ll Que(int l,int r,int t,int&x) {
	if(x>r||x<l) return 0;
	if(l==x&&r==x) {
		return val[t];
	}
	int m=(l+r)/2;
	return Que(l,m,t*2,x)+Que(m+1,r,t*2+1,x)+val[t];
}

int main()
{
	int p2[N];
	p2[0]=1;
	for(int i=1;i<N;i++) p2[i]=p2[i-1]*2%P;

	int n; scanf("%d",&n);
	einit();
	for(int i=0;i<n-1;i++) {
		int u,v; scanf("%d%d",&u,&v);
		addE(u,v), addE(v,u);
	}

	cnt=0;
	mem(jmp,-1);
	dfs(1,-1);

	mem(val,0);
	int m; scanf("%d",&m);
	while(m--) {
		int tp; scanf("%d",&tp);
		if(tp<3) {
			int i; scanf("%d",&i);
			i = (i-1)*2;
			int u=ver[i], v=ver[i^1];
			if(dep[u]<dep[v]) u=v;
			insert(1,2*n,1,st[u],ed[u],(tp==1?-1:1)*p2[u]);
		} else {
			int a,b; scanf("%d%d",&a,&b);
			if(Que(1,2*n,1,st[a])!=Que(1,2*n,1,st[b])) {
				puts("-1");
			} else {
				int f=lca(a,b);
				printf("%d\n",dep[a]+dep[b]-2*dep[f]);
			}
		}
	}

	return 0;
}
