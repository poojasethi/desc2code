//VERDICT:

#include<iostream>
#include<algorithm>
#include<cstring>
//#include<cstdlib>
#include<vector>
//#include<cstdio>
//#include<iomanip>
//#include<map>
#include<set>
#include<queue>
//#include<deque>
//#include<utility>
#include<cmath>
#define pb push_back
#define mkp make_pair
#define foR(i,j,n) for(int i=j;i<n;i++)
#define error(x) cerr<<#x<<"="<<x<<endl;
#define stf(x) st.find(x)!=st.end()
#define X first
#define Y second
#define pii pair<int,int>
typedef long long ll;
using namespace std;
const int maxn=1000000,inf=1000000000,mod=1000003;
vector<int> adj[maxn];
vector<pii > v;
set<int> s[maxn];
int g[maxn],d[maxn];
void dfs(int x,int dist,int group,int l){
	d[x]=dist;g[x]=group;
	foR(i,0,adj[x].size()){
		int next=adj[x][i];
		if(next!=l)
			dfs(next,dist+1,group,x);
	}
}
int main(){
	ios::sync_with_stdio(false);
	int n,m,x,y,cur=0;
	cin>>n;
	foR(i,1,n){
		cin>>x>>y;x--;y--;
		v.pb(mkp(x,y));
		adj[x].pb(y);
		adj[y].pb(x);
	}
	cin>>m;
	foR(i,0,n)
		if(adj[i].size()>2)
			cur=i;
	foR(i,0,adj[cur].size())
		dfs(adj[cur][i],1,i,cur);
	foR(i,0,m){
		int c;
		cin>>c;
		if(c==1){
			cin>>c;c--;
			x=v[c].X;y=v[c].Y;
			if(d[x]>d[y])
				swap(x,y);
			s[g[(x!=cur)?x:y]].erase(min(d[x],d[y]));
		}
		else if(c==2){
			cin>>c;c--;
			x=v[c].X;y=v[c].Y;
			if(d[x]>d[y])
				swap(x,y);
			s[g[(x!=cur)?x:y]].insert(min(d[x],d[y]));
		}
		else{
			cin>>x>>y;x--;y--;
			if(d[x]>d[y])
				swap(x,y);
			if(g[x]!=g[y]){
				if((s[g[x]].size()==0||(*s[g[x]].begin())>=d[x])&&(s[g[y]].size()==0||(*s[g[y]].begin())>=d[y]))
						cout<<d[x]+d[y]<<endl;
				else
					cout<<-1<<endl;
			}
			else{
				if(x==y)
					cout<<0<<endl;
				else if(s[g[x]].size()&&d[x]<=(*s[g[x]].rbegin())){
//					int p=*(lower_bound(s[g[x]].begin(),s[g[x]].end(),d[x]));
					int p=*(s[g[x]].lower_bound(d[x]));
					if(p>=d[y])
						cout<<d[y]-d[x]<<endl;
					else
						cout<<-1<<endl;
				}
				else 
					cout<<d[y]-d[x]<<endl;
			}
		}
	}
	return 0;
}
