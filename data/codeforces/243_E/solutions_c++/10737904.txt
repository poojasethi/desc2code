#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<vector>

using namespace std;

typedef vector<int> vi;

char s[10011];
int a[2022][2022],req[2022];
vi son[10011];
int num[10011][4],bel[10011],Q[10011],rank[10011];
int tot,n,root,i,j,cnt;
bool pc;

void dfs(int x)
{
	num[x][0]=num[x][1]=num[x][2]=0;
	if(x<=n){
		bel[x]=req[x];
		num[x][bel[x]]++;
		return;
	}
	int i,emp,ful;
	emp=1;ful=1;
	for(i=0;i<son[x].size();i++){
		dfs(son[x][i]);
		if(bel[son[x][i]])emp=0;
		if(bel[son[x][i]]!=1)ful=0;
		num[x][bel[son[x][i]]]++;
	}
	if(emp)bel[x]=0;
	else if(ful)bel[x]=1;
	else bel[x]=2;
}

bool get(int x,vi &L)
{
	int i,k,t1,t2;
	if(num[x][2]>1)return false;
	if(Q[x]){
		if(num[x][1]&&bel[son[x][0]]!=1||!num[x][1]&&bel[son[x][0]]!=2)reverse(son[x].begin(),son[x].end());
		for(i=0;i<num[x][1];i++){
			if(bel[son[x][i]]!=1)return false;
			L.push_back(son[x][i]);
		}
		k=num[x][1];
		if(num[x][2]&&bel[son[x][k]]!=2)return false;
		if(num[x][2]){
			if(get(son[x][k],L)==false)return false;
			k++;
		}
		for(i=k;i<son[x].size();i++)L.push_back(son[x][i]);
		return true;
	}
	else{
		if(num[x][1]){
			t1=++tot;
			for(i=0;i<son[x].size();i++)if(bel[son[x][i]]==1)son[t1].push_back(son[x][i]);
			if(son[t1].size()==1)t1=son[t1][0];
			L.push_back(t1);
		}
		for(i=0;i<son[x].size();i++)if(bel[son[x][i]]==2){
			if(get(son[x][i],L)==false)return false;
		}
		if(num[x][0]){
			t2=++tot;
			for(i=0;i<son[x].size();i++)if(bel[son[x][i]]==0)son[t2].push_back(son[x][i]);
			if(son[t2].size()==1)t2=son[t2][0];
			L.push_back(t2);
		}
		return true;
	}
}

bool getr(int x,vi &L)
{
	int sz;
	sz=L.size();
	if(get(x,L)==true){
		reverse(L.begin()+sz,L.end());
		return true;
	}
	else return false;
}

bool getl(int x,vi &L)
{
	return get(x,L);
}

bool calc(int x)
{
	int i,Nm,Ed,ars,t1,t2,j;
	if(x<=n)return true;
	if(num[x][1]+num[x][2]==1){
		for(i=0;i<son[x].size();i++)if(bel[son[x][i]])return calc(son[x][i]);
	}
	if(num[x][2]>2)return false;
	vi Tmp;		
	Tmp.clear();
	if(Q[x]){
		Nm=0;Ed=0;ars=0;
		for(i=0;i<son[x].size();i++){
			if(Ed&&bel[son[x][i]])return false;
			if(Nm&&!bel[son[x][i]])Ed=1;
			if(bel[son[x][i]]==2){
				if(!Nm){
					if(getr(son[x][i],Tmp)==false)return false;
				}
				else if(getl(son[x][i],Tmp)==false)return false;
			}
			else Tmp.push_back(son[x][i]);
			if(bel[son[x][i]])Nm=1;
		}
		son[x]=Tmp;
		return true;
	}
	else{
		t1=++tot;Q[t1]=1;
		for(i=0;i<son[x].size();i++)if(bel[son[x][i]]==2){
			if(getr(son[x][i],son[t1])==false)return false;
			break;
		}
		if(num[x][1]){
			t2=++tot;
			for(i=0;i<son[x].size();i++)if(bel[son[x][i]]==1)son[t2].push_back(son[x][i]);
			if(son[t2].size()==1)t2=son[t2][0];
			son[t1].push_back(t2);
		}
		ars=0;
		for(i=0;i<son[x].size();i++)if(bel[son[x][i]]==2){
			if(!ars)ars=1;
			else if(getl(son[x][i],son[t1])==false)return false;
		}
		if(son[t1].size()==1)t1=son[t1][0];
		Tmp.push_back(t1);
		for(i=0;i<son[x].size();i++)if(!bel[son[x][i]])Tmp.push_back(son[x][i]);
		son[x]=Tmp;
		return true;
	}
}

void Find(int x)
{
	if(x<=n){
		rank[++cnt]=x;
		return;
	}
	int i;
	for(i=0;i<son[x].size();i++)Find(son[x][i]);
}

int main()
{
	scanf("%d",&n);
	root=tot=n+1;
	pc=true;
	for(i=1;i<=n;i++)son[root].push_back(i);
	for(i=1;i<=n;i++){
		scanf("%s",&s);
		for(j=1;j<=n;j++){
			req[j]=s[j-1]-'0';
			a[i][j]=req[j];
		}
		dfs(root);
		if(calc(root)==false){
			pc=false;
			printf("NO\n");
			break;
		}
	}
	if(pc){
		printf("YES\n");
		Find(root);
		for(i=1;i<=n;i++){
			for(j=1;j<=n;j++)printf("%d",a[i][rank[j]]);
			printf("\n");
		}
	}
}