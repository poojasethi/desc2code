#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:76777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
using namespace std;

#define FOR(i, a, b) for(int i = (a); i < (b); ++i)
#define RFOR(i, b, a) for(int i = (b) - 1; i >= (a); --i)
#define REP(i, N) FOR(i, 0, N)
#define RREP(i, N) RFOR(i, N, 0)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979

typedef long long Int;
typedef unsigned long long UINT;
typedef vector <int> VI;
typedef pair <int, int> PII;

const int INF = 1000000000;
const int MAX = 1507;
const int MAX2 = 7000;
const int BASE = 1000000000;

int n, m;
char A[MAX][MAX];
int PCol[MAX];
int PRow[MAX];
int Row[MAX];

void sort_left(int row, int l, int r)
{
    VI a, b;
    FOR (i,l,r+1)
        if (A[row][PCol[i]] == '1')
            a.PB(PCol[i]);
        else
            b.PB(PCol[i]);
    FOR (i,0,SZ(a))
        PCol[l+i] = a[i];
    FOR (i,0,SZ(b))
        PCol[l+SZ(a)+i] = b[i];
}

void sort_right(int row, int l, int r)
{
    
    VI a, b;
    FOR (i,l,r+1)
        if (A[row][PCol[i]] == '1')
            b.PB(PCol[i]);
        else
            a.PB(PCol[i]);
    FOR (i,0,SZ(a))
        PCol[l+i] = a[i];
    FOR (i,0,SZ(b))
        PCol[l+SZ(a)+i] = b[i];
}

void shift_left(int l, int r, int m)
{
    VI a;
    FOR (i,m,r+1)
        a.PB(PCol[i]);
    FOR (i,l,m)
        a.PB(PCol[i]);
    FOR (i,l,r+1)
        PCol[i] = a[i-l];

}

bool same(VI E, int a, int b)
{
    FOR (i,0,SZ(E))
        if (A[E[i]][PCol[a]] != A[E[i]][PCol[b]])
            return 0;
    return 1;
}

void F(int row, int l, int r)
{
//  cout << row << endl;
    if (row >= n)
        return;
    int val = 0, pos = 0;
    /*if (l < 0 || l >= n || r < 0 || r >= n)
    {
        while (1){}
    }*/
    
    FOR (i,row,n)
    {
        int cnt = 0;
        FOR (j,l,r+1)
            if (A[i][PCol[j]] == '1')
                ++ cnt;
        if (cnt > val)
        {
            val = cnt;
            pos = i;
        }
    }
    if (val == 0)
        return;
    FOR (i,0,n)
        swap(A[row][i], A[pos][i]);
    swap(PRow[row], PRow[pos]);
    if (val == r-l+1)
    {
        F(row+1, l, r);
    return;
    }

    sort_left(row, l, r);
    VI E;
    //int ll = val-1, rr = val;
    int C[MAX];
    int U[MAX];
    FOR (i,0,n)
    U[i] = 0;
    
    vector <PII> Q;
    E.PB(row);
    FOR (it,row+1,n)
    {
        Q.clear();
        int j = l;
        while (j <= r)
        {
            int k = 1;
            while (j+k <= r && same(E, j, j+k))
                ++ k;
            Q.PB(MP(j, j+k-1));
            j += k;
    }


        int pos = 0, cnt = 0, i = -1;
    FOR (ii,row+1,n)
    {
        if (U[ii] == 1)
            continue;
        FOR (j,0,SZ(Q))
            C[j] = 0;
        pos = 0;
        FOR (j,l,r+1)
        {
            if (A[ii][PCol[j]] == '0')
            continue;
            while (Q[pos].second < j)
            ++ pos;
            ++ C[pos];
        }
        cnt = 0;
        FOR (j,0,SZ(Q))
            if (C[j] != 0)
                ++ cnt;
        if (cnt > 1)
        {
            i = ii;
            break;
        }
    }
    if (i == -1)
        break;
    U[i] = 1;
    E.PB(i);
        bool full = 1;
        FOR (j,1,SZ(Q)-1)
            if (C[j] != Q[j].second - Q[j].first + 1)
                full = 0;
        if (!full && C[0] > 0 && C[SZ(Q)-1] > 0)
        {
            FOR (j,0,SZ(Q)-1)
                sort_left(i, Q[j].first, Q[j].second);
            sort_left(i, Q.back().first, Q.back().second);
            shift_left(l, Q.back().first+C[SZ(Q)-1]-1, Q.back().first);
        sort_right(i, Q[0].first, Q[0].first+C[SZ(Q)-1]-1);
        }
        else
        {
            FOR (j,0,SZ(Q))
                if (C[j] > 0)
                {
                    sort_right(i, Q[j].first, Q[j].second);
                    break;
                }
            RFOR (j,SZ(Q),0)
                if (C[j] > 0)
                {
                    sort_left(i, Q[j].first, Q[j].second);
                    break;
                }
        }

    }

   

    FOR (i,0,SZ(Q))
        F(row+1, Q[i].first, Q[i].second);
}

int main()
{
    #ifndef ONLINE_JUDGE
      freopen("in.txt", "r", stdin);
    #endif

    scanf("%d", &n);
    FOR (i,0,n)
    {
        scanf("%s", A[i]);
   // FOR (j,0,n)
     // A[i][j] = char('0' + (rand() % 1000 == 0));
    }
    FOR (i,0,n)
    {
        PRow[i] = i;
        PCol[i] = i;
    }
    F(0, 0, n-1);
    bool ok = 1;
    FOR (i,0,n)
    {
        int cnt = 0;
        FOR (j,0,n)
        {
            if (A[i][PCol[j]] == '1' && cnt == 0)
                ++ cnt;
            if (A[i][PCol[j]] == '0' && cnt == 1)
                ++ cnt;
            if (A[i][PCol[j]] == '1' && cnt > 1)
                ok = 0;
        }
    }
    if (!ok)
    {
        cout << "NO" << endl;
        return 0;
    }
    cout << "YES" << endl;

    FOR (i,0,n)
        Row[PRow[i]] = i;

    FOR (i,0,n)
    {
        FOR (j,0,n)
            cout << A[Row[i]][PCol[j]];
        cout << endl;
    }





    return 0;
}