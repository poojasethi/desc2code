#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <assert.h>
#include <ctime>
using namespace std;
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
const ld pi = acos(-1.);
typedef pair<int,int> pii;
#define X first
#define Y second
typedef vector<int> vi;

bool matr[505][505];

int sz[505];
int common[505][505];

typedef pii segment;

segment incomp[505], cf[505];

int cnum[505], leader[505];
bool cov[505], done[505];
int in[505][505];

segment intersect(const segment &a, const segment &b)
{
   return mp(max(a.X, b.X), min(a.Y, b.Y));
}

int len(const segment &a)
{
    return max(0, a.Y - a.X + 1);
}
int n;
   
bool dfs(int v, int curcomp, segment force)
{
   cnum[v] = curcomp;
   //checking
   incomp[v] = force;

   bool ok = 1;
   int L = incomp[v].X, R = incomp[v].Y;
   for (int i = 0; i < n && ok; i++)
      if (cnum[i] == curcomp && len(intersect(incomp[v], incomp[i])) != common[v][i])
         ok = 0;
   if (!ok)
   {
       cnum[v] = -1;
       return 0;
   }
   for (int i = 0; i < n; i++)
      if ((common[v][i] != sz[v] && common[v][i] != sz[i] && common[v][i] != 0) || (common[v][i] == sz[v] && sz[i] == sz[v]))
      {
          assert (cnum[i] == -1 || cnum[i] == cnum[v]);
          if (cnum[i] == cnum[v]) continue;
          segment left = mp(L + common[v][i] - sz[i], L + common[v][i] - 1); 
          assert(len(left) == sz[i]);
          segment right = mp(R - common[v][i] + 1, R - common[v][i] + sz[i]); 
          assert(len(right) == sz[i]);
          assert(len(intersect(force,left)) == common[v][i]);
          assert(len(intersect(force,right)) == common[v][i]); 
          if (!dfs(i, curcomp, left) && !dfs(i, curcomp, right))
          {
              cnum[v] = -1;
              return 0;
          }
      }
   return 1;
}


int main()
{
   cin >> n;
   for (int i = 0; i < n; i++) sz[i] = 0;
   for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
      {
          char u;
          cin >> u;
          matr[i][j] = u == '1';
          sz[i] += matr[i][j];
      }
   for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
      {
          common[i][j] = 0;
          for (int k = 0; k < n; k++)
             if (matr[i][k] && matr[j][k]) common[i][j]++;
      }
   for (int i = 0; i < n; i++) cnum[i] = -1;
   int cnt = 0;
   for (int i = 0; i < n; i++)
      if (cnum[i] == -1) 
      {
         leader[cnt] = i;
         if (!dfs(i, cnt, mp(0, sz[i]-1)))
         {
            cout << "NO" << endl;
            return 0;
         }
         cnt++;
      }
      for (int i = 0; i < cnt; i++)
      for (int j = 0; j < cnt; j++)
         in[i][j] = 0;
   for (int i = 0; i < cnt; i++)
   {
      int minx = (int)1e9;
      for (int j = 0; j < n; j++)
         if (cnum[j] == i) minx = min(minx, incomp[j].X);
      for (int j = 0; j < n; j++)
         if (cnum[j] == i) incomp[j].X -= minx, incomp[j].Y -= minx;
      done[i] = 0;
      for (int j = 0; j < n; j++)
         if (cnum[j] == i)
         {
             for (int k = 0; k < n; k++)
                if (common[j][k] == sz[j]) in[i][cnum[k]] = 1;
         }
   }
//   for (int i = 0; i < n; i++) cout << incomp[i].X << ".." << incomp[i].Y << endl;


   for (int it = 0; it < cnt; it++)
      for (int i = 0; i < cnt; i++)
      {
         if (done[i]) continue;
         int ups = 0;
         for (int j = 0; j < cnt && !ups; j++)
            if (i != j && in[i][j] == 1 && !done[j]) ups = 1;
         if (ups) continue;
         bool gok = 0;
         for (int pos = 0; pos < n; pos++)
         {
             bool ok = 1;
             for (int j = 0; j < n && ok; j++)
                if (cnum[j] == i)
                {
                   if (incomp[j].Y + pos >= n) {ok = 0; break;}
                   for (int k = 0; k < n && ok; k++)
                      if (done[cnum[k]] && common[k][j] != len(intersect(mp(incomp[j].X+pos,incomp[j].Y+pos), incomp[k])))
                        ok = 0;
                }
             if (ok)
             {
                for (int j = 0; j < n; j++)
                   if (cnum[j] == i) incomp[j].X += pos, incomp[j].Y += pos;
                gok = 1;
                break;
             }
         }
         if (!gok) 
         {
             cout << "NO\n";
             return 0;
         }
         done[i] = 1;
      }
   for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
         assert(len(intersect(incomp[i], incomp[j])) == common[i][j]);
   cout << "YES\n";
   for (int i = 0; i < n; i++, cout << "\n")
      for (int j = 0; j < n; j++)
         cout << bool(j >= incomp[i].X && j <= incomp[i].Y);
   return 0;
}