#include<cstdio>
#include<vector>
#include<algorithm>
#define pb push_back
using namespace std;
typedef vector<int> table;
typedef vector<table> matrix;
const int mn=510;
int n,a[mn][mn],cntb[mn];
int perm[mn],mark[mn];
table e[mn];
char map[mn][mn];
bool split(matrix&u,table&b,matrix&wh,int r)
{
    int k=b[r];
    swap(b[r],b.back());
    b.pop_back();
    matrix nu,nwh;
    for(int D=0;D<=1;D++)
    {
        int seen=0;
        bool fail=0;
        nu.clear(),nwh.clear();
        for(int i=0;i<(int)u.size();i++)
        {
            table x[2];
            for(int j=0;j<(int)u[i].size();j++)
            {
                int z=u[i][j];
                x[a[k][z]].pb(z);
            }
            int pp[2]={nu.size()+1,nu.size()};
            if(!seen&&i!=u.size()-1)
            {
                swap(pp[0],pp[1]);
                if(x[0].size())nu.pb(x[0]);
                if(x[1].size())nu.pb(x[1]),seen=1;
            }
            else
            {
                if(x[1].size()&&seen==2){fail=1;break;}
                if(x[1].size())nu.pb(x[1]);
                if(x[0].size())nu.pb(x[0]),seen=2;
            }
            if(fail)break;
            nwh.resize(nu.size());
            if(x[0].size()&&x[1].size())
            {
                int p=1;
                if(x[0].size()<x[1].size())p=0;
                for(int j=0;j<wh[i].size();j++)
                {
                    int cnt=0;
                    int z=wh[i][j];
                    if(z==k)continue;
                    for(int k=0;k<x[p].size();k++) cnt+=a[z][x[p][k]];
                    if(cnt&&cnt!=cntb[z])mark[z]=1;
                    else
                    {
                        if(cnt==cntb[z])nwh[pp[p]].pb(z);
                        else nwh[pp[p^1]].pb(z);
                    }
                }
            }
            else if(x[0].size()||x[1].size())nwh.back()=wh[i];
            if(i==u.size()-1&&!x[0].size())nwh.pb(table()),nu.pb(table());
        }
        if(fail)
        {
            reverse(u.begin(),u.end()-1);
            reverse(wh.begin(),wh.end()-1);
        }
        else
        {
            u=nu;
            wh=nwh;
            return 1;
        }
    }
    return 0;
}
bool solve(table&b,table&in,int lo)
{
    for(int i=0;i<(int)b.size();i++)
        if(mark[b[i]]||cntb[b[i]]==in.size())
        {
            swap(b[i],b.back());
            b.pop_back();
        }
    if(!b.size())
    {
        for(int i=0;i<(int)in.size();i++)perm[in[i]]=lo+i;
        return 1;
    }
    int best=0;
    for(int i=0;i<(int)b.size();i++) if(cntb[b[i]]>cntb[b[best]])best=i;
    matrix uu;uu.pb(in);
    matrix wh;wh.pb(b);
    mark[b[best]]=1;
    if(!split(uu,b,wh,best))return 0;
    while(b.size())
    {
        int cnd=-1;
        for(int i=0;i<(int)b.size();i++) if(mark[b[i]]){cnd=i;break;}
        if(cnd==-1)
        {
            for(int j=0;j<(int)uu.size();j++)
            {
                if(!solve(wh[j],uu[j],lo))return 0;
                lo+=uu[j].size();
            }
            return 1;
        }
        else
            if(!split(uu,b,wh,cnd))return 0;
    }
    for(int i=0;i<(int)uu.size();i++)
    {
        solve(wh[i],uu[i],lo);
        lo+=uu[i].size();
    }
    return 1;
}
int main()
{
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        scanf("%s",map[i]);
        for(int j=0;j<n;j++)
        {
            cntb[i]+=(a[i][j]=map[i][j]-48);
            if(a[i][j])e[i].pb(j);
        }
    }
    table tb,rt;
    for(int i=0;i<n;i++) rt.pb(i);
    for(int i=0;i<n;i++)
        if(cntb[i]>0&&cntb[i]<n)
            tb.pb(i);
    int res[mn][mn];
    if(solve(tb,rt,0))
    {
        puts("YES");
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                res[i][perm[j]]=a[i][j];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
                printf("%d",res[i][j]);
            printf("\n");
        }
        return 0;
    }
    puts("NO");
    return 0;
}