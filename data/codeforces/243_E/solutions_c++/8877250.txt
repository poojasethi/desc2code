#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <vector>
#define N 510
#define M N*8
#define c(x) a[x].a
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	vector<int> a;
	int ty,flag,cov;
} a[M];
int i,j,k,n,m,t,an;
int re[N],s[M],size[M];
char p[N][N];
inline void Cov(int x) {
	if (a[x].ty!=2||a[x].flag) return;
	a[x].cov^=1;
	reverse(c(x).begin(),c(x).end());
}
inline void renew(int x) {
	int i;
	if (!a[x].cov) return;
	a[x].cov=0;
	for (i=0;i<c(x).size();i++) {
		int A=c(x)[i];
		Cov(A);
	}
}
void dfs(int x) {
	renew(x);
	int i;
	size[x]=x<=n;
	for (i=0;i<c(x).size();i++) {
		int A=c(x)[i];
		dfs(A);
		s[x]+=s[A];
		size[x]+=size[A];
	}
}
void dfs_ans(int x) {
	renew(x);
	int i;
	if (x<=n) re[++an]=x;
	for (i=0;i<c(x).size();i++) {
		int A=c(x)[i];
		dfs_ans(A);
	}
}
inline void fail() {
	printf("NO\n");
	exit(0);
}
inline void Cl(int x) {
	c(x).clear();
	a[x].ty=a[x].cov=a[x].flag=0;
}
void Dfs(int x,int y) {//y=1 ���� 2 ���� 
	renew(x);
	if (size[x]==s[x]) return;
	int i,j;
	if (a[x].ty==1) {
		vector<int> quan,kong,zi;
		for (i=0;i<c(x).size();i++) {
			int A=c(x)[i];
			if (size[A]==s[A]) quan.push_back(A);
			else if (!s[A]) kong.push_back(A);
			else zi.push_back(A);
		}
		if (zi.size()>2) fail();
		if (zi.size()==2&&y) fail();
		for (i=0;i<zi.size();i++) {
			int A=zi[i];
			if (!quan.size()&&zi.size()==1&&!y) Dfs(A,0);
			else {
				if (zi.size()==1&&y) Dfs(A,y);
				else Dfs(A,i+1);
			}
		}
		int a1=0,a2=0;
		if (quan.size()==1) a1=quan[0];
		else if (quan.size()) {
			a[a1=++t].ty=1;
			c(a1)=quan;
		}
		if (kong.size()==1) a2=kong[0];
		else if (kong.size()) {
			a[a2=++t].ty=1;
			c(a2)=kong;
		}
		if (zi.size()==1) {
			if (!a1) a1=zi[0];
			else {
				int A=++t;
				a[A].ty=2;
				a[A].flag=!y;
				if (y!=2) c(A).push_back(zi[0]);
				c(A).push_back(a1);
				if (y==2) c(A).push_back(zi[0]);
				a1=A;
			}
		}
		if (zi.size()==2) {
			int A=++t;
			a[A].ty=2;
			a[A].flag=1;
			c(A).push_back(zi[0]);
			if (a1) c(A).push_back(a1);
			c(A).push_back(zi[1]);
			a1=A;
		}
		if (!y) {
			if (!a2) a[x]=a[a1];
			else {
				int A=++t;
				a[A].ty=1;
				c(A)=kong;
				c(A).push_back(a1);
				a[x]=a[A]; Cl(A); t--;
			}
		} else {
			int A=++t;
			a[A].ty=2;
			if (y==2) c(A).push_back(a1);
			if (a2) c(A).push_back(a2);
			if (y==1) c(A).push_back(a1);
			a[x]=a[A]; Cl(A); t--;
		}
	} else {
		for (i=0;i<c(x).size();i++) {
			int A=c(x)[i];
			if (s[A]) break;
		}
		for (j=i;j<c(x).size();j++) {
			int A=c(x)[j];
			if (!s[A]) break;
		}
		int l=i,r=j-1;
		for (i=r+1;i<c(x).size();i++) {
			int A=c(x)[i];
			if (s[A]) fail();
		}
		for (i=l+1;i<r;i++) {
			int A=c(x)[i];
			if (size[A]!=s[A]) fail();
		}
		if (y==1) {
			int A=c(x)[r];
			if (r+1!=c(x).size()||l<r&&size[A]!=s[A]) {
				if (!a[x].flag) fail();
				a[x].flag=0;
				Cov(x);
				Dfs(x,y);
				return;
			}
			a[x].flag=0;
		}
		if (y==2) {
			int A=c(x)[l];
			if (l||l<r&&size[A]!=s[A]) {
				if (!a[x].flag) fail();
				a[x].flag=0;
				Cov(x);
				Dfs(x,y);
				return;
			}
			a[x].flag=0;
		}
		if (l==r) Dfs(c(x)[l],y);
		else {
			Dfs(c(x)[l],1);
			Dfs(c(x)[r],2);
		}
	}
}
int main() {
	//freopen("pq.in","r",stdin);
	//freopen("pq.out","w",stdout);
	scanf("%d",&n);
	a[t=n+1].ty=1;
	For(i,1,n) c(t).push_back(i);
	For(i,1,n) {
		scanf("%s",p[i]+1);
		memset(s,0,sizeof(s));
		For(j,1,n) if (p[i][j]=='1') s[j]=1;
		dfs(n+1);
		if (!s[n+1]) continue;
		Dfs(n+1,0);
	}
	dfs_ans(n+1);
	printf("YES\n");
	For(i,1,n) {
		For(j,1,n) printf("%c",p[i][re[j]]);
		printf("\n");
	}
	return 0;
}
