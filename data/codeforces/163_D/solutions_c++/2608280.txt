#include <cstdio>
#include <cmath>
#include <algorithm>

using namespace std;

typedef long long LL;

int T, n;
pair<LL, int> p[52];
LL V, ans, e[52][65], x, y, z, lima, limb;

void dfs_b(int now, LL a, LL b){
	if ((double)a * b * b > V) return;
	if (now == n){
		LL c = V / (a * b), S = a * b + a * c + b * c;
		if (S < ans) ans = S, x = a, y = b, z = c;
	}else{
		for (int i = p[now].second; i >= 0; i--){
			p[now].second -= i;
			dfs_b(now + 1, a, b * e[now][i]);
			p[now].second += i;
		}
	}
}

void dfs_a(int now, LL a){
	if ((double)a * a * a > V) return;
	if (now == n){
		if (a * sqrt(V / a) * 2 + V / a >= ans) return;
		dfs_b(0, a, 1);
	}else{
		for (int i = p[now].second; i >= 0; i--){
			p[now].second -= i;
			dfs_a(now + 1, a * e[now][i]);
			p[now].second += i;
		}
	}
}

int main(){
	for (scanf("%d", &T); T--;){
		ans = 1e18; V = 1;
		scanf("%d", &n);
		for (int i = 0; i < n; i++) scanf("%I64d%d", &p[i].first, &p[i].second);
		sort(p, p + n); reverse(p, p + n);
		for (int i = 0; i < n; i++){
			e[i][0] = 1;
			for (int j = 1; j <= p[i].second; j++) e[i][j] = e[i][j - 1] * p[i].first;
			V *= e[i][p[i].second];
		}
		ans = V + V + 1; x = y = 1; z = V;
		dfs_a(0, 1);
		printf("%I64d %I64d %I64d %I64d\n", ans * 2, x, y, z);
	}
}
