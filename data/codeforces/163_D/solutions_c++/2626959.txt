#include <iostream>
#include <cmath>
using namespace std;
long long V,p[64][64],ans,A,B,C;
int t,i,j,k,h[64];
void dfs2(long long a,long long b,int now)
{
		 if (V/a/b<b) return;
		 if (now>k)
		 {
 		 		long long c=V/a/b;
 		 		if (a*b+a*c+b*c<ans)
 		 		{
		  	 	 ans=a*b+a*c+b*c;
 	  		 	 A=a;
  			 	 B=b;
 			 	 	 C=c;
	 			 }
		 		return ;
		 }
		 int i;
		 for (i=h[now];i>=0;i--) dfs2(a,p[now][i]*b,now+1);
}
void dfs(long long a,int now)
{
		 if (V/a/a<a) return ;
		 if (now>k)
		 {
		 		long long bc=V/a;
		 		if (sqrt(bc)*2*a+bc<ans) dfs2(a,1,1);
		 		return ;
		 }
		 int i;
		 for (i=h[now];i>=0;i--)
		 {
		 		 h[now]-=i;
		 		 dfs(p[now][i]*a,now+1);
		 		 h[now]+=i;
		 }
}
int main()
{
		ios::sync_with_stdio(false);
		cin >> t;
		while (t--)
		{
					cin >> k;
					V=1;
					for (i=1;i<=k;i++)
					{
							cin >> p[i][1] >> h[i];
							p[i][0]=1;
							for (j=2;j<=h[i];j++) p[i][j]=p[i][j-1]*p[i][1];
							V*=p[i][h[i]];
					}
					ans=V*2+1;
					A=V;
					B=1;
					C=1;
					dfs(1,1);
					cout <<ans*2<<" "<<A<<" "<<B<<" "<<C<<endl;
		}
 		return 0;
}