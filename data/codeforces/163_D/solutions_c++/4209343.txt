#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <algorithm>
using namespace std;
typedef long long ll;
ll py[1001], px[1001];
ll n, get = 0;
ll Min;
ll ansA, ansB, ansC;
ll V = 1, stepA, stepB;
void dfs2(int x, ll tmp)
{
	if (tmp > stepB) return;
	if (x == n + 1)
	{
		ll A = get, B = tmp, C = (ll )(V / A / B);
		if (A * B + B * C + C * A < Min) 
			Min = A * B + B * C + C * A, ansA = A, ansB = B, ansC = C;
		return;
	}
	if (py[x]) py[x] --, dfs2(x, tmp * px[x]), py[x] ++;
	dfs2(x + 1, tmp);
}
void dfs(int x, ll tmp)
{
	if (tmp > stepA) return;
	if (x == n + 1) 
	{ 
		if (V / tmp + tmp * sqrt(V * 1.0 / tmp) * 2 < Min) 
			stepB = (ll )(sqrt(V * 1.0 / tmp)) + 1, get = tmp, dfs2(1, 1); 
		return ; 
	}
	if (py[x]) py[x] --, dfs(x, tmp * px[x]), py[x] ++;
	dfs(x + 1, tmp);
}
void Work( )
{
	Min = (1LL << 62), V = 1;
	scanf("%I64d", &n);
	for (int i = 1; i <= n; i ++)
		scanf("%I64d %I64d", &px[i], &py[i]);
	for (ll i = 1; i <= n; i ++)
		for (ll j = 1; j <= py[i]; j ++)
			V *= px[i]; 
	stepA = (ll )(pow(V * 1.0, 1.0 / 3.0)) + 1;
	dfs(1, 1);
	printf("%I64d %I64d %I64d %I64d\n", Min * 2, ansA, ansB, ansC);
}
int main( )
{
	int t = 0;
	scanf("%d", &t);
	while (t --) Work();
	return 0;
}
