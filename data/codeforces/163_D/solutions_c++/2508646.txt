#include <iostream>
#include <cstring>
#include <algorithm>
#include <climits>
#include <cmath>
using namespace std;

typedef long long LL;

int n;
LL x[111], y[111], u[111], p[111][111], V, V_A, ans, _A, _B, _C;

void dfsB(int k, LL A, LL B)
{
	if (V_A / B < B) return;
	if (k == n)
	{
		LL C = V_A / B;
		if (A * B + B * C + A * C >= ans) return;
		ans = A * B + B * C + A * C;
		_A = A, _B = B, _C = C;
		return;
	}
	for (int i = u[k]; i >= 0; --i)
		dfsB(k + 1, A, B * p[k][i]);
}

void dfsA(int k, LL A)
{
	if (V / A / A < A) return;
	if (k == n)
	{
		LL B = sqrt(double(V / A));
		if ((A * B << 1) + V / A >= ans) return;
		V_A = V / A;
		dfsB(0, A, 1LL);
		return;
	}
	for (int i = y[k]; i >= 0; --i)
		u[k] = y[k] - i, dfsA(k + 1, A * p[k][i]);
}

void work()
{
	cin >> n; V = 1LL;
	for (int i = 0; i < n; ++i)
	{
		cin >> x[i] >> y[i];
		p[i][0] = 1LL;
		for (int j = 1; j <= y[i]; ++j)
			p[i][j] = p[i][j-1] * x[i];
		V *= p[i][y[i]];
	}
	ans = LONG_LONG_MAX;
	dfsA(0, 1LL);
	cout << ans + ans << ' ' << _A << ' ' << _B << ' ' << _C << '\n';
}

int main()
{
	ios::sync_with_stdio(false);
	int t;
	for (cin >> t; t--; )
		work();
	return 0;
}
