#include <cstdio>
#include <algorithm>
using namespace std;

const int maxn = 10008;
int n, m, d[maxn], f[maxn], cnt, err, ans[maxn], tot; 
bool vis[maxn], inq[maxn], col[maxn];

struct Edge {
	Edge *n; int v, p;
	Edge() {}
} *h[maxn], *top[maxn];

inline void AddEdge(int u, int v, int p) {
	Edge *x = new Edge(); x->v = v;
	x->n = h[u]; h[u] = x; x->p = p;
}

void Calc(int u, int fa, int k) {
	inq[u] = vis[u] = true; col[u] = k;
	for (Edge *i = h[u]; i; i = i->n) {
		if (i->v == fa) continue ;
		if (!vis[i->v]) 
			top[i->v] = i, Calc(i->v, u, 1 - k), f[u] += f[i->v], d[u] += d[i->v];
		else if (inq[i->v]) 
			if (col[u] == col[i->v]) cnt++, err = i->p, f[u]++; 
			//if find the Odd ring
			else d[u]++;
		else if (col[u] == col[i->v]) f[u]--; else d[u]--;
	}
	inq[u] = false;
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= m; i++) {
		int u, v; scanf("%d%d", &u, &v);
		AddEdge(u, v, i); AddEdge(v, u, i);
	}
	for (int i = 1; i <= n; i++)
		if (!vis[i]) Calc(i, 0, 0);
	if (!cnt)
		for (int i = 1; i <= m; i++)
			ans[tot++] = i;
	else {
		if (cnt == 1) ans[tot++] = err;
		for (int i = 1; i <= n; i++)
			if (f[i] == cnt && !d[i])
				ans[tot++] = top[i]->p;
	}
	sort(ans, ans + tot);
	printf("%d\n", tot);
	for (int i = 0; i < tot; i++)
		printf("%d ", ans[i]);
	return 0;
}
