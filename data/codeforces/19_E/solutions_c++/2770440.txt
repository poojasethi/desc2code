#include <cstdio>
#include <cstring>

const int maxn = 10001;

struct edge {
	int v, num;
	edge *next;
	edge(int _v, int _num, edge *_next)
	: v(_v), num(_num), next(_next)  { }
};

int n, m, p = 0, num = 0, ans = 0,
	color[maxn], prt[maxn], dep[maxn], cnt1[maxn], cnt2[maxn];
bool flag[maxn];
edge *E[maxn];

void dfs(int u, int c) {
	color[u] = c;
	for (edge *e = E[u]; e; e = e->next)
		if (!color[e->v]) {
			dep[e->v] = dep[u] + 1;
			prt[e->v] = e->num;
			dfs(e->v, -c);
			cnt1[u] += cnt1[e->v];
			cnt2[u] += cnt2[e->v];
		} else if (dep[e->v] + 1 < dep[u]) {
			if (color[e->v] == c) {
				++ p;
				num = e->num;
				++ cnt1[u],  -- cnt1[e->v];
			} else {
				++ cnt2[u],  -- cnt2[e->v];
			}
		}
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 1, u, v; i <= m; ++ i) {
		scanf("%d%d", &u, &v);
		E[u] = new edge(v, i, E[u]);
		E[v] = new edge(u, i, E[v]);
	}
	for (int i = 1; i <= n; ++ i)
		if (!color[i])  dfs(i, 1);
	if (!p) {
		for (int i = 1; i <= m; ++ i)  flag[i] = true;
	} else {
		if (p == 1)  flag[num] = true;
		for (int i = 1; i <= n; ++ i)
			if (cnt1[i] == p && !cnt2[i])  flag[prt[i]] = true;
	}
	for (int i = 1; i <= m; ++ i)
		if (flag[i])  ++ ans;
	printf("%d\n", ans);
	for (int i = 1; i <= m; ++ i)
		if (flag[i])  printf("%d ", i);
	return 0;
}
