#include <bits/stdc++.h>

using namespace std;

const int MAX_N = 1000000 + 10;

struct Edge {
	int to, next;
}e[MAX_N + MAX_N];

int head[MAX_N], etot = 1;

void adde(int a, int b) {
	e[++etot] = (Edge) {b, head[a]}; head[a] = etot;
}

int n, m, d[MAX_N], vis[MAX_N], f[MAX_N], c[MAX_N + MAX_N], col;

void dfs(int x, int fa) {
	vis[x] = 1;
	for(int i = head[x]; i; i = e[i].next) {
		int y = e[i].to;
		if(y == fa || d[y] > d[x]) continue;
		if(!vis[y]) d[y] = d[x] + 1, dfs(y, x), f[x] += f[y], c[i] = f[y];
		else {
			if((d[y] ^ d[x]) & 1) f[x]--, f[y]++;
			else f[x]++, f[y]--, c[i] = 1, col++;
		}
	}
}

int main() {
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= m; i++) {
		int x, y; scanf("%d%d", &x, &y);
		adde(x, y); adde(y, x);
	}
	for(int i = 1; i <= n; i++) if(!vis[i])
		dfs(i, 0);
	if(!col) {
		printf("%d\n", m);
		for(int i = 1; i < m; i++)
			printf("%d ", i);
		if(m)
			printf("%d\n", m);
	} else {
		static int ans[MAX_N];
		int tot = 0;
		for(int i = 2; i <= etot; i++) if(c[i] == col) ans[++tot] = i >> 1;
		printf("%d\n", tot);
		for(int i = 1; i < tot; i++)
			printf("%d ", ans[i]);
		if(tot)
			printf("%d\n", ans[tot]);
	}
	return 0;
}
