#include<stdio.h>
#include<algorithm>
using namespace std;
struct edge
{
	int v,i;
	edge *n;
};
edge EPool[30010],*ep=EPool,*g[10010];
int cnt,err,cntd[10010],cnts[10010],c[10010];
int vis[10010];
inline void addedge(int u,int v,int i)
{
	ep->v=v,ep->i=i,ep->n=g[u],g[u]=ep++;
	ep->v=u,ep->i=i,ep->n=g[v],g[v]=ep++;
}
int n,m;
void dfs(int u,int f,int k)
{
	vis[u]=1;
	c[u]=k;
	for(edge *i=g[u];i;i=i->n)if(i->i!=f)
	{
		int v=i->v;
		if(!vis[v])dfs(v,i->i,1-k),cntd[f]+=cntd[i->i],cnts[f]+=cnts[i->i];
		else if(vis[v]==1)
			if(c[u]==c[v])cnt++,err=i->i,cntd[f]++;
			else cnts[f]++;
		else
			if(c[u]==c[v])cntd[f]--;
			else cnts[f]--;
	}
	vis[u]=2;
}
int ans[10010],nn;
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;i++)
	{
		int u,v;
		scanf("%d%d",&u,&v);
		addedge(u,v,i);
	}
	for(int i=1;i<=n;i++)if(!vis[i])dfs(i,0,0);
	if(!cnt)for(int i=1;i<=m;i++)ans[++nn]=i;
	else
	{
		if(cnt==1)ans[++nn]=err;
		for(int i=1;i<=m;i++)if(cntd[i]==cnt&&!cnts[i])ans[++nn]=i;
	}
	sort(ans+1,ans+nn+1);
	printf("%d\n",nn);
	for(int i=1;i<=nn;i++)printf("%d ",ans[i]);
	putchar('\n');
	return 0;
}
