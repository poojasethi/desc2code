#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#define Rep(i, x, y) for (int i = x; i <= y; i ++)
#define RepE(i, x) for (int i = pos[x]; i; i = g[i].nex)
using namespace std;
typedef long long LL;
const int N = 100005;
struct arr { int y, nex; } g[N];
int n, m, pos[N], sz = 1, ans[N], e, st[N], tp, lv[N], f[N], tot, az, v[N], h[N];
void Init(int x, int y) { g[++ sz] = (arr) { y, pos[x] }, pos[x] = sz; }
void Dfs(int x, int ft) {
	st[++ tp] = x, v[x] = 2, lv[x] = tp;
	RepE(i, x) {
		int y = g[i].y;
		if (!v[y]) Dfs(y, x), h[x] += h[y], f[x] += f[y];
		else if (y != ft && v[y] == 2) {
			if ((lv[x] - lv[y]) % 2 == 0) f[y] --, f[x] ++, e = i, tot ++;
			else h[x] ++, h[y] --;
		}
	}
	tp --, v[x] = 1;
}
void Upd(int x) {
	v[x] = 1;
	RepE(i, x) {
		int y = g[i].y;
		if (v[y]) continue ;
		Upd(y);
		if (h[y] == 0 && f[y] == tot) ans[++ az] = i / 2;
	}
	// cout << x <<" "<< f[x]<<endl;
}
int main()
{
	scanf ("%d%d", &n, &m);
	Rep(i, 1, m) {
		int x, y;
		scanf ("%d%d", &x, &y), Init(x, y), Init(y, x);
	}
	Rep(i, 1, n) if (!v[i]) Dfs(i, i);
	memset(v, 0, sizeof(v));
	if (!tot) Rep(i, 1, m) ans [++ az] = i;
	else Rep(i, 1, n) if (!v[i]) Upd(i);
	if (tot == 1) ans[++ az] = e / 2;
	printf("%d\n", az);
	sort(ans+1, ans+az+1);
	Rep(i, 1, az) printf ("%d ", ans[i]);
	puts("");

    // system("pause");
    return 0;
}
