#include<iostream>
#include<cstdio>
#include<map>
using namespace std;

map<int, int> S;
int H, Q;

int val(int x){
	return S.count(x) ? S[x] : 0;
}

double get(int node, int level, double maxOther){

	if(level >= H)
		return max((int)maxOther, val(node));

	//remove left edge
	double r1 = max((int)maxOther, val(node)-val(2*node));
	if(val(2*node) > r1)
		r1 = get(2*node, level+1, r1);

	//remove right edge
	double r2 = max((int)maxOther, val(node)-val(2*node+1));
	if(val(2*node+1) > r2)
		r2 = get(2*node+1, level+1, r2);

	return (r1+r2)/2;
}

int main(){

	//freopen("1.in", "rt", stdin);

	cin >> H >> Q;
	for(int i = 0 ; i < Q ; i++){
		string s; cin >> s;
		if(s[0] == 'a'){
			int v, e; cin >> v >> e;
			while(v >= 1){
				S[v] += e;
				v/=2;
			}
		}else{
			double d = get(1, 0, 0);
			printf("%.9lf\n", d);
		}
	}

	return 0;
}
