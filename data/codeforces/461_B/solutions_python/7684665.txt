#!/usr/bin/python

#
# Codeforces
# 426/D non-recursive; 
#
# @author godmar@gmail.com
#
from collections import defaultdict
from operator import mul

def InputInts(): return map(int, raw_input().split())

def productof(L):
    return reduce(mul, L, 1)

n = InputInts()[0]
P = InputInts()     # parent array
RootParent = -1     # virtual node that represents the root's parent
def getparent(v):
    return P[v-1] if v > 0 else RootParent

colorof = InputInts()     # colors

BLACK=1
WHITE=0

# compute lists of children for each node
children = defaultdict(list)
for i, p in enumerate(P):
    children[p].append(i+1)

# post-order traversal
# returns pair (b, w) where b counts the number of
# ways to split the subtree such that the node is part
# of a component that contains a black node
# w counts the number of ways such that it does not.
def traverse(vertex):
    root = vertex
    # RootParent is placed at the bottom of the stack to make sure
    # that dfsstack[-1] will always retrieve a vertex
    dfsstack = [RootParent, root]
    results = []

    def reducevertex(vertex, chresults):
        # summarize
        bwprod = productof((b+w for b, w in chresults if b > 0))

        if colorof[vertex] == BLACK:
            b = bwprod
            w = 0
        else:
            b = sum(_b * bwprod/(_b+_w) for _b, _w in chresults if _b > 0 and _b + _w > 0)
            w = bwprod

        return b, w

    # post-order traversal, iterative
    while len(dfsstack) > 1:
        vertex = dfsstack.pop()

        for child in children[vertex]:
            dfsstack.append(child)

        numChildren = len(children[vertex])
        if numChildren == 0:
            # push leaf results
            results.append((1, 0) if colorof[vertex] == BLACK else (0, 1))

            # reduce results up the tree to the last node that has
            # unfinished branches
            stopAt = getparent(dfsstack[-1])
            while getparent(vertex) != stopAt:
                vertex = getparent(vertex)
                numChildren = len(children[vertex])
                chresults = results[-numChildren:]
                del results[-numChildren:]
                results.append(reducevertex(vertex, chresults))

    return results[0]

b, w = traverse(0)
print b % (10**9 + 7)
