#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <cmath>
#include <vector>
using namespace std;

const int maxn		=	100005;
const int maxm		=	10005;
const int maxnode	=	(maxn*3+maxm)*4;

int n,m;
double tree[maxnode];
vector<int> bak;
int a[maxn],b[maxm],h[maxn],l[maxn],r[maxn],p[maxm];

inline void cover(int num,int l,int r,int ll,int rr,double delta)
{
	if (ll<=bak[l] && bak[r]<=rr){
		tree[num]+=delta;
		return; 
	}
	if (rr<bak[l] || ll>bak[r]){
		return;
	}
	int mid=(l+r)/2;
	cover(num*2,l,mid,ll,rr,delta);
	cover(num*2+1,mid+1,r,ll,rr,delta);
}

inline double query(int num,int l,int r,int pos)
{
	if (pos<bak[l] || pos>bak[r]){
		return 0;
	}
	if (l==r){
		return tree[num];
	}
	int mid=(l+r)/2;
	return query(num*2,l,mid,pos)+query(num*2+1,mid+1,r,pos)+tree[num];
}

int main()
{
	scanf("%d%d",&n,&m);
	for (int i=0;i<n;++i){
		scanf("%d%d%d%d",&a[i],&h[i],&l[i],&r[i]);
		bak.push_back(a[i]);
		bak.push_back(a[i]+h[i]);
		bak.push_back(a[i]-h[i]);
	}
	for (int i=0;i<m;++i){
		scanf("%d%d",&b[i],&p[i]);
		bak.push_back(b[i]);
	}
	sort(bak.begin(),bak.end());
	bak.erase(unique(bak.begin(),bak.end()),bak.end());

	memset(tree,0,sizeof(tree));
	for (int i=0;i<n;++i){
		cover(1,0,bak.size()-1,a[i]-h[i],a[i]-1,log(1.0-l[i]/100.0));
		cover(1,0,bak.size()-1,a[i]+1,a[i]+h[i],log(1.0-r[i]/100.0));
	}

	double ans=0;
	for (int i=0;i<m;++i){
		double x=query(1,0,bak.size()-1,b[i]);
		ans+=exp(x)*p[i];
	}
	printf("%.10f\n",ans);
	
	return 0;
}

	  				     			  		  	 	 	