#include <cstdio>
#include <algorithm>
#include <vector>
#include <iostream>
#include <cmath>

using namespace std;

int main() {
  int n, m;
  cin>>n>>m;
  vector< pair<int, long double> > trees;
  vector< pair<int, int> > mushrooms;
  vector< pair<int, int> > obliterated;
  for (int i = 0; i < n; i++) {
    int a, h, l, r;
    cin>>a>>h>>l>>r;
    if (l == 100) {
      obliterated.push_back(make_pair(a - h, a - 1));
      continue;
    }
    if (r == 100) {
      obliterated.push_back(make_pair(a + 1, a + h));
      continue;
    }
    trees.push_back(make_pair(a - h, log(1 - (l/100.0))));
    trees.push_back(make_pair(a, -log(1 - (l/100.0))));
    trees.push_back(make_pair(a + 1, log(1 - (r/100.0))));
    trees.push_back(make_pair(a + h + 1, -log(1 - (r/100.0))));
  }
  trees.push_back(make_pair(1<<30, 0));
  sort(trees.begin(), trees.end());
  for (int i = 0; i < m; i++) {
    int b, z;
    cin>>b>>z;
    bool ob = false;
    for (int j = 0; j < obliterated.size(); j++) {
      if (obliterated[j].first <= b && obliterated[j].second >= b) {
        ob = true;
        break;
      }
    }
    if (!ob) {
      mushrooms.push_back(make_pair(b, z));
    }
  }
  sort(mushrooms.begin(), mushrooms.end());
  long double p = 0;
  long double ans = 0;
  for (int i = 0, j = 0; i < mushrooms.size(); i++) {
    while (trees[j].first <= mushrooms[i].first) {
      p += trees[j].second;
      j++;
    }
    ans += mushrooms[i].second * exp(p);
  }

  cout<<ans<<endl;
  return 0;
}

