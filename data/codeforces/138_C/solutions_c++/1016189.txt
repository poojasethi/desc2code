#include <vector>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <string>
#include <bitset>
#include <complex>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cctype>
using namespace std;

struct event {
    int x, add, p;

    event(int x, int add, int p): x(x), add(add), p(p) {
    }
    event() {
    }

    bool operator <(const event &a) const {
        return x < a.x || x == a.x && add > a.add;
    }
};

vector<event> ord;

int cntZero;
double power;

void add(int p, int add) {
    if (p == 0) {
        cntZero += add;
    } else {
        power += add * log(p / 100.);
    }
}

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; ++i) {
        int x, h, l, r;
        scanf("%d%d%d%d", &x, &h, &l, &r);
        ord.push_back(event(x - h, 1, 100 - l));
        ord.push_back(event(x - 1, -1, 100 - l));
        ord.push_back(event(x + 1, 1, 100 - r));
        ord.push_back(event(x + h, -1, 100 - r));
    }
    for (int i = 0; i < m; ++i) {
        int x, v;
        scanf("%d%d", &x, &v);
        ord.push_back(event(x, 0, v));
    }
    sort(ord.begin(), ord.end());
    double ans = 0;
    cntZero = 0;
    power = 0;
    for (int i = 0; i < ord.size(); ++i) {
        if (ord[i].add != 0) {
            add(ord[i].p, ord[i].add);
        } else {
            ans += (cntZero ? 0. : exp(power)) * ord[i].p;
        }
    }
    printf("%.10f\n", ans);
}


  		 		 	 	  	  			  	    	