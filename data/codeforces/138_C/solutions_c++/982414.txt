#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>

using namespace std;

typedef long long ll;
typedef long double db;

#define forab(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define forn(i, n) for(int (i) = 0; (i) < (int)(n); ++(i))

const ll inf = 3 * (ll)1e9;

struct tree {
	db d;
	tree *l, *r;
};

tree mem[10000000];
int mcol = 0;

tree *crt() {
	mem[mcol].d = 1;
	mem[mcol].l = mem[mcol].r = NULL;
	return &mem[mcol++];
}

void set(tree *t, ll L, ll R, ll l, ll r, db x) {
	if (L >= r || l >= R) return;
	if (l <= L && R <= r) {
		t->d *= x;
		return;
	}
	if (!t->l) t->l = crt();
	if (!t->r) t->r = crt();
	set(t->l, L, (L + R) / 2, l, r, x);
	set(t->r, (L + R) / 2, R, l, r, x);
}

db get(tree *t, ll L, ll R, ll p) {
	if (!t->l) return t->d;
	if ((L + R) / 2 > p) return t->d * get(t->l, L, (L + R) / 2, p);
	else return t->d * get(t->r, (L + R) / 2, R, p);
}

int n, m;
ll a, h, l, r;
ll b, z;
tree *t;
db ans = 0;

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    t = crt();
    scanf("%d%d", &n, &m);
    forn(i, n) {
        scanf("%I64d%I64d%I64d%I64d", &a, &h, &l, &r);
        set(t, -inf, inf, a - h, a, 1.0 - ((db)l) / 100.0);
        set(t, -inf, inf, a + 1, a + h + 1, 1.0 - ((db)r) / 100.0);
    }
    forn(i, m) {
        scanf("%I64d%I64d", &b, &z);
        ans += get(t, -inf, inf, b) * ((db)z);
    }
    cout << ans << '\n';
    return 0;
}
