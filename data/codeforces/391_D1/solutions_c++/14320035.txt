#include<bits/stdc++.h>
#define pb push_back
#define put insert
using namespace std;
int const maxn = 1e5+10, maxk = 70;
int n, m, x[maxn], y[maxn], l[maxn], cont, bit[maxk][maxn];

void update(int id, int idx, int val){
	while(idx < maxn) bit[id][idx] += val, idx += (idx&-idx);
}
int query(int id, int idx){
	int soma = 0;
	while(idx > 0) soma += bit[id][idx], idx -= (idx&-idx);
	return soma;
}

struct pii{
	int ini, fim, end, type;
	pii(int a, int b, int c, int d) : ini(a), fim(b), type(c), end(d) {}
};

vector<pii> p[maxk];

bool compare(pii a, pii b){ return a.ini < b.ini || (a.ini == b.ini && a.type < b.type); }

bool solve(int k){
	set<int> s;
	map<int,int> c;
	int cc = 0;
	for(int i = 1; i <= n; i++){
		int Y1 = y[i]+k, Y2 = y[i]+l[i]-k;
		if(Y1 > Y2) continue;
		s.put(Y1), s.put(Y2), s.put(x[i]);
	}
	for(int i = 1; i <= m; i++){
		int X1 = x[n+i]+k, X2 = x[n+i]+l[n+i]-k;
		if(X1 > X2) continue;
		s.put(X1), s.put(X2), s.put(y[i+n]);
	}
	for(set<int>::iterator it = s.begin(); it != s.end(); it++) c[*it] = ++cc;
	for(int i = 1; i <= n; i++){
		int Y1 = y[i]+k, Y2 = y[i]+l[i]-k;
		if(Y1 > Y2) continue;
		p[cont].pb(pii(c[x[i]],c[Y1],1,c[Y2]));
	}
	for(int i = 1; i <= m; i++){
		int X1 = x[n+i]+k, X2 = x[n+i]+l[n+i]-k;
		if(X1 > X2) continue;
		p[cont].pb(pii(c[X1],c[y[n+i]],0,-1));
		p[cont].pb(pii(c[X2],c[y[n+i]],2,-1));
	}
	sort(p[cont].begin(),p[cont].end(),compare);
	for(int i = 0; i < p[cont].size(); i++){
		int type = p[cont][i].type, Y = p[cont][i].fim;
		if(type == 0) update(cont,Y,1);
		if(type == 2) update(cont,Y,-1);
		if(type == 1){
		 int ini = p[cont][i].fim, fim = p[cont][i].end;
			int sum = query(cont,fim) - query(cont,ini-1);
			if(sum) return true;
		}
	}
	return false;
}
main(){
	scanf("%d%d",&n,&m);
	for(int i = 1; i <= n; i++) scanf("%d%d%d",&x[i],&y[i],&l[i]);
	for(int i = 1; i <= m; i++) scanf("%d%d%d",&x[n+i],&y[n+i],&l[n+i]);
	int ini = 0, fim = 1e9;
	for(int i = 1; i < maxk; i++){
		int mid = (ini+fim) / 2;
		bool cmp = solve(mid);
		if(cmp) ini = mid;
		else fim = mid;
		cont++;
	}
	printf("%d\n", ini);
}
