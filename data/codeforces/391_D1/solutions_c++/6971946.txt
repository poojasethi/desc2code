#include<bits/stdc++.h>
using namespace std;

#define sc( x ) scanf( "%d" , &x )
#define REP( i , n ) for( int i = 0 ; i < n ; ++i )
#define clr( t , val ) memset( t , val , sizeof( t ) )

#define pb push_back
#define all( v ) v.begin() , v.end()
#define SZ( v ) ((int)v.size())

#define N 50000

int XH[ N + 5 ] , YH[ N + 5 ] , LH[ N + 5 ];
int XV[ N + 5 ] , YV[ N + 5 ] , LV[ N + 5 ];
int n , m;
// type = 0 , a = x , b = y (inicio horizontal)
// type = 1 , a = x , b = y , c = L
// type = 2 , a = x , b = y (final horizontal)
struct event{
    int t , a , b , c ;
    event(){}
    event( int t , int a , int b , int c ) : t( t ) , a( a ) , b( b ) , c( c ) {}
};
bool operator < ( const event &u , const event &v ){
    if( u.a != v.a ) return u.a < v.a;
    if( u.t != v.t ) return u.t < v.t;
    return u.b < v.b;
}
bool solve( vector< event > &E ){
    sort( all( E ) );
    set< int > SET;
    REP( i , SZ( E ) ){
        if( E[ i ].t == 0 ){
            SET.insert( E[ i ].b );
        }else if( E[ i ].t == 1 ){
            set< int > :: iterator it1 = SET.upper_bound( E[ i ].b + E[ i ].c );
            set< int > :: iterator it2 = SET.lower_bound( E[ i ].b );
            if( it1 != it2 ) return 1;
        }else{
            SET.erase( E[ i ].b );
        }
    }
    return 0;
}
bool f( int x ){
    vector< event > E;
    REP( i , n )
        if( LV[ i ] >= (x << 1) ){
            E.pb( event( 1 , XV[ i ] , YV[ i ] + x , LV[ i ] - (x << 1) ) );
        }
    REP( i , m )
        if( LH[ i ] >= (x << 1) ){
            E.pb( event( 0 , XH[ i ] + x , YH[ i ] , 0 ) );
            E.pb( event( 2 , XH[ i ] + LH[ i ] - x , YH[ i ] , 0 ) );
        }
    return solve( E );
}
int main(){
    int x , y , len;
    while( scanf( "%d%d" , &n , &m ) == 2 ){
        REP( i , n ){
            sc( x ) , sc( y ) , sc( len );
            XV[ i ] = x , YV[ i ] = y , LV[ i ] = len;
        }
        REP( i , m ){
            sc( x ) , sc( y ) , sc( len );
            XH[ i ] = x , YH[ i ] = y , LH[ i ] = len;
        }
        int lo = 0 , hi = 1e8;
        if( !f( lo ) ){
            puts( "0" );
            continue;
        }
        while( hi - lo > 1 ){
            int med = (lo + hi)>>1;
            if( f( med ) ) lo = med;
            else hi = med;
        }
        printf( "%d\n" , lo );
    }
}