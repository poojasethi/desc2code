//codeforces391D1
#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include <string>
#include <set>

using namespace std;

typedef long long int int64;

struct event
{
    int64 x, y, l;
    int i, t;
};

bool operator< (event a, event b)
{
    if (a.x != b.x)
        return a.x < b.x;

    if (a.y != b.y)
        return a.y < b.y;

    if (a.l != b.l)
        return a.l < b.l;

    if (a.i != b.i)
        return a.i < b.i;

    return a.t < b.t;
}

int main()
{
    ios_base::sync_with_stdio(0);

    int n, m;

    cin >> n >> m;

    vector<event> events;

    int64 x, y, l;

    for (int i=0; i<n; ++i)
    {
        cin >> x >> y >> l;

        event e;

        e.x = x;
        e.y = y;
        e.l = l;
        e.i = i;
        e.t = 2;
        events.push_back(e);
    }

    for (int j=0; j<m; ++j)
    {
        cin >> x >> y >> l;

        event e;

        e.x = x;
        e.y = y;
        e.l = l;
        e.i = j;
        e.t = 0;
        events.push_back(e);

        e.x = x+l;
        e.y = y;
        e.l = l;
        e.i = j;
        e.t = 1;
        events.push_back(e);
    }

    sort(events.begin(), events.end());

    vector<event> open_lines;

    vector<event>::iterator it = events.begin();

    int64 best = 0;

    while (it != events.end())
    {
        if (it->t == 0)
        {
            open_lines.push_back(*it);
        }
        else if (it->t == 1)
        {
            int i;
            for (i=0; i<(int)open_lines.size(); ++i)
                if (open_lines[i].i == it->i)
                    break;

            open_lines.erase(open_lines.begin()+i);
        }
        else
        {
            for (int i=0; i<(int)open_lines.size(); ++i)
            {
                if ((open_lines[i].x < it->x && it->x < open_lines[i].x + open_lines[i].l) &&
                    (it->y < open_lines[i].y && open_lines[i].y < it->y + it->l))
                {
                    int64 w = min (it->x - open_lines[i].x, open_lines[i].x + open_lines[i].l - it->x);
                    int64 h = min (open_lines[i].y - it->y, it->y + it->l - open_lines[i].y);
                    best = max(min(w, h), best);
                }
            }
        }

        it++;
    }

    cout << best << endl;

    return 0;
}