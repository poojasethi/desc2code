#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#include <string.h>
#include <string>
#include <ctype.h>
#include <ctime>
#include <complex>
#include <bitset>

using namespace std;

typedef long long INT;
typedef pair<int, int> pii;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)
template <class T> inline void chkmin(T &a, T b) { if (a>b) a=b; }
template <class T> inline void chkmax(T &a, T b) { if (a<b) a=b; }

#define NN 110000
int x[NN], y[NN], len[NN];
int N, M;

typedef priority_queue<pii, vector<pii>, greater<pii> > PQ;
PQ q;
set<int> st;

bool possible(int r) {
	int i, u;
	set<int>::iterator it, jt;
	q=PQ(); st.clear();
	for (i=0; i<N; i++) {
		if (len[i]<r*2) continue;
		q.push(pii(x[i], i+NN));
	}
	for (i=N; i<N+M; i++) {
		if (len[i]<r*2) continue;
		q.push(pii(x[i]+r, i));
		q.push(pii(x[i]+len[i]-r, i+NN*2));
	}
	while (!q.empty()) {
		u=q.top().second; q.pop();
		if (u<NN) {
			st.insert(y[u]);
		} else if (u<NN*2) {
			u-=NN;
			it=st.lower_bound(y[u]+r);
			jt=st.upper_bound(y[u]+len[u]-r);
			if (it!=jt) return true;
		} else {
			u-=NN*2;
			st.erase(y[u]);
		}
	}
	return false;
}

int main() {
	int i, high, low, mid;
	
	scanf("%d%d", &N, &M);
	for (i=0; i<N+M; i++) 
		scanf("%d%d%d", &x[i], &y[i], &len[i]);
	
	low=0; high=100000000;
	while (high>low+1) {
		mid=(high+low)/2;
		if (possible(mid)) low=mid;
		else high=mid;
	}
	
	if (possible(high)) printf("%d\n", high);
	else printf("%d\n", low);
	
	return 0;
}
