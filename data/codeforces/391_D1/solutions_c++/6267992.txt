#include <cstdio>
#include <set>
#include <algorithm>

using namespace std;

int n, m;

const int MAXN = 50013;

struct segment{
	int x, y, len;
	segment(int _x, int _y, int _len) : x(_x), y(_y), len(_len) {}
	segment() : x(0), y(0), len(0) {}
} a[MAXN], b[MAXN]; // a - hori, b - vert

bool operator< (segment a, segment b) {
	return a.x < b.x || a.x == b.x && (a.y < b.y || a.y == b.y && a.len < b.len);
}

enum etype {open, close, vert};

struct event {
	int x, y;
	etype type;
	int id;
	event (int _x = 0, int _y = 0, etype _type = close, int _id = -1)
		: x(_x), y(_y), type(_type), id(_id) {}
};

bool operator<(event a, event b){
	return a.x < b.x || a.x == b.x && (a.type == open && b.type != open || a.type == vert && b.type == close);
}

bool check(int cut) {
	// printf("THE MOTHERCUT IS %d\n", cut);
	static event e[3 * MAXN];
	int ne = 0;
	for (int i = 0; i < n; i++)
		if (a[i].len >= 2 * cut)
			e[ne++] = event(a[i].x, a[i].y + cut, vert, i);
	for (int i = 0; i < m; i++)
		if (b[i].len >= 2 * cut) {
			e[ne++] = event(b[i].x + cut, b[i].y, open);
			e[ne++] = event(b[i].x + b[i].len - cut, b[i].y, close);
		}
	sort(e, e + ne);
	multiset<int> s;
	for (int i = 0; i < ne; i++) {
		// printf("EVENT #%d: %d %d %d\n", i, e[i].x, e[i].y, e[i].id);
		if (e[i].type == open) {
			s.insert(e[i].y);
		}
		else
			if (e[i].type == vert) {
				int id = e[i].id;
				// printf("seg #%d: %d %d %d\n", id, a[id].x, a[id].y, a[id].len);
				multiset<int>::iterator it = s.lower_bound(e[i].y);
				// printf("> %d\n", *it);
				if (it != s.end() && *it <= a[id].y + a[id].len - cut) return true;
			}
			else { // close
				s.erase(e[i].y);
			}
	}
	return false;
}

int main() {
	// freopen("input.txt", "r", stdin);
	scanf("%d%d", &n, &m);
	int maxlen = 0;
	for (int i = 0; i < n; i++) {
		scanf("%d%d%d", &a[i].x, &a[i].y, &a[i].len);
		if (maxlen < a[i].len)
			maxlen = a[i].len;
	}
	for (int i = 0; i < m; i++) {
		scanf("%d%d%d", &b[i].x, &b[i].y, &b[i].len);
		if (maxlen < b[i].len)
			maxlen = b[i].len;
	}
	// printf("%d\n", maxlen);
	int l = 0, r = maxlen / 2 + 1;
	while (r - l >= 2) {
		int m = (l + r) / 2;
		if (check(m))
			l = m;
		else
			r = m;
	}
	printf("%d\n", l);
	return 0;
}
