//tonynater - CodeForces 2014

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

using namespace std;

#define sz(x) ((int) x.size())

typedef long double ld;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> plll;
typedef pair<bool, int> pbi;
typedef pair<ll, pbi> plib;

const double pi = acos(-1);
const double tau = 2*pi;
const double epsilon = 1e-6;

const ll INF = (1LL)<<60;

const int MAX_N = 50100;

int N, M;

plll V[MAX_N];
ll H[MAX_N][3];

vector<plib> horizontals;
multiset<ll> curY;
bool isPossible(ll len)
{
    horizontals.clear();
    for(int i = 0; i < M; i++)
        if(H[i][2] >= 2*len)
        {
            horizontals.push_back(plib(H[i][0]+len, pbi(1,H[i][1])));
            horizontals.push_back(plib(H[i][0]+H[i][2]-len+1, pbi(0,H[i][1])));
        }
    
    sort(horizontals.begin(), horizontals.end());
    
    curY.clear();
    for(int i = 0, idx = 0; i < N; i++)
    {
        while(idx < sz(horizontals) && horizontals[idx].first <= V[i].first.first)
        {
            if(horizontals[idx].second.first) curY.insert(horizontals[idx].second.second);
            else curY.erase(curY.find(horizontals[idx].second.second));
            ++idx;
        }
        
        if(V[i].second >= 2*len)
        {
            multiset<ll>::const_iterator lb = curY.lower_bound(V[i].first.second+len);
            if(lb != curY.end() && *lb <= V[i].first.second+V[i].second-len) return true;
        }
    }
    
    return false;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> N >> M;
    
    for(int i = 0; i < N; i++)
        cin >> V[i].first.first >> V[i].first.second >> V[i].second;
    
    for(int i = 0; i < M; i++)
        for(int j = 0; j < 3; j++)
            cin >> H[i][j];
    
    sort(V, V+N);
    
    ll low = 0, high = INF;
    while(low < high-1)
    {
        ll mid = (low+high)/2;
        if(isPossible(mid)) low = mid;
        else high = mid;
    }
    
    cout << low << '\n';
    
    return 0;
}