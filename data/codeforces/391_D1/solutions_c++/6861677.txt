/*
ID: allen.c1
PROG: 391d1
LANG: C++
*/
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<utility>
#include<cstring>
#include<stack>
#include<queue>

using namespace std;

typedef pair<int, int> pii;
typedef pair<int, pii> edge;
const int maxn = 1003;
typedef struct {
    int a1, b1, a2, b2;
} seg;
int n, m;
seg matn[maxn];
seg matm[maxn];
int main() {
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++) {
        int x, y, l;
        scanf("%d%d%d", &x, &y, &l);
        matn[i].a1 = x; matn[i].b1 = y; matn[i].a2 = x; matn[i].b2 = y + l;
    }
    for (int i = 0; i < m; i++) {
        int x, y, l;
        scanf("%d%d%d", &x, &y, &l);
        matm[i].a1 = x; matm[i].b1 = y; matm[i].a2 = x + l; matm[i].b2 = y;
    }
    int ans = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            // check if don't intersect at all
            if (matn[i].b1 >= matm[j].b1 && matn[i].b2 >= matm[j].b1) continue;
            if (matm[j].a1 >= matn[i].a1 && matm[j].a2 >= matn[i].a1) continue;
            if (matn[i].b1 <= matm[j].b1 && matn[i].b2 <= matm[j].b1) continue;
            if (matm[j].a1 <= matn[i].a1 && matm[j].a2 <= matn[i].a1) continue;
            int dist = 1 << 30;
            int a = abs(matn[i].b1 - matm[j].b1);
            int b = abs(matn[i].b2 - matm[j].b1);
            int c = abs(matm[j].a1 - matn[i].a1);
            int d = abs(matm[j].a2 - matn[i].a1);
            dist = min(a, min(b, min(c, d)));
            ans = max(ans, dist);
        }
    }
    printf("%d\n", ans);
}
