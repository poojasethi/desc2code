#include<stdio.h>
#include<complex>
#include<algorithm>
#include<math.h>
using namespace std;
typedef complex<double> point;
const double eps=1e-9;
bool pd(point a,point b,point c,point d)
{
	return imag((b-a)*conj(d-a))*imag((b-a)*conj(c-a))<-eps;
}
bool aa(point a,point b,point c)
{
	point d=c;
	c=b+b-c;
	if(imag((c-a)/(b-a))<0)swap(b,c);
	double r=abs(b-c)/sin(arg((c-a)*conj(b-a)))/2;
	double th=acos(abs(b-a)/2/r);
	point B=a+polar(r,arg(b-a)+th),A=a+a-B,C=b+b-B,D=d+d-C;
	double dd[4];
	dd[0]=abs(A-B),dd[1]=abs(A-D),dd[2]=abs(C-D),dd[3]=abs(B-C);
	sort(dd,dd+4);
	if((fabs(dd[0]-dd[2])<eps||fabs(dd[1]-dd[3])<eps)&&pd(A,C,B,D)&&pd(B,D,A,C))
	{
		puts("YES");
		printf("%.9lf %.9lf %.9lf %.9lf %.9lf %.9lf %.9lf %.9lf\n",real(A),imag(A),real(D),imag(D),real(C),imag(C),real(B),imag(B));
		return 1;
	}
	return 0;
}
int main()
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		int x1,y1,x2,y2,x3,y3;
		scanf("%d%d%d%d%d%d",&x1,&y1,&x2,&y2,&x3,&y3);
		point a=point(x1,y1),b=point(x2,y2),c=point(x3,y3);
		if(aa(a,b,c))continue;
		if(aa(a,c,b))continue;
		if(aa(b,a,c))continue;
		if(aa(b,c,a))continue;
		if(aa(c,a,b))continue;
		if(aa(c,b,a))continue;
		puts("NO");
	}
	return 0;
}
