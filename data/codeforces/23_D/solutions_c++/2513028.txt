#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>

using namespace std;

const double eps=1e-6;

struct point
{
	double x,y;
	void init()
	{
		scanf("%lf%lf",&x,&y);
	}
};

double mul(point p1,point p2,point p3)
{
	return (p2.x-p1.x)*(p3.y-p1.y)-(p2.y-p1.y)*(p3.x-p1.x);
}

point cross(point a,point b,point c,point d)
{
	double t1=mul(a,c,b),t2=mul(a,b,d);
	point e; 
	e.x=(c.x*t2+d.x*t1)/(t1+t2);e.y=(c.y*t2+d.y*t1)/(t1+t2); 
	return e;
}

void mid(point a,point b,point &c,point &d)
{
	c.x=(a.x+b.x)/2;c.y=(a.y+b.y)/2;
	d.x=c.x+b.y-a.y;d.y=c.y+a.x-b.x;
}

bool solve(point a,point b,point c)
{
	point A,B,C,D,d,e,za,zb,zc,zd;
	mid(a,b,za,zb);
	mid(b,c,zc,zd);
	d.x=b.x+zd.x-zc.x;
	d.y=b.y+zd.y-zc.y;
	d=cross(b,d,za,zb);
	e=cross(za,zb,zc,zd);
	A.x=2*d.x-e.x;A.y=2*d.y-e.y;
	B.x=2*b.x-A.x;B.y=2*b.y-A.y;
	C.x=2*c.x-B.x;C.y=2*c.y-B.y;
	D.x=2*a.x-A.x;D.y=2*a.y-A.y;
	bool check=mul(A,B,C)*mul(B,C,D)>eps && mul(B,C,D)*mul(C,D,A)>eps && mul(C,D,A)*mul(D,A,B)>eps;
	if (check) printf("YES\n%.9lf %.9lf %.9lf %.9lf %.9lf %.9lf %.9lf %.9lf\n",A.x,A.y,B.x,B.y,C.x,C.y,D.x,D.y);
	return check;

}

int main()
{
	int t;
	scanf("%d",&t);
	point p1,p2,p3;
	for (int p=1;p<=t;p++)
	{
		p1.init();
		p2.init();
		p3.init();
		if (fabs(mul(p1,p2,p3))>eps &&	(solve(p1,p2,p3) || solve(p2,p3,p1) || solve(p3,p1,p2))) ;
		else printf("NO\n\n");
	}

	return 0;
}
