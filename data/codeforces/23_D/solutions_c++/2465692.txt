//CF-23-D Tetragon
#include<cstdio>
const double eps=1e-8;

struct P
{
	double x,y;
	P(double x=0, double y=0):x(x),y(y){}
}a,b,c,p[4];
P operator +(P a,P b){return P(a.x+b.x,a.y+b.y);}
P operator -(P a,P b){return P(a.x-b.x,a.y-b.y);}
P operator *(P a,double b) {return P(a.x*b,a.y*b);}
P operator ~(P a) {return P(-a.y,a.x);}
double operator *(P a,P b){return a.x*b.y-b.x*a.y;}
inline int sgn(double x){ return x<-eps?-1:x>eps;}

inline void read(P &a){ scanf("%lf%lf",&a.x,&a.y); }
inline void write(P &a){ printf("%.9lf %.9lf ",a.x,a.y); }
inline double det(P a,P b,P c){ return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);}
inline P rev(P a,P b){ return P(b.x*2-a.x,b.y*2-a.y);}
inline P Intersect(P a,P b,P c,P d)
{
	double s1=det(a,c,b),s2=det(a,b,d);
	return P( (c.x*s2+d.x*s1)/(s1+s2) , (c.y*s2+d.y*s1)/(s1+s2) );
}
inline P cet(P a,P b,P c)
{
	P x=(a+b)*0.5,y=(b+c)*0.5;
	return Intersect (x,x+~(b-a),y,y+~(c-b));
}
inline bool ok(P &a,P &b,P &c)
{
	if (!sgn(det(rev(a,b),b,c))) return false;
	p[0]=cet(rev(a,b),b,c);
	p[1]=rev(p[0],b);
	p[2]=rev(p[1],a);
	p[3]=rev(p[0],c);
	for(int i=0;i<4;i++)
		if (sgn( (p[(i+1)%4]-p[i]) * (p[(i+2)%4]-p[(i+1)%4]) )<1) return 0;
	printf("YES\n");
	for(int i=0;i<4;i++)
		write(p[i]);
	puts("");
	return 1;
	
}
int T;

int main()
{
	scanf("%d",&T);
	while(T--)
	{
		read(a);read(b);read(c);
		if (!(ok(a,b,c)||ok(a,c,b)||ok(b,a,c)||ok(b,c,a)||ok(c,a,b)||ok(c,b,a)))
		    printf("NO\n\n");
	}
	return 0;
}
