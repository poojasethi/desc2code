#include<cstdio>
#include<cmath>
#include<vector>
#include<algorithm>
#define fo(i,a,b) for(i=a;i<=b;++i)
const double eps=1e-8;
struct node{double x,y;}a,b,c,s[4];
node po(double a,double b)
{
    node res;
    res.x=a,res.y=b;
    return res;
}
node rev(node a,node b){return po(a.x*2-b.x,a.y*2-b.y);}
double sqr(node a){return a.x*a.x+a.y*a.y;}
double area(node a,node b,node c)
{
    return (b.x-a.x)*(c.y-a.y)-(c.x-a.x)*(b.y-a.y);
}
node cet(node a,node b,node c)
{
    double d=2*(a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y));
    return po((sqr(a)*(b.y-c.y)+sqr(b)*(c.y-a.y)+sqr(c)*(a.y-b.y))/d,(sqr(a)*(c.x-b.x)+sqr(b)*(a.x-c.x)+sqr(c)*(b.x-a.x))/d);
}
bool check()
{
    int i,j,k,l;
    fo(i,0,3)
    {
        j=(i+1)%4,k=(i+2)%4,l=(i+3)%4;
        if(area(s[i],s[j],s[k])*area(s[i],s[j],s[l])<=eps)return 0;
    }
    return 1;
}
bool solve(node a,node b,node c)
{
    node b1=rev(a,b),c1=rev(a,c);
    if(fabs(area(b1,a,c))<=eps||fabs(area(c1,a,b))<=eps)return 0;
    s[0]=cet(b1,a,c),s[1]=cet(c1,a,b),s[2]=rev(b,s[1]),s[3]=rev(c,s[0]);
    if(check())
    {
        printf("YES\n");
        printf("%.9lf %.9lf",s[0].x,s[0].y);
        int i;
        fo(i,1,3)printf(" %.9lf %.9lf",s[i].x,s[i].y);
        printf("\n");
        return 1;
    }
    return 0;
}
int main()
{
    int Q;
    scanf("%d",&Q);
    while(Q--)
    {
        scanf("%lf%lf%lf%lf%lf%lf",&a.x,&a.y,&b.x,&b.y,&c.x,&c.y);
        if(solve(a,b,c))continue;
        if(solve(b,c,a))continue;
        if(solve(c,a,b))continue;
        printf("NO\n");
    }
    return 0;
}