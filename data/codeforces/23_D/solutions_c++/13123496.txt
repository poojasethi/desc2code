#include <stdio.h>
#include <algorithm>
#include <math.h>
using namespace std;
struct point{
	double x,y,z;
	point(){}
	point(double x,double y,double z=1):x(x),y(y),z(z){}
	point operator * (const point & rhs){
		return point( y*rhs.z -z*rhs.y , z*rhs.x- x*rhs.z,x*rhs.y-y*rhs.x);
	}
	point operator - (const point &b){
		return point( x-b.x,y-b.y);
	}
	point operator +(const point &b){
		return point(x+b.x,y+b.y);
	}
	point operator * (double k) const{
		return point(k*x,k*y);
	}
	point projection(){
		return point(x/z,y/z);
	}
	void print(){
		printf("%2.9f %0.9f ",x,y);
	}
};		
point perpen(point &r){
	return point(-r.y,r.x);
}
point line(point l,point t){
	double c = l.y*t.x -l.x*t.y;
	return point(-l.y,l.x,c);
}
double ccw(point a,point b){
	return a.x*b.y-a.y*b.x;
}
double ccw(point &a,point &b,point &c){
	return ccw(b-a,c-a );
}
point p[3];
void solve(){
	point m,l,newbie,k;
	point A[4];
	int i,j;
	for(i=0;i<3;++i){
		m = p[i];
		l = p[(i+1)%3];
		k = p[(i+2)%3];
		newbie =m*2-l;
		
		point l1 = newbie-m, l2 = k-m;
		l1  = perpen(l1),l2 = perpen(l2);
		l1 = line(l1,(newbie+m)*0.5 );
		l2 = line(l2,(k+m)*0.5 );
	
		A[0]= l1*l2;

		if(A[0].z==0)
			break;
		A[0]= A[0].projection();
		A[1]= m*2-A[0];
		A[3]= k*2-A[0], A[2]=l*2-A[1];
		
		bool istrue= true;
		
		double direction = ccw(A[0],A[1],A[2]);
	
		for(j=1;j<4;++j)
			if(ccw(A[j],A[(j+1)%4],A[(j+2)%4])*direction<=0) {
				istrue= false;
				break;
			}

		if(!istrue)
			continue;
		printf("YES\n");
		for(j=0;j<4;++j)
			A[j].print();
		putchar('\n');
		return;
	}
	printf("NO\n\n");
}
int main(){
	int T,i;
	scanf("%d",&T);
	while(T--){
		for(i=0;i<3;++i)
			scanf("%lf %lf",&p[i].x,&p[i].y);
		solve();
	}
}
