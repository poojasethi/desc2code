#include<cstdio>
#include<algorithm>
using namespace std;
double eps= 1e-12;
int cmp(double x){ 
  if(x < eps && x > -eps) return 0;
  else return (x < -eps ? -1 : 1 );
}
struct point{
  double x,y;
  point(){}
  point(double _x,double _y){ x = _x, y = _y; }
  void get(){ scanf("%lf%lf",&x,&y); } 
  point ref(point a){ return point(2*a.x-x, 2*a.y-y );} 
  bool operator == (point &a) const{ return(cmp(a.x-x) == 0 && cmp(a.y-y)==0); }
};
point s[4];
point center(point a,point b,point c){
  point m1 = point((a.x+b.x)/2,(a.y+b.y)/2), m2 = point((a.x+c.x)/2,(a.y+c.y)/2) ;
  point v1 = point(b.y-a.y,a.x-b.x), v2 = point(c.y-a.y,a.x-c.x);
  if(cmp(v2.x*v1.y - v1.x*v2.y) == 0) return a;
  double c1 = ((m1.x-m2.x)*v2.y - (m1.y-m2.y)*v2.x)/(-v1.x*v2.y + v1.y*v2.x);
  return point(m1.x+c1*v1.x,m1.y+c1*v1.y);
  //m1 +c1v1 = m2 + c2v2 => m1-m2 = c2v2-c1v1
}
double crs(point a,point b,point c){
  return (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);
}
bool chk_cv(){
  for(int i=0;i<4;i++)
    if(cmp (crs(s[i],s[(i+1)%4],s[(i+2)%4]) * crs(s[(i)%4],s[(i+1)%4],s[(i+3)%4])) <= 0)
      return false;
  return true;
}
bool chk(point a,point b,point c){
  point m = center(a,b,c.ref(a));
  if(m == a) return false;
  s[1] = m; s[0] = point(2*b.x-m.x,2*b.y-m.y);
  s[2] = point(2*a.x-m.x,2*a.y-m.y); s[3] = point(2*c.x-s[2].x,2*c.y-s[2].y);
  if(chk_cv() == false){ return false; }
  printf("YES\n");
  for(int i=0;i<4;i++)
    printf("%.12lf %.12lf ",s[i].x,s[i].y); printf("\n");
  return true;
}
point a,b,c;
int t;
int main(){
  scanf("%d",&t);
  for(int r=1;r<=t;r++){
    a.get(); b.get(); c.get();
    if(chk(a,b,c) || chk(b,a,c) || chk(c,a,b)){}
    else printf("NO\n\n");
  }
  return 0;
}
