#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;
#define N 1000001
int bit[N], eve[N], res[N];
vector<int> vet[N], use[N], kill[N];

int query(int x)
{
  int r = 0;
  while (x)
  {
    r += bit[x];
    x -= x&-x;
  }
  return r;
}

void update(int x, int v)
{
  while (x < N)
  {
    bit[x] += v;
    x += x&-x;
  }
}

int main()
{
  int n, m;
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; ++i)
  {
    int a, b; scanf("%d%d", &a, &b);
    eve[a]++; if (b+1 < N) kill[b+1].push_back(a);
  }
  for (int i = 0; i < m; ++i)
  {
    int k; scanf("%d", &k);
    vet[i].push_back(0);
    for (int j = 0; j < k; ++j)
    {
      int a; scanf("%d", &a);
      vet[i].push_back(a);
      use[a].push_back(i);
    }
  }
  for (int i = 1; i < N; ++i)
  {
    update(i, eve[i]);
    for (int j = 0; j < kill[i].size(); ++j)
      update(kill[i][j], -1);
    for (int j = 0; j < use[i].size(); ++j)
    {
      int k = use[i][j];
      int a = *(--lower_bound(vet[k].begin(), vet[k].end(), i));
      res[k] += query(i)-query(a);
    }
  }
  for (int i = 0; i < m; ++i) printf("%d\n", res[i]);
  return 0;
}