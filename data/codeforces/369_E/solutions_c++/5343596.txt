#include <bits/stdc++.h>

using namespace std;

vector<int> tree[1 << 21];
vector<int> v[1000001];

void build(int l, int r, int i = 1) {
    if(l == r) {
        tree[i] = v[l];
        sort(tree[i].begin(), tree[i].end());
        return;
    }
    int mid = (l + r) >> 1, li = i << 1, ri = li + 1;
    build(l, mid, li);
    build(mid + 1, r, ri);
    merge(tree[li].begin(), tree[li].end(), tree[ri].begin(), tree[ri].end(), back_inserter(tree[i]));
}

int query(int l, int r, int s, int t, int i = 1) {
    if(l > t || r < s) return 0;
    if(l >= s && r <= t) {
        return tree[i].end() - lower_bound(tree[i].begin(), tree[i].end(), t);
    }
    int mid = (l + r) >> 1, li = i << 1, ri = li + 1;
    return query(l, mid, s, t, li) + query(mid + 1, r, s, t, ri);
}

int main() {
    int n, m, l, r;
    scanf("%d %d", &n, &m);
    for(int i = 0; i < n; ++i) {
        scanf("%d %d", &l, &r);
        v[l].push_back(r);
    }
    build(1, 1000000);
    while(m--) {
        scanf("%d", &l);
        int prev = 1;
        int ans = 0;
        while(l--) {
            scanf("%d", &r);
            ans += query(1, 1000000, prev, r);
            prev = r + 1;
        }
        printf("%d\n", ans);
    }
    return 0;
}
