#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 100010*3;
const int M = 1000010;
int ans[N];
int c[M];

struct Interval{
	int l, r, id;
}s[N], q[N*2];

bool cmp(Interval a, Interval b){
	return a.r<b.r;
}

int Lowbit(int x){
	return x&(-x);
}

int Sum(int x){
	int sum = 0;
	while(x > 0){
		sum += c[x];
		x -= Lowbit(x);
	}
	return sum;
}

void modify(int pos, int num){
	while(pos<=M){
		c[pos] += num;
		pos += Lowbit(pos);
	}
}

int main(){
	int n, m;
	scanf("%d %d", &n, &m);
	for(int i = 0; i < n; i++){
		scanf("%d %d", &s[i].l, &s[i].r);
		s[i].id = i;
	}
	int cnt = 0;
	for(int i = 0; i < m; i++){
		int num;
		scanf("%d", &num);
		for(int j = 0; j < num; j++){
			scanf("%d", &q[cnt].r);
			q[cnt].id = i;
			if(!j) q[cnt].l = 0;
			else q[cnt].l = q[cnt-1].r;
			cnt++;
		}
		q[cnt].id = i;
		q[cnt].l = q[cnt-1].r;
		q[cnt++].r = M;
	}
	sort(s, s+n, cmp);
	sort(q, q+cnt, cmp);
	for(int i = 0; i < m; i++){
		ans[i] = n;
	}
	int j = 0;
	for(int i = 0; i < cnt; i++){
		while(j < n&&s[j].r < q[i].r){
			modify(s[j].l, 1);
			j++;
		}
		ans[q[i].id] -= Sum(q[i].r - 1)-Sum(q[i].l);
	}
	for(int i = 0; i < m; i++){
		printf("%d\n", ans[i]);
	}
	return 0;
}
