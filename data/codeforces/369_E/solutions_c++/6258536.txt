//In the name of God
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
typedef pair<int, int> pii;
typedef pair<pii, int> Pii;
const int M = 3e5 + 5, N = 1e6 + 6;
#define L first
#define R second

int n, m, f[N], ans[M];
pii a[M];
vector<Pii> b;


void add(int m) { m = N - m - 1;
	while (m < N)
		f[m]++, m += m & -m;
}
int after(int m) { m = N - m - 1;
	int res = 0;
	while (m) {
		res += f[m];
		m -= m & -m;
	}
	return res;
}
bool cmp(pii x, pii y) { return x.R < y.R; }
bool cmp2(Pii x, Pii y) { return x.first.R < y.first.R; }

int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		cin >> a[i].L >> a[i].R;
	sort(a, a + n, cmp);
	for (int i = 0; i < m; i++) {
		int cnt, ls = 0;
		cin >> cnt;
		for (int j = 0, x; j < cnt; j++) {
			cin >> x;
			b.push_back(Pii(pii(ls, x), i));
			ls = x;
		}
		b.push_back(Pii(pii(ls, 1e6 + 1), i));
	}
	fill(ans, ans + m, n);
	sort(b.begin(), b.end(), cmp2);
	for (int i = 0, pt = 0; i < b.size(); i++) {
		while (pt < n && a[pt].R < b[i].first.R)
			add(a[pt].L), pt++;
		ans[b[i].second] -= after(b[i].first.L + 1);
	}
	for (int i = 0; i < m; i++)
		cout << ans[i] << '\n';
	return 0;
}
