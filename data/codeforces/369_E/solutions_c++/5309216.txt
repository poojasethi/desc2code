#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
#include <cstdio>
#include <set>
#include <queue>
#include <cassert>
#include <climits>
#define MAXB 1000001
using namespace std;
pair<int, int> segs[300005];
int bit[1000005], ans[300005];
struct Point {
	int q, p, nexp;
	bool operator < (const Point& a) const {
		return nexp < a.nexp;
	}
} P[300005];
void ins(int p, int v) {
	for (; p <= MAXB; p += (p & -p)) bit[p] += v;
}
int query(int p) {
	int ret = 0;
	for (; p; p -= (p & -p)) ret += bit[p];
	return ret;
}
int main() {
	int N, M, pn = 0;
	scanf("%d%d", &N, &M);
	for (int i = 0; i < N; ++i) scanf("%d%d", &segs[i].second, &segs[i].first);
	sort(segs, segs + N);
	for (int i = 0; i < M; ++i) {
		int cnt;
		scanf("%d", &cnt);
		for (int j = 0; j < cnt; ++j) {
			scanf("%d", &P[pn].p);
			if (j) P[pn - 1].nexp = P[pn].p;
			P[pn].q = i;
			++pn;
		}
		P[pn - 1].nexp = MAXB;
	}
	sort(P, P + pn);
	for (int i = 0, j = 0; i < pn; ++i) {
		while (j < N && segs[j].first < P[i].nexp) {
			ins(segs[j].first + 1, -1);
			ins(segs[j].second, 1);
			++j;
		}
		ans[P[i].q] += query(P[i].p);
	}
	for (int i = 0; i < M; ++i) printf("%d\n", ans[i]);
}
