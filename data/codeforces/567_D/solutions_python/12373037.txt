n, kor, a = raw_input("").split(" ")
n, kor, a = int(n), int(kor), int(a)
m = int(raw_input(""))
turns = raw_input("").split(" ")
turns = [int(el) for el in turns]

known_empty = [0]*n

for i, turn in enumerate(turns):
	known_empty[turn-1] = i+1

def can_find_out(n_turns, known_empty, a, kor):
	now_empty = [el if el <= n_turns else 0 for el in known_empty]
	sections = []
	cur_section = 0
	for el in now_empty:
		if el == 0:
			cur_section += 1
		else:
			if cur_section:
				sections.append(cur_section)
				cur_section = 0
	if cur_section:
				sections.append(cur_section)
				cur_section = 0
	possible_sheeps = 0
	for sect in sections:
		if sect >= a:
			possible_sheeps += 1
			sect -= a
			possible_sheeps += sect/(a+1)
	#print n_turns, now_empty, sections, possible_sheeps, kor
	if possible_sheeps >= kor:
		return False
	else:
		return True

l = 1
r = m
if not can_find_out(r, known_empty, a, kor):
	print -1
else:
	k = r/2
	while(r - l > 1):
		#print l, k, r
		if can_find_out(k, known_empty, a, kor):
			r = k
		else:
			l = k
		k = (r+l)/2
	#print l, k, r
	if not can_find_out(l, known_empty, a, kor):
		print l+1
	else:
		print l