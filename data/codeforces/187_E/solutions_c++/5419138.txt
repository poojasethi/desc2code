#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#define REP(i,n) for (int i=1;i<=(n);++i)
#define FOR(i,a,b) for (int i=(a);i<=(b);++i)
#define ROF(i,a,b) for (int i=(a);i>=(b);--i)
#define FEC(p,u) for (edge*p=head[u];p;p=p->nxt)
using namespace std;
typedef long long LL;


int n, l, st, a[200000];
LL s[200000], ans;
int ans2[200000], ret2[200000];

int b[200000];
bool c[200000];
bool cpr(int x, int y){ return a[x] < a[y]; }

int h[200000], lh;
void up(int x){
    while (x && h[x] < h[x>>1]){
        swap(h[x], h[x>>1]);
        x = x>>1;
    }
}
void down(int x){
    while ((x<<1) <= lh && h[x<<1] < h[x] || (x<<1|1) <= lh && h[x<<1|1] < h[x]){
        int p = (x<<1|1) <= lh && h[x<<1|1] < h[x<<1] ? x<<1|1 : x<<1;
        swap(h[x], h[p]);
        x = p;
    }
}
void push(int x){
    h[++lh] = x;
    up(lh);
}
void pop(){
    h[1] = h[lh--];
    down(1);
}
int top(){ return h[1]; }

LL work(){
    if (l <= st){
        int p(0);
        ROF(i,l,1) ret2[++p] = i;
        FOR(i,l+1,n+1) if (i != st+1) ret2[++p] = i;
        return s[st]+s[n];
    }else{
        int p(n-(l-st)), q;
        LL t(s[st]+s[n]), ret;
        t += s[n]-s[p];
        ret = t, q = p;
        lh = 0;
        FOR(i,st+2,p) push(a[i]);
        FOR(i,p+1,n){
            t -= a[i];
            push(a[i]);
            t += top()*2;
            pop();
            if (t < ret){
                ret = t, q = i;
            }
        }
        FOR(i,st+1,q) b[i] = i, c[i] = false;
        c[q+1] = true;
        sort(b+st+2, b+q+1, cpr);
        REP(i,l-st-(n-q)) c[b[st+1+i]] = true;
        p = 0;
        ROF(i,st,1) ret2[++p] = i;
        FOR(i,st+1,q) if (!c[i] && !c[i+1]) ret2[++p] = i+1;
        else if (c[i]){
            int j = i;
            while (c[j+1]) ++j;
            ROF(k,j+1,i) ret2[++p] = k;
            i = j;
        }
        ret2[++p] = n+1;
        ROF(i,n,q+1) ret2[++p] = i;
        return ret;
    }
}
int main(){
    scanf("%d%d%d", &n, &l, &st);
    --n, --st;
    FOR(i,0,n) scanf("%d", &s[i]);
    REP(i,n) a[i] = s[i]-s[i-1];
    if (l == 0 && st != 0 || l == n && st != n){ printf("-1\n"); return 0; }
    ans = work();
    REP(i,n) ans2[i] = ret2[i];
    l = n-l, st = n-st;
    REP(i,n/2) swap(a[i], a[n+1-i]);
    REP(i,n) s[i] = s[i-1]+a[i];
    LL t = work();
    if (t < ans){
        ans = t;
        REP(i,n) ans2[i] = n+2-ret2[i];
    }
    printf("%I64d\n", ans);
    REP(i,n-1) printf("%d ", ans2[i]); printf("%d\n", ans2[n]);
    return 0;
}