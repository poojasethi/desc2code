#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <queue>

using namespace std;

typedef long long int lint;

int n;
int posicion[200000];
int ini;

int orden[200000];
int guia[200000];

bool compara(int i1,int i2)
{
  return posicion[i1+1]-posicion[i1]<posicion[i2+1]-posicion[i2];
}

lint tope=1000000000000000000LL;

void generasolri(int le,int ri,int sol[200000],lint &coste)
{
  if (ini==0) {
    coste=tope;
    return;
  }
  int isol=0;
  if (ri<=n-1-ini) {
    for (int i=n-1-ri+1;i<=n-1;i++)
      sol[isol++]=i;
    for (int i=n-1-ri;i>=0;i--)
      if (i!=ini)
	sol[isol++]=i;
    coste=posicion[n-1]-posicion[ini]+posicion[n-1]-posicion[0];
  } else if (le==1) {
    for (int i=ini+1;i<=n-1;i++)
      sol[isol++]=i;
    for (int i=0;i<=ini-1;i++)
      sol[isol++]=i;
    coste=posicion[n-1]-posicion[ini]+posicion[n-1]-posicion[0]+
      posicion[ini-1]-posicion[0];
  } else {
    coste=posicion[n-1]-posicion[ini]+
      posicion[n-1]-posicion[0]+posicion[ri-(n-1-ini)]-posicion[0];
    int indexmin=ri-(n-1-ini);
    priority_queue<int> q;
    for (int i=indexmin+1;i<ini-1;i++)
      q.push(-(posicion[i+1]-posicion[i]));
    lint costeact=coste;
    for (int i=indexmin;i>0;i--) {
      costeact-=posicion[i]-posicion[i-1];
      q.push(-(posicion[i+1]-posicion[i]));
      lint valtop=-q.top();
      q.pop();
      costeact+=2*valtop;
      if (costeact<coste) {
	coste=costeact;
	indexmin=i-1;
      }
    }
    for (int i=ini+1;i<=n-1;i++)
      sol[isol++]=i;
    for (int i=0;i<=indexmin;i++)
      guia[i]=0;
    for (int i=indexmin+1;i<ini;i++)
      guia[i]=-1;
    for (int i=indexmin+1;i<ini-1;i++)
      orden[i]=i;
    sort(orden+(indexmin+1),orden+(ini-1),compara);
    for (int i=0;i<ri-(n-1-ini)-indexmin;i++)
      guia[orden[i+indexmin+1]]=1;
    int index=ini-1;
    int direccion=-1;
    while (index!=0) {
      if (direccion==-1) {
	if (guia[index]==-1) {
	  if (guia[index-1]==1) {
	    index--;
	  } else {
	    guia[index]=0;
	    sol[isol++]=index;
	    index--;
	  }
	} else if (guia[index]==1) {
	  if (guia[index-1]==1) {
	    index--;
	  } else {
	    guia[index]=0;
	    sol[isol++]=index;
	    index++;
	    direccion=1;
	  }
	} else {
	  index--;
	}
      } else {
	if (guia[index]==-1) {
	  sol[isol++]=index;
	  guia[index]=0;
	  index--;
	  direccion=-1;
	} else if (guia[index]==1) {
	  guia[index]=0;
	  sol[isol++]=index;
	  index++;
	}
      }
    }
    for (int i=0;i<=indexmin;i++)
      sol[isol++]=i;
  }
}

void escribesol(int coste,int sol[200000])
{
  cout<<coste<<endl;
  for(int i=0;i<n-1;i++) {
    if (i>0) cout<<" ";
    cout<<sol[i]+1;
  }
  cout<<endl;
}

int le,ri;
int solri[200000];
int solle[200000];
lint costeri;
lint costele;

int main()
{
  cin>>n>>le>>ini;
  ri=n-1-le;
  ini--;
  for (int i=0;i<n;i++)
    scanf("%d",posicion+i);
  if (ini<n-1 and ri==0) {
    cout<<-1<<endl;
    exit(0);
  }
  if (ini>0 and le==0) {
    cout<<-1<<endl;
    exit(0);
  }
  generasolri(le,ri,solri,costeri);
  for (int i=0;i<n;i++)
    posicion[i]=-posicion[i];
  reverse(posicion,posicion+n);
  ini=n-1-ini;
  generasolri(ri,le,solle,costele);
  if (costele<tope)
    for (int i=0;i<n-1;i++)
      solle[i]=n-1-solle[i];
  if (costeri<costele)
    escribesol(costeri,solri);
  else
    escribesol(costele,solle);
}
