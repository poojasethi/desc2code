#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
using namespace std;

const int N = 128;

int main()
{
	vector<int> vp, vl;
	int n, w;
	scanf("%d %d", &n, &w);
	int CW = w;
	int m[N];
	for(int i = 0; i < n; i++) scanf("%d", &m[i]);
	int sum = 0;
	for(int i = 0; i < n; i++) sum += m[i];
	if(w <= 0 || w > sum) { printf("No\n"); return 0; }
	queue<int> Q;
	bool vst[N] = { false };
	for(int i = 0; i < n; i++) {
		int mx = 1<<20, mi = -1;
		for(int j = 0; j < n; j++) if(!vst[j]) mx = min(mx, m[j]);
		for(int j = 0; j < n; j++) if(!vst[j] && mx == m[j]) { mi = j; break; }
		vst[mi] = true;
		Q.push(mi);
	}
	for(; w != 0; w--) {
		int p = Q.front(); Q.pop();
		m[p]--;
		vp.push_back(p);
		if(m[p] != 0) Q.push(p);
	}
	set<int> dict;
	for(int i = 0; i < n; i++) if(m[i] != 0) dict.insert(i);
	for(int i = 0; i < (int)vp.size(); i++) {
		int cur = vp[i];
		vl.push_back(cur+1);
		vector<int> erl;
		for(set<int>::iterator j = dict.begin(); j != dict.end(); j++) {
			if(*j == cur) continue;
			erl.push_back(*j);
		}
		for(int j = 0; j < (int)erl.size(); j++) {
			for(int k = 0; k < 2*m[erl[j]]; k++) vl.push_back(erl[j]+1);
			dict.erase(erl[j]);
		}
		vl.push_back(cur+1);
	}
	if(vl.size() != 2*sum) { printf("No\n"); return 0; }
	printf("Yes\n");
	for(int i = 0; i < (int)vl.size(); i++) printf("%d%c", vl[i], i == vl.size()-1 ? '\n' : ' ');
	
	return 0;
}

