#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

vector<int> adj[100010];
ll val[100010], add[100010], sub[100010];
bool vis[100010];

void dfs(int v) {
	vis[v] = 1;
	for(int i = 0; i < adj[v].size(); i++) {
		int u = adj[v][i];
		if (!vis[u]) {
			dfs(u);
			add[v] = max(add[v], add[u]);
			sub[v] = max(sub[v], sub[u]);
		}
	}
	val[v] += (add[v] - sub[v]);
	add[v] += (val[v] > 0) ? 0 : (-val[v]);
	sub[v] += (val[v] > 0) ? val[v] : 0;
}

int main() {
	ios_base::sync_with_stdio(0);
	memset(vis, 0, sizeof(vis));
	int n, a, b;
	cin >> n;

	for(int i = 1; i < n; i++) {
		cin >> a >> b;
		adj[a-1].push_back(b-1);
		adj[b-1].push_back(a-1);
	}
	for(int i = 0; i < n; i++)
		cin >> val[i];
	dfs(0);
	cout << add[0] + sub[0] << endl;
	return 0;
}
