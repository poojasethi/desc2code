#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

const int MAXN = 1000 * 100 + 10;
long long dc[MAXN], inc[MAXN], val[MAXN];
vector<int> ng[MAXN];

void dfs(int v, int par)
{
	for (int i = 0; i < ng[v].size(); i++)
	{
		int u = ng[v][i];
		if (u != par)
		{
			dfs(u, v);
			dc[v] = max(dc[v], dc[u]);
			inc[v] = max(inc[v], inc[u]);
		}
	}
	long long tmp = val[v] - dc[v] + inc[v];
	if (tmp < 0)
		inc[v] += -tmp;
	else
		dc[v] += tmp;
}

int main()
{
	int n;
	cin >> n;
	for (int i = 0; i < n - 1; i++)
	{
		int a, b;
		cin >> a >> b;
		a--; b--;
		ng[a].push_back(b);
		ng[b].push_back(a);
	}
	for (int i = 0; i < n; i++)
		cin >> val[i];
	dfs(0, -1);
	cout << (dc[0] + inc[0]) << endl;
	return 0;
}
