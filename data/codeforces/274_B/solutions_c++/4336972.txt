#include <iostream>
#include <vector>

using namespace std;

const int maxN = 100000+10;

int n;
bool mark[maxN];
long long a[maxN], inc[maxN], decr[maxN], ans;
vector <int> g[maxN];

void dfs(int v)
{
	mark[v] = 1;
	for (int i = 0 ; i < (int)g[v].size() ; i++)
	{
		int u = g[v][i];
		if (!mark[u])
		{
			dfs(u);
			decr[v] = max(decr[v], decr[u]);
			inc[v] = min(inc[v], inc[u]);
		}	
	}
	a[v] += -inc[v]-decr[v];
	if (a[v] >= 0)
		decr[v] += a[v];
	else
		inc[v] += a[v];
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n;
	for (int i = 1 ; i <= n-1 ; i++)
	{
		int u, v;
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	for (int i = 1 ; i <= n ; i++)
		cin >> a[i];
	dfs(1);
	cout << decr[1]-inc[1] << endl;
	return 0;
}
