#include <iostream>
#include <vector>
using namespace std;
int n;
const int maxn = 100000 + 10;
vector<int> G[maxn];
long long a[maxn],dpp[maxn], dpm[maxn];
bool vis[maxn];
void dfs(int u)
{
	vis [u] = true;
	for (int i=0  ; i<G[u].size() ; i++)
    {
    	int v = G[u][i];
    	if(vis[v] == false) 
	{
		dfs(v);
		dpm[u] = max(dpm[v] , dpm[u]);
		dpp[u] = max(dpp[u] , dpp[v]);
	}
    }
	a[u] += dpp[u]-dpm[u];
	if (a[u] >0) dpm[u] += a[u];
	else dpp[u] += -a[u];
}
int main()
{
	cin >> n;
	for (int i=0 ; i<n-1 ; i++)
	{
    	int u , v;
    	cin >> u >> v;    u--;   v--;
    	G[u].push_back(v);
		G[v].push_back(u);
	}
	for (int i=0 ; i<n ; i++) cin >> a[i];
	dfs (0);
	cout << dpm[0]+dpp[0] << endl; 
	return 0;
}
