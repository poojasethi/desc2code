#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <ctime>
#include <cassert>
#include <functional>

using namespace std;

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> PII;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FILL(x,v) memset(x,v,sizeof(x))

const int INF = (int)1E9;
#define MAXN 100005
const int mod = 1000000007;
ll powm(ll a, ll k, ll mod){	// not using mulm
  ll ans = 1;
  while (k){
    if (k & 1) ans = ans*a%mod;
    k >>= 1;
    a = a*a%mod;
  }
  return ans;
}

int E, kk[MAXN], p25[MAXN], invs[MAXN];
PII es[MAXN];
char str[MAXN];
VI kans[450];
void solve(int k, int index) {
  VI &ans = kans[index];
  REP(i,0,k) ans.push_back(0); // 0..k-1
  ans.push_back(1); // k
  int lac = 1, la = 1;
  REP(n,k+1,MAXN) { // k+1..n
    int nc = (ll)lac * (n-1) % mod * invs[n-k] % mod;
    int sol = ((ll)la*26 % mod + (ll)nc * p25[n-k] % mod) % mod;
    ans.push_back(sol);
    la = sol;
    lac = nc;
  }
}
int main() {
  //freopen("input", "r", stdin);
  p25[0] = 1;
  REP(i,1,MAXN) p25[i] = (ll)p25[i-1] * 25 % mod;
  REP(i,1,MAXN) invs[i] = powm(i, mod-2, mod);
  int T;
  cin >> T;
  scanf("%s", str);
  int n = strlen(str);
  es[E++] = PII(1, n);
  while(T--) {
    int t;
    scanf("%d", &t);
    if (t == 1) {
      scanf("%s", str);
      n = strlen(str);
      es[E++] = PII(1,n);
    } else {
      scanf("%d", &t);
      kk[E] = n;
      es[E++] = PII(2,t);
    }
  }
  VI ks;
  REP(i,0,E) {
    if(es[i].first == 1) ks.push_back(es[i].second);
  }
  sort(ks.begin(), ks.end());
  ks.erase(unique(ks.begin(), ks.end()), ks.end());
  int sz = ks.size();
  REP(i,0,sz) {
    int k = ks[i];
    solve(k, i);
  }
  REP(i,0,E) {
    if(es[i].first == 2) {
      //cerr << kk[i] << endl;
      int ki = lower_bound(ks.begin(), ks.end(), kk[i]) - ks.begin();
      printf("%d\n", kans[ki][es[i].second]);
    }
  }
  return 0;
}
