#include <bits/stdc++.h>

using namespace std;

const int Mod = 1e9 + 7;
const int N = 1e5 + 1;
vector <int> v[N];
int f[N], tf[N], b[N];

int power(int a, int b) {
	if (b == 0)	return 1;
	int ans = power(a, b / 2);
	ans = 1LL * ans * ans % Mod * ((b & 1) ? a : 1) % Mod;
	return ans;
}

int C(int n, int k) {
	return 1LL * f[n] * b[k] % Mod * b[n - k] % Mod;
}

int cal(int n, int k) {
	if (v[k].size()) return v[k][n - k];
	v[k].push_back(1);
	for (int i = k + 1; i < N; i++) {
		int temp = 1LL * v[k].back() * 26 % Mod;
		temp = (temp + 1LL * C(i - 1, k - 1) * tf[i - k] % Mod) % Mod;
		v[k].push_back(temp);
	}
	return v[k][n - k];
}

void pre() {
	f[0] = tf[0] = b[0] = 1;
	for (int i = 1; i < N; i++)
		f[i] = 1LL * f[i - 1] * i % Mod;
	for (int i = 1; i < N; i++)
		tf[i] = 1LL * tf[i - 1] * 25 % Mod;
	for (int i = 1; i < N; i++)
		b[i] = power(f[i], Mod - 2);
}

main() {
	ios::sync_with_stdio(false); cin.tie(NULL);
	string s;
	int q, t, n;
	cin >> q >> s;
	pre();
	while (q--) {
		cin >> t;
		if (t == 1)
			cin >> s;
		else {
			cin >> n;
			if (n < s.size())
				cout << 0 << endl;
			else cout << cal(n, s.size()) << endl;
		}
	}
}
