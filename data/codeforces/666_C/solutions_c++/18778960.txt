#include <cstdio>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <string>
#include <math.h>
#include <stdlib.h>
#define N 100010
#define INF 0x3f3f3f3f
#define endl '\n'
#define ll long long
typedef long long LL;
#define mod 1000000007
using namespace std;
char s[N];
ll dp[N],ans[N],flag[N],mx[N],p[N],ni[N];
struct node
{
    int n,m,i;
}a[N];
bool cmp(node a,node b)
{
    if(a.m==b.m) return a.n>b.n;
    return a.m<b.m;
}
LL exp_mod(LL a, LL b, LL p)
{
    LL res = 1;
    while(b != 0)
    {
        if(b&1) res = (res * a) % p;
        a = (a*a) % p;
        b >>= 1;
    }
    return res;
}
int main()
{
  //  freopen("in.in","r",stdin);
   // freopen("out.out","w",stdout);
    int t,n,sum=0;
    scanf("%d",&t);
    scanf("%s",s);
    mx[0]=1;p[0]=1;ni[0]=1;
    for(int i=1;i<=100000;i++)
    {
        mx[i]=(mx[i-1]*25)%mod;
        p[i]=(p[i-1]*i)%mod;
        ni[i]=exp_mod(p[i],mod-2,mod);
    }
    int m=strlen(s);
    while(t--)
    {
        scanf("%d\n",&n);
        if(n==1) scanf("%s",s),m=strlen(s);
        else
        {
            scanf("%d",&n);
            a[sum].i=sum,a[sum].n=n,a[sum++].m=m;
        }
    }
    sort(a,a+sum,cmp);
    for(int i=0;i<sum;i++)
    {
        if(i==0||a[i].m!=a[i-1].m)
        {
            n=a[i].n,m=a[i].m;
            memset(flag,0,sizeof(flag));flag[m]=1;
            for(int j=m+1;j<=n;j++) flag[j]=(flag[j-1]*26%mod+(p[j-1]*ni[m-1]%mod*ni[j-m])%mod*mx[j-m])%mod;
            ans[a[i].i]=flag[n];
        }
        else ans[a[i].i]=flag[a[i].n];
    }
    for(int i=0;i<sum;i++) printf("%I64d\n",ans[i]);
    return 0;
}

			 			   		  	 	 	 	   	    		