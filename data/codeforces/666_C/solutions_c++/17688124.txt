#include <iostream>  
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <cstdio>

using namespace std;

const int size = 200001;
typedef long long ll;
ll mod = 1e9+7;

ll jc[size], ni[size]; 
ll p25[size];
char ch[size];

ll Pow (ll a, int k)
{
	ll ans = 1;
	while (k)
	{
		if (k & 1) ans = ans * a % mod;
		a = a * a % mod;
		k >>= 1;
	}
	return ans;
}

int b[size], num;
struct node 
{
	ll n, m, id, ans;
} a[size];
bool cmp (node a, node b)
{
	if (a.n != b.n) return a.n < b.n;
	return a.m < b.m;
}
bool cmp2 (node a, node b)
{
	return a.id < b.id;
}

int main () {
	jc[0] = ni[0] = p25[0] = 1;
	for (int i = 1; i < size; i++)
	{
		jc[i] = jc[i-1] * i % mod;
		ni[i] = Pow(jc[i], mod - 2);
		p25[i] = p25[i-1] * 25 % mod;
	}
	int t;
	cin >> t >> ch;
	int tmp = strlen(ch);
	int id = 0;
	while (t--)
	{
		int x, y;
		cin >> x;
		if (x == 1)
		{
			cin >> ch;
			tmp = strlen(ch);
		}
		else 
		{
			cin >> y;
			a[id].n = tmp;
			a[id].m = y - tmp;
			a[id].id = id;
			id++;
		}
	}
	sort (a, a + id, cmp);
	ll lasn = 0, lasm, lasans;
	for (int i = 0; i < id; i++)
	{
		int n = a[i].n, m = a[i].m;
		if (m < 0) 
		{
			a[i].ans = 0;
			continue;
		}
		if (n != lasn)
		{
			lasm = 0;
			lasn = n;
			lasans = 1;
		}
		while (m > lasm)
		{
			lasm ++;
			lasans = lasans * 26 + jc[lasn + lasm - 1] * ni[lasn - 1] % mod * ni[lasm] % mod * p25[lasm];
			lasans %= mod;
		}
		a[i].ans = lasans;
	}
	sort (a, a + id, cmp2);
	for (int i = 0; i < id; i++)
		cout << a[i].ans << endl;
	return 0;	
}
