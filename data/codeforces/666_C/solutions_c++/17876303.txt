#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<queue>
#include<vector>
using namespace std;

struct query{
	int len,n,id,ans;	
}q[100010];
const int mo=1000000007;
int n,m,len,x,cnt;
int f[100010],fac[100010],nfac[100010],pw[100010];
char s[100010];

bool cmp1(query a,query b){
	return a.len<b.len;	
}
bool cmp2(query a,query b){
	return a.id<b.id;	
}
int ksm(int x,int y){
	int tmp=1;
	for(;y;y>>=1,x=1ll*x*x%mo)
	if(y&1) tmp=1ll*tmp*x%mo;
	return tmp;	
}
long long C(int n,int m){
	return 1ll*fac[n]*nfac[n-m]%mo*nfac[m]%mo;
}
int main(){
	scanf("%d",&m);
	scanf("%s",s);
	len=strlen(s);
	for(int i=1;i<=m;i++){
		scanf("%d",&x);
		if(x==2){
			scanf("%d",&x);
			q[++cnt]=(query){len,x,i,0};
		} else{
			scanf("%s",s);
			len=strlen(s);
		}
	}
	sort(q+1,q+1+cnt,cmp1);
	fac[0]=1;
	for(int i=1;i<=100000;i++) fac[i]=1ll*fac[i-1]*i%mo;
	nfac[100000]=ksm(fac[100000],mo-2);
	for(int i=99999;~i;i--) nfac[i]=1ll*nfac[i+1]*(i+1)%mo;
	pw[0]=1;
	for(int i=1;i<=100000;i++) pw[i]=1ll*pw[i-1]*25%mo;
	for(int i=1;i<=cnt;i++)
	if(q[i].len==q[i-1].len) q[i].ans=f[q[i].n];
	else {
		memset(f,0,sizeof(f));
		for(int j=q[i].len;j<=100000;j++)
		f[j]=(1ll*f[j-1]*26+pw[j-q[i].len]*C(j-1,q[i].len-1)%mo)%mo;
		q[i].ans=f[q[i].n];
	}
	sort(q+1,q+1+cnt,cmp2);
	for(int i=1;i<=cnt;i++) printf("%d\n",q[i].ans);
	return 0;
}