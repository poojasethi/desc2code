#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
long long P=1e9+7,f[100010],g[100010],ans[100010],inv[100010],fac[100010],now[100010],anss;
int m,i,t,l,j,k,tot;
char s[100010];

struct nn{int num,id;}n[100010];
bool cmp(nn A,nn B){return A.num<B.num;}
long long sqr(long long x){return x*x%P;}
long long pow(long long a,long long n)
{
	if (n==0) return 1;
	if (n%2==0) return sqr(pow(a,n/2));
	return sqr(pow(a,n/2))*a%P;
}
int main()
{
	scanf("%d",&m);
	scanf("%s",s);
	f[0]=g[0]=inv[0]=fac[0]=1;
	for (i=1;i<=100000;i++)
	{
		f[i]=f[i-1]*26%P;
		g[i]=g[i-1]*25%P;
		fac[i]=fac[i-1]*i%P;
		inv[i]=inv[i-1]*pow(i,P-2)%P;
	}
	t=0;
    while (m>0)
	{
		if (t==0) scanf("%d",&t);
		if (t==1) {scanf("%s",s);t=0;m--;}
		else
		{
			l=strlen(s);
			tot=1;
			scanf("%d",&n[1].num);
            m--;
			while (m>0&&t==2)
			{
				scanf("%d",&t);
				if (t==1) break;
				else scanf("%d",&n[++tot].num);
				m--;
			}
			for (j=1;j<=tot;j++) n[j].id=j;
			sort(n+1,n+tot+1,cmp);
			for (j=0;j<=n[tot].num-l;j++)
			  now[j]=g[j]*fac[j+l-1]%P*inv[j]%P;
			for (j=1;j<=tot;j++)
			{
				int d=n[j].id;
				if (n[j].num<l) ans[d]=0;
				else
				{
					if (n[j-1].num<l) 
					{
						ans[d]=0;
						for (k=0;k<=n[j].num-l;k++) ans[d]=(ans[d]+now[k]*f[n[j].num-l-k]%P)%P;
						anss=ans[d];
					}
					else
					{
						ans[d]=anss*f[n[j].num-n[j-1].num]%P;
						for (k=n[j-1].num-l+1;k<=n[j].num-l;k++) ans[d]=(ans[d]+now[k]*f[n[j].num-l-k]%P)%P;
						anss=ans[d];
					} 
				}
			}
			for (j=1;j<=tot;j++) printf("%I64d\n",ans[j]*inv[l-1]%P);
		}
	 } 
	return 0;
 } 
