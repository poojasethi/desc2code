#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<vector>
using namespace std;

typedef long long lld;
const int maxn = 100005;
const int mod = (int)1e9+7;

char ch[maxn];
int fact[maxn];
int a25[maxn];
int inv[maxn];
int q[maxn],t[maxn];
int n , m;

int pow(int x, int n){
	int ret = 1 ;
	while(n){
		if(n&1) ret = (lld)ret*x%mod;
		x = (lld)x*x%mod;
		n >>=1;
	}	
	return ret;
}

void init(){
	fact[0] = a25[0] = inv[0] = 1;
	for(int i = 1 ; i < maxn ; i ++){
		fact[i] = (lld)fact[i-1]*i%mod;
		a25[i] = (lld)a25[i - 1] * 25 %mod;
		inv[i] = pow(fact[i],mod - 2);
	}	
}

vector<int> gao(int x){
	vector<int>ret(maxn , 0);
	ret[x] = 1;
	for(int i = x + 1; i < maxn ; i ++){
		ret[i] =(lld) ret[i - 1]*26%mod+(lld)a25[i-x]*fact[i-1]%mod*inv[x-1]%mod*inv[i-x]%mod;
		ret[i] %= mod;
	}
	return ret ;
}

int main(){
	int i , j , tp , l;
	init();
	//puts("done");
	scanf("%d",&m);
	vector<int> values;
	scanf("%s",ch);
	int ll = strlen(ch);
	values.push_back(ll);
	for(i = 0 ; i < m ; i ++){
		scanf("%d",&t[i]);
		if(t[i] == 1){
			scanf("%s",ch);
			l = strlen(ch);
			q[i] = l;
			values.push_back(l);
		}else{
			scanf("%d",&q[i]);
		}
	}		
	sort(values.begin(),values.end());
	values.erase(unique(values.begin(),values.end()),values.end());
	vector< vector<int> > solve;
    for(i = 0 ; i < values.size(); i ++){
    	solve.push_back(gao(values[i]));
    }
    int cur = ll;
    for(i = 0; i < m ; i ++){
   		if(t[i] == 1){
		   	cur = q[i];
	    }else{
    		int idx = lower_bound(values.begin(),values.end(), cur) - values.begin();
    		printf("%d\n",solve[idx][q[i]]);
    	}
    }
	return 0;
} 