#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
const int MOD = 1000000007;
const int MAX = 300005;
int b26[MAX], b25[MAX], f[MAX], rev[MAX];
vector<pair<int, int> > v[MAX];
int ans[MAX];
int bpow(int a, int b)
{
	int ans = 1;
	while (b)
	{
		if (b & 1)
			ans = 1LL * ans * a % MOD;
		b >>= 1;
		a = 1LL * a * a % MOD;
	}
	return ans;
}
int c(int n, int k)
{
	if (k < 0 || n < k || n < 0)
		return 0;
	return 1LL * f[n] * rev[k] % MOD * rev[n - k] % MOD;
}
int solve(int N, int n, int h = 1000000000)
{
	int ans = 0, k = N - n;
	for (int i = 0; i <= min(h, k); i++)
		ans = (ans + 1LL * b26[i] * c(k + n - i - 1, n - 1) % MOD * b25[k - i]) % MOD;
	return ans;
}
void solveall(int n)
{
	if (v[n].empty())
		return;
	sort(v[n].begin(), v[n].end());
	ans[v[n][0].second] = solve(v[n][0].first, n);
	for (int i = 1; i < (int)v[n].size(); i++)
	{
		int prv = v[n][i - 1].first;
		int cur = v[n][i].first;
		int dif = cur - prv;
		ans[v[n][i].second] = (solve(v[n][i].first, n, dif - 1) + 1LL * b26[dif] * ans[v[n][i - 1].second]) % MOD;
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	f[0] = rev[0] = 1;
	b26[0] = b25[0] = 1;
	for (int i = 1; i < MAX; i++)
	{
		b25[i] = 1LL * b25[i - 1] * 25 % MOD;
		b26[i] = 1LL * b26[i - 1] * 26 % MOD;
		f[i] = 1LL * f[i - 1] * i % MOD;
		rev[i] = bpow(f[i], MOD - 2);
	}
	int q;
	cin >> q;
	string s;
	cin >> s;
	int n = s.size();
	memset(ans, -1, sizeof(ans));
	for (int i = 0; i < q; i++)
	{
		int type;
		cin >> type;
		if (type == 1)
		{
			cin >> s;
			n = s.size();
		}
		else
		{
			int N;
			cin >> N;
			if (N >= n)
				v[n].push_back(make_pair(N, i));
			else
				ans[i] = 0;
		}
	}
	for (int i = 0; i < MAX; i++)
		solveall(i);
	for (int i = 0; i < q; i++)
		if (ans[i] != -1)
			cout << ans[i] << "\n";
	return 0;
}
