#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

const int MaxN = 1010;

int cnt[MaxN], N, tot;
string num[MaxN][MaxN];
int nCnt[MaxN], r[MaxN];
int L[MaxN];

string cal(int n)
{
	string ret;
	for(int i=0; i<n; i++) ret.push_back(r[i] + '0');
	return ret;
}

void dfs(int dep)
{
//	cout << "dep  " << dep << "  " << N << endl;
	if(tot == N)	return;
	
	if(cnt[dep] && nCnt[dep] < cnt[dep])
	{
		num[dep][nCnt[dep]++] = cal(dep);
		tot ++;
		return;	
	}
	
	r[dep] = 0;
	dfs(dep+1);
	r[dep] = 1;
	dfs(dep+1);	
}

int main()
{
	cin >> N;
	
	for(int i=0; i<N; i++)
	{
		cin >> L[i];
		cnt[L[i]] ++;	
	}
	
	dfs(0);
	
	if(tot < N)	puts("NO");
	else
	{
		puts("YES");
		for(int i=0; i<N; i++)
		{
			cout << num[L[i]][--nCnt[L[i]]] << endl;
		}	
	}
	
//	while(1);
	return 0;	
}
