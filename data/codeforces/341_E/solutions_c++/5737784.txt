#include <cstdio>
#include <queue>
#include <cassert>
#include <algorithm>
using namespace std;

typedef pair<int, int> pi;
#define Px first
#define Py second

const int N = int(1e3) + 50;

pi A[N];
int n;
queue<pi> res;

void solve (pi &x, pi &y, pi &z)
{
	if (x > y) swap(x, y);
	if (y > z) swap(y, z);
	if (x > y) swap(x, y);
	if (x.Px == 0)
		return;

	int v = y.Px / x.Px;
	for (int i = 0; (1 << i) <= v; ++i)
		if ((v >> i) & 1) {
			res.push(pi(x.Py, y.Py));
			y.Px -= x.Px;
			x.Px <<= 1;
		}
		else {
			res.push(pi(x.Py, z.Py));
			z.Px -= x.Px;
			x.Px <<= 1;
		}
	solve(x, y, z);
}

int main ()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
	{
		scanf("%d", &A[i].Px);
		A[i].Py = i;
	}
	sort(A + 1, A + 1 + n);

	if (A[n - 1].Px == 0)
		return puts("-1"), 0;

	if (A[n - 2].Px == 0)
		return puts("0"), 0;

	for (int i = 1; i + 2 <= n; ++i)
	{
		if (A[i].Px == 0) continue;
		solve(A[i], A[i + 1], A[i + 2]);
		assert(A[i].Px == 0);
	}

	printf("%d\n", (int)res.size());
	while (!res.empty())
	{
		printf("%d %d\n", res.front().Px, res.front().Py);
		res.pop();
	}
	return 0;
}

