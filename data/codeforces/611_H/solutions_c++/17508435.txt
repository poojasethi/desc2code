#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#define bit(x) (1 << (x - 1))
using namespace std;

const int N = 2e5 + 10;
struct Edge
{
	int u, v;
	Edge (int _u = 0, int _v = 0) {u = _u, v = _v;}
} Input[N];
vector<Edge> E[7][7];
vector<int> P[7];
int req[7][7], res[7];
int n, m;

void init()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; ++ i)
	{
		int t = 0;
		for (int x = i; x; x /= 10) ++ t;
		P[t].push_back(i);
		++ res[t];
		m = t;
	}
	char su[100], sv[100];
	for (int i = 1; i < n; ++ i)
	{
		scanf(" %s %s", &su, &sv);
		Input[i].u = strlen(su), Input[i].v = strlen(sv);
		++ req[Input[i].u][Input[i].v];
		if (Input[i].u != Input[i].v) ++ req[Input[i].v][Input[i].u];
	}
}

bool check()
{
	for (int i = 1; i <= m; ++ i) if (!res[i])
		for (int j = 1; j <= m; ++ j) if (req[j][i]) return 0;
	for (int S = 1, full = 1 << m; S < full; ++ S)
	{
		int t = 0;
		for (int i = 1; i <= m; ++ i) if (S & bit(i)) 
			t += res[i];
		if (!t) continue;
		for (int i = 1; i <= m; ++ i) if (S & bit(i))
			for (int j = 1; j <= i; ++ j) if (S & bit(j))
				t -= req[i][j];
		if (t <= 0) return 0;
	}
	return 1;
}

void solve()
{
	for (int cnt = 0; cnt < n - 1;)
		for (int u = 1; u <= m && cnt < n - 1; ++ u) if (res[u])
			for (int v = 1; v <= m && cnt < n - 1; ++ v) if (res[v] && req[u][v])
			{
				-- req[u][v], -- res[u];
				if (u != v) -- req[v][u];
				if (check()) 
				{
					++ cnt;
					int _u = min(u, v), _v = u + v - _u;
					Edge cur;
					cur.u = P[u][P[u].size() - 1];
					P[u].pop_back();
					cur.v = P[v][P[v].size() - 1];
					if (_u != u) swap(cur.u, cur.v);
					E[_u][_v].push_back(cur);
					continue;
				}
				++ req[u][v], ++ res[u];
				if (u != v) ++ req[v][u];
			}
}

void write()
{
	for (int i = 1; i < n; ++ i)
	{
		int l1 = Input[i].u, l2 = Input[i].v;
		if (l1 > l2) swap(l1, l2);
		Edge cur = E[l1][l2][E[l1][l2].size() - 1];
		E[l1][l2].pop_back();
		if (Input[i].u == l1) printf("%d %d\n", cur.u, cur.v);
		else printf("%d %d\n", cur.v, cur.u);
	}
}

int main()
{
	init();
	if (!check())
	{
		puts("-1");
		return 0;
	}
	solve();
	write();
}