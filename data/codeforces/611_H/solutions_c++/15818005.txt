#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#define pb push_back
#define pbk pop_back
#define sft(x) (1<<((x)-1))
using namespace std;

const int N = 10;

int n, m, b[N], f[N][N];
vector<int> a[N];

inline int Count(int x) {
	int y=0;
	for (; x; x/=10, ++y);
	return y;
}

inline int Read() {
	static char s[N];
	scanf(" %s", s+1);
	return strlen(s+1);
}

void Init() {
	scanf("%d", &n);
	for (int i=1; i<=n; ++i)
		a[Count(i)].pb(i);
	m = Count(n);
	for (int i=1; i<=m; ++i)
		b[i] = a[i].size();
	for (int i=1; i<n; ++i) {
		int u=Read(), v=Read();
		++f[u][v];
		if (u!=v) ++f[v][u];
	}
}

inline bool Check() {
	for (int i=1; i<=m; ++i) if (!b[i])
		for (int j=1; j<=m; ++j) if (f[i][j]) return 0;
	for (int i=0, full=1<<m; i<full; ++i) {
		int V=0, E=0;
		for (int j=1; j<=m; ++j) if (i & sft(j)) V += b[j];
		if (!V) continue;
		for (int j=1; j<=m; ++j) if (i & sft(j))
			for (int k=1; k<=j; ++k) if (i & sft(k)) E += f[j][k];
		if (E >= V) return 0;
	}
	return 1;
}

inline bool Test(int u, int v) {
	--b[u], --f[u][v];
	if (u!=v) --f[v][u];
	if (Check()) return 1;
	++b[u], ++f[u][v];
	if (u!=v) ++f[v][u];
	return 0;
}

inline void Print(int u, int v) {
	printf("%d ", a[u][a[u].size()-1]);
	a[u].pbk();
	printf("%d\n", a[v][a[v].size()-1]);
}

void Solve() {
	if (!Check()) { puts("-1"); return; }
	for (int q=n-1; q; ) 
		for (int u=1; u<=m; ++u)
			for (int v=1; v<=m; ++v) if (b[u] && f[u][v]) 
				if (Test(u, v)) 
					Print(u, v), --q; 
}

int main() {

	Init();
	Solve();

	return 0;
}
