#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#define Clear(a, b) memset(a, b, sizeof a)
#define Copy(a, b) memcpy(a, b, sizeof a)
using namespace std;
const int N = 2e5 + 10, M = 7;

int n, m;
int cnt[M], f[M][M], lim[N][2];
char s[M];
int q[M][N], tank[M][M][N];

inline int Cnt(int p) {
	int res = 0;
	for (; p; p /= 10)
		++res;
	return res;
}

void Init() {
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		int j = Cnt(i);
		q[j][cnt[j]] = i;
		++cnt[j];
	}
	m = Cnt(n);
	for (int i = 1; i < n; ++i) {
		scanf(" %s", s + 1);
		int u = strlen(s + 1);
		scanf(" %s", s + 1);
		int v = strlen(s + 1);
		tank[u][v][f[u][v]] = i;
		++f[u][v];
		if (u != v) {
			tank[v][u][f[v][u]] = i;
			++f[v][u];
		}
		lim[i][0] = u, lim[i][1] = v;
	}
}

int ans[N][2], sum;

inline bool Judge() {
	for (int i = 1; i <= m; ++i)
		if (!cnt[i])
			for (int j = 1; j <= m; ++j)
				if (f[i][j]) return 0;
	int full = (1 << m) - 1;
	for (int i = 1; i <= full; ++i) {
		int v = 0;
		for (int j = 1; j <= m; ++j)
			if ((i >> (j - 1)) & 1)
				v += cnt[j];
		if (!v) continue;
		int e = 0;
		for (int j = 1; j <= m; ++j)
			if ((i >> (j - 1)) & 1)
				for (int k = 1; k <= j; ++k)
					if ((i >> (k - 1)) & 1)
						e += f[j][k];
		if (e >= v) 
			return 0;
	}
	return 1;
}

inline bool Test(int a, int b) {
	--f[a][b];
	if (a != b) --f[b][a];
	if (Judge()) return 1;
	++f[a][b];
	if (a != b) ++f[b][a];
	return 0;
}

void Solve() {
	for (int i = 1; i < n; ++i) {
		bool ok = 0;
		for (int a = 1; a <= m; ++a) if (cnt[a]) {
			int u = q[a][--cnt[a]];
			for (int b = 1; b <= m; ++b) if (cnt[b] && f[a][b]) {
				int v = q[b][cnt[b] - 1];
				if (Test(a, b)) {
					int p = tank[a][b][f[a][b]];
					if (a != lim[p][0]) swap(u, v);
					ans[p][0] = u, ans[p][1] = v;
					++sum, ok = 1;
					break;
				}
			}
			if (ok) break;
			++cnt[a];
		}
	}
	if (sum != n - 1) 
		puts("-1");
	else 
		for (int i = 1; i < n; ++i)
			printf("%d %d\n", ans[i][0], ans[i][1]);
}

int main() {

	Init();
	Solve();
	
	return 0;
}
 				  	 			   	       				 	