#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
const int N=200;
const int M=2E5+5;
const int inf=1E9;
struct map{
	int x,y,c;
}ans[M],a[N*2];
int n,x,y,f[10][10],g[10],k,fa[N],sum[10],tot,F[10][10],l[10];
char ss[10];
bool o[10];
int m,fir[N],next[N*2],s,t,lev[N],cur[N],cnt;
queue <int> q;

void print()
{
	tot=0;
	for (int i=2;i<=m;i++) //printf("%d %d\n",g[fa[i]],g[i]);
	{
		tot++; ans[tot].x=g[fa[i]]; ans[tot].y=g[i];
	}
	for (int i=0;i<=k;i++) if (a[i].x<=m*m)
	{
		x=(a[i].x-1)/m+1; y=(a[i].x-1)%m+1;
		if (a[i].y==m*m+y) swap(x,y);
	//	cerr<<x<<" "<<y<<" "<<a[i^1].c<<endl;
		for (int j=1;j<=a[i^1].c;j++) 
		{
			tot++; 
			sum[x]++;
			ans[tot].x=g[x]+sum[x]; ans[tot].y=g[y];
		}
	}
	for (int i=1;i<=tot;i++) printf("%d %d\n",ans[i].x,ans[i].y);
	exit(0);	
}

bool bfs()
{
	memset(lev,0,sizeof(lev));
	q.push(s); lev[s]=1;
	while (!q.empty())
	{
		x=q.front(); q.pop();
		for (int i=fir[x];i!=-1;i=next[i]) if (a[i].c)
		{
			int v=a[i].y;
			if (!lev[v]) lev[v]=lev[x]+1,q.push(v);
		}
	}
	return lev[t];
}

int dfs(int x,int y) //给x点y的流量，最多用掉k个  
{
	if (x==t) return y;
	int v=y;
	for (int &i=cur[x];i!=-1;i=next[i]) if (a[i].c&&lev[x]+1==lev[a[i].y])
	{
		int u=dfs(a[i].y,min(v,a[i].c));
		a[i].c-=u; a[i^1].c+=u; v-=u;
		if (v<=0) return y;
	}
	return y-v;
}

void add(int x,int y,int c)
{
	k++; a[k].x=x; a[k].y=y; a[k].c=c; next[k]=fir[x]; fir[x]=k;
	swap(x,y);
	k++; a[k].x=x; a[k].y=y; a[k].c=0; next[k]=fir[x]; fir[x]=k;
}

void build()
{
	k=-1;
	memset(fir,-1,sizeof(fir));
	s=m*m+m+1; t=s+1;
	for (int i=1;i<=m;i++)
		for (int j=i;j<=m;j++) 
		{
			x=(fa[j]==i||fa[i]==j);
			y=(i-1)*m+j;
			add(s,y,f[i][j]-x);
			add(y,m*m+i,inf);
			add(y,m*m+j,inf);
		}
	for (int i=1;i<m;i++) add(m*m+i,t,g[i]*9-1);
	add(m*m+m,t,n-g[m]); 
}

void dfs(int x)
{
	if (x>m)
	{
		build();
		cnt=0;
		while (bfs()) 
		{
			for (int i=1;i<=t;i++) cur[i]=fir[i];
			cnt+=dfs(s,inf);
		}
		if (cnt==n-m) print();
		return;
	}
	for (int i=1;i<=m;i++) if (!o[i])
	{
		fa[i]=0; o[i]=1; l[x]=i;
		for (int j=1;j<x;j++) if (f[min(i,l[j])][max(i,l[j])])
		{
			fa[i]=l[j]; dfs(x+1);
		}
		o[i]=0;
	}
}

int get()
{
	scanf("%s",ss);
	return strlen(ss);
}

int main()
{
	cin>>n;
	for (int xx=1;xx<=n;xx*=10,m++);
	for (int i=1;i<n;i++)
	{
		x=get(); y=get();
		a[i].x=x; a[i].y=y;
		if (x>y) swap(x,y);
		f[x][y]++; 
	}
	g[1]=1; for (int i=2;i<=m;i++) g[i]=g[i-1]*10;
	o[1]=l[1]=1; dfs(2);
	cout<<-1;
}