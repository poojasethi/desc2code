#include<cstdio>
#include<algorithm>
#include<cstring>
#define inf 1000000007
using namespace std;
int n,tot,num,size,sum;
char c[10];
int f[10][10];
int len[10];
int need[10];
int dad[10];
int ans[200010][2];
int first[50];
int g[10][10];
int nb[10][10];
int now[10];
int deep[50],p[50];

struct node
{
	int len,next,to;
};node bian[10000];


void inser(int a,int b,int c)
{
	size++;
	bian[size].to=b;
	bian[size].next=first[a];
	first[a]=size;
	bian[size].len=c;
	size++;
	bian[size].to=a;
	bian[size].next=first[b];
	first[b]=size;
	bian[size].len=0;
}


void bfs()
{
	memset(deep,0,sizeof(deep));
	int head=0,tail=1,i,u,dd;
	p[1]=0;deep[0]=1;
	while(head<tail)
	{
		head++;
		u=p[head];
		for(i=first[u];i;i=bian[i].next)
		{
			dd=bian[i].to;
			if(bian[i].len&&!deep[dd])
			{
				tail++;
				deep[dd]=deep[u]+1;
				p[tail]=dd;
				if(deep[num]) return;
			}
		}
	}
} 

int dfs(int x,int tot)
{
	if(x==num) return tot;
	int w=0,i,dd,u;
	for(i=first[x];i&&tot>w;i=bian[i].next)
	{
		u=bian[i].to;
		if(deep[u]==deep[x]+1&&bian[i].len)
		{
			dd=dfs(u,min(bian[i].len,tot-w));
			w+=dd;
			bian[i].len-=dd;
			bian[i^1].len+=dd;
		}
	}
	if(!w) deep[x]=0;
	return w;
}

void flow()
{
	int ret=0,dd,j,s,t;
	while(1)
	{
		bfs();
		if(!deep[num]) break;
		while(1)
		{
			int dd=dfs(0,inf);
			if(!dd) break;
			ret+=dd;
		}
	}
	if(ret==sum)
	{
		int k=1;
		for(int i=1;i<=tot;i++) {first[i]=now[i]=k;k*=10;}
		for(j=1;j<n;j++)
		{
			s=ans[j][0];
			t=ans[j][1];
			if(s==t)
			{
				now[s]++;
				printf("%d %d\n",first[s],now[s]);
			}
			else
			{
				if(nb[s][t])
				{
					printf("%d %d\n",first[s],first[t]);
					nb[s][t]=nb[t][s]=0; 
				}
				else
				{
					if(bian[g[s][t]].len>0)
					{
						bian[g[s][t]].len--;
						now[t]++;
						printf("%d %d\n",first[s],now[t]);
					}
					else
					{
						bian[g[t][s]].len--;
						now[s]++;
						printf("%d %d\n",now[s],first[t]);
					}
				}
			}
		}
		exit(0);	
	}
}

void go()
{
	int i,j,k;num=tot;size=1;
	memset(first,0,sizeof(first));
	for(i=1;i<=tot;i++)
	{
		for(j=i+1;j<=tot;j++)
		{
			num++;
			inser(0,num,f[i][j]);
			inser(num,i,inf);
			g[j][i]=size;
			inser(num,j,inf);
			g[i][j]=size;
		}
	} 
	num++;
	for(i=1;i<=tot;i++)
	{
		inser(i,num,need[i]);
	}	
	flow();
}



int getdad(int x)
{
	if(dad[x]==x) return x;
	return getdad(dad[x]);
}

void work(int i)
{
	if(i==tot)
	{
//		int f=0;
//		for(int j=1;j<=tot;j++)
//			if(getdad(tot-1))
		go(); 
		return;
	}
	int j,k,s,t;
	for(j=1;j<=tot;j++)
	{
		for(k=j+1;k<=tot;k++)
		{
			if(f[j][k]<=0) continue;
			s=getdad(j);
			t=getdad(k);
			if(s!=t)
			{
				dad[s]=t;
				f[j][k]--;f[k][j]--;
				nb[j][k]=nb[k][j]=1;
				work(i+1);	
				nb[k][j]=nb[j][k]=0;
				dad[s]=s;
				f[j][k]++;f[k][j]++;
			}
		}
	}
} 

int main()
{
	int i,j,k,s,t;
	scanf("%d",&n);
	for(i=1;i<n;i++)
	{
		scanf("%s",c+1);
		k=strlen(c+1);
		scanf("%s",c+1);
		j=strlen(c+1);
		if(j!=k)
		f[k][j]++;f[j][k]++;
		ans[i][0]=k;ans[i][1]=j;
	}
	k=n;
	while(k)
	{
		tot++;
		k/=10;
	}
	k=9;
	for(i=1;i<tot;i++)
	{
		len[i]=k;
		k*=10;
	}	
	k/=9;
	len[tot]=n-k+1;
	for(i=1;i<=tot;i++)                         //跑个什么算法 
	{
		need[i]=len[i]-f[i][i]-1;
		if(need[i]<0) need[i]=0; 
		sum+=need[i];
	}
	for(j=1;j<=tot;j++)
		dad[j]=j;
	work(1);
	puts("-1");
	return 0;
}