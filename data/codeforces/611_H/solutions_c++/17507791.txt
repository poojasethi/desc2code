#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cmath>
using namespace std;

#define ws(x) ((x == 1)?0:(int)log10(x))

const int N = 200010;

int tank[7][7][N],que[7][N];
int cnt[N],edg[7][7];
int a[N][2],ans[N][2];
int n,m,jishu;

char s1[10];

void Init()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; i ++)
	{
		int j = ws(i)+1;
		que[j][++ cnt[j]] = i;
	}
	m = ws(n) + 1;
	for (int i = 1; i < n; i ++)
	{
		scanf(" %s", s1);
		int u = strlen(s1);
		scanf(" %s", s1);
		int v = strlen(s1);
		tank[u][v][++ edg[u][v]] = i;
		if (u != v)
			tank[v][u][++ edg[v][u]] = i;
		a[i][0] = u, a[i][1] = v;
	}
}

bool Chk2()
{
	for (int i = 1; i <= m; i ++) if (!cnt[i])
		for (int j = 1; j <= m; j ++) if (edg[i][j]) return 0;
	int lim = 1 << m;
	for (int st = 1; st < lim; st ++)
	{
		int sizeV = 0;
		for (int i = 1; i <= m; i ++)
			if (st & (1 << (i-1))) sizeV += cnt[i];
		if (!sizeV) continue;

		int sizeE = 0;
		for (int i = 1; i <= m; i ++)
			if (st & (1 << (i-1)))
				for (int j = 1; j <= i; j ++)
					if (st & (1 << (j-1))) sizeE += edg[i][j];
		if (sizeE >= sizeV) return 0;
	}
	return 1;
}

bool Chk(int x, int y)
{
	-- edg[x][y]; if (x != y) edg[y][x] --;
	if (Chk2()) return 1;
	++ edg[x][y]; if (x != y) edg[y][x] ++;
	return 0;
}

void Solve()
{
	int flag,u,v,p,x,y;
	for (int i = 1; i < n; i ++)
	{
		flag = 0;
		for (x = 1; x <= m; x ++) if (cnt[x])
		{
			u = que[x][cnt[x] --];
			for (y = 1; y <= m; y ++) if (cnt[y] && edg[x][y])
				if (Chk(x, y))
				{
					v = que[y][cnt[y]];
					p = tank[x][y][edg[x][y]+1];
					if (x != a[p][0]) swap(u, v);
					ans[p][0] = u, ans[p][1] = v;
					++ jishu, flag = 1;
					break;
				}

			if (flag) break;
			cnt[x] ++;
		}
	}

	if (jishu == n-1)
	{
		for (int i = 1; i < n; i ++) printf("%d %d\n", ans[i][0], ans[i][1]);
	} else puts("-1");
}

int main()
{
	Init();
	Solve();

	return 0;
}
