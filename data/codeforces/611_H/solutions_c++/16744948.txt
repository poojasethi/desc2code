#include <bits/stdc++.h>
using namespace std;
char s[10];
const int inf=1e9+7;
int rt[10];
int n;
const int N=2e5+10;
struct data{
	int x,y,id;bool us;
	bool friend operator <(data a,data b){
		if(a.x!=b.x)return a.x<b.x;
		else return b.y<b.y;
	}
}d[N],ans[N];
bool cmp(data a,data b){
	return a.id<b.id;
}
int hav[10][10];
int cnt[13],las[N];
int S,T;
struct edge{
	int to,next,flow;
}e[2333];
int first[45],size;
void insert(int u,int v,int w){
	size++;
	e[size].to=v;
	e[size].next=first[u];
	e[size].flow=w;
	first[u]=size;
}
void ins(int u,int v,int w){
	insert(u,v,w);insert(v,u,0);
}
int f[101][101];
int mx,siz,id[8];
bool us[23][23];
int dep[45],q[10000];
bool bfs(){
	int head=0,tail=1;
	memset(dep,-1,sizeof(dep));
	q[1]=S,dep[S]=0;
	while(head<tail){
		int u=q[++head];
		for(int i=first[u];i;i=e[i].next){
			int v=e[i].to;
			if(e[i].flow>0&&dep[v]==-1){
				dep[v]=dep[u]+1;
				q[++tail]=v;
			}
		}
	}
	return dep[T]!=-1;
}
int find(int x,int low){
	int a,w=0;
	if(x==T)return low;
	for(int i=first[x];i;i=e[i].next){
		int v=e[i].to;
		if(dep[v]==dep[x]+1&&e[i].flow>0&&(a=find(v,min(e[i].flow,low-w)))){
			w+=a;
			e[i].flow-=a;
			e[i^1].flow+=a;
		}
	}
	if(!w)dep[x]=-1;
	return w;
}
int max_flow(){
	int tans,ans=0;
	while(bfs()){
		while(tans=find(S,0x7fffffff))ans+=tans;
	}
	return ans;
}
void build(){
	for(int i=1;i<=mx;i++)
		for(int j=1;j<=mx;j++){
			if(us[i][j]){
				for(int k=1;k<n;k++){
					if(d[k].x==i&&d[k].y==j&&!ans[k].us){
						ans[k].us=1;ans[k].id=d[k].id;
						ans[k].x=rt[i];ans[k].y=rt[j];
						break;
					}
					if(d[k].x==j&&d[k].y==i&&!ans[k].us){
						ans[k].us=1;ans[k].id=d[k].id;
						ans[k].x=rt[j];ans[k].y=rt[i];
						break;
					}
				}
			}
		}
	memset(hav,0,sizeof(hav));
	for(int i=1;i<=mx;i++)
		for(int j=1;j<=mx;j++){
			if(i!=j)hav[i][j]=e[f[i][j]].flow;
		}
	int cn=0;
	//for(int i=1;i<n;i++){if(ans[i].x)cn++;printf("%d %d\n",ans[i].x,cn);}
	for(int i=1;i<n;i++){
		if(!ans[i].us){
			int x=d[i].x,y=d[i].y;
			if(hav[x][y]){
				hav[x][y]--; 
				ans[i].id=d[i].id;
				ans[i].x=rt[x],ans[i].y=++cnt[d[i].y];
			}
			else {
				hav[y][x]--;
				ans[i].id=d[i].id;
				ans[i].x=++cnt[d[i].x],ans[i].y=rt[y];
			}
		}
	}
	sort(ans+1,ans+n,cmp);
	for(int i=1;i<n;i++){
		printf("%d %d\n",ans[i].x,ans[i].y);
	}
	exit(0);
}
void work(){
	S=0,T=44;
	int need=0;
	memset(first,0,sizeof(first));
	size=1,siz=0;
	for(int i=1;i<=mx;i++)
		for(int j=i+1;j<=mx;j++){
			siz++;
			ins(S,siz,hav[i][j]+hav[j][i]);
//			fprintf(stderr,"%d %d\n",siz,hav[i][j]+hav[j][i]);
		}
//	fprintf(stderr,"----------------------------\n");
	for(int i=1;i<=mx;i++){
		ins(id[i]=++siz,T,las[i]-cnt[i]);
//		fprintf(stderr,"%d %d\n",id[i],las[i]-cnt[i]);
		need+=las[i]-cnt[i];
	}
//	fprintf(stderr,"----------------------------\n");
	siz=0;
	for(int i=1;i<=mx;i++)
		for(int j=i+1;j<=mx;j++){
			siz++;
			f[j][i]=size+2;
//			fprintf(stderr,"%d %d %d\n",siz,id[i],id[j]);
			ins(siz,id[i],inf);
			f[i][j]=size+2;
			ins(siz,id[j],inf);
		}
	if(max_flow()==need)build(),exit(0);
	return;
}
bool u[13];
int fa[13];
int getfa(int x){
	return x==fa[x]?x:fa[x]=getfa(fa[x]);
} 
bool judge(){
	for(int i=1;i<=7;i++)fa[i]=i;
	for(int i=1;i<=mx;i++)
		for(int j=1;j<=mx;j++){
			if(us[i][j]){
				int x=getfa(i),y=getfa(j);
				if(x!=y)fa[x]=y;
				else return 0;
			}
		}
	return 1;
}
void dfs(int x){
	if(!cnt[x]){
		if(judge())
			work();
		return;
	}
	for(int i=1;i<=mx;i++){
		if(i!=x&&!(us[i][x]||us[x][i])){
			if(hav[i][x]||hav[x][i]){
				int memx,memy;
				if(hav[x][i])memx=x,memy=i;
				else memx=i,memy=x;
				hav[memx][memy]--;
				us[memx][memy]=1;
				dfs(x+1);
				hav[memx][memy]++;
				us[memx][memy]=0;
			}
		}
	}
}
int main(){
	scanf("%d",&n);
	for(int i=1;i<n;i++){
		scanf("%s",s);
		int &x=d[i].x,&y=d[i].y;
		d[i].id=i; 
		x=strlen(s);
		scanf("%s",s);y=strlen(s);
		hav[x][y]++;
	}
	int t=1;
	for(int i=1;t<=n;i++){
		rt[i]=cnt[i]=t;t*=10;
		mx=i;
		las[i]=min(t-1,n);
	}
	sort(d+1,d+n);
	for(int i=1;i<n;i++){
		if(d[i].x==d[i].y&&cnt[d[i].x]<las[d[i].x]){
			ans[i].x=cnt[d[i].x],ans[i].y=++cnt[d[i].x];
			ans[i].id=d[i].id;ans[i].us=1;
		}
	}
	dfs(2);
	puts("-1");
}