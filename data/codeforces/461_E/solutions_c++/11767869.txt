#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long ll;

template<class T>
inline void mini(T &a,const T b){
	if(b<a) a=b;
}

const int C=4,T=(int)1e5+5,logT=13,logS=60;

const ll inf=~0ULL>>1;

ll n,m;
char t[T];

typedef ll matrix[C][C];

matrix opt[logS],now,tmp;

void mul(matrix c,matrix a,matrix b){
	for(int i=0;i<C;i++)
		for(int j=0;j<C;j++){
			c[i][j]=inf;
			for(int k=0;k<C;k++)
				mini(c[i][j],a[i][k]+b[k][j]);
		}
}

int x;

struct trie{
	trie *go[C];
	void dfs(int depth){
		for(int c=0;c<C;c++)
			if(go[c]){
				go[c]->dfs(depth+1);
			}
			else{
				mini(opt[0][x][c],(ll)depth);
			}
	}
} triepool[T*logT],*newtrie=triepool;

trie *root=newtrie++;

int main(){
	scanf("%I64d",&n);
	scanf("%s",t);
	m=strlen(t);
	for(int i=0;i<m;i++) t[i]-='A';
	for(int i=0;i<m;i++){
		trie *cur=root;
		for(int j=0;j<logT&&i+j<m;j++){
			if(cur->go[t[i+j]]==NULL)
				cur->go[t[i+j]]=newtrie++;
			cur=cur->go[t[i+j]];
		}
	}
	for(int x=0;x<C;x++)
		for(int y=0;y<C;y++)
			opt[0][x][y]=inf;
	for(x=0;x<C;x++){
		root->go[x]->dfs(1);
	}
	for(int q=0;q+1<logS;q++)
		mul(opt[q+1],opt[q],opt[q]);
	ll ans=0;
	for(int q=logS-1;q>=0;q--){
		mul(tmp,now,opt[q]);
		bool flag=false;
		for(int x=0;x<C;x++)
			for(int y=0;y<C;y++)
				if(tmp[x][y]<n)
					flag=true;
		if(flag){
			memcpy(now,tmp,sizeof(tmp));
			ans+=1LL<<q;
		}
	}
	printf("%I64d\n",ans+1);
}