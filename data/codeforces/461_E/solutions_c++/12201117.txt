#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
using namespace std;

typedef long long LL;

const LL N = 100005;
const LL INF = (1LL << 60);

LL n, len;
char w[N];
LL trie[N * 30][5], tot;
LL f[105][5][5];

void init()
{
    cin >> n >> w + 1, len = strlen(w + 1);
}
void add(LL left, LL right)
{
    LL cur = 0;
    for(LL i = left; i <= right; i ++)
    {
        LL t = w[i] - 'A' + 1;
        if(trie[cur][t] == 0) trie[cur][t] = ++tot;
        cur = trie[cur][t];
    }
}
void soso(LL u, LL begin, LL l)
{
    for(LL i = 1; i <= 4; i ++)
    {
        if(trie[u][i] == 0) f[0][begin][i] = f[0][begin][i] == -1 ? l : min(f[0][begin][i], l);
        else soso(trie[u][i], begin, l + 1);
    }
}
void work()
{
    memset(f, -1, sizeof(f));
    for(LL i = 1; i <= len ; i ++) add(i, min(len, i + 30 - 1));
    for(LL i = 1; i <= 4; i ++) soso(trie[0][i], i, 1);
    for(LL t = 1; t <= 60; t ++)
    {
        for(LL i = 1; i <= 4; i ++)
            for(LL j = 1; j <= 4; j ++)
            {
                f[t][i][j] = INF;
                for(LL k = 1; k <= 4; k ++)
                    f[t][i][j] = min(f[t][i][j], f[t - 1][i][k] + f[t - 1][k][j]);
            }
    }
    LL ans = 0, cur[5][5];
    memset(cur, 0, sizeof(cur));
    for(LL t = 60; t >= 0; t --)
    {
        LL tmp[5][5], best = INF;
        for(LL i = 1; i <= 4; i ++)
            for(LL j = 1; j <= 4; j ++)
            {
                tmp[i][j] = INF;
                for(LL k = 1; k <= 4; k ++)
                    tmp[i][j] = min(tmp[i][j], cur[i][k] + f[t][k][j]);
                best = min(best, tmp[i][j]);
            }
        if(best < n) ans += (1LL << t), memcpy(cur, tmp, sizeof(cur));
    }
    cout << ans + 1 << endl;
}

int main()
{
    //freopen("E.in", "r", stdin);
    //freopen("E.out", "w", stdout);
    ios::sync_with_stdio(false);
    init(), work();
    return 0;
}