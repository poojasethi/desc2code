#include <set>
#include <map>
#include <ctime>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#define fi first
#define se second
#define mk make_pair
#define pb push_back
#define SZ(x)	((int)(x).size())
#define All(x)  (x).begin(),(x).end()
#define MAX(x,y) ((x)<(y)?(y):(x))
#define For(i,x,y) for(int i=(int)x;i<=(int)y;i++)
#define Forn(i,x,y) for(int i=(int)x;i>=(int)y;i--)
using namespace std;
typedef long long ll;
typedef long double db;

ll n;
int F[100005*30][4],Be[100005];
int tre[100005*30][4],cnt=1;
char s[100005]; int M;
struct matrix{
	ll v[5][5];
	matrix(){memset(v,0x3f,sizeof v);}
	matrix operator +(const matrix &A)const{
		matrix res;
		For(k,0,3) For(i,0,3) For(j,0,3){
			res.v[i][j]=min(res.v[i][j],v[i][k]+A.v[k][j]);
		}	return res;
	}
}E,G,A;

void dfs(int x){
	memset(F[x],0x3f,sizeof F[x]);
	for(int i=0,v;i<4;i++){
		if(!tre[x][i]){
			F[x][i]=1;
		}else{
			dfs(v=tre[x][i]);
			For(j,0,3) F[x][j]=min(F[x][j],F[v][j]+1);
		}
	}
}

bool check(ll x){
	G=E;	A=matrix();	memset(A.v,0,sizeof A.v);
	for(--x;x;x>>=1,G=G+G)if(x&1) A=A+G;
	For(i,0,3) For(j,0,3) if(A.v[i][j]<n) return true;
	return false;
}

int main(){
	scanf("%I64d",&n);
	scanf("%s",s+1); M=strlen(s+1);
	For(i,1,M){
		int p=1;
		For(j,i,i+30){
			if(j>M) break;
			int &v=tre[p][s[j]-'A'];
			if(!v) v=++cnt;
			if(j==i) Be[i]=v;
			p=v;
		}
	}	dfs(1);	memset(E.v,0,sizeof E.v);
	For(i,0,3) For(j,0,3)	E.v[i][j]=F[tre[1][i]][j];
	ll l=0,r=n,md;
	while(l+1<r) check(md=(l+r)>>1)?(l=md):(r=md);
	check(r)?printf("%I64d\n",r):printf("%I64d\n",l);
	return 0;
}
