#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <ctime>
#define fi first
#define se second
#define PA pair<int,int>
#define VI vector<int>
#define VP vector<PA >
#define mk(x,y) make_pair(x,y)
#define N 100010
#define int64 long long
#define p 1229328423
#define mo 100007
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
const int64 inf=(int64)2e18;
struct ww {
	int head[mo],a[mo],next[mo],t;
	inline void inc(int y) {
		int A=y%mo,v;
		for (v=head[A];v;v=next[v])
		if (a[v]==y) return;
		a[++t]=y,next[t]=head[A],head[A]=t;
	}
	inline int find(int y) {
		int A=y%mo,v;
		for (v=head[A];v;v=next[v])
		if (a[v]==y) return 1;
		return 0;
	}
} S[30];
int i,j,k,m;
char P[N];
int64 a[5][5],b[5][5],c[5][5],n;
inline int get(int x) {
	return P[x]-'A'+1;
}
inline void mul(int64 a[5][5],int64 b[5][5]) {
	int i,j,k;
	int64 c[5][5];
	For(i,1,4)For(j,1,4) c[i][j]=inf;
	For(k,1,4)For(i,1,4)For(j,1,4) c[i][j]=min(c[i][j],a[i][k]+b[k][j]);
	For(i,1,4)For(j,1,4) a[i][j]=c[i][j];
}
inline int64 suan(int64 n) {
	int i,j;
	For(i,1,4)For(j,1,4) c[i][j]=a[i][j],b[i][j]=inf;
	For(i,1,4) b[i][i]=0;
	for (;n;n/=2) {
		if (n&1) mul(b,c);
		mul(c,c);
	}
	int64 an=inf;
	For(i,1,4)For(j,1,4) an=min(an,b[i][j]);
	return an;
}
int main() {
	scanf("%I64d%s",&n,P+1);
	m=strlen(P+1);
	For(i,1,m) {
		int s=0;
		For(j,i,min(m,i+19)) {
			s=(1ll*s*5+get(j))%p;
			S[j-i+1].inc(s);
		}
	}
	For(i,1,4)For(j,1,4) a[i][j]=inf;
	For(i,1,m) {
		int qi=get(i),s=0;
		For(j,i,min(m,i+18)) {
			s=(1ll*s*5+get(j))%p;
			For(k,1,4) {
				int A=(1ll*s*5+k)%p;
				if (!S[j-i+2].find(A)) a[qi][k]=min(a[qi][k],0ll+j-i+1);
			}
		}
	} 
	int64 l=0,r=n,mid;
	for (;l<=r;) {
		mid=(l+r)/2;
		if (suan(mid)<n) l=mid+1;
		else r=mid-1;
	}
	printf("%I64d\n",l);
	return 0;
}
