#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

const int MAXN = 400005;

typedef long long LL;
typedef LL Matrix[5][5];
struct Node
{
	int next[5];
}T[MAXN * 10];

char s[MAXN];
Matrix f[65],Tmp,Cur;
int cnt,S,M;
LL N,Ans;

void Add(int Nt,int p,int len)
{
	if (len > 20 || p >= M) return;
	int c = s[p] - 'A';
	if (T[Nt].next[c]) Add(T[Nt].next[c],p + 1,len + 1); else 
		Add(T[Nt].next[c] = ++ cnt,p + 1,len + 1);
}

void Dfs(int Nt,int p,int len)
{
	for(int i = 0;i < 4;i ++)
	if (!T[Nt].next[i]) f[0][p][i] = min(f[0][p][i],LL(len)); else Dfs(T[Nt].next[i],p,len + 1);
}

void Matrix_Add(Matrix &A, Matrix &B, Matrix &C)
{
	for(int i = 0;i < 4;i ++)
		for(int j = 0;j < 4;j ++)
			for(int k = 0;k < 4;k ++)
				C[i][j] = min(C[i][j],A[i][k] + B[k][j]);
}

LL Get(Matrix &A, Matrix &B, Matrix &C)
{
	Matrix_Add(A,B,C);
	LL Tmp = 1LL << 62;
	for(int i = 0;i < 4;i ++)
		for(int j = 0;j < 4;j ++)
			if (C[i][j] < Tmp) Tmp = C[i][j];
	return Tmp;
}

int main()
{
	scanf("%I64d\n", &N);
	scanf("%s", s);
	S = cnt = 1;
	M = strlen(s);
	for(int i = 1;i <= M;i ++)
		Add(S,i - 1,1);
	memset(f,127,sizeof f);
	for(int i = 0;i < 4;i ++) Dfs(T[S].next[i],i,1);
	for(int i = 1;i <= 60;i ++) Matrix_Add(f[i - 1],f[i - 1],f[i]);
	memset(Cur,127,sizeof Cur);
	for(int i = 60;i + 1;i --)
	if (Get(f[i],Tmp,Cur) < N)
	{
		Ans += 1LL << i;
		swap(Tmp,Cur);
		memset(Cur,127,sizeof Cur);
	} else memset(Cur,127,sizeof Cur);
	printf("%I64d\n", Ans + 1);
}
