#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
int getid(char x){
	if (x=='A') return 0;
	if (x=='B') return 1;
	if (x=='C') return 2;
	if (x=='D') return 3;
	return 4;
}
#define maxn 101000
int a[maxn*8][4],dep[maxn*8],h[maxn*8];
char s[maxn];
int mn,l=1;
int add(char *s){
	int t=1;
	for (int i=0;i<=mn;i++) {
		if (getid(s[i])==4) break; 
		if (!a[t][getid(s[i])]){
			a[t][getid(s[i])]=++l;
			dep[l]=dep[t]+1;
			h[l]=getid(s[0]);
		}
		t=a[t][getid(s[i])];
	}
	return 0;
}
#define inf 1000000000000010000LL
//#define inf 10000000
struct marix{
	long long a[4][4];
	void init(){
		for (int i=0;i<4;i++) 
		for (int j=0;j<4;j++) a[i][j]=inf;
	}
};
marix operator *(marix x,marix y){
	marix ans;
	ans.init();
	for (int i=0;i<4;i++) 
		for (int j=0;j<4;j++)
			for (int k=0;k<4;k++) 
				ans.a[i][j]=min(ans.a[i][j],x.a[i][k]+y.a[k][j]);
	return ans;
}
marix f[70];
int init(){
	for (int l=1;l<=64;l++) {
//		printf("YES");
		f[l]=f[l-1]*f[l-1];
	}
	return 0;
}
long long  n;
int check(long long x){
	marix ans;
	for (int i=0;i<4;i++) 
	for (int j=0;j<4;j++) ans.a[i][j]=0;
	for (int i=0;x;i++,x>>=1)
		if (x&1) ans=ans*f[i];
	for (int i=0;i<4;i++) 
		for (int j=0;j<4;j++) 
			if (ans.a[i][j]<n) return 0;
	return 1;
}
int main(){
	scanf("%I64d",&n);
	scanf("%s",s);
	int len=strlen(s);
	mn=log(len)/log(4)+3;
	for (int i=0;i<len;i++) add(s+i);
	f[0].init();
	for (int i=1;i<=l;i++) {
		for (int j=0;j<4;j++) {
		   if (a[i][j]==0) {
			   f[0].a[h[i]][j]=min(f[0].a[h[i]][j],dep[i]*1ll);
		   }
		}
	}
	init();
	long long l=1,r=n;
	while (l+1<r){
		long long mid=(l+r)>>1;
		if (check(mid)) r=mid;
		else l=mid;
	}
	if (check(l)) printf("%I64d\n",l);
	else printf("%I64d\n",r);
	return 0;
}

