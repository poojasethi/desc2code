#include <bits/stdc++.h>
//Damned if I don't take what I want.

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 1e5 + 100, LEN = 9, MAXB = 62;

ll dp[MAXB][4][4], mata[4][4], temp[4][4];

inline void smul(ll c[4][4], ll a[4][4], ll b[4][4]){
	memset(c, 63, sizeof temp);

	for (int i = 0; i < 4; i++)
		for (int k = 0; k < 4; k++)
			for (int j = 0; j < 4; j++)
				c[i][j] = min(a[i][k] + b[k][j] - 1, c[i][j]);
}

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	set<string> sub;
	string s; ll n, t;
	cin >> n >> s; t = s.size();

	for (int i = 1; i <= LEN; i++)
		for (int j = 0; j <= t - i; j++)
			sub.insert( s.substr(j, i) );

	memset(dp[0], 63, sizeof temp);
	for (int len = 1; len <= LEN; len++){
		const int MSK = 1 << (2 * len);

		for (int mask = 0; mask < MSK; mask++){
			string x; int fs, ls; fs = mask % 4;
			for (int i = 0, ex = mask; i < len; i++, ex /= 4){
				ls = ex % 4;
				x += char(ls + 'A');
			}
			reverse(x.begin(), x.end());

			if (!sub.count(x) && x.size() < dp[0][fs][ls]){
				dp[0][fs][ls] = ll(x.size());
//				cerr << fs << ", " << ls << " : " << x << endl;
			}
		}
	}
	for (int i = 1; i < MAXB; i++)
		smul(dp[i], dp[i - 1], dp[i - 1]);

/*	for (int k = 0; k < 3; k++){
		cerr << k << " : " << endl;
		for (int i = 0; i < 4; i++, cerr << endl)
			for (int j = 0; j < 4; j++) cerr << dp[k][i][j] << " ";
		cerr << endl;
	}
*/	

	memset(mata, 63, sizeof mata);
	for (int i = 0; i < 4; i++) mata[i][i] = 1;

	ll ans = 1;

	for (int h = MAXB - 1; h >= 0; h--){
		smul(temp, mata, dp[h]);

		ll mn = -1LLu/8;
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				mn = min(mn, temp[i][j]);

		if (mn <= n){
			ans += (1LL << h);
			memcpy(mata, temp, sizeof temp);
		}
		//cerr << h << " : " << ans << ", " << mn << endl;
	}

	cout << ans << endl;
}

