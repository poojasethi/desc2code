#include <cstdio>
#include <cstring>
#include <set>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <iostream>
#include <iomanip>
#include <list>
#include <queue>
#define REP(i, n) for ((i) = 0; (i) < (int)(n); ++ (i))

using namespace std;

typedef long long ll;
const ll INF = 1ll << 60;
const int MAXN = 100000 + 100;
int g[4][4], n;
bool f[1ll << 20];
char t[MAXN];
int r[MAXN];
ll four[10];

void check(int l)
{
    int i, j;
    REP(i, four[l])    f[i] = false;
    for (i = 0; i + l - 1 < n; ++ i) {
        int tmp = 0;
        REP(j, l)
        {
            tmp = tmp * 4 + r[i + j];
        }
        f[tmp] = true;
    }
    REP(i, four[l])
    {
        if (!f[i]) {
            int s = i / four[l - 1];
            int e = i % 4;
            g[s][e] = min(g[s][e], l - 1);
        }
    }
}


struct Matrix
{
    ll a[4][4];
};

Matrix pro(Matrix A, Matrix B)
{
    int i, j, k;
    Matrix C;
    REP(i, 4)   REP(j, 4)   C.a[i][j] = INF;
    REP(i, 4)
    {
        REP(j, 4)
        {
            REP(k, 4)
            {
                C.a[i][k] = min(C.a[i][k], A.a[i][j] + B.a[j][k]);
            }
        }
    }
    return C;
}

ll cal(ll k)
{
    Matrix A, B;
    int i, j;
    REP(i, 4)   REP(j, 4)   A.a[i][j] = g[i][j];
    REP(i, 4)   REP(j, 4)   B.a[i][j] = 0;
    for (i = 0; i < 60; ++ i)
    {
        if ((k >> i) & 1) {
            B = pro(B, A);
        }
        A = pro(A, A);
    }
    ll ans = INF;
    REP(i, 4)   REP(j, 4)   ans = min(ans, B.a[i][j]);
    return ans;
}

int MAIN()
{
    ll x;
    scanf("%lld", &x);
    scanf("%s", t);
    n = (int)strlen(t);
    int i, j;
    REP(i, n)   r[i] = t[i] - 'A';
    four[0] = 1;
    for (i = 1; i < 10; ++ i)   four[i] = 4 * four[i - 1];
    REP(i, 4)   REP(j, 4)   g[i][j] = 10;
    for (i = 2; i <= 10; ++ i)  check(i);
    //REP(i, 4)   REP(j, 4)   cout << i << " "  << j << " " << g[i][j] << endl;
    ll left = 0, right = INF;
    ll ans = 1;
    while (left <= right) {
        ll mid = (left + right) >> 1;
        ll val = cal(mid);
        if (val < x) {
            ans = mid;
            left = mid + 1;
        }
        else
        {
            right = mid - 1;
        }
    }
    printf("%lld\n", ans + 1);
    return 0;
}

int main()
{
    cout << fixed << setprecision(16);
    //ios :: sync_with_stdio(false);
    return MAIN();
}