#include <iostream>
#include <string>
#include <set>
#include <algorithm>
using namespace std;

#define INF 1000000000000000000LL

long long d[4][4];
set<string> s[16];

void dfs(string cur) {
	int L = (int)cur.size();
	if (s[L].find(cur) == s[L].end() && d[cur[0]-'A'][cur[L-1]-'A'] >= L) d[cur[0]-'A'][cur[L-1]-'A'] = L-1;

	if (L < 10) {
		dfs(cur+'A');
		dfs(cur+'B');
		dfs(cur+'C');
		dfs(cur+'D');
	}
}

bool check(long long pot, long long N) {
	int i, j, k, l;
	long long a[64][4][4], b[4][4], tmp[4][4];
	
	for (i=0; i<4; i++) for (j=0; j<4; j++) a[0][i][j] = d[i][j];
	for (l=1; l<64; l++) for (i=0; i<4; i++) for (j=0; j<4; j++) {
		a[l][i][j] = INF;
		for (k=0; k<4; k++) a[l][i][j] = min(a[l][i][j], a[l-1][i][k]+a[l-1][k][j]);
		if (a[l][i][j] > INF) a[l][i][j] = INF;
	}

	for (i=0; i<4; i++) for (j=0; j<4; j++) b[i][j] = 0LL;
	for (l=0; pot; l++) {
		if (pot&1LL) {
			for (i=0; i<4; i++) for (j=0; j<4; j++) {
				tmp[i][j] = INF;
				for (k=0; k<4; k++) tmp[i][j] = min(tmp[i][j], b[i][k]+a[l][k][j]);
			}
			for (i=0; i<4; i++) for (j=0; j<4; j++) b[i][j] = tmp[i][j];
		}
		pot/=2LL;
	}
	
	for (i=0; i<4; i++) for (j=0; j<4; j++) if (b[i][j] < N) return true;
	return false;
}

int main() {
	int i, j;
	string t;
	long long N, S, E, mid;
	
	cin >> N >> t; s[0].insert("");
	for (i=1; i<=10; i++) for (j=0; j+i<=(int)t.size(); j++) s[i].insert(t.substr(j, i));
	
	for (i=0; i<4; i++) for (j=0; j<4; j++) d[i][j] = INF;
	dfs("");
	
//	for (i=0; i<4; i++) {
//		for (j=0; j<4; j++) {cout << d[i][j]; cout << ' ';}
//		cout << endl;
//	}
	
	S = 0LL; E = 2000000000000000000LL;
	while (E-S > 1) {
		mid = (S+E)/2LL;
		if (check(mid, N)) S = mid;
		else E = mid;
	}
	cout << S+1LL << endl;

	return 0;
}
