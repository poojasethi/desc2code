#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

typedef long long ll;
typedef ll arr[4][4];

ll N, ans;
arr f[64], arr1, arr2, *base=&arr1, *tmp=&arr2;
char T[100005];

struct NODE
{
    NODE *son[4];
    NODE() { memset(son,0,sizeof son); }
} *root;

void ins(NODE *&x, char *c, int t)
{
    if (!x) x=new NODE();
    if (!*c || t==12) return;
    ins(x->son[*c-'A'],c+1,t+1);
}

void dfs(NODE *x, int st, int t)
{
    for (int i=0;i<4;i++)
        if (x->son[i])
            dfs(x->son[i],st,t+1);
        else
            for (int j=0;j<4;j++)
                f[0][st][j]=min<ll>(f[0][st][j],t+(j!=i));
}

inline ll upd(arr des, arr src1, arr src2)
{
    ll ret(0x7f7f7f7f7f7f7f7fll);
    memset(des,127,sizeof f[0]);
    for (int i=0;i<4;i++)
        for (int j=0;j<4;j++)
            for (int k=0;k<4;k++)
                ret=min(ret,des[i][j]=min(des[i][j],src1[i][k]+src2[k][j]));
    return ret;
}

int main()
{
    scanf("%I64d%s",&N,T);
    for (char *c=T;*c;c++)
        ins(root,c,1);
    memset(f[0],127,sizeof f[0]);
    for (int i=0;i<4;i++) if (root->son[i])
        dfs(root->son[i],i,1);
    for (int t=1;t<60;t++)
        upd(f[t],f[t-1],f[t-1]);
    for (int i=0;i<4;i++) (*base)[i][i]=1;
    for (int t=59;t>=0;t--)
        if (upd(*tmp,*base,f[t])<N)
        {
            swap(base,tmp);
            ans+=(1ll<<t);
        }
    printf("%I64d\n",ans+1);
    return 0;
}
