#include<iostream>
#include<cstdio>
#include<set>
#include<cmath>
using namespace std;

typedef long long int lint;

string t;
int tlen;
const lint INF = 1ll<<62;

void print(lint** A, int N, int M){
	return;
	cout<<"================\n";
	for(int i=0;i<N;i++){
		for(int j=0;j<M;j++){
			cout<< (A[i][j]<0?-1:A[i][j])  << " ";
		}
		cout<<endl;
	}
}

void matMult(lint** A, lint** B, lint** C, int N, int K,int M){
	for(int i=0;i<N; i++){
		for(int j=0;j<M; j++){
			lint ans = -INF;
			for(int k=0; k<K;k++)
				ans = max(ans, A[i][k] + B[k][j]);
			C[i][j] = ans<-INF? -INF : ans;
		}
	}
}

void assignment(lint **A, lint **B, int N, int M){
	for(int i=0;i<N; i++)
		for(int j=0;j<M; j++)
			A[i][j] = B[i][j];
}


void matexp(lint** A, lint** res, lint** temp, int N, lint pow){
	if(pow == 0){
		for(int i=0;i<N;i++)
			for(int j=0;j<N;j++)
				res[i][j] = -INF;
		for(int i=0; i<N; i++)
			res[i][i] = 0;
		return;
	}
	matexp(A, res, temp, N, pow/2);
	matMult(res, res, temp, N, N, N);
	if(pow%2)
		matMult(A, temp,  res, N, N, N);
	else	
		assignment(res, temp, N, N);
}



int find(char A, char B){
	int len=1;
	while(len++){
		set<string> stringMap;
		for(int i=0; i<tlen-len+1; i++)
			if(t[i]==A && t[i+len-1]==B)
				stringMap.insert(t.substr(i, len));
		int n = stringMap.size();
		if(n< (1ll << (2*(len-2)))){
			return len;
		}
	}
}


int main(){
	lint N;
	cin>>N;
	cin>>t;
	tlen = t.length();
	int alpValues[4][4];
	int minAlpha[4]={20,20,20,20};
	int maxAlpha = -1;
	for(int i=0;i<4;i++){
		for(int j=0;j<4;j++){
			alpValues[i][j] = find(i+'A', j+'A');
			maxAlpha = max(maxAlpha, alpValues[i][j]);
			minAlpha[i] = min(minAlpha[i], alpValues[i][j]);
			//cout<<alpValues[i][j]<<" ";
		}
		//cout<<endl;
	}
	int matSize = 4*(maxAlpha-1);
	lint** mat = new lint*[matSize];
	lint** res = new lint*[matSize];
	lint** temp = new lint*[matSize];
	for(int i=0;i<matSize;i++){
		mat[i] = new lint[matSize];
		res[i] = new lint[matSize];
		temp[i] = new lint[matSize];
		fill_n(mat[i], matSize, -INF);
	}
	for(int i=0;i<4;i++){
		for(int k=0;k<4;k++){
			mat[i][(alpValues[i][k]-2)*4+k] = 1;
		}
	}
	for(int i=0;i<4;i++){
		for(int j=1;j<maxAlpha-1;j++){
			mat[j*4+i][(j-1)*4+i] = 0;
		}
	}
	lint** base = new lint*[matSize];
	lint** ans = new lint*[matSize];
	for(int i=0;i<matSize;i++){
		base[i]=new lint[1];
		base[i][0] = 0;
		ans [i]=new lint[1];
	}
	matexp(mat, res, temp, matSize, N);
	print(res, matSize, matSize);
	print(base, matSize, 1);
	matMult(res, base, ans, matSize, matSize, 1);
	print(ans, matSize, 1);
	cout<<max(ans[0][0],max(ans[1][0],max(ans[2][0],ans[3][0])))<<endl;
	return 0;
}
