#include <iostream>
#include <string>
#include <set>
#include <queue>
#include <cmath>
#include <vector>

using namespace std;

typedef long long int ll;

set<string> s[10];

int len[4];
int llega[4][4];

int longitud(vector<int> &v)
{
  int l=0;
  for (int i=0;i<int(v.size())-1;i++)
    l+=len[v[i]];
  return l;
}

bool cierra(vector<int> &v)
{
  for (int i=0;i<int(v.size())-1;i++)
    if (v[i]==v.back())
      return true;
  return false;
}

void generallega(int ii)
{
  queue<string> q;
  q.push(string(1,char('A'+ii)));
  while (not q.empty()) {
    string x=q.front();
    q.pop();
    if (s[int(x.size())].count(x)) {
      if (len[ii]==0)
	for (int i=0;i<4;i++)
	  q.push(x+string(1,char('A'+i)));
    } else {
      if (len[ii]==0 or len[ii]==int(x.size())-1) {
	len[ii]=int(x.size())-1;
	llega[ii][x[int(x.size())-1]-'A']=1;
      }
    }
  }
}

ll sol=0;

void computasol(vector<int> &v,ll n)
{
  /*
  for (int i=0;i<int(v.size());i++)
    cout<<v[i]<<",";
  cout<<endl;
  */
  int l=0;
  int ii;
  int lii;
  for (int i=0;i<int(v.size())-1;i++) {
    if (v[i]==v.back()) {
      ii=i;
      lii=l;
    }
    l+=len[v[i]];
    if (l>=n) {
      sol=max(sol,ll(i+1));
      return;
    }
  }
  ll nextsol=ii+(n-lii)/(l-lii)*(int(v.size())-1-ii);
  n=(n-lii)%(l-lii);
  //cout<<"--- "<<l<<" "<<ii<<" "<<lii<<" "
  if (n==0) {
    sol=max(sol,nextsol);
    return;
  }
  for (int i=ii;i<int(v.size())-1;i++) {
    if (n<=len[v[i]]) {
      sol=max(sol,nextsol+1);
      return;
    }
    n-=len[v[i]];
    nextsol++;
  }
}

ll n;

int main()
{
  ios::sync_with_stdio(false);
  string t;
  cin>>n>>t;
  for (int i=0;i<int(t.size());i++)
    for (int j=1;j<10 and i+j<=int(t.size());j++)
      s[j].insert(t.substr(i,j));
  for (int i=0;i<4;i++)
    generallega(i);
  /*
  for (int i=0;i<4;i++)
    cout<<len[i]<<" ";
  cout<<endl;
  for (int i=0;i<4;i++) {
    for (int j=0;j<4;j++)
      cout<<llega[i][j];
    cout<<endl;
  }
  */
  vector<vector<int> > v(4);
  for (int i=0;i<4;i++)
    v[i]=vector<int> (1,i);
  while (int(v.size())) {
    vector<vector<int> > nextv;
    for (int i=0;i<int(v.size());i++) {
      for (int j=0;j<4;j++) {
	if (llega[v[i].back()][j]) {
	  nextv.push_back(v[i]);
	  nextv.back().push_back(j);
	}
      }
    }
    v=nextv;
    int minimo=1000000000;
    for (int i=0;i<int(v.size());i++)
      minimo=min(minimo,longitud(v[i]));
    nextv=vector<vector<int> > ();
    for (int i=0;i<int(v.size());i++)
      if (minimo==longitud(v[i]))
	nextv.push_back(v[i]);
    v=nextv;
    nextv=vector<vector<int> > ();
    for (int i=0;i<int(v.size());i++)
      if (cierra(v[i]))
	computasol(v[i],n);
      else
	nextv.push_back(v[i]);
    v=nextv;
  }
  cout<<sol<<endl;
}

