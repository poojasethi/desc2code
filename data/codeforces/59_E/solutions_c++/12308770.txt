//  Coder: Crystal_Bird of <Pioneer team>
 
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <queue>
 
using namespace std;
 
#define maxn 3000
 
int N,M,K;
int prev[maxn+10][maxn+10],pn,p[maxn];
set <int> s[maxn+10];
vector <int> con[maxn+10];
 
struct edge{
    int s,e,w;
    edge(){}
    edge( int a,int b,int c ){
        s=a; e=b; w=c;
    }
};
 
void solve(){
    int i,j,v;
    edge u;
    queue <edge> Q;
    for ( i=0; i<=N; i++ )
        memset( prev[i],0,sizeof(int)*(N+1) );
    Q.push( edge(0,1,0) );
    while( !Q.empty() ){
        u=Q.front(); Q.pop();
        if ( u.e==N ) break;
        for ( i=0; i<con[u.e].size(); i++ ){
            v=con[u.e][i];
            if ( prev[u.e][v] || s[u.s].count(u.e*maxn+v) ) continue;
            prev[u.e][v]=u.s;
            Q.push( edge(u.e,v,u.w+1) );
        }
    }
    if ( u.e!=N ){
        printf( "-1\n" ); return;
    }
    for ( i=u.s,j=u.e,pn=1,p[0]=u.e; ;pn++ ){
        p[pn]=i; //cout<<": "<<i<<' '<<j<<" : "<<prev[i][j]<<endl;
        if ( i==1 ) break;
        int temp=i; i=prev[i][j]; j=temp;
    }
    printf( "%d\n",u.w );
    for ( i=pn; i>=0; i-- ) printf( "%d ",p[i] );
    if ( pn ) printf( "\n" );
}
 
int main(){
 
    int i,u,v,w;
    while( scanf( "%d%d%d",&N,&M,&K )==3 ){
        for ( i=0; i<=N; i++ ) s[i].clear(),con[i].clear();
        for ( i=0; i<M; i++ ){
            scanf( "%d%d",&u,&v );
            con[u].push_back(v); con[v].push_back(u);
        }
        for ( i=0; i<K; i++ ){
            scanf( "%d%d%d",&u,&v,&w );
            s[u].insert(v*maxn+w);
        }
        solve();
    }
 
    return 0;
} 

 		 	    	 		   			  					 	 	