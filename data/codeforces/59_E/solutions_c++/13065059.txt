#include <cstdio>

#include <cmath>

#include <cstring>

#include <iostream>

#include <algorithm>

#include <queue>

#include <vector>

#include <map>

#include <set>



using namespace std;


typedef long long LL;
struct Node 
{
	int x,y;
}dq,dq2,fa[3005][3005];
map<LL,int> mp;
queue<Node> q;
LL now;
int n,m,k,x,y,z;
int dist[3005][3005];
bool vis[3005][3005];
int num,a[50000];
int nxt[50000];
int b[5000];
void add(int x,int y)
{
	++num;a[num]=y;nxt[num]=b[x];b[x]=num;
}

int main()

{
	scanf("%d%d%d",&n,&m,&k);
	for (int i=1;i<=m;++i)
	{
		scanf("%d%d",&x,&y);
		add(x,y);
		add(y,x);
	}
	for (int i=0;i<=n;++i)
		for (int j=0;j<=n;++j) vis[i][j]=false;
	for (int i=1;i<=k;++i)
	{
		scanf("%d%d%d",&x,&y,&z);
		now=x;
		now=now*3000;
		now=now+y;
		now=now*3000;
		now=now+z;
		mp[now]=1;
	}
	vis[0][1]=true;dist[0][1]=0;
	dq.x=0;dq.y=1;
	while (!q.empty()) q.pop();
	q.push(dq);
	bool flag=false;
	while (!q.empty())
	{
		dq=q.front();q.pop();
		if (dq.y==n)
		{
			flag=true;
			break;
		}
		for (int i=b[dq.y];i!=0;i=nxt[i])
		{
			y=a[i];
			LL now;
			now=dq.x;
			now=now*3000;
			now=now+dq.y;
			now=now*3000;
			now=now+y;
			if (mp.count(now)!=0) continue;
			if (vis[dq.y][y]) continue;
			vis[dq.y][y]=true;
			fa[dq.y][y]=dq;
			dq2.x=dq.y;dq2.y=y;
			dist[dq2.x][dq2.y]=dist[dq.x][dq.y]+1;
			q.push(dq2);
		}
	}
	if (!flag)
	{
		printf("-1\n");
		return 0;
	}	
	int ans[3005];
	printf("%d\n",dist[dq.x][dq.y]);
	int len=dist[dq.x][dq.y]+1;
	int now=dist[dq.x][dq.y]+1;
	while (!(dq.x==0&&dq.y==1))
	{
		ans[now]=dq.y;
		dq=fa[dq.x][dq.y];
		now--;
	}
	ans[1]=1;
	for (int i=1;i<=len;++i) printf("%d ",ans[i]);

	return 0;

}
	 		   	  		 				 	 	 			  		 	