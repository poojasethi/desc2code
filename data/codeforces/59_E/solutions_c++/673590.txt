#include <iostream>
#include <queue>
#include <set>
#include <algorithm>
#include <map>
#include <vector>

using namespace std;
typedef long long ll;
#define REP(i,n) for((i)=0;(i)<(n);(i)++)
#define MP(a,b) make_pair((a),(b))

const int max_n= 3005;


bool seen[max_n][max_n];
int prev[max_n][max_n];
queue<pair<int,int> > q;
vector<int> g[3005];

set<pair<pair<int,int>,int> > forb;


int main(){
    int n,m,k,i,j,a,b,c;
    cin>>n>>m>>k;
    REP(i,m){
        cin>>a>>b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    REP(i,k){
        cin>>a>>b>>c;
        forb.insert(MP(MP(a,b),c));
    }
    //init
    REP(i,n+1)REP(j,n+1){
        seen[i][j]=false;
        prev[i][j]=0;
    }
    //solve
    int v1,v2,tmp;
    q.push(MP(0,1));
    while(!q.empty()){
        v1 = q.front().first;
        v2=q.front().second;
        if(v2==n) break;
        q.pop();
        REP(i,g[v2].size()){
            tmp = g[v2][i];
            if(!seen[v2][tmp] && forb.find(MP(MP(v1,v2),tmp))==forb.end() ){
                seen[v2][tmp]=true;
                prev[v2][tmp]=v1;
                q.push(MP(v2,tmp));
            }
        }
    }
    if(q.empty()){
        cout<<-1<<endl;
        return 0;
    }
    vector<int> ans;
    ans.push_back(v2);
    while(v1!=0){
        ans.push_back(v1);
        tmp = prev[v1][v2];
        v2 = v1;
        v1= tmp;
    }
    reverse(ans.begin(),ans.end());
    cout<<ans.size()-1<<endl;
    REP(i,ans.size())
        if(!i)cout<<ans[i];
        else cout<<" "<<ans[i];
    cout<<endl;
    return 0;
}