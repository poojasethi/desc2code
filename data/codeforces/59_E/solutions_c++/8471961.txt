#include <bits/stdc++.h>
#define iii pair<int,pair<int,int> >
#define a first
#define b second.first
#define c second.second
using namespace std;
iii make(int aa, int ba, int ca) { iii tmp; tmp.a=aa; tmp.b=ba; tmp.c=ca; return tmp; }
vector<int> adj[3001];
set<iii> mySet;
int visited[3010][3010];
int root[3010][3010];
int main(){
    int n=0, m=0, k=0;
    scanf("%d%d%d",&n,&m,&k);
    while(m--){
        int u, v; cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    while(k--){
        iii tmp; cin >> tmp.a >> tmp.b >> tmp.c; mySet.insert(tmp);
    }
    priority_queue<iii,vector<iii>,greater<iii> > q;
    q.push(make(0,1,-1));
    while(!q.empty()){
        int node=q.top().b;
        int cost=q.top().a;
        int nnode=q.top().c;
        q.pop();
        if(node==n){
            cout << cost << '\n';
            stack<int> myStack;
            //myStack.push(node);
            //myStack.push(nnode);
            int u=node, v=nnode;
            do { int tmp=u; u=v; v=root[tmp][v]; myStack.push(tmp); } while(u!=0 && v!=0);
            while(!myStack.empty()){ cout << myStack.top() << ' '; myStack.pop(); }
            cout << '\n'; exit(EXIT_SUCCESS);
        }
        for(int i=0; i<adj[node].size(); i++)
            if(!visited[node][adj[node][i]] && !mySet.count(make(nnode,node,adj[node][i]))){
                visited[node][adj[node][i]]=1;
                root[adj[node][i]][node]=nnode;
                q.push(make(cost+1,adj[node][i],node));
            }
    }
    cout << "-1\n";
}


