#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <tr1/unordered_set>
#include <queue>
using namespace std;
int N,M,K;
typedef pair<int,int> P;
const int MN = 50*1000 + 50;
tr1::unordered_set<int> fails[MN];
map<P,int> ens;
int to[MN];
int ES=0;
vector<int> e[MN];
bool used[MN];
int from[MN];

struct E {
	int c;
	int e;
	int f;
	bool operator<(const E& e) const {
		return c>e.c;
	}
};

int main()
{
	cin>>N>>M>>K;
	for(int i=0; i<M; ++i) {
		int a,b;
		cin>>a>>b;
		to[ES] = b;
		ens[P(a,b)] = ES;
		e[a].push_back(ES++);
		to[ES] = a;
		ens[P(b,a)] = ES;
		e[b].push_back(ES++);
	}
	for(int i=0; i<K; ++i) {
		int a,b,c;
		cin>>a>>b>>c;
		P p(a,b);
		if (!ens.count(p)) continue;
		int e = ens[p];
		fails[e].insert(c);
//		cout<<"setting fail @ "<<e<<' '<<c<<'\n';
	}

	priority_queue<E> q;
	for(size_t i=0; i<e[1].size(); ++i) {
		E z = {1, e[1][i], -1};
		q.push(z);
	}
	while(!q.empty()) {
		E p = q.top();
		q.pop();

		int ee = p.e;
		if (used[ee]) continue;
		from[ee] = p.f;
		int n = to[ee];
//		cout<<"setting from "<<ee<<' '<<n<<" : "<<p.f<<" ; "<<p.c<<'\n';
		used[ee] = 1;
		if (n==N) {
			int c = ee;
			vector<int> res;
			while(c >= 0) {
				res.push_back(to[c]);
				c = from[c];
			}
			res.push_back(1);
			reverse(res.begin(),res.end());
			cout<<p.c<<'\n';
			for(size_t i=0; i<res.size(); ++i) {
				if (i>0) cout<<' ';
				cout<<res[i];
			}
			cout<<'\n';
			return 0;
		}

		for(size_t i=0; i<e[n].size(); ++i) {
			int f = e[n][i];
			if (used[f]) continue;
			int t = to[f];
			if (fails[ee].count(t)) continue;
			E z = {p.c+1, f, ee};
//			cout<<"going @ "<<ee<<' '<<n<<' '<<t<<'\n';
			q.push(z);
		}
	}
	cout<<-1<<'\n';
}
