#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <bitset>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)(v).size())


#define MAX 3005

pair<int,int> dis[MAX][MAX];
vector<int> E[MAX];
set<pair<int,int> > bad[MAX];
int main(){
	rep(i,MAX)rep(j,MAX) dis[i][j]=make_pair(-1,-1);
	int n,m,k;
	cin>>n>>m>>k;
	rep(i,m){
		int a,b;
		cin>>a>>b;
		E[a-1].pb(b-1);
		E[b-1].pb(a-1);
	}
	rep(i,k){
		int a,b,c;
		cin>>a>>b>>c;
		bad[a-1].insert(make_pair(b-1,c-1));
	}
	
#define P pair<int,pair<int,int> > 
	priority_queue< P , vector< P > , greater <  P > > q;
	rep(i,sz(E[0])){
		dis[0][E[0][i]]=make_pair(1,-1);
		q.push(make_pair(1,make_pair(E[0][i],0)));
	}
	while(sz(q)){
		int d=q.top().first;
		int pos=q.top().second.first;
		int bef=q.top().second.second;
		q.pop();
		if(pos==n-1){
			cout<<dis[bef][pos].first<<endl;
			vector<int> ans;
			while(true){
				ans.pb(pos);
				if(bef==-1) break;
				li tmp=dis[bef][pos].second;
				pos=bef;
				bef=tmp;
			}
			reverse(ans.begin(),ans.end());
			rep(i,sz(ans)) cout<<ans[i]+1<<" "; cout<<endl;
			return 0;
		}	
		rep(i,sz(E[pos]))if(bad[bef].find(make_pair(pos,E[pos][i]))==bad[bef].end()){
			if(dis[pos][E[pos][i]].first==-1 || d+1<dis[pos][E[pos][i]].first){
				dis[pos][E[pos][i]]=make_pair(d+1,bef);
				q.push(make_pair(dis[pos][E[pos][i]].first,make_pair(E[pos][i],pos)));
			}
		}
	}
	cout<<"-1"<<endl;
}
