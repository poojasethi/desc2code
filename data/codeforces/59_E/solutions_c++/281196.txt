#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <fstream>
#include <map>
#include <set>
#include <string>
#include <vector>


using namespace std;

#define maxn 3010

vector <int> ne[maxn];
vector <int> bad[maxn][maxn];

int was[maxn][maxn], prev[maxn][maxn];

int qa[maxn * maxn], qb[maxn * maxn], l, r;

void out (int a, int b, int cnt = 0) {
  if (b == 1) {
    printf ("%d\n", cnt);
    printf ("%d", b);
    return;
  }
  out (prev[a][b], a, cnt + 1);
  printf (" %d", b);
}

void add (int a, int b, int p) {
  if (!was[a][b]) {
    prev[a][b] = p;
    was[a][b] = 1;
    qa[r] = a;
    qb[r] = b;
    r++;
  }
}

int main( void )
{
  int n, m, k;
  scanf ("%d%d%d", &n, &m, &k);


  int a, b, c;
  for (int i = 0; i < m; i++) {
    scanf ("%d%d", &a, &b);
    ne[a].push_back(b);
    ne[b].push_back(a);
  } 
  for (int i = 0; i < k; i++) {
    scanf ("%d%d%d", &a, &b, &c);
    bad[a][b].push_back(c);
  }
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      if ((int)bad[i][j].size() != 0) {
        sort (bad[i][j].begin(), bad[i][j].end());
      }
    }
  }
  add (0, 1, -1);
  while (l < r) {
    a =  qa[l], b = qb[l];
    l++;
    vector <int> tmp;

    if (b == n) {
      out (a, b);
      printf ("\n");
      return 0;
    }

    for (int i = 0; i < (int)ne[b].size(); i++) {
      if (binary_search (bad[a][b].begin(), bad[a][b].end(), ne[b][i])) {
        tmp.push_back(ne[b][i]);
      } else {
        add (b, ne[b][i], a);
      }
    }
    ne[b] = tmp;
  }
  
  printf ("-1\n");
  

  return 0;
}

