#include <stdio.h>
#include <vector>
#include <stack>
#include <queue>
#include <set>
using namespace std;

#define rep(x,n)	for(x=0;x<(int)(n);x++)
#define SIZE(X)		((int)(X).size())
#define CONTAINS(X,item)	((X).find(item) != (X).end())
#define PB	push_back
#define MP	make_pair

typedef pair<int,int>	Pii;

#define sz 3003
vector <int> adj[sz];
set < pair<Pii,int> > triplets;
bool seen[sz][sz];
int prev[sz][sz];
queue <Pii> q;
stack <int> res;

int main()
{
	int n,m,k,i,x,y,z;
	scanf("%d %d %d",&n,&m,&k);
	
	rep(i,m)
	{
		scanf(" %d %d",&x,&y);
		adj[x].PB(y);
		adj[y].PB(x);
	}
	
	rep(i,k)
	{
		scanf(" %d %d %d",&x,&y,&z);
		triplets.insert(MP(MP(x,y),z));
	}
	
	q.push(MP(0,1));
	seen[0][1]=1;
	prev[0][1]=-1;
	while( !q.empty() )
	{
		x=q.front().first;
		y=q.front().second;
		if(y==n) break;
		q.pop();
		
		rep(i,SIZE(adj[y]))
		{
			z=adj[y][i];
			if(CONTAINS(triplets,MP(MP(x,y),z))) continue;
			if(seen[y][z]) continue;
			
			q.push(MP(y,z));
			seen[y][z]=1;
			prev[y][z]=x;
		}
	}
	
	if(q.empty()) printf("%d",-1);
	else
	{
		y=q.front().first;
		z=q.front().second;
		do {
			res.push(z);
			x=prev[y][z];
			if(x==-1) break;
			z=y;
			y=x;
		} while(1);
		
		printf("%d\n",SIZE(res)-1);
		while(!res.empty())
		{
			printf("%d ",res.top());
			res.pop();
		}
	}
	return 0;
}
