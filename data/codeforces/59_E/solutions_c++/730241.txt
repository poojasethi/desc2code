#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>

using namespace std;

int main()
{
  int n,m,k;
  cin>>n>>m>>k;
  vector<vector<int> > g(n);
  for (int i=0;i<m;i++) {
    int u,v;
    cin>>u>>v;
    u--;v--;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  set<pair<pair<int,int>,int> > prohibido;
  for (int i=0;i<k;i++) {
    int u,v,w;
    cin>>u>>v>>w;
    u--;v--;w--;
    prohibido.insert(pair<pair<int,int>,int> (pair<int,int> (u,v),w));
  }
  set<pair<int,int> > visitado;
  map<pair<int,int>,pair<int,int> > anterior;
  queue<pair<int,int> > q;
  q.push(pair<int,int> (-1,0));
  bool trobat=false;
  pair<int,int> ultim;
  while ((not q.empty()) and (not trobat)) {
    pair<int,int> p=q.front();
    q.pop();
    int u=p.first;
    int v=p.second;
    vector<int> &ar=g[v];
    for (int i=0;i<int(ar.size()) and not trobat;i++) {
      int w=ar[i];
      pair<int,int> pnext(v,w);
      if (visitado.find(pnext)==visitado.end() and
	  prohibido.find(pair<pair<int,int>,int> (pair<int,int> (u,v),w))==
	  prohibido.end()) {
	visitado.insert(pnext);
	anterior[pnext]=p;
	q.push(pnext);
	if (w==n-1) {
	  trobat=true;
	  ultim=pnext;
	}
      }
    }
  }
  if (trobat) {
    vector<int> sol;
    sol.push_back(ultim.second);
    while (ultim.first!=-1) {
      sol.push_back(ultim.first);
      ultim=anterior[ultim];
    }
    reverse(sol.begin(),sol.end());
    cout<<int(sol.size())-1<<endl;
    cout<<sol[0]+1;
    for (int i=1;i<int(sol.size());i++)
      cout<<" "<<sol[i]+1;
    cout<<endl;
  } else {
    cout<<-1<<endl;
  }
}
