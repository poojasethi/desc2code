#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <ctype.h>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

typedef pair<int,int> ii;
typedef pair<ii,int> iii;

#define INF 0x3f3f3f3f
#define MAXN 3030

int adj[MAXN][MAXN],nadj[MAXN],dist[MAXN][MAXN],vis[MAXN][MAXN];
int n,m,k;
ii pai[MAXN][MAXN];
set<iii> forbid;
set<iii>::iterator it;

void rec(int p, int u) {
	if (!u) {
		printf("1");
		return;
	}
	
	rec(pai[p][u].first,pai[p][u].second);
	printf(" %d",u+1);
	return;
}

void solve() {
	int res = INF,r;
	queue<ii> q;
	memset(vis,0,sizeof(vis));
	dist[0][0] = 0;
	vis[0][0] = 1;
	q.push(ii(0,0));
	
	while (!q.empty()) {
		int p = q.front().first, u = q.front().second;	q.pop();
		
		if (u == n-1 && dist[p][u] < res) {
			res = dist[p][u];
			r = p;
		}
		
		for (int i=0; i<nadj[u]; i++) {
			int v = adj[u][i];
			it = forbid.find(iii(ii(p,u),v));
			if (it != forbid.end()) continue;
			if (!vis[u][v]) {
				vis[u][v] = 1;
				dist[u][v] = dist[p][u] + 1;
				pai[u][v] = ii(p,u);
				q.push(ii(u,v));
			}
		}
	}
	
	if (res == INF) {
		printf("-1\n");
		return;
	}
	
	printf("%d\n",res);
	rec(r,n-1);
	printf("\n");
	return;
}

int main() {
	scanf("%d%d%d",&n,&m,&k);

	memset(nadj,0,sizeof(nadj));
	
	while (m--) {
		int u,v;
		scanf("%d%d",&u,&v);
		u--;	v--;
		adj[u][nadj[u]++] = v;
		adj[v][nadj[v]++] = u;
	}
	
	while (k--) {
		int a,b,c;
		scanf("%d%d%d",&a,&b,&c);
		a--;	b--;	c--;
		forbid.insert(iii(ii(a,b),c));
	}
	
	solve();
		
	return 0;
}
