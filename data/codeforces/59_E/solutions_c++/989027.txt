#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;
int prv[3010][3010];
vector<int> adj[3010],blk[3010][3010];
void trace(int b,int c,int d) {
	int a=prv[b][c];
	if(a<0) {
		cout<<d<<endl;
		cout<<c;
	} else {
		trace(a,b,d+1);
		cout<<' '<<c;
	}
}
int main() {
	int n,m,k,a,b,c,p;
	cin>>n>>m>>k;
	while(m--) {
		cin>>a>>b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	while(k--) {
		cin>>a>>b>>c;
		blk[a][b].push_back(c);
	}
	for(int i=1;i<=n;i++) {
		sort(adj[i].begin(),adj[i].end());
		for(int j=1;j<=n;j++) {
			sort(blk[i][j].begin(),blk[i][j].end());
			prv[i][j]=-1;
		}
	}
	queue<int> qx,qy;
	qx.push(0);
	qy.push(1);
	prv[0][1]=-2;
	while(qx.size()) {
		a=qx.front();qx.pop();
		b=qy.front();qy.pop();
//		cout<<a<<' '<<b<<endl;
		p=0;
		for(int i=0;i<adj[b].size();i++) {
			c=adj[b][i];
			while(p<blk[a][b].size() && blk[a][b][p]<c)p++;
			if((p==blk[a][b].size() || blk[a][b][p]!=c) && prv[b][c]==-1) {
//				cout<<b<<' '<<c<<endl;
				prv[b][c]=a;
				qx.push(b);
				qy.push(c);
				if(c==n) {
					trace(b,c,0);
					return 0;
				}
			}
		}
	}
	cout<<-1;
}
