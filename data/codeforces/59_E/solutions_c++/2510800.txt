#include<iostream>
#include<cstdio>
#include<vector>
#include<map>

using namespace std;

const int maxn = 3010;
const int maxm = 50010;

map<long long,bool> M;

struct state {
	int lt , t , pre;
};

bool MM[maxn][maxn];
int n , m , k , tot , tq;
int first[maxn] , next[maxm];
int node[maxm];
state Q[maxm * 2];
vector<int> ans;

void merge( int u , int v ) {
	next[++tot] = first[u] , first[u] = tot;
	node[tot] = v;
}

void input() {
	scanf( "%d%d%d" , &n , &m , &k );
	for ( int i = 1 ; i <= m ; i++ ) {
		int u , v; scanf( "%d%d" , &u , &v );
		merge( u , v );
		merge( v , u );
	}
	for ( int i = 1 ; i <= k ; i++ ) {
		int a , b , c; scanf( "%d%d%d" , &a , &b , &c );
		M[( long long ) a * maxn * maxn + b * maxn + c] = true;
	}
}

void solve() {
	Q[tq = 1].t = 1;
	
	for ( int i = 1 ; i <= tq ; i++ ) {
		int lt = Q[i].lt , t = Q[i].t;
		if ( t == n ) {
			while ( i != 0 ) {
				ans.push_back( Q[i].t );
				i = Q[i].pre;
			}
			printf( "%d\n" , ans.size() - 1 );
			for ( int i = ans.size() - 1 ; i >= 0 ; i-- )
				printf( "%d " , ans[i] );
			printf( "\n" );
			return;
		}
		for ( int tab = first[t] ; tab ; tab = next[tab] ) {
			int nt = node[tab];
			if ( M[( long long ) lt * maxn * maxn + t * maxn + nt] || MM[t][nt] ) continue;
			MM[t][nt] = true;
			tq++;
			Q[tq].lt = t , Q[tq].t = nt;
			Q[tq].pre = i;
		}
	}
	printf( "-1\n" );
}

int main() {
	input();
	solve();
	
	return 0;
}
