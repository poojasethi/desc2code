#include <cstdio>
#include <cstring>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

int e[40005][2];
int last[40005];
int d[40005];
int Q[40005], qb, qe;
vector<int> a[3005];
set<pair<int, int> > s[3005];
int main(void) {
	int n, m, k;
	scanf("%d%d%d", &n, &m, &k);
	for(int i=0;i<m;i++) {
		scanf("%d%d", &e[i][0], &e[i][1]);
		e[m+i][0] = e[i][1];
		e[m+i][1] = e[i][0];
		a[e[i][0]].push_back(i);
		a[e[i][1]].push_back(m+i);
	}
	e[2*m][0] = -1; e[2*m][1] = 1;
	for(int i=0;i<k;i++) {
		int A, B, C;
		scanf("%d%d%d", &A, &B, &C);
		s[B].insert(make_pair(A, C));
	}
	Q[qe++]=2*m;
	last[2*m] = -1;
	d[2*m] = 1;
	int ans = -1;
	while(qb<qe) {
		int x = Q[qb++];
		int From = e[x][0], To = e[x][1];
		if(To==n) {ans = x; break;}
		for(int i=0;i<(int)a[To].size();i++) {
			int y = a[To][i];
			if(d[y]) continue;
			if(s[To].find(make_pair(From, e[a[To][i]][1])) == s[To].end()) {
				d[y] = d[x]+1;
				last[y] = x;
				Q[qe++] = y;
			}
		}
	}
	if(ans == -1) {
		puts("-1");
	} else {
		vector<int> ret;
		while(ans>=0) {
			ret.push_back(e[ans][1]);
			ans = last[ans];
		}
		printf("%d\n", (int)ret.size()-1);
		while(!ret.empty()) {
			printf("%d ", ret.back());
			ret.pop_back();
		}
		puts("");
	}
	return 0;
}
