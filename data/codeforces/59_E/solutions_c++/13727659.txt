#include<iostream>
#include<vector>
#include<stdio.h>
#include<queue>
#include<algorithm>
#include<stack>
#include<string.h>
#include<climits>
#include<set>
#define MAX 1000000000
using namespace std;
int n = 0;
long m = 0, k = 0;
vector<vector<set<int> > > no;
vector<vector<int> > pre,gra;

void ini(){
	gra.clear();
	gra.resize(n + 10);
	pre.clear();
	pre.resize(n + 10);
	no.clear();
	no.resize(n + 10);
	for (int i = 0; i <= n + 5; i++){
		no[i].resize(n + 10);
		pre[i].resize(n + 10, -1);
	}
}

void build(){
	cin >> n >> m >> k;
	ini();
	int a = 0, b = 0, c = 0;
	for (int i = 0; i < m; i++){
		scanf("%d %d", &a, &b);
		gra[a].push_back(b);
		gra[b].push_back(a);
	}
	for (int i = 0; i < k; i++){
		scanf("%d%d%d", &a, &b, &c);
		no[a][b].insert(c);
	}
	
}

int bfs(){
	queue<pair<int, int> > q;
	q.push(make_pair(0, 1));
	pair<int, int> x;
	int s = 0;
	while (!q.empty()){
		x = q.front();
		q.pop();
		for (int i = 0; i < gra[x.second].size(); i++){
			s = gra[x.second][i];
			if (no[x.first][x.second].count(s) == 0 && pre[x.second][s] == -1){
				pre[x.second][s] = x.first;
				q.push(make_pair(x.second, s));
				if (s == n)
					return x.second;
			}
		}
	}
	return -1;
}

 int main(){
	build();
	stack<int> s;
	int x = bfs(), i = 0, y = n, z = 0;
	if (x > 0){
		s.push(n);
		s.push(x);
		i = 1;
		while (x != 1){
			i++;
			z = pre[x][y];
			s.push(z);
			y = x;
			x = z;
		}
		printf("%d\n", i);
		while (!s.empty()){
			printf("%d ", s.top());
			s.pop();
		}
		printf("\n");
	}
	else
		printf("%d\n",-1);
	//system("pause");
	return 0;
}

 		     	 	   			    	 								