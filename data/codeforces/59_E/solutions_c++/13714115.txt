#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define MAX 3005
typedef pair<int, int> p;

int n, m, k, i, j, x, y, a, b, c, ans;
vector<int>G[MAX];
vector<int>N[MAX][MAX];
bool v[MAX][MAX];
p parent[MAX][MAX];
queue<p>q;

void find_path(p now)
{
	if (now.first != 0)
	{
		ans++;
		find_path(parent[now.first][now.second]);
	}
}

void print_path(p now)
{
	if (now.first != 0)
		print_path(parent[now.first][now.second]);
	cout << now.second << " ";
}

bool bfs()
{
	v[0][1] = 1;
	q.push(p(0, 1));
	while (!q.empty())
	{
		p now = q.front();
		q.pop();
		int a = now.first, b = now.second;
		for (i = 0; i < (int)G[b].size(); i++)
		{
			int c = G[b][i];
			if (v[b][c] == 0)
			{
				bool flag = true;
				for (j = 0; j < (int)N[a][b].size(); j++)
				{
					if (N[a][b][j] == c)
					{
						flag = false;
						break;
					}
				}
				if (flag == false)
					continue;
				v[b][c] = true;
				q.push(p(b, c));
				parent[b][c] = p(a, b);
				if (c == n)
				{
					find_path(p(b, c));
					cout << ans << endl;
					print_path(p(b, c));
					return true;
				}
			}
		}
	}
	return false;
}

int main()
{
	//freopen("Text.txt", "r", stdin);
	cin >> n >> m >> k;

	for (i = 1; i <= m; i++)
	{
		cin >> x >> y;
		G[x].push_back(y);
		G[y].push_back(x);
	}

	for (i = 1; i <= k; i++)
	{
		cin >> a >> b >> c;
		N[a][b].push_back(c);
	}

	if (!bfs())
		cout << -1;
	cout << endl;

	return 0;
}
 		  	 	  				 	   			  					 	