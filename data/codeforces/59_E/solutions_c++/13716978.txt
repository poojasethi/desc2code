#include<iostream>
#include<cstring>
#include<map>
#include<utility>
#include<queue>
#include<list>
#include<set>
#include<algorithm>
using namespace std;
const int maxn=3003;
const int inf=0x7fffffff;
map<pair<int,int>,set<int> > mp;
list<int> node[maxn];
int n,m,k;
int dis[maxn][maxn];
int pre[maxn][maxn];

void creat()
{
	cin>>n>>m>>k;
	for(int i=1;i<=n;i++)
	node[i].clear();	
	mp.clear();
	fill(dis[1],dis[n+1],inf);
	
	int x,y;
	for(int i=0;i<m;i++)
	{
		cin>>x>>y;
		node[x].push_back(y);
		node[y].push_back(x);
	}
	int a,b,c;
	for(int i=0;i<k;i++)
	{
		cin>>a>>b>>c;
		mp[make_pair(a,b)].insert(c);
	}
}

void bfs()
{
	queue<pair<int,int> > q;
    for(list<int>::iterator it = node[1].begin() ; it != node[1].end() ; it++)
	{
        dis[1][*it] = 1;
        pre[1][*it] = -1;
        q.push(make_pair(1,*it));
    }

	node[1].clear();
	int x,y;
	while(!q.empty())
	{
		pair<int,int> p=q.front();
		q.pop();
		x=p.first;
		y=p.second;
		set<int> &myset=mp[p];
		for(list<int>::iterator it=node[y].begin();it!=node[y].end();/*it++*/)
		{
			if(myset.count(*it)>0)
			it++;
			else
			{
				dis[y][*it]=dis[x][y]+1;
				pre[y][*it]=x;
				q.push(make_pair(y,*it));
				
				it=node[y].erase(it);
			}
		}
	}
}

void printpath(int s,int t)
{
	if(s==-1)
	return;
	printpath(pre[s][t],s);
	cout<<s<<' ';
}
int main()
{
	creat();
	bfs();
	
	int min=inf;
	int pi;
	for(int i=1;i<n;i++)
	{
		if(dis[i][n]<min)
		{
			min=dis[i][n];
			pi=i;	
		}
	}
	
	if(min==inf)
	cout<<"-1"<<endl;
	else
	{
		cout<<min<<endl;
		printpath(pi,n);
		cout<<n<<endl;
	} 
	return 0;
}

  		 	  		 	 	  					 			   			