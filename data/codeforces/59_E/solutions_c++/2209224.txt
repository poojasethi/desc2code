#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <queue>
#include <map>
#include <string.h>
#include <vector>
#include <set>
#include <stack>

const int N=3010;
const int inf=0x3f3f3f3f;

using namespace std;

#define pb push_back
#define sz(x) ((x).size())
#define f first
#define s second
#define pr pair<int,int>
#define mp make_pair

vector<int> vt[N];

struct data
{
	int a,b,c;
	data() {}
	data(int a,int b,int c) :a(a),b(b),c(c) {}
	bool operator < (const data &r) const
	{
		if(a!=r.a) return a<r.a;
		if(b!=r.b) return b<r.b;
		return c<r.c;
	}
};

set<data> st;

int n,m,k,dis[N][N];
bool vis[N][N];

void spfa(int s)
{
	memset(dis,0x3f,sizeof(dis));
	queue<pr > que;
	que.push(mp(s,0));
	dis[s][0]=0;
	vis[s][0]=1;
	while(que.size())
	{
		pr u=que.front();
		que.pop();
		vis[u.f][u.s]=0;
		for(int i=0;i<sz(vt[u.f]);i++)
		{
			int v=vt[u.f][i];
			if(st.count(data(u.s,u.f,v))) continue;
			if(dis[v][u.f]<=dis[u.f][u.s]+1) continue;
			dis[v][u.f]=dis[u.f][u.s]+1;
			if(vis[v][u.f]) continue;
			vis[v][u.f]=1;
			que.push(mp(v,u.f));
		}
	}
}

void dfs(int a,int b)
{
	cout<<a<<" ";
	if(a==n) {cout<<endl;return ;}
	for(int i=0;i<=n;i++)
		if(dis[a][b]==dis[b][i]+1 && (!st.count(data(i,b,a)))) {dfs(b,i);return ;}
}

int main()
{
	scanf("%d%d%d",&n,&m,&k);
	for(int i=0;i<m;i++)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		vt[a].pb(b);
		vt[b].pb(a);
	}
	for(int i=0;i<k;i++)
	{
		int a,b,c;
		scanf("%d%d%d",&c,&b,&a);
		st.insert(data(a,b,c));
	}
	spfa(n);
	int ret=inf,id=-1;
	for(int i=1;i<=n;i++)
		ret=min(ret,dis[1][i]);
	for(int i=1;i<=n;i++)
		if(dis[1][i]==ret) id=i;
	if(ret==inf)
	{
		cout<<-1<<endl;
		return 0;
	}
	cout<<ret<<endl;
	dfs(1,id);
	return 0;
}
