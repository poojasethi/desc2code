//in the name of god
//its mrALGORITHM
#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <set>
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define PII pair <long long , long long>
using namespace std ;
typedef long long ll ;

const int maxn = 3000 + 10 , mod = 13921392 ;
vector <ll> v[maxn] , ans ;
ll n , m , k , x , y , z , par[maxn][maxn] ;
set <pair <PII , ll> > st ;
bool mark[maxn][maxn] ;
queue <PII> q ;
void find_ans(int x , int y){
	ans.pb(x);
	if (x==1)
		return ;
	find_ans(par[x][y] , x);
}
bool bfs(){
	mark[0][1] = 1 ;
	q.push(mp(0 , 1));
	while (!q.empty()){
		PII p = q.front() ;
		if (p.s == n){
			find_ans(p.f , p.s);
			return 1 ;
		}
		q.pop() ;
		for (int i=0 ; i<v[p.s].size() ; i++){
			int next = v[p.s][i] ;
			if (mark[p.s][next] || st.find(mp(p , next))!=st.end())
				continue ;
			par[p.s][next] = p.f ;
			mark[p.s][next] = 1 ;
			q.push(mp(p.s , next));
		}
	}
	return 0;
}
int main(){
	cin >> n >> m >> k ;
	ans.pb(n);
	for (int i=0 ; i<m ; i++){
		cin >> x >> y ;
		v[x].pb(y);
		v[y].pb(x);
	}
	for (int i=0 ; i<k ; i++){
		cin >> x >> y >> z ;
		st.insert(mp(mp(x , y) , z));
	}
	if (!bfs()){
		cout << -1 << endl ;
		return 0 ;
	}
	cout << ans.size()-1 << endl ;
	for (int i=ans.size()-1 ; i>=0 ; i--)
		cout << ans[i] << " " ;
	cout << endl ;
	return 0;
}
