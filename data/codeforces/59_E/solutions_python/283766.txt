from collections import deque

n, m, k = [ int(x) for x in raw_input().split() ]

edge = [ [] for x in xrange(n) ]
trace = [ [-1] * n for x in xrange(n) ]
for i in xrange( m ):
    u, v = [ int(x)-1 for x in raw_input().split() ]
    edge[u].append( v )
    edge[v].append( u )
    
forbid = [ {} for x in xrange(n) ]
for i in xrange( k ):
    ai, bi, ci = [ int(x)-1 for x in raw_input().split() ]
    forbid[bi][ (ai, ci) ] = 1  
    
def truy_vet( y, z):
    vres = [z+1]
    while z:
        x = trace[y][z]
        vres.append( y+1 )
        z = y
        y = x
    vres.reverse()
    print len(vres)-1
    for x in vres:
        print x,

def BFS():
    global n, forbid, trace
    q = deque( [ (0, 0) ] )
    trace[0][0] = 0
    while len(q):
        x, y = q.popleft()
        if y == n-1:
            truy_vet( x, y )
            return
        
        for z in edge[y]:
            if trace[y][z] is not -1:
                continue
            if forbid[y].has_key( (x, z) ):
                continue            
            trace[y][z] = x
            q.append( (y, z) )
    
    print -1
    
BFS()       