__author__ = 'Shailesh'


n = int(raw_input())
groups = []
commands = []
start = 0
maxI = 0
maximum = 0
for i in xrange(n):
    command = int(raw_input())
    if command > maximum:
        maxI = i
        maximum = command
    if command == 0:
        if start < i:
            groups.append((start, i, maxI))
        start = i + 1
        maximum = 0
    commands.append(command)

if start < len(commands):
    groups.append((start, len(commands), maxI))
stk = 0
que = 0
dek = 0

stkE = ["pushStack", "popStack"]
queE = ["pushQueue", "popQueue"]
dekE = ["pushFront", "popFront", "pushBack"]

def eject():
    global stk, que, dek
    count = 0
    eng = []
    if stk:
        count += 1
        eng.append(stkE[1])
    if que:
        count += 1
        eng.append(queE[1])
    if dek:
        count += 1
        eng.append(dekE[1])
    stk = 0
    que = []
    dek = 0
    eng.insert(0, str(count))
    print " ".join(eng)

i = 0
while i < len(commands):
    if commands[i] == 0:
        eject()
        i += 1
        continue
    group = groups[0]
    length = group[1] - group[0]
    if length == 1:
        print stkE[0]
        stk = 1
    elif length == 2:
        print stkE[0]
        print dekE[0]
        stk, dek = 1, 1
    elif length == 3:
        print stkE[0]
        print dekE[0]
        print queE[0]
        stk, dek, que = 1, 1, 1
    else:
        for j in xrange(group[0], group[1]):
            if j == group[2]:
                print queE[0]
                que = 1
            elif not stk:
                print stkE[0]
                stk = commands[j]
            elif not dek:
                print dekE[0]
                dek = commands[j]
            else:
                if dek > stk:
                    if commands[j] > stk:
                        print stkE[0]
                        stk = commands[j]
                    else:
                        print dekE[2]
                else:
                    if commands[j] > dek:
                        print dekE[0]
                        dek = commands[j]
                    else:
                        print dekE[2]
    del groups[0]
    i = group[1]

