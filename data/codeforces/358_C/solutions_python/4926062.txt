from Queue import * # Queue, LifoQueue, PriorityQueue
from bisect import * #bisect, insort
from datetime import * 
from collections import * #deque, Counter,OrderedDict,defaultdict
import calendar
import heapq
import math
import copy
import itertools

def solver():
    n = input()
    num = [input() for _ in xrange(n)]
    start = 0
    while start < n:
        end = start
        while end < n and num[end] != 0:
            end += 1
            
        if end == n:
            while start < n:
                print "pushStack"
                start += 1
            return
        if end-start >= 3:
            numbers = num[start:end]
            new_numbers = sorted(numbers,reverse=True)
            flag1,flag2,flag3 = True,True,True
            for x in numbers:
                if x == new_numbers[0] and flag1:
                    print "pushStack"
                    flag1 = False
                elif x == new_numbers[1] and flag2:
                    print "pushQueue"
                    flag2 = False
                elif x == new_numbers[2] and flag3:
                    print "pushFront"
                    flag3 = False
                else:
                    print "pushBack"
            print "3 popStack popQueue popFront"
        
        elif end - start == 2:
            print "pushStack"
            print "pushQueue"
            print "2 popStack popQueue"
        elif end - start == 1:
            print "pushStack"
            print "1 popStack"
        else:
            print "0"
        start = end + 1
        


    
    


if __name__ == "__main__":
    solver()
    
