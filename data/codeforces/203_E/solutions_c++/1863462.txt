#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

struct Node
{
	int c,f,l;
	bool operator < (const Node &node) const
	{
		return f<node.f;
	}
	int pos;
};

vector<Node> all;
vector<Node> carry;
vector<Node> nocarry;
long long maxRobot=0,minFuel=0;	

void gao(int S,int d)
{
	int idx=-1;
	for(int i=0;i<carry.size();i++)
		if(carry[i].l>=d&&carry[i].f<=S)
		{
			idx=i;
			break;
		}
	long long availableSeats=0;
	if(idx!=-1)
	{
		minFuel=carry[idx].f;
		for(int i=0;i<all.size();i++)
			if(all[i].pos==carry[idx].pos)
			{
				all.erase(all.begin()+i);
				break;
			}
		for(int i=0;i<carry.size();i++)
			availableSeats+=carry[i].c;
		availableSeats-=carry.size()-1;
		for(int i=0;i<all.size()&&availableSeats<nocarry.size();i++)
			if(all[i].l>=d&&all[i].f+minFuel<=S)
			{
				availableSeats++;
				minFuel+=all[i].f;
			}
		maxRobot=carry.size()+min(availableSeats,(long long)nocarry.size());
	}
	int cnt=0,fuel=0;
	for(int i=0;i<nocarry.size();i++)
		if(nocarry[i].l>=d&&nocarry[i].f+fuel<=S)
		{
			cnt++;
			fuel+=nocarry[i].f;
		}
	if(cnt>maxRobot||(cnt==maxRobot&&minFuel>fuel))
	{
		maxRobot=cnt;
		minFuel=fuel;
	}
}

int main()
{
	int n,d,S;
	scanf("%d%d%d",&n,&d,&S);
	Node tmp;
	for(int i=0;i<n;i++)
	{
		scanf("%d%d%d",&tmp.c,&tmp.f,&tmp.l);
		tmp.pos=i;
		if(tmp.c)carry.push_back(tmp);
		else nocarry.push_back(tmp);
		all.push_back(tmp);
	}
	sort(all.begin(),all.end());
	sort(carry.begin(),carry.end());
	sort(nocarry.begin(),nocarry.end());	
	gao(S,d);
	cout<<maxRobot<<" "<<minFuel<<endl;
	return 0;
}
