#include <cstdio>
#include <cstring>
#include <algorithm>
#include <ctime>
using namespace std;

typedef unsigned int USN;
typedef long long LL;
typedef unsigned long long ULL;

#define rep(i,l,r) for (int i=(l); i<=(r); i++)
#define repd(i,r,l) for (int i=(r); i>=(l); i--)

#define INF 2000000000

int random(int k)
{
	static int x=time(0); x+=(x<<2)+(x>>2)+(x<<4)+(x>>4)+1; x&=(0x7fffffff);
	return x%k;
}

#define maxn 100010

int f[maxn];

void lemon()
{
	int n,V,dis; scanf("%d%d%d",&n,&dis,&V);
	int cnt=0; LL carry=1; int min=INF, where, have=0;
	rep(i,1,n)
	{
		int tc,tf,tmp; scanf("%d%d%d",&tc,&tf,&tmp);
		if (tmp<dis) tf=INF;
		f[++cnt]=tf; 
		if (tc) { if (tf<min) min=tf; carry+=tc-1; have++; }
	}
	sort(f+1,f+cnt+1);
	if (min!=INF)
	{
		rep(i,1,cnt) if (f[i]==min) { where=i; break; }
		rep(i,where+1,cnt) f[i-1]=f[i]; cnt--;
	}
	if (carry+have>n) carry=n-have;
	int final=0, fv=0;
	if (min<=V)
	{
		int v=V-min, k=1;
		while (k<=n-have-carry && v>=f[k]) v-=f[k], k++; k--;
		int x=k+have+carry; if (x>final) final=x, fv=v; else if (x==final && v>fv) fv=v;
	}
	int k=1, v=V;
	while (k<=cnt && v>=f[k]) v-=f[k], k++; k--;
	if (k>final) final=k, fv=v; else if (k==final && v>fv) fv=v;
	printf("%d %d\n",final,V-fv);
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("203E.in","r",stdin);
	#endif
	lemon();
	return 0;
}