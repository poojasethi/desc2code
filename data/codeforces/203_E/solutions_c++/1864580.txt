#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<vector>
#include<map>
#include<stack>
using namespace std;
typedef struct node{
   int c,f,l;
   node(int cc,int ff,int ll){
      c=cc;
      f=ff;
      l=ll;
   }
   bool operator <(const node& tmp)const{
      return f<tmp.f;
   }
};
vector<node> a;
int n,d,s;
int carry=0;
int ans, fule;
int update_kq(int u, int v){
    if (u>ans){
       ans=u;
       fule=v;
       return 1;
    }
    if (u<ans) return -1;
    if (v<fule) fule=v;
    return 0;
}
int solve(){
    ans=fule=0;
    int sudung=0;
    for (typeof(a.begin()) i=a.begin();i!=a.end();i++){
        if (fule+(*i).f>s) break;
        ans++;
        fule+=i->f;
    }
    int i;
    for(i=0;i<a.size();i++){
       if ((a[i].c==0)&&(a[i].f<=s)) continue;else break;
    }
    if (i==a.size()) return 0;
    if (a[i].f>s) return 0;
    int chot=i;
    update_kq(min(n,carry+1),a[chot].f);
    sudung=a[i].f;
    int themxe=0;
    for (int i=0;i<a.size();i++){
       if (i!=chot){
           if (sudung+a[i].f>s) break;
           themxe++;
           sudung+=a[i].f;
           update_kq(min(n,carry+1+themxe),sudung);
       }
    }
    return 0;
}
int main(){
    cin>>n>>d>>s;
    int c,f,l;
    for (int i=1;i<=n;i++){
        cin>>c>>f>>l;
        if (l>=d){
            a.push_back(node(c,f,l));
        }
        carry+=c;
        if (carry>n) carry=n;
    }
    sort(a.begin(),a.end());
    solve();
    cout<<ans<<" "<<fule<<endl;
    //system("pause"); 
    return 0;
}
