#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
long long n, dist, totalFuel;
vector<long long> canTravel;
vector<long long> canCarry;
#define mp make_pair
pair <long long, long long> ans;
int main ()
{
  cin>>n>>dist>>totalFuel;
  long long carry = 0;
  for (long long i = 0; i < n; i++) {
    long long c, f, l;
    cin>>c>>f>>l;
    carry += c;

    if (l >= dist) {
      canTravel.push_back(f);
      if (c > 0)
	canCarry.push_back(f);
    }
  }
  sort(canTravel.begin(), canTravel.end());
  sort(canCarry.begin(), canCarry.end());
  ans = mp(0,0);
  long long fuel = 0;
  pair <long long, long long> t;
  if (canCarry.size() && canCarry[0] <= totalFuel) {
    long long k = canCarry[0];
    fuel += k;
    for (long long i = 0; i < canTravel.size(); i++) {
      if (canTravel[i] == k) {
	canTravel.erase(canTravel.begin() + i);
	break;
      }
    }
    carry++;
    t = mp(min(carry, n), -fuel);
    ans = max(ans, t);
    for (long long i = 0; i < canTravel.size(); i++) {
      fuel += canTravel[i];
      if (fuel > totalFuel) break;
      carry++;
      t = mp(min(carry, n), -fuel);
      ans = max(ans, t);
    }
  }
  carry = 0, fuel = 0;
  for (long long i = 0; i < canTravel.size(); i++) {
    fuel += canTravel[i];
    if (fuel > totalFuel) break;
    carry++;
    t = mp(min(carry, n), -fuel);
    ans = max(ans, t);
  }
  cout<<ans.first<<" "<<-ans.second<<endl;

  return 0;
}
