#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
int const N=100005;
struct node
{
   long long c,f;
   void read(long long c,long long f){this->f=f;this->c=c;}
}Q[2][N];
int cnt[2];
long long sum[2],dp[N];
bool cmp(node p1,node p2)
{
   int f1=(p1.c!=0LL),f2=(p2.c!=0LL);
   if(f1==f2)return p1.f<p2.f;
   else return f1>f2;
}
int main()
{
 
   long long  n,d,s;
   int c,f,l;
   cin>>n>>d>>s;
   for(int i=1;i<=n;i++)
   {
      scanf("%d%d%d",&c,&f,&l);
      Q[l>=d][++cnt[l>=d]].read(c,f);
      sum[l>=d]+=c;
   }

   sort(Q[0]+1,Q[0]+cnt[0]+1,cmp);
   sort(Q[1]+1,Q[1]+cnt[1]+1,cmp);
 // cout<<cnt[0]<<" "<<cnt[1]<<endl;
 //  return 0;
   memset(dp,-1,sizeof(dp));
   dp[0]=0;
   long long cs=0,t;
   int i;
   for(i=1;i<=cnt[1]&&Q[1][i].c!=0;i++)
   {
       cs+=Q[1][i].f;
       t=min(n,sum[0]+sum[1]+i);
       if(dp[t]==-1)dp[t]=cs;
       else break;
   }
  // cout<<cnt[1]<<endl;
//   for(int k=1;k<=cnt[1];k++)cout<<Q[1][k].f<<" ";
  // cout<<endl;



   cs=0;
   for(int k=cnt[1];k>=i;k--)cs+=Q[1][k].f;

   long long r1=0,r2=0;
   for(int k=0;k<=n;k++)
   if(dp[k]!=-1&&dp[k]<=s)
   {
        while((dp[k]+cs>s||k+cnt[1]-i+1>n)&&cnt[1]>=i-1)cs-=Q[1][cnt[1]--].f;
        t=k+cnt[1]-i+1;
        if(t>r1||t==r1&&dp[k]+cs<r2)
          r1=t,r2=dp[k]+cs;
   }
   cout<<r1<<" "<<r2;






   return 0;
}
