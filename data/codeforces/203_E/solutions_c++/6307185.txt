#include <bits/stdc++.h>
using namespace std;
#define FL(a) memset(a, 0, sizeof a);
#define pi(a) cout <<  a << endl;
#define si(n) scanf("%d",&n)
#define pis(n) printf("%d ",n);
#define FREP(b) for(int i=0;i<b;i++)
#define REP(a,b,c) for(int a=b;a<c;a++)
typedef pair<int,int> ii;
typedef long long LL;
/*
struct data{
};
bool operator < (const data &a1, const data &a2){
}
*/
int carry[100008], limit[100008], fuel[100008];
vector<ii> c, wc;
int main()
{
    int n,d,S;
    cin >> n >> d >> S;
    int total = 0, id = -1, cost = 1e9 + 2;
    FREP(n){
        cin >> carry[i] >> fuel[i] >> limit[i];
        total += carry[i];

        if(total >= n) total = n-1;

        if(limit[i] >= d){
            if(carry[i] == 0) wc.push_back(ii(fuel[i], i));
            c.push_back(ii(fuel[i], i));

            if(carry[i] && fuel[i] < cost && fuel[i] <= S) cost = fuel[i], id = i;
        }
    }
    sort(c.begin(), c.end());
    sort(wc.begin(), wc.end());
    if(id == -1) total = 0;
    else total++;
    
    FREP(c.size()){
        if(total == n) break;
        if(c[i].second == id) continue;
        if(cost + c[i].first > S) break;
        cost += c[i].first, total++;
    }
    int nocarry = 0, nocarrycost = 0;
    FREP(wc.size()){
        if(nocarrycost + wc[i].first > S) break;
        nocarrycost += wc[i].first, nocarry++;
    }

    if(total < nocarry || (total == nocarry && cost > nocarrycost)) total = nocarry, cost = nocarrycost;
    cout << total << " " << cost << endl;
    return 0;
}
