#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define N 100005
#define LLD long long
using namespace std;

int n, d, x, y, z, ta, tb, c2, c3, rex, t, ptr, res;
int a[N], b[N];
LLD m, sb, s2, used, rey, exc;

void trysol(int x, LLD y){
	if (x > rex || (x == rex && y < rey)) rex = x, rey = y;
}

int main(){
	scanf("%d%d%I64d", &n, &d, &m);
	FOR(i,0,n){
		scanf("%d%d%d", &x, &y, &z);
		if (z >= d){
			if (x) b[tb++] = y, sb += x;
			else a[ta++] = y;
		}
		else{
			if (x) s2 += x, c2++;
			else c3++;
		}
	}

	if (c2){
		s2 -= c2 - 1;
		t = min(s2, (LLD)c3);
		c3 -= t;
		s2 -= t;
		c2 += t;
	}
	// type 2 put 1: trans c2, excess s2, left c3
	
	sort(a, a + ta);
	sort(b, b + tb);
	
	ptr = 0;
	used = 0;
	while (ptr < ta && used + a[ptr] <= m) used += a[ptr++];

	if (used <= m) trysol(ptr, used);
	
	FOE(i,1,tb){
		used += b[i-1];
		while (ptr && used > m) used -= a[--ptr];
		if (used > m) break;
		
		exc = sb - tb + i;
		res = tb + ptr;
		
		if (c2){
			exc --;
			res += c2;
			exc += s2;
		}

		t = min(exc, (LLD)c3);
		res += t;
		exc -= t;

		t = min(exc, (LLD)ta - ptr);
		res += t;
		exc -= t;

		while (ptr && exc){
			ptr --;
			exc --;
			used -= a[ptr];
		}
		
		trysol(res, used);
//		printf("%d %d\n", rex, (int)rey);
	}
	
	printf("%d %d\n", rex, (int)rey);
	return 0;
}
