#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;


typedef long long ll;
int N,d,S,bad;
ll locost, lowest;
vector<ll> nocap;
vector<ll> price;

int main(){
    cin >> N >> d >> S;
    ll fcarry=1;
    bad = 0, locost=1000000002, lowest=locost;
    for(int i=0; i<N; i++){
	ll c,f,l; cin >> c >> f >> l;
	fcarry += c;
	if(l >= d){
	    price.push_back(f);
	    if(c == 0){
		nocap.push_back(f);
	    }else{
		locost = min (locost, f);
	    }
	    lowest = min(lowest, f);
	}else{
	    bad += 1;
	}
    }

    if(lowest > S){
	cout << "0 0\n";
	return 0;
    }

    for(int i=0; i<price.size(); i++){
	if(price[i] == locost){
	    price[i] = price[price.size()-1];
	    price.pop_back();
	    break;
	}
    }

    sort(price.begin(), price.end() );
    sort(nocap.begin(), nocap.end() );
    

    ll res1 = 0, res2 = locost;
    ll n1 = 0, n2 = min(fcarry, (ll)N);
    for(int i=0; i<nocap.size(); i++){
	if(res1 + nocap[i] <= S){
	    res1 += nocap[i];
	    n1 += 1;
	}else{
	    break;
	}
    }

    for(int i=0; i<price.size(); i++){
	if(n2 == N) break;
	if(res2 + price[i] <= S){
	    res2 += price[i];
	    n2 += 1;
	}else{
	    break;
	}
    }

    /*if(N==100000){
	cout << locost << " " << S<< " " << res2 << " "<< n2 << endl;
    }*/
    if(locost > S){
	res2 = 0, n2 = 0;
    }

    ll res;
    if(n1 < n2){
	res = res2;
    }
    if(n1 > n2){
	res = res1;
    }
    if(n1 == n2){
	res = min( res1, res2);
    }
    cout << max(n1,n2) << " " << res << endl;
}
