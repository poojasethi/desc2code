#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long LL;

#define SZ(v) ((int)v.size())

vector<int> A;
vector<LL> B;
int ra, rb;
int n;
LL sumC;
int S;

int res, fuel;

void init()
{
  int d;
  scanf("%d%d%d", &n, &d, &S);

  A.clear();
  B.clear();
  ra = rb = 0;
  sumC = 0;

  for (int c, f, l, i = 0; i < n; ++i) {
    scanf("%d%d%d", &c, &f, &l);
    sumC += c;
    if (l >= d) {
      if (c) A.push_back(f), --sumC; else B.push_back(f);
    } else {
      if (c) ++ra, --sumC; else ++rb;
    }
  }
  ++sumC;
}

void up_res(int cres, int cfuel)
{
  if (res < cres || (res == cres && cfuel < fuel)) {
    res = cres;
    fuel = cfuel;
  }
}

int get_b(int remain, int len)
{
  int cur = upper_bound(B.begin(), B.begin() + len, remain) - B.begin();
  return cur;
}

void solve()
{
  sort(A.begin(), A.end());
  sort(B.begin(), B.end());
  for (int i = 1; i < SZ(B); ++i) B[i] += B[i-1];
  
  int bsize;
  LL ras, rbs;

  res = 0;
  fuel = 0;

  bsize = get_b(S, SZ(B));
  if (bsize) up_res(bsize, B[bsize-1]);

  ras = 0;
  for (int i = 0; i < SZ(A); ++i) {
    ras += A[i];
    if (S < ras) break;
    if (sumC <= rb) {
      bsize = get_b(S-ras, SZ(B));
      if (bsize) rbs = B[bsize-1]; else rbs = 0;
      up_res(SZ(A) + ra + sumC + bsize, ras + rbs);
    } else if (sumC <= rb + SZ(B)) {
      bsize = get_b(S-ras, SZ(B) - (sumC - rb));
      if (bsize) rbs = B[bsize-1]; else rbs = 0;
      up_res(SZ(A) + ra + sumC + bsize, ras + rbs);
    } else {
      up_res(n, ras);
    }
    ++sumC;
  }

  printf("%d %d\n", res, fuel);
}

int main()
{
  init();
  solve();
  return 0;
}
