#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
using namespace std;

typedef long long ll;
typedef double lf;
typedef long double Lf;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;

#define TRACE(x) cerr << #x << "  " << x << endl
#define FOR(i, a, b) for (int i = (a); i < int(b); i++)
#define REP(i, n) FOR(i, 0, n)
#define all(x) (x).begin(), (x).end()
#define _ << " " <<

const int MAXN = 2020;
const int MAXM = 100002;

int n, a1, b1, m, ea[MAXM], eb[MAXM], col[MAXN][MAXN], boja[MAXN][MAXN], Adeg[MAXN], Bdeg[MAXN], sol;

pii get(int a, int b) {
	pii ret = make_pair(-1,-1);
	
	FOR(i, 1, sol + 1) {
		if (!col[i][a] && !col[i][b]) return make_pair(i,i);
		if (!col[i][a] && ret.first == -1) ret.first = i;
		if (!col[i][b] && ret.second == -1) ret.second = i;
	}
	
	return ret;
}

void free_node(int x, int y, int c1, int c2) {
	int z = col[c1][y];
	
	if (!col[c2][z]) {
		col[c1][z] = 0;
		col[c2][z] = y;
		col[c2][y] = z;
		boja[y][z] = boja[z][y] = c2;
		
		col[c1][x] = y;
		col[c1][y] = x;
		boja[x][y] = boja[y][x] = c1;
		return;
	}
	
	free_node(y, z, c2, c1);
	
	col[c1][x] = y;
	col[c1][y] = x;
	boja[x][y] = boja[y][x] = c1;
}

int main() {
	scanf("%d %d %d",&a1,&b1,&m);
	
	REP(i, m) {
		scanf("%d %d",&ea[i],&eb[i]);
		eb[i] += 1001;
		Adeg[ea[i]]++;
		Bdeg[eb[i]]++;
		sol = max(sol, max(Adeg[ea[i]], Bdeg[eb[i]]));
	}
	
	
	REP(i, m) {
		if (boja[ea[i]][eb[i]]) continue;
		pii a = get(ea[i], eb[i]);
		int x = a.first;
		int y = a.second;
		
		if (x == y) {
			col[x][ea[i]] = eb[i];
			col[x][eb[i]] = ea[i];
			boja[ea[i]][eb[i]] = boja[eb[i]][ea[i]] = x;
			continue;
		}
		free_node(ea[i], eb[i], x, y);
	}
	
	printf("%d\n",sol);
	REP(i, m)
		printf("%d ",boja[ea[i]][eb[i]]);
	puts("");
	return 0;
}
