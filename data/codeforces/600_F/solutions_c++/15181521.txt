#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
#include <set>
#include <queue>

#define INF 2000000000
#define MOD 1000000007
	
using namespace std;

struct edge {
	int f;
	int t;
	int c;
	int i;	
};

int used[2000][1000];
int a, b;
int m;
vector<edge> edges;
int deg[2000];

int main() {
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
	scanf("%d %d %d", &a, &b, &m);
	int maxCol = 0;
	for (int i = 0; i < m; i++) {
		int f, t;
		scanf("%d %d", &f, &t);
		f--;
		t--;
		edge e;
		e.f = f;
		e.t = a + t;
		e.c = -1;
		e.i = i;
		deg[f]++;
		deg[a + t]++;
		maxCol = max(maxCol, max(deg[f], deg[a + t]));
		edges.push_back(e);
	}	
	for (int i = 0; i < edges.size(); i++) {
		bool found = false;
		for (int j = 0; j < maxCol; j++) {
			if (!used[edges[i].f][j] && !used[edges[i].t][j]) {
				used[edges[i].f][j] = i + 1;
				used[edges[i].t][j] = i + 1;
				edges[i].c = j + 1;
				found = true;
				break;
			}
		}
		if (found)
			continue;
		int fc, sc;
		for (int j = 0; j < maxCol; j++) {
			if (!used[edges[i].f][j] && used[edges[i].t][j]) 
				sc = j;
			if (used[edges[i].f][j] && !used[edges[i].t][j])
				fc = j;
		}
		int curEdge = i;
		bool sw = false;
		while (used[edges[curEdge].t][sc]) {
			edges[curEdge].c = sc + 1;
			used[edges[curEdge].f][sc] = curEdge + 1;
			int tmp = used[edges[curEdge].t][sc] - 1;
			used[edges[curEdge].t][sc] = curEdge + 1;
			if (sw) 
				swap(edges[curEdge].f, edges[curEdge].t);
			curEdge = tmp;
			swap(fc, sc);
			sw = !sw;						
			if (sw)
				swap(edges[curEdge].f, edges[curEdge].t);
		}
		used[edges[curEdge].t][fc] = 0;
		edges[curEdge].c = sc + 1;
		used[edges[curEdge].f][sc] = curEdge + 1;
		used[edges[curEdge].t][sc] = curEdge + 1;
		if (sw)
			swap(edges[curEdge].f, edges[curEdge].t);
	}
	printf("%d\n", maxCol);
	for (int i = 0; i < edges.size(); i++)
		printf("%d ", edges[i].c);
	printf("\n");
    return 0;    
}