#include <cstdio>
#include <string.h>
#define NUM 9
using namespace std;
typedef long long LL;
const LL INF=1000000007;
struct matrix {
    LL A[20][20];
    
};  
matrix operator*(matrix a,matrix b) {
    matrix ret;
    memset(ret.A,0,sizeof(ret.A));
    for(int i=0;i<NUM;i++)
        for(int k=0;k<NUM;k++)
            for(int j=0;j<NUM;j++)
                ret.A[i][j]=(ret.A[i][j]+b.A[i][k]*a.A[k][j]%INF)%INF;
    return ret;
}
matrix mu,unit;
LL POW;
LL doit(int a) {
    matrix ret=unit,tmp=mu;
    a--;
    while(a) {
        if(a&1){
            ret=ret*tmp;
            a--;
        }
        tmp=tmp*tmp;
        a>>=1;
    }
    //for(int i=0;i<NUM;i++) printf("%I64d\n",ret.A[i][0]);
    return (ret.A[NUM-1][0])%INF;
}   
LL calc(int a) {
    if(a==0) return 0;
    return (doit(a)+doit((a+1)/2))%INF*POW%INF;
}   
int main()
{   
    POW=500000004;
    memset(unit.A,0,sizeof(unit.A));
    for(int i=0;i<NUM-1;i++) unit.A[i][0]=1;
    unit.A[NUM-1][0]=0;
    memset(mu.A,0,sizeof(mu.A));
    mu.A[0][4]=1;
    mu.A[1][6]=1;
    mu.A[2][5]=mu.A[2][7]=1;
    mu.A[3][5]=mu.A[3][7]=1;
    mu.A[4][0]=mu.A[4][2]=1;
    mu.A[5][0]=mu.A[5][2]=1;
    mu.A[6][1]=mu.A[6][3]=1;
    mu.A[7][1]=mu.A[7][3]=1;
    for(int i=0;i<NUM;i++) mu.A[8][i]=1;
    int L,R;
    scanf("%d%d",&L,&R);
    printf("%I64d\n",(calc(R)-calc(L-1)+INF+(L==1?4:0))%INF);
    getchar();getchar();
    return 0;
}   