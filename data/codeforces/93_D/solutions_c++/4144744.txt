#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstring>
#include <algorithm>
#define Mod 1000000007LL
typedef long long ll;
using namespace std;
struct Matrix
{
	ll a[10][10];
};
Matrix operator * (Matrix p, Matrix q)
{
	Matrix s;
	memset(s.a, 0, sizeof(s.a));
	for (ll i = 1; i <= 9; i ++)
		for (ll j = 1; j <= 9; j ++)
			for (ll k = 1; k <= 9; k ++)
				s.a[i][j] += (p.a[i][k] * q.a[k][j]) % Mod, s.a[i][j] %= Mod;  
	return s;
};
ll Ksm(ll v)
{
	if (v < 0) return 0;
	Matrix p, q;
	memset(p.a, 0, sizeof(p.a));
	memset(q.a, 0, sizeof(q.a));
	for (ll i = 1; i <= 8; i ++) p.a[1][i] = 1;
	p.a[1][9] = 4;
	q.a[1][5] = q.a[1][6] = q.a[1][9] = q.a[2][7] = q.a[2][8] = q.a[2][9] = 1;
	q.a[3][5] = q.a[3][6] = q.a[3][9] = q.a[4][7] = q.a[4][8] = q.a[4][9] = 1;
	q.a[5][1] = q.a[5][9] = q.a[6][3] = q.a[6][4] = q.a[6][9] = 1;
	q.a[7][2] = q.a[7][9] = q.a[8][3] = q.a[8][4] = q.a[8][9] = 1;
	q.a[9][9] = 1;
	for (; v; v >>= 1)
	{
		if (v & 1) p = p * q;
		q = q * q;
	}
	return p.a[1][9];
}
ll Calc(ll x, ll p)
{
	if (p == 0) return 1;
	else if (p == 1) return x;
	else
	{
		ll tmp = Calc(x, p >> 1);
		if (p & 1) return (tmp * tmp * x) % Mod;
		else return (tmp * tmp) % Mod;
	}
}
int main()
{
	ll l, r;
	scanf("%I64d %I64d", &l, &r);
	ll get = Ksm(r - 1) - Ksm(l - 2);
	get += 2 * Mod; get %= Mod;
	get += Ksm((r - 1) >> 1), get %= Mod, get -= Ksm((l >> 1) - 1), get += 2 * Mod, get %= Mod;
	printf("%I64d\n", get * Calc(2, Mod - 2) % Mod);
	return 0;
}
  		 				 	     	 				 		