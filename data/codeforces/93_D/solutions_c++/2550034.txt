#include <cstdio>
#include <cstring>

typedef long long LL;

const LL mo = 1000000007, rev = 500000004;
const LL Matrix[][9]={{0,0,0,0,1,1,0,0,1},
					  {0,0,0,0,0,0,1,1,1},
					  {0,0,0,0,1,1,0,0,1},
					  {0,0,0,0,0,0,1,1,1},
					  {1,0,0,0,0,0,0,0,1},
					  {0,0,1,1,0,0,0,0,1},
					  {0,1,0,0,0,0,0,0,1},
					  {0,0,1,1,0,0,0,0,1},
					  {0,0,0,0,0,0,0,0,1}};
int l, r;
struct matrix{int n, m; LL mat[9][9];} a, b, c;

inline matrix operator * (const matrix &a, const matrix &b){
	memset(c.mat, 0, sizeof(c.mat));
	c.n = a.n; c.m = b.m;
	for (int i = 0; i < c.n; i++)
		for (int j = 0; j < c.m; j++)
			for (int k = 0; k < a.m; k++)
				c.mat[i][j] = (c.mat[i][j] + a.mat[i][k] * b.mat[k][j]) % mo;
	return c;
}

LL calc(int x){
	if (!x) return 0;
	a.n = 1; a.m = b.n = b.m = 9;
	for (int i = 0; i < 8; i++) a.mat[0][i] = 1;
	a.mat[0][8] = 4;
	memcpy(b.mat, Matrix, sizeof(Matrix));
	for (--x; x; x >>= 1){
		if (x & 1) a = a * b;
		b = b * b;
	}
	return a.mat[0][8];
}

int main(){
	scanf("%d%d", &l, &r);
	printf("%I64d\n", (calc(r) - calc(l - 1) + calc((r + 1) / 2) - calc(l / 2) + mo + mo) * rev % mo);
	return 0;
}

