#include <cstdio>
#include <cstring>
#define P 1000000007

struct matrix
{
	int a[9][9];
	matrix(int x=0)
	{
		memset(a,0,sizeof(a));
		for (int i=0; i<9; i++) a[i][i]=x;
	}
	friend matrix operator *(const matrix&A,const matrix&B)
	{
		matrix C;
		for (int i=0; i<9; i++)
			for (int j=0; j<9; j++)
				for (int k=0; k<9; k++) C[i][j]=(1ll*A[i][k]*B[k][j]+C[i][j])%P;
		return C;
	}
	matrix operator^(int B)
	{
		matrix A=*this,C(1);
		for (;B; B>>=1,A=A*A) if (B&1) C=C*A;
		return C;
	}
	int*operator [](int x) {return a[x];}
	const int*operator [](int x) const {return a[x];}
} A,F;
int L,R;

int work(int n)
{
	F[0][8]=4;
	for (int i=0; i<8; i++) F[0][i]=1;
	return (F*(A^(n-1)))[0][8];
}

int calc(int n) {return !n?0:1ll*(P+1)/2*(work(n)+work((n+1)/2))%P;}

int main()
{
	A[0][2]=A[0][8]=1;
	A[1][6]=A[1][7]=A[1][8]=1;
	A[2][0]=A[2][1]=A[2][8]=1;
	A[3][4]=A[3][5]=A[3][8]=1;
	A[4][3]=A[4][8]=1;
	A[5][6]=A[5][7]=A[5][8]=1;
	A[6][0]=A[6][1]=A[6][8]=1;
	A[7][4]=A[7][5]=A[7][8]=1;
	A[8][8]=1;
	scanf("%d%d",&L,&R),printf("%d\n",(calc(R)-calc(L-1)+P)%P);
}