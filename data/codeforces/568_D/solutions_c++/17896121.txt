#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
const double eps=1e-8;
const int maxn=100000+10;
struct Point{
    double x, y;
    Point(){}
    Point(double x, double y):x(x),y(y){}
}inter;
struct Line{
    double a,b,c;
    int id;
    Line(double a=0, double b=0, double c=0, int id=0):a(a),b(b),c(c),id(id){}
}e[maxn];
struct Node{
	int x,y;
	Node(){}
	Node(int x,int y): x(x),y(y){}
}ans[10];
int n,k,cnt,tot,pos;
inline int read()
{
	int x=0;
	char ch=getchar();
	while (ch<'0'||ch>'9')
		ch=getchar();
	while (ch>='0'&&ch<='9')
	{
		x=x*10+ch-'0';
		ch=getchar();
	}
	return x;
}
inline int dcmp(double x)
{
    if (fabs(x)<eps)
		return 0;
    return x<0 ? -1:1;
}
bool judge(Line L1,Line L2)
{
    double a1 = L1.a, b1 = L1.b, c1 = L1.c,
           a2 = L2.a, b2 = L2.b, c2 = L2.c;
    if(dcmp(a1*b2-a2*b1) == 0) return false;
    inter=Point( (b1*c2-c1*b2)/(a1*b2-b1*a2),
               (a1*c2-c1*a2)/(b1*a2-a1*b2) );
    return true;
}
int main()
{
    n=read(),k=read();
	for (int i=1,a,b,c;i<=n;i++)
	{
		scanf("%d%d%d",&a,&b,&c);
		e[i]=Line(a,b,c,i);
	}
	cnt=n;
	bool exis=1;
	while(cnt)
	{
		if (k>=cnt)
		{
			ans[++tot]=Node(e[cnt].id,-1);
			cnt--;
			continue;
		}
		for (pos=1;pos<=500;pos++)
		{
			int a=rand()%cnt+1,b=rand()%cnt+1,sz=0;
			if (!judge(e[a],e[b]))
				continue;
			for (int j=1;j<=cnt;j++)
			{
				Line &u=e[j];
				if (dcmp(inter.x*u.a+inter.y*u.b+u.c)==0)
					sz++;
			}
			if (sz*k>=cnt)
			{
				ans[++tot]=Node(e[a].id,e[b].id);
				break;
			}
		}
		if (pos>500)
		{
			exis=0;
			break;
		}
		for (int j=cnt;j>=1;j--)
		{
			Line u=e[j];
			if (dcmp(inter.x*u.a+inter.y*u.b+u.c)==0)
			{
				swap(e[j],e[cnt]);
				cnt--;
			}
		}
		k--;
    }
	if (!exis)
		puts("NO");
	else
	{
		puts("YES");
		printf("%d\n",tot);
		for (int i=1;i<=tot;i++)
			printf("%d %d\n",ans[i].x,ans[i].y);
    }
    return 0;
}
				  		 	 			  			 		 	