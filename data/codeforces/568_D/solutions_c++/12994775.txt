#include <cstdio>
#include <cstring>
#include <algorithm>
#include <ctime>

using namespace std;

typedef long long int64;

const int maxn = (int) 1e5 + 10;

int n, k, a[maxn], b[maxn], c[maxn], r[maxn];
int ans1[maxn], ans2[maxn];

int main() {
    double start = clock();
    scanf("%d%d", &n, &k);
    for(int i = 0; i < n; i++) 
        scanf("%d%d%d", &a[i], &b[i], &c[i]);
    for(int T = 0; ; T++) {
        double cur = clock();
        if((cur - start) / CLOCKS_PER_SEC > 1.5) {
            puts("NO");
            return 0;
        }
        for(int i = 0; i < n; i++)
            r[i] = i;
        int cnt = n;
        for(int now = 0; now < k + 1; now++) {
            if(cnt == 0) {
                puts("YES");
                printf("%d\n", now);
                for(int i = 0; i < now; i++) {
                    if(ans2[i] != -1)
                        ans2[i]++;
                    ans1[i]++;
                    printf("%d %d\n", ans1[i], ans2[i]);
                }
                return 0;
            }
            int x = r[rand() % cnt], y = r[rand() % cnt];
            if(x == y){ 
                ans1[now] = x; ans2[now] = -1;
                int tot = 0;
                for(int i = 0; i < cnt; i++)
                    if(i != x) r[tot++] = r[i];
                cnt = tot;
            } else {
                ans1[now] = x; ans2[now] = y;
                int64 slope = 1LL * a[x] * b[y] - 1LL * a[y] * b[x];
                if(slope == 0)
                    break;
                int64 xx = -1LL * b[x] * c[y] + 1LL * b[y] * c[x];
                int64 yy = 1LL * a[x] * c[y] - 1LL * a[y] * c[x];
                int tot = 0;
                for(int i = 0; i < cnt; i++)
                    if(1LL * a[r[i]] * xx + 1LL * b[r[i]] * yy - 1LL * c[r[i]] * slope != 0) r[tot++] = r[i];
                cnt = tot;
            }
        }
    }
    puts("NO");
    return 0;
}
