#include <bits/stdc++.h>
#define ll long long
#define db double
using namespace std;

const int MaxN = 100010, MaxK = 7;
const db eps = 1e-8;
db x[MaxK], y[MaxK];
int u[MaxN], v[MaxN];

db a[MaxN], b[MaxN], c[MaxN];
int n, k;

int h[MaxN];

bool get_intersect(int i, int j, int pos) {
	db delta = a[i] * b[j] - a[j] * b[i];
	if (delta == 0) return 0;
	x[pos] = -(c[i] * b[j] - c[j] * b[i]) / delta;
	y[pos] = -(a[i] * c[j] - a[j] * c[i]) / delta;
	u[pos] = i;
	v[pos] = j;
	return 1;
}

bool mark[MaxN];
void get_mark(int htot, int pos) {
	for (int i = 1; i <= htot; ++i)
		if (fabs(x[pos] * a[h[i]] + y[pos] * b[h[i]] + c[h[i]]) <= eps) mark[i] = 1;
		else mark[i] = 0;
}

int Rand(int n) {
	return (((ll)rand() << 16) ^ rand()) % n + 1;
}

void calc(int now, int htot) {
	if (now + htot <= k) {
		puts("YES");
		printf("%d\n", now + htot);
		for (int i = 1; i <= now; ++i) printf("%d %d\n", u[i], v[i]);
		for (int i = 1; i <= htot; ++i) printf("%d -1\n", h[i]);
		exit(0);
	}
/*	printf("%d\n", now);
	for (int i = 1; i <= htot; ++i) printf("%d ", h[i]); puts("");*/
	if (now >= k) return;
	int t = k - now;
	for (int cnt = 0; cnt < t * t; ++cnt) {
		int u, v;
		do {
			u = Rand(htot), v = Rand(htot);
		} while (u == v);
		if (!get_intersect(h[u], h[v], now + 1)) continue;
		get_mark(htot, now + 1);
		int size = 0, tmp = 0;
		for (int i = 1; i <= htot; ++i)
			if (mark[i]) ++size;
			else swap(h[++tmp], h[i]);
		if (size >= htot / t) {
			calc(now + 1, tmp);
		}
	}
}

int main() {
	srand(time(0));
	scanf("%d%d", &n, &k);
	for (int i = 1; i <= n; ++i) scanf("%lf%lf%lf", a + i, b + i, c + i);
	for (int i = 1; i <= n; ++i) h[i] = i;
	random_shuffle(h + 1, h + n + 1);
	calc(0, n);
	puts("NO");
	return 0;
}
