#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
const double eps=1e-9;
struct point{
    double x,y;
    point(): x(0),y(0) { }
    point(double x_,double y_): x(x_),y(y_) { }
};
struct line{
    int idx,A,B,C;
    line(): idx(-1),A(0),B(0),C(0) { }
    line(int i_,int A_,int B_,int C_): idx(i_),A(A_),B(B_),C(C_) { }
    inline bool include(const point &t){ return fabs(A*t.x+B*t.y+C)<=eps; }
};
inline bool crosspoint(const line &u,const line &v,point &t){
    int64 s=1LL*u.A*v.B-1LL*u.B*v.A; if(!s) return false;
    int64 s1=1LL*u.B*v.C-1LL*u.C*v.B;
    int64 s2=1LL*u.C*v.A-1LL*u.A*v.C;
    t=point(1.0*s1/s,1.0*s2/s); return true;
}

const int maxn=100010,maxk=10;
line a[maxn];
int n,k;

void init(){
    scanf("%d%d",&n,&k);
    for(int i=1,A,B,C;i<=n;++i)
        scanf("%d%d%d",&A,&B,&C),a[i]=line(i,A,B,C);
    random_shuffle(a+1,a+n+1);
/*  n=100000,k=5;
    srand(1);
    for(int i=1;i<=n;++i)
        a[i]=line(i,rand(),rand(),rand());*/
}

line f[maxk][maxn]; int ansu[maxk],ansv[maxk];
bool dfs(int nowk,int fn){
    if(fn<=nowk){
        printf("YES\n%d\n",k-nowk+fn);
        for(int i=k;i>nowk;--i)
            printf("%d %d\n",ansu[i],ansv[i]);
        for(int i=1;i<=fn;++i)
            printf("%d -1\n",f[nowk][i].idx);
        return true;
    }
    if(!nowk) return false;
    line *F=f[nowk],*G=f[nowk-1]; point s;
    for(int u=1;u<=nowk;++u)
        for(int v=u+1;v<=nowk+1;++v)
            if(crosspoint(F[u],F[v],s)){
                ansu[nowk]=F[u].idx,ansv[nowk]=F[v].idx;
                int gn=0;
                for(int i=1;i<=fn;++i)
                    if(!F[i].include(s)) G[++gn]=F[i];
                if(dfs(nowk-1,gn)) return true;
            }
    return false;
}

void solve(){
    for(int i=1;i<=n;++i)
        f[k][i]=a[i];
    if(!dfs(k,n)) puts("NO");
}

int main(){
    init();
    solve();
    return 0;
}