#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <ctime>
#include <cmath>
#include <vector>


const int maxn = 1e5 + 20;
const int maxk = 6;

int n, k;
int A[maxn], B[maxn], C[maxn];
std::vector<std::pair<int,int> > ans;
bool flag[maxn];
std::vector<int> all_line;

bool solve(std::vector<int> line,std::vector<std::pair<int, int> > node,int k)
{
	if(line.empty()) { ans = node; return true; }
	
	if(k <= 0) return false;
	
	if(k >= line.size())
	{
		for(int i = 0; i < line.size(); i++)
			node.push_back(std::make_pair(-1, line[i]));
			
		ans = node;
		return true;
	}
	
	int x = line[rand() % line.size()], y = line[rand() % line.size()];

	if(1ll * A[x] * B[y] == 1ll * A[y] * B[x]) return false;	
	
	node.push_back(std::make_pair(x, y));
	
	static std::vector<int> ext;
	
	long long ya = 1ll * A[x] * C[y] - 1ll * A[y] * C[x]; 
	long long yb = 1ll * A[y] * B[x] - 1ll * A[x] * B[y];
	long long xa = 1ll * B[x] * C[y] - 1ll * B[y] * C[x];
	long long xb = - yb;
	
	ext.clear();
	
	for(int i = 0; i < line.size(); i++)
	{
		int t = line[i];
		
		if(xa * A[t] * yb + ya * B[t] * xb + C[t] * xb * yb != 0) ext.push_back(t);
	}
	
	return solve(ext, node, k - 1);
}
int main()
{
	srand(233);
	
	scanf("%d%d", &n, &k);
	
	for(int i = 1; i <= n; i++)
	{
		scanf("%d%d%d", &A[i], &B[i], &C[i]);
		all_line.push_back(i);
	}
	
	while(clock() * 1.0 / CLOCKS_PER_SEC < 1.8 && !ans.size()) solve(all_line, ans, k);
	
	if(ans.size())
	{
		puts("YES");
		
		printf("%d\n", (int) ans.size());
		
		for(int i = 0; i < ans.size(); i++)
			printf("%d %d\n", ans[i].second, ans[i].first);
	}
	else
	{
		puts("NO");
	}
	
	return 0;
}
                                                                          