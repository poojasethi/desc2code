n, A, B = map(int, raw_input().split())
arr = map(int, raw_input().split())

arr = map(lambda x: x + 1, arr)

ans = [1] * 1000

def beat(blood):
    blood[0] -= B
    blood[1] -= A
    blood[2] -= B

    return map( lambda x: max(x, 0), blood)

def dfs(now, b1, b2, tmp):
    global ans

    if len(tmp) > len(ans):
        return 

    #print now
    if now == n-1:
        if b1 == 0 and b2 == 0:
            ans = tmp[:]
        return 

    if now + 1 < n:
        b3 = arr[now+1]
    else:
        b3 = 0
    blood = [b1, b2, b3]

    while blood[0] > 0:
        blood = beat(blood)
        tmp.append(now+1)
    
    while blood[1] > 0 or (now == n-2 and blood[2] > 0):
        t = tmp[:]
        dfs(now+1, blood[1], blood[2], tmp)
        tmp = t
        tmp.append(now+1)
        blood = beat(blood)

    dfs(now+1, blood[1], blood[2], tmp)

tmp = []
dfs(1, arr[0], arr[1], tmp);
print len(ans)
print ' '.join( map(str, ans) )
