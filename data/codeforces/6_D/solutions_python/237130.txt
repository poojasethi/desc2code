#!/usr/bin/env python
import string, random, time

def fireball(archers, k, a, b):
	n = len(archers)
	# Cannot
	if (k != 0) and (k + 1 != n):
		# Direct hit
		archers[k] -= a

		# Left splash
		if k - 1 >= 0:
			archers[k - 1] -= b

		# Right splash
		if k + 1 < n:
			archers[k + 1] -= b

	return archers

n, a, b = map(int, string.split(raw_input()))
archers = map(int, string.split(raw_input()))

counter = 0
moves = []

# Kill left && right
while archers[0] >= 0:
	archers = fireball(archers, 1, a, b)
	counter += 1
	moves.append(2)

while archers[n - 1] >= 0:
	archers = fireball(archers, n - 2, a, b)
	counter += 1
	moves.append(n - 1)

# Test
optimum = []
if max(archers) >= 0:
	random.seed(time.time())
	for i in range(5000):
		sandbox = list(archers)
		moves2 = []
		while max(sandbox) >= 0:
			move = random.randint(1, n - 2)
			while (sandbox[move] < 0):
				move = random.randint(1, n - 2)
			sandbox = fireball(sandbox, move, a, b)
			moves2.append(move + 1)

		if (len(moves2) < len(optimum)) or (len(optimum) == 0):
			optimum = list(moves2)

# Test 2
if max(archers) >= 0:
	random.seed(time.time())
	for i in range(5000):
		sandbox = list(archers)
		moves2 = []
		while max(sandbox) >= 0:
			move = random.randint(1, n - 2)
			while (sandbox[move - 1] < 0) and (sandbox[move] < 0) and (sandbox[move + 1] < 0):
				move = random.randint(1, n - 2)
			sandbox = fireball(sandbox, move, a, b)
			moves2.append(move + 1)

		if (len(moves2) < len(optimum)) or (len(optimum) == 0):
			optimum = list(moves2)

print len(moves) + len(optimum)
for move in moves:
	print move
for move in optimum:
	print move
