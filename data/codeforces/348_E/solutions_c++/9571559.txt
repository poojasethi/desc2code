#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstring>
#include<cmath>
using namespace std;
#define N 110000
struct rec{
       int len,u,id;
       }down[N],up[N],q[N];
int fa[N][18],dep[N],lab[N],n,m,v[N*2],next[N*2],cost[N*2],head[N],num=0;
bool ok[N];
void add(int x,int y,int z){
     v[++num]=y;next[num]=head[x];head[x]=num;cost[num]=z;
     }
void dfs1(int u){
     down[u].len=-1;
     if(ok[u])down[u].len=0,down[u].u=u;
     for(int i=1;(1<<i)<=dep[u];i++)fa[u][i]=fa[fa[u][i-1]][i-1];
     for(int i=head[u];i;i=next[i])
       if(v[i]!=fa[u][0]){
         dep[v[i]]=dep[u]+1;
         fa[v[i]][0]=u;
         dfs1(v[i]);
         if(down[v[i]].len!=-1){
           rec e=down[v[i]];
           e.len+=cost[i];
           if(e.len>down[u].len)down[u]=e;
           else 
           if(e.len==down[u].len)down[u].u=u;
           }
       }
}
void dfs2(int u){
     if(up[u].len==-1 && ok[u])up[u].len=0,up[u].u=u;
     int top=0;
     if(up[u].len!=-1){
       q[++top]=up[u];q[top].id=fa[u][0];
       int t=top;
       while(t>1 && q[t].len>q[t-1].len)swap(q[t],q[t-1]),t--;
       top=min(top,3);
     }
     for(int i=head[u];i;i=next[i])
       if(fa[v[i]][0]==u && down[v[i]].len!=-1){
           rec e=down[v[i]];
           e.len+=cost[i];
           q[++top]=e;q[top].id=v[i];
           int t=top;
           while(t>1 && q[t].len>q[t-1].len)swap(q[t],q[t-1]),t--;
           top=min(top,3);
           top=min(top,3);
       }
     for(int i=head[u];i;i=next[i])
       if(fa[v[i]][0]==u){
         rec e;
         int s=0;
         e.len=-1;
         for(int j=1;j<=top;j++)
           if(q[j].id!=v[i]){
             if(q[j].len>e.len)e=q[j],s=1;
             else 
             if(q[j].len==e.len)s++;
           }
         if(s)e.len+=cost[i];
         if(s==0)up[v[i]].len=-1;
         else
         if(s==1)up[v[i]]=e;
         else up[v[i]]=e,up[v[i]].u=u;
       }
     for(int i=head[u];i;i=next[i])
       if(fa[v[i]][0]==u)dfs2(v[i]);
}
void dfs3(int u){
     for(int i=head[u];i;i=next[i])
       if(fa[v[i]][0]==u)dfs3(v[i]),lab[u]+=lab[v[i]];
}
int lca(int x,int y){
    if(dep[x]<dep[y])swap(x,y);
    for(int i=17;i>=0;i--)
      if(dep[x]-(1<<i)>=dep[y])x=fa[x][i];
    if(x==y)return x;
    for(int i=17;i>=0;i--)
      if((1<<i)<=dep[x] && fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];
    return fa[x][0];
}
int main(){
    scanf("%d%d",&n,&m);
    while(m--){
      int x;
      scanf("%d",&x);
      ok[x]=1;
    }
    for(int i=1;i<n;i++){
      int x,y,z;
      scanf("%d%d%d",&x,&y,&z);
      add(x,y,z);
      add(y,x,z);
      }
    dfs1(1);
    up[1].len=-1;
    dfs2(1);
   // for(int i=1;i<=n;i++)printf("%d : %d %d    %d %d\n",i,down[i].u,up[i].u,down[i].len,up[i].len);
    for(int i=1;i<=n;i++)
      if(ok[i]){
      int x;
      if(up[i].len==down[i].len)x=i;
      else
      if(up[i].len>down[i].len)x=up[i].u;
      else x=down[i].u;
    //  cout<<i<<" "<<x<<endl;
      int y=lca(x,i);
      lab[i]++;
      lab[x]++;
      lab[y]--;
      if(fa[y][0])lab[fa[y][0]]--;
      }
    dfs3(1);
    int ans1=0,ans2=0;
    for(int i=1;i<=n;i++)
      if(!ok[i]){
        if(lab[i]>ans1)ans1=lab[i],ans2=1;
        else
        if(lab[i]==ans1)++ans2;
      }
    cout<<ans1<<" "<<ans2<<endl;
    return 0;
}
