#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<fstream>
#include<map>
#include<ctime>
#include<set>
#include<queue>
#include<cmath>
#include<vector>
#include<bitset>
#include<functional>
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define REP(i,l,r) for((i)=(l);(i)<=(r);++(i))
#define REP2(i,l,r) for((i)=(l);(i)!=(r);++(i))
using namespace std;

typedef long long LL;
typedef double ld;

const int MAX=300000+10;
const int INF=2000000000;

int n,m;
int q[MAX],lab[MAX];
int begin[MAX],next[MAX],t[MAX],w[MAX],tot;

void add(int a,int b,int c)
{
	t[++tot]=b;
	next[tot]=begin[a];
	begin[a]=tot;
	w[tot]=c;
}

int que[MAX],head,end,hash[MAX],dist[MAX];
int fa[MAX];

int BFS(int S)
{
	memset(dist,-1,sizeof dist);
	head=end=1;
	que[end++]=S;
	dist[S]=0;
	fa[S]=0;
	while(head<end)
	{
		int u=que[head++];
		int i;
		for(i=begin[u];i;i=next[i])
		{
			int v=t[i];
			if(dist[v]==-1)
			{
				fa[v]=u;
				dist[v]=dist[u]+w[i];
				que[end++]=v;
			}
		}
	}
	int T=S;
	for(int i=1;i<=n;++i)
		if(lab[i] && dist[i]>dist[T])
			T=i;
	return T;
}

int in[MAX],max_dist[MAX];
int line[MAX];
int ll[MAX],rr[MAX],delta[MAX],ans[MAX];

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
	int i;
	scanf("%d%d",&n,&m);
	REP(i,1,m)
	{
		scanf("%d",&q[i]);
		lab[q[i]]=i;
	}
	REP(i,1,n-1)
	{
		int a,b,c;
		scanf("%d%d%d",&a,&b,&c);
		add(a,b,c);
		add(b,a,c);
	}
	int S=BFS(q[1]);
	int T=BFS(S);
	int u=T;
	for(;u!=S;u=fa[u])
		in[u]=u;
	in[u]=u;
	int top=0;
	for(i=1;i<=n;++i)
	{
		int u=que[i];
		if(in[u])
			line[++top]=u;
		else
		{
			in[u]=in[fa[u]];
			if(lab[u])
				max_dist[in[u]]=max(max_dist[in[u]],dist[u]-dist[in[u]]);
		}
	}
	int st=0,st_w=-INF;
	REP(i,1,top)
	{
		int u=line[i];
		int w=-dist[u]+max_dist[u];
		if(w>=st_w)
		{
			st_w=w;
			st=u;
		}
		ll[u]=st;
	}
	for(i=top;i>=1;--i)
	{
		int u=line[i];
		int w=dist[u]+max_dist[u];
		if(w>=st_w)
		{
			st_w=w;
			st=u;
		}
		rr[u]=st;
	}
	for(i=1;i<=n;++i)
		if(lab[i])
		{
			int p=in[i];
			int wl=dist[p]-dist[ll[p]]+max_dist[ll[p]];
			int wr=-dist[p]+dist[rr[p]]+max_dist[rr[p]];
			if(wl>wr)
				delta[ fa[ ll[p] ] ]--;
			else if(wl<wr)
			{
				delta[p]--;
				delta[rr[p]]++;
				delta[fa[p]]--;
			}
			else
				delta[fa[p]]--;
			delta[i]++;
		}
	for(i=n;i>=1;--i)
	{
		int u=que[i];
		ans[u]+=delta[u];
		if(fa[u])
			ans[fa[u]]+=ans[u];
	}
	int answer=0,num=0;
	REP(i,1,n)
		if(!lab[i])
		{
			if(ans[i]>answer)
			{
				answer=ans[i];
				num=1;
			}
			else if(ans[i]>=answer)
				num++;
		}
	cout<<answer<<" "<<num<<endl;
	return 0;
}
