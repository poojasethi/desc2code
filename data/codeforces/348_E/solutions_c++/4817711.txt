#include <cstdio>
#include <cstdlib>
#include <algorithm>
#define dmp (A[c[x]] + e[x])
#define chet(x, y, z) if (x == Am)  a += z, n ^= y;  else  if (x == Bm)  b += z, m ^= y;
#define solve(t) 	if (a == 1 &&  Am > 0)  {			\
		if (d == Am)  res[z] += t;									\
		else  mark[n] += t;													\
	}																							\
	else  if (!a  &&  b == 1  &&  Bm > 0)  {			\
		if (d == Bm)  res[z] += t;									\
		else  mark[m] += t;													\
	}
const int inf = (int) 1e9 + 10;
using namespace std;

typedef int arr32[200010];

arr32 A, B, c, t, next, g, e, tot, res, mark;
int n, m, x, y, z, ap, ans;

void link(int x, int y, int t)
{
	c[++ap] = y, next[ap] = g[x], g[x] = ap;  e[ap] = t;
	c[++ap] = x, next[ap] = g[y], g[y] = ap;  e[ap] = t;
}
void dfs(int z, int f)
{
	A[z] = B[z] = -inf;
	if (t[z])  A[z] = 0;
	
	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)
			if (dfs(c[x], z), dmp > A[z])  B[z] = A[z], A[z] = dmp;
			else  B[z] = max(B[z], dmp);
}
void dfs(int z, int f, int d)
{
  if (z == 5)
    z = 5;   
	int a = 0, b = 0, n = 0, m = 0;
	int Am, Bm;
	if (d > A[z])  Am = d, Bm = A[z];
	else  Am = A[z], Bm = max(B[z], d);
	
	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)  {
			chet(dmp, c[x], 1);
			
			if (A[z] != dmp)  dfs(c[x], z, max(d, A[z]) + e[x]);
			else  dfs(c[x], z, max(d, B[z]) + e[x]);
		}

	chet(d, 0, 1);

	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)  {
			tot[z] += res[c[x]];
			chet(dmp, c[x], -1);

			solve(res[c[x]]);
			
			chet(dmp, c[x], 1);
		}

	if (t[z])  solve(1); 
}
void calc(int z, int f)
{
	tot[z] += mark[z];
	if (!t[z])  ans = max(ans, tot[z]);

	int h = A[z] != B[z] ? mark[z] : 0;
	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)
			if (dmp == A[z])  mark[c[x]] += h, calc(c[x], z);
			else  calc(c[x], z);
}
int main()
{
	//freopen("pilgrims.in", "r", stdin);
	//freopen("pilgrims.out", "w", stdout);

	scanf("%d %d", &n, &m);
	for (int i = 1; i <= m; ++i)  scanf("%d", &x), t[x] = 1;
	for (int i = 1; i < n; ++i)  {
		scanf("%d %d %d", &x, &y, &z);
		link(x, y, z);
	}

	dfs(1, 0);
	dfs(1, 0, -inf);
	calc(1, 0);

	printf("%d ", ans);
	if (ans == 0)  {  printf("1");  exit(0);  }
	int cnt = 0;
	for (int i = 1; i <= n; ++i)
		if (!t[i]  &&  tot[i] == ans)  ++cnt;

	printf("%d", cnt);
}
