#include <cstdio>
#include <cstdlib>
#include <algorithm>
#define dta (A[c[x]] + e[x])
#define Red 
const int inf = (int) 2e9 + 10;
using namespace std;

typedef int arr32[200010];

arr32 c, h, tot, next, g, t, B, A, e, ret;
int n, m, x, y, z, ap, nt, ans;

void link(int x, int y, int z)
{
	c[++ap] = y, next[ap] = g[x], g[x] = ap;  e[ap] = z;
}
void dfs(int z, int f)
{
	B[z] = -inf;
	if (t[z])  A[z] = 0;  else  A[z] = -inf;
	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)
			if (dfs(c[x], z), A[z] < dta)  B[z] = A[z], A[z] = dta;
			else  B[z] = max(B[z], dta);
}
void Reduce(int v, int u, int d, int At, int Bt, int Af, int Bf, int Ree, int &Ret)
{
	if (v == 1)  {
		if (d != At)  tot[Af] += Ree, Ret -= Ree;
	}
	else  if (v == 0)  {
		if (u == 1)  {
			if (d != Bt)  tot[Bf] += Ree, Ret -= Ree;
		}
		else  if (u > 1)  Ret -= Ree;
	}
	else  Ret -= Ree;
}
int dfs(int z, int f, int d)
{
	int Ret = 0;
	int At, Bt, u = 0, v = 0, Af = 0, Bf = 0;
	if (A[z] > d)  At = A[z], Bt = max(B[z], d);
	else  At = d, Bt = A[z];
	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)  {
			if (dta == At)  ++ v, Af ^= c[x];  else
			if (dta == Bt)  ++ u, Bf ^= c[x];
			if (dta == A[z])  Ret += dfs(c[x], z, max(d, B[z]) + e[x]);
			else  Ret += dfs(c[x], z, max(d, A[z]) + e[x]);
		}

	if (d == At)  ++v;  else  u += d == Bt;
	if (t[z])  ++ Ret;
	h[z] += Ret;
	if (z == 1)
		z = 1;
	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)  {
			if (dta == At)  -- v, Af ^= c[x];  else
			if (dta == Bt)  -- u, Bf ^= c[x];
			Reduce(v, u, d, At, Bt, Af, Bf, ret[c[x]], Ret);
			if (dta == At)  ++ v, Af ^= c[x];  else
			if (dta == Bt)  ++ u, Bf ^= c[x];
		}

	if (t[z])  Reduce(v, u, d, At, Bt, Af, Bf, 1, Ret);
	return ret[z] = Ret;
}
void calc(int z, int f)
{
	h[z] += tot[z];
	if (!t[z])
		if (h[z] > nt)  nt = h[z], ans = 1;
		else  ans += h[z] == nt;

	if (A[z] == B[z])  tot[z] = 0;
	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)
			if (dta == A[z])  tot[c[x]] += tot[z], calc(c[x], z);
			else  calc(c[x], z);
}
int main()
{
	//freopen("E.in", "r", stdin);
	//freopen("E.out", "w", stdout);

	scanf("%d %d", &n, &m);
	for (int i = 1; i <= m; ++i)
		scanf("%d", &x), t[x] = 1;

	for (int i = 1; i < n; ++i)
		scanf("%d %d %d", &x, &y, &z), link(x, y, z), link(y, x, z);

	dfs(1, 0);
	dfs(1, 0, -inf);
	calc(1, 0);

	if (nt == 0)  printf("0 1");
	else  printf("%d %d", nt, ans);
}
