#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
const int maxn=100010;
const int INF=maxn*4000;
const int Step=17;
int n,m;
bool black[maxn];
int first[maxn],next[maxn<<1],v[maxn<<1],w[maxn<<1],edge=0;
int down[maxn][3],d_bh[maxn][3],split[maxn];
int to[maxn];
int dp[maxn][Step+2],dep[maxn];
int add[maxn],ans[maxn];
int num[maxn][2];

void add_edge(int a,int b,int c){
	next[edge]=first[a];
	v[edge]=b;
	w[edge]=c;
	first[a]=edge++;
}

void dfs1(int x,int fa){// 返回最长链们的LCA split[x]表示从x往下的最长链们的LCA
	down[x][0]=-INF;down[x][1]=-INF-1;down[x][2]=-INF-2;split[x]=-1;
	if(black[x]) down[x][0]=0,split[x]=x;
	for(int e=first[x];e!=-1;e=next[e]){
		if(v[e]==fa) continue;
		dfs1(v[e],x);
		int t=w[e]+down[v[e]][0];
		if(t>=down[x][0]) {
			down[x][2]=down[x][1];down[x][1]=down[x][0];d_bh[x][2]=d_bh[x][1];d_bh[x][1]=d_bh[x][0];
			down[x][0]=t;d_bh[x][0]=v[e];
		}
		else if(t>=down[x][1]){
			down[x][2]=down[x][1];d_bh[x][2]=d_bh[x][1];down[x][1]=t;d_bh[x][1]=v[e];
		}
		else if(t>down[x][2])
			down[x][2]=t,d_bh[x][2]=v[e];
	}
	if(down[x][0]>0)
	split[x]=down[x][0]==down[x][1]?x:split[d_bh[x][0]];
	//printf("x:%d down0:%d down1:%d down2:%d split:%d \n",x,down[x][0],down[x][1],down[x][2],split[x]);
}

void dfs2(int x,int fa,int up,int us){
	//printf("x:%d up:%d us:%d\n",x,up,us);
	dp[x][0]=fa;dep[x]=dep[fa]+1;
	if(black[x]){
		if(down[x][0]==up) to[x]=x;
		else if(down[x][0]<up) to[x]=us;
		else to[x]=split[x];
	}
	for(int e=first[x];e!=-1;e=next[e]){
		if(v[e]==fa) continue;
		int len=up,p=us;
		if(v[e]==d_bh[x][0]){
			if(down[x][1]==len) p=x;
			else if(down[x][1]>len){
				len=down[x][1];p=down[x][1]==down[x][2]?x:split[d_bh[x][1]];
			}
		}
		else{
			if(down[x][0]==len) p=x;
			else if(down[x][0]>len)
				len=down[x][0],p=down[x][0]==down[x][v[e]==d_bh[x][1]?2:1]?x:split[d_bh[x][0]];
		}
		dfs2(v[e],x,len+w[e],p);
	}
}

int LCA(int a,int b){
	if(dep[a]<dep[b]) swap(a,b);
	int t=dep[a]-dep[b];
	for(int j=Step;j>=0;j--) if(t&(1<<j)) a=dp[a][j];
	int j=Step;
	while(a!=b){
		while(j&&dp[a][j]==dp[b][j]) j--;
		a=dp[a][j];b=dp[b][j];
	}
	return a;
}

int dfs(int x,int fa){
	int num=0;
	for(int e=first[x];e!=-1;e=next[e])
		if(v[e]!=fa) num+=dfs(v[e],x);
	num+=add[x];
	return ans[x]=num;
}

int main(){
	int x,a,b,c;
	scanf("%d%d",&n,&m);
	memset(first,-1,sizeof(first));
	for(int i=1;i<=m;i++) scanf("%d",&x),black[x]=1;
	for(int i=1;i<n;i++) scanf("%d%d%d",&a,&b,&c),add_edge(a,b,c),add_edge(b,a,c);
	dfs1(1,-1);
	dep[0]=0;dfs2(1,0,-INF,-1);
	for(int j=1;j<=Step;j++)
		for(int i=1;i<=n;i++)
			dp[i][j]=dp[dp[i][j-1]][j-1];
	for(int i=1;i<=n;i++)
		if(black[i]){
				//printf("to[%d]:%d\n",i,to[i]);
			add[i]++;add[to[i]]++;int t=LCA(i,to[i]);add[t]--;add[dp[t][0]]--;
		//	printf("to[%d]:%d\n",i,to[i]);
		}
	dfs(1,0);
	int big=-1,res=0;
	for(int i=1;i<=n;i++) 
		if(!black[i]) {if(ans[i]>big) big=ans[i],res=1;else if(ans[i]==big) res++;}
	printf("%d %d\n",big,res);
	return 0;
}
