#include <bits/stdc++.h>
#define L 305
using namespace std ;
int path[L][L],next[L][L],leaves,X[L],indi,ans[5*L] ;
void dfs(int x,int p,int N)
{
    bool isleaf = true ;
    for(int i=1;i<=N;++i) if(i!=p && i!=x && path[x][i] == 1) dfs(i,x,N),isleaf=false ;
    if(isleaf) ++leaves ;
}
void getpath(int u,int v)
{
    if(!next[u][v]) return ;
    getpath(u,next[u][v]) ; ans[indi++]=next[u][v] ; getpath(next[u][v],v) ;
}
int main()
{
    int u,v ;
    int N ; scanf("%d",&N) ;
    for(int i=1;i<=N;++i) for(int j=1;j<=N;++j) path[i][j]=1e6 ;
    for(int i=1;i<=N;++i) path[i][i]=0 ;
    for(int i=1;i<N;++i) scanf("%d %d",&u,&v),path[u][v]=path[v][u]=1 ;
    dfs(1,-1,N) ;
    for(int i=1;i<=N;++i)for(u=1;u<=N;++u)for(v=1;v<=N;++v) if(path[u][i]+path[i][v] < path[u][v])
    {
        path[u][v] = path[u][i] + path[i][v] ;
        next[u][v] = i ;
    }
    for(int i=1;i<=leaves;++i)  scanf("%d",X+i) ; X[0]=1 ; X[++leaves]=1 ;
    ans[indi++]=1 ;
    for(int i=0;i<leaves;++i)
    { getpath(X[i],X[i+1]) ; ans[indi++]=X[i+1] ; }
    if(indi == 2*N -1) for(int i=0;i<indi;++i) printf("%d ",ans[i]) ;
    else printf("-1") ;
    printf("\n") ;
    return 0 ;
}
