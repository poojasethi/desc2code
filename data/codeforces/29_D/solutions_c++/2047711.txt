#include<iostream>
#include<vector>
#include<string>
using namespace std;
const int MAX_N = 310;
int vis[MAX_N][MAX_N];
vector<int> path, p, G[MAX_N];
bool e[MAX_N][MAX_N];
bool dfs(int n, int par, int x)
{
  if (n == x) {
    return true;
  }
  for (int i = 0; i < G[n].size(); i++) {
    if (G[n][i] == par) continue;
    if (dfs(G[n][i], n, x)) {
      p.push_back(G[n][i]);
      vis[n][G[n][i]] = ++vis[G[n][i]][n];
      return true;
    }
  }
  return false;
}
vector<int> leaves;
int main()
{
  int n;
  cin>>n;
  for (int i = 0; i < n-1; i++) {
    int a, b;
    cin>>a>>b;
    G[a].push_back(b);
    G[b].push_back(a);
    e[a][b] = e[b][a] = true;
  }
  int l;
  while (cin>>l) leaves.push_back(l);
  int last = 1;
  leaves.push_back(1);
  path.push_back(1);
  for (int i = 0; i < leaves.size(); i++) {
    p.clear();
    dfs(last, -1, leaves[i]);
    for (int j = p.size()-1; j >= 0; j--)  path.push_back(p[j]);
    last = leaves[i];
  }
  bool ok = true;
  for (int i = 1; i <= n; i++) for (int j = 1; j <= n; j++) if (e[i][j] && vis[i][j] != 2) ok = false;
  if (ok) {
    for (int i = 0; i < path.size(); i++)
      cout<<path[i]<<" ";cout<<endl;
  } else
    cout<<"-1"<<endl;
  return 0;
}
