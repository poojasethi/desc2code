#include <cstdio>
#include <cstdlib>
const int MAX = 305;
int N;
bool G[MAX][MAX], T[MAX][MAX];
int leaf[MAX], L;
int res[3*MAX], R;
int D[MAX];

void prec(int u, int p)
{
	for (int v = 1; v <= N; v++)
		if (G[u][v] && v != p)
		{
			prec(v, u);
			for (int i = 1; i <= L; i++)
				if (T[v][leaf[i]])
					T[u][leaf[i]] = true;
		}
}

void go(int u, int p, int& r)
{
	//printf("u = %d, leaf = %d\n", u, leaf[r]);
	res[++R] = u;
	if (u == leaf[r])
	{
		r++;
		return;
	}
	for (int i = 1; i < D[u]; i++)
	{
		bool found = false;
		for (int v = 1; v <= N; v++)
			if (G[u][v] && v != p && T[v][leaf[r]])
			{
				//printf("  edge %d -> %d\n", u, v);
				go(v, u, r);
				//printf("u = %d, leaf = %d\n", u, leaf[r]);
				res[++R] = u;
				found = true;
				break;
			}
		if (!found)
		{
			
			puts("-1");
			exit(0);
	
		}
	}
	
}

int main()
{
	scanf("%d", &N);
	for (int i = 1, u, v; i < N; i++)
	{
		scanf("%d%d", &u, &v);
		G[u][v] = G[v][u] = true;
		D[u]++, D[v]++;
	}
	for (int x; scanf("%d", &x) != EOF;)
	{
		leaf[++L] = x;
		T[x][x] = true;
	}
	D[1]++;
	prec(1, 0);
	int bambang = 1;
	go(1, 0, bambang);
	for (int i = 1; i <= R; i++)
		printf("%d%c", res[i], i==R ? '\n' : ' ');
}
