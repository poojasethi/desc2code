#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;

#define PB push_back
#define MK make_pair
const int maxn = 311;
int n;
vector<int> v[maxn], ans, order;
bool mark[maxn];

bool dfs(int u, int end){
	mark[u] = true;
	if(u == end){
		//ans.PB(u);
		return true;
	}
	for(int i = 0; i < v[u].size();i++)
		if(mark[v[u][i]] == false)
			if(dfs(v[u][i], end ) == true){
				ans.PB(u);
				return true;
			}
	return false;
}
				
void path(int x, int y){
	memset(mark, 0, sizeof(mark));
	dfs(y, x);
}

int main(){
	cin >> n;
	for(int i = 0; i < n-1; i++){
		int x, y;
		cin >> x >> y;
		v[x].PB(y);
		v[y].PB(x);
	}
	int tmp;
	while(cin >> tmp)
		order.PB(tmp);
	
	//for(int i = 0; i < order.size(); i++)
	//	cerr << order[i] << endl;
		
	path(1, order[0]);
	for(int i = 0; i < order.size()-1; i++)
		path(order[i], order[i+1]);
	path(order[order.size()-1] , 1);
	
	//for(int i = 0; i < ans.size(); i++)
	//	cerr << ans[i] << " ";
	
	if(ans.size() != 2*n-2){
		cout << "-1" << endl;
		return 0;
	}
	cout << "1 ";
	for(int i = 0; i < ans.size(); i++)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
} 
