#include <iostream>
#include <vector>

using namespace std;

const int MAX_N = 300 + 10;
vector <int> graph[MAX_N];
int t[MAX_N], parent[MAX_N];
vector <int> ans;
bool mark[MAX_N];

void DFS(int v, int p)
{
	parent[v] = p;
	mark[v] = true;
	for (int i = 0; i < graph[v].size(); i++)
		if (!mark[graph[v][i]])
			DFS(graph[v][i], v);
}

int main()
{
	int n;
	cin >> n;
	for (int i = 1; i < n; i++)
	{
		int a, b;
		cin >> a >> b;
		a--;
		b--;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}
	int k = 0;
	for (int i = 1; i < n; i++)
		if (graph[i].size() == 1)
			k++;
	for (int i = 0; i < k; i++)
	{
		cin >> t[i];
		t[i]--;
	}
	/*t[k] = 0;
	k++;*/
	ans.push_back(1);
	int st = 0, en = t[0];
	for (int g = 0; g <= k; g++)
	{
		for (int i = 0; i < n; i++)
			mark[i] = false;
		DFS(st, -1);
		vector <int> temp;
		int x = en;
		while (x != -1)
		{
			temp.push_back(x + 1);
			x = parent[x];
		}
		for (int i = temp.size() - 2; i >= 0; i--)
			ans.push_back(temp[i]);
		st = en;
		en = t[g + 1];
	}
	if (ans.size() != 2 * n - 1)
	{
		cout << "-1\n";
		return 0;
	}
	for (int i = 0; i < 2 * n - 1; i++)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
}