#include <bits/stdc++.h>

using namespace std;

#define MAX 305

list<int> graph[MAX];
int deg[MAX];
bool flag;
vector<int> ans;

void dfs(int v, int p, int dest){
    if(v == dest){
        flag = true;
        return;
    }

    list<int>::iterator i;
    for(i = graph[v].begin() ; i != graph[v].end() ; i++){
        if(flag)
            break;
        if(*i != p){
            dfs(*i, v, dest);
        }
    }

    if(flag){
        ans.push_back(v);
    }
}

int main(){
    int n, u, v;
    cin>>n;

    for(int i=0 ; i<n-1 ; i++){
        cin>>u>>v;

        graph[u].push_back(v);
        graph[v].push_back(u);
    
        deg[u]++, deg[v]++;
    }

    int count = 0;
    for(int i=2 ; i<=n ; i++){
        if(deg[i] == 1)
            count++;
    }   

    vector<int> order;
    order.push_back(1);
    for(int i=0 ; i<count ; i++){
        cin>>u;
        order.push_back(u);
    }
    order.push_back(1);
    ans.push_back(1);

    for(int i=0 ; i<order.size()-1 ; i++){
        flag = false;
        dfs(order[i+1], -1, order[i]);
    }

    if(ans.size() != 2*n-1){
        cout<<-1<<endl;
    } else {
        for(int i=0 ; i<ans.size() ; i++)
            cout<<ans[i]<<" ";
    }

    return 0;
}