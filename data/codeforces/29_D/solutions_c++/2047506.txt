// Codeforces 29D
#include <cstdio>
#include <vector>
using namespace std;

vector<int> adj[305];
int ps[305];
int leaves=0;

void make_tree(int n, int p) {
    ps[n]=p;
    for(int i=0; i<adj[n].size(); i++) {
        if(adj[n][i]!=p) make_tree(adj[n][i], n);
    }
    if(adj[n].size()==1 && n!=0) leaves++;
}

int main() {
    int n; scanf("%d", &n);
    for(int i=1; i<n; i++) {
        int a, b; scanf("%d %d", &a, &b);
        a--; b--;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    make_tree(0, -1);
    vector<int> route;
    for(int i=0; i<leaves; i++) {
        vector<int> tr;
        int cur; scanf("%d", &cur);
        cur--;
        for(; cur!=0; cur=ps[cur]) {
            tr.push_back(cur);
        }
        tr.push_back(0);
        for(int i=tr.size()-1; i>=0; i--) {
            if(route.size()>1 && i>1 && route.back()==tr[i] && route[route.size()-2]==tr[i-1]) route.pop_back();
            else if(route.size()>0 && route.back()==tr[i]) continue;
            else route.push_back(tr[i]);
        }
        for(int i=1; i<tr.size(); i++) {
            route.push_back(tr[i]);
        }
    }
    if(route.size()==2*n-1) {
        for(int i=0; i<route.size(); i++) {
            printf("%d ", route[i]+1);
        }
    } else printf("-1\n");
}
