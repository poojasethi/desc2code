from math import *
from Queue import *


nMax = 310

def bfs(a,b):
    par = [0 for i in range(nMax)]
    marked = [b]
    Q = [b]
    while len(Q) > 0:
        v = Q.pop()
        for n in nbr[v]:
            if n not in marked:
                marked.append(n)
                Q.append(n)
                par[n] = v
    v = a
    l = []
    while par[v] > 0:
        l.append(v)
        v = par[v]
    l.append(v)
    return l


n = int(raw_input())
nbr = [[] for i in range(n+1)]
for i in range(n-1):
    l = map(int, raw_input().split())
    nbr[l[0]].append(l[1])
    nbr[l[1]].append(l[0])
l = map(int, raw_input().split())
ver = [1] + l + [1]
path = []
for i in range(len(ver)-1):
    path += bfs(ver[i], ver[i+1])[:-1]
path += [1]
if len(path) == 2*n-1:
    s = ''
    for p in path:
        s += str(p) + ' '
    print(s[:-1])
else:
    print(-1)
