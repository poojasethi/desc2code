#include <cmath>
#include <cstdio>
#include <cstring>
#include <algorithm>
typedef long long LL;
using namespace std;
const int maxn=100010;
inline void readchar(char &ch) {while ((ch=getchar())==' ' || ch=='\n');}
inline void read(int &x) {char ch;while ((ch=getchar())<'0' || ch>'9');x=ch-'0';while ((ch=getchar())<='9' && ch>='0') x=x*10+ch-'0';}

struct Skill {int v,id;}a[maxn];
bool cmp1(const Skill &a,const Skill &b) {return a.v<b.v;}
bool cmp2(const Skill &a,const Skill &b) {return a.id<b.id;}

LL suml[maxn],sumr[maxn];
int n,A;
LL cf,cm,ans,ansi,ansm;
LL m;

int main()
{
	scanf("%d%d%I64d%I64d%I64d",&n,&A,&cf,&cm,&m);
	for (int i=1;i<=n;i++) scanf("%d",&a[i].v),a[i].id=i;
	sort(a+1,a+1+n,cmp1);
	for (int i=1;i<=n;i++) suml[i]=suml[i-1]+a[i].v;
	for (int i=n;i>=1;i--) sumr[i]=sumr[i+1]+A-a[i].v;
	LL nowm=A,now=n,nowans;
	for (int i=n+1;i>=1;i--) if (m>=sumr[i])
	{
		if (now==i) now--;
		while (now && nowm*now-suml[now]>m-sumr[i])
		{
			nowm=(m-sumr[i]+suml[now])/now;
			while (now && a[now].v>nowm) now--;
		}
		nowans=nowm*cm+(n-i+1)*cf;
		if (nowans>ans) ans=nowans,ansi=n-i+1,ansm=nowm;
	}
	for (int i=n;i>=n-ansi+1;i--) m-=A-a[i].v,a[i].v=A;
	for (int i=1;a[i].v<ansm;i++) a[i].v=ansm;
	sort(a+1,a+1+n,cmp2);
	printf("%I64d\n",ans);
	for (int i=1;i<=n;i++) printf("%d ",a[i].v);
	printf("\n");
	return 0;
}
