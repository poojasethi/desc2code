#include <iostream>
#include <algorithm>
using namespace std;
const int MAX = 100005;
long long sum[MAX];
int ans[MAX], vv[MAX];
pair<int, int> val[MAX];
long long get(int l, int r, int val)
{
	return 1LL * (r - l) * val - (sum[r] - sum[l]);
}
int n, a, cf, cm;
int get_mn(int l, int r, long long m)
{
	int le = 0, ri = a + 1;
	while (ri - le > 1)
	{
		int mid = (le + ri) / 2;
		int pos = lower_bound(vv + l, vv + r, mid) - vv;
		if (get(l, pos, mid) <= m)
			le = mid;
		else
			ri = mid;
	}
	return le;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	long long m;
	cin >> n >> a >> cf >> cm >> m;
	for (int i = 0; i < n; i++)
	{
		cin >> val[i].first;
		val[i].second = i;
	}
	sort(val, val + n);
	for (int i = 1; i <= n; i++)
	{
		vv[i - 1] = val[i - 1].first;
		sum[i] = sum[i - 1] + vv[i - 1];
	}
	long long res = -1;
	int best = -1;
	for (int i = n; i >= 0; i--)
	{
		long long need = get(i, n, a);
		if (m >= need)
		{
			int x = get_mn(0, i, m - need);
			long long value = 1LL * (n - i) * cf + 1LL * x * cm;
			if (res < value)
			{
				res = value;
				best = i;
			}
		}
	}
	long long need = get(best, n, a);
	int x = get_mn(0, best, m - need);
	for (int i = 0; i < n; i++)
		ans[val[i].second] = max(val[i].first, x);
	for (int i = best; i < n; i++)
		ans[val[i].second] = a;
	cout << res << "\n";
	for (int i = 0; i < n; i++)
		cout << ans[i] << " ";
	cout << "\n";
	return 0;
}
