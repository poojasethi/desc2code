import math 
line = [int(x) for x in raw_input().split()]
number_of_lines = line[0]
house_side = line[1]

all_walls = {}
for x in range(0,number_of_lines):
	line = [int(x) for x in raw_input().split()]
	center = line[0]
	this_side = line[1]
	top_left = center - (this_side/2.0)+1000.0
	all_walls[top_left] = this_side

mySorted = sorted(all_walls, key=lambda key:key)

answers = 2
#if all_walls[mySorted[0]] - house_side >= 0:
	#answers += 1
for x in range(0,len(mySorted)-1):
	if mySorted[x+1] - mySorted[x] - all_walls[mySorted[x]] > house_side:
		answers += 2
	elif mySorted[x+1] - mySorted[x] - all_walls[mySorted[x]] == house_side:
		answers += 1
#if mySorted[len(mySorted)-1]+all_walls[mySorted[len(mySorted)-1]]+house_side <= 2000:
	#answers += 1 

print answers 
	



'''
all_walls = {}
for x in range(0,number_of_lines):
	line = [int(x) for x in raw_input().split()]
	center = line[0]
	this_side = line[1]
	top_left = int(center - (this_side/2.0))
	for x in range(top_left, top_left + this_side):
		all_walls[(x)] = 1

answers = {}
for wall in all_walls:
	if (wall + 1) not in all_walls:
		isGood = True
		for x in range (0,house_side):
			if (wall + 1 + x) in all_walls:
				isGood = False
		if isGood:
			answers[wall+1] = 1
			#print "to the right of",wall,"is good:",wall+1
	if (wall - 1) not in all_walls:
		isGood = True
		for x in range (0,house_side):
			if (wall - 1 - x) in all_walls:
				isGood = False
		if isGood:
			answers[wall-house_side] = 1
			#print "to the left of",wall,"is good:",wall-house_side
answer = 0
for ans in answers:
	answer += 1

print answer


#-2 to 2, 5 to 7
#-4, 2, 3, 7

line = [int(x) for x in raw_input().split()]
n = line[0]
k = line[1]

def isprime(n):
    n = abs(int(n))
    if n < 2:
        return False
    if n == 2: 
        return True    
    if not n & 1: 
        return False
    for x in range(3, int(n**0.5)+1, 2):
        if n % x == 0:
            return False
    return True

thesePrimes = []
for x in range(0,n+1):
	if isprime(x):
		thesePrimes.append(x)

solutions = 0
for prime in thesePrimes:
	for iter1 in range(0,len(thesePrimes)-1):
		if prime - 1 == thesePrimes[iter1] + thesePrimes[iter1+1]:
			solutions += 1

if solutions == k or k == 0:
	print "YES"
else:
	print "NO"
'''

'''
num = math.copysign(int(raw_input()),1)


for x in range (0,100):
	num = x
	loc = 0
	jump = 1

	while loc != num:
		if loc + jump <= num:
			loc += jump
		else:
			loc -= jump
		jump+=1

	print num,":",jump-1

	#ans = (num/3)+(num/2)



line1 = [int(x) for x in raw_input().split()]
line2 = [int(x) for x in raw_input().split()]
count = line1[0]
summer = line1[1]

moves = 0
for x in range(0,count-1):
	if line2[x] >= line2[x+1]:
		moves += ((line2[x]-line2[x+1])/summer) + 1
		line2[x+1] += summer * (((line2[x]-line2[x+1])/summer) + 1)

print moves
'''