#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define sc second
#define ft first

#define FOR(i,N) for (int i=1; i<=N; i++)
#define REP(i,l,r) for (int i=l; i<=r; i++)

#define INF ~0U>>1
#define eps 1e-9

const int maxn = 200010;

struct Node
{
  long long x, L, R;
  int c;
  Node () {}
  Node (long long x, long long L, long long R, long long c) : x(x), L(L), R(R), c(c) {}
  bool operator < (const Node &a) const { return x < a.x; }
}node[maxn];
long long num[maxn], sum[maxn * 4];
int cover[maxn * 4];
void maintain (int o, int l, int r)
{
  if (cover[o]) { sum[o] = num[r] - num[l-1]; return; }
  if (l == r) { sum[o] = 0; return; }
  sum[o] = sum[o * 2] + sum[o * 2 + 1];
}

void build(int o, int l, int r)
{
  sum[o] = cover[o] = 0;
  if (l == r) return;
  int mid = l + r >>1;
  build (o * 2, l, mid);
  build (o * 2 + 1, mid + 1, r);
}

void modify (int o, int l, int r, int L, int R, int v)
{
    if (L <= l && r <= R)
    {
      cover[o] += v;
      maintain (o, l, r);
      return;
    }
    int mid = l + r >> 1;
    if (L <= mid) modify (o * 2, l, mid, L, R, v);
    if (mid < R) modify (o * 2 + 1, mid + 1, r, L, R, v);
    maintain (o, l, r);
}

int main ()
{
	int n;
	cin >> n;
	int tot = 0, N;
	map <int, int> mp;
  mp.clear();
  for(int i = 0;i < n; i ++)
  {
		int X1, Y1, X2, Y2;
    scanf ("%d%d%d%d", &X1, &Y1, &X2, &Y2);
    if (X1 > X2) swap(X1, X2);
    if (Y1 > Y2) swap(Y1, Y2);
    X2 ++; Y2 ++;
    num[tot++] = Y1;
    num[tot++] = Y2;
    node[i] = Node(X1, Y1, Y2, 1);
    node[i + n] = Node(X2, Y1, Y2, -1);
  }
  sort (num, num + tot);
  sort (node, node + tot);
  N = unique (num, num + tot) - num;
  for (int i = 0; i < N; i ++)
    mp[num[i]] = i + 1;
  num[N] = num[N - 1];
  build(1, 1, N);
  long long area = 0;
  int L, R;
  for (int i = 0; i < tot - 1; i ++)
  {
    L = mp[node[i].L];
    R = mp[node[i].R] - 1;
    modify (1, 1, N, L, R, node[i].c);
    area += sum[1] * (node[i + 1].x - node[i].x);
  }
  cout << area;
	return 0;
}
