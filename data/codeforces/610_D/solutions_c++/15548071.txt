#include <cstdio>
#include <algorithm>
#include <iostream>
using namespace std;
int n,k,tot,cnt;
struct p
{
	int x,l,r,type;
}a[210000];
int hash[810000];
int erfen(int x)
{
	int l = 1,r = tot;
	while (l < r)
	{
		int mid = (l + r)/2;
		if (hash[mid] < x) l = mid + 1;
		else r = mid; 
	}
	return l;
}
bool cmp(p q,p w)
{
	if (q.x != w.x) return q.x < w.x;
	if (q.type != w.type) return q.type < w.type;
	return q.l < w.l;
}
int f[810000];
int num[810000];
void add(int x,int y)
{
	for (;x<=tot;x+=x&(-x)) f[x]+=y;
}
int find(int x)
{
	int res = 0;
	for (;x;x-=x&(-x)) res+=f[x];
		return res;
}
int main()
{
	cin >> n;
	for (int i = 1;i <= n;i++) 
	{
		int x1,x2,y1,y2;
		scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
		if (x1 == x2) a[++cnt].l=min(y1,y2),a[cnt].r=max(y1,y2),a[cnt].x=x1,a[cnt].type=3;
		else 
		{
			cnt++;
			a[cnt].l=a[cnt].r=y1;
			a[cnt].x=min(x1,x2);a[cnt].type=1;
			cnt++;
			a[cnt].l=a[cnt].r=y1;
			a[cnt].x=max(x1,x2)+1;a[cnt].type=2;
		}
	}


	for (int i = 1;i <= cnt;i++)
		hash[++tot]=a[i].l,hash[++tot]=a[i].r,hash[++tot]=a[i].r+1;
	sort(hash+1,hash+1+tot);
	tot = unique(hash+1,hash+1+tot)-hash-1;
	for (int i = 1;i <= cnt;i++)
		a[i].l=erfen(a[i].l),a[i].r=erfen(a[i].r);

	sort(a+1,a+1+cnt,cmp);
	int l,r;
	long long ans = 0;

	for (int i = 1;i <= cnt;i++)
	{
		if (a[i].x != a[i-1].x) ans += (long long)find(tot)*((long long)a[i].x-a[i-1].x);
		if (a[i].type == 1)
		{
			if (num[a[i].l]==0) add(a[i].l,1);
			num[a[i].l]++;
		}
		if (a[i].type == 2)
		{
			num[a[i].l]--;
			if (num[a[i].l]==0) add(a[i].l,-1);
		}
		if (a[i].type == 3)
		{
			if (a[i].x!=a[i-1].x||a[i].type!=a[i-1].type) l=a[i].l,r=a[i].r;
			else if (a[i].r <= r) continue;
			else if (a[i].l > r) l = a[i].l,r = a[i].r;
			else if (a[i].l <=r) l = r + 1,r = a[i].r;
			ans += (long long) hash[r]-hash[l]+1-((long long)find(r)-find(l-1));
		}
	}
	cout << ans <<endl;
}
	  		 	 		      		 		 	 	 	 	 	