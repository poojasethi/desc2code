#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<vector>
using namespace std;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
const long long MAXN=200010;
struct line{
    long long h,l,r;
    long long f;
    line(){}
    line(long long a,long long b,long long c,long long d):h(a),l(b),r(c),f(d){}
}seg[MAXN];
struct Tree{
    long long len;
    long long cover;
}sum[MAXN*4]={{0,0}};
long long xs[MAXN];
long long linecnt,xcnt;
inline bool cmp(line a,line b){
    return a.h<b.h;
}
void addline(long long x1,long long y1,long long x2,long long y2){
    if(x1>x2)swap(x1,x2);
    if(y1>y2)swap(y1,y2);
    y1--;x1--;
    xs[++linecnt]=x1;seg[linecnt]=line(y1,x1,x2,1);
    xs[++linecnt]=x2;seg[linecnt]=line(y2,x1,x2,-1);
}
long long Search(long long k,long long l,long long r){
    while(l<=r){
        long long m=(l+r)>>1;
        if(xs[m]==k)return m;
        if(xs[m]>k)r=m-1;
        else l=m+1;
    }
    return l;
}
inline void pushup(long long rt,long long l,long long r){
    if(sum[rt].cover)sum[rt].len=xs[r+1]-xs[l];
    else if(l==r)sum[rt].len=0;
    else sum[rt].len=sum[rt<<1].len+sum[rt<<1|1].len;
}
void update(long long L,long long R,long long c,long long l,long long r,long long rt){
    if(L<=l&&r<=R){
        sum[rt].cover+=c;
        pushup(rt,l,r);
        return;
    }
    long long m=(l+r)>>1;
    if(L<=m)update(L,R,c,lson);
    if(R>m)update(L,R,c,rson);
    pushup(rt,l,r);
}
int main(){
//    freopen("D://input.txt","r",stdin);
    long long n;scanf("%I64d",&n);
    linecnt=xcnt=0;long long i;
    while(n--){
        long long xx[2],yy[2];
        scanf("%I64d%I64d%I64d%I64d",&xx[0],&yy[0],&xx[1],&yy[1]);
        addline(xx[0],yy[0],xx[1],yy[1]);
    }
    sort(seg+1,seg+linecnt+1,cmp);sort(xs+1,xs+linecnt+1);
    for(i=1;i<=linecnt;i++){
        if(xs[i+1]!=xs[i])
            xs[++xcnt]=xs[i];
    }
    long long area=0;
    for(i=1;i<linecnt;i++){
        long long L=Search(seg[i].l,1,xcnt),R=Search(seg[i].r,1,xcnt)-1;
        if(L<=R){
            update(L,R,seg[i].f,1,xcnt,1);
            area+=sum[1].len*(seg[i+1].h-seg[i].h);
        }
    }
    printf("%I64d\n",area);
    return 0;
}
