#include<cstdio>
#include<iostream>
#include<algorithm>
#define LL long long
using namespace std;
 
struct zuo
{
    LL l,r;
    zuo *ls,*rs;
    LL s1,s2;
}*root;
struct lin
{
    LL x,u,d;
    bool b;
}line[1000001];
LL n,i,j,x1,y1,y2,x2,y[1000001],len;
long long ans;
 
bool cmp(lin aa,lin bb)
{
    return (aa.x<bb.x);
}
 
bool cmp2(LL a,LL b)
{
    return (a<b);
}
 
void build(long long l,long long r,zuo *&orz)
{
    orz=new zuo;orz->l=l;orz->r=r;
    orz->s1=0;orz->s2=0;
    if (l==r) return;
    build(l,(l+r)>>1,orz->ls);
    build(((l+r)>>1)+1,r,orz->rs);
}
 
void add(LL l,LL r,zuo *&orz)
{
    if (orz->l==l&&orz->r==r) 
    {
        if (line[i].b)
        orz->s1++;
        else orz->s1--;
        if (orz->s1>0) {orz->s2=y[r+1]-y[l];}
        else
        {
            if (l==r) orz->s2=0;
            else
            {
                orz->s2=orz->ls->s2+orz->rs->s2;
            }
        }
        return;
    }
    if (l<=((orz->l+orz->r)>>1)) add(l,min(((orz->l+orz->r)>>1),r),orz->ls);
    if (r>=((orz->l+orz->r)>>1)+1) add(max(l,((orz->l+orz->r)>>1)+1),r,orz->rs);
    if (orz->s1<=0)
    {
        orz->s2=orz->ls->s2+orz->rs->s2;
    }
}
 
int main()
{
    scanf("%I64d",&n);
    for (i=1;i<=n;i++)
    {
        LL lx1,lx2,ly1,ly2;
        scanf("%I64d%I64d%I64d%I64d",&lx1,&ly1,&lx2,&ly2);
        x1=min(lx1,lx2);x2=max(lx1,lx2);y1=min(ly1,ly2);y2=max(ly1,ly2);
        x1+=2000000000;y1+=2000000000;x2+=2000000000+1,y2+=2000000000+1;
        line[2*i-1].x=x1;
        line[2*i].x=x2;
        line[2*i-1].b=1;
        line[2*i].b=0;
        line[2*i].u=y1;
        line[2*i-1].u=y1;
        line[2*i].d=y2;
        line[2*i-1].d=y2;
        y[2*i-1]=y1;
        y[2*i]=y2;
    }
    sort(y+1,y+2*n+1,cmp2);
    sort(line+1,line+2*n+1,cmp);
    len=unique(y+1,y+2*n+1)-(y+1);
    for (i=1;i<=2*n;i++)
    {
        line[i].u=lower_bound(y+1,y+len+1,line[i].u)-y;
        line[i].d=lower_bound(y+1,y+len+1,line[i].d)-y;
    }
    build(1,len-1,root);
    line[0].x=line[1].x;
    for (i=1;i<=2*n;i++)
    {
        add(line[i].u,line[i].d-1,root);
        ans+=(line[i+1].x-line[i].x)*(root->s2);
    }
    cout<<ans;
    return 0;
}