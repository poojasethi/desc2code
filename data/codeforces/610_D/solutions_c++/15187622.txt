#include<cstdio>
#include<cstring>
#include<algorithm>
#include<map>
#include<queue>
#include<cstdlib>
#include<cctype>
using namespace std;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
const int maxn=100010;
struct LS{
    long long h,l,r;
    int f;
    LS(){}
    LS(long long a,long long b,long long c,int d):h(a),l(b),r(c),f(d){}
}line[maxn<<1];
struct node{
    int cover;
    long long len;
}sum[maxn<<3];
int n,lcnt=0,xcnt=0;
long long xs[maxn<<1];
inline bool cmp(LS a,LS b){return a.h<b.h;}
int Search(long long k,int l,int r){
    while(l<=r){
        int m=(l+r)>>1;
        if(xs[m]==k)return m;
        if(xs[m]>k)r=m-1;
        else l=m+1;
    }
    return l;
}
inline void pushup(int rt,int l,int r){
    if(sum[rt].cover){
        sum[rt].len=xs[r+1]-xs[l];
    }
    else if(l==r)sum[rt].len=0;
    else sum[rt].len=sum[rt<<1].len+sum[rt<<1|1].len;
}
void update(int L,int R,int v,int l,int r,int rt){
    if(L<=l&&r<=R){
        sum[rt].cover+=v;
        pushup(rt,l,r);
        return;
    }
    int m=(l+r)>>1;
    if(L<=m)update(L,R,v,lson);
    if(R>m)update(L,R,v,rson);
    pushup(rt,l,r);
}
int main(){
//    freopen("D://input.txt","r",stdin);
    scanf("%d",&n);
    while(n--){
        long long x[2],y[2];
        scanf("%I64d%I64d%I64d%I64d",&x[0],&y[0],&x[1],&y[1]);
        if(x[0]>x[1])swap(x[0],x[1]);
        if(y[0]>y[1])swap(y[0],y[1]);
        x[0]--;y[0]--;
        xs[lcnt]=x[0];line[lcnt++]=LS(y[0],x[0],x[1],1);
        xs[lcnt]=x[1];line[lcnt++]=LS(y[1],x[0],x[1],-1);
    }
    sort(xs,xs+lcnt);sort(line,line+lcnt,cmp);
    for(int i=1;i<lcnt;i++){
        if(xs[i-1]!=xs[i]){
            xs[++xcnt]=xs[i];
        }
    }
    long long area=0;
    for(int i=0;i<lcnt-1;i++){
        int L=Search(line[i].l,0,xcnt),R=Search(line[i].r,0,xcnt)-1;
        if(L<=R){
            update(L,R,line[i].f,0,xcnt,1);
            area+=sum[1].len*(line[i+1].h-line[i].h);
        }
    }
    printf("%I64d\n",area);
    return 0;
}
