#include<cstring>
#include<iostream>
#include<algorithm>
#include<cstdio>
#define rep(i,l,r) for (int i=l;i<=r;i++)
#define down(i,l,r) for (int i=l;i>=r;i--)
#define clr(x,y) memset(x,y,sizeof(x))
#define maxn 200500
#define ll long long
#define inf 1000000007
using namespace std;
struct data{int x,y1,y2,flag;
}q[maxn];
int a[maxn],n,tot;
ll ans,sum[maxn*3],key[maxn*3];
int read(){
	int x=0,f=1; char ch=getchar();
	while (!isdigit(ch)){if (ch=='-') f=-1; ch=getchar();}
	while (isdigit(ch)){x=x*10+ch-'0'; ch=getchar();}
	return x*f;
}
bool cmp(data a,data b){
	return a.x<b.x;
}
int find(int x){
	int l=1,r=tot;
	while (l<r){
		int mid=(l+r)/2;
		if (x==a[mid]) return mid;
		else if (x<a[mid]) r=mid-1;
		else l=mid+1;
	}
	return l;
}
void upd(int i,int l,int r){
	if (key[i]>0) sum[i]=a[r]-a[l];
	else if (r==l+1) sum[i]=0;
	else sum[i]=sum[i*2]+sum[i*2+1];
}
void insert(int i,int l,int r,int tl,int tr,int val){
	if (tl==tr) return;
	if (l==tl&&r==tr){
		key[i]+=val;
		upd(i,l,r);
		return;
	}
	int mid=(l+r)/2;
	if (tr<=mid) insert(i*2,l,mid,tl,tr,val);
	else if (tl>mid) insert(i*2+1,mid,r,tl,tr,val);
	else {insert(i*2,l,mid,tl,mid,val); insert(i*2+1,mid,r,mid,tr,val);}
	upd(i,l,r);
}
int main(){
//	freopen("in.txt","r",stdin);
	n=read();
	rep(i,1,n){
		q[2*i-1].x=read(); q[2*i-1].y1=read(); q[2*i].x=read(); q[2*i].y2=read();
		if (q[2*i-1].x>q[2*i].x) swap(q[2*i].x,q[2*i-1].x),swap(q[2*i].y2,q[2*i-1].y1);
		if (q[2*i-1].y1>q[2*i].y2) swap(q[2*i].x,q[2*i-1].x),swap(q[2*i].y2,q[2*i-1].y1);
		q[2*i-1].x--; q[2*i-1].y1--;
		q[2*i-1].y2=q[2*i].y2; q[2*i].y1=q[2*i-1].y1;
		q[2*i-1].flag=1; q[2*i].flag=-1; 
		a[2*i-1]=q[2*i-1].y1; a[2*i]=q[2*i-1].y2;
	}
	sort(a+1,a+1+2*n); 
	tot=n*2;
	rep(i,2,2*n) if (a[i]==a[i-1]) a[i-1]=inf,tot--;
	sort(a+1,a+1+2*n);
	sort(q+1,q+1+2*n,cmp);
//	for (int i=1;i<=2*n;i++) printf("%d %d %d\n",q[i].x,q[i].y1,q[i].y2);
//	for (int i=1;i<=2*n;i++) printf("%d %d %d %d %d\n",q[i].x,q[i].y1,q[i].y2,q[i].flag,find(q[i].y1),find(q[i].y2));
	insert(1,1,tot+1,find(q[1].y1),find(q[1].y2),q[1].flag);
	rep(i,2,n*2){
		ans+=sum[1]*(q[i].x-q[i-1].x);
	//	printf("%lld\n",ans);
		insert(1,1,tot+1,find(q[i].y1),find(q[i].y2),q[i].flag);
	}
	printf("%lld\n",ans);
	return 0;
}
