#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
struct data
{
    ll x1,x2,y;
    int flag;
}a[1000005];
ll hash[1000005];
ll sum[1000005];
ll col[1000005];
inline bool cp(data a,data b){return a.y<b.y;}
void pushup(int size,int l,int r)
{
    if(col[size]) sum[size]=hash[r+1]-hash[l];
    else if(l==r) sum[size]=0;
    else sum[size]=sum[size<<1]+sum[size<<1|1];
}
void update(int L,int R,int flag,int l,int r,int size)
{
    if(L<=l&&R>=r)
    {
        col[size]+=flag;
        pushup(size,l,r);
        return;
    }
    int m=(l+r)>>1;
    if(L<=m) update(L,R,flag,l,m,size<<1);
    if(R>m) update(L,R,flag,m+1,r,size<<1|1);
    pushup(size,l,r);
}
int main()
{
    int n; scanf("%d",&n); 
    int x1,y1,x2,y2;
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
        if(y1>y2) swap(y1,y2);if(x1>x2) swap(x1,x2);
        x1--;
        y1--;
        a[2*i-1].x1=a[2*i].x1=x1;
        a[2*i-1].x2=a[2*i].x2=x2;
        a[2*i-1].y=y1;a[2*i].y=y2;
        a[2*i-1].flag=1;a[2*i].flag=-1;
        hash[2*i-1]=x1;hash[2*i]=x2;
    }
    sort(a+1,a+2*n+1,cp);sort(hash+1,hash+2*n+1);
    memset(col,0,sizeof(col));
    memset(sum,0,sizeof(sum));
    long long ans=0;
    for(int i=1;i<=2*n;i++)
    {
        int l=lower_bound(hash+1,hash+2*n+1,a[i].x1)-hash;
        int r=lower_bound(hash+1,hash+2*n+1,a[i].x2)-hash-1;
        if(l<=r)update(l,r,a[i].flag,1,2*n,1);
        ans+=(ll)sum[1]*(ll)(a[i+1].y-a[i].y);
    }
    printf("%I64d\n",ans);
    return 0;
}