#include<cstdio>
#include<cstring>
#include<map>
#include<algorithm>
using namespace std;
typedef __int64 ll;
#define N 200005
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
struct Seg{
    int x,y1,y2,c;
    bool operator < (const Seg& s1)const{
        return x<s1.x;
    }
};
Seg seg[N];
map<int,int> Hash1;
int cnt,Hash2[N],len[N<<2],c[N<<2],a[N<<2],n;
void build(int l,int r,int rt){
    if(l==r){
        len[rt]=Hash2[l]-Hash2[l-1];
        return;
    }
    int m=(l+r)>>1;
    build(lson);build(rson);
    len[rt]=len[rt<<1]+len[rt<<1|1];
}
void update(int L,int R,int val,int l,int r,int rt){
    if(L<=l&&r<=R){
        c[rt]+=val;
        if(c[rt]>0) a[rt]=len[rt];
        else{
            if(l==r) a[rt]=0;
            else a[rt]=a[rt<<1]+a[rt<<1|1];
        }
        return;
    }
    int m=(l+r)>>1;
    if(L<=m) update(L,R,val,lson);
    if(m<R) update(L,R,val,rson);
    if(c[rt]>0) a[rt]=len[rt];
    else a[rt]=a[rt<<1]+a[rt<<1|1];
}
int main(){
    int x1,x2,y1,y2;ll ans;
    while(~scanf("%d",&n)){
        memset(c,0,sizeof(c));cnt=0;
        memset(a,0,sizeof(a));
        Hash1.clear();
        for(int i=0;i<n;++i){
            scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
            if(x2>=x1) ++x2;
            else ++x1;
            if(x1>x2){
                int tmp=x1;x1=x2;x2=tmp;
            }
            if(y2>=y1) ++y2;
            else ++y1;
            if(y1>y2){
                int tmp=y1;y1=y2;y2=tmp;
            }
            seg[i<<1].x=x1;seg[i<<1|1].x=x2;
            seg[i<<1].c=1;seg[i<<1|1].c=-1;
            seg[i<<1].y1=seg[i<<1|1].y1=y1;
            seg[i<<1].y2=seg[i<<1|1].y2=y2;
            Hash2[cnt++]=y1;Hash2[cnt++]=y2;
        }
        sort(seg,seg+2*n);sort(Hash2,Hash2+cnt);
        cnt=unique(Hash2,Hash2+cnt)-Hash2;
        for(int i=0;i<cnt;++i) Hash1[Hash2[i]]=i;
        build(1,cnt-1,1);ans=0;
        update(Hash1[seg[0].y1]+1,Hash1[seg[0].y2],seg[0].c,1,cnt-1,1);
        for(int i=1;i<2*n;++i){
            ans+=(ll)a[1]*(seg[i].x-seg[i-1].x);
            update(Hash1[seg[i].y1]+1,Hash1[seg[i].y2],seg[i].c,1,cnt-1,1);
        }
        printf("%I64d\n",ans);
    }
    return 0;
}
