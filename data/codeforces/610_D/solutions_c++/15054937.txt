#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;
#define lson l, m, rt << 1
#define rson m + 1, r, rt << 1 | 1
#define ll long long
const int maxn = 502000;
int cover[maxn<<2];
ll sum[maxn<<2], x[maxn];
struct seg
{
    ll l, r, h;
    int flag;
    seg() {}
    seg(ll a,ll b,ll c,int d) : l(a), r(b), h(c), flag(d) {}
    bool operator < (const seg &cmp) const
    {
        return h < cmp.h;
    }
}ss[maxn];
int bin(ll key, int len, ll x[])
{
    int l = 0, r = len - 1;
    while (l <= r)
    {
        int m = (l + r) >> 1;
        if (key == x[m]) return m;
        else if (key < x[m]) r = m - 1;
        else l = m + 1;
    }
    return -1;
}
void PushUp(int rt,int l,int r)
{
    if (cover[rt]) sum[rt] = x[r+1] - x[l];
    else if (l == r) sum[rt] = 0;
    else sum[rt] = sum[rt<<1] + sum[rt<<1|1];
}
void update(int L,int R,int f,int l,int r,int rt)
{
    if (L <= l && r <= R)
    {
        cover[rt] += f;
        PushUp(rt, l, r);
        return;
    }
    int m = (l + r) >> 1;
    if (L <= m) update(L, R, f, lson);
    if (m < R) update(L, R, f, rson);
    PushUp(rt, l, r);
}
int main()
{
    int n;
    scanf("%d", &n);
    int m = 0;
    for (int i = 0; i < n; i++)
    {
        ll x1,y1,x2,y2;
        cin >> x1 >> y1 >> x2 >> y2;
        if(x1 > x2 || y1 > y2) {
            swap(x1, x2);
            swap(y1, y2);
        }
        x1 --;
        y1 --;
        x[m] = x1;
        ss[m++] = seg(x1, x2, y1, 1);
        x[m] = x2;
        ss[m++] = seg(x1, x2, y2, -1);
    }
    sort(x, x + m);
    sort(ss, ss + m);
    int k = 1;
    for (int i = 1; i < m; i++)
        if (x[i] != x[i-1]) x[k++] = x[i];
    memset(cover, 0, sizeof(cover));
    memset(sum, 0, sizeof(sum));
    ll ret = 0;
    for (int i = 0; i < m - 1; i++)
    {
        int l = bin(ss[i].l, k, x);
        int r = bin(ss[i].r, k, x) - 1;
        if (l <= r) update(l, r, ss[i].flag, 0, k - 1, 1);
        ret += sum[1] * (ss[i+1].h - ss[i].h);
    }
    cout << ret << endl;
    return 0;
}
