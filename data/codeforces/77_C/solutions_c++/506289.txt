#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define N 100005
struct node {
  int v;
  vector<int> son;
} v[N];

long long dfs(int x, int p) {
  int mask = (p != -1);
  int n = v[x].v - mask;
  long long dist=0;
  vector<long long> sonv;
  if(n > 0) {
    int leftn=0;
    for(int i=0; i<v[x].son.size(); ++i)
      if(v[x].son[i] != p) {
        sonv.push_back(dfs(v[x].son[i], x));
        leftn += v[v[x].son[i]].v;
      }
    sort(sonv.begin(), sonv.end());
    for(int i=sonv.size(); i>0 && n>0; --i, --n, --leftn) dist += sonv[i-1]+2;
    
    dist += 2*min(n, leftn);
    n -= min(n, leftn);
  }
  v[x].v = n+mask;  
  return dist;
}
int main() {
  int n;
  scanf("%d", &n);
  for(int i=0; i<n; ++i) scanf("%d", &v[i].v);
  for(int i=1; i<n; ++i) {
    int a, b;
    scanf("%d%d", &a, &b);
    v[a-1].son.push_back(b-1);
    v[b-1].son.push_back(a-1);
  }
  int s;
  scanf("%d", &s);
  cout << dfs(s-1, -1);
  return 0;
}

