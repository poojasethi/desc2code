#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <vector>
using namespace std;
#define N 100005
typedef __int64 ll;
ll val[N],dp[N];
vector<int> e[N];
int n,vis[N];
void dfs(int u)
{
	ll s=0;
	priority_queue<ll> Q;
	while(!Q.empty()) Q.pop();
	for(int i=0; i<e[u].size(); i++)
	{
		int v = e[u][i];
		if(vis[v]) continue;
		vis[v] = 1;
		val[v]--;
		dfs(v);
		Q.push(dp[v]);
		s += val[v];
	}
	while(!Q.empty()&&val[u])
	{
		val[u]--;
		dp[u] += Q.top()+2;
		Q.pop();
	}
	ll y = min(s,val[u]);
	dp[u] += y*2;
	val[u] -= y;
}
int main()
{
	cin>>n;
	for(int i=1; i<=n; i++) cin>>val[i];
	for(int i=1; i<n; i++)
	{
		int u,v;
		cin>>u>>v;
		e[u].push_back(v);
		e[v].push_back(u);
	} 
	int rt;
	cin>>rt;
	vis[rt] = 1;
	dfs(rt);
	cout<<dp[rt]<<endl;
	return 0;
}