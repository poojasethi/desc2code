#include<stdio.h>
#include<vector>
#include<algorithm>
#include<iostream>
#include<string.h>
using namespace std;
const int N =100005;
struct node
{
	int v,next;
};
struct P{
	__int64 v;
	int left;
};
node child[N+N];
int head[N],len;
void addedge(int a,int b)
{
	child[++len].v=b;
	child[len].next=head[a];
	head[a]=len;
}
int cmp(P a,P b)
{
	return a.v>b.v;
}
int n,v[N],dp[N];
bool vis[N];
P lzs(int x)
{
	
	int i,f=0;
	__int64 r=0,s=v[x]-1,l=0;
	P j,o;
	vis[x]=false;
	vector<P>e;
	for(i=head[x];i;i=child[i].next)
		if(vis[child[i].v]&&v[child[i].v])
	{
		j=lzs(child[i].v);
		l+=j.left;
		e.push_back(j);
		f++;
	}
	sort(e.begin(),e.end(),cmp);
	for(i=0;i<v[x]-1&&i<f;i++)
	{
		r+=(e[i].v+2);
		s--;
	}
	if(s>l)
	{
		o.v=r+l*2;
		o.left=s-l;
	}
	else
	{
		o.left=0;
		o.v=r+s*2;
	}
	return o;
}
int main()
{
	int i,s,a,b;
	P res;
	memset(vis,true,sizeof(vis));
	scanf("%d",&n);
	for(i=1;i<=n;i++)scanf("%d",v+i);
	for(i=1;i<n;i++)
	{
		scanf("%d%d",&a,&b);
		addedge(a,b);
		addedge(b,a);
	}
	scanf("%d",&s);
	v[s]++;
	res=lzs(s);
	printf("%I64d\n",res.v);
}
