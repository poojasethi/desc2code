#include <cstdio>
#include <functional>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

int n, u, v, s;
int w[100000];
vector <int> e[100000];
long long dp[100000];
int left[100000];
bool visited[100000];

void gao(int k, int ww) {
	vector <long long> v;
	int sum = 0;
	for (vector <int>::const_iterator i = e[k].begin(); i != e[k].end(); ++i) {
		if (!visited[*i]) {
			visited[*i] = true;
			gao(*i, w[*i] - 1);
			v.push_back(dp[*i]);
			sum += left[*i];
		}
	}
	sort(v.begin(), v.end(), greater <long long>());
	for (int i = 0; i < (int)v.size() && ww > 0; ++i, --ww) {
		dp[k] += v[i] + 2;
	}
	if (ww > sum) {
		dp[k] += sum * 2;
		left[k] = ww - sum;
	} else {
		dp[k] += ww * 2;
		left[k] = 0;
	}
}

int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		scanf("%d", &w[i]);
	}
	for (int i = 1; i < n; ++i) {
		scanf("%d%d", &u, &v);
		--u, --v;
		e[u].push_back(v);
		e[v].push_back(u);
	}
	scanf("%d", &s);
	memset(visited, 0, sizeof(visited));
	visited[--s] = true;;
	gao(s, w[s]);
	printf("%I64d\n", dp[s]);
	return 0;
}
