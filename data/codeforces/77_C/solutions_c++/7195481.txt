#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>

using namespace std;
typedef long long ll;

int N; ll K[200000];
vector<int> v[200000];
bool visit[200000];
int s;

ll DFS(int O)
{
    ll re = 1, sp = 0;
    visit[O] = true;
    K[O]--;

    priority_queue<ll> pri;

    for(int vi = 0, vn = v[O].size(); vi < vn; vi++)
    {
        if( !visit[v[O][vi] ] )
        {
            ll _re = DFS(v[O][vi] );
            pri.push(_re);
            sp += K[v[O][vi] ];
        }
    }

    while( !pri.empty() && K[O] )
    {
        re += pri.top()+1;
        pri.pop();
        K[O]--;
    }

    re += min(K[O], sp)*2;
    K[O] -= min(K[O], sp);

    return re;
}

int main()
{
    scanf("%d", &N);

    for(int Ni = 1; Ni <= N; Ni++)
        cin>>K[Ni];

    for(int Ni = 1; Ni < N; Ni++)
    {
        int a, b;
        scanf("%d %d", &a, &b);

        v[a].push_back(b);
        v[b].push_back(a);
    }

    scanf("%d", &s);
    K[s] += 1;

    cout<<DFS(s)-1<<endl;
}
