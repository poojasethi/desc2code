//In the name of Allah
//
//
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int MN=10000*10+1000;
vector <int> list[MN];
long long deg[MN];
int n;
int s;
long long best[MN];
int remain[MN];
bool mark[MN];
void dfs(int a)
{
	cerr<<"dfs : "<<a+1<<endl;
	mark[a]=1;
	vector <long long> temp;
	long long tr=0;
	for (int i=0;i<list[a].size();i++) if (!mark[list[a][i]])
	{
		deg[list[a][i]]--;
		dfs(list[a][i]);
		temp.push_back(best[list[a][i]]);
		tr+=remain[list[a][i]];
	}
	int rm=deg[a];
	long long res=0;
	sort(temp.begin(),temp.end());
	for (int i=0;i<temp.size();i++)
	{
		if (rm==0)
			break;
		rm--;
		res+=temp[temp.size()-1-i]+2;
	}
	//cerr<<"rm = "<<rm<<" , "<<tr<<endl;
	res+=2*min((long long)rm,tr);
	rm-=min((long long)rm,tr);
	best[a]=res;
	remain[a]=rm;
	//cerr<<"best["<<a+1<<"] = "<<best[a]<<" , "<<remain[a]<<endl;
	return ;
}
int main()
{
	ios::sync_with_stdio(false);
	cin>>n;
	for (int i=0;i<n;i++)
		cin>>deg[i];
	for (int i=0;i<n-1;i++)
	{
		int a,b;
		cin>>a>>b; a--; b--;
		list[a].push_back(b);
		list[b].push_back(a);
	}
	cin>>s; s--;
	dfs(s);
	cout<<best[s]<<endl;
	return 0;
}
