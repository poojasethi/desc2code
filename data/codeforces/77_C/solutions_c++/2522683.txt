#include<iostream>
#include<vector>
#include<cstdio>
#include<algorithm>
using namespace std;
typedef long long ll;
const int maxn = 100010;
int n;
ll val[maxn];
vector<int> edge[maxn];
ll dp[maxn];
void dfs(int u,int f)
{
    ll s=0;
    vector<ll> tmp;
    for(int i=0;i<edge[u].size();i++)
    {
        int v = edge[u][i];
        if(v!=f)
        {
            val[v] -- ;
            dfs(v,u);
            tmp.push_back(dp[v]);
            s += val[v];
        }
    }
    sort(tmp.begin(),tmp.end());
    while(val[u] && tmp.size())
    {
        val[u] --;
        dp[u] += tmp.back() + 2;
        tmp.pop_back();
    }
    ll y = min( s , val[u] );
    dp[u] += y * 2;
    val[u] -= y;
}
int main()
{
    int a,b;
    cin>>n;
    for(int i=1;i<=n;i++) scanf("%I64d",&val[i]);
    for(int i=1;i<n;i++)
    {
        cin>>a>>b;
        edge[a].push_back(b);
        edge[b].push_back(a);
    }
    cin>>a;
    dfs(a,0);
    printf("%I64d\n",dp[a]);
    return 0;
}