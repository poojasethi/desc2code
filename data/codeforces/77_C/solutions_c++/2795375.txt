#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int N=1000*100+2;
long long int n,s,p[N],mrk[N],sco[N];
vector <long long int> adj[N];
void DFS(const long long int &v){
    vector <long long int> q;
    long long s=0;
    for(int i=0;i<adj[v].size();i++){
        int ver=adj[v][i];
        if(!mrk[ver]  &&  p[ver]){
            mrk[ver]++;
            sco[ver]++;
            p[ver]--;
            DFS(ver);
            q.push_back(sco[ver]+1);
            s+=p[ver];
        }
    }
    sort(q.begin(),q.end());
    for(int i=q.size()-1;i>-1  &&  p[v];i--){
        sco[v]+=q[i];
        p[v]--;
    }
    int m=min(s,p[v]);
    sco[v]+=2*m;
    p[v]-=m;
    q.clear();
}
int main(){
    ios::sync_with_stdio(false);
    int t,tt;
    cin>>n;
    for(int i=0;i<n;i++) cin>>p[i];
    for(int i=0;i<n-1;i++){
        cin>>t>>tt;
        t--;
        tt--;
        adj[t].push_back(tt);
        adj[tt].push_back(t);
    }
    cin>>s;
    s--;
    mrk[s]++;
    DFS(s);
    cout<<sco[s];
    return 0;
}