#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
#define ll __int64
const int maxn=100008;
int a[maxn];
vector<int> g[maxn];
ll dp[maxn];
int dis[maxn];
struct cmp
{
	bool operator()(const int a,const int b)
	{
		return dp[a]<dp[b];
	}
};
void dfs(int u,int fa)
{
	int v;
	priority_queue<int,vector<int>,cmp> q;
	for(int i=0;i<g[u].size();i++)
	{
		v=g[u][i];
		if(v!=fa&&a[v])	
		{
			a[v]--;
			dfs(v,u);
			q.push(v);
		}
	}
	while(!q.empty()&&a[u])
	{
		a[u]--;
		v=q.top();q.pop();
		dp[u]+=dp[v]+2;
	}
	for(int i=0;i<g[u].size();i++)
	{
		v=g[u][i];
		if(v!=fa&&a[v])
		{
			int tem=min(a[u],a[v]);
			dp[u]+=tem<<1;
			a[u]-=tem;
		}
	}
}
int main()
{
	int i,j,k,n,u,v;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
	}
	for(i=1;i<n;i++)
	{
		scanf("%d%d",&u,&v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	scanf("%d",&u);
	memset(dp,0,sizeof(dp));
	dfs(u,0);
	printf("%I64d\n",dp[u]);
	return 0;
 } 
 				 		     	   		  				 			