#include <iostream>
#include <vector>
using namespace std;

vector<int> edges[100000];
int N,M;

int d[100000];

void dfs(int i,int par,int depth)
{
	d[i] = depth;
	for(int j=0;j<edges[i].size();j++)
		if(edges[i][j]!=par)
			dfs(edges[i][j],i,depth+1);
}

int main()
{
	cin >> N >> M;
	int a,b;
	for(int i=0;i<M;i++)
	{
		cin >> a >> b;
		a--,b--;
		edges[a].push_back(b);
		edges[b].push_back(a);
	}
	dfs(0,-1,0);
	int mx = 0;
	for(int i=1;i<N;i++)
		if(d[i] > d[mx])
			mx = i;
	dfs(mx,-1,0);
	int high = 0;
	for(int i=0;i<N;i++)
		high = max(high,d[i]);
	cout << high << '\n';
}