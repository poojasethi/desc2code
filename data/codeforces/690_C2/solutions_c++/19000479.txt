#include <iostream>
#include<cmath>
#include<vector>
#include<cstring>
using namespace std;

const int N = 100000;
vector<int> G[N + 5];
bool vst[N + 5];
int dist[N + 5];

void dfs(int s)
{
	vst[s] = true;
	for (int i = 0; i < G[s].size(); i++)
	{
		int u = G[s][i];
		if (vst[u]) continue;
		dist[u] = dist[s] + 1;
		dfs(u);
	}
}

int main() {

	int n, m;
	cin >> n >> m;

	while(m-->0)
	{
		int a, b;
		cin >> a >> b;
		G[a].push_back(b);
		G[b].push_back(a);
	}
	dist[1] = 0;
	dfs(1);
	int mxi = -1;
	for (int i = 1; i <= n; i++)
	{
		if (dist[mxi] < dist[i]) mxi = i;
	}
	memset(dist, 0, sizeof(dist));
	memset(vst, 0, sizeof(vst));
	dfs(mxi);
	for (int i = 1; i <= n; i++)
	{
		if (dist[mxi] < dist[i]) mxi = i;
	}
	cout << dist[mxi] << "\n";


	return 0;
}
