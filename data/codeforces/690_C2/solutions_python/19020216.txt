#include <bits/stdc++.h>
using namespace std;

int n, m;

vector<int> g[123456];
int dis[123456], ds[123456];

void dfs(int u, int f, int d) {
  dis[u] = d;
  for(int i = 0; i < g[u].size(); i++) {
    if(g[u][i]== f) continue;
    dfs(g[u][i], u, d + 1);
  }
}

void dfsk(int u, int f, int d) {
  ds[u] = d;
  for(int i = 0; i < g[u].size(); i++) {
    if(g[u][i] == f) continue;
    dfsk(g[u][i], u, d + 1);
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin >> n >> m;
  for(int i = 0; i < m; i++) {
    int a, b;
    cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  dfs(1, -1, 0);
  int s = max_element(dis + 1, dis + n + 1) - dis;
  dfsk(s, -1, 0);
  cout << *max_element(ds + 1, ds + 1 + n) << endl;
  return 0;
}
