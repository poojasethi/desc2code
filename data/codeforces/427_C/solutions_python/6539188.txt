import sys

#sys.stdin = open('inputfile.txt')

def solve():
    """def FindRings():
        S = []
        v = set(range(1,n+1))
        visited = set()
        
        while len(v) > 0:
            vertex = v.pop()
            Queue = [vertex]
            while len(Queue) > 0:
                vertex = Queue.pop()
                visited.add(vertex)
                k = 0
                for i in Graph.get(vertex, []):
                    if i not in visited:
                        k += 1
                        Queue.append(i)
                if k > 0:
                    Queue.insert(-k, vertex)
                else:
                    S.append(vertex)
                    if vertex in v:
                        v.remove(vertex)
        Answer = []
        allvisited = set()
        while len(S) > 0:
            vertex = S.pop()
            if vertex in allvisited:
                continue
            visited = set()
            Queue = [vertex]
            while len(Queue) > 0:
                vertex = Queue.pop(0)
                for i in RGraph.get(vertex, []):
                    if i not in visited and i not in allvisited:
                        Queue.append(i)
                if vertex not in allvisited:
                    visited.add(vertex)
                    allvisited.add(vertex)
                
            Answer.append(visited)
        
        return Answer"""
                    
    def FindRings():
        preorder={}
        lowlink={}
        scc_found={}
        scc_queue = []
        scc_list=[]
        i=0
        for source in xrange(1, n+1):
            if source not in scc_found:
                queue=[source]
                while queue:
                    v=queue[-1]
                    if v not in preorder:
                        i=i+1
                        preorder[v]=i
                    done=1
                    v_nbrs=Graph.get(v, [])
                    for w in v_nbrs:
                        if w not in preorder:
                            queue.append(w)
                            done=0
                            break
                    if done==1:
                        lowlink[v]=preorder[v]
                        for w in v_nbrs:
                            if w not in scc_found:
                                if preorder[w]>preorder[v]:
                                    lowlink[v]=min([lowlink[v],lowlink[w]])
                                else:
                                    lowlink[v]=min([lowlink[v],preorder[w]])
                        queue.pop()
                        if lowlink[v]==preorder[v]:
                            scc_found[v]=True
                            scc=[v]
                            while scc_queue and preorder[scc_queue[-1]]>preorder[v]:
                                k=scc_queue.pop()
                                scc_found[k]=True
                                scc.append(k)
                            scc_list.append(scc)
                        else:
                            scc_queue.append(v)
        return scc_list

    Lines = sys.stdin.readlines()
    line = 0
    
    n = int(Lines[line])
    line += 1
    Prices = [int(i) for i in Lines[line].split()]
    line += 1
    m = int(Lines[line])
    line += 1
    Graph = {}
    RGraph = {}
    for _ in range(m):
        u, v = [int(i) for i in Lines[line].split()]
        line += 1
        if u not in Graph:
            Graph[u] = []
        if v not in RGraph:
            RGraph[v] = []
        Graph[u].append(v)
        RGraph[v].append(u)
    
    #print time.time() - t    
    Rings = FindRings()
    #print time.time() - t    
    
    total = 0
    permutation = 1
    for r in Rings:
        best = 1e10
        counter = 0
        for i in r:
            if Prices[i-1] < best:
                best = Prices[i-1]
                counter = 0
            if Prices[i-1] == best:
                counter += 1
        total += best
        permutation = (permutation * counter) % 1000000007
    
    print total, permutation % 1000000007


solve()

