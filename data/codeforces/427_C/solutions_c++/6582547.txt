//By LH
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
vector<int> v[100010],v1[100010],q;
int n,m,c[100010];
bool visited[100010];
long long sum,all=1;
void dfs(int s)
{
	visited[s]=true;
	for(int i=0;i<v[s].size();i++)
	if(!visited[v[s][i]])
	dfs(v[s][i]);
	q.push_back(s);
}
pair<int,int> dfs2(int s)
{
	visited[s]=true;
	pair<int,int> q;
	q.first=c[s];
	q.second=1;
	for(int i=0;i<v1[s].size();i++)
	if(!visited[v1[s][i]])
	{
		pair<int,int> x=dfs2(v1[s][i]);
		if(x.first==q.first)
		q.second+=x.second;
		else
		if(x.first<q.first)
		q=x;
	}
	return q;
}
int main()
{
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		cin>>c[i];
	}
	cin>>m;
	for(int i=0;i<m;i++)
	{
		int u,y;
		cin>>u>>y;
		v[u].push_back(y);
		v1[y].push_back(u);
	}
	for(int i=1;i<=n;i++)
	{
		if(!visited[i])
		dfs(i);
	}
	fill(visited,visited+n+1,0);
	for(int i=n;i>=1;i--)
	{
		if(!visited[q[i-1]])
		{
		pair<int,int> x =dfs2(q[i-1]);
		sum+=x.first;
		all*=x.second;
		all%=1000000007;
	}
	}
	cout<<sum<<" "<<all<<endl;
}