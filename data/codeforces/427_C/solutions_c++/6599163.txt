#include <algorithm>
#include <cstring>
#include <vector>
#include <cstdio>
#include <stack>
using namespace std;
const int N = 100010,p = 1000000007;
typedef long long LL;
int n,m,x,y,dfs_t,scc_s,f[N],g[N],h[N],pre[N],scci[N];
vector<int> a[N];
stack<int> S;
int dfs(int x) {
	S.push(x);
	int y,lowx = pre[x] = ++dfs_t;
	for (int i = 0;i < a[x].size();i++)
		if (pre[y = a[x][i]] == 0) {
			int lowy = dfs(y);
			lowx = min(lowx,lowy);
		} else if (scci[y] == 0)
			lowx = min(lowx,pre[y]);
	if (lowx == pre[x]) {
		scc_s++;
		while (true) {
			int y = S.top();S.pop();
			scci[y] = scc_s;
			if (x == y) break;
		}
	}
	return lowx;
}
int main() {
	scanf("%d",&n);
	for (int i = 1;i <= n;i++) scanf("%d",f+i);
	scanf("%d",&m);
	for (int i = 1;i <= m;i++) {
		scanf("%d%d",&x,&y);
		a[x].push_back(y);
	}
	for (int i = 1;i <= n;i++)
		if (pre[i] == 0) dfs(i);
	memset(g,0x3f,sizeof(g));
	for (int i = 1;i <= n;i++)
		if (g[scci[i]] > f[i]) {
			g[scci[i]] = f[i];
			h[scci[i]] = 1;
		} else if (g[scci[i]] == f[i]) h[scci[i]]++;
	LL ans1 = 0,ans2 = 1;
	for (int i = 1;i <= scc_s;i++) {
		ans1 += g[i];
		ans2 = ans2*h[i]%p;
	}
	printf("%I64d %I64d\n",ans1,ans2);
	return 0;
}
