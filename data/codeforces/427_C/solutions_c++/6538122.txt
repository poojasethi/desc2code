#include<cstdio>
#include<algorithm>
#include<stack>
#include<vector>
#include<iostream>
using namespace std;
#define N (int) 1e5
const int M =(int)1e9+7;
int n,m,Low[N+5],Visited[N+5],d[N+5],used[N+5];
long long ans,way=1;
vector<int> a[N+5];
stack<int> st;
int cnt=0;
void minimize(int &a,int b) { if(a>b) a=b; }
void dfs(int u){
    Visited[u]=Low[u]=++cnt;
    st.push(u);
    for(int i=0;i<a[u].size();++i){
        int v=a[u][i];
        if(used[v])  continue;
        if(!Visited[v]) { dfs(v); minimize(Low[u],Low[v]); }
        else minimize(Low[u],Visited[v]);
    }
    if(Low[u]==Visited[u]){
        int best=(int)2e9;
        int idem=1;
        int v;
        do{
            v=st.top();
            st.pop();
            used[v]=1;
            if(d[v]<best)  best=d[v],idem=0;
            if(d[v]==best) ++idem;
        }while(u!=v);
        ans+=best;
        way*=idem;
        way%=M;
    }
}
int main(){
    cin>>n;
    for(int i=1;i<=n;++i)  cin>>d[i];
    cin>>m;
    while(m--){
        int p,q;
        cin>>p>>q;
        a[p].push_back(q);
    }
    for(int i=1;i<=n;++i)  if(!Visited[i])  dfs(i);
    cout<<ans<<" "<<way;
}
