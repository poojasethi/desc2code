#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
const long long MOD=1e9+7;
#define maxn 100005
int n,m;
int cc=1;
long long ans;
long long cnt=1;
int cost[maxn];
int dns[maxn],low[maxn],sta[maxn],fro;
vector<int> v[maxn];
void dfs(int u)
{
    int minc=dns[u]=low[u]=++cc;
    sta[fro++]=u;
    int w;
    for(int i=0;i<v[u].size();i++){
        if(!dns[w=v[u][i]])
            dfs(w);
        if(low[w]<minc)minc=low[w];
    }
    if(minc<low[u]){
        low[u]=minc;return;
    }
    long long tc=0,min_a=1e10;
    do
	{
        low[w=sta[--fro]]=n+1;
        if(cost[w]<min_a){min_a=cost[w];tc=1;}
        else if(cost[w]==min_a)tc++;
    }while(u!=w);
    ans+=min_a;
    cnt=cnt*tc%MOD;
}
int main(){
    cin>>n;
    for(int i=1;i<=n;i++)cin>>cost[i];
    cin>>m;
    for(int i=0,a,b;i<m;i++){
        cin>>a>>b;
        v[a].push_back(b);
    }
    for(int i=1;i<=n;i++){
        if(!dns[i])dfs(i);
    }
    cout<<ans<<" "<<cnt<<endl;
    return 0;
}