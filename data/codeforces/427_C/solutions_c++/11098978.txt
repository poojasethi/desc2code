#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;
typedef vector<int>::iterator vit;
typedef long long ll;
const ll mod=ll(1e9+7);
const int Nx=112345;
const int oo=0x7fffffff;
int stk[Nx],nst;//stack
int low[Nx],idt[Nx],scc[Nx],nsc,dpt;
vector<int> adj[Nx];
int cost[Nx],sct[Nx],scm[Nx];

void dfs(int n){
	idt[n]=low[n]=++dpt;
	stk[++nst]=n;
	for(vit i=adj[n].begin();i!=adj[n].end();i++){
		if(!idt[*i]){ //tree edge
			dfs(*i);
			//low[n]=min(low[n],low[*i]);
		}//else if(!scc[*i]){//back edge
		//	low[n]=min(low[n],idt[*i]);
		//}
		if(!scc[*i])low[n]=min(low[n],low[*i]);
	}
	if(low[n]<idt[n])return;
	nsc++; sct[nsc]=oo;
	for(int i=stk[nst];idt[i]>=idt[n];i=stk[nst]){
		scc[i]=nsc;
		if(cost[i]<sct[nsc]){
			sct[nsc]=cost[i];
			scm[nsc]=0;
		}
		if(cost[i]==sct[nsc])scm[nsc]++;
		nst--;
	}
}

int main(){
	int N,M,a,b;
	scanf("%d",&N);
	for(int i=1;i<=N;i++)scanf("%d",cost+i);
	scanf("%d",&M);
	while(M--){
		scanf("%d%d",&a,&b);
		adj[a].push_back(b);
	}
	for(int i=1;i<=N;i++)if(!scc[i])dfs(i);
	ll ct=0,nw=1;
	for(int i=1;i<=nsc;i++){
		ct=ct+sct[i];
		nw=(nw*scm[i])%mod;
	}
	printf("%lld %lld\n",ct,nw);
	return 0;
}