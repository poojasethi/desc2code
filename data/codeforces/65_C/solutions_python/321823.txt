from fractions import Fraction
def readarray(foo): return [foo(x) for x in raw_input().split()]

EPS = 1e-11

def dist(u, v):
	return ((u[0] - v[0]) ** 2 + (u[1] - v[1]) ** 2 + (u[2] - v[2]) ** 2) ** 0.5

def run():
	n = int(raw_input())	
	p = [readarray(int) for i in xrange(n + 1)]
	vp, vs = readarray(int)
	sp = readarray(int)

	u = p[0]
	times = [0]

	for i in xrange(1, n + 1):
		d2 = dist(u, p[i])
		t2 = times[i - 1] + d2 / vs
		times.append(t2)
		u = p[i]
	maxt = dist(sp, p[-1]) / vp
	if maxt > times[-1] + EPS: return "NO"
	
	l = 0
	r = times[-1]

	res = None
	for i in xrange(100):
		m = (l + r) / 2
		k = min([j for j in xrange(n + 1) if times[j] + EPS >= m])

		dt = times[k] - times[k - 1]
		t = (m - times[k - 1]) / dt

		u = p[k - 1]
		v = p[k]
		w = [u[j] + t * (v[j] - u[j]) for j in range(3)]
		
		pt = dist(sp, w) / vp
		if pt < m + EPS:
			res = [m] + w
			r = m
		else:
			l = m
	
	return "YES\n%.9f\n%.9f %.9f %.9f" % tuple(res)

print run()
