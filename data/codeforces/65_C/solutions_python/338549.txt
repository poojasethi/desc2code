import sys
import math

def dt(A, B=None):
  if not B:
    B = [0, 0, 0]
  return math.sqrt((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2 + (A[2] - B[2]) ** 2)

def getP(x):
  j = 0
  y = x * vs
  for i in xrange(30, -1, -1):
    if j + (1 << i) < len(D) and D[j + (1 << i)] < y:
      j += 1 << i
  x -= D[j] / vs
  A = [xx for xx in P[j]]
  for i in xrange(3):
    A[i] = P[j][i] + (P[j + 1][i] - P[j][i]) * x / (D[j + 1] - D[j]) * vs
  return A

n = int(sys.stdin.readline())
P = []
D = [0.0]
for i in xrange(n + 1):
  P.append([int(xx) for xx in sys.stdin.readline().split()])
vp, vs = [int(xx) for xx in sys.stdin.readline().split()]
L = [int(xx) for xx in sys.stdin.readline().split()]
for A in P:
  for i in xrange(3):
    A[i] -= L[i]
distance = 0
for i in xrange(n):
  distance += dt(P[i], P[i + 1])
  D.append(distance)
if (distance / vs) < (dt(P[n]) / vp):
  print 'NO'
  sys.exit(0)

a = 0.0
b = distance / vs
for i in xrange(100):
  c = (a + b) * 0.5
  if dt(getP(c)) < c * vp:
    b = c
  else:
    a = c
print 'YES'
print '%.8f' % a
A = getP(a)
for i in xrange(3):
  A[i] += L[i]
print ' '.join(['%.8f' % x for x in A])
