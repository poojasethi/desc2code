import string
import itertools
import collections
import math

TEST = False

def time(x, y, v):
    dist = 0
    for i in range(3):
        dist += (x[i]-y[i])**2.
    dist = math.sqrt(dist)
    return dist / v

def func(points, harry, vs, vp):
    # cumulative time
    cumtime = [0]
    for i in range(1, len(points)):
        cumtime.append(cumtime[i-1] + time(points[i-1], points[i], vs))
    # intercept time
    for i in range(1, len(points)):
        # check if harry can intercept the ball at the next point
        inttime = time(harry, points[i], vp)
        if inttime<=cumtime[i]:
            # can intercept, compute where exactly
            # interpolate between points[i-1] and point, compute earliest
            # match
            # bisect
            start = points[i-1]
            end = points[i]
            
            
            balltime = cumtime[i]
            harrytime = inttime
            while True:
                pos = [(start[j]+end[j]) / 2. for j in range(3)]
                balltime = cumtime[i-1] + time(points[i-1], pos, vs)
                harrytime = time(harry, pos, vp)
                if abs(balltime - harrytime) < 1e-11:
                    return harrytime, pos
                if balltime > harrytime:
                    end = pos
                else:
                    start = pos
    return None


if TEST:
    desired = [([[0,0,0],[0,10,0],[10,10,0],[10,0,0]], 1, 1, [5, 5, 25],
               (25.5, [10., 4.5, 0.]))]
    for points, vp, vs, harry, res in desired:
        y = func(points, harry, vp, vs)
        print y, res
        #assert y == res
else:
    n = int(raw_input())
    points = [map(int, raw_input().split()) for _ in range(n+1)]
    vp, vs = map(int, raw_input().split())
    harry = map(int, raw_input().split())
    res = func(points, harry, vs, vp)
    if res is None:
        print 'NO'
    else:
        print 'YES'
        print res[0]
        print res[1][0], res[1][1], res[1][2]
