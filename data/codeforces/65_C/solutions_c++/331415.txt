#include <cstdio>
#include <cmath>
using namespace std;

const int MAXN = 10000 + 10;
const double eps = 1e-10;

double x[MAXN], y[MAXN], z[MAXN], px, py, pz, vs, vp;

inline double dist(double x, double y, double z) {
	return sqrt(x * x + y * y + z * z);
}

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 1; i <= n + 1; ++i) {
		scanf("%lf%lf%lf", &x[i], &y[i], &z[i]);
	}
	x[0] = x[1], y[0] = y[1], z[0] = z[1];
	
	scanf("%lf%lf", &vp, &vs);
	scanf("%lf%lf%lf", &px, &py, &pz);
	
	double ds = 0, dp;
	for (int i = 1; i <= n + 1; ++i) {
		ds += dist(x[i - 1] - x[i], y[i - 1] - y[i], z[i - 1] - z[i]);
		dp = dist(x[i] - px, y[i] - py, z[i] - pz);
		if (dp / vp <= ds / vs + eps) {
			double l = 0, r = 1;
			double xx = x[i] - x[i - 1], yy = y[i] - y[i - 1], zz = z[i] - z[i - 1];
			double len = dist(xx, yy, zz);
			ds -= len;
			while (r - l > eps) {
				double k = (l + r) / 2;
				double dd = ds + k * len;
				dp = dist(x[i - 1] + k * xx - px, y[i - 1] + k * yy - py, z[i - 1] + k * zz - pz);
				if (dp / vp <= dd / vs) {
					r = k;
				} else {
					l = k;
				}
			}
			puts("YES");
			double k = (l + r) / 2;
			printf("%.9lf\n%.9lf %.9lf %.9lf\n", dp / vp, x[i - 1] + k * xx, y[i - 1] + k * yy, z[i - 1] + k * zz);
			return 0;
		}
	}
	puts("NO");
	return 0;
}
