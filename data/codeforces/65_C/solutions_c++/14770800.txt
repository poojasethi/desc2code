#include<bits/stdc++.h>
using namespace std;
#define rep(i,n) for(int i=0;i<n;++i)
#define Rep(i,n) for(int i=1;i<=n;++i)

struct point{
	double x, y, z;
	point(){}
	point(double x, double y, double z):x(x), y(y), z(z){}
	point operator + (const point& b) const {
		return point(x+b.x, y+b.y, z+b.z);
	}
	point operator - (const point& b) const {
		return point(x-b.x, y-b.y, z-b.z);
	}
	point operator * (double c) const {
		return point(x*c, y*c, z*c);
	}
	point operator / (double c) const {
		return point(x/c, y/c, z/c);
	}
	double len() {
		return sqrt(x*x + y*y + z*z);
	}
}p[10010];

double t[10010] = {0};

int main()
{
	int n;
	cin >> n;
	rep(i, n+1) {
		scanf("%lf%lf%lf", &p[i].x, &p[i].y, &p[i].z);
	}
	double vs, vp;
	point p0;
	cin >> vp >> vs >> p0.x >> p0.y >> p0.z;
	Rep(i, n) t[i] = t[i-1] + (p[i]-p[i-1]).len() / vs;
	if((p0-p[n]).len() > t[n]*vp+1e-8) {
		puts("NO");
		return 0;
	}
	puts("YES");
	t[n+1] = t[n];
	double l = 0, r = t[n];
	int cnt = 0;
	while(1) {
		double m = (l+r)/2;
		int pos = upper_bound(t, t+n, m)-t-1;
		point temp = p[pos+1]-p[pos];
		temp = p[pos] + temp / temp.len() * (m-t[pos]) * vs;
		if((temp-p0).len() > m*vp) l = m;
		else r = m;
		if(cnt++ > 998) break;
	}
	int pos = upper_bound(t, t+n, l)-t-1;
	point temp = p[pos+1]-p[pos];
	temp = p[pos] + temp / temp.len() * (l-t[pos]) * vs;
	if(fabs(temp.x) < 1e-8) temp.x = 0;
	if(fabs(temp.y) < 1e-8) temp.y = 0;
	if(fabs(temp.z) < 1e-8) temp.z = 0;
	printf("%.8lf\n%.8lf %.8lf %.8lf\n", l, temp.x, temp.y, temp.z);
	return 0;
}
  			 	 	 		 	   					  		  		