#include <stdio.h>
#include <math.h>
#define eps 1e-15
struct pt { double x,y,z; };
double p2(const double& e) { return e*e; }
double dist(const pt& a, const pt& b) { return sqrt(p2(a.x-b.x)+p2(a.y-b.y)+p2(a.z-b.z)); }
pt v[10005], p;
double time[10005];
int main() {
	int n;
	double vp, vs;
	scanf("%d", &n);
	for(int i=0;i<=n;++i) scanf("%lf%lf%lf",&v[i].x, &v[i].y, &v[i].z);
	scanf("%lf%lf", &vp, &vs);
	scanf("%lf%lf%lf", &p.x, &p.y, &p.z);
	if(fabs(p.x-v[0].x)<eps&&fabs(p.y-v[0].y)<eps&&fabs(p.z-v[0].z)<eps) {
		puts("YES");
		printf("0\n");
		printf("%.10f %.10f %.10f\n", p.x, p.y, p.z);
		return 0;
	}
	for(int i=1;i<=n;++i) {
		time[i] = time[i-1]+dist(v[i], v[i-1])/vs;
		double ti = dist(p, v[i])/vp;
		//printf("%.2f %.2f\n", time[i], ti);
		if(ti-time[i]<eps) {
			double l=0, r=1;
			while(l<r-eps) {
				double mid=(l+r)/2;
				pt pmid = (pt) {v[i-1].x+(v[i].x-v[i-1].x)*mid, v[i-1].y+(v[i].y-v[i-1].y)*mid, v[i-1].z+(v[i].z-v[i-1].z)*mid};
				double time_ = time[i-1]+dist(pmid, v[i-1])/vs, ti_=dist(p, pmid)/vp;
				if(time_>ti_) r=mid;
				else l=mid;
			}
			double mid=l;
			pt ans=(pt) {v[i-1].x+(v[i].x-v[i-1].x)*mid, v[i-1].y+(v[i].y-v[i-1].y)*mid, v[i-1].z+(v[i].z-v[i-1].z)*mid};
			puts("YES");
			printf("%.10f\n", time[i-1]+dist(ans,v[i-1])/vs);
			printf("%.10f %.10f %.10f\n", ans.x, ans.y, ans.z);
			return 0;
		}
	}
	
	puts("NO");
	return 0;
}
