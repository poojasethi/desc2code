#include <cstdlib>
#include <cstdio>
#include <cmath>
using namespace std;

double pts[10001][3];
double t[10000];
double vs, vp;
double x, y, z;

double dist(int a, int b){
	return sqrt( pow(pts[a][0]-pts[b][0], 2) + pow(pts[a][1]-pts[b][1], 2) + pow(pts[a][2]-pts[b][2], 2) );
}
double dist(double px, double py, double pz){
	return sqrt( pow(x-px, 2) + pow(y-py, 2) + pow(z-pz, 2) );
}

int main(){
	int n;
	scanf("%d", &n);
	for(int i=0; i<=n; i++){
		scanf("%lf %lf %lf", &pts[i][0], &pts[i][1], &pts[i][2]);
	}
	scanf("%lf %lf", &vp, &vs);
	scanf("%lf %lf %lf", &x, &y, &z);
	
	double time = 0;
	bool ok = false;
	int index = 0;
	double s = 0;
	double e = 0;
	double t2 = 0;
	for(int i=0; i<n; i++){
		double t = dist(i, i+1)/vs;
		if( dist(pts[i+1][0], pts[i+1][1], pts[i+1][2]) < vp*(time+t) || abs(dist(pts[i+1][0], pts[i+1][1], pts[i+1][2])-vp*(time+t)) < 1e-8){
			ok = true;
			index = i;
			s = 0;
			e = t2 = t;
			break;
		}
		time += t;
	}
	
	if(!ok){
		printf("NO\n");
		return 0;
	}
	
	double x2, y2, z2;
	for(int i=0; i<200; i++){
		double m = (s+e)/2;
		x2 = pts[index][0] + m*(pts[index+1][0]-pts[index][0])/t2;
		y2 = pts[index][1] + m*(pts[index+1][1]-pts[index][1])/t2;
		z2 = pts[index][2] + m*(pts[index+1][2]-pts[index][2])/t2;
		
		// printf("%.10f %.10f\n", s, e);
		// printf("%lf %lf %lf\n", x2, y2, z2);
		if(dist(x2, y2, z2) <= vp*(time+m)){
			e = m;
		}else{
			s = m;
		}
	}
	
	printf("YES\n");
	printf("%.10f\n", time+s);
	printf("%.10f %.10f %.10f\n", x2+1e-11, y2+1e-11, z2+1e-11);

	return 0;
}