#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>
using namespace std;

struct vect3D{
	double x,y,z;
	vect3D(){}
	vect3D(double x,double y,double z):x(x),y(y),z(z){};
	vect3D operator + (vect3D const &T) const{return vect3D(x+T.x,y+T.y,z+T.z);}
	vect3D operator - (vect3D const &T) const{return vect3D(x-T.x,y-T.y,z-T.z);}
	vect3D operator * (double const &t) const{return vect3D(x*t,y*t,z*t);}
	double len(){return sqrt(x*x+y*y+z*z);}
}	p[10005],q,pt,rp;

int n,ok=0;
double vs,vp,hd,tl,ts,tp,mid,T,ret;

int main(){

	scanf("%d",&n);
	for (int i=0;i<=n;i++){
		scanf("%lf%lf%lf",&p[i].x,&p[i].y,&p[i].z);
	}
	
	scanf("%lf%lf",&vp,&vs);
	scanf("%lf%lf%lf",&q.x,&q.y,&q.z);
	
	T = 0.0;
	ret = 1e80;
	for (int i=0;i<=n-1;i++){
		hd = 0.0;
		tl = 1.0;
		for (int itr=0; itr<=50; itr++){
			mid = (hd+tl)*0.5;
			pt = p[i] + (p[i+1]-p[i]) * mid;
			
			ts = T + (p[i]-pt).len()/vs;
			tp = (q-pt).len()/vp;
			
			if (tp<=ts+1e-12){
				ok = 1;
				if (ts < ret){
					ret = ts;
					rp = pt;
				}
				tl = mid;
			}
			else hd = mid;
		}
		T += (p[i+1] - p[i]).len() / vs;
		if (ok) break;
	}
	
	if (ok){
		printf("YES\n");
		printf("%.9f\n%.9f %.9f %.9f\n",ret,rp.x,rp.y,rp.z);
	}
	else printf("NO\n");
	
	return 0;
}
