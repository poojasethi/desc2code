#include <cstdio>
#include <cmath>

using namespace std;

struct point {
	point() { }
	point(long double x, long double y, long double z) : x(x), y(y), z(z) { }
	long double x, y, z;
};

point mid(point p1, point p2) {
	return point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2, (p1.z + p2.z) / 2);
}

long double dist(point p1, point p2) {
	return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2) + pow(p1.z - p2.z, 2));
}

const long double eps = 1e-8;

int n;
point a[10002];
int vp, vs;
point p;
long double baseway;
point base;

void print(point q) {
	printf("YES\n%.6lf\n%.6lf %.6lf %.6lf\n",
		static_cast<double>(dist(q, p) / vp),
		static_cast<double>(q.x),
		static_cast<double>(q.y),
		static_cast<double>(q.z));
}

bool good(point q) {
	return (baseway + dist(q, base)) * vp + eps >= dist(q, p) * vs;
}

point bisect(point l, point r) {
	//printf("[%Lf, %Lf, %Lf; %Lf, %Lf, %Lf]\n", l.x, l.y, l.z, r.x, r.y, r.z);
	point m = mid(l, r);
	if(dist(m, r) <= eps) return r;
	if(good(m)) return bisect(l, m);
	else return bisect(m, r);
}

int main() {
	scanf("%i", &n);
	n++;
	for(int i = 0; i < n; i++) {
		int x, y, z;
		scanf("%i%i%i", &x, &y, &z);
		a[i].x = x;
		a[i].y = y;
		a[i].z = z;
	}
	scanf("%i%i", &vp, &vs);
	{
		int x, y, z;
		scanf("%i%i%i", &x, &y, &z);
		p.x = x;
		p.y = y;
		p.z = z;
	}
	long double way = 0, oldway = 0;
	int i;
	for(i = 0; i < n; i++) {
		if(way * vp  + eps >= dist(a[i], p) * vs) break;
		oldway = way;
		way += dist(a[i], a[i + 1]);
	}
	if(i == n) {
		printf("NO\n");
	} else if(i == 0) {
		print(a[i]);
	} else {
		base = a[i - 1];
		baseway = oldway;
		print(bisect(a[i - 1], a[i]));
	}
}

