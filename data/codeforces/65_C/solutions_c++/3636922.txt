#include <cstdio>
#include <cmath>

using namespace std;

const double EPS = 1e-9;

struct pt
{
    double x, y, z;

    pt(){}
    pt(double x, double y, double z): x(x), y(y), z(z){}
    double dist();
};

pt operator -(pt A, pt B)
{
    return pt(A.x - B.x, A.y - B.y, A.z - B.z);
}

double pt::dist()
{
    return sqrt(x * x + y * y + z * z);
}

int main()
{
    int n;
    scanf("%d", & n);
    pt A[n + 1], P;
    double vp, vs;

    for (int i = 0; i <= n; i++)
        scanf("%lf %lf %lf", & A[i].x, & A[i].y, & A[i].z);
    scanf("%lf %lf", & vp, & vs);
    scanf("%lf %lf %lf", & P.x, & P.y, & P.z);
    double sum = 0;

    for (int i = 0; i < n; i++)
    {
        sum += i == 0 ? 0 : (A[i] - A[i - 1]).dist() / vs;

        pt L = A[i], R = A[i + 1];

        while ((R - L).dist() > EPS)
        {
            pt M((L.x + R.x) / 2, (L.y + R.y) / 2, (L.z + R.z) / 2);

            if ((M - P).dist() / vp > (sum + (M - A[i]).dist() / vs))
                L = M;
            else
                R = M;
        }

        if ((A[i + 1] - L).dist() > EPS)
        {
            printf("YES\n");
            printf("%lf\n", (L - P).dist() / vp);
            printf("%lf %lf %lf\n", L.x, L.y, L.z);
            return 0;
        }
    }

    if ((A[n] - P).dist() / vp <= (sum + (A[n] - A[n - 1]).dist() / vs) + EPS * 3)
    {
        printf("YES\n");
        printf("%lf\n", sum + (A[n] - A[n - 1]).dist() / vs);
        printf("%lf %lf %lf\n", A[n].x, A[n].y, A[n].z);
    }
    else
        printf("NO\n");
}
