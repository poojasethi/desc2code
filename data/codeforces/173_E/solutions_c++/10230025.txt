#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <climits>
#include <algorithm>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <cassert>
#include <vector>
#define all(x) x.begin() , x.end()
#define fi first
#define se second
#define pb push_back
#define umax( x , y ) x = max( x , (y) )
#define umin( x , y ) x = min( x , (y) )
#define For( i , a ) for(int i=1;i<=a;i++)
#define ort (((b+s) < 0 )? (b+s)/2-1:(b+s)/2)
#define y2 asrwjaelkf
#define y1 asseopirwjaelkf

using namespace std;

inline int read() {
	int res = 0 ;int neg ;
	while(true){char ch = getchar();if(ch>='0' && ch<='9' || ch=='-'){if(ch=='-') neg = -1;else neg = 1 , res = ch-'0';break;} }
	while(true){char ch = getchar();if(ch>='0' && ch<='9') res*=10 , res+=ch-'0';else break;}
	return res*neg;
}

const int maxn = 105020;
const int maxm = 1020;
const int MOd = 1e7;

typedef long long Lint;
typedef double db;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;

int a, b, n, segment2[maxn*10], dn[maxn];
int R[maxn], ar[maxn];
map <int,int> zip;
vector <ii> segment[maxn*10];

int main() {
	
	scanf("%d %d",&a,&b);
	vector <ii> v;
	for(int i=1;i<=a;i++) {
		scanf("%d",&R[i]);
		v.pb( ii( R[i], i ) );
	}
	sort( all( v ) );
	
	for(int i=1;i<=a;i++) {
		scanf("%d",&ar[i]);
		zip[ar[i]-b] = 1;
		zip[ar[i]] = 1;
		zip[ar[i]+b] = 1;
	}
	int cnt = 0;
	for( map <int,int> :: iterator it = zip.begin() ; it != zip.end() ; it++ )
		it->se = ++cnt;
	
	n = 1;
	while( n < cnt ) n <<= 1;
	
	for(int i=0,j=0;i<v.size();i++) {
		
		if( i == j ) {
			while( j < v.size() && v[j].fi == v[i].fi ) {
				int k = zip[ar[v[j].se]]+n-1;
				segment2[k]++;
				for(k>>=1;k;k>>=1)
					segment2[k]++;
				j++;
			}
		}
		
		for( int l=zip[ar[v[i].se]-b]+n-1, r=zip[ar[v[i].se]+b]+n-1 ; l<=r ; l=(l+1)>>1, r=(r-1)>>1 ) {
			if( l&1 ) dn[v[i].se] += segment2[l];
			if( ~r&1 ) dn[v[i].se] += segment2[r];
		}
		//~ printf("%d ==> %d\n",v[i].se,dn[v[i].se]);
		int k = zip[ar[v[i].se]]+n-1;		
		segment[k].pb( ii( v[i].fi, dn[v[i].se] ) );
		for(k>>=1;k;k>>=1)
			segment[k].pb( ii( v[i].fi, dn[v[i].se] ) );
	}
	
	for(int i=1;i<2*n;i++) {
		sort( all( segment[i] ) );
		for(int j=segment[i].size()-1,maxi=0;j>=0;j--) {
			umax( maxi, segment[i][j].se );
			segment[i][j].se = maxi;
		}
	}
	
	int q;
	scanf("%d",&q);
	
	for(int i=1,x,y;i<=q;i++) {
		scanf("%d %d",&x,&y);
		if( ar[x] > ar[y] ) swap( x, y );
		int ans = -1;
		for(int l=zip[ar[y]-b]+n-1,r=zip[ar[x]+b]+n-1;l<=r;l=(l+1)>>1, r=(r-1)>>1) {
			if( l&1 ) {
				int t = lower_bound( all( segment[l] ), ii( max( R[x], R[y] ), 0 ) ) - segment[l].begin();
				if( t != segment[l].size() )
					umax( ans, segment[l][t].se );
			}
			if( ~r&1 ) {
				int t = lower_bound( all( segment[r] ), ii( max( R[x], R[y] ), 0 )) - segment[r].begin();
				if( t != segment[r].size() )
					umax( ans, segment[r][t].se );
			}
		}
		printf("%d\n",ans);
	}
	
	return 0;
}
