#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
 
#define mp make_pair

const ll N = 2e5;
const ll M = 20;
const ll SQRT = 350;
const ll INF = 1e15;
const ll MOD = 1e9+7;

ll n,k,q,b[N],f[N],l[N],r[N];
pair<ll,ll> a[N],tmp[N];
pair<ll,ll> seg[M][N];

void build(int d,int l,int r)
{
	if (r-l<2)
	{
		seg[d][l] = mp(a[l].second,0);
		return;
	}
	int mid = (l+r)/2;
	build(d+1,l,mid);
	build(d+1,mid,r);
	merge(seg[d+1]+l,seg[d+1]+mid,seg[d+1]+mid,seg[d+1]+r,seg[d]+l);
}

void build1(int d,int l,int r)
{
	if (r-l<2)
	{
		seg[d][l].second = b[l];
		return;
	}
	int mid = (l+r)/2;
	build1(d+1,l,mid);
	build1(d+1,mid,r);
	merge(seg[d+1]+l,seg[d+1]+mid,seg[d+1]+mid,seg[d+1]+r,seg[d]+l);
	for (int i = r-2; i>=l; i--)
		seg[d][i].second = max(seg[d][i].second,seg[d][i+1].second); 
}

pair<ll,ll> get(int d,int l,int r,int s,int e,ll val)
{
	if (e<=l || s>=r) return mp(0,0);
	if (s<=l && e>=r) 
	{
		int pos = lower_bound(seg[d]+l,seg[d]+r,mp(val,INF))-seg[d]-l;
		if (pos==r-l)
			return mp(pos,0);
		else
			return mp(pos,seg[d][l+pos].second);
	}
	int mid = (l+r)/2;
	pair<ll,ll> t = get(d+1,l,mid,s,e,val);
	pair<ll,ll> h = get(d+1,mid,r,s,e,val);
	return mp(t.first+h.first,max(t.second,h.second));
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	
	cin >> n >> k;
	for (int i = 0; i<n; i++)
		cin >> a[i].second;
	for (int i = 0; i<n; i++)
		cin >> a[i].first;
	for (int i = 0; i<n; i++)
		tmp[i] = a[i];

	sort(a,a+n);
	for (int i = 0; i<n; i++)
		f[i] = lower_bound(a,a+n,tmp[i])-a;
	build(1,0,n);
	for (int i = 0; i<n; i++)
	{
		l[i] = lower_bound(a,a+n,mp(a[i].first-k,ll(0)))-a;
		r[i] = lower_bound(a,a+n,mp(a[i].first+k,INF))-a;
		b[i] = get(1,0,n,l[i],r[i],a[i].second).first;
	//	cout << a[i].first << ' ' << a[i].second << ' ' << l[i] << ' ' << r[i] << ' ' << b[i] << endl;
	}
	build1(1,0,n);
	cin >> q;
	for (int i = 0; i<q; i++)
	{
		ll x,y;
		cin >> x >> y;
		x--;
		y--;
		x = f[x];
		y = f[y];
		if (x>y)
			swap(x,y);
	//	cout << x << ' ' << y << endl;
		ll l1 = l[y];
		ll r1 = r[x];
	//	cout << l1 << ' ' << r1 << endl;
		if (r1-l1<1)
		{
			cout << -1 << "\n";
			continue;
		}
		ll ans = get(1,0,n,l1,r1,max(a[x].second,a[y].second)-1).second;
		if (ans==0)
		{
			cout << -1 << "\n";
			continue;
		}
		cout << ans << "\n";
	}
	
	return 0;
}
	 	    	   		 	 	   		  	  				