#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
#define maxn 100010

using namespace std;

struct node{
    int r,a;
    int id;
    friend bool operator < (const node &a,const node &b){
        return a.r<b.r;
    }
} a[maxn];
int A[maxn];
vector< pair<int,int> > query[maxn];
int xa[maxn],xn;
int ans[maxn];
int ta[maxn];
int f[maxn];
int tree[maxn<<2];
int n,K,m;
void ins(int p){
    for (;p<=xn;p+=(p&(p^(p-1)))) ta[p]++;
}
int ask(int p){
    int ret=0;
    for (;p;p-=(p&(p^(p-1)))) ret+=ta[p];
    return ret;
}
void init(int p,int tl,int tr){
    tree[p]=-1;
    if (tl==tr) return;
    int m=(tl+tr)>>1;
    init(p<<1,tl,m);
    init((p<<1)+1,m+1,tr);
}
void Ins(int p,int tl,int tr,int k,int v){
    tree[p]=max(tree[p],v);
    if (tl==tr) return;
    int m=(tl+tr)>>1;
    if (k<=m) Ins(p<<1,tl,m,k,v);else Ins((p<<1)+1,m+1,tr,k,v);
}
int get(int p,int tl,int tr,int l,int r){
    if (l>r) return -1;
    if (tl==l && tr==r) return tree[p];
    int m=(tl+tr)>>1;
    if (l<=m){
        if (r>m){
            return max(get(p<<1,tl,m,l,m),get((p<<1)+1,m+1,tr,m+1,r));
        }else return get(p<<1,tl,m,l,r);
    }else return get((p<<1)+1,m+1,tr,l,r);
}
int main(){
    scanf("%d%d",&n,&K);
    for (int i=0;i<n;i++) scanf("%d",&a[i].r);
    for (int i=0;i<n;i++) scanf("%d",&a[i].a);
    scanf("%d",&m);
    for (int i=0;i<n;i++) A[i]=a[i].a;
    for (int t=0;t<m;t++){
        int x,y;
        scanf("%d%d",&x,&y);
        --x;--y;
        if (a[x].r>a[y].r) query[x].push_back(make_pair(y,t));
        else query[y].push_back(make_pair(x,t));
    }
    for (int i=0;i<n;i++) a[i].id=i;
    sort(a,a+n);
    for (int i=0;i<n;i++) xa[i]=a[i].a;
    sort(xa,xa+n);
    xn=unique(xa,xa+n)-xa;
    for (int i=0,j;i<n;i=j+1){
        for (j=i;j<n-1 && a[j+1].r==a[j].r;j++);
        for (int k=i;k<=j;k++){
            int pos=upper_bound(xa,xa+xn,a[k].a)-xa;
//          printf("%d\n",pos);
            ins(pos);
        }
        for (int k=i;k<=j;k++){
            int p=a[k].id;
            int L=lower_bound(xa,xa+xn,a[k].a-K)-xa;
            ++L;
            int R=upper_bound(xa,xa+xn,a[k].a+K)-xa;
//          printf("p:%d, (%d,%d)\n",k,L,R);
            int tot=ask(R)-ask(L-1);
            f[p]=tot;
        }
    }
    init(1,1,xn);
    for (int i=n-1,j;i>=0;i=j-1){
        for (j=i;j>0 && a[j-1].r==a[j].r;j--);
        for (int k=j;k<=i;k++){
            int pos=upper_bound(xa,xa+xn,a[k].a)-xa;
            Ins(1,1,xn,pos,f[a[k].id]);
        }
        for (int k=j;k<=i;k++){
            int p=a[k].id;
            for (int c=0;c<(int)query[p].size();c++){
                int x=p,y=query[p][c].first,idx=query[p][c].second;
                int L=lower_bound(xa,xa+xn,max(A[x],A[y])-K)-xa;
                ++L;
                int R=upper_bound(xa,xa+xn,min(A[x],A[y])+K)-xa;
//              printf("%d: (%d,%d)\n",idx,L,R);
                ans[idx]=get(1,1,xn,L,R);
            }
        }
    }
    for (int t=0;t<m;t++) printf("%d\n",ans[t]);
    return 0;
}
