#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int N = 100005;
int a[N],r[N],b[N],c[N],f[N],h[N],v[N];
bool cmp(int x,int y)
{
	return a[x]<a[y];
}
bool cmp1(int x,int y)
{
	return r[x]<r[y];
}
int lowbit(int x){return x&(-x);}
int getsum(int x)
{
	int r=0;
	while(x>0)
	{
		r+=c[x];
		x-=lowbit(x);
	}
	return r;
}
void up(int x,int v)
{
	while(x<N)
	{
		c[x]+=v;
		x+=lowbit(x);
	}
}
struct Q
{
	int l,r,v,id;
}q[N];
bool cmp2(Q x,Q y)
{
	return x.v<y.v;
}
int res[N],rr;
struct P
{
	int l,r,mid,key;
}arr[4*N];
void build(int L,int R,int c)
{
	arr[c].l=L;
	arr[c].r=R;
	arr[c].mid=(L+R)/2;
	arr[c].key=-1;
	if(L==R)return ;
	build(L,arr[c].mid,c+c);
	build(arr[c].mid+1,R,c+c+1);
}
void update(int x,int v,int c)
{
	if(arr[c].key<v)arr[c].key=v;
	if(arr[c].l==arr[c].r)return ;
	if(x<=arr[c].mid)update(x,v,c+c);
	else update(x,v,c+c+1);
}
void find(int L,int R,int c)
{
	if(rr>=arr[c].key)return ;
	if(L<=arr[c].l&&R>=arr[c].r)
	{
		rr=arr[c].key;
		return ;
	}
	if(L<=arr[c].mid)find(L,R,c+c);
	if(R>arr[c].mid)find(L,R,c+c+1);
}
int main()
{
	int n,k,i,j;
	scanf("%d%d",&n,&k);
	for(i=1;i<=n;i++)scanf("%d",r+i);
	for(i=1;i<=n;i++)scanf("%d",a+i);
	for(i=1;i<=n;i++)b[i]=i;
	sort(b+1,b+1+n,cmp);
	int d=0;
	for(i=1;i<=n;i++)
	{
		if(a[b[i]]!=a[b[i-1]]){d++;h[d]=a[b[i]];}
		f[b[i]]=d;
	}
	//for(i=1;i<=n;i++)printf("i:%d r:%d f:%d \n",i,r[i],f[i]);
	sort(b+1,b+1+n,cmp1);
	for(i=j=1;i<=n;i++)
	{
		while(j<=n&&r[b[j]]==r[b[i]])
		{
			up(f[b[j]],1);
			j++;
		}
		int l=lower_bound(h+1,h+d+1,a[b[i]]-k)-h;
		int r=upper_bound(h+1,h+d+1,a[b[i]]+k)-h-1;
		v[b[i]]=getsum(r)-getsum(l-1);
		//printf("i:%d l:%d r:%d v:%d \n",i,l,r,v[b[i]]);
	}
	int m,x,y;
	scanf("%d",&m);
	for(i=0;i<m;i++)
	{
		scanf("%d%d",&x,&y);
		q[i].v=r[x]>r[y]?r[x]:r[y];
		q[i].id=i;
		int l=(a[x]>a[y]?a[x]:a[y])-k,r=(a[x]<a[y]?a[x]:a[y])+k;
		l=lower_bound(h+1,h+d+1,l)-h;
		r=upper_bound(h+1,h+d+1,r)-h-1;
		if(l>r){res[i]=-1;continue;}
		q[i].l=l;
		q[i].r=r;
	}
	sort(q,q+m,cmp2);
	build(1,d,1);
	for(j=n,i=m-1;i>=0;i--)
	{
		while(j>0&&r[b[j]]>=q[i].v)
		{
			update(f[b[j]],v[b[j]],1);
			j--;
		}
		if(res[q[i].id]==-1)continue;
		rr=-1;
		find(q[i].l,q[i].r,1);
		res[q[i].id]=rr;
	}
	for(i=0;i<m;i++)printf("%d\n",res[i]);
	return 0;
}