#include <iostream>
#include <algorithm>
#include<stdio.h>
#include<string.h>
#include<queue>
#include<cmath>
#include<list>
#include<set>
#include<map>
#include<vector>
#define N 100005
#define inf 1000000013
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define x first
#define y second
#define lst p<<1,l,mid
#define rst p<<1|1,mid+1,r
#define ll long long
using namespace std;
pair<pii,int>ms[N],qu[N],beg[N];
int b[N],q,tr[(1<<18)+2],n,ny[N],ans[N],cnt[N];
void upd(int x,int d)
{
 x++;
 for(;x<=n;x+=x&-x)
 b[x]+=d;
}
int sum(int x)
{
 int ans=0;x++;
 for(;x>0;x-=x&-x)ans+=b[x];
 return ans;
}
int sum(int l,int r)
{
    if(l>r)return 0;
    return sum(r)-sum(l-1);
}
int cmp(pair<pii,int>a,pair<pii,int>b)
{
 return max(beg[a.x.x].x.x,beg[a.x.y].x.x)<max(beg[b.x.x].x.x,beg[b.x.y].x.x);
}
void upd1(int x,int d)
{
 x+=q;tr[x]=max(tr[x],d);
 for(;x/=2;)tr[x]=max(tr[x*2],tr[x*2+1]);
}
int sum1(int l,int r)
{
 l+=q;r+=q;
 int ans=0;
 for(;l<=r;l=(l+1)/2,r=(r-1)/2)
 ans=max(ans,max(tr[l],tr[r]));
 return ans;
}
int main()
{
   // freopen("in.txt","r",stdin);
    int i,j,a,m,k;
    while(~scanf("%d%d",&n,&k))
    {
     for(i=0;i<n;i++)scanf("%d",&ms[i].x.x);
     for(i=0;i<n;i++)scanf("%d",&ms[i].x.y);
     q=0;
     for(i=0;i<n;i++)
     {
      ny[q++]=ms[i].x.y;
      ms[i].y=i;beg[i]=ms[i];
     }
     sort(ny,ny+q);
     q=unique(ny,ny+q)-ny;
     sort(ms,ms+n);
     memset(b,0,sizeof(b));
     memset(cnt,0,sizeof(cnt));
     for(i=0;i<n;i++)
     {
      if(i&&ms[i-1].x.x==ms[i].x.x)continue;
      a=i;
      while(a<n&&ms[a].x.x==ms[i].x.x)
      {
        upd(lower_bound(ny,ny+q,ms[a].x.y)-ny,1);
        a++;
      }
      for(j=i;j<a;j++)
      {
        int l=lower_bound(ny,ny+q,ms[j].x.y-k)-ny;
        int r=upper_bound(ny,ny+q,ms[j].x.y+k)-ny-1;
        cnt[ms[j].y]=sum(l,r);
      }
     }
     scanf("%d",&m);
     for(i=0;i<m;i++)
     {
      scanf("%d%d",&qu[i].x.x,&qu[i].x.y);
      qu[i].x.x--,qu[i].x.y--;
      qu[i].y=i;
     }
     sort(qu,qu+m,cmp);
     a=n-1;
     memset(ans,0,sizeof(ans));
     memset(tr,0,sizeof(tr));
     for(i=m-1;i>=0;i--)
     {
      int n1=qu[i].x.x,n2=qu[i].x.y;
      int cm=max(beg[n1].x.x,beg[n2].x.x);
      while(a>=0&&ms[a].x.x>=cm)
      {
       upd1(lower_bound(ny,ny+q,ms[a].x.y)-ny,cnt[ms[a].y]);
       a--;
      }
      int l=max(beg[n1].x.y,beg[n2].x.y)-k;
      int r=min(beg[n1].x.y,beg[n2].x.y)+k;
      if(l>r)continue;
      l=lower_bound(ny,ny+q,l)-ny;
      r=upper_bound(ny,ny+q,r)-ny-1;
      if(l>r)continue;
      ans[qu[i].y]=sum1(l,r);
     }
     for(i=0;i<m;i++)
     {
      if(ans[i]==0)ans[i]=-1;
      printf("%d\n",ans[i]);
     }
    }
    return 0;
}
