#include<bits/stdc++.h>

using namespace std;

#define pii pair<int,int>
#define ll long long
#define N (int)(3e5+10)
#define mod 1000000007
#define mp make_pair
#define pb push_back
#define nd second
#define st first
#define inf mod
#define endl '\n'
#define sag (sol|1)
#define sol (root<<1)
#define ort ((bas+son)>>1)
#define bit(x,y) ((x>>y)&1)

int F[N],i,j,k,n,m,x,y,z;
int a[N],r[N],St[4*N],ans[N];
int B[N];
map<int,int> H;
vector< int > v;
pii A[N],C[N];
vector< pair< pii , int > > q;

bool cmp2(pair< pii , int > x,pair< pii , int > y){
	return C[x.st.st].nd > C[y.st.st].nd;
}

bool cmp(pii x,pii y){
	return x.nd<y.nd;
}

int upd1(int root,int bas,int son,int x,int y){
	if(bas > x or son < x)
		return St[root];

	if(bas == son)
		return St[root] = max(y,St[root]);

	return St[root] = max(upd1(sol,bas,ort,x,y) , upd1(sag,ort+1,son,x,y));
}

int que1(int root,int bas,int son,int x,int y){
	if(bas > y or son < x)
		return -1;

	if(x <= bas and son <= y)
		return St[root];

	return max(que1(sol,bas,ort,x,y) , que1(sag,ort+1,son,x,y));
}

int upd(int x){
	for( ; x<N ; x+= x&-x)
		F[x]++;
}

int que(int x){
	int res=0;
	for( ; x ; x -= x&-x)
		res += F[x];
	return res;
}

int main(){
	cin >> n >> k;

	for(i=1 ; i<=n ; i++){
		scanf("%d",&A[i].nd);
	}
	for(i=1 ; i<=n ; i++){
		scanf("%d",&A[i].st);
		v.pb(A[i].st);
		v.pb(A[i].st-k);
		v.pb(A[i].st+k);
		C[i] = A[i];
	}

	sort(v.begin(),v.end());

	int s = H[v[0]] = 1;

	for(i=1 ; i<v.size() ; i++)
		if(v[i] != v[i-1])
			H[v[i]] = ++s;


	sort(A+1,A+1+n,cmp);

	cin >> m;

	for(i=1 ; i<=n ; i++){
		int t=i;
		while(A[i].nd == A[t].nd){
			upd(H[A[i++].st]);
		}
		i=t;
		while(A[i].nd == A[t].nd){
			B[i] = que(H[A[i].st+k])-que(H[A[i].st-k]-1);
//			cout << i << " --> " << B[i] << endl;
			i++;
		}
		if(t!=i)
			i--;
	}
	
	for(i=1 ; i<=m ; i++){
		scanf("%d %d",&x,&y);
		if(C[x].nd < C[y].nd)
			swap(x,y);
		q.pb(mp(mp(x,y),i));
	}


	sort(q.begin(),q.end(),cmp2);

	int t = 0;

	memset(St,-1,sizeof St);

	for(i=n ; i>=1 ; i--){
		while(t<q.size() and C[q[t].st.st].nd == A[i+1].nd){
			int a = H[ max(C[q[t].st.st].st-k,C[q[t].st.nd].st-k)];
			int b = H[ min(C[q[t].st.st].st+k,C[q[t].st.nd].st+k)];
			ans[q[t].nd] = que1(1,1,N,a,b);
			t++;
		}
		upd1(1,1,N,H[A[i].st],B[i]);
	}
	while(t<q.size() and C[q[t].st.st].nd == A[i+1].nd){
		int a = H[ max(C[q[t].st.st].st-k,C[q[t].st.nd].st-k)];
		int b = H[ min(C[q[t].st.st].st+k,C[q[t].st.nd].st+k)];
		ans[q[i].nd] = que1(1,1,n,a,b);
		t++;
	}
	for(i=1 ; i<=m ; i++)
		printf("%d\n",ans[i]);
}
