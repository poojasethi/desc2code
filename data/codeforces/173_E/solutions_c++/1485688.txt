#include <stdio.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <assert.h>
#include <math.h>
#include <string.h>
using namespace std;
typedef long long LL;
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
#define FOREACH(it,vec) for(typeof((vec).begin()) it = (vec).begin(); it != (vec).end(); it++)
#define MOD(a,b) (((a)%(b)+(b))%(b))
#define REP(i,n) for (int i = 0; i < (n); i++)

int N, K, Q;
int res[100000];
int alt[100000];

struct me {
	int r, a, u;
	int iq;
};
bool operator<(const me &a, const me &b) {
	return a.r < b.r;
}
me m[100001];
me ms[100001];

int A = 0;
vector<int> sal;
map<int,int> ali;

int bit[1000001];
void add(int i) {
	i++;
	while(i <= A+5) {
		bit[i]++;
		i += i&-i;
	}
}
int query(int i) {
	i++;
	int erg = 0;
	while(i) {
		erg += bit[i];
		i -= i&-i;
	}
	return erg;
}

int qe[100000];
vector<me> evs;

int seg[10000000];
void sett(int x, int v, int i = 0, int a = 0, int b = A) {
	if (x < a || b < x)
		return;
	if (a == b) {
		seg[i] = max(seg[i],v);
		return;
	}
	int m = (a+b)/2;
	sett(x,v,2*i+1,a,m);
	sett(x,v,2*i+2,m+1,b);
	seg[i] = max(seg[2*i+1],seg[2*i+2]);
}
int get(int x, int y, int i = 0, int a = 0, int b = A) {
	if (y < a || b < x)
		return -1;
	if (x <= a && b <= y)
		return seg[i];
	int m = (a+b)/2;
	return max(get(x,y,2*i+1,a,m),get(x,y,2*i+2,m+1,b));
}

int main() {
	scanf("%d %d", &N, &K);
	for (int i = 0; i < N; i++)
		scanf("%d", &m[i].r);
	for (int i = 0; i < N; i++) {
		scanf("%d", &m[i].a);
		sal.push_back(m[i].a);
		sal.push_back(m[i].a-K);
		sal.push_back(m[i].a+K);
	}
	for (int i = 0; i < N; i++)
		ms[i] = m[i];
	scanf("%d", &Q);
	for (int i = 0; i < Q; i++) {
		int a, b;
		scanf("%d %d", &a, &b);
		a--; b--;
		me q = {max(ms[a].r,ms[b].r), 
		max(ms[a].a-K,ms[b].a-K), 
		min(ms[a].a+K,ms[b].a+K),
		i};
		evs.push_back(q);
		sal.push_back(q.a);
		sal.push_back(q.u);
	}
	sort(sal.begin(),sal.end());
	for (int i = 0; i < (int)sal.size(); ) {
		//printf("%d: %d\n", A, sal[i]);
		ali[sal[i]] = A;
		A++;
		i++;
		while(i < (int)sal.size() && sal[i] == sal[i-1])
			i++;
	}
	sort(m,m+N);
	for (int i = 0; i < N; ) {
		for (int k = i; k < N && m[k].r == m[i].r; k++) {
			add(ali[m[k].a]);
		}
		int r = m[i].r;
		while(i < N && m[i].r == r) {
			m[i].u = query(ali[m[i].a+K])-query(ali[m[i].a-K]-1);
			i++;
		}
	}
	for (int i = 0; i < N; i++) {
		//printf("%d,%d: %d\n", m[i].r, m[i].a, m[i].u);
		evs.push_back(m[i]);
		evs.back().iq = -1;
	}
	for (int i = 0; i < 10000000; i++)
		seg[i] = -1;
	sort(evs.begin(),evs.end());
	for (int i = evs.size()-1; i >= 0; ) {
		int r = evs[i].r;
		for (int k = i; k >= 0 && evs[k].r == r; k--) {
			me ev = evs[k];
			if (ev.iq != -1) {
			} else {
				sett(ali[ev.a],ev.u);
			}
		}
		for (int k = i; k >= 0 && evs[k].r == r; k--) {
			me ev = evs[k];
			if (ev.iq != -1) {
				qe[ev.iq] = get(ali[ev.a],ali[ev.u]);
			} else {
			}
		}
		while(i >= 0 && evs[i].r == r)
			i--;
	}
	for (int i = 0; i < Q; i++)
		printf("%d\n",qe[i]);
	return 0;
}
