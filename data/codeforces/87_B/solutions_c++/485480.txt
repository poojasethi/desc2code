#include <iostream>
#include <string>
#include <map>

#define rep(i,x) for(int i=0; i<x; ++i)

using namespace std;

string parse(string& what, int& ap, int& ast)
{
	ap=0;
	ast=0;
	int i=0, m=what.size();
	string ess="";
	while(i<m && what[i]=='&') { i++; ap++; }
	while(i<m && what[i]!='*') { ess += what[i]; i++; }
	while(i<m && what[i]=='*') { ast++; i++; }
	
	return ess;
}

int main()
{
	int n; cin >> n;
	int ap, ast;

	map<string,int> M;
	
	M["void"] = 0;
	M["errtype"] = -1;

#define FIND(what,where) (where.find(what) != where.end())

	rep(i,n)
	{
		string s; cin >> s;
		if (s=="typeof")
		{
			string name; cin >> name;
			name = parse(name,ap,ast);
			
			if (!FIND(name,M) || M[name]==-1) cout << "errtype";
			else
			{
				int v = M[name];
				v += ast - ap;
				v = max(v,-1);
				if (v==-1) cout << "errtype";
				else
				{
					cout << "void";
					rep(j,v) cout << "*";
				}
			}
			cout << endl;
		}
		else
		{
			string what, alias; cin >> what >> alias;
			what = parse(what,ap,ast);
			
			if (!FIND(what,M) || M[what] == -1) M[alias] = -1;
			else
			{
				int v = M[what] + ast - ap;
				v = max(v,-1);
				M[alias] = v;
			}
		}
	}

	return 0;
}
