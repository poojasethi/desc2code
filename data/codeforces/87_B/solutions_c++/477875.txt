#include <stdio.h>
#include <string>
#include <map>
#include <iostream>
using namespace std;

struct type
{
	bool errtype;
	int scnt;
	type(bool _errtype=true, int _scnt=0): errtype(_errtype), scnt(_scnt) {}
	type operator +(int b)
	{
		return type(errtype,scnt+b);
	}
};

map<string,type> t;

int main()
{
	t["void"]=type(false,0);
	int T;
	int p,s;
	string in,A,B;
	scanf("%d",&T);
	while(T--)
	{
		cin>>in;
		if(in=="typedef")
		{
			cin>>A>>B;
			for(p=0;A[p]=='&';p++);
			for(s=A.size()-1;A[s]=='*';s--);
			s=A.size()-s-1;
			A=A.substr(p,A.size()-p-s);
			t[B]=t[A]+(s-p);
			if(t[B].scnt<0)
				t[B].errtype=true;
		}
		else
		{
			cin>>A;
			for(p=0;A[p]=='&';p++);
			for(s=A.size()-1;A[s]=='*';s--);
			s=A.size()-s-1;
			A=A.substr(p,A.size()-p-s);
			type tmp=t[A]+(s-p);
			if(tmp.scnt<0)
				tmp.errtype=true;
			if(tmp.errtype==true)
			{
				cout<<"errtype"<<endl;
			}
			else
			{
				cout<<"void";
				while(tmp.scnt--)
					putchar('*');
				cout<<endl;
			}
		}
	}
	return 0;
}
