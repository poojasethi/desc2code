#include<cstdio>
#include<cstring>
#include<algorithm>
#include<map>
using namespace std;

typedef unsigned u32;
map<u32,int> rec;

char buf[64];

u32 hash(const char *ptr) {
	u32 ret=0;
	while(*ptr)ret=ret*129+(unsigned)(*ptr++)+1;
	return ret;
}

int reader() {
	int a,b,level=0;
	map<u32,int>::iterator it;
	a=0;
	b=strlen(buf);
	while(buf[a]=='&'){a++;level--;}
	while(buf[b-1]=='*'){b--;level++;}
	buf[b]='\0';
//printf("a=%d, b=%d, level=%d\n",a,b,level);
	it=rec.find(hash(buf+a));
	return it!=rec.end()&&it->second>=0&&it->second+level>=0?it->second+level:-1;
}

int main() {
	int c,tmp;
	rec.insert(make_pair(hash("void"),0));
	scanf("%d",&c);
	while(c--) {
		scanf("%s",buf);
		if(!strcmp(buf,"typedef")) {
			scanf("%s",buf);
			tmp=reader();
			scanf("%s",buf);
//printf("#define %u %d\n",hash(buf),tmp);
			rec[hash(buf)]=tmp;
		} else if(!strcmp(buf,"typeof")) {
			scanf("%s",buf);
			tmp=reader();
			if(tmp>=0) {
				printf("void");
				while(tmp--)putchar('*');
				puts("");
			} else {
				puts("errtype");
			}
		}
	}
	return 0;
}
