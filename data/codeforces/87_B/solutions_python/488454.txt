# -*- coding: UTF-8 -*-

# from itertools import *
# from collections import defaultdict

# def gcd(a,b):
#     while b > 0: a,b = b, a%b
#     return a

# def baseN(num,b,numerals="0123456789abcdefghijklmnopqrstuvwxyz"):
#     return ((num == 0) and  "0" ) or ( baseN(num // b, b).lstrip("0") + numerals[num % b])

T = input()
# St = raw_input()
# data1 = map(int, raw_input().split())
data2 = [ raw_input().split() for i in xrange(T) ]
types = {"void":"void", "errtype":"errtype"}

def define_type(what, as_type):
    while as_type[0] == "&" and as_type[-1] == "*":
        as_type = as_type[1:-1]
    base_type = as_type.replace("&", "").replace("*", "")
    try:
        base_type = types[base_type]
    except KeyError:
        types[what] = "errtype"
        return 0
    new_type = as_type.replace(as_type.replace("&", "").replace("*", ""), base_type)
    
    while new_type[0] == "&" and new_type[-1] == "*":
        new_type = new_type[1:-1]
    if new_type[-5:] == "&void" or "errtype" in new_type:
        new_type = "errtype"
        
    types[what] = new_type
    
def get_type(what):
    try:
        main_type = types[what.replace("&", "").replace("*", "")]
    except KeyError:
        print "errtype"
        return 0
    
    what = what.replace(what.replace("&", "").replace("*", ""), main_type)
    while what[0] == "&" and what[-1] == "*":
        what = what[1:-1]
    
    if what[-5:] == "&void" or "errtype" in what:
        what = "errtype"
    print what

for comm in data2:
    if comm[0] == "typedef":
        define_type(comm[2], comm[1])
    else:
        get_type(comm[1] )
