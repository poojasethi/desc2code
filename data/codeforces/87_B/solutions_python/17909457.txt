#!/usr/bin/python

from collections import deque

def ir():
    return int(raw_input())

def ia():
    line = raw_input()
    line = line.split()
    return map(int, line)

n = ir()

def parse_typedef(s):
    global nt, ot, deep
    
    ot = s
    ot = ot.replace("*", "")
    ot = ot.replace("&", "")

    deep   = 0
    deep  += s.count("*")
    deep  -= s.count("&")

tbl = dict()
tbl['void'] = 0
tbl['errtype'] = None

def reg_type():
    global nt, ot, deep
    
    if not ot in tbl:
        tbl[nt] = 'errtype'
        return

    if tbl[ot]=='errtype':
        tbl[nt] = 'errtype'
        return

    lvl  = tbl[ot]
    if lvl==None:
        tbl[nt] = 'errtype'
        return
    
    nlvl = lvl + deep
    if nlvl<0:
        tbl[nt] = 'errtype'
    else:
        tbl[nt] = nlvl

def pp(lvl):
    if lvl=='errtype':
        print 'errtype'
    else:
        lvl = lvl + deep
        if lvl<0:
            print 'errtype'
        else:
            ans  = "void"
            ans += "*" * lvl
            print ans

for i in range(n):
    line = raw_input()
    line = line.split()
    if line[0]=="typedef":
        nt = line[2]
        parse_typedef(line[1])
        reg_type()
    else:
        parse_typedef(line[1])
        if not ot in tbl:
            print "errtype"
        else:
            pp(tbl[ot])
    
    
