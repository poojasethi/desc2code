#!/usr/bin/python
import sys
def gcd(a,b):
	while b>0:
		a,b=b,a%b
	return a

read_ints= lambda: map(int,sys.stdin.readline().split())

read_line= lambda: sys.stdin.readline().strip()

def parse(tok):
  a=tok.count('&')
  b=tok.count('*')
  tok=tok.replace('&','')
  tok=tok.replace('*','')
  return [tok,a,b]

n=read_ints()[0]
mem={}
mem['errtype']=['errtype',0,0]
mem['void']=['void',0,0]
def get_one(tok):
  base=parse(tok)
  if base[0] not in mem:
    return ['errtype',0,0]
  add=mem[base[0]]
#print 'base=',base
  base[1]+=add[1]
  base[2]+=add[2]
  base[0]=add[0]
# print 'base=',base
  if base[0] == 'errtype' or base[1]>base[2]: return ['errtype',0,0]
  return base

def print_one(tok):
  return tok[0]+('*'*(tok[2]-tok[1]))

for i in range(n):
  line=read_line()
  tok=line.split(' ')
  if tok[0] in ('typedef'):
#print tok[2],get_one(tok[1])
    mem[tok[2]]=get_one(tok[1])
#print 'set ',tok[2]
  else:
#print tok[1],mem[tok[1]]
    print print_one(get_one(tok[1]))
#print mem['ptv']
