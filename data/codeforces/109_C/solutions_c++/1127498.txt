#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 100*1000+10;

bool mark[MAXN];
vector <int> g[MAXN];
int N, u, v, w;
long long ans, size;

int dfs(int u)
{
	int cnt = 1;
	if (mark[u])
		return 0;
	mark[u] = 1;
	for (int i = 0 ; i < g[u].size() ; i++)
		cnt += dfs(g[u][i]);
	return cnt;
}

bool isLucky(int n)
{
	while(n)
	{
		if (n%10 != 4 && n%10 != 7)
			return 0;
		n /= 10;
	}
	return 1;
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> N;
	for (int i = 0 ; i < N-1 ; i++)
	{
		cin >> u >> v >> w;
		u--;
		v--;
		if (!isLucky(w))
		{
			g[u].push_back(v);
			g[v].push_back(u);
		}
	}
	for (int i = 0 ; i < N ; i++)
	{
		size = dfs(i);
		ans += size*(N-size)*(N-size-1);
	}
	cout << ans << endl;
	return 0;
}
