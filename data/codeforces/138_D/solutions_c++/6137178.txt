#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
using namespace std;

const int N = 50;

char mz[N][N];
int mem[N][N][N][N][2];
int n, m;

int sg(int u1, int u2, int v1, int v2, int d) {
    int &res = mem[u1][u2][v1][v2][d];
    if (res != -1)
        return res;
    set<int> mex;
    for (int u = u1; u <= u2; u++)
        for (int v = v1; v <= v2; v++)
            if (u % 2 == d && (v + m) % 2 == d) {
                int x = (u + v - m) / 2;
                int y = u - x;
                if (x >= 1 && x <= n && y >= 1 && y <= m) {
                    if (mz[x][y] == 'L')
                        mex.insert(sg(u1, u - 1, v1, v2, d) ^ sg(u + 1, u2, v1, v2, d));
                    else if (mz[x][y] == 'R')
                        mex.insert(sg(u1, u2, v1, v - 1, d) ^ sg(u1, u2, v + 1, v2, d));
                    else
                        mex.insert(sg(u1, u - 1, v1, v - 1, d) ^ sg(u + 1, u2, v1, v - 1, d) ^ sg(u1, u - 1, v + 1, v2, d) ^ sg(u + 1, u2, v + 1, v2, d));
                }
            }
    res = 0;
    while (mex.count(res))
        res++;
    return res;
}

int main() {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++)
        scanf("%s", mz[i] + 1);
    memset(mem, -1, sizeof(mem));
    int ans = sg(2, n + m, 1, n + m - 1, 0) ^ sg(2, n + m, 1, n + m - 1, 1);
    if (ans)
        puts("WIN");
    else
        puts("LOSE");
    return 0;
}
