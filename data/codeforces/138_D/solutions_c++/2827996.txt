#include<cstdio>
#include<cstdlib>
#include<cstring>
const int N = 25, M = N * 2, delta = 20;
int n, m, kind, f[M][M][M][M];
char s[N][N];
int work(int l, int r, int u, int d)
{
    if (f[l][r][u + delta][d + delta] != -1)
    return(f[l][r][u + delta][d + delta]);
    bool get[N * N];
    memset(get, false, sizeof(get));
    int i, j, temp;
    for (i = 1; i <= n; i++)
    for (j = 1; j <= m; j++)
    if (i + j >= l && i + j <= r && i - j >= u 
    && i - j <= d && (i + j) % 2 == kind)
    {
        if (s[i][j] == 'L')
        temp = work(l, i + j - 1, u, d) ^ work(i + j + 1, r, u, d);
        else if (s[i][j] == 'R')
        temp = work(l, r, u, i - j - 1) ^ work(l, r, i - j + 1, d);
        else
        temp = work(l, i + j - 1, u, i - j - 1) ^ work(l, i + j - 1, i - j + 1, d)
        ^ work(i + j + 1, r, u, i - j - 1) ^ work(i + j + 1, r, i - j + 1, d);
        get[temp] = true;
    }
    for (i = 0; i <= n * m + 1; i++)
    if (!get[i]) break;
    if (i == n * m + 2) i = 0;
    f[l][r][u + delta][d + delta] = i;
    return(i);
}
int main()
{
    int i, j, temp;
    scanf("%d %d", &n, &m);
    for (i = 1; i <= n; i++)
    scanf("%s", s[i] + 1);
    memset(f, -1, sizeof(f));
    kind = 0;
    temp = work(2, m + n, 1 - m, n - 1);
    memset(f, -1, sizeof(f));
    kind = 1; 
    temp ^= work(2, m + n, 1 - m, n - 1);
    if (temp) printf("WIN");
    else printf("LOSE");
    return(0);
}
