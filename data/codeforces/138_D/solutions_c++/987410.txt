#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <cstdlib>
#include <cstring>
using namespace std;

typedef long long LL;

char a[22][22];
int N, M, sg[44][44][44][44];

int compute_sg(int d1, int d2, int d3, int d4, int parity)
{
	if (d1 > d2 || d3 > d4)
		return 0;
	int &ret = sg[d1][d2][d3][d4];
	if (ret != -1)
		return ret;
	set<int> s;
	for (int i = 0; i < N; ++i)
		for (int j = 0; j < M; ++j)
		{
			if ((i+j) % 2 != parity) continue;
			int d5 = i +j, d6 = N + j - i - 1;
			if (d5 < d1 || d5 > d2) continue;
			if (d6 < d3 || d6 > d4) continue;

			if (a[i][j] == 'L')
				s.insert(compute_sg(d1, d5-1, d3, d4, parity) ^ compute_sg(d5+1, d2, d3, d4, parity));
			else
				if (a[i][j] == 'R')
					s.insert(compute_sg(d1, d2, d3, d6-1, parity) ^ compute_sg(d1, d2, d6+1, d4, parity));
				else
					s.insert(compute_sg(d1, d5 - 1, d6 + 1, d4, parity) ^ compute_sg(d5 + 1, d2, d6 + 1, d4, parity)
					  ^ compute_sg(d5 + 1, d2, d3, d6 - 1, parity) ^ compute_sg(d1, d5 - 1, d3, d6 - 1, parity));
		}
	ret = 0;
	while (s.find(ret) != s.end()) ++ret;
	return ret;
}

int main()
{
	cin>>N>>M;
	for (int i = 0; i < N; ++i)
		cin>>a[i];

	int xorsum = 0;

	memset(sg, -1, sizeof(sg));
	xorsum ^= compute_sg(0, N+M-2, 0, N+M-2, 0);
	memset(sg, -1, sizeof(sg));
	xorsum ^= compute_sg(0, N+M-2, 0, N+M-2, 1);
	
	if (xorsum == 0)
		cout<<"LOSE\n";
	else
		cout<<"WIN\n";

	return 0;
}