#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
using namespace std;

const int maxn = 42;

int n,m;
int F[maxn][maxn][maxn][maxn][2];
char che[maxn][maxn];

int find(int x0,int x1,int y0,int y1,int kin)
{
    if (F[x0][x1][y0][y1][kin] != -1)
        return F[x0][x1][y0][y1][kin];
    set < int > use;
    int i,j,xm,ym,now;
    for (i = 0; i < n; ++i)
        for (j = 0; j < m; ++j)
            if (((i+j) & 1) == kin)
            {
                xm = i+j,ym = i-j+m;
                if (xm >= x0 && xm < x1 && ym >= y0 && ym < y1)
                {
                    now = 0;
                    if (che[i][j] == 'L')
                        now = find(x0,xm,y0,y1,kin) ^ find(xm+1,x1,y0,y1,kin);
                    if (che[i][j] == 'R')
                        now = find(x0,x1,y0,ym,kin) ^ find(x0,x1,ym+1,y1,kin);
                    if (che[i][j] == 'X')
                        now = find(x0,xm,y0,ym,kin) ^ find(x0,xm,ym+1,y1,kin) ^
                            find(xm+1,x1,y0,ym,kin) ^ find(xm+1,x1,ym+1,y1,kin);
                    use.insert(now);
                }
            }
    for (now = 0; use.find(now) != use.end(); ++now) ;
    return F[x0][x1][y0][y1][kin] = now;
}

int main()
{

    scanf("%d%d",&n,&m);
    for (int i = 0; i < n; ++i)
        scanf("%s",che[i]);
    memset(F,-1,sizeof(F));
    printf((find(0,n+m,0,n+m,0) ^ find(0,n+m,0,n+m,1)) ? "WIN":"LOSE");

    return 0;
}
