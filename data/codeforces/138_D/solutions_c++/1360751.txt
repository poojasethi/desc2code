#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;

const int	MAX_N	= 40 + 2;
int			N, M;
char		s		[MAX_N][MAX_N];
int			sg		[2][MAX_N][MAX_N][MAX_N][MAX_N];

int DFS(int sta, int l, int r, int u, int d)
{
	//printf("%d %d %d %d %d\n", sta, l, r, u, d);
	if (l > r || u > d) return 0;
	if (sg[sta][l][r][u + 19][d + 19] >= 0) 
		return sg[sta][l][r][u + 19][d + 19];
	int vis[400], x;
	memset(vis, 0, sizeof vis);
	for(int i = 0; i < N; ++ i)
		for(int j = 0; j < M; ++ j)
			if (((i + j) & 1) == sta && i + j >= l && i + j <= r && i - j >= u && i - j <= d) {
				switch (s[i][j]) {
					case 'L':
						x = DFS(sta, l, i + j - 1, u, d) ^ DFS(sta, i + j + 1, r, u, d);
						break;
					case 'R':
						x = DFS(sta, l, r, u, i - j - 1) ^ DFS(sta, l, r, i - j + 1, d);
						break;
					case 'X':
						x = DFS(sta, l, i + j - 1, u, i - j - 1) ^ DFS(sta, i + j + 1, r, u, i - j - 1)
							^ DFS(sta, l, i + j - 1, i - j + 1, d) ^ DFS(sta, i + j + 1, r, i - j + 1, d);
						break;
				}
				vis[x] = true;
			}
	int i; for(i = 0; vis[i]; ++ i);
	sg[sta][l][r][u + 19][d + 19] = i;
	return i;
}

int main()
{
	scanf("%d%d", &N, &M);
	for(int i = 0; i < N; ++ i) scanf("%s", s[i]);
	memset(sg, -1, sizeof sg);
	if (DFS(0, 0, 38, -19, 19) ^ DFS(1, 0, 38, -19, 19)) puts("WIN");
	else puts("LOSE");
	return 0;
}
