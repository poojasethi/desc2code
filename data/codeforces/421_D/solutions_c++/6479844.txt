#include <iostream>
#include <cstdio>
#include <map>
#include <algorithm>
#define MAX 300000
#define FOR(i, n) for (int i = 0; i < (n); ++i)
#define TR(it, c) for (typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
using namespace std;

typedef pair<int, int> pii;

int n, p, degree[MAX], sdegree[MAX];
map<pii, int> overlaps;

int main() {
  scanf("%d%d", &n, &p);
  FOR (i, n) {
    int a, b;
    scanf("%d%d", &a, &b);
    --a; --b;
    ++degree[a]; ++degree[b];
    ++overlaps[(a < b) ? make_pair(a, b) : make_pair(b, a)];
  }

  FOR (i, n) sdegree[i] = degree[i];
  sort(sdegree, sdegree + n);

  long long total = 0;
  FOR (i, n) {
    int viable = n - (lower_bound(sdegree, sdegree + n, p - degree[i]) - sdegree);
    if (degree[i] >= p - degree[i]) --viable;
    total += viable;
  }

  total >>= 1;
  TR (it, overlaps) {
    int a = it->first.first, b = it->first.second, c = it->second;
    if (degree[a] + degree[b] >= p)
      if (degree[a] + degree[b] - c < p)
        --total;
  }

  printf("%I64d\n", total);
  return 0;
}
