#include <iostream>
#include <map>
#include <cstdio>
#include <algorithm>
using namespace std;

typedef long long int64;
const int MAX_N = 300000 + 2;
int cnt[MAX_N];
map<int64, int> coll;

int64 combine(int a, int b)
{
	if (a > b) {
		a += b;
		b = a - b;
		a = a - b;
	}
	return (int64)a * (int64)MAX_N + (int64)b;
}

inline int max(int a, int b)
{
	return a > b ? a : b;
}

int main(void)
{
	int n, p, x, y, i;
	cin >> n >> p;
	for (i = 0; i < n; i++) {
		scanf("%d%d", &x, &y);
		cnt[x]++;
		cnt[y]++;
		coll[combine(x, y)]++;
	}
	
	int64 ans = 0;
	map<int64, int>::iterator it;
	for (it = coll.begin(); it != coll.end(); ++it) {
		x = (int)(it->first / MAX_N);
		y = (int)(it->first % MAX_N);
		int tmp = cnt[x] + cnt[y];
		if (tmp >= p && tmp - it->second < p) {
			ans--;
		}
	}
	
	sort(cnt + 1, cnt + n + 1);
	int up = n;
	for (i = 1; i < n; i++) {
		up = max(up, i);
		while (i < up && cnt[i] + cnt[up] >= p) {
			up--;
		}
		ans += n - up;
	}
	
	printf("%I64d\n", ans);
	return 0;
}
