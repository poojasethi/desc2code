#include<iostream>
#include<cstdio>
#include<cstring>
#include<map>
#include<algorithm>
#define X first
#define Y second
#define mkp make_pair
using namespace std;

const int maxn = 3e5 + 10;
typedef __int64 LL;
int n, m;

int agr[maxn];
map<pair<int, int>, int> mp;
map<pair<int, int>, int>::iterator iter;

int main() {
	memset(agr, 0, sizeof(agr));
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) {
		int u, v;
		scanf("%d%d", &u, &v);
		if (u > v) swap(u, v);
		agr[u]++; agr[v]++;
		mp[mkp(u, v)]++;
	}
	LL ans = 0;
	for (iter = mp.begin(); iter != mp.end(); iter++) {
		int u = (iter->X).X, v = (iter->X).Y, cnt = iter->Y;
		if (agr[u] + agr[v] >= m&&agr[u] + agr[v] - cnt < m) ans--;
	}
	sort(agr + 1, agr + n + 1);
	//for (int i = 1; i <= n; i++) printf("%d ", agr[i]);
	//printf("\n");
	int st = 1, ed = n;
	for (; st < n; st++) {
		while (ed > st&&agr[st] + agr[ed] >= m) ed--;
		ans += min(n - ed,n-st);
	}
	printf("%I64d\n", ans);
	return 0;
}