
#include<iostream>
#include<list>
#include<algorithm>
#include<set>
using namespace std;
struct P{
	int num,v;
};
P d[500000];
multiset<int> mm[500000];
int now[500000];
int n,m,x,y;
long long ans=0;
bool cmp(P x,P y)
{
	return x.v>y.v;
}
int solve(int v)
{
	int l,r,mid;
	l=1;
	r=n;
	do
	{
		mid=(l+r)/2;
		if(v<=d[mid].v)
			l=mid;
		else
			r=mid-1;
	}while(l+1<r);
	if(d[l+1].v>=v)return l+1;
	return l;
}
int main()
{
	cin>>n>>m;
	for(int i=1;i<=n;i++)
	{
		cin>>x>>y;
		d[i].num=i;
		d[x].v++;
		d[y].v++;
		mm[x].insert(y);
		mm[y].insert(x);
	}
	sort(&d[1],&d[n+1],cmp);
	for(int i=1;i<=n;i++)
		now[d[i].num]=i;
	for(int i=1;i<=n;i++)
	{
		if(d[i].v>=m)
		{
			ans+=n-i;
			continue;
		}
		int p=solve(m-d[i].v);
		if(p<=i)continue;
		ans+=p-i;
		set<int>::iterator it;
		while(!mm[d[i].num].empty())
		{
			it=mm[d[i].num].begin();
			if(now[*it]>i&&now[*it]<=p&&d[i].v+d[now[*it]].v-mm[d[i].num].count(*it)<m)
				ans--;
			mm[d[i].num].erase(*it);
		}
	}
	cout<<ans<<endl;
	return 0;
}
