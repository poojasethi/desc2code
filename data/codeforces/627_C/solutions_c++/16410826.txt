#include <vector>
#include <cassert>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstdio>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

struct Segment
{
	ll l, r, p;
	Segment(ll l=0, ll r=0, ll p=0):l(l), r(r), p(p){}
	bool contains(const Segment& b) const
	{
		return l<=b.l && b.r<=r;
	}
};

int main()
{
	int n,d,m;
	scanf("%d%d%d",&d,&n,&m);
	vector<pair<int,int> > v;
	v.resize(m);
	REP(i,m)
		scanf("%d%d",&v[i].first, &v[i].second);
	sort(v.begin(), v.end());
	vector<Segment> s;
	s.push_back(Segment(0,n,0));
	for(int i=0;i<m;i++)
	{
		Segment candidate(v[i].first, min(v[i].first+n,d), v[i].second);

		if(s.back().r<candidate.l)
		{
			printf("-1\n");
			return 0;
		}
		while(candidate.contains(s.back()) && candidate.p<=s.back().p)
			s.pop_back();
		if(s.back().p<=candidate.p)
			candidate.l=max(candidate.l, s.back().r);
		else
			s.back().r=min(s.back().r, candidate.l);
		s.push_back(candidate);
	}
	if(s.back().r<d)
		printf("-1\n");
	else
	{
		ll res=0;
		REP(i,s.size())
			res+=(s[i].r-s[i].l)*s[i].p;
		cout<<res<<endl;
	}
	return 0;
}
