#include <cstdio>
#include <iostream>
#include <algorithm>

using namespace std;

const int N = 2000000 + 10;

int d, n, m;
pair<int, int> a[N];
pair<int, int> que[N];

void solve()
{
	cin >> d >> n >> m;
	for(int i = 0; i < m; ++ i) {
		scanf("%d%d", &a[i].first, &a[i].second);
	}
	a[m ++] = make_pair(0, 0);
	a[m ++] = make_pair(d, 0);
	sort(a, a + m);
	for(int i = 1; i < m; ++ i) {
		if (a[i].first - a[i - 1].first > n) {
			cout << -1 << endl;
			return;
		}
	}

	long long lstP = 0;
	long long lstV = 0;

	int qh = 0, qt = 0;
	que[qt ++] = a[0];
	long long cost = 0;

	for(int i = 1; i < m; ++ i) {
		long long need = a[i].first - a[i - 1].first;
		for( ; need; ) {
			long long cur = n - (lstV - (que[qh].first - lstP));
			long long by = min(cur, need);
			cost += by * que[qh].second;
			need -= by;
			lstV = lstV - (que[qh].first - lstP) + by;
			lstP = que[qh].first;
			if (lstV == n) {
				qh ++;
			}
		}
		for( ; qt > qh && que[qt - 1].second > a[i].second; qt --);
		que[qt ++] = a[i];
	}
	cout << cost << endl;
}

int main()
{
	solve();
	return 0;
}
