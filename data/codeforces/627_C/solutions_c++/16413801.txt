#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstdlib>

using namespace std;

typedef long long int ll;

int d,tank,n;
ll sol=0;

const int limite=1000000;

int i1=0;
int i2=0;
ll precio[limite];
ll cuanto[limite];

int main()
{
  ios::sync_with_stdio(false);
  cin>>d>>tank>>n;
  vector<pair<ll,ll> > v(n);
  for (int i=0;i<n;i++)
    cin>>v[i].first>>v[i].second;
  v.push_back(pair<ll,ll> (d,0));
  sort(v.begin(),v.end());
  ll posant=0;
  cuanto[0]=tank;
  for (int i=0;i<int(v.size());i++) {
    ll posact=v[i].first;
    ll priceact=v[i].second;
    if (posant+tank<posact) {
      cout<<-1<<endl;
      exit(0);
    }
    ll dif=posact-posant;
    ll difini=dif;
    while (dif) {
      if (cuanto[i1]<=dif) {
	sol+=precio[i1]*cuanto[i1];
	dif-=cuanto[i1];
	i1++;
      } else {
	sol+=precio[i1]*dif;
	cuanto[i1]-=dif;
	dif=0;
      }
    }
    while (i1<=i2 and priceact<precio[i2]) {
      difini+=cuanto[i2];
      i2--;
    }
    i2++;
    precio[i2]=priceact;
    cuanto[i2]=difini;
    posant=posact;
  }
  cout<<sol<<endl;
}
/*
      pair<ll,ll> e=q.top();
      q.pop();
      ll price=e.first;
      ll amount=e.second;
      if (amount<=dif) {
	sol+=price*amount;
	dif-=amount;
      } else {
	sol+=price*dif;
	q.push(pair<ll,ll> (price,amount-dif));
	dif=0;
      }

 */
