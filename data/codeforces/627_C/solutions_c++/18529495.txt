#include <cstdio>
#include <cstdlib>

int que[200008];
int xs[200008];
int ps[200008];
int ind_sort[200008];
int cmp(const void *ka,const void *kb) {
	int a=*(int *)ka;
	int b=*(int *)kb;
	return xs[a]-xs[b];
}
int main() {
	int d,n,m;
	scanf("%d%d%d",&d,&n,&m);
	for(int i=0;i<m;i++) {
		scanf("%d%d",&xs[i],&ps[i]);
		ind_sort[i]=i;
	}
	qsort(ind_sort,m,sizeof(int),cmp);
	int qst=0;
	int qls=-1;
	int rem=n;
	int nwpos=0;
	xs[m]=d;
	ind_sort[m]=m;
	long long sol=0;
	for(int i=0;i<=m;i++) {
		int nextpos=ind_sort[i];
		if(xs[nextpos]-nwpos>n) {
			printf("-1\n");
			return 0;
		}
		while(nwpos+rem<xs[nextpos]) {
			int addpos=que[qst];
			if(n-rem-(nwpos-xs[addpos])<=xs[nextpos]-nwpos-rem) {
				sol+=(long long)ps[addpos]*(n-rem-(nwpos-xs[addpos]));
				rem+=n-rem-(nwpos-xs[addpos]);
				qst++;
			} else {
				sol+=(long long)ps[addpos]*(xs[nextpos]-nwpos-rem);
				rem+=xs[nextpos]-nwpos-rem;
			}
		}
		rem-=xs[nextpos]-nwpos;
		nwpos=xs[nextpos];
		if(i<m) {
			while(qst<=qls) {
				if(ps[nextpos]>ps[que[qls]]) break;
				qls--;
			}
			que[++qls]=nextpos;
		}
	}
	printf("%I64d\n",sol);
	return 0;
}
