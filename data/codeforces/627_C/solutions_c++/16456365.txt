#include<stdio.h>
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long LL;
const int maxn=2E5+77;
const int log2maxn=19;

struct GS{
	int x,p;
	bool operator <(const GS &o)const{
		return x<o.x;
	}
	void read(){scanf("%d%d",&x,&p);}
}gs[maxn];


int D,N,M,X[maxn];

int st[maxn][log2maxn];
int minpos(int l,int r){
	int x=X[r-l];
	int a=st[l][x],
	    b=st[r-(1<<x)+1][x];
	return gs[a].p>gs[b].p?b:a;
}

void initst(){
	for(int i=0;i<=M;++i) st[i][0]=i;
	for(int j=1;j<log2maxn;++j) for(int i=0;i<=M;++i){
		int ni=i+(1<<(j-1));
		if(ni<=M){
			if(gs[st[i][j-1]].p>gs[st[ni][j-1]].p) st[i][j]=st[ni][j-1];
			else st[i][j]=st[i][j-1];
		}else st[i][j]=st[i][j-1];
	}
	int t=0;
	for(int i=1;i<maxn;i<<=1) X[i]=t++;
	for(int i=1;i<maxn;++i) if(!X[i]) X[i]=X[i-1];
}

LL solve(int l,int r,int n){
	if((gs[r].x-gs[l].x)<=n) return 0;
	if(l==r-1) throw(1);
	int p=minpos(l+1,r-1);
	int rem=n-(gs[p].x-gs[l].x);
	if(rem<0) rem=0;
	int ned=gs[r].x-gs[p].x;
	if(ned>N) ned=N;
	LL ret=0;
	if(rem<ned) ret=(ned-rem)*(LL)(gs[p].p);
	return ret+solve(l,p,n)+solve(p,r,ned);
}

int main(){
	scanf("%d%d%d",&D,&N,&M);
	for(int i=1;i<=M;++i) gs[i].read();
	gs[++M]=(GS){D,0};
	sort(gs,gs+M+1);
	initst();
	try{
		cout<<solve(0,M,N)<<endl;
	}catch(int){
		printf("-1\n");
		return 0;
	}
}
