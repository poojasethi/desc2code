#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>

using namespace std;
const int N=5005;
struct A{int w,id;}a[N];
struct E{int y,c,nxt;}e[N*2];
int last[N],now[N],use[N],res[N],c[N],f[N],m=0;

bool cmp(const A &a,const A &b)
{
    return a.w<b.w;
}

void add(int x,int y,int z)
{
    m++; e[m].y=y; e[m].c=z; e[m].nxt=last[x]; last[x]=m;
    m++; e[m].y=x; e[m].c=z; e[m].nxt=last[y]; last[y]=m;
}

void build(int p)
{
    int x=last[p];
    while (x)
    {
        if (f[e[x].y]==0)
        {f[e[x].y]=p; c[e[x].y]=e[x].c; build(e[x].y);}
        x=e[x].nxt;
    }
}

int main()
{
    int n,m=0,i,k,x,y,z,flag;
    scanf("%d",&n);
    for (i=1; i<=n; i++)
    {
        scanf("%d",&a[i].w);
        a[i].id=i; now[i]=i;
    }
    sort(a+1,a+n+1,cmp);
    for (i=1; i<n; i++)
    {
        scanf("%d%d%d",&x,&y,&z);
        add(x,y,z);
    }
    f[1]=-1; build(1);
    flag=1;
    while (flag)
    {
        flag=0; memset(use,0,sizeof(use));
        for (i=1; i<=n; i++)
        {
            k=a[i].id;
            if (now[k]==1) continue; else flag=1;
            if (use[now[k]]<c[now[k]]){ use[now[k]]++; now[k]=f[now[k]];}
            res[k]++;
        }
    }
    for (i=1; i<=n; i++) printf("%d ",res[i]);
}
