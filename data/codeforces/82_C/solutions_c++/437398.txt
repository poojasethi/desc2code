#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;
vector<int> a[5005];
int w[5005];
int e[5005][3];
int p[5005];
int d[5005];
int parent[5005], amount[5005];


inline int another(int i, int x) {
	return e[i][0] + e[i][1] - x;
}

void dfs(int x, int f) {
	parent[x] = f;
	for(int i=0;i<a[x].size();i++){
		int y;
		if((y=another(a[x][i], x))!=f) {
			amount[y] = e[a[x][i]][2];
			dfs(y, x);
		}
	}
}
int clist[5005];

bool cmp(int x, int y) {
	return w[x] < w[y];
}
int main(void) {
	int n, i;
	scanf("%d", &n);
	for(i=1;i<=n;i++) {
		clist[i] = i;
		scanf("%d", &w[i]);
	}
	sort(clist+1, clist+n+1, cmp);
	for(i=1;i<=n-1;i++){
		int x, y;
		scanf("%d%d%d", &e[i][0], &e[i][1], &e[i][2]);
		x = e[i][0];
		y = e[i][1];
		a[x].push_back(i);
		a[y].push_back(i);
	}
	for(i=1;i<=n;i++) {
		p[i] = i;
		d[i] = 0;
	}
	dfs(1, -1);
	int cnt = n-1;
	int vlist[5005]={};
	while (cnt > 0) {
		for(i=1;i<=n;i++)
			vlist[i] = amount[i];
		for(i=1;i<=n;i++){
			int x = clist[i];
			if(p[x] == 1) continue;
			++d[x];
			if(vlist[p[x]] > 0) {
				vlist[p[x]]--;
				p[x] = parent[p[x]];
			}
			if(p[x] == 1) --cnt;
		}
	}
	printf("0");
	for(i=2;i<=n;i++)
		printf(" %d", d[i]);
	printf("\n");
	return 0;
}
