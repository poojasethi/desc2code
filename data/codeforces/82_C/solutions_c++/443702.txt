#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct division
{
	int num,prior,t,time;
};
bool operator<(division a,division b)
{
	return a.prior<b.prior;
}
vector<vector<int> > eg;
vector<vector<int> > wg;
vector<int> p,ww;
void dfs(int s,int pp=-1,int w=0)
{
	p[s]=pp;
	ww[s]=w;
	for(int i=0;i<eg[s].size();i++)
		if(eg[s][i]!=pp)dfs(eg[s][i],s,wg[s][i]);
}
int main()
{
	int n;cin>>n;
	vector<division> a(n);
	eg.resize(n);
	wg.resize(n);
	p.resize(n);
	ww.resize(n);
	for(int i=0;i<n;i++)
	{
		cin>>a[i].prior;
		a[i].num=i;
		a[i].t=i;
		a[i].time=0;
	}
	for(int i=0;i<n-1;i++)
	{
		int u,v,w;
		cin>>u>>v>>w;
		u--;v--;
		eg[u].push_back(v);
		eg[v].push_back(u);
		wg[u].push_back(w);
		wg[v].push_back(w);
	}
	dfs(0);
	sort(a.begin(),a.end());
	int ctime=1;
	while(1)
	{
		vector<int> mv(n);
		int cmov=0;
		for(int i=0;i<a.size();i++)
			if(a[i].t!=0)
			{
				int to=p[a[i].t];
				if(mv[a[i].t]<ww[a[i].t])
				{
					mv[a[i].t]++;
					a[i].t=to;
					cmov++;
					a[i].time=ctime;
				}
			}
		if(cmov==0)break;
		ctime++;
	}
	vector<int> res(n);
	for(int i=0;i<n;i++)res[a[i].num]=a[i].time;
	for(int i=0;i<n;i++)
		cout<<(i==0?"":" ")<<res[i];
	cout<<"\n";
	return 0;
}
