#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>
using namespace std;
typedef priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > my_q_t;

vector<my_q_t> vg;
vector<vector<int> > g;
vector<vector<int> > w;
vector<int> t;
int tc=0;
bool dfs(int s,int p=-1,int ww=-1)
{
	if(p!=-1)
		for(int i=0;i<ww && !vg[s].empty();i++)
		{
			t[vg[s].top().second]=tc;
			vg[p].push(vg[s].top());
			vg[s].pop();
		}
	for(int i=0;i<g[s].size();i++)
	{
		int v=g[s][i];
		if(v==p)continue;
		dfs(v,s,w[s][i]);
	}
	return vg[s].size()==g.size();
}
int main()
{
	int n;
	cin>>n;
	vg.resize(n);
	g.resize(n);
	w.resize(n);
	t.resize(n);
	
	for(int i=0;i<n;i++)
	{
		int p;
		cin>>p;
		vg[i].push(make_pair(p,i));
	}
	for(int i=0;i<n-1;i++)
	{
		int u,v,c;
		cin>>u>>v>>c;
		u--;v--;
		g[u].push_back(v);
		g[v].push_back(u);
		w[u].push_back(c);
		w[v].push_back(c);
	}
	while(1)
	{
		tc++;
		if(dfs(0))break;
	}
	for(int i=0;i<t.size();i++)cout<<(i==0?"":" ")<<t[i];
	cout<<"\n";
	return 0;
}
