//In the name of Allah
//
//
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int MN=5000+10;
int p[MN];
bool cmp(const int & a,const int & b)
{
	return p[a]>p[b];
}
vector <int> list[MN];
vector <int> w[MN];
vector <int> od;
bool mark[MN];
int par[MN];
int c[MN];
int res[MN];
vector <int> st[MN];
int n,r;
void dfs(int a)
{
	od.push_back(a);
	mark[a]=1;
	for (int i=0;i<list[a].size();i++) if (!mark[list[a][i]])
	{
		int v=list[a][i];
		par[v]=a;
		c[v]=w[a][i];
		dfs(v);
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin>>n;
	for (int i=0;i<n;i++)
		cin>>p[i];
	r=n-1;
	for (int i=0;i<n-1;i++)
	{
		int a,b,c;
		cin>>a>>b>>c; a--; b--;
		list[a].push_back(b);
		list[b].push_back(a);
		w[a].push_back(c);
		w[b].push_back(c);
	}
	dfs(0);
	res[0]=0;
	for (int i=1;i<n;i++)
		st[i].push_back(i);
	for (int d=1;r!=0;d++)
	{
		for (int i=1;i<n;i++)
		{
			int t=min(c[od[i]],(int)st[od[i]].size());
			int it=st[par[od[i]]].size();
			for (;t;t--)
			{
				int temp=st[od[i]].back();
				st[od[i]].pop_back();
				if (par[od[i]]!=0)
					st[par[od[i]]].push_back(temp);
				else
				{
					res[temp]=d;
					r--;
				}
			}
		}
		for (int i=1;i<n;i++)
			sort(st[i].begin(),st[i].end(),cmp);
	}
	for (int i=0;i<n;i++)
		cout<<res[i]<<" ";
	cout<<endl;
	return 0;
}
