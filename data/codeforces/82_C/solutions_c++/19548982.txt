#include<iostream>
#include<cstring>
#include<cstdio>
#include<cmath>
#include<queue>
#include<vector>
#include<stack>
#include<algorithm>
#include<set>
#include<map>
#include<deque> 
using namespace std;
#define INF 0x3f3f3f3f
typedef long long LL;
typedef pair<int,int> ppp;

struct node{
	int to,next,cap;
}mp[1000000];
int n,cnt,now;
int head[5050],ans[5050];
priority_queue<ppp> pq[5050];
void add_edge(int u,int v,int cap){
	mp[cnt].to = v;
	mp[cnt].next = head[u];
	mp[cnt].cap = cap;
	head[u] = cnt++;
}
int dfs(int u,int fa){
	int flag = 0;
	for (int i=head[u] ; ~i ; i=mp[i].next){
		int v = mp[i].to, cap = mp[i].cap;
		if (v==fa) continue;
		while (!pq[v].empty() && cap){
			cap--;
			ppp hehe = pq[v].top(); pq[v].pop();
			ans[hehe.second] = now;
			flag = 1;
			if (u != 1) pq[u].push(hehe);
		}
		if (dfs(v,u)) flag = 1;
	}
	return flag;
}
int main(){
	cin>>n;
	int x;
	for (int i=1 ; i<=n ; i++){
		cin>>x;
		if (i != 1) pq[i].push(ppp(-x,i));
	}
	cnt = 0;
	memset(head,-1,sizeof head);
	int u,v,cap;
	for (int i=1 ; i<n ; i++){
		cin>>u>>v>>cap;
		add_edge(u,v,cap);
		add_edge(v,u,cap);
	}
	ans[1] = 0;
	for (now=1 ; ; now++)
		if (!dfs(1,0)) break;
	for (int i=1 ; i<=n ; i++)
		cout<<ans[i]<<" ";
	cout<<endl;
	return 0;
}
					 	 	 					 		 		 	 					 	