#include <iostream>
#include <algorithm>
#include <vector>
#include <string.h>

using namespace std;
int n;
int v[5001];
int total[5001];
int where[5001];
int nxt[5001];
int cnxt[5001];

vector<pair<int, int> > vp;
vector<int> g[5001];
vector<int> cap[5001];
void go(int nod, int tata)
{
	for (int i = 0; i < g[nod].size(); ++i)
	{
		int nod2 = g[nod][i];	
		if (nod2 == tata) continue;
		nxt[nod2] = nod;
		cnxt[nod2] = cap[nod][i];
		go(nod2, nod);
	}
}
int main()
{
	cin >> n;
	for (int i = 1; i <= n; ++i)
	{
		cin >> v[i];
		where[i] = i;
		vp.push_back(make_pair(v[i], i));
	}
	// sort them
	sort(vp.begin(), vp.end());

	for (int i = 1; i < n; ++i)
	{
		int a, b, c;
		cin >> a >> b >> c;
		g[a].push_back(b);
		cap[a].push_back(c);
		g[b].push_back(a);
		cap[b].push_back(c);
	}
	go(1, -1);
	while (1)
	{
		int mut = 0;
		int ava[n + 1];
		memset(ava, 0, sizeof(ava));

		for (int i = 0; i < vp.size(); ++i)
		{
			int x = vp[i].second;	
			if (where[x] == 1) continue;
			total[x]++;
			if (ava[where[x]] >= cnxt[where[x]]) continue;
			mut++;
			ava[where[x]]++;
			where[x] = nxt[where[x]];
		}
		if (mut == 0) break;
	}
	for (int i = 1; i <= n; ++i)
	{
		if (i != 1) cout << " ";
		cout << total[i];
	}
	cout << '\n';
	return 0;
}
