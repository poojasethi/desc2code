//In the Name of God
#include <iostream>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;
typedef pair <int , int> pii;

const int maxn = 5000 + 10;
int n , place[maxn] , cap[maxn] , t[maxn] , tmp[maxn] , cnt , par[maxn];
pii p[maxn];
vector <int> G[maxn] , cost[maxn];

void dfs(int v , int p = -1){
  par[v] = p;
  for(int i = 0 ; i < G[v].size() ; i++)
    if(G[v][i] != p){
      dfs(G[v][i] , v);
      cap[G[v][i]] = cost[v][i];
    }
}

int main(){
  cin >> n;
  for(int i = 0 ; i < n ; i++){
    cin >> p[i].first;
    p[i].second = i;
    place[i] = i;
  }
  sort(p , p + n);
  for(int i = 0 ; i < n - 1 ; i++){
    int v , u , c;
    cin >> v >> u >> c;
    v--; u--;
    G[v].push_back(u);
    G[u].push_back(v);
    cost[v].push_back(c);
    cost[u].push_back(c);
  }
  dfs(0);
  cnt = 0;
  while(true){
    for(int i = 0 ; i < n ; i++)
      tmp[i] = cap[i];
    cnt++;
    bool sw = false;
    for(int i = 0 ; i < n ; i++){
      int idx = p[i].second;
      if(place[idx] != 0){
	sw = true;
	if(cap[place[idx]] > 0){
	  cap[place[idx]]--;
	  place[idx] = par[place[idx]];
	  if(place[idx] == 0)
	    t[idx] = cnt;
	}
      }
    }
    for(int i = 0 ; i < n ; i++)
      cap[i] = tmp[i];
    if(!sw)
      break;
  }
  for(int i = 0 ; i < n ; i++)
    cout << t[i] << ' ';
  cout << endl;
  return 0;
}
