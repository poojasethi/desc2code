#include <iostream>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <utility>
#include <algorithm>
#include <cmath>
#define MAXN 5005

using namespace std;

struct edge {
	int b,cap,id;
	edge() {}
	edge(int b, int cap, int id) : b(b), cap(cap), id(id) {}
};

int n;
pair<int,int> a[MAXN];//priority,id
vector<edge> e[MAXN];
int cur[MAXN];
edge par[MAXN];
int pos[MAXN],ans[MAXN];

void dfs(int v) {
	for (int i = 0; i < e[v].size(); i++) {
		if (e[v][i].id == par[v].id) continue;
		par[e[v][i].b] = edge(v,e[v][i].cap,e[v][i].id);
		dfs(e[v][i].b);
	}
}

int main() {
	cin >> n;
	for (int i = 1; i <= n; i++) {
		cin >> a[i].first;
		a[i].second = i;
		pos[i] = i;
	}
	sort(a+1,a+n+1);
	for (int i = 1,u,v,c; i < n; i++) {
		cin >> u >> v >> c;
		e[u].push_back(edge(v,c,i));
		e[v].push_back(edge(u,c,i));
	}
	dfs(1);
	for (int ct = 1, day = 1; ct < n; day++) {
		memset(cur,0,sizeof(cur));
		for (int j = 1; j <= n; j++) {
			int i = a[j].second;
			if (pos[i] == 1 || cur[par[pos[i]].id] >= par[pos[i]].cap) continue;
			cur[par[pos[i]].id]++;
			pos[i] = par[pos[i]].b;
			if (pos[i] == 1) {
				ct++;
				ans[i] = day;
			}
		}
	}
	for (int i = 1; i <= n; i++) cout << ans[i] << ' ';
}