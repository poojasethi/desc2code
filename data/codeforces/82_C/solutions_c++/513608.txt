#include <stdio.h>
#include <algorithm>
#include <string.h>
using namespace std;
typedef struct
{
	int pri,pos,id;
} node;
node p[5010];
int timee[5010],cap[5010],next[5010],wei[5010],g[5010][5010],n;
bool cmp(node x,node y)
{
	return x.pri<y.pri;
}
void dfs(int id,int pre)
{
	for (int i=1;i<=n;i++)
	{
		if (g[id][i]==0) continue;
		if (i==pre) continue;
		next[i]=id;
		cap[i]=g[id][i];
		dfs(i,id);
	}
}
int main()
{
	while (scanf("%d",&n)==1)
	{
		memset(g,0,sizeof(g));
		for (int i=1;i<=n;i++)
		{
			scanf("%d",&p[i].pri);
			p[i].pos=i;
			p[i].id=i;
		}
		for (int i=0;i<n-1;i++)
		{
			int u,v,w;
			scanf("%d%d%d",&u,&v,&w);
			g[u][v]=g[v][u]=w;
		}
		dfs(1,1);
		sort(p+1,p+n+1,cmp);
		memset(timee,0,sizeof(timee));
		while (1)
		{
			bool exit=true;
			for (int i=1;i<=n;i++)
				if (p[i].pos!=1) exit=false;
			if (exit) break;
			for (int i=1;i<=n;i++)
				wei[i]=0;
			for (int i=1;i<=n;i++)
				if (p[i].pos!=1)
				{
					timee[p[i].id]++;
					if (wei[p[i].pos]<cap[p[i].pos])
					{
						wei[p[i].pos]++;
						p[i].pos=next[p[i].pos];
					}
				}
		}
		printf("%d",timee[1]);
		for (int i=2;i<=n;i++)
			printf(" %d",timee[i]);
		printf("\n");
	}
	return 0;
}

    	 	   					 	 				  		