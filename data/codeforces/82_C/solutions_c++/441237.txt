#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())


#define MAX 5050
	map<int,int> mp;
vector<pair<int,int> > edge[MAX];
priority_queue<int,vector<int>,greater<int> > city[MAX];
int RES[MAX];
int n,a,b,c;
int day;
void dfs(int pos,int parent,int cap){
	int cnt=0;
	while(sz(city[pos]) && cnt++!=cap){
		if(parent!=0) city[parent].push(city[pos].top());
		else RES[mp[city[pos].top()]]=day;
		city[pos].pop();
	}
	rep(i,sz(edge[pos]))if(edge[pos][i].first!=parent){
		dfs(edge[pos][i].first,pos,edge[pos][i].second);
	}
}
int main(){
	scanf("%d",&n);
	rep(i,n){
		scanf("%d",&a);
		city[i+1].push(a);
		mp[a]=i+1;
	}
	rep(i,n-1){
		scanf("%d%d%d",&a,&b,&c);
		edge[b].pb(make_pair(a,c));
		edge[a].pb(make_pair(b,c));
	}
/*
	n=5000;
	rep(i,n){
		city[i+1].push(i+1);
		mp[i+1]=i+1;
	}
	rep(i,n) edge[i].clear();
	rep(i,n-1){
		edge[i+1].pb(make_pair(i+2,1));
		edge[i+2].pb(make_pair(i+1,1));
	}
*/
	day=0;
	rep(i,n){
		dfs(1,0,n);
		day++;
	}
	rep(i,n) printf("%d ",RES[i+1]);
	printf("\n");
}
