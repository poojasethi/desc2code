#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>

using namespace std;

const int MAXD = 10;

struct intArr { int num [MAXD]; };

typedef vector<int> vInt;
typedef vector<intArr> vArr;

const int INFINITE = 0x7FFFFFFF;

const int MAXN = 100001;

int n, q, l, r, tk;
int t [MAXD];
char s [MAXN];
vInt a [MAXN];
intArr c;
vArr b;

inline void addPosition (int p) {
	tk++, a [p].push_back (tk);
	memcpy (c.num, t, sizeof (t)), b.push_back (c);
}

inline void whileProcess () {
	int k = 0;
	while (k < n) {
		int i = k + 1, b = k + 1, d = 1, p = 0;
		
		while (i >= b && i <= n) {
			k = max (k, i), addPosition (i);
			
			if (s [i] >= '0' && s [i] <= '9') {
				t [s [i] - '0']++;
				
				if (s [i] == '0')
					s [i] = 0;
				else
					s [i]--;

				p = 0;
			} else if (s [i] == '<' || s [i] == '>') {
				if (s [i] == '<')
					d = -1;
				else
					d = 1;
				
				if (p > 0)
					s [p] = 0;
				p = i;
			}
			
			i += d;
		}
		
		addPosition (i);
	}
}

int main () {
	#ifndef ONLINE_JUDGE
	freopen ("cf148div1d.in", "r", stdin);
	freopen ("cf148div1d.out", "w", stdout);
	#endif
	
	scanf ("%d %d\n", &n, &q);
	for (int i = 1; i <= n; ++i)
		scanf ("%c", &s [i]);
	
	whileProcess ();
	
	for (int i = 1; i <= q; ++i) {
		scanf ("%d %d\n", &l, &r);
		
		int hd = a [l][0], tl = INFINITE;

		int id1 = lower_bound (a [l - 1].begin (), a [l - 1].end (), hd) - a [l - 1].begin ();
		if (id1 < (int)a [l - 1].size ())
			tl = min (tl, a [l - 1][id1]);
		
		int id2 = lower_bound (a [r + 1].begin (), a [r + 1].end (), hd) - a [r + 1].begin ();
		if (id2 < (int)a [r + 1].size ())
			tl = min (tl, a [r + 1][id2]);
		
		hd--, tl--;
		
		for (int j = 0; j <= 9; ++j)
			printf ("%d%s", b [tl].num[j] - b [hd].num[j], (j < 9) ? " " : "\n");
	}
	
	fclose (stdin);
	fclose (stdout);
	return 0;
}
