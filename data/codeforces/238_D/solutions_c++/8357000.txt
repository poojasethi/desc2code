/*
	Time : 0254Z 20141023
	Task : Codeforces 283D
	Tags : Implementation
	Stat : Coding
*/
#include <cstdio>
#include <cstring>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <utility>
#include <queue>
#include <functional>
#include <map>
#include <set>
#include <cmath>
#include <numeric>

#define fi first
#define se second
#define fo(i,a,b) for (int i = a; i <= b; i ++)
#define fd(i,a,b) for (int i = a; i >= b; i --)
#define fe(i,x,y) for (int i = x, y = lnk[i]; i; i = nxt[i], y = lnk[i])
#define mkp make_pair
#define pb push_back
#define Fill(x,y) memset(x,y,sizeof(x))
#define Cpy(x,y) memcpy(x,y,sizeof(x))
#define Bit(x,y) ((((x) >> (y)) & 1))
#define mit map<int,SI>::iterator
#define sit SI::iterator

using namespace std;
 
typedef long long LL;
typedef long double LD;
typedef pair <double, double> PD;
typedef pair <LL, LL> PLI;
typedef pair <PD, int> PDI;
typedef pair <int, int> PI;
typedef pair <int, PI> PII;
typedef pair <PI, PI> PIII;
typedef set <PI> SI;
typedef vector <int> VI;
 
int Read()
{
    char c; while (c = getchar(), (c != '-') && (c < '0' || c > '9'));
    bool neg = (c == '-'); int ret = (neg ? 0 : c - 48);
    while (c = getchar(), c >= '0' && c <= '9') ret = ret * 10 + c - 48;
    return neg ? -ret : ret;
}

const int MAXN = 100005;

VI p[MAXN];
int N, Q, n, cnt[MAXN * 45][10], vis[MAXN], cur[10];
char s[MAXN];

void Ins(int x) { p[x].pb(++ n); fo (i, 0, 9) cnt[n][i] = cur[i]; }

void init()
{
	scanf("%d%d%s", &N, &Q, s + 1);
	fo (l, 1, N) if (!vis[l])
	{
		int r = l;
		for (int d = 1, pre = 0; r >= l && r <= N; vis[r] = 1, Ins(r), r += d)
			if (s[r] >= '0' && s[r] <= '9')
				++ cur[s[r] - 48], -- s[r], pre = 0;
			else
				if (s[r] == '<' || s[r] == '>') d = (s[r] == '>' ? 1 : -1), s[pre] = 0, pre = r;
		Ins(r);
	}
}

int FindPos(int x, int y)
{
	VI::iterator k = lower_bound(p[x].begin(), p[x].end(), y);
	return k < p[x].end() ? *k : 1e9;
}

void work()
{
	fo (i, 1, Q)
	{
		int l = Read(), r = Read(), u = p[l][0], v = min(FindPos(l - 1, u), FindPos(r + 1, u));
		fo (j, 0, 9) printf("%d%c", cnt[v-1][j] - cnt[u-1][j], j < 9 ? ' ' : '\n');
	}
}

int main()
{
	init();
	work();
	return 0;
}

