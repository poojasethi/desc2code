#include<cstdio>
#include<vector>
#include<cstring>
using namespace std;

const int N = 100005;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define Me(x , y) memset(x , y , sizeof(x))
#define Auto(x , y) __typeof(y) x = y
#define Fe(x , y) for (Auto(x , (y).begin()); x != (y).end(); x++)

struct _two{
	int a , b;
}ran[N];

int n , q , last;
int cur[10] , ans[N][10];
vector<int> p1[N] , p2[N];
int done[N] , f1[N] , f2[N];
char ch[N];

int Get1(int x){
	if (f1[x] == -1) return x;
	return f1[x] = Get1(f1[x]);
}

int Get2(int x){
	if (f2[x] == -1) return x;
	return f2[x] = Get2(f2[x]);
}

void Init(){
	scanf("%d%d" , &n , &q);
	scanf("%s" , ch + 1); int x , y;
	fo (i , 1 , q){
		scanf("%d%d" , &x , &y);
		p1[x].push_back(i); p2[y].push_back(i);
	}
}

void Delete(int ic){
	ran[ran[ic].a].b = ran[ic].b; ran[ran[ic].b].a = ran[ic].a;
}

void Work(){
	fo (i , 1 , n + 1) ran[i] = (_two){i - 1 , i + 1};
	ran[0] = (_two){n + 1 , 1}; ran[n + 1].b = 0; int ic = 1 , id = 0;
	Me(f1 , -1); Me(f2 , -1);
	fo (i , 1 , n)
		if (!p1[i].size()) f1[i] = i - 1;
	fo (i , 1 , n)
		if (!p2[i].size()) f2[i] = i + 1;
	while (ic <= n){
		if (!id && ic > last){
			last = ic;
			Fe (i , p1[ic])
				fo (j , 0 , 9) ans[*i][j] -= cur[j];
		}
		bool flag = '0' <= ch[ic] && ch[ic] <= '9';
		if (flag){
			cur[ch[ic] - '0']++;
			if (ch[ic] == '0') Delete(ic); else ch[ic]--;
		}
		else
			id = ch[ic] == '<';
		if (id){
			for (int i = Get1(ic); i > ran[ic].a; i = Get1(i - 1)){
				Fe (j , p1[i])
					if (!done[*j]){
						done[*j] = 1;
						fo (k , 0 , 9) ans[*j][k] += cur[k];
					}
				f1[i] = i - 1;
			}
		}
		if (!id){
			for (int i = Get2(ic); i < ran[ic].b; i = Get2(i + 1)){
				Fe (j , p2[i])
					if (!done[*j]){
						done[*j] = 1;
						fo (k , 0 , 9) ans[*j][k] += cur[k];
					}
				f2[i] = i + 1;
			}
		}
		ic = id ? ran[ic].a : ran[ic].b;
		if (!flag && (ch[ic] == '>' || ch[ic] == '<'))
			Delete(id ? ran[ic].b : ran[ic].a);
		if (!ic) ran[ic = ran[0].b = last + 1].a = id = 0;
	}
	fo (i , 1 , q){
		fo (j , 0 , 9){
			if (j) putchar(' ');
			printf("%d" , ans[i][j]);
		}
		puts("");
	}

}

int main(){
	Init();
	Work();
	return 0;
}
