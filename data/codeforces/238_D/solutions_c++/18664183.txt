#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <vector>
#include <bitset>
#include <functional>
using namespace std;
const long long mod = 1e9 + 7;
const int maxn = 100005;
inline int read ()
{
	int res, ok = 1;
	char ch;
	for (ch = getchar (); ch < '0' || ch > '9'; ch = getchar ())
	if (ch == '-')
	ok = -1;
	res = ch - '0';
	for (ch = getchar (); ch >= '0' && ch <= '9'; ch = getchar ())
	res = res * 10 + ch - '0';
	return res * ok;
}
int n, q, v[maxn], cnt[maxn][10], num[maxn][10], st, sum[15], ans[15];
char a[maxn];
inline bool check (char c)
{
	return c == '<' || c == '>';
}
inline bool work (char c)
{
	return c >= '0' && c <= '9';
}
inline int getin (int a, int b)
{
	if (b < a)
	return b;
	return a;
}
int main()
{
	n = read();
	q = read();
	a[0] = 'X';
	scanf ("%s", a + 1);
	while (st = find (v + 1, v + 1 + n, 0) - v, st <= n)
	{
		int now = st, op = 1;
		while (st <= now && now <= n)
		{
			if (v[now] == 0)
			{
				copy (sum, sum + 10, num[now]);
				v[now]++;
			}
			if (work (a[now]))
			{
				sum[a[now] - '0']++;
				if (a[now] == '0')
				a[now] = 'X';
				else
				a[now]--;
			}
			else if (check (a[now]))
			op = a[now] == '<' ? -1 : 1;
			int x;
			for (x = now + op; st <= x && x <= n && a[x] == 'X'; x += op)
			{
				if (v[x] == 0 && op == 1)
				{
					copy (sum, sum + 10, num[x]);
					v[x]++;
				}
				else if (v[x] == 1 && op == -1)
				{
					copy (sum, sum + 10, cnt[x]);
					v[x]++;
				}
			}
			if (check (a[now]) && st <= x && x <= n && check (a[x]))
			a[now] = 'X';
			if (v[now] == 1 && op == -1)
			{
				copy (sum, sum + 10, cnt[now]);
				v[now]++;
			}
			now = x;
		}
	}
	copy (sum, sum + 10, num[n + 1]);
	while (q--)
	{
		int l, r;
		l = read();
		r = read();
		copy (num[r + 1], num[r + 1] + 10, ans);
		if (v[l] == 2)
		for (int i = 0; i < 10; i++)
		ans[i] = getin (ans[i], cnt[l][i]);
		for (int i = 0; i < 10; i++)
		printf ("%d ", ans[i] - num[l][i]);
		printf ("\n");
	}
	return 0;
}
