#include <cstdio>
#include <vector>
using namespace std;
inline int read() {
    char ch = getchar(); int sum = 0;
    while(ch < '0' || ch > '9') ch = getchar();
    while(ch >= '0' && ch <= '9') sum = sum*10+ch-'0', ch = getchar();
    return sum;
}

const int maxn = 4e6+5, inf = 1e9;
int N, M, tim, ap[maxn][10], t[10];
vector <int> v[maxn];
bool vis[maxn];
char c[maxn];

void add(int x) {
    v[x].push_back(++tim);
    for(int i = 0; i <= 9; ++i) ap[tim][i] = t[i];
}

void Pre_Work() {
    for(int i = 1; i <= N; ++i) if(!vis[i]) {
        int p = i, d = 1, last = 0;
        while(i <= p && p <= N) {
            vis[p] = true;
            if(c[p] >= '0' && c[p] <= '9') ++t[c[p]-'0'], --c[p], last = 0;
            else if(c[p] == '<' || c[p] == '>') {
                if(last) c[last] = -1;
                d = c[p] == '>' ? 1 : -1;
                last = p;
            }
            add(p), p += d;
        }
        add(p);
    }
}

int Find(int x, int y) {
    vector <int> :: iterator it = lower_bound(v[x].begin(), v[x].end(), y);
    if(it == v[x].end()) return inf;
    return *it;
}

int main() {
    N = read(), M = read();
    scanf("%s", c+1);

    Pre_Work();
    while(M--) {
        int l = read(), r = read(), x = min(Find(l-1, v[l][0]), Find(r+1, v[l][0]));
        for(int i = 0; i <= 9; ++i)
        if(i != 9) printf("%d ", ap[x-1][i]-ap[v[l][0]-1][i]);
        else printf("%d\n", ap[x-1][i]-ap[v[l][0]-1][i]);
    }
    return 0;
}
