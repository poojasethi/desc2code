#include <cstdio>
#include <algorithm>
#include <list>
#include <utility>
#include <vector>
using namespace std;

typedef pair<char, int> pci;

const int N = 100003;
list<pci> l;
vector<int> v(1, 0);
int s[20*N][10];
int fa[N];
int fl[N];

inline bool dpc(char c) { return c == '<' || c == '>'; }

int counter = 0;
int sim()
{
    int rv = 0;
    list<pci>::iterator it = ++l.begin();
    list<pci>::iterator pit = l.begin();
    int dp = 1;
    
    while(true) {
        v.push_back(it->second);
        if(rv < it->second)
            rv = it->second;
        if(it->first == 0)
            break;
        int i = (int)v.size()-1;
        for(int j = 0; j < 10; ++j)
            s[i][j] = s[i-1][j];
        
        if(pit->first == '0'-1 || (dpc(pit->first) && dpc(it->first)))
            l.erase(pit);
        pit = it;
        
        if(dpc(it->first)) {
            if(it->first == '>') dp = 1;
            else dp = -1;
        }
        else {
            ++s[i][it->first-'0'];
            --it->first;
        }
        
        if(dp == 1) ++it;
        else --it;
    }
    
    return rv;
}

int main()
{
    int n, q;
    scanf("%d%d", &n, &q);
    l.push_back(pci(0, 0));
    for(int i = 1; i <= n; ++i) {
        char c;
        scanf(" %c", &c);
        l.push_back(pci(c, i));
    }
    l.push_back(pci(0, n+1));
    
    while(true) {
        int e = sim();
        if(e == n+1)
            break;
        while((++l.begin())->second <= e)
            l.erase(++l.begin());
    }
    
    for(int i = (int)v.size()-1; i >= 0; --i)
        fa[v[i]] = i;
    for(int i = 1; i <= n; ++i)
        fl[i] = (int)v.size(); 
        
    vector<int> S;
    for(int i = 0; i < (int)v.size(); ++i) {
        while(!S.empty() && v[S.back()] > v[i]) {
            int x = v[S.back()];
            S.pop_back();
            if(fl[x] == (int)v.size())
                fl[x] = i;
        }
        if(S.empty() || (v[S.back()] != v[i]))
            S.push_back(i);
    }
    
    while(q--) {
        int l, r;
        scanf("%d%d", &l, &r);
        r = min(fl[l], fa[r+1])-1;
        l = fa[l]-1;
        for(int i = 0; i < 10; ++i) {
            if(i) printf(" ");
            printf("%d", s[r][i]-s[l][i]);
        }
        printf("\n");
    }
    return 0;
}
