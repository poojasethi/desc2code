from heapq import heappush, heappop

n = int(raw_input().strip())
cis = [0 for _ in xrange(n)]
pis = [0 for _ in xrange(n)]
for i in xrange(n):
	cis[i], pis[i] = map(int, raw_input().strip().split(' '))

rcis, rpis, indexes = zip(*sorted(zip(cis, pis, range(n))))

# print "rcis: %s, rpis: %s, indexes: %s" % (rcis, rpis, indexes)

k = int(raw_input().strip())
ris = map(int, raw_input().strip().split(' '))
rris, rindexes = zip(*sorted(zip(ris, xrange(k))))

# print "rris: %s, rindexes: %s" % (rris, rindexes)

rp = 0
p = 0
ret = []
heap = []
money = 0

while p < n and rp < k:
	while p < n and rcis[p] <= rris[rp]:
		heappush(heap, (-rpis[p], indexes[p], rcis[p]))
		p += 1
	# print "heap: %s" % heap
	if heap:
		neg, index, ci = heappop(heap)
		ret.append((index, rindexes[rp]))
		money -= neg
	rp += 1

while rp < k and heap:
	neg, index, ci = heappop(heap)
	money -= neg
	ret.append((index, rindexes[rp]))
	rp += 1

print len(ret), money
for a, b in ret:
	print a + 1, b + 1
