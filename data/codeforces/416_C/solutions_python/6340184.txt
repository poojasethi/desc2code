import math
from fractions import gcd

def pop_max(k, reqs):
    mind = -1
    mval = 0

    for i in range(len(reqs)):
        if reqs[i][0] > k:
            break
        if mval < reqs[i][1]:
            mval = reqs[i][1]
            mind = i

    if mind == -1:
        return None
    
    return reqs.pop(mind)

def main():
    n = int(raw_input().strip())
    reqs = []
    tables = []

    for i in range(n):
        r = [int(j) for j in raw_input().strip().split(" ")]
        r.append(i)
        reqs.append(tuple(r))

    reqs = sorted(reqs)

    k = int(raw_input().strip())

    tables = [int(j) for j in raw_input().strip().split(" ")]
    tables = [(v,k) for k,v in enumerate(tables)]
    tables = sorted(tables)

    pairs = []
    val = 0

    for t in tables:
        m = pop_max(t[0], reqs)
        if m:
            val = val + m[1]
            pairs.append( (m[2] + 1, t[1] + 1) )

    print len(pairs),val

    print "\n".join([" ".join([k.__str__() for k in p]) for p in pairs])

    return 0

if __name__ == "__main__":
    main()
