#import ipdb

class ReaderHelper(object):

	def __init__(self):
		self.currentLine=None
		self.currentIndex=-1

	def __call__(self):
		try:
			# ipdb.set_trace()
			self.currentIndex+=1
				
			if not self.currentLine or self.currentIndex>=len(self.currentLine):											
				self.currentIndex=0
				self.currentLine=raw_input().split()
			return self.currentLine[self.currentIndex]	

		except EOFError:
			return None

next=ReaderHelper()
	
def next_int():
	return int(next())


def main():
	
	n,m=next_int(),next_int()
	cluster1,cluster2=[],[]
	size_a,size_b=0,0
	

	for i in xrange(n):		
		cluster1.append(next_int())
		size_a+=cluster1[i]

	for i in xrange(m):		
		cluster2.append(next_int())
		size_b+=cluster2[i]
	
	cluster1.sort()
	cluster2.sort()
	
	max_a,max_b=size_b+size_a-cluster1[n-1],size_b+size_a-cluster2[m-1]
	
	#moving from B to A
	i=1
	while i<n and max_a+size_b-cluster1[n-i-1]<max_a:
		max_a= max_a+size_b-cluster1[n-i-1]
		i+=1
	#moving from A to B
	i=1
	while i<m and max_b+size_a-cluster2[m-i-1]<max_b:
		max_b= max_b+size_a-cluster2[m-i-1]
		i+=1
	
	if max_a>max_b:max_a=max_b
	print max_a
	

	"""
    Suppose that we move all elements from B to A. 
    then we need to maximize B*k+A-a_1-a_2-a_3-...-a_k
	"""




	



main()



