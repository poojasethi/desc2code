#include <bits/stdc++.h>

const int MAXN = 100005;

int start = -1;
int n, a[MAXN];

void input()
{
	static char ss[MAXN];
	scanf("%s", ss + 1);
	n = strlen(ss + 1);
	int cnt[2] = {0};
	for(int i = 1; i <= n; ++i)
	{
		a[i] = ss[i] == 'R';
		cnt[a[i]]++;
	}
	if(cnt[0] < cnt[1])
		for(int i = 1; i <= n; ++i)
			a[i] ^= 1;
	if(cnt[0] > cnt[1])
		start = 0;
}

std::set<int> ss[2];
typedef std::set<int>::iterator set_iter;

int G[MAXN];
int ans, outn;
int out[MAXN];
bool vis[MAXN];
int beg[MAXN], end[MAXN];

void dfs(int x)
{
	vis[x] = 1;
	out[++outn] = x;
	if(G[x]) dfs(G[x]);
}

void solve()
{
	ans = n;
	for(int i = 1; i <= n; ++i)
		ss[a[i]].insert(i);
	for(int i = 1; i <= n; ++i)
	{
		int x = a[i] ^ 1;
		set_iter t = ss[x].lower_bound(i);
		if(t == ss[x].end()) continue;
		G[i] = *t;
		ss[x].erase(t);
		ans--;
	}
	for(int i = 1; i <= n; ++i)
	{
		if(!vis[i])
		{
			beg[i] = outn + 1;
			dfs(i);
			end[i] = outn;
		}
	}
}

std::queue<int> q[2][2];

void walk(int x)
{
	for(int i = beg[x]; i <= end[x]; ++i)
		printf("%d ", out[i]);
}

void output()
{
	assert(outn == n);
	printf("%d\n", ans - 1);
	for(int i = 1; i <= n; ++i)
	{
		if(!beg[i]) continue;
		q[a[i]][(end[i] - beg[i] + 1) & 1].push(i);
	}
	start = 0;
	if(q[0][0].empty() && q[0][1].empty()) start = 1;
	while(!q[0][0].empty() || !q[1][0].empty() || !q[0][1].empty() || !q[1][1].empty())
	{
		if(q[start][0].size())
		{
			int y = q[start][0].front();
			walk(y); q[start][0].pop();
		}
		else if(q[start][1].size())
		{
			int x = q[start][1].front();
			q[start][1].pop();
			walk(x);
			start ^= 1;
		}
	}
}

int main()
{
	input();
	solve();
	output();
	return 0;
}
      