#include <set>
#include <cmath>
#include <vector>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#define rint register int
#define ll long long
#define ld long double
#define pii pair <int, int>
#define mkpr make_pair
#define For(i, a, b) for (int i = a, __end = b; i <= __end; ++i)
#define Ford(i, a, b) for (int i = a, __end = b; i >= __end; --i)
using namespace std;

const int MaxN = 100010;
char S[MaxN];
vector <pair<int, int> > s[2][2], *snode;
int N, nxt[MaxN], pre[MaxN];

void Move(vector <pii > &s, int& last) {
    int now = s[s.size() - 1].first;
    s.pop_back();
    nxt[last] = now;
    while (nxt[last]) last = nxt[last];
}

int main()
{
    scanf("%s", S + 1);
    N = strlen(S + 1);
    int Cnt = 0, ans = 0;
    For(i, 1, N) {
        int u;
        if (S[i] == 'L') {
            Cnt++;
            u = 0;
        } else {
            Cnt--;
            u = 1;
        }
        if (!s[0][!u].size() && !s[1][!u].size()) {
            ans++;
            s[u][u].push_back(mkpr(i, i));
        } else {
            int v = (s[0][!u].size() == 0), sz = s[v][!u].size() - 1;
            pii tmp = s[v][!u][sz];
            s[v][!u].pop_back();
            nxt[tmp.second] = i;
            pre[i] = tmp.second;
            tmp.second = i;
            s[v][u].push_back(tmp);
        }
    }
    int step = (Cnt < 0), last = 0;
    while (s[!step][!step].size()) {
        Move(s[step][step], last);
        Move(s[!step][!step], last);
    }
    if (Cnt) {
        Move(s[step][step], last);
        step ^= 1;
    }
    if (!last && !s[step][!step].size()) step ^= 1;
    while (s[step][!step].size())
        Move(s[step][!step], last);
    snode = &s[!step][step];
    while ((*snode).size()) {
        if (last > (*snode)[snode->size() - 1].second) {
            int tmp = pre[last];
            nxt[(*snode)[snode->size() - 1].second] = last;
            pre[last] = (*snode)[snode->size() - 1].second;
            last = tmp;
            nxt[last] = 0;
        } else {
            int p = (*snode)[snode->size() - 1].second;
            nxt[last] = p;
            nxt[pre[p]] = 0;
            pre[p] = last;
            last = p;
        }
        Move(*snode, last);
    }
    printf("%d\n", ans - 1);
    for (int i = nxt[0]; i; i = nxt[i]) printf("%d ", i);
    puts("");
    return 0;
}
