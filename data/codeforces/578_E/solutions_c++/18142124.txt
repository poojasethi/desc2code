#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
#include <cassert>

const int maxn = 1e5 + 20;

int n;
char s[maxn];
int par[maxn];
bool vis[maxn];
std::vector<int> LR;
std::vector<int> RL;
std::vector<int> LL;
std::vector<int> RR;
std::vector<int> ans;

void work()
{
	static int Ls[maxn], Rs[maxn];
	int Ll = 0, Lr = 0, Rl = 0, Rr = 0;

	for(int i = 1; i <= n; i++)
	{
		if(s[i] == 'L')
		{
			Ls[Lr++] = i;
		}
		else
		{
			Rs[Rr++] = i;
		}
	}

	for(int i = 1; i <= n; i++)
	{
		if(s[i] == 'R')
		{
			while(Ll != Lr && Ls[Ll] < i) Ll++;
			
			if(Ll != Lr)
			{
				par[i] = Ls[Ll++];
			}
		}
		else
		{
			while(Rl != Rr && Rs[Rl] < i) Rl++;

			if(Rl != Rr)
			{
				par[i] = Rs[Rl++];
			}
		}
	}
}


void connect()
{
	for(int i = 1; i <= n; i++)
	{
		if(!vis[i])
		{
			int j = i, k = j;

			while(j)
			{
				k = j;
				vis[j] = true;
				j = par[j];
			}

			j = k;

			if(s[i] == 'L')
			{
				if(s[j] == 'R')
				{		
					if(!LR.empty())
					{
						par[LR.back()] = i;
					}
					
					j = i;

					while(j)
					{
						LR.push_back(j);
						j = par[j];
					}
				}
				else
				{
					LL.push_back(i);
				}
			}
			else
			{
				if(s[j] == 'L')
				{
					if(!RL.empty())
					{
						par[RL.back()] = i;
					}
					
					j = i;
					
					while(j)
					{	
						RL.push_back(j);
						j = par[j];
					}
				}
				else
				{
					RR.push_back(i);
				}
			}
		}	
	}
}
void getllrr(int x)
{
	x = ((x + 1) / 2) ^ 1;

	int tot = LL.size() + RR.size();

	for(int i = 0; i < tot; i++)
	{
		int j = ((i & 1) == x) ? LL[i >> 1] : RR[i >> 1];

		while(j)
		{
			ans.push_back(j);
			j = par[j];
		}
	}
}
void solve()
{
	int cnt = 0;
	
	for(int i = 1; i <= n; i++)
	{
		if(s[i] == 'L')
		{
			cnt++;
		}
		else
		{
			cnt--;
		}
	}

	if(!LR.empty() && !RL.empty())
	{
		int a = LR.back(), b = RL.back();

		if(b < a)
		{
			LR.pop_back();
			RL.push_back(a);
			par[b] = a;
			par[LR.back()] = 0;
			LL.push_back(LR.front());
			RR.push_back(RL.front());
		}
		else
		{
			RL.pop_back();
			LR.push_back(b);
			par[a] = b;
			par[RL.back()] = 0;
			LL.push_back(LR.front());
			RR.push_back(RL.front());
		}

		getllrr(cnt);
	}
	else if(!LR.empty())
	{
		if(cnt >= 0)
		{
			for(int i = 0; i < (int) LR.size(); i++)
			{
				ans.push_back(LR[i]);
			}
			
			getllrr(1);
		}
		else
		{
			getllrr(-1);

			for(int i = 0; i < (int) LR.size(); i++)
			{
				ans.push_back(LR[i]);
			}
		}
	}
	else if(!RL.empty())
	{
		if(cnt <= 0)
		{
			for(int i = 0; i < (int) RL.size(); i++)
			{
				ans.push_back(RL[i]);
			}
			
			getllrr(-1);
		}
		else
		{
			getllrr(1);

			for(int i = 0; i < (int) RL.size(); i++)
			{
				ans.push_back(RL[i]);
			}
		}
	}
	else
	{
		getllrr(cnt);
	}

	int res = 0;

	for(int i = 0; i + 1 < (int) ans.size(); i++)
	{
		if(ans[i + 1] < ans[i]) res++;
	}

	printf("%d\n", res);
	
	assert(ans.size() == n);
	
	for(int i = 0; i < (int) ans.size(); i++)
	{
		printf("%d ", ans[i]);
	}
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif

	scanf("%s", s + 1);
	n = strlen(s + 1);

	work();
	
	connect();

	solve();

#ifndef ONLINE_JUDGE
	fclose(stdin);
	fclose(stdout);
#endif
	return 0;
}
                                                                                                                                                                                                                                                                                                                                                                  