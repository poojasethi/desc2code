#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <map>
#include <vector>
#include <set>
using namespace std;
//void add(int a,int b,int c) {e[a]=c;next[a]=head[b];head[b]=a;}
const int MOD=1000000007;
int quick(int a,int b)
{
    int ans=1;
    while (b) {if (b&1) ans=1ll*ans*a%MOD; a=1ll*a*a%MOD; b>>=1;}
    return ans;
}
set <int >sl,sr;
int len,i,p,X,now,ANS[100005],ans,Y,H,P1,P2;
char s[100005];
int main()
{
    scanf("%s",s);
    len=strlen(s);
    for (i=0; i<len; i++) if (s[i]=='R') sr.insert(i); else sl.insert(i);
    sr.insert(len); sl.insert(len);
    if (len%2==0) {if (s[0]=='R') p=0; else p=1;} else
    {
        for (i=0; i<len; i++) if (s[i]=='R') X++; else Y++;
        if (X>Y) p=0; else p=1;
    }
    now=-1;
    for (i=0; i<len; i++)
    {
        if (p==0) X=*sr.upper_bound(now); else X=*sl.upper_bound(now);
        if (X==len)
        {
            ans++;  H=1;
            if (p==0) X=*sr.upper_bound(-1); else X=*sl.upper_bound(-1);
        } else H=0;
        if (p==0)
        {
            if (*sl.upper_bound(X)==len)
            {
                P1=*sl.upper_bound(-1);
                P2=*sr.upper_bound(-1);
                if (P2<P1) {
                if (X!=P2) ans++;X=P2;}
            }
        } else
        {
            if (*sr.upper_bound(X)==len)
            {
                P1=*sl.upper_bound(-1);
                P2=*sr.upper_bound(-1);
                if (P1<P2) {if (X!=P1)ans++;X=P1;  }
            }
        }
        ANS[i]=X; if (p==0) sr.erase(sr.find(X)); else sl.erase(sl.find(X)); now=X; p=1-p;
    }
    cout<<ans<<endl;
    for (i=0; i<len; i++) printf("%d ",ANS[i]+1);
    return 0;
}
