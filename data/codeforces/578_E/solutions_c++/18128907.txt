#include <bits/stdc++.h>
using namespace std;

template<typename T>inline void Read(T &x)
{
    int f = 1;
    char t = getchar();
    while (t < '0' || t > '9') {
        if (t == '-') f = -1;
        t = getchar();
    }
    x = 0;
    while (t >= '0' && t <= '9') {
        x = x * 10 + t - '0';
        t = getchar();
    }
    x *= f;
}

template<typename T>inline void Write(T x)
{
    static int output[20];
    int top = 0;
    if (x < 0) putchar('-'), x = -x;
    do {
        output[++top] = x % 10;
        x /= 10;
    } while (x > 0);
    while (top > 0) putchar('0' + output[top --]);
    putchar('\n');
}

template<typename T>inline void chkmin(T &x, T y) { if (x > y) x = y; }
template<typename T>inline void chkmax(T &x, T y) { if (x < y) x = y; }

const int maxn = 500005;

int n;
char s[maxn];
set<int> pos[2];

void input()
{
    scanf("%s", s + 1);
    n = strlen(s + 1);
}

void prepare()
{
    for (int i = 1; i <= n; i++) {
        if (s[i] == 'L') pos[1].insert(i);
        else pos[0].insert(i);
    }
}

int findnex(int cnt)
{
    int flag = (s[cnt] == 'L');
    set<int>::iterator it = pos[flag ^ 1].lower_bound(cnt);
    if (it == pos[flag ^ 1].end()) return -1;
    else return *it;
}

void solve()
{
    vector<int> fin;
    int ans = 0;
    int cur;
    bool flag;
    if (pos[0].size() == pos[1].size() + 1) cur = *pos[0].begin();
    else if (pos[1].size() == pos[0].size() + 1) cur = *pos[1].begin();
    else cur = 1;
    while (pos[0].size() || pos[1].size()) {
        int go = findnex(cur);
        flag = (s[cur] == 'L');
        fin.push_back(cur);
        if (!pos[flag ^ 1].size()) break;
        if (go != -1) {
            if (findnex(go) == -1) {
                if (*pos[flag ^ 1].begin() < *pos[flag].begin()) {
                    go = *pos[flag ^ 1].begin();
                    ans ++;
                }
            }
        } else {
            go = *pos[flag ^ 1].begin();
            ans ++;
        }
        pos[flag].erase(cur);
        cur = go;
    }
    printf("%d\n", ans);
    for (int i = 0; i < (int)fin.size(); i++) {
        printf("%d ", fin[i]);
    }
    printf("\n");
}

int main()
{
    input();
    prepare();
    solve();
    return 0;
}

                                                         