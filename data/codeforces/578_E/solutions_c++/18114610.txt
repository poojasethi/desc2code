#include <bits/stdc++.h>

#define ll long long

#define SZ(x) (int)(x).size()
#define pb push_back

template<class T>inline void chkmax(T &x, const T &y) {if(x < y) x = y;}
template<class T>inline void chkmin(T &x, const T &y) {if(x > y) x = y;}

template<class T>
inline void read(T &x) {
    char c;int f = 1;x = 0;
    while(((c=getchar()) < '0' || c > '9') && c != '-');
    if(c == '-') f = -1;else x = c-'0';
    while((c=getchar()) >= '0' && c <= '9') x = x*10+c-'0';
    x *= f;
}
int outn;
char out[(int)2e7];
template<class T>
inline void write(T x) {
    if(x < 0) out[outn++] = '-', x = -x;
    if(x) {
        static int tmpn;
        static char tmp[20];
        tmpn = 0;
        while(x) tmp[tmpn++] = x%10+'0', x /= 10;
        while(tmpn) out[outn++] = tmp[--tmpn];
    }
    else out[outn++] = '0';
}

const int N = 1e5;

char s[N+9];
int n;
int nxt[N+9], lat[N+9];
bool vis[N+9];
std::queue<int> q[2];
struct data {
    int s, t;
    data() {s = t = 0;}
    data(int _s, int _t):s(_s), t(_t) {}
}st[N+9];
int stn;

inline void link(int u, int v) {
    nxt[u] = v, lat[v] = u;
}

inline bool check() {
    if(stn <= 1) return false;
    data a = st[stn], b = st[stn-1];
    if(s[a.t] != s[b.s]) {
        link(a.t, b.s);
        st[--stn] = data(a.s, b.t);
        return true;
    }
    if(s[b.t] != s[a.s]) {
        link(b.t, a.s);
        st[--stn] = data(b.s, a.t);
        return true;
    }
    if(s[a.s] != s[a.t]) {
        if(b.t > a.t) {
            int t = lat[b.t];
            link(a.t, b.t), link(b.t, b.s);
            nxt[t] = 0, st[--stn] = data(a.s, t);
        }
        else {
            int t = lat[a.t];
            link(b.t, a.t), link(a.t, a.s);
            nxt[t] = 0, st[--stn] = data(b.s, t);
        }
        return true;
    }
    return false;
}

int main() {
    scanf("%s", s+1);
    n = strlen(s+1);
    for(int i = 1; i <= n; ++i) {
        int x = s[i]=='R';
        if(!q[x^1].empty()) {
            link(q[x^1].front(), i);
            vis[i] = true;
            q[x^1].pop();
        }
        q[x].push(i);
    }
    int cnt = 0;
    for(int i = 1; i <= n; ++i)
        if(!vis[i]) {
            cnt++;
            int j = i;
            while(nxt[j]) j = nxt[j];
            st[++stn] = data(i, j);
            while(check());
        }
    write(--cnt), out[outn++] = '\n';
    int cur = st[1].s;
    write(cur);
    while(nxt[cur]) {
        cur = nxt[cur];
        out[outn++] = ' ';
        write(cur);
    }
    puts(out);
    return 0;
}

                                                                                                                                                      