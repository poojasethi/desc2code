#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<string>
#include<iomanip>
#include<vector>
#include<set>
#include<map>
#include<queue>

using namespace std;
typedef long long LL;
typedef unsigned long long ULL;

#define rep(i,k,n) for(int i=(k);i<=(n);i++)
#define red(i,k,n) for(int i=(k);i>=(n);i--)
#define sqr(x) ((x)*(x))
#define clr(x,y) memset((x),(y),sizeof(x))
#define mod 1000000007
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)>(b)?(b):(a))
const int maxn = 100010;
char s[maxn+5];
int nxt[maxn],lat[maxn];
bool pointed[maxn];
int footprint_type(char c){return c=='R'?1:0;}
vector<pair<int,int> >seq;
void connect(int x,int y)
{
    nxt[x]=y;
    lat[y]=x;
}

bool check()
{
    if(seq.size()<2)return 0;
    int st=seq.back().first,ed=seq.back().second;
    int st2=seq[seq.size()-2].first,ed2=seq[seq.size()-2].second;
    if(s[ed]!=s[st2])
    {
        connect(ed,st2);
        seq.pop_back();
        seq.back()=make_pair(st,ed2);
        return 1;
    }
    if(s[ed2]!=s[st])
    {
        connect(ed2,st);
        seq.pop_back();
        seq.back()=make_pair(st2,ed);
        return 1;
    }
    if(s[st]!=s[ed])
    {
        if(ed<ed2)
        {
            int z=lat[ed2];
            connect(ed,ed2);
            connect(ed2,st2);
            nxt[z]=0;
            seq.pop_back();
            seq.back()=make_pair(st,z);
        }
        else
        {
            int z=lat[ed];
            connect(ed2,ed);
            connect(ed,st);
            nxt[z]=0;
            seq.pop_back();
            seq.back()=make_pair(st2,z);
        }
        return 1;
    }
    return 0;
}


int main()
{
    int m;
    scanf("%s",s+1);
    m=strlen(s+1);
    queue<int>qq[2];
    for(int i=1;i<=m;i++)
    {
        int me=footprint_type(s[i]);
        if(qq[me^1].size())
        {
            connect(qq[me^1].front(),i);
            pointed[i]=1;
            qq[me^1].pop();
        }
        qq[me].push(i);
    }

    int cnt=-1;
    for(int i=1;i<=m;i++)
    {
        if(!pointed[i])
        {
            cnt++;
            int ed=i;
            while(nxt[ed])ed=nxt[ed];
            seq.push_back(make_pair(i,ed));
            while(check());
        }
    }
    printf("%d\n",cnt);
    for(int i=0;i<seq.size();i++)
    {
        int now=seq[i].first;
        while(now)
        {
            if(i||now!=seq[i].first)printf(" ");
            printf("%d",now);
            now=nxt[now];
        }
    }
    puts("");


	return 0;
}
