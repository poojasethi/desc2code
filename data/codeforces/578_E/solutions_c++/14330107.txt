#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<stack>
#include<cmath>
#include<cstdlib>
#include<queue>
using namespace std;

#define pb push_back
#define mp make_pair
#define sc second
#define ft first

#define FOR(i,N) for (int i=1; i<=N; i++)
#define REP(i,l,r) for (int i=l; i<=r; i++)

#define INF ~0U>>1
#define eps 1e-9

const int maxn = 300010;
int res[maxn], a[maxn], vis[maxn], N;
vector <pair <int, int> > ans1, ans2;
char s[maxn];

set <int> L, R;
set <int> :: iterator it;

bool solve (int bo)
{
	int i1 = 0, i2 = 0, cnt = 0;
	while (cnt < N)
	{
		int k;
		if (bo == 0)
			{ if (i1 == ans1.size()) return 0; k = ans1[i1].sc, i1 ++; }
		else
			{ if (i2 == ans2.size()) return 0; k = ans2[i2].sc, i2 ++; }
		res[++cnt] = k;
		while (a[k])
		{
			k = a[k];
			res[++cnt] = k;
		}
		if (s[k] == 'L') bo = 1; else bo = 0;
	}
	cout << i1 + i2 - 1 << endl;
	for (int i = 1; i <= N; i ++) printf ("%d ", res[i]);
	return 1;
}

int main ()
{
#ifndef ONLINE_JUDGE
#ifndef MEKTPOY
	freopen (".in", "r", stdin);
	freopen (".out", "w", stdout);
#else
	freopen ("in.txt", "r", stdin);
#endif
#endif
	scanf ("%s", s + 1);
	N = strlen (s + 1);
	int cnt = 0;
	for (int i = 1; i <= N; i ++) if (s[i] == 'L') cnt++;
	if (N & 1)
	{
		if (cnt == N / 2)
			for (int i = 1; i <= N; i ++) s[i] = s[i] == 'L' ? 'R' : 'L';
	}
	for (int i = 1; i <= N; i ++)
		if (s[i] == 'L')
				L.insert(i);
		else R.insert(i);
	for (int i = 1; i <= N; i ++)
		if (s[i] == 'L')
			{
				it = R.lower_bound (i);
				if (it != R.end ()) a[i] = *it, R.erase (a[i]);
			}
		else
			{
				it = L.lower_bound (i);
				if (it != L.end ()) a[i] = *it, L.erase (a[i]);
			}
	int K = 0;
	for (int i = 1; i <= N; i ++)
		if (!vis[i])
		{
			vis[i] = 1;
			int j = i;
			while (a[j])
			{
				j = a[j];
				vis[j] = 1;
			}
			if (s[i] == 'L' && s[j] == 'R') ans1.pb (mp (0, i));
			if (s[i] == 'L' && s[j] == 'L') ans1.pb (mp (1, i)), K ++;
			if (s[i] == 'R' && s[j] == 'R') ans2.pb (mp (0, i)), K --;
			if (s[i] == 'R' && s[j] == 'L') ans2.pb (mp (1, i));
		}
	sort (ans1.begin(), ans1.end());
	sort (ans2.begin(), ans2.end());
	if (!solve (0)) solve (1);
	return 0;
}

