#include <stdio.h>
#include <cstdlib>
#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>

#define REP(I,A,B) for(int I=A,_END_=B;I<=_END_;I++)
#define REPD(I,A,B) for(int I=A,_END_=B;I>=_END_;I--)
#define FOR(I,A,B) for(int I=A,_END_=B;I<_END_;I++)
#define RI(X) scanf("%d",&X)
#define RII(X,Y) RI(X),RI(Y)
#define RIII(X,Y,Z) RI(X),RI(Y),RI(Z)
#define RL(X) X=Readint()
#define RLL(X,Y) RL(X),RL(Y)
#define RLLL(X,Y,Z) RL(X),RL(Y),RL(Z)
#define RS(X) scanf("%s",X)
#define RD(X) scanf("%lf",&X)
#define GCH getchar()
#define PCH(X) putchar(X)
#define MS(X,Y) memset(X,Y,sizeof(X))
#define MC(X,Y,var,len) memcpy(X,Y,sizeof(var)*(len))
#define debug(...) fprintf(stderr,__VA_ARGS__)
#define pb(X) push_back(X)
#define mp(A,B) make_pair(A,B)
#define fr first
#define sc second
#define lch(p) (p+p)
#define rch(p) (p+p+1)
#define lowbit(X) ((X)&(-(X)))

using namespace std;

typedef pair<int,int> poi;
typedef vector<int> vi;
typedef set<int>::iterator sit;

inline long long Readint()
{
	long long ret=0;
	int f=1;
	char ch;
	do
	{
		ch=GCH;
		if (ch=='-') f*=-1;
	}while(ch>=0 && (ch<'0' || ch>'9'));

	while ('0'<=ch && ch<='9')
	{
		ret=ret*10+ch-'0';
		ch=GCH;
	}
	return ret*f;
}

void open()
{
	freopen("E.in","r",stdin);
	freopen("E.out","w",stdout);
}
void close()
{
	fclose(stdin);
	fclose(stdout);
}

const int MAXN = 101010;

set<int> sp[2];
char s[MAXN];
vi ans; 
int n;

void init()
{
	int cntl=0,cntr=0;
	RS(s+1);
	n=strlen(s+1);
	REP(i,1,n)
	if (s[i]=='L') cntl++;
	else cntr++;
	if (cntl < cntr || (cntl==cntr && s[1]=='R'))
	{
		REP(i,1,n)
		if (s[i]=='L') s[i]='R';
		else s[i]='L';
	}
	REP(i,1,n) 
		if (s[i]=='L')
			sp[0].insert(i);
		else
			sp[1].insert(i);
}

void work()
{
	int type=0;
	sit now;
	int num=0;
	int tot=0;
	now=sp[0].begin();
	num=*now;
	sp[0].erase(now);
	FOR(i,1,n)
	{
		ans.pb(num);
		now=sp[type^1].lower_bound(num);
		if (now==sp[type^1].end())
		{
			tot++;
			now=sp[type^1].begin();
			num=*now;
			sp[type^1].erase(num);
			type^=1;
		}
		else
		{
			if (sp[type].lower_bound(*now)==sp[type].end())
			{
				int mn=0x3f3f3f3f;
				if (sp[0].begin()!=sp[0].end()) mn=min(mn,*sp[0].begin());
				if (sp[1].begin()!=sp[1].end()) mn=min(mn,*sp[1].begin());
				if (mn<num && s[mn]!=s[num])
				{
					tot++;
					num=mn;
					sp[type^1].erase(num);
					type^=1;
					continue;
				}
			}
			num=*now;
			sp[type^1].erase(num);
			type^=1;
		}
	}
	ans.pb(num);
	printf("%d\n",tot);
	FOR(i,0,ans.size()) printf("%d ",ans[i]);
}

int main()
{
	int _=0;
	init();
	work();
	close();
	return 0;
}