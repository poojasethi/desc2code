#include <cstdio>
#include <iostream>
#include <algorithm>
#include <queue>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <stack>
using namespace std;  
typedef long long ll;

const int Maxn=100200;
set<int>::iterator it;
char s[Maxn];
set<int>S[2];
int main()
{
    scanf("%s",s);
    int n=strlen(s),cnt=0;
    for(int i=0;i<n;i++)S[s[i]=='L'].insert(i);
    vector<int>rep;
    while(!S[0].empty()||!S[1].empty())
    {
        cnt++;
        if(S[0].empty())
        {
            rep.push_back(*S[1].begin());
            S[1].erase(S[1].begin());
            continue;
        }
        if(S[1].empty())
        {
            rep.push_back(*S[0].begin());
            S[0].erase(S[0].begin());
            continue;
        }
        int cs=*S[0].begin()>*S[1].begin();
        if(cnt==1)
        {
            if(S[1].size()>S[0].size())cs=1;
            else if(S[1].size()<S[0].size())cs=0;
        }
        int now=*S[cs].begin(),lastcs=cs;
        vector<int>tp;
        for(;;)
        {
            it=S[cs].lower_bound(now);
            if(it==S[cs].end())break;
            lastcs=cs;
            now=*it;
            tp.push_back(now);
            S[cs].erase(it);
            cs^=1;  
        }
        if((!S[0].empty()&&!S[1].empty())&&(*S[lastcs].begin()<*S[lastcs^1].begin()))
        {
            for(int j=0;j<tp.size()-1;j++)rep.push_back(tp[j]);
            S[lastcs].insert(tp.back());
        }
        else
        {
            for(int j=0;j<tp.size();j++)rep.push_back(tp[j]);
        }
    }
    printf("%d\n",cnt-1);
    for(int i=0;i<rep.size();i++)printf("%d%c",rep[i]+1,i==rep.size()-1?'\n':' ');
}