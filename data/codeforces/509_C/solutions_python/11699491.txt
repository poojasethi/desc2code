from __future__ import print_function
def addIBit(a, i, b):
    for j in range(i, len(a)):
        if a[j] + b > 9:
            b = (a[j] + b) / 10
            a[j] = (a[j] + b) % 10
        else:
            a[j] = a[j] + b
            b = 0
            break
    if 0 != b:
        a.append(b)
    return a

def getUp(a, up):
    cnt = sum(a)
    aN = cnt + up
    i = 0
    while aN > cnt:
        if i + 1 > len(a):
            a.append(0)
        a[i] = 9
        cnt = sum(a)
        i += 1
    a[i - 1] -= cnt - aN
    return a

def getDown(a, down):
    cnt = sum(a)
    aN = cnt - down
    i = 0
    while cnt > aN:
        if i + 1 > len(a):
            a.append(0)
        if 0 == a[i]:
            i += 1
            continue
        a[i] = 0
        a = addIBit(a, i + 1, 1)
        cnt = sum(a)
        i += 1
    return getUp(a, aN - cnt)

def getFirst(b):
    a = []
    while b > 9:
        a.append(9)
        b -= 9
    if 0 != b:
        a.append(b)
    return a

def printA(a):
    for v in reversed(a):
        print(v, end='')
    print("\n")

def solve():
    I = lambda:map(int, raw_input().split())
    n = I()[-1]
    b = I()[-1]
    aList = []
    a = getFirst(b)
    aList.append(list(a))
    a = addIBit(a, 0, 1)
    lastB = sum(a)
    for i in range(n - 1):
        b = I()[-1]
        if lastB == b:
            a = a
        elif lastB > b:
            a = getDown(a, lastB - b)
        else:
            a = getUp(a, b - lastB)
        aList.append(list(a))
        a = addIBit(a, 0, 1)
        lastB = sum(a)
    for a in aList:
        printA(a)

if __name__ == '__main__':
    solve()