def comparator_less(lhs, rhs):
    return lhs < rhs

def comparator_greater(lhs, rhs):
    return lhs > rhs

def fill_monotony(numbers, to_fill, comparator):
    left_bound = 0
    prev_value = numbers[0]
    for index, number in enumerate(numbers[1:] + [-10 ** 6]):
        if comparator(number, prev_value):
            to_fill[left_bound:index + 1] = [index + 1] * (index + 1 - left_bound)
            left_bound = index + 1
        prev_value = number
    if left_bound != index + 1:
        to_fill[left_bound:index + 1] = [index + 1] * (index + 1 - left_bound)

def main():
    number_count, query_count = map(int, raw_input().split())
    numbers = map(int, raw_input().split())
    
    increased = range(1, number_count + 1)
    decreased = range(1, number_count + 1)
    
    fill_monotony(numbers, increased, comparator_less)
#    print increased
    fill_monotony(numbers, decreased, comparator_greater)
#    print decreased


    for query_index in range(query_count):
        left_bound, right_bound = map(int, raw_input().split())
        if increased[left_bound - 1] >= right_bound:
            print 'Yes'
        elif decreased[increased[left_bound - 1] - 1] >= right_bound:
            print 'Yes'
        else:
            print 'No'

if __name__ == '__main__':
    main()
