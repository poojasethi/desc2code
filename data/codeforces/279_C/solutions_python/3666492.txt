import random

def input_ints():
    return map(int, raw_input().split(' '))

def is_local_minimum(i, arr):
    return i > 0 and i < len(arr) - 1 and arr[i - 1] > arr[i] and arr[i] < arr[i + 1]

#num local minima on a, a + 1, ..., b
def num_local_minima_between(a, b):
    if a > b:
        return 0

    if a == 0:
        return num_local_minima[b]
    else:
        return num_local_minima[b] - num_local_minima[a - 1]

def is_ladder(a, b):
    a, b = a - ind_sub[a], b - ind_sub[b]
    return num_local_minima_between(a + 1, b - 1) == 0

def comp(arr):
    num_local_minima = [0]*len(arr) #num local minima in all indices <= ind

    for i in range(1, len(arr)):
        num_local_minima[i] = num_local_minima[i - 1]
        if is_local_minimum(i, arr):
            num_local_minima[i] += 1
    return num_local_minima

def is_ladder_slow(a, b):
    seen_drop = False
    for i in xrange(a + 1, b + 1):
        if arr[i] < arr[i - 1]:
            seen_drop = True
        elif arr[i] > arr[i - 1]:
            if seen_drop:
                return False
    return True

def dedupe(arr):
    deduped = [arr[0]]
    ind_sub = [0]*len(arr)
    diff = 0
    for i in range(1, len(arr)):
        if arr[i] != deduped[-1]:
            deduped.append(arr[i])
        else:
            diff += 1
        ind_sub[i] = diff
    return deduped, ind_sub

n, m = input_ints()
arr = input_ints()

deduped, ind_sub = dedupe(arr)
num_local_minima = comp(deduped)

"""
arr = [0] * 100000
for i in range(len(arr)):
    arr[i] = random.randint(5, 7)



for i in range(100000):
    a = random.randint(0, len(arr) - 1)
    b = random.randint(0, len(arr) - 1)
    if a > b:
        a, b = b, a
    if is_ladder_slow(a, b) != is_ladder(a, b):
        print arr, a, b
        print "Correct: %s" % is_ladder_slow(a, b)
        print "Mine: %s" % is_ladder(a, b)
        break
"""

for _ in xrange(m):
    l, r = input_ints()
    print "Yes" if is_ladder(l - 1, r - 1) else "No"
