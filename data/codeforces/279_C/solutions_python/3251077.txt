from sys import stdin

def line():
	return stdin.readline().strip()

def interval_binary_search(arr, elem):
	x = 0;
	y = len(arr) - 1;
	while x < y:
		mid = x + (y - x) / 2
		if elem < arr[mid][0]:
			y = mid - 1;
		elif arr[mid][1] < elem:
			x = mid + 1
		else:
			return mid
	return x if (0 <= x and x < len(arr) and arr[x][0] <= elem and elem <= arr[x][1]) else None

def interval_array(arr, fun):
	intervals = []
	x = 0
	for y in xrange(len(arr)-1):
		if not fun(arr[y], arr[y+1]):
			if x < y:
				intervals.append((x, y))
			x = y + 1
		elif y == len(arr)-2 and x <= y:
			intervals.append((x, y + 1))
	return intervals

n, m = map(int, line().split())
A = map(int, line().split())

increasing = interval_array(A, fun=lambda x, y: x <= y)
decreasing = interval_array(A, fun=lambda x, y: x >= y)

for _ in xrange(m):
	l, r = map(int, line().split())
	l, r = l-1, r-1
	x = interval_binary_search(increasing, l)
	y = interval_binary_search(decreasing, r)
	
	ans = False
	if l == r:
		ans = True
	elif x != None and y == None:
		ans = r <= increasing[x][1]
	elif x == None and y != None:
		ans = decreasing[y][0] <= l
	elif x != None and y != None:
		ans = decreasing[y][0] <= increasing[x][1]
	
	print "Yes" if ans else "No"
