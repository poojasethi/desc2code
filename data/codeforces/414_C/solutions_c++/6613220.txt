#include <stdio.h>
#include <string.h>

typedef long long i64;
const int MAXN = 20;
int n;
int a[(1<<MAXN) + 1];
int b[(1<<MAXN) + 1];
int c[(1<<MAXN) + 1];
i64 f[2][MAXN + 1];

void init()
{
	scanf("%d", &n);
	for (int i = 1; i <= 1<<n; ++i) {
		scanf("%d", &a[i]);
		c[(1<<n) - i + 1] = a[i];
	}
}

void msort(int a[], int l, int r, i64 f[], int d)
{
	if (l == r) return;
	int mid = (l + r) >> 1;
	msort(a, l, mid, f, d - 1);
	msort(a, mid + 1, r, f, d - 1);
	memcpy(b + l, a + l, sizeof(int) * (r - l + 1));
	int i = l, j = mid + 1, k = l;
	while (i <= mid && j <= r) {
		if (b[i] <= b[j]) {
			a[k++] = b[i++];
		} else {
			f[d] += (mid - i + 1);
			a[k++] = b[j++];
		}
	}
	while (i <= mid) a[k++] = b[i++];
	while (j <= r) a[k++] = b[j++];
}

void solve()
{
	int m, q, mask = 0;
	scanf("%d", &m);
	while (m--) {
		i64 s = 0;
		scanf("%d", &q);
		mask ^= (1<<(q + 1)) - 1;
		for (int i = 1; i <= n; ++i) s += f[mask>>i&1][i];
		printf("%I64d\n", s);
	}
}

int main()
{
	init();
	msort(a, 1, 1<<n, f[0], n);
	msort(c, 1, 1<<n, f[1], n);
	solve();
}
