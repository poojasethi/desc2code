#include<iostream>
#include<algorithm>
#include<cstdio>
using namespace std;
typedef __int64 LL;
int a[1<<20];
LL c[21][2];
int d[21];
void merge(int deep,int l,int r)
{
	if(deep==0)
	{
		return;
	}
	int m=(l+r)/2;
	merge(deep-1,l,m);
	merge(deep-1,m,r);
	LL res=0;
	for(int i=l;i<m;i++)
		res+=lower_bound(a+m,a+r,a[i])-(a+m);  //inverse
	c[deep][0]+=res;
	res=0;
	for(int i=m;i<r;i++)
		res+=lower_bound(a+l,a+m,a[i])-(a+l);
	c[deep][1]+=res;
	inplace_merge(a+l,a+m,a+r);
}

int main()
{
	int n;
	scanf("%d",&n);
	for(int i=0;i<(1<<n);i++)
		scanf("%d",&a[i]);
	merge(n,0,1<<n);
	int m;
	scanf("%d",&m);
	while(m--)
	{
		int cc;
		scanf("%d",&cc);
		while(cc>=0)
		{
			d[cc]^=1;
			cc--;
		}
		LL ans=0;
		for(int i=0;i<=n;i++)
			ans+=c[i][d[i]];
		printf("%I64d\n",ans);
	}
//	system("pause");
	return 0;
}