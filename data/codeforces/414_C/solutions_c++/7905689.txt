#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>

using namespace std;
#define N 20
#define ll __int64
ll a[1 << N], n, m;
ll sum[N + 1][2]; 
void dfs(ll l, ll r, ll deep){
	if(l+1 >= r)return ;
	ll mid = (l+r)/2;
	dfs(l, mid, deep-1);
	dfs(mid, r, deep-1);
	ll cnt = 0;
	for(ll i = l; i < mid; i++){
		cnt += lower_bound(a+mid, a+r, a[i]) - (a+mid);
	}
	sum[deep][0] += cnt; 
	cnt = 0;
	for(ll i = mid; i < r; i++){
		cnt += lower_bound(a+l, a+mid, a[i]) - (a+l);
	}
	sum[deep][1] += cnt;
	inplace_merge(a+l, a+mid, a+r);
}
int main(){
	ll n, i, que, u;
	ll er[30];er[0] = 1;
	for(i=1;i<30;i++)er[i] = er[i-1]*2;
	while(~scanf("%I64d",&n)){
		memset(sum, 0, sizeof sum);
		for(i = 0; i < er[n]; i++)scanf("%I64d",&a[i]);
		dfs(0, er[n], n);
		scanf("%I64d",&que);
		while(que--)
		{
			scanf("%I64d",&u);
			ll ans = 0;
			while(u--)swap(sum[u+1][0], sum[u+1][1]);
			for(i=0; i <= n; i++) ans += sum[i][0];
			printf("%I64d\n",ans);
		}
	}
	return 0;
}