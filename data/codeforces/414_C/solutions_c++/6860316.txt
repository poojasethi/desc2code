#include <cstdio>
#include <algorithm>

using namespace std;

const int MAXN = 21;

typedef long long ll;

int N, M;
int A[1 << MAXN];

ll I[MAXN][2];
int T[MAXN];

void precomp(int l, int r, int depth) {
  if (l + 1 == r) {
    return;
  }

  int mid = (l + r) / 2;
  precomp(l, mid, depth + 1);
  precomp(mid, r, depth + 1);

  for (int i = l; i < mid; ++i) {
    I[depth][0] += lower_bound(A + mid, A + r, A[i]) - (A + mid);
  }
  for (int i = mid; i < r; ++i) {
    I[depth][1] += lower_bound(A + l, A + mid, A[i]) - (A + l);
  }
  inplace_merge(A + l, A + mid, A + r);
}

ll query(int Q) {
  for (int i = N - Q; i < N; ++i) {
    T[i] ^= 1;
  }
  ll res = 0;
  for (int i = 0; i < N; ++i) {
    res += I[i][T[i]];
  }
  return res;
}

int main() {
  scanf("%d", &N);
  int SZ = 1 << N;
  for (int i = 0; i < SZ; ++i) {
    scanf("%d", A + i);
  }

  precomp(0, SZ, 0);

  scanf("%d", &M);
  for (int i = 0; i < M; ++i) {
    int Q;
    scanf("%d", &Q);
    ll res = query(Q);   
    printf("%I64d\n", res);
  } 
  return 0;
}
