#include<algorithm>
#include<iostream>
#include<cstdio>
#include<vector>
using namespace std;

const int N = 20;
long long inverse[N][2];
int state[N];

vector<int> build(int n) {
	if(n == 0) {
		int v; cin >> v;
		return vector<int>(1, v);
	} else {
		vector<int> leftPart (build(n - 1));
		vector<int> rightPart (build(n - 1));
		for(int x = 0; x < 2; ++x) {
			for(int i = 0, j = 0; i < 1 << (n - 1); ++i) {
				while(j < 1 << (n - 1) && leftPart[i] > rightPart[j]) ++j;
				inverse[n - 1][x] += j;
			}
			swap(leftPart, rightPart);
		}
		vector<int> all (1 << n);
		merge(leftPart.begin(), leftPart.end(), rightPart.begin(), rightPart.end(), all.begin());
		return all;
	}
}

int main() {
	cin.sync_with_stdio(false); cin.tie(NULL);
	int n; cin >> n;
	build(n);
	int m; cin >> m;
	for(int i = 0; i < m; ++i) {
		int q; cin >> q;
		for(int j = 0; j < q; ++j) state[j] ^= 1;
		long long res = 0;
		for(int j = 0; j < n; ++j) res += inverse[j][state[j]];
		printf("%I64d\n", res);
	}
	return 0;
}
