#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<cmath>
#define X first
#define Y second
#define fo(i,n) for(int i=0;i<n;i++)
#define fr(i,n) for(int i=1;i<=n;i++)
#define pb push_back
#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1

using namespace std;

typedef long long ll;

const int mod=(int)1e9+7;
const int inf=(int)2e9;

int n,k,d;
int a[201000];
int s1[201000],s2[201000];
int t1,t2;

void update(int &l,int &r,int L,int R){
	if(R-L>r-l||R-L==r-l&&L<l) l=L,r=R;
	return;
}

map<int,int>hash;

ll minr[201000<<2],dt[201000<<2];

void pushup(int rt){
	minr[rt]=min(minr[rt<<1],minr[rt<<1|1]);
	return;
}

void pushdown(int rt){
	if(dt[rt]){
		minr[rt<<1]+=dt[rt];
		dt[rt<<1]+=dt[rt];
		minr[rt<<1|1]+=dt[rt];
		dt[rt<<1|1]+=dt[rt];
		dt[rt]=0;
	}
	return;
}

void update(int L,int R,int l,int r,int rt,ll c){
	if(L<=l&&r<=R){
		minr[rt]+=c;
		dt[rt]+=c;
		return;
	}
	int mid=l+r>>1;
	pushdown(rt);
	if(L<=mid) update(L,R,lson,c);
	if(mid<R) update(L,R,rson,c);
	pushup(rt);
	return;
}

int query(int l,int r,int rt,ll c){
	if(l==r) return l;
	int mid=l+r>>1;
	pushdown(rt);
	if(minr[rt<<1]<=c) return query(lson,c);
	return query(rson,c);
}

int main(){
//	freopen("seq.in","r",stdin);
//	freopen("seq.out","w",stdout);
	scanf("%d%d%d",&n,&k,&d);
	for(int i=1;i<=n;i++)
		scanf("%d",&a[i]);
	if(!d){
		int now=1,l=1,r=1;
		for(int i=2;i<=n;i++){
			if(a[i]!=a[i-1]) now=1;
			else now++;
			update(l,r,i-now+1,i);
		}
		printf("%d %d\n",l,r);
	}
	else{
		int l=1,r=1,last=1;
		s1[++t1]=1;s2[++t2]=1;hash[a[1]]=1;
		update(1,1,1,n,1,1);
		for(int i=2;i<=n;i++){
			if(((a[i]-a[i-1])%d+d)%d!=0){
				update(last,i-1,1,n,1,inf);
				last=i;
			}
			if(hash[a[i]]+1>last){
				update(last,hash[a[i]],1,n,1,inf);
				last=hash[a[i]]+1;
			}
			hash[a[i]]=i;
			update(i,i,1,n,1,i);
			while(t1&&a[i]>=a[s1[t1]]) {update(s1[t1-1]+1,s1[t1],1,n,1,(a[i]/d-a[s1[t1]]/d));t1--;}
			while(t2&&a[i]<=a[s2[t2]]) {update(s2[t2-1]+1,s2[t2],1,n,1,(a[s2[t2]]/d-a[i]/d));t2--;}
			s1[++t1]=i;s2[++t2]=i;
			update(l,r,query(1,n,1,i+k),i);
		}
		printf("%d %d\n",l,r);
	}
	return 0;
}
