#include<map>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int N = 200005;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define fd(i , st , en) for (int i = st; i >= en; i--)
#define Me(x , y) memset(x , y , sizeof(x))

struct _two{
    int a , b;
}t[N * 4];

map<int,int>c;
int maxs[N] , mins[N] , a[N] , p[N];
int n , k , d , maxt , mint , ans , be;

void Init(){
    scanf("%d%d%d" , &n , &k , &d);
    fo (i , 1 , n) scanf("%d" , a + i);
}

void Push(int x , int y){
    t[x].a += y; t[x].b += y;
}

void Change(int x , int l , int r , int st , int en , int value){
    if (st <= l && r <= en){
        Push(x , value); return;
    }
    if (t[x].b){
        Push(x + x , t[x].b); Push(x + x + 1 , t[x].b);
        t[x].b = 0;
    }
    int mid = l + r >> 1;
    if (st <= mid) Change(x + x , l , mid , st , en , value);
    if (en > mid) Change(x + x + 1 , mid + 1 , r , st , en , value);
    t[x].a = min(t[x + x].a , t[x + x + 1].a);
}

int Find(int x , int l , int r , int en){
    if (t[x].a > k || l > en) return 0;
    if (l == r) return l;
    if (t[x].b){
        Push(x + x , t[x].b); Push(x + x + 1 , t[x].b);
        t[x].b = 0;
    }
    int mid = l + r >> 1;
    int temp = Find(x + x + 1 , mid + 1 , r , en);
    if (!temp) return Find(x + x , l , mid , en);
    return temp;
}

void Make(int x , int l , int r){
    t[x] = (_two){k + 1 , 0};
    if (l == r) return;
    int mid = l + r >> 1;
    Make(x + x , l , mid); Make(x + x + 1 , mid + 1 , r);
}

void Calc(int l , int r){
    int n = 0;
    fo (i , l , r) p[++n] = (a[i] - a[l]) / d;
    maxt = mint = 0; c.clear(); Make(1 , 1 , n); int Last = n + 1; maxs[0] = mins[0] = n + 1;
    fd (i , n , 1){
        int last = i + 1;
        while (maxt && p[maxs[maxt]] <= p[i]){
            Change(1 , 1 , n , last , maxs[maxt - 1] - 1, p[i] - p[maxs[maxt]]);
            last = maxs[--maxt];
        }
        maxs[++maxt] = i;
        last = i + 1;
        while (mint && p[mins[mint]] >= p[i]){
            Change(1 , 1 , n , last , mins[mint - 1] - 1 , p[mins[mint]] - p[i]);
            last = mins[--mint];
        }
        mins[++mint] = i;
        if (i != n) Change(1 , 1 , n , i + 1 , n , -1);
        Change(1 , 1 , n , i , i , -k - 1);
        int temp = c[p[i]];
        if (temp) Last = min(Last , temp);
        c[p[i]] = i;
        int tans = Find(1 , 1 , n , Last - 1) - i + 1;
        if (tans >= ans){
            ans = tans; be = l + i - 1;
        }
    }
}

void Work(){
    if (!d){
        int last = 1; a[n + 1] = a[n] + 1;
        fo (i , 1 , n + 1)
            if (a[i] != a[i - 1]){
                if (i - last > ans){
                    ans = i - last; be = last;
                }
                last = i;
            }
        printf("%d %d\n" , be , be + ans - 1); return;
    }
    int last = n;
    fd (i , n - 1 , 0)
        if ((a[i] - a[i + 1]) % d || !i){
            Calc(i + 1 , last); last = i;
        }
    printf("%d %d\n" , be , be + ans - 1);
}

int main(){
    Init();
    Work();
    return 0;
}
