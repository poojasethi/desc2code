#include <cstdio>
#include <algorithm>
#include <map>
#include <queue>
using namespace std;

const int N=200005;

int n,k,d;

int a[N],r[N],las[N],t[N];

map<int,int> mp;

deque<int> qmi,qma;

int mi[N*4],delta[N*4];

void update(int cur){
	mi[cur]=min(mi[cur<<1],mi[cur<<1|1])+delta[cur];
}

void modify(int cur,int beg,int end,int L,int R,int D){
	if(end<=L||beg>=R) return;
	if(beg>=L&&end<=R){
		delta[cur]+=D;
		mi[cur]+=D;
		return;
	}
	int mid=(beg+end)>>1;
	modify(cur<<1,beg,mid,L,R,D);
	modify(cur<<1|1,mid,end,L,R,D);
	update(cur);
}

int res;

void query(int cur,int beg,int end,int L,int R,int D){
	if(end<=L||beg>=R) return;
	if(mi[cur]>D) return;
	if(end-beg==1){
		res=end;
		return;
	}
	int mid=(beg+end)>>1;
	query(cur<<1,beg,mid,L,R,D-delta[cur]);
	if(res) return;
	query(cur<<1|1,mid,end,L,R,D-delta[cur]);
}

int main(){
	scanf("%d%d%d",&n,&k,&d);
	for(int i=1;i<=n;i++) scanf("%d",&a[i]);
	int I=1,J=1;
	if(d){
		for(int i=1;i<=n;i++){
			las[i]=mp[a[i]];
			mp[a[i]]=i;
			r[i]=a[i]%d;
			if(r[i]<0) r[i]+=d;
			a[i]=(a[i]-r[i])/d;
			t[i]=max(i>1&&r[i]==r[i-1]?t[i-1]:i,las[i]+1);
			modify(1,0,n,i-1,i,i);
			while(!qmi.empty()&&qmi.front()<t[i]) qmi.pop_front();
			while(!qmi.empty()&&a[qmi.back()]>a[i]){
				int j=qmi.back();
				qmi.pop_back();
				modify(1,0,n,qmi.empty()?t[i]-1:qmi.back(),j,+a[j]);
			}
			modify(1,0,n,qmi.empty()?t[i]-1:qmi.back(),i,-a[i]);
			qmi.push_back(i);
			while(!qma.empty()&&qma.front()<t[i]) qma.pop_front();
			while(!qma.empty()&&a[qma.back()]<a[i]){
				int j=qma.back();
				qma.pop_back();
				modify(1,0,n,qma.empty()?t[i]-1:qma.back(),j,-a[j]);
			}
			modify(1,0,n,qma.empty()?t[i]-1:qma.back(),i,+a[i]);
			qma.push_back(i);
			res=0;
			query(1,0,n,t[i]-1,i,i+k);
			if(i-res>I-J){
				I=i;
				J=res;
			}
		}
	}
	else{
		for(int i=1,j;i<=n;i=j){
			for(j=i;j<=n&&a[j]==a[i];j++);
			if(j-1-i>I-J){
				J=i;
				I=j-1;
			}
		}
	}
	printf("%d %d\n",J,I);
}
