//#pragma comment(linker, "/STACK:134217728")

#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <memory>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size())
#define ALL(a) (a).begin(),(a).end()
#define PB push_back
#define MP make_pair

#define MAX 18

int A[1 << MAX];
int R[1 << MAX];
int I[1 + MAX];
int RMQ[2 << MAX];
int Min[2 << MAX];

int add(int level, int pos, int a, int b, int c)
{
	int& res = Min[I[level] + pos];
	int& val = RMQ[I[level] + pos];
	int f = pos << level;
	int t = (pos + 1) << level;

	if (t <= a || b <= f)
		return res;
	if (a <= f && t <= b)
	{
		val += c;
		res += c;
		return res;
	}

	return res = val + min(add(level - 1, pos + pos, a, b, c), add(level - 1, pos + pos + 1, a, b, c));
}

int find(int level, int pos, int a, int b, int c)
{
	int& res = Min[I[level] + pos];
	int& val = RMQ[I[level] + pos];
	int f = pos << level;
	int t = (pos + 1) << level;

	if (t <= a || b <= f)
		return -1;
	if (a <= f && t <= b)
	{
		if (res > c)
			return -1;
		if (level == 0)
			return pos;
	}

	int ret = find(level - 1, pos + pos, a, b, c - val);
	if (ret == -1)
		ret = find(level - 1, pos + pos + 1, a, b, c - val);

	return ret;
}

int main()
{
	int n, k, d;
	scanf("%d%d%d", &n, &k, &d);

	int i, j, l;
	FOR(i, 0, n)
	{
		int a;
		scanf("%d", &a);
		a += 1 << 30;
		if (d == 0)
		{
			R[i] = a;
			A[i] = i;
		}
		else
		{
			R[i] = a % d;
			A[i] = a / d;
		}
	}

	I[0] = 0;
	FOR(i, 0, MAX)
		I[i + 1] = I[i] + (1 << (MAX - i));

	CLEAR(RMQ, 0);
	CLEAR(Min, 0);

	map<int, int> Map;
	stack<int> small, big;
	int from = 0;
	PII res(0, 0);
	FOR(i, 0, n)
	{
		if (i != 0 && R[i] != R[i - 1])
			from = i;
		if (Map.find(A[i]) != Map.end())
			from = max(from, Map[A[i]] + 1);
		
		Map[A[i]] = i;

		while (!small.empty() && A[small.top()] > A[i])
		{
			int v = A[i];
			j = small.top();
			small.pop();
			l = small.empty() ? 0 : small.top() + 1;
			if (!small.empty())
				v = max(v, A[small.top()]);

			add(MAX, 0, l, i, A[j] - v);
		}

		while (!big.empty() && A[big.top()] < A[i])
		{
			int v = A[i];
			j = big.top();
			big.pop();
			l = big.empty() ? 0 : big.top() + 1;
			if (!big.empty())
				v = min(v, A[big.top()]);

			add(MAX, 0, l, i, v - A[j]);
		}

		small.push(i);
		big.push(i);

		add(MAX, 0, 0, i, -1);

		int r = find(MAX, 0, from, i, k);
		if (r != -1 && i - r > res.second)
		{
			res.first = r;
			res.second = i - r;
		}
	}

	VInt v;
	FOR(i, res.first, res.first + res.second + 1)
		v.push_back(A[i]);

	sort(ALL(v));
	FOR(i, 1, SIZE(v))
	if (v[i] == v[i - 1])
		throw 0;

	int t = v.back() - v.front() - v.size() + 1;
	if (t > k)
	{
		fprintf(stderr, "Error %d <==> %d\n", t, k);
		throw 0;
	}

	printf("%d %d\n", res.first + 1, res.first + res.second + 1);
	return 0;
};
