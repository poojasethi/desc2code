#include<cstdio>
#include<map>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<set>
using namespace std;
#define N 300000
int n,k,d,a[N],ansl,ansr,sta1[N],sta2[N],top1,top2;
const int offset=1100000;
map<int,int>last;
struct node{
	node*c[2];
	int delta,set;
	void maintain(){
		if(c[0])
			delta=min(c[0]->delta,c[1]->delta)+set;
	}
}pool[N*4],*stp=pool,*root;
#define mid ((l+r)>>1)
int ql,qr,qv;
node*build(int l,int r){
	node*o=stp++;
	if(l<r)o->c[0]=build(l,mid),o->c[1]=build(mid+1,r);
	return o;
}void modify(node*o,int l,int r){
	if(ql<=l&&r<=qr)o->set+=qv,o->delta+=qv;
	else{
		if(ql<=mid)modify(o->c[0],l,mid);
		if(qr>mid)modify(o->c[1],mid+1,r);
		o->maintain();
	}
}
int query(node*o,int l,int r){
	if(l==r)return l;
	else{
		qv-=o->set;
		if(o->c[0]->delta<=qv)return query(o->c[0],l,mid);
		else return query(o->c[1],mid+1,r);
	}
}
int main(){
	scanf("%d%d%d",&n,&k,&d);
	ansl=ansr=1;
	for(int i=1;i<=n;i++)scanf("%d",&a[i]),a[i]+=1+(int)1e9;
	if(d==0)
		for(int i=1,ni;i<=n;i=ni+1){
			for(ni=i;ni<n&&a[ni+1]==a[i];ni++);
			if(ni-i>ansr-ansl)ansr=ni,ansl=i;
		}
	else{
		root=build(1,n);
		root->set=root->delta=offset;
		for(int i=1,ni=0;i<=n;i++){
			if(a[i]%d!=a[i-1]%d){
				if(i!=1){
					ql=ni+1;qr=i-1;qv=offset;
					modify(root,1,n);
					ni=i-1;
				}
			}else{
				if(last[a[i]]>ni)
					ql=ni+1,qr=last[a[i]],qv=offset,modify(root,1,n),ni=last[a[i]];
			}
			while(top1&&a[sta1[top1]]<a[i]){
				ql=sta1[top1-1]+1,qr=sta1[top1],qv=a[i]/d-a[sta1[top1]]/d;
				modify(root,1,n);
				top1--;
			}while(top2&&a[sta2[top2]]>a[i]){
				ql=sta2[top2-1]+1,qr=sta2[top2],qv=a[sta2[top2]]/d-a[i]/d;
				modify(root,1,n);
				top2--;
			}sta1[++top1]=i;sta2[++top2]=i;
			last[a[i]]=i;
			ql=qr=i;qv=-offset+i;
			modify(root,1,n);
			qv=k+i;
			int rangeL=query(root,1,n);
			if(i-rangeL>ansr-ansl)
				ansr=i,ansl=rangeL;
		}
	}printf("%d %d\n",ansl,ansr);
}
