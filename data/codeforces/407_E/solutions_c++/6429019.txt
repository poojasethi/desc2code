#include<cstdio>
#include<algorithm>
#include<map>
using namespace std;
typedef long long LL;
const int MAXN = 200010;
const LL inf = 1LL << 50;
int N, K, D, ans, ansl, ansr, a[MAXN];
int pos1[MAXN], pos2[MAXN], mx[MAXN], mi[MAXN];
map<int, int> pre;
struct Tseg
{
	int L, R, mid; LL key, flag; Tseg *lch, *rch;
	void Init(int l, int r)
	{
		lch = rch = 0x0; flag = 0;
		mid = ((L = l) + (R = r)) / 2;
		if(L == R) { key = 0; return; }
		(lch = new Tseg()) -> Init(l, mid);
		(rch = new Tseg()) -> Init(mid + 1, r);
		key = min(lch -> key, rch -> key);
	}
	void Pushdown()
	{
		if(!flag) return; LL d = flag; flag = 0;
		if(lch) lch -> flag += d, lch -> key += d;
		if(rch) rch -> flag += d, rch -> key += d;
	}
	void Modify(int l, int r, LL v)
	{
		if(l > r) return; Pushdown();
		if(L == l && R == r) { flag += v; key += v; return; }
		if(l > mid) rch -> Modify(l, r, v); else
		if(r <=mid) lch -> Modify(l, r, v); else
		lch -> Modify(l, mid, v), rch -> Modify(mid + 1, r, v);
		key = min(lch -> key, rch -> key);
	}
	int Query()
	{
		Pushdown(); if(L == R) return L;
		return (lch->key <= (LL) K * D) ? lch->Query() : rch->Query();
	}
} T;
int main()
{
	scanf("%d%d%d", &N, &K, &D);
	for(int i = 1; i <= N; ++i) scanf("%d", &a[i]);
	if(D == 0)
	{
		int last = 0;
		for(int i = 1; i <= N; ++i)
		{
			if(i == 1 || a[i] != a[i-1]) last = i;
			if(i - last + 1 > ans) ans = i - last + 1, ansl = last, ansr = i;
		}
		printf("%d %d\n", ansl, ansr);
		return 0;
	}
	T.Init(1, N); int last = 1, t1 = 0, t2 = 0;
	for(int i = 1; i <= N; ++i)
	{
		if(i != 1 && (a[i] - a[i-1]) % D) T.Modify(last, i - 1, inf), last = i;
		if(pre[a[i]] >= last) T.Modify(last, pre[a[i]], inf), last = pre[a[i]] + 1;
		for(; t1 > 0 && a[i] > a[mx[t1]]; --t1) T.Modify(mx[t1-1] + 1, mx[t1], a[i] - a[mx[t1]]);
		for(; t2 > 0 && a[i] < a[mi[t2]]; --t2) T.Modify(mi[t2-1] + 1, mi[t2], a[mi[t2]] - a[i]);
		if((mx[++t1] = mi[++t2] = pre[a[i]] = i) != 1) T.Modify(last, i - 1, -D); int temp = T.Query();
		if(i - temp + 1 > ans) ans = i - temp + 1, ansl = temp, ansr = i;
	}
	printf("%d %d\n", ansl, ansr);
	return 0;
}
