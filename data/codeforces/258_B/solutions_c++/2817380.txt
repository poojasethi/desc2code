#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
const long long mod=1e9+7;
long long res=0;
int ans[12],rec[12],turn;
int dp[12][12];
int dfs(int loc,int sum,bool top){
    if(!loc) return sum==turn;
    if(sum>turn) return 0;
    if(!top&&dp[loc][sum]!=-1) return dp[loc][sum];
    int ans=0;
    int ma=top?rec[loc]:9;
    for(int i=0;i<=ma;i++)
        ans+=dfs(loc-1,sum+(i==4||i==7),top&&(i==rec[loc]));     
    return !top?dp[loc][sum]=ans:ans;
}
int find(int x){
    memset(dp,-1,sizeof(dp));
    int len=0;
    for(;x;x/=10) rec[++len]=x%10;
    int ans=dfs(len,0,1);
    if(turn==0) return ans-1;
    return ans;
}
void dfs2(int t,int x,int y,long long s){
    if (t>5) {res=(res+s)%mod; return;}
    for (int i=0;i+y<x;i++)
        ans[i]--,dfs2(t+1,x,y+i,s*(ans[i]+1)%mod),ans[i]++;
}
int main(){
    int n;
    cin>>n;
    memset(ans,0,sizeof(ans));
    for(int i=0;i<=9;i++){
        turn=i;
        ans[i]=find(n);
    }
    for(int i=9;i>0;i--)
        if(ans[i]) ans[i]--,dfs2(0,i,0,ans[i]+1),ans[i]++;
    cout<<res<<endl;
    return 0;
}