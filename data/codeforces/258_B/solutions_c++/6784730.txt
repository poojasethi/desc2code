#include<stdio.h>
#include<cstring>
#define rep(i, n)	for(int i = 0; i < n; i ++)

using namespace std;

const int N = 11;
const int mod = 1000000000 + 7;

int c[N], num[N], ways[N];
int dp[N][N];
long long ans;

int dfs(int pos, int cnt, bool limit) {
	if(pos < 0)		return cnt == 0;
	int ret = dp[pos][cnt];
	if(!limit && ret != -1)		return ret;
	ret = 0;
	int up = limit ? num[pos]: 9;
	for(int i = 0; i <= up; i ++) {
		ret += dfs(pos - 1, cnt - (i == 4 || i == 7), limit && i == up);
	}
	if(!limit)		dp[pos][cnt] = ret;
	return ret;
}

void dfs(int i, int way) {
	if(i < 7) {
		for(int k = 0; k < N; k ++) {
			ways[i] = k;
			c[k] --;
			dfs(i + 1, way * 1LL * (c[k] + 1) % mod);
			c[k] ++;
		}
	} else {
		int sum = 0;
		for(int k = 0; k < 6; k ++)
			sum += ways[k];
		if(sum < ways[6]) {
			ans += way;
			if(ans >= mod)
				ans -= mod;
		}
	}
}

int main() {
	int n, len = 0;
	scanf("%d", &n);
	while(n) {
		num[len ++] = n % 10;
		n /= 10;
	}
	memset(dp, -1, sizeof dp);
	for(int i = 0; i < N; i ++) {
		c[i] = dfs(len - 1, i, true);
	}
	c[0] --;
	ans = 0;
	dfs(0, 1);
	printf("%d\n", ans);
}
	
