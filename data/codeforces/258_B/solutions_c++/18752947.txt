#include <cstdio>
#include <cstring>
#include <algorithm>
#define MOD 1000000007
#define L 11

int m,dp[L][L],cnt[L],d[L];
long long ans,sum[L];

int dfs(int l,int k,bool c) {
  if (!l) return k?0:1;
  if (!c && dp[l][k] != -1) return dp[l][k];
  int res = 0,mx = c?d[l]:9;
  for (int i = 0; i <= mx; ++i)
    res += dfs(l-1,k-((i==4||i==7)?1:0),c&&i==mx);
  if (!c) dp[l][k] = res;
  return res;
}

void cal(int n) {
  int len = 0;
  while (n) {
    d[++len] = n%10;
    n /= 10;
  }
  for (int i = 0; i <= len; ++i) cnt[i] = dfs(len,i,true);
  --cnt[0];//exclude 0
}

long long search(int k,int s) {
  if (!k) return s?0:1;
  long long res = 0;
  for (int i = 0; i <= s; ++i)
    if (cnt[i]) {
      res += ((long long)(cnt[i]--))*search(k-1,s-i)%MOD;
      ++cnt[i];
    }
  return res;
}

int main() {
  scanf("%d",&m);
  memset(dp,-1,sizeof(dp));
  cal(m);
  sum[L-1] = cnt[L-1];
  for (int i = L-2; i >= 0; --i) sum[i] = (sum[i+1] + (long long)cnt[i])%MOD;
  for (int i = 0; i < L-1; ++i) {//sum == i
    if (!sum[i+1]) break;
    ans = (ans+search(6,i)*sum[i+1]%MOD)%MOD;
  }
  printf("%I64d\n",ans);
  return 0;
}
