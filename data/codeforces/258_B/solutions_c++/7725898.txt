#include <bits/stdc++.h>
using namespace std;
const int MOD = (int)1e9 + 7;
int cnt[10], dig[15], dp[15][15];
int dfs(int x, int y, int z, bool lim) {
	if(x < 0) return y == z;
	if(y > z) return 0;
	if(!lim && ~dp[x][y]) return dp[x][y];
	int up = lim ? dig[x] : 9;
	int ans = 0;
	for(int i = 0; i <= up; i++) {
		ans += dfs(x - 1, y + (i == 4 || i == 7), z, lim && (i == up));
	}
	return lim ? ans : dp[x][y] = ans;
}
void solve(int x) {
	int p = 0;
	while(x) {
		dig[p++] = x % 10;
		x /= 10;
	}
	for(int i = 0; i <= 9; i++) {
		memset(dp, -1, sizeof(dp));
		cnt[i] = dfs(p - 1, 0, i, 1);
	}
	cnt[0]--;
}
int gao(int x, int y) {
	if(y == 0) return x == 0;
	int ans = 0;
	for(int i = 0; i <= x; i++) {
		if(cnt[i]) {
			cnt[i]--;
			ans += (long long)(cnt[i] + 1) * gao(x - i, y - 1) % MOD;
			ans %= MOD;
			cnt[i]++;
		}
	}
	return ans;
}
int main() {
	int m;
	scanf("%d", &m);
	solve(m);
	long long ans = 0;
	for(int i = 1; i <= 9; i++) {
		for(int j = 0; j < i; j++) {
			if(cnt[i]) ans += (long long)cnt[i] * gao(j, 6) % MOD;
			ans %= MOD;
		}
	}
	printf("%I64d\n", ans);
	return 0;
}
