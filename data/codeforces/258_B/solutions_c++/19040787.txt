#include<iostream>
#include <cstring>
#include  <cstdio>
using namespace std;
#define mod 1000000007
long long dp[12][12], luck[12], bit[12], ans, bt;
void Dfs(long long now, long long Max, long long number, long long cur) {
	if (now >= Max) {
		return;
	}
	if (number == 7) {
		ans = (ans + cur) % mod;
		return;
	}
	for (int i = 0; i < bt; i++) {
		luck[i]--;
		Dfs(now + i, Max, number + 1, (cur*(luck[i] + 1)) % mod);
		luck[i]++;
	}
}
long long dfs(long long pos, long long res, bool limit) {
	if (pos == 0) {
		return res == 0;
	}
	if (!limit && (dp[pos][res] != -1)) {
		return dp[pos][res];
	}
	long long sum = 0, top = limit ? bit[pos] : 9;
	for (int i = 0; i <= top; i++) {
		sum += dfs(pos - 1, res - (i == 4 || i == 7), limit && (i == bit[pos]));
	}
	if (!limit) {
		dp[pos][res] = sum;
	}
	return sum;
}
int main() {
	int n;
	memset(dp, -1, sizeof(dp));
	while (scanf("%d", &n) != EOF) {
		bt = 0;
		ans = 0;
		while (n) {
			bit[++bt] = n % 10;
			n /= 10;
		}
		for (int i = 0; i <= bt; i++) {
			luck[i] = dfs(bt, i, 1);
		}
		luck[0]--;
		for (int i = 1; i <= bt; i++) {
			Dfs(0, i, 1, luck[i]);
		}
		printf("%lld\n", ans);
	}
	return 0;
}
	  		  	     				   	   	 		