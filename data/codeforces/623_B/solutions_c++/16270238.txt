#include<algorithm>

#include<stdio.h>
#include<string.h>
#include<iostream>
#include<cmath>
using namespace std;
const long long maxa = 1000005;
long long n, a, b;
long long p[maxa];
long long prim[maxa];
long long num_p = 0;
long long have_prim[maxa];
long long dp[maxa][3];
void make_prim(long long m){
    for(long long i = 2; i * i <= m; i++){
        if(m%i == 0){
            if(have_prim[i] == 0){
                have_prim[i] = 1;
                prim[num_p++] = i;
            }
            while(m%i == 0) m /= i;
        }
    }
    if(m != 1) prim[num_p++] = m;
}
long long ans = 1000000000000000000L;
long long dd[maxa];
void make_ans(long long m){
    long long o = 0;
    for(long long i = 0;i < n; i++){
        long long now = 1000000000000000000L;
        if(p[i]%m == 0){
            now = 0;
        }else if((p[i]+1)% m == 0 || (p[i]-1) % m == 0){
            now =b;
        }
        dp[i+1][0] = min(ans, dp[i][0] + now);
        dp[i+1][1] = min(dp[i][0], dp[i][1])+a;
        dp[i+1][2] = min(dp[i][2]+now,  min(dp[i+1][0], dp[i+1][1]));
    }
    ans = min(dp[n][2], ans);
}
int main(){
    scanf("%lld%lld%lld", &n,&a, &b);
    for(long long i = 0; i < n; i++){
        scanf("%lld", &p[i]);
    }
    for(long long i = -1; i <= 1; i++){
        make_prim(p[0]+i);
        make_prim(p[n-1]+i);
    }
    for(long long i = 0;i < num_p; i++){
        make_ans(prim[i]);
    }
    printf("%lld\n", ans);
}
