#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;

struct vect{
	double x, y;
	vect(){}
	vect(double x, double y) : x(x), y(y){}
	vect operator + (vect const &T) const{return vect(x+T.x, y+T.y);}
	vect operator - (vect const &T) const{return vect(x-T.x, y-T.y);}
	vect operator * (double const &t) const{return vect(x*t, y*t);}
	double len(){return sqrt(x*x + y*y);}
	vect resize(double d){return *this * (d / (*this).len()) ;}
	double operator % (vect const &T) const{return x*T.x + y*T.y;}
};

int n;
vect p[105], u, v;

int main(){
	scanf("%d", &n);
	if (n <= 4) puts("No solution");
	else{
		double R;
		if(n <= 6) R = 800;
		else R = 1000;
		
		double t = 2. * acos(-1.) / n;
		for (int i=0; i<n; i++){
			p[i].x = R * cos(t * i);
			p[i].y = R * sin(t * i);
		}
		
		double d = 0;
		for (int i=0; i+1<n; i++){
			u = p[(i+2)%n] - p[i+1];
			v = p[(i+n-1)%n] - p[i];
			d = d + 0.5;
			p[i+1] = p[i+1] + u.resize(d);
			p[i] = p[i] + v.resize(d);
		}
		
		for (int i=0; i<n; i++) printf("%.6f %.6f\n", p[i].x, p[i].y);
/*
		p[n] = p[0];
		for (int i=0; i<n; i++){
			u = p[i+1]-p[i];
			v = (i?p[i-1]:p[n-1])-p[i];
			printf("%f [%f]\n", (u%v)/u.len()/v.len(), u.len());
		}*/
	}
	return 0;
}
