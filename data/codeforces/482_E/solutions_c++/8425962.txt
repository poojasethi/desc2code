#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<vector>
#define MAXN 100005
using namespace std ;
typedef long long LL ;

int N, M ;
int pfa[MAXN], fa[MAXN], son[MAXN][2] ;
LL ans, size[MAXN], sum[MAXN], all[MAXN] ;
LL cnt[MAXN], val[MAXN], tag[MAXN] ;
vector<int> dn[MAXN] ;
char ss[20] ;

void Update(int x)
{
	size[x] = size[son[x][0]]+size[son[x][1]]+cnt[x] ;
	sum[x] = sum[son[x][0]]+sum[son[x][1]]+val[x]*cnt[x] ;
}
void Set_tag(int x, int ad)
{
	all[x] += cnt[x]*ad ;
	tag[x] += ad ;
}
void Push_down(int x)
{
	if(tag[x])
	{
		if(son[x][0]) Set_tag(son[x][0], tag[x]) ;
		if(son[x][1]) Set_tag(son[x][1], tag[x]) ;
		tag[x] = 0 ;
	}
}
void Rotate(int x, int d)
{
	int tmp = fa[x] ;
	pfa[x] = pfa[tmp], pfa[tmp] = 0 ;
	son[tmp][d^1] = son[x][d], fa[son[x][d]] = tmp ;
	if(fa[tmp]) son[fa[tmp]][son[fa[tmp]][1]==tmp] = x ;
	fa[x] = fa[tmp], fa[tmp] = x, son[x][d] = tmp ;
	Update(tmp), Update(x) ;
}
void Splay(int x, int to)
{
	Push_down(x) ;
	int tmp, d1, d2 ;
	while((tmp=fa[x]) != to)
	{
		if(fa[tmp]) Push_down(fa[tmp]) ;
		Push_down(tmp), Push_down(x) ;
		if(fa[tmp] == to)
			Rotate(x, son[tmp][0]==x) ;
		else if((d1=(son[tmp][0]==x)) != (d2=(son[fa[tmp]][0]==tmp)))
			Rotate(x, d1), Rotate(x, d2) ;
		else Rotate(tmp, d2), Rotate(x, d1) ;
	}
}
void Split(int x)
{
	Splay(x, 0) ;
	if(son[x][0])
	{
		cnt[x] += size[son[x][0]] ;
		pfa[son[x][0]] = x ;
		fa[son[x][0]] = 0, son[x][0] = 0 ;
		Update(x) ;
	}
}
void Merge(int x, int y)
{
	Split(x), Splay(y, 0) ;
	cnt[x] -= size[y] ;
	pfa[y] = 0 ;
	fa[y] = x, son[x][0] = y ;
	Update(x) ;
}
int Access(int x)
{
	Split(x) ;
	int tmp = x ;
	for(x=pfa[x]; x; tmp = x, x = pfa[x])
		Merge(x, tmp) ;
	return tmp ;
}
void Change(int x, int to)
{
	Splay(x, 0) ;
	ans += (to-val[x])*all[x] ;
	val[x] = to ;
	Update(x) ;
}
int Get_fa(int x)
{
	Splay(x, 0) ;
	if(!son[x][1]) return pfa[x] ;
	for(x = son[x][1]; son[x][0]; x=son[x][0]) ;
	return x ;
}
void Work(int x, int y)
{
	int tmp ;
	Access(x), tmp=Access(y) ;
	if(tmp != x) swap(x, y) ;
	// x is y-th ancestor or something else.
	tmp = Get_fa(y) ;
	
	Access(tmp), Splay(tmp, 0), Splay(y, 0) ;
	cnt[tmp] -= size[y], Update(tmp) ;
	pfa[y] = 0, ans -= 2*sum[tmp]*size[y] ;
	Set_tag(tmp, -2*size[y]) ;
	
	Access(x), Splay(x, 0) ;
	pfa[y] = x, ans += 2*sum[x]*size[y] ;
	Set_tag(x, 2*size[y]) ;
	cnt[x] += size[y], Update(x) ;
}
void Dfs(int x)
{
	int tmp, i ;
	cnt[x] = 1, all[x] = 1 ;
	for(i = 0; i<dn[x].size(); i++)
	{
		Dfs(tmp=dn[x][i]) ;
		all[x] += cnt[x]*cnt[tmp]*2 ;
		cnt[x] += cnt[tmp] ;
	}
	ans += all[x]*val[x] ;
	Update(x) ;
}

int main()
{
	int i, j, tmp, fr, to ;
	//freopen("1.in", "r", stdin) ;
	//freopen("1.out", "w", stdout) ;
	scanf("%d", &N) ;
	for(i = 2; i <= N; i ++)
		scanf("%d", &pfa[i]), dn[pfa[i]].push_back(i) ;
	for(i = 1; i <= N; i ++)
		scanf("%d", &val[i]) ;
	Dfs(1) ;
	printf("%.10lf\n", ans*1.0/N/N) ;
	scanf("%d", &M) ;
	for(i = 1; i <= M; i ++)
	{
		scanf("%s %d %d", ss, &fr, &to) ;
		if(ss[0] == 'P') Work(fr, to) ;
		else Change(fr, to) ;
		printf("%.10lf\n", ans*1.0/N/N) ;
	}
	//system("pause") ;
	return 0 ;
	
}
