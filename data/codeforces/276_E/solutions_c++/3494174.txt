#include <iostream>
#include <vector>
using namespace std;
typedef vector<int> VI;
#define PB push_back
const int M=100100;
int n,q,k=1,c[M],d[M],p[M];
VI g[M],v[M],w[M];
void dfs(int a,int f,int s=1){
  p[c[a]=k]=d[a]=s;
  for(int i=g[a].size();i-->0;)if(f!=g[a][i])dfs(g[a][i],a,s+1);
}
void upd(VI& t,int l,int h,int x){
  l=max(0,l),h=max(l,h),++l,++h;
  while(l<t.size())t[l]+=x,l+=l&-l;
  while(h<t.size())t[h]-=x,h+=h&-h;
}
int qry(VI& t,int u){
  int s=0;
  ++u;
  while(u>0)s+=t[u],u-=u&-u;
  return s;
}
main(){
  cin>>n>>q;
  for(int i=1,a,b;i<n&&cin>>a>>b;++i)g[a].PB(b),g[b].PB(a);
  for(int i=g[1].size();i-->0;dfs(g[1][i],1),++k);
  v[0]=VI(n+9,0),w[0]=v[0];
  for(int i=1;i<k;++i)v[i]=VI(p[i]+9,0),w[i]=v[i];
  for(int i=0,o,a,x,s;i<q&&cin>>o;++i){
    if(o){
      cin>>a;
      int s=qry(v[0],d[a]);
      if(a>1){
        s-=qry(w[c[a]],d[a]);
        s+=qry(v[c[a]],d[a]);
      }
      cout<<s<<endl;
    }
    else{
      cin>>a>>x>>s;
      if(s>=d[a]){
        upd(v[0],0,s-d[a]+1,x);
        if(a>1)upd(w[c[a]],0,s-d[a]+1,x);
      }
      if(a>1)upd(v[c[a]],d[a]-s,d[a]+s+1,x);
    }
  }
}