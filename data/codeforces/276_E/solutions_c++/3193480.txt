#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn=100002;
struct bit{
  int f[maxn];
  int n;
  void add(int x,int y){
    for (;x<=n;x+=x&(-x)) f[x]+=y;
  }
  int sum(int x){
    int s=0;
    for (;x;x-=x&(-x)) s+=f[x];
    return s;
  }
}p,q;
int a[maxn*2][2],b[maxn],d[maxn];
int c[maxn],size[maxn],sum[maxn];
int n,m,s,ans;

void add(int i,int j){
  a[++s][0]=b[i];
  b[i]=s;
  a[s][1]=j;
}

void dfs(int k,int father){
  int i,j;
  if (father==1) c[k]=++s;
  else c[k]=c[father];
  size[c[k]]++;
  d[k]=d[father]+1;
  for (i=b[k];i;i=a[i][0]){
    j=a[i][1];
    if (j!=father) dfs(j,k);
  }
}

int main(){
  int i,j,k,l,r;
  scanf("%d%d",&n,&m);
  for (k=1;k<n;k++){
    scanf("%d%d",&i,&j);
    add(i,j);
    add(j,i);
  }
  d[0]=-1;
  s=0;
  dfs(1,0);
  for (i=1;i<=s;i++) sum[i]=sum[i-1]+size[i];
  p.n=q.n=n;
  while (m--){
    scanf("%d%d",&i,&k);
    if (i) {
      if (k==1) printf("%d\n",ans);
      else printf("%d\n",p.sum(d[k])+q.sum(sum[c[k]-1]+d[k]));
    }
    else {
      scanf("%d%d",&i,&j);
      if (k==1) ans+=i,p.add(1,i),p.add(j+1,-i);
      else {
        if (d[k]<=j) ans+=i,p.add(1,i),p.add(j-d[k]+1,-i),l=j-d[k]+1;
        else l=d[k]-j;
        r=d[k]+j;
        l=max(l,1);
        r=min(r,size[c[k]]);
        if (l<=r){
          l+=sum[c[k]-1];
          r+=sum[c[k]-1];
          q.add(l,i);
          q.add(r+1,-i);
        }
      }
    }
  }
}
