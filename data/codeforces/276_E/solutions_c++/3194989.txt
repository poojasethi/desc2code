#include <cstdio>
#include <vector>

using namespace std;

const int MAXN=100005;

int n, q, allplus, deep[MAXN], id[MAXN];
vector<int> E[MAXN];

struct BIT {
	vector<int> tsum;
	void Modify(int x, int add)
	{
		while (x < tsum.size()) {
			tsum[x] += add;
			x += x&(-x);
		}
	}
	int GetSum(int x)
	{
		int sum=0;
		while (x) {
			sum += tsum[x];
			x -= x&(-x);
		}
		return sum;
	}
	int GetSum(int l, int r)
	{
		return GetSum(r)-GetSum(l-1);
	}
} T[MAXN];

void Init()
{
	scanf("%d%d", &n, &q);
	int x, y, fa, i, mx=0;
	for (i=1; i<n; i++) {
		scanf("%d%d", &x, &y);
		E[x].push_back(y);
		E[y].push_back(x);
	}
	for (i=1; i<=E[1].size(); i++) {
		fa=1, x=E[1][i-1];
		deep[x] = deep[fa]+1;
		id[x] = i;
		while (E[x].size() != 1) {
			y = E[x][E[x][0]==fa];
			fa=x, x=y;
			deep[x] = deep[fa]+1;
			id[x] = i;
		}
		T[i].tsum.resize(deep[x]+1);
		if (deep[x] > mx)
			mx = deep[x];
	}
	T[0].tsum.resize(mx+1);
}

void Modify()
{
	int v, x, d, dep;
	scanf("%d%d%d", &v, &x, &d);
	if (v == 1) {
		allplus += x;
		T[0].Modify(d-dep+1, -x);
		return;
	}
	dep = deep[v];
	if (dep-d >= 1) {
		T[id[v]].Modify(dep-d, x);
		T[id[v]].Modify(dep+d+1, -x);
	}
	else {
		allplus += x;
		T[0].Modify(d-dep+1, -x);
		T[id[v]].Modify(d-dep+1, x);
		T[id[v]].Modify(dep+d+1, -x);
	}
}

void Output()
{
	int v;
	scanf("%d", &v);
	if (v == 1)
		printf("%d\n", allplus);
	else
		printf("%d\n", allplus+T[id[v]].GetSum(deep[v])+T[0].GetSum(deep[v]));
}

int main()
{
	Init();
	int op;
	while (q--) {
		scanf("%d", &op);
		if (op == 0)
			Modify();
		else
			Output();
	}
	return 0;
}

	   			 		 	 				 	  	