#include <iostream>
#include <vector>
using namespace std;

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int n, q;
	cin >> n >> q;

	vector<int> adjlist[n+1];
	int a, b;
	for (int i = 1; i < n; ++i) {
		cin >> a >> b;
		adjlist[a].push_back(b);
		adjlist[b].push_back(a);
	}

	pair<int,int> pl[n+1];
	int m = adjlist[1].size();
	vector<int> sub[m];
	vector<int> main;
	int maxlength = 0;

	for (int i = 0; i < m; ++i) {
		int j = 1, k = adjlist[1][i], l = 1;
		pl[k] = pair<int,int>(i,1);
		while (adjlist[k].size() > 1) {
			if (adjlist[k][0] != j) {
				j = k;
				k = adjlist[j][0];
			}
			else {
				j = k;
				k = adjlist[j][1];
			}
			pl[k] = pair<int,int>(i,++l);
		}
		sub[i].resize(++l);
		if (maxlength < l)
			maxlength = l;
	}
	pl[0] = pair<int,int>(-1,0);
	main.resize(maxlength);

	bool type;
	int v, x, d, size, ans;
	for (; q > 0; q--) {
		cin >> type;
		if (type) {
			cin >> v;
			ans = main[0];
			b = pl[v].second;
			for (int step = 1; b > 0; step <<= 1) {
				if (b & step) {
					ans += main[b];
					b -= step;
				}
			}
			a = pl[v].first;
			b = pl[v].second;
			for (int step = 1; b > 0; step <<= 1) {
				if (b & step) {
					ans += sub[a][b];
					b -= step;
				}
			}
			cout << ans << '\n';
		}
		else {
			cin >> v >> x >> d;
			b = d-pl[v].second+1;
			if (b > 0) {
				main[0] += x;
				for (int step = 1; b < maxlength; step <<= 1) {
					if (b & step) {
						main[b] -= x;
						b += step;
					}
				}
			}
			if (v == 1) continue;
			a = pl[v].first;
			size = sub[a].size();
			b = pl[v].second+d+1;
			for (int step = 1; b < size; step <<= 1) {
				if (b & step) {
					sub[a][b] -= x;
					b += step;
				}
			}
			b = pl[v].second-d;
			if (b <= 0) b = 1-b;
			for (int step = 1; b < size; step <<= 1) {
				if (b & step) {
					sub[a][b] += x;
					b += step;
				}
			}
		}
	}
	return 0;
}
