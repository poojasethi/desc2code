#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#define ll long long
using namespace std;
const int N = 100005;
int n, q, dis[N], root[N];
vector<int> g[N];
vector<vector<ll> > C;

int lowbit(int x) {
	return x & (-x);
}

void Add(int st, int en, int val, int cur) {
	if (st > en)
		return;
	int sz = C[cur].size();
	for (int i = en + 1; i < sz; i += lowbit(i))
		C[cur][i] -= val;
	for (int i = st; i < sz; i += lowbit(i))		
		C[cur][i] += val;
}

ll Sum(int deep, int cur) {
	ll ret = 0;
	int sz = C[cur].size();
	for (int i = deep; i > 0; i -= lowbit(i))
		ret += C[cur][i];
	return ret;
}

void dfs(int u, int pre, int cnt, int cur) {
	dis[u] = cnt;
	root[u] = cur;
	C[cur].push_back(0);
	int sz = g[u].size();
	for (int i = 0; i < sz; i++) {
		int v = g[u][i];
		if (v != pre)
			dfs(v, u, cnt + 1, cur);
	}
}

int main() {
	scanf("%d%d", &n, &q);
	for (int i = 0; i <= n; i++)
		g[i].clear();
	int a, b, op, l, r, x, v, d;
	for (int i = 1; i < n; i++) {
		scanf("%d%d", &a, &b);
		g[a].push_back(b);
		g[b].push_back(a);
	}
	int sz = g[1].size();
	C.resize(sz + 5);
	for (int i = 0; i < sz; i++) {
		C[i + 1].push_back(0);
		dfs(g[1][i], 1, 1, i + 1);
	}
	C[0].resize(N, 0);
	ll sum = 0;
	while (q--) {
		scanf("%d", &op);
		if (op == 0) {
			scanf("%d%d%d", &v, &x, &d);
			int cur = root[v];		
			if (d < dis[v])
				Add(dis[v] - d, dis[v] + d, x, cur);
			else {
				sum += x;
				Add(1, dis[v] + d, x, cur);
				Add(1, d - dis[v], x, 0);
				Add(1, d - dis[v], -x, cur);
			}
		}
		else {
			scanf("%d", &v);
			if (v == 1)
				printf("%lld\n", sum);
			else {
				int cur = root[v];
				printf("%lld\n", Sum(dis[v], cur) + Sum(dis[v], 0));
			}
		}
	}
	return 0;
}
		 			 	  			 	   		 		 	    		