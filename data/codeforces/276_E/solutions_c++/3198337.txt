#include <ctype.h>
#include <cstdio>
#include <vector>
#include <string>
#include <stdlib.h>
#include <functional>
#include <iostream>
#include <algorithm>
#include <math.h>
#include <limits.h>
#include<string.h>
#include<vector>
using namespace std;
const int 				Maxn=1000010;

int 					i,j,u,v,n,q,x,dis,l,r,tot,op,
						mk[Maxn],deep[Maxn],d[Maxn],t1[Maxn],t2[Maxn];
vector<int>				e[Maxn];
void dfs(int u,int f,int de)
{
	mk[u]=++tot;
	d[u]=de;
	for (int i=0;i<e[u].size();i++)
	{
		int v=e[u][i];
		if (v==f) continue;
		dfs(v,u,de+1);
		deep[u]=deep[v];
	}
	deep[u]=max(deep[u],de);
}
void ins1(int p,int x)
{
	for (;p<=n*3;p+=p&-p) t1[p]+=x;
}
void ins2(int p,int x)
{
	for (;p<=n*3;p+=p&-p) t2[p]+=x;
}
int get1(int p)
{
	int sum=0;
	for (;p;p-=p&-p) sum+=t1[p];
	return sum;
}
int get2(int p)
{
	int sum=0;
	for (;p;p-=p&-p) sum+=t2[p];
	return sum;
}
int main()
{
//	freopen("1.in","r",stdin);
//	freopen("1.out","w",stdout);
	ios::sync_with_stdio(0);
	cin>>n>>q;
	for (i=1;i<n;i++)
	{
		cin>>u>>v;
		e[u].push_back(v);
		e[v].push_back(u);
	}
	dfs(1,0,0);

	for (i=1;i<=q;i++)
	{
		
		cin>>op;
		if (op)
		{
			cin>>u;
			cout<<get1(mk[u])+get2(d[u]+1)<<endl;
		}
		else{
			cin>>u>>x>>dis;
			if (dis<d[u])
			{
				ins1(mk[u]-dis,x);
				ins1(mk[u]+min(dis,deep[u]-d[u])+1,-x);
			}
			else
			{
				ins2(1,x);
				ins2(dis-d[u]+2,-x);
				if (dis-d[u]<min(d[u]+dis,deep[u]))
				{
					ins1(mk[u]-(2*d[u]-dis)+1,x);
					ins1(mk[u]+min(dis,deep[u]-d[u])+1,-x);
				}
				
			}
	//		cout<<get1(mk[5])+get2(d[5]+1)<<endl;
		}
/*		for (int j=1;j<=n;j++)
		cout<<get1(mk[j])+get2(d[j]+1)<<endl;
		cout<<endl;*/
	}
}