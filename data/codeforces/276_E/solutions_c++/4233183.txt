#include <algorithm>
#include <cstdio>
#include <iostream>
#include <vector>
#define FOR(i,a,b) for(i=a; i<=b; i++)
#define TFOR(i,a,b) for(i=a; i>=b; i--)
#define FOR2(i,n) FOR(i,0,n-1)
#define MIN(a,b) ( (a) < (b) ? (a) : (b) )
#define all(x) x.begin(),x.end()
#define MAXN 100005
using namespace std;
typedef pair < int , int > pii;
class BIT
{
	public:
		vector < int > F;
		int size;
		void init(int k) { size = k; F.resize(size+5,0); }
		void add(int a,int b,int v)
		{
			a++; b++;
			for(int i = a; i <= size+1; i+=i&-i) F[i] += v;
			for(int i = b + 1; i <= size+1; i+=i&-i) F[i] -= v;
		}
		int find(int a)
		{
			a++;
			int i,res(0);
			for(i = a; i; i-=i&-i) res += F[i];
			return res;
		}
}A[MAXN];
vector < int > G[MAXN];
int K,N,Q,dis;
int C[MAXN] , Dg[MAXN];
void dfs(int x,int pre,int d,int chain)
{
	dis++;
	C[x] = chain;
	Dg[x] = d;
	vector < int > :: iterator it;
	for(it = G[x].begin(); it != G[x].end(); ++it)
		if(*it != pre)
			dfs(*it,x,d+1,chain);
}
void solve()
{
	int a,b,i,d,t,v;
	scanf("%d %d",&N,&Q);
	FOR(i,1,N-1)
	{
		scanf("%d %d",&a,&b);
		G[a].push_back(b);
		G[b].push_back(a);
	}
	vector < int > :: iterator it;
	A[0].init(N);
	for(it = G[1].begin(); it != G[1].end(); ++it)
	{
		t = dis;
		dfs(*it,1,1,++K);
		A[K].init(dis-t);
	}
	while(Q--)
	{
		scanf("%d",&t);
		if(t)
		{
			scanf("%d",&a);
			if(a == 1) printf("%d\n" , A[0].find(0) );
			else printf("%d\n" , A[C[a]].find(Dg[a]) + A[0].find(Dg[a]) );
		}
		else
		{
			scanf("%d %d %d",&a,&v,&d);
			if(Dg[a] > d)
				A[C[a]].add( Dg[a] - d , MIN( Dg[a] + d , A[C[a]].size )  , v );
			else
			{
				t = C[a];
				A[t].add( 1 , MIN( Dg[a] + d , A[t].size ) , v );
				A[0].add( 0 , d - Dg[a] , v );
				A[t].add( 1 , d - Dg[a] , -v );
			}
		}
	}
}
int main()
{
	solve();
	return 0;
}
