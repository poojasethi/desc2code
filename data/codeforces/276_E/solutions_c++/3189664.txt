#include <cstdio>
#define NE(x, y) ++nes, e[nes]=y, h[nes]=s[x], s[x]=nes
using namespace std;

const int N = 100005;
int st[N], s[N], e[N*2], h[N*2], lev[N], bel[N], l[N], c[400005], n, q, usg, nes = 0;
inline int Q(int no, int w) {
    int ans = 0;
    for (; w; w-=w&(-w))
        ans += c[st[no] + w];
    return ans;
}
inline void A(int no, int w, int x) {
    for (; w<=l[no]; w+=w&(-w))
        c[st[no] + w] += x;
}
inline int dfs(int x, int bl, int lv) {
    bel[x] = bl, lev[x] = lv;
    for (int w=s[x]; w; w=h[w])
        if (!lev[e[w]])
            return dfs(e[w], bl, lv+1) + 1;
    return 1;
}
int main() {
    scanf("%d%d", &n, &q);
    int x, y, d, dt, t;
    for (int i=1; i<n; ++i) {
        scanf("%d%d", &x, &y);
        NE(x, y); NE(y, x);
    }
    usg = n, lev[1] = 1, st[1] = 0, l[1] = n;
    for (int w=s[1]; w; w=h[w]) {
        st[e[w]] = usg;
        usg += (l[e[w]] = dfs(e[w], e[w], 2));
    }
    for (int i=1; i<=q; ++i) {
        scanf("%d", &t);
        if (t == 0) {
            scanf("%d%d%d", &x, &dt, &d);
            if (lev[x] - 1 > d) {
                A(bel[x], lev[x] - d - 1, dt);
                A(bel[x], lev[x] + d, -dt);
            }
            else {
                A(1, 1, dt);
                A(1, d+3-lev[x], -dt);
                A(bel[x], d+2-lev[x], dt);
                A(bel[x], lev[x] + d, -dt);
            }
        }
        else {
            scanf("%d", &x);
            if (x == 1)
                printf("%d\n", Q(1, 1)); else
                printf("%d\n", Q(1, lev[x]) + Q(bel[x], lev[x] - 1));
        }
    }
    return 0;
}