#include <bits/stdc++.h>

#define SZ(x) (( int(x.size()) ))

using namespace std;

const int maxn = 100 * 1000 + 10;

int n, q, fen[2][maxn], h[maxn], st[maxn], ed[maxn], T = 0;
vector <int> vertex[maxn];

int get(int indx, int x)
{
	int ret = 0;
	for(; x; x -= x & (-x))
		ret += fen[indx][x];
	return ret;
}

void add(int indx, int x, int v)
{
	for(x++; x < maxn; x += (x & -x))
		fen[indx][x] += v;
	return;
}

void pre_dfs(int root, int par)
{
	st[root] = T++;
	for(int i = 0; i < SZ(vertex[root]); i++){
		int adj = vertex[root][i];
		if(adj == par)
			continue;
		h[adj] = h[root] + 1;
		pre_dfs(adj, root);
	}
	ed[root] = T;
	return;
}

int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);

	cin >> n >> q;
	for(int i = 1; i < n; i++){
		int u, v;
		cin >> u >> v;
		u--;
		v--;
		vertex[u].push_back(v);
		vertex[v].push_back(u);
	}
	pre_dfs(0, -1);

	for(int i = 0; i < q; i++){
		bool t;
		cin >> t;
		if(t){
			int v;
			cin >> v;
			v--;
			cout << get(0, h[v]+1) + get(1, st[v]+1) << endl;
		}
		else{
			int v, x, d;
			cin >> v >> x >> d;
			v--;
			if(h[v] - d <= 0){
				add(0, 0, x);
				add(0, d - h[v] + 1, -x);
				int ee = min(ed[v], st[v] + d + 1);
				add(1, min(st[v] - (2*h[v]) + d + 1, ee), x);
				add(1, ee, -x);
			}
			else{
				add(1, st[v] - d, x);
				add(1, min(ed[v], st[v] + d + 1), -x);
			}
		}
	}

	return 0;
}
