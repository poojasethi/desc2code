#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())
const int N = 1e5+5;
vector<int> h;
int e[N][2], ne[N];
int idx[N][2], v1sum=0;

class BIT{
	public:
		int n;
		vector<int> *a;
		BIT(int siz) {
			n=siz;
			a = new vector<int>(siz+1);
			FOR(it,*a) *it=0;
		}
		void add(int x, int v) {
			x=min(n,x);
			while(x) { ((*a)[x]) += v; x -=(x&-x); }
		}
		int ask(int x) {
			int ret=0;
			while(x<=n) { ret += ((*a)[x]); x +=(x&-x); }
			return ret;
		}
};
vector<BIT*> bits;
BIT *head;
int main(void) {
	int n, q;
	scanf("%d%d", &n, &q);
	for(int i=1;i<n;i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		if(x>y) swap(x, y);
		if(x==1) h.push_back(y); 
		else {
			e[x][ne[x]++] = y;
			e[y][ne[y]++] = x;
		}
	}
	for(int i=0;i<SZ(h);i++) {
		int x = h[i], j = 1;
		while(x) {
			idx[x][0] = i; idx[x][1] = j;
			int y = e[x][0];
			if (e[y][0] == x) swap(e[y][0], e[y][1]);
			x = y;
			++j;
		}
		bits.push_back(new BIT(j));
	}
	head = new BIT(n);
	while(q--) {
		int cmd, v, x, d;
		scanf("%d", &cmd);
		if(cmd==1) {
			scanf("%d", &v);
			int ans=0;
			if(v==1) ans=v1sum;
			else {
				int a1=bits[idx[v][0]]->ask(idx[v][1]);
				int a2=head->ask(idx[v][1]);
				ans = a1+a2;
			}
			printf("%d\n", ans);
		} else {
			scanf("%d%d%d", &v, &x, &d);
			if(v==1) {
				v1sum += x;
				head->add(d, x);
				continue;
			}
			int id = idx[v][0], pos = idx[v][1];
			if(pos > d) {
				bits[id]->add(pos-d-1, -x);
				bits[id]->add(pos+d, x);
			} else {
				v1sum += x;
				bits[id]->add((d-pos), -x);
				bits[id]->add(pos+d, x);
				head->add((d-pos), x);
			}
		}
	}
	return 0;
}
