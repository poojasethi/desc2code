#include <cstdio>
#include <vector>
#include <algorithm>
#define N 100010
#define PB push_back
#define SZ(x) ((int)(x).size())
#define FOR(it,c) for(__typeof((c).begin())it=(c).begin();it!=(c).end();it++)
using namespace std;

struct BIT{
    vector<int> dat;
    void insert(int x, int v){
        x = min(x, SZ(dat)-1);
        while(x > 0) dat[x] += v, x -= x&-x;
    }
    int query(int x){
        int ret = 0;
        while(x < SZ(dat)) ret += dat[x], x += x&-x;
        return ret;
    }
}GL;

int END, cnt, n, m, grp[N], dep[N];

vector<BIT> V;
vector<int> G[N];

void dfs(int p, int f, int c, int l){
    grp[p] = c; dep[p] = l; V[c].dat.PB(0);
    FOR(it, G[p]) if(*it != f) dfs(*it, p, c, l+1);
}

void INIT(){
    scanf("%d%d", &n, &m);
    GL.dat.PB(0); GL.dat.PB(0);
    for(int i = 0; i < n-1; i++){
        int u, v; scanf("%d%d", &u, &v);
        G[u].PB(v); G[v].PB(u); GL.dat.PB(0);
    }
    cnt = 0; FOR(it, G[1]){
        V.PB(BIT()); V[cnt].dat.PB(0);
        dfs(*it, 1, cnt++, 1);
    }
}

void QUERY(){
    int ty; scanf("%d", &ty);
    if(ty){
        int x; scanf("%d", &x);
        if(x == 1) printf("%d\n", END);
        else printf("%d\n", GL.query(dep[x])+V[grp[x]].query(dep[x]));
    }
    else{
        int v, x, d;
        scanf("%d%d%d", &v, &x, &d);
        if(v == 1){
            END += x, GL.insert(d, x); return;
        }
        if(d >= dep[v]){
            END += x;
            GL.insert(d-dep[v], x);
            V[grp[v]].insert(d-dep[v], -x);
        }
        V[grp[v]].insert(dep[v]+d, x);
        V[grp[v]].insert(dep[v]-d-1, -x);
    }
}

int main (){
    INIT();
    while(m--) QUERY();
}