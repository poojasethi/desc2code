#include <string.h>
#include <math.h>
#include <stdio.h>
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>

using namespace std;

const int N = 100010;

vector<int> g[N], T[N];

void Add(int id, int x, vector<int> &vt){
	if(id == 0) id = 1;
	for(int i = id; i < vt.size(); i += i & (-i))
		vt[i] += x;
}

int Query(int id, const vector<int> &vt){
	int sum = 0;
	for(int i = id; i > 0; i -= i & (-i))
		sum += vt[i];
	return sum;
}

int pos[N], dep[N];

void dfs(int u, int p, int k){
	pos[u] = k;
	dep[u] = dep[p] + 1;
	T[k].push_back(0);
	for(int i = 0; i < g[u].size(); i++){
		int v = g[u][i];
		if(v == p) continue;
		dfs(v, u, k);
	}
}

int main(){
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i = 1; i < n; i++){
		int a, b;
		scanf("%d%d", &a, &b);
		g[a].push_back(b);
		g[b].push_back(a);
	}
	dep[1] = 0;
	pos[1] = n + 1;
	for(int i = 0; i < g[1].size(); i++){
		T[i].resize(10);
		dfs(g[1][i], 1, i);
	}
	T[n + 1].resize(n + 10);
	int r = 0;
	for(int i = 0; i < m; i++){
		int a, v;
		scanf("%d%d", &a, &v);
		if(a == 0){
			int d, x;
			scanf("%d%d", &x, &d);
			if(dep[v] <= d) r += x;
			if(d <= dep[v]){
				Add(d + dep[v] + 1, -x, T[pos[v]]);
				Add(dep[v] - d, x, T[pos[v]]);
			}
			else{
				Add(d + dep[v] + 1, -x, T[pos[v]]);
				Add(d - dep[v] + 1, x, T[pos[v]]);
				Add(d - dep[v] + 1, -x, T[n + 1]);
				Add(1, x, T[n + 1]);
			}
		}
		else{
			if(v == 1){
				printf("%d\n", r);
				continue;
			}
			printf("%d\n", Query(dep[v], T[pos[v]]) + Query(dep[v], T[n + 1]));
		}
	}
	return 0;
}
