#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int MAXN = 1e5 + 10;

int n, q;
vector <int> e[MAXN];
int h[MAXN];
int st[MAXN], et[MAXN], t = 0;
bool mark1[MAXN];
int fen[MAXN], fendfs[MAXN];

void add(int x, int v, bool tp=0)
{
	for (x++; x <= n; x += x & -x)
	{
		if (!tp)
			fen[x] += v;
		else
			fendfs[x] += v;
	}
}

int get(int x, bool tp=0)
{
	int ret = 0;
	for (;x ; x -= x & -x)
	{
		if (!tp)
			ret += fen[x];
		else
			ret += fendfs[x];
	}
	return ret;
}

void dfs1(int v)
{
	st[v] = t++;
	mark1[v] = true;
	for (int i = 0; i < e[v].size(); i++)
	{
		int u = e[v][i];
		if (!mark1[u])
		{
			h[u] = h[v] + 1;
			dfs1(u);
		}
	}
	et[v] = t;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> q;
	for (int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		u--; v--;
		e[u].push_back(v);
		e[v].push_back(u);
	}
	h[0] = 0;
	dfs1(0);
	while (q--)
	{
		bool type;
		cin >> type;
		if (type)
		{
			int v;
			cin >> v;
			v--;
			cout << get(h[v] + 1) + get(st[v] + 1, 1) << endl;
		}
		else
		{
			int v, x, d;
			cin >> v >> x >> d;
			v--;
			if (d >= h[v])
			{
				add(0, x);
				add(d - h[v] + 1, -x);
				int end = min(st[v] + d + 1, et[v]);
				add(min(st[v] - 2 * h[v] + d + 1, end), x, 1);
				add(end, -x, 1);
			}
			else
			{
				add(st[v] - d, x, 1);
				add(min(st[v] + d + 1, et[v]), -x, 1);
			}
		}
	}
	return 0;
}
  	   			     			 		 		 			