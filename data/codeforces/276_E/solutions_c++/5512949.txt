#include <iostream>
#include <vector>

using namespace std;

#define MAXN 100010

long long fen[3][MAXN + 10];
vector<int> pre;
int maxH[MAXN], pl[MAXN];
vector<int> edges[MAXN];
int dist[MAXN];
void add(int t, int x, int val)
{
	if (t == 1)
		for (x++; x <= MAXN; x += x & (-x))
			fen[t][x] += val;
	else
		for (x++; x > 0; x -= x & (-x))
			fen[t][x] += val;
}
long long get(int t, int x)
{
	long long ans = 0;
	if (t == 1)
		for (x++; x > 0; x -= x & (-x))
			ans += fen[t][x];
	else
		for (x++; x <= MAXN; x += x & (-x))
			ans += fen[t][x];
	return ans;
}
void DFS(int v, int f)
{
	pre.push_back(v);
	pl[v] = pre.size() - 1;
	maxH[v] = 1;
	for (int i = 0; i < edges[v].size(); i++)
		if (edges[v][i] != f)
		{
			dist[edges[v][i]] = dist[v] + 1;
			DFS(edges[v][i], v);
			maxH[v] = maxH[edges[v][i]] + 1;

		}
}
int main()
{
	int n, q;
	cin >> n >> q;
	for (int i = 1; i < n; i++)
	{
		int a, b;
		cin >> a >> b;
		edges[a].push_back(b);
		edges[b].push_back(a);
	}
	DFS(1, -1);
	for (int i = 0; i < q; i++)
	{
		int type;
		cin >> type;
		if (type == 1)
		{
			int v;
			cin >> v;
			//cout << dist[v] << " " << pl[v] << " " << maxH[v] << " " << endl;
			cout << get(0, dist[v]) + get(1, pl[v]) << endl;
		}
		else
		{
			int v, x, d;
			cin >> v >> x >> d;
			//cout << dist[v] << " " << pl[v] << " " << maxH[v] << endl;
			if (dist[v] <= d)
			{
				add(0, d - dist[v], x);
				add(1, pl[v] - dist[v] + 1, -x);
				add(1, min(pl[v] + maxH[v], pl[v] - dist[v] + 1 + d - dist[v]), x);
			}
			add(1, max(pl[v] - dist[v] + 1, pl[v] - d), x);
			add(1, min(pl[v] + maxH[v], pl[v] + d + 1), -x);
		}
	}
}
