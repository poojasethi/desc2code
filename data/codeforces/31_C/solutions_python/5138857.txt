def main():
    nGroups = input()

    groupTimes = []
    
    groupsToRemove = []

    for i in range(1, nGroups + 1):
        groupTimes.append([i, [int(x) for x in raw_input().split()]])

    groupTimes.sort(key=lambda tup: tup[1][0])

    def checkCollision(times1, times2):
        if times1[0] < times2[0]:
            return times1[1] > times2[0]
        elif times1[0] > times2[0]:
            return times2[1] > times1[0]
        return True

    colliders = set()
    for j in range(len(groupTimes) - 1):
        if checkCollision(groupTimes[j][1], groupTimes[j + 1][1]):
            colliders.add(j)
            colliders.add(j+1)

    for i in colliders:
		
        groupTime = groupTimes.pop(i)
        hasCollision = False
        for j in range(len(groupTimes) - 1):
            if checkCollision(groupTimes[j][1], groupTimes[j + 1][1]):
                hasCollision = True
		
        if not hasCollision:
            groupsToRemove.append(groupTime[0])
		
        groupTimes.insert(i, groupTime)
    
    if len(colliders) == 0:
        print nGroups
        print " ".join([ str(x) for x in range(1, nGroups + 1) ])
    else:
        print len(groupsToRemove)
        if len(groupsToRemove) > 0:
            print " ".join([ str(x) for x in sorted(groupsToRemove) ])

main()
