#!/usr/bin/python
import sys

class Step:
	def __init__(self, typ, pos, index):
		self.typ = typ # 0:down   1:up
		self.pos = pos
		self.index = index

def checkConflict(i, conflicts):
	for c in conflicts:
		if i not in c:
			return False
	return True

n = int(raw_input())
steps = []
for i in range(n):
	l, r = map(lambda x: int(x), raw_input().split())
	steps.append(Step(1, l, i))
	steps.append(Step(0, r, i))

decorated = [(step.pos, step.typ, step) for i, step in enumerate(steps)]
decorated.sort()
steps = [step for pos, typ, step in decorated]

currGroup = set()
conflicts = []
for s in steps:
	if s.typ == 1:
		currGroup.add(s.index)
	else:
		currGroup.remove(s.index)
	if len(currGroup) > 2:
		print 0
		sys.exit(0)
	elif len(currGroup) == 2:
		conflicts.append(currGroup.copy())

if len(conflicts) == 0:
	print n
	for i in range(1, n+1):
		print i,
	print
else:
	result = []
	for c in conflicts[0]:
		if checkConflict(c, conflicts):
			result.append(c)
	print len(result)
	result.sort()
	for r in result:
		print r+1,
	print
