// Copyright (C) 2016 __debug.

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; version 3

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; If not, see <http://www.gnu.org/licenses/>.

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cctype>
#include <climits>
#include <cassert>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <functional>

#define x first
#define y second
#define MP std::make_pair
#define VAL(x) #x " = " << x << " "
#define DEBUG(...) fprintf(stderr, __VA_ARGS__)

typedef long long LL;
typedef std::pair<int, int> Pii;

const int oo = 0x3f3f3f3f;

template<typename T> inline bool chkmax(T &a, T b) { return a < b ? a = b, true : false; }
template<typename T> inline bool chkmin(T &a, T b) { return a > b ? a = b, true : false; }
template<typename T> T read(T &x)
{
    int f = 1;
    char ch = getchar();
    for (; !isdigit(ch); ch = getchar())
        if (ch == '-')
            f = -1;
    for (x = 0; isdigit(ch); ch = getchar())
        x = 10 * x + ch - '0';
    return x *= f;
}
template<typename T> void write(T x)
{
    if (x == 0) {
        putchar('0');
        return;
    }
    if (x < 0) {
        putchar('-');
        x = -x;
    }
    static char s[20];
    int top = 0;
    for (; x; x /= 10)
        s[++top] = x % 10 + '0';
    while (top)
        putchar(s[top--]);
}
// End of template

const int MAXN = 1e3 + 5, MAXM = 5e5 + 5, MAXQ = 5e5 + 5;

struct Query {
    int l, r;
    int s, t;
    int id;

    bool operator< (const Query &rhs) const
    {
        return l < rhs.l;
    }
};

int N, M, Q;
Pii E[MAXM];
Query QRY[MAXQ];

void input()
{
    read(N); read(M); read(Q);
    for (int i = 1; i <= M; ++i) {
        read(E[i].x); read(E[i].y);
    }
    for (int i = 1; i <= Q; ++i) {
        read(QRY[i].l); read(QRY[i].r);
        read(QRY[i].s); read(QRY[i].t);
        QRY[i].id = i;
    }
}

void solve()
{
    std::sort(QRY + 1, QRY + Q + 1);

    static int dp[MAXN][MAXN];
    static bool ans[MAXQ];

    memset(dp, +oo, sizeof(dp));
    for (int i = 1; i <= N; ++i) {
        dp[i][i] = 0;
    }
    for (int i = M, j = Q; i >= 1; --i) {
        int u = E[i].x, v = E[i].y;
        for (int k = 1; k <= N; ++k) {
            chkmin(dp[u][k], std::max(i, dp[v][k]));
            chkmin(dp[v][k], std::max(i, dp[u][k]));
        }
        for (; j >= 1 && QRY[j].l == i; --j) {
            ans[QRY[j].id] = dp[QRY[j].s][QRY[j].t] <= QRY[j].r;
        }
    }

    for (int i = 1; i <= Q; ++i) {
        puts(ans[i] ? "Yes" : "No");
    }
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("tmp.in", "r", stdin);
    freopen("tmp.out", "w", stdout);
#endif

    input();
    solve();

    return 0;
}
