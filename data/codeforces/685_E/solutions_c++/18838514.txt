#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1000 + 1;
const int MAXM = 200000 + 10;
struct Query{ int nxt, L, R, S, T, id; }to[MAXM];
struct Edge{ int u, v; }E[MAXM];
int fir[MAXM], G[MAXN][MAXN], A[MAXM], tote, N, M, Q, L, R, S, T, q;
void Add(int t,int L,int R,int S,int T,int id) { to[++tote] = (Query){fir[t], L, R, S, T, id}; fir[t] = tote; }
int main(){
    if(fopen("input.txt","r")){
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
    }

    scanf("%d%d%d", &N, &M, &Q);
    for(int i = 1;i <= N; ++i) G[i][i] = M;
    for(int i = 1;i <= M; ++i) scanf("%d%d", &E[i].u, &E[i].v);
    for(int i = 1;i <= Q; ++i) { scanf("%d%d%d%d", &L, &R, &S, &T); Add(min(R, M), L, R, S, T, i); }

    for(int i = 1;i <= M; ++i){
	int u = E[i].u, v = E[i].v;
	for(int j = 1;j <= N; ++j){
	    S = G[u][j];
	    T = G[v][j];
	    G[u][j] = max(G[u][j], T);
	    G[v][j] = max(G[v][j], S);
	}
	G[u][v] = G[v][u] = i;
	for(int j = fir[i]; j; j = to[j].nxt)
	    A[to[j].id] |=  (G[to[j].T][to[j].S] >= to[j].L);
    }
    
    for(int i = 1;i <= Q; ++i) puts(A[i] ? "Yes": "No");
    return 0;
}

                                                                                                                                                                                     