#include <iostream> 
#include <cstdio>
#include <vector>

using namespace std;

#define For(i , a , b) for (int i = a , _b = b ; i <= _b ; ++i)
#define Ford(i , a  ,b) for (int i = a , _b = b : i >= _b ; --i)
#define Rep(i , n) for (int i = 0 , _n = n ; i < _n ; ++i)
#define sz(A) ((int)A.size())
#define LL(x) (x << 1)
#define RR(x) ((x << 1) | 1)

typedef pair<int , int> pt;

const int maxn = 1003;
int n , m , q;
pt e[200000 + 123];
struct query{
	int l , r , s , t , id;
};
vector<query> need[200000 + 123];

void ReadData() {
	cin >> n >> m >> q;
	For(i , 1 , m) {
		cin >> e[i].first >> e[i].second; 
	}
	For(i , 1 , q) {
		int l , r , s , t; cin >> l >> r >> s >> t; need[l].push_back((query){l , r , s , t , i});
	}
}

int dp[maxn][maxn];
int res[200000 + 123];

void Process() {
	For(i , 1 , n) For(j , 1 , n) if (i != j) dp[i][j] = m + 1;
	for (int i = m ; i >= 1 ; i--) {
		int u = e[i].first , v = e[i].second;
		dp[u][v] = dp[v][u] = i;
		For(z , 1 , n) {
			dp[u][z] = min(dp[u][z] , max(i , dp[v][z]));
			dp[v][z] = min(dp[v][z] , max(i , dp[u][z]));
		}
		for (int j = 0 ; j < need[i].size() ; j++) {
			query &cur = need[i][j];
			res[cur.id] = (dp[cur.s][cur.t] <= cur.r);
		}
	}

	for (int i = 1 ; i <= q ; i++) cout << (res[i] ? "Yes\n" : "No\n");
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	//freopen("input.inp" , "r" , stdin);
	ReadData(); Process();

	return 0;

}			