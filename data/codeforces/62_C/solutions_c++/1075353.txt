#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define PB push_back
#define MP make_pair

const double pi = 3.1415926535;
const double eps = 1e-5;

struct TP {
	double x, y;
}p[1100][5];
struct TL {
	double a, b, c;
};

TL ML(TP a, TP b)
{
    TL c;
	c.a = b.y - a.y;
	c.b = a.x - b.x;
	c.c = -(c.a * b.x + c.b * b.y);
    return c;
}
//aaba cx + abba cy + acba = 0;
//baaa cx + bbaa cy + bcaa = 0;
bool across(TL a, TL b, TP &c)
{
	if (fabs(a.b * b.a - b.b * a.a) < eps) return 0;
	c.y = (b.c * a.a - a.c * b.a) / (a.b * b.a - b.b * a.a);
	c.x = (b.c * a.b - a.c * b.b) / (a.a * b.b - b.a * a.b);
	return 1;
}
double det(TP a, TP b, TP c)
{
	return (c.x - a.x) * (b.y - a.y) - (c.y - a.y) * (b.x - a.x);
}
double dot(TP a, TP b, TP c)
{
	return (c.x - a.x) * (b.x - a.x) + (c.y - a.y) * (b.y - a.y);
}
bool online(TP a, TP b, TP c)
{
	return fabs(det(a, b, c)) < eps && dot(c, a, b) < eps;
}
int a1, a2;
void IN(TP &a)
{
    scanf("%d%d", &a1, &a2);
    a.x = a1, a.y = a2;
}
double sqr(double x)
{
	return x * x;
}
double dist(TP a, TP b)
{
	return sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));
}
int sgn(double a)
{
    if (a > eps) return 1;
    if (a < -eps) return -1;
    return 0;
}
bool inside(TP a, int id)
{
    int f = sgn(det(a, p[id][0], p[id][1]));
    if (f == 0) return 0;
    if (f != sgn(det(a, p[id][1], p[id][2])) || f != sgn(det(a, p[id][2], p[id][0]))) return 0;
    return 1;
}
vector <TP> all;
bool cmp(TP a, TP b)
{
    if (fabs(a.x - b.x) < eps)
        return a.y < b.y;
    return a.x < b.x;
}
int n;
TP mid(TP a, TP b)
{
    TP c;
    c.x = (a.x + b.x) / 2.;
    c.y = (a.y + b.y) / 2.;
    return c;
}
int main()
{
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        IN(p[i][0]);
        IN(p[i][1]);
        IN(p[i][2]);
        p[i][3] = p[i][0];
    }
    double ans = 0;
    for (int i = 0; i < n; i++)
    for (int x = 0; x < 3; x++) {
        all.clear();
        all.PB(p[i][x]);
        all.PB(p[i][x + 1]);
        for (int j = 0; j < n; j++) if (i != j)
        for (int y = 0; y < 3; y++) {
            TL l1 = ML(p[i][x], p[i][x + 1]), l2 = ML(p[j][y], p[j][y + 1]);
            TP pp;
            if (across(l1, l2, pp) && online(p[i][x], p[i][x + 1], pp))
                all.PB(pp);
        }
        sort(all.begin(), all.end(), cmp);
        for (int z = 1; z < all.size(); z++) {
            TP t = mid(all[z - 1], all[z]);
            bool flag = 1;
            for (int id = 0; id < n; id++)
                if (inside(t, id))
                    flag = 0;
            if (flag)
                ans += dist(all[z - 1], all[z]);
        }
    }
    printf("%.10f\n", ans);
}

	  	 		 	 		   	 	  					