#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<cctype>
#include<algorithm>
#include<vector>

using namespace std;

typedef long double LD;

const int MaxN = 100 + 5;
const LD eps = 1e-7;

int N;
LD ans;

struct Point {
    LD x, y;
    Point() {}
    Point(LD _x, LD _y): x(_x), y(_y) {}
    void load() {
        double xx, yy;
        scanf("%lf%lf", &xx, &yy);
        x = xx; y = yy;
    }
    Point operator + (const Point &t) const {
        return Point(x + t.x, y + t.y);
    }
    Point operator - (const Point &t) const {
        return Point(x - t.x, y - t.y);
    }
    Point operator * (LD t) const {
        return Point(x * t, y * t);
    }
    Point operator / (LD t) const {
        return Point(x / t, y / t);
    }
    LD norm() const {
        return sqrt(x * x + y * y);
    }
    LD det(const Point &t) const {
        return x * t.y - y * t.x;
    }
    bool operator < (const Point &t) const {
        if (fabs(x - t.x) > eps) return x < t.x;
        return y < t.y;
    }
    void out() {
        cout << x << ' ' << y << endl;
    }
};

struct Triangle {
    Point v[3];
    void load() {
        for (int i = 0; i < 3; ++i)
            v[i].load();
    }
}tri[MaxN];

struct Line {
    Point a, b;
    Line(Point _a, Point _b): a(_a), b(_b) {}
    bool cross(const Line &t) const {
        return (b - a).det(t.a - a) * (b - a).det(t.b - a) < -eps
            && (t.b - t.a).det(a - t.a) * (t.b - t.a) .det(b - t.a) < -eps;
    }
    Point intersect(const Line &t) const {
        LD t1 = (b - a).det(t.a - a), t2 = -(b - a).det(t.b - a);
        return (t.a * t2 + t.b * t1) / (t1 + t2);
    }
};

vector<Point> tmp;

bool check(Point p) {
    LD dt[3];
    for (int i = 0; i < N; ++i) {
        for (int k = 0; k < 3; ++k)
            dt[k] = (tri[i].v[(k + 1) % 3] - tri[i].v[k]).det(p - tri[i].v[k]);
        if ((dt[0] > eps && dt[1] > eps && dt[2] > eps) ||
                (dt[0] < -eps && dt[1] < -eps && dt[2] < -eps))
            return false;
    }
    return true;
}

void add(Point a, Point b, int lab) {
    tmp.clear();
    tmp.push_back(a); tmp.push_back(b);
    Line l1(a, b);
    for (int i = 0; i < N; ++i) if (i != lab) {
        for (int k = 0; k < 3; ++k) {
            Line l2(tri[i].v[k], tri[i].v[(k + 1) % 3]);
            if (l1.cross(l2))
                tmp.push_back(l1.intersect(l2));
        }
    }
    sort(tmp.begin(), tmp.end());
    for (int i = 0; i + 1 < (int)tmp.size(); ++i)
        if (check((tmp[i] + tmp[i + 1]) / 2.0))
            ans += (tmp[i + 1] - tmp[i]).norm();
}

int main() {

    scanf("%d", &N);   
    for (int i = 0; i < N; ++i) 
        tri[i].load();
    ans = 0;
    for (int i = 0; i < N; ++i) 
        for (int k = 0; k < 3; ++k) 
            add(tri[i].v[k], tri[i].v[(k + 1) % 3], i);
    printf("%.9f\n", (double)ans);

    return 0;

}
