#include <stdio.h>
#include <vector>
#include <math.h>
#include <iostream>
#include <algorithm>

#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define rep(i,x) for(int i=0; i<x; ++i)
#define all(x) x.begin(),x.end()

#define double long double

using namespace std;

template<class T1,class T2>ostream& operator<<(ostream& os,const pair<T1,T2>& p){os<<"{"<<p.X<<", "<<p.Y<< "}";return os;}

const double eps = 10E-8l;

struct Po
{double x,y; 
Po(double _x=0,double _y=0): x(_x), y(_y) {}};
Po operator+(const Po& a, const Po& b)
{ return Po(a.x+b.x,a.y+b.y); }
Po operator-(const Po& a, const Po& b)
{ return Po(a.x-b.x,a.y-b.y); }
Po operator*(const double a, const Po& b)
{ return Po(a*b.x,a*b.y); }
Po operator/(const Po& b, const double a)
{ return Po(b.x/a,b.y/a); }
bool operator<(const Po& a, const Po& b)
{ 
	if (fabs(b.x-a.x) > eps)
		return a.x < b.x; 
	return a.y < b.y;
}
double norm(const Po& p)
{ return sqrt(p.x*p.x+p.y*p.y); }
ostream& operator<<(ostream& os, const Po& p)
{ os << mp(p.x,p.y); return os; }

int n;
Po tr[128][3];
Po otr[512][2];
Po in[512];

double cross(const Po& a, const Po& b)
{
	return (a.x*b.y-a.y*b.x);
}

bool inTriangle(const Po tr[3], const Po& p)
{
	double cr[3];
	rep(i,3)
		cr[i] = cross(tr[i]-tr[(i+1)%3], p-tr[(i+1)%3]);
	return ((cr[0]>eps && cr[1]>eps && cr[2]>eps) ||
			(cr[0]<-eps && cr[1]<-eps && cr[2]<-eps));
}

Po normal(const Po& p)
{ return p/norm(p); }

bool in_seg(const Po a[2], const Po& p)
{
	return 	((a[0].x < p.x && p.x < a[1].x) || 
			(a[1].x < p.x && p.x < a[0].x)) ||
			(a[0].y < p.y && p.y < a[1].y) || 
			(a[1].y < p.y && p.y < a[0].y);
}

bool intersect(const Po a[2], const Po b[2], Po& p, bool first = true)
{
	Po da = a[1]-a[0];
	Po db = b[1]-b[0];

	if (norm(normal(da) - normal(db)) < eps || 
		norm(normal((-1)*da) - normal(db)) < eps) return false;

	if (da.x==0.0l)
	{
		if (!first)
		{
			cout << mp(a[0], a[1]) << mp(b[0],b[1]) << endl;
			cout << mp(da,db) << endl;
			exit(0);
		}
		return intersect(b,a,p,false);
	}
	
	Po c = b[0]-a[0];
	Po aa = da;
	Po bb = (-1.0l)*db;
	
	double u,t;
	u = (c.y - (aa.y*c.x)/aa.x)/(bb.y - (aa.y*bb.x)/aa.x);
	//t = c.x/aa.x - u*bb.x/aa.x;
	
	p = b[0]+u*db;
	
	return (in_seg(a,p) && in_seg(b,p));
}

int main()
{
	//freopen("test.txt","r",stdin);
	
	cin >> n;

	rep(i,n)
	{
		rep(j,3)
		{
			double xx,yy; cin >> xx >> yy;
			tr[i][j] = Po(xx,yy);
		}
		rep(j,3)
			rep(k,2)
				otr[3*i+j][k] = tr[i][(j+k)%3];
	}

	double len = 0.0l;

	rep(i,3*n)
	{
		int cnt = 0;
		rep(k,2)
			in[cnt++] = otr[i][k];
	
		rep(j,3*n)
		{
			if (i==j) continue;
			
			Po inter;
			if (intersect(otr[i],otr[j],inter))
			{
				in[cnt++] = inter;
				//cerr << "Intersect " << mp(otr[i][0],otr[i][1]) << mp(otr[j][0],otr[j][1]) << inter << endl;
			}
		}
		
		sort(in,in+cnt);
		
//		rep(j,cnt)
//			cerr << in[j];
//		cerr << endl;
		
		for(int j=1; j<cnt; ++j)
		{
			Po p = (in[j-1]+in[j])/2.0l;
			//cerr << "norm = " << norm(in[j-1]-in[j]) << endl;
			
			bool inTr = false;
			rep(k,n)
			{
				if (inTriangle(tr[k],p))
				{
					inTr = true;
					break;
				}
			}
			if (!inTr)
				len += norm(in[j-1]-in[j]);
		}
	}

	cout.precision(10);
	cout << fixed << len << endl;

	return 0;
}
