#include <algorithm>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <vector>
#include <string>
#include <set>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstring>

#define sz(a) (int)a.size()
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define llong long long
#define zero(a) fabs(a) < 1e-9
#define resz(a, n) a.clear(), a.resize(n)
#define same(a, n) memset(a, n, sizeof(a))
#define make(a, b) make_pair(a, b)

using namespace std;

const int MAXN = 105;

struct pnt {
    double x, y;
    pnt(double X = 0, double Y = 0): x(X), y(Y) { }
};

int n;
pnt p[MAXN][3];

double dist(pnt a, pnt b) {
    pnt v(a.x - b.x, a.y - b.y);
    return sqrt(v.x * v.x + v.y * v.y);
}

double area(pnt a, pnt b, pnt c) {
    pnt v1(b.x - a.x, b.y - a.y), v2(c.x - a.x, c.y - a.y);
    return (v1.x * v2.y - v2.x * v1.y) / 2.00;
}

bool inside(pnt a, pnt b, pnt c, pnt g) {
    double t = abs(area(g, a, b)) + abs(area(g, b, c)) + abs(area(g, c, a)) - abs(area(a, b, c));
    return (t > -1e-9 && t < 1e-9);
}

int main() {
    double ans = 0;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < 3; j++)
            scanf("%lf %lf", &p[i][j].x, &p[i][j].y);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < 3; j++) {
            pnt a = p[i][j], b = p[i][(j + 1) % 3];
            vector< double > per;
            per.push_back(0);
            per.push_back(1);
            for (int k = 0; k < n; k++)
                for (int l = 0; l < 3; l++) {
                    pnt c = p[k][l], d = p[k][(l + 1) % 3];
                    double r1 = area(c, d, a), r2 = area(c, d, b);
                    if ((r1 < 0 && r2 > 0) || (r1 > 0 && r2 < 0))
                        per.push_back(r1 / (r1 - r2));
                }
            sort(all(per));
            for (int k = 0; k < sz(per) - 1; k++) {
                double get = (per[k] + per[k + 1]) / 2;
                pnt g(a.x + (b.x - a.x) * get, a.y + (b.y - a.y) * get);
                bool black = false;
                for (int l = 0; l < n; l++)
                    if (l != i && inside(p[l][0], p[l][1], p[l][2], g)) {
                        black = true;
                        break;
                    }
                if (!black)
                    ans += dist(a, b) * (per[k + 1] - per[k]);
            }
        }
    printf("%.10lf\n", ans);
    return 0;
}
