#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

const double eps	=	1e-8;
const int maxTri	=	105;

struct Tpoint
{
	double x,y;
	Tpoint(){}
	Tpoint(double x,double y):x(x),y(y){}
	inline void read()
	{
		scanf("%lf%lf",&x,&y);
	}
	inline double norm()
	{
		return sqrt(x*x+y*y);
	}
};
inline bool operator <(const Tpoint &a,const Tpoint &b)
{
	return a.x+eps < b.x || fabs(a.x-b.x)<eps && a.y+eps<b.y;
}
inline Tpoint operator +(const Tpoint &a,const Tpoint &b){return Tpoint(a.x+b.x,a.y+b.y);}
inline Tpoint operator -(const Tpoint &a,const Tpoint &b){return Tpoint(a.x-b.x,a.y-b.y);}
inline Tpoint operator *(const Tpoint &a,const double &b){return Tpoint(a.x*b,a.y*b);}
inline Tpoint operator /(const Tpoint &a,const double &b){return Tpoint(a.x/b,a.y/b);}
inline double det(const Tpoint &a,const Tpoint &b){return a.x*b.y-a.y*b.x;}
inline double dot(const Tpoint &a,const Tpoint &b){return a.x*b.x+a.y*b.y;}
//==============================================================================================


int nTri;
Tpoint tri[maxTri][4];

inline bool pointOn(Tpoint a,Tpoint l,Tpoint r)
{
	if ((a-l).norm()<eps || (a-r).norm()<eps){
		return true;
	}
	return fabs(det(a-l,r-l))/(r-l).norm()<eps && dot(l-a,r-a)/(l-a).norm()<eps;
}

inline bool intersect(Tpoint a,Tpoint b,Tpoint c,Tpoint d,Tpoint &e)
{
	double s1=det(c-a,b-a),s2=det(d-a,b-a);
	if (fabs((s1-s2)/(b-a).norm())<eps){
		return false;
	}
	e=(c*s2-d*s1)/(s2-s1);
	return pointOn(e,a,b) && pointOn(e,c,d);
}

inline bool inside(Tpoint a)
{
	for (int i=0;i<nTri;++i){
		bool ok=false;
		int sign=0;
		for (int j=0;j<3 && !ok;++j){
			if (pointOn(a,tri[i][j],tri[i][j+1])){
				ok=true;
			}
			double key=det(a-tri[i][j],tri[i][j+1]-tri[i][j])/(tri[i][j+1]-tri[i][j]).norm();
			if (key>eps){
				if (sign==0) sign=1;
				else if (sign!=1){
					ok=true;
				}
			}else{
				if (sign==0) sign=-1;
				else if (sign!=-1){
					ok=true;
				}
			}
		}
		if (!ok){
			return true;
		}
	}
	return false;
}

int main()
{
	scanf("%d",&nTri);
	for (int i=0;i<nTri;++i){
		for (int j=0;j<3;++j){
			tri[i][j].read();
		}
		tri[i][3]=tri[i][0];
	}
	double ans=0;
	for (int i=0;i<nTri;++i){
		for (int j=0;j<3;++j){
			Tpoint a=tri[i][j],b=tri[i][j+1];
			vector< pair<double,Tpoint> > event;
			event.push_back(make_pair(0,a));
			event.push_back(make_pair((a-b).norm(),b));
			for (int k=0;k<nTri;++k){
				if (i==k){
					continue;
				}
				for (int l=0;l<3;++l){
					Tpoint c=tri[k][l],d=tri[k][l+1],e;
					if (intersect(a,b,c,d,e)){
						event.push_back(make_pair((a-e).norm(),e));
					}
				}
			}
			sort(event.begin(),event.end());
			for (int k=1;k<event.size();++k){
				Tpoint e=(event[k].second+event[k-1].second)/2;
				if (!inside(e)){
					ans+=(event[k].second-event[k-1].second).norm();
				}
			}
		}
	}
	printf("%.10f\n",ans);
	return 0;
}

  		  			  	 			   		     	