
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <utility>
#include <vector>

using namespace std;

inline bool check_inside(double x, double y, double x1, double y1,
        double x2, double y2, double x3, double y3) {
    double a = y2 - y1;
    double b = -(x2 - x1);
    double c = a * x1 + b * y1;
    bool r1 = (a * x + b * y) > c;
    bool r2 = (a * x3 + b * y3) > c;
    return r1 == r2;
}

inline bool check_inside_all(double x, double y, double x1, double y1,
        double x2, double y2, double x3, double y3) {
    return check_inside(x, y, x1, y1, x2, y2, x3, y3)
        && check_inside(x, y, x2, y2, x3, y3, x1, y1)
        && check_inside(x, y, x3, y3, x1, y1, x2, y2);
}

pair <double, double> intersect(double x1, double y1, double x2, double y2,
        double x3, double y3, double x4, double y4) {
    double a = x2 - x1;
    double b = -(x4 - x3);
    double p = x3 - x1;
    double c = y2 - y1;
    double d = -(y4 - y3);
    double q = y3 - y1;
    
    double t = 1.0 * (d * p - b * q) / (a * d - b * c);
    double s = 1.0 * (a * q - c * p) / (a * d - b * c);
    return make_pair(t, s);
}

int n, tx[300], ty[300];

inline double dist(double x1, double y1, double x2, double y2) {
    double dx = x2 - x1;
    double dy = y2 - y1;
    return sqrt(dx * dx + dy * dy);
}

double add_line(int x1, int y1, int x2, int y2, int ind) {
    vector <double> spots;
    spots.push_back(0);
    spots.push_back(1);
    for(int i = 0; i < 3 * n; i++) {
        if(i / 3 == ind)
            continue;

        int nx, ny;
        if(i % 3 < 2)
            nx = tx[i + 1], ny = ty[i + 1];
        else
            nx = tx[i - 2], ny = ty[i - 2];

        pair <double, double> sp = intersect(
                x1, y1, x2, y2, tx[i], ty[i], nx, ny);
        if(sp.first > 0 && sp.first < 1
                && sp.second > 0 && sp.second < 1)
            spots.push_back(sp.first);
    }
    sort(spots.begin(), spots.end());

    double length = dist(x1, y1, x2, y2);
    double total = 0;
    for(int i = 0; i + 1 < spots.size(); i++) {
        double nx = x1 + (spots[i] + spots[i+1]) / 2.0 * (x2 - x1);
        double ny = y1 + (spots[i] + spots[i+1]) / 2.0 * (y2 - y1);
        bool shouldAdd = true;
        for(int j = 0; j < n; j++) {
            if(j == ind)
                continue;
            if(check_inside_all(nx, ny, tx[3*j], ty[3*j],
                        tx[3*j+1], ty[3*j+1], tx[3*j+2], ty[3*j+2])) {
                shouldAdd = false;
                break;
            }
        }
        if(shouldAdd)
            total += (spots[i+1] - spots[i]) * length;
    }
    return total;
}


int main() {
    cin >> n;
    for(int i = 0; i < 3 * n; i++)
        cin >> tx[i] >> ty[i];

    double total = 0;
    for(int i = 0; i < n; i++) {
        int x1 = tx[3*i],   y1 = ty[3*i];
        int x2 = tx[3*i+1], y2 = ty[3*i+1];
        int x3 = tx[3*i+2], y3 = ty[3*i+2];
        total += add_line(x1, y1, x2, y2, i);
        total += add_line(x2, y2, x3, y3, i);
        total += add_line(x3, y3, x1, y1, i);
    }
    printf("%.10lf\n", total);
}
