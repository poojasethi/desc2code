#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<complex>
#define rep(i,n) for(int i=0;i<n;i++)
#define fr(i,c) for(__typeof (c.begin()) i=c.begin(); i!=c.end(); i++)
#define all(c) (c).begin(), (c).end()
#define pb push_back
using namespace std;

typedef long long ll;
const double EPS = 1e-8;
const double INF = 1e12;
typedef complex<double> P;
namespace std {
  bool operator < (const P& a, const P& b) {
    return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);
  }
}
double cross(const P& a, const P& b) {
  return imag(conj(a)*b);
}
double dot(const P& a, const P& b) {
  return real(conj(a)*b);
}
struct L : public vector<P> {
  L(const P &a, const P &b) {
    push_back(a); push_back(b);
  }
};
int ccw(P a, P b, P c) {
  b -= a; c -= a;
  if (cross(b, c) > 0)   return +1;       // counter clockwise
  if (cross(b, c) < 0)   return -1;       // clockwise
  if (dot(b, c) < 0)     return +2;       // c--a--b on line
  if (norm(b) < norm(c)) return -2;       // a--b--c on line
  return 0;
}
bool intersectSS(const L &s, const L &t) {
  return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&
         ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;
}
double cp(const L &l, const L &m) {
  double A = cross(l[1] - l[0], m[1] - m[0]);
  double B = cross(l[1] - l[0], l[1] - m[0]);
  return B / A;
}

int n;
P p[100][3];
void run(){
  cin>>n;
  rep(i,n)rep(j,3)cin>>p[i][j].real()>>p[i][j].imag();
  double ans=0;
  
  rep(i,n)rep(j,3){
    vector<double> c;
    rep(k,n)rep(l,3)if(i!=k){
      if(intersectSS(L(p[i][j],p[i][(j+1)%3]),L(p[k][l],p[k][(l+1)%3])))
        c.pb(cp(L(p[k][l],p[k][(l+1)%3]),L(p[i][j],p[i][(j+1)%3])));
    }
    c.pb(0); c.pb(1);
    sort(all(c));
    
    rep(k,c.size()-1){
      P m=p[i][j]+(p[i][(j+1)%3]-p[i][j])*((c[k+1]+c[k])/2);
      bool ok=1;
      rep(a,n)if(a!=i){
        bool pl=1,mi=1;
        rep(b,3){
          double t=cross(p[a][b]-m,p[a][(b+1)%3]-m);
          if(t<=0)pl=0;
          if(t>=0)mi=0;
        }
        if(pl||mi){
          ok=0; break;
        }
      }
      if(ok){
        ans+=abs(p[i][(j+1)%3]-p[i][j])*(c[k+1]-c[k]);
      }
    }
  }
  printf("%.9f\n",ans);
}
int main(){
#ifndef ONLINE_JUDGE
  rep(i,3)
#endif
    run();
  return 0;
}
