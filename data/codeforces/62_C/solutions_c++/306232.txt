#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
#define INF (1ll<<60)
#define eps 1.0E-8
#define _abs(x) ((x)>0.0?(x):-(x))

int N;
struct point {double x,y;};
point P[110][3];

double dist(point P, point Q){
    double dx = P.x - Q.x, dy = P.y - Q.y;
    return sqrt(dx*dx + dy*dy);
}

double area(point P, point Q, point R){
    return ((Q.x - P.x) * (R.y - P.y) - (Q.y - P.y) * (R.x - P.x)) / 2.0;
}

bool inside(point Q, int id){
    double tmp = _abs(area(P[id][0],P[id][1],Q)) + _abs(area(P[id][1],P[id][2],Q)) + _abs(area(P[id][2],P[id][0],Q)) - _abs(area(P[id][0],P[id][1],P[id][2]));
    return (tmp > -eps && tmp < eps);
}

int main(void){
    int i,j,k,l;
    
    cin >> N;
    REP(i,N) cin >> P[i][0].x >> P[i][0].y >> P[i][1].x >> P[i][1].y >> P[i][2].x >> P[i][2].y;
    
    double ans = 0.0;
    REP(i,N) REP(j,3){
        point A = P[i][j], B = P[i][(j+1)%3];
        
        vector <double> v;
        v.push_back(0.0); v.push_back(1.0);
        REP(k,N) REP(l,3){
            point C = P[k][l], D = P[k][(l+1)%3];
            double s1 = area(C,D,A), s2 = area(C,D,B);
            if((s1 > 0 && s2 < 0) || (s1 < 0 && s2 > 0)) v.push_back(s1/(s1-s2));
        }
        sort(v.begin(),v.end());
        
        double d = dist(A,B);
        REP(k,v.size()-1){
            double t = (v[k] + v[k+1]) / 2.0;
            point Q = {A.x + (B.x - A.x) * t, A.y + (B.y - A.y) * t};
        //  cout << Q.x << ' ' << Q.y << endl;
            
            bool black = false;
            REP(l,N) if(l != i && inside(Q,l)) {black = true; break;}
            if(!black) ans += d * (v[k+1] - v[k]);
        }
    }
    
    printf("%.9f\n",ans);
    
    return 0;
}
