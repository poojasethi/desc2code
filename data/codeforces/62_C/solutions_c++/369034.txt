/*
 * Author: hanshuai
 * Created Time:  2011-4-2 14:36:02
 * File Name: c.cpp
 */
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;
const int maxn = 105;
const double eps = 1e-8;
int sgn(double v){
    return (v>eps) - (v<-eps);
}
struct Pt{
    double x, y;
    Pt(){}
    Pt(double _x, double _y):x(_x), y(_y){}
    Pt operator-(const Pt& pt)const{
        return Pt(x-pt.x, y-pt.y);
    }
    double operator*(const Pt& pt)const{
        return x*pt.y-y*pt.x;
    }
    double len()const{
        return sqrt(x*x+y*y);
    }
    void input(){
        scanf("%lf%lf", &x, &y);
    }
}p[maxn][3];
bool inside(Pt pt, int k){
    double area = 0;
    for(int i = 0; i < 3; i ++){
        Pt A = p[k][i], B = p[k][(i+1)%3];
        area += abs((A-pt)*(B-pt));
    }
    return sgn(area - abs((p[k][0]-p[k][2])*(p[k][1]-p[k][2]))) == 0;
}
int main() {
    int n;
    scanf("%d", &n);
    for(int i = 0; i < n; i ++){
        for(int j = 0; j < 3; j ++) p[i][j].input();
    }
    double ans = 0;
    for(int l1 = 0; l1 < n; l1 ++){
        for(int l2 = 0; l2 < 3; l2 ++){
            Pt A = p[l1][l2], B = p[l1][(l2+1)%3];
            vector<double> vd;
            vd.push_back(0);
            vd.push_back(1);
            for(int k1 = 0; k1 < n; k1 ++){
                for(int k2 = 0; k2 < 3; k2 ++){
                    Pt C = p[k1][k2], D = p[k1][(k2+1)%3];
                    double s1 = (D-C)*(A-C), s2 = (D-C)*(B-C);
                    if(sgn(s1)*sgn(s2) < 0) vd.push_back(s1/(s1-s2));
                }
            }
            sort(vd.begin(), vd.end());
            double dis = (B-A).len();
            for(int i = 0; i + 1 < (int)vd.size(); i ++){
                double mid = (vd[i]+vd[i+1])/2;
                Pt pt = Pt(A.x+(B.x-A.x)*mid, A.y+(B.y-A.y)*mid);
                bool over = false;
                for(int k = 0; k < n; k ++){
                    if(k != l1 && inside(pt, k)){
                        over = true; break;
                    }
                }
                //printf("dis = %lf over = %d %lf %lf\n", dis, inside(pt, 0), vd[i], vd[i+1]);
                if(!over) ans += (vd[i+1]-vd[i])*dis;
            }
        }
    }
    printf("%.10lf\n", ans);
    return 0;
}

