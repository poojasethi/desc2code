#include <vector>
#include <queue>
#include <deque>
#include <map>
#include <set>
#include <string>
#include <bitset>
#include <complex>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cassert>
using namespace std;

const double eps = 1e-8;
const double pi = acos(-1.0);

struct point {
    double x, y;
    point() { x = y = 0; }
    point(double x, double y): x(x), y(y) {}
    point operator +(const point &a) const { return point(x + a.x, y + a.y); }
    point operator -(const point &a) const { return point(x - a.x, y - a.y); }
    point operator *(double k) const { return point(x * k, y * k); }
    point operator /(double k) const { return point(x / k, y / k); }
    double len() const { return sqrt(len2()); }
    double len2() const { return x * x + y * y; }
    void input() { scanf("%lf%lf", &x, &y); }
};
inline double det(const point &a, const point &b) { return a.x * b.y - a.y * b.x; }
inline double area(const point &a, const point &b, const point &c) {
    return det(b - a, c - a) / 2.0;
}
const int maxn = 111;

point tri[maxn][3];
int n;

bool inside(const point &p, int id) {
    double tmp = fabs(area(tri[id][0], tri[id][1], p)) + fabs(area(tri[id][0], tri[id][2], p)) + fabs(area(tri[id][1], tri[id][2], p)) - fabs(area(tri[id][0], tri[id][1], tri[id][2]));
    return fabs(tmp) < eps;
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < 3; ++j) {
            tri[i][j].input();
        }
    }
    double ans = 0.0;
    for (int i = 0; i < n; ++i) for (int j = 0; j < 3; ++j) {
        point A = tri[i][j], B = tri[i][(j + 1) % 3];
        
        vector<double> v;
        v.push_back(0.0);
        v.push_back(1.0);
        for (int k = 0; k < n; ++k) for (int l = 0; l < 3; ++l) {
            point C = tri[k][l], D = tri[k][(l + 1) % 3];
            double k1 = area(C, D, A), k2 = area(C, D, B);
            if ((k1 > 0 && k2 < 0) || (k1 < 0 && k2 > 0)) {
                v.push_back(k1 / (k1 - k2));
            }
        }
        sort(v.begin(), v.end());

        double d = (A - B).len();
        for (int k = 0; k + 1 < v.size(); ++k) {
            double t = (v[k] + v[k + 1]) * .5;
            point Q = point(A.x + (B.x - A.x) * t, A.y + (B.y - A.y) * t);
            
            bool black = false;
            for (int l = 0; l < n; ++l) {
                if (l != i && inside(Q, l)) {
                    black = true;
                    break;
                }
            }
            if (!black) {
                ans += d * (v[k + 1] - v[k]);
            }
        }
    }
    printf("%.15f\n", ans);
}


	  	  	 	 		  	 				 	 	 	