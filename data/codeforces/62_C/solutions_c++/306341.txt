#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>


 
using namespace std;
 
const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

typedef long long ll;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;
 
#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)

int x[200][4];
int y[200][4];
ll vx[200][4];
ll vy[200][4];
int main(){
	int N;
	scanf("%d",&N);
	FOR(i,0,N){
		FOR(j,0,3)scanf("%d%d",&(x[i][j]),&(y[i][j]));
		x[i][3]=x[i][0];y[i][3]=y[i][0];
	}
	double res = 0;
	FOR(n,0,N){
		FOR(g,0,3){
			vx[n][g]=x[n][g+1]-x[n][g];
			vy[n][g]=y[n][g+1]-y[n][g];
		}
	}
	//cout << "H";
	FOR(n,0,N){
		//cout << n << endl;
		FOR(g,0,3){
			//cout << "g" << g << endl;
			map<double,int> mm = map<double,int>();
			FOR(i,0,N)if(i!=n){
				bool tr = false;
				double ma = -(1e100);
				double mi = 1e100;
				FOR(gg,0,3){
					if(vx[n][g]*vy[i][gg]-vx[i][gg]*vy[n][g]==0)continue;
					double det = vx[n][g]*vy[i][gg]-vx[i][gg]*vy[n][g];
					ll xx = x[i][gg]-x[n][g];
					ll yy = y[i][gg]-y[n][g];
					double lam = (xx*vy[i][gg]-yy*vx[i][gg])/det;
					double lam2 = (xx*vy[n][g]-yy*vx[n][g])/det;
					if(lam2 < 0.0-eps||lam2 > 1.0+eps)continue;
					tr = true;
					ma = max(ma,lam);
					mi = min(mi,lam);
				}
				if(tr)if(ma-eps > mi){
					mm[mi]+=1;
					mm[ma]-=1;
				}
			}
			double len = sqrt(vx[n][g]*vx[n][g]+vy[n][g]*vy[n][g]);
			int cur = 0;
			double last = 0;
			double ant = 0;
			FORIT(it,mm){
				if(last >= 1)break;
				double next = it->first;
				if(next > last && cur==0){
					ant += min(1.0,next)-last;
				}
				cur += it->second;
				last = max(0.0,next);
			}
			if(last < 1.0)ant += 1.0-last;
			res += ant * len;
		}
	}
	printf("%.10lf\n",res);
	return 0;
}
