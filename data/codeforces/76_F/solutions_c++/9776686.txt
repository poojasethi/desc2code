#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;

const int MAXN = 100100;
int N, V;
int X[MAXN];
int T[MAXN];
pair<ll, ll> P[MAXN];
ll last[MAXN];

int main()
{
	cin >> N;
	for (int i = 0; i < N; i++)
		cin >> X[i] >> T[i];
	cin >> V;

	for (int i = 0; i < N; i++)
		P[i] = make_pair(-X[i] + (ll)T[i]*V, X[i] + (ll)T[i]*V);

	sort(P, P + N);

	int len = 1;
	for (int i = 0; i < N; i++)
	{
		if (P[i].first < 0)
			continue;

		int idx = upper_bound(last + 1, last + len + 1, P[i].second) - last;
		if (idx == len + 1)
			last[++len] = P[i].second;
		else if (idx != 1) //first term must remain 0
			last[idx] = P[i].second;
	}
	cout << len - 1 << " ";

	len = 1;
	last[1] = P[0].second;
	for (int i = 1; i < N; i++)
	{
		int idx = upper_bound(last + 1, last + len + 1, P[i].second) - last;
		if (idx == len + 1)
			last[++len] = P[i].second;
		else
			last[idx] = P[i].second;
	}
	cout << len << "\n";	

	return 0;
}