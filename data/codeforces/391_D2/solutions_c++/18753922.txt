#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define fi first
#define se second
#define pb push_back
#define ff(i, a, b) for (int i = (int)(a); i <= (int)(b); i++)
#define fod(i, a, b) for (int i = (int)(a); i >= (int)(b); i--)

typedef pair <ll, ll> ii;
typedef pair <ii, ll> II;
typedef vector <ii> vii;
typedef vector <ll> vi;
const int N = 50010, INF = (int)1e9 + 20, mod = 1000000007;

struct seg {
	ll x; ll y; ll l; ll r;
	seg(ll _x = -INF, ll _y = -INF, ll _l = -INF, ll _r = -INF) { x = _x; y = _y; l = _l; r = _r; }
};

int n, m;
seg a[N], b[N];
vi T;
int sz;

void reset() { T.assign(sz + 1, 0); }
void upd(int x, int v) { for (; x <= sz; x += x & -x) T[x] += v; }
ll get(int x) { ll res = 0; for (; x > 0; x -= x & -x) res += T[x]; return res; }

bool solve(ll len) {
	vector <seg> A, B; vi Y; vector <II> query;
	ff(i, 1, n) if (a[i].r - a[i].l >= 2 * len) A.pb(seg(a[i].x, -INF, a[i].l + len, a[i].r - len));
	ff(i, 1, m) if (b[i].r - b[i].l >= 2 * len) B.pb(seg(-INF, b[i].y, b[i].l + len, b[i].r - len));
	if (A.empty() || B.empty()) return 0;
	//ff(i, 0, A.size()-1) cout << A[i].x << ' ' << A[i].y << ' ' << A[i].l << ' ' << A[i].r << endl;
	//ff(i, 0, B.size()-1) cout << B[i].x << ' ' << B[i].y << ' ' << B[i].l << ' ' << B[i].r << endl;
    ff(i, 0, A.size()-1) Y.pb(A[i].r), Y.pb(A[i].l-1), query.pb(II (ii(A[i].x, i + 1), -INF) );
    ff(i, 0, B.size()-1) Y.pb(B[i].y), query.pb(II (ii(B[i].l, 0), B[i].y) ), query.pb(II (ii(B[i].r + 1, -2), B[i].y) );

    sort(Y.begin(), Y.end()); sort(query.begin(), query.end()); Y.resize(distance(Y.begin(), unique(Y.begin(), Y.end())));
    sz = Y.size() + 10; reset();
    //ff(i, 0, Y.size()-1) cout << Y[i] << ' '; cout << endl;
    ff(i, 0, query.size()-1) {
        ll type = query[i].fi.se;
        //cout << query[i].fi.fi << ' ' << query[i].fi.se << ' ' << query[i].se << endl;
        if (type > 0) {
            // query
            type--;
            ll R = A[type].r, L = A[type].l - 1;
            int pr = lower_bound(Y.begin(), Y.end(), R) - Y.begin() + 1;
            int pl = lower_bound(Y.begin(), Y.end(), L) - Y.begin() + 1;
            if (get(pr) - get(pl) > 0) return 1;
        }

        else {
            // update
            type++;
            int pos = lower_bound(Y.begin(), Y.end(), query[i].se) - Y.begin() + 1;
            upd(pos, type);
        }
    }

    return 0;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m;
	ff(i, 1, n) { int len; cin >> a[i].x >> a[i].l >> len; a[i].r = a[i].l + len; }
	ff(i, 1, m) { int len; cin >> b[i].l >> b[i].y >> len; b[i].r = b[i].l + len; }

	ll l = 0, r = 2e9;
	while(l != r) {
		ll mid = ((l + r + 1) >> 1);
		if (solve(mid)) l = mid;
		else r = mid - 1;
	}

	cout << l << endl;
}
