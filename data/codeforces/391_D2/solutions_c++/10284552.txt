#include <iostream>
#include <fstream>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <iomanip>
#include <cstdlib>
#include <set>
using namespace std;

#define mp make_pair
#define pb push_back

typedef long long ll;

struct Event {
    int type;
    int x;
    int y, y2;
    Event(int type, int x, int y, int y2 = 0): type(type), x(x), y(y), y2(y2) {}
};

struct Segment {
    int x,y,leng;
};
int n,m;
Segment vert[50000], hor[50000];

void read() {
    cin >> n >> m;
    for(int i = 0; i < n; i++)
        cin >> vert[i].x >> vert[i].y >> vert[i].leng;
    for(int i = 0; i < m; i++)
        cin >> hor[i].x >> hor[i].y >> hor[i].leng;
}

bool comp(Event e1, Event e2) {
    if(e1.x != e2.x)
        return e1.x < e2.x;
    else
        return e1.type < e2.type;
}

vector<Event> event;
set<int> st;

bool check(int length) {
    event.clear();
    st.clear();
    for(int i = 0; i < n; i++)
        if(length * 2 <= vert[i].leng)
            event.pb(Event(1, vert[i].x, vert[i].y + length, vert[i].y + vert[i].leng - length));
    for(int i = 0; i < m; i++)
        if(length * 2 <= hor[i].leng) {
            event.pb(Event(0, hor[i].x + length              , hor[i].y));
            event.pb(Event(2, hor[i].x + hor[i].leng - length, hor[i].y));
        }

    sort(event.begin(), event.end(), comp);

    for(int e = 0; e < event.size(); e++)
        if(event[e].type == 0)
            st.insert(event[e].y);
        else if(event[e].type == 2)
            st.erase(st.find(event[e].y));
        else if(event[e].type == 1) {
            set<int>::iterator it = st.lower_bound(event[e].y);
            if(it != st.end() && *it <= event[e].y2)
                return 1;
        }

    return 0;
}

void solve() {
    int ans = 0, ansl = 1, ansr = 10000 * 10000;
    while(ansl <= ansr) {
        int ans_leng = (ansl + ansr) / 2;
        if(check(ans_leng)) {
            ans = ans_leng;
            ansl = ans_leng + 1;
        }
        else
            ansr = ans_leng - 1;
    }
    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(0);
//  freopen("input.txt", "r", stdin);
//  freopen("output.txt", "w", stdout);

    read();
    solve();

    return 0;
}

