#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<fstream>
#include<map>
#include<ctime>
#include<set>
#include<queue>
#include<cmath>
#include<vector>
#include<bitset>
#include<functional>
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define REP(i,l,r) for((i)=(l);(i)<=(r);++(i))
#define REP2(i,l,r) for((i)=(l);(i)!=(r);++(i))
using namespace std;

typedef long long LL;
typedef double ld;

const int MAX=60000+10;

struct Case
{
	int x,y;
	int h;
}X[MAX],Y[MAX];
int n,m;

vector< pair< pair<int,int> ,int > > add;

int cmp(const Case& a,const Case& b)
{
	return a.h<b.h;
}

multiset<int> hash;

int check(int mid)
{
	int i,j;
	add.clear();
	REP(i,1,n)
		if(2*mid<=X[i].y-X[i].x)
		{
			add.pb(mp(mp(X[i].x+mid,X[i].h),1));
			add.pb(mp(mp(X[i].y-mid+1,X[i].h),-1));
		}
	sort(add.begin(),add.end());
	j=0;
	hash.clear();
	REP(i,1,m)
	{
		int p=Y[i].h;
		for(;j<(int)add.size() && add[j].x.x<=p;++j)
		{
			if(add[j].y==1)
				hash.insert(add[j].x.y);
			else
				hash.erase(hash.find(add[j].x.y));
		}
		multiset<int>::iterator it=hash.lower_bound(Y[i].x+mid);
		if(it!=hash.end() && *it<=Y[i].y-mid)
			return 1;
	}
	return 0;
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
	int i;
	scanf("%d%d",&n,&m);
	REP(i,1,n)
	{
		scanf("%d%d%d",&X[i].h,&X[i].x,&X[i].y);
		X[i].y+=X[i].x;
	}

	REP(i,1,m)
	{
		scanf("%d%d%d",&Y[i].x,&Y[i].h,&Y[i].y);
		Y[i].y+=Y[i].x;
	}
	sort(Y+1,Y+m+1,cmp);

	int left=0,right=300000000;
	while(left<right)
	{
		int mid=(left+right+1)/2;
		if(check(mid))
			left=mid;
		else
			right=mid-1;
	}
	cout<<left<<endl;
	return 0;
}
