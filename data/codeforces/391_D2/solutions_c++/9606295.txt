#include <iostream>
#include <cstdio>
#include <bits/stdc++.h>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

struct point{
    int x, y, l;
}a[100500];

int n, m;

struct event{
    int time;
    int priory;
    int low, high;
};

bool cmp(event a, event b){
    if(a.time != b.time)
        return a.time < b.time;
    return a.priory < b.priory;
}

event now;
event prize[200500];

bool check(int d){
    multiset < int > s;
    int cur = 0;
    for(int i = 0; i < n; i++){
        if(a[i].l < d + d)
            continue;
        now.time = a[i].x;
        now.low = a[i].y + d;
        now.high = a[i].y + a[i].l - d;
        now.priory = 0;
        prize[cur++] = now;
    }
    for(int i = n; i < m + n; i++){
        if(a[i].l < d + d)
            continue;
        now.time = a[i].x + d;
        now.priory = -1;
        now.low = a[i].y;
        prize[cur++] = now;
        now.time = a[i].x + a[i].l - d;
        now.priory = 1;
        prize[cur++] = now;
    }
    sort(prize, prize + cur, cmp);
//    if(d == 1){
//        for(int i = 0; i < cur; i++)
//        cout << prize[i].time << ' ' << prize[i].priory << '\n';
//    }
    for(int i = 0; i < cur; i++){
        if(prize[i].priory == -1)
            s.insert(prize[i].low);
        if(prize[i].priory == 1)
            s.erase( s.find(prize[i].low) );
        if(prize[i].priory == 0){
            if(s.lower_bound(prize[i].low) != s.end() && *s.lower_bound(prize[i].low) <= prize[i].high)
                return true;
        }
    }
    return false;
}

int solve(){
    int r = (int)1e8 + 10;
    int l = -1;
    while(l < r){
        if(r <= 0)
            break;
        int mid = (l + r)/2 + (l + r)%2;
        if(!check(mid))
            r = mid - 1;
        else
            l = mid;
    }
    return max(l, 0);
}

int main()
{
    cin >> n >> m;
    for(int i = 0; i < n; i++)
        cin >> a[i].x >> a[i].y >> a[i].l;
    for(int i = n; i < n + m; i++)
        cin >> a[i].x >> a[i].y >> a[i].l;
    cout << solve() << '\n';
    return 0;
}
