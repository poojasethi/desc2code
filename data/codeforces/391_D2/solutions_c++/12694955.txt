#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
using namespace std;

const int MaxN = 50000 + 10;

struct Event
{
	int type, st, l ,r;
	bool operator < (const Event &b) const {return st < b.st || (st == b.st && type < b.type);}
};

int pos[MaxN * 3], sl;

namespace BIT
{
	const int MaxN = 100000 + 10;
	int t[MaxN], sz;
	void init(int _sz){sz = _sz;for(int i = 1; i <= sz; ++i) t[i] = 0;}
	inline int lowbit(int x){return x & -x;}
	void add(int wz,int v){for(int i = wz; i <= sz; i += lowbit(i)) t[i] += v;}
	int qry(int wz){int ret = 0;for(int i = wz; i > 0; i -= lowbit(i)) ret += t[i];return ret;}
	int qry(int l, int r){return qry(r) - qry(l - 1);}
}

int n, m, x[MaxN], y[MaxN], l[MaxN], T[MaxN], L[MaxN], R[MaxN];

vector<Event>es;

int erf(int v)
{
	int st = 0, en = sl + 1, mid;
	while(st + 1 < en)
	{
		mid = (st + en) >> 1;
		if(pos[mid] <= v)  st = mid;
		else en = mid;
	}
	return st;
}

bool ok(int v)
{
	sl = 0;es.clear();
	for(int i = 1; i <= n; ++i)
		if(y[i] + l[i] - v >= y[i] + v)
		{
			es.push_back((Event){1, y[i] + v, x[i], 1});
			es.push_back((Event){1, y[i] + l[i] - v + 1, x[i], -1});
			pos[++sl] = x[i];
		}
	for(int i = 1; i <= m; ++i)
		if(L[i] + v <= R[i] - v)
		{
			es.push_back((Event){2, T[i], L[i] + v, R[i] - v});
			pos[++sl] = L[i] + v;pos[++sl] = R[i] - v;
		}
	
	sort(pos + 1, pos + sl + 1);
	sl = unique(pos + 1, pos + sl + 1) - pos - 1;
	sort(es.begin(), es.end());
	
	for(int i = 0; i < (int)es.size(); ++i)
		if(es[i].type == 1) es[i].l = erf(es[i].l);
		else
		{
			es[i].l = erf(es[i].l);
			es[i].r = erf(es[i].r);
		}
		
	
	BIT::init(sl);
		
	for(int i = 0; i < (int)es.size(); ++i)
		if(es[i].type == 1)	BIT::add(es[i].l, es[i].r);
		else if(BIT::qry(es[i].l, es[i].r)) return true;
	return false;
}

void solve()
{
	int st = 0, en = 100000001, mid;
	while(st + 1 < en)
	{
		mid = (st + en) >> 1;
		if(ok(mid)) st = mid;
		else en = mid;
	}
	
	ok(2);
	
	printf("%d\n", st);
}

int main()
{
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; ++i) scanf("%d%d%d", &x[i], &y[i], &l[i]);
	for(int i = 1; i <= m; ++i)
	{
		scanf("%d%d%d", &L[i], &T[i], &R[i]);
		R[i] += L[i];
	}
	solve();
	return 0;
}
