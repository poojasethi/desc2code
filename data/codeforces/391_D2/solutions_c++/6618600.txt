#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
#include <cassert>
#include <complex>
using namespace std;
#define rep(i,a,n) for (int i=a;i<(int)n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())
#define ACCU accumulate
#define TWO(x) (1<<(x))
#define TWOL(x) (1ll<<(x))
#define clr(a) memset(a,0,sizeof(a))
#define POSIN(x,y) (0<=(x)&&(x)<n&&0<=(y)&&(y)<m)
#define PRINTC(x) printf("Case #%d: %d\n",++__,x)
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long ll;
typedef long double LD;
typedef pair<int,int> PII;
typedef pair<ll,ll> PLL;
typedef vector<ll> VL;
typedef vector<PII> VPII;
typedef complex<double> CD;
const int inf=0x20202020;
const ll mod=1000000007;
const double eps=1e-9;
const double pi=3.1415926535897932384626;
const int DX[]={1,0,-1,0},DY[]={0,1,0,-1};
ll powmod(ll a,ll b) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
ll powmod(ll a,ll b,ll mod) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
ll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}
// head

const int N=50100;
vector<pair<int,PII> > evt;
multiset<int> hp;
int n,m,px[N],py[N],pl[N],qx[N],qy[N],ql[N];

bool check(int l) {
	evt.clear();
	hp.clear();
	rep(i,0,n) if (pl[i]>=2*l) evt.pb(mp(px[i],mp(0,i)));
	rep(i,0,m) if (ql[i]>=2*l) {
		evt.pb(mp(qx[i]+l,mp(-1,i)));
		evt.pb(mp(qx[i]+ql[i]-l,mp(1,i)));
	}
	sort(all(evt));
	rep(i,0,SZ(evt)) {
		int ty=evt[i].se.fi,id=evt[i].se.se;
		if (ty==-1) hp.insert(qy[id]);
		else if (ty==1) hp.erase(hp.lower_bound(qy[id]));
		else {
			multiset<int>::iterator it=hp.lower_bound(py[id]+l);
			if (it!=hp.end()&&*it<=py[id]+pl[id]-l) return 1;
		}
	}
	return 0;
}

int main() {
	scanf("%d%d",&n,&m);
	int l=0,r=0;
	rep(i,0,n) scanf("%d%d%d",px+i,py+i,pl+i),r=max(r,pl[i]);
	rep(i,0,m) scanf("%d%d%d",qx+i,qy+i,ql+i),r=max(r,ql[i]);
	r=r/2+1;
	if (!check(0)) return puts("0"),0;
	while (l+1<r) {
		int md=(l+r)/2;
		if (check(md)) l=md; else r=md;
	}
	printf("%d\n",l);
}
