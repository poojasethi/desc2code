//#pragma comment(linker,"/STACK:100000000000,100000000000")

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <cmath>
#include <map>
#include <stack>
#include <set>
#include <iomanip>
#include <queue>
#include <map>
#include <functional>
#include <list>
#include <sstream>
#include <ctime>
#include <climits>
#include <bitset>
#include <list>
#include <cassert>
#include <complex>

using namespace std;

/* Constants begin */
const long long inf = 2e18 + 7;
const long long mod = 1e9 + 7;
const double eps = 1e-9;
const double PI = 2*acos(0.0);
const double E = 2.71828;
/* Constants end */

/* Defines begin */
#define pb push_back
#define mp make_pair
#define ll long long
#define double long double
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define forn(i, n) for (int (i)=0; (i)<(n); ++(i))
#define random (rand()<<16|rand())
#define sqr(x) (x)*(x)
#define base complex<double>
/* Defines end */

struct seg{
  int x, y, len;
} a[50005], b[50005];

int n, m;
vector<int> open[300005], close[300005];
vector<pair<int, int> > sg[300005];
vector<int> w;
multiset<int> S;

bool f(int x){
  w.clear();
  S.clear();
  forn(i, n){
    if(a[i].len < x + x){
      continue;
    }
    w.pb(a[i].y + x);
    w.pb(a[i].y + a[i].len - x);
  }
  forn(i, m){
    if(b[i].len < x + x){
      continue;
    }
    w.pb(b[i].y);
  }
  sort(all(w));
  w.erase(unique(all(w)), w.end());
  forn(i, w.size()){
    open[i].clear();
    close[i].clear();
    sg[i].clear();
  }
  forn(i, n){
    if(a[i].len < x + x){
      continue;
    }
    int idFirst = lower_bound(all(w), a[i].y + x) - w.begin();
    int idSecond = lower_bound(all(w), a[i].y + a[i].len - x) - w.begin();
    open[idFirst].pb(a[i].x);
    close[idSecond].pb(a[i].x);
  }
  forn(i, m){
    if(b[i].len < x + x){
      continue;
    }
    int id = lower_bound(all(w), b[i].y) - w.begin();
    sg[id].pb(mp(b[i].x + x, b[i].x + b[i].len - x));
  }
  forn(i, w.size()){
    forn(j, open[i].size()){
      S.insert(open[i][j]);
    }
    forn(j, sg[i].size()){
      int x = sg[i][j].F, y = sg[i][j].S;
      multiset<int> :: iterator it = S.lower_bound(x);
      if(it != S.end() && *it <= y){
        return true;
      }
    }
    forn(j, close[i].size()){
      S.erase(S.lower_bound(close[i][j]));
    }
  }
  return false;
}

int main(void){
  #ifdef nobik
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  #endif
  scanf("%d %d", &n, &m);
  forn(i, n){
    scanf("%d %d %d", &a[i].x, &a[i].y, &a[i].len);
  }
  forn(i, m){
    scanf("%d %d %d", &b[i].x, &b[i].y, &b[i].len);
  }
  int l = 0, r = mod / 2;
  while(r - l > 1){
    int m = (l + r) / 2;
    if(f(m)) l = m; else r = m;
  }
  printf("%d\n", l);
  return 0;
}
