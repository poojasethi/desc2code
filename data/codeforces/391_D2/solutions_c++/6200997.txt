#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

struct seg {
    int x, y, l;

    seg () : x(0), y(0), l(0) {}

    seg (int _x, int _y, int _l) : x(_x), y(_y), l(_l) { }
};

const int MAXN = 60 * 1000;

int n, m;
seg a[MAXN], b[MAXN];

bool check(int length) {
    for (int i = 0; i < n; ++i) {
        a[i].y += length;
        a[i].l -= 2 * length;
    }

    for (int i = 0; i < m; ++i) {
        b[i].x += length;
        b[i].l -= 2 * length;
    }

    vector < pair < int, pair< int, int > > > ev;
    for (int i = 0; i < n; ++i) {
        if (a[i].l >= 0) {
            ev.push_back(make_pair(a[i].x, make_pair(1, i)));
        }
    }

    for (int i = 0; i < m; ++i) {
        if (b[i].l >= 0) {
            ev.push_back(make_pair(b[i].x, make_pair(0, i)));
            ev.push_back(make_pair(b[i].x + b[i].l + 1, make_pair(0, i)));
        }
    }

    sort (ev.begin(), ev.end());
    multiset <int> y;

    bool key = false;
    for (int i = 0; i < ev.size(); ++i) {
        int num = ev[i].second.second;
        if (ev[i].second.first == 0) {
            if (ev[i].first == b[num].x) {
                y.insert(b[num].y);
            } else {
                y.erase(y.find(b[num].y));
            }
        } else {
            int y1 = a[num].y;
            int y2 = a[num].y + a[num].l;

            if (y.lower_bound(y1) != y.upper_bound(y2)) {
                key = true;
                break;
            }
        }
    }

    for (int i = 0; i < n; ++i) {
        a[i].y -= length;
        a[i].l += 2 * length;
    }

    for (int i = 0; i < m; ++i) {
        b[i].x -= length;
        b[i].l += 2 * length;
    }

    return key;
}

int main ()
{
    //freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);

    cin >> n >> m;

    for (int i = 0; i < n; ++i) {
        cin >> a[i].x >> a[i].y >> a[i].l;
    }


    for (int i = 0; i < m; ++i) {
        cin >> b[i].x >> b[i].y >> b[i].l;
    }

    /*int ans = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            int l1 = min(b[j].y - a[i].y, a[i].y + a[i].l - b[j].y);
            int l2 = min(a[i].x - b[j].x, b[j].x + b[j].l - a[i].x);
            int ll = min(l1, l2);
            ans = max(ans, ll);
        }
    }

    cout << ans << endl;*/

    int left = 0;
    int right = 100 * 1000 * 1000;

    while (left < right) {
        int mid = (left + right + 1) / 2;
        if (check(mid)) {
            left = mid;
        } else {
            right = mid - 1;
        }
    }

    cout << left;

    return 0;
}
