#include<stdio.h>
#include<algorithm>
#include<memory.h>
#include<queue>
using namespace std;
    
const int N=50001,R=1000000005;
struct node1{
    int x,y1,y2;
    bool operator <(const node1 &m)const{
        return y1<m.y1;
    }
}a[N];
struct node2{
    int y,x1,x2;
    bool operator <(const node2 &m)const{
        return y<m.y;
    }
}b[N];
struct node{
    int i,y;
    bool operator<(const node &m)const{
        return y>m.y;
    }
}tp;    
priority_queue<node> q;
int c[N*3],sum[N*3],cn,cm;
int lowbit(int x){
    return x&(-x);
}   
void add(int x,int val){
    while(x<=cn) sum[x]+=val,x+=lowbit(x);
}   
int query(int x){
    int res=0;
    while(x>0) res+=sum[x],x-=lowbit(x);
    return res;
}   
int main(){
    int n,m,i,j,p,t,x,y,k,ans,l,r,ll,rr;
    while(~scanf("%d%d",&n,&m)){
        for(i=cn=0;i<n;i++){
            scanf("%d%d%d",&a[i].x,&a[i].y1,&l);
            a[i].y2=a[i].y1+l,c[cn++]=a[i].x;
        }
        for(i=0;i<m;i++){
            scanf("%d%d%d",&b[i].x1,&b[i].y,&l);
            b[i].x2=b[i].x1+l;c[cn++]=b[i].x1;c[cn++]=b[i].x2;
        }
        sort(b,b+m);
        sort(c,c+cn);
        sort(a,a+n);
        cn=unique(c,c+cn)-c;
        for(ll=0,rr=R;ll<rr;){
            memset(sum,0,4*(cn+1));
            k=(ll+rr)>>1;
            while(!q.empty()) q.pop();
            for(i=p=0;i<m;i++){
                if(!k) break;
                while(!q.empty()&&q.top().y<b[i].y+k){
                    add(q.top().i+1,-1);
                    q.pop();
                }
                while(p<n&&a[p].y1<=b[i].y-k){
                    if(a[p].y2>=b[i].y+k){
                        tp.i=l=lower_bound(c,c+cn,a[p].x)-c;
                        add(l+1,1);
                        tp.y=a[p].y2;
                        q.push(tp);
                    }
                    p++;
                }
                l=lower_bound(c,c+cn,b[i].x1+k)-c;
                r=upper_bound(c,c+cn,b[i].x2-k)-1-c;
                t=query(r+1)-query(l);
                if(t>0) break;
            }
            if(i<m) ll=k+1;
            else rr=k;
        }
        printf("%d\n",ll-1);
    }
    return 0;
}   