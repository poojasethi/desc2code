#include<bits/stdc++.h>
using namespace std;
#define NMAX 200100
int num[NMAX];
int low[NMAX];
int par[NMAX][20];
int up[NMAX];
int down[NMAX];
int lv[NMAX];
int root[NMAX];
int findd(int x)
{
    //printf("find %d\n",x);
    if(root[x]==-1) return x;
    return root[x]=findd(root[x]);
}
void unionn(int x,int y)
{
    if(findd(x)==findd(y)) return ;
    root[findd(y)]=findd(x);
}
vector<int> a[200100];
vector<int> e;
int cnt=0;
void dfs(int x,int last)
{
    num[x]=low[x]=++cnt;
    //printf("%d %d %d %d\n",x,last,num[x],low[x]);
    for(int i=0;i<a[x].size();i++)
    {
        int y=e[a[x][i]]-x;
        if(y==last){last=0; continue;}
        if(!num[y])
        {
            dfs(y,x);
            low[x]=min(low[x],low[y]);
        }
        else
        {
            low[x]=min(low[x],num[y]);
        }
        if(low[y]<=num[x])
        unionn(x,y);
        else
        {
            par[findd(y)][0]=x;
        }
    }
}
bool cmp(int x,int y)
{
    return num[x]<num[y];
}
void init(int x)
{
    for(int j=1;j<=18;j++) par[x][j]=par[par[x][j-1]][j-1];
}
int goup(int x,int z)
{
    if(lv[x]<=lv[z]) return x;
    if(down[x])
    {
        printf("No"); exit(0);
    }
    if(up[x])
    return goup(up[x],z);
    else return up[x]=goup(par[x][0],z);
}
int godown(int x,int z)
{
    if(lv[x]<=lv[z]) return x;
    if(up[x])
    {
        printf("No"); exit(0);
    }
    if(down[x])
    return godown(down[x],z);
    else return down[x]=godown(par[x][0],z);
}
int lca(int x,int y)
{
    int i;
    if(lv[x]<lv[y]) swap(x,y);
    for(i=18;i>=0;i--)
    {
        if(lv[par[x][i]]>=lv[y]) x=par[x][i];
    }
     //  printf("find lca %d %d %d %d\n",x,y,lv[x],lv[y]);
    for(i=18;i>=0;i--)
    {
        if(par[x][i]!=par[y][i]) {x=par[x][i]; y=par[y][i];}
    }
    while(x!=y) {x=par[x][0]; y=par[y][0];} return x;
}
vector<int> nen;
int main()
{
    int n,m,q,i,j,x,y;
    //freopen("test.inp","r",stdin);
    //freopen("test.out","w",stdout);
    memset(root,-1,sizeof root);
    scanf("%d %d %d",&n,&m,&q);
    for(i=0;i<m;i++)
    {
        scanf("%d %d",&x,&y);
        //printf("%d %d\n",x,y);
        e.push_back(x+y);
        a[x].push_back(i);
        a[y].push_back(i);
    }
    for(i=1;i<=n;i++) if(!num[i]) dfs(i,i);
    for(i=1;i<=n;i++) nen.push_back(i);
    sort(nen.begin(),nen.end(),cmp);
    for(i=0;i<n;i++)
    {
        int j=i; i=nen[i];
        //printf("start find %d\n",i);
        //printf("%d %d\n",i,findd(i));
        if(lv[findd(i)]) {i=j;continue;}
        if(!par[findd(i)][0])  par[findd(i)][0]=n+1;
        par[findd(i)][0]=findd(par[findd(i)][0]); lv[findd(i)]=lv[par[findd(i)][0]]+1; init(i); i=j;
    }
    while(q--)
    {
        scanf("%d %d",&x,&y);
        x=findd(x); y=findd(y); if(x==y) continue;
        int z=lca(x,y);
        //printf("%d %d %d\n",x,y,z);
        if(z==n+1)
        {
            printf("No"); return 0;
        }
        goup(x,z);
        godown(y,z);
    }
    printf("Yes");
}
