#include<cstdio>
#include<cstring>
#include<algorithm>

#define N 200010

using namespace std;
typedef long long LL;

int n, m, q;
struct Edge {
    int u,v,next;
}edge[N<<1];
int head[N],tot,flag[N<<1];
int dfn[N],low[N],idx,block,sec,stack[N],top;
int vis[N],hsh[N],tree[N];
int lca[N][20],dis[N];
int up[N],down[N];
void link(int xx,int yy) 
{
    edge[tot]=(Edge){xx,yy,head[xx]};
    head[xx]=tot++;
}
void tarjan(int x) 
{
    dfn[x]=low[x]=++idx;
    stack[++top]=x;
    tree[x]=sec;
    for (int i=head[x];i!=-1;i=edge[i].next) 
	{
        int nt=edge[i].v;
        if (flag[i]) continue;
        flag[i]=flag[i^1]=1;
        if (dfn[nt]==-1) 
		{
            tarjan(nt);
            low[x]=min(low[x],low[nt]);
            if (dfn[x]<low[nt]) flag[i]=flag[i^1]=-1;
        } 
		else 
			low[x]=min(low[x],dfn[nt]);
    }
    if (dfn[x]==low[x]) 
	{
        block++;
        int mem;
        do {
            mem=stack[top--];
            hsh[mem]=block;
        } while (mem!=x);
    }
}
void init(int x,int ft) 
{
    vis[x]=1;
    dis[x]=dis[ft]+1;
    lca[x][0]=ft;
    for (int i=1;i<20;i++) 
	{
        lca[x][i]=lca[lca[x][i-1]][i-1];
    }
    for (int i=head[x];i!=-1;i=edge[i].next) 
	{
        int nt=edge[i].v;
        if (nt!=ft) init(nt,x);
    }
}
int get(int x,int y) 
{
    if (dis[y]>dis[x]) swap(x,y);
    int i,tmp=dis[x]-dis[y];
    for (i=19;tmp;i--) 
	{
        if (tmp>=(1<<i)) 
		{
            tmp-=(1<<i);
            x=lca[x][i];
        }
    }
    if (x==y) return x;
    for (i=19;i>=0;i--) 
	{
        if (lca[x][i]!=lca[y][i]) 
		{
            x=lca[x][i];
            y=lca[y][i];
        }
    }
    return lca[x][0];
}
bool ok(int x) 
{
    vis[x]=0;
    for (int i=head[x];i!=-1;i=edge[i].next) 
	{
        int nt=edge[i].v;
        if (vis[nt]) 
		{
            if (!ok(nt)) return false;
            up[x]+=up[nt];
            down[x]+=down[nt];
        }
    }
    return !(up[x] && down[x]);
}
int main()
{
    memset(head,-1,sizeof(head));
    scanf("%d%d%d",&n,&m,&q);
    for (int i=1;i<=m;i++) 
	{
        int u,v;
        scanf("%d%d",&u,&v);
        link(u,v);
        link(v,u);
    }
    memset(dfn,-1,sizeof(dfn));
    for (int i = 1;i<=n;i++) 
	{
        if (dfn[i]==-1) 
		{
            sec++;
            tarjan(i);
        }
    }
    int tmp=tot;
    tot=0;
    memset(head,-1,sizeof (head));
    for (int i=0;i<tmp;i++) 
	{
        if (flag[i]==-1 && hsh[edge[i].u]!=hsh[edge[i].v]) 
		{
            link(hsh[edge[i].u],hsh[edge[i].v]);
        }
    }
    n=block;
    for (int i=1;i<=n;i++) 
	{
        if (!vis[i]) init(i,i);
    }
    bool ans=true;
    for (int i=1;i<=q;i++) 
	{
        int u,v;
        scanf("%d%d",&u,&v);
        if (tree[u]!=tree[v]) 
		{
            puts("No");
            return 0;
        }
        u=hsh[u];
        v=hsh[v];
        if (u!=v) 
		{
            int fa=get(u,v);
            up[u]++;
            up[fa]--;
            down[v]++;
            down[fa]--;
        }
    }
    for (int i=1;i<=n;i++) 
	{
        if (vis[i]) 
		{
            ans=ok(i);
            if (!ans) break;
        }
    }
    if (ans) puts("Yes");
    else puts("No");
    return 0;
}

		    			   	  			 	   	 		