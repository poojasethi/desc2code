/*
 * Problem : 
 * Author : Hwhitetooth
 * Date : 
 * Result :
 */

#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cctype>
#include <cstring>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <list>
#include <map>
#include <set>
#include <algorithm>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;

const int N = 200000 + 10;
const int B = 18;

int a[N], b[N];
vector<pair<int, int> > e[N];
vector<int> newE[N];
int dfn[N], low[N], stamp, st[N], inst[N], top;
int col[N], color;
int vis[N], dep[N], f[N][B];
int in[N], out[N];
int n, m, q;

void dfs(int x, int f) {
	dfn[x] = low[x] = ++stamp;
	st[++top] = x;
	inst[x] = 1;
	int y;
	for (int i = 0; i < (int)e[x].size(); ++i) {
		y = e[x][i].first;
		if (!dfn[y]) {
			dfs(y, e[x][i].second);
			low[x] = min(low[x], low[y]);
		}
		else {
			if (e[x][i].second != f && inst[y]) {
				low[x] = min(low[x], dfn[y]);
			}
		}
	}
	if (low[x] == dfn[x]) {
		for (; inst[x]; --top) {
			col[st[top]] = color;
			inst[st[top]] = 0;
		}
		++color;
	}
}

void getF(int x) {
	vis[x] = 1;
	int y;
	for (int i = 0; i < (int)newE[x].size(); ++i) {
		y = newE[x][i];
		if (!vis[y]) {
			dep[y] = dep[x] + 1;
			f[y][0] = x;
			getF(y);
		}
	}
}

int jump(int u, int d) {
	for (int i = 0; i < B; ++i) {
		if (d >> i & 1) {
			u = f[u][i];
		}
	}
	return u;
}

int lca(int u, int v) {
	if (dep[u] > dep[v]) {
		swap(u, v);
	}
	v = jump(v, dep[v] - dep[u]);
	if (u == v) {
		return u;
	}
	for (int j = B - 1; j >= 0; --j) {
		if (f[u][j] != f[v][j]) {
			u = f[u][j];
			v = f[v][j];
		}
	}
	return f[u][0];
}

int solve(int x) {
	int ret = 1;
	vis[x] = 1;
	int y;
	for (int i = 0; i < (int)newE[x].size(); ++i) {
		y = newE[x][i];
		if (!vis[y]) {
			ret &= solve(y);
			in[x] += in[y];
			out[x] += out[y];
		}
	}
	if (in[x] > 0 && out[x] > 0) {
		ret = 0;
	}
	return ret;
}

int main() {
	scanf("%d%d%d", &n, &m, &q);
	for (int i = 0; i < m; ++i) {
		scanf("%d%d", &a[i], &b[i]);
		--a[i];
		--b[i];
		e[a[i]].push_back(make_pair(b[i], i));
		e[b[i]].push_back(make_pair(a[i], i));
	}
	for (int i = 0; i < n; ++i) {
		if (!dfn[i]) {
			dfs(i, -1);
		}
	}
	for (int i = 0; i < m; ++i) {
		if (col[a[i]] != col[b[i]]) {
			newE[col[a[i]]].push_back(col[b[i]]);
			newE[col[b[i]]].push_back(col[a[i]]);
		}
	}
	for (int i = 0; i < color; ++i) {
		if (!vis[i]) {
			getF(i);
		}
	}
	for (int j = 1; (1 << j) < color; ++j) {
		for (int i = 0; i < color; ++i) {
			f[i][j] = f[f[i][j - 1]][j - 1];
		}
	}
	while (q--) {
		static int s, d, p;
		scanf("%d%d", &s, &d);
		s = col[s - 1];
		d = col[d - 1];
		p = lca(s, d);
		++out[s];
		--out[p];
		++in[d];
		--in[p];
	}
	int ans = 1;
	memset(vis, 0, sizeof vis);
	for (int i = 0; i < color; ++i) {
		if (vis[i]) {
			continue;
		}
		if (!solve(i) || in[i] > 0 || out[i] > 0) {
			ans = 0;
			break;
		}
	}
	printf("%s\n", ans ? "Yes" : "No");
	return 0;
}
