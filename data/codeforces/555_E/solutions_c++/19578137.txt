#include<bits/stdc++.h>
using namespace std;
#define inf (LL)2e9 + 7
#define PB push_back
#define L first
#define R second
#define pii pair<int , int>
#define MP make_pair
#define LL long long

const int maxn = 2e5 + 5 , maxlog = 30;
int cutedge[maxn] , dp[maxn] , par[maxn][maxlog] , hig[maxn] , sum[maxn][2] , path[maxn][2];
bool mark[maxn];
vector <int> adj[maxn];

void dfs(int x)
{
	mark[x] = 1;
	dp[x] = inf;
	bool go = 0;
	sum[x][0] = path[x][0] , sum[x][1] = path[x][1];
	for(int i = 0;i < adj[x].size(); i++){
		int child = adj[x][i];
		if(!mark[child]){
			par[child][0] = x  , hig[child] = hig[x] + 1;
			dfs(child) , dp[x] = min(dp[x] , dp[child]);
			sum[x][0] += sum[child][0] , sum[x][1] += sum[child][1];
		}
		else if(par[x][0] != child)
			dp[x] = min(dp[x] , hig[child]);
		else if(par[x][0] == child && go)
		 	dp[x] = min(dp[x] , hig[child]);
		if(par[x][0] == child)
			go = 1;
	}
	if(hig[x] <= dp[x])
		cutedge[x] = 1;
}
int LCA(int fi , int se)
{
	if(hig[fi] > hig[se]) swap(fi , se);
	for(int i = maxlog - 1; i >= 0; i--){
		if(hig[par[se][i]] >= hig[fi]){
			se = par[se][i];
		}
	}
	if(fi == se)
		return fi;
	for(int i = maxlog - 1; i >= 0; i--)
		if(par[fi][i] != par[se][i])
			fi = par[fi][i] , se = par[se][i];
	if(par[fi][0] != par[se][0])
		return 0;
	return par[fi][0];
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	hig[1] = 1;
	int n , m , q;
	cin >> n >> m >> q;
	while(m--){
		int fi , se;
		cin >> fi >> se;
		adj[fi].PB(se) , adj[se].PB(fi);
	}
	for(int i = 1; i <= n; i++)
		if(!mark[i])
			hig[i] = 1 , dfs(i);
	memset(mark , 0 , sizeof mark);
	for(int j = 1;j < maxlog; j++)
		for(int i = 1;i <= n; i++)
			par[i][j] = par[par[i][j - 1]][j - 1];
		while(q--){
			int x , y;
			cin >> x >> y;
			int lca = LCA(x , y);
			if(lca == 0){
				cout << "NO\n";
				return 0;
			}
			if(lca == x)
				path[x][1]-- , path[y][1]++;
			else if(lca == y)
					path[x][0]++ , path[y][0]--;
			else
				path[x][0]++ , path[lca][0]-- , path[y][1]++ , path[lca][1]--;
		}
	for(int i = 1; i <= n; i++)
		if(!mark[i])
			dfs(i);
	for(int i = 2; i <= n; i++)
		if(cutedge[i] && sum[i][0] && sum[i][1]){
			cout << "NO\n";
			return 0;
		}
	cout << "YES\n";
	return 0;
}
