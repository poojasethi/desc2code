
#define MAXN 200010UL
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

int n, m, t, Q, tp, num, cnt, ti = 0, sn[MAXN], fa[MAXN][25], sta[MAXN], bn[MAXN][2], c1[MAXN], c2[MAXN], bg[MAXN], Rt[MAXN], dfn[MAXN], low[MAXN], d[MAXN];
bool fg = true, vis[MAXN], ins[MAXN];

struct Edge {
	int hou, nt, qn;
}sg[MAXN<<1], st[MAXN<<1];

void Add(int x, int y) {
	sg[t].hou = y;
	sg[t].qn = x;
	sg[t].nt = d[x];
	d[x] = t ++;
	return;
}

void Tarjan(int x, int f) {
	low[x] = dfn[x] = ++ num;
	sta[++ tp] = x, ins[x] = true;
	for(int i = d[x] ; i != -1 ; i = sg[i].nt) {
		if(i==(f^1)) continue;
		if(!dfn[sg[i].hou]) {
			Tarjan(sg[i].hou, i);
			low[x] = min(low[x], low[sg[i].hou]);
		} else if(ins[sg[i].hou]) low[x] = min(low[x], dfn[sg[i].hou]);
	}
	if(low[x]==dfn[x]) {
		int op; ++ cnt;
		do {
			op = sta[tp --];
			ins[op] = false;
			bg[op] = cnt;
		} while(op!=x);
	}
	return;
}

void Dfs(int x, int f, int rt, int dep) {
	sn[x] = dep, Rt[x] = rt;
	fa[x][0] = f;
	vis[x] = true;
	for(int i = 1 ; (1<<i) <= sn[x] ; ++ i) fa[x][i] = fa[fa[x][i-1]][i-1];
	for(int i = d[x] ; i != -1 ; i = sg[i].nt) {
		if(sg[i].hou==f||vis[sg[i].hou]) continue;
		Dfs(sg[i].hou, x, rt, dep+1);
	}
	return;
}

int Get_lca(int x, int y) {
	if(sn[x]<sn[y]) swap(x, y);
	for(int i = 19 ; i >= 0 ; -- i) if(sn[fa[x][i]]>=sn[y]) x = fa[x][i];
	if(x==y) return x;
	for(int i = 19 ; i >= 0 ; -- i) if(sn[fa[x][i]]!=sn[fa[y][i]]) x = fa[x][i], y = fa[y][i];
	return fa[x][0];
}

void Dfs_1(int x, int f) {
	++ ti;
	vis[x] = true;
	for(int i = d[x] ; i != -1 ; i = sg[i].nt) {
		if(sg[i].hou==f||vis[sg[i].hou]) continue;
		Dfs_1(sg[i].hou, x);
		c1[x] += c1[sg[i].hou], c2[x] += c2[sg[i].hou];
	}
	if(x&&c1[x]>0&&c2[x]>0) fg = false;
	return;
}

int main() {
	memset(d, -1, sizeof(d));
	int x, y;
	scanf("%d%d%d", &n, &m, &Q);
	for(int i = 1 ; i <= m ; ++ i) {
		scanf("%d%d", &x, &y);
		Add(x, y), Add(y, x);
	}
	for(int i = 1 ; i <= n ; ++ i) if(!dfn[i]) Tarjan(i, t+1);
	for(int i = 1 ; i <= Q ; ++ i) scanf("%d%d", &bn[i][0], &bn[i][1]);
	memcpy(st, sg, sizeof(sg));
	int t1 = t; t = 0;
	memset(d, -1, sizeof(d));
	for(int i = 0 ; i < t1 ; ++ i) if(bg[st[i].qn]!=bg[st[i].hou]) Add(bg[st[i].qn], bg[st[i].hou]);
	memset(vis, false, sizeof(vis));
	for(int i = 1 ; i <= cnt ; ++ i) if(!vis[i]) Dfs(i, i, i, 1);
	for(int i = 1 ; i <= Q ; ++ i) {
		if(Rt[bg[bn[i][0]]]!=Rt[bg[bn[i][1]]]) {
			fg = false;
			break;
		}
		x = bg[bn[i][0]], y = bg[bn[i][1]];
		if(x==y) continue;
		int anc = Get_lca(x, y);
		++ c1[x], -- c1[anc];
		++ c2[y], -- c2[anc];
	}
	if(fg) {
		memset(vis, false, sizeof(vis));
		for(int i = 1 ; i <= cnt ; ++ i) if(!vis[Rt[i]]) Dfs_1(Rt[i], Rt[i]);
	}
	//printf("ti = %d ", ti);
	if(!fg) printf("No");
	else printf("Yes"); 
	return 0;
}
