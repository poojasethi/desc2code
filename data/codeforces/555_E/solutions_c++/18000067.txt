#include<bits/stdc++.h>
#define MAXN 200009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
vector<int>adj[MAXN],fis,add[MAXN];
int n,m,S=0,kk[MAXN],fup[MAXN],comp[MAXN],ST[MAXN],uu[MAXN],vv[MAXN];
int aux,tin[MAXN],TIM,q,P[MAXN][24],con,lvl[MAXN],EN[MAXN];
stack<int>love;
void no(){
	printf("No\n");
	exit(0);
}
void dfs(int nd,int pr){
	comp[nd]=con;
	fup[nd]=tin[nd]=++TIM;
	love.push(nd);int d=0;
	for(int i=0;i<adj[nd].size();i++){
		int to=adj[nd][i];
		if(to==pr and !d){d=1;
			continue;
		}
		if(~tin[to])
			umin(fup[nd],tin[to]);
		else{
			dfs(to,nd);
			umin(fup[nd],fup[to]);
		}
	}
	if(fup[nd]==tin[nd]){S++;
		do{
			aux=love.top();love.pop();
			kk[aux]=S;
		}while(aux!=nd);
	}
}
void dfs1(int nd,int pr){
	P[nd][0]=pr;
	lvl[nd]=(pr==-1?1:lvl[pr]+1);
	for(int i=0;i<add[nd].size();i++){
		int to=add[nd][i];
		if(to!=pr)
			dfs1(to,nd);
	}
}
void dfs2(int nd,int pr){
	for(int i=0;i<add[nd].size();i++){
		int to=add[nd][i];
		if(to!=pr){
			dfs2(to,nd);
			ST[nd]+=ST[to];
			EN[nd]+=EN[to];
		}
	}
	if(ST[nd]>0 and EN[nd]>0)
		no();	
}
void build(){
	for(int j=1;j<19;j++)	
		for(int i=1;i<=n;i++)
			if(P[i][j-1]!=-1)
				P[i][j]=P[P[i][j-1]][j-1];
}
int LCA(int x,int y){
	if(lvl[x]<lvl[y])
		swap(x,y);
	for(int i=18;i>=0;i--)
		if(lvl[x]-(1<<i)>=lvl[y])
			x=P[x][i];
	if(x==y)
		return x;
	for(int i=18;i>=0;i--)
		if(P[x][i]!=-1 and P[x][i]!=P[y][i])
			x=P[x][i],y=P[y][i];
	return P[x][0];						
}
void make_tree(){
	for(int i=1;i<=n;i++)
		if(tin[i]==-1){
			++con;dfs(i,-1);
			fis.pb(kk[i]);
		}	
	for(int i=1;i<=m;i++)
		if(kk[uu[i]]!=kk[vv[i]]){
			add[kk[uu[i]]].pb(kk[vv[i]]);
			add[kk[vv[i]]].pb(kk[uu[i]]);
		}
	for(int i=0;i<fis.size();i++)	
		dfs1(fis[i],-1);
build();
}
int main(){
	memset(tin,-1,sizeof tin);
	memset(P,-1,sizeof P);
	scanf("%d%d%d",&n,&m,&q);
	for(int i=1;i<=m;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		adj[u].pb(v);uu[i]=u;
		adj[v].pb(u);vv[i]=v;
	}
	make_tree();
	while(q--){
		int u,v;
		scanf("%d%d",&u,&v);
		if(comp[u]!=comp[v])
			no();
		int x=kk[u],y=kk[v];
		if(x==y)
			continue;		
		int z=LCA(x,y);
		ST[x]++;EN[y]++;
		ST[z]--;EN[z]--;
	}
	for(int i=0;i<fis.size();i++)
		dfs2(fis[i],-1);
	printf("Yes\n");
	return 0;
}

