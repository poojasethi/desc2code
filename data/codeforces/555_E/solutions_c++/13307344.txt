#include <iostream>
#include <cstdio>
#include <vector>
#define foru(i,a,b) for(int i = (a), _b = (b); i <= _b; ++i)
#define ford(i,a,b) for(int i = (a), _b = (b); i >= _b; --i)
#define pb push_back
using namespace std;
const int MN = 2E5+10;
int n, m, q, c[MN], flag[MN], fx[MN], fy[MN];
int num[MN], low[MN], pt[MN], ctime;
int par[MN][20], dep[MN], lg[MN], cc, id[MN];
vector<int> a[MN], order;

void enter() {
    scanf("%d %d %d", &n, &m, &q);
    foru(i,1,m) {
        int x, y;
        scanf("%d %d", &x, &y);
        a[x].pb(y); a[y].pb(x);
    }
}

void dfs(int st) {
    par[st][0] = -1; num[st] = low[st] = ++ctime; dep[st] = 0;
    id[st] = ++cc;
    vector<int> s;
    s.pb(st);
    while (!s.empty())
    {
        int u = s.back();
        if (pt[u] == a[u].size()) {
            pt[u] = 0; s.pop_back();
            order.pb(u);
            if (s.empty()) break;
            int pu = s.back();
            low[pu] = min(low[pu], low[u]);
            //cout << u << " " << low[u] << " " << num[u] << " bridge\n";
            c[u] = 1 + (low[u] != num[u]);
            //if (c[u] == 1) cout << pu << " " << u << "\n";
            continue;
        }
        int v = a[u][pt[u]++];
        if (v == par[u][0]) ++flag[v];
        if (v == par[u][0] && flag[v] == 1) continue;
        //cout << u << " " << v << " edge\n";
        if (!par[v][0]) {
            //cout << u << " " << v << "\n";
            par[v][0] = u; dep[v] = dep[u] + 1;
            num[v] = low[v] = ++ctime;
            id[v] = cc;
            s.pb(v);
        } else low[u] = min(low[u], num[v]);
    }
}

void init() {
    ctime = cc = 0;
    foru(s,1,n) if (!par[s][0]) dfs(s);
    foru(i,1,n) lg[i] = lg[i-1] + (1 << (lg[i-1]+1) <= i);
    //foru(i,1,n) cout << lg[i] << " \n"[i==n];
    int k = 0;
    foru(i,1,n) k = max(k, dep[i]);
    k = lg[k];
    foru(j,1,k) foru(i,1,n) par[i][j] = (par[i][j-1] != -1)? par[par[i][j-1]][j-1]: -1;
}

int lca(int u, int v) {
    if (dep[u] < dep[v]) swap(u, v);
    ford(i,lg[dep[u]],0) if (dep[u] - (1<<i) >= dep[v]) u = par[u][i];
    if (u == v) return u;
    ford(i,lg[dep[u]],0) if (par[u][i] != par[v][i]) u = par[u][i], v = par[v][i];
    return par[u][0];
}

void solve() {
    bool flag = true;
    foru(i,1,q) {
        int x, y, r;
        scanf("%d %d", &x, &y);
        r = lca(x, y);
        //if (id[x] != id[y]) { flag = false; break; }
        if (r == -1) { flag = false; break; }
        //cout << x << " " << y << " " << r << "\n";
        fx[x]++; fy[y]++;
        fx[r]--; fy[r]--;
    }

    //puts("here");

    if (flag) foru(i,0,order.size()-2) {
        int v = order[i], u = par[v][0];
        int cnt = (fx[v] != 0) + (fy[v] != 0);
        //cout << v << " " << c[v] << " " << cnt << "\n";
        if (cnt > c[v]) { flag = false; break; }
        fx[u] += fx[v]; fy[u] += fy[v];
    }
    puts( (flag)? "Yes": "No" );
}

int main() {
    //freopen("test.inp", "r", stdin);
    enter();
    init();
    solve();
}
