#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
const int MAX = 200005;
vector<int> adj[MAX];
int from[MAX], to[MAX], low[MAX], d[MAX], color[MAX], cc[MAX], par[20][MAX];
bool iscut[MAX], mark[MAX], ans = true;
void dfs(int p, int v)
{
	mark[v] = true;
	for (int i = 0; i < adj[v].size(); i++)
	{
		int id = adj[v][i];
		if (id == p)
			continue;
		int u = from[id] + to[id] - v;
		if (mark[u])
		{
			if (d[low[v]] > d[u])
				low[v] = u;
		}
		else
		{
			d[u] = d[v] + 1;
			dfs(id, u);
			if (d[low[u]] > d[v])
				iscut[id] = true;
			if (d[low[v]] > d[low[u]])
				low[v] = low[u];
		}
	}
}
void go(int v, int c)
{
	color[v] = c;
	for (int i = 0; i < adj[v].size(); i++)
	{
		int id = adj[v][i];
		if (iscut[id])
			continue;
		int u = from[id] + to[id] - v;
		if (color[u] == -1)
			go(u, c);
	}
}
void init(int p, int v, int c)
{
	cc[v] = c;
	par[0][v] = p;
	for (int i = 1; i < 20; i++)
		par[i][v] = par[i - 1][par[i - 1][v]];
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		if (u == p)
			continue;
		d[u] = d[v] + 1;
		init(v, u, c);
	}
}
int get_parent(int v, int k)
{
	for (int i = 0; i < 20; i++)
		if ((1 << i) & k)
			v = par[i][v];
	return v;
}
int lca(int u, int v)
{
	if (d[u] < d[v])
		swap(u, v);
	u = get_parent(u, d[u] - d[v]);
	if (u == v)
		return u;
	for (int i = 19; i >= 0; i--)
		if (par[i][u] != par[i][v])
		{
			u = par[i][u];
			v = par[i][v];
		}
	return par[0][v];
}
int down[MAX], up[MAX];
void fin(int p, int v)
{
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		if (u == p)
			continue;
		fin(v, u);
		down[v] += down[u];
		up[v] += up[u];
	}
	if (down[v] > 0 && up[v] > 0)
		ans = false;
}
int main()
{
	ios::sync_with_stdio(false);
	memset(color, -1, sizeof(color));
	for (int i = 0; i < MAX; i++)
		low[i] = i;
	int n, m, q;
	cin >> n >> m >> q;
	for (int i = 0; i < m; i++)
	{
		cin >> from[i] >> to[i];
		from[i]--;
		to[i]--;
		adj[from[i]].push_back(i);
		adj[to[i]].push_back(i);
	}
	for (int i = 0; i < n; i++)
		if (!mark[i])
			dfs(-1, i);
	int c = 0;
	for (int i = 0; i < n; i++)
		if (color[i] == -1)
			go(i, c++);
	for (int i = 0; i < n; i++)
		adj[i].clear();
	for (int i = 0; i < m; i++)
		if (iscut[i])
		{
			adj[color[from[i]]].push_back(color[to[i]]);
			adj[color[to[i]]].push_back(color[from[i]]);
		}
	memset(cc, -1, sizeof(cc));
	memset(d, 0, sizeof(d));
	n = c;
	c = 0;
	for (int i = 0; i < n; i++)
		if (cc[i] == -1)
			init(i, i, c++);
	while (q--)
	{
		int u, v;
		cin >> u >> v;
		u--;
		v--;
		u = color[u];
		v = color[v];
		if (cc[u] != cc[v])
			ans = false;
		else
		{
			int p = lca(u, v);
			up[u]++;
			up[p]--;
			down[p]--;
			down[v]++;
		}
	}
	for (int i = 0; i < n; i++)
		if (par[0][i] == i)
			fin(i, i);
	if (ans)
		cout << "Yes\n";
	else
		cout << "No\n";
	return 0;
}
