#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 2e5 + 100, MAXB = 20;

vector<int> G[MAXN], H[MAXN], edgeid[MAXN];
int uni[MAXN], n, m, cls[MAXN];
int vis[MAXN], col;
int par[MAXN][MAXB], h[MAXN];
int up[MAXN], down[MAXN];
bool maderoot[MAXN], inproc[MAXN];
int id[MAXN];

int finduni(int u){
	return (u == uni[u] ? u : uni[u] = finduni(uni[u]));
}

void join(int a, int b){
	uni[ finduni(a) ] = finduni(b);
}

int dfs(int u, int topar, int p){
	vis[u] = col;

	int outp = 0;
	inproc[u] = true;
	for (int i = 0; i < G[u].size(); i++){
		int v = G[u][i];
		if (vis[v] && edgeid[u][i] != topar && inproc[v]) outp++, cls[v]++;
		else if (!vis[v]) outp += dfs(v, edgeid[u][i], u);
	}
	inproc[u] = false;
	outp -= cls[u];

	if (outp)
		join(u, p);
	return outp;
}

void makeroot(int u, int p){
	h[u] = (p == -1 ? 0 : h[p] + 1);

	maderoot[u] = true;
	par[u][0] = p;
	for (int i = 1; i < MAXB; i++){
		if (par[u][i-1] == -1) break;
		par[u][i] = par[ par[u][i-1] ][i-1];
	}

	for (int i = 0; i < H[u].size(); i++)
		if (!maderoot[H[u][i]])
			makeroot(H[u][i], u);
}

int lca(int u, int v){
	if (h[u] < h[v]) swap(u, v);

	for (int i = MAXB -1; i >= 0; i--)
		if (par[u][i] != -1 && h[par[u][i]] >= h[v])
			u = par[u][i];

	if (u == v) return u;

	for (int i = MAXB -1; i >= 0; i--)
		if (par[u][i] != par[v][i])
			u = par[u][i], v = par[v][i];

	return par[u][0];
}

bool byH(int a, int b){
	return h[a] > h[b];
}

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	int q;
	cin >> n >> m >> q;

	for (int i = 0; i < n; i++)
		uni[i] = i, fill(par[i], par[i] + MAXB, -1);

	for (int i = 0; i < m; i++){
		int u, v; cin >> u >> v; u--; v--;
		G[u].push_back(v); edgeid[u].push_back(i);
		G[v].push_back(u); edgeid[v].push_back(i);
	}

	for (int i = 0; i < n; i++)
		if (!vis[i])
			col++, dfs(i, -1, -1);
	
	for (int i = 0; i < n; i++)
		for (int j = 0; j < G[i].size(); j++){
			int u = finduni(i), v = finduni(G[i][j]);
			if (u == v) continue;
			H[u].push_back(v);
			H[v].push_back(u);
		}

	for (int i = 0; i < n; i++){
		int u = finduni(i);
		if (!maderoot[u]) makeroot(u, -1);
	}

	for (int i = 0; i < q; i++){
		int s, d; cin >> s >> d; d--; s--;
		d = finduni(d); s= finduni(s);

		if (vis[d] != vis[s]){
			cout << "No";
			return 0;
		}

		int x = lca(s, d);

		up[s] ++; up[x] --;
		down[x] --; down[d] ++;
	}

	for (int i = 0; i < n; i++)
		id[i] = finduni(i);//, cerr << uni[i] << " ";
//	cerr << "\n";

	sort(id, id + n);
	int sz = unique(id, id + n) - id;

	sort(id, id + sz, byH);

	for (int i = 0; i < sz; i++){
		int u = id[i];
//		cerr << i << " : " << h[i] << ", " << down[i] << ", " << up[i] << endl;
		if (up[u] && down[u]){
			cout << "No";
			return 0;
		}

		if (par[u][0] == -1) continue;
		int p = par[u][0];

		up[p] += up[u];
		down[p] += down[u];
	}

	cout << "Yes\n";
			

}
