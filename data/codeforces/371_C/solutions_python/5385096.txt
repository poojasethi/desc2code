from collections import Counter
import sys

counts = Counter(raw_input())

for l in 'BSC':
	if not l in counts:
		counts[l] = 0

b, s, c = map(int, raw_input().split())

prices = map(int, raw_input().split())

cash = int(raw_input())

hamburgers = 0

imm = sys.maxint
if counts['B']:
	imm = b / counts['B']
if counts['S']:
	imm = min(imm, s / counts['S'])
if counts['C']:
	imm = min(imm, c / counts['C'])

hamburgers = imm

b -= imm * counts['B']
s -= imm * counts['S']
c -= imm * counts['C']

# print counts
# print "Immideately : ", hamburgers, "left : ", b, s, c

while ((b * counts['B'] + s * counts['S'] + c * counts['C']) and cash > 0):
	cashout = 0
	if b < counts['B']:
#		print "Out of bread"
		if cash >= prices[0] * (counts['B'] - b):
			cashout += prices[0] * (counts['B'] - b)
			b = counts['B']
		else:
#			print "B too expensive"
			break
	if s < counts['S']:
#		print "Out of s"
		if (cash-cashout) >= prices[1] * (counts['S'] - s):
        	        cashout += prices[1] * (counts['S'] - s)
			s = counts['S']
	        else:
#			print "S too expensive"
	                break
	if c < counts['C']:
#		print "Out of c"
		if (cash-cashout) >= prices[2] * (counts['C'] - c):
	                cashout += prices[2] * (counts['C'] - c)
			c = counts['C']
	        else:
#			print "C too expensive"
	                break
	cash -= cashout
	b -= counts['B']
	s -= counts['S']
	c -= counts['C']
	hamburgers += 1
#	print "Hamburger", cash, b, s, c

hamprice = counts['B'] * prices[0] + counts['S'] * prices[1] + counts['C'] * prices[2]
hamburgers += cash / hamprice

print hamburgers

