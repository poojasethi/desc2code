#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<vector>
using namespace std;
typedef long long LL;
LL mod=100,k=300;
vector<LL> q[15];
LL mul(LL a,LL b)
{
	if(b==0) return 0;
	LL ans=mul(a,b>>1);
	ans=(ans+ans)%mod;
	if(b&1) ans=(ans+a)%mod;
	return ans;
}
struct matrix
{
	LL a[3][3];
	matrix(){ memset(a,0,sizeof(a)); }
	friend matrix operator * (matrix x,matrix y)
	{
		matrix c;
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
				for(int k=0;k<2;k++)
					c.a[i][j]=(c.a[i][j]+mul(x.a[i][k],y.a[k][j]))%mod;
		return c;
	}
}A,B,C,I;
matrix calc(matrix x,LL p)
{
	if(p==0) return I;
	matrix ans=calc(x,p>>1);
	ans=ans*ans;
	if(p&1) ans=ans*x;
	return ans;
}
LL fib(LL x)
{
	if(x==0) return 0;
	C=calc(A,x-1)*B;
	return C.a[1][0];
}
int main()
{
	LL x,n,i,j,t=0;
	A.a[0][1]=1,A.a[1][0]=1,A.a[1][1]=1;
	I.a[0][0]=1,I.a[1][1]=1,B.a[1][0]=1;
	scanf("%I64d",&n);
	for(i=1;i<=300;i++)
		if(fib(i)==n%mod)
			q[0].push_back(i);
	for(t=0;t<11;t++)
	{
		mod*=10;
		for(j=0;j<q[t].size();j++)
		{
			x=q[t][j];
			for(i=0;i<=10;i++)
			{
				if(fib(x+i*k)==n%mod)
					q[t+1].push_back(x+i*k);
			}
		}
		if(q[t+1].empty())
		{
			printf("-1\n");
			return 0;
		}
		k*=10;
	}
	LL ans=q[11][0];
	for(i=1;i<q[11].size();i++)
		ans=min(ans,q[11][i]);
	printf("%I64d\n",ans);
	return 0;
}
