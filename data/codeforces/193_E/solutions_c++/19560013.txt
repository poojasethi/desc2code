#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
#include<cmath>
#define ll long long
#define ld long double
#define pb push_back
using namespace std;
const ll maxn= 5e5;
typedef ll matrix[5][5];
typedef ll vec[5];
vector<ll> Z[20];
matrix A;
ll mo,i,j,k,x,y,z,L,K;
ll mul(ll a,ll b){
	ll t= 0;
	while (b){
		if (b&1) t= (t+a)%mo;
		b>>= 1;
		a= (a+a)%mo;
	}return t;
}
void mul(matrix a,matrix b,matrix res){
	matrix c={};
	ll i,j,k;
	for (i= 1;i<=2;i++)
		for (j= 1;j<=2;j++)
			for (k= 1;k<=2;k++)
				c[i][j]= (c[i][j]+mul(a[i][k],b[k][j]))%mo;
	memcpy(res,c,sizeof(c));
}
void mul(vec f,matrix a,vec res){
	vec c= {};
	ll i,j;
	for (i= 1;i<=2;i++)
		for (j= 1;j<=2;j++)
			c[i]= (c[i]+mul(f[j],a[j][i]))%mo;
	memcpy(res,c,sizeof(c));
}
void ksm(matrix a,ll b,matrix res){
	matrix t= {};
	ll i;
	for (i= 1;i<=2;i++)
		t[i][i]= 1;
	while (b){
		if (b&1) mul(t,a,t);
		b>>= 1;
		mul(a,a,a);
	}
	memcpy(res,t,sizeof(t));
}
ll f(ll o){
	vec f= {};
	matrix c;
	f[1]= 0;
	f[2]= 1;
	memcpy(c,A,sizeof(c));
	ksm(c,o,c);
	mul(f,c,f);
	return f[1];
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("1.in","r",stdin);
	freopen("1.out","w",stdout);
#endif
	A[1][2]= A[2][1]= A[2][2]= 1;
	L= 60;
	mo= 10;
	scanf("%lld",&K);
	for (i= 0;i<=60;i++){
		ll x= f(i);
		if (x==K%mo)
			Z[0].pb(i);
	}
	for (i= 1;i<=12;i++){
		mo*= 10;
		ll len= Z[i-1].size();
		for (j= 0;j<len;j++)
			for (k= 0;k<10;k++)
				if (f(Z[i-1][j]+k*L)==K%mo)
					Z[i].pb(Z[i-1][j]+k*L);
		L*= 10;
	}
	ll len= Z[12].size();
	if (!len) printf("-1");
	else printf("%lld",*min_element(Z[12].begin(),Z[12].end()));
	return 0;
}
