#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef unsigned long long i64;
struct mat
{
    i64 m[3][3];
}A,B,Tmp;
const int maxl = 1001;
int num;
i64 list[maxl][2];
int sit[maxl];
i64 cheng(i64 a,i64 b)
{
    i64 c = a/10000000,d = b/10000000;
    i64 e = a%10000000,f = b%10000000;
    i64 sum = 0;
    sum += c*f%1000000*10000000;
    sum += d*e%1000000*10000000;
    sum += e*f%10000000000000LL;
    sum %= 10000000000000LL;
    return sum;
}
int main()
{
    int i,j;
    i64 N,a,b,c,d;
    int n;
    scanf("%I64d",&N);
    n = N%10000000;
    a = 0,b = 1;
    if (b == N) ++num,list[num][0] = a,list[num][1] = b,sit[num] = 1;
    for (i = 2; i <= 15000000; ++i) 
    {
        c = b,b = (a+b)%10000000000000LL,a = c;
        if (b%10000000 == n) ++num,list[num][0] = a,list[num][1] = b,sit[num] = i;
    }
    B.m[1][1] = 8225510000001LL,B.m[1][2] = 3548980000000LL,B.m[2][1] = 3548980000000LL,B.m[2][2] = 1774490000001LL;
    for (j = 0; j <= 1000000; ++j)
    {
        for (i = 1; i <= num; ++i)
        {
            a = list[i][0],b = list[i][1];
            if (b == N) 
            {
                printf("%I64d\n",(i64)j*15000000+sit[i]);
                return 0;
            }
            c = (cheng(a,B.m[1][1])+cheng(b,B.m[2][1]))%10000000000000LL;
            d = (cheng(a,B.m[1][2])+cheng(b,B.m[2][2]))%10000000000000LL;
            list[i][0] = c,list[i][1] = d;
        }
    }
    printf("-1");
    return 0;
}
