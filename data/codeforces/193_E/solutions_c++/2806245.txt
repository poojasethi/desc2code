#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
__int64 a[2][2]={{0,1},{1,1}},b[2][2],f[2][2];
__int64 p[1010],q[1010],n,mod=10,len=60;
int m,t,i,j,k;

__int64 calc(__int64 a,__int64 b)
{
	__int64 c=0;
	for(int i=60;i>=0;i--)
	{
		c=c*2%mod;
		if(b>>i&1) c=(c+a)%mod;
	}
	return c;
}

void mul(__int64 a[2][2],__int64 b[2][2])
{
	__int64 c[2][2]; int i,j,k;
	memset(c,0,sizeof(c));
	for(i=0;i<2;i++)
		for(j=0;j<2;j++)
			for(k=0;k<2;k++)
				c[i][j]=(c[i][j]+calc(a[i][k],b[k][j]))%mod;
	memcpy(a,c,sizeof(c));
}

__int64 fib(__int64 n)
{
	if(!n) return 0;
	f[0][1]=1,f[1][0]=f[0][0]=f[1][1]=0;
	memcpy(b,a,sizeof(a));
	for(;n;n>>=1)
	{
		if(n&1) mul(f,b);
		mul(b,b);
	}
	return f[0][0];
}

int main()
{
	cin>>n;
	for(i=1;i<=len;i++)
		if(fib(i)==n%mod) p[++m]=i;
	for(i=1;i<13;i++)
	{
		mod*=10,t=0;
		for(j=1;j<=m;j++)
			for(k=0;k<=9;k++)
				if(fib(k*len+p[j])==n%mod) q[++t]=k*len+p[j];
		len*=10,m=t;
		memcpy(p,q,sizeof(q));
	}
	if(m)
	{
		for(i=1;i<m;i++) p[m]=min(p[m],p[i]);
		cout<<p[m]<<endl;
	}
	else puts("-1");
	return 0;
}