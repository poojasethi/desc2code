#include <cstdio>
#include <cstring>
#include <algorithm>
#define maxn 10005
#define ll long long
using namespace std;

ll N,L,P,p[maxn],q[maxn];

ll Mul(ll a,ll b)
{
	ll c=0;
	for (;b; b>>=16,(a<<=16)%=P) (c+=a*(b&65535))%=P;
	return c;
}

struct matrix
{
	ll a[2][2];
	matrix(ll x=0) {a[0][1]=a[1][0]=0,a[0][0]=a[1][1]=x;}
	friend matrix operator *(const matrix&A,const matrix&B)
	{
		matrix C;
		for (int i=0; i<2; i++)
			for (int j=0; j<2; j++)
				for (int k=0; k<2; k++) (C[i][j]+=Mul(A[i][k],B[k][j]))%=P;
		return C;
	}
	matrix operator ^(ll B)
	{
		matrix A=*this,C(1);
		for (;B; B>>=1,A=A*A) if (B&1) C=C*A;
		return C;
	}
	ll*operator [](int x) {return a[x];}
	const ll*operator [](int x) const {return a[x];}
} A,F;

ll Fib(ll n)
{
	if (!n) return 0;
	F[0][0]=A[0][0]=A[0][1]=A[1][0]=1;
	return (F*(A^(n-1)))[0][0];
}

int main()
{
	scanf("%I64d",&N),L=60,P=10;
	for (int i=0; i<L; i++) if (Fib(i)==N%P) p[++p[0]]=i;
	for (int i=2; i<=13; i++)
	{
		P*=10,q[0]=0;
		for (int i=1; i<=p[0]; i++)
			for (int j=0; j<10; j++) if (Fib(j*L+p[i])==N%P) q[++q[0]]=j*L+p[i];
		L*=10,memcpy(p,q,sizeof(q));
	}
	printf("%I64d\n",!p[0]?-1:*min_element(p+1,p+p[0]+1));
}