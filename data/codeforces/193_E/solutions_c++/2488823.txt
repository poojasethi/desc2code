#include <cstdio>
#include <cstring>
#include <algorithm>
#include <ctime>
#include <iostream>
using namespace std;

typedef unsigned int USN;
typedef long long LL;
typedef unsigned long long ULL;

#define rep(i,l,r) for (int i=(l); i<=(r); i++)
#define repd(i,r,l) for (int i=(r); i>=(l); i--)

int random(int k)
{
	static int x=time(0); x+=(x<<2)+(x>>2)+(x<<4)+(x>>4)+1; x&=(0x7fffffff);
	return x%k;
}

#define MODULE 10000000000000LL
LL x[10000000], y[10000000];
LL MD, f[2000];

typedef LL mat[2][2];

mat g={{0,1},{1,1}};

LL cmod(LL a, LL b, LL c)
{
	LL p=(long double)a*b/c;
	LL r=a*b-c*p;
	if (r<0) r+=c;
	return r;
}

void mul(mat &c, mat a, mat b)
{
	rep(i,0,1) rep(j,0,1) c[i][j]=0;
	rep(i,0,1) rep(j,0,1) rep(k,0,1) c[i][k]=(c[i][k]+cmod(a[i][j],b[j][k],MODULE))%MODULE;
}

void pow(mat &res, LL x)
{
	int t;
	repd(i,62,0) if (x & (LL(1)<<i)) { t=i; break; }
	mat tmp; memcpy(res,g,sizeof res);
	repd(i,t-1,0)
	{
		mul(tmp,res,res), memcpy(res,tmp,sizeof res);
		if (x & (LL(1)<<i)) mul(tmp,res,g), memcpy(res,tmp,sizeof res);
	}
}

LL fib(LL x)
{
	if (x==0) return 0;
	if (x==1) return 1;
	mat res; pow(res,x-1);
	return res[1][1];
}

LL lemon()
{
	LL n; scanf("%I64d",&n);
	if (n==0) return 0;
	if (n==1) return 1;
	LL *cur=x, *next=y; int cnt=0;
	f[0]=0; f[1]=1; rep(i,2,1499) f[i]=(f[i-1]+f[i-2])%MODULE;
	rep(i,0,1499) if (f[i]%1000==n%1000) cur[++cnt]=i;
	LL cycle=1500;
	for (MD=10000; MD<=MODULE; MD*=10, cycle*=10)
	{
		int cnx=0;
		rep(k,0,9) rep(i,1,cnt) if (fib(cycle*k+cur[i])%MD==n%MD) next[++cnx]=cycle*k+cur[i];
		cnt=cnx; LL *t=cur; cur=next; next=t;
	}
	if (!cnt) return -1; else return cur[1];
}

int main()
{
	ios::sync_with_stdio(true);
	#ifndef ONLINE_JUDGE
		freopen("193E.in","r",stdin);
	#endif
	printf("%I64d\n",lemon());
	return 0;
}