/*
Author: LJQ
PROG: Codeforces #122 Div1 E. Fibonacci Number
DATE: 2012.12.22
*/
#include <cstdio>
#include <cstring>

using namespace std;

typedef long long LL;

LL n, ret, MOD;

inline void Add(LL &x, LL y){
	x += y; if (x >= MOD) x -= MOD;
}

LL multi(LL x, LL y){//x * y % MOD
	if (!y) return 0;
	if (y == 1) return x;
	LL ret = multi(x, y >> 1); Add(ret, ret);
	if (y & 1) Add(ret, x);
	return ret;
}

LL a[2][2], tmp[2][2], b[2], tmp2[2];

LL calc(LL n){//fib[n] % MOD
	if (!n) return 0;
	a[0][0] = 0; a[0][1] = a[1][0] = a[1][1] = 1; b[0] = 0; b[1] = 1;
	for (; n; n >>= 1){
		if (n & 1){
			tmp2[0] = b[0]; tmp2[1] = b[1]; b[0] = b[1] = 0;
			for (int k = 0; k < 2; k ++)
				for (int i = 0; i < 2; i ++)
					Add(b[i], multi(tmp2[k], a[k][i]));
		}
		memcpy(tmp, a, sizeof(tmp));
		memset(a, 0, sizeof(a));
		for (int k = 0; k < 2; k ++)
			for (int i = 0; i < 2; i ++)
				for (int j = 0; j < 2; j ++)
					Add(a[i][j], multi(tmp[i][k], tmp[k][j]));		
	}
	return b[0];
}

void init()
{
	scanf("%I64d", &n);
}

const int maxm = 1005;
LL p[maxm], q[maxm];

void work()
{
	//Part 1. all n % 10
	int m = 0; MOD = 10; LL Len = 60;
	for (int i = 1, a = 0, b = 1; i <= Len; i ++){
		int c = (a + b) % MOD; a = b; b = c;
		if (a == n % MOD) p[++ m] = i;
	}
	//10^1 => 10^13
	for (int i = 1; i < 13; i ++){
		MOD *= 10; int m0 = 0;
		for (int j = 1; j <= m; j ++)
			for (int k = 0; k < 10; k ++)
				if (calc(k * Len + p[j]) == n % MOD) q[++ m0] = k * Len + p[j];
		Len *= 10; m = m0;
		memcpy(p, q, sizeof(p));
	}
	//find answer
	if (!m) ret = -1;
		else {
			ret = p[m];
			for (int i = 1; i < m; i ++)
				if (p[i] < ret) ret = p[i];
		}
}

void print()
{
	printf("%I64d\n", ret);
}

int main()
{
	init();
	work();
	print();
	return 0;
}
