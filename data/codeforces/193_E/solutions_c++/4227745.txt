#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<vector>
#define MAXN 15000005
#define mod 10000000000000LL
using namespace std ;
typedef long long LL ;

LL N, NN, K, X, len ;
vector<LL> pos[MAXN] ;
LL ten[15] ;

LL ksc(LL x, LL y)
{
	return (x*y-(LL)(x/(long double)mod*y+1e-3)*mod+mod)%mod ;
}

struct matrix {
	LL c ;
	LL k[2][2] ;
	matrix operator * (matrix b) const {
		matrix n ;
		n.c = c ;
		int i, j, t ;
		for(i = 0; i < c; i ++)
			for(j = 0; j <= 1; j ++)
				for(t = 0, n.k[i][j] = 0; t <= 1; t ++)
					n.k[i][j] = (n.k[i][j]+ksc(k[i][t], b.k[t][j]))%mod ;
		return n ;
	}
} one, st, ed, fr ;

matrix ksm(matrix x, LL t)
{
	if(!t) return one ;
	matrix tmp = ksm(x, t/2) ;
	tmp = tmp*tmp ;
	if(t&1) tmp = tmp*x ;
	return tmp ;
}

int main()
{
	LL i, j ;
	LL F0, F1, FT ;
	LL L, R ;
	scanf("%I64d", &N) ;
	K = 1000, X = 3 ;
	len = K*3/2 ;	
	for(i = 1, ten[0] = 1; i <= 13; i ++)
		ten[i] = ten[i-1]*10 ;
	
	F0 = 0, F1 = 1 ;
	if(!N) pos[X].push_back(0) ; 
	if(N%10 == 1) pos[X].push_back(1) ;
	for(i = 2; i <= len; i ++)
	{
		FT = (F1+F0)%K ;
		F0 = F1, F1 = FT ;
		if(FT == N%K) pos[X].push_back(i) ;
	}
	
	one.c = 2, one.k[0][0] = one.k[1][1] = 1 ;
	fr.c = 1, fr.k[0][0] = 0, fr.k[0][1] = 1 ;// from 0, 1
	st.c = 2, st.k[0][1] = st.k[1][0] = st.k[1][1] = 1 ;
	
	for(X ; X <= 13; X ++)
	{
		st.c = 2, st.k[0][1] = st.k[1][0] = st.k[1][1] = 1 ;
		ed = one ;
		for(i = 0; i < pos[X].size(); i ++)
		{
			L = ten[X]*3/2, R = pos[X][i] ;
			for(j = 0; j < 10; j ++)
			{
				ed = ksm(st, L*j+R) ;
				F0 = (fr*ed).k[0][0] ;
				if(F0%ten[X] == N%ten[X]) 
					pos[X+1].push_back(L*j+R) ;
			}
		}
	}
	sort(pos[14].begin(), pos[14].end()) ;
	if(!pos[14].size()) printf("-1\n") ;
	else printf("%I64d\n", pos[14][0]) ;
	//system("pause") ;
	return 0 ;
}
