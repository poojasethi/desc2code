#! /usr/bin/env python
#  @author: grastyele

import copy

def fib(x, Mod):
    x = x - 1
    base = [[1, 1], [1, 0]]
    ret  = [[1, 0], [0, 1]]
    while x > 0:
        if x & 1:
            temp = copy.deepcopy(ret)
            for i in range(0, 2):
                for j in range(0, 2):
                    ret[i][j] = 0
                    for k in range(0, 2):
                        ret[i][j] = (ret[i][j] + base[i][k] * temp[k][j]) % Mod
        temp = copy.deepcopy(base)
        for i in range(0, 2):
            for j in range(0, 2):
                base[i][j] = 0
                for k in range(0, 2):
                    base[i][j] = (base[i][j] + temp[i][k] * temp[k][j]) % Mod
        x = x / 2
    return ret[0][0]

def count_cycle():
    size = [1, 60]
    Mod = 10
    for i in range(2, 14):
        Mod = Mod * 10
        x = fib(size[i - 1] - 1, Mod)
        f0 = y = fib(size[i - 1], Mod)
        f1 = z = (x + y) % Mod
        size.append(size[i - 1])
        while f0 != 0 or f1 != 1:
            f1, f0 = (z * f1 + y * f0) % Mod, (y * f1 + x * f0) % Mod
            size[i] += size[i - 1]
    return size

def solve(f, size):
    Mod = 10
    f0 = 0
    f1 = 1
    ans = []
    if f % 10 == 0:
        ans.append(0)
    elif f % 10 == 1:
        ans.append(1)
    for i in range(2, size[1]):
        f1, f0 = (f0 + f1) % 10, f1
        if f1 == f % 10:
            ans.append(i)
    for i in range(2, 14):
        Mod = Mod * 10
        for x in ans:
            if x + size[i - 1] < size[i]:
                ans.append(x + size[i - 1])
        temp = []
        for x in ans:
            if fib(x, Mod) == f % Mod:
                temp.append(x)
        ans = copy.deepcopy(temp)
    return min(ans) if len(ans) > 0 else -1

if __name__ == "__main__":
    size = count_cycle()
    print solve(int(raw_input()), size)
