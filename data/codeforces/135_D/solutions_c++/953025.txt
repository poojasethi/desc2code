#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <ctime>
#include <algorithm>
#include <cstring>
#include <string>
#include <cmath>
#include <set>
#include <map>
#include <vector>
using namespace std;

typedef long long ll;

#define forab(i, a, b) for(int i = (a); i < (b); ++i)
#define forn(i, n) forab(i, 0, (n))

const int maxn = 1010;

const int dx[] = { 1, 1, 1, 0, 0,-1,-1,-1};
const int dy[] = { 1, 0,-1, 1,-1, 1, 0,-1};

int n, m;
char a[maxn][maxn];
int use[maxn][maxn];
int t = 0;
int ans = 0, cur;
int stx[maxn * maxn];
int sty[maxn * maxn];
bool good;
int kol;

void dfs(int i, int j) {
	use[i][j] = t;
	int x, y;
	forn(z, 8) {
		x = i + dx[z], y = j + dy[z];
		if (a[x][y] == '1') {
			if (use[x][y] < t) {
				use[x][y] = t;
				stx[cur] = x, sty[cur] = y;
				cur++;
			}
			continue;
		}
		if (a[x][y] == '0') {
			if (use[x][y] == 0) dfs(x, y);
			continue;
		}
		good = 0;
	}
}

void dfs2(int i, int j) {
	use[i][j] = t;
	if (a[i + 1][j] == '1' && (use[i + 1][j] == t - 1)) dfs2(i + 1, j);
	if (a[i - 1][j] == '1' && (use[i - 1][j] == t - 1)) dfs2(i - 1, j);
	if (a[i][j + 1] == '1' && (use[i][j + 1] == t - 1)) dfs2(i, j + 1);
	if (a[i][j - 1] == '1' && (use[i][j - 1] == t - 1)) dfs2(i, j - 1);
}

int main() {
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	memset(a, '#', sizeof(a));
	memset(use, 0, sizeof(use));
	scanf("%d%d ", &n, &m);
	forab(i, 1, n + 1)
		forab(j, 1, m + 1) scanf("%c ", &a[i][j]);
	forab(i, 1, n)
		forab(j, 1, m)
			if (a[i][j] == '1' && a[i + 1][j] == '1' && a[i][j + 1] == '1' && a[i + 1][j + 1] == '1') ans = 4;
	forab(i, 1, n + 1)
		forab(j, 1, m + 1)
			if (a[i][j] == '0' && use[i][j] == 0) {
				good = 1;
				cur = 0;
				t++;
				dfs(i, j);
				if ((!good) || ans >= cur) continue;
				t++;
				dfs2(stx[0], sty[0]);
				forn(q, cur) {
					if (use[stx[q]][sty[q]] < t) {
						good = 0;
						break;
					}
					kol = 0;
					if (use[stx[q] + 1][sty[q]] == t) kol++;
					if (use[stx[q] - 1][sty[q]] == t) kol++;
					if (use[stx[q]][sty[q] + 1] == t) kol++;
					if (use[stx[q]][sty[q] - 1] == t) kol++;
					if (kol != 2) {
						good = 0;
						break;
					}
				}
				if (good) ans = cur;
			}
	printf("%d\n", ans);
	return 0;
}
