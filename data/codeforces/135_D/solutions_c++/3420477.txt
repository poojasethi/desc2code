#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <valarray>
#include <vector>

#define EPS 1e-9
#define INF 1070000000LL
#define MOD 1000000007LL
#define fir first
#define foreach(it,X) for(__typeof((X).begin()) it=(X).begin();it!=(X).end();it++)
#define ite iterator
#define mp make_pair
#define rep(i,n) rep2(i,0,n)
#define rep2(i,m,n) for(int i=m;i<(n);i++)
#define pb push_back
#define sec second
#define sz(x) ((int)x.size())

using namespace std;

struct timer{
	time_t start;
	timer(){start=clock();}
	~timer(){cerr<<1.*(clock()-start)/CLOCKS_PER_SEC<<" secs"<<endl;}
};

typedef istringstream iss;
typedef long long ll;
typedef pair<int,int> pi;
typedef stringstream sst;
typedef vector<int> vi;

int n,m;
char c[1010][1010];
int mark[1010][1010],mark2[1010][1010];
int cur;
int fail;

vector<pi> one;

int dy[]={0,1,0,-1};
int dx[]={1,0,-1,0};

void dfs(int y,int x){
	mark[y][x]=cur;
	if(c[y][x]=='1'){
		one.pb(mp(y,x));
		return;
	}
	rep2(dy,-1,2)rep2(dx,-1,2){
		int ny=y+dy,nx=x+dx;
		if(c[ny][nx]){
			if(mark[ny][nx]!=cur)dfs(ny,nx);
		}else fail=1;
	}
}

int dfs2(int y,int x){
	int res=1;
	mark2[y][x]=cur;
	rep(i,4){
		int ny=y+dy[i],nx=x+dx[i];
		if(c[ny][nx]=='1' && mark[ny][nx]==cur){
			if(mark2[ny][nx]!=cur)res+=dfs2(ny,nx);
		}
	}
	return res;
}

int main(){
	cin.tie(0);
	ios_base::sync_with_stdio(0);
	
	cin>>n>>m;
	n+=2,m+=2;
	rep2(i,1,n-1)cin>>c[i]+1;
	
	int ans=0;
	rep(i,n)rep(j,m){
		if(c[i][j]=='1' && c[i][j+1]=='1' && c[i+1][j]=='1' && c[i+1][j+1]=='1')ans=4;
	}
	
	memset(mark,-1,sizeof(mark));
	rep(i,n)rep(j,m)if(c[i][j]=='0' && mark[i][j]==-1){
		cur++;
		one.clear();
		fail=0;
		dfs(i,j);
		if(fail || sz(one)<=ans)continue;
		if(dfs2(one[0].fir,one[0].sec)!=sz(one))continue;
		rep(i,sz(one)){
			int adj=0;
			rep(j,4){
				int ny=one[i].fir+dy[j],nx=one[i].sec+dx[j];
				adj+=c[ny][nx]=='1' && mark[ny][nx]==cur;
			}
			if(adj!=2){
				fail=1;
				break;
			}
		}
		if(fail)continue;
		ans=sz(one);
	}
	
	cout<<ans;
}
