#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

struct point
{
	int x, y;
};

const int maxn = 1010, maxm = 1010, dx[] = {0, 0, 1, -1, -1, -1, 1, 1}, dy[] = {1, -1, 0, 0, -1, 1, -1, 1};
int n, m, top, vis[maxn][maxm], qx[maxn * maxm], qy[maxn * maxm], v[maxn][maxm];
char map[maxn][maxm];

inline bool rang(int x, int y)
{
	return 0 <= x && x < n && 0 <= y && y < m;
}

void dfs(int x, int y, int c)
{
	//printf("%d %d %d\n", x, y, c);
	vis[x][y] = c;
	qx[top] = x, qy[top++] = y;
	for (int i = 0; i < 8; i++)
	{
		int ix = x + dx[i], iy = y + dy[i];
		if (rang(ix, iy) && map[ix][iy] == '0' && vis[ix][iy] != c)
			dfs(ix, iy, c);
	}
}

inline int check(int c)
{
	int sum = 0;
	point s;
	for (int h = 0; h < top; h++)
	{
		int i = qx[h], j = qy[h];
		for (int k = 0; k < 8; k++)
                {
			int ix = i + dx[k], iy = j + dy[k];
			if (!rang(ix, iy)) return 0;
			if (vis[ix][iy] != c)
                        {
				vis[ix][iy] = c;
				sum++;
				s.x = ix, s.y = iy;
			}
		}
	}
	queue<point> Q;
	Q.push(s);
	v[s.x][s.y] = c;
	int sv = 0;
	while (!Q.empty())
	{
		s = Q.front();
		int ss = 0;
		sv++;
		for (int i = 0; i < 4; i++)
		{
			point t;
			t.x = s.x + dx[i], t.y = s.y + dy[i];
			if (rang(t.x, t.y) && map[t.x][t.y] == '1' && vis[t.x][t.y] == c)
			{
				ss++;
				if (v[t.x][t.y] != c)
				{
					v[t.x][t.y] = c;
					Q.push(t);
				}
			}
		}
		if (ss != 2)
		        return 0;
		Q.pop();
	}
	if (sv != sum)
	        return 0;
	return sum;
}

int main()
{
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++)
	        scanf("%s", map[i]);
	int ans = 0;
	for (int i = 0; i < n - 1; i++)
		for (int j = 0; j < m - 1; j++)
                	if (map[i][j] == '1' && map[i + 1][j] == '1' && map[i][j + 1] == '1' && map[i + 1][j + 1] == '1')
				ans = 4;
	memset(vis, 0, sizeof(vis));
	memset(v, 0, sizeof(v));
	int tot = 0;
	for (int i = 0; i < n; i++)
	        for (int j = 0; j < m; j++)
	                if (!vis[i][j] && map[i][j] == '0')
	                {
				top = 0;
				dfs(i, j, ++tot);
				ans = max(ans, check(tot));
                        }
	printf("%d\n", ans);

	return 0;
}
