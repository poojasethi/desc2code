//In the name of God
#include <iostream>
using namespace std;

typedef pair<int, int> pii;
const int N = 1000 + 10;

int n, m, mark[N][N], amt[N * N], cnt, ans, found[N * N];
pii root[N * N], mv[] = {pii(-1, 0), pii(0, -1), pii(1, 0), pii(0, 1)};
bool ex[N][N], flag;

void dfs(int y, int x) {
	mark[y][x] = cnt;
	for (int i = -1; i <= 1; i++)
		for (int j = -1; j <= 1; j++)
			if (i || j) {
				int a = y + i, b = x + j;
				if (0 <= a && a < n && 0 <= b && b < m) {
					if (mark[a][b] != cnt) {
						mark[a][b] = cnt;
						if (ex[a][b]) {
							root[cnt] = pii(a, b);
							amt[cnt]++;
						}
						else
							dfs(a, b);
					}
				}
				else
					flag = true;

			}
}
void dfs2(int y, int x) {
	found[cnt]++;
	mark[y][x] = -cnt;
	int adj = 0;
	for (int i = 0; i < 4; i++) {
		int a = y + mv[i].first, b = x + mv[i].second;
		if (0 <= a && a < n && 0 <= b && b < m && ex[a][b]) {
			if (mark[a][b] == cnt)
				dfs2(a, b);
			if (mark[a][b] == -cnt)
				adj++;
		}
	}
	flag = flag || adj != 2;
}

int main() {
	cin.sync_with_stdio(false);
	cin >> n >> m;
	fill(root, root + N, pii(-1, -1));
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++) {
			char c; cin >> c;
			ex[i][j] = c - '0';
			if (i && j && ex[i - 1][j - 1] && ex[i][j - 1] && ex[i - 1][j] && ex[i][j])
				ans = 4;
		}
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (!mark[i][j] && !ex[i][j]) {
//				cerr << i + 1 << ' ' << j + 1 << ": ";
				flag = false;
				cnt++;
				dfs(i, j);
//				cerr << root[cnt].first << ' ' << root[cnt].second << '\n';
				if (root[cnt].first != -1)
					dfs2(root[cnt].first, root[cnt].second);
//				cerr << flag << ' ' << found[cnt] << ' ' << amt[cnt] << '\n';
				if (!flag && found[cnt] == amt[cnt])
					ans = max(ans, amt[cnt]);
			}
	cout << ans << '\n';
	return 0;
}
