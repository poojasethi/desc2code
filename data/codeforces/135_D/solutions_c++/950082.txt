#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int w[8][2] = { {0,1}, {0,-1}, {1,0}, {-1,0}, 
		      {1,1}, {-1,-1}, {1,-1}, {-1,1}  };
const int MAXN = 1010;
const int MAXM = 1000010;

char g[MAXN][MAXN];
int vis[MAXN][MAXN];
int n, m;

int lab;
int ans;

inline int INS(int x, int y)
{
  return 0 <= x && x < n && 0 <= y && y < m;
}

inline int ab(int x)
{
  return x < 0 ? -x : x;
}

void bfs(int x, int y, int &ox, int &oy, int &one_tot)
{
  static int que[MAXM][2];

  one_tot = 0;
  ++lab;
  vis[x][y] = lab;
  que[0][0] = x;
  que[0][1] = y;
  for (int xx, yy, st = 0, ed = 1; st < ed; ++st) {
    x = que[st][0];
    y = que[st][1];
    
    for (int l = 0; l < 8; ++l) {
      xx = x + w[l][0];
      yy = y + w[l][1];
      if (!INS(xx, yy)) { ox = -1; oy = -1; return; }
      if (g[xx][yy] == '0' || vis[xx][yy] == lab) continue;
      vis[xx][yy] = lab;
      ox = xx;
      oy = yy;
      ++one_tot;
    }

    for (int l = 0; l < 8; ++l) {
      xx = x + w[l][0];
      yy = y + w[l][1];
      if (!INS(xx, yy) || g[xx][yy] == '1' || vis[xx][yy] == lab) continue;
      vis[xx][yy] = lab;
      que[ed][0] = xx;
      que[ed][1] = yy;
      ++ed;
    }
  }
}

int dfs(int x, int y)
{
  vis[x][y] = -vis[x][y];
  int xx, yy, ti = 0;

  for (int l = 0; l < 4; ++l) {
    xx = x + w[l][0];
    yy = y + w[l][1];
    if (INS(xx, yy) && g[xx][yy] == '1' && ab(vis[xx][yy]) == lab) ++ti;
  }
  if (ti != 2) return 0;

  for (int cur, l = 0; l < 4; ++l) {
    xx = x + w[l][0];
    yy = y + w[l][1];
    if (!INS(xx, yy) || g[xx][yy] != '1' || vis[xx][yy] != lab) continue;
    if ((cur = dfs(xx, yy)) == 0) return 0;
    return cur + 1;
  }
  return 1;
}

void extra_cal()
{
  for (int i = 1; i < n; ++i)
    for (int j = 1; j < m; ++j) {

      int flag = 1;
      for (int l = 0; l < 2; ++l)
	for (int k = 0; k < 2; ++k) 
	  if (g[i-l][j-k] == '0') flag = 0;

      if (flag) { ans = 4; return; }
    }
}

void cal(int x, int y)
{
  int xx = -1, yy = -1, one_tot;
  bfs(x, y, xx, yy, one_tot);
  
  if (xx > -1 && yy > -1 && one_tot == dfs(xx, yy)) 
    ans = max(ans, one_tot);
}

void solve()
{
  ans = 0;
  lab = 0;
  
  memset(vis, 0, sizeof(vis));
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j)
      if (g[i][j] == '0' && !vis[i][j]) cal(i, j);

  if (ans < 4) extra_cal();

  printf("%d\n", ans);
}

int main()
{
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; ++i) scanf("%s", g[i]);
  solve();
  return 0;
}
