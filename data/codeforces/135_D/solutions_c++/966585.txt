#include <cstdio>
#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
typedef pair<int,int> P;
const int MAX = 1003;
const int dir[8][2] = {{0,1}, {0,-1}, {-1,0}, {1,0}, {1,-1}, {-1,1}, {1,1}, {-1,-1}};
char s[MAX][MAX];
int m, n, mat[MAX][MAX], times, r;
bool mark[MAX][MAX], used[MAX][MAX], borde;
vector<P> tem;
bool check(int i, int j){
    return i >=0 && j >=0 && i < m && j < n;
}
void dfs(int i,int j){
    mark[i][j] = true;
    if(i == 0 || j == 0 || i == m - 1 || j == n - 1) borde = true;
    for( int k = 0, x, y; k < 8; k++){
        x = i + dir[k][0]; y = j + dir[k][1];
        if(!check(x,y)) continue;
        if(check(x, y) && s[x][y] == '1'&& mat[x][y] != times)
               tem.push_back(P(x,y)), mat[x][y] = times, used[x][y] = false;
        if(!mark[x][y] && s[x][y] == '0') dfs(x,y);
    }
}
void find(){
     int N = tem.size(), ant = 0, c, x, y , X, Y;
     P next = tem[0];
     while(ant < N){
           c = 0;
           X = Y = -1;
           used[next.first][next.second] = true;
           for( int j = 0; j < 4; j++){
               x = next.first + dir[j][0], y = next.second + dir[j][1];
               if(!check(x,y)) continue;
               if(mat[x][y] == times ){
                   c++;
                   if(!used[x][y]) X = x, Y = y;
               }
           }
           if( c != 2) return;
           ant++;
           if(X == Y && X == -1 ) break;
           next = P(X,Y);
     }
     if(ant == N) r = max( r, N);
}
int main() {
    scanf("%d%d", &m, &n);
    times = r = 0;
    int tmp = 0;
    memset(mark, 0, sizeof(mark));
    memset(used, 0, sizeof(used));
    for( int i = 0; i < m; i++ ) scanf("%s", s[i]);
    for( int i = 0; i < m; i++ ){
        for( int j = 0; j < n; j++){
            if(s[i][j] == '1' && s[i][j +1] == '1' && s[i+1][j] == '1' && s[i+1][j+1] == '1') tmp = 4;
            if(s[i][j] == '0' && ! mark[i][j]){
                borde = false;  tem.clear(); times ++;
                dfs(i,j);
                if( !borde )find();
            }
        }
    }
    printf("%d\n", max(r,tmp));

    return 0;
}
