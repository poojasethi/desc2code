#include<algorithm>
#include<cstring>
#include<cstdio>
#include<vector>
#include<queue>
#include<set>
#include<map>
using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

#define FOR(x,y,z) for(int x=y;x<=z;++x)
#define FORD(x,y,z) for(int x=y;x>=z;--x)
#define FOReach(x,Z) for(__typeof((Z).begin()) x=(Z).begin();x!=(Z).end();++x)
#define REP(x,y) for(int x=0;x<y;++x)

#define PB push_back
#define ALL(X) (X).begin(),(X).end()
#define SZ(X) ((int)(X).size())
#define CLR(X,x) memset(X, x, sizeof(X))

#define MP make_pair
#define ST first
#define ND second

#define DBG

#ifdef DBG
#define debug printf
#else
#define debug(fmt, ...)
#endif


const int MAX = 1000;
const int INF = 1000000001;

char tab[MAX][MAX+1];
int vis[MAX][MAX];

int n, m;

#define ok(x, y) (0 <= x && x < n && 0 <= y && y < m)

int dfs(int x, int y) {
	vis[x][y] = 0;
	int s = 1;
	FOR(i,x-1,x+1)
		FOR(j,y-1,y+1)
			if(ok(i, j) && vis[i][j] == 1 && abs(x-i) + abs(y-j) == 1) {
				s += dfs(i, j);
				return s;
			}
	return s;
}

int solve(int x, int y) {
	queue<PII> Q;
	Q.push(MP(x, y));
	vis[x][y] = -1;
	VPII V;
	bool z = false;
	while(!Q.empty())
	{
		PII p = Q.front();
		Q.pop();
		FOR(i,p.ST-1,p.ST+1)
			FOR(j,p.ND-1,p.ND+1)
				if(ok(i, j) && !vis[i][j]) {
					if(tab[i][j] == '0') {
						Q.push(MP(i, j));
						vis[i][j] = -1;
					}
					else {
						V.PB(MP(i, j));
						vis[i][j] = 1;
					}
				}
				else if(!ok(i, j))
					z = true;
	}
	if(V.empty())
		return 0;
	FOReach(pos,V)
	{
		int nb = 0;
		FOR(i,pos->ST-1,pos->ST+1)
			FOR(j,pos->ND-1,pos->ND+1)
				if(ok(i, j) && abs(pos->ST-i) + abs(pos->ND-j) == 1 && vis[i][j] == 1)
					++nb;
		if(nb != 2)
			z = true;
	}
	int s = dfs(V[0].ST, V[0].ND);
	FOReach(it,V)
		vis[it->ST][it->ND] = 0;
	if(!z && s == V.size())
		return s;
	return 0;
}

int main(int argc, char *argv[]) {
	scanf("%d %d", &n, &m);
	REP(i,n)
		scanf("%s", tab[i]);
	int res = 0;
	REP(i,n-1)
		REP(j,m-1)
			if(tab[i][j] == '1' && tab[i][j+1] == '1' && tab[i+1][j] == '1' && tab[i+1][j+1] == '1')
				res = 4;
	REP(i,n)
		REP(j,m)
			if(tab[i][j] == '0' && !vis[i][j])
				res = max(res, solve(i, j));
	printf("%d\n", res);
	return 0;
}

