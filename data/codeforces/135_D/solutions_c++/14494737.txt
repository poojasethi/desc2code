#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<string>
#include<map>
#include<utility>
#include<vector>
#include<algorithm>
#include<cmath>
#include<stack>
#include<queue>

#define LL long long
#define ii pair<int,int>
#define PB push_back
#define MP make_pair
using namespace std;
int n,m;
char ar[1010][1010];
int dx[]={-1,1,0,0,-1,-1,1,1};
int dy[]={0,0,-1,1,-1,1,-1,1};
int f[1010][1010];
int ans;
int z;
map<ii,bool> mp;
int F[1010][1010];
int k = 1;
void dfs(int x,int y,int &v,char &c){
	f[x][y] = v;
	if(c=='0')
	for(int i=0;i<8;i++){
		int xx,yy;
		xx = x+dx[i];
		yy = y+dy[i];
		if(xx<0 || xx>=n || yy<0 || yy>=m)	z=-2;
		if(ar[xx][yy]==c)	continue;
		if(z==-1 || z==f[xx][yy]){
			z = f[xx][yy];
			mp[MP(xx,yy)]=1;
			F[xx][yy] = v;	
		}else{
			z = -2;
		}
	for(int i=0;i<8;i++){
		int xx,yy;
		xx = x+dx[i];
		yy = y+dy[i];
		if(xx<0 || xx>=n || yy<0 || yy>=m)	continue;
		if(ar[xx][yy]!=c)	continue;
		if(f[xx][yy]!=-1)	continue;
		dfs(xx,yy,v,c);
	}
	}
	else
	for(int i=0;i<4;i++){
		int xx,yy;
		xx = x+dx[i];
		yy = y+dy[i];
		if(xx<0 || xx>=n || yy<0 || yy>=m)	continue;
		if(ar[xx][yy]!=c)	continue;
		if(f[xx][yy]!=-1)	continue;
		dfs(xx,yy,v,c);
	}
}
void cek(){
	for(map<ii,bool>::iterator it = mp.begin();it!=mp.end();it++){
		int x = it->first.first;
		int y = it->first.second;
		int c = 0;
		int xx,yy;
		for(int i=0;i<4;i++){
			int xx,yy;
			xx = x+dx[i];
			yy = y+dy[i];
			if(xx<0 || xx>=n || yy<0 || yy>=m)	continue;
			if(F[xx][yy]==k)	c++;
		}
		if(c!=2)	z = -2;
	}
}
int main(){
	memset(f,-1,sizeof(f));
	memset(F,-1,sizeof(F));
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;i++){
		scanf("%s",ar[i]);
	}
	ans = 0;
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(ar[i][j]=='1' && f[i][j]==-1)	dfs(i,j,k,ar[i][j]);
			k++;
		}
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(ar[i][j]=='0' && f[i][j]==-1){
				mp.clear();
				z = -1;
				dfs(i,j,k,ar[i][j]);
				cek();
				
				if(z>=0)	ans = max(ans,(int)mp.size());
				k++;
			}
		}
	}
	for(int i=0;i<n-1;i++)
		for(int j=0;j<m-1;j++){
			if(ar[i][j]=='1' && ar[i+1][j+1] == '1' && ar[i][j+1]=='1' && ar[i+1][j]=='1')	ans = max(ans,4);
		}
	
	printf("%d\n",ans);
	return 0;
}