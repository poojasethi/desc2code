#include<cstdio>
#include<set>
#include<algorithm>

using namespace std;

struct Crystal{
	int x,y;
	bool operator < (const Crystal & a) const{
		if(a.x==x)	return a.y<y;
		else	return a.x<x;
	}
	bool operator ==(const Crystal & a) const{
		return a.x==x&&a.y==y;
	}
	Crystal operator + (const Crystal & a) const{
		Crystal ret;
		ret.x=x+a.x;
		ret.y=y+a.y;
		return ret;
	}
	Crystal operator - (const Crystal & a) const{
		Crystal ret;
		ret.x=x-a.x;
		ret.y=y-a.y;
		return ret;
	}
}pt[200002];
set<Crystal>	ans;
int n,k;	
int main(){
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	scanf("%d%d",&n,&k);
	for(int i=0;i<n;i++){
		scanf("%d %d",&pt[i].x,&pt[i].y);
	}
	if(n<=k)	printf("-1\n");
	else{
		sort(pt,pt+n);
		for(int i=0;i<=k;i++){
			for(int j=0;j<=k;j++){
				Crystal mid=pt[i]+pt[n-1-j];
				int melt=0;
				for(int head=0,tail=n-1;head<n&&melt<=k;++head){
					Crystal key=mid-pt[head];
					while(tail>=0&&key<pt[tail])	tail--;
					if(tail>=0&&key==pt[tail])	tail--;
					else melt++;
				}
				if(melt<=k)	ans.insert(mid);
			}
		}
		printf("%d\n",ans.size());
		for(set<Crystal>::iterator it=ans.begin();it!=ans.end();it++){
			printf("%.1lf %.1lf\n",it->x/2.0,it->y/2.0);
		}
	}
	return 0;
}
	 			  		      		 		 	 	 			 	