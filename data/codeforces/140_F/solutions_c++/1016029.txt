#include <stdio.h>
#include <algorithm>
#include <set>
using namespace std;

const int N = 200005;

struct point {
  int x, y;
};

bool operator<(const point &a, const point &b) {
  return a.x < b.x || a.x == b.x && a.y < b.y;
}

int n, k;
point ps[N];

int solve(point c) {
  int i, j, miss = 0;
  i = 0;
  j = n - 1;
  while (i <= j) {
    point d;
    d.x = ps[i].x + ps[j].x;
    d.y = ps[i].y + ps[j].y;
    if (d.x == c.x && d.y == c.y) {
      i++;
      j--;
    } else if (d < c) {
      i++;
      miss++;
    } else {
      j--;
      miss++;
    }
    if (miss > k) return 0;
  }
  return 1;
}

int main() {
  scanf("%d %d", &n, &k);
  for (int i = 0; i < n; i++) {
    scanf("%d %d", &ps[i].x, &ps[i].y);
    ps[i].x *= 2;
    ps[i].y *= 2;
  }
  if (n <= k) {
    puts("-1");
    return 0;
  }

  set<point> ans;
  sort(ps, ps + n);
  for (int i = 0; i <= k; i++)
    for (int j = n - 1; j >= n - k - 1 && j >= i; j--) {
      point c;
      c.x = ps[i].x + ps[j].x;
      c.y = ps[i].y + ps[j].y;
      if (solve(c))
        ans.insert(c);
    }
  printf("%d\n", ans.size());
  for (set<point>::iterator it = ans.begin(); it != ans.end(); it++)
    printf("%.1lf %.1lf\n", it->x / 4.0, it->y / 4.0);
  return 0;
}
