#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>

using namespace std;

enum {MAXN = 200010};
struct pt
{
  int x,y;
  void scan()
  {
    scanf("%d%d",&x,&y);
  }
} d[MAXN];

struct cmpx
{
  bool operator () (const pt &a,const pt &b)
  {
    return a.x < b.x || (a.x == b.x && a.y < b.y);
  }
};

int Px,Py;
bool search(int l,int r,int m)//[l,r] to be checked
{
  for(;l <= r && Px == d[l].x + d[r].x && Py == d[l].y + d[r].y;++l,--r);
  if (l > r) return true;
  else
    {
      if (m == 0) return false;
      else
	{
	  return search(l + 1,r,m - 1) || search(l,r - 1,m - 1);
	}
    }
}

pair<int,int> ans[MAXN];

int main()
{
  int n,m;
  scanf("%d%d",&n,&m);
  for(int i = 0;i < n;i++) d[i].scan();

  if (n <= m) puts("-1");
  else
    {
      sort(d,d + n,cmpx());

      int cans = 0;
      for(int i = 0;i < n && i <= m;i++)
	  for(int j = n - 1;j >= i && i + n - 1 - j <= m;j--)
	    {
	      Px = d[i].x + d[j].x;
	      Py = d[i].y + d[j].y;
	      if (search(i + 1,j - 1,m - (i + n - 1 - j)))
		ans[cans++] = make_pair(Px,Py);
	    }

      sort(ans,ans + cans);
      cans = unique(ans,ans + cans) - ans;
      
      printf("%d\n",cans);
      for(int i = 0;i < cans;i++) printf("%.1f %.1f\n",ans[i].first / 2.0,ans[i].second / 2.0);
    }
  return 0;
}
