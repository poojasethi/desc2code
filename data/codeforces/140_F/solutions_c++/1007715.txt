#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long LL;
const int N = 200005;
class Point{
	public:
	LL x, y;
} p[N];
int n, k;
bool operator<(const Point &x, const Point &y) {
	return x.x < y.x || (x.x==y.x && x.y < y.y);
}
pair<LL, LL> ans[10005];
int na=0;

bool cmpless(LL xa, LL ya, LL xb, LL yb) {
	return xa < xb || (xa==xb && ya<yb);
}

void calc(int L, int R) {
	if (L>R) return;
	LL xx = (p[L].x + p[R].x)/2;
	LL yy = (p[L].y + p[R].y)/2;
	int cnt=0;
	for(int i=0, j=R;i<n && cnt<=k;i++) {
		if(i<L || i>R) { ++cnt; continue; }
		while(j>=0 && cmpless(2*xx-p[i].x, 2*yy-p[i].y, p[j].x, p[j].y)) --j;
		if(j>=L && 2*xx-p[i].x==p[j].x && 2*yy-p[i].y==p[j].y) {
		} else ++cnt;
	}
	if(cnt<=k) {
		ans[na++] = make_pair(xx, yy);
	}
}

void solve() {
	sort(p, p+n);
	if(k>=n) {puts("-1"); return;}
	for(int i=0;i<=k && i<n;i++)
		for(int j=n-k-1;j<n;j++)
			calc(i, j);
	sort(ans, ans+na);
	na = unique(ans, ans+na)-ans;
	printf("%d\n", na);
	for(int i=0;i<na;i++)
		printf("%.2f %.2f\n", (double)ans[i].first/2.0, (double)ans[i].second/2.0);
}

int main(void) {
	scanf("%d%d", &n, &k);
	for(int i=0;i<n;i++) {
		scanf("%I64d%I64d", &p[i].x, &p[i].y);
		p[i].x*=2;
		p[i].y*=2;
	}
	solve();
	return 0;
}
