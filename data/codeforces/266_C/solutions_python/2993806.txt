#! /Library/Frameworks/Python.framework/Versions/2.6/bin/python

import sys

class spareMatrix:
	"""custom implementation of a sparse matrix"""
	def __init__(self, N):
		self.N = N
		self.rowAdjSet = [set() for i in range(N)]
		self.colAdjSet = [set() for j in range(N)]

	def setEntry(self,i,j):
		self.rowAdjSet[i].add(j);
		self.colAdjSet[j].add(i);

	def rowEntryCount(self,i):
		return len(self.rowAdjSet[i])

	def colEntryCount(self,j):
		return len(self.colAdjSet[j])

	def colEntryCountUpTo(self,j,n):
		returnCount = 0
		for i in self.colAdjSet[j]:
			if (i < n):
				returnCount += 1
		return returnCount

	def swapRows(self,i1,i2):

		for j in self.rowAdjSet[i1]:
			self.colAdjSet[j].remove(i1)
		for j in self.rowAdjSet[i2]:
			self.colAdjSet[j].remove(i2)

		tempAdjSet = self.rowAdjSet[i1]
		self.rowAdjSet[i1] = self.rowAdjSet[i2]
		self.rowAdjSet[i2] = tempAdjSet

		for j in self.rowAdjSet[i1]:
			self.colAdjSet[j].add(i1)
		for j in self.rowAdjSet[i2]:
			self.colAdjSet[j].add(i2)

	def swapCols(self,j1,j2):

		for i in self.colAdjSet[j1]:
			self.rowAdjSet[i].remove(j1)
		for i in self.colAdjSet[j2]:
			self.rowAdjSet[i].remove(j2)

		tempAdjSet = self.colAdjSet[j1]
		self.colAdjSet[j1] = self.colAdjSet[j2]
		self.colAdjSet[j2] = tempAdjSet

		for i in self.colAdjSet[j1]:
			self.rowAdjSet[i].add(j1)
		for i in self.colAdjSet[j2]:
			self.rowAdjSet[i].add(j2)

def adjustMatrix(matrix,n,actionBank):
	if (n == 1):
		return

	t = "2 "
	# findFirstEmptyCol
	emptyColInd = n-1
	while (matrix.colEntryCountUpTo(emptyColInd,n) != 0):
		emptyColInd -= 1

	if (emptyColInd < (n-1)):
		actionBank += [t + str(emptyColInd+1) + " " + str(n)]
		matrix.swapCols(emptyColInd,n-1)
		
	t = "1 "
	# findFirstNonemptyRow
	nonEmptyRowInd = n-1
	while ((matrix.rowEntryCount(nonEmptyRowInd) == 0) & (nonEmptyRowInd > -1)):
		nonEmptyRowInd -= 1

	if (nonEmptyRowInd == -1):
		return

	if (nonEmptyRowInd < (n-1)):
		actionBank += [t + str(nonEmptyRowInd+1) + " " + str(n)]
		matrix.swapRows(nonEmptyRowInd,n-1)
		
	adjustMatrix(matrix,n-1,actionBank)

# main code of the program
actionBank = []
matrix = spareMatrix(int(raw_input()))
for n in range(matrix.N-1):
	inpPt = raw_input().split()
	i = int(inpPt[0]) - 1
	j = int(inpPt[1]) - 1
	matrix.setEntry(i,j)

sys.setrecursionlimit(1500)
adjustMatrix(matrix,matrix.N,actionBank)

print len(actionBank)
for m in range(len(actionBank)):
	print actionBank[m]

#
#
# for end of program visibility in a text editor
#
#

#
#
#
#
#