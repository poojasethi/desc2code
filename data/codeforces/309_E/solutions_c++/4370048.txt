#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

int N;
int L[2002], R[2002], P[2002];
bool S[2002][2002];
int first[2002], F[2002];
bool is[2002];

bool Test(int x)
{
    memset(is, 0, sizeof(is));
    memset(first, 0, sizeof(first));

    for (int i = 1; i <= N; ++i) // al i-lea
    {
        int now = 0;
        for (int j = 1; j <= N; ++j)
            if (!is[j] && (now == 0 || R[j] < R[now] || (R[j] == R[now] && L[j] < L[now])))
                now = j;

        memset(F, 0, sizeof(F));
        for (int j = 1; j <= N; ++j)
            if (first[j] != 0 && !is[j]) // waiting
                ++F[first[j] + x - i + 1];

        int totnow = 0, mustnow = 0, limit = 0;
        for (int j = 1; j <= N; ++j)
        {
            totnow += F[j];
            if (totnow > j) return false;
            if (totnow == j)
            {
                mustnow = 1;
                limit = j;
                break;
            }
        }

        if (mustnow)
        {
            now = 0;
            for (int j = 1; j <= N; ++j)
                if (first[j] != 0 && !is[j] && first[j] + x - i + 1 <= limit && (now == 0 || R[j] < R[now]))
                    now = j;
        }

        is[now] = true;

        P[i] = now;
        for (int j = 1; j <= N; ++j)
            if (first[j] == 0 && !is[j] && S[now][j])
                first[j] = i;
    }

    return true;
}

int main()
{
    cin >> N;
    for (int i = 1; i <= N; ++i)
        cin >> L[i] >> R[i];

    for (int i = 1; i <= N; ++i)
        for (int j = 1; j <= N; ++j)
            if (max(L[i], L[j]) <= min(R[i], R[j]))
                S[i][j] = true;

    int step = (1 << 10), result;
    for (result = 0; step; step >>= 1)
        if (result + step <= N && !Test(result + step))
            result += step;
    ++result;

    Test(result);

    for (int i = 1; i <= N; ++i)
        cout << P[i] << ' ';
}
