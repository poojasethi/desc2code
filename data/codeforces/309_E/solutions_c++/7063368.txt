#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;

const int MAXN = 2000 + 10;

bool b[MAXN][MAXN];
int n, a[MAXN], l[MAXN], r[MAXN], CC[MAXN];

typedef pair<int, int> Pii;
#define x first
#define y second
#define mp make_pair
Pii s[MAXN];

bool Overlap(int x, int y)
{
	if ((l[x] <= l[y] && l[y] <= r[x]) || (l[x] <= r[y] && r[y] <= r[x]) ||
		(l[y] <= l[x] && l[x] <= r[y]) || (l[y] <= r[x] && r[x] <= r[y]))
		return true;
	return false;
}
void init()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
		scanf("%d%d", &l[i], &r[i]),
		s[i] = mp(r[i], i);
	for (int i = 1; i <= n; ++i)
		for (int j = i + 1; j <= n; ++j)
			if (Overlap(i, j))
				b[i][j] = b[j][i] = true;
	sort(s + 1, s + n + 1);
}
int lim[MAXN], cnt[MAXN];
bool used[MAXN];
bool Check(int d)
{
	memset(lim, 0, sizeof(lim));
	memset(cnt, 0, sizeof(cnt));
	memset(used, 0, sizeof(used));
	for (int i = 1; i <= n; ++i)
		lim[i] = n;
	cnt[n] = n;
	for (int p = 1; p <= n; ++p)
	{
		int sum = 0;
		for (int i = 1; i <= n; ++i)
		{
			sum += cnt[i];
			if (sum > i) return false;
			if (sum == i && i >= p)
				break;
		}
		int id = 0;
		for (int i = 1; i <= n; ++i)
			if (!used[i] && lim[i] <= sum)
			{
				id = i;
				break;
			}
		--cnt[lim[id]];
		lim[id] = p;
		++cnt[lim[id]];
		a[p] = s[id].y;
		used[id] = true;
		for (int i = 1; i <= n; ++i)
			if (b[s[i].y][s[id].y] && lim[i] > p + d)
				--cnt[lim[i]], lim[i] = p + d, ++cnt[lim[i]];
	}
	memcpy(CC, a, sizeof(a));
	return true;
}
void Find(int l, int r)
{
	while (l <= r)
	{
		int mid = (l + r) >> 1;
		if (Check(mid))
			r = mid - 1;
		else
		l = mid + 1;
	}
	Check(l);
}
void P()
{
	for (int i = 1; i < n; ++i)
		printf("%d ", CC[i]);
	printf("%d\n", CC[n]);
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("wyl8899.in", "r", stdin), freopen("wyl8899.out", "w", stdout);
#endif
	init();
	Find(0, n);
	P();
	fclose(stdin);
	fclose(stdout);
	return 0;
}

