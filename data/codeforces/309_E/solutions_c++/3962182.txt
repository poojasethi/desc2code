#include <iostream>
#include <cstdio>
#include <memory.h>
#include <algorithm>
#define MAX_N 2222

using namespace std;

int l[MAX_N], r[MAX_N], pos[MAX_N], a[MAX_N], o[MAX_N];
bool map[MAX_N][MAX_N];
int n;

int min(int a, int b)
{
    return a < b ? a : b;
}

bool judge(int len)
{
    static int sum[MAX_N], upb[MAX_N];
    static bool state[MAX_N];
    memset(pos, 0, sizeof(pos));
    memset(state, 1, sizeof(state));
    for (int i = 1; i <= n; i++) upb[i] = n;
    for (int i = 1; i <= n; i++)
    {
        int x;
        for (x = 1; x <= n; x++) if (state[x]) break;
        pos[x] = upb[x] = i;
        for (int j = 1; j <= n; j++) if (map[x][j]) upb[j] = min(upb[j], i + len);
        memset(sum, 0, sizeof(sum));
        for (int j = 1; j <= n; j++) sum[upb[j]]++;
        for (int j = 1; j <= n; j++) if ((sum[j] += sum[j - 1]) > j) return 0;
        for (x = i + 1; x <= n; x++) if (sum[x] == x) break;
        for (int j = 1; j <= n; j++) state[j] = (pos[j] == 0 && upb[j] <= x) ;
    }
    return 1;
}

int main()
{
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) scanf("%d%d", &l[i], &r[i]);
    for (int i = 1; i <= n; i++) o[i] = i;
    for (int i = 1; i <= n; i++)
        for (int j = i + 1; j <= n; j++)
            if (r[i] > r[j])
            {
                swap(r[i], r[j]);
                swap(l[i], l[j]);
                swap(o[i], o[j]);
            }
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            map[i][j] = (r[i] >= l[j] && r[j] >= l[i]);
    int le, ri, mid;
    //cout << judge(0) << endl;
    le = 0; ri = n - 1;
    while (le < ri)
    {
        mid = (le + ri) / 2;
        if (judge(mid))
            ri = mid;
        else
            le = mid + 1;
    }
    judge(le);
    //cout << le << endl;
    for (int i = 1; i <= n; i++) a[pos[i]] = i;
    for (int i = 1; i <= n; i++) cout << o[a[i]] << " ";
}
