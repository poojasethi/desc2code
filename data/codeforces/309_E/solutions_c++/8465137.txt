    #include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int N = 2005;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define fd(i , st , en) for (int i = st; i >= en; i--)
#define Me(x , y) memset(x , y , sizeof(x))

struct _two{
    int a , b;
}a[N];

int n;
int ans[N] , need[N] , last[N];

void Init(){
    scanf("%d" , &n); a[0].b = (int)2e9;
    fo (i , 1 , n)
        scanf("%d%d" , &a[i].a , &a[i].b);
}

bool check(int x){
    Me(need , 0); need[n] = n;
    fo (i , 1 , n) last[i] = n;
    fo (i , 1 , n){
        int pos = n;
        fo (j , i , n){
            if (need[j] > j) return 0;
            if (need[j] == j){
                pos = j; break;
            }
        }
        int Min = 0;
        fo (j , 1 , n)
            if (last[j] <= pos && a[j].b < a[Min].b) Min = j;
        ans[i] = Min;
        fo (j , i , last[Min] - 1) need[j]++;
        last[Min] = n + 1;
        fo (j , 1 , n)
            if (a[j].a <= a[Min].b && a[Min].a <= a[j].b && last[j] <= n){
                if (last[j] > i + x){
                    fo (k , i + x , last[j] - 1) need[k]++;
                    last[j] = i + x;
                }
            }
    }
    return 1;
}

void Work(){
    int left = 0 , right = n - 1;
    while (left < right){
        int mid = left + right >> 1;
        if (check(mid))
            right = mid;
        else
            left = mid + 1;
    }
    check(left);
    fo (i , 1 , n){
        if (i != 1) putchar(' ');
        printf("%d" , ans[i]);
    }
    puts("");
    
}

int main(){
    Init();
    Work();
    return 0;
}
