#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<fstream>
#include<map>
#include<ctime>
#include<set>
#include<queue>
#include<cmath>
#include<vector>
#include<bitset>
#include<functional>
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define REP(i,l,r) for((i)=(l);(i)<=(r);++(i))
#define REP2(i,l,r) for((i)=(l);(i)!=(r);++(i))
using namespace std;

typedef long long LL;
typedef double ld;

const int MAX=2000+10;

int n;
pair<int,int> sheep[MAX];
int can[MAX][MAX];

int able[MAX];
int rank[MAX];
int sum[MAX];
int need[MAX];

int check(int len)
{
	int i,j;
	REP(i,1,n)
	{
		rank[i]=0;
		need[i]=n;
		able[i]=1;
	}
	REP(i,1,n)
	{
		int mm=-1;
		REP(j,1,n)
			if(!rank[j] && able[j] && (mm==-1 || sheep[j].y<sheep[mm].y))
				mm=j;
		rank[mm]=i;
		REP(j,1,n)
			if(can[mm][j] && !rank[j])
				need[j]=min(need[j],i+len);
		memset(sum,0,sizeof sum);
		REP(j,1,n)
			if(!rank[j])
				++sum[need[j]];
		REP(j,1,n)
			sum[j]+=sum[j-1];
		REP(j,i+1,n)
			if(j-i<sum[j])
				return 0;
		int from=n+1;
		REP(j,i+1,n)
			if(j-i==sum[j])
			{
				from=j;
				break;
			}
		REP(j,1,n)
			able[j]=( !rank[j] && (need[j]<=from) );
	}
	return 1;
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
	int i,j;
	scanf("%d",&n);
	REP(i,1,n)
		scanf("%d%d",&sheep[i].x,&sheep[i].y);
	REP(i,1,n)
		REP(j,1,n)
			if(sheep[i].y>=sheep[j].x && sheep[i].x<=sheep[j].y)
				can[i][j]=1;
	int left=0,right=n-1;
	while(left<right)
	{
		int mid=(left+right)/2;
		if(check(mid))
			right=mid;
		else left=mid+1;
	}
	check(left);
	REP(i,1,n)
		REP(j,1,n)
			if(rank[j]==i)
				cout<<j<<" ";
	cout<<endl;
	return 0;
}