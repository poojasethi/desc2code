/*
	Time : 0837Z 20141015
	Task : Codeforces 309E
	Tags : Greedy
	Stat : Coding
*/
#include <cstdio>
#include <cstring>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <utility>
#include <queue>
#include <functional>
#include <map>
#include <set>
#include <cmath>
#include <numeric>

#define fi first
#define se second
#define fo(i,a,b) for (int i = a; i <= b; i ++)
#define fd(i,a,b) for (int i = a; i >= b; i --)
#define fe(i,x,y) for (int i = x, y = lnk[i]; i; i = nxt[i], y = lnk[i])
#define mkp make_pair
#define pb push_back
#define Fill(x,y) memset(x,y,sizeof(x))
#define Cpy(x,y) memcpy(x,y,sizeof(x))
#define Bit(x,y) ((((x) >> (y)) & 1))
#define mit map<int,SI>::iterator
#define sit SI::iterator

using namespace std;
 
typedef long long LL;
typedef long double LD;
typedef pair <double, double> PD;
typedef pair <LL, LL> PLI;
typedef pair <PD, int> PDI;
typedef pair <int, int> PI;
typedef pair <int, PI> PII;
typedef pair <PI, PI> PIII;
typedef set <PI> SI;
typedef vector <int> VI;
 
int Read()
{
    char c; while (c = getchar(), (c != '-') && (c < '0' || c > '9'));
    bool neg = (c == '-'); int ret = (neg ? 0 : c - 48);
    while (c = getchar(), c >= '0' && c <= '9') ret = ret * 10 + c - 48;
    return neg ? -ret : ret;
}

const int MAXN = 2005;

int N, l[MAXN], r[MAXN], s[MAXN], ans[MAXN], lim[MAXN];
bool use[MAXN], eff[MAXN], g[MAXN][MAXN];

void init()
{
	scanf("%d", &N);  r[0] = 1 + 1e9;
	fo (i, 1, N) l[i] = Read(), r[i] = Read();
	fo (i, 1, N)
		fo (j, i + 1, N)
			if (l[i] <= r[j] && l[j] <= r[i])
				g[i][j] = g[j][i] = 1;
}

bool Solve(int mid)
{
	fo (i, 1, N) lim[i] = N, use[i] = 1, eff[i] = 1;
	fo (j, 1, N)
	{
		int po = 0;
		fo (i, 1, N) if (eff[i] && r[i] < r[po]) po = i;
		use[po] = 0, ans[j] = po;
		if (j == N) return 1;

		fo (i, 1, N)
			if (use[i] && g[po][i])
				lim[i] = min(lim[i], j + mid);

		fo (i, 0, N) s[i] = 0;
		fo (i, 1, N) s[max(0, lim[i] - j)] += use[i];
		fo (i, 1, N - j) s[i] += s[i - 1];
		fo (i, 0, N - j) if (s[i] > i) return 0;
		int k = N;
		fo (i, 1, N - j)
			if (s[i] == i) { k = i; break; }
		fo (i, 1, N) eff[i] = use[i] & (lim[i] <= j + k);
	}
}

void work()
{
	int l = 1, r = N;
	while (l < r)
	{
		int mid = (l + r) >> 1;
		if (Solve(mid)) r = mid; else l = mid + 1;
	}
	Solve(r);
	fo (i, 1, N) printf("%d%c", ans[i], i < N ? ' ' : '\n');
}

int main()
{
	init();
	work();
	return 0;
}
 
