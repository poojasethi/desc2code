#include <bits/stdc++.h>
#include <cstdio>
typedef long long ll;
using namespace std;
const int maxn = 1e6 + 100;

bool vis[maxn];
int N , M , K , component=0 , d[maxn];
vector< vector<int> > G;
int dfs(int v)
{
  int ret=0;
  for(int i=0; i<G[v].size(); i++)
    {
      if( !vis[G[v][i]] )
	{
	  vis[G[v][i]]=1;
	  ret+=dfs(G[v][i]);
	}
    }
  return ret+1;
}

int main()
{
  ios_base::sync_with_stdio(0); cin.tie(0);
  cin>>N>>M>>K;
  G.resize(N);
  for(int i=0,u,v; i<M; i++)
    {
      cin>>u>>v;
      u-- , v--;
      G[u].push_back(v); G[v].push_back(u);
    }
  for(int i=0; i<N; i++)
    {
      if(vis[i])continue;
      vis[i]=1;
      d[component++]= min(K , dfs(i) );
    }
  int m=0;
  for(int i=0; i<component; i++)m+=d[i];
  m/=2;
  cout<<max( 0 , (K==1)?component-2: component-1 - m) <<endl;
  return 0;
}

  	   	 	 				  								  		 	