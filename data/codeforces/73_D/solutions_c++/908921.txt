#include <iostream>
#include <vector>
using namespace std;

const int MAXn = 1e6;
vector<int> nb[MAXn];
int comp[MAXn], cc;
bool mark[MAXn];

void dfs(int v)
{
	mark[v] = true;
	comp[cc]++;
	for(int i = 0; i < (int)nb[v].size(); i++)
		if(!mark[nb[v][i]])
			dfs(nb[v][i]);
}

int main()
{
	ios::sync_with_stdio(false);
	int n, m, k;
	cin >> n >> m >> k;
	for(int i = 0; i < m; i++)
	{
		int v1, v2;
		cin >> v1 >> v2; v1--; v2--;
		nb[v1].push_back(v2);
		nb[v2].push_back(v1);
	}
	int c1 = 0, c2 = 0;
	for(int i = 0; i < n; i++)
		if(!mark[i])
		{
			dfs(i);
			comp[cc] = min(comp[cc], k);
			if(comp[cc]== 1)
				c1++;
			else
				c2 += comp[cc] - 2;
			cc++;
		}
	if(c1 - 2 <= c2)
		cout << 0 << endl;
	else
		if(k == 1)
			cout << max(0,c1-2) << endl;
		else
			cout << (c1-2-c2+1) / 2 << endl;
	return 0;
}
