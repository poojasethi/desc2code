#include <iostream>
#include <vector>

using namespace std;

const int maxN = 1000000+10;

int n, m, k, sum, cmp;
vector <int> g[maxN];
bool mark[maxN];

int dfs(int v)
{
	mark[v] = 1;
	int cnt = 1;
	for (int i = 0 ; i < (int)g[v].size() ; i++)
	{
		int u = g[v][i];
		if (!mark[u])
			cnt += dfs(u);
	}
	return cnt;
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m >> k;
	for (int i = 1 ; i <= m ; i++)
	{
		int u, v;
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	for (int i = 1 ; i <= n ; i++)
		if (!mark[i])
		{
			sum += min(dfs(i), k);
			cmp++;
		}
	if (k == 1)
		cout << max(0, cmp-2) << endl;
	else
		cout << max(0, cmp-sum/2-1) << endl;
	return 0;
}
