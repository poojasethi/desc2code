#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

#define sz(x) ((int)(x).size())

const int maxn = 1000 * 1000 + 5;
bool used[maxn];
vector <int> A[maxn];

int dfs(int v)
{
	used[v] = 1;
	int cnt = 1;
	for (int i = sz(A[v]) - 1; i >= 0; --i) {
		if (!used[A[v][i]]) {
			cnt += dfs(A[v][i]);
		}
	}
	
	return cnt;
}

int main()
{
	int n, k, m;
	cin >> n >> m >> k;
	for (int i = 0; i < m; ++i) {
		int v, u;
		scanf("%d%d", &v, &u);
		--v, --u;
		A[v].push_back(u);
		A[u].push_back(v);
	}
	
	int cnt = 0;
	int sum = 0;
	for (int i = 0; i < n; ++i) {
		if (!used[i]) {
			++cnt;
			sum += min(dfs(i), k);	
		}
	}
	
	if (k == 1) {
		cout << max(cnt - 2, 0) << '\n';
		return 0;
	}
	
	if (sum / 2 >= cnt - 1) {
		cout << 0;
	}
	else {
		cout << cnt - sum / 2 - 1;
	}
	
	return 0;
}