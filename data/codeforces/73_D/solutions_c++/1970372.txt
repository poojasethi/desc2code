#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int Maxn = 1000 * 1000 + 10;

#define U adj[v][i]

int n, m, k, c, ret;
vector<int> adj[Maxn];
bool mrk[Maxn];
int siz[Maxn];
void dfs(int, int);

int main()
{
	cin >> n >> m >> k;
	for(int i=0; i<m; i++)
	{
		int v, u;
		cin >> v >> u, v--, u--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}

	for(int i=0; i<n; i++)
		if(!mrk[i])
			dfs(i, c++);
	sort(siz, siz+c);
	int d=2, i = c-1;
	for(; i>=0 && siz[i] > 1; i--)
	    d+=min(k, siz[i]) - 2;
    i-=d;
    ret = i/2 + (i!=c-1);
    if(k == 1)
        cout << max(0, c-2) << endl;
    else
        cout << max(0, ret) << endl;
	return 0;
}


void dfs(int v,int c)
{
	mrk[v]++;
	siz[c]++;
	for(int i=0; i<adj[v].size(); i++)
		if(!mrk[U])
			dfs(U, c);
}

