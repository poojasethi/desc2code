#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;

int g[1000005];
int siz[1000005];
int FIND(int x) { return g[x]==x?x:g[x]=FIND(g[x]);}
void UNION(int x, int y) {g[FIND(x)]=FIND(y); }

int main(void) {
	int n, m, k, x, y;
	scanf("%d%d%d", &n, &m, &k);
	for(int i=1;i<=n;i++) g[i]=i;
	for(int i=0;i<m;i++) {
		scanf("%d%d", &x, &y);
		UNION(x, y);
	}
	for(int i=1;i<=n;i++) {
		siz[FIND(i)]++;
	}
	int dsum=0;
	multiset<int> r;
	for(int i=1;i<=n;i++) {
		if(g[i]==i) {
			r.insert(min(k, siz[i]));
			dsum += min(k, siz[i]);
		}
	}
	int ans=0;
	while(dsum < (int)r.size()*2-2) {
		++ans;
		int s1=*r.begin(); r.erase(r.find(s1));
		int s2=*r.begin(); r.erase(r.find(s2));
		dsum -= s1+s2;
		s1=min(k, s1+s2);
		r.insert(s1);
		dsum += s1;
	}
	printf("%d\n", ans);
	return 0;
}

