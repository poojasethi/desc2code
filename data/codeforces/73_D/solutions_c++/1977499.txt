#include<iostream>
#include<vector>
using namespace std;

const int MAX = 1000*1000;

vector<int> adj[MAX+10];
bool mrk[MAX+10];
int com[MAX+10];
int comp;
int n,k,m;

void dfs(int v)
{
	mrk[v] = true;
	com[comp]++;
	for(int i=0; i<(int)adj[v].size(); i++)
		if( !mrk[adj[v][i]] )
			dfs(adj[v][i]);
}

void DFS()
{
	for(int i=0; i<n; i++)
		if( !mrk[i] )
		{
			dfs(i);
			comp++;
		}
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m >> k;
	for(int i=0; i<m; i++)
	{
		int u,v;
		cin >> u >> v;
		u--; v--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	DFS();
	int sumd = 0;
	for(int i=0; i<comp; i++)
		sumd += min( k , com[i] );
	n = comp;
	if( sumd >= 2*(n-1) )
	{
		cout << 0 << endl;
		return 0;
	}
	if( k == 1 )
		cout << 2*(n-1) - sumd << endl;
	else
		cout << ( 2*(n-1) - sumd + 1 ) / 2 << endl;
	return 0;
}


