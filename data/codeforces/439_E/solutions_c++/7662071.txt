#include <iostream>
#include <vector>
#include <stdio.h>

using namespace std;
const int max_n = 1e5, mod = 1e9+7;
vector<int>divs[max_n+1];
long long fac[max_n+1], inv[max_n+1];
long long ans[max_n+1];
int used[max_n+1];
int q;
long long binpow(long long a, long long n) {
    long long b = 1;
    while (n > 0) {
        if (n & 1)
            b = b * a % mod;
        n >>= 1;
        a = a * a % mod;
    }
    return b;
}
long long C_n_m(int n, int m) {
    long long res = fac[n];
    res = res * inv[m] % mod;
    res = res * inv[n-m] % mod;
    return res;
}
long long calc(int n, int f) {
    if (n < f)
        return 0;
    if (n==f)
        return 1;
    if (used[n]==q)
        return ans[n];
    used[n] = q;
    long long res = C_n_m(n-1, f-1);
    for (int i = 0; i < (int)divs[n].size(); i++) {
        res = (res-calc(n / divs[n][i], f)+mod) % mod;
    }
    return ans[n] = res;
}
int main() {
    for (int i = 2; i <= max_n; i++) {
        for (int j = i; j <= max_n; j += i) {
            divs[j].push_back(i);
        }
    }
    fac[0] = 1;
    inv[0] = 1;
    for (int i = 1; i <= max_n; i++) {
        fac[i] = fac[i-1] * i % mod;
        inv[i] = binpow(fac[i], mod-2);
    }
    cin>>q;
    int n, f;
    while (q > 0) {
        scanf("%d%d", &n, &f);
        printf("%I64d\n", calc(n, f));
        q--;
    }
}
