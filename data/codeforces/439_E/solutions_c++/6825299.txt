#include<stdio.h>
#include<algorithm>
#include<cstring>
#include<vector>
#define rep(i, n)	for(int i = 0; i < n; i ++)

using namespace std;

const int N = 1e5 + 10;
const int mod = 1e9 + 7;
long long dp[N], A[N], inv[N];
vector<int> p[N];
int pow_mod(long long x, int bit) {
	long long ret = 1;
	while(bit) {
		if(bit & 1)
			ret = ret * x % mod;
		x = x * x % mod;
		bit >>= 1;
	}
	return ret;
}
void init() {
	A[0] = 1;
	for(int i = 1; i < N; i ++)
		A[i] = A[i - 1] * i % mod;
	inv[N - 1] = pow_mod(A[N - 1], mod - 2);
	for(int i = N - 2; i >= 0; i --)
		inv[i] = inv[i + 1] * (i + 1)% mod;
	for(int i = 2; i < N; i ++) {
		for(int j = i; j < N; j += i) {
			p[j].push_back(i);
		}
	}
}
int C(int n, int m) {
	if(m > n)	return 0;
	return A[n] * inv[m] % mod * inv[n - m] % mod;
}
int _used, used[N];
int dfs(int n, int f) {
	if(n < f)	return 0;
	long long &ret = dp[n];
	if(used[n] == _used)		return ret;
	used[n] = _used;	
	ret = C(n - 1, f - 1);
	int sz = p[n].size();
	rep(i, sz) {
		int v = p[n][i];
		ret -= dfs(n / v, f);
		if(ret < 0)
			ret += mod;
	}
	return ret;
}

int main() {
	int n, f, T;
	init();
	scanf("%d", &T);
	while(T --) {
		-- _used;
		scanf("%d%d", &n, &f);
		printf("%d\n", dfs(n, f));
	}
	return 0;
}


