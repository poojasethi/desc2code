#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
const int Maxn=1e5+5;
const int Mod=1e9+7;
LL jc[Maxn],inv[Maxn];

int di[Maxn][300];
LL getInv(LL a)
{
	int b=Mod-2;
	LL ret=1;
	while(b)
	{
		if(b&1) ret=ret*a%Mod;
		a=a*a%Mod;
		b>>=1;
	}
	return ret;
}

void prework()
{
	jc[0]=1;
	for(int i=1;i<=100000;i++)
	{
		jc[i]=jc[i-1]*i%Mod;
		inv[i]=getInv(jc[i]);
	}
	for(int n=1;n<=100000;n++)
	{
		di[n][++di[n][0]]=n;
		for(int j=n<<1;j<=100000;j+=n)
		  di[j][++di[j][0]]=n;
	}
}

inline LL C(int n,int m)
{
	if(m>n) return 0;
	if(n==m) return 1;
	return jc[n]*inv[m]%Mod*inv[n-m]%Mod;
}

LL ans[Maxn];
int isd[Maxn]; 
int main()
{
	prework();
	int q,n,f;
	scanf("%d",&q);
	while(q--)
	{
		scanf("%d%d",&n,&f);
		for(int i=1;i<=di[n][0];i++)
		  ans[di[n][i]]=0;
		for(int i=1;i<=di[n][0];i++)
		{
			ans[di[n][i]]+=C(di[n][i]-1,f-1);
			int d=n/di[n][i];
			for(int j=2;j<=di[d][0];j++)
			  ans[di[d][j]*di[n][i]]-=ans[di[n][i]];
		}
		ans[n]=(ans[n]%Mod+Mod)%Mod;
		if(f==1)
		{
			if(n==1)
			  puts("1");
			else
			  puts("0");
		}
		else
		  printf("%I64d\n",ans[n]);
	}
	return 0;
}
