#include <cstdio>
#include <vector>

using namespace std;

typedef long long ll;

const ll N = 100010LL, mod = 1000000007LL;
ll q, fact[ N ], rec[ N ], dp[ N ];
vector < ll > d[ N ];

ll step( ll x, ll s )
{
    if ( !s ) return 1LL;
    ll y = step( x, s >> 1 );
    y = y * y % mod;
    if ( s & 1 ) y = y * x % mod;
    return y;
}

ll c( ll n, ll k )
{
    if ( n < k ) return 0;
    return fact[ n ] * rec[ k ] % mod * rec[ n - k ] % mod;
}

int main( )
{
    fact[ 0 ] = rec[ 0 ] = 1;
    for ( ll i = 1; i < N; i++ )
    {
        fact[ i ] = ( fact[ i - 1 ] * i ) % mod;
        rec[ i ] = step( fact[ i ], mod - 2 );
    }
    for ( ll i = 1; i < N; i++ )
        for ( ll j = 2; j * i < N; j++ ) d[ i * j ].push_back( i );
    scanf( "%I64d", &q );
    while ( q-- )
    {
        ll n, f;
        scanf( "%I64d %I64d", &n, &f );
        dp[ n ] = c( n - 1, f - 1 );
        for ( ll i = 0; i < d[ n ].size( ); i++ )        {
            ll k = d[ n ][ i ];
            dp[ k ] = c( k - 1, f - 1 );
            for ( ll j = 0; j < d[ k ].size( ); j++ )
            {
                dp[ k ] -= dp[ d[ k ][ j ] ];
                if ( dp[ k ] < 0 ) dp[ k ] += mod;
            }
            dp[ n ] -= dp[ k ];
            if ( dp[ n ] < 0 ) dp[ n ] += mod;
        }
        printf( "%I64d\n", dp[ n ] );
    }
    return 0;
}
