#include <iostream>
#include <set>
#include <cctype>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <string>
#include <map>
#include <ctime>
using namespace std;

const int N=100100;
const int mod=1e9+7;
vector <long long> divs[N];
long long f[N],inv[N],val[N];

long long power(long long x, long long k)
{
		long long res=1;
		while (k) {
				if (k&1) res=res*x % mod;	
				k>>=1; x=x*x % mod;
		}
		return res;
}

long long F(int n, int k)
{
		if (n<k) return 0;
		return f[n-1]*inv[n-k] % mod *inv[k-1] % mod;
}

int main()
{
		for (int i=1; i<N; i++) 
				for (int j=i+i; j<N; j+=i) 
						divs[j].push_back(i);
		f[0]=inv[0]=1;
		for (int i=1; i<N; i++) {
				f[i]=f[i-1]*i % mod;
				inv[i]=power(f[i],mod-2);
		}
		int q;
		cin>>q;
		while (q--) {
				int n,s;
				cin>>n>>s;
				int ans=F(n,s);
				for (int i = 0; i < divs[n].size(); i++) {
						int cur = divs[n][i]; val[cur] = F(cur, s);
						for (int j = 0; j < divs[cur].size(); j++) {
								val[cur] -= val[divs[cur][j]];
								if (val[cur] < 0) val[cur] += mod;
						}
						ans -= val[cur];
						if (ans<0) ans += mod;
				}
				cout<<ans<<endl;
		}
		//system("pause");
		return 0;
}