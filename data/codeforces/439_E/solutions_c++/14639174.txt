#include <bits/stdc++.h>
//Practice makes perfect

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 2e5 + 100;
const ll MOD = 1e9 + 7;

inline ll add(ll a, ll b){
	return ((a + b) % MOD + MOD) % MOD;
}

inline ll mul(ll a, ll b){
	return ((a * b) % MOD + MOD) % MOD;
}

inline ll mpow(ll a, ll b){
	ll res = 1;
	for (; b; b >>= 1){
		if (b & 1) res = mul(res, a);
		a = mul(a, a);
	}
	return res;
}

ll fact[MAXN];
map<ll, bool> vis[MAXN];
map<ll, ll> ans[MAXN];
vector<ll> d[MAXN];

inline ll C(ll n, ll r){
	if (n < 0 || r > n || r < 0) return 0;
	return mul(fact[n], mpow(mul(fact[n -r], fact[r]) , MOD - 2));
}

ll solve(ll n, ll f){
	if (n < f) return 0;
	if (vis[n][f]) return ans[n][f];

	ll temp = C(n - 1, f - 1);

	for (ll i = 0; i < d[n].size(); i++) {
		temp = add(temp, -solve(d[n][i], f));
	}

	vis[n][f] = true;
	return ans[n][f] = temp;
}

int main(){

	fact[0] = 1;

	for (ll i = 1; i < MAXN; i++)
		for (ll j = 2 * i; j < MAXN; j += i)
			d[j].push_back(i);

	for (int i = 1; i < MAXN; i++)
		fact[i] = mul(fact[i - 1], i);

	ll q; scanf("%lld", &q);
	while(q--){
		ll n, f; scanf("%lld%lld", &n, &f);
		if (f == 1 && n != 1) printf("0\n");
		else printf("%lld\n", solve(n, f));
	}	
}
