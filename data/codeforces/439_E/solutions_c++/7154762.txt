#include<cstdio>
#include<map>
#include<vector>
using namespace std;

const int M = 1e9+7, maxn = 1e5;
typedef long long ll;
int n, f;
ll P[maxn], D[maxn];
vector<int> facs;
map<pair<int, int>, int> ans;
int Pow(int x, int k) {
  if (k == 0) return 1;
  ll tmp = Pow(x, k>>1);
  tmp = (tmp*tmp)%M;
  if (k&1) return (tmp*x)%M; else return tmp;
}
int Sum(int n, int f) {
  if (ans.find(make_pair(n, f)) != ans.end()) return ans[make_pair(n, f)];
  if (n < f) return 0;
  if (f == 1) {
    if (n == 1) return 1; else return 0;
  }
  ll tmp = ((P[n-1]*D[f-1])%M*D[n-f])%M;
  int p;
  for (p = 2; p*p < n; p++)
    if (n%p == 0) tmp = (tmp-Sum(p, f)-Sum(n/p, f))%M;
  if (p*p == n) tmp -= Sum(p, f);
  tmp %= M;
  ans[make_pair(n, f)] = tmp;
  return tmp;
}
int main()
{
  D[0] = P[0] = 1LL;
  for (int i = 1; i < maxn; i++) {
    P[i] = (P[i-1]*i)%M;
    D[i] = Pow(P[i], M-2);
  }
  int Q;
  scanf("%d", &Q);
  while (Q--) {
    scanf("%d%d", &n, &f);
    printf("%d\n", (Sum(n, f)+M)%M);
  }
}
