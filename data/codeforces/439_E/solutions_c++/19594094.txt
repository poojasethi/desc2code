#include<cstdio>
#include<vector>
using namespace std;
const int N = 2e5+10 , MOD = 1e9+7;
vector<int> dv[N];
long long fact[N];
int dp[N] , rev[N];
long long bp(int a , int b){
    if(b == 0) return 1;
    long long x = bp(a , b/2);
    x = (x*x)%MOD;
    return  (b&1 ? (x*a)%MOD : x);
}
int C(int n , int m){
    if(m > n) return 0;
    long long d = rev[m];
    d = ( d * rev[n-m] ) %MOD;
    d = ( d*fact[n])%MOD;
    return d;
}

int main(){
    fact[0] = 1;
    rev[0] = 1;
    for(int i=1 ; i<N ; i++){
	fact[i] = (fact[i-1]*i)%MOD;
	rev[i] = bp( fact[i] , MOD-2 ); 
    }
    for(int i=1 ; i<=1e5 ; i++)
	for(int j=2*i ; j<=1e5 ; j+=i)
	    dv[j].push_back(i);
    int q;scanf("%d" , &q);

    for(int _=0 ; _<q ; _++){
	int n,f;scanf("%d%d" , &n , &f);
	int ans=C(n-1 , f-1);
	for(int i=0 ; i<dv[n].size() ; i++){
	    int D = dv[n][i];
	    dp[ D ] = C( D-1 , f-1);
	    for(int j=0 ; j<dv[ D ].size() ; j++)
		if( dv[D][j] != D)
		    dp[ D ] = (dp[D] -  dp[ dv[D][j] ] + MOD)%MOD;
	    ans = ans - dp[D]+MOD;
	    ans %= MOD;
	}
	printf("%d\n" , ans);
    }

    return 0;
}
