#include <cstdio>
#include <vector>
using namespace std;

const int size = 1e5 + 10;
const int MOD = 1e9 + 7;

int fact[size], ifact[size], Q, N, F;
vector<int> divisors[size];

int binpow(int x, int bit) {
    long long re = 1;
    while (bit) {
        if (bit & 1)
            re = re * 1LL * x % MOD;
        x = x * 1LL * x % MOD;
        bit >>= 1;
    }
    return re;
}
void init() {
    fact[0] = 1, ifact[0] = 1;
    for (int i = 1; i < size; i++) {
        fact[i] = (fact[i - 1] * 1LL * i) % MOD;
        ifact[i] = binpow(fact[i], MOD - 2);
    }
    for (int i = 1; i < size; i++) {
        for (int j = i; j < size; j += i) {
            divisors[j].push_back(i);
        }
    }

}
int used[size], fused, z[size];

long long func(int N, int F) {
    if (N < F) return 0;
    if (N == F) return 1;
    if(used[N] == fused)
        return z[N];
    used[N] = fused;
    int& re = z[N];
    re = fact[N - 1] * 1LL * ifact[F - 1] % MOD * ifact[N - F] % MOD;
    for (int i = 0; i < divisors[N].size() - 1; i++) {
        int G = divisors[N][i];
        re = re - func(G, F);
        if(re < 0) re += MOD;
    }
    return re;
}

int main() {
    init();
    scanf("%d", &Q);
    while (Q--) {
        fused++;
        scanf("%d%d", &N, &F);
        printf("%d\n", func(N, F));
    }
    return 0;
}