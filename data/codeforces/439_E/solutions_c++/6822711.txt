#include <iostream>
#include <vector>
using namespace std;
const int MOD = 1000000007;
const int MAX = 100005;
long long f[MAX], rev[MAX], mu[MAX];
vector<int> divi[MAX];
long long pow(long long a, long long b)
{
	long long ans = 1;
	while (b)
	{
		if (b & 1)
			ans *= a;
		b >>= 1;
		a *= a;
		ans %= MOD;
		a %= MOD;
	}
	return ans;
}
long long inverse(long long num)
{
	return pow(num, MOD - 2);
}
long long c(int n, int r)
{
	if (n < r)
		return 0;
	return (((f[n] * rev[r]) % MOD) * rev[n - r]) % MOD;
}
int calc_mu(int n)
{
	int cnt = 0;
	for (int i = 2; i * i <= n; i++)
		if (n % i == 0)
		{
			n /= i;
			cnt++;
			if (n % i == 0)
				return 0;
		}
	if (n != 1)
		cnt++;
	if (cnt & 1)
		return -1;
	return 1;
}
int main()
{
	ios::sync_with_stdio(false);
	f[0] = 1;
	rev[0] = 1;
	for (int i = 1; i < MAX; i++)
	{
		mu[i] = calc_mu(i);
		f[i] = (f[i - 1] * i) % MOD;
		rev[i] = inverse(f[i]);
	}
	for (int i = 1; i < MAX; i++)
		for (int j = i; j < MAX; j += i)
			divi[j].push_back(i);
	int q;
	cin >> q;
	while (q--)
	{
		int n, f;
		cin >> n >> f;
		long long ans = 0;
		for (int i = 0; i < divi[n].size(); i++)
			ans += mu[divi[n][i]] * c(n / divi[n][i] - 1, f - 1);
		ans %= MOD;
		ans += MOD;
		ans %= MOD;
		cout << ans << endl;
	}
	return 0;
}
