#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
const ll mod=ll(1e9)+7;
const int N=int(1e5)+10;
ll Fact[N],invFact[N];

ll fpow(ll a,ll b){
    ll t=1LL;
    for(;b;b>>=1){
        if (b&1) t=(t*a)%mod;
        a=(a*a)%mod;
    }
    return t;
}
ll cnt(int a,int b){
    if (a<b) return 0LL;
    return ((Fact[a-1]*invFact[b-1])%mod*invFact[a-b])%mod;
}
int q,n,f,k,cur;
ll ans;
vector<int> v;

int main(){
    Fact[0]=invFact[0]=1LL;
    for(int i=1;i<N;++i){
        Fact[i]=(Fact[i-1]*i)%mod;
        invFact[i]=fpow(Fact[i],mod-2);
    }
    ios::sync_with_stdio(false);
    cin>>q;
    while (q--){
        cin>>n>>f;
        k=n;
        if (n==1){cout<<"1\n";continue;}
        v.clear();
        for(int i=2;i*i<=k;++i) if (k%i==0){
            v.push_back(i);
            while (k%i==0) k/=i;
        }
        if (k>1) v.push_back(k);
        ans=0;
        k=(int)v.size();
        for(int s=0,ms=(1<<k);s<ms;++s){
            cur=1;
            for(int i=0;i<k;++i) if (s&(1<<i)) cur*=v[i];
            int here=__builtin_popcount(s);
            if (here&1) ans=((ans-cnt(n/cur,f))+mod)%mod;
            else ans=(ans+cnt(n/cur,f))%mod;
        }
        cout<<ans<<'\n';
    }
    return 0;
}