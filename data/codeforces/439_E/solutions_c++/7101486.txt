#include<algorithm>
#include<cstring>
#include<cstdio>
#include<string>
#include<iostream>
#include<vector>
using namespace std;
long long d[100005];
long long flag[100005];
long long c[100005];
long long r[100005];
vector<int>q[100005];
int mod=1e9+7;
long long cf(long long x,int p)
{
    long long y=1;
    while(p)
    {
        if(p%2)
        {
            y=y*x%mod;
            p--;
        }
        else
        {
            p/=2;
            x=x*x%mod;
        }
    }
    return y;
}
long long dfs(int n,int m,int x)
{

    if(flag[n]==x)
        return d[n];
 
    long long &ans=d[n];
    flag[n]=x;
    if(n<m)
    return d[n]=0;
    ans=c[n-1]*r[m-1]%mod*r[n-m]%mod;
    for(int i=0;i<q[n].size();i++)
    {
        int y=q[n][i];
        ans=(ans-dfs(y,m,x)+mod)%mod;
    }
   
    return ans;
}

int main()
{
    for(int i=1;i<=100000;i++)
    {
        for(int j=i+i;j<=100000;j+=i)
        {
            q[j].push_back(i);
        }
    }
    int q;
    cin>>q;
    c[0]=1;
    c[1]=1;
    r[0]=1;
    r[1]=1;
    for(int i=2;i<=100000;i++)
    {
        c[i]=c[i-1]*i%mod;
        r[i]=cf(c[i],mod-2);
    }
    for(int i=1;i<=q;i++)
    {
        int n,m;
        cin>>n>>m;
        long long z=dfs(n,m,i);
        cout<<z<<endl;
    }
    return 0;
}
