#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
using namespace std;

const int maxn = 100000;
const int mod = 1000000007;

long long fact[maxn + 1];
long long infact[maxn + 1];

int fused[maxn + 1];
int dp[maxn + 1];

int exgcd(int a,int b,long long &x,long long &y)
{
    if(b==0)
    {
		x=1;y=0;
	    return a;
	}
    int r=exgcd(b,a%b,x,y);
    long long t=x;x=y;
    y=t-a/b*y;
    return r;
}

int q;
int n, f;

vector<int> factors[maxn + 1];

int cdp(int n, int f)
{
	if (f > n)
		return 0;
	if (fused[n] == q)
		return dp[n];
	int summ = (fact[n - 1] * infact[f - 1]) % mod * infact[n - f] % mod;
	vector<int>& fa = factors[n];
	for (int i = 0; i < fa.size(); ++ i)
		summ = ((summ - cdp(n / fa[i], f)) + mod) % mod;
	//printf("%d %d %d\n", n, f, summ);
	fused[n] = q;
	dp[n] = summ;
	return summ;
}

int main()
{
	infact[0] = fact[0] = 1;
	for (int i = 1; i <= maxn; ++ i)
	{
		fact[i] = (fact[i - 1] * i) % mod;
		long long x, k;
		long long r = exgcd(fact[i], mod, x, k);
		x = x / r;
		infact[i] = (x % mod + mod) % mod;
	}

	for (int i = 2; i <= maxn; ++ i)
		for (int j = i; j <= maxn; j += i)
			factors[j].push_back(i);

	scanf("%d", &q);
	memset(fused, -1, sizeof(fused));
	while (q --)
	{
		scanf("%d%d", &n, &f);
		printf("%d\n", cdp(n, f));
	}
	
   	return 0;
}
