#include <bits/stdc++.h>

typedef long long ll;

using namespace std;

const int MaxN = 1e5;
const int mod = 1e9 + 7;

ll fact[MaxN + 1];
ll revFact[MaxN + 1];
int dp[MaxN + 1];
vector<int> dv[MaxN + 1];

ll pw (ll a, ll n) {
	if (n == 0) 
		return 1;
	if (n % 2 == 0) {
		ll tmp = pw(a, n / 2);
		return (tmp * tmp) % mod;
	}
	return (a * pw(a, n - 1)) % mod;
}

int getCnK(int n, int k) {
	if (n < k) return 0;
	return ((fact[n] * revFact[k]) % mod * revFact[n - k]) % mod;
}

int solve(int n, int f) {
	if (n == 1 && f == 1) return 1;
	for (int i = (int)dv[n].size() - 1; i >= 0; i--) {
		int cur = n / dv[n][i];
		dp[i] = getCnK(cur - 1, f - 1);
		for (int j = i + 1; j < (int)dv[n].size(); j++)
			if (dv[n][j] % dv[n][i] == 0) {
				dp[i] -= dp[j];
				if (dp[i] < 0) dp[i] += mod;
			}
	}
	return dp[0];
}

int main () {
	fact[0] = 1;
	fact[1] = 1;
	revFact[0] = pw(fact[0], mod - 2);
	revFact[1] = pw(fact[1], mod - 2);
	for (int i = 2; i <= MaxN; i++) {
		fact[i] = (fact[i - 1] * 1ll * i) % mod;
		revFact[i] = pw(fact[i], mod - 2);
	}
	for (int i = 1; i <= MaxN; i++)
		for (int j = i; j <= MaxN; j += i)
			dv[j].push_back(i);
	int q;
	scanf ("%d", &q);
	for (int i = 0; i < q; i++) {
		int n, f;
		scanf ("%d%d", &n, &f);
		printf ("%d\n", solve(n, f));
	}
}
