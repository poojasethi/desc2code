#include <bits/stdc++.h>
using namespace std;
const int MOD = (int)1e9 + 7;
const int maxn = 100005;
int fac[maxn], inv[maxn], mu[maxn];
bool f[maxn];
vector <int> P;
int modExp(int a, int b) {
	long long y = a, t = 1LL;
	while(b) {
		if(b & 1) t = t * y % MOD;
		y = y * y % MOD;
		b >>= 1;
	}
	return (int)t;
}
int C(int n, int m) {
	if(m > n) return 0;
	return (long long)fac[n] * inv[m] % MOD * inv[n - m] % MOD;
}
void init() {
	fac[0] = 1;
	for(int i = 1; i < maxn; i++) fac[i] = (long long)fac[i - 1] * i % MOD;
	for(int i = 0; i < maxn; i++) inv[i] = modExp(fac[i], MOD - 2);
	mu[1] = 1;
	for(int i = 2; i < maxn; i++) {
		if(!f[i]) {
			P.push_back(i);
			mu[i] = -1;
		} 
		for(int j = 0; j < P.size() && i * P[j] < maxn; j++) {
			f[i * P[j]] = 1;
			if(i % P[j]) {
				mu[i * P[j]] = -mu[i];
			} else {
				mu[i * P[j]] = 0;
				break;
			}
		}
	}
}
void CheckMOD(int &x) {
	if(x < 0) x += MOD;
	if(x >= MOD) x -= MOD;
}
int Solve(int n, int m) {
	int ans = 0;
	for(int i = 1; i * i <= n; i++) {
		if(n % i == 0) {
			ans += mu[i] * C(n / i - 1, m - 1); 
			CheckMOD(ans);
			if(n / i != i) {
				ans += mu[n / i] * C(i - 1, m - 1);
				CheckMOD(ans);
			}
		}
	}
	return ans;
}
int main() {
	int q, n, m;
	init();
	scanf("%d", &q);
	while(q--) {
		scanf("%d%d", &n, &m);
		printf("%d\n", Solve(n, m));
	}
	return 0;
}
