#include<iostream>
#include<vector>
#include<map>
using namespace std;
const int MAXN = 100 * 1000 + 5;
const long long MOD = 1e9 + 7;

long long fac[MAXN] , rev[MAXN];
map<int , long long> dp[MAXN];
map<int,bool> marked[MAXN];
vector<int> div[MAXN];

long long power(long long A , long long p)
{
	if(p == 0)
		return 1ll;
	long long ans = power(A , p / 2ll);
	ans = (ans * ans) % MOD;
	if(p % 2ll)
		ans = (ans * A) % MOD;
	return ans;
}

void init()
{
	fac[0] = rev[0] = 1ll;
	for(int i = 1;i < MAXN;i ++)
		fac[i] = (i * fac[i - 1]) % MOD , rev[i] = power(fac[i] , MOD - 2);
	
	for(int i = 2;i < MAXN;i ++)
		for(int j = i;j < MAXN;j += i)
			div[j].push_back(i);
	
//	memset(dp , -1 , sizeof dp);
}
long long C(int n , int r)
{
	if(r > n)
		return 0;
	return (((fac[n] * rev[n - r]) % MOD) * rev[r]) % MOD;

}
long long calc(int n , int k)
{
	
	if(n == k)
		return 1;
	if(n < k)
		return 0;
	
	if(marked[n][k])
		return dp[n][k];
	
	long long ans = C(n - 1 , k - 1);

	for(int i = 0;i < (int)div[n].size();i ++)
		ans = (ans - calc(n / div[n][i] , k) + MOD) % MOD;
	
	marked[n][k] = true;
	dp[n][k] = ans;

	return ans;
}
int main()
{
	ios::sync_with_stdio(false);
	init();
	int q;
	cin >> q;
	for(int i = 0;i < q;i ++)
	{
		int n , k;
		cin >> n  >> k;
		cout << calc(n , k) << "\n";
	}
	return 0;
}
