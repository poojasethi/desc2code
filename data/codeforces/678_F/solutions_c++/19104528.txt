#include <iostream> 
#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

#define For(i , a , b) for (int i = a , _b = b ; i <= _b ; ++i)
#define Ford(i , a  ,b) for (int i = a , _b = b : i >= _b ; --i)
#define Rep(i , n) for (int i = 0 , _n = n ; i < _n ; ++i)
#define sz(A) ((int)A.size())
#define LL(x) (x << 1)
#define RR(x) ((x << 1) | 1)

typedef pair<int , int> pt;

const int maxn = 300000 + 123;
int n;

struct line{
	int a , b;

	bool operator < (const line other) const {
		if (a == other.a) return b < other.b; 
		return a < other.a;
	}
} L[maxn];

long long f(const line &d , const int pos) {
	return 1LL * d.a * pos + d.b;
}
int start[maxn] , en[maxn];
vector<pt> q;
const long long INF = 1e18 * 3;

bool need_to_pop(const line x , const line y , const line z) {
	return (long double) (x.b - y.b) / (y.a - x.a) > (long double) (y.b - z.b) / (z.a - y.a);
}

class SegmentTree {
public:
	int l[maxn * 4] , h[maxn * 4];
	vector<line> hull[maxn * 4];
	int ptr[maxn * 4];

	void add_line(vector<line> &hull ,const line New) {
		if (sz(hull) && hull.back().a == New.a) {
			if (hull.back().b < New.b) {
				hull.pop_back(); hull.push_back(New); return;
			} else return;
		}
		while (sz(hull) >= 2 && need_to_pop(hull[sz(hull) - 2] , hull.back() , New) )
			hull.pop_back();
		hull.push_back(New);
	}
	void init(int x , int L , int R) {
		l[x] = L , h[x] = R;
		ptr[x] = 0;
		hull[x].clear();
		if (L != R) {
			int mid = (L + R) >> 1;
			init(LL(x) , L , mid); init(RR(x) , mid + 1 , R);
		}
	}
	void update(const int x , const int u , const int v , const line val) {
		if (l[x] > v || h[x] < u) return;
		if (u <= l[x] && h[x] <= v) {
			add_line(hull[x] , val); return;
		}
		update(LL(x) , u , v , val); update(RR(x) , u , v , val);
	}
	bool ComparePoint(int x , int a , int b) { // x >= a / b ?
		if (b < 0) return 1LL * x * b <= a;
		return 1LL * x * b >= a;

	}
	long long get_in_hull(const int x ,const int pos) {
		if (sz(hull[x]) == 0) return -INF;
		while (ptr[x] < sz(hull[x]) - 1 
		&& ComparePoint(pos , hull[x][ptr[x] + 1].b - hull[x][ptr[x]].b , hull[x][ptr[x]].a - hull[x][ptr[x]+ 1].a) ) {
			++ptr[x];
		}
		return f(hull[x][ptr[x]] , pos);
	}
	long long get(const int x , int pos , int cor) {
		if (l[x] == h[x]) return get_in_hull(x , cor);
		long long res = get_in_hull(x , cor);
		if (pos <= h[LL(x)]) return max(res , get(LL(x) , pos , cor));
		return max(res , get(RR(x) , pos , cor));
	}
} tree;

int idLine[maxn];

bool cmp(const int &i , const int &j) {
	return L[i] < L[j];
}

long long res[maxn];
int sum[maxn];
void do_add(int l , int r) {
	sum[l]++ , sum[r + 1]--;
}

bool needToAns[maxn];
void ReadData() {
	cin >> n;
	For(i , 1 , n) {
		int type; cin >> type;
		if (type == 1) {
			int a , b; cin >> a >> b;
			L[i] = (line) {a , b}; 
			start[i] = i;
 		}
 		if (type == 2) {
 			int j; cin >> j; 
 			en[j] = i;
 		}
 		if (type == 3) {
 			int x; cin >> x; q.push_back(pt(x , i));
 			needToAns[i] = true;
 		}
	}
	For(i , 1 , n) idLine[i] = i;
	sort(idLine + 1 , idLine + 1 + n , cmp);
	sort(q.begin() , q.end());

	tree.init(1 , 1 , n);
	For(i , 1 , n) res[i] = -INF;
	For(i , 1 , n) {
		int z = idLine[i];
		if (start[z]) {
			if (!en[z]) en[z] = n + 1;
			if (L[z].a == 0 && L[z].b == 0) {
				do_add(start[z] , en[z] - 1);
				continue; 
			}
			tree.update(1 , start[z] , en[z] - 1 , L[z]);
		}
	}
	int cur = 0; 
	For(i , 1 , n) {
		cur += sum[i];
		if (cur) res[i] = max(res[i] , 0LL);
	}
	for (int i = 0;  i < q.size() ; i++){
		res[q[i].second] = max(res[q[i].second] , tree.get(1 , q[i].second , q[i].first));
	}

	For(i , 1 , n) if (needToAns[i]) {
		if ( res[i] == -INF) cout << "EMPTY SET\n"; else cout << res[i] << "\n"; 
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	//freopen("input.inp" , "r" , stdin);
	ReadData();

	return 0;

}			