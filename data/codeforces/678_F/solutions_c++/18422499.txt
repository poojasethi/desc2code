#include<bits/stdc++.h>

using namespace std;

#define pii pair<int,int>
#define ll long long
#define N (int)(3e5+10)
#define mod 1000000007
#define mp make_pair
#define pb push_back
#define nd second
#define st first
#define inf mod
#define endl '\n'
#define sag (sol|1)
#define sol (root<<1)
#define bit(x,y) ((x>>y)&1)
#define int long long

pii A[N];
int i,j,k,n,m,x,y,z,q,w,a;
int S[N],F[N],Q[N],H[N];
ll mx;
vector< pair<ll,ll> > B[4*N];

double intersect(pii x,pii y){
	return (1.0*x.nd-y.nd)/(y.st-x.st);
}
    
void add(int root,pii a){
    int s=(int)B[root].size()-1;
    if(s>=0 and B[root][s].st == a.st)
		B[root].pop_back();
	while(s>=1 and intersect(B[root][s],B[root][s-1]) >= intersect(B[root][s-1],a)){
		s--;
		B[root].pop_back();
	}
	B[root].pb(a);
}

ll get(int root,int x){
    if(!B[root].size())
        return -(ll)inf*inf;
	int bas=0,son=(int)B[root].size()-1;

	while(bas<son){
		int ort=bas+son>>1;
		if(bas==ort)
			ort++;
		if(intersect(B[root][ort],B[root][ort-1]) >= x)
			son=ort-1;
		else
			bas=ort;
	}

	return B[root][bas].st*x+B[root][bas].nd;
}

void que(int root,int bas,int son,int x){
    
    if(bas > x or son < x)
        return ;
    
    w |= B[root].size();
    
    mx = max(get(root,Q[x]),mx);
    
    if(bas == son)
        return;
        
    que(sol,bas,bas+son>>1,x);
    que(sag,(bas+son>>1)+1,son,x);
}

void upd(int root,int bas,int son,int x,int y,int a,int b){
    if(bas > y or son < x)
        return;
    
    if(x <= bas and son <= y){
        add(root,mp(a,b));
        return;
    }
    
    upd(sol,bas,bas+son>>1,x,y,a,b);
    upd(sag,(bas+son>>1)+1,son,x,y,a,b);
}
 main(){
    scanf("%lld",&n);
    
    for(i=1 ; i<=n ; i++){
        scanf("%lld",&a);
    
        if(a == 1){
            scanf("%lld %lld",&A[i].st,&A[i].nd);
            S[i] = i;
        }
        if(a==2){
            scanf("%lld",&x);
            F[x] = i;
        }
        if(a == 3){
            scanf("%lld",&q);
            Q[i] = q;
            H[i] = 1;
        }
    }
    
    vector< pair< pii , int > > v;
    
    for(i=1 ; i<=n ; i++){
        if(S[i]){
            if(!F[i])
                F[i] = n;
               
            v.pb(mp(A[i],i));
        }
    }
    
    sort(v.begin(),v.end());
    
    for(i=0 ; i<v.size() ; i++){
	    upd(1,1,n,S[v[i].nd],F[v[i].nd],v[i].st.st,v[i].st.nd);

   
    }
    
    for(i=1 ; i<=n ; i++)
        if(H[i]==1){
            w=0;
            mx = -(ll)inf*inf;
            que(1,1,n,i);
            if(w)
                printf("%lld\n",mx);
            else
                puts("EMPTY SET");
        }
}