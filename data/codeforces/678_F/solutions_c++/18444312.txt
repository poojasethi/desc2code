#include<bits/stdc++.h>
using namespace std;
const int maxn=3e5+5;
typedef long long LL;
int n;
struct P{
	LL x,y;
	
};
bool operator<(const P &a,const P &b){
	return a.x==b.x?a.y<b.y:a.x<b.x;
}
P operator-(P a,P b){return (P){a.x-b.x,a.y-b.y};}
LL operator*(P a,P b){return a.x*b.y-a.y*b.x;}
LL operator^(P a,P b){return a.x*b.x+a.y*b.y;}
struct CH{
	vector<P>ch;
	void add(P p){
		ch.push_back(p);
	}
	void build(){
		vector<P>tmp;tmp=ch;
		sort(tmp.begin(),tmp.end());ch.clear();
		for(int i=0;i<tmp.size();i++){
			while(ch.size()>1&&(tmp[i]-ch.back())*(ch.back()-ch[ch.size()-2])<=0)ch.pop_back();
			ch.push_back(tmp[i]);
		}
	}
	LL Qmax(P p){
		int l=0,r=ch.size()-1;
		if(ch.empty())return LLONG_MIN;
		while(r-l>2){
			int mid1=l+(r-l)/3;
			int mid2=r-(r-l)/3;
			if((p^ch[mid1])>(p^ch[mid2]))
				r=mid2;
			else l=mid1;
		}
		LL ans=LLONG_MIN;
		for(int i=l;i<=r;i++)ans=max(ans,p^ch[i]);
		return ans;
	}
};
int lef[maxn],rig[maxn];
P po[maxn];
vector<pair<int,int> >Q;
CH t[maxn<<2];
#define lson o<<1,l,(l+r)/2
#define rson o<<1|1,(l+r)/2+1,r
void Add(int o,int l,int r,int l0,int r0,P p){
	if(l0<=l&&r0>=r){
		t[o].add(p);
		return ;
	}
	int mid=(l+r)/2;
	if(l0<=mid)Add(lson,l0,r0,p);
	if(r0>mid)Add(rson,l0,r0,p);
	
}
void build(int o,int l,int r){
	t[o].build();
	if(l==r)return;
	build(lson);
	build(rson);
}
LL Qmax(int o,int l,int r,int l0,int r0,P p){
	LL ans=t[o].Qmax(p);
	if(l0<=l&&r0>=r)
		return ans;
	int mid=(l+r)>>1;
	if(l0<=mid)ans=max(ans,Qmax(lson,l0,r0,p));
	if(r0>mid)ans=max(ans,Qmax(rson,l0,r0,p));
	return ans;
}
int main(){
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		int t;scanf("%d",&t);
		if(t==1){
			int x,y;scanf("%d%d",&x,&y);
			lef[i]=i;rig[i]=n;po[i]=(P){x,y};
		}else if(t==2){
			int id;scanf("%d",&id);
			rig[id]=i;
		}else{
			int q;scanf("%d",&q);
			Q.push_back(make_pair(i,q));
		}
	}
	
	for(int i=1;i<=n;i++)if(lef[i])
		Add(1,1,n,lef[i],rig[i],po[i]);
	
	build(1,1,n);
	
	for(int i=0;i<Q.size();i++){
//		cerr<<Q[i].first<<" "<<Q[i].second<<endl;
		//if(Q[i].first==0){puts("EMPTY SET");continue;}
		LL ans=Qmax(1,1,n,Q[i].first,Q[i].first,(P){Q[i].second,1});
		if(ans==LLONG_MIN)puts("EMPTY SET");
		else printf("%I64d\n",ans);
	}
	
	return 0;
}