#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#define maxn 300010
#define inf 2e18

using namespace std;

struct yts
{
	long long x,y;
}st[maxn];

bool operator<(yts x,yts y)
{
	return x.x<y.x || (x.x==y.x && x.y<y.y);
}

yts operator+(yts x,yts y) {return (yts){x.x+y.x,x.y+y.y};}
yts operator-(yts x,yts y) {return (yts){x.x-y.x,x.y-y.y};}
long double operator*(yts x,yts y) {return (long double)x.x*y.y-x.y*y.x;}

vector<yts> t[4*maxn];

struct yts2
{
	int op;
	long long x,y;
	int T;
}q[maxn];

int n,top;
bool vis[maxn];
long long ans[maxn];

void modify(int i,int l,int r,int L,int R,yts x)
{
	if (L<=l && r<=R) {t[i].push_back(x);return;}
	int mid=(l+r)/2;
	if (L<=mid) modify(i<<1,l,mid,L,R,x);
	if (mid<R) modify(i<<1|1,mid+1,r,L,R,x); 
}

long long calc(int i,long long x) {return st[i].x*x+st[i].y;}

long long query(long long x)
{
	int l=1,r=top;
	long long ans=-inf;
	while (r-l>=3)
	{
		int mid=l+(r-l)/3,midmid=r-(r-l)/3;
		if (calc(mid,x)>calc(midmid,x)) r=midmid; else l=mid;
	}
	for (int i=l;i<=r;i++) ans=max(ans,calc(i,x));
	return ans;
}

void solve(int i,int l,int r)
{
	int mid=(l+r)/2;
	if (l<r) solve(i<<1,l,mid),solve(i<<1|1,mid+1,r);
	if (t[i].size()==0) return;
	top=0;
	sort(t[i].begin(),t[i].end());
	for (int j=0;j<t[i].size();j++)
	{
		while (top>1 && (t[i][j]-st[top])*(st[top]-st[top-1])<=0) top--;
		st[++top]=t[i][j];
	}
	for (int j=l;j<=r;j++)
	  if (q[j].op==3) ans[j]=max(ans[j],query(q[j].x));
}

int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;i++)
	{
		scanf("%d",&q[i].op);
		if (q[i].op==1) scanf("%I64d%I64d",&q[i].x,&q[i].y);
		else if (q[i].op==2)
		{
			scanf("%d",&q[i].T);vis[q[i].T]=1;
			modify(1,1,n,q[i].T,i,(yts){q[q[i].T].x,q[q[i].T].y});
		}
		else if (q[i].op==3) scanf("%I64d",&q[i].x);
	}
	for (int i=1;i<=n;i++) if (q[i].op==1 && !vis[i]) modify(1,1,n,i,n,(yts){q[i].x,q[i].y});
	for (int i=1;i<=n;i++) ans[i]=-inf;
	solve(1,1,n);
	for (int i=1;i<=n;i++) if (q[i].op==3) {if (ans[i]!=-inf) printf("%I64d\n",ans[i]); else printf("EMPTY SET\n");}
	return 0;
}

