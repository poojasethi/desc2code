#include <iostream>
#include <cstdio>
#include <cstring>  
#include <string>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <ctime>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <cassert>
#include <bitset>

using namespace std;
 
const int maxn = 51;
const int maxm = 51;
const long long mod = (long long)(1e9 + 7);

long long c[maxn][maxn];
long long f[maxn][maxm][2];

int main() {
	memset(c, 0, sizeof(c));
	c[0][0] = 1;
	for (int i = 1; i < maxn; ++i) {
		c[i][0] = 1;
		for (int j = 1; j <= i; ++j) {
			c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % mod;
		}
	}
	memset(f, 0, sizeof(f));
	f[0][0][1] = f[1][0][0] = 1;
	for (int i = 2; i < maxn; ++i) {
		for (int j = 0; j < maxm; ++j) {
			for (int k = 0; k <= (i - 1) / 2 ; ++k) {
				for (int l = 0; l <= j; ++l) {
					long long tmp;
					if (k) {
						tmp = k * (i - k - 1) % mod;
					} else {
						tmp = i - 1;
					}
					if (k < i - k - 1) {
						tmp = tmp * c[i - 1][k] % mod;
					} else {
						tmp = tmp * c[i - 2][k - 1] % mod;
					}
					f[i][j][0] = (f[i][j][0] + f[k][l][1] * f[i - k - 1][j - l][1] % mod * tmp) % mod;
					if (l < j) {
						f[i][j][1] = (f[i][j][1] + f[k][l][0] * f[i - k - 1][j - l - 1][0] % mod * tmp + f[k][l][0] * f[i - k - 1][j - l - 1][1] % mod * tmp + f[k][l][1] * f[i - k - 1][j - l - 1][0] % mod * tmp) % mod;
					}
				}
			}
		}
	}
	int cases;
	//scanf("%d", &cases);
	cases = 1;
	for (int o = 0; o < cases; ++o) {
		int n, m;
		scanf("%d %d", &n, &m);
		int ans = (f[n][m][0] + f[n][m][1]) % mod;
		//printf("Case #%d: %d\n", o + 1, (int)f[n][m]);
		printf("%d\n", (int)ans);
	}
	return 0;
}

