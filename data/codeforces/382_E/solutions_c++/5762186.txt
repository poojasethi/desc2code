#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>

using namespace std;

typedef long long LL;

const int MOD = 1000000007;
int n, k;
int f[55][55][2], c[55][55], inv[55];

inline void add(int &x, int y)
{
	x += y;
	x %= MOD;
}

inline void work()
{
	f[0][0][1] = 1;
	f[1][0][0] = 1;
	for (int i = 2; i <= n; ++i)
		for (int j = 0; j < n; ++j)
		{
			int z = i - j - 1;
			for (int l = 0; l <= j / 2; ++l)
				for (int m = 0; m <= z / 2; ++m)
				{
					for (int ii = 0; ii < 2; ++ii)
						for (int jj = 0; jj < 2; ++jj)
						{
							int cnt = !ii || !jj;
							add(f[i][l + m + cnt][cnt], (LL)f[j][l][ii] * f[z][m][jj] % MOD * c[i - 1][j] % MOD * i % MOD * inv[2] % MOD);
						}
				}
		}
}

int main()
{
	scanf("%d %d", &n, &k);
	if (k > n / 2) return puts("0"), 0;
	for (int i = 0; i <= n; ++i)
	{
		c[i][0] = 1;
		for (int j = 1; j <= i; ++j)
			c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % MOD;
	}
	inv[1] = 1;
	for (int i = 2; i <= n; ++i)
		inv[i] = (LL)(-inv[MOD % i]) * (MOD / i) % MOD;
	work();
	int ans = f[n][k][0] + f[n][k][1];
	ans = (LL)ans * inv[n] % MOD;
	printf("%d\n", (ans + MOD) % MOD);
	return 0;
}
