#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#define mem(name,value) memset(name,value,sizeof(name))
#define FOR(i,n) for(int i=1;i<=n;i++)
using namespace std;

typedef long long ll;
const int maxn = 50+10;
const int mod = 1000000007;

ll c[maxn][maxn];
void init(){
    mem(c,0);
    for(int i=0;i<=50;i++){
        c[i][0] = c[i][i] = 1;
        for(int j=1;j<i;j++)
            c[i][j] = (c[i-1][j] + c[i-1][j-1]) % mod;
    }
}

ll d[maxn][maxn][2];
int main(){
    int n,k;
    scanf("%d%d",&n,&k);
    init();
    mem(d,0);
    d[1][0][0] = d[0][0][1] = 1;
    for(int i=2;i<=n;i++)
    for(int j=0;j<=k;j++){
        d[i][j][0] = (d[i][j][0] + (i-1)*d[i-1][j][1]) % mod;
        if(j) d[i][j][1] = (d[i][j][1] + (i-1)*d[i-1][j-1][0]) % mod;
        for(int l=1;l<i-1;l++){
            int r = i-l-1;
            int comb = c[i-1][2] * c[i-3][l-1] % mod;
            for(int kl=0;kl<=j;kl++){
                int kr = j - kl;
                d[i][j][0] = (d[i][j][0] + comb * (d[l][kl][1] * d[r][kr][1] % mod)) % mod;
                if(--kr<0) continue;
                d[i][j][1] = (d[i][j][1] + comb * ((d[l][kl][1] * d[r][kr][0]+
                                                    d[l][kl][0] * d[r][kr][1]+
                                                    d[l][kl][0] * d[r][kr][0] ) % mod)) % mod;
            }
        }
    }

  /*  for(int i=0;i<=n;i++)
    for(int j=0;j<=k;j++)
        cout << d[i][j][0] << ' ' << d[i][j][1] << endl;*/

    ll ans = (d[n][k][0] + d[n][k][1]) % mod;
    printf("%I64d\n",ans);
    return 0;
}
