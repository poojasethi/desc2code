#include <cstdio>
#include <algorithm>
using namespace std;

typedef long long i64;

const int mod = (int)1e9 + 7;

int n, m, cmb[66][66], inv[66], dp[66][66][2];

int fpm(int a, int b, int w = 1) {
     for (; b; b >>= 1, a = (i64)a * a % mod)
	  if (b & 1) w = (i64)w * a % mod;
     return w;
}
void dpto(int x, int& a) {
     if (a += x, a >= mod) a -= mod;
}

int main() {
#ifndef ONLINE_JUDGE
     freopen("cf.in" , "r", stdin);
     freopen("cf.out", "w", stdout);
#endif
     scanf("%d%d", &n, &m);
     for (int i = 0; i <= 50; i ++) {
	  cmb[i][0] = 1;
	  for (int j = 1; j <= i; j ++)
	       cmb[i][j] = (cmb[i-1][j-1] + cmb[i-1][j]) % mod;
     }
     for (int i = 0; i <= 50; i ++)
	  inv[i] = fpm(i, mod - 2);

     dp[1][0][0] = 1;
     for (int s1 = 1; s1 < n; s1 ++)
	  for (int p1 = 0; p1 <= s1 / 2; p1 ++)
	       for (int b1 = 0; b1 <= 1; b1 ++) {
		    
		    i64 f1 = dp[s1][p1][b1];
		    if (f1 == 0) continue;
		    dpto(f1 * (s1 + 1) % mod, !b1? dp[s1+1][p1+1][1]: dp[s1+1][p1][0]);
		    
		    for (int s2 = 1; s2 <= s1; s2 ++)
			 for (int p2 = 0; p2 <= s2 / 2; p2 ++)
			      for (int b2 = 0; b2 <= 1; b2 ++) {
				   
				   i64 f2 = dp[s2][p2][b2], ss = s1 + s2 + 1;
				   if (f2 == 0) continue;
				   if ((s2 == s1 && p2 > p1) ||
				       (s2 == s1 && p2 == p1 && b2 > b1) ||
				       (s1 + s2 + 1 > n)) continue;
				   i64 ff = (f1 * f2 % mod) * (ss * cmb[ss-1][s1] % mod) % mod;
				   if (s2 == s1 && p2 == p1 && b2 == b1)
					ff = ff * inv[2] % mod;
				   dpto(ff, dp[ss][p1+p2+(!b1||!b2)][!b1||!b2]);
			      }
	       }
     
     printf("%d\n", (int)((i64)(dp[n][m][0] + dp[n][m][1]) * inv[n] % mod));
}
