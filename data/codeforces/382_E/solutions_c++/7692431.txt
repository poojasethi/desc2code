#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstring>

using namespace std;

const int N = 59;

typedef long long ll;

const int Mod = 1e9 + 7;

int dp[N][N][2], c[N][N];
ll ni2;

ll Pow(ll a, ll b, ll c){
	ll ret = 1;
	while(b){
		if(b & 1) ret = ret * a % c;
		a = a * a % c;
		b >>= 1;
	}
	return ret;
}

int dfs(int n, int k, int t){
	if(n == 0)
		return (k == 0) && (t == 1);
	if(n == 1)
		return (k == 0) && (t == 0);
	int &ret = dp[n][k][t];
	if(ret + 1) return ret;
	ret = 0;
	for(int n1 = 0; n1 < n; n1++){
		int n2 = n - n1 - 1;
		if(n1 > n2) continue;
		for(int k1 = 0; k1 + t <= k; k1++){
			int k2 = k - k1 - t;
			for(int t1 = 0; t1 < 2; t1++)
				for(int t2 = 0; t2 < 2; t2++){
					if(t == 0){
						if(t1 == 0 || t2 == 0) continue;
						ll T = 1ll * dfs(n1, k1, t1) * dfs(n2, k2, t2) % Mod;
						T = T * c[n][n1] % Mod * c[n - n1][n2] % Mod;
						if(n1 == n2) T = T * ni2 % Mod;
						ret = (ret + T) % Mod;
					}
					else{
						if(t1 && t2) continue;
						ll T = 1ll * dfs(n1, k1, t1) * dfs(n2, k2, t2) % Mod;
						T = T * c[n][n1] % Mod * c[n - n1][n2] % Mod;
						if(n1 == n2) T = T * ni2 % Mod;
						ret = (ret + T) % Mod;
					}
				}
		}
	}
	return ret;
}

int main(){
	ni2 = Pow(2, Mod - 2, Mod);
	memset(dp, -1, sizeof(dp));
	int n, k;
	scanf("%d%d", &n, &k);
	for(int i = 0; i < N; i++){
		c[i][0] = c[i][i] = 1;
		for(int j = 1; j < i; j++)
			c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % Mod;
	}
	ll ans = dfs(n, k, 0) + dfs(n, k, 1) % Mod;
	ans = ans * Pow(n, Mod - 2, Mod) % Mod;
	cout << ans << endl;
	return 0;
}
