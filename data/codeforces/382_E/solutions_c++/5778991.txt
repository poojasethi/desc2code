#include <bits/stdc++.h>
using namespace std;

const int N = 55;
const int mod = 1000000007;
long long dp[N][N][2];
long long c[N][N];

int main()
{
    memset(dp,0,sizeof(dp));
    memset(c,0,sizeof(c));
    for(int i = 0; i < N; i ++) {
        c[i][i] = c[i][0] = 1;
        for(int j = 1; j < i; j ++) {
            c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod;
        }
    }
    int n,m;
    cin >> n >> m; 
    dp[1][0][0] = dp[0][0][1] = 1;
    for(int i = 2; i <= n; i ++) {
        for(int j = 1; j <= m; j ++) {
            for(int k = 0; 2 * k < i; k ++) {
                int left = k,right = i - k - 1;
                long long coe;
                if(left == right) coe = c[i - 2][left];
                else coe = c[i - 1][left];
                coe = coe * max(1,left) % mod * right % mod;
                for(int r = 0; r <= j; r ++) {
                    dp[i][j][0] = (dp[i][j][0] + dp[left][r][1] * dp[right][j - r][1] % mod * coe) % mod;
                    if(r + 1 <= j) {
                        dp[i][j][1] = (dp[i][j][1] + dp[left][r][0] * dp[right][j - 1 - r][1] % mod * coe) % mod;
                        dp[i][j][1] = (dp[i][j][1] + dp[left][r][1] * dp[right][j - 1 - r][0] % mod * coe) % mod;
                        dp[i][j][1] = (dp[i][j][1] + dp[left][r][0] * dp[right][j - 1 - r][0] % mod * coe) % mod;
                    }
                }
            }
        }
    }
                
    cout << (dp[n][m][0] + dp[n][m][1]) % mod << endl;
    return 0;
}



	 		 		 	 				  	         	