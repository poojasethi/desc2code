#include <cassert>
#include <cstdio>
#include <algorithm>
#include <string>
#include <utility>
#include <vector>
using namespace std;

typedef long long LL;

const int M = 1000000007;
const int MX = 53;
int dp[MX][MX][MX];
int bc[MX][MX];

inline int val(int n, int x, int y)
{
    if(x < 0) return 0;
    return dp[n][x][y];
}

inline void add(int& x, int y)
{
    x += y;
    if(x >= M) 
        x -= M;
}

int main()
{
    int N, K;
    scanf("%d%d", &N, &K);
    
    for(int i = 0; i <= N; ++i) {
        bc[i][0] = bc[i][i] = 1;
        for(int j = 1; j < i; ++j) { 
            bc[i][j] = bc[i-1][j-1] + bc[i-1][j];
            if(bc[i][j] >= M) bc[i][j] -= M;
        }
    }
    
    dp[1][0][0] = 1;
    for(int n = 2; n <= N; ++n) {
        for(int x = 1; x <= n/2; ++x)
            dp[n][x][x] = ((LL)(n-1) * dp[n-1][x-1][x]) % M;
        for(int x = 0; x+1 <= n/2; ++x)
            dp[n][x][x+1] = ((LL)(n-1) * dp[n-1][x][x]) % M;
       
        for(int a = 1; a <= n-2; ++a) {
            int b = n-1-a;
            for(int x = 1; x <= n/2; ++x) {
                for(int c = 0; c <= a/2; ++c) {
                    int d = x-c;
                    add(dp[n][x][x], (LL)val(a,c-1,c)*val(b,d-1, d) % M * bc[n-1][2] % M * bc[n-3][a-1] % M);
                } 
            }
            for(int x = 0; x+1 <= n/2; ++x) {
                for(int c = 0; c <= a/2; ++c) {
                    int d = x-c;
                    add(dp[n][x][x+1], ((LL)val(a,c,c)*val(b,d,d) + (LL)val(a,c-1,c)*val(b,d,d) + (LL)val(a,c,c)*val(b,d-1,d)) % M * bc[n-1][2] % M * bc[n-3][a-1] % M);
                } 
            }
        }
    }
    
    //printf("%d %d\n", dp[N][K][K], dp[N][K-1][K]);
    printf("%d\n", (dp[N][K][K] + dp[N][K-1][K]) % M);
    return 0;
}
