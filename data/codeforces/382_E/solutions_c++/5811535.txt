#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int BUF = 55;
const int MOD = 1000000007;


int N, K, C[BUF][BUF];

void makeTable() {
    C[0][0] = 1;
    for (int i = 1; i < BUF; ++i)
        for (int j = 0; j <= i; ++j)
            C[i][j] = ((j > 0 ? C[i - 1][j - 1] : 0) + C[i - 1][j]) % MOD;
}


int mul(int a, int b) {
    return 1LL * a * b % MOD;
}


int add(int a, int b) {
    return (a + b) % MOD;
}


void read() {
    cin >> N >> K;
}


int rec(bool toMatch, int n, int k, int dp[2][BUF][BUF]) {
    int &ret = dp[toMatch][n][k];
    if (ret != -1) return ret;
    if (n == 1) return ret = k == 0 && !toMatch ? 1 : 0;
    if (n == 0) return ret = k == 0 ? 1 : 0;

    ret = 0;

    for (int L = 1; L <= (n - 1); ++L) {
        int R = n - 1 - L;
        int toMul = mul(C[n - 2][L - 1], mul(L, max(1, R)));
        for (int Lk = 0; Lk <= k - toMatch; ++Lk) {
            int Rk = k - toMatch - Lk;
            if (toMatch) {
                int addL = mul(rec(0, L, Lk, dp), R == 0 ? Rk == 0 ? 1 : 0 : add(rec(1, R, Rk, dp), rec(0, R, Rk, dp)));
                int addR = mul(rec(1, L, Lk, dp), R == 0 ? 0 : rec(0, R, Rk, dp));
                ret = add(ret, mul(toMul, add(addL, addR)));
            }
            else {
                ret = add(ret, mul(toMul, mul(rec(1, L, Lk, dp), rec(1, R, Rk, dp))));
            }
        }
    }
    
    return ret;
}


void work() {
    int dp[2][BUF][BUF];
    memset(dp, -1, sizeof(dp));
    cout << add(rec(0, N, K, dp), rec(1, N, K, dp)) << endl;
}


int main() {
    makeTable();
    read();
    work();
    return 0;
}
