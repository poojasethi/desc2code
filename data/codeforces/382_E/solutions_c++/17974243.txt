#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#define maxn 110
#define mo 1000000007
using namespace std;
int n, k, c[maxn][maxn];
int f[maxn][maxn][2];
bool vis[maxn][maxn][2];
void add(int &a, int b)
{
	a += b; while (a >= mo) a -= mo;
}
int dfs(int n, int m, int k)
{
	if (2 * (m + k) > n || m < 0) return 0;
	if (n == 1) return (m == 0 && k == 0);
	if (vis[n][m][k]) return f[n][m][k];
	vis[n][m][k] = 1; int &ret = f[n][m][k];
	if (k == 1) 
		add(ret, 1ll * (n - 1) * dfs(n - 1, m, 0) % mo);
	else
		add(ret, 1ll * (n - 1) * dfs(n - 1, m - 1, 1) % mo);
	if (n < 3) return ret;
	for (int i = 1; i <= n - 1 - i; ++ i){
		int j = n - 1 - i, meth = (i == n - 1 - i) ? c[n - 2][i - 1] : c[n - 1][i];
		meth = 1ll * meth * i % mo * j % mo;
		if (k == 0){
			for (int mi = 0; mi <= m - 2; ++ mi)
				add(ret, 1ll * meth * dfs(i, mi, 1) % mo * dfs(j, m - 2 - mi, 1) % mo);
		}else{
			for (int mi = 0; mi <= m - 1; ++ mi){
				add(ret, 1ll * meth * dfs(i, mi, 0) % mo * dfs(j, m - 1 - mi, 1) % mo);
				add(ret, 1ll * meth * dfs(i, mi, 1) % mo * dfs(j, m - 1 - mi, 0) % mo);
				add(ret, 1ll * meth * dfs(i, mi, 0) % mo * dfs(j, m - mi, 0) % mo);
			}
			add(ret, 1ll * meth * dfs(i, m, 0) % mo * dfs(j, 0, 0) % mo);
		}
	}
	return ret;
}
int main()
{
	scanf("%d%d", &n, &k);
	for (int i = 0; i <= n; ++ i){
		c[i][0] = 1;
		for (int j = 1; j <= i; ++ j)
			c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % mo;
	}
	printf("%d\n", (dfs(n, k - 1, 1) + dfs(n, k, 0)) % mo);
	return 0;
}


