#include <iostream>

using namespace std;

long long DP[51][2][51];

long long BIN[51][51];

const long long modp = 1000000007;

int main() {
  int n,k;
  cin >> n >> k;

  for (int i=0; i<=n; i++)
    for (int j=0; j<=i; j++)
      BIN[i][j] = j==0 ? 1 : (BIN[i-1][j-1] + BIN[i-1][j]) % modp;

  for (int i=0; i<=n; i++)
    for (int r=0; r<2; r++)
      for (int j=0; j<=k; j++)
	DP[i][r][j]=0;

  DP[1][0][0] = 1;

  for (int i=2; i<=n; i++)
    for (int j=1; j<=k; j++) {
      DP[i][0][j] = DP[i-1][1][j];
      DP[i][1][j] = DP[i-1][0][j-1];
      for (int i0=1; i0<=i-2; i0++)
	for (int j0=0; j0<=j; j0++) {
	  int i1=i-i0-1, j1=j-j0;
	  DP[i][0][j] += DP[i0][1][j0] * DP[i1][1][j1] % modp * BIN[i-2][i1] % modp;
	  DP[i][0][j] %= modp;
	  if (j0<j) 
	    DP[i][1][j] +=  
	      (DP[i0][0][j0]*(DP[i1][0][j1-1]+DP[i1][1][j1-1]) % modp 
	       + DP[i0][1][j0]*DP[i1][0][j1-1] % modp) * BIN[i-2][i1] % modp;
	  DP[i][1][j] %= modp;

	};	  
      if (i<n) DP[i][0][j] *= i, DP[i][1][j] *= i, DP[i][0][j] %= modp, DP[i][1][j] %= modp;
    };     
 
  cout << (DP[n][0][k] + DP[n][1][k]) % modp << endl;
  return 0;
};
