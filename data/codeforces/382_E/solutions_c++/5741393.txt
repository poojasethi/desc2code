#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

typedef long long i64 ;

const i64 inf = 1000000007 ;
const i64 rev = 500000004 ;

i64 d[55][55][2];
i64 c[55][55];
i64 dp(int x,int y,int k)
{
	if(d[x][y][k]!=-1)	return d[x][y][k];
	if(x==0)	return d[x][y][k]=(y==0&&k==0);
	if(x==1)	return d[x][y][k]=(y==1&&k==1);
	i64 res=0;
	if(k==1)
	{
		for(int i=0;i<x;++i)
			for(int j=0;j<y;++j)if(j<=i&&y-1-j<=x-1-i)
				res+=dp(i,j,0)*dp(x-1-i,y-1-j,0)%inf*c[x-1][i]%inf;
	}
	else
	{
		for(int i=0;i<x;++i)
			for(int j=0;j<=y;++j)if(j<=i&&y-j<=x-1-i)
				for(int k1=0;k1<2;++k1)
					for(int k2=0;k2<2;++k2)if(k1|k2)
							res+=dp(i,j,k1)*dp(x-1-i,y-j,k2)%inf*c[x-1][i]%inf;
	}
	return d[x][y][k]=res*x%inf*rev%inf;
}

i64 mod(i64 a,i64 b)
{
	i64 res=1;
	while(b)
	{
		if(b&1)	res=res*a%inf;
		b>>=1;
		a=a*a%inf;
	}
	return res;
}
int main()
{
	c[0][0]=1;
	for(int i=1;i<53;++i)
	{
		c[i][0]=1;
		for(int j=1;j<=i;++j)	c[i][j]=(c[i-1][j]+c[i-1][j-1])%inf;
	}
	memset(d,-1,sizeof(d));
	int n,k;
	cin>>n>>k;
	cout<<(dp(n,n-k,0)+dp(n,n-k,1))%inf*mod(n,inf-2)%inf<<endl;
	return 0;
}
