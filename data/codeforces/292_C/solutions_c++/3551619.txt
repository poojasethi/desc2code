#include <iostream>
#include <vector>
#include <stdio.h>
#include <algorithm>
#include <string>
#include <string.h>
using namespace std;
int q[15];
int w[15];
int a[5];
int v[15];
int n,m,l;
string ans[1000005];
int ind[1000005];
int t=0;
bool check(int x)
{
	if (x>=0 && x<=255) {return 1;}
	return 0;
}
void add()
{
	t++;
	char c[20];
	sprintf(c,"%d.%d.%d.%d",a[3],a[2],a[1],a[0]);
	ans[t]=c;
	ind[t]=t;
}
void dfs2(int x,int c)
{
	if (x>l) {return;}
	if (c==0)
	{
		int i=0;
		if (l-x+1>1 && w[x]==0) {return;}
		for (x;x<=l;x++) {i=i*10+w[x];}
		if (check(i))
		{
			a[0]=i;
			add();
		}
		return;
	}
	if (w[x]==0)
	{
		a[c]=0;
		dfs2(x+1,c-1);
	}
	else
	{
		int i=0;
		for (x;x<=l;x++)
		{
			i=i*10+w[x];
			if (check(i))
			{
				a[c]=i;
				dfs2(x+1,c-1);
			}
			else
			{
				break;
			}
		}
	}
}
void dfs1(int x)
{
	if (x>m)
	{
		int i,j,k;
		for (i=1;i<=n;i++) {if (v[i]==0) {return;}}
		for (i=l;i>m;i--) {w[i]=w[l-i+1];}
		dfs2(1,3);
		return;
	}
	for (int i=1;i<=n;i++)
	{
		w[x]=q[i];
		v[i]++;
		dfs1(x+1);
		v[i]--;
	}
}
bool cmp(int i,int j)
{
	return ans[i]<ans[j];
}
int main()
{
	cin>>n;
	int i,j,k;
	for (i=1;i<=n;i++)
	{
		cin>>q[i];
	}
	for (l=4;l<=12;l++)
	{
		m=(l+1)/2;
		memset(v,0,sizeof(v));
		dfs1(1);
	}
	sort(ind+1,ind+1+t,cmp);
	cout<<t<<endl;
	for (i=1;i<=t;i++)
	{
		puts(ans[ind[i]].c_str());
	}
}