#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
using namespace std;
vector<int> digit,a;
vector<vector<int> > ans;
int d[15];
long long pow(int n)
{
	long long res=1;
	for(int i=0;i<n;i++)
	{
		res*=2;
	}
	return res;
}
void dfs(int n,int m) 
{
  	if(n==4) 
  	{
    	if(d[m]==(-1)) 
		{
      		ans.push_back(a);
    	}
  	} 
	else if(d[m]==0) 
  	{
    	a[n]=0;
    	dfs(n+1,m+1);
  	} 
	else 
	{
    	a[n]=0;
    	for(int i=m;d[i]!=(-1);i++) 
    	{
      		a[n]=a[n]*10+d[i];
      		if(a[n]<256)
			{
        		dfs(n+1,i+1);
      		}
    	}
  	}
}
void out(int l,int r,int k)
{
	if(l<=r)
	{
		 for(int i=0;i<digit.size();i++) 
		 {
      		d[l]=d[r]=digit[i];
      		out(l+1,r-1,k & ~pow(i));
    	 }
  	} 
	else if(k==0) 
	{
   	 	dfs(0,0);
  	}
}
int main()
{
  	int n;
  	cin>>n;
  	if(n>6)
  	{
  		cout<<0<<endl;
  		return 0;
  	}
  	for(int i=0;i<n;i++) 
  	{
    	 int x;
    	 cin>>x;
    	 digit.push_back(x);
  	}
  	a.resize(4);
  	for(int i=4;i<=12;i++) 
	{
    	d[i]=(-1);
    	out(0,i-1,pow(n)-1);
  	}
  	cout<<ans.size()<<endl;
  	for(int i=0;i<ans.size();i++)
  	{
    	cout<<ans[i][0]<<"."<<ans[i][1]<<"."<<ans[i][2]<<"."<<ans[i][3]<<endl;
  	}
  	return 0;
}

