#include<stdio.h>
#include<iostream>
#include<string>

using namespace std;

const int maxn=15;

int cnt=0;string ans[100010];
int a[maxn];
int b[maxn],n;
int len,l;
int c[maxn];

int _max(int x,int y) {
	return x>y?x:y;
}

string s[4];
void print() {
	ans[++cnt]=s[0]+"."+s[1]+"."+s[2]+"."+s[3];
}

void dfs(int dep,int k) {
	if ((len-k)<(4-dep) || (4-dep+1)*3<(len-k+1)) return;
	if (dep==5) {
		if (k==len+1) print();
		return;
	}
	if (c[k]==0) {
		s[dep-1]="0";
		dfs(dep+1,k+1);
		return;
	}
	s[dep-1]="";int num=0;
	for (int i=0;i<3;i++) {
		num=num*10+c[i+k];
		if (num>255) return;
		s[dep-1]+=(char)(c[i+k]+'0');
		dfs(dep+1,k+i+1);
	}
}

void Glimmer() {
	for (int i=1;i<=len;i++) {
		c[i]=b[a[i]];
	}
	dfs(1,1);
}

int hash[maxn];
bool check_used() {
	for (int i=1;i<=n;i++) hash[i]=0;
	int k=0;
	for (int i=1;i<=l;i++)
		if (!hash[a[i]]) k+=(hash[a[i]]=1);
	if (k==n) return true;
	return false;
}

int main() {
	scanf("%d",&n);
	if (n>=7){
		printf("0\n");
		return 0;
	}
	for (int i=1;i<=n;i++)
		scanf("%d",b+i);
		
	for (len=max(4,n*2-1);len<=12;len++) {
		a[0]=0;l=(len+1)/2;
		for (int i=1;i<=l;i++) a[i]=1;
		while (!a[0]) {
			int j;
			for (j=l+1;j<=len;j++) a[j]=a[len+1-j];
			if (check_used())
				Glimmer();
			for (j=l;a[j]==n;j--) {
				a[j]=1;
			}
			a[j]++;
		}
	}
	
	printf("%d\n",cnt);
	for (int i=1;i<=cnt;i++)
		cout<<ans[i]<<endl;
	
	return 0;
}

    	  	 		 	  		    		 	 	  	