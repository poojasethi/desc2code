#include <cstdio>
#include <algorithm>
#include <string.h>
#include <vector>
using namespace std;
int N,A[20],IP[20];
int have[20];
vector<vector<char> >Q;
vector<char>tmp;
void DFS(int a,int b,int c) {
	if(c>a) {
		memset(have,0,sizeof(have));
		for(int i=1;i<=a;i++) {
			have[IP[i]]=1;
			IP[b-i+1]=IP[i];
		}
		for(int i=1;i<=N;i++)if(!have[A[i]]) return ;
		for(int i=2;i<=min(b-2,4);i++) {
			int x=0;
			for(int j=1;j<i;j++)
				x=x*10+IP[j];
			if(x>255) continue ;
			if(i>2&&IP[1]==0) continue;
			for(int j=i+1;j<=b-1;j++){
				int y=0;
				for(int k=i;k<j;k++) y=y*10+IP[k];
				if(y>255) continue ;
				if(j-i>1&&IP[i]==0) continue;
				for(int k=j+1;k<=b;k++){
					int z=0;
					for(int l=j;l<k;l++) z=z*10+IP[l];
					if(k-j>1&&IP[j]==0) continue;
					if(z>255) continue ;
					z=0;
					for(int l=k;l<=b;l++) z=z*10+IP[l];
					if(b-k+1>1&&IP[k]==0) continue;
					if(z>255) continue; 
					tmp.clear();
					for(int p=1;p<=b;p++) {
						if(i==p||j==p||k==p) tmp.push_back('.');
						tmp.push_back(IP[p]+'0');
					}
					Q.push_back(tmp);
				}
			}
		}
		return ;
	}
	for(int i=1;i<=N;i++)IP[c]=A[i],DFS(a,b,c+1);
}
int main()
{
	scanf("%d",&N);
	for(int i=1;i<=N;i++)scanf("%d",A+i);
	if(N>6) {
		puts("0");
		return 0;
	}
	for(int i=max(N*2-1,2);i<=12;i++) {
		if(i%2==1)DFS(i/2+1,i,1);
		else DFS(i/2,i,1);
	}
	printf("%ld\n",Q.size());
	for(int i=0;i<Q.size();i++) {
		for(int j=0;j<Q[i].size();j++) printf("%c",Q[i][j]);
		puts("");
	}
	return 0;
}
