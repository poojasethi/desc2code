#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

int p[15];
int a[11];
int c[4];
int w[11];
int res[100003][4];
int n, h;

inline void output(int k, int d, int l)
{
    if (k < 0) {
        if (d == l)
            memmove(res[h++], c, sizeof(c));
        return ;
    }
    c[k] = 0;
    for (int i = d; i <= l-1-k && i < d+3; ++i) {
        c[k] = c[k] * 10 + p[i];
        if ((p[d]>0 || c[k]==0 && i==d) && c[k] <= 255 && i >= l-1-k*3)
            output(k-1, i+1, l);
    }       
}

inline void find(int k, int l)
{
    if (k+1-(l&1)>l>>1) {
        int i;
        for (i = 0; i < n; ++i)
        if (w[i] == 0)
            break;
        if (i == n)
            output(3, 0, l);
        return;
    }
    for (int i = 0; i < n; ++i) {
        ++w[i];
        p[k] = p[l-k-1] = a[i];
        find(k+1, l);
        --w[i];
    }
    p[k] = p[l-k] = 0;
}

int main()
{
    scanf("%d", &n);
    for (int i = 0; i < n; ++i)
        scanf("%d", &a[i]);
    sort(a, a+n);
    h = 0;
    for (int i = n>4?n:4; i < 13; ++i) {
        memset(p, 0, sizeof(p));
        find(0, i); 
    }
    printf("%d\n", h);
    for (int i = 0; i < h; ++i)
        for (int j = 3; j >= 0; --j)
            printf("%d%c", res[i][j], (j?'.':'\n'));
    return 0;
}