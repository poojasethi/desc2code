#include <cstdio>
#include <vector>
using namespace std;
int n, digit[11];
vector <int> d, ip;
vector < vector<int> > ans;

void check(int depth, int now)
{
    if (depth == 4)
    {
        if (d[now] == -1)
            ans.push_back(ip);
        return ;
    }
    if (d[now] == 0)
    {
        ip[depth] = 0;
        check(depth + 1, now + 1);
        return;
    }
    ip[depth] = 0;
    for (int i = now; d[i] != -1; i++)
    {
        ip[depth] = ip[depth] * 10 + d[i];
        if (ip[depth] < 256)
            check(depth + 1, i + 1);
    }
}

void dfs(int l, int r, int mask)
{
    if (l <= r)
    {
        for (int i = 0; i < n; i++)
        {
            d[l] = d[r] = digit[i];
            dfs(l + 1, r - 1, mask & ~(1 << i));
        }
    }
    else if (mask == 0)
        check(0, 0);
}
int main()
{
   // freopen("nimo.in", "r", stdin);
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        scanf("%d", &digit[i]);
    ip.resize(4);
    d.resize(14);
    for (int i = 4; i <= 12; i++)
    {
        d[i] = -1;
        dfs(0, i-1, (1 << n) - 1);
    }
    printf("%d\n", ans.size());
    for (int i = 0; i < ans.size(); i++)
        printf("%d.%d.%d.%d\n", ans[i][0], ans[i][1], ans[i][2], ans[i][3]);
    return 0;
}