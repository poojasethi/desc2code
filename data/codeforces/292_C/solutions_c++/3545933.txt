#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
using namespace std;

int n, ret, a[15], b[15];
char s[15];
unsigned char rec[1000000][4];

void dfs(char s[], int x, int y, int l){
	if (x == l){
		if (y == 3){
			FOR(i,0,4) rec[ret][i] = b[i];
			++ret;
		}
	}
	else{
		int t = b[y];
		if (b[y] != 0){
			if (b[y] == -1) b[y] = s[x] - '0';
			else b[y] = b[y] * 10 + s[x] - '0';
			if (b[y] < 256) dfs(s, x + 1, y, l);
		}
		b[y] = t;
		if (b[y] != -1 && y < 3){
			b[y+1] = s[x] - '0';
			dfs(s, x + 1, y + 1, l);
			b[y+1] = -1;
		}
	}
}

void check(char s[]){
	int l = strlen(s);
	CLR(b, -1);
	dfs(s, 0, 0, l);
}

void dfs(int x, int mask){
	if (x){
		FOR(i,0,x) s[x+x-1-i] = s[i];
		s[x+x] = 0;
		if (mask == (1<<n) - 1) check(s);
	}
	if (x == 6) return;
	FOR(j,0,n){
		FOR(i,0,x) s[x+x-i] = s[i];
		s[x] = a[j] + '0';
		s[x+x+1] = 0;
		if ((mask | (1<<j)) == (1<<n) - 1) check(s);
 	}

	FOR(i,0,n){
		s[x] = a[i] + '0';
		dfs(x + 1, mask | (1<<i));
	}
}

int main(){
	scanf("%d", &n);
	FOR(i,0,n) scanf("%d", &a[i]);
	dfs(0, 0);
	
	printf("%d\n", ret);
	FOR(i,0,ret) printf("%u.%u.%u.%u\n", rec[i][0], rec[i][1], rec[i][2], rec[i][3]);
	return 0;
}
