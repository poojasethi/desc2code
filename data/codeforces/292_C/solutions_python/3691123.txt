# coding=utf-8
"""
C. Красивые IP-адреса
ограничение по времени на тест:2 секунды
ограничение по памяти на тест:256 мегабайт
ввод:standard input
вывод:standard output

В задаче используется упрощенная модель адресов в TCP/IP, внимательно прочтите условие.

IP-адрес — это 32-битное число, представленное в виде четверки десятичных 8-битных чисел (без лидирующих нулей),
записанных через точку. Например, запись 0.255.1.123 обозначает корректный IP-адрес, а записи 0.256.1.123 и
0.255.1.01 — нет. В данной задаче произвольная четверка 8-битных чисел является корректным IP-адресом.

Наш герой Поликарп до сих пор работает системным администратором в некоторой большой корпорации. Ему нравятся красивые
IP-адреса. Чтобы проверить, является ли некоторый IP-адрес красивым, нужно сделать следующее:

 выписать в строку четверку 8-битных чисел IP-адреса, пропуская точки;
 проверить, является ли получившаяся строка палиндромом.


Напомним, что палиндромом называется строка, которая одинаково читается справа налево и слева направо.

Например IP-адреса 12.102.20.121 и 0.3.14.130 являются красивыми (поскольку строки «1210220121» и «0314130» являются
палиндромами), а IP-адреса 1.20.20.1 и 100.4.4.1 — нет.

Поликарп хочет найти все красивые IP-адреса, в которых встречается заданный набор цифр. Каждая цифра из набора должна
встречаться в IP-адресе не менее одного раза, никакие другие цифры не должны встречаться в IP-адресе. Помогите ему
справиться с этой нелегкой задачей.
Входные данные

В первой строке задано единственное целое число n (1 ≤ n ≤ 10) — количество цифр в наборе. Во второй строке задан набор
цифр a1, a2, ..., an (0 ≤ ai ≤ 9). Гарантируется, что все цифры в наборе различны.
Выходные данные

В первую строку выведите единственное число k — количество красивых IP-адресов, которые содержат заданный набор цифр.
Далее в k строк выведите сами IP-адреса по одному в строке в произвольном порядке.
"""
from itertools import product
from sys import stdin


def main():
    n = int(stdin.readline())
    str_numbers = stdin.readline().split()
    numbers = map(int, str_numbers)
    if len(numbers) > 6:
        print 0
        quit()

    zeroed = list(str_numbers)
    zeroed.append('')

    lines = set()
    s = set([''.join(i) for i in product(zeroed, zeroed, zeroed, zeroed, str_numbers, str_numbers)])
    for line in s:
        if len(line) > 1:
            if len(set(line)) < n:
                continue
            lines.add('%s%s' % (line, line[::-1]))
            if len(line) > 2:
                ch = line[-1]
                line = line[:-1]
                lines.add('%s%s%s' % (line, ch, line[::-1]))
    lines = sorted(lines)

    ips = []
    r = range(1, 4)
    for s in lines:
        for p1 in r:
            for p2 in r:
                for p3 in r:
                    s4 = s[p1 + p2 + p3:]
                    if len(s4) == 0: continue
                    if s4[0] == '0' and len(s4)>1: continue
                    if len(s4) > 3: continue
                    if int(s4) > 255: continue
                    s1 = s[:p1]
                    if s1[0] == '0' and len(s1)>1: continue
                    if int(s1) > 255: continue
                    s2 = s[p1:p1 + p2]
                    if s2[0] == '0' and len(s2)>1: continue
                    if int(s2) > 255: continue
                    s3 = s[p1 + p2:p1 + p2 + p3]
                    if s3[0] == '0' and len(s3)>1: continue
                    if int(s3) > 255: continue
                    ip = '%s.%s.%s.%s' % (s1, s2, s3, s4)
                    ips.append(ip)

    print len(ips)
    for ip in ips:
        print ip


main()