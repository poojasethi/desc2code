//Three Arrays
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cassert>
#include<set>
#include<vector>
#define rep(i,l,r) for(int i=l;i<=r;i++)
#define red(i,r,l) for(int i=r;i>=l;i--)
#define re(i,n) for(int i=0;i<n;i++)
#define db(x) cout<<#x<<"="<<(x)<<" "
#define el cout<<endl
#define PII pair<int,int>
#define c0 first
#define c1 second
#define sit set<PII>::iterator
using namespace std;
const int MXN=300010,inf=~0U>>2;

int N;
int A[3][MXN];
int sa[MXN],n=0;

struct tri{
	int c[3];
};
bool cmp(const tri&a,const tri&b){
	return a.c[0]>b.c[0];
}

tri th[MXN];

void init(){
	scanf("%d",&N);
	re(k,3)
	rep(i,1,N) scanf("%d",&A[k][i]),sa[++n]=A[k][i];
	sort(sa+1,sa+n+1);
	n=unique(sa+1,sa+n+1)-sa-1;
	rep(i,1,n)
	re(k,3) th[i].c[k]=N*3;
	re(k,3)
	rep(i,1,N){
		static int x;
		A[k][i]=x=lower_bound(sa+1,sa+n+1,A[k][i])-sa;
		th[x].c[k]=min(th[x].c[k],i);
	}
}


namespace solve{
	set<PII> S;
	multiset<int> Q;
	int answer=inf;
	void hi(int x,int y){
		//db(x),db(y),db(1),el;
		Q.insert(x+y);
	}
	void bye(int x,int y){
		//db(x),db(y),db(-1),el;
		Q.erase(Q.find(x+y));
	}
	void ins(int x,int y){
		//cout<<"ins ";db(x),db(y),el;
		sit s=S.lower_bound(PII(x,y));
		if (s->c1>=y) return;
		sit p=s,q=p--;
		bye(p->c0,q->c1);
		while (p->c1<=y){
			if (p==S.begin()){
				cout<<"ERROR"<<endl;return;
			}
			q=p--;
			bye(p->c0,q->c1);
			S.erase(q);
		}
		S.insert(PII(x,y));
		hi(p->c0,y);
		hi(x,s->c1);
		//db(*Q.begin()),el;el;
	}
	void solve(){
		sort(th+1,th+n+1,cmp);
		S.insert(PII(0,inf));
		S.insert(PII(inf,0));
		hi(0,0);
		rep(i,1,n){
			answer=min(answer,th[i].c[0]+*Q.begin());
			int j=i;
			while (j<n&&th[j].c[0]==th[j+1].c[0]) j++;
			rep(k,i,j) ins(th[k].c[1],th[k].c[2]);
			i=j;
		}
		answer=min(answer,*Q.begin());
		printf("%d\n",answer);
	}
}


int main(){
	init();
	solve::solve();
	return 0;
}
