#include <cstdio>
#include <algorithm>
#include <map>
#include <set>
using namespace std;
typedef pair <int, int> PII;
const int INF=1e7;
const int MN=1e5+7;
struct int3{
    int a[3];
    bool operator < (const int3 &x) const { return a[0]<x.a[0]; }
} ept={INF,INF,INF};
int n,t,ans=INF;
int3 f[MN*3];
map <int, int3> mp;
map <int, int3>::iterator mi;
set <PII> u;
set <PII> ::iterator ui,ii;
multiset <int> res;

void gao(int x, int y){
    ui=u.upper_bound(PII(x,y));
    if (ui->second>=y) return;
    PII pre=*ui;
    ii=ui; ii--;
    while (ii->second<=y){
        res.erase(res.find(ii->first+pre.second));
        pre=*ii; ii--; u.erase(pre);
    }
    res.erase(res.find(ii->first+pre.second));
    res.insert(ii->first+y);
    res.insert(x+ui->second);
    u.insert(PII(x,y));
}

int main(){
    scanf("%d",&n);
    int i,j,k;
    for (i=0; i<3; i++){
        for (j=1; j<=n; j++){
            scanf("%d",&k);
            if (mp.find(k)==mp.end()) mp[k]=ept;
            mp[k].a[i]=min(mp[k].a[i],j);
        }
    }
    for (mi=mp.begin(); mi!=mp.end(); mi++) f[t++]=mi->second;
    sort(f,f+t);
    u.insert(PII(0,INF*2));
    u.insert(PII(INF*2,0));
    res.insert(0);
    k=INF;
    for (i=t-1; i>=0; i--){
        ans=min(ans,*res.begin()+f[i].a[0]);
        gao(f[i].a[1],f[i].a[2]);
    }
    ans=min(ans,*res.begin()+f[i].a[0]);
    printf("%d\n",ans);
    return 0;
}
