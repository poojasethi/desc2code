#include<bits/stdc++.h>

using namespace std;

#define pii pair<int,int>
#define ll long long
#define N (int)(1e5+10)
#define mod 1000000007
#define mp make_pair
#define pb push_back
#define nd second
#define st first
#define inf mod
#define endl '\n'
#define sag (sol|1)
#define sol (root<<1)
#define ort ((bas+son)>>1)
#define bit(x,y) ((x>>y)&1)

int i,j,k,n,m,x,y,z,a[N],b[N],c[N];
int L[4*N],St[4*N],aa[4*N],bb[4*N];
pair< int , pii > A[3*N];
map< int , int > H;
vector<int> v;

void push(int root){
	if(L[root]){
		bb[sol] = bb[sag] = L[sol] = L[sag] = L[root];
		St[sag] = L[root] + aa[sag];
		St[sol] = L[root] + aa[sol];
		L[root] = 0;
	}
}

int que(int root,int bas,int son,int x){
	if(bas > x or son < x)
		return 0;

	if(bas == son)
		return bb[root];

	push(root);

	return que(sol,bas,ort,x) + que(sag,ort+1,son,x);
}

int upd2(int root,int bas,int son,int x,int y,int t){
	if(bas > y or son < x)
		return St[root];

	if(x <= bas and son <= y){
		L[root] = bb[root] = t;
		return St[root] = t + aa[root];
	}

	push(root);

	upd2(sol,bas,ort,x,y,t);
	upd2(sag,ort+1,son,x,y,t);

	bb[root] = max(bb[sol],bb[sag]);
	St[root] = min(St[sol],St[sag]);
}

int upd1(int root,int bas,int son,int x){
	if(bas > x or son < x)
		return St[root];

	if(bas == son){
		aa[root] = x;
		return St[root] = x + bb[root];
	}

	push(root);

	upd1(sol,bas,ort,x);
	upd1(sag,ort+1,son,x);

	aa[root] = min(aa[sol],aa[sag]);
	St[root] = min(St[sol],St[sag]);
}

void init(int root,int bas,int son){
	if(bas == son){
		aa[root] = St[root] = inf;
		bb[root] = L[root] = 0;
		return;
	}

	init(sol,bas,ort);
	init(sag,ort+1,son);
	aa[root] = inf;
	St[root] = inf;
}

int main(){
	cin >> n;

	for(i=1 ; i<=n ; i++){ scanf("%d",a+i); v.pb(a[i]);}
	for(i=1 ; i<=n ; i++){ scanf("%d",b+i); v.pb(b[i]);}
	for(i=1 ; i<=n ; i++){ scanf("%d",c+i); v.pb(c[i]);}

	sort(v.begin(),v.end());

	int s=1;

	H[v[0]] = 1; 

	for(i=1 ; i<v.size() ; i++)
		if(v[i-1] != v[i])
			H[v[i]] = ++s;

	memset(A,5,sizeof A);

	for(i=1;i<=n;i++) A[H[a[i]]].st = min(A[H[a[i]]].st,i);
	for(i=1;i<=n;i++) A[H[b[i]]].nd.st = min(A[H[b[i]]].nd.st,i);
	for(i=1;i<=n;i++) A[H[c[i]]].nd.nd = min(A[H[c[i]]].nd.nd,i);

	sort(A+1,A+1+s);

	init(1,0,n);

	A[0].st=0;

	int ans = A[s].st;

	for(i=s ; i>=1 ; i--){
		if(A[i].nd.st<=n)
			upd1(1,0,n,A[i].nd.st);

		int bas=0;
		int son=min(A[i].nd.st-1,n);

		while(bas < son){
			if(que(1,0,n,ort) > A[i].nd.nd)
				bas=ort+1;
			else
				son=ort;
		}

		if(que(1,0,n,bas) <= A[i].nd.nd){
			upd2(1,0,n,bas,min(n,A[i].nd.st-1),A[i].nd.nd);
		}

		ans = min(ans,St[1]+A[i-1].st);
		ans = min(ans,bb[1]+A[i-1].st);
	}

	cout << ans << endl;
}
