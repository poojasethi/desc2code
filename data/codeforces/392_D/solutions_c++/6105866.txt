#include <algorithm>
#include <cstdio>
#include <set>
using namespace std;

typedef pair<int, int> P;

const int maxn = 300010;

int a[maxn], b[maxn], c[maxn];
int A[maxn], B[maxn], C[maxn];
int V[maxn];
int id[maxn];
set<P> H; multiset<int> res;

bool cmp(const int &i, const int &j) {
    return A[i] > A[j];
}

typedef set<P> :: iterator it;
void ins(P z) {
    it i, l, r;
    r = H.lower_bound(z); if (r->second >= z.second) return;
    i = H.insert(z).first; l = i; -- l; res.erase(res.lower_bound(l->first+r->second)); res.insert(i->first+r->second);
    while (i->second > l->second) {
        r = l --;
        res.erase(res.lower_bound(l->first+r->second));
        H.erase(r);
    }
    res.insert(l->first+i->second);
}

int n;
int main() {
//  freopen("input.txt", "r", stdin);
    
    scanf("%d", &n); int m = 0;
    for (int i = 0; i < n; ++ i) { scanf("%d", &a[i]); V[m ++] = a[i]; }
    for (int i = 0; i < n; ++ i) { scanf("%d", &b[i]); V[m ++] = b[i]; }
    for (int i = 0; i < n; ++ i) { scanf("%d", &c[i]); V[m ++] = c[i]; }
    sort(V, V+m); m = unique(V, V+m) - V;
    for (int i = 0; i < n; ++ i) a[i] = lower_bound(V, V+m, a[i]) - V;
    for (int i = 0; i < n; ++ i) b[i] = lower_bound(V, V+m, b[i]) - V;
    for (int i = 0; i < n; ++ i) c[i] = lower_bound(V, V+m, c[i]) - V;
    for (int i = 0; i < m; ++ i) A[i] = B[i] = C[i] = n*3;
    for (int i = 0; i < n; ++ i) if (A[a[i]] > n) A[a[i]] = i+1;
    for (int i = 0; i < n; ++ i) if (B[b[i]] > n) B[b[i]] = i+1;
    for (int i = 0; i < n; ++ i) if (C[c[i]] > n) C[c[i]] = i+1;
    
    for (int i = 0; i <= m; ++ i) id[i] = i; sort(id, id+m, cmp); A[m] = 0;
    H.insert(P(0, n*4)); H.insert(P(n*4, 0)); res.insert(0);
    int ans = A[id[0]];
    for (int i = 0; i < m; ++ i) {
        ins(P(B[id[i]], C[id[i]]));
        ans = min(ans, *res.begin() + A[id[i+1]]);
    }
    printf("%d\n", ans);
    
//  for(;;);
    return 0;
}
