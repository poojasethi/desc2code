#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
using namespace std;

typedef pair<int,int> pr;
#define X first
#define Y second
set<pr> tr;
multiset<int> an;
#define N 300005
int a[N],b[N],c[N],fira[N],firb[N],firc[N],n,bin[N],id[N],m=0;

int cmp(int x,int y){
	return fira[x]>fira[y];
}
void ins(pr u){
	set<pr>::iterator l,i,r=tr.lower_bound(u);
	if(r->Y>=u.Y)	return;
	i=tr.insert(u).X;
	l=i;l--;
	an.erase(an.lower_bound(l->X+r->Y));
	an.insert(i->X+r->Y);
	while(l->Y < i->Y){
		r=l--;
		an.erase(an.lower_bound(l->X+r->Y));
		tr.erase(r);
	}
	an.insert(l->X+i->Y);
}

int main(){
	scanf("%d",&n);
	for(int i=0;i<n;i++)	scanf("%d",&a[i]),bin[m++]=a[i];
	for(int i=0;i<n;i++)	scanf("%d",&b[i]),bin[m++]=b[i];
	for(int i=0;i<n;i++)	scanf("%d",&c[i]),bin[m++]=c[i];
	sort(bin,bin+m);
	m=unique(bin,bin+m)-bin;
	for(int i=0;i<n;i++){
		a[i]=lower_bound(bin,bin+m,a[i])-bin;
		b[i]=lower_bound(bin,bin+m,b[i])-bin;
		c[i]=lower_bound(bin,bin+m,c[i])-bin;
		if(!fira[a[i]])	fira[a[i]]=i+1;
		if(!firb[b[i]])	firb[b[i]]=i+1;
		if(!firc[c[i]])	firc[c[i]]=i+1;
	}
	for(int i=0;i<m;i++){
		if(!fira[i])	fira[i]=5*n;
		if(!firb[i])	firb[i]=5*n;
		if(!firc[i])	firc[i]=5*n;
	}
	for(int i=0;i<=m;i++)	id[i]=i;
	fira[m]=0;	sort(id,id+m,cmp);
	an.insert(0);
	int ans=fira[*id];
	tr.insert(make_pair(7*n,0));
	tr.insert(make_pair(0,7*n));
	for(int i=0;i<m;i++){
		ins(make_pair(firb[id[i]],firc[id[i]]));
		ans=min(ans,fira[id[i+1]]+*an.begin());
	}
	cout << ans << endl;
	return 0;
}
