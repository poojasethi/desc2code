#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<set>
#define N 300005
#define PAIR pair<int,int>
#define LL long long
#define oo (1<<30)
using namespace std;
multiset<int> R; set<PAIR> S;
int n,a[N],b[N],c[N],A[N],B[N],C[N],w[N],id[N],m,ans;
bool cmp(int x,int y){ return A[x]>A[y];}
void insert(PAIR now)
{
	set<PAIR> :: iterator i,j,k;
	k=S.lower_bound(now);
	if(k->second>=now.second) return ;
	S.insert(now),i=S.find(now),j=i,j--;
	R.erase(R.find(j->first+k->second));
	R.insert(now.first+k->second);
	R.insert(j->first+now.second);
	while(j->second<=now.second){
		i=j,j--;
		R.erase(R.find(j->first+ i->second));
		R.erase(R.find(i->first+now.second));
		S.erase(i);
		R.insert(j->first+now.second);
	  }
}
int main()
{
	int i;
	scanf("%d",&n);
	for(i=1;i<=n;i++) scanf("%d",&a[i]),w[++m]=a[i];
	for(i=1;i<=n;i++) scanf("%d",&b[i]),w[++m]=b[i];
	for(i=1;i<=n;i++) scanf("%d",&c[i]),w[++m]=c[i];
	sort(w+1,w+m+1);
	m=unique(w+1,w+m+1)-w-1;
	for(i=1;i<=n;i++) a[i]=lower_bound(w+1,w+m+1,a[i])-w;
	for(i=1;i<=n;i++) b[i]=lower_bound(w+1,w+m+1,b[i])-w;
	for(i=1;i<=n;i++) c[i]=lower_bound(w+1,w+m+1,c[i])-w;
	for(i=1;i<=m;i++) A[i]=B[i]=C[i]=3*n+1 ,id[i]=i;
	for(i=n;i>=1;i--) A[a[i]]=i,B[b[i]]=i,C[c[i]]=i;
	sort(id+1,id+m+1,cmp);
	S.insert(PAIR(0,3*n+2));
	S.insert(PAIR(3*n+2,0));
	R.insert(0),ans=A[id[1]];
	for(i=1;i<=m;i++){
		insert(PAIR(B[id[i]],C[id[i]]));
		ans=min(ans,A[id[i+1]]+(*R.begin()));
	  }
	cout<<ans;
	return 0;
}
