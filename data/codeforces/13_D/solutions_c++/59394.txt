#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
#include <cmath>
#include <string>
#include <map>
using namespace std;
typedef long long ll;

struct Point{
	ll x, y;
	bool operator < (const Point &tp)const {
		if(x == tp.x)return y < tp.y;
		return x < tp.x;
	}
};

const int MAXN = 512;

Point red[MAXN], blue[MAXN];
ll dp[MAXN][MAXN];

inline bool cross(ll x1, ll y1, ll x2, ll y2){
	return (x1*y2)>(x2*y1);
}

int main()
{
	int n, m, res;
	cin>>n>>m;
		memset(dp, 0, sizeof(dp));
		for(int i = 0; i < n; ++i)
			cin>>red[i].x>>red[i].y;
		sort(red, red+n);
		for(int j = 0; j < m; ++j)
			cin>>blue[j].x>>blue[j].y;
		sort(blue, blue+m);
		
		for(int i = 0; i < n; ++i)
			for(int j = i+1; j < n; ++j)
				for(int k = 0; k < m; ++k){
					if(blue[k].x <= red[i].x)continue;
					if(blue[k].x > red[j].x)break;
					if(cross(blue[k].x-red[i].x, blue[k].y-red[i].y, red[j].x-red[i].x, red[j].y-red[i].y))
						dp[i][j]++;
				}
		res = 0;
		for(int i = 0; i < n; ++i)
			for(int j = i+1; j < n; ++j)
				for(int k = j+1; k < n; ++k)
					if(dp[i][j] + dp[j][k] == dp[i][k])++res;
		cout<<res<<endl;
	
	return 0;
}
	
