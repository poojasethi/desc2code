#include <iostream>
#include <algorithm>
#include <complex>
using namespace std;
#define FOR(i,a,b) for(i=a;i<=b;i++)
#define X real()
#define Y imag()

typedef complex<int> point;
typedef long long LL;

point a[600],b[600];
int cnt[600][600];

bool cmp(const point &a,const point &b){if (a.X==b.X) return a.Y<b.Y;return a.X<b.X;}

bool above(point a,point b,point c){
        b-=a;c-=a;
        return LL(b.X)*LL(c.Y)-LL(b.Y)*LL(c.X)>0;
}

int main(){
        int n,m,i,j,k;
        cin>>n>>m;
        FOR(i,1,n) cin>>a[i].X>>a[i].Y;
        sort(a+1,a+n+1,cmp);
        FOR(i,1,m) cin>>b[i].X>>b[i].Y;
        FOR(i,1,n)FOR(j,i+1,n)if (a[i].X!=a[j].X){
                FOR(k,1,m) if (b[k].X>a[i].X&&b[k].X<=a[j].X&&above(a[i],a[j],b[k])) cnt[i][j]++;
        }
        int ans=0;
        FOR(i,1,n)FOR(j,i+1,n)FOR(k,j+1,n) if (cnt[i][k]==cnt[i][j]+cnt[j][k]) ans++;
        cout<<ans<<endl;
        return 0;
}
