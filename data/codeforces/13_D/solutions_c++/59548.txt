#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long LL;
#define FOR(i,s,e) for(int i=(s);i<(int)(e);i++)
const int M = 1000;

struct P {
    LL x, y;
    P(){ }
    P(LL x,LL y):x(x),y(y){ }
    void eat() { scanf("%I64d%I64d", &x, &y); }
    LL operator^(P p) { return x * p.y - y * p.x; }
    P operator-(P p) { return P(x-p.x, y-p.y); }
    P operator+(P p) { return P(x+p.x, y+p.y); }
    bool operator<(const P &p) const{
        if (x == p.x)   return y < p.y;
        return x < p.x;
    }
};

bool ccw(P a, P b, P c) {
    return ((b-a)^(c-a)) > 0;
}

int n, m;
P a[M], b[M];
LL cnt[M][M];

int main() {
    scanf("%d%d", &n, &m);
    FOR(i,0,n) a[i].eat();
    FOR(j,0,m) b[j].eat();
    sort(a, a+n);
    memset(cnt,0,sizeof(cnt));
    FOR(i,0,n) FOR(j,i+1,n) if (a[i].x != a[j].x) {
        FOR(k,0,m) if (a[i].x <= b[k].x && b[k].x < a[j].x) {
            if (ccw(a[i], a[j], b[k]))
                cnt[i][j] ++;
        }
    }
    LL ans = 0;
    FOR(i,0,n) FOR(j,i+1,n) FOR(k,j+1,n) {
        if (cnt[i][j] + cnt[j][k] - cnt[i][k] == 0)
            ans ++;
    }
    printf("%I64d\n", ans);
    return 0;
}
