
#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long LL;
const int maxn = 501;
int n, m, cnt, g[maxn][maxn];
struct point_t {
	LL x, y;
	point_t() { }
	point_t(LL tx, LL ty) : x(tx), y(ty) { }
	bool operator<(const point_t &r) const {
		return x == r.x ? y < r.y : x < r.x;
	}
	point_t operator-(const point_t &r) {
		return point_t(x - r.x, y - r.y);
	}
} red[maxn], blue[maxn];

LL cross(point_t p1, point_t p2) {
	return p1.x * p2.y - p1.y * p2.x;
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i)
		scanf("%I64d%I64d", &red[i].x, &red[i].y);
	for (int i = 1; i <= m; ++i)
		scanf("%I64d%I64d", &blue[i].x, &blue[i].y);
	sort(red + 1, red + 1 + n);
	for (int i = 1; i <= n; ++i) 
		for (int j = i + 1; j <= n; ++j) 
			for (int k = 1; k <= m; ++k) 
				if (blue[k].x >= red[i].x && blue[k].x < red[j].x && cross(red[j] - red[i], blue[k] - red[i]) >= 0) ++g[i][j];
	for (int i = 1; i <= n; ++i) 
		for (int j = i + 1; j <= n; ++j) 
			for (int k = j + 1; k <= n; ++k) 
				if (g[i][j] + g[j][k] == g[i][k]) ++cnt;
	printf("%d\n", cnt);
	return 0;
}
