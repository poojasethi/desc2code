#include <stdio.h>
#include <iostream>
#include <algorithm>
using namespace std;

#define long long long
#define f1(i,n) for (int i=1; i<=n; i++)
#define f0(i,n) for (int i=0; i<n; i++)

const int oo = 0x3c3c3c3c;

#define N 2003
int m, n, s[N][N];
char a[N][N];
int x1=-1, y1=-1, Best=oo;

int sum(int x, int y, int u, int v) {
    u=min(u, m+1), v=min(v, n+1);
    int F = s[u-1][v-1] - s[x-1][v-1] - s[u-1][y-1] + s[x-1][y-1];
    //printf ("sum(%d, %d, %d, %d) = %d\n", x, y, u, v, F);
    return F;
}

bool visit(int x, int y, int p, int q){
    if (sum(x, y, x+p, y+q) != p*q) return false;
    if (sum(x, y, m+1, n+1)==p*q) return true;
    bool Any = false;
    if (sum(x+p, 1, m+1, y+1)==0) 
    Any |= visit(x, y+1, p, q);
    if (sum(1, y+q, x+1, n+1)==0)
    Any |= visit(x+1, y, p, q);
    return Any;
}

bool ok(int p, int q){
    if (sum(1, 1, x1, y1+q)!=0) return false;
    if (sum(1, 1, x1+p, y1)!=0) return false;
    return visit(x1, y1, p, q);
}

void prepare(){
    f1(i,m) f1(j,n) s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + (a[i][j]=='X');
    f1(i,m) f1(j,n) if (a[i][j]=='X') { x1=i, y1=j; return; }
}

main(){
    scanf("%d%d", &m, &n);
    f1(i,m) scanf("%s", a[i]+1);
    prepare();  
    
    if (x1==-1 || y1==-1) 
    { cout << -1 << endl; return 0; }
    
    f1(i,m) f1(j,n) 
    if (i*j<Best && ok(i, j))
    Best=min(Best, i*j);
    
    if (Best==oo) 
        cout << -1 << endl;
    else
        cout << Best << endl;
}
