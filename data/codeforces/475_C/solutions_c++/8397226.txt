#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;
const int N = 1005;

int n,m,dp[N][N],col[N],row[N];
char mat[N][N];

inline int Getnum(int x1,int y1,int x2,int y2)
{
	return dp[x2][y2]-dp[x1-1][y2]-dp[x2][y1-1]+dp[x1-1][y1-1];
}
bool Dfs(int x,int y,int wx,int wy)
{
	if(x+wx-1>n || y+wy-1>m) return false;
	if(Getnum(x,y,x+wx-1,y+wy-1)!=wx*wy) return false;
	if(Getnum(x+wx,y,n,y)>0 && Getnum(x,y+wy,x,m)>0) return false;
	if(!Getnum(x+wx,y,n,m) && !Getnum(x,y+wy,n,m)) return true;
	if(Getnum(x+wx,y,n,y)>0) return Dfs(x+1,y,wx,wy);
	return Dfs(x,y+1,wx,wy);
}

int main()
{
	scanf("%d %d",&n,&m);
	for(int i=1;i<=n;i++) scanf("%s",mat[i]+1);
	int minx=n,miny=m;
	for(int i=1;i<=n;i++)
	{
		for(int j=1;j<=m;j++)
		{
			if(mat[i][j]=='X')
			{
				if(minx>i) minx=i;
				if(miny>j) miny=j;
				col[j]++;
				row[i]++;
			}
			dp[i][j]=dp[i][j-1]+dp[i-1][j]-dp[i-1][j-1]+(int)(mat[i][j]=='X');
		}
	}
	int minc=n,minr=m;
	for(int i=1;i<=n;i++) if(row[i]) minr=min(minr,row[i]);
	for(int j=1;j<=m;j++) if(col[j]) minc=min(minc,col[j]);

	//printf("minr=%d  minc=%d  minx=%d  miny=%d\n",minr,minc,minx,miny);

	int ans=n*m+1;
	for(int x=1;x<=minc;x++)
	{
		for(int y=1;y<=minr;y++)
		{
			if(x*y>ans) continue;
			if(Dfs(minx,miny,x,y)) ans=x*y;
		}
	}
	if(ans==n*m+1) ans=-1;
	printf("%d\n",ans);
	return 0;
}

