#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int MAXS = 1010;
const int MAXN = 510;

typedef pair<int, int> pii;

vector<int> v;
vector<pii> v2;

int dp[MAXN][MAXS];
int nx[MAXN], ans[MAXN];

struct parcel
{
	int s, e, w, p, v;
	bool operator < (parcel b) const
	{
		if (s == b.s)
			return e > b.e;
		return s < b.s;
	}
};

parcel a[MAXN];

int main()
{
	int n, s;
	cin >> n >> s;
	n++;
	for (int i = 1; i < n; i++)
		cin >> a[i].s >> a[i].e >> a[i].w >> a[i].p >> a[i].v;
	a[0].s = 0, a[0].e = 2 * n;
	sort(a, a + n);
	for (int i = n - 1; i >= 0; i--)
	{
		v.clear();
		v2.clear();
		for (int j = i + 1; j < n; j++)
			if (a[j].s >= a[i].s && a[j].e <= a[i].e)
			{
				v.push_back(j);
				int pl = v.size();
				v2.push_back(pii(a[j].e, -pl));
				v2.push_back(pii(a[j].s, pl));
			}
		sort(v2.begin(), v2.end());
		int ls = v.size();
		for (int j = (int)v2.size() - 1; j >= 0; j--)
			if (v2[j].second < 0)
				nx[-v2[j].second - 1] = ls;
			else
				ls = v2[j].second - 1;
		for (int k = 0; k <= s; k++)
		{
			ans[v.size()] = 0;
			for (int j = (int)v.size() - 1; j >= 0; j--)
			{
				ans[j] = ans[j + 1];
				if (k >= a[v[j]].w)
					ans[j] = max(ans[j], dp[v[j]][min(a[v[j]].p, k - a[v[j]].w)] + ans[nx[j]] + a[v[j]].v);
			}
			dp[i][k] = ans[0];
		}
	}
	cout << dp[0][s] << endl;
}
