#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
const int maxn=550,maxs=1050;
struct Parcel
{
	int l,r,w,s,v;
	Parcel() {}
	Parcel(int l,int r,int w,int s,int v):l(l),r(r),w(w),s(s),v(v) {}
	bool operator < (const Parcel &yy) const { return l==yy.l?r>yy.r:l<yy.l; }
	void scan() { scanf("%d%d%d%d%d",&l,&r,&w,&s,&v); }
};
int n,S,ans;
Parcel p[maxn];
int f[maxn][maxs];
int qu[maxn],en=0;
int ff[maxn*2];
bool cmp(const int &xx,const int &yy) { return p[xx].r<p[yy].r; }
int DP(int x,int rem)
{
	if(f[x][rem]) return f[x][rem];
	int i,j;
	for(i=x+1;i<=n;i++)
		if(p[i].r<=p[x].r&&p[i].w<=rem)
			DP(i,min(rem-p[i].w,p[i].s));
	en=0;
	for(i=x+1;i<=n;i++)
		if(p[i].r<=p[x].r&&p[i].w<=rem)
			qu[en++]=i;
	sort(qu,qu+en,cmp);
	for(i=0,ff[j=p[x].l]=0;i<en;i++)
	{
		int cur=qu[i];
		while(j<p[cur].r)
			j++,ff[j]=ff[j-1];
		ff[j]=max(ff[j],ff[p[cur].l]+f[cur][min(rem-p[cur].w,p[cur].s)]);
	}
	f[x][rem]=p[x].v+ff[j];
	//printf("%d %d %d\n",x,rem,f[x][rem]);
	return f[x][rem];
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("data.in","r",stdin);
	freopen("data.out","w",stdout);
#endif
	int i,j;
	scanf("%d%d",&n,&S);
	p[0]=Parcel(0,0,0,S,0);
	for(i=1;i<=n;i++)
		p[i].scan(),p[0].r=max(p[0].r,p[i].r);
	sort(p+1,p+1+n);
	//for(i=0;i<=n;i++) printf("%d %d %d %d\n",p[i].l,p[i].r,p[i].w,p[i].s);
	ans=DP(0,S);
	printf("%d\n",ans);
	return 0;
}
