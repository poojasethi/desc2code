#include <bits/stdc++.h>

using namespace std;

struct box {
	int in, out, wi, si, vi;
	box(){}
	box(int in, int out, int wi, int si, int vi): in(in), out(out), wi(wi), si(si), vi(vi){}
	bool operator<(const box &other)const {
		if (other.in != in) return in < other.in;
		return out > other.out;
	}
};

const int nmax = 510;
const int smax = 1010;
int dp[nmax + 1][smax + 1];
int dpAux[nmax + 1][smax + 1];

int next[nmax + 1];

int main() {

	int n, S;
	scanf("%d %d", &n, &S);
	vector < box > boxes;
	boxes.push_back(box(-1,2 * n + 1, 0, S, 0));
	for (int i = 0; i < n; i++) {
		int in,out,wi,si,vi;
		scanf("%d %d %d %d %d", &in, &out, &wi, &si, &vi);
		boxes.push_back(box(in,out,wi,si,vi));
	}
	sort(boxes.begin(), boxes.end());
	n++;
	for (int i = 0; i < n; i++) {
		next[i] = i;
		while (next[i] != n && boxes[next[i]].in < boxes[i].out) next[i]++;
	}

	memset(dp,0,sizeof(dp));

	for (int i = n - 1; i >= 0; i--) {
		memset(dpAux, 0, sizeof(dpAux));
		for (int j = next[i] - 1; j > i; j--) {
			for (int w = 0; w <= S; w++) {
				dpAux[j][w] = dpAux[j + 1][w];
				if (boxes[j].out <= boxes[i].out && w - boxes[j].wi >= 0)
					dpAux[j][w] = max(dpAux[j][w], boxes[j].vi + dp[j][min(w - boxes[j].wi, boxes[j].si)] + dpAux[next[j]][w]);
				dp[i][w] = max(dp[i][w], dpAux[j][w]);
			}
		}
	}

	printf("%d\n", dp[0][S]);
	return 0;
}