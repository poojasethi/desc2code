#include <cstdio>
#include <vector>
#include <utility>
#include <algorithm>
using namespace std;
struct B {
	int in, out, w, s, v;
};
B b[510];
int less(B x, B y) {
	return x.in < y.in;
}
vector<int> d[510];
int dp[510][1010];

int dfs(int x, int S) {
	if (dp[x][S] != -1) return dp[x][S];
	int ans[1010] = {};
	ans[b[x].in] = b[x].v;
	int i = 0;
	for (int j = b[x].in; j <= b[x].out; j++) {
		while (i < d[x].size() && b[d[x][i]].in < j) ++i;
		for (; i < d[x].size() && b[d[x][i]].in == j; i++) {
			int k = d[x][i];
			int out = b[k].out;
			if (b[k].w > S) {
				continue;
			}
			int s = min(S - b[k].w, b[k].s);
			ans[out] = max(ans[out], ans[j] + dfs(k, s));
		}
		ans[j+1] = max(ans[j+1], ans[j]);
	}
	return dp[x][S] = ans[b[x].out];
}
int dd[510][510];
int main() {
	int n, S;
	scanf("%d%d", &n, &S);
	for (int i = 0; i < n; i++) {
		scanf("%d%d%d%d%d", &b[i].in, &b[i].out, &b[i].w, &b[i].s, &b[i].v);
	}
	b[n].in = 0; b[n].out = 2 * n; b[n].w = 0; b[n].s = S; b[n].v = 0;
	sort(b, b+n, less);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i == j) continue;
			if (b[i].in <= b[j].in && b[j].out <= b[i].out) {
			
				d[i].push_back(j);
			}
		}
		d[n].push_back(i);
	}
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= S; j++) {
			dp[i][j] = -1;
		}
	}
	printf("%d\n", dfs(n, S));
	return 0;
}
