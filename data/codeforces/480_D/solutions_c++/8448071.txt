#include <cstdio>
#include <algorithm>
#define N 505
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
using namespace std;

int n, m, dp[N][N * 2], b[N][N * 2];
struct odp{
	int l, r, w, s, v;
} r[N];

bool cmp(odp a, odp b){
	return a.r != b.r ? a.r < b.r : a.l > b.l;
}

int go(int x, int y){
	if(dp[x][y] > -1) return dp[x][y];
	
	FI(i, 1, r[x].r + 1) b[x][i] = 0;
	fi(i, 0, x) if(r[i].l >= r[x].l && r[i].r <= r[x].r){
		if(y < r[i].w) continue;
		int v = go(i, min(r[i].s, y - r[i].w)) + r[i].v;
		
		int ret = 0;
		for(int j = r[i].l + 1; j; j ^= j & -j) ret = max(ret, b[x][j]);
		//printf("qry %d %d %d %d\n", x, y, r[i].l, ret);
		for(int j = r[i].r + 1; j <= r[x].r + 1; j += j & -j) b[x][j] = max(b[x][j], v + ret);
	}
	
	for(int i = r[x].r + 1; i; i ^= i & -i) dp[x][y] = max(dp[x][y], b[x][i]);
	//printf("%d %d %d\n", x, y, dp[x][y]);
	return dp[x][y];
}

int main(){
	scanf("%d %d", &n, &r[0].s);
	r[0].r = n + n;
	FI(i, 1, n) scanf("%d %d %d %d %d", &r[i].l, &r[i].r, &r[i].w, &r[i].s, &r[i].v);
	sort(r, r + n + 1, cmp);
	
	FI(i, 0, n) FI(j, 0, r[i].s) dp[i][j] = -1;
	
	printf("%d\n", go(n, r[n].s));
	scanf("\n");
}
