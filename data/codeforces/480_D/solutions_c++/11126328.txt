/*
 * Author: sunhaowen
 * Mail  : <sunhaowen123@gmail.com>
 *
 * File: d.cpp
 * Create Date: 2015-05-17 19:46:28
 *
 */


#include <string>
#include <vector>
#include <algorithm>

#include <stdio.h>
#include <iostream>

using namespace std;

const int N = 500;

struct parcel {
    int in, out, w, s, v;
} p[N + 5];
inline bool cmp(const parcel &x, const parcel &y) {
    return x.out < y.out || (x.out == y.out && x.in > y.in);
}

int dp[N + 5][2 * N + 5];
int f[2 * N + 5];

int main(int argc, char* argv[]) {
    int n, s;
    scanf("%d%d", &n, &s);
    p[0] = (parcel){0, 2 * N, 0, s, 0};
    for (int i = 1; i <= n; i++) {
        scanf("%d%d%d%d%d", &p[i].in, &p[i].out, &p[i].w, &p[i].s, &p[i].v);
    }

    sort(p, p + n + 1, cmp);
    for (int i = 0; i <= n; i++) {
        for (int j = p[i].w; j <= s; j++) {
            int w = min(j - p[i].w, p[i].s);
            int index = p[i].in;

            f[index] = 0;
            for (int k = 0; k < i; k++) if (p[k].in >= p[i].in) {
                while (index < p[k].out) {
                    index += 1;
                    f[index] = f[index - 1];
                }
                f[index] = max(f[index], f[p[k].in] + dp[k][w]);
            }
            dp[i][j] = f[index] + p[i].v;
        }
    }
    printf("%d\n", dp[n][s]);
    
    return 0;
}
