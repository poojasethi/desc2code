#include <cstdio>
#include <algorithm>

#define N 510
#define M 1010
#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))

struct parcel {
	int in, out;
	int w, s, v;
	parcel (int i = 0, int o = 0, int w = 0, int s = 0, int v = 0) : in(i), out(o), w(w), s(s), v(v) {}
	bool operator < (const parcel &p) const { return out != p.out ? out < p.out : in > p.in; }
	void input() { scanf("%d %d %d %d %d", &in, &out, &w, &s, &v); }
} a[N];

int f[N][M], g[M];

main() {
//	freopen("D.in", "r", stdin);
	int n, s;
	scanf("%d %d", &n, &s);
	a[0] = parcel(0, 2 * n, 0, s, 0);
	for (int i = 1; i <= n; i ++) a[i].input();
	std::sort(a, a + n + 1);

	for (int i = 0; i <= n; i ++) {
		for (int w = a[i].w; w <= s; w ++) {
			int ww = min(w - a[i].w, a[i].s);
			int cur = a[i].in;
			g[cur] = 0;
			for (int j = 0; j < i; j ++) if (a[j].in >= a[i].in) {
				while (cur < a[j].out) cur ++, g[cur] = g[cur - 1];
				g[cur] = max(g[cur], g[a[j].in] + f[j][ww]);
			}
			f[i][w] = g[cur] + a[i].v;
		}
	}
	printf("%d\n", f[n][s]);
}
