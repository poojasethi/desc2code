#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxN = 507, maxS = 1007;
int n, S, v[maxS][maxS], dp[maxN][maxS];
struct Node {
  int in, out, w, s, v;
} pnt[maxN];
bool cmp(Node t0, Node t1) { 
  if (t0.out == t1.out) return t0.in>t1.in;
  return t0.out<t1.out;
}
int main()
{
  scanf("%d%d", &n, &S);
  for (int i = 0; i < n; i++) scanf("%d%d%d%d%d", &pnt[i].in, &pnt[i].out, &pnt[i].w, &pnt[i].s, &pnt[i].v);
  sort(pnt, pnt+n, cmp);
  pnt[n].in = 0, pnt[n].out = n<<1, pnt[n].s = S;
  for (int k, i = 0; i <= n; i++) {
    k = pnt[i].in;
    for (int z = 0; z <= pnt[i].s; z++) v[k][z] = 0;
    for (int j = 0; j < i; j++)
      if (pnt[i].in <= pnt[j].in) {
        for (; k < pnt[j].out; k++)
          for (int z = 0; z <= pnt[i].s; z++) v[k+1][z] = v[k][z];
        for (int z = 0; z <= pnt[i].s; z++) {
          v[k][z] = max(v[k][z], v[pnt[j].in][z]+dp[j][z]);
          if (z > 0) v[k][z] = max(v[k][z], v[k][z-1]);
        }
      }
    for (int z = 0; z<=pnt[i].s && z<=S-pnt[i].w; z++) dp[i][z+pnt[i].w] = v[k][z]+pnt[i].v;
    for (int z = pnt[i].s+pnt[i].w+1; z <= S; z++) dp[i][z] = dp[i][pnt[i].s+pnt[i].w];
  }
  printf("%d\n", dp[n][S]);
}
