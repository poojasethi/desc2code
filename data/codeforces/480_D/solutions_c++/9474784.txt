#include<stdio.h>
#include<map>
#include<algorithm>
using namespace std;
typedef pair<int,int> P;
int L[501];
int R[501];
int W[501];
int S[501];
int V[501];
P ord[501];

int dp[501][1001];
int rdp[1001];

int max(int a,int b){return a>b?a:b;}
int min(int a,int b){return a<b?a:b;}

int dfs(int n,int v,int D){
    if(D<0)return 0;
    if(dp[v][D]!=-1)return dp[v][D];
    int i,j;
    for(i=0;i<=1000;i++)rdp[i]=0;
    int p=0;
    for(i=0;i<n;i++){
        int u=ord[i].second;
        if(u==v||L[u]<L[v]||R[u]>R[v])continue;
        dfs(n,u,min(D-W[u],S[u]));
    }
    for(i=0;i<n;i++){
        int u=ord[i].second;
        if(u==v||L[u]<L[v]||R[u]>R[v])continue;
        while(p<L[u]){
            rdp[p+1]=max(rdp[p+1],rdp[p]);
            p++;
        }
        if(D>=W[u])rdp[R[u]]=max(rdp[R[u]],rdp[L[u]]+V[u]+dfs(n,u,min(D-W[u],S[u])));
    }
    while(p<R[v]){
        rdp[p+1]=max(rdp[p+1],rdp[p]);
        p++;
    }
//  printf("%d %d: %d\n",v,D,rdp[R[v]]);
    return dp[v][D]=rdp[R[v]];
}

int main(){
    int n,D,i;
    scanf("%d %d",&n,&D);
    L[0]=0;R[0]=n*2;W[0]=0;S[0]=0;V[0]=0;
    ord[0]=P(0,0);
    for(i=1;i<=n;i++){
        scanf("%d %d %d %d %d",&L[i],&R[i],&W[i],&S[i],&V[i]);
        ord[i]=P(L[i],i);
    }
    sort(ord,ord+n+1);
    for(i=0;i<=n;i++)for(int j=0;j<=D;j++)dp[i][j]=-1;
    printf("%d\n",dfs(n+1,0,D));
    return 0;
}