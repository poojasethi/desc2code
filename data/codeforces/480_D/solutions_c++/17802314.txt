#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;

const int MaxN = 510, MaxS = 1010;
struct node {
	int in, out, w, s, v;
	bool operator < (const node &a) const {
		return (in < a.in) || ((in == a.in) && (out > a.out));
	}
}	p[MaxN];
int f[MaxN][MaxS];
bool done[MaxN][MaxS];
int nxt[MaxN];

int n;

inline int cmax(int &a, int b) {
	return a < b ? a = b : a;
}
void dp(int now, int s) {
	if (done[now][s]) return;
	done[now][s] = 1;
	for (int i = now + 1; i <= nxt[now]; ++i)
		if ((p[i].out <= p[now].out) && (s >= p[i].w)) 
			dp(i, min(s - p[i].w, p[i].s));
	static int g[MaxN];
	for (int i = now + 1; i <= nxt[now] + 1; ++i) g[i] = 0;
	for (int i = now + 1; i <= nxt[now]; ++i) {
		cmax(g[i + 1], g[i]);
		if ((p[i].out <= p[now].out) && (s >= p[i].w)) 
			cmax(g[nxt[i] + 1], g[i] + p[i].v + f[i][min(s - p[i].w, p[i].s)]);
	}
	f[now][s] = g[nxt[now] + 1];
}

int main() {
	int s;
	scanf("%d%d", &n, &s);
	for (int i = 1; i <= n; ++i) scanf("%d%d%d%d%d", &p[i].in, &p[i].out, &p[i].w, &p[i].s, &p[i].v);
	sort(p + 1, p + n + 1);
	p[0].out = 2 * n;
	for (int i = 0; i <= n; ++i) {
		int &t = nxt[i];
		for (t = i; (t < n) && (p[t + 1].in < p[i].out); ++t);
	}

	dp(0, s);
	int ans = f[0][s];
	cout << ans << endl;
	return 0;
}
