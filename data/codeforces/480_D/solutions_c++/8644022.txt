#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>

using namespace std;

struct kutija{
	int lo, hi, m, mi, v;
}kut[550];

bool cmp(kutija A, kutija B){
	if(A.lo != B.lo) return A.lo < B.lo;
	else return A.hi > B.hi;
}

int n;
int platforma;
int next[1010];
int dp[1010][1010];

int f(int i, int j){
	int dp2[1010];
	if(dp[i][j] != -1) return dp[i][j];
	
	memset(dp2, 0, sizeof(dp2));
	for(int k = i+1; k<n; k++){
		int d = next[k];
		dp2[k+1] = max(dp2[k+1], dp2[k]);
		if(kut[i].hi <= kut[k].lo || kut[i].hi < kut[k].hi) continue;
		if(j - kut[k].m >= 0) dp2[d] = max(dp2[d], dp2[k] + kut[k].v + f(k, min(j-kut[k].m, kut[k].mi)));
	}
	dp[i][j] = dp2[n];
	return dp[i][j];
}

int main(){

	scanf("%d%d", &n, &platforma);
	for(int i = 1; i<=n; i++) scanf("%d%d%d%d%d", &kut[i].lo, &kut[i].hi, &kut[i].m, &kut[i].mi, &kut[i].v);
	n++;
	kut[0].lo = 0; 
	kut[0].hi = 10000;
	kut[0].v = 0;
	sort(kut, kut+n, cmp);
	
	for(int i = 0; i<n; i++){
		next[i] = n;
		for(int j = n; j>=0; j--){
			if(kut[i].hi <= kut[j].lo) next[i] = j;
		}
	}
	
	memset(dp, -1, sizeof(dp));
	int sol = f(0, platforma);
	printf("%d", sol);

return 0;
}
