#define MAX 200005
#include <stdio.h>
#include <map>
#include <set>
using namespace std;
struct node{
    node(){}
    node(long long p1,long long p2){begin=p1,pos=p2;}
    long long begin,pos;
}arr[MAX];
bool stat[MAX];
map<long long,node>mp;
set<long long>S[MAX];
set<long long>::iterator it;
long long size[MAX];
int main(){
    long long h,m,n,res=0,i,id,t,j;
    node cur;
    char ch;
    scanf("%I64d%I64d%I64d",&h,&m,&n);
    for(i=0;i<h;++i){
        if(stat[i]) continue;
        for(j=0;;++j){
            if(stat[(i+j*m)%h]) break;
            stat[(i+j*m)%h]=true;
            arr[(i+j*m)%h]=node(i,j);
            S[i].insert(j);
            size[i]=j;
        }
    }
    for(i=1;i<=n;++i){
        scanf(" %c%I64d",&ch,&id);
        if(ch=='-'){
            cur=mp[id];
            S[cur.begin].insert(cur.pos);
        }else{
            scanf("%I64d",&t);
            cur=arr[t];
			//printf("%I64d\n",*(S[cur.begin].rbegin()));
            if(*(S[cur.begin].rbegin())<cur.pos){
                it=S[cur.begin].lower_bound(0);
                res+=size[cur.begin]-cur.pos+1+(*it);
                mp[id]=node(cur.begin,(*it));
                S[cur.begin].erase(it);
            }else{
                it=S[cur.begin].lower_bound(cur.pos);
                res+=(*it)-cur.pos;
                mp[id]=node(cur.begin,(*it));
                S[cur.begin].erase(it);
            }
        }
    }
    printf("%I64d\n",res);
    return 0;
}


