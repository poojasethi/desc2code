#include <cstdio>
#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <cmath>
#include <queue>
#include <deque>
#include <bitset>
#include <algorithm>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <sstream>
using namespace std;

#define DB(x) cerr<<#x<<"="<<x<<" "
#define DBN(x) cerr<<#x<<"="<<x<<"\n"
#define rep(i,l,r) for (int i=(l); i<=(r); i++)
#define repd(i,r,l) for (int i=(r); i>=(l); i--)
#define rept(i,c) for (typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define sqr(x) ((x)*(x))
#define pb push_back
#define mp make_pair

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;

#define INF 1000000000
#define EPS (double)1e-9
#define MOD 1000000007
#define PI 3.14159265358979328462
int h, m, n;
int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a%b);
}

set<int >::iterator it;
map<int, pii > mm;
set<int > s[200000];
int p[200005];
int main(int argc, char *argv[])
{
    ios_base::sync_with_stdio(false);
    cin >> h >> m >> n;
    int g = gcd(h, m);
    for (int i = 0; i < g; i++) {
	for (int j = 0; j < h/g; j++) {
	    s[i].insert(j);
	    p[(i+(ll)j*m)%h] = j;
	}
    }
    long long ans = 0;
    while (n--) {
	int id, t;
	char op[10];
	cin >> op >> id;
	if (op[0] == '+') {
	    cin >> t;
	    it = s[t%g].lower_bound(p[t]);
	    if (it == s[t%g].end())
		it = s[t%g].begin();
	    
	    mm[id] = mp(t, *it);
	    
	    int count = (*it)-p[t];
	    if (count < 0)
		count += h/g;
	    
	    ans += count;
	    
	    if (it == s[t%g].end())
		printf("error!\n");
	    s[t%g].erase(it);
	}
	else {
	    s[mm[id].first%g].insert(mm[id].second);
	}
    }
    cout << ans << endl;
    return 0;
}

