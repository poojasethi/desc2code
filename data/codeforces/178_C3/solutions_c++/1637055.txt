#include <algorithm>
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <map>
#include <set>
#define It(x) __typeof(x.begin())
#define foreach(i, a) for(It(a) _ind=(a).begin(); _ind!=(a).end(); _ind++) \
						for(bool _flag=true; _flag;_flag=false) \
							for(__typeof(*(a).begin()) &i = *_ind; _flag; _flag = false)
#define rep(i,e) for(int i = 0,__e=e; i < __e; i++)
#define sz(a) ((int)(a).size())
using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
const int INF = 2e9;
const int MAXn=2e5+100;
bool mark[MAXn];
map<int,int> pl;
vector<int> circ[MAXn];
int wc[MAXn],wi[MAXn];
set<int> st[MAXn];

int main()
{
	ios::sync_with_stdio(false);
	int h, m, n;
	cin >> h >> m >> n;
	int c=0;
	rep(i,h)
	{
		int ti=i;
		if(mark[i]) continue;
		for(int j=0;!mark[i];j++)
		{
			circ[c].push_back(i);
			wc[i]=c;
			wi[i]=j;
			mark[i]=true;
			i=(i+m)%h;
			st[c].insert(j);
		}
		c++;
		i=ti;
	}
	ll count=0;
	rep(i,n)
	{
		char c;
		int id, hash;
		cin >> c >> id;
		if(c=='+')
		{
			cin >> hash;
			int c=wc[hash];
			int j=wi[hash];
			set<int>::iterator next=st[c].lower_bound(j);
			if(next==st[c].end())
				next=st[c].begin();
			int nhash=circ[c][*next];
			count+=(circ[c].size()+wi[nhash]-wi[hash])%circ[c].size();
			pl[id]=nhash;
			st[c].erase(next);
		}
		else
		{
			int hash=pl[id];
			st[wc[hash]].insert(wi[hash]);
		}
	}
	cout << count << endl;
	return 0;
}
