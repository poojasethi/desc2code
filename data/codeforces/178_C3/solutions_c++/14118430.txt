#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <map>

using namespace std;

const int maxn = 500001;

int f[maxn];

map<int, int> h;

int R[maxn], size = 0;
int H, m, n;

void Add(int x, int d) { for (; x <= R[size]; x += (x & -x)) f[x] += d; }
int Sub(int x) { int get = 0; for (; x; x -= (x & -x)) get += f[x]; return get; }

bool vis[maxn];
int L[maxn], num[maxn], to[maxn], now[maxn];

long long ans = 0;

char str[101];

int main( )
{
	scanf("%d %d %d", &H, &m, &n);
	for (int i = 0; i < H; i ++)
	{
		if (vis[i]) continue;
		vis[i] = true;
		++ size; to[i] = size;
		L[size] = R[size - 1] + 1;
		int cnt = 1;
		now[i] = cnt;
		for (int j = (i + m) % H; j != i; j = (j + m) % H)
			to[j] = size, now[j] = ++ cnt, vis[j] = true;
		R[size] = L[size] + 2 * cnt - 2;
		num[size] = cnt;
	}
	int id, hh;

	for (int i = 1; i <= n; i ++)
	{
		scanf("%s", str);
		if (str[0] == '+')
		{
			scanf("%d", &id);
			scanf("%d", &hh);
			h[id] = hh;
			int Now = to[hh];
			int pos = L[Now] + now[hh] - 1;
			int len = num[Now];
			int l = pos, r = pos + len - 1;
			while (l <= r)
			{
				int mid = (l + r) >> 1;
				if (Sub(mid) - Sub(pos - 1) < mid - pos + 1) r = mid - 1;
				else l = mid + 1;
			}
			ans += l - pos;
			h[id] = (hh + (l - pos) * m) % H;
			Add(l, 1);
			if (l < L[Now] + len - 1) Add(l + len, 1);
			else if (l > L[Now] + len - 1) Add(l - len, 1);
		}
		else
		{
			scanf("%d", &id);
			int hh = h[id];
			int Now = to[hh];
			int pos = L[Now] + now[hh] - 1;
			int len = num[Now];
			Add(pos, -1);
			if (pos < L[Now] + len - 1) Add(pos + len, -1);
			else if (pos > L[Now] + len - 1) Add(pos - len, -1);
		}
	}
	printf("%I64d\n", ans);
	return 0;
}
  	  		 		 	  	 	  	  	 		  		