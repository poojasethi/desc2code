#include <cstdio>
#include <iostream>
#include <map>
#include <cmath>

using namespace std;

inline void getc(char & c)
{
  c = ' ';
  while (c != '+' && c != '-') {
    c = getchar();
  }
}

inline void getd(int & d)
{
  d = 0;
  char c = ' ';
  while (c < '0' || c > '9') {
    c = getchar();
  }
  
  while ('0' <= c && c <= '9') {
    d *= 10;
    d += c - '0';
    c = getchar();
  }
}

typedef long long ll;

const int maxh = 200 * 1000 + 5;

map <int, int> M;
bool A[maxh];
int sq[maxh];

int h, m, n;
ll shft;
ll shftm;

ll add(int hash, int & nhash)
{
  ll res = 0;
  while (A[hash]) {
    if (sq[hash] == shft) {
      hash += shftm;
      if (hash >= h) {
        hash -= h;
      }
      res += shft;
    }
    else {
      hash += m;
      if (hash >= h) {
        hash -= h;
      }
      ++res;
    }
  }
  
  A[hash] = 1;
  nhash = hash;
  
  for (int i = 0; i < shft; ++i) {
    ++sq[hash];
    hash -= m;
    if (hash < 0) {
      hash += h;
    }
  }
  
  return res;
}

void del(int hash)
{
  A[hash] = 0;
  
  for (int i = 0; i < shft; ++i) {
    --sq[hash];
    hash -= m;
    if (hash < 0) {
      hash += h;
    }
  }
}

int main()
{
  //freopen("C.in", "r", stdin);
  ios::sync_with_stdio(0);
  //cin >> h >> m >> n;
  scanf("%d %d %d", &h, &m, &n); 
  
  shft = sqrt(h) / 2;
  shft = max(shft, 1LL);
  shft = min(shft, (ll)h);

  shftm = (shft * m) % h;
  
  ll res = 0;
  for (int i = 0; i < n; ++i) {
    char op;
    int id;
    //cin >> op >> id;
    getc(op);
    //scanf("%d", &id);
    getd(id);
    if (op == '+') {
      int hash;
      //cin >> hash;
      //scanf("%d", &hash);
      getd(hash);
      
      int nhash;
      res += add(hash, nhash);
      M[id] = nhash;
    }
    else {
      int hash = M[id];
      del(hash);
    }
  }
  
  cout << res << '\n';
  
  return 0;
}