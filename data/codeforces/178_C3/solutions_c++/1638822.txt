#include<stdio.h>
#include<string.h>
#include<assert.h>
#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<algorithm>
using namespace std;

#define MAX 400007

typedef long long Long;

struct DATA{
	Long v,I;
	DATA( Long v = 0,Long I = 0 )
	{
		this->v = v;
		this->I = I;
	}
};

bool operator<( const DATA &a,const DATA &b )
{
	return a.I < b.I;
}

Long H,M,N;
Long Nt[MAX+7];

Long nC;
Long Sz[MAX+7];
Long Cyc[MAX+7];
Long Ind[MAX+7];
set<DATA> Set[MAX+7];;


int main( void )
{
	Long i,Id,Hash,v;
	char Ch;

	//freopen("text1.txt","r",stdin );
	
	ios_base::sync_with_stdio(0);

	cin>>H>>M>>N;
	
	for( i=0;i<H;i++ ){
		Nt[i] = (i+M)%H;
	}
	
	for( i=0;i<H;i++ ){
		if( Ind[i] ) continue;
		nC++;	
		Long I = 0;
		v = i;//printf("Cycle %ld\n",nC );
		while(1){
			Cyc[v] = nC;
			Sz[nC]++;
			Ind[v] = ++I;//printf("%I64d %I64d\n",Ind[v],v );
			Set[nC].insert( DATA( v,Ind[v] ));
			v = Nt[v];//printf("%ld\n",Set[nC].size());
			if( v==i ) break;
		}
		//printf("%ld\n",Set[nC].size());
	}
	
	Long Ans = 0;
	map<Long,Long> Pos;
	for( i=1;i<=N;i++ ){
		cin>>Ch;
		if( Ch=='+' ){//printf("Add\n");
		
			cin>>Id>>Hash;
			Long G = Cyc[Hash];
			
			set<DATA>::iterator p = Set[G].lower_bound( DATA( Hash,Ind[Hash] ));
			if( p==Set[G].end()) p = Set[G].begin();
			
			v = p->v;//printf("In here %I64d %ld\n",v,Set[G].size() );
			Pos[Id] = v;
			Set[G].erase( *p );
			
			if( Ind[v]>=Ind[Hash]) Ans += Ind[v] - Ind[Hash];
			else Ans += Sz[G] - Ind[Hash] + 1 + Ind[v] - 1;		
		}
		else{
			cin>>Id;
			v = Pos[Id];
			Set[Cyc[v]].insert( DATA( v,Ind[v]));
			//Pos.erase( Id );
		}
		//printf("Ans %ld\n\n",Ans );
	}
	
	cout<<Ans<<endl;	
	
	//scanf("%*ld");

	return 0;
}
