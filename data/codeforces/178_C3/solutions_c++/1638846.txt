#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <memory.h>
#include <vector>
#include <queue>
#include <map>
#include <string>
#include <string.h>
#include <set>
using namespace std;
set<int>S[200000 + 5];
int belong[200000 + 5];
int ink[200000 + 5];
int cnt[200000 + 5];
int used[200000 + 5];
map<int,int>M;
vector<int>E[200000 + 5];
int main(){
	int i,j,k;
	int h,m,n;
	scanf("%d %d %d",&h,&m,&n);
	int idx = 0;
	for(i = 0;i < h;i++) {
		if(belong[i] == 0){
			int tmp = i;
			int cur = 0;
			idx++;
			while(belong[tmp] == 0){				
				S[idx].insert(cur);
				E[idx].push_back(tmp);
				belong[tmp] = idx;
				ink[tmp] = cur;
				cur++;
				tmp = (tmp + m) % h;
				cnt[idx]++;
			}
		}
	}
	__int64 ans = 0;
	for(i = 1;i <= n;i++) {
		char type;
		int id,hash;
		getchar();
		scanf("%c",&type);
		if(type == '+'){
			scanf("%d %d",&id,&hash);
			int ss = belong[hash];
			set<int>::iterator ti;
			ti = S[ss].lower_bound(ink[hash]);
			if(ti != S[ss].end()){
				int check = (*ti);
				int tmp = E[ss][(*ti)];
				ans += (*ti) - ink[hash];
				M[id] = tmp;
				S[ss].erase(ti);
			}else{
				ti = S[ss].begin();
				int check = (*ti);
				int tmp = E[ss][(*ti)];
				M[id] = E[ss][(*ti)];
				ans += (*ti) + cnt[ss] - ink[hash];
				S[ss].erase(ti);
			}
		}else{
			scanf("%d",&id);
			int pos = M[id];
			int ss = belong[pos];
			S[ss].insert(ink[pos]);
		}
	}
	printf("%I64d\n",ans);
}

