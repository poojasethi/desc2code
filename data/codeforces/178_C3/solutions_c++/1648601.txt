#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <map>
#include <set>
#include <utility>
#include <vector>
#include <iostream>
using namespace std;


const int N = 200009;

set<int> empty[N];
vector<int> vec[N];
int Belong[N];
int idx[N];
int Size[N];
int where[N];

int find(set<int> &t, int val) {
	set<int>::iterator it;
	it = t.lower_bound(val);
	if(it == t.end())return*t.begin();
	else return *it;	
}
map<int, pair<int, int> > M;
typedef pair<int, int> PII;
int main() {

	int h, m, n;
	scanf("%d%d%d", &h, &m, &n);
	memset( Belong, -1, sizeof(Belong));
	int Bcnt = 0;
	for( int i = 0; i < h; ++ i) if(Belong[i] == -1){
		int cur = 0, j = i;
		while(Belong[j] == -1) {
			Belong[j] = Bcnt;
			vec[Bcnt].push_back(j);
			idx[j] = cur ++;
			j = (j + m) % h;
		}
		Size[ Bcnt ] = cur;
		++ Bcnt;
	}
	for( int i = 0; i < h; ++ i)empty[ Belong[i] ].insert( idx[i] );
	
	char oper;
	int id, hash;
	long long ret = 0;
	set<int>::iterator it;
	while(n --) {
		scanf(" %c%d", &oper, &id);
		if(oper == '+') {
			scanf("%d", &hash);
			int pos= find( empty[ Belong[hash ] ], idx[hash] );
			if( pos < idx[hash] ) ret += Size[ Belong[hash] ] - idx[hash] + pos;
			else ret += pos - idx[hash];
			empty[ Belong[hash] ].erase(pos);
			M[id] = make_pair( Belong[ hash ], pos);
		}else {
			PII p = M[id];
			M.erase(id);
			empty[ p.first ].insert(p.second);
		}
	}
	cout << ret <<endl;
	return 0;
}
