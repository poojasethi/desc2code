import heapq

k, n1, n2, n3, t1, t2, t3 = [int(x) for x in raw_input().strip().split()]

t = 0
wash = []
heapq.heapify(wash) 
dry = []
heapq.heapify(dry)
fold = []
heapq.heapify(fold)

t = 0
last = -1

kcopy = k

while (kcopy == k or len(wash) + len(dry) + len(fold) > 0):
    times = []
    for x in [wash, dry, fold]:
        if len(x) > 0:
            times.append(x[0])
    if len(times) > 0:
        currtime = min(times)
    else:
        currtime = 0
    while len(fold) > 0 and fold[0] == currtime:
        last = heapq.heappop(fold)
    while len(dry) > 0 and dry[0] == currtime:
        heapq.heappop(dry)
        if len(fold) < n3:
            heapq.heappush(fold, currtime + t3)
        else:
            heapq.heappush(dry, fold[0])
    while len(wash) > 0 and  wash[0] == currtime:
        heapq.heappop(wash)
        if len(dry) < n2:
            heapq.heappush(dry, currtime + t2)
        else:
            heapq.heappush(wash, dry[0])
    while len(wash) < n1 and k > 0:
        heapq.heappush(wash, currtime + t1)
        k -= 1

print last


