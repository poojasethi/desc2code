from collections import defaultdict
from heapq import *

k, n1, n2, n3, t1, t2, t3 = [int(x) for x in raw_input().split()]
u1, u2, u3 = n1, n2, n3
done = 0
ts = defaultdict(lambda: (0, 0, 0))
relts = []
heappush(relts, 0)
score = 0
while k > 0:
  now = heappop(relts)
  u1 += ts[now][0]
  u2 += ts[now][1]
  u3 += ts[now][2]
  go = min(u1, u2, u3)
  if go > 0:
    score = now + t1 + t2 + t3
    k -= go
    u1 -= go
    u2 -= go
    u3 -= go
    if now + t1 not in ts:
      heappush(relts, now + t1)
    old = ts[now + t1]
    ts[now + t1] = (old[0] + go, old[1], old[2])
    if now + t2 not in ts:
      heappush(relts, now + t2)
    old = ts[now + t2]
    ts[now + t2] = (old[0], old[1] + go, old[2])
    if now + t3 not in ts:
      heappush(relts, now + t3)
    old = ts[now + t3]
    ts[now + t3] = (old[0], old[1], old[2] + go)
print score