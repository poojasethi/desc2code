import sys

def dbg(was):
    if debug_mode:
        print 'DBG\t' + str(was)
    
def solve(s, n):
    a = ord('a')
    z = ord('z')
    data = {}
    for char in s:
        dbg(char)
        data[char] = float(data.get(char, 0) + 1)

    data2 = []
    for key in data.keys():
        data2.append([key, data[key]])
    data = data2
    
    if len(data) > n:
        print "-1"
        return

    ans = []
    data.sort(key=lambda x: x[1], reverse = True)
    for i in xrange(n - len(data)):
        
        ans.append(data[0][0])
        igogo = ans.count(data[0][0])
        
        data[0][1] = data[0][1] * igogo / (igogo + 1)
        
        data.sort(key=lambda x: x[1], reverse = True)

    res = data[0][1]
    if int(res) != res:
        res = int(res) + 1
    else:
        res = int(res)
        
    print str(res)
    print ''.join(ans + map(lambda x: x[0], data))
    

if len(sys.argv) > 1:
    debug_mode = True
    datum = open(sys.argv[1], 'r')
else:
    debug_mode = False
    datum = sys.stdin
    
s = str(datum.readline().split()[0])
n = int(datum.readline())


solve(s, n)


