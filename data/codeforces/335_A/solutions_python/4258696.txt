import sys
from collections import defaultdict
from Queue import PriorityQueue

class Relation:
  def __init__(self, r, c, l):
    self.r = r
    self.c = c
    self.l = l
  def demand(self):
    return (self.r + self.c - 1) / self.c
  def __lt__(self, other):
    return self.demand() > other.demand()

s = raw_input()
n = input()
d = defaultdict(int)
for c in s:
  d[c] += 1
if len(d) > n:
  print -1
  exit()
pq = PriorityQueue()
for k in d:
  pq.put(Relation(d[k], 1, k))
n -= len(d)
while n:
  rel = pq.get()
  rel.c += 1
  pq.put(rel)
  n -= 1

rel = pq.get()
print rel.demand()
sys.stdout.write(rel.l * rel.c)
while not pq.empty():
  rel = pq.get()
  sys.stdout.write(rel.l * rel.c)
print ''
