#include<iostream>
#include<cstdio>
#include<algorithm>
using namespace std;
typedef long long LL;
const int MAXN=200010;
struct event
{
    int val,opt,id;
    event(int _val=0,int _opt=0,int _id=0):val(_val),opt(_opt),id(_id){}
    bool operator<(const event &o)const{return val>o.val;}
}eve[MAXN<<1];
int n,m,t[MAXN],d[MAXN],r[MAXN];
int o,e[MAXN],ans[MAXN];
LL c[MAXN];
inline int lowbit(int x){return x&-x;}
inline int add(int x,int y){for(;x<=m;x+=lowbit(x))c[x]+=y,e[x]++;}
inline LL sum(int x)
{
    LL ret=0;
    for(;x;x-=lowbit(x))ret+=c[x];
    return ret;
}
inline int cnt(int x)
{
    int ret=0;
    for(;x;x-=lowbit(x))ret+=e[x];
    return ret;
}
inline void init()
{
    scanf("%d%d",&n,&m);
    for(int i=1;i<=m;i++)
    {
        scanf("%d",&t[i]);
        eve[o++]=event(t[i],0,i);
    }
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d",&d[i],&r[i]);
        eve[o++]=event(d[i],1,i);
    }
    sort(eve,eve+o);
}
inline int get_ans(int i)
{
    int l=1,r1=m;
    while(l<=r1)
    {
        int mid=l+r1>>1;
        LL temp=sum(mid)-(LL)cnt(mid)*d[i];
        if(temp<r[i])l=mid+1;
        else r1=mid-1;
    }
    return r1<m?r1+1:0;
}
inline void solve()
{
    for(int i=0;i<o;i++)
    {
        if(eve[i].opt==0)add(eve[i].id,eve[i].val);
        else ans[eve[i].id]=get_ans(eve[i].id);
    }
    for(int i=1;i<=n;i++)printf("%d ",ans[i]);
    printf("\n");
}
int main(void)
{
    init();
    solve();
    return 0;
}