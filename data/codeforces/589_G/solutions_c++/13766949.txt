#include<cstdio>
#include<algorithm>
#include<cmath>
#include<deque>
#include<vector>
using namespace std;

const int MAX = 200100;
typedef long long ll;

ll tree_sum[MAX], tree_cnt[MAX];
int n, m, t[MAX];

void fadd(ll *tree, int i, int inc) {
	for (;i<=m;i|=i+1)
		tree[i] += inc;
}

long long fsum(ll *tree, int r) {
	long long sum = 0;
	for (;r>0;r=(r&(r+1))-1)
		sum += tree[r];
	return sum;
}

int main() {
#ifdef MULTITEST
	freopen("input.txt","r",stdin);
#endif
	scanf("%d%d",&n,&m);
	deque<pair<int, int> > tp(m);
	for (int i=0;i<m;++i) {
		scanf("%d",&tp[i].first);
		tp[i].second = i+1;
		fadd(tree_sum, i+1, tp[i].first);
		fadd(tree_cnt, i+1, 1);
	}
	sort(tp.begin(), tp.end());
	vector<pair<pair<int, int>, int> > p(n);
	for (int i=0;i<n;++i) {
		scanf("%d%d",&p[i].first.first,&p[i].first.second);
		p[i].second = i;
	}
	sort(p.begin(), p.end());
	vector<int> res(n);
	for (int i=0;i<n;++i) {
		while (!tp.empty() && tp.front().first <= p[i].first.first) {
			fadd(tree_sum, tp.front().second, -tp.front().first);
			fadd(tree_cnt, tp.front().second, -1);
			tp.pop_front();
		}
		if (fsum(tree_sum, m) - fsum(tree_cnt, m) * p[i].first.first < p[i].first.second) {
			res[p[i].second] = 0;
			continue;
		}
		int l=0, r=m;
		while (r > l+1) {
			int mid = (l+r)/2;
			if (fsum(tree_sum, mid) - fsum(tree_cnt, mid) * p[i].first.first >= p[i].first.second)
				r = mid;
			else
				l = mid;
		}
		res[p[i].second] = r;
	}
	for (int i=0;i<n;++i)
		printf("%d ", res[i]);
	return 0;
}
