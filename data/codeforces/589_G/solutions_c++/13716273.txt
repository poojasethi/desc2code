#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
const int MAX = (1 << 20);

struct BIT {
ll bit[MAX];
void insert(int v, int i)
{
	i += 100;
	for(; i < MAX; i += i & -i) bit[i] += v;
}
ll lookup(int i)
{
	i += 100;
	ll ans = 0;
	for(; i > 0; i -= i & -i) ans += bit[i];
	return ans;
}
};

BIT sum, cnt;

int query(int d, int r)
{
	int low = 0, high = MAX - 300;
	while(low + 1 < high)
	{
		int mid = (low + high) / 2;
		if(sum.lookup(mid) - cnt.lookup(mid) * d >= r) high = mid;
		else low = mid;
	}
	if(high == MAX - 300) return 0;
	return high;
}

int N, M;
pair<int, int> T[MAX];
pair<int, pair<int, int> > C[MAX]; // d, r, i
int ans[MAX];


int main()
{
	cin >> N >> M;
	for(int i = 1; i <= M; i++)
	{
		T[i].second = i;
		cin >> T[i].first;
	}
	sort(T + 1, T + 1 + M, greater<pair<int, int> >());
	for(int i = 1; i <= N; i++)
	{
		C[i].second.second = i;
		cin >> C[i].first >> C[i].second.first;
	}
	sort(C + 1, C + 1 + N, greater<pair<int, pair<int, int> > >());
	int t = 1;
	for(int c = 1; c <= N; c++)
	{
		while(t <= M && T[t].first >= C[c].first)
		{
			sum.insert(T[t].first, T[t].second);
			cnt.insert(1, T[t].second);
			t++;
		}
		ans[C[c].second.second] = query(C[c].first, C[c].second.first);
	}
	for(int i = 1; i <= N; i++) cout << ans[i] << ' ';
}
