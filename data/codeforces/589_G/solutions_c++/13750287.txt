#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <vector>
using namespace std;
#define N 200100
int n,m;
int ans[N];
struct p {
    int d,r,pos;
}pe[N];
struct tt {
    int t, pos;
}t[N];
bool cmp(const p &a, const p &b) {
    if(a.d!=b.d)return a.d>b.d;
    return a.r<b.r;
}
bool cmpp(const tt &a, const tt &b) {
    if(a.t!=b.t)return a.t>b.t;
    return a.pos<b.pos;
}
int main()
{
    scanf("%d%d", &n,&m);
    for(int i=0;i<m; i++) {
            scanf("%d", &t[i].t);
            t[i].pos = i;
    }
   // sort(t, t+m, cmpp);
    for(int j=0;j<n;j++){
            scanf("%d%d", &pe[j].d,&pe[j].r);
            pe[j].pos = j;
    }
    sort(pe, pe+n, cmp);

    memset(ans, 0, sizeof(ans));
    int pos=0, as=0, ct=0;
    for(int i=0;i<n;i++){
        if(i==0 || pe[i].d!=pe[i-1].d) {
            as = 0;
            pos = 0;
            ct=0;
        } else {
            if(as >= pe[i].r + pe[i].d * ct){
                ans[pe[i].pos] = (pos>=m)?0:t[pos].pos+1;
                continue;
            } else pos++;
        }

        for(;pos<m;pos++) {
            if(t[pos].t>pe[i].d)
            {
                as+=t[pos].t;
                ct++;
            }
            if(as >= pe[i].r + pe[i].d * ct) {
                break;
            }
        }

        ans[pe[i].pos] = (pos>=m)?0:t[pos].pos+1;
    }
    for(int i=0;i<n;i++){
        if(i==0)printf("%d", ans[i]);
        else printf(" %d", ans[i]);
    }
    puts("");
    return 0;
}
