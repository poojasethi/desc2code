#include <bits/stdc++.h>
using namespace std;
typedef long long Integer;

const int MAXN = (int) 2e5 + 10;
int n, m, t[MAXN], a[MAXN], b[MAXN];
vector<int> ft[MAXN];
vector<Integer> st[MAXN];

void BuildTree() {
    for (int k = 1; k <= m; ++k)
        for (int i = k; i <= m; i += i & -i)
            ft[i].push_back(t[k]);
    for (int k = 1; k <= m; ++k) {
        sort(ft[k].begin(), ft[k].end());
        st[k].assign(ft[k].size() + 1, 0);
        for (int i = 0; i < (int) ft[k].size(); ++i) st[k][i] = ft[k][i];
        for (int i = (int) st[k].size() - 2; i >= 0; --i)
            st[k][i] += st[k][i + 1];
    }
}

Integer Query(int i, int v) {
    Integer ans = 0;
    while (i) {
        int cnt = lower_bound(ft[i].begin(), ft[i].end(), v) - ft[i].begin();
        ans += st[i][cnt] - (Integer) v * ((int) ft[i].size() - cnt);
        i -= i & -i;
    }
    return ans;
}

int main() {
    #ifdef LOCAL_TEST
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif

    scanf("%d%d", &n, &m);
    for (int i = 1; i <= m; ++i) scanf("%d", &t[i]);
    for (int i = 1; i <= n; ++i) scanf("%d%d", &a[i], &b[i]);

    BuildTree();
    for (int i = 1; i <= n; ++i) {
        int l = 1;
        int r = m;
        int f = 0;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (Query(mid, a[i]) >= b[i]) {
                f = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        printf("%d ", f);
    }

    return 0;
}
