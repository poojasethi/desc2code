#include <bits/stdc++.h>
using namespace std;
const int maxn = 200005;

long long  a[maxn],d[maxn];
int ans[maxn];
int n,m;
struct ca
{
	int pre;
	int work;
	int id;
}c[maxn],t[maxn];
int lowbit(int x)
{
	return x&(-x);
}
long long cnt(int x)
{
	long long ans = 0;
	while(x > 0)
	{
		ans += d[x];
		x -= lowbit(x);
	}
	return ans;
}
void update(int i,int val)
{
	while(i <= m)
	{
		a[i] += val;
		d[i]++;
		i += lowbit(i);
	}
}
long long sum(int x)
{
	long long ans = 0;
	while(x > 0)
	{
		ans += a[x];
		x -= lowbit(x);
	}
	return ans;
}
bool com(ca a, ca b)
{
	return a.pre < b.pre;
}
int main()
{
	while(cin>>n>>m)
	{
		memset(a,0,sizeof(a));
		memset(d,0,sizeof(d));
		for(int i = 1; i <= m; i++)
		{
			scanf("%d",&t[i].pre);
			t[i].id = i;
		}
		sort(t+1,t+1+m,com);
		for(int i = 1; i <= n; i++)
		{
			scanf("%d%d",&c[i].pre,&c[i].work);
			c[i].id = i;
		}
		sort(c+1,c+1+n,com);
		int pos = m;
		for(int i = n; i > 0; i--)
		{
			while(pos && t[pos].pre >= c[i].pre)
			{
				 update(t[pos].id, t[pos].pre);
				 pos--;
			}
			int l = 1,r = m;
			while(l < r)
			{
				int mid = (l+r)/2;
				if(sum(mid) >= cnt(mid)*c[i].pre + c[i].work)
				{
					r = mid;
				}
				else
				{
					l = mid + 1;
				}
			}
			if(r == m && sum(m) < cnt(m)*c[i].pre + c[i].work)
			{
				ans[c[i].id] = 0;
			}
			else
			{
				ans[c[i].id] = r;
			}
		}
		for(int i = 1; i <= n; i++)
		{
			printf("%d ",ans[i]);
		}
	}
}

  				 				 		 		 	    		  	