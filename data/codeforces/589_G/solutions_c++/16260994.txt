#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define LL long long
const int MAXN=2e5+10;
int n,m;
LL c[MAXN],d[MAXN];
int lowbit(int x){return x&-x;}
LL sumv(int x)
{
    LL ret=0;
    while(x)
    {
        ret+=c[x];
        x-=lowbit(x);
    }
    return ret;
}

int cnt(int x)
{
    int ret=0;
    while(x)
    {
        ret+=d[x];
        x-=lowbit(x);
    }
    return ret;
}

void update(int x,int v)
{
    while(x<=m)
    {
        c[x]+=v;
        d[x]++;
        x+=lowbit(x);
    }
}
struct Node
{
    int d,r,id;
    bool operator <(const Node& A)const
    {
        return d<A.d;
    }
}node[MAXN],t[MAXN];

int ans[MAXN];
int main()
{
    cin>>n>>m;
    for(int i=1;i<=m;i++)scanf("%d",&t[i].d),t[i].id=i;
    for(int i=1;i<=n;i++)scanf("%d%d",&node[i].d,&node[i].r),node[i].id=i;
    sort(t+1,t+m+1);
    sort(node+1,node+n+1);
    int pos=m;
    for(int i=n;i;i--)
    {
        while(pos&&t[pos].d>node[i].d)update(t[pos].id,t[pos].d),pos--;
        int L=1,R=m;
        while(L<R)
        {
            int M=(L+R)>>1;
            if(sumv(M)>=(LL)cnt(M)*node[i].d+node[i].r) R=M;
            else L=M+1;
        }
        if((R==m)&&sumv(R)<(LL)cnt(R)*node[i].d+node[i].r)ans[node[i].id]=0;
        else ans[node[i].id]=R;
    }
    for(int i=1;i<=n;i++)printf("%d ",ans[i]);
    return 0;
}
	  	 			 	 	  		   	 	 	 			  	