#include<cstdio>
#include<cstring>
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;

const int N = 400000 + 10;

int n, m;
int need[N];
int ret[N];
long long cnt[N], sum[N];

void addIt(int p, int x)
{
    for(p ++; p < N; p += p & -p) {
        cnt[p] ++;
        sum[p] += x;
    }
}

int query(long long pre, long long tot)
{
    int cur = 0;
    for(int i = 20; i >= 0; -- i) {
        if (cur + (1 << i) > m) {
            continue;
        }
        if (tot > sum[cur + (1 << i)] - cnt[cur + (1 << i)] * pre) {
            tot -= sum[cur + (1 << i)] - cnt[cur + (1 << i)] * pre;
            cur += 1 << i;
        }
    }
    if (cur == m) {
        return 0;
    }
    return cur + 1;
}

void solve()
{
    vector<pair<int, int> > events;
    cin >> n >> m;
    for(int i = 0; i < m; ++ i) {
        int t;
        scanf("%d", &t);
        events.push_back(make_pair(t, i));
    }
    for(int i = 0; i < n; ++ i) {
        int d;
        scanf("%d%d", &d, need + i);
        events.push_back(make_pair(d, i + m));
    }
    sort(events.rbegin(), events.rend());

    for(int i = 0; i < events.size(); ++ i) {
        int id = events[i].second;
        if (id >= m) {
            id -= m;
            ret[id] = query(events[i].first, need[id]);
        } else {
            addIt(id, events[i].first);
        }
    }
    for(int i = 0; i < n; ++ i) {
        printf("%d%c", ret[i], i + 1 == n ? '\n' : ' ');
    }
}

int main()
{
    solve();
    return 0;
}