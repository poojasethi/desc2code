#include <bits/stdc++.h>

using namespace std;

#define NN 200100

typedef pair<int, int> pii;
typedef long long LL;

LL B[2][NN];
pii p[NN];
int ans[NN];

int lowbit(int x) {
	return x & (-x);
}

void update(int t, int up, int val, int tp) {
	while (t <= up) {
		B[tp][t] += val;
		t += lowbit(t);
	}
	return ;
}

LL calc(int t, int tp) {
	LL res = 0;
	while (t) {
		res += B[tp][t];
		t -= lowbit(t);
	}
	return res;
}

struct Man {
	int d, r;
	int id;
	Man(int _d = 0, int _r = 0, int _id = 0) {
		d = _d; r = _r; id = _id;
	}
	
	bool operator < (const Man& a) const{
		if (d > a.d) return true ;
		return false ;
	}
} mem[NN];


int main() {
	
	
	int N, M, t, D, R, po;
	int fir, se, mid;
	LL val, res;
	scanf("%d%d", &N, &M);
	for (int i = 1; i <= M; i ++) {
		scanf("%d", &t);
		p[i] = pii(t, i);
	}
	sort(p + 1, p + M + 1);
	for (int i = 0; i < N; i ++) {
		scanf("%d%d", &D, &R);
		mem[i] = Man(D, R, i);
	}
	
	sort(mem, mem + N);
	po = M;
	for (int i = 0; i < N; i ++) {
		while (po > 0 && p[po].first >= mem[i].d) {
			update(p[po].second, M, 1, 0);
			update(p[po].second, M, p[po].first, 1);
			po --;
		}

		fir = 0; se = M + 1;
		while (se - fir > 1) {
			mid = (se + fir) / 2;
			res = calc(mid, 1);
			val = calc(mid, 0);
			if (res - val * mem[i].d < mem[i].r) fir = mid;
			else se = mid;
		}
		
		ans[mem[i].id] = se;
		if (se == M + 1) ans[mem[i].id] = 0;
	}
	
	for (int i = 0; i < N; i ++) 
		if (i == N - 1) printf("%d\n", ans[i]);
		else printf("%d ", ans[i]);
	return 0;
}
                            