#include <cstdio>
#include <cstring>
#include <algorithm>
#define maxn 200050
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
using namespace std;

struct Tree{
     long long num,tot;
}tree[maxn<<2];

struct Num{
     int x,y,i;
     bool operator < (const Num & a)  const{
          return x<a.x;
     }
}a[maxn],b[maxn];

int m,n,ans[maxn];

void update(int pos,int x,int l,int r,int rt) {
     if(l==r) {
          tree[rt].num=x, tree[rt].tot=1;
          return;
     }
     int m=(l+r)>>1;
     if(pos<=m) update(pos,x,lson);
     else update(pos,x,rson);
     tree[rt].num=tree[rt<<1].num+tree[rt<<1|1].num;
     tree[rt].tot=tree[rt<<1].tot+tree[rt<<1|1].tot;
}

int query(int l,int r,int rt,int base,int sum) {
     if(l==r) return r;
     int m=(l+r)>>1;
     if(tree[rt<<1].num-base*tree[rt<<1].tot>=sum) return query(lson,base,sum);
     else return query(rson,base,sum-(tree[rt<<1].num-base*tree[rt<<1].tot));
}

int main() {
     scanf("%d%d",&n,&m);
     for(int i=1;i<=m;i++) {
          scanf("%d",&a[i].x); a[i].i=i;
     }
     for(int i=1;i<=n;i++) {
          scanf("%d%d",&b[i].x,&b[i].y);
          b[i].i=i;
     }
     memset(tree,0,sizeof(tree));
     sort(a+1,a+m+1);
     sort(b+1,b+n+1);
     int cnt=m;
     for(int i=n;i>=1;i--) {
          for(; a[cnt].x>b[i].x&&cnt;cnt--) {
               update(a[cnt].i, a[cnt].x, 1, m, 1);
          }
          if(tree[1].num-tree[1].tot*b[i].x<b[i].y) ans[b[i].i]=0;
          else ans[b[i].i]=query(1,m,1,b[i].x,b[i].y);
     }
     for(int i=1;i<=n;i++) printf("%d ",ans[i]);
     printf("\n");
}
