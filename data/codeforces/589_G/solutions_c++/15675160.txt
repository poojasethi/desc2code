#include <bits/stdc++.h>
#define ll long long
#define mst(a,x) memset(a,x,sizeof(a))
#define For(i,t) for(int i = 0; i < (t); i++)
using namespace std;

const int N = 2 * 1e5 + 5;
struct node{
	int d, r, o;
	void read(int _o) {scanf("%d%d", &d, &r), o = _o;}
	bool operator < (const node& b)const{
		return d < b.d;
	};
}a[N];
int n, m, t[N], d[N];
ll c[N], del[N];
vector <int> vec[N];
int ans[N];

ll getSum(int x,  ll *c) {
	ll ret = 0;

	while(x >= 1) {
		ret += c[x];
		x -= x & (-x);
	}
	return ret;
}

void update(int x, int val, ll *c) {
	while(x <= m) {
		c[x] += val;
		x += x & (-x);
	}
}

void check(int l, int r, int i) {
	int ret = 0;

	while(l <= r) {
		int mid = l + r >> 1;
		ll sum = getSum(mid, c);
		sum -= (ll)(mid - getSum(mid, del)) * a[i].d;
		if(sum >= a[i].r) {
			ret = mid;
			r = mid - 1;
		}
		else l = mid + 1;
	}
	ans[a[i].o] = ret;
}

int main() {
	
	while(~scanf("%d%d", &n, &m)) {
		mst(c, 0);
		mst(del, 0);
		for(int i = 1; i <= m; i++) {
			scanf("%d", t + i);
			update(i, t[i], c);
		}
		For(i, n) a[i].read(i);
		sort(a, a + n);
		For(i, n) d[i] = a[i].d;
		for(int i = 1; i <= m; i++) {
			int p = upper_bound(d, d + n, t[i]) - d;
			vec[p].push_back(i);
		}
		For(i, n) {
			For(j, vec[i].size()) {
				int tmp = vec[i][j];
				update(tmp, -t[tmp], c);
				update(tmp, 1, del);
			}
			check(1, m, i);
		}
		For(i, n) {
			if(i) printf(" ");
			printf("%d", ans[i]);
		}
		puts("");
	}

	return 0;
}

		 			 						    		     	 	 	