#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <map>
#include <set>

using namespace std;

long long bit[300000], bitt[300000];

struct node
{
	int id, d, r;
}d[300000], dd[300000];

int cmp(node a, node b)
{
	return a.d > b.d;
}

void add(int i, int n)
{
	int x = d[i].id + 1, c = d[i].d;
	while (x <= n)
	{
		bit[x] += c;
		bitt[x]++;
		x += x & -x;
	}
}

long long qu(int x, int c)
{
	long long sum = 0;
	long long cnt = 0;
	while (x > 0)
	{
		sum += bit[x];
		cnt += bitt[x];
		x -= x & -x;
	}
	return sum - cnt * c;
}

int ans[300000];

int main()
{
	int t, n, m, k, i, j, ca = 1, c, l, inf = 2e9;
	while (~scanf("%d%d", &n, &m))
	{
		for (i = 0; i < n + 10; ++i)
			bit[i] = bitt[i] = 0;
		for (i = 0; i < m; ++i)
		{
			d[i].id = i;
			scanf("%d", &d[i].d);
		}
		sort(d, d + m, cmp);
		for (i = 0; i < n; ++i)
		{
			dd[i].id = i;
			scanf("%d%d", &dd[i].d, &dd[i].r);
		}
		sort(dd, dd + n, cmp);
		j = 0;
		for (i = 0; i < n; ++i)
		{
			for (; j < m && d[j].d >= dd[i].d; ++j)
			{
				add(j, m);
			}
			int l = 0, r = m + 1;
			while (l + 1 < r)
			{
				int mid = (l + r) / 2;
				if (qu(mid, dd[i].d) >= dd[i].r)
					r = mid;
				else l = mid;
			}
			if (r == m + 1) r = 0;
			ans[dd[i].id] = r;
		}
		for (i = 0; i < n; ++i)
			printf("%d ", ans[i]);
		puts("");
	}
	return 0;
}

 				  			   				 	  					 		