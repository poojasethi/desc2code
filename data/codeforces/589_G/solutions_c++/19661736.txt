#include<cstdio>
#include<algorithm>
#define N 2000010
using namespace std;
int n,m,i,j,l[N],r[N],ans[N];
long long size[N],s[N];
struct g{
	int v,u,id;
}a[N],b[N];
bool cmp(g a,g b)
{
	return a.v>b.v;
}
void build(int x,int a,int b)
{
	int m;
	l[x]=a;r[x]=b;
	if (b-a>1)
	{
		m=(l[x]+r[x])>>1;
		build(2*x,a,m);
		build(2*x+1,m,b);
	}
}
void insert(int x,int a,int b,int c)
{
	int m;
	if ((a<=l[x])&&(r[x]<=b))
	{
		s[x]=c;
		size[x]=1;
		return;
	}
	m=(l[x]+r[x])>>1;
	if (a<m) insert(2*x,a,b,c);
	if (m<b) insert(2*x+1,a,b,c);
	s[x]=s[2*x]+s[2*x+1];
	size[x]=size[2*x]+size[2*x+1];
}
int query(int x,int a,int b,long long c,long long d)
{
	int m;
	if (b-a==1)
	{
		if (s[x]-size[x]*c<d) return 0;else return b;
	}
	m=(l[x]+r[x])>>1;
	if (s[2*x]-size[2*x]*c>=d)
		return query(2*x,a,m,c,d);
	else
		return query(2*x+1,m,b,c,d-(s[2*x]-size[2*x]*c));
}
int main()
{
	scanf("%d%d",&m,&n);
	for (i=1;i<=n;i++)
	{
		scanf("%d",&a[i].v);
		a[i].u=i;
	}
	sort(a+1,a+1+n,cmp);

	for (i=1;i<=m;i++)
	{
		scanf("%d%d",&b[i].v,&b[i].u);
		b[i].id=i;
	}
	sort(b+1,b+1+m,cmp);

	build(1,0,n);
	j=1;
	for (i=1;i<=m;i++)
	{
		while ((j<=n)&&(a[j].v>=b[i].v))
		{
			insert(1,a[j].u-1,a[j].u,a[j].v);
			j++;
		}
		ans[b[i].id]=query(1,0,n,b[i].v,b[i].u);
	}
	for (i=1;i<=m;i++)
		printf("%d ",ans[i]);
}
	 			   			   		 	 	 		  	   	