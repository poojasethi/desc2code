#include <iostream>
#include <cstdio>
#include <algorithm>

using namespace std;

const int maxN = 200010;

#define foru(i, l, r) for (int i = l; i <= r; ++i)
#define ford(i, r, l) for (int i = r; i >= l; --i)
#define repu(i, r) for (int i = 0; i < r; ++i)
#define ll long long

int g[5 * maxN], n, m, res[maxN];
ll t[5 * maxN];

struct hire {
	int t, r, p;
};

hire a[maxN], b[maxN];

void update(int k, int l, int r, int i, int v) {
	if (i < l || i > r) return;
	if (l == r) {
		t[k] += v;
		g[k]++;
		return;
	}
	int mid = (l + r) >> 1;
	update(k * 2, l, mid, i, v);
	update(k * 2 + 1, mid + 1, r, i, v);
	t[k] = t[k * 2] + t[k * 2 + 1];
	g[k] = g[k * 2] + g[k * 2 + 1];
}

int get(int k, int l, int r, int i, int j) {
	if (l == r) 
		if (t[k] - i >= j) return l;
		else return 0;
	int mid = (l + r) >> 1;
	if (t[k * 2] - 1ll * g[k * 2] * i >= j) return get(k * 2, l, mid, i, j);
	else 
		return get(k * 2 + 1, mid + 1, r, i, j - (t[k * 2] - 1ll * g[k * 2] * i));
}

bool cmp(hire i, hire j) {
	return i.t > j.t;
}

int main() {
	cin >> n >> m;
	foru(i, 1, m) cin >> a[i].t, a[i].p = i;
	sort(a + 1, a + m + 1, cmp);
	foru(i, 1, n) cin >> b[i].t >> b[i].r, b[i].p = i;
	sort(b + 1, b + n + 1, cmp);
	int j = 1;
	foru(i, 1, n) {
		while (j <= m && a[j].t >= b[i].t) update(1, 1, m, a[j].p, a[j].t), ++j;
		int l = 1, r = m;
		res[b[i].p] = get(1, 1, m, b[i].t, b[i].r);
	}	
	foru(i, 1, n) cout << res[i] << " ";
}
			 			  	 	  	 	 			  		  		 	