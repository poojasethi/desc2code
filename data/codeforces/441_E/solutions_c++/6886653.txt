#include<cstdio>
#include<iostream>
#include<algorithm>
using namespace std;

double F[210][235][256][2];
int a, b, c;

inline int bitcnt (int x,int y)
{
    int s = 0;
    while (x && (x & 1) == y) ++s, x >>= 1;
    return s;
}

double get (int x,int y,int k,int p)
{
    if (x == b)
        if (!k) return (p ? 0 : y) + 8;
        else
            return bitcnt(k, 0);

    if (F[x][y][k][p] > -0.5) return F[x][y][k][p];

    double s = get(x + 1, (p == (k > 127)) ? y + 1 : 1, (k << 1) & 255, k > 127) * c;

    if (k < 255) s += get(x + 1, y, k + 1, p) * (100 - c);
    else
        s += get(x + 1, p ? y : 1, 0, !p) * (100 - c);

    F[x][y][k][p] = s / 100;
    return F[x][y][k][p];
}

int main ()
{
	//freopen("test.inp","r",stdin);
	iostream::sync_with_stdio(false);
	cin.tie(NULL);
	int x, k = 0;

	cin >> a >> b >> c;

    fill(F[0][0][0], F[b][0][0], -1.0);
	cout << fixed << get(0, bitcnt(a >> 8, (a >> 8) & 1), a & 255, (a >> 8) & 1);

	return 0;
}