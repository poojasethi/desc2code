#include<stdio.h>
#include<iostream>
#include<math.h>
#include<string.h>
#include<algorithm>
using namespace std;
#define eps 1e-8
int sig(double x) {return (x>eps)-(x<-eps);}
struct P
{
    double x,y;
    P(double a=0,double b=0):x(a),y(b){}
    P operator +(const P &a)const{
        return P(x+a.x,y+a.y);
    }
    P operator -(const P &a)const{
        return P(x-a.x,y-a.y);
    }
    double operator *(const P &a)const{
        return x*a.x+y*a.y;
    }
    double operator ^(const P &a)const{
        return x*a.y-y*a.x;
    }
    int operator <(const P &a)const{
        if(a.x!=x) return x<a.x;
        else return y<a.y;
    }
};
P a,b,w1,w2,m1,m2;
int inter(P a,P b,P c,P d)
{
    int ok=1;
    ok=ok&&(min(a.x,b.x)<=max(c.x,d.x)+eps);
    ok=ok&&(max(a.x,b.x)>=min(c.x,d.x)-eps);
    ok=ok&&(min(a.y,b.y)<=max(c.y,d.y)+eps);
    ok=ok&&(max(a.y,b.y)>=min(c.y,d.y)-eps);
    ok=ok&&(sig(((b-a)^(c-a))*((b-a)^(d-a)))<=0);
    ok=ok&&(sig(((d-c)^(b-c))*((d-c)^(a-c)))<=0);
    return ok;
}
P change(P t)
{
    double d,e,f,g;
    e=m2.y-m1.y,f=m1.x-m2.x,g=m2.x*m1.y-m1.x*m2.y;
    d=e*e+f*f;
    P ans;
    ans.x=f*f*t.x-e*e*t.x-2*e*f*t.y-2*e*g;
    ans.x/=d;
    ans.y=e*e*t.y-f*f*t.y-2*e*f*t.x-2*f*g;
    ans.y/=d;
    //printf("%lf %lf\n",ans.x,ans.y);
    return ans;
}
int main()
{
    while(~scanf("%lf%lf%lf%lf",&a.x,&a.y,&b.x,&b.y))
    {
        scanf("%lf%lf%lf%lf",&w1.x,&w1.y,&w2.x,&w2.y);
        scanf("%lf%lf%lf%lf",&m1.x,&m1.y,&m2.x,&m2.y);
        if(sig((m1-a)^(m2-a))*sig((m1-b)^(m2-b))==0)
        {
            if(!inter(a,b,w1,w2)) printf("YES\n");
            else printf("NO\n");
            continue;
        }
        int flag=1;
        if(inter(a,b,w1,w2)||inter(a,b,m1,m2))
        {
            flag=0;
            P b1=change(b),w11=change(w1),w22=change(w2);
            if(inter(a,b1,m1,m2)&&!inter(a,b1,w1,w2)&&!inter(a,b1,w11,w22))
                flag=1;
        }
        if(flag)
            printf("YES\n");
        else
            printf("NO\n");
    }
    return 0;
}
