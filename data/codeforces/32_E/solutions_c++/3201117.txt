#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>
using namespace std;
const double eps=1e-9;

int get()
{
	int f=0,v=0; char ch;
	while (!isdigit(ch=getchar()))if (ch=='-')break;
	if (ch=='-')f=1; else v=ch-48;
	while (isdigit(ch=getchar()))v=v*10+ch-48;
	if (f==1)return -v ;return v;
}

struct Tpoint
{
	double x,y;
	void init(){x=get(),y=get();}
	Tpoint(){}
	Tpoint(double _x,double _y){x=_x,y=_y;}
	Tpoint operator -(const Tpoint &b)const{return Tpoint(x-b.x,y-b.y);}
	double operator *(const Tpoint &b)const{return x*b.y-y*b.x;}
	double operator &(const Tpoint &b)const{return x*b.x+y*b.y;}
};

struct Tline
{
	Tpoint p1,p2;
	double a,b,c;
	void init(){p1.init(),p2.init();}
	Tline(){}
	Tline(Tpoint _p1,Tpoint _p2){p1=_p1,p2=_p2;}
	void make(){a=p1.y-p2.y,b=p2.x-p1.x,c=p1*p2;}
}A,B,C;

bool check(const Tpoint &p,const Tline &A){return fabs((p-A.p1)*(p-A.p2))<=eps&&((p-A.p1)&(p-A.p2))<=eps;}
bool cross(const Tline &A,const Tline &B)
{
	double t1=((A.p1-B.p1)*(B.p2-B.p1))*((B.p2-B.p1)*(A.p2-B.p1));
	double t2=((B.p1-A.p1)*(A.p2-A.p1))*((A.p2-A.p1)*(B.p2-A.p1));
	if(t1<-eps||t2<-eps)return 0;
	if(t1>eps||t2>eps)return 1;
	return check(A.p1,B)||check(A.p2,B)||check(B.p1,A)||check(B.p2,A);
}
Tpoint getp(Tpoint p,Tline A)
{
	A.make();double a=A.a,b=A.b,c=A.c,t1=a*p.x+b*p.y+c,t2=a*a+b*b;
	return Tpoint(p.x-2*a*t1/t2,p.y-2*b*t1/t2);
}
Tpoint Get(Tline l1,Tline l2)
{
	l1.make(),l2.make();
	Tpoint p;
	p.x=(l2.c*l1.b-l1.c*l2.b)/(l1.a*l2.b-l2.a*l1.b);
	p.y=(l2.c*l1.a-l1.c*l2.a)/(l1.b*l2.a-l2.b*l1.a);
	return p;
}

int main()
{
	A.init(),B.init(),C.init();
	if(!cross(A,B)&&!cross(A,C)){printf("YES\n");return 0;}
	Tpoint p=getp(A.p2,C);
	if(!cross(Tline(A.p1,p),C)){printf("NO\n");return 0;}
	if(fabs((C.p2-C.p1)*(p-A.p1))<=eps)
	{
		if(cross(A,B))printf("NO\n");else printf("YES\n");
		return 0;
	}
	p=Get(Tline(A.p1,p),C);
	if(cross(Tline(A.p1,p),B)||cross(Tline(A.p2,p),B)){printf("NO\n");return 0;}
	printf("YES\n");
	return 0;
}
