#include<stdio.h>
#include<math.h>
#include<complex>
using namespace std;
typedef complex<double> point;
point a,b,ma,mb,wa,wb;
const double eps=1e-9;
bool pd(point a,point b,point p,point q)
{
	return imag((p-a)*conj(b-a))*imag((q-a)*conj(b-a))<-eps;
}
bool pd3(point a,point b,point p,point q)
{
	return fabs(imag((p-a)*conj(b-a)))<eps&&fabs(imag((q-a)*conj(b-a)))<eps;
}
bool pd4(point a,point b,point p,point q)
{
	return fabs(arg(b-a)-arg(p-a))<eps&&abs(p-a)<abs(b-a)-eps;
}
bool pd2(point a,point b,point p,point q)
{
	return imag((p-a)*conj(b-a))*imag((q-a)*conj(b-a))<eps;
}
bool isintersect(point a,point b,point p,point q)
{
	return pd(a,b,p,q)&&pd(p,q,a,b);
}
bool isintersect3(point a,point b,point p,point q)
{
	return pd2(a,b,p,q)&&!pd3(a,b,p,q)&&pd2(p,q,a,b);
}
bool isintersect2(point a,point b,point p,point q)
{
	if(pd3(a,b,p,q))return pd4(a,b,p,q)||pd4(p,q,a,b);
	return isintersect3(a,b,p,q);
}
point intersect(point a,point b,point p,point q)
{
	double x=imag((p-a)*conj(b-a)),y=imag((b-a)*conj(q-a));
	return (x*q+y*p)/(x+y);
}
int main()
{
	int xa,ya,xb,yb,xma,xmb,xwa,xwb,yma,ymb,ywa,ywb;
	scanf("%d%d%d%d%d%d%d%d%d%d%d%d",&xa,&ya,&xb,&yb,&xwa,&ywa,&xwb,&ywb,&xma,&yma,&xmb,&ymb);
	a=point(xa,ya);
	b=point(xb,yb);
	ma=point(xma,yma);
	mb=point(xmb,ymb);
	wa=point(xwa,ywa);
	wb=point(xwb,ywb);
	if((!isintersect2(a,b,wa,wb))&&(!isintersect3(a,b,ma,mb)))return puts("YES"),0;
	point bb=ma+(mb-ma)*conj(b-ma)*(mb-ma)/norm(mb-ma);
	if(!isintersect3(a,bb,ma,mb))return puts("NO"),0;
	point c=intersect(a,bb,ma,mb);
	if(isintersect2(a,c,wa,wb)||isintersect2(b,c,wa,wb))return puts("NO"),0;
	puts("YES");
	return 0;
}
