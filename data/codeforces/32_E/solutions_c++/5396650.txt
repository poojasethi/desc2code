#include <cmath>
#include <cstdio>
#define eps 1e-9

struct point
{
	double x,y;
	point(double _x=0,double _y=0) {x=_x,y=_y;}
	void read() {scanf("%lf%lf",&x,&y);}
	friend point operator +(point a,point b) {return point(a.x+b.x,a.y+b.y);}
	friend point operator -(point a,point b) {return point(a.x-b.x,a.y-b.y);}
	friend double operator *(point a,point b) {return a.x*b.y-a.y*b.x;}
	friend double operator /(point a,point b) {return a.x*b.x+a.y*b.y;}
	point operator *(double k) {return point(x*k,y*k);}
} A,B,C,D,W1,W2,M1,M2;

bool in(point a,point b,point c) {return fabs((a-c)*(b-c))<eps&&(a-c)/(b-c)<eps;}

bool cross(point a,point b,point c,point d,bool f)
{
	if (f&&in(a,b,c)&&in(a,b,d)) return 0;
	if (in(a,b,c)||in(a,b,d)||in(c,d,a)||in(c,d,b)) return 1;
	bool k=((c-a)*(b-a))*((b-a)*(d-a))>eps&&((a-c)*(d-c))*((d-c)*(b-c))>eps;
	return k;
}

point cross(point a,point b,point c,point d)
{
	double s1=(c-a)*(b-a),s2=(d-b)*(a-b),k=s1/(s1+s2);
	return c+(d-c)*k;
}

point symm(point a,point b,point c)
{
	point p=cross(a,b,c,c+point(a.y-b.y,b.x-a.x));
	return p+p-c;
}

bool ok() 
{
	if (cross(A,B,M1,M2,1)) return 0;
	if (!cross(A,B,W1,W2,0)) return 1;
	C=symm(M1,M2,A);
	if (!cross(B,C,M1,M2,1)) return 0;
	D=cross(B,C,M1,M2);
	return !cross(A,D,W1,W2,0)&&!cross(B,D,W1,W2,0);
}

int main()
{
	A.read(),B.read(),W1.read(),W2.read(),M1.read(),M2.read();
	puts(ok()?"YES":"NO");
}