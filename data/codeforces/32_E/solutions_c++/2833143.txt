#include <cstdio>
#include <cmath>
const	double	zero = 1e-12;
inline	double	cfabs(double x)	{if (x > zero) return x; if (x < -zero) return -x; return 0;}
inline	double	csqr(double x)	{return x * x;}
struct	points
{
	double	x, y;
	points()	{}
	points(double xx, double yy)	{x = xx, y = yy;}
	void	scan1()	{scanf("%lf%lf", &x, &y);}
	double	sqrl()	{return csqr(x) + csqr(y);}
	double	len()	{return sqrt(sqrl());}
};
points	operator+(points a, points b)	{return points(a.x+b.x, a.y+b.y);}
points	operator-(points a, points b)	{return points(a.x-b.x, a.y-b.y);}
points	operator*(double l, points a)	{return points(l*a.x, l*a.y);}
double	operator*(points a, points b)	{return a.x*b.x + a.y*b.y;}
double	operator^(points a, points b)	{return a.x*b.y-a.y*b.x;}
points	setlen(double l, points a)	{return (l / a.len()) * a;}
int	cross(points p10, points p11, points p20, points p21)
{
	if (cfabs((p11 - p10) ^ (p21 - p20)) < zero)
	{
		if (cfabs((p21-p11) ^ (p11 - p10)) < zero)
		{
			if ((p21 - p11) * (p10 - p11) < zero && (p20 - p11) * (p10 - p11) < zero) return 0;
			if ((p21 - p10) * (p11 - p10) < zero && (p20 - p10) * (p11 - p10) < zero) return 0;
			return 8;
		}
		return 0;
	}
	double t1, t2, t3, t4;
	t1 = (p20-p10) ^ (p21-p10);
	t2 = (p20-p11) ^ (p21-p11);
	t3 = (p10-p20) ^ (p11-p20);
	t4 = (p10-p21) ^ (p11-p21);
	if ((t1 * t2 < zero) && (t3 * t4 < zero)) return 1;
	return 0;
}
points	getc(points p10, points p11, points p20, points p21)
{
	double sa = (p20-p10) ^ (p21-p10);
	double sb = (p20-p11) ^ (p21-p11);
	points t = sa / (sa - sb) * (p11 - p10);
	return t + p10;
}
points	flip(points p, points m1, points m2)
{
	points t = (((p - m1) * (m2 - m1)) / (m2 - m1).sqrl()) * (m2 - m1) + m1;
	t = t + (t - p);
	return t;
}
points	px, py, pd, p1s, p1e, p2s, p2e;
bool	css1, css2;
int	main()
{
//	freopen("00y.in", "r", stdin);
//	freopen("00y.out", "w", stdout);
	px.scan1();
	py.scan1();
	p1s.scan1();
	p1e.scan1();
	p2s.scan1();
	p2e.scan1();
	css1 = (cross(px, py, p1s, p1e) == 0) && (cross(px, py, p2s, p2e) != 1);
	pd = flip(py, p2s, p2e);
	if (cross(px, py, p2s, p2e) != 1 && cross(px, pd, p2s, p2e) == 1)
	{
		pd = getc(px, pd, p2s, p2e);
		css2 = (!cross(px, pd, p1s, p1e)) && (!cross(pd, py, p1s, p1e));
	}
	else	css2 = 0;
	if (css1 || css2) printf("YES\n"); else printf("NO\n");
	return 0;
}