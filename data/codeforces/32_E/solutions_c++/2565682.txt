#include<cstdio>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<cmath>

#define halt(s) return puts(s),0
#define Abs(x) (((x)>0)?(x):(-(x)))

typedef long long ll;
typedef long double ldb;

const int fin=0;
const long double eps=1e-6;

struct pt{
  ldb x,y;
  pt(){}
  pt(ldb x,ldb y):x(x),y(y){}
  pt operator *(const ldb &w){return pt(x*w,y*w);}
  pt operator /(const ldb &w){return pt(x/w,y/w);}
  pt operator -(pt a){return pt(x-a.x,y-a.y);}
  pt operator +(pt a){return pt(x+a.x,y+a.y);}
  ldb operator *(pt a){return x*a.y-y*a.x;}
  ldb operator /(pt a){return x*a.x+y*a.y;}
  ldb mod(){return sqrt(x*x+y*y);}
  void read(){double a,b;scanf("%lf%lf",&a,&b),x=a,y=b;}
}a,b,w0,w1,m0,m1,e;
inline int dblcmp(long double x){
  return (Abs(x)<eps)?0:((x>0)?1:-1);
}
inline bool onlin(pt a,pt b,pt c){
  return dblcmp((c-a)*(c-b))==0;
}
inline bool inseg(pt a,pt b,pt c){
  return onlin(a,b,c)&&dblcmp((c-a)/(c-b))==-1;
}
inline bool cross(pt a,pt b,pt c,pt d){
  return (dblcmp((b-a)*(c-a))^dblcmp((b-a)*(d-a)))==-2;
}
inline bool inter(pt a,pt b,pt c,pt d){
  if(cross(a,b,c,d)&&cross(c,d,a,b))return 1;
  if(inseg(a,b,c)||inseg(a,b,d))return 1;
  if(inseg(c,d,a)||inseg(c,d,b))return 1;
  return 0;
}
inline pt trans(pt e,pt c){
  return e*(c/e)*2-c;
}

int main(){
  if(fin){
    freopen("t.in","r",stdin);
    freopen("t.out","w",stdout);
  }
  a.read(),b.read();
  w0.read(),w1.read();
  m0.read(),m1.read();
  if(onlin(m0,m1,a)||onlin(m0,m1,b))
    halt(inter(a,b,w0,w1)?"NO":"YES");
  if(cross(m0,m1,a,b))
    halt(inter(a,b,w0,w1)||inter(a,b,m0,m1)?"NO":"YES");
  if(!inter(a,b,w0,w1))halt("YES");
  e=m1-m0,e=e/e.mod();
  b=m0+trans(e,b-m0);
  if(!inter(a,b,m0,m1))halt("NO");
  if(inter(a,b,w0,w1))halt("NO");
  w0=m0+trans(e,w0-m0),w1=m0+trans(e,w1-m0);
  if(inter(a,b,w0,w1))halt("NO");
  puts("YES");
  return 0;
}
