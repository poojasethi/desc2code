#include<cstdio>
#include<algorithm>
using namespace std;
struct note{
	double x,y; void read(){scanf("%lf%lf",&x,&y);}
	note (double X=0,double Y=0):x(X),y(Y){}
	note operator -(note A){return note(x-A.x,y-A.y);}
	note operator +(note A){return note(x+A.x,y+A.y);}
	note operator *(double a){return note(x*a,y*a);}
	note operator /(double a){return note(x/a,y/a);}
}A,B,C,M1,M2,V1,V2,W1,W2,O,P;
double abs(double a){return a>0?a:-a;}
double xot(note A,note B){return A.x*B.y-A.y*B.x;}
bool cross(note A,note B,note C,note D,note &O,int flag)
{
	note tmp; if (A.x>B.x || abs(A.x-B.x)<1e-8 && A.y>B.y) tmp=A,A=B,B=tmp;
	note AB=B-A,AC=C-A,AD=D-A; double s1=xot(AB,AC),s2=xot(AB,AD);
	if (flag<2 && abs(xot(AB,D-C))<1e-8)
		return flag?A.x<C.x && C.x<B.x || abs(A.x-B.x)<1e-8 && A.y<C.y && C.y<B.y:0;
	if (flag<2 && (s1*s2>1e-8 || xot(A-C,D-C)*xot(B-C,D-C)>1e-8)) return 0;
	O=(D*s1-C*s2)/(s1-s2); return 1;
}
void change(note A,note B,note &C)
{
	note AB=B-A,CD=note(AB.y,-AB.x),D=C+CD,O;
	cross(A,B,C,D,O,2); C=O+O-C;
}
int work()
{
	if (cross(A,B,M1,M2,O,0)) return 0; if (!cross(A,B,W1,W2,O,1)) return 1;
	C=A,change(M1,M2,C); if (!cross(B,C,M1,M2,O,0)) return 0;
	return !cross(A,O,W1,W2,P,1) && !cross(B,O,W1,W2,P,1);
}
int main()
{
	A.read(),B.read(),W1.read(),W2.read(),M1.read(),M2.read();
	puts(work()?"YES":"NO"); return 0;
}
