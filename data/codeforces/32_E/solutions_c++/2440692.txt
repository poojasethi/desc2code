#include<cstdio>
#include<cmath>
const double eps=1e-8;
struct node{double x,y;}v,p,pp,q,w1,w2,m1,m2,ww1,ww2;
int n,i,j;
void get(node&a)
{
    scanf("%lf%lf",&a.x,&a.y);
}
node operator -(node a,node b)
{
    node res;
    res.x=a.x-b.x,res.y=a.y-b.y;
    return res;
}
node operator +(node a,node b)
{
    node res;
    res.x=a.x+b.x,res.y=a.y+b.y;
    return res;
}
double operator *(node a,node b)
{
    return a.x*b.y-b.x*a.y;
}
double sqr(double x){return x*x;}
double dis(node a,node b)
{
    return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));
}
bool line(node a,node b,node c)
{
    return fabs(dis(a,c)+dis(b,c)-dis(a,b))<eps;
}
bool cross(node a,node b,node c,node d,int v)
{
    if(v==0)if(line(a,b,c)&&line(a,b,d))return 0;
    if(line(a,b,c)||line(a,b,d)||line(c,d,a)||line(c,d,b))return 1;
    double t1=((b-a)*(c-a))*((b-a)*(d-a));
    double t2=((d-c)*(a-c))*((d-c)*(b-c));
    return t1<-eps&&t2<-eps;
}
node query(node a,node b,node c,node d)
{
    double s1=(c-a)*(b-a),s2=(b-a)*(d-a);
    node res;
    res.x=(c.x*s2+d.x*s1)/(s1+s2);
    res.y=(c.y*s2+d.y*s1)/(s1+s2);
    return res;
}
node calc(node a,node b,node c)
{
    node d=c-b,e;
    e.x=-d.y,e.y=d.x;
    d=query(b,c,a,a+e);
    e=d-a;
    return d+e;
}
int main()
{
    get(v),get(p),get(w1),get(w2),get(m1),get(m2);
    if(!cross(v,p,w1,w2,1)&&!cross(v,p,m1,m2,0))
    {
        printf("YES\n");
        return 0;
    }
    else
    {
        ww1=w1,ww2=w2;
        pp=calc(p,m1,m2);
        if(cross(v,pp,m1,m2,0))
        {
            q=query(v,pp,m1,m2);
            if(!cross(v,q,w1,w2,1)&&!cross(p,q,w1,w2,1)){printf("YES\n");return 0;}
        }
        printf("NO\n");
    }
    return 0;
}