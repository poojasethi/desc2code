#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <complex>
using namespace std;

typedef complex<double> Tp;
Tp v, p, w1, w2, m1, m2;

double dot(Tp a, Tp b) { return real(a * conj(b)); }
double det(Tp a, Tp b) { return imag(a * conj(b)); }
bool in(Tp x, Tp a, Tp b) {
    return det(a - x, b - x) == 0 && dot(a - x, b - x) <= 0;
}

bool insect(Tp a, Tp b, Tp c, Tp d) {
    double p = det(b - a, c - a) * det(b - a, d - a);
    double q = det(d - c, a - c) * det(d - c, b - c);
    if (p > 0 || q > 0) return false;
    if (p < 0 && q < 0) return true;
    else return in(c, a, b) || in(d, a, b);
}

Tp getsym(Tp s, Tp a, Tp b) {
    return s + b * b / a * Tp(dot(a, a) / dot(b, b), 0);
}

bool check() {
    if (insect(v, p, m1, m2))
        return !insect(v, p, w1, w2) && det(m2 - m1, p - v) == 0;
    if (insect(v, p, w1, w2)) {
        Tp V = getsym(m1, v - m1, m2 - m1), P = getsym(m1, p - m1, m2 - m1);
        return insect(v, P, m1, m2) && !insect(v, P, w1, w2) && !insect(V, p, w1, w2);
    }
    return true;
}

void scanTp(Tp &a) {
    double x, y;
    scanf("%lf%lf", &x, &y);
    a = Tp(x, y);
}

int main() {
    scanTp(v); scanTp(p);
    scanTp(w1); scanTp(w2);
    scanTp(m1); scanTp(m2);
    puts(check() ? "YES" : "NO");
    return 0;
}
