#!/home/kameda/pyenv2/bin/python

N, M = [int(i) for i in raw_input().strip().split()]

matrix = [] #each str * rows
for i in range(N):
    matrix.append(raw_input().strip()[:M])

def get_right_shift_cost(r):
    right_shift_cost = [0] * len(r)
    temp_cost = 0
    try:
        index_of_first_1 = r.index("1")
    except ValueError:
        #There is no 1, that is, no solution exist.
        return False
    for i in range(index_of_first_1, len(r)):
        if r[i] == "1":
            temp_cost = 0
        if r[i] == "0":
            temp_cost += 1
        right_shift_cost[i] = temp_cost
    for i in range(0, index_of_first_1):
        if r[i] == "1":
            temp_cost = 0
        if r[i] == "0":
            temp_cost += 1
        right_shift_cost[i] = temp_cost
    return right_shift_cost

def get_left_shift_cost(r):
    left_shift_cost = [0] * len(r)
    temp_cost = 0
    try:
        index_of_first_1 = r.rindex("1")
    except ValueError:
        #There is no 1, that is, no solution exist.
        return False
    for i in reversed(range(0, index_of_first_1+1)):
        if r[i] == "1":
            temp_cost = 0
        if r[i] == "0":
            temp_cost += 1
        left_shift_cost[i] = temp_cost
    for i in reversed(range(index_of_first_1+1, len(r))):
        if r[i] == "1":
            temp_cost = 0
        if r[i] == "0":
            temp_cost += 1
        left_shift_cost[i] = temp_cost
    return left_shift_cost
    
cost_row = [0]*M
for i in range(N):
    rsc = get_right_shift_cost(matrix[i])
    lsc = get_left_shift_cost(matrix[i])
    if rsc and lsc:
        cost_row = [min(rsc[i],lsc[i])+cost_row[i] for i in range(M)]
    else:
        print(-1)
        exit(0)
        
print(min(cost_row))
exit(0)