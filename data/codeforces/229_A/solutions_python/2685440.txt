#!/home/kameda/pyenv2/bin/python

N, M = [int(i) for i in raw_input().strip().split()]

matrix = []
for i in range(N):
    matrix.append(list(raw_input().strip())[:M])

def get_right_shift_cost(r):
    right_shift_cost = [0] * len(r)
    temp_cost = 0
    try:
        index_of_first_1 = r.index("1")
    except ValueError:
        #There is no 1, that is, no solution exist.
        return False
    for i in range(index_of_first_1, len(r)):
        if r[i] == "1":
            temp_cost = 0
        if r[i] == "0":
            temp_cost += 1
        right_shift_cost[i] = temp_cost
    for i in range(0, index_of_first_1):
        if r[i] == "1":
            temp_cost = 0
        if r[i] == "0":
            temp_cost += 1
        right_shift_cost[i] = temp_cost
    return right_shift_cost

def get_left_shift_cost(r):
    left_shift_cost = [0] * len(r)
    temp_cost = 0
    try:
        index_of_first_1 = len(r)-list(reversed(r)).index("1")-1
    except ValueError:
        #There is no 1, that is, no solution exist.
        return False
    for i in reversed(range(0, index_of_first_1+1)):
        if r[i] == "1":
            temp_cost = 0
        if r[i] == "0":
            temp_cost += 1
        left_shift_cost[i] = temp_cost
    for i in reversed(range(index_of_first_1+1, len(r))):
        if r[i] == "1":
            temp_cost = 0
        if r[i] == "0":
            temp_cost += 1
        left_shift_cost[i] = temp_cost
    return left_shift_cost
    
cost_matrix = []
for i in range(N):
    rsc = get_right_shift_cost(matrix[i])
    lsc = get_left_shift_cost(matrix[i])
    if rsc and lsc:
        cost_matrix.append([min(rsc[i],lsc[i]) for i in range(M)])
    else:
        print(-1)
        exit(0)

min_cost = (N-1)*((M+1)/2)
for j in range(M):
    temp_cost = 0
    for i in range(N):
        temp_cost += cost_matrix[i][j]
    if temp_cost < min_cost:
        min_cost = temp_cost
        
print(min_cost)
exit(0)