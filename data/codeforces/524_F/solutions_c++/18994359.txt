#include <cstring>
#include <algorithm>
#include <cstdio>

using namespace std;
const int Inf = 1e9 + 7;

const int MAXN = 2e6 + 5;

char S[MAXN];
int Len, Num, Sum[MAXN], Suf[MAXN], All[MAXN];
int Pow[MAXN][2], Hash[MAXN][2], Mo[2];

int Calc(int x, int Len, int Ord) {
	return ((Hash[x + Len - 1][Ord] - 1ll * Pow[Len][Ord] * Hash[x - 1][Ord] % Mo[Ord]) % Mo[Ord] + Mo[Ord]) % Mo[Ord]; 
}

int GetLcp(int x, int y) {
	int l = 1, r = Len, Ans = 0;
	while (l <= r) {
		int Mid = (l + r) >> 1;
		if (Calc(x, Mid, 0) == Calc(y, Mid, 0) && Calc(x, Mid, 1) == Calc(y, Mid, 1)) Ans = Mid, l = Mid + 1; else r = Mid - 1;
	}
	return Ans;
}

bool Cmp(int x, int y) {
	int Lcp = GetLcp(x, y);
	return S[x + Lcp] < S[y + Lcp];
}

int main() {
	Mo[0] = 1e9 + 7, Mo[1] = 1e7 + 7;
	scanf("%s", S + 1);
	Len = strlen(S + 1);
	for (int i = 1; i <= Len; i ++) {
		Sum[i] = Sum[i - 1] + (S[i] == '(' ? 1 : -1);
		S[i + Len] = S[i];
 	}
	Pow[0][0] = Pow[0][1] = 1;
	for (int i = 1; i <= Len * 2; i ++) {
		for (int j = 0; j <= 1; j ++) {
			Hash[i][j] = (1ll * Hash[i - 1][j] * 3 + S[i]) % Mo[j];
			Pow[i][j] = (1ll * Pow[i - 1][j] * 3) % Mo[j];
		}
	}
 	
	Suf[Len + 1] = All[0] = Inf;
	for (int i = Len; i; i --) Suf[i] = min(Sum[i], Suf[i + 1]);
	for (int i = 1; i <= Len; i ++) All[i] = min(Sum[i] + Sum[Len], All[i - 1]);
	
	int Ans = -1;
	for (int i = 1; i <= Len; i ++) {
		if (min(0, min(Suf[i], All[i - 1]) - Sum[i - 1]) == min(0, Sum[Len])) 
			if (Ans == -1 || Cmp(i, Ans)) Ans = i;
	}
	for (int i = Sum[Len]; i < 0; i ++) printf("(");
	for (int i = 1; i <= Len; i ++) printf("%c", S[i + Ans - 1]);
	for (int i = 1; i <= Sum[Len]; i ++) printf(")");
	
}