import heapq

def adjust(heap, s, nmore, cost):
    if not heap:
        print -1
        quit()
    dec, index = heapq.heappop(heap)
    cost += dec
    nmore += 2
    s[index] = '('
    return (nmore, cost)

s = list(raw_input())

heap = []
cost = 0

nmore = 0
for index, value in enumerate(s):
    if value == '(':
        nmore += 1
    elif value == ')':
        nmore -= 1
    else:
        l, r = map(int, raw_input().split())
        cost += r
        nmore -= 1
        heapq.heappush(heap, (l-r, index))
        s[index] = ')'

    if nmore < 0:
        nmore, cost = adjust(heap, s, nmore, cost)

if nmore == 0:
    print '{cost}\n{seq}'.format(cost=cost, seq=''.join(s))
else:
    print -1
        

