import heapq
s = list(raw_input())
n = 0
for item in s:
	if item == '?':
		n += 1

array = []
for i in xrange(n):
	line = map(int, raw_input().split())
	array.append(line)
# print array

diff = []
balance = 0
heap = []
cost = 0
count = -1
for i in xrange(len(s)):
	if s[i] == '(':
		balance += 1
	if s[i] == ')':
		balance -= 1
	if s[i] == '?':
		count += 1
		delta = array[count][0] - array[count][1]
		diff.append([delta, i])
		s[i] = ')'
		# print 'array->i', array[count][1], i
		cost += array[count][1]
		# print 'count->', count
		heapq.heappush(heap, diff[count])
		# print 'heap->', heap
		# print 'diff[count]->', diff[count]
		balance -= 1
	if balance < 0 and heap != []:
		minitem = heapq.heappop(heap)
		# print 'heap->', heap
		changePos = minitem[1]
		s[changePos] = '('
		balance += 2
		cost += minitem[0]
	if balance < 0 and heap == []:
		break

res = ''.join(s)

if balance == 0:
	print cost
	print res
else:
	print -1



		


