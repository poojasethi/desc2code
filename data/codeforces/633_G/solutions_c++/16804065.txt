#include <bitset>
#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
using namespace std;
const int maxm=1e3+10;
const int maxn=1e5+10;
int vis[maxm],prim[maxm],cnt;
void init()
{
    cnt=0;
    for(int i=2;i<maxm;i++)
    {
        if(!vis[i])
        {
            prim[cnt++]=i;
            for(int j=2*i;j<maxm;j+=i)
                vis[j]=1;
        }
    }
}
#define lch (o<<1)
#define rch (o<<1|1)
vector<int> g[maxn];
int nu[maxn],num[maxn],bef[maxn],aft[maxn],dfs_c;
void dfs(int u,int f)
{
    bef[u]=++dfs_c;
    for(int i=0;i<g[u].size();i++)
    {
        int v=g[u][i];
        if(v==f)    continue;
        dfs(v,u);
    }
    aft[u]=dfs_c;
}
int lazy[maxn<<2],n,m;
bitset<maxm> b[maxn<<2],ans,full;
void pushup(int o)
{
    b[o]=(b[lch]|b[rch]);
}
void fun(int o,int ad)
{
    ad%=m;
    lazy[o]=(lazy[o]+ad)%m;
    b[o]=((b[o]<<ad)&full)|(b[o]>>(m-ad));
}
void pushdown(int l,int r,int o)
{
    if(lazy[o])
    {
        int mid=(l+r)/2;
        fun(lch,lazy[o]);
        fun(rch,lazy[o]);
        lazy[o]=0;
    }
}
void build(int l,int r,int o)
{
    if(l==r)
    {
        num[l]%=m;
        b[o].set(num[l]);
        return;
    }
    int mid=(l+r)/2;
    build(l,mid,lch);
    build(mid+1,r,rch);
    pushup(o);
}
void change(int l,int r,int o,int L,int R,int ad)
{
    if(L<=l&&r<=R)
    {
        fun(o,ad);
        return;
    }
    pushdown(l,r,o);
    int mid=(l+r)/2;
    if(L<=mid)    change(l,mid,lch,L,R,ad);
    if(R>mid)    change(mid+1,r,rch,L,R,ad);
    pushup(o);
}
void query(int l,int r,int o,int L,int R)
{
    if(L<=l&&r<=R)
    {
        ans=ans|b[o];
        return;
    }
    pushdown(l,r,o);
    int mid=(l+r)/2;
    if(L<=mid)    query(l,mid,lch,L,R);
    if(R>mid)    query(mid+1,r,rch,L,R);
    pushup(o);
}
int main()
{
    init();
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
        scanf("%d",&nu[i]);
    for(int i=0;i<m;i++)
        full.set(i);
    for(int i=1;i<=n-1;i++)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1,-1);
    for(int i=1;i<=n;i++)
        num[bef[i]]=nu[i];
    build(1,n,1);
    int q;
    scanf("%d",&q);
    while(q--)
    {
        int type,v;
        scanf("%d%d",&type,&v);
        if(type==1)
        {
            int x;
            scanf("%d",&x);
            x%=m;
            change(1,n,1,bef[v],aft[v],x);
        }
        else
        {
            ans.reset();
            query(1,n,1,bef[v],aft[v]);
            int tot=0;
            for(int i=0;i<cnt&&prim[i]<m;i++)
                if(ans.test(prim[i]))
                    ++tot;
            printf("%d\n",tot);
        }
    }
    return 0;
}