#include<bits/stdc++.h>

using namespace std;

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define sol (root+root)
#define sag (root+root+1)
#define orta ((bas+son)/2)
#define ll long long
#define pii pair<int,int>
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

const int N=1e5+5;
const int N2=1000;
const int mod=1e9+7;
const int inf=1e9+7;

bitset<N2> st[4*N],H,bos;

int n,m,i,j,u,v,tme,q,w,x;
int lazy[4*N],S[N],F[N],A[N],wh[N];

vector<int> V[N];

void push(int root,int bas,int son){
	st[sol]=(st[sol]<<lazy[root])|(st[sol]>>(m-lazy[root]));
	st[sag]=(st[sag]<<lazy[root])|(st[sag]>>(m-lazy[root]));
	lazy[sag]+=lazy[root];
	lazy[sol]+=lazy[root];
	lazy[sag]%=m;
	lazy[sol]%=m;
	lazy[root]=0;
}

bitset<N2> update(int root,int bas,int son,int x,int y,int v){
	if(bas>y or son<x)
		return st[root];
	if(x<=bas and son<=y){
		lazy[root]+=v;
		lazy[root]%=m;
		return st[root]=(st[root]<<v)|(st[root]>>(m-v));
	}
	if(lazy[root])
		push(root,bas,son);
	return st[root]=update(sol,bas,orta,x,y,v)|update(sag,orta+1,son,x,y,v);
}

bitset<N2> query(int root,int bas,int son,int x,int y){
	if(bas>y or son<x)
		return bos;
		if(x<=bas and son<=y)
		return st[root];
	if(lazy[root])
		push(root,bas,son);
	return query(sol,bas,orta,x,y)|query(sag,orta+1,son,x,y);
}

void dfs(int x,int ata=0){
	S[x]=++tme;
	wh[tme]=x;
	for(int i=0 ; i<V[x].size() ; i++)
		if(V[x][i]!=ata)
			dfs(V[x][i],x);
	F[x]=tme;
}

bitset<N2> init(int root,int bas,int son){
	if(bas==son){
		st[root][A[wh[bas]]]=1;
		return st[root];
	}
	return st[root]=init(sol,bas,orta)|init(sag,orta+1,son);
}

main(){

	scanf("%d %d",&n,&m);

	for(i=2 ; i<m ; i++){
		int bek=0;
		for(j=2 ; j<=sqrt(i) ; j++)
			if(i%j==0){
				bek=1;
				break;
			}
		if(!bek)
			H[i]=1;
	}

	for(i=1 ; i<=n ; i++){
		scanf("%d",A+i);
		A[i]%=m;
	}

	for(i=1 ; i<n ; i++){
		scanf("%d %d",&u,&v);
		V[u].pb(v);
		V[v].pb(u);
	}

	dfs(1);

	init(1,1,n);

	scanf("%d",&q);

	for(i=1 ; i<=q ; i++){
		scanf("%d %d",&w,&v);
		if(w==1){
			scanf("%d",&x);
			update(1,1,n,S[v],F[v],x%m);
		}
		else printf("%d\n",(int)(query(1,1,n,S[v],F[v])&H).count());
	}

}
