//2016-05-27 20:43:03.313000
#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <bitset>

using namespace std;

typedef pair<int, int> pii;
typedef long long INT;

#define NN 110000

int N, M, deg[NN], a[NN];
int st[NN], en[NN], par[NN], id[NN], K;
vector<int> adj[NN];

int dfs(int u) {
//	printf("%d\n", u);
	st[u]=K; id[K++]=u;
	for (int i=0; i<deg[u]; i++) {
		int v=adj[u][i];
		if (v==par[u]) continue;
		par[v]=u; dfs(v);
	}
	en[u]=K;
}

typedef bitset<1000> State;

#define ls (u<<1)
#define rs (ls+1)
#define mid ((L+R)>>1)
State val[NN*4], all, primes;
int flag[NN*4];
void rotate(State &s, int k) {
//	printf("rotate %d\n", k);
	State buf;
	buf.reset();
	buf=(s>>(M-k));
	s<<=k;
	s|=buf;
	s&=all;
}
void push_down(int u) {
//	printf("** update %d\n", u);
	if (!flag[u]) return ;
	rotate(val[ls], flag[u]);
	rotate(val[rs], flag[u]);
	flag[ls]=(flag[ls]+flag[u])%M;
	flag[rs]=(flag[rs]+flag[u])%M;
	flag[u]=0;
}
void push_up(int u) {
	val[u].reset();
	val[u]|=val[ls];
	val[u]|=val[rs];
}
void update(int u, int L, int R, int l, int r, int x) {
	l=max(L, l); r=min(R, r);
	if (l>=r) return ;
	if (l==L && r==R) {
		rotate(val[u], x);
		flag[u]=(flag[u]+x)%M;
		return ;
	}
	push_down(u);
	update(ls, L, mid, l, r, x);
	update(rs, mid, R, l, r, x);
	push_up(u);
}
void calc(int u, int L, int R, int l, int r, State &s) {
	l=max(l, L); r=min(R, r);
	if (l>=r) return ;
	if (l==L && R==r) {
		s|=val[u];
		return ;
	}
	push_down(u);
	calc(ls, L, mid, l, r, s);
	calc(rs, mid, R, l, r, s);
}
void build(int u, int L, int R) {
	if (R==L+1) {
		val[u].set(a[id[L]]);
		return ;
	}
	build(ls, L, mid);
	build(rs, mid, R);
	push_up(u);
}

int main() {
	int Q, t, x, u, v;
	State s;
	
	scanf("%d%d", &N, &M);
	for (int i=0; i<N; i++) scanf("%d", &a[i]);
	for (int i=0; i<N-1; i++) {
		scanf("%d%d", &u, &v);
		u--, v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
		deg[u]++; deg[v]++;
	}
	
	all.reset(); primes.reset();
	for (int i=0; i<M; i++) {
		all.set(i);
		int j;
		for (j=2; j<i; j++) if (i%j==0) break;
		if (j==i) primes.set(i);
	}
	
	dfs(0);
	
//	for (int i=0; i<N; i++) printf("%d %d %d\n", i+1, st[i], en[i]);
	
	for (int i=0; i<N; i++) a[i]%=M;
	build(1, 0, N);
	
	for (scanf("%d", &Q); Q--; ) {
		scanf("%d", &t);
		if (t==1) {
			scanf("%d%d", &u, &x);
			u--; x%=M;
			update(1, 0, N, st[u], en[u], x);
		} else {
			scanf("%d", &u);
			u--;
			s.reset();
			calc(1, 0, N, st[u], en[u], s);
			s&=primes;
			printf("%d\n", s.count());
		}
	}
	
	return 0;
}