#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <bitset>
#include <vector>
#define P (p << 1)
#define M ((L + R) >> 1)

using namespace std;
const int N = 100005;
typedef bitset<1000> Bitset;

int n, m, q, L[N], R[N], val[N], arr[N];
vector<int> adj[N];

Bitset is;
Bitset st[N << 2],  mask;
int shift[N << 2];

inline void push(int p, int L, int R) {
	if (shift[p] %= m) {
		st[p] = ((st[p] << shift[p]) & mask) | (st[p] >> (m - shift[p]));
		if (L != R) {
			shift[P] += shift[p];
			shift[P | 1] += shift[p];
		}
		shift[p] = 0;
	}
}

inline void pull(int p) {
	st[p] = st[P] | st[P | 1];
}

void build(int p = 1, int L = 0, int R = n - 1) {
	if (L < R) {
		build(P, L, M);
		build(P|1, M+1, R);
		pull(p);
	} else {
		st[p][arr[L] % m] = true;
	}
}

void update(int a, int b, int v, int p = 1, int L = 0, int R = n - 1) {
	push(p, L, R);
	if (b < L || R < a) return;
	if (a <= L && R <= b) {
		shift[p] += v;
		push(p, L, R);
		return;
	}
	update(a, b, v, P, L, M);
	update(a, b, v, P|1, M+1, R);
	pull(p);
}

Bitset query(int a, int b, int p = 1, int L = 0, int R = n - 1) {
	push(p, L, R);
	if (b < L || R < a) return 0;
	if (a <= L && R <= b) return st[p];
	Bitset Q = query(a, b, P, L, M) | query(a, b, P|1, M+1, R);
	pull(p); return Q;
}

void dfs(int u, int p = -1) {
	static int id = 0;
	arr[id] = val[u];
	L[u] = id++;
	for (int i = 0; i < adj[u].size(); ++i) {
		int v = adj[u][i];
		if (v != p) {
			dfs(v, u);
		}
	}
	R[u] = id - 1;
}

int main() {
	is[2] = 1;
	for (int i = 3; i < 1000; i += 2)
		is[i] = 1;
	for (int i = 3; i * i < 1000; i += 2)
		if (is[i])
			for (int j = i * i; j < 1000; j += i)
				is[j] = 0;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i)
		mask[i] = 1;
	for (int i = 1; i <= n; ++i)
		scanf("%d", &val[i]);
	for (int i = 1; i < n; ++i) {
		int u, v; scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(1);
	build();
	scanf("%d", &q);
	while (q--) {
		int cmd;
		scanf("%d", &cmd);
		if (cmd == 1) {
			int u, v;
			scanf("%d%d", &u, &v);
			update(L[u], R[u], v); // cyclic shift right
		}
		else {
			int u;
			scanf("%d", &u);
			printf("%d\n", (query(L[u], R[u]) & is).count());
		}
	}
}