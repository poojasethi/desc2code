#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <bitset>
using namespace std;
const int N=1E5+5;
const int M=1005;
int n,m,p[M],tot,sum,l[N][2],mark[N*4],x,y,t,a[N],q;
bool o[M];
bitset <M> tr[N*4],ans,A;
vector <int> G[N];

void updata(int p,int w)
{
	mark[p]=(mark[p]+w)%m;
	tr[p]=(tr[p]<<w)|(tr[p]>>(m-w));
}

void push_down(int p)
{
	if (!mark[p]) return;
	updata(p*2,mark[p]);
	updata(p*2+1,mark[p]);
	mark[p]=0;
}

void add(int p,int l,int r,int x,int y,int w)
{
	if (x>r||y<l) return;
	if (x<=l&&y>=r)
	{
		updata(p,w);
		return;
	}
	push_down(p);
	int mid=(l+r)/2;
	add(p*2,l,mid,x,y,w); add(p*2+1,mid+1,r,x,y,w);
	tr[p]=tr[p*2]|tr[p*2+1];
}

void get(int p,int l,int r,int x,int y)
{
	if (x>r||y<l) return;
	if (x<=l&&y>=r)
	{
		ans|=tr[p];
		return;
	}
	push_down(p);
	int mid=(l+r)/2;
	get(p*2,l,mid,x,y); get(p*2+1,mid+1,r,x,y);
}

void dfs(int x,int fa)
{
	l[x][0]=++sum;
	for (int i=0;i<G[x].size();i++) if ((y=G[x][i])!=fa) dfs(y,x);
	l[x][1]=sum;
}

int main()
{
	cin>>n>>m;
	for (int i=2;i<m;i++) if (!o[i])
	{
		p[++tot]=i; A[i]=1;
		for (int j=i;j<=m;j+=i) o[j]=1;
	}
	for (int i=1;i<=n;i++) scanf("%d",&a[i]);
	for (int i=1;i<n;i++)
	{
		scanf("%d%d",&x,&y);
		G[x].push_back(y); G[y].push_back(x);
	}
	dfs(1,0);
	for (int i=1;i<=n*4;i++) tr[i][0]=1; 
	for (int i=1;i<=n;i++) add(1,1,n,l[i][0],l[i][0],a[i]%m);
	cin>>q;
	for (int i=1;i<=q;i++)
	{
		scanf("%d%d",&t,&x);
		if (t==1)
		{
			scanf("%d",&y);
			add(1,1,n,l[x][0],l[x][1],y%m);
		} else
		{
			ans=0;
			get(1,1,n,l[x][0],l[x][1]);
			printf("%d\n",(ans&A).count());
		}
	}
}