#include <bits/stdc++.h>
using namespace std;

#define DEBUG(x)	cerr << #x << " = " << x << endl;
#define INPUT		freopen("Data.inp", "r", stdin);
#define OUTPUT		freopen("Data.out", "w", stdout);

typedef long long LL;
typedef pair<int, int> II;

const int N = (int) 1e5 + 10;
const int M = (int) 1e3 + 10;
int n, m, q, a[N], x[N], y[N], rv[N], timer;
vector<int> adj[N];
bool fre[N];

bitset<M> st[N * 5], L[M];
int lp[N * 5];

bool IsPrime(int k) {
	for (int i = 2; i * i <= k; ++i)
		if (k % i == 0) return false;
	return true;
}

void DFS(int u) {
	fre[u] = false; x[u] = ++timer; rv[timer] = u;
	for (int i = 0; i < (int) adj[u].size(); ++i) {
		int v = adj[u][i];
		if (fre[v]) DFS(v);
	}
	y[u] = timer;
}

void Build(int k, int l, int r) {
	if (l == r) {
		st[k].set(a[rv[l]] % m);
		return;
	}
	int m = (l + r) >> 1;
	Build(k << 1, l, m);
	Build(k << 1 | 1, m + 1, r);
	st[k] = st[k << 1] | st[k << 1 | 1];
}

void Rotate(bitset<M> &bit, int x) {
	bit = (bit >> (m - x) & L[x]) | ((bit & L[m - x]) << x);
}

void Propagate(int k) {
	if (lp[k] == 0) return;
	Rotate(st[k << 1], lp[k]); Rotate(st[k << 1 | 1], lp[k]);
	lp[k << 1 | 0] = (lp[k << 1 | 0] + lp[k]) % m;
	lp[k << 1 | 1] = (lp[k << 1 | 1] + lp[k]) % m;
	lp[k] = 0;
}

void Update(int k, int l, int r, int i, int j, int v) {
	if (l > j || r < i) return;
	if (i <= l && r <= j) {
		Rotate(st[k], v);
		lp[k] = (lp[k] + v) % m;
		return;
	}
	int m = (l + r) >> 1; Propagate(k);
	Update(k << 1 | 0, l, m, i, j, v);
	Update(k << 1 | 1, m + 1, r, i, j, v);
	st[k] = st[k << 1] | st[k << 1 | 1];
}

bitset<M> Query(int k, int l, int r, int i, int j) {
	if (l > j || r < i) return bitset<M>();
	if (i <= l && r <= j) return st[k];
	int m = (l + r) >> 1; Propagate(k);
	return Query(k << 1, l, m, i, j) | Query(k << 1 | 1, m + 1, r, i, j);
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i) scanf("%d", &a[i]);
	for (int i = 1; i <= n - 1; ++i) {
		int u, v; scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	
	vector<int> prime;
	memset(fre, true, sizeof fre); DFS(1);
	for (int i = 2; i <= m; ++i) if (IsPrime(i)) prime.push_back(i);
	for (int i = 1; i <= m; ++i) {
		L[i] = L[i - 1] << 1;
		L[i].set(0);
	}

	scanf("%d", &q); Build(1, 1, n);
	while (q--) {
		int k; scanf("%d", &k);
		if (k == 1) {
			int u, v; scanf("%d%d", &u, &v);
			Update(1, 1, n, x[u], y[u], v % m);
		}
		else {
			int u; scanf("%d", &u);
			bitset<M> bit = Query(1, 1, n, x[u], y[u]);
			//cerr << bit << endl;
			int ans = 0;
			for (int i = 0; i < (int) prime.size(); ++i) ans += bit[prime[i]];
			printf("%d\n", ans);
		}
	}
	return 0;
}