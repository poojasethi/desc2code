#include <bits/stdc++.h>

using namespace std;

const int MAX_N = 100000 + 10;
const int MAX_M = 1000 + 10;

typedef bitset<MAX_M> bits;

vector<int> E[MAX_N];
bits pr, T[MAX_N * 4], cur;
int n, m, dl[MAX_N], dr[MAX_N], dfn, val[MAX_N], a[MAX_N];
int tags[MAX_N * 4];

void dfs(int x, int f) {
	dl[x] = ++dfn;
	val[dfn] = a[x] % m;
	for(int i = 0; i < E[x].size(); i++) {
		int y = E[x][i];
		if(y != f)
			dfs(y, x);
	}
	dr[x] = dfn;
}

void addIt(int x, int d) {
	(tags[x] += d) %= m;
	T[x] = (T[x] << d) | (T[x] >> m - d);
}

void push_down(int t) {
	if(tags[t]) {
		addIt(t << 1, tags[t]);
		addIt(t << 1 | 1, tags[t]);
		tags[t] = 0;
	}
}

void upd(int t) {
	T[t] = T[t << 1] | T[t << 1 | 1];
}

void build(int t, int l, int r) {
	if(l == r) {
		T[t][val[l]] = 1;
		return ;
	}
	int mid = l + r >> 1;
	build(t * 2, l, mid);
	build(t * 2 + 1, mid + 1, r);
	upd(t);
}

void add(int t, int l, int r, int L, int R, int x) {
	if(L <= l && r <= R) {
		addIt(t, x);
		return ;
	}
	push_down(t);
	int mid = l + r >> 1;
	if(L <= mid)
		add(t << 1, l, mid, L, R, x);
	if(R > mid)
		add(t << 1 | 1, mid + 1, r, L, R, x);
	upd(t);
}

void ask(int t, int l, int r, int L, int R) {
	if(L <= l && r <= R) {
		cur |= T[t];
		return ;
	}
	push_down(t);
	int mid = l + r >> 1;
	if(L <= mid)
		ask(t << 1, l, mid, L, R);
	if(R > mid)
		ask(t << 1 | 1, mid + 1, r, L, R);
	upd(t);
}

int main() {
	scanf("%d%d", &n, &m);
	for(int i = 2; i < m; i++) {
		bool FALG = false;
		for(int j = 2; j * j <= i; j++)
			if(i % j == 0) {
				FALG = true;
				break;
			}
		if(!FALG)
			pr[i] = 1;
	}
	for(int i = 1; i <= n; i++)
		scanf("%d", &a[i]);
	for(int i = 1; i <= n - 1; i++) {
		int a, b; scanf("%d%d", &a, &b);
		E[a].push_back(b);
		E[b].push_back(a);
	}
	dfs(1, 0);
	build(1, 1, n);
	int q; scanf("%d", &q);
	for(int i = 1; i <= q; i++) {
		int op; scanf("%d", &op);
		if(op == 1) {
			int v, x; scanf("%d%d", &v, &x);
			add(1, 1, n, dl[v], dr[v], x % m);
		} else {
			int v; scanf("%d", &v);
			cur.reset();
			ask(1, 1, n, dl[v], dr[v]);
			printf("%d\n", (cur & pr).count());
		}
	}
	return 0;
}
