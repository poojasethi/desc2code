#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <ctime>
#include <numeric>
#include <bitset>
#include <cassert>

using namespace std;
const int N=123456;
int a[N];
vector<int>edge[N];
bitset<1000>bs[N<<2];
bitset<1000>tot;
bitset<1000>prime;
int mark[N<<2];
int L[N],R[N];
int dfn=0;
int m;
int id[N];
void dfs(int u,int f) {
    L[u]=++dfn;
    id[dfn]=u;
    for (int i=0;i<edge[u].size();i++) {
        int v=edge[u][i];
        if (v==f)
            continue;
        dfs(v,u);
    }
    R[u]=dfn;
}
void up(int rt) {
    bs[rt]=(bs[rt<<1]|bs[rt<<1|1]);
}
void add(int rt,int x) {
    bs[rt]=(((bs[rt]<<x)&tot)|(bs[rt]>>(m-x)));
}
void down(int rt) {
    if (mark[rt]) {
        add(rt<<1,mark[rt]);
        add(rt<<1|1,mark[rt]);
        mark[rt<<1]=(mark[rt<<1]+mark[rt])%m;
        mark[rt<<1|1]=(mark[rt<<1|1]+mark[rt])%m;
        mark[rt]=0;
    }
}
void build(int l,int r,int rt) {
    mark[rt]=0;
    if (l==r) {
        int x=a[id[l]];
        bs[rt].set(x);
        return;
    }
    int m=(l+r)>>1;
    build(l,m,rt<<1);
    build(m+1,r,rt<<1|1);
    up(rt);
}

void upd(int L,int R,int x,int l,int r,int rt) {
    if (L<=l&&r<=R) {
        add(rt,x);
        mark[rt]=(mark[rt]+x)%m;
        return;
    }
    down(rt);
    int m=(l+r)>>1;
    if (L<=m)
        upd(L,R,x,l,m,rt<<1);
    if (R>m)
        upd(L,R,x,m+1,r,rt<<1|1);
    up(rt);
}
bitset<1000> ans;
void ask(int L,int R,int l,int r,int rt) {
     if (L<=l&&r<=R) {
        ans|=bs[rt];
        return;
    }
    down(rt);
    int m=(l+r)>>1;
    if (L<=m)
        ask(L,R,l,m,rt<<1);
    if (R>m)
        ask(L,R,m+1,r,rt<<1|1);
    up(rt);
}

int main () {
    for (int i=2;i<=1000;i++) {
        bool isp=true;
        for (int j=2;isp&&j*j<=i;j++) {
            if (i%j==0)
                isp=false;
        }
        if (isp){
            prime.set(i);
        }
    }
    int n;
    scanf("%d %d",&n,&m);
    for (int i=1;i<=n;i++){
        scanf("%d",a+i);
        a[i]%=m;
    }
    for (int i=0;i<m;i++)
        tot.set(i);
    for (int i=1;i<n;i++) {
        int u,v;
        scanf("%d %d",&u,&v);
        edge[u].push_back(v);
        edge[v].push_back(u);
    }
    dfn=0;
    dfs(1,-1);
    build(1,n,1);
    int Q;
    scanf("%d",&Q);
    while (Q--) {
        int op;
        scanf("%d",&op);
        if (op==1) {
            int u,x;
            scanf("%d %d",&u,&x);
            x%=m;
            upd(L[u],R[u],x,1,n,1);
        }
        else {
            int u;
            scanf("%d",&u);
            ans=0;
            ask(L[u],R[u],1,n,1);
            ans&=prime;
            int ret=ans.count();
            printf("%d\n",ret);
        }
    }
    return 0;
}
