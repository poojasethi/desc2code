#include <bits/stdc++.h>
using namespace std;
const int maxn = 100005;
const int maxm = 1005;
bool isp[maxm];
int n, m;
bitset <maxm> p;
int a[maxn], L[maxn], R[maxn], rp[maxn], cnt;
struct Edge{
    int v, next;
}E[maxn << 1];
int head[maxn], tol;

void Init(){
    memset(head, -1, sizeof head);
    tol = cnt = 0;
    //************* 质数表 **************//
    memset(isp, true, sizeof isp);
    isp[0] = isp[1] = false;
    for(int i = 2; i < m; i++){
        if(!isp[i]) continue;
        p[i] = 1;
        for(int j = i + i; j < m; j += i){
            isp[j] = false;
        }
    }
}

void add_edge(int u, int v){
    E[tol].v = v;
    E[tol].next = head[u];
    head[u] = tol++;
}

#define lson rt << 1
#define rson rt << 1 | 1
struct SegTree{
    int l, r, add;
    bitset <maxm> have;
    int mid() { return (l + r) >> 1; }
    void Add(int ad){
        ad %= m;
        add = (add + ad) % m;
        have = (have << ad) | (have >> (m - ad));
    }
}tree[maxn << 2];

void push_down(int rt){
    if(tree[rt].add){
        tree[lson].Add(tree[rt].add);
        tree[rson].Add(tree[rt].add);
        tree[rt].add = 0;
    }
}

void push_up(int rt){
    tree[rt].have = tree[lson].have | tree[rson].have;
}

void build(int l, int r, int rt){
    tree[rt].l = l;
    tree[rt].r = r;
    tree[rt].add = 0;
    tree[rt].have = 0;
    if(l == r){
        tree[rt].have[a[rp[l]] % m] = 1;
        return ;
    }
    int mid = (l + r) >> 1;
    build(l, mid, lson);
    build(mid + 1, r, rson);
    push_up(rt);
}

void Add(int l, int r, int rt, int add){
    if(l <= tree[rt].l && tree[rt].r <= r){
        tree[rt].Add(add);
        return ;
    }
    push_down(rt);
    int mid = tree[rt].mid();
    if(l <= mid) Add(l, r, lson, add);
    if(mid < r) Add(l, r, rson, add);
    push_up(rt);
}

bitset <maxm> ans;
void query(int l, int r, int rt){
    if(l <= tree[rt].l && tree[rt].r <= r){
        ans |= tree[rt].have;
        return;
    }
    push_down(rt);
    int mid = tree[rt].mid();
    if(l <= mid) query(l, r, lson);
    if(mid < r) query(l, r, rson);
}

void dfs(int u, int pre){
    L[u] = ++cnt;
    rp[cnt] = u;
    for(int i = head[u]; ~i; i = E[i].next){
        int v = E[i].v;
        if(v == pre) continue;
        dfs(v, u);
    }
    R[u] = cnt;
}

int main(){
    int q, u, v, ope, x;
    scanf("%d%d", &n, &m);
    Init(); // 1.初始化邻接表; 2.获得质数表
    for(int i = 1; i <= n; i++) scanf("%d", &a[i]);
    for(int i = 1; i < n; i++){
        scanf("%d%d", &u, &v);
        add_edge(u, v);
        add_edge(v, u);
    }
    dfs(1, -1);
    build(1, n, 1);
    scanf("%d", &q);
    while(q--){
        scanf("%d", &ope);
        if(ope == 1){
            scanf("%d%d", &v, &x);
            Add(L[v], R[v], 1, x);
        }else{
            scanf("%d", &v);
            ans = 0;
            query(L[v], R[v], 1);
            printf("%d\n", (ans & p).count());
        }
    }
    return 0;
}
