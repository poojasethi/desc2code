#include<stdio.h>
#include<bitset>
#include<algorithm>
#define N 100005
#define M 200005
using namespace std;
bitset<2005>gt,gtw,wcy,ans,ans1,f[N*4],lhy;
int d[N*4],i,j,k,l,s,n,m,tot,q[N],Q,st[N],en[N],v[N];
int next[M],last[N],to[M],fa[N],g[N],a[N],x,y,id;
inline void add(int o,int p) {
	next[++tot]=last[o]; last[o]=tot; to[tot]=p;
}
inline void doit(int o) {
	for (int i=2;i<o;i++) {
		if (!v[i]) {
			ans[i]=1;
			for (j=2;j*i<=o;j++) v[j*i]=1;
		}
	}
}
inline void up(int o) {
	f[o]=f[o*2]|f[o*2+1];
}
inline void build(int o,int l,int r) {
	if (l==r) {
		f[o][a[g[l]]]=1; return ;
	}
	int mid=(l+r)>>1;
	build(o*2,l,mid),build(o*2+1,mid+1,r);
	up(o);
}
inline void build() {
	int l=0,r=1; q[1]=1;
	while (l<r) {
		int k=q[++l];
		for (int i=last[k];i;i=next[i]) {
			if (fa[k]==to[i]) continue;
			fa[q[++r]=to[i]]=k;
		}
	}
}
inline void dfs(int o) {
	g[st[o]=++tot]=o;
	for (int i=last[o];i;i=next[i]) if (to[i]!=fa[o]) dfs(to[i]);
	en[o]=tot;
}
inline void down(int o) {
	(d[o*2]+=d[o])%=m; (d[o*2+1]+=d[o])%=m;
	gtw=(f[o*2]<<d[o]); f[o*2]=((f[o*2]>>(m-d[o]))|gtw)&wcy;
	gtw=(f[o*2+1]<<d[o]); f[o*2+1]=((f[o*2+1]>>(m-d[o]))|gtw)&wcy; d[o]=0;
	return ;
}
inline void change(int o,int l,int r,int ll,int rr,int p) {
	if (l==ll&&r==rr) {
		d[o]+=p; gt=f[o]; gtw=(f[o]<<p);
		d[o]%=m;
		f[o]=((f[o]>>(m-p))|gtw)&wcy;
		return ;
	}
	if (d[o]) down(o);
	int mid=(l+r)>>1;
	if (rr<=mid) change(o*2,l,mid,ll,rr,p);
	else if (ll>mid) change(o*2+1,mid+1,r,ll,rr,p);
	else change(o*2,l,mid,ll,mid,p),change(o*2+1,mid+1,r,mid+1,rr,p);
	up(o);
}
inline void ask(int o,int l,int r,int ll,int rr) {
	if (l==ll&&r==rr) {
		ans1|=f[o]; return ;
	}
	if (d[o]) down(o);
	int mid=(l+r)>>1;
	if (rr<=mid) ask(o*2,l,mid,ll,rr);
	else if (ll>mid) ask(o*2+1,mid+1,r,ll,rr);
	else ask(o*2,l,mid,ll,mid),ask(o*2+1,mid+1,r,mid+1,rr);
}
inline int in() {
	char c=getchar();
	int s=0;
	while (c<'0') c=getchar();
	while (c>='0') s=s*10+c-48,c=getchar();
	return s;
}
int main() {
	n=in(),m=in();
	doit(m);
	for (i=1;i<=n;i++) a[i]=in()%m;
	for (i=1;i<n;i++) add(x=in(),y=in()),add(y,x);
	build();
	for (i=0;i<m;i++) wcy[i]=1; tot=0;
	dfs(1); build(1,1,n); Q=in();
	for (i=1;i<=Q;i++) {
		id=in(),x=in();
		if (id==1) {
			y=in()%m;
			change(1,1,n,st[x],en[x],y);
		}
		else {
			ans1&=lhy;
			ask(1,1,n,st[x],en[x]);
			printf("%d\n",(ans&ans1).count());
		}
	}
}