#include <cstdio>
#include <cstring>
#include <climits>
#include <algorithm>
#include <cctype>
using namespace std;


#define N 10010

#define Maxpath 1000010
struct Equations {
    int a[N], _[Maxpath], __[Maxpath], cnt, size, ins[30];
    Equations():cnt(0){}
    void addpath(int i, int j) {
        _[++cnt] = i, __[cnt] = j;
    }
    void Find_Linear_Space() {
        register int i, j, k;
        i = 1, j = 29;
        while(i <= size && j >= 0) {
            for(k = i; k <= size; ++k)
                if ((a[k] >> j) & 1)
                    break;
            if ((a[k] >> j) & 1) {
                if (k != i) {
                    a[k] ^= a[i], addpath(k, i);
                    a[i] ^= a[k], addpath(i, k);
                    a[k] ^= a[i], addpath(k, i);
                }
                ins[j] = i;
                for(k = 1; k <= size; ++k)
                    if (k != i && (a[k] >> j) & 1)
                        a[k] ^= a[i], addpath(k, i);
                ++i;
            }
            --j;
        }
    }
}x, y;

int main() {
    int n;
    scanf("%d", &n);
    
    x.size = y.size = n;
    
    register int i, j;
    for(i = 1; i <= n; ++i)
        scanf("%d", &x.a[i]);
    for(i = 1; i <= n; ++i)
        scanf("%d", &y.a[i]);
    
    x.Find_Linear_Space();
    y.Find_Linear_Space();
    
    for(j = 29; j >= 0; --j) {
        if (!x.ins[j])
            continue;
        for(i = 1; i <= n; ++i)
            if (((x.a[i] ^ y.a[i]) >> j) & 1)
                x.a[i] ^= x.a[x.ins[j]], x.addpath(i, x.ins[j]);
    }
    
    bool find = 0;
    for(i = 1; i <= n; ++i)
        if (x.a[i] != y.a[i]) {
            find = 1;
            break;
        }
    
    if (find) {
        puts("-1");
        return 0;
    }
    
    printf("%d\n", x.cnt + y.cnt);
    for(i = 1; i <= x.cnt; ++i)
        printf("%d %d\n", x._[i], x.__[i]);
    for(i = y.cnt; i >= 1; --i)
        printf("%d %d\n", y._[i], y.__[i]);
    
    
    return 0;
}