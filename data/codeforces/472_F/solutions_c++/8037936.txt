#include <algorithm>
#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <cmath>
using namespace std;
vector<pair<long, long> >ops;
vector<pair<long, long> >restore;
long n,q;
vector<long>v1,v2;
void swap(long a,long b,vector<long>& v)
{
    if (a==b)return;
    ops.push_back(make_pair(a,b));
    ops.push_back(make_pair(b,a));
    ops.push_back(make_pair(a,b));
    swap(v[a],v[b]);
}
void xorr(long a,long b,vector<long>& v)
{
    ops.push_back(make_pair(a,b));
    v[a]^=v[b];
}
void run_gauss(vector<long>&v)
{
    long rows=0;
    for (int bit=30;bit>=0;--bit)
    {
        for (int j=rows;j<v.size();j++)
        if (v[j]&(1<<bit))
        {
            swap(j,rows,v);
            for (int k=0;k<v.size();k++) if(k!=rows&&(v[k]&(1<<bit))) xorr(k,rows,v);
            ++rows;
            break;
        }
    }
}
int main()
{
    //ios_base::sync_with_stdio(0);
    cin>>n;
    for (int i=0;i<n;i++)
    {
        cin>>q;
        v1.push_back(q);
    }
    for (int i=0;i<n;i++)
    {
        cin>>q;
        v2.push_back(q);
    }
    run_gauss(v2);
    restore=ops;
    ops.clear();
    run_gauss(v1);
    long er=0;
    for (int i=0;i<40&&i<v1.size();i++)
    {
        long old=30;
        if (v1[i]==0)continue;
        while ((v1[i]&(1<<old))==0)--old;
        for (int j=0;j<40&&j<v1.size()&&j<v2.size();j++)
        if ((v1[j]^v2[j])&(1<<old)) xorr(j,i,v1);
    }
    for (int i=0;i<v1.size();i++) if (v1[i]!=v2[i])er=1;
    reverse(restore.begin(),restore.end());
    for (int i=0;i<restore.size();i++)
    ops.push_back(restore[i]);
    if(er) cout<<-1<<endl;
    else
    {
        cout<<ops.size()<<endl;
        for (int i=0;i<ops.size();i++)
        cout<<ops[i].first+1<<" "<<ops[i].second+1<<"\n";
    }
    return 0;
}
