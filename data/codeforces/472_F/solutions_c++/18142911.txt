#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <vector>
#include <bitset>
#include <functional>
using namespace std;
const long long mod = 1e9 + 7;
const int maxn = 100005;
inline int read ()
{
	int res, ok = 1;
	char ch;
	for (ch = getchar (); ch < '0' || ch > '9'; ch = getchar ())
	if (ch == '-')
	ok = -1;
	res = ch - '0';
	for (ch = getchar (); ch >= '0' && ch <= '9'; ch = getchar ())
	res = res * 10 + ch - '0';
	return res * ok;
}
int n, m, k, k2, x[10005], y[10005], rk[10005], rk2[10005], num[10005], stk[1000005][2], top, stk2[1000005][2], top2;
inline void add (int x, int y)
{
	top++;
	stk[top][0] = x;
	stk[top][1] = y;
}
inline void add2 (int x, int y)
{
	top2++;
	stk2[top2][0] = x;
	stk2[top2][1] = y;
}
inline void sw (int x, int y)
{
	add (x, y);
	add (y, x);
	add (x, y);
}
inline void sw2 (int x, int y)
{
	add2 (x, y);
	add2 (y, x);
	add2 (x, y);
}
inline void print (int x)
{
	printf ("%d\n", top + top2);
	for (int i = 1; i <= top; i++)
	printf ("%d %d\n", stk[i][0], stk[i][1]);
	for (int i = top2; i >= 1; i--)
	printf ("%d %d\n", stk2[i][0], stk2[i][1]);
	return;
}
int main ()
{
	n = read();
	for (int i = 1; i <= n; i++)
	{
		x[i] = read();
		rk[i] = i;
		rk2[i] = i;
	}
	for (int i = 1; i <= n; i++)
	y[i] = read();
	while (1)
	{
		int mx = 0;
		for (int i = k + 1; i <= n; i++)
		if (x[i] > x[mx])
		mx = i;
		if (mx == 0)
		break;
		k++;
		swap (rk[k], rk[mx]);
		swap (x[k], x[mx]);
		for (int i = k + 1; i <= n; i++)
		if ((x[i] ^ x[k]) < x[i])
		{
			x[i] ^= x[k];
			add (rk[i], rk[k]);
		}
	}
	while (1)
	{
		int mx = 0;
		for (int i = k2 + 1; i <= n; i++)
		if (y[i] > y[mx])
		mx = i;
		if (mx == 0)
		break;
		k2++;
		swap (rk2[k2], rk2[mx]);
		swap (y[k2], y[mx]);
		for (int i = k2 + 1; i <= n; i++)
		if ((y[i] ^ y[k2]) < y[i])
		{
			y[i] ^= y[k2];
			add2 (rk2[i], rk2[k2]);
		}
	}
	if (k < k2)
	{
		printf ("-1\n");
		return 0;
	}
	for (int i = 1; i <= k2; i++)
	{
		int tmp = x[i] ^ y[i];
		for (int j = i; j <= k; j++)
		if ((tmp ^ x[j]) < tmp)
		{
			tmp ^= x[j];
			add (rk[i], rk[j]);
		}
		if (tmp)
		{
			printf ("-1\n");
			return 0;
		}
	}
	for (int i = k2 + 1; i <= k; i++)
	{
		x[i] = 0;
		add (rk[i], rk[i]);
	}
	for (int i = 1; i <= n; i++)
	num[rk[i]] = i;
	for (int i = 1; i <= k2; i++)
	{
		if (rk[i] != rk2[i])
		{
			int a, b;
			a = rk[i];
			b = rk2[i];
			sw (a, b);
			rk[num[b]] = a;
			rk[i] = b;
			swap (num[a], num[b]);
		}
	}
	print (1);
	return 0;
}
