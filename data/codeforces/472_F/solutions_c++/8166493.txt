#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<utility>
#include<vector>
#include<set>
#include<map>
#include<queue>
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define pb push_back
#define pp pop_back
#define sz(x) int( (x).size() )
#define inf int(~0U>>1)
#define INF ll(~0ULL>>1)
#define p(i) (1LL<<((i)-1))
#define w(x,i) ((x)&p(i))
#define rep(i,s,t) for (i=(s); i<=(t); ++i)
#define dep(i,t,s) for (i=(t); i>=(s); --i)

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

typedef pair<int,int> PII;
typedef pair<ll,ll> PLL;
typedef pair<double,double> PDD;

typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<double> VD;

template<class T> inline T nx(T x) { return ++x; }
template<class T> inline T pr(T x) { return --x; }

template<class T>
inline void get(T &n) {
	char c = getchar();
	while (c!='-' && (c<'0' || c>'9')) c = getchar();
	n = 0; T s = 1; if (c=='-') s = -1,c = getchar();
	while (c>='0' && c<='9') n*=10,n+=c-'0',c=getchar();
	n *= s;
}

const int maxn = 10010;
int n;
int a[maxn],b[maxn],bt[maxn],f[40],g[40];
int isf[maxn],isg[maxn];
vector<PII> ans,bns;

void XOR(int i,int j) {
	a[i] ^= a[j];
	ans.pb(PII(i,j));
}

void YOR(int i,int j) {
	b[i] ^= b[j];
	bns.pb(PII(i,j));
}

int main() {
    int i,j,k,t,tt,x,y;
	scanf("%d",&n);
	rep(i,1,n) scanf("%d",a+i);
	rep(i,1,n) scanf("%d",b+i);
	rep(i,1,n) {
		dep(x,30,1) if (w(a[i],x)) {
			if (f[x]) XOR(i,f[x]);
			else { f[x] = i; isf[i] = x; break; }
		}
	}
	rep(i,1,n) {
		dep(x,30,1) if (w(b[i],x)) {
			if (g[x]) YOR(i,g[x]);
			else { g[x] = i; isg[i] = x; break; }
		}
	}

	dep(x,30,1) if (g[x] && g[x]!=f[x]) {
		i = f[x]; j = g[x];
		XOR(i,j); XOR(j,i); XOR(i,j);
		swap(isf[i],isf[j]);
		f[isf[i]] = i; f[isf[j]] = j;
	}
	dep(x,30,1) if (g[x]) {
		i = g[x];
		dep(y,x-1,1) if (w(a[i],y) != w(b[i],y))
			XOR(i,f[y]);
		if (a[i]!=b[i]) break;
	}
	if (x>=1) { puts("-1"); return 0; }

	rep(i,1,n) if (!isg[i])
		XOR(i,i);

	dep(i,sz(bns)-1,0) ans.pb(bns[i]);
	printf("%d\n",sz(ans));
	rep(i,0,sz(ans)-1)
		printf("%d %d\n",ans[i].fi,ans[i].se);
	/*
	dach(ti,bns) ans.pb(*ti);
	each(ti,ans)
		printf("%d %d\n",ti->fi,ti->se);
		*/

    return 0;
}

