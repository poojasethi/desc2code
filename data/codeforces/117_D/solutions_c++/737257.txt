#include <stdio.h>
#include <algorithm>

int mod;
long long l, r;

int sum(long long u, long long v)
{
	long long x = u + v, y = v - u + 1;
	if(x & 1) y >>= 1;
	else x >>= 1;
	return ( (x % mod) * (y % mod) )% mod;
}

std::pair<long long, long long> calc(long long n, long long u, long long v, long long delta)
{
	if(v < u) return std::make_pair(0, 0);
	if(r < 1 + delta || n + delta < l) return std::make_pair(0, 0);
	if(l <= 1 + delta && n + delta <= r) return std::make_pair(sum(u, v), v - u + 1);
	long long c = (n + 1) / 2;
	std::pair<long long, long long> s1 = calc(c, u / 2 + 1, (v + 1) / 2, delta);
	std::pair<long long, long long> s2 = calc(n - c, (u + 1) / 2, v / 2, delta + c);
	return std::make_pair( (2 * s1.first - s1.second + 2 * s2.first) % mod, (s1.second + s2.second) % mod);
}

int main()
{
	long long n;
	int m;
	scanf("%I64d%d%d", &n, &m, &mod);
	for(int i = 0; i < m; ++i)
	{
		long long u, v;
		scanf("%I64d%I64d%I64d%I64d", &l, &r, &u, &v);
		v = std::min(v, n);
		std::pair<long long, long long> ret = calc(n, u, v, 0);
		printf("%d\n", (ret.first + mod) % mod);
	}
}

