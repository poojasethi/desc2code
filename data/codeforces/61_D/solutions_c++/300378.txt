#include<iostream>
#include<vector>
#include<algorithm>
#include<cstring>
using namespace std;

long long n,x,y,w,maxdepth=0;
vector<pair<long long, long long> > v[100003];
bool visited[100003];

long long dfs(int start)
{
	long long tmp = 0;
	visited[start] = true;
	for(int i = 0; i < v[start].size(); i++)
	{
		int e = v[start][i].first;
		int c = v[start][i].second;
		if(!visited[e])
			 tmp = max(tmp,c + dfs(e));		
		
	}
	return tmp;	
}

int main()
{
	long long  ans = 0;
	memset(visited,false,sizeof(visited));
	cin>>n;
	for(int i = 0; i < n-1; i++)
	{
		cin>>x>>y>>w;
		v[x].push_back(make_pair(y,w));
		v[y].push_back(make_pair(x,w));
		ans += 2*w;
	}
	ans-=dfs(1);
	cout<<ans;
	return 0;
}
