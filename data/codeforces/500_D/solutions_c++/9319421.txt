#include <iostream>
#include <vector>
#include <iomanip>
#define MAXN 100005
using namespace std;

int n, x, y, l[MAXN], pd[MAXN], q;
long long val[MAXN], sol;
bool uz[MAXN];
pair<int, int> muchii[MAXN], aux;
vector< pair<int, int> > G[MAXN];

void DFS(int x){
	int i;
	uz[x] = 1;

	pd[x] = 1;

	for(i = 0; i < G[x].size(); i++){
		aux = G[x][i];
		if(!uz[aux.first]){
			DFS(aux.first);
			pd[x] += pd[G[x][i].first];
			val[G[x][i].second] = 1LL * pd[G[x][i].first] * (n - pd[G[x][i].first]);
		}
	}
}

int main(){
	int i;

	cin >> n;
	for(i = 1; i < n; i++){
		cin >> muchii[i].first >> muchii[i].second >> l[i];
		G[muchii[i].first].push_back(make_pair(muchii[i].second, i));
		G[muchii[i].second].push_back(make_pair(muchii[i].first, i));
	}

	DFS(1);

	for(i = 1; i < n; i++)
		sol += val[i] * l[i];

	cin >> q;

	while(q--){
		cin >> x >> y;
		sol += val[x] * (y - l[x]);
		l[x] = y;
		cout << fixed << setprecision(8) <<  (3 * (double) (sol)) / ((1LL * n * (n - 1)) >> 1) << '\n';
	}

	return 0;
}
