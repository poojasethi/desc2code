#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdio>
#include <cstring>
#include <vector>
#define pb push_back
#define mp make_pair
#define NMAX 100010
using namespace std;

vector<pair<int,int> > adj[NMAX];
int sub[NMAX];
long long pairs[NMAX];
int sum;
int wt[NMAX];
int N;

void dfs(int v, int p, int idx)
{
	int i;
	for(i = 0; i < (int)adj[v].size(); ++i)
	{
		if(adj[v][i].first == p) continue;
		dfs(adj[v][i].first,v,adj[v][i].second);
		sub[v] += sub[adj[v][i].first];
	}
	++sub[v];
	if(idx >= 0) pairs[idx] = 1LL*sub[v]*(N-sub[v]);
}

int main()
{
	int i,a,b;

	cin>>N;

	for(i = 0; i < N-1; ++i)
	{
		cin>>a>>b>>wt[i];
		--a,--b;
		adj[a].pb(mp(b,i));
		adj[b].pb(mp(a,i));
	}

	dfs(0,-1,-1);
	int q;
	cin>>q;
	long long sum = 0;

	for(i = 0; i < N-1; ++i) sum += wt[i]*pairs[i];

	double exp,all;
	all = (1LL*N*(N-1))/2.0;

	while(q--)
	{
		cin>>i>>a;
		--i;
		sum -= (wt[i]-a)*pairs[i];
		wt[i] = a;
		exp = (sum*3.0)/all;
		printf("%.8f\n",exp);
	}
}
