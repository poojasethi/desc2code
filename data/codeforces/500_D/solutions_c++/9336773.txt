#include <cstdio>
#include <vector>
#include <utility>
using namespace std;
const int maxN = 500001;
int n, q, u[maxN], v[maxN], c[maxN], d[maxN], size[maxN];
long long int ans = 0;
vector<pair<int, int> > G[maxN];
void dfs(int u, int p, int depth){
	d[u] = depth;
	size[u] = 1;
	for(int i = 0; i < G[u].size(); ++i){
		int v = G[u][i].first;
		if(v == p) continue;
		dfs(v, u, depth+1);
		size[u] += size[v];
		ans += (long long)size[v]*(n-size[v])*G[u][i].second;
	}
}
int main(){
	scanf("%d", &n);
	for(int i = 1; i < n; ++i){
		scanf("%d%d%d", &u[i], &v[i], &c[i]);
		G[u[i]].push_back(make_pair(v[i], c[i]));
		G[v[i]].push_back(make_pair(u[i], c[i]));
	}
	dfs(1, 1, 0);
	scanf("%d", &q);
	for(int i = 0; i < q; ++i){
		int e, w;
		scanf("%d%d", &e, &w);
		if(d[u[e]] > d[v[e]]) swap(u[e], v[e]);
		ans -= (long long)size[v[e]]*(n-size[v[e]])*(c[e]-w);
		c[e] = w;
		printf("%.9f\n", ans*6./((long long)n*(n-1)));
	}
	return 0;
}