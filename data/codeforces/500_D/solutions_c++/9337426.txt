#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
const int MAX_N = 100005;
vector<int> G[MAX_N];
int a[MAX_N], b[MAX_N], l[MAX_N], dp[MAX_N];
int n, q;
double prod[MAX_N];

void dfs(int v, int p) {
  for(int i = 0; i < (int) G[v].size(); i++) {
    int to = G[v][i];
    if(to != p) {
      dfs(to, v);
      dp[v] += dp[to];
    }
  }
  dp[v]++;
}
int main(void) {
  scanf("%d", &n);
  for(int i = 0; i < n - 1; i++) {
    scanf("%d%d%d", a + i, b + i, l + i);
    a[i]--; b[i]--;
    G[a[i]].push_back(b[i]);
    G[b[i]].push_back(a[i]);
  }
  dfs(0, -1);
  double ans = 0.0, fac = (double) n * (n - 1.0) / 2.0 / 3.0;
  for(int i = 0; i < n - 1; i++) {
    double cnt = min(dp[a[i]], dp[b[i]]);
    prod[i] = cnt * (n - cnt);
    ans += prod[i] * l[i];
  }
  scanf("%d", &q);
  int e, w;
  for(int i = 0; i < q; i++) {
    scanf("%d%d", &e, &w);
    e--;
    ans += prod[e] * (w - l[e]);
    l[e] = w;
    printf("%.9f\n", ans / fac);

  }
  return 0;
}
