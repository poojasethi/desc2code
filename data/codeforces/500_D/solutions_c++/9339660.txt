#include <cstdio>
#include <vector>
#include <algorithm>

#define SZ(x) (((int)x.size()))

using namespace std;

const int N = 100001;

vector< int > graph[N];
int a[N], b[N], w[N], sz[N];
bool vis[N];

int dfs(int v) {
	vis[v] = 1;
	for (int i = 0; i < SZ(graph[v]); ++i) {
		int u = graph[v][i];
		if (!vis[u])
			sz[v] += dfs(u);
	}
	return ++sz[v];
}

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n - 1; ++i) {
		scanf("%d %d %d", a + i, b + i, w + i); a[i]--, b[i]--;
		graph[a[i]].push_back(b[i]);
		graph[b[i]].push_back(a[i]);
	}
	dfs(0);
	long long ans = 0;
	for (int i = 0; i < n - 1; ++i) {
		int x = min(sz[a[i]], sz[b[i]]);
		ans += (long long) x * (n - x) * w[i];
	}
	int q;
	scanf("%d", &q);
	while (q--) {
		int r, c;
		scanf("%d %d", &r, &c); r--;
		int x = min(sz[a[r]], sz[b[r]]);
		ans -= (long long) x * (n - x) * w[r];
		w[r] = c;
		ans += (long long) x * (n - x) * w[r];
		printf("%.17f\n", 6. * ans / n / (n - 1));
	}
	return 0;
}
