#include<iostream>
#include<algorithm>
#include<vector>
#include<iomanip>

#define int long long
#define F first
#define S second
#define MP make_pair

using namespace std;

const int MAXN = 1e5 + 5;
int cnt[MAXN], p[MAXN], w[MAXN];
bool mark[MAXN];
vector<pair<int, int> > v[MAXN];
int n;

void DFS(int n)
{
	mark[n] = true;
	cnt[n] = 1;
	for(int i = 0; i < v[n].size(); i++)
	{
		int x = v[n][i].F, e = v[n][i].S;
		if(!mark[x])
		{
			DFS(x);
			cnt[n] += cnt[x];
			p[e] = (::n - cnt[x]) * cnt[x];
		}
	}
}

main()
{
	cin >> n;
	for(int i = 0; i < n - 1; i++)
	{
		int a, b;
		cin >> a >> b >> w[i];
		a--, b--;
		v[a].push_back(MP(b, i));
		v[b].push_back(MP(a, i));
	}
	DFS(0);
	int sum = 0;
	for(int i = 0; i < n - 1; i++)
		sum += p[i] * w[i];
	int q, C = n * (n - 1);
	cin >> q;
	while(q--)
	{
		int i, weight;
		cin >> i >> weight;
		i--;
		sum -= p[i] * w[i];
		w[i] = weight;
		sum += p[i] * w[i];
		cout << setprecision(9) << fixed << double(sum * 6) / C << endl;
	}
	return 0;
}
