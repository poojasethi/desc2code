#include <cstdio> 
#include <iostream>
#include <algorithm>
#include <string.h>
using namespace std;
const int N = 1e5 + 10;
int head[N],e,dp[N],mx;
struct node
{
	int from,to,dis,next;
}pe[N<<1];
void addedge(int a,int b,int d)
{
	node E = {a,b,d,head[a]};
	pe[e] = E;
	head[a] = e++;
}
int dfs(int u,int b,int val)
{
	dp[u] = 0;
	for(int i=head[u];i!=-1;i = pe[i].next)
	{
		int v = pe[i].to;
		if(v==b) continue;
		dfs(v,u,val-pe[i].dis);
		dp[u] += dp[v]+(pe[i].dis!=1);
	}
	mx = max(mx,val);
}
int main()
{
	int n,a,b;
	int i,j,k;
	e=0;
	while(cin>>n)
	{
		if(n==1) 
		{
			puts("0");
			continue;
		}
		memset(head,-1,sizeof(head));
		for(i=0;i<n-1;i++)
		{
			cin>>a>>b;
			addedge(a,b,1);
			addedge(b,a,-1);
		}
		int ans = 1<<30;
		for(i=0;i<e;i+=2)
		{
			a = pe[i].from;
			b = pe[i].to;
			mx = -(1<<30);
			dfs(a,b,0);
			int temp = dp[a]-mx;
			mx = -(1<<30);
			dfs(b,a,0);
			temp += dp[b]-mx;
			ans = min(ans,temp);
		}
		cout<<ans<<endl;
	}
	
	return 0;
}
   			  		 	 	 	  	 	 	    		