#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<queue>
#include<set>
#include<stack>
#include<map>
#include<vector>
#include<bitset>
#include<deque>
#define fi first
#define se second
#define pb push_back
#define mk make_pair
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
int read()
{
    char ch=getchar();int x=0,f=1;
    while(ch<'0'||ch>'9')
    {
        if(ch=='-') f=-1;
        ch=getchar();
    }
    x=ch-'0';
    while(1)
    {
        ch=getchar();
        if(ch<'0'||ch>'9') break;
        x=x*10+ch-'0';
    }
    return x*f;
}
const int maxn=10000005;
const int maxm=810;
struct node
{
    int ed,head;
}b[maxn];
int bit[maxm][maxm],idx[maxn];
int i,j,n,m,p,k,End[maxn],tot=1,k1,son[maxn][2],fail[maxn],S[maxm],q[maxn];
int flag[maxm],Ans,match[maxm],len[maxm],all,str[maxm],end[maxm],fa[maxn];
int a[maxm][maxm],ans[maxm],vis[maxm],B[maxm][maxm],was[maxm][2],checked[maxm];
bool s[maxn];char c[maxn];
void add(int x,int y)
{
    b[++k1].ed=y;
    b[k1].head=idx[x];
    idx[x]=k1;
}
void init()
{
    int l=1,r=0;
	for (i=0;i<2;i++)
		if (son[1][i])
		{
			fail[son[1][i]]=1; 
			q[++r]=son[1][i];
		}
		else son[1][i]=1;
    for(;l<=r;l++)
    {
        k=q[l];
        for(int i=0;i<2;i++)
            if(son[k][i])
            {
                fail[son[k][i]]=son[fail[k]][i];
                q[++r]=son[k][i];
            }
            else son[k][i]=son[fail[k]][i];
    }
    for(int i=2;i<=tot;i++)
        add(fail[i],i);
    q[r=1]=1;
    for(l=1;l<=r;l++)
    {
        k=q[l];
        if(End[fail[k]]) fa[k]=fail[k];
        else fa[k]=fa[fail[k]];
        for(int i=idx[k];i;i=b[i].head)
            q[++r]=b[i].ed;
    }
}
void solve(int x)
{
    q[0]=0;
    for(i=str[x],p=1;i<=end[x];i++)
    {
        p=son[p][s[i]];
        q[++q[0]]=p;
    }
    for(int i=1;i<=q[0];i++)
        for(int j=q[i];j;j=fa[j])
            if(a[x][End[j]]&&End[j]) break;
            else a[x][End[j]]=1;
}
bool dfs(int num)
{
    for(int i=1;i<=n;i++)
        if(a[num][i]&&!flag[i])
        {
            flag[i]=1;
            if(!match[i]||dfs(match[i])){match[i]=num;return 1;}
        }
    return 0;
}
void dfs(int x,int y)
{
    if(was[x][y]) return;
    was[x][y]=1;
    for(int i=1;i<=n;i++)
    {
        if(!y&&a[x][i]) dfs(i,1);
        if(y&&match[x]==i) dfs(i,0);
    }
}
int main()
{
  //  freopen("work.in","r",stdin);
  //  freopen("work.out","w",stdout);
    n=read();
    for(int i=1;i<=n;i++)
    {
        scanf("%s",c);
        len[i]=strlen(c);
        for(j=0,p=1;j<len[i];j++)
        {
            int ch=c[j]-'a';
            if(!son[p][ch]) son[p][ch]=++tot;
            p=son[p][ch];
        }
        End[p]=i;str[i]=all+1;
        for(int j=0;j<len[i];j++)
            s[++all]=c[j]-'a';
        end[i]=all;
    }
    init();
    for(int i=1;i<=n;i++) solve(i);
    for(int i=1;i<=n;i++) a[i][i]=0;
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            B[i][j]=a[j][i];
    memcpy(a,B,sizeof(a));
    for(int i=1;i<=n;i++)
    {
        memset(flag,0,sizeof(flag));
        if(dfs(i)) Ans++;
        else vis[i]=1;
    }
    printf("%d\n",n-Ans);
    for(int i=1;i<=n;i++)
        if(vis[i]) dfs(i,0);
    memset(checked,0,sizeof(checked));
    for(int i=1;i<=n;i++)
    {
        if(!vis[i]&&!was[i][0]) checked[i]=1;
        if(match[i]&&was[i][1]) checked[i]=1;
    }
    for(int i=1;i<=n;i++)
        if(!checked[i])
            ans[++ans[0]]=i;
    for(int i=1;i<=ans[0];i++)
        printf("%d ",ans[i]);
   // fclose(stdin);
   // fclose(stdout);
    return 0;
}
                                    