#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <cassert>
#include <vector>

using namespace std;

const int MAX_N = 750 + 10, MAX_M = 1e7 + 10;

int n, len;
bool s[MAX_M];
bool f[MAX_N][MAX_N];

struct node {
    node *c[2], *fa, *link, *p;
    int val;
    bool vis;
    node() {
        c[0] = c[1] = fa = 0;
        vis = 0;
        val = 0;
    }
}*root;

void ACM_init() {
    root = new node();
}

void insert(node *t, int id) {
    for(int i = 1; i <= len; i++) {
        int d = s[i];
        if(!t->c[d])
            t->c[d] = new node();
        t->c[d]->p = t;
        t = t->c[d];
    }
    t->val = id;
}

node *q[MAX_M];
int qh, qt;

void build(node *t) {
    for(int d = 0; d < 2; d++)
        if(t->c[d])
            q[qt++] = t->c[d], t->c[d]->fa = root;
    while(qh < qt) {
        node *u = q[qh++];
        for(int d = 0; d < 2; d++) {
            node *v = u->c[d], *r = u->fa;
            if(!v) continue;
            while(r != root && !r->c[d])
                r = r->fa;
            v->fa = r->c[d] ? r->c[d] : root;
            q[qt++] = v;
        }
    }
    for(int i = 0; i < qt; i++) {
        node *u = q[i];
        u->link = u->fa;
        while(u->link && !u->link->val && u->link != root)
            u->link = u->link->link;
    }
    for(int i = 0; i < qt; i++)
        if(q[i]->val) {
            node *u = q[i];
            while(u != root) {
                if(u->link)
                    f[u->link->val][q[i]->val] = 1;
                f[u->val][q[i]->val] = 1;
                u = u->p;
            }
        }
    for(int k = 1; k <= n; k++)
        for(int i = 1; i <= n; i++)
            for(int j = 1; j <= n; j++)
                f[i][j] |= f[i][k] & f[k][j];
    for(int i = 1; i <= n; i++)
        f[i][i] = 0;
}

bool vis[MAX_N], a[MAX_N][MAX_N];
int match[MAX_N], to[MAX_N];

bool dfs(int u) {
    for(int i = 1; i <= n; i++)
        if(f[u][i] && !vis[i]) {
            vis[i] = 1;
            if(match[i] == -1 || dfs(match[i])) {
                match[i] = u;
                to[u] = i;
                return true;
            }
        }
    return false;
}

bool have[MAX_N];

void calc(int u) {
    if(vis[u])
        return ;
    vis[u] = 1;
    for(int v = 1; v <= n; v++)
        if(f[u][v]) {
            have[v] = 1;
            calc(match[v]);
        }
}

int main() {
    scanf("%d", &n);
    ACM_init();
    getchar();
    for(int i = 1; i <= n; i++) {
        char ch = getchar();
        len = 0;
        while(ch != '\n') {
            s[++len] = ch - 'a';
            ch = getchar();
        }
        insert(root, i);
    }
    build(root);
    memset(match, -1, sizeof(match));
    memset(to, -1, sizeof(to));
    int ans = 0;
    for(int i = 1; i <= n; i++) {
        memset(vis, 0, sizeof(vis));
        if(dfs(i))
            ans++;
    }
    printf("%d\n", n - ans);
    memset(vis, 0, sizeof(vis));
    for(int i = 1; i <= n; i++)
        if(to[i] == -1) calc(i);
    vector<int> out;
    for(int i = 1; i <= n; i++)
        if(vis[i] && !have[i])
            out.push_back(i);
    for(int i = 0; i < out.size() - 1; i++)
        printf("%d ", out[i]);
    printf("%d\n", out[out.size() - 1]);
    return 0;
}
