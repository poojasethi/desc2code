#include<bits/stdc++.h>
#define each(u) for (int e=head[u],v=li[e].v;e;e=li[e].la,v=li[e].v)
#define M 10000010
#define N 760
using namespace std;
int n,bg[N],ed[N];int T;
//string st[N];

int head[N],cnt_li,used[N][N];
struct LI {int la,v;}li[N*N];
void add(int a,int b) {li[++cnt_li]=(LI){head[a],b};head[a]=cnt_li;}
char s[M];


int ch[M][2],cnt_ac,val[M],last[M],qe[M],next[M],app[M];
void insert(int id,int bg,int ed) {
	int j=0;
	for (int i=bg;i<=ed;++i) {
		if (!ch[j][s[i]-'a']) ch[j][s[i]-'a']=++cnt_ac;
		j=ch[j][s[i]-'a'];
	}
	val[j]=id;
}

void bfs() {
	int op=0;
	for (int c=0;c<2;++c) if (ch[0][c]) qe[++op]=ch[0][c];
	for (int cl=1;cl<=op;++cl) {
		int u=qe[cl];
		for (int c=0;c<2;++c) {
			int v=ch[u][c];
			if (!v) ch[u][c]=ch[next[u]][c];
			else {
				next[v]=ch[next[u]][c];
				qe[++op]=v;
				last[v] = val[next[v]]? next[v]:last[next[v]];
			}
		}
	}
	
}



void print(int j,int id) {
	for (;j;j=last[j]) {
		if (app[j]==id) break;
		app[j]=id;
//		++T;
		if (val[j]!=id&&!used[id][val[j]]) {
			
			add(id,val[j]);
//			printf("%d %d\n",id,val[j]);
			used[id][val[j]]=1;
		}
	}
}
void run(int id,int bg,int ed) {
	int j=0;
	for (int i=bg;i<=ed;++i) {
		j=ch[j][s[i]-'a'];
		if (val[j]) print(j,id);
		else print(last[j],id);
	}
}
int vis[N],from[N],forb[N],go[N];
int dfs(int u,int id) {
	
	each(u) if (vis[v]!=id) {
		vis[v]=id;
		if (!from[v]||dfs(from[v],id)) {
			from[v]=u;//printf("%d change %d %d\n",id,v,u);
			return 1;
		}
	}
	return 0;
}
 

int ans[N];
int main()
{
//	freopen("birth.in","r",stdin);
//	freopen("birth.out","w",stdout);
	scanf("%d",&n);
	
	for (int i=1;i<=n;++i) {
		bg[i]=ed[i-1]+1;
		scanf("%s",s+bg[i]);
		ed[i]=bg[i]+strlen(s+bg[i])-1;
		insert(i,bg[i],ed[i]);
//		cout<<st[i]<<'\n';
	}
//	if (n==750&&s[1]=='a'&&s[2]=='a'&&s[3]=='a') {
//		for (int i=1;i<=750;) {
//			for (int j=1;j<=100&&i<=750;++j,++i) printf("%d ",ed[i]-bg[i]);
//			printf("\n");
//			
//		}
//		return 0;
//	} 
	
	
	
	bfs();
	
	for (int i=1;i<=n;++i) {
		run(i,bg[i],ed[i]);
	}
	
	
	for (int i=1;i<=n;++i) dfs(i,i);
	
	
	
	for (int i=1;i<=n;++i) if (from[i]) go[from[i]]=i;


	int op=0;
	for (int i=1;i<=n;++i) if (!from[i]) qe[++op]=i;
	for (int cl=1;cl<=op;++cl) {
		int u=qe[cl];
		for (int i=1;i<=n;++i) if (used[i][u]&&!forb[i]) {
			forb[i]=1;
			qe[++op]=go[i];
		}
	} 

	
	for (int i=1;i<=n;++i) if (!from[i]) {
		for (int u=i;;u=go[u]) if (!forb[u]) {
			ans[++*ans]=u;
			break;
		}
	}
	printf("%d\n",*ans,T);
	for (int i=1;i<=*ans;++i) printf("%d ",ans[i]);

	return 0;
} 
