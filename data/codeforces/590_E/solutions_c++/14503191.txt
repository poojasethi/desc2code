//Pranet Verma
#include <bits/stdc++.h>
using namespace std;
const int SZ=1e7+9,maxn=767;
char str[SZ];
bool isWordEnd[SZ];
int to[SZ][2],pool,closest[SZ],link[SZ];
map<int,vector<int> > endAt; 
vector<int> g[maxn];
int G[maxn][maxn],vis[maxn],match[maxn],used[maxn],z1[maxn],z2[maxn],mvc[maxn];
string s[maxn];
inline void add(const string &s,int u)
{
    int r=0;
    for(int i=0;i<s.size();++i)
    {
        char c=s[i]-'a';
        if(to[r][c]==0)
            to[r][c]=++pool;
        r=to[r][c];
    }
    isWordEnd[r]=true;
    endAt[r].push_back(u);
}
int done[SZ];
inline void add2(const string &s,int u)
{
    int r=0;
    for(int i=0;i<s.size();++i)
    {
        char c=s[i]-'a';
        if(isWordEnd[r])
        {
            vector<int> &x=endAt[r];
            for(int i=0;i<x.size();++i)
                G[u][x[i]]=1;
        }
        int v=closest[r];
        if(v && done[v]!=u)
        {
            vector<int> &x=endAt[v];
            for(int i=0;i<x.size();++i)
                G[u][x[i]]=1;
            done[v]=u;
        }
        r=to[r][c];
    }
    if(isWordEnd[r])
    {
        vector<int> &x=endAt[r];
        for(int i=0;i<x.size();++i)
            if(x[i]>u)
                G[u][x[i]]=1;
    }
    int v=closest[r];
    if(v && done[v]!=u)
    {
        vector<int> &x=endAt[v];
        for(int i=0;i<x.size();++i)
            G[u][x[i]]=1;
        done[v]=u;
    }
}
int q[SZ],st,en;
void pushLinks()
{
    q[en++]=0;
    while(st<en)
    {
        int r=q[st++];
        for(int c=0;c<2;++c)
        {
            int &v=to[r][c];
            if(v)
            {
                if(r)
                    link[v]=to[link[r]][c];
                q[en++]=v;
                if(isWordEnd[link[v]])
                    closest[v]=link[v];
                else
                    closest[v]=closest[link[v]];
            }   
            else
                v=to[link[r]][c];
        }
    }
}
bool dfs(int u)
{
    vis[u]=pool;
    for(int i=0;i<g[u].size();++i)
    {
        int v=g[u][i];
        if(match[v]==0 || (vis[match[v]]!=pool && dfs(match[v])))
        {
            match[v]=u;
            return 1;
        }
    }
    return 0;
}
void addDFS(int u)
{
    z1[u]=1;
    for(int i=0;i<g[u].size();++i)
    {
        int v=g[u][i];
        if(match[v]!=u && !z1[match[v]])
        {
            z2[v]=1;
            addDFS(match[v]);
        }
    }
}
int main()
{
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;++i)
    {
        scanf("%s",str);
        s[i]=string(str);
        add(s[i],i);
    }
    pushLinks();
    for(int i=1;i<=n;++i)
        add2(s[i],i);
    for(int k=1;k<=n;++k)
        for(int i=1;i<=n;++i)
            for(int j=1;j<=n;++j)
                G[i][j]|=(G[i][k]&G[k][j]);
    for(int i=1;i<=n;++i)
        for(int j=1;j<=n;++j)
            if(G[i][j]==1)
                g[i].push_back(j);
    int ret=n;
    for(int i=1;i<=n;++i)
        if(dfs(i))
            --ret,++pool;
    for(int i=1;i<=n;++i)
        used[match[i]]=i;
    for(int i=1;i<=n;++i)
        if(!used[i])
            addDFS(i);
    printf("%d\n",ret);
    for(int i=1;i<=n;++i)
        if( !(!z1[i] || z2[i]) )
            printf("%d ",i);
}