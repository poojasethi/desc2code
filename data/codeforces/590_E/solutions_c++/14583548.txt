#include <cstdio>
#include <cstring>
#include <cctype>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define inf 0x3f3f3f3f
#define L 10000010
int ch[L][2], fail[L], id, end_point[L], last[L];
int q[L], fr, ta, total;
char s[L];
#define N 751
int n, cnt[N], be[N], en[N];
int G[N][N];
void dfs(int x) {
    ++cnt[last[x]];
    ++cnt[end_point[x]];
    if (end_point[x]) {
        for (int i = 1; i <= n; ++i)
            if (i != end_point[x] && cnt[i])
                G[i][end_point[x]] = 1;
    }
    for (int j = 0; j < 2; ++j)
        if (ch[x][j])
            dfs(ch[x][j]);
    --cnt[last[x]];
    --cnt[end_point[x]];
}
int head[N << 1], to[N * N << 1], nxt[N * N << 1];
void addedge(int a, int b) {
    static int q = 1;
    to[q] = b;
    nxt[q] = head[a];
    head[a] = q++;
}

int vis[N << 1], match[N << 1], tclock;
bool augment(int x) {
    for (int j = head[x]; j; j = nxt[j]) {
        if (vis[to[j]] != tclock) {
            vis[to[j]] = tclock;
            if (!match[to[j]] || augment(match[to[j]])) {
                match[x] = to[j];
                match[to[j]] = x;
                return 1;
            }
        }
    }
    return 0;
}

int ok[N], lnode[N], bel[N << 1], num;
void dfs(int x, int type) {
    for (int j = head[type == -1 ? lnode[x] : match[lnode[x]]]; j; j = nxt[j]) {
        if (match[to[j]] && ok[bel[to[j]]] == 0)
            dfs(bel[to[j]], ok[bel[to[j]]] = type);
    }
}
bool independent_set[N << 1];
int main() {
#ifndef ONLINE_JUDGE
    freopen("tt.in", "r", stdin);
#endif
    scanf("%d", &n);
    gets(s);
    int i, j, k, len, p;
    for (i = 1; i <= n; ++i) {
        gets(s + total);
        len = strlen(s + total);
        be[i] = total;
        en[i] = total += len;
        for (p = 0, j = be[i]; j < en[i]; ++j) {
            if (!ch[p][s[j] - 'a'])
                ch[p][s[j] - 'a'] = ++id;
            p = ch[p][s[j] - 'a'];
        }
        end_point[p] = i;
    }
    for (j = 0; j < 2; ++j)
        if (ch[0][j])
            q[ta++] = ch[0][j];
    int u, v, r;
    while (fr != ta) {
        u = q[fr++];
        for (j = 0; j < 2; ++j) {
            if ((v = ch[u][j])) {
                q[ta++] = v;
                for (r = fail[u]; r && !ch[r][j]; r = fail[r]);
                fail[v] = ch[r][j];
                if (end_point[fail[v]])
                    last[v] = end_point[fail[v]];
                else
                    last[v] = last[fail[v]];
            }
        }
    }
    for (i = 1; i <= n; ++i) {
        memset(cnt, 0, sizeof cnt);
        for (p = 0, j = be[i]; j < en[i]; ++j) {
            p = ch[p][s[j] - 'a'];
            ++cnt[end_point[p]];
            ++cnt[last[p]];
        }
        for (j = 1; j <= n; ++j)
            if (j != i && cnt[j])
                G[i][j] = 1;
    }
    for (k = 1; k <= n; ++k)
        for (i = 1; i <= n; ++i)
            for (j = 1; j <= n; ++j)
                if (G[i][k] && G[k][j])
                    G[i][j] = 1;
    for (i = 1; i <= n; ++i)
        for (j = 1; j <= n; ++j)
            if (G[i][j]) {
                addedge(2 * i, 2 * j - 1);
                addedge(2 * j - 1, 2 * i);
            }
    
    int ans = 0;
    for (i = 1; i <= n; ++i) {
        ++tclock;
        if (augment(2 * i))
            ++ans;
    }
    printf("%d\n", n - ans);
    for (i = 1; i <= n; ++i)
        if (match[2 * i]) {
            bel[2 * i] = bel[match[2 * i]] = ++num;
            lnode[num] = 2 * i;
        }
    for (i = 1; i <= n; ++i) {
        if (!match[2 * i]) {
            independent_set[2 * i] = 1;
            for (j = head[2 * i]; j; j = nxt[j])
                if (match[to[j]] && ok[bel[to[j]]] == 0)
                    dfs(bel[to[j]], ok[bel[to[j]]] = -1);
        }
        if (!match[2 * i - 1]) {
            independent_set[2 * i - 1] = 1;
            for (j = head[2 * i - 1]; j; j = nxt[j])
                if (match[to[j]] && ok[bel[to[j]]] == 0)
                    dfs(bel[to[j]], ok[bel[to[j]]] = 1);
        }
    }
    for (i = 1; i <= num; ++i) {
        if (ok[i] == 0)
            ok[i] = -1;
        independent_set[ok[i] == -1 ? lnode[i] : match[lnode[i]]] = 1;
    }
    
    for (i = 1; i <= n; ++i)
        if (independent_set[2 * i] && independent_set[2 * i - 1])
            printf("%d ", i);
    puts("");
    return 0;
}