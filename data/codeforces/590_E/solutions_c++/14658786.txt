#include<iostream>
#include<algorithm>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<vector>
#include<string>
#include<stdio.h>
using namespace std;
const int maxn = 777,maxt = 10000011;
int n;
int trans[maxt][2],fail[maxt],fail_end[maxt],_end[maxt];
int cnt=0;
vector<int>bel[maxt];
int M[maxn][maxn];

char cc[maxt];
int Q[maxt],_head,_tail;
void init(){
    for (int i = 1;i <= n;i++){
        int p = 0,l;
        scanf("%s",cc+1);
        l = strlen(cc+1);
        for (int j = 1;j <= l;j++){
            int k = cc[j] - 'a';
            if (!trans[p][k]){
                trans[p][k] = ++cnt;
            }
            p = trans[p][k];
            bel[p].push_back(i);
        }
        _end[p] = i;
    }
    _head = _tail = 0;
    for (int i = 0;i < 2;i++)
        if (trans[0][i])
            Q[_tail++] = trans[0][i];
    memset(M,0,sizeof(M));
    while (_head < _tail){
        int u = Q[_head++];
            if (_end[u]){
                        for (int i = 0;i < bel[u].size(); i++){
                            M[bel[u][i]][_end[u]] = 1;
                        }}
        for (int k = 0;k < 2;k++){
            int son = trans[u][k], p = fail[u];
            if (son){
                while (p && !trans[p][k])
                    p = fail[p];
                if (trans[p][k]){
                    int q = trans[p][k];
                    fail[son] = q;
                    fail_end[son] = fail_end[q];
                    if (_end[q])
                        fail_end[son] = _end[q];
                    if (fail_end[son]){
                        for (int i = 0;i < bel[son].size(); i++){
                            M[bel[son][i]][fail_end[son]] = 1;
                        }
                    }
                    if (_end[son]){
                        for (int i = 0;i < bel[son].size(); i++){
                            M[bel[son][i]][_end[son]] = 1;
                        }
                    }
                }
                Q[_tail++] = son;
            }
        }
    }
    for (int i = 1; i <= n; i++){
        M[i][i] = 1;
    }
    for (int k = 1; k <= n; k++){
        for (int i = 1; i <= n; i++){
            for (int j = 1; j <= n; j++){
                if (M[i][k] && M[k][j])
                    M[i][j] = 1;
            }
        }
    }
    for (int i = 1; i <= n; i++){
        M[i][i] = 0;
    }
    /*for (int i = 1; i <= n; i++){
        for (int j = 1;j <= n; j++)
            cout<<M[i][j]<<" ";
        cout<<endl;
    }*/
}
bool matched[maxn];
int dad[maxn],vis[maxn];
int Mark[maxn][2];
int stmp;
bool Match(int u){
    if (u == -1) return true;
    if (vis[u] == stmp) return false;
    vis[u] = stmp;
    for (int i=1; i <= n; i++){
        if (M[u][i] && Match(dad[i])){
            dad[i] = u;
            return true;
        }
    }
    return false;
}
void dfs(int u,int side){
    if (Mark[u][side]) return;
    //cout<<u<<" "<<side<<endl;
    Mark[u][side] = 1;
    if (side == 1)
        dfs(dad[u],0);
    else{
        for (int i = 1; i <= n; i++){
            if (M[u][i])
                dfs(i,1);
        }
    }
}
void solve(){
    fill(dad+1,dad+n+1,-1);
    for (int i = 1; i <= n; i++){
        stmp = i;
        matched[i] = Match(i);
    }
    for (int i = 1; i <= n; i++){
        if (!matched[i])
            dfs(i,0);
    }

    bool chs[maxn]={};
    int ans=0;
    for (int i = 1; i <= n; i++){
        if (Mark[i][0] && !Mark[i][1]){
            chs[i] = 1;
            ans++;
        }
    }
    cout<<ans<<endl;
    for (int i = 1; i <= n; i++){
        if (chs[i])
            cout<<i<<" ";
    }
    cout<<endl;
}

int main(){
    cin>>n;
    init();
    solve();
}