#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <queue>
#include <cstring>

using namespace std;

const int limite=10000005;
const int tope=751;

vector<int> gg[tope];
int next[tope];
int prev[tope];

int n;
int g[tope][tope];
int aridad[tope];

int nsiguiente=1;
int siguiente[limite][2];
int anterior[limite];
int aceptador[limite];
int anterioraceptador[limite];

void inserta(vector<int> &v,int acc)
{
  int isiguiente=0;
  for (int iv=0;iv<int(v.size());iv++) {
    int c=v[iv];
    if (!siguiente[isiguiente][c]) siguiente[isiguiente][c]=nsiguiente++;
    isiguiente=siguiente[isiguiente][c];
  }
  aceptador[isiguiente]=acc;
}

void calculaanterior()
{
  queue<int> q;
  for (int c=0;c<=1;c++)
    if (siguiente[0][c]) q.push(siguiente[0][c]);
  while (not q.empty()) {
    int u=q.front();
    q.pop();
    anterioraceptador[u]=aceptador[anterior[u]]?aceptador[anterior[u]]:anterioraceptador[anterior[u]];
    for (int c=0;c<=1;c++) {
      if (siguiente[u][c]) {
	anterior[siguiente[u][c]]=siguiente[anterior[u]][c];
	q.push(siguiente[u][c]);
      } else {
	siguiente[u][c]=siguiente[anterior[u]][c];
      }
    }
  }
}

void calculag(vector<int> &v,int acc)
{
  int isiguiente=0;
  for (int iv=0;iv<int(v.size());iv++) {
    int c=v[iv];
    isiguiente=siguiente[isiguiente][c];
    if (aceptador[isiguiente] and iv<int(v.size())-1) g[aceptador[isiguiente]][acc]=1;
    else if (anterioraceptador[isiguiente]) g[anterioraceptador[isiguiente]][acc]=1;
  }
}

void propagag()
{
  queue<int> q;
  for (int i=1;i<=n;i++) {
    for (int j=1;j<=n;j++)
      aridad[i]+=g[i][j];
    if (aridad[i]==0)
      q.push(i);
  }
  while (not q.empty()) {
    int u=q.front();
    q.pop();
    for (int i=1;i<=n;i++) {
      if (g[i][u]) {
	for (int j=1;j<=n;j++)
	  g[i][j]|=g[u][j];
	aridad[i]--;
	if (aridad[i]==0)
	  q.push(i);
      }
    }
  }
}

void g2gg()
{
  for (int i=1;i<=n;i++)
    for (int j=1;j<=n;j++)
      if (g[i][j])
	gg[i].push_back(j);
}

int visto[tope];

int computaenlace(int u,int t)
{
  vector<int> &ar=gg[u];
  for (int i=0;i<int(ar.size());i++) {
    int v=ar[i];
    if (prev[v]) {
      if (visto[v]<t) {
	visto[v]=t;
	if (computaenlace(prev[v],t)) {
	  prev[v]=u;
	  next[u]=v;
	  return 1;
	}
      }
    } else {
      prev[v]=u;
      next[u]=v;
      return 1;
    }
  }
  return 0;
}

char buff[limite];
vector<int> entrada[tope];
int lenentrada[tope];

vector<int> sol;

void calculasol()
{
  for (int i=1;i<=n;i++)
    if (prev[i]==0)
      sol.push_back(i);
  bool trobat=true;
  while (trobat) {
    trobat=false;
    for (int i=0;i<int(sol.size()) and not trobat;i++) {
      int &u=sol[i];
      for (int j=i+1;j<int(sol.size()) and not trobat;j++) {
	int &v=sol[j];
	if (g[u][v]) {
	  u=next[u];
	  trobat=true;
	} else if (g[v][u]) {
	  v=next[v];
	  trobat=true;
	}
      }
    }
  }
}

int main()
{
  cin>>n;gets(buff);
  for (int i=1;i<=n;i++) {
    gets(buff);
    //cout<<buff<<endl;
    entrada[i]=vector<int> (strlen(buff));
    for (int j=0;j<int(entrada[i].size());j++)
      entrada[i][j]=buff[j]-'a';
    inserta(entrada[i],i);
  }
  calculaanterior();
  for (int i=1;i<=n;i++)
    calculag(entrada[i],i);
  propagag();
  g2gg();
  for (int i=1;i<=n;i++)
    computaenlace(i,i);
  calculasol();
  cout<<int(sol.size())<<endl;
  for (int i=0;i<int(sol.size());i++) {
    if (i>0) cout<<" ";
    cout<<sol[i];
  }
  cout<<endl;
}
