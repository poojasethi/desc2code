def get_stable(towers):        
    towers = sorted(towers, key=lambda x: x[0])        
    return towers, towers[-1][0] - towers[0][0]

def main():
    n, k = map(int, raw_input().split())
    towers = map(int, raw_input().split())
    towers = [[x, index + 1] for index, x in enumerate(towers)]
    moves = []
    m = 0
    towers, s = get_stable(towers)
    while len(moves) < k and s > 1:
        moves.append((towers[-1][1], towers[0][1]))
        towers[-1][0] -= 1
        towers[0][0] += 1
        towers, s = get_stable(towers)
    print s, len(moves)
    for move in moves:
        print move[0], move[1]

if __name__ == "__main__":
    main()