# include <bits/stdc++.h>

using namespace std;

const int maxn = 1000 + 100;

char a[maxn][maxn];

int n, m, cmp, sz[maxn * maxn];
int mark[maxn][maxn];

void dfs(int x,int y){
	mark[x][y] = cmp, sz[cmp]++;
	if(x + 1 < n && !mark[x + 1][y] && a[x + 1][y] == '.')
		dfs(x + 1, y);
	if(x - 1 >= 0 && !mark[x - 1][y] && a[x - 1][y] == '.')
		dfs(x - 1, y);
	if(y + 1 < m && !mark[x][y + 1] && a[x][y + 1] == '.')
		dfs(x, y + 1);
	if(y - 1 >= 0 && !mark[x][y - 1] && a[x][y - 1] == '.')
		dfs(x, y - 1);
}

int main(){
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> a[i][j];
	
	cmp++;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if(!mark[i][j] && a[i][j] == '.')
				dfs(i, j), cmp++;
	
	for (int i = 0; i < n; i++){
		for (int j = 0; j < m; j++)
			if(a[i][j] == '*'){
				set <int> s;
				if(i + 1 < n)
					s.insert(mark[i + 1][j]);
				if(i - 1 >= 0)
					s.insert(mark[i - 1][j]);
				if(j + 1 < m)
					s.insert(mark[i][j + 1]);
				if(j - 1 >= 0)
					s.insert(mark[i][j - 1]);
				int ans = 1;
				while(s.size()){
					int x = *s.begin();
					s.erase(s.begin());
					ans += sz[x];
				}
				cout << ans % 10;
			}
			else
				cout << ".";
		cout << '\n';
	}
	return 0;
}
