#include <cstdio>
#include <cstring>
#include <iostream>
#include <set>
#include <algorithm>
using namespace std;

int n, m, w, p;
char mp[1111][1111];
int vist[1111][1111];
int num[1111111];
int dx[] = {-1, 0, 0, 1};
int dy[] = {0, -1, 1, 0};

void dfs(int x, int y) {
	for(int i = 0; i < 4; ++ i) {
		int nx = x + dx[i], ny = y + dy[i];
		if(nx >= 1 && nx <= n && ny >= 1 && ny <= m && !vist[nx][ny] && mp[nx][ny] == '.') {
			vist[nx][ny] = w;
			p ++;
			dfs(nx, ny);
		}
	}
}

int main () {
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; ++ i) scanf("%s", mp[i] + 1);
	w = 1;
	for(int i = 1; i <= n; ++ i) {
		for(int j = 1; j <= m; ++ j) {
			if(mp[i][j] == '.' && !vist[i][j]) {
				vist[i][j] = w;
				p = 1;
				dfs(i, j);
				num[w] = p;
				w ++;
			}
		}
	}
	set<int>s;
	for(int i = 1; i <= n; ++ i) {
		for(int j = 1; j <= m; ++ j) {
			if(mp[i][j] == '.') putchar('.');
			else {
				s.clear();
				int cnt = 1;
				for(int k = 0; k < 4; ++ k) {
					int nx = i + dx[k], ny = j + dy[k];
					if(nx >= 1 && nx <= n && ny >= 1 && ny <= m && mp[nx][ny] == '.' && s.find(vist[nx][ny]) == s.end()) {
						s.insert(vist[nx][ny]);
						cnt += num[vist[nx][ny]];
					}
				}
				printf("%d", cnt % 10);
			}
		}
		puts("");
	}
	return 0;
}
