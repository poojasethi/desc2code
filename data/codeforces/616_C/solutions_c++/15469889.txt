#include <stdio.h>

int N, M;
char B[1010][1010];
int V[1010][1010];
int C[1010*1010];
int vn = 1;

const int dr[] = {0, 0, 1, -1};
const int dc[] = {1, -1, 0, 0};

int dfs(int r, int c) {
  if (r < 0 || r >= N || c < 0 || c >= M || V[r][c] || B[r][c] == '*')
    return 0;
  V[r][c] = vn;
  return 1 + dfs(r+1, c) + dfs(r-1, c) + dfs(r, c+1) + dfs(r, c-1);
}

bool inArray(int a[], int n, int v) {
  for (int i = 0; i < n; i++)
    if (a[i] == v)
      return true;
  return false;
}

int main() {
  scanf("%d%d", &N, &M);
  for (int i = 0; i < N; i++)
    scanf("%s", B[i]);

  for (int i = 0; i < N; i++)
    for (int j = 0; j < M; j++) {
      if (B[i][j] == '.') {
        C[vn] = dfs(i, j);
        vn++;
      }
    }
  for (int i = 0; i < N; i++)
    for (int j = 0; j < M; j++)
      if (B[i][j] == '*') {
        int ans = 1;
        int chks = 0;
        int chk[] = {0, 0, 0, 0};
        for (int k = 0; k < 4; k++) {
          int r = i+dr[k];
          int c = j+dc[k];
          if (r < 0 || r >= N || c < 0 || c >= M)
            continue;
          int v = V[r][c];
          if (inArray(chk, chks, v))
            continue;
          ans += C[v];
          chk[chks++] = v;
        }
        B[i][j] = (ans%10)+'0';
      }
  for (int i = 0; i < N; i++)
    printf("%s\n", B[i]);
  return 0;
}
      					  	 		 	  	