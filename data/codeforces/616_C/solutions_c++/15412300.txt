#include<bits/stdc++.h>
using namespace std;
int n,m,t=1;
char field[1002][1002];
int A[1002][1002];
map<int,int>cnt;
void dfs(int x,int y)
{
	A[x][y]=t;
	cnt[t]++;
	if(x	&&(A[x-1][y]==-1	&&	field[x-1][y]=='.'))
			dfs(x-1,y);
	if(y	&&(A[x][y-1]==-1	&&	field[x][y-1]=='.'))
			dfs(x,y-1);
	if(x<n-1	&&(A[x+1][y]==-1	&&	field[x+1][y]=='.'))
			dfs(x+1,y);
	if(y<m-1	&&(A[x][y+1]==-1	&&	field[x][y+1]=='.'))
			dfs(x,y+1);
}
int main()
{
	cnt[-1]=0;
	set<int> s;
	memset(A,-1,sizeof(A));
	cin>>n>>m;
	for(int i=0;i<n;i++)
		scanf("%s",field[i]);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(field[i][j]=='.'	&&	A[i][j]==-1)
			{
				dfs(i,j);
				t++;
			}
		}
	}
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(field[i][j]=='*')
			{
				s.clear();
				int temp=0;
				if(i)
					{
						s.insert(A[i-1][j]);
						temp+=cnt[A[i-1][j]];
					}
				if(j	&&	s.find(A[i][j-1])==s.end())
					{
						s.insert(A[i][j-1]);
						temp+=cnt[A[i][j-1]];
					}
				if(i<n-1  &&  s.find(A[i+1][j])==s.end())
				{
					s.insert(A[i+1][j]);
					temp+=cnt[A[i+1][j]];
				}
				if(j<m-1  &&  s.find(A[i][j+1])==s.end())
					{
						s.insert(A[i][j+1]);
						temp+=cnt[A[i][j+1]];
					}
				field[i][j]='0'+(temp+1)%10;
			}
		}
	}
	for(int i=0;i<n;i++)
		printf("%s\n",field[i]);
	return 0;
}
