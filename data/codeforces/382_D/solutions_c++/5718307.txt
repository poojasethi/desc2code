#include <iostream>
#include <cstring>
using namespace std;
const int MAX = 5000005;
int d[MAX], mark[MAX], good[MAX], next[MAX], n, m;
void dfs(int v)
{
	if (next[v] == -1)
	{
		d[v] = 0;
		return;
	}
	mark[v] = 1;
	int u = next[v];
	if (mark[u] == 1)
		throw 0;
	if (!mark[u])
		dfs(u);
	d[v] = d[u] + good[v];
	mark[v] = 2;
} 
int id(int i, int j)
{
	return (i - 1) * m + j; 
}
int main()
{
	ios::sync_with_stdio(false);
	memset(next, -1, sizeof(next));
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
		{
			char c;
			cin >> c;
			if (c == '^')
			{
				next[id(i, j)] = id(i - 1, j);
				good[id(i, j)] = true;
			}
			if (c == 'v')
			{
				next[id(i, j)] = id(i + 1, j);
				good[id(i, j)] = true;
			}
			if (c == '<')
			{
				next[id(i, j)] = id(i, j - 1);
				good[id(i, j)] = true;
			}
			if (c == '>')
			{
				next[id(i, j)] = id(i, j + 1);
				good[id(i, j)] = true;
			}
		}
	n = id(n, m);
	try
	{
		for (int i = 1; i <= n; i++)
			dfs(i);
	}
	catch (...)
	{
		cout << -1;
		return 0;
	}
	int p1 = 1;
	for (int v = 1; v <= n; v++)
		if (d[p1] < d[v])
			p1 = v;
	int v = p1;
	while (v != -1)
	{
		good[v] = false;
		v = next[v];
	}
	int ans = d[p1];
	memset(mark, false, sizeof(mark));
	memset(d, 0, sizeof(d));
	for (int i = 1; i <= n; i++)
		dfs(i);
	int ans2 = 0;
	for (int i = 1; i <= n; i++)
		ans2 = max(ans2, d[i]);
	cout << max(2 * ans - 1, ans + ans2);
	return 0;
}
