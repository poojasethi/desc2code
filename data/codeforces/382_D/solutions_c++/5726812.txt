#include <bits/stdc++.h>
using namespace std;
const int MAXN = 2010, INF = 1e9;
int dx[] = {0, -1, 0, 1, 0};
int dy[] = {0, 0, 1, 0, -1};
int n, m;
pair<int,int> end[MAXN][MAXN];
int rev[300], grid[MAXN][MAXN], path[MAXN][MAXN];

void dfs (int x, int y)
{
      if (path[x][y] || grid[x][y] == 0)
	    return;

      path[x][y] = INF;
      dfs (x + dx[grid[x][y]], y + dy[grid[x][y]]);
      path[x][y] = min(1 + path[x + dx[grid[x][y]]][y + dy[grid[x][y]]], INF);
      if (path[x][y] == 1)
	    end[x][y] = make_pair(x, y);
      else if (path[x][y] < INF)
	    end[x][y] = end[x + dx[grid[x][y]]][y + dy[grid[x][y]]];
}

int main()
{
      ios::sync_with_stdio (false);
      cin >> n >> m;

      string line;
      rev['#'] = 0; rev['^'] = 1; rev['>'] = 2; rev['v'] = 3; rev['<'] = 4;
      for (int i = 0; i < n; ++i)
      {
	    cin >> line;
	    for (int j = 0; j < m; ++j)
		  grid[i][j] = rev[line.at(j)];
      }

      for (int i = 0; i < n; ++i)
	    for (int j = 0; j < m; ++j)
		  if (grid[i][j] != 0 && path[i][j] == 0)
			dfs (i, j);

      vector<int> mx(2, -1), my(2, -1);
      for (int i = 0; i < n; ++i)
	    for (int j = 0; j < m; ++j)
		  if (mx[0] == -1 || path[i][j] > path[mx[0]][my[0]])
			mx[0] = i, my[0] = j;
      for (int i = 0; i < n; ++i)
	    for (int j = 0; j < m; ++j)
	    {
		  if (path[i][j] == path[mx[0]][my[0]] && end[i][j] == end[mx[0]][my[0]])
			continue;
		  if (mx[1] == -1 || path[i][j] > path[mx[1]][my[1]])
			mx[1] = i, my[1] = j;
	    }
      if (path[mx[0]][my[0]] + path[mx[1]][my[1]] >= INF)
	    cout << "-1\n";
      else
	    cout << path[mx[0]][my[0]] + path[mx[1]][my[1]] << endl;
      return 0;
}

