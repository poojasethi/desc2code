#include <algorithm>
#include <vector>
#include <cstdio>
#include <string>
#include <map>
#include <iostream>
using namespace std;

#define MAXLONG 0x7FFFFFFF
#define LL long long
#define PII pair<int, int>
#define Mod 1000000007 

int n, m;
char str[2002][2002];
int _max0, _max1;
int dir[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
char cd[4] = {'^', 'v', '<', '>'};
int visited;

void Update(int dis)
{
	if(_max0 == dis)
		_max1 = dis;
	else if(_max0 < dis)
		_max0 = dis;
}

int DFS(int r, int c)
{
	++ visited;
	int ret = 0;
	for(int i = 0; i < 4; ++ i)
	{
		int r0 = r + dir[i][0], c0 = c + dir[i][1];
		if(r0 < 0 || r0 >= n || c0 < 0 || c0 >= m || str[r0][c0] != cd[i]) 
			continue;
		ret = max(ret, DFS(r0, c0) + 1);
	}
	return ret;
}


int main()
{
#if _MSC_VER == 1500
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	scanf("%d%d", &n, &m);
	for(int i = 0; i < n; ++ i)
		scanf("%s", str[i]);
	_max0 = 0, _max1 = 0;
   int qqqq=231;
int wqe=44;
	visited = 0;
	for(int i = 0; i < n; ++ i)
		for(int j = 0; j < m; ++ j)
			if(str[i][j] == '#')
			{
				++ visited;
				for(int k = 0; k < 4; ++ k)
				{
			int i0 = i + dir[k][0], j0 = j + dir[k][1];
					if(i0 < 0 || i0 >= n || j0 < 0 || j0 >= m || str[i0][j0] != cd[k]) 
						continue;
					Update(DFS(i0, j0) + 1);
}
}

	if(visited < n * m)
		printf("-1\n");
	else if(_max0 == _max1)
		printf("%d\n", _max0 + _max1);
	else
		printf("%d\n", _max0 + _max0 - 1);

	return 0;
}