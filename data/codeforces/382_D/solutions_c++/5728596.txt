#include <stdio.h>
#include <string.h>
#include <iostream>
#include <string>
//#define max(a,b) ((a)>(b)?(a):(b))
using namespace std;

//const int d[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
//const char v[5] = {"><v^"};

int n, m, max1, max2, num;
string g[2000];

void init() {
    num = max1 = max2 = 0;
    //memset(dp, -1, sizeof(dp));
    cin >> n >> m;
    for (int i = 0; i < n; i++)
        cin>>g[i];
}

void Max(int M) {
    if (M > max1) {
        max2 = max1; max1 = M;
    }
    else if (M > max2) max2 = M;
}

int dfs(int x, int y, char c) {
    if (x < 0 || x >= n || y < 0 || y >= m || c != g[x][y]) return 0;
    //if (dp[x][y] != -1) return dp[x][y];
    num++;
    int Max = 0;
    //for (int i = 0; i < 4; i++)
    //  Max = max(Max, dfs(x + d[i][0], y + d[i][1], v[i]));
    Max = max(Max,dfs(x,y-1,'>'));
    Max = max(Max,dfs(x,y+1,'<'));
    Max = max(Max,dfs(x-1,y,'v'));
    Max = max(Max,dfs(x+1,y,'^'));
    //dp[x][y] = Max + 1;
    return Max + 1;
}

void solve() {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++) {
            if (g[i][j] == '#') {
                num++;
                //for (int k = 0; k < 4; k++) {
                //  Max(dfs(i + d[k][0], j + d[k][1], v[k]));
                //}
                Max(dfs(i,j-1,'>'));
                Max(dfs(i,j+1,'<'));
                Max(dfs(i-1,j,'v'));
                Max(dfs(i+1,j,'^'));
            }
        }
    if (num < n * m) cout<<-1<<endl;
    else cout<<(max1 == max2 ? max1 + max2 : max1 + max(max1 - 1, max2))<<endl;
}

int main() {
    init();
    solve();
    return 0;
}
