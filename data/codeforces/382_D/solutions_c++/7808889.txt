#include<cstdio>
#include<cstring>
#include<set>
#include<map>
#include<algorithm>
#include<string>
#include<iostream>
#include<vector>
using namespace std;

typedef long long ll;
const int MAXN = 2e3 + 10;
const int INF = 1e9;
const int MOD = 1e9 + 7;
int min(int a, int b) {return a < b ? a : b;}
int max(int a, int b) {return a > b ? a : b;}

/*main..............................................................................*/
const int ym[4] = {-1, 1, 0, 0};
const int xm[4] = {0, 0, -1, 1};
const char sign[4] = {'>', '<', 'v', '^'};

char G[MAXN][MAXN];
int M1, M2, tot;
int n, m;

void update(int d)
{
    M2 = max(d, M2);
    if(M2 > M1) swap(M1, M2);
}

int dfs(int x, int y)
{
    tot++;
    
    int ans = 0;
    for(int i = 0; i < 4; i++)
    {
        int xx = x + xm[i], yy = y + ym[i];

        if(xx < 0 || xx >= n || yy < 0 || yy >= m) continue;

        if(G[xx][yy] != sign[i]) continue;

        if(G[x][y] == '#') update(dfs(xx, yy) + 1);
        else ans = max(ans, dfs(xx, yy) + 1);
    }

    return ans;
}

int solve()
{
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            if(G[i][j] == '#') dfs(i, j);
        }
    }

    if(tot < n * m) return -1;
    
    return M1 == M2 ? 2 * M1 : 2 * M1 - 1;
}

int main()
{
    //freopen("data.in", "r", stdin);

    scanf("%d%d", &n, &m);  
    for(int i = 0; i < n; i++)
    {
        scanf("%s", G[i]);
    }

    printf("%d\n", solve());
    return 0;
}