#include <iostream>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

int n, m;
char x[2000][2001];
bool v[2000][2000];
int p[2000][2000];
int dp[2000][2000];

int dfs(int i, int j, int& id)
{
	if (x[i][j] == '#')
		return 0;
	else if (v[i][j])
	{
		cout << -1 << endl;
		exit(0);
	}
	else if (dp[i][j] != -1)
	{
		id = p[i][j];
		return dp[i][j];
	}
	v[i][j] = true;
	int ret = 0;
	switch (x[i][j])
	{
		case '>': ret = 1+dfs(i, j+1, id); break; 
		case '<': ret = 1+dfs(i, j-1, id); break; 
		case '^': ret = 1+dfs(i-1, j, id); break; 
		case 'v': ret = 1+dfs(i+1, j, id); break; 
	}
	v[i][j] = false;
	p[i][j] = id;
	return dp[i][j] = ret;
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin >> n >> m;
	for (int i = 0; i < n; ++i)
		cin >> x[i];
	memset(dp, -1, sizeof(dp));
	int ret1 = 0, id1 = -1, ret2 = 0, id2 = -2;
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
		{
			int id = i*m+j;
			int ret = dfs(i, j, id);
			if (ret > ret1)
			{
				ret2 = ret1;
				id2 = id1;
				ret1 = ret;
				id1 = id;
			}
			else if (ret > ret2)
			{
				ret2 = ret;
				id2 = id;
			}
			else if (ret == ret1 && ret == ret2 && id1 == id2)
			{
				ret1 = ret;
				id1 = id;
			}
		}
	if (ret1 == ret2 && id1 == id2)
		cout << ret1*2-1 << endl;
	else
		cout << ret1+ret2 << endl;
	return 0;
}
