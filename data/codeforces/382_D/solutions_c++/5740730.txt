#include<iostream>
#include<cstring>
#include<cstdio>
#include<algorithm>
#define INF 2000000000
using namespace std;

int n,m,a,b;
char arr[2500][2500];
int dp[2500][2500];
int v[2500][2500];

int dfs(int x,int y)
{
    if(v[x][y]==2) return dp[x][y];
    else if(v[x][y]==1) return INF;
    v[x][y]=1;
    int c=0,d=0,p;
    if(x+1<n && arr[x+1][y]=='^')
    {
        p=dfs(x+1,y);
        if(p!=INF) p++;
        if(p>c) c=p,d=p-1;
        else if(p==c && arr[x][y]=='#') c=p,d=p;
    }
    if(x-1>=0 && arr[x-1][y]=='v')
    {
        p=dfs(x-1,y);
        if(p!=INF) p++;
        if(p>c) c=p,d=p-1;
        else if(p==c && arr[x][y]=='#') c=p,d=p;
    }
    if(y+1<m && arr[x][y+1]=='<')
    {
        p=dfs(x,y+1);
        if(p!=INF) p++;
        if(p>c) c=p,d=p-1;
        else if(p==c && arr[x][y]=='#') c=p,d=p;
    }
    if(y-1>=0 && arr[x][y-1]=='>')
    {
        p=dfs(x,y-1);
        if(p!=INF) p++;
        if(p>c) c=p,d=p-1;
        else if(p==c && arr[x][y]=='#') c=p,d=p;
    }
    int tmp[]={a,b,c,d};
    sort(tmp,tmp+4);
    a=tmp[3];
    b=tmp[2];
    v[x][y]=2;
    return dp[x][y]=c;
}
int main()
{
    int i,j,k;
    cin>>n>>m;
    getchar();
    for(i=0;i<n;i++) cin>>arr[i];
    memset(dp,-1,sizeof(dp));
    a=b=0;
    memset(v,0,sizeof(v));
    for(i=0;i<n;i++)
    {
        for(j=0;j<m;j++)
        {
            if(v[i][j]==0) dfs(i,j);
        }
    }
    if(a==INF) cout<<-1<<endl;
    else cout<<a+b<<endl;
    return 0;
}
