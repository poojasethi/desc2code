# -*- coding: utf-8 -*-
"""
Created on Sat Jul 02 20:42:16 2016

@author: Deva
"""

def decimalTo7(num):
   new_num_str = ""
   while num != 0:
       remainder = num % 7
       new_num_str = str(remainder) + new_num_str
       num = num // 7
   if new_num_str == '':
       new_num_str = '0'
   return new_num_str

n, m = raw_input('').split()
n = int(n)
m = int(m)
n, m = max(m, n), min(m, n)
n -= 1
m -= 1
n7 = decimalTo7(n)
m7 = decimalTo7(m)
n7l = len(n7)
m7l = len(m7)

solved = {}

def distinct(x):
    ret = set(('1', '2', '3', '4', '5', '6', '0'))
    ck = set()
    for i in x:
        if i in ck:
            return None
        ck.add(i)
    return ret - ck
    
def dfs(st, cur):
    
    global m7, m7l
    #print st, cur, m7l    
    if cur > m7:
        return 0
    if len(cur) == m7l:
        if cur <= m7:
            return 1
        return 0
    ret = 0
    for i in st:
        ss = st | set()
        ss.remove(i)
        ret += dfs(ss, cur + i)
    return ret
    
def count(st):
    global solved
    stt = set()
    for i in st:
        stt.add(int(i))
    strst = str(stt)[5:-2]
    if solved.get(strst, 'N') == 'N':
        solved[strst] = dfs(st, '')
        return solved[strst]
    else:
        solved[strst] = dfs(st, '')
        return solved[strst]

def check(x):
    global n7, m7, n7l, m7l
    x7 = decimalTo7(x)
    lll = (n7l-len(x7))
    if lll > 1:
        return 0
    x7 = '0' * lll + x7
    dis = distinct(x7)
    if dis == None:
        return 0
    if len(dis) < m7l:
        return 0
    return count(dis )


if m * n > 1623542:
    print 0
else:
    cnt = 0
    for i in range(n+1):
        #print i, check(i)
        cnt += check(i)
        #check(i)
    print cnt