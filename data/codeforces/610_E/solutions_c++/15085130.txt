#include <bits/stdc++.h>
using namespace std;
#define rep(i, a, b) for(int i = (a); i < (b); i++)
#define repd(i, a, b) for(int i = (a); i > (b); i--)
#define forIt(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define ll long long
#define fi first
#define se second
#define mk make_pair
#define pb push_back
#define sz(a) (a).size()
#define all(a) (a).begin(), (a).end()
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
const int N = 2e5 + 7;
const int M = 1001;
const int inf = 1e9 + 7;
const double pi = acos(-1);

struct node {
    int cnt[10][10];
    int left;
    int right;
    int debt;
};

node a[N * 3];
int n, m, k;

void update(int i, int l, int r, int u, int v, int val) {
    if (l == u && r == v) {
        node &cur = a[i];
        rep(p, 0, k) rep(q, 0, k) cur.cnt[p][q] = 0;
        cur.cnt[val][val] = r - l;
        cur.left = cur.right = cur.debt = val;
        return;
    }
    int g = (l + r) >> 1, nxt = i << 1;
    if (a[i].debt != -1) {
        update(nxt, l, g, l, g, a[i].debt);
        update(nxt + 1, g + 1, r, g + 1, r, a[i].debt);
        a[i].debt = -1;
    }

    if (u <= g)
        update(nxt, l, g, u, min(g, v), val);
    if (g < v)
        update(nxt + 1, g + 1, r, max(g + 1, u), v, val);

    rep(p, 0, k) rep(q, 0, k)
        a[i].cnt[p][q] = a[nxt].cnt[p][q] + a[nxt + 1].cnt[p][q];
    a[i].left = a[nxt].left;
    a[i].right = a[nxt + 1].right;
    a[i].cnt[a[nxt].right][a[nxt + 1].left]++;
    a[i].debt = -1;
}

void solve() {
    cin >> n >> m >> k;
    string s;
    cin >> s;
    rep(i, 0, s.size())
        update(1, 1, n, i + 1, i + 1, s[i] - 'a');
    while (m-- > 0) {
        int op; scanf("%d", &op);
        if (op == 1) {
            int u, v; char t;
            scanf("%d %d %c", &u, &v, &t);
            update(1, 1, n, u, v, t - 'a' + 0);
        } else {
            int ans = 1;
            cin >> s;
            for(int u = 0; u < k; u++) {
                for(int v = u; v < k; v++)
                    ans += a[1].cnt[s[v] - 'a'][s[u] - 'a'];
            }
            printf("%d\n", ans);
        }

    }
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
    solve();
}
