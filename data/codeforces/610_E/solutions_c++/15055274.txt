#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>
#include <queue>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define S2(x,y) scanf("%d%d",&x,&y)
#define P(x) printf("%d\n",x)
#define all(v) v.begin(),v.end()
#define FF first
#define SS second

typedef long long int LL;
typedef pair<int, int > pii;
typedef vector<int > vi;

const int N = 200001;

int X[10][10];

int k;
string s;
string tmp;
int sz;

struct node {
  int lazy;
  int M[10][10];
};

node ST[4*N];

void build(int n, int b, int e) {
  ST[n].lazy = -1;
  if(b == e) {
    return;
  }

  int m = (b + e) >> 1;
  build(n * 2, b, m);
  build(2 * n + 1, m+1, e);
  rep(i,0,k) rep(j,0,k) ST[n].M[i][j] = ST[n * 2].M[i][j] + ST[n * 2 + 1].M[i][j];
  if(m+1 <= sz) ST[n].M[s[m-1]-'a'][s[m]-'a']++;
}

void update(int n, int b, int e, int x, int y, int v) {
  if(b == x && e == y) {
    rep(i,0,k) rep(j,0,k) ST[n].M[i][j] = 0;
    ST[n].M[v][v] += e - b;
    ST[n].lazy = v;
    s[b-1] = v + 'a';
    s[e-1] = v + 'a';
    return;
  }

  int m = (b + e) >> 1;
  if(ST[n].lazy != -1) {
    update(2*n, b, m, b, m, ST[n].lazy);
    update(2*n+1, m+1, e, m+1, e, ST[n].lazy);
    ST[n].lazy = -1;
    rep(i,0,k) rep(j,0,k) ST[n].M[i][j] = ST[n * 2].M[i][j] + ST[n * 2 + 1].M[i][j];
    if(m+1 <= sz) ST[n].M[s[m-1]-'a'][s[m]-'a']++;
  }

  if(y <= m) {
    update(2 * n, b, m, x, y, v);
  } else if(x > m) {
    update(2 * n + 1, m + 1, e, x, y, v);
  } else {
    update(2 * n, b, m, x, m, v);
    update(2 * n + 1, m + 1, e, m+1, y, v);
  }
  rep(i,0,k) rep(j,0,k) ST[n].M[i][j] = ST[n * 2].M[i][j] + ST[n * 2 + 1].M[i][j];
  if(m+1 <= sz) ST[n].M[s[m-1]-'a'][s[m]-'a']++;
}

int main() {
  int n,m;
  scanf("%d%d%d",&n,&m,&k);
  sz = n;
  cin >> s;
  build(1, 1, n);
  // rep(i,0,k) rep(j,0,k) printf("%c%c %d\n",i+'a', j+'a', ST[1].M[i][j]); printf("\n");

  while(m--) {
    int type;
    S(type);
    if (type == 1) {
      int l,r;
      S2(l,r);
      cin >> tmp;
      update(1, 1, n, l, r, tmp[0]-'a');
    } else {
      cin >> tmp;
      memset(X, 0, sizeof(X));
      rep(i,0,k) rep(j,i+1,k) X[tmp[i]-'a'][tmp[j]-'a'] = 1;

      int ans = 1;
      rep(i,0,k) rep(j,0,k) if(!X[i][j]) {
        ans += ST[1].M[i][j];
      }
      // rep(i,0,k) rep(j,0,k) printf("%c%c %d\n",i+'a', j+'a', ST[1].M[i][j]);
      P(ans);
    }
  }
  return 0;
}