//In the Name of God ;

#include<bits/stdc++.h>

using namespace std;

const int Maxn=1<<18;
const int Max=11*11;

const int CHANGE=1;
const int SOLVE=2;

int n,q,k;
string s;
int flag[2*Maxn],cnt[2*Maxn][Max+20];

int num(int a,int b)
{
  return a*k+b;
}

void pull(int node)
{
  for(int i=0;i<Max;i++)
    cnt[node][i]=cnt[2*node+0][i]+cnt[2*node+1][i];
}

void make(int l,int r,int node=1)
{
  flag[node]=-1;
  if(l==r-1)
    {
      flag[node]=num(s[l]-'a',s[l+1]-'a');
      cnt[node][flag[node]]=1;
      return ;
    }
  int mid=(l+r)/2;
  make(l,mid,2*node+0);
  make(mid,r,2*node+1);
  pull(node);
}

void push(int node,int l,int r)
{
  if(flag[node]<0)
    return ;
  int lc=2*node+0;
  int rc=2*node+1;
  int x=flag[lc]=flag[rc]=flag[node];
  for(int i=0;i<Max;i++)
    cnt[lc][i]=cnt[rc][i]=0;
  int mid=(l+r)/2;
  cnt[lc][x]=mid-l;
  cnt[rc][x]=r-mid;
  flag[node]=-1;
}

void change(int l,int r,int s,int e,int x,int node=1)
{
  if(e<=l || r<=s)
    return ;
  if(s<=l && r<=e)
    {
      flag[node]=x;
      for(int i=0;i<Max;i++)
	cnt[node][i]=0;
      cnt[node][x]=r-l;
      return ;
    }
  push(node,l,r);
  int mid=(l+r)/2;
  change(l,mid,s,e,x,2*node+0);
  change(mid,r,s,e,x,2*node+1);
  pull(node);
}

int value(int l,int r,int p,int node=1)
{
  if(p==n)
    return value(0,n,n-1);
  if(r<=p || p<l)
    return 0;
  if(l==r-1)
    return flag[node]/k;
  push(node,l,r);
  int mid=(l+r)/2;
  return value(l,mid,p,2*node+0)+value(mid,r,p,2*node+1);
}

void ch(int l,int r,int t)
{
  change(0,n,l,r,num(t,t));
  if(l)
    change(0,n,l-1,l,num(value(0,n,l-1),t));
  if(r<n)
    if(r==n-1)
      change(0,n,r,r+1,num(t,t));
    else
      change(0,n,r,r+1,num(t,value(0,n,r+1)));
}

void solve(string p)
{
  int ans=n;
  for(int i=0;i<k;i++)
    for(int j=0;j<i;j++)
      ans-=cnt[1][num(p[j]-'a',p[i]-'a')];
  cout<<ans<<endl;
}

void show()
{
  for(int i=0;i<n;i++)
    cout<<(char)((value(0,n,i)+'a'));cout<<endl;
}

main()
{
  ios_base::sync_with_stdio(0);
  cin>>n>>q>>k;
  cin>>s;
  s+=s[n-1];
  make(0,n);
  string p;
  char c;
  for(int t,l,r;q--;)
    {
      cin>>t;
      if(t==CHANGE)
	{
	  cin>>l>>r>>c;
	  //show();
	  ch(l-1,r-1,c-'a');
	  //show();
	}
      else
	{
	  cin>>p;
	  solve(p);
	}
    }
  return 0;
}
