#include <cstdio>
#include <set>
#include <utility>
using namespace std;
typedef pair<int, int> P;
typedef pair<P, int> PP;
typedef set<PP>::iterator IT;
char s[200010];
char ord[100];
int cnt[20][20];
set<PP> se;
void ladd(IT it, int x, int y) {
	if (it != se.begin()) {
		IT it2 = it;
		--it2;
		cnt[it2->second][y] += x;
	}
}
void radd(IT it, int x, int y) {
	IT it2 = it;
	++it2;
	if (it2 != se.end()) {
		cnt[y][it2->second] += x;
	}
}
int main() {
	int n, m, k;
	scanf("%d%d%d", &n, &m, &k);
	scanf("%s", s);
	int pp = 0;
	for (int i = 0; i <= n; i++) {
		if (i < n - 1) {
			cnt[s[i]-'a'][s[i+1]-'a']++;
		}
		if (s[i] != s[pp]) {
			se.insert(PP(P(pp, i), s[pp] - 'a'));
			pp = i;
		}
	} 
	for (int i = 0; i < m; i++) {
		int t;
		scanf("%d", &t);
		if (t == 1) {
			int l, r, x, y, z;
			scanf("%d%d%s", &l, &r, ord);
			--l;
			z = ord[0] - 'a';
			IT itl = --se.lower_bound(PP(P(l, n + 10), 100));
			int ll = itl->first.first;
			x = itl->second;
			IT itr = --se.lower_bound(PP(P(r, -100), -100));
			int rr = itr->first.second;
			y = itr->second;
			++itr;
			ladd(itl, -1, x);
			for (IT it = itl; it != itr; it++) {
				cnt[it->second][it->second] -= it->first.second - it->first.first - 1;
				radd(it, -1, it->second);
			}
			se.erase(itl, itr);
			if (ll < l) {
				PP a(P(ll, l), x);
				IT it = se.insert(a).first;
				ladd(it, 1, x);
				cnt[x][x] += l - ll - 1;
			}
			if (r < rr) {
				PP a(P(r, rr), y);
				IT it = se.insert(a).first;
				radd(it, 1, y);
				cnt[y][y] += rr - r - 1;
			}
			PP b(P(l, r), z);
			IT it = se.insert(b).first;
			ladd(it, 1, z);
			radd(it, 1, z);
			cnt[z][z] += r - l - 1;
		} else {
			scanf("%s", ord);
			int p[100];
			for (int i = 0; i < k; i++) {
				p[ord[i]-'a'] = i;
			}
			int ans = 0;
			for (int i = 0; i < k; i++) {
				for (int j = 0; j < k; j++) {
					if (p[i] >= p[j]) ans += cnt[i][j];
				}
			}
			printf("%d\n", ans + 1);
		}
	}
	return 0;
}
