#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 200010;
struct tree {
    int lt, rt, a[10][10], l, r, cover;
}a[N << 2];

char s[N];
int n, m, r;
void init(int lt, int rt, int step) {
    a[step].lt = lt;
    a[step].rt = rt;
    a[step].cover = -1;
    if (lt == rt) {
        memset(a[step].a, 0, sizeof(a[step].a));
        a[step].l = a[step].r = s[lt - 1] - 'a';
        return;
    }
    int mid = (lt + rt) / 2;
    init(lt, mid, step << 1);
    init(mid + 1, rt, step << 1 | 1);
    for (int i = 0; i < r; i++)
        for (int j = 0; j < r; j++)
            a[step].a[i][j] = a[step << 1].a[i][j] + a[step << 1 | 1].a[i][j];
    a[step].l = a[step << 1].l;
    a[step].r = a[step << 1 | 1].r;
    if (a[step << 1].r != a[step << 1 | 1].l)
        a[step].a[a[step << 1].r][a[step << 1 | 1].l]++;
}

void down(int step, int val) {
    memset(a[step].a, 0, sizeof(a[step].a));
    a[step].cover = val;
    a[step].l = a[step].r = val;
}

void modify(int lt, int rt,int step, int val) {
    if (a[step].lt == lt && a[step].rt == rt) {
        down(step, val);
        return;
    }
    if (a[step].cover != -1) {
        down(step << 1, a[step].cover);
        down(step << 1 | 1, a[step].cover);
        a[step].cover = -1;
    }
    if (rt <= a[step << 1].rt) modify(lt, rt, step << 1, val);
    else if (lt > a[step << 1].rt) modify(lt, rt, step << 1 | 1, val);
    else {
        modify(lt, a[step << 1].rt, step << 1, val);
        modify(a[step << 1 | 1].lt, rt, step << 1 | 1, val);
    }

    for (int i = 0; i < r; i++)
        for (int j = 0; j < r; j++)
            a[step].a[i][j] = a[step << 1].a[i][j] + a[step << 1 | 1].a[i][j];
    a[step].l = a[step << 1].l;
    a[step].r = a[step << 1 | 1].r;
    if (a[step << 1].r != a[step << 1 | 1].l)
        a[step].a[a[step << 1].r][a[step << 1 | 1].l]++;
}

int main()
{
    scanf("%d%d%d", &n, &m, &r);
    scanf("%s", s);
    init(1, n, 1);
    int cd, x, y, z;
    while (m--) {
        scanf("%d", &cd);
        if (cd == 1) {
            scanf("%d%d%s", &x, &y, s);
            modify(x, y, 1, s[0] - 'a');
        }
        else {
            scanf("%s", s);
            int ans = n;
            for (int i = 0; i < r; i++) {
                for (int j = i + 1; j < r; j++) {
                    ans -= a[1].a[s[i] - 'a'][s[j] - 'a'];
                }
            }
            printf("%d\n", ans);
       }
    }
    return 0;
}

    	 	 			  		 			  	 			 	 		