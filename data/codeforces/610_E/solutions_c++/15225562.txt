#include <bits/stdc++.h>
//Damned if I don't take what I want.

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 2e5 + 100, MAXS = 4 * MAXN;

int f[MAXS], l[MAXS], c[MAXS][12][12];
char lazy[MAXS];

inline void merge(int a[12][12], int &fa, int &la, int b[12][12], int &fb, int &lb, int c[12][12], int &fc, int &lc){
	for (int i = 0; i < 12; i++)
		for (int j = 0; j < 12; j++)
			a[i][j] = b[i][j] + c[i][j];
	a[lb][fc]++;	
	la = lc; fa = fb;
}

inline void apply(int x, int xl, int xr, char q){
	f[x] = l[x] = q - 'a';  lazy[x] = q;
	memset(c[x], 0, sizeof c[x]);
	c[x][q - 'a'][q - 'a'] = xr - xl - 1;
}

inline void relax(int x, int xl, int xr){
	if (!lazy[x]) return;
	int mid = (xl + xr) / 2, l = 2 * x, r = l + 1;
	apply(l, xl, mid, lazy[x]);
	apply(r, mid, xr, lazy[x]);
	lazy[x] = 0;
}

void upd(int x, int xl, int xr, int ql, int qr, char q){
	if (xl >= qr || xr <= ql) return;

	if (xl >= ql && xr <= qr){
		apply(x, xl, xr, q);
		return;
	}

	relax(x, xl, xr);
	int mid = (xl + xr) / 2, l = 2 * x, r = l + 1;
	upd(l, xl, mid, ql, qr, q);
	upd(r, mid, xr, ql, qr, q);
	merge(c[x], f[x], ::l[x], c[l], f[l], ::l[l], c[r], f[r], ::l[r]);
}

int p[12], n, m, k;

inline int get(string s){
	for (int i = 0; i < k; i++)
		p[ s[i] - 'a' ] = i;

	int ans = 0;
	for (int i = 0; i < 12; i++)
		for (int j = 0; j < 12; j++)
			if (p[j] <= p[i]) ans += c[1][i][j];

	return ans;
}

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	cin >> n >> m >> k;

	apply(1, 0, n, 'a');
	string s; cin >> s;
	for (int i = 0; i < n; i++) upd(1, 0, n, i, i + 1, s[i]);

	while(m--){
		int t; cin >> t;
		
		if (t == 1){
			int l, r; char c; cin >> l >> r >> c;
			l--;
			upd(1, 0, n, l, r, c);
		} else {
			string s; cin >> s;
			cout << get(s) + 1 << "\n";
		}


	}
}

