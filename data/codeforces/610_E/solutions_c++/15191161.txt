#include <cstdio>
#include <cstring>
#include <algorithm>
#define lson (u << 1)
#define rson (u << 1 | 1)
using namespace std;
const int maxn = 2e5 + 10;
char T[maxn], P[20];
int n, m, k;
struct Seg{
    int l, r;
    char left, right;
    int lazy;
    int mt[11][11];
}seg[maxn << 2];

void push_up(int u){
    memset(seg[u].mt, 0, sizeof seg[u].mt);
    for(int i = 0; i < k; i++) for(int j = 0; j < k; j++) seg[u].mt[i][j] += seg[lson].mt[i][j] + seg[rson].mt[i][j];
    seg[u].left = seg[lson].left, seg[u].right = seg[rson].right;
    seg[u].mt[seg[lson].right - 'a'][seg[rson].left - 'a']++;
}

void build(int u, int l, int r){
    seg[u].l = l, seg[u].r = r;
    seg[u].left = T[l], seg[u].right = T[r - 1];
    seg[u].lazy = 0;
    memset(seg[u].mt, 0, sizeof seg[u].mt);
    if(r - l < 2) return;
    int mid = (l + r) >> 1;
    build(lson, l, mid), build(rson, mid, r);
    push_up(u);
}

void push_down(int u){
    if(!seg[u].lazy) return;
    memset(seg[lson].mt, 0, sizeof seg[lson].mt);
    memset(seg[rson].mt, 0, sizeof seg[rson].mt);
    seg[lson].mt[seg[u].left - 'a'][seg[u].left - 'a'] = seg[lson].r - seg[lson].l - 1;
    seg[rson].mt[seg[u].left - 'a'][seg[u].left - 'a'] = seg[rson].r - seg[rson].l - 1;
    seg[u].lazy = 0;
    seg[lson].lazy = seg[rson].lazy = 1;
    seg[lson].left = seg[rson].left = seg[lson].right = seg[rson].right = seg[u].left;
}

void cover(int u, int l, int r, int L, int R, char ch){
    if(l == L && r == R){
        memset(seg[u].mt, 0, sizeof seg[u].mt);
        seg[u].left = seg[u].right = ch;
        seg[u].lazy = 1;
        seg[u].mt[ch - 'a'][ch - 'a'] = r - l - 1;
        return;
    }
    push_down(u);
    int mid = (l + r) >> 1;
    if(R <= mid) cover(lson, l, mid, L, R, ch);
    else if(L >= mid) cover(rson, mid, r, L, R, ch);
    else{
        cover(lson, l, mid, L, mid, ch);
        cover(rson, mid, r, mid, R, ch);
    }
    push_up(u);
}

int getAns(){
    int ans = 0;
    for(int i = 0; i < k; i++) for(int j = i + 1; j < k; j++){
        ans += seg[1].mt[P[i] - 'a'][P[j] - 'a'];
    }
    ans = n - ans;
    return ans;
}

int main(){
    //freopen("in.txt", "r", stdin);
    while(~scanf("%d%d%d", &n, &m, &k)){
        scanf("%s", T + 1);
        build(1, 1, n + 1);
        char ch;
        for(int i = 0, op, l, r; i < m; i++){
            scanf("%d", &op);
            if(op == 1){
                scanf("%d%d %c", &l, &r, &ch);
                cover(1, 1, n + 1, l, r + 1, ch);
            }else{
                scanf("%s", P);
                int ans = getAns();
                printf("%d\n", ans);
            }
        }
    }
    return 0;
}
