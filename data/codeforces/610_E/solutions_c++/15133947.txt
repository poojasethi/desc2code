//In the name of God

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstring>
#include <cmath>
using namespace std;
#define left(x) ((x)*2)
#define right(x) (((x)*2)+1)
#define mp make_pair
#define lol long long
const int MAXN=2e5+10;
int seg[MAXN*4][12][12],flag[MAXN*4],st[MAXN*4],en[MAXN*4];

void relax(int s,int e,int ind)
{
  if(flag[ind]==-1)
    return;
  int f=flag[ind],l=left(ind),r=right(ind);
  flag[ind]=-1;
  flag[r]=flag[l]=st[l]=st[r]=en[l]=en[r]=f;
  int mid=(s+e)/2;
  memset(seg[l],0,sizeof seg[l]);
  seg[l][f][f]=mid-s-1;
  memset(seg[r],0,sizeof seg[r]);
  seg[r][f][f]=e-mid-1;
}

void update(int s,int e,int ind)
{
  int mid=(s+e)/2,l=left(ind),r=right(ind);
  st[ind]=st[l];
  en[ind]=en[r];
  for(int i=0;i<12;i++)
    for(int j=0;j<12;j++)
      seg[ind][i][j]=seg[l][i][j]+seg[r][i][j];
  seg[ind][en[l]][st[r]]++;
}

void add(int s,int e,int ind,int x,int y,int v)
{
  if(s>=y or e<=x)
    return;
  if(s>=x and e<=y)
    {
      st[ind]=v;
      en[ind]=v;
      flag[ind]=v;
      memset(seg[ind],0,sizeof seg[ind]);
      seg[ind][v][v]=e-s-1;
      return;
    }
  int mid=(s+e)/2;
  relax(s,e,ind);
  add(s,mid,left(ind),x,y,v);
  add(mid,e,right(ind),x,y,v);
  update(s,e,ind);
}

int main()
{
  ios::sync_with_stdio(false);
  int n,m,k;
  cin>>n>>m>>k;
  memset(flag,-1,sizeof flag);
  memset(st,-1,sizeof st);
  memset(en,-1,sizeof en);
  char c;
  for(int i=0;i<n;i++)
    {
      cin>>c;
      add(0,n,1,i,i+1,c-'a');
    }
  for(int i=0;i<m;i++)
    {
      int t;
      cin>>t;
      if(t==1)
	{
	  int l,r;
	  cin>>l>>r>>c;
	  l--;
	  add(0,n,1,l,r,c-'a');
	}
      else
	{
	  string s;
	  cin>>s;
	  int ans=n;
	  for(int i=0;i<k;i++)
	    for(int j=i+1;j<k;j++)
	      ans-=seg[1][s[i]-'a'][s[j]-'a'];
	  cout<<ans<<'\n';
	}
    }
  return 0;
}
