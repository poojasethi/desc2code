#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<algorithm>
#define N 200010
using namespace std;
char s[N];int S[N];
int n,m,K;


	#define ls son[x][0]
	#define rs son[x][1]
	#define mid ((l+r)/2)
	int son[N<<1][2],cnt_tree,root,cover[N<<1],f[N<<1][10][10],L[N<<1],R[N<<1];

	void update_cover(int x,int v) {
		if (!x) return;
		memset(f[x],0,sizeof(f[x]));
		L[x]=R[x]=v;
		cover[x]=v;
	}
	void pushdown(int x) {
	    if (cover[x]!=-1) {
	    	update_cover(ls,cover[x]);
	    	update_cover(rs,cover[x]);
			cover[x]=-1;
	    }
	}
	void pushup(int x) {
		for (int i=0;i<K;++i) for (int j=0;j<K;++j) f[x][i][j]=f[ls][i][j]+f[rs][i][j];
		L[x]=L[ls],R[x]=R[rs];
		++f[x][R[ls]][L[rs]];
	}

	void fix(int x,int l,int r,int askl,int askr,int v) {
	    pushdown(x);
	    if (askl<=l&&r<=askr) {update_cover(x,v);return;}
	    if (askl<=mid) fix(ls,l,mid,askl,askr,v);
	    if (askr>mid) fix(rs,mid+1,r,askl,askr,v);
	    pushup(x);
	}
	void build(int &x,int l,int r) {
	    x=++cnt_tree;
	    cover[x]=-1;
	    if (l==r) {L[x]=R[x]=s[l]-'a';return;}
	    build(ls,l,mid);
	    build(rs,mid+1,r);
	    pushup(x);
	}
	void fix(int l,int r,int v) {fix(root,0,n-1,l,r,v);}




void run() {
	int l,r;char c[3];
	scanf("%d%d%s",&l,&r,c);--l,--r;
	fix(l,r,c[0]-'a');
}

int main()
{
//	freopen("e.in","r",stdin);
	scanf("%d%d%d%s",&n,&m,&K,s);
	
	
	build(root,0,n-1);
	
//	for (int i=0;i<n-1;++i) ++f[s[i]-'a'][s[i+1]-'a'];


	
	while (m--) {
		int ope;
		scanf("%d",&ope);
		if (ope==1) {run();continue;}
		int ans=n;
		scanf("%s",s);
		for (int i=0;i<K;++i) {
			for (int j=i+1;j<K;++j) {
				ans-=f[root][s[i]-'a'][s[j]-'a'];
			}
		}
		printf("%d\n",ans);
	}
	return 0;
}
