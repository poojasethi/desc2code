#include <bits/stdc++.h> // sherlock_holmes
using namespace std;

#define LL long long int
#define UL unsigned long long int

#define imax INT_MAX
#define imin INT_MIN
#define LLmax LLONG_MAX
#define LLmin LLONG_MIN

#define FOR(i,a,b) for(int i= (int)a; i<= (int)b; i++)
#define rep(i,n) for(int i= int(1); i<= (int)n; i++)
#define FORd(i,a,b,d) for(int i=(int)a; i<= (int)b; i+=(int)d)

#define track1() printf("track 1\n");
#define track2() printf("track 2\n");
#define track3() printf("track 3\n");
#define track4() printf("track 4\n");

#define CLR(a) memset(a,0,sizeof(a));
#define SET(a) memset(a,-1,sizeof(a));

#define sz size()
#define pb(x) push_back(x)
#define mp make_pair
#define ii pair<int,int>
#define ll pair<LL,LL>

#define F first
#define S second
#define gcd(a,b) __gcd(a,b)

#define mod int(1e9 + 7)
#define N int(2e5 + 10)

#define si(a) scanf("%d",&a);

#define VI vector<int>
#define VL vector<LL>
#define VS vector<string>
#define VC vector<char>

LL powm(LL a,int b,int n){LL rm=1;while (b){if (b % 2) { rm = (rm * a) % n; }a = (a * a) % n;b /= 2;}return rm;}

int seg[4*N][10][10]={0}, ts[4*N], layer[4*N], l[4*N], r[4*N], tseg[10][10], tl , tr;
char s[N];

void insert(int n,int it,int f)
{
	l[n] = s[it] - 'a';
	r[n] = s[f] - 'a';
	if( it == f)
		return ;
	int m = (it+f)/2;
	insert(n*2,it,m);
	insert(n*2+1,m+1,f);
	for(int i=it;i<f;++i)
		seg[n][s[i]-'a'][s[i+1]-'a']++;
}

void update(int n,int it,int f,int q1,int q2,int ch)
{
	if(it==q1 && f==q2){
		layer[n] = ch;
		CLR(seg[n]);
		seg[n][ch][ch] = f - it;
		l[n] = r[n] = ch;
		return ;
	}

	int m = (it+f)/2, ln = n * 2, rn;
	rn = ln + 1;

	if( layer[n] != -1){
		layer[ln] = layer[n];
		l[ln] = r[ln] = layer[n];
		CLR(seg[ln]);
		seg[ln][layer[n]][layer[n]] = m - it;

		layer[rn] = layer[n];
		l[rn] = r[rn] = layer[n];
		CLR(seg[rn]);
		seg[rn][layer[n]][layer[n]] = f - m - 1;
	}
	layer[n] = -1;

	if( q2 <= m)
		update(ln,it,m,q1,q2,ch);
	else if(q1>m)
		update(rn,m+1,f,q1,q2,ch);
	else{
		update(ln,it,m,q1,m,ch);
		update(rn,m+1,f,m+1,q2,ch);
	}
//	ts[n] = 0;
	for(int i=0;i<10;++i)
		for(int j=0;j<10;++j)
			seg[n][i][j] = seg[ln][i][j] + seg[rn][i][j];
	seg[n][r[ln]][l[rn]]++;
	l[n] = l[ln];
	r[n] = r[rn];
}

char perm[N];
int rank[100];

int main()
{
	SET(layer);
	CLR(ts);
	char c;
	int le,ri,k,m,n;

	cin >> n >> m >> k;
	cin >> s;
	for(int i=n;i>=1;i--)
		s[i] = s[i-1];

	insert(1,1,n);
	int otype, ans, nn;
	while(m--){
		cin >> otype;
		if( otype == 1){
			cin >> le >> ri >> c;
			update(1,1,n,le,ri,c-'a');
		}
		else{
			cin >> perm;
			nn = strlen(perm);
			for(int i=1;i<=nn;++i){
				rank[perm[i-1]-'a'] = i;
			}
			ans  = 1;
			for(int i=0;i<10;++i){
				for(int j=0;j<10;++j){
					if( rank[j] <= rank[i]){
						ans += seg[1][i][j];
					}
				}
			}
			printf("%d\n",ans);
		}
	}

	return 0;
}
