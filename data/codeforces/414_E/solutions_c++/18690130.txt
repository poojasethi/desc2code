
#define MAXN 200010UL
#include <cstdio>
#include <vector>
#define INF 1e9
#define L(x) ch[x][0]
#define R(x) ch[x][1]

using namespace std;

int n, m, num, hd, Root, dep, mh[MAXN], sta[MAXN], siz[MAXN], ad[MAXN], mx[MAXN], tr[MAXN], w[MAXN], fa[MAXN], mn[MAXN], val[MAXN], st[MAXN], ed[MAXN], ch[MAXN][2];

vector <int> G[MAXN];

void Dfs(int x) {
	st[x] = ++ num, val[num] = ++ dep, tr[num] = x;
	for(int i = 0, r = G[x].size() ; i < r ; ++ i) Dfs(G[x][i]);
	ed[x] = ++ num, val[num] = dep --, tr[num] = x;
	mh[st[x]] = ed[x];
	return;
}

void Update(int x) {
	if(!x) return;
	siz[x] = siz[L(x)]+siz[R(x)]+1;
	mn[x] = mx[x] = w[x];
	if(L(x)) mn[x] = min(mn[x], mn[L(x)]), mx[x] = max(mx[x], mx[L(x)]);
	if(R(x)) mn[x] = min(mn[x], mn[R(x)]), mx[x] = max(mx[x], mx[R(x)]);
	return;
}

void Build(int l, int r, int &rt) {
	if(l>r) return;
	int mid = (l+r)>>1;
	w[rt = mid] = val[mid];
//	printf("w[%d] = %d\n", rt, w[rt]);
	Build(l, mid-1, L(rt)), Build(mid+1, r, R(rt));
	if(L(rt)) fa[L(rt)] = rt;
	if(R(rt)) fa[R(rt)] = rt;
	Update(rt);
	return;
}

void Rotate(int x, int k) {
	int y = ch[x][k^1];
	ch[x][k^1] = ch[y][k];
	ch[y][k] = x;
	fa[ch[x][k^1]] = x;
	if(L(fa[x])==x) L(fa[x]) = y;
	else if(R(fa[x])==x) R(fa[x]) = y;
	fa[y] = fa[x], fa[x] = y;
	Update(x);
	return;
}

void Mark(int x, int k) {
	if(!x) return;
//	printf("x = %d k = %d\n", x, k);
	ad[x] += k;
	w[x] += k, mn[x] += k, mx[x] += k;
	return;
}

void Push_down(int x) {
	if(!x||ad[x]==0) return;
	Mark(L(x), ad[x]), Mark(R(x), ad[x]);
	ad[x] = 0;
	return;
}

void Splay(int p, int gl) {
//	printf("p = %d gl = %d\n", p, gl);
	sta[++ hd] = p;
	for(int i = p ; fa[i] != gl ; i = fa[i]) sta[++ hd] = fa[i];
	while(hd) Push_down(sta[hd --]);
	while(fa[p]!=gl) {
		int x = fa[p], y = fa[x];
		if(fa[x]==gl) Rotate(x, L(x)==p);
		else {
			if((L(x)==p)==(L(y)==x)) Rotate(y, L(y)==x), Rotate(x, L(x)==p);
			else Rotate(x, L(x)==p), Rotate(y, L(y)==p);
		}
	}
	Update(p);
	if(gl==0) Root = p;
	return;
}

int Find(int x) {
	Splay(x, 0);
	return siz[L(x)]+1;
}

int Get_dis(int x, int y) {
	if(Find(st[x])>Find(st[y])) swap(x, y);
	Splay(st[x], 0), Splay(st[y], Root);
	int t= L(st[y])?mn[L(st[y])]-1:INF;
	int Min = min(t, min(w[st[y]], w[st[x]]));
//	printf("Min = %d %d %d %d\n", Min, L(ed[y]), w[L(L(ed[y]))], R(L(ed[y])));
	int x1 = w[st[x]];
	Splay(st[y], 0);
	int x2 = w[st[y]];
	return x1+x2-2*Min;
}

int Get(int rt, int k) {
	int x = rt;
	while(true) {
		Push_down(x);
//		printf("x = %d %d\n", x, w[x]);
		if(R(x)&&mn[R(x)]<=k&&mx[R(x)]>=k) x = R(x);
		else if(w[x]==k) return x;
		else x = L(x);
	}
}

int Get_pos(int k) {
	int nw = Root;
	while(true) {
		Push_down(nw);
		if(siz[L(nw)]+1==k) return nw;
		if(siz[L(nw)]+1>k) nw = L(nw);
		else k -= siz[L(nw)]+1, nw = R(nw);
	}
}

void Change(int x, int y) {
	Splay(st[x], 0);
	int pr = Get(L(st[x]), w[st[x]]-y);
	pr = mh[pr];
	Splay(ed[x], Root);
	int nw = L(Root);
	while(R(nw)) nw = R(nw);
	Splay(nw, Root);
	R(nw) = R(ed[x]), Update(nw);
	fa[R(ed[x])] = nw, fa[nw] = 0, Root = nw;
	R(ed[x]) = 0, Update(ed[x]);
	L(st[x]) = 0, Update(st[x]);
	Splay(Get_pos(Find(pr)-1), 0), Splay(pr, Root);
	L(pr) = st[x], fa[st[x]] = pr;
//	printf("pr = %d\n", pr);
	Mark(st[x], 1-y);
	Update(pr), Update(Root);
	return;
}

int main() {
	int x, y, typ;
	scanf("%d%d", &n, &m);
	for(int i = 1 ; i <= n ; ++ i) {
		scanf("%d", &x);
		for(int j = 1 ; j <= x ; ++ j) scanf("%d", &y), G[i].push_back(y);
	}
	Dfs(1), Build(1, num, Root);
//	puts("Yes");
	for(int i = 1 ; i <= m ; ++ i) {
		scanf("%d", &typ);
		if(typ==1) scanf("%d%d", &x, &y), printf("%d\n", Get_dis(x, y));
		else if(typ==2) scanf("%d%d", &x, &y), Change(x, y);
		else if(typ==3) scanf("%d", &x), printf("%d\n", tr[Get(Root, x+1)]);
	}
//	while(1);
	return 0;
}
