#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<vector>
#define N 220000
using namespace std;
struct Splay{
	int l,r,fa,maxdep,mindep,dep,sign;
}t[N];
vector<int> E[N];
int tim,dfn[N],dfn2[N],qn,q[N],root,n,m,i,x,y,k,j,type,ans,pos[N],cnt;
void dfs(int x,int dep){
	dfn[x]=++tim;
	pos[tim]=x;
	t[tim].dep=dep;
	for(int i=0;i<E[x].size();++i)
		dfs(E[x][i],dep+1);
	dfn2[x]=++tim;
	pos[tim]=x;
	t[tim].dep=dep;
}
void renew(int p){
	int x=t[p].l,y=t[p].r;
	t[p].maxdep=max(t[p].dep,max(t[x].maxdep,t[y].maxdep));
	t[p].mindep=min(t[p].dep,min(t[x].mindep,t[y].mindep));
}
void modify(int p,int v){
	if(!p)return;
	t[p].sign+=v;
	t[p].maxdep+=v;
	t[p].mindep+=v;
	t[p].dep+=v;
}
void updata(int p){
	int x=t[p].l,y=t[p].r;
	if(t[p].sign){
		modify(x,t[p].sign);
		modify(y,t[p].sign);
		t[p].sign=0;
	}
}
void left(int p){
	int y=t[p].fa,x=t[y].fa;
	t[p].fa=x; t[y].fa=p; t[t[p].l].fa=y;
	t[y].r=t[p].l; t[p].l=y;
	renew(y); renew(p);
	if(t[x].l==y)t[x].l=p;
	if(t[x].r==y)t[x].r=p;
}
void right(int p){
	int y=t[p].fa,x=t[y].fa;
	t[p].fa=x; t[y].fa=p; t[t[p].r].fa=y;
	t[y].l=t[p].r; t[p].r=y;
	renew(y); renew(p);
	if(t[x].l==y)t[x].l=p;
	if(t[x].r==y)t[x].r=p;
}
void splay(int p,int rt){
	int x,y;
	qn=0;
	for(x=p;x!=rt;x=t[x].fa)q[++qn]=x;
	for(x=qn;x>=1;--x)updata(q[x]);
	while(t[p].fa!=rt){
		y=t[p].fa; x=t[y].fa;
		if(x==rt){
			if(t[y].l==p)right(p);
			else left(p);
			break;
		}
		if(t[x].l==y){
			if(t[y].l==p)right(y),right(p);
			else left(p),right(p);
		}else{
			if(t[y].l==p)right(p),left(p);
			else left(y),left(p);
		}
	}
	if(!rt)root=p;
}
int Find(int p,int x){
	updata(p);
	if(t[t[p].r].maxdep>=x && t[t[p].r].mindep<=x)return Find(t[p].r,x);
	if(t[p].dep==x)return p;
	return Find(t[p].l,x);
}
void debug(int p){
	updata(p);
	if(t[p].l)debug(t[p].l);
	printf("%d ",t[p].dep);
	if(t[p].r)debug(t[p].r);
}
int main(){
	t[0].mindep=1<<30;
	t[0].maxdep=-1<<30;
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;++i){
		scanf("%d",&k);
		for(j=1;j<=k;++j)scanf("%d",&x),E[i].push_back(x);
	}
	dfs(1,0);
	root=1;
	for(i=1;i<tim;++i)t[i].r=i+1,t[i+1].fa=i;
	for(i=tim;i>=1;--i)renew(i);
	for(i=max(1,tim/2);i<=tim;++i)splay(i,0);
	for(i=1;i<=m;++i){
		scanf("%d",&type);
		if(type==1){
			scanf("%d%d",&x,&y);
			if(x==y){
				ans=0;
			}else{
				x=dfn[x]; y=dfn[y];
				splay(x,0); splay(y,x);
				int xx=t[x].dep,yy=t[y].dep,dd;
				if(t[x].l==y)dd=t[t[y].r].mindep;
				if(t[x].r==y)dd=t[t[y].l].mindep;
				dd=min(dd-1,min(xx,yy));
				ans=xx+yy-2*dd;
			}
		}
		if(type==2){
			scanf("%d%d",&x,&y);
			int ll,rr;
			
			splay(dfn[x],0);
			ll=t[root].l;
			while(t[ll].r)ll=t[ll].r;
			splay(dfn2[x],0);
			rr=t[root].r;
			while(t[rr].l)rr=t[rr].l;
			
			splay(dfn[x],0);
			int p=Find(t[dfn[x]].l,t[dfn[x]].dep-y);
			splay(ll,0); splay(rr,ll);
			int u=t[rr].l;
			t[u].fa=0; t[rr].l=0; renew(rr); renew(ll);
			modify(u,-y+1);
			p=dfn2[pos[p]];
			splay(p,0);
			int tmp=t[p].l;
			while(t[tmp].r)tmp=t[tmp].r;
			splay(tmp,p);
			t[u].fa=tmp; t[tmp].r=u; renew(tmp); renew(p);
		}
		if(type==3){
			scanf("%d",&x);
			ans=pos[Find(root,x)];
		}
		if(type!=2)printf("%d\n",ans);
	}
}
