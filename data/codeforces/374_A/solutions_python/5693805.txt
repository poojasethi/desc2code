import os,sys
####Inna and Pink Pony: 374A http://codeforces.com/problemset/problem/374/A

###Dima and Inna are doing so great! At the moment, Inna is sitting on the magic lawn playing with a pink pony. Dima wanted to play too. He brought an n*m chessboard, a very tasty candy and two numbers a and b.
###Dima put the chessboard in front of Inna and placed the candy in position (i,j) on the board. The boy said he would give the candy if it reaches one of the corner cells of the board. He's got one more condition. There can only be actions of the following types:
###move the candy from position (x,y) on the board to position (x-a,y-b);
###move the candy from position (x,y) on the board to position (x-a,y+b);
###move the candy from position (x,y) on the board to position (x+a,y-b);
###move the candy from position (x,y) on the board to position (x+a,y+b);

###Naturally, Dima doesn't allow to move the candy beyond the chessboard borders.
###nna and the pony started shifting the candy around the board. They wonder what is the minimum number of allowed actions that they need to perform to move the candy from the initial position (i,j) to one of the chessboard corners. Help them cope with the task!

###input 
###The first line of the input contains six integers n,m,i,j,a,b
###You can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right.
###The corner are (1,m), (n,1), (n,m), (1,1)

###output
###In a single line print a single integer  -- the minimum number of moves needed to get the candy.
###If Inna and the pony cannot get the candy playing by Dima's rules, print on a single line "Poor Inna and pony!" without the quotes.

##solve2: directly greedy
def run2():
    n, m, i, j, a, b = map(int, raw_input().split())

    corners = [(1,m), (n,1), (n,m), (1,1)]
    minStep = sys.maxint
    for (x,y) in corners:
        dx, dy = abs(x-i), abs(y-j)
        if 0 == dx+dy:
            print 0
            return
        if 0==dx%a and 0==dy%b and (dx/a)%2==(dy/b)%2:
            minStep = min(minStep, max(dx/a,dy/b))
    if minStep == sys.maxint or max(n-i,i-1)<a or max(m-j,j-1)<b:###rule out the case that n=i=1 or m=j=1
        print "Poor Inna and pony!"
    else:
        print minStep
    return

###solve: bfs
def run():
    n, m, i, j, a, b = map(int, raw_input().split())

    visited = [[0 for y in range(m+1)] for x in range(n+1)]
    corners = [(1,m), (n,1), (n,m), (1,1)]
    depths = list()
    que = list()

    if (i,j) in corners:
        print 0
        return
    que.append((i,j))
    depths.append(0)
    visited[i][j] = 1
    ###bfs
    while len(que) > 0:
        curPos = que.pop(0)
        curDpth = depths.pop(0)
        x = curPos[0]
        y = curPos[1]
        for pos in [(x-a,y-b), (x+a,y-b), (x-a,y+b), (x+a,y+b)]:
            if pos[0]<1 or pos[1]<1 or pos[0]>n or pos[1]>m or 1 == visited[pos[0]][pos[1]]:
                continue
            if pos in corners:
                print curDpth+1
                return
            visited[pos[0]][pos[1]] = 1
            que.append(pos)
            depths.append(curDpth+1)
    print "Poor Inna and pony!"
    return
################################################################################
run2()
