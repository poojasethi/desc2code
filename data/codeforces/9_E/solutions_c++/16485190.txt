#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
using namespace std;
#define N 51
int deg[N], to[N], len[N];
bool vis[N] = {false};
struct node {
    int x, y;
    node(int _x  = 0, int _y = 0):x(_x),y(_y){}
    bool operator < (const node& a) const {
        return x > a.x;
    }
};
int main () {
    int n, m, u, v, l, r, cnt = 0;
    bool judge = false;
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; ++i) to[i] = i, len[i] = 1;
    while (m--) {
        scanf("%d%d", &u, &v);
        judge |= (++deg[u] > 2) | (++deg[v] > 2) | (u == v && n > 1) | (to[u] == v && len[u] < n);
        l = to[u], r = to[v];
        to[to[l] = r] = l;
        len[l] = len[r] = len[u] + len[v];
        if (u == v || l != u) vis[u] = true;
        if (u == v || r != v) vis[v] = true;
    }
    if (judge) {
        puts("NO");
        return 0;
    }
    priority_queue<node> q;
    for (int i = 1; i <= n; ++i) {
        if (!vis[i]) {
            if (to[i] > i) q.push(node(i, to[i]));
            else q.push(node(to[i], i));
            vis[i] = vis[to[i]] = true;
            ++cnt;
        }
    }
    printf("YES\n%d\n", cnt);
    node a, b;
    while (cnt--) {
        a = q.top(); q.pop();
        if (cnt) {
            b = q.top(); q.pop();
            printf("%d %d\n", a.x, b.x);
            q.push(node(min(a.y, b.y), max(a.y, b.y)));
        }
        else printf("%d %d\n", a.x, a.y);
    }
    return 0;
}