
#include <iostream>
#include <cstdio>
#include <cstring>

using namespace std;

const int maxn = 101;
int n, m, tot, set[maxn], deg[maxn], l[maxn], used[maxn];

void init_set() {
	for (int i = 1; i <= n; ++i) {
		set[i] = i;
	}
	tot = n;
}

int find_set(int x) {
	if (set[x] != x) {
		set[x] = find_set(set[x]);
	}
	return set[x];
}

bool union_set(int u, int v) {
	u = find_set(u), v = find_set(v);
	if (u != v) {
		set[u] = v, --tot;
		return true;
	}
	return (tot == 1 ? true : false);
}

int main() {
	int u, v;
	scanf("%d%d", &n, &m);
	init_set();
	while (m--) {
		scanf("%d%d", &u, &v);
		if (++deg[u] > 2 || ++deg[v] > 2 || !union_set(u, v)) {
			puts("NO");
			return 0;
		}
	}
	m = 0;
	for (int i = 1; i <= n; ++i) {
		if (deg[i] == 0) l[++m] = i, l[++m] = i;
		if (deg[i] == 1) l[++m] = i;
	}
	puts("YES");
	printf("%d\n", m / 2);
	for (int i = 1; i <= m; ++i) {
		if (!used[i]) {
			int j = i + 1;
			while (j <= m && (used[j] || find_set(l[i]) == find_set(l[j]))) {
				++j;
			}
			if (j == m + 1) {
				union_set(l[i], l[m]);
				used[i] = used[m] = true;
				printf("%d %d\n", l[i], l[m]);
			} else {
				union_set(l[i], l[j]);
				used[i] = used[j] = true;
				printf("%d %d\n", l[i], l[j]);
			}
		}
	}
	return 0;
}
