#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

#define pb push_back
#define sz(c) (int)(c).size()          
#define mp make_pair
#define forn(i,n) for(int i=0;i<(int)n;++i)
#define X first
#define Y second

int p[50],c[50][50],deg[50],n,m,a,b,comp;
int get(int x)
{
  if (p[x]==x) 
    return x;
  return p[x]=get(p[x]);
}
void merge(int a, int b)
{
  int x=get(a); int y=get(b);
  p[x]=y;
}

int main()
{
  scanf("%d%d",&n,&m);
  forn(i,n)
    p[i]=i;
  forn(i,m)
  {
    scanf("%d%d",&a,&b);
    a--,b--;
    c[a][b]++;
    c[b][a]++;
    deg[a]++;
    deg[b]++;
    merge(a,b);
  }

  bool bad=false,add=true;
  vector<pair<int,int> > v;

  while (add)
  { 
    add=false;
    forn(i,n)
      forn(j,n)
      {
        if (add)
          break;
        if ((i!=j || n==1) && deg[i]<2 && deg[j]<2 && (!c[i][j] || n==2) && (get(i)!=get(j) || m==n-1))
        {
          c[i][j]++;
          c[j][i]++;
          deg[i]++;
          deg[j]++;
          merge(i,j);
          v.pb(mp(i+1,j+1));
          m++;
          add=true;
        }
      }
  }

  forn(i,n)
    bad|=deg[i]!=2,
    comp+=p[i]==i;

  if (comp>1 || bad)
    printf("NO\n");
  else
  {
    printf("YES\n%d\n",sz(v));
    forn(i,sz(v))
      printf("%d %d\n",v[i].X,v[i].Y);
  }
  return 0;
}
