#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>

using namespace std;

const int kMaxN = 50;
int n, m, d[kMaxN];

struct DisjointSet {
	int root[kMaxN];
	void init(int sz) {
		for (int i = 0; i < sz; ++ i) root[i] = i;
	}
	int get_root(int x) {
		return x == root[x] ? x : root[x] = get_root(root[x]);
	}
	int set_union(int x, int y) {
		x = get_root(x);
		y = get_root(y);
		if (x == y) return 0;
		root[x] = y;
		return 1;
	}
} ds;

int main() {
	scanf("%d%d", &n, &m);
	ds.init(n);
	int cnt = 0;
	for (int u, v, i = 0; i < m; ++ i) {
		scanf("%d%d", &u, &v);
		u --, v --;
		cnt += !ds.set_union(u, v);
		d[u] ++, d[v] ++;
	}
	if ((*max_element(d, d + n) > 2) || (cnt > 1) || (cnt == 1 && m != n)) printf("NO\n");
	else {
		printf("YES\n%d\n", n - m);
		while (m < n) {
			int u = -1;
			for (int i = 0; i < n; ++ i)
				if (d[i] <= 1) {
					u = i;
					break;
				}
			int v = -1;
			for (int i = 0; i < n; ++ i)
				if (d[i] <= 1 && ds.get_root(i) != ds.get_root(u)) {
					v = i;
					break;
				}
			if (v == -1) {
				for (int i = 0; i < n; ++ i)
					if (d[i] <= 1 && i != u) {
						v = i;
						break;
					}
			}
			if (v == -1) v ++;
			printf("%d %d\n", u + 1, v + 1);
			d[u] ++, d[v] ++;
			ds.set_union(u, v);
			++ m;
		}
	}
	return 0;
}