#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>

using namespace std;

class union_find
{
public:
	std::vector<int> parent;
	union_find(int n){
		parent.resize(n+1);
		for(int i=0;i<=n;i++){
			parent[i]=i;
		}
	}
	int get_parent(int n){
		if(n==parent[n]) return n;
		else return parent[n] = get_parent(parent[n]);
	}
	void connect(int a, int b){
		a = get_parent(a);
		b = get_parent(b);
		if(a<b) parent[b]=a;
		else parent[a]=b;
	}
};

int main(){
	int n,m;
	cin>>n>>m;
	if(n<m){
		cout<<"NO\n";
		return 0;
	}
	vector<int> deg(n+1,0);
	union_find uf(n);
	bool loop=false;
	bool precycle=false;
	for(int i=0;i<m;i++){
		int a,b;
		cin>>a>>b;
		if(a==b) loop= true;
		if(uf.get_parent(a)==uf.get_parent(b)) precycle=true;
		uf.connect(a,b);
		deg[a]++;
		deg[b]++;
	}
	if(n>1 && loop || n!=m && precycle){
		cout<<"NO\n";
		return 0;
	}
	for(int i=1;i<=n;i++){
		if(deg[i]>2){
			cout<<"NO\n";
			return 0;
		}
	}
	vector<pair<int, int> >ans;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			if(i==j) continue;
			if(deg[i]<2 && deg[j]<2 && uf.get_parent(i) != uf.get_parent(j)){
				ans.push_back(pair<int,int>(i,j));
				uf.connect(i,j);
				deg[i]++;
				deg[j]++;
			}
		}
	}
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			if(n>1 && i==j) continue;
			if(deg[i]<2 && deg[j]<2){
				ans.push_back(pair<int,int>(i,j));
				deg[i]++;
				deg[j]++;
				break;
			}
		}
	}
	sort(ans.begin(), ans.end());
	cout<<"YES\n";
	cout<<ans.size()<<'\n';
	for(int i=0;i<ans.size();i++){
		cout<<ans[i].first<<' '<<ans[i].second<<'\n';
	}
	return 0;
}