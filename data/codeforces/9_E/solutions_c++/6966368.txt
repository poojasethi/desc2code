#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const int N = 55;
const int MAXN = 2510;

int n , m;
int degree[N];
int father[N];

struct Edge{
	int x;
	int y;
};
Edge e[MAXN];

int find(int x){
	if(x != father[x])
		father[x] = find(father[x]);
	return father[x];
}

bool unionSet(int x , int y , int ans){
	int fx = find(x);
	int fy = find(y);
	if(fx != fy){
		father[fx] = fy;
		return true;
	}
	return (ans + m + 1 == n);
}

bool check(){
	int root = find(1);
	for(int i = 1 ; i <= n ; i++)
		if(degree[i] != 2 || find(i) != root)
			return false;
	return true;
}

void solve(){
	if(n == 1){
		if(m == 0) printf("YES\n1\n1 1\n");
		else printf("YES\n0\n");
		return;
	}
	int ans = 0;

	for(int i = 1 ; i <= n ; i++){
		for(int j = 1 ; degree[i] < 2 && j <= n ; j++){
			if(i != j && degree[j] < 2){
				if(unionSet(i , j , ans) == false) continue;
				degree[i]++ ; degree[j]++;
				e[ans].x = i; e[ans].y = j;
				ans ++;
			}
		}
	}
	if(!check()){
		puts("NO");
		return;
	}
	puts("YES");
	printf("%d\n" , ans);
    for(int i = 0 ; i < ans ; i++)
		printf("%d %d\n" , min(e[i].x,e[i].y) , max(e[i].x , e[i].y));
}

int main(){
	int x , y;
	scanf("%d%d" , &n , &m);
	bool flag = true;
	for(int i = 1 ; i <= n ; i++) father[i] = i;
	
	for(int i = 0 ; i < m ; i++){
		scanf("%d%d" , &x , &y);
		if(x > y) swap(x , y);
		unionSet(x , y , 0);
		degree[x]++ ; degree[y]++;
		if(degree[x] > 2 || degree[y] > 2)
			flag = false;
	}
	if(flag) solve();
	else puts("NO");

    return 0;
}
		   	 	  		      		 		