#include <iostream>
#include <vector>
#include <map>
#include <utility>
#include <algorithm>
#include <string>
#include <set>

using namespace std;

int main() {
	int n, m;
	cin >> n >> m;
	
	vector<int> comp;
	vector<int> deg;
	for (int i = 0; i < n; i++) {
		comp.push_back(i);
		deg.push_back(0);
	}
	
	int x, y;
	bool cycle = false;
	for (int e = 0; e < m; e++) {
		cin >> x >> y;
		x--; y--;
		if (comp[x] == comp[y]) {
			cycle = true;
		} else {
			int tmp = comp[y];
			for (int i = 0; i < n; i++) if (comp[i] == tmp) comp[i] = comp[x];
		}
		deg[x]++;
		deg[y]++;
	}
	
	if (cycle) {
		for (int i = 0; i < n; i++) if (deg[i] != 2 || comp[i] != comp[0]) {
			cout<< "NO" << endl;
			return 0;
		}
		cout << "YES" << endl << 0 << endl;
		return 0;
	}
	
	if (m >= n) {
		cout << "NO" << endl;
		return 0;
	}
	
	for (int i = 0; i < n; i++) if (deg[i] > 2) {
		cout << "NO" << endl;
		return 0;
	}
	
	cout << "YES" << endl << n-m << endl;
	
	int i = 0;
	while (i < n) {
		if (deg[i] == 2) {
			i++;
			continue;
		}
		bool found = false;
		for (int j = i + 1; j < n; j++) {
			if (comp[i] != comp[j] && deg[j] < 2) {
				cout << i+1 << " " << j+1 << endl;
				deg[i]++;
				deg[j]++;
				int tmp = comp[j];
				for (int k = 0; k < n; k++) if (comp[k] == tmp) comp[k] = comp[i];
				found = true;
				break;
			}
		}
		if (!found) {
			for (int j = i+1; j < n; j++) if (deg[j] < 2) {
				cout << i+1 << " " << j+1 << endl;
				return 0;
			}
			cout << i+1 << " " << i+1 << endl;
			return 0;
		}
	}

	cout << "err";
	return 0;
}
