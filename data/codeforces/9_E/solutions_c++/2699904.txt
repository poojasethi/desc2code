//By Lin
#include<cstdio>
#include<cstring>
#include<queue>
#include<vector>
#define maxn 55
using namespace std;

int     d[maxn],n,m,x,y;
int     p[maxn],data[maxn*2],cnt;
vector<pair<int,int> > out;
int     Find(int x){
    if ( p[x] != x ) p[x] = Find(p[x]);
    return p[x];
}

bool    solve(){
    for (int i = 1; i<=n; i++) if ( d[i]>2 ) return false;
    cnt = 0; 
    for (int i = 1; i<=n; i++) 
        for (int k = d[i]; k<2; k++) data[cnt++] = i; 
    while ( cnt > 2 ){
        bool flag  = true;
        for (int j = 1; j<cnt; j++)
            if ( Find(data[0]) != Find(data[j]) ){
//              printf("%d %d\n" , data[0], data[j] );
                out.push_back(make_pair(data[0],data[j]));
                p[Find(data[0])] = Find(data[j]);
                for (int k = 1; k<j; k++) data[k-1] = data[k];
                for (int k =j+1;k<cnt;k++) data[k-2] = data[k];
                cnt-=2;
                flag = false;
                break;
            }
        if ( flag ) return false;
    }
    if ( cnt == 2 ) out.push_back(make_pair(data[0],data[1]));
    for (int i = 1; i<=n; i++)
        if ( Find(i) != Find(1) ) return false;
    return true;
}
int     main(){
    scanf("%d%d", &n, &m );
    for (int i = 1; i<=n; i++) p[i] = i;
    while ( m -- ) {
        scanf("%d%d", &x, &y );
        d[x]++, d[y]++;
        p[Find(x)] = Find(y);
    }
    if ( !solve() ) printf("NO\n");
    else {
        printf("YES\n%d\n" , (int)out.size() );
        for (int i = 0; i<out.size(); i++) printf("%d %d\n",out[i].first,out[i].second );
    }
}
