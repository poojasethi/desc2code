#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;
#define pb push_back
#define sz(c) (int)(c).size()          
#define forn(i,n) for(int i=0;i<(int)n;++i)
int p[50],c[50][50],deg[50],n,m,a,b,comp,bad,add=true;
int get(int x){return (p[x]==x)?x:p[x]=get(p[x]);}
void merge(int a, int b){p[get(a)]=get(b);}
void edge(int a, int b)
{
  c[a][b]++; c[b][a]++;
  deg[a]++;  deg[b]++;
  merge(a,b);
}

int main()
{
  scanf("%d%d",&n,&m);
  forn(i,n)
    p[i]=i;
  forn(i,m)
  {
    scanf("%d%d",&a,&b);
    edge(a-1,b-1);
  }
  vector<int> vx,vy;
  while (add)
  { 
    add=false;
    forn(i,n)
      forn(j,n)
      {
        if (add)
          break;
        if ((i!=j || n==1) && deg[i]<2 && deg[j]<2 && (!c[i][j] || n==2) && (get(i)!=get(j) || m==n-1))
        {
          edge(i,j);
          vx.pb(i+1);
          vy.pb(j+1);
          m++;
          add=true;
        }
      }
  }
  forn(i,n)
    bad|=deg[i]!=2,
    comp+=p[i]==i;

  if (comp>1 || bad)
    printf("NO\n");
  else
  {
    printf("YES\n%d\n",sz(vx));
    forn(i,sz(vx))
      printf("%d %d\n",vx[i],vy[i]);
  }
  return 0;
}
