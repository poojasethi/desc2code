#include <cstdio>
#include <cstring>
#include <cstdlib>

const int maxn	=	55;
const int maxm	=	10000;

struct node
{
	int a,b;
}edge[maxm];

int father[maxn],degree[maxn];

inline int find(int x)
{
	if (father[x]==x) return x;
	return father[x]=find(father[x]);
}

inline bool check(int m,int n)
{
	for (int i=0;i<n;++i){
		degree[i]=0;
		father[i]=i;
	}
	for (int i=0;i<m;++i){
		++degree[edge[i].a];
		++degree[edge[i].b];
		father[find(edge[i].a)]=find(father[edge[i].b]);
	}
	
	for (int i=0;i<n;++i){
		if (i==find(i)){
			int cnt=0,c[3]={0,0,0};
			for (int j=0;j<n;++j){
				if (find(j)==i){
					if (degree[j]>2) return false;
					++c[degree[j]];
					++cnt;
				}
			}
			if (cnt<n && cnt>1){
				if (c[1]!=2) return false;
			}
			if (cnt==1 && n!=1){
				if (degree[i]) return false;
			}
		}
	}
	
	return true;
}

int main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	for (int i=0;i<m;++i){
		scanf("%d%d",&edge[i].a,&edge[i].b);
		--edge[i].a;
		--edge[i].b;
	}
	
	if (!check(m,n)){
		puts("NO");
	}else{
		puts("YES");
		int start=m;
		for (int i=0;i<n;++i){
			for (int j=i;j<n;++j){
				edge[m].a=i;edge[m++].b=j;
				if (!check(m,n)){
					--m;
				}
				edge[m].a=i;edge[m++].b=j;
				if (!check(m,n)){
					--m;
				}
			}
		}
		printf("%d\n",m-start);
		for (int i=start;i<m;++i){
			printf("%d %d\n",edge[i].a+1,edge[i].b+1);
		}
	}
	
	return 0;
}

  	   					  		  	   		   	