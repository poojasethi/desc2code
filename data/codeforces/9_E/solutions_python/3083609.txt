from Queue import PriorityQueue
n, m = map(int, raw_input().split())
graph = [[] for i in xrange(n)]

for i in xrange(m):
    a,b = map(int, raw_input().split())
    a,b = a-1,b-1
    graph[a].append(b)
    graph[b].append(a)

visit = [0 for i in xrange(n)]
flag = True
for i in xrange(n):
    if len(graph[i]) > 2: flag = False

def links(u):
    visit[u] = 1
    if len(graph[u]) == 0: return u
    else: u = graph[u][0]
    while True:
        visit[u] = 1
        if len(graph[u]) == 1: return u #link
        for i in range(len(graph[u])):
            if visit[graph[u][i]] == 0:
                u = graph[u][i]
                break
        else: return -1

def dfs(u):
    visit[u] = 1
    for i in range(len(graph[u])):
        if visit[graph[u][i]] == 0:
            dfs(graph[u][i])
cnt1,cnt2 = 0,0
que = PriorityQueue()
for i in xrange(n):
    if visit[i] == 0 and len(graph[i]) <= 1:
        cnt1 += 1
        b = links(i)
        que.put((min(i,b),(min(i,b),max(i,b))))

for i in xrange(n):
    if visit[i] == 0:
        cnt2 += 1
        dfs(i)

#print cnt1,cnt2
if cnt1+cnt2 > 1 and cnt2 > 0: flag = False
if flag == False:
    print 'NO'
else:
    ans = []
    while que.empty() == False:
        a = que.get()[1]
        if que.empty():
            ans.append((a[0],a[1]))
            break
        else: b = que.get()[1]
        ans.append((a[0],b[0]))
        que.put((min(a[1],b[1]),(min(a[1],b[1]),max(a[1],b[1]))))

    print 'YES'
    print len(ans)
    for i in xrange(len(ans)):
        print ans[i][0]+1,ans[i][1]+1
