from itertools import *

read = lambda: map(int, raw_input().split())

def check_deg():
    for i in xrange(n):
        if deg[i] > 2:
            return False
    return True

def check_cycle():
    def cycle(u):
        mk.add(u)
        for v in xrange(n):
            if g[u][v]:
                g[u][v] -= 1
                g[v][u] -= 1
                if v in mk or cycle(v):
                    return True
        return False

    mk = set()
    cycle_num = 0
    for i in xrange(n):
        if i in mk:
            continue
        if cycle(i):
            cycle_num += 1
    if cycle_num == 1 and deg.count(2) == n:
        return True
    return cycle_num == 0

def root(u):
    global f
    r = u
    while f[r] != r: r = f[r]
    while f[u] != r: f[u], u = r, f[u]
    return r

n, m = read()
g = [[0] * n for i in xrange(n)]
deg = [0] * n
f = range(n)
for i in xrange(m):
    u, v = read()
    u -= 1
    v -= 1
    deg[u] += 1
    deg[v] += 1
    g[u][v] += 1
    g[v][u] += 1
    f[root(u)] = root(v)

if m > n or not check_deg() or not check_cycle():
    print 'NO'
else:
    print 'YES'
    print n - m

    if n == 1 and n - m > 0:
        print '1 1'
        exit(0)

    for i in xrange(n - m):
        for u, v in combinations(xrange(n), 2):
            if deg[u] < 2 and deg[v] < 2 and root(u) != root(v):
                print u + 1, v + 1
                deg[u] += 1
                deg[v] += 1
                f[root(u)] = root(v)
                break
    for u, v in combinations(xrange(n), 2):
        if deg[u] < 2 and deg[v] < 2:
            print u + 1, v + 1
            deg[u] += 1
            deg[v] += 1
