def read():
    nNode,nEdge = map(int,raw_input().split())
    adj = [[] for i in range(nNode)]
    for i in range(nEdge):
        s,t = map(int,raw_input().split())
        s -= 1
        t -= 1
        adj[s].append(t)
        adj[t].append(s)
    return nNode,nEdge,adj


def isCycle(pre,cur,visited,adj):
    if visited[cur]: return True
    visited[cur] = True
    for i in range(len(adj[cur])):
        if adj[cur][i]!=pre and isCycle(cur,adj[cur][i],visited,adj):
            return True
    return False


def work((nNode,nEdge,adj)):
    if nNode==1 and nEdge==0:
        print "YES"
        print 1
        print 1,1
        return

    degree = [0 for i in range(nNode)]
    for i in range(nNode):
        degree[i] = len(adj[i])
        if degree[i]>2:
            print "NO"
            return

    visited = [False for i in range(nNode)]
    
    for i in range(nNode):
        if visited[i]: continue
        if isCycle(-1,i,visited,adj) and (visited!=[True]*nNode or degree!=[2]*nNode):
            print "NO"
            return

    ans = []
    for i in range(nNode):
        for j in range(i+1,nNode):
            for k in range(2):
                if degree[i]<=1 and degree[j]<=1:
                    adj[i].append(j)
                    adj[j].append(i)
                    degree[i] += 1
                    degree[j] += 1
                    visited = [False]*nNode
                    if isCycle(-1,i,visited,adj) and (visited!=[True]*nNode or degree!=[2]*nNode):
                        del adj[i][-1]
                        del adj[j][-1]
                        degree[i] -= 1
                        degree[j] -= 1
                        continue
                    ans.append((i,j))
    
    print "YES"
    print len(ans)
    for i in range(len(ans)):
        print ans[i][0]+1,ans[i][1]+1
        

#for i in range(int(raw_input())):
work(read())
