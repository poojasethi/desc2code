#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstdlib>
long long int INFI=9999999;
using namespace std;
struct Circle
{
	long long int c,r,s,e,num,print; bool del;
}c[10000];
int comp(const void *p,const void *q)
{
	return (*(struct Circle*)q).r > (*(struct Circle*)p).r ? 1 : -1;
}
int comp2(const void *p,const void *q)
{
	return c[(*(int*)p)].e > c[(*(int*)q)].e ? 1 : -1;
}
int f[5000],trace[5000],n,g[5000],pos[5000],inv[5000];
vector<int> vec[5000];
inline void work(int a);
void print(int a);
int main()
{
	//freopen("input.txt","r",stdin);
	int i;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		scanf("%d%d",&c[i].c,&c[i].r);
		c[i].s = c[i].c-c[i].r;
		c[i].e = c[i].c+c[i].r;
		c[i].print = i;
	}
	INFI *= INFI; c[0].s = -INFI; c[0].e = INFI; c[0].r = INFI;
	qsort(c,n+1,sizeof(c[0]),comp);
	for(i=0;i<=n;i++)
		pos[c[i].print] = i;
	for(i=n;i>=0;i--)
		work(i);
	printf("%d\n",g[0]-1);
	print(0);
}
inline void work(int a)
{
	int i,j,opt=0,invs = 0;
	for(i=0;i<=n;i++)
		if(c[a].s <= c[i].s && c[a].e >= c[i].e && i != a)	
		inv[++invs] = i;
	qsort(inv+1,invs,sizeof(int),comp2);
	for(i=1;i<=invs;i++)
	{
		f[i]=g[inv[i]]; trace[i] = 0;
		for(j=1;j<i;j++)
		{
			if(c[inv[j]].e > c[inv[i]].s) break;
			else if(c[inv[j]].e <= c[inv[i]].s && f[j]+g[inv[i]]>f[i])
				f[i] = f[j]+g[inv[i]],trace[i]=j;
		}
	}
	for(i=1,opt=0;i<=invs;i++)
		if(opt==0 || f[i] > f[opt]) opt = i;
	for(;opt;opt=trace[opt])
		g[a] += g[inv[opt]],vec[a].push_back(inv[opt]);
	g[a]++;	
}
void print(int a)
{
	if(a) printf("%d ",c[a].print);
	for(int i=0;i<vec[a].size();i++)
		print(vec[a][i]);
}