#include<cstdio>
#include<algorithm>

void Get(int &T)
{
	char C;bool F=0;
	for(;C=getchar(),C<'0'||C>'9';)if(C=='-')F=1;
	for(T=C-'0';C=getchar(),C>='0'&&C<='9';T=T*10+C-'0');
	F&&(T=-T);
}

int N,M;

int L[2005];
int R[2005];

int *Order[4005];
int OrderTop;

bool Cmp(int *X,int *Y)
{
	return *X<*Y;
}

int OK[4005][4005];

struct Li
{
	int R,Next;
}List[2005];
int Head[4005];
int ListTop;

void Add(int L,int R)
{
	List[++ListTop]=(Li){R,Head[L]};
	Head[L]=ListTop;
}

void Init()
{
	int X,Len;
	
	Get(N);
	for(int i=1;i<=N;i++)
	{
		Get(X);
		Get(Len);
		L[i]=X-Len;
		R[i]=X+Len;
	}
	
	for(int i=1;i<=N;i++)
	{
		Order[++OrderTop]=&L[i];
		Order[++OrderTop]=&R[i];
	}
	
	std::sort(Order+1,Order+OrderTop+1,Cmp);
	
	for(int i=OrderTop;i>=2;i--)
	{
		*Order[i]=(*Order[i]!=*Order[i-1]);
	}
	
	*Order[1]=1;
	
	M=0;
	for(int i=1;i<=OrderTop;i++)
	{
		M+=*Order[i];
		*Order[i]=M;
	}
	
	for(int i=1;i<=N;i++)
	{
		OK[L[i]][R[i]]=i;
		Add(L[i],R[i]);
	}
}

int F[4005][4005];
int S[4005][4005];
bool Need[4005][4005];


void Work()
{
	//printf("%d\n",(sizeof F+sizeof S+sizeof Need+sizeof OK)/1024/1024);
	
	for(int L=1;L<M;L++)
		for(int i=1,j=L+1;j<=M;i++,j++)
		{
			F[i][j]=F[i+1][j];S[i][j]=i+1;
			
			for(int k=Head[i];k;k=List[k].Next)
				if(F[i][j]<F[i][List[k].R]+F[List[k].R][j])
				{
					F[i][j]=F[i][List[k].R]+F[List[k].R][j];
					S[i][j]=List[k].R;
				}
			if(OK[i][j]) F[i][j]++;
		}
}

void Output()
{
	printf("%d\n",F[1][M]);
	Need[1][M]=1;
	for(int L=M-1;L>=1;L--)
		for(int i=1,j=L+1;j<=M;i++,j++)
		{
			if(Need[i][j]==1)
			{
				if(OK[i][j]) printf("%d ",OK[i][j]);
				Need[i][S[i][j]]=Need[S[i][j]][j]=1;
			}
		}
	puts("");
}

int main()
{
	Init();
	Work();
	Output();
	return 0;
}