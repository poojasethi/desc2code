#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

#define pb push_back

const int maxn = 4020;

int pre[maxn][maxn];

int n,ans;
int A[maxn],B[maxn],p[maxn];
int res[maxn];
int dp[maxn][maxn];

vector < int > R[maxn],T[maxn];

int cmp(int a,int b)
{
    return A[a] < A[b];
}

void find(int i,int j)
{
    if (dp[i][j] == 0) return ;

    for (int k = 0; k < (int)R[i].size(); ++k)
        if (R[i][k] == j) res[++ans] = T[i][k];

    if (pre[i][j] != j) find(i,pre[i][j]);
    if (pre[i][j] != i) find(pre[i][j],j);
}

int main()
{
    int i,j,k,l,cnt,delta;

    scanf("%d",&n);
    for (i = 1; i <= n; ++i)
        scanf("%d%d",&j,&k),A[i] = j-k,A[i+n] = j+k;
    for (i = 1; i <= 2*n; ++i) p[i] = i;
    sort(p+1,p+2*n+1,cmp);
    for (i = 1,j = 1; i <= 2*n; ++i)
    {
        if (i > 1 && A[p[i-1]] != A[p[i]]) ++j;
        B[p[i]] = j;
    }
    cnt = j;
    for (i = 1; i <= 2*n; ++i)
        if (p[i] > n) 
            R[B[p[i]-n]].pb(B[p[i]]),T[B[p[i]-n]].pb(p[i]-n);
    ++cnt;
    for (k = 1; k <= cnt; ++k)
        for (i = 1; i <= cnt-k; ++i)
        {
            j = i+k;
            dp[i][j] = dp[i+1][j];
            pre[i][j] = i+1;
            delta = 0;
            for (l = 0; l < (int)R[i].size(); ++l)
            {
                if (R[i][l] == j) ++delta;
                if (R[i][l] < j) 
                    if (dp[i][R[i][l]]+dp[R[i][l]][j] > dp[i][j]) 
                    {
                        dp[i][j] = dp[i][R[i][l]]+dp[R[i][l]][j];
                        pre[i][j] = R[i][l];
                    }
            }
            dp[i][j] += delta;
        }

    find(1,cnt);
    sort(res+1,res+ans+1);

    printf("%d\n",ans);
    for (i = 1; i <= ans; ++i)
        printf("%d ",res[i]);

    return 0;
}
