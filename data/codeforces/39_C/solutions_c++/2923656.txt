#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

const int maxn = 4005;
typedef vector<int>::iterator Vit;
int f[maxn][maxn], p[maxn][maxn], h[maxn][maxn];
vector<int> b[maxn]; int x[maxn], y[maxn], w[maxn];
int n, m;

int dp(int l, int r) {
    if (l > r) return 0;
    if (f[l][r] != -1) return f[l][r];
    f[l][r] = dp(l + 1, r);
    for (Vit it = b[l].begin(); it != b[l].end(); ++it)
        if (*it < r && dp(l, *it) + dp(*it, r) > f[l][r]) {
            f[l][r] = f[l][*it] + f[*it][r]; p[l][r] = *it;
        }
    return f[l][r] += h[l][r] > 0;
}

void work(int l, int r) {
    if (l > r) return ;
    if (p[l][r]) work(l, p[l][r]), work(p[l][r], r);
    else work(l + 1, r);
    if (h[l][r]) printf("%d ", h[l][r]);
}

int main() {
    int i, d, r;
    scanf("%d", &n);
    for (i = 1; i <= n; ++i) {
        scanf("%d%d", &d, &r);
        w[m++] = x[i] = d - r;
        w[m++] = y[i] = d + r;
    }
    sort(w, w + m); m = unique(w, w + m) - w;
    for (i = 1; i <= n; ++i) {
        x[i] = upper_bound(w, w + m, x[i]) - w;
        y[i] = upper_bound(w, w + m, y[i]) - w;
        b[x[i]].push_back(y[i]); h[x[i]][y[i]] = i;
    }
    memset(f, 255, sizeof f);
    printf("%d\n", dp(1, m));
    work(1, m);
    return 0;
}
