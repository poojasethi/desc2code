#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

const int maxn = 2012;
int n, r, f[maxn * 2][maxn * 2], g[maxn * 2][maxn * 2], id[maxn * 2][maxn * 2], s[maxn * 2], cnt;
struct circle{int x, l, r;} c[maxn];
vector<int> L[maxn * 2];

int dp(int l, int r){
	if (l > r) return 0;
	if (f[l][r] >= 0) return f[l][r];
	int ret = dp(l + 1, r); g[l][r] = -1;
	for (int i = 0; i < (int)L[l].size(); i++){
		int p = L[l][i];
		if (c[p].r >= r) continue;
		int tmp = dp(l, c[p].r) + dp(c[p].r, r);
		if (tmp > ret) ret = tmp, g[l][r] = p;
	}
	if (id[l][r]) ret++;
	return f[l][r] = ret;
}

void dfs(int l, int r){
	if (!g[l][r] || l > r) return;
	if (id[l][r]) printf("%d ", id[l][r]);
	if (g[l][r] < 0) dfs(l + 1, r);
	else{
		dfs(l, c[g[l][r]].r);
		dfs(c[g[l][r]].r, r);
	}
}

int main(){
	scanf("%d", &n);
	for (int i = 1; i <= n; i++){
		scanf("%d%d", &c[i].x, &r);
		s[cnt++] = c[i].l = c[i].x - r;
		s[cnt++] = c[i].r = c[i].x + r;
	}
	sort(s, s + cnt);
	cnt = unique(s, s + cnt) - s;
	for (int i = 1; i <= n; i++){
		c[i].l = lower_bound(s, s + cnt, c[i].l) - s + 1;
		c[i].r = lower_bound(s, s + cnt, c[i].r) - s + 1;
		L[c[i].l].push_back(i);
		id[c[i].l][c[i].r] = i;
	}

	memset(f, -1, sizeof(f));
	int ans = dp(1, cnt);
	printf("%d\n", ans);
	dfs(1, cnt);
}
