#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<set>
#include<map>
#include<vector>

using namespace std;

const int maxn=4010;

int f[maxn][maxn],n,id[maxn][maxn],to[maxn][maxn];

set<int> se;

map<int,int> ma;

vector<int> st[maxn],et[maxn];

struct segment
{
	int l,r;
	void init()
	{
		scanf("%d%d",&l,&r);
		l=l-r;
		r=l+r+r;
	}
	bool operator<(const segment &a)const
	{
		return r<a.r;
	}
}s[maxn];

int dfs(int l,int r)
{
	int &v=f[l][r];
	int &t=to[l][r];
	if (v!=-1) return v;
	if (l>=r) return v=0;
	v=0;
	t=0;
	if (v<dfs(l,r-1))
	{
		v=dfs(l,r-1);
		t=r-1;
	}
	if (v<dfs(l+1,r))
	{
		v=dfs(l+1,r);
		t=l+1;
	}
	for (int a=0;a<(int)st[l].size();a++)
	{
		int nowr=s[st[l][a]].r;
		if (nowr<r && v<dfs(l,nowr)+dfs(nowr,r))
		{
			v=dfs(l,nowr)+dfs(nowr,r);
			t=nowr;
		}
	}
	for (int a=0;a<(int)et[r].size();a++)
	{
		int nowl=s[et[r][a]].l;
		if (nowl>l && v<dfs(l,nowl)+dfs(nowl,r))
		{
			v=dfs(l,nowl)+dfs(nowl,r);
			t=nowl;
		}
	}
	if (id[l][r]) v++;
	return v;
}

void print(int l,int r)
{
	if (f[l][r]>0 && l<r)
	{
		if (id[l][r]) printf("%d ",id[l][r]);
		if (!to[l][r]) return;
		print(l,to[l][r]);
		print(to[l][r],r);
	}
}

int main()
{
	scanf("%d",&n);
	for (int a=1;a<=n;a++)
		s[a].init(),se.insert(s[a].l),se.insert(s[a].r);
	int cnt=0;
	for (set<int>::iterator it=se.begin();it!=se.end();it++)
	{
		cnt++;
		ma[*it]=cnt;
	}
	for (int a=1;a<=n;a++)
	{
		s[a].l=ma[s[a].l];
		s[a].r=ma[s[a].r];
		st[s[a].l].push_back(a);
		et[s[a].r].push_back(a);
		id[s[a].l][s[a].r]=a;
	}
	memset(f,-1,sizeof(f));
	printf("%d\n",dfs(1,cnt));
	print(1,cnt);

	return 0;
}
