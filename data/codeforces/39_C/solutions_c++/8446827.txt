#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<iostream>
#include<ctime>
#include<set>
#include<vector>
#include<algorithm>
#define rep(i,j,k) for(i=j;i<=k;i++)
#define reps(i,j,k) for(i=j;i>=k;i--)
#define mem(a,b) memset(a,b,sizeof(a))
#define inf 0x7fffffff
#define mod 10000007
#define maxn 4100
#define PB push_back
using namespace std;
struct node
{
	int l,r,id;
}data[maxn];
int w[maxn],n,v[maxn],cnt=0,f[maxn],pre[maxn],ans;
vector<int> wt[maxn],temp;
bool cmp(node A,node B){return A.r<B.r||(A.r==B.r&&A.l>B.l);}
void solve()
{
	int i,j,k;
	mem(f,0);
	rep(i,1,n)
	{
		mem(f,0);temp.clear();wt[i].clear();
		rep(j,1,i)if (data[j].l>=data[i].l&&data[j].r<=data[i].r)temp.PB(j);
		int k=0,ret=0,maxid=0;
		mem(pre,0);
		rep(j,data[i].l,data[i].r)
		{
			f[j]=f[j-1];pre[j]=pre[j-1];
			while(k<temp.size()&&data[temp[k]].r==j)
			{
				if (f[j]<f[data[temp[k]].l]+w[temp[k]])
				{
					f[j]=f[data[temp[k]].l]+w[temp[k]];
					pre[j]=temp[k];
				}
				k++;
			}
			if (f[j]>ret)
			{
				ret=f[j];maxid=j;
			}
		}
		w[i]=f[maxid]+1;
		int x=maxid;
		while(pre[x]!=0)
		{
			k=pre[x];
			for (j=0;j<wt[k].size();j++)wt[i].PB(wt[k][j]);
			x=data[k].l;
		}
		wt[i].PB(i);
	}
	printf("%d\n",w[n]-1);
	for (j=0;j<wt[n].size()-1;j++)printf("%d ",data[wt[n][j]].id);
	printf("\n");
}
int main()
{
	//freopen("in.txt","r",stdin);freopen("out.txt","w",stdout);
	int i,j,k;
	scanf("%d",&n);
	rep(i,1,n)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		v[++cnt]=x-y;v[++cnt]=x+y;
		data[i].l=x-y;data[i].r=x+y;data[i].id=i;
	}
	sort(v+1,v+cnt+1);
	cnt=unique(v+1,v+cnt+1)-v-1;
	rep(i,1,n)
	{
		data[i].l=lower_bound(v+1,v+cnt+1,data[i].l)-v;
		data[i].r=lower_bound(v+1,v+cnt+1,data[i].r)-v;
	}
	sort(data+1,data+n+1,cmp);data[++n].l=1;data[n].r=cnt;
	mem(w,0);
	solve();
	return 0;
}
