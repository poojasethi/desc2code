#include <iostream>
#include <utility>
#include <algorithm>
#include <vector>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<=b;++i)
#define pb push_back
#define FOREACH(a,b)\
for(typeof(b.begin()) a=b.begin(); a!=b.end(); ++a)

const int maxn=2010;
const int oo=~0u>>1;

int n,m=0,l[maxn],r[maxn],x[maxn*2];
short f[maxn*2][maxn*2], g[maxn*2][maxn*2];
vector<int> link[maxn*2];
bool flag[maxn];

void ReadData()
{
	cin>>n;
	FOR(i,1,n) {
		int c,rad;
		cin>>c>>rad;
		l[i]=x[++m]=c-rad;  r[i]=x[++m]=c+rad;
	}
}

void Discrete()
{
	sort(x+1,x+m+1);
	m=unique(x+1,x+m+1)-x-1;
	FOR(i,1,n) {
		bool modl=false,modr=false;
		FOR(j,1,m) {
			if (!modl && l[i]==x[j]) {
				l[i]=j;
				modl=true;
			}
			if (!modr && r[i]==x[j]) {
				r[i]=j;
				link[j].pb(i);
				modr=true;
			}
		}
	}
}

void Dp()
{
	FOR(len,1,m-1)
		FOR(i,1,m-len) {
			int j=i+len, cover=0;
			f[i][j]=f[i][j-1];
			FOREACH(s,link[j]) {
				if (l[*s]==i)  cover=1;
				else if (l[*s]>i && f[i][j]<f[i][l[*s]]+f[l[*s]][j]) {
					f[i][j]=f[i][l[*s]]+f[l[*s]][j];
					g[i][j]=*s;
				}
			}
			f[i][j]+=cover;
		}
}

void find(int i,int j)
{
	if (i==j)  return ;
	FOR(k,1,n)
		if (l[k]==i && r[k]==j)
			flag[k]=true;
	if (g[i][j]) {
		find(i,l[g[i][j]]);
		find(l[g[i][j]],r[g[i][j]]);
	} else find(i,j-1);
}

void Print()
{
	find(1,m);
	cout<<f[1][m]<<endl;
	FOR(i,1,n)
		if (flag[i])  cout<<i<<' ';
}

int main()
{
	ReadData();
	Discrete();
	Dp();
	Print();
	return 0;
}
