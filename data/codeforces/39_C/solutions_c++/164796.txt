#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;

typedef pair<int, int> pii;
#define F first
#define S second

const int MAXN = 2*2000 + 10;

int n;
vector<pii> seg;
int dp[MAXN][MAXN];
int par[MAXN][MAXN];

int srt[MAXN];
inline bool cmp(int i, int j)
{
	return seg[i].F != seg[j].F ? seg[i].F < seg[j].F : seg[i].S < seg[j].S;
}

vector<int> xs;
inline int gid(int x)
{
	return lower_bound(xs.begin(), xs.end(), x) - xs.begin();
}

set<pii> val;
void output(int l, int r)
{
	val.insert(pii(l, r));
	if(r - l > 1)
	{
		output(par[l][r], r);
		output(l, par[l][r]);
	}
}

void solve()
{
	for(int ln=1; ln<xs.size(); ln++)
	{
		int p = 0;
		for(int l=0; l+ln<xs.size(); l++)
		{
			int r = l + ln;
			int &mx = dp[l][r] = dp[l+1][r];
			int &pr = par[l][r] = l+1;
			while(p<n && seg[srt[p]] < pii(l, r))
			{
				int d = dp[l][seg[srt[p]].S] + dp[seg[srt[p]].S][r];
				if(d > mx)
				{
					mx = d;
					pr = seg[srt[p]].S;
				}
				p++;
			}
			while(p<n && seg[srt[p]] == pii(l, r))
				mx++, p++;
		}
	}
	
}

void init()
{
	for(int i=0; i<n; i++)
		xs.push_back(seg[i].F),
		xs.push_back(seg[i].S);
	sort(xs.begin(), xs.end());
	xs.resize(unique(xs.begin(), xs.end()) - xs.begin());
	for(int i=0; i<n; i++)
		seg[i].F = gid(seg[i].F),
		seg[i].S = gid(seg[i].S);
	
	for(int i=0; i<n; i++)
		srt[i] = i;
	sort(srt, srt+n, cmp);
}

void input()
{
	cin >> n;
	for(int i=0; i<n; i++)
	{
		int c, r;
		cin >> c >> r;
		seg.push_back(pii(c-r, c+r));
	}

}

int main()
{
	input();
	init();
	solve();
	cout << dp[0][xs.size()-1] << endl;
	output(0, xs.size()-1);
	for(int i=0; i<n; i++)
		if(val.find(seg[i]) != val.end())
			cout << i+1 << " ";
	cout << endl;
	return 0;
}
