#include<cstdio>
#include<cstring>
#include<algorithm>
#define MAXN 4100

int X[MAXN],Xt,n,t,f[MAXN],_[MAXN],Seq[MAXN],Seqt,Father[MAXN];

struct pt{int l,r,_;}p[MAXN],q[MAXN],r[MAXN];

bool cmp1(pt a,pt b){return a.r-a.l<b.r-b.l;}

bool cmp2(pt a,pt b){return a.l<b.l;}

void GetSeq(int K)
{
	int i,j,k;
	memset(f,0,sizeof f);
	memset(Father,0,sizeof Father);
	_[K]=0;
	for(k=0,j=r[K].l;j<r[K].r;j++)
	{
		for(;k<t&&q[k].l<=j;k++)
			if(q[k].l>=r[K].l&&q[k].r<=r[K].r&&f[j]+_[q[k]._]>f[q[k].r])
			{
				f[q[k].r]=f[j]+_[q[k]._];
				Father[q[k].r]=q[k]._;
			}
		if(f[j]>f[j+1])
		{
			f[j+1]=f[j];
			Father[j+1]=Father[j];
		}
	}
	_[K]=f[r[K].r];
	j=r[K].r;
	i=Seqt;
	for(;Father[j];j=r[Father[j]].l)
		Seq[Seqt++]=Father[j];
	k=Seqt;
	for(;i<k;i++)
		GetSeq(Seq[i]);
}

int main()
{
	int i,j,k,D,R;
	p[t++]=(pt){-2000000000,2000000000,0};
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%d%d",&D,&R);
		p[t++]=(pt){D-R,D+R,i+1};
		X[Xt++]=D-R;
		X[Xt++]=D+R;
	}

	X[Xt++]=-2000000000;
	X[Xt++]=2000000000;
	std::sort(X,X+Xt);
	for(i=j=1;i<Xt;i++)
		if(X[j-1]!=X[i])
			X[j++]=X[i];
	Xt=j;
	for(i=0;i<t;i++)
	{
		for(j=0;j<Xt;j++)
			if(X[j]==p[i].l)
			{
				p[i].l=j;
				break;
			}
		
		for(j=0;j<Xt;j++)
			if(X[j]==p[i].r)
			{
				p[i].r=j;
				break;
			}
	}
	memcpy(r,p,sizeof r);
	std::sort(p,p+t,cmp1);
	memcpy(q,p,sizeof p);
	std::sort(q,q+t,cmp2);
	for(i=0;i<t;i++)
	{
		memset(f,0,sizeof f);
		for(k=0,j=p[i].l;j<p[i].r;j++)
		{
			for(;k<t&&q[k].l<=j;k++)
				if(q[k].l>=p[i].l&&q[k].r<=p[i].r&&f[j]+_[q[k]._]>f[q[k].r])
					f[q[k].r]=f[j]+_[q[k]._];

			if(f[j]>f[j+1])
				f[j+1]=f[j];
		}
		_[p[i]._]=f[j]+1;
	}
	GetSeq(0);
	std::sort(Seq,Seq+Seqt);
	printf("%d\n",Seqt);
	for(i=0;i<Seqt;i++)
		printf("%d ",Seq[i]);printf("\n");
	return 0;
}
