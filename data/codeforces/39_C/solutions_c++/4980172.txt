#include <iostream>
#include <cstdio>
#include <map>
#include <string.h>
using namespace std;

const int N = 4000 + 3;
int n,L[N],R[N],ci[N],ri[N],tot;
int sz,en[N],g[N],pre[N],num[N],f[N][N];
map<int,int>id;
struct Node {
    int l,r;
}fr[N][N];

void Ins(int u,int v,int nn) {
    pre[++sz] = en[u]; en[u] = sz; 
    g[sz] = v; num[sz] = nn;
}

int DP(int l,int r) {
    if (l > r) return 0;
    if (f[l][r] != -1) return f[l][r];
    int ret = 0,extra = 0;
    for (int i = en[l]; i; i = pre[i])
        if (g[i] == r)
            extra++;
    
    for (int i = en[l]; i; i = pre[i]) {
        int k = g[i];
        if (k >= r) continue;
        int tmp = DP(l,k) + DP(k,r);
        if (tmp > ret) {
            ret = tmp;
            fr[l][r].l = l; fr[l][r].r = k;
        }
    }
    
    int t1 = DP(l + 1,r);
    int t2 = DP(l,r - 1);
    if (t1 >= t2 && t1 > ret) {
        fr[l][r].l = l; fr[l][r].r = l + 1;
        ret = t1;
    } else if (t2 >= t1 && t2 > ret) {
        fr[l][r].l = l; fr[l][r].r = r - 1;
        ret = t2;
    }
    
    return f[l][r] = extra + ret;
}

void Ouput(int l,int r) {
    if (l > r) return;
    for (int i = en[l]; i; i = pre[i])
        if (g[i] == r) printf("%d ",num[i]);
    if (fr[l][r].l != 0) {
        Ouput(fr[l][r].l,fr[l][r].r);
        Ouput(fr[l][r].r,r);
    }
}

int main()
{
    scanf("%d",&n);
    for (int i = 1; i <= n; i++) {
        scanf("%d%d",&ci[i],&ri[i]);
        id[ci[i] - ri[i]] = 1;
        id[ci[i] + ri[i]] = 1;
    }
    for (map<int,int>::iterator ll = id.begin(); ll != id.end(); ll++)
        (ll -> second) = ++tot;
    for (int i = 1; i <= n; i++) {
        L[i] = id[ci[i] - ri[i]]; R[i] = id[ci[i] + ri[i]];
        Ins(L[i],R[i],i);
    }
    
    memset(f,-1,sizeof(f));
    printf("%d\n",DP(1,tot));
    Ouput(1,tot);
    printf("\n");
    return 0;
}
