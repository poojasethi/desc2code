#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;
const int mx = 100100;

int fuel[mx], dist[mx], sums[mx * 2];
bool ok[mx];
int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n; ++i) {
		cin >> fuel[i];
	}
	for (int i = 0; i < n; ++i) {
		cin >> dist[i];
	}
	for (int it = 0; it < 2; ++it) {
		sums[0] = 0;
		for (int i = 0; i < 2 * n; ++i) {
			sums[i + 1] = sums[i] + fuel[i % n] - dist[i % n];
		}
		int r = 1;
		multiset<int> srt;
		for (int i = 0; i < n; ++i) {
			while (srt.size() < n) {
				srt.insert(sums[r++]);
			}
			if (*srt.begin() >= sums[i]) {
				ok[i] = true;
			}
			srt.erase(srt.find(sums[i + 1]));
		}
		reverse(fuel, fuel + n);
		reverse(dist, dist + n);
		rotate(dist, dist + 1, dist + n);
		reverse(ok, ok + n);
	}
	vector<int> v;
	for (int i = 0; i < n; ++i) {
		if (ok[i]) {
			v.push_back(i);
		}
	}
	cout << v.size() << '\n';
	for (int i = 0; i < v.size(); ++i) {
		cout << v[i] + 1 << ' ';
	}
}
		