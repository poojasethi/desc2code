#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>

using namespace std;

#define MAXN 10010
#define MAXM 100010
#define EPS 1e-8

typedef struct wall {
	double x,y;
} wall;

typedef struct ball {
	double alfa;
	int ind;
} ball;

int n,m;
double alfa[MAXN],ansx[MAXN],ansy[MAXN];
wall W[MAXM];
ball vet[MAXN];

bool cmp(wall a, wall b) {
	if (abs(a.x - b.x)<EPS) return a.y < b.y;
	return a.x < b.x;
}

bool cmpv(ball a, ball b) {
	return a.alfa < b.alfa;
}

int main() {
	double v;
	scanf("%d%lf",&n,&v);
	
	for (int i=0; i<n; i++) {
		scanf("%lf",&vet[i].alfa);
		vet[i].ind = i;
	}
	
	sort(vet,vet+n,cmpv);
	
	scanf("%d",&m);
	
	for (int i=0; i<m; i++)
		scanf("%lf%lf",&W[i].x,&W[i].y);
	
	sort(W,W+m,cmp);
	
	for (int i=0; i<n; i++) {
		ansx[vet[i].ind] = (v*v*sin(vet[i].alfa)*cos(vet[i].alfa))/4.9;
		ansy[vet[i].ind] = 0.0;
	}
	
	int i,j;
	double t,y;
	i = j = 0;
	while (i<n && j<m) {
		if (W[j].x > ansx[vet[i].ind]) { i++;	continue;	}
		t = W[j].x / (v * cos(vet[i].alfa));
		y = v*sin(vet[i].alfa)*t - 4.9*t*t;
		if ((y>0 || abs(y)<EPS) && (y<W[j].y || abs(y-W[j].y)<EPS)) {
			ansx[vet[i].ind] = W[j].x;
			ansy[vet[i].ind] = y;
			i++;
		}
		else j++;
	}

	for (int i=0; i<n; i++)
		printf("%.8lf %.8lf\n",ansx[i],ansy[i]);
	
	return 0;
}