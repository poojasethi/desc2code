#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#define rep(i,s,t) for (int i = s; i <= t; ++i)
using namespace std;
struct par{
	double Ang, a, b, x, y;
}p[10010];
struct poi{
	double x, y;
}q[100010];
int n, m;
int a[100010];
double V;
inline double sqr(double x) { return x*x; }
inline bool cmp1(poi A, poi B) { return A.x < B.x; }
inline bool cmp2(int A, int B) { return p[A].Ang < p[B].Ang; }
void Init(){
	scanf("%d%lf", &n, &V);
	rep(i,1,n){
		scanf("%lf", &p[i].Ang);
		p[i].a = -4.9/sqr(V)/sqr(cos(p[i].Ang));
		p[i].b = tan(p[i].Ang);
		a[i] = i;
	}
	scanf("%d", &m);
	rep(i,1,m) scanf("%lf%lf", &q[i].x, &q[i].y);
	sort(q+1, q+m+1, cmp1);
	sort(a+1, a+n+1, cmp2);
}
void Solve(){
	int k = 1; double x;
	rep(i,1,m)
	if (k <= n){
		x = p[a[k]].a*sqr(q[i].x)+p[a[k]].b*q[i].x;
		while (x <= q[i].y){
			if (x < 0) p[a[k]].x = -p[a[k]].b/p[a[k]].a, p[a[k]].y = 0;
			else p[a[k]].x = q[i].x, p[a[k]].y = x;
			++k; if (k == n+1) break; x = p[a[k]].a*sqr(q[i].x)+p[a[k]].b*q[i].x;
		}
	}
	rep(i,k,n) p[a[i]].x = -p[a[i]].b/p[a[i]].a, p[a[i]].y = 0;
	rep(i,1,n) printf("%.10lf %.10lf\n", p[i].x, p[i].y);
}
int main(){
	Init();
	Solve();
	return 0;
}