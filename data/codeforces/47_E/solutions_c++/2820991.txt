#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cmath>
using namespace std;

const double g=9.8;
struct node{int id; double alpha,ansx,ansy;}a[100010];
struct point{double x,y;}wall[100010];
int n,m; double V;

bool cmpa(const node i, const node j)
{
	return i.alpha<j.alpha;
}

bool cmpid(const node i, const node j)
{
	return i.id<j.id;
}

bool cmpx(const point i, const point j)
{
	return i.x<j.x;
}

double get_x(double alpha)
{
	return (2*V*V*sin(alpha)*cos(alpha)/g);
}

double get_y(double alpha, double x)
{
	double t=x/(V*cos(alpha));
	return V*sin(alpha)*t-g*t*t/2;
}


int main()
{
	scanf("%d%lf",&n,&V);
	for (int i=1; i<=n; i++) scanf("%lf",&a[i].alpha), a[i].id=i;
	sort(a+1,a+n+1,cmpa);
	scanf("%d",&m);
	for (int i=1; i<=m; i++) scanf("%lf%lf",&wall[i].x,&wall[i].y);
	sort(wall+1,wall+m+1,cmpx);
	
	int j=1;
	for (int i=1; i<=m; i++)
	{
		for (;get_x(a[j].alpha)<wall[i].x && j<=n; j++) 
			a[j].ansx=get_x(a[j].alpha), a[j].ansy=0;
		for (;get_y(a[j].alpha, wall[i].x)<wall[i].y && j<=n; j++) 
			a[j].ansx=wall[i].x, a[j].ansy=get_y(a[j].alpha, wall[i].x);
	}
	for (; j<=n; j++) a[j].ansx=get_x(a[j].alpha), a[j].ansy=0;
	sort(a+1,a+n+1,cmpid);
	for (int i=1; i<=n; i++) printf("%.10lf %.10lf\n",a[i].ansx,a[i].ansy);
	//for (;;);
}
