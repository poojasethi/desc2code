#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <bitset>
#define INF 999999999
#define N 20002
using namespace std;
bitset<N> tmp[N >> 1];
int f[30001], g[30001];
int x[30001], y[30001];
int n, m, top = 0, Mod, mid; 
int stack[1000001];
void Dp1()
{
	for (int i = 1; i <= m; i ++)
		g[i] = 0;
	for (int i = 1; i <= n; i ++)
	{
		for (int j = 1; j <= m; j ++)
			f[j] = -INF;
		if (i > mid) tmp[i - mid].reset();
		for (int j = 1; j <= m; j ++)
		{
			if (j > 1) f[j] = f[j - 1];
			if (g[j] > f[j]) 
			{
				f[j] = g[j];
				if (i > mid) tmp[i - mid][j] = 1;
			}
			f[j] += (x[i] + y[j]) % Mod, g[j] = f[j];
		}
	}
	printf("%d\n", f[m]);
	while (n > mid && (n > 1 || m > 1))
		tmp[n - mid][m] ? (stack[++ top] = 1, n --) : (++ top, m --); 				
}
void Dp2()
{
	for (int i = 1; i <= m; i ++)
		g[i] = 0;
	for (int i = 1; i <= n; i ++)
	{
		for (int j = 1; j <= m; j ++)
			f[j] = -INF;
		tmp[i].reset();
		for (int j = 1; j <= m; j ++)
		{
			if (j > 1) f[j] = f[j - 1];
			if (g[j] > f[j]) f[j] = g[j], tmp[i][j] = 1;
			f[j] += (x[i] + y[j]) % Mod, g[j] = f[j];
		}
	}
	while (n > 0 && (n > 1 || m > 1))
		tmp[n][m] ? (stack[++ top] = 1, n --) : (++ top, m --); 				
}
int main( )
{
	scanf("%d %d %d", &n, &m, &Mod);
	mid = (n >> 1);
	for (int i = 1; i <= n; i ++)
		scanf("%d", &x[i]);
	for (int i = 1; i <= m; i ++)
		scanf("%d", &y[i]);
	Dp1();
	Dp2();
	for (int i = top; i >= 1; i --)
		if (stack[i]) printf("C");
		else printf("S");
	printf("\n");
	return 0;
}
 	   			  	 	 	 	