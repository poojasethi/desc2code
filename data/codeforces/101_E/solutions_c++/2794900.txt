#include <cstdio>
#include <cstring>

#include <bitset>
#include <algorithm>
using namespace std;

const int N = 20050;

int X[N], Y[N], dp[2][N], P, n, m, hn;
bitset<N> path[N / 2];
char S[N * 2], *sp = S;

void generate (int f)
{	
	int pk = f * hn;
	memset(dp, 0, sizeof dp);
	for (int i = 1; i <= n; ++i)
	{
		int *prev = dp[(i & 1) ^ 1], *cur = dp[i & 1];
		if (i > pk) path[i - pk].reset();
		cur[1] = -1;
		for (int j = 1; j <= m; ++j)
		{
			if (j > 1) cur[j] = cur[j - 1];
			if (prev[j] > cur[j])
			{
				cur[j] = prev[j];
				if (i > pk) path[i - pk][j] = 1;
			}
			cur[j] += (X[i] + Y[j]) % P;
		}
	}
	if (f) printf("%d\n", dp[n & 1][m]);
	while (n > pk && (n > 1 || m > 1))
		if (path[n - pk][m]) --n, *sp++ = 'C';
		else --m, *sp++ = 'S';
}

int main ()
{
#ifdef LOCAL
	freopen("in", "r", stdin);
#endif
	scanf("%d%d%d", &n, &m, &P);
	hn = n / 2;
	for (int i = 1; i <= n; ++i) scanf("%d", X + i);
	for (int i = 1; i <= m; ++i) scanf("%d", Y + i);
	generate(1);
	generate(0);
	reverse(S, sp);
	printf("%s\n", S);
	return 0;
}

