#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;
#define MM(a , x) memset(a , x , sizeof(a))
#define sqr(x) ((x) * (x))
#define abs(x) ((x > 0) ? (x) : -(x))
#define REP(i , n) for ((i) = 0; (i) < (n); ++(i))
#define FOR(i , a , b) for ((i) = (a); (i) <= (b); ++(i))
#define FORD(i , a , b) for ((i) = (a); (i) >= (b); --(i))
typedef long long LL;

const int maxn = 68;

int n , m , s1 , s2 , g1 , g2 , tot;
LL ans;
int g[maxn][maxn] , best[maxn] , worse[maxn];
LL f[maxn][maxn][maxn];
vector<int> score[maxn];

void init()
{
	scanf("%d%d" , &n , &m);
	int i , j , x , y , w;
	MM(g , 63);
	FOR (i , 1 , n) g[i][i] = 0;
	FOR (i , 1 , m)
	{
		scanf("%d%d%d" , &x , &y , &w);
		g[x][y] = g[y][x] = w;
	}
	scanf("%d%d%d%d" , &g1 , &g2 , &s1 , &s2);
}

void prework()
{
	int i , j , k , tp;
 	FOR (k , 1 , n) FOR (i , 1 , n) FOR (j , 1 , n)
		g[i][j] = min(g[i][j] , g[i][k] + g[k][j]);
	FOR (i , 1 , n) FOR (j , 1 , n) if (i != j)
	{
		score[i].push_back(g[i][j] * 60 + i);
	}
	FOR (i , 1 , n)
	{
		sort(score[i].begin() , score[i].end());
		best[i] = score[i][0]; worse[i] = score[i][n - 2];
	}
}

LL calc(int gold , int bronze)
{
	int i , j , k , tp;
	bool cang , cans , canb;
	MM(f , 0);
	f[0][0][0] = 1;
	FOR (i , 1 , n)
	{
		cang = cans = canb = 0;
		if (i == gold) cang = 1;
		else
		{
			if (i == bronze) canb = 1;
			else
			{
				if (best[i] < best[gold]) cang = 1;
				if (worse[i] > worse[bronze]) canb = 1;
				REP (j , score[i].size()) if (score[i][j] > best[gold] && score[i][j] < worse[bronze]) cans = 1;
			}
		}
		FOR (j , 0 , i - 1) FOR (k , 0 , i - 1 - j)
		{
			if (cang) f[i][j + 1][k] += f[i - 1][j][k];
			if (cans) f[i][j][k + 1] += f[i - 1][j][k];
			if (canb) f[i][j][k] += f[i - 1][j][k];
		}
	}
	LL cur = 0;
	FOR (j , g1 , g2) FOR (k , s1 , s2) cur += f[n][j][k];
	return cur;
}

void work()
{
	prework();
	int i , j , k , tp;
	ans = 0;
	FOR (i , 1 , n) FOR (j , 1 , n) if (i != j) ans += calc(i , j);
	cout << ans << endl;
}

int main()
{
	//freopen("H.in" , "r" , stdin);
	//freopen("H.out" , "w" , stdout);
	init();
	work();
	return 0;
}
