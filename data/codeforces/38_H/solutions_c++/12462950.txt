// in the name of God

#include<bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define ll long long
#define ld long double
#define s(a) scanf("%d" , &a)
#define p(a) printf("%d " , a)
#define mem(A) memset(A , 0 , sizeof A)

using namespace std;

typedef pair<int , int> pii;

const int MAXN = 55;
const int inf = 1e9 + 1;

set<int> s[MAXN];
int v[MAXN][MAXN];
int n;
int g1 , g2 , s1 , s2;

void floyd()
{
    for(int l = 1 ; l <= n ; l++)
        for(int i = 1 ; i <= n ; i++)
            for(int j = 1 ; j <= n ; j++)
                v[i][j] = min(v[i][j] , v[i][l] + v[l][j]);
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= n ; j++)
            if(j != i)
                s[i].insert(v[i][j]);
}

void pre()
{
    for(int i = 0 ; i < MAXN ; i++)
        for(int j = 0 ; j < MAXN ; j++)
            v[i][j] = inf;
    for(int i = 0 ; i < MAXN ; i++)
        v[i][i] = 0;
}

ll dp[MAXN][MAXN];
ll odp[MAXN][MAXN];
ll ans;

void addG()
{
//    cout << "gold\n";
    for(int i = 1 ; i <= n ; i++)
        for(int j = 0 ; j <= n ; j++)
            dp[i][j] += odp[i-1][j];
}

void addS()
{
//    cout << "silver\n";
    for(int i = 0 ; i <= n ; i++)
        for(int j = 1 ; j <= n ; j++)
            dp[i][j] += odp[i][j-1];
}

void addB()
{
//    cout << "bronze\n";
    for(int i = 0 ; i <= n ; i++)
        for(int j = 0 ; j <= n ; j++)
            dp[i][j] += odp[i][j];
}

void solve(int x , int y)
{
    set<int>::iterator it = s[x].begin();
    int mi = *it;
    it = s[y].end(); it--;
    int ma = *it;

    mem(dp);
    dp[1][0] = 1;
    for(int i = 1 ; i <= n ; i++){
        if(i != x && i != y){
            memcpy(odp , dp , sizeof dp);
            mem(dp);
            if(x < y){
                if(i < x){
                    it = s[i].begin();
                    if(*it <= mi)
                        addG();

                    it = s[i].end(); it--;
                    if(*it > ma)
                        addB();

                    it = s[i].upper_bound(mi);
                    if(it != s[i].end() && *it <= ma)
                        addS();
                }
                if(i > x && i < y){
                    it = s[i].begin();
                    if(*it < mi)
                        addG();

                    it = s[i].end(); it--;
                    if(*it > ma)
                        addB();

                    it = s[i].lower_bound(mi);
                    if(it != s[i].end() && *it <= ma)
                        addS();
                }
                if(i > y){
                    it = s[i].begin();
                    if(*it < mi)
                        addG();

                    it = s[i].end(); it--;
                    if(*it >= ma)
                        addB();

                    it = s[i].lower_bound(mi);
                    if(it != s[i].end() && *it < ma)
                        addS();
                }
            }
            else{
                if(i < y){
                    it = s[i].begin();
                    if(*it <= mi)
                        addG();

                    it = s[i].end(); it--;
                    if(*it > ma)
                        addB();

                    it = s[i].upper_bound(mi);
                    if(it != s[i].end() && *it <= ma)
                        addS();
                }
                if(i > y && i < x){
                    it = s[i].begin();
                    if(*it <= mi)
                        addG();

                    it = s[i].end(); it--;
                    if(*it >= ma)
                        addB();

                    it = s[i].upper_bound(mi);
                    if(it != s[i].end() && *it < ma)
                        addS();
                }
                if(i > x){
                    it = s[i].begin();
                    if(*it < mi)
                        addG();

                    it = s[i].end(); it--;
                    if(*it >= ma)
                        addB();

                    it = s[i].lower_bound(mi);
                    if(it != s[i].end() && *it < ma)
                        addS();
                }
            }
        }
    }

    for(int i = g1 ; i <= g2 ; i++)
        for(int j = s1 ; j <= s2 ; j++)
            ans += dp[i][j];
}

int main()
{
    ios_base::sync_with_stdio(false);
    pre();
    int m;
    cin >> n >> m;
    for(int i = 1 ; i <= m ; i++){
        int a , b;
        cin >> a >> b;
        cin >> v[a][b];
        v[b][a] = v[a][b];
    }

    cin >> g1 >> g2 >> s1 >> s2;

    floyd();
    for(int i = 1 ; i <= n ; i++)
        for(int j = 1 ; j <= n ; j++)
            if(i != j)
                solve(i , j);

    cout << ans << "\n";
    return 0;
}
