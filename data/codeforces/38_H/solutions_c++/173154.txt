#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
#define INF (1<<29)

int N,g1,g2,s1,s2;
int graph[60][60];
vector <int> score[60]; // smaller is better
int best[60],worst[60];
ll dp[60][60][60]; // pos, g, s

ll func(int gcut, int bcut){
    int i,j,k;
    
    REP(i,N+1) REP(j,i+1) REP(k,i-j+1) dp[i][j][k] = 0;
    dp[0][0][0] = 1;
    
    REP(i,N){
        bool cang = false, cans = false, canb = false;
        
        if(i == gcut){
            cang = true;
        } else if(i == bcut){
            canb = true;
        } else {
            if(best[i] < best[gcut]) cang = true;
            if(worst[i] > worst[bcut]) canb = true;
            REP(j,score[i].size()) if(score[i][j] > best[gcut] && score[i][j] < worst[bcut]) cans = true;
        }
        
        REP(j,i+1) REP(k,i-j+1){
            if(cang) dp[i+1][j+1][k] += dp[i][j][k];
            if(cans) dp[i+1][j][k+1] += dp[i][j][k];
            if(canb) dp[i+1][j][k] += dp[i][j][k];
        }
    }
    
    ll ans = 0;
    for(i=g1;i<=g2;i++) for(j=s1;j<=s2;j++) ans += dp[N][i][j];
    return ans;
}

int main(void){
    int M,a,b,c,i,j,k;
    
    scanf("%d%d",&N,&M);
    REP(i,N) REP(j,N) graph[i][j] = ((i == j) ? 0 : INF);
    REP(i,M){
        scanf("%d%d%d",&a,&b,&c); a--; b--;
        graph[a][b] = graph[b][a] = c;
    }
    
    REP(k,N) REP(i,N) REP(j,N) graph[i][j] = min(graph[i][j],graph[i][k]+graph[k][j]);
    REP(i,N){
        REP(j,N) if(j != i) score[i].push_back(graph[i][j]*60+i);
        sort(score[i].begin(),score[i].end());
        best[i] = score[i][0]; worst[i] = score[i][N-2];
    //  REP(j,score[i].size()) cout << score[i][j] << ' '; cout << endl;
    }
    
    scanf("%d%d%d%d",&g1,&g2,&s1,&s2);
    
    ll ans = 0;
    REP(i,N) REP(j,N) if(i != j) ans += func(i,j);
    
    cout << ans << endl;
    
    return 0;
}
