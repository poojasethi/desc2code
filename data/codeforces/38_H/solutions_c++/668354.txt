#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li       	long long int
#define rep(i,to)	for(li i=0;i<((li)(to));i++)
#define pb       	push_back
#define sz(v)    	((li)v.size())
#define bit(n)   	(1ll<<(li)(n))


#define MAX 55
li road[MAX][MAX];
vector<li> dis[MAX];
li n,m,mini,maxi;
li dp[MAX][MAX][MAX];

li recur(li pos,li lower,li upper){
	if(lower<0 || upper<0) return 0;
	li &res=dp[pos][lower][upper];
	if(res!=-1) return res;
	res=0;
	if(pos==n) return res=(lower==0 && upper==0);
	if(dis[pos].front()==mini) return res=recur(pos+1,lower-1,upper);
	if(dis[pos].back()==maxi) return res=recur(pos+1,lower,upper);
	if(dis[pos].front()<mini) res+=recur(pos+1,lower-1,upper);
	if(maxi<dis[pos].back()) res+=recur(pos+1,lower,upper);
	bool ok=false;
	rep(i,sz(dis[pos]))if(mini<dis[pos][i] && dis[pos][i]<maxi) ok=true;
	if(ok) res+=recur(pos+1,lower,upper-1);
	return res;
}

int main(){
	rep(i,MAX)rep(j,MAX) road[i][j]=bit(25);
	cin>>n>>m;
	rep(i,m){
		li a,b,c;
		cin>>a>>b>>c;
		road[a-1][b-1]=min(road[a-1][b-1],c);
		road[b-1][a-1]=min(road[b-1][a-1],c);
	}
	rep(k,n)rep(i,n)rep(j,n) road[i][j]=min(road[i][j],road[i][k]+road[k][j]);
	rep(i,n)rep(j,n)if(i!=j) dis[i].pb(road[i][j]*MAX+i);
	rep(i,n) sort(dis[i].begin(),dis[i].end());
	li sx,sy,gx,gy,res=0;
	cin>>sx>>sy>>gx>>gy;
	rep(i,n)rep(j,n)if(i!=j){
//		memset(dp,-1,sizeof(dp));
rep(i,MAX)rep(j,MAX)rep(k,MAX) dp[i][j][k]=-1;
		mini=dis[i].front();
		maxi=dis[j].back();
		for(li s=sx;s<=sy;s++)for(li g=gx;g<=gy;g++) res+=recur(0,s,g);
	}
	cout<<res<<endl;
}
