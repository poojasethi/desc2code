#include <cstdio>
#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
#include <utility>

using namespace std;

const int MaxN = 100010;

typedef long long LL;
typedef pair<LL,LL> PII;
typedef pair<double,int> PDI;

#define K first
#define B second
#define X first
#define NUM second

struct Node{
	int l,r;
	Node *lc,*rc;
	vector<PII> list;
	vector<PDI> x;
}pool[MaxN << 1],*tail=pool,*rt;

int n,m;
int sum[MaxN],a[MaxN];
LL k[MaxN],b[MaxN];
double sx[MaxN];

inline double intersect(const PII &a,const PII &b){return 1.*(b.B-a.B)/(a.K-b.K);}

void insert(vector<PII> &a,const PII &b){
	int len=a.size();
	while(len>=2){
		double x=intersect(a[len-1],b);
		if(x>sx[len-2]) break;
		a.pop_back();len--;
	}
	if(len) sx[len-1]=intersect(a[len-1],b);
	a.push_back(b);
}

void build(Node *(&rt),int l,int r){
	rt=tail++;rt->l=l;rt->r=r;rt->x.push_back(PDI(-1e9,0));
	if(l==r) rt->list.push_back(PII(k[l],b[l]));
	else{
		build(rt->lc,l,l+r >> 1);
		build(rt->rc,(l+r >> 1)+1,r);
		vector<PII> :: iterator lp=rt->lc->list.begin(),rp=rt->rc->list.begin();
		while(lp!=rt->lc->list.end() || rp!=rt->rc->list.end()){
			if(lp==rt->lc->list.end()) insert(rt->list,*(rp++));
			else if(rp==rt->rc->list.end()) insert(rt->list,*(lp++));
			else if(lp->K==rp->K){
				if(lp->B<=rp->B) insert(rt->list,*lp);
				else insert(rt->list,*rp);
				lp++;rp++;
			}
			else if(lp->K>rp->K) insert(rt->list,*(lp++));
			else insert(rt->list,*(rp++));
		}
		for(int i=0;i<rt->list.size()-1;i++) rt->x.push_back(PDI(sx[i],i));
	}
	rt->x.push_back(PDI(1e9,rt->list.size()-1));
}

LL query(Node *rt,int l,int r,int x){
	if(l<=rt->l && r>=rt->r){
		int a=lower_bound(rt->x.begin(),rt->x.end(),PDI(x,0))->second;
		return rt->list[a].K*x+rt->list[a].B;
	}
	else{
		int mid=rt->l+rt->r >> 1;
		LL res=0x7fffffffffffffffLL;
		if(l<=mid) res=min(res,query(rt->lc,l,r,x));
		if(r>mid) res=min(res,query(rt->rc,l,r,x));
		return res;
	}
}

int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++) scanf("%d",&a[i]),sum[i]=sum[i-1]+a[i],k[i]=a[i],b[i]=k[i]*i-sum[i];
	build(rt,1,n);
	scanf("%d",&m);
	for(int i=1;i<=m;i++){
		int x,y;scanf("%d%d",&x,&y);
		cout << sum[y]+query(rt,y-x+1,y,x-y) << endl;
	}
	return 0;
}
