#include<bits/stdc++.h>

using namespace std;

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define sol (root+root)
#define sag (root+root+1)
#define orta ((bas+son)/2)
#define ll long long
#define pii pair<int,int>
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

const int N=1e5+5;
const int mod=1e9+7;
const int inf=1e9+7;

int n,i,m,x,y,j;
int sum[N],A[N];

vector<pii > st[4*N];

pair<pii,int> Q[N];

double is(int x,int y,int x2,int y2){
	return (double)(y2-y)/(double)(x-x2);
}

int f(int root,int x){
	int bas=0;
	int son=(int)st[root].size()-1;
	while(bas<son){
		int ort=bas+son>>1;
		if(bas==ort)
			ort++;
		if(is(st[root][ort].st,st[root][ort].nd,st[root][ort-1].st,st[root][ort-1].nd)<=x)
			bas=ort;
		else son=ort-1;
	}
	return st[root][bas].st*x+st[root][bas].nd;
}

int query(int root,int bas,int son,int x,int y,int v){
	if(bas>y or son<x)
		return inf;
	if(x<=bas and son<=y)
		return f(root,v);
	return min(query(sol,bas,orta,x,y,v),query(sag,orta+1,son,x,y,v));
}

void add(int root,pii q){
	int x=q.st;
	int y=q.nd;
	if(st[root].size() and st[root].back().st==x){
		if(st[root].back().nd>y)
			st[root].pop_back();
		else return;
	}
	int son=st[root].size()-1;
	while(son>=1)
		if(is(x,y,st[root][son].st,st[root][son].nd)<=is(st[root][son].st,st[root][son].nd,st[root][son-1].st,st[root][son-1].nd)){
			st[root].pop_back();
			son--;
		}
		else break;
	st[root].pb(q);
}

void merge(int root){
	int t1=0,t2=0;
	while(t1<st[sol].size() and t2<st[sag].size()){
		if(st[sol][t1]>st[sag][t2])
			add(root,st[sol][t1++]);
		else add(root,st[sag][t2++]);
	}
	while(t1<st[sol].size())
		add(root,st[sol][t1++]);
	while(t2<st[sag].size())
		add(root,st[sag][t2++]);
}

void init(int root,int bas,int son){
	if(bas==son)
		return void(st[root].pb( mp(A[bas],(bas-1)*A[bas]-sum[bas-1]) ));
	init(sol,bas,orta);
	init(sag,orta+1,son);
	merge(root);
}

main(){

	scanf("%d",&n);

	for(i=1 ; i<=n ; i++){
		scanf("%d",A+i);
		sum[i]=sum[i-1]+A[i];
	}

	init(1,1,n);

	scanf("%d",&m);

	for(i=1 ; i<=m ; i++){
		scanf("%d %d",&x,&y);
		printf("%d\n",query(1,1,n,y-x+1,y,x-y)+sum[y]);
	}
}
