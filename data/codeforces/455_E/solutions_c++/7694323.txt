#include <cstdio>
#include <algorithm>

using namespace std;

typedef long long int64;

const int N = 100010;
const int M = 100010;

int n, m;
int a[N], s[N];

struct query {
    int i, t, id;
    void init(int _id) {
        scanf("%d %d", &t, &i);
        id = _id;
   }
} Q[M];

int sta[N], top;
double kk[N];

int64 x[N], y[N];
int64 ans[M];

bool cmp_i(const query& a, const query& b) {
    return a.i < b.i;
}
double cj(double a, double b, double c, double d) {
    return a * d - b * c;
}
double cjs(int i, int j, int k) {
    return cj(x[j] - x[i], y[j] - y[i], x[k] - x[i], y[k] - y[i]);
}
int findL(int ll, int rr, int lim) {
    while (ll < rr) {
        int mm = (ll + rr) >> 1;
        if (sta[mm] >= lim)
            rr = mm;
        else
            ll = mm + 1;
    }
    return ll;
}
int64 getans(int i, int t) {
    double K = i - t;
    int ll = findL(1, top, i - t + 1);
    int rr = top;
    while (ll < rr) {
        int mm = (ll + rr) >> 1 ;
        if (kk[mm] >= K)
            rr = mm;
        else
            ll = mm + 1;
    }
    return x[sta[ll]] * (t - i) + y[sta[ll]];
}
int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
        scanf("%d", a + i);
        s[i] = s[i - 1] + a[i];
    }
    scanf("%d", &m);
    for (int i = 1; i <= m; ++i) {
        Q[i].init(i);
    }
    sort(Q + 1, Q + m + 1, cmp_i);
    int tQ = 1;
    for (int i = 1; i <= n; ++i) {
        x[i] = a[i];
        y[i] = (int64)i * a[i] - s[i];
        while (top && x[i] <= x[sta[top]]) --top;
        while (top > 1 && cjs(sta[top - 1], sta[top], i) <= 0) --top;
        sta[++top] = i;
        if (top > 1) {
            kk[top - 1] = (y[sta[top]] - y[sta[top - 1]]) / (x[sta[top]] - x[sta[top - 1]]);
        }
        while (tQ <= m && Q[tQ].i == i) {
            ans[Q[tQ].id] = getans(i, Q[tQ].t) + s[i];
            ++tQ;
        }
    }
    for (int i = 1; i <= m; ++i) {
        printf("%I64d\n", ans[i]);
    }
}
