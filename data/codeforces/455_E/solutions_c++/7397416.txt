#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <map>
#include <iostream>
#include <set>
#include <queue>
#include <stack>
#define zero(x) (((x)>0?(x):-(x))<eps)
//#include <bits/stdc++.h>
#define mem(a,b) memset((a),(b),sizeof((a)))
#define INF 0x3f3f3f3f
#define eps 1e-6
#pragma comment(linker,"/STACK:102400000,102400000")
#define ZERO(x) (fabs(x) < eps)
#define EQ(x, y) (fabs((x) - (y)) < eps)

using namespace std;

typedef long long lld;

int n, m;
int num[100009];
int sum[100009];
int ddec[100009];
int nl[100009];

long long cal(int lvl, int l, int r) {
    return sum[r] - sum[l] + num[l] * (lvl - (r - l));
}

int MAIN() {
    scanf("%d", &n);
    sum[0] = 0;
    num[0] = -1;
    ddec[0] = 0;
    for(int i = 1; i <= n; i++) {
        scanf("%d", &num[i]);
        sum[i] = sum[i - 1] + num[i];
        if(num[i] > num[i - 1]) {
            ddec[i] = ddec[i - 1];
        } else {
            ddec[i] = i;
        }
        int t = i - 1;
        while(num[t] >= num[i]) {
            t = nl[t];
        }
        nl[i] = t;
    }
    for(int i = 1; i <= n; i++) {
        nl[i] = min(nl[i], ddec[i]);
    }
    scanf("%d", &m);
    int lvl, l, r;
    while(m--) {
        scanf("%d%d", &lvl, &r);
        l = r;
        long long ret = 1000000000000ll;
        while(1) {
            ret = min(ret, cal(lvl, l, r));
            if(r - l + 1 == lvl) break;
            l = nl[l];
            l = max(l, r - lvl + 1);
        }
        printf("%I64d\n", ret);
    }
    return 0;
}


int main() {
#ifdef LOCAL_TEST
    freopen("F://ACMdata.txt","r",stdin);
//    freopen("F://ACMdata.txt","w",stdout);
//    freopen("F://out.txt","w",stdout);
#else
#endif

//    int cases;
//    scanf("%d", &cases);
////    cin >> cases;
//    int cc = 1;
//    while(cases--) {
////    while(~scanf("%d", &n)) {
//        printf("Case #%d: ", cc++);
    MAIN();
//    }
    return 0;
}
