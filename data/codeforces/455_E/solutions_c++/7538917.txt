#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <cmath>
#include <ctime>
#include <algorithm>
#define LL long long
using namespace std;

int N,M,x,y,len,tot,ans;
int a[500010],sum[500010];
int head[600010],en[600010];
class rec{public:int k,b;double x;}q[10000010],b[500010];
bool cmp(const rec &a,const rec &b){return a.k>b.k||(a.k==b.k&&a.b>b.b);}
double calc(rec a,rec b){return double(b.b-a.b)/(a.k-b.k);}
bool check(rec a,rec b,rec c){
//	return calc(a,b)<=calc(a,c);
//	double t1=calc(a,b);
//	double t2=calc(a,c);
	return (LL)(b.b-a.b)*(a.k-c.k)>(LL)(c.b-a.b)*(a.k-b.k);
//	return t1>t2;
}

void build(int x,int l,int r){
	if (l==r){
		head[x]=++tot;
		q[tot].k=a[l];
		q[tot].b=(l-1)*a[l]-sum[l-1];
		q[tot].x=-2e9;
		en[x]=tot;
		return;
	}
	int mid=(l+r)>>1;
	build(x<<1,l,mid);
	build((x<<1)+1,mid+1,r);
	len=0;
	for (int i1=head[x<<1],i2=head[(x<<1)+1];i1<=en[x<<1]||i2<=en[(x<<1)+1];)
	if (i2>en[(x<<1)+1]||(i1<=en[x<<1]&&cmp(q[i1],q[i2])))b[++len]=q[i1++];
	else b[++len]=q[i2++];
	head[x]=tot+1;
	for (int i=1;i<=len;i++){
		while (tot>head[x]&&check(q[tot-1],q[tot],b[i]))
		tot--;
		if (tot>=head[x]&&q[tot].k==b[i].k)tot--;
		q[++tot]=b[i];
	}
	en[x]=tot;
	q[head[x]].x=-2e9;
	for (int i=head[x]+1;i<=en[x];i++)q[i].x=calc(q[i-1],q[i]);
}

int calc(int x,int l,int r,int ll,int rr,int data){
	if (l==ll&&r==rr){
		int ls=head[x],rs=en[x];
		while (ls<rs){
			int mid=(ls+rs+1)>>1;
			if (q[mid].x>data)rs=mid-1;
			else ls=mid;
		}
		return q[ls].k*data+q[ls].b;
	}
	int mid=(l+r)>>1;
	if (rr<=mid)return calc(x<<1,l,mid,ll,rr,data);
	else if (ll>mid)return calc((x<<1)+1,mid+1,r,ll,rr,data);
	else return min(calc(x<<1,l,mid,ll,mid,data),calc((x<<1)+1,mid+1,r,mid+1,rr,data));
}

int main(){
	scanf("%d",&N);
	for (int i=1;i<=N;i++)scanf("%d",&a[i]),sum[i]=sum[i-1]+a[i];
	build(1,1,N);
	scanf("%d",&M);
	for (int i=1;i<=M;i++){
		scanf("%d%d",&x,&y);
		int l=max(1,y-x+1),r=y;
		ans=calc(1,1,N,l,r,x-y)+sum[y];
		printf("%d\n",ans);
	}
}