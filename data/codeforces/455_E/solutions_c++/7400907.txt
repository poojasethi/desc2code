#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
using namespace std;

typedef long long ll;
typedef double ld;

const int N=100010;
const int G=500;
const ld inf=ll(1e18);
int n,m,c,i,j,k,l,p,x,y,z,top,all,li[N],st[N],ed[N];
ll a[N],s[N],ans[N];

struct node{ll x,y;int i;}d[N],dd[N];	ld k0[N];
node operator-(node a,node b){return(node){a.x-b.x,a.y-b.y};}
ll operator*(node a,node b){return a.x*b.y-a.y*b.x;}
ll xj(node a,node b,node c){return (b-a)*(c-a);}

inline int L(int i){return (i-1)*G+1;}
inline int R(int i){return min(i*G,n);}
inline int C(int i){return (i-1)/G+1;}
bool cmp(node a,node b){return make_pair(a.x,a.y)<make_pair(b.x,b.y);}
ld D(node a,node b){return (b.y-a.y)/(b.x-a.x+1e-12);}

int main()
{	
	scanf("%d",&n);for(int i=1;i<=n;i++)scanf("%I64d",&a[i]),s[i]=s[i-1]+a[i],d[i]=(node){a[i],s[i]-1LL*i*a[i],i};
	
	c=n/G+(n%G>0);
	for(int p=1;p<=c;p++)
	{
		top=0;
		sort(d+L(p),d+1+R(p),cmp);
		for(int i=L(p);i<=R(p);i++)
		for(dd[++top]=d[i];top>2&&xj(dd[top-2],dd[top-1],dd[top])>=0;top--)dd[top-1]=dd[top];
		
		st[p]=all+1;ed[p]=all+top;
		for(int i=1;i<=top;i++)
			li[++all]=dd[i].i,k0[all]=(i==top)?inf:-D(dd[i],dd[i+1]);
	}
	
	#define up(x,y) x=min(x,y)
	for(scanf("%d",&m);m;m--)
	{
		scanf("%d%d",&x,&y);	x=y-x;
		ll ans=ll(1e18);
		for(int i=x;i<=min(y,R(C(x)));i++)
			up(ans,s[y]-s[i]+1LL*(i-x)*a[i]);
		for(int i=max(x,L(C(y)));i<=y;i++)
			up(ans,s[y]-s[i]+1LL*(i-x)*a[i]);
		for(int i=C(x)+1;i<C(y);i++){
			int p=li[lower_bound(k0+st[i],k0+1+ed[i],x)-k0];
			up(ans,s[y]-s[p]+1LL*(p-x)*a[p]);
		}
		printf("%I64d\n",ans);
	}
	
	return 0;
}