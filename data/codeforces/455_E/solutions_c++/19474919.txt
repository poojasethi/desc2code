#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cctype>
#include<ctime>
#include<cstdlib>
#include<string>
#include<queue>
#include<cmath>
#include<set>
#include<map>
#include<bitset>
#include<vector>
#define Rep(x,a,b) for (int x=a;x<=(int)b;x++)
#define Drp(x,a,b) for (int x=a;x>=(int)b;x--)
#define Cross(x,a) for (int x=Hd[a];~x;x=Nx[x])
#define ll long long
#define INF (1<<29)
#define PII pair<int,int>
#define PDD pair<double,double>
#define mk(a,b) make_pair(a,b)
#define fr first
#define sc second
#define eps 1e-12
using namespace std;
inline ll Rd(){
	ll x=0;int ch=getchar(),f=1;
	while (!isdigit(ch)&&(ch!='-')&&(ch!=EOF)) ch=getchar();
	if (ch=='-'){f=-1;ch=getchar();}
	while (isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}
	return x*f;
}
inline void Rt(ll x){
	if (x<0) putchar('-'),x=-x;
	if (x>=10) Rt(x/10),putchar(x%10+'0');
		else putchar(x+'0');
}
const int N=100005;
int id[N*18],Tmp[N],St[N<<2],En[N<<2],End,k[N],b[N],Top,n,Pre[N];
double INC[N*18];
double inc(int i,int j){
	return 1.0*(b[j]-b[i])/(k[i]-k[j]);
}
void Build(int i,int l,int r){
	if (l==r){
		St[i]=En[i]=++End;
		id[St[i]]=l;
		return;
	}
	int mid=l+r>>1,ls=i<<1,rs=i<<1|1;
	Build(ls,l,mid),Build(rs,mid+1,r);
	int j1=St[ls],j2=St[rs],Js=0;
	while (j1<=En[ls]||j2<=En[rs]){
		if (j1<=En[ls]&&(j2>En[rs]||(k[id[j1]]==k[id[j2]]?b[id[j1]]<b[id[j2]]:k[id[j1]]>k[id[j2]]))) Tmp[++Js]=id[j1++];
			else Tmp[++Js]=id[j2++];
	}
	St[i]=++End;Top=St[i];id[Top]=Tmp[1];
	Rep(j,2,Js){
		if (k[Tmp[j]]==k[id[Top]]) continue;
		while (Top>St[i]&&inc(Tmp[j],id[Top])-INC[Top-1]<=eps) Top--;
		INC[Top]=inc(Tmp[j],id[Top]);id[++Top]=Tmp[j];
	}
	En[i]=End=Top;
}
int Query(int i,int l,int r,int Fr,int Bh,int x){
	if (l==Fr&&r==Bh){
		int L=St[i],R=En[i]-1;
		while (L<R){
			int mid=L+R>>1;
			if (x<=INC[mid]) R=mid;
				else L=mid+1;
		}
		if (L==En[i]-1&&x>INC[L]) L++;
		return k[id[L]]*x+b[id[L]];
	}
	int mid=l+r>>1,ls=i<<1,rs=i<<1|1;
	if (Bh<=mid) return Query(ls,l,mid,Fr,Bh,x);
		else if (Fr>mid) return Query(rs,mid+1,r,Fr,Bh,x);
			return min(Query(ls,l,mid,Fr,mid,x),Query(rs,mid+1,r,mid+1,Bh,x));
}
int main(){
	n=Rd();
	Rep(i,1,n) k[i]=Rd();
	Rep(i,1,n) Pre[i]=Pre[i-1]+k[i];
	Rep(i,1,n) b[i]=k[i]*i-Pre[i];
	Build(1,1,n);
	int q=Rd();
	while (q--){
		int x=Rd(),y=Rd();
		Rt(Pre[y]+Query(1,1,n,y-x+1,y,x-y)),putchar('\n');
	}
}
