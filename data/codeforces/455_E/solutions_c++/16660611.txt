#include<bits/stdc++.h>

using namespace std;

#define pii pair<int,int>
#define ll long long
#define N (int)(1e5+10)
#define mod 1000000007
#define mp make_pair
#define pb push_back
#define nd second
#define st first
#define inf mod
#define endl '\n'
#define sag (sol|1)
#define sol (root<<1)
#define ort ((bas+son)>>1)
#define bit(x,y) ((x>>y)&1)

int i,j,k,n,m,x,y,z;
vector< pii > St[4*N];
int sum[N],a[N];

double intersect(pii x,pii y){
	return (1.0*y.nd-x.nd)/(x.st-y.st);
}

int f(int root,int x){
	int bas=0;
	int son=St[root].size()-1;
	while(bas<son){
		int orta=bas+son>>1;
		if(bas==orta)
			orta++;
		if(intersect(St[root][orta],St[root][orta-1]) >= x)
			son = orta-1;
		else
			bas = orta;
	}

/*	int ans=inf;

	for(int i=0 ; i<St[root].size() ; i++)
		ans = min(ans,St[root][i].st*x + St[root][i].nd);

	return ans;*/

	return St[root][bas].st*x + St[root][bas].nd;
}

int que(int root,int bas,int son,int x,int y,int t){
	if(bas > y or son < x)
		return inf;

	if(x <= bas and son <= y)
		return f(root,t);

	return min(que(sol,bas,ort,x,y,t) , que(sag,ort+1,son,x,y,t));
}

void add(int root,pii x){
	if(St[root].size() and St[root].back().st == x.st)
		if(St[root].back().nd >= x.nd)
			St[root].pop_back();
		else
			return;

	int l = St[root].size();

	while(St[root].size()>1)
		if(intersect(St[root][l-1],St[root][l-2]) >= intersect(St[root][l-2],x)){
			St[root].pop_back();
			l--;
		}
		else
			break;
	St[root].pb(x);
}

void merge(int root){
	int t1=0,t2=0;
	while(t1<St[sol].size() and t2<St[sag].size()){
		if(St[sol][t1].st > St[sag][t2].st)
			add(root,St[sol][t1++]);
		else
			add(root,St[sag][t2++]);
	}

	while(t1 < St[sol].size())
		add(root,St[sol][t1++]);
	
	while(t2 < St[sag].size())
		add(root,St[sag][t2++]);
}

void init(int root,int bas,int son){

	if(bas == son){
		St[root].pb(mp(a[bas],bas*a[bas]-sum[bas]));
		return;
	}

	init(sol,bas,ort);

	init(sag,ort+1,son);

	merge(root);

	return;
}

int main(){
	cin >> n;

	for(i=1 ; i<=n ; i++){
		scanf("%d",a+i);
		sum[i] = sum[i-1] + a[i];
	}

	init(1,1,n);

	cin >> m;

	for(i=1 ; i<=m ; i++){
		scanf("%d %d",&x,&y);

		printf("%d\n",que(1,1,n,y-x+1,y,x-y) + sum[y]);
	}
}
