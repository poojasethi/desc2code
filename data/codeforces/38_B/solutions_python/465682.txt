# -*- coding: UTF-8 -*-

# from itertools import *
# from collections import defaultdict

# def gcd(a,b):
#     while b > 0: a,b = b, a%b
#     return a

# def baseN(num,b,numerals="0123456789abcdefghijklmnopqrstuvwxyz"):
#     return ((num == 0) and  "0" ) or ( baseN(num // b, b).lstrip("0") + numerals[num % b])
def covered_horse(a):
    return [ j for j in
            [chr((ord(a[0])-2))+chr(ord(a[1])-1),
             chr((ord(a[0])-2))+chr(ord(a[1])+1),
             chr((ord(a[0])+2))+chr(ord(a[1])-1),
             chr((ord(a[0])+2))+chr(ord(a[1])+1),
             chr((ord(a[0])-1))+chr(ord(a[1])-2),
             chr((ord(a[0])-1))+chr(ord(a[1])+2),
             chr((ord(a[0])+1))+chr(ord(a[1])-2),
             chr((ord(a[0])+1))+chr(ord(a[1])+2)]
             if j[0] in "abcdefgh" and j[1] in "12345678"]

l = raw_input()
h = raw_input()
covered = set(covered_horse(l) + covered_horse(h) + [h, l] + [l[0]+j for j in "12345678"] + [j+l[1] for j in "abcdefgh"])
print 64-len(covered)

