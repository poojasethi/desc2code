#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <memory.h>

using namespace std;

struct Edge {
	int to, id;
	Edge(int to, int id) : to(to), id(id) {}
};

vector< vector<Edge> > gr;

int color, l, r;
int a[5001];
void dfs(int v) {
	a[v] = color;
	for (vector<Edge>::iterator it = gr[v].begin(); it != gr[v].end(); ++it) {
		if (it->id < l || it ->id > r) {
			if (a[it->to] == 0) {
				dfs(it->to);
			}
		}
	}
}

int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	
	gr.resize(n);
	int x, y;
	for (int i = 0; i < m; ++i) {
		scanf("%d%d", &x, &y);
		--x; --y;
		gr[x].push_back(Edge(y, i + 1));
		gr[y].push_back(Edge(x, i + 1));
	}

	int k;
	scanf("%d", &k);
	for (int i = 0; i < k; ++i) {
		scanf("%d%d", &l, &r);
		memset(a, 0, sizeof(a));
		color = 0;
		for (int j = 0; j < n; ++j) {
			if (a[j] == 0) {
				++color;
				dfs(j);
			}
		}
		printf("%d\n", color);
	}

	return 0;
}
