# -*- coding: utf-8 -*-
"""
Spyder Editor

This temporary script file is located here:
/home/zangetsu/.spyder2/.temp.py
"""

from __future__ import division;
from bisect import *;
import sys;
from math import *;
from fractions import *;
from itertools import *; 
import io;
import re;

INF = 987654321987654321987654321;

def readint(delimiter=' ') :
    return map(int, raw_input().split(delimiter));

def readstr(delimiter=' ') :
    return raw_input().split(delimiter);

def readfloat(delimiter=' ') :
    return map(float, raw_input().split(delimiter));

def index(a, x):
    'Locate the leftmost value exactly equal to x'
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    raise ValueError

def find_lt(a, x):
    'Find rightmost value less than x'
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_le(a, x):
    'Find rightmost value less than or equal to x'
    i = bisect_right(a, x)
    if i:
        return a[i-1]
    raise ValueError

def find_gt(a, x):
    'Find leftmost value greater than x'
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

def find_ge(a, x):
    'Find leftmost item greater than or equal to x'
    i = bisect_left(a, x)
    if i != len(a):
        return a[i]
    raise ValueError

def bin_search(a, x, left, right) :

    while left<=right :
        mid = (left + right)//2;
        
        if a[mid] == x :
            return mid;
        elif a[mid] < x :
            left = mid + 1; 
        elif a[mid] > x :
            right = mid - 1;
                       
        pass
    
    return -1;
    pass

def printf(format, *args):
    """Format args with the first argument as format string, and write.
    Return the last arg, or format itself if there are no args."""
    sys.stdout.write(str(format) % args)
    pass

if __name__ == '__main__':
    px = [];
    py = [];
    visited = set();
    min_x, min_y, max_x, max_y = INF, INF, -1, -1;    
    for ii in xrange(8) :
        nowx, nowy = readint();
        if (nowx, nowy) not in visited :
            px.append(nowx);
            py.append(nowy);
            visited.add((nowx, nowy));
        pass
    valid = True;
    if len(visited) != 8 :
        valid = False;
    else :
        min_x = min(px);
        min_y = min(py);
        max_x = max(px);
        max_y = max(py);
        cmin_x, cmin_y, cmax_x, cmax_y = 0, 0, 0, 0;
        hor_arr = [];
        ver_arr = [];
        for ii in xrange(len(visited)) :
            if px[ii] == min_x :
                cmin_x += 1;
            if px[ii] == max_x :
                cmax_x += 1;
            if py[ii] == min_y :
                cmin_y += 1;
            if py[ii] == max_y :
                cmax_y += 1;
            
            if px[ii] == min_x and min_y < py[ii] < max_y :
                hor_arr.append(py[ii]);
            if px[ii] == max_x and min_y < py[ii] < max_y :
                hor_arr.append(py[ii]);
            if py[ii] == min_y and min_x < px[ii] < max_x :
                ver_arr.append(px[ii]);
            if py[ii] == max_y and min_x < px[ii] < max_x :
                ver_arr.append(px[ii]);
            pass
            
        if cmin_x == cmin_y == cmax_x == cmax_y == 3 and len(hor_arr) == 2 and len(ver_arr)==2 and hor_arr[0] == hor_arr[1] and ver_arr[0] == ver_arr[1] :
            valid = True;
        else :
            valid = False;
            
    
    if valid :
        print "respectable"
    else :
        print "ugly"
        
    
    
        
    
    pass