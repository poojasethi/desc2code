#include <cstdio>
#define rec(i, x, n) for(int i = x; i <= n; i++)
typedef long long LL;
const int maxk = 50, maxm = maxk << 1;
const LL p = 1000000007;
LL n, k, m, C[maxk][maxk];
struct _matrix {
	LL num[maxm][maxm];
} E, trans;
inline _matrix matmul(_matrix A, _matrix B) {
	_matrix ans;
	rec(i, 0, m) rec(j, 0, m) {
		ans.num[i][j] = 0;
		rec(o, 0, m) ans.num[i][j] = (ans.num[i][j] + A.num[i][o] * B.num[o][j] % p) % p;
	}
	return ans;
}
_matrix qpow(_matrix A, LL r) {
	_matrix ans = E;
	for(_matrix t = A; r; r >>= 1, t = matmul(t, t)) if(r & 1) ans = matmul(ans, t);
	return ans;
}
int main() {
	scanf("%I64d%I64d", &n, &k); m = ((k + 1) << 1) + 1 - 1; // -1 is to simplify index...
	rec(i, 0, k) {
		C[i][0] = 1;
		rec(j, 1, i) C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % p;
	}
	rec(i, 0, m) E.num[i][i] = 1;
	trans.num[0][0] = trans.num[1][0] = 1;
	rec(i, 1, k + 1) rec(j, i, k + 1) trans.num[j][i] = trans.num[j + k + 1][i] = trans.num[j][i + k + 1] = C[k - i + 1][k - j + 1];
	_matrix res = qpow(trans, n);
	LL ans = 0;
	rec(i, 1, m) ans = (ans + res.num[i][0]) % p;
	printf("%I64d\n", ans);
	return 0;
}
