#include <cstdio>
#include <cstring>
using namespace std;
const int N = 100;
const int Mo = 1e9 + 7;
long long n,m;int k;
long long c[N][N];
struct Martix
{
    long long a[N][N];
    Martix()
    {
        memset(a,0,sizeof(a));
    }
} base;

Martix Mul(Martix a,Martix b)
{
    Martix res;
    for (int i=0;i<n;++i)
        for (int j=0;j<n;++j)
            for (int k=0;k<n;++k)
            {
                res.a[i][j] += a.a[i][k] * b.a[k][j];
                res.a[i][j] %= Mo;
            }
    return res;
}
Martix Pow(Martix a,long long t)
{
    Martix res;
    for (int i=0;i<n;++i)
        res.a[i][i] = 1;
    while (t)
    {
        if (t & 1)
            res = Mul(res,a);
        a = Mul(a,a);
        t >>= 1;
    }
    return res;
}
void Init()
{
    scanf("%I64d%d",&m,&k);
    n = 2 * k + 3;
    memset(c,0,sizeof(c));
    for (int i=0;i<=k;++i)
    {
        c[i][0] = c[i][i] = 1;
        for (int j=1;j<i;++j)
                c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
    }
}
void Work()
{
    if (m == 1)
    {
        puts("1");
        return;
    }
    for (int i=0;i<=k;++i)
        for (int j=0;j<=i;++j)
            base.a[i][j] = base.a[i + k + 1][j] = base.a[i][j + k + 1] = c[i][j];
    base.a[n - 1][k] = base.a[n - 1][n - 1] = 1;

    Martix res = Pow(base, m);
    long long ans = 0;
    for (int i=0;i<2*k+2;i++)
        ans = (ans + res.a[n - 1][i]) % Mo;
    printf("%I64d\n",ans);
}
int main()
{
    Init();
    Work();
    return 0;
}
