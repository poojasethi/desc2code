#include <iostream>
#include <cstring>
using namespace std;
typedef long long ll;
const int p = 1000000000+7;
ll c[50][50], s, k;

struct mat 
{
    ll a[100][100];
    mat() { memset(a, 0, sizeof(a)); }
    mat mul(mat y, int n)
    {
        mat ans;
        for (int i=0; i<n; i++)
            for (int j=0; j<n; j++)
                for (int l=0; l<n; l++) 
                {
                    ans.a[i][j] += (this->a[i][l])*y.a[l][j];
                    ans.a[i][j] %= p;
                }
        return ans;
    }
    mat Qpow(ll n, ll l) //n 幂次 l 长度 
    {
        mat x;
        for (int i=0; i<l; i++) x.a[i][i] = 1;
        while (n)
        {
            if (n & 1) x = x.mul((*this),l);
            (*this) = this->mul((*this),l);
            n /= 2;
        }
        return x;
    }
};

void init()
{
    cin >> s >> k;
    for (int i=0; i<=k; i++)
    {
        c[i][0] = c[i][i] = 1;
        for (int j=0; j<i; j++) 
            c[i][j] = (c[i-1][j-1] + c[i-1][j]) % p;
    }
}

int main()
{
    init();
    mat base;
    for (int i=0; i<=k; i++)    
        for (int j=0; j<=i; j++)
        {
            base.a[i][j] = base.a[i+k+1][j] = base.a[i][j+k+1] = c[i][j];
        }
    base.a[2*k+2][k] = base.a[2*k+2][2*k+2] = 1;
    mat ans = base.Qpow(s, 2*k+3);
    ll out = 0;
    for (int i=0; i<2*k+2; i++) 
        out = (out + ans.a[2*k+2][i]) % p;
    cout << out << endl; 
    return 0;
}
