#include<bits/stdc++.h>

using namespace std;

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define sol (root+root)
#define sag (root+root+1)
#define orta ((bas+son)/2)
#define ll long long
#define pii pair<int,int>
#define int ll

const int mod=1e9+7;

int n,k,i,j;
int comb[45][45];

class matris{
	public:
		int A[85][85];
		matris(){
			memset(A,0,sizeof A);
		}
		matris operator*(matris B){
			int i,j,l;
			matris ans;
			for(i=1 ; i<=2*k+3 ; i++)
				for(j=1 ; j<=2*k+3 ; j++)
					for(l=1 ; l<=2*k+3 ; l++)
						ans[i][j]=(ans[i][j]+A[i][l]*B[l][j]%mod)%mod;
			return ans;
		}
		int* operator[](int x){
			return A[x];
		}
}m;

matris FE(matris x,int k){
	if(k==1)
		return x;
	matris temp=FE(x,k/2);
	temp=temp*temp;
	if(k&1)
		temp=temp*x;
	return temp;
}

main(){

	scanf("%lld %lld",&n,&k);

	for(i=0 ; i<=k ; i++)
		for(j=0 ; j<=i ; j++)
			if(!j or !i)
				comb[i][j]=1;
			else comb[i][j]=(comb[i-1][j-1]+comb[i-1][j])%mod;

	for(i=1 ; i<=k+1 ; i++)
		for(j=i ; j<=k+1 ; j++)
			m[i+k+1][j]=m[i][j]=m[i][j+k+1]=comb[k-i+1][j-i];

	m[2*k+3][1]=1;

	m[2*k+3][2*k+3]=1;

	m=FE(m,n+1);

	printf("%lld",m[2*k+3][k+1]);
}
