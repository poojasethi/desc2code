/*zhen hao*/
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int maxn = 90, mod = 1e9 + 7;
int m, k;
ll C[50][50], n;

void add(ll& a, ll b) {
  a += b;
  if (a >= mod) a -= mod;
}

struct Matrix {
  ll M[maxn][maxn];
  Matrix() {
    memset(M, 0, sizeof M);
  }
  Matrix operator * (const Matrix& o) const {
    Matrix ret;
    for (int i = 0; i < m; i++)
      for (int j = 0; j < m; j++)
        for (int k = 0; k < m; k++)
          add(ret.M[i][j], M[i][k] * o.M[k][j] % mod);
    return ret;
  }
};

Matrix quick(Matrix a, ll b) {
  Matrix ret;
  for (int i = 0; i < m; i++) ret.M[i][i] = 1;
  while (b > 0) {
    if (b & 1) ret = ret * a;
    a = a * a;
    b = b / 2;
  }
  return ret;
}

void init() {
  for (int i = 0; i <= k; i++) {
    C[i][0] = 1;
    for (int j = 1; j <= i; j++) add(C[i][j], C[i - 1][j - 1] + C[i - 1][j]);
  }
}

int main() {
//  freopen("case.in", "r", stdin);
  cin >> n >> k;
  init();
  Matrix A, B, res;
  m = 2 * k + 3;

  for (int j = 0; j <= k; j++)
    for (int i = 0; i <= j; i++) {
      A.M[i][j] = C[j][i];
      A.M[i + k + 1][j] = C[j][i] * ((1LL << (j - i)) % mod) % mod;
    }
  for (int i = 0; i <= k; i++)
    A.M[i][i + k + 1] = 1;
  A.M[k][2 * k + 2] = A.M[2 * k + 2][2 * k + 2] = 1;

//  for (int i = 0; i < m; i++) {
//    for (int j = 0; j < m; j++) cout << A.M[i][j] << "   "; puts("");
//  }

  for (int i = 0; i <= k; i++)  B.M[i][0] = 1;

  res = B * quick(A, n + 1);

  cout << res.M[k][2 * k + 2] << endl;
}

 			    	 		 	  			 	 	 				 		