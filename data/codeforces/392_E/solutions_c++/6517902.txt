#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
using namespace std;
typedef long long LL;
const int N = 400+5;
LL INF = 1000000000;

int dp[ N ][ N ];
int dpu[ N ][ N ];
int dpd[ N ][ N ];

int adp[ N ][ N ];
//N^4
int n, w[ N ], v[ N ];
int main()
{
//   freopen("input.txt", "r", stdin);
   scanf("%d", &n);
   for(int i = 1; i <= n; ++ i)
      scanf("%d", &v[i]);
   for(int i = 1; i <= n; ++ i)
      scanf("%d", &w[i]);

   for(int i = 1; i <= n; ++ i)
   {
      for(int j = i; j <= n; ++ j)
      {
         dpu[i][j] = -INF;
         dpd[i][j] = -INF;
         adp[i][j] = -INF;
      }
   }
   for(int i = 1; i <= n; ++ i)
   {
      dp[i][i] = max(0, v[1]);
      dpu[i][i] = v[1];
      dpd[i][i] = v[1];
      adp[i][i] = v[1];
   }
   for(int er = 2; er <= n; ++ er)
   {
      for(int i = 1; i+er-1 <= n; ++ i)
      {
         int j = i+er-1;
         for(int k = i; k < j; ++ k)
         {
            dp[i][j] = max(dp[i][j], dp[i][k]+dp[k+1][j]);
            adp[i][j] = max(adp[i][j], adp[i][k]+adp[k+1][j]);
         }
         if(w[i] < w[j])
         {
            if(w[i]+1==w[j])
            {
               dpu[i][j] = adp[i+1][j-1]+v[2];
            }
            else
            {
               for(int k = i+1; k < j; ++ k)
               {
                  if(w[i] < w[k] && w[k] < w[j] && dpu[i][k] > -INF && dpu[k][j] > -INF)
                  {
                     int re = dpu[i][k]+dpu[k][j]-v[ w[k]-w[i]+1 ]-v[ w[j]-w[k]+1 ]+v[ w[j]-w[i]+1 ];
                     dpu[ i ][ j ] = max(dpu[i][j], re);
                  }
               }
            }
         }
         if(w[i] > w[j])
         {
            if(w[i]-1==w[j])
            {
               dpd[i][j] = adp[i+1][j-1]+v[2];
            }
            else
            {
               for(int k = i+1; k < j; ++ k)
               {
                  if(w[i] > w[k] && w[k] > w[j] && dpd[i][k] > -INF && dpd[k][j] > -INF)
                  {
                     int re = dpd[i][k]+dpd[k][j]-v[ abs(w[k]-w[i])+1 ]-v[ abs(w[j]-w[k])+1 ]+v[ abs(w[j]-w[i])+1 ];
                     dpd[ i ][ j ] = max(dpd[i][j], re);
                  }
               }
            }
         }
         for(int k = i; k <= j; ++ k)
         {
            if(dpu[i][k] > -INF && dpd[k][j] > -INF)
            {
               int re = dpu[i][k]+dpd[k][j]-v[ abs(w[k]-w[i])+1 ]-v[ abs(w[j]-w[k])+1 ]+v[ abs(w[k]-w[i])+abs(w[j]-w[k])+1 ];
               dp[i][j] = max(dp[i][j], re);
               adp[i][j] = max( adp[i][j], re );
            }
         }
      }
   }
   cout<<dp[1][n]<<endl;
   //cout<<dp[1][n]<<" "<<adp[1][n]<<endl;
   return 0;
}
