#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <queue>
#define int64 int

using namespace std;
const int64 Maxn = (int64)1 << 25;
int n,v[550],a[550];
int64 f[550],g[550][550],g2[550][550][3],g3[550][550];
bool vis[550][550],vis2[550][550][3],vis3[550][550];

int64 solve2(int ,int ,int );
int64 solve(int ,int );
int64 work(int ,int );
    
int main()
{
    cin >> n;
    for (int i = 1;i <= n;i++)   scanf("%d",&v[i]);
    for (int i = 1;i <= n;i++)   scanf("%d",&a[i]);
    int64 ans = 0;
    for (int i = 1;i <= n;i++)  {
        f[i] = -Maxn;
        for (int j = 0;j < i;j++)  {
            f[i] = max(f[j] + solve(j + 1,i),f[i]);
            f[i] = max(f[j],f[i]);
        }
        ans = max(ans,f[i]);
    }
    cout << ans;
}

int64 work(int l,int r)
{
    if (l > r)    return 0;
    if (l == r)   return v[1];
    if (vis3[l][r])   return g3[l][r];
    vis3[l][r] = 1;   int64 &ans = g3[l][r];
    ans = solve(l,r);
    for (int i = l;i < r;i++)
        ans = max(work(l,i) + work(i + 1,r),ans);
    return ans;
}
int64 solve2(int l,int r,int sign)
{
    if (l == r)    return 0;
    if (vis2[l][r][sign + 1])    return g2[l][r][sign + 1];
    vis2[l][r][sign + 1] = 1;
    int64 &ans = g2[l][r][sign + 1];   ans = -Maxn;
    for (int i = l + 1;i <= r;i++)
        if (a[i] == a[l] + sign)
            ans = max(ans,solve2(i,r,sign) + work(l + 1,i - 1));
    return ans;
}
int64 solve(int l,int r)
{
    if (abs(a[r] - a[l]) + 1 > r - l + 1)   return -Maxn;
    if (l == r)   return v[1];
    if (vis[l][r])    return g[l][r];
    vis[l][r] = 1;   int64 &ans = g[l][r];
    ans = -Maxn;
    for (int i = l;i <= r;i++)
        {
            if (!(a[i] >= a[l] && a[i] >= a[r]))   continue ;
            if (a[i] - a[l] + a[i] - a[r] + 1 > r - l + 1)   continue ;
            ans = max(solve2(l,i,1) + solve2(i,r,-1) + v[2 * a[i] - a[l] - a[r] + 1],ans);
        }
    return ans;
}
