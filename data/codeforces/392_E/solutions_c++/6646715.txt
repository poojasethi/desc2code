#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
#include <cassert>
#include <complex>
using namespace std;
#define rep(i,a,n) for (int i=a;i<(int)n;i++)
#define per(i,a,n) for (int i=n-1;i>=a;i--)
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define fi first
#define se second
#define SZ(x) ((int)(x).size())
#define ACCU accumulate
#define TWO(x) (1<<(x))
#define TWOL(x) (1ll<<(x))
#define clr(a) memset(a,0,sizeof(a))
#define POSIN(x,y) (0<=(x)&&(x)<n&&0<=(y)&&(y)<m)
#define PRINTC(x) printf("Case #%d: %d\n",++__,x)
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long ll;
typedef long double LD;
typedef pair<int,int> PII;
typedef pair<ll,ll> PLL;
typedef vector<ll> VL;
typedef vector<PII> VPII;
typedef complex<double> CD;
const int inf=0x20202020;
const ll mod=1000000007;
const double eps=1e-9;
const double pi=3.1415926535897932384626;
const int DX[]={1,0,-1,0},DY[]={0,1,0,-1};
ll powmod(ll a,ll b) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
ll powmod(ll a,ll b,ll mod) {ll res=1;a%=mod;for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
ll gcd(ll a,ll b) { return b?gcd(b,a%b):a;}
// head
const int N=410;
int v[N],w[N],dp[N],dp1[N][N],dp2[N][N][2],n;
void upd(int &a,int b) { if (a<b) a=b;}

int main() {
	scanf("%d",&n);
	rep(i,1,n+1) scanf("%d",v+i);
	rep(i,1,n+1) scanf("%d",w+i);
	per(i,1,n+1) {
		dp1[i][i]=v[1],dp2[i][i][0]=dp2[i][i][1]=0;
		rep(j,i+1,n+1) {
			dp2[i][j][0]=dp2[i][j][1]=dp1[i][j]=-inf;
			rep(k,i,j) if (w[j]==w[k]+1) upd(dp2[i][j][0],dp2[i][k][0]+dp1[k+1][j-1]);
			rep(k,i+1,j+1) if (w[i]==w[k]+1) upd(dp2[i][j][1],dp2[k][j][1]+dp1[i+1][k-1]);
			rep(k,i,j+1) {
				int p=w[k]-w[i]+w[k]-w[j]+1;
				if (1<=p&&p<=n) upd(dp1[i][j],dp2[i][k][0]+dp2[k][j][1]+v[p]);
			}
			rep(k,i,j) upd(dp1[i][j],dp1[i][k]+dp1[k+1][j]);
		}
	}
	rep(i,1,n+1) { dp[i]=dp[i-1]; rep(j,1,i+1) upd(dp[i],dp[j-1]+dp1[j][i]);}
	printf("%d\n",dp[n]);
}
