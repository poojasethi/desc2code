#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<vector>
#define N 505
using namespace std;
int a,b,c,d,e,f,h,i,j,k;
int F[N][N][2];
bool hash[N][N][2];
int v[N],g[N];
int G[N];

int soso(int left,int right,bool vv)
{
    if(left > right) return 0;
    if(hash[left][right][vv]) return F[left][right][vv];
    hash[left][right][vv] = true;
    int& ret = F[left][right][vv];
    ret = -(1 << 29);
    if(vv)
    {
        if(left == right) return ret = 0;
        if(g[left] == g[right]) return ret;
        int delta = 1;
        if(g[right] < g[left]) delta = -1;
        for(int ii = left + 1; ii <= right; ii ++)
        if(g[ii] == g[left] + delta)
            ret = max(ret, soso(left + 1, ii - 1, false) + soso(ii, right, true));
    }
    else
    {
        for(int ii = left; ii < right; ii ++)
            ret = max(ret, soso(left, ii, false) + soso(ii + 1, right, false));
        for(int ii = left; ii <= right; ii ++)
        if(g[ii] >= g[left] && g[ii] >= g[right])
        {
            int tt = g[ii] - g[left] + g[ii] - g[right] + 1;
            if(tt > a) continue;
            ret = max(ret, soso(left, ii, true) + soso(ii, right, true) + v[tt]);
        }
    }
    return ret;
}

int main()
{
    cin >> a;
    for(i = 1; i <= a; i ++) scanf("%d", &v[i]);
    for(i = 1; i <= a; i ++) scanf("%d", &g[i]);
    for(i = 1; i <= a; i ++)
    {
        G[i] = G[i - 1];
        for(j = 1; j <= i; j ++)
            G[i] = max(G[i], G[j - 1] + soso(j, i, false));
    }
    cout << G[a] << endl;
    return 0;
}