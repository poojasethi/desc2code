#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <climits>
#include <cstdlib>
#include <cmath>
using namespace std;
typedef long long LL;
const int MAXN = 405;
const LL inf = ~0ULL >> 6;
bool visF[MAXN][MAXN], visG[MAXN][MAXN], visH[MAXN][MAXN];
LL f[MAXN][MAXN], g[MAXN][MAXN], h[MAXN][MAXN], v[MAXN], dp[MAXN];
int N, w[MAXN];
LL calcF(int l, int r);
LL calcG(int l, int r);
LL calcH(int l, int r);

inline int diff(int l, int r) { return  min(abs(w[l] - w[r]), N); }

LL calcF(int l, int r)
{
    if (l == r) return v[1];
    if (visF[l][r]) return f[l][r];
    visF[l][r] = 1;
    LL &res = f[l][r];
    res = calcG(l, r);
    for (int i = l; i < r; ++i) res = max(res, calcF(l, i) + calcF(i + 1, r));
    return res;
}

LL calcG(int l, int r)
{
    if (l == r) return v[1];
    if (visG[l][r]) return g[l][r];
    visG[l][r] = 1;
    LL &res = g[l][r];
    res = -inf;
    for (int i = l; i <= r; ++i)
    if (w[i] >= w[l] && w[i] >= w[r]) {
        LL cur = calcH(l, i) + calcH(i, r) - (v[diff(l, i) + 1] + v[diff(i, r) + 1])
            + v[min(N, diff(l, i) + diff(i, r)) + 1];
        res = max(res, cur);
    }
    return res;
}
LL calcH(int l, int r)
{
    if (l == r) return v[1];
    if (abs(w[l] - w[r]) == 1)
        return (l + 1 < r ? calcF(l + 1, r - 1) : 0) + v[2];
    if (visH[l][r]) return h[l][r];
    visH[l][r] = 1;
    LL &res = h[l][r];
    res = -inf;
    for (int i = l + 1; i < r; ++i) 
    if (w[i] > w[l] && w[r] > w[i] || w[i] > w[r] && w[l] > w[i]) {
        LL cur = calcH(l, i) + calcH(i, r)
            - (v[diff(l, i) + 1] + v[diff(i, r) + 1])
            + v[diff(l, r) + 1];
        res = max(res, cur);
    }
    return res;
}
int main()
{
    scanf("%d", &N);
    for (int i = 1; i <= N; ++i) scanf("%I64d", &v[i]);
    for (int i = 1; i <= N; ++i) scanf("%d", &w[i]);
    v[N + 1] = -inf; LL res(0);
    for (int i = 1; i <= N; ++i) {
        dp[i] = dp[i - 1];
        for (int j = i; j >= 1; --j) dp[i] = max(dp[i], dp[j - 1] + calcF(j, i));
        res = max(res, dp[i]);
    }
    cout << res << endl;
    //system("pause");
    return 0;
}