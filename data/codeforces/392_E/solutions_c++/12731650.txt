#include<iostream>
#include<cstdio>
using namespace std;
const int MaxN = 400 + 10, INF = 0x3f3f3f3f;
int f[MaxN][MaxN], up[MaxN][MaxN], down[MaxN][MaxN], v[MaxN], w[MaxN], LenL, LenR;

void calc(int l,int r)
{
	if(l == r)
	{
		f[l][r] = up[l][r] = down[l][r] = v[1];
		return;
	}
	f[l][r] = up[l][r] = down[l][r] = -INF;
	f[l][r] = max(max(f[l + 1][r], f[l][r - 1]), -INF) + v[1];
	if(w[l] + 1 == w[r]) up[l][r] = max(up[l][r], f[l + 1][r - 1] + v[2]);
	if(w[l] - 1 == w[r]) down[l][r] = max(down[l][r], f[l + 1][r - 1] + v[2]);
	for(int i = l + 1; i < r; ++i)
		if(w[l] < w[i] && w[i] < w[r])
		{
			LenL = w[i] - w[l] + 1;
			LenR = w[r] - w[i] + 1;
			if(i - l + 1 >= LenL && r - i + 1 >= LenR)
				up[l][r] = max(up[l][r], up[l][i] + up[i][r] - v[LenL] - v[LenR] + v[LenL + LenR - 1]);
		}
	for(int i = l + 1; i < r; ++i)
		if(w[l] > w[i] && w[i] > w[r])
		{
			LenL = w[l] - w[i] + 1;
			LenR = w[i] - w[r] + 1;
			if(i - l + 1 >= LenL && r - i + 1 >= LenR)
				down[l][r] = max(down[l][r], down[l][i]	+ down[i][r] - v[LenL] - v[LenR] + v[LenL + LenR - 1]);
		}
	for(int i = l + 1; i < r; ++i)
		if(w[l] < w[i] && w[i] > w[r])
		{
			LenL = w[i] - w[l] + 1;
			LenR = w[i] - w[r] + 1;
			if(i - l + 1 >= LenL && r - i + 1 >= LenR)
				f[l][r] = max(f[l][r], up[l][i] + down[i][r] - v[LenL] - v[LenR] + v[LenL + LenR - 1]);
		}
	for(int i = l; i < r; ++i) f[l][r] = max(f[l][r], f[l][i] + f[i + 1][r]);
	f[l][r] = max(f[l][r], max(up[l][r], down[l][r]));
}

int n, g[MaxN];
int main()
{
	scanf("%d", &n);
	for(int i = 1; i <= n; ++i) scanf("%d", &v[i]);
	for(int i = 1; i <= n; ++i) scanf("%d", &w[i]);
	for(int i = 1; i <= n; ++i)
		for(int j = 1; j + i - 1 <= n; ++j)
			calc(j, i + j - 1);
	
	for(int i = 1; i <= n; ++i)
	{
		g[i] = g[i - 1];
		for(int j = i; j >= 1; --j)
			g[i] = max(g[i], f[j][i] + g[j - 1]);
	}
	cout << g[n] << endl;
	return 0;
}
