#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cstdlib>
using namespace std;

const int inf = 1000000005;
const int maxn = 505;
bool vis[maxn][maxn][2];
int n, f[maxn][maxn][2], w[maxn], v[maxn], dp[maxn];
int mabs(int x){
    return x < 0 ? - x : x;
}
int solve(int l, int r, int k){ //[l, r)
    int &ret = f[l][r][k];
    if (vis[l][r][k]) return ret;
    ret = - inf, vis[l][r][k] = true;
    if (l >= r) return ret = 0;
    if (k){ // g
       if (l == r - 1) return ret = 0;
       if (w[l] == w[r - 1]) return ret;
       int e = (w[l] < w[r - 1]) ? 1 : - 1;
       for (int i = l + 1; i < r; i ++)
          if (w[l] + e == w[i]) ret = max(ret, solve(l + 1, i, 0) + solve(i, r, 1));
       return ret;
    }else{ // f
              //condition I
              for (int i = l + 1; i < r; i ++)
                  ret = max(ret, solve(l, i, 0) + solve(i, r, 0));
              //condition II (k - the peak)
              for (int i = l, t; i < r; i ++)  
                  if (w[i] >= w[l] && w[i] >= w[r - 1] && (t = 2 * w[i] - w[l] - w[r - 1]) < n){
                      ret = max(ret, solve(l, i + 1, 1) + solve(i, r, 1) + v[t]);
                  }
              return ret;
          }
}
int main(){
//    freopen("E.in","r",stdin);
//    freopen("E.out","w",stdout);
    scanf("%d",&n);
    for (int i = 0; i < n; i ++) scanf("%d",&v[i]);
    for (int i = 1; i <= n; i ++) scanf("%d",&w[i]);

    memset(vis, false, sizeof(vis));
    for (int i = 1; i <= n; i ++) dp[i] = - inf;
    dp[0] = 0;
    for (int i = 1; i <= n; i ++){
        dp[i] = max(dp[i - 1], dp[i]);
        for (int j = i; j <= n; j ++)
           dp[j] = max(dp[j], dp[i - 1] + solve(i, j + 1, 0));
    }
    printf("%d\n",dp[n]);
    return 0;
}
