#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cassert>
#include <bitset>

using namespace std;

template<typename T>
inline T sqr(const T &value){
	return value * value;
}

int n;
int x[3000], y[3000];
bitset<3000> array[3000];
pair<int, pair<int, int> > p[3000 * 3000];
int pln = 0;

int main(){
	assert(scanf("%d", &n));
	for (int i = 0; i < n; i++){
		assert(scanf("%d%d", &x[i], &y[i]));
	}
	for (int i = 0; i < n; i++)
		for (int j = i + 1; j < n; j++){
			p[pln++] = make_pair(sqr(x[i] - x[j]) + sqr(y[i] - y[j]), make_pair(i, j));
		}
	stable_sort(p, p + pln), reverse(p, p + pln);
	for (int i = 0; i < pln; i++){
		int u = p[i].second.first, v = p[i].second.second;
		if ((array[u] & array[v]).count()){
			printf("%.10lf\n", sqrtf(p[i].first) / 2);
			return 0;
		}	
		array[u][v] = array[v][u] = true;
	}
	assert(false);
}
