# prefix DP
# Visual hint >_< <_< <_> >_>
# nasty implementation
# too many corner cases


import sys

read = sys.stdin.readline

n = int(read())
seq = [int(x) for x in read().split()]

#print seq

# Compute prefixs left and right
prefix = [1]
for i in xrange(1, n):
    if seq[i] > seq[i-1]:
        prefix.append(prefix[i-1] + 1)
    else:
        prefix.append(1)


suffix = [0]*n
suffix[n-1] = 1
for i in xrange(n-2, -1, -1):
    if seq[i] < seq[i+1]:
        suffix[i] = 1+suffix[i+1]
    else:
        suffix[i] = 1

if n == 1:
    print 1

else:
    #print prefix
    #print suffix
    res = 1
    for i in xrange(0, n):

        res = max(res, prefix[i])
        res = max(res, suffix[i])

        if i == 0:

            if suffix[i] > 1:
                res = max(res, suffix[i])
            else:
                res = max(res, 1+suffix[i+1])
            continue

        if i == n-1:

            if prefix[i] > 1:
                res = max(res, prefix[i])
            else:
                res = max(res, 1+prefix[i-1])
            continue

        a = seq[i-1]
        b = seq[i]
        c = seq[i+1]

        if abs(a-c) > 1 and a < c:
            res = max(res, prefix[i-1]+1+suffix[i+1])


        res = max(res, prefix[i-1]+1)
        res = max(res, 1+suffix[i+1])


    print res
