#include <cstdio>
typedef	long long	ll;
const	int	p = 12345;
const	int	maxw = 123;
const	int	maxd = 26;
const	int	maxc = 1000 + 100;
struct	matrix
{
	int	a[maxw][maxw];
}	s, t;
matrix	operator*(matrix x, matrix y)
{
	matrix z;
	for (int i=0; i<maxw; i++)
		for (int j=0; j<maxw; j++)
		{
			z.a[i][j] = 0;
			for (int k=0; k<maxw; k++)
				z.a[i][j] = (z.a[i][j] + x.a[i][k] * y.a[k][j]) % p;
		}
	return z;
}
int	a[maxd], mlt[maxd], b[maxd];
bool	flag[maxw];
ll	n;
int	m, timer, x, base, ans;
char	ch, tch;
struct	link
{
	int	y, next;
}	map[maxc];
inline	int	trans(int x, int y)
{
	int xx = x / b[y] % mlt[y];
	if (xx == mlt[y] - 1) x -= (mlt[y]-1) * b[y]; else x += b[y];
	return x;
}
int	main()
{
//	freopen("107d.in", "r", stdin);
//	freopen("107d.out", "w", stdout);
	scanf("%I64d%d", &n, &m);
	for (int i=0; i<maxd; i++) mlt[i] = 0;
	for (int i=1; i<=m; i++)
	{
		scanf("%c%c%d", &tch, &ch, &x);
		if (!mlt[ch - 'A']) mlt[ch - 'A'] = 1;
		mlt[ch - 'A'] *= x;
		map[++timer].y = x, map[timer].next = a[ch - 'A'], a[ch - 'A'] = timer;
	}
	base = 1; flag[0] = 1;
	for (int i=0; i<26; i++)
	{
		if (mlt[i] > 1)
		{
			for (int j=0; j<base; j++) if (flag[j])
				for (int k=1; k<mlt[i]; k++)
					for (int l=a[i]; l; l=map[l].next) if (!(k % map[l].y))
						{flag[j + k * base] = 1; break;}
			b[i] = base;
			base *= mlt[i];
		}
		else b[i] = 0;
	}
	for (int i=0; i<26; i++)
		if (mlt[i])
		{
			if (mlt[i] > 1)	for (int j=0; j<base; j++) t.a[j][trans(j, i)] ++;
			else for (int j=0; j<base; j++) t.a[j][j] ++;
		}
	for (int i=0; i<maxw; i++) s.a[i][i] = 1;
	for (int i=0; n>>i; i++)
	{
		if ((n >> i) & 1) s = s * t;
		t = t * t;
	}
	ans = 0;
	for (int i=0; i<maxw; i++) if (flag[i]) ans = (ans + s.a[0][i]) % p;
	printf("%d\n", ans);
//	fclose(stdin);
//	fclose(stdout);
	return 0;
}