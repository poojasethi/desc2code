#include <stdio.h>
#include <sstream>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <memory.h>
#include <queue>
#include <string>
#include <string.h>
#include <cmath>
#include <utility>
#include <time.h>

#define PI 3.1415926535897932384626433832795
#define sqr(x) ((x)*(x))
#define OUT_RT cerr << (float(clock()) / CLOCKS_PER_SEC) << endl

typedef long long LL;
typedef unsigned long long ULL;

using namespace std;

typedef int Tmatrix[125][125];

Tmatrix T, M, A;
int nn, m, c[1111], p[1111];
char t[1111];
LL n;

void Mul(Tmatrix& Res,const Tmatrix& A, const Tmatrix& B){
	for(int i=0;i<nn;i++)
		for(int j=0;j<nn;j++){
			int& sum = Res[i][j];
			sum = 0;
			for(int k=0;k<nn;k++)
				sum = (sum + A[i][k] * B[k][j]) % 12345;
		}
}

int main(){
//	freopen("input.txt","r",stdin);
//	freopen("output.txt","w",stdout);
	cin >> n >> m;
	nn = 1;
	for(int i=0;i<m;i++){
		cin >> t[i] >> p[i];
		c[i] = nn;
		nn *= p[i];
	}
	if(nn >= 125) throw 666;
	for(int i=0;i<nn;i++) {
		for(int ch=0;ch<26;ch++){
			int to = 0;
			bool any = false;
			for(int j=0;j<m;j++) if(t[j] == 'A' + ch){
				if( ((i / c[j]) % p[j]) != p[j] - 1 )
					to += ( ((i / c[j]) % p[j]) + 1 ) * c[j];
				any = true;
			}else to += ((i / c[j]) % p[j]) * c[j];
			if(any){
				M[i][to]++;
//				cout << i << " " << to << endl;
			}
		}
		A[i][i] = 1;
	}
	while(n){
		if(n&1){
			Mul(T, A, M);
			memcpy(A, T, sizeof(T));
		}
		n >>= 1;
		Mul(T, M, M);
		memcpy(M, T, sizeof(T));
	}

	int ans = 0;
	for(int i=0;i<nn;i++) {
		bool all = true;
		for(int ch=0;ch<26;ch++){
			bool any = false;
			bool good = false;
			for(int j=0;j<m;j++) if(t[j] == 'A' + ch){
				if(((i / c[j]) %p[j]) == 0){
					good = true;
					break;
				}
				any = true;
			}
			if(any && !good) {
				all = false;
				break;
			}
		}
		if(all) ans = (ans + A[i][0]) % 12345;
	}
	cout << ans << endl;
	return 0;
}
