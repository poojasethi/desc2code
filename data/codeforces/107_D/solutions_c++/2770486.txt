#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <cstring>
using namespace std;
const int MODER=12345;
int gcd(int x,int y){
	return y?gcd(y,x%y):x;
}
int lcm(int x,int y){
	return x/gcd(x,y)*y;
}
int idGen;
struct Mat{
	int v[150][150];
	int* operator [](int id){
		return v[id];
	}
	friend Mat operator *(Mat& a,Mat &b){
		Mat c;
		memset(&c,0,sizeof(c));
		for(int i=0;i<idGen;i++)
			for(int j=0;j<idGen;j++)
				for(int k=0;k<idGen;k++)
					c[i][j]=(c[i][j]+a[i][k]*b[k][j])%MODER;
		return c;
	}
};

Mat mat;

map<vector<int>,int> m;
bool has[100];
bool ok[100][150];
bool fine[150];
int llcm[100];
int cnt;
long long n;
int make(const vector<int>& v){
	map<vector<int>,int>::iterator it=m.find(v);
	if(it!=m.end())return it->second;
	int id=idGen++;
	m.insert(make_pair(v,id));
	fine[id]=true;
	for(int i=0;i<26;i++)
		if(has[i])
			fine[id]=fine[id] && ok[i][v[i]];
	for(int i=0;i<26;i++)
		if(has[i]){
			vector<int> next(v);
			next[i]=(next[i]+1)%llcm[i];
			mat[id][make(next)]++;
		}
	return id;
}
int main(){
	scanf("%I64d%d",&n,&cnt);
	for(int i=1;i<=cnt;i++){
		char tmp[10];
		int x;
		scanf("%s%d",tmp,&x);
		ok[tmp[0]-'A'][x]=true;
		has[tmp[0]-'A']=true;
	}

	for(int i=0;i<26;i++){
		llcm[i]=1;
		for(int j=1;j<123;j++)if(ok[i][j]){
			llcm[i]=lcm(llcm[i],j);
		}
		//printf("llcm[%d]=%d\n",i,llcm[i]);
		for(int j=123-1;j;j--)if(ok[i][j])
			for(int k=j;k<123;k+=j)
				ok[i][k]=true;
		ok[i][0]=true;
	}

	make(vector<int>(26));
	Mat res;
	memset(&res,0,sizeof(res));
	for(int i=0;i<150;i++)
		res[i][i]=1;
	for(int i=63;i>=0;i--){
		res=res*res;
		if(n>>i&1)
			res=res*mat;
	}
	int ans=0;
	for(int i=0;i<idGen;i++)if(fine[i])
		ans=(ans+res[0][i])%MODER;
	cout<<ans<<endl;
}

