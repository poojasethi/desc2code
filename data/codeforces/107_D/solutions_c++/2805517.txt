/*
Author: LJQ
PROG: Codeforces Beta #83 Div1 D. Crime Management
DATE: 2012.12.22
*/
#include <cstdio>
#include <cstring>

using namespace std;

const int maxc = 27;
const int maxs = 125;
const int MOD = 12345;

typedef long long LL;

bool exist[maxc];
bool vis[maxc][maxs];
int pop[maxc], each[maxc];
LL n; int m, ret;

void init()
{
	scanf("%I64d%d", &n, &m);
	for (int i = 0; i < maxc; i ++) each[i] = 1, exist[i] = 0;
	int len; char st[5];
	for (int i = 0; i < m; i ++){
		scanf("%s%d", st, &len); 
		int v = st[0] - 'A';
		if (!vis[v][len]){
			vis[v][len] = exist[v] = 1; each[v] *= len;
			for (int w = len + len; w < maxs; w += len) vis[v][w] = 1;
		}
	}
}

int a[maxs][maxs];
int b[maxs][maxs];
int tmp[maxs], cur[maxs];

void work()
{
	//find total length
	pop[0] = 1;
	for (int i = 1; i <= maxc; i ++) pop[i] = pop[i-1] * each[i-1];
	int T = pop[maxc];
	//make transform
	for (int s = 0; s < T; s ++)
		for (int j = 0; j < maxc; j ++) if (exist[j]){
			int ns = s + pop[j];
			if ((s % pop[j+1] / pop[j]) + 1 == each[j]) ns -= pop[j+1];
			a[s][ns] ++;
		}
	//mulitply
	cur[0] = 1;
	for (int d = 0; d < 60 && n; d ++){
		if (n & (1LL << d)){
			n ^= 1LL << d;
			memcpy(tmp, cur, sizeof(tmp));
			memset(cur, 0, sizeof(cur));
			for (int i = 0; i < T; i ++)
				for (int j = 0; j < T; j ++)
					cur[j] = (cur[j] + tmp[i] * a[i][j]) % MOD;
		}
		memcpy(b, a, sizeof(b));
		memset(a, 0, sizeof(a));
		for (int k = 0; k < T; k ++)
			for (int i = 0; i < T; i ++)
				for (int j = 0; j < T; j ++)
					a[i][j] = (a[i][j] + b[i][k] * b[k][j]) % MOD;
	}
	//add ans
	ret = 0;
	for (int s = 0; s < T; s ++){
		bool flag = 1;
		for (int i = 0; i < maxc && flag; i ++) if (exist[i]){
			bool mark = 1;
			for (int k = 1; k <= T && mark; k ++)
				if (vis[i][k] && (s % pop[i+1] / pop[i] % k == 0)) mark = 0;
			flag ^= mark;
		}
		if (flag) ret = (ret + cur[s]) % MOD;
	}
}

void print()
{
	printf("%d\n", ret);
}

int main()
{
	init();
	work();
	print();
	return 0;
}
