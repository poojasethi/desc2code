#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
using namespace std;
typedef long long LL;
const int P=12345;
const int maxn=130;
int N,A[maxn];LL n;
bool B[maxn][maxn];

struct Tmtx{
	int a[maxn][maxn];int n;
	Tmtx(){}
	Tmtx(int _n,bool x=0){
		int i;n=_n,memset(a,0,sizeof a);
		for(i=0;i<n;++i)a[i][i]=x;
	}
	Tmtx Tpose()const{
		Tmtx b;register int i,j;
		for(i=0;i<n;++i)
		for(j=0;j<n;++j)b.a[i][j]=a[j][i];
		return b;
	}
	Tmtx operator *(const Tmtx &b)const{
		Tmtx c(n,0);register int k,i,j;
		for(i=0;i<n;++i)
		for(j=0;j<n;++j)
		for(k=0;k<n;++k)
			c.a[i][j]=(c.a[i][j]+a[i][k]*b.a[k][j])%P;
		return c;
	}
	bool operator ==(const Tmtx &b)const{
		register int i,j;
		for(i=0;i<n;++i)
		for(j=0;j<n;++j)
			if(a[i][j]!=b.a[i][j])return false;
		return true;
	}
	void print(){
		int i,j;
		for(i=0;i<n;++i){
			for(j=0;j<n;++j)cerr<<a[i][j]<<' ';
			cerr<<endl;
		}
	}
};
Tmtx pow(Tmtx x,LL k){
	Tmtx Fc=Tmtx(x.n,1);
	for(;k;k>>=1)k&1?Fc=Fc*x:0,x=x*x;
	return Fc;
}

namespace Ninit{
	char s[10];
	void init(){
		int ni,ai,i,j;
		cin>>n>>ni;
		for(i=0;i<26;++i)A[i]=1;
		for(i=0;i<ni;++i){
			scanf("%s%d",s,&ai),A[s[0]-'A']*=ai;
			for(j=0;j<123;++j)B[s[0]-'A'][j]|=(j%ai==0);
		}
	}
}

namespace Nsolve{
	Tmtx An,A0;
	int pw[maxn],ans;
	void solve(){
		int i,j,k,xi,flag;
		for(pw[0]=1,i=1;i<=26;++i)pw[i]=pw[i-1]*A[i-1];
		An.n=A0.n=N=pw[26];
		for(i=0;i<N;++i){
			for(k=0;k<26;++k)if(B[k][0]){
				xi=i/pw[k]%A[k];
				++A0.a[i][i-xi*pw[k]+(xi+1)%A[k]*pw[k]];
			}
		}
		An=pow(A0,n);
		//A0.print();An.print();
		for(i=0;i<N;++i){
			for(flag=0,k=0;k<26;++k){
				if(!B[k][0])continue;
				if(!B[k][i/pw[k]%A[k]])flag=1;
			}
			if(!flag)ans=(ans+An.a[0][i])%P;
		}
		cout<<ans<<endl;
	}
}

int main(){
	//freopen("A.in","r",stdin);
	Ninit::init();
	Nsolve::solve();
	return 0;
}
