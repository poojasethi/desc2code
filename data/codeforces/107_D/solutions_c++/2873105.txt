#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <vector>

using namespace std;

#define P 12345

int M, K[26];
vector<int> fac[26];

int gcd(int a, int b) {return a % b == 0 ? b : gcd(b, a % b);}
int mul[27];
bool vis[26];

struct mat {
	int a[123][123];
	mat() {memset(a, 0, sizeof(a));}
	void ind() {
		memset(a, 0, sizeof(a));
		for (int i = 0; i < M; i++) a[i][i] = 1;
	}
	int *operator[] (int i) {return a[i];}
} G;

mat operator *(mat &a, mat &b) {
	mat c;
	for (int i = 0; i < M; i++) for (int j = 0; j < M; j++) for (int k = 0; k < M; k++)
		c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % P;
	return c;
}

mat Pow(mat a, long long K) {
	mat ret;
	ret.ind();
	for ( ; K; K >>= 1, a = a * a)
		if (K & 1) ret = ret * a;
	return ret;
}

long long n;

int main() {
//	freopen("data.in", "r", stdin);
	scanf("%I64d%d", &n, &M);
	for (int i = 0; i < 26; i++) K[i] = 1;
	for (int i = 0; i < M; i++) {
		char ch;
		while (!isalpha(ch = getchar()));
		int c = ch - 'A';
		int t; scanf("%d", &t);
		K[c] = K[c] * t / gcd(t, K[c]);
		fac[c].push_back(t);
		vis[c] = true;
	}
	mul[0] = 1;
	for (int i = 0; i < 26; i++) mul[i + 1] = mul[i] * K[i];
	M = mul[26];
	for (int m = 0; m < M; m++) {
		for (int i = 0; i < 26; i++) if (vis[i]) {
			int cur = m % mul[i + 1] / mul[i];
			G[m][m - cur * mul[i] + (cur + 1) % K[i] * mul[i]]++;
		}
	}
	G = Pow(G, n);
	int ret = 0;
	for (int i = 0; i < M; i++) {
		bool Flg = true;
		for (int j = 0; j < 26; j++) if (vis[j]) {
			bool flg = false;
			for (int k = 0; k < (int)fac[j].size(); k++)
				if (i % mul[j + 1] / mul[j] % fac[j][k] == 0) flg = true;
			if (!flg) Flg = false;
		}
		if (Flg) ret += G[0][i];//, printf("%d\n", i);;
	}
	printf("%d\n", ret % P);
	return 0;
}
