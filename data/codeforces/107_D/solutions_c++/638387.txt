#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <unistd.h>
#include  <sys/time.h>
using namespace std;
#define li		long long int
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())






//	TYPE
//	mod
//	p.180

#define TYPE li
#define mat vector<vector<TYPE> >
#define MOD 12345ll
#define MAX 1005

mat mul(mat a,mat b){
	mat res(sz(a),vector<TYPE>(sz(b[0]),0));
	rep(i,sz(a))rep(j,sz(b[0]))rep(k,sz(a[0])) res[i][j]=(res[i][j]+a[i][k]*b[k][j])%MOD;
	return res;
}
mat pow(mat a,li n){
	mat res(sz(a),vector<TYPE>(sz(a[0]),0));
	rep(i,sz(a)) res[i][i]=1;
	while(n){
		if(n%2) res=mul(res,a);
		a=mul(a,a);
		n/=2;
	}
	return res;
}

int main(){
	li n,c,sum[26],type[MAX],mods[MAX],all=1;
	vector<li> have,pos,index;
	cin>>n>>c;
	rep(i,26) sum[i]=1;
	rep(i,c){
		string str;
		cin>>str>>mods[i];
		type[i]=str[0]-'A';
		sum[type[i]]*=mods[i];
		if(1<mods[i]) have.pb(i);
	}
	li exist[26];
	rep(i,26) exist[i]=false;
	rep(i,c) exist[type[i]]=true;
	rep(i,c)if(mods[i]==1) exist[type[i]]=false;
	rep(i,26)if(exist[i]) all*=sum[i];
	mat m(all,vector<TYPE>(all,0));
	pos.pb(1);
	rep(i,26)if(exist[i]) index.pb(i);
	rep(i,sz(index)) pos.pb(pos.back()*sum[index[i]]);
	li type_num=0;
	li type_used[26];
	rep(i,26) type_used[i]=0;
	rep(i,c) type_used[type[i]]=1;
	rep(i,26)if(type_used[i] && !exist[i]) type_num++;	
	rep(i,all){
		m[i][i]=(m[i][i]+type_num)%MOD;
		rep(j,sz(index)){
			li now=(i%pos[j+1])/pos[j];
			li tmp=i-now*pos[j];
			now=(now+1)%sum[index[j]];
			tmp+=now*pos[j];
			m[i][tmp]=(m[i][tmp]+1)%MOD;
		}
	}
	li res=0;
	m=pow(m,n);
	rep(i,all){
		li bad[26];
		rep(j,26) bad[j]=exist[j];
		rep(j,sz(index)){
			li now=(i%pos[j+1])/pos[j];
			rep(k,c)if(type[k]==index[j] && now%mods[k]==0) bad[index[j]]=false;
		}
		li ok=true;
		rep(j,26)if(bad[j]) ok=false;
		if(ok) res=(res+m[0][i])%MOD;
	}
	cout<<res<<endl;
}



