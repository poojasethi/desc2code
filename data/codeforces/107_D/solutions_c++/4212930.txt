#include<cstdio>
#include<cstring>
#include<algorithm>
#define lim 12345
using namespace std;
struct matrix
{	int num[140][140];
	matrix()
	{	memset(num,0,sizeof(num));
	}
};
int num[30][30];
int legal[140];
int base[30];
int mod[30];
int cnt[30];
long long c;
int n,m;
int gcd(int a,int b)
{	if (b==0)
		return a;
	return gcd(b,a%b);
}
matrix operator *(matrix& a,matrix& b)
{	int i,j,k;
	matrix c;
	for (i=1;i<=n;++i)
		for (j=1;j<=n;++j)
			for (k=1;k<=n;++k)
			{	c.num[i][j]+=a.num[i][k]*b.num[k][j];
				c.num[i][j]%=lim;
			}
	return c;
}
matrix qp(matrix b,int e)
{	matrix t,ans;
	ans.num[1][1]=1;
	t=b;
	while (c)
	{	if (c&1)
			ans=ans*t;
		t=t*t;
		c/=2;
	}
	return ans;
}
int work()
{	int i,j,k,res,t,ans=0;
	matrix mat;
	base[0]=1;
	for (i=1;i<=26;++i)
		base[i]=base[i-1]*mod[i-1];
	n=base[26];
	for (i=0;i<n;++i)
	{	legal[i]=1;
		for (j=0;j<26;++j)
			if (cnt[j])
			{	res=0;
				t=i+base[j];
				if ((i/base[j]+1)%mod[j]==0)
					t-=base[j+1];
				++mat.num[i+1][t+1];
				for (k=1;k<=cnt[j];++k)
					if ((i/base[j])%num[j][k]==0)
						res=1;
				legal[i]&=res;
			}
	}
	mat=qp(mat,c);
	for (i=0;i<n;++i)
		if (legal[i])
			ans=(ans+mat.num[1][i+1])%lim;
	return ans;
}
int main()
{	int i,p,x;
	char type[4];
	scanf("%I64d%d",&c,&m);
	for (i=0;i<26;++i)
		mod[i]=1;
	for (i=1;i<=m;++i)
	{	scanf("%s",type);
		p=type[0]-'A';
		scanf("%d",&x);
		mod[p]*=x/gcd(x,mod[p]);
		++cnt[p];
		num[p][cnt[p]]=x;
	}
	printf("%d\n",work());
}

   		 	  	 	 		  	      	