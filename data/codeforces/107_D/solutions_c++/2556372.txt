#include<cstdio>
#include<cstring>
#include<vector>
#define fo(i,a,b) for(i=a;i<=b;++i)
#define fd(i,a,b) for(i=a;i>=b;--i)
using namespace std;
const int mm=130,mo=12345;
int t[mm][mm],x[mm][mm],c[mm][mm];
int s[30],d[30];
vector<int>e[30];
int Q,l,ans,now;
long long n;
char ch;
int gcd(int a,int b)
{
    if(!b)return a;
    return gcd(b,a%b);
}
void mul(int a[][mm],int b[][mm],int c[][mm])
{
    int i,j,k;
    fo(i,0,l)
        fo(j,0,l)
        {
            c[i][j]=0;
            fo(k,0,l)c[i][j]=(c[i][j]+a[i][k]*b[k][j])%mo;
        }
}
void dg(long long n)
{
    if(n==1)return;
    dg(n/2);
    mul(x,x,c);
    if(n%2==1)mul(c,t,x);
    else memcpy(x,c,sizeof c);
}
int main()
{
    scanf("%I64d%d",&n,&Q);
    if(n==0)
    {
        printf("1\n");
        return 0;
    }
    int i,j,k,p;
    fo(i,0,29)s[i]=1;
    while(Q--)
    {
        scanf("%s%d",&ch,&j);
        i=ch-64;
        e[i].push_back(j);
        s[i]=s[i]*j/gcd(s[i],j);
    }
    d[29]=1;
    fd(i,28,0)d[i]=d[i+1]*(s[i+1]);
    l=d[0]-1;
    fo(i,0,l)
    {
        fo(j,0,29)
        {
            if(e[j].size()==0)continue;
            p=i/d[j]%s[j];
            ++t[i][i-p*d[j]+(p+1)%s[j]*d[j]];
        }
    }
    memcpy(x,t,sizeof t);
    dg(n);
    fo(i,0,l)
    {
        now=x[0][i];
        fo(j,0,29)
        {
            if(e[j].size()==0)continue;
            p=i/d[j]%s[j];
            for(k=0;k<e[j].size();++k)if(p%e[j][k]==0)break;
            if(k==e[j].size()){now=0;break;}
        }
        ans=(ans+now)%mo;
    }
    printf("%d\n",ans);
    return 0;
}