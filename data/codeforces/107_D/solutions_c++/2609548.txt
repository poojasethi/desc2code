#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

#define pb push_back
typedef long long i64;

const int maxn = 201,mo = 12345;

struct mat
{
    int m[maxn][maxn];
}A,B,Tmp;

i64 n;
int m,all,ans;
int sz[maxn];
vector < int > num,cri[maxn];

void cheng(mat &A,mat &B,mat &C)
{
    int i,j,k;
    memset(&Tmp,0,sizeof(Tmp));
    for (i = 0; i < all; ++i)
        for (j = 0; j < all; ++j)
            for (k = 0; k < all; ++k)
                Tmp.m[i][j] = (Tmp.m[i][j]+A.m[i][k]*B.m[k][j])%mo;
    C = Tmp;
}

void mul(i64 H)
{
    for (; H; H >>= 1) 
    {
        if (H & 1) cheng(B,A,B);
        cheng(A,A,A);
    }
}

int main()
{
    int i,j,k,sum,now;
    char order;
    bool ok,ch;

    all = 1;
    for (i = 0; i < 26; ++i) sz[i] = 1;
    scanf("%I64d %d\n",&n,&m);
    for (i = 1; i <= m; ++i)
        scanf("%c %d\n",&order,&j),cri[order-'A'].pb(j),sz[order-'A'] *= j,all *= j;
    for (i = 0; i < all; ++i)
    {
        now = i;
        num.clear();
        for (j = 0; j < 26; ++j)
        {
            num.pb(now % sz[j]);
            now /= sz[j];
        }
        for (j = 0; j < 26; ++j)
        {
            num[j]++;
            sum = 0;
            for (k = 25; k >= 0; --k)
                sum = sum*sz[k]+num[k]%sz[k];
            num[j]--;
            if (cri[j].size()) ++A.m[sum][i];
        }
    }
    for (i = 0; i < all; ++i) B.m[i][i] = 1;
    mul(n);
    for (i = 0; i < all; ++i)
    {
        ok = true;
        now = i;
        for (j = 0; j < 26; ++j)
        {
            if (!cri[j].size()) continue ;
            ch = false;
            for (k = 0; k  < (int)cri[j].size(); ++k)
                if (now % cri[j][k] == 0) ch = true;
            if (!ch) ok = false;
            now /= sz[j];
        }
        if (ok) ans += B.m[i][0];
    }
    printf("%d",ans%mo);

    return 0;
}
