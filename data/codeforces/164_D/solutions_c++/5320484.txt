#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<cstdio>
#include<vector>
#define N 1010
#define sqr(x) (x)*(x)
using namespace std;
int n,k,bo[N],X[N],Y[N],d[N][N],l,r,mid,i,j,v[N];
vector<int> e[N];
bool dfs(int x,int k){
	if(k<0)return 0;
	if(x>n)return 1;
	if(v[x])return dfs(x+1,k);
	//not use x
	for(int i=0;i<e[x].size();++i)if(!v[e[x][i]]++)k--;
	if(dfs(x+1,k))return 1; int tmp=k;
	for(int i=0;i<e[x].size();++i)if(--v[e[x][i]]==0)k++;
	//use x
	v[x]=1;
	if(tmp<k-1 && dfs(x+1,k-1))return 1;
	v[x]=0;
	return 0;
}
bool check(int mid){
	int i,j,id;
	for(i=1;i<=n;++i)e[i].clear(),bo[i]=0,v[i]=0;
	for(i=1;i<=n;++i)
		for(j=1;j<=n;++j)if(d[i][j]>mid)e[i].push_back(j);
	return dfs(1,k);
}
int main(){
	scanf("%d%d",&n,&k);
	for(i=1;i<=n;++i)scanf("%d%d",&X[i],&Y[i]);
	for(i=1;i<=n;++i)
		for(j=1;j<=n;++j)d[i][j]=sqr(X[i]-X[j])+sqr(Y[i]-Y[j]);
	l=0; r=2e9+1e8;
	while(l<=r){
		mid=(0ll+l+r)/2;
		if(check(mid))r=mid-1;
		else l=mid+1;
	}
	check(r+1);
	for(i=1;i<=n;++i)if(v[i])printf("%d ",i),k--;
	for(i=1;i<=n;++i)if(!v[i] && k)printf("%d ",i),k--;
}