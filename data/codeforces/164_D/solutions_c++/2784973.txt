#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
int n,K;
int x[1010],y[1010];
int d[1010][1010];
int fg[1010];
int nn;
int val[1000010];
struct edge
{
	int v;
	edge *n;
};
edge EPool[1000010],*ep,*g[1010];
bool dfs(int u,int k)
{
	if(u>n)return 1;
	if(fg[u])return dfs(u+1,k);
	for(edge *i=g[u];i;i=i->n)
	{
		int v=i->v;
		if(!fg[v]++)k--;
	}
	if(k>=0&&dfs(u+1,k))return 1;
	int t=k;
	for(edge *i=g[u];i;i=i->n)
	{
		int v=i->v;
		if(!--fg[v])k++;
	}
	fg[u]=1,k--;
	if(k>=0&&k>t&&dfs(u+1,k))return 1;
	fg[u]=0;
	return 0;
}
inline void addedge(int u,int v)
{
	ep->v=v,ep->n=g[u],g[u]=ep++;
}
bool check(int x)
{
	memset(fg,0,sizeof(fg));
	memset(g,0,sizeof(g));
	ep=EPool;
	for(int i=1;i<=n;i++)
		for(int j=i;j<=n;j++)if(d[i][j]>x)addedge(i,j);
	return dfs(1,K);
}
int main()
{
	scanf("%d%d",&n,&K);
	for(int i=1;i<=n;i++)scanf("%d%d",x+i,y+i);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)d[i][j]=(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);
	for(int i=1;i<=n;i++)
		for(int j=i;j<=n;j++)val[++nn]=d[i][j];
	sort(val+1,val+nn+1);
	int t=nn;
	nn=1;
	for(int i=2;i<=t;i++)if(val[i]!=val[nn])val[++nn]=val[i];
	int l=0,r=nn+1;
	while(l+1!=r)
	{
		int mid=l+(r-l)/2;
		if(check(val[mid]))r=mid;
		else l=mid;
	}
	check(val[r]);
	for(int i=1;i<=n;i++)if(fg[i])printf("%d ",i),K--;
	for(int i=1;i<=n;i++)if(!fg[i]&&K)printf("%d ",i),K--;
	return 0;
}
