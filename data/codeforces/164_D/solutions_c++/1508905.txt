#include<cstdio>
#include<cstring>
#include<algorithm>

#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)

using namespace std;

const int N=1002;
const int NN=1000010;

bool kind;
int i,mid,j,l,r,kk,n,tt,tot,sp;
int ki[N],x[N],y[N],du[N],dd[NN],ev[NN],pre[NN],la[N];
int an[N];
int e[N][N];

void remove(int v){
  if((++ki[v])!=1)return;
  sp++;
  for(int j=la[v];j;j=pre[j])
    if(!ki[ev[j]])du[ev[j]]--,du[v]--;
}
void resume(int v){
  if((--ki[v])!=0)return;
  sp--;
  for(int j=la[v];j;j=pre[j])
    if(!ki[ev[j]])du[ev[j]]++,du[v]++;
}

bool dfs(int i){
  if(sp>kk)return false;
  if(i>n){
    an[0]=0;an[n+1]=n+1;
    FOR(j,1,n)if(ki[j])an[++an[0]]=j;else an[--an[n+1]]=j;
    return true;
  }
  if(du[i]==0)return dfs(i+1);
  if(du[i]>1){
    remove(i); if(dfs(i+1))return true; resume(i);
  }
  for(int j=la[i];j;j=pre[j])remove(ev[j]);
  if(dfs(i+1))return true;
  for(int j=la[i];j;j=pre[j])resume(ev[j]);
  return false;
}

void add(int a,int b){
  ++du[a];
  ev[++tot]=b;
  pre[tot]=la[a];
  la[a]=tot;
}

bool ck(int li){
  tot=0; FOR(i,1,n)la[i]=du[i]=ki[i]=0;
  FOR(i,1,n) FOR(j,i+1,n)
    if(e[i][j]>li)add(i,j),add(j,i);
  sp=0;return dfs(1);
}

int main(){
  scanf("%d%d",&n,&kk);
  FOR(i,1,n)scanf("%d%d",&x[i],&y[i]);
  dd[0]=0;
  FOR(i,1,n) FOR(j,1,n)
    e[i][j]=(x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]),dd[++dd[0]]=e[i][j];
  sort(dd+1,dd+1+dd[0]);
  l=0; r=dd[0]-1; dd[0]=0;
  while(l<r){
    mid=(l+r)/2;  if(ck(dd[mid]))r=mid;else l=mid+1;
  }
  //printf("%d ",dd[r]);
  kind=ck(dd[r]);
  FOR(i,1,kk)printf("%d ",an[i]);
}







