#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;
typedef long long ll;
struct point
{
	ll x, y;
	point() {}
	point(ll x, ll y) : x(x), y(y) {}
};
ll SQR(ll x) { return x * x; }
ll SQRdist(point p1, point p2) { return SQR(p1.x - p2.x) + SQR(p1.y - p2.y); }
ll e[2000001], next[2000001], g[2000001], v[2000001];
ll tot = 1, Max = -1;
point p[1001];
ll d[1001][1001];
ll n, k;
void Add(ll u, ll v)
{
	e[tot] = v; next[tot] = g[u]; g[u] = tot ++;
	e[tot] = u; next[tot] = g[v]; g[v] = tot ++;
}
bool dfs(ll x, ll k)
{
	if (x == n + 1) return true;
	if (v[x]) return dfs(x + 1, k);
	for (int i = g[x]; i; i = next[i])
	{
		if (!v[e[i]]) -- k;
		v[e[i]] ++;
	}
	if (k >= 0 && dfs(x + 1, k)) return true;
	ll tmp = k;
	for (int i = g[x]; i; i = next[i])
	{
		v[e[i]] --;
		if (!v[e[i]]) ++ k;
	}
	-- k;
	v[x] ++;
	if (k >= 0 && k > tmp && dfs(x + 1, k)) return true;
	k ++;
	v[x] --;
	return false;
}	
bool check(ll p)
{
	for (int i = 1; i <= n; i ++)
		g[i] = 0, v[i] = 0;
	tot = 1;	
	for (int i = 1; i < n; i ++)	
		for (int j = i + 1; j <= n; j ++)
			if (d[i][j] > p) Add(i, j);
	return dfs(1, k);
}
int main( )
{
	scanf("%I64d %I64d", &n, &k);
	for (ll i = 1; i <= n; i ++)
		scanf("%I64d %I64d", &p[i].x, &p[i].y);
	for (ll i = 1; i < n; i ++)
		for (ll j = i + 1; j <= n; j ++)
		{
			d[i][j] = d[j][i] = SQRdist(p[i], p[j]);
			Max = max(Max, d[i][j]);
		}
	ll l = 0, r = Max;
	while (l < r)
	{
		ll mid = (l + r) >> 1;
		if (check(mid) == false) l = mid + 1;
		else r = mid;
	}
	if (check(l) == false) ++ l;
	if (check(l - 1) == true) -- l;
	check(l);
	for (ll i = 1; i <= n; i ++)
		if (v[i])
		{
			printf("%I64d ", i);
			-- k;
		}
	for (ll i = 1; i <= n && k; i ++)
		if (!v[i]) 
		{
			printf("%I64d ", i);
			-- k;
		}
	printf("\n");
	return 0;
}
