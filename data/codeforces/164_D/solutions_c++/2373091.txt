#include<cstdio>
#include<cstring>
#include<algorithm>
#define fo(i,a,b) for(i=a;i<=b;++i)
using namespace std;
const int mn=1010;
int x[mn],y[mn],n,m,an,i,j,l;
int e[mn][mn],d[mn],del[mn],lo,mid,hi;
int g[mn][mn],ans[mn],v[mn*mn],tt;
bool sol;
int sqr(int x){return x*x;}
void rm(int r)
{
    if(++del[r]!=1)return;
    int i;
    fo(i,1,g[r][0])
        if(!del[g[r][i]])--d[r],--d[g[r][i]];
    ++an;
}
void rp(int r)
{
    if(--del[r]!=0)return;
    int i;
    fo(i,1,g[r][0])
        if(!del[g[r][i]])++d[g[r][i]],++d[r];
    --an;
}
bool dfs(int r)
{
    if(an>m)return 0;
    if(r>n)return 1;
    if(d[r]==0)return dfs(r+1);
    if(d[r]>1)
    {
        rm(r);
        if(dfs(r+1))return 1;
        rp(r);
    }
    int i;
    fo(i,1,g[r][0])rm(g[r][i]);
    if(dfs(r+1))return 1;
    fo(i,1,g[r][0])rp(g[r][i]);
    return 0;
}
bool solve(int v)
{
    fo(i,1,n)g[i][0]=0;
    memset(d,0,sizeof d);
    memset(del,0,sizeof del);
    fo(i,1,n)
        fo(j,i+1,n)
            if(e[i][j]>v)
            {
                g[i][++g[i][0]]=j;
                g[j][++g[j][0]]=i;
                ++d[i],++d[j];
            }
    an=0;
    return dfs(1);
}
int main()
{
    scanf("%d%d",&n,&m);
    fo(i,1,n)scanf("%d%d",x+i,y+i);
    v[1]=0,tt=1;
    fo(i,1,n)
        fo(j,i+1,n)
        {
            e[i][j]=sqr(x[i]-x[j])+sqr(y[i]-y[j]);
            v[++tt]=e[i][j];
        }
    sort(v+1,v+1+tt);
    tt=unique(v+1,v+1+tt)-v-1;
    lo=1,hi=tt;
    while(lo<hi)
    {
        mid=(lo+hi)/2;
        if(solve(v[mid]))hi=mid;else lo=mid+1;
    }
    solve(v[lo]);
    fo(i,1,n)if(del[i])ans[++l]=i;
    fo(i,1,n)
    {
        if(l==m)break;
        if(!del[i])ans[++l]=i;
    }
    printf("%d",ans[1]);
    fo(i,2,l)printf(" %d",ans[i]);
    printf("\n");
    return 0;
}