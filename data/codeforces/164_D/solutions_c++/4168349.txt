#include<cstdio>
#include<cstring>
#define Pow(x) ((x)*(x))
#define ll long long

const int N = 1005;
const int M = 2 * N * N;

int n, k, l;
int x[N], y[N], v[N], d[N][N];
int tot, e[M], next[M], start[N]; 

void Insert(int a, int b) {
    e[++tot] = b; next[tot] = start[a]; start[a] = tot;
}

bool Dfs(int x, int k) {
	if (x > n) return 1;
    if (v[x]) return Dfs(x + 1,  k);
	for (int p = start[x]; p; p = next[p])
        k -= !v[e[p]]++;
	if (k >= 0 && Dfs(x+1, k)) return 1;
    v[x] = 1;
    int tmp = k;
	for (int p = start[x]; p; p = next[p])
        k += !--v[e[p]];
	if (--k >= 0 && k > tmp && Dfs(x + 1,  k)) return 1;
    v[x] = 0;
    return 0; 
}

bool Check(ll mid) {
    l = 0;
	memset(v, 0, sizeof(v));
	memset(start, 0, sizeof(start));
	for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            if (d[i][j] > mid) Insert(i, j);
	return Dfs(1, k); 
}

int main() {
	scanf("%d %d", &n, &k);
	for (int i = 1; i <= n; i ++)
        scanf("%d %d", &x[i], &y[i]); 
	for (int i = 1; i <= n; ++ i)
        for (int j = 1; j <= n; ++ j)
            d[i][j] = Pow(x[i] - x[j]) + Pow(y[i] - y[j]);
    ll l = 0, r = 1ll << 31; 
	while (l < r) {
        int mid = (l + r) / 2;
        if (Check(mid)) r = mid;
        else l = mid+1; 
	}
	Check(r);
    for (int i = 1; i <= n && k; ++ i)
        if (v[i]) printf("%d%s", i, --k ? " " : "\n");
	for (int i = 1; i <= n && k; ++ i)
        if (!v[i]) printf("%d%s", i, --k ? " " : "\n");
	return 0; 
}

			    	       	   					 	