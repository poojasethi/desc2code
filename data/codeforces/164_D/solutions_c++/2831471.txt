#include<cstdio>
#include<vector>
#include<cstring>
#include<algorithm>
#define rep(i,n) for(int i=0;i<n;i++)
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define sqr(x) ((x)*(x))
#define pb push_back
using namespace std;
const int N=1010;
int n,l,m,r,k,v,x[N],y[N],d[N][N],a[N*N>>1],cr[N];
vector <int> e[N];
bool dfs(int x,int s)
{
	if (x==n) return 1;
	if (cr[x]) return dfs(x+1,s);
	rep(i,e[x].size())
	{
		v=e[x][i];
		s+=!cr[v]++;
	}
	if (s<=k && dfs(x+1,s)) return 1;
	int ns=s;
	rep(i,e[x].size())
	{
		v=e[x][i];
		s-=!--cr[v];
	}
	if (s+1<min(ns,k+1))
	{
		cr[x]++;
		if (dfs(x+1,s+1)) return 1;
		cr[x]--;
	}
	return 0;
}
bool Check(int lim)
{
	rep(i,n) e[i].clear();
	memset(cr,0,sizeof(cr));
	rep(i,n) FOR(j,i+1,n-1)
	    if (d[i][j]>lim) e[i].pb(j),e[j].pb(i);
	return dfs(0,0);
}
int main()
{
	scanf("%d%d",&n,&k);
	rep(i,n) scanf("%d%d",&x[i],&y[i]);
	rep(i,n) FOR(j,i+1,n-1)
		a[m++]=d[i][j]=sqr(x[i]-x[j])+sqr(y[i]-y[j]);
	sort(a,a+m);
	m=unique(a,a+m)-a;
	for(l=0,r=m;l<r;)
	{
		m=l+r >>1;
		if (Check(a[m])) r=m;
		            else l=m+1;
	}
	Check(a[l]);
	rep(i,n) if (cr[i]) printf("%d ",i+1),k--;
	rep(i,n) if (!cr[i] && k) printf("%d ",i+1),k--;
	return 0;
}
