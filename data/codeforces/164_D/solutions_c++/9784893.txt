#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
#include<cmath>
using namespace std;

#define maxn 1010
#define sqr(x) (x)*(x)
typedef long long ll;

int n,k;
int x[maxn],y[maxn];
int dist[maxn][maxn];
int del[maxn];
vector<int> g[maxn];

bool dfs(int u,int k)
{
    if (u>n) return 1;
    if (del[u]) return dfs(u+1,k);
    int tmp;
    for(int i=0;i<g[u].size();i++)
        if (!del[g[u][i]]++) k--;
    if (k>=0 && dfs(u+1,k))
        return 1;
    tmp=max(-1,k);
    for(int i=0;i<g[u].size();i++)
        if (--del[g[u][i]]==0) k++;
    del[u]=1;
    k--;
    if (k>tmp && dfs(u+1,k))
        return 1;
    del[u]=0;
    return 0;
}

bool ok(int mid)
{
    memset(del,0,sizeof(del));
    for(int i=1;i<=n;i++)
        g[i].clear();
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            if (dist[i][j]>mid)
                g[i].push_back(j),g[j].push_back(i);
    return dfs(1,k);
}

int d[maxn*maxn];
int m;

int main()
{
    ios::sync_with_stdio(false);
    cin>>n>>k;
    for(int i=1;i<=n;i++)
        cin>>x[i]>>y[i];
    for(int i=1;i<=n;i++)
        for(int j=i+1;j<=n;j++)
            d[++m]=dist[i][j]=sqr(x[i]-x[j])+sqr(y[i]-y[j]);
    sort(d,d+m+1);
    m=unique(d,d+m+1)-d-1;
    
//  for(int i=1;i<=m;i++)
//      cout<<d[i]<<endl;
        
    int lo=0,hi=m;
    int mid;
    while (lo<hi)
    {
        mid=(lo+hi)/2;
        if (ok(d[mid]))
            hi=mid;
        else
            lo=mid+1;
    }
    ok(d[lo]);
    for(int i=1;i<=n;i++)
        if (del[i]) 
        {
            cout<<i<<' ';
            k--;
        }
    for(int i=1;i<=n;i++)
        if (!del[i] && k)
        {
            cout<<i<<' ';
            k--;
        }
    cout<<endl;
    return 0;
}
            