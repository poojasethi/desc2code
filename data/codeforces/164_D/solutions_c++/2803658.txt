/*
Author: LJQ
PROG: VK Cup 2012 Round 3 D. Minimum Diameter
DATE: 2012.12.21
*/
#include <vector>
#include <cstdio>
#include <algorithm>

using namespace std;

const int maxn = 1005;
const int maxm = 500005;

int x[maxn], y[maxn];
int dis[maxm];
vector <int> adj[maxn];
int n, m, K;

void init()
{
	scanf("%d%d", &n, &K);
	for (int i = 1; i <= n; i ++) scanf("%d%d", &x[i], &y[i]);
}

inline int dist2(int i, int j){
	return (x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]);
}

#define pb push_back

int vis[maxn];

bool dfs(int t, int cnt)
{
	if (t > n) return 1;
	if (vis[t]) return dfs(t + 1, cnt);//selected
	int ts = adj[t].size();
	//not choose
	for (int i = 0; i < ts; i ++) cnt -= !vis[adj[t][i]], vis[adj[t][i]] ++;
	if (cnt >= 0 && dfs(t + 1, cnt)) return 1;
	int tmp = cnt;
	//choose
	for (int i = 0; i < ts; i ++) vis[adj[t][i]] --, cnt += !vis[adj[t][i]];
	cnt --; vis[t] ++;
	if (cnt >= 0 && cnt > tmp && dfs(t + 1, cnt)) return 1;
	vis[t] --;
	return 0;
}

bool check(int lim)
{
	for (int i = 1; i <= n; i ++) adj[i].clear(), vis[i] = 0;
	for (int i = 1; i < n; i ++)
		for (int j = i+1; j <= n; j ++)
			if (dist2(i, j) > lim) adj[i].pb(j), adj[j].pb(i);
	return dfs(1, K);
}

void work()
{
	m = 0;
	for (int i = 1; i < n; i ++)
		for (int j = i+1; j <= n; j ++)
			dis[++ m] = dist2(i, j);
	sort(dis + 1, dis + m + 1);
	int m0 = m; m = 1;
	for (int i = 2; i <= m0; i ++)
		if (dis[i] != dis[m]) dis[++ m] = dis[i];
	int l = 0, r = m;
	while (l < r){
		int mid = (l + r) >> 1;
		if (check(dis[mid])) r = mid;
			else l = mid + 1;
	}
	check(dis[l]);
}

void print()
{
	int cnt = 0;
	for (int i = 1; i <= n; i ++)
		if (vis[i]) cnt ++, printf("%d ", i);
	for (int i = 1; i <= n && cnt < K; i ++)
		if (!vis[i]) cnt ++, printf("%d ", i);
	puts("");
}

int main()
{
	init();
	work();
	print();
	return 0;
}
