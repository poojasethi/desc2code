#include<iostream>
#include<vector>

using namespace std;

int mark[100005], cnt[100005];
vector<int> v[100005];

void DFS(int n, int pre)
{
	cnt[n] = 1;
	for(int i = 0; i < v[n].size(); i++)
	{
		int x = v[n][i];
		if(x != pre && !mark[x])
		{
			DFS(x, n);
			cnt[n] += cnt[x];
		}
	}
}

int find(int n, int val)
{
	for(int i = 0; i < v[n].size(); i++)
		if(!mark[v[n][i]] && cnt[v[n][i]] > val / 2 && cnt[v[n][i]] < cnt[n])
			return find(v[n][i], val);
	return n;
}

void solve(int u, int c)
{
	DFS(u, -1);
	int x = find(u, cnt[u]);
	mark[x] = c;
	for(int i = 0; i < v[x].size(); i++)
		if(!mark[v[x][i]])
			solve(v[x][i], c + 1);
}

int main()
{
	int n;
	cin >> n;
	for(int i = 1; i < n; i++)
	{
		int a, b;
		cin >> a >> b;
		a--, b--;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	solve(0, 1);
	for(int i = 0; i < n; i++)
		cout << char(mark[i] + 'A' - 1) << ' ';
	cout << endl;
	return 0;
}
