#include <iostream>
#include <set>

using namespace std;

const int maxN = 100000+10;

int n, sz[maxN], ans[maxN];
set <int> g[maxN];

void dfs(int v, int par = -1)
{
	sz[v] = 1;
	for (set<int>::iterator it = g[v].begin() ; it != g[v].end() ; it++)
	{
		int u = *it;
		if (u != par)
		{
			dfs(u, v);
			sz[v] += sz[u];
		}
	}
	return;
}

int split(int v, int SZ, int par = -1)
{
	for (set<int>::iterator it = g[v].begin() ; it != g[v].end() ; it++)
	{
		int u = *it;
		if (u != par && sz[u] > SZ/2)
			return split(u, SZ, v);
	}
	return v;
}

void dq(int v, int lev = 0)
{
	dfs(v);
	v = split(v, sz[v]);
	ans[v] = lev;
	for (set<int>::iterator it = g[v].begin() ; it != g[v].end() ; it++)
	{
		int u = *it;
		g[u].erase(v);
		dq(u, lev+1);
	}
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> n;
	for (int i = 1 ; i <= n-1 ; i++)
	{
		int u, v;
		cin >> u >> v;
		g[u].insert(v);
		g[v].insert(u);
	}
	dq(1);
	for (int i = 1 ; i <= n ; i++)
		cout << char(ans[i] + 'A') << " ";
	cout << endl;
	return 0;
}
