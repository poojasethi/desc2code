//In the name of God
#include <iostream>
#include <vector>
using namespace std;
const int N = 1e5 + 5;

int n, mark[N], dp[N], par[N];
char ans[N];
bool flag;
vector<int> adj[N];

void dfs(int v, char c, int n) {
	dp[v] = 1, mark[v] = c;
	for (int i = 0;i < adj[v].size(); i++) {
		int u = adj[v][i];
		if (!ans[u])
			if (mark[u] < c)
				dfs(u, c, n), dp[v] += dp[u];
			else
				par[v] = u;
		if (flag)
			return;
	}
	if (2 * dp[v] >= n) {
		ans[v] = c;
		for (int i = 0; i < adj[v].size(); i++) {
			int u = adj[v][i];
			if (!ans[u]) {
				dfs(u, c + 1, (u == par[v]? n - dp[v]: dp[u]));
				flag = false;
			}
		}
		flag = true;
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		u--, v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs(0, 'A', n);
	for (int i = 0; i < n; i++)
		cout << ans[i] << ' ';
	cout << '\n';
	return 0;
}
