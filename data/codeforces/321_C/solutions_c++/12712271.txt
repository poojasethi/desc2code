#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 1e5 + 100;

int n;
vector <int> e[MAXN];
bool marked[MAXN];
char ans[MAXN];
int dp[MAXN];
int par[MAXN];
int ans1;

int dfs(int v, int p, int m)
{
	int maxx = 0;
	dp[v] = 1;
	par[v] = p;
	for (int i = 0; i < e[v].size(); i++)
	{
		int u = e[v][i];
		if (!marked[u] && u != p)
		{
			int k = dfs(u, v, m);
			maxx = max(maxx, k);
			dp[v] += k;
		}
	}
	maxx = max(m - dp[v], maxx);
	if (maxx * 2 <= m)
		ans1 = v;
	return dp[v];
}
void func(int a, int m, char c)
{
	ans1 = -1;
	dfs(a, -1, m);
	if (ans1 == -1)
		return;
	int anss = ans1;
	ans[anss] = c;
	marked[anss] = 1;
	for (int i = 0; i < e[anss].size(); i++)
	{
		int u = e[anss][i];
		if (!marked[u])
		{
			if (u == par[anss])
				func(u, m - dp[anss], c + 1);
			else
				func(u, dp[u], c + 1);
		}
	}
}

int main()
{
	cin >> n;
	for (int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		u--; v--;
		e[u].push_back(v);
		e[v].push_back(u);
	}
	func(0, n, 'A');
	for (int i = 0; i < n; i++)
		cout << ans[i] << " ";
	return 0;
}