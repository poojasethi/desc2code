#include <bits/stdc++.h>
using namespace std;
const int N = 100010;
typedef vector <int> vi;

int n, child[N], par[N];
char res[N];
vector <vi> G;
bool vis[N], cent[N];

void dfs(int u, int p) {
	child[u] = 1;
	for (int i = 0; i < G[u].size(); i++) {
		int v = G[u][i];
		if (!cent[v] && v != p) dfs(v, u), child[u] += child[v];
	}
}

int redfs(int u, int p, int root) {
	for (int i = 0; i < G[u].size(); i++) {
		int v = G[u][i];
		if (!cent[v] && v != p && child[root] <= 2 * child[v]) 
			return redfs(v, u, root);
	}
	return u;
}

void centroid(char cur, int u) {
	dfs(u, u); int c = redfs(u, u, u);
	cent[c] = 1; res[c] = cur;
	for (int i = 0; i < G[c].size(); i++) {
		if (!cent[G[c][i]]) centroid(cur+1, G[c][i]);
	} 
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n; G.assign(n + 1, vi());
	for (int i = 1; i <= n-1; i++) {
		int u, v; cin >> u >> v;
		G[u].push_back(v); G[v].push_back(u);
	}
	centroid('A', 1);
	for (int i = 1; i <= n; i++) cout << res[i] << ' '; cout << endl;
}