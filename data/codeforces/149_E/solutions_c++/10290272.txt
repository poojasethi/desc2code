#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 100010;
int f[N], suf[N], pre[N];
char S[N], t[N];
int now;
void Kmp(char *sr) {
	int n = strlen(S), j = 0;
	int m = strlen(sr);
	rep(i, n) {
		while(j && sr[j] != S[i])	j = f[j];
		if(sr[j] == S[i])
			j ++;
		if(now == 0) { 
			if(j && pre[j-1] == -1)
				pre[j-1] = i;
		} else {
			if(j && suf[m-j] == -1)
				suf[m-j] = n-i-1;
		}
	}
}
void getfail(char *sr) { 
	f[0] = f[1] = 0;
	int n = strlen(sr);
	for(int i = 1; i < n; i ++) {
		int j = f[i];
		while(j && sr[i] != sr[j])	j = f[j];
		f[i+1] = sr[i] == sr[j] ? j+1:0;
	}
}
int main() {
	int m;
	scanf("%s", S);
	scanf("%d", &m);
	int n = strlen(S), answer = 0;
	rep(i, m) {
		scanf("%s", t);
		memset(suf, -1, sizeof suf);
		memset(pre, -1, sizeof pre);
		getfail(t);
		Kmp(t);
		now ^= 1;
		int len = strlen(t);
		std::reverse(t, t + len);
		std::reverse(S, S + n);
		getfail(t);
		Kmp(t);
		for(int j = 0; j < len - 1; j ++)
			if(~pre[j] && ~suf[j+1] && pre[j] < suf[j+1]) {
				answer ++;
				break;
			}
		std::reverse(S, S + n);
		now ^= 1;
	}
	printf("%d\n", answer);
	return 0;
}

