#include <algorithm>
#include <iostream>
using namespace std;
const int MAX = 100005;
int f[MAX], first[MAX], last[MAX];
void kmp(bool w, string s, string t)
{
	f[0] = 0;
	f[1] = 0;
	int k = 0;
	for (int i = 1; i < t.length(); i++)
	{
		while (t[i] != t[k] && k != 0)
			k = f[k];
		if (t[i] == t[k])
			k++;
		f[i + 1] = k;
	}
	k = 0;
	for (int i = 0; i < s.length(); i++)
	{
		while (s[i] != t[k] && k != 0)
			k = f[k];
		if (s[i] == t[k])
			k++;
		if (w)
		{
			first[i] = k;
			if (i)
				first[i] = max(first[i], first[i - 1]);
		}
		else
		{
			last[i] = k;
			if (i)
				last[i] = max(last[i], last[i - 1]);
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	string s;
	cin >> s;
	string rev = s;
	reverse(rev.begin(), rev.end());
	int n;
	cin >> n;
	int ans = 0;
	for (int i = 0; i < n; i++)
	{
		string t;
		cin >> t;
		if (t.length() == 1)
			continue;
		kmp(true, s, t);
		reverse(t.begin(), t.end());
		kmp(false, rev, t);
		reverse(last, last + s.length());
		for (int i = 0; i < s.length(); i++)
			if (first[i] + last[i + 1] >= t.length())
			{
				ans++;
				break;
			}
	}
	cout << ans;
	return 0;
}
   	 										 	     		