#include <iostream>
#include <algorithm>

#define MAX 100005
using namespace std;

string str,tstr,s;
int N,M,res,n;
int F[MAX],A[MAX],B[MAX];

void preKMP()
{
	int i,j;
	i=0;j=-1;
	F[i]=j;
	while(i < n)
	{
		while(j>=0 && s[i] != s[j]) j=F[j];
		i++; j++;
		F[i]=j;
	}
}

void KMP(string ss)
{
	int i,j,b;
	b=i=j=0;
	while(i < N)
	{
		while(j>=0 && ss[i] != s[j]) j=F[j];
		i++; j++;
		if(j > b) b=j;
		A[i]=b;
	}
}

void KMP2(string ss)
{
	int i,j,b;
	b=i=j=0;
	while(i < N)
	{
		while(j>=0 && ss[i] != s[j]) j=F[j];
		i++; j++;
		if(j > b) b=j;
		B[N-i]=b;
	}
}

int main()
{
	int i,j;
	cin >> str >> M;
	N=str.size();
	tstr=str;
	reverse(tstr.begin(),tstr.end());
	for(i=0;i<M;i++)
	{
		cin >> s;
		n=s.size();
		if(n > N) continue;
		
		preKMP();
		KMP(str);
		
		reverse(s.begin(),s.end());
			
		preKMP();
		KMP2(tstr);
		
		
		if(n > 1)
		for(j=1;j<=N;j++) if(A[j]+B[j] >= n){res++; break;}
	}
	cout << res << endl;
	return 0;
}
