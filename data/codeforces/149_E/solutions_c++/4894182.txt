#include <iostream>

using namespace std;


int f[1010];
int dp[3][100010];
void make_table(string t)
{
	int k = 0;
	f[1] = 0;
	for (int i = 1; i < t.length(); i++)
	{
		while (k != 0 && t[i] != t[k])
			k = f[k];
		if (t[i] == t[k])
			k++;
		f[i + 1] = k;
	}
}
void kmp(int idx, string s, string t)
{
	make_table(t);
	int k = 0;
	for (int i = 0; i < s.length(); i++)
	{
		while (k != 0 && s[i] != t[k])
			k = f[k];
		if (s[i] == t[k])
			k++;
		dp[idx][i] = k;
	}
}
string reverse(string s)
{
	string t = "";
	for (int i = s.length() - 1; i >= 0; i--)
		t += s[i];
	return t;
}
int main()
{
	string s;
	cin >> s;
	string rs = reverse(s);
	int n;
	cin >> n;
	int ans = 0;
	for (int i = 0; i < n; i++)
	{
		string t;
		cin >> t;
		kmp(0, s, t);
		kmp(1, rs, reverse(t));
		bool good = false;
		int best = 0;
		for (int i = s.length() - 1; i >= 0; i--)
		{
			if (dp[0][i] > 0 && dp[0][i] < t.length())
				if (best >= t.length() - dp[0][i])
				{
					good = true;
					break;
				}
			best = max(dp[1][s.length() - 1 - i], best);
		}
		if (good)
			ans++;
	}
	cout << ans << endl;
}

 		 	 		 		   		  	    	  	