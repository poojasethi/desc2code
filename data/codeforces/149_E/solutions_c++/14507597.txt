#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int M=100005;
char T[M],P[M];
int n,mate[2][M],f[2][M];
void getFail(bool p){
	int m=strlen(P);
	for(int i=1;i<m;i++){
		int j=f[p][i];
		while(j&&P[i]!=P[j]) j=f[p][j];
		f[p][i+1]=P[i]==P[j]?j+1:0;
	}
}
void KMP(bool p){
	int j=0;
	for(int i=0;i<n;i++){
		while(j&&T[i]!=P[j]) j=f[p][j];
		j+=T[i]==P[j];
		mate[p][i]=j;
	}
}
void init(){
	for(int i=0;i<=n;i++)
		f[1][i]=mate[1][i]=f[0][i]=mate[0][i]=0;
}
bool solve(){
	for(int i=0;i<n/2;++i)
		swap(mate[1][i],mate[1][n-i-1]);
	for(int i=n-1;i>=0;i--)
		mate[1][i]=max(mate[1][i],mate[1][i+1]);
	int m=strlen(P);
	for(int i=0;i<=n;i++)
		if(mate[0][i]+mate[1][i+1]>=m) return 1;
	return 0;
}
void change(char*S){
	int m=strlen(S);
	for(int i=0;i<m/2;i++)
		swap(S[i],S[m-i-1]);
}
int main(){
	scanf("%s",T);
	n=strlen(T);
	int t=0,ans=0;
	scanf("%d",&t);
	while(t--){
		scanf("%s",P);
		if(strlen(P)==1) continue;
		getFail(0);
		KMP(0);
		change(P);
		change(T);
		getFail(1);
		KMP(1);
		ans+=solve();
		init();
		change(T);
	}
	printf("%d\n",ans);
	return 0;
}
 		   			     			   		 		 		