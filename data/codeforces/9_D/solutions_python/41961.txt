# -*- coding: utf-8 -*-
from collections import defaultdict
def calc(N,H):
    CACHE = {} # (n,h) -> (#trees >=h , #trees < h)
    CACHE[0,0] = (1, 0)
    for h in range(1,H+1):
        CACHE[0,h] = (0, 1)
    FULL_CACHE = defaultdict(lambda: 0, {0:1, 1:1}) # all trees
    for n in range(2, N+1):
        for i in range(n):
            FULL_CACHE[n] += FULL_CACHE[i]*FULL_CACHE[n-i-1]
    for n in range(1, N+1):
        CACHE[n,1] = (FULL_CACHE[n], 0)
        #print "CACHE[%d,%d]=" % (n,1), CACHE[n,1]
        
    for n in range(1,N+1):
        for h in range(2,H+1):
            l = ge = 0
            for i in range(n):
                l += CACHE[i,h-1][1]*CACHE[n-i-1,h-1][1]
                ge += CACHE[i,h-1][0]*CACHE[n-i-1,h-1][0] +CACHE[i,h-1][1]*CACHE[n-i-1,h-1][0] +  CACHE[i,h-1][0]*CACHE[n-i-1,h-1][1]
            CACHE[n,h] = (ge,l)
            #print "CACHE[%d,%d]=" % (n,h), CACHE[n,h]
    return CACHE[N,H][0]

print calc(*map(int, raw_input().split()))

