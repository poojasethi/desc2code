all = {}
limit = {}
n, m = 0, 0
def searchall( lo, hi ):
  if lo == hi: 
    return 1
  if all.has_key((lo,hi)):
    return all[(lo,hi)]
  all[(lo,hi)] = 0 
  all[(lo,hi)] += searchall( lo+1, hi )
  all[(lo,hi)] += searchall( lo, hi-1 )
  for i in xrange(lo+1,hi):
    all[(lo,hi)] += searchall( lo, i-1 ) * searchall( i+1, hi )
  return all[(lo,hi)]

def searchlimit( lo, hi, depth ):
  global m
  if lo == hi: 
    if depth < m:
      return 1
    else:
      return 0
  if limit.has_key((lo,hi,depth)):
    return limit[(lo,hi,depth)]
  limit[(lo,hi,depth)] = 0 
  limit[(lo,hi,depth)] += searchlimit( lo+1, hi, depth+1 )
  limit[(lo,hi,depth)] += searchlimit( lo, hi-1, depth+1 )
  for i in xrange(lo+1,hi):
    limit[(lo,hi,depth)] += searchlimit( lo, i-1, depth+1 ) * searchlimit( i+1, hi, depth+1 )
  return limit[(lo,hi,depth)]

def main():
  global n, m
  n, m = map( int, raw_input().rstrip().split() )
  ret = searchall( 1, n ) - searchlimit( 1, n, 1 ) 
  print ret 

if __name__ == "__main__":
  main()