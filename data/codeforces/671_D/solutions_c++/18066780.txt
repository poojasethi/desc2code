//
//  0.cpp
//  0
//
//  Created by Apple on 3/12/16.
//  Copyright Â© 2016 ;. All rights reserved.
//

#include <algorithm>
#include <cmath>
#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#include <string>
#include <map>
#include <deque>
#include <queue>
#include <set>

using namespace std;

#define maxn 300111
#define ll long long
#define inf (long long)1e18
#define mid ((x + y)>>1)
#define foreach(i,x) for(__typeof(x.begin())i=x.begin();i!=x.end();i++)

int n,m;
vector<int> adj[maxn], add[maxn], rem[maxn];
int c[maxn], sta[maxn], fin[maxn], w[maxn], dem = 0, u[4*maxn], v[4*maxn];
ll st[4*maxn], lz[4*maxn], dp[maxn];

void init(int i, int x,int y){
    u[i] = x; v[i] = y;
    st[i] = inf;
    lz[i] = 0;
    if( x == y ) return;
    init(i<<1,x,mid);
    init(i<<1|1,mid+1,y);
}

ll update(int i,int x,ll k, ll lzpos){
    if( lzpos != 0){
        lz[i] += lzpos;
    }
    if( x < u[i] || v[i] < x){
        return min(inf, st[i] + lz[i]);
    }
    if( x == u[i] && x == v[i]){
        st[i] = k;
        lz[i] = 0;
        return st[i];
    }
    st[i] = min(update(i<<1, x, k, lz[i]), update(i<<1|1, x, k, lz[i]));
    lz[i] = 0;
    return st[i];
}

ll update(int i,int x,int y,ll k, ll lzpos){
    if( lzpos != 0){
        lz[i] += lzpos;
    }
    if( y < u[i] || v[i] < x){
        return min(inf, st[i] + lz[i]);
    }
    if( x <= u[i] && v[i] <= y){
        lz[i] += k;
        return min(inf, st[i] + lz[i]);
    }
    st[i] = min( update(i<<1, x, y, k, lz[i]), update(i<<1|1, x, y, k, lz[i]));
    lz[i] = 0;
    return st[i];
}

ll get(int i,int x,int y){

    if( y < u[i] || v[i] < x){
        return inf;
    }
    if( x <= u[i] && v[i] <= y){
        return min(inf, st[i] + lz[i]);
    }
    
    return min(inf, min( get(i<<1, x, y) , get(i<<1|1, x, y)) + lz[i]);
}

void dfs(int x, int father){
    sta[x] = dem + 1;
    foreach(i, add[x]) w[*i] = ++dem;
    foreach(i, adj[x]) if (*i != father){
        dfs(*i, x);
    }
    fin[x] = dem;
}

ll solve(int x,int father){
    ll all = 0;
    foreach(i, adj[x]) if( *i != father){
        all += solve(*i, x);
    }
    foreach(i, add[x]) update(1, w[*i], all + c[*i], 0);
    foreach(i, rem[x]) update(1, w[*i], inf, 0);
    
    foreach(i, adj[x])
        if( father != *i){
            update(1, sta[*i], fin[*i], all - dp[*i], 0);
        }
//    cout << x << " : " << all << endl;
    return dp[x] = get(1,sta[x],fin[x]);
}


int main() {
//    freopen("inp.txt", "r", stdin);
    
    scanf("%d%d",&n,&m);
    for(int i=1;i<n;i++){
        int x,y;
        scanf("%d%d",&x,&y);
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    for(int i=1;i<=m;i++){
        int x,y,k;
        scanf("%d%d%d",&x,&y,&k);
        add[x].push_back(i);
        rem[y].push_back(i);
        c[i] = k;
    }
    
    init(1,1,m);
    dfs(1,0);
    ll res = 0;
    foreach(i, adj[1]){
        res += solve(*i, 1);
    }
    bool result = true;
    for(int i=2;i<=n;i++){
        if( dp[i] >= inf){
            result = false;
        }
    }
    if(result)
        cout << res;
    else cout << -1;
    return 0;
}