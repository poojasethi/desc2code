#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 300005
#define maxC 5000000000000007ll
#define pb push_back

using namespace std;
int n, m, num = 0, st[mn], en[mn], c[mn], pos[mn];
long long dp[mn];
vector<int> g[mn], beg[mn], fin[mn];

struct interval
{
    long long tree[mn << 2], lay[mn << 2];

    long long update(int l, int r, int id, int x, long long v)
    {
        if (l > x || r < x)
            return tree[id];
        if (l == r)
            return tree[id] = v;
        int g = ((l + r) >> 1);
        tree[id] = min(min(update(l, g, id << 1, x, v), update(g + 1, r, (id << 1) + 1, x, v)) + lay[id], maxC);
        return tree[id];
    }

    long long update(int l, int r, int id, int x, int y, long long v)
    {
        if (l > y || r < x)
            return tree[id];
        if (x <= l && r <= y)
        {
            lay[id] = min(lay[id] + v, maxC);
            tree[id] = min(tree[id] + v, maxC);
            return tree[id];
        }
        int g = ((l + r) >> 1);
        tree[id] = min(min(update(l, g, id << 1, x, y, v), update(g + 1, r, (id << 1) + 1, x, y, v)) + lay[id], maxC);
        return tree[id];
    }

    long long get(int l, int r, int id, int x, int y)
    {
        if (l > y || r < x)
            return maxC;
        if (x <= l && r <= y)
            return tree[id];
        int g = ((l + r) >> 1);
        return min(get(l, g, id << 1, x, y), get(g + 1, r, (id << 1) + 1, x, y));
    }
} t;

void dfs(int u, int p)
{
    st[u] = num + 1;
    FOR(i, 0, int(beg[u].size()) - 1)
        pos[beg[u][i]] = ++ num;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i];
        if (v != p)
            dfs(v, u);
    }
    en[u] = num;
}

long long solve(int u, int p)
{
    long long re = 0;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i];
        if (v == p)
            continue;
        re = min(re + solve(v, u), maxC);
    }
    if (u == 1)
        return dp[u] = re;
    FOR(i, 0, int(beg[u].size()) - 1)
        t.update(1, m, 1, pos[beg[u][i]], re + c[beg[u][i]]);
    FOR(i, 0, int(fin[u].size()) - 1)
        t.update(1, m, 1, pos[fin[u][i]], maxC);
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i];
        if (v == p)
            continue;
        t.update(1, m, 1, st[v], en[v], re - dp[v]);
    }
    dp[u] = t.get(1, m, 1, st[u], en[u]);
    return dp[u];
}

void setup()
{
    cin >> n >> m;
    int u, v;
    FOR(i, 2, n)
    {
        cin >> u >> v;
        g[u].pb(v);
        g[v].pb(u);
    }
    FOR(i, 1, m)
    {
        cin >> u >> v >> c[i];
        beg[u].pb(i);
        fin[v].pb(i);
    }
}

void xuly()
{
    dfs(1, 0);
    long long ans = solve(1, 0);
    if (ans == maxC)
        ans = -1;
    cout << ans;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
