#include<bits/stdc++.h>

using namespace std;

#define pii pair<int,int>
#define ll long long
#define N (int)(3e5+10)
#define mod 1000000007LL*1000000007LL
#define mp make_pair
#define pb push_back
#define nd second
#define st first
#define inf mod
#define endl '\n'
#define sag (sol|1)
#define sol (root<<1)
#define ort ((bas+son)>>1)
#define bit(x,y) ((x>>y)&1)
#define int long long

int St[4*N],i,j,k,n,m,x[N],y[N],z[N];
int nm[N],S[N],F[N],tme,a,b,dp[N],L[4*N];
vector<int> arr[N],end[N],beg[N];

void push(int root){
	L[sol] += L[root]; L[sol] = min(L[sol],inf);
	L[sag] += L[root]; L[sag] = min(L[sag],inf);
	St[sol] += L[root]; St[sol] = min(St[sol],inf);
	St[sag] += L[root]; St[sag] = min(St[sag],inf);
	L[root] = 0;
}

int que(int root,int bas,int son,int x,int y){
	if(bas > y or son < x)
		return inf;
	if(x <= bas and son <= y)
		return St[root];
	push(root);
	return min(que(sol,bas,ort,x,y) , que(sag,ort+1,son,x,y));
}

int upd1(int root,int bas,int son,int x,int t){
	if(bas > x or son < x)
		return St[root];
	if(bas == son)
		return St[root] = t;
	push(root);
	return St[root] = min(upd1(sol,bas,ort,x,t) , upd1(sag,ort+1,son,x,t));
}

int upd2(int root,int bas,int son,int x,int y,int t){
	if(bas > y or son < x)
		return St[root];
	if(x <= bas and son <= y){
		L[root] += t;
		L[root] = min(L[root] , inf);
		St[root] += t;
		return St[root] = min(St[root] , inf);
	}
	push(root);
	return St[root] = min(upd2(sol,bas,ort,x,y,t) , upd2(sag,ort+1,son,x,y,t));
}

int f(int x,int root){
	
	int sum=0;

	for(int i=0 ; i<arr[x].size() ; i++)
		if(arr[x][i] != root)
			sum += f(arr[x][i],x);

	for(int i=0 ; i<beg[x].size() ; i++){
		upd1(1,1,tme,nm[beg[x][i]],sum+z[beg[x][i]]);
	}

	for(int i=0 ; i<end[x].size() ; i++)
		upd1(1,1,tme,nm[end[x][i]],inf);

	for(int i=0 ; i<arr[x].size() ; i++) {
		if(arr[x][i] == root)
			continue;
		upd2(1,1,tme,S[arr[x][i]],F[arr[x][i]],sum - dp[arr[x][i]]);
	}

//	cout << x << " --> " << que(1,1,tme,S[x],F[x]) << endl;
	dp[x] = que(1,1,tme,S[x],F[x]);

	if(x>1 and S[x] <= F[x] and dp[x] >= inf){
		puts("-1");
		exit(0);
	}
	
	return dp[x];
}

void pre(int x,int root){
	S[x] = tme+1;
	for(int i=0 ; i<beg[x].size() ; i++){
		nm[beg[x][i]] = ++tme;
	}
	for(int i=0 ; i<arr[x].size() ; i++)
		if(arr[x][i] != root)
			pre(arr[x][i],x);
	F[x] = tme;
}

main(){
	cin >> n >> m;

	for(i=1 ; i<n ; i++){
		scanf("%lld %lld",&a,&b);
		arr[a].pb(b);
		arr[b].pb(a);
	}

	for(i=1 ; i<=m ; i++){
		scanf("%lld %lld %lld",x+i,y+i,z+i);
		beg[x[i]].pb(i);
		end[y[i]].pb(i);
	}

	pre(1,0);

	f(1,0);

	ll res=0;

	for(i=0 ; i<arr[1].size() ; i++){
		res += dp[arr[1][i]];
//		cout << arr[1][i] << endl;
		res = min(res,inf);
	}

	if(res == inf)
		puts("-1");
	else
		cout << res << endl;
}
