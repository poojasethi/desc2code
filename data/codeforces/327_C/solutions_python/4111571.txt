# Author: Sachin Jain
# Problem: Magic Five
# Link: http://codeforces.com/problemset/problem/327/C

# To compute 2^0n + 2^(n) + ... + 2^((m-1)n) mod bigPrime (Use GP to find this sum)
def numWaysToDivideNumber(n, m):
  bigPrime = 1000000007
  
  numerator = pow(2, m*n, bigPrime) - 1
  denominator = pow(2, n, bigPrime) - 1
  modularInverseOfDenominator = pow(denominator, bigPrime-2, bigPrime)

  sum = (numerator % bigPrime) * (modularInverseOfDenominator % bigPrime)
  sum %= bigPrime
  return sum

def main():
  number = raw_input()
  numSize = len(number)
  numCopies = input()
  bigPrime = 1000000007
  result = 0

  preComputedSum = numWaysToDivideNumber(numSize, numCopies)

  i = 0
  while (i < numSize):
    if (number[i] == '0' or number[i] == '5'):
      result = result + (preComputedSum * pow(2, i, bigPrime)) % bigPrime
      result %= bigPrime
    i += 1

  print result

if (__name__ == "__main__"):
  main()