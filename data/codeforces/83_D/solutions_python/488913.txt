import math
def isPrime(x):
    i = 2
    while i * i <= x:
        if x % i == 0:
            return 0
        i += 1
    return 1
def GetMin(x):
    i = 2
    while i * i <= x:
        if x % i == 0:
            return i
        i += 1
    return x
def brute_force(a, b, k):
    tot = 0
    for i in range((a - 1) // k + 1,b // k + 1):
        if i % 10000 == 0:
            print(i,tot)
        if i == 1 or GetMin(i) >= k:
            tot += 1
    print(tot)

def solve(x, k):
    def dfs(dep, n, p, x):
        if (dep == len(v) or v[dep] * p > x):
            global ans
            if n % 2 == 0:
                return x // p
            else :
                return - (x // p)
            return
        return dfs(dep + 1, n, p, x) + \
               dfs(dep + 1, n + 1, v[dep] * p, x)
    if k <= 5000:
        v = []
        for i in range(2, k):
            if (isPrime(i)):
                v.append(i)
        
        return dfs(0, 0, 1, x // k)
    else:
        ret = 0
        last = x // k
        v = [0] * (last + 1)
        i = 2
        while i * i <= last:
            if (v[i] == 0):
                c = i
                while c <= last:
                    if (v[c] == 0):
                        v[c] = i
                    c += i
            i += 1
        for i in range(1, last + 1):
            if (i == 1 or (v[i] == 0 and i >= k) or v[i] >= k):
                ret += 1
        return ret
a,b,k = raw_input().split(" ")
a = int(a)
b = int(b)
k = int(k)
if not isPrime(k):
    print(0)
else:
#    brute_force(a,b,k)
    print(solve(b, k) - solve(a - 1, k))
