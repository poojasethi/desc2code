#include <bits/stdc++.h>
using namespace std;

const int N = 100000 + 10;
int f[18][N], n, m, o[N], L[N], R[N], c, ep[N], id[N];
vector<int> G[N], d[N];

void dfs(int u, int f, int p)
{
      ep[u] = p;
      d[p].push_back(++c);
      o[c] = u, L[u] = c;
      for(int i = 0; i < G[u].size(); i++) if(G[u][i] != f) dfs(G[u][i], u, p + 1);
      R[u] = c;
}

int main()
{
      scanf("%d", &n);
      for(int i = 1; i <= n; i++)
      {
            scanf("%d", &f[0][i]);
            G[f[0][i]].push_back(i);
      }
      for(int i = 1; i <= 17; i++) for(int j = 0; j <= n; j++) f[i][j] = f[i - 1][f[i - 1][j]];
      scanf("%d", &m);
      dfs(0, -1, 0);
      for(int i = 0; i < m; i++)
      {
            int k, v, y;
            scanf("%d%d", &v, &k);
            y = v;
            for(int j = 0; j <= 17; j++) if(k >> j & 1) y = f[j][y];
            if(!y) printf("%d ", 0);
            else{
                  vector<int>::iterator s = lower_bound(d[ep[v]].begin(), d[ep[v]].end(), L[y]), e = upper_bound(d[ep[v]].begin(), d[ep[v]].end(), R[y]);
                  printf("%d ", e - s - 1);
            }
      }
      puts("");
      return 0;
}