#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdio>
using namespace std;
const int Maxn=100005;
int p[Maxn];
int Par[20][Maxn];
int siz[Maxn];
int d[Maxn];
int ts[Maxn];
int te[Maxn];
vector<int> dt[Maxn];
int t;
int n,m;
vector<int> e[Maxn];
void _init(){
	for (int i=1;i<=n;i++){
		Par[0][i]=p[i];
	}
	for (int k=0;k<17;k++){
		for (int i=1;i<=n;i++){
			if (Par[k][i]==0) Par[k+1][i]=0; else Par[k+1][i]=Par[k][Par[k][i]];
		}
	}
}
void dfs(int x,int depth){
	dt[depth].push_back(t);
	ts[x]=t;
	d[x]=depth;
	t++;
	for (int i=0;i<e[x].size();i++){
		dfs(e[x][i],depth+1);
	}
	te[x]=t;
}
int main(){
	t=0;
	scanf("%d",&n);
	for (int i=1;i<=n;i++){
		scanf("%d",&p[i]);
		e[p[i]].push_back(i);
	}
	_init();
	dfs(0,0);
	scanf("%d",&m);
	int u,pr;
	for (int i=1;i<=m;i++){
		scanf("%d %d",&u,&pr);
		vector<int> &sb=dt[d[u]];
		for (int j=17;j>=0;j--){
			if (pr & (1<<j)){
				u=Par[j][u];
			}
		}//cout<<u<<endl;
		int start=ts[u],end=te[u];
		if (u==0){
			cout<<0<<endl;
			continue;
		}
		int res=lower_bound(sb.begin(),sb.end(),end)-lower_bound(sb.begin(),sb.end(),start)-1;
		
		printf("%d\n",res);
	}
	return 0;
}
