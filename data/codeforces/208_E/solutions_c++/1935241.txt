#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>
#define MN 100010
using namespace std;

vector<int> pos[MN];
int n,m,x,y,deep[MN],l[MN],r[MN],idx,fa[MN][20];

struct EDGE{
    int pnt;
    EDGE *pre;
    EDGE(){}
    EDGE(int _pnt,EDGE *_pre):pnt(_pnt),pre(_pre){}
}Edge[MN],*SP=Edge,*edge[MN];

inline void addedge(int a,int b){
    edge[a]=new(++SP)EDGE(b,edge[a]);
}

void dfs(int x,int dep){
    deep[x]=dep;
    pos[dep].push_back(idx);
    l[x]=idx++;
    for(EDGE *j=edge[x];j;j=j->pre)
        dfs(j->pnt,dep+1);
    r[x]=idx;
}

int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        scanf("%d",&x);
        fa[i][0]=x;
        addedge(x,i);
    }
    dfs(0,0);
    for(int j=1;j<17;j++)
        for(int i=1;i<=n;i++)
            fa[i][j]=fa[fa[i][j-1]][j-1];
    scanf("%d",&m);
    while(m--){
        scanf("%d%d",&x,&y);
        vector<int>&t=pos[deep[x]];
        for(int i=0;i<17;i++)
            if(y>>i&1) x=fa[x][i];
        
//      t=pos[deep[x]];
        printf("%d ",x?lower_bound(t.begin(),t.end(),r[x])-lower_bound(t.begin(),t.end(),l[x])-1:0);
    }
    return 0;
}
