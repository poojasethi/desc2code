# include<iostream>
# include<cstdio>
# include<algorithm>
# include<cstring>
# include<vector>
using namespace std;
const int N = 100000+10;
int n,anc[N][20],h[N],t = 0,in[N],out[N];
vector<int>c[N],g[N];

void dfs(int u,int l)
{
    in[u] = ++t;
    h[u] = l;
    c[l].push_back(in[u]);
    for(int i=0;i<(int)g[u].size();++i)
    {
        int v = g[u][i];
        dfs(v,l+1);
    }
    out[u] = t;
}

int main()
{
    cin>>n;
    memset(anc,0,sizeof(anc));
    for(int i=1;i<=n;++i)
    {
        cin>>anc[i][0];
        g[anc[i][0]].push_back(i);
    }
    for(int j=1;(1<<j)<=n;++j)
        for(int i=1;i<=n;++i)
            anc[i][j] = anc[anc[i][j-1]][j-1];
    dfs(0,0);
    int m,v,p,x;
    cin>>m;
    while(m--)
    {
        cin>>v>>p;
        x = v;
        for(int i=0;(1<<i)<=p;++i)
            if((p>>i)&1) x = anc[x][i];
        if(x == 0) { printf("0 "); continue; }
        //cout<< lower_bound(c[h[v]].begin(),c[h[v]].end(),out[x])-lower_bound(c[h[v]].begin(),c[h[v]].end(),in[x])<<endl;
        printf("%d ",upper_bound(c[h[v]].begin(),c[h[v]].end(),out[x])-lower_bound(c[h[v]].begin(),c[h[v]].end(),in[x])-1);
    }
    puts("");
    return 0;
}
