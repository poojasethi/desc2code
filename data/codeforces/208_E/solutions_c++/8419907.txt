#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
using namespace std;

#define maxn 100010
int f[17][maxn],d[maxn],l[maxn],r[maxn],t;
vector<int> e[maxn],c[maxn];

void dfs(int p,int level)
{
    d[p]=level;
    c[level].push_back(t);
    l[p]=t++;
    for(int i=0;i<e[p].size();i++)
        dfs(e[p][i],level+1);
    r[p]=t;
}

int main()
{
    ios::sync_with_stdio(false);
    int n,m,v,p;
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        cin>>f[0][i];
        e[f[0][i]].push_back(i);
    }
    dfs(0,0);
    for(int i=1;i<17;i++)
        for(int j=1;j<=n;j++)
            f[i][j]=f[i-1][f[i-1][j]];
    cin>>m;
    while (m--)
    {
        cin>>v>>p;
        vector<int> &u=c[d[v]];
        for(int i=16;i>=0;i--)
            if ((p>>i)&1) v=f[i][v];
        if (v==0)
            cout<<0;
        else
            cout<<lower_bound(u.begin(),u.end(),r[v])-lower_bound(u.begin(),u.end(),l[v])-1;
        cout<<' ';
    }
    return 0;
}