#include <algorithm>
#include <stdio.h>
#include <vector>
#define  maxn      100002
#define  pb        push_back
using    namespace std;

int n,m,t;
int dt[maxn];
int ft[maxn];
int depth[maxn];
int par[maxn][17];
vector<int>lvl[maxn];
vector<int>adj[maxn];

void dfs(int node , int dpth)
{
  dt[node]=++t;
  lvl[dpth].pb(t);
  depth[node]=dpth;
  for(int i=1 ; i<17 ; i++)
    par[node][i]=par[par[node][i-1]][i-1];
  int sz=adj[node].size();
  for(int i=0 ; i<sz ; i++)
    dfs(adj[node][i],dpth+1);
  ft[node]=t;
}

int main()
{
  scanf("%d",&n);
  for(int i=1,x ; i<=n ; i++)
  {
    scanf("%d",&x);
    adj[x].pb(i);
    par[i][0]=x;
  }
  dfs(0,0);
  scanf("%d",&m);
  while(m--)
  {
    int node,x,dpth;
    scanf("%d%d",&node,&x);
    dpth=depth[node];
    for(int i=0 ; i<17 ; i++)
      if((x&(1<<i)))
        node=par[node][i];
    if(!node) { printf("0\n");  continue; }
    int l=lower_bound(lvl[dpth].begin() , lvl[dpth].end() , dt[node])   - lvl[dpth].begin();
    int r=lower_bound(lvl[dpth].begin() , lvl[dpth].end() , ft[node]+1) - lvl[dpth].begin();
    printf("%d\n",r-l-1);
  }
  return 0;
}
