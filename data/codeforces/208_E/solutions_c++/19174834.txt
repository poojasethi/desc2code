#include <map>
#include <set>
#include <list>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <bitset>
#include <vector>
#include <cstdio>
#include <string>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
int a[100005],l[100005],r[100005],f[20][100005],s=0;
vector <int> b[100005],v[100005];
void dfs (int x,int y) {
	int i,t;
	a[x]=y;b[y].push_back(s);l[x]=s;s++;
	for (i=0;i<(int)v[x].size();i++) {t=v[x][i];dfs(t,y+1);}
	r[x]=s;
}
int main ( ) {
	int n,m,i,j,x,y,t,p;
	scanf("%d",&n);
	for (i=1;i<=n;i++) scanf("%d",&f[0][i]);
	for (i=1;i<=n;i++) v[f[0][i]].push_back(i);
	dfs(0,0);
	for (i=1;i<=16;i++) {
		for (j=1;j<=n;j++) f[i][j]=f[i-1][f[i-1][j]];
	}
	scanf("%d",&m);
	for (i=0;i<m;i++) {
		scanf("%d%d",&x,&y);
		t=x;
		for (j=16;j>=0;j--) {
			if ((1<<j)&y) t=f[j][t];
		}
		p=0;
		if (t!=0) p=lower_bound(b[a[x]].begin(),b[a[x]].end(),r[t])-lower_bound(b[a[x]].begin(),b[a[x]].end(),l[t])-1;
		printf("%d ",p);
	}
	puts("");
	return 0;
}
/*
Sample test(s)

input

6
0 1 1 0 4 4
7
1 1
1 2
2 1
2 2
4 1
5 1
6 1

output

0 0 1 0 0 1 1 
*/
