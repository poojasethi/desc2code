#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#include<vector>
using namespace std;
#define N 100010

int n,m;
int head[N],tot;
struct edge{
	int v,next;
}ed[N<<1];
int dis[N],fa[N][20],l[N],r[N],idx;
vector<int> flr[N];

void add(int u,int v){
	ed[tot].v=v;
	ed[tot].next=head[u];
	head[u]=tot++;
}

void dfs(int u,int from){
	dis[u]=dis[from]+1;
	fa[u][0]=from;
	for(int i=1;i<20;i++) fa[u][i]=fa[fa[u][i-1]][i-1];
	flr[dis[u]].push_back(idx);
	l[u]=idx++;
	for(int i=head[u];~i;i=ed[i].next){
		int v=ed[i].v;
		if(v!=from) dfs(v,u);
	}
	flr[dis[u]].push_back(idx);
	r[u]=idx++;
}

int main()
{
	scanf("%d",&n);
	memset(head,-1,sizeof(head));
	for(int i=1;i<=n;i++){
		int u;
		scanf("%d",&u);
		add(u,i);
		add(i,u);
	}
	dfs(0,0);
	scanf("%d",&m);
	while(m--){
		int u,v,p;
		scanf("%d%d",&u,&p);
		v=u;
		for(int i=19;i>=0;i--){
			if(p&(1<<i)) v=fa[v][i];
		}
		if(v){
			int L=l[v],R=r[v];
			L=lower_bound(flr[dis[u]].begin(),flr[dis[u]].end(),L)-flr[dis[u]].begin();
			R=lower_bound(flr[dis[u]].begin(),flr[dis[u]].end(),R)-flr[dis[u]].begin()-1;
			printf("%d\n",(R-L)/2);
		}else printf("0\n");
	}
	return 0;
}

		 		     			  	 		 			 	 	  		