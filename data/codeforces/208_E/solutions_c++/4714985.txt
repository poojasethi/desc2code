#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 1000 * 100 + 10;
int p[MAXN], d[MAXN], st[MAXN], end[MAXN];
vector<int> ng[MAXN], h[MAXN], id[MAXN];
bool mark[MAXN];

int now = 0;

void dfs(int x, int dep)
{
	st[x] = now++;
	d[x] = dep;
	id[dep].push_back(x);
	mark[x] = true;
	for (int i = 0; i < ng[x].size(); i++)
		if (!mark[ng[x][i]])
			dfs(ng[x][i], dep + 1);
	h[dep].push_back(st[x]);
	end[x] = now;
}

int main()
{
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		cin >> p[i];
		ng[p[i]].push_back(i);
		ng[i].push_back(p[i]);
	}
	dfs(0, 0);
	int m;
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		int vi, pi;
		cin >> vi >> pi;
		if (pi >= d[vi])
			cout << 0 << " ";
		else
		{
			int dp = d[vi];
			int piviid = lower_bound(h[dp - pi].begin(), h[dp - pi].end(), st[vi]) - h[dp - pi].begin() - 1;
			int pivi = id[dp - pi][piviid];
			cout << (lower_bound(h[dp].begin(), h[dp].end(), end[pivi])
						- lower_bound(h[dp].begin(), h[dp].end(), st[pivi])) - 1 << " ";
		}
	}
	cout << endl;
	return 0;
}
