#include <bits/stdc++.h>
using namespace std;

int N, M, logn, dad[100010][18],  h[100010], l[100010], r[100010], Time;
vector <int> TREE[100010], data[100010];

void dfs(int x)
{
    l[x] = r[x] = ++Time;
    data[h[x]].push_back(Time);
    if (x > 1)
        for (int j = 1; j <= logn; j++)
            dad[x][j] = dad[dad[x][j - 1]][j - 1];
    for (vector <int> :: iterator it = TREE[x].begin(); it != TREE[x].end(); it++)
    {
        h[*it] = h[x] + 1;
        dad[*it][0] = x;
        dfs(*it);
    }
    r[x] = Time;
}

int jump(int x, int l)
{
    for (int i = logn; i >= 0; i--)
        if (l >= (1 << i))
        {
            x = dad[x][i];
            l -= 1 << i;
        }
    return x;
}

main()
{
    scanf("%d", &N);    logn = log2(N);
    for (int x, i = 1; i <= N; i++)
    {
        scanf("%d", &x);
        TREE[x].push_back(i);
    }
    dfs(0);
    scanf("%d", &M);
    for (int u, p; M--; )
    {
        scanf("%d %d", &u, &p);
        int x = jump(u, p);
        printf("%d ", x ? upper_bound(data[h[u]].begin(), data[h[u]].end(), r[x]) - 1
                           - lower_bound(data[h[u]].begin(), data[h[u]].end(), l[x]) : 0);
    }
}
