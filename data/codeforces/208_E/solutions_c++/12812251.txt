#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
const int N=1e5+100,LG=20;
int cnt,par[N][LG],btz[N],st[N],fn[N],dis[N];
vector<int>vec[N],child[N];
int parent(int v,int p)
{
    for(;p>0;p-=(p&-p))
        v=par[v][btz[p&-p]];
    return v;
}
void dfs(int v,int d)
{
    dis[v]=d;
    st[v]=cnt++;
    vec[dis[v]].push_back(st[v]);
    for(int i=0;i<child[v].size();i++)
        dfs(child[v][i],d+1);
    fn[v]=cnt;
}
int main()
{
    int n,q;
    cin>>n;
    n++;
    for(int i=1;i<n;i++)
    {
        int a;
        cin>>a;
        par[i][0]=a;
        child[a].push_back(i);
    }
    for(int i=1;i<LG;i++)
        for(int j=0;j<N;j++)
            par[j][i]=par[par[j][i-1]][i-1];
    for(int i=1;i<N;i++)
        btz[i]=(i%2?0:btz[i/2]+1);
    dfs(0,0);
    cin>>q;
    for(int i=0;i<q;i++)
    {
        int v,p;
        cin>>v>>p;
        int pr=parent(v,p);
        if(pr==0)
            cout<<0<<endl;
        else
            cout<<lower_bound(vec[dis[v]].begin(),vec[dis[v]].end(),fn[pr])-lower_bound(vec[dis[v]].begin(),vec[dis[v]].end(),st[pr])-1<<endl;
    }
    return 0;
}
