#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 100010;

int f[17][MAXN];
vector <int> e[MAXN];
vector <int> c[MAXN];
int a[MAXN], b[MAXN], d[MAXN];
int n, m, t;

void DFS(int u, int dep){
	d[u] = dep;
	c[dep].push_back(t);
	a[u] = t ++;
	for(vector <int> :: iterator it = e[u].begin(); it != e[u].end(); it ++){
		DFS(*it, dep + 1);
	}
	b[u] = t;
}
	
int main(){
	scanf("%d", &n);
	for(int i = 1; i <= n; i ++){
		scanf("%d", f[0] + i);
	}
	for(int i = 1; i <= n; i ++){
		e[f[0][i]].push_back(i);
	}
	
	DFS(0, 0);

	for(int i = 1; i < 17; i ++){
		for(int j = 1; j <= n; j ++){
			f[i][j] = f[i - 1][f[i - 1][j]];
		}
	}
	
	scanf("%d", &m);
	int v, p;
	while(m --){
		scanf("%d%d", &v, &p);
		vector <int>& tmp = c[d[v]];
		for(int i = 16; i >= 0; i --){
			if((p >> i) & 1){
				v = f[i][v];
			}
		}
		int ans = 0;
		if(v != 0)
			ans = lower_bound(tmp.begin(), tmp.end(), b[v]) - lower_bound(tmp.begin(), tmp.end(), a[v]) - 1;
		printf("%d ", ans);
	}
	printf("\n");
		
	return 0;
}
