#include <iostream>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <set>
#define pb push_back
using namespace std;
const int M = 100 * 1000 +5;
vector <int> adj[M], ls[M], la[M], ans;
int s[M], d[M], f[M], now = 0;

int dfs(int v,int de)
{
	la[de].pb(v);
	d[v] = de;
	s[v] = now++;
	ls[de].pb(s[v]);
	for(int i = 0; i<adj[v].size(); i++)
		dfs(adj[v][i], de + 1);
	f[v] = now;
}

int main()
{
    ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for(int i = 1; i<n+1; i++)
	{
		int x;
		cin >> x;
		adj[x].pb(i);
	}
	dfs(0,0);
	int m;
	cin >> m;
	for(int i = 0; i<m; i++)
	{
		int v,p;
		cin >> v >> p;
		if(d[v] <= p)
        {
            cout << 0 << ' ';
            continue;
        }
		int u = lower_bound(ls[ d[v] - p ].begin(),ls[ d[v] - p ].end(), s[v])-ls[d[v]-p].begin () - 1;
		int low = lower_bound(ls[d[v]].begin(), ls[d[v]].end(), s[la[d[v]-p][u]]) - ls[d[v]].begin ();
		int up = lower_bound(ls[d[v]].begin(), ls[d[v]].end(), f[la[d[v]-p][u]]) - ls[d[v]].begin ();
		cout << up - low - 1 << " ";
	}
	cout << endl;
	return 0;
}
