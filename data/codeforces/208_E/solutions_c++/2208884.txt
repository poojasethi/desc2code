#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

#define MN 100001
#define pb(x) push_back(x)
#define BE(x) x.begin()
#define ED(x) x.end()

int Index,N,M,a,b,x;
int L[MN],R[MN],D[MN];
vector<int> E[MN],C[MN];
int F[MN][20];

void dfs( int k)
{
    L[k]=++Index;
    for (int i=0;i<E[k].size();i++) D[E[k][i]]=D[k]+1,dfs(E[k][i]);
    R[k]=++Index;
    C[D[k]].pb(L[k]);
}

int main()
{
    scanf("%d",&N);
    for (int i=1;i<=N;i++) scanf("%d",&F[i][0]),E[F[i][0]].pb(i);
    dfs(0);
    for (int k=1;k<=17;k++)
        for (int i=1;i<=N;i++) F[i][k]=F[F[i][k-1]][k-1];
    scanf("%d",&M);
    while (M--)
    {
        scanf("%d%d",&a,&b);
        if (D[a]<b) {printf("0 ");continue;}
        x=a;
        vector<int> &c=C[D[a]];
        for (int k=0;k<=17;k++)
            if ((1<<k)&b) x=F[x][k];
        printf("%d ",x?lower_bound(BE(c),ED(c),R[x])-upper_bound(BE(c),ED(c),L[x])-1:0);
    }
}