#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
const int MAX_N = int(1e5)+7;
int f[MAX_N][18];

vector<int> G[MAX_N];
int b[MAX_N], e[MAX_N], lvl[MAX_N], t;
vector<int> lv[MAX_N];
void dfs(int x, int l)
{
  b[x] = ++t;
  lvl[x] = l;
  lv[l].push_back(b[x]);
  for (int i = 0; i < G[x].size(); i++)
    dfs(G[x][i], l+1);
  e[x] = t;
}
int main()
{
  int n, m;
  cin>>n;
  for (int i = 1; i <= n; i++) {
    cin>>f[i][0];
    G[f[i][0]].push_back(i);
  }
  t = -1;
  dfs(0,0);

  for (int j = 1; j <= 17; j++)
    for (int i = 1; i <= n; i++)
      f[i][j] = f[f[i][j-1]][j-1];
  cin>>m;
  for (int i = 1; i <= m; i++) {
    int p, v, l;
    cin>>v>>p;
    l = lvl[v];
    for (int i = 0; i <= 17; i++)
      if (p&(1<<i)) v = f[v][i];
    if (v) {
      int ans = lower_bound(lv[l].begin(), lv[l].end(), e[v]+1) - lower_bound(lv[l].begin(), lv[l].end(), b[v]) - 1;
      cout<<ans<<" ";
    } else
      cout<<"0 ";
  }
  cout<<endl;
  return 0;
}
