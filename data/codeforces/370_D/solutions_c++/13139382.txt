#include <cstdio>
#include <algorithm>

using namespace std;

const int N = 2000 + 10;

int n, m;
int tot;
char s[N][N];
int row[N][N];
int col[N][N];

int main(){
	tot = 0;
	scanf("%d%d", &n, &m);
	int ma_x, ma_y, mi_x, mi_y;
	ma_x = ma_y = 0;
	mi_x = mi_y = N + 1;
	for(int i = 1; i <= n; i++){
		scanf("%s", s[i] + 1);
		for(int j = 1; j <= m; j++){
			tot += s[i][j] == 'w';
			if (s[i][j] == 'w'){
				ma_x = max(ma_x, i);
				mi_x = min(mi_x, i);
				ma_y = max(ma_y, j);
				mi_y = min(mi_y, j);
			}
		}
	}
	int dx = ma_x - mi_x + 1;
	int dy = ma_y - mi_y + 1;
	int d = dx > dy ? dx : dy;
	if (d == 1){
		for(int i = 1; i <= n; i++){
			printf("%s\n", s[i] + 1);
		}
		return 0;
	}
	for(int i = 1; i <= n; i++){
		row[i][0] = 0;
		for(int j = 1; j <= m; j++){
			row[i][j] = row[i][j - 1] + (s[i][j] == 'w');
		}
	}
	for(int i = 1; i <= m; i++){
		col[i][0] = 0;
		for(int j = 1; j <= n; j++){
			col[i][j] = col[i][j - 1] + (s[j][i] == 'w');
		}
	}
	for(int i = 1; i + d - 1 <= n; i++){
		for(int j = 1; j + d - 1 <= m; j++){
			int cnt = 0;
			cnt += row[i][j + d - 1] - row[i][j - 1];
			cnt += row[i + d - 1][j + d - 1] - row[i + d - 1][j - 1];
			cnt += col[j][i + d - 1] - col[j][i - 1];
			cnt += col[j + d - 1][i + d - 1] - col[j + d - 1][i - 1];
			cnt -= (s[i][j] == 'w');
			cnt -= (s[i][j + d - 1] == 'w');
			cnt -= (s[i + d - 1][j] == 'w');
			cnt -= (s[i + d - 1][j + d - 1] == 'w');
			if (cnt == tot){
				for(int k = i; k < i + d; k++){
					if (s[k][j] == '.') s[k][j] = '+';
					if (s[k][j + d - 1] == '.') s[k][j + d - 1] = '+';
				}
				for(int k = j; k < j + d; k++){
					if (s[i][k] == '.') s[i][k] = '+';
					if (s[i + d - 1][k] == '.') s[i + d - 1][k] = '+';
				}
				for(int i = 1; i <= n; i++){
					printf("%s\n", s[i] + 1);
				}
				return 0;
			}
		}
	}
	puts("-1");
	return 0;
}
