#include<cstdio>
#include<cstring>
#include<queue>
#include<vector>
#include<iostream>
#include<string>
#include<algorithm>

using namespace std;

#define foreach(e, x) for(__typeof(x.begin()) e = x.begin(); e != x.end(); ++ e)

const int N = 2000 + 10;

int n, m;
int a[N][N];
char b[N][N];

void solve()
{
	cin >> n >> m;
	for(int i = 1; i <= n; ++ i) {
		scanf("%s", b[i - 1]);
		for(int j = 1; j <= m; ++ j) {
			a[i][j] = a[i - 1][j] + a[i][j - 1] - a[i - 1][j - 1] + (b[i - 1][j - 1] == 'w');
		}
	}

	int ret = -1, pd, pr;
	int tot = a[n][m], cnt;
	for(int i = 1; i <= n; ++ i) {
		for(int j = 1; j <= m; ++ j) {
			int l = 0, r = min(i, j), mid;
			for( ; l + 1 < r; ) {
				mid = l + r >> 1;
				cnt = a[i][j] - a[i - mid][j] - a[i][j - mid] + a[i - mid][j - mid];
				if (cnt < tot) l = mid;
				else r = mid;
			}
			cnt = a[i][j] - a[i - r][j] - a[i][j - r] + a[i - r][j - r];
			if (cnt != tot) continue;
			if (r > 2) {
				cnt = a[i - 1][j - 1] - a[i - r + 1][j - 1] - a[i - 1][j - r + 1] + a[i - r + 1][j - r + 1];
				if (cnt) continue;
			}
			if (r < ret || ret < 0) {
				ret = r;
				pd = i;
				pr = j;
			}
		}
	}
	if (ret < 0) {
		cout << -1 << endl;
		return;
	}
	for(int i = pr - ret; i < pr; ++ i) {
		if (b[pd - 1][i] == '.') b[pd - 1][i] = '+';
		if (b[pd - ret][i] == '.') b[pd - ret][i] = '+';
	}
	for(int i = pd - ret; i < pd; ++ i) {
		if (b[i][pr - 1] == '.') b[i][pr - 1] = '+';
		if (b[i][pr - ret] == '.') b[i][pr - ret] = '+';
	}
	for(int i = 0; i < n; ++ i) {
		puts(b[i]);
	}
}

int main()
{
	solve();
	return 0;
}
