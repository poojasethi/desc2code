#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<queue>
#define FI(i,a, b) for(i=a;i<=b;i++)
#define FD(i,a, b) for(i=a;i>=b;i--)

#define CL(x, y) memset(x, y, sizeof(x))
#define INF 100000000
#define MAXN ?
#define MAXE ?
using namespace std;
int i,j, k, N, M, K;
int dp[4005][4005];
char str[2005][2005];
void partial_sum(){
	FI(i, 1, N){
		FI(j, 1, M){
			dp[i][j]=dp[i][j]+dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1];;
		}
	}
}
int query(int x1, int y1, int x2, int y2){
	return max(dp[x2][y2]-dp[x1-1][y2]-dp[x2][y1-1]+dp[x1-1][y1-1], 0);
}
int valid(int x1, int y1, int x2, int y2){
	if(query(x1+1, y1+1, x2-1, y2-1) == 0 && query(x1, y1, x2, y2) == K) return true;
	return false;
}

int main(){
	int maxx=0, minx=INF, maxy=0, miny=INF, ax1=0, ax2=0, ay1=0, ay2=0; K=0;
	CL( dp, 0 );
	scanf("%d%d", &N, &M);
	FI(i, 1, N){
		scanf("%s", str[i]+1);
	}
	FI(i, 1, N){
		FI(j, 1, M){
			if(str[i][j]=='w'){
				dp[i][j]=1;
				K++;
				maxx=max( maxx, i );
				maxy=max( maxy, j );
				minx=min( minx, i );
				miny=min( miny, j );
				
			}
		}
	}
	partial_sum();
	int width=max( maxx - minx , maxy - miny );
	FI(i, 1, N){
		FI(j, 1, M){
			int nx = i + width, ny = j + width;
			if(nx <= N && ny <= M){
				if(valid( i, j, nx, ny)){
					ax1=i, ax2=nx, ay1=j, ay2=ny;
				}
			}
			
		}
	}
	if(ax1==0&&K!=1){ printf("-1\n");
	}else
	FI(i, 1, N){
		FI(j, 1, M){
			if(i <= ax2 && i >= ax1 && j >= ay1 && j <= ay2 || K==1){
				if( str[i][j] == 'w' ) printf("w");
				else if(i < ax2 && i > ax1 && j > ay1 && j < ay2 || K == 1) printf(".");
				else printf("+");
			}else{
				printf(".");
			}
			
		}
		printf("\n");
	}
//	return main();
}
