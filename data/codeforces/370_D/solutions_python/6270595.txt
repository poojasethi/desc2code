#!/usr/bin/env python

n, m = map(int, raw_input().split())
board = []
for _ in range(n):
	board.append(list(raw_input()))
rowW = [0] * n
columnW = [0] * m

for r in range(n):
	for c in range(m):
		if board[r][c] == 'w':
			rowW[r] += 1
			columnW[c] += 1

# print board
# print rowW, columnW
def first_and_last(l):
	a, b = -1, -1
	for i in range(len(l)):
		if l[i] > 0:
			if a == -1: a = i
			b = i
	return (a, b)
y1, y2 = first_and_last(rowW)
d1 = y2 - y1
#print y1, y2, d1
x1, x2 = first_and_last(columnW)
d2 = x2 - x1
#print x1, x2, d2

def can_move_row(r, c1, c2):
	return not filter(lambda x: x == 'w', board[r][c1+1:c2])
def can_move_col(c, r1, r2):
	return not filter(lambda x: x == 'w', map(lambda row: row[c], board[r1+1:r2]))

while d1 != d2:
	diff = abs(d2 - d1)
	can_move_top = can_move_row(y1, x1, x2)
	can_move_bottom = can_move_row(y2, x1, x2)
	can_move_left = can_move_col(x1, y1, y2)
	can_move_right = can_move_col(x2, y1, y2)
	free_rows = (n-1)-y2 + y1
	free_cols = (m-1)-x2 + x1
	if d1 < d2 and y1 >= diff and (can_move_top or d1 == 0):
		#print 'move top'
		y1 -= diff
		d1 = y2 - y1
	elif d1 < d2 and y2 + diff <= (n-1) and (can_move_bottom or d1 == 0):
		#print 'move bottom'
		y2 += diff
		d1 = y2 - y1
	elif d1 < d2 and free_rows <= diff and free_rows > 0 and can_move_top and can_move_bottom:
		#print 'move top & bottom'
		new_y1 = max(0, y1 - diff)
		new_diff = y2 - new_y1
		new_y2 = y2 + (new_diff - diff)
		y1, y2 = new_y1, new_y2
		d1 = y2 - y1
	elif d2 < d1 and x1 >= diff and (can_move_left or d2 == 0):
		#print 'move left'
		x1 -= diff
		d2 = x2 - x1
	elif d2 < d1 and x2 + diff <= (m-1) and (can_move_right or d2 == 0):
		#print 'move right'
		x2 += diff
		d2 = x2 - x1
	elif d2 < d1 and free_cols <= diff and free_cols > 0 and can_move_left and can_move_right:
		#print 'move left & right'
		new_x1 = max(0, x1 - diff)
		new_diff = x2 - new_x1
		new_x2 = x2 + (new_diff - diff)
		x1, x2 = new_x1, new_x2
		d2 = x2 - x1
	else:
		print '-1'
		exit(0)

for r in range(n):
	for c in range(m):
		if board[r][c] == 'w':
			if r == y1 and x1 <= c and c <= x2:
				pass
			elif r == y2 and x1 <= c and c <= x2:
				pass
			elif c == x1 and y1 <= r and r <= y2:
				pass
			elif c == x2 and y1 <= r and r <= y2:
				pass
			else:
				print '-1'
				exit(0)

def markPixel(r, c):
	if board[r][c] == '.':
		board[r][c] = '+'
for c in range(x1, x1+d1+1):
	markPixel(y1, c)
	markPixel(y1+d1, c)
for r in range(y1, y1+d1+1):
	markPixel(r, x1)
	markPixel(r, x1+d1)

for row in board:
	print ''.join(row)