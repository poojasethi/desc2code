#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
using namespace std;
const int MaxN = 50 + 5;
int n, m, k, ans;
bool use[MaxN][MaxN];
struct Pos
{
	int x, y;
	bool operator < (const Pos &b) const {return x + y < b.x + b.y;}
};
vector<Pos>g;
Pos get_one()
{
	int minc = 0x3f3f3f3f;
	Pos ret;
	for(int i = 1; i <= n; ++i)
		for(int j = 1; j <= m; ++j)
			if(!use[i][j] && i + j < minc)
			{
				minc = i + j;
				ret.x = i;ret.y = j;
			}
	use[ret.x][ret.y] = 1;
	ans += minc - 1;
	return ret;
}
void put_path(Pos v)
{
	for(int i = 1; i <= v.x; ++i)	printf("(%d,%d) ", i, 1);
		for(int j = 2; j <= v.y; ++j)
		{
			printf("(%d,%d)", v.x, j);
			if(j < v.y) printf(" ");
		}
	printf("\n");
}
int main()
{
	cin >> n >> m >> k;
	for(int i = 1; i <= k; ++i) g.push_back(get_one());
	sort(g.begin(), g.end());
	printf("%d\n", ans);
	for(int i = g.size() - 1; i >= 0; --i) put_path(g[i]);
	
	return 0;
}
