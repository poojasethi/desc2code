#include <algorithm>
#include <iostream>
#include <sstream>
#include <cstring>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <math.h>
#include <cmath>
#include <deque>
#include <queue>
#include <map>
#include <set>
using namespace std;

#define mp make_pair
#define pb push_back
#define ll long long
#define INF 300000007

int dp[151][151][80];
int a[151], f[151];
char s[155];

int dfs(int l, int r, int len) {
	int &ret = dp[l][r][len];
	if (ret != -1) {
		return ret;
	}
	if (l > r) {
		return ret = len ? -INF : 0;
	}
	ret = -INF;
	if (s[l] == s[r]) {
		ret = max(ret, dfs(l + 1, r - 1, len + 1));
		ret = max(ret, dfs(l + 1, r - 1, 0) + a[len * 2 + (l < r)]);
	}
	for (int i = l; i < r; i++) {
		ret = max(ret, dfs(l, i, 0) + dfs(i + 1, r, len));
		ret = max(ret, dfs(l, i, len) + dfs(i + 1, r, 0));
	}
	return ret;
}

int main() {
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);

	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
		if (a[i] == -1) {
			a[i] = -INF;
		}
	}
	scanf("%s", s);

	memset(dp, -1, sizeof(dp));
	
	for (int i = 1; i <= n; i++) {
		f[i] = f[i - 1];
		for (int j = 0; j < i; j++) {
			f[i] = max(f[i], f[j] + dfs(j, i - 1, 0));
		}
	}
	cout << f[n] << endl;	

	return 0;
}