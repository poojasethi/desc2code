#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <queue>
#include <vector>
#include <string>
#include <set>
#include <map>
using namespace std;
const int N=200;
const int inf=0x3f3f3f3f;
int dp[N][N][N], best[N], val[N], n;
char S[N];
void solve(){
    cin>>n;
    for(int i=1;i<=n;i++)cin>>val[i];
    cin>>S;
    for(int i=1;i<=n;i++) if (val[i]==-1) val[i]=-inf;
    for(int i=0;i<=n;i++)for(int j=0;j<=n;j++)for(int k=0;k<=n;k++)dp[i][j][k]=-inf;
    for(int len=0;len<=n;len++)for(int i=0;i<=n-len;i++){
        int j=i+len;
        for(int k=0;k<=min(i,n-j);k++) {
            dp[i][j][k]=max(dp[i][j][k],dp[i][j][0]+val[k*2]);
            if(len<=1){
                dp[i][j][k]=max(dp[i][j][k],val[k*2+len]);
            }else{
                if(S[i]==S[j-1])
                    dp[i][j][k]=max(dp[i][j][k],dp[i+1][j-1][k+1]);
                for(int t=i+1;t<j;t++) {
                    dp[i][j][k]=max(dp[i][j][k],dp[i][t][0]+dp[t][j][k]);
                    dp[i][j][k]=max(dp[i][j][k],dp[t][j][0]+dp[i][t][k]);
                }
            }
        }
    }
    best[0]=0;
    for(int i=1;i<=n;i++){
        best[i]=best[i-1];
        for(int j=0;j<i;j++)
            best[i]=max(best[i],best[j]+dp[j][i][0]);
    }
    cout<<best[n]<<endl;
}
int main(){
    ios::sync_with_stdio(false);
    int t=1; //cin>>t;
    while(t--){
        solve();
    }
    return 0;
}
