#include <stdio.h>
#include <algorithm>
using namespace std;
#define REP(i,n) for (int i = 0; i < (n); i++)

int L;
int an[200];
int dp[200][200][200];
int dp2[200][200];
char wort[200];

int main() {
	scanf("%d ", &L);
	REP(i,L) {
		scanf("%d ", &an[i+1]);
		if (an[i+1] == -1)
			an[i+1] = -1000000000;
	}
	scanf("%s", wort);
	int erg = 0;
	for (int dif = 0; dif <= L; dif++) {
		REP(a,L-dif+1) {
			int b = a+dif;
			dp2[a][b] = 0;
			for (int k = L; k >= 0; k--) {
				dp[a][b][k] = -1000000000;
				if (dif == 0 && k == 0)
					dp[a][b][k] = 0;
				if (k <= dif) {
					for (int m = a+1; m < b; m++) {
						dp[a][b][k] = max(dp[a][b][k], dp[a][m][0]+dp[m][b][k]);
						dp[a][b][k] = max(dp[a][b][k], dp[a][m][k]+dp[m][b][0]);
					}
					if (dif == 1) {
						if (k == 1)
							dp[a][b][k] = max(dp[a][b][k], 0);
					} else if (dif >= 2) {
						if (k >= 2 && wort[a] == wort[b-1])
							dp[a][b][k] = max(dp[a][b][k], dp[a+1][b-1][k-2]);
					}
					if (k == 0) {
						for (int ks = 1; ks <= b-a; ks++)
							dp[a][b][k] = max(dp[a][b][k], dp[a][b][ks]+an[ks]);
					}
				}
				if (dp[a][b][k] < 0)
					dp[a][b][k] = -1000000000;
				//if (dp[a][b][k] == 78512)
					//printf("%d %d %d\n", a, b, k);
				dp2[a][b] = max(dp2[a][b], dp[a][b][k]);
			}
			for (int m = a+1; m < b; m++)
				dp2[a][b] = max(dp2[a][b], dp2[a][m]+dp2[m][b]);
			erg = max(erg, dp2[a][b]);
		}
	}
	printf("%d\n", erg);
	return 0;
}
