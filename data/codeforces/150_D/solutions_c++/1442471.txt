#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

int c[1005];
int u[155][155][155][2];
int dp[155][155][155][2];
char s[155];
const int INF=1e9;
int go(int L, int R, int out, int remain) {
	if(L>R) {
		if(out==0) return 0;
		if(out>0 && c[out]>=0) return c[out];
		return -INF;
	}
	if(u[L][R][out][remain]) return dp[L][R][out][remain];
	u[L][R][out][remain]=1;
	int &r=dp[L][R][out][remain];
	r=-INF;
	if(remain) r=max(r, go(L,R,0,remain));
	if(remain) r=max(r, go(L+1,R,0,remain));
	if(remain) r=max(r, go(L,R-1,0,remain));
	if(out && c[out]>=0) r=max(r, go(L,R,0,0)+c[out]);
	if(c[out+1]>=0) r=max(r, go(L+1,R,0,0)+c[out+1]);
	if(L==R) return r;
	if(s[L]==s[R]) r=max(r, go(L+1, R-1, out+2, 0));
	for(int i=L;i<R;i++) {
		r=max(r, go(L, i, 0, remain&&(out==0)) + go(i+1, R, out, remain&&(out==0)));
		r=max(r, go(L, i, out, remain&&(out==0)) + go(i+1, R, 0, remain&&(out==0)));
	}
	if(r<0) r=-INF;
	return r;
}

int main(void) {
	int n;
	scanf("%d", &n);
	for(int i=1;i<=n;i++) scanf("%d", &c[i]);
	scanf("%s", s);
	int ans = go(0, n-1, 0, 1);
	if(ans<0) ans=0;
	printf("%d\n", ans);
	return 0;
}

