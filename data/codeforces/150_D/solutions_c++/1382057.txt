#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <queue>

#define LL long long
#define mp(x, y) make_pair(x, y)
#define pb(x) push_back(x)
#define PII pair<int, int>
#define PID pair<int, double>

using namespace std;

const int maxn = 160, inf = 200000000;
int n, m, a[maxn];
int f[maxn][maxn], g[maxn][maxn][maxn], ans;
char s[maxn];

int main(){
	scanf("%d", &n);
	for (int i = 1; i <= n; i++)
		scanf("%d", a + i), a[i] = a[i] < 0 ? -inf : a[i];
	scanf("%s", s + 1);

	memset(f, 200, sizeof(f));
	memset(g, 200, sizeof(g));
	for (int i = 1; i <= n; i++){
		f[i][i] = max(0, a[1]);
		g[i][i][0] = a[1];
		g[i][i][1] = 0;
	}

	for (int L = 1; L <= n; L++)
		for (int l = 1; l <= n - L + 1; l++){
			int r = l + L - 1;
			for (int p = 1; p <= L; p++){
				int opt = g[l][r][p];
				if (p > 1 && s[l] == s[r])
					opt = max(opt, r - l > 1 ? g[l + 1][r - 1][p - 2] : 0);
				for (int k = l; k < r; k++)
					opt = max(opt, g[l][k][0] + g[k + 1][r][p]),
					opt = max(opt, g[l][k][p] + g[k + 1][r][0]);
				g[l][r][p] = opt;
				g[l][r][0] = max(g[l][r][0], opt + a[p]);
			}
			f[l][r] = max(f[l][r], g[l][r][0]);
			for (int k = l; k < r; k++)
				f[l][r] = max(f[l][r], f[l][k] + f[k + 1][r]);
			ans = max(ans, f[l][r]);
		}

	printf("%d\n", ans);
}
