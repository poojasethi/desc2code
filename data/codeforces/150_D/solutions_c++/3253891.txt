#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

const int N = 150 + 1;
const long long INF = 1000000000LL;

int n, price[N];
char string[N];

long long optimum[N][N][N];

long long solve(int begin, int end, int extra) {
    if (begin >= end) {
        return price[extra];
    }
    long long &ret = optimum[begin][end][extra];
    if (ret == -1) {
        ret = -INF;
        if (extra > 0) {
            ret = std::max(ret, solve(begin, end, 0) + price[extra]);
        }
        if (string[begin] == string[end - 1]) {
            ret = std::max(ret, solve(begin + 1, end - 1, extra + (begin == end - 1 ? 1 : 2)));
        }
        for (int k = begin + 1; k < end; ++ k) {
            ret = std::max(ret, solve(begin, k, 0) + solve(k, end, extra));
        }
        for (int k = end - 1; k > begin; -- k) {
            ret = std::max(ret, solve(begin, k, extra) + solve(k, end, 0));
        }
    }
    return ret;
}

long long dp[N];

int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++ i) {
        scanf("%d", price + i);
        if (price[i] == -1) {
            price[i] = -INF;
        }
    }
    scanf("%s", string);
    memset(optimum, -1, sizeof(optimum));
    memset(dp, 0, sizeof(dp));
    for (int i = n - 1; i >= 0; -- i) {
        dp[i] = dp[i + 1];
        for (int j = i + 1; j <= n; ++ j) {
            dp[i] = std::max(dp[i], solve(i, j, 0) + dp[j]);
        }
    }
    std::cout << dp[0] << std::endl;
    return 0;
}

 	  	 	 		 				 							 		