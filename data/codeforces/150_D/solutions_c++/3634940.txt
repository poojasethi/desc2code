#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 155;
int visit[N][N];
int f[N][N][N],dp[N][N],val[N];
char s[N];

void dfs(int x,int y)
{
	if(x > y) return;
	if(visit[x][y]) return;
	visit[x][y] = 1;
	if(x == y) {
		f[x][y][0] = val[1];
		f[x][y][1] = 0;
		dp[x][y] = max(0,val[1]);
		return;
	}
	if(x + 1 == y && s[x] == s[y]) f[x][y][2] = 0;
	dfs(x + 1,y - 1);
	for(int i = x; i < y; i ++) {
		dfs(x,i);
		dfs(i + 1,y);
	}
	for(int len = 1; len <= y - x + 1; len ++) {
		for(int i = x; i < y; i ++) {
			if(f[x][i][0] != -1 && f[i + 1][y][len] != -1) {
				f[x][y][len] = max(f[x][y][len],f[x][i][0] + f[i + 1][y][len]);
			}
			if(f[x][i][len] != -1 && f[i + 1][y][0] != -1) {
				f[x][y][len] = max(f[x][y][len],f[x][i][len] + f[i + 1][y][0]);
			}
		}
		if(len >= 2 && s[x] == s[y] && f[x + 1][y - 1][len - 2] != -1) {
			f[x][y][len] = max(f[x][y][len],f[x + 1][y - 1][len - 2]);
		}
		if(f[x][y][len] != -1 && val[len] != -1)
			f[x][y][0] = max(f[x][y][0],f[x][y][len] + val[len]);
	}
	dp[x][y] = f[x][y][0];
	for(int i = x; i < y; i ++)
		dp[x][y] = max(dp[x][i] + dp[i + 1][y],dp[x][y]);
}

int main()
{
	int n;
	scanf("%d",&n);
	for(int i = 1; i <= n; i ++)
		scanf("%d",&val[i]);
	scanf("%s",s + 1);
	memset(f,-1,sizeof(f));
	memset(dp,0,sizeof(dp));
	memset(visit,0,sizeof(visit));
	dfs(1,n);
	printf("%d\n",dp[1][n]);
	return 0;
}

