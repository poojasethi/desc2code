#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <bitset>
#include <list>
#include <stdexcept>
#include <functional>
#include <utility>
#include <ctime>
using namespace std;

#define rep(i,l,r) for(int i=l;i<=r;i++)
#define drep(i,r,l) for(int i=r;i>=l;i--)
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define LL long long
#define travel(u) for(int i=start[u],v;v=e[i].a,i;i=e[i].next)
#define eps 1e-10
#define sqr(x) ((x)*(x))
#define read() (strtol(ipos, &ipos, 10))

int a[100008], n;
char S[10008];
int f[152][152][152], g[152];
int main()
{
	scanf("%d", &n);
	rep(i,1,n) scanf("%d", &a[i]);
	scanf("%s", &S[1]);
	rep(i,0,n+1)
		rep(j,0,n+1)
			rep(k,0,n+1)
				f[i][j][k] = -214748364;
	rep(i,1,n) 
	{
		f[i][i][1] = 0; f[i][i-1][0] = 0;
		if (a[1]!= -1) f[i][i][0] = a[1];
	}
	drep(i,n,1)
		rep(j,i+1,n)
			rep(k,0,j-i+1)
			{
				int &s = f[i][j][k];
				if (S[i] == S[j] && k >= 2) s = max(s, f[i+1][j-1][k-2]);
				rep(l,i,j-1)
					s = max(s, f[i][l][0] + f[l+1][j][k]),
					s = max(s, f[i][l][k] + f[l+1][j][0]);
				if (a[k] != -1)
					f[i][j][0] = max(f[i][j][0], s + a[k]);
			}
	rep(i,1,n)
	{
		g[i] = g[i-1];
		rep(j,1,i)
			g[i] = max(g[i], f[j][i][0] + g[j-1]);	
	}
	printf("%d\n", g[n]);
	return 0;
}
