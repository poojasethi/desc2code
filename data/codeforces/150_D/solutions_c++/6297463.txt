#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <ctype.h>
#include <cmath>
#include <ctime>
#include <queue>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <bitset>

using namespace std;

typedef long long INT;
typedef pair<int, int> pii;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)
template <class T> inline void chkmin(T &a, T b) { if (a>b) a=b; }
template <class T> inline void chkmax(T &a, T b) { if (a<b) a=b; }

#define NN 200
#define inf 0x3f3f3f3f

int dp[NN][NN][NN], best[NN], val[NN];
char s[NN];

int main() {
	int N, i, j, k, t, len;
	scanf("%d", &N);
	for (i=1; i<=N; i++) scanf("%d", &val[i]);
	scanf("%s", s);
	
	for (i=1; i<=N; i++) if (val[i]==-1) val[i]=-inf;
	for (i=0; i<=N; i++) 
		for (j=0; j<=N; j++) 
			for (k=0; k<=N; k++)
				dp[i][j][k]=-inf;
	for (len=0; len<=N; len++) for (i=0; i<=N-len; i++) {
		j=i+len;
		for (k=0; k<=min(i, N-j); k++) {
			chkmax(dp[i][j][k], dp[i][j][0]+val[k*2]);
			if (len<=1) {
				chkmax(dp[i][j][k], val[k*2+len]);
			} else {
				if (s[i]==s[j-1]) chkmax(dp[i][j][k], dp[i+1][j-1][k+1]);
				for (t=i+1; t<j; t++) {
					chkmax(dp[i][j][k], dp[i][t][0]+dp[t][j][k]);
					chkmax(dp[i][j][k], dp[t][j][0]+dp[i][t][k]);
				}
			}
		}
	}
	
	for (i=1; i<=N; i++) {
		best[i]=best[i-1];
		for (j=0; j<i; j++) chkmax(best[i], best[j]+dp[j][i][0]);
	}
	
	printf("%d\n", best[N]);
	
	return 0;
}
