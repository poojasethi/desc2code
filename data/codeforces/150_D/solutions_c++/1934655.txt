#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int MAXN = 160;

char str[MAXN];
int n, a[MAXN], g[MAXN][MAXN][MAXN], dp[MAXN][MAXN];

inline void update(int &v, int a, int b) {
	if (a != -2 && b != -2)
		v = max(v, a + b);
}

int gao(int s, int t, int l) {
	// -> assert(t - s >= 0)
	if (l < 0 || l > t - s)
		return -2;
	// -> l >= 0 && l <= t - s
	if (t - s == 0)
		return l ? -2 : 0;
	// -> t - s >= 1
	if (t - s == 1)
		return l ? 0 : a[1];
	// -> t - s > 1
	int &ret = g[s][t][l];
	if (ret == -1) {
		ret = -2;
		if (l == 0) {
			for (int i = 1; i <= t - s; ++i)
				update(ret, gao(s, t, i), a[i]);
		} else {
			for (int i = s + 1; i <= t; ++i)
				update(ret, gao(s, i, 0), gao(i, t, l));
			for (int i = t - 1; i >= s; --i)
				update(ret, gao(s, i, l), gao(i, t, 0));
			if (str[s] == str[t - 1])
				update(ret, gao(s + 1, t - 1, l - 2), 0);
		}
	}
	return ret;
}

int cal(int s, int t) {
	int &ret = dp[s][t];
	if (ret == -1) {
		ret = 0;
		ret = max(ret, gao(s, t, 0));
		for (int i = s + 1; i < t; ++i)
			ret = max(ret, cal(s, i) + cal(i, t));
	}
	return ret;
}

int main() {
	while (scanf("%d", &n) != EOF) {
		a[0] = 0;
		for (int i = 1; i <= n; ++i) {
			scanf("%d", &a[i]);
			if (a[i] == -1)
				a[i] = -2;
		}
		scanf("%s", str);
		memset(g, -1, sizeof(g));
		memset(dp, -1, sizeof(dp));
		int ans = cal(0, n);
		printf("%d\n", ans);
	}
	return 0;
}
