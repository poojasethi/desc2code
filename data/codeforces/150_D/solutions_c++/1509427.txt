#include <algorithm>
#include <cstring>
#include <iostream>

using namespace std;

const int maxn = 166, inf = 1<<30;

int cache[maxn][maxn][maxn];
int value[maxn];
char buff[maxn];
int best[maxn];

int dp(int l, int r, int len) {
    if (l > r) return len?-inf: 0;
    if (cache[l][r][len] != -1) return cache[l][r][len];
    int ret = -inf;
    if (buff[l] == buff[r])
        ret = max(ret, max(dp(l+1, r-1, len+2), dp(l+1, r-1, 0) + value[len+1+(l!=r)]));
    for (int i=l; i<r; i++)
        ret = max(ret, max(dp(l, i, len) + dp(i+1, r, 0), dp(l, i, 0) + dp(i+1, r, len)));
    return cache[l][r][len] = ret<0?-inf:ret;
}

int main() {
    memset(cache, -1, sizeof(cache));
    int n;
    cin >> n;
    for (int i=1; i<=n; i++) {
        cin >> value[i];
        if (value[i] == -1) value[i] = -inf;
    }
    cin >> buff;
    
    for (int i=0; i<n; i++) {
        best[i+1] = best[i];
        for (int j=0; j<=i; j++) 
            best[i+1] = max(best[i+1], best[j] + dp(j, i, 0));
    }

    cout << best[n] << endl;
    return 0;
}