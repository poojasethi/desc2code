#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define INF (1<<29)

string s;
int score[160];
int dp[160][160][160];
int dp2[160];

int main(void){
    int N,d,i,j,k,l;
    
    cin >> N;
    REP(i,N) cin >> score[i+1];
    cin >> s;
    
    REP(i,N+1) if(score[i] == -1) score[i] = -INF;
    REP(i,N+1) REP(j,N+1) REP(k,N+1) dp[i][j][k] = -INF;
    
    REP(d,N+1) REP(i,N-d+1){
        j = i + d;
        
        REP(k,min(i,N-j)+1){
            dp[i][j][k] = max(dp[i][j][k], dp[i][j][0] + score[2*k]);
            if(d <= 1){
                dp[i][j][k] = max(dp[i][j][k], score[2*k+d]);
            } else {
                if(s[i] == s[j-1]) dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k+1]);
                for(l=i+1;l<j;l++){
                    dp[i][j][k] = max(dp[i][j][k], dp[l][j][k] + dp[i][l][0]);
                    dp[i][j][k] = max(dp[i][j][k], dp[i][l][k] + dp[l][j][0]);
                }
            }
        }
    }
    
    for(i=1;i<=N;i++){
        dp2[i] = dp2[i-1];
        REP(j,i) dp2[i] = max(dp2[i], dp2[j] + dp[j][i][0]);
    }
    
    cout << dp2[N] << endl;
    
    return 0;
}
