#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef vector<int> vi;

const int N = 1000010;
int n, m;
int p[N];

int find(int i) {
	return (p[i] == i) ? i : (p[i] = find(p[i]));
}
void merge(int i, int j) {
	int x = find(i), y = find(j);
	p[x] = y;
}

int main() {
	ios::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m;
	int a[n+1];
	vector<vi> vecs;
	vecs.assign(n+1, vi());
	for(int i = 1; i <= n; i++){
		cin >> a[i];
		p[i] = i;
	}
	for(int i = 0; i < m; i++) {
		int x, y;
		cin >> x >> y;
		merge(x, y);
	}
	for(int i = 1; i <= n; i++) {
		int idx = find(i);
		vecs[idx].push_back(a[i]);
	}
	for(int i = 1; i <= n; i++)
		sort(vecs[i].begin(), vecs[i].end());
	for(int i = 1; i <= n; i++) {
		int idx = find(i);
		a[i] = vecs[idx].back();
		vecs[idx].pop_back();
	}
	cout << a[1];
	for(int i = 2; i <= n; i++){
		cout << ' ' << a[i];
	}
	return 0;
}