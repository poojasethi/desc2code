#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
using namespace std;

const int N=2111111;

struct T
{
	int left,right;
	int pos;
}A[N],B[N];

bool vis[N];

inline int cmp(const void *pa,const void *pb)
{
	T* ipa=(T*)pa;
	T* ipb=(T*)pb;
	if(ipa->left==ipb->left)
		return -(ipa->right)+(ipb->right);
	return (ipa->left)-(ipb->left);
}

int main()
{
	ios::sync_with_stdio(false);
	int n,m; cin>>m>>n;
	for(int i=0;i<n;i++)
	{
		cin>>A[i].left>>A[i].right;
		A[i].right=A[i].left+A[i].right;
		if(A[i].right>m) A[i].right=m+1;
		A[i].pos=i;
	}
	memset(vis,0,sizeof(vis));
	qsort(A,n,sizeof(T),cmp);
	int nright=0,Bind=0;
	for(int i=0;i<n;i++)
	{
		//cout<<i<<' '<<A[i].left<<' '<<A[i].right<<'\n';
		if(nright>=A[i].right)
			vis[A[i].pos]=true;
		else
			B[Bind++]=A[i];
		nright=max(nright,A[i].right);
	}
	nright=0;
	for(int i=0;i<Bind;i++)
	{
		//cout<<i<<' '<<B[i].left<<' '<<B[i].right<<' '<<nright<<'\n';
		if(i&&(i+1<Bind)&&B[i+1].left<=nright)
			vis[B[i].pos]=true;
		else nright=B[i].right;
	}
	int ans=0;
	for(int i=0;i<n;i++)
		if(vis[i]) ans++;
	cout<<ans<<'\n';
	for(int i=0;i<n;i++)
		if(vis[i]) cout<<i+1<<' ';
	cout<<'\n';
	return 0;
}
