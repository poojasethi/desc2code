//program 46-F

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<vector>

using namespace std;

const int Seed=19961021;

long long GetName()
{
  char c;while(c=getchar(),(c<'a'||c>'z')&&(c<'A'||c>'Z'));
  long long S=c;while(c=getchar(),(c>='a'&&c<='z')||(c>='A'&&c<='Z'))S=S*Seed+c;
  return S;
}

int Get()
{
  char c;while(c=getchar(),c<'0'||c>'9');
  int X=c-48;while(c=getchar(),c>='0'&&c<='9')X=X*10+c-48;
  return X;
}

int X[1000],Y[1000],P[1000];

int Root(int X)
{
  return (P[X]==X)?X:(P[X]=Root(P[X]));
}

long long Final(int N,int M,int K)
{
  static long long Name[1000];
  static int Pos[1000],Room[1000];
  for(int i=0;i<K;i++)
    {
      Name[i]=GetName();
      Pos[i]=Get()-1;
      for(int j=Get();j;j--)
        Room[Get()-1]=Pos[i];
    }
  for(int i=0;i<N;i++)P[i]=i;
  static bool OK[1000];
  memset(OK,0,sizeof(OK));
  while(true)
    {
      bool Find=false;
      for(int i=0;i<M;i++)
        {
          int a=Root(Room[i]),b=Root(X[i]),c=Root(Y[i]);
          if(!OK[i]&&(a==b||a==c))
            {P[b]=c;OK[i]=Find=true;}
        }
      if(!Find)break;
    }
  static vector<int> List[1000];
  for(int i=0;i<N;i++)List[i].clear();
  for(int i=0;i<N;i++)List[Root(i)].push_back(i);
  static long long Value[1000];
  for(int i=0;i<N;i++)
    {
      Value[i]=0;sort(List[i].begin(),List[i].end());
      for(int j=0;j<List[i].size();j++)
        Value[i]=Value[i]*Seed+List[i][j];
    }
  for(int i=0;i<N;i++)Value[i]=Value[Root(i)];
  long long Ans=0;
  for(int i=0;i<K;i++)Ans+=Name[i]*Value[Pos[i]];
  for(int i=0;i<M;i++)Ans=Ans*Seed+Value[Room[i]];
  return Ans;
}

int main()
{
  int N=Get(),M=Get(),K=Get();
  for(int i=0;i<M;i++)
    {X[i]=Get()-1;Y[i]=Get()-1;}
  printf(Final(N,M,K)==Final(N,M,K)?"YES\n":"NO\n");
  return 0;
}
