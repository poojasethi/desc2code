#include<cstdio>
#include<map>
#include<iostream>
#include<algorithm>
#include<vector>
#define MAXN 1010

using namespace std;

map <string,int> NameSet;

int NameSetLen,A[MAXN],B[MAXN],n,m,K;

struct Block
{
	vector <int> Peo,Key,Room;	
	
	void Check()
	{
		sort(Peo.begin(),Peo.end());
		sort(Key.begin(),Key.end());
		sort(Room.begin(),Room.end());
	}
};

bool operator == (Block A,Block B)
{
	return A.Peo==B.Peo&&A.Key==B.Key&&A.Room==B.Room;
}

struct Day
{
	vector <Block> ForBlocks;
	
	vector <int> Key[MAXN];
	
	vector <int> Room[MAXN];
	
	int _Key[MAXN],Father[MAXN],_Room[MAXN];
	
	bool bl[MAXN];
	
	string Name[MAXN];
	
	Block Tmp;
	
	int Find(int x){return (Father[x]==x)?x:Father[x]=Find(Father[x]);}
	
	void Solve()
	{
		int i,j,k,l;
		for(i=1;i<=n;i++)Father[i]=i;
		for(;;)
		{
			for(i=1;i<=m;i++)
				if(	Find(A[i])!=Find(B[i])&&
					(Find(_Room[_Key[i]])==Find(A[i])||
					Find(_Room[_Key[i]])==Find(B[i])))
				break;
			if(i==m+1)break;
			Father[Find(A[i])]=Father[Find(B[i])];
		}
		for(i=1;i<=n;i++)if(Find(i)==i)
		{
			Tmp.Peo.clear();
			Tmp.Key.clear();
			Tmp.Room.clear();
			for(j=1;j<=n;j++)
			if(Find(j)==i)
			{
				Tmp.Room.push_back(j);
				for(k=Room[j].size()-1;k>=0;k--)
				{
					Tmp.Peo.push_back(Room[j][k]);
					for(l=Key[Room[j][k]].size()-1;l>=0;l--)
						Tmp.Key.push_back(Key[Room[j][k]][l]);
				}
			}
			Tmp.Check();
			ForBlocks.push_back(Tmp);
		}
	}
	
	void Read()
	{
		string Name;
		int i,j,k,l,room;
		for(i=0;i<K;i++)
		{
			cin>>Name>>room;
			if(!NameSet.count(Name))NameSet[Name]=++NameSetLen;
			j=NameSet[Name];
			Room[room].push_back(j);
			_Room[j]=room;
			cin>>k;
			for(;k--;)
			{
				cin>>l;
				Key[j].push_back(l);
				_Key[l]=j;
			}
		}
		Solve();
	}

}	Thursday,Friday;

int main()
{
	cin>>n>>m>>K;
	for(int i=1;i<=m;i++)
		cin>>A[i]>>B[i];
	Thursday.Read();
	Friday.Read();
	if(Thursday.ForBlocks==Friday.ForBlocks)cout<<"YES\n";
	else cout<<"NO\n";
	return 0;
}
