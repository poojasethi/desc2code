#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <map>

using namespace std;

const int MAXN = 1010;

struct Edge
{
	int from, to;
}e[MAXN];

bool fi[MAXN], se[MAXN], ans = 1;
int n, m, fa[MAXN], k, key[MAXN];
map <string, int> name;

int find(int x)
{
	return fa[x] == x ? x : fa[x] = find(fa[x]);
}

void getans(bool *now)
{
	for(int i = 1; i <= n; i ++)
		fa[i] = i;
	bool ret = 1;
	while(ret)
	{
		ret = 0;
		for(int i = 1; i <= m; i ++)
			if(!now[i])
			{
				int u = find(key[i]), v = find(e[i].from), w = find(e[i].to);
				if(u == v || u == w)
				{
					fa[v] = w;
					ret = now[i] = 1;
				}
			}
	}
}

void init()
{
	scanf("%d%d%d", &n, &m, &k);
	for(int i = 1; i <= m; i ++)
		scanf("%d%d", &e[i].from, &e[i].to);
	for(int i = 1; i <= k; i ++)
	{
		int room, num, t;
		char s[11];
		scanf("%s%d%d", s, &room, &num);
		name[s] = room;
		while(num --)
		{
			scanf("%d", &t);
			key[t] = room;
		}
	}
	getans(fi);
}

void process()
{
	for(int i = 1; i <= k; i ++)
	{
		char s[11];
		int room, num, t;
		scanf("%s%d%d", s, &room, &num);
		ans &= find(name[s]) == find(room);
		while(num --)
		{
			scanf("%d", &t);
			ans &= find(key[t]) == find(room);
			key[t] = room;
		}
	}
	getans(se);
	for(int i = 1; i <= m; i ++)
		ans &= fi[i] == se[i];
}

void print()
{
	printf("%s\n", ans ? "YES" : "NO");
}

int main()
{
	init();
	process();
	print();
	return 0;
}
