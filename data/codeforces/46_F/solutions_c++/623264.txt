#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())


#define MAX 3005
set<string> name;
pair<li,li> key[MAX];
map<string,li> n2l;
li n,m,k;
li parent0[MAX],parent1[MAX];

li find(li num,li *parent){
	if(parent[num]==num) return num;
	return parent[num]=find(parent[num],parent);
}

void cal(li *parent){
	rep(i,MAX) parent[i]=i;
	vector<string> names(k);
	vector<li> room(k);
	vector<vector<li> > keys(k);
	rep(i,k){
		li num,tmp;
		cin>>names[i]>>room[i]>>num;
		name.insert(names[i]);
		keys[i]=vector<li>(num,0);
		rep(j,num) cin>>keys[i][j];
	}
	li cnt=0;
	for(set<string>::iterator it=name.begin();it!=name.end();it++) n2l[*it]=cnt++;
	rep(i,k) parent[n+m+n2l[names[i]]]=--room[i];
	rep(i,k)rep(j,sz(keys[i])) parent[n+--keys[i][j]]=room[i];
	bool ok=true;
	while(ok){
		ok=false;
		rep(i,m){
			li a=find(n+i,parent);
			li b=find(key[i].first,parent);
			li c=find(key[i].second,parent);
			if(b!=c && (a==b || a==c)){
				ok=true;
				parent[c]=b;
			}
		}
	}
}
			

int main(){
	cin>>n>>m>>k;
	rep(i,m){
		li a,b;
		cin>>a>>b;
		key[i]=make_pair(a-1,b-1);
	}
	cal(parent0);
	cal(parent1);
	
	rep(i,MAX)rep(j,i){
		bool b0=(find(i,parent0)==find(j,parent0));
		bool b1=(find(i,parent1)==find(j,parent1));
		if((b0||b1)&&(!b0||!b1)){
			cout<<"NO"<<endl;
			return 0;
		}
	}
	cout<<"YES"<<endl;
}
