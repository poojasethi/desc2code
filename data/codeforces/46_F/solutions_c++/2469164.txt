#include<cstring>
#include<string>
#include<cstdlib>
#include<map>
#include<iostream>
#include<vector>
#define fo(i,a,b) for(i=a;i<=b;++i)
using namespace std;
const int mn=2100;
struct node{int x,y;}d[mn];
int rt[mn],h[mn],h2[mn],f[mn];
int n,m,K;
string st;
map<string,int>Q;
bool vis[mn],vis1[mn];
void lose()
{
    cout<<"NO"<<endl;
    exit(0);
}
int fat(int r)
{
    if(f[r]!=r)f[r]=fat(f[r]);
    return f[r];
}
void merge()
{
    memset(vis,0,sizeof vis);
    int i,x,y,z;
    fo(i,1,n)f[i]=i;
    for(bool upd=1;upd;)
    {
        upd=0;
        fo(i,1,m)
            if(!vis[i])
            {
                x=fat(d[i].x),y=fat(d[i].y),z=fat(h[rt[i]]);
                if(x==z||y==z)
                {
                    vis[i]=1;
                    upd=1;
                    if(x!=y)f[x]=y;
                }
            }
    }
}
int main()
{
    cin>>n>>m>>K;
    int i,j,nk;
    fo(i,1,m)cin>>d[i].x>>d[i].y;
    fo(i,1,K)
    {
        cin>>st>>h[i]>>nk;
        Q[st]=i;
        while(nk--)
        {
            cin>>j;
            rt[j]=i;
        }
    }
    merge();
    memcpy(vis1,vis,sizeof vis);
    int x,y;
    fo(i,1,K)
    {
        cin>>st>>h2[i]>>nk;
        int id=Q[st];
        x=fat(h[id]),y=fat(h2[i]);
        if(x!=y)lose();
        while(nk--)
        {
            cin>>j;
            x=fat(h[rt[j]]),y=fat(h2[i]);
            if(x!=y)lose();
            rt[j]=i;
        }
    }
    fo(i,1,n)h[i]=h2[i];
    merge();
    fo(i,1,m)if(vis1[i]!=vis[i])lose();
    cout<<"YES"<<endl;
    return 0;
}