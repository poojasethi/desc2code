#include <malloc.h>

#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <deque>
#include <list>
#include <string>
#include <cstdlib>
#include <queue>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstring>
#include <assert.h>
#include <stack>
#include <bitset>

//#define debug
//#define ONLINE_JUDGE

#ifdef ONLINE_JUDGE
#define trace(a) void()
#define tracearr(a, b) void()
#else
#include "/home/victor/Dropbox/Public/trace.cpp"
#endif
using namespace std;
#define elif else if
#define sqr(a) ((a)*(a))
#define forn(i,j) for(int i=0;i<int(j);i++)
#define ford(i,j) for(int i=int(j)-1;i>=0;i--)
#define mp make_pair
#define pb push_back
#define fs first
#define sc second
#define all(a) a.begin(),a.end()
#define forin(i,c) for(typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define fill_zero(a) memset(a,0,sizeof(a))
#define count botva
#define y1 botven

typedef long double ld;

const ld pi = 3.141592653589793238462643;
const ld e = 1e-9;

ld R, H;
ld x1, y1, h1, x2, y2, h2;

ld dist (ld a, ld h1, ld h2) {
        ld l = sqrt(sqr(H) + sqr(R));
        h1 = (H - h1) * l / H;
        h2 = (H - h2) * l / H;
        a *= R / l;
        ld x, y;
        x = h1 * sin(a);
        y = h1 * cos(a) - h2;
        return sqrt(sqr(x) + sqr(y));
}

bool getdata () {
        return cin >> R >> H >> x1 >> y1 >> h1 >> x2 >> y2 >> h2;
}

ld final(ld a, ld a1, ld a2, ld h1, ld h2) {
        return dist(a1, h1, 0) + 2 * R * sin((a2 - a1) / 2) + dist(a - a2, 0, h2);
}

ld search2 (ld a, ld a1, ld h1, ld h2) {
        ld l = a1, r = a;
        forn(qwe, 300) {
                ld ml = (l * 6 + r) / 7, mr = (r * 6 + l) / 7;
                if (final(a, a1, ml, h1, h2) < final(a, a1, mr, h1, h2))
                        r = mr;
                else
                        l = ml;
        }
        return final(a, a1, (l + r) / 2, h1, h2);
}

ld search1 (ld a, ld h1, ld h2) {
        ld l = 0, r = a;
        forn(qwr, 300) {
                ld ml = (l * 6 + r) / 7, mr = (r * 6 + l) / 7;
                if (search2(a, ml, h1, h2) < search2(a, mr, h1, h2))
                        r = mr;
                else
                        l = ml;
        }
        return search2(a, (l + r) / 2, h1, h2);
}

ld res (ld a, ld a1, ld h1, ld r2) {
        return dist(a1, h1, 0.) + sqrt(sqr(R * cos(a - a1) - r2) + sqr(R * sin(a - a1)));
}

ld search3 (ld a, ld h1, ld r2) {
        ld l = 0. * a, r  = a;
        forn(sdf, 500) {
                ld ml = (l * 9 + r) / 10, mr = (l + r * 9) / 10;
                // cerr << l << ' ' << ml << " (" << res(a, ml, h1, r2) << ") " << mr << " (" << res(a, mr, h1, r2) << ") " << r << endl;
                if (res(a, ml, h1, r2) < res(a, mr, h1, r2))
                        r = mr;
                else
                        l = ml;
        }
        return res(a, (l + r) / 2, h1, r2);
}

bool solve () {
        cerr << '#' << endl;
        ld a1 = atan2l(y1, x1), a2 = atan2l(y2, x2);
        ld a = fabsl(a1 - a2);
        if (a > pi)
                a = 2 * pi - a;
        if (h1 > e && h2 > e) {
                ld ans = dist(a, h1, h2);
                ld ans2 = search1(a, h1, h2);
                if (ans2 < ans)
                        ans = ans2;
                printf("%0.9lf\n", (double)ans);
        } else if (h1 < e && h2 < e) {
                printf("%0.9lf\n", (double)sqrtl(sqr(x1 - x2) + sqr(y1 - y2)));
        } else {
                if (h1 < e) {
                        cerr << '!' << endl;
                        swap(h1, h2);
                        swap(x1, x2);
                        swap(y1, y2);
                }
                ld ans = search3(a, h1, sqrt(sqr(x2) + sqr(y2)));
                printf("%0.9lf\n", (double)ans);
        }
        return 1;
}

int main ()
{
#ifndef ONLINE_JUDGE
        freopen("input.txt", "rt", stdin);
        freopen("output.txt", "wt", stdout);
        while (getdata())
                solve();
#else
        getdata();
        solve();
#endif
        return 0;
}