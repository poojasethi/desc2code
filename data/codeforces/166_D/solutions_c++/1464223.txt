#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <map>
#include <vector>

using namespace std;

typedef long long ll;
const int MAXN=100010;

struct Shoe
{
    int c,s,id;
    bool friend operator < (const Shoe &x,const Shoe &y)
    {
        return x.c>y.c;
    }
}s[MAXN];
int n,m;
map<int,int> hash;
vector<int> e[MAXN];
int mat[MAXN];
bool flag[MAXN];

void init()
{
    scanf("%d",&n);
    for(int i=1;i<=n;++i)
    {
        scanf("%d%d",&s[i].c,&s[i].s);
        hash[s[i].s]=s[i].id=i;
    }
    scanf("%d",&m);
    for(int i=1,cc,ss;i<=m;++i)
    {
        scanf("%d%d",&cc,&ss);
        if(hash.count(ss))
        {
            int tem=hash[ss];
            if(s[tem].c<=cc)e[tem].push_back(i);
        }
        if(hash.count(ss+1))
        {
            int tem=hash[ss+1];
            if(s[tem].c<=cc)e[tem].push_back(i);
        }
    }
}
bool dfs(int x)
{
    for(int i=0;i<e[x].size();++i)
        if(!flag[e[x][i]])
        {
            flag[e[x][i]]=true;
            if(!~mat[e[x][i]] || dfs(mat[e[x][i]]))
            {
                mat[e[x][i]]=x;return true;
            }
        }
    return false;
}
void solve()
{
    int cnt=0;
    ll ans=0;
    sort(s+1,s+n+1);
    memset(mat,-1,sizeof(mat));
    for(int i=1;i<=n;++i)
    {
        memset(flag,false,sizeof(flag));
        if(dfs(s[i].id))ans+=s[i].c,cnt++;
    }
    printf("%I64d\n%d\n",ans,cnt);
    for(int i=1;i<=m;++i)
        if(~mat[i])printf("%d %d\n",i,mat[i]);
}
int main()
{
    init();
    solve();
    return 0;
}