#include<iostream>
#include<cstdio>
#include<queue>
#include<vector>
#include<algorithm>
#include<cstring>
#include<memory.h>
#include<vector>
#include<string>
#include<set>
#include<map>
using namespace std;
int S[100001];
int W[100001];
bool B[100001];
vector<int> G[100001];
bool Go(int x)
{
    for(int i = 0; i < G[x].size(); i++)
    {
        if(S[G[x][i]]==x)continue;
        if(S[G[x][i]]==0 || (B[S[G[x][i]]]==0 && Go(S[G[x][i]])))
        {
            S[G[x][i]]=x;
            W[x]=G[x][i];
            return true;
        }
    }
    return false;
}

int Numery[100001];
int N2[100001];
int Cost[100001];
pair<int,int> Shoes[100001];
map<int, int> M;
vector<int> VW;
int main()
{
    int n;
    scanf("%d",&n);
    for(int i = 0; i < n; i++)
    {
        int c,s;
        scanf("%d%d",&c,&s);
        M[s]=i+1;
        Shoes[i]=make_pair(c,i+1);
    }
    sort(Shoes,Shoes+n);
    for(int i = n-1; i >= 0; i--)
    {
        Numery[Shoes[i].second]=n-i;
        Cost[n-i]=Shoes[i].first;
        N2[n-i]=Shoes[i].second;
    }
    int m;
    scanf("%d",&m);
    for(int i = 1; i <= m; i++)
    {
        int d,s;
        scanf("%d%d",&d,&s);
        int nr = Numery[M[s]];
        if(Cost[nr]<=d)G[nr].push_back(i);

        nr = Numery[M[s+1]];
        if(Cost[nr]<=d)G[nr].push_back(i);
    }
    long long w = 0;
    int w2;
    for(int i = 1; i <= n; i++)
    {
        if(Go(i))
        {
                w+=Cost[i];
                VW.push_back(i);
        }
    }
    cout<<w;
    printf("\n%d\n",VW.size());
    for(int i = 0; i < VW.size(); i++)printf("%d %d\n",W[VW[i]],N2[VW[i]]);
    return 0;
}