#include <cstdio>
#include <cstring>
#include <utility>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long LL;

struct Cell{
	int c,s,id;
}p[100010];
inline bool cmp1(const Cell &a,const Cell &b){return a.s<b.s;}
inline bool cmp2(const Cell &a,const Cell &b){return a.c>b.c;}

int n,m;
vector<int> g[100010];
bool used[100010];
int left[100010];

int dfs(int u){
	for(vector<int> :: iterator p=g[u].begin();p!=g[u].end();p++) if(!used[*p]){
		used[*p]=1;
		if(!left[*p] || dfs(left[*p])){
			left[*p]=u;return 1;
		}
	}
	return 0;
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++) scanf("%d%d",&p[i].c,&p[i].s),p[i].id=i;
	sort(p+1,p+1+n,cmp1);
	scanf("%d",&m);
	for(int i=1;i<=m;i++){
		Cell tmp;scanf("%d%d",&tmp.c,&tmp.s);
		for(int j=lower_bound(p+1,p+1+n,tmp,cmp1)-p;
				j<=n && (p[j].s==tmp.s || p[j].s==tmp.s+1);j++)
					if(p[j].c<=tmp.c) g[p[j].id].push_back(i);
	}
	sort(p+1,p+1+n,cmp2);
	LL ans=0;int cnt=0;
	for(int i=1;i<=n;i++){
		memset(used,0,sizeof(used));
		if(dfs(p[i].id)) ans+=p[i].c,cnt++;
	}
	printf("%I64d\n%d\n",ans,cnt);
	for(int i=1;i<=m;i++) if(left[i]) printf("%d %d\n",i,left[i]);
	return 0;
}
