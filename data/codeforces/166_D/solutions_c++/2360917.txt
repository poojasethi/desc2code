#include<cstdio>
#include<vector>
#include<algorithm>
#define fo(i,a,b) for(i=a;i<=b;++i)
using namespace std;
const int mn=101000;
vector<int>e[mn];
int c[mn],s[mn],sc[mn],sv[mn];
int R[mn],vis[mn];
int n,m,i,j,k,nc,tt;
long long ans;
bool cmpc(int i,int j){return c[i]>c[j];}
bool cmps(int i,int j){return s[i]<s[j];}
void add(int i,int d,int l)
{
    s[0]=l;
    int j=lower_bound(sv+1,sv+1+n,0,cmps)-sv;
    if(j==n+1)return;
    j=sv[j];
    if(s[j]!=l||c[j]>d)return;
    e[j].push_back(i);
}
inline bool dfs(int r)
{
    int p,i;
    vis[r]=nc;
    for(p=0;p<e[r].size();++p)
    {
        i=e[r][p];
        if(R[i]==0||(vis[R[i]]!=nc&&dfs(R[i])))
        {
            R[i]=r;
            return 1;
        }
    }
    return 0;
}
int main()
{
    scanf("%d",&n);
    fo(i,1,n)scanf("%d%d",c+i,s+i);
    fo(i,1,n)sc[i]=sv[i]=i;
    sort(sc+1,sc+1+n,cmpc);
    sort(sv+1,sv+1+n,cmps);
    scanf("%d",&m);
    fo(i,1,m)
    {
        scanf("%d%d",&j,&k);
        add(i,j,k),add(i,j,k+1);
    }
    fo(i,1,n)
    {
        ++nc;
        if(dfs(sc[i]))++tt,ans+=c[sc[i]];
    }
    printf("%I64d\n",ans);
    printf("%d\n",tt);
    fo(i,1,m)if(R[i])printf("%d %d\n",i,R[i]);
    return 0;
}