#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
vector <int> g[120000];
int d[120000]={0},n,m,r=0;
bool f[120000];
long long v=0;
struct node{
	int w,s,n;
}p[120000],q;
bool cmp1(node a,node b){
	if (a.s<b.s) return true;
	return false;
}
bool cmp2(node a,node b){
	if (a.w>b.w) return true;
	return false;
}
bool back(int u){
	for (int i=0;i<g[u].size();i++){
		int v=g[u][i];
		if (!f[v]){
			f[v]=true;
			if (!d[v] || back(d[v])){
				d[v]=u;
				return true;
			}
		}
	}
	return false;
}
int main( ){
	cin>>n;
	for (int i=0;i<n;i++){
		scanf("%d %d",&p[i].w,&p[i].s);
		p[i].n=i+1;
	}
	sort(p,p+n,cmp1);
	scanf("%d",&m);
	for (int i=0;i<m;i++){
		cin>>q.w>>q.s;
		for (int j=lower_bound(p,p+n,q,cmp1)-p;j<n && (q.s==p[j].s || q.s==p[j].s-1);j++)
			if (q.w>=p[j].w)
				g[p[j].n].push_back(i+1);
	}
	sort(p,p+n,cmp2);
	for (int i=0;i<n;i++){
		memset(f,false,sizeof(f));
		if (back(p[i].n)){
			v+=p[i].w;
			r++;
		}
	}
	cout<<v<<endl<<r<<endl;
	for (int i=m;i>0;i--)
		if (d[i])
			cout<<i<<' '<<d[i]<<endl;
	return 0;
}
