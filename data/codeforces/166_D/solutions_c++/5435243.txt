#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

const int mn=101000;

vector<int> edge[mn];
int cost[mn], sz[mn], sc[mn], sv[mn];
int R[mn],vis[mn];
int n,m,i,j,k,nc,tt;
long long ans;
bool cmpc(int i,int j) { return cost[i] > cost[j]; }
bool cmps(int i,int j) { return sz[i] < sz[j]; }

// add an edge (j, i) if j-th shoes can be bought by i-th person
void add(int i, int d, int l)
{
    sz[0] = l;
    int j = lower_bound(sv+1, sv+1+n, 0, cmps) - sv;
    if(j == n+1) return;
    j = sv[j];
    if (sz[j] != l || cost[j] > d) return;
    edge[j].push_back(i);
}

bool dfs(int r) {
    vis[r] = nc;
    for(size_t p = 0; p < edge[r].size(); ++p) {
        int i = edge[r][p];
        if (R[i] == 0 || (vis[R[i]] != nc && dfs(R[i]))) {
            R[i] = r;
            return 1;
        }
    }
    return 0;
}

int main() {
    ios_base::sync_with_stdio(0);

    cin >> n;
    for (int i = 1; i <= n; i++) cin >> cost[i] >> sz[i];
    for (int i = 1; i <= n; i++) sc[i] = sv[i] = i;
    sort(sc+1, sc+1+n, cmpc);   // sort by cost, desc
    sort(sv+1, sv+1+n, cmps);   // sort by size, acs

    cin >> m;
    for(int i = 1; i <= m; i++) {
        int money, footsize;
        cin >> money >> footsize;
        add(i, money, footsize);
        add(i, money, footsize+1);
    }

    for (int i = 1; i <= n; i++) {
        ++nc;
        if (dfs(sc[i])) {      // process from expensive shoes
            ++tt;
            ans += cost[sc[i]];
        }
    }

    cout << ans << endl;
    cout << tt << endl;
    for (int i = 1; i <= m; i++) if(R[i]) cout << i << " " << R[i] << endl;

    return 0;
}
