#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <string>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <queue>
using namespace std;
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define forit(v,it) for(typeof(v.begin()) it = v.begin(); it != v.end(); ++it)
typedef long long ll;
typedef pair <int, int> pii;
typedef vector <int> vi;
typedef pair <pii,int> pi;

const int N = 100005;
int n,m,cnt,p[N],cc,found[N],u[N];
pi a[N],z;
ll ans;
vi e[N];
vector <pii> Ans;

inline bool cmp(int i,int j) {
	return a[i].f.s > a[j].f.s;
}

inline bool dfs(int v) {
	forit(e[v],it) {
		int to = *it;
		if(u[to] != cc) {
                	u[to] = cc;
                	if(!found[to]  ||  dfs(found[to])) {
                		found[to] = v;
                		return true;
                	}
                }
	}
	return false;
}

int main () {
	#ifdef LOCAL
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	scanf("%d",&n);
	for(int i=1;i<=n;++i) {
		scanf("%d%d",&a[i].f.s,&a[i].f.f);
		a[i].s = i;
		p[i] = i;
	}
	sort(a + 1,a + n + 1);
	scanf("%d",&m);
	for(int i=1;i<=m;++i) {
		int x,y;
		scanf("%d%d",&x,&y);
		z = mp(mp(y,-1),-1);
		int ind = lower_bound(a + 1,a + n + 1,z) - a;
		if(a[ind].f.f == y  &&  a[ind].f.s <= x)  e[a[ind].s].pb(i);
		z.f.f++;
		ind = lower_bound(a + 1,a + n + 1,z) - a;
		if(a[ind].f.f == y + 1  &&  a[ind].f.s <= x)  e[a[ind].s].pb(i);
	}
	sort(p + 1,p + n + 1,cmp);
	for(int k=1;k<=n;++k) {
		int i = p[k];
		++cc;
		if(dfs(a[i].s)) {
			ans += a[i].f.s;
			++cnt;
		}
	}
	printf("%I64d\n%d\n",ans,cnt);
	for(int i=1;i<=m;++i)
		if(found[i]) printf("%d %d\n",i,found[i]); 

	return 0;
}