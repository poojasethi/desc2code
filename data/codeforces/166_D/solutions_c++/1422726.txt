#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<cstring>
using namespace std;
#define FRE freopen("a.txt","r",stdin);
#define N 100005
struct node
{
    int c,s;
    int id;
}sh[N];
vector<int> v[N];
bool vis[N];
int match[N];
bool cmp1(node x,node y)
{
    return x.s<y.s;
}
bool cmp2(node x,node y)
{
    return x.c>y.c;
}
bool sear(int now)
{
    int len=v[now].size();
    for(int i=0;i<len;i++)
    {
        int u=v[now][i];
        if(vis[u])continue;
        vis[u]=true;
        if(!match[u]||sear(match[u]))
        {
            match[u]=now;
            return true;
        }
    }
    return false;
}
int main()
{
    //FRE;
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        scanf("%d%d",&sh[i].c,&sh[i].s);
        sh[i].id=i+1;
    }
    sort(sh,sh+n,cmp1);
    int m;
    scanf("%d",&m);
    for(int i=1;i<=n;i++)v[i].clear();
    for(int i=1;i<=m;i++)
    {
        node t;
        scanf("%d%d",&t.c,&t.s);
        for(int j=lower_bound(sh,sh+n,t,cmp1)-sh;j<n&&(t.s==sh[j].s-1||t.s==sh[j].s);j++)
        {
            if(sh[j].c<=t.c)
            {
                v[sh[j].id].push_back(i);
            }
        }
    }
    sort(sh,sh+n,cmp2);
    memset(match,0,sizeof(match));
    __int64 ans=0;
    int k=0;
    for(int i=0;i<n;i++)
    {
        memset(vis,false,sizeof(vis));
        if(sear(sh[i].id))
        {
            ans+=sh[i].c;
            k++;
        }
    }
    printf("%I64d\n%d\n",ans,k);
    for(int i=1;i<=m;i++)
    {
        if(match[i])printf("%d %d\n",i,match[i]);
    }
    return 0;
}
