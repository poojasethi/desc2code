#include <map>
#include <set>
#include <list>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <bitset>
#include <vector>
#include <cstdio>
#include <string>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
vector<int> a[100005];
int b[100005];
bool v[100005];
struct node {
	int c,s,x;
}p[100005];
inline bool dfs(int x) {
    int i,l=a[x].size(),t;
    for (i=0;i<l;i++) {
        t=a[x][i];
        if (v[t]==false) {
            v[t]=true;
            if (!b[t] || dfs(b[t])) {b[t]=x;return true;}
        }
    }
    return false;
}
inline bool cp1 (node a,node b) {
	return a.s<b.s;
}
inline bool cp2 (node a,node b) {
    return a.c>b.c;
}
int main ( ) {
	int n,m,i,j,s=0;
	long long ans=0;
    scanf("%d",&n);
    for (i=0;i<n;i++) {
        scanf("%d%d",&p[i].c,&p[i].s);
        p[i].x=i+1;
    }
    sort(p,p+n,cp1);
    scanf("%d",&m);
    for (i=0;i<m;i++) {
        node q;
        scanf("%d%d",&q.c,&q.s);
        j=lower_bound(p,p+n,q,cp1)-p;
        while (j<n && (q.s==p[j].s || q.s==p[j].s-1)) {
        	if (q.c>=p[j].c) a[p[j].x].push_back(i+1);
        	j++;
        }
    }
    sort(p,p+n,cp2);
    memset(b,0,sizeof(b));
    for (i=0;i<n;i++) {
        memset(v,false,sizeof(v));
        if (dfs(p[i].x)) {ans+=p[i].c;s++;}
    }
    printf("%I64d\n%d\n",ans,s);
    for (i=1;i<=m;i++) {
        if (b[i]) printf("%d %d\n",i,b[i]);
    }
    return 0;
}
/*
Sample test(s)

input

3
10 1
30 2
20 3
2
20 1
20 2

output

30
2
2 3
1 1

input

3
10 4
20 5
30 6
2
70 4
50 5

output

50
2
2 3
1 2
*/
