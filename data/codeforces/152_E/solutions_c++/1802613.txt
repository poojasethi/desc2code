#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int maxn = 205;
const int maxk = 7;

int data[maxn], dp[1<<maxk][maxn], pnt[1<<maxk][maxn][2], lt[maxk], n, m, k;
bool ans[maxn];

void init() {
    scanf( "%d%d%d", &n, &m, &k );
    for ( int i = 0; i < n; i++ ) {
        for ( int j = 0; j < m; j++ ) {
            scanf( "%d", &data[i*m+j] );
        }
    }
    for ( int i = 0; i < k; i++ ) {
        int x, y;
        scanf( "%d%d", &x, &y );
        lt[i] = (x-1) * m + (y-1);
    }
}

int getpos( int x, int flag ) {
    int a = x / m, b = x % m;
    if ( flag == 0 && a > 0 ) return x - m;
    if ( flag == 1 && b > 0 ) return x - 1;
    if ( flag == 2 && a < n-1 ) return x + m;
    if ( flag == 3 && b < m-1 ) return x + 1;
    return -1;
}

void find( int mask, int x ) {
    ans[x] = 1;
    if ( pnt[mask][x][1] != -1 ) find( mask, pnt[mask][x][1] );
    else if ( pnt[mask][x][0] != -1 ) {
        find( pnt[mask][x][0], x );
        find( mask^pnt[mask][x][0], x );
    }
}

void work() {
    memset( dp, -1, sizeof(dp) );
    memset( pnt, -1, sizeof(pnt) );
    for ( int i = 0; i < k; i++ ) dp[1<<i][lt[i]] = data[lt[i]];
    for ( int i = 1; i < (1<<k); i++ ) {
        for ( int j = 1; j < i; j++ ) {
            if ( ( i | j ) != i ) continue;
            for ( int h = 0; h < n*m; h++ ) {
                if ( dp[i][h] == -1 || dp[i][h] > dp[j][h] + dp[i^j][h] - data[h] ) {
                    dp[i][h] = dp[j][h] + dp[i^j][h] - data[h];
                    pnt[i][h][0] = j;
                }
            }
        }
        bool view[maxn];
        memset( view, 0, sizeof(view) );
        for ( int j = 0; j < n*m; j++ ) {
            int p = -1;
            for ( int h = 0; h < n*m; h++ ) {
                if ( view[h] || dp[i][h] == -1 ) continue;
                if ( p == -1 || dp[i][p] > dp[i][h] ) p = h;
            }
            if ( p == -1 ) continue;
            view[p] = 1;
            for ( int h = 0; h < 4; h++ ) {
                int tp = getpos(p,h);
                if ( tp == -1 ) continue;
                if ( dp[i][tp] == -1 || dp[i][tp] > dp[i][p] + data[tp] ) {
                    dp[i][tp] = dp[i][p] + data[tp];
                    pnt[i][tp][1] = p;
                }
            }
        }
    }
    memset( ans, 0, sizeof(ans) );
    find( (1<<k)-1, lt[0] );
    printf( "%d\n", dp[(1<<k)-1][lt[0]] );
    for ( int i = 0; i < n; i++ ) {
        for ( int j = 0; j < m; j++ ) printf( ans[i*m+j] ? "X" : "." );
        printf( "\n" );
    }
}

int main() {
    init();
    work();
    return 0;
}
