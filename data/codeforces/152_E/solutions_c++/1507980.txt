#include<cstdio>
#include<cstring>
#include<queue>
#include<algorithm>
using namespace std;

const int inf = 99999999;

int dp[210][1<<8],pre[210][1<<8];
queue<int>q;
int inq[210][1<<8];
int val[110][110];
char s[110][110];
int n,m,k;
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};

void dfs(int pos,int st)
{
    int x=pos/m,y=pos%m;
    s[x][y]='X';
    if(pre[pos][st]==-1)
        return;
    int ppos=pre[pos][st]/1000,pst=pre[pos][st]%1000;
    dfs(ppos,pst);
    if(pst!=st)
        dfs(ppos,st-pst);
}

void update(int pos,int st,int v,int fa)
{
    if(v>dp[pos][st])
        return;
    dp[pos][st]=v;
    pre[pos][st]=fa;
    if(!inq[pos][st])
    {
        q.push(pos);
        q.push(st);
        inq[pos][st]=1;
    }
}

int main()
{
    int i,j,x,y,xx,yy,pos,st,now;
    memset(inq,0,sizeof(inq));

    scanf("%d %d %d",&n,&m,&k);
    for(i=0;i<n;++i)
    {
        for(j=0;j<m;++j)
        {
            s[i][j]='.';
            scanf("%d",&val[i][j]);
        }
        s[i][m]='\0';
    }

    int tot=(1<<k);

    for(i=0;i<n*m;++i)
        for(j=0;j<tot;++j)
            dp[i][j]=inf;

    for(i=0;i<k;++i)
    {
        scanf("%d %d",&x,&y);
        x--; y--;
        update(x*m+y,(1<<i),val[x][y],-1);
    }

    while(!q.empty())
    {
        pos=q.front();  q.pop();
        st=q.front();   q.pop();
        inq[pos][st]=0;
        x=pos/m;    y=pos%m;

        for(i=0;i<4;++i)
        {
            xx=x+dx[i];
            yy=y+dy[i];
            if(xx>=0&&xx<n&&yy>=0&&yy<m)
                update(xx*m+yy,st,dp[pos][st]+val[xx][yy],pos*1000+st);
        }

        now=tot-1-st;
        for(i=now;i;i=(i-1)&now)
            update(pos,st|i,dp[pos][st]+dp[pos][i]-val[x][y],pos*1000+st);
    }

    int ans=inf,res=0;
    for(i=0;i<n*m;++i)if(dp[i][tot-1]<ans)
    {
        res=i;
        ans=dp[i][tot-1];
    }
    dfs(res,tot-1);

    printf("%d\n",ans);
    for(i=0;i<n;++i)
        printf("%s\n",s[i]);

    return 0;
}
