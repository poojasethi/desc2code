#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<sstream>
#include<cmath>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<vector>
using namespace std;
typedef long long ll;
#define inf 1<<29
#define eps 1e-10
#define maxl 210
#define mem(i,j) memset(i,j,sizeof(i))
int dp[maxl][1<<7],pre[maxl][1<<7];
int n,m,k,nn,mm;
int hash1[maxl];
int maz[maxl][maxl];
char g[maxl][maxl];
bool visit[maxl][1<<7];
int dx[]= {0,0,-1,1};
int dy[]= {-1,1,0,0};
struct Node
{
    int u,st;
    Node(int _u,int _st)
    {
        u=_u,st=_st;
    }
};
queue<Node> que;

bool check(int x,int y)
{
    if(x>=0&&x<n&&y>=0&&y<m) return true;
    return false;
}
void update(int u,int st,int w,int fa)
{
    if(dp[u][st]>w)
    {
        dp[u][st]=w;
        pre[u][st]=fa;
        if(!visit[u][st])
        {
            que.push(Node(u,st));
            visit[u][st]=true;
        }
    }
}

void dfs(int u,int st)
{
    int x=u/m,y=u%m;
    g[x][y]='X';
    if(pre[u][st]==-1) return ;
    else
    {
        int v=pre[u][st]/1000,stt=pre[u][st]%1000;
        dfs(v,stt);
        if(stt-st) dfs(v,st-stt);
    }
}

void solve()
{
    while(!que.empty())
    {
        Node now=que.front();
        que.pop();
        int u=now.u,x=now.u/m,y=now.u%m,st=now.st;
        visit[u][st]=false;
        for(int i=0; i<4; i++)
        {
            int xx=x+dx[i],yy=dy[i]+y;
            if(!check(xx,yy)) continue;
            int v=xx*m+yy;
            update(v,st,dp[u][st]+maz[xx][yy],u*1000+st);
        }
        int t=mm-1-st;
        for(int i=t; i; i=(i-1)&t)
        {
            update(u,i|st,dp[u][i]+dp[u][st]-maz[x][y],u*1000+st);
        }
    }

    int ans=inf,u;
    for(int i=0; i<nn; i++)
        if(ans>dp[i][mm-1])
        {
            ans=dp[i][mm-1];
            u=i;
        }
    dfs(u,mm-1);
    cout<<ans<<endl;
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
            cout<<g[i][j];
        cout<<endl;
    }
}
int main()
{
  //  freopen("in.txt", "r", stdin);
    while(cin>>n>>m>>k)
    {
        for(int i=0; i<n; i++)
            for(int j=0; j<m; j++)
            {
                cin>>maz[i][j];
                g[i][j]='.';
            }
        nn=n*m;
        mm=1<<k;
        memset(hash1,0,sizeof(hash1));
        memset(visit,false,sizeof(visit));
        for(int i=0; i<nn; i++)
            for(int j=0; j<mm; j++)
                dp[i][j]=inf;

        for(int i=0,a,b; i<k; i++)
        {
            cin>>a>>b;
            a--,b--;
            int u=a*m+b;
            hash1[u]=1<<i;
            update(u,hash1[u],maz[a][b],-1);
        }
        solve();
    }
}
			 		  	 	 	   	 		  	 						