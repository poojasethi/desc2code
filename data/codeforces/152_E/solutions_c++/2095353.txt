#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>

using namespace std;

const int INF = 99999999;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, 1, 0, -1};

int n, m, nn;
int val[105][105];
int dp[220][1<<7], pre[220][1<<7];
char ans[105][105];
bool inq[220][1<<7];
queue<int> Q;

void update( int pos, int st, int v, int fa )
{
    if( dp[pos][st] <= v )  return;
    dp[pos][st] = v;
    pre[pos][st] = fa;

    if( !inq[pos][st] )
    {
        inq[pos][st] = 1;
        Q.push(pos);
        Q.push(st);
    }
}

void dfs( int pos, int st )
{
    int i, x, y;
    
    x = pos/m, y = pos%m;
    ans[x][y] = 'X';
    
    if( pre[pos][st] == -1 )    
        return;

    int ppos = pre[pos][st]/1000, pst = pre[pos][st]%1000;
    dfs(ppos, pst);
    if(st-pst)
        dfs(ppos, st-pst);
}

int main()
{
    int i, j, t, k, T;
    int x, y, xx, yy, st, pos, now;

    while( scanf("%d %d %d", &n, &m, &nn) != EOF )
    {
        while( !Q.empty() )
            Q.pop();

        T = (1<<nn);
        t = 0;
        for( i = 0; i < n; ++i )    for( j = 0; j < m; ++j )
            scanf("%d", &val[i][j]);

        for( i = 0; i < n*m; ++i )
            for( j = 0; j < T; ++j )
                dp[i][j] = INF;

        for( i = 0; i < n; ++i )
        {
            for( j = 0; j < m; ++j )
                ans[i][j] = '.';
            ans[i][m] = '\0';
        }

        memset(inq, 0, sizeof(inq));
        for( i = 0; i < nn; ++i )
        {
            scanf("%d %d", &k, &t);
            k--;    t--;
            update(k*m+t, (1<<i), val[k][t], -1);
        }

        while( !Q.empty() )
        {
            pos = Q.front();    Q.pop();
            st = Q.front();     Q.pop();
            inq[pos][st] = 0;
            x = pos/m;  y = pos%m;

            for( i = 0; i < 4; ++i )
            {
                xx = x + dx[i];
                yy = y + dy[i];
                if( xx >= 0 && xx < n && yy >= 0 && yy < m )
                    update(xx*m+yy, st, dp[pos][st]+val[xx][yy], pos*1000+st);
            }

            now = T-1-st;
            for( i = now; i; i = (i-1)&now )
                update(pos, i|st, dp[pos][st]+dp[pos][i]-val[x][y], pos*1000+st);
        }

        t = INF;
        for( i = 0; i < n*m; ++i )  if( dp[i][T-1] < t )
        {
            t = dp[i][T-1];
            k = i;
        }

        dfs(k, T-1);

        printf("%d\n", t);
        for( i = 0; i < n; ++i )
            printf("%s\n", ans[i]);
    }

    return 0;
}