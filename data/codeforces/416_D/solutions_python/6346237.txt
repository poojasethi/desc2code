import math
from fractions import gcd

class State:
    res = 0
    start = 0        
    dif = None
    firstpos = None

    def restart(self, cur, seq):
        self.res = self.res + 1
        self.start = cur
        self.dif = None
        self.firstpos = None
        if seq[cur] >= 0:
            self.firstpos = cur
#        print "restart"

    def value_at(self, pos, seq):
        if self.firstpos != None and self.dif != None:
            return seq[self.firstpos] + (pos - self.firstpos) * self.dif 
        return None

    def print_state(self):
        print self.res,self.start,self.dif,self.firstpos

def main():
    n = int(raw_input().strip())
    seq = [int(j) for j in raw_input().strip().split(" ")]

    s = State()
    s.restart(0, seq)

    for cur in range(len(seq)):

        if s.firstpos == None and seq[cur] >= 0:
            s.firstpos = cur

#        print cur,seq[cur]
#        s.print_state()

        if seq[cur] == -1:
            v = s.value_at(cur, seq)
            if v != None and v <= 0:
                s.restart(cur, seq)
            continue

        if cur == s.start:
            continue
        

        dist = cur - s.firstpos

        if s.dif == None and dist > 0:
            if (seq[cur] - seq[s.firstpos]) % dist == 0:
                s.dif = (seq[cur] - seq[s.firstpos]) / dist
                v = s.value_at(s.start, seq)
                if v != None and v <= 0:
                    s.restart(cur, seq)
                    s.firstpos = cur
            else:
                s.restart(cur, seq)
            continue

        v = s.value_at(cur, seq)
        if v != None and v != seq[cur]:
            s.restart(cur, seq)

    print s.res
    return 0

if __name__ == "__main__":
    main()
