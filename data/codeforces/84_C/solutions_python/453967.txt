#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from bisect import bisect_left
import sys
input = sys.stdin
output = sys.stdout

def circle_contains_point(c,p):
    X,R,_ = c
    x,y = p
    return (x-X)**2 + y**2 <= R**2

def solve(T,S):
    T.sort(key = lambda c: c[0])
    centers = [c[0] for c in T]
    
    n = len(T)
    hits = [-1]*n
    hitted = [False]*n
    
    for i in range(len(S)):
        shoot = S[i]
        x,_ = shoot
        pos = bisect_left(centers, x)
        
        if pos < len(T) and not hitted[pos]:
            circle_r = T[pos]
            if circle_contains_point(circle_r, shoot):
                hits[circle_r[2]] = i+1
                hitted[pos] = True

        if pos > 0 and not hitted[pos-1]:
            circle_l = T[pos-1]
            if circle_contains_point(circle_l, shoot):
                hits[circle_l[2]] = i+1
                hitted[pos-1] = True
    
    N = sum(map(int,hitted))
    return N, hits

n = int(input.readline())
T = []
for i in range(n):
    Ts = input.readline().split(' ')
    x = int(Ts[0])
    r = int(Ts[1])
    no = i
    T.append((x,r,no))

m = int(input.readline())
S = []
for i in range(m):
    Ss = input.readline().split(' ')
    x = int(Ss[0])
    y = int(Ss[1])
    S.append((x,y))

N,hits = solve(T,S)

hs = map(str,hits)
output.write('%s\n' % str(N))
output.write('%s\n' % ' '.join(hs))
