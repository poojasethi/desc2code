# -*- coding: utf-8 -*-
from collections import defaultdict

# Считаем список целей
T_cnt = input()
# Генераторное выражение. map применяет функцию int к каждому элементу массива raw_input().split()
targets = [ map(int, raw_input().split()) for i in xrange(T_cnt)]
# Считаем список выстрелов
A_cnt = input()
# Опять генератор
shots = [ map(int, raw_input().split()) for i in xrange(A_cnt)]

# Список целей, с информацией о попадании
answer = ["-1"]*T_cnt
# Заготовка для списка иксов, в которых есть цель
cov = defaultdict(list)

# Для каждой пронумерованой цели берем икс и радиус
for i, (po, rnd) in enumerate(targets):
    # Для каждого целого икса, который накрыт целью
    for x in xrange(po-rnd, po+rnd+1):
        # Добавляет этот икс в список иксов, покрытых, и записываем, какие цели находятся в этом иксе
        cov[x].append(i)

# Для каждого пронумерованого выстрела
for i, (x, y) in enumerate(shots):
    # Для каждого икса в списке покрытия
    if x in cov:
        # Для каждой цели, которая имеет точку в этом иксе
        for tar in cov[x]:
            # Берем центр этой цели и радиус
            po, rnd = targets[tar]
            # Проверяем, по уравнению круга, входит ли наш выстрел в зону цели
            if (po-x)**2 + y**2 <= rnd**2:
                # Если да, то
                if answer[tar] == "-1":
                    # Если в эту цель еще не попадали - отметим, что в нее попали, выстрелом номер i+1
                  answer[tar] = str(i+1)
                  
# Генератор, который найдет все такие i в списке целей, в которые мы попали
print len([i for i in answer if i != "-1"])
# Просто превратим список ответов в строку
print " ".join(answer)
