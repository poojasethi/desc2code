#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
#define REP(i,n) for(int i=0,e__=(n);i<e__;++i)

const int MN = 10000;
struct Circle {
  int x, r, id;
  int right;
  bool operator < (const Circle& c) const {
    return right < c.right;
  }
  bool contains(int mx, int my) const {
    return (mx - x) * (mx - x) + my * my <= r * r;
  }
};

Circle cs[MN];
int which[MN];

int main() {
  int N;
  while (cin >> N) {
    REP(i, N) {
      cin >> cs[i].x >> cs[i].r;
      cs[i].id = i;
      cs[i].right = cs[i].x + cs[i].r;
    }
    sort(cs, cs + N);
    memset(which, -1, sizeof(which));
    int M;
    cin >> M;
    int hit = 0;
    REP(i, M) {
      int x, y;
      cin >> x >> y;
      int j = lower_bound(cs, cs + N, (Circle) {x, 0, -1, x}) - cs;
      if (j < N && which[cs[j].id] == -1 && cs[j].contains(x, y))
        which[cs[j].id] = i + 1, ++hit;
      ++j;
      if (j < N && which[cs[j].id] == -1 && cs[j].contains(x, y))
        which[cs[j].id] = i + 1, ++hit;
    }
    cout << hit << endl;
    REP(i, N - 1) cout << which[i] << ' ';
    cout << which[N - 1] << endl;
  }
  return 0;
}
