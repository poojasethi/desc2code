#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cmath>
using namespace std;
#define rep(i,n) for(int i=0; i<(int)(n); i++)
#define all(c) (c).begin(), (c).end()
#define iter(c) __typeof((c).begin())
typedef long long ll;
const int inf = (1<<28);
const double eps = (1e-10);

struct C {
  int id, x, r;
  C() {}
  C(int id, int x, int r): id(id), x(x), r(r) {}
  bool operator<(const C &o) const {
    return x < o.x;
  }
};

int main() {
  int n; cin >> n;
  vector<C> cs(n);
  rep(i,n) cin >> cs[i].x >> cs[i].r;
  rep(i,n) cs[i].id = i;
  int m; cin >> m;
  vector<int> x(m),y(m);
  rep(i,m) cin >> x[i] >> y[i];
  
  sort(all(cs));
  vector<int> v(n,inf);
  
  rep(i,m) {
    int p = distance(cs.begin(), lower_bound(all(cs), C(-1,x[i],0)));
    
    if(0<=p && p<n)
      if(hypot(x[i]-cs[p].x, y[i]) < cs[p].r+eps)
        v[cs[p].id] = min(v[cs[p].id], i+1);
    
    p--;
    if(0<=p && p<n)
      if(hypot(x[i]-cs[p].x, y[i]) < cs[p].r+eps)
        v[cs[p].id] = min(v[cs[p].id], i+1);
  }
  
  int num = 0;
  rep(i,n) num += v[i] != inf;
  cout << num << endl;
  rep(i,n) cout << (v[i]==inf ? -1 : v[i]) << " ";
  cout << endl;
  
  return 0;
}
