#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
const int maxn = 1e4 + 5;
struct t
{
	int pos, r, id, res;
}a[maxn];
int n, m;
int cnt;
int BinarySearch(int x)
{
	int l = 0, r = n - 1;
	while (l < r)
	{
		int m = (l + r) >> 1;
		if (a[m].pos >= x)
			r = m;
		else
			l = m + 1;
	}
	return l;
}
bool CouldShot(int x, int y, int i)
{
	return ((x - a[i].pos) * (x - a[i].pos) + y * y) <= a[i].r * a[i].r;
}
bool cmp1(t p, t q)
{
	return p.pos < q.pos;
}
bool cmp2(t p, t q)
{
	return p.id < q.id;
}
int main()
{
	//freopen("test.in", "r", stdin);
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
	{
		scanf("%d %d", &a[i].pos, &a[i].r);
		a[i].id = i;
		a[i].res = -1;
	}
	sort(a, a + n, cmp1);
	scanf("%d", &m);
	for (int i = 0; i < m; i++)
	{
		int x, y;
		scanf("%d %d", &x, &y);
		int temp = BinarySearch(x);
		for (int j = -1; j < 2; j++)
		{
			if (a[temp + j].res != -1)
				continue;
			if (CouldShot(x, y, temp + j))
			{
				cnt++;
				a[temp + j].res = i + 1;
			}
		}
	}
	sort(a, a + n, cmp2);
	printf("%d\n", cnt);
	for (int i = 0; i < n; i++)
		printf("%d ", a[i].res);
	return 0;
}

   	 					 		  		 				  		    	