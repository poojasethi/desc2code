#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;

struct Target {
	int id, x, r;
	Target(){}
	Target(int Id, int X, int R) {
		id = Id, x = X, r = R;
	}
};

bool operator < (const Target &a, const Target &b) {
	return a.x < b.x;
}

vector <Target> t;
vector <int> ans;

inline bool into(int x, int y, Target &t) {
	return (x - t.x) * (x - t.x) + y * y <= t.r * t.r;
}

int main()
{
	int n, m;
	cin >> n;
	t.reserve(n);
	for (int i = 0; i < n; ++i) {
		int r, x;
		cin >> x >> r;
		t.push_back(Target(i, x, r));
	}
	sort(t.begin(), t.end());
	ans.assign(n, -1);
	cin >> m;
	for (int i = 0; i < m; ++i) {
		int x, y;
		cin >> x >> y;
		vector <Target>::iterator down = lower_bound(t.begin(), t.end(), Target(0, x, 0));
		if (down != t.end()) {
			if (ans[down->id] == -1 && into(x, y, *down))
				ans[down->id] = i + 1;
		}
		if (down != t.begin()) {
			--down;
			if (ans[down->id] == -1 && into(x, y, *down))
				ans[down->id] = i + 1;
		}
	}
	int cnt = 0;
	for (int i = 0; i < n; ++i)
		cnt += (ans[i] != -1);
	cout << cnt << endl;
	for (int i = 0; i < n; ++i)
		cout << ans[i] << ' ';
	cout << endl;
	return 0;
}
