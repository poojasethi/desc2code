#include<algorithm>
#include<iostream>
#include<cstring>
#include<cstdio>

using namespace std;

const int maxn = 5010;
const int mod = 10;

string str;
int n , com[maxn] , data[maxn];
bool ex[maxn] , vis[maxn] , cal[maxn];

struct bign {
	int len , s[maxn];
	
	bign() {
		len = 1;
		memset( s , 0 , sizeof( s ) );
	}
	
	bign operator + ( bign B ) {
		bign C; C.len = max( len , B.len );
		for ( int i = 1 ; i <= C.len ; i++ ) {
			C.s[i] += s[i] + B.s[i];
			if ( C.s[i] >= mod ) {
				C.s[i] -= mod;
				C.s[i + 1]++;
			}
		}
		if ( C.s[C.len + 1] > 0 ) C.len++;
		return C;
	}
	
	bign operator * ( int b ) {
		bign C; C.len = len;
		for ( int i = 1 ; i <= C.len ; i++ ) {
			C.s[i] += s[i] * b;
			C.s[i + 1] += C.s[i] / mod;
			C.s[i] %= mod;
		}
		if ( C.s[C.len + 1] > 0 ) C.len++;
		return C;
	}
	
	void output() {
		for ( int i = len ; i >= 1 ; i-- )
			printf( "%d" , s[i] );
	}
};
bign ans , base;

int main() {
	scanf( "%d" , &n );
	for ( int i = 1 ; i <= n ; i++ ) {
		cin >> str;
		if ( str == "win" ) com[i] = 1;
		scanf( "%d" , &data[i] );
	}
	
	for ( int i = 1 ; i <= n ; i++ ) {
		int w = 0 , v = -1;
		for ( int j = 1 ; j <= n ; j++ )
			if ( !vis[j] && !ex[j] && com[j] == 0 && data[j] > v ) {
				v = data[j];
				w = j;
			}
		
		if ( v == -1 ) break;
		vis[w] = true;
		for ( int j = w - 1 ; j >= 1 && !ex[j] ; j-- )
			if ( com[j] == 1 && data[j] == v ) {
				for ( int k = j ; k <= w ; k++ ) ex[k] = true;
				cal[v] = true;
				break;
			}
	}
	
	base.s[1] = 1;
	for ( int i = 0 ; i <= 2000 ; i++ ) {
		if ( cal[i] ) ans = ans + base;
		base = base * 2;
	}
	ans.output();
	printf( "\n" );
	
	return 0;
}
