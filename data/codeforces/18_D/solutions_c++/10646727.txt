#include "bits\stdc++.h"
using namespace std;
int num[2010][700];
int n;
char cmd[5010][7];
int Pow[5010];
struct s
{
	int Pow, l, r;
}ans[5010];
int lastpos_win_Pow[5010];
bool cmp(s a, s b)
{
	return a.Pow > b.Pow;
}
bool vis[5010];
int res[800];

void add(int n1[], int n2[], int n3[])
{
	int i, c = 0, len = max(n1[0], n2[0]);
	memset(n3, 0, sizeof(n3));
	for(i = 1; i <= len + 1; ++i) {
		n3[i] = n1[i] + n2[i] + c;
		c = n3[i] / 10;
		n3[i] %= 10;
	}
	if(n3[len + 1])
		n3[0] = len + 1;
	else
		n3[0] = len;
}

int main()
{
	scanf("%d", &n);
	int i, tot_ans = 0;
	num[0][0] = 1, num[0][1] = 1;
	for(i = 1; i <= 2005; ++i) {
		add(num[i - 1], num[i - 1], num[i]);
	}
	 for(i = 1; i <= n; ++i) {
		scanf("%s%d", cmd[i], &Pow[i]);
		if(cmd[i][0] == 'w') {
			lastpos_win_Pow[Pow[i]] = i;
		}
		else {
			if(lastpos_win_Pow[Pow[i]]) {
				++tot_ans;
				ans[tot_ans].l = lastpos_win_Pow[Pow[i]];
				ans[tot_ans].r = i;
				ans[tot_ans].Pow = Pow[i];
				lastpos_win_Pow[Pow[i]] = 0;
			}
		}
	}
	
	sort(ans + 1, ans + 1 + tot_ans, cmp);
	
	//cout << "tot == " << tot_ans << endl;
	for(i = 1; i <= tot_ans; ++i) {
		bool ok = 1;
		for(int j = ans[i].l; j <= ans[i].r; ++j) {
			if(vis[j]) {
				ok = 0;
				break;
			}
		}
		if(ok) {
			add(res, num[ans[i].Pow], res);
			//cout << ans[i].Pow << "  l == " << ans[i].l << "  r == " << ans[i].r << endl;
		}
		else {
			continue;
		}
		for(int j = ans[i].l; j <= ans[i].r; ++j) {
			vis[j] = 1;
		}
	}
	if(res[0] == 0)
		++res[0];
	for(i = res[0]; i >= 1; --i) {
		printf("%d", res[i]);
	}
	puts("");
}
