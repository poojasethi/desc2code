//In the name of God

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
const int MAXN=2e4+10;
string p[MAXN],dp[MAXN];
vector <int> a[MAXN];

inline string jam(string s,string t)
{
  reverse(s.begin(),s.end());
  reverse(t.begin(),t.end());
  while(s.length()<t.length())
    s+='0';
  while(t.length()<s.length())
    t+='0';
  int g=0;
  string ans="";
  for(int i=0;i<s.length();i++)
    {
      int x=s[i]-'0',y=t[i]-'0';
      int r=x+y+g;
      g=r/10;
      ans+=(r%10)+'0';
    }
  while(g)
    {
      ans+=(g%10)+'0';
      g/=10;
    }
  reverse(ans.begin(),ans.end());
  return ans;
}

inline bool cmp(string s,string t)
{
  if(s.length()>t.length())
    return true;
  if(s.length()==t.length() && s>t)
    return true;
  return false;
}

inline void make_power()
{
  string ans="1";
  for(int i=0;i<=2000;i++)
    {
      p[i]=ans;
      ans=jam(ans,ans);      
    }
}

int main()
{
  ios::sync_with_stdio(false);
  make_power();
  int n;
  cin>>n;
  dp[0]="0";
  for(int i=1;i<=n;i++)
    {
      string s;
      int x;
      cin>>s>>x;
      if(s=="win")
    {
      dp[i]=dp[i-1];
      a[x].push_back(i);
    }
      else
    {
      if(a[x].empty())
        {
          dp[i]=dp[i-1];
          continue;
        }
      string ans="0";
      for(int j=0;j<a[x].size();j++)
        {
          int y=a[x][j];
          if(cmp(dp[y-1],ans))//dp[y-1]>ans
        ans=dp[y-1];
        }
      ans=jam(ans,p[x]);
      if(cmp(dp[i-1],ans))
        ans=dp[i-1];
      dp[i]=ans;
    }
    }
  cout<<dp[n]<<endl;
  return 0;
}