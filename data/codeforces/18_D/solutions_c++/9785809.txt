#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
char a[2010][700];

void Add(char* ss, char x[], char y[])
{
	char s[2000];
	int lx = strlen(x);
	int ly = strlen(y);
	int l = max(lx, ly);
	int c = 0, t = 0;
	for(int i = 0; i < l; i++)
	{
		int a1, a2;
		if(i >= lx)
			a1 = 0;
		else
			a1 = x[i]-'0';
		if(i >= ly)
			a2 = 0;
		else
			a2 = y[i]-'0';
		s[t++] = (a1+a2+c)%10+'0';
		c = (a1+a2+c)/10;
	}
	if(c)
		s[t++] = c+'0';
	s[t] = 0;
	strcpy(ss, s);
}

int f[2100];
int vis[5100];
struct node
{
	int val, x, y; 
}p[5010];

bool cmp(node a, node b)
{
	return a.val > b.val;
}
int main()
{
	
	a[0][0] = '1';
	a[0][1] = 0;
	for(int i = 1; i <= 2000; i++)
		Add(a[i], a[i-1], a[i-1]);
	int n;
	int m = 0;
	scanf("%d", &n);
	char ans[2100];
	ans[0] = '0';
	ans[1] = 0;
	for(int i = 1; i <= n; i++)
	{
		char str[20];
		int x;
		scanf("%s %d", str, &x);
		if(str[0] == 'w')
		{
			f[x] = i;
		}
		else
		{		
			if(f[x])
			{
				p[m].val = x;
				p[m].x = f[x];
				p[m++].y = i;
			}
		}
	}
	sort(p, p+m, cmp);
	for(int i = 0; i < m; i++)
	{
		int flag = 0;
		for(int j = p[i].x; j <= p[i].y; j++)
		{
			if(vis[j])
			{
				flag = 1;
				break;
			}
		}
		if(!flag)
		{
			for(int j = p[i].x; j <= p[i].y; j++)
			{
				vis[j] = 1;
			}
			Add(ans, ans, a[p[i].val]);
		}
	}
	reverse(ans, ans+strlen(ans));
	puts(ans);
	return 0;
}

	    	 	   	     				      	