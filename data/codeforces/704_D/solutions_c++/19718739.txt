#include <set>
#include <map>
#include <cmath>
#include <ctime>
#include <bitset>
#include <string>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <algorithm>
#define PR pair
#define fi first
#define se second
#define mk make_pair
#define pb push_back
#define REP(i, x, y)   for(int i = (int)(x); i <= (int)(y); i++)
#define FOR(i, x, y)   for(int i = (int)(x); i <  (int)(y); i++)
#define PER(i ,x, y)  for(int i = (int)(x); i >= (int)(y); i--)
#define CH	         ch = getchar()
#define Exit(...)    printf(__VA_ARGS__), exit(0)
#define dln()        fprintf(stderr,"\n")
#define dprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
typedef double	  db;
typedef long long LL;
typedef vector<int> VI;
typedef vector<VI > VII;
typedef PR<int,int> PII;
typedef vector<PII> VPI;
const	int inf=2e9;
const	LL Inf=1e10;
const	int P=1e9+7;
const	int N=300005;

inline LL IN(){
	LL x = 0;
	int ch = 0, f = 0;
	for (CH; ch != -1 && (ch < 48 || ch > 57); CH) f = (ch == '-');
	for (; ch >= 48 && ch <= 57; CH) x = (x << 1) + (x << 3) + ch - '0';
	return f ? (-x) : x;
}
template<typename T> inline int chkmin(T &a, const T &b){if(b < a) return a = b, 1; return 0;}
template<typename T> inline int chkmax(T &a, const T &b){if(b > a) return a = b, 1; return 0;}

void renew(int &x, const int &y){
	if((x += y) >= P) x -= P;
}

int Pow(int x, int y, int p){
	int a = 1;
	for (; y; y >>= 1, x = (LL)x * x %p) if(y & 1) a=(LL)a * x%p;
	return a;
}

char cp, ep, col[N];
int ou[N], in[N];
int n, m, r, b, X[N], Y[N];
int vx[N], vy[N], cntx[N], cnty[N], gx[N], gy[N];
int cnt, S, T, idx[N], idy[N], s, t, gg[N];
struct edge{
	int v, w, pre;
}e[1000005]; int dex = 1, adj[N];

void adde(int x, int y, int L, int R){
	/*
	if(x == 1) printf("S ");
	if(x == 2) printf("T ");
	if(x == 3) printf("s ");
	if(x == 4) printf("t ");
	REP(i, 1, *X) if(idx[i] == x) printf("X(%d) ", i);
	REP(i, 1, *Y) if(idy[i] == x) printf("Y(%d) ", i);
	if(y == 1) printf("S ");
	if(y == 2) printf("T ");
	if(y == 3) printf("s ");
	if(y == 4) printf("t ");
	REP(i, 1, *X) if(idx[i] == y) printf("X(%d) ", i);
	REP(i, 1, *Y) if(idy[i] == y) printf("Y(%d) ", i);
	printf("%d %d\n", L, R);
	*/
	R -= L;
	in[y] += L;
	ou[x] += L;
	e[++dex] = (edge){y, R, adj[x]}; adj[x] = dex;
	e[++dex] = (edge){x, 0, adj[y]}; adj[y] = dex;
}

int que[N], tot, dis[N];
int bfs(int s, int t){
	REP(i, 1, cnt) dis[i] = -1;
	dis[que[tot = 1] = s] = 0;
	REP(l, 1, tot){
		int u = que[l];
		if(u == t) return 1;
		for(int i = adj[u]; i; i = e[i].pre){
			int v = e[i].v;
			if(!e[i].w) continue;
			if(dis[v] == -1) dis[que[++tot] = v] = dis[u] + 1;
		}
	}
	return 0;
}

int dfs(int x, int t, int f){
	if(x == t) return f;
	int ret = 0;
	for(int i = adj[x]; i; i = e[i].pre){
		int v = e[i].v;
		if(!e[i].w) continue;
		if(dis[v] != dis[x] + 1) continue;
		int F = dfs(v, t, min(f - ret, e[i].w));
		e[i].w -= F;
		e[i ^ 1].w += F;
		ret += F;
		if(ret == f) return ret;
	}
	if(!ret) dis[x] = -1;
	return ret;
}

int maxflow(){
	int ans = 0;
	while(bfs(s, t))
		ans += dfs(s, t, inf);
	return ans;
}

int main(){
	scanf("%d%d", &n, &m);
	scanf("%d%d", &r, &b);
	if(r <= b) cp = 'r', ep = 'b';
	else cp = 'b', ep = 'r';
	REP(i, 1, n){
		scanf("%d%d", vx + i, vy + i);
		X[++*X] = vx[i];
		Y[++*Y] = vy[i];
	}
	sort(X + 1, X + *X + 1); *X = unique(X + 1, X + *X + 1) - (X + 1);
	sort(Y + 1, Y + *Y + 1); *Y = unique(Y + 1, Y + *Y + 1) - (Y + 1);
	REP(i, 1, n){
		vx[i] = lower_bound(X + 1, X + *X + 1, vx[i]) - X;
		vy[i] = lower_bound(Y + 1, Y + *Y + 1, vy[i]) - Y;
		cntx[vx[i]] ++;
		cnty[vy[i]] ++;
	}
	REP(i, 1, *X) gx[i] = cntx[i];
	REP(i, 1, *Y) gy[i] = cnty[i];
	REP(i, 1, m){
		int t, d, v;
		scanf("%d%d%d", &t, &d, &v);
		if(t == 1){
			int vd = lower_bound(X + 1, X + *X + 1, d) - X;
			if(X[vd] != d) continue;
			chkmin(gx[vd], v);
		}else{
			int vd = lower_bound(Y + 1, Y + *Y + 1, d) - Y;
			if(Y[vd] != d) continue;
			chkmin(gy[vd], v);
		}
	}
	S = ++cnt;
	T = ++cnt;
	s = ++cnt;
	t = ++cnt;
	REP(i, 1, *X) idx[i] = ++cnt;
	REP(i, 1, *Y) idy[i] = ++cnt;
	REP(i, 1, *X){
		if(gx[i] == cntx[i]){
			adde(S, idx[i], 0, inf);
			continue;
		}
		int L = (cntx[i] - gx[i] + 1) >> 1;
		int R = (gx[i] + cntx[i]) >> 1;
		if(L > R){
			printf("-1");
			return 0;
		}
		adde(S, idx[i], L, R);
	}
	REP(i, 1, *Y){
		if(gy[i] == cnty[i]){
			adde(idy[i], T, 0, inf);
			continue;
		}
		int L = (cnty[i] - gy[i] + 1) >> 1;
		int R = (gy[i] + cnty[i]) >> 1;
		if(L > R){
			printf("-1");
			return 0;
		}
		adde(idy[i], T, L, R);
	}
	REP(i, 1, n){
		adde(idx[vx[i]], idy[vy[i]], 0, 1);
		gg[i] = dex;
	}
	REP(i, 1, cnt){
		if(ou[i]) adde(i, t, 0, ou[i]);
		if(in[i]) adde(s, i, 0, in[i]);
	}
	maxflow();
	adde(T, S, 0, inf);
	maxflow();
	
	for(int i = adj[s]; i; i = e[i].pre){
		if(e[i].w){
			puts("-1");
			return 0;
		}
	}
	
	REP(i, 1, n) if(e[gg[i]].w) col[i] = ep; else col[i] = cp;
	LL ans = 0;
	REP(i, 1, n) if(col[i] == 'r') ans += r; else ans += b;
	cout << ans << endl;
	puts(col + 1);
	return 0;
}



