#include<set>
#include<map>
#include<cmath>
#include<ctime>
#include<queue>
#include<stack>
#include<bitset>
#include<cstdio>
#include<vector>
#include<string>
#include<iomanip>
#include<complex>
#include<cstring>
#include<iostream>
#include<algorithm>
#pragma warning(disable:4996)
#pragma comment(linker, "/STACK:1024000000,1024000000")
#define rep(i,l,r) for(int i=l;i<=r;i++)
#define drep(i,r,l) for(int i=r;i>=l;i--)
#define mst(a) memset(a,0,sizeof(a))
#define sz(a) (int)a.size()
#define mp make_pair
#define lth th<<1
#define rth th<<1|1
#define fir first
#define sec second
#define fuck cout<<233<<endl
#define getll(k) scanf("%lld",&k)
#define getint(k) scanf("%d",&k)
const long double pi = acosl(-1.);
int T;
typedef std::complex<long double> com;
const long long mod = 258280327;
long long gcd(long long x, long long y) {
    if (!y)return x;
    return gcd(y, x%y);
}
long long quickfind(long long x, long long y) {
    long long result = 1;
    while (y) {
        if (y & 1)result = result*x%mod;
        y >>= 1;
        x = x*x%mod;
    }
    return result;
}
using namespace std;
int dfn[33333];
int cnt[33333];
struct master {
    int x, y, z;
    master(int x = 0, int y = 0, int z = 0) :x(x), y(y), z(z) {}
};
int n;
int size[33333];
vector<master>cd[33333];
vector<int>ans;
int q[11111111]={0};
int h=5000000,t=5000000-1;
void solve(){
    rep(i,1,n)q[++t]=i,size[i]=4;
    while(h<=t){
        int x=q[h++];
        if(sz(cd[x])==0)continue;
        int y=cd[x][sz(cd[x])-1].x;
        int z=cd[x][sz(cd[x])-1].y;
        size[x]--,size[y]++,size[z]++;
        if(size[y]>9||size[z]>9){
            size[x]++;
            size[y]--;
            size[z]--;
            q[++t]=x;
            continue;
        }
        ans.push_back(cd[x][sz(cd[x])-1].z);
        cd[x].pop_back();
        q[++t]=x;
    }

}
int main() {
    srand(time(NULL));
    getint(n);
    rep(i, 1, n << 2)
    {
        int a, b,c;
        getint(a);
        getint(b);
        getint(c);
        cd[a].push_back(master(b, c, i));
    }
    rep(i, 1, n) {
        rep(j, 1, 16) {
            int x = rand() % 4;
            int y = rand() % 4;
            swap(cd[i][x], cd[i][y]);
        }
    }
    solve();
    if (sz(ans) == n * 4) {
        printf("YES\n");
        printf("%d", ans[0]);
        rep(i, 1, sz(ans) - 1)printf(" %d", ans[i]);
        puts("");
    }
    else printf("NO\n");
    return 0;
}
