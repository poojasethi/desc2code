#include<cmath>
#include<math.h>
#include<ctype.h>
#include<algorithm>
#include<bitset>
#include<cassert>
#include<cctype>
#include<cerrno>
#include<cfloat>
#include<ciso646>
#include<climits>
#include<clocale>
#include<complex>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<cwchar>
#include<cwctype>
#include<deque>
#include<exception>
#include<fstream>
#include<functional>
#include<iomanip>
#include<ios>
#include<iosfwd>
#include<iostream>
#include<istream>
#include<iterator>
#include<limits>
#include<list>
#include<locale>
#include<map>
#include<memory>
#include<new>
#include<numeric>
#include<ostream>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<stdexcept>
#include<streambuf>
#include<string>
#include<typeinfo>
#include<utility>
#include<valarray>
#include<vector>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>
using namespace std;
#define havetxt 0
#define shuru "input.txt"
#define shuchu "output.txt"
#define inf 0x7fffffff
#define esp 1e-9

typedef long long ll;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

int N;
int pos[30010],b[30010][4],c[30010][4],id[30010][4];
int cnt[30010];
priority_queue <pair <int, int> > q;

int main()
{
    int i;
    
    cin>>N;
    REP(i,4*N){
        int p,q,r;
        scanf("%d%d%d", &p, &q, &r);
        p--; q--; r--;
        b[p][pos[p]] = q;
        c[p][pos[p]] = r;
        id[p][pos[p]] = i;
        pos[p]++;
    }
    
    REP(i,N) cnt[i] = 8;
    REP(i,N) q.push(make_pair(-8, i));
    REP(i,N) pos[i] = 0;
    
    vector <int> ans;
    
    while(!q.empty()){
        int x = q.top().second;
        q.pop();
        if(pos[x] == 4 || cnt[x] == 9) continue;
        
        int y = b[x][pos[x]];
        int z = c[x][pos[x]];
        int idd = id[x][pos[x]];
        pos[x]++;
        ans.push_back(idd);
        
        cnt[x]++; cnt[y]--; cnt[z]--;
        q.push(make_pair(-cnt[x], x));
        q.push(make_pair(-cnt[y], y));
        q.push(make_pair(-cnt[z], z));
    }
    
    printf("YES\n");
    for(i=4*N-1;i>=0;i--){
        printf("%d", ans[i] + 1);
        if(i == 0) printf("\n"); else printf(" ");
    }
    
    return 0;
}
  		 	  				 			  	 	   	