#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <cmath>
#include <iostream>
#include <set>
#include <fstream>
#include <string>
#include <vector>

using namespace std;
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s); i>=(e); i--)
#define LL long long
#define eps 1e-9
#define pi acos(-1.0)
#define fail {printf("Impossible\n"); return 0;}
LL max(LL a,LL b){if (a>b){return a;} else {return b;}}
LL min(LL a,LL b){if (a<b){return a;} else {return b;}}

int n, m;

#define N 300001

int nu[N];

struct dat{
    int id;
    int flux;
    dat(){}
    dat(int id, int flux):id(id), flux(flux){}
};

bool operator< (dat u, dat v){
    if (u.flux == v.flux) return u.id < v.id;
    return u.flux < v.flux;
}

set<dat> S;

int a[N], b[N], c[N];
int us[N];

vector<int> v[N];
set<int> X, Y;

int main(){
    puts("YES");
    scanf("%d", &n);
    FOE(i, 1, n) nu[i] = 4;
    FOE(i, 1, 4 * n){
        scanf("%d%d%d", &a[i], &b[i], &c[i]);
        S.insert(dat(i, 4));
        v[b[i]].push_back(i);
        if (b[i] != c[i]) v[c[i]].push_back(i);
    }
    FOE(i, 1, 4 * n) us[i] = 0;

    FOE(i, 1, 4 * n){
        dat x = *S.begin();
        S.erase(S.begin());
        printf("%d ", x.id);
        us[x.id] = 1;
        while (X.size()) X.erase(X.begin());
        X.insert(a[x.id]);
        X.insert(b[x.id]);
        X.insert(c[x.id]);
        for (set<int>::iterator it = X.begin(); it != X.end(); ++it){
            int w = *it;
            FOR(j, 0, v[w].size()){
                int tar = v[w][j];
                int ff = max(nu[b[tar]], nu[c[tar]]);
                if (!us[tar])
                    S.erase(dat(tar, ff));
            }
        }
        nu[a[x.id]]--;
        nu[b[x.id]]++;
        nu[c[x.id]]++;
     //   puts("HI");
        for (set<int>::iterator it = X.begin(); it != X.end(); ++it){
            int w = *it;
            FOR(j, 0, v[w].size()){
                int tar = v[w][j];
                int ff = max(nu[b[tar]], nu[c[tar]]);
                if (!us[tar])
                    S.insert(dat(tar, ff));
            }
        }
      //  FOE(j, 1, n) printf("%d ", nu[j]);
      //  puts("");
    }
    puts("");
    return 0;
}
