#include <complex>
#include <iostream>
using namespace std;

const int max_n = 100015;

typedef complex<long long> point;
#define x real()
#define y imag()

long long n,q;
point c, p[max_n];

long long cross(point a, point b)
{
    return imag(conj(a) * b);
}

int main()
{
    cin>>n;
    for (int i = 0; i < n; i++)
        cin>>p[i].x>>p[i].y;
    cin>>q;
    while ( q-- )
    {
        cin>>c.x>>c.y;
        int l=1,r=n-1;
        while ( l < r )
        {
            int mid = (l + r) / 2;
            if ( cross(c - p[0], p[mid] - p[0]) <= 0 )
                r = mid;
            else
                l = mid + 1;
        }
        if (cross(c - p[0], p[1] - p[0]) <= 0 ||
            cross(c - p[0], p[n-1] - p[0]) >= 0 || // scos din poligon
            cross(c - p[l-1], p[l] - p[l-1]) <= 0) // peste linia actuala
        {
            cout << "NO";
            return 0;
        }
    }
    cout << "YES";
}
