#include <iostream>
#include <vector>
#include <algorithm>
#define F(i,a) for(int i=0;i<int((a).size());++i)
#define ALL(c) (c).begin(), (c).end()
#define X first
#define Y second
#define T vector< pair<int,int> >
#define Q { cout << "NO\n"; return 0; }
#define W ((double)en->Y-be->Y)*(b[i].X-be->X)/(en->X-be->X)+be->Y;
using namespace std;

int main()
{
	int n;
	cin >> n;
	T a(n);
	F(i,a) cin >> a[i].X >> a[i].Y;
	int m;
	cin >> m;
	T b(m);
	F(i,b) cin >> b[i].X >> b[i].Y;
	rotate(a.begin(),max_element(ALL(a)),a.end());
	T down(a.begin(),min_element(ALL(a))+1),
	  up(min_element(ALL(a)),a.end());
	reverse(ALL(down));
	up.push_back(a[0]);
	int mnx=min_element(ALL(a))->X,
		mxx=max_element(ALL(a))->X;
	for (int i=0; i<m; ++i)
	{
		if (b[i].X<=mnx || b[i].X>=mxx) Q
		T::iterator en=lower_bound(ALL(up),b[i]),
		                                  be=en-1;
		double y= W
		if (!(y-b[i].Y>1e-10)) Q
		en=lower_bound(ALL(down),b[i]);
		be=en-1;
		y= W
		if (!(b[i].Y-y>1e-10)) Q
	}
	cout << "YES\n";
	return 0;
}
