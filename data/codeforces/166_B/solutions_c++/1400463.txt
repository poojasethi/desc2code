#include <cstdio>
#include <algorithm>

struct Point
{
  int x, y;
  Point(const int xx = 0, const int yy = 0): x(xx), y(yy) { }
} a[100000];
inline long long cross_product(const Point& A, const Point& B, const Point& C, const Point& D)
{
  const long long x1 = B.x-A.x, y1 = B.y-A.y;
  const long long x2 = D.x-C.x, y2 = D.y-C.y;
  return x1*y2-x2*y1;
}
int n, m;
bool in_convex(const Point& p)
{
  int lef = 1, rig = n;
  while (rig-lef > 1)
  {
    const int mid((lef+rig)>>1);
    if (cross_product(a[0], a[mid], a[0], p) <= 0LL)
      lef = mid;
    else
      rig = mid;
  }
  if (lef == n-1 || (lef == 1 && cross_product(a[0], a[lef], a[0], p) >= 0LL))
    return false;
  if (cross_product(p, a[lef], p, a[lef+1]) < 0LL)
    return true;
  else
    return false;
}
int main()
{
  scanf("%d", &n);
  for (int i = 0; i < n; ++i)
    scanf("%d%d", &a[i].x, &a[i].y);
  scanf("%d", &m);
  for (int i = 0, x, y; i < m; ++i)
  {
    scanf("%d%d", &x, &y);
    if (!in_convex(Point(x, y)))
    {
      printf("NO");
      return 0;
    }
  }
  printf("YES");
}
