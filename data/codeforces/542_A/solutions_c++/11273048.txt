#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
#include<queue>
#define SF scanf
#define PF printf
#define ls (i<<1)
#define rs (i<<1|1)
using namespace std;
typedef long long LL;
const int MAXN = 200000;
int fangre[MAXN+10], L[MAXN+10], R[MAXN+10], FAngre[MAXN+10];
int n, m;
int mx = -1, ncnt = 0;
struct view {
	int l, r, id;
	bool operator < (const view &t) const {
		return l < t.l || (l == t.l && r < t.r);
	}
} A[MAXN+10];
struct Seg_Tree {
	int val[MAXN*4+10], MAX[MAXN*4+10];
	void up(int i) {
		MAX[i] = max(MAX[ls], MAX[rs]);
	}
	void build(int i, int l, int r) {
		if(l == r) {
			MAX[i] = val[i] = R[l] - L[l];
			return ;
		}
		int mid = (l+r) >> 1;
		build(ls, l, mid);
		build(rs, mid+1, r);
		up(i);
	}
	int query(int i, int l, int r, int L = 0, int R = ncnt-1) {
		if(l > r) return 0;
		if(l > R || r < L) return 0;
		if(l <= L && R <= r) return MAX[i];
		int mid = L+R >> 1;
		return max(query(ls, l, r, L, mid), query(rs, l, r, mid+1, R));
	}
} seg;
int x[MAXN+10], y[MAXN+10], c[MAXN+10];
int main() {
	SF("%d%d", &n, &m);
	for(int i = 1; i <= n; i++) {
		SF("%d%d", &A[i].l, &A[i].r);
		A[i].id = i;
	}
	sort(A+1, A+1+n);
	for(int i = 1; i <= n; i++) {
		if(A[i].r <= mx) continue;
		L[ncnt] = A[i].l; R[ncnt] = A[i].r;
		mx = R[ncnt];
		ncnt++;
	}
	seg.build(1, 0, ncnt-1);
	LL ans = 0;
	int ansp = 0, anspp = 0;
	for(int i = 1; i <= m; i++) {
		int lo, hi;
		LL ret = 0;
		SF("%d%d%d", &x[i], &y[i], &c[i]);
		int l = 0, r = ncnt-1;
		while(l < r) {
			int mid = l+r+1 >> 1;
			if(L[mid] >= x[i]) r = mid-1;
			else l = mid;
		}
		lo = l;
		l = 0; r = ncnt-1;
		while(l < r) {
			int mid = l+r >> 1;
			if(R[mid] <= y[i]) l = mid+1;
			else r = mid;
		}
		hi = l;
		ret = 1LL * c[i] * seg.query(1, lo+1, hi-1);
		ret = max(ret, 1LL * c[i] * (min(R[lo], y[i]) - max(x[i], L[lo])));
		ret = max(ret, 1LL * c[i] * (min(y[i], R[hi]) - max(L[hi], x[i])));
		if(ret > ans) {
			ans = ret; ansp = i;
		}
	}
	if(ans) {
		for(int i = 1; i <= n; i++)
		if(ans == 1LL * c[ansp] * (min(y[ansp], A[i].r) - max(x[ansp], A[i].l))) {
			anspp = i;
			break;
		}
		PF("%I64d\n", ans);
		PF("%d %d", A[anspp].id, ansp);
	}
	else puts("0");
}
	 			 				 	   	 	   	    		