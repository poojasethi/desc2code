#include <bits/stdc++.h>

#define MAXN 200005
#define NameTask "A"

using namespace std;

int n, m;
int L[MAXN], R[MAXN];
int A[MAXN], B[MAXN], C[MAXN];
int X[MAXN], Y[MAXN];
int p[MAXN], q[MAXN];
pair<int, int> T[MAXN];
int tmp[MAXN];

inline bool cmpP1(int i, int j) {
  return L[i] < L[j];
}

inline bool cmpQ1(int i, int j) {
  return A[i] < A[j];
}

int process1() {
  sort(p, p + n, cmpP1);
  sort(q, q + m, cmpQ1);

  int id;
  int tmax = 0;
  for (int i = 0, j = 0; i < m; i++) {
    while (j < n && L[p[j]] <= A[q[i]]) {
      if (tmax < R[p[j]]) {
        tmax = R[p[j]];
        id = p[j];
      }
      j++;
    }
    int d = min(tmax, B[q[i]]) - A[q[i]];
    if (X[q[i]] < d) {
      X[q[i]] = d;
      Y[q[i]] = id;
    }
  }
}

inline bool cmpP2(int i, int j) {
  return R[i] > R[j];
}

inline bool cmpQ2(int i, int j) {
  return B[i] > B[j];
}

int process2() {
  sort(p, p + n, cmpP2);
  sort(q, q + m, cmpQ2);

  int id;
  int tmin = 1e9;
  for (int i = 0, j = 0; i < m; i++) {
    while (j < n && R[p[j]] >= B[q[i]]) {
      if (tmin > L[p[j]]) {
        tmin = L[p[j]];
        id = p[j];
      }
      j++;
    }
    int d = B[q[i]] - max(tmin, A[q[i]]);
    if (X[q[i]] < d) {
      X[q[i]] = d;
      Y[q[i]] = id;
    }
  }
}

inline bool cmpP3(int i, int j) {
  return R[i] < R[j];
}

inline bool cmpQ3(int i, int j) {
  return B[i] < B[j];
}

int setT(int i, pair<int, int> p) {
  for (i++; i > 0; i -= i & (-i)) {
    T[i] = max(T[i], p);
  }
}

pair<int, int> getT(int i) {
  pair<int, int> p(0, 0);
  for (i++; i <= n; i += i & (-i)) {
    p = max(p, T[i]);
  }
  return p;
}

int process3() {
  sort(p, p + n, cmpP3);
  sort(q, q + m, cmpQ3);
  for (int i = 0; i < n; i++) {
    tmp[i] = L[i];
  }
  sort(tmp, tmp + n);
  for (int i = 0, j = 0; i < m; i++) {
    while (j < n && R[p[j]] <= B[q[i]]) {
      int pos = lower_bound(tmp, tmp + n, L[p[j]]) - tmp;
      setT(pos, make_pair(R[p[j]] - L[p[j]], p[j]));
      j++;
    }
    int pos = lower_bound(tmp, tmp + n, A[q[i]]) - tmp;
    pair<int, int> d = getT(pos);
    if (d.first > X[q[i]]) {
      X[q[i]] = d.first;
      Y[q[i]] = d.second;
    }
  }
}

int main() {
  //freopen(NameTask".inp", "r", stdin);
  //freopen(NameTask".out", "w", stdout);
  ios_base :: sync_with_stdio(0);
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> L[i] >> R[i];
    p[i] = i;
  }
  for (int i = 0; i < m; i++) {
    cin >> A[i] >> B[i] >> C[i];
    q[i] = i;
  }

  process1();
  process2();
  process3();

  int idx, idy;
  long long res = 0;
  for (int i = 0; i < m; i++) {
    if (res < 1LL * C[i] * X[i]) {
      res = 1LL * C[i] * X[i];
      idx = Y[i];
      idy = i;
    }
  }
  cout << res;
  if (res) {
    cout << "\n" << idx + 1 << " " << idy + 1;
  }
}
