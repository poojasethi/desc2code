#include<bits/stdc++.h>
typedef long long int uli;
using namespace std;

const int mxn=2e5+10;
const int mxt=mxn<<2;
int chl[mxn],chr[mxn];
int tvl[mxn],tvr[mxn],tvc[mxn];
int mp[mxt],c=0;
int n,m;
pair<int,int>f[mxn];
pair<pair<int,int>,int>d[mxn];
pair<int,int>ft[mxt];
struct ev{
   int x,i,t;
   ev(){}
   ev(int x,int i,int t):x(x),i(i),t(t){}
   bool operator <(ev a)const{
      if(x!=a.x)return x<a.x;
      if(t!=a.t)return t<a.t;
      return i<a.i;
   }
};
ev e[mxt];
int ne=0;
uli ans=0;
int atv,ach;

void upd(int i,pair<int,int>v){
   i=mxt-1-i;
   for(;i<mxt;i+=(i&-i))
      ft[i]=max(ft[i],v);
}
pair<int,int>qry(int i){
   i=mxt-i-1;
   pair<int,int>ans(-1,-1);
   for(;i>0;i-=(i&-i))
      ans=max(ans,ft[i]);
   return ans;
}
void solve(){
   for(int i=0;i<n;i++){
      pair<int,int>crds(chl[i],chr[i]);
      d[i]=make_pair(crds,i);
   }
   sort(d,d+n);
   int r=d[0].first.second;
   int i=d[0].second;
   f[0]=make_pair(r,i);
   for(int j=1;j<n;j++){
      r=d[j].first.second;
      i=d[j].second;
      f[j]=f[j-1];
      if(r>f[j-1].first){
         f[j]=make_pair(r,i);
      }      
   }
   for(int i=0;i<m;i++){
      int lft=tvl[i];
      pair<int,int>crds(lft,-1);
      pair<pair<int,int>,int>p(crds,-1);
      int ix=upper_bound(d,d+n,p)-d-1;
      if(0<=ix && ix<n){
         int rht= min(tvr[i],f[ix].first);
         uli bet=uli(rht-lft)*uli(tvc[i]);
         if(bet>ans){
            ans=bet;
            atv=i;
            ach=f[ix].second;
         }
      }
   }
}
int main(){
   scanf("%d %d",&n,&m);
   for(int i=0;i<n;i++){
      scanf("%d %d",chl+i,chr+i);
      mp[c++]=chl[i];
      mp[c++]=chr[i];
      e[ne++]=ev(chr[i],i, 0);
   }
   for(int i=0;i<m;i++){
      scanf("%d %d %d",tvl+i,tvr+i,tvc+i);
      mp[c++]=tvl[i];
      mp[c++]=tvr[i];
      e[ne++]=ev(tvr[i],i, 1);
   }
   sort(mp,mp+c);
   c=unique(mp,mp+c)-mp;
   sort(e,e+ne);
   for(int i=0;i<mxt;i++)ft[i]=make_pair(0,0);
   for(int i=0;i<ne;i++){
      int ix=e[i].i;
      if(e[i].t==0){
         int lft=lower_bound(mp,mp+c,chl[ix])-mp;
         int ln=chr[ix]-chl[ix];
         upd(lft,pair<int,int>(ln,ix));
      }
      else{
         int lft=lower_bound(mp,mp+c,tvl[ix])-mp;
         pair<int,int>q=qry(lft);
         uli bet=uli(q.first)*uli(tvc[ix]);
         if(bet>ans){
            ans=bet;
            atv=ix;
            ach=q.second;
         }
      }
   }
   solve();
   for(int i=0;i<n;i++){
      swap(chl[i],chr[i]);
      chl[i]*=-1;
      chr[i]*=-1;
   }
   for(int i=0;i<m;i++){
      swap(tvl[i],tvr[i]);
      tvl[i]*=-1;
      tvr[i]*=-1;
   }
   solve();

   cout<<ans<<endl;
   if(ans>0) cout<<ach+1<<" "<<atv+1<<endl;
   return 0;
}
