#include <cstdio>
#include <algorithm>
#include <map>
using namespace std;

typedef long long LL;
const int N = 2e5 + 10;
int n,m,tot,ansn,ansm;
LL a[N * 4];
struct data {
    int type;
    LL l,r,v,id;
} s[N * 2];
LL ans;
LL tree[N * 4];
map<LL,int> num;

void init() {
    scanf("%d%d",&n,&m);
    for (int i = 1;i <= n;i ++) {
        s[i].type = 1,s[i].id = i;
        scanf("%I64d%I64d",&s[i].l,&s[i].r);
        a[++ tot] = s[i].l,a[++ tot] = s[i].r;
    }
    for (int i = 1;i <= m;i ++) {
        s[i + n].type = 2,s[i + n].id = i;
        scanf("%I64d%I64d%I64d",&s[i + n].l,&s[i + n].r,&s[i + n].v);
        a[++ tot] = s[i + n].l,a[++ tot] = s[i + n].r;
    }
}

bool cmp1(data a,data b) {
    return a.l < b.l || a.l == b.l && a.type < b.type;
}

bool cmp2(data a,data b) {
    return a.r > b.r || a.r == b.r && a.type < b.type;
}

void solve() {
    sort(s + 1,s + 1 + n + m,cmp1);
    int i;
    for (i = 1;i <= n + m;i ++) if (s[i].type == 1) break;
    int cur = i;
    for (i = cur + 1;i <= n + m;i ++) {
        if (s[i].type == 1) {
            if (s[i].r > s[cur].r) cur = i;
        }
        else if (ans < s[i].v * (min(s[cur].r,s[i].r) - s[i].l)) {
            ans = s[i].v * (min(s[cur].r,s[i].r) - s[i].l);
            ansn = s[cur].id,ansm = s[i].id;
        }
    }   
    sort(s + 1,s + 1 + n + m,cmp2);
    for (i = 1;i <= n + m;i ++) if (s[i].type == 1) break;
    cur = i;
    for (i = cur + 1;i <= n + m;i ++) {
        if (s[i].type == 1) {
            if (s[cur].l > s[i].l) cur = i;
        }
        else if (ans < s[i].v * (s[i].r - max(s[cur].l,s[i].l))) {
            ans = s[i].v * (s[i].r - max(s[cur].l,s[i].l));
            ansn = s[cur].id,ansm = s[i].id;
        }
    }
}

int lowbit(int x) {
    return x & -x;
}

void ins(int pos,int x) {
    while (pos) {
        if (s[tree[pos]].v < s[x].v) tree[pos] = x;
        pos -= lowbit(pos);
    }
}

LL qry(int pos) {
    LL re = n + m + 1,cur = 0;
    while (pos <= tot) {
        if (cur < s[tree[pos]].v) cur = s[tree[pos]].v,re = tree[pos];
        pos += lowbit(pos);
    }
    return re;
}

void work() {
    sort(a + 1,a + 1 + tot);
    tot = 0;
    for (int i = 1;i <= (n + m) * 2;i ++) if (i == 1 || a[i] != a[i - 1]) num[a[i]] = ++ tot;
    sort(s + 1,s + 1 + n + m,cmp1);
    for (int i = 1;i <= n + m;i ++) {
        if (s[i].type == 2) ins(num[s[i].r],i);
        else {
            int cc = qry(num[s[i].r]);
            if (cc > n + m) continue;
            if (s[cc].v * (s[i].r - s[i].l) > ans) {
                ans = s[cc].v * (s[i].r - s[i].l);
                ansn = s[i].id;
                ansm = s[cc].id;
            }       
        }
    }
}

int main() {
    init();
    solve();
    work();
    printf("%I64d\n",ans);
    if (ans) printf("%d %d",ansn,ansm);
}