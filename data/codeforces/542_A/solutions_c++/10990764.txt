#pragma comment(linker, "/STACK:100000000")
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <ctime>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>
using namespace std;
#define int64 long long
#define ldb long double
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define sz(a) ((int) (a).size())
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define taskname "task_a"
#define ADD 0
#define CH 1
const ldb pi = acos(-1.0);
const int INF = (int) 2e9;
const int N = (int) 4e5 + 10;
int64 ans = 0;
int ans_i, ans_j, n, m, l[N], r[N], x[N], y[N], c[N];

void solve() {
	vector< pair< int, pair<int, int> > > e;
	for (int i = 0; i < n; ++i)
		e.pb(mp(l[i], mp(ADD, i)));
	for (int i = 0; i < m; ++i)
		e.pb(mp(x[i], mp(CH, i)));
	sort(e.begin(), e.end());
	int mx_r = -INF, mx_num = -1;
	set< pair< pair<int, int>, int > > cur;
	cur.insert(mp(mp(INF, 0), -1));
	for (int i = 0; i < sz(e); ++i) {
		int etype = e[i].sc.fs, num = e[i].sc.sc;
		if (etype == ADD) {
			if (mx_r < r[num]) {
				mx_r = r[num];
				mx_num = num;
			}
			assert(!cur.empty());
			set< pair< pair<int, int>, int > >::iterator it = cur.lower_bound(mp(mp(mx_r, -1), -1));
			if ((mx_num != -1) && (ans < it->fs.sc * (int64) (mx_r - e[i].fs))) {
				ans = it->fs.sc * (int64) (mx_r - e[i].fs);
				ans_i = mx_num, ans_j = it->sc;
			}
		} else {
			if ((mx_num != -1) && (ans < c[num] * (int64) (min(mx_r, y[num]) - e[i].fs))) {
				ans = c[num] * (int64) (min(mx_r, y[num]) - e[i].fs);
				ans_i = mx_num, ans_j = num;
			}
			set< pair< pair<int, int>, int > >::iterator it = cur.lower_bound(mp(mp(y[num], -1), -1));
			if (it->fs.sc >= c[num]) continue;
			while (true) {
				set< pair< pair<int, int>, int > >::iterator it = cur.lower_bound(mp(mp(y[num] + 1, -1), -1));
				if (it == cur.begin()) break;
				--it;
				if (it->fs.sc > c[num]) break;
				cur.erase(it);
			}
			cur.insert(mp(mp(y[num], c[num]), num));
		}
	}
}

int main() {
//	assert(freopen(taskname".in", "r", stdin));
//	assert(freopen(taskname".out", "w", stdout));
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%d%d", &l[i], &r[i]);
	for (int i = 0; i < m; ++i)
		scanf("%d%d%d", &x[i], &y[i], &c[i]);
	for (int j = 0; j < 2; ++j) {
    	solve();
    	for (int i = 0; i < n; ++i)
    		l[i] *= -1, r[i] *= -1, swap(l[i], r[i]);
    	for (int i = 0; i < m; ++i)
    		x[i] *= -1, y[i] *= -1, swap(x[i], y[i]);
    }
    if (ans == 0) {
    	printf("0\n");
    	return 0;
    }
    printf("%I64d\n%d %d\n", ans, ans_i + 1, ans_j + 1);
	return 0;
}
