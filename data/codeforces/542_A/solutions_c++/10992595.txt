#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <stack>
#include <bitset>
#define INF 0x3f3f3f3f
#define eps 1e-8
#define FI first
#define SE second
using namespace std;
typedef long long LL;
const int N = 2e5 + 5;

struct Vedio {
    int l, r, id;
} ve[N];

bool cmpv1(const Vedio &a, const Vedio &b) {
    return a.l < b.l;
}

bool cmpv2(const Vedio &a, const Vedio &b) {
    return a.r < b.r;
}

struct Channel {
    int l, r, c, id;
} ch[N];

bool cmpc1(const Channel &a, const Channel &b) {
    return a.l < b.l;
}

bool cmpc2(const Channel &a, const Channel &b) {
    return a.r < b.r;
}

int bit[N * 2], id[N * 2], data[N * 2], cc;
int Find(int x) {
    return lower_bound(data, data + cc, x) - data + 1;
}

void add(int x, int v, int p) {
    for(; x <= cc; x += x & -x) {
        if(bit[x] < v) bit[x] = v, id[x] = p;
    }
}

pair <int, int> read(int x) {
    int res = 0, p;
    for(; x; x ^= x & -x) {
        if(res < bit[x]) res = bit[x], p = id[x];
    }
    return make_pair(res, p);
}

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    for(int i = 0; i < n; ++i) {
        scanf("%d%d", &ve[i].l, &ve[i].r);
        ve[i].id = i;
        data[cc++] = ve[i].l;
    }
    for(int i = 0; i < m; ++i) {
        scanf("%d%d%d", &ch[i].l, &ch[i].r, &ch[i].c);
        ch[i].id = i;
        data[cc++] = ch[i].l;
    }
    sort(data, data + cc);
    cc = unique(data, data + cc) - data;
    sort(ve, ve + n, cmpv1);
    sort(ch, ch + m, cmpc1);
    LL ans = 0;
    int idx, idy;
    for(int p, mx = -1, i = 0, j = 0; i < m; ++i) {
        for(; j < n && ve[j].l <= ch[i].l; ++j) {
            if(ve[j].r > mx) mx = ve[j].r, p = ve[j].id;
        }
        LL v = 1LL * ch[i].c * (min(mx, ch[i].r) - ch[i].l);
        if(v > ans) {
            ans = v;
            idx = p;
            idy = ch[i].id;
        }
    }
    sort(ve, ve + n, cmpv2);
    sort(ch, ch + m, cmpc2);
    for(int p, mi = INF, i = m - 1, j = n - 1; i >= 0; --i) {
        for(; j >= 0 && ve[j].r >= ch[i].r; --j) {
            if(ve[j].l < mi) mi = ve[j].l, p = ve[j].id;
        }
        LL v = 1LL * ch[i].c * (ch[i].r - max(mi, ch[i].l));
        if(v > ans) {
            ans = v;
            idx = p;
            idy = ch[i].id;
        }
    }
    for(int j = m - 1, i = n - 1; i >= 0; --i) {
        for(; j >= 0 && ch[j].r >= ve[i].r; --j) add(Find(ch[j].l), ch[j].c, ch[j].id);
        pair <int, int> t = read(Find(ve[i].l));
        LL v = 1LL * (ve[i].r - ve[i].l) * t.FI;
        if(v > ans) {
            ans = v;
            idx = ve[i].id;
            idy = t.SE;
        }
    }
    printf("%I64d\n", ans);
    if(ans) printf("%d %d\n", idx + 1, idy + 1);
    return 0;
}
