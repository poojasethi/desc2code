#include <cstring>
#include <cstdio>
#include <cstdlib>

using namespace std;

const int MAXN = 100005;

int bel[MAXN], fa[MAXN], f[MAXN], stk[MAXN], OddCycle[MAXN], sum[MAXN];
int st[MAXN], nxt[MAXN<<1], lnk[MAXN<<1], pre[MAXN], log2[MAXN<<1];
int Euler[MAXN<<1], po[MAXN], dep[MAXN], RMQ[MAXN<<1][18];
int i, j, k, p, N, M, Q, u, v, a, b, cnt, x, y, Ecnt, ret, tmp, lca, top;

void AddEdge(int u, int v)
 {
     lnk[++ cnt] = v, nxt[cnt] = st[u], st[u] = cnt;
     lnk[++ cnt] = u, nxt[cnt] = st[v], st[v] = cnt;
 }
 
void init()
 {
     scanf("%d%d", &N, &M);
     for (i = 1; i <= M; i ++)
      {
       scanf("%d%d", &u, &v);
       AddEdge(u, v);
      }
 }

int FindSet(int x)
 {
    for (p = x; f[p] != p; p = f[p]);
    for (ret = p, p = x; p != ret; tmp = f[p], f[p] = ret, p = tmp);
    return ret;
 }
 
void DFS(int root)
 {
     dep[root] = 0, bel[stk[top=1]=root] = cnt, f[root] = root, Euler[po[root]=++Ecnt] = root;
     while (top)
      {
           Euler[++ Ecnt] = stk[top];
           if (!po[x=stk[top]]) po[x] = Ecnt;
         for (i = pre[x]; i; i = nxt[i])
          {
             if (!bel[lnk[i]])
              {
                stk[++ top] = lnk[i];
                dep[lnk[i]] = dep[x] + 1;
                fa[lnk[i]] = x;
                f[lnk[i]] = lnk[i];
                pre[x] = nxt[i];
                bel[lnk[i]] = cnt;
                break;
              } else
                if (dep[x]-dep[lnk[i]] > 1)
                 {
                   for (k = FindSet(x), y = lnk[i]; dep[k]-dep[y] > 1; f[k] = fa[k], k = FindSet(k));
                   OddCycle[x] |= ((dep[x]-dep[y]+1) & 1);
                 }
          }
         if (!i)
            for (i = pre[x] = st[x], -- top; i; i = nxt[i])
                if (FindSet(x) == FindSet(lnk[i])) OddCycle[x] |= OddCycle[lnk[i]];
      }
     for (stk[top=1] = root, sum[root] += OddCycle[FindSet(root)]; top; )
      {
         for (i = pre[x=stk[top]]; i; i = nxt[i])
             if (dep[x]+1 == dep[lnk[i]])
              {
                if (FindSet(x) == FindSet(lnk[i])) OddCycle[lnk[i]] |= OddCycle[x];
                sum[lnk[i]] = sum[x] + OddCycle[FindSet(lnk[i])], stk[++ top] = lnk[i], pre[x] = nxt[i];
                break;
              }
         if (!i) -- top;
      }
 }

void RMQ_init()
 {
     for (i = 0; i < 18; i ++) log2[1<<i] = i;
     for (i = 3; i <= Ecnt; i ++)
         if (!log2[i]) log2[i] = log2[i-1];
     for (i = 1; i <= Ecnt; i ++) RMQ[i][0] = Euler[i];
     for (j = 1; j <= log2[Ecnt]; j ++)
         for (i = 1; i+(1<<j)-1 <= Ecnt; i ++)
             RMQ[i][j] = (dep[RMQ[i][j-1]] < dep[RMQ[i+(1<<(j-1))][j-1]] ? RMQ[i][j-1] : RMQ[i+(1<<(j-1))][j-1]);
 }

int GetLCA(int u, int v)
 {
    if (po[u] > po[v]) tmp = u, u = v, v = tmp;
    p = log2[po[v]-po[u]+1];
    return (dep[RMQ[po[u]][p]] < dep[RMQ[po[v]-(1<<p)+1][p]] ? RMQ[po[u]][p] : RMQ[po[v]-(1<<p)+1][p]);
 }
 
void work()
 {
     int ii;
     for (ii = 1; ii <= N; ii ++) pre[ii] = st[ii], f[ii] = ii;
     for (ii = 1, cnt = 0; ii <= N; ii ++)
         if (!bel[ii]) ++ cnt, DFS(ii);
     RMQ_init();
     for (scanf("%d", &Q); Q; Q --)
      {
         scanf("%d%d", &u, &v);
         if (bel[u] != bel[v]) puts("No");
         else
          {
             lca = GetLCA(u, v);
             puts((((dep[u]+dep[v])&1) || (sum[u]+sum[v]-sum[lca]-sum[lca])) ? "Yes" : "No");
          }
      }
 }
 
int main()
 {
    init();
    work();
    return 0;
 }
 
