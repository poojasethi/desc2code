#include<cstdio>
#include<algorithm>
using namespace std;
int N,K,ans;
int A[100010];
int s[3][100010];
int l[3][100010];
int cnt[3];
int last[3];
struct Pair{
	int s,t;
}P[100010];
int cmp(const Pair &a,const Pair &b){
	return a.s<b.s || a.s==b.s && a.t<b.t;
}
int main(){
    scanf("%d",&N);
    for (int i=1;i<=N;++i)
        scanf("%d",&A[i]);
    for (int i=1;i<=N;++i){
		s[A[i]][++s[A[i]][0]]=i;
		l[A[i]][i]=l[A[i]][i-1]+1;
		l[3-A[i]][i]=l[3-A[i]][i-1];
    }
    for (int k=1;k<=s[A[N]][0];++k){
		last[1]=last[2]=0;
		cnt[1]=cnt[2]=0;
	    for (;;){
			int x=1,y=2;
			if (s[x][0]<last[x]+k&&s[y][0]<last[y]+k) break;
		    if (s[x][0]<last[x]+k) swap(x,y);
		    if (s[y][0]>=last[y]+k)
			    if (s[x][last[x]+k]>s[y][last[y]+k])
			        swap(x,y);
			++cnt[x];
			last[x]+=k;
			if (s[y][0]>=last[y]+k)
			    last[y]=l[y][s[x][last[x]]];
	    }
		if (s[A[N]][last[A[N]]]!=N) continue;
		if (cnt[3-A[N]]>=cnt[A[N]]) continue;
        ++ans;
        P[ans].s=cnt[A[N]];
        P[ans].t=k;
	}
	sort(P+1,P+ans+1,cmp);
	printf("%d\n",ans);
	for (int i=1;i<=ans;++i)
	    printf("%d %d\n",P[i].s,P[i].t);
}
	  				 	 	  		 	 	 						