#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>

using namespace std;

#define N 100100

int ordered[N], unordered[N];
int array[N];

typedef pair<int,int> II;

static inline bool lucky(int n) {
	while(n) {
		if((n%10) != 4 and (n%10) != 7) return false;
		n/=10;
	}
	return true;
}

vector<II> steps;
void do_swap(int i, int j) {
	swap(ordered[unordered[i]],ordered[unordered[j]]);
	swap(unordered[i],unordered[j]);
	swap(array[i],array[j]);
	steps.push_back(II(i+1,j+1));
}

int main () {
	int n;
	cin >> n;
	vector<II> T;
	for(int i = 0; i < n; i++) {
		cin >> array[i];
		T.push_back(II(array[i],i));
	}
	sort(T.begin(),T.end());
	int ptr = -1;
	bool ord = true;
	for(int i = 0; i < n; i++) {
		if(T[i].second != i) ord = false;
		ordered[i] = T[i].second;
		unordered[T[i].second] = i;
		if(ptr == -1 and lucky(T[i].first)) ptr = T[i].second;
	}
	if(ptr == -1 and !ord) {
		cout << -1 << endl;
		return 0;
	}
	if(ptr == -1) {
		cout << 0 << endl;
		return 0;
	}
	for(int cur = 0; cur < n; cur++) {
		if(unordered[ptr] == cur) continue;
		if(cur != ptr) do_swap(cur,ptr), ptr = cur;
		int tar = ordered[cur];
		do_swap(tar,ptr), ptr = tar;
	}
	cout << steps.size() << endl;
	for(int i = 0; i < steps.size(); i++) {
		cout << steps[i].first << " " << steps[i].second << endl;  
	}
	return 0;
}

