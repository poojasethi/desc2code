#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <queue>

using namespace std;

bool isLucky(int n)
{
	if(n == 0) return 0;
	while(n > 0)
	{
		if(n % 10 != 4 && n % 10 != 7) return 0;
		n /= 10; 
	}
	return 1;
}

int main()
{
	int n;
	while(cin>>n)
	{
		int p = -1;
		
		vector <int> v1(n);
		for(int i=0; i<n; i++)
		{
			cin>>v1[i];
			if(isLucky(v1[i])) p = i;
		}
		
		vector <int> v2 = v1;
		sort(v2.begin(), v2.end());
			
		if(p == -1)
		{
			if(v1 == v2) cout<<0<<endl;
			else cout<<-1<<endl;
		}
		else
		{
			map < int, set <int> > M;
		
			for(int i=0; i<n; i++)
				if(v1[i] != v2[i])
					M[v2[i]].insert(i);
			
			vector < pair <int, int> > x;
			
			queue <int> Q;
			
			for(int i=0; i<n; i++)
				if(i != p && v1[i] != v2[i])
					Q.push(i);
			
			while(!Q.empty())
			{
				int i = Q.front();
				Q.pop();
				
				if(i != p && v1[i] != v2[i])
				{
					set <int> :: iterator it = M[v1[i]].begin();
				
					int q = *it;
				
					M[v1[i]].erase(q);
				
					if(p != q) x.push_back(make_pair(p + 1, q + 1));
			
					swap(v1[p], v1[q]);
				
					Q.push(p);
				
					if(i != q) x.push_back(make_pair(i + 1, q + 1));
			
					swap(v1[i], v1[q]);
			
					Q.push(i);
					
					p = i;
				}
			}
			
			cout<<x.size()<<endl;
			
			for(int i=0; i<x.size(); i++)
				cout<<x[i].first<<" "<<x[i].second<<endl;
		}		
	}
	
	return 0;
}
