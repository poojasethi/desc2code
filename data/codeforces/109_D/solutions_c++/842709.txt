#include<cstdio>
#include<algorithm>
#define maxn 100001
using namespace std;
void sw(int &a,int &b)
{
	int t=a;
	a=b;
	b=t;
}
struct node
{
	int val,id;
	bool operator<(const node &b) const
	{
		if(val!=b.val) return val<b.val;
		return id<b.id;
	}
}nod[maxn];
bool lucky(int n)
{
	while(n)
	{
		int t=n%10;
		n/=10;
		if(t!=4&&t!=7) return false;
	}
	return true;
}
int arr[maxn],num[maxn];
int o1[maxn<<1],o2[maxn<<1];
int main()
{
	int i,n,end=0,lky=-1;
	scanf("%d",&n);
	for(i=1;i<=n;i++)
	{
		scanf("%d",arr+i);
		nod[i-1].val=arr[i];
		nod[i-1].id=i;
	}
	sort(nod,nod+n);
	bool f=0;
	for(i=0;i<n;i++)
	{
		if(nod[i].id!=i+1)
		{
			f=1;
		}
		if(lucky(nod[i].val)) lky=nod[i].id;
	}
	if(f==0)
	{
		puts("0"); return 0;
	}
	else if(lky==-1)
	{
		puts("-1"); return 0;
	}
	for(i=0;i<n;i++)
	{
		arr[nod[i].id]=i+1;
		num[i+1]=nod[i].id;
	}
	for(i=1;i<=n;i++)
	{
		if(arr[i]==i) continue;
		if(i!=lky)
		{
			o1[end]=i; o2[end++]=lky;
			int k=num[i];
			sw(num[arr[i]],num[arr[lky]]);
			sw(arr[i],arr[lky]);
			lky=i;
		}
		if(num[i]!=lky)
		{
			o1[end]=num[i]; o2[end++]=lky;
			int x=num[i];
			sw(num[arr[num[i]]],num[arr[lky]]);
			sw(arr[x],arr[lky]);
			lky=x;
		}
	}
	printf("%d\n",end);
	for(i=0;i<end;i++) printf("%d %d\n",o1[i],o2[i]);
	return 0;
}
			 				 	 	 	 	    				