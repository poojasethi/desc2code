#include <stdio.h>
#include <string.h>
#include <algorithm>

using namespace std;

#define MAXN 100010

struct Nod {
	int x, num;
}nod[MAXN];

bool isLucky(int x) {
	while(x) {
		if(x % 10 != 4 && x % 10 != 7) return false;
		x /= 10;
	}
	return true;
}

bool cmp(Nod n1, Nod n2) {
	if(n1.x != n2.x) return n1.x < n2.x;
	return n1.num < n2.num;
}

int f[MAXN], g[MAXN], step = 0, p, q;
int ans1[MAXN * 2], ans2[MAXN * 2];

void cal(int i, int j) {
	swap(f[i], f[j]);
	g[f[i]] = i;
	g[f[j]] = j;
	p = j;
	ans1[step] = i;
	ans2[step++] = j;
}

int main() {
	int n;
	scanf("%d", &n);
	bool flag = true;
	for(int i = 1; i <= n; ++i) {
		scanf("%d", &nod[i].x);
		nod[i].num = i;
		f[i] = g[i] = i;
		if(i > 1 && nod[i].x < nod[i - 1].x) flag = false;
	}
	if(flag) {
		puts("0");
		return 0;
	}
	sort(nod + 1, nod + 1 + n, cmp);
	flag = false;
	for(int i = 1; i <= n && !flag; ++i) {
		if(isLucky(nod[i].x)) {
			flag = true;
			p = nod[i].num;
			q = i;
		}
	}

	if(!flag) {
		puts("-1");
		return 0;
	}

	for(int i = 1; i <= n; ++i) {
		if(i == q) continue;
		if(nod[i].num == f[i]) continue;
//		printf("%d %d %d\n", p, nod[i].num, g[nod[i].num]);
		if(p == i) {
			cal(p, g[nod[i].num]);
		}
		else {
			cal(p, i);
			cal(p, g[nod[i].num]);
		}
	}
	printf("%d\n", step);
	for(int i = 0; i < step; ++i)
		printf("%d %d\n", ans1[i], ans2[i]);
	return 0;
}
