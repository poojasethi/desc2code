#include<stdio.h>
#include<algorithm>
using std::sort;
long n,i,j,k,l;
long A[100001];
long need[100001];
long gai[100001];
long cz[200001][2],last=0;
struct FP{
	long x,y;
}F[100001];
inline bool cmp(const FP &X,const FP &Y){
	return X.x<Y.x;
}
inline void swap(long &x,long &y){
	long z=x;x=y,y=z;
}
inline bool check(long X){
	while(X) if(X%10!=4&&X%10!=7) return 0; else X/=10;
	return 1;
}
inline bool check1(){
	for(i=2;i<=n;++i) if(A[i]<A[i-1]) return 0;
	return 1;
}
int main(){
	for(scanf("%ld",&n),i=1;i<=n;++i) if(scanf("%ld",A+i),check(A[i])) l=i;
	if(!l)
		puts(check1()?"0":"-1");
	else{
		for(i=1;i<=n;++i) F[i].x=A[i],F[i].y=i;
		sort(F+1,F+n+1,cmp);
		for(i=1;i<=n;++i) gai[F[i].y]=i,need[i]=F[i].y;
		for(i=1;i<gai[l];++i){
			if(gai[i]!=i){
				if(l!=i)
					swap(gai[i],gai[l]),swap(need[gai[i]],need[gai[l]]),cz[++last][0]=i,cz[last][1]=l,l=i;
				k=need[i],swap(gai[k],gai[l]),swap(need[gai[k]],need[gai[l]]),cz[++last][0]=l,cz[last][1]=k,l=k;
				}
			}
		for(i=n;gai[l]<i;--i){
			if(gai[i]!=i){
				if(l!=i)
					swap(gai[i],gai[l]),swap(need[gai[i]],need[gai[l]]),cz[++last][0]=l,cz[last][1]=i,l=i;
				k=need[i],swap(gai[k],gai[l]),swap(need[gai[k]],need[gai[l]]),cz[++last][0]=k,cz[last][1]=l,l=k;
				}
			}
		printf("%ld\n",last);
		for(i=1;i<=last;++i) printf("%ld %ld\n",cz[i][0],cz[i][1]);
		}
	scanf("%ld",&n);
	return 0;
}
