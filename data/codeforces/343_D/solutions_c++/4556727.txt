#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cmath>
#include <cstring>

using namespace std;

#define ll long long

#define maxn 500100
#define maxm 20 * 1000 * 1000

vector<int> g[maxn];
set<int> s;
vector<int> v(maxn, 0);
int l[maxn];
int r[maxn];
int p[maxn];

int time = 0;
void dfs(int t) {
    v[t] = true;
    l[t] = time++;
    for (int i = 0; i < g[t].size(); i++)
    {
        int next = g[t][i];
        if (!v[next]) {
            p[next] = t;
            dfs(next);
        }
    }
    r[t] = time;
}

bool isFilled(int t) {
    set<int>::iterator it = s.lower_bound(l[t]);
    return it == s.end() || *it >= r[t];
}

int main()
{
    int n;
    scanf("%d", &n);    
    for (int i = 0; i < n - 1; i++)
    {
        int x, y;
        scanf("%d%d", &x, &y);
        g[x].push_back(y);
        g[y].push_back(x);
    }
    for (int i = 0; i <= n - 1; i++)
    {
        s.insert(i);
    }

    dfs(1);

    int q;
    scanf("%d", &q);    
    for (int i = 1; i <= q; i++)
    {
        int x, y;
        scanf("%d%d", &x, &y);
        switch (x)
        {
            case 1:
                if (!isFilled(y)) {
                    s.insert(l[p[y]]);
                    for (set<int>::iterator it = s.lower_bound(l[y]); it != s.end() && *it < r[y]; s.erase(it++)) { };
                }
                break;
            case 2:
                s.insert(l[y]);
                break;
            case 3:
                if (isFilled(y))  {
                    printf("1\n");
                } else {
                    printf("0\n");
                }
                break;
        }
    }
    
    return 0;
}


