#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<vector>
#define pb push_back
#define l i<<1
#define r i<<1|1
#define mid (L+R>>1)
using namespace std;
const int N=500009;
vector<int>v[N];
int dfn[N],len[N],cnt=0,p[N];
bool lazy[N<<2],sum[N<<2];
void pushup(int i){
    sum[i]=sum[l]&sum[r];
}
void pushdown(int i){
    if(!lazy[i])
        return;
    sum[l]=sum[r]=1;
    lazy[l]=lazy[r]=1;
    lazy[i]=0;
}
void update(int L,int R,int i,int x,int y,bool t){
    if(x<=L&&R<=y){
        if(t){
            lazy[i]=1;
            sum[i]=1;
        }else
            sum[i]=0;
        return;
    }
    pushdown(i);
    if(x<=mid)
        update(L,mid,l,x,y,t);
    if(mid<y)
        update(mid+1,R,r,x,y,t);
    pushup(i);
}
int query(int L,int R,int i,int x,int y){
    if(x<=L&&R<=y)
        return sum[i];
    pushdown(i);
    int ans=1;
    if(x<=mid)
        ans&=query(L,mid,l,x,y);
    if(mid<y)
        ans&=query(mid+1,R,r,x,y);
    return ans;
}
void dfs(int x,int x0){
    p[x]=x0;
    dfn[x]=++cnt;
    for(int i=0;i<v[x].size();i++){
        int y=v[x][i];
        if(y==x0)
            continue;
        dfs(y,x);
    }
    len[x]=cnt;
}
int main(){
    int i,j,k,n,m,x,y,T;
    scanf("%d",&n);
    for(i=1;i<n;i++){
        scanf("%d%d",&x,&y);
        v[x].pb(y);
        v[y].pb(x);
    }
    dfs(1,0);
    scanf("%d",&m);
    while(m--){
        scanf("%d%d",&x,&y);
        if(x==1){
            if(!query(1,n,1,dfn[y],len[y])&&p[y])
                update(1,n,1,dfn[p[y]],dfn[p[y]],0);
            update(1,n,1,dfn[y],len[y],1);
        }
        if(x==2)
            update(1,n,1,dfn[y],dfn[y],0);
        if(x==3){
            puts(query(1,n,1,dfn[y],len[y])?"1":"0");
        }
    }
    return 0;
}
