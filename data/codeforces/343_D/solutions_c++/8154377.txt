#include<cstdio>
#include<algorithm>
#define nn 500010
using namespace std;
int i,j,n,m,v1,v2,tot,x,y,N,fa[nn],l[nn],r[nn];
struct node{
    int ma[nn*4],lz[nn*4];
    void up(int t){ma[t]=max(ma[t<<1],ma[t<<1|1]);}
    void cover(int t,int l,int r,int L,int R)
     {if (l==L&&r==R){ma[t]=lz[t]=j;
                      return;
                     }
      int mid=(l+r)>>1;
      if (R<=mid)cover(t<<1,l,mid,L,R);
      else if (L>mid)cover(t<<1|1,mid+1,r,L,R);
      else {cover(t<<1,l,mid,L,mid);
            cover(t<<1|1,mid+1,r,mid+1,R);
           }
      up(t);
     }
    int ask(int t,int l,int r,int L,int R)
     {if (l==L&&r==R)return ma[t];
      int mid=(l+r)>>1;
      if (R<=mid)return max(lz[t],ask(t<<1,l,mid,L,R));else 
      if (L>mid) return max(lz[t],ask(t<<1|1,mid+1,r,L,R));else 
      return max(lz[t],max(ask(t<<1,l,mid,L,mid),ask(t<<1|1,mid+1,r,mid+1,R)));
     }
}a,b;
struct ed{int end,next;
}g[nn*2];
void add(int a,int b)
 {g[++tot].end=b;g[tot].next=fa[a];
  fa[a]=tot;
 }

void dfsx(int w,int pre)
 {l[w]=++N;
  for (int i=fa[w];i;i=g[i].next)if (g[i].end!=pre)
            dfsx(g[i].end,w);
  r[w]=N;
 }
 
int main()
{
 scanf("%d",&n);tot=N=0;
 for (i=1;i<n;i++)
  scanf("%d%d",&x,&y),add(x,y),add(y,x);
 dfsx(1,0);
 scanf("%d",&m);
 for (j=1;j<=m;j++)
            {scanf("%d%d",&y,&x);
             if (y==1)
             a.cover(1,1,n,l[x],r[x]);else
             if (y==2)
             b.cover(1,1,n,l[x],l[x]);else
                {v1=a.ask(1,1,n,l[x],l[x]);
                 v2=b.ask(1,1,n,l[x],r[x]);
                 if (v1<=v2)puts("0");else
                           puts("1");
                } 
            }
 return 0;
}
