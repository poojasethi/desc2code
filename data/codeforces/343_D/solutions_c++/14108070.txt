#include <bits/stdc++.h>
using namespace std;
typedef pair<int,int> pii;
const int maxn = 5e5+100, Pow = 1 << 19;
int N, Q, ind[maxn], r[maxn], cur = 1, a, b;
int emp[2*Pow+5] , fil[2*Pow+5];
vector<int> adj[maxn];
void dfs(int v, int par){
    ind[v] = cur++;
    for(int i = 0; i<adj[v].size(); i++) if(adj[v][i]!=par) dfs(adj[v][i], v);
    r[v] = cur-1;
}
void upd(int l, int r, int t){
    l+=Pow; r+=Pow;
    while(l<=r){
        fil[l] = fil[r] = t;
        l = (l+1)/2;
        r = (r-1)/2;
    }
}
int get(int x){
    int res = 0;
    for(int i = Pow+x; i>0; i/=2) res = max(res, fil[i]);
    return res;
}
void add(int x, int t){
    for(int i = Pow+x-1; i>0; i/=2) emp[i] = t;
}
int rmq(int p, int l, int r, int a, int b){
    if(l>b||r<a) return 0;
    if(l>=a&&r<=b) return emp[p]; 
    return max(rmq(2*p, l, (l+r)/2, a, b), rmq(2*p+1, (l+r)/2+1, r, a, b));
}
int main(){
    ios::sync_with_stdio(false); cin.tie(false); cout.tie(false);
    cin >> N;
    for(int i = 0; i<N-1; i++){
        cin >> a >> b;
        a--; b--;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    dfs(0, -1);
    cin >> Q;
    for(int i = 1; i<=Q; i++){
        cin >> a >> b;
        b--;
        if(a==1) upd(ind[b], r[b], i);
        else if(a==2) add(ind[b], i);
        else cout << (get(ind[b])>rmq(1, 1, Pow, ind[b], r[b])) << '\n';
    }
}
	  	 		   			 	 	   			 	     	