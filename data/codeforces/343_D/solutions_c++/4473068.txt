#include <vector>
#include <cstdio>
using namespace std;

int c, N, D1[2000000], D2[2000000], L[500000], R[500000];
vector<int> e[500000];

void flatten(int p, int v) {
    L[v] = c;
    c++;
    for (int i=0; i<e[v].size(); i++) if (e[v][i] != p) flatten(v, e[v][i]);
    R[v] = c;
}

void init(int n) {
    N = 1;
    while (N < n) N *= 2;
}

void set1(int a, int b, int vaaue, int k, int l, int r) {
    if (l >= b || r <= a) return;
    if (l >= a && r <= b) { D1[k] = vaaue; return; }
    set1(a, b, vaaue, k*2+1, l, (l+r)/2);
    set1(a, b, vaaue, k*2+2, (l+r)/2, r);
}

int get1(int k) {
    k += N-1;
    int res = D1[k];
    while (k) {
        k = (k-1)/2;
        res = max(res, D1[k]);
    }
    return res;
}

void set2(int k, int v) {
    k += N-1;
    D2[k] = v;
    while (k) {
        k = (k-1)/2;
        D2[k] = max(D2[k*2+1], D2[k*2+2]);
    }
}

int get2(int a, int b, int k, int l, int r) {
    if (l >= b || r <= a) return 0;
    if (l >= a && r <= b) return D2[k]; 
    return max(get2(a, b, k*2+1, l, (l+r)/2), get2(a, b, k*2+2, (l+r)/2, r));
}

int main() {
    int n; scanf("%d", &n);
    for (int i=0; i<n-1; i++) {
        int a, b; scanf("%d %d", &a, &b);
        a--; b--;
        e[a].push_back(b);
        e[b].push_back(a);
    }
    flatten(-1, 0);
    init(n);
    
    int q; scanf("%d", &q);
    for (int t = 1; t <= q; t++) {
        int c, v; scanf("%d %d", &c, &v); v--;
        if(c==1) set1(L[v], R[v], t, 0, 0, N);
        if(c==2) set2(L[v], t);
        if(c==3) printf("%d\n", get1(L[v]) > get2(L[v], R[v], 0, 0, N));
    }
}
