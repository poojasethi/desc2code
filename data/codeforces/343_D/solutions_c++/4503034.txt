#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
const int maxn=5000010;
int n,m,a,b,k,in[maxn],out[maxn];
vector<int> G[maxn];
inline int read()
{
	int x = 0; char ch = getchar(); bool positive = 1;
	for (; ch < '0' || ch > '9'; ch = getchar())	if (ch == '-')  positive = 0;
	for (; ch >= '0' && ch <= '9'; ch = getchar())	x = x * 10 + ch - '0';
	return positive ? x : -x;
}

struct T1{
	int mx[(1<<20)+1];
	inline void modify(int l,int r,int val){
		for (l+=n,r+=n;l<=r;l=(l+1)>>1,r=(r-1)>>1){
			if (l & 1)mx[l]=val;
			if (~r& 1)mx[r]=val;
		}
	}
	inline int fnd(int x){
		int ans=0;
		for (x+=n,x<<=1;x>>=1;ans=max(ans,mx[x]));
		return ans;
	}
}q1;
struct T2{
	int mx[(1<<20)+1];
	inline void modify(int x,int val){
		for (x+=n,mx[x]=val;x>>=1;mx[x]=max(mx[x<<1],mx[(x<<1)|1]));
	}
	inline int fnd(int l,int r){
		int ans=0;
		for (l+=n,r+=n;l<=r;l=(l+1)>>1,r=(r-1)>>1){
			if (l & 1)ans=max(mx[l],ans);
			if (~r& 1)ans=max(mx[r],ans);
		}
		return ans;
	}
}q2;
void dfs(int u,int f){
	in[u]=k++;
	for (int i=0;i<(int)G[u].size();i++){
		int v=G[u][i];
		if (v!=f) dfs(v,u);
	}
	out[u]=k;
}
int main(){
	n=read();
	for (int i=0;i<(n-1);i++){
		a=read()-1;b=read()-1;
		G[a].push_back(b);
		G[b].push_back(a);
	}
	k=0;dfs(0,-1);
	m=read();
	for (int i=1;i<=m;i++){
		a=read();b=read()-1;
		switch (a){
			case 1:
				q1.modify(in[b],out[b]-1,i);
				break;
			case 2:
				q2.modify(in[b],i);
				break;
			case 3:
				if (q2.fnd(in[b],out[b]-1)<q1.fnd(in[b]))puts("1");else puts("0");
				break;
		}
	}
	return 0;
}
