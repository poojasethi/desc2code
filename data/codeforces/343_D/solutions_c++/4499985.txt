#include <cstdio>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;
#define F first
#define S second
#define mp make_pair
#define N 500001
#define M (1<<21)+1

vector<int> adj[N];
int n, q, num[N], id, bot[N], seg[M][2], laz[M][2];

int dfs(int p)
{
	num[p] = ++id;
	bot[p] = num[p];
	for (int i = 0; i < adj[p].size(); ++i)
	{
		int q = adj[p][i];
		if (num[q]) continue;
		bot[p] = max(bot[p], dfs(q));
	}
	return bot[p];
}

void prop(int p, int a, int b, int z)
{
	seg[p][z] = max(seg[p][z], laz[p][z]);
	if (a != b) laz[p*2][z] = max(laz[p*2][z], laz[p][z]), laz[p*2+1][z] = max(laz[p*2+1][z], laz[p][z]);
	laz[p][z] = 0;
}

int query(int p, int a, int b, int i, int j, int x, int z)
{
	prop(p, a, b, z);
	if (b < i || a > j) return 0;
	if (i <= a && j >= b)
	{
		laz[p][z] = max(laz[p][z], x);
		prop(p, a, b, z);
		return seg[p][z];
	}
	int r = max(query(p*2, a, (a+b)/2, i, j, x, z), query(p*2+1, (a+b)/2+1, b, i, j, x, z));
	seg[p][z] = max(seg[p*2][z], seg[p*2+1][z]);
	return r;
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n-1; ++i)
	{
		int a, b; scanf("%d%d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	dfs(1);
	scanf("%d", &q);
	for (int i = 1; i <= q; ++i)
	{
		int a, b;
		scanf("%d%d", &a, &b);
		if (a == 1) query(1, 1, n, num[b], bot[b], i, 0);
		else if (a == 2) query(1, 1, n, num[b], num[b], i, 1);
		else printf("%d\n", query(1, 1, n, num[b], num[b], 0, 0) > query(1, 1, n, num[b], bot[b], 0, 1));
	}
}
