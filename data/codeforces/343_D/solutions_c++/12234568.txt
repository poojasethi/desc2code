#include <iostream>
#include <cstdio>
#include <stack>
#include <cstring>
#include <queue>
#include <set>
#include <algorithm>
#include <cmath>
//#include <unordered_map>

#define N 500010
//#define ID(x, y) ((x)*m+(y))
//#define CHECK(x, y) ((x)>=0 && (x)<n && (y)>=0 && (y)<m)
using namespace std;
typedef pair<int,int> PII;
const int INF=0x3f3f3f3f;
void Open()
{
    #ifndef ONLINE_JUDGE
        freopen("D:/in.txt","r",stdin);
        //freopen("D:/my.txt","w",stdout);
    #endif // ONLINE_JUDGE
}
set<int> S;
vector<int> G[N];
int n, m;
int st[N],ed[N], fa[N], Tn;
void dfs(int u, int p = -1)
{
    st[u] = ++Tn;
    for(int i=0;i<G[u].size();i++)
    {
        int v = G[u][i];
        if(v == p) continue;
        fa[v] = u;
        dfs(v, u);
    }
    ed[u] = Tn;
    if(ed[u] == st[u]) S.insert(st[u]);
}
int main()
{
    Open();
    scanf("%d", &n);
    for(int i=1;i<n;i++)
    {
        int x, y;
        scanf("%d%d", &x, &y);
        G[x].push_back(y);G[y].push_back(x);
    }
    dfs(1);
    scanf("%d", &m);
    while(m--)
    {
        int ty, u;
        scanf("%d%d", &ty, &u);
        if(ty == 1){
            set<int>::iterator it = S.lower_bound(st[fa[u]]);
            if(fa[u] && it != S.end() && *it <= ed[u]) S.insert(st[fa[u]]);
            S.erase(S.lower_bound(st[u]), S.upper_bound(ed[u]));
        }else if(ty == 2){
            S.insert(st[u]);
        }else{
            set<int>::iterator it = S.lower_bound(st[u]);
            if(it != S.end() && *it <= ed[u]) printf("0\n");
            else printf("1\n");
        }
    }
    return 0;
}

		   		  		  				 		    		  	