#include <cstdio>
#include <cstdlib>
#include <algorithm>
#define son (k << 1)
#define mid ((l + r) >> 1)
using namespace std;

typedef int arr32[2000010];

arr32 d, m, M, p, L, R, c, next, g;
int n, q, x, y, ap, tA;

void link(int x, int y)
{
	c[++ap] = y, next[ap] = g[x], g[x] = ap;
	c[++ap] = x, next[ap] = g[y], g[y] = ap;
}
int query(int k, int l, int r, int x, int y)
{
	if (l > y  ||  r < x)  return 0;
	if (l >= x  &&  r <= y)  return M[k];
	
	return max(query(son, l, mid, x, y), query(son + 1, mid + 1, r, x, y));
}
void modify(int k, int l, int r, int x, int z)
{
	if (l == r)  {
		M[k] = z;
		return;
	}
	if (x <= mid)  modify(son, l, mid, x, z);
	else  modify(son + 1, mid + 1, r, x, z);
	M[k] = max(M[son], M[son + 1]);
}
int query(int k, int l, int r, int x)
{
	if (l == r)  return p[k];
	if (x <= mid)  return max(p[k], query(son, l, mid, x));
	else  return max(p[k], query(son + 1, mid + 1, r, x));
}
void modify(int k, int l, int r, int x, int y, int z)
{
	if (l > y  ||  r < x)  return;
	if (l >= x  &&  r <= y)  {
		p[k] = z;
		return;
	}

	modify(son, l, mid, x, y, z);
	modify(son + 1, mid + 1, r, x, y, z);
}
void dfs(int z, int f)
{
	L[z] = ++tA;
	for (int x = g[z]; x; x = next[x])
		if (c[x] != f)
			dfs(c[x], z);

	R[z] = tA;
}
int main()
{
	//freopen("D.in", "r", stdin);
	//freopen("D.out", "w", stdout);

	scanf("%d", &n);
	for (int i = 1; i < n; ++i)  {
		scanf("%d %d", &x, &y);
		link(x, y);
	}

  dfs(1, 0);

	scanf("%d", &q);
	for (int i = 1; i <= q; ++i)  {
		scanf("%d %d", &x, &y);
		if (x == 1)
			modify(1, 1, n, L[y], R[y], i);
		else  if (x == 2)
			modify(1, 1, n, L[y], i);
		else  if (x == 3)
			printf("%d\n", query(1, 1, n, L[y], R[y]) < query(1, 1, n, L[y]));
	}
}
