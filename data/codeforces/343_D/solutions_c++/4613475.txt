#include <cstdio>
#include <algorithm>
#include <vector>
#define shift ((1<<19)-1)

using namespace std;

int din[shift];
int dou[shift];

vector <int> E[shift];

int son[shift*2+5];
int anc[shift*2+5];

int oper;

inline void puni(int a,int b,int l,int r,int v)
{
    if (a>r || b<l) return;
    if (a<=l && r<=b)
    {
        son[v]=oper;
        return;
    }
    puni(a,b,l,(l+r)/2,v*2);
    puni(a,b,(l+r)/2+1,r,v*2+1);
}
inline int punjen(int a)
{
    a+=shift;
    int ret=0;
    while (a>0)
    {
        ret=max(ret,son[a]);
        a/=2;
    }
    return ret;
}
void prazni(int pos)
{
    pos+=shift;
    while (pos>0)
    {
        anc[pos]=oper;
        pos/=2;
    }
}
int praznjen(int a,int b,int l,int r,int v)
{
    if (a>r || b<l)
        return 0;
    if (a<=l && r<=b)
        return anc[v];
    return max(praznjen(a,b,l,(l+r)/2,v*2),praznjen(a,b,(l+r)/2+1,r,v*2+1));
}

int vre;
inline void dfs(int u)
{
    vre++;
    din[u]=vre;
    for (int i=0; i<E[u].size(); i++)
        if (din[E[u][i]]==0)
            dfs(E[u][i]);
    dou[u]=vre;
}
int n;

int main()
{
    scanf("%d",&n);
    for (int i=1; i<n; i++)
    {
        int x,y;
        scanf("%d%d",&x,&y);
        E[x].push_back(y);
        E[y].push_back(x);
    }
    dfs(1);
    int q;
    scanf("%d",&q);
    for (oper=1; oper<=q; oper++)
    {
        int op,x;
        scanf("%d%d",&op,&x);
        if (op==1)
            puni(din[x],dou[x],1,shift+1,1);
        if (op==2)
            prazni(din[x]);
        if (op==3)
        {
            printf("%d\n",punjen(din[x])>praznjen(din[x],dou[x],1,shift+1,1));
        }
    }
}
