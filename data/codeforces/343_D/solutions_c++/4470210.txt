#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>
#include <set>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)


int res[1000000];

set<int > filled;
vector<vector<int> > v;
vector<vector<pair<int,int> > > q;
vector<set<int> > emptied;

int solve(int cur, int p)
{
	REP(i,q[cur].size())
		if(q[cur][i].second==1)
			filled.insert(q[cur][i].first);
	int curs=cur;
	REP(i,v[cur].size())
	{
		int to=v[cur][i];
		if(to!=p)
		{
			int rv=solve(to,cur);
			if(emptied[rv].size()>emptied[curs].size())
				swap(rv,curs);
			while(!emptied[rv].empty())
			{
				emptied[curs].insert(*emptied[rv].begin());
				emptied[rv].erase(emptied[rv].begin());
			}
		}
	}
	REP(i,q[cur].size())
		if(q[cur][i].second==2)
			emptied[curs].insert(q[cur][i].first);
	REP(i,q[cur].size())
		if(q[cur][i].second==3)
		{
			set<int>::iterator it1,it2;
			int v1,v2;
			v1=-2;
			v2=-1;
			it1=filled.lower_bound(q[cur][i].first);
			if(it1!=filled.begin())
			{
				it1--;
				v1=*it1;
			}
			it2=emptied[curs].lower_bound(q[cur][i].first);
			if(it2!=emptied[curs].begin())
			{
				it2--;
				v2=*it2;
			}
			res[q[cur][i].first]=v2<v1;
		}
	REP(i,q[cur].size())
		if(q[cur][i].second==1)
			filled.erase(q[cur][i].first);
	return curs;
}

int main()
{
	int n;
	scanf("%d",&n);
	v.resize(n);
	REP(i,n-1)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		a--;
		b--;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	int Q;
	scanf("%d",&Q);
	q.resize(n);
	emptied.resize(n);
	REP(i,Q)
	{
		int c,v;
		scanf("%d%d",&c,&v);
		v--;
		q[v].push_back(make_pair(i,c));
	}
	memset(res,-1,sizeof(res));
	solve(0,-1);
	REP(i,Q)
	{
		if(res[i]!=-1)
			printf("%d\n",res[i]);
	}
	return 0;
}
