R = lambda : map(int, raw_input().split())
n,m = R()
G = {}
for _ in xrange(m):
	s,t = R()
	if s not in G:
		G[s] = []
	if t not in G:
		G[t] = []
	G.get(s, []).append(t)
	G.get(t, []).append(s)

NODE_VS_COLOR = {}
ELIMINATED = set()
def dfs(node, color):
	if G[node] == None:
		return
	else:
		# print node, color
		NODE_VS_COLOR[node] = color
		for adj in G[node]:
			if adj not in ELIMINATED:
				if adj in NODE_VS_COLOR:
					if NODE_VS_COLOR[adj] != color*-1:
						if node not in ELIMINATED:
							ELIMINATED.add(adj)
				else:
					dfs(adj, color*-1)

# print G
for node in G.keys():
	# print "starting with ", node
	dfs(node, NODE_VS_COLOR.get(node, 1))
	# print "---"
print len(ELIMINATED) if (n-len(ELIMINATED))%2 == 0 else len(ELIMINATED) + 1
