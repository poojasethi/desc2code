#!/usr/bin/python
# FormingTeams codeforces.com problem
# Using union-find disjoint set algorithm
n,m=map(int,raw_input().split())

enemies=[]
for i in xrange(m):
    enemies.append(tuple(map(int,raw_input().split())))

#print n,m
#print enemies
parent=[-1]*(n+1)
nodes=[1]*(n+1)
def find_parent(x):
    if parent[x]==-1:
        return x
    else:
        x=parent[x]
        return find_parent(x)


odd_cycles=0
for (a,b) in enemies:
    #print (a,b)
    # remember we're comparing/merging the roots of each node
    # find_parent() returns the root (last parent)
    # (path compression)
    a=find_parent(a)
    b=find_parent(b)
    if a==b:
        #print ['found cycle','parent',a,'=',b]
        #print ['cycle type',['even','odd'][nodes[a]%2]]
        if not (nodes[a]%2)==0:
            odd_cycles+=1
    else:
        # increase a's by nodes[b]
        #print ['increasing',a,'by',nodes[b]]
        parent[b]=a
        nodes[a]+=nodes[b]
        
# finally since we require even teams, if the remaining players are odd after we remove,
# then we need to remove an extra player to make them break into even groups
remove=odd_cycles
if (n-odd_cycles)&1:
        remove+=1
print remove
