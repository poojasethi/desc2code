players, pairs = raw_input().split(" ")
players, pairs = int(players), int(pairs)

archenemies = []
for i in range(pairs):
	archenemies.append(raw_input().split(" "))

playerdict = {}
for i in range(1, players+1):
	playerdict[i] = {'enemies': [], 'color': None, 'error': 0, 'vis': 0}
	
	for enemies in archenemies:
		if int(enemies[0]) == i:
			playerdict[i]['enemies'].append(int(enemies[1]))
		if int(enemies[1]) == i:
			playerdict[i]['enemies'].append(int(enemies[0]))

unvisited = playerdict.keys()

queue = []

while len(unvisited) > 0:
	queue.append(unvisited[0])
	
	while len(queue) > 0:
		cur = queue[0]
		del(queue[0])
		
		if playerdict[cur]['color'] == None:
			playerdict[cur]['color'] = 0
		
		# Newly visited
		if playerdict[cur]['vis'] == 0:
			del(unvisited[unvisited.index(cur)])
			playerdict[cur]['vis'] = 1
		
		queue = queue + [player for player in playerdict[cur]['enemies'] if playerdict[player]['vis'] == 0]
		
		for enemy in playerdict[cur]['enemies']:
			if playerdict[enemy]['vis'] != 0:
				continue
			
			if playerdict[enemy]['color'] == None:
				playerdict[enemy]['color'] = (playerdict[cur]['color'] + 1) % 2
			else:
				shouldHaveColor = (playerdict[cur]['color'] + 1) % 2
				if playerdict[enemy]['color'] != shouldHaveColor:
					playerdict[enemy]['error'] += 1

# Count errors
count = 0
for player in playerdict:
	if playerdict[player]['error'] > 0:
		count += 1

if (len(playerdict) - count) % 2 == 1:
	count += 1

print count
