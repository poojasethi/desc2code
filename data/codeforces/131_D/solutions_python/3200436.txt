from collections import deque
import copy
def bfs(g,root):
    Q = deque([root])
    visited = [root]
    while len(Q) > 0:
        v = Q.pop()
        for x in g[v]:
            if x not in visited and len(g[x]) < 3:
                Q.appendleft(x)
                visited.append(x)
    return visited

def remove(g,vertices):
    for v in vertices:
        for sosed in g[v]:
            g[sosed].remove(v)
        del g[v]
                

def get_cycle(g,deg):
    Q = [k for k,v in deg.items() if v == 1] #stopnje 1
    g_copy = copy.deepcopy(g)
    while len(Q) > 0:
        v = Q.pop()
        vertices = bfs(g_copy,v)
        remove(g_copy,vertices)
    return [k for k in g_copy.keys()]

def new_graph(g,cycle):
    sosedi = set([])
    new_v = max([k for k in g.keys()])+1
    g_copy = copy.deepcopy(g)
    for v in cycle:
        for sosed in g_copy[v]:
            if sosed not in cycle:
                sosedi.add(sosed)
            g_copy[sosed].remove(v)
        del g_copy[v]
    g_copy[new_v] = list(sosedi)
    for x in sosedi:
        if x not in cycle:
            g_copy[x].append(new_v)
    return g_copy

def get_result(g,cycle):
    root = max([k for k in g.keys()])
    rez = {x:0 for x in cycle}
    rez[root] = 0
    Q = deque([root])
    visited = [root]
    while len(Q) > 0:
        v = Q.pop()
        for x in g[v]:
            if x not in visited:
                visited.append(x)
                Q.appendleft(x)
                rez[x] = rez[v]+1
    return rez


n = int(raw_input())
g = {i:[] for i in range(1,n+1)}
deg = {i:0 for i in range(1,n+1)}
for i in range(1,n+1):
    a,b = map(int, raw_input().split(" "))
    g[a].append(b)
    g[b].append(a)
    deg[a] += 1
    deg[b] += 1

cycle = get_cycle(g,deg)
new_g = new_graph(g,cycle)
rez = get_result(new_g,cycle)
for i in range(1,n+1):
    print rez[i],
