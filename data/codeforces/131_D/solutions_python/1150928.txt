from collections import *
from sys import *
predok =-2
firstc = -1
setrecursionlimit(10000)
fout = open('output.txt', 'w')
f =stdin
g = []
for i in range(3001):
    g.append([])
flag = 0
n = int(f.readline())
for i in range(n):
    string = f.readline()
    u, v = map(int, string.split())
    g[u].append(v)
    g[v].append(u)
used = [0]*3001
cycl = []
def dfs(u, pred):
    global flag, cycl, used, predok, firstc
    if flag:
        return(0)
    used[u] = 1
    for i in g[u]:
        if flag:
            break
        if pred == i:
            continue
        if (used[i]):
            cycl.append(u)
            flag = 1
            firstc = i
            predok = pred
            return(0)
        else:
            dfs(i, u)
    if u == predok:
        cycl.append(u)
        predok = pred
    if firstc == u:
        predok = -2
    if flag:
        return(0)
dfs(1, -1)
distance = [-1] * 3001
def bfs():
    #global distance, cycl
    d = deque()
    for u in cycl:
        distance[u] = 0
        d.append(u)
    l = len(cycl)
    while l > 0:
        c = d.popleft()
        l -= 1
        for i in g[c]:
            if distance[i] == -1:
                d.append(i)
                l += 1
                distance[i] = distance[c] + 1
bfs()
for i in range(1, n+1):
    print (distance[i]),

                
    
    
