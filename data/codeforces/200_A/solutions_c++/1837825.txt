#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

int n, m, q, ret, rx, ry, x, y, rot;
int l[2005][2005], r[2005][2005];

int findl(int x, int y){
	if (l[x][y] == y) return y;
	return l[x][y] = findl(x, l[x][y]);
}

int findr(int x, int y){
	if (r[x][y] == y) return y;
	return r[x][y] = findr(x, r[x][y]);
}

void trysol(int tx, int ty){
	if (ty < 1 || ty > m) return;
	int d = abs(tx - x) + abs(ty - y);
	if (rot) swap(tx, ty);
	if (d < ret || (d == ret && (tx < rx || (tx == rx && ty < ry)))) ret = d, rx = tx, ry = ty;
}

int main(){
	scanf("%d%d%d", &n, &m, &q);
	if (n > m) swap(n, m), rot = 1;
	for (int i=1; i<=n; i++)
	for (int j=0; j<=m+1; j++) l[i][j] = r[i][j] = j;
	
	while (q--){
		scanf("%d%d", &x, &y);
		if (rot) swap(x, y);
		ret = (1<<30);
		for (int i=0; i<=ret; i++){
			if (x - i >= 1){
				trysol(x - i, findl(x - i, y));
				trysol(x - i, findr(x - i, y));
			}
			if (x + i <= n){
				trysol(x + i, findl(x + i, y));
				trysol(x + i, findr(x + i, y));
			}
		}
		
		printf("%d %d\n", rx, ry);
		if (rot) swap(rx, ry);
		l[rx][ry] = findl(rx, ry - 1);
		r[rx][ry] = findr(rx, ry + 1);
	}
	return 0;
}
