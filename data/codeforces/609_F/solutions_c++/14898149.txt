#include <bits/stdc++.h>
#define MP make_pair
#define F first
#define S second
#define tl (p<<1)
#define tr (p<<1|1)
using namespace std;
typedef pair<int,int> pii;
typedef long long ll;
int i,j,k,n,m,s,t,ans,pos,key;
multiset <pii> SET;
multiset <pii> :: iterator it,nit;
struct node
{
	int x,id,eat;
	long long l;
};
node a[1000005];
bool cmp(node x,node y)
{
	return x.x<y.x;
}
int ans1[1000005];
ll ans2[1000005];
ll tmax[4000005];
int erfen1(int l,int r)
{
	if (l==r) return l;
	int mid = (l+r+1)>>1;
	if (a[mid].x<=key) return erfen1(mid,r);
	else return erfen1(l,mid-1);
}
ll ask(int l,int r,int x,int y,int p)
{
	if (l==x&&y==r) return tmax[p];
	int mid = (l+r)>>1;
	if (mid>=y) return ask(l,mid,x,y,tl);
	else if (mid+1<=x) return ask(mid+1,r,x,y,tr);
	else return max(ask(l,mid,x,mid,tl),ask(mid+1,r,mid+1,y,tr));
}
int erfen2(int l,int r)
{
	if (l==r) return l;
	int mid = (l+r)>>1;
	if (ask(1,n,1,mid,1)>=key) return erfen2(l,mid);
	else return erfen2(mid+1,r);
}
void build(int l,int r,int p)
{
	if (l==r) 
	{
		tmax[p] = a[l].x+a[l].l;
		return;
	}
	int mid = (l+r)>>1;
	build(l,mid,tl);
	build(mid+1,r,tr);
	tmax[p] = max(tmax[tl],tmax[tr]);
}
void change(int l,int r,int x,int y,int p)
{
	if (l==r) 
	{
		tmax[p] = y;
		return;
	}
	int mid = (l+r)>>1;
	if (mid>=x) change(l,mid,x,y,tl);
	else change(mid+1,r,x,y,tr);
	tmax[p] = max(tmax[tl],tmax[tr]);
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;i++)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		a[i].x = x;
		a[i].l = y;
		a[i].id = i;
		a[i].eat = 0;
	}
	sort(a+1,a+1+n,cmp);
	build(1,n,1);
	for (int i=1;i<=m;i++)
	{
		int A,B;
		scanf("%d%d",&A,&B);
		key = A;
		pos = erfen1(0,n);
		if (pos==0) SET.insert(MP(A,B));
		else
		{
			key = A;
			pos = erfen2(1,pos);
			if (ask(1,n,1,pos,1)<A) SET.insert(MP(A,B));
			else
			{
				a[pos].eat++;
				a[pos].l += B;
				it = SET.lower_bound(MP(a[pos].x,-1));
				while (it!=SET.end()&&a[pos].x+a[pos].l>=(*it).F)
				{
					nit = it;nit++;
					a[pos].eat++;
					a[pos].l += (*it).S;
					SET.erase(it);
					it = nit;
				}
				change(1,n,pos,a[pos].x+a[pos].l,1);
			}
		}
	}
	for (int i=1;i<=n;i++)
	{
		ans1[a[i].id] = a[i].eat;
		ans2[a[i].id] = a[i].l;
	}
	for (int i=1;i<=n;i++)
	printf("%d %I64d\n",ans1[i],ans2[i]);
	return 0;
}