#include <cstdio>
#include <iostream>
#include <stdlib.h>
#include <iomanip>
#include <algorithm>
#include <time.h>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <string>
#include <cmath>
#include <memory.h>
#include <deque>
using namespace std;

#define mp make_pair
#define X first
#define Y second
#define pb push_back
#define CL(x) (x << 1)
#define CR(x) ((x << 1) + 1)
#define sqr(x) ((x) * (x))
#define Task ""

const bool OnLineJudge = 1;

typedef long long cc;
typedef long double ld;
typedef pair <int, int> pt;
const int N = 200005;
struct Frog
{
    int coor, id, num;
    cc len;
} a[N];
struct Mosq
{
    int coor, power;
};
bool operator < (const Mosq a, const Mosq b) { return a.coor < b.coor || (a.coor == b.coor && a.power < b.power);}
bool cmp(const Frog a, const Frog b){ return a.coor < b.coor;}
bool cmp2(const Frog a, const Frog b) { return a.id < b.id; }
int n, m;
struct SegTree
{
    cc it[4 * N];
    int L[4 * N], H[4 * N];
    void build(const int x, const int low, const int high)
    {
        L[x] = low; H[x] = high;
        if (low == high) {it[x] = a[low].coor + a[low].len; return; }
        int mid = (low + high) >> 1;
        build(CL(x), low, mid); build(CR(x), mid + 1, high);
        it[x] = max(it[CL(x)], it[CR(x)]);
    }
    void update(const int x, const int pos)
    {
        if (L[x] > pos || H[x] < pos) return;
        if (L[x] == H[x]) {it[x] = a[L[x]].coor + a[L[x]].len; return; }
        update(CL(x), pos); update(CR(x), pos);
        it[x] = max(it[CL(x)], it[CR(x)]);
    }
    int query(const int x, const int u, const int v, const cc val)
    {
        if (L[x] == H[x]) return L[x];
        if (it[CL(x)] >= val) return query(CL(x), u, v, val);
        else
        return query(CR(x), u, v, val);
    }
} IT;
multiset <Mosq> mst;
multiset <Mosq> :: iterator it;

int main()
{
    if (!OnLineJudge)
    {
        freopen("input.inp", "r", stdin);
        //freopen(Task".inp", "r",  stdin);
        //freopen(Task".out", "w", stdout);
    }
    //-------------------------------------------------------------------------------------------------------
    std :: ios_base :: sync_with_stdio(false); cin.tie(0);
    //-------------------------------------------------------------------------------------------------------
    cin >> n >> m;
    for (int i = 1; i <= n; i++) cin >> a[i].coor >> a[i].len, a[i].id = i;
    sort(a + 1, a + n + 1, cmp);
    IT.build(1, 1, n);
    //-------------------------------------------------------------------------------------------------------
    for (int i = 1; i <= m; i++)
    {
        int pos, val;
        cin >> pos >> val;
        int idd = IT.query(1, 1, pos, pos);
        if (idd < 1 || idd > n || (1 <= idd && idd <= n && a[idd].coor > pos) || (1 <= idd && idd <= n && a[idd].coor + a[idd].len < pos))
        {
            mst.insert((Mosq){pos, val});
            continue;
        }
        a[idd].num++; a[idd].len += val;
        while (mst.size())
        {
            it = mst.lower_bound((Mosq){a[idd].coor, -1});
            if (it == mst.end()) break;
            if (a[idd].coor + a[idd].len >= (*it).coor)
            {
                a[idd].len += (*it).power;
                a[idd].num++;
                mst.erase(it);
            } else break;
        }
        IT.update(1, idd);
    }
    //-------------------------------------------------------------------------------------------------------
    sort(a + 1, a + n + 1, cmp2);
    //cout << "\n";
    for (int i = 1; i <= n; i++) cout << a[i].num << " " << a[i].len << "\n"; cout << "\n";
    //-------------------------------------------------------------------------------------------------------
    return 0;
}
