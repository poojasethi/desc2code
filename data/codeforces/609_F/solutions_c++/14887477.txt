#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <map>
#include <vector>
#include <set>
#include <iomanip>
using namespace std;

const int size = 210000;
typedef long long ll;
typedef  double dd;
const int inf=1111111111;
typedef pair<int,int> pp;

int n,m;
pair<int,pp> a[size];
struct wenzi{
    ll l,r,id;
    const bool operator < (const wenzi a) const {
        return r<a.r;
    }
}tmp;
multiset<wenzi> S;
multiset<wenzi> ::iterator it,tt,st;
ll len[size],num[size];
multiset<pp> res;
multiset<pp> ::iterator rt,rrt;


ll get(ll l,ll r,int id){
    rt=res.lower_bound(pp(l,-1));
    while(rt!=res.end()){
        if(rt->first>r)break;
        num[id]++;
        len[id]+=rt->second;
        r+=rt->second;
        rrt=rt;rt++;
        res.erase(rrt);
    }
    return r;
}

int main(){
    cin>>n>>m;
    for(int i=0;i<n;i++){
        scanf("%d%d",&a[i].first,&a[i].second.first);
        a[i].second.second=i;
        len[i]=a[i].second.first;
    }
    sort(a,a+n);
    int la=0;
    for(int i=0;i<n;i++){
        int l=a[i].first,r=a[i].second.first;
        if(l+r>la){
            tmp.l=l;tmp.r=l+r;tmp.id=a[i].second.second;
            S.insert(tmp);
            la=l+r;
        }
    }
    while(m--){
        int x,p;
        scanf("%d%d",&x,&p);
        tmp.r=x;
        it=S.lower_bound(tmp);
        res.insert(pp(x,p));
        if(it==S.end()||it->l>x){
            continue;
        }
        int L=it->l,R=it->r,id=it->id;
        ll top=get(L,R,id);
        st=it;st++;
        while(st!=S.end()){
            if(st->r>top)break;
            st++;
        }
        S.erase(it,st);
        tmp.l=L;tmp.r=top;tmp.id=id;
        S.insert(tmp);//show();
    }
    for(int i=0;i<n;i++)cout<<num[i]<<' '<<len[i]<<endl;
}
