#include <iostream>
#include <map>
#include <algorithm>

using namespace std;

typedef long long int ll;

const int limite=1000000;

ll infinito=1000000000000000LL;

struct elem {
  int tipo,ind;
  ll len;
  elem() {
  }
  elem(int intipo,ll inlen,int inind) {
    tipo=intipo;len=inlen;ind=inind;
  }
};

int n,m;
int posicion[limite];
int solc[limite];
ll soll[limite];
int indice[limite];

bool compara(int i1,int i2)
{
  return posicion[i1]<posicion[i2];
}

map<ll,elem> mapa;

void insertafrog(ll pos,ll len,int ind)
{
  map<ll,elem>::iterator it=mapa.lower_bound(pos);
  ll posle=it->first;
  elem e=it->second;
  if (e.tipo==2) {
    if (posle<=pos+len) {
      mapa.erase(posle);
      solc[ind]+=e.ind;
      soll[ind]+=e.len;
      insertafrog(pos,len+e.len,ind);
    } else {
      mapa[pos]=elem(1,len,ind);
    }
  } else if (posle<=pos+len) {
    mapa.erase(posle);
    ll posri=posle+e.len;
    if (pos+len<posri) {
      mapa[pos]=elem(1,len,ind);
      mapa[pos+len+1]=elem(1,posri-(pos+len+1),e.ind);
    } else {
      insertafrog(pos,len,ind);
    }
  } else {
    mapa[pos]=elem(1,len,ind);
  }
}

void insertamosquito(ll pos,ll size)  
{
  map<ll,elem>::iterator it=mapa.upper_bound(pos);
  it--;
  ll posle=it->first;
  elem e=it->second;
  if (e.tipo==2) {
    if (posle<pos)
      mapa[pos]=elem(2,size,1);
    else {
      mapa[pos].len+=size;
      mapa[pos].ind++;
    }
  } else if (pos<=posle+e.len) {
    mapa.erase(posle);
    solc[e.ind]++;
    soll[e.ind]+=size;
    insertafrog(posle,e.len+size,e.ind);
  } else {
    mapa[pos]=elem(2,size,1);
  }
}

int main()
{
  ios::sync_with_stdio(false);
  cin>>n>>m;
  mapa[-infinito]=elem(1,1,0);
  mapa[infinito]=elem(1,1,0);
  for (int i=1;i<=n;i++) {
    cin>>posicion[i]>>soll[i];
    indice[i]=i;
  }
  sort(indice+1,indice+n+1,compara);
  reverse(indice+1,indice+n+1);
  for (int i=1;i<=n;i++) {
    int ind=indice[i];
    insertafrog(posicion[ind],soll[ind],ind);
  }
  for (int i=1;i<=m;i++) {
    int pos,size;
    cin>>pos>>size;
    insertamosquito(pos,size);
  }
  for (int i=1;i<=n;i++)
    cout<<solc[i]<<" "<<soll[i]<<endl;
}
