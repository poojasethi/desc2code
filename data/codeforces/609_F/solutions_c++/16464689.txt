#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < long long ,long long > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 2e5 + 5;

#define int ll

multiset< pair< pair< ll , ll >, int > > S;
multiset< pii > un;

pair< pair< ll, ll > , int > a[N];
int aa, b, cnt[N], n, m;
ll x[N], y[N];

 main() {

	scanf("%lld %lld", &n, &m);

	FOR(i, 1, n) {
		scanf("%lld %lld" ,&a[i].st.st, &a[i].st.nd); a[i].st.nd += a[i].st.st;
		x[i] = a[i].st.st, y[i] = a[i].st.nd;
		a[i].nd = i;		
	}

	sort(a + 1, a + n + 1);

	ll mx = -1;

	FOR(i, 1, n) {
		if(a[i].st.nd <= mx) continue;
		S.insert(mp(mp(a[i].st.nd, a[i].st.st), a[i].nd));
		mx = a[i].st.nd;
	}

	FOR(i, 1, m) {
		scanf("%lld %lld", &aa, &b);
		type(S) it2 = S.lower_bound(mp(mp(aa, -1ll), 0));
		if(it2 == S.end() || it2->st.nd > aa) {
			un.insert(mp(aa, b));
			continue;
		}
		else {
			type(S) it3 = it2; it3++;
			ll xx = it2->nd, go = it2->st.st + b;
			S.erase(S.find(*it2));
			cnt[xx]++;
			type(un) ind = un.lower_bound(mp(x[xx], -1));
			while(ind != un.end()) {
				if(ind->st <= go) {
					type(un) temp = ind;
					temp++; go += ind->nd;
					un.erase(un.find(*ind));
					cnt[xx]++;
					ind = temp;
				}	
				else break;
			}
			while(it3 != S.end()) {
				if(it3->st.st <= go) {
					it2 = it3; it3++;
					S.erase(it2);
				}
				else break;
			}
			y[xx] = go;
			S.insert(mp(mp(go, x[xx]), xx));
		}
	}

	FOR(i, 1, n)
		printf("%lld %lld\n", cnt[i], y[i] - x[i]);

	return 0;
}
