#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> g[5555], w[5555];
typedef long long LL;
LL min_d, ta, ans, sum[5555];
int sz[5555];

void dfs(int v, int fa) {
	sum[v] = 0; sz[v] = 1;
	for (int i = 0; i < g[v].size(); ++i) {
		int u = g[v][i];
		if (u != fa) {
			dfs(u, v);
			sz[v] += sz[u];
			sum[v] += sum[u] + sz[u] * (LL)w[v][i];
		}
	}
}

void dfs(int v, int fa, int tot) {
	min_d = min(min_d, sum[v]);
	for (int i = 0; i < g[v].size(); ++i) {
		int u = g[v][i];
		if (u != fa) {
			ta += w[v][i] * (LL)(tot - sz[u]) * sz[u];
			sum[u] = sum[v] + w[v][i] * (LL)(tot - sz[u] * 2);
			dfs(u, v, tot);
		}
	}
}

int a[5555], b[5555], c[5555];

int main() {
	int n; scanf("%d", &n);
	for (int i = 1; i < n; ++i) {
		scanf("%d%d%d", a + i, b + i, c + i);
		g[a[i]].push_back(b[i]);
		g[b[i]].push_back(a[i]);
		w[a[i]].push_back(c[i]);
		w[b[i]].push_back(c[i]);
	}
	ans = ~0LLU >> 1;
	for (int i = 1; i < n; ++i) {
		ta = 0;
		min_d = ~0LLU >> 1;
		dfs(a[i], b[i]);
		dfs(a[i], b[i], sz[a[i]]);
		ta += min_d * (n - sz[a[i]]);
		min_d = ~0LLU >> 1;
		dfs(b[i], a[i]);
		dfs(b[i], a[i], sz[b[i]]);
		ta += min_d * sz[a[i]];
		ta += c[i] * (LL)sz[a[i]] * sz[b[i]];
		if (ans > ta) ans = ta;
	}
	printf("%I64d\n", ans);
	return 0;
}
 	 		  	  		   					  				