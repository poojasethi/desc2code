#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

const int maxN=5000+10;

typedef pair<int,int> II;
#define fs first
#define sd second
#define MP make_pair
#define PB push_back
#define FORE(it,c) for(typeof(c.begin())it=c.begin();it!=c.end();it++)

const long long inf=(long long)(1e17);

struct edge{
    int u,v,c;
};

int n;
edge el[maxN];
vector<II> a[maxN];
long long res,f[2][maxN];
int ct[maxN],nx;

void visit(int u,int par){
    ct[u]=1;
    FORE (it,a[u]) if (it->fs!=par){
        visit(it->fs,u);
        ct[u]+=ct[it->fs];
    }
}

void revisit(int u,int par,int l){
    long long F0=0,F1=0;
    FORE (it,a[u]) if (it->fs!=par){
        revisit(it->fs,u,it->sd);
        F0+=f[0][it->fs];
        F1=min(F1,f[1][it->fs]-f[0][it->fs]);
    }
    f[0][u]=F0+1LL*l*ct[u]*(n-ct[u]);
    f[1][u]=F0+F1+1LL*l*(nx-ct[u])*(n-nx+ct[u]);
}

int main(){
    //freopen("e.inp","r",stdin);
    scanf("%d",&n);
    int u,v,c;
    for (int i=0;i<n-1;i++){
        scanf("%d%d%d",&u,&v,&c);
        el[i]=(edge){u,v,c};
        a[u].PB(MP(v,c));
        a[v].PB(MP(u,c));
    }
    res=inf;
    for (int i=0;i<n-1;i++){
        u=el[i].u; v=el[i].v;
        visit(u,v); nx=ct[u]; revisit(u,v,0);
        visit(v,u); nx=ct[v]; revisit(v,u,0);
        //printf("DD %d,%d=%I64d\n",u,v,1LL*el[i].c);
        res=min(res,1LL*ct[u]*ct[v]*el[i].c+f[1][u]+f[1][v]);
    }
    printf("%I64d\n",res);
    return 0;
}
