#include<stdio.h>
#include<vector>
#include<iostream>
#include<string.h>
#include<string>
#include<math.h>
#include<map>
#include<queue>
#include<set>
#include<algorithm>
using namespace std;

typedef long long ll;
const ll inf=1LL<<60;

#define N 5010

typedef  struct {int v,next,val;} edge;
edge e[N<<1];
int p[N],eid;

inline void init(){memset(p,-1,sizeof(p));eid=0;}

inline void insert(int from,int to,int val)
{
	e[eid].v=to;
	e[eid].val=val;
	e[eid].next=p[from];
	p[from]=eid++;

	swap(from,to);

	e[eid].v=to;
	e[eid].val=val;
	e[eid].next=p[from];
	p[from]=eid++;
}
int x[N],y[N],val[N];
ll sum[N];
int cnt[N],vis[N];
void dfs(int u,int pre,int k)
{
	vis[u]=k;
	cnt[u]=1;
	for(int i=p[u];i!=-1;i=e[i].next){
		int v=e[i].v;
		if(v==pre) continue;
		dfs(v,u,k);
		cnt[u]+=cnt[v];
		sum[u]+=sum[v]+(ll)e[i].val*cnt[v];
	}
}
ll dp[N];
int rt;
void DP(int u,int pre)
{
	for(int i=p[u];i!=-1;i=e[i].next){
		int v=e[i].v;
		if(v==pre) continue;
		dp[v]=dp[u]-(ll)e[i].val*(cnt[v]*2-cnt[rt]);
		DP(v,u);
	}
}
ll ans[2];
int main()
{
	int n;
	scanf("%d",&n);
	init();
	for(int i=1;i<n;i++){
		scanf("%d%d%d",&x[i],&y[i],&val[i]);
		insert(x[i],y[i],val[i]);
	}
	ll Ans=inf;
	for(int i=1;i<n;i++){
		memset(sum,0,sizeof(sum));
		dfs(x[i],y[i],0);dfs(y[i],x[i],1);
		dp[x[i]]=sum[x[i]];
		dp[y[i]]=sum[y[i]];
		rt=x[i];DP(x[i],y[i]);
		rt=y[i];DP(y[i],x[i]);
		ans[0]=ans[1]=inf;
		for(int j=1;j<=n;j++){
			ans[vis[j]]=min(ans[vis[j]],dp[j]);
		}
		ll s=0;
		for(int j=1;j<=n;j++){
			s+=dp[j];
		}
		s/=2;
		s+=(ll)cnt[x[i]]*cnt[y[i]]*val[i]+cnt[x[i]]*ans[1]+ans[0]*cnt[y[i]];
		Ans=min(Ans,s);
	}
	printf("%I64d\n",Ans);
}
