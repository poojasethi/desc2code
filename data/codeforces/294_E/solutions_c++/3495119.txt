#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;

const int MAX_N = 5005;

#define long long long
#define pll pair<long, long>

struct Edge{
  int v;
  long w;
  Edge(int __v = 0, long __w = 0){
    v = __v, w = __w;
  }
};

int n;
long child[MAX_N];
long down[MAX_N];
long up[MAX_N];
vector<Edge> adj[MAX_N];

inline void dfs1(int u, int p, bool is_root = true){
  down[u] = 0;
  child[u] = 1;
  for(int i = 0; i < adj[u].size(); i++){
    int v = adj[u][i].v;
    if(v == p) continue;
    dfs1(v, u, false);
    child[u] += child[v];
    down[u] += down[v] + child[v] * adj[u][i].w;
  }
}

inline void dfs2(int u, int p, int n, long &x, long &y, long w = 0, bool is_root = true){
  up[u] = is_root? 0: up[p] + down[p] - down[u] + w * (n - child[u] * 2);
  x = y = up[u] + down[u];
  for(int i = 0; i < adj[u].size(); i++){
    int v = adj[u][i].v;
    if(v == p) continue;
    long xx, yy;
    dfs2(v, u, n, xx, yy, adj[u][i].w, false);
    x = min(x, xx);
    y += yy;
  }
}

int main(){
  scanf("%d", &n);
  for(int i = 1; i < n; i++){
    int u, v, w;
    scanf("%d %d %d", &u, &v, &w);
    adj[u].push_back(Edge(v, w));
    adj[v].push_back(Edge(u, w));
  }
  long ans = -1ull / 2;
  for(int u = 1; u <= n; u++){
    for(int i = 0; i < adj[u].size(); i++){
      int v = adj[u][i].v;
      if(v < u) continue;
      dfs1(u, v);
      dfs1(v, u);
      long x, xx, y, yy;
      dfs2(u, v, child[u], x, xx);
      dfs2(v, u, child[v], y, yy);
      long z = x * child[v] + adj[u][i].w * child[u] * child[v] + y * child[u];
      ans = min(ans, xx + yy + z * 2);
    }
  }
  printf("%I64d\n", ans / 2);
}
