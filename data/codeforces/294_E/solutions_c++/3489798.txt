#include <stdio.h>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;

const long long maxmax=5000LL*5000LL*5000LL*1000000LL;
const int N=5010;
long long c[N],tmp,tmptmp,croot,z[N],answer,answer1,answer2,answerm,n;
int x[N],y[N],i;

vector <long long> d[N];
vector <int> g[N];

void nDFS(int v,int p)
{
 c[v]=1;
 for (int j=0;j<g[v].size();j++ )
  if ( g[v][j]!=p )
   {
    nDFS(g[v][j],v);
    c[v]+=c[g[v][j]];
    tmp+=d[v][j]*c[g[v][j]]*(n-c[g[v][j]]);
   }
}

void DFS(int v,int p)
{
 tmp=min(tmp,tmptmp);
 for (int j=0;j<g[v].size();j++ )
  if ( g[v][j]!=p )
   {
    tmptmp+=((croot-c[g[v][j]])-c[g[v][j]])*d[v][j]*(n-croot);
    DFS(g[v][j],v);
    tmptmp-=((croot-c[g[v][j]])-c[g[v][j]])*d[v][j]*(n-croot);
   }
}

main()
{
 scanf("%d",&n);
 for ( i=1;i<n;i++ )
  {
   scanf("%d%d%d",&x[i],&y[i],&z[i]);
   g[x[i]].push_back(y[i]); d[x[i]].push_back(z[i]);
   g[y[i]].push_back(x[i]); d[y[i]].push_back(z[i]);
  }

 answer=maxmax;
 for ( i=1;i<n;i++ )
  {
   tmp=0; nDFS(x[i],y[i]); answer1=tmp;
   tmp=0; nDFS(y[i],x[i]); answer2=tmp;
   answerm=c[x[i]]*c[y[i]]*z[i];

   tmp=tmptmp=answer1; croot=c[x[i]]; DFS(x[i],y[i]); answer1=tmp;
   tmp=tmptmp=answer2; croot=c[y[i]]; DFS(y[i],x[i]); answer2=tmp;

   answer=min(answer,answer1+answer2+answerm);
  }

 cout<<answer<<endl;
}
