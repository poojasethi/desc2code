#include<iostream>
#include<stdlib.h>
#include<vector>
#include<algorithm>
using namespace std;
typedef long long ll;
vector<pair<int,int> > v[5050];
int sz[5050];int uu[5050],vv[5050],cost[5050];
long long  min(long long x,long long y)
{
    return x>y?y:x;
}
long long max(long long x,long long y)
{
    return x>y?x:y;
}
int dfs(int i,int p)
{int j,c=1;
    for(j=0;j<v[i].size();j++)
    {
        if(v[i][j].first==p)
        continue;
        c+=dfs(v[i][j].first,i);
    }
    sz[i]=c;
    return c;
}
long long rec(int n,int cur,int prev,int t)
{
    long long best=0,i,j,temp=0;
    for(i=0;i<v[cur].size();i++)
    {
        if(v[cur][i].first==prev)
        continue;
        temp=rec(n,v[cur][i].first,cur,t);
        long long b=(sz[v[cur][i].first]+t)*(n-sz[v[cur][i].first]-t);
        long long a=(sz[v[cur][i].first])*(n-sz[v[cur][i].first]);
        temp+=(a-b)*(v[cur][i].second);
        best=max(temp,best);

    }
    return best;
}
void solve(int n)
{
    dfs(0,-1);
    long long i,j,k, sum=0;
    for(i=0;i<n-1;i++)
    {
        k=min(sz[uu[i]],sz[vv[i]]);
        sum+=cost[i]*(k*(n-k));
    }
    long long  dec=0;
for(i=0;i<n-1;i++)
{
    dfs(uu[i],vv[i]);
    dfs(vv[i],uu[i]);
    dec=max(dec,rec(n,uu[i],vv[i],sz[vv[i]])+rec(n,vv[i],uu[i],sz[uu[i]]));

}
cout<<sum-dec;
}
int main()
{int n,i,j,k=0,w;
cin>>n;
int m=n;
while(--n)
{
    cin>>i>>j>>w;
    i--;j--;
    uu[k]=i;vv[k]=j;cost[k++]=w;
    v[i].push_back(pair<int,int>(j,w));
     v[j].push_back(pair<int,int>(i,w));
}
solve(m);

}
