#include <stdio.h>
#include <vector>

using namespace std;

int n,m,x,y,z;
typedef long long ll;

vector<pair<int,int> >E[5005];
int s[5005];
int edge[5005][3];

int dfs(int cur,int be)
{
	int am=1;
	for(int i=0;i<E[cur].size();i++)
	{
		if(E[cur][i].first==be) continue;
		am+=dfs(E[cur][i].first,cur);
	}
	return s[cur]=am;
}

long long calc(int a,int b,int S)
{
	long long R=0;
	for(int i=0;i<E[a].size();i++)
	{
		if(E[a][i].first==b) continue;
		long long z=calc(E[a][i].first,a,S);
		int qa=s[E[a][i].first];
		int qb=qa*(n-qa);
		int qc=(qa+S)*(n-qa-S);
		z+=(1LL*(qb-qc))*E[a][i].second;
		R=max(R,z);
	}
	return R;
}

int main()
{
	scanf("%d",&n);
	for(int i=0;i<n-1;i++)
	{
		int x,y,z;
		scanf("%d %d %d",&x,&y,&z);
		E[x].push_back(make_pair(y,z));
		E[y].push_back(make_pair(x,z));
		edge[i][0]=x;
		edge[i][1]=y;
		edge[i][2]=z;
	}
	dfs(1,-1);
	long long ret=0;
	for(int i=0;i<n-1;i++)
	{
		int l=s[edge[i][0]];
		int r=s[edge[i][1]];
		int a=min(l,r);
		ret+=1LL*edge[i][2]*a*(n-a);
	}
	long long res=0;
	for(int i=0;i<n-1;i++)
	{
		int p=dfs(edge[i][0],edge[i][1]);
		int q=dfs(edge[i][1],edge[i][0]);
		res=max(res,calc(edge[i][0],edge[i][1],q)+calc(edge[i][1],edge[i][0],p));
	}
	printf("%lld",ret-res);
}