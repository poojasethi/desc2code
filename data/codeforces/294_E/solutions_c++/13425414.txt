#include <iostream>
#include <vector>

#define MAXN 5005

using namespace std;

struct data
{
  int v;
  long long w;
  data(int v, long long w) : v(v), w(w) {}
};

long long n, res, c[MAXN], d[MAXN], l[MAXN];
vector<data> a[MAXN];

int dfs1(int u, int u_)
{
  l[u] = 1;
  c[u] = 0;
  
  for (int i = 0; i < a[u].size(); i++)
    if (a[u][i].v != u_)
    {
      int v = a[u][i].v;
      dfs1(v, u);
      l[u] += l[v];
      c[u] += c[v] + (n - l[v]) * l[v] * a[u][i].w;
    }
}

int dfs2(int u, int u_, long long k)
{
  d[u] = c[u];
  for (int i = 0; i < a[u].size(); i++)
    if (a[u][i].v != u_)
    {
      int v = a[u][i].v;   
      dfs2(v, u, k);
      d[u] = min(d[u], c[u] -(n - l[v]) * l[v] * a[u][i].w + (k - l[v]) * (n - k + l[v]) * a[u][i].w);
      d[u] = min(d[u],c[u]-c[v]+d[v]-(n - l[v]) * l[v] * a[u][i].w + (k - l[v]) * (n - k + l[v]) * a[u][i].w);
    }
}

int ff(int s, int t, long long w)
{
  dfs1(s, t);
  dfs2(s, t, l[s]);
  dfs1(t, s);
  dfs2(t, s, l[t]);
  res = min(res, d[s] + d[t] + w * l[s] * l[t]); 
}

main()
{
  cin >> n;
  for (int i = 1; i < n; i++)
  {
    int u, v, w;
    cin >> u >> v >> w;
    a[u].push_back(data(v, w));
    a[v].push_back(data(u, w));
  }
  
  res = 1000000000000000000LL;
  for (int i = 1; i <= n; i++)
    for (int j = 0; j < a[i].size(); j++)
      if (i < a[i][j].v) ff(i, a[i][j].v, a[i][j].w);
      
  cout << res;
  
 // system("pause");
}