//In the name of God
#include <iostream>
#include <vector>
using namespace std;

typedef pair<int, int> pii;
typedef long long ll;
const int N = 5000 + 2;
const ll oo = 1e18;

int n;
ll dis[N], race[N], ans = oo;
bool mark[N];
vector<pii> adj[N];

void dfs1(int v);
void dfs2(int v, int &x);

int main() {
	cin.sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int u, v, w;
		cin >> u >> v >> w;
		u--, v--;
		adj[v].push_back(pii(u, w));
		adj[u].push_back(pii(v, w));
	}
	for (int v = 0; v < n; v++)
		for (int i = 0; i < adj[v].size(); i++) {
			int u = adj[v][i].first, w = adj[v][i].second;
			if (v < u) {
				fill(dis, dis + n, (ll) 0);
				fill(mark, mark + n, false);
				mark[u] = true;
				dfs1(v);
				dfs1(u);
				fill(mark, mark + n, false);
				mark[u] = true;
				int x = v, y = u;
				dfs2(v, x);
				dfs2(u, y);
				ll t = 0;
				for (int i = 0; i < n; i++)
					t += dis[i];
				t = t / 2 + dis[x] * race[y] + race[x] * dis[y] + race[x] * race[y] * w;
				ans = min(ans, t);
			}
		}
	cout << ans << '\n';
	return 0;
}
void dfs1(int v) {
	mark[v] = true;
	race[v] = 1;
	for (int i = 0; i < adj[v].size(); i++) {
		int u = adj[v][i].first, w = adj[v][i].second;
		if (!mark[u]) {
			dfs1(u);
			dis[v] += dis[u] + race[u] * w;
			race[v] += race[u];
		}
	}
}
void dfs2(int v, int &x) {
	mark[v] = true;
	for (int i = 0; i < adj[v].size(); i++) {
		int u = adj[v][i].first, w = adj[v][i].second;
		if (!mark[u]) {
			dis[u] = dis[v] + w * (race[v] - 2 * race[u]);
			race[u] = race[v];
			dfs2(u, x);
		}
	}
	if (dis[v] < dis[x])
		x = v;
}
