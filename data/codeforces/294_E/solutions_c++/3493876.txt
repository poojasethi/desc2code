#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
using namespace std;
typedef long long ll;
int n,e;
const int N = 50005;
const int E = N * 2;
int head[N], nxt[E], pnt[E], cost[E], sum[N],vis[N];
ll dp[N];
void add(int u,int v,int c){
	nxt[e] = head[u];
	head[u] = e;
	pnt[e] = v;
	cost[e] = c;
	e++;
}
ll dfs1(int u,int f){
	sum[u] = 1;
	int v;
	ll& ans = dp[u];
	for(int i = head[u]; i !=-1; i= nxt[i])
		if(!vis[i] && (v=pnt[i]) != f){
			ans += dfs1(v,u);
			ans += 1LL * cost[i] * sum[v] * (n - sum[v]);
			sum[u] += sum[v];
		}
	return ans;
}
ll tmp,C;
const ll inf = 1LL * 1000000000 * 1000000000;
void dfs(int u,int f,ll s,int c = 0){
	if(u != f) {
		s -= 1LL * sum[u] * c * (n - sum[u]);
		s += 1LL * (sum[u] + C) * c * (n - sum[u] - C);
	}
	int v;
	tmp = min(tmp,s);
	for(int i = head[u]; i!= -1; i= nxt[i]) 
		if(!vis[i] && (v=pnt[i]) != f){
			dfs(v,u,s,cost[i]);
		}
}
int main(){
	cin >> n;
	e = 0;
	memset(head,-1,sizeof(head));
	for(int i = 1; i < n; i++){
		int u,v,val;
		cin >> u >> v >>val;
		add(u,v,val);
		add(v,u,val);
	}
	ll ans = 0;
	for(int i = 0; i < e; i+=2){
		memset(sum,0,sizeof(sum));
		int u = pnt[i], v = pnt[i^1];
		for(int j = 1; j <= n; j++)
			sum[j] = dp[j] = 0;
		vis[i] = vis[i^1] = 1;
		dfs1(u,v);
		dfs1(v,u);
		ll sm = 1LL * sum[u] * sum[v] * cost[i];
//		cout<<"u: "<<u<<" "<<v<<" "<<sm<<endl;
		tmp = inf;
		C = sum[v];
		dfs(u,u,dp[u]);
//		cout<<tmp<<endl;
		sm += tmp;
		tmp = inf;
		C = sum[u];
		dfs(v,v,dp[v]);
//		cout<<tmp<<endl;
		sm += tmp;
		if(sm < ans || ans == 0) ans = sm;
		vis[i] = vis[i^1] = 0;
	}
	cout<< ans << endl;
}
