#include<bits/stdc++.h>
using namespace std;

struct edg
{
	int a,b;
	long long val;
}e[5050];

long long sonsum[5050],censum[5050];
vector <int> vec[5050];

long long dfs1(int x,int pre)
{
	long long ret=0;
	int i,son;
	sonsum[x]=1;
	for(i=0;i<vec[x].size();i++)
	{
		son=e[vec[x][i]].a+e[vec[x][i]].b-x;
		if(son==pre)
			continue;
		ret+=dfs1(son,x);
		sonsum[x]+=sonsum[son];
		ret+=e[vec[x][i]].val*sonsum[son];
	}
	return ret;
}

void dfs2(int x,int pre,int root)
{
	int i,son;
	for(i=0;i<vec[x].size();i++)
	{
		son=e[vec[x][i]].a+e[vec[x][i]].b-x;
		if(son==pre)
			continue;
		censum[son]=censum[x]+e[vec[x][i]].val*(sonsum[root]-sonsum[son]*2);
		dfs2(son,x,root);
	}
}

long long dfs3(int x,int pre)
{
	long long ret=censum[x];
	int i,son;
	for(i=0;i<vec[x].size();i++)
	{
		son=e[vec[x][i]].a+e[vec[x][i]].b-x;
		if(son==pre)
			continue;
		ret=min(ret,dfs3(son,x));
	}
	return ret;
}

int main()
{
	long long n,i,j,ans,now;
	while(cin>>n)
	{
		for(i=1;i<=n;i++)
			vec[i].clear();
		for(i=1;i<n;i++)
		{
			scanf("%d%d%I64d",&e[i].a,&e[i].b,&e[i].val);
			vec[e[i].a].push_back(i);
			vec[e[i].b].push_back(i);
		}
		ans=(long long)1<<62;
		for(i=1;i<n;i++)
		{
			censum[e[i].a]=dfs1(e[i].a,e[i].b);
			censum[e[i].b]=dfs1(e[i].b,e[i].a);
			dfs2(e[i].a,e[i].b,e[i].a);
			dfs2(e[i].b,e[i].a,e[i].b);
			now=0;
			for(j=1;j<=n;j++)
			{
				now+=censum[j];
			}
			now>>=1;
			now+=dfs3(e[i].a,e[i].b)*sonsum[e[i].b]+dfs3(e[i].b,e[i].a)*sonsum[e[i].a];
			now+=sonsum[e[i].a]*sonsum[e[i].b]*e[i].val;
			ans=min(ans,now);
		}
		printf("%I64d\n",ans);
	}
}

	  		 		 		  			  		  	 		 				