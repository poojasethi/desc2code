#include<cstdio>
#include<algorithm>

#define MAXX 5111
#define MAX (MAXX<<1)
#define inf 0x3f3f3f3f3f3f3f3f

int cnt,edge[MAXX],nxt[MAX],from[MAX],to[MAX];
long long len[MAX];
int n,i,j,k,l;
long long dp[MAXX];
int sz[MAXX];
long long ans,sum,ct,tct;

inline void add(int a,int b,int c)
{
    nxt[++cnt]=edge[a];
    edge[a]=cnt;
    from[cnt]=a;
    to[cnt]=b;
    len[cnt]=c;
}

void rr(int now,int fa)
{
    dp[now]=0;
    sz[now]=1;
    for(int i(edge[now]);i;i=nxt[i])
        if(to[i]!=fa)
        {
            rr(to[i],now);
            dp[now]+=dp[to[i]]+sz[to[i]]*len[i];
            sz[now]+=sz[to[i]];
        }
}

void dfs(int now,int fa)
{
    ct=std::min(ct,dp[now]);
    for(int i(edge[now]);i;i=nxt[i])
        if(to[i]!=fa)
        {
            dp[to[i]]=dp[now]/*-dp[to[i]]*/+len[i]*(l-(sz[to[i]]<<1));
            sum+=len[i]*sz[to[i]]*(l-sz[to[i]]);
            dfs(to[i],now);
        }
}

int main()
{
    scanf("%d",&n);
    for(i=1;i<n;++i)
    {
        scanf("%d %d %d",&j,&k,&l);
        add(j,k,l);
        add(k,j,l);
    }
    ans=inf;
    for(i=1;i<=cnt;i+=2)
    {
        rr(from[i],to[i]);
        ct=inf;
        sum=0ll;
        l=sz[from[i]];
        dfs(from[i],to[i]);
        tct=ct;

        rr(to[i],from[i]);
        ct=inf;
        l=sz[to[i]];
        dfs(to[i],from[i]);
        sum+=ct*(n-l);
        sum+=tct*l;
        sum+=l*(n-l)*len[i];


        ans=std::min(ans,sum);
    }
    printf("%I64d\n",ans);
    return 0;
}
