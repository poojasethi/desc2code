#include "stdlib.h"
#include "memory.h"
#include "stdio.h"
#define min(A,B) ((A)>(B)?(B):(A))

#include <algorithm>
#include <iostream>
using namespace std;
typedef long long LL;

const int MAX = 5005;

int head[MAX];
int node[MAX*2],weight[MAX*2],next[MAX*2];
int cnt=0;

int N;
void addEdge(int a,int b,int w){
	next[cnt]=head[a];node[cnt]=b;weight[cnt]=w;head[a]=cnt++;
}

LL son[MAX];
void dfs1(int u,int f){
	son[u] = 1;
	for(int i=head[u];i!=-1;i=next[i]){
		int v = node[i];
		if(v==f)continue;
		dfs1(v,u);
		son[u]+=son[v];
	}
}
LL sum[MAX]={0};
int dfs2(int u, int f){
	for(int i=head[u];i!=-1;i=next[i]){
		int v = node[i];
		if(v == f)continue;
		sum[v] = sum[u] + (N-son[v])*weight[i];
		dfs2(v,u);
	}
}

//god!!! 
LL toMove(int u, int f,int T){
	for(int i=head[u];i!=-1;i=next[i]){
		int v = node[i];
		LL tc=0;
		if(v == f)continue;
		tc = son[u]>son[v]?T-2*son[v]:T-2*(N-son[u]);
		if(tc<0)return toMove(v,u,T)+tc*weight[i];
	}
	return 0;
}

LL ans = 0;
void dfs3(int u, int f){
	LL MAX;
	for(int i=head[u];i!=-1;i=next[i]){
		int v = node[i];
		if(v == f)continue;
		if((MAX = son[v]*toMove(u,v,N-son[v]) + (N-son[v])*toMove(v,u,son[v]))<ans)
			ans = MAX;
		dfs3(v,u);
	}
}

int main(){
	int a,b,w;
	cnt = 0;
	memset(head,-1,sizeof(head));
	scanf("%d",&N);
	for(int i=1;i<N;i++){
		scanf("%d %d %d",&a,&b,&w);
		addEdge(a,b,w);
		addEdge(b,a,w);
	}
	dfs1(1,0);dfs2(1,0);dfs3(1,0);
	LL Ans=0;
	for(int i=1;i<=N;i++)Ans+=sum[i];//original pair-sum
	printf("%I64d\n",Ans+ans);
	//cin>>a;
}