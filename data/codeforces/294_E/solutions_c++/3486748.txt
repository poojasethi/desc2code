#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
#define N 10005
using namespace std;

int n, x, y, w, ed;
int l[N], sz[N], qd[N], qn[N], ql[N];
LLD tot, sum, ret, cnt, mn;
LLD cx, cy, sx, sy, mx, my;

void bd(int x, int y, int w){
	qd[++ed] = y, qn[ed] = l[x], l[x] = ed, ql[ed] = w;
}

void dfs(int x, int y){
	sz[x] = 1;
	++cnt;
	EXP(i,l[x]) if (y != qd[i]){
		dfs(qd[i], x);
		sz[x] += sz[qd[i]];
	}
}

void dfs2(int x, int y, LLD s){
	tot += s;
	EXP(i,l[x]) if (y != qd[i]){
		dfs2(qd[i], x, s + ql[i]);
		sum += ql[i] * 1LL * sz[qd[i]] * (cnt - sz[qd[i]]);
	}
}

void dfs3(int x, int y, LLD tot){
	mn = min(mn, tot);
	EXP(i,l[x]) if (y != qd[i]){
		dfs3(qd[i], x, tot + ql[i] * 1LL * (cnt - 2 * sz[qd[i]]));
	}
}

void solve(int x, int y){
	cnt = 0;
	dfs(x, y);
	sum = tot = 0;
	dfs2(x, y, 0);
	mn = tot;
	dfs3(x, y, tot);
}

int main(){
	scanf("%d", &n);
	ed = 1;
	FOR(i,0,n-1){
		scanf("%d%d%d", &x, &y, &w), x--, y--;
		bd(x, y, w);
		bd(y, x, w);
	}
	ret = 1LL << 60;
	for (int i=2; i<=ed; i+=2){
		x = qd[i];
		y = qd[i^1];
		w = ql[i];
		solve(x, y);
		cx = cnt, sx = sum, mx = mn;
		solve(y, x);
		cy = cnt, sy = sum, my = mn;
		ret = min(ret, sx + sy + w * 1LL * cx * cy + cx * my + cy * mx);
	}
	printf("%I64d\n", ret);
	return 0;
}
