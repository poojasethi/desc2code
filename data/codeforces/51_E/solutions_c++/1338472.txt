#include <cstdio>
#include <algorithm>
#include <cstring>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define LLD long long int
#define N 705
using namespace std;

struct Matrix{
	LLD a[N][N];
};

int n, m, x, y, G[N][N];
Matrix W, A, R, T;
LLD t, tri[N], deg[N], con[N][N], ret;


void Mul(Matrix &T, Matrix &A, int flag){
	FOR(i,0,n)
		FOR(j,i,n){
			if (flag && i != j) continue;
			R.a[i][j] = 0;			
			FOR(k,0,n)
			if (T.a[i][k] && A.a[k][j]) R.a[i][j] += T.a[i][k] * A.a[k][j];
			R.a[j][i] = R.a[i][j];
		}
}

int main(){
	scanf("%d%d", &n, &m);
	while (m--){
		scanf("%d%d", &x, &y), x--, y--;
		G[x][y] = G[y][x] = 1;
		A.a[x][y] = A.a[y][x] = 1;
		deg[x]++, deg[y]++;
	}

	Mul(A, A, 0), T = R;
	FOR(i,0,n)
	FOR(j,0,n) con[i][j] = T.a[i][j];

	Mul(T, A, 0), W = R;
	FOR(i,0,n) tri[i] = W.a[i][i] >> 1;
	
	Mul(T, W, 1), W = R;
	FOR(i,0,n) ret += W.a[i][i];
	
	FOR(i,0,n){
		ret -= tri[i] * (10 + (deg[i] - 2) * 4);

		FOR(j,0,n){	
			if (!G[i][j]) continue;
			FOR(k,0,n){
				if (!G[j][k] || i == k) continue;
				t = con[j][k];
				if (G[i][k]) t--;
				ret -= t;
				if (!G[i][k]) continue;
				ret -= (deg[k] - 2) * 2;
			}
		}
	}

	printf("%I64d\n", ret / 10);
	return 0;
}
