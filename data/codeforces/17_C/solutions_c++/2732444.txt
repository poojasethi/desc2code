#include <cstdio>
#include <cstring>

#define FOR(i, a, b) for(int i=a; i<=b; ++i)

const int modulo = 51123987;

int n, next[152][3], f[152][52][52][52];
char s[152];

void add(int &x, int y) {
	x += y;
	if (x >= modulo)  x -= modulo;
}

bool bal(int x, int y) {
	return (x <= y+1) && (x >= y-1);
}

int main() {
	int lim, ans = 0;
	scanf("%d%s", &n, s+1);
	lim = n / 3 + 1;
	memset(next, 0, sizeof next);
	FOR(i, 1, n) FOR(j, i, n) 
	{
		if (!next[i][0] && s[j] == 'a')  next[i][0] = j;
		if (!next[i][1] && s[j] == 'b')  next[i][1] = j;
		if (!next[i][2] && s[j] == 'c')  next[i][2] = j;
	}
	memset(f, 0, sizeof f);
	f[1][0][0][0] = 1;
	FOR(i, 1, n) FOR(a, 0, lim) FOR(b, 0, lim) FOR(c, 0, lim)
	{
		int &r = f[i][a][b][c];
		if (!r)  continue;
		if (a+b+c == n && bal(a, b) && bal(b, c) && bal(c, a))
			add(ans, r);
		if (next[i][0] && a < lim)  add(f[next[i][0]][a+1][b][c], r);
		if (next[i][1] && b < lim)  add(f[next[i][1]][a][b+1][c], r);
		if (next[i][2] && c < lim)  add(f[next[i][2]][a][b][c+1], r);
	}
	printf("%d\n", ans);
	return 0;
}
