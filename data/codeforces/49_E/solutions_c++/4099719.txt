//In the name of God
#include <iostream>
#include <vector>
using namespace std;

const int N = 53, oo = 1e4;

vector<string> r[26];
bool pos[2][N][N][26];
int dp[N][N], n;
string s[2];

int main() {
	ios_base::sync_with_stdio(false);
	cin >> s[0] >> s[1] >> n;
	for (int i = 0; i < 2; i++)
		for (int j = 0; j < s[i].size(); j++)
			s[i][j] -= 'a';
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		for (int i = 0; i < s.size(); i++)
			s[i] -= 'a';
		r[s[0]].push_back(s.substr(3, 2));
	}
	for (int c = 0; c < 2; c++)
		for (int end = 0; end < s[c].size(); end++) {
			pos[c][end][end][s[c][end]] = true;
			for (int beg = end - 1; beg >= 0; beg--)
				for (int let = 0; let < 26; let++)
					for (int i = 0; i < r[let].size(); i++)
						for (int j = beg; j < end; j++)
							if (pos[c][beg][j][r[let][i][0]] && pos[c][j + 1][end][r[let][i][1]])
								pos[c][beg][end][let] = true;
		}
	fill(dp[0] + 1, dp[1], oo);
	for (int e1 = 1; e1 <= s[0].size(); e1++) {
		dp[e1][0] = oo;
		for (int e2 = 1; e2 <= s[1].size(); e2++) {
			dp[e1][e2] = oo;
			for (int b1 = 1; b1 <= e1; b1++)
				for (int b2 = 1; b2 <= e2; b2++)
					for (int let = 0; let < 26; let++)
						if (pos[0][b1 - 1][e1 - 1][let] && pos[1][b2 - 1][e2 - 1][let])
							dp[e1][e2] = min(dp[e1][e2], 1 + dp[b1 - 1][b2 - 1]);
		}
	}
	if (dp[s[0].size()][s[1].size()] == oo)
		cout << -1 << '\n';
	else
		cout << dp[s[0].size()][s[1].size()] << '\n';
	return 0;
}
