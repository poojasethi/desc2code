#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

#define INF (1<<29)

int mask[2][60][60];
int dp[60][60];
int graph[30][30];

void func(int id, int N, string s){
    int d,i,j,k,a,b;
    
    for(d=1;d<=N;d++) REP(i,N-d+1){
        j = i+d;
        if(d == 1){
            mask[id][i][j] = (1 << (s[i] - 'a'));
        } else {
            for(k=i+1;k<j;k++) REP(a,26) if(mask[id][i][k]&(1<<a)) REP(b,26) if(mask[id][k][j]&(1<<b)) mask[id][i][j] |= graph[a][b];
        }
    }
}

int main(void){
    int Q,N,M,i,j,k,l;
    string s,t;
    
    cin >> s >> t >> Q;
    REP(i,Q){
        string tmp;
        cin >> tmp;
        graph[tmp[3]-'a'][tmp[4]-'a'] |= (1 << (tmp[0] - 'a'));
    }
    
    N = s.length(); func(0,N,s);
    M = t.length(); func(1,M,t);
    
    REP(i,N+1) REP(j,M+1) dp[i][j] = INF;
    dp[0][0] = 0;
    REP(i,N+1) REP(j,M+1) REP(k,i) REP(l,j) if(mask[0][k][i] & mask[1][l][j]) dp[i][j] = min(dp[i][j],dp[k][l]+1);
    
    int ans = dp[N][M];
    if(ans == INF) cout << -1 << endl;
    else cout << ans << endl;
    
    return 0;
}
