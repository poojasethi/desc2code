from collections import defaultdict
def gcd(a, b):
    return gcd(b, a % b) if a % b else b

def sieve(n):
    prime = [True] * n
    prime[0] = prime[1] = False
    for i in xrange(2, int(n ** 0.5) + 1):
        if prime[i]:
            for j in xrange(i * i, n, i):
                prime[j] = False
    return [i for i in xrange(2, n) if prime[i]]
P = sieve(int(10 ** 9 ** 0.5 + 1))

def prime_decomposition(number):
    primes = defaultdict(int)
    while number != 1:
        f = True
        for x in P:
            if not number % x:
                f = False
                number /= x
                primes[x] += 1
                break
        if f:
            primes[number] = 1
            break
    return primes

a, b = map(int, raw_input().split())
g = gcd(a, b)
prime_a = prime_decomposition(a / g)
prime_b = prime_decomposition(b / g)

s = {2, 3, 5}
cnt = 0
f = False
for k, v in prime_a.items() + prime_b.items():
    cnt += v
    if not k in s:
        f = True
        break
if f:
    print -1
else:
    print cnt
