import os,sys
##Fox Dividing Cheese:371B http://codeforces.com/problemset/problem/371/B

###Two little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: "Little bears, wait a little, I want to make your pieces equal" "Come off it fox, how are you going to do that?", the curious bears asked. "It's easy", said the fox. "If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal".

###The little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.

###input
#The first line contains two space-separated integers a and b

###output
#If the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.

def run():
    a, b = map(int, raw_input().split())
    
    step = 0
    ####a = 2^x1 * 3^x2 * 5^x3
    ####b = 2^y1 * 3^y2 * 5^y3
    ###the result should be \sum_i |xi-yi|
    for d in [2,3,5]:
        while 0==a%d and 0==b%d:
            a /= d
            b /= d
        while 0 == a%d:
            a /= d
            step += 1
        while 0 == b%d:
            b /= d
            step += 1
    if a != b:
        step = -1
    print step
    return
########################################
run()

