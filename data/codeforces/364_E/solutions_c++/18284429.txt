#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cmath>
#define Rep(i, x, y) for (int i = x; i <= y; i ++)
#define Dwn(i, x, y) for (int i = x; i >= y; i --)
#define RepE(i, x) for (int i = pos[x]; i; i = g[i].nex)
#define u(x) q1[i][j][x]
#define v(x) q2[i][j][x]
using namespace std;
typedef long long ll;
typedef double db;
const int N = 2600;
int n, m, p, a[N][N], b[N][N], c[N][N], s[N][N], d[N];
short q1[N][N][8], q2[N][N][8];
ll ans;
char str[N];
void find(int n, int m) {
	Rep(i, 1, n) {
		Rep(j, 1, m) s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + c[i][j];
	}
	d[0] = 1;
	Rep(i, 1, n) {
		Rep(k, 1, p + 1) d[k] = m + 1;
		Rep(j, i, n) {
			Rep(k, 0, p + 1) {
				while (d[k] > 1 && s[j][ d[k] - 1 ] - s[i - 1][ d[k] - 1 ] >= k) d[k] --;
				q1[i][j][k] = d[k];
			}
		}
	}
}
void calc(int n, int m, int d) {
/*	cout << n <<" "<<m<<" "<<d<<" ----------"<<endl;
	Rep(i, 1, n) {
		Rep(j, 1, m) cout << b[i][j]<<" ";
		puts("");
	} */
	Rep(i, 1, n) {
		Rep(j, d + 1, m) c[i][j - d] = b[i][j];
	}
	find(n, m - d);
	Rep(i, 1, n) Rep(j, i, n) Rep(k, 0, p + 1) v(k) = u(k); // q2[i][j][k] = q1[i][j][k];
	Rep(i, 1, n) {
		Dwn(j, d, 1) c[i][d - j + 1] = b[i][j];
	}
	find(n, d);
	Rep(i, 1, n) Rep(j, i, n) Rep(k, 0, p) {
//		cout << k<<" - "<<v(k)<<endl;
		ans += int(u(k + 1) - u(k)) * (v(p - k + 1) - v(p - k));
	}
//	cout << ans << endl;
//	system("pause");
}
void work(int ln, int rn, int lm, int rm) {
	if (ln == rn && lm == rm) { ans += a[ln][lm] == p; return ; }
	int kn = rn - ln + 1, km = rm - lm + 1;
	if (rn - ln > rm - lm) {
		int mid = (ln + rn) >> 1;
		Rep(i, lm, rm) Rep(j, ln, rn) b[i - lm + 1][j - ln + 1] = a[j][i];
		calc(km, kn, mid - ln + 1);
		work(ln, mid, lm, rm);
		work(mid + 1, rn, lm, rm);
	} else {
		int mid = (lm + rm) >> 1;
		Rep(i, ln, rn) Rep(j, lm, rm) b[i - ln + 1][j - lm + 1] = a[i][j];
		calc(kn, km, mid - lm + 1);
		work(ln, rn, lm, mid);
		work(ln, rn, mid + 1, rm);
	}
}
int main()
{
	scanf ("%d%d%d", &n, &m, &p);
	Rep(i, 1, n) {
		scanf ("%s", str + 1);
		Rep(j, 1, m) a[i][j] = str[j] - '0';
	}
	work(1, n, 1, m);
	cout << ans << endl;

	return 0;
}
