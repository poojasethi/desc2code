#include<cstdio>
using namespace std;
typedef long long LL;
#define ln printf("\n")
const int NN=2511;
int a[NN][NN],sum[NN][NN],L[7],R[7],U[7],D[7];
int n,m,K;
void out(int *a,int l,int r) {for (int i=l;i<=r;i++)printf("%d ",a[i]);ln;}
int getsum(int u,int d,int l,int r)
{
	return sum[d][r]-sum[d][l-1]-sum[u-1][r]+sum[u-1][l-1];
}
LL work(int u,int d,int l,int r)
{
	if (u==d&&l==r) return a[u][l]==K;
	//printf("\n------------------------ work %d %d %d %d -----------------------------------\n",u,d,l,r);
	int i,j,k;
	LL ans=0;
	if (r-l>=d-u)
	{
		int mid=(l+r)>>1;
		for (i=u;i<=d;i++)
		{
			for (k=0;k<=K;k++) L[k]=l,R[k]=r;
			for (j=i;j<=d;j++)
			{
				//printf("================= i=%d j=%d ===============\n",i,j);
				for (k=0;k<=K;k++)
				{
					while (L[k]<=mid&&getsum(i,j,L[k],mid)>k) L[k]++;
					while (R[k]>mid&&getsum(i,j,mid+1,R[k])>k) R[k]--;
				}
				//printf("L ");out(L,0,K);printf("R ");out(R,0,K);
				for (k=0;k<=K;k++)
				{
					int t1=(k==0)?mid-L[k]+1:L[k-1]-L[k];
					int t2=(K-k==0)?R[K-k]-mid:R[K-k]-R[K-k-1];
					ans+=t1*t2;
				}
				//printf("ans=%I64d\n",ans);
			}
		}
		return ans+work(u,d,l,mid)+work(u,d,mid+1,r);
	}
	else
	{
		int mid=(u+d)>>1;
		for (i=l;i<=r;i++)
		{
			for (k=0;k<=K;k++) U[k]=u,D[k]=d;
			for (j=i;j<=r;j++)
			{
				for (k=0;k<=K;k++)
				{
					while (U[k]<=mid&&getsum(U[k],mid,i,j)>k) U[k]++;
					while (D[k]>mid&&getsum(mid+1,D[k],i,j)>k) D[k]--;
				}
				for (k=0;k<=K;k++)
				{
					int t1=(k==0)?mid-U[k]+1:U[k-1]-U[k];
					int t2=(K-k==0)?D[K-k]-mid:D[K-k]-D[K-k-1];
					ans+=t1*t2;
				}
			}
		}
		return ans+work(u,mid,l,r)+work(mid+1,d,l,r);
	}
}
int main()
{
	//freopen("1.in","r",stdin);freopen("1.out","w",stdout);
	scanf("%d%d%d",&n,&m,&K);
	int i,j;
	for (i=1;i<=n;i++) for (j=1;j<=m;j++)
	{
		char ch=getchar();
		while (ch!='0'&&ch!='1') ch=getchar();
		a[i][j]=(ch=='1');
	}
	for (i=1;i<=n;i++)
		for (j=1;j<=m;j++)
			sum[i][j]=a[i][j]+sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1];
	//printf("%d\n",getsum(1,2,1,3));
	printf("%I64d\n",work(1,n,1,m));
	return 0;
}