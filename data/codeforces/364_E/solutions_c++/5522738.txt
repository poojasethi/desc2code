#include <cstdio>
#include <algorithm>
using namespace std;
typedef long long ll;

const int N = 2505;
int n, m, k, a[2][N][N], u[7][N], d[7][N];
ll ans = 0;
char ch[N];
void solve(int x1, int y1, int x2, int y2, int dir) {
	if (x2 - x1 < y2 - y1) {
		swap(x1, y1), swap(x2, y2);
		dir ^= 1;
	}
	int (*c)[N] = a[dir], (*opp)[N] = a[!dir], mid = (x1 + x2) >> 1, p, cur;
	if (x1 == x2) {
		ans += (c[x1][y1] - c[x1][y1-1] == k);
		return;
	}
	for (int l=y1; l<=y2; ++l) {
		for (int ck=0; ck<=k; ++ck) {
			p = x1, cur = 0;
			for (int r=l; r<=y2; ++r) {
				cur += opp[r][mid-1] - opp[r][p-1];
				for (; cur>ck; cur-=c[p][r]-c[p][l-1], ++p);
				u[ck][r] = p;
			}
			p = x2, cur = 0;
			for (int r=l; r<=y2; ++r) {
				cur += opp[r][p] - opp[r][mid];
				for (; cur>ck; cur-=c[p][r]-c[p][l-1], --p);
				d[ck][r] = p;
			}
		}
		for (int r=l; r<=y2; ++r) {
			cur = k - (c[mid][r] - c[mid][l-1]);
			if (cur < 0) break;
			for (int ck=0; ck<=cur; ++ck)
				ans += ((ck?u[ck-1][r]:mid+1) - u[ck][r]) * (d[cur-ck][r] - (cur-ck?d[cur-ck-1][r]:mid-1));
		}
	}
	if (x1 < mid) solve(x1, y1, mid-1, y2, dir);
	if (mid < x2) solve(mid+1, y1, x2, y2, dir);
}
int main() {
	scanf("%d%d%d", &n, &m, &k);
	for (int i=1; i<=n; ++i) {
		scanf("%s", ch + 1);
		for (int j=1; j<=m; ++j) 
			a[0][i][j] = a[1][j][i] = ch[j] - '0';
	}
	for (int i=1; i<=n; ++i)
		for (int j=1; j<=m; ++j)
			a[0][i][j] += a[0][i][j-1];
	for (int i=1; i<=m; ++i)
		for (int j=1; j<=n; ++j)
			a[1][i][j] += a[1][i][j-1];
	solve(1, 1, n, m, 0);
	printf("%I64d\n", ans);
	return 0;
}