#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

int n,m,k,sum[2][2505][2505],up[8],down[8],cntup[8],cntdown[8];
char g[2505][2505];
long long ans;
void divide_and_conquer(int x1,int x2,int y1,int y2,bool flag) {
	if (y2-y1>x2-x1) {
		flag^=1;
		swap(x1,y1); swap(x2,y2);
	}
	if (x2-x1<=2) {
		if (flag) {
			flag^=1;
			swap(x1,y1); swap(x2,y2);
		}
		for (int j1=y1;j1<=y2;j1++)
			for (int j2=j1;j2<=y2;j2++)
				for (int i1=x1;i1<=x2;i1++) {
					int s=0;
					for (int i2=i1;i2<=x2;i2++) {
						s+=sum[0][i2][j2]-sum[0][i2][j1-1];
						if (s==k) ans++;
						if (s>k) break;
					}
				}
		return;
	}
	int mid=(x1+x2)>>1;
	divide_and_conquer(x1,mid,y1,y2,flag); divide_and_conquer(mid+1,x2,y1,y2,flag);
	for (int i=y1;i<=y2;i++) {
		for (int _k=0;_k<=k;_k++) {
			up[_k]=x1;
			down[_k]=x2;
		}
		memset(cntup,0,sizeof(cntup));
		memset(cntdown,0,sizeof(cntdown));
		for (int j=i;j<=y2;j++) {
			for (int _k=0;_k<=k;_k++) {
				cntup[_k]+=sum[flag^1][j][mid]-sum[flag^1][j][up[_k]-1];
				while (cntup[_k]>_k) {
					cntup[_k]-=sum[flag][up[_k]][j]-sum[flag][up[_k]][i-1];
					up[_k]++;
				}
			}
			for (int _k=0;_k<=k;_k++) {
				cntdown[_k]+=sum[flag^1][j][down[_k]]-sum[flag^1][j][mid];
				while (cntdown[_k]>_k) {
					cntdown[_k]-=sum[flag][down[_k]][j]-sum[flag][down[_k]][i-1];
					down[_k]--;
				}
			}
			for (int _k=0;_k<=k;_k++)
				if (up[_k]<=mid&&down[k-_k]>mid&&cntup[_k]==_k&&cntdown[k-_k]==k-_k) ans+=(((!_k)?mid+1:up[_k-1])-up[_k])*(down[k-_k]-((!(k-_k))?mid:down[k-_k-1]));
		}
	}
}
int main() {
	scanf("%d%d%d",&n,&m,&k);
	for (int i=1;i<=n;i++) scanf("%s",g[i]+1);
	for (int i=1;i<=n;i++)
		for (int j=1;j<=m;j++) sum[0][i][j]=sum[0][i][j-1]+(g[i][j]=='1');
	for (int i=1;i<=m;i++)
		for (int j=1;j<=n;j++) sum[1][i][j]=sum[1][i][j-1]+(g[j][i]=='1');
	divide_and_conquer(1,n,1,m,0);
	printf("%I64d\n",ans);
	return 0;
}
