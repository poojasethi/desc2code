#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#define REP(i,n) for (int i=1;i<=(n);++i)
#define FOR(i,a,b) for (int i=(a);i<=(b);++i)
#define ROF(i,a,b) for (int i=(a);i>=(b);--i)
#define FEC(p,u) for (edge*p=head[u];p;p=p->nxt)
using namespace std;
typedef long long LL;

int n, m, k, bl[3000][10], br[3000][10], cl[10], cr[10], tl[10], tr[10];
LL ans;
char a[3000][3000];

void work(int u, int d, int l, int r){
	if (d-u > r-l){
		int m(u+d>>1);
		FOR(i,l,r){
			int t(0);
			bl[i][0] = m;
			ROF(j,m,u){
				if (a[j][i] == '1') bl[i][++t] = j;
				if (t == k+1) break;
			}
			while (t < k+1) bl[i][++t] = u-1;
			t = 0;
			br[i][0] = m;
			FOR(j,m+1,d){
				if (a[j][i] == '1') br[i][++t] = j;
				if (t == k+1) break;
			}
			while (t < k+1) br[i][++t] = d+1;
		}
		FOR(i,l,r){
			cl[0] = cr[0] = m;
			REP(t,k+1) cl[t] = u-1, cr[t] = d+1;
			FOR(j,i,r){
				FOR(t,0,k+1) tl[t] = cl[t], tr[t] = cr[t];
				int p(1), q(1);
				REP(t,k+1)
					if (tl[p] > bl[j][q]) cl[t] = tl[p++]; else cl[t] = bl[j][q++];
				p = 1, q = 1;
				REP(t,k+1)
					if (tr[p] < br[j][q]) cr[t] = tr[p++]; else cr[t] = br[j][q++];
				FOR(t,0,k) ans += (cl[t]-cl[t+1])*(cr[k-t+1]-cr[k-t]);
			}
		}
		if (u < m) work(u, m-1, l, r);
		if (m < d) work(m+1, d, l, r);
	}else{
		int m(l+r>>1);
		FOR(i,u,d){
			int t(0);
			bl[i][0] = m;
			ROF(j,m,l){
				if (a[i][j] == '1') bl[i][++t] = j;
				if (t == k+1) break;
			}
			while (t < k+1) bl[i][++t] = l-1;
			t = 0;
			br[i][0] = m;
			FOR(j,m+1,r){
				if (a[i][j] == '1') br[i][++t] = j;
				if (t == k+1) break;
			}
			while (t < k+1) br[i][++t] = r+1;
		}
		FOR(i,u,d){
			cl[0] = cr[0] = m;
			REP(t,k+1) cl[t] = l-1, cr[t] = r+1;
			FOR(j,i,d){
				FOR(t,0,k+1) tl[t] = cl[t], tr[t] = cr[t];
				int p(1), q(1);
				REP(t,k+1)
					if (tl[p] > bl[j][q]) cl[t] = tl[p++]; else cl[t] = bl[j][q++];
				p = 1, q = 1;
				REP(t,k+1)
					if (tr[p] < br[j][q]) cr[t] = tr[p++]; else cr[t] = br[j][q++];
				FOR(t,0,k) ans += (cl[t]-cl[t+1])*(cr[k-t+1]-cr[k-t]);
			}
		}
		if (l < m) work(u, d, l, m-1);
		if (m < r) work(u, d, m+1, r);
	}
}
int main(){
	scanf("%d%d%d", &n, &m, &k);
	REP(i,n) scanf("%s", a[i]+1);
	work(1, n, 1, m);
	printf("%I64d\n", ans);
	return 0;
}
