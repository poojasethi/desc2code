#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int maxn=3e3;
const int maxk=10;
int read()
{
	int x=0,f=1;
	char str=getchar();
	while (str<'0'||str>'9')
	{
		if (str=='-')
			f=-1;
		str=getchar();
	}
	while (str>='0'&&str<='9')
	{
		x=x*10+str-'0';
		str=getchar();
	}
	return x*f;
}
int n,m,k;
long long Ans;
bool G[maxn][maxn];
int sum[maxn][maxn]; 
int bound1[maxk],bound2[maxk],tot1[maxk],tot2[maxk];
int get_pre(int x1,int y1,int x2,int y2)//前缀和求矩形 
{
	return sum[x1][y1]-sum[x1][y2]-sum[x2][y1]+sum[x2][y2];
}
void solve_updown(int xl,int xr,int yl,int yr)
{
	int mid=(xl+xr)>>1;
	for (int L=yl;L<=yr;L++)//左界 
	{
		for (int i=0;i<=k;i++)//清空 
			bound1[i]=bound2[i]=0;
		for (int R=yr;R>=L;R--)//右界，不能越过左界 
		{
			for (int i=0;i<=k;i++)
			{
				while (mid-bound1[i]>=xl&&get_pre(mid,R,mid-bound1[i]-1,L-1)<=i)//修改扩张上界 
					bound1[i]++;
				while (mid+1+bound2[i]<=xr&&get_pre(mid+1+bound2[i],R,mid,L-1)<=i)
					bound2[i]++;
				tot1[i]=bound1[i];
				tot2[i]=bound2[i];
				if (i)
				{
					tot1[i]-=bound1[i-1];
					tot2[i]-=bound2[i-1];
				}
			}
			for (int i=0;i<=k;i++)
				Ans+=tot1[i]*tot2[k-i];				
		}
	} 
}
void solve_leftright(int xl,int xr,int yl,int yr)
{
	int mid=(yl+yr)>>1;
	for (int L=xl;L<=xr;L++)
	{
		for (int i=0;i<=k;i++)
			bound1[i]=bound2[i]=0;
		for (int R=xr;R>=L;R--)
		{
			for (int i=0;i<=k;i++)
			{
				while (mid-bound1[i]>=yl&&get_pre(R,mid,L-1,mid-bound1[i]-1)<=i)
					bound1[i]++;
				while (mid+1+bound2[i]<=yr&&get_pre(R,mid+1+bound2[i],L-1,mid)<=i)
					bound2[i]++;
				tot1[i]=bound1[i];
				tot2[i]=bound2[i];
				if (i)
				{
					tot1[i]-=bound1[i-1];
					tot2[i]-=bound2[i-1];
				}
			}
			for (int i=0;i<=k;i++)
				Ans+=tot1[i]*tot2[k-i];				
		}
	} 
}
void solve(int xl,int xr,int yl,int yr)
{
	if (xl==xr&&yl==yr)//边界 
	{
		Ans+=G[xl][yr]==k;
		return ;
	}	
	if (xr-xl>=yr-yl)//分治大的一维 
	{
		solve(xl,(xl+xr)>>1,yl,yr);
		solve(((xl+xr)>>1)+1,xr,yl,yr);
		solve_updown(xl,xr,yl,yr);
	}
	else
	{
		solve(xl,xr,yl,(yl+yr)>>1);
		solve(xl,xr,((yl+yr)>>1)+1,yr);
		solve_leftright(xl,xr,yl,yr);
	}
}
int main()
{
	char ch[maxn];
	n=read(),m=read(),k=read();
	for (int i=1;i<=n;i++)
	{
		scanf("%s",ch+1);
		for (int j=1;j<=m;j++)
			G[i][j]=ch[j]-'0';
	}	
	for (int i=1;i<=n;i++)
		for (int j=1;j<=m;j++)
			sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+G[i][j];
	solve(1,n,1,m);
	printf("%lld\n",Ans);
	return 0;
} 
		 		  				 	 	 							 	 	 	 	