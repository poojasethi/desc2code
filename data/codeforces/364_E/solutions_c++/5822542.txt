#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#include<vector>
#include<string>
#define LL long long
using namespace std;
int a[2510][2510],s[2510][2510],n,m,K,Pl[10],Pr[10];
char S[2510];
LL ans; 
inline int Get(int x1,int x2,int y1,int y2)
{
	x1=max(x1,1);x2=min(x2,n);y1=max(y1,1);y2=min(y2,m);
	return s[x2][y2]-s[x2][y1-1]-s[x1-1][y2]+s[x1-1][y1-1];
}
void solve(int U,int D,int L,int R)
{
	if (U>D||L>R) return;
	if (U==D&&L==R) 
	{
		if (Get(U,D,L,R)==K) ans++;return;
	}
	if (D-U>R-L)
	{
		int mid=(U+D)>>1;
		for(int i=L;i<=R;i++)
		{
			int s=0;
			for(int j=1;j<=K+2;j++) Pl[j]=U-1,Pr[j]=D+1;
			Pl[0]=mid;Pr[0]=mid+1;
			for(int j=i;j>=L;j--)
			{
				s+=a[mid][j];if (s>K) break;
				for(int k=K+1;k;k--)
				{
					Pl[k]=max(Pl[k],Pl[k+1]);
					for(;Pl[k]<mid&&Get(Pl[k]+1,mid,j,i)>=k;Pl[k]++);
				}
				for(int k=K+1;k;k--)
				{
					Pr[k]=min(Pr[k],Pr[k+1]);
					for(;Pr[k]>mid+1&&Get(mid+1,Pr[k]-1,j,i)>=k;Pr[k]--);
				}
				for(int k=0;k<=K;k++)
				{
					int t=K-k;
					if (Get(mid+1,Pr[t],j,i)==t&&Get(Pl[k],mid,j,i)==k) ans+=(LL)(Pl[k]-Pl[k+1])*(Pr[t+1]-Pr[t]);
				}
			}
		}
		solve(U,mid,L,R);solve(mid+1,D,L,R);
	}
	else
	{
		int mid=(L+R)>>1;
		for(int i=U;i<=D;i++)
		{
			int s=0;
			for(int j=1;j<=K+2;j++) Pl[j]=L-1,Pr[j]=R+1;
			Pl[0]=mid;Pr[0]=mid+1;
			for(int j=i;j>=U;j--)
			{
				s+=a[j][mid];if (s>K) break;
				for(int k=K+1;k;k--)
				{
					Pl[k]=max(Pl[k],Pl[k+1]);
					for(;Pl[k]<mid&&Get(j,i,Pl[k]+1,mid)>=k;Pl[k]++);
				}
				for(int k=K+1;k;k--)
				{
					Pr[k]=min(Pr[k],Pr[k+1]);
					for(;Pr[k]>mid+1&&Get(j,i,mid+1,Pr[k]-1)>=k;Pr[k]--);
				}
				for(int k=0;k<=K;k++)
				{
					int t=K-k;
					if (Get(j,i,mid+1,Pr[t])==t&&Get(j,i,Pl[k],mid)==k) ans+=(LL)(Pl[k]-Pl[k+1])*(Pr[t+1]-Pr[t]);
				}
			}
		}
		solve(U,D,L,mid);solve(U,D,mid+1,R);
	}
}
int main()
{
	scanf("%d%d%d",&n,&m,&K);
	for(int i=1;i<=n;i++)
	{
		scanf("%s",S+1);
		for(int j=1;j<=m;j++) a[i][j]=S[j]-48;
	}
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++) s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j];
	solve(1,n,1,m);
	printf("%I64d\n",ans);
	return 0;
}
