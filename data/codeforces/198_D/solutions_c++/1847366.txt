#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <ctime>
#include <iostream>
#include <set>
#include <map>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<bool> vb;
typedef vector<vb> vvb;

#define TASKNAME "text"
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define mp make_pair
#define pb push_back
#define sz(x) ((int)(x).size())
#define INF ((int)1e9)
#define EPS (1e-9)

const int maxn = 51;
int res[maxn][maxn][maxn];

int a[2], b[2];
int cnt[2];
int perm[3];
int pdir[3];
int x[2][3];

inline void change(int man, int pos, int dch) {
  x[man][pos] += dch;
  assert(res[x[man][0]][x[man][1]][x[man][2]] == -1);
  res[x[man][0]][x[man][1]][x[man][2]] = a[man] + b[man] * cnt[man]++;
}

void makethis(int man, int w, int h) {
  if (w & 1) {
    for (int i = 0; i < h - 1; i++)
      change(man, perm[2], pdir[2]);
      
    for (int i = 0; i < w - 1; i++)
      change(man, perm[1], pdir[1]);
    
    for (int i = 0; i < h - 1; i++) {
      change(man, perm[2], -pdir[2]);
      
      for (int j = 0; j < w - 2; j++)
        change(man, perm[1], (i & 1) ? pdir[1] : -pdir[1]);
    }
    
  } else {
    for (int i = 0; i < w; i++) {
      for (int j = 0; j < h - 1; j++)
        change(man, perm[2], (i & 1) ? -pdir[2] : pdir[2]);
      if (i < w - 1)
        change(man, perm[1], pdir[1]);
    }
  }
}

int n0;
void printall() {
  for (int i = 0; i < n0; i++) {
    for (int j = n0 - 1; j >= 0; j--)
      for (int y = n0 - 1; y >= 0; y--)
        printf("%d%c", res[i][y][j], " \n"[!y]);
    printf("\n");
  }
  fflush(stdout);
}

int main() {
  #ifdef DEBUG
    freopen(TASKNAME".in", "r", stdin);
    freopen(TASKNAME".out", "w", stdout);
  #endif
  
  while (scanf("%d", &n0) >= 1) {
    if (n0 == 1) {
      printf("1\n");
      continue;
    }
    
    cnt[0] = cnt[1] = 0;
    a[0] = 1, a[1] = (n0 + 1) * n0 * n0;
    b[0] = 1, b[1] = -1;
    x[0][0] = x[0][1] = 0;
    x[0][2] = x[1][0] = x[1][1] = x[1][2] = n0 - 1;
    x[1][!(n0 & 1)]++;
    
    memset(res, -1, sizeof(res));
    for (int j = 0; j < 2; j++)
      res[x[j][0]][x[j][1]][x[j][2]] = a[j] + b[j] * cnt[j]++;
    
    for (int n = n0; n >= 2; n--) {
      {
        perm[0] = !(n & 1), perm[1] = (n & 1), perm[2] = 2;
        pdir[1] = 1, pdir[2] = -1; 
        makethis(0, n, n);
        change(0, !(n & 1), 1);
      }
      
      {
        perm[0] = !(n & 1), perm[1] = (n & 1), perm[2] = 2;
        pdir[1] = -1, pdir[2] = -1; 
        makethis(1, n, n);
        change(1, !(n & 1), -1);
      }
      
      if (n == 2)
        break;
      {
        perm[0] = 2, perm[1] = (n & 1), perm[2] = !(n & 1);
        pdir[1] = 1, pdir[2] = 1; 
        makethis(1, n, 1);
        change(1, 2, -1);
      }
      
      {
        perm[0] = 2, perm[1] = (n & 1), perm[2] = !(n & 1);
        pdir[1] = -1, pdir[2] = 1; 
        makethis(0, n, n - 2);
        change(0, 2, -1);
      }
      
    }
    
    change(0, 2, -1);
    change(1, 2, -1);
    printall();
      
    
    //break;
  }
  
  return 0;
}
