#include <algorithm>
#include <bitset>
#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

const int MAXN = 150;
const int OFFSET = 1000000;
const int INF = 1012345678;

int n, mat[MAXN][MAXN][MAXN];

void output() {
	int startIdx = INF, endIdx;
	for (int x = 0; x < MAXN; x++) {
		for (int y = 0; y < MAXN; y++) {
			for (int z = 0; z < MAXN; z++) {
				if (mat[x][y][z]) {
					startIdx = min(startIdx, mat[x][y][z]);
				}
			}
		}
	}
	endIdx = startIdx + n * n * n - 1;
	int minx = INF, maxx = -INF;
	int miny = INF, maxy = -INF;
	int minz = INF, maxz = -INF;
	for (int x = 0; x < MAXN; x++) {
		for (int y = 0; y < MAXN; y++) {
			for (int z = 0; z < MAXN; z++) {
				if (startIdx <= mat[x][y][z] && mat[x][y][z] <= endIdx) {
					minx = min(minx, x); maxx = max(maxx, x);
					miny = min(miny, y); maxy = max(maxy, y);
					minz = min(minz, z); maxz = max(maxz, z);
				}
			}
		}
	}
	for (int x = minx; x <= maxx; x++) {
		for (int y = miny; y <= maxy; y++) {
			for (int z = minz; z <= maxz; z++) {
				printf("%d%c", mat[x][y][z] - startIdx + 1, z == maxz ? '\n' : ' ');
			}
		}
		if (x != maxx) putchar('\n');
	}
}

struct Point {
	int x, y, z;

	Point() {}

	Point(int x, int y, int z) : x(x), y(y), z(z) {}

	Point operator + (const Point &rhs) const {
		return Point(x + rhs.x, y + rhs.y, z + rhs.z);
	}

	void setPoint(int value) {
		mat[x][y][z] = value;
	}
};

const Point IN = Point(-1, 0, 0);
const Point OUT = Point(1, 0, 0);
const Point LEFT = Point(0, -1, 0);
const Point RIGHT = Point(0, 1, 0);
const Point DOWN = Point(0, 0, -1);
const Point UP = Point(0, 0, 1);

void solve() {
	if (n == 1) {
		puts("1");
		return ;
	}
	Point head = Point(75, 75, 1), tail = head;
	int headIdx = OFFSET - 1, tailIdx = OFFSET;
	// 
	tail.setPoint(tailIdx++);
	tail = tail + IN; tail.setPoint(tailIdx++);
	tail = tail + DOWN; tail.setPoint(tailIdx++);
	tail = tail + OUT; tail.setPoint(tailIdx++);
	// 
	tail = tail + RIGHT; tail.setPoint(tailIdx++);
	tail = tail + UP; tail.setPoint(tailIdx++);
	tail = tail + IN; tail.setPoint(tailIdx++);
	tail = tail + DOWN; tail.setPoint(tailIdx++);
	// 
	tail = tail + RIGHT; tail.setPoint(tailIdx++);
	tail = tail + OUT; tail.setPoint(tailIdx++);
	tail = tail + UP; tail.setPoint(tailIdx++);
	tail = tail + IN; tail.setPoint(tailIdx++);
	// 
	for (int o = 2; o < n; o++) {
		if (o & 1) {
			// 
			head = head + UP; head.setPoint(headIdx--);
			for (int i = 0; i < o; i++) {
				head = head + IN; head.setPoint(headIdx--);
			}
			head = head + LEFT + IN;
			for (int i = 0; i <= o >> 1; i++) {
				head = head + OUT; head.setPoint(headIdx--);
				for (int i = 0; i < o; i++) {
					head = head + DOWN; head.setPoint(headIdx--);
				}
				head = head + OUT; head.setPoint(headIdx--);
				for (int i = 0; i < o; i++) {
					head = head + UP; head.setPoint(headIdx--);
				}
			}
			// 
			tail = tail + UP + IN;
			for (int i = 0; i <= o >> 1; i++) {
				tail = tail + OUT; tail.setPoint(tailIdx++);
				for (int j = 0; j < o - 2; j++) {
					tail = tail + LEFT; tail.setPoint(tailIdx++);
				}
				tail = tail + OUT; tail.setPoint(tailIdx++);
				for (int j = 0; j < o - 2; j++) {
					tail = tail + RIGHT; tail.setPoint(tailIdx++);
				}
			}
			tail = tail + RIGHT + OUT;
			for (int i = 0; i <= o >> 1; i++) {
				tail = tail + IN; tail.setPoint(tailIdx++);
				for (int i = 0; i < o; i++) {
					tail = tail + DOWN; tail.setPoint(tailIdx++);
				}
				tail = tail + IN; tail.setPoint(tailIdx++);
				for (int i = 0; i < o; i++) {
					tail = tail + UP; tail.setPoint(tailIdx++);
				}
			}
		} else {
			// 
			head = head + UP; head.setPoint(headIdx--);
			for (int i = 0; i < o; i++) {
				head = head + RIGHT; head.setPoint(headIdx--);
			}
			head = head + OUT; head.setPoint(headIdx--);
			for (int i = 0; i < o; i++) {
				head = head + DOWN; head.setPoint(headIdx--);
			}
			for (int i = 0; i < o; i++) {
				head = head + LEFT; head.setPoint(headIdx--);
			}
			for (int i = 0; i < o >> 1; i++) {
				head = head + UP; head.setPoint(headIdx--);
				for (int j = 0; j < o - 1; j++) {
					head = head + RIGHT; head.setPoint(headIdx--);
				}
				head = head + UP; head.setPoint(headIdx--);
				for (int j = 0; j < o - 1; j++) {
					head = head + LEFT; head.setPoint(headIdx--);
				}
			}
			// 
			tail = tail + UP; tail.setPoint(tailIdx++);
			for (int i = 0; i < o - 2; i++) {
				tail = tail + OUT; tail.setPoint(tailIdx++);
			}
			for (int i = 0; i < o; i++) {
				tail = tail + LEFT; tail.setPoint(tailIdx++);
			}
			for (int i = 1; i < o >> 1; i++) {
				tail = tail + IN; tail.setPoint(tailIdx++);
				for (int j = 0; j < o - 1; j++) {
					tail = tail + RIGHT; tail.setPoint(tailIdx++);
				}
				tail = tail + IN; tail.setPoint(tailIdx++);
				for (int j = 0; j < o - 1; j++) {
					tail = tail + LEFT; tail.setPoint(tailIdx++);
				}
			}
			tail = tail + IN; tail.setPoint(tailIdx++);
			for (int i = 0; i < o; i++) {
				tail = tail + DOWN; tail.setPoint(tailIdx++);
			}
			for (int i = 0; i < o; i++) {
				tail = tail + RIGHT; tail.setPoint(tailIdx++);
			}
			for (int i = 0; i < o >> 1; i++) {
				tail = tail + UP; tail.setPoint(tailIdx++);
				for (int j = 0; j < o - 1; j++) {
					tail = tail + LEFT; tail.setPoint(tailIdx++);
				}
				tail = tail + UP; tail.setPoint(tailIdx++);
				for (int j = 0; j < o - 1; j++) {
					tail = tail + RIGHT; tail.setPoint(tailIdx++);
				}
			}
		}
	}
	output();
}

int main() {
	scanf("%d", &n);
	solve();
	return 0;
}