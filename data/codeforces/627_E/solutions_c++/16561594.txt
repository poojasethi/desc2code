#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#define MAXN 3005
#define ll long long
using namespace std;
int r, c, n, k, C[MAXN], nxt[MAXN], pre[MAXN];
struct point{int x, y;}p[MAXN];
bool cmp(point a, point b){if(a.y == b.y) return a.x < b.x; return a.y < b.y;}
ll ans;
int main(){
	scanf("%d%d%d%d", &r, &c, &n, &k);
	for(int i = 1; i <= n; i ++) scanf("%d%d", &p[i].x, &p[i].y);
	sort(p + 1, p + n + 1, cmp);
	for(int i = 1; i <= c; i ++){
		memset(C, 0, sizeof(C));
		for(int j = n; j && p[j].y >= i; j --) C[p[j].x] ++;
		int pp = 0;
		for(int j = 1; j <= r; j ++) if(C[j]) pre[j] = pp, pp = j;
		pp = r+1;
		for(int j = r; j; j --) if(C[j]) nxt[j] = pp, pp = j;
		int R = 0, kk = 0, ansn = 0;
		for(int j = 1; j <= r; j ++){
			while(R <= r && kk < k) R ++, kk += C[R];
			if(R > r) break;
			ansn += r-R+1;
			kk -= C[j];
		}
		ans += ansn;
		int tt = n; 
		for(int j = c; j > i; j --){
			while(tt && p[tt].y == j){
				int X = p[tt].x, LL = X, RR = X, cnt = C[X];
				while(cnt < k && pre[LL]) LL = pre[LL], cnt += C[LL]; 
				while(cnt < k && nxt[RR] != r+1) RR = nxt[RR], cnt += C[RR];
				while(LL <= X){
					if(cnt == k) ansn -= (LL-pre[LL]) * (nxt[RR]-RR);
					cnt -= C[LL]; LL = nxt[LL];
					while(cnt < k && nxt[RR] != r+1) RR = nxt[RR], cnt += C[RR]; 
				}
				C[X] --;
				if(!C[X]) pre[nxt[X]] = pre[X], nxt[pre[X]] = nxt[X];
				tt --;
			} ans += ansn;
		}
	}cout << ans << endl;
	return 0;
}