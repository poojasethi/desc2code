#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 3e3 + 5;

#define next asd
#define prev dasd

int C[N], H[N], r, c, n, k, x, y, t, next[N], prev[N];
vector< int > v[N];
vector< pii > all;
ll ans, cur;

ll bef(int x) { return x - prev[x]; }
ll aft(int x) { return next[x] - x; }

ll CC(int x) { return (ll) (x) * (x - 1) / 2; }
int pp[N];

void doit(int x, int mul) {
	int c0 = H[x], s = 0;
	pp[++s] = x;
	int xx = x;
	while(!C[prev[x]] && prev[x] && H[prev[x]] + c0 <= k) {
		c0 += H[prev[x]];
		x = prev[x];
		pp[++s] = x;
	}
	int t = xx;
	while(s) {
		while(!C[next[t]] && c0 + H[next[t]] <= k && t != r + 1) {
			c0 += H[next[t]];
			t = next[t];
		}
		if(c0 <= k) cur += mul * (next[t] - xx) * bef(pp[s]);
		c0 -= H[pp[s--]];
	}
}

int main() {

	scanf("%d %d %d %d", &r, &c, &n, &k);

	FOR(i, 1, n) {
		scanf("%d %d", &x, &y);
		all.pb(mp(x, y));
		v[y].pb(x);
	} --k;
	FOR(i, 1, c) {
		memset(H, 0, sizeof H);
		foreach(it, all)
			if(it->nd <= i) {
				H[it->st]++;
			}
		memset(next, -1, sizeof next);
		memset(prev, -1, sizeof prev);
		int last = 0;
		cur = 0;
		FOR(j, 1, r) {
			if(H[j]) {
				cur += CC(j-last);
				prev[j] = last;
				next[last] = j;
				last = j;
			}				
		}
		next[last] = r + 1;
		cur += CC(r-last+1);
		prev[r + 1] = last;
		next[r + 1] = r + 1;
		int cc = 0, c0 = 0, tt = next[0];
		while(tt != r + 1) {
			while(cc != r + 1 && c0 + H[next[cc]] <= k) {
				c0 += H[next[cc]];
				cc = next[cc];
			}
			if(c0 <= k) cur += bef(tt) * (next[cc] - tt);
			c0 -= H[tt];
			tt = next[tt];
		} 
		FOR(j, 1, i) {
			ans += cur;
			foreach(it, v[j]) {
				doit(*it, -1); 
				C[*it] = 1;
				H[*it]--;
			}
			foreach(it, v[j]) {
				doit(*it, +1); 
				C[*it] = 0;
				if(!H[*it]) {
					int pr = prev[*it];
					int nx = next[*it];
					prev[nx] = pr;
					next[pr] = nx;
				}
			}
		}
	}

	printf("%lld\n", CC(r+1) * CC(c+1) - ans);

	return 0;
}
