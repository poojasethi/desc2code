#include <bits/stdc++.h>
#define ll long long
#define fir first
#define sec second
#define mkp make_pair
using namespace std;

const int MaxN = 3010;
pair <int, int> p[MaxN];
int r, c, n, k;

class Link {
public:
	int l[MaxN], r[MaxN];
	void init(int n) {
		for (int i = 0; i <= n; ++i) {
			l[i] = i - 1;
			r[i] = i + 1;
		}
		l[0] = n, r[n] = 0;
	}
	void remove(int x) {
		r[l[x]] = r[x];
		l[r[x]] = l[x];
	}
}	C;
int h[MaxN], htot, pos[MaxN], range[MaxN];
pair <int, int> disc[MaxN];
ll calc(int xl) {
	htot = 0;
	for (int i = n; p[i].fir >= xl; --i) 
		disc[++htot] = mkp(p[i].sec, i);
	sort(disc + 1, disc + htot + 1);
	for (int i = 1; i <= htot; ++i) {
		h[i] = disc[i].fir;
		pos[disc[i].sec] = i;
	}
	h[++htot] = c + 1;
	h[0] = 0;

	ll ret = 0, now = 0;
	for (int i = 1; i <= htot; ++i) {
		range[i] = min(i + k - 1, htot);
		if (range[i] < htot) now += (h[i] - h[i - 1]) * (c - h[range[i]] + 1);
	}
	C.init(htot);

	int node = n;
	for (int xr = r; xr >= xl; --xr) {
		ret += now;
		while (p[node].fir == xr) {
			int p = pos[node];
			for (int i = p; i; i = C.l[i]) {
				if (range[i] < p) break;
				if (range[i] < htot) {
					now -= (h[i] - h[C.l[i]]) * (c - h[range[i]] + 1);
					range[i] = C.r[range[i]];
					now += (h[i] - h[C.l[i]]) * (c - h[range[i]] + 1);
				}
			}
			C.remove(p);
			--node;
		}
	}
	return ret;
}

int main() {
	scanf("%d%d%d%d", &r, &c, &n, &k);
	for (int i = 1; i <= n; ++i) scanf("%d%d", &p[i].fir, &p[i].sec);
	sort(p + 1, p + n + 1);
	ll ans = 0;
	for (int i = 1; i <= r; ++i) ans += calc(i);
	cout << ans << endl;
	return 0;
}
