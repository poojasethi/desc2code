#include<iostream>
#include<string>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#define ll long long
#include<vector>
using namespace std;
ll n,k;
vector<int>l;
vector<pair<int,int> >r[10][2];
inline bool check(ll x){
    if(x<100)return true;
    int now=x%10;
    x/=10;
    if(x%10==now)return false;
    bool b;
    if(x%10>now)b=true;
    else b=false;
    now=x%10;
    x/=10;
    while(x!=0){
        b=!b;
        if(b&&x%10<=now)return false;
        if(!b&&x%10>=now)return false;
        now=x%10;
        x/=10;
    }
    return true;
}
void dfsl(int d,int x,int last1,int last2) {
    if (d>7)return;
    l.push_back(x);
    for(int i = 0;i<10;i++){
        if(i == last2)continue;
        if(last1<last2&&last2<i)continue;
        if(last1>last2&&last2>i)continue;
        dfsl(d+1,x*10+i,last2,i);
    }
}
void dfsr(int d,int x,int start1,int start2,int last1,int last2) {
    if(d==7) {
        if(start1<start2){
            for(int i=start1;i<10;i++)
                r[i][start1<start2].push_back(make_pair(x%n,x));
        }else{
            for(int i=start1;i>=0;i--)
                r[i][start1<start2].push_back(make_pair(x%n,x));
        }
        return;
    }
    for(int i=0;i<10;i++){
        if(i==last2)continue;
        if(last1<last2&&last2<i)continue;
        if(last1>last2&&last2>i)continue;
        dfsr(d+1,x*10+i,start1,start2,last2,i);
    }
}
int main() {
    ios::sync_with_stdio(false);
    cin>>n>>k;
    if (n>=1e8){
        for (ll i=n;i<=1e14;i+=n){
            if(check(i)==true){
                k--;
                if(k==0){
                    cout<<i<<endl;
                    return 0;
                }
            }
        }
        puts("-1");
        return 0;
    }
    for (int i=1;i<10;i++)l.push_back(i);
    for (int i=1;i<10;i++)
        for (int j=0;j<10;j++)
            if (i!=j)dfsl(2,i*10+j,i,j);
    for (int i=0;i<10;i++)
        for (int j=0;j<10;j++)
            if (i!=j)
                dfsr(2,i*10+j,i,j,i,j);
    sort(l.begin(),l.end());
    for(int i=0;i<10;i++){
        for(int j=0;j<2;j++){
            sort(r[i][j].begin(),r[i][j].end());
        }
    }
    for (int i=0;i<l.size();i++)
        if(l[i]%n==0){
            k--;
            if(k==0){
                cout<<l[i]<<endl;
                return 0;
            }
        }
    for(int i=0;i<l.size();i++){
        int x=l[i];
        int vl=l[i];
        int need=(n-vl%n*10000000LL%n)%n;
        if (x%10>0&&(x<10||x/10%10<x%10)){
            vector<pair<int,int> >& vecr=r[x%10-1][1];
            int pl=lower_bound(vecr.begin(),vecr.end(),make_pair(need,0))-vecr.begin();
            int pr=lower_bound(vecr.begin(),vecr.end(),make_pair(need+1,0))-vecr.begin();
            if(pr<k+pl)k-=pr-pl;
            else{
                cout<<(vl*10000000LL)+vecr[pl+k-1].second<<endl;
                return 0;
            }
        }
        if(x%10<9&&(x<10||x/10%10>x%10)){
            vector<pair<int,int> > &vecr=r[x%10+1][0];
            int pl=lower_bound(vecr.begin(),vecr.end(),make_pair(need,0))-vecr.begin();
            int pr=lower_bound(vecr.begin(),vecr.end(),make_pair(need+1,0))-vecr.begin();

            if(pr<k+pl)k-=pr-pl;
            else{
                cout<<(vl*10000000LL)+vecr[pl+k-1].second<<endl;
                return 0;
            }
        }
    }
    puts("-1");
    //system("pause");
    return 0;
}
