#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <queue>
#include <vector>
using namespace std;
#define md int(1e6+100)
#define modul int(1e9+7)
#define FOR(i,a,b) for( int i=(a),_b=(b);i<=_b;i++)
#define DOW(i,b,a) for( int i=(b),_a=(a);i>=_a;i--)
int xx[4]={0,0,1,-1};
int yy[4]={1,-1,0,0};
typedef long long ll;
int dem;
ll n,k;
struct re
{
    int m,x,t,v;
};
re c[md];

bool cmp(re a , re b)
{
    if (a.m<b.m || (a.m==b.m && a.t<b.t) || (a.m==b.m && a.t==b.t && a.x<b.x)) return true;
    return false;
}

bool cmp2(re a , re b)
{
    if (a.m<b.m || (a.m==b.m && a.t<b.t) || (a.m==b.m && a.t==b.t && a.x<b.x) || (a.m==b.m && a.t==b.t && a.x==b.x && a.v<b.v)) return true;
    return false;
}

int fleft(int t,int m, int x)
{
    re a; a.t=t; a.m=m; a.x=x;
    int l=1,r=dem;
    int res=dem+1;
    while (l<=r)
    {
        int mid=(l+r)/2;
        if (!cmp(c[mid],a)) //c[mid]>=a
        {
            r=mid-1;
            res=mid;
        }
        else l=mid+1;

    }
    return res;
}

int fright(int t, int m , int x)
{

    re a; a.t=t; a.m=m; a.x=x;
    int l=1,r=dem;
    int res=0;
    while (l<=r)
    {
        int mid=(l+r)/2;
        if (!cmp(a,c[mid])) // c[mid]<=a
        {
            l=mid+1;
            res=mid;
        }
        else r=mid-1;
    }

    return res;
}
int check(int x,int d=0)
{
    int n=0;
    int a[15];
    while (x!=0)
    {
        n++;
        a[n]=x%10;
        x/=10;
    }
    if (d!=0)
    {
        while (n<d)  {n++; a[n]=0;}
    }
    if (n==1) return 1;
    int m;
    if (a[2]>a[1]) m=2;
    else if (a[2]<a[1]) m=1;
    else return 0;

    FOR(i,3,n)
    {
        int m2;
        if (a[i]>a[i-1]) m2=2;
        else if (a[i]<a[i-1]) m2=1;
        else return 0;
        if (m2==m) return 0;
        m=m2;
    }
    if (a[n-1]>a[n]) return 2;
    else return 1;
}

int main()
{
    //freopen("inp.txt","r",stdin);
    scanf("%I64d%I64d",&n,&k);
    ll d=0;
    FOR(i,1,int(1e7)-1)
    if (i%n==0 && check(i))
    {
        d++;
        if (d==k)
        {
            cout<<i<<endl;
            return 0;
        }
    }
    FOR(i,int(1e5),int(1e7)-1)
    {
        int t=check(i,7);
        if (!t) continue;
        dem++;
        c[dem].m=i%n;
        c[dem].t=t-1;
        c[dem].x=i/(int)(1e6);
        c[dem].v=i;
    }
    sort(c+1,c+1+dem,cmp2);
    FOR(i,1,int(1e7)-1)
    if (check(i))
    {
        int x=i%10;
        int z=-1;
        if (i/10!=0) z= (i/10)%10;
        ll m;
        m=(n-(i*(ll)(1e7))%n)%n;
        if (m>int(1e8)) continue;
        if (z==-1 || x>z)
        if (x!=0)
        {
            int l=fleft(1,m,0);
            int r=fright(1,m,x-1);
            if (d+r-l+1>=k)
            {
                FOR(j,l,r)
                {
                    d++;
                    if (d==k)
                    {
                        cout<<i*(ll)(1e7)+c[j].v<<endl;
                        return 0;
                    }
                }
            }
            if (r-l+1>=0) d+=r-l+1;
        }
        if (z==-1 || x<z)
        if (x!=9)
        {
            int l=fleft(0,m,x+1);
            int r=fright(0,m,9);
            if (d+r-l+1>=k)
            {
                FOR(j,l,r)
                {
                    d++;
                    if (d==k)
                    {
                        cout<<i*(ll)(1e7)+c[j].v<<endl;
                        return 0;
                    }
                }
            }
            if (r-l+1>=0) d+=r-l+1;
        }
    }
    cout<<-1<<endl;
}
