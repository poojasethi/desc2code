#include "iostream"
#include "cstdio"
#include "algorithm"
#include "math.h"
#include "queue"
#include "map"
#include "stack"
#include "fstream"
#include "cstring"
#define L(x) (x<<1+1)
#define R(x) (x<<1+2)
#define REP(a,b) for(int a=0;a<b;a++)
#define REP1(a,b) for(int a=1;a<=b;a++)
#define RREP(a,b) for(int a=b-1;a>=0;a--)
#define ITR(a,b) for(;a!=b;a++)
using namespace std;
#define P 1000000007
#define E5 100000
#define E6 1000000
#define E7 10000000
#define E14 100000000000000
#define E15 1000000000000000
#define MAXN 100
typedef long long ll;

#include "windows.h"
#define PAU system("pause");
ifstream fin("data.in");

ll n,k;

bool check(int x){
	while(x>=100){
		if(x/100%10==x/10%10 || x/10%10==x%10)return 0;
		if(!(x/100%10>x/10%10 xor x/10%10>x%10))return 0;
		x/=10;
	}
	return 1;
}

bool check(ll x){
	while(x>=100){
		if(x/100%10==x/10%10 || x/10%10==x%10)return 0;
		if(!(x/100%10>x/10%10 xor x/10%10>x%10))return 0;
		x/=10;
	}
	return 1;
}

bool checkl(int x){
	x/=10000;
	return (x/100>x/10%10) != (x/10%10>x%10);
}

struct node{
	int nxt,num;
	ll cnt;
};

vector<node> valid;

int l[2000000][10][2];

vector<int> sp;

void init(){
	memset(l,-1,sizeof(l));
	REP1(i,E7){
		if(i*n>E7)break;
		if(i*11<100 && i*11%n==0)continue;
		if(check(i*n))sp.push_back(i*n);
	}
}

void pre(){
	REP1(i,E7-1){
		if(!check(i))continue;
		node tmp;
		tmp.num=i;
		tmp.nxt=l[i%n][i/E6][i/E6>i/E5%10];
		tmp.cnt=tmp.nxt==-1?1:valid[tmp.nxt].cnt+1;
		valid.push_back(tmp);
		if(i>E5 && checkl(i))l[i%n][i/E6][i/E6>i/E5%10]=valid.size()-1;
	}
}

void get(int px,int pos){
	while(valid[pos].cnt>k)pos=valid[pos].nxt;
	cout<<px;
	for(int i=1;valid[pos].num*i<E6;i*=10)cout<<0;
	cout<<valid[pos].num<<endl;
}

int main(){
	cin>>n>>k;


	if(n>=E15){cout<<-1;return 0;}
	if(n>=2000000){
		ll cc=n;
		while(cc<E14 && k){
			if(check(cc))k--;
			cc+=n;
		}
		if(k)cout<<-1;
		else cout<<cc-n;
		return 0;
	}

	init();
	if(k<=sp.size()){
		cout<<sp[k-1]<<endl;
		return 0;
	}k-=sp.size();
	vector<int>().swap(sp);
	pre();

	int h=0;

	while(k&&h<valid.size()){
		int num=valid[h].num;
		int rm=(num%n*E7%n)%n;
		rm=(n-rm)%n;
		if(rm>=E7)continue;

		REP(i,10){
			if(i==num%10)continue;
			if(num>10){
				if(num/10%10==num%10)continue;
				if(num/10%10>num%10 == num%10>i)continue;
			}
			int tmp=l[rm][i][num%10<i];
			if(tmp==-1)continue;
			if(valid[tmp].cnt>=k){
				get(num,tmp);
				return 0;
			}else k-=valid[tmp].cnt;
		}
		h++;
	}
	cout<<-1<<endl;
	return 0;
}
