#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<vector>
#define siz (int)(1e7)
#define LL long long
#define lim (LL)(1e14)
#define oo (1<<30)
#define TAT "%I64d"
using namespace std;
LL n,k; bool B[siz];
vector<LL> f[2][siz];
bool in(LL x,LL l,LL r){ return x>=l&&x<=r;}
int check(LL x)
{
	int i,a[20],len=0;
	for(;x;a[++len]=x%10,x/=10);
	for(i=2;i<len;i++)
		if(!((a[i]>a[i-1]&&a[i]>a[i+1])||(a[i]<a[i-1]&&a[i]<a[i+1])))
			return 0;
	if(len>1&&(a[1]==a[2]||a[len-1]==a[len])) return 0;
	return a[len]>a[len-1] ? 1 : 2;
}
void work1()
{
	LL i,v=k;
	for(i=n;i<=lim;i+=n)
		if(!(k-=(check(i)>0))) break;
	if(k) printf("-1");
	else printf(TAT,i);
	k=v;
}
int F(int x){ return x*10/siz;}
LL upper_count(vector<LL> &a,int x)
{
	int l=-1,r=a.size(),mid;
	while(r-l>1){
		mid=(l+r)>>1;
		if(F(a[mid])>x) r=mid;
		else l=mid;
	  }
	return a.size()-r;
}
LL lower_count(vector<LL> &a,int x)
{
	int l=-1,r=a.size(),mid;
	while(r-l>1){
		mid=(l+r)>>1;
		if(F(a[mid])<x) l=mid;
		else r=mid;
	  }
	return l+1;
}
void work2()
{
	int i,x;
	LL cnt,j,cnt1,cnt2;
	unsigned int p,q;
	for(i=1;i<siz;i++){
		j=check(i),B[i]=(j>0);
		if(!(k-=(j>0&&i%n==0))){ printf("%d",i); return ;}
		if(j&&in(i,siz/10,siz)) f[j-1][i%n].push_back(i);
		else if(j==1&&in(i,siz/100,siz)) f[1][i%n].push_back(i);
	  }
	for(i=0;i<n;i++){
		sort(f[0][i].begin(),f[0][i].end());
		sort(f[1][i].begin(),f[1][i].end());
	  }
	for(i=1;i<siz;i++){
		if(!B[i]) continue;
		((x=-1LL*i*siz%n)+=n)%=n;
		if(i<10){
			cnt1=upper_count(f[0][x],i%10);
			cnt2=lower_count(f[1][x],i%10);
			if(cnt1+cnt2<k) k-=cnt1+cnt2;
			else{
				for(p=f[0][x].size()-cnt1,q=0;;){
					if(q>=cnt2) j=f[0][x][p++];
					else if(p>=f[0][x].size()) j=f[1][x][q++];
					else if(f[0][x][p]<f[1][x][q]) j=f[0][x][p++];
					else j=f[1][x][q++];
					if(!(--k)){ printf(TAT,1LL*siz*i+j); return ;}
				  }
		    }
		  }
		else{
			if(i%10<i/10%10){
				cnt=upper_count(f[0][x],i%10);
				if(cnt<k) k-=cnt; else{ printf(TAT,1LL*siz*i+f[0][x][f[0][x].size()-cnt+k-1]); return ;}
			  }
			else{
				cnt=lower_count(f[1][x],i%10);
				if(cnt<k) k-=cnt; else{ printf(TAT,1LL*siz*i+f[1][x][k-1]); return ;}
			  }
		  }
	  }
	if(k) printf("-1");
	return ;
}
int main()
{
	scanf(TAT""TAT,&n,&k);
	if(n>=siz) work1();
	else work2();
	return 0;
}