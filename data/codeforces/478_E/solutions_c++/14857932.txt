//In the Name of God

#include<iostream>
#include<algorithm>
#include<vector>
#define int long long
#define mp make_pair
#define package pair<pair<int,int>,int>
#define pack(A,B,C) mp(mp(A,B),C)
#define NUM second
#define pb push_back

using namespace std;

const int maxn=10000000;
int n,k,ans=-1;
int dir[maxn],len[maxn];
vector<int> gw[8],wavy[8];
vector<package> w[8];

int d1,d2,d3;
inline void check(int x)
{
  len[x]=len[x/10]+1;
  d1=x%10;
  d2=(x/10)%10;
  if(x<100)
    {
      dir[x]=-(d2>d1)+(d1>d2);
      return;
    }
  d3=(x/100)%10;
  if(dir[x/10] and ((d1>d2 and d3>d2) or (d1<d2 and d3<d2)))
    dir[x]=dir[x/10];
}

inline void add(int x)
{
  if(dir[x]==0)
    return;
  wavy[len[x]].pb(x);
  w[len[x]].pb(pack(x%k,dir[x],x));
  if(x%k==0)
    gw[len[x]].pb(x);
}

int cnt,l1,l2,c,ld,dd,R,l,r;
int a[15][15],P[15];
inline int find(int L)
{
  if(L<=7)
    {
      cnt=gw[L].size();
      if(cnt>=n)
	return gw[L][n-1];
      n-=cnt;
      return -1;
    }
  l1=L/2,l2=L-l1;
  for(int i=0;i<wavy[l1].size();i++)
    {
      c=wavy[l1][i];
      ld=c%10;
      dd=dir[c];
      R=(k-(c*P[l2]%k))%k;
      if(l1&1)
	dd=-dd;
 
      if(dd==1)
	{
	  l=lower_bound(w[l2-1].begin(),w[l2-1].end(), pack(R,-dd,a[1][l2-1]) )-w[l2-1].begin();
	  r=lower_bound(w[l2-1].begin(),w[l2-1].end(), pack(R,-dd,a[10][l2-1]))-w[l2-1].begin();
	  cnt=r-l;
	  if(cnt>=n)
	    return c*P[l2]+w[l2-1][l+n-1].NUM;
	  n-=cnt;
	  
	  l=lower_bound(w[l2].begin(),w[l2].end(), pack(R,+dd,a[1][l2]) )-w[l2].begin();
	  r=lower_bound(w[l2].begin(),w[l2].end(), pack(R,+dd,a[ld][l2]))-w[l2].begin();
	  cnt=r-l;
	  if(cnt>=n)
	    return c*P[l2]+w[l2][l+n-1].NUM;
	  n-=cnt;
	}
      else
	{
	  l=lower_bound(w[l2].begin(),w[l2].end(), pack(R,+dd,a[ld+1][l2]))-w[l2].begin();
	  r=lower_bound(w[l2].begin(),w[l2].end(), pack(R,+dd,a[10][l2])  )-w[l2].begin();
	  cnt=r-l;
	  if(cnt>=n)
	    return c*P[l2]+w[l2][l+n-1].NUM;
	  n-=cnt;
	}
    }
  return -1;
}

main()
{
  ios_base::sync_with_stdio(0);cin.tie(0);
  cin>>k>>n;

  //precompute :

  for(int i=1;i<=10;i++)
    a[i][1]=i;
  for(int j=2;j<10;j++)
    for(int i=1;i<=10;i++)
      a[i][j]=a[i][j-1]*10;
  P[0]=1;
  for(int i=1;i<10;i++)
    P[i]=P[i-1]*10;
  
  for(int i=1;i<10;i++)
    len[i]=1;
  for(int i=10;i<10000000;i++)
    {
      check(i);
      add(i);
    }
  for(int i=1;i<=7;i++)
    sort(w[i].begin(),w[i].end());

  //search and find ans :

  if(k%100==0)
    {
      cout<<-1<<endl;
      return 0;
    }
  
  for(int i=1;i<10;i++)
    if(i%k==0)
      {
	if(n==1)
	  ans=i;
	n--;
      }

  for(int i=1;i<=14 and ans==-1;i++)
    ans=find(i);
  cout<<ans<<endl;
  return 0;
}
