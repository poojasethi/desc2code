#include <bits/stdc++.h>
#define SZ(X) ((int)(X).size())
#define ALL(X) (X).begin(), (X).end()
#define REP(I, N) for (int I = 0; I < (N); ++I)
#define REPP(I, A, B) for (int I = (A); I < (B); ++I)
#define RI(X) scanf("%d", &(X))
#define RII(X, Y) scanf("%d%d", &(X), &(Y))
#define RIII(X, Y, Z) scanf("%d%d%d", &(X), &(Y), &(Z))
#define DRI(X) int (X); scanf("%d", &X)
#define DRII(X, Y) int X, Y; scanf("%d%d", &X, &Y)
#define DRIII(X, Y, Z) int X, Y, Z; scanf("%d%d%d", &X, &Y, &Z)
#define RS(X) scanf("%s", (X))
#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define MP make_pair
#define PB push_back
#define MS0(X) memset((X), 0, sizeof((X)))
#define MS1(X) memset((X), -1, sizeof((X)))
#define LEN(X) strlen(X)
#define F first
#define S second
typedef long long LL;
using namespace std;
const int MOD = 1e9+7;
const int SIZE = 1e6+10;
vector<pair<int,int> >headd[10][2];
bitset<10000000>used;
int ad[10000000];
bool valid(LL x){
    int lt=x%10;
    x/=10;
    int flag=0;
    while(x){
        int tmp=x%10;
        x/=10;
        if(tmp<lt){
            if(flag==-1)return false;
            flag=-1;
        }
        else if(tmp>lt){
            if(flag==1)return false;
            flag=1;
        }
        else return false;
        lt=tmp;
    }
    return true;
}
int check(int st,LL N,int ud,LL& K,LL need){
    if(need>=10000000)return -1;
    int ker=lower_bound(ALL(headd[st][ud]),MP((int)need,0))-headd[st][ud].begin();
    int ker2=lower_bound(ALL(headd[st][ud]),MP((int)need+1,0))-headd[st][ud].begin();
    if(ker2-ker<K){
        K-=ker2-ker;
        return -1;
    }
    REPP(i,ker,SZ(headd[st][ud])){
        K--;
        if(K==0)return headd[st][ud][i].S;
    }
    return -1;
}
int main(){
    LL N,K;
    cin>>N>>K;
    if(N>(1e14+3)/K){
        puts("-1");
        return 0;
    }
    if(N>10000000){
        for(LL now=N;now<100000000000000LL;now+=N){
            if(valid(now)){
                K--;
                if(!K){
                    cout<<now<<endl;
                    return 0;
                }
            }
        }
        cout<<-1<<endl;
        return 0;
    }
    int tmp[8]={};
    REPP(i,1,10000000){
        tmp[0]++;
        int now=0;
        while(tmp[now]==10){
            tmp[now]=0;
            now++;
            tmp[now]++;
        }
        bool err=0;
        REPP(j,1,6){
            if((tmp[j]-tmp[j-1])*(tmp[j]-tmp[j+1])<=0){
                err=1;
                break;
            }
        }
        if(!err){
            headd[tmp[6]][(tmp[6]<tmp[5])?1:0].PB(MP(i%N,i));
        }
    }
    REP(i,10)REP(j,2)sort(ALL(headd[i][j]));
    for(LL now=1;now<10000000;now++){
        if((now/10)%10==now%10)continue;
        int ha=((now/10)%10)<(now%10)?1:-1;
        if(now<10||(used[now/10]&&(ad[now/10]!=ha))){
            if(now<10)ha=0;
            if(now%N==0){
                K--;
                if(K==0){
                    cout<<now<<endl;
                    return 0;
                }
            }
            ad[now]=ha;
            used[now]=1;
        }
    }
    REPP(i,1,10000000){
        if(used[i]){
            int tail=i%10;
            int flag=0;
            if(i>=10){
                if((i/10)%10<tail)flag=1;
                else flag=-1;
            }
            LL r=(i*10000000LL)%N;
            LL need=N-r;
            if(need==N)need=0;
            if(flag!=-1){
                REP(j,tail){
                    int res=check(j,N,1,K,need);
                    if(res>=0){
                        printf("%d%07d\n",i,res);
                        return 0;
                    }
                }
            }
            if(flag!=1)
                REPP(j,tail+1,10){
                    int res=check(j,N,0,K,need);
                    if(res>=0){
                        printf("%d%07d\n",i,res);
                        return 0;
                    }
                }
        }
    }
    puts("-1");
    return 0;
}
