#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

typedef vector<int> Vec;
typedef Vec::iterator Vi;

const int N = 1e5 + 6;
const int M = 302;

int a[N], b[N], n, m, s, e, t;
int f[N][M];

Vec v[N];

void upd(int &x, int y){if(!x || x>y) x=y;}

int main()
{
	
	scanf("%d%d%d%d", &n, &m, &s, &e), t = s/e;
	for(int i=1; i<=n; i++) scanf("%d", &a[i]);
	for(int i=1; i<=m; i++) scanf("%d", &b[i]), v[b[i]].push_back(i);

	f[1][0] = 1;
	for(int i=1; i<=n; i++) for(int j=0; j<t; j++) if(f[i][j])
	{
		// ok?
		Vi np = lower_bound(v[a[i]].begin(), v[a[i]].end(), f[i][j]);
		if(np!=v[a[i]].end()) upd(f[i+1][j+1], *np + 1);
		
		// skip.
		upd(f[i+1][j], f[i][j]);
	}
	
	int ans(0);
	for(int i=1; i<=n+1; i++) for(int j=1; j<=t; j++) if(f[i][j])
	{
		int cost = j * e + i-1 + f[i][j] - 1;
		if(cost > s) continue;
		ans = max(ans, j);
	}
	printf("%d\n", ans);
	
	return 0;
}
