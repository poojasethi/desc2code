#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
using namespace std;

const int N = (int) 1e5, TURN = 300, INF = (int) 2e9;
int a[N], b[N], f[TURN + 1], m, n, s, e;
vector<int> pos[N];

int main() {
	ios::sync_with_stdio(false);
	cin >> m >> n >> s >> e;
	for(int i = 0; i < m; ++i) cin >> a[i], --a[i];
	for(int i = 0; i < n; ++i) cin >> b[i], --b[i];
	for(int i = 0; i < n; ++i) pos[b[i]].push_back(i);
	for(int i = 0; i < N; ++i) pos[i].push_back(INF);
	memset(f, 0x3f, sizeof f); f[0] = -1;
	int res = 0;
	for(int i = 0; i < m; ++i)
		for(int j = s / e; j > 0; --j) {
			f[j] = min(f[j], *upper_bound(pos[a[i]].begin(), pos[a[i]].end(), f[j - 1]));
			if(i + f[j] + 2 + j * e <= s) res = max(res, j);
		}
	cout << res;
	return 0;
}
