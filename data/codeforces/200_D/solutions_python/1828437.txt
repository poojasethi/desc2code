import re

def parse_void(s):
  s = s.replace(' ','')
  EXP = 'void(?P<name>\w+?)\((?P<params>.*?)\)'
  info = re.match(EXP, s).groupdict()
  info['params'] = info['params'].split(',')
  return info

def parse_var(s):
  ss = s.split()
  return {'type': ss[0], 'name': ss[1]}

def calc(s):
  s = s.replace(' ','')
  EXP = '(?P<name>\w+?)\((?P<params>.*?)\)'
  info = re.match(EXP, s).groupdict()
  info['params'] = info['params'].split(',')
  global voidbank
  global varbank
  ans = 0
  try:
    for void in voidbank[info['name']]:
      if len(void) != len(info['params']):
        continue
      ch = False
      for i in range(len(void)):
        v1 = info['params'][i]
        t2 = void[i]
        t1 = varbank[v1]
        if (t2 != 'T') and (t1 != t2):
          ch = True
      if not ch:
        ans += 1
  except:
    pass
  return ans

n = int(raw_input())
voidbank = dict()
for l in xrange(n):
  ll = parse_void(raw_input())
  if ll['name'] in voidbank:
    voidbank[ll['name']].append(ll['params'])
  else:
    voidbank[ll['name']] = [ll['params']]


n = int(raw_input())
varbank = dict()
for l in xrange(n):
  ln = raw_input()
  ll = parse_var(ln)
  varbank[ll['name']] = ll['type']

n = int(raw_input())
for i in xrange(n):
  print(calc(raw_input()))
