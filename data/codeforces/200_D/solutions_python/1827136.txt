import re

funcmap = {}
varmap = {}

def corrct(a, b):
    if len(a) != len(b):
	return False
    for i in range(len(a)):
	if a[i]==b[i] or a[i]=='T':
	    tmp = 0
	else:
	    return False
    return True

def parse(s):
    lis = re.compile("\W").split(s)
    ret = []
    for i in lis:
	if i!='':
	    ret.append(i)
    return ret

n = raw_input()
n = int(n)
while n>0:
    n-=1
    lin = raw_input()
    parsed = parse(lin)
    fname = parsed[1]
    attri = []
    for i in range(2, len(parsed)):
	attri.append(parsed[i])
    if funcmap.__contains__(fname):
	val = funcmap[fname]
	val.append(attri)
    else:
	funcmap[fname] = [attri]

m = raw_input()
m = int(m)
while m>0:
    m-=1
    lin = raw_input()
    parsed = parse(lin)
    varmap[parsed[1]] = parsed[0]

z = raw_input()
z = int(z)
while z>0:
    z-=1
    lin = raw_input()
    parsed = parse(lin)
    fname = parsed[0]
    vari = parsed[1:]
    for i in range(len(vari)):
	vari[i] = varmap[vari[i]]
    if not funcmap.__contains__(fname):
	print 0
	continue
    match = funcmap[fname]
    ans = 0
    for i in match:
	if corrct(i, vari):
	    ans += 1
    print ans
