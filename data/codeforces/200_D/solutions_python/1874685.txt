import re
define = re.compile(r'void\s+([^\s\(]+)\s*\(([^)]*)\)')
call = re.compile(r'([^\s\(]+)\s*\(([^)]*)\)')

n = int(raw_input())
procs = {}
for i in xrange(n):
    line = raw_input().strip()
    m = define.match(line)
    name = m.group(1)
    if name not in procs:
        procs[name] = []
    procs[name].append([s.strip() for s in m.group(2).split(',')])

m = int(raw_input())
vars = {}
for i in xrange(m):
    type, name = [s for s in raw_input().strip().split()]
    vars[name] = type

k = int(raw_input())
matches = []
for i in xrange(k):
    line = raw_input().strip()
    m = call.match(line)
    name = m.group(1)
    args = [s.strip() for s in m.group(2).split(',')]
    if name in procs:
        ct = 0
        for proc in (proc for proc in procs[name] if len(proc) == len(args)):
            for i, arg in enumerate(args):
                if not (proc[i] == vars[arg] or proc[i] == 'T'):
                    break
            else:
                ct += 1
        matches.append(ct)
    else:
        matches.append(0)

for i in matches:
    print i

