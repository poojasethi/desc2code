#!/usr/bin/python

import re

def find_match(procs, call):
    ans = 0
    for proc in procs:
        if(len(call) != len(proc)):
            continue
        if(call[0] != proc[0]):
            continue
        nt = False
        for i in range(len(call)):
            if call[i] != proc[i] and proc[i] != 'T':
                nt = True
                break
        if nt == False:
            ans += 1
    return ans

def main():
    n = raw_input()
    n = int(n)
    procs = []
    for i in range(n):
        inp = raw_input()
        m = re.search(r'\s*void\s*(\w+)\s*\((.*)\)\s*', inp)
        temp = []
        temp.append(m.group(1))  # the name of the func, now all the args in sequence
        args = m.group(2)
        args = args.split(',')
        for arg in args:
            temp.append( arg.strip())
        procs.append(temp)
    m = raw_input()
    m = int(m)
    var = {}
    for i in range(m):
        inp = raw_input()
        inp = inp.split()
        var[inp[1].strip()] = inp[0].strip()
    k = raw_input()
    k = int(k)
    for i in range(k):
        inp = raw_input()
        m = re.search(r'\s*(\w+)\s*\((.*)\)\s*' ,inp)
        temp = []
        temp.append(m.group(1))
        args = m.group(2)
        args = args.split(',')
        for arg in args:
            karg = arg.strip()
            if karg in var:
                karg = var[karg]
            else:
                karg = '-1'
            temp.append(karg)
        num = find_match(procs, temp)
        print num

if __name__ == '__main__':
    main()
