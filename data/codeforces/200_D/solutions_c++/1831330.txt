#include <iostream>
#include <sstream>
#include <cstring>
#include <string>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <bitset>
#include <vector>
#include <stack>
#include <list>
#include <utility>
#include <queue>
#include <set>
#include <map>
using namespace std;
bool valid(char c)
{
	return isupper(c) || islower(c) || isdigit(c);
}
vector< vector<string> > func;
map<string, string> var;
bool ok(vector<string> &fun, vector<string> &call)
{
	if(fun.size() != call.size() || fun[0] != call[0]) return false;
	for(int i = 1; i < fun.size(); i++)
		if(fun[i] != "T" && fun[i] != var[call[i]])
			return false;
	return true;
}
int main() 
{
	int n, m;
	int i, j, k;
	cin >> n; cin.ignore();
	for(i = 0; i < n; i++) {
		string s;
		getline(cin, s);
		int p = 0;
		vector<string> v;
		while(p < s.length()) {
			while(p < s.length() && !valid(s[p])) p++;
			if(p == s.length()) break;
			int q = p+1;
			while(valid(s[q])) q++;
			v.push_back(s.substr(p,q-p));
			p = q;
		}
		v.erase(v.begin());
		func.push_back(v);
	}
	cin >> k; cin.ignore();
	for(i = 0; i < k; i++) {
		string s, type, va;
		getline(cin, s);
		stringstream ss(s);
		ss >> type >> va;
		var[va] = type;
	}
	cin >> m; cin.ignore();
	for(i = 0; i < m; i++) {
		string s;
		getline(cin, s);
		vector<string> v;
		int p = 0;
		while(p < s.length()) {
			while(p < s.length() && !valid(s[p])) p++;
			if(p == s.length()) break;
			int q = p+1;
			while(valid(s[q])) q++;
			v.push_back(s.substr(p,q-p));
			p = q;
		}
		int ans = 0;
        for(j = 0; j < n; j++)
			if(ok(func[j], v)) ans++;
		cout << ans << endl;
	}
	return 0;
}
