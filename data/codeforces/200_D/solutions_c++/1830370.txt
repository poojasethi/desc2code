#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <deque>
#include <algorithm>
#include <map>

using namespace std;

//#define cin fin
//#define cout fout

//ifstream fin("d.in");
//ofstream fout("d.out");

map<string, string> types;

struct func{
    string name;
    vector<string> args;
    
    bool pos(func f){
        if (f.name != this->name)
            return 0;
        if (f.args.size() != this->args.size())
            return 0;
        for (int i = 0; i < this->args.size(); ++i)
            if (types[f.args[i]] != this->args[i])
                if (this->args[i] != "T")
                    return 0;
        return 1;
    }
};

pair<string, char> get(){
    char c;
    pair<string, char> res;
    for (cin >> c; !(c == '(' || c == ')' || c == ','); cin >> c){
        res.first.push_back(c);
    }
    res.second = c;
    return res;    
}    

int main(){
    int n;
    cin >> n;
    vector<func> funcs(n);

    
    for (int i = 0; i < n; ++i){
        string s; 
        cin >> s;
        pair<string, char> name = get();
        funcs[i].name = name.first;

        while (name.second != ')'){
            name = get();
            funcs[i].args.push_back(name.first);
        }
    }  

    int m;
    cin >> m;
    for (int i = 0; i < m; ++i){
        string type, name;
        cin >> type >> name;
        types[name] = type;
    }
    
    int k;
    cin >> k;
    for (int i = 0; i < k; ++i){
        func f;
        pair<string, char> name = get();
        f.name = name.first;
        
        while (name.second != ')'){
            name = get();
            f.args.push_back(name.first);
        }
        
        int res = 0;
        for (int j = 0; j < funcs.size(); ++j)
            if (funcs[j].pos(f))
                ++res;
        cout << res << endl;
    }
    
    
    return 0;
}
