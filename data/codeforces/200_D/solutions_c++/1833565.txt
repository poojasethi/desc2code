#include <cstdio>
#include <sstream>
#include <iostream>

#include <set>
#include <map>
#include <queue>
#include <deque>
#include <vector>
#include <string>
#include <cstring>

#include <ctime>
#include <cmath>
#include <cstdlib>
#include <algorithm>
using namespace std;

#define REP(i,n) for (int i = 0; i < (n); ++i)
#define REPI(i,c) for (typeof(c.begin()) i = c.begin(); i != c.end(); ++i)
#define ALL(c) c.begin(), c.end()
#define SZ(x) ((int)(x).size())

#define MP make_pair
#define FF first
#define SS second

#define DB(x) cout << #x << " = " << x << endl;

typedef long long int64;
typedef unsigned long long uint64;
typedef pair<int, int> pii;
typedef vector<int> vi;

const int MAX = 1010;

int N, V, C;
vector<string> f[MAX];
map<string, string> type;

void parse(vector<string> &f, bool ignore)
{
	string l = "";
	string s = "";

	if (ignore) cin >> s;
	while (!SZ(l)) getline(cin, l);

	s = "";
	int n = SZ(l);
	REP(i, n)
	{
		if (l[i] == ' ' || l[i] == '\t') continue;

		if (l[i] == '(' || l[i] == ')' || l[i] == ',')
			 f.push_back(s), s = "";
		else s += l[i];
	}
}

int ok(vector<string> &call, vector<string> &def)
{
	if (SZ(call) != SZ(def)) return 0;
	if (call[0] != def[0]) return 0;

	int n = SZ(call);
	for (int k = 1; k < n; ++k)
		if (def[k] != "T" && type[ call[k] ] != def[k])
			return 0;

	return 1;
}

int main()
{
	cin >> N;
	REP(i, N) parse(f[i], true);

	cin >> V;
	REP(i, V)
	{
		string t, n;
		cin >> t >> n;
		type[n] = t;
	}

	cin >> C;
	REP(i, C)
	{
		vector<string> c;
		parse(c, false);

		int ans = 0;
		REP(j, N)
			ans += ok(c, f[j]);

		cout << ans << '\n';
	}

    return 0;
}// (++UH)++ :: agarwaen
