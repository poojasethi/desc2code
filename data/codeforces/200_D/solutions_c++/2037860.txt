#include <cstdio>
#include <cstring>

const int maxl = 105;
const int maxk = 10;
const int maxn = 1005;

struct node {
    char name[maxl], list[maxk][maxl];
    int n;
} proc[maxn], now;
char var[2][maxn][maxl], s[maxl];
int n, m, k;

void solve_proc(char *s, int x) {
    char *p = strtok(s, "() ,");
    p = strtok(NULL, "() ,");
    strcpy(proc[x].name, p);
    p = strtok(NULL, "() ,");
    while (p != NULL) {
        strcpy(proc[x].list[proc[x].n++], p);
        p = strtok(NULL, "() ,");
    }
}

void getvar(char *p, int x) {
    for (int i = 0; i < m; ++ i) {
        if (!strcmp(p, var[1][i])) {
            strcpy(now.list[x], var[0][i]);
            break;
        }
    }
}

void solve_call(char *s) {
    char *p = strtok(s, "() ,");
    strcpy(now.name, p);
    now.n = 0;
    p = strtok(NULL, "() ,");
    while (p != NULL) {
        getvar(p, now.n++);
        p = strtok(NULL, "() ,");
    }
}

int check(int x) {
    if (strcmp(now.name, proc[x].name)) return 0;
    if (now.n != proc[x].n) return 0;
    for (int i = 0; i < now.n; ++ i) {
        if (proc[x].list[i][0] == 'T') continue;
        if (strcmp(now.list[i], proc[x].list[i])) return 0;
    }
    return 1;
}

void init() {
    scanf("%d", &n);
    gets(s);
    for (int i = 0; i < n; ++ i) {
        gets(s);
        solve_proc(s, i);
    }
    scanf("%d", &m);
    for (int i = 0; i < m; ++ i) scanf("%s%s", var[0][i], var[1][i]);
}

void work() {
    scanf("%d", &k);
    gets(s);
    for (int i = 0; i < k; ++ i) {
        gets(s);
        solve_call(s);
        int tot = 0;
        for (int j = 0; j < n; ++ j) tot += check(j);
        printf("%d\n", tot);
    }
}

int main() {
    init();
    work();
    return 0;
}
