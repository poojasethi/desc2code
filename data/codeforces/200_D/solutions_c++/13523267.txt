#include<bits/stdc++.h>
using namespace std;
map<string, string> vars;
struct Procedure{
	string name;
	vector<string> params;
	int nparams;
	Procedure(){}
	Procedure(string raw, int useTypes = 0){
		vector<string> tokens;
		string curr = "";
		for(int i = 0; i<raw.size(); i++){
			char c = raw[i];
			if(isspace(c)||c=='('||c==')'||c==',') {
				if(curr.size() >0){
					tokens.push_back(curr);
					curr = "";
				}
				continue;
			}
			curr+=c;
		}
		int offset = useTypes;
		name = tokens[1-useTypes];
		vector<string> tmp;
		for(int i = 2-useTypes; i<tokens.size(); i++){
			if(!useTypes)tmp.push_back(tokens[i]);
			else tmp.push_back(vars[tokens[i]]);
		}
		nparams = tmp.size();
		params = tmp;
	}
	void report(){
		cout<<"void "<<name<<": ("<<nparams<<" parameters)"<<endl;
		for(int i = 0; i < nparams; i++) cout<<params[i]<<endl;
	}
	friend bool operator==(Procedure a, Procedure b){
		if(a.name == b.name && a.nparams == b.nparams){
			for(int i = 0; i<a.nparams; i++){
				if(a.params[i] != b.params[i]){
					if(a.params[i] == "T" || b.params[i] =="T") continue;
					return false;
				}
			}
			return true;
		}
		return false;
	}
};
vector<Procedure> program;
int nprocedures;
int nvars;
int ncalls;
string buf;
int main(){
	cin>>nprocedures;
	getline(cin, buf);
	for(int i = 0; i<nprocedures; i++){
		getline(cin, buf);
		Procedure p(buf);
		//p.report();
		program.push_back(p);
	}
	cin>>nvars;
	getline(cin, buf);
	for(int i = 0; i<nvars; i++){
		string type, name;
		cin>>type>>name;
		vars[name] = type;
	}
	cin>>ncalls;
	getline(cin, buf);
	for(int i = 0; i<ncalls; i++){
		getline(cin, buf);
		Procedure p(buf,1);
		//p.report();
		int ans = 0;
		for(int j= 0; j<nprocedures; j++){
			if(p==program[j]) ans++;
		}
		cout<<ans<<endl;
	}
	return 0;
}