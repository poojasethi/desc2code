#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;
const int N = 500;

map<string, int> id;
map<string, vector<vector<int> > > function;

string _f[] = {"T", "int", "double", "string"};

int t, n, m;
char buf[N];

bool equal(const vector<int>& a, const vector<int>& b) {
	if (a.size() != b.size()) return false;
	for (int i = 0; i < a.size(); ++i) {
		if (a[i] == 1) continue;
		if (b[i] == 1) continue;
		if (a[i] != b[i]) return false;
	}
	return true;
}

int main() {
	for (int i = 0; i < 4; ++i)
		id[_f[i]] = i + 1;
	
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> t; cin.getline(buf, N);
	while (t--) {
		cin.getline(buf, N);
		int i;
		bool vo = 0;
		for (i = 0; buf[i]; ++i) {
			if (buf[i] == 'v') {
				vo = 1;
			}
			if (buf[i] == ' ' && vo) break;
		}
		char *functionName = strtok(buf + i, "(,) ");
		vector<int> v;
		for (char *p = strtok(NULL, "(,) "); p; p = strtok(NULL, "(,) "))
			v.push_back(id[p]);
		function[functionName].push_back(v);
	}
	cin >> n; cin.getline(buf, N);
	while (n--) {
		cin.getline(buf, N);
		char *p = strtok(buf, " ");
		int I = id[p];
		while (p = strtok(NULL, " "))
			id[p] = I;
	}
	cin >> m; cin.getline(buf, N);
	while (m--) {
		cin.getline(buf, N);
		char *functionName = strtok(buf, "(,) ");
		if (function.count(functionName) == 0) {
			cout << "0\n";
			continue;
		}
		vector<int> v;
		for (char *p = strtok(NULL, "(,) "); p; p = strtok(NULL, "(,) "))
			v.push_back(id[p]);
		vector<vector<int> >& u = function[functionName];
		int c = 0;
		for (int i = 0; i < u.size(); ++i)
			if (equal(u[i], v)) c++;
		cout << c << '\n';
	}
	cout << flush;
}
