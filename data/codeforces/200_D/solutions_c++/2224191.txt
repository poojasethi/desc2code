#include<cstdio>
#include<map>
#include<vector>
#include<sstream>
#include<string>
#include<iostream>
using namespace std;
struct Function
{
  string name;
  vector<string> par;
  bool match(string fn,const vector<string> & p);
};
string ty[3];

int main()
{
    ty[0]="int";ty[1]="double";ty[2]="string";
    int n,v,q;
     map<string,int> M;
      string str;
       string fn;
    cin>>n; cin.get();
    struct Function f[n];
    for(int i = 0 ;i < n ; i++)
    {
        getline(cin,str); // strip (,)
        for(int i = 0 ;i < str.length() ; i++)
        if(str[i]==',' || str[i]=='(' || str[i]==')')str[i] = ' ';
        istringstream icin(str);
        icin>>str;
        icin>>fn;

        vector<string> par;
         while(icin>>str)
            par.push_back(str);
        f[i].name = fn; f[i].par= par;
    }
    cin>>v;
    map<string,string> nameToType;
    for(int i= 0 ;i < v;i++)
    {
        string ty,var;
        cin>>ty>>var;
        nameToType[var]=ty;
    }
    cin>>q; cin.get();
    while(q--)
    {
        getline(cin,str);
        for(int i = 0 ;i < str.length();  i++)
            if(str[i]=='(' || str[i]==')' || str[i]==',')
                str[i] = ' ';
        istringstream icin(str);
        string name;
        vector<string> p;
        icin>>name;

        while(icin>>str)
        {
            p.push_back(nameToType[str]);
        }
        int ret = 0;
        for(int i = 0 ;i < n ; i++)
        {
            if(f[i].match(name,p))ret++;
        }
        cout<<ret<<endl;
    }

}
bool Function::match(string fn,const vector<string> & p)
{
    if(name !=fn)return false;
    if(par.size()!=p.size())return false;
    bool mat = true;
    for(int i = 0 ;i < par.size(); i++)
    {
        if(par[i]!=p[i] && par[i]!="T")mat = false;
    }
    return mat;
}
