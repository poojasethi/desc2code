#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <map>
using namespace std;

vector< vector<string> > function;
char buff[128];
string input()
{
    gets(buff);
    string s = buff;
    return s;
}
int inputInt()
{
    string s = input();
    return atoi(s.c_str());
}
vector<string> inputVStr()
{
    string inp = input();
    for (int i = 0; i < inp.size(); i++) if (inp[i] == '(' || inp[i] == ',' || inp[i] == ')') inp[i] = ' ';
    istringstream ss(inp);
    vector<string> vs;
    string str;
    while (ss>>str) vs.push_back(str);
    return vs;
}

int n, m, k;

void readFunctions()
{
    n = inputInt();
    for (int i = 0; i < n; i++)
    {
        vector<string> func = inputVStr();
        function.push_back(func);
    }
}

map <string, string> varToType;
void readVariables()
{
    m = inputInt();
    for (int i = 0; i < m; i++)
    {
        vector<string> var = inputVStr();
        varToType[var[1]] = var[0];
    }
}

bool check(vector<string>& call, int idx)
{
    if (function[idx][1] != call[0]) return false;
    if (call.size() + 1 != function[idx].size()) return false;
    for (int i = 1; i < function[idx].size() - 1; i++) if (function[idx][i + 1] != "T" && function[idx][i + 1] != varToType[call[i]]) return false;
    return true;
}

int main ()
{
    //  freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    readFunctions();
    readVariables();
    k = inputInt();
    for (int i = 0; i < k; i++)
    {
        int ans = 0;
        vector<string> call = inputVStr();
        for (int j = 0; j < n; j++)
            if (check(call, j)) ans++;
        cout<<ans<<endl;
    }
    return 0;
}