dpL = [-1 for i in range(100005)]
dpR = [-1 for i in range(100005)]
dpbackL = [-1 for i in range(100005)]
dpbackR = [-1 for i in range(100005)]
global ip
N = input()
ip = map(int,raw_input().split())
x = N-1
for x in range(N-1,-1,-1) :
	if (x == N-1) :
		dpbackR[x] = 0
		continue
	if (ip[x] <= 1):
		dpbackR[x] = 0
		continue
	if (ip[x] % 2 == 0):
		dpbackR[x] = ip[x]
	else :
		dpbackR[x] = ip[x]-1
	dpbackR[x] = dpbackR[x] + dpbackR[x+1]
for x in range(N-1,-1,-1):
	if (x == N-1) :
		dpR[x] = 0
		continue
	if (ip[x] % 2 == 0):
		dpR[x] = ip[x] - 1
	else:
		dpR[x] = ip[x]
	dpR[x] = max(dpR[x] + dpR[x+1],dpbackR[x])
	
for x in range(N) :
	if (x == 0) :
		dpbackL[x] = 0
		continue
	if (ip[x-1] <= 1):
		dpbackL[x] = 0
		continue
	if (ip[x-1] % 2 == 0):
		dpbackL[x] = ip[x-1]
	else :
		dpbackL[x] = ip[x-1]-1
	dpbackL[x] = dpbackL[x] + dpbackL[x-1]
for x in range(N) :
	if (x == 0):
		dpL[x] = 0
		continue
	if (ip[x-1] % 2 == 0):
		dpL[x] = ip[x-1] - 1
	else :
		dpL[x] = ip[x-1]
	dpL[x] = max(dpL[x] + dpL[x-1], dpbackL[x])

best = 0
for i in range (N):
	best = max(best, dpbackL[i] + max(dpbackR[i],dpR[i]))
	best = max(best, dpbackR[i] + max(dpbackL[i],dpL[i]))
print best

'''
def FBR(x):
	if (x == N-1) :
		return 0
	if (ip[x] <= 1) :
		return 0
	if (dpbackR[x] != -1):
		return dpbackR[x]
	if (ip[x] % 2 == 0):
		dpbackR[x] = ip[x]
	else :
		dpbackR[x] = ip[x]-1
	dpbackR[x] = dpbackR[x] + FBR(x+1)
	return dpbackR[x]

def FBL(x):
	if (x == 0) :
		return 0
	if (ip[x-1] <= 1) : 
		return 0
	if (dpbackL[x] != -1):
		return dpbackL[x]
	if (ip[x-1] % 2 == 0):
		dpbackL[x] = ip[x-1]
	else :
		dpbackL[x] = ip[x-1]-1
	dpbackL[x] = dpbackL[x] + FBL(x-1)
	return dpbackL[x]

def FR(x):
	if (x == N-1) :
		return 0
	if (dpR[x] != -1):
		return dpR[x]
	if (ip[x] % 2 == 0):
		dpR[x] = ip[x] - 1
	else:
		dpR[x] = ip[x]
	dpR[x] = max(dpR[x] + FR(x+1),FBR(x))
	return dpR[x]

def FL(x):
	if (x == 0) :
		return 0
	if (dpL[x] != -1) :
		return dpL[x]
	if (ip[x-1] % 2 == 0) :
		dpL[x] = ip[x-1] - 1
	else :
		dpL[x] = ip[x-1]
	dpL[x] = max(dpL[x] + FL(x-1), FBL(x))
	return dpL[x]

'''