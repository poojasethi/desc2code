//
#include <bits/stdc++.h>
using namespace std;

const int  INF = std::numeric_limits<int>::max()/3;

#define MEM(arr,val)memset((arr),(val), sizeof (arr))
#define PI (acos(0)*2.0)
#define eps (1.0e-9)
#define are_equal(a,b)fabs((a)-(b))<eps
#define abs_val(a)((a)>=0)?(a):(-(a))
#define LS(b)(b&(-(b))) // Least significant bit
#define DEG_to_RAD(a)(((a)*PI)/180.0) // convert to radians
#define FASTER ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)

typedef long long ll;
typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<ll> lvi;
typedef vector<ii> vii;

ll gcd(ll a,ll b){return b == 0 ? a : gcd(b,a%b);}
ll lcm(ll a,ll b){return a*(b/gcd(a,b));}

/**
 * __builtin_popcount(int d) // count bits
 * strtol(s, &end, base); // convert base number
 */
//----------------------------------------------------------------------//
#define S second
#define F first
lvi c1,c2,c3;
vii w,h;
vi wp, hp, C;
ll dp[30100];
int n,q;
ll max(ll a, ll b){
    return a >b ? a : b;
}
ll min(ll a, ll b){
    return a < b ? a : b;
}

void pre(int i){
    c1[i] = -1e18;
    c2[i] = -1e18;
    c3[i] = -1e18;

    if(C[w[i].S] != h[i].S){
        c1[i] = h[i].F *1ll* w[i].F;
    }
    if(i<n-1 && C[w[i].S] != h[i+1].S && C[w[i+1].S] != h[i].S){
        c2[i] = w[i].F * 1ll* h[i+1].F + w[i+1].F * 1ll* h[i].F;
    }
    if(i < n-2 && C[w[i].S] != h[i+2].S && C[w[i+1].S] != h[i].S  && C[w[i+2].S] != h[i+1].S){
        c3[i] = w[i].F * 1ll *  h[i+2].F + w[i+1].F * 1ll*  h[i].F + w[i+2].F * 1ll* h[i+1].F ;
    }
    if(i < n-2 && C[w[i+2].S] != h[i].S && C[w[i+1].S] != h[i+2].S  && C[w[i].S] != h[i+1].S){
        ll tmp = w[i+2].F * 1ll* h[i].F + w[i+1].F * 1ll* h[i+2].F + w[i].F * 1ll* h[i+1].F ;
        c3[i] = max(c3[i], tmp);
    }
}

void swap(int& a, int& b){
    int t = a;
    a = b;
    b = t;
}

int main(){
    FASTER;


    scanf("%d %d\n", &n,&q);
    wp.assign(n,-1);
    hp.assign(n,-1);
    C.assign(n,-1);
    c1.assign(n,-1);
    c2.assign(n,-1);
    c3.assign(n,-1);
    for (int i = 0; i < n; ++i) {
        int c;
        scanf("%d",&c);
        w.push_back(ii(c,i));
    }
    for (int i = 0; i < n; ++i) {
        int c;
        scanf("%d",&c);
        h.push_back(ii(c,i));
    }

    sort(w.begin(),w.end());
    sort(h.begin(),h.end());

    for (int i = 0; i < n; ++i) {
        wp[w[i].S] = i;
        hp[h[i].S] = i;
    }
//  }
    for (int i = 0; i < n; ++i) {
        C[i] = i;
    }

    for (int i = 0; i < n; ++i) {
        pre(i);
    }

    for (int o = 0; o < q; ++o) {
        int a ,b;
        scanf("%d%d",&a,&b);
        a--,b--;
        swap(C[a],C[b]);

//      printf("c1\tc2\tc3\n");
//      for (int i = max(0,wp[a]-6); i < min(n,wp[b]+6); ++i) {
//          pre(i);
//      }
//      for (int i = max(0,wp[b]-6); i < min(n,wp[a]+6); ++i) {
//          pre(i);
//      }
        for (int i = max(0,wp[a]-6); i < min(n,wp[a]+6); ++i) {
            pre(i);
        }
        for (int i = max(0,wp[b]-6); i < min(n,wp[b]+6); ++i) {
            pre(i);
        }
//      for (int i = 0; i < n; ++i) {
//          pre(i);
//          printf("%lld\t%lld\t%lld\n",
//                  c1[i] < 0 ? -1 : c1[i],
//                  c2[i] < 0 ? -1 : c2[i],
//                  c3[i] < 0 ? -1 : c3[i]);
//      }

        for (int i = 0; i <= n; ++i)
            dp[i] = -1e18;
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
//          if(o == 11)
//          printf("C[%d] = %lld\n", i, C[i]);
            dp[i+1] = max(dp[i+1], c1[i] + dp[i]);
            dp[i+2] = max(dp[i+2], c2[i] + dp[i]);
            dp[i+3] = max(dp[i+3], c3[i] + dp[i]);

        }
//      if(o == 11){
//          for (int i = 0; i <= n+1; ++i) {
//              printf("dp[%d] = %lld\n", i, dp[i]);
//          }
//      }
        printf("%lld\n",dp[n]);
//      cout << dp[n] << endl;
    }

    return 0;
}
