#include<iostream>
#include<cstring>
#include<string>
#include<cstdio>
#include<stdio.h>
#include<algorithm>
#include<cmath>
#include<map>
#include<queue>
#include<bitset>
#include<stack>
using namespace std;


#pragma comment(linker, "/STACK:1024000000,1024000000")
#define inf 0x3f3f3f3f
#define eps 1e-9
#define pii pair<int,int>
#define MP make_pair
#define LL  long long
#define ULL unsigned long long 
#define N ( 200000 + 10 )
#define M ( 200000 + 10)
#define mod  1000000007

struct node {
	int x, id;
	bool operator < (const node & ot) const {
		return x > ot.x;
	}

}w[N], h[N];
int idh[N];
LL dp[N];
LL add[N][3];

LL Max(LL a, LL b) {
	return a < b ? b : a;
}

void update(int i) {
	add[i][0] = add[i][1] = add[i][2] = -inf;
	if(w[i].id != h[i].id)
		add[i][0] = (LL)w[i].x * h[i].x;
	if(i-1 >= 1 && w[i].id != h[i-1].id && w[i-1].id != h[i].id)
		add[i][1] = (LL)w[i].x * h[i-1].x + (LL)w[i-1].x * h[i].x;
	if(i-2 >= 1 && w[i].id != h[i-1].id && w[i-1].id != h[i-2].id && w[i-2].id != h[i].id) 
		add[i][2] = (LL)w[i].x * h[i-1].x + (LL)w[i-1].x * h[i-2].x + (LL)w[i-2].x * h[i].x;
	if(i-2 >= 1 && w[i].id != h[i-2].id && w[i-1].id != h[i].id && w[i-2].id != h[i-1].id)
		add[i][2] = Max(add[i][2], (LL)w[i].x * h[i-2].x + (LL)w[i-1].x * h[i].x + (LL) w[i-2].x * h[i-1].x);
}

int main() {
	int n ,m;
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; ++i)
	{
		int x;
		scanf("%d", &x);
		w[i].x = x; w[i].id= i;
	}
	for(int i = 1; i <= n; ++i) {
		int x;
		scanf("%d", &x);
		h[i].x = x, h[i].id = i;
	}
	sort(w+1, w +n +1);
	sort(h+1, h+n+1);

	for(int i = 1; i <= n; ++i)
		idh[h[i].id] = i;

	for(int i = 1; i <= n; ++i)
		update(i);
	
	int a, b;
	for(int i = 0; i < m; ++i){ 
		scanf("%d%d", &a, &b);
		int u = idh[a], v = idh[b];
		swap(h[u].id, h[v].id);
		idh[a] = v, idh[b] = u;
		for(int i = u; i <= min(n, u + 2); ++i)
			update(i);
		for(int i = v; i <= min(n, v + 2); ++i)
			update(i);
		for(int i = 1; i <= n; ++i) {
			dp[i] = -inf;
			dp[i] = Max(dp[i], dp[i-1] + add[i][0]);
			dp[i] = Max(dp[i], dp[i-2] + add[i][1]);
			dp[i] = Max(dp[i], dp[i-3] + add[i][2]);
		}
		printf("%I64d\n", dp[n]);
	}
}
