#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <set>
#include <utility>
#include <vector>
#include <queue>
#include <map>
using namespace std;

const int maxn = 50000 + 10;
int n, q;
pair<int, int> w[maxn], h[maxn];
int per[maxn];
typedef long long ll;
const ll inf = 1ll << 63;
ll v1[maxn], v2[maxn], v31[maxn], v32[maxn], dp[maxn];
void upd(ll &x, ll y)  {
    if (y > x) x = y;
}
int main()  {
    scanf("%d%d", &n, &q);
    for (int i = 1; i <= n; i ++)
        scanf("%d", &w[i].first), w[i].second = i;
    for (int i = 1; i <= n; i ++)
        scanf("%d", &h[i].first), h[i].second = i;
    sort(w + 1, w + 1 + n);
    sort(h + 1, h + 1 + n);
    for (int i = 1; i <= n; i ++)  {
        v1[i] = 1ll * w[i].first * h[i].first;
        if (i >= 2)  {
            v2[i] = 1ll * w[i].first * h[i - 1].first + 1ll * w[i - 1].first * h[i].first;
        }
        if (i >= 3)  {
            v31[i] = 1ll * w[i].first * h[i - 2].first + 1ll * w[i - 1].first * h[i].first + 1ll * w[i - 2].first * h[i - 1].first;
            v32[i] = 1ll * w[i].first * h[i - 1].first + 1ll * w[i - 1].first * h[i - 2].first + 1ll * w[i - 2].first * h[i].first;
        }
    }
    for (int i = 1; i <= n; i ++)
        per[i] = i;

    while (q --)  {
        int a, b;
        scanf("%d%d", &a, &b);
        swap(per[a], per[b]);
        //dp
        dp[0] = 0;
        for (int i = 1; i <= n; i ++)  {
            dp[i] = -inf;
            if (per[w[i].second] != h[i].second)
                upd(dp[i], dp[i - 1] + v1[i]);
            if (i>=2)
            //if (per[w[i].second] != h[i - 1].second && per[w[i - 1].second] != h[i].second)  
                  upd(dp[i], dp[i - 2] + v2[i]);
            if( i>=3)
            //if (per[w[i].second] != h[i - 2].second && per[w[i - 1].second] != h[i].second && per[w[i - 2].second] != h[i - 1].second) 
                    if (i >= 3)upd(dp[i], dp[i - 3] + v31[i]);
            if (i>=3)
            //if (per[w[i].second] != h[i - 1].second && per[w[i - 1].second] != h[i - 2].second && per[w[i - 2].second] != h[i].second)
                    upd(dp[i], dp[i - 3] + v32[i]);
        }
        cout << dp[n] << endl;
    }
    return 0;
}