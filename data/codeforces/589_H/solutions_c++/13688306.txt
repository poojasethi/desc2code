#include<bits/stdc++.h>
using namespace std;
const int N=50050,M=200200;
int n,m,k,one[N]={},ans=0;
bool special[N]={},v[N]={};
int last[N]={},next[M]={},end[M]={},total_edge=1;
vector<int> half[N],route[N];
void add_edge(int u,int v)
{
	next[++total_edge]=last[u];
	last[u]=total_edge;
	end[total_edge]=v;
}
void init()
{
	scanf("%d%d%d",&n,&m,&k);
	for(int i=1,u,v;i<=m;++i)
	{
		scanf("%d%d",&u,&v);
		add_edge(u,v),add_edge(v,u);
	}
	for(int i=1,x;i<=k;++i)
	{
		scanf("%d",&x);
		special[x]=true;
	}
}
void dfs(int s)
{
	v[s]=true;
	int h=0;
	for(int i=last[s];i;i=next[i])
	{
		int j=end[i];
		if(v[j])
			continue;
		dfs(j);
		if(one[j])
		{
			if(h)
			{
				++ans;
				for(int k=0;k<(int)half[h].size();++k)
					route[ans].push_back(half[h][k]);
				route[ans].push_back(s);
				for(int k=half[one[j]].size()-1;k>=0;--k)
					route[ans].push_back(half[one[j]][k]);
				h=0;
			}
			else
				h=one[j];
		}
	}
	if(h)
	{
		if(special[s])
		{
			route[++ans]=half[h];
			route[ans].push_back(s);
		}
		else
			one[s]=h;
	}
	else
		if(special[s])
			one[s]=s;
	half[one[s]].push_back(s);
}
void work()
{
	for(int i=1;i<=n;++i)
		if(!v[i])
			dfs(i);
	printf("%d\n",ans);
	for(int i=1;i<=ans;++i)
	{
		printf("%u",route[i].size()-1);
		for(int j=0;j<(int)route[i].size();++j)
			printf(" %d",route[i][j]);
		printf("\n");
	}
}
int main()
{
	init();
	work();
	return 0;
}