#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 50000 + 5;

int n, m, k;
int a[N];
bool h[N];
vector < int > v[N], path[N];
vector < vector < int > > ans;

void dfs(int x) {
	h[x] = 1;
	foreach(it, v[x]) {
		int u = *it;
		if(!h[u]) {
			dfs(u);
			if(!path[u].empty()) {
				if(path[x].empty()) {
					swap(path[x], path[u]);
					path[x].push_back(x);
				}
				else {
					reverse(path[u].begin(), path[u].end());
					foreach(it, path[u]) {
						path[x].push_back(*it);
					}
					ans.push_back(path[x]);
					path[x].clear();
				}
			}
		}
	}
	if(a[x]) {
		if(path[x].empty()) {
			path[x].push_back(x);
		}
		else {
			ans.push_back(path[x]);
			path[x].clear();
		}
	}
}

int main() {

	scanf("%d %d %d", &n, &m, &k);

	for(int i = 1; i <= m; i++) {
		int x, y;
		scanf("%d %d", &x, &y);
		v[x].push_back(y);
		v[y].push_back(x);
	}

	for(int i = 1; i <= k; i++) {
		int x;
		scanf("%d", &x);
		a[x] = 1;
	}

	for(int i = 1; i <= n; i++) {
		if(!h[i]) {
			dfs(i);
		}
	}



	printf("%d\n", ans.size());

	foreach(it, ans) {
		vector < int > &v = *it;
		printf("%d ", v.size() - 1);
		foreach(it, v) {
			int x = *it;
			printf("%d ", x);
		}
		puts("");
	}

	return 0;

}
