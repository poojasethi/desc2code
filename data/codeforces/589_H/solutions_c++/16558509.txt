#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

const int maxN = 50010;

#define foru(i, l, r) for (int i = l; i <= r; ++i)
#define ford(i, r, l) for (int i = r; i >= l; --i)
#define repu(i, r) for (int i = 0; i < r; ++i)
#define ll long long

int n, m, marked[maxN], node[maxN], k, check[maxN], res, parent[maxN];
vector<int> adj[maxN], avail[maxN], ans[maxN], route;

int dfs(int u) {
	check[u] = 1;
	repu(i, adj[u].size()) {
		int v = adj[u][i];
		if (check[v]) continue;
		parent[v] = u;
		int temp = dfs(v);
		if (temp) avail[u].push_back(temp);
	}
	if (marked[u]) avail[u].push_back(u);
	bool left = 0;
	for (int i = 0; i < avail[u].size(); i += 2) {
		int v = avail[u][i];
		if (i == avail[u].size() - 1) break;
		route.clear();
		++res;
		while (v != u) ans[res].push_back(v), v = parent[v];
		v = avail[u][i + 1];
		route.clear();
		ans[res].push_back(u);
		while (v != u) route.push_back(v), v = parent[v];
		reverse(route.begin(), route.end());
		repu(j, route.size()) ans[res].push_back(route[j]);
	}
	if (avail[u].size() % 2) return avail[u][avail[u].size() - 1];
	else return 0;
}

int main() {
	cin >> n >> m >> k;
	foru(i, 1, m) {
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	foru(i, 1, k) cin >> node[i], marked[node[i]] = 1;
	foru(i, 1, k) {
		if (check[node[i]]) continue;
		parent[node[i]] = -1;
		dfs(node[i]);
	}
	cout << res << endl;
	foru(i, 1, res) {
		cout << ans[i].size() - 1 << " ";
		repu(j, ans[i].size()) printf("%d ", ans[i][j]);
		cout << endl;
	}
}
		 			 	 	 	  	 	  			 	 	 	