#include <bits/stdc++.h>
#define pb push_back
using namespace std;
const int maxn = 1e5;
int n, m, k, tot, vis[maxn], r[maxn], l[maxn];
vector<int> e[maxn], path[maxn];
void dfs(int u, int p){
	if(vis[u] != -1) return;
	vis[u] = p;
	r[u] = l[u]?u:-1;
	for(int i=0;i<e[u].size();i++){
		int v = e[u][i];
		if(vis[v] != -1) continue;
		dfs(v,u);
		if(r[v] == -1) continue;
		if(r[u] == -1){
			r[u] = r[v]; r[v] = -1; continue;
		}
		int x = r[u], y = r[v]; r[u] = -1;
		vector<int> cur, cur2;
		while(x != u){
			cur.pb(x); x = vis[x];
		}
		while(y != u){
			cur2.pb(y); y = vis[y];
		}
		reverse(cur2.begin(),cur2.end());
		cur.pb(u);
		cur.insert(cur.end(),cur2.begin(),cur2.end());
		path[tot++] = cur;
	}
}
int main(){
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	cin >> n >> m >> k;
	for(int i=0;i<m;i++){
		int u, v; cin >> u >> v; u--; v--;
		e[u].pb(v); e[v].pb(u);
	}
	for(int i=0;i<k;i++){
		int x; cin >> x; x--;
		l[x] = 1;
	}
	memset(vis,-1,sizeof vis);
	for(int i=0;i<n;i++) dfs(i,i);
	cout << tot << "\n";
	for(int i=0;i<tot;i++){
		cout << (path[i].size()-1) << " ";
		for(int j=0;j<path[i].size();j++) cout << path[i][j]+1 << " ";
		cout << "\n";
	}
}