#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;

const int maxn = 50010;
vector<int>g[maxn];
vector< vector<int> >ans;
bool flag[maxn];
bool remark[maxn];

void add(int u, int v){
    g[u].push_back(v);
}

int dfs(int u, vector<int>& path){
    flag[u] = true;

    int len = g[u].size();
    bool mark = false;

    for(int i = 0; i < len; i++){
        int v = g[u][i];
        if (flag[v]) continue;
        vector<int>tmp;
        if(dfs(g[u][i], tmp)){
            if (mark){
                path.push_back(u);
                for(int k = tmp.size()-1; k >= 0; k--){
                    path.push_back(tmp[k]);
                }
                ans.push_back(path);
                path.clear();
                mark = false;
            }else{
                path = tmp;
                mark = true;
            }
        }
    }

    if (mark){
        path.push_back(u);
        if (remark[u]){
            ans.push_back(path);
            path.clear();
            mark = false;
        }
    }
    else if (remark[u]){
        path.push_back(u);
        mark = true;
    }

    return mark;
}

int main()
{
//    freopen("data.in", "r", stdin);
    int n, m, k, x, y;
    scanf("%d%d%d", &n, &m, &k);
    for(int i = 0; i < m; i++){
        scanf("%d%d", &x, &y);
        add(x, y);
        add(y, x);
    }
    for(int i = 0; i < k; i++){
        scanf("%d", &x);
        remark[x] = 1;
    }
    vector<int>path;
    for(int i = 1; i <= n; i++){
        if (!flag[i]){
            dfs(i, path);
        }
    }
    printf("%d\n", (int)ans.size());
    for(int i = 0; i < (int)ans.size(); i++){
        printf("%d", (int)ans[i].size()-1);
        for(int j = 0; j < (int)ans[i].size(); j++){
            printf(" %d", ans[i][j]);
        }
        printf("\n");
    }



    return 0;
}
