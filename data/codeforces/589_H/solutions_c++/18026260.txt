#include<set>
#include<map>
#include<ctime>
#include<stack>
#include<queue>
#include<cmath>
#include<cstdio>
#include<vector>
#include<cstring>
#include<cstdlib>
#include<complex>
#include<iostream>
#include<algorithm>
#define inf 1e9
#define eps 1e-8
#define ll long long

using namespace std;
int n,m,k;
vector<int> e[50007];
vector<pair< pair<int,int> ,int> > ans;
int path[50007],qnm[50007];
bool spec[50007];

void dfs(int u){
	vector<int> tmp;
	tmp.clear();
	for (int i=0;i<e[u].size();i++){
		int v=e[u][i];
		if (path[v]==0){
			path[v]=u;
			dfs(v);
			if (qnm[v]) tmp.push_back(qnm[v]);
		}
	}
	while (tmp.size()>1){
		int x1=tmp.back();tmp.pop_back();
		int x2=tmp.back();tmp.pop_back();
		ans.push_back(make_pair(make_pair(x1,x2),u));
	}
	if (tmp.size()>0){
		int x=tmp.back();tmp.pop_back();
		if (spec[u])
			ans.push_back(make_pair(make_pair(x,u),u));
		else qnm[u]=x;
	}
	else if (spec[u]) qnm[u]=u;
}
void solve(){
	for (int i=1;i<=n;i++){
		if (!path[i]){
			path[i]=-1;
			dfs(i);
		}
	}
	vector<int>p,q;
	printf("%d\n",ans.size());
	for (int i=0;i<ans.size();i++){
		int u=ans[i].first.first;
		int v=ans[i].first.second;
		int r=ans[i].second;

		p.clear(), q.clear();
		while (u!=r){
			p.push_back(u);
			u=path[u];
		}
		while (v!=r){
			q.push_back(v);
			v=path[v];
		}
		printf("%d ",p.size()+q.size());
		for (int j=0;j<p.size();j++)
			printf("%d ",p[j]);
    	printf("%d ",r);
    	reverse(q.begin(),q.end());
    	for (int j=0;j<q.size();j++)
			printf("%d ",q[j]);
		puts("");
	}
}
int main(){
	scanf("%d%d%d",&n,&m,&k);
	for (int i=1;i<=m;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		e[u].push_back(v);
		e[v].push_back(u);
	}
	memset(spec,0,sizeof(spec));
	for (int i=1;i<=k;i++){
		int u;
		scanf("%d",&u);
		spec[u]=1;
	}
	solve();
	return 0;
}

	  			 	 			 				      				   	