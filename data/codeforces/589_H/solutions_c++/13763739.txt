#include <iostream>
#include <algorithm>
#include <stdio.h>
#include <cstring>
#include <vector>
#include <queue>
#define CLR(x) memset(x,0,sizeof(x))
#define rep(i , a , b) for(int i=a;i<=b;i++)
#define X first
#define Y second
#define MP make_pair
#define PB push_back
#define LS k * 2 , l , mid
#define RS k * 2 + 1 , mid + 1,r
#define ll long long
#define pii pair<int,int>
using namespace std;
const int Maxn = 200010 , Maxm = 100010 , oo = 2100000000>>2;
int N , M , K;
int vis[Maxn],mk[Maxn],f[Maxn];
vector<int> e[Maxn];
vector<vector<int> > ans;


void Gets(int x, int y,int lca){
    vector<int> nx;
    vector<int> ny;
    for (;x!=lca;x=f[x]) nx.PB(x);
    for (;y!=lca;y=f[y]) ny.PB(y);
    reverse(ny.begin(),ny.end());
    nx.PB(lca);
    for (int i=0;i<ny.size();i++) nx.PB(ny[i]);
    ans.PB(nx);
}

int dfs(int u,int fa){
    vis[u] = 1;
    vector<int> x;
    f[u] = fa;
    if (mk[u]) x.PB(u);
    for (int i=0;i<e[u].size();i++){
        int v = e[u][i];
        if (vis[v]) continue;
        int w = dfs(v,u); 
        if (w) x.PB(w);
    }
    for (int i=0;i+1<x.size();i+=2)
        Gets(x[i],x[i+1],u);
    return x.size() % 2 ? x[x.size()-1]:0;
}

int main()
{
    cin >> N >> M >> K;
    for (int i=1;i<=M;i++){
        int u , v;
        cin >> u >> v;
        e[u].PB(v);
        e[v].PB(u);
    }
    for (int i=1;i<=K;i++){
        int u;
        cin >> u;
        mk[u] = 1;
    }
    for (int i=1;i<=N;i++)
        if (!vis[i]) dfs(i,0);
    cout << ans.size() << endl;
    for (int i=0;i<ans.size();i++){
        cout << ans[i].size() -1 <<" ";
        for (int j=0;j<ans[i].size();j++){
            cout << ans[i][j] <<" "; 
        }
        cout << endl;
    }
} 