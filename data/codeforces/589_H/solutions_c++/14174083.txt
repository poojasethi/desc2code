#include <bits/stdc++.h>
using namespace std;
const int N=50005;
int h[N],co;
int n,m,k;
bool mark[N],vis[N],hav[N];
int pa[N],mah[N],dep[N],ans;
struct pi
{
    int v,next;
}c[N*2];
void init()
{
    memset(mah,0,sizeof(mah));
    memset(pa,0,sizeof(pa));
    memset(hav,0,sizeof(hav));
    memset(dep,0,sizeof(dep));
    memset(mark,0,sizeof(mark));
    memset(vis,0,sizeof(vis));
    memset(h,-1,sizeof(h));
    ans=co=0;
}
void add(int u,int v)
{
    c[co].v=v;
    c[co].next=h[u];
    h[u]=co++;
}
int dfs(int u,int fa)
{
    vis[u]=1;
    pa[u]=fa;
    dep[u]=(fa==-1?0:dep[fa])+1;
    int now=mark[u]?u:-1;
    for(int i=h[u];~i;i=c[i].next)
    {
        int v=c[i].v;
        if(vis[v]) continue;
        int lt=dfs(v,u);
        if(lt==-1) continue;
        if(now==-1) now=lt;
        else
        {
            mah[now]=lt;
            mah[lt]=now;
            now=-1;
            ans++;
        }
    }
    return now;
}
int main()
{
//    freopen("in","r",stdin);
    int u,v;
    while(scanf("%d%d%d",&n,&m,&k)!=EOF)
    {
        init();
        for(int i=0;i<m;i++)
        {
            scanf("%d%d",&u,&v);
            add(u,v);
            add(v,u);
        }
        for(int i=0;i<k;i++)
        {
            scanf("%d",&u);
            mark[u]=1;
        }
        for(int i=1;i<=n;i++)
            if(!vis[i]) dfs(i,-1);
        printf("%d\n",ans);
        for(int i=1;i<=n;i++)
            if(mah[i]&&!hav[i])
            {
                hav[i]=hav[mah[i]]=1;
                u=i;
                v=mah[i];
                vector<int> lt,rt;
                lt.push_back(u);
                rt.push_back(v);
                int cnt=0;
                while(u!=v)
                {
                    if(dep[u]<dep[v]) rt.push_back(pa[v]),v=pa[v];
                    else lt.push_back(pa[u]),u=pa[u];
                }
                for(int i=(int)rt.size()-2;i>=0;i--) lt.push_back(rt[i]);
                printf("%d",lt.size()-1);
                for(int i=0;i<(int)lt.size();i++) printf(" %d",lt[i]);
                printf("\n");
            }
    }
    return 0;
}

 	 	  	 		  	  						    	  		