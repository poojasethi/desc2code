//UWr LTJ
#include<bits/stdc++.h>
using namespace std;

typedef long long int LL;
typedef pair<int,int> PII;
typedef long double LD;

#define x first
#define y second
#define mp make_pair
#define pb push_back

const int MAXN = 50000;

int n, m, k;
vector<int> graph[MAXN + 3], sat[MAXN + 3], Route[MAXN + 3];
bool visited[MAXN + 3], special[MAXN + 3];

void Merge(int a, int b, int v){
    Route[a].pb(v);
    int len = Route[b].size();
    for(int i = len-1; i>=0; i--)
        Route[a].pb(Route[b][i]);
    Route[b].clear();
}

int Dfs(int v){
    visited[v] = true;
    int len = graph[v].size();
    for(int i=0; i<len; i++){
        int u = graph[v][i];
        if(!visited[u]){
            int tmp = Dfs(u);
            if(tmp != -1)
                sat[v].pb(tmp);
        }
    }
    
    len = sat[v].size();
    for(int i=0; i+1<len; i+=2)
        Merge(sat[v][i], sat[v][i+1], v);
    
    if(len%2 == 1){
        int u = sat[v][len-1];
        Route[u].pb(v);
        if(special[v])
            return -1;
        else
            return u;
    }
    else if(special[v]){
        Route[v].pb(v);
        return v;
    }
    else
        return -1;
}

int main(){
    scanf("%d %d %d", &n, &m, &k);
    for(int i=0; i<m; i++){
        int a, b;
        scanf("%d %d", &a, &b);
        graph[a].pb(b);
        graph[b].pb(a);
    }
    
    for(int i=0; i<k; i++){
        int v;
        scanf("%d", &v);
        special[v] = true;
    }
    
    for(int i=1; i<=n; i++){
        if(special[i] && !visited[i])
            Dfs(i);
    }
    
    int ans = 0;
    for(int i=1; i<=n; i++)
        if(Route[i].size() > 1)
            ans++;
    printf("%d\n", ans);
    for(int i=1; i<=n; i++){
        int len = Route[i].size();
        if(len > 1){
            printf("%d ", len-1);
            for(int j=0; j<len; j++)
                printf("%d ", Route[i][j]);
            puts("");
        }
    }

return 0;
}