#include <bits/stdc++.h>
using namespace std;
#define FI "tourist.i2"
#define FO "tourist.o2"
typedef vector<int> VI;
typedef pair<int, int> PII;
const int MAXN = 50005;

VI adj[MAXN];
bool special[MAXN];
bool visited[MAXN];
int from[MAXN];
vector<deque<int> > ans;
int N, M, K;

void DFS(int u){
    visited[u] = true;
    int p = -1;
    if(special[u]){
        p = u;
        from[u] = u;
    }
    for(int i = 0; i < adj[u].size(); i++){
        int v = adj[u][i];
        if(visited[v]) continue;
        DFS(v);
        if(from[v]){
            if(p == -1) p = v;
            else{
                deque<int> path;
                path.push_back(u);
                int c = p;
                while(p != u){
                    path.push_front(c);
                    if(from[c] == c) break;
                    c = from[c];
                }
                c = v;
                while(true){
                    path.push_back(c);
                    if(from[c] == c) break;
                    c = from[c];
                }
                p = -1;
                ans.push_back(path);
            }
        }
    }
    if(p != -1) from[u] = p;
    else from[u] = 0;
}

int main() {
    std::ios_base::sync_with_stdio(false), cin.tie(0);
    #ifndef ONLINE_JUDGE
    ifstream cin(FI);
    ofstream cout(FO);
    #endif // ONLINE_JUDGE
    cin >> N >> M >> K;
    for (int u, v, i = 0; i < M; ++i) {
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    memset(special, false, sizeof(special));
    for (int u, i = 0; i < K; ++i) {
        cin >> u;
        special[u] = true;
    }
    memset(visited, false, sizeof(visited));
    memset(from, 0, sizeof(from));
    for (int i = 1; i <= N; ++i)
        if (!visited[i]) DFS(i);

    cout << ans.size() << "\n";
    for (int i = 0; i < ans.size(); i++) {
        cout << ans[i].size()-1;
        for (int j = 0; j < ans[i].size(); j++) cout << " " << ans[i][j];
        cout << "\n";
    }
    return 0;
}

