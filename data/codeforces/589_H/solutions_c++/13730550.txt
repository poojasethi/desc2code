#include<bits/stdc++.h>
using namespace std;



struct cont{
	int i1,i2,comm;
};

int sp[60005]={0};

int marked[60005]={0};

int parent[60005]={0};

vector< vector<int> > graph(60005);

vector<cont> global;

int dfs(int index)
{
	marked[index]=1;

	vector<int> rootleft;

	for(int i=0;i<graph[index].size();i++)
	{
		int ch = graph[index][i];

		if( marked[ch] == 0)
		{
			parent[ch]=index;
			
			int  left = dfs(ch);

			if(left!=-1)rootleft.push_back(left);

		}

	}

	if(sp[index]==1)
	{
		rootleft.push_back(index);
	}

	for(int i=0;i<rootleft.size()/2;i++)
	{
		cont c; c.i1 = rootleft[2*i];c.i2=rootleft[2*i+1];c.comm=index;
		global.push_back(c);

	}

	if(rootleft.size()%2==0)return -1;
	else return rootleft[rootleft.size()-1];

}


int main()
{
	int n,m,k;

	cin>>n>>m>>k;

	for(int i=0;i<m;i++)
	{
		int k1,k2;
		cin>>k1>>k2;
		graph[k1].push_back(k2);
		graph[k2].push_back(k1);

	}

	for(int i=0;i<k;i++)
	{
		int k1;cin>>k1;
		sp[k1]=1;
	}

	for(int i=1;i<=n;i++)
	{
		if(marked[i]==0)
		{
			parent[i]=0;
			dfs(i);
		}
	}
	
	printf("%d\n",global.size());
	
	for(int i=0;i<global.size();i++)
	{
		int st=global[i].i1; int en = global[i].i2;
		int com = global[i].comm;
		vector<int> path;
		
		while(st!=com)
		{
			path.push_back(st);
			
			st=parent[st];
			
		}
		
		path.push_back(com);
		
		vector<int> revpath;
		
		while(en!=com)
		{
			revpath.push_back(en);
			en = parent[en];
		}
		
		for(int j=0;j<revpath.size();j++)
		{
			path.push_back(revpath[revpath.size()-j-1]);
		}
		
		printf("%d ",path.size()-1);
		
		for(int j=0;j<path.size();j++)
		{
			printf("%d ",path[j]);
		}
		
		printf("\n");
	}
}
