#include <bits/stdc++.h>
#define fi first
#define se second
#define m ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)

using namespace std;

typedef long long lint;
typedef pair <int,int> ii;
typedef pair <ii,int> iii;
typedef vector <int> vi;
typedef vector <ii> vii;

const int maxn=50050;

int N,M,K,dad[maxn],der[maxn];
vi komsu[maxn],way[maxn];
vector <iii> pairs;
bool good[maxn],used[maxn];

void maketree(int node,int dd,int dr){
	der[node]=dr;
	used[node]=1;
	dad[node]=dd;
	
	for(int i=0;i<komsu[node].size();i++) if(komsu[node][i]!=dd && !used[komsu[node][i]]){
		way[node].push_back(komsu[node][i]);
		maketree(komsu[node][i],node,dr+1);
	}
}

int dfs(int node){
	vi v;
	if(good[node])
		v.push_back(node);
	
	for(int i=0;i<way[node].size();i++){
		int a=dfs(way[node][i]);
		if(a)
			v.push_back(a);
	}
	
	for(int i=0;i+1<v.size();i+=2)
		pairs.push_back(iii(ii(v[i],v[i+1]),node));
	
	if(v.size()&1)
		return v[v.size()-1];
	return 0;
}

int main(){
	scanf("%d %d %d",&N,&M,&K);
	
	for(int i=1;i<=M;i++){
		int a,b;
		scanf("%d %d",&a,&b);
		
		komsu[a].push_back(b);
		komsu[b].push_back(a);
	}
	
	for(int i=1;i<=K;i++){
		int a;
		scanf("%d",&a);
		good[a]=1;
	}
	
	for(int i=1;i<=N;i++) if(!used[i]){
		maketree(i,0,1);
		
		dfs(i);
	}
	printf("%d\n",pairs.size());
	for(int i=0;i<pairs.size();i++){
		int a=pairs[i].fi.fi , b=pairs[i].fi.se ,c=pairs[i].se;
		
		vi v,road;
		
		while(a!=c)
			road.push_back(a) , a=dad[a];
		
		while(b!=c)
			v.push_back(b) , b=dad[b];
		
		road.push_back(c);
		
		for(int i=v.size()-1;i>=0;i--)
			road.push_back(v[i]);
		
		printf("%d ",road.size()-1);
		for(int i=0;i<road.size();i++)
			printf("%d ",road[i]);
		puts("");
	}
	
	return 0;
}
