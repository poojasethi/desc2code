#include <bits/stdc++.h>

using namespace std;

int dem = 0, n, m, k, p[621233], used[621233], dd[621233], in[621233], out[621233];
vector<pair<int, int> > ans;
vector<int> ke[621233];

int dfs(int v)
{
    in[v] == ++dem;
    used[v] = 1;
    int last = dd[v] ? v : -1;
    for(int i = 0; i < ke[v].size(); i++)
    {
        int to = ke[v][i];
        if(used[to]) continue;
        int t = dfs(to);
        p[to] = v;
        if(t == -1) continue;
        if(last == -1) last = t;
        else
        {
            ans.push_back(make_pair(last, t));
            last = -1;
        }
    }
    out[v] = ++dem;
    return last;
}

bool Isparent(int u, int v)
{
    return (in[u] <= in[v] && out[v] <= out[u]);
}

vector<int> way;

void Find_way(int u, int v)
{
    while(!Isparent(u, v))
    {
        way.push_back(u);
        u = p[u];
    }
    vector <int> tmp;
    while(u != v)
    {
        tmp.push_back(v);
        v = p[v];
    }
    way.push_back(v);
    for(int i = int(tmp.size()) - 1; i >= 0; i--)
         way.push_back(tmp[i]);
}

int main()
{
    ios_base::sync_with_stdio(false);
    //freopen("h.in","r",stdin);
    //freopen("h.ou","w",stdout);
    cin >> n >> m >> k;
    int u, v;
    for(int i = 1; i <= m; i++)
    {
        cin >> u >> v;
        ke[--u].push_back(--v);
        ke[v].push_back(u);
    }
    for(int i = 1; i <= k; i++)
        cin >> u, dd[--u] = 1;
    for(int i = 0; i < n; i++)
        if(!used[i]) dfs(i);
    cout << ans.size() <<endl;
    for(int i = 0; i < ans.size(); i++)
    {
        way.clear();
        Find_way(ans[i].first, ans[i].second);
        cout << int(way.size()) - 1 <<" ";
        for(int j = 0; j < way.size(); j++)
            cout << way[j] + 1 <<" ";
        cout << endl;
    }
}
