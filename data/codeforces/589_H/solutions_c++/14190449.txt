#include <algorithm>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

struct edge {
    int to, id;
};

bool fl[1 << 17];

int n, m, k;
vector<edge> g[1 << 17];
vector< vector<int> > be;
int cool[1 << 17];

int par[1 << 17];

int st = 0;
int dfs(int v) {
    int rem = 0;
    if (cool[v]) {
        rem = v;
    }
    for (int i = 0; i < (int) g[v].size(); ++i) {
        int u = g[v][i].to;
        if (!par[u]) {
            par[u] = v;
            int k = dfs(u);
            if (k != 0) {
                if (rem == 0) {
                    rem = k;
                } else {
                    vector<int> rs;
                    rs.push_back(k);
                    while (k != v) {
                        k = par[k];
                        rs.push_back(k);
                    }
                    vector<int> ps;
                    while (rem != v) {
                        ps.push_back(rem);
                        rem = par[rem];
                    }
                    rem = 0;
                    reverse(ps.begin(), ps.end());
                    for (int j = 0; j < (int) ps.size(); ++j) {
                        rs.push_back(ps[j]);
                    }
                    be.push_back(rs);
                }
            }
        }
    }
    return rem;
}

int main() {
    scanf("%d %d %d", &n, &m, &k);
    for (int i = 0; i < m; ++i) {
        int a, b;
        scanf("%d %d", &a, &b);
        edge e;
        e.id = i;
        e.to = b;
        g[a].push_back(e);
        e.to = a;
        g[b].push_back(e);
    }

    memset(cool, 0, sizeof(cool));
    for (int i = 0; i < k; ++i) {
        int x;
        scanf("%d", &x);
        cool[x] = 1;
    }

    memset(par, 0, sizeof(par));
    for (int i = 1; i <= n; ++i) {
        if (!par[i]) {
            par[i] = -1;
            dfs(i);
        }
    }

    printf("%d\n", (int) be.size());
    for (int i = 0; i < (int) be.size(); ++i) {
        printf("%d", (int) be[i].size() - 1);
        for (int j = 0; j < (int) be[i].size(); ++j) {
            printf(" %d", be[i][j]);
        }
        printf("\n");
    }
    return 0;
}

