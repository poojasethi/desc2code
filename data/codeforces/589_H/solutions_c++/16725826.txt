#include <bits/stdc++.h>
#define fi first
#define se second
#define Sz(x) ((int)x.size())
using namespace std;

typedef pair < int , int > ii;
typedef pair < int , ii > iii;

const int maxn = 50005;

int n,m,k,dad[maxn];
bool ok[maxn],used[maxn];
vector < int > way[maxn];
vector < iii > ans;

int dfs( int node ){
	used[node] = 1;
	int c = ok[node] ? node : 0;
	for( int i = 0 ; i < Sz(way[node]) ; i++ ){
		int adj = way[node][i];
		if( used[adj] ) continue;
		dad[adj] = node;
		int x = dfs(adj);
		if( x ){
			if( !c ) c = x;
			else {
				ans.push_back(iii(node , ii(c , x)));
				c = 0;
			}
		}
	}
	return c;
}

int main(){
	
	scanf("%d%d%d",&n,&m,&k);
	
	for( int i = 1,a,b ; i <= m ; i++ ){
		scanf("%d%d",&a,&b);
		way[a].push_back(b);
		way[b].push_back(a);
	}
	
	for( int i = 1,a ; i <= k ; i++ ){
		scanf("%d",&a);
		ok[a] = 1;
	}
	
	for( int i = 1 ; i <= n ; i++ )
		if( !used[i] )
			dfs(i);
	
	printf("%d\n",Sz(ans));
	
	for( int i = 0 ; i < Sz(ans) ; i++ ){
		int anc = ans[i].fi , x = ans[i].se.fi , y = ans[i].se.se;
		queue < int > Q;
		stack < int > S;
		while( x != anc ){ Q.push(x); x = dad[x];}
		Q.push(anc);
		while( y != anc ){ S.push(y); y = dad[y];}
		printf("%d",Sz(Q) + Sz(S) - 1);
		while( !Q.empty() ){
			printf(" %d",Q.front());
			Q.pop();
		}
		while( !S.empty() ){
			printf(" %d",S.top());
			S.pop();
		}
		printf("\n");
	}
	
	return 0;
}
