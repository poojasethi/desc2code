#include <bits/stdc++.h>

using namespace std;

int N, M;
vector<int> G[100005];
bool I[100005];

vector<deque<int> > ans;

int from[100005];
bool vis[100005];
void dfs(int u)
{
// 	cout << "at " << u << endl;
	vis[u] = true;
	int p = -1;
	if(I[u])
	{
// 		cout << "*\n";
		p = u;
		from[u] = u;
	}
	for(int i = 0; i < G[u].size(); i++)
	{
		int v = G[u][i];
		if(vis[v]) continue;
		dfs(v);
		if(from[v])
		{
// 			cout << "hi\n";
			if(p == -1) p = v;
			else
			{
				deque<int> path;
				path.push_back(u);
				int c = p;
				while(p != u)
				{
					path.push_front(c);
					if(from[c] == c) break;
					c = from[c];
				}
				c = v;
				while(true)
				{
					path.push_back(c);
					if(from[c] == c) break;
					c = from[c];
				}
				p = -1;
				ans.push_back(path);
			}
		}
	}
	if(p != -1) from[u] = p;
	else from[u] = 0;
}

int main()
{
	cin >> N >> M;
	int K;
	cin >> K;
	while(M--)
	{
		int a, b;
		cin >> a >> b;
		G[a].push_back(b);
		G[b].push_back(a);
	}
	while(K--)
	{
		int x;
		cin >> x;
		I[x] = true;
	}
	for(int i = 1; i <= N; i++)
		if(!vis[i]) dfs(i);
	cout << ans.size() << '\n';
	for(int i = 0; i < ans.size(); i++)
	{
		cout << ans[i].size()-1;
		for(int j = 0; j < ans[i].size(); j++) cout << ' ' <<ans[i][j];
		cout << '\n';
	}
}
