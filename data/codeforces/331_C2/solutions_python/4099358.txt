#include <cstdio>
#include <algorithm>
using namespace std;

typedef pair<int, int> PII;
typedef long long LL;

const int MAXN = 1000100;
const int MAXX = 1000000;
PII D[MAXN][10];

inline int maxd(int n) {
  LL k = n; int d = 0;
  while (k > 0) { d = max(d, int(k%10)); k /= 10; }
  return d;
}

PII get(int n, int m) {
  if (n <= 0) return PII(0, n);
  if (D[n][m].first != -1) return D[n][m];
  int d = max(m, maxd(n));
  PII r = get(n-d, m);
  return D[n][m] = PII(1+r.first, r.second);
}

LL sub(LL n) {
  //printf ("%I64d\n", n);
  LL s = 0;
  while (true) {
    LL l = (n/MAXX); int r = n%MAXX;
    if (l == 0) return s + get(n,0).first;
    int mm = maxd(l);
    PII r1 = get(r, mm);
    l *= MAXX;
    if (r1.second == 0) { s += r1.first + 1; n = l-mm; continue; }
    s += r1.first;
    n = l + r1.second;
  }
}

int main() {
  LL n; scanf ("%I64d", &n);
  for (int j = 0; j < 10; j++) D[0][j] = PII(0,0);
  for (int i = 1; i <= min((LL)MAXN-1, n); i++)
    for (int j = 0; j < 10; j++) {
      int d = max(maxd(i), j);
      if (i-d < 0) D[i][j] = PII(1, i-d);
      else D[i][j] = PII(1+D[i-d][j].first, D[i-d][j].second);
    }
  printf ("%I64d\n", sub(n));
  return 0;
}
