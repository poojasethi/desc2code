#include <iostream>
#include <map>
using namespace std;
#define ll long long
#define pli pair<ll,int>
ll N;
map< pli,pli > Map;
pli dp(ll n,int k)
{
    pli now=make_pair(n,k);
    if(Map.count(now))
        return Map[now];
    ll ret=0;
    while(true)
    {
        ll p=1;
        while(n/p>=10)
            p*=10;
        int newk=max(k,(int)(n/p));
        ll sub=n%p;
        pli add=dp(sub,newk);
        if(add.second)
            sub+=add.second;
        else
        {
            sub+=newk;
            ++add.first;
        }
        ret+=add.first;
        n-=sub;
        pli newnow=make_pair(n,k);
        if(Map.count(newnow))
        {
            pli get=Map[newnow];
            return Map[now]=make_pair(get.first+ret,get.second);
        }
    }
}
int main()
{
    cin>>N;
    Map[make_pair(0,0)]=make_pair(0,0);
    for(int i=0;i<=9;++i)
        for(int j=1;j<=9;++j)
            Map[make_pair(i,j)]=make_pair(1,max(0,j-i));
    cout<<dp(N,0).first;
    return 0;
}