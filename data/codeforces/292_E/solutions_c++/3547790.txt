/**
 * \file A.cpp
 * @author Vlastimil Dort
 */



#include <stdio.h>
#include <map>

using namespace std;

int A[100100], B[100100];

map<int, int> mapping;
typedef map<int, int>::iterator miit;

miit query(int Q){
	miit it = mapping.upper_bound(Q);
	it--;
	return it;
}


int main(){
	int N,M;
	scanf("%d%d",&N,&M);
	for(int i=0;i<N;++i)
		scanf("%d",&A[i]);
	for(int i=0;i<N;++i)
		scanf("%d",&B[i]);

	mapping[0] = -1;

	for(int i=0;i<M;++i){
		int T;
		scanf("%d",&T);
		if(T == 1){
			int X, Y, K;
			scanf("%d%d%d",&X,&Y, &K);
			--Y, --X;
			miit begin = query(Y);
			miit end = query(Y+K);
			int ens = end->second;
			int enf = end->first;
			mapping.erase(mapping.lower_bound(Y), mapping.upper_bound(Y+K));
			mapping[Y] = X;
			if(ens == -1)
				mapping[Y+K] = -1;
			else
				mapping[Y+K] = ens + Y+K - enf;
		}
		else{
			int Q;
			scanf("%d",&Q);
			--Q;
			miit qq = query(Q);
			printf("%d\n", qq->second==-1 ? B[Q] : A[qq->second + Q - qq->first]);
		}
	}


}
