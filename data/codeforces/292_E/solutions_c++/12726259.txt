#include <bits/stdc++.h>
using namespace std;

#define lch (k << 1)
#define rch (k << 1 | 1)
#define mid ((l + r) >> 1)

const int maxn = 100010;
int n, m, t, idx, x[maxn], y[maxn], k[maxn], a[maxn], b[maxn];

struct segment_tree {
	int data[maxn << 2];
	void update(int a, int b, int x, int k, int l, int r) {	
		if(a <= l && r <= b) { data[k]=x; return; }
		if(a <= mid) update(a, b, x, lch, l, mid);
		if(b >  mid) update(a, b, x, rch, mid+1, r);
	}
	int query(int x, int k, int l, int r) {
		if(l == r) return data[k];
		if(x <= mid) return max(data[k], query(x, lch, l, mid));
		else return max(data[k], query(x, rch, mid+1, r));
	}
}st;

int main () {
	scanf("%d%d", &n, &m);
	for(int i=1; i <= n; i++) scanf("%d", &a[i]);
	for(int i=1; i <= n; i++) scanf("%d", &b[i]);
	for(int i=1; i <= m; i++) {
		scanf("%d%d", &t, &x[i]);
		if(t == 1) {
			scanf("%d%d", &y[i], &k[i]);
			st.update(y[i], y[i]+k[i]-1, i, 1, 1, n);
		}
		else {
			idx=st.query(x[i], 1, 1, n);
			printf("%d\n", idx?a[x[i]-y[idx]+x[idx]]:b[x[i]]);
		}
	}
	return 0;
}
 			 				  				 			    	  	 		