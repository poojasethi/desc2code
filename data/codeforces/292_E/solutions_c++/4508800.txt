#include <iostream>
#include <algorithm>
using namespace std;
int main () {
	int n, m;
	cin >> n >> m;
	int *a = new int[n + 1], *b = new int[n + 1];
	int *dst = new int[m + 1];
	for (int i = 1; i <= n; ++i)
		cin >> a[i];
	for (int i = 1; i <= n; ++i)
		cin >> b[i];

	int base = 1;
	//while (base < n)
	while (base <= n)
		base <<= 1;
	int *tree = new int[base + 1 + n]();

	for (int i = 1; i <= m; ++i) {
		int t, x, y, k;
		cin >> t;
		if (t == 1) {
			cin >> x >> y >> k;
			dst[i] = x - y;
			//for (int l = base + y - 1, r = base + y - 1 + k - 1; l <= r; l = (l + 1) >> 1, r = (r - 1) >> 1) {
			for (int l = base + y, r = base + y + k - 1; l <= r; l = (l + 1) >> 1, r = (r - 1) >> 1) {
				tree[l] = tree[r] = i;
			}
		} else if (t == 2) {
			int d = 0;
			cin >> x;
			//for (int j = base + x - 1; j > 0; j >>= 1) {
			for (int j = base + x; j > 0; j >>= 1) {
				d = max (d, tree[j]);
			}
			cout << (d ? a[x + dst[d]] : b[x]) << endl;
		}
	}
	return 0;
}
