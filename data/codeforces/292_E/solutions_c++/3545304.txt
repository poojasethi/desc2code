
#include <cstdio>
#include <algorithm>
using namespace std;

const int N = 100*1000;
const int T = 128*1024;

int n, A[N], B[N], tree[2*T], diffs[N];

int getmax(int a) {
  a += T;
  int res = -1;
  while (a>0) {
    res = max(res, tree[a]);
    a/=2;
  }
  return res;
}

void updmax(int l, int r, int a) {
  l += T;
  r += T;
  tree[l] = a;
  tree[r] = a;
  while (l/2 != r/2) {
    if (l%2==0) tree[l+1] =a;
    if (r%2==1) tree[r-1] =a;
    l/=2;
    r/=2;
  }
}

int main() {
  int queries;
  scanf("%d%d",&n,&queries);
  for (int i=0; i<2*T; ++i) tree[i] = -1;
  for (int i=0;i<n;++i) scanf("%d",&A[i]);
  for (int i=0;i<n;++i) scanf("%d",&B[i]);
  for (int i=0;i<queries;++i) {
    int typ;
    scanf("%d",&typ);
    if (typ==1) {
      int x,y,k;
      scanf("%d%d%d",&x,&y,&k);
      x--; y--;
      diffs[i] = x-y;
      updmax(y, y+k-1, i);
    } else {
      int x;
      scanf("%d",&x);
      x--;
      int q = getmax(x);
      if (q==(-1))
        printf("%d\n",B[x]);
      else
        printf("%d\n",A[x+diffs[q]]);
    }
  }
  return 0;
}

