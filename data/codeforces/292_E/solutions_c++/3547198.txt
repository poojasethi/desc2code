#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define tree int t,int l,int r
#define left t*2,l,mid
#define right t*2+1,mid+1,r
#define M int mid=(l+r)/2
#define N 400005
int n,m,a[N],d[N],flag[N];
void down(int t)
{
	int L=t*2,R=L+1;
	flag[L]=flag[R]=1,flag[t]=0;
	d[L]=d[R]=d[t],d[t]=0;
}
void modify(tree,int ll,int rr,int p)
{
	if (l==ll && r==rr) {flag[t]=1,d[t]=p; return;}
	if (flag[t]) down(t); M;
	if (rr<=mid) modify(left,ll,rr,p);
	else if (ll>mid) modify(right,ll,rr,p);
		else modify(left,ll,mid,p),modify(right,mid+1,rr,p);
}
int query(tree,int p)
{
	if (flag[t]) return a[p+d[t]]; if (l==r) return a[l]; M;
	if (p<=mid) return query(left,p); else return query(right,p);
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;i++) scanf("%d",a+n+i);
	for (int i=1;i<=n;i++) scanf("%d",a+i);
	while (m--){
		int type,x,y,k; scanf("%d",&type);
		if (type==1) scanf("%d%d%d",&x,&y,&k),k=min(k-1,n-y),modify(1,1,n,y,y+k,x+n-y);
		else scanf("%d",&x),printf("%d\n",query(1,1,n,x));
		}
	return 0;
}
