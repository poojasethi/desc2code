#include <bits/stdc++.h>
using namespace std;

#define lch (k << 1)
#define rch (k << 1 | 1)
#define mid ((l + r) >> 1)

const int maxn = 100010;
int n, m, t, v, x, y, k, a[maxn], b[maxn];

struct segment_tree {
	int data[maxn << 2];
	void push_down(int k, int l, int r) {
		data[lch]=data[k];
		data[rch]=data[k]+mid-l+1;
		data[k]=0;
	}
	void build() { memset(data, 0, sizeof(data)); }
	void update(int a, int b, int x, int k, int l, int r) {	
		if(a <= l && r <= b) { data[k]=x+l-a; return; }	
		if(data[k]) push_down(k, l, r);
		if(a <= mid) update(a, b, x, lch, l, mid);
		if(b>mid) update(a, b, x, rch, mid+1, r);
	}
	int query(int x, int k, int l, int r) {
		if(l == r) return data[k] ? a[data[k]] : b[l];
		if(data[k]) push_down(k, l, r);
		if(x <= mid) return query(x, lch, l, mid);
		else return query(x, rch, mid+1, r);
	}	
}st;

int main () {
	scanf("%d%d", &n, &m);
	for(int i=1; i <= n; i++) scanf("%d", &a[i]);
	for(int i=1; i <= n; i++) scanf("%d", &b[i]);
	for(st.build(); m--;) {
		scanf("%d%d", &t, &x);
		if(t == 1) {
			scanf("%d%d", &y, &k);
			st.update(y, y+k-1, x, 1, 1, n);
		}
		else printf("%d\n", st.query(x, 1, 1, n));
	}
	return 0;
}
			    	 			   	   			 	  		 		