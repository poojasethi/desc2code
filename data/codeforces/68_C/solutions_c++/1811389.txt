#include <cstdio>
#include <algorithm>

using namespace std;

struct edge
{
  int s,t,l,h,a;
  bool operator<(const edge& x) const
  {
    if(s!=x.s)
      return s<x.s;
    return t<x.t;
  }
};

edge e[16];
int n,m,ans1,ans2,f[7],d[7];

void dfs(int x,int y)
{
  if(x>m)
  {
    ans1=f[1];
    ans2=max(ans2,y);
    return;
  }
  if((x==m)||(e[x+1].s!=e[x].s))
  {
    int z=f[e[x].s]-d[e[x].s];
    if((z<e[x].l)||(z>e[x].h))
      return;
    d[e[x].s]+=z;
    f[e[x].t]+=z;
    if(z>0)
      dfs(x+1,y+e[x].a+z*z);
    else
      dfs(x+1,y);
    d[e[x].s]-=z;
    f[e[x].t]-=z;
  }
  else
  {
    for(int z=e[x].l;z<=e[x].h;++z)
    {
      if(z>f[e[x].s]-d[e[x].s])
        break;
      d[e[x].s]+=z;
      f[e[x].t]+=z;
      if(z>0)
        dfs(x+1,y+e[x].a+z*z);
      else
        dfs(x+1,y);
      d[e[x].s]-=z;
      f[e[x].t]-=z;
    }
  }
}

int main(void)
{
  scanf("%d",&n);
  m=n*(n-1)/2;
  for(int i=1;i<=m;++i)
    scanf("%d %d %d %d %d",&e[i].s,&e[i].t,&e[i].l,&e[i].h,&e[i].a);
  sort(e+1,e+m+1);
  ans1=-1,ans2=-1;
  for(int i=0;i<26;++i)
  {
    f[1]=i;
    dfs(1,0);
    if(ans1>-1)
      break;
  }
  printf("%d %d\n",ans1,ans2);
  return 0;
}