//In the name of Allah
//
//
#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
using namespace std;
const int MN=10;
const int INF=(1u<<31)-1;
typedef pair<int,int> pie;
pie list[MN][MN];
int cost[MN][MN];
int n;
int best1=INF,best2=-1;
void back_track(vector <int> a,int b,int c);
void find(vector <int> a,int &b,int c,int p,int remain)
{
	if (p==n)
	{
		back_track(a,b+1,c);
		return ;
	}
	for (int i=list[b][p].first;i<=min(remain,list[b][p].second);i++)
	{
		vector <int> temp;
		temp.resize(n);
		for (int j=0;j<n;j++)
			temp[j]=a[j];
		temp[p]+=i;
		int t2=c;
		if (i>0)
			t2+=cost[b][p];
		t2+=i*i;
		find(temp,b,t2,p+1,remain-i);
	}
}
void back_track(vector <int> a,int b,int c)
{
	if (b==n)
	{
		if (a[n-1]==a[0])
		{
			if (a[n-1]<best1)
			{
				best1=a[n-1];
				best2=c;
			}
			else if (a[n-1]==best1 && c>best2)
				best2=c;
		}
		return ;
	}
	find(a,b,c,b+1,a[b]);
}
int main()
{
	ios::sync_with_stdio(false);
	cin>>n;
	for (int i=0;i<n*(n-1)/2;i++)
	{
		int a,b,c,d,e;
		cin>>a>>b>>c>>d>>e;
		a--; b--;
		cost[a][b]=e;
		list[a][b]=pie(c,d);
	}
	for (int i=0;i<=30;i++)
	{
		vector <int> temp;
		temp.resize(n,0);
		temp[0]=i;
		back_track(temp,0,0);
		if (best1==i)
			break;
	}
	if (best1==INF)
		cout<<-1<<" "<<-1<<endl;
	else
		cout<<best1<<" "<<best2<<endl;
	return 0;
}
