#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct Edge
{
	int to,l,h,a;
	Edge *next;
	void set(int vt,int l,int h,int a,Edge *nt=NULL)
	{
		to=vt;
		this->l=l,this->h=h,this->a=a;
		next=nt;
	}
};
Edge arc[50],*head[10],*pi;
int n;
int flow[10];
int inf=1<<29;
int maxCost(int vs,Edge *ep)
{
	if(vs==n) return 0;
	if(!ep)
	{
		if(flow[vs]==0) return maxCost(vs+1,head[vs+1]);
		else return -inf;
	}
	int ans=-inf;
	for(int f=ep->l,maxf=min(flow[vs],ep->h);f<=maxf;f++)
	{
		flow[vs]-=f;
		flow[ep->to]+=f;
		//printf("%d->%d (%d)\n",vs,ep->to,f);
		int t=maxCost(vs,ep->next);
		if(f) t+=f*f+ep->a;
		ans=max(ans,t);
		flow[vs]+=f;
		flow[ep->to]-=f;
	}
	return ans;
}
int main()
{
	int s,f,l,h,a;
	cin>>n;
	pi=arc;
	fill(head,head+10,(Edge*)NULL);
	for(int i=0;i<n*(n-1)/2;i++)
	{
		cin>>s>>f>>l>>h>>a;
		pi->set(f,l,h,a,head[s]);
		head[s]=pi++;
	}
	for(int f=0;f<30;f++)
	{
		//fill(flow,flow+10,0);
		flow[1]=f;
		int cost=maxCost(1,head[1]);
		if(cost>=0)
		{
			cout<<f<<" "<<cost<<endl;
			return 0;
		}
	}
	cout<<"-1 -1"<<endl;
	return 0;
}
