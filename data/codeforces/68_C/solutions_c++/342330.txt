#include <cmath>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long lol;

#define sz(c) ((int) (c).size())
#define pb push_back
#define mp make_pair
#define fi first
#define se second

const int inf = 1e9;

int n, cost;
int a[10];
int l[10][10], h[10][10], b[10][10];
pair <int, int> res;

void go(int);

void rec(int p, int k, int x)
{
	if (k == n) 
	{
		if (x == 0) go(p + 1);
		return;
	}

	for (int i = l[p][k]; i <= h[p][k]; ++i)
	{
		if (x - i < 0) break;

		a[k] += i;
		if (i != 0) cost += b[p][k] + i * i;
		rec(p, k + 1, x - i);
		if (i != 0) cost -= b[p][k] + i * i;
		a[k] -= i;
	}
}

void go(int k)
{
	if (k == n - 1)
	{
		res = min(res, mp(a[k], -cost));
		return;
	}
	rec(k, k + 1, a[k]);
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n * (n - 1) / 2; ++i)
	{
		int x, y, ll, hh, aa;
		scanf("%d%d%d%d%d", &x, &y, &ll, &hh, &aa);
		--x, --y;
		l[x][y] = ll;
		h[x][y] = hh;
		b[x][y] = aa;
	}

	res = mp(inf, -inf);
	for (int i = 0; i <= 75; ++i)
	{
		a[0] = i;
		go(0);
	}

	if (res.fi == inf) res = mp(-1, 1);

	printf("%d %d\n", res.fi, -res.se);

	return 0;
}
