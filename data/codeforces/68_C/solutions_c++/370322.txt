#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cassert>
#include <vector>

using namespace std;

struct Pipe {
	int s, f, l, h, a;

	inline bool operator < (const Pipe& p) const {
		return s < p.s;
	}
};

vector<Pipe> vp;

int fuel[7], n, m, cost;

void gao(int x, int c) {
	if (x == m) {
		for (int i = 1; i < n; ++i) {
			if (fuel[i] != 0) {
				return;
			}
		}
		cost = max(cost, c);
	} else {
		for (int i = 1; i < vp[x].s; ++i) {
			if (fuel[i] != 0) {
				return;
			}
		}

		for (int i = vp[x].l; i <= vp[x].h; ++i) {
			fuel[vp[x].s] -= i;
			fuel[vp[x].f] += i;
			int cEx = (i == 0) ? 0 : (vp[x].a + i * i);
			gao(x + 1, c + cEx);
			fuel[vp[x].s] += i;
			fuel[vp[x].f] -= i;
		}
	}
}

int main() {
	scanf("%d", &n);

	int minFlow = 0, maxFlow = 0;
	m = n * (n - 1) / 2;
	for (int i = n * (n - 1) / 2; i > 0; --i) {
		Pipe p;
		scanf("%d%d%d%d%d", &p.s, &p.f, &p.l, &p.h, &p.a);
		vp.push_back(p);
		if (p.s == 1) {
			maxFlow += p.h;
			minFlow += p.l;
		}
	}

	sort(vp.begin(), vp.end());

	int ans;
	cost = -1;
	for (ans = minFlow; ans <= maxFlow && cost == -1; ++ans) {
		memset(fuel, 0, sizeof(fuel));
		fuel[1] = ans;
		gao(0, 0);
	}
	if (cost != -1) {
		printf("%d %d\n", ans - 1, cost);
	} else {
		puts("-1 -1");
	}
	return 0;
}
