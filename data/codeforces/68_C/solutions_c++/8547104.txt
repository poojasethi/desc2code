#include<cstdio>
#include<algorithm>
#define N 7
using namespace std;
int value[N][N],small[N][N],big[N][N],lowest[N],s[N],t[N];
int min_flow,ans,n,m,x,y,i,j;
inline int calc(int x,int v){return (!x)?0:x*x+v;}
void dfs(int k,int go,int flow,int sum)
{
  if (flow>min_flow) return;
  if (k==n) 
  {
    if (flow<min_flow||flow==min_flow&&sum>=ans)
      min_flow=flow,ans=sum;
    return;
  }
  if (go>n) {dfs(k+1,k+2,flow,sum);return;}
  if (go==n&&k>1) 
  {
    int F=t[k]-s[k];
    if (F>=small[k][go]&&F<=big[k][go]) 
    {
      s[k]+=F;t[go]+=F;
      dfs(k+1,k+2,flow,sum+calc(F,value[k][go]));
      s[k]-=F;t[go]-=F;
    }
    return;
  }
  for (int i=small[k][go];i<=big[k][go];i++)
  {
    s[k]+=i;t[go]+=i;
    //if (k+1!=go||t[go]>=lowest[go])
    dfs(k,go+1,flow+((k==1)?i:0),sum+calc(i,value[k][go]));
    s[k]-=i;t[go]-=i;
  }
  
}
int main()
{
  scanf("%d",&n);
  m=n*(n-1)/2;
  for (i=1;i<=m;i++)
  {
    scanf("%d%d",&x,&y);
    scanf("%d%d%d",&small[x][y],&big[x][y],&value[x][y]);
  }
  for (i=1;i<n;i++)
    for (j=i+1;j<=n;j++)
      lowest[i]+=small[i][j];
  min_flow=1000000;ans=0;dfs(1,2,0,0);
  if (min_flow==1000000) min_flow=-1,ans=-1;
  printf("%d %d",min_flow,ans);
  return 0;
}
