inf = 999999999

n = input()
v = map(int, raw_input().split())
dp = []
path = []

def qoo(a, b):
    if a >= n and b >= n:
        return 0
    if b >= n:
        return v[a]
    if dp[a][b] == inf:
        dp[a][b] = qoo(b + 1, b + 2) + max(v[a], v[b])
        if b + 1 < n:
            t = qoo(b, b + 2) + max(v[a], v[b + 1])
            if t < dp[a][b]:
                dp[a][b] = t
                path[a][b] = 1
            t = qoo(a, b + 2) + max(v[b], v[b + 1])
            if t < dp[a][b]:
                dp[a][b] = t
                path[a][b] = 2

    return dp[a][b]

def path_dump(a, b):
    if a >= n and b >= n:
        pass
    elif b >= n:
        print a + 1
    else:
        if path[a][b] == 0:
            print a + 1, b + 1
            path_dump(b + 1, b + 2)
        elif path[a][b] == 1:
            print a + 1, b + 2
            path_dump(b, b + 2)
        else:
            print b + 1, b + 2
            path_dump(a, b + 2)

if n == 1:
    print max(v)
    print 1
else:
    dp = [[inf] * n for _ in xrange(n)]
    path = [[0] * n for _ in xrange(n)]
    print qoo(0, 1)
    path_dump(0, 1)