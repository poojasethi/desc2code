inf = 999999999

n = input()
v = map(int, raw_input().split())
dp = []
path = []
choo = []

def qoo(a, b):
    if a >= n and b >= n:
        return 0
    if b >= n:
        return v[a]
    if dp[a][b] == inf:
        dp[a][b] = qoo(b + 1, b + 2) + max(v[a], v[b])
        path[a][b] = b + 1, b + 2
        choo[a][b] = a + 1, b + 1
        if b + 1 < n:
            t = qoo(b, b + 2) + max(v[a], v[b + 1])
            if t < dp[a][b]:
                dp[a][b] = t
                path[a][b] = b, b + 2
                choo[a][b] = a + 1, b + 1 + 1
            t = qoo(a, b + 2) + max(v[b], v[b + 1])
            if t < dp[a][b]:
                dp[a][b] = t
                path[a][b] = a, b + 2
                choo[a][b] = b + 1, b + 1 + 1

    return dp[a][b]

def path_dump((a, b)):
    if a >= n and b >= n:
        pass
    elif b >= n:
        print a + 1
    else:
        print "%d %d" % choo[a][b]
        path_dump(path[a][b])

if n == 1:
    print max(v)
    print 1
else:
    dp = [[inf] * n for _ in xrange(n)]
    path = [[(-1, -1) for x in xrange(n)] for _ in xrange(n)]
    choo = [[(-1, -1) for x in xrange(n)] for _ in xrange(n)]
    print qoo(0, 1)
    path_dump((0, 1))