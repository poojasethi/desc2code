#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 1000 + 10;
int f[N][N];
int r[N][N];
int v[N];
int n;

int dp(int a, int b)
{
    if (f[a][b] > 0)
        return f[a][b];
    if (b > n)
    {
        return f[a][b] = v[a];
    }
    f[a][b] = dp(b+1, b+2) + max(v[a], v[b]);
    r[a][b] = b+1;

    int tmp = dp(a, b+2) + max(v[b], v[b+1]);
    if (tmp < f[a][b])
    {
        f[a][b] = tmp;
        r[a][b] = a;
    }
    tmp = dp(b, b+2) + max(v[a], v[b+1]);
    if (tmp < f[a][b])
    {
        f[a][b] = tmp;
        r[a][b] = b;
    }
    return f[a][b];
}
void print(int a, int b)
{
    if (b > n)
    {
        if (a <= n)
            cout << a << endl;
        return;
    }
    if (r[a][b] == a)
    {
        cout << b << " " << b+1 << endl;
    }
    else if (r[a][b] == b)
    {
        cout << a << " " << b+1 << endl;
    }
    else if (r[a][b] == b+1)
    {
        cout << a << " " << b << endl;
    }
    print(r[a][b], b+2);
}
int main()
{
    memset(f, -1, sizeof(f));
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> v[i];
    cout << dp(1,2) << endl;
    print(1,2);
}