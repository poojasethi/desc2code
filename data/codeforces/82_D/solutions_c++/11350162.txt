#include <iostream>
#include <algorithm>

using namespace std;

const int maxn = 1000+1;

int n;
int a[maxn];

int dp[maxn][maxn];

int memo(int x, int y) {
	if (y > n)
		return a[x];
	if (y == n)
		return max(a[x], a[y]);
	if (dp[x][y] != -1)
		return dp[x][y];
	return dp[x][y] = min(max(a[x], a[y])+memo(y+1, y+2), min(max(a[x], a[y+1])+memo(y, y+2), max(a[y], a[y+1])+memo(x, y+2)));
}

void trace(int x, int y) {
//	cerr <<"!!!" << x << " " << y << endl;
	if (y > n) {
		cout << x << endl;
		return;
	}
	if (y == n) {
		cout << x << " " << y << endl;
		return;
	}
	if (dp[x][y] == max(a[x], a[y])+memo(y+1, y+2)) {
		cout << x << " " << y << endl;
		trace(y+1, y+2);
		return;
	}
	if (dp[x][y] == max(a[x], a[y+1])+memo(y, y+2)) {
		cout << x << " " << y+1 << endl;
		trace(y, y+2);
		return;
	}
	if (dp[x][y] == max(a[y], a[y+1])+memo(x, y+2)) {
		cout << y << " " << y+1 << endl;
		trace(x, y+2);
		return;
	}
}

int main() {
	cin >> n;
	for (int i = 1; i <= n; ++i)
		cin >> a[i];
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= n; ++j)
			dp[i][j] = -1;
	cout << memo(1, 2) << endl;
	trace(1, 2);
	cout << endl;
	return 0;
}

