#include <stdio.h>
#include <algorithm>
using namespace std;
#define REP(i,n) for(int(i)=0;(i)<(int)(n);(i)++)
const int MAX=(int)1e3+5;
typedef struct {
	int x,y,i,k;
} ans;
ans ret[MAX][MAX];
int n,dp[MAX][MAX],a[MAX];
int main()
{
	scanf("%d",&n);
	for (int i=1; i<=n; i++) scanf("%d",a+i);
	for (int i=1; i<=n; i++) {
		dp[i][n]=a[i];
		ret[i][n]={i,i,n+1,n+1};
		dp[i][n-1]=max(a[i],a[n]);
		ret[i][n-1]={i,n,n+1,n+1};
	}
	for (int i=n-2; i>=1; i--) {
		for (int k=n-2; k>=i; k--) {
			dp[i][k]=max(a[i],a[k+1])+dp[k+2][k+2];
			ret[i][k]={i,k+1,k+2,k+2};
			if (max(a[i],a[k+2])+dp[k+1][k+2]<dp[i][k]) {
				dp[i][k]=max(a[i],a[k+2])+dp[k+1][k+2];
				ret[i][k]={i,k+2,k+1,k+2};
			}
			if (max(a[k+1],a[k+2])+dp[i][k+2]<dp[i][k]) {
				dp[i][k]=max(a[k+1],a[k+2])+dp[i][k+2];
				ret[i][k]={k+1,k+2,i,k+2};
			}
		}
	}
	printf("%d\n",dp[1][1]);
	int ai=1,ak=1;
	for (int i=1; i<=(n%2?n/2+1:n/2); i++) {
		if (ret[ai][ak].x!=ret[ai][ak].y)
			printf("%d %d\n",ret[ai][ak].x,ret[ai][ak].y);
		else
			printf("%d\n",ret[ai][ak].x);
		int ti=ai,tk=ak;
		ai=ret[ti][tk].i;
		ak=ret[ti][tk].k;
	}
	return 0;
}
	
