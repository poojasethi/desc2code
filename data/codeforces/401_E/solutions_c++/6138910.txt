#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef long long int ll;

ll modulo;

ll raiz(ll x)
{
  ll r=sqrt(double(x));
  while (r>0 and r*r>x) r--;
  while ((r+1)*(r+1)<=x) r++;
  return r;
  /*
  ll r=0;
  while ((r+1)*(r+1)<=x) r++;
  return r;
  */
}

const int limite=200000;
int esprimo[limite];
vector<int> factor[limite];

ll cuantos(ll p,ll tope,ll n)
{
  if (p>tope) return 0;
  ll k=tope/p;
  //cout<<"llamada "<<p<<" "<<tope<<" "<<k<<" "<<(k*n%modulo-k*(k+1)/2%modulo*p%modulo+k)%modulo<<endl;
  return (k*n-k*(k+1)/2*p+k)%modulo;
}

ll ajustainf(ll l,ll x)
{
  if (x>=l) return 0;
  ll y=raiz(l*l-x*x);
  while (y*y+x*x>=l*l) y--;
  return y;
}

ll ajustasup(ll r,ll x,ll n)
{
  if (x>=r) return 0;
  ll y=raiz(r*r-x*x);
  y=min(y,n);
  return y;
}

int main()
{
  for (int i=2;i<limite;i++)
    esprimo[i]=1;
  for (int i=2;i<limite;i++) {
    if (esprimo[i]) {
      factor[i].push_back(i);
      for (int j=i+i;j<limite;j+=i) {
	esprimo[j]=0;
	factor[j].push_back(i);
      }
    }
  }
  ll n,m,l,r;
  cin>>n>>m>>l>>r>>modulo;
  ll sol=0;
  if (l<=1 and r>=1) sol=(n+1)*m+(m+1)*n;
  sol%=modulo;
  for (int x=1;x<=m;x++) {
    //ll solant=sol;
    ll inf=ajustainf(l,x);
    ll sup=ajustasup(r,x,n);
    //cout<<x<<" "<<inf<<" "<<sup<<endl;
    if (inf<sup) {
      vector<int> &f=factor[x];
      int numf=int(f.size());
      int cotaf=1<<numf;
      for (int c=0;c<cotaf;c++) {
	int s=1;
	ll p=1;
	for (int b=0;b<numf;b++) {
	  if (c&(1<<b)) {
	    p*=f[b];
	    s*=-1;
	  }
	}
	sol=(sol+s*2*(cuantos(p,sup,n)-cuantos(p,inf,n))*(m-x+1))%modulo;
      }
    }
    //cout<<sol-solant<<endl;
  }
  sol=(sol%modulo+modulo)%modulo;
  cout<<sol<<endl;
}
