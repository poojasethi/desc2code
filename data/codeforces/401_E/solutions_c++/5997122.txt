#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <bitset>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <climits>
typedef long long LL;
using namespace std;

int N,M,mod;
vector<int> fac[110000];

LL calc(LL now,LL r){
    LL c=r/now;
    return (c*(M+1)%mod-(c+1)*c/2%mod*now%mod)%mod;
}

void dfs(int x,int i,int now,int d,int l,int r,LL &res){
    if (i==fac[x].size()){
        LL c=r/now;
        res+=(calc(now,r)-calc(now,l-1))*d+mod;
        res%=mod;
        return;
    }
    dfs(x,i+1,now*fac[x][i],-d,l,r,res);
    dfs(x,i+1,now,d,l,r,res);
}

LL gao(int i,int l,int r){
    LL res=0;
    dfs(i,0,1,1,l,r,res);
    return res;
}

int main(){
    LL l,r;
    cin >> N >> M >> l >> r >> mod;
    LL i,j;
    for (i=2;i<=N;i++)
        if (!fac[i].size()){
            for (j=i;j<=N;j+=i) fac[j].push_back(i);
        }
    LL ans=0;
    ans%=mod;
    for (i=1;i<=N;i++){
        if (i>r) break;
        LL p=i>=l?1:sqrt(l*l-i*i),q=min(int(sqrt(r*r-i*i)),M);
        if (i*i+p*p<l*l) ++p;
        if (p<=q){
            ans+=gao(i,p,q)*(N-i+1)%mod;
            ans%=mod;
        }

    }
    ans<<=1; ans%=mod;
    if (l==1) ans+=LL(N-0+1)*(M-1+1)%mod+LL(N-1+1)*(M-0+1)%mod;  // i=0 j=1 ; i=1 j=0;
    ans%=mod;
    cout << ans << endl;
}

		    	  	 	 	 	   			   	