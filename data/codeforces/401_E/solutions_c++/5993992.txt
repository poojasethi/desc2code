#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define N 100010
#define db double
#define int64 long long
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
int i,j,k,n,m,mo;
int64 an,s,sum,l,r,L,R;
int f[N],p[N],g[N],F[N];
void dfs(int x,int y,int z) {
	if (x>*g) {
		int fi=L/y,en=R/y;
		if (fi==en) return;
		int64 l=(fi+1)*y,r=en*y;
		int64 re=(R+1)*(en-fi)-(l+r)*(en-fi)/2;
		re%=mo;
		sum=(sum+re*z)%mo;
		s+=(en-fi)*z;
		return;
	}
	dfs(x+1,y,z);
	dfs(x+1,y*g[x],z*-1);
}
inline int64 work(int len) {
	int k=len; int64 re=0;
	s=sum=*g=0; for (;k>1;k/=p[f[k]]) if (g[*g]!=p[f[k]]) g[++*g]=p[f[k]];
	dfs(1,1,1);
	re=s*(m-1-R)+sum;
	re%=mo;
	return re*2%mo;
}
int main() {
	For(i,2,N-1) {
		if (!f[i]) p[++*p]=i,f[i]=*p;
		for (j=1;j<=f[i]&&i*p[j]<N;j++) f[i*p[j]]=j;
	}
	scanf("%d%d%I64d%I64d%d",&n,&m,&l,&r,&mo); n++,m++;
	if (l==1) an=((int64)n*(m-1)+(int64)(n-1)*m)%mo;
	L=m-1,R=m-1;
	For(i,1,n-1) {
		for (;L&&L*L+1ll*i*i>=l*l;L--);
		for (;R&&R*R+1ll*i*i>r*r;R--);
		if (L>=R) continue;
		an=(an+work(i)*(n-i))%mo;
	}
	if (an<0) an+=mo;
	printf("%I64d\n",an);
	//for(;;);
	return 0;
}
