// by S~~

#include <cmath>
#include <cstdio>
#include <vector>
#include <cassert>
#include <algorithm>

#define MX [100005]
#define sqr(x) (1LL*x*x)
#define LL long long
using namespace std;

const double eps=1e-9;
vector<int>yz MX;
int n,m,P,L,R,p MX,prime MX,miu MX;
LL ans,l,r;

inline LL calc(int delta_x,int m){
    LL ret=0;int size=yz[delta_x].size();
    for(int p=0;p<size;++p){
        int d=yz[delta_x][p];
        (ret+=miu[d]*(((((1LL*n)<<1)-(m/d+1)*d+2)*(m/d)>>1)%P)+P)%=P;
        //assert(ret>=0);
    }return ret;
}

int main(){
    //freopen("games.in","r",stdin);//freopen("games.out","w",stdout);
    scanf("%d%d%d%d%d",&n,&m,&L,&R,&P);
    if(n<m)swap(n,m);
    for(int i=1;i<=m;++i)
    for(int j=i;j<=m;j+=i)
    yz[j].push_back(i);
    miu[1]=1;
    for(int i=2;i<=m;++i){
        if(!p[i])miu[prime[++*prime]=p[i]=i]=-1;
        else if(p[i]==p[i/p[i]])miu[i]=0;
        else miu[i]=miu[p[i]]*miu[i/p[i]];
        for(int j=1;j<=*prime && prime[j]<=p[i] && prime[j]*i<=m;++j)
        p[prime[j]*i]=prime[j];
    }
    int lim=min(m,R);
    for(int delta_x=1;delta_x<=lim;++delta_x){
        r=min((LL)sqrt(sqr(R)-sqr(delta_x)),1LL*n);
        if(delta_x>=L)l=0;else
        l=(LL)(sqrt(sqr(L)-sqr(delta_x))-eps);
        if(l>=r)continue;
        //assert(l>=0);
        //assert(r>=0);
        LL tmp=calc(delta_x,r)%P;
        LL tmpp=calc(delta_x,l)%P;
        //assert(tmp>=0);
        //assert(tmpp>=0);
        //assert((tmp-tmpp+P)%P>=0);
        //assert(m-delta_x+1>=0);
        (ans+=((tmp-tmpp+P)%P)*((m-delta_x+1)%P))%=P;
        //assert(ans>=0);
    }
    (ans<<=1)%=P;
    if(L<=1 && 1<=R)(ans+=1LL*n*(m+1)%P+1LL*m*(n+1)%P)%=P;
    //assert(ans>=0);
    printf("%I64d\n",ans);
}
