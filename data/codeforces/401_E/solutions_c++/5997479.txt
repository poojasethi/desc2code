#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;
const int N = 100000+10;
typedef long long LL;
LL n, m;
LL l, r, p;
int d[N][10];
int num[N];
LL ans;
void add(LL &ans, LL v) {
    v = (v % p + p) % p;
    ans = (ans + v) % p;
}
void dfs(LL st, LL v, LL lo, LL ro, LL now, LL &c, LL &sm, int fg) {
    for (int i = st+1; i < num[v]; i++) {
        LL tmp = now * d[v][i];
        LL ll = lo / tmp + (lo % tmp ? 1 : 0);
        LL rr = ro / tmp;
        c += (rr - ll + 1) * fg;
        add(sm,((rr - ll + 1) * (rr + ll) / 2 % p * tmp % p) * fg);
        dfs(i, v, lo, ro, tmp, c, sm, -1 * fg);
    }
}
void solve(LL v, LL lo, LL ro) {
    if (ro < lo) return;
    LL sm = (LL)(ro - lo + 1) * (ro + lo) / 2 % p;
    LL c = ro - lo + 1;

    dfs(-1, v, lo, ro, 1, c, sm, -1);

    add(ans ,(LL)(n - v + 1) * ((LL)(m + 1) % p * c % p - sm));
}
int main() {
    while (cin >> n >> m) {
        cin >> l >> r >> p;
        memset(num, 0, sizeof(num));
        for (int i = 2; i <= n; i++) {
            if (num[i] == 0) {
                for (int j = i; j <= n; j += i) {
                    d[j][num[j]++] = i;
                }
            }
        }
        LL lo = l, ro = r;
        ans = 0;
        for (LL i = 1; i <= n; i++) {

            while (l * l - (LL)i * i <= (lo - 1) * (lo - 1) && lo > 1)
                lo--;
            while (r * r - (LL)i * i < (ro) * (ro) && ro >= 1) ro--;
         //   cout << i << " " << lo << " " << ro << endl;
            solve(i, lo, min(m,ro));
           // cout << ans << endl;
        }
        if (l <= 1)
        cout << (ans * 2 % p+ (LL)n * m % p * 2 + n + m) % p << endl;
        else cout << ans * 2 % p << endl;
    }

    return 0;
}

	  			   		  		 	 	  	 		