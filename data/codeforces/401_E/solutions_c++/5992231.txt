#include <iostream>
#include <string.h>
#include <cstdio>
#include <vector>
#include <cmath>

using namespace std;
typedef long long ll;
typedef vector <int> vi;
const double eps = 1e-12;

template <class T> inline T abs1(T a) {return a < 0 ? -a : a;}
inline int jud(double a, double b){
	if(abs(a) < eps && abs(b) < eps) return 0;
	else if(abs1(a - b) / abs1(a) < eps) return 0;
	if(a < b) return -1;
	return 1;
}
const int maxn = 200000;
int mod;
vi have[maxn];
int n, m, l, r, p;
ll dengcha(ll pri, ll n) {
	return n * (n + 1) / 2 % mod * pri % mod;
}
ll justdoit(ll n, ll m, double maxl) {
	ll ans = 0;
	for(ll i = (ll)maxl, link = 1; i > 0; i--) if(i <= n){
		while(jud(1.0 * hypot(i, link), maxl) != 1 && link <= m) link++;
		link--;
		link = min(link, m);
		ll cnt = 0, rcnt = 0;
		for(int mask = 0; mask < 1 << (have[i].size()); mask++) {
			ll co = __builtin_popcount(mask) & 1;
			co = -(co * 2 - 1);
			ll num = 1;
			for(int j = 0; j < (int)have[i].size(); j++) {
				if(mask & (1 << j)) num *= have[i][j];
			}
			cnt += co * dengcha(num, link / num);
			rcnt += co * link / num;
		}
		cnt = rcnt * (m + 1) - cnt;
		cnt %= mod;
		ans = (ans + cnt * (n - i + 1) % mod) % mod;
	}
	return ans % mod;
}
int main(){
	scanf("%d%d%d%d%d", &n, &m, &l, &r, &mod);
	for(int i = 2; i < maxn; i++) if(have[i].size() == 0)
		for(int j = i; j < maxn; j += i) have[j].push_back(i);
	ll ans = (justdoit(n, m, r) + mod - justdoit(n, m, l - 0.000001)) % mod;
	ans *= 2;
	if(l == 1)
		ans += 1ll * n * (m + 1) % mod + 1ll * m * (n + 1) % mod;
	cout << ans % mod << endl;

    return 0;
}



