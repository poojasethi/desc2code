#include <cmath>
#include <map>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <bitset>
#include <memory.h>
#include <functional>
#include <queue>
#include <fstream>
#include <ctime>
#include <deque>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <cctype> 
#include <numeric> 
#include <iomanip>
#include <assert.h>
using namespace std;
#define sqr(_) ((_)*(_))

typedef pair<int, int> Pii;
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define SZ(x) ((int)(x).size())

typedef long long LL;

const int MAXN = (int)2e5 + 10, A = 3, MOD = (int)1e9 + 7;

struct seg_tree
{
	int l, r;
	LL hash;
}t[MAXN * 100];
vector<Pii> e[MAXN];
LL h[MAXN], p[MAXN], Pow[MAXN];
int n, m, rt0, N, L, tot, pre[MAXN], S, T;

int Build(int l, int r)
{
	int x = ++tot, mid = (l + r) >> 1;
	if (l == r) return x;
	t[x].l = Build(l, mid);
	t[x].r = Build(mid + 1, r);
	return x;
}
void init()
{
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= m; ++i)
	{
		int x, y, z;
		scanf("%d%d%d", &x, &y, &z);
		L = max(L, z);
		e[x].pb(mp(y, z)), e[y].pb(mp(x, z));
	}
	scanf("%d%d", &S, &T);
	L += 20;
	rt0 = Build(0, L);
	p[0] = Pow[0] = 1;
	for (int i = 1; i <= L + 2; ++i)
		p[i] = p[i - 1] * 2 % MOD,
		h[i] = h[i - 1] * A + 1,
		Pow[i] = Pow[i - 1] * A;
}
bool cmp(int x, int y)
{
	if (!t[x].l) return t[x].hash < t[y].hash;
	if (t[t[x].l].hash == t[t[y].l].hash)
		return cmp(t[x].r, t[y].r);
	return cmp(t[x].l, t[y].l);
}
int Find(int x, int l, int r, int p)
{
	int mid = (l + r) >> 1;
	if (t[x].hash == h[r - l + 1])
		return l - 1;
	if (l == r) return l;
	if (p <= mid)
		return Find(t[x].l, l, mid, p);
	int w = Find(t[x].r, mid + 1, r, p);
	if (w > mid)
		return w;
	return Find(t[x].l, l, mid, p);
}
int Reset(int x, int y, int l, int r, int tl, int tr)
{
	if (tl > tr) return x;
	if (l == tl && r == tr)
		return y;
	int c = ++tot, mid = (l + r) >> 1;
	if (tr <= mid)
		t[c].l = Reset(t[x].l, t[y].l, l, mid, tl, tr),
		t[c].r = t[x].r;
	else
	if (tl > mid)
		t[c].l = t[x].l,
		t[c].r = Reset(t[x].r, t[y].r, mid + 1, r, tl, tr);
	else
		t[c].l = Reset(t[x].l, t[y].l, l, mid, tl, mid),
		t[c].r = Reset(t[x].r, t[y].r, mid + 1, r, mid + 1, tr);
	t[c].hash = t[t[c].l].hash * Pow[r - mid] + t[t[c].r].hash;
	return c;
}
int Ins(int x, int l, int r, int p)
{
	int c = ++tot, mid = (l + r) >> 1;
	if (l == r)
	{
		t[c].hash = 1;
		return c;
	}
	if (p <= mid)
		t[c].l = Ins(t[x].l, l, mid, p),
		t[c].r = t[x].r;
	else
	t[c].l = t[x].l,
	t[c].r = Ins(t[x].r, mid + 1, r, p);
	t[c].hash = t[t[c].l].hash * Pow[r - mid] + t[t[c].r].hash;
	return c;
}
int Ins(int x, int p)
{
	int w = Find(x, 0, L, p);
//	cout << w << " " << p << endl;
	x = Reset(x, rt0, 0, L, w + 1, p);
	x = Ins(x, 0, L, w);
//	cout << t[x].hash << endl;
	return x;
}
struct Int {
	int x;
	Int(): x(0) {}
	Int(int x): x(x) {}
	bool operator <(const Int &b) const {
		if (!x) return 1;
		if (!b.x) return 0;
		return cmp(b.x, x);
	}
}dis[MAXN];
bool vis[MAXN];
typedef pair<Int, int> PIi;
priority_queue<PIi> q;
int Query(int x, int l, int r)
{
	if (l == r) return t[x].hash;
	int mid = (l + r) >> 1;
	int a = Query(t[x].l, l, mid), b = Query(t[x].r, mid + 1, r);
	a = ((LL)a * p[r - mid] + (LL)b) % MOD;
	return a;
}
void solve()
{
	dis[S] = rt0;
	q.push(mp(dis[S], S));
	while (!q.empty())
	{
		int x = q.top().y;
		q.pop();
		if (vis[x]) continue ;
		vis[x] = 1;
		if (x == T) break;
		for (int i = 0; i < SZ(e[x]); ++i)
		{
			int y = e[x][i].x;
//			cout << x << " " << y << endl;
			int rx = Ins(dis[x].x, L - e[x][i].y);
//			cout << Query(rx, 0, L) << endl;
			if (dis[y] < rx)
				dis[y] = rx,
				pre[y] = x,
				q.push(mp(dis[y], y));
		}
	}
	if (!vis[T])
		puts("-1"), exit(0);
	printf("%d\n", Query(dis[T].x, 0, L));
	vector<int> v;
	for (int i = T; i; v.pb(i), i = pre[i]);
	reverse(v.begin(), v.end());
	cout << SZ(v) << endl;
	for (int i = 0; i < SZ(v); ++i)
		printf("%d ", v[i]);
	puts("");
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
#endif
	
	init();
	solve();
	
	fclose(stdin);
	fclose(stdout);
	return 0;
}
