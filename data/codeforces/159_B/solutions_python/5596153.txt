from Queue import * # Queue, LifoQueue, PriorityQueue
from bisect import * #bisect, insort
from datetime import * 
from collections import * #deque, Counter,OrderedDict,defaultdict
from sets import * #Set
import calendar
import heapq
import math
import copy
import itertools
myread = lambda : map(int,raw_input().split())
def solver():
    n,m = myread()
    marker = [myread() for i in range(n)]
    caps = [myread() for i in range(m)]
    marker.sort()
    caps.sort()
    marker_list = [ [] for i in range(1001)]
    caps_list = [ []  for i in range(1001)]

    #print caps,marker
    for x,y in marker:
        marker_list[y].append(x)
    for x,y in caps:
        caps_list[y].append(x)

    #print marker_list,caps_list
    ans_num = 0
    beautiful_num = 0
    for i in range(len(marker_list)):
        if marker_list[i] == 0 or caps_list[i] == 0:
            continue
        if len(marker_list[i]) < len(caps_list[i]):
            marker_list[i],caps_list[i] = caps_list[i],marker_list[i]
        ans_num += len(caps_list[i])
        marker_j = 0
        for x in caps_list[i]:
            while marker_j < len(marker_list[i]) and marker_list[i][marker_j] < x:
                marker_j += 1
            if marker_j != len(marker_list[i]):
                if marker_list[i][marker_j] == x:
                    beautiful_num += 1
                    marker_j += 1
        

    print ans_num,beautiful_num
            





if __name__ == "__main__":
    solver()
    
