#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
const int maxn=100050,maxm=15;
int n,m,q,ans;
char map[maxn][maxm];
int ts=0,l[maxn*2],r[maxn*2],tr[maxn*2][maxm];
bool vis[maxm];
void get(int x,int p)
{
	int i,j;
	for(i=1;i<=m;i++)
	{
		memset(vis,0,sizeof(vis));
		for(j=i;j&&j<=m;)
			if(vis[j]) { tr[x][i]=0;break; }
			else
			{
				vis[j]=1;
				if(map[p][j]=='^')
				{ tr[x][i]=(p-1)*maxm+j;break; }
				else j+=(map[p][j]=='<'?-1:1);
			}
		if(!j||j==m+1)
			tr[x][i]=p*maxm+j;
	}
}
void update(int x,int mid)
{
	int i,li=l[x],ri=r[x];
	for(i=1;i<=m;i++)
		if(tr[ri][i]/maxm==mid)
			tr[x][i]=tr[li][tr[ri][i]%maxm];
		else tr[x][i]=tr[ri][i];
}
void build(int x,int ll,int rr)
{
	if(ll==rr) { get(x,ll);return ; }
	int mid=(ll+rr)>>1;
	build(l[x]=++ts,ll,mid);
	build(r[x]=++ts,mid+1,rr);
	update(x,mid);
}
void modify(int x,int ll,int rr,int p)
{
	if(ll==rr) { get(x,ll);return ; }
	int mid=(ll+rr)>>1;
	if(p<=mid)
		modify(l[x],ll,mid,p);
	else 
		modify(r[x],mid+1,rr,p);
	update(x,mid);
}
int query(int x,int ll,int rr,int p)
{
	if(p/maxm==rr) return tr[x][p%maxm];
	int mid=(ll+rr)>>1;
	if(p/maxm>mid)
		p=query(r[x],mid+1,rr,p);
	if(!p) return p;
	if(p/maxm<=mid)
		p=query(l[x],ll,mid,p);
	return p;
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("data.in","r",stdin);
	freopen("data.out","w",stdout);
#endif
	int i,j,x,y;
	char ci;
	scanf("%d%d%d",&n,&m,&q);
	for(i=1;i<=n;i++)
		scanf("%s",map[i]+1);
	build(++ts,1,n);
	while(q--)
	{
		ci=getchar();
		while(ci!='A'&&ci!='C') ci=getchar();
		scanf("%d%d",&x,&y);
		if(ci=='C')
		{
			ci=getchar();
			while(ci!='^'&&ci!='<'&&ci!='>') ci=getchar();
			map[x][y]=ci;
			modify(1,1,n,x);
		}
		else 
		{
			ans=query(1,1,n,x*maxm+y);
			printf("%d %d\n",!ans?-1:ans/maxm,!ans?-1:ans%maxm);
		}
	}
	return 0;
}
