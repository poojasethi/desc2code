#include <bits/stdc++.h>
#define BIN 500
#define NMAX 105000
#define MMAX 12

using namespace std;

int n, m, q;
char g[NMAX][MMAX];
bool ok[NMAX][MMAX];
pair <int, int> go[NMAX][MMAX];

bool onGrid (int x, int y) {
  return x <= n && x >= 1 && y >= 1 && y <= m;
}

pair <int, int> dfs (int x, int y, int b, char l) {
  if (!onGrid (x, y)) return make_pair (x, y);
  if (x / BIN != b) return make_pair (x, y);
  if (ok[x][y]) return go[x][y];
  if (g[x][y] == '^') {
    go[x][y] = dfs (x - 1, y, b, g[x][y]);
  }
  else if (g[x][y] == '<') {
    if (l == '>') {
      go[x][y] = make_pair (-1, -1);
    }
    else {
      go[x][y] = dfs (x, y - 1, b, g[x][y]);
    }
  }
  else {
    if (l == '<') {
      go[x][y] = make_pair (-1, -1);
    }
    else {
      go[x][y] = dfs (x, y + 1, b, g[x][y]);
    }
  }
  ok[x][y] = true;
  return go[x][y];
}

pair <int, int> query (int x, int y) {
  while (onGrid (x, y)) {
    pair <int, int> b = go[x][y];
    x = b.first;
    y = b.second;
  }
  return make_pair (x, y);
}

int main() {
  scanf ("%d %d %d", &n, &m, &q);
  for (int i = 1; i <= n; i++) {
    scanf ("%s", g[i] + 1);
  }
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      dfs (i, j, i / BIN, -1);
      //      printf ("%d %d -> %d %d\n", i, j, go[i][j].first, go[i][j].second);
    }
  }
  for (int i = 0; i < q; i++) {
    char s[10];
    int x, y;
    scanf ("%s %d %d", s, &x, &y);
    if (s[0] == 'A') {
      pair <int, int> ans = query (x, y);
      printf ("%d %d\n", ans.first, ans.second);
    }
    else {
      char t[10];
      scanf ("%s", t);
      g[x][y] = t[0];
      int lo = (x / BIN) * BIN;
      int hi = lo + BIN - 1;
      lo = max (lo, 1);
      hi = min (hi, n);
      for (int i = lo; i <= hi; i++) {
        for (int j = 1; j <= m; j++) {
          ok[i][j] = false;
        }
      }
      for (int i = lo; i <= hi; i++) {
        for (int j = 1; j <= m; j++) {
          dfs (i, j, i / BIN, -1);
        }
      }
    }
  }
}
