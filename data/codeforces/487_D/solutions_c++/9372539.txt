#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define N 100010
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int x,y;
};
struct tree {
	ww a[20];
	int x;
} tr[N*4],O,V;
int i,j,k,n,m,q,flag;
char p[N][20];
inline void Gao(int q,int x) {
	int i,j;
	tr[q].x=x;
	For(i,1,m) {
		tr[q].a[i]=(ww){-1,-1};
		int ff[20]={};
		for (j=i;j&&j<=m;) {
			if (ff[j]) goto end;
			ff[j]=1;
			if (p[x][j]=='<') j--;
			else if (p[x][j]=='>') j++;
			else if (p[x][j]=='^') {
				tr[q].a[i]=(ww){x-1,j};
				goto end;
			}
		}
		if (!j) tr[q].a[i]=(ww){x,0};
		if (j>m) tr[q].a[i]=(ww){x,m+1};
		end:;
	}
}
inline void update(tree &a,tree b,tree c) {
	int i;
	For(i,1,m) {
		if (c.a[i].x==b.x) a.a[i]=b.a[c.a[i].y];
		else a.a[i]=c.a[i];
	}
	a.x=c.x;
}
void build(int q,int x,int y) {
	if (x==y) {
		Gao(q,x);
		return;
	}
	int mid=(x+y)/2;
	build(q*2,x,mid);
	build(q*2+1,mid+1,y);
	update(tr[q],tr[q*2],tr[q*2+1]);
}
void change(int q,int x,int y,int k,int t,char v) {
	if (x==y) {
		p[x][t]=v;
		Gao(q,x);
		return;
	}
	int mid=(x+y)/2;
	if (k<=mid) change(q*2,x,mid,k,t,v);
	else change(q*2+1,mid+1,y,k,t,v);
	update(tr[q],tr[q*2],tr[q*2+1]);
}
void cal(int q,int x,int y,int l,int r) {
	if (l<=x&&y<=r) {
		int i;
		if (!flag) flag=1,O=tr[q];
		else V=O,update(O,V,tr[q]);
		return;
	}
	int mid=(x+y)/2;
	if (l<=mid) cal(q*2,x,mid,l,r);
	if (mid<r) cal(q*2+1,mid+1,y,l,r);
}
int main() {
	scanf("%d%d%d",&n,&m,&q);
	For(i,1,n) scanf("%s",p[i]+1);
	build(1,1,n);
	For(i,1,q) {
		int x,y;
		char s[10];
		scanf("%s%d%d",s,&x,&y);
		if (s[0]=='A') {
			flag=0;
			cal(1,1,n,1,x);
			printf("%d %d\n",O.a[y].x,O.a[y].y);
		} else {
			scanf("%s",s);
			change(1,1,n,x,y,s[0]);
		}
	}
	return 0;
}
