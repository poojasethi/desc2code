#include<cstdio>
#include<iostream>
#include<cstring>
#include<string>
#include<algorithm>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<cstdlib>
#include<ctime>
#include<cmath>
using namespace std;
typedef long long LL;
#define N 100010
#define M 20

int n, m, q, size, amt;
char maz[N][M];
int to[N][M][2], vis[N][M];

void find(int x, int y, int up) {
	vis[x][y] = 1;
	if (maz[x][y] == '^') {
		if (x == up)
			to[x][y][0] = x - 1, to[x][y][1] = y;
		else
			to[x][y][0] = to[x - 1][y][0], to[x][y][1] = to[x - 1][y][1];
	} else if (maz[x][y] == '<') {
		if (y == 1)
			to[x][y][0] = x, to[x][y][1] = 0;
		else if (maz[x][y - 1] == '>')
			to[x][y][0] = -1, to[x][y][1] = -1;
		else
			to[x][y][0] = to[x][y - 1][0], to[x][y][1] = to[x][y - 1][1];
	} else {
		if (y == m)
			to[x][y][0] = x, to[x][y][1] = m + 1;
		else if (maz[x][y + 1] == '<')
			to[x][y][0] = -1, to[x][y][1] = -1;
		else {
			find(x, y + 1, up);
			to[x][y][0] = to[x][y + 1][0];
			to[x][y][1] = to[x][y + 1][1];
		}
	}
}

void update(int block) {
	int up = block * size + 1, down = (block + 1) * size;
	for (int i = up; i <= n && i <= down; i++) {
		for (int j = 1; j <= m; j++)
			vis[i][j] = 0;
	}
	for (int i = up; i <= n && i <= down; i++) {
		for (int j = 1; j <= m; j++)
			if (!vis[i][j])
				find(i, j, up);
	}
}

void query(int x, int y) {
	int tmpx, tmpy;
	while (x > 0 && y > 0 && y <= m) {
		tmpx = to[x][y][0];
		tmpy = to[x][y][1];
		x = tmpx;
		y = tmpy;
	}
	printf("%d %d\n", x, y);
}

int main() {
	scanf("%d%d%d", &n, &m, &q);
	for (int i = 1; i <= n; i++) {
		scanf("%s", maz[i] + 1);
	}
	size = sqrt(0.5 + n);
	amt = n / size;
	if (amt * size < n)
		amt++;
	for (int i = 0; i < amt; i++)
		update(i);
	while (q--) {
		char op[5], c[5];
		int x, y;
		scanf("%s%d%d", op, &x, &y);
		if (op[0] == 'A')
			query(x, y);
		else {
			scanf("%s", c);
			maz[x][y] = c[0];
			update((x - 1) / size);
		}
	}
	return 0;
}
