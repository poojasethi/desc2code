#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <utility>
#define MAXN 100010
#define MAXM 12
#define SQRT 100

using namespace std;

int n,m,q;
char c[MAXN][MAXM];
pair<int,int> jump[MAXN][MAXM];

void dfs(int x, int y) {
    if (c[x][y-1] == '>') {
        jump[x][y-1] = jump[x][y];
        dfs(x,y-1);
    }
    if (c[x][y+1] == '<') {
        jump[x][y+1] = jump[x][y];
        dfs(x,y+1);
    }
    if (x % SQRT != 0 && c[x+1][y] == '^') {
        jump[x+1][y] = jump[x][y];
        dfs(x+1,y);
    }
}

void calc(int z) {
    for (int i = 1; i <= SQRT; i++) {
        for (int j = 1; j <= m; j++) {
            jump[z+i][j] = make_pair(-1,-1);
        }
    }
    for (int i = 1; i <= m; i++) {
        if (c[z+1][i] == '^') {
            jump[z+1][i] = make_pair(z,i);
            dfs(z+1,i);
        }
    }
    for (int i = 1; i <= SQRT; i++) {
        if (c[z+i][1] == '<') {
            jump[z+i][1] = make_pair(z+i,0);
            dfs(z+i,1);
        }
        if (c[z+i][m] == '>') {
            jump[z+i][m] = make_pair(z+i,m+1);
            dfs(z+i,m);
        }
    }
}

bool done(int x, int y) {
    return x <= 0 || y <= 0 || y >= m+1;
}

int main() {
    ios::sync_with_stdio(0);
    cin >> n >> m >> q;
    for (int i = 1; i <= n; i++) {
        cin >> (c[i]+1);
    }
    for (int i = 0; i < n; i += SQRT) {
        calc(i);
    }
    while (q--) {
        char ch;
        int x,y;
        cin >> ch >> x >> y;
        if (ch == 'A') {
            while (!done(x,y)) {
                int xx = jump[x][y].first;
                int yy = jump[x][y].second;
                x = xx;
                y = yy;
            }
            cout << x << ' ' << y << '\n';
        }
        else {
            cin >> ch;
            c[x][y] = ch;
            calc(((x-1) / SQRT) * SQRT);
        }
    }
}
