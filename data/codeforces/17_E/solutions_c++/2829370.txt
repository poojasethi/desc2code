#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define up(i) ((i)>>1)
#define dw(i) ((i)-1>>1)
const int tt=2000002;
const int mo=51123987;
int ans[tt*2],pl[tt],mi[tt],ovl[tt],sum[tt];
char s[tt],t[tt*2];
typedef long long ll;
void mana(char *s,int n){
	int po,mn,i;
	for (ans[0]=po=mn=0,i=1;i<n;i++){
		ans[i]=i>mn?1:min(mn-i+1,ans[po*2-i]);
		for (;s[i-ans[i]]==s[i+ans[i]];ans[i]++);
		if (i+ans[i]>mn) mn=i+ans[po=i]-1;
	}
}
inline void md(int &a){
	if (a>=mo) a-=mo;
}
inline void mdd(int &a){
	if (a<0) a+=mo; else
	if (a>=mo) a-=mo;
}
int main(){
//	freopen("17e.in","r",stdin);
//	freopen("17e.out","w",stdout);
	int n,i,j,len,res,lnk;
	scanf("%d",&n);
	scanf("%s",s);
	for (t[len=i=0]='?';i<n;i++){
		t[++len]=s[i];
		t[++len]=' ';
	}
	t[len]=':';
	mana(t,len);
	for (i=0;i<=n;i++) pl[i]=mi[i]=0;
	for (i=1;i<len;i++) pl[up(i)]++,mi[(i+ans[i])>>1]++;
	for (j=i=0;i<n;i++) ovl[i]=(j+=pl[i]-mi[i]);
	for (j=sum[n]=0,i=n-1;i>=0;i--){
		md(j+=ovl[i]);
		md(sum[i]=sum[i+1]+j);
	}
	for (res=0,i=1;i<len;i++)
		mdd(res+=sum[up(i-ans[i]+1)]-sum[dw(i)+1]);
	for (j=0,i=len-1;i;i--){
		lnk=ans[i]+(i&1)>>1;
		md(j+=lnk);
		md(res=(res-lnk*ll(j)+lnk*ll(lnk-1)/2)%mo+mo);
	}
	printf("%d\n",res);
	return 0;
}
