#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>

using std :: min;

typedef  long long  LL;

const int maxn = 2000010;
const int modulo = 51123987;

char text[maxn], text1[maxn * 2];
int l[maxn * 2];
LL fi[maxn * 2], fd[maxn * 2], inc[maxn], dec[maxn];

int main() {
	LL ans, s, si, sd;
	int n, t, i, j, mx = 0, pos;
	scanf("%d%s", &n, text);
	text1[0] = '$';  text1[1] = '_';
	for (i = 0, t = 2; i < n; ++ i) {
		text1[t ++] = text[i];
		text1[t ++] = '_';
	}
	memset(fi, 0, sizeof fi);
	memset(fd, 0, sizeof fd);
	for (i = 1; i < t; ++ i) {
		l[i] = mx > i ? min(mx - i, l[pos + pos - i]) : 1;
		while (text1[i - l[i]] == text1[i + l[i]])  l[i] ++;
		if (i + l[i] > mx) {
			mx = i + l[i];
			pos = i;
		}
		++ fi[i - l[i] + 1];  -- fi[i + 1];
		++ fd[i];  -- fd[i + l[i]];
	}
	for (i = 1, si = 0, sd = 0, j = 0; i < t; ++ i) {
		si += fi[i];  sd += fd[i];
		if (isalpha(text1[i])) {
			inc[j] = si;  dec[j ++] = sd;
		}
	}
	for (i = 0, s = 0, ans = 0; i < n; ++ i) {
		ans += s % modulo * inc[i] + inc[i] * (inc[i] - 1) / 2LL;
		ans %= modulo;
		s += inc[i];
		s -= dec[i];
	}
	printf("%I64d\n", ans);
	return 0;
}
