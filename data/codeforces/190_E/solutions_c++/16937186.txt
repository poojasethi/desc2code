#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;



vector <int> graph[500050];
vector < vector<int> > tmp;
int n, m;
int next[500050];

int fnext( int u ){
    if(next[u] == u) return u;
    return next[u] = fnext(next[u]);
}

void dfs( int u ){
    vector<int>::iterator c = graph[u].begin();
    tmp.back().push_back(u);
    next[u] = u + 1;
    for( int i = fnext(1); i <= n; i = fnext(i + 1) ){
        while( c != graph[u].end() && *c < i ) c++;
        if(c == graph[u].end() || *c != i) dfs(i);
    }
}

int main(){
    cin >> n >> m;
    for( int i = 0; i < m; i++ ){
        int u,v;
        scanf("%d %d",&u,&v);
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    for( int i = 1; i <= n; i++ ){
        sort(graph[i].begin(),graph[i].end());
    }
    for( int i = 1; i <= n + 1; i++ ){
        next[i] = i;
    }
    for( int i = 1; i <= n; i++ ){
        if(next[i] == i){
            tmp.push_back(vector<int>()); dfs(i);
        }
    }
    cout << tmp.size() << endl;
    for( int i = 0; i < tmp.size(); i++ ){
        printf ("%d", tmp[i].size());
        for( int j = 0; j < tmp[i].size(); j++ ){
            printf (" %d", tmp[i][j]);
        }
        printf ("\n");

    }
}