#include<cstdio>
#include<vector>
#include<list>
using namespace std;

const int MAX_N = 5e5 + 5;

#define all(v) (v).begin(), (v).end()

int n, m;
vector<int> adj[MAX_N];
vector<int> ans[MAX_N];
list<int> l;
int found[MAX_N];
int cnt[MAX_N];
int sz[MAX_N];
int par[MAX_N];

inline int find_par(int x){
  return x == par[x]? x: par[x] = find_par(par[x]);
}

int main(){ 
  scanf("%d %d", &n, &m);
  while(m--){
    int u, v;
    scanf("%d %d", &u, &v);
    adj[max(u, v)].push_back(min(u, v));
  }
  
  for(int u = 1; u <= n; u++){
    par[u] = u;
    sz[u] = 1;
  }
  
  for(int u = 1; u <= n; u++){
    for(int i = 0; i < (int)adj[u].size(); i++){
      int v = find_par(adj[u][i]);
      found[v] != u
	? cnt[v] = 1, found[v] = u
	: cnt[v]++;
    }
    
    for(list<int>::iterator it = l.begin(); it != l.end();){
      if(found[*it] != u or sz[*it] != cnt[*it]){
	int v = find_par(*it);
	par[v] = u;
	sz[u] += sz[v];
	it = l.erase(it);
      }
      else{
	it++;
      }
    }
    
    l.push_back(u);
  }

  for(int u = 1; u <= n; u++){
    ans[find_par(u)].push_back(u);
  }
  printf("%d\n", l.size());
  for(list<int>::iterator it = l.begin(); it != l.end(); it++){
    printf("%d ", sz[*it]);
    for(int i = 0; i < (int)ans[*it].size(); i++){
      printf("%d ", ans[*it][i]);
    }
    printf("\n");
  }
}
