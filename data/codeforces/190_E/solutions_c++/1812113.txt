#include<iostream>
#include<sstream>
#include<fstream>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<iomanip>
#include<cstring>
#include<vector>

using namespace std;

typedef long long ll;
typedef pair<int,int> Pii;
#define FOR(i,a,b) for(register int (i) =int(a); (i)<int(b) ; ++(i))
#define error(x) cerr<<#x<<" = "<< (x)<<endl
#define pb push_back
#define all(x) x.begin(),x.end()

const int MAX=1000*1000;
vector<int> adj[MAX],vert[MAX];
int n,m,cnt=0;
int par[MAX],mark[MAX];

int find(int x) {
	if(par[x]==x)	return x;
	par[x]=find(par[x]);
	return par[x];
}


void dfs(int v) {
	mark[v]=cnt;
	par[v]=v+1;
	FOR(i,0,adj[v].size()-1) while(find(adj[v][i]+1) < adj[v][i+1] && find(adj[v][i]+1)<n) dfs(find(adj[v][i]+1));
}

int main() {
	ios::sync_with_stdio(0);
	cin>>n>>m;
	FOR(i,0,m) {
		int x,y;
		cin>>x>>y;
		x--;	y--;
		adj[x].pb(y);
		adj[y].pb(x);
	}
	FOR(i,0,n+3)	par[i]=i;
	FOR(i,0,n)	adj[i].pb(n);
	FOR(i,0,n)	adj[i].pb(-1);
	FOR(i,0,n)	sort(all(adj[i]));
	FOR(i,0,n) if(par[i]==i) { dfs(i); cnt++;}
	FOR(i,0,n) vert[mark[i]].pb(i+1);
	int tot=0;
	FOR(i,0,n+3) if(vert[i].size()>0)	tot++;
	cout<<tot<<endl;
	FOR(i,0,n+3) if(vert[i].size()>0) {
		cout<<vert[i].size()<<" ";
		FOR(j,0,vert[i].size())	cout<<vert[i][j]<<" ";
		cout<<endl;
	}
}
