#include <cstdio>
#include <set>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

const int MAXN = 5e5 + 10;

set<int> rem;
queue<int> q;
vector<int> ng[MAXN];
bool mark[MAXN];
vector<int> comps[MAXN];

int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		x--; y--;
		ng[x].push_back(y);
		ng[y].push_back(x);
	}
	for (int i = 0; i < n; i++)
		rem.insert(i), sort(ng[i].begin(), ng[i].end());
	int cntId = 0;
	while (!rem.empty()) {
		int newX = *rem.begin();
		mark[newX] = true;
		rem.erase(rem.begin());
		q.push(newX);
		int compId = cntId++;
		while (!q.empty()) {
			int cur = q.front();
			comps[compId].push_back(cur);
			q.pop();
			vector<int> newlyAdd;
			for (set<int>::iterator it = rem.begin(); it != rem.end(); it++) {
				int u = *it;
				if (!binary_search(ng[cur].begin(), ng[cur].end(), u))
					newlyAdd.push_back(u), mark[u] = true, q.push(u);
			}
			for (int i = 0; i < newlyAdd.size(); i++)
				rem.erase(newlyAdd[i]);
		}
	}
	printf("%d\n", cntId);
	for (int i = 0; i < cntId; i++) {
		printf("%d", (int) comps[i].size());
		for (int j = 0; j < comps[i].size(); j++)
			printf(" %d", comps[i][j] + 1);
		printf("\n");


	}
	return 0;
}
