#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>
#define maxn 500050

using namespace std;

vector <int> G[maxn];
vector < vector<int> > bcc;
int n, m, u, v, next[maxn];

int find_next( int u )
{
    if(next[u] == u) return u;
    return next[u] = find_next(next[u]);
}

void dfs( int u )
{
    vector<int>::iterator c = G[u].begin();
    bcc.back().push_back(u);
    next[u] = u + 1;
    for( int i = find_next(1); i <= n; i = find_next(i + 1) )
    {
        while( c != G[u].end() && *c < i ) c++;
        if(c == G[u].end() || *c != i) dfs(i);
    }
}

int main()
{
    cin >> n >> m;

    for( int i = 0; i < m; i++ )
    {
        scanf( "%d%d", &u, &v );
        G[u].push_back(v);
        G[v].push_back(u);
    }

    for( int i = 1; i <= n; i++ ) sort(G[i].begin(),G[i].end());
    for( int i = 1; i <= n + 1; i++ ) next[i] = i;
    for( int i = 1; i <= n; i++ ) if(next[i] == i) 
    {bcc.push_back(vector<int>()); dfs(i);}

    cout << bcc.size() << endl;

    for( int i = 0; i < bcc.size(); i++ )
    {
        cout << bcc[i].size();
        for( int j = 0; j < bcc[i].size(); j++ )
            printf(" %d",bcc[i][j]);
        cout << endl;
    }

    return 0;
}