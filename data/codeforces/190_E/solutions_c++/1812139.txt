#include <iostream>
#include <vector>
#include <algorithm>

#define FOR(i, a, b)    for(int i=a; i<b; i++)
#define pb  push_back

using namespace std;

const int MAXN = 500000 + 1000;

int n, m, ans, par[MAXN];
vector <int> adj[MAXN], out[MAXN];
bool mark[MAXN];

int find(int x)
{
    if(par[x]==x)   return x;
    return par[x]=find(par[x]);
}

void dfs(int x)
{
    mark[x]=1;
    par[x]=x+1;
    FOR(i,0,adj[x].size())
    {
        int u=adj[x][i]+1;
        while(find(u)<(i==adj[x].size()-1?n:adj[x][i+1]))
        {
            out[ans].pb(find(u));
            dfs(find(u));
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin >> n >> m;
    FOR(i, 0, m)
    {
        int x,y;
        cin >> x >> y;
        x--;    y--;
        adj[x].pb(y);
        adj[y].pb(x);
    }
    FOR(i, 0, n)    adj[i].pb(-1);
    FOR(i, 0, n)    sort(adj[i].begin(), adj[i].end());
    FOR(i, 0, n + 100)  par[i] = i;
    FOR(i, 0, n)
        if(mark[i] == 0)
        {
            out[++ans].pb(i);
            dfs(i);
        }
    cout << ans << endl;
    FOR(i, 1, ans + 1)
    {
        cout << out[i].size();
        FOR(j, 0, out[i].size())    cout << ' ' << out[i][j] + 1;
        cout << endl;
    }
    return 0;
}
