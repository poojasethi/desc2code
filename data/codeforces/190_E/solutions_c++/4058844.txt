#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

const int N = 500005, M = 1e6+5;
int g[N];
vector<int> a[N], ans[N];
int FIND(int x) {
	return g[x]==x?x:g[x]=FIND(g[x]);
}
void UNION(int x, int y) {
	g[FIND(x)] = FIND(y);
}
int main(void) {
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i=1;i<=n;i++) g[i] = i;
	while(m--) {
		int x, y;
		scanf("%d%d", &x, &y);
		a[x].push_back(y);
		a[y].push_back(x);
	}
	int mindeg=n, mdi=0;
	for(int i=1;i<=n;i++) if(SZ(a[i])<mindeg) {
		mindeg=SZ(a[i]);
		mdi=i;
	}
	sort(a[mdi].begin(), a[mdi].end());
	for(int i=1,j=0;i<=n;i++) {
		if(j<SZ(a[mdi]) && a[mdi][j]==i) ++j;
		else UNION(mdi, i);
	}
	FOR(it, a[mdi]) sort(a[*it].begin(), a[*it].end());
	FOR(it, a[mdi]) {
		for(int i=1,j=0;i<=n;i++) {
			if(j<SZ(a[*it]) && a[*it][j]==i) ++j;
			else UNION(*it, i);
		}
	}
	for(int i=1;i<=n;i++) ans[FIND(i)].push_back(i);
	int sans=0;
	for(int i=1;i<=n;i++) if(g[i]==i) ++sans;
	printf("%d\n", sans);
	for(int i=1;i<=n;i++) if(SZ(ans[i])) {
		printf("%d", SZ(ans[i]));
		FOR(it, ans[i]) printf(" %d", *it);
		puts("");
	}
	return 0;
}
