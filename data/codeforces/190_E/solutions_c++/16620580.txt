# include <bits/stdc++.h>

using namespace std;

const int maxn = 5e5 + 100;

vector <int> adj[maxn], ver[maxn];

int n, cmp, next[maxn];

int get(int v){
	if(next[v] == v)
		return v;
    return (next[v] = get(next[v]));
}

bool ic(int v,int u){
    if(lower_bound(adj[v].begin(), adj[v].end(), u) == adj[v].end())
        return false;
    if(*lower_bound(adj[v].begin(), adj[v].end(), u) != u)
        return false;
    return true;
}

void dfs(int v){
	next[v] = v + 1;
	ver[cmp].push_back(v);
	for (int i = get(0); i < n; i = get(i + 1))
        if(ic(v, i) == false)
            dfs(i);
}

int main(){
	int m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++){
		int v, u;
        scanf("%d%d", &v, &u);
		v--, u--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}

	for (int i = 0; i < n; i++)
        sort(adj[i].begin(), adj[i].end());

	for (int i = 0; i < maxn; i++)
		next[i] = i;

	for (int i = 0; i < n; i++)
		if(next[i] == i)
			dfs(i), cmp++;

    printf("%d\n", cmp);
    for (int i = 0; i < cmp; i++){
        printf("%d%c", (int)ver[i].size(), ' ');
        for (int j = 0; j < ver[i].size(); j++)
            printf("%d%c", ver[i][j] + 1, ' ');
        printf("\n");
    }

	return 0;
}
