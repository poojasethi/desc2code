#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

const int MAX_V = 500001;
const int MAX_E = 2000001;

int n, m, edgecnt;
int head[MAX_V];
int next[MAX_V], fa[MAX_V]; 
struct node {
	int v, next;
} edge[MAX_E];
vector<int> ans[MAX_V];

void addedge(int u, int v) {
	edge[edgecnt] = (node) {v, head[u]};
	head[u] = edgecnt++;
}

void solve() {
	for (int i = 1; i <= n; ++i) {
		next[i] = i + 1;
	}
	int cnt = 0;
	for (int i = 1; i <= n; ++cnt) {
		ans[cnt].push_back(i);
		i = next[i];
		for (int j = 0; j < ans[cnt].size(); ++j) {
			int u = ans[cnt][j];
			for (int e = head[u]; ~e; e = edge[e].next) {
				fa[edge[e].v] = u;
			}
			int pre = 0;
			for (int v = i; v <= n; v = next[v]) {
				if (fa[v] != u) {
					ans[cnt].push_back(v);
					if (v != i) next[pre] = next[v];
					else i = next[i];
				} else pre = v;
			}
		}
	}
	printf("%d\n", cnt);
	for (int i = 0; i < cnt; ++i) {
		printf("%d", ans[i].size());
		for (int j = 0 ;j < ans[i].size(); ++j) {
			printf(" %d", ans[i][j]);
		}puts("");
	}
}

int main() {
	scanf("%d%d", &n, &m);
	memset(head, -1, sizeof head);
	for (int i = 0; i < m; ++i) {
		int u, v;
		scanf("%d%d", &u, &v);
		addedge(u, v);
		addedge(v, u);
	}
	solve();
	return 0;
} 
	 	 	  	 	    						 	  		