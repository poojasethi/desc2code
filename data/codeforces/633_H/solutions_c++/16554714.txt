#include <cstdio>
#include <cmath>
#include <algorithm>
inline unsigned int getuint(){
	char w=getchar();
	while (w<'0'||'9'<w) w=getchar();
	unsigned int ans=0;
	for (;'0'<=w&&w<='9';w=getchar()) ans=ans*10+w-'0';
	return ans;
}
int mod;
long long fib[30005];
int a[30005], sorta[30005];
int belong[30005];
struct Query{int l, r, id;} Q[30005];
inline bool operator <(const Query &i, const Query &j){return belong[i.l]!=belong[j.l]?belong[i.l]<belong[j.l]:i.r<j.r;}
struct SeGment_Tree{
	struct node{
		int l, r, mid;
		node *s[2];
		int size;
		long long ans[2];
		inline void update(){
			size=s[0]->size+s[1]->size;
			if (s[0]->size){
				ans[0]=fib[s[0]->size-1]*s[1]->ans[0]+fib[s[0]->size]*s[1]->ans[1];
				ans[1]=fib[s[0]->size]*s[1]->ans[0]+fib[s[0]->size+1]*s[1]->ans[1];
				(ans[0]+=s[0]->ans[0])%=mod, (ans[1]+=s[0]->ans[1])%=mod;
			} else ans[0]=s[1]->ans[0], ans[1]=s[1]->ans[1];
		}
	} pool[30005<<1], *poolnow, *root;
	node *build(int l, int r){
		node *p=poolnow++;p->l=l, p->r=r;
		if (l==r) return p;
		int mid=p->mid=l+r>>1;
		p->s[0]=build(l, mid), p->s[1]=build(mid+1, r);
		return p;
	}
	int l;
	inline void add(node *p){
		if (p->l==p->r) return p->size=1, p->ans[0]=0, p->ans[1]=sorta[l]%mod, void();
		add(p->s[p->mid<l]), p->update();
	}
	inline void add(int _l){l=_l, add(root);}
	inline void del(node *p){
		if (p->l==p->r) return p->size=0, p->ans[0]=p->ans[1]=0, void();
		del(p->s[p->mid<l]), p->update();
	}
	inline void del(int _l){l=_l, del(root);}
	inline void init(int n){poolnow=pool, root=build(1, n);}
} SGT;
int cnt[30005];
inline void add(int i){if (!cnt[a[i]]++) SGT.add(a[i]);}
inline void del(int i){if (!--cnt[a[i]]) SGT.del(a[i]);}
long long ans[30005];
int main(){
	//freopen("ex.in", "r", stdin);
	int n=getuint(), block=sqrt(n+0.5), m=0;mod=getuint();
	fib[1]=fib[2]=1%mod;for (int i=3;i<=n+2;i++) fib[i]=(fib[i-1]+fib[i-2])%mod;
	SGT.init(n);
	for (int i=1;i<=n;i++) a[i]=sorta[i]=getuint();
	std::sort(sorta+1, sorta+n+1);
	for (int i=1;i<=n;i++) a[i]=std::lower_bound(sorta+1, sorta+n+1, a[i])-sorta;
	for (int i=1, j=1;i<=n;belong[i++]=m, j<block?j++:j=1) if (j==1) m++;
	int q=getuint();
	for (int i=1;i<=q;i++) Q[Q[i].id=i].l=getuint(), Q[i].r=getuint();
	std::sort(Q+1, Q+q+1);
	for (int l=1, r=0, i=1;i<=q;ans[Q[i++].id]=SGT.root->ans[1]){
		while (Q[i].l<l) add(--l);
		while (r<Q[i].r) add(++r);
		while (l<Q[i].l) del(l++);
		while (Q[i].r<r) del(r--);
	}
	for (int i=1;i<=q;i++) printf("%I64d\n", ans[i]);
	return 0;
}
