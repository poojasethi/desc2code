#include <cstring>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>

using namespace std;

int read()
{
	int ret=0; char c=getchar();
	while (c<'0' || c>'9') c=getchar();
	while (c>='0' && c<='9') { ret=ret*10+c-'0'; c=getchar(); }
	return ret;
}

const int MAXN=30000;

int A[MAXN+10],at;

int getloc(int x)
{
	int l=1,r=at;
	while (l<=r) {
		int mid=(l+r)>>1;
		if (A[mid]<x) l=mid+1;
		else if (A[mid]==x) return mid;
		else r=mid-1; }
	return -1;
}

int m,F[MAXN+10];

const int MAXT=(MAXN<<3)+(MAXN<<1);

struct SegTree
{
	int sum[MAXT+10],sum1[MAXT+10],sz[MAXT+10];
	
	void update(int x)
	{
		sz[x]=sz[x<<1]+sz[x<<1|1];
		if (!sz[x<<1]) {
			sum[x]=sum[x<<1|1]; sum1[x]=sum1[x<<1|1]; }
		else {
			int s=sz[x<<1];
			sum[x]=(sum[x<<1|1]*F[s-1]+sum1[x<<1|1]*F[s]+sum[x<<1])%m;
			sum1[x]=(sum[x<<1|1]*F[s]+sum1[x<<1|1]*F[s+1]+sum1[x<<1])%m; }
		return ;
	}
	
	void modify(int x,int l,int r,int k)
	{
		while (l<r) {
			int mid=(l+r)>>1;
			if (k<=mid) { x<<=1; r=mid; }
			else { x<<=1; x|=1; l=mid+1; } }
		sz[x]^=1; sum[x]=sum1[x]=sz[x]*A[l]%m;
		while (x>>1) update(x>>=1);
		return ;
	}
}seg;

int n;

int a[MAXN+10];

int cnt[MAXN+10];

void work(int id,int k)
{
	bool l=(cnt[id]>0);
	cnt[id]+=k;
	if (l^(cnt[id]>0)) seg.modify(1,1,at,id);
	return ;
}

int L[MAXN+10],R[MAXN+10],bel[MAXN+10];

bool cmp(int l,int r) { return bel[L[l]]<bel[L[r]] || (bel[L[l]]==bel[L[r]] && R[l]<R[r]); }

int id[MAXN+10];

int ans[MAXN+10];

void init()
{
	n=read(); m=read();
	for (int i=1;i<=n;i++) A[i]=a[i]=read();
	sort(A+1,A+n+1);
	for (int i=1,j=i;i<=n;i=j+1) {
		A[++at]=A[i]; j=i;
		while (j<n && A[j+1]==A[at]) j++; }
	
	F[1]=F[2]=1;
	for (int i=3;i<=at+1;i++) F[i]=(F[i-1]+F[i-2])%m;
	
	int Q=read();
	for (int i=1;i<=Q;i++) {
		L[i]=read(); R[i]=read(); id[i]=i; }
	
	int S=(int)(sqrt(Q)),ll=1,lt=0;
	while (ll<=n) {
		for (int j=1;j<=S && ll<=n;j++) bel[ll++]=lt;
		++lt; }
	
	sort(id+1,id+Q+1,cmp);
	int ln=1,rn=0;
	for (int i=1;i<=Q;i++) {
		while (ln<L[id[i]]) work(getloc(a[ln++]),-1);
		while (ln>L[id[i]]) work(getloc(a[--ln]),1);
		while (rn<R[id[i]]) work(getloc(a[++rn]),1);
		while (rn>R[id[i]]) work(getloc(a[rn--]),-1);
		ans[id[i]]=seg.sum[1]; }
	
	for (int i=1;i<=Q;i++) printf("%d\n",ans[i]);
	
	return ;
}

int main()
{
	init();
	return 0;
}