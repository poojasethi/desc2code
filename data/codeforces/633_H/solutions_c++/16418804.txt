#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

#define MAX 30005

struct Node {
    int v0, v1, cnt;
    Node () {}
    Node (int v0, int v1, int cnt) : v0(v0), v1(v1), cnt(cnt) {}
};

int n, mod, a[MAX], b[MAX], c[MAX];
int q, l[MAX], r[MAX], id[MAX], ans[MAX];
int block;
int fib[MAX];
Node tree[4*MAX];

int cmp(int i, int j) {
    return l[i]/block != l[j]/block ? l[i]/block < l[j]/block : r[i] < r[j];
}

void init(int no, int l, int r) {
    if (l == r) {
        tree[no] = Node(0, 0, 0);
        return;
    }
    int m = (l + r) / 2;
    init(2*no, l, m);
    init(2*no+1, m+1, r);
    tree[no] = Node(0, 0, 0);
}

void update(int no, int l, int r, int x, bool add) {
    if (l == r) {
        if (add)
            tree[no] = Node(c[l], 0, 1);
        else
            tree[no] = Node(0, 0, 0);
        return;
    }
    int m = (l + r) / 2;
    if (x <= m) update(2*no, l, m, x, add);
    else update(2*no+1, m+1, r, x, add);
    if (tree[2*no].cnt == 0) {
        tree[no] = tree[2*no+1];
    }
    else if (tree[2*no+1].cnt == 0) {
        tree[no] = tree[2*no];
    }
    else {
        int k = tree[2*no].cnt;
        int v0 = tree[2*no].v0 + fib[k+1]*tree[2*no+1].v0 + fib[k]*tree[2*no+1].v1;
        int v1 = tree[2*no].v1 + fib[k]*tree[2*no+1].v0 + fib[k-1]*tree[2*no+1].v1;
        tree[no] = Node(v0 % mod, v1 % mod, tree[2*no].cnt + tree[2*no+1].cnt);
    }
}

int cnt[MAX];

void add(int x) {
    if (cnt[x] == 0)
        update(1, 1, n, x, 1);
    cnt[x]++;
}

void remove(int x) {
    cnt[x]--;
    if (cnt[x] == 0)
        update(1, 1, n, x, 0);
}

int main() {
    scanf("%d %d", &n, &mod);
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
        b[i] = a[i];
    }
    sort(b+1, b+n+1);
    for (int i = 1; i <= n; i++) {
        a[i] = lower_bound(b, b+n+1, a[i]) - b;
        c[i] = b[i] % mod;
    }
    fib[0] = 0, fib[1] = 1;
    for (int i = 2; i <= n; i++)
        fib[i] = (fib[i-1] + fib[i-2]) % mod;
    scanf("%d", &q);
    for (int i = 0; i < q; i++) {
        scanf("%d %d", &l[i], &r[i]);
        id[i] = i;
    }
    block = sqrt(n);
    sort(id, id+q, cmp);
    init(1, 1, n);
    memset(cnt, 0, sizeof(cnt));
    int curl = l[id[0]], curr = l[id[0]] - 1;
    for (int i = 0; i < q; i++) {
        int k = id[i];
        while (curl < l[k])
            remove(a[curl++]);
        while (curl > l[k])
            add(a[--curl]);
        while (curr < r[k])
            add(a[++curr]);
        while (curr > r[k])
            remove(a[curr--]);
        ans[k] = tree[1].v0;
    }
    for (int i = 0; i < q; i++)
        cout << ans[i] << endl;
}
