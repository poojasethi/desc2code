#include<vector>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

typedef long long LL;

const int N = int(1e5 + 5);
const int MOD = int(1e9 + 7);

int a[N], prd[N], v[N];
int n, k;

int cnt[N];
int lg[N], ans, ret, maxx;
int out[N], lk[N], vis[N];

int fg[N], ad[N], lis[N];

vector<int> f[N], fv[N];

int inv(int x)
{
	int r(1), s(x);
	for(int i=MOD-2; i; i>>=1, s=(LL(s)*s)%MOD) if(i&1) r=(LL(r)*s)%MOD;
	return r;
}

int calc(int x, int y)
{
	if(f[x].size() <= y)
	{
		for(int i=f[x].size(); i<=y; i++)
		{
			int r = (LL(f[x][i-1]) * x + ((LL(f[x][i-2]) * x) % MOD * (i-1)) % MOD) % MOD;
			f[x].push_back(r);
			fv[x].push_back(inv(r));
		}
	}
	return f[x][y];
}

int calcv(int x, int y){return fv[x][y];}

int sum[N], g[N], top;

void dfs(int x, int ret)
{
	if(x>k)
	{
		int tre = ret, tma = maxx;
		
		for(int i=1; i<=top; i++)
		{
			x = sum[i];
			tre = (LL(tre) * calcv(x, cnt[x])) % MOD;
			tre = (LL(tre) * calc(x, ++cnt[x])) % MOD;
			tma = max(tma, x);
		}
		
		if(tma < 3) ans = (ans + 1) % MOD;
		else ans = (ans + tre) % MOD;
		
		for(int i=1; i<=top; i++) --cnt[sum[i]];
		
		return;
	}
	
	sum[++top] = lg[x], g[top] = 1;
	dfs(x+1, ret);
	--top;
	
	for(int i=1; i<=top; i++)
	{
		sum[i] += lg[x], g[i]++;
		dfs(x+1, (LL(ret) * (g[i]-1)) % MOD);
		sum[i] -= lg[x], g[i]--;
	}
}

int main()
{
	scanf("%d%d", &n, &k);
	for(int i=1; i<=n; i++)
	scanf("%d", &a[i]), prd[a[i]] = 1;
	
	for(int i=1; i<=n; i++) if(!prd[i])
	{
		lg[++lg[0]] = 1, v[i] = 1;
		for(int j=a[i]; j; j=a[j]) ++lg[lg[0]], v[j] = 1;
	}
	
	for(int i=1; i<=n; i++) if(!v[i])
	{
		int r(1); v[i] = 1;
		for(int j=a[i]; j!=i; j=a[j]) ++r, v[j]=1;
		++cnt[r];
	}
	
	for(int i=1; i<=n; i++)
	{
		f[i].push_back(1), f[i].push_back(i);
		fv[i].push_back(1), fv[i].push_back(inv(i));
	}
	
	ans = 0;
	
	ret = 1, maxx = 0;
	for(int i=1; i<=n; i++)
	{
		ret = (LL(ret) * calc(i, cnt[i])) % MOD;
		if(cnt[i]) maxx = max(maxx, i);
	}
	
	dfs(1, ret);
	
	printf("%d\n", ans);
	
	return 0;
}
