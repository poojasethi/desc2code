#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>

using namespace std;

const int MAXN = 1000005,Mo = 1000000007;

typedef long long LL;

vector<int> F[MAXN],Rv[MAXN];
bool Apear[MAXN],Cir[MAXN];
int Len[MAXN],A[MAXN],Sum[MAXN],Cnt[MAXN],Ava[MAXN],N,K,Max,Ans,cnt;

LL Quick(int a,int b)
{
	if (!b) return 1;
	LL mid = Quick(a,b >> 1);
	if (b & 1) return mid * mid % Mo * a % Mo;
	return mid * mid % Mo;
}

int Calc(int c,int l)
{
	if (F[c].size() <= l)
	{
		for(int j = F[c].size();j <= l;j ++)
		{
			F[c].push_back((LL(c) * F[c][j - 1] % Mo + LL(c) * (j - 1) % Mo * F[c][j - 2] % Mo) % Mo);
			Rv[c].push_back(Quick(F[c][j],Mo - 2));
		}
	}
	return F[c][l]; 
}

int CalcR(int c,int l) {Calc(c,l);return Rv[c][l];}

void Dfs(int Now,int Tmp)
{
	if (Now > K)
	{
		int mx = Max;
		for(int i = 1;i <= cnt;i ++)
		{
			Cnt[Sum[i]] ++;
			Tmp = LL(Tmp) * CalcR(Sum[i],Cnt[Sum[i]] - 1) % Mo;
			Tmp = LL(Tmp) * Calc(Sum[i],Cnt[Sum[i]]) % Mo;
			mx = max(mx,Sum[i]);
		}
		if (mx < 3) Tmp = 1;
		Ans = (Ans + Tmp) % Mo;
		for(int i = 1;i <= cnt;i ++) Cnt[Sum[i]] --;
		return;
	}
	Sum[++ cnt] = Len[Now];Ava[cnt] = 1;
	Dfs(Now + 1,Tmp);
	cnt --;
	for(int i = 1;i <= cnt;i ++)
	{
		Sum[i] += Len[Now],Ava[i] ++;
		Dfs(Now + 1,Tmp * LL(Ava[i] - 1) % Mo);
		Sum[i] -= Len[Now],Ava[i] --;
	}
}

int main()
{
	scanf("%d%d", &N, &K);
	for(int i = 1;i <= N;i ++) scanf("%d", &A[i]),Apear[A[i]] = 1;
	for(int i = 1;i <= N;i ++)
	if (!Apear[i])
	{
		Len[++ Len[0]] = 1;Cir[i] = 1;
		for(int j = A[i];j;j = A[j]) Len[Len[0]] ++,Cir[j] = 1;
	}
	for(int i = 1;i <= N;i ++)
	if (!Cir[i])
	{
		Cir[i] = 1;int c = 1;
		for(int j = A[i];j != i;j = A[j]) ++ c,Cir[j] = 1;
		Cnt[c] ++;
	}
	for(int i = 1;i <= N;i ++)
	{
		F[i].push_back(1),F[i].push_back(i);
		Rv[i].push_back(1),Rv[i].push_back(Quick(i,Mo - 2));
	}
	int least = 1;
	for(int i = 1;i <= N;i ++)
	if (Cnt[i])
	{
		Max = max(Max,i);
		least = LL(least) * Calc(i,Cnt[i]) % Mo;
	}
	Dfs(1,least);
	printf("%d\n", Ans);
}
