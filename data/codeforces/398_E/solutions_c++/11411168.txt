#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
typedef long long LL;
const int Mod = (1e9)+7;
const int Maxn = 100005;
LL x, y;
int s1[20], s2[20];
int s[Maxn], jc[Maxn];
int pre[Maxn], nxt[Maxn];
int sum_chain, len_chain[20];
int sum_circle, len_circle[Maxn];
int n,k,i,j,cot1,cot2,base,ans,cnt;
bool flag,vis[Maxn];
vector <int> f[Maxn], g[Maxn];
#define pb push_back
int qck(int a,int b){
  int ret = 1;
  for (;b>0;b>>=1){
    if (b&1) ret=(LL)ret*a%Mod;
    a=(LL)a*a%Mod;
  }
  return ret;
}

void dfs(int x){
  if (x>sum_chain){
    int tmp = base;
    bool ff = flag;
    for (int i=1;i<=cnt;i++){
      int len = s2[i];
      tmp = (LL)tmp * g[len][s[len]] % Mod * f[len][s[len]+1] % Mod;
      tmp = (LL)tmp * jc[s1[i]-1]%Mod;
      s[len] ++;
      if (s2[i]>2) ff = 1;
    }
    
    if (ff==1)
      ans += tmp;
    else
      ans++;
    if (ans>Mod) ans-=Mod;
    
    for (int i=1;i<=cnt;i++)
      s[s2[i]] --;
    return;
  }
  
  for (int i=1;i<=cnt;i++){
    s1[i]++; s2[i] += len_chain[x];
    dfs(x+1);
    s1[i]--; s2[i] -= len_chain[x];
  }
  cnt++;
  s1[cnt]++; s2[cnt] += len_chain[x];
  dfs(x+1);
  s1[cnt]--; s2[cnt] -= len_chain[x];
  cnt--;
}

void exgcd(LL a,LL b){
  if (b==0){
    x = 1; y = 0;
    return;
  }
  exgcd(b,a%b);
  LL tmp = x;
  x = y; y = tmp-(a/b)*y;
}

void init(){
  for (i=1;i<=n;i++){
    f[i].pb(1); f[i].pb(i);
    g[i].pb(1);// g[i].pb(qck(i,Mod-2));
    exgcd(i,Mod);
    x = x%Mod;
    if (x<0) x+=Mod;
    g[i].pb(x);
    for (j=2;i*j<=n;j++){
      f[i].pb( ( (LL)f[i][j-1]*i%Mod + (LL)(j-1)*f[i][j-2]%Mod*i%Mod ) % Mod );
      exgcd(f[i][j],Mod);
      x = x%Mod;
      if (x<0) x+=Mod;
      g[i].pb(x);
      //g[i].pb( qck(f[i][j], Mod-2) );
    }
  }
  for (i=1,jc[0]=1;i<=n;i++)
    jc[i] = (LL)jc[i-1]*i%Mod;
}

int main(){
  scanf("%d%d",&n,&k);
  init();
  for (i=1;i<=n;i++){
    scanf("%d",&nxt[i]);
    if (nxt[i])
      pre[nxt[i]] = i;
  }
  
  for (i=1;i<=n;i++)
  if (pre[i]==0){
    sum_chain++;
    for (j=i;j>0;j=nxt[j]){
      len_chain[sum_chain] ++;
      vis[j] = 1;
    }
  }
  base = 1;
  for (i=1;i<=n;i++)
  if (vis[i]==0){
    sum_circle++;
    for (j=i;vis[j]==0;j=nxt[j]){
      len_circle[sum_circle] ++;
      vis[j] = 1;
    }
    int tmp = len_circle[sum_circle];
    base = (LL)base * qck(f[tmp][s[tmp]],Mod-2) % Mod * f[tmp][s[tmp]+1] % Mod;
    s[tmp] ++;
    if (tmp>2) flag = 1;
  }
  dfs(1);
  printf("%d\n",ans);
  return 0;
}