#include <algorithm>
#include <iostream>
#include <sstream>
#include <cassert>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <queue>
#include <stack>
#include <cmath>
#include <deque>
#include <ctime>
#include <list>
#include <set>
#include <map>
//zlb//

using namespace std;

typedef long long     LL;
typedef pair<int,int> pii;

double PI  = acos(-1);
double EPS = 1e-7;
int INF    = 1000000000;
int MOD    = 1000000007;
int MAXINT = 2147483647;
LL INFLL   = 1000000000000000000LL;
LL MAXLL   = 9223372036854775807LL;

#define fi            first
#define se            second
#define mp            make_pair
#define pb            push_back
#define SIZE(a)       (int)a.size()
#define MIN(a, b)     (a) = min((a), (b))
#define MAX(a, b)     (a) = max((a), (b))
#define input(in)     freopen(in,"r",stdin)
#define output(out)   freopen(out,"w",stdout)
#define RESET(a, b)   memset(a,b,sizeof(a))
#define FOR(a, b, c)  for (int (a)=(b); (a)<=(c); (a)++)
#define FORD(a, b, c) for (int (a)=(b); (a)>=(c); (a)--)
#define FORIT(a, b)   for (__typeof((b).begin()) a=(b).begin(); a!=(b).end(); a++)

int mx[8] = {-1,1,0,0,-1,-1,1,1};
int my[8] = {0,0,-1,1,-1,1,-1,1};

// ------------ //

pii lol[200005];
int co[200005];
vector<int> yay[200005];
int ada[200005];

int main()
{
	int n,k;
	scanf("%d%d",&n,&k);
	FOR(a,1,n)
	{
		scanf("%d%d",&lol[a].se,&lol[a].fi);
		yay[lol[a].se].pb(lol[a].fi);
		yay[lol[a].se+1].pb(lol[a].fi);
		co[lol[a].se]++;
	}
	FORD(a,200000,0)
	{
		sort(yay[a].begin(),yay[a].end());
		co[a] += co[a+1];
	}

	sort(lol+1,lol+n+1);
	LL sum = 0;
	LL mins = INFLL;
	FOR(poin,0,n)
	{
		if (poin)
		{
			ada[lol[poin].se]++;
			sum += lol[poin].fi;
		}
		int change = max(0,co[max(0,poin-1)]-(k-1));
		int cur = ada[poin];
		if (poin) cur += ada[poin-1];
		LL tmp = sum;

		//cout << "CUR " << poin << " " << cur << " " << co[max(0,poin-1)] << " " << change << " " << tmp << endl;
		int ls = poin;
		bool fail = 0;
		while (cur < SIZE(yay[poin]) && cur < change)
		{
			while(ls > 0 && (lol[ls].se == poin || lol[ls].se == poin-1)) ls--;
			if (ls <= 0)
			{
				fail = 1;
				break;
			}
			//cout << "trade " << yay[poin][cur] << " " << lol[ls].fi << endl;
			tmp += yay[poin][cur];
			tmp -= lol[ls].fi;
			ls--;
			cur++;
			//cout << "yo " << cur << " " << poin << " " << ls << endl;
			//if (cur > poin) assert(0);
		}
		if (!fail && cur >= change)
		{
			//cout << poin << " " << tmp << endl;
			MIN(mins,tmp);
		}
	}
	if (mins == INFLL) mins = -1;
	cout << mins << endl;
}
