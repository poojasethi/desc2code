#include <cstdio>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <ctime>
#include <cstring>
#include <cassert>
#include <bitset>
#include <sstream>
#include <queue>

using namespace std;

typedef long long int64;
typedef pair <int, int> pii;
typedef long double ldb;

const long double eps = 1e-9;
const int inf = (1 << 30) - 1;
const int64 inf64 = ((int64)1 << 62) - 1;
const long double pi = 3.1415926535897932384626433832795;

template <class T> T sqr (T x) {return x * x;}
template <class T> T abs (T x) {return x < 0 ? -x : x;}

const int MAXN = 250 * 1000;

pair <int, int> a[MAXN], e1[MAXN];
int e[MAXN];
bool key[MAXN];

int main ()
{
    //freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);

    int n, k;
    scanf("%d %d", &n, &k);

    for (int i = 0; i < n; ++i) {
        scanf("%d %d", &a[i].first, &a[i].second);
    }

    int num = n + 1 - k;
    sort (a, a + n);


    long long ans = inf64;

    int sc = a[num - 1].first;
    if (sc < n - 1) {
        long long ans1 = 0;

        for (int i = 0; i < n; ++i) {
            e[i] = a[i].second;
        }
        sort (e, e + n);

        for (int i = 0; i < sc + 2; ++i) {
            ans1 += e[i];
        }

        ans = min(ans, ans1);
    }

    if (sc < n) {
        for (int i = 0; i < n; ++i) {
            key[i] = true;
        }

        int num1 = num;
        for (int i = 0; i < num; ++i) {
            if (a[i].first < sc) {
                num1--;
            }
        }
        num1 = max(num1, 0);

        int m1 = 0;
        long long ans1 = 0;
        for (int i = 0; i < n; ++i) {
            if (a[i].first == sc || a[i].first == sc + 1) {
                e1[m1] = make_pair(a[i].second, i);
                m1++;
            }
        }

        sort (e1, e1 + m1);
        for (int i = 0; i < num1; ++i) {
            ans1+= e1[i].first;
            key[e1[i].second] = false;
        }

        int m = 0;
        for (int i = 0; i < n; ++i) {
            if (key[i]) {
                e[m] = a[i].second;
                m++;
            }
        }
        sort (e, e + m);

        for (int i = 0; i < sc + 1 - num1; ++i) {
            ans1 += e[i];
        }
        ans = min(ans, ans1);
    }

    if (sc <= n) {
        for (int i = 0; i < n; ++i) {
            key[i] = true;
        }

        int num1 = num;
        for (int i = 0; i < num; ++i) {
            if (a[i].first < sc - 1) {
                num1--;
            }
        }
        num1 = max(num1, 0);

        int m1 = 0;
        long long ans1 = 0;
        for (int i = 0; i < n; ++i) {
            if (a[i].first == sc || a[i].first == sc - 1) {
                e1[m1] = make_pair(a[i].second, i);
                m1++;
            }
        }

        sort (e1, e1 + m1);
        for (int i = 0; i < num1; ++i) {
            ans1+= e1[i].first;
            key[e1[i].second] = false;
        }

        int m = 0;
        for (int i = 0; i < n; ++i) {
            if (key[i]) {
                e[m] = a[i].second;
                m++;
            }
        }
        sort (e, e + m);

        for (int i = 0; i < sc - num1; ++i) {
            ans1 += e[i];
        }
        ans = min(ans, ans1);
    }

    if (ans == inf64) {
        cout << -1 << endl;
        return 0;
    }

    cout << ans << endl;

    return 0;
}
