#include<stdio.h>
#include<stdlib.h>
#include<vector>

using namespace std;

struct el {
  int p,e;
};

el P[200200];
vector<int> bucket[200200];
int srtp[200200];
int srte[200200];
bool vyhra[200200];

int main() {
  int n,k;
  long long sol=0, msol=0;
  scanf("%d%d", &n,&k);
  k--;
  if (k>=n) { printf("0\n"); return 0; }
  for (int i=0; i<n; i++) {
    scanf("%d%d", &P[i].p, &P[i].e);
  }

  for (int i=0; i<=200000; i++) { bucket[i].resize(0); }
  for (int i=0; i<n; i++) { bucket[P[i].e].push_back(i); }
  int j=0;
  for (int i=0; i<=200000; i++) {
    for (int ii=0; ii<bucket[i].size(); ii++) {
      srte[j++] = bucket[i][ii];
    }
  }

  for (int i=0; i<=200000; i++) { bucket[i].resize(0); }
  for (int i=0; i<n; i++) { bucket[P[i].p].push_back(i); }
  j=0;
  for (int i=200000; i>=0; i--) {
    for (int ii=0; ii<bucket[i].size(); ii++) {
      srtp[j++] = bucket[i][ii];
    }
  }

  /*printf("srte:\n");
  for (int i=0; i<n; i++) {
    printf("%d %d\n", P[srte[i]].p, P[srte[i]].e);
  }
  printf("srtp:\n");
  for (int i=0; i<n; i++) {
    printf("%d %d\n", P[srtp[i]].p, P[srtp[i]].e);
  }*/


  int p=P[srtp[k]].p;
  int i=k;
  int y=0,z=0;
  while (i<n &&  P[srtp[i]].p == p)    { i++; y++; z++; }
  while (i<n && (P[srtp[i]].p == p-1)) { i++; z++; }
  //printf("y = %d, z=%d\n", y,z);

  msol = -1;

  /////

  for (int i=0; i<n; i++) { vyhra[i]=false; }
  sol=0;
  int pp=p;
  for (int i=0; i<n; i++) {
    if (z<=0) { break; }
    if (P[srte[i]].p == p || (P[srte[i]].p == p-1)) {
      vyhra[srte[i]] = true;
      sol += P[srte[i]].e;
      z--; pp--;
    }
  }
  if (z<=0) {
    for (int i=0; i<n; i++) {
      if (pp<=0) { break; }
      if (!vyhra[srte[i]]) {
        vyhra[srte[i]] = true;
        sol += P[srte[i]].e;
        pp--;
      }
    }
    if (pp<=0) { if (msol==-1 || sol<msol) {msol = sol;} }
  }

  ////

  for (int i=0; i<n; i++) { vyhra[i]=false; }
  sol=0;
  pp=p+1;
  for (int i=0; i<n; i++) {
    if (y<=0) { break; }
    if (P[srte[i]].p == p || (P[srte[i]].p == p+1)) {
      vyhra[srte[i]] = true;
      sol += P[srte[i]].e;
      y--; pp--;
    }
  }
  if (y<=0) {
    for (int i=0; i<n; i++) {
      if (pp<=0) { break; }
      if (!vyhra[srte[i]]) {
        vyhra[srte[i]] = true;
        sol += P[srte[i]].e;
        pp--;
      }
    }
    if (pp<=0) {  if (msol==-1 || sol<msol) {msol = sol;} }
  }

 ////

  for (int i=0; i<n; i++) { vyhra[i]=false; }
  sol=0;
  pp=p+2;
  for (int i=0; i<n; i++) {
    if (pp<=0) { break; }
    if (!vyhra[srte[i]]) {
      vyhra[srte[i]] = true;
      sol += P[srte[i]].e;
      pp--;
    }
  }
  if (pp<=0) { if (msol==-1 || sol<msol) {msol = sol;} }

  printf("%I64d", msol);
}
