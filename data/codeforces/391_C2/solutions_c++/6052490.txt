#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int main()
{
	int N, K;
	cin >> N >> K;

	pair<int, int> P[200005];
	for (int i = 0; i < N; i++)
		cin >> P[i].first >> P[i].second;

	sort(P, P + N);

	long long mineffort = 1000000000000000000;
	for (int i = 0; i < 3; i++)
	{
		int ptsneed = P[N-K].first + i;
		if (ptsneed > N)
			continue;

		int tobeat = N-K+1, beaten = 0;
		vector<int> bubble, other;

		for (int j = 0; j < N; j++)
		{
			int p = P[j].first, e = P[j].second;
			if (p < ptsneed - 1)
			{
				beaten++;
				other.push_back(e);
			}
			else if (p <= ptsneed)
				bubble.push_back(e);
			else
				other.push_back(e);
		}

		sort(bubble.begin(), bubble.end());
		sort(other.begin(), other.end());

		int bsz = bubble.size(), osz = other.size();

		if (bsz + beaten < tobeat)
			continue;

		long long effort = 0;
		int curpts = max(0, tobeat - beaten);
		for (int j = 0; j < curpts; j++)
			effort += bubble[j];

		int idx1 = curpts, idx2 = 0;
		for (int j = 0; j < ptsneed - curpts; j++)
		{
			if (idx2 == osz || (idx1 != bsz && bubble[idx1] <= other[idx2]))
				effort += bubble[idx1++];
			else
				effort += other[idx2++];
		}

		mineffort = min(mineffort, effort);
	}

	if (mineffort == 1000000000000000000)
		cout << -1 << "\n";
	else
		cout << mineffort << "\n";

	return 0;
}
