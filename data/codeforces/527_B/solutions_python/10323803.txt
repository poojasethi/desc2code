import sys

inp = sys.stdin.readlines()

N = int(inp[0])

w1 = inp[1][:N]
w2 = inp[2][:N]

d = 0
fromlet = {}

for i in range(N):
  if w1[i] != w2[i]:
    d += 1
    if w1[i] not in fromlet:
      fromlet[w1[i]] = {}
    fromlet[w1[i]][w2[i]] = i

if d < 2:
  print d
  print '-1 -1'

else:
  done = False
  curi=-1
  newi=-1
  works = (-1, -1)
  for k in fromlet:
    needed = fromlet[k]
    for n in needed:
      curi = needed[n]
      if n in fromlet:
        poss = fromlet[n]
        for p in poss:
          newi = poss[p]
          works = (curi, newi)
          if p == k:
            done = True
          if done:
            break
        if done:
          break
    if done:
      break

  if newi == -1:
    print d
    print '-1 -1'
  elif done:
    (curi, newi) = (curi + 1, newi + 1)
    print d-2
    print min(curi,newi), max(curi,newi)
  else:
    (curi, newi) = (works[0]+1, works[1]+1)
    print d-1
    print min(curi,newi), max(curi,newi)


