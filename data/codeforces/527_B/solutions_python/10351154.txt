from collections import defaultdict


def solve(S, T):
    D = {}
    Z = {}
    Z1 = {}
    l = len(S)

    diff = 0
    c1 = None
    c2 = None

    for i in xrange(l):
        s, t = S[i], T[i]
        if s == t:
            continue
        diff += 1

        if not c2 and (t, s) in D:
            c2 = D[(t, s)], i
        if not c1 and t in Z:
            c1 = Z[t], i
        if not c1 and s in Z1:
            c1 = Z1[s], i
        Z[s] = i
        Z1[t] = i
        D[(s, t)] = i

    if c2:
        print diff - 2
        print '%d %d' % (c2[0]+1, c2[1]+1)  
    elif c1:
        print diff - 1
        print '%d %d' % (c1[0]+1, c1[1]+1)  
    else:
        print diff
        print -1, -1


if __name__ == '__main__':
    raw_input()
    S = raw_input()
    T = raw_input()
    solve(S, T)
