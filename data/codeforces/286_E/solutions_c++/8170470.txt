#include <cstdio>
#include <algorithm>
#include <cmath>

using namespace std;

const int N = 1000010;
const double pi = acos(-1);

int n, m, c[N << 2];
int fn;

struct cp {
	double x, y;
} w[N << 2], a[N << 2], aa[N << 2];

int ans[N], an;

cp operator + (const cp& a, const cp& b) {
	return (cp) {a.x + b.x, a.y + b.y};
}
cp operator - (const cp& a, const cp& b) {
	return (cp) {a.x - b.x, a.y - b.y};
}
cp operator * (const cp& a, const cp& b) {
	return (cp) {a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x};
}

void FFT(cp *a, int c) {
	int s = 1 << c, n = fn >> c;
	if (n == 1) return;
	FFT(a, c + 1);
	FFT(a + s, c + 1);
	for (int i = 0; i < (n >> 1); ++i) {
		cp wt = a[(i << 1) * s + s] * w[i << c];
		aa[i] = a[(i << 1) * s] + wt;
		aa[i + (n >> 1)] = a[(i << 1) * s] - wt;
	}
	for (int i = 0; i < n; ++i) {
		a[i * s] = aa[i];
	}
}
int main() {
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= n; ++i) {
		int item;
		scanf("%d", &item);
		c[item] = 1;
	}

	for (fn = 1; fn <= m * 2; fn <<= 1);
	for (int i = 0; i < fn; ++i) {
		a[i] = (cp) {c[i], 0};
		w[i] = (cp) {cos(pi * 2 / fn * i), sin(pi * 2 / fn * i)};
	}
	FFT(a, 0);
	for (int i = 0; i < fn; ++i) {
		a[i] = a[i] * a[i];
		w[i].y = -w[i].y;
	}
	FFT(a, 0);
	
	for (int i = 0; i <= m; ++i)
		if (a[i].x / fn < 0.618) {
			if (c[i]) {
				ans[++an] = i;
			}
		} else if (!c[i]) {
			printf("NO\n");
			return 0;
		}

	printf("YES\n%d\n", an);
	for (int i = 1; i <= an; ++i) {
		printf("%d%c", ans[i], i < an? ' ': '\n');
	}
}
