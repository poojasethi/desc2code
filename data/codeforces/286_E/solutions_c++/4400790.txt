#include <cstdio>
#include <complex>
#include <map>
#include <algorithm>
#include <vector>
using namespace std;
const int NMax=1<<21;
const double PI=3.14159265358979323846;
int N,M,A[NMax],nn,cnt;
double X[NMax];
complex<double> w[NMax],y[NMax],tmp[NMax];
void fft(int p,int step,int deep) {
    int len=(1<<(cnt-deep));
    if(len==1)
        return ;
    fft(p,(step<<1),deep+1);
    fft(p+step,(step<<1),deep+1);
    for(int i=0;i<(len>>1);i++) {
        complex<double> b=w[i<<deep]*y[p+step+i*(step<<1)];
        tmp[i]=y[p+i*(step<<1)]+b;
        tmp[i+(len>>1)]=y[p+i*(step<<1)]-b;
    }
    for(int i=0;i<len;i++) y[p+i*step]=tmp[i];
}
vector<int>ret;
int main()
{
    scanf("%d%d",&N,&M);
    for(int i=1;i<=N;i++) scanf("%d",A+i);
    for(int i=1;i<=N;i++) X[A[i]]=1;
    X[0]=1;
    nn=1;cnt=0;
    while(nn<M*2) nn*=2,cnt++;
    for(int i=0;i<nn;i++) w[i]=complex<double>(cos((double)i*2.0*PI/(double)nn),sin((double)i*2.0*PI/(double)nn));
    for(int i=0;i<nn;i++) y[i]=complex<double>((double)X[i],0);
    fft(0,1,0);
    for(int i=0;i<nn;i++) {
        y[i]=y[i]*y[i];
        w[i].imag()=-w[i].imag();
    }
    fft(0,1,0);
    for(int i=0;i<nn;i++)
        y[i].real()/=nn;
    for(int i=0;i<=M;i++) if(y[i].real()>0.5&&!X[i]) {
        puts("NO");
        return 0;
    }
    for(int i=0;i<=M;i++)
        if(y[i].real()>2.5)X[i]=0;
    puts("YES");
    int cnt=0;
    for(int i=1;i<=M;i++)if(X[i])cnt++;
    printf("%d\n",cnt);
    for(int i=1;i<=M;i++)if(X[i])printf("%d ",i);
    puts("");
    return 0;
}