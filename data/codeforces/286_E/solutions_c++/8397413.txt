#include<cmath>
#include<cstdio>
#include<complex>
using namespace std;
typedef complex<double> Complex;
const int Dep=21;
const int Len=1<<Dep;
Complex r[Len],e[Len],tmp[Len];
void FFT(Complex *p,int D,bool flag)
{
	if(D==Dep)return ;
	int Step=1<<D,Sum=1<<Dep-D,Half=Sum>>1;
	FFT(p,D+1,flag);
	FFT(p+Step,D+1,flag);
	for(int i=0,s=0;i<Half;i++,s+=Step<<1)
	{
		Complex a=p[s],b=p[s|Step];
		if(flag)
			b*=e[i<<D];
		else
			b/=e[i<<D];
		tmp[i]=a+b;
		tmp[i+Half]=a-b;
	}
	for(int i=0;i<Sum;i++)
		p[i<<D]=tmp[i];
}
bool f[1000005];
int main()
{
	int i,x,n,m,ans=0;
	bool flag=0;
	for(i=0;i<Len;i++)
		e[i]=Complex(cos(M_PI*2*i/Len),sin(M_PI*2*i/Len));
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;i++)
		scanf("%d",&x),
		f[x]=1,
		r[x]=Complex(1,0);
	FFT(r,0,1);
	for(i=0;i<Len;i++)
		r[i]*=r[i];
	FFT(r,0,0);
	for(i=1;i<=m;i++)
		if(!f[i]&&fabs(r[i].real())>0.02097152)
			return puts("NO"),0;
		else
			if(f[i]&&fabs(r[i].real())<0.02097152)
				ans++;
	printf("YES\n%d\n",ans);
	for(i=1;i<=m;i++)
		if(f[i]&&fabs(r[i].real())<0.02097152)
		{
			if(flag)putchar(' ');
			printf("%d",i);
			flag=1;
		}
	puts("");
}