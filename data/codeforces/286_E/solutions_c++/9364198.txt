#include<cmath>
#include<cstdio>
#include<cstring>
#include<complex>
#include<algorithm>
using namespace std;

typedef complex<double> cd;

const int N = 1 << 20;
const double eps = 1e-3 , pi = acos(-1);

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define Me(x , y) memset(x , y , sizeof(x))

int n , len , num , m;
bool flag[N];
int ans[N];
cd a[N + N] , b[N + N];

void Init(){
	scanf("%d%d" , &n , &m); int x;
	fo (i , 1 , n){
		scanf("%d" , &x); flag[x] = 1; a[x] = 1;
	}
	len = 1;
	for (; len < m + m; len <<= 1);
}

void FFT(int n , bool flag){
	int temp = 0;
	fo (i , 0 , n - 2){
		if (temp > i) swap(a[i] , a[temp]);
		for (int j = n >> 1; temp ^= j , temp & j ^ j; j >>= 1);
	}
	for (int i = 2; i <= n; i <<= 1){
		cd w = flag ? cd(cos(-2 * pi / i) , sin(-2 * pi / i)): cd(cos(2 * pi / i) , sin(2 * pi / i)) ;
		for (int j = 0; j < n; j += i){
			cd wn = 1;
			fo (l , j , j + i / 2 - 1){
				cd u = a[l] , v = wn * a[l + i / 2];
				a[l] = u + v; a[l + i / 2] = u - v;
				wn *= w;
			}
		}
	}
}

void Work(){
	FFT(len , 0);
	fo (i , 0 , len) a[i] *= a[i];
	FFT(len , 1);
	fo (i , 1 , m){
		bool tf = a[i].real() / len > eps;
		if (tf && !flag[i]){
			puts("NO"); return;
		}
		if (!tf && flag[i])
			ans[++num] = i;
	}
	printf("YES\n%d\n" , num);
	fo (i , 1 , num) printf("%d%c" , ans[i] , i == num ? '\n' : ' ');
}

int main(){
	Init();
	Work();
	return 0;
}
