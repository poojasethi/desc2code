#include <cstdio>
#include <complex>
const long double PI = acos(-1);
const int N = (1 << 21) + 9;
typedef std::complex<long double> cp;
cp a[N];
int n,m,ans[N];
bool exist[N];
int bit_rev(int x,int n)
{
	int res = 0;
	for (int i = 0; i < n; ++i)
		res |= (x >> i & 1) << (n - i - 1);
	return res;
}
void fft(cp *a,int n,int rev)
{
	static cp y[N];
	int len = 1 << n;
	for (int i = 0; i < len; ++i) y[i] = a[bit_rev(i,n)];
	long double Pi = PI * rev;
	for (int d = 1; d < len; d <<= 1) {
		cp x = exp(cp(0,Pi / d));
		for (int k = 0; k < len; k += (d << 1)) {
			cp w(1,0);
			for (int j = 0; j < d; ++j,w *= x) {
				cp u = y[k + j],v = w * y[k + j + d];
				y[k + j] = u + v;
				y[k + j + d] = u - v;
			}
		}
	}
	if (rev == -1)
		for (int i = 0; i < len; ++i) y[i] /= len;
	for (int i = 0; i < len; ++i) a[i] = y[i];
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("286E.in","r",stdin);
	freopen("286E.out","w",stdout);
	#endif
	scanf("%d%d",&n,&m);
	for (int i = 1; i <= n; ++i) {
		int x;
		scanf("%d",&x);
		a[x] = 1;
		exist[x] = true;
	}
	int cnt = 0;
	for (int i = 1; i <= 2 * m; i <<= 1) ++cnt;
	fft(a,cnt,1);
	for (int i = 0; i < (1 << cnt); ++i) a[i] *= a[i];
	fft(a,cnt,-1);
	for (int i = 1; i <= m; ++i)
		if (a[i].real() >= 0.5 && !exist[i]) return puts("NO");
		else if (a[i].real() < 0.5 && exist[i]) ans[++ans[0]] = i;
	printf("YES\n%d\n",ans[0]);
	for (int i = 1; i <= ans[0]; ++i) printf("%d ",ans[i]);
}
