#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <complex>

using namespace std;

const double PI = 3.141592653589793238462;
const int MaxN = 1<<22;

typedef complex<double> t_Complex;

int n,m;
t_Complex a[MaxN];
long long ans[MaxN];
int c[MaxN],list[MaxN];

void rader(t_Complex *A,int len){
	for(int i=1,j=len>>1;i<len-1;i++){
		if(i<j) swap(A[i],A[j]);
		int k=len>>1;
		while(j>=k) j-=k,k>>=1;
		if(j<k) j+=k;
	}
}

void FFT(t_Complex *A,int len,int flag){
	rader(A,len);
	for(int d=2;d<=len;d<<=1){
		t_Complex omega(cos(-flag*2*PI/d),sin(-flag*2*PI/d));
		for(int j=0;j<len;j+=d){
			t_Complex w(1,0);
			for(int k=j;k<j+(d>>1);k++){
				t_Complex u=A[k],t=w*A[k+(d>>1)];
				A[k]=u+t;A[k+(d>>1)]=u-t;
				w*=omega;
			}
		}
	}
	if(flag==-1) for(int i=0;i<len;i++) A[i].real()/=len;
}

int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++){
		int t;scanf("%d",&t);
		a[t]=1;c[t]=1;
	}
	int len=1<<21;
	FFT(a,len,1);
	for(int i=0;i<len;i++) a[i]*=a[i];
	FFT(a,len,-1);
	for(int i=0;i<len;i++) ans[i]=(long long)(a[i].real()+0.5);
	for(int i=1;i<=m;i++) if(ans[i] && !c[i]){puts("NO");return 0;}
	for(int i=1;i<=m;i++) if(!ans[i] && c[i])list[++list[0]]=i;
	printf("YES\n%d\n",list[0]);
	for(int i=1;i<=list[0];i++){if(i!=1)putchar(' ');printf("%d",list[i]);}
	puts("");
	return 0;
}
