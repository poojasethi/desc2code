#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <complex>
#include <vector>

using namespace std;

typedef complex<double> Complex;

const int MaxN = 1<<22;
const double PI = 3.141592653589793238462;

int n,m;
Complex a[MaxN];
int b[MaxN],c[MaxN];
vector<int> ans;

void rader(Complex *a,int len){
	for(int i=1,j=len>>1;i<len-1;i++){
		if(i<j) swap(a[i],a[j]);
		int k=len>>1;
		while(j>=k) j-=k,k>>=1;
		if(j<k) j+=k;
	}
}

void FFT(Complex *a,int len,int flag){
	rader(a,len);
	for(int d=2;d<=len;d<<=1){
		Complex omega(cos(-flag*2*PI/d),sin(-flag*2*PI/d));
		for(int j=0;j<len;j+=d){
			Complex w(1,0);
			for(int k=j;k<j+(d>>1);k++){
				Complex u=a[k],v=w*a[k+(d>>1)];
				a[k]=u+v;a[k+(d>>1)]=u-v;
				w*=omega;
			}
		}
	}
	if(flag==-1) for(int i=0;i<len;i++) a[i].real()/=len;
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++){
		int t;scanf("%d",&t);
		a[t]=b[t]=1;
	}
	int len=1<<21;
	FFT(a,len,1);
	for(int i=0;i<len;i++) a[i]*=a[i];
	FFT(a,len,-1);
	for(int i=0;i<len;i++) c[i]=((a[i].real()+0.5)>=1.0);
	for(int i=0;i<=m;i++) if(c[i] && !b[i]) return puts("NO") && 0;
	puts("YES");
	for(int i=0;i<=m;i++) if(!c[i] && b[i]) ans.push_back(i);
	printf("%d\n",ans.size());
	for(int i=0;i<ans.size();i++) printf("%d ",ans[i]);
	puts("");
	return 0;
}
