#include <iostream>
#include <iomanip>
#include <complex>
#include <vector>
#include <cmath>
using namespace std;
const int MAX = 1 << 21;
vector<complex<double> > a(MAX), b(MAX);
bool mark[MAX];
inline void fft(vector<complex<double> > &a, bool inv)
{
	for (int i = 0; i < MAX; i++)
	{
		int j = 0;
		for (int k = 0; k <= 20; k++)
			if ((1 << k) & i)
				j |= 1 << (20 - k);
		if (i < j)
			swap(a[i], a[j]);
	}
	for (int len = 2; len <= MAX; len *= 2)
	{
		complex<double> wn(cos(2.0 * M_PI / len), sin(2.0 * M_PI / len));
		if (inv)
			wn.imag() *= -1.0;
		for (int i = 0; i < MAX; i += len)
		{
			complex<double> w(1.0, 0.0);
			for (int j = 0; j < len / 2; j++)
			{
				complex<double> t1 = a[i + j] + w * a[i + j + len / 2];
				complex<double> t2 = a[i + j] - w * a[i + j + len / 2];
				a[i + j] = t1;
				a[i + j + len / 2] = t2;
				w *= wn;
			}
		}
	}
	if (inv)
		for (int i = 0; i < MAX; i++)
			a[i] /= MAX;
}
int main()
{
	ios::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		int val;
		cin >> val;
		a[val].real(1.0);
		mark[val] = true;
	}
	fft(a, false);
	for (int i = 0; i < MAX; i++)
		a[i] *= a[i];
	fft(a, true);
	for (int i = 1; i <= m; i++)
		if (!mark[i] && a[i].real() > 0.5)
		{
			cout << "NO" << endl;
			return 0;
		}
	vector<int> ans;
	for (int i = 0; i <= m; i++)
		if (mark[i] && a[i].real() < 0.5)
			ans.push_back(i);
	cout << "YES\n" << ans.size() << endl;
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
}
