#include <iostream>
#include <map>

const int Maxn = 1<<11;

const int M = 1000 * 1000 * 1000 + 7;
using namespace std;


bool is_lucky(int x)
{
	while(x)
		if(x % 10 !=4 && x % 10 != 7)
			return 0;
		else
			x /= 10;
	return 1;
}

int pow(int a, int b)
{
	long long t = a, sum = 1;
	for(int i=1; i <= b; i*=2, t = (t * t) % M)
		if(i & b)
			sum = (sum * t) % M;
	return sum;
}


#define iter map<int, int>::iterator

const int Max = 1000 * 100 + 10;

map <int, int> mp;
long long d[Maxn][Maxn], other, n, k;
long long ent[Max];

int main()
{
	cin >> n >> k;
	for(int i=0; i<n; i++)
	{
		int x;
		cin >> x;
		if(is_lucky(x))
			mp[x]++;
		else
			other++;
	}
	d[0][0] = 1;
	int i=0;
	for(iter it=mp.begin(); it!=mp.end(); it++)
	{
		i++;
		d[i][0] = 1;
		for(int j=1; j<=i; j++)
			d[i][j] = (it->second * d[i-1][j-1] + d[i-1][j]) % M;
	}
	int tmp = i;
	ent[0] = 1;
	for(i=1;i<=k; i++)
		ent[i] = (ent[i-1] * (other-i + 1) % M) * pow(i, M-2) % M;
	long long sum = 0;
	for(i=0; i<=k; i++)
		sum = (sum + ent[i] * d[tmp][k-i]) % M;
	cout << sum << endl;
	return 0;
}
