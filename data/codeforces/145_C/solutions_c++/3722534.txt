#include <cstdio>
#include <cstring>
#include <map>
#include <iostream>

using namespace std;
typedef long long ll;
const int MAXN = 100010;
const int MOD = 1000000007  ;
map<ll,int> rank ;
int n,k,cnt;
int sum[MAXN] ;
ll dp[MAXN] , f[MAXN] ;
ll power(ll x,ll y){
    ll ret=1;
    while (y){
        if (y&1) ret=ret*x%MOD;
        y>>=1;
        x=x*x%MOD;
    }
    return ret;
}
ll inv(ll x){
    return power(x,MOD-2);
}
ll C(ll n,ll m){
    if (n==m || m==0) return 1LL;
    return f[n]*inv(f[m])%MOD*inv(f[n-m])%MOD;
}
void dfs(ll u){
    if (u>1000000000) return ;
    rank[u]=++cnt;
    dfs(u*10+4);
    dfs(u*10+7);
}

int main(){
    scanf("%d%d",&n,&k);
    cnt=0;
    dfs(4);dfs(7);
    for (int i=1;i<=n;i++){
        int tmp;
        scanf("%d",&tmp);
        sum[rank[tmp]]++ ;
    }
    f[0]=1;
    for (int i=1;i<=100000;i++)
        f[i]=f[i-1]*i%MOD;

    memset(dp,0,sizeof(dp));
    if (sum[0]>0)
    {
        dp[0]=1;
        for (int i=1;i<=min(k,sum[0]);i++)
            dp[i]=C(sum[0],i);
    }else
        dp[0]=1;
    for (int i=1;i<=cnt;i++){
        for (int j=k;j>=0;j--){
            if (j>0) dp[j] += dp[j-1] * sum[i] ;
            dp[j] %= MOD ;
        }
    }
    cout<<(dp[k]%MOD+MOD)%MOD<<endl ;
    return 0;
}

	   			  		  			   	 	 	  	