#include<cstdio>
#include<algorithm>
#include<map>
using namespace std;

#define TR(v,i) for(typeof((v).begin())i=(v).begin();i!=(v).end();++i)
const int MOD = 1e9 + 7, N = 1e5 + 5;

int powMod(long long a, int n) {
	long long res = 1;
	for(; n != 0; n >>= 1) {
		if((n & 1) == 1) res = res * a % MOD;
		a = a * a % MOD;
	}
	return res;
}

bool lucky(int x) {
	for(; x != 0; x /= 10)
		if(x % 10 != 4 && x % 10 != 7)
			return false;
	return true;
}

map<int, int> clucky;
int n, k, unlucky;
long long f[N];

int main() {
	scanf("%d%d", &n, &k);
	for(int i = 0; i < n; ++i) {
		int x; scanf("%d", &x);
		if(lucky(x)) ++clucky[x];
		else ++unlucky;
	}
	f[0] = 1;
	TR(clucky, i) for(int j = min(k, (int) clucky.size()); j > 0; --j)
		f[j] = (f[j] + f[j-1] * i->second) % MOD;
	long long C = 1, res = f[k];
	for(int nUnlucky = 1; nUnlucky <= min(k, unlucky); ++nUnlucky) {
		C = C * (unlucky - nUnlucky + 1) % MOD * powMod(nUnlucky, MOD - 2) % MOD;
		res = (res + f[k-nUnlucky] * C) % MOD;
	}
	printf("%d\n", (int) res);
	return 0;
}
