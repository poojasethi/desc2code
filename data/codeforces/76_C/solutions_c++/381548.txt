#include <cstdio>
#include <iostream>
#include <vector>
#include <memory.h>
#include <string.h>
#include <set>
#include <map>
#include <algorithm>
#include <cmath>
#include <string>
using namespace std;

#define pb push_back
#define mp make_pair
#define sz(a) int((a).size())
#define forn(i, n) for (int i=0; i<(n); ++i)
#define foreach(it, a) for (__typeof((a).begin()) it=(a).begin(); it!=(a).end(); ++it)

typedef int ll;
typedef long double ld;
typedef pair<int,int> pii;

const int maxn = 200005;

char s[maxn];
int n, k, T;
int t[32];
int a[32][32];
int b[32];
ll f[1<<22];
ll g[1<<22];
ll r[1<<22];
int bc[1<<22];
vector<pii> c;
int bad[32];
int id[1<<22];
int start[32];

bool cmp(int x, int y)
{
  return bc[x] < bc[y];
}

int main()
{
  bc[0] = 0;
  for (int i=1; i<(1<<22); ++i) bc[i] = bc[i>>1] + (i&1);
  scanf("%d %d %d", &n, &k, &T); gets(s);
  gets(s);
  forn (i, n) s[i] -= 'A';
  forn (i, k) scanf("%d", t+i);
  forn (i, k) forn (j, k) scanf("%d", &a[i][j]);
  forn (i, n) bad[s[i]]++;
  
  forn (i, k) b[i] = -1;
  forn (i, n)
  {
    c.clear();
    forn (j, k) if (b[j] != -1) c.pb(mp(b[j], j));
    sort(c.begin(), c.end());
    reverse(c.begin(), c.end());
    int mask = 0;
    foreach (it, c)
    {
      if (it->second == s[i])
      { 
        f[mask] += a[it->second][s[i]];
        f[mask | (1<<s[i])] -= a[it->second][s[i]];        
        break;
      }
      f[mask] += a[it->second][s[i]];
      f[mask | (1<<s[i])] -= a[it->second][s[i]];
      f[mask | (1<<it->second)] -= a[it->second][s[i]];
      f[mask | (1<<s[i]) | (1<<it->second)] += a[it->second][s[i]];
      
      mask |= (1<<it->second);      
    }
    b[s[i]] = i;
  }
  
  
 /* forn (i, (1<<k)) id[i] = i;
  sort(id, id+(1<<k), cmp);
  for (int i=(1<<k)-1; i>=0; --i) start[bc[id[i]]] = i;
    
  int res = 0;
  int j = 0;
  for (int q=0; q<=k; ++q)
  {
    //int start = (1<<q)-1;
    for (int j=start[q]; j<(1<<k); ++j)
    //for (int mask = start; mask<(1<<k); ++mask)
//    forn (mask, (1<<k))
    {
       int mask = id[j];
       if (j < 5) g[mask] = f[mask], r[mask] += f[mask];
       else 
       {
         g[mask] = 0;
         int mm = mask, nn = 0;
         mm &= mm-1;
         for (; ; mm &= mm-1)
         {
           g[mask] += g[mm ^ nn];          
           if (mm == 0) break;
           nn |= mask ^ nn ^ mm;           
         }
//         forn (i, k) if (mask&(1<<i))
//           g[mask] += g[mask^(1<<i)]; 
        // g[mask] /= bc[mask]-q;  
         r[mask] += g[mask];
       }       
    }        
  }*/
  
  forn (i, k)
  {
    int t = (1<<i);
    forn (j,(1<<k)) if(j < (j^t)) f[j^t] += f[j];
  }
  int res = 0;
  
//  forn (i, (1<<k)) printf("%d = %d\n", i, f[i]);
  int all = 0;
  forn (i, n) all |= 1<<s[i];
  forn (mask, (1<<k))
  {
    if (mask != all && (mask & all) == mask)
    {
      ll cur = f[mask];
      int ok = 1;
      forn (i, k) if (mask & (1<<i)) cur += t[i];
      if (cur <= T) ++res;//, printf("%d\n", mask);            
    }
  }
  printf("%d\n", res);
  
  
    
  return 0;
}
