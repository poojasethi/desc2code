#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <typeinfo>
#include <fstream>
using namespace std;
#define eps 1e-10
#define SZ(X)   (int)(X).size()
#define CL(X)  (X).clear()
#define inf (1LL<<30)
#define PI acos(-1.0)
#define SQR(v)  (1LL*(v)*(v))
#define X first #define Y second
#define MP(x, y)  make_pair((x), (y))
#define degug(c)  cout << "i am here !!" << " " << ++c << endl;
#define REP(a,b) for(int a=0;a<b;a++)
#define FOR(a,b,c) for(int a=b;a<c;a++)
#define FORD(a,b,c) for(int a=b;a>=c;a--)
const int maxn = 200000 + 5;
int N, f[55], K, T;
char s[maxn];
int a[55][55], last[55];
int g[(1<<22)+5], sum[(1<<22)+5];
int ST, sz;
void func(int score[], char buf[])
{
    int i,j,k;
    sz = 0;
    for(i=N-1; i>=0; i--)
    {
        int x = buf[i] - 'A';
        int mid = 0;
        j = 0;
        for(; j < sz; j++)
        {
            int y = last[j];
            score[mid] += a[x][y];
            score[mid|(1<<x)] -= a[x][y];
            score[mid|(1<<y)] -= a[x][y];
            score[mid|(1<<x)|(1<<y)] += a[x][y];
          //  cout << "^-^" << endl;
            if(y == x) break;
            mid |= (1<<y);
        }
//        //REP(j,sz) if(last[j] == x) break;
        if(j == sz) sz++;
        for(k=j-1; k>=0; k--) last[k+1] = last[k];
        last[0] = x;
    }
}
int main()
{
//freopen("A.txt", "r", stdin);
    scanf("%d %d %d", &N, &K, &T);
    scanf("%s", s);
    REP(i, K) scanf("%d", &f[i]);
    REP(i, K) REP(j, K)   scanf("%d", &a[i][j]);
    for(int i = 0; i < N; i++)   ST |= (1<<s[i] - 'A');
    func(g, s);
    for(int i = 0; i < K; i++)
        for(int j = 0; j < (1<<K); j++)
            if(((1<<i)^j) > j)
            {
                g[(1<<i)^j] += g[j];
            }
    //cout << sum[1] << endl;
//    int ans = 0, exist = ST;
//    REP(i,K) if(exist&(1<<i)) REP(j,(1<<K)) if(j&(1<<i)) sum[j] += f[i];
//    REP(i,(1<<K))
//    {
//        int mask = (1<<K) - 1 - i;
//        if(mask != 0 && (exist & mask) == mask) if(sum[i] <= T) ans++;
//    }
//    cout << ans << endl;
    int ans = 0;
    for(int i = 0; i < ST; i++)
    {
        if((i&ST) != i) continue;
        for(int j = 0; j < K; j++)  if((1<<j)&i)  g[i] += f[j];
        ans += (g[i] <= T);
    }
    cout << ans << endl;
    return 0;
}
