#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
const int maxK = 22;
const int maxN = 200010;

int st[maxN];
int dp[1<<maxK];
int T[maxK+5], g[maxK+5][maxK+5];
int n, K, lim;
int ans;
int nxt[maxN], pos[maxN];

bool cmp(int i, int j) {
	return pos[i] < pos[j];
}
void solve()
{
	for(int i = 0; i < n; ++i) nxt[i] = n + 1;
	int vis[maxK];
	memset(vis, -1, sizeof(vis));
	for(int i = 0; i < K; ++i) pos[i] = n + 1;
	
	for(int i = 0; i < n; ++i) {
		if(vis[st[i]] == -1) {
			vis[st[i]] = i;
			pos[st[i]] = i;
		} else {
			int t = vis[st[i]];
			nxt[t] = i;
			vis[st[i]] = i;
		}
	}
	
	int id[maxK];
	for(int i = 0; i < K; ++i)
		id[i] = i;
	for(int i = 0; i < n; ++i) {
		if(pos[st[i]] == i) {
			pos[st[i]] = nxt[i];
		}
		sort(id, id+K, cmp);
		int state = 0;
		for(int j = 0; j < K; ++j) {
			if(pos[id[j]] == n+1)break;
			int cost = g[st[i]][id[j]];
			dp[state] += cost;
			dp[state | (1<<st[i])] -= cost;
			dp[state | (1<<id[j])] -= cost;
			dp[state | (1<<st[i]) | (1<<id[j])] += cost;
			if(id[j] == st[i])break;
			state |= (1<<id[j]);
		}
	}
	
	for(int iter = 0; iter < K; ++iter) {
		for(int s = 0; s < 1<<K; ++s)
			if(s & (1<<iter))
				dp[s] += dp[s ^ (1<<iter)];
	}
	
	ans = 0;
	int mask = 0;
	for(int i = 0; i < n; ++i)
		mask |= (1<<st[i]);
	//printf("%d\n", mask);
	for(int s = 0; s < 1<<K; ++s) 
		if((s & mask) == s && s != mask) {
			int tmp = 0;
			for(int i = 0; i < K; ++i)
				if(s & (1<<i))
					tmp += T[i];
			tmp += dp[s];
			if(tmp <= lim) ans++;
		}
	
	printf("%d\n", ans);
}

void init()
{
	scanf("%d%d%d", &n, &K, &lim);
	char tmp[maxN];
	scanf("%s", tmp);
	
	for(int i = 0; i < n; ++i)
		st[i] = tmp[i] - 'A';
	for(int i = 0; i < K; ++i)
		scanf("%d", &T[i]);
	for(int i = 0; i < K; ++i)
		for(int j = 0; j < K; ++j)
			scanf("%d", &g[i][j]);
}

int main()
{
	init();//puts("-");fflush(stdout);
	solve();
	
	return 0;
}
