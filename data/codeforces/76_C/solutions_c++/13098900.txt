#include<bits/stdc++.h>
using namespace std;
long long int nex[200200],n,k,T;
long long int f[5002000];
long long int s[200200];
long long int a[30][30];
long long int cost[200],sum=0;
bool cmp(long long int x,long long int y)
{
    return nex[x]<nex[y];
}
void cal(long long int l,long long int r,long long int x)
{
    if(l==r) return ;
    cal(l,r^(1LL<<x),x-1);
    cal((r^(1LL<<x))+1,r,x-1);
    for(long long int i=(r^(1LL<<x))+1;i<=r;i++) {
            f[i]+=f[i-(1LL<<x)];
    }
}
long long int cal(long long int x)
{
    long long int i,ans=0;
    for(i=0;i<k;i++) if(x&(1LL<<i)) ans+=cost[i];
    if(ans>=sum) ans+=(1LL<<35);
    return ans;
}
void prepare()
{
    long long int i,j;
    memset(nex,0x3f,sizeof nex);
    for(i=n;i>=1;i--){
        vector<long long int> tmp;
        long long int mask=0;
        if(cost[s[i]]>=(1LL<<34)) {cost[s[i]]-=(1LL<<35); sum+=cost[s[i]];}
        for(j=0;j<k;j++){
            if(nex[j]!=nex[200010]) tmp.push_back(j);
        }
        sort(tmp.begin(),tmp.end(),cmp);
        for(j=0;j<tmp.size();j++){
            f[mask]+=a[s[i]][tmp[j]];
            f[mask|(1LL<<s[i])]-=a[s[i]][tmp[j]];
            f[mask|(1LL<<tmp[j])]-=a[s[i]][tmp[j]];
            f[mask|(1LL<<s[i])|(1LL<<tmp[j])]+=a[s[i]][tmp[j]];
            if(s[i]==tmp[j]) break;
            mask|=(1LL<<tmp[j]);
        }
        nex[s[i]]=i;
    }
    long long int ans=0;
    cal(0,(1LL<<k)-1,k-1);
    for(i=(1LL<<k)-2;i>=0;i--){
        ans+=((f[i]+cal(i))<=T);
    }
    printf("%lld",ans);
}
char t[200200];
int main()
{
    long long int i,j;
    //freopen("test.inp","r",stdin);
    //freopen("test.out","w",stdout);
    scanf("%lld %lld %lld",&n,&k,&T);
    getchar();
    scanf("%s",t+1);
    for(i=1;i<=n;i++) s[i]=t[i]-'A';
    for(i=0;i<k;i++) scanf("%lld",&cost[i]);
    for(i=0;i<k;i++) {cost[i]+=1LL<<35;}
    for(i=0;i<k;i++)
    for(j=0;j<k;j++) scanf("%lld",&a[i][j]);
    prepare();
}
