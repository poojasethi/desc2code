#include <bits/stdc++.h>
#define FOR(i, j, k) for (int i = j; i <= k; i ++)
#define FORD(i, j, k) for (int i = j; i >= k; i --)
#define mn 1005
#define mn2 30004
#define maxC 1000000007
#define pb push_back
#define F first
#define S second
#define mp make_pair
#define ex 0.000001

using namespace std;
int n, m, s, t, path[mn], rPath = 0, ans = maxC << 1;
int num[mn], low[mn], rig, w[mn2], way[3], r = 0;
int mark[mn], respond[mn], co = 1, best[mn];
bool found = false, markE[mn2];
vector< pair<int, int> > g[mn];

void findPath(int u)
{
    if (u == t)
    {
        found = true;
        return;
    }
    mark[u] = 1;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int v = g[u][i].F;
        if (mark[v])
            continue;
        path[++ rPath] = g[u][i].S;
        findPath(v);
        if (found)
            return;
        rPath --;
    }
}

void dfs(int u, int pV, int pE)
{
    mark[u] = co;
    low[u] = num[u] = ++ rig;
    best[u] = 0;
    FOR(i, 0, int(g[u].size()) - 1)
    {
        int e = g[u][i].S;
        if (markE[e])
            continue;
        int v = g[u][i].F;
        if (mark[v] == co)
            low[u] = min(low[u], num[v]);
        else
        {
            markE[e] = true;
            dfs(v, u, e);
            low[u] = min(low[u], low[v]);
            markE[e] = false;
        }
    }
    if (respond[u] == co)
    {
        respond[pV] = co;
        best[pV] = best[u];
        if (low[u] == num[u] && w[pE] < w[best[pV]])
            best[pV] = pE;
    }
}

void better(int a)
{
    if (ans > w[a])
    {
        ans = w[a];
        way[r = 1] = a;
    }
}

void better(int a, int b)
{
    if (ans > w[a] + w[b])
    {
        ans = w[a] + w[b];
        way[1] = a;
        way[r = 2] = b;
    }
}

void setup()
{
    cin >> n >> m >> s >> t;
    int u, v;
    FOR(i, 1, m)
    {
        cin >> u >> v >> w[i];
        if (u == v)
            continue;
        g[u].pb(mp(v, i));
        g[v].pb(mp(u, i));
    }
    w[0] = maxC;
}

void xuly()
{
    findPath(s);
    if (!found)
    {
        cout << "0\n0\n";
        return;
    }
    while(rPath)
    {
        int e = path[rPath --];
        markE[e] = true;
        rig = 0;
        respond[t] = ++ co;
        dfs(s, 0, 0);
        if (mark[t] != co)
            better(e);
        else if (best[s])
            better(e, best[s]);
        markE[e] = false;
    }
    if (r == 0)
        cout << -1;
    else
    {
        cout << ans << '\n' << r << '\n';
        FOR(i, 1, r)
            cout << way[i] << ' ';
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    setup ();
    xuly ();
    return 0;
}
