#include <iostream>
#include <vector>
#include <cmath>
#include <cstdlib>

using namespace std;

void minimiza(int &a,int b)
{
  a=min(a,b);
}

const int limite=1000000;
const int infinito=2000000001;

struct arista {
  int v,ind;
  arista() {}
  arista(int v,int ind):v(v),ind(ind) {}
};

int n,m;
int s,t;
int prohibida=0;
vector<arista> g[limite];
int visto[limite];
vector<int> lista;
int ind2c[limite];


int hayt[limite];
int profundidad[limite];
int profant[limite];

int sol=infinito;
int sol1,sol2;

void calcula(int u,int pind,int prof)
{
  //cout<<"calcula "<<u<<" "<<pind<<" "<<prof<<endl;
  visto[u]=1;
  profundidad[u]=prof;
  profant[u]=prof;
  hayt[u]=u==t;
  vector<arista> &ar=g[u];
  for (int i=0;i<int(ar.size());i++) {
    int v=ar[i].v;
    int aind=ar[i].ind;
    if (prohibida==aind) continue;
    if (aind!=pind) {
      if (visto[v]) {
	if (profundidad[v]<profundidad[u])
	  minimiza(profant[u],profundidad[v]);
      } else {
	calcula(v,aind,prof+1);
	minimiza(profant[u],profant[v]);
	hayt[u]=hayt[u] or hayt[v];
	if (profant[v]>profundidad[u]) {
	  int nextsol=ind2c[prohibida]+ind2c[aind];
	  if (hayt[v] and nextsol<sol) {
	    sol=nextsol;
	    sol1=prohibida;
	    sol2=aind;
	  }
	}
      }
    }
  }
}


void genera(int u)
{
  visto[u]=1;
  vector<arista> &ar=g[u];
  for (int i=0;i<int(ar.size());i++) {
    if (visto[ar[i].v]==0) {
      lista.push_back(ar[i].ind);
      genera(ar[i].v);
    }
  }
}

int main()
{
  cin>>n>>m>>s>>t;
  for (int i=1;i<=m;i++) {
    int u,v,c;
    cin>>u>>v>>c;
    g[u].push_back(arista(v,i));
    g[v].push_back(arista(u,i));
    ind2c[i]=c;
  }
  genera(s);
  for (int u=1;u<=n;u++)
    hayt[u]=visto[u]=0;
  calcula(s,0,0);
  if (hayt[s]==0) {
    cout<<0<<endl;
    cout<<0<<endl;
    cout<<endl;
    exit(0);
  }
  for (int i=0;i<int(lista.size());i++) {
    prohibida=lista[i];
    //cout<<endl;
    //cout<<"prohibimos "<<prohibida<<endl;
    for (int u=1;u<=n;u++)
      hayt[u]=visto[u]=0;
    calcula(s,0,0);
  }
  if (sol==infinito) cout<<-1<<endl;
  else if (sol1==0) {
    cout<<sol<<endl;
    cout<<1<<endl;
    cout<<sol2<<endl;
  } else {
    cout<<sol<<endl;
    cout<<2<<endl;
    cout<<sol1<<" "<<sol2<<endl;
  }
}
