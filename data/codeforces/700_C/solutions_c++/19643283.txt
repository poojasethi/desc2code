#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll,ll> ii;
typedef pair<ii,ll> iii;
#define st first
#define nd second
const int edge=30005;
const int node=1005;
int n,m,low[node],num[node],p[node],s,t,cnt,val[edge];
long long aced=1e12;
bool check[edge],vis[node],flag,ed[edge];
ii come[node],mn;
vector <int> ans,path;
vector <ii> G[node];

void bfs() {
    queue <int> q;
    q.push(s);
    p[s]=s;
    while(!q.empty()) {
        int u=q.front(); q.pop();
        for(int i=0;i<G[u].size();i++) {
            int v=G[u][i].st; if(vis[v]) continue;
            int ind=G[u][i].nd;
            p[v]=u;
            vis[v]=1;
            come[v]=ii(u,ind);
            q.push(v);
        }
    }
}

void  trace(int v) {
    //cout<<v<<endl;
    if(p[v]==v) return;
    int par=come[v].st , ind=come[v].nd;
    path.push_back(ind);
    trace(par);
}

void solve(int v) {
    //cout<<v<<endl;
    if(p[v]==v) return;
    int par=come[v].st , ind=come[v].nd;
    //cout<<v<<' '<<num[v]<<' '<<low[v]<<endl;
    //cout<<ind<<endl;
    if(low[v]>=num[v]) {
        //cout<<ind<<endl;
        if(mn.st>val[ind]){
            mn.st=val[ind];
            mn.nd=ind;
        }
        flag=1;
    }
    solve(par);
}

void dfs(int u,int par) {
    num[u]=low[u]=cnt++;
    for(int i=0;i<G[u].size();i++) {
        int v=G[u][i].st; int ind=G[u][i].nd; if(check[ind]) continue;
        if(vis[v]) low[u]=min(low[u],num[v]);
        else {
            vis[v]=1; check[ind]=1;
            come[v]=ii(u,ind);
            dfs(v,u);
            low[u]=min(low[u],low[v]);
        }
    }
}

int main() {
    cin>>n>>m>>s>>t;
    mn=ii(1e12,1e12);
    for(int i=1;i<=m;i++) {
        int u,v,w; cin>>u>>v>>w;
        G[u].push_back(ii(v,i));
        G[v].push_back(ii(u,i));
        val[i]=w;
    }
    vis[s]=1;
    bfs(); trace(t);
    dfs(s,0);
    if(!vis[t]) {
        cout<<0<<endl<<0;
        return 0;
    }
    for(int i=0;i<path.size();i++) {
        for(int i=1;i<=n;i++) come[i]=ii(0,0);
        memset(vis,0,sizeof(vis));
        memset(check,0,sizeof(check));
        int des=path[i];
        cnt=0;
        check[des]=1; vis[s]=1; dfs(s,0);
        if(!vis[t]) {
            flag=1;
            if(aced>val[des]) {
                aced=val[des];
                ans.clear();
                ans.push_back(des);
            }
            continue;
        }
        mn.st=1e12; solve(t);
        if(mn.st==1e12)  continue;
        else {
            if(aced>1LL*mn.st+val[des]) {
                aced=val[des]+mn.st;
                ans.clear();
                ans.push_back(des);
                ans.push_back(mn.nd);
            }
        }
    }
    if(!flag) cout<<-1;
    else {
        cout<<aced<<endl<<ans.size()<<endl;
        for(int i=0;i<ans.size();i++) cout<<ans[i]<<' ';
    }
}

