#include<cstdio>
#include<cstring>

const int N = 1e3 + 10;
const int M = 3e4 + 10;
const int P = M<<1;
const int inf = 0x7fffffff;

inline void Min(int &a, int b){
	if(a > b)	a = b;
}

int n, m, st, ed, l, head[N], to[P], idx[P], nxt[P], from[N][2];
int weight[M];
int ans, cur, cnt, edge[2];
int F[N], G[N], Q[N], qhead, qtail;

inline void add_edge(int a, int b, int id){
	to[l] = b;
	nxt[l] = head[a];
	idx[l] = id;
	head[a] = l++;
}

int dfs_cnt, low[N], pre[N];
bool vis[M];
int bridge[M][3], b_cnt;
int paths[N], p_cnt;

void init(int x, int *arr){
	qhead = qtail = 0;
	for(int i=1; i<=n; i++)	arr[i] = inf;
	arr[x] = 0;
    Q[qtail++] = x;
    from[x][0] = 0;
    from[x][1] = 0;
    while(qhead < qtail){
		x = Q[qhead++];
		for(int i=head[x]; ~i; i=nxt[i]){
			if(vis[idx[i]])	continue;
			int j = to[i];
			if(arr[j] == inf){
				arr[j] = arr[x] + 1;
				from[j][0] = x;
				from[j][1] = idx[i];
				Q[qtail++] = j;
			}
		}
    }
}

void dfs(int x){
	low[x] = pre[x] = ++dfs_cnt;
	for(int i=head[x]; ~i; i=nxt[i]){
		if(vis[idx[i]])	continue;
		vis[idx[i]] = 1;
		int j = to[i];
		if(!pre[j]){
			dfs(j);
			if(low[j] > pre[x]){
				bridge[b_cnt][0] = x;
				bridge[b_cnt][1] = j;
				bridge[b_cnt][2] = idx[i];
				b_cnt++;
			}
			Min(low[x], low[j]);
		} else {
			Min(low[x], pre[j]);
		}
	}
}

void solve(){
	memset(pre, 0, sizeof(pre));
	b_cnt = 0;
	dfs_cnt = 0;

	dfs(st);

	int x, y, z;
	for(int i=0; i<b_cnt; i++){
        x = bridge[i][0];
        y = bridge[i][1];

        if(F[x]==inf || F[y]==inf)	continue;
		z = inf;

        if(F[x]==F[y]+1 && G[y]==G[x]+1){
			z = weight[cur] + weight[bridge[i][2]];
        } else if(F[y]==F[x]+1 && G[x]==G[y]+1){
			z = weight[cur] + weight[bridge[i][2]];
        }

        if(z < ans){
			ans = z;
			if(cur == 0){
				edge[0] = bridge[i][2];
				cnt = 1;
			} else {
				edge[0] = cur;
				edge[1] = bridge[i][2];
				cnt = 2;
			}
        }
	}
}

void get_paths(){
    int x = st;
    int y;
    p_cnt = 0;
    while(x != ed){
		y = from[x][0];
        paths[p_cnt] = from[x][1];
        p_cnt++;
        x = y;
    }
}

int main(){
	weight[0] = 0;
	int x, y;
	while(~scanf("%d %d", &n, &m)){
		for(int i=1; i<=n; i++){
			head[i] = -1;
		}

		l = 0;
        scanf("%d %d", &st, &ed);
        for(int i=1; i<=m; i++){
			scanf("%d %d %d", &x, &y, weight+i);
			if(x == y)	continue;
			add_edge(x, y, i);
			add_edge(y, x, i);
        }

		cur = 0;
		memset(vis, 0, sizeof(vis));
        init(st, F);
        if(F[ed] == inf){
			puts("0");
            puts("0");
            continue;
        }

        init(ed, G);

        ans = inf;
        solve();
        get_paths();

        for(int i=0; i<p_cnt; i++){
			cur = paths[i];
			memset(vis, 0, sizeof(vis));
			vis[cur] = 1;

			init(st, F);
			if(F[ed]==inf){
				continue;
			}
			init(ed, G);

			solve();
        }

        if(ans == inf){
			puts("-1");
        } else {
			printf("%d\n%d\n", ans, cnt);
			for(int i=0; i<cnt; i++){
				printf("%d%c", edge[i], i==cnt-1?'\n':' ');
			}
        }
	}
	return 0;
}
