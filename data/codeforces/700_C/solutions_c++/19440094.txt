#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <deque>
#include <set>
#include <map>
using namespace std;

typedef long long ll;
typedef double lf;
typedef long double Lf;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;

#define TRACE(x) cerr << #x << "  " << x << endl
#define FOR(i, a, b) for (int i = (a); i < int(b); i++)
#define REP(i, n) FOR(i, 0, n)
#define all(x) (x).begin(), (x).end()
#define _ << " " <<

#define fi first
#define sec second
#define mp make_pair

const int MAXN = 1010;
const int MAXM = 30010;
const int inf = (1 << 31) - 1;

int n, m, a[MAXM], b[MAXM], c[MAXM], dis[MAXN], low[MAXN], tajm;
int bio[MAXN], tmp, dp[MAXN];
int A, B;

vector <pii> v[MAXN];
vector <int> v1;

bool ok;

void findPath(int cvor) {
	bio[cvor] = 1;
	if (cvor == B) {
		ok = 1;
		return;
	}

	REP(i, (int)v[cvor].size()) {
		int ncvor = v[cvor][i].fi;
		if (bio[ncvor]) continue;
		v1.push_back(v[cvor][i].sec);
		findPath(ncvor);
		if (ok) return;
		v1.pop_back();
	}
}

void dfs(int cvor, int par, int e) {
	bio[cvor] = 1;
	tajm++;
	dis[cvor] = low[cvor] = tajm;
	if (cvor == B) dp[cvor] = 1;

	REP(i, (int)v[cvor].size()) {
		int ncvor = v[cvor][i].fi;
		if (v[cvor][i].sec == e) continue;
		if (v[cvor][i].sec == par || bio[ncvor] == 2) continue;
		if (bio[ncvor] == 1) {
			low[cvor] = min(low[cvor], dis[ncvor]);
			continue;
		}

		dfs(ncvor, v[cvor][i].sec, e);
		dp[cvor] += dp[ncvor];

		low[cvor] = min(low[cvor], low[ncvor]);

		if (low[ncvor] > dis[cvor] && dp[ncvor]) 
			if (tmp == -1 || c[tmp] > c[v[cvor][i].sec]) tmp = v[cvor][i].sec;
	}
	bio[cvor] = 2;
}

int main() {
	scanf("%d %d",&n,&m);
	scanf("%d %d",&A,&B);
	REP(i, m) {
		scanf("%d %d %d",&a[i],&b[i],&c[i]);
		v[a[i]].push_back(mp(b[i],i));
		v[b[i]].push_back(mp(a[i],i));
	}

	findPath(A);

	if (v1.empty()) {
		puts("0");
		puts("0");
		return 0;
	}

	int sol = inf;

	vector <int> sol1;

	REP(i, (int)v1.size()) {
		tajm = 0;
		memset(bio, 0, sizeof bio);
		memset(dp, 0, sizeof dp);
		tmp = -1;
		dfs(A, -1, v1[i]);
		if (!dp[B] && tmp == -1 && c[v1[i]] < sol) {
			sol = c[v1[i]];
			sol1.clear();
			sol1.push_back(v1[i]);
		}
		else if (dp[B] && tmp > -1 && c[v1[i]] + c[tmp] < sol) {
			sol = c[v1[i]] + c[tmp];
			sol1.clear();
			sol1.push_back(v1[i]);
			sol1.push_back(tmp);
		}
	}

	if (sol == inf) {
		puts("-1");
		return 0;
	}

	printf("%d\n",sol);
	printf("%d\n",(int)sol1.size());
	REP(i, (int)sol1.size())
		printf("%d ",sol1[i] + 1);
	puts("");

	return 0;
}

