#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <complex>
#include <locale>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <bitset>
using namespace std;
const int MAXN = 1000, MAXM = 30000, oo = 2000000009;
int n, m, s, t, a[MAXM * 2 + 9], b[MAXM * 2 + 9], c[MAXM * 2 + 9], del[MAXM * 2 + 9], par[MAXN + 9], ans;
int cntNum, num[MAXN + 9], low[MAXN + 9], bridge[MAXM * 2 + 9];
vector<int> adj[MAXN + 9], vAns;

int Rev(int x)
{
    if(x > m)
    {
        return x - m;
    }
    return x + m;
}

void FindPath(int start)
{
    fill(par, par + n + 1, -1);
    par[start] = 0;
    deque<int> dq;
    dq.push_back(start);
    while(!dq.empty())
    {
        int x = dq.front();
        dq.pop_front();
        for(int i = 0; i < adj[x].size(); i++)
        {
            int id = adj[x][i];
            if(!del[id] && par[b[id]] == -1)
            {
                par[b[id]] = id;
                dq.push_back(b[id]);
            }
        }
    }
}

void Dfs(int x)
{
    cntNum++;
    num[x] = cntNum;
    low[x] = n + 1;
    for(int i = 0; i < adj[x].size(); i++)
    {
        int id = adj[x][i];
        if(!del[id])
        {
            del[Rev(id)] = 1;
            if(!num[b[id]])
            {
                par[b[id]] = id;
                Dfs(b[id]);
                low[x] = min(low[x], low[b[id]]);
            }
            else
            {
                low[x] = min(low[x], num[b[id]]);
            }
        }
    }
}

int main()
{
    //ifstream cin("c.inp");
    //ofstream cout("c.out");
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cin >> n >> m >> s >> t;
    for(int i = 1; i <= m; i++)
    {
        cin >> a[i] >> b[i] >> c[i];
        a[i + m] = b[i];
        b[i + m] = a[i];
        c[i + m] = c[i];
        adj[a[i]].push_back(i);
        adj[b[i]].push_back(i + m);
    }
    ans = oo;
    FindPath(s);
    if(par[t] == -1)
    {
        cout << "0\n0\n";
        return 0;
    }
    for(int dEdge = par[t]; dEdge != 0; dEdge = par[a[dEdge]])
    {
        fill(del, del + m * 2 + 1, 0);
        del[dEdge] = 1;
        del[Rev(dEdge)] = 1;
        FindPath(s);
        if(par[t] == -1)
        {
            if(c[dEdge] < ans)
            {
                ans = c[dEdge];
                vAns.clear();
                vAns.push_back((dEdge - 1) % m + 1);
            }
            continue;
        }
        cntNum = 0;
        fill(num, num + n + 1, 0);
        Dfs(s);
        if(num[t] != 0)
        {
            for(int dEdge2 = par[t]; dEdge2 != 0; dEdge2 = par[a[dEdge2]])
            {
                if(low[b[dEdge2]] >= num[b[dEdge2]])
                {
                    if(c[dEdge] + c[dEdge2] < ans)
                    {
                        ans = c[dEdge] + c[dEdge2];
                        vAns.clear();
                        vAns.push_back((dEdge - 1) % m + 1);
                        vAns.push_back((dEdge2 - 1) % m + 1);
                    }
                }
            }
        }
    }
    if(ans == oo)
    {
        cout << "-1\n";
        return 0;
    }
    cout << ans << "\n";
    cout << vAns.size() << "\n";
    for(int i = 0; i < vAns.size(); i++)
    {
        cout << vAns[i] << " ";
    }
    cout << "\n";
    return 0;
}
