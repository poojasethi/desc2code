#include <bits/stdc++.h>
using namespace std;
typedef pair <int, int> ii;
typedef pair <int, ii> II;
typedef vector <int> vi;

#define ll long long
#define ff(i, a, b) for (int i = (int)(a); i <= (int)(b); i++)
#define fod(i, a, b) for (int i = (int)(a); i >= (int)(b); i--)
#define pb push_back
#define fi first
#define se second
const int N = 1010, mod = (int)1e9 + 7, INF = 1e9;

int n, m, s, t, cnt;
vector <II> G[N];
int par[N], E[N], weight[30010], num[N], low[N];
bool check[30010];
int Count[N][N];
ll ans = 1e18; 
int del1, del2;

void bfs() {
	memset(par, 0, sizeof par);
	queue <int> q; q.push(s); par[s] = 0;
	while(!q.empty()) {
		int u = q.front(); q.pop();
		ff(i, 0, G[u].size()-1) {
			int v = G[u][i].se.fi; if (par[v] || v == s) continue;
			par[v] = u; E[v] = G[u][i].fi; q.push(v);
		}
	}
}

void dfs(int u, int p) {
	num[u] = low[u] = ++cnt;
	int v;
	ff(i, 0, G[u].size()-1) if (!check[G[u][i].fi]) {
		if (Count[G[u][i].se.fi][u] == 1) { E[G[u][i].se.fi] = 0; continue; }
		int v = G[u][i].se.fi; if (v == p) continue;
		if (num[v]) low[u] = min(low[u], num[v]);
		else {
			par[v] = u; dfs(v, u); low[u] = min(low[u], low[v]);
			if (low[v] >= num[v]) E[v] = G[u][i].fi;
		}
		Count[G[u][i].se.fi][u]++;
	}
	ff(i, 0, G[u].size()-1) Count[G[u][i].se.fi][u] = 0;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> n >> m >> s >> t;  
	ff(i, 1, m) {
		int u, v, w; cin >> u >> v >> w;
		G[u].pb(II(i, ii(v, w)));
		G[v].pb(II(i, ii(u, w)));
		weight[i] = w;
	}
	bfs();
	vi edge;
	int cur = t; while(par[cur]) edge.pb(E[cur]), cur = par[cur];
	if (edge.empty()) return cout << "0\n0\n", 0;
	
	ff(i, 0, edge.size()-1) {
		int id = edge[i];
		check[id] = 1; cnt = 0;
		memset(num, 0, sizeof num); memset(low, 0, sizeof low); 
		memset(par, 0, sizeof par); memset(E, 0, sizeof E);
		dfs(s, s);

		if (!num[t] && ans > weight[id]) ans = weight[id], del1 = id, del2 = 0;
		else if (num[t]) {
			cur = t; ll W = 1e18;
			int id2 = 0;
			while(par[cur]) {
				if (E[cur] && W > weight[E[cur]]) W = weight[E[cur]], id2 = E[cur]; 
				cur = par[cur];
			}
			ll r = (ll)W + weight[id];
			if (ans > r) ans = r, del1 = id, del2 = id2;
		}
		check[id] = 0;
	}
	if (ans == 1e18) return cout << -1 << endl, 0;
	cout << ans << endl;
	if (del1 && del2) cout << 2 << endl;
	else cout << 1 << endl;
	if (del1) cout << del1 << ' ';
	if (del2) cout << del2 << endl;
}