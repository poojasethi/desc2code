#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int maxn=1100,maxm=31000,inf=2000001000;

int head[maxn],list[maxm<<2],nxt[maxm<<2],w[maxm<<2],tot=1;
int use[maxn],top;
int n,m,s,t,fa[maxn],fr[maxn],dfn[maxn],low[maxn],tim;
bool vis[maxn];

inline void add(int a,int b,int c){
	tot++;
	nxt[tot]=head[a];
	head[a]=tot;
	list[tot]=b;
	w[tot]=c;
	return;
}

struct rec{
	int sum,num,e[2];
	rec(){
		sum=inf;
	}
	inline void up(int su,int nu,int a,int b=0){
		if (su<sum){
			sum=su;
			num=nu;
			e[0]=a;
			e[1]=b;
		}
		return;
	}
}ans;

void dfs(int p,int f){
	fr[p]=f;
	fa[p]=list[f];
	vis[p]=true;
	for (int i=head[p];i;i=nxt[i]) if (!vis[list[i]]){
		int v=list[i];
		dfs(v,i^1);
	}
	return;
}

int dlt;

void tar(int p,int f){
	dfn[p]=low[p]=++tim;
	for (int i=head[p];i;i=nxt[i]) if (i!=f&&i/2!=dlt/2){
		int v=list[i];
		if (!dfn[v]){
			tar(v,i^1);
			fa[v]=p;
			fr[v]=i;
			if (low[v]>dfn[p]) vis[v]=true;
			else if (low[v]<low[p]) low[p]=low[v];
		}
		else low[p]=min(low[p],dfn[v]);
	}
	return;
}

inline int ask(){
	int ret=0,a=t;
	while(a!=s){
		if (vis[a]) if (w[fr[a]]<w[ret]) ret=fr[a];
		a=fa[a];
	}
	return ret;
}

int main(){
	int a,b,c;
	scanf("%d%d",&n,&m);
	scanf("%d%d",&s,&t);
	while(m--){
		scanf("%d%d%d",&a,&b,&c);
		add(a,b,c);
		add(b,a,c);
	}
	dfs(s,0);
	if (!vis[t]){
		puts("0");
		puts("0");
		return 0;
	}
	w[0]=w[1]=inf;
	m=t;
	while(m!=s){
		use[top++]=fr[m];
		m=fa[m];
	}
	for (int i=0;i<top;i++){
		dlt=use[i];
		memset(dfn,0,sizeof(dfn));
		memset(low,0,sizeof(low));
		memset(vis,0,sizeof(vis));
		tim=0;
		tar(s,0);
		if (dfn[t]==0) ans.up(w[use[i]],1,use[i]/2);
		else{
			m=ask();
			if (m) ans.up(w[use[i]]+w[m],2,use[i]/2,m/2);
		}
	}
	if (ans.sum==inf) puts("-1");
	else{
		printf("%d\n%d\n",ans.sum,ans.num);
		for (int i=0;i<ans.num;i++) printf("%d ",ans.e[i]);
	}
	return 0;
}
