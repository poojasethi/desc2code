#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <stdlib.h>
#include <ctime>
#include <set>
#include <map>
#include <queue>
#include <string>
#include <math.h>
#include <queue>
#include <memory.h>
#include <iostream>
#include <stack>
//#include <complex>
 
using namespace std;
 
void ASS(bool b)
{
    if (!b)
    {
        ++*(int*)0;
    }
}
 
#define FOR(i, x) for (int i = 0; i < (int)(x); i++)
#define CL(x) memset(x, 0, sizeof(x))
 
#pragma comment(linker, "/STACK:106777216")
 
typedef vector<int> vi;
typedef long long LL;

vi g[512];
int d[512][512];
int f[512][512];
int pX[512][512];
int pY[512][512];

queue<int> q;

void add(int x, int y, int px, int py)
{
	if (x != y && !d[x][y])
	{
		d[x][y] = 1;
		pX[x][y] = px;
		pY[x][y] = py;
		q.push(x);
		q.push(y);
	}
}

void W(vi v)
{
	FOR(i, v.size())
	{
		if (i) cout << " ";
		cout << v[i];
	}
	cout << endl;
}

int main()
{
	int n, m;
	cin >> n >> m;
	FOR(i, m)
	{
		int x, y;
		cin >> x >> y;
		g[x].push_back(y);
		g[y].push_back(x);
	}
	add(1, n, -1, -1);
	while (!q.empty())
	{
		int x = q.front(); q.pop();
		int y = q.front(); q.pop();
		FOR(i, g[x].size())
		{
			if (!f[y][g[x][i]])
			{
				f[y][g[x][i]] = 1;
				FOR(j, g[y].size())
					add(g[x][i], g[y][j], x, y);
			}
		}
	}
	if (d[n][1] == 0)
	{
		printf("-1\n");
		return 0;
	}
	int cx = n;
	int cy = 1;
	vi vx, vy;
	while (1)
	{
		int px = pX[cx][cy];
		int py = pY[cx][cy];
		vx.push_back(cx);
		vy.push_back(cy);
		if (cx == 1 && cy == n)
			break;
		cx = px;
		cy = py;
	}
	cout << (vx.size() - 1) << endl;
	reverse(vx.begin(), vx.end());
	reverse(vy.begin(), vy.end());
	W(vx);
	W(vy);

	return 0;
}