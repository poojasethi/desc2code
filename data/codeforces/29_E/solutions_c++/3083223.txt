#include<cstdio>
#include<cstring>
#include<algorithm>
#define fou(i,j,k) for (int i=j;i<=k;i++)
#define fod(i,j,k) for (int i=j;i>=k;i--)
using namespace std;

const int maxn=505;
const int maxd=250010;
const int maxm=20010;

struct edge{
	int y,d,next;
}a[maxm];

struct node{
	int x,y;
}q[maxd];

int n;
int len,first[maxn];
int pre[maxn][maxn][2],ans[maxd][2],tot;
bool v1[maxn][maxn];

void ins(int x,int y)
{
	len++;
	a[len].y=y;a[len].next=first[x];first[x]=len;
}

void init()
{
	int m,x,y;
	scanf("%d%d",&n,&m);
	len=0;memset(first,-1,sizeof(first));
	while (m--){
		scanf("%d%d",&x,&y);
		ins(x,y);
		ins(y,x);
	}
}

void solve()
{
	int head,tail,x,y,xx,yy,z;
	node tmp,now;

	head=tail=1;
	q[1].x=1;q[1].y=n;
	memset(v1,false,sizeof(v1));
	v1[1][n]=true;
	pre[1][n][0]=-1;
	
	while (head<=tail){
		now=q[head++];
		x=now.x;y=now.y;
		for (int k=first[x];k!=-1;k=a[k].next){
			xx=a[k].y;
			if (v1[xx][y]) continue;
			v1[xx][y]=true;
			for (int k=first[y];k!=-1;k=a[k].next){
				yy=a[k].y;
				if (xx==yy) continue;
				if (!pre[xx][yy][0]){
					pre[xx][yy][0]=x;
					pre[xx][yy][1]=y;
					tmp.x=xx;tmp.y=yy;
					q[++tail]=tmp;
				}
			}
		}
	}
	
	if (!pre[n][1][0]) printf("-1\n");
	else{
		tot=0;
		x=n;y=1;
		while (x!=-1){
			tot++;
			ans[tot][0]=x;
			ans[tot][1]=y;
			z=x;
			x=pre[x][y][0];
			y=pre[z][y][1];
		}
		printf("%d\n",tot-1);
		fod(i,tot,1) printf("%d ",ans[i][0]);
		printf("\n");
		fod(i,tot,1) printf("%d ",ans[i][1]);
		printf("\n");
	}
}

int main()
{
	init();
	solve();
	return 0;
}
