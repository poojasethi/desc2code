#include<iostream>
#include<cstring>
#include<cstdio>

using namespace std;

const int maxn = 501;

int n , m;
bool edge[maxn][maxn];
bool f[maxn][maxn][maxn] , g[maxn][maxn] , h[maxn][maxn];
int V[2][maxn];

void input() {
	scanf( "%d%d" , &n , &m );
	for ( int i = 1 ; i <= m ; i++ ) {
		int u , v; scanf( "%d%d" , &u , &v );
		edge[u][v] = edge[v][u] = true;
	}
}

void solve() {
	h[1][n] = f[0][1][n] = true;
	int ans = 0;
	for ( int i = 1 ; i <= n ; i++ ) {
		memset( g , false , sizeof( g ) );
		for ( int j = 1 ; j <= n ; j++ )
			for ( int k = 1 ; k <= n ; k++ )
				if ( f[i - 1][j][k] ) {
					for ( int l = 1 ; l <= n ; l++ )
						if ( edge[j][l] ) g[l][k] = true;
				}
		for ( int j = 1 ; j <= n ; j++ )
			for ( int k = 1 ; k <= n ; k++ )
				if ( g[j][k] ) {
					for ( int l = 1 ; l <= n ; l++ )
						if ( j != l && edge[k][l] && !h[j][l] ) h[j][l] = f[i][j][l] = true;
				}
		if ( f[i][n][1] ) {
			ans = i;
			break;
		}
	}
	if ( ans == 0 ) {
		printf( "-1\n" );
		return;
	}
	printf( "%d\n" , ans );
	V[0][ans + 1] = n;
	V[1][ans + 1] = 1;
	for ( int i = ans , a = n , b = 1 ; i >= 1 ; i-- ) {
		bool fin = false;
		for ( int j = 1 ; j <= n && !fin ; j++ )
			for ( int k = 1 ; k <= n && !fin ; k++ )
				if ( f[i - 1][j][k] && edge[j][a] && edge[k][b] ) {
					fin = true;
					a = j;
					b = k;
				}
		V[0][i] = a;
		V[1][i] = b;
	}
	for ( int i = 1 ; i <= ans + 1 ; i++ ) printf( "%d " , V[0][i] ); printf( "\n" );
	for ( int i = 1 ; i <= ans + 1 ; i++ ) printf( "%d " , V[1][i] ); printf( "\n" );
}

int main() {
	input();
	solve();
	
	return 0;
}
