#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>

#define X first
#define Y second
#define MP(x, y) make_pair((x), (y))

using namespace std;

typedef pair<int, int> PR;

const int maxn = 505;
const int maxe = 10005 * 2;

int mat[maxn][maxn], dis[maxn][maxn], n, m, k;
PR que[maxn * maxn], pnt[maxn][maxn], ans[maxn];

void init() {
    scanf("%d%d", &n, &m);
    k = 0;
    while (m --) {
        int x, y;
        scanf("%d%d", &x, &y);
        mat[x][++ mat[x][0]] = y;
        mat[y][++ mat[y][0]] = x;
    }
}

void work() {
    memset(dis, -1, sizeof(dis));
    dis[1][n] = 0;
    int hd = 0, tl = 0;
    que[tl ++] = MP(1, n);
    while (hd < tl && dis[n][1] == -1) {
        int x = que[hd].X, y = que[hd].Y;
        ++ hd;
        for (int i = 1; i <= mat[x][0]; ++ i) {
            for (int j = 1; j <= mat[y][0]; ++ j) {
                int tx = mat[x][i], ty = mat[y][j];
                if (tx == ty) continue;
                if (dis[tx][ty] == -1) {
                    dis[tx][ty] = dis[x][y] + 1;
                    pnt[tx][ty] = MP(x, y);
                    que[tl ++] = MP(tx, ty);
                }
            }
        }
    }
    printf("%d\n", dis[n][1]);
    if (dis[n][1] != -1) {
        int h = 0, x = n, y = 1;
        while (h <= dis[n][1]) {
            ans[h ++] = MP(x, y);
            int tx = pnt[x][y].X, ty = pnt[x][y].Y;
            x = tx;
            y = ty;
        }
        for (int i = 0; i < h; ++ i) {
            if (i) printf(" ");
            printf("%d", ans[i].Y);
        }
        puts("");
        for (int i = 0; i < h; ++ i) {
            if (i) printf(" ");
            printf("%d", ans[i].X);
        }
        puts("");
    }
}

int main() {
    init();
    work();
    return 0;
}

			   				  			 		  				 	