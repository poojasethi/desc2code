#include <cstdio>
#include <vector>
#include <queue>
#include <iostream>
#define  MAXN 505
#define  fi   first.first
#define  se   first.second
#define  th   second
using namespace std;
typedef pair<int,int> ii;
typedef pair<ii,int> iii;

int N,M;
bool used[MAXN][MAXN][2];
iii dad[MAXN][MAXN][2];
queue<iii> q;
vector<int> way[MAXN],path;

int main()
{
	int i,a,b;
	bool flag=0;
	
	scanf(" %d %d",&N,&M);
	for(i=0;i<M;i++)
	{
		scanf(" %d %d",&a,&b);
		way[a].push_back(b);
		way[b].push_back(a);
	}
	
	q.push(iii(ii(1,N),0));
	used[1][N][0]=1;
	iii tmp;
	while(!q.empty())
	{
		tmp=q.front();
		q.pop();
		
		if(tmp.fi==N && tmp.se==1 && !tmp.th)
		{
			flag=1;
			break;
		}
		
		if(tmp.th)
		{
			for(i=0;i<(int)way[tmp.se].size();i++)
				if(tmp.fi!=way[tmp.se][i] && !used[tmp.fi][way[tmp.se][i]][0])
				{
					used[tmp.fi][way[tmp.se][i]][0]=1;
					q.push(iii(ii(tmp.fi,way[tmp.se][i]),0));
					dad[tmp.fi][way[tmp.se][i]][0]=tmp;
				}
		}
		else
		{
			for(i=0;i<(int)way[tmp.fi].size();i++)
				if(!used[way[tmp.fi][i]][tmp.se][1])
				{
					used[way[tmp.fi][i]][tmp.se][1]=1;
					q.push(iii(ii(way[tmp.fi][i],tmp.se),1));
					dad[way[tmp.fi][i]][tmp.se][1]=tmp;
				}
		}
	}
	
	if(!flag)
	{
		printf("-1\n");
		return 0;
	}
	
	tmp=iii(ii(N,1),0);
	while(tmp.fi!=1 || tmp.se!=N || tmp.th)
	{
		if(tmp.th)
			path.push_back(tmp.fi);
		else
			path.push_back(tmp.se);
		tmp=dad[tmp.fi][tmp.se][tmp.th];
	}
	path.push_back(N);
	path.push_back(1);
	
	printf("%d\n",(int)path.size()/2-1);
	for(i=(int)path.size()-1;i>=0;i-=2)
		printf("%d ",path[i]);
	printf("\n");
	for(i=(int)path.size()-2;i>=0;i-=2)
		printf("%d ",path[i]);
	printf("\n");
	
	return 0;
}
