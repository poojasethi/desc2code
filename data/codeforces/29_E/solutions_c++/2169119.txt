#include <stdio.h>
#include <queue>
#include <algorithm>
using namespace std;

#define fx first
#define sx second

typedef pair<int,int> ii;
typedef pair<ii,int> iii;

queue<iii> Q;
vector<int> v[501];
iii father[501][501][2];
int shortest[501][501][2];
vector<int> ans1,ans2;
main()
{
	int i,j,k;
	
	int n,m;
	
	scanf("%d%d",&n,&m);
	
	while (m--)
	{
		scanf("%d%d",&i,&j);
		v[i].push_back(j);
		v[j].push_back(i);
	}
	
	
	shortest[1][n][0]=1;
	
	for (i=1;i<=500;i++)
		shortest[i][i][0]=1000000;
	
	Q.push(iii (ii (1,n),0));
	iii ho;
	int x,y,a,b,c;
	while (!Q.empty())
	{
		ho=Q.front();
		Q.pop();
		x=ho.fx.fx;
		y=ho.fx.sx;
		if (!ho.sx)
		{
			b=y;
			c=1;
			for (i=0;i<v[x].size();i++)
			{
				a=v[x][i];
				if (!shortest[a][b][c])
				{
					shortest[a][b][c]=shortest[ho.fx.fx][ho.fx.sx][ho.sx]+1;
					Q.push(iii (ii (a,b),c));
					father[a][b][c]=ho;
				}
			}
		}
		else
		{
			a=x;
			c=0;
			for (i=0;i<v[y].size();i++)
			{
				b=v[y][i];
				if (!shortest[a][b][c])
				{
					shortest[a][b][c]=shortest[ho.fx.fx][ho.fx.sx][ho.sx]+1;
					Q.push(iii (ii (a,b),c));
					father[a][b][c]=ho;
				}
			}
		}
	}
	if (!shortest[n][1][0])
	{
		printf("-1\n");
		return 0;
	}
	else
		printf("%d\n",shortest[n][1][0]/2);
	
	ho=iii (ii (n,1),0);
	while (ho!=iii (ii (1,n),0))
	{
		ans1.push_back(ho.fx.fx);
		ans2.push_back(ho.fx.sx);
		ho=father[ho.fx.fx][ho.fx.sx][ho.sx];
		ho=father[ho.fx.fx][ho.fx.sx][ho.sx];
	}
	
	for (i=0;i<ans2.size();i++)
		printf("%d ",ans2[i]);
	printf("%d\n",n);
	for (i=0;i<ans1.size();i++)
		printf("%d ",ans1[i]);
	printf("1\n");
}
