#include <stdio.h>

#include <memory.h>
#define N 1000
int path[N][N]={0};
int map[N][N];
struct KOR{
    int x,y;
    
};
KOR R[N*N];
KOR ans[N];
KOR last[N][N];
int main(){
    int n,m;
    scanf("%d%d",&n,&m);
    for (int i=0;i<m;i++){
        int a,b;
        scanf("%d%d",&a,&b);
        path[a][0]++;
        path[a][path[a][0]]=b;
        path[b][0]++;
        path[b][path[b][0]]=a;
    }
    memset(map,-1,sizeof(map));
    map[1][n]=0;
    int r=0;
    R[0].x=1;
    R[0].y=n;
    int l=1;
    while (r<=l){
        int cx=R[r].x;
        int cy=R[r].y;
        for (int i=1;i<=path[cx][0];i++)
            for (int j=1;j<=path[cy][0];j++){
                int nx=path[cx][i];
                int ny=path[cy][j];
                if (map[nx][ny]==-1&&nx!=ny){
                    map[nx][ny]=map[cx][cy]+1;
                    R[l].x=nx;
                    R[l].y=ny;
                    l++;
                    last[nx][ny].x=cx;
                    last[nx][ny].y=cy;
                    
                }
            }
        r++;
            
    }
    printf("%d\n",map[n][1]);
    if (map[n][1]!=-1){
        int p=1;
        KOR k;
        k.x=n;
        k.y=1;
        ans[0]=k;
        for (int i=0;i<map[n][1];i++){
            k=last[k.x][k.y];
            ans[p]=k;
            p++;
        }
        for (int i=p-1;i>=0;i--)
            printf("%d ",ans[i].x);
        printf("\n");
        for (int i=p-1;i>=0;i--)
            printf("%d ",ans[i].y);
        
    }
    return 0;
}