#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

class State {
public:
	int x, y;
	bool op;

	State() {}

	State(int x, int y, bool op) : x(x), y(y), op(op) {}
};

const int MAXN = 550 + 1;
const int MAXM = 600060 + 1;

int n, m, closed, path[MAXN][MAXN][2];
vector <int> edge[MAXN], out1, out2;
State bfs[MAXM];
bool tag[MAXN][MAXN][2];

inline bool push(int x, int y, bool op) {
	if (tag[x][y][op]) return false;
	tag[x][y][op] = true;
	bfs[closed++] = State(x, y, op);
	return true;
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		edge[x].push_back(y);
		edge[y].push_back(x);
	}
	push(1, n, false);
	path[1][n][0] = -1;
	for (int o = 0; o < closed; o++) {
		State state = bfs[o];
		int x = state.x, y = state.y, op = state.op;
		if (op) {
			for (int ii = 0; ii < (int)edge[y].size(); ii++) {
				int i = edge[y][ii];
				if (i == x) continue;
				if (push(x, i, !op)) path[x][i][!op] = y;
			}
		} else {
			for (int ii = 0; ii < (int)edge[x].size(); ii++) {
				int i = edge[x][ii];
				if (push(i, y, !op)) path[i][y][!op] = x;
			}
		}
	}
	if (tag[n][1][0]) {
		int x = n, y = 1;
		bool op = false;
		while (true) {
			out1.push_back(x);
			out2.push_back(y);
			y = path[x][y][op];
			op = !op;
			if (y == -1) break;
			x = path[x][y][op];
			op = !op;
		}
		printf("%d\n", (int)out1.size() - 1);
		for (int i = 0; i < (int)out2.size(); i++) printf("%d%c", out2[i], i == (int)out2.size() - 1 ? '\n' : ' ');
		for (int i = 0; i < (int)out1.size(); i++) printf("%d%c", out1[i], i == (int)out1.size() - 1 ? '\n' : ' ');
	} else puts("-1");
	return 0;
}
