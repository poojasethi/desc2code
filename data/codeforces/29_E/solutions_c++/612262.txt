#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int main()
{
  int n,m;
  cin>>n>>m;
  vector<vector<int> > g(n);
  for (int i=0;i<m;i++) {
    int u,v;
    cin>>u>>v;u--;v--;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  vector<vector<int> > visitat(n,vector<int> (n,0));
  vector<vector<int> > ant0(n,vector<int> (n,-1));
  vector<vector<int> > ant1(n,vector<int> (n,-1));
  ant0[0][n-1]=-2;
  ant1[0][n-1]=-2;
  queue<pair<int,int> > q;
  q.push(pair<int,int> (0,n-1));
  while ((not q.empty()) and ant0[n-1][0]==-1) {
    pair<int,int> p=q.front();
    q.pop();
    int u=p.first;
    int v=p.second;
    vector<int> &aru=g[u];
    for (int i=0;i<int(aru.size());i++) {
      int nextu=aru[i];
      if (visitat[nextu][v]==0) {
	visitat[nextu][v]=1;
	vector<int> &arv=g[v];
	for (int j=0;j<int(arv.size());j++) {
	  int nextv=arv[j];
	  if (nextu!=nextv and ant0[nextu][nextv]==-1) {
	    ant0[nextu][nextv]=u;
	    ant1[nextu][nextv]=v;
	    q.push(pair<int,int> (nextu,nextv));
	  }
	}
      }
    }
  }
  if (ant0[n-1][0]==-1) {
    cout<<-1<<endl;
  } else {
    vector<pair<int,int> > sol;
    int u=n-1;
    int v=0;
    while (u!=-2) {
      sol.push_back(pair<int,int> (u,v));
      int nextu=ant0[u][v];
      int nextv=ant1[u][v];
      u=nextu;
      v=nextv;
    }
    reverse(sol.begin(),sol.end());
    cout<<int(sol.size())-1<<endl;
    for (int i=0;i<int(sol.size());i++) {
      if (i>0) cout<<" ";
      cout<<sol[i].first+1;
    }
    cout<<endl;
    for (int i=0;i<int(sol.size());i++) {
      if (i>0) cout<<" ";
      cout<<sol[i].second+1;
    }
    cout<<endl;
  }
}
