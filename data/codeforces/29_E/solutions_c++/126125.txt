#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vector>
#include <queue>
#include <algorithm>
#include <numeric>
using namespace std;

#define CLR(a,v) memset(a, v, sizeof(a))

#define NN 512

int  N, E;
int  adj[NN][NN], deg[NN];
int  dist[1<<18];
int  prev[1<<18];
int  Q[1<<18], Qs, Qe;

#define code(x, y)  (((x)<<9) | (y))

bool bfs() {
	CLR(prev, -1);
	Qs = Qe = 0;
	Q[Qe++] = code(1, N);
	dist[code(1, N)] = 0;
	prev[code(1, N)] = -2;
	while(Qs != Qe) {
		int  c = Q[Qs++];
		int  x = c >> 9;
		int  y = c & 511;
		for(int ix=0; ix<deg[x]; ++ix)
			for(int iy=0; iy<deg[y]; ++iy) {
			
			int  nx = adj[x][ix];
			int  ny = adj[y][iy];
			int  nc = code(nx, ny);

			if(prev[nc]!=-1 || nx==ny) continue;

			prev[nc] = c;
			dist[nc] = dist[c] + 1;

			if(nx==N && ny==1) return true;

			Q[Qe++] = nc;

		}
	}
	return false;
}

int main(int argc, char *argv[])
{
	
	CLR(deg, 0);
	scanf("%d%d", &N, &E);
	for(int i=0; i<E; ++i) {
		int  u, v;
		scanf("%d%d", &u, &v);
		adj[u][deg[u]++] = v;
		adj[v][deg[v]++] = u;
	}

	if(!bfs()) {
		printf("-1\n");
		return 0;
	}

	printf("%d\n", dist[code(N, 1)]);

	Qe = 0;

	int  c = code(N, 1);

	while(c >= 0) {
		Q[Qe++] = c;
		c = prev[c];
	}

	printf("%d", Q[Qe-1] >> 9);
	for(int i=Qe-2; i>=0; --i)
		printf(" %d", Q[i] >> 9);
	printf("\n%d", Q[Qe-1] & 511);
	for(int i=Qe-2; i>=0; --i)
		printf(" %d", Q[i] & 511);
	putchar('\n');
	return 0;
}
