#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

const int maxn	=	505;

int n,m;
vector<int> adj[maxn];
pair<pair<int,int>,int> pre[maxn][maxn][2];
int dist[maxn][maxn][2];

int main()
{
	scanf("%d%d",&n,&m);
	for (int i=0;i<m;++i){
		int a,b;
		scanf("%d%d",&a,&b);
		--a;--b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	queue< pair<pair<int,int>,int> > q;
	memset(dist,-1,sizeof(dist));
	q.push(make_pair(make_pair(0,n-1),0));
	dist[0][n-1][0]=0;
	while (q.size() && dist[n-1][0][0]==-1){
		int u=q.front().first.first;
		int v=q.front().first.second;
		int s=q.front().second;
		q.pop();
		
		if (s==0){
			for (int i=0;i<adj[u].size();++i){
				int x=adj[u][i],y=v,ns=1;
				if (dist[x][y][ns]==-1){
					dist[x][y][ns]=dist[u][v][s];
					pre[x][y][ns]=make_pair(make_pair(u,v),s);
					q.push(make_pair(make_pair(x,y),ns));
				}
			}
		}else{
			for (int i=0;i<adj[v].size();++i){
				int x=u,y=adj[v][i],ns=0;
				if (x!=y && dist[x][y][ns]==-1){
					dist[x][y][ns]=dist[u][v][s]+1;
					pre[x][y][ns]=make_pair(make_pair(u,v),s);
					q.push(make_pair(make_pair(x,y),ns));
				}
			}
		}
	}
//printf("%d\n",dist[2][6]);
	
	printf("%d\n",dist[n-1][0][0]);
	if (dist[n-1][0][0]!=-1){
		vector< int > pa,pb;
		int u=n-1,v=0,s=0;
		pa.push_back(u);
		pb.push_back(v);
		while (!(u==0 && v==n-1 && s==0)){
			pair<pair<int,int>,int> tmp=pre[u][v][s];
			if (s==0){
				pb.push_back(tmp.first.second);
			}else{
				pa.push_back(tmp.first.first);
			}
			u=tmp.first.first;
			v=tmp.first.second;
			s=tmp.second;
		}
		for (int i=pa.size()-1;i>=0;i--){
			printf("%d ",pa[i]+1);
		}
		puts("");
		for (int i=pb.size()-1;i>=0;i--){
			printf("%d ",pb[i]+1);
		}
		puts("");
	}
	
	return 0;
}

 		        	 		 		  			  	