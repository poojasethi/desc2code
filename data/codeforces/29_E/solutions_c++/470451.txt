#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int MAXN = 510;
const int MAXM = 100010;

struct Node
{
  Node(){}
  Node(int xx, int yy, int fll):x(xx),y(yy),fl(fll){}
  int x, y, fl;
};

int head[MAXN], next[MAXM], node[MAXM], tt;
Node que[MAXN*MAXN*10];
int vis[MAXN][MAXN][2];
int pre[MAXN][MAXN][2];
int n, m;

int path[2][MAXN], plen[2];

void add(int x, int y)
{
  node[++tt] = y; next[tt] = head[x]; head[x] = tt;
}

void init()
{
  memset(head, 0, sizeof(head)); tt = 0;

  scanf("%d%d", &n, &m);
  for (int x, y, i = 0; i < m; ++i) {
    scanf("%d%d", &x, &y);
    add(x, y); add(y, x);
  }
}

void solve()
{
  memset(vis, 0, sizeof(vis));

  int st = 0, ed = 1;
  que[0] = Node(1, n, 0);
  vis[1][n][0] = 1;
  pre[1][n][0] = -1;

  for (int x, y, fl; st < ed; ++st) {
    x = que[st].x;
    y = que[st].y;
    fl = que[st].fl;
    if (!fl) {
      for (int i = head[x]; i; i = next[i]) {
	if (!vis[node[i]][y][1]) {
	  vis[node[i]][y][1] = vis[x][y][0] + 1;
	  pre[node[i]][y][1] = x;
	  que[ed++] = Node(node[i], y, 1);
	}
      }
    } else {
      for (int i = head[y]; i; i = next[i]) 
	if (x != node[i] && !vis[x][node[i]][0]) {
	  vis[x][node[i]][0] = vis[x][y][1] + 1;
	  pre[x][node[i]][0] = y;
	  que[ed++] = Node(x, node[i], 0);
	}
    }
  }

  if (!vis[n][1][0]) {    puts("-1"); return; }

  plen[0] = plen[1] = 0;

  printf("%d\n", (vis[n][1][0]-1)/2);
  for (int fl = 0, x = n, y = 1; y != -1; fl ^= 1) {
    if (fl) {
      path[0][plen[0]++] = x;
      x = pre[x][y][1];
    } else {
      path[1][plen[1]++] = y;
      y = pre[x][y][0];
    }
  }
  path[0][plen[0]++] = 1;

  for (int l = 0; l < 2; ++l)
    for (int i = plen[l]-1; i >= 0; --i) printf("%d%c", path[l][i], i ? ' ' : '\n');
}

int main()
{
  init();
  solve();
  return 0;
}

