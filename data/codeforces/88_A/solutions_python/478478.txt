#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import sys
import itertools as it
input = sys.stdin
output = sys.stdout

Notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'B', 'H']

STRANGE = 0
MAJOR = 1
MINOR = 2
TYPES = ['strange','major','minor']

def distance(n1,n2):
    d = n2 - n1
    if n1<n2:
        return d
    else:
        return 12+d

def classify(trinote):
    X = trinote[0]
    Y = trinote[1]
    Z = trinote[2]
    dXY = distance(X,Y)
    dYZ = distance(Y,Z)
    if dXY == 4 and dYZ == 3:
        return MAJOR
    if dXY == 3 and dYZ == 4:
        return MINOR
    return STRANGE

def solve(accord):
    for trinote in it.permutations(accord):
        at = classify(trinote)
        if at != STRANGE:
            return TYPES[at]
    return TYPES[STRANGE]

#print distance(Notes.index('E'), Notes.index('C'))

Ns = input.readline().split(' ')
assert len(Ns) == 3

Ns = [n.strip() for n in Ns]

accord = [Notes.index(n) for n in Ns]

#print Ns
#print [t for t in enumerate(Notes)]
#print accord

s = solve(accord)
output.write(s)

output.write('\n')
