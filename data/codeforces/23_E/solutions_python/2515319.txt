n=int(raw_input())
edge={}
f={}
g={}
size={}
for a in range(1,n+1):
	f[a]=0
	edge[a]=[]
	g[a]={}
	for b in range(0,n+2):
		g[a][b]=0
for a in range(1,n):
	z=raw_input().split(' ')
	s=int(z[0])
	e=int(z[1])
	edge[s].append(e)
	edge[e].append(s)

def cmp((a,b),(c,d)):
	if a*d>b*c:
		return 1
	else:
		if a*d==b*c:
			return 0
		else:
			return -1

def dfs(now,fa):
	g[now][1]=1
	sonv=[]
	size[now]=1
	for e in edge[now]:
		if e!=fa:
			dfs(e,now)
			size[now]+=size[e]
			g[now][1]*=f[e]
			sonv.append((f[e],g[e][1]))
	sonv.sort(cmp)
	v=g[now][1]
	nowsize=1
	for v1,v2 in sonv:
		nowsize+=1
		v=v*v2/v1
		g[now][nowsize]=max(g[now][nowsize],v)
	f[now]=g[now][1]
	for a in range(2,size[now]+1):
		for e in edge[now]:
			if e!=fa:
				g[now][a]=max(g[now][a],g[e][a-1]*g[now][1]/f[e])
		f[now]=max(f[now],g[now][a]*a)
dfs(1,0)
print f[1]
