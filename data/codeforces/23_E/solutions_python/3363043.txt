import fractions

def solve(node, parent=0):
	global T, children_product, solution
	
	T[node].remove(parent)
	
	son_product[node] = 1
	for son in T[node]:
		son_product[node] *= solve(son, node)
	
	solution[node] = son_product[node]
	T[node].sort(key=lambda x: fractions.Fraction(son_product[x], solution[x]), reverse=True)
	
	product = 1
	for s, son in enumerate(T[node]):
		product *= fractions.Fraction(son_product[son], solution[son]) 
		solution[node] = max((s + 2) * product * son_product[node], solution[node])
		
	for son in T[node]:
		product = 1
		constant = son_product[node] / solution[son] * son_product[son]
		for s, grandson in enumerate(T[son]):
			product *= fractions.Fraction(son_product[grandson], solution[grandson])
			solution[node] = max((s + 3) * product * constant, solution[node])
		
	return solution[node]


n = input()

T = [list()  for i in xrange(n + 1)]
son_product = [0] * (n + 1)
solution = [0] * (n + 1)

for i in xrange(n - 1):
	u, v = map(int, raw_input().split())
	T[u] += [v]
	T[v] += [u]

T[1] += [0]
print solve(1)
