#include<stdio.h>
#include<string.h>
#include<vector>
using namespace std;
struct bigint
{
	int len;
	int num[40];
};
bigint init(int x)
{
	bigint c;
	memset(c.num,0,sizeof(c.num));
	c.len=1;c.num[1]=x;
	return c;
}
void print(const bigint a)
{
	printf("%d",a.num[a.len]);
	for (int i=a.len-1;i>=1;i--)
	  printf("%04d",a.num[i]);
	printf("\n");
}
bigint operator * (const bigint a,const bigint b)
{
	bigint c;
	memset(c.num,0,sizeof(c.num));
	for (int i=1;i<=a.len;i++)
	for (int j=1;j<=b.len;j++)
	c.num[i+j-1]+=a.num[i]*b.num[j];
	for (int i=1;i<=a.len+b.len;i++)
	{
		c.num[i+1]+=c.num[i]/10000;
		c.num[i]%=10000;
	}
	if (c.num[a.len+b.len]) c.len=a.len+b.len;
	else c.len=a.len+b.len-1;
	return c;
}
bool operator < (const bigint a,const bigint b)
{
	if (a.len!=b.len) return a.len<b.len;
	for (int i=a.len;i>=1;i--)
	if (a.num[i]!=b.num[i]) return a.num[i]<b.num[i];
}
inline bigint max(bigint a,bigint b)
{
	if (a<b) return b;else return a;
}
const int maxn=700+10;
vector<int>pic[maxn];
bigint f[maxn][maxn];
int s[maxn];
void solve(int x,int fa)
{
	f[x][1]=init(1);
	s[x]=1;
	for (int i=0;i<pic[x].size();i++)
	{
		int y=pic[x][i];
		if (y==fa) continue;
		solve(y,x);
		for (int i=s[x];i>=1;i--)
		for (int j=s[y];j>=0;j--)
		f[x][i+j]=max(f[x][i+j],f[x][i]*f[y][j]);
		s[x]+=s[y];
	}
	f[x][0]=init(s[x]);
	for (int i=1;i<=s[x];i++)
	f[x][0]=max(f[x][0],f[x][i]*init(i));
}
int main()
{
	int n;
	scanf("%d",&n);
	for (int i=1;i<=n-1;i++)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		pic[x].push_back(y);
		pic[y].push_back(x);
	}
	solve(1,0);
	print(f[1][0]);
	return 0;
}
	 	  	    		 	   			  		 	   		