#include <cstdio>
#include <cstring>
#include <algorithm>
#define K 10000
#define L 4
using namespace std;

struct num
{
	int a[35];
	num(int x=0)
	{
		memset(a,0,sizeof(a));
		if (!x) a[0]=1; else for (;x; x/=K) a[++a[0]]=x%K;
	}
	friend bool operator <(const num&A,const num&B)
	{
		if (A[0]<B[0]) return 1;
		if (A[0]>B[0]) return 0;
		int i=A[0];
		for (;A[i]==B[i]&&i>1; i--);
		return A[i]<B[i];
	}
	friend num operator *(const num&A,const num&B)
	{
		num C;
		C[0]=A[0]+B[0]+1;
		for (int i=1; i<=A[0]; i++)
			for (int j=1; j<=B[0]; j++)
			{
				C[i+j-1]+=A[i]*B[j];
				C[i+j]+=C[i+j-1]/K;
				C[i+j-1]%=K;
			}
		for (;C[0]>1&&!C[C[0]]; C[0]--);
		return C;
	}
	int&operator [](int x) {return a[x];}
	const int&operator [](int x) const {return a[x];}
	void print() const
	{
		printf("%d",a[a[0]]);
		for (int i=a[0]-1; i; i--) printf("%0*d",L,a[i]);
		printf("\n");
	}
} f[705][705];
int N,head[705],lk[1405],next[1405],s[705];

void add(int u,int v,int t) {lk[t]=v,next[t]=head[u],head[u]=t;}

void dfs(int u,int fa)
{
	s[u]=1,f[u][1]=1;int SS=0;
	for (int i=head[u],v; v=lk[i],i; i=next[i]) if (v!=fa)
	{
		dfs(v,u);
		for (int j=s[u]; j>=0; j--)
			for (int k=s[v]; k>=0; k--) f[u][j+k]=max(f[u][j+k],f[u][j]*f[v][k]);
		s[u]+=s[v];
	}
	for (int j=s[u]; j; j--) f[u][0]=max(f[u][0],f[u][j]*j);
}

void doit()
{
	scanf("%d",&N);
	for (int i=1,u,v; i<N; i++) scanf("%d%d",&u,&v),add(u,v,i),add(v,u,i+N-1);
	dfs(1,0),f[1][0].print();
}

int main()
{
	doit();
	return 0;
}