#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
const int maxN=705,maxLen=15;
#define pow10_8 100000000
int outbuf[9];
struct BigInt
{
	int len,v[maxLen+1];
	BigInt(){len=0;memset(v,0,sizeof(v));}
	BigInt(int a)
	{
		len=1;
		memset(v,0,sizeof(v));
		v[1]=a;
	}
	void print()
	{
		cout<<v[len];
		for (int i=len-1;i>=1;i--)
		{
			int x=v[i];
			for (int j=0;j<8;j++)
			{
				outbuf[j]=x%10;
				x/=10;
			}
			for (int j=7;j>=0;j--)
				cout<<outbuf[j];
		}
		cout<<endl;
	}
};
BigInt operator*(const BigInt& a,const BigInt& b)
{
	BigInt c;
	int x=0,j,i;
	long long now;
	for (i=1;i<=a.len;i++)
	{
		x=0;
		for (j=1;j<=b.len;j++)
		{
			now=((long long)a.v[i])*b.v[j]+c.v[i+j-1]+x;
			x=now/pow10_8;
			c.v[i+j-1]=now%pow10_8;
		}
		c.v[i+b.len]=x;
	}
	c.len=a.len+b.len-1;
	if (c.v[c.len+1]!=0)
		c.len++;
	return c;
}
bool operator<(const BigInt& a,const BigInt& b)
{
	if  (a.len!=b.len)
		return a.len<b.len;
	for (int i=a.len;i>=1;i--)
		if (a.v[i]!=b.v[i])
			return a.v[i]<b.v[i];
	return false;
}
struct edge
{
	int y,n;
};
int n,i,No1[maxN],son[maxN];
edge t[maxN*2];
BigInt f[maxN][maxN];
void input()
{
	cin>>n;
	int x,y,e=0;
	for (int i=1;i<n;i++)
	{
		cin>>x>>y;
		t[++e].y=y; t[e].n=No1[x]; No1[x]=e;
		t[++e].y=x; t[e].n=No1[y]; No1[y]=e;
	}
}
void dfs(int x)
{
	int e=No1[x];
	f[x][1].len=1;f[x][1].v[1]=1;
	son[x]=1;
	while (e!=0)
	{
		if (t[e].y!=0)
		{
			if (e%2==0)
				t[e-1].y=0;
			else
				t[e+1].y=0;
			dfs(t[e].y);
			son[x]+=son[t[e].y];
			for (i=son[x];i>=2;i--)
			{
				f[x][i]=f[x][i]*f[t[e].y][0];
				f[x][i]=max(f[x][i],f[x][1]*f[t[e].y][i-1]);
				f[x][i]=max(f[x][i],f[x][i-1]*f[t[e].y][1]);
			}
			f[x][1]=f[x][1]*f[t[e].y][0];
		}
		e=t[e].n;
	}
	for (i=1;i<=son[x];i++)
		f[x][0]=max(f[x][0],f[x][i]*BigInt(i));
}

int main()
{
	
	input();
	dfs(1);
	f[1][0].print();
}
