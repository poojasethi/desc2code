#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define M 10000
#define N 705
#define M2 2005
#define T 35
int pre[M2];
int other[M2];
int last[M2];
int s[M2];
int tot,n;
struct huge
{
	int num[T],len;
	huge(){};
	huge(int x)
	{
		memset(num,0,sizeof(num));
		len=1;num[0]=x;
	}
	inline void init(int x) {len=1,num[0]=x;}
	bool operator <(const huge &x) 
	{
		if(len<x.len) return 1;
		else if(len>x.len) return 0;
		for(int i=len-1;i>=0;i--)
		{
			if(num[i]<x.num[i]) return 1;
			else if(num[i]>x.num[i]) return 0;
		}
		return 0;
	}
	huge operator *(const huge &x)
	{
		huge t(0);
		t.len=x.len+len-1;
		for(int i=0;i<len;i++) for(int j=0;j<x.len;j++) t.num[i+j]+=num[i]*x.num[j];
		for(int i=0;i<t.len;i++)
		{
			t.num[i+1]+=t.num[i]/M;
			t.num[i]%=M;
		}
		if(t.num[t.len]) t.len++;
		return t;
	}
	/*huge operator +(const huge &x)
	{
		huge t(0);
		t.len=max(x.len,len);
		for(int i=0;i<t.len;i++)
		{
			t.num[i]=t.num[i]+x.num[i]+num[i];
			t.num[i+1]+=t.num[i]/M;
			t.num[i]%=M;
		}
		if(t.num[t.len]) t.len++;
		return t;
	}*/
}dp[N][N];
inline void add(int p,int q)
{
	pre[++tot]=last[p];
	last[p]=tot;
	other[tot]=q;
}
inline void print(huge x)
{
	printf("%d",x.num[x.len-1]);
	for(int i=x.len-2;i>=0;i--) printf("%04d",x.num[i]);
	puts("");
	return;
}
void dfs(int i,int f)
{
	s[i]=1;dp[i][1].init(1);dp[i][0].init(0);
	for(int j=last[i];j;j=pre[j])
	{
		int k=other[j];
		if(k==f) continue;
		dfs(k,i);
		for(int p=s[i];p>=0;p--) for(int q=s[k];q>=0;q--)
		{
			huge t=dp[i][p]*dp[k][q];
			if(dp[i][p+q]<t) dp[i][p+q]=t;
		}
		s[i]+=s[k];
	}
	for(int p=1;p<=s[i];p++)
	{
		huge t(p);
		t=t*dp[i][p];
		if(dp[i][0]<t) dp[i][0]=t;
	}
	return;
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<n;i++) {
		int a, b;
		scanf("%d%d",&a,&b);
		add(a,b);add(b,a);
	}
	dfs(1,0);
	print(dp[1][0]);
	return 0;
}
