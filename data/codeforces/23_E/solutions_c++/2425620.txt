#include<cstdio>
#include<cstring>
#include<vector>
#define pb push_back
#define fo(i,a,b) for(i=a;i<=b;++i)
#define fd(i,a,b) for(i=a;i>=b;--i)
using namespace std;
const int mn=710,ml=60,mo=1000;
struct number{int l,a[ml];}f[mn][mn],g[mn],ans,T;
vector<int>e[mn];
int n,s[mn];
number num(int v)
{
    number res;
    memset(&res,0,sizeof res);
    while(v)res.a[++res.l]=v%mo,v/=mo;
    return res;
}
bool operator >(const number a,const number b)
{
    if(a.l>b.l)return 1;
    if(a.l<b.l)return 0;
    int i;
    fd(i,a.l,1)
    {
        if(a.a[i]>b.a[i])return 1;
        if(a.a[i]<b.a[i])return 0;
    }
    return 0;
}
number operator *(const number a,const number b)
{
    number res;
    memset(&res,0,sizeof res);
    res.l=a.l+b.l-1;
    int i,j,k,g=0;
    fo(i,1,res.l)
    {
        res.a[i]=res.a[i]+g;
        g=res.a[i]/mo,res.a[i]=res.a[i]%mo;
        fo(j,1,a.l)
        {
            k=i+1-j;
            if(k<=0)break;
            if(k>b.l)continue;
            res.a[i]+=a.a[j]*b.a[k],g+=res.a[i]/mo;
            res.a[i]%=mo;
        }
    }
    while(g)res.a[++res.l]=g%mo,g/=mo;
    return res;
}
void dp(int r,int fa)
{
    int p,i,k,k1;
    f[r][1]=num(1);
    s[r]=1;
    for(p=0;p<e[r].size();++p)
    {
        i=e[r][p];
        if(i==fa)continue;
        memset(g,0,sizeof g);
        dp(i,r);
        fo(k,1,s[r])
            fo(k1,1,s[i])
            {
                T=f[i][k1]*f[r][k];
                if(T>g[k+k1])g[k+k1]=T;
                T=f[i][k1]*num(k1)*f[r][k];
                if(T>g[k])g[k]=T;
            }
        memcpy(f[r],g,sizeof g);
        s[r]+=s[i];
    }
}
int main()
{
    scanf("%d",&n);
    int i,j,k;
    fo(i,1,n-1)
    {
        scanf("%d%d",&j,&k);
        e[j].pb(k),e[k].pb(j);
    }
    dp(1,0);
    fo(i,1,n)
    {
        T=f[1][i]*num(i);
        if(T>ans)ans=T;
    }
    printf("%d",ans.a[ans.l]);
    fd(i,ans.l-1,1)printf("%.3d",ans.a[i]);
    printf("\n");
    return 0;
}
