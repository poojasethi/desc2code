#include <algorithm>
#include <cstdlib>
#include <cstdio>
const int bit=10000;
int to[1500],ne[1500],fi[800],num[800],i,n,x,y,tot;
struct P{int len,a[30];}f[702][702];
P chp(int x)
{
	P a;
	for (int i=0;i<30;++i) a.a[i]=0;
	a.len=1;a.a[0]=x;
	return a;
}
bool operator <(P a,P b)
{
	if (a.len<b.len) return 1;
	if (a.len>b.len) return 0;
	for (int i=a.len-1;i>=0;--i)
	{
		if (a.a[i]<b.a[i]) return 1;
		if (a.a[i]>b.a[i]) return 0;
	}
	return 0;
}
P operator +(P a,P b)
{
	P c;int i;c.len=std::max(a.len,b.len);
	for (i=0;i<30;++i) c.a[i]=0;
	for (i=0;i<c.len;++i)
	{
		c.a[i]=a.a[i]+b.a[i];
		if (c.a[i]>=bit) c.a[i]-=bit,++c.a[i+1];
	}
	if (c.a[c.len]) ++c.len;
	return c;
}
P operator *(P a,P b)
{
	P c;int i,j;c.len=a.len+b.len;
	for (i=0;i<30;++i) c.a[i]=0;
	for (i=0;i<a.len;++i)
		for (j=0;j<b.len;++j) c.a[i+j]+=a.a[i]*b.a[j];
	for (i=0;i<c.len;++i)
	if (c.a[i]>=bit)
	{
		c.a[i+1]+=c.a[i]/bit;c.a[i]%=bit;
	}
	for (;c.len && !c.a[c.len-1];--c.len);
	return c;
}
void add(int x,int y)
{
	to[++tot]=y;ne[tot]=fi[x];fi[x]=tot;
}
void dfs(int x)
{
	num[x]=1;f[x][1]=chp(1);
	for (int i=fi[x],j,k;i;i=ne[i])
	if (!num[to[i]])
	{
		dfs(to[i]);
		for (j=num[x];j>=0;--j)
			for (k=num[to[i]];k>=0;--k)
			f[x][j+k]=std::max(f[x][j+k],f[x][j]*f[to[i]][k]);
		num[x]+=num[to[i]];
	}
	for (int i=1;i<=num[x];++i) f[x][0]=std::max(f[x][0],f[x][i]*chp(i));
}
void Printf(P a)
{
	printf("%d",a.a[a.len-1]);
	for (int i=a.len-2;i>=0;--i) printf("%.4d",a.a[i]);
}
int main()
{
	scanf("%d\n",&n);
	for (i=1;i<n;++i)
	{
		scanf("%d%d\n",&x,&y);
		add(x,y);add(y,x);
	}
	dfs(1);
	Printf(f[1][0]);
}