#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#define max(a,b) (a>b?a:b)
const int maxn=705,maxl=45,P=10000,maxm=maxn<<2;
using namespace std;
int n,pre[maxm],now[maxn],son[maxm],size[maxn],tot;
struct bign{
    int v[maxl],len;
    bign(){memset(v,0,sizeof(v)),len=1;}
    bign(int x){memset(v,0,sizeof(v)),v[0]=x,len=1;}
    void del0(){while (len>1&&!v[len-1]) len--;}    
    bign operator *(const bign &b){
        bign c;
        c.len=len+b.len;
        for (int i=0;i<len;i++)
            for (int j=0;j<b.len;j++){
                c.v[i+j]+=v[i]*b.v[j];
                if (c.v[i+j]>=P) c.v[i+j+1]+=c.v[i+j]/P,c.v[i+j]%=P;
            }
        c.del0();return c;
    }
    bool operator >(const bign &b){
        if (len!=b.len) return len>b.len;
        for (int i=len-1;i>=0;i--)
            if (v[i]!=b.v[i]) return v[i]>b.v[i];
        return 0;
    }
    void write(){
        printf("%d",v[len-1]);
        for (int i=len-2;i>=0;i--) printf("%0*d",4,v[i]);puts("");
    }
}f[maxn][maxn];

void add(int a,int b){pre[++tot]=now[a],now[a]=tot,son[tot]=b;}

void dfs(int x,int fa){
    size[x]=1,f[x][1]=1;
    for (int y=now[x];y;y=pre[y])if (son[y]!=fa){
        dfs(son[y],x);
        for (int i=size[x];i;i--)
            for (int j=size[son[y]];j>=0;j--)
                f[x][i+j]=max(f[x][i+j],f[x][i]*f[son[y]][j]);
        size[x]+=size[son[y]];
    }
    f[x][0]=bign(size[x]);
    for (int i=1;i<=size[x];i++) f[x][0]=max(f[x][0],f[x][i]*i);
}

int main(){
    scanf("%d",&n);
    for (int i=1,a,b;i<n;i++) scanf("%d%d",&a,&b),add(a,b),add(b,a);
    add(n+1,1),dfs(n+1,0),f[1][0].write();
    return 0;
}
