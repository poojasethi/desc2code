#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int mod=10000;
const int st=80;
const int maxn=710;
const int maxm=2010;
int pre[maxm],last[maxm],other[maxm],s[maxm];
int tot,n;
struct bigint{
	int a[st],n;
	bigint(){
	};
	bigint(int x)
	{
		memset(a,0,sizeof(a));
		n=1,a[0]=x;
	}
	void init(int x)
	{
		n=1,a[0]=x;
	}
	bool operator<(const bigint &x)
	{
		if(n<x.n)	return 1;
		else	if(n>x.n)	return 0;
		for(int i=n-1;i>=0;i--)
			if(a[i]<x.a[i])	return 1;
			else	if(a[i]>x.a[i])	return 0;
		return 0;
	}
	bigint operator * (const bigint &x)
	{
		bigint t(0);t.n=x.n+n-1;
		for(int i=0;i<n;i++)
			for(int j=0;j<x.n;j++)
				t.a[i+j]+=a[i]*x.a[j];
		for(int i=0;i<t.n;i++)
		{
			t.a[i+1]+=t.a[i]/mod;
			t.a[i]%=mod;
		}	
		if(t.a[t.n])	t.n++;
		return t;
	}
	bigint operator + (const bigint x)
	{
		bigint t(0);t.n=max(x.n,n);
		for(int i=0;i<t.n;i++)
		{
			t.a[i]=t.a[i]+x.a[i]+a[i];
			t.a[i+1]+=t.a[i]/mod;
			t.a[i]%=mod;
		}
		if(t.a[t.n])	++t.n;
		return t;
	}
	void print(){
		printf("%d",a[n-1]);
		for(int i=n-2;i>=0;i--)
			printf("%04d",a[i]);
		puts(" ");
	}
}dp[maxn][maxn];
void add(int p,int q)
{
	pre[++tot]=last[p];
	last[p]=tot;
	other[tot]=q;
}
void dfs(int i,int f)
{
	s[i]=1,dp[i][1].init(1),dp[i][0].init(0);
	for(int j=last[i];j;j=pre[j])
	{
		int k=other[j];
		if(k==f)	continue;
		dfs(k,i);
		for(int p=s[i];p>=0;p--)
		{
			for(int q=s[k];q>=0;q--)
			{
				bigint c=dp[i][p]*dp[k][q];
				if(dp[i][p+q]<c)	dp[i][p+q]=c;
			}
		}
		s[i]+=s[k];
	}
	for(int p=1;p<=s[i];p++)
	{
		bigint c(p);
		c=c*dp[i][p];
		if(dp[i][0]<c)	dp[i][0]=c;
	}
}
int main()
{
	int i,j,u,v;
	scanf("%d",&n);
	for(i=1;i<n;i++)
	{
		scanf("%d%d",&u,&v);
		add(u,v);add(v,u);
	}
	dfs(1,0);
	dp[1][0].print();
	return 0;
}
  		 		   	  			   			   		   	