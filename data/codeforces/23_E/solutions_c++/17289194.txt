#include <bits/stdc++.h>
using namespace std;

struct bigint {
	int l, num[30];

	bigint(int n = 0) {
		memset(num, 0, sizeof num);
		l = 1;
		num[1] = n;
	}

	bigint operator * (const bigint &b) {
		bigint c;
		for (int i = 1; i <= l; i ++) {
			for (int j = 1; j <= b.l; j ++) {
				c.num[i+j-1] += num[i] * b.num[j];
			}
		}
		c.l = l + b.l;
		for (int i = 1; i < c.l; i ++) {
			c.num[i+1] += c.num[i] / 10000;
			c.num[i] %= 10000;
		}
		if (!c.num[c.l]) c.l --;
		return c;
	}

	bool operator < (const bigint &b) {
		if (l < b.l) return 1;
		else if (l > b.l) return 0;
		for (int i = l; i >= 1; i --) {
			if (num[i] < b.num[i]) return 1;
			else if (num[i] > b.num[i]) return 0;
		}
		return 0;
	}

	void operator = (const bigint &b) {
		l = b.l;
		for (int i = 1; i <= l; i ++) num[i] = b.num[i];
	}

	void print() {
		printf("%d", num[l]);
		for (int i = l - 1; i; i --) printf("%04d", num[i]);
		puts("");
	}
};

bigint max(bigint a, bigint b) {return a < b ? b : a;}

#define N 707

bigint f[N][N], F[N], g[N][N];
vector <int> v[N];
int son[N], n, a, b;
bool vis[N];

void dfs(int x) {
	vis[x] = 1;
	int pnt = 1;
	f[x][1] = bigint(1);
	g[x][1] = bigint(1);
	for (int i = 0; i < v[x].size(); i ++) {
		int y = v[x][i];
		if (vis[y]) continue;
		dfs(y);
		for (int j = 1; j <= pnt; j ++) f[x][j] = g[x][j] * F[y];
		for (int j = 1; j <= pnt; j ++) {
			for (int k = 1; k <= son[y]; k ++) {
				f[x][j+k] = max(f[x][j+k], g[x][j] * f[y][k]);
			}
		}
		pnt += son[y];
		for (int j = 1; j <= pnt; j ++) g[x][j] = f[x][j];
	}
	for (int j = 1; j <= pnt; j ++) F[x] = max(F[x], f[x][j] * bigint(j));
	son[x] = pnt;
}

int main() {
	scanf("%d", &n);
	for (int i = 1; i < n; i ++) {
		scanf("%d %d", &a, &b);
		v[a].push_back(b);
		v[b].push_back(a);
	}
	dfs(1);
	F[1].print();
	return 0;
}
