#include<cstdio>
#include<algorithm>
#include<cstring>

using namespace std;

#define M 2010
#define N 710
#define T 80
#define MOD 10000
struct bigInt {
	int a[T], n;
	bigInt(){};
	bigInt(int x) {
		memset(a, 0, sizeof a);
		n = 1, a[0] = x;
	}
	void init(int x) {
		n = 1, a[0] = x;
	}
	bool operator < (const bigInt &x) {
		if (n < x.n) return 1;
		else if (n > x.n) return 0;
		for (int i=n-1; i>=0; i--)
			if (a[i] < x.a[i]) return 1;
			else if (a[i] > x.a[i]) return 0;
		return 0;
	}
	bigInt operator * (const bigInt &x) {
		bigInt t(0); t.n = x.n + n - 1;
		for (int i=0; i<n; i++)
			for (int j=0; j<x.n; j++)
				t.a[i+j]+=a[i]*x.a[j];
		for (int i=0; i<t.n; i++) {
			t.a[i+1]+=t.a[i]/MOD;
			t.a[i]%=MOD;
		}
		if (t.a[t.n]) t.n++;
		return t;
	}
	bigInt operator + (const bigInt &x) {
		bigInt t(0); t.n = max(x.n, n);
		for (int i=0; i<t.n; i++) {
			t.a[i] = t.a[i] + x.a[i] + a[i];
			t.a[i+1]+=t.a[i]/MOD;
			t.a[i]%=MOD;
		}
		if (t.a[t.n]) t.n++;
		return t;
	}
	void print() {
		printf("%d",a[n-1]);
		for (int i=n-2; i>=0; i--) printf("%04d",a[i]);
		puts("");
	}
} dp[N][N];
int pre[M];
int other[M];
int last[M];
int s[M];
int tot, n;

void add(int p,int q) {
	pre[++tot]=last[p];
	last[p]=tot;
	other[tot]=q;
}

void dfs(int i,int f) {
	s[i]=1, dp[i][1].init(1), dp[i][0].init(0);
	for (int j=last[i]; j; j=pre[j]) {
		int k=other[j];
		if (k == f) continue;
		dfs(k,i);
		for (int p=s[i]; p>=0; p--)
			for (int q=s[k]; q>=0; q--) {
				bigInt C = dp[i][p] * dp[k][q];
				if (dp[i][p+q] < C) dp[i][p+q] = C;
			}
		s[i]+=s[k];
	}
	for (int p=1; p<=s[i]; p++) {
		bigInt C(p);
		C = C * dp[i][p];
		if (dp[i][0] < C) dp[i][0]=C;
	}
}

int main()
{
	scanf("%d",&n);
	for (int i=1; i<n; i++) {
		int a, b;
		scanf("%d%d",&a,&b);
		add(a,b), add(b,a);
	}
	dfs(1,0);
	dp[1][0].print();
	return 0;
}