#include <cstdio>
#include <cstring>

using namespace std;
const int w=10000;
struct arr{
  int h,a[50];

  arr(int x=0){
    memset(a,0,sizeof(a));
    a[1]=x;
    h=1;
  }
  
  bool operator <(const arr &x){
    if (h<x.h) return 1;
    if (h>x.h) return 0;
    for (int i=h;i>0;i--)
      if (a[i]!=x.a[i]) return a[i]<x.a[i];
    return 0;
  }

  arr operator *(const arr &x){
    arr ret;
    memset(ret.a,0,sizeof(ret.a));
    for (int i=1;i<=h;i++)
      for (int j=1;j<=x.h;j++)
        ret.a[i+j-1]+=a[i]*x.a[j];
    for (int i=1;i<h+x.h;i++) ret.a[i+1]+=ret.a[i]/w,ret.a[i]%=w;
    if (ret.a[h+x.h]>0) ret.h=h+x.h; else ret.h=h+x.h-1;
    return ret;
    
  }

} f[701][701],ans,C,q;

int n,i,t,node[1401],next[1401],a[701],fa[701];
int s[701],x,y,k,l;

void add(int x,int y){
  node[++t]=y;
  next[t]=a[x];
  a[x]=t;
}

void dp(int i){
  int j;
  s[i]=1;
  f[i][1]=arr(1);
  for (j=a[i];j;j=next[j])
  if (node[j]!=fa[i]){
    fa[node[j]]=i;
    dp(node[j]);
    for (k=s[i];k>0;k--){
      q=f[i][k];
      for (l=1;l<=s[node[j]];l++){
        C=q*f[node[j]][l];
        if (f[i][k+l]<C) f[i][k+l]=C;
        C=q*arr(l)*f[node[j]][l];
        if (f[i][k]<C) f[i][k]=C;
      }
    }
    s[i]=s[i]+s[node[j]];
  }
}

void print(){
  for (i=ans.h;i>0;i--){
    if (i==ans.h || ans.a[i]>=1000) printf("%d",ans.a[i]);
      else if (ans.a[i]>=100) printf("0%d",ans.a[i]);
        else if (ans.a[i]>=10) printf("00%d",ans.a[i]);
          else printf("000%d",ans.a[i]);
  }
  puts("");
}

int main(){
  //freopen("23E.in","r",stdin);
  //freopen("23E.out","w",stdout);
  scanf("%d",&n);
  for (i=1;i<n;i++){
    scanf("%d%d",&x,&y);
    add(x,y);
    add(y,x);
  }
  dp(1);
  for (i=1;i<=n;i++)
    if (ans<(f[1][i]*arr(i))) ans=(f[1][i]*arr(i));
  print();
  return 0;
}