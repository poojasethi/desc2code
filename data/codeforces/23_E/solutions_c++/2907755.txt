#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
const int maxn=710;
struct larint
{
   int a[100];
   larint(int x=0)
   {
      memset(a,0,sizeof(a));
      a[0]=1;
      a[1]=x;
   }
   larint operator * (const larint &x)
   {
        larint b;
        int i,j,l;
        for (i=1;i<=a[0];i++)
          for (j=1;j<=x.a[0];j++)
          b.a[i+j-1]+=a[i]*x.a[j];
        l=a[0]+x.a[0];
        for (i=1;i<l;i++)  
        {
           b.a[i+1]+=b.a[i]/10000;
           b.a[i]%=10000;
        }
        if (b.a[l]>0) l++;
        b.a[0]=l-1;
        return b;
   }
   bool operator < (const  larint &x)
   {
       if (a[0]<x.a[0]) return true;
       else if (a[0]==x.a[0])
       {
          int i;
          for (i=a[0];i>0;i--)
          if (a[i]<x.a[i]) return true;
          else if (a[i]>x.a[i]) return false;
       }
       return false;
   }
   void print() 
   {
      int i;
      for (i=a[0];i>0;i--)
      {
        if (i==a[0]) printf("%d",a[i]);
        else printf("%04d",a[i]);
      }
      printf("\n");
   }
};
int mat[maxn][maxn];
larint dp[maxn][maxn];
int num[maxn];
int n;
larint Max(larint x,larint y)
{
    return x<y?y:x;
}
void dfs(int x,int y)
{
   int i,j,k,l;
   dp[x][1]=larint(1);
   num[x]=1;
   for (i=1;i<=mat[x][0];i++)
   {
      j=mat[x][i];
      if (j==y) continue;
      dfs(j,x);
      for (k=num[x];k>0;k--)
         for (l=num[j];l>=0;l--)
         {
            dp[x][k+l]=Max(dp[x][k+l],dp[x][k]*dp[j][l]);
         }
      num[x]+=num[j];    
   }
   for (i=1;i<=num[x];i++)
   dp[x][0]=Max(dp[x][0],dp[x][i]*larint(i));
   dp[x][0]=Max(dp[x][0],larint(num[x]));
}
int main()
{
   int i,x,y;
   scanf("%d",&n);
   for (i=1;i<n;i++)
   {
      scanf("%d%d",&x,&y);
      mat[x][++mat[x][0]]=y;
      mat[y][++mat[y][0]]=x;
   }
   dfs(1,0);
   dp[1][0].print();
return 0;
}