#include <iostream>
#include <cstdio>
#include <cstring>
#define LL long long int
using namespace std;
const LL MAXN=100000000;

int n ,num[705] ,code ,cnt[705] ,a ,b ;

struct node
{
	int v ,next ;
}edge[1505];

void add(int a,int b)
{
	++code;
	edge[code].v=b,edge[code].next=num[a];
	num[a]=code;
}

struct NUM
{
	LL num[60] ,len ;
	void init()
	{
		memset(num,0,sizeof(num));
		len=0;
	}
	NUM operator * (int &a) const
	{
		NUM ans;
		ans.init();
		for(int i=1;i<=len;++i)
			ans.num[i]=num[i]*a;
		ans.len=len;
		for(int i=1;i<=len;++i)
		{
			ans.num[i+1]+=ans.num[i]/MAXN;
			ans.num[i]%=MAXN;
		}
		while(ans.num[ans.len+1]>0)
		{
			ans.num[ans.len+2]+=ans.num[ans.len+1]/MAXN;
			ans.num[ans.len+1]%=MAXN;
			++ans.len;
		}
		return ans;
	}
	NUM operator * (NUM &a) const 
	{
		NUM ans;
		ans.init();
		for(int i=1;i<=len;++i)
			for(int j=1;j<=a.len;++j)
				ans.num[i+j-1]+=num[i]*a.num[j];
		ans.len=len+a.len-1;
		for(int i=1;i<=ans.len;++i)
		{
			ans.num[i+1]+=ans.num[i]/MAXN;
			ans.num[i]%=MAXN;
		}
		while(ans.num[ans.len+1]>0)
		{
			ans.num[ans.len+2]+=ans.num[ans.len+1]/MAXN;
			ans.num[ans.len+1]%=MAXN;
			++ans.len;
		}
		return ans;
	}
	bool operator > (NUM &a) const
	{
		if(len>a.len)return 1;
		if(a.len>len)return 0;
		for(int i=len;i>0;--i)
		{
			if(num[i]>a.num[i])return 1;
			if(a.num[i]>num[i])return 0;
		}
		return 1;
	}
	void write()
	{
		printf("%I64d",num[len]);
		for(int i=len-1;i>0;--i)
			printf("%08I64d",num[i]);
		printf("\n");
	}
}f[705][705];

NUM max(NUM a,NUM b)
{
	if(a>b)
		return a;
	return b;
}

void dp(int u,int fa)
{
	int temp;
	cnt[u]=1;
	for(int i=1;i<=n;++i)
	{
		f[u][i].num[1]=1;
		f[u][i].len=1;
	}
	for(int p=num[u];p;p=edge[p].next)
		if((temp=edge[p].v)!=fa)
		{
			dp(temp,u);
			cnt[u]+=cnt[temp];
			for(int i=cnt[u]-cnt[temp];i>=0;--i)
				for(int j=cnt[temp];j>=0;--j)
					f[u][i+j]=max(f[u][i+j],f[u][i]*f[temp][j]);
		}
	for(int i=1;i<=cnt[u];++i)
		f[u][0]=max(f[u][0],f[u][i]*i);
}

int main()
{
	scanf("%d",&n);
	for(int i=1;i<n;++i)
	{
		scanf("%d%d",&a,&b);
		add(a,b);
		add(b,a);
	}
	dp(1,0);
	f[1][0].write();
	return 0;
}
	  	 					   		 	 						   				