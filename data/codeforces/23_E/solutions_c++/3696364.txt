#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<iostream>
#include<cstring>

using namespace std;

#define N 705
#define LEN 65
#define MOD 10000
int start[N],f[N][N][LEN],n,s[N],d[LEN],tmp[LEN],ed[N*2],son[N*2],next[N*2],tot=0;
void times(int *c,int *a,int *b)
{
    for(int i=1;i<=55;i++) c[i]=0; 
    c[0]=a[0]+b[0]+3;
    for(int i=1;i<=a[0];i++) 
        for(int j=1;j<=b[0];j++) 
            c[i+j-1]+=a[i]*b[j];
    for(int i=1;i<=c[0];i++) 
        c[i+1]+=c[i]/MOD,c[i]%=MOD;
    while(!c[c[0]]) c[0]--;
}
bool big(int *a,int *b)
{
    if(a[0]<b[0]) return false; 
    if(a[0]>b[0]) return true;
    for(int i=a[0];i;i--)
    {
        if(a[i]<b[i]) return false;
        if(a[i]>b[i]) return true;
    }
    return 0;
}
void updata(int *a,int *b,int *c) { times(tmp,b,c); if(big(tmp,a)==true) memcpy(a,tmp,sizeof(tmp));}
void dfs(int x,int fa)
{
    s[x]=1;f[x][1][0]=f[x][1][1]=1;
    for(int i=son[x];i;i=next[i])
    {
        if(ed[i]==fa) continue;
        dfs(ed[i],x);
        for(int j=s[x];j>=0;j--)
            for(int l=s[ed[i]];l>=0;l--)
                 updata(f[x][j+l],f[x][j],f[ed[i]][l]);
        s[x]+=s[ed[i]];
    }
    memset(d,0,sizeof(d));
    d[0]=1;
    for(int i=1;i<=s[x];i++) d[1]++,updata(f[x][0],f[x][i],d);
}
void print(int *a)
{
    printf("%d",a[a[0]]);
    for(int i=a[0]-1;i;i--)
        printf("%04d",a[i]);    
}
int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n-1;i++)
    {
        int p,q;
        scanf("%d%d",&p,&q);
        ed[++tot]=q,next[tot]=son[p],son[p]=tot,
        ed[++tot]=p,next[tot]=son[q],son[q]=tot;
    }
    dfs(1,0);
    print(f[1][0]);
    return 0;
}