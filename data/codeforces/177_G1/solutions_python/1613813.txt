//In the name of Allah
//
//
//////////////////////
// Program: 
// Written By Alireza Farhadi (LGM)
//////////////////////
#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cctype>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <utility>
#include <vector>
#include <bitset>
#include <deque>
#include <iomanip>
#include <complex>
#include <fstream>
#include <sstream>
#include <map>
//#include <climits>
//#include <list>

using namespace std;

#if ( _WIN32 || __WIN32__ )
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

#define show(x) cerr<<((#x))<<" = "<<((x))<<" "<<endl
#define bit(a,b) (((a)>>(b))&1)
#define gcd __gcd
#define endl '\n'
#define bcnt(x) ((__builtin_popcount(x)))
#define sz(x) ((int((x).size())))
#define sqr(x) ((((x))*((x))))
#define fx(x) fixed<<setprecision(x)

template<class T> inline void smn(T &a,const T &b){if(b<a) a=b;}
template<class T> inline void smx(T &a,const T &b){if(b>a) a=b;}
template<class T> inline T rev(const T & a){T _=a; reverse(_.begin(),_.end()); return _;}

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pie;

const double eps=1e-9;
const ld leps=1e-14;
const int MOD=1000*1000*1000+7,MN=3000+10;
int size[MN];
int d[MN];
bool e[MN][MN],s[MN][MN];
int sm[MN][MN],em[MN][MN];
int cnt=1;
string fib[MN];
int n,m;
string inp;
bool av1(int a,int b)
{
	if (a<0) return 0;
	if (size[a]<b+1) return 0;
	bool & res=s[a][b];
	if (sm[a][b]==cnt) return res;
	sm[a][b]=cnt;
	res=0;
	if (size[a]==b+1)
	{
		if (fib[a]==inp.substr(0,b+1))
			return res=1;
		return res=0;
	}
	if (a>1 && size[a-2]>=b+1)
		return res=av1(a-2,b);
	if (inp.substr(b-size[a-2]+1,size[a-2])!=fib[a-2])
		return res=0;
	return res=av1(a-1,b-size[a-2]);
}
bool av2(int a,int b)
{
	int bs=sz(inp)-b;
	if (a<0) return 0;
	if (size[a]<bs) return 0;
	bool & res=e[a][b];
	if (em[a][b]==cnt) return res;
	em[a][b]=cnt;
	res=0;
	if (size[a]==bs)
	{
		if (fib[a]==inp.substr(b,bs))
			return res=1;
		return res=0;
	}
	if (a>=1 && size[a-1]>=bs)
		return res=av2(a-1,b);
	if (inp.substr(b,size[a-1])!=fib[a-1])
		return res=0;
	return res=av2(a-2,b+size[a-1]);
}

int fll(int a)
{
	if (a<0) return 0;
	int & res=d[a];
	if (d[a]!=-1) return d[a];
	if (size[a]==sz(inp) && fib[a]==inp) return res=1;
	if (size[a]<=sz(inp)) return res=0; 
	res=fll(a-1)+fll(a-2);
	res%=MOD;
	if (sz(inp)==1) return res;
	for (int i=0;i<sz(inp)-1;i++) 
		if (av1(a-1,i) && av2(a-2,i+1))
			res++;
	res%=MOD;
	return res;
}
int main(int argc,char * argv[])
{
	ios_base::sync_with_stdio(false);
	cin>>n>>m;
	fib[0]="a";
	fib[1]="b";
	size[0]=size[1]=1;
	for (int i=2;i<n && size[i-1]+size[i-2]<=3000;i++)
		fib[i]=fib[i-1]+fib[i-2],size[i]=size[i-1]+size[i-2];
	for (int i=2;i<n;i++) if (size[i]==0) size[i]=3001;
	for (int i=0;i<m;i++)
	{
		cin>>inp;
		memset(d,-1,sizeof(d));
		cout<<fll(n-1)<<endl;
		cnt++;
	}
	return 0;
}
