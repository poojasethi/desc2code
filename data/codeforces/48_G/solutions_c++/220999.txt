
//Tomasz Kulczy≈Ñski
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <numeric>
#include <cmath>
#include <cstdlib>
using namespace std;

#define X first
#define Y second
#define MP make_pair
#define PB push_back
typedef long long LL;
typedef double D;
typedef long double ld;
typedef vector<int> VI;
typedef pair<int,int> PII;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(VAR(i,a);i<=(b);++i)
#define FORD(i,a,b) for(VAR(i,a);i>=(b);--i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) typeof(b) a=(b)
#define SIZE(a) ((int)((a).size()))
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))
int cond = 1;
#define db(x) {if(cond){cerr << __LINE__ << " " << #x << " " << x << endl; } }
#define dbv(x) {if(cond){cerr << __LINE__ << " " << #x << ": "; FORE(__i,x) cerr << *__i << " "; cerr << endl;} }

const int M = 201013;

int n,ee;
vector<PII> pod[M], v[M];
LL su[M],ret[M];
int w[M],s[M],e[M];
PII f[M+M];

void dfs(int x)
{
    FORE(i, pod[x]) 
    {
        ret[i->X] = ret[x] + 1LL * i->Y * (n - 2 * w[i->X]);
        dfs(i->X);
    }
}

int main()
{
    scanf("%d",&n);
    REP(i,n)
    {
        int a,b,c;
        scanf("%d %d %d",&a,&b,&c);
        a--,b--;
        v[a].PB(MP(b,c));
        v[b].PB(MP(a,c));
        s[a]++;
        s[b]++;
        su[i] = 0;
        w[i] = 1;
    }
    REP(i,n) if(s[i] == 1) e[ee++] = i;
    while(ee)
    {
        int x = e[--ee];
        s[x] = 0;
        FORE(i,v[x]) if(s[i->X])
        {
            su[i->X] += su[x] + 1LL * w[x] * i->Y;
            w[i->X] += w[x];
            pod[i->X].PB(MP(x, i->Y));
            if((--s[i->X]) == 1) e[ee++] = i->X;
        }
    }
    int x = 1;
    REP(i,n) if(s[i]) { x = i; }
    ee = 1;
    FORD(i,SIZE(v[x])-1,0) if(s[v[x][i].X]) { f[0] = MP(x, v[x][i].Y); break; } 
    while(s[x])
    {
        s[x] = 0;
        FORE(i, v[x]) if(s[i->X])
        {
            f[ee++]= *i;
            x = i->X;
            break;
        }
    }
    {
        int S = 0, W = 0;
        LL SU = 0;
        REP(i,ee) 
        {
       //     printf("%d ",f[i].X);
            S += f[i].Y;
            f[ee+i] = f[i]; 
            SU += su[f[i].X] + 1LL * W * f[i].Y; 
            W += w[f[i].X];
        }
        SU += 1LL * W * f[ee].Y;
      //  printf("\n__ %lld %d\n",SU,W);
        int j = 0, SS = S;
        FOR(i, ee, ee+ee-1) {
            while(SS+SS > S)
            {
                SU -= su[f[j].X] + 1LL * w[f[j].X] * SS;
                W -= w[f[j].X];
                SS -= f[j+1].Y;
                j++;
            }
    //        printf("%lld %d\n",SU,W);
            ret[f[i].X] = su[f[i].X] + SU;
            W += w[f[i].X];
            SU += 1LL * f[i+1].Y * W + su[f[i].X];
            SS += f[i+1].Y;
        }
    }
    REP(i,ee) 
        swap(f[i], f[ee+ee-1-i]);
    {
        int S=0, W = 0;
        LL SU = 0;
        REP(i,ee) 
        {
            S += f[i].Y;
            SU += su[f[i].X] + 1LL * W * f[i-1].Y; 
            W += w[f[i].X];
        }
        SU += 1LL * W * f[ee-1].Y;
  //      printf("__ %lld %d\n",SU,W);
        int j = 0, SS = S;
        FOR(i, ee, ee+ee-1) {
            while(SS+SS >= S)
            {
                SU -= su[f[j].X] + 1LL * w[f[j].X] * SS;
                W -= w[f[j].X];
                SS -= f[j].Y;
                j++;
            }
//            printf("%lld %d\n",SU,W);
            ret[f[i].X] += SU;
            W += w[f[i].X];
            SU += 1LL * f[i].Y * W + su[f[i].X];
            SS += f[i].Y;
        }
    }
  
    REP(i,ee) dfs(f[i].X);
    REP(i,n) cout << ret[i] << " ";
    cout << endl;
    return 0;
}
