#include <stdio.h>
typedef long long ll;
const int nmax = 200000, mmax = nmax << 1;

int ind[nmax + 18], fst[nmax + 18], nxt[mmax + 18], pnt[mmax + 18], cst[mmax + 18];
int q[nmax + 18], qh = 1, qt, sze[nmax + 18], fa[nmax + 18], l[nmax + 18], r[nmax + 18], ssze[nmax + 18], wsize, w[nmax + 18];
ll tans[nmax + 18], whole, nowl, ans[nmax + 18], sd[nmax + 18], nowr, ts;
int n, tot;

void add(int s, int t, int c){pnt[++tot] = t, nxt[tot] = fst[s], fst[s] = tot, cst[tot] = c, ++ind[t];}

void dfs(int i, int f)
{
    ssze[i] += sze[i];
    for (int j = fst[i]; j; j = nxt[j])
    if (pnt[j] != f && ind[pnt[j]] == 2)
    {
        w[l[r[i] = pnt[j]] = i] = cst[j];
        whole += cst[j];
        if (!r[pnt[j]]) 
        {   
        sd[pnt[j]] = sd[i] + cst[j];
        ssze[pnt[j]] += ssze[i];
        dfs(pnt[j], i);
        }
        return;
    }
}

void work(int i)
{
    wsize = n;
    int j, k;ll __e__ = whole >> 1;
    for (ts = tans[j = i]; (j = r[j]) != i; ) ts += tans[j];
    for (j = i; l[j] != i && (sd[i] - sd[l[j]] + whole) % whole <= __e__; )
    j = l[j];
    for (k = j; j != i; j = r[j]) 
    nowl += ((ssze[j] + wsize - ssze[l[k]]) % wsize) * w[j];
    for (j = l[k]; j != i; j = l[j]) 
    nowr += ((ssze[l[k]] + wsize - ssze[l[j]]) % wsize) * w[l[j]];
    for (j = k, ans[k = i] += nowl + nowr + ts; (i = r[i]) != k;)
    {
    if (i == j) nowl = nowl - (whole - w[l[i]]) * sze[i] + w[l[i]] * (wsize - sze[i]),nowr = 0, j = r[j];
    else    
        nowl += ((ssze[l[i]] + wsize - ssze[l[j]]) % wsize) * w[l[i]],nowr -= ((ssze[l[j]] - ssze[l[i]] + wsize) % wsize) * w[l[i]];
    while (j != i && (sd[j] - sd[i] + whole) % whole <= __e__) 
        nowl -= tans[j] + (/*i == j ? whole : */(sd[i] - sd[j] + whole) % whole) * sze[j], nowr += tans[j] + (/*i == j ? whole : */(sd[j] - sd[i] + whole) % whole) * sze[j], j = r[j];
    ans[i] = nowl + nowr + ts;
    }
}

void dfs2(int i, int f)
{
    for (int j = fst[i]; j; j = nxt[j])
    if (pnt[j] != f && ind[pnt[j]] == 1)
        ans[pnt[j]]  = ans[i] - cst[j]*1LL*sze[pnt[j]] + cst[j]*1LL*(n - sze[pnt[j]]), dfs2(pnt[j], i);
}

int main()
{
    scanf("%d", &n);
    for (int i = 1, ss, tt, cc; i <= n; ++i)
    scanf("%d%d%d", &ss, &tt, &cc), add(ss, tt, cc), add(tt, ss, cc), sze[i] = 1;
    for (int i = 1; i <= n; ++i)
    if (ind[i] == 1)
    {
//      ++sze[fa[i] = pnt[fst[i]]];
//      tans[fa[i]] += cst[fst[i]];
        /* if (--ind[fa[i]] == 1)*/ q[++qt] = i;
    }
    for (int i; qh <= qt; ++qh)
    for (int j = fst[i = q[qh]]; j; j = nxt[j])
        if (ind[pnt[j]] > 1)
        {
        sze[fa[i] = pnt[j]] += sze[q[qh]];
        tans[fa[i]] += cst[j]*1LL*sze[i] + tans[i];
        if (--ind[fa[i]] == 1) q[++qt] = fa[i];
        break;
        }
    for (int i = 1; i <= n; ++i)
    if (ind[i] == 2)
    {
        dfs(i, 0);
        work(i);
        break;
    }
    for (int i = 1; i <= n; ++i)
    if (ind[i] == 2)
        dfs2(i, 0);
    for (int i = 1; i <= n; ++i)
    printf("%I64d ", ans[i]);
    return 0;
}
