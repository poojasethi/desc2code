#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<iostream>
#include<vector>
#define MAXN 200050
#define pb push_back
#define mp make_pair
#define ft first
#define sc second
using namespace std;
typedef long long LL;
vector< pair<int,int> >g[MAXN];
int m,cir[MAXN*3];
LL len[MAXN*3],sum[MAXN*3];
int n,pre[MAXN],deg[MAXN];
LL all,size[MAXN],sum_size[MAXN*3],dep[MAXN],dp1[MAXN],dp2[MAXN],dp3[MAXN];
bool on_cir[MAXN],flag[MAXN];
int head,tail,queue[MAXN];
int root;
int find(int u)
{
    if(pre[u]^u)
        pre[u]=find(pre[u]);
    return pre[u];
}
void make_cir()
{
    memset(flag,false,sizeof(flag));
    head=tail=0;
    for(int i=1;i<=n;i++)
        if(deg[i]==1){
            queue[tail++]=i;
            flag[i]=true;
        }
    while(head<tail){
        int u=queue[head++];
        on_cir[u]=false;
        for(int i=0;i<g[u].size();i++){
            int v=g[u][i].ft;
            deg[v]--;
            if(!flag[v]&&deg[v]==1){
                flag[v]=true;
                queue[tail++]=v;
            }
        }
    }
    for(int i=1;i<=n;i++)
        if(on_cir[i])
            root=i;
    memset(flag,false,sizeof(flag));
    cir[0]=root;
    m=1;
    for(int i=0;i<m;i++){
        int u=cir[i];
        if(i&&u==cir[0]){
            m--;
            break;
        }
        for(int j=0;j<g[u].size();j++){
            int v=g[u][j].ft;
            int w=g[u][j].sc;
            if(on_cir[v]&&(!i||cir[i-1]!=v)){
                cir[m++]=v;
                len[m-1]=w;
                break;
            }
        }
    }
    for(int i=0;i<m;i++){
        cir[i+m]=cir[i+m+m]=cir[i];
        len[i+m+1]=len[i+m+m+1]=len[i+1];
    }
}
void dfs1(int u,LL down)
{
    dep[u]=down;
    pre[u]=u;
    flag[u]=true;
    size[u]=1;
    dp1[u]=0;
    for(int i=0;i<g[u].size();i++){
        int v=g[u][i].ft;
        int w=g[u][i].sc;
        if(!flag[v]&&!on_cir[v]){
            dfs1(v,down+w);
            pre[v]=u;
            size[u]+=size[v];
            dp1[u]+=size[v]*w+dp1[v];
        }
    }
}
void dfs2(int u,LL down)
{
    flag[u]=true;
    dp2[u]=down;
    for(int i=0;i<g[u].size();i++){
        int v=g[u][i].ft;
        int w=g[u][i].sc;
        if(!flag[v]&&!on_cir[v])
            dfs2(v,down+(n-size[v])*w+dp1[u]-dp1[v]-size[v]*w);
    }
}
void cal_cir()
{
    int l;
    sum[0]=0;
    sum_size[0]=0;
    for(int i=0;i<m+m+m;i++){
        sum[i+1]=sum[i]+len[i+1];
        sum_size[i+1]=size[cir[i]]+sum_size[i];
    }
    l=0;
    dp3[cir[m-1]]=0;
    for(int i=0;i<m-1;i++)
        dp3[cir[m-1]]+=size[cir[i]]*(sum[m-1]-sum[i]);
    while(l<m-1&&sum[l+m]-sum[m-1]<sum[m-1]-sum[l]){
        dp3[cir[m-1]]-=(sum[m-1]-sum[l])*size[cir[l]];
        dp3[cir[m-1]]+=(sum[l+m]-sum[m-1])*size[cir[l]];
        l++;
    }
    for(int i=m;i<m+m;i++){
        int u=cir[i];
        int last=cir[i-1];
        dp3[u]=dp3[last]+((sum_size[i]-sum_size[l])-(sum_size[l+m]-sum_size[i]))*len[i];
        while(l<i&&sum[l+m]-sum[i]<sum[i]-sum[l]){
            dp3[u]-=(sum[i]-sum[l])*size[cir[l]];
            dp3[u]+=(sum[l+m]-sum[i])*size[cir[l]];
            l++;
        }
    }
}
void solve()
{
    make_cir();
    all=0;
    memset(flag,false,sizeof(flag));
    for(int i=1;i<=n;i++)
        if(on_cir[i]){
            dfs1(i,0);
            all+=dp1[i];
        }
    memset(flag,false,sizeof(flag));
    for(int i=1;i<=n;i++)
        if(on_cir[i])
            dfs2(i,0);
    cal_cir();
    for(int i=1;i<=n;i++)
        printf("%I64d%c",dp1[i]+all-dp1[find(i)]+dp2[i]+dp3[find(i)],i<n?' ':'\n');
}
int main()
{
    int u,v,w;
    while(scanf("%d",&n)==1){
        for(int i=1;i<=n;i++){
            g[i].clear();
            on_cir[i]=true;
            deg[i]=0;
        }
        for(int i=0;i<n;i++){
            scanf("%d%d%d",&u,&v,&w);
            g[u].pb(mp(v,w));
            g[v].pb(mp(u,w));
            deg[u]++;
            deg[v]++;
        }
        solve();
    }
    return 0;
}