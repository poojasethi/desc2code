#include<cstdio>
#include<cstdlib>
#include<cstring>
using namespace std;

const int MAXN = 200010, MAXM = 400010;
int n;
int head[MAXN], next[MAXM], b[MAXM], bj[MAXM], l;
long long c[MAXM];
int p[MAXN], p2[MAXN];
long long q[MAXN], q2[MAXN];
bool chk[MAXN], use[MAXM];
int s[MAXN], fa[MAXN];
long long d[MAXN], f[MAXN];
long long d1, d2, f1, f2;
int divid, s1, s2;

void makeedge(int a0, int b0, long long c0)
{
	b[++l] = b0; c[l] = c0;
	next[l] = head[a0];
	head[a0] = l;
}

bool flag;

void dfs(int v, int dep)
{
	if (flag) return;
	chk[v] = true;
	p2[dep] = v;
	for (int i = head[v]; i; i = next[i])
		if (!use[i])
		{
			use[i] = use[bj[i]] = true;
			if (!chk[b[i]])
			{
				q2[dep + 1] = c[i];
				dfs(b[i], dep + 1);
			} else
			{
				p[++p[0]] = b[i]; q[p[0]] = c[i];
				for (; p2[dep] != b[i]; --dep) p[++p[0]] = p2[dep], q[p[0]] = q2[dep];
				flag = true;
				return;
			}
		}
}

void dp(int v)
{
	s[v] = 1;
	d[v] = 0;
	for (int i = head[v]; i; i = next[i])
		if ((!chk[b[i]]) && b[i] != fa[v])
		{
			fa[b[i]] = v;
			dp(b[i]);
			s[v] += s[b[i]];
			d[v] += d[b[i]] + c[i] * s[b[i]];
		}
}

void dfs_tr(int v)
{
	for (int i = head[v]; i; i = next[i])
		if ((!chk[b[i]]) && b[i] != fa[v])
		{
			f[b[i]] = d[b[i]] + (f[v] - d[b[i]] - s[b[i]] * c[i]) + (c[i] * (n - s[b[i]]));
			dfs_tr(b[i]);
		}
}

int main()
{
	// freopen("g.in","r",stdin);
	scanf("%d",&n);
	memset(head,0,sizeof(head));
	memset(next,0,sizeof(next));
	l = 0;
	int a0, b0;
	long long c0;
	for (int i = 1; i <= n; ++i)
	{
		scanf("%d%d%I64d",&a0,&b0,&c0);
		makeedge(a0, b0, c0);
		makeedge(b0, a0, c0);
		bj[l] = l - 1; bj[l - 1] = l;
	}
	
	memset(chk,0,sizeof(chk));
	memset(use,0,sizeof(use));
	p[0] = 0; p2[0] = 0;
	flag = false;
	dfs(1, 1);
	
	memset(s,0,sizeof(s));
	memset(d,0,sizeof(d));
	memset(fa,0,sizeof(fa));
	memset(chk,0,sizeof(chk));
	for (int i = 1; i <= p[0]; ++i) chk[p[i]] = true;
	for (int i = 1; i <= p[0]; ++i) dp(p[i]);

	divid = 2;
	d1 = q[1];
	s1 = 0;
	f1 = 0;
	d2 = f2 = s2 = 0;
	for (int i = 2; i <= p[0]; ++i)
	{
		d2 += q[i];
		s2 += s[p[i]];
		f2 += q[i] * s2;
	}
	
	for (; d1 < d2 && divid <= p[0]; ++divid)
	{
		s1 += s[p[divid]];
		s2 -= s[p[divid]];
		f1 += s[p[divid]] * d1;
		f2 -= s[p[divid]] * d2;
		d1 += q[divid];
		d2 -= q[divid];
	}
	
	int tmp = 0;
	for (int i = 1; i <= p[0]; ++i) tmp += d[p[i]];
	f[p[1]] = f1 + f2 + tmp;
	
	for (int i = 2; i <= p[0]; ++i)
	{
		f1 -= s1 * q[i - 1];
		s1 -= s[p[i]];
		s2 += s[p[i - 1]];
		f2 += s2 * q[i - 1];
		d1 -= q[i - 1];
		d2 += q[i - 1];
		for (; d1 < d2; divid = (divid % p[0]) + 1)
		{
			s1 += s[p[divid]];
			s2 -= s[p[divid]];
			f1 += s[p[divid]] * d1;
			f2 -= s[p[divid]] * d2;
			d1 += q[divid];
			d2 -= q[divid];
		}
		f[p[i]] = f1 + f2 + tmp;
		// printf("div:%d\n",divid);
		// printf("d1:%d d2:%d s1:%d s2:%d f1:%d f2:%d\n",d1, d2, s1, s2, f1, f2);
	}
	
	for (int i = 1; i <= p[0]; ++i) dfs_tr(p[i]);
	
	for (int i = 1; i < n; ++i) printf("%I64d ",f[i]); printf("%I64d\n",f[n]);
	return 0;
}
