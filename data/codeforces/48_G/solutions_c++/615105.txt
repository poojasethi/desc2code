#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())


#define MAX 200005
#define LEFT 0
#define RIGHT 1
li n;
vector<pair<li,li> > E[MAX];
vector<pair<li,li> > L;
li used[MAX],comp[MAX],cnt[MAX],ans[MAX],sum[MAX],dis[MAX*3];
li find_loop(li pos,li parent=-1){
	if(used[pos]) return pos;
	used[pos]=true;
	rep(i,sz(E[pos]))if(E[pos][i].first!=parent){
		li tmp=find_loop(E[pos][i].first,pos);
		if(tmp!=-1){
			comp[pos]=true;
			L.pb(make_pair(pos,E[pos][i].second));
			return (tmp==pos)?-1:tmp;
		}
	}
	return -1;
}

li dfs(li pos,li parent=-1){
	cnt[pos]=1,sum[pos]=0;
	rep(i,sz(E[pos]))if(E[pos][i].first!=parent && !comp[E[pos][i].first]){
		cnt[pos]+=dfs(E[pos][i].first,pos);
		sum[pos]+=sum[E[pos][i].first];
		sum[pos]+=E[pos][i].second*cnt[E[pos][i].first];
	}
	return cnt[pos];
}

void cal(li pos,li parent=-1){
	rep(i,sz(E[pos]))if(E[pos][i].first!=parent && !comp[E[pos][i].first]){
		ans[E[pos][i].first]=ans[pos];
		ans[E[pos][i].first]+=(n-cnt[E[pos][i].first])*E[pos][i].second;
		ans[E[pos][i].first]-=cnt[E[pos][i].first]*E[pos][i].second;
		cal(E[pos][i].first,pos);
	}
}

int main(){
	li a,b,c;
	cin>>n;
	rep(i,n){
		cin>>a>>b>>c;
		E[a-1].pb(make_pair(b-1,c));
		E[b-1].pb(make_pair(a-1,c));
	}
	rep(i,MAX) used[i]=comp[i]=false;
	find_loop(0);
	rep(i,sz(L)) dfs(L[i].first);
	dis[0]=0;
	rep(i,sz(L)*3)if(i) dis[i]=dis[i-1]+L[i%sz(L)].second;
	ans[L[0].first]=0;
	rep(i,sz(L)){
		ans[L[0].first]+=sum[L[i].first]+min(dis[i],dis[sz(L)]-dis[i])*cnt[L[i].first];
	}
	li num[2]={n,0},mid=0;
	while(dis[mid+1]<dis[sz(L)]-dis[mid+1]){
		mid++;
		num[LEFT]-=cnt[L[mid].first];
		num[RIGHT]+=cnt[L[mid].first];
	}
	rep(i,sz(L))if(i){
#define ANS(var) ans[L[var].first]
		ANS(i)=ANS(i-1)+num[LEFT]*(dis[i]-dis[i-1])-num[RIGHT]*(dis[i]-dis[i-1]);
		num[LEFT]+=cnt[L[i].first];
		num[RIGHT]-=cnt[L[i].first];
		while(dis[mid+1]-dis[i]<dis[sz(L)+i]-dis[mid+1]){
			mid++;
			num[LEFT]-=cnt[L[mid%sz(L)].first];
			num[RIGHT]+=cnt[L[mid%sz(L)].first];
			ANS(i)-=(dis[sz(L)+i]-dis[mid])*cnt[L[mid%sz(L)].first];
			ANS(i)+=(dis[mid]-dis[i])*cnt[L[mid%sz(L)].first];
		}
	}
	rep(i,sz(L)) cal(L[i].first);
	rep(i,n) cout<<ans[i]<<" "; cout<<endl;
}
