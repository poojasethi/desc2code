#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<iostream>
#include<vector>
#include<set>
#define mp make_pair
#define ft first
#define sc second
#define MAXN 1050
using namespace std;
typedef pair<int,int> pii;
struct Edge{
	int v,next;
}edge[MAXN*MAXN*2];
int e,ft[MAXN];
int n,lv,pre[MAXN];

set<pii>st;
pii p1[MAXN*MAXN],p2[MAXN*MAXN];
int m;

int cnt,low[MAXN],dfn[MAXN];

bool flag[MAXN];
int dist[MAXN];
int from[MAXN];
vector<pii>g;
void init()
{
	e=0;
	memset(ft,-1,sizeof(ft));
}
void add_edge(int u,int v)
{
	edge[e].v=v;
	edge[e].next=ft[u];
	ft[u]=e++;
}
void insert(int u,int v)
{
	add_edge(u,v);
	add_edge(v,u);
}
int find(int u)
{
	if(pre[u]!=u)
		pre[u]=find(pre[u]);
	return pre[u];
}
void dfs(int u,int fa)
{
	flag[u]=true;
	low[u]=dfn[u]=++cnt;
	for(int i=ft[u];i!=-1;i=edge[i].next){
		int v=edge[i].v;
		if(!flag[v]){
			dfs(v,u);
			low[u]=min(low[u],low[v]);
			if(low[v]!=dfn[v]){
				pre[find(v)]=find(u);
				lv--;
			}
		}
		else if(fa!=v)
			low[u]=min(low[u],dfn[v]);
	}
}
void dfs2(int u)
{
	flag[u]=true;
	for(int i=ft[u];i!=-1;i=edge[i].next){
		int v=edge[i].v;
		if(flag[v])
			continue;
		dist[v]=dist[u]+1;
		from[v]=u;
		dfs2(v);
	}
}
int find_dist(int s)
{
	memset(flag,false,sizeof(flag));
	dist[s]=0;
	from[s]=0;
	dfs2(s);
	for(int i=1;i<=n;i++)
		if(find(i)==i&&dist[i]>dist[s])
			s=i;
	return s;
}
void solve()
{
	if(n==2){
		puts("-1");
		return;
	}
	g.clear();
	for(int i=1;i<=n;i++)
		pre[i]=i;
	lv=n;
	cnt=0;
	memset(flag,false,sizeof(flag));
	dfs(1,0);
	while(lv>2){
		cnt=0;
		for(int i=0;i<m;i++)
			p2[i]=p1[i];
		init();
		for(int i=0;i<m;i++)
			if(find(p2[i].ft)!=find(p2[i].sc)){
				p1[cnt++]=p2[i];
				insert(find(p2[i].ft),find(p2[i].sc));
			}
		m=cnt;
		int s,t;
		s=find_dist(find(1));
		t=find_dist(s);
		//printf("s=%d\tt=%d\n",s,t);
		pii pp=mp(s,t);
		if(s>t)
			swap(pp.ft,pp.sc);
		g.push_back(pp);
		st.insert(pp);
		while(t!=s){
			pre[t]=from[t];
			t=from[t];
			lv--;
		}

	}
	bool f=false;
	if(lv!=1){
		for(int i=1;i<=n&&!f;i++)
			for(int j=i+1;j<=n;j++)
				if(find(i)!=find(j)&&st.find(make_pair(i,j))==st.end()){
					g.push_back(mp(i,j));
					f=true;
					break;
				}
	}
	printf("%d\n",g.size());
	for(int k=0;k<g.size();k++)
		printf("%d %d\n",g[k].ft,g[k].sc);
}
int main()
{
	//freopen("input.txt","r",stdin);
	while(scanf("%d%d",&n,&m)==2){
		//printf("n=%d\tm=%d\n",n,m);
		init();
		st.clear();
		for(int i=0;i<m;i++){
			scanf("%d%d",&p1[i].ft,&p1[i].sc);
			if(p1[i].ft>p1[i].sc)
				swap(p1[i].ft,p1[i].sc);
			insert(p1[i].ft,p1[i].sc);
			st.insert(p1[i]);
		}
		solve();
	}
	return 0;
}
