#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;

const int maxn=900+10;
bool e[maxn][maxn];
vector<int> E[maxn];
int que[maxn];
int dist[maxn];
int stack[maxn],lowlink[maxn],dfn[maxn];
int d[maxn];
int id[maxn],ie[maxn][maxn];
int n,m,cnt,top,sign;
int res[maxn][2];
int prev[maxn];
int dd[maxn];

void dfs(int u)
{
	dfn[u]=lowlink[u]=++sign;
	stack[++top]=u;
	for (int v=1;v<=n;v++)
	if (e[u][v])
	{
		e[v][u]=0;
		if (!dfn[v])
		{
			dfs(v);lowlink[u]=min(lowlink[u],lowlink[v]);
		} else lowlink[u]=min(lowlink[u],dfn[v]);
	}
	if (dfn[u]==lowlink[u])
	{
		cnt++;
		do 
		{
			ie[cnt][++ie[cnt][0]]=stack[top];
			id[stack[top--]]=cnt;
		} while (stack[top+1]!=u);
	}
}

int main()
{
	scanf("%d%d",&n,&m);
	if (n==2)
	{
		printf("-1\n");return 0;
	}
	for (int i=0,u,v;i<m;i++)
	{
		scanf("%d%d",&u,&v);
		e[u][v]=e[v][u]=1;
	}
	dfs(1);

	for (int i=1;i<=n;i++)
	for (int j=1;j<=n;j++)
	if (e[i][j] && id[i]!=id[j])
	{
		d[id[i]]++,d[id[j]]++;
		E[id[i]].push_back(id[j]);
		E[id[j]].push_back(id[i]);
	}

	for (int i=1;i<=n;i++) dd[i]=d[i];
	
	if (cnt==1)
	{
		printf("0\n");return 0;
	}
	
	int _n=n;
	n=0;
	for (int i=1;i<=cnt;i++)
	if (dd[i]==1 &&  d[i]==1)
	{
		n++;
		
		for (int j=1;j<=cnt;j++) prev[j]=0,dist[j]=0;
		dist[i]=1;que[1]=i;

		for (int l=1,r=1;l<=r;l++)
		for (int j=0;j<E[que[l]].size();j++)
		if (!dist[E[que[l]][j]])
		{
			que[++r]=E[que[l]][j];
			dist[que[r]]=dist[que[l]]+max(0,d[que[r]]-2);
			prev[que[r]]=que[l];
		}

		int j=0;
		for (int k=2;k<=cnt;k++)
		if (d[que[k]]==1 && dist[que[k]]>dist[j]) j=que[k];
		if (j!=i)
		{
			for (int a=1;a<=ie[i][0] && !res[n][0];a++)
			for (int b=1;b<=ie[j][0] && !res[n][0];b++)
			if (!e[ie[i][a]][ie[j][b]] && !e[ie[j][b]][ie[i][a]])
			{
				res[n][0]=ie[i][a];res[n][1]=ie[j][b];
			}
			
			int xxx=0;
			for (int k=j;k;k=prev[k])que[++xxx]=k;
			int l=1,r=xxx;
			for (;l<=r && d[que[l]]<=2;l++);
			for (;r>=l && d[que[r]]<=2;r--);
			for (int k=1;k<l;k++) d[que[k]]=0;
			for (int k=r+1;k<=xxx;k++) d[que[k]]=0;
			if (l<=r) d[que[l]]--,d[que[r]]--;
		}

		for (int a=1;a<=ie[i][0] && !res[n][0];a++)
		for (int b=1;b<=_n && !res[n][0];b++)
		if (d[id[b]]==1 && !e[ie[i][a]][b] && !e[b][ie[i][a]])
		{
			res[n][0]=ie[i][a];res[n][1]=b;d[id[b]]=0;break;
		}

		for (int a=1;a<=ie[i][0] && !res[n][0];a++)
		for (int b=1;b<=_n && !res[n][0];b++)
		if (!e[ie[i][a]][b] && !e[b][ie[i][a]])
		{
			res[n][0]=ie[i][a];res[n][1]=b;break;
		}
	}

	printf("%d\n",n);
	for (int i=1;i<=n;i++) printf("%d %d\n",res[i][0],res[i][1]);
}
