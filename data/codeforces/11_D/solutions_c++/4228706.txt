#include <iostream>

using namespace std;

const int maxN = 20;

int n, m;
bool adj[maxN][maxN];
long long ans, dp[maxN][1<<maxN];

int main()
{
	ios::sync_with_stdio(0);
	cin >> n >> m;
	for (int i = 1 ; i <= m ; i++)
	{
		int u, v;
		cin >> u >> v;
		adj[u][v] = adj[v][u] = 1;
		if (v < u)
			swap(u, v);
		dp[u][(1<<u)+(1<<v)] = 1;
	}
	for (int i = 1 ; i <= n ; i++)
		for (int mask = (1<<i)+1 ; mask < (1 << (i+1)) ; mask++)
			for (int j = 1 ; j <= i ; j++)
			{
				if (((1<<j) & mask) == 0 || dp[j][mask] == 0)
					continue;
				for (int k = 1 ; k <= i ; k++)
				{
					if (((1<<k) & mask) || !adj[j][k])
						continue;
					dp[k][mask|(1<<k)] += dp[j][mask];
				}
				ans += (adj[i][j]) ? dp[j][mask] : 0;
			}
	cout << (ans-m)/2 << endl;
	return 0;
}
