#include <iostream>
#include <cstring>
#include <algorithm>
#define ctz(x) __builtin_ctz(x)
using namespace std;
bool g[19][19];
long long dp[1<<19][19];
long long run(int n) {
  long long ans(0);
  for(int i(1);i<(1<<n);++i) {
    int s = ctz(i);
    for(int j(s+1);j<n;++j) if(dp[i][j]) {
      if(g[j][s]) ans+=dp[i][j];
      for(int k(s+1);k<n;++k)
        if(g[j][k] && !((1<<k)&i))
          dp[i|(1<<k)][k]+=dp[i][j];
    }
  }
  return ans;
}
int main() {
  int n,m,u,v; cin>>n>>m;
  for(int i(0);i<m;++i) {
    cin>>u>>v;
    --u, --v;
    g[u][v] = g[v][u] = true;
    dp[(1<<u)|(1<<v)][max(u,v)] = 1;
  }
  cout<<(run(n)-m)/2<<'\n';
  return 0;
}

	 	 	 		 									 	 		 	