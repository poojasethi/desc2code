#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 20;
bool G[N][N];
ll dp[1<<N][N];
int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i = 0; i < m; i ++) {
		int u, v;
		scanf("%d%d", &u, &v);
		u--, v--;
		G[u][v] = G[v][u] = 1;
		dp[(1<<u)|(1<<v)][max(u, v)] = 1;
	}
	ll ans = 0;
	for(int i = 0; i < (1 << n); i ++) {
		int x = __builtin_ctz(i);// 二进制1的个数
		for(int j = x+1; j < n; j ++) {
			if(dp[i][j]) {
				if(G[x][j]) ans += dp[i][j];
				for(int k = x + 1; k < n; k ++) {
					if(G[j][k] && ~i & 1 << k) dp[i | 1 << k][k] += dp[i][j];
				}
			}
		}
	}
	printf("%I64d\n", (ans - m) / 2);
	return 0;
}
	 		  		   		  		  	 	 			  	