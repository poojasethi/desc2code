def readarray(f): return map(f, raw_input().split())
def readint(): return int(raw_input())
def printlist(l): print ' '.join(map(str, l))

colors = ['R', 'G', 'B', 'Y', 'W']
values = ['1', '2', '3', '4', '5']

n = readint()
C = []
V = []

S = raw_input().split()
for i in range(n):
  C.append(S[i][0])
  V.append(S[i][1])

answers = dict()

for h in colors:
  s = set()
  for i in range(n):
    if C[i] == h:
      s.add(i)
  answers[h] = s
for h in values:
  s = set()
  for i in range(n):
    if V[i] == h:
      s.add(i)
  answers[h] = s

base = set(range(n))
canswers = dict()
for k in answers:
  canswers[k] = (base - answers[k])

from collections import defaultdict

count = defaultdict(int)
for i in range(n):
  count[(C[i], V[i])] += 1

def valid(C, V, Chint, Vhint):
  ranges = [set(range(n)) for i in range(n)]
  
  for h in Chint:
    for i in range(n):
      if C[i] == h:
        ranges[i].intersection_update(answers[h])
      else:
        ranges[i].intersection_update(canswers[h])
  for h in Vhint:
    for i in range(n):
      if V[i] == h:
        ranges[i].intersection_update(answers[h])
      else:
        ranges[i].intersection_update(canswers[h])

  for i in range(n):
    if len(ranges[i]) != count[(C[i], V[i])]:
      return False
  return True

from itertools import combinations

for res in range(0, 11):
  for hint in combinations(colors + values, res):
    Chint = []
    Vhint = []
    for h in hint:
      if h in colors:
        Chint.append(h)
      else:
        Vhint.append(h)
    if valid(C, V, Chint, Vhint):
      print res
      exit()

