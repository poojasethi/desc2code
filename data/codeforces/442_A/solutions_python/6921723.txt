import itertools

c = int(raw_input())
cards = raw_input().strip().split()

newcards = []
for c in cards:
  newc = [c[0], c[1]]
  if newc not in newcards:
    newcards.append(newc)

colors = 'RYGBW'
numbers = '12345'

def allsets(x):
  res = []
  for i in range(6):
    for j in itertools.combinations(x, i):
      res.append(j)
  return res

allcolorsets = allsets(colors)
allnumbersets = allsets(numbers)

def couldmatch(unkcard, kcard):
  if unkcard[0] != '?' and unkcard[0] != kcard[0]:
    return False
  if unkcard[1] != '?' and unkcard[1] != kcard[1]:
    return False
  return True

def matchall(uc, kc):
  while True:
    oldlen = len(uc)
    if oldlen == 0:
      return True
    for i in uc:
      possmatches = []
      for j in kc:
        if couldmatch(i, j):
          possmatches.append(j)
      if len(possmatches) == 1:
        uc.remove(i)
        kc.remove(possmatches[0])
    if oldlen == len(uc):
      return False

def attempt(c, n, newcards):
    cc = [x[:] for x in newcards[:]]
    cc2 = [x[:] for x in newcards[:]]
    for card in cc:
      if card[0] not in c:
        card[0] = '?'
      if card[1] not in n:
        card[1] = '?'
    res = matchall(cc, cc2)
    return res

best = 11
for c in allcolorsets:
  for n in allnumbersets:
    if attempt(c, n, newcards):
      if len(c) + len(n) < best:
        best = len(c) + len(n)

print best
    




