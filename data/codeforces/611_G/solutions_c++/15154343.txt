#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> point;
#define x first
#define y second

const ll mod = 1000000007;
#define MOD(x) ((((x) % mod) + mod) % mod)

ll twice_area(point a, point b, point c)
{
	ll s1 = b.x * a.y + c.x * b.y + a.x * c.y;
	ll s2 = a.x * b.y + b.x * c.y + c.x * a.y;
	return (s1 - s2);
}

ll N;
point P[1000005];

int main()
{
	ios::sync_with_stdio(false);
	cin >> N;
	for(int i = 1; i <= N; i++) cin >> P[i].x >> P[i].y;
	for(int i = 1; i <= N; i++) P[N + i] = P[i];
	ll twice_poly_area = 0;
	for(int i = 3; i <= N; i++)
		twice_poly_area += twice_area(P[1], P[i - 1], P[i]);

	ll cur_twice_area = 0;
	ll cur_sum_area_modded = 0;
	point cur_sum_points_modded(MOD(P[1].x + P[2].x), MOD(P[1].y + P[2].y));

	ll total_twice_small_areas_modded = 0;
	ll num_half = 0;
	int t = 2;
	for(int s = 1; s <= N; s++)
	{
		while(2LLU * (cur_twice_area + twice_area(P[s], P[t], P[t + 1])) <= twice_poly_area)
		{
			cur_twice_area += twice_area(P[s], P[t], P[t + 1]);
			cur_sum_area_modded = MOD(cur_sum_area_modded + cur_twice_area);
			cur_sum_points_modded.x = MOD(cur_sum_points_modded.x + P[t + 1].x);
			cur_sum_points_modded.y = MOD(cur_sum_points_modded.y + P[t + 1].y);
			t++;
		}
		//printf("s=%d t=%d area=%d sum_area=%d\n", s, (t - 1) % N + 1, cur_twice_area, cur_sum_area_modded);

		if(2LLU * cur_twice_area == twice_poly_area) num_half++;
		total_twice_small_areas_modded = MOD(total_twice_small_areas_modded + cur_sum_area_modded);

		cur_twice_area -= twice_area(P[s], P[s + 1], P[t]);
		cur_sum_area_modded = MOD(cur_sum_area_modded - (twice_area(P[s], P[s + 1], cur_sum_points_modded) + (t - s) * MOD(twice_area(P[s], P[s + 1], point(0, 0)))));
		cur_sum_points_modded.x = MOD(cur_sum_points_modded.x - P[s].x);
		cur_sum_points_modded.y = MOD(cur_sum_points_modded.y - P[s].y);
	}
	//printf("num_half = %d\n", num_half);
	assert(num_half % 2 == 0);
	total_twice_small_areas_modded = MOD(total_twice_small_areas_modded - (num_half / 2) * ((twice_poly_area / 2) % mod));
	cout << MOD(MOD(N * (N - 3) / 2) * MOD(twice_poly_area) - 2 * total_twice_small_areas_modded);
}
