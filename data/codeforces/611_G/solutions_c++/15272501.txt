/*
 * G.cpp
 *
 *  Created on: 2016��1��9��
 *      Author: Administrator
 */

#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>

using namespace std;
long long mod=1000000007LL;
struct Vector{
	long long x,y;
	Vector(long long x=0,long long y=0):x(x),y(y){}
};
Vector operator + (Vector A,Vector B){
	return Vector(((A.x+B.x)%mod+mod)%mod,((A.y+B.y)%mod+mod)%mod);
}
Vector operator - (Vector A,Vector B){
	return Vector(((A.x-B.x)%mod+mod)%mod,((A.y-B.y)%mod+mod)%mod);
}

long long cross(Vector a,Vector b){
	return a.x*b.y-a.y*b.x;
}
vector<Vector> p1,p;
vector<long long> ps,ps2;
long long V;
long long getPartition(long long a,long long b){
	if(b>=a){
		return ps[b]-ps[a]+cross(p[b],p[a]);
	}else{
		swap(a,b);
		return V-(ps[b]-ps[a]+cross(p[b],p[a]));
	}
}
vector<long long> sp;
vector<Vector> sump;
int main(){
	long long n;
	cin>>n;

	for(long long i=0;i<n;i++){
		long long x,y;
		scanf("%I64d%I64d",&x,&y);
		p1.push_back(Vector(x,y));
	}
	for(long long i=n-1;i>=0;i--){
		p.push_back(p1[i]);
	}
	long long sum=cross(p[n-1],p[0]);
	ps.push_back(sum);
	for(long long i=1;i<n;i++){
		sum+=cross(p[i-1],p[i]);
		//sum=sum%mod;
		ps.push_back(sum);
	}
	V=ps[n-1];
	//cout<<V<<endl;
	sum=(cross(p[n-1],p[0])%mod+mod)%mod;
	ps2.clear();
	ps2.push_back(sum);
	for(int i=1;i<2*n;i++){
		sum+=((cross(p[(i-1)%n],p[i%n])%mod+mod)%mod);
		sum=sum%mod;
		ps2.push_back(sum);
	}
	/*long long x,y;
	while(cin>>x>>y){
		cout<<getPartition(x,y)<<endl;
	}*/
	sp.clear();
	sum=0;
	sp.push_back(sum);
	for(long long i=1;i<2*n;i++){
		sum+=(((cross(p[(i-1)%n],p[i%n])%mod+mod)*i)%mod);
		sum=sum%mod;
		sp.push_back(sum);
	}
	Vector sumpoint(0,0);
	sump.push_back(sumpoint);
	for(int i=0;i<2*n;i++){
		sumpoint=sumpoint+p[i%n];
		sump.push_back(sumpoint);
	}
	long long small=0LL;
	//long long small2=0LL;
	long long count=0;
	long long high=n-1;
	long long low=1;
	long long v=-1;
	while(low<=high){
		long long mid=(high+low)/2;
		long long v1=mid%n;
		if(getPartition(0,v1)<=V/2){
			v=v1;
			low=mid+1;
		}else{
			high=mid-1;
		}
		//cout<<"!"<<endl;
	}
	v++;
	for(long long u=0;u<n;u++){
		//if(v<0) continue;
		//cout<<u<<" "<<v<<endl;
		while(getPartition(u,v%n)<=V/2) v++;
		v--;
		//if(v<u) v+=n;
		/*for(long long i=u+1;i<=v;i++){
			small2+=getPartition(u,i%n);
		}*/
		count+=(v-u-1);
		if(count==0) continue;
		long long temp=(((ps2[v]-ps2[u])%mod+mod)*(v+1))%mod;
		//cout<<u<<" "<<temp<<endl;
		temp-=((sp[v]-sp[u])%mod);
		temp=(temp%mod+mod)%mod;
		temp+=(cross(sump[v+1]-sump[u+1],p[u]))%mod;
		//cout<<u<<" "<<temp<<endl;
		temp=(temp%mod+mod)%mod;
		small+=temp;
		small=small%mod;
	}
	long long ans=((V%mod)*(count%mod))%mod;
	ans=((ans-2*small)%mod+mod)%mod;
	cout<<ans<<endl;
	return 0;
}


