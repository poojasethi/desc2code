#include <iostream>
#include <iomanip>
#include <climits>
#include <stack>
#include <fstream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <cassert>

#define FOR(i,n) for(int i=0,_n=n;i<_n;i++)
#define FORR(i,s,n) for(int i=s,_n=n;i<_n;i++)
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define pli pair<ll,int>
#define vi vector<int>
#define fs first
#define sec second

#define maxn 500000

using namespace std;
typedef long long ll;
typedef unsigned long long ull;

const ll MOD = 1000000007LL;

pair<ll,ll> pts[maxn+10];

ll prod(ll p1, ll p2){
	ll ret=pts[p1].fs*pts[p2].sec-pts[p1].sec*pts[p2].fs;
	return ret;
}

int main(){
	ll n;
	scanf("%lld",&n);
	FOR(i,n)scanf("%lld%lld",&pts[i].fs,&pts[i].sec);
	reverse(pts,pts+n);
	ll total=0LL;
	FORR(i,1,n)total+=prod(i-1,i);
	total+=prod(n-1,0);
	ll small=0LL;
	ll curr=0LL;
	ll sum1=0LL;
	ll sum2=0LL;
	ll b=0;
	pts[n]=mp(0,0);
	for(ll a=0;a<n;a++){
		while(1){
			if(((ull)(curr)+(ull)(prod(b,(b+1)%n))+(ull)(prod((b+1)%n,a)))*2ULL>(ull)(total))break;	
			if(((ull)(curr)+(ull)(prod(b,(b+1)%n))+(ull)(prod((b+1)%n,a)))*2ULL==(ull)(total) && b<a)break;	
			if(b==n-1){
				curr+=prod(n-1,0);
				b=0;
				sum1=(sum1+n*(prod(n-1,0)%MOD))%MOD;
				if(sum1<0)sum1+=MOD;
			} else {
				curr+=prod(b,b+1);
				if(b>=a)sum1=(sum1+(b+1)*(prod(b,b+1)%MOD))%MOD;
				else sum1=(sum1+(b+n+1)*(prod(b,b+1)%MOD))%MOD;
				b++;
			}
			pts[n].fs=(pts[n].fs+pts[b].fs)%MOD;
			pts[n].sec=(pts[n].sec+pts[b].sec)%MOD;
		}
		sum2=((curr%MOD)*(b+1+(b<a?n:0))-sum1)%MOD;
		sum2=(sum2+(prod(n,a)%MOD))%MOD;
		if(((ull)(curr)+(ull)(prod(b,a)))*2ULL==(ull)(total) && b<a)sum2=(sum2-curr%MOD-prod(b,a)%MOD+MOD)%MOD;
		small=(small+sum2)%MOD;
		if(small<0)small+=MOD;
		if(a==n-1)continue;
		pts[n].fs=(pts[n].fs-pts[a+1].fs+MOD)%MOD;
		pts[n].sec=(pts[n].sec-pts[a+1].sec+MOD)%MOD;
		curr-=prod(a,a+1);
		sum1=(sum1-(a+1)*(prod(a,a+1)%MOD))%MOD;
		sum1=((sum1%MOD)+MOD)%MOD;
	}
	printf("%lld\n",((((total%MOD)*((n*(n-3)/2)%MOD)-2LL*small)%MOD)+MOD)%MOD);
	return 0;
}
