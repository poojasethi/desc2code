#include <cstdio>
#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#define LEN 2 * 500005
#define MOD 1000000007
using namespace std;
int x[LEN] = {0}, y[LEN] = {0};
long long sx[LEN] = {0}, sy[LEN] = {0};
long long sp[LEN] = {0};

long long cal(int i, int j){
	return ((long long)x[i] * y[j] - (long long)x[j] * y[i]);
}
long long cal(long long x1, long long y1, long long x2, long long y2){
	return ((long long)x1 * y2 - (long long)x2 * y1);
}

long long area(int x, int y, int z){
	return cal(x, y) + cal(y, z) + cal(z, x);
}

int main(){
	int n;
	cin >> n;
	for(int i = 1; i <= n; i++)
		scanf("%d%d", &x[i], &y[i]);
	for(int i = n + 1; i <= n + n; i++)
		x[i] = x[i - n], y[i] = y[i - n];
	for(int i = 1; i <= n + n - 1; i++)
        sp[i] = cal(i, i + 1);
    sp[n + n] = cal(n, n + 1);
    for(int i = 1; i <= n + n; i++)
    	sx[i] = x[i], sy[i] = y[i];
    long long total = 0;
    for(int i = 3; i <= n; i++)
    	total += area(1, i, i - 1);
    for(int i = 1; i <= n + n; i++){
    	sp[i] = (sp[i] + sp[i - 1]) % MOD;
    	sx[i] = (sx[i] + sx[i - 1]) % MOD;
    	sy[i] = (sy[i] + sy[i - 1]) % MOD;
    }

    int ans = 0;
    int rp = 3;
    long long cur = 0;
    long long s1 = 0, s2 = 0;
    long long temp;

    for(int i = 1; i <= n; i++){
    	while((cur + area(i, rp, rp - 1)) <= total / 2.0 && rp - i <= n - 2){
    		cur += area(i, rp, rp - 1);
    		s1 = (s1 + (sp[i - 1] - sp[rp - 1])) % MOD;
    		s2 = (s2 + cal(i, rp)) % MOD;
    		rp++;
    	}
    	if(rp <= i + 2){
    		rp = i + 3;
    		s1 = s2 = cur = 0;
    		continue;
    	}

    	rp--;
    	temp = (rp - i - 1) * (total % MOD) % MOD - 2 * ((s1 + s2) % MOD);
    	if(temp < 0)
    		temp = temp % MOD + MOD;

    	cur -= area(i, rp, i + 1);
    	s1 = (s1 - ((rp - i - 1) * (cal(i + 1, i) % MOD) + cal(i + 2, i + 1) % MOD)) % MOD;
    	s2 = cal(x[i + 1], y[i + 1], sx[rp] - sx[i + 2], sy[rp] - sy[i + 2]) % MOD;
    	ans = (temp + ans) % MOD;
    	rp++;
    }
    cout << ans << endl;

	return 0;
}