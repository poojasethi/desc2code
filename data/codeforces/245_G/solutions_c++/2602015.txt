#include <cstdio>
#include <set>
#include <string>
#include <iostream>
#include <algorithm>
#include <map>
#include <vector>
#include <cstring>
using namespace std;

#define N 10000

map<string, int> ids;
map<int, string> back;
int inter[N], id;
vector<int> adj[N];
bool out[N];

int name(string& s)
{
	if (!ids.count(s))
	{
		ids[s] = id++;
		back[id-1] = s; 
	}
	return ids[s];
}

int main()
{
	int m;
	cin >> m;
	while (m--)
	{
		string a, b;
		cin >> a >> b;
		int aa = name(a);
		int bb = name(b);
		adj[aa].push_back(bb);
		adj[bb].push_back(aa);
	}
	for (int i = 0; i < id; ++i)
		sort(adj[i].begin(), adj[i].end());
	cout << id << endl;
	for (int i = 0; i < id; ++i)
	{
		int best = 0, r = 0;
		memset(out, 0, sizeof out);
		out[i] = 1;
		for (int j = 0; j < adj[i].size(); ++j)
			out[adj[i][j]] = 1;
		for (int j = 0; j < id; ++j)
		{
			if (out[j]) continue;
			int p = set_intersection(adj[i].begin(), adj[i].end(), adj[j].begin(), adj[j].end(), inter)-inter;
			if (p > best) best = p, r = 1;
			else if (p == best) ++r;
		}
		cout << back[i] << ' ' << r << endl;
	}
	return 0;
}

