#include<stdio.h>
#include<map>
#include<string.h>
#include<vector>
#include<set>
#include<string>
#include<iostream>
#include<algorithm>
using namespace std;
map<string,int> m1;
map<int,string> m2;
int n,k[11111],pos;
vector<int> it[11111];
int main(){
	while(scanf("%d",&n)!=EOF){
		pos=0;
		for(int i=0;i<n;i++){
			string s,ss;
			cin>>s>>ss;
			if(m1.count(s)==0){
				m1[s]=pos;
				m2[pos++]=s;
			}
			if(m1.count(ss)==0){
				m1[ss]=pos;
				m2[pos++]=ss;
			}
			int x=m1[s],y=m1[ss];
			it[x].push_back(y);
			it[y].push_back(x);//printf("!! i=%d\n",i);
		}
		for(int i=0;i<pos;i++)
			sort(it[i].begin(),it[i].end());
		printf("%d\n",pos);
		for(int i=0;i<pos;i++){
			int max=0,sum=0;
			cout<<m2[i];
			bool vis[11111];
			memset(vis,0,sizeof(vis));
			for(int j=0;j<it[i].size();j++)
				vis[it[i][j]]=1;
			for(int j=0;j<pos;j++){
				if(vis[j]==0&&i!=j){
					int num=set_intersection(it[i].begin(),it[i].end(),it[j].begin(),it[j].end(),k)-k;
					if(num>max){
						max=num;
						sum=1;
					}
					else if(num==max) sum++;
				}
			}
			printf(" %d\n",sum);
		}
	}
	return 0;
}

	 		   	 	  			 		 	  	  	