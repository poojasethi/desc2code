#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef pair<int, int> pii;

const int MAXN = 1000 * 1000 + 10;
int a[MAXN], b[MAXN], l[MAXN], r[MAXN], par[MAXN];
vector<pii> edges;

int find(int x)
{
	if (par[x] != x)
		par[x] = find(par[x]);
	return par[x];
}

void merge(int x, int y)
{
	x = find(x); y = find(y);
	if (x != y)
		par[x] = y;
}

int main()
{
	int n, m, ans = 0;
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> a[i] >> b[i] >> l[i] >> r[i]; a[i]--; b[i]--;
		edges.push_back(pii(r[i], i));
	}
	sort(edges.begin(), edges.end());
	reverse(edges.begin(), edges.end());
	for (int i = 0; i < m; i++)
	{
		int mn = r[i];
		for (int j = 0; j < n; j++)
			par[j] = j;
		for (int j = 0; j < m; j++)
		{
			int id = edges[j].second;
			if (l[id] > l[i])
				continue;
			if (r[id] >= l[i])
			{
				merge(a[id], b[id]);
				mn = min(mn, r[id]);
			}
			if (find(n - 1) == find(0))
				ans = max(ans, mn - l[i] + 1);
		}
	}
	if (ans)
		cout << ans << endl;
	else
		cout << "Nice work, Dima!" << endl;
	return 0;
}
