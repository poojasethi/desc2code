#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

#define pii pair<int, int>

typedef set<pii>::iterator sit;

set<pii> st;
vector<pii> v;
int main()
{
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int x, y;
		cin >> x >> y;
		v.push_back(pii(x, y));
		v.push_back(pii(x, n + 1));
	}
	v.push_back(pii(n, n + 1));
	sort(v.begin(), v.end());
	v.resize(unique(v.begin(), v.end()) - v.begin());
	int lastI = 0;
	st.insert(pii(1, 1));
	int i = 0;
	while (i < v.size())
	{
		if (st.empty())
			break;
		bool lastUpdated = lastI == (v[i].first - 1);
		lastI = v[i].first;
		int j = i;
		sit lit = st.begin();
		while (j < v.size() && v[j].first == v[i].first)
		{
			//cout << v[j].first << " " << v[j].second << endl;
			sit it = st.upper_bound(pii(v[j].second, n + 1));
			if (it != lit)
			{
				//cout << "HERE" << endl;
				pii xp = *lit;
				sit it2 = it;
				it--;
				pii x = *it;
				st.erase(lit, it2);
				if (xp.first <= v[j].second - 1)
					st.insert(pii(xp.first, v[j].second - 1));
				if (!lastUpdated)
					x.second = n;
				if (x.second > v[j].second)
					st.insert(pii(v[j].second + 1, x.second));
			}
			lit = st.upper_bound(pii(v[j].second, n + 1));
			j++;
			/*for (sit it2 = st.begin(); it2 != st.end(); it2++)
				cout << "(" << it2->first << ", " << it2->second << ") ";
			cout << endl;*/
		}
		i = j;
	}
	if (!st.empty() && st.rbegin()->second == n)
		cout << 2 * (n - 1) << endl;
	else
		cout << -1 << endl;
}
