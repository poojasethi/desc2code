#include <algorithm>
#include <iostream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>
using namespace std;
    
#define N  100010
#define ll long long
#define ALL(x)     x.begin(),x.end()
#define CLR(x,a) memset(x,a,sizeof(x))
typedef pair<int,int> PI;
const int INF=0x3fffffff;
const int MOD   =1000000007;
const double EPS=1e-7;

map<int,set<PI > > line[2];
vector<int> e[N];
bool vis[N];

void dfs(int u){
	vis[u]=true;
	for(int i=0;i<e[u].size();i++) 
		if(!vis[e[u][i]]) dfs(e[u][i]);
}

void solve(int op){
	map<int,set<PI > >::iterator i;
	set<PI >::iterator j,k;
	for(i=line[op].begin();i!=line[op].end();i++){	
		int cur=i->first;
		for(j=line[op][cur].begin();j!=line[op][cur].end();j++){
			set<PI > &next=line[op][cur+1];
			k=next.lower_bound((PI){j->first-1,0});
			if(k!=next.end()){
				if(op==0) // down to up
					e[k->second].push_back(j->second);
				else	//left to right
					e[j->second].push_back(k->second);
			}
		}
	}
}

int main(){
	int n,m,s=0,t;
	scanf("%d%d",&n,&m);
	t=m+1;
	for(int i=1;i<=m;i++){
		int x,y;
		scanf("%d%d",&x,&y);
		line[0][x].insert((PI){y,i});
		line[1][y].insert((PI){x,i});
		if(x==n || y==1) e[t].push_back(i);
		if(x==1 || y==n) e[i].push_back(s);
	}
	solve(0); 
	solve(1);
	dfs(t);
	if(vis[s]) puts("-1");
	else printf("%d\n",2*n-2);
	return 0;
}
