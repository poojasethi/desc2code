#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
#define X first
#define Y second

using namespace std;


const int N=100005;

int n, m, lx, ly, j, x[N], y[N], id[N];
vector<pair<int,int> > f,g;

bool cmp(const int i,const int j) {
	return x[i] == x[j] ? y[i] < y[j] : x[i] < x[j];
}

void ins(int &l, int r) {
	while (j < f.size() && f[j].Y <= l) ++j;
	if (l + 1 <= r - 1 && j < f.size() && f[j].X < r) 
		g.push_back(make_pair(max(f[j].X, l + 1), r - 1));
	l = r;
}

bool solve() {
	lx = 1, ly = 0;
	f.push_back(make_pair(1, 1));
	for (int k = 0; k < m; ++k) {
		int i = id[k];
		if (x[i] == lx) ins(ly, y[i]);
		else {
			ins(ly, n + 1), ly = 0;

			if (g.empty()) return 0;
			if (x[i] > lx + 1) {
				f.clear();
				f.push_back(make_pair(g[0].X, n));
			} else 
				f = g;
			
			g.clear();
			j = 0, lx = x[i], ins(ly, y[i]);
		}
	}
	ins(ly,n+1); 
	if (g.empty()) return 0;
	return lx == n ? g.back().Y == n : 1;
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < m; ++i) {
		cin >> x[i] >> y[i];
		id[i] = i; 
	}
	sort(id, id + m, cmp);
	if (solve()) {
		cout << 2 * n - 2 << endl;
	} else {
		cout << -1 << endl;
	}
	return 0;
}


  		    					 		 	 	 		   	  	