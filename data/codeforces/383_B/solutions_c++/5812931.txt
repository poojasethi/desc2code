#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <cstring>
#define mp make_pair
using namespace std;

const int MX = 111111;
const int INF = 1000000001;

int n, m;
pair<int, int> a[MX];

class intervalArray{
    private:
    int a[2 * MX];
    int size;
    public:
    void clear(){
	size = 0;
    }
    void insert(int st, int ed){
	if (st > ed) return;
	a[size++] = st;
	a[size++] = ed;
    }
    int findFirst(int st){
	int posi = lower_bound(a, a + size, st) - a;
	if (posi == size) return INF;
	return (posi & 1) ? st : a[posi];
    }
};

intervalArray *P, *Q;

int main(){
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++)
	scanf("%d%d", &a[i].first, &a[i].second);
    sort(a, a + m);

    P = new(intervalArray);
    Q = new(intervalArray);
    P->insert(1, m && a[0].first == 1 ? 1 : n);
    Q->clear();
    for (int i = 0, j; i < m;){
	for (j = i; j < m && a[j].first == a[i].first; j++)
	    Q->insert(P->findFirst(i == j ? 1 : a[j - 1].second + 1), a[j].second - 1);
	Q->insert(P->findFirst(a[j - 1].second + 1), n);
	swap(P, Q);
	Q->clear();
	i = j;
	if ((i != m && a[i].first - a[i - 1].first > 1) || (i == m && a[i - 1].first != n)){
	    int posi = P->findFirst(1);
	    P->clear();
	    P->insert(posi, n);
	}
    }

    printf("%d\n", P->findFirst(n) == INF ? -1 : 2 * n - 2);
    return 0;
}
