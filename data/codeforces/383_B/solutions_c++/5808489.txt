#include <iostream>
#include <algorithm>
#include <map>
#include <vector>

using namespace std;
const int MAXN = 100100;

int N, M; // # of rs, size of board
pair <int, int> r[MAXN];

int lx, cr;
vector <pair <int, int> > p, np;

int main()
{
	cin >> M >> N;
	for (int i = 0; i < N; i++)
		cin >> r[i].first >> r[i].second;
	
	sort (r, r + N);
	
	p.push_back (make_pair (1, 1));
	lx = cr = 0;
	
	while (cr < N)
	{
		if (r[cr].first != lx + 1 && p.size() > 0)
		{
			int lo = p[0].first;
			p.clear();
			p.push_back (make_pair (lo, M));
		}
		
		int nr = cr;
		while (nr < N && r[nr].first == r[cr].first)
			nr++;
		
		np.clear();
		int last = 1, cp = 0, end;
		for (int i = cr; i <= nr; i++)
		{
			end = ((i < nr) ? r[i].second : M + 1);
			while (cp < p.size() && p[cp].second < last)
				cp++;
			if (cp < p.size() && max (last, p[cp].first) < end)
				np.push_back (make_pair (max (last, p[cp].first), end - 1));
			last = r[i].second + 1;
		}
		
		p.clear();
		for (int i = 0; i < np.size(); i++)
			p.push_back (np[i]);
		
		lx = r[cr].first;
		cr = nr;
	}
	
	if ((lx < M && p.size()) || p[p.size()-1].second == M)
		cout << 2 * M - 2  << "\n";
	else
		cout << "-1\n";
	return 0;
}
