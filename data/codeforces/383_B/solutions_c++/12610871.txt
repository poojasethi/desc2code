#include<iostream>
#include<algorithm>
#include<vector>
#include<cstdio>
using namespace std;
const int MaxN = 100000 + 10;
struct Pos
{
	int x, y;
	bool operator < (const Pos &b) const {return x < b.x || (x == b.x && y < b.y);}
}pos[MaxN];
int n, m;

vector<Pos>v, nv;
int nowx, st, ed, p, q;

int main()
{
	scanf("%d%d", &n ,&m);
	for(int i = 1; i <= m; ++i) scanf("%d%d", &pos[i].x, &pos[i].y);
	sort(pos + 1, pos + m + 1);
	v.push_back((Pos){1, 1});
	for(int i = 1; i <= m; ++i)
	{
		if(v.size() && pos[i].x != nowx + 1)
		{
			st = v[0].x;
			v.clear();
			v.push_back((Pos){st, n});
		}
		for(p = i; p <= m && pos[p].x == pos[i].x; ++p);
		--p;st = 1;q = 0;
		nv.clear();st = 1;
		for(int j = i; j <= p; ++j)
		{
			ed = pos[j].y - 1;
			if(st <= ed)
			{
				for(; q < v.size() && v[q].y < st; ++q);
				if(q < v.size() && v[q].x <= ed) nv.push_back((Pos){max(st, v[q].x), ed});
			}
			st = ed + 2;
		}
		
		ed = n;
		if(st <= ed)
		{
			for(; q < v.size() && v[q].y < st; ++q);
			if(q < v.size() && v[q].x <= ed) nv.push_back((Pos){max(st, v[q].x), ed});
		}
		
		i = p;v = nv;nowx = pos[i].x;
	}
	int aa = v.size();
	if(v.size() && (nowx != n || v[v.size() - 1].y == n)) printf("%d\n", n * 2 - 2);
	else printf("-1\n");
	return 0;
}
