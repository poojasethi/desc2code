#include <stdio.h>
#include <algorithm>
#define MAX 100010
#define INF 1500000000

struct data{
	int x, y;
};
data b[MAX], pre[MAX], now[MAX];
int n, m, cnt, c;

bool cmp(const data &a, const data &b){
	if (a.x==b.x) return a.y<b.y;
	return a.x<b.x;
}

int main(void){
	int i, j, k;
	int left, f, l, mid, ret;
	scanf("%d %d", &n, &m);
	for (i=1;i<=m;i++){
		scanf("%d %d", &b[i].x, &b[i].y);
	}
	std::sort(b+1, b+m+1, cmp);
	cnt=1;
	pre[cnt].x=1, pre[cnt].y=1;
	for (i=1;i<=m;i++){
		if (b[i].x != b[i-1].x+1){
			cnt=1;
			pre[1].y=n;
		}
		for (j=i+1;j<=m;j++){
			if (b[j].x!=b[i].x) break;
		}
		j--;
		c=0;
		left=1;
		for (k=i;k<=j;k++){
			if (b[k].y-1>=left){
				now[++c].x=left;
				now[c].y=b[k].y-1;
			}
			left=b[k].y+1;
		}
		if (left<=n){
			now[++c].x=left;
			now[c].y=n;
		}

		for (k=1;k<=c;k++){
			f=1, l=cnt, ret=-1;
			for (;;){
				mid=(f+l)/2;
				if (pre[mid].y>=now[k].x){
					ret=pre[mid].x;
					l=mid-1;
				}else f=mid+1;
				if (f>l) break;
			}
			if (ret==-1 || ret>now[k].y) now[k].x=now[k].y=INF;
			else now[k].x=(ret>now[k].x) ? ret : now[k].x;
		}

		cnt=0;
		for (k=1;k<=c;k++){
			if (now[k].x<INF && now[k].y<INF) pre[++cnt]=now[k];
		}
		if (cnt==0) {
			printf("-1\n");
			return false;
		}
		i=j;
	}
	if (b[m].x!=n || pre[cnt].y==n) printf("%d\n", 2*n-2);
	else printf("-1\n");
	return false;
}