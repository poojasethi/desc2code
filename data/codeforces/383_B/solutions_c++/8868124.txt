#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

int n;

vector<pair<int,int> > v;

void fusiona(vector<int> &b)
{
  int iv=0;
  int ib=0;
  vector<pair<int,int> > nextv;
  while (iv<int(v.size()) and ib<int(b.size())) {
    if (v[iv].first<b[ib]) {
      nextv.push_back(pair<int,int> (v[iv].first,b[ib]-1));
      while (iv+1<int(v.size()) and v[iv+1].first<=b[ib]) iv++;
      if (b[ib]<v[iv].second) {
	v[iv].first=b[ib]+1;
      } else iv++;
      ib++;
    } else if (v[iv].first==b[ib]) {
      if (v[iv].second==b[ib]) iv++;
      else v[iv].first++;
    } else ib++;
  }
  if (iv<int(v.size()))
    nextv.push_back(pair<int,int> (v[iv].first,n));
  v=nextv;
}

int main()
{
  int k;
  cin>>n>>k;
  map<int,vector<int> > mapa;
  for (int d=0;d<k;d++) {
    int i,j;
    cin>>i>>j;
    mapa[i].push_back(j);
  }
  v.push_back(pair<int,int> (1,1));
  vector<int> vacio;
  map<int,vector<int> >::iterator it=mapa.begin();
  int i=0;
  while (it!=mapa.end()) {
    sort(it->second.begin(),it->second.end());
    if (it->first==i+1) {
      fusiona(it->second);
      i++;
    } else {
      fusiona(vacio);
      fusiona(it->second);
      i=it->first;
    }
    it++;
  }
  if (i!=n) fusiona(vacio);
  if (int(v.size())!=0 and v.back().second==n) cout<<2*(n-1)<<endl;
  else cout<<-1<<endl;
}
