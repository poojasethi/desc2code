#include <cstdio>
#include <algorithm>
using namespace std;

struct aa {
	int x, y;
} a[110000];
int n, m, i, j, last, len, q, h, next[110000], l[110000], r[110000];

bool cmp(aa x, aa y) {
	if (x.x + x.y != y.x + y.y)	return x.x + x.y > y.x + y.y;
	else	return x.y < y.y;
}

void Go(int t) {
	if (last > n + 1 && t < n + 1) {
		Go(n + 1);
		Go(t);
		return ;
	}
	int prep = 0;
	for (int i = next[0]; i; i = next[i]) {
		if (last > n + 1) {
			if (last - l[i] == n)	l[i] -= last - t;
			if (r[i] != n)	r[i] -= last - t;
		}else	r[i] -= last - t;
		if (l[i] > r[i])	next[prep] = next[i];
		else	prep = i;
	}
	last = t;
}

void Merge() {
	for (int i = next[0]; next[i]; ) {
		if (l[next[i]] == r[i] + 1)	r[i] = r[next[i]], next[i] = next[next[i]];
		else	i = next[i];
	}
}

int main() {
	scanf("%d%d", &n, &m);
	for (i = 1; i <= m; i++)
		scanf("%d%d", &a[i].x, &a[i].y);
	sort(a + 1, a + m + 1, cmp);

	last = 2 * n;
	for (q = 1; q <= m; q = h + 1) {
		Go(a[q].x + a[q].y);
		for (h = q; h < m && a[h + 1].x + a[h + 1].y == a[q].x + a[q].y; h++);
		j = 0;
		for (i = q; i <= h; i++) {
			while (next[j] && a[i].y >= l[next[j]])	j = next[j];
			if (a[i].y > r[j]) {
				len++;
				l[len] = r[len] = a[i].y;
				next[len] = next[j];
				next[j] = len;
			}
		}
		Merge();
	}

	Go(2);
	if (next[0])	printf("-1\n");
	else	printf("%d\n", 2 * (n - 1));
}
