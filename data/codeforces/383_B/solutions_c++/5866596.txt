#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
#define x first
#define y second

int main()
{
	int n, m;
	cin >> n >> m;

	pair <int, int> vol[100005];
	for (int i = 0; i < m; i++)
		cin >> vol[i].x >> vol[i].y;
	
	sort (vol, vol + m);

	vector <pair <int, int> > range;
	range.push_back(make_pair(1, 1));
	
	int prevx = 0, curvol = 0;
	while (curvol < m)
	{
		if (vol[curvol].x != prevx + 1 && range.size() > 0) //the row is empty
		{
			int start = range[0].x;
			range.clear();
			range.push_back (make_pair (start, n));
		}
		
		int nextvol = curvol;
		while (nextvol < m && vol[nextvol].x == vol[curvol].x) //find first volcano on next row
			nextvol++;
		
		vector<pair<int, int> > nrange;
		int start = 1, idx = 0;
		for (int i = curvol; i <= nextvol; i++)
		{
			int end = (i < nextvol) ? (vol[i].y-1) : n; //find next ending range
			while (idx < range.size() && range[idx].y < start) //find next range that is after start
				idx++;
			if (idx < range.size() && max(start, range[idx].x) <= end) //find new range
				nrange.push_back(make_pair(max(start, range[idx].x), end));
			start = end + 2;
		}
		
		range = nrange;
		prevx = vol[curvol].x;
		curvol = nextvol;
	}
	
	if (range.size() > 0 && (prevx < n || range[range.size()-1].y == n))
		cout << 2*n - 2  << "\n";
	else
		cout << "-1\n";

	return 0;
}