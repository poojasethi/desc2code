#include<cstdio>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cstring>
using namespace std;

typedef __int64 ll;
const int Max = 1000000 + 5;
const int MAXM = 1<<22;

struct NODE{
    int L ,R;
    int Id;
}a[Max];
ll sum[Max], ans[Max];
int n, m, L, R;
ll k, cnt[MAXM], ant;
bool cmp(NODE x, NODE y){
    if(x.L/700==y.L/700) return x.R<y.R;
    return x.L<y.L;
}
void Dec(ll s) {cnt[s]--;ant-=cnt[s^k];}
void Inc(ll s) {ant+=cnt[s^k];cnt[s]++;}

int main(){
    scanf("%d%d%I64d", &n, &m, &k);
    ll data;
    for(int i=1; i<=n; i++){
        scanf("%I64d", &sum[i]);
        sum[i]^=sum[i-1];
    }
    for(int i=1; i<=m; i++){
        scanf("%d%d", &a[i].L, &a[i].R);
        a[i].Id = i;
        a[i].L--;
    }
    sort(a+1, a+m+1, cmp);
    L=0, R=0, cnt[0]=1, ant=0;
    for(int i=1; i<=m; i++){
        while(R<a[i].R) {Inc(sum[++R]);}
        while(R>a[i].R) {Dec(sum[R--]);}
        while(L<a[i].L) {Dec(sum[L++]);}
        while(L>a[i].L) {Inc(sum[--L]);}
        ans[a[i].Id] = ant;
    }
    for(int i=1; i<=m; i++) printf("%I64d\n", ans[i]);
    return 0;
}
		  	 			 	      	  				 	 	  	