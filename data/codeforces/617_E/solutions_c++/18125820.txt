/*input
6 2 3
1 2 1 1 0 3
1 6
3 5
*/
#include <bits/stdc++.h>
using namespace std;
const int N=2e6+10;

int n,m;
long long  ans[N],res=0LL;
int a[N];
long long cnt[N];
int X,k;
long long sumxor[N];
struct qq
{
	int L,R,ID;
} query [N];

bool cmp(qq A,qq B){
	if(A.L/X!=B.L/X) return A.L < B.L;
	return A.R < B.R;
}

void _add(int x){
	if(x<0) return;
	res+=cnt[sumxor[x]^k];
	cnt[sumxor[x]]++;
}
void _remove(int x){
	if(x<0) return;
	cnt[sumxor[x]]--;
	res-=cnt[sumxor[x]^k];
}
int main(){
	scanf("%d%d%d",&n,&m,&k);
	
	X=sqrt(n);
	sumxor[0]=0;
	for(int i=1;i<=n;i++) {
		scanf("%d",&a[i]);
		sumxor[i]=sumxor[i-1]^a[i];
	}
	for(int i=1;i<=m;i++) {
		scanf("%d%d",&query[i].L,&query[i].R);
		query[i].ID=i;
		query[i].L--;
	}
	sort(query+1,query+m+1,cmp);
	_add(0);
	int curL=0, curR=0;
	for(int i=1;i<=m;i++){
		while(curL<query[i].L) _remove(curL++);
		while(curR<query[i].R) _add(++curR);
		while(curR>query[i].R) _remove(curR--);
		while(curL>query[i].L) _add(--curL);
	//cout<<res<<endl;
		ans[ query[i].ID ]=res;
	}
	for(int i=1 ; i<=m ; i++) printf("%I64d\n", ans[i]);
	return 0;
}