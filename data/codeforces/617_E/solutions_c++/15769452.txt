#include <cstdio>
#include <cmath>
#include <algorithm>

using namespace std;

typedef long long LL;

const int maxn = 100005, maxd = 1 << 20;

int n, m, k, size, num[maxn], cnt[maxd];
LL ans[maxn];

struct _data {
	int l, r, id;
} c[maxn];

bool cmp(_data a, _data b) {
	return a.l / size == b.l / size ? a.r < b.r : a.l / size < b.l / size;
}

int main() {
	scanf("%d%d%d", &n, &m, &k);
	size = (int)sqrt(n);

	for(int i = 1; i <= n; i++) scanf("%d", &num[i]), num[i] ^= num[i - 1];
	for(int i = 1; i <= m; i++) scanf("%d%d", &c[i].l, &c[i].r), c[i].id = i;

	sort(c + 1, c + 1 + m, cmp);
	
	int l = 1, r = 0; cnt[num[0]]++;
	LL now = 0;
	for(int i = 1; i <= m; i++) {
		while(l < c[i].l) {
			cnt[num[l - 1]]--; now -= cnt[num[l - 1] ^ k];
			l++;
		}
		while(l > c[i].l) {
			l--;
			now += cnt[num[l - 1] ^ k]; cnt[num[l - 1]]++;
		}
		while(r < c[i].r) {
			r++;
			now += cnt[num[r] ^ k]; cnt[num[r]]++;
		}
		while(r > c[i].r) {
			cnt[num[r]]--; now -= cnt[num[r] ^ k];
			r--;
		}
		ans[c[i].id] = now;
	}
	
	for(int i = 1; i <= m; i++) printf("%I64d\n", ans[i]);
	return 0;
}

