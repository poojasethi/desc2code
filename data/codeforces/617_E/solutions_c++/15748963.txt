#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;
const int N = 100005, sn = sqrt(N) + 1;
struct query {
	int L, R, id;
	inline bool operator < (const query& q) const {
		return L/sn < q.L/sn || (L/sn == q.L/sn && R < q.R);
	}
};

int n, m, k, a[N];
int freq[1 << 20];
query q[N];
long long total = 0, ans[N];

void insert(int x) {
	total += freq[x ^ k];
	++freq[x];
}

void erase(int x) {
	--freq[x];
	total -= freq[x ^ k];
}

int main() {
	scanf("%d%d%d", &n, &m, &k);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", a + i);
		a[i] ^= a[i - 1];
	}
	for (int i = 0; i < m; ++i) {
		int L, R; scanf("%d%d", &L, &R);
		q[i].L = L;
		q[i].R = R;
		q[i].id = i;
	}
	sort(q, q + m);
	int L = 1, R = 0;
	for (int i = 0; i < m; ++i) {
		q[i].L--;
		while (R < q[i].R) insert(a[++R]);
		while (L > q[i].L) insert(a[--L]);
		while (L < q[i].L) erase(a[L++]);
		while (R > q[i].R) erase(a[R--]);
		// cout << L << ' ' << R << ' ' << total << endl;
		ans[q[i].id] = total;
	}
	for (int i = 0; i < m; ++i) printf("%I64d\n", ans[i]);
}