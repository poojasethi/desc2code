#include<cstdio>
#include<algorithm>
using namespace std;
inline void read(int &x){char op;while(((op=getchar())<'0')||(op>'9'));x=op-'0';while(((op=getchar())>='0')&&(op<='9'))(x*=10)+=op-'0';} 
const int N = 100005, S = 4000005, size = 325;
struct ques{ int l, r, id; }q[N];
int n, m, k, a[N], sum[S];
long long Ans[N];
bool cmp(ques a,ques b) {
	if((a.l/size) == (b.l/size)) return a.r < b.r;
	else return (a.l/size) < (b.l/size);
}	

int main() {
	read(n);read(m);read(k);
	for(int i=1;i<=4000000;i++) sum[i] = 0;
	a[0] = 0;
	for(int i=1;i<=n;a[i]^=a[i-1], i++) read(a[i]);
	for(int i=1;i<=m;q[i].id=i, i++) read(q[i].l), read(q[i].r);
	sort(q+1,q+1+m,cmp);
	int L = 1, R = 0;
	long long res = 0;
	for(int i=1;i<=m;i++) {
		while(L > q[i].l) { L--; sum[a[L]]++; res += sum[k^a[L-1]]; }
		while(L < q[i].l) { res -= sum[k^a[L-1]]; sum[a[L]]--; L++; }
		while(R > q[i].r) { sum[a[R]]--; res -= sum[k^a[R]]; if((a[L-1]^a[R]) == k) res--; R--; }
		while(R < q[i].r) { R++; res += sum[a[R]^k]; if((a[L-1]^a[R]) == k) res++; sum[a[R]]++; }
		Ans[q[i].id] = res;
	}
	for(int i=1;i<=m;i++) printf("%I64d\n",Ans[i]);
	return 0;
}
