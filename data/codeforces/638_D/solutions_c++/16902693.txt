#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

const int N=105;

int g[N][N][N];
int o[N][N][N];
int dx[]={1,0,0};
int dy[]={0,1,0};
int dz[]={0,0,1};
bool check(int x,int y,int z) {
    for (int d=0;d<3;d++) {
        int px=x-dx[d];
        int py=y-dy[d];
        int pz=z-dz[d];
        if (!g[px][py][pz]) continue;
        for (int dd=0;dd<3;dd++) {
            int nx=x+dx[dd];
            int ny=y+dy[dd];
            int nz=z+dz[dd];
            if (!g[nx][ny][nz]) continue;
            if (d==dd) return true;
            int mx=px+dx[dd];
            int my=py+dy[dd];
            int mz=pz+dz[dd];
            if (!g[mx][my][mz]) return true;
        }
    }
    return false;
}
void solve(int n,int m,int p) {
    char s[105];
    for (int i=1;i<=n;i++) {
        for (int j=1;j<=m;j++) {
            scanf("%s",s+1);
            for (int k=1;k<=p;k++) {
                // puts(s+1);
                g[i][j][k]=(s[k]-'0');
            }
        }
    }
    int ret=0;
    for (int i=1;i<=n;i++) {
        for (int j=1;j<=m;j++) {
            for (int k=1;k<=p;k++) {
                if (g[i][j][k]) {
                    ret+=check(i,j,k);
                }
            }
        }
    }
    printf("%d\n",ret);
}



int main () {
    // freopen("in","r",stdin);
    int n,m,p;
    while (scanf("%d %d %d",&n,&m,&p)!=EOF)
        solve(n,m,p);
    return 0;
}

