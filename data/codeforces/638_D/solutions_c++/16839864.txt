#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <cmath>
#include <vector>
#include <cstdlib>
#include <utility>
#include <memory.h>
#include <cassert>
#include <iterator>
#include <bitset>
#include <iomanip>
#include <complex>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <set>
#include <map>
 
using namespace std;
 
#define pb push_back
#define mp make_pair
#define F first
#define S second

using namespace std;

const int N = 111;

int n, m, k;
int f[N][N][N];
int g[N][N][N];
char s[N][N][N];
bool used[N][N][N];

void go(int x, int y, int z, int xx, int yy, int zz) {
	if (x < 1 || y < 1 || z < 1) {
		return;
	}
	if (s[x][y][z] == '0') {
		return;
	}
	for (int i = x - 1; i <= xx + 1; i++) {
		for (int j = y - 1; j <= yy + 1; j++) {
			for (int u = z - 1; u <= zz + 1; u++) {
				f[i][j][u] = 0;
				g[i][j][u] = 0;
			}
		}
	}
	f[x][y][z] = 1;
	for (int i = x; i <= xx; i++) {
		for (int j = y; j <= yy; j++) {
			for (int u = z; u <= zz; u++) {
				if (s[i][j][u] == '0') continue;
				f[i][j][u] = f[i][j][u] + f[i - 1][j][u] + f[i][j - 1][u] + f[i][j][u - 1];
			}
		}
	}
	if (f[xx][yy][zz] != 1) return;
	g[xx][yy][zz] = 1;
	for (int i = xx; i >= x; --i) {
		for (int j = yy; j >= y; --j) {
			for (int u = zz; u >= z; --u) {
				if (s[i][j][u] == '0') continue;
				g[i][j][u] = g[i][j][u] + g[i + 1][j][u] + g[i][j + 1][u] + g[i][j][u + 1];
			}
		}
	}
	for (int i = x; i <= xx; i++) {
		for (int j = y; j <= yy; j++) {
			for (int u = z; u <= zz; u++) {
				if (i == x && j == y && u == z) continue;
				if (i == xx && j == yy && u == zz) continue;
				if (min(f[i][j][u], g[i][j][u]) == 1) {
					used[i][j][u] = true;
				}
			}
		}
	}
}

void can(int px, int py, int pz) {
	if (s[px][py][pz] == '0') return;
	for (int dx = 0; dx >= -2; --dx) {
		for (int dy = 0; dy >= -2; --dy) {
			for (int dz = 0; dz >= -2; --dz) {
				if (dx == 0 && dy == 0 && dz == 0) {
					continue;
				}
				go(px + dx, py + dy, pz + dz, px, py, pz);
			}
		}
	}
}

int main() {
	scanf("%d%d%d\n", &n, &m, &k);
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			gets(s[i][j] + 1);
		}
		if (i < n) {
			scanf("\n");
		}
	}
	int ans = 0;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			for (int u = 1; u <= k; u++) {
				can(i, j, u);
			}
		}
	}
	ans = 0;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			for (int u = 1; u <= k; u++) {
				if (used[i][j][u]) {
					++ans;
				}
			}
		}
	}
	printf("%d\n", ans);
	return 0;
}