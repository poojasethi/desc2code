#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;

bool p[ 102 ][ 102 ][ 102 ];

int n,m,k;
char tmp;
int i,j,l;

int dir[ 3 ][ 3 ] = { { 0, 0, 1 }, { 0, 1, 0 }, { 1, 0, 0 } };

int main()
{
    scanf("%d %d %d", &n, &m, &k );

    for ( i=1; i<=n; i++ )
    {
        scanf("\n");
        for (j=1; j<=m; j++ ){

            for ( l=1; l<=k; l++ )
            {
                scanf("%c", &tmp );
                p[ i ][ j ][ l ] = (tmp=='1');
            }
            scanf("\n");
        }
    }

    int fx,fy,fz;
    int tx,ty,tz;
    int rx,ry,rz;
    int d, d2, answ = 0;

    for ( i=1; i<=n; i++ )
        for ( j=1; j<=m; j++ )
            for ( l=1; l<=k; l++ )
            {
                bool next=false;
                if ( p[ i ][ j ][ l ] )
                    for ( d=0; d<3 && !next; d++ )
                        for ( d2=0; d2<3 && !next; d2++ )
                        {
                            fx = i - dir[ d ][ 0 ];
                            fy = j - dir[ d ][ 1 ];
                            fz = l - dir[ d ][ 2 ];

                            tx = i + dir[ d2 ][ 0 ];
                            ty = j + dir[ d2 ][ 1 ];
                            tz = l + dir[ d2 ][ 2 ];

                            if ( p[ fx ][ fy ][ fz ] && p[ tx ][ ty ][ tz ] )
                            {
                                if ( d == d2 )
                                    answ++, next=true;
                                else
                                {
                                    rx = tx - dir[ d ][ 0 ];
                                    ry = ty - dir[ d ][ 1 ];
                                    rz = tz - dir[ d ][ 2 ];

                                    if ( !p[ rx ][ ry ][ rz ] )
                                        answ++, next=true;
                                }
                            }
                        }
            }

    printf("%d\n", answ );

    return 0;
}

