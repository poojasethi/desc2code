#include <iostream>
#include <cstdio>
#include <iomanip>
#include <algorithm>
#include <vector>
#include <cstring>
#include <set>
#include <map>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

const int maxn = 2 * 100100;
const int INF = 1E9;
const int base = 1E9 + 7;

bool work[111][111][111], crit[111][111][111];
int n, m, l;
bool val;
char s[111];

inline void check( int i, int j, int k, int di, int dj, int dk ) {
    if ( di == 2 ) {
        crit[i + 1][j][k] |= work[i + 1][j][k];
    }
    else if ( dj == 2 ) {
        crit[i][j + 1][k] |= work[i][j + 1][k];
    }
    else if ( dk == 2 ) {
        crit[i][j][k + 1] |= work[i][j][k + 1];
    }
    else if ( di == 1 && dj == 1 ) {
        if ( work[i + 1][j][k] ^ work[i][j + 1][k] )
            if ( work[i + 1][j][k] )
                crit[i + 1][j][k] = true;
            else
                crit[i][j + 1][k] = true;
    }
    else if ( di == 1 && dk == 1 ) {
        if ( work[i + 1][j][k] ^ work[i][j][k + 1] )
            if ( work[i + 1][j][k] )
                crit[i + 1][j][k] = true;
            else
                crit[i][j][k + 1] = true;
    }
    else if ( dj == 1 && dk == 1 ) {
        if ( work[i][j + 1][k] ^ work[i][j][k + 1] )
            if ( work[i][j + 1][k] )
                crit[i][j + 1][k] = true;
            else
                crit[i][j][k + 1] = true;
    }
    else {
        printf( "What the hell??\n" );
        exit(1);
    }
}

int solve() {
    scanf( "%d %d %d\n", &n, &m, &l );
    for ( int i = 0; i < n; i++ ) {
        for ( int j = 0; j < m; j++ ) {
            gets(s);
            for ( int k = 0; k < l; k++ )
                work[i][j][k] = (s[k] == '1');
        }
        if ( i != n - 1 )
            gets(s);
    }

    for ( int i = 0; i < n; i++ )
        for ( int j = 0; j < m; j++ )
            for ( int k = 0; k < l; k++ ) {
                if ( !work[i][j][k] ) continue;
                for ( int di = 0; di <= 2; di++ )
                    for ( int dj = 0; di + dj <= 2; dj++ )
                        for ( int dk = 0; di + dj + dk <= 2; dk++ )
                            if ( (di + dj + dk == 2) && work[i + di][j + dj][k + dk] )
                                check(i, j, k, di, dj, dk);
            }

    int ans = 0;
    for ( int i = 0; i < n; i++ )
        for ( int j = 0; j < m; j++ )
            for ( int k = 0; k < l; k++ )
                ans += crit[i][j][k];
    printf( "%d\n", ans );
}

int main() {
//    freopen( "input.txt", "r", stdin );
//    freopen( "output.txt", "w", stdout );
    ios_base::sync_with_stdio(0);
    solve();
    return 0;
}
