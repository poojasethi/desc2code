/*#include <iostream>
#include <cstdio>
#include <queue>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#define maxn 200000
using namespace std;
int n,m,sum,Q;
struct kk{
int grade,can;
bool bo;
bool  operator <(const kk&A) const{return grade>A.grade; }
}a[maxn];

priority_queue <kk> dui1;
priority_queue <kk> dui2;

bool cmp1(kk A,kk B){ return A.grade>B.grade; }
bool cmp2(kk A,kk B){ return A.grade<B.grade; }
bool cmp3(kk A,kk B){ return A.can<B.can; }
*/
/*void doit(){
int aim=a[m].grade;
Q=n-m+1;
int sum=0,ans=0;
sort(a+1,a+n+1,cmp3);
for (int i=1;i<=a[Q].grade-2;i++)
{
    a[i].bo=1;
    if ((a[i].grade==aim-1)or(a[i].grade==aim))
      sum++;
    ans+=a[i].can;
}
if (sum) 
  {
    printf("%d\n",ans);
    return;
  }

/*Q=n-m+1;  
sort(a+1,a+n+1,cmp2);
int end=n+1,st=0;
for (int i=Q+1;i<=n;i++)
  if (a[i].grade!=a[Q].grade)
        {
            end=i;
            break;
        }
for (int i=Q-1;i>=1;i--)
  if (a[i].grade<a[Q].grade-1)
    {
        st=i;
        break;
    }
}*/

/*int main(){
    scanf("%d%d",&n,&m);
    for (int i=1;i<=n;i++)
      scanf("%d%d",&a[i].grade,&a[i].can);
    sort(a+1,a+1+n,cmp1);
    bool bo=0;
    for (int i=1;i<=m;i++)
        if (a[i].grade>n)
            {
                bo=1;
                break;
            }
    if (bo==1)  {printf("-1"); return 0;}
    doit();
    return 0;
}*/




#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const long long inf=1e15;
struct node{
    int p,e;
}per[200010];
int n,k,ks;
long long ans;
bool bo[200010];

bool cmp1(node a,node b){
    return a.p>b.p;
}

bool cmp2(node a,node b){
    return a.e<b.e;
}

long long check(int p){
    long long ans=0;
    memset(bo,0,sizeof(bo));
    int cnt1=0,cnt2=0;
    for (int i=1;i<=n;i++)
        if (per[i].p>=p-1) cnt1++;
    cnt1-=k-1;
    for (int i=1;i<=n&&cnt2<cnt1;i++){
        if (per[i].p==p||per[i].p==p-1){
            ans+=per[i].e;
            cnt2++;
            bo[i]=1;
        }
    }
    if (p==ks)
    if (cnt2<cnt1) return 0;
    //if (cnt2!=cnt1) return 1ll*2147483647*5000;
    for (int i=1;i<=n&&cnt2<p;i++){
        if (!bo[i]){
            ans+=per[i].e;
            cnt2++;
        }
    }
    return ans;
}

int main(){
    scanf("%d%d",&n,&k);
    for (int i=1;i<=n;i++)
        scanf("%d%d",&per[i].p,&per[i].e);
    sort(per+1,per+1+n,cmp1);
    ks=per[k].p;
    sort(per+1,per+1+n,cmp2);
    ans=inf;
    for (int i=ks;i<=ks+2;i++){
        if (i>n) break;
        ans=min(ans,check(i));
    }
    if (ans==inf) ans=-1;
    printf("%I64d\n",ans);
    return 0;
}