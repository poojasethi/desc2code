#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define X first
#define Y second
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define FILL(a,x) memset(a,x,sizeof(a))
#define	foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define	mp make_pair
#define	pb push_back

inline int max(int a,int b){return a<b?b:a;}
inline int min(int a,int b){return a>b?b:a;}
inline ll max(ll a,ll b){return a<b?b:a;}
inline ll min(ll a,ll b){return a>b?b:a;}
const int mod = 1e9+7;
const int N = 1e6+10;
const ll INF = 1e18;

//#define DEBUG

#ifdef DEBUG
#define dprintf(fmt,...) fprintf(stderr,fmt,__VA_ARGS__)
#else
#define dprintf(fmt,...)
#endif

pii arr[N];
int a[N],n,k;
char s[2000];
ll ans=INF;
vector<ll> p,q;
void calc(int zz){
  p.clear();q.clear();
  int nd=zz,s=0;

  REP(i,n){
    if(arr[i].X>nd||arr[i].X<nd-1) q.pb(arr[i].Y); else p.pb(arr[i].Y);
    if(arr[i].X<nd-1)s++;
  }
//  cout<<1<<endl;
  sort(p.begin(),p.end()); sort(q.begin(),q.end());

  REP(i,p.size()) if(i!=0)p[i]+=p[i-1];
  REP(i,q.size()) if(i!=0)q[i]+=q[i-1];
  if(q.size()>=nd){
    ll x=q[nd-1];
    if(s>=k){
      ans=min(ans,x);
    }
  }
//  printf("%d %d %d\n",nd,s,k);
  REP(i,p.size()){
    if(q.size()<nd-i-1) continue;
    ll x=p[i];
    if(nd-i-2>=0) x+=q[nd-i-2];
    if(s+i+1>=k) ans=min(ans,x);
  }
}
int main(){
  scanf("%d%d",&n,&k);
  k--;
  if(k==n){
    printf("0\n"); exit(0);
  }
  REP(i,n){
    scanf("%d%d",&arr[i].X,&arr[i].Y); arr[i].X*=-1; arr[i].Y*=-1;
  }
  sort(arr,arr+n);
  REP(i,n) {arr[i].X*=-1, arr[i].Y*=-1;a[i]=arr[i].Y;}
  sort(a,a+n);
  if(arr[k].X>n){
    printf("-1\n"); return 0;
  }
//  cout<<1<<endl;
  if(arr[k].X==n){
    ll x=0; REP(i,n) x+=arr[i].Y;
    printf("%lld\n",x); return 0;
  }
  int pp=arr[k].X;
  k=n-k;
  if(pp+2<=n){
    int z=pp+2;
    ll sum=0;
    REP(i,pp+2) sum+=a[i];
    ans=min(ans,sum);
  }
  calc(pp); calc(pp+1);
//  assert(ans!=INF);
  printf("%lld\n",ans);
  return 0;
}
