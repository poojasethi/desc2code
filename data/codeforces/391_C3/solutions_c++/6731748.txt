#include<algorithm>
#include<iostream>
#include<cstring>
#include<cstdlib>
#include<vector>
#include<cstdio>
#include<cmath>
using namespace std;
int getint(){
    int sym=1;
    int res=0; char ch;
    while(!isdigit(ch=getchar())) if(ch=='-') sym=-1;
    res=ch-'0';
    while(isdigit(ch=getchar())) res=res*10+ch-'0';
    return sym*res;
}

const int maxn=200010;
pair<int,int> a[maxn];
int n,k;

void init(){
    n=getint(),k=getint(); k=n-k+1;
    for(int i=1;i<=n;++i)
        a[i].first=getint(),a[i].second=getint();
    sort(a+1,a+n+1);
}

vector<int> w;
long long calc(int sce){
    int l=lower_bound(a+1,a+n+1,make_pair(sce-1,0))-a;
    int r=lower_bound(a+1,a+n+1,make_pair(sce+1,0))-a-1;
    int must=k-l+1; if(must>r-l+1 || sce>n || sce<must) return ~0uLL>>1;

    long long ans=0; w.clear();
    for(int i=l;i<=r;++i) w.push_back(a[i].second);
    sort(w.begin(),w.end(),greater<int>());
    for(int i=1;i<=must;++i,w.pop_back()) ans+=w.back(),--sce;

    for(int i=1;i<=l-1;++i) w.push_back(a[i].second);
    for(int i=r+1;i<=n;++i) w.push_back(a[i].second);
    sort(w.begin(),w.end(),greater<int>());
    for(int i=1;i<=sce;++i,w.pop_back()) ans+=w.back();
    return ans;
}

void solve(){
    if(!k){ puts("0"); return; }
    int s=a[k].first;
    long long ans=min(min(calc(s),calc(s+1)),calc(s+2));
    if(ans==(~0uLL>>1)) puts("-1"); else printf("%I64d\n",ans);
}

int main(){
    init();
    solve();
    return 0;
}
