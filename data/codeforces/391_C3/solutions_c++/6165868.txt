#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include <functional>
#include <queue>
#include <cmath>
#include <vector>
#include <ctype.h>
#include <string>
#include <map>
#include <set>

using namespace std;
#define NN 210000
#define inf 1000000000

typedef long long INT;
typedef pair<int, int> pii;

int n, k;
pii a[NN];
int c1, c2, c3, c;
int e1[NN], e2[NN], e3[NN], e[NN], p[NN];

bool cmp(pii u, pii v) {
	if (u.second!=v.second) return u.second<v.second;
	return u.first<v.first;
}

INT calc(int x) {
	int i, d, ans;
	INT sum;
	c1=c2=c3=0;
	for (i=0; i<n; i++) {
		if (a[i].first==x || a[i].first==x-1) {
			e2[c2++]=a[i].second;
		} else if (a[i].first<x-1) {
			e1[c1++]=a[i].second;
		} else {
			e3[c3++]=a[i].second;
		}
	}
	if (c3>=k) return -1;
	d=n-k+1-c1; c=0; 
	for (i=0; i<c1; i++) e[c++]=e1[i];
	for (i=d; i<c2; i++) e[c++]=e2[i];
	for (i=0; i<c3; i++) e[c++]=e3[i];
	sum=0;
	for (i=0; i<d; i++) sum+=e2[i];
	sort(e, e+c);
	for (i=0; i<x-d; i++) sum+=e[i];
	return sum;
}

int main() {
	
	int i, x, low, high;
	INT sum, ans;
	scanf("%d%d", &n, &k);
	for (i=0; i<n; i++) scanf("%d%d", &a[i].first, &a[i].second);
	if (k==n+1) { puts("0"); return 0; }
	sort(a, a+n, cmp);
	for (i=0; i<n; i++) p[i]=a[i].first;
	sort(p, p+n);
	ans=-1;
	for (x=p[n-k]; x<=n && x<p[n-k]+5; x++) {
		sum=calc(x);
		if (sum==-1) continue;
		if (ans==-1) ans=sum;
		else ans=min(ans, sum);
	}
	printf("%I64d\n", ans);
	
	
	return 0;
}