#include <vector>
#include <list>
#include <map>
#include <math.h>
#include <cmath>
#include <set>
#include <queue>
#include <deque>
#include <string>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string.h>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <ctime>
using namespace std;

char arr[209][209];
int x[10],y[10];
int n,m,q;

vector<pair<int,int> >graph[209][209];

bool vis[209][209],vis1[209][209];
bool cyc[209][209],cyc1[209][209][10];

int temp[10],temp1[10];

string s;

bool dfs(int i,int j)
{
    if(vis1[i][j])
    {
        for(int f=0;f<10;f++)
        {
            temp1[f]=temp[f];
        }
        return 1;
    }
    if(vis[i][j])
        return 0;
    vis[i][j]=vis1[i][j]=1;
    temp[arr[i][j]-'0']++;
    bool cycle=0;
    for(int f=0;f<graph[i][j].size();f++)
    {
        cycle|=dfs(graph[i][j][f].first,graph[i][j][f].second);
    }
    if(cycle){
        cyc[i][j]=1;
        for(int f=0;f<10;f++)
            cyc1[i][j][f]=temp1[f];
    }
    vis1[i][j]=0;
    temp[arr[i][j]-'0']--;
    return cycle;
}

bool dfs1(int i,int j,int ind)
{
    if(ind==s.size())
        return 1;
    ind+=(arr[i][j]==s[ind]);
    if(ind==s.size())
        return 1;
    for(int f=0;f<graph[i][j].size();f++)
    {
        if(!cyc[graph[i][j][f].first][graph[i][j][f].second]&&dfs1(graph[i][j][f].first,graph[i][j][f].second,ind))
            return 1;
    }
    return 0;
}

int main()
{
    cin>>n>>m>>q;
    for(int f=0;f<n;f++)
    for(int f1=0;f1<m;f1++)
        cin>>arr[f][f1];
    for(int f=0;f<10;f++)
        cin>>x[f]>>y[f];
    for(int f=0;f<n;f++)
    {
        for(int f1=0;f1<m;f1++)
        {
            int i=x[arr[f][f1]-'0'];
            int j=y[arr[f][f1]-'0'];
            if(i+f>=n||i+f<0||j+f1>=m||j+f1<0)
                i=j=0;
            graph[i+f][j+f1].push_back(make_pair(f,f1));
        }
    }
    for(int f=0;f<n;f++)
    {
        for(int f1=0;f1<m;f1++)
        {
            if(!vis[f][f1])
                dfs(f,f1);
        }
    }
    while(q--)
    {
        cin>>s;
        reverse(s.begin(),s.end());
        int first[10];
        memset(first,-1,sizeof first);
        for(int f=0;f<s.size();f++)
            if(first[s[f]-'0']==-1)
                first[s[f]-'0']=f;
        bool flag=0;
        for(int f=0;f<n&&!flag;f++)
        {
            for(int f1=0;f1<m&&!flag;f1++)
            {
                if(!cyc[f][f1])
                    continue;
                int mini=s.size();
                for(int f2=0;f2<10;f2++)
                    if(first[f2]!=-1&&!cyc1[f][f1][f2])
                        mini=min(mini,first[f2]);
                if(dfs1(f,f1,mini))
                    flag=1;
            }
        }
        if(flag)
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
}
