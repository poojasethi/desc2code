#include <stdio.h>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <math.h>
#include <string>
#include <string.h>
#include <iostream>
using namespace std;
#define fi "input.txt"
#define fo "output.txt"
#define fileopen freopen(fi,"r",stdin);freopen(fo,"w",stdout)
#define FOR(i,l,r) for(int i=(int)(l);i<=(int)(r);i++)
#define FORD(i,l,r) for(int i=(int)(l);i>=(int)(r);i--)
#define xy pair<int,int>
#define int64 long long
#define X first
#define Y second
#define pb push_back
#define init(a,v) memset(a,v,sizeof(a))
#define Sz(s) (int)(s.size())
#define EL printf("\n")
#define digit(x) ('0'<=x&&x<='9')
#define forever while (true)

const int OO = (int) 2e9;
const int MOD = (int) 1e9+7;
const long double Pi = 3.1415926535897932384626433832795;
const int N = (int) 2e2+5;

int a[10],b[10],cir[N][N],cnt[N*N][10],c[10],in[N][N],n,m,q,nc=0,len,x,y,pos;
char s[N][N];
bool visit[N][N],inp[N][N];
xy path[N*N];
string str;
bool ok;

bool out(int x,int y) {return (x<1||n<x||y<1||m<y);}

void dfs(int x,int y) {
    int z=x+a[s[x][y]-'0'],t=y+b[s[x][y]-'0'];
    visit[x][y]=true;
    path[++len]=xy(x,y);
    inp[x][y]=true;
    if (out(z,t)) z=x,t=y;
    in[z][t]++;
    if (!visit[z][t]) dfs(z,t); else
    if (inp[z][t]) {
        int st=0;nc++;
        FOR(i,1,len) if (path[i]==xy(z,t)) {st=i;break;}
        FOR(i,st,len) {
            cir[path[i].X][path[i].Y]=nc;
            cnt[nc][s[path[i].X][path[i].Y]-'0']++;
        }
    }
    inp[x][y]=false;
    len--;
}

void check(int x,int y) {
    visit[x][y]=true;
    if (ok) return;
    int z=x+a[s[x][y]-'0'],t=y+b[s[x][y]-'0'],cp;
    bool take=false;
    if (str[pos]==s[x][y]) c[str[pos++]-'0']--,take=true;
    if (pos==Sz(str)) {ok=true;return;}
    if (!out(z,t)) {
        if (cir[z][t]) {
            cp=cir[z][t];bool tmp=false;
            FOR(i,0,9) tmp|=(c[i]>0&&cnt[cp][i]==0);
            if (!tmp) ok=true;
        } else check(z,t);
    }
    visit[x][y]=false;
    if (!ok&&take) c[str[--pos]-'0']++;
}

int main() {
    cin>>n>>m>>q;
    FOR(i,1,n) cin>>(s[i]+1);
    FOR(i,0,9) cin>>a[i]>>b[i];
    init(visit,false);
    FOR(i,1,n) FOR(j,1,m) if (!visit[i][j]) dfs(i,j);
    init(visit,false);
    while (q--) {
        cin>>str;
        init(c,0);init(visit,false);
        FOR(i,0,Sz(str)-1) c[str[i]-'0']++;
        ok=false;pos=0;
        FOR(i,1,n) FOR(j,1,m) if (in[i][j]==0) {
            if (ok) break;
            if (!visit[i][j]) check(i,j);
        }
        bool tmp;
        FOR(i,1,nc) {
            tmp=false;
            FOR(_,0,9)
                tmp|=(c[_]>0&&cnt[i][_]==0);
            if (!tmp) {ok=true;break;}
        }
        if (ok) cout<<"YES\n"; else cout<<"NO"<<endl;
    }
}
