#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<vector>
#define Maxn 40010
using namespace std;

vector<int> rev[Maxn];
char s[210][210];
int to[Maxn],digit[Maxn],a[10],b[10],lst[10];
int vis[Maxn],mask[Maxn];
int in_cycle[Maxn];
char ob[1000010];
bool found;
void dfs(int cur,int pos){
    if(pos<0||found){
        found=true;
        return;
    }
    for(int i=0;i<rev[cur].size();i++){
        if(in_cycle[rev[cur][i]]) continue;
        dfs(rev[cur][i],pos-(digit[rev[cur][i]]==ob[pos]-'0'));
    }
}
int main()
{
    int n,m,q;
    cin>>n>>m>>q;
    for(int i=0;i<n;i++)
        scanf("%s",s[i]);
    for(int i=0;i<10;i++)
        scanf("%d%d",a+i,b+i);
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++){
            int x=i,y=j;
            x+=a[s[i][j]-'0'],y+=b[s[i][j]-'0'];
            if(x<0||y<0||x>=n||y>=m) x=i,y=j;
            to[i*m+j]=x*m+y;
            digit[i*m+j]=s[i][j]-'0';
        }
    n*=m;
    for(int i=0;i<n;i++)
        rev[to[i]].push_back(i);
        //cout<<to[0]<<"++++++"<<endl;
    for(int i=0;i<n;i++){
        vector<int> tmp;
        int j=i;
        while(!vis[j]){
            tmp.push_back(j);
            vis[j]=1;
            j=to[j];
        }
        int id=-1;
        for(int k=0;k<tmp.size();k++){
            if(j==tmp[k]){
                id=k;
                break;
            }
        }
        //cout<<j<<" ** "<<id<<endl;
        if(id==-1) continue;
        int msk=0;
        for(int k=id;k<tmp.size();k++)
            msk|=1<<digit[tmp[k]];
        for(int k=id;k<tmp.size();k++){
            in_cycle[tmp[k]]=1;
            mask[tmp[k]]=msk;
        }
    }
    //cout<<in_cycle[0]<<"+++"<<endl;
    while(q--){
        scanf("%s",ob);
        memset(lst,-1,sizeof lst);
        for(int i=0;ob[i];i++)
            lst[ob[i]-'0']=i;
        //memset(vis,0,sizeof vis);
        found=false;
        for(int i=0;i<n;i++){
            if(!in_cycle[i]) continue;
            int pos=-1;
            for(int j=0;j<10;j++){
                if(mask[i]&1<<j) continue;
                pos=max(pos,lst[j]);
            }
            dfs(i,pos);
        }
        puts(found?"YES":"NO");
    }
    return 0;
}
