#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long LL;
int P;

LL pow(LL x,LL k,LL P){
	LL Fc=1;
	for(;k;k>>=1)k&1?Fc=(Fc*x)%P:0,x=(x*x)%P;
	return Fc;
}
namespace Ninv{
	void F(int a,int b,LL &x,LL &y){
		!b?(x=1,y=0):(F(b,a%b,y,x),y-=a/b*x);
	}
	inline LL inv(LL x,int P){
		LL a,b;F(x,P,a,b);
		return (a%P+P)%P;
	}
}
using Ninv::inv;

namespace Nmain{
	LL K,L,R,A,B,C;
	void solve(){
		cin>>K>>L>>R>>P;
		A=(pow(K,pow(2,R+1,P-1),P)+P-1)%P;
		B=(pow(K,pow(2,L,P-1),P)+P-1)%P;
		K%P==0?C=1:!B?C=pow(2,R-L+1,P):C=A*inv(B,P)%P;; 
		cout<<C*(K&1?inv(pow(2,R-L,P),P):1)%P<<endl;
	}
}

int main(){
	//freopen("A.in","r",stdin);
	int Q;
	for(cin>>Q;Q;--Q)Nmain::solve();
	return 0;
}
