from collections import defaultdict
import sys


def doremove(d, tag, count1, count2, apair, bpair, D):
    if d in count1:
        return -1
    if d in count2:
        count2.remove(d)
        count1.add(d)
        if tag == 0:
            apair[D[d]] = -1
        else:
            bpair[D[d]] = -1

    else:
        pass
        #print "doremove error: not in count2"


def run():
    data = sys.stdin.readlines()

    N, a, b = [int(d) for d in data[0].strip().split()]
    P = [int(d) for d in data[1].strip().split()]

    D = defaultdict(lambda: -1);
    for i, d in enumerate(P):
        #print i, d
        D[d] = i

    apair = []
    bpair = []
    count = []
    count1 = set()
    count2 = set()
    ans = dict()

    for i, d in enumerate(P):
        apair.append(D[a-d])
        bpair.append(D[b-d])
        t = (apair[i]>=0) + (bpair[i]>=0)
        count.append(t)
        if t == 0:
            return -1
        elif t == 1:
            count1.add(d)
        else:
            count2.add(d)

    while N > 0:
        '''
        print N
        print count1
        print count2
        '''
        if len(count1) > 0:
            d = count1.pop()
            k = D[d]

            if apair[k]>=0:
                k2 = apair[k]
                d2 = a-d
                ans[d] = 0
                ans[d2] = 0
            else:
                k2 = bpair[k]
                d2 = b-d
                ans[d] = 1
                ans[d2] = 1

            if d == d2:
                N -= 1
                continue
            else:
                N -= 2

            if d2 in count1:
                count1.remove(d2)
            if d2 in count2:
                count2.remove(d2)
                if a-d2 == d:
                    if doremove(P[bpair[k2]], 1, count1, count2, apair, bpair, D)==-1: return -1
                else:
                    if doremove(P[apair[k2]], 0, count1, count2, apair, bpair, D)==-1: return -1
        else:
            d = count2.pop()
            k = D[d]

            k2 = apair[k]
            d2 = a-d
            ans[d] = 0
            ans[d2] = 0

            if d == d2:
                N -= 1
                continue
            else:
                N -= 2

            count2.remove(d2)
            if doremove(P[bpair[k2]], 1, count1, count2, apair, bpair, D)==-1: return -1

    print "YES"
    for d in P:
        print ans[d], 

    return 0


ans = run();

if ans == -1:
    print "NO"