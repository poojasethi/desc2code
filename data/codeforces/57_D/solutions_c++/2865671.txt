#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
using namespace std;
#define rep(x, n) for (int x = 1; x <= n; ++x)
#define zrp(x, n) for (int x = n; x; --x)
#define FOR(x, l, r) for (int x = l; x <= r; ++x)
#define foredge(i, x) for (int i = start[x]; i; i = e[i].l)
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) < (b) ? (a) : (b))
#define abs(a) ((a) > 0 ? (a) : (-(a)))
typedef long long int64;
const int maxN = 1005;
int n, m, p, h[maxN], z[maxN];
long long ans; char s[maxN][maxN];

void init()
{
    scanf("%d%d", &n, &m);
    rep(i, n)
    {
        scanf("%s", s[i] + 1);
        rep(j, m) if (s[i][j] == '.')
            ++p;
        else h[j] = i, z[i] = j;
    }
}

void make(int a[], int n, int m)
{
    rep(j, m) if (a[j])
    {
        ans += (n - a[j]) * (a[j] - 1) * 4;
        for (int i = j - 1; i; --i)
        {
            if (!a[i] || a[i] > a[i + 1]) break;
            ans += (n - a[j]) * (a[i] - 1) * 4;
        }
        for (int i = j + 1; i <= m; ++i)
        {
            if (!a[i] || a[i] > a[i - 1]) break;
            ans += (n - a[j]) * (a[i] - 1) * 4;
        }
    }
}

void work()
{
    int d;
    rep(i, n) rep(j, m)
    {
        if (s[i][j] == '.') d = 1;
            else d = -1;
        ans += ((i - 1) * i / 2 + (n - i) * (n - i + 1) / 2) * int64(m) * d;
        ans += ((j - 1) * j / 2 + (m - j) * (m - j + 1) / 2) * int64(n) * d;
    }
    rep(i, m) if (h[i]) rep(j, m) if (h[j])
        ans += abs(i - j) + abs(h[i] - h[j]);
    make(h, n, m);
    make(z, m, n);
    printf("%.8lf\n", double(ans) / p / p);
}

int main()
{
    init();
    work();
    return 0;
}
