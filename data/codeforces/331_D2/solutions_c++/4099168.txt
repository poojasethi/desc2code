#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <string>
#include <sstream>
#include <cmath>
#include <stdio.h>
#include <iomanip>
#include <queue>
#include <map>
#include <fstream>
#include <cstring>

//#define cin fin
//#define cout fout

#define pb push_back
#define mp make_pair
#define f1 first
#define f2 second
#define X first
#define Y second
#define Size(n) ((int)(n).size())
#define Foreach(i, x) for (__typeof(x.begin()) i = x.begin(); i != x.end(); i++)

using namespace std;

typedef long long LL;
typedef pair <int, int> PII; 
typedef pair <PII, int> PPI;

const int maxN = 1000 + 5;
const int maxS = 4 * 1010 * 1010 + 5;
const int maxL = 25;

//vector <PII> ax;
//vector <PII> ay;

int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

int w[maxN][maxN];
int d[maxL][maxS];
int n, b;

int getSt(int x, int y, int r)
{
	return x + y * (b+1) + r * (b+1) * (b+1);
}

PII getP(int st)
{
	return mp(st % (b+1), (st / (b+1)) % (b+1));
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin >> n >> b;
	for (int i = 0; i <= b; i++)
		for (int j = 0; j <= b; j++)
			w[i][j] = -1;
	for (int i = 0; i < n; i++)
	{
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;	
		int dir = 0;
		if (x1 == x2)
		{
			if (y2 > y1)
				dir = 1;
			else
				dir = 3;
			for (int i = min(y1, y2); i <= max(y1, y2); i++)
				w[x1][i] = dir;
		}
		else
		{
			if (x2 > x1)
				dir = 0;
			else
				dir = 2;
			for (int i = min(x1, x2); i <= max(x1, x2); i++)
				w[i][y1] = dir;
		}
	}
	// init
	for (int i = 0; i <= b; i++)
		for (int j = 0; j <= b; j++)
			for (int r = 0; r < 4; r++)
			{
				int st = getSt(i, j, r);
				int dir = r;
				if (w[i][j] != -1)	
					dir = w[i][j];
				int x = i + dx[dir], y = j + dy[dir];
				if (x < 0 || y < 0 || x > b || y > b)
					d[0][st] = st;
				else
					d[0][st] = getSt(x, y, dir);
			}
	for (int l = 0; l < maxL - 1; l++)
		for (int i = 0; i <= b; i++)
			for (int j = 0; j <= b; j++)
				for (int r = 0; r < 4; r++)
				{
					int st = getSt(i, j, r);
					d[l + 1][st] = d[l][d[l][d[l][ d[l][st] ]]];
				}
	int q;
	cin >> q;
	while (q--)
	{
		int x, y; char c; LL time;
		cin >> x >> y >> c >> time;
		int dir = 0;
		if (c == 'U')
			dir = 1;
		else if (c == 'L')
			dir = 2;
		else if (c == 'D')
			dir = 3;
		int st = getSt(x, y, dir);
		for (int i = 0; i < maxL; i++)
		{
			for (int j = 0; j < (time % 4); j++)
				st = d[i][st];
			time /= 4;
		}
		PII ans = getP(st);
		cout << ans.X << " " << ans.Y << endl; 
	}
	return 0;
}

