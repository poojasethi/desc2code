#include <bits/stdc++.h>
using namespace std;

const int N = 1100;
const int Q = 100050;

const int dx[] = {0,0,-1,1};
const int dy[] = {1,-1,0,0};

int n, b, B, q, v[Q], to[2][N*N*4];
long long t[Q];

struct node {
	int x,y,k;
	node () {}
	node (int _x, int _y, int _k) : x(_x), y(_y), k(_k) {
		if (k == 'U') k = 0;
		if (k == 'D') k = 1;
		if (k == 'L') k = 2;
		if (k == 'R') k = 3;
	}
	node move(int k) {
		int nx = x + dx[k]; nx = max(nx, 0); nx = min(nx, b);
		int ny = y + dy[k]; ny = max(ny, 0); ny = min(ny, b);
		return node(nx, ny, k);
	}
	int id() {
		return (x * B + y) * 4 + k;
	}
} next[N*N*4];

void output() {
	puts("debug...");
	for (int i = 0; i < B; i++)
		for (int j = 0; j < B; j++)
			for (int k = 0; k < 4; k++) {
				node a = node(i, j, k);
				node b = next[a.id()];
				printf("(%d,%d,%d) -> (%d,%d,%d)\n", a.x, a.y, a.k, b.x, b.y, b.k);
			}
}

int main() {
	//freopen(".in", "r", stdin);
	//freopen(".out", "w", stdout);

	scanf("%d %d", &n, &b); B = b+1;

	for (int i = 0; i < B; i++) {
		for (int j = 0; j < B; j++) {
			for (int k = 0; k < 4; k++) {
				node a = node(i, j, k);
				node b = a.move(k);
				next[a.id()] = b;
			}
		}
	}

	//output();

	for (int i = 0; i < n; i++) {
		int x0, y0, x1, y1;
		scanf("%d %d %d %d", &x0, &y0, &x1, &y1);
		int len = abs(x0 - x1) + abs(y0 - y1);
		for (int k = 0; k < 4; k++)
		if (x0 + dx[k] * len == x1 && y0 + dy[k] * len == y1) {
			for (int c = 0; c <= len; c++) {
				int x = x0 + dx[k] * c;
				int y = y0 + dy[k] * c;
				for (int kk = 0; kk < 4; kk++) {
					next[node(x,y,kk).id()] = next[node(x,y,k).id()];
				}
			}
			break;
		}
	}

	//output();

	scanf("%d", &q);

	for (int i = 0; i < q; i++) {
		int x, y; char w;
		scanf("%d %d %c %I64d", &x, &y, &w, t+i);
		v[i] = node(x,y,w).id();
	}

	int ALL = B * B * 4;

	for (int i = 0; i < ALL; i++)
		to[0][i] = next[i].id();

	for (int u = 0; u < 50; u++) {
		for (int i = 0; i < q; i++)
		if (t[i] & (1ll<<u))
			v[i] = to[0][v[i]];
		for (int i = 0; i < ALL; i++)
			to[1][i] = to[0][to[0][i]];
		memcpy(to[0], to[1], sizeof to[0]);
	}

	for (int i = 0; i < q; i++) {
		int x = v[i] / 4 / B;
		int y = v[i] / 4 % B;
		printf("%d %d\n", x, y);
	}

	return 0;
}