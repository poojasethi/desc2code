#include<iostream>
#include<fstream>
#include<sstream>
#include<cstdio>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<cstring>
#include<set>
using namespace std;

#define FOR(I,A,B) for (int I=int(A);I<int(B);++I)
#define MEM(A,B) memset(A,B,sizeof(A))
#define CPY(A,B) memcpy(A,B,sizeof(B))
#define FIN(A) freopen(A, "r", stdin)
#define FOUT(A) freopen(A, "w", stdout)
typedef long long LL;

const int N(100010), M(1010);

int n, m, t;
int a[N];
int li[M];
bool bo[M];
vector<int> p[M];
set<int> se;
map<int, int> num;

LL gcd(LL a, LL b) {return b ? gcd(b, a % b) : a;}

LL c(int n, int _m) {
	LL ret = 1;
	int m = 1;
	FOR(i, 1, _m + 1) m *= i;
	FOR(i, 0, _m) {
		ret = (n - i) / gcd(m, n - i) * ret;
		m /= gcd(m, n - i);
	}
	return ret;
}

LL calc(LL x) {return x * (x + 1) / 2;}

bool check(int x) {
	return x ? check(x / 10) && (x % 10 == 4 || x % 10 == 7) : true;
}

int main() {
	//freopen("in.txt", "r", stdin);
	cin >> n;
	FOR(i, 1, n + 1) {
		cin >> a[i];
		if (check(a[i])) num[a[i]] = 0;	
	}
	LL ans = c(n + 2, 4);
	for (map<int, int> :: iterator it = num.begin(); it != num.end(); ++it)
		it->second = ++m;
	li[t++] = 0;
	FOR(i, 1, n + 1) {
		a[i] = num[a[i]];
		if (a[i]) li[t++] = i;
		p[a[i]].push_back(i);
	}
	li[t++] = n + 1;
	FOR(i, 1, t - 1) {
		se.clear();
		MEM(bo, false);
		LL tmp = 0;
		se.insert(n + 1);
		for (int j = i; j; --j) {
			if (!bo[a[li[j]]]) {
				bo[a[li[j]]] = true;
				int aa = a[li[j]];
				FOR(k, 0, p[aa].size()) {
					if (p[aa][k] <= li[i]) continue;
					set<int> :: iterator it = se.insert(p[aa][k]).first, itL = it, itR = it;
					--itL; ++itR;
					if (it == se.begin()) {
						tmp += (LL)(li[i + 1] - li[i]) * (*itR - p[aa][k]) * (p[aa][k] - li[i + 1] + 1);
						tmp += c(li[i + 1] - li[i], 2) * (*itR - p[aa][k]);
					}
					else tmp += (LL)(li[i + 1] - li[i]) * (*itR - p[aa][k]) * (p[aa][k] - *itL);
				}
			}
			ans -= (li[j] - li[j - 1]) * tmp;
		}
	}
	cout << ans << endl;
	return 0;
}
