#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
#include <set>

using namespace std;
const int maxn=100010;
int a[maxn], n;

bool lucky(int x)
{
	for (;x; x/=10)
		if (x%10!=4 && x%10!=7) return false;
	return true;
}

vector <int> pos;
set <int> s;
int next[maxn]; 

int main()
{
	scanf("%d",&n);
	pos.push_back(-1);
	for (int i=0; i<n; i++) 
	{
		scanf("%d",&a[i]);
		if (lucky(a[i])) pos.push_back(i);
	}
	long long ans=1ull*(n+2)*(n+1)/2*n/3*(n-1)/4;
	for (int i=1; i<pos.size(); i++)
	{
		next[i]=pos.size();
		for (int j=i+1; j<pos.size(); ++j)
			if (a[pos[i]]==a[pos[j]]){next[i]=j; break;}
	}
	
	for (int i=1; i+1<pos.size(); i++)
	{
		s.clear();
		s.insert(pos[i]), s.insert(n);
		long long res=0, len=pos[i+1]-pos[i];
		for (int j=i; j>0; --j)
		{
			if (next[j]>i)
			{
				for (int k=next[j]; k<pos.size(); k=next[k])
				{
					set<int>::iterator prev,succ;
					prev=succ=s.insert(pos[k]).first;
					--prev, ++succ;
					if (prev==s.begin())
						res+=1LL*(*succ-pos[k])*(1LL*len*(len+1)/2+1LL*(pos[k]-pos[i+1])*len);
					else 
						res+=1LL*(*succ-pos[k])*(pos[k]-*prev)*len;
				}
			}
			ans-=res*(pos[j]-pos[j-1]);
		}
	}
	cout<<ans<<endl;
	return 0;
}
