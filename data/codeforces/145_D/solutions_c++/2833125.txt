#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>
#include <algorithm>
using namespace std;

typedef long long LL;
const int maxn = 100005;
int a[maxn], b[maxn], next[maxn];
set<int> seq;
LL ans, sum;
int n, m;

bool check(int x) {
    for (; x > 0; x /= 10)
        if (x % 10 != 4 && x % 10 != 7)
            return false;
    return true;
}

int main() {
    int i, j, k; set<int>::iterator p, q;
    scanf("%d", &n);
    for (i = 1; i <= n; ++i) {
        scanf("%d", a + i);
        if (check(a[i])) b[++m] = i;
    }
    for (i = 1; i <= m; ++i) {
        for (j = i + 1; j <= m; ++j)
            if (a[b[i]] == a[b[j]]) break;
        next[i] = j;
    }
    ans = (unsigned long long)n * (n - 1) / 2 * (n + 1) / 3 * (n + 2) / 4;
    for (i = 1; i < m; ++i) {
        seq.clear(); sum = 0;
        seq.insert(b[i]); seq.insert(n + 1);
        for (j = i; j >= 1; --j) {
            for (k = next[j]; k > i && k <= m; k = next[k]) {
                p = q = seq.insert(b[k]).first; --p; ++q;
                if (p == seq.begin()) {
                    sum += (LL)(*q - b[k]) * (b[i + 1] - b[i] + 1) * (b[i + 1] - b[i]) / 2;
                    sum += (LL)(*q - b[k]) * (b[k] - b[i + 1]) * (b[i + 1] - b[i]);
                } else sum += (LL)(*q - b[k]) * (b[k] - *p) * (b[i + 1] - b[i]);
            }
            ans -= sum * (b[j] - b[j - 1]);
        }
    }
    printf("%I64d\n", ans);
    return 0;
}
