#include <set>
#include <vector>
#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long LL;
template<class T>inline void Read(T& x) {
    x = 0; bool flag = 0; char ch = getchar();
    while(ch<'0'||ch>'9') { if(ch == '-') flag = 1; ch = getchar(); }
    while('0'<=ch&&ch<='9') { x=x*10+ch-'0'; ch = getchar(); }
    if(flag) x=-x;
}
#define maxn 100010
inline bool lucky(int x) {
    while(x > 0) {
        if(x % 10 != 4 && x % 10 != 7) return false;
        x /= 10;
    }
    return true;
}
int next[maxn],a[maxn],n = 0;
vector <int> pos;
set <int> s;
int main() {
//  freopen("sequence.in","r",stdin);
//  freopen("sequence.out","w",stdout);
    Read(n); pos.push_back(-1);
    for(int i = 0;i < n;++ i) {
        Read(a[i]); if(lucky(a[i])) pos.push_back(i);
    }
    LL ans = 1ull * (n + 2) * (n + 1) / 2 * n / 3 * (n - 1) / 4;
    for(int i = 1;i < pos.size();++ i) {
        next[i] = pos.size();
        for(int j = i + 1;j < pos.size();++ j) 
            if(a[pos[i]] == a[pos[j]]) { next[i] = j; break; }
    }
    for(int i = 1;i + 1 < pos.size();++ i) {
        s.clear(); s.insert(pos[i]); s.insert(n);
        LL res = 0,len = pos[i + 1] - pos[i];
        for(int j = i;j > 0;-- j) {
            if(next[j] > i) {
                for(int k = next[j];k < pos.size();k = next[k]) {
                    set <int> :: iterator prev,succ;
                    prev = succ = s.insert(pos[k]).first;
                    -- prev,++ succ;
                    if(prev == s.begin())
                        res += 1LL * (*succ - pos[k]) * (1LL * len * (len + 1) / 2 + 1LL * (pos[k] - pos[i + 1]) * len);
                    else 
                        res += 1LL * (*succ - pos[k]) * (pos[k] - *prev) * len; 
                }
            }
            ans -= res * (pos[j] - pos[j-1]);
        }
    }
    cout<<ans<<endl;
    //printf("%lld\n",ans);
//  fclose(stdin);
//  fclose(stdout);
    return 0;
}
	 	 	    	     		 	 					  		