#include<cstdio>
#include<set>
#include<algorithm>
using namespace std;
int N,i,j,k,Num,X;
int next[1005],Pos[1005],A[1005];
long long Ans,res,pre;
set<int> S;
set<int>::iterator L,R;
bool Check(int x)
{
	for(;x;x/=10) if(x%10!=4&&x%10!=7) return 0;
	return 1;
}
long long Get(long long a)
{
	return a*(a-1)/2+a;
}
int main()
{
	scanf("%d",&N);
	for(i=1;i<=N;++i)
	{
		scanf("%d",&X);
		if(Check(X)) Pos[++Num]=i,A[Num]=X;
	}
	for(i=1;i<=Num;++i)
		for(next[i]=i+1;A[next[i]]!=A[i]&&next[i]<=Num;++next[i]);
	Ans=(unsigned long long)(N+2)*(N+1)/2*(N)/3*(N-1)/4;
	Pos[Num+1]=N+1;
	for(i=1;i<=Num;++i)
	{
		res=0,S.clear();
		pre=(long long)(Pos[i+1]-Pos[i])*(long long)(Pos[i+1]-Pos[i]-1)/2;
		S.insert(Pos[i]),S.insert(N+1);
		for(j=i;j;--j)
		{
			if(next[j]>i)
				for(k=next[j];k!=Num+1;k=next[k])
				{
					L=R=S.insert(Pos[k]).first;
					--L,++R;
					if(*L==Pos[i]) res+=(long long)(Pos[i+1]-Pos[i])*(Get(*R-Pos[i+1])-Get(Pos[k]-Pos[i+1])-Get(*R-Pos[k]-1))+pre*(long long)(*R-Pos[k]);
					else res+=(long long)(Pos[i+1]-Pos[i])*(Get(*R-*L-1)-Get(Pos[k]-*L-1)-Get(*R-Pos[k]-1));
				}
			Ans-=res*(long long)(Pos[j]-Pos[j-1]);
		}
	}
	printf("%I64d\n",Ans);
	return 0;
}
