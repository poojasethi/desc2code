#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
using namespace std;

int nxt[1010];
long long a[100010],b[1010];
set<int> st;
set<int>::iterator it,itx,ity;

bool lucky(int n)
{
	while(n) {
	       if(n % 10 != 4 && n % 10 != 7) return false;
	       n /= 10;
	}
	return true;
}
       	       
int main()
{
	int n;
	scanf("%d",&n);
	int m = 0;
	long long ans = 0;
	memset(nxt,0,sizeof(nxt));
	memset(b,0,sizeof(b));
	for(int i = 1; i <= n; i ++) {
		ans = ans + 1LL * i * (i + 1) / 2 * (n - i);
		scanf("%I64d",&a[i]);
		if(lucky(a[i])) b[++ m] = i;
	}
	for(int i = 1; i <= m; i ++)
		for(int j = i + 1; j <= m; j ++)
			if(a[b[i]] == a[b[j]]) {
				nxt[i] = j;
				break;
			}
	for(int i = 1; i <= m; i ++) {
		st.clear();
		st.insert(b[i]);
		st.insert(n + 1);
		long long sum = 0;
		for(int j = i; j > 0; j --) {
			for(int k = nxt[j]; k != 0 && nxt[j] > i; k = nxt[k]) {
				st.insert(b[k]);
				itx = ity = st.lower_bound(b[k]);
				itx --,ity ++;
				if((*itx) == b[i]) {
					sum += ((*ity) - b[k]) * (b[i + 1] - b[i]) * (b[k] - b[i + 1]);
					sum += ((*ity) - b[k]) * (b[i + 1] - b[i] + 1) * (b[i + 1] - b[i]) / 2;
				}
				else sum += (b[i + 1] - b[i]) * (b[k] - (*itx)) * ((*ity) - b[k]);

			}
			ans -= sum * (b[j] - b[j - 1]);
		}
	}
	cout << ans << endl;
	return 0;
}
