#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#define fi first
#define se second
#define mp make_pair
#define pb push_back
using namespace std;
typedef long long lint;
const int maxn=100010;
lint ans;
vector<int> l;
set<lint> s;
set<lint>::iterator p,q;
int n,a[maxn],nx[maxn];
bool lucky(int a){
    while(a){
        if(a%10!=4&&a%10!=7)return 0;
        a/=10;
    }
    return 1;
}
int main(){
    //freopen("AC.in","r",stdin);
    //freopen("AC.out","w",stdout);
    cin>>n;
    ans=1ULL*n*(n-1)*(n+1)/6*(n+2)/4;
    for(int i=0;i<n;i++){
        scanf("%d",a+i);
        if(lucky(a[i]))l.pb(i);
    }
    l.pb(n);
    for(int i=0;i<l.size();i++){
        nx[i]=-1;
        for(int j=i-1;j>=0;j--)
            if(a[l[j]]==a[l[i]]){
                nx[i]=j;
                break;
            }
    }
    for(int i=0;i<(int)l.size()-2;i++) {
        lint d=0;
        s.clear();
        s.insert(-1);
        for(int j=i+1;j<l.size()-1;j++) {
            if(nx[j]<=i)
                for(int k=nx[j];k>=0;k=nx[k]){
                    p=s.insert(l[k]).first;q=p;
                    p--;q++;
                    if(q==s.end())
                        d+=(l[k]-*p)*((l[i+1]-l[i])*(l[i+1]-l[i]+1)/2+(l[i+1]-l[i])*(l[i]-l[k]));
                    else
                        d+=(l[k]-*p)*(*q-l[k])*(l[i+1]-l[i]);
                }
            ans-=d*(l[j+1]-l[j]);
        }
    }
    cout<<ans;
    return 0;
}
