#include<cstdio>
#include<cstring>
#include<set>
using namespace std;
#define ll long long
#define N 100005
#define it set<int>::iterator
#define deal(l) for (r++;a[r]<0;r++); for (ll j=l+1;j<r;j++) ans+=(j-l)*C2(n-j+1);
set<int> s;
int n,x,y,r,lim,a[N],son[N],next[N],last[N],v[N]; ll ans,res,f[N];
ll C2(ll x){return x*(x-1)/2;}
ll cal(ll x){return x*(x+1)*(x*2+1)/6;}
ll work(ll i,ll j,ll k){return (cal(k-i)-cal(k-j)-C2(k-i+1)+C2(k-j+1))/2;}
int get(int x)
{
	int y=0,z;
	while (x) {z=x%10,x/=10; if (z-4 && z-7) return -1; y=y*3+1+(z==7);}
	return y;
}
int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;i++){
		scanf("%d",&x),x=get(x),a[i]=x;
		if (x>=0) last[i]=y,y=i,next[i]=son[x],son[x]=i;
		}
	deal(0)
	for (int i=1;i<=n;i++) if (a[i]>=0){
		s.clear(),s.insert(i),s.insert(n+1),lim=n+1,res=0; deal(i)
		for (int j=i;j;j=last[j]){
			if (v[a[j]]!=i){	v[a[j]]=i;
				for (int p=son[a[j]];p;p=next[p]) if (p>i){
					it k=s.insert(p).first,L=k,R=k; L--,R++;
					if (*L==i) res+=C2(*R-*k),lim=*k;
					else res-=C2(*R-*L)-C2(*R-*k)-C2(*k-*L);
					}
				}
			ans+=(work(i,r,lim)+res*(r-i))*(j-last[j]);
			}
		}
	printf("%I64d\n",ans); return 0; 
}
