#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <map>
#include <set>
using namespace std;

const int MAXN = 100000 + 10, MAXL = 1000 + 10;
typedef set<int>::iterator sit;

int n, luck[MAXL], num[MAXL], sum[MAXL], nex[MAXL], tot;
map<int, int> h;

bool check(int x)
{
	for (; x; x /= 10)
		if (x % 10 != 4 && x % 10 != 7)
			return false;
	return true;
}
void init()
{
	scanf("%d", &n);
	memset(nex, 0x3f, sizeof(nex));
	for (int i = 1; i <= n; ++i)
	{
		int x;
		scanf("%d", &x);
		if (check(x))
		{
			luck[++tot] = i;
			nex[h[x]] = tot;
			h[x] = tot;
		}
		else
		++num[tot + 1];
	}
	for (int i = 1; i <= tot + 1; ++i)
		sum[i] = sum[i - 1] + num[i] + 1;
	--sum[tot + 1];
}
typedef long long LL;
LL C(LL n, LL k)
{
	LL CC = 1;
	for (LL i = n - k + 1; i <= n; ++i)
		CC *= i;
	for (LL i = 1; i <= k; ++i)
		CC /= i;
	return CC;
}
LL CC;
set<int> s;
void solve()
{
	for (int i = 1; i <= n; ++i)
		CC += (LL) i * (i + 1) / 2 * (n - i);
	for (int i = 1; i <= tot; ++i)
	{
		s.clear();
		s.insert(luck[i]);
		s.insert(n + 1);
		LL cur = 0;
		for (int j = i; j >= 1; --j)
		{
			if (nex[j] > i)
				for (int k = nex[j]; k <= tot; k = nex[k])
				{
					s.insert(luck[k]);
					sit l = s.find(luck[k]), r = s.find(luck[k]);
					--l, ++r;
					if (*l != luck[i])
						cur += (LL) (luck[i + 1] - luck[i]) * (luck[k] - *l) * (*r - luck[k]);
					else
						cur += (LL)((double) (luck[i + 1] - luck[i]) * (*r - luck[k]) * ((double)(luck[i + 1] - luck[i] + 1) / 2.0 + luck[k] - luck[i + 1]));
				}
			CC -= cur * (luck[j] - luck[j - 1]);
		}
	}
	cout << CC << endl;
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
#endif
	init();
	solve();
	fclose(stdin);
	fclose(stdout);
	return 0;
}


