#include <set>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;
long long a[100010], next[100010];
long long n, ans, res, len, m;
inline bool lucky(int x)
{
    while (x)
    {
        if (x % 10 != 4 && x % 10 != 7) return 0;
        x /= 10;
    }
    return 1;
}
vector <long long> pos;
set <long long> s;
set <long long>::iterator prev,succ;
int main()
{
    scanf("%I64d", &n);
    pos.push_back(-1);
    for (int i = 0; i < n; i++) 
    {
        scanf("%I64d", &a[i]);
        if (lucky(a[i])) pos.push_back(i);
    }
    ans = (n + 2ll) * (n + 1ll) / 2ll;
    ans = ans * n / 3ll, m = n - 1;
    if (ans % 4 == 0) ans >>= 2;
    else if (ans % 2 == 0) ans >>= 1, m >>= 1;
    else m >>= 2;
    ans *= m;
    for (int i = 1; i < pos.size(); i++)
    {
        next[i] = pos.size();
        for (int j = i + 1; j < pos.size(); j++)
        if (a[pos[i]] == a[pos[j]])
        {
            next[i] = j;
            break;
        }
    }
    for (int i = 1; i + 1 < pos.size(); i++)
    {
        s.clear(), s.insert(pos[i]), s.insert(n);
        res = 0, len = pos[i + 1] - pos[i];
        for (int j = i; j; j--)
        {
            if (next[j] > i)
            for (int k = next[j]; k < pos.size(); k = next[k])
            {
                prev = succ = s.insert(pos[k]).first;
                --prev, ++succ;
                if (prev == s.begin()) res += (*succ - pos[k]) * (len * (len + 1) / 2 + (pos[k] - pos[i + 1]) * len);
                else res += (*succ - pos[k]) * (pos[k] - *prev) * len;
            }
            ans -= res * (pos[j] - pos[j - 1]);
        }
    }
    printf("%I64d\n", ans);
    return 0;
}
