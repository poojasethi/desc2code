#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <set>
#include <vector>
#include <map>
#define fi first
#define se second
using namespace std;
typedef long long ll;
typedef set<int > :: iterator pp;
map<int, vector<int > > v;
ll ans = 1;
ll f[11];
int n, top = 0;
int a[500001], stack[500001];
bool check(int x)
{
	for (; x; x /= 10)
		if (x % 10 != 4 && x % 10 != 7) return false;
	return true;
}
ll Work()
{
	pp lp, p, rp;
	set<int > S, Seq;
	vector<int > Q;
	for (int i = 1; i <= top; i ++)
	{
		S.clear(), Seq.clear();
		Seq.insert(stack[i]), Seq.insert(n + 1);
		ll sum = 0;
		for (int j = i; j > 0; j --)
		{
			if (S.find(a[stack[j]]) == S.end())
			{
				int get = a[stack[j]];
				S.insert(get), Q = v[get];
				for (int k = 0; k < Q.size(); k ++)
					if (Q[k] > stack[i])
					{	
						p = Seq.insert(Q[k]).fi;
						lp = rp = p;
						lp --, rp ++;
						if (lp == Seq.begin())
						{
							sum += (ll )((stack[i + 1] - stack[i])) * (ll )((stack[i + 1] - stack[i] - 1)) / 2 * (ll )((*rp - *p));
							sum += (ll )((stack[i + 1] - stack[i])) * (ll )((*p - stack[i + 1] + 1)) * (ll )((*rp - *p));
						}
						else sum += (ll )((stack[i + 1] - stack[i])) * (ll )((*rp - *p)) * (ll )((*p - *lp));
					}
			}
			ans -= (ll )((stack[j] - stack[j - 1])) * sum;
		}
	}
	return ans;			
}
int main( )
{
	scanf("%d", &n);
	f[1] = n - 1, f[2] = n, f[3] = n + 1, f[4] = n + 2;
	for (ll i = 4; i >= 2; i --)
		for (ll j = 1; j <= 4; j ++)
			if (f[j] % i == 0) { f[j] /= i; break; }
	for (int i = 1; i <= 4; i ++)
		ans *= f[i];
	for (int i = 1; i <= n; i ++)
	{
		scanf("%d", &a[i]);
		if (check(a[i])) 
			v[a[i]].push_back(i), stack[++ top] = i;
	}
	printf("%I64d\n", Work());
	return 0;
}

 				 	 		  			 		   	  	 	