#include <cstdio>
#include <algorithm>
using namespace std;

int k, m, i, j, p, ans, mi[10];
short can[10000][8500];
bool used[10000][8500];

struct aa {
	int len, s[1000];
	aa() {
		len = 0;
	}
	void push(int x) {
		for (int i = 1; i <= len; i++)	if (s[i] == x)	return ;
		s[++len] = x;
	}
} pp;

aa get(int x, int y) {
	aa p, q, t;
	p.push(y);
	for (int i = 1; i < x; i++) {
		q = get(i, y / mi[x - i]);
		t = get(x - i, y % mi[x - i]);
		for (int j = 1; j <= q.len; j++)
			for (int k = 1; k <= t.len; k++)
				p.push(q.s[j] + t.s[k]), p.push(q.s[j] * t.s[k]), p.push(q.s[j] - t.s[k]);
	}
	return p;
}

int main() {
	scanf("%d%d", &k, &m);
	for (mi[0] = 1, i = 1; i <= 4; i++)	mi[i] = mi[i - 1] * 10;	
	for (i = 0; i <= 9999; i++) {
		pp = get(4, i);
		for (j = 1; j <= pp.len; j++)
			if (pp.s[j] >= 0 && pp.s[j] < 10000)	can[pp.s[j]][++can[pp.s[j]][0]] = i;
	}
	short ans = 0;
	for (i = 0; i <= 9999; i++)	ans = max(ans, can[i][0]);
	for (i = (k == 10000 ? 1 : 0); i <= k && i < 10000; i++)
		for (j = 1; j <= can[i][0]; j++)
			for (p = 1; p <= can[k - i][0]; p++) if (!used[can[i][j]][can[k - i][p]]){
				printf("%04d%04d\n", can[i][j], can[k - i][p]);
				used[can[i][j]][can[k - i][p]] = true;
				if (!(--m))	return 0;
			}
}
