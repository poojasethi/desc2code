
mem = {}
lookUp = {}

def calc(x):
	global mem
	if x in mem:
		return mem[x]
	ret = {}
	val = 0
	for items in x:
		val = 10 * val + eval(items)
	ret[val] = True
	for i in range(1, len(x)):
		x1 = x[:i]
		x2 = x[i:]
		r1 = calc(x1)
		r2 = calc(x2)
		for v1 in r1:
			for v2 in r2:
				ret[v1+v2] = True
				ret[v1*v2] = True
				ret[v1-v2] = True
	mem[x] = ret
	return ret

def dfs(s):
	if s != "":
		have = calc(s)
		for items in have:
			if not (len(s), items) in lookUp:
				lookUp[(len(s), items)] = []
			lookUp[(len(s), items)].append(s)
	if len(s) == 4:
		return
	for i in "0123456789":
		dfs(s + i)

dfs("")

def solve(x, k):
	ret = {}
	for i in range(0, 10000):
		if len(ret) > k:
			break
		if (4, x+i) in lookUp and (4, i) in lookUp:
			a = lookUp[(4, i)]
			b = lookUp[(4, x+i)]
			for item1 in a:
				if len(ret) > k:
					break
				for item2 in b:
					if len(ret) > k:
						break
					ret[item1 + item2] = True
		if (4, x-i) in lookUp and (4, i) in lookUp:
			a = lookUp[(4, x-i)]
			b = lookUp[(4, i)]
			for item1 in a:
				if len(ret) > k:
					break
				for item2 in b:
					if len(ret) > k:
						break
					ret[item1 + item2] = True
		if (4, i) in lookUp and (4, x-i) in lookUp:
			a = lookUp[(4, i)]
			b = lookUp[(4, x-i)]
			for item1 in a:
				if len(ret) > k:
					break
				for item2 in b:
					if len(ret) > k:
						break
					ret[item1 + item2] = True
	r = []
	for items in ret:
		if len(r) < k:
			r.append(items)
	return r

s = raw_input()
val, k = map(int, s.split(' '))

ans = solve(val, k)
for items in ans:
	print items

