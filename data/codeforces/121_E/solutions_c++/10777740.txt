#include <bits/stdc++.h> // sherlock.

using namespace std;

int BITree[100100]={0};
int hash[100100]={0};
int a[100010],n;

int getSum( int index)
{
	int sum = 0; // Iniialize result
	while (index>0)
	{
		sum += BITree[index];
		index -= index & (-index);
	}
	return sum;
}
void updateBIT( int index, int val)
{
	while (index <= n)
	{
		BITree[index] += val;
		index += index & (-index);
	}
}



void brute(int id,int num){
	if(num) hash[num] = 1;
	if(id>4){
		return ;
	}
	brute(id+1,num*10+4);
	brute(id+1,num*10+7);
}

// Driver program to test above functions

int main()
{
	int Q,q1,q2,q3;
	char sr[100];
	brute(1,0);
	cin >> n >> Q;
	for(int i=1;i<=n;++i) {
		scanf("%d",&a[i]);
		updateBIT(i,hash[a[i]]);
	}
	while(Q--){
		scanf("%s",sr);
		if(sr[0] == 'c'){
			scanf("%d%d",&q1,&q2);
			int ans = getSum(q2);
			if(q1>1) ans -= getSum(q1-1);
			printf("%d\n",ans);
		}
		else{
			scanf("%d%d%d",&q1,&q2,&q3);
			while(q1<=q2){
				if(hash[a[q1]]) updateBIT(q1,-hash[a[q1]]);
				a[q1] += q3;
				if(hash[a[q1]]) updateBIT(q1,hash[a[q1]]);
				q1++;
			}
		}
	}
	return 0;
}
