#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;
#define fr(i,x,y) for(i=x;i<=y;i++)
#define frd(i,x,y) for(i=x;i>=y;i--)
#define pb  push_back
#define mk  make_pair
#define fi  first
#define se  second
typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef map<int,int> MP;

const int maxn = 100010;
int dist[maxn],fa[maxn],path[maxn];
bool vis[maxn<<1];
int n,m,a[maxn],b[maxn],c[maxn],d[maxn];
MP mat;
set <PII> cc[maxn<<1];
VI vx;
void Modify(int x,PII v){
    for(;x<=m;x+=x&-x)
        cc[x].insert(v);
}
VI Query(int x,int y){
    VI tem;
    while(x){
        set <PII> :: iterator last = cc[x].upper_bound(mk(y,maxn));
        set <PII> :: iterator it;
        for(it = cc[x].begin();it != last;it ++)tem.pb(it->se);
        cc[x].erase(cc[x].begin(),last);
        x-=x&-x;
    }
    return tem;
}

void Bfs(){
	int i;
    memset(fa,-1,sizeof(fa));
    memset(dist,-1,sizeof(dist));
    VI u=Query(mat[0],0);
    queue <int> q;
    fr(i,0,(int)u.size()-1){
    	q.push(u[i]);
    	vis[u[i]] = true;
    	dist[u[i]] = 1;
    }
    while(!q.empty()){
        int id=q.front();
        q.pop();
        VI v=Query(mat[c[id]],d[id]);
        fr(i,0,(int)v.size()-1){
            if(vis[v[i]])continue;
            vis[v[i]]=true;
            dist[v[i]]=dist[id]+1;
            fa[v[i]]=id;
            q.push(v[i]);
        }
    }
}

int main(){
	int i;
	scanf("%d",&n);
    fr(i,0,n-1){
    	scanf("%d%d%d%d",&a[i],&b[i],&c[i],&d[i]);
		vx.pb(a[i]);
		vx.pb(c[i]);
	}
    sort(vx.begin(),vx.end());
    mat[vx[0]]=m=1;
    fr(i,1,(int)vx.size()-1)
    	if(vx[i]!=vx[i-1])
    		mat[vx[i]]=++m;
    fr(i,0,m)cc[i].clear();
    fr(i,0,n-1)Modify(mat[a[i]],mk(b[i],i));
    Bfs();
    printf("%d\n",dist[n-1]);
    if(dist[n-1]==-1)return 0;
    else{
        int cnt=0;
        int u=n-1;    
        while(u!=-1){
            path[cnt++]=u+1;
            u=fa[u];
        }
        printf("%d",path[cnt-1]);
        frd(i,cnt-2,0)printf(" %d",path[i]);
        printf("\n");
    }
}
			 			 		 			   	  		  				  	