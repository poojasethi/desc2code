#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <queue>
#define LL long long
using namespace std;
int N,l,r,len;
int L[200010],from[200010],res[200010];
int q[200010],ans[200010];
class segleaf{
	public:
	int data;
}seg[2000010];
class rec{
	public:
	int a,b,c,d,t;
	bool operator < (const rec &X)const{
		if (a!=X.a)return a<X.a;
		if (b!=X.b)return b<X.b;
		if (c!=X.c)return c<X.c;
		if (d!=X.d)return d<X.d;
		if (t!=X.t)return t<X.t;
		return 0;
	}
}P[200010];
set <rec > ROW[200010];
set <rec > :: iterator cpr,cprr;
void deal(int x){
	cpr=ROW[x].begin();
	while (cpr!=ROW[x].end()&&(*cpr).b<=P[q[l]].d){
		++r;
		q[r]=(*cpr).t;
		from[q[r]]=q[l];
		ans[(*cpr).t]=ans[q[l]]+1;
		cprr=cpr;
		cpr++;
		ROW[x].erase(cprr);
	}
}
int lisan(int x){
	l=0;r=len;
	while (l<r){
		int mid=(l+r)>>1;
		if (L[mid]<x)l=mid+1;
		else r=mid;
	}
	return l;
}
void RENEW(int x,int l,int r,int t){
	if (l==r){
		if (ROW[l].size())
			seg[x].data=(*ROW[l].begin()).b;
		else seg[x].data=2e9;
		return;
	}
	int mid=(l+r)>>1;
	if (t<=mid)RENEW(x<<1,l,mid,t);
	else RENEW((x<<1)+1,mid+1,r,t);
	seg[x].data=min(seg[x<<1].data,seg[(x<<1)+1].data);
}
int find(int x,int l,int r,int t){
	if (seg[x].data>t)return (1e9)+7;
	if (l==r)return l;
	int mid=(l+r)>>1;
	if (seg[x<<1].data<=t)return find(x<<1,l,mid,t);
	else return find((x<<1)+1,mid+1,r,t);
}
int main(){
	scanf("%d",&N);
	for (int i=1;i<=N;i++){
		scanf("%d%d%d%d",&P[i].a,&P[i].b,&P[i].c,&P[i].d);
		P[i].t=i;
		L[i]=P[i].a;
		L[N+i]=P[i].c;
	}
	L[0]=0;
	sort(L,L+2*N+1);
	len=0;
	for (int i=1;i<=2*N;i++)if (L[i]!=L[len])L[++len]=L[i];
	for (int i=1;i<=N;i++){
		P[i].a=lisan(P[i].a);
		P[i].c=lisan(P[i].c);
	}
	for (int i=1;i<=N;i++)
		ROW[P[i].a].insert(P[i]);
	for (int i=1;i<=N;i++)
		RENEW(1,0,len,P[i].a);
	l=r=0;q[0]=0;
	for (;l<=r;l++){
		int Y=P[q[l]].d;
		int X=find(1,0,len,Y);
		for (;X<=P[q[l]].c;){
			deal(X);
			RENEW(1,0,len,X);
			X=find(1,0,len,Y);
		}
		if (ans[N])break;
	}
	if (ans[N]){
		printf("%d\n",ans[N]);
		len=0;
		int x=N;
		while (x){
			res[++len]=x;
			x=from[x];
		}
		for (int i=len;i;i--){
			printf("%d",res[i]);
			if (i>1)printf(" ");
			else printf("\n");
		}
	}
	else printf("-1\n");
}
   	 		 	  		 	 					 	  		 			