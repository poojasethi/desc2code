#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

const int N = 100010;
struct tree {
    int lt, rt, val;
}a[N << 2];

struct point {
    int a, b, c, d, id;

    void read(int _id) {
        id = _id;
        scanf("%d%d%d%d", &a, &b, &c, &d);
    }

    friend bool operator < (const point &p, const point &q) {
        if (p.a != q.a) return p.a < q.a;
        return p.b < q.b;
    }
}p[N];

int pre[N], dis[N];

void init(int lt,int rt,int step) {
    a[step].lt = lt;
    a[step].rt = rt;
    if (lt == rt) {
        a[step].val = p[lt].b;
        return;
    }

    int mid = (lt + rt) >> 1;
    init(lt, mid, step << 1);
    init(mid + 1, rt, step << 1 | 1);
    a[step].val = min(a[step << 1].val, a[step << 1 | 1].val);
}

void del(int pos, int step) {
    if (a[step].lt == a[step].rt) {
        a[step].val = 0x7fffffff;
        return;
    }
    if (a[step << 1].rt >= pos) del(pos, step << 1);
    else del(pos, step << 1 | 1);
    a[step].val = min(a[step << 1].val, a[step << 1 | 1].val);
}

queue<int> q;
void bfs(int x, int y, int step, int root, int d) {
    if (p[a[step].lt].a > x) return;
    if (a[step].val > y) return;
    if (a[step].lt == a[step].rt) {
        pre[a[step].lt] = root;
        dis[a[step].lt] = d + 1;
        q.push(a[step].lt);
        a[step].val = 0x7fffffff;
        return;
    }
    bfs(x, y, step << 1, root, d);
    bfs(x, y, step << 1 | 1, root, d);
    a[step].val = min(a[step << 1].val, a[step << 1 | 1].val);
}

void dfs(int n) {
    if (pre[n] != 0) dfs(pre[n]);
    printf("%d ", p[n].id);
}

void bfs(int n) {
   
    bfs(0, 0, 1, 0, 0); 
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        bfs(p[u].c, p[u].d, 1, u, dis[u]);
    }

    for (int i = 1; i <=n; ++i) 
        if (p[i].id == n) {
            if (dis[i] == 0) {
                printf("-1\n");
                return;
            }
            else {
                printf("%d\n", dis[i]);
                dfs(i);
                printf("\n");
            }
        }
}
   
int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
        p[i].read(i);
    }
    sort(p + 1, p + n + 1);
    init(1, n, 1);
    bfs(n);
    return 0;
}

				 	 	 					 			 	   	  	