#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
const int N=1E5+5;
struct map{
    int a,b,c,d,p;
}a[N];
int n,y,p,C[N],l[N],h,t,tr[N*4],f[N],P,x,pre[N];
bool o;

int comp(const map&a,const map&b)
{
    return a.c<b.c;
}

void add(int p,int l,int r,int x,int w)
{
    if (x<l||x>r) return;
    if (l==r)
    {
        tr[p]=w;
        return;
    }
    int mid=(l+r)/2,u;
    add(p*2,l,mid,x,w); add(p*2+1,mid+1,r,x,w);
    tr[p]=max(tr[p*2],tr[p*2+1]);
}

void get(int p,int l,int r,int x,int y,int w)
{
    if (y<l||x>r||tr[p]<w||P) return;
    if (l==r)
    {
        P=l; return;
    }
    int mid=(l+r)/2;
    get(p*2,l,mid,x,y,w); get(p*2+1,mid+1,r,x,y,w);
}

int main()
{
    cin>>n;
    for (int i=1;i<=n;i++) scanf("%d%d%d%d",&a[i].a,&a[i].b,&a[i].c,&a[i].d),a[i].p=i;
    sort(a+1,a+n+1,comp);
    for (int i=1;i<=n;i++) 
    {
        if (a[i].p==n) l[++t]=i,f[i]=1,a[i].d=-1;
        add(1,1,n,i,a[i].d);
        C[i]=a[i].c;
    }
    for (;h<t;)
    {
        x=l[++h];
        if (!a[x].a&&!a[x].b)
        {
            cout<<f[x]<<endl;
            for (;x;x=pre[x]) printf("%d ",a[x].p);
            return 0;
        }
        y=lower_bound(C+1,C+n+1,a[x].a)-C;
        for (;y<=n;y=P+1)
        {
            P=0;
            get(1,1,n,y,n,a[x].b);
            if (!P) break;
            f[P]=f[x]+1; l[++t]=P; pre[P]=x;
            add(1,1,n,P,-1);
        }
    }
    cout<<-1;
}
