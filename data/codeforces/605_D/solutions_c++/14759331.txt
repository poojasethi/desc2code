#include <bits/stdc++.h>

using namespace std;
const int N = 200005;
inline int lowbit (int x) {
	return x & -x;
}

int n , a[N] , b[N] , c[N] , d[N];
int dp[N] , pre[N];
vector <int> hsh;
set <pair <int , int>  > bit[N];
queue <int> que;

int main () {
	cin >> n;
	for (int i = 0 ; i < n ; i ++) {
		cin >> a[i] >> b[i] >> c[i] >> d[i];
		hsh.push_back (a[i]);
		hsh.push_back (c[i]);
	}
	sort (hsh.begin () , hsh.end ());
	hsh.resize (unique (hsh.begin () , hsh.end ()) - hsh.begin ());
	for (int i = 0 ; i < n ; i ++) {
		a[i] = lower_bound (hsh.begin () , hsh.end () , a[i]) - hsh.begin () + 1;
		c[i] = lower_bound (hsh.begin () , hsh.end () , c[i]) - hsh.begin () + 1;
	}
	memset (dp , -1 , sizeof (dp));
	for (int i = 0 ; i < n ; i ++) {
		if (a[i] == 1 && b[i] == 0) {
			dp[i] = 1;
			pre[i] = -1;
			que.push (i);
		}
		else {
			for (int j = a[i] ; j < N ; j += lowbit (j))
				bit[j].insert (make_pair (b[i] , i));
		}
	}
	while (!que.empty ()) {
		int u = que.front () ; que.pop ();
		for (int i = c[u] ; i > 0 ; i -= lowbit (i)) {
			set <pair <int , int>  > :: iterator it = bit[i].upper_bound (make_pair (d[u] , N));
			if (it == bit[i].begin ()) continue;
			it --;
			while (true) {
				int v = it -> second;
				if (dp[v] == -1) {
					pre[v] = u;
					dp[v] = dp[u] + 1;
					que.push (v);
				}
				if (it == bit[i].begin ()) {
					bit[i].erase (it);
					break;
				}
				else {
					bit[i].erase (it --);
				}
			}
		}
	}
	if (dp[n - 1] == -1) {
		cout << -1 << endl;
	}
	else {
		vector <int> ans;
		int now = n - 1;
		while (now != -1) {
			ans.push_back (now + 1);
			now = pre[now];
		}
		cout << (int)ans.size () << endl;
		for (int i = (int)ans.size () - 1 ; i >= 0 ; i --) {
			cout << ans[i] << " ";
		}
	}

		

	return 0;
}
