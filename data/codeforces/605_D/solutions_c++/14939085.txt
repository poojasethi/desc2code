#include<stdio.h>
#include<algorithm>
#include<set>
#define mk make_pair
#define X first
#define Y second
#define N 400005
#define G(x) U[++*U]=x
using namespace std;
typedef pair<int,int> Pair;
int pre[N],Q[N],vis[N];set<Pair>S[N];
int a[N],b[N],c[N],d[N],U[N];
int n,i,x,y,id,h,t,k;
int F(int x){return lower_bound(U+1,U+*U+1,x)-U;}
void Insert(int x,int y,int id){
    for (;x<=*U;x+=x&-x)
        S[x].insert(mk(y,id));
}
void Print(int id){
    int ans=0;
    for (int x=id;x;x=pre[x]) ++ans;
    printf("%d\n",ans);
    for (int x=id;x;x=pre[x]) 
        printf("%d ",x);
}
int main(){
    scanf("%d",&n);
    for (i=1;i<=n;i++)
        scanf("%d%d%d%d",&a[i],&b[i],&c[i],&d[i]),
        G(a[i]),G(b[i]),G(c[i]),G(d[i]);
    sort(U+1,U+*U+1);
    *U=unique(U+1,U+*U+1)-(U+1);
    if (U[1]!=0) return puts("-1"),0;
    for (i=1;i<=n;i++){
        a[i]=F(a[i]),b[i]=F(b[i]),c[i]=F(c[i]),d[i]=F(d[i]);
        if (i<n) Insert(*U-c[i]+1,*U-d[i]+1,i);
  }vis[n]=1;h=0;Q[t=1]=n;
  while (h<t){
    k=Q[++h];
    if (a[k]+b[k]==2) return Print(k),0;
    x=*U-a[k]+1;y=*U-b[k]+1;
    for (;x;x-=x&-x)
        while (!S[x].empty()&&(*S[x].begin()).X<=y){
            id=(*S[x].begin()).Y;
            S[x].erase(S[x].begin());
            if (vis[id]) continue;
            vis[id]=1;pre[id]=k;Q[++t]=id;
      }
  }puts("-1");
}