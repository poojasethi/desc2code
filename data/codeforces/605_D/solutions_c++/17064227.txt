#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>

using namespace std;

template<typename Tp> Tp &read(Tp &x) {
	static char c, f;
	for(f = 0; !isdigit(c = getchar()); ) f |= (c == '-');
	for(x = 0; isdigit(c); c = getchar()) x = x * 10 + c - '0';
	return f ? x = -x : x;
}

template<typename Tp> Tp read() {
	Tp x;
	return read(x);
}

const int N = 100000 + 10;

int a[N], b[N], c[N], d[N];
int seq[N * 2], m;

#include<set>
typedef pair<int, int> pii;
set<pii> st[N * 2];

void insert(int x, const pii &a) {
	for(; 0 < x && x <= m; x += x & -x) st[x].insert(a);
}

#include<vector>
void query(vector<int> &res, int x, int R) {
	for(; 0 < x && x <= m; x ^= x & -x) {
		set<pii>::iterator it, end = st[x].upper_bound(pii(R, N));
		for(it = st[x].begin(); it != end; ++it) res.push_back(it->second);
		st[x].erase(st[x].begin(), end);
	}
}

int discre(int x) {
	return lower_bound(seq, seq + m, x) - seq + 1;
}

#include<queue>
int main() {
#ifdef DEBUG
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif
	
	int n;
	while(~scanf("%d", &n)) {
		m = 0;
		seq[m++] = 0;
		for(int i = 1; i <= n; i++) {
			read(a[i]), read(b[i]), read(c[i]), read(d[i]);
			seq[m++] = a[i], seq[m++] = c[i];
		}
		sort(seq, seq + m);
		m = unique(seq, seq + m) - seq;
		c[0] = discre(0), d[0] = 0;
		for(int i = 1; i <= n; i++) {
			a[i] = discre(a[i]), c[i] = discre(c[i]);
		}
		
		for(int i = 1; i <= m; i++) st[i].clear();
		for(int i = 1; i <= n; i++) {
			insert(a[i], make_pair(b[i], i));
		}
		
		queue<int> q;
		static int dis[N], pre[N];
		memset(dis, -1, sizeof dis);
		dis[0] = 0, q.push(0);
		vector<int> v;
		while(!q.empty()) {
			int u = q.front(); q.pop();
			v.clear(), query(v, c[u], d[u]);
			for(unsigned i = 0; i < v.size(); i++) {
				if(dis[v[i]] >= 0) continue;
				dis[v[i]] = dis[u] + 1;
				pre[v[i]] = u;
				q.push(v[i]);
			}
		}
		printf("%d\n", dis[n]);
		if(dis[n] >= 0) {
			v.clear();
			for(int u = n; u; u = pre[u]) v.push_back(u);
			for(int i = v.size() - 1; i >= 0; i--) {
				printf("%d%c", v[i], " \n"[!i]);
			}
		}
	}
	
	return 0;
}
