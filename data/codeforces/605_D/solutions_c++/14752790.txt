#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define N 200005
#define NN 1000005
#define mp make_pair
#define ll long long
#define BIT(i, j) ((j >> i) & 1)
#define ln 1000000001
#define f first
#define s second
#define pii pair < pair < int, int > , int >
#define Pa pair < int, int >

using namespace std;

typedef int arr[N];
arr a, b, c, d, pre, q, ok, A;
vector <int> res, vx, dd;
set < Pa > Tree[N];

int n, last;

void PRINT(int x)
{
    while(x != n)
    {
        res.push_back(x);
        x = pre[x];
    }
    res.push_back(x);
    cout << res.size() << endl;
    for(int i=0; i<res.size(); i++)
        printf("%d ", res[i]);
}

void Up(int x, Pa Val)
{
    while(x < N)
    {
        Tree[x].insert(Val);
        x += x & (-x);
    }
}

void Get(int x, int V)
{
    dd.clear();
    while(x)
    {
        while(1)
        {
            set < Pa > :: iterator u = Tree[x].lower_bound(mp(V, -1));
            if(u == Tree[x].end())  break;
            dd.push_back(u -> s);
            Tree[x].erase(u);
        }
        x -= x & (-x);
    }
}

int main()
{
  //  filein("inp.txt");  fileout("out.txt");
    cin >> n;
    for(int i=1; i<=n; i++)
    {
        scanf("%d%d%d%d", &a[i], &b[i], &c[i], &d[i]);
        vx.push_back(a[i]);
        vx.push_back(c[i]);
    }
    sort(vx.begin(), vx.end());
    for(int i=1; i<=n; i++)
    {
        A[i] = 2*n + 1 - (lower_bound(vx.begin(), vx.end(), a[i]) - vx.begin());
        c[i] = 2*n + 1 - (lower_bound(vx.begin(), vx.end(), c[i]) - vx.begin());
        Up(c[i], mp(d[i], i));
    }
    int last = 1;
    q[last] = n;
    ok[n] = 1;
    for(int i=1; i<=last; i++)
    {
        int u = q[i];
        if(a[u] == 0 && b[u] == 0)
        {
            PRINT(u);
            return 0;
        }
        Get(A[u], b[u]);
        for(int i=0; i<dd.size(); i++)
        {
            int v = dd[i];
            if(ok[v])   continue;
            ok[v] = 1;
            pre[v] = u;
            q[++last] = v;
        }
    }
    cout << -1;
}
