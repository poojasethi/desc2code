#include <bits/stdc++.h>
//Damned if I don't do everything it takes, damned if I don't take what I want.

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pii> pip;

const int MAXN = 2e5 + 100;

int a[MAXN], b[MAXN], c[MAXN], d[MAXN];
int temp[MAXN], sz;
map<int, int> toint; int idN;

set<pii> fen[MAXN];
map< int, int > par, dis;

void add(int i, pii x, bool flag){
	for (; i < MAXN; i += i & -i)
		if (flag) fen[i].insert(x);
		else fen[i].erase(x);
}

void push(int i, int y, vector<pii> &v){
	v.clear();
	for (; i; i -= i & -i){
		while( fen[i].size() && fen[i].begin()->first <= y )
			v.push_back( *fen[i].begin() ), fen[i].erase(fen[i].begin());
	}
}

int n; 
void print(int x){
	if (x == n) return;
	print( par[x] );
	cout << x + 1 << " ";
}

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	cin >> n;
	
	temp[sz++] = 0;
	for (int i = 0; i < n; i++){
		cin >> a[i] >> b[i] >> c[i] >> d[i];
		temp[sz++] = a[i]; temp[sz++] = c[i];
	}

	sort(temp, temp + sz);
	sz = unique(temp, temp + sz) -temp;
	for (int i = 0; i < sz; i++)
		toint[temp[i]] = i + 1;

	for (int i = 0; i < n; i++)
		add(toint[ a[i] ], pii(b[i], i), true);
	

	dis[ n ] = 0; c[n] = 0; d[n] = 0;
	queue< int > q; q.push( n );

	while( q.size() ){
		int u = q.front(); q.pop();
		int d = dis[ u ];

		vector<pii> G;
		push(toint[ c[u] ], ::d[u], G);

		for (int i = 0; i < G.size(); i++){
			
			int id = G[i].second;
			add( toint[ a[id] ], G[i], false );
			if (!dis.count(id)){
				dis[id] = d + 1;
				par[id] = u;
				q.push(id);
			}

			if (id == n - 1){
				cout << d + 1 << "\n";
				print( n-1 );
				return 0;
			}
		}
			
	}

	cout << -1;

}

