/* QUY` CMNL */
/* QUY` CMNL */
/* QUY` CMNL */
/* QUY` CMNL */
/* QUY` CMNL */
/* QUY` CMNL */
/* QUY` CMNL */
/* QUY` CMNL */
/* QUY` CMNL */
/* QUY` CMNL */
#include<bits/stdc++.h>
using namespace std;
int cnt=0;
vector<int> nen;
map<int,int> ma;
int n;
int a[100100];
int b[100100];
int c[100100];
int d[100100];
int ch[100100];
void compress()
{
    int i;
    reverse(nen.begin(),nen.end());
    for(i=0;i<nen.size();i++){
        if(i+1==nen.size() || nen[i]!=nen[i+1]) ma[nen[i]]=++cnt;
    }
    for(i=1;i<=n;i++){
        b[i]=ma[b[i]]; d[i]=ma[d[i]];
    }
}
bool cmp(int i,int j)
{
    return c[i]>c[j];
}
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
priority_queue<ii> qu;
struct BIT
{
    queue<int> qu[200100];
    void upd(int num,int k)
    {
        if(num>200000) return;
        upd(num+(num&(-num)),k);
        qu[num].push(k);
    }
    void get(int num,int k,int dis)
    {
            if(num<=0) return;
            while(!qu[num].empty()){
                int xx=qu[num].front();
                if(ch[xx]){
                    qu[num].pop(); continue;
                }
                if(c[xx]>=a[k]) {ch[xx]=k;
                ::qu.push(ii(dis-1,xx));
                qu[num].pop();
                }
                else break;
            }
            get(num-(num&(-num)),k,dis);
    }
}it;
vector<int> ad;
queue<int> ans;
void trace(int x)
{
    if(ch[x]==-1) {
        ans.push(x-1);
        return;
    }
    if(x!=1)
    ans.push(x-1);
    trace(ch[x]);
}
bool check=false;
void solve()
{
    qu.push(ii(-1,n));
    ch[n]=-1;
    for(int i=0;i<ad.size();i++){
         it.upd(d[ad[i]],ad[i]);
    }
    while(!qu.empty()){
            ii x=qu.top(); qu.pop();
            it.get(b[x.second],x.second,x.first);
    }
}
int main()
{
    //freopen("test.inp","r",stdin);
    //freopen("test.ans","w",stdout);
    scanf("%d",&n);
    a[1]=b[1]=c[1]=d[1]=0;
    nen.push_back(0);
    n++;
    for(int i=2;i<=n;i++)
    {
        scanf("%d %d %d %d",&a[i],&b[i],&c[i],&d[i]);
        ad.push_back(i);
        nen.push_back(b[i]);nen.push_back(d[i]);
    }
    ad.push_back(1);
    sort(nen.begin(),nen.end());
    compress();
    sort(ad.begin(),ad.end(),cmp);
    solve();
    if(!ch[1]) printf("-1");
    else {trace(1);
    printf("%d\n",ans.size());
    while(!ans.empty()){
        printf("%d ",ans.front()); ans.pop();}
       }
}
