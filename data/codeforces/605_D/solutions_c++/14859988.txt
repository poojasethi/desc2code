#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
struct data{
	int a,b,c,d,n;
}a[110001];
struct tnode{
	int l,r,ls,rs,h;
}t[410001];
struct enode{
	int v,next;
}b[5000001];
int c[110001],i,j,k,n,m,d[110001],dis[110001],q[110001],tot,cot,p[110001],w[110001],l,r;
int bs(int x){
	int l=1,r=n,mid;
	while (l<r-1){
		mid=(l+r)>>1;
		if (c[mid]<=x) l=mid;else r=mid-1;
	}
	return (c[r]<=x)?r:l;
}
bool cmp(data a,data b){
	return a.a<b.a;
}
bool cmp2(int x,int y){
	return a[x].b<a[y].b;
}
void adddata(int x,int &h){
	b[++tot].v=x;b[tot].next=h;h=tot;
}
void mt(int l,int r,int t1,int t2){
	int i,mid,p=++cot;
	t[p].l=l;t[p].r=r;t[p].h=0;
	while (t1<=t2&&a[t1].a<l) t1++;
	while (t1<=t2&&a[t2].a>r) t2--;
	for (d[0]=0,i=t1;i<=t2;i++) d[++d[0]]=i;
	sort(d+1,d+1+d[0],cmp2);
	for (i=d[0];i;i--) adddata(d[i],t[p].h);
	if (l<r){
		mid=(l+r)>>1;
		t[p].ls=cot+1;mt(l,mid,t1,t2);
		t[p].rs=cot+1;mt(mid+1,r,t1,t2);
	}else t[p].ls=t[p].rs=0;
}
void qins(int x,int pe){
	q[++r]=x;p[a[x].n]=pe;
}
void work(int p,int r,int y,int x,int pe){
	int mid;
	if (t[p].r<=r){
		for (;t[p].h&&a[b[t[p].h].v].b<=y;t[p].h=b[t[p].h].next)
		 if (!dis[a[b[t[p].h].v].n]){
		 	dis[a[b[t[p].h].v].n]=x+1;qins(b[t[p].h].v,pe);
		 }
		return;
	}
	mid=(t[p].l+t[p].r)>>1;
	work(t[p].ls,r,y,x,pe);
	if (mid+1<=r) work(t[p].rs,r,y,x,pe);
}
int main(){
	scanf("%d",&n);tot=cot=0;
	for (i=1;i<=n;i++) a[i].n=i,scanf("%d%d%d%d",&a[i].a,&a[i].b,&a[i].c,&a[i].d),c[i]=a[i].a;
	sort(c+1,c+1+n);
	if (c[1]){
		puts("-1");return 0;
	}
	for (i=1;i<=n;i++) a[i].a=bs(a[i].a);
	sort(a+1,a+1+n,cmp);
	mt(1,n,1,n);q[1]=n+1;dis[n+1]=1;a[n+1].c=a[n+1].d=0;a[n+1].n=n+1;
	for (l=0,r=1;l<r;){
		j=q[++l];k=bs(a[j].c);
		work(1,k,a[j].d,dis[a[j].n],a[j].n);
	}
	if (!dis[n]){
		puts("-1");return 0;
	}
	printf("%d\n",dis[n]-1);
	for (i=dis[n]-1,j=n;i;i--,j=p[j]) w[i]=j;
	for (i=1;i<dis[n];i++) printf("%d ",w[i]);
	puts("");
	return 0;
}