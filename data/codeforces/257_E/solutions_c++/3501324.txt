#include <cstdio>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <iostream>
using namespace std;

bool solve()
{
	int n,m;
	if (scanf("%d%d",&n,&m)==EOF)
		return false;
	vector<int> t(n),s(n),f(n);
	vector<pair<int,int> > p(n);
	for (int i=0;i<n;++i) {
		scanf("%d%d%d",&t[i],&s[i],&f[i]);
		p[i].first = t[i];
		p[i].second = i;
	}
	sort(p.rbegin(),p.rend());
	priority_queue<pair<int,int> > lup,ldown,up,down;
	vector<long long> ans(n);
	long long time = 0;
	int et=1;
	for(;;) {
		while (!lup.empty() && abs(lup.top().first)==et) {
			ans[lup.top().second] = time;
			lup.pop();
		}
		while (!ldown.empty() && abs(ldown.top().first)==et) {
			ans[ldown.top().second] = time;
			ldown.pop();
		}
		while (!p.empty() && p.back().first==time) {
			if (s[p.back().second]<et)
				down.push(make_pair(s[p.back().second],p.back().second));
			else
				up.push(make_pair(-s[p.back().second],p.back().second));
			p.pop_back();
		}
		while (!down.empty() && abs(down.top().first)==et) {
			if (f[down.top().second]<et)
				ldown.push(make_pair(f[down.top().second],down.top().second));
			else
				lup.push(make_pair(-f[down.top().second],down.top().second));
			down.pop();
		}
		while (!up.empty() && abs(up.top().first)==et) {
			if (f[up.top().second]<et)
				ldown.push(make_pair(f[up.top().second],up.top().second));
			else
				lup.push(make_pair(-f[up.top().second],up.top().second));
			up.pop();
		}
		if (lup.empty()&&ldown.empty()&&up.empty()&&down.empty()) {
			if (p.empty())
				break;
			time = p.back().first;
			continue;
		}
		int delta = 1000000000;
		if (!p.empty())
			delta = p.back().first-time;
		if (lup.size()+up.size()>=ldown.size()+down.size()) {
			int de = 1000000000;
			if (!up.empty())
				de = min(de,abs(up.top().first));
			if (!lup.empty())
				de = min(de,abs(lup.top().first));
			delta = min(delta,de-et);
			et += delta;
		} else {
			int de = 0;
			if (!down.empty())
				de = max(de,abs(down.top().first));
			if (!ldown.empty())
				de = max(de,abs(ldown.top().first));
			delta = min(delta,et-de);
			et -= delta;
		}
		time += delta;
	}
	for (int i=0;i<n;++i)
		cout << ans[i] << endl;
	return true;
}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	while (solve())
		printf("\n");
#endif
	solve();
	return 0;
}

