#include <bits/stdc++.h>
#define maxn 100010
#define f first
#define s second
#define mp make_pair
#define oo 100000000000000000

using namespace std;
typedef long long ll;
typedef pair <int,int> p1;
typedef pair < pair<ll,int> ,p1 > p2;
ll kq[maxn],tg;
int n,m,f1[maxn],dem;
set < p1 > u1,u2,d1,d2;
p2 a[maxn];

void nhap()
{
    cin>>n>>m;
    for (int i=1 ; i<=n ; i++)
    {
        scanf("%I64d%d%d",&a[i].f.f,&a[i].s.f,&a[i].s.s);
        a[i].f.s=i;
        f1[i]=a[i].s.s;
    }
}

void cbi()
{
    sort(a+1,a+n+1);
    dem=1;
    a[n+1].f.f=oo;
}

void push(int x,int y)
{
    if (x==dem) kq[y]=tg;
    if (x>dem) u1.insert(mp(x,y));
    if (x<dem) d1.insert(mp(x,y));
}

int getu(const set < p1 > &st)
{
    if(!st.size()) return oo;
    return (st.begin()-> f);
}

int getd(const set < p1 > &st)
{
    if(!st.size()) return 0;
    return (st.rbegin() -> f);
}

void doi(ll x)
{
    ll d;
    while (x)
    {
        if (u1.size()+u2.size()+d1.size()+d2.size()==0) break;
        if (u1.size()+u2.size()>=d1.size()+d2.size())
        {
            d=min(getu(u1),getu(u2));
            d=min(d,dem+x);
            tg+=d-dem;
            x-=d-dem;
            dem=d;
            while (u1.size() && u1.begin() -> f==d)
            {
                kq[u1.begin()-> s]=tg;
                u1.erase(u1.begin());
            }
            while (u2.size() && u2.begin() -> f==d)
            {
                push(f1[u2.begin() -> s],u2.begin() -> s);
                u2.erase(u2.begin());
            }
        }
        else
        {
            d=max(getd(d1),getd(d2));
            d=max(d,dem-x);
            tg+=dem-d;
            x-=dem-d;
            dem=d;
            while (d1.size() && d1.rbegin() -> f==d)
            {
                kq[d1.rbegin() -> s] = tg;
                d1.erase(--d1.end());
            }
            while (d2.size() && d2.rbegin() -> f==d)
            {
                push(f1[d2.rbegin() -> s],d2.rbegin() -> s);
                d2.erase(--d2.end());
            }
        }
    }
}

void xuli()
{
    for (int i=1 ; i<=n ; i++)
    {
        tg=a[i].f.f;
        if (dem==a[i].s.f) push(a[i].s.s,a[i].f.s);
        if (dem<a[i].s.f) u2.insert(mp(a[i].s.f,a[i].f.s));
        if (dem>a[i].s.f) d2.insert(mp(a[i].s.f,a[i].f.s));
        doi(a[i+1].f.f-a[i].f.f);
    }
    for (int i=1 ; i<=n ; i++)
        printf("%I64d\n",kq[i]);
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("GreedyElevator.inp","r",stdin );
    freopen("GreedyElevator.out","w",stdout);
    #endif // ONLINE_JUDGE
    nhap();
    cbi();
    xuli();
    return 0;
}
