#include <map>
#include <set>
#include <list>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <bitset>
#include <vector>
#include <cstdio>
#include <string>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
using namespace std;
struct node {
	int x,y,z;
	long long f;
}g[100005];
int p[100005],m,w;
long long a[100005],t;
vector<pair<int,int> > b[100005];
bool comp (const node &a,const node &b) {
	return a.f<b.f;
}
int solve (int x) {
	int s=0;
	for (;x;x-=x&-x) s+=p[x];
	return s;
}
void add (int x,int y) {
	for (;x<=m;x+=x&-x) p[x]+=y;
}
void work ( ) {
	int i;
	for (i=0;i<b[w].size();i++) {
		pair<int,int> x=b[w][i];
		if (x.second==0) a[x.first]=t;
		else {
			b[x.first].push_back(make_pair(x.second,0));
			add(x.first,1);
		}
	}
	b[w].clear();
	add(w,-(solve(w)-solve(w-1)));
}
int find (int x) {
	int i,t,y=0;
	for (i=19;i>=0;i--) {
		t=y+(1<<i);
		if (t<=m && p[t]<x) {x-=p[t];y=t;}
	}
	return y+1;
}
int main ( ) {
	int n,i,j,s,x,y;
	scanf("%d%d",&n,&m);
	for (i=1;i<=n;i++) {
		scanf("%I64d%d%d",&g[i].f,&g[i].x,&g[i].y);
		g[i].z=i;
	}
	sort(g+1,g+n+1,comp);
	w=1;t=0;g[n+1].f=1e17;
	for (i=1;i<=n+1;i=j) {
		for (;t<g[i].f;) {
			s=solve(m);
			if (!s) break;
			x=solve(w);
			if (s-x>=x) {
				y=find(x+1);
				if (y-w+t<g[i].f) {
					t+=y-w;w=y;work();
					continue;
				}
				else {w+=g[i].f-t;break;}
			}
			else {
				y=find(x);
				if (w-y+t<g[i].f) {
					t+=w-y;w=y;
					work();
					continue;
				}
				else {w-=g[i].f-t;break;}
			}
		}
		if (i>n) break;
		t=g[i].f;
		for (j=i;j<=n && g[j].f==g[i].f;j++) {
			node x=g[j];
			add(x.x,1);
			b[x.x].push_back(make_pair(x.y,x.z));
		}
		work();
	}
	for (i=1;i<=n;i++) printf("%I64d\n",a[i]);
	return 0;
}
/*
Sample test(s)

input

3 10
1 2 7
3 6 5
3 4 8

output

7
11
8

input

2 10
1 2 5
7 4 5

output

5
9
*/
