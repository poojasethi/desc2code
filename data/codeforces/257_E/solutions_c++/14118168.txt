#include <cstdio>
#include <algorithm>
#include <set>
using namespace std;
typedef long long ll;
const int N=(int)1e5+5;
ll ans[N];
struct person{
	int t,s,f,num;
	void read(){
		scanf("%d%d%d",&t,&s,&f);
	}
	bool operator < (const person &b) const{
		return t<b.t;
	}
} a[N];
typedef pair<ll,int> data;
int n,m,X,D,sl,sr;
ll T;
multiset<data> s;
typedef multiset<data>::iterator iter;

int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) a[i].num=i,a[i].read();
	sort(a+1,a+n+1);
	T=0;	
	X=1;
	D=0;
	int i=1;
	while(i<=n||!s.empty()){
		iter tmp;
		if(D==1)
			tmp=s.lower_bound(data(X,-N));
		else
		if(D==-1){
			tmp=s.upper_bound(data(X,+N));
			if(tmp==s.begin())
				tmp=s.end();
			else
				--tmp;
		}
		else
			tmp=s.end();
		if(i>n||tmp!=s.end()&&(tmp->first-X)*D<=a[i].t-T){
			T+=(tmp->first-X)*D;
			int tx=X;
			X=tmp->first;
			if(X<tx){
				iter beg=s.lower_bound(data(X,-N)),end=s.lower_bound(data(X,+N));
				for(;beg!=end;beg++) sl--,sr++;
			}
			if(tmp->second>0){
				s.insert(data(a[tmp->second].f,-tmp->second));
				if(a[tmp->second].f>=X) sr++; else sl++;
			}
			else{
				ans[a[-tmp->second].num]=T;
			}
			if(tmp->first>=X) sr--; else sl--;
			s.erase(tmp);
		}
		else{
			X+=(a[i].t-T)*D;
			T=a[i].t;
			s.insert(data(a[i].s,i));
			if(a[i].s>=X) sr++; else sl++;
			i++;
		}
		if(sr==0&&sl==0)
			D=0;
		else
		if(sr>=sl)
			D=1;
		else
			D=-1;
	}
	for(int i=1;i<=n;i++) printf("%I64d\n",ans[i]);
}
