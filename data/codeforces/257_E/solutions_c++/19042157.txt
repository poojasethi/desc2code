#include<cstdio>
#include<algorithm>
#include<cstring>
#include<set>
#include<vector>
using namespace std;

const int N=100010;
struct node{
	int t,a,b,id;
	void init(int i){
		id=i;
		scanf("%d%d%d",&t,&a,&b);
	}
	friend bool operator <(node x,node y){
		return x.t<y.t;
	}
}p[N];
set<int>S;
vector<int>st[N],en[N];
set<int>::iterator ii;
typedef long long ll;
ll ans[N],tmp,tn;
int pn,now=1,flag,rn,ln,n,m;

int abs(int x){
	return x<0?-x:x;
}
int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) p[i].init(i);
	sort(p+1,p+1+n);
	tn=0; pn=1; ln=0; rn=0;
	while(true){
		if(rn>=ln) ii=S.upper_bound(pn),flag=1;
		else ii=S.lower_bound(pn),ii--,flag=-1;
		if(rn==0&&ln==0) flag=0;
		if(ii==S.end()) tmp=1e18;
		else tmp=abs(pn-*ii)+tn;
		if(tmp<=p[now].t||now>n){
			pn=*ii; tn=tmp;
			while(!en[pn].empty()){
				int x=en[pn][en[pn].size()-1];
				en[pn].pop_back();
				if(flag==1) rn--; else ln--;
				ans[p[x].id]=tn;
			}
			while(!st[pn].empty()){
				int x=st[pn][st[pn].size()-1];
				st[pn].pop_back();
				if(flag==1) rn--; else ln--;
				if(p[x].b>pn) rn++; else ln++;
				en[p[x].b].push_back(x);
				S.insert(p[x].b);
			}
			S.erase(ii);
		}
		else {
			pn+=flag*(p[now].t-tn); 
			tn=p[now].t;
			if(p[now].a!=pn){
				st[p[now].a].push_back(now);
				if(p[now].a<pn) ln++; else rn++;
				S.insert(p[now].a);
			}
			else{
				en[p[now].b].push_back(now);
				if(p[now].b<pn) ln++; else rn++;
				S.insert(p[now].b);
			}
			now++;
		}
		if(now>n&&ln==0&&rn==0) break;
	}
	for(int i=1;i<=n;i++) printf("%I64d\n",ans[i]);
	return 0;
}