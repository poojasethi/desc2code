//
// ^|feennohmo_taI_g__d
//
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <deque>
#include <set>
#include <vector>
#include <map>
#include <string>
#include <cstring>
#include <iomanip>
#include <cstdio>
#include <fstream>
#include <sstream>

#define For(i,a,n) for(long long i =a ; i < n ; ++i )
#define all(x) (x).begin(),(x).end()
#define n(x) (long long)(x).size()
#define pb(x) push_back(x)

using namespace std;
typedef pair<long long,long long> pii;
const long long maxn = 100*1000+100;

set <pii> s1;
set <pii> s2;
set <pii> ti;
long long s[maxn];
long long f[maxn];
long long t[maxn];
long long cur;
long long curtime;
long long mark[maxn];
long long ans[maxn];
long long n , m;

void insert ( long long x , long long id)
{
	if(x <= cur)
		s1.insert(pii(x,id));
	else
		s2.insert(pii(x,id));
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> m;
	For(i,0,n)
	{
		cin >> t[i] >> s[i] >> f[i];
		s[i]--;
		f[i]--;
		ti.insert(pii(t[i],i));
	}
	while(!ti.empty()||!s1.empty()||!s2.empty())
	{
		while(!ti.empty() && ti.begin()->first <= curtime)
		{
			long long id = ti.begin()->second;
			ti.erase(ti.begin());
			insert(s[id],id);
		}
		while(!s2.empty() && s2.begin()->first == cur)
		{
			long long id=s2.begin()->second;
			s2.erase(s2.begin());
			ans[id]=curtime;
			if(mark[id]==false)
			{
				mark[id]=true;
				insert(f[id],id);
			}
		}
		set<pii>::iterator it;
		while(!s1.empty() &&(it=(--s1.end()))->first == cur)
		{
			long long id=(it)->second;
			s1.erase(it);
			if(!s1.empty())
				it=(--s1.end());
			ans[id]=curtime;
			if(mark[id]==false)
			{
				mark[id]=true;
				insert(f[id],id);
			}
		}
		long long jah = 0;
		long long mov = 1;
		if(s1.empty() && s2.empty())
		{
			if(ti.empty())
				break;
			mov=ti.begin()->first-curtime;
		}
		else if(n(s1) <= n(s2))
		{
			jah=1;
			mov=s2.begin()->first-cur;
			if(n(ti))
				mov=min(mov,ti.begin()->first-curtime);

		}
		else 
		{
			jah=-1;
			mov=cur-it->first;
			if(n(ti))
				mov=min(mov,ti.begin()->first-curtime);
		}
		cur+=mov*jah;
		curtime+=mov;
//		cerr << mov << " " << jah << " " << cur << " "  << curtime << endl;
	}
	For(i,0,n)
		cout << ans[i] << endl;
	return 0;
}
