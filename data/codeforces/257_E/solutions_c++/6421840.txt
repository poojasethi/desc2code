#include <iostream>
#include <cstdio>
#include <cmath>
#include <queue>
#include <set>
using namespace std;
struct person
{
    long long int id,s,to,t,pow;
    bool operator <(const person &b)const{
       return t>b.t;}
};
long long int n,m,PowNow,TNow,FNow=1,T2,TNew,f,FNew,pr[100010],INF=(1LL << 60) ;
set<long long int>wait;
queue<person>Floor[100010];
priority_queue<person>q;
int main()
{
    //freopen("r.txt","r",stdin);
    wait.insert(-INF) , wait.insert(INF);
    person z;z.t=INF;
    q.push(z);
    scanf("%I64d %I64d",&n,&m);
    for(int i=0;i<n;i++)
    {
        person z;
        scanf("%I64d %I64d %I64d",&z.t,&z.s,&z.to);
        z.id=i , z.pow=0;
        q.push(z);
    }
    while(q.size()>1 || wait.size()>2 )
    {
        while(q.top().t==TNow) ///to check people who will enter at this momnet
        {
            person z=q.top();
            if(z.s!=FNow) /// 1:if z.s > , -1 else
                z.pow=(z.s>FNow)*2-1  ;
            PowNow+=z.pow , Floor[z.s].push(z) , wait.insert(z.s);
            q.pop();
        }
        while(!Floor[FNow].empty())
        {
            person z=Floor[FNow].front();
            PowNow-=z.pow;
            if(z.s==FNow) ///this person is entering the elevator
            {
                if(z.to!=FNow) z.pow=(z.to>FNow)*2-1  ; ///his power will be with a new value because it will be changed by the end floor not the start one
                PowNow+=z.pow , Floor[z.to].push(z) , wait.insert(z.to);///i want to visit the floor he wants to leave
            }
            else ///this person is leaving the elevator
            {
                pr[z.id]=TNow;
            }
            Floor[FNow].pop();
        }
        f=0;
        wait.erase(FNow); ///i already visited this floor and took all people in and out
        if(wait.size()!=2) /// people fron inside or outside the elevator are still calling
            f = (PowNow>=0)*2-1;
        set<long long int>::iterator ii=wait.lower_bound(FNow);
        if(f==-1) --ii;
        T2=abs(*ii-FNow)+TNow;
        TNew=min(T2,q.top().t);
        FNow+=(TNew-TNow)*f; ///difference  between el 2 times + up or down
        TNow=TNew;
    }
    for(int i=0;i<n;i++)
        printf("%I64d\n",pr[i]);

    return 0;
}