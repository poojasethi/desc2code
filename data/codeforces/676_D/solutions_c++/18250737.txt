#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;

const int N = 1010;
const int ah[4] = {-1,0,1,0},al[4] = {0,1,0,-1};
/*
 0
3 1
 2
00 <-> 10
01 <-> 11
d^2
*/
int n,m;
bool door[150][4],v[N][N][4];
char map[N][N];
int dis[N][N][4];
struct sta {
	int x,y,s;
	sta(){}
	sta(int xx,int yy,int ss) {
		x = xx,y = yy,s = ss;
	}
}q[N*N*4];

inline bool access(int x,int y,int s,int d) {
	return door[map[x][y]][d-s+4&3]
		&& door[map[x+ah[d]][y+al[d]]][(d^2)-s+4&3];
	//door[0][i] = 0£¬±ß½ç×ÔÈ»´¦Àí 
}

int bfs(int x,int y,int xm,int ym)
{
	if(x==xm && y==ym) return 1;
	int h = 0,t = 0,i,s,nx,ny;
	
	memset(dis, 0x3f, sizeof(dis));
	dis[x][y][0] = 0;
	
	q[0] = sta(x,y,0);
	v[x][y][0] = 1;
	
	for(; h<=t; h++) {
		x = q[h].x, y = q[h].y, s = q[h].s;
		for(i = 0; i<4; i++) //go
		{
			nx = x+ah[i],ny = y+al[i];
			if(!v[nx][ny][s] && access(x,y,s,i)) {
				v[nx][ny][s] = 1;
				q[++t] = sta(nx,ny,s);
				dis[nx][ny][s] = dis[x][y][s]+1;
				if(nx==xm && ny==ym) return 1;
			}
		}
		if(!v[x][y][s+1&3]) { //rotate
			v[x][y][s+1&3] = 1;
			q[++t] = sta(x,y,s+1&3);
			dis[x][y][s+1&3] = dis[x][y][s]+1;
		}
	}
	return 0;
}

void add(char c,int u,int r,int d,int l)
{
	door[c][0] = u;
	door[c][1] = r;
	door[c][2] = d;
	door[c][3] = l;
}
void preset()
{
	add('+',1,1,1,1);
	add('-',0,1,0,1);
	add('|',1,0,1,0);
	add('^',1,0,0,0);
	add('>',0,1,0,0);
	add('v',0,0,1,0);
	add('<',0,0,0,1);
	add('U',0,1,1,1);
	add('R',1,0,1,1);
	add('D',1,1,0,1);
	add('L',1,1,1,0);
	add('*',0,0,0,0);
}

int main()
{
	int i,x,y,xm,ym;
	cin >> n >> m;
	for(i = 1; i<=n; i++)
		scanf("%s", map[i]+1);
	scanf("%d%d%d%d", &x,&y,&xm,&ym);
	preset();
	int flag = bfs(x,y,xm,ym);
	if(!flag) printf("-1");
	else {
		int ans = 100000000;
		for(i = 0; i<4; i++)
			ans = min(ans, dis[xm][ym][i]);
		printf("%d", ans);
	}
	return 0;
}
