#include <bits/stdc++.h>

using namespace std;

/*
  URDL
* 0000 0
< 0001 1
v 0010 2
> 0100 4
- 0101 5
U 0111 7
^ 1000 8
| 1010 10
R 1011 11
D 1101 13
L 1110 14
+ 1111 15
*/
char str[] = {'*', '<', 'v', '>', '-', 'U', '^', '|', 'R', 'D', 'L', '+'};
int arr[] =  { 0,   1,   2,   4,   5,   7,   8,   10,  11,  13,  14,  15};
int di[] = {1, -1, 0,  0};
int dj[] = {0,  0, 1, -1};
const int N = 1009;
bool vis[N][N][4];
int grid[N][N];
int n, m;
int a, b, x, y;

struct item {
  int x, y, c, p;
  bool operator>(const item &it) const {
    return p > it.p;
  }
};

bool comp(int msk1, int msk2, int j, int c) {
  while(c--) {
    if(msk1 & 1) msk1 |= (1 << 4);
    if(msk2 & 1) msk2 |= (1 << 4);
    msk1 >>= 1;
    msk2 >>= 1;
  }
  int c1, c2;
  if(j == 0) c1 = 1, c2 = 3;
  else if(j == 1) c1 = 3, c2 = 1;
  else if(j == 2) c1 = 2, c2 = 0;
  else c1 = 0, c2 = 2;
  return ((msk1 >> c1) & 1) && ((msk2 >> c2) & 1);
}

int solve() {
  priority_queue<item, vector<item>, greater<item> > q;
  item it, nit;
  int nx, ny, nc;
  it.x = a, it.y = b, it.c = 0, it.p = 0;
  q.push(it);
  while(q.size()) {
    it = q.top(), q.pop();
    if(it.x == x && it.y == y) return it.p;
    if(vis[it.x][it.y][it.c]) continue;
    vis[it.x][it.y][it.c] = true;
    for(int i = 0; i < 4; ++i) {
      nx = it.x + di[i];
      ny = it.y + dj[i];
      nc = it.c;
      if(vis[nx][ny][nc]) continue;
      if(!comp(grid[it.x][it.y], grid[nx][ny], i, it.c)) continue;
      nit.x = nx, nit.y = ny, nit.c = nc, nit.p = it.p + 1;
      q.push(nit);
    }
    for(int i = 1; i < 4; ++i) {
      it.c = (it.c + 1) % 4;
      ++it.p;
      if(vis[it.x][it.y][it.c]) continue;
      q.push(it);
    }
  }
  return -1;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL), cout.tie(NULL);
//  freopen("input.txt", "rt", stdin);

  cin >> n >> m;
  for(int i = 1; i <= n; ++i)
    for(int j = 1; j <= m; ++j) {
      char c;
      cin >> c;
      grid[i][j] = arr[strchr(str, c) - str];
    }
  cin >> a >> b >> x >> y;
  cout << solve();

  return 0;
}
