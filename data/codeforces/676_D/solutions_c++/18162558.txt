#include <bits/stdc++.h>
#define ll long long
#define mst(a,x) memset(a,x,sizeof(a))
#define For(i, t) for(int i = 0; i < t; i++)
#define Debug(x) cerr << #x << " = "  << x << endl;
using namespace std;

const int N = 1005;
const int dx[4] = {-1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};
const int dz[4][2] = {{0, 2}, {2, 0}, {1, 3}, {3, 1}};
int n, m, sx, sy, ex, ey;
char mp[256], s[N][N];
int a[N][N];
struct Triple{
	int x, y, z;
};
queue <Triple> q;
int vis[N][N][4];

void prepare() {
	mp['+'] = 15;
	mp['-'] = 10;
	mp['|'] = 5;
	mp['^'] = 1;

	mp['>'] = 8;
	mp['<'] = 2;
	mp['v'] = 4;
	mp['L'] = 13;

	mp['R'] = 7;
	mp['U'] = 14;
	mp['D'] = 11;
	mp['*'] = 0;
}

void push(int x, int y, int z, int t) {
	if(~vis[x][y][z]) return;
	vis[x][y][z] = t;
	q.push((Triple){x, y, z});
}

int Ror(int x, int t) {
	int ret = (x >> t) | (x << (4 - t));
	ret &= 15;
	return ret;
}

int bfs() {
	Triple cur;

	push(sx, sy, 0, 0);
	while(!q.empty()) {
		cur = q.front(), q.pop();
		int t = vis[cur.x][cur.y][cur.z];
		if(cur.x == ex && cur.y == ey) return t;
		For(i, 4) {
			int x = cur.x + dx[i];
			int y = cur.y + dy[i];
			if(x < 0 || x >= n || y < 0 || y >= m) continue;
			bool f1 = Ror(a[cur.x][cur.y], cur.z) >> dz[i][0] & 1;
			bool f2 = Ror(a[x][y], cur.z)  >> dz[i][1] & 1;
			if(f1 && f2) 
				push(x, y, cur.z, t + 1);
		}
		push(cur.x, cur.y, (cur.z + 1) % 4, t + 1);
	}
	return -1;
}

int main() {
	prepare();
	scanf("%d%d", &n, &m);
	For(i, n) scanf("%s", s[i]);
	For(i, n)
		For(j, m)
		 a[i][j] = mp[s[i][j]];

	scanf("%d%d%d%d", &sx, &sy, &ex, &ey);
	sx--, sy--, ex--, ey--;
	mst(vis, -1);
	printf("%d\n", bfs());
	return 0;
}

		  	 			 		  	  		 	 			  		 	