#include <bits/stdc++.h>

using namespace std;

bool vis[4][1010][1010];

char grid[4][1010][1010];

int ans;
int dept;

int sx,sy,ex,ey;
int n,m;
struct State{
	int x,y,z;
};
queue<State> q;

int d[4][2]={-1,0,0,1,1,0,0,-1};
int h[4] = {2,3,0,1};

int tran[256];

void bfs(){
	q.push((State){sx,sy,0});
	vis[0][sx][sy]=true;
	int dept=0;
	while(!q.empty()){
		int t=q.size();
		while(t--){
			State state = q.front();
			q.pop();
			int x=state.x;
			int y=state.y;
			int z=state.z;

			//printf("%d %d %d\n",x,y,z);
			if(x==ex&&y==ey){
				ans=dept;
				return;
			}
			for(int k=0;k<4;k++){
				int dx=x+d[k][0];
				int dy=y+d[k][1];
				if( (tran[grid[z][x][y]] & (1<<k) ) &&  (tran[grid[z][dx][dy]] & (1<<h[k]) )){
					if(vis[z][dx][dy]==false){
						vis[z][dx][dy]=true;
						q.push((State){dx,dy,z});
					}
				}
			}
			int dz=z+1;
			if(dz==4)dz=0;
			if(vis[dz][x][y]==false){
				vis[dz][x][y]=true;
				q.push((State){x,y,dz});
			}
		}
		dept++;
	}
}

char nextChar[256];

int main(){
	// up : 1
	// right : 2
	// down : 4
	// left : 8

	nextChar['+']='+'; tran['+']=15;
	nextChar['-']='|'; tran['-']=10; 
	nextChar['|']='-'; tran['|']=5;
	nextChar['^']='>'; tran['^']=1;
	nextChar['>']='v'; tran['>']=2;
	nextChar['<']='^'; tran['<']=8;
	nextChar['v']='<'; tran['v']=4;
	nextChar['L']='U'; tran['L']=7;
	nextChar['R']='D'; tran['R']=13;
	nextChar['U']='R'; tran['U']=14;
	nextChar['D']='L'; tran['D']=11;
	nextChar['*']='*'; tran['*']=0;
	
	memset(grid,'*',sizeof(grid));
	memset(vis,false,sizeof(vis));
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++){
		scanf("%s",grid[0][i]+1);
		for(int j=1;j<4;j++){
			for(int k=1;k<=m;k++){
				grid[j][i][k]=nextChar[grid[j-1][i][k]];
			}
			grid[j][i][m+2]='\0';
			//printf("%s\n",grid[j][i]+1);
		}
		grid[0][i][m+2]='\0';
		//printf("%s\n",grid[0][i]+1);
	}

	scanf("%d%d%d%d",&sx,&sy,&ex,&ey);
	ans=-1;
	bfs();
	printf("%d\n",ans);
}
