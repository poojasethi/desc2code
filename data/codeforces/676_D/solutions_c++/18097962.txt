#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>

using namespace std;

const int N = 1005;

int n,m;

int inq[N][N][5];

int dx[4] = {-1,0,1,0};

int dy[4] = {0,1,0,-1};


int edge(int x,int y){
	return (x <= 0 || x > n || y <= 0 || y >  m);
}

string mapp(char ch){
	if (ch == '+') return "1111";
	if (ch == '-') return "0101";
	if (ch == '|') return "1010";
	if (ch == '^') return "1000";
	if (ch == 'v') return "0010";
	if (ch == '<') return "0001";
	if (ch == '>') return "0100";
	if (ch == 'L') return "1110";
	if (ch == 'R') return "1011";
	if (ch == 'U') return "0111";
 	if (ch == 'D') return "1101";
 	if (ch == '*') return "0000";
}

typedef struct seg{
	int x,y,t,s;
}seg;

seg q[N * N * 10];

char c[N][N];

int bfs(int x,int y,int tx,int ty){
	int h = 1; int t = 1;
	inq[x][y][0] = 1;
	seg sq;
	sq.x = x;
	sq.y = y;
	sq.t = 0;
	sq.s = 0;
	q[h] = sq;
	while(h <= t){
		seg tp = q[h++];
		if (tp.x == tx && tp.y == ty) return tp.s;
		string dir = mapp(c[tp.x][tp.y - 1]);
		//cout << tp.x << " " << tp.y << " " << tp.t << " " << tp.s << endl;
		for (int i = 0;i < 4;i++){
			int w = (i - tp.t + 4) % 4;
			if (dir[w] == '0') continue;
			int x = dx[i] + tp.x;
			int y = dy[i] + tp.y;
			string dir2 = mapp(c[x][y-1]);
			int w2 = ((i + 2) % 4 - tp.t + 4) % 4;
			if (dir2[w2] == '0') continue;
			if (edge(x,y)) continue;
			if (inq[x][y][tp.t]) continue;
			inq[x][y][tp.t] = 1;
			seg np;
			np.x = x;
			np.y = y;
			np.s = tp.s + 1;
			np.t = tp.t;
			q[++t] = np;
		}
		for (int i = 1;i <= 1;i++){
			int w = (tp.t + i) % 4;
			if(inq[tp.x][tp.y][w]) continue;
			inq[tp.x][tp.y][w] = 1;
			seg np = tp;
			np.t = w;
			np.s += i;
			q[++t] = np;
 		}
	}
	//cout << inq[1][1][3] << endl;
	return -1;
}

int main(){
	cin >> n >> m;
	for (int i = 1;i <= n;i++)
		scanf("%s",c[i]);
	int x,y,xx,yy;
	cin >> x >> y >> xx >> yy;
	cout << bfs(x,y,xx,yy) << endl;
}
