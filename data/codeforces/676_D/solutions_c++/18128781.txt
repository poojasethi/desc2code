#include <iostream>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <map>
using namespace std;
const int maxn = 1000+10;
#define mk make_pair
#define X first
#define Y second
const int dirX[4] = {-1,0,1,0};
const int dirY[4] = {0,1,0,-1};
struct Node{
  int x,y,r,dis;
  Node(int x = 0,int y = 0,int r = 0,int dis = 0):x(x),y(y),r(r),dis(dis){}
};
int n,m;
bool vis[maxn][maxn][4];
char mat[maxn][maxn];

int x1,y1,x2,y2;

bool check(int id,char ch) {
  if(id==0) return ch == '+' || ch=='|' || ch=='^' || ch=='L' || ch == 'D' || ch=='R';
  else if(id==1) return ch == '+' || ch=='-' || ch=='>' || ch=='L' || ch == 'U' || ch=='D';
  else if(id==2) return ch == '+' || ch=='|' || ch=='v' || ch=='L' || ch == 'U' || ch=='R';
  else return ch == '+' || ch=='-' || ch=='<' || ch=='R' || ch == 'U' || ch=='D';
}

bool check2(int x,int y) {
  return x >= 0 && x < n && y >= 0 && y < m;
}

int bfs() {
  queue<Node> que;
  que.push(Node(x1-1,y1-1,0,0));
  vis[x1-1][y1-1][0] = true;
  while(!que.empty()) {
    Node t = que.front();
    
    que.pop();
    if(t.x==x2-1 && t.y == y2-1) return t.dis;
    if(!vis[t.x][t.y][(t.r+1)%4]) {
      vis[t.x][t.y][(t.r+1)%4] = true;
      que.push(Node(t.x,t.y,(t.r+1)%4,t.dis+1));
    }
    for(int i = 0; i < 4; i++) {
      int nX = t.x + dirX[i];
      int nY = t.y + dirY[i];
      if(check2(nX,nY) && !vis[nX][nY][t.r] && check((i-t.r+8)%4,mat[t.x][t.y]) && check((i-t.r+2+8)%4,mat[nX][nY])) {
        //cout<<t.x<<" "<<t.y<<" "<<t.r<<endl;
        //cout<<mat[t.x][t.y]<<" "<<t.r+i<<endl;
        //cout<<mat[nX][nY]<<" "<<(t.r+i+2)%4<<endl;
        vis[nX][nY][t.r] = true;
        que.push(Node(nX,nY,t.r,t.dis+1)); 
      }
    }
  }
  return -1;

}
int main() {
	ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
	#ifndef ONLINE_JUDGE
  freopen("in", "r", stdin);
	#endif
  
  cin >> n >> m;
  for(int i = 0; i < n; i++) cin >> mat[i];
  cin >> x1 >> y1 >> x2 >> y2;
  cout<<bfs()<<endl;

	return 0;
}