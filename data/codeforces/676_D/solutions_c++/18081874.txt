#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
int dx[]={1,0,-1,0},dy[]={0,-1,0,1};
char in[1005][1005];
int n,m,a,b,c,d;
struct node
{
    int x,y,f,v;
    node(int a=0,int b=0,int c=0,int d=0):x(a),y(b),f(c),v(d){};
    bool operator<(const node&tt)const
    {
        return v>tt.v;
    }
};
priority_queue<node>que;
bool vis[1005][1005][4];
inline bool check(char c,int t)
{
    if(!t)
        return c=='+'||c=='|'||c=='v'||c=='L'||c=='R'||c=='U';
    else if(t==1)
        return c=='+'||c=='-'||c=='<'||c=='R'||c=='U'||c=='D';
    else if(t==2)
        return c=='+'||c=='|'||c=='^'||c=='L'||c=='R'||c=='D';
    else return c=='+'||c=='-'||c=='>'||c=='L'||c=='U'||c=='D';
}
int bfs()
{
    int ans=0x3fffffff;
    while(!que.empty())que.pop();
    que.push(node(a,b));
    vis[a][b][0]=1;
    node u;
    while(!que.empty())
    {
        u=que.top();
        que.pop();
        //printf("\t%d %d %d %d\n",u.x,u.y,u.f,u.v);
        if(u.x==c&&u.y==d)
        {
            ans=u.v;
            break;
        }
        if(!vis[u.x][u.y][(u.f+1)&3])
        {
            vis[u.x][u.y][(u.f+1)&3]=1;
            que.push(node(u.x,u.y,(u.f+1)&3,u.v+1));
        }
        int x,y;
        for(int i=0;i<4;++i)
        {
            x=u.x+dx[i];
            y=u.y+dy[i];
            if(x<1||x>n)continue;
            if(y<1||y>m)continue;
            if(vis[x][y][u.f])continue;
            if(check(in[u.x][u.y],(u.f*3+i)&3)&&check(in[x][y],(u.f*3+2+i)&3))
            {
                vis[x][y][u.f]=1;
                que.push(node(x,y,u.f,u.v+1));
            }
        }
    }
    return ans==0x3fffffff?-1:ans;
}
int main()
{
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;++i)
        scanf(" %s",in[i]+1);
    scanf("%d%d%d%d",&a,&b,&c,&d);
    printf("%d\n",bfs());
    return 0;
}
