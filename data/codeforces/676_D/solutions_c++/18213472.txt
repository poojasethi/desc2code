#include<bits/stdc++.h>
using namespace std;
const int N=1e3+10;
int n,m;
char mat[N][N];
int T[2],M[2];
struct Node{
    int x,y,r;
    int step;
    Node(int _x,int _y,int _r,int _s):x(_x),y(_y),r(_r),step(_s){}
    Node(){}
};
queue<Node> Q;
bool vis[N][N][4];
const char *str = "+-|^><vLRUD*";
const int mask[12]={
      15,2+8,1+4,
      1,2,8,4,
      15-8,15-2,15-1,15-4,
      0
};
int door[N][N];
static const int back[4]={2,3,0,1};
bool ck(int s,int t,int r,int dir){
    int d1=((s<<r)%16) | (s>>(4-r));
    d1&=(1<<dir); 
    int d2=((t<<r)%16) | (t>>(4-r));
    d2&=(1<<back[dir]); 
    if(d1==0) return false;
    if(d2==0) return false;
    return true;
}
int solve(){
    while(!Q.empty()) Q.pop();
    Q.push(Node(T[0],T[1],0,0));
    Node tmp;
    memset(vis,0,sizeof vis);
    vis[T[0]][T[1]][0]=1;
    while(!Q.empty()){
        tmp=Q.front();Q.pop();
        /* printf("(%d,%d):%d,%d\n",tmp.x,tmp.y,tmp.r,tmp.step); */
        if(tmp.x==M[0] && tmp.y==M[1]) return tmp.step;
        if(!vis[tmp.x][tmp.y][(tmp.r+1)%4]){
            vis[tmp.x][tmp.y][(tmp.r+1)%4]=1;
            Q.push(Node(tmp.x,tmp.y,(tmp.r+1)%4,tmp.step+1));
        }
        static const int dx[4]={-1,0,1,0},dy[4]={0,1,0,-1};
        for(int k=0;k<4;k++){
            int xx=tmp.x+dx[k];
            int yy=tmp.y+dy[k];
            if(xx<1 || yy<1 || xx>n || yy>m ) continue;
            /* cout<<"to"<<xx<<" "<<yy<<endl; */
            if(!ck(door[tmp.x][tmp.y],door[xx][yy],tmp.r,k)) continue;
            if(!vis[xx][yy][tmp.r]){
                vis[xx][yy][tmp.r]=1;
                Q.push(Node(xx,yy,tmp.r,tmp.step+1));
            }
        }
    }
    return -1;
}
int main()
{
    /* freopen("in","r",stdin); */
    while(scanf("%d%d",&n,&m)==2)
    {
        for(int i=1;i<=n;i++) scanf("%s",mat[i]+1);
        for(int i=0;i<2;i++) scanf("%d",&T[i]);
        for(int i=0;i<2;i++) scanf("%d",&M[i]);
        for(int i=1;i<=n;i++) for(int j=1;j<=m;j++){
            int id=strchr(str,mat[i][j])-str;
            door[i][j]=mask[id];
        }
        printf("%d\n",solve());
    }
    return 0;
}
