#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<queue>
#include<vector>
using namespace std;

const int dx[4]={0,0,1,-1};
const int dy[4]={1,-1,0,0};
struct node{
	int x,y,k,dis;
}c[5000010];

int p,q,n,m,x,y,s,t,v[1010][1010][5];
char S[1010][1010];

char rot(char x,int k){
	for(int i=1;i<=k;i++){
		if(x=='+') x='+'; else
		if(x=='-') x='|'; else
		if(x=='|') x='-'; else
		if(x=='^') x='>'; else
		if(x=='>') x='v'; else
		if(x=='v') x='<'; else
		if(x=='<') x='^'; else
		if(x=='L') x='U'; else
		if(x=='U') x='R'; else
		if(x=='R') x='D'; else
		if(x=='D') x='L'; else
		if(x=='*') x='*';
	}
	return x;
}
bool ok(char x,char y,int k){
	if(k==0&&(x=='>'||x=='+'||x=='U'||x=='L'||x=='-'||x=='D')
	&&(y=='<'||y=='+'||y=='U'||y=='R'||y=='-'||y=='D')) return true;
	if(k==1&&(x=='<'||x=='+'||x=='U'||x=='R'||x=='-'||x=='D')
	&&(y=='>'||y=='+'||y=='U'||y=='L'||y=='-'||y=='D')) return true;
	if(k==2&&(x=='v'||x=='+'||x=='U'||x=='L'||x=='|'||x=='R')
	&&(y=='^'||y=='+'||y=='L'||y=='R'||y=='|'||y=='D')) return true;
	if(k==3&&(x=='^'||x=='+'||x=='D'||x=='L'||x=='|'||x=='R')
	&&(y=='v'||y=='+'||y=='L'||y=='R'||y=='|'||y=='U')) return true;
	return false;
}
int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) scanf("%s",S[i]+1);
	scanf("%d%d",&s,&t);
	c[p=q=1]=(node){s,t,0,0};
	scanf("%d%d",&s,&t);
	if(c[1].x==s&&c[1].y==t) return puts("0"),0;
	for(;p<=q;p++){
		for(int i=0;i<4;i++){
	 		x=c[p].x+dx[i]; y=c[p].y+dy[i];
	 		if(x>n||y>m||x<1||y<1) continue;
			if(!ok(rot(S[c[p].x][c[p].y],c[p].k),rot(S[x][y],c[p].k),i)) 
			continue;
			if(v[x][y][c[p].k]) continue;
			v[x][y][c[p].k]=1;
			c[++q]=(node){x,y,c[p].k,c[p].dis+1};
			if(x==s&&y==t){
				printf("%d\n",c[q].dis);
				return 0;
			}
		}
		x=c[p].x; y=c[p].y;
	 	if(x>n||y>m||x<1||y<1||v[x][y][(c[p].k+1)%4]) continue;
	 	v[x][y][(c[p].k+1)%4]=1; 
		c[++q]=(node){x,y,(c[p].k+1)%4,c[p].dis+1};
	}
	puts("-1");
	return 0;
}
