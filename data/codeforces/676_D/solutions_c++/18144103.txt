#include <bits/stdc++.h>
using namespace std;
const int N = 1005;
int n, m, sx, sy, ex, ey;
char g[N][N];
char rot[128];
bool vis[4][N][N];
const char U[] = "+|^LRD";
const char D[] = "+|vLRU";
const char L[] = "+-<URD";
const char R[] = "+->ULD";
char rotate(char c, int k) {
	while (k-- > 0)
		c = rot[c];
	return c;
}
bool has(char c, const char arr[]) {
	for (int k = 0; k < 6; ++k)
		if (arr[k] == c)
			return true;
	return false;
}
#define push(aa, bb, cc, dd) if (!vis[cc][aa][bb]) {qx.push(aa); qy.push(bb); qd.push(cc); qw.push(dd); vis[cc][aa][bb] = true;}
#define pop() int x = qx.front(), y = qy.front(), d = qd.front(), w = qw.front(); qx.pop(); qy.pop(); qd.pop(); qw.pop();
int bfs() {
	--sx, --sy, --ex, --ey;
	queue<int> qx, qy, qd, qw;
	push(sx, sy, 0, 0);
	while (!qx.empty()) {
		pop();
		// cout << x << ' ' << y << ' ' << d << ' ' << w << '\t' << ex << ' ' << ey << endl;
		if (x == ex && y == ey)
			return w;
		char c = rotate(g[x][y], d);
		// try rotating
		int nd = (d + 1) % 4;
		push(x, y, nd, w + 1);
		// try up
		if (x > 0 && has(c, U) && has(rotate(g[x-1][y], d), D))
			push(x - 1, y, d, w + 1);
		// down
		if (x + 1 < n && has(c, D) && has(rotate(g[x+1][y], d), U))
			push(x + 1, y, d, w + 1);
		// left 
		if (y > 0 && has(c, L) && has(rotate(g[x][y-1], d), R))
			push(x, y - 1, d, w + 1);
		// right 
		if (y + 1 < m && has(c, R) && has(rotate(g[x][y+1], d), L))
			push(x, y + 1, d, w + 1);
	}
	return -1;
}
int main() {
	rot['+'] = '+';
	rot['-'] = '|';
	rot['|'] = '-';
	rot['^'] = '>';
	rot['>'] = 'v';
	rot['v'] = '<';
	rot['<'] = '^';
	rot['L'] = 'U';
	rot['U'] = 'R';
	rot['R'] = 'D';
	rot['D'] = 'L';
	rot['*'] = '*';
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%s", g[i]);
	scanf("%d%d%d%d", &sx, &sy, &ex, &ey);
	printf("%d\n", bfs());
}