#include<bits/stdc++.h>
using namespace std;

int n, m, a, b, c, d, x, y, dir, t, nd, nx, ny;
char s[1010][1010];
int dy[] = {0,1,0,-1}; // ^ > v <
int dx[] = {-1,0,1,0};



char ar[] = {'+','+','+','+','|','-','|','-','|','^','>','v','<','^','>','v','L','U','R','D','L','U','R','*','*','*','*'};
bool can[][4] = {
		{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1},
		{1,0,1,0},{0,1,0,1},{1,0,1,0},{0,1,0,1},{1,0,1,0},
		{1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1},{1,0,0,0},{0,1,0,0},{0,0,1,0},
		{1,1,1,0},{0,1,1,1},{1,0,1,1},{1,1,0,1},{1,1,1,0},{0,1,1,1},{1,0,1,1},
		{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}
};
map<char,int> idx;

bool val(int x, int y){
	return x>=0 && y>=0 && x<n && y<m && s[x][y] != '*';
}

struct node{
	int x, y, dir, t;
	node(int X, int Y, int d, int T){
		x=X, y=Y, dir=d; t=T;
	}

};

bool vis[1010][1010][4];

queue<node> q;

int main(int argc, char **argv) {
#ifndef ONLINE_JUDGE
	freopen("a.in", "r", stdin);
#endif
	for(int i=0 ; i<27 ; ++i) {
		if(idx.find(ar[i]) == idx.end())
			idx[ar[i]] = i;
	}

	scanf("%d%d", &n, &m);
	for(int i=0 ; i<n ; ++i)
		scanf("%s", s[i]);
	scanf("%d%d%d%d", &a, &b, &c, &d);
	--a, --b, --c, --d;
	q.push(node(a, b, 0, 0));
	vis[a][b][0] = 1;
	while(!q.empty()) {
		x = q.front().x;
		y = q.front().y;
		dir = q.front().dir;
		t = q.front().t;
		q.pop();
		if(x == c && y == d) {
			cout << t << endl;
			return 0;
		}
		for(int i=0 ; i<4 ; ++i) {
			nx = x + dx[i];
			ny = y + dy[i];
			if(!val(nx, ny)) continue;
			if(vis[nx][ny][dir]) continue;
			int cur = idx[ar[idx[s[x][y]]+dir]];
			int to = idx[ar[idx[s[nx][ny]]+dir]];
			if(can[cur][i] && can[to][(i+2)%4]){
				q.push(node(nx, ny, dir, t+1));
				vis[nx][ny][dir] = 1;
			}
		}
		if(!vis[x][y][(dir+1)%4])
			q.push(node(x, y, (dir+1)%4, t+1));
	}
	puts("-1");
	return 0;
}
