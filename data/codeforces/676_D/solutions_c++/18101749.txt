#include<algorithm>
#include<cstdio>
#include<cstring>
using namespace std;

const int INF=0x3f3f3f3f;

int dxy[4][2]={{-1,0},{0,1},{1,0},{0,-1}};
int ok[12][4]={
{1,1,1,1}, // +
{0,1,0,1}, // -
{1,0,1,0}, // |
{1,0,0,0}, // ^
{0,1,0,0}, // >
{0,0,1,0}, // v
{0,0,0,1}, // <
{0,1,1,1}, // U
{1,0,1,1}, // R
{1,1,0,1}, // D
{1,1,1,0}, // L
{0,0,0,0} // *
};

int n,m;

int chmp[256];

const int maxn=1000010;
const int maxm=4000010;

int tot;
int st[maxn],lk[maxm],b[maxm],c[maxm];
void addedge(int u,int v,int w){
	lk[++tot]=st[u];b[tot]=v;c[tot]=w;st[u]=tot;
}

const int MAXN=1010;

int mp[MAXN][MAXN];

bool check(int x,int y){return 1<=x&&x<=n&&1<=y&&y<=m;}

struct node{
	int x,y,t;
};
const int MAXQ=4000010;
node Q[MAXQ];int l,r;
int d[MAXN][MAXN][4];

void bfs(int sx,int sy){
	l=r=0;Q[r++]=(node){sx,sy,0};
	memset(d,255,sizeof d);d[sx][sy][0]=0;
	for(;l!=r;l=(l+1)==MAXQ ? 0 : l+1){
		int x=Q[l].x,y=Q[l].y,t=Q[l].t;
//		printf("%d %d %d %d\n",x,y,t,d[x][y][t]);
		if(!~d[x][y][(t+1)%4]){
			d[x][y][(t+1)%4]=d[x][y][t]+1;
			Q[r++]=(node){x,y,(t+1)%4};
		}
		for(int dir=0;dir<4;++dir){
			int X=x+dxy[(dir+t)%4][0],Y=y+dxy[(dir+t)%4][1];
			if(!check(X,Y) || !ok[mp[x][y]][dir] || !ok[mp[X][Y]][(dir+2)%4])continue;
			if(!~d[X][Y][t]){
				d[X][Y][t]=d[x][y][t]+1;
				Q[r++]=(node){X,Y,t};
			}
		}
	}
}

void solve(){
	scanf("%d%d",&n,&m);
	tot=1;memset(st,0,sizeof st);
	for(int i=1;i<=n;++i)
		for(int j=1;j<=m;++j){
			char ch;scanf(" %c",&ch);
			mp[i][j]=chmp[ch];
		}
	int x1,y1,x2,y2;
	scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
	bfs(x1,y1);
	int res=min(min(min(d[x2][y2][0],d[x2][y2][1]),d[x2][y2][2]),d[x2][y2][3]);
	printf("%d\n",res>=INF ? -1 : res);
}

int main(){
//	freopen("in.txt","r",stdin);
	
	chmp['+']=0;
	chmp['-']=1;chmp['|']=2;
	chmp['^']=3;chmp['>']=4;chmp['v']=5;chmp['<']=6;
	chmp['U']=7;chmp['R']=8;chmp['D']=9;chmp['L']=10;
	chmp['*']=11;
	
	solve();
	return 0;
}

