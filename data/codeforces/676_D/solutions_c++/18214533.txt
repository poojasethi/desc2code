#include <bits/stdc++.h>
using namespace std;

struct node {
	int x, y, s, d;
	node(int x, int y, int s, int d): x(x), y(y), s(s), d(d) {}
};

const int maxn = 1010;
const int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
char G[maxn][maxn];
int n, m, sx, sy, tx, ty, b[200], vis[maxn][maxn][5];
queue <node> q;

void expand(node& u, int dir) {
	int x, y, s, d, i, j;
	d = u.d + 1;
	if(dir == -1) {
		x = u.x;
		y = u.y;
		s = (u.s + 1) % 4;
		if(vis[x][y][s]) {
			return;
		}
		q.push(node(x, y, s, d));
		vis[x][y][s] = 1;
	}
	else {
		i = b[G[u.x][u.y]];
		j = 1 << ((dir - u.s + 4) % 4);
		if((i & j) == 0) {
			return;
		}
		x = u.x + dx[dir];
		y = u.y + dy[dir];
		s = u.s;
		if(x < 1 || x > n || y < 1 || y > m || vis[x][y][s]) {
			return;
		}
		i = b[G[x][y]];
		j = 1 << ((dir + 2 - s + 4) % 4);
		if((i & j) == 0) {
			return;
		}
		q.push(node(x, y, s, d));
		vis[x][y][s] = 1;
	}
} 

int bfs() {
	while(!q.empty()) {
		node u = q.front();
		q.pop();
		if(u.x == tx && u.y == ty) {
			return u.d;
		}
		for(int i = -1; i < 4; i++) {
			expand(u, i);
		}
	}
	return -1;
}

int main() {
	b['+'] = 15, b['-'] = 10, b['|'] = 5;
	b['^'] = 1, b['>'] = 2, b['<'] = 8, b['v'] = 4;
	b['L'] = 7, b['R'] = 13, b['U'] = 14, b['D'] = 11;
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; i++) {
		scanf("%s", G[i] + 1);
	}
	scanf("%d%d%d%d", &sx, &sy, &tx, &ty);
	vis[sx][sy][0] = 1;
	q.push(node(sx, sy, 0, 0));
	printf("%d\n", bfs());
	return 0;
}