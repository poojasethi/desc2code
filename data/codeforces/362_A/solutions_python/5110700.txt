n = input()
good = []
knights = []
t = range(8)
def can_go(knight,place):
    (x1,y1) = knight
    (x2,y2) = place
    if ((x1-x2) % 2) == 0:
        if ((y1 - y2) % 2 ) == 0:
            #if (abs(x1-x2) == abs(y1-y2)):
            if (can_i(x1,x2,abs(y2-y2)/2)) or (can_i(y1,y2,abs(x2-x1)/2)):
                return abs(x1-x2) / 2
    return False
def succ(k):
    (x,y) = k
    ans = []
    if x+2 < 8:
        if y+2 < 8:
            ans.append((x+2,y+2))
        if y-2 > 0 :
            ans.append((x+2,y-2))
    if x-2 > 0 :
        if y+2 < 8:
            ans.append((x-2,y+2))
        if y-2 > 0 :
            ans.append((x-2,y-2))
    return ans
        
def ans(knights,good):
    k1,k2 = knights
    t = succ(k2)
    for i in succ(k1):
        for j in t:
            if (i == j):
                return "YES"
    return "NO"
            
def can_i(o,c,n):
    for i in range(n+1):
        num = O*2*i - O*2*(n-i)
        if (num == c):
            return True
    return False
    
for k in range(n):
    for i in t:
        a = raw_input()
        for j in range(len(a)) :
            if a[j] == '.':
                good.append((i,j))
            elif a[j] == 'K':
                knights.append((i,j))
    if(k!=n-1):
        line = raw_input()
    print ans(knights,good)
    good = []
    knights = []
            


            
