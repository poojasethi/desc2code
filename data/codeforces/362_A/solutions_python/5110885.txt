from Queue import * # Queue, LifoQueue, PriorityQueue
from bisect import * #bisect, insort
from datetime import * 
from collections import * #deque, Counter,OrderedDict,defaultdict
import calendar
import heapq
import math
import copy
import itertools

position = []
def can_move_list((i,j)):
    global position
    x = [(i-2,j-2),(i-2,j+2),(i+2,j-2),(i+2,j+2)]
    for p in x:
        if 0 <= p[0]  <= 7 and 0 <= p[1] <= 7:
            if not (p in position):
                position.append(p)
                can_move_list(p)

    return


def solver():
    n = input()
    global position
    for now in range(n):
        boards = [raw_input() for _ in xrange(8)]
        first = True
        for i in range(len(boards)):
            for j in range(len(boards[i])):
                if boards[i][j] == "K":
                    if first:
                        first = False
                        semi1_p = (i,j)
                    else:
                        semi2_p = (i,j)

        if semi1_p[0] % 4 != semi2_p[0] % 4 or semi1_p[1] % 4 != semi2_p[1] % 4:
            print "NO"
            if now != n-1:
                raw_input()
            continue


        positon = [semi1_p]
        can_move_list(semi1_p)
        can_move_semi1 = position
        position = [semi2_p]
        can_move_list(semi2_p)
        can_move_semi2 = position
        OK = False
        #print can_move_semi1
        #print can_move_semi2
        
        #print boards
        for i in range(len(can_move_semi1)):
            if OK:
                break
            for j in range(len(can_move_semi2)):
                if can_move_semi1[i] == can_move_semi2[j]:
                    OK = True
                    break

        if OK:
            print "YES"
        else:
            print "NO"
                    
        if now != n-1:
            raw_input()

                




if __name__ == "__main__":
    solver()
