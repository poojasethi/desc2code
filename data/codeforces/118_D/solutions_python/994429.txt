from functools import wraps
def memo(func):
    cache = {}
    @wraps(func)
    def wrap(*args):
        if args not in cache:
            cache[args] = func(*args)
        return cache[args]
    return wrap

MOD = int(1e8)
n1, n2, k1, k2 = map(int, raw_input().split())

MAX_PAWNS = k1
MAX_KNIGHTS = k2

@memo
def count_arrangements(pawns_left, knights_left, place_knight):
    result = 0
    if place_knight:
        if pawns_left == 0:
            if knights_left <= MAX_KNIGHTS:
                result += 1
            else:
                result += 0
        else:
            for i in range(1, 1 + min(knights_left, MAX_KNIGHTS)):
                result += count_arrangements(pawns_left, knights_left - i, 0)
    else:
        if knights_left == 0:
            if pawns_left <= MAX_PAWNS:
                result += 1
            else:
                result += 0
        else:
            for i in range(1, 1 + min(pawns_left, MAX_PAWNS)):
                result += count_arrangements(pawns_left - i, knights_left, 1)
    return result

print (count_arrangements(n1, n2, 0) + count_arrangements(n1, n2, 1)) % MOD
