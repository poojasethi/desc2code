#include <iostream>
using namespace std;

#define F cin
#define G cout

const int N = 200010;

#define x first
#define y second

pair<int,int> l[N],r[N];
int n,a[N],co[N];

// construiesc cele mai scurte segmente in l si r
// apoi la un pas am solutie daca a[i] >= l[i].x && a[i] <= r[i].x ( unde x e pozitia , y e lungimea )
// acum ca sa construiesc solutia merg cu minimum dintre valoarea actuala si valoarea a-ului urmator
// asta merge pentru ca daca am de exemplu 1 1 2 2 3 3 4 4 si pe ultima pozitie 2
// eu voi merge completand valoarea urmatoare care e mai mica ( adica 2 ) pana dau de ceva din sirul
// left construit 1 1 1 2 2 2 2 2

int main()
{
    ios::sync_with_stdio(0);
    F>>n;
    for (int i=1;i<=n;++i)
        F>>a[i];
    if ( a[1] > 1 )
    {
        G<<"-1\n";
        return 0;
    }

    l[1] = r[1] = make_pair(1,1);
    for (int i=2;i<=n;++i)
    {
        l[i] = l[i-1].y >= 2 ? make_pair(l[i-1].x+1,1) : make_pair(l[i-1].x,l[i-1].y+1);
        r[i] = r[i-1].y == 5 ? make_pair(r[i-1].x+1,1) : make_pair(r[i-1].x,r[i-1].y+1);

        if ( a[i] )
        {
            if ( l[i].x < a[i] || r[i].x > a[i] )
            {
                G<<"-1\n";
                return 0;
            }

            l[i] = min(l[i],make_pair(a[i],5));
            r[i] = max(r[i],make_pair(a[i],1));
        }
    }

    pair<int,int> ans = l[n];
    if ( ans.second == 1 )
        ans = make_pair(l[n].first-1,5);
    if ( ans < r[n] )
    {
        G<<"-1\n";
        return 0;
    }

    G<<ans.x<<'\n';
    a[n] = ans.x;
    co[a[n]]++;

    for (int i=n-1;i>0;--i)
    {
        a[i] = min(a[i+1],l[i].x);
        if ( co[a[i]] == 5 ) a[i]--;
        co[a[i]]++;
    }
    for (int i=1;i<=n;++i)
        G<<a[i]<<' ';
    G<<'\n';
}
