#include <string.h>
#include <stdio.h>
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 200010;

int a[N], n;

bool dp[N][6];
pair<int, int> ans[N][6];

bool Judge(int x, int y){
	if(y + y > x) return false;
	if(y + y + y + y + y < x) return false;
	return true;
}

void Work(int l, int r, int x, int y){
	if(r < l) return ;
	int k = (r - l + 1) / (y - x + 1);
	for(int i = 0, j = l; i < y - x + 1; i++){
		for(int t = 0; t < k + (i < (r - l + 1) % (y - x + 1)); t++)
			a[j++] = i + x;
	}
}

int main(){
	scanf("%d", &n);
	for(int i = 1; i <= n; i++)
		scanf("%d", &a[i]);
	a[0] = 0;
	dp[0][0] = 1;
	int pre = 0;
	for(int i = 1; i <= n; i++){
		if(a[i] == 0) continue;
		if(a[i] == a[pre]){
			if(i - pre > 4)
				return puts("-1"), 0;
			for(int j = i - pre; j <= 4; j++)
				if(dp[pre][j]) dp[i][j - (i - pre)] = true, ans[i][j - (i - pre)] = make_pair(pre, j);
		}
		else{
			for(int j = 0; j <= 4; j++){
				if(dp[pre][j] == false || j + pre >= i) continue;
				for(int k = 0; k <= 4; k++){
					if(i - k - pre - j - 1 < 0) continue;
					if(Judge(i - k - pre - j - 1, a[i] - a[pre] - 1) == false) continue;
					for(int x = (k == 0); x + k <= 4; x++)
						dp[i][x] = true, ans[i][x] = make_pair(pre, j);
				}
			}
		}
		pre = i;
	}
	int ret = -1, x = -1, y = -1;
	for(int i = 0; i <= 4; i++){
		if(dp[pre][i] == false || pre + i > n) continue;
		if(pre + i == n - 1) continue;
		if(ret < a[pre] + (n - pre - i) / 2){
			ret = a[pre] + (n - pre - i) / 2;
			x = pre, y = i;
			Work(pre + i + 1, n, a[pre] + 1, a[pre] + (n - pre - i) / 2);
			break;
		}
	}
	cout << ret << endl;
	if(ret + 1){
		while(x){
			int px = ans[x][y].first;
			int py = ans[x][y].second;
			if(a[x] == a[px]){
				for(int i = px; i <= x + y; i++)
					a[i] = a[x];
			}
			else{
				for(int i = (y == 0); i + y <= 4; i++){
					if(x - i - px - py - 1 < 0) continue;
					if(Judge(x - i - px - py - 1, a[x] - a[px] - 1) == false) continue;
					Work(px + py + 1, x - i - 1, a[px] + 1, a[x] - 1);
					for(int j = -i; j <= y; j++)
						a[j + x] = a[x];
					break;
				}
			}
			x = px;
			y = py;
		}
		for(int i = 1; i <= n; i++)
			cout << a[i] << " ";cout << endl;
	}
	return 0;
}
