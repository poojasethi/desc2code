#include <bits/stdc++.h>
#define mp make_pair
#define MAXN 500001
#define ri(a) scanf("%d\n",&a)
#define rc(a) scanf("%c",&a)
#define rii(a,b) scanf("%d %d",&a,&b)
#define FOR(i,l,r) for(int i=l;i<r;i++)
using namespace std;

char c;
int N, M, P, V, H, l, r, cnt=0, A[MAXN];
vector<int> L, R, T[MAXN], B[MAXN], D[MAXN], F[MAXN], DD(MAXN), FF(MAXN);
vector<vector<int> > S[MAXN];

void dfs(int v, int d) {
	B[d].push_back(A[v]);
	D[d].push_back(cnt); DD[v]=cnt++;
	S[d].push_back(vector<int>(26));
	S[d].back()[A[v]]++;
	FOR(i,0,T[v].size())
		dfs(T[v][i],d+1);
	F[d].push_back(cnt); FF[v]=cnt++;
}

int main() {
	rii(N,M);
	FOR(i,2,N+1) {ri(P); T[P].push_back(i);}
	FOR(i,1,N+1) {rc(c); A[i]=c-'a';}
	dfs(1,1);
	FOR(i,1,MAXN) FOR(j,1,S[i].size()) FOR(k,0,26) S[i][j][k]+=S[i][j-1][k];
	FOR(m,0,M) {
		rii(V,H); cnt=0;
		l = lower_bound(D[H].begin(),D[H].end(),DD[V]) - D[H].begin();
		r = lower_bound(F[H].begin(),F[H].end(),FF[V]) - F[H].begin(); r--;
		if(l<=r && l<(int)D[H].size() && DD[V]<=D[H][l] && F[H][r]<=FF[V]) {
			L = S[H][l];
			R = S[H][r];
			R[B[H][l]]++;
			FOR(i,0,26) cnt+=(R[i]-L[i])&1;
			cnt>1?printf("No\n"):printf("Yes\n");
		}else
			printf("Yes\n");
	}	
}