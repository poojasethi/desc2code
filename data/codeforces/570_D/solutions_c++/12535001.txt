#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <map>
#include <utility>
#include <algorithm>

using namespace std;

#define PB push_back
#define MK make_pair

vector< vector<int> > v;
vector< map<int,int> > h;
map<int,int>::iterator it, jt;
int *in, *out, *depth, *a, b[26], t=0;
char *s;

inline void dfs(int i, int d){
	int j;

	t++;
	in[i]=t;

	depth[i]=d;
	a[d]=a[d]^b[s[i-1]-'a'];
	h[d].insert(MK(t,a[d]));

	for(j=0;j<v[i].size();j++)
		dfs(v[i][j],d+1);

	t++;
	out[i]=t;
}

int main(){
	int n,m,i,j,k,d,x;

	for(i=0;i<26;i++)
		b[i]=(1<<i);

	scanf("%d%d", &n, &m);

	v.resize(n+1);
	h.resize(n+1);

	for(i=0;i<n+1;i++)
		h[i].insert(MK(0,0));

	in=(int*)malloc((n+1)*sizeof(int));
	out=(int*)malloc((n+1)*sizeof(int));
	depth=(int*)malloc((n+1)*sizeof(int));
	s=(char*)malloc((n+1)*sizeof(char));
	a=(int*)calloc((n+1),sizeof(int));

	for(i=2;i<n+1;i++){
		scanf("%d", &j);
		v[j].PB(i);
	}

	scanf("%s", s);

	dfs(1,1);

	while(m--){
		scanf("%d%d", &k, &d);

		it=h[d].lower_bound(in[k]);
		jt=h[d].lower_bound(out[k]+1);

		it--;jt--;

		x=(it->second^jt->second);

		if(x==(x&-x))
			printf("Yes\n");
		else
			printf("No\n");
	}

	return 0;
}