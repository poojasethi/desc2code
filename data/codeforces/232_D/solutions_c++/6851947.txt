#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define N 400010
#define inf 2000000000
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int l,r,a;
} tr[N*20];
int i,j,k,n,m,T,x,y,K,an;
int r[N],rr[N],t[N],tt[N],sa[N],p[N],c[N],b[N],h[N],root[N],f1[N][20],f2[N][20];
inline void Sa() {
	int i,j,k=m;
	For(i,1,m) r[i]=c[i];
	for (i=1;i<=m;i<<=1) {
		For(j,1,k) t[j]=0;
		For(j,1,m) t[r[j+i]]++;
		For(j,1,k) t[j]+=t[j-1];
		for (j=m;j;j--) tt[t[r[j+i]]--]=j;
		For(j,1,k) t[j]=0;
		For(j,1,m) t[r[j]]++;
		For(j,1,k) t[j]+=t[j-1];
		for (j=m;j;j--) sa[t[r[tt[j]]]--]=tt[j];
		rr[sa[1]]=k=1;
		For(j,2,m) if (r[sa[j]]==r[sa[j-1]]&&r[sa[j]+i]==r[sa[j-1]+i])
			rr[sa[j]]=rr[sa[j-1]]; else rr[sa[j]]=++k;
		For(j,1,m) r[j]=rr[j];
		if (k==m) return;
	}
}
inline void getheight() {
	int i,j,k=0;
	for (i=1;i<=m;h[r[i++]]=k)
	for (k?k--:0,j=sa[r[i]-1];c[j+k]==c[i+k];k++);
}
void into(int p,int &q,int x,int y,int k) {
	if (!q) q=++T;
	if (x==y) {
		tr[q].a=tr[p].a+1;
		return;
	}
	int mid=(x+y)/2;
	if (k<=mid) {
		tr[q].r=tr[p].r;
		into(tr[p].l,tr[q].l,x,mid,k);
	} else {
		tr[q].l=tr[p].l;
		into(tr[p].r,tr[q].r,mid+1,y,k);
	}
	tr[q].a=tr[tr[q].l].a+tr[tr[q].r].a;
}
inline void pre() {
	int i,j;
	For(i,1,m) f1[i][0]=f2[i][0]=h[i];
	For(j,1,19) {
		For(i,(1<<j)+1,m) f1[i][j]=min(f1[i][j-1],f1[i-(1<<j-1)][j-1]);
		For(i,1,m-(1<<j)) f2[i][j]=min(f2[i][j-1],f2[i+(1<<j-1)][j-1]);
	}
}
void Cal(int q,int x,int y,int l,int r) {
	if (!q) return;
	if (l<=x&&y<=r) {
		an+=tr[q].a;
		return;
	}
	int mid=(x+y)/2;
	if (l<=mid) Cal(tr[q].l,x,mid,l,r);
	if (mid<r) Cal(tr[q].r,mid+1,y,l,r);
}
inline int cal(int x,int l,int r) {
	if (l>r) return 0;
	an=0;
	Cal(root[x],1,m,l+n+1,r+n+1);
	return an;
}
inline int cal_l(int x,int y) {
	int i;
	for (i=19;i>=0;i--)
	if (f1[x][i]>=y) x-=1<<i;
	return x;
}
inline int cal_r(int x,int y) {
	int i;
	x++;
	for (i=19;i>=0;i--)
	if (f2[x][i]>=y) x+=1<<i;
	return x-1;
}
int main() {
	//freopen("232d.in","r",stdin);
	scanf("%d",&n);
	For(i,1,n) scanf("%d",&c[i]);
	for (i=n;i;i--) c[i]-=c[i-1];
	c[n+1]=inf;
	For(i,1,n) c[n+1+i]=-c[i];
	m=n+n+1;
	For(i,1,m) b[i]=c[i];
	sort(b+1,b+m+1);
	For(i,1,m) c[i]=lower_bound(b+1,b+m+1,c[i])-b;
	Sa();
	getheight();
	root[0]=++T;
	For(i,1,m) into(root[i-1],root[i],1,m,sa[i]);
	pre();
	scanf("%d",&K);
	For(i,1,K) {
		scanf("%d%d",&x,&y);
		if (x==y) {
			printf("%d\n",n-1);
			continue;
		}
		int A=x;
		k=y;
		x++;
		y=y-x+1;
		x=r[x];
		int L=cal_l(x,y),R=cal_r(x,y);
		int an=cal(R,2,A-y)+cal(R,k+2,n-y+1)-cal(L-1,2,A-y)-cal(L-1,k+2,n-y+1);
		printf("%d\n",an);
	}
	return 0;
}
