#include<bits/stdc++.h>
using namespace std;

int n,nq,tot,ans;
int a[200010],b[200010],c[200010],sa[200010],rank[200010],w[200010],h[200100],height[200010],f1[200010][20],f2[200010][20];
int root[200010],ls[4000010],rs[4000010],sum[4000010];

void suffix()
{int i,j,p;
 
 for(i=1;i<=n;i++)
 	b[i]=a[i];
 sort(b+1,b+n+1);
 for(i=1;i<=n;i++)
 {	rank[i]=lower_bound(b+1,b+n+1,a[i])-b;
 	sa[rank[i]+(w[rank[i]]++)]=i;
 }
 for(p=1;p<=n;p*=2)
 {	j=0;
 	for(i=n-p+1;i<=n;i++) b[++j]=i;
 	for(i=1;i<=n;i++) if(sa[i]>p) b[++j]=sa[i]-p;
 	memset(w,0,sizeof(w));
 	for(i=1;i<=n;i++) w[rank[b[i]]]++;
 	for(i=1;i<=n;i++) w[i]+=w[i-1];
 	for(i=n;i>=1;i--) sa[w[rank[b[i]]]--]=b[i];
 	for(i=1;i<=n;i++) c[i]=rank[i];
 	j=0;
 	for(i=1;i<=n;i++) 
	{	j+=(c[sa[i]]!=c[sa[i-1]] || c[sa[i]+p]!=c[sa[i-1]+p]);
		rank[sa[i]]=j;
	}
 }
 for(i=1;i<=n;i++)
 {	if(rank[i]==1) continue;
 	j=max(0,h[i-1]-1);
 	while(i+j<=n && sa[rank[i]-1]+j<=n && a[i+j]==a[sa[rank[i]-1]+j]) j++;
 	h[i]=j;
 }
 for(i=1;i<=n;i++)
 	height[i]=h[sa[i]];
}
 
void change(int last,int &p,int l,int r,int x)
{p=++tot;
 ls[p]=ls[last];
 rs[p]=rs[last];
 sum[p]=sum[last];
 if(l==r)
 {	sum[p]++;
 	return;
 }
 if(x<=(l+r)/2)
 	change(ls[last],ls[p],l,(l+r)/2,x);
 else
 	change(rs[last],rs[p],(l+r)/2+1,r,x);
 sum[p]=sum[ls[p]]+sum[rs[p]];
}

int query(int p1,int p2,int l,int r,int x,int y)
{if(l>y || r<x || x>y) return 0;
 if(l>=x && r<=y) return sum[p2]-sum[p1];
 return query(ls[p1],ls[p2],l,(l+r)/2,x,y)+query(rs[p1],rs[p2],(l+r)/2+1,r,x,y);
}

int main()
{int i,j,x,y,q,l1,r1;
 
 scanf("%d",&n);
 for(i=1;i<=n;i++)
 	scanf("%d",&a[i]);
 for(i=1;i<=n;i++)
 {	a[i]=a[i+1]-a[i];
 	a[n+i]=-a[i];
 }
 a[n]=a[2*n]=1000000001;
 n*=2;	
 suffix();			
 for(i=n;i>=1;i--)
 {	f1[i][0]=height[i+1];
 	for(j=1;j<=18;j++)
	 	if(i+(1<<j)<=n)
			f1[i][j]=min(f1[i][j-1],f1[i+(1<<(j-1))][j-1]);
		else
			break;	
 }
 for(i=1;i<=n;i++)
 {	f2[i][0]=height[i];
 	for(j=1;j<=18;j++)
 		if((1<<j)<=i)
 			f2[i][j]=min(f2[i][j-1],f2[i-(1<<(j-1))][j-1]);
 		else
		 	break;
 }
 for(i=1;i<=n;i++)
 {	x=sa[i];
 	change(root[i-1],root[i],1,n,x);
 }	
 scanf("%d",&nq);
 for(q=1;q<=nq;q++)
 {	scanf("%d%d",&l1,&r1);
	y=rank[n/2+l1];
	for(i=18;i>=0;i--)
		if(y<=n && f1[y][i]>=r1-l1)
			y+=(1<<i);
	x=rank[n/2+l1];
	for(i=18;i>=0;i--)
		if(x>0 && f2[x][i]>=r1-l1)
			x-=(1<<i);
	x=max(x,1);
	y=min(y,n);		
	ans=query(root[x-1],root[y],1,n,1,l1-(r1-l1+1))+query(root[x-1],root[y],1,n,r1+1,n/2);
 	printf("%d\n",ans);
 }
 return 0;
}