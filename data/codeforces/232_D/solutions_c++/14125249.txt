#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MaxN = 200010;

#define MS(_) memset(_,0,sizeof(_))
#define FOR(i,l,r) for(int i=l;i<r;i++)
#define FORD(i,r,l) for(int i=r;i>=l;i--)

int n,m,len,h[MaxN],ans[MaxN],d[MaxN];
int sa[MaxN],rank[MaxN],cnt[MaxN],tmp[2][MaxN],height[MaxN];
int w[20][MaxN],q[MaxN][2],id[MaxN],tot,nxt[MaxN],ch[MaxN],flag[MaxN];

inline bool cmp(int a,int b){return d[a]<d[b];}
void SA(){
	int *x=tmp[0],*y=tmp[1],n=len,m=0;
	FOR(i,0,n) sa[i]=i;sort(sa,sa+n,cmp);
	FOR(i,0,n) x[sa[i]]=(d[sa[i]]!=d[sa[i+1]]) ? m++ : m;
	for(int k=1;k<=n;k<<=1){
		int p=0;
		FOR(i,n-k,n) y[p++]=i;
		FOR(i,0,n) if(sa[i]>=k) y[p++]=sa[i]-k;
		MS(cnt);
		FOR(i,0,n) cnt[x[y[i]]]++;
		FOR(i,1,m) cnt[i]+=cnt[i-1];
		FORD(i,n-1,0) sa[--cnt[x[y[i]]]]=y[i];
		swap(x,y);p=1;x[sa[0]]=0;
		FOR(i,1,n) x[sa[i]]=(y[sa[i]]==y[sa[i-1]] && y[sa[i]+k]==y[sa[i-1]+k]) ? p-1 : p++;
		if(p>=n) break;m=p;
	}
	FOR(i,0,len) rank[sa[i]]=i;
}
void calc_height(){
	int j;
	for(int i=0,k=0;i<len-1;height[rank[i++]]=k)
		for(k ? k-- : 0,j=sa[rank[i]-1];d[i+k]==d[j+k];k++);
}
void RMQinit(){
	FOR(i,0,len) w[0][i]=height[i];
	FOR(i,1,20) FOR(j,0,len-(1<<i)+1) w[i][j]=min(w[i-1][j],w[i-1][j+(1<<i-1)]);
}

inline void modify(int x){for(;x<=n;x+=(x&-x)) cnt[x]++;}
inline int query(int x){int res=0;for(;x>0;x^=(x&-x)) res+=cnt[x];return res;}

int main()
{
	scanf("%d",&n);len=2*n;
	FOR(i,0,n) scanf("%d",&h[i]);
	FOR(i,0,n-1) d[i+n]=-(d[i]=h[i]-h[i+1]);
	d[n-1]=-2000000001;d[len-1]=-2000000002;
	SA();calc_height();RMQinit();
	scanf("%d",&m);
	FOR(i,0,m){
		int x,y;scanf("%d%d",&x,&y);
		if(x==y) {ans[i]=n-1;continue;}
		int L=y-x,pos=rank[n+x-1],l=pos,r=pos;
		FORD(j,19,0){
			if(l+1>=(1<<j) && w[j][l+1-(1<<j)]>=L) l-=1<<j;
			if(w[j][r+1]>=L) r+=1<<j;
		}
		q[++tot][0]=x-L,q[tot][1]=y,id[tot]=i;
		flag[tot]=-1;nxt[tot]=ch[l-1],ch[l-1]=tot;
		q[++tot][0]=x-L,q[tot][1]=y,id[tot]=i;
		flag[tot]=1; nxt[tot]=ch[r],ch[r]=tot;
	}
	FOR(i,0,len){
		modify(sa[i]+1);
		for(int j=ch[i];j;j=nxt[j])
			ans[id[j]]+=flag[j]*(query(q[j][0]-1)-query(q[j][1])+query(n));
	}
	FOR(i,0,m) printf("%d\n",ans[i]);
	return 0;
}
