#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define N 200005
int a[N],c[N],A[N],B[N],s[N],v[N],sa[N],rank[N],h[N][20],n;
int q[N][2],id[N],flag[N],next[N],son[N],d[N],ans[N];
void add(int x){for (;x<=n;x+=x&-x) d[x]++;}
int get(int x){int res=0; for (;x>0;x-=x&-x) res+=d[x]; return res;}
bool cmp(const int i,const int j){return c[i]==c[j]?i<j:c[i]<c[j];}
bool same(int *r,int a,int b,int l){return r[a]==r[b] && r[a+l]==r[b+l];}
void da(int n)
{
	int i,j,p,k=0,*x=A,*y=B,*t,m=0;
	for (int i=0;i<n;i++) sa[i]=i; sort(sa,sa+n,cmp);
	for (int i=0;i<n;i++){
		if (!i || c[sa[i]]!=c[sa[i-1]]) m++; 
		x[sa[i]]=m;
		}
	for (j=1,p=1,m++;p<n;j*=2,m=p){
		for (p=0,i=n-j;i<n;i++) y[p++]=i;
		for (i=0;i<n;i++) if (sa[i]>=j) y[p++]=sa[i]-j;
		for (i=0;i<n;i++) v[i]=x[y[i]];
		for (i=0;i<m;i++) s[i]=0;
		for (i=0;i<n;i++) s[v[i]]++;
		for (i=1;i<m;i++) s[i]+=s[i-1];
		for (i=n-1;i>=0;i--) sa[--s[v[i]]]=y[i];
		for (t=x,x=y,y=t,i=1,p=1,x[sa[0]]=0;i<n;i++)
			x[sa[i]]=same(y,sa[i-1],sa[i],j)?p-1:p++;
		}
	for (i=0;i<n;i++) rank[sa[i]]=i;
	for (i=0;i<n-1;h[rank[i++]][0]=k)
		for (k?k--:0,j=sa[rank[i]-1];c[i+k]==c[j+k];k++);
	for (int j=0;j<20;j++)
		for (int i=0;i<=n-(1<<j+1);i++)
			h[i][j+1]=min(h[i][j],h[i+(1<<j)][j]);
}
int main()
{
	scanf("%d",&n);
	for (int i=0;i<n;i++) scanf("%d",&a[i]); c[n-1]=-150,c[n+n-1]=c[n-1]-1;
	for (int i=0;i<n-1;i++) c[i]=a[i]-a[i+1],c[n+i]=-c[i]; da(n+n);
	int m,tot,x,y; scanf("%d",&m),tot=0;
	for (int i=0;i<m;i++){
		scanf("%d%d",&x,&y); if (x==y) {ans[i]=n-1; continue;}
		int H=y-x,w=rank[n+x-1],L=w,R=w;
		for (int j=19;j>=0;j--){
			if (L+1>=1<<j && h[L+1-(1<<j)][j]>=H) L-=1<<j;
			if (h[R+1][j]>=H) R+=1<<j;
			}
		q[++tot][0]=x-H,q[tot][1]=y,id[tot]=i;
		flag[tot]=-1,next[tot]=son[L-1],son[L-1]=tot;
		q[++tot][0]=x-H,q[tot][1]=y,id[tot]=i;
		flag[tot]=1,next[tot]=son[R],son[R]=tot;
		}
	for (int i=0;i<n+n;i++){
		add(sa[i]+1);
		for (int p=son[i];p;p=next[p]){
			int x=q[p][0]-1,y=q[p][1];
			ans[id[p]]+=(get(x)-get(y)+get(n))*flag[p];
			}
		}
	for (int i=0;i<m;i++) printf("%d\n",ans[i]); return 0;
}
