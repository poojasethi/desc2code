#include <cstdio>
#include <cstring>
#include <iostream>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <algorithm>
const int oo = 2100000000,
    mn=200010;
using namespace std;
int lowbit(int a)
{
   return (a)&(-a);
}
struct case1
{
   int x,v,p;
   bool f1,f2;
}   p[400001];
int n,E,a[mn/2],b[mn],t[mn],head[mn],e[mn];
int next[mn],rank[mn*2],rank2[mn],sa[mn];
int d[mn],h[mn],height[mn],st[21][mn],ans[mn/2],tree[mn/2];

void add(int x,int y)
{
   e[++E]=y;
   next[E]=head[x];
   head[x]=E;
}

bool cmp(int x,int y)
{
   return b[x]<b[y];
}

bool cmp2(case1 x,case1 y)
{
   return x.x<y.x;
}

int Min(int l,int r)
{
   int len=(int)(log(r-l+1)/log(2));
   return min(st[len][l],st[len][r-(1<<len)+1]);
}

void ins(int i)
{
   for (;i<=n;i+=lowbit(i))
      tree[i]++;
}

int sum(int i)
{
   int s=0;
   for (;i>0;i-=lowbit(i))
      s+=tree[i];
   return s;
}

int main()
{
   //freopen("AC.in","r",stdin);
   //freopen("AC.out","w",stdout);
   int q,o=0,tot=0;
   cin>>n;
   for (int i=1;i<=n;i++)
      scanf("%d",&a[i]);
   for (int i=1;i<n;i++)
   {
      b[i]=a[i+1]-a[i];
      b[i+n]=-b[i];
   }
   b[n]=-oo;
   b[2*n]=oo;
   for (int i=1;i<=2*n;i++)
      t[i]=i;
   sort(t+1,t+2*n+1,cmp);
   for (int i=1;i<=2*n;i++)
      rank[t[i]]=(o+=(i==1||b[t[i]]>b[t[i-1]]));
   for (int i=0;(1<<i)<2*n;i++)
   {
      int s=0;
      E=0;
      memset(head,0,sizeof(head));
      for (int j=1;j<=2*n;j++)
         add(rank[j+(1<<i)],j);
      for (int j=o;j>=0;j--)
         for (int k=head[j];k;k=next[k])
            d[++s]=e[k];
      E=0;
      memset(head,0,sizeof(head));
      for (int j=1;j<=2*n;j++)
         add(rank[d[j]],d[j]);
      s=0;
      for (int j=1;j<=o;j++)
         for (int k=head[j];k;k=next[k])
            d[++s]=e[k];
      int o2=0;
      for (int j=1;j<=2*n;j++)
      {
         o2+=(rank[d[j]]!=rank[d[j-1]]||rank[d[j]+(1<<i)]!=rank[d[j-1]+(1<<i)]);
         rank2[d[j]]=o2;
      }
      o=o2;
      for (int j=1;j<=2*n;j++)
         rank[j]=rank2[j];
   }
   for (int j=1;j<=2*n;j++)
      sa[rank[j]]=j;
   for (int j=1;j<=2*n;j++)
      if (rank[j]<2*n)
      {
         for (h[j]=max(0,h[j-1]-1);b[j+h[j]]==b[sa[rank[j]+1]+h[j]];h[j]++);
         st[0][rank[j]]=height[rank[j]]=h[j];
      }
   for (int i=1;(1<<i)<=2*n-1;i++)
      for (int j=1;j+(1<<i)-1<=2*n-1;j++)
         st[i][j]=min(st[i-1][j],st[i-1][j+(1<<i-1)]);
   cin>>q;
   for (int i=1;i<=q;i++)
   {
      int l,r;
      scanf("%d%d",&l,&r);
      int ll=rank[l],rr=rank[l]-1;
      for (int j=20;j>=0;j--)
         if (ll-(1<<j)>=1&&Min(ll-(1<<j),rank[l]-1)>=r-l)
            ll-=(1<<j);
      for (int j=20;j>=0;j--)
         if (rr+(1<<j)<2*n&&Min(rank[l],rr+(1<<j))>=r-l)
            rr+=(1<<j);
      rr++;
      p[4*i-3]=(case1){ll-1,l-(r-l+1),i,1,0};
      p[4*i-2]=(case1){ll-1,r+1,i,1,1};
      p[4*i-1]=(case1){rr,l-(r-l+1),i,0,0};
      p[4*i]=(case1){rr,r+1,i,0,1};
   }
   o=1;
   sort(p+1,p+4*q+1,cmp2);
   for (int i=1;i<=4*q;i++)
   {
      int s;
      while (o<=min(2*n,p[i].x))
      {
         if (sa[o]>n)
         {
            tot++;
            ins(sa[o]-n);
         }
         o++;
      }
      if (p[i].f2)
         s=tot-sum(p[i].v-1);
      else
         s=sum(p[i].v);
      ans[p[i].p]+=(1-2*p[i].f1)*s;
   }
   for (int i=1;i<=q;i++)
      printf("%d\n",ans[i]);
   return 0;
}
