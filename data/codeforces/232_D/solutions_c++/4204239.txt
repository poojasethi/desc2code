#include<cstdio>
#include<algorithm>
using namespace std;
const int n=100005;
typedef int Arr[2*n];
int N,Num,e,i,j,k,p,X,Y,H,L,R,Q;
int A[n],Ans[n],son[n],l[n],r[n],f[2*n][20];
Arr B,sa,c,g,next,T,type,height;
int rank[4*n],tmp[4*n];
int cmp(const int &i,const int &j)
{
	return B[i]<B[j];
}
void Link(int X,int Y,int Z)
{
	T[++e]=Y,type[e]=Z,next[e]=son[X],son[X]=e;
}
void Add(int x)
{
	for(;x<=Num;x+=x&-x) ++g[x];
}
int Get(int x)
{
	int res=0;
	for(;x>0;x-=x&-x) res+=g[x];
	return res;
}
int main()
{
	scanf("%d",&N);
	for(i=1;i<=N;++i) scanf("%d",&A[i]);
	for(i=1;i<=N;++i) B[i]=A[i]-A[i+1],B[N+i+1]=A[i+1]-A[i];
	B[N+1]=2000000005,B[N+N+2]=-200000005;
	Num=N+N+2;
	for(i=1;i<=Num;++i) sa[i]=i;
	sort(sa+1,sa+Num+1,cmp);
	rank[sa[1]]=1;
	for(i=2;i<=Num;++i) rank[sa[i]]=rank[sa[i-1]]+(B[sa[i]]!=B[sa[i-1]]);
	for(k=1;k<Num;k*=2)
	{
		for(i=0;i<=Num;++i) c[i]=0;
		for(i=1;i<=Num;++i) ++c[rank[i+k]];
		for(i=1;i<=Num;++i) c[i]+=c[i-1];
		for(i=Num;i;--i) tmp[c[rank[i+k]]--]=i;
		for(i=0;i<=Num;++i) c[i]=0;
		for(i=1;i<=Num;++i) ++c[rank[i]];
		for(i=1;i<=Num;++i) c[i]+=c[i-1];
		for(i=Num;i;--i) sa[c[rank[tmp[i]]]--]=tmp[i];
		for(i=1;i<=Num;++i) tmp[i]=rank[i];
		rank[sa[1]]=1;
		for(i=2;i<=Num;++i) rank[sa[i]]=rank[sa[i-1]]+(tmp[sa[i]]!=tmp[sa[i-1]]||tmp[sa[i]+k]!=tmp[sa[i-1]+k]);
		if(rank[sa[Num]]==Num) break;
	}
	for(i=1,p=0;i<=Num;++i)
		if(rank[i]==1) height[rank[i]]=0;
		else
		{
			p--;
			if(p<0) p=0;
			j=sa[rank[i]-1];
			for(;B[i+p]==B[j+p];++p);
			height[rank[i]]=p;
		}
	for(i=Num;i;--i)
	{
		f[i][0]=height[i];
		for(j=1;i+(1<<j)<=Num;++j)
			if(f[i][j-1]<f[i+(1<<j-1)][j-1]) f[i][j]=f[i][j-1];
			else f[i][j]=f[i+(1<<j-1)][j-1];
	}
	scanf("%d",&Q);
	for(i=1;i<=Q;++i)
	{
		scanf("%d%d",&X,&Y);
		H=Y-X;
		L=R=rank[X];
		for(j=19;j>=0;--j)
		{
			if(L>(1<<j)&&f[L-(1<<j)+1][j]>=H) L-=1<<j;
			if(R+(1<<j)<=Num&&f[R+1][j]>=H) R+=1<<j;
		}
		l[i]=L,r[i]=R;
		p=X-H-1;
		if(p>0) Link(p,i,1);
		p=Y;
		Link(p,i,-1);
	}
	for(i=1;i<=N;++i)
	{
		Add(rank[N+i+1]);
		for(j=son[i];j;j=next[j])
		{
			k=T[j];
			Ans[k]+=type[j]*(Get(r[k])-Get(l[k]-1));
		}
	}
	for(i=1;i<=Q;++i)
	{
		Ans[i]+=Get(r[i])-Get(l[i]-1);
		printf("%d\n",Ans[i]);
	}
	return 0;
}
  									 		 	    		 		