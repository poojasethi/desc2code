#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<iostream>
#include<ctime>
#include<map>
using namespace std;
const int MAXN=400005;
const int MAXP=8000005;
const int MAXL=19;
const int oo=0x7fffffff;
int N,Q,T,len,md,ans;
int rank[MAXN],x[MAXN],y[MAXN],Sa[MAXN],tg[MAXN];
int height[MAXN],mn[MAXN][MAXL],lg[MAXN],p[MAXN];
int ss[MAXN],root[MAXN],sum[MAXP],son[MAXP][2];
int l1,r1,cnt,ql,qr,mid,pt;
map<int,int> hash;
int Add(int now,int l,int r)
{
	int mid=(l+r)/2,tmp=++pt;
	sum[tmp]=sum[now]+1;
	son[tmp][0]=son[now][0];
	son[tmp][1]=son[now][1];
	if(l==r)
		return tmp;
	if(ql<=mid)
		son[tmp][0]=Add(son[now][0],l,mid);
	else
		son[tmp][1]=Add(son[now][1],mid+1,r);
	return tmp;
}
int Query(int now,int l,int r)
{
	int mid=(l+r)/2,get=0;
	if(ql<=l&&qr>=r)
		return sum[now];
	if(ql<=mid)
		get+=Query(son[now][0],l,mid);
	if(qr>mid)
		get+=Query(son[now][1],mid+1,r);
	return get;
}
int Ask(int l,int r)
{
	int k=lg[r-l+1];
	if(l>r)
		return oo;
	return min(mn[l][k],mn[r-(1<<k)+1][k]);
}
int find(int x)
{
	int l,r,mid;
	l=1,r=T;
	while(l<=r)
	{
		mid=(l+r)/2;
		if(rank[mid]>=x)r=mid-1;
		else l=mid+1;
	}
	return l;
}
void tgsort(int fr[],int by[],int to[],int n,int m)
{
	int i;
	for(i=0;i<=m;i++)
		tg[i]=0;
	for(i=1;i<=n;i++)
		tg[by[i]]++;
	for(i=1;i<=m;i++)
		tg[i]+=tg[i-1];
	for(i=n;i>=1;i--)
		to[tg[by[fr[i]]]--]=fr[i];
}
void make_Sa()
{
	int i,j,t;
	for(i=1;i<=len;i++)
		rank[i]=i;
	tgsort(rank,ss,Sa,len,T);
	for(i=1;i<=len;i++)
		rank[Sa[i]]=rank[Sa[i-1]]+(ss[Sa[i]]!=ss[Sa[i-1]]);
	for(t=0;rank[Sa[len]]<len;t++)
	{
		for(i=1;i<=len;i++)
			x[i]=rank[i],y[i]=(i+(1<<t)<=len)?rank[i+(1<<t)]:0;
		for(i=1;i<=len;i++)
			Sa[i]=i;
		tgsort(Sa,y,rank,len,len);
		tgsort(rank,x,Sa,len,len);
		for(i=1;i<=len;i++)
			rank[Sa[i]]=rank[Sa[i-1]]+((x[Sa[i]]!=x[Sa[i-1]])||(y[Sa[i]]!=y[Sa[i-1]]));
	}
}
void make_height()
{
	int i,j=0;
	for(i=1;i<=len;i++)
	{
		if(j)j--;
		if(rank[i]==1)
		{
			height[rank[i]]=-1;
			continue;
		}
		for(j;ss[i+j]==ss[Sa[rank[i]-1]+j];j++);
		height[rank[i]]=j;
		j=max(0,j-1);
	}
	for(i=1;i<=len;i++)
		mn[i][0]=height[i];
	for(i=1;i<=18;i++)
		for(j=1;j+(1<<i)<=len;j++)
			mn[j][i]=min(mn[j][i-1],mn[j+(1<<i-1)][i-1]);	
	for(i=1;i<=len;i++)
	{
		if(Sa[i]<=md){root[i]=root[i-1];continue;}
		ql=Sa[i]-md;
		root[i]=Add(root[i-1],1,N);
	}
	lg[1]=0;
	for(i=2;i<=len;i++)
		lg[i]=lg[i-1]+(i-1==(1<<lg[i-1]+1));
}
int main()
{
	int i,j,tmp,lt,rt,mid;
	int a,b;
	scanf("%d",&N);
	for(i=1;i<=N;i++)
		scanf("%d",&p[i]);
	for(i=1;i<N;i++)
		ss[++len]=p[i+1]-p[i];
	ss[md=++len]=-oo;
	for(i=1;i<N;i++)
		ss[++len]=p[i]-p[i+1];
	ss[++len]=oo;
	for(i=1;i<=len;i++)
		rank[i]=ss[i];
	sort(rank+1,rank+1+len);
	for(i=1,T=0;i<=len;i++)
		if(i==1||rank[i]!=rank[i-1])rank[++T]=rank[i];
	for(i=1;i<=len;i++)
		ss[i]=find(ss[i]);
	make_Sa();
	make_height();
	scanf("%d",&Q);
	for(i=1;i<=Q;i++)
	{
		scanf("%d%d",&l1,&r1);
		if(N==1)
			ans=0;
		else
		{
			cnt=r1-l1;rt=tmp=rank[l1];lt=1;
			while(lt<=rt)
			{
				mid=(lt+rt)/2;
				if(Ask(mid+1,tmp)>=cnt)
					rt=mid-1;
				else
					lt=mid+1;
			}
			a=lt;lt=tmp+1;rt=len;
			while(lt<=rt)
			{
				mid=(lt+rt)/2;
				if(Ask(tmp+1,mid)>=cnt)
					lt=mid+1;
				else
					rt=mid-1;
			}
			b=rt;ql=1;qr=l1-cnt-1;ans=0;
			if(ql<=qr)
				ans+=Query(root[b],1,N)-Query(root[a-1],1,N);
			ql=r1+1,qr=N;
			if(ql<=qr)
				ans+=Query(root[b],1,N)-Query(root[a-1],1,N);
		}
		printf("%d\n",ans);
	}
	return 0;
}