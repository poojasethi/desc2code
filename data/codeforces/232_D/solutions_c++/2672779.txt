#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cstdlib>
#include<cmath>

using namespace std;

const int maxn = 400010;
const int maxp = 1000000009;

static int n,hash[maxn],len,Mn[maxn][22];
static int P[maxn],srt[maxn],root[maxn];
static int S[maxn],m,idx[maxn];

struct T{
	int sum,l,r;
}h[maxn*18];
int key(int x,int y){
	return hash[y]-hash[x-1]*P[y-x+1];
}

int lcp(int x,int y){
	for (int i=0;i<8;i++)
		if (S[x+i]!=S[y+i]) return i;
	int l=-1,r=min(2*n-x,2*n-y)+2;
	while (l+1<r){
		int mid=l+r>>1;
		if (key(x,x+mid)==key(y,y+mid))
			l=mid;else r=mid;
	}
	return l+1;
}

struct cmp{
	bool operator ()(const int &a,const int &b){
		int len=lcp(a,b);
		return S[a+len]<S[b+len];
	}
};

int getmin(int x,int y){
	y--;
	if (y<x) return 2*n;
	int tl=y-x+1,ts=1,t=0;
	t=int(log(tl)/log(2)+1E-7);
	ts=1<<t;
	return min(Mn[x][t],Mn[y-ts+1][t]);
}

int ins(int t,int l,int r,int x){
	h[++len]=h[t];
	h[len].sum++;t=len;
	if (l==r) return t;
	int mid=l+r>>1;
	if (x<=mid) h[t].l=ins(h[len].l,l,mid,x);
	else h[t].r=ins(h[len].r,mid+1,r,x);
	return t;
}

int get(int t,int l,int r,int x,int y){
	if (t==0||l>y||r<x||x>y)return 0;
	if (x<=l&&r<=y) return h[t].sum;
	int mid=l+r>>1;
	return get(h[t].l,l,mid,x,y)+get(h[t].r,mid+1,r,x,y);
}

int main(){
	#ifdef ONLINE_JUDGE
	#else
	freopen("232D.in","r",stdin);
	freopen("232D.out","w",stdout);
	#endif
	scanf("%d\n",&n);
	for (int i=1;i<=n;i++)	scanf("%d",&S[i]);
	for (int i=1;i<n;i++)S[i]=S[i+1]-S[i];
	for (int i=1;i<n;i++)S[n+i-1]=-S[i];n--;//n*=2;
	S[2*n+1]=-100000000;P[0]=1;
	for (int i=1;i<=n*2+1;i++){srt[i]=i;P[i]=P[i-1]*maxp;hash[i]=hash[i-1]*maxp+S[i];}
	sort(srt+1,srt+2*n+1,cmp());
	for (int i=1;i<=2*n;i++) idx[srt[i]]=i;
	for (int i=1;i<n*2;i++)
		Mn[i][0]=lcp(srt[i],srt[i+1]);
	int ts=1;
	for (int j=1;j<=19;j++){
		for (int i=1;i+ts*2-1<=2*n;i++)
			Mn[i][j]=min(Mn[i][j-1],Mn[i+ts][j-1]);
		ts=ts*2;
	}
	for (int i=1;i<=n*2;i++)
		root[i]=ins(root[i-1],1,2*n,srt[i]);
	scanf("%d",&m);
	for (int i=1;i<=m;i++){
		int x,y;scanf("%d%d",&x,&y);
		if (x==y){
			printf("%d\n",n);
			continue;
		}
		int len=y-x;y--;
		int dt=idx[x];
		int l=0,r=dt;
		while (l+1<r){
			int mid=l+r>>1;
			if (getmin(mid,dt)>=len) r=mid;
			else l=mid;
		}
		int l1=dt,r1=2*n+1;
		while (l1+1<r1){
			int mid=l1+r1>>1;
			if (getmin(dt,mid)>=len) l1=mid;
			else r1=mid;
		}
		int ans1=get(root[l1],1,2*n,n+1,n+x-len-1);
		int ans2=get(root[r-1],1,2*n,n+1,n+x-len-1);
		int ans3=get(root[l1],1,2*n,n+x+len+1,2*n);
		int ans4=get(root[r-1],1,2*n,n+x+len+1,2*n);
		printf("%d\n",ans1-ans2+ans3-ans4);
	}
//	for (int i=1;i<=2*n;i++) printf("%d\n",srt[i]);
	fclose(stdout);
	fclose(stdin);
	return 0;
}
