#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define N 100010
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int a[26],c,len;
} tr[N*4];
int i,j,k,n,m,M,x,y;
char p[N];
inline void update(int x,int y,int z) {
	int i;
	For(i,0,25) tr[x].a[i]=tr[y].a[i]+tr[z].a[i];
}
void build(int q,int x,int y) {
	tr[q].c=-1;
	tr[q].len=y-x+1;
	if (x==y) {
		tr[q].a[p[x]-'a']++;
		return;
	}
	int mid=(x+y)/2;
	build(q*2,x,mid);
	build(q*2+1,mid+1,y);
	update(q,q*2,q*2+1);
}
inline void Cov(int x,int y) {
	int i;
	For(i,0,25) tr[x].a[i]=0;
	tr[x].a[y]=tr[x].len;
	tr[x].c=y;
}
inline void renew(int x) {
	if (tr[x].c>=0) Cov(x*2,tr[x].c),Cov(x*2+1,tr[x].c);
	tr[x].c=-1;
}
void cal(int q,int x,int y,int l,int r) {
	if (l<=x&&y<=r) {
		if (tr[0].c==-2) tr[0]=tr[q];
		else tr[M]=tr[0],update(0,M,q);
		return;
	}
	renew(q);
	int mid=(x+y)/2;
	if (l<=mid) cal(q*2,x,mid,l,r);
	if (mid<r) cal(q*2+1,mid+1,y,l,r);
}
void cover(int q,int x,int y,int l,int r,int t) {
	if (l<=x&&y<=r) {
		Cov(q,t);
		return;
	}
	renew(q);
	int mid=(x+y)/2;
	if (l<=mid) cover(q*2,x,mid,l,r,t);
	if (mid<r) cover(q*2+1,mid+1,y,l,r,t);
	update(q,q*2,q*2+1);
}
inline void work(int x,int y) {
	tr[0].c=-2;
	cal(1,1,n,x,y);
	int i,s=0;
	For(i,0,25) s+=tr[0].a[i]&1;
	if (s>1) return;
	For(i,0,25) {
		int A=tr[0].a[i]/2;
		if (A) {
			cover(1,1,n,x,x+A-1,i);
			x+=A;
		}
	}
	For(i,0,25) if (tr[0].a[i]&1) {
		cover(1,1,n,x,x,i);
		x++;
	}
	for (i=25;i>=0;i--) {
		int A=tr[0].a[i]/2;
		if (A) {
			cover(1,1,n,x,x+A-1,i);
			x+=A;
		}
	}
}
void print(int q,int x,int y) {
	if (x==y) {
		int i;
		For(i,0,25) if (tr[q].a[i]) break;
		printf("%c",'a'+i);
		return;
	}
	int mid=(x+y)/2;
	renew(q);
	print(q*2,x,mid);
	print(q*2+1,mid+1,y);
}
int main() {
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	M=N*4-1;
	scanf("%d%d",&n,&m);
	scanf("%s",p+1);
	build(1,1,n);
	For(i,1,m) {
		scanf("%d%d",&x,&y);
		work(x,y);
	}
	print(1,1,n);
	return 0;
}
