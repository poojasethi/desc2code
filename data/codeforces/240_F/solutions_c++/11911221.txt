#include <map>
#include <set>
#include <list>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <bitset>
#include <vector>
#include <cstdio>
#include <string>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
struct node {
	struct newn {
		int l,r,x;
	};
	newn a[600005];
	void init (int l,int r,int x) {
		int m;
		a[x].l=l;a[x].r=r;a[x].x=0;
		if (l==r) return;
		m=(l+r)>>1;
		init(l,m,x<<1);
		init(m+1,r,(x<<1)|1);
	}
	void work (int l,int r,int t,int v) {
		if (l>r) return;
		if (a[t].l==l&&a[t].r==r) {a[t].x=(r-l+1)*v;return;}
		int m=(a[t].l+a[t].r)>>1;
		if (a[t].x==a[t].r-a[t].l+1) {
			a[t<<1].x=m-a[t].l+1;
			a[t<<1|1].x=a[t].r-m;
		}
		else if (a[t].x==0) a[t<<1].x=a[t<<1|1].x=0;
		if (r<=m) work(l,r,t<<1,v);
		else if (l>m) work(l,r,t<<1|1,v);
		else {
			work(l,m,t<<1,v);work(m+1,r,t<<1|1,v);
		}
		a[t].x=a[t<<1].x+a[t<<1|1].x;
	}
	int solve (int l,int r,int t) {
		if (a[t].l==l && a[t].r==r) return a[t].x;
		int m=a[t].l+a[t].r>>1;
		if (a[t].x==a[t].r-a[t].l+1) {
			a[t<<1].x=m-a[t].l+1;a[t<<1|1].x=a[t].r-m;
		}
		else if (a[t].x==0) a[t<<1].x=a[t<<1|1].x=0;
		if (l>m) return solve(l,r,t<<1|1);
		else if (r<=m) return solve(l,r,t<<1);
		else return solve(l,m,t<<1)+solve(m+1,r,t<<1|1);
	}
}a[26];
char s[100005],ans[100005];
int f[26];
int main ( ) {
	int n,m,i,j,l,r,p,t,x;
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d%d",&n,&m);
	scanf("%s",s+1);
	for (i=0;i<26;i++) a[i].init(1,n,1);
	for (i=1;i<=n;i++) a[s[i]-'a'].work(i,i,1,1);
	while (m--) {
		scanf("%d%d",&l,&r);
		p=0;
		for (i=0;i<26;i++) {
			f[i]=a[i].solve(l,r,1);
			if (f[i]&1) p++;
		}
		if (p>1) continue;
		if (p==1) x=l+r>>1;
		t=0;
		for (i=0;i<26;i++) {
			a[i].work(l,r,1,0);
			a[i].work(l+t,l+t+(f[i]>>1)-1,1,1);
			a[i].work(r-t-(f[i]>>1)+1,r-t,1,1);
			if (f[i]&1) a[i].work(x,x,1,1);
			t+=f[i]>>1;
		}
	}
	for (i=1;i<=n;i++) {
		for (j=0;j<26;j++) {
			if (a[j].solve(i,i,1)==1) ans[i]='a'+j;
		}
	}
	printf("%s\n",ans+1);
	return 0;
}
/*
Sample test(s)

input

7 2
aabcbaa
1 3
5 7

output

abacaba

input

3 2
abc
1 2
2 3

output

abc
*/
