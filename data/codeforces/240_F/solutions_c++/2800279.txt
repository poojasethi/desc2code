#include <cstdio>
#include <cstring>

#define L(x) ((x) << 1)
#define R(x) (L(x) + 1)
#define NN 600000

int n, m;
int l, r;

char str[NN];

int tree[NN][26];
int push[NN];
int freq[26];

inline void refresh(int idx, int len) {
  if (push[idx] != -1) {
    int val = push[idx];
    push[idx] = -1;
    push[L(idx)] = val;
    push[R(idx)] = val;

    for (int i = 0; i < 26; ++i) tree[idx][i] = 0;
    tree[idx][val] = len;
  }
}

void update(int idx, int left, int right, int val) {
  if (left > r || right < l)
    refresh(idx, right-left+1);
  else if (l <= left && right <= r) {
    push[idx] = val;
    refresh(idx, right-left+1);
  } else {
    refresh(idx, right-left+1);
    int mid = (left + right) >> 1;
    update(L(idx), left, mid, val);
    update(R(idx), mid+1, right, val);

    for (int i = 0; i < 26; ++i)
      tree[idx][i] = tree[L(idx)][i] + tree[R(idx)][i];
  }
}

void query(int idx, int left, int right) {
  if (left > r || right < l) return;
  else if (l <= left && right <= r) {
    refresh(idx, right-left+1);
    for (int i = 0; i < 26; ++i)
      freq[i] += tree[idx][i];
  } else {
    refresh(idx, right-left+1);
    int mid = (left + right) >> 1;
    query(L(idx), left, mid);
    query(R(idx), mid+1, right);
  }
}

int main() {
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);

  scanf("%d%d%s", &n, &m, str+1);
  for (int i = 1; i <= n; ++i) {
    l = r = i;
    update(1, 1, n, str[i]-'a');
  }

  while (m--) {
    scanf("%d%d", &l, &r);
    memset(freq, 0, sizeof freq);
    query(1, 1, n);

    int odd = 0;
    for (int i = 0; i < 26; ++i)
      if (freq[i] % 2) {
        ++odd;
      }
    if (odd <= 1) {
      int L = l, R = r;
      int ll = l, rr = r;
      for (int i = 0; i < 26; ++i) if (freq[i]) {
        if (freq[i] % 2) {
          --freq[i];
          int step = (R - L) >> 1;
          int mid = L + step;
          l = r = mid;
          update(1, 1, n, i);
        }
        l = ll; r = l + freq[i]/2 - 1;
        update(1, 1, n, i);
        r = rr; l = r - freq[i]/2 + 1;
        update(1, 1, n, i);

        ll += freq[i]/2;
        rr -= freq[i]/2;
      }
    }
  }

  for (int i = 1; i <= n; ++i) {
    memset(freq, 0, sizeof freq);
    l = r = i;
    query(1, 1, n);
    for (int j = 0; j < 26; ++j) if (freq[j]) putchar('a' + j); 
  }
  putchar('\n');

  return 0;
}
