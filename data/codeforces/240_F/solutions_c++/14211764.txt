# include <bits/stdc++.h>

using namespace std;

const int maxn = 1e5 + 100;
const int maxk = 26 ;

int n, seg[4 * maxn][maxk], lzy[4 * maxn];

void pull(int, int, int);
void push(int);

void add(int c,int l,int r,int L=0,int R=n,int id=1){
	if(l == L && r == R){
		memset(seg[id], 0, sizeof seg[id]);
		seg[id][c] = R - L;
		lzy[id] = c;
		return;
	}
	pull(id, L, R);
	int mid = (L + R) >> 1;
	if(l < mid)
		add(c, l, min(mid, r), L, mid, id * 2 + 0);
	if(r > mid)
		add(c, max(l, mid), r, mid, R, id * 2 + 1);
	push(id);
}

int get(int c,int l,int r,int L=0,int R=n,int id=1){
	if(l == L && r == R)
		return seg[id][c];
	pull(id, L, R);
	int mid = (L + R) >> 1, ret = 0;
	if(l < mid)
		ret += get(c, l, min(mid, r), L, mid, id * 2 + 0);
	if(r > mid)
		ret += get(c, max(l, mid), r, mid, R, id * 2 + 1);
	return ret;
}

void push(int id){
	for (int i = 0; i < 26; i++)
		seg[id][i] = seg[id * 2 + 0][i] + seg[id * 2 + 1][i];
}

void pull(int id,int L,int R){
	if(lzy[id] == -1)
		return;
	int mid = (L + R) >> 1;
	add(lzy[id], L, mid, L, mid, id * 2 + 0);		
	add(lzy[id], mid, R, mid, R, id * 2 + 1);
	lzy[id] = -1;
}


void modify(int l,int r){
	int let[26];
	for (int i = 0; i < 26; i++)
		let[i] = get(i, l, r);
	
	int cnt = 0;
	for (int i = 0; i < 26; i++)
		cnt += (let[i] % 2);

	if(cnt > 1)
		return;
	
	int idx = -1;
	for (int i = 0; i < 26; i++)
		if(let[i] % 2)
			idx = i, let[i]--;
	
	for (int i = 0; i < 26; i++)
		if(let[i] % 2 == 0 && let[i] > 0){
			int shift = let[i] / 2;
			add(i, l, l + shift);
			add(i, r - shift, r);
			l += shift, r -= shift;
		}

	if(idx != -1)
		add(idx, l, r);
}

int main(){
	ifstream fin ("input.txt");
	ofstream fout ("output.txt");
	
	int q;
	fin >> n >> q;
	for (int i = 0; i < n; i++){
		char k; fin >> k;
		add(k - 'a', i, i + 1);
	}
	
	for (int i = 0; i < q; i++){
		int l, r;
		fin >> l >> r;
		l--;
		modify(l, r);
	}

	for (int i = 0; i < n; i++)
		for (int j = 0; j < 26; j++)
			if(get(j, i, i + 1) == 1)
				fout << char(j + 'a');
	fout << endl;

	return 0;
}
		 		  				 				 			 	   		 	