#include <cstdio>
#include <algorithm>

using namespace std;

const int N = 100010, D = N << 2;

int n, m;
char s[N], ans[N];

int tag[D], sum[D][26];

void update(int d) {
	for (int x = 0; x < 26; ++x)
		sum[d][x] = sum[d << 1 | 0][x] + sum[d << 1 | 1][x];
}
void build(int d, int lt, int rt) {
	tag[d] = -1;
	if (lt == rt) {
		sum[d][s[lt] - 'a']++;
		return;
	}
	int md = (lt + rt) >> 1;
	build(d << 1 | 0, lt, md);
	build(d << 1 | 1, md + 1, rt);
	update(d);
}
void mark(int d, int lt, int rt, int v) {
	tag[d] = v;
	for (int x = 0; x < 26; ++x) {
		if (x != v) sum[d][x] = 0;
		else sum[d][x] = rt - lt + 1;
	}
}
void push(int d, int lt, int rt) {
	if (tag[d] != -1) {
		int md = (lt + rt) >> 1;
		mark(d << 1 | 0, lt, md, tag[d]);
		mark(d << 1 | 1, md + 1, rt, tag[d]);
		tag[d] = -1;
	}
}
int query(int d, int lt, int rt, int lq, int rq, int c) {
	if (lq <= lt && rt <= rq) {
		return sum[d][c];
	}
	push(d, lt, rt);
	int md = lt + rt >> 1;
	int ret = 0;
	if (lq <= md)
		ret += query(d << 1 | 0, lt, md, lq, rq, c);
	if (md < rq)
		ret += query(d << 1 | 1, md + 1, rt, lq, rq, c);
	return ret;
}
void modify(int d, int lt, int rt, int lq, int rq, int v) {
	if (lq <= lt && rt <= rq) {
		return mark(d, lt, rt, v);
	}
	push(d, lt, rt);
	int md = lt + rt >> 1;
	if (lq <= md)
		modify(d << 1 | 0, lt, md, lq, rq, v);
	if (md < rq)
		modify(d << 1 | 1, md + 1, rt, lq, rq, v);
	update(d);
}
void workans(int d, int lt, int rt) {
	if (lt == rt) {
		for (int x = 0; x < 26; ++x)
			if (sum[d][x]) ans[lt] = 'a' + x;
		return;
	}
	int md = lt + rt >> 1;
	push(d, lt, rt);
	workans(d << 1 | 0, lt, md);
	workans(d << 1 | 1, md + 1, rt);
}

int main() {
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);

	scanf("%d %d\n%s", &n, &m, s + 1);
	build(1, 1, n);

	for (int im = 1; im <= m; ++im) {
		int l, r;
		scanf("%d %d", &l, &r);
		int ods = 0, odp, cnt[26] = {0};
		for (int i = 0; i < 26; ++i) {
			cnt[i] = query(1, 1, n, l, r, i);
			if (cnt[i] & 1) ods++, odp = i;
		}
		if (ods > 1) continue;

		for (int i = 0; i < 26; ++i) {
			if (cnt[i] > 1) modify(1, 1, n, l, r, i), l += cnt[i] / 2, r -= cnt[i] / 2;
		}
		if (ods) modify(1, 1, n, l, r, odp);
	}
	workans(1, 1, n);
	printf("%s\n", ans + 1);
}
