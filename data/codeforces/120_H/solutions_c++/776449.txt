#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <map>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#define vci vector<int> 
#define vcs vector<string> 
#define PII pair<int,int> 
#define PIII pair<int,PII> 
#define pb push_back
#define mp make_pair
#define FF first
#define SS second
#define ST begin()
#define ED end()
#define SI(x) ((int)x.size())
#define sqr(x) ((x)*(x))
#define foreach(i,x) for (__typeof(x.ST) i=x.ST;i!=x.ED;++i)
using namespace std;

typedef long long ll;
typedef long double ld;

const int M=205;
const int T=400*200+5;

int n,m,e,t;
int h[M],ne[T*4],po[T*4],p[T],q[M],v[T];
string s;
string w[T];
map<string,int> f;

void link(int x,int y)
{
  ++e;ne[e]=h[x];po[e]=y;h[x]=e;
}

int add(string p)
{
  int ret;
  if (!f.count(p)) f[p]=++t,w[t]=p;
  ret=f[p];
  return ret;
}

void dfs(int i,string p,int o)
{
  if (i==n)
  {
    if (!SI(p)) return;
    int now=add(p);
    link(o,now);
    return;
  }
  if (SI(p)<4) dfs(i+1,p+s[i],o);
  dfs(i+1,p,o);
}

int find(int i)
{
  for (int j=h[i],k;k=po[j],j;j=ne[j]) if (!v[k])
  {
    v[k]=1;
    if (!p[k]||find(p[k]))
    {
      p[k]=i;q[i]=k;
      return 1;
    }
  }
  return 0;
}

int main()
{
  freopen("input.txt","r",stdin);
  freopen("output.txt","w",stdout);

  scanf("%d\n",&m);
  for (int i=1;i<=m;++i)
  {
    getline(cin,s);
    n=s.size();
    if (n<=4) 
      link(i,add(s));
    else 
      dfs(0,"",i);
    memset(v,0,sizeof v);
    if (!find(i))
    {
      cout<<"-1"<<endl;
      return 0;
    }
  }
  for (int i=1;i<=m;++i)
    cout<<w[q[i]]<<endl;

  return 0;
}
