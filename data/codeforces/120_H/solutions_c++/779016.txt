#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<cmath>
using namespace std;
#define re(i,n) for(int i=0;i<(n);i++)
#define re1(i,n) for(int i=1;i<=(n);i++)
#define clr(a,n) memset(a,n,sizeof(a))
const int maxn = 500000;
int trie[maxn][27];
char tmp[10],ch[15];
int flag;
int num[201][80000]={0};
char ans[80000][5]={0};
bool chk[80000];
int yN,xN,xM[250]={0},yM[80000]={0};
bool dfs(int u){
	re1(v,yN){
		if(num[u][v] && !chk[v]){
			chk[v]=1;
			if( !yM[v] || dfs(yM[v])){
				xM[u]=v;yM[v]=u;
				return 1;
			}
		}
	}
	return 0;
}
void ins(int k){
	int n=strlen(tmp),p=0;
	re(i,n){
		int x= tmp[i]-'a';
		if(!trie[p][x]){
			++flag;
			clr(trie[flag],0);
			trie[p][x]=flag;
		}
		p=trie[p][x];
		if(!trie[p][26]){
			yN++;
			trie[p][26]=yN;
			for(int j=0;j<=i;j++) ans[yN][j]=tmp[j];
		}
		num[k][trie[p][26]]=1;
	}
}
void dfs(int dep,int i,int m,int k){
	if(dep==m) {tmp[dep]=0; ins(k); return ;}
	int n=strlen(ch);
	for(int j=i;j<n-m+dep+1;j++){
		tmp[dep]=ch[j];
		dfs(dep+1,j+1,m,k);
	}
}
int main(){
	int n;
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d",&n);
	yN=flag=0; clr(trie[0],0);
	re1(i,n){
		scanf("%s",ch);
		re1(j,4) dfs(0,0,j,i);
	}
	bool ff=1;
	re1(i,n){
		//clr(chk,0);
		re1(j,yN) chk[j]=0;
		if(!dfs(i)) {
			ff=0;
			puts("-1");
			break;
		}
	}
	if(ff){
		re1(i,n)
			puts(ans[xM[i]]);
	}
	return 0;
}
