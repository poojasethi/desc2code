#include <stdio.h>
#include <string.h>
#include <vector>
#include <map>
#include <string>
using namespace std;
char words[50010][30];
int use[300],res[50010],wcnt,ans[300];
vector <int> g[300];
char s[1100],p[1100];
map <string,int> mp;
void dfs(int now,int end,int chosen,int id)
{
    if (chosen>4) return;
    if (chosen!=0)
    {
        p[chosen]=0;
        if (mp.find(p)==mp.end())
        {
            strcpy(words[wcnt],p);
            mp[p]=wcnt++;
        }
        g[id].push_back(mp[p]);
    }
    if (now==end) return;
    dfs(now+1,end,chosen,id);
    p[chosen]=s[now];
    dfs(now+1,end,chosen+1,id);
}
bool dfs(int node)
{
    use[node]=1;
    int lenn=g[node].size();
    for (int ii=0;ii<lenn;ii++)
    {
        int i=g[node][ii];
        if (res[i]==-1||(!use[res[i]]&&dfs(res[i])))
        {
            res[i]=node;
            return true;
        }
    }
    return false;
}
int main()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    int n;
    while (scanf("%d",&n)==1)
    {
        mp.clear();
        wcnt=0;
        for (int i=0;i<n;i++)
        {
            g[i].clear();
            scanf("%s",s);
            int len=strlen(s);
            dfs(0,len,0,i);
        }
        memset(res,-1,sizeof(res));
        int cntt=0;
        for (int i=0;i<n;i++)
        {
            memset(use,0,sizeof(use));
            if (dfs(i)) cntt++;
        }
        if (cntt!=n) puts("-1");
        else
        {
            for (int i=0;i<wcnt;i++)
                if (res[i]!=-1) ans[res[i]]=i;
            for (int i=0;i<n;i++)
                printf("%s\n",words[ans[i]]);
        }
    }
    return 0;
}
