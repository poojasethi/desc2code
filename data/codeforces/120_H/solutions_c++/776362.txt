#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <algorithm>
using namespace std;

map<string, int> used;
vector< vector<string> > sh;
vector<string> ans;
vector<int> repable;

vector<string> mkshorts(const string &s)
{
	vector<string> ret;
	string cur = "    ";
	for (size_t i = 0; i < s.size(); ++i)
	{
		cur[0] = s[i];
		ret.push_back(cur.substr(0, 1));
		for (size_t j = i + 1; j < s.size(); ++j)
		{
			cur[1] = s[j];
			ret.push_back(cur.substr(0, 2));
			for (size_t k = j + 1; k < s.size(); ++k)
			{
				cur[2] = s[k];
				ret.push_back(cur.substr(0, 3));
				for (size_t r = k + 1; r < s.size(); ++r)
				{
					cur[3] = s[r];
					ret.push_back(cur);
				}
			}
		}
	}
	sort(ret.begin(), ret.end());
	ret.erase(unique(ret.begin(), ret.end()), ret.end());
	return ret;
}

inline bool push(int v)
{
	if (!repable[v])
		return false;
	repable[v] = false;
	for (size_t i = 0; i < sh[v].size(); ++i)
		if (!used.count(sh[v][i]))
		{
			used[ans[v] = sh[v][i]] = v;
			return repable[v] = true;
		}
	int j;
	for (size_t i = 0; i < sh[v].size(); ++i)
		if (sh[v][i] != ans[v] && push(j = used[sh[v][i]]))
		{
			for (; j < v; ++j)
				repable[j] = true;
			used[ans[v] = sh[v][i]] = v;
			return repable[v] = true;
		}
	return false;
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int n;
	cin >> n;
	repable.resize(n, 1);
	ans.resize(n);
	for (int i = 0; i < n; ++i)
	{
		string s;
		cin >> s;
		sh.push_back(mkshorts(s));
		if (!push(sh.size()-1))
		{
			cout << -1 << endl;
			return 0;
		}
	}

	for (int i = 0; i < n; ++i)
		cout << ans[i] << endl;

	return 0;
}