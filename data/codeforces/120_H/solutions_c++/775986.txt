#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

#define N 205
#define L 15
#define M 80005

int n, vn;
map < string, int > f;
char s[N][L], ans[N][L], b[L];
int len[N];
vector < int > v[N];
vector < string > vs;
int ly[M];
bool vis[M];

void dfs(int p, int c, int id, char * s) {
    b[c] = 0;
    if (c) {
        if (f.find(b) == f.end()) {
            f[b] = vn;
            vs.push_back(b);
            v[id].push_back(vn++);
        } else
            v[id].push_back(f[b]);
    }
    if (4 == c) return;
    for (int i = p; i < len[id]; ++i) {
        b[c] = s[i];
        dfs(i + 1, c + 1, id, s);
    }
}

bool find(int x) {
    for (vector < int >::iterator it = v[x].begin(); it != v[x].end(); ++it) if (!vis[*it]) {
        vis[*it] = 1;
        if (-1 == ly[*it] || find(ly[*it])) {
            ly[*it] = x;
            return 1;
        }
    }
    return 0;
}

bool solve() {
    memset(ly, -1, sizeof(ly));
    for (int i = 0; i < n; ++i) {
        memset(vis, 0, sizeof(vis));
        if (!find(i)) return 0;
    }
    for (int i = 0; i < vn; ++i)
        strcpy(ans[ ly[i] ], vs[i].c_str());
    for (int i = 0; i < n; ++i)
        puts(ans[i]);
    return 1;
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    scanf("%d", &n);
    vn = 0;
    for (int i = 0; i < n; ++i) {
        scanf("%s", s[i]);
        len[i] = strlen(s[i]);
        dfs(0, 0, i, s[i]);
    }
    if (!solve())
        puts("-1");
    return 0;
}
