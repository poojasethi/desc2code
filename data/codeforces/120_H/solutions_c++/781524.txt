#include <cstdio>
#include <cstring>
#include <string>
#include <map>
#include <iostream>
#define N 220*400*2
#define PB push_back
using namespace std;

map <string,int> M;
map <int, string> R;

int n,x,W=0,f[N],qd[N],qn[N],l[N],v[N],AC=0,E=0,fr[N];
string s,t;

void bd(int x,int y){
	qd[++E]=y;
	qn[E]=l[x];
	l[x]=E;
}

int DFS(int x){
	for (int k=l[x];k;k=qn[k])
		if (!v[qd[k]]){
			v[qd[k]]=1;
			if (f[qd[k]]==-1 || DFS(f[qd[k]])){
				f[qd[k]]=x;
				fr[x]=qd[k];
				return 1;
			}
		}
	return 0;
}

void update(int x,string t){
	if (!M[t]){
		M[t]=++W;
		R[W]=t;
	}
	bd(x,M[t]);
}

int main(){
	
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	
	cin >> n;
	M.clear(); R.clear();
	for (int i=0;i<n;i++){
		cin >> s;
		x = s.size();
		if (x>4){
			string t;
			for (int j1=0;j1<x;j1++)
			for (int j2=j1+1;j2<x+1;j2++)
			for (int j3=j2+1;j3<x+2;j3++)
			for (int j4=j3+1;j4<x+3;j4++){
				t.clear();
				t.PB(s[j1]);
				if (j2<x) t.PB(s[j2]);
				if (j3<x) t.PB(s[j3]);
				if (j4<x) t.PB(s[j4]);
				update(i,t);
			}				
		}
		else update(i,s);
		//system("pause");
	}
	
	memset(f,-1,sizeof(f));
	
	for (int i=0;i<n;i++){
		memset(v,0,sizeof(v));
		if (DFS(i)) AC++;
	}
	
	if (AC==n){
		for (int i=0;i<n;i++)
			cout << R[fr[i]] << endl;
	}
	else printf("-1\n");
	
	//scanf("\n");
	return 0;
}
