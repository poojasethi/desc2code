#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>

using namespace std;

int n,cnt;
map<string,int> hsh1;
map<int,string> hsh2;
char words[210][15];
int used[210],L[210];
vector<int> g[77000];

int NUM(char *buf){
	string a(buf);
	if(!hsh1[a]) hsh2[hsh1[a]=++cnt]=a;
	return hsh1[a];
}
void make_edge(int num){
	char buf[15];memset(buf,0,sizeof(buf));
	for(int i=0;words[num][i];i++){
		buf[0]=words[num][i];
		for(int j=i+1;words[num][j];j++){
			buf[1]=words[num][j];
			for(int k=j+1;words[num][k];k++){
				buf[2]=words[num][k];
				for(int l=k+1;words[num][l];l++){
					buf[3]=words[num][l];buf[4]=0;
					g[NUM(buf)].push_back(num);
				}
				buf[3]=0;g[NUM(buf)].push_back(num);
			}
			buf[2]=0;g[NUM(buf)].push_back(num);
		}
		buf[1]=0;g[NUM(buf)].push_back(num);
	}
}

int dfs(int u){
	for(vector<int> :: iterator p=g[u].begin();p!=g[u].end();p++) if(!used[*p]){
		used[*p]=1;
		if(!L[*p] || dfs(L[*p])){
			L[*p]=u;return 1;
		}
	}
	return 0;
}

int match(){
	int ans=0;
	for(int i=1;i<=cnt;i++){
		memset(used,0,sizeof(used));
		if(dfs(i)) ans++;
	}
	return ans;
}
int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%s",words[i]);
		make_edge(i);
	}
	int t=match();
	if(t<n) return puts("-1") && 0;
	for(int i=1;i<=n;i++) puts(hsh2[L[i]].c_str());
	return 0;
}
