#include <cstdio>
#include <algorithm>
#include <set>
#include <cstring>
#include <map>
#include <string>
#include <cstdio>
using namespace std;

int n,m,l[205],mat[80000],o[80000],out;
char s[205][15];
bool v[80000];

map<string,int> hash;

char S[10],ref[80000][10];

set<int> h[205];

FILE *fi,*fo;

void init(int i, int x, int z) {
    if (z>0) {
        S[z]='\0';
        string str = S;
        if (hash.find(str) == hash.end()) {
            hash[str] = m;
            strcpy(ref[m++],S);
        }
        h[i].insert(hash[str]);
    }
    if (z==4) return ;
    for (x; x<l[i]; x++) {
        S[z]=s[i][x];
        init(i,x+1,z+1);
    }
}

bool dfs(int z) {
    for (set<int>::iterator i=h[z].begin(), j=h[z].end(); i!=j; i++) {
        if (v[*i]) {
            v[*i]=false;
            if ((mat[*i]==-1)||(dfs(mat[*i]))) {
                mat[*i]=z;
                return true;
            }
        }
    }
    return false;
}

bool f1(int i, int j) {
    return mat[i]<mat[j];
}

int main() {
    fi=fopen("input.txt","r");
    fo=fopen("output.txt","w");
    fscanf(fi,"%d",&n);
    m=0;
    for (int i=0; i<n; i++) {
        fscanf(fi,"%s",s[i]);
        l[i]=strlen(s[i]);
        init(i,0,0);
    }
    memset(mat,-1,sizeof(mat));
    out=0;
    for (int i=0; i<n; i++) {
        memset(v,true,sizeof(v));
        if (dfs(i)) out++;
    }
    if (out==n) {
        for (int i=0; i<m; i++) o[i]=i;
        sort(o,o+m,f1);
        for (int i=0; i<m; i++)
            if (mat[o[i]]!=-1) 
                fprintf(fo,"%s\n",ref[o[i]]);
    }
    else
        fprintf(fo,"-1\n");
    fclose(fi);
    fclose(fo);
    return 0;
}