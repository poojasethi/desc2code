#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long ll;
const int mod = 27;
const int M = 540000;
const int N = 200 + 5;

int B[M], ans[N];
bool vis[M];
vector<int> G[N];
char s[N];
bool match(int u) {
    for (int i = 0; i <G[u].size(); ++i)
    if (!vis[G[u][i]]) {
        vis[G[u][i]] = 1;
        if (B[G[u][i]] == -1 || match(B[G[u][i]])) {
            B[G[u][i]] = u;
            return true;
        }
    }
    return false;
}
void dfs(int u, int idx, int g, int cur) {
    if (idx == -1) {
        if (g > 0)
            G[u].push_back(cur);
    } else {
        if (g + 1 <= 4)
            dfs(u, idx - 1, g + 1, cur * mod + s[idx] - 'a' + 1);
        dfs(u, idx - 1, g, cur);
    }
}
void put(int x) {
    while (x) {
        putchar('a' + x % mod - 1);
        x /= mod;
    }
    puts("");
}
int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    int n, len, v;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%s", s);
        len = strlen(s);
        if (len <= 4) {
            v = 0;
            for (int j = len - 1; j >= 0; --j)
                v = v * mod + s[j] - 'a' + 1;
            G[i].push_back(v);
            continue;
        }
        dfs(i, len - 1, 0, 0);
    }
    memset(B, -1, sizeof B);
    int cnt = 0;
    for (int i = 0; i < n; ++i) {
        memset(vis, 0, sizeof vis);
        if(match(i))
            ++ cnt;
        else
            break;
    }
    if (cnt == n) {
        for (int i = 0; i < M; ++i)
            if (B[i] != -1)
                ans[B[i]] = i;
        for (int i = 0; i < n; ++i)
            put(ans[i]);
    } else
        puts("-1");
    return 0;
}

    			 		 		  	  	  		    	 	