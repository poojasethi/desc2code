#include <cstdio>
#include <cmath>
#include <iostream>
#include <numeric>
#include <algorithm>
#include <string>
#include <memory.h>
#include <memory>
#include <functional>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <iomanip>
#include <time.h>
#include <map>
#include <queue>

using namespace std;

int a[ 11 ];
vector<int> v[ 201 ];
int wm[ 1 << 20 ];
int mw[ 201 ];
bool u[ 201 ];

bool dfs( int ver )
{
	if( ver < 0 ) return 1;
	if( u[ ver ] ) return 0;
	u[ ver ] = 1;
	for( int i = 0 ; i < v[ ver ].size() ; i++ )
    if( dfs( wm[ v[ ver ][ i ] ] ) )
    return mw[ ver ] = v[ ver ][ i ] , wm[ v[ ver ][ i ] ] = ver , 1;
	return 0;
}

void print( int h )
{
	string s;
	while( h )
	{
		s.push_back( 'a' + h % 27 - 1 );
		h /= 27;
	}
	reverse( s.begin() , s.end() );
	cout << s << endl;
}

int main()
{
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);

    memset( wm , -1 , sizeof wm );

	int n;
	cin >> n;
	for( int i = 0 ; i < n ; i++ )
	{
		string s;
		cin >> s;
		for( int j = 1 ; j < 5 ; j++ )
		if( s.size() >= j )
		{
			memset( a , 0 , sizeof a );
			for( int k = 0 ; k < j ; k++ )
			a[ k ] = 1;
			sort( a , a + s.size() );
			do
			{
				int hash = 0;
				for( int k = 0 ; k < s.size() ; k++ )
				if( a[ k ] )
				{
					hash = hash * 27 + s[ k ] - 'a' + 1;
				}
				v[ i ].push_back( hash );
			}while( next_permutation( a , a + s.size() ) );
		}
	}
	int num = 0;
	for( int i = 0 ; i < n ; i++ )
	{
	    memset( u , 0 , sizeof u );
	    num += dfs( i );
    }
	if( num == n )
	{
		for( int i = 0 ; i < n ; i++ )
		print( mw[i] );
	}
	else puts( "-1" );
	return 0;
}
