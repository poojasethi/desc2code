#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<algorithm>
using namespace std;

const int maxn = 100000;
int wn = 0, p[maxn];
vector<string> w;
vector<pair<string, int> > a;
vector<int> g[201], mt, mtr;
vector<bool> used;
void rec(int id, int v, const string &ss)
{
	if(v == w[id].size())
	{
		if(ss.size() > 0)
			a.push_back(make_pair(ss, id));
		return;
	}
	rec(id, v + 1, ss);
	if(ss.size() < 4)
		rec(id, v + 1, ss + w[id][v]);
}

bool dfs(int v)
{
	if(used[v]) return false;
	used[v] = 1;
	for(vector<int>::iterator it = g[v].begin(); it != g[v].end(); ++it)
		if(mt[*it] == -1 || dfs(mt[*it]))
		{
			mt[*it] = v;
			mtr[v] = *it;
			return 1;
		}
	return false;
}

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int n;
	cin >> n;
	w.resize(n);
	for(int i = 0; i < n; ++i)
	{
		cin >> w[i];
		rec(i, 0, "");
	}
	used.resize(n, false);
	sort(a.begin(), a.end());
	wn = 1;
	p[0] = 0;
	g[a[0].second].push_back(0);
	for(int i = 1; i < a.size(); ++i)
	{
		if(a[i].first != a[i - 1].first)
			p[wn++] = i;
		g[a[i].second].push_back(wn - 1);
	}          	
	mt.resize(wn, -1);
	mtr = mt;
	int ans = 0;
	for(int i = 0; i < n; ++i)
	{
		used.assign(n, false);
		if(dfs(i))
			++ans;
	}
	if(ans == n)
	{
		for(int i = 0; i < n; ++i)
			cout << a[p[mtr[i]]].first << endl;
	}
	else
		cout << -1;

	return 0;
}