#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <map>
#include <set>
#include <string>
#include <iomanip>
#include <cmath>

using namespace std;

const int N = 100100;

int i, j, n, m, k, ans, used[N], p[N];
vector <vector <int> > v(N);
string s, s1[N], s2[N];
map <string, int> M;

bool dfs(int x)
{
    if (used[x])
        return false;
    used[x] = true;
    for (int i = 0; i < v[x].size(); i ++)
        if (p[v[x][i]] == - 1 || dfs(p[v[x][i]]))
        {
            p[v[x][i]] = x;
            return true;
        }
    return false;
}

void lol(string f, int t)
{
    if (f.size() > 4)
        return;
    if (M[f] == 0 && f.size() > 0)
    {
        m ++;
        s1[m] = f;
        M[f] = m;
        v[i].push_back(m);
    }
    else if (f.size() > 0)
        v[i].push_back(M[f]);
    for (int j = t; j < s.size(); j ++)
        lol(f + s[j], j + 1);
}

int main()
{
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    cin >> n;
    m = 0;
    for (i = 0; i < n; i ++)
    {
        cin >> s;
        lol("", 0);
    }
    for (i = 1; i <= m; i ++)
        p[i] = - 1;
    ans = 0;
    for (i = 0; i < n; i ++)
    {
        for (j = 0; j < n; j ++)
            used[j] = 0;
        ans += dfs(i);
    }
    if (ans != n)
        return cout << - 1, 0;
    for (i = 1; i <= m; i ++)
        if (p[i] != - 1)
            s2[p[i]] = s1[i];
    for (i = 0; i < n; i ++)
        cout << s2[i] << endl;
    return 0;
}

/*
6 3
5 7 8 10 13 15
*/
