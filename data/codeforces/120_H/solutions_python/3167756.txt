#!/usr/bin/env python
import sys
import collections

## {{{ http://code.activestate.com/recipes/123641/ (r1)
# Hopcroft-Karp bipartite max-cardinality matching and max independent set
# David Eppstein, UC Irvine, 27 Apr 2002

def bipartiteMatch(graph):
	'''
	Find maximum cardinality matching of a bipartite graph (U,V,E).
	The input format is a dictionary mapping members of U to a list
	of their neighbors in V.  The output is a triple (M,A,B) where M is a
	dictionary mapping members of V to their matches in U, A is the part
	of the maximum independent set in U, and B is the part of the MIS in V.
	The same object may occur in both U and V, and is treated as two
	distinct vertices if this happens.

	O(E sqrt(V))
	'''
	
	# initialize greedy matching (redundant, but faster than full search)
	matching = {}
	for u in graph:
		for v in graph[u]:
			if v not in matching:
				matching[v] = u
				break
	
	while 1:
		# structure residual graph into layers
		# pred[u] gives the neighbor in the previous layer for u in U
		# preds[v] gives a list of neighbors in the previous layer for v in V
		# unmatched gives a list of unmatched vertices in final layer of V,
		# and is also used as a flag value for pred[u] when u is in the first layer
		preds = {}
		unmatched = []
		pred = dict([(u,unmatched) for u in graph])
		for v in matching:
			del pred[matching[v]]
		layer = list(pred)
		
		# repeatedly extend layering structure by another pair of layers
		while layer and not unmatched:
			newLayer = {}
			for u in layer:
				for v in graph[u]:
					if v not in preds:
						newLayer.setdefault(v,[]).append(u)
			layer = []
			for v in newLayer:
				preds[v] = newLayer[v]
				if v in matching:
					layer.append(matching[v])
					pred[matching[v]] = v
				else:
					unmatched.append(v)
		
		# did we finish layering without finding any alternating paths?
		if not unmatched:
			unlayered = {}
			for u in graph:
				for v in graph[u]:
					if v not in preds:
						unlayered[v] = None
			return (matching,list(pred),list(unlayered))

		# recursively search backward through layers to find alternating paths
		# recursion returns true if found path, false otherwise
		def recurse(v):
			if v in preds:
				L = preds[v]
				del preds[v]
				for u in L:
					if u in pred:
						pu = pred[u]
						del pred[u]
						if pu is unmatched or recurse(pu):
							matching[v] = u
							return 1
			return 0

		for v in unmatched: recurse(v)
## end of http://code.activestate.com/recipes/123641/ }}}

def subsequences(s, length):
	'''
	Prints all the subsequences of length :length of :s
	'''
	if length == 0:
		yield ""
		return
	if len(s) == 0:
		return

	for x in subsequences(s[1:], length):
		yield x

	start = s[0]
	for x in subsequences(s[1:], length - 1):
		yield start + x

def subsequences_up_to_length(s, max_length=4):
	for i in xrange(1, max_length + 1):
		for seq in subsequences(s, i):
			yield seq


f_input = open("input.txt", 'r')
n = int(f_input.readline().strip())
graph = collections.defaultdict(set)
words = []
for _ in xrange(n):
	word = f_input.readline().strip()
	words.append(word)
	for seq in subsequences_up_to_length(word):
		graph[seq].add(word)
			

f_output = open("output.txt", 'w')
matching = bipartiteMatch(graph)[0]
if len(matching) != len(words):
	print >> f_output, -1
else:
	for w in words:
		print >> f_output, matching[w]



