def readInputFromFile():
    file=open("input.txt","r")
    count = int(file.readline())
    wordArray=[]
    for i in range(0,count):
        wordArray.append(file.readline()[:-1])

    return wordArray

def readInput():
    count = int(raw_input());
    wordArray=[]
    for i in range(0,count):
        wordArray.append(str(raw_input()))

    return wordArray
def outputToFile(result,arr):
    file=open("output.txt","w")
    if(len(result) < len(arr)):
        file.write("-1")
    else:
        for i in result:
            file.write(i+"\n")
def outputToConsole(result,arr):
    if(len(result) < len(arr)):
        file.write("-1")
    else:
        for i in result:
            print(i)

def generatePermutations(word,prefix,hashstorage):
    if(len(prefix) > 4):
        return "^_^";
    if(len(prefix)>0):
        hashstorage.add(prefix)
    if(len(word)==0):
        return "^_^";
    generatePermutations(word[1:],prefix+word[0],hashstorage)
    generatePermutations(word[1:],prefix,hashstorage)

def putInMap(map,index,prefWord,result):
    map[prefWord]=index;
    result[index] = prefWord;

def findExactSolution(map,edgeIndex,edgeArray,edgeIsUsed,result):
    if(edgeIsUsed[edgeIndex]==1):
        return -1
    edgeIsUsed[edgeIndex] = 1
    for i in range(0,len(edgeArray[edgeIndex])):
        tmp=edgeArray[edgeIndex][i];
        if not (map.has_key(tmp)):
            putInMap(map,edgeIndex,tmp,result)
            return 1
        else:
            tmp1=findExactSolution(map,map[tmp],edgeArray,edgeIsUsed,result)
            if(tmp1==1):
                putInMap(map,edgeIndex,tmp,result)
                return 1
    return -1;

def applyToAll(edgeIsUsed,value):
    for i in range(0, len(edgeIsUsed)):
        edgeIsUsed[i]=value

def solution(wordArray):
    edgeArray=[]
    edgeIsUsed=[]
    result = []
    for i in range(0,len(wordArray)):
        hashstorage=set()
        generatePermutations(wordArray[i],"",hashstorage)
        ls=[]
        for key in hashstorage:
            ls.append(key)
        edgeArray.append(ls)
        edgeIsUsed.append(0)
        result.append("")
    myMap={}
    for i in range(0,len(wordArray)):
        applyToAll(edgeIsUsed,0)
        findExactSolution(myMap,i,edgeArray,edgeIsUsed,result)
    for x in result:
        if(x==""):
            return []
    return result
def main():
    #arr = readInput()
    arr = readInputFromFile()
    #print(arr[0])
    result = solution(arr)
    #outputToConsole(result,arr)
    outputToFile(result,arr)
if __name__ == "__main__":
  main()
