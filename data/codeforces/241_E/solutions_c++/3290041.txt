#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>

using namespace std;

const int maxn=1010;
const int maxm=10010;

int n,m,en,s[maxm],e[maxm],use[maxn][2],dist[maxn];

struct edge
{
	int e,id;
	edge *next;
}*v[maxn],ed[maxm];

void add_edge(int s,int e,int id)
{
	en++;
	ed[en].next=v[s];v[s]=ed+en;v[s]->e=e;v[s]->id=id;
}

void dfs(int now,int idv)
{
	use[now][idv]=true;
	for (edge *e=v[now];e;e=e->next)
		if (e->id==idv && !use[e->e][idv]) dfs(e->e,idv);
}

int main()
{
	scanf("%d%d",&n,&m);
	for (int a=1;a<=m;a++)
	{
		scanf("%d%d",&s[a],&e[a]);
		add_edge(s[a],e[a],0);
		add_edge(e[a],s[a],1);
	}
	dfs(1,0);dfs(n,1);
	memset(dist,0x3f,sizeof(dist));
	dist[1]=0;
	for (int a=1;a<=n;a++)
		for (int b=1;b<=m;b++)
			if (use[s[b]][0] && use[e[b]][1])
			{
				dist[s[b]]=min(dist[s[b]],dist[e[b]]-1);
				dist[e[b]]=min(dist[e[b]],dist[s[b]]+2);
			}
	for (int a=1;a<=m;a++)
		if (use[s[a]][0] && use[e[a]][1] &&	dist[e[a]]-dist[s[a]]!=1 && dist[e[a]]-dist[s[a]]!=2)
		{
			printf("No\n");
			return 0;
		}
	printf("Yes\n"); 
	for (int a=1;a<=m;a++)
		if (use[s[a]][0] && use[e[a]][1]) printf("%d\n",dist[e[a]]-dist[s[a]]);
		else printf("1\n");

	return 0;
}
