#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <iostream>
using namespace std;

const int N=1000+5;
const int M=5000+5;

struct Edge
{
	int to,nxt;
}e[M],g[M];
int n,m,tope,topg,he[N],hg[N],d[N],x[M],y[M];
bool vis[2][N];

inline void cmin(int& x,int y){if (y<x) x=y;}
inline void cmax(int& x,int y){if (y>x) x=y;}
inline void addedge(Edge *e,int *hd,int& top,int x,int y)
{e[++top].to=y;e[top].nxt=hd[x];hd[x]=top;}

inline void dfs(Edge *e,int *hd,int now,bool *vis)
{
	vis[now]=1;
	for (int p=hd[now];p;p=e[p].nxt)
		if (!vis[e[p].to]) dfs(e,hd,e[p].to,vis);
}

int main(int argc,char **argv)
{
	#ifndef ONLINE_JUDGE
		if (argc==1) freopen("241E.in","r",stdin),freopen("241E.out","w",stdout);
		else freopen(argv[1],"r",stdin),freopen(argv[2],"w",stdout);
	#endif
	scanf("%d%d",&n,&m);
	for (int i=1;i<=m;++i)
	{
		scanf("%d%d",&x[i],&y[i]);
		addedge(e,he,tope,x[i],y[i]);
		addedge(g,hg,topg,y[i],x[i]);
	}
	dfs(e,he,1,vis[0]);
	dfs(g,hg,n,vis[1]);
	for (int t=0;t<=n;++t)
		for (int i=1;i<=m;++i)
			if (vis[0][x[i]] && vis[1][y[i]])
				cmin(d[y[i]],d[x[i]]+2),
				cmin(d[x[i]],d[y[i]]-1);
	for (int i=1;i<=m;++i)
		if (vis[0][x[i]] && vis[1][y[i]])
			if (d[y[i]]-d[x[i]]>2 || d[y[i]]-d[x[i]]<1){puts("No");return 0;}
	puts("Yes");
	for (int i=1;i<=m;++i) printf("%d\n",(vis[0][x[i]] && vis[1][y[i]])?d[y[i]]-d[x[i]]:1);
	return 0;
}
