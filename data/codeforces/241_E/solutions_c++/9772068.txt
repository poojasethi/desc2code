#include <cstdio>
const int N=1005,M=5005,inf=(int)1e9+7;
int n,m;
struct node;
struct edge{
	node *ed;
	edge *next;
	int w;
} E[M<<1],*newE=E;
struct node{
	edge *son;
	bool ok,vis;
	int dist,cnt;
	void dfs(int c){
		if(!ok) return;
		if(vis) return;
		vis=true;
		for(edge *e=son;e;e=e->next) if(e->w==c){
			e->ed->dfs(c);
		}
	}
} V[N],*q[N];
int head,tail;
int main(){
	scanf("%d%d",&n,&m);
	for(int i=0;i<m;i++){
		int u,v; scanf("%d%d",&u,&v);
		*newE=(edge){V+v,V[u].son,2},V[u].son=newE++;
		*newE=(edge){V+u,V[v].son,-1},V[v].son=newE++;
	}
	for(int i=1;i<=n;i++) V[i].ok=true;
	V[1].dfs(2);
	for(int i=1;i<=n;i++){
		if(!V[i].vis) V[i].ok=false;
		V[i].vis=false;
	}
	V[n].dfs(-1);
	for(int i=1;i<=n;i++){
		if(!V[i].vis) V[i].ok=false;
		V[i].vis=false;
	}
	if(!V[1].ok||!V[n].ok) return puts("No"),0;
	for(int i=1;i<=n;i++) V[i].dist=inf;
	V[1].dist=0;
	q[tail++]=V+1;
	V[1].vis=true;
	while(head!=tail){
		node *u=q[head]; if(++head==N) head=0;
		u->vis=false;
		for(edge *e=u->son;e;e=e->next){
			node *v=e->ed;
			if(!v->ok) continue;
			if(u->dist+e->w<v->dist){
				v->dist=u->dist+e->w;
				if(!v->vis){
					if(++v->cnt>n+5)
						return puts("No"),0;
					v->vis=true;
					q[tail]=v;
					if(++tail==N) tail=0;
				}
			}
		}
	}
	puts("Yes");
	newE=E;
	for(int i=0;i<m;i++){
		printf("%d\n",newE[0].ed->ok&&newE[1].ed->ok?newE[0].ed->dist-newE[1].ed->dist:1);
		newE+=2;
	}
}
