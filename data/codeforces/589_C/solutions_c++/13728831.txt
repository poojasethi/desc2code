#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for(int i = (a); i < (b); i++)
#define FORd(i, a, b) for(int i = (a) - 1; i >= (b); i--)
#define sz(a) int((a).size())
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
ll gcd(ll a, ll b) {ll r; while (b != 0) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
#define EPS 1e-9
const int mod = 1000000007;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = 2 * acos(0);

const int maxn = 100010;
const int maxc = 26;
char s[maxn];
int n, m;
int len;
int k[maxn];
int pref[maxn][maxc];
int suff[maxn][maxc];
ll f[65][maxc][110];
ll g[65][maxc][110];

ll calcp(ll pos, int d, int c);
ll calcs(ll pos, int d, int c);

ll calcp(ll pos, int d, int c) {
    if (pos < 0) return 0;
    if (!d) return pref[pos][c];
    if (pos < 110 && f[d][c][pos] != -1) return f[d][c][pos];
    ll m = len * (1LL << (d - 1));
    if (pos >= m) {
        ll res = (1LL << (d - 1)) * pref[len - 1][c];
        pos -= m;
        int r = k[d] % m;
        if (r <= pos + 1) {
            res += calcs(m - r, d - 1, c);
            res += calcp(pos - r, d - 1, c);
        }
        else res += calcs(m - r, d - 1, c) - calcs(m - r + pos + 1, d - 1, c);
        if (pos + m < 110) return f[d][c][pos + m] = res;
        else return res;
    }
    if (pos < 110) return f[d][c][pos] = calcp(pos, d - 1, c);
    else return calcp(pos, d - 1, c);
}

ll calcs(ll pos, int d, int c) {
    if (!d) return suff[pos][c];
    if (pos >= len * (1LL << d)) return 0;
    ll m = len * (1LL << (d - 1));
    if (2 * m - pos < 110 && g[d][c][2 * m - pos] != -1) return g[d][c][2 * m - pos];
    if (pos >= m) {
        ll res = (1LL << (d - 1)) * suff[0][c];
        pos -= m;
        int r = k[d] % m;
        if (r < pos) res -= calcp(pos - r - 1, d - 1, c) + calcs(m - r, d - 1, c);
        else res -= calcs(m - r, d - 1, c) - calcs(m - r + pos, d - 1, c);
        if (m - pos < 110) return g[d][c][m - pos] = res;
    }
    if (2 * m - pos < 110) return g[d][c][2 * m - pos] = (1LL << (d - 1)) * suff[0][c] + calcs(pos, d - 1, c);
    else return (1LL << (d - 1)) * suff[0][c] + calcs(pos, d - 1, c);
}

void solve() {
    ms(pref, 0); ms(suff, 0); ms(f, -1); ms(g, -1);
    scanf("%s%d%d", s, &n, &m);
    FOR(i, 1, n + 1) scanf("%d", k + i);
    len = strlen(s);
    FOR(i, 0, len) {
        if (i) FOR(j, 0, maxc) pref[i][j] = pref[i - 1][j];
        pref[i][s[i] - 'a']++;
    }
    FORd(i, len, 0) {
        FOR(j, 0, maxc) suff[i][j] = suff[i + 1][j];
        suff[i][s[i] - 'a']++;
    }
    ll tmp = len; int up = 0;
    while (tmp < (ll) 1e18 && up < n) {tmp <<= 1; up++;}
    while (m--) {
        ll l, r; char c[10]; scanf("%I64d%I64d%s", &l, &r, c); l--; r--;
        ll res = calcp(r, up, c[0] - 'a') - calcp(l - 1, up, c[0] - 'a');
        printf("%I64d\n", res);
    }
}

int main() {
	//ios_base::sync_with_stdio(0); cin.tie(NULL);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
