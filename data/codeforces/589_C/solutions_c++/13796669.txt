#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;

#define getmid(l,r) ((l) + ((r) - (l)) / 2)
#define MP(a,b) make_pair(a,b)
#define PB(a) push_back(a)

typedef long long ll;
typedef pair<int,int> pii;
const double eps = 1e-8;
const int INF = (1 << 30) - 1;
const int MAXN = 100010;
const int AL = 26;
const int LEN = 110;
const int NUM = 70;

int n,m,top_num;
int K[MAXN];
ll cnt[NUM][AL],pre[NUM][LEN][AL],len[NUM];
char s[LEN];

int Get(int o,ll p){
	if(o == 0) return s[p] - 'a';
	if(p <= len[o]) return Get(o - 1,p);
	if(p <= len[o] + K[o]){
		return Get(o - 1,len[o] - (K[o] - (p - len[o])));
	}
	else{
		return Get(o - 1,p - K[o] - len[o]);
	}
}

void Pre(){
	//cnt : 前i个块内每个字母出现的次数
	//pre : 每个块前缀K[i]长度内每个字母的出现次数
	//len : 每个块的长度
	for(int i = 1; i <= len[0]; ++i){
		cnt[0][s[i] - 'a']++;
	}
	len[1] = len[0];
	top_num = n;
	for(int i = 2; i <= n; ++i){
		len[i] = len[i - 1] * 2LL;
		if(len[i] >= 1000000000000000000LL){
			top_num = i;
			break;
		}
	}
	for(int i = 1; i <= top_num; ++i){
		for(int j = 0; j < AL; ++j){
			cnt[i][j] = cnt[i - 1][j] * 2LL;
		}
	}
	for(int i = 1; i <= len[0]; ++i){
		for(int j = 0; j < AL; ++j){
			pre[0][i][j] = pre[0][i - 1][j];
		}
		pre[0][i][s[i] - 'a']++;
	}
	for(int i = 1; i <= top_num; ++i){
		K[i] %= len[i]; //规约位移
		for(int j = 1; j <= K[i]; ++j){
			for(int k = 0; k < AL; ++k){
				pre[i][j][k] = pre[i][j - 1][k];
			}
			int id = Get(i,len[i] + j);
			pre[i][j][id]++;
		}
	}
}

ll Cal(int o,ll p,int c){
	if(p == 0) return 0;
	if(o == 0){
		return pre[0][p][c];
	}
	if(p <= len[o]){ //前i-1块的长度和为len[o]
		return Cal(o - 1,p,c);
	}
	if(p <= len[o] + K[o]){
		return cnt[o - 1][c] + pre[o][p - len[o]][c];
	}
	else{
		return cnt[o - 1][c] + pre[o][K[o]][c] + 
			Cal(o - 1,p - len[o] - K[o],c);
	}
}

int main(){
	scanf("%s",s + 1);
	len[0] = strlen(s + 1);
	scanf("%d%d",&n,&m);
	for(int i = 1; i <= n; ++i) scanf("%d",K + i);
	Pre();
	for(int i = 1; i <= m; ++i){
		ll L,R;
		char c[5];
		scanf("%lld%lld%s",&L,&R,c);
		printf("%lld\n",Cal(top_num,R,c[0] - 'a') - Cal(top_num,L - 1,c[0] - 'a'));
	}
	return 0;
}
