#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

#ifdef WIN32
	#define LL "%I64d"
#else
	#define LL "%lld"
#endif

#ifdef Lightning
	#define debug(orz...) printf(orz)
	const int DEBUG = 1;
#else
	#define debug(...)
	const int DEBUG = 0;
#endif

#define file_able if (0)
#define setfile(pro_name) freopen(pro_name".in", "r", stdin), freopen(pro_name".out", "w", stdout)
#define closefile() fclose(stdin), fclose(stdout)

#define cmax(_x, _y) (_x < (_y) ? _x = _y : 0)
#define cmin(_x, _y) (_x > (_y) ? _x = _y : 0)
#define gmax(_x, _y) ((_x) > (_y) ? (_x) : (_y))
#define gmin(_x, _y) ((_x) < (_y) ? (_x) : (_y))

namespace defs
{
	// #define getc() (S == T && (T = (S = B) + fread(B, 1, 1 << 15, stdin), S == T) ? EOF : *S++)
	
	// char B[1 << 15], *S = B, *T = B;
	
	#define getc() getchar()

	template <class Type> Type read()
	{
		Type aa;
		int bb = 1, ch;
		while (ch = getc(), (ch < '0' || ch > '9') && ch != '-');
		ch == '-' ? aa = 0, bb = -1 : aa = ch - '0';
		while (ch = getc(), ch >= '0' && ch <= '9') aa = aa * 10 + ch - '0';
		return bb == 1 ? aa : -aa;
	}

	const unsigned int rand_x = 1401010315;
	const unsigned int rand_y = 1000000019;
	
	unsigned int rand_cur;

	unsigned int rand_int()
	{
		return rand_cur = rand_cur * rand_x + rand_y;
	}

	const int inf = 1071026353;
	const int mod = 1000000007;
	const int modx = 998244353;
}

namespace lightningwork
{
	// my space

	long long (*read)() = defs::read<long long>;

	char str[111];
	
	int n, m, len, k[100010];
	
	int sum[111][26], tsum[111][111][26];

	long long siz[111], top;

	int dfs(int i, long long p)
	{
		if (i == 0) return str[p] - 'a';
		if (siz[i] >= p) return dfs(i - 1, p);
		long long t = p - siz[i] - k[i];
		if (t <= 0) t += siz[i];
		return dfs(i - 1, t);
	}

	void init()
	{
		scanf("%s", str + 1);
		for (int i = 1; str[i]; ++i)
		{
			memcpy(sum[i], sum[i - 1], sizeof sum[i]);
			++sum[i][str[i] - 'a'];
			++len;
		}
		n = read();
		m = read();
		long long L = len;
		for (int i = 1; i <= n; ++i)
		{
			k[i] = read();
			if (L <= (long long) 1e18)
			{
				siz[++top] = L;
				k[i] %= L;
				L <<= 1;
			}
		}
		for (int i = 1; i <= top; ++i)
		{
			for (int j = 1; j <= k[i]; ++j)
			{
				memcpy(tsum[i][j], tsum[i][j - 1], sizeof tsum[i][j]);
				++tsum[i][j][dfs(i, siz[i] + j)];
			}
		}
	}
	
	long long dfs(int i, long long p, int ch)
	{
		if (p == 0) return 0;
		if (p <= siz[i]) return dfs(i - 1, p, ch);
		if (i == 0) return sum[p][ch];
		long long ret = siz[i] / len * sum[len][ch];
		p -= siz[i];
		if (p > k[i])
		{
			ret += dfs(i - 1, p - k[i], ch) + tsum[i][k[i]][ch];
		} else
		{
			ret += tsum[i][p][ch];
		}
		return ret;
	}
	
	void solve()
	{
		long long l = read();
		long long r = read();
		int ch = getc();
		while (ch < 'a' || ch > 'z') ch = getc();
		long long ans = dfs(top, r, ch - 'a') - dfs(top, l - 1, ch - 'a');
		printf("%lld\n", ans);
	}

	void work()
	{
		init();
		while (m--)
		{
			solve();
		}
	}
}

int main()
{
	file_able setfile("work");
	lightningwork::work();
	file_able closefile();
	return 0;
}

