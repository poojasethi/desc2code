#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string>
#include <utility>
#include <vector>
using namespace std;

#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define sz(x) (int((x).size()))
#define bit(x) (1 << (x))
#define cnt1(x) (__builtin_popcount(x))

template<class T>
inline void chkmax(T& x, T y) {
    if (x < y) x = y;
}

template<class T>
inline void chkmin(T& x, T y) {
    if (y < x) x = y;
}

typedef long long LL;
typedef double DB;
typedef pair<int, int> PII;
typedef vector<int> VI;
const int MN = 70;
const int MX = 105;
const int MC = 26;
const LL INF = 1000000000000000005LL;
int n;
char s[MX];
int sh[100005];
LL len[MN], cnt[MN][MC];
int pre[MN][MX][MC];

inline int get(char c) {
    return c - 'a';
}

char get(int k, LL pos) {
    if (!k) return s[pos - 1];
    if (pos <= len[k - 1]) return get(k - 1, pos);
    pos -= len[k - 1];
    if (sh[k] >= pos) return get(k - 1, len[k - 1] - sh[k] + pos);
    return get(k - 1, pos - sh[k]);
}

void init() {
    int i, j, c;
    
    len[0] = strlen(s);
    for (j = 1; j <= len[0]; j++) {
        for (c = 0; c < MC; c++) pre[0][j][c] = pre[0][j - 1][c];
        c = get(s[j - 1]);
        pre[0][j][c]++;
    }
    for (c = 0; c < MC; c++) cnt[0][c] = pre[0][len[0]][c];
    
    for (i = 1; i <= n; i++) {
        len[i] = len[i - 1] * 2;
        for (c = 0; c < MC; c++) cnt[i][c] = cnt[i - 1][c] * 2;
        if (len[i] >= INF) {
            n = i;
            break;
        }
    }
    
    for (i = 1; i <= n; i++) sh[i] = sh[i] % len[i - 1];
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= sh[i]; j++) {
            for (c = 0; c < MC; c++) pre[i][j][c] = pre[i][j - 1][c];
            c = get(get(i - 1, len[i - 1] - sh[i] + j));
            pre[i][j][c]++;
        }
    }
}

LL calc(int k, LL en, int c) {
    if (!en) return 0;
    if (!k) return pre[0][en][c];
    if (en <= len[k - 1]) return calc(k - 1, en, c);
    LL rlt = cnt[k - 1][c];
    en -= len[k - 1];
    if (sh[k] >= en) return rlt + pre[k][en][c];
    return rlt + pre[k][sh[k]][c] + calc(k - 1, en - sh[k], c);
}

int main() {
//  freopen("in.txt", "r", stdin);
//  freopen("out.txt", "w", stdout);
    
    int i, m, c;
    LL st, en;
    char t[5];
    
    scanf("%s", s);
    scanf("%d%d", &n, &m);
    for (i = 1; i <= n; i++) scanf("%d", &sh[i]);
    init();
    while (m--) {
        scanf("%lld%lld%s", &st, &en, t);
        c = get(t[0]);
        printf("%lld\n", calc(n, en, c) - calc(n, st - 1, c));
    }
    return 0;
}
