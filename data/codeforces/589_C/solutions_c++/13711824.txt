#include <bits/stdc++.h>
using namespace std;

#define fru(j,n) for(int j=0; j<(n); ++j)
#define tr(it,v) for(typeof((v).begin()) it=(v).begin(); it!=(v).end(); ++it)
#define x first
#define y second
#define pb push_back
#define ALL(G) (G).begin(), (G).end()

#if 0
	#define DEB printf
#else
	#define DEB(...)
#endif

typedef long long ll;
typedef long long LL;
typedef double D;
typedef pair<int,int> pii;
typedef vector<int> vi;

const int inft = 1000000009;
const int mod = 1000000007;
const int MAXN = 1000006;
const ll bound=1e18;
char str[MAXN];
int ile[30],nr;

ll getall(ll, ll,int);
ll tab[200][100][30],L[MAXN];
ll sh[MAXN];
int G[500][30];
ll get(ll p,int zn){
	if(p==0)return 0;
	if(p<=L[0]) {
		DEB("g %lld, %d %d\n",p,zn,G[p][zn]);
		return G[p][zn];
	}
	int pocz=0,kon=nr;
	while(pocz<kon-1){
		int med=(pocz+kon)/2;
		if(L[med]<=p)pocz=med;
		else kon=med;
	}
	ll ret= 1LL*ile[zn]*(1LL<<pocz);
	DEB("get %lld %d, ret=%lld\n",p,zn,ret);
	DEB("pocz %d, %lld\n",pocz,L[pocz]);
	DEB("-> %lld, %lld\n",1,-sh[pocz]+p-L[pocz]);
	//L[pocz]<=p ostatni taki
	ll shift=min(1LL*sh[pocz],p-L[pocz]);
	ll temp;
	if(tab[shift][pocz][zn]!=-1)temp=tab[shift][pocz][zn];
	else temp=tab[shift][pocz][zn]=getall(L[pocz]-sh[pocz]+1,L[pocz]-sh[pocz]+shift,zn);
	ret+=getall(1,p-sh[pocz]-L[pocz],zn)+temp;
	return ret;
}
ll getall(ll p,ll k,int zn){
	if(p>k)return 0;
	DEB("getall %lld %lld %d\n",p,k,zn);

	return get(k,zn)-get(p-1,zn);
}
int main() {
	int k,m,n;
	scanf("%s",str);
	n=strlen(str);
	fru(i,n)ile[str[i]-'a']++;
	fru(j,30){
		fru(i,n){
			G[i+1][j]=G[i][j];
			if(str[i]=='a'+j)G[i+1][j]++;
		}
	}
//	fru(j,30){
//		fru(i,n)printf("%d ",G[i+1][j]);puts("");
//	}
	L[nr]=n;
	fru(i,200)fru(h,100)fru(j,30)tab[i][h][j]=-1;
	while(L[nr]<=bound){
		L[nr+1]=2LL*L[nr];nr++;
	}
	nr++;
	fru(i,n)DEB("%d ",sh[i]);
	scanf("%d%d",&k,&m);
	fru(i,k){
		scanf("%lld",&sh[i]);
	}
	for(int i=nr;i<k;i++)L[i]=L[nr-1];
	fru(i,k)sh[i]%=L[i];
	fru(i,m){
		ll a,b;
		char c;
		scanf("%lld%lld %c",&a,&b,&c);
		printf("%lld\n",getall(a,b,c-'a'));
	}
	return 0;
}
