//bismillahir rahmanir raheem

#include <string>
#include <vector>
#include<stdio.h>
#include<algorithm>
#include<iostream>
#include<math.h>
#include<string.h>
#include <stdlib.h>
#include<map>
#include<queue>
#include<stack>
#include<utility>
#include<stdlib.h>
#include<string>
#include<set>
#include<iomanip>
#define lld long long int
#define CLR(a) memset(a,0,sizeof(a))
#define RESET(a) memset(a,-1,sizeof(a))
#define act(a) memset(a,1,sizeof(a))
#define setinf(a) memset(a,0b01111111,sizeof(a));
#define FRO freopen("input.txt","r",stdin);
#define FROut freopen("output.txt","w",stdout);
#define ui unsigned int
#define came "came"
#define pii pair<int,int>
#define plii pair<long long int, int>
#define pll pair<long long,long long>
#define pic pair<int,char>
#define ninf (-1e9)-2
#define inf (1e9)+2
#include<fstream>
#include <assert.h>
#include <bitset>

#define foreach(x) for(__typeof(x.begin()) it=x.begin(); it!=x.end();it++)

using namespace std;
#define pid pair<int,double>
#define pdi pair<double,int>

#define PB push_back
#define MP make_pair
#define pri(x) printf("%d\n",x)
#define F first
#define S second
#define vit vector<int>::iterator

int charCount[30][105];

char a[105];

int ln;

int n,m;

int ki[100005];

lld len[100005];
lld complete[30][105];


//count char ch till lth indx
lld bktk(lld l, lld r, char ch, int pn)
{
    if(l>r) return 0;
    int k=ki[pn]%len[pn];
    if(r<ln)
    {
        lld ret=charCount[ch][r];
        if(l-1>=0)
        {
            ret-=charCount[ch][l-1];
        }
        return ret;
    }
    else
    {
        if(r<len[pn-1])
        {
            //this is correct
            return bktk(l,r,ch,pn-1);
        }
        else if(l<len[pn-1])
        {
            //l is in first half and r is in second half
            lld ret=bktk(l,len[pn-1]-1,ch,pn-1);
            if(r-len[pn-1]<k)
            {
                ret+=bktk(len[pn-1]-k,r-k,ch,pn-1);
            }
            else
            {
                ret+=bktk(len[pn-1]-k,len[pn-1]-1,ch,pn-1);
                ret+=bktk(0,r-k-len[pn-1],ch,pn-1);

            }
            return ret;
        }
        else
        {
            //l is in second half and r is in second half
             lld ret=0;
             l-=len[pn-1];
             r-=len[pn-1];
             if(l<k && r<k)
             {
                 //both in repetition
                 ret=bktk(l-k+len[pn-1],r-k+len[pn-1],ch,pn-1);
             }
             else if(l<k)
             {
                 ret=bktk(l-k+len[pn-1],len[pn-1]-1,ch,pn-1);
                 ret+=bktk(0,r-k,ch,pn-1);
             }
             else
             {
                 //both in good place
                 ret=bktk(l-k,r-k,ch,pn-1);
                 //done
             }
             return ret;
        }
    }
}

lld eff[30][100][105];

void pre(int ln)
{
    int i,j,l;
    for(i=1;i<=ln;i++)
    {
        ki[i]%=len[i-1];
    }
    for(i=0;i<26;i++)
    {
        for(j=0;j<ln;j++)
        {
            for(l=0;l<ki[j+1];l++)
            {
                eff[i][j][l]=bktk(len[j],len[j]+l,i,j+1);
            }
        }
    }
}

lld efficient_bktk(lld l, char ch, int h)
{
    assert(l>=0);
    int k=ki[h];
    if(l<ln)
    {
        return charCount[ch][l];
    }
    else
    {
        if(l<len[h-1])
        {
            return efficient_bktk(l,ch,h-1);
        }
        else
        {
            l-=len[h-1];
            lld ret=complete[ch][h-1];
            if(l>=k)
            {
                ret+=eff[ch][h-1][k-1];
                ret+=efficient_bktk(l-k,ch,h-1);
            }
            else
            {
                ret+=eff[ch][h-1][l];
            }
            return ret;
        }

    }
}

int main()
{
    //FRO
    scanf("%s",a);
    ln=strlen(a);
    scanf("%d %d",&n,&m);
    int i,j;
    for(j=0;j<26;j++)
    {
        for(i=0;i<ln;i++)
        {
            if(a[i]=='a'+j)
            {
                charCount[j][i]++;
            }
            if(i)
            {
                charCount[j][i]+=charCount[j][i-1];
            }
        }
    }
    len[0]=ln;
    lld mx=1e9;
    mx=mx*mx;
    for(i=1;len[i-1]<=mx;i++)
    {
        len[i]=len[i-1]*2;
    }
    int mxln=i-1;
    for(i=0;i<26;i++)
    {
        complete[i][0]=charCount[i][ln-1];
        for(j=1;j<=mxln;j++)
        {
            complete[i][j]=complete[i][j-1]*2;
        }
    }
    for(i=0;i<26;i++)
    {
        complete[i][0]=charCount[i][ln-1];
        for(j=1;j<mxln;j++)
        {
            complete[i][j]=(complete[i][j-1]*2);
        }
    }
    for(i=1;i<=n;i++)
    {
        scanf("%d",&ki[i]);
    }
    pre(min(mxln,n));
    while(m--)
    {
        lld l,r;
        char ch[10];
        scanf("%lld %lld %s",&l,&r,ch);

        l--,r--;
        for(i=0;len[i]<=l;i++);
        int h1=i;
        for(i=0;len[i]<=r;i++);
        int h2=i;
        lld ans=efficient_bktk(r,ch[0]-'a',h2);
        if(l>0)
            ans-=efficient_bktk(l-1,ch[0]-'a',h1);
        printf("%lld\n",ans);
    }
    return 0;
}

	  	 	   	 	 	 		  					  		 	