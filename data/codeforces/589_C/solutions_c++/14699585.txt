#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;

const int MAXN = 1E5 + 10, MAXL = 2E4 + 10, SIGMA = 26;

int n, m;
int len, n0;
char s[MAXL];
int shf[MAXN];
int sum[MAXL][SIGMA];

ll solve(ll l, int n1, ll l0, int chr){
	if (l < 0)
		return 0;

//	printf("%d %d %I64d %I64d\n", n1, n0, l, l0);

	if (n1 == n0)
		return sum[l][chr];

	ll l1 = l0 >> 1, s0 = (ll)sum[len - 1][chr] << n1 - n0 - 1;
	if (l < l1)
		return solve(l, n1 - 1, l1, chr);
	else if (l < l1 + shf[n1] - shf[n1 - 1])
		return s0 + sum[len - (shf[n1] - (l - l1))][chr] - sum[len - shf[n1] - 1][chr];
	else
		return s0 + sum[len - shf[n1 - 1] - 1][chr] - sum[len - shf[n1] - 1][chr] + solve(l - (l1 + shf[n1] - shf[n1 - 1]), n1 - 1, l1, chr);
}

int main(){
	scanf("%s", s);
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i)
		scanf("%d", &shf[i]);

	n = min(n, __builtin_clzll(len = strlen(s)) - 3);
	for (n0 = 1; n0 <= n && len * 2 < MAXL; ++n0, len <<= 1){
		shf[n0] %= len;
		memcpy(s + len + shf[n0], s, len - shf[n0]);
		memcpy(s + len, s + len - shf[n0], shf[n0]);
	}
	--n0;
	s[len] = '\0';
	shf[n0] = 0;
	for (int i = n0 + 1; i <= n; ++i)
		shf[i] += shf[i - 1];
	for (int j = 0; j < SIGMA; ++j)
		sum[0][j] = 0;
	++sum[0][s[0] - 'a'];
	for (int i = 1; i < len; ++i){
		memcpy(sum[i], sum[i - 1], sizeof(sum[0]));
		++sum[i][s[i] - 'a'];
	}

	ll l, r;
	char com[5];
	for (int i = 0; i < m; ++i){
		scanf("%I64d%I64d%s", &l, &r, com);
		com[0] -= 'a';
		printf("%I64d\n", solve(--r, n, (ll)len << n - n0, com[0]) - solve(l -= 2, n, (ll)len << n - n0, com[0]));
	}
	return 0;
}
