#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 2e5 + 5;

int n, m, a[N];
ll cnt[N], shifted[105][255], x, y, S, cur, size; 
string str;
char c;

ll get(char c, ll x, int last) {
	if(!last) {
		ll ans = 0;
		assert(x <= size);
		FOR(i, 1, x) 
			ans += str[i] == c;
		return ans;
	}
	ll mid = (size << (ll) (last - 1));
	if(x <= mid) return get(c, x, last - 1);
	if(x > mid + a[last]) return (cnt[c] << (ll) (last - 1)) + shifted[last][c] + get(c, x - mid - a[last], last - 1);
	return get(c, x - a[last], last - 1) + shifted[last][c];
}

int main() {
	
	ios_base::sync_with_stdio(false);

	cin >> str >> n >> m;
	size = str.size(), cur = size;
	str = '0' + str;


	FOR(i, 1, size)
		++cnt[str[i]];

	FOR(i, 1, n) {
		cin >> a[i];
		if(cur < 1e18) {
			a[S = i] %= cur; 
			FOR(j, 'a', 'z')
				shifted[S][j] = (cnt[j] << S - 1ll) - get(j, cur - a[i], S - 1);
			cur *= 2;
		}
	}

	FOR(i, 1, m) {
		cin >> x >> y >> c;
		ll t = get(c, y, S) - get(c, x - 1, S);
		cout << t << endl;
	}

	return 0;
}
