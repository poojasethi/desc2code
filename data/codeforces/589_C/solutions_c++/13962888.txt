#include <cstdio>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cctype>
#include <utility>
#include <queue>
#include <cmath>

using namespace std;

typedef unsigned int uint;
typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VPII;
typedef pair<LL, LL> PLL;
typedef pair<int, LL> PIL;
typedef pair<LL, int> PLI;
typedef double DB;
typedef long double LD;

#define pb push_back
#define mset(a, b) (memset(a, b, sizeof a))
#define all(x) (x).begin(), (x).end()
#define bit(x) (1 << (x))
#define bitl(x) (1LL << (x))
#define sqr(x) ((x) * (x))
#define sz(x) ((int)(x.size()))
#define counti(x) (__builtin_popcount(x))
#define countl(x) (__builtin_popcountll(x))
#define rep(i, n) for (int (i) = 0; (i) < (int)(n); ++(i))
#define X first
#define Y second

template <typename T, typename U>
inline void chkmax(T& x, U y) {
    if (x < y) x = y;
}

template <typename T, typename U>
inline void chkmin(T& x, U y) {
    if (y < x) x = y;
}

const int MN = 100005;
char s[105];
int cnt[30];
int cc[100][105][30];
LL Len[100];

int n, m;
int K[MN];
int len;
char str[50000];

LL get(LL L, int c) {
	if (L <= len) {
		int ans = 0;
    for (int i = 0; i < L; i++) if (s[i] == 'a' + c) ans++;
    return ans;
	}
	int p = lower_bound(Len, Len + n, L) - Len;
	
  if (L == Len[p]) return bitl(p) * cnt[c];
  p--;
	LL res = L - Len[p];
	if (res > K[p]) return bitl(p) * cnt[c] + cc[p][K[p]][c] + get(res - K[p], c);
  return bitl(p) * cnt[c] + cc[p][res][c];
}

int main() {
////  freopen("in.txt", "r", stdin);
////  freopen("out.txt", "w", stdout);

  scanf("%s", s);
  int L = strlen(s);
  len = L;
  for (int i = 0; i < L; i++) cnt[s[i] - 'a']++;
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; i++) scanf("%d", K + i);
	Len[0] = L;
	for (int i = 1; i <= n; i++) {
		Len[i] = Len[i - 1] * 2;
		if (Len[i] > LL(1e18)) {
			n = i;
			break;
		}
	}
  strcpy(str, s);
  int i;
  for (i = 0; i < n; i++) {
		if (strlen(str) > 7000) break;
    int ll = strlen(str);
    int p = ll;
    K[i] %= ll;
    for (int j = 0; j <= K[i]; j++) {
			for (int k = ll - K[i]; k < ll - K[i] + j; k++) {
				cc[i][j][str[k] - 'a']++;		
			}
    }
    for (int j = ll - K[i]; j < ll; j++) str[p++] = str[j];
    for (int j = 0; j < ll - K[i]; j++) str[p++] = str[j];
    str[p] = 0;
  }
	for (; i < n; i++) {
    int ll = strlen(str);
    for (int j = 0; j <= K[i]; j++) {
			for (int k = ll - K[i]; k < ll - K[i] + j; k++) cc[i][j][str[k] - 'a']++;
    }
    str[ll - K[i]] = 0;
	}

  while (m--) {
		LL ll, rr;
		char str[10];
    scanf("%I64d%I64d%s", &ll, &rr, str);
		printf("%I64d\n", get(rr, str[0] - 'a') - get(ll - 1, str[0] - 'a'));
  }

  return 0;
}

                  