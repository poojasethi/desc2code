#include <cstdio>

#include <cmath>

#include <queue>

#include <cstring>

#include <vector>

#include <map>

#include <algorithm>

#include <iostream>



using namespace std;



typedef long long LL;


string ss[100];
string s,str;
LL k[100005];
LL sum[100][30][15000];
LL n,m;

LL calc(int x,int c,LL pos)
{
    if (pos==0) return 0;
    if (x==0) return sum[0][c][pos];
    if (((LL)s.size()<<(x-1))>=pos)
        return calc(x-1,c,pos);
    LL ans=sum[0][c][s.size()]<<(x-1);
    pos-=(LL)(s.size())<<(x-1);
    ans+=sum[x-1][c][ss[x-1].size()-k[x]+min(pos,k[x])]-sum[x-1][c][ss[x-1].size()-k[x]];
    pos-=min(pos,k[x]);
    return ans+calc(x-1,c,pos);
}

int main()

{

    cin>>s;
    scanf("%I64d%I64d",&n,&m);
    for (int i=1;i<=n;++i) scanf("%I64d",&k[i]);
    int nn=1;
    while (nn<=n&&s.size()<7000)
    {
        string t;
        t.resize(s.size());
        for (int i=0;i<s.size();++i)
            t[(i+k[nn])%s.size()]=s[i];
        s=s+t;
        nn++;
    }   
    for (int i=nn;i<=n;++i)
        k[i-nn+1]=k[i];
    n=n-nn+1;
    nn=0;
    while (nn<n&&((LL)s.size()<<nn)<=1e18) nn++;
    n=nn;
    ss[0]=s;
    for (int i=1;i<=n;++i) ss[i]=ss[i-1].substr(0,ss[i-1].size()-k[i]);
    for (int i=0;i<=n;++i)
        for (int c=0;c<=25;++c)
        {
            sum[i][c][0]=0;
            for (int j=0;j<ss[i].size();++j)
                sum[i][c][j+1]=sum[i][c][j]+(ss[i][j]=='a'+c);
        }
    LL l,r,ans;
    int dq;
    while (m--)
    {
        scanf("%I64d%I64d",&l,&r);
        cin>>str;
        dq=str[0]-'a';
        ans=calc(n,dq,r)-calc(n,dq,l-1);
        printf("%I64d\n",ans);
    }

    return 0;

}