#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <vector>
#include <string.h>
#include <iostream>
#include<string>
#include <algorithm>
#define ll long long
using namespace std;
const ll INF = 3000000000000000000LL;
struct Vert {
	Vert *l, *r;
	ll w;
	ll c[30];
	char ch;
	Vert(char ch){
		this->l = NULL;
		this->r = NULL;
		this->ch = ch;
		w = 1;
		for (int i = 0; i < 30; ++i)
			this->c[i] = 0;
		this->c[ch - 'a']++;
	}
	Vert(Vert *x) {
		this->l = x->l;
		this->r = x->r;
		this->w = x->w;
		this->ch = x->ch;
		for (int i = 0; i < 30; ++i)
			this->c[i] = x->c[i];
	}
};

void upd(Vert *x) {
	if (!x) return;
	for (int i = 0; i < 30; ++i) {
		x->c[i] = 0;
		if (x->l) x->c[i] += x->l->c[i];
		if (x->r) x->c[i] += x->r->c[i];
		if (x->c[i] > INF) x->c[i] = INF;
	}
	x->w = 1;
	x->c[x->ch - 'a']++;
	if (x->l) x->w += x->l->w;
	if (x->r) x->w += x->r->w;
	if (x->w > INF) x->w = INF;
}


Vert *merge(Vert *a, Vert *b) {
	if (!a) return b;
	if (!b) return a;
	if (rand() % 2) {
		Vert *t = new Vert(a);
		t->r = merge(t->r, b);
		upd(t);
		return t;
	}
	else {
		Vert *t = new Vert(b);
		t->l = merge(a, t->l);
		upd(t);
		return t;
	}
}

void split(Vert *x, ll k, Vert *&l, Vert *&r) {
	if (!x) {
		l = r = NULL;
		return;
	}
	ll tw = 1;
	if (x->l) tw += x->l->w;
	if (tw > k) {
		r = new Vert(x);
		split(x->l, k, l, r->l);
		upd(l);
		upd(r);
	}
	else {
		l = new Vert(x);
		split(x->r, k - tw, l->r, r);
		upd(l);
		upd(r);
	}
}

ll get(Vert *x, ll k, char c) {
	ll w = 0;
	ll ans = 0;
	while (true) {
		if (!x) return ans;
		w = 1;
		if (x->l) w += x->l->w;
		if (w > k) {
			x = x->l;
			continue;
		}
		else {
			if (x->l) {
				ans += x->l->c[c - 'a'];
			}
			if (x->ch == c) ans++;
			x = x->r;
			k -= w;
		}
	}
}

void dfs(Vert *x) {
	if (!x) return;
	dfs(x->l);
	cout << x->ch << " ";
	dfs(x->r);
}

int main()
{
	ios_base::sync_with_stdio(0);
	int n, m;
	string s;
	cin >> s;
	int t;
	char c;
	if (s.size() == 1) {
		cin >> n >> m;
		for (int i = 0; i < n; ++i) {
			cin >> t;
		}
		for (int i = 0; i < m; ++i) {
			ll l, r;
			cin >> l >> r >> c;
			if (c == s[0]) {
				cout << r - l + 1 << "\n";
			}
			else {
				cout << "0\n";
			}
		}
		return 0;
	}
	cin >> n >> m;
	Vert *root = NULL;
	for (int i = 0; i < s.size(); ++i)
		root = merge(root, new Vert(s[i]));
	Vert *l, *r;
	for (int i = 0; i < n; ++i) {
		cin >> t;
		t %= root->w;
		if (i <= 60) {
			split(root, root->w - t, l, r);
			root = merge(l, r);
			root = merge(root, r);
			root = merge(root, l);
		}
	}
	//dfs(root);
	//cout << endl;
	ll t1, t2;
	for (int i = 0; i < m; ++i) {
		
		cin >> t1 >> t2 >> c;
		//cout << get(root, 1, c) << endl;
		cout << get(root, t2, c) - get(root, t1 - 1, c) << "\n";
	}
	return 0;
}