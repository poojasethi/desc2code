#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<iostream>
#define fs first
#define sc second
#define mp make_pair
#define pb push_back
using namespace std;
bool ok = 0;
long long sum[30][110];
long long sumf[70][30][110];

int N,M,len;
int MMax = 100;
vector<long long> v;
vector<long long> vx;
string s,t;
long long L = 2000000000000000000LL;
int x;

long long make(int pw, long long x, int c) {
    if(x <= 0) {
        return 0LL;
    }
    if(pw == 0) {
        return sum[c][x];
    }
    if(x <= v[pw-1]) {
        return make(pw-1,x,c);    
    }
    x -= v[pw-1];
    long long ret = (1LL*sum[c][len]) << (pw-1);
    
    int k = vx[pw-1];
    if(x <= k) {
        ret = ret - sumf[pw-1][c][k-x] + sumf[pw-1][c][k];    
    } else {
        ret = ret + sumf[pw-1][c][k] + make(pw-1,x-k,c);
    }
    return ret;
}
    
inline long long sumx(long long x, long long y, char c){
    if(x > y) {
        return 0LL;
    }
    return make(N,y,c-'a') - make(N,x-1,c-'a');
}

inline string shift(string s,int k){
    string t = "";
    int start = (s.size() - k) % s.size();
    for(int i=0;i<s.size();++i){
        t.push_back(s[(i+start) % s.size()]);
    }
    return t;
}

int val(int pw, int ind) {
    if(pw == 0) {
        return s[len-ind] - 'a';
    }
    if(ind > v[pw-1]) {
        return val(pw-1, ind - v[pw-1]);     
    }
    return val(pw-1, (ind + vx[pw-1] - 1) % v[pw-1] + 1);
}

int main() {
    ios_base::sync_with_stdio(false);
    //freopen("input.in", "r", stdin);
    cin >> s;
    len = s.size();
    v.pb(len);
    cin >> N >> M;
    for(int i=0;;++i){
        long long nl = v[i] * 2LL;
        if(nl > L) {
            break;
        }
        v.pb(nl);
    }
 
    for(int i=1;i<=N;++i) {
        long long x; 
        cin >> x;
        if(i-1 < v.size()) {
            vx.pb(x % v[i-1]);
        }
        if(v.size() > i && v[i] <= MMax) {
            s += shift(s,x % v[i-1]);
        }
    }
    
    for(int i=0;i<26;++i){
        for(int j=1;j<=len;++j){
            if(s[j-1] == i + 'a'){
                ++sum[i][j];
            }
            if ( j > 0 ){
                sum[i][j] += sum[i][j-1];
            }
        }
    }

    if( N >= v.size()) {
        N = v.size() - 1;
    }
    
    for(int i=0;i<=N;++i) {
        for(int j=1;j<=min(100LL,v[i]);++j) {
            for(int c=0;c<26;++c) {
                sumf[i][c][j] = sumf[i][c][j-1];
            }
            int x = val(i,j);
            ++sumf[i][x][j];
        }
    }


    for(int i=1;i<=M;++i){
        long long x,y;
        char c;
        cin >> x >> y >> c;
        long long aa = sumx(x,y,c);
        cout<<aa<<endl;
    }
    return 0;
}
