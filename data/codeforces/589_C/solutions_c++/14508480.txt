#include <bits/stdc++.h>

using namespace std;

const int MAXN = 4e5 + 10;

char s[MAXN];
long long k[MAXN], sumk[MAXN];
int dayl;
long long l;
long long sum[30][MAXN];
long long tot = 0;

long long work(long long x, char ch){
//  cout<<"!!!!!!!!!!!!"<<endl<<x<<' '<<endl;
    if (x <= l){
        return sum[ch - 'a'][x];
    }
    long long tmp = 1;
    int tmpday = 1;
    while(l * tmp * 2 <= x){
        tmp *= 2;
        tmpday++;
    }
    x -= l * tmp;
//  cout<<"! "<<x<<endl;
    long long ans = tmp * sum[ch - 'a'][l];
//  cout<<"# " << tmp * sum[ch - 'a'][l]<<endl;
//  cout<<"^^^^^^^^^^^^"<<dayl<<' '<<tmpday<<endl;
    long long ll = l - (sumk[dayl + tmpday] - sumk[dayl]);
    long long rr = l - (sumk[dayl + tmpday - 1] - sumk[dayl]);
//  cout<<"% "<<ll<<' '<<rr<<endl;
    if (rr - ll > x){
        return ans + sum[ch - 'a'][ll + x] - sum[ch - 'a'][ll];
    }
    else{
        ans += sum[ch - 'a'][rr] - sum[ch - 'a'][ll];
        return ans + work(x - (rr - ll), ch);
    }
}

int main(){
    scanf("%s", s+1);
    int n,m;
    scanf("%d%d", &n, &m);
    sumk[0] = 0;
    for(int i = 1; i <= n; i++){
        scanf("%I64d", &k[i]);
        sumk[i] = sumk[i-1] + k[i];
    }
    sumk[n+1] = sumk[n];
    l = strlen(s+1);
//  cout<<l<<endl;
    for(int i = 1; i <= n && l < 100000; i++){
        for(int j = 1; j <= l; j++)
            s[j+l] = s[((j - k[i] - 1) % l + l) % l + 1];
        l *= 2;
        dayl = i;
    }
//  cout<<l<<endl;
    s[l+1] = 0;
    for(int j = 0; j < 26; j++)
        sum[j][0] = 0;
    for(int i = 1; i <= l; i++)
        for(int j = 0; j < 26; j++)
            sum[j][i] = sum[j][i-1] + (s[i] - 'a' == j);
    for(int i = 1; i <= m; i++){
        long long _l, _r;
        char ch[10];
        scanf("%I64d%I64d%s", &_l, &_r, ch);
    //  cout<<"!"<<work(_r, ch[0])<<endl;
    //  cout<<"!"<<work(_l-1, ch[0])<<endl;
        printf("%I64d\n", work(_r, ch[0]) - work(_l-1, ch[0]));
    //  cout<<endl<<endl;
    }
    return 0;
}

