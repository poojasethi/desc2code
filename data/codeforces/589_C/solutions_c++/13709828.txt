#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <cmath>
#include <iostream>
#include <algorithm>
#define rep(i,x,y) for(int i=x;i<=y;++i)
#define mk make_pair
#define int64 long long
#define N 120000
using namespace std;
int num[120],l,cnt[101][120][120];
int K[N];
int n,m,o;
char c[220000],P[1200];

int64 work(int n,int64 p,int c){
	if(!n){
		int ans=0;
		rep(i,1,p)ans+=((P[i]-'a')==c);
		return ans;
	}
	int64 len=o*(1ll<<n-1);
	if(p<len)return work(n-1,p,c);
	return num[c]*(1ll<<n-1)+cnt[n][min((int64)K[n],p-len)][c]+work(n-1,max(0ll,p-len-K[n]),c);
}

int main(){
	scanf("%s",c+1);
	int l=strlen(c+1);
	rep(i,1,l)P[i]=c[i];
	o=l;
	rep(i,1,l)num[c[i]-'a']++;


	scanf("%d%d",&n,&m);
	rep(i,1,n){
		scanf("%d",&K[i]);
		if(i<=63){
			K[i]%=l;

			{
				int res=0;
				for(int j=K[i]-1;j>=0;--j){
					res++;
					rep(k,0,25)cnt[i][res][k]=cnt[i][res-1][k];
					cnt[i][res][c[l-j]-'a']++;
				}
			}

			int len=l;
			for(int j=K[i]-1;j>=0;--j)c[++len]=c[l-j];
			rep(j,1,l-K[i])c[++len]=c[j];
			if(l>10000){
				rep(j,1,l)c[j]=c[j+l];
			}else l=len;
		}
	}
	rep(i,1,n){
		if(o*(1ll<<i)>2e18){
			n=i;
			break;
		}
	}
	rep(i,1,m){
		int64 L,R;
		char tmp[12];
		scanf("%I64d%I64d%s",&L,&R,tmp);
		printf("%I64d\n",work(n,R,tmp[0]-'a')-work(n,L-1,tmp[0]-'a'));
	}
}
