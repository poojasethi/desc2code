#include <iostream>
#include <stack>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

string d;

bool citycomp(const string& a, const string& b)
{
    return (a+d < b+d);
}

int main()
{
    int n; cin >> n;
    bool used[10010];
    memset(used, false, sizeof(used));
    vector <string> cities(n);
    int len = 0;
    for (int i=0; i<n; i++)
    {
        cin >> cities[i];
        len += cities[i].size();
    }
    len = (len*2)/n;
    cin >> d;

    sort(cities.begin(), cities.end(), citycomp);

    vector <stack <string> > c(11);
    for (int i=n-1; i>=0; i--)
        c[cities[i].size()].push(cities[i]);

    for (int i=0; i<n/2; i++)
    {
        int best = -1;
        for (int i=1; i<=10; i++)
        {
            if (c[i].size() && (best == -1 || citycomp(c[i].top(), c[best].top())))
                best = i;
        }
        string a = c[best].top(); c[best].pop();
        cout << a << d << c[len-best].top() << endl;
        c[len-best].pop();
    }
    return 0;
}
