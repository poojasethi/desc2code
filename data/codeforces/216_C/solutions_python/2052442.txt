n, m, k = raw_input().split(" ")
n, m, k = int(n), int(m), int (k)

def workers_on_day(i, workers):
	indices = [key for key in workers.keys() if key >= i]
	return sum([workers[day] for day in indices])
		

def need_worker(i, n, m, k, workers):
	worker_count = workers_on_day(i, workers)
	if worker_count < k:
		return k - worker_count
	# If there is none of the current workers anymore, hire key carrier
	if workers_on_day(i+1, workers) == 0:
		return 1
	
	return 0

end_dates = {}
end_dates[n] = k

for i in range(n, n+m+1):
	needed_workers = need_worker(i, n, m, k, end_dates)
	if needed_workers > 0:
		end_dates[i+n-1] = needed_workers

# Extract begin days from end dates
begin_days = []
for date in end_dates:
	day = date - n + 1
	begin_days += end_dates[date] * [day]
begin_days = sorted(begin_days)
print sum(end_dates.values())
print " ".join([str(day) for day in begin_days])
