from math import log

def f1(x, y, z):
    # log(log(x^y^z)) =log( y^z * log(x)) = z*log(y) + log(log(x))
    return z*log(y) + log(log(x))

def f2(x, y, z):
    # log(log(x^(yz))) = log(yz*log(x))
    return log(y*z*log(x))

expr = ["x^y^z", "x^z^y", "(x^y)^z", "y^x^z", "y^z^x", "(y^x)^z", "z^x^y", "z^y^x", "(z^x)^y"]
x, y, z = map(float, raw_input().split())
inv = max(x, y, z) <= 1.
if max(x, y, z) == 1.:
    if x == 1.: print "x^y^z"
    elif y == 1.: print "y^x^z"
    else: print "z^y^x"
    exit()

# print inv
ans = -1
val = None
fn = lambda x, y: x > y
if inv: fn = lambda x, y: x < y

tmp = None
if x > 1.: tmp = f1(x, y, z)
elif inv: tmp = f1(1./x, y, z)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 0
    val = tmp


tmp = None
if x > 1.: tmp = f1(x, z, y)
elif inv: tmp = f1(1./x, z, y)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 1
    val = tmp

tmp = None
if x > 1.: tmp = f2(x, y, z)
elif inv: tmp = f2(1./x, y, z)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 2
    val = tmp

tmp = None
if y > 1.: tmp = f1(y, x, z)
elif inv: tmp = f1(1./y, x, z)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 3
    val = tmp

tmp = None
if y > 1.: tmp = f1(y, z, x)
elif inv: tmp = f1(1./y, z, x)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 4
    val = tmp

tmp = None
if y > 1.: tmp = f2(y, x, z)
elif inv: tmp = f2(1./y, x, z)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 5
    val = tmp


tmp = None
if z > 1.: tmp = f1(z, x, y)
elif inv: tmp = f1(1./z, x, y)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 6
    val = tmp

tmp = None
if z > 1.: tmp = f1(z, y, x)
elif inv: tmp = f1(1./z, y, x)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 7
    val = tmp

tmp = None
if z > 1.: tmp = f2(z, x, y)
elif inv: tmp = f2(1./z, x, y)
if tmp != None and (val == None or fn(tmp, val)):
    ans = 8
    val = tmp

print expr[ans]