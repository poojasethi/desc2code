import math
import decimal

def comp_pow(a, b, c, d):  # a^b <=> c^d
    ab4 = ((a == 2) and (b == 4)) or ((a == 4) and (b == 2))
    cd4 = ((c == 2) and (d == 4)) or ((c == 4) and (d == 2))
    if ab4 and cd4:
        return 0
    logAB = b * decimal.Decimal(math.log(a))
    logCD = d * decimal.Decimal(math.log(c))
    if logAB == logCD:
        return 0
    if logAB < logCD:
        return -1
    return 1

decimal.getcontext().prec = 1000
x, y, z = map(decimal.Decimal, raw_input().split())

expX1 = y ** z  # for x^y^z
expX2 = z ** y  # for x^z^y
expX3 = y * z   # for (x^y)^z

coolestX = expX1
coolestXExpr = "x^y^z"
if comp_pow(x, expX2, x, coolestX) > 0:
    coolestX = expX2
    coolestXExpr = "x^z^y"
if comp_pow(x, expX3, x, coolestX) > 0:
    coolestX = expX3
    coolestXExpr = "(x^y)^z"

expY1 = x ** z  # for y^x^z
expY2 = z ** x  # for y^z^x
expY3 = x * z   # for (y^x)^z

coolestY = expY1
coolestYExpr = "y^x^z"
if comp_pow(y, expY2, y, coolestY) > 0:
    coolestY = expY2
    coolestYExpr = "y^z^x"
if comp_pow(y, expY3, y, coolestY) > 0:
    coolestY = expY3
    coolestYExpr = "(y^x)^z"

expZ1 = x ** y  # for z^x^y
expZ2 = y ** x  # for z^y^x
expZ3 = x * y   # for (z^x)^y

coolestZ = expZ1
coolestZExpr = "z^x^y"
if comp_pow(z, expZ2, z, coolestZ) > 0:
    coolestZ = expZ2
    coolestZExpr = "z^y^x"
if comp_pow(z, expZ3, z, coolestZ) > 0:
    coolestZ = expZ3
    coolestZExpr = "(z^x)^y"


coolest = coolestX
coolestBase = x
coolestExpr = coolestXExpr
if comp_pow(y, coolestY, coolestBase, coolest) > 0:
    coolest = coolestY
    coolestBase = y
    coolestExpr = coolestYExpr
if comp_pow(z, coolestZ, coolestBase, coolest) > 0:
    coolest = coolestZ
    coolestBase = z
    coolestExpr = coolestZExpr

print coolestExpr
