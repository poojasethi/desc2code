#!/usr/bin/env python

from sys import stdin
from math import log10 as LOG
from math import fabs

EPS = 1e-10

expr = 'x^y^z x^z^y (x^y)^z (x^z)^y y^x^z y^z^x (y^x)^z (y^z)^x z^x^y z^y^x (z^x)^y (z^y)^x'.split()

def solve(x, y, z):
   res = []
   if x <= 1 and y <= 1 and z <= 1:
      res = [
         ( (y**z) * LOG(x), 0 ),
         ( (z**y) * LOG(x), 1 ),
         ( (z *y) * LOG(x), 2 ),
         ( (x**z) * LOG(y), 4 ),
         ( (z**x) * LOG(y), 5 ),
         ( (z *x) * LOG(y), 6 ),
         ( (x**y) * LOG(z), 8 ),
         ( (y**x) * LOG(z), 9 ),
         ( (x *y) * LOG(z), 10 )
      ]
   else:
      if x > 1.0:
         res += [
           ( z*LOG(y) + LOG(LOG(x)), 0 ),
           ( y*LOG(z) + LOG(LOG(x)), 1 ),
           ( LOG(z) + LOG(y) + LOG(LOG(x)), 2 )
         ]
      if y > 1.0:
         res += [
           ( z*LOG(x) + LOG(LOG(y)), 4 ),
           ( x*LOG(z) + LOG(LOG(y)), 5 ),
           ( LOG(x) + LOG(z) + LOG(LOG(y)), 6 ),
         ]
      if z > 1.0:
         res += [
           ( y*LOG(x) + LOG(LOG(z)), 8 ),
           ( x*LOG(y) + LOG(LOG(z)), 9 ),
           ( LOG(y) + LOG(x) + LOG(LOG(z)), 10 )
         ]

   bestval, bestidx = res[0]
   for (val, idx) in res:
   #  print '%d %.20f %s' % (idx, val, expr[idx])
      if fabs(bestval - val) > EPS:
         if bestval < val:
            bestval, bestidx = val, idx

   return expr[ bestidx ]

def main():
   x, y, z = map(float, stdin.readline().split())
   print solve(x, y, z)
   return 0

if __name__ == '__main__': main()
