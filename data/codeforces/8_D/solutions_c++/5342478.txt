#include <cmath>
#include <cstdio>
#include <algorithm>
#define eps 1e-12
using namespace std;

struct point
{
	double x,y;
	point(double _x=0,double _y=0) {x=_x,y=_y;}
	double dis() {return sqrt(x*x+y*y);}
	friend point operator -(const point&A,const point&B) {return point(A.x-B.x,A.y-B.y);}
	friend point operator +(const point&A,const point&B) {return point(A.x+B.x,A.y+B.y);}
	point operator *(double k) {return point(k*x,k*y);}
} A,B,C,X,Y,Z;
double a,b,c,T1,T2,ans;

double F(double k)
{
	point p=C*k+B*(1-k),q; double l=0,r=1,m,d=(A-p).dis(),res=-1e9;
	if (d+(C-p).dis()-T1<eps&&d+(B-p).dis()-T2<eps) res=min(T1-(C-p).dis(),T2-(B-p).dis());
	else for (;abs(r-l)>eps;)
	for (int i=0; i<99; i++)
	{
		m=(l+r)/2,q=A*m+p*(1-m),d=(A-q).dis();
		if (d+(C-q).dis()-T1<eps&&d+(B-q).dis()-T2<eps) res=max(res,d),r=m; else l=m;
	}
	ans=max(ans,res);
	return res;
}

int main()
{
	scanf("%lf%lf%lf%lf%lf%lf%lf%lf",&T1,&T2,&A.x,&A.y,&B.x,&B.y,&C.x,&C.y);
	T1+=(A-C).dis(),T2+=(A-B).dis();
	double l=0,r=1;
	if ((A-C).dis()+(B-C).dis()-T2<eps) ans=min(T1+(B-C).dis(),T2);
	else for (;abs(r-l)>eps;)
	{
		double ll=l+(r-l)/3,rr=r-(r-l)/3;
		if (F(ll)-F(rr)>eps) r=rr; else l=ll;
	}
	printf("%lf\n",ans);
}