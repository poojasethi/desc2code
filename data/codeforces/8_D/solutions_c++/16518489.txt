#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <cctype>
#include <iostream>
#include <queue>
#define eps 1e-10
using namespace std;

struct node
{
	double x, y;
}a, b, c, d, e;
double t1, t2;


double sqr(double x) {return x * x;}
double dis(node a, node b)
{
	return sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));
}

node point(double mid)
{
	node e;
	e.x = a.x + (d.x - a.x) * mid;
	e.y = a.y + (d.y - a.y) * mid;
	return e;
}

double check(double mid)
{
	d.x = c.x - mid * (c.x - b.x);
	d.y = c.y - mid * (c.y - b.y);
	double l = 0, r = 1.0;
	while (r - l > eps)
	{
		mid = (l + r) / 2;
		e = point(mid);
		if (dis(a, e) + dis(e, b) > t2 + eps || dis(a, e) + dis(e, c) + dis(c, b) > t1 + eps) r = mid;
		else l = mid;
	}
	e = point(l);
    //cout << e.x << ' ' << e.y << endl;
	return dis(a, e) + min(t2 - dis(a, e) - dis(e, b), t1 - dis(a, e) - dis(e, c) - dis(c, b))
            + dis(e, b) * (fabs(e.x - c.x) < eps && fabs(e.y - c.y) < eps);
}


int main()
{
	int i, j;
	cin >> t1 >> t2;
	cin >> a.x >> a.y >> b.x >> b.y >> c.x >> c.y;
	t1 += dis(a, c) + dis(c, b);
	t2 += dis(a, b);
	if (t2 >= dis(a, c) + dis(c, b))
	{
		printf("%.5lf\n", min(t1, t2));
		return 0;
	}
	double l = 0, r = 1.0;
	while (r - l > eps)
	{
		double lm = l + (r - l) / 3;
		double rm = r - (r - l) / 3;
		if (check(lm) > check(rm))  r = rm;
			else l = lm;
	}
	printf("%lf\n", max(check(l), check(0)));
	//printf("%lf\n", check(l));
	return 0;
}
