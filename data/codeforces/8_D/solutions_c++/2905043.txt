#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;

const double eps=1e-10;
double t1,t2;
struct Node
{
    double x,y;
    void init() { scanf("%lf%lf",&x,&y); }
    Node operator -= (const Node &a) { x-=a.x,y-=a.y; }
}A,B,C,E,F;

double sqr(double a) { return a*a; }
double dist(Node a,Node b) { return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y)); }
void get(Node &c,Node a,Node b,double t)
{
    double d=dist(a,b);
    c.x=(b.x-a.x)*(t/d)+a.x;
    c.y=(b.y-a.y)*(t/d)+a.y;
}

double cal(double t)
{
    get(E,B,C,t);
    if (dist(A,E)+dist(E,C)+dist(C,B)<t1+eps && dist(A,E)+dist(E,B)<t2+eps)
        return min(t1-dist(E,C)-dist(C,B),t2-dist(E,B));
    double le=0.0,ri=dist(A,E),mid;
    for (; le+eps<ri; )
    {
        mid=(le+ri)/2.0;
        get(F,A,E,mid);
        if (dist(A,F)+dist(F,C)+dist(C,B)<t1+eps && dist(A,F)+dist(F,B)<t2+eps)
            le=mid; else ri=mid;
    }
    return le;
}

int main()
{
    
    scanf("%lf%lf",&t1,&t2);
    A.init(),B.init(),C.init();
    t1+=dist(A,C)+dist(C,B),t2+=dist(A,B);
    if (dist(A,C)+dist(C,B)<t2+eps) { printf("%0.10lf\n",min(t1,t2)); return 0; }
    double le=0.0,ri=dist(B,C),m1,m2;
    for (; le+eps<ri; )
    {
        m1=(2*le+ri)/3.0,m2=(le+2*ri)/3.0;
        if (cal(m1)<cal(m2)) le=m1; else ri=m2;
    }
    printf("%0.10lf\n",cal(le));
    
    return 0;
}
