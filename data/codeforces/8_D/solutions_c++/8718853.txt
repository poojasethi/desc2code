#include <cstdio>
#include <cmath>
#include <algorithm>
using namespace std;
const double eps = 1e-10;
struct Point{
	double x,y;
	void getv(double _x,double _y){ x = _x; y = _y; }
}a,b,c,d,e;
double t1,t2,l,r,m1,m2,base,step;

double dist(Point a,Point b){
	return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

double bSearch(double rate){
	rate /= base;
	d.getv((b.x - c.x) * rate + c.x,(b.y - c.y) * rate + c.y);
	double l = 0.0,r,base0,mid,dc;
	r = base0 = dist(d,a);
	while(r - l > eps){
		mid = (l + r) / 2.0;
		e.getv((d.x - a.x) * mid / base0 + a.x,(d.y - a.y) * mid / base0 + a.y);
		dc = dist(e,a);
		if(dist(e,c) + dc > t1 + eps || dist(e,b) + dc > t2 + eps) r = mid;
		else l = mid;
	}
	e.getv((d.x - a.x) * l / base0 + a.x,(d.y - a.y) * l / base0 + a.y);
	return min(t1 - dist(e,c),t2 - dist(e,b)) + dist(e,b) * (fabs(e.x - c.x) < eps && fabs(e.y - c.y) < eps);
}

int main(){
	//freopen("input","r",stdin);
	scanf("%lf%lf%lf%lf%lf%lf%lf%lf",&t1,&t2,&a.x,&a.y,&b.x,&b.y,&c.x,&c.y);
	t1 += dist(a,c); t2 += dist(a,b);
	l = 0.0; r = base = dist(b,c);
	while(r - l > eps){
		step = (r - l) / 3;
		m1 = l + step; m2 = r - step;
		if(bSearch(m2) < bSearch(m1)) r = m2;
		else l = m1;
	}
	printf("%.10lf\n",max(bSearch(l),bSearch(0)));
}
