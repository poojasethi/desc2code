#implementam un arbore de intervale
#ca sa nu trimitem doar brutul, ca la tzara (cu toate ca intra)
n = input()
v = [x-1 for x in list(map(int, raw_input().split()))]
H = [0 for i in range(0, 4*n)]
pos = [0 for i in range(0, n)]
inv = 0

for i in range(0, n): pos[v[i]] = i

def update(node, lo, hi, pos):
    global H
    if lo == hi:
        H[node] = 1
        return

    mid = (lo + hi) // 2
    if pos <= mid: update(2*node, lo, mid, pos)
    else:          update(2*node+1, mid+1, hi, pos)
    H[node] = H[2*node] + H[2*node+1]


def query(node, lo, hi, a, b):
    global H
    if a <= lo and hi <= b: return H[node]

    mid, ret = (lo + hi) // 2, 0

    if a <= mid:   ret += query(2*node, lo, mid, a, b)
    if mid+1 <= b: ret += query(2*node+1, mid+1, hi, a, b)
    return ret
    

for i in range(0, n):
    inv += query(1, 0, n-1, pos[i], n-1)
    update(1, 0, n-1, pos[i])
    
print '%.6f' % (float(inv) - inv/2 + (inv/2) * 3.0)

