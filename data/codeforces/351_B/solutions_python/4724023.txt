#!/usr/bin/env python

def merge_sort(a, index, length):
    """Modified merge sort, returns the number of inversions."""
    if length == 1:
        return 0
    if length == 2:
        if a[index] <= a[index + 1]:
            return 0
        a[index], a[index + 1] = a[index + 1], a[index]
        return 1
    len1 = remains1 = length / 2
    len2 = remains2 = length - len1
    index1 = index
    index2 = index + len1
    num_inv = 0
    num_inv += merge_sort(a, index1, len1)
    num_inv += merge_sort(a, index2, len2)
    a_sorted = []
    while remains1 and remains2:
        if a[index1] <= a[index2]:
            a_sorted.append(a[index1])
            index1 += 1
            remains1 -= 1
        else:
            a_sorted.append(a[index2])
            index2 += 1
            remains2 -= 1
            num_inv += remains1
    if remains1:
        a_sorted.extend(a[index1:index + len1])
    else:
        a_sorted.extend(a[index2:index + length])
    a[index:index + length] = a_sorted
    return num_inv


def count_inversions(perm):
    return merge_sort(perm, 0, len(perm))
    

raw_input()
perm = map(int, raw_input().split())

count_inv = count_inversions(perm)
ans = count_inv / 2 * 4 + count_inv % 2
print ans
