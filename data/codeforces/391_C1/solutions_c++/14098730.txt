#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
#define inf (1ll<<60)
using namespace std;
const int N=3000;
struct qwe{int r,s;}a[N];
int used[N];
int T,n,k,s,ts1,ts2,ts3;
long long ans;
bool cmp(qwe A,qwe B)
{
	return A.s>B.s;
}
bool AK(qwe A,qwe B)
{
	return A.r<B.r;
}
void run1()
{
	if (s<ts1+ts2) return;
	memset(used,0,sizeof(used));
	int tot1=0;
	long long sum=0;
	for (int i=1;i<=n;i++)
		if (a[i].s==s-1||a[i].s==s)
		{
			sum=sum+(long long)a[i].r;
			tot1++; used[i]=1;
			if (tot1==ts2+ts1) break;
		}
	if (s==ts1+ts2) {ans=min(ans,sum);return;}
    int tot=0;
	for (int i=1;i<=n;i++)
		if (!used[i])
		{
			sum=sum+(long long)a[i].r;
			tot++;
			if (tot==s-ts1-ts2) break;
		}
	ans=min(ans,sum);
}
void run2()
{
	if (s<ts1) return;
	memset(used,0,sizeof(used));
	int tot1=0;
	long long sum=0;
	for (int i=1;i<=n;i++)
		if (a[i].s==s-1||a[i].s==s)
		{
			sum=sum+(long long)a[i].r;
			tot1++; used[i]=1;
			if (tot1==ts1) break;
		}
	if (s==ts1) {ans=min(ans,sum);return;}
    int tot=0;
	for (int i=1;i<=n;i++)
		if (!used[i])
		{
			sum=sum+(long long)a[i].r;
			tot++; used[i]=1;
			if (tot==s-ts1) break;
		}
	ans=min(ans,sum);
}
void run3()
{
    int tot=0;
    long long sum=0;
	for (int i=1;i<=n;i++)
	{
		sum=sum+(long long)a[i].r;
		tot++;
		if (tot==s) break;
	}
	ans=min(ans,sum);
}
int main()
{
//	freopen("tournament.in","r",stdin);
//	freopen("tournament.out","w",stdout);
//	scanf("%d",&T);
//	while (T--)
	{
		ts1=0; ts2=0;
		ts3=0; ans=inf;
		scanf("%d%d",&n,&k);
		if (k==n+1)
		{
			printf("0\n");
			return 0;
			//continue;
		}	
		for (int i=1;i<=n;i++)
			scanf("%d%d",&a[i].s,&a[i].r);
		sort(a+1,a+n+1,cmp);
		s=a[k].s;
		for (int i=k;i<=n;i++)
			if (a[i].s==s) ts1++;
		for (int i=1;i<=n;i++)
			if (a[i].s==s-1) ts2++;
		for (int i=1;i<=n;i++)
			if (a[i].s==s+1) ts3++;
		sort(a+1,a+n+1,AK);
        if (s<=n) run1(); 
		s++; 
		if (s<=n) run2();
		s++; 
		if (s<=n) run3();
		if (ans!=inf) printf("%I64d\n",ans);
	    else printf("-1\n");
	}
	fclose(stdin);
	fclose(stdout);
	return 0;
}
