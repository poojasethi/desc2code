#include <iostream>
#include <sstream>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <algorithm>
#include <cmath>
#include <climits>
#include <cfloat>
using namespace std;

const double PI = std::atan(1.0)*4;

typedef struct{
    int p;
    int e;
    bool w;
}game;

bool bitTurnedOn(int mask, int i)
{
    bool ans = (mask & (1 << i)) != 0;
    return ans;
}

bool comparePoints(const game &lhs, const game &rhs)
{
    if(lhs.p == rhs.p)
    {
        if(lhs.w && !rhs.w)
            return false;
        if(rhs.w && !lhs.w)
            return true;
        return false;
    }
    return lhs.p> rhs.p;
}
bool compareEffort(const game &lhs, const game &rhs)
{
    return lhs.e< rhs.e;
}
int main(int argc, char* argv[]){
    int n,k;
    cin >>n >> k;
    vector<game > elems(n);
    int totaleffort = 0;
    for(int i=0;i<n;++i){
        cin >> elems[i].p >> elems[i].e;
        elems[i].w = true;
        totaleffort += elems[i].e;
    }

    int maxcomb = pow(2, n);
    int ans = -1;
    for(int mask=0;mask<maxcomb; ++mask)
    {
        int points = 0;
        int effort = 0;
        int rank = n+1;
        for(int bit=0;bit<n;++bit)
        {
            if(bitTurnedOn(mask, bit))
            {
                points += 1;
                effort += elems[bit].e;
            }
        }
        for(int bit =0; bit<n;++bit)
        {
            int pointsOther = elems[bit].p;
            if(!bitTurnedOn(mask, bit))
                ++pointsOther;

            if(pointsOther < points)
            {
                --rank;
            }else if(pointsOther == points && bitTurnedOn(mask,bit))
            {
                --rank;
            }
        }
        if(rank <= k)
        {
            if(ans == -1)
                ans = effort;
            else
                ans = min(ans, effort);
        }
    }
    cout << ans << endl;


    return EXIT_SUCCESS;
}

