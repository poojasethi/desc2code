//codeforces391C1
#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include <string>

using namespace std;

const int MAXN = 15;

struct fighter
{
    int p, e;
};

fighter f[MAXN];
int n, k;

bool cmp_by_points(fighter a, fighter b)
{
    return a.p > b.p;
}

int calc(int cfg)
{
    int effort = 0;
    int points = 0;

    fighter f2[MAXN];

    for (int i=0; i<n; ++i)
        f2[i] = f[i];

    for (int i=0; i<n; ++i)
    {
        if (cfg & (1 << i))
        {
            effort += f2[i].e;
            points++;
        }
        else
        {
            f2[i].p++;
        }
    }

    int pos = 0;

    for (int i=0; i<n; ++i)
        if (f2[i].p > points || (f2[i].p == points && !(cfg & 1 << i)))
            pos++;

    if (pos < k)
        return effort;

    return 999999999;
}

int solve()
{
    int m = 1 << n;
    int best = 999999999;

    for (int i=0; i<m; ++i)
    {
        best = min(best, calc(i));
    }

    return best;
}

int main()
{
    ios_base::sync_with_stdio(0);

    int sum_effort = 0;

    cin >> n >> k;

    for (int i=0; i<n; ++i)
    {
        cin >> f[i].p >> f[i].e;
        sum_effort += f[i].e;
    }

    if (k == n+1)
    {
        cout << "0" << endl;
        return 0;
    }

    sort(f, f+n, cmp_by_points);

    if (f[k-1].p > n)
    {
        cout << "-1" << endl;
        return 0;
    }
    else if (f[k-1].p == n)
    {
        cout << sum_effort << endl;
        return 0;
    }

    cout << solve() << endl;

    return 0;
}

