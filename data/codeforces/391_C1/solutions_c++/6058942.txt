/*
 * Main.cpp
 *
 *  Created on:
 *      Author: KC
 */

#include <iostream>
#include <fstream>
#include <algorithm>
#include <cstdio>
#include <string>
#include <cstring>
#include <sstream>
#include <math.h>
#include <vector>
#include <time.h>
#include <set>
using namespace std;

#include <limits>
struct Pair{
	int first;
	int second;
	bool checked;
};
vector<Pair > L;
vector<int> res;
inline bool FSort(Pair a, Pair b){
	return a.first < b.first;
}
inline bool SSort(Pair a, Pair b){
	return a.second < b.second;
}

void solve(int f[], int numf, int level, int n, int k){
	if(level > n){
		int rank = 1;
		int e = 0;
		for(int i = 0; i < numf; i++){
			L[f[i]].checked = 1;
			e += L[f[i]].second;
		}
		for(int i = 0; i < n; i++){
			if(L[i].first > numf || ((L[i].first == numf || L[i].first + 1 == numf)&& !L[i].checked)) rank++;
		}

		if(rank <= k) res.push_back(e);
		for(int i = 0; i < n; i++) L[i].checked = 0;
		return;
	}
	else ;
	solve(f, numf, level + 1,n, k);

	f[numf++] = level -1 ;
	solve(f, numf, level + 1, n, k);
	return;

}
int main(){

	int n, k ,p ,e;
	scanf("%d %d",&n, &k);
	for(int i = 0; i < n; i++){
		scanf("%d %d", &p, &e);
		Pair t;
		t.first = p;
		t.second = e;
		t.checked = 0;
		L.push_back(t);
	}
	sort(L.begin(),L.end(),FSort);

	int kp = L[n - k].first;
	if(kp > n) {
		cout << "-1\n";
		return 0;
	}
	int f[n];
	solve(f, 0, 1, n ,k);

	sort(res.begin(), res.end());

	printf("%d\n",res[0]);
}
