#define _CRT_SECURE_NO_WARNINGS
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <math.h>
#include <vector>
#include <string>
#include <stdio.h>
#include <time.h>
#include <sstream>
#include <cstdlib>
#include <string.h>
#include <limits.h>
#include <iostream>
#include <algorithm>
#include <functional>

using namespace std;

#define M 
#define N 1e9
#define Fn i.txt
#define mp make_pair
#define si(a) scanf("%d",&a)
#define sc(a) scanf("%c",&a)
#define sst(s) scanf("%s",s)
#define fo(a) freopen(a,"r",stdin)
#define si2(a,b) scanf("%d%d",&a,&b)
#define rep(i,a,b) for(int i=a;i < b;++i)
#define Set(a,b) memset(a,b,sizeof a)
#define si3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define lli long long int
#define llu unsigned long long



vector< pair< int, int> > list;
int stat[20];
int points[20];
int n, m;

int dp(int i, int p, int e)
{
	if (i == list.size())
	{
		int res = n + 1;
		for (int j = 0; j < list.size(); ++j)
		{
			if (p > points[j])
				res--;
			else if (p == points[j] && stat[j] == 1)
				res--;
		}
		if (res <= m)
			return e;
		else
			return N;
	}

	stat[i] = 1;
	int s1 = dp(i + 1, p + 1, e + list[i].second);


	stat[i] = 0;
	points[i] += 1;
	int s2 = dp(i + 1, p, e);

	points[i] -= 1;

	return min(s1, s2);
}
int main()
{
	//fo(Fn);
	int a, b;
	si2(n, m);
	rep(i, 0, n)
	{
		si2(a, b);
		points[i] = a;
		list.push_back(mp(a, b));
	}

	int ans = dp(0, 0, 0);

	if (ans == N)
		cout << -1 << endl;
	else
		cout << ans << endl;
	return 0;
}