#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
using namespace std;
const int inf=1e8;
struct ppp{
    int k,l,r,v;
    void mk(int _k,int _l,int _r,int _v){
        k=_k; l=_l; r=_r; v=_v;
    }
}a[1200000];
struct seg{
    int ans,sign;
    seg * lch,* rch;
    seg (){
        ans=sign=0; lch=0; rch=0;
    }
    void updata(int l,int r,int x,int y,int k){
        int mid=(l+r)/2;
        if(x<=l && y>=r){
            ans=max(ans,k);
            sign=max(sign,k);
            return;
        }
        if(!lch)lch=new seg(),rch=new seg();
        if(x<=mid)lch->updata(l,mid,x,y,k);
        if(y>mid)rch->updata(mid+1,r,x,y,k);
        ans=max(sign,min(lch->ans,rch->ans));
    }
    int calc(int l,int r,int x,int y){
        int mid=(l+r)/2,res=1e9;
        if(x<=l && y>=r)return ans;
        if(!lch)return sign;
        if(x<=mid)res=min(res,lch->calc(l,mid,x,y));
        if(y>mid)res=min(res,rch->calc(mid+1,r,x,y));
        return max(res,sign);
    }
}*tree;
int vx,vy,tot,i,j,n,x;
long long ans;
bool cmp(const ppp&a,const ppp&b){
    return a.k<b.k;
}
void add(int i,int j,int v){
    int x,y,k=1e9,l=1e9,r=-1e9,d;
    for(x=i-1;x<=i;++x)
        for(y=j-1;y<=j;++y){
            k=min(k,y*vy+vx*x);
            d=vy*x-vx*y;
            l=min(l,d);
            r=max(r,d);
        }
    a[++tot].mk(k,l+inf+1,r+inf,v);
}
int main(){
    scanf("%d%d%d",&n,&vx,&vy);
    for(i=1;i<=n;++i)
        for(j=1;j<=n;++j){
            scanf("%d",&x);
            add(i,j,x);
        }
    sort(a+1,a+tot+1,cmp);
    tree=new seg();
    for(i=1;i<=tot;++i){
        int tmp=tree->calc(0,inf+inf,a[i].l,a[i].r);
        ans+=max(0,a[i].v-tmp);
        tree->updata(0,inf+inf,a[i].l,a[i].r,a[i].v);
    }
    printf("%I64d\n",ans);
}