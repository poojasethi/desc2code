#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

typedef long long ll;

const int N = 1005;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define fd(i , st , en) for (int i = st; i >= en; i--)
#define Me(x , y) memset(x , y , sizeof(x))
#define P(x , y) (x + y | x != y)

struct _three{
	int a , b , c;
}q[N * N];

bool operator < (const _three &x , const _three &y){
	return x.c < y.c;
}

struct _two{
	int a , b;
}t[N * N * 2];

int n , vx , vy;
int a[N][N] , pos[N][N] , qu[N * N];

void Read(int &x){
	char c;
	while (c = getchar() , c < '0' || c > '9');
	x = c - '0';
	while (c = getchar() , c >= '0' && c <= '9') x = x * 10 + c - '0';
}

void Init(){
	scanf("%d%d%d" , &n , &vx , &vy);
	fo (i , 1 , n)
		fo (j , 1 , n)
			Read(a[i][j]);
}

int Find(int l , int r , int st , int en){
	int x = P(l , r);
	if (st <= l && r <= en) return t[x].a;
	int mid = l + r >> 1 , temp = (int)1e9;
	if (st <= mid) temp = min(temp , Find(l , mid , st , en));
	if (en > mid) temp = min(temp , Find(mid + 1 , r , st , en));
	return max(t[x].b , temp);
}

void Change(int l , int r , int st , int en , int v){
	int x = P(l , r);
	if (t[x].b >= v) return;
	if (st <= l && r <= en){
		t[x].b = v; t[x].a = max(t[x].a , v); return;
	}
	int mid = l + r >> 1;
	if (st <= mid) Change(l , mid , st , en , v);
	if (en > mid) Change(mid + 1 , r , st , en , v);
	t[x].a = min(t[P(l , mid)].a , t[P(mid + 1 , r)].a);
	t[x].a = max(t[x].a , t[x].b);
}

void Work(){
	int tot = 0;
	fo (i , 0 , n)
		fo (j , 0 , n)
			qu[++tot] = pos[i][j] = j * vx - i * vy;
	sort(qu + 1 , qu + tot + 1);
	int m = unique(qu + 1 , qu + tot + 1) - qu - 1;
	fo (i , 0 , n)
		fo (j , 0 , n)
			pos[i][j] = lower_bound(qu + 1 , qu + m + 1 , pos[i][j]) - qu;
	tot = 0;
	fo (i , 0 , n - 1)
		fo (j , 0 , n - 1)
			q[++tot] = (_three){i , j , pos[j][n - i]};
	sort(q + 1 , q + tot + 1); ll ans = 0;
	fd (i , tot , 1){
		int Min = m - 1 , Max = 0;
		fo (i1 , 0 , 1)
			fo (i2 , 0 , 1){
				int y = pos[q[i].a + i1][q[i].b + i2];
				Min = min(Min , y); Max = max(Max , y);
			}
		int tans = Find(1 , m - 1 , Min , Max - 1) , y = a[q[i].a + 1][q[i].b + 1];
		ans += max(y - tans , 0); Change(1 , m - 1 , Min , Max - 1 , y);
	}
	printf("%I64d\n" , ans);
}

int main(){
	Init();
	Work();
	return 0;
}
