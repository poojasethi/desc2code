#include <cstdio>
#include <utility>
#include <algorithm>
using namespace std;

typedef long long LL;
typedef pair<int, int> pi;

#define Px first
#define Py second

const int N = 2050, inf = ~0u >> 2;

struct tree
{
    int l, r, v;
    tree *lc, *rc;
    tree (int _l, int _r) : l(_l), r(_r), v(0), lc(0), rc(0) {}
    void expand ()
    {
        if (l == r) return;
        int m = (l + r) >> 1;
        (lc = new tree(l, m))->expand();
        (rc = new tree(m + 1, r))->expand();
    }
    void push ()
    {
        lc->v = max(lc->v, v);
        rc->v = max(rc->v, v);
    }
    void paint (int ql, int qr, int nv)
    {
        if (ql <= l && r <= qr) { v = max(v, nv); return; }
        int m = (l + r) / 2;
        push();
        if (ql <= m) lc->paint(ql, qr, nv);
        if (qr > m) rc->paint(ql, qr, nv);
        v = min(lc->v, rc->v);
    }
    int query (int ql, int qr)
    {
        if (ql <= l && r <= qr) return v;
        int m = (l + r) / 2, res = inf;
        push();
        if (ql <= m) res = min(res, lc->query(ql, qr));
        if (qr > m) res = min(res, rc->query(ql, qr));
        return res;
    }
} *rt;

LL axis[N * N];
int acnt;
int dt[N][N], n, vx, vy, qcnt;
pair<int, pi> que[N * N];

int main ()
{
#ifdef LOCAL
    freopen("in", "r", stdin);
#endif
    scanf("%d%d%d", &n, &vx, &vy);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            scanf("%d", &dt[i][j]);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            que[++qcnt] = make_pair(i * vx + j * vy, pi(i, j));
    for (int i = 0; i <= n; ++i)
        for (int j = 0; j <= n; ++j)
            axis[++acnt] = i * vy - j * vx;
    sort(axis + 1, axis + 1 + acnt);
    acnt = unique(axis + 1, axis + 1 + acnt) - axis - 1;
    sort(que + 1, que + 1 + qcnt);
    (rt = new tree(1, acnt))->expand();
    LL res = 0;
    for (int _ = 1; _ <= qcnt; ++_)
    {
        int x = que[_].Py.Px, y = que[_].Py.Py, sl(inf), sr(-inf);
        for (int i = 0; i < 2; ++i)
            for (int j = 0; j < 2; ++j)
            {
                int c = lower_bound(axis + 1, axis + 1 + acnt, (x + i) * vy - (y + j) * vx) - axis;
                sl = min(sl, c);
                sr = max(sr, c);
            }
        --sr;
        int s = rt->query(sl, sr);
//      printf("%d %d %d %d\n", sl, sr, dt[x][y], s);
        res += max(0, dt[x][y] - rt->query(sl, sr));
        rt->paint(sl, sr, dt[x][y]);
    }
    printf("%I64d\n", res);
    return 0;
}