#include <cstdio>
#include <algorithm>
using namespace std;
const int N=1005,inf=2e9;
long long ans=0;
int n,vx,vy,a[N][N],ord[N*N],*top=ord;
int calc(int i,int j){
	return vx*j-vy*i;
}
int *L,*R,D;
struct data{
	int cov,mi;
} t[N*N*4];
int query(int cur,int* beg,int* end){
	if(R<=beg||L>=end) return inf;
	if(L<=beg&&R>=end) return t[cur].mi;
	int *mid=beg+(end-beg>>1);
	return max(t[cur].cov,min(query(cur<<1,beg,mid),query(cur<<1|1,mid,end)));
}
void cover(int cur,int* beg,int* end){
	if(R<=beg||L>=end) return;
	if(L<=beg&&R>=end){
		t[cur].cov=max(t[cur].cov,D);
		t[cur].mi=max(t[cur].cov,t[cur].mi);
		return;
	}
	int *mid=beg+(end-beg>>1);
	cover(cur<<1,beg,mid);
	cover(cur<<1|1,mid,end);
	t[cur].mi=max(t[cur].cov,min(t[cur<<1].mi,t[cur<<1|1].mi));
}
int main(){
	scanf("%d%d%d",&n,&vx,&vy);
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			scanf("%d",&a[i][j]);
	if(vx<0){
		for(int i=0;i<n;i++) if(i<n-1-i)
			for(int j=0;j<n;j++)
				swap(a[i][j],a[n-1-i][j]);
		vx*=-1;
	}
	if(vy<0){
		for(int i=0;i<n;i++)
			for(int j=0;j<n;j++) if(j<n-1-j)
				swap(a[i][j],a[i][n-1-j]);
		vy*=-1;
	}
	for(int i=0;i<=n;i++)
		for(int j=0;j<=n;j++)
			*top++=calc(i,j);
	sort(ord,top);
	top=unique(ord,top)-1;
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++){
			L=lower_bound(ord,top,calc(i+1,j));
			R=lower_bound(ord,top,calc(i,j+1));
			ans+=max(0,a[i][j]-query(1,ord,top));
			D=a[i][j];
			cover(1,ord,top);
		}
	printf("%I64d\n",ans);
}
