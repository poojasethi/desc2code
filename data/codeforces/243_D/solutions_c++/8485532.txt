#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

typedef long long LL;

const int N = 1005;
const int M = N * N;

struct rc 
{
	int l, r, u, h; 
	void in(int L, int R, int U, int H){l=L, r=R, u=U, h=H;}
} a[M];

int n, vx, vy, tot;
int p[M * 4], q[M];
int tag[M * 4], ret[M * 4];

void upd(int i, int j, int h)
{
	int l(1e9), r(-1e9), u(1e9);
	for(int x=i-1; x<=i; x++) for(int y=j-1; y<=j; y++)
	{
		u = min(u, x*vx + y*vy);
		p[++p[0]] =  - x*vy + y*vx;
		l = min(l, p[p[0]]), r = max(r, p[p[0]]);
	}
	a[++tot].in(l, r, u, h);
}

bool cmp(int x, int y){return a[x].u<a[y].u;}

void build(int x, int l, int r)
{
	tag[x] = 0, ret[x] = 0;
	if(l==r) return;
	int mid((l+r)>>1); build(x+x, l, mid), build(x+x+1, mid+1, r);
}

void ptag(int x, int y){ tag[x] = max(y, tag[x]), ret[x] = max(y, ret[x]); }
void downtag(int x) { ptag(x+x, tag[x]), ptag(x+x+1, tag[x]); }

int query(int x, int l, int r, int p, int q)
{
	if(l==p && r==q) return ret[x];
	downtag(x);
	int mid((l+r)>>1);
	if(q<=mid) return query(x+x, l, mid, p, q);
	if(p>mid) return query(x+x+1, mid+1, r, p, q);
	return min(query(x+x, l, mid, p, mid), query(x+x+1, mid+1, r, mid+1, q));
}

void update(int x, int l, int r, int p, int q, int h)
{
	if(l==p && r==q) {ptag(x, h); return;}
	downtag(x);
	int mid((l+r)>>1);
	if(q<=mid) update(x+x, l, mid, p, q, h);
	else if(p>mid) update(x+x+1, mid+1, r, p, q, h);
	else update(x+x, l, mid, p, mid, h), update(x+x+1, mid+1, r, mid+1, q, h);
	ret[x] = min(ret[x+x], ret[x+x+1]);
}

int main()
{
	
	scanf("%d%d%d", &n, &vx, &vy);
	for(int i=1; i<=n; i++) for(int j=1, x; j<=n; j++) scanf("%d", &x), upd(i, j, x);
	
	sort(p+1, p+p[0]+1), p[0]=unique(p+1, p+p[0]+1)-p-1;
	for(int i=1; i<=tot; i++)
	a[i].l=lower_bound(p+1, p+p[0]+1, a[i].l)-p, q[i]=i,
	a[i].r=lower_bound(p+1, p+p[0]+1, a[i].r)-p-1;
	
	sort(q+1, q+tot+1, cmp), build(1, 1, p[0]), ptag(1, 0);
	
	LL ans(0);
	for(int ip=1, i, ak; ip<=tot; ip++)
	{
		i = q[ip], ak = query(1, 1, p[0], a[i].l, a[i].r);
		if(a[i].h > ak) ans += a[i].h - ak, update(1, 1, p[0], a[i].l, a[i].r, a[i].h);
	}
	printf("%I64d\n", ans);
	
	return 0;
}



