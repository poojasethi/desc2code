#include <cmath>
#include <map>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <bitset>
#include <memory.h>
#include <functional>
#include <queue>
#include <fstream>
#include <ctime>
#include <deque>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <cctype> 
#include <numeric> 
#include <iomanip>
#include <assert.h>
using namespace std;
#define sqr(_) ((_)*(_))

typedef pair<int, int> Pii;
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define SZ(x) ((int)(x).size())
#define ls (x << 1)
#define rs ((x << 1) | 1)
#define tl t[x].l
#define tr t[x].r
#define mid ((tl + tr) >> 1)

typedef long long LL;

const int MAXN = (int)1e6 + 10;

struct seg_tree
{
	int l, r, h, mh;
}t[MAXN * 8];
vector<int> L;
int n, vx, vy, N, a[MAXN], b[MAXN], c[MAXN], h[MAXN], id[MAXN];

void Build(int x, int l, int r)
{
	tl = l, tr = r;
	if (l == r) return ;
	Build(ls, l, mid), Build(rs, mid + 1, r);
}
void Ins(int x, int l, int r, int w)
{
	if (tl == l && tr == r)
	{
		t[x].h = max(t[x].h, w);
		t[x].mh = max(t[x].mh, w);
		return ;
	}
	if (r <= mid)
		Ins(ls, l, r, w);
	else
	if (l > mid)
		Ins(rs, l, r, w);
	else
		Ins(ls, l, mid, w), Ins(rs, mid + 1, r, w);
	t[x].mh = max(t[x].h, min(t[ls].mh, t[rs].mh));
}
int Query(int x, int l, int r)
{
	int Tohka = 0;
	if (tl == l && tr == r)
		return t[x].mh;
	if (r <= mid)
		Tohka = Query(ls, l, r);
	else
	if (l > mid)
		Tohka = Query(rs, l, r);
	else
		Tohka = min(Query(ls, l, mid), Query(rs, mid + 1, r));
	return max(Tohka, t[x].h);
}
void Upd(int x, int y, int H)
{
	int l = (int)1e9, r = (int)-1e9, p = (int)1e9;
	for (int i = x - 1; i <= x; ++i)
		for (int j = y - 1; j <= y; ++j)
		{
			int d = vy * i - vx * j;
			p = min(p, vx * i + vy * j);
			l = min(l, d), r = max(r, d);
		}
	++N;
	a[N] = l, b[N] = r - 1, c[N] = p, h[N] = H, id[N] = N;
	L.pb(l), L.pb(r - 1);
}
bool cmp(int x, int y)
{
	return c[x] < c[y];
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
#endif
	
	scanf("%d%d%d", &n, &vx, &vy);
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= n; ++j)
		{
			int x;
			scanf("%d", &x);
			Upd(i, j, x);
		}
	sort(L.begin(), L.end());
	L.erase(unique(L.begin(), L.end()), L.end());
	for (int i = 1; i <= N; ++i)
		a[i] = lower_bound(L.begin(), L.end(), a[i]) - L.begin() + 1,
		b[i] = lower_bound(L.begin(), L.end(), b[i]) - L.begin() + 1;
	Build(1, 1, SZ(L));
	sort(id + 1, id + N + 1, cmp);
	LL Tohka = 0;
	for (int t = 1; t <= N; ++t)
	{
		int i = id[t];
		int w = Query(1, a[i], b[i]);
		if (w < h[i])
			Tohka += h[i] - w,
			Ins(1, a[i], b[i], h[i]);
	}
	cout << Tohka << endl;
	
	fclose(stdin);
	fclose(stdout);
	return 0;
}
