#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define N 1010
#define db double
#define eps (1e-9)
#define int64 long long
#define inf 2000000000
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct w {
	int c,mi;
} tr[N*N*8];
struct ww {
	int h,b,l,r,x,y;
} c[N*N];
int i,j,k,n,m,s,vx,vy,t,ans;
int a[N][N],b[N][N];
db d[N*N];
int64 an;
inline bool cc1(const ww &a,const ww &b) {
	return a.b>b.b;
}
inline void update(int x) {
	tr[x].mi=min(tr[x*2].mi,tr[x*2+1].mi);
}
inline void Cover(int x,int y) {
	tr[x].c=max(tr[x].c,y);
	tr[x].mi=max(tr[x].mi,y);
}
inline void renew(int x) {
	if (tr[x].c) Cover(x*2,tr[x].c),Cover(x*2+1,tr[x].c);
	tr[x].c=0;
}
void cover(int q,int x,int y,int l,int r,int h) {
	if (l<=x&&y<=r) {
		Cover(q,h);
		return;
	}
	renew(q);
	int mid=(x+y)/2;
	if (l<=mid) cover(q*2,x,mid,l,r,h);
	if (mid<r) cover(q*2+1,mid+1,y,l,r,h);
	update(q);
}
void cal(int q,int x,int y,int l,int r) {
	if (l<=x&&y<=r) {
		ans=min(ans,tr[q].mi);
		return;
	}
	renew(q);
	int mid=(x+y)/2;
	if (l<=mid) cal(q*2,x,mid,l,r);
	if (mid<r) cal(q*2+1,mid+1,y,l,r);
}
int main() {
	scanf("%d%d%d",&n,&vx,&vy);
	For(i,1,n)For(j,1,n) scanf("%d",&a[i][j]);
	vx=-vx,vy=-vy;
	if (vx<0) {
		vx=-vx;
		For(j,1,n)For(i,1,n/2) swap(a[i][j],a[n-i+1][j]);
	}
	if (vy<0) {
		vy=-vy;
		For(i,1,n)For(j,1,n/2) swap(a[i][j],a[i][n-j+1]);
	}
	if (!vx) {
		swap(vx,vy);
		For(i,1,n)For(j,1,n) b[i][j]=a[i][j];
		For(i,1,n)For(j,1,n) a[j][n-i+1]=b[i][j];
	}
	sort(d+1,d+t+1);
	For(i,1,t) if (!m||d[m]<d[i]) d[++m]=d[i];
	db ay=1.*vy/vx;
	For(i,0,n)For(j,0,n) d[++m]=j-i*ay;
	sort(d+1,d+m+1);
	For(i,1,m) if (!t||d[t]+eps<d[i]) d[++t]=d[i];
	For(i,1,n)For(j,0,n-1) {
		int l=lower_bound(d+1,d+t+1,j-i*ay-eps)-d;
		int r=lower_bound(d+1,d+t+1,j+1-(i-1)*ay-eps)-d;
		c[++s]=(ww){a[i][j+1],i+j,l*2,r*2};
	}
	m=t*2;
	sort(c+1,c+s+1,cc1);
	For(i,1,s) {
		ans=inf;
		cal(1,1,m,c[i].l,c[i].r);
		if (ans<c[i].h) an+=c[i].h-ans;
		cover(1,1,m,c[i].l,c[i].r,c[i].h);
	}
	printf("%I64d\n",an);
	return 0;
}
