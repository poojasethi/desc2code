#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <iostream>

using namespace std;

int N;
int H[1010][1010]={{0}};
int vx,vy;
int V[1010][1010]={{0}};
int val[2000010]={0};
int vp=0;
int TOT=0;

int Min1[4000010]={0};
int Min2[4000010]={0};
int cmpMax[4000010]={0};

void read(int &x)
{
	x=0;
	char ch=getchar();
	for(;ch<'0' || ch>'9';ch=getchar());
	for(;ch>='0' && ch<='9';ch=getchar())
		x=x*10+ch-'0';
	return;
}

int getval(int k)
{
	for(int l=1,r=vp;l<=r;)
	{
		int mid=(l+r)>>1;
		if(val[mid]==k) return mid;
		if(val[mid]>k) r=mid-1;
		else l=mid+1;
	}
	return 0;
}

void Merge(int x)
{
	int son0=x<<1,son1=x<<1|1;
	Min1[x]=min(Min1[son0],Min1[son1]);
	Min2[x]=0x3f3f3f3f;
	if(Min1[x]==Min1[son0]) Min2[x]=min(Min2[x],Min2[son0]);
	else Min2[x]=min(Min2[x],Min1[son0]);
	if(Min1[x]==Min1[son1]) Min2[x]=min(Min2[x],Min2[son1]);
	else Min2[x]=min(Min2[x],Min1[son1]);
	return;
}

void pushdown(int l,int r,int k);

void update(int l,int r,int k,int c)
{
	if(Min1[k]>=c) return;
	if(Min2[k]>c)
	{
		Min1[k]=c;
		cmpMax[k]=c;
	}
	else
	{
		pushdown(l,r,k);
		int mid=(l+r)>>1;
		update(l,mid,k<<1,c);
		update(mid+1,r,k<<1|1,c);
		Merge(k);
	}
	return;
}

void pushdown(int l,int r,int k)
{
	if(cmpMax[k]==0) return;
	int mid=(l+r)>>1;
	update(l,mid,k<<1,cmpMax[k]);
	update(mid+1,r,k<<1|1,cmpMax[k]);
	cmpMax[k]=0;
	return;
}

int Query(int l,int r,int k,int al,int ar)
{
	if(al<=l && r<=ar) return Min1[k];
	pushdown(l,r,k);
	int mid=(l+r)>>1;
	int ret=2e9;
	if(al<=mid) ret=min(ret,Query(l,mid,k<<1,al,ar));
	if(ar>mid) ret=min(ret,Query(mid+1,r,k<<1|1,al,ar));
	return ret;
}

void Change(int l,int r,int k,int al,int ar,int c)
{
	if(al<=l && r<=ar)
	{
		update(l,r,k,c);
		return;
	}
	pushdown(l,r,k);
	int mid=(l+r)>>1;
	if(al<=mid) Change(l,mid,k<<1,al,ar,c);
	if(ar>mid) Change(mid+1,r,k<<1|1,al,ar,c);
	Merge(k);
	return;
}

int main()
{
	cin>>N>>vx>>vy;
	TOT=(N+1)*(N+1);
	for(int i=1;i<=N;i++)
		for(int j=1;j<=N;j++)
			read(H[i][j]);
	if(vx<0)
	{
		for(int j=1;j<=N;j++)
			for(int i=N>>1;i>=1;i--)
				swap(H[i][j],H[N-i+1][j]);
		vx=-vx;
	}
	if(vy<0)
	{
		for(int i=1;i<=N;i++)
			for(int j=N>>1;j>=1;j--)
				swap(H[i][j],H[i][N-j+1]);
		vy=-vy;
	}
	for(int i=0;i<=N;i++)
		for(int j=0;j<=N;j++)
		{
			V[i][j]=vx*j-vy*i;
			val[++vp]=V[i][j];
		}
	sort(val+1,val+vp+1);
	vp=1;
	for(int i=2;i<=TOT;i++)
		if(val[i]!=val[i-1])
			val[++vp]=val[i];
	for(int i=0;i<=N;i++)
		for(int j=0;j<=N;j++)
			V[i][j]=getval(V[i][j]);
	long long Ans=0;
	memset(Min2,0x3f3f3f3f,sizeof(Min2));
	for(int i=1;i<=N;i++)
		for(int j=1;j<=N;j++)
		{
			int ret=Query(1,vp,1,V[i][j-1],V[i-1][j]-1);
			if(ret<=H[i][j])
			{
				Ans+=H[i][j]-ret;
				Change(1,vp,1,V[i][j-1],V[i-1][j]-1,H[i][j]);
			}
		}
	cout<<Ans<<endl;
	return 0;
}