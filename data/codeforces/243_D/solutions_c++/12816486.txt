#include<cstdio>
#include<algorithm>
#define inf 1000000009
#define nn 2002
using namespace std;
struct nod{int l,r,fl,mi;
}g[nn*nn*2];
int vx,vy,i,l,r,j,n,z;
int a[nn][nn],q[nn*nn];
long long ans;
int cross(int a,int b){
    return vx*b-vy*a;
    }
void down(int w){
     int q=g[w].fl;
     g[w*2].fl=max(g[w*2].fl,q);
	 g[w*2+1].fl=max(g[w*2+1].fl,q);
     g[w*2].mi=max(g[w*2].mi,q);
     g[w*2+1].mi=max(g[w*2+1].mi,q);
     g[w].fl=0;
     }
void UP(int w){
     g[w].mi=min(g[w*2].mi,g[w*2+1].mi);
     }
void build(int w,int l,int r){
     g[w].l=l;g[w].r=r;
     if (l==r)return;
     int mid=(l+r)>>1;
     build(w*2,l,mid);build(w*2+1,mid+1,r);
     }
void ask(int w,int l,int r){
    if (g[w].l==l&&g[w].r==r){
       z=min(z,g[w].mi);return;
       }
    if (g[w].fl)down(w);
    int mid=(g[w].l+g[w].r)>>1;
    if (r<=mid)ask(w*2,l,r);else
    if (l>mid)ask(w*2+1,l,r);else{
       ask(w*2,l,mid);ask(w*2+1,mid+1,r);
       }
    UP(w);
    }
void up(int w,int l,int r){
    if (g[w].l==l&&g[w].r==r){
       g[w].mi=max(g[w].mi,a[i][j]);
       g[w].fl=max(g[w].fl,a[i][j]);
       return;
       }
    if (g[w].fl)down(w);
    int mid=(g[w].l+g[w].r)>>1;
    if (r<=mid)up(w*2,l,r);else
    if (l>mid)up(w*2+1,l,r);else{
       up(w*2,l,mid);up(w*2+1,mid+1,r);
       }
     UP(w); 
     }
int find(int w){
    return lower_bound(q+1,q+*q+1,w)-q;
    }
int main(){
    scanf("%d%d%d",&n,&vx,&vy);
    for (i=1;i<=n;i++)
    for (j=1;j<=n;j++)scanf("%d",&a[i][j]);
    if (vx<0) for (i=1;i<=n/2;i++)
              for (j=1;j<=n;j++)swap(a[i][j],a[n-i+1][j]);
    if (vy<0) for (i=1;i<=n/2;i++)
              for (j=1;j<=n;j++)swap(a[j][i],a[j][n-i+1]);
    vx=abs(vx);vy=abs(vy);
    for (i=0;i<=n;i++)
    for (j=0;j<=n;j++)q[++*q]=cross(i,j);
    sort(q+1,q+*q+1);
    *q=unique(q+1,q+*q+1)-(q+1);
    build(1,1,*q-1);
    for (i=1;i<=n;i++)
    for (j=1;j<=n;j++){
    r=find(cross(i-1,j))-1;
    l=find(cross(i,j-1));
    z=inf;
    ask(1,l,r);ans+=max(a[i][j]-z,0);
    z=a[i][j];
    up(1,l,r);
    }
    printf("%I64d\n",ans);
    return 0;
}
