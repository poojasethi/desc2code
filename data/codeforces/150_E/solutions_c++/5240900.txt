#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<vector>
#define fi first
#define se second
#define mk make_pair
#define N 120000
using namespace std;
typedef pair<int,int> pr;
int i,j,k,l,r,mid,ans,ans1,ans2,bfs[N],head[N],next[N*2],e[N*2],c[N*2],fa[N],bo[N],
	size[N],q[N],great[N],great2[N],n,x,y,len,d[N],L,R,dep[N],val[N],tot,a[N],b[N],
	po[N];
int getroot(int x){
	int i,rmin=100000000,tmp,root,l,r,j;
	fa[x]=0;
	bfs[l=r=1]=x;
	while(l<=r){
		x=bfs[l++];
		for(i=head[x];i;i=next[i])if(e[i]!=fa[x] && !bo[e[i]]){
			fa[e[i]]=x;
			bfs[++r]=e[i];
		}
	}
	for(i=r;i>=1;--i){
		x=bfs[i];
		size[x]=1;
		tmp=0;
		for(j=head[x];j;j=next[j])if(e[j]!=fa[x] && !bo[e[j]]){
			tmp=max(tmp,size[e[j]]);
			size[x]+=size[e[j]];
		}
		tmp=max(tmp,r-size[x]);
		if(tmp<rmin)rmin=tmp,root=x;
	}
	return root;
}
void dfs(int x,int ff){
	b[++tot]=x;
	for(int i=head[x];i;i=next[i])if(e[i]!=ff && !bo[e[i]]){
		dep[e[i]]=dep[x]+1;
		val[e[i]]=val[x]+(c[i]>=mid?1:-1);
		dfs(e[i],x);
	}
}
void pret(int deep){
	int i,j,l=1,r=0;
	for(i=0;i<=deep;++i){
		while(l<=r && val[a[i]]>val[a[q[r]]])r--;
		q[++r]=i;
		while(i-q[l]+1>R-L+1)l++;
		great[i]=q[l];
	}
	for(i=deep;i>=0;--i){
		if(i==deep || val[a[i]]>val[a[great2[i+1]]])great2[i]=i;
		else great2[i]=great2[i+1];
	}
}
void work(int x){
	if(ans>=0)return;
	int i,deep,j,k,maxdeep,res,y;
	vector <pr>vp;
	x=getroot(x);
	bo[x]=1;
	for(i=head[x];i;i=next[i])if(!bo[e[i]]){
		getroot(e[i]); //just for get size
		val[e[i]]=(c[i]>=mid?1:-1);
		dep[e[i]]=1;
		vp.push_back(mk(size[e[i]],e[i]));
	}
	sort(vp.begin(),vp.end());
	dep[x]=0; val[x]=0; a[0]=x; maxdeep=deep=0;
	for(i=0;i<vp.size();++i){
		tot=0;
		dfs(vp[i].se,x);
		pret(deep);
		for(j=1;j<=tot;++j){
			y=b[j];
			k=dep[y];
			maxdeep=max(maxdeep,k);
			if(R-k<0 || L-k>deep)continue;
			if(R-k>deep)res=a[great2[max(0,L-k)]];
			else res=a[great[R-k]];
			if(val[y]+val[res]>ans){
				ans=val[y]+val[res];
				ans1=y;
				ans2=res;
			}
		}
		for(j=deep+1;j<=maxdeep;++j)a[j]=0;
		for(j=1;j<=tot;++j){
			y=dep[b[j]];
			if(a[y]==0 || val[b[j]]>val[a[y]])
				a[y]=b[j];
		}
		deep=max(deep,maxdeep);
	}
	for(i=head[x];i;i=next[i])if(!bo[e[i]])work(e[i]);
}
bool check(){
	ans=-1;
	memset(bo,0,sizeof(bo));
	work(1);
	return ans>=0;
}
int main(){
	val[0]=-1000000;
	scanf("%d%d%d",&n,&L,&R);
	for(i=1;i<n;++i){
		scanf("%d%d%d",&x,&y,&k);
		next[++len]=head[x]; head[x]=len; e[len]=y; c[len]=k;
		next[++len]=head[y]; head[y]=len; e[len]=x; c[len]=k;
		po[i]=k;
	}
	sort(po+1,po+n);
	l=1; r=n-1;
	while(l<=r){
		mid=po[(l+r)/2];
		if(check())l=(l+r)/2+1;
		else r=(l+r)/2-1;
	}
	mid=po[l-1];
	check();
	printf("%d %d\n",ans1,ans2);
}
