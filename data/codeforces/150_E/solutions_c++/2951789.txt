#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int n=100005;
int i,N,L,R,l,r,mid,e,len,Len,x,y,cnt,Cnt,Num,All,s,res;
int A[n],B[n],C[n],son[n],fa[n],Q[n],V[n];
int Size[n],f[n],F[n],g[n],G[n],w[n],W[n];
int st[2*n],ed[2*n],cost[2*n],next[2*n],pre[2*n];
struct node
{
	int X,len,E;
}P[n];
int Min(int a,int b)
{
	if(a<b) return a;
	return b;
}
int Max(int a,int b)
{
	if(a>b) return a;
	return b;
}
int Cmp(const node &i,const node &j)
{
	return i.len<j.len;
}
void Addedge(int i,int j,int k)
{
	st[++e]=i,ed[e]=j,cost[e]=k,pre[son[i]]=e,next[e]=son[i],son[i]=e;
	st[++e]=j,ed[e]=i,cost[e]=k,pre[son[j]]=e,next[e]=son[j],son[j]=e;
}
void GetSize(int i)
{
	int j;
	Size[i]=1;
	for(j=son[i];j;j=next[j])
	{
		if(ed[j]==fa[i]) continue;
		fa[ed[j]]=i,GetSize(ed[j]),Size[i]+=Size[ed[j]];
	}
}
void GetPoint(int i)
{
	int j;
	for(j=son[i];j;j=next[j])
	{
		if(ed[j]==fa[i]) continue;
		GetPoint(ed[j]);
	}
	res=All-Size[i];
	for(j=son[i];j;j=next[j])
	{
		if(ed[j]==fa[i]) continue;
		if(Size[ed[j]]>res) res=Size[ed[j]];
	}
	if(res<s) s=res,x=i;
}
int GetCentre(int i)
{
	fa[i]=0,x=i,s=100000000;
	GetSize(i),All=Size[i],GetPoint(i);
	return x;
}
void Calc(int i,int v,int d,int last)
{
	int j;
	if(d>Len) Len=d;
	if(w[d]!=cnt||v>g[d]) w[d]=cnt,g[d]=v,G[d]=i;
	for(j=son[i];j;j=next[j])
	{
		if(ed[j]==last) continue;
		Calc(ed[j],v+cost[j],d+1,i);
	}
}
bool Dp(int i)
{
	int j,k,p,l,r;
	++Cnt,Num=0;
	for(j=son[i];j;j=next[j])
	{
		Len=0,++cnt;
		Calc(ed[j],cost[j],1,i);
		P[++Num].X=ed[j],P[Num].len=Len,P[Num].E=cost[j];
	}
	sort(P+1,P+Num+1,Cmp);
	f[0]=0,F[0]=i,W[0]=Cnt;;
	for(j=1;j<=Num;++j)
	{
		Len=0,++cnt;
		Calc(P[j].X,P[j].E,1,i);
		l=1,r=1;
		Q[1]=p=Min(P[j-1].len,R);
		if(W[p]!=Cnt) W[p]=Cnt,f[p]=-1000000000;
		g[0]=0,G[0]=i;
		for(k=Max(0,L-P[j-1].len);k<=Min(P[j].len,R);++k)
		{
			for(;l<=r&&Q[l]>R-k;++l);
			for(;p>=0&&p-1>=L-k;--p)
			{
				if(W[p-1]!=Cnt) continue;
				for(;r>=l&&f[p-1]>=f[Q[r]];--r);
				Q[++r]=p-1;
			}
			if(l<=r&&f[Q[l]]+g[k]>=0)
			{
				x=F[Q[l]],y=G[k];
				return 1;
			}
		}
		for(k=0;k<=P[j].len;++k)
			if(W[k]!=Cnt||g[k]>f[k])
				W[k]=Cnt,f[k]=g[k],F[k]=G[k];
	}
	return 0;
}
void Del(int j)
{
	if(son[st[j]]==j) son[st[j]]=next[j];
	if(next[j]) pre[next[j]]=pre[j];
	if(pre[j]) next[pre[j]]=next[j];
}
bool Work(int i)
{
	int C,j;
	C=GetCentre(i);
	x=y=0;
	if(Dp(C)) return 1;
	for(j=son[C];j;j=next[j])
		Del(j^1);
	for(j=son[C];j;j=next[j])
		if(Work(ed[j])) return 1;
	return 0;
}
bool Check(int mid)
{
	int i;
	e=1;
	for(i=1;i<=N;++i) son[i]=0;
	for(i=1;i<N;++i)
		if(C[i]>=mid) Addedge(A[i],B[i],1);
		else Addedge(A[i],B[i],-1);
	return Work(1);
}
int main()
{
	scanf("%d%d%d",&N,&L,&R);
	for(i=1;i<N;++i) scanf("%d%d%d",&A[i],&B[i],&C[i]);
	for(i=1;i<N;++i) V[i]=C[i];
	sort(V+1,V+N);
	for(l=1,r=N-1;l<r;)
	{
		mid=(l+r+1)/2;
		if(Check(V[mid])) l=mid;
		else r=mid-1;
	}
	mid=(l+r+1)/2;
	Check(V[mid]);
	printf("%d %d\n",x,y);
	return 0;
}
