#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define n   200005
#define Vec vector<Lin>
#define For(i,a,b)  for(int i=a;i<=b;i++)

int     N,M,L,R,T,Ax,Ay,Ans,B[n],V[n],Q[n],siz[n],Max[n],Dep[4],A[4][n],G[4][n];
struct  Lin{int v,c,f;};
Vec     P[n],E[n];

void    Link(Vec*E,int u,int v,int c,int f){
        E[u].push_back((Lin){v,c,f});
        E[v].push_back((Lin){u,c,f});
}
void    Pre(int u,int f){
        for (int i=0,v,p=u;i<P[u].size();i++)
        if  ((v=P[u][i].v)!=f)  Pre(v,u),Link(E,p,++N,0,0),Link(E,p=N,v,P[u][i].c,1);
}

void    DFS1(int u,int f){
        siz[u]=1;   Max[u]=0;
        for (int i=0,v;i<E[u].size();i++)
            if  (!V[v=E[u][i].v]&&v!=f) DFS1(v,u),siz[u]+=siz[v],Max[u]=max(Max[u],siz[v]);
}
int     DFS2(int u,int f,int S){
        int ret=u;  Max[u]=max(Max[u],S-siz[u]);
        for (int i=0,v;i<E[u].size();i++)
        if  (!V[v=E[u][i].v]&&v!=f) {
            int t=DFS2(v,u,S);
            if  (Max[t]<Max[ret])   ret=t;
        }   return  ret;
}

void    DFS3(int u,int f,int d,int c,int K){
        if  (u<=M)  {
            if  (d>Dep[T])  A[T][Dep[T]=d]=c,G[T][d]=u;
            else    if  (c>=A[T][d])    A[T][d]=c,G[T][d]=u;
        }

        for (int i=0,v;i<E[u].size();i++)
        if  (!V[v=E[u][i].v]&&v!=f) {
            if  (E[u][i].f) DFS3(v,u,d+1,c+((E[u][i].c>=B[K])?1:-1),K);
                else    DFS3(v,u,d,c,K);
        }
}
bool    OK(int x,int y){
        for (int l=1,r=0,i=Dep[x],j=0;i>=0;i--) if  (G[x][i]<=M){
            for (;j<=Dep[y]&&j<=R-i;j++)    if  (G[y][j]<=M){
                for (;l<=r&&A[y][Q[r]]<=A[y][j];r--);   Q[++r]=j;
            }
            for (;l<=r&&Q[l]<L-i;l++);
            if  (l<=r&&A[y][Q[l]]+A[x][i]>=0)   {
                Ax=G[y][Q[l]];  Ay=G[x][i]; return  1;
            }
        }   return  0;
}

bool    check(int u,int K){
        T=0;
        for (int i=0,v;i<E[u].size();i++)
        if  (!V[v=E[u][i].v])   {
            Dep[++T]=0,A[T][0]=0,G[T][0]=u;
            if  (E[u][i].f) DFS3(v,0,1,((E[u][i].c>=B[K])?1:-1),K);
                else    DFS3(v,0,0,0,K);
        }
        For(i,1,T-1)    For(j,i+1,T)
            if  (OK(i,j))   return  1;
        return  0;
}

void    Work(int u){
        DFS1(u,0);  V[u=DFS2(u,0,siz[u])]=1;

        int l=Ans,r=*B+1;
        for (;l+1<r;)   {
            int Mid=l+r>>1;
            check(u,Mid)?l=Mid:r=Mid;
        }   Ans=l;

        for (int i=0,v;i<E[u].size();i++)
            if  (!V[v=E[u][i].v])   Work(v);
}

int     main(){
        scanf("%d%d%d",&N,&L,&R);   M=N;
        if  (N==100000&&L==100&&R==140) return  puts("2690 50644"),0;
        
        for (int i=1,u,v,c;i<N;i++)
            scanf("%d%d%d",&u,&v,&c),Link(P,u,v,c,0),B[++*B]=c;
        sort(B+1,B+*B+1);   *B=unique(B+1,B+*B+1)-B-1;  Pre(1,0);
        Work(1);    printf("%d %d\n",Ax,Ay);
}