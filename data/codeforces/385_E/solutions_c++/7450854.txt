#include <string.h>
#include <stdio.h>
#include <iostream>
#include <vector> 
#include <queue>
#include <algorithm>
#include <set>
#include <map>
#include <time.h>
#define ll long long
using namespace std;
const int N=6;
ll n;
struct node
{
	ll a[N][N];
	void clear(int x)
	{
		memset(a,0,sizeof(a));
		if(x)for(int i=0;i<N;i++)a[i][i]=1; 
	}
	void init()
	{
		memset(a,0,sizeof(a));
		a[0][0]=a[0][2]=a[1][1]=a[1][3]=1;
		for(int i=0;i<N;i++) a[2][i]=a[3][i]=1;
			a[2][2]=a[3][3]=a[2][5]=a[3][5]=2;
		a[4][4]=a[4][5]=a[5][5]=1;
	}
	node operator *(const node t) const
	{
		node ret;ret.clear(0);
		for(int i=0;i<N;i++)
		for(int j=0;j<N;j++)
		{

			for(int k=0;k<N;k++)
			ret.a[i][j]=(ret.a[i][j]+a[i][k]*t.a[k][j]%n)%n;
		}
		return ret;
	}
};
#define ll long long
ll sx,sy,dx,dy;
ll t;
node Pow(node a,ll b)
{
	node ret;ret.clear(1);
	while(b)
	{
		if(b&1) ret=ret*a;
		b>>=1;
		a=a*a;
	}
	return ret;
}
ll ans[N];
const int K=1e9;
int main()
{
	cin>>n>>sx>>sy>>dx>>dy>>t;
	sx--;sy--;
	dx=(dx+sx+sy+2+n*K)%n;
	dy=(dy+sx+sy+2+n*K)%n;
	node it;it.init();
	node  key=Pow(it,t);
	ll ar[N];
	ar[0]=sx;ar[1]=sy;
	ar[2]=dx;ar[3]=dy;
	ar[4]=ar[5]=1;
	for(int i=0;i<2;i++)
	{
		for(int j=0;j<N;j++)
			ans[i]=(ans[i]+key.a[i][j]*ar[j]%n)%n;
	}
	printf("%lld %lld\n",ans[0]+1,ans[1]+1);
}