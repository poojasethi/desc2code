#include <bits/stdc++.h>
//Damned if I don't take what I want.

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pii;

const int MAXB = 64, T = 6;

ll trans[T][T] = { // tx, ty, dx, dy, mushroom, 1
 {2, 1, 1, 0, 1, 2},
 {1, 2, 0, 1, 1, 2},
 {1, 1, 1, 0, 1, 2},
 {1, 1, 0, 1, 1, 2},
 {0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 1} };

ll v[T], tmp[T][T], ans[T][T], fin[T];
ll t, n;

inline void mul(ll des[][T], ll a[][T], ll b[][T]){
	memset(des, 0, sizeof trans);
	for (int i = 0; i < T; i++)
		for (int k = 0; k < T; k++)
			for (int j = 0; j < T; j++){
				des[i][j] += a[i][k] * b[k][j];
				des[i][j] %= n;
			}
}


int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	cin >> n >> v[0] >> v[1] >> v[2] >> v[3] >> t;
	while (v[2] < 0) v[2] += n;
	while (v[3] < 0) v[3] += n;
	v[0]--; v[1]--;
	v[4] = 0; v[5] = 1;

	for (int i = 0; i < T; i++) ans[i][i] = 1;

	for (int i = 0; i < 63; i++){
		if (t >> i & 1){
			memcpy(tmp, ans, sizeof ans);
			mul(ans, tmp, trans);
		}

		memcpy(tmp, trans, sizeof trans);
		mul(trans, tmp, tmp);
	}

	for (int i = 0; i < T; i++)
		for (int j = 0; j < T; j++){
			fin[i] += ans[i][j] * v[j];
			fin[i] %= n;
		}

	cout << fin[0] + 1<< " " << fin[1] + 1<< endl;
	//cout << ((ans.first + sx + 1) % n) + 1 << " " << ((ans.second + sy + 1) % n) + 1<< endl;
}

