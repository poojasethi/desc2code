#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
const int N=6;
int n;
struct Matrix
{
	int a[N][N];
};
Matrix operator * (const Matrix &x1,const Matrix &x2)
{
	Matrix y;
	int i,j,k;
	for (i=0;i<N;i++)
	{
		for (j=0;j<N;j++)
		{
			long long c=0;
			for (k=0;k<N;k++)
			{
				c+=(long long)x1.a[i][k]*x2.a[k][j];
			}
			c%=n;
			y.a[i][j]=c;
		}
	}
	return y;
}
Matrix unit,k;
void init()
{
	static int a0[N][N]={
		{2,1,1,0,1,0},
		{1,2,0,1,1,0},
		{1,1,1,0,1,0},
		{1,1,0,1,1,0},
		{0,0,0,0,1,1},
		{0,0,0,0,0,1}
	};
	int i,j;
	for (i=0;i<N;i++)
	{
		for (j=0;j<N;j++)
		{
			unit.a[i][j]=i==j;
			k.a[i][j]=a0[i][j];
		}
	}
}
Matrix power(Matrix a,long long n)
{
	if (n==0)
	{
		return unit;
	}
	Matrix y;
	if (n%2==1)
	{
		y=a;
	}
	else
	{
		y=unit;
	}
	Matrix w=power(a,n/2);
	y=y*(w*w);
	return y;
}
Matrix ms,me;
void fix(int &x)
{
	if (x<0)
	{
		x+=n;
	}
	x%=n;
}
int main()
{
	ios::sync_with_stdio(false);
	init();
	int sx,sy,dx,dy;
	long long t;
	cin>>n>>sx>>sy>>dx>>dy>>t;
	fix(sx);
	fix(sy);
	fix(dx);
	fix(dy);
	ms.a[0][0]=sx;
	ms.a[1][0]=sy;
	ms.a[2][0]=dx;
	ms.a[3][0]=dy;
	ms.a[4][0]=0;
	ms.a[5][0]=1;
	me=power(k,t)*ms;
	int xe=me.a[0][0];
	int ye=me.a[1][0];
	if (xe==0)
	{
		xe=n;
	}
	if (ye==0)
	{
		ye=n;
	}
	cout<<xe<<' '<<ye<<endl;
	return 0;
}
