#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;
typedef vector< vector<ll> > Matrix;
typedef vector<ll> Vec;

ll n, dx, dy, sx, sy, t;
ll kbase[6][6] = {
	1, 0, 1, 0, 0, 0,
	0, 1, 0, 1, 0, 0,
	1, 1, 2, 1, 0, 0,
	1, 1, 1, 2, 0, 0,
	1, 1, 1, 1, 1, 0,
	2, 2, 2, 2, 1, 1
};
Matrix base, good;

Vec mult(const Vec &a, const Matrix &b)
{
	Vec res(6);
	for (int i = 0; i < 6; ++i)
		for (int j = 0; j < 6; ++j)
			res[i] = (res[i] + a[j] * b[j][i] % n) % n;
	return res;
}

Matrix mult(const Matrix &a, const Matrix &b)
{
	Matrix res(6, Vec(6));
	for (int i = 0; i < 6; ++i)
		for (int j = 0; j < 6; ++j)
			for (int k = 0; k < 6; ++k)
				res[i][j] = (res[i][j] + a[i][k] * b[k][j] % n) % n;
	return res;
}

Matrix binPow(Matrix a, ll deg)
{
	Matrix res = good;
	while (deg > 0)
	{
		if (deg & 1) res = mult(res, a);
		a = mult(a, a);
		deg >>= 1;
	}
	return res;
}

int main()
{
	//freopen("input.txt", "r", stdin);
	cin >> n >> sx >> sy >> dx >> dy >> t;
	base.assign(6, Vec(6)); 
	good.assign(6, Vec(6));
	for (int i = 0; i < 6; ++i)
		for (int j = 0; j < 6; ++j)
			base[i][j] = kbase[i][j];
	for (int i = 0; i < 6; ++i)
		good[i][i] = 1;
	Vec a(6);
	a[0] = (dx % n + n) % n; 
	a[1] = (dy % n + n) % n;
	a[2] = sx - 1; 
	a[3] = sy - 1;
	a[4] = 0; 
	a[5] = 1;
	base = binPow(base, t);
	a = mult(a, base);
	cout << a[2] + 1 << " " << a[3] + 1;

	return 0;
}
