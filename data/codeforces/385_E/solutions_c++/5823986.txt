#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
typedef long long ll;
ll powmat[6][6]={
{2,1,1,1,0,0},
{1,2,1,1,0,0},
{1,0,1,0,0,0},
{0,1,0,1,0,0},
{1,1,1,1,1,0},
{0,0,0,0,1,1}
};
ll mod,t;
struct Matrix{
  ll mat[6][6];
  int n,m;
  Matrix(int _n,int _m):n(_n),m(_m){
    memset(mat,0,sizeof(mat));
  }
  void unit(){
    for (int i=0;i<n;i++) mat[i][i]=1;
  }
  Matrix operator*(Matrix &a){
    Matrix c(n,a.m);
    for (int i=0;i<n;++i)
      for (int k=0;k<m;++k)
        if (mat[i][k])
        for (int j=0;j<a.m;++j){
          c.mat[i][j]+=mat[i][k]*a.mat[k][j]%mod;
          c.mat[i][j]=(c.mat[i][j]%mod+mod-1)%mod+1;
        }
    return c;
  }
}ans(1,6),a(6,6);

Matrix operator^(Matrix a,ll m){
  Matrix t(a.n,a.m);
  t.unit();
  for (;m;m>>=1){
    if (m&1) t=t*a;
    a=a*a;
  }
  return t;
}

int main(){
  scanf("%I64d",&mod);
  for (int i=0;i<4;++i) scanf("%I64d",&ans.mat[0][i]);
  scanf("%I64d",&t);
  ans.mat[0][5]=1;
  memcpy(a.mat,powmat,sizeof(powmat));
  a=a^t;
  ans=ans*a;
  printf("%I64d %I64d\n",ans.mat[0][0],ans.mat[0][1]);
  return 0;
}
