#include<cstdio>
#include<iostream>
#include<cstring>
using namespace std;
typedef long long ll;
struct Ret{
    ll mat[6][6];
};
const ll init[6][6]=
{
    {2,1,1,0,1,2},
    {1,2,0,1,1,2},
    {1,1,1,0,1,2},
    {1,1,0,1,1,2},
    {0,0,0,0,1,1},
    {0,0,0,0,0,1}
};
ll n,sx,sy,dx,dy,t;
Ret mul(const Ret & a, const Ret &b){
    Ret res;
    memset(res.mat,0,sizeof(res.mat));
    for(int i=0;i<6;i++){
        for(int j=0;j<6;j++){
            for(int k=0;k<6;k++){
                res.mat[i][j]+=a.mat[i][k]*b.mat[k][j];
                res.mat[i][j]%=n;
            }
        }
    }
    return res;
}
Ret pow(Ret &a,ll t){
    Ret res;
    memset(res.mat,0,sizeof(res.mat));
    for(int i=0;i<6;i++)res.mat[i][i]=1;
    while(t){
        if(t&1)res=mul(res,a);
        a=mul(a,a);
        t/=2;
    }
    return res;
}
int main(){
    cin>>n>>sx>>sy>>dx>>dy>>t;
    sx--;sy--;
    Ret base;
    memcpy(base.mat,init,sizeof(init));
    Ret ans=pow(base,t);
    /*
    for(int i=0;i<6;i++){
        for(int j=0;j<6;j++){
            printf("%d ",ans.mat[i][j]);
        }
        printf("\n");
    }
    */
    ll x,y;
    x=((ans.mat[0][0]*sx%n+ans.mat[0][1]*sy%n+ans.mat[0][2]*dx%n+ans.mat[0][3]*dy%n+ans.mat[0][5])%n+n)%n+1;
    y=((ans.mat[1][0]*sx%n+ans.mat[1][1]*sy%n+ans.mat[1][2]*dx%n+ans.mat[1][3]*dy%n+ans.mat[1][5])%n+n)%n+1;

    cout<<x<<' '<<y<<endl;
}
