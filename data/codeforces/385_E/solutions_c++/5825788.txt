#include <iostream>
#include <cstring>
using namespace std;
long long n;
struct mat
{
	long long x, y, t[10][10];
	mat(int _x, int _y)
	{
		x = _x;
		y = _y;
		for (int i = 0; i < x; i++)
			for (int j = 0; j < y; j++)
				t[i][j] = (i == j ? 1 : 0);
	}
};
mat mul(mat a, mat b)
{
	mat c(a.x, b.y);
	memset(c.t, 0, sizeof(c.t));
	for (int i = 0; i < a.x; i++)
		for (int j = 0; j < b.y; j++)
			for (int k = 0; k < b.y; k++)
				c.t[i][j] = (c.t[i][j] + a.t[i][k] * b.t[k][j] + n) % n;
	return c;
}
mat power(mat a, long long b)
{
	mat ans(a.x, a.y);
	while (b > 0)
	{
		if (b & 1)
			ans = mul(ans, a);
		b >>= 1;
		a = mul(a, a);
	}
	return ans;
}
long long next[6][6] = 
{
{2, 1, 1, 1, 0, 0},
{1, 2, 1, 1, 0, 0},
{1, 0, 1, 0, 0, 0},
{0, 1, 0, 1, 0, 0},
{1, 1, 1, 1, 1, 0},
{2, 2, 2, 2, 1, 1}
};
int main()
{
	ios::sync_with_stdio(false);
	long long x, y, dx, dy, t;
	cin >> n >> x >> y >> dx >> dy >> t;
	x--;
	y--;
	mat pow(6, 6);
	for (int i = 0; i < 6; i++)
		for (int j = 0; j < 6; j++)
			pow.t[i][j] = next[i][j];
	mat cur(1, 6);
	cur.t[0][0] = x;
	cur.t[0][1] = y;
	cur.t[0][2] = dx;
	cur.t[0][3] = dy;
	cur.t[0][4] = 0;
	cur.t[0][5] = 1;
	pow = power(pow, t);
	cur = mul(cur, pow);
	cout << cur.t[0][0] + 1 << " " << cur.t[0][1] + 1;
	return 0;
}
