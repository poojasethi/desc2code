#include<iostream>
#include<vector>
#include<cstdio>
#include<cstdlib>
#define foru(i,a,b) for(int i=a;i<=b;i++)
using namespace std;
const int maxn=int(1e6)+10;
int child[maxn][2];
vector<int> vec[maxn][2];
int n,c;
void failed() {
    cout <<"IMPOSSIBLE";
    exit(0);
}
void make(int x, int y, int le) {
    child[y][le]=x;
}
void print(int u) {
    if (child[u][1]!=0) print(child[u][1]);
    cout << u << ' ';
    if (child[u][0]!=0) print(child[u][0]);
}
int dfs(int u, int maxu){
    int lmax=0,lmin=n;
    foru(i,0,(int)vec[u][1].size()-1) {
        lmax=max(lmax,vec[u][1][i]);
        lmin=min(lmin,vec[u][1][i]);
    }
    int rmax=0,rmin=n;
    foru(i,0,(int)vec[u][0].size()-1) {
        rmax=max(rmax,vec[u][0][i]);
        rmin=min(rmin,vec[u][0][i]);
    }
    if (lmax==0&&rmax==0) {
        if (u==maxu) return u;
        make(u+1,u,1);
        return dfs(u+1,maxu);
    }
    if (lmax!=0) {
        if (lmin<u+1) failed();
        make(u+1,u,1);
        if (rmax==0) lmax=max(lmax,maxu);
        lmax=dfs(u+1,lmax);
    } else lmax=u;
    if (rmax!=0) {
        if (rmin<lmax+1) failed();
        make(lmax+1,u,0);
        rmax=dfs(lmax+1,max(rmax,maxu));
    } else rmax=u;
    return max(lmax,rmax);
}
int main() {
//    freopen("test.inp","r",stdin);
    cin >> n >> c;
    foru(i,1,c) {
        int x,y;
        char s[10];
        cin >> x >> y >> s;
        if (s[0]=='L') vec[x][1].push_back(y);
        else vec[x][0].push_back(y);
    }
    dfs(1,n);
    print(1);
}
