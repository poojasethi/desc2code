#include <cstdio>
#include <algorithm>
using namespace std;
#define fo(i,a,b) for (int i = (a); i < (b); i++)
#define N 1234567
#define IMP "IMPOSSIBLE"

int n, c, mx[N], mxr[N], mnr[N], a, b, ut, rch[N]; char str[12], hasl[N];
char slv(int at) {
	//printf("%d\n", at);
	if (at >= n) return 0;
	ut++;
	if (hasl[at]) {
		if (!slv(ut)) return 0;
	}
	if (ut > mnr[at]) return 0;
	if (mx[at] >= ut || mxr[at]) {
		rch[at] = ut;
		mx[ut] = max(mx[ut], max(mxr[at], mx[at]));
		if (!slv(ut)) return 0;
	}
	return 1;
}
void dfs(int at) {
	if (hasl[at]) dfs(at+1);
	printf("%d ", at+1);
	if (rch[at]) dfs(rch[at]);
}
int main() {
	scanf("%d %d", &n, &c);
	fo(i,0,n) mx[i] = i, mnr[i] = N;
	mx[0] = n-1;
	fo(i,0,c) {
		scanf("%d %d %s", &a, &b, str); a--; b--;
		if (b <= a) {
			puts(IMP); return 0;
		}
		if (str[0]=='L') {
			mx[a+1] = max(mx[a+1], b); hasl[a] = 1;
		}
		else {
			mxr[a] = max(mxr[a], b);
			mnr[a] = min(mnr[a], b);
		}
	}
	if (!slv(0)) {
		puts(IMP); return 0;
	}
	dfs(0);

	return 0;
}