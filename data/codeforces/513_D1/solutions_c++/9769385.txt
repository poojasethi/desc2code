#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

const int MAX_N = 1000000;
const int MAX_M = 100000;
const int INF = 0x3f3f3f3f;

int n, m;
int leR[MAX_N + 10], riL[MAX_N + 10], riR[MAX_N + 10];
int tag[MAX_N + 10], sn;

bool flag;

int work(int l, int r, int dep){
/*	if(dep > 0){
		for(int i = 0; i < dep; i ++)
			printf("|-");
	}
	printf("%d, %d\n", l, r);*/
	if(l > r || !flag)
		return r;
	int p = work(l + 1, max(leR[l], l), dep + 1);
	if(!flag)
		return 0;
	tag[++ sn] = l;
	if(p >= riL[l]){
		flag = false;
		return 0;
	}
//	printf("x%d %d: %d\n", l, r, p);
	p = max(p, work(p + 1, max(r, riR[l]), dep + 1));
//	printf("%d %d: %d\n", l, r, p);
	if(!flag)
		return 0;
	return p;
}

int main(){
#ifdef LOCAL
	freopen("test.in", "r", stdin);
	freopen("test.out", "w", stdout);
#endif
	scanf("%d%d", &n, &m);
	fill(leR + 1, leR + n + 1, -INF);
	fill(riL + 1, riL + n + 1, INF);
	fill(riR + 1, riR + n + 1, -INF);
	char s[20];
	for(int i = 0; i < m; i ++){
		int a, b;
		scanf("%d%d%s", &a, &b, s);
		if(b <= a){
			printf("IMPOSSIBLE\n");
			return 0;
		}
		if(s[0] == 'L')
			leR[a] = max(leR[a], b);
		else{
			riL[a] = min(riL[a], b);
			riR[a] = max(riR[a], b);
		}
	}
	flag = true;
	work(1, n, 0);
	if(flag){
		for(int i = 1; i <= n; i ++)
			printf("%d ", tag[i]);
		printf("\n");
	} else
		printf("IMPOSSIBLE\n");

	return 0;
}



