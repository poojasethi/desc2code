#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

typedef long long LL;

const int MAXN = 17;
const int MAXS = (1 << MAXN);

int fa_mask[MAXN];
int seq[MAXN];
bool used[MAXN];

LL f[MAXS];
int n, m;
LL k;

void init()
{
  cin >> n >> k >> m;
  k -= 2000;

  memset(fa_mask, 0, sizeof(fa_mask));
  for (int x, y, i = 0; i < m; ++i) {
    cin >> x >> y;
    --x; --y;
    fa_mask[x] |= (1 << y);
  }
}

LL cal(int bound) {
  f[0] = 1;
  for (int lab, limit = (1 << n), sta = 1; sta < limit; ++sta) {
    f[sta] = 0;
    lab = -1;
    for (int i = 0; i < n; ++i) lab += (sta & (1 << i)) > 0;
    for (int i = 0; i < n; ++i) {
      if ( (sta & (1 << i)) && !(sta & fa_mask[i]) && (bound < i || seq[i] == lab))
	f[sta] += f[sta ^ (1 << i)];
    }
  }

  return f[(1 << n)-1];
}

void solve()
{
  memset(seq, 255, sizeof(seq));

  if (k > cal(-1)) {
    cout << "The times have changed" << endl;
    return;
  }

  memset(used,0, sizeof(used));
  LL tmp;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      if (used[j]) continue;
      used[j] = 1;
      seq[i] = j;
      tmp = cal(i);

      if (tmp < k) {
	used[j] = 0;
	k -= tmp;
      } else 
	break;
    }
  }

  for (int i = 0; i < n; ++i)
    cout << seq[i] + 1 << (i == n-1 ? '\n' : ' ');
}

int main()
{
  init();
  solve();
  return 0;
}
