#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <cmath>
#include <set>
using namespace std;
typedef long long ll;

int n;
int req[16];
ll dp[(1<<16)];
int res[16];
bool used[16];

int bitcnt(int n)
{
	int res=0;
	while(n)
	{
		n=n&(n-1);
		res++;
	}
	return res;
}



ll solve(int cur)
{
	if(dp[cur]==-1)
	{
		int c=bitcnt(cur);
		if(c!=n)
		{
			int num=c;
			dp[cur]=0;
			for(int i=0;i<n;i++)
			{
				if(cur&(1<<i)) continue;
				if((res[i]==0||res[i]==num+1)&&(req[i]&cur)==req[i])
					dp[cur]+=solve(cur|(1<<i));
			}
		}
		else
			dp[cur]=1;
	}
	return dp[cur];
}

ll solve2(int mask)
{
	memset(dp,-1,sizeof(dp));
	return solve(mask);
}

int main()
{
	int m;
	ll y;
	cin>>n>>y>>m;
	while(m--)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		a--;
		b--;
		req[b]|=(1<<a);
	}
	y-=2001;
	memset(dp,-1,sizeof(dp));
//	printf("%lld\n",solve(0));
	if(solve(0)<=y)
		printf("The times have changed\n");
	else
	{
		int cmask=0;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				if(used[j]) continue;
				res[i]=j+1;
				used[j]=1;
				ll cnt=solve2(0);
				if(solve(0)>y)
				{
					cmask|=(1<<i);
					break;
				}
				else
					y-=solve(0);
				used[j]=0;
			}
		}
		for(int i=0;i<n;i++)
		{
			if(i!=0) putchar(' ');
			printf("%d",res[i]);
		}
	}
}
