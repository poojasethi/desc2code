#include<cstdio>
#include<cstdlib>
#include<algorithm>

using namespace std;

#define long long long

const int MAX_N = 18;
const int MAX_B = 1 << 16;

int n, m;
long y;
int chk[MAX_N];
int mem[MAX_B], r;
long dp[MAX_B];
int arr[MAX_N];
int ans[MAX_N];

inline void error(){
  printf("The times have changed\n");
  exit(0);
}

inline long OPT(int s, int x){
  if(x == n){
    return dp[s] = 1;
  }
  if(mem[s] != r){
    int st = arr[x] == -1? 0: arr[x];
    int ed = arr[x] == -1? n: arr[x] + 1;
    mem[s] = r;
    dp[s] = 0;
    for(int i = st; i < ed; i++){
      if(not ((1 << i) & s) and (chk[i] & s) == chk[i]){
	dp[s] += OPT(s | (1 << i), x + 1);
      }
    }
  }
  return dp[s];
}

int main(){
  scanf("%d %I64d %d", &n, &y, &m);
  y -= 2001;
  for(; m --> 0; ){
    int a, b;
    scanf("%d %d", &a, &b);
    chk[--b] |= 1 << --a;
  }
  
  fill_n(arr, sizeof(arr) / sizeof(int), -1);
  int s = 0;
  for(int i = 0, j; i < n; i++){
    for(j = 0; j < n; j++){
      if((1 << j) & s){
	continue;
      }
      arr[j] = i;
      r++;
      OPT(0, 0);
      if(y - dp[0] >= 0){
	y -= dp[0];
	arr[j] = -1;
      }
      else{
	s |= 1 << j;
	break;
      }
    }
    if(j == n){
      error();
    } 
  }
  if(y > 0){
    error();
  }

  for(int i = 0; i < n; i++){
    ans[arr[i]] = i;
  }
  for(int i = 0; i < n; i++){
    printf("%d ", ans[i] + 1);
  }
}
