#include<cstdio>
#include<cstring>
#include<iostream>
using namespace std;

const int maxn=16;
typedef long long int64;

int n,m,now,pos;
int64 kth,f[1<<maxn];
int limit[maxn],ans[maxn],can[maxn],tot[1<<maxn],flag[1<<maxn];

void init()
{
	int x,y;
	cin>>n>>kth>>m;
	memset(tot,0,sizeof(tot));
	memset(limit,0,sizeof(limit));
	for (int i=0; i<m; i++)
	{
		cin>>x>>y;
		--x; --y;
		limit[y]|=1<<x;
	}
	for (int i=0; i<(1<<n); i++) tot[i]=tot[i>>1]+(i&1);
}

int64 dp(int mask)
{
	if (mask==(1<<n)-1) return 1;

	if (flag[mask]!=now)
	{
		int next=tot[mask];
		if (can[next]==-1)
		{
			f[mask]=0;
			for (int i=pos+1; i<n; i++)
				if ((mask & (1<<i))==0 && ((mask & limit[i])==limit[i]))
					f[mask]+=dp(mask^(1<<i));
		} else
		{
			f[mask]=0;
			if ((mask & limit[can[next]])==limit[can[next]])
				f[mask]+=dp(mask^(1<<can[next]));
		}
		flag[mask]=now;
	}
	return f[mask];
}

void solve()
{
	now=0; pos=-1; kth-=2000; 
	memset(flag,255,sizeof(flag));
	memset(can,255,sizeof(can));
	if (dp(0)<kth)
	{
		cout<<"The times have changed"<<endl;
	} else
	{
		for (int i=0; i<n; i++)
		{
			pos=i; 
			for (int j=0; j<n; j++)
				if (can[j]==-1)
				{
					++now; can[j]=i;
					int64 tmp=dp(0);
					if (tmp<kth) kth-=tmp; else
					{
						ans[i]=j;
						break;
					}
					can[j]=-1;
				}
		}
		for (int i=0; i<n; i++)
			cout<<ans[i]+1<<(i==n-1?'\n':' ');
	}
}

int main()
{
	init();
	solve();
	return 0;
}
