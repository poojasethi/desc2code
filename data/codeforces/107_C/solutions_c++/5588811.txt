#include <bits/stdc++.h>
#define MAX_N 17
using namespace std;

typedef long long int lld;

int n, m, a, b, smaller[MAX_N];
int plc[MAX_N], ans[MAX_N], used;
lld y, dp[MAX_N][(1 << MAX_N)];

bool bitOn(int mask, int id){
  return (mask & (1 << id));
}

lld count(int px){
  memset(dp, 0, sizeof dp);
  dp[0][0] = 1;
  for(int i = 0; i < n; i ++)
    for(int j = 0; j < (1 << n); j ++)
      if(dp[i][j])
	for(int k = 0; k < n; k ++)
	  if(!bitOn(j, k) && (plc[i] == -1 || plc[i] == k) && (j & smaller[k]) == smaller[k])
	    dp[i + 1][(j | (1 << k))] += dp[i][j];
  return dp[n][(1 << n) - 1];
}

int main(){

  scanf("%d %I64d %d", &n, &y, &m);

  y -= 2001;
  memset(smaller, 0, sizeof smaller);
  memset(plc, -1, sizeof plc);

  for(int i = 0; i < m; i ++){
    scanf("%d %d", &a, &b);
    a --; b --;
    smaller[b] |= 1 << a;
  }
  
  if(count(0) <= y){
    printf("The times have changed\n");
    return 0;
  }

  used = 0;
  for(int i = 0; i < n; i ++)
    for(int j = 0; j < n; j ++)
      if(!bitOn(used, j)){
	ans[i] = j;
	plc[j] = i;
	lld cnt = count(i + 1);
	if(cnt <= y){
	  y -= cnt;
	  plc[j] = -1;
	}
	else{
	  used |= 1 << j;
	  break;
	}
      }

  for(int i = 0; i < n; i ++){
    if(i > 0) printf(" ");
    printf("%d", ans[i] + 1);
  }
  printf("\n");

  return 0;
}
