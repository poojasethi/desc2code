#include <iostream>
#include <vector>
#include <queue>
#include <cstdio>
#define N 1001
#define OO (1LL<<61)
using namespace std;
long long n, m, x, y;
long long dis[N], t[N], c[N];
vector< pair<long long ,long long> >adj[N], fadj[N];
void dijkstra(int S){
    fill(dis, dis + N, OO);
    priority_queue< pair<long long, long long> >q;
    q.push(make_pair(S, 0));
    dis[S] = 0;
    while (!q.empty()){
        pair<long long, long long>x = q.top();
        q.pop();
        for (int i = 0; i < adj[x.first].size(); i++){
            if (dis[x.first] + adj[x.first][i].second < dis[adj[x.first][i].first]){
                dis[adj[x.first][i].first] = dis[x.first] + adj[x.first][i].second;
                q.push(adj[x.first][i]);
            }
        }
    }
}
int main(){
    cin >> n >> m >> x >> y;
    for (int i = 0; i < m; i++){
        long long a, b, w;
        cin >> a >> b >> w;
        adj[a].push_back(make_pair(b, w));
        adj[b].push_back(make_pair(a, w));
    }
    for (int i = 1; i <= m; i++)
        cin >> t[i] >> c[i];
    for (int i = 1; i <= n; i++){
        dijkstra(i);
        for (int j = 1; j <= n; j++){
            if (i == j) continue;
            if (t[i] >= dis[j])
                fadj[i].push_back(make_pair(j, c[i]));
        }
    }
    for (int i = 1; i <= n; i++)
        adj[i] = fadj[i];
    dijkstra(x);
    cout << (dis[y] == OO ? -1 : dis[y]);
    //system("pause");
}
    