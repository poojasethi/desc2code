//In the name of God
#include <iostream>
#include <vector>
#include <set>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, int> pli;
const ll oo = 1e18;

ll dis[1000];
int n, m, x, y, t[1000], c[1000];
vector<pii> adj[2][1000];

void dijkstra(int k, int v);

int main() {
	cin.sync_with_stdio(false);
	cin >> n >> m >> x >> y;
	x--, y--;
	for (int i = 0; i < m; i++) {
		int u, v, w;
		cin >> u >> v >> w;
		u--, v--;
		adj[0][u].push_back(pii(v, w));
		adj[0][v].push_back(pii(u, w));
	}
	for (int i = 0; i < n; i++)
		cin >> t[i] >> c[i];
	for (int i = 0; i < n; i++) {
		dijkstra(0, i);
		for (int j = 0; j < n; j++)
			if (i != j && dis[j] <= t[i])
				adj[1][i].push_back(pii(j, c[i]));
	}
	dijkstra(1, x);
	cout << (dis[y] < oo? dis[y]: -1) << '\n';
	return 0;
}
void dijkstra(int k, int v) {
	fill(dis, dis + n, oo);
	dis[v] = 0;
	set<pli> s;
	s.insert(pli(dis[v], v));
	while (!s.empty()) {
		v = s.begin() -> second;
		s.erase(pli(dis[v], v));
		for (int i = 0; i < adj[k][v].size(); i++) {
			int u = adj[k][v][i].first, w = adj[k][v][i].second;
			if (dis[v] + w < dis[u]) {
				s.erase(pli(dis[u], u));
				dis[u] = dis[v] + w;
				s.insert(pli(dis[u], u));
			}
		}
	}
}
 				    		   		  			   		