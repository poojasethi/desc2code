#include <iostream>
#include <algorithm>
#include <set>
#include <vector>

using namespace std;

const long long INF = 1ll << 62;

typedef vector< vector< pair<int,long long> > > graph;

vector<long long> dijkstra(graph& g, int i)
{
	vector<long long> d(g.size(), INF);
	d[i] = 0;
	
	set< pair<long long,int> > q;
	q.insert(make_pair(d[i], i));

	while (!q.empty())
	{
		int c = q.begin()->second;
		q.erase(q.begin());

		for (int j = 0; j < g[c].size(); j++)
		{
			int t = g[c][j].first;
			long long l = g[c][j].second;

			if (d[c] + l < d[t])
			{
				q.erase(make_pair(d[t], t));
				d[t] = d[c] + l;
				q.insert(make_pair(d[t], t));
			}
		}
	}

	return d;
}

int main(int argc, char* argv[])
{
	long long n, m, x, y;
	cin >> n >> m;
	cin >> x >> y;
	x--;
	y--;

	vector< pair<int,int> > t;
	graph g(n), r(n);
	
	for (int i = 0; i < m; i++)
	{
		int u, v, w;
		cin >> u >> v >> w;
		u--;
		v--;
		g[u].push_back(make_pair(v, w));
		g[v].push_back(make_pair(u, w));
	}
	
	for (int i = 0; i < n; i++)
	{
		int l, c;
		cin >> l >> c;
		t.push_back(make_pair(l, c));
	}

	for (int i = 0; i < n; i++)
	{
		vector<long long> d = dijkstra(g, i);

		for (int j = 0; j < n; j++)
			if (d[j] <= t[i].first)
				r[i].push_back(make_pair(j, t[i].second));
	}

	vector<long long> d = dijkstra(r, x);

	if (d[y] != INF)
		cout << d[y] << endl;
	else
		cout << -1 << endl;
		
	return 0;
}
