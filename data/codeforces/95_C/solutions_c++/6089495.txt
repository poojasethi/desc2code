#include <stdio.h>
#include <queue>
#include <iostream>
#include <string.h>
using namespace std;
#define N 1010
#define ll long long
#define INF 0x7fffffffffffffff
int head[N],to[N<<1],next[N<<1],c[N],t[N];
ll w[N<<1],g[N][N];
void insert(int i,int j,int k,ll w0)
{
	to[k]=j;
	w[k]=w0;
	next[k]=head[i];
	head[i]=k;
}
void spfa(int s,int n,ll * d)
{
	queue<int> q;
	bool inq[N];
	for(int i=1;i<=n;i++)d[i]=(i==s?0:INF);
	memset(inq,0,sizeof(inq));
	q.push(s);
	while(!q.empty())
	{
		int x=q.front();q.pop();
		inq[x]=false;
		for(int e=head[x];e!=-1;e=next[e])if(d[to[e]]>d[x]+w[e])
		{
			d[to[e]]=d[x]+w[e];
			if(!inq[to[e]])
			{
				inq[to[e]]=true;
				q.push(to[e]);
			}
		}
	}
}
ll dijkstra(int s,int e,int n)
{
	int v[N];
	ll d[N];
	memset(v,0,sizeof(v));
	for(int i=1;i<=n;i++)d[i]=(i==s?0:INF);
	for(int i=1;i<=n;i++)
	{
		int x;
		ll m=INF;
		for(int j=1;j<=n;j++)if(!v[j]&&d[j]<=m)m=d[x=j];
		v[x]=1;
		for(int j=1;j<=n;j++)if(!v[j]&&d[x]!=INF&&g[x][j]!=-1&&d[j]>d[x]+g[x][j])d[j]=d[x]+g[x][j];
	}
	return d[e]==INF?-1:d[e];
}
int main()
{
	int n,m,s,e,x,y,z,i,j;
	scanf("%d %d",&n,&m);
	scanf("%d %d",&s,&e);
	memset(head,-1,sizeof(head));
	for(i=0;i<m;i++)
	{
		scanf("%d %d %d",&x,&y,&z);
		insert(x,y,2*i,z);
		insert(y,x,2*i+1,z);
	}
	for(i=1;i<=n;i++)scanf("%d %d",&t[i],&c[i]);
	for(i=1;i<=n;i++)spfa(i,n,g[i]);
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		{
			if(g[i][j]>t[i])g[i][j]=-1;
			else g[i][j]=c[i];
		}
	cout<<dijkstra(s,e,n)<<endl;
	return 0;
}
									    	  			  			  	