#include <cstdio>
#include <algorithm>
#include <utility>
#include <iostream>
#include <vector>
#include <set>
#include <queue>
using namespace std;

const long long INF = 98765432123456789ll;
vector<pair<long long,int> > adj[1005];
vector<pair<long long,int> > adj2[1005];
int n,m,bg,ed;
long long D[1005];

void dijkstra(int s)
{
	for(int i=0;i<1005;i++)
	{
		D[i]=INF;
	}
	priority_queue<pair<long long,int> > PQ;
	D[s]=0;
	PQ.push(make_pair(0ll,s));
	while(!PQ.empty())
	{
		long long d=-PQ.top().first;
		int a=PQ.top().second;
		PQ.pop();
		if(d==D[a])
		{
			for(int i=0;i<adj[a].size();i++)
			{
				int b=adj[a][i].first;
				long long t1=d+adj[a][i].second;
				if(t1<D[b])
				{
					D[b]=t1;
					PQ.push(make_pair(-t1,b));
				}
			}
		}
	}
}

int main()
{
	scanf("%d%d%d%d",&n,&m,&bg,&ed);
	bg--;ed--;
	for(int i=0;i<m;i++)
	{
		int t2,t3,t4;
		scanf("%d%d%d",&t2,&t3,&t4);
		t2--;t3--;
		adj[t2].push_back(make_pair(t3,t4));
		adj[t3].push_back(make_pair(t2,t4));
	}
	for(int i=0;i<n;i++)
	{
		int t2,t3;
		scanf("%d%d",&t2,&t3);
		dijkstra(i);
		for(int j=0;j<n;j++)
		{
			if(D[j]<=t2)
			{
				adj2[i].push_back(make_pair(j,t3));
			}
		}
	}
	for(int i=0;i<n;i++)
	{
		adj[i]=adj2[i];
	}
	dijkstra(bg);
	printf("%I64d\n",(D[ed]!=INF)?D[ed]:-1ll);
	return 0;
}
