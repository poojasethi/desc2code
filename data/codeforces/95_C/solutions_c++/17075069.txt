#include <cstdio> 
#include <cstring>
#include <algorithm> 
#include <queue>
#include <vector>
using namespace std;
typedef __int64 ll;
const int N=1005;
const ll INF=1ll<<60;
struct P{
	ll v,cost;
	friend bool operator <(P o1,P o2){
		return o1.cost>o2.cost;
	}
};
int n,m,st,en;
bool used[N];
ll d[N][N],di[N],cos[N],dis[N];
vector<P> e[N];
void dij(int s){
	priority_queue<P> que;
	d[s][s]=0;
	que.push((P){s,0});
	while (!que.empty()){
		P lins=que.top();que.pop();
		if (d[s][lins.v]<lins.cost) continue ;
		for (int i=0;i<e[lins.v].size();i++){
			P ed=e[lins.v][i];
			if (d[s][ed.v]>d[s][lins.v]+ed.cost){
				d[s][ed.v]=d[s][lins.v]+ed.cost;
				que.push((P){ed.v,d[s][ed.v]});
			}
		}
	}
}
void run(){
	fill(dis,dis+N,INF);
	memset(used,0,sizeof(used));
	dis[st]=0;
	while (true){
		int v=-1;
		for (int i=1;i<=n;i++)
			if (!used[i]&&(v==-1||dis[i]<dis[v])) v=i;
		if (v==-1) break;
		used[v]=1;	
		for (int i=1;i<=n;i++)
			if (di[v]>=d[v][i])
				dis[i]=min(dis[i],dis[v]+cos[v]);
	}
}
int main(){
	int fr,to,co;
	scanf("%d%d",&n,&m);
	scanf("%d%d",&st,&en);
	for (int i=1;i<=n;i++)
		for (int j=1;j<=n;j++)
			d[i][j]=INF;
	for (int i=1;i<=m;i++) {
		scanf("%d%d%d",&fr,&to,&co);
		e[fr].push_back((P){to,co});
		e[to].push_back((P){fr,co});		
	}
	for (int i=1;i<=n;i++)
		scanf("%I64d%I64d",di+i,cos+i);
	for (int i=1;i<=n;i++)
		dij(i);
	run();
	if (dis[en]!=INF) printf("%I64d\n",dis[en]);
	else printf("-1\n");
	return 0;
}
 	 		  	  		 	  	 		    		    	