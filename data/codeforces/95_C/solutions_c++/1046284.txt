#include <iostream>
#include <queue>
#include <vector>
#include <map>
#include <algorithm>

#define rep(i,n) for(int i=0;i<n;i++)
#define pi pair<int,int>
#define ll long long
#define fs first
#define sd second
#define INF 1000000000000000LL

using namespace std;

int n,m,u,v,w,x,y,t,c;
ll d[1010];
vector<pi > g[1010],g2[1010];

void short_path(int i){

  rep(ii,n)d[ii]=INF;d[i]=0;
  priority_queue<pi > que;
  que.push(pi(0,i));
  while(!que.empty()){
    pi p=que.top();que.pop();
    v=p.second;
    if(d[v]<-p.first)continue;
    rep(ii,g[v].size()){
      pi e=g[v][ii];
      if(d[e.fs]>d[v]+e.sd){
    d[e.fs]=d[v]+e.sd;
    que.push(pi(-d[e.fs],e.fs));
      }
    }
  }
}

int main(){
  
  cin>>n>>m>>x>>y;
  rep(i,m){
    cin>>u>>v>>w;u--;v--;
    g[u].push_back(pi(v,w));
    g[v].push_back(pi(u,w));
  }
  rep(i,n){
    cin>>t>>c;
    short_path(i);
    rep(ii,n){
      if(i!=ii&&t>=d[ii])g2[i].push_back(pi(ii,c));
    }  
  }
  rep(i,n)g[i].clear();
  rep(i,n)rep(j,g2[i].size())g[i].push_back(g2[i][j]);

  short_path(x-1);

  cout<<(d[y-1]==INF?(-1):d[y-1])<<endl;


  return 0;
}
