#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;
vector< pair<long long,int> > adj[1005];
const long long inf=100000000000000LL;
long long dist[1005];
void dij(int s)
{
	 fill(dist,dist+1005,inf);
	 priority_queue< pair<long long,int> > q;
	 dist[s]=0;
	 q.push(make_pair(0,s));
	 while (!q.empty())
     {
		  int a=q.top().second;
		  long long d=-q.top().first;
		  q.pop();
		  if (d!=dist[a])
          {
			   continue;
		  }
		  for (int i=0;i<adj[a].size();i++)
          {
			   int b=adj[a][i].first;
			   long long t=d+adj[a][i].second;
		   	   if (t<dist[b])
               {
			 	    dist[b]=t;
				    q.push(make_pair(-t,b));
			   }
		  }
     }
}
vector< pair<long long,int> > adj2[1005];
int main()
{
	 int n,m,S,e;
	 cin>>n>>m>>S>>e;
	 S--;e--;
	 for (int i=0;i<m;i++)
     {
		  int a,b,d;
		  cin>>a>>b>>d;
		  a--;b--;
		  adj[a].push_back(make_pair(b,d));
		  adj[b].push_back(make_pair(a,d));
	 }
	 for (int i=0;i<n;i++)
     {
		  int d,c;
		  cin>>d>>c;
		  dij(i);
		  for (int j=0;j<n;j++)
          {
			   if(dist[j]<=d)
               {
				    adj2[i].push_back(make_pair(j,c));
			   }
		  }
	 }
	 for(int i=0;i<n;i++)
     {
		  adj[i]=adj2[i];
	 }
	 dij(S);
	 cout<<(dist[e]!=inf?dist[e]:-1);
	 return 0;
}
 	  		 	  	   		     			   	 		