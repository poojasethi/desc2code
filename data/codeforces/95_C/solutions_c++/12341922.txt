#include <bits/stdc++.h>

using namespace std;

typedef pair < long long, int > pii;

const long long linf = 1e18 + 9;
const int inf = 1e9 + 9;
const int N = 3e3 + 9;

vector < pii > gr[N], gr2[N];

long long dist[N], d[N][N];

int n, m, x, y, u, v, w, t, c;

bool hash[N];

void spfa(int sl) {
	for (int i = 1; i <= n; i++)
		dist[i] = linf;

	priority_queue < pii, vector < pii > , greater < pii > > q;
	dist[sl] = 0;
	q.push(make_pair(0, sl));
	
	while (!q.empty()) {
		int node = q.top().second;
		long long cost = q.top().first; q.pop();
		if (hash[node] == true) continue;
		hash[node] = true;
		for (int i = 0; i < gr[node].size(); i++) {
			if (cost + gr[node][i].second < dist[gr[node][i].first]) {
				dist[gr[node][i].first] = cost + gr[node][i].second;
				q.push(make_pair(cost + gr[node][i].second, gr[node][i].first));
			}
		}
	}
}

int main() {

	cin >> n >> m >> x >> y;
	
	for (int i = 1; i <= m; i++) {
		cin >> u >> v >> w;
		gr[u].push_back(make_pair(v, w));
		gr[v].push_back(make_pair(u, w));
	}

	for (int i = 1; i <= n; i++) {
		spfa(i);
		memset(hash, false, sizeof hash);
		for (int j = 1; j <= n; j++)
			d[i][j] = dist[j];
	}
	
	for (int i = 1; i <= n; i++)
		gr[i].clear();
	
	for (int i = 1; i <= n; i++) {
		cin >> t >> c;
		for (int j = 1; j <= n; j++)
 			if (d[i][j] <= t)
				gr[i].push_back(make_pair(j, c));
	}

	spfa(x);

	if (dist[y] == linf) cout << -1 << endl;
	else	cout << dist[y] << endl;
	
	return 0;
}
