from Queue import * # Queue, LifoQueue, PriorityQueue
from bisect import * #bisect, insort
from collections import * #deque, Counter,OrderedDict,defaultdict
#set([]) 
import math
import copy
import itertools
import string
import sys
myread = lambda : map(int,raw_input().split())
def solver():
    D,K,A,B,T = myread()

    #only walk
    ans = D * B
    cands = [ans]
    #1 car and walk rem
    if D >= K:
        ans2 = K * A + (D - K) * B
        cands.append(ans2)
    #only car
    repair_time = D / K
    if D % K == 0:
        repair_time -= 1
    ans3 = repair_time * T + D * A
    cands.append(ans3)
    #1 walk and
    if repair_time > 0:
        #print repair_time
        ans4 = (repair_time - 1) * T + (D - (repair_time) * K) * B + (repair_time) * K * A
        #print (repair_time - 1) * T ,(D - (repair_time) * K) * B , (repair_time) * K * A
        cands.append(ans4)
    #print cands
    print min(cands)

if __name__ == "__main__":
    solver()
    
