'''
Vasiliy has a car and he wants to get from home to the post office. The distance which he needs to pass equals to d kilometers.
Vasiliy's car is not new - it breaks after driven every k kilometers and Vasiliy needs t seconds to repair it. After repairing his car Vasiliy can drive again (but after k kilometers it will break again, and so on) In the beginning of the trip the car is just from repair station.
To drive one kilometer on car Vasiliy spends a seconds, to walk one kilometer on foot he needs b seconds (a?<?b).
Your task is to find minimal time after which Vasiliy will be able to reach the post office. Consider that in every moment of time Vasiliy can left his car and start to go on foot.
Input
The first line contains 5 positive integers d,k,a,b,t (1=<d=<10**12; 1=<k,a,b,t=<10**6; a<b), where:

d - the distance from home to the post office;
k - the distance, which car is able to drive before breaking;
a - the time, which Vasiliy spends to drive 1 kilometer on his car;
b - the time, which Vasiliy spends to walk 1 kilometer on foot;
t - the time, which Vasiliy spends to repair his car.
Output
Print the minimal time after which Vasiliy will be able to reach the post office.

Examples
input
5 2 1 4 10
output
14
input
5 2 1 4 5
output
13
'''

import os,re,sys,argparse, itertools


def do_parse_args():
    distance, kilometer, autodrivetime, byfoottime, repairtime = tuple(int(x.strip()) for x in raw_input().split(' '))
    # dictVal = {}
    # values = [val for val in itertools.product(xrange(distance+1),repeat=2) if (kilometer*val[0] + val[1]) == distance]
    # values = [val for val in itertools.product(iter(itertools.count(0).next, distance+1),repeat=2) if (kilometer*val[0] + val[1]) == distance]
    
    # for val in values:
        # timeRepairValue = val[0]-1 if val[0] > 1 else 0
        # totalTime = (val[0]*kilometer*autodrivetime) + timeRepairValue*repairtime + val[1]*byfoottime
        # dictVal[totalTime] = [val[0], timeRepairValue, val[1]]
        
    # leastVal = min(dictVal.keys())
    # print leastVal
    
    if kilometer > distance:
        print distance*autodrivetime
        return
        
    times = kilometer * autodrivetime
    distance -= kilometer
    
    if (kilometer*byfoottime < (repairtime + (kilometer * autodrivetime)) ):
        times += (distance*byfoottime)
    else:
        carDistance = distance/kilometer
        remain = distance % kilometer
        
        times += carDistance * (repairtime + (kilometer * autodrivetime)) + min(repairtime+autodrivetime*remain, remain*byfoottime)
        
    print times
    
    
    
    
    
   
def main(argv):

    status = 0

    try:
        do_parse_args()        
    except Exception as e:
        print "ERROR: " + str(e)
        status = 1

    finally:
        return status


if __name__ == "__main__":
    main(sys.argv)
    
    

