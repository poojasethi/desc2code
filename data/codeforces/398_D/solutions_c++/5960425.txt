#include <bits/stdc++.h>
using namespace std;

const int INF = 0x3f3f3f3f;
typedef long long ll;
typedef pair<int,int> pii;
#define MP make_pair
#define A first
#define B second

const int MAXN = 50050;
int N;
int online[MAXN], sum[MAXN];
set<int> with[MAXN]; // only has a few elements per node

void join(int a, int b)
{
    if (with[a].size() > with[b].size()) swap(a, b);
    with[a].insert(b);
    sum[b] += online[a];
}

void split(int a, int b)
{
    if (with[b].count(a)) swap(a, b);
    with[a].erase(b);
    sum[b] -= online[a];
}

void upd_offline(int a)
{
    online[a] = 0;
    for (set<int>::iterator it=with[a].begin(); it!=with[a].end(); it++)
        sum[*it]--;
}

void upd_online(int a)
{
    online[a] = 1;
    for (set<int>::iterator it=with[a].begin(); it!=with[a].end(); it++)
        sum[*it]++;
}

int solve(int a)
{
    int ret = sum[a];
    for (set<int>::iterator it=with[a].begin(); it!=with[a].end(); it++)
        ret += online[*it];
    return ret;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int m, q;
    cin >> N >> m >> q;
    int o; cin >> o;
    for (int i=0; i<o; i++)
    {
        int x; cin >> x, x--;
        online[x] = 1;
    }
    for (int i=0; i<m; i++)
    {
        int a, b; cin >> a >> b, a--, b--;
        join(a, b);
    }
    for (int i=0; i<q; i++)
    {
        char cmd; cin >> cmd;
        int u; cin >> u, u--;
        if (cmd == 'O')
            upd_online(u);
        else if (cmd == 'F')
            upd_offline(u);
        else if (cmd == 'C')
            cout << solve(u) << '\n';
        else
        {
            int v; cin >> v, v--;
            if (cmd == 'A')
                join(u, v);
            else
                split(u, v);
        }
    }
    return 0;
}
