#include<cstdio>
#include<cstring>
#include<set>
using namespace std;
const int MAXN=50005;
set<int> edge[MAXN];
set<int>::iterator it;
bool status[MAXN];
int cnt[MAXN];
int main() {
    int n,m,q,o,u,v,ans;
    char op;
    while(~scanf("%d%d%d",&n,&m,&q)) {
        scanf("%d",&o);
        memset(status,false,sizeof(status));
        for(int i=1; i<=n; ++i)
            edge[i].clear();
        memset(cnt,0,sizeof(cnt));
        while(o--) {
            scanf("%d",&u);
            status[u]=true;
        }
        while(m--) {
            scanf("%d%d",&u,&v);
            if(edge[u].size()>edge[v].size())
                swap(u,v);
            edge[u].insert(v);
            cnt[v]+=status[u];
        }
        while(q--) {
            scanf(" %c%d",&op,&u);
            switch(op) {
            case 'O':
                status[u]=true;
                for(it=edge[u].begin(); it!=edge[u].end(); ++it)
                    ++cnt[*it];
                break;
            case 'F':
                status[u]=false;
                for(it=edge[u].begin(); it!=edge[u].end(); ++it)
                    --cnt[*it];
                break;
            case 'A':
                scanf("%d",&v);
                if(edge[u].size()>edge[v].size())
                    swap(u,v);
                edge[u].insert(v);
                cnt[v]+=status[u];
                break;
            case 'D':
                scanf("%d",&v);
                if(edge[u].find(v)==edge[u].end())
                    swap(u,v);
                edge[u].erase(v);
                cnt[v]-=status[u];
                break;
            case 'C':
                ans=0;
                for(it=edge[u].begin(); it!=edge[u].end(); ++it)
                    ans+=status[*it];
                printf("%d\n",ans+cnt[u]);
                break;
            }
        }
    }
}
