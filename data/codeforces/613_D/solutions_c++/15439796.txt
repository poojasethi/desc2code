#include <bits/stdc++.h>
//Damned if I don't take what I want.

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 1e5 + 100, MAXB = 19;

vector<int> G[MAXN];
int h[MAXN], p[MAXN][MAXB];
int v[MAXN];
set<int> s;

void makeroot(int u, int par){
	//cerr << " -> " << u << ", " << par << endl;
	p[u][0] = par;
	if (par != -1) h[u] = h[par] + 1; else h[u] = 0;

	for (int i = 1; i < MAXB; i++)
		if (p[u][i-1] != -1) p[u][i] = p[ p[u][i - 1] ][ i-1 ];

	for (int i = 0; i  < G[u].size(); i++){
		int v = G[u][i];
		if (v != par) {
	//		cerr << u << ", " << par << " calling " << v << endl;
			makeroot(v, u);
		}
	}
}

int lca(int u, int v){
	if (h[u] < h[v]) swap(u, v);

	for (int i = MAXB - 1; i >= 0; i--)
		if (p[u][i] != -1 && h[ p[u][i] ] >= h[v])
			u = p[u][i];

	if (u == v) return u;

	for (int i = MAXB -1; i >= 0; i--)
		if (p[u][i] != p[v][i])
			u = p[u][i], v= p[v][i];

	return p[u][0];
}

int ans = 0;

int dfs(int u, int par){
	int down = 0;
	for (int i = 0; i < G[u].size(); i++){
		int v = G[u][i];
		if (v != par) {
			int temp = dfs(v, u);
			if (temp < 0) return temp;
			if (s.count(u) && s.count(v)) return ans = -1;
			down += temp;
		}
	}

	if (s.count(u)){
		ans += down;
		return 1;
	}else
		if (down > 1){
			ans++;
			return 0;
		} else return down;
	
}

vector<int> child[MAXN];
set<int> N[MAXN];
int clean[MAXN];
pii lc[MAXN];
int lcN;

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	int n; cin >> n;
	for (int i = 0; i < n - 1; i++){
		int u, v; cin >> u >> v;
		u--; v--;
		G[u].push_back(v); N[u].insert(v);
		G[v].push_back(u); N[v].insert(u);
	}

	memset(p, -1, sizeof p);
	memset(clean, -1, sizeof clean);
	makeroot(0, -1);

	int q; cin >> q;
	while( q-- ){
		//cerr << " ** " << q << endl;
		int k; cin >> k;
		for (int i = 0; i < k; i++) cin >> v[i], v[i]--;

		s.clear();
		for (int i = 0; i < k; i++) s.insert(v[i]);

		if (k > 250){
			ans = 0;
			dfs(0, -1);
			cout << ans << "\n";
		}else{
			lcN = 0; ans = 0;
			for (int i = 0; i < k && ans != -1; i++)
				for (int j = i + 1; j < k && ans != -1; j++){
					if (N[v[i]].count(v[j])){
						ans = -1;
						break;
					}

					int u = lca( v[i], v[j] );
					if (clean[u] != q){
						clean[u] = q;
						child[u].clear();
						lc[ lcN++ ] = pii(h[u], u);
					}

					child[u].push_back(v[i]);
					child[u].push_back(v[j]);
				}

			if (ans == -1){
				cout << "-1\n";
				continue;
			}

			
			sort(lc, lc + lcN, greater<pii>() );
			lcN = unique(lc, lc + lcN) - lc;

			for (int i = 0; i < lcN; i++){
				int u = lc[i].second;

				sort(child[u].begin(), child[u].end());
				child[u].resize(unique(child[u].begin(), child[u].end()) - child[u].begin());

				int sz = 0, f = - 1;
				for (int i = 0; i < child[u].size(); i++){
					int v = child[u][i]; 
					if (!s.count(v) || u == v) continue;

					sz++; f = v;
					s.erase(v);
				}

				if (s.count(u))
					ans += sz;
				else{
					if (sz > 1)
						ans++;
					else
						if (f != -1) s.insert(f);
				}
			}

			cout << ans << "\n";

		}
	}

}

