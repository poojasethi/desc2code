#include<cstdio>
#include<cmath>
#include<algorithm>
using namespace std;

const int maxn=100100;
int n,q,first[maxn],last[maxn*2],next[maxn*2],fa[maxn],tot,num,time[maxn],i;
int ll[maxn*2][20],rr[maxn*2][20],l[maxn],dep[maxn],s[maxn],stack[maxn];
bool flag[maxn];

void insert(int x,int y){
	if(x*y==0)return;
	++tot;
	last[tot]=y;
	next[tot]=first[x];
	first[x]=tot;
}

bool cmp(int a,int b){
	return l[a]<l[b];
}

bool cmp2(int a,int b){
	return dep[a]<dep[b];
}

void dfs(int x,int d){
	flag[x]=true;
	dep[x]=d;
	ll[++num][0]=x;
	l[x]=num;
	int i=first[x];
	while(i!=0){
		if(!flag[last[i]]){
			dfs(last[i],d+1);
			ll[++num][0]=x;
			fa[last[i]]=x;
		}
		i=next[i];
	}
}

int lca(int a,int b){
	int tmp;
	tmp=l[b]-l[a]+1;
	tmp=trunc(log(tmp)/log(2));
	//printf("len%d %d %d",a,b,tmp);
	if(cmp2(ll[l[a]][tmp],rr[l[b]][tmp]))tmp=ll[l[a]][tmp];
	else tmp=rr[l[b]][tmp];
	return tmp;
}

int dp(int x){
	int tmp=0,num=0,j=first[x];
	//printf("dfs%d\n",x);
	while(j!=0){
		//printf("%d %d\n",j,next[j]);
		tmp+=dp(last[j]);
		if(time[last[j]]==2*i)++num;
		j=next[j];
	}
	if(time[x]==2*i)tmp+=num;
	else
		if(num>1)++tmp;
		else if(num==1)time[x]=2*i;
	return tmp;
}

int main(){
	scanf("%d",&n);
	int x,y;
	for(i=1;i<n;i++){
		scanf("%d%d",&x,&y);
		insert(x,y);
		insert(y,x);
	}
	dfs(1,0);
	for(i=1;i<=num;i++)rr[i][0]=ll[i][0];
	for(i=1;1<<(i-1)<num;i++){
		for(x=1;num-x>=1<<(i-1);x++)
		if(cmp2(ll[x][i-1],ll[x+(1<<(i-1))][i-1]))ll[x][i]=ll[x][i-1];
		else ll[x][i]=ll[x+(1<<(i-1))][i-1];
		for(x=num-(1<<(i-1))+1;x<=num;x++)ll[x][i]=ll[x][i-1];
		for(x=1;num-x>=1<<(i-1);x++)
		if(cmp2(rr[x][i-1],rr[x+(1<<(i-1))][i-1]))rr[x+(1<<(i-1))][i]=rr[x][i-1];
		else rr[x+(1<<(i-1))][i]=rr[x+(1<<(i-1))][i-1];
		for(x=1;x<=1<<(i-1);x++)rr[x][i]=rr[x][i-1];
	}
	scanf("%d",&q);
	bool f;
	int tmp,now,lasti;
	for(i=1;i<=q;i++){
		scanf("%d",&x);
		for(y=1;y<=x;y++)scanf("%d",&s[y]);
		sort(s+1,s+1+x,cmp);
		f=true;y=x;
		stack[1]=s[1];now=1;
		for(x=1;x<=y;x++)time[s[x]]=2*i;
		tot=0;first[s[1]]=0;
		for(x=2;x<=y;x++){
			lasti=0;first[s[x]]=0;
			//printf("lca %d now %d\n",tmp,now);
			tmp=lca(stack[now],s[x]);
			if(time[tmp]==2*i && fa[s[x]]==tmp)f=false;
			if(!f)break;
			//printf("lca%d %d %d\n",stack[now],s[x],tmp);
			while(now>0 && dep[stack[now]]>dep[tmp])lasti=stack[now--];
			if(time[tmp]<i*2-1)time[tmp]=2*i-1,first[tmp]=0;
			if(stack[now]==tmp){
				insert(tmp,s[x]);
				//printf("insert %d %d\n",tmp,s[x]);
				//printf("first %d\n",s[1]);
				stack[++now]=s[x];
			}
			else{
				first[stack[now]]=next[first[stack[now]]];
				insert(stack[now],tmp);
				//printf("insert %d %d\n",stack[now],tmp);
				insert(tmp,lasti);
				//printf("insert %d %d\n",tmp,lasti);
				insert(tmp,s[x]);
				//printf("insert %d %d\n",tmp,s[x]);
				stack[++now]=tmp;
				stack[++now]=s[x];
			}
		}
		if(!f)printf("-1\n");
		else printf("%d\n",dp(stack[1]));
	}
	return 0;
}
