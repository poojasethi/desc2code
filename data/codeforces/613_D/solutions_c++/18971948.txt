#include<bits/stdc++.h>
using namespace std;
const int N=100005;
int start[N],cnt,l[N],p[N][20],ans,plan,w,n,u,v,q;
bool will[N],check[N],flag;
vector <int> G[N],E[N],tmp;

void dfs(int u,int par) {
    start[u]=cnt++;
    for(int i=0;i<G[u].size();i++) {
        int v=G[u][i]; if(v==par) continue;
        l[v]=l[u]+1; p[v][0]=u;
        dfs(v,u);
    }
    cnt++;
}

bool cmp(int u,int v) {
    return  start[u]<start[v];
}

int lca(int u,int v) {
    if(l[u] > l[v]) swap(u,v);
    for(int i = 17; i >= 0; --i) if(l[p[v][i]] >= l[u]) v = p[v][i];
    for(int i = 17; i >= 0; --i) if(p[u][i] != p[v][i]) u = p[u][i], v = p[v][i];
    return (u == v) ? u : p[u][0];
}

void solve(int u) {
    int num=0;
    for(int i=0;i<E[u].size();i++) {
        int v=E[u][i];
        solve(v); if(will[v]) num++;
    }
    if(check[u]) {
        ans+=num;
        will[u]=1;
    }
    else {
        if(num>=2) {
            ans++;
            will[u]=0;
        }
        else if(num==0) will[u]=0;
        else will[u]=1;
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin>>n;
    for(int i=1;i<n;i++) {
        cin>>u>>v;
        G[u].push_back(v);
        G[v].push_back(u);
    }
    p[1][0]=l[1]=1; dfs(1,0);
    for(int i=1;i<=17;i++) for(int j=1;j<=n;j++) p[j][i]=p[p[j][i-1]][i-1];
    cin>>q;
    while(q--) {
        tmp.clear(); flag=0; ans=0;
        cin>>plan;
        for(int i=1;i<=plan;i++) {
            cin>>w; tmp.push_back(w);
            check[w]=1;
        }
        sort(tmp.begin(),tmp.end(),cmp);
        for(int i=1;i<plan;i++) {
            if(check[p[tmp[i]][0]]) flag=1;
            tmp.push_back(lca(tmp[i],tmp[i-1]));
        }
        if(flag) {
            for(int j=0;j<tmp.size();j++) check[tmp[j]]=0;
            cout<<"-1\n"; continue;
        }
        sort(tmp.begin(),tmp.end(),cmp);
        tmp.resize(distance(tmp.begin(),unique(tmp.begin(),tmp.end())));
        for(int i = 1; i < tmp.size(); ++i) {
            int p = lca(tmp[i],tmp[i-1]);
            E[p].push_back(tmp[i]);
        }
        solve(tmp[0]);
        for(int i = 0; i < tmp.size(); ++i) { E[tmp[i]].clear(); check[tmp[i]] = 0; will[tmp[i]] = 0; }
        cout<<ans<<'\n';
    }
}




