#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;
const int maxn=100000+10;
const int INF=0x3f3f3f3f;
struct Edge{
    int next,v;
    Edge(){}
    Edge(int next,int v): next(next),v(v){}
}e[maxn<<1];
int n,head[maxn],cnt;
int dep[maxn],anc[maxn][20];
int dfn[maxn],last[maxn],timer;
int st[maxn],top,f[maxn][2];
bool imp[maxn];
inline int read()
{
	int x=0;
	char ch=getchar();
	while (ch<'0'||ch>'9')
		ch=getchar();
	while (ch>='0'&&ch<='9')
	{
		x=x*10+ch-'0';
		ch=getchar();
	}
	return x;
}
inline void AddEdge(int u,int v)
{
	e[++cnt]=Edge(head[u],v);
	head[u]=cnt;
}
void dfs(int u)
{
    dfn[u]=++timer;
    for (int i=head[u];i;i=e[i].next)
	{
		int v=e[i].v;
		if (v!=anc[u][0])
		{
			dep[v]=dep[u]+1;
        	anc[v][0]=u;
        	for (int j=0;anc[anc[v][j]][j];j++)
				anc[v][j+1]=anc[anc[v][j]][j];
       		dfs(v);
    	}
    }
    last[u]=timer;
}
inline int LCA(int u,int v)
{
    if (dep[u]<dep[v])
		swap(u,v);
    for (int i=18;i>=0;i--)
		if (dep[anc[u][i]]>=dep[v])
			u=anc[u][i];
	if (u==v)
		return u;
    for (int i=18;i>=0;i--)
		if (anc[u][i]!=anc[v][i])
			u=anc[u][i],v=anc[v][i];
    return anc[u][0];
}
bool num[maxn];
int dp(int u)
{
    int tot=0,ans=0;
    for (int i=head[u];i;i=e[i].next)
	{
		int v=e[i].v;
        ans+=dp(v);
        tot+=num[v];
    }
    if (imp[u])
	{
        ans+=tot;
        num[u]=1;
    }
	else
	{
        ans+=(tot>1);
        num[u]=(tot==1);
    }
    return ans;
}
inline bool cmp(int a,int b)
{
    return dfn[a]<dfn[b];
}
int tmp[maxn],sz;
int main()
{
	if (fopen("in.in","r")!=NULL)
    {
        freopen("in.in","r",stdin);
        freopen("out.out","w",stdout);
    }
    n=read();
    for (int i=1;i<n;i++) 
	{
        int x=read(),y=read();
        AddEdge(x,y);
		AddEdge(y,x);
    }
    dfs(dep[1]=1);
    int T=read();
    while (T--)
	{
        int m=read();
        sz=0;
        for (int i=0;i<m;i++)
		{
            int x=read();
            tmp[++sz]=x;
            imp[x]=1;
        }
        bool flag=0;
        for (int i=1;i<=sz;i++)
        	if (anc[tmp[i]][0]!=tmp[i]&&imp[anc[tmp[i]][0]])
			{
                flag=1;
                break;
            }
        if (flag)
		{
            puts("-1");
            for (int i=1;i<=sz;i++)
            	imp[tmp[i]]=0;
            continue;
        }
        sort(tmp+1,tmp+sz+1,cmp);
        for (int i=2;i<=m;i++)
        	tmp[++sz]=LCA(tmp[i-1],tmp[i]);
		sort(tmp+1,tmp+sz+1);
		sz=unique(tmp+1,tmp+sz+1)-tmp-1;
		sort(tmp+1,tmp+sz+1,cmp);
        top=cnt=0;
		for (int i=1;i<=sz;i++)
		{
            int x=tmp[i];
			head[x]=0;
            while (top&&!(dfn[st[top]]<=dfn[x]&&dfn[x]<=last[st[top]]))
				top--;
            if (top)
				AddEdge(st[top],x);
            st[++top]=x;
        }
        printf("%d\n",dp(tmp[1]));
        for (int i=1;i<=sz;i++)
			imp[tmp[i]]=0;
    }
    return 0;
}
  			 	 		 					 	    	 	 	 	