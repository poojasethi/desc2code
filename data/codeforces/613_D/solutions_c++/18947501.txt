#include <bits/stdc++.h>
using namespace std;
#define ff(i, a, b) for (int i = (int)(a); i <= (int)(b); i++)
#define fod(i, a, b) for (int i = (int)(a); i >= (int)(b); i--)
#define pb push_back
const int N = 100010;

vector <int> G[N];
bool imp[N], check[N];
int n, q, par[N][20], start[N], finish[N], d[N];
int cur, ans;

void build(int u) {
    start[u] = ++cur;
    ff(i, 0, G[u].size()-1) {
        int v = G[u][i]; if (start[v]) continue;
        par[v][0] = u; d[v] = d[u] + 1; build(v);
    }
    finish[u] = cur;
}

int lca(int u, int v) {
    if (d[u] < d[v]) swap(u, v);
    fod(i, 19, 0) if (d[par[u][i]] >= d[v]) u = par[u][i];
    fod(i, 19, 0) if (par[u][i] != par[v][i]) u = par[u][i], v = par[v][i];
    return u == v ? u : par[u][0];
}

bool cmp(int u, int v) { return start[u] < start[v]; }

void dfs(int u) {
    int cnt = 0;
    ff(i, 0, G[u].size()-1) {
        int v = G[u][i]; dfs(v);
        cnt += check[v];
    }
    if (imp[u]) check[u] = 1, ans += cnt;
    else {
        if (cnt >= 2) ans++, check[u] = 0;
        else if (cnt == 1) check[u] = 1;
        else check[u] = 0;
    }
}

void solve() {
    int k; cin >> k; vector <int> v; ans = 0;
    ff(i, 1, k) { int x; cin >> x; imp[x] = 1; v.pb(x); }
    sort(v.begin(), v.end(), cmp);
    bool ok = 1;
    ff(i, 1, k-1) {
        v.pb(lca(v[i], v[i-1]));
        if (imp[par[v[i]][0]]) ok = 0;
    }
    if(!ok) { ff(i, 0, v.size()-1) imp[v[i]] = 0; printf("-1\n"); return; }
    sort(v.begin(), v.end(), cmp); v.resize( distance(v.begin(), unique(v.begin(), v.end())) );
    //ff(i, 0, v.size()-1) cout << v[i] << ' '; cout << endl;
    ff(i, 1, v.size()-1) {
        int p = lca(v[i], v[i-1]);
        G[p].pb(v[i]);
    }
    dfs(v[0]);
    printf("%d\n", ans);
    ff(i, 0, v.size()-1) G[v[i]].clear(), imp[v[i]] = 0, check[v[i]] = 0;
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);
    cin >> n;
    ff(i, 1, n-1) {
        int u, v; cin >> u >> v;
        G[u].pb(v); G[v].pb(u);
    }
    par[1][0] = 1; build(1);
    ff(i, 1, 19) ff(j, 1, n) par[j][i] = par[par[j][i-1]][i-1];
    ff(i, 1, n) G[i].clear();
    cin >> q;
    while(q--) {
        solve();
    }
}
