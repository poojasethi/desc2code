#include<cstdio>
#include<algorithm>
using namespace std;
struct node
{
	int to,next;
}g[220000],g2[220000];
int ed,st[220000];
int fat[220000][20];
int n,q,x1,x2;
inline void add(int x,int y)
{
	ed++;
	g[ed].next=st[x];
	st[x]=ed;
	g[ed].to=y;
}
int dep[220000],cnt;
int dfn[220000][2];
inline void dfs(int x,int fa,int de)
{
	fat[x][0]=fa;
	dep[x]=de;
	cnt++;
	dfn[x][0]=cnt;
	for (int i=st[x];i!=0;i=g[i].next)
	{
		if(g[i].to!=fa)dfs(g[i].to,x,de+1);
	}
	dfn[x][1]=cnt;
}
inline void doubling()
{
	for (int i=1;i<=18;i++)
	{
		for (int j=1;j<=n;j++)
		{
			fat[j][i]=fat[fat[j][i-1]][i-1];
		}
	}
}
inline int lca(int x,int y)
{
	if(dep[x]>dep[y])swap(x,y);
	for (int i=18;i>=0;i--)
	{
		if(dep[fat[y][i]]>=dep[x])
		{
			y=fat[y][i];
		}
	}
	if(x==y)return x;
	for (int i=18;i>=0;i--)
	{
		if(fat[x][i]!=fat[y][i])
		{
			y=fat[y][i];
			x=fat[x][i];
		}
	}
	if(x==y)return x;
	return fat[x][0];
}
int m,cp,vis[220000];
int h[220000]; 
int st2[220000],ed2,fl;
inline int abss(int x)
{
	if(x>0)return x;
	return -x;
}
inline void add2(int x,int y)
{
	if(x==y)return;
	if(vis[x]==cp&&vis[y]==cp&&abss(dep[x]-dep[y])==1)fl=1;
//	printf("%d %d\n",x,y);
	ed2++;
	g2[ed2].to=y;
	g2[ed2].next=st2[x];
	st2[x]=ed2;
}
inline bool cmp(int x,int y)
{
	return dfn[x][0]<dfn[y][0];
}
int col[220000];
inline int dp(int x)
{
	col[x]=0;
	int res1=0,res2=0;
	for (int i=st2[x];i!=0;i=g2[i].next)
	{
		res1+=dp(g2[i].to);
		res2+=col[g2[i].to];
	}
	//printf("%d %d %d\n",x,res1,res2);
	st2[x]=0;
	if(vis[x]==cp)
	{
		res1+=res2;
		col[x]=1;
	}
	else
	{
		if(res2==1)
		{
			col[x]=1;
		}
		else if(res2!=0)
		{
			res1++;
		}
	}return res1;
}
int sta[220000],stp;
inline void buildtree()
{
	fl=0;
	ed2=0;
	sort(h+1,h+m+1,cmp);
	stp=1;
	sta[1]=1;
	for (int i=1;i<=m;i++)
	{
		int tp=lca(h[i],sta[stp]);
//		printf("%d %d %d\n",h[i],sta[stp],tp);
		if(tp==sta[stp])
		{
			stp++;
			sta[stp]=h[i];
			continue;
		}
		while (tp==lca(h[i],sta[stp-1]))
		{
			add2(sta[stp-1],sta[stp]);
			stp--;
			tp=lca(h[i],sta[stp]);
		}
		add2(tp,sta[stp]);
		sta[stp]=tp;
		stp++;
		sta[stp]=h[i];
	}
	while (stp!=1)
	{
		add2(sta[stp-1],sta[stp]);
		stp--;
	}
}
inline bool check()
{
	if(fl==1)return false;
	return true;
}
int main()
{
	scanf("%d",&n);
	for (int i=1;i<n;i++)
	{
		scanf("%d %d",&x1,&x2);
		add(x1,x2);
		add(x2,x1);
	}
	dfs(1,0,1);
	doubling();
	scanf("%d",&q);
	while (q--)
	{
		cp++;
		scanf("%d",&m);
		for (int i=1;i<=m;i++)
		{
			scanf("%d",&h[i]);
			vis[h[i]]=cp;
		}
		buildtree();
		int ans=dp(1);
		if(!check())
		{
			printf("-1\n");
		}
		else
		{
			printf("%d\n",ans);
		}
	}
	return 0;
}
