/*input
4
1 3
2 3
4 3
4
2 1 2
3 2 3 4
3 1 2 4
4 1 2 3 4
*/
#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

const int N = 1e5 + 5;

vector<int> a[2 * N], c[2 * N];
bool check[N], important[N];
int Start[N], End[N], h[N], par[N][20], ans, cnt, b[2 * N];

void pre_dfs(int u, int p) {
	Start[u] = ++cnt;
	par[u][0] = p;
	for(int i = 0; i < a[u].size(); ++i) if(a[u][i] != p) {
		h[a[u][i]] = h[u] + 1;
		pre_dfs(a[u][i], u);
	}
	End[u] = ++cnt;
}

void dfs(int u) {
	int child = 0;
	bool val = 0;
	for(int i = 0; i < c[u].size(); ++i) {
		dfs(c[u][i]);
		if(check[c[u][i]]) ++child, val = true;
	}
	if(important[u]) {
		ans += child;
		check[u] = true;
	}
	else {
		if(child >= 2) ans++, check[u] = false;
		else check[u] = val;
	}
}

int lca(int u, int v) {
	if(h[u] < h[v]) swap(u, v);
	for(int i = 18; i >= 0; --i) if(h[par[u][i]] >= h[v]) u = par[u][i];
	for(int i = 18; i >= 0; --i) if(par[u][i] != par[v][i]) u = par[u][i], v = par[v][i];
	while(u != v) u = par[u][0], v = par[v][0];
	return u;
}

bool cmp(int u, int v) {
	return Start[u] < Start[v];
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n;
	cin >> n;
	for(int i = 1; i < n; ++i) {
		int u, v;
		cin >> u >> v;
		a[u].push_back(v);
		a[v].push_back(u);
	}
	int m;
	cin >> m;
	pre_dfs(1, 1);
	for(int i = 1; i <= 18; ++i) for(int j = 1; j <= n; ++j) par[j][i] = par[par[j][i - 1]][i - 1];
	while(m--) {
		bool flag = true;
		int k;
		cin >> k;
		for(int i = 1; i <= k; ++i) {
			cin >> b[i];
			important[b[i]] = true;
		}
		for(int i = 1; i <= k; ++i) if(important[par[b[i]][0]] && par[b[i]][0] != b[i]) flag = false;
		if(!flag) {
			for(int i = 1; i <= k; ++i) important[b[i]] = false;
			cout << -1 << endl;
			continue;
		}
		int _k = k;
		sort(b + 1, b + k + 1, cmp);
		for(int i = 1; i < _k; ++i) b[++k] = lca(b[i], b[i + 1]);
		sort(b + 1, b + k + 1, cmp);
		stack<int> st;
		st.push(b[1]);
		for(int i = 2; i <= k; ++i) {
			if(b[i] == b[i - 1]) continue;
			while(End[st.top()] < End[b[i]]) st.pop();
			c[st.top()].push_back(b[i]);
			st.push(b[i]);
		}
		while(st.size()) st.pop();
		dfs(b[1]);
		cout << ans << endl;
		ans = 0;
		for(int i = 1; i <= k; ++i) {
			important[b[i]] = false;
			c[b[i]].clear();
		}
	}
}