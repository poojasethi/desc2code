//Cok tavsanin pesinde kosan hicbrini yakalayamaz!
#include<bits/stdc++.h>
#define MAXN 100009
#define INF 1000000007
#define LLINF 1000000000000000007
#define mp(x,y) make_pair(x,y)
#define wr cout<<"Continue Debugging!!!"<<endl;
#define ff first
#define ss second
#define all(x) x.begin(),x.end()
#define pb(x) push_back(x)
#define ppb() pop_back()
	#define tr(i, c) for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)
using namespace std;
typedef long long ll;
typedef pair<int,int> PII;
template<class T> bool umin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool umax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//freopen(".in", "r", stdin);
//freopen(".out", "w", stdout);
int lgN=18;
int in[MAXN],P[MAXN][28],lvl[MAXN],arr[MAXN],k,par,ans,vis[MAXN],tim,a,out[MAXN];
vector<int>adj[MAXN];
set<int>dj[MAXN];
void dfs(int nd,int pr){
	in[nd]=++tim;
	lvl[nd]=lvl[pr]+1;
	P[nd][0]=pr;
	for(int i=0;i<adj[nd].size();i++){
		int to=adj[nd][i];
		if(to!=pr)
			dfs(to,nd);
	}
	out[nd]=tim;
}
void build(){
	for(int j=1;j<lgN;j++)
		for(int i=1;i<=a;i++)
			if(P[i][j-1]!=-1)
				P[i][j]=P[P[i][j-1]][j-1];
}
int LCA(int x,int y){
	if(lvl[x]<lvl[y])
		swap(x,y);
	for(int i=lgN;i>=0;i--)
		if(lvl[x]-(1<<i)>=lvl[y])
			x=P[x][i];
	if(x==y)
		return x;
	for(int i=lgN;i>=0;i--)
		if(P[x][i]!=-1 and P[x][i]!=P[y][i])
			x=P[x][i],y=P[y][i];			
	return P[x][0];
}
int ata(int x,int y){
	if(in[x]<=in[y] and out[y]<=out[x])
		return 1;
	return 0;	
}
bool cmp(int x,int y)
{return (in[x]<in[y]);}
int calc(){
	int c=0;set<int>pm;
	for(int i=0;i<k;i++)
		pm.insert(arr[i]),vis[arr[i]]=1;
	tr(i,pm)
		arr[c++]=*i;		
	sort(arr,arr+k,cmp);
	for(int i=0;i<k-1;i++){
		int z=LCA(arr[i],arr[i+1]);
		if(!pm.count(z))
			arr[c++]=z,pm.insert(z);
	}
	sort(arr,arr+c,cmp);
	stack<int>s;
	s.push(arr[0]);
	for(int i=1;i<c;i++){
		while(!s.empty() and !ata(s.top(),arr[i]))
			s.pop();
		dj[s.top()].insert(arr[i]);	
		dj[arr[i]].insert(s.top());	
		s.push(arr[i]);
	}
	return c;
}
int dfs2(int nd,int pr){
	int imp=0;
	tr(i,dj[nd]){
		int to=*i;
		if(to!=pr){
			if(vis[nd] and vis[to] and (P[nd][0]==to or P[to][0]==nd))
				return par=1;
			if(par)
				return 0;	
			imp+=dfs2(to,nd);	
		}
	}
	if(vis[nd]){
		ans+=imp;
		return 1;
	}
	if(imp<2)
		return imp;
	ans++;
	return 0;
}
int main(){
	memset(P,-1,sizeof(P));
	scanf("%d",&a);
	for(int i=0;i<a-1;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		adj[u].pb(v);
		adj[v].pb(u);
	}
	dfs(1,0);
	build();  
	int q;
	scanf("%d",&q);
	while(q--){
		scanf("%d",&k);
		for(int i=0;i<k;i++)
			scanf("%d",arr+i);
		int len=calc(),st;
		for(int i=0;i<len;i++)
			if(vis[arr[i]])
				st=arr[i];	
		ans=par=0;
		dfs2(st,-1);
		if(!par)
			printf("%d\n",ans);	
		else
			printf("-1\n");
		for(int i=0;i<len;i++)
			dj[arr[i]].clear(),vis[arr[i]]=0;	
	}
	return 0;
}
