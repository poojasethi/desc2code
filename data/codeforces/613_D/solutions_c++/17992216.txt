#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;
const int maxn=100000+10;
const int INF=0x3f3f3f3f;
int n;
int head[maxn],cnt;
int st[maxn],ed[maxn],dep[maxn],anc[maxn][20];
int timer,sta[maxn],f[maxn][2];
bool imp[maxn];
struct Edge{
    int next,v;
    Edge(){}
    Edge(int next,int v): next(next),v(v){}
} e[maxn << 1];
inline int read()
{
	int x=0;
	char ch=getchar();
	while (ch<'0'||ch>'9')
		ch=getchar();
	while (ch>='0'&&ch<='9')
	{
		x=x*10+ch-'0';
		ch=getchar();
	}
	return x;
}
inline void AddEdge(int u, int v) {
    e[cnt] = Edge(head[u],v);
    head[u] = cnt++;
}

inline void dfs(int x) {
    st[x] = ++timer;
    for(int i = head[x]; ~i; i = e[i].next) if(e[i].v != anc[x][0]) {
        anc[e[i].v][0] = x;
        dep[e[i].v] = dep[x] + 1;
        dfs(e[i].v);
    }
    ed[x] = timer;
}
inline int LCA(int u,int v)
{
    if (dep[u]<dep[v])
		swap(u,v);
    for (int i=18;i>=0;i--)
		if (dep[anc[u][i]]>=dep[v])
			u=anc[u][i];
	if (u==v)
		return u;
    for (int i=18;i>=0;i--)
		if (anc[u][i]!=anc[v][i])
			u=anc[u][i],v=anc[v][i];
    return anc[u][0];
}
int node[maxn];
inline int dp(int u)
{
    int tot=0,ans=0;
    for (int i=head[u];~i;i=e[i].next)
	{
        ans+=dp(e[i].v);
        tot+=node[e[i].v];
    }
    if (imp[u])
	{
        ans+=tot;
        node[u]=1;
    }
	else
	{
        ans+=(tot>1);
        node[u]=(tot==1);
    }
    return ans;
}
inline bool cmp(int a,int b)
{
    return st[a]<st[b];
}
int main()
{
    n=read();
    for (int i=0;i<maxn;i++) 
		head[i] = -1; 
    for (int i=1;i<n;i++) 
	{
        int x=read()-1,y=read()-1;
        AddEdge(x,y);
		AddEdge(y,x);
    }
    dep[0]=anc[0][0]=0;
    dfs(0);
    for (int j=1;j<20;j++)
		for (int i=0;i<n;i++)
        	anc[i][j]=anc[anc[i][j-1]][j-1];
    int T=read();
    while (T--)
	{
        vector<int> v;
        int m=read();
        for (int i=0;i<m;i++)
		{
            int x=read()-1;
            v.push_back(x);
            imp[x]=1;
        }
        bool flag=0;
        for (int i=0;i<v.size();i++)
            if (anc[v[i]][0]!=v[i]&&imp[anc[v[i]][0]])
			{
                flag=1;
                break;
            }
        if (flag)
		{
            printf("-1\n");
            for (int i=0;i<v.size();i++)
				imp[v[i]]=0;
            continue;
        }
        sort(v.begin(),v.end(),cmp);
        for (int i=1;i<m;i++)
			v.push_back(LCA(v[i-1],v[i]));
        sort(v.begin(),v.end(),cmp);
        v.resize(unique(v.begin(),v.end())-v.begin());
        int top=0;cnt=0;
        for (int i=0;i<v.size();i++)
		{
            int x=v[i];
			head[x]=-1;
            while (top&&!(st[sta[top]]<=st[x]&&st[x]<=ed[sta[top]]))
				top--;
            if (top)
				AddEdge(sta[top],x);
            sta[++top]=x;
        }
        printf("%d\n",dp(v[0]));
        for (int i=0;i<v.size();i++)
			imp[v[i]]=0;
    }
    return 0;
}
 	   		  	 	   	    	 		  	  		