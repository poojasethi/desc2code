n, magic_stock = map(int, raw_input().split())
ingredient_values = map(int, raw_input().split())
ingredient_stock = map(int, raw_input().split())
sorted_shares = sorted(
    (float(have_value) / need_value, have_value, need_value)
    for need_value, have_value in zip(ingredient_values, ingredient_stock)
)


cookies_count = 0
tail_values = 0


for _, have_value, need_value in sorted_shares:
    left_value = have_value - need_value * cookies_count
    assert left_value >= 0
    if left_value != 0:
        complete_cookies, residual = divmod(left_value, need_value)
        can_afford_cookies = min(complete_cookies, (magic_stock / tail_values) if tail_values else complete_cookies)
        cookies_count += can_afford_cookies
        magic_stock -= can_afford_cookies * tail_values

        if can_afford_cookies < complete_cookies:
            break

        magic_stock += residual

    tail_values += need_value
else:
    assert magic_stock >= 0
    if magic_stock > 0:
        cookies_count += magic_stock / tail_values

print cookies_count

