#include<map>
#include<cstdio>
#include<vector>
#include<algorithm>

#define rep(i,n) for(int i=0;i<(n);i++)

using namespace std;

const int M=1000000007;

template<class T> struct Interval{
	T a,b;
	Interval(){}
	bool operator<(const Interval &I)const{ return b<I.b; }
};

template<class T>
class FenwickTree{
	vector<T> a;
public:
	FenwickTree(int n):a(n){}
	T sum(int i,int j)const{
		if(i==0){
			T s=0;
			for(;j>=0;j=(j&(j+1))-1) s=(s+a[j])%M;
			return s;
		}
		return (sum(0,j)-sum(0,i-1)+M)%M;
	}
	void add(int i,T v){
		for(;i<a.size();i|=i+1) a[i]=(a[i]+v)%M;
	}
};

int main(){
	int n,m; scanf("%d%d",&n,&m);

	map<int,int> f;
	map<int,int>::iterator it;
	static Interval<int> I[100000];
	rep(i,m){
		scanf("%d%d",&I[i].a,&I[i].b);
		f[I[i].a]; f[I[i].b];
	}
	f[0]; f[n];
	int n2;
	for(it=f.begin(),n2=0;it!=f.end();++it) it->second=n2++;

	sort(I,I+m);

	FenwickTree<int> ft(n2);
	ft.add(0,1);
	rep(i,m){
		int a=f[I[i].a],b=f[I[i].b];
		ft.add(b,ft.sum(a,b-1));
	}
	printf("%d\n",ft.sum(n2-1,n2-1));

	return 0;
}
