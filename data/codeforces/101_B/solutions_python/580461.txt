#!/usr/bin/env python
import sys

def readPair():
    return map(int, sys.stdin.readline().split())

def compactify(buses, n):
    was = {0: True, n: True}
    for bus in buses:
        was[bus[0]] = was[bus[1]] = True
    cur = 1
    for key in sorted(was.keys()):
        was[key] = cur
        cur += 1
    for i in xrange(len(buses)):
        buses[i] = (was[buses[i][0]], was[buses[i][1]])
    return was[0], was[n], buses

n, m = readPair()
buses = []
for i in xrange(m):
    s, t = readPair()
    buses.append( (s, t) )
first, last, buses = compactify(buses, n)
buses.sort(key=lambda x: x[1])

s = [0] * (last + 1)
res = [0] * (last + 1)

s[1] = 1
res[1] = 1

prevEn = 1
for st, en in buses:
    if prevEn is not None and en != prevEn:
        s[prevEn] = (s[prevEn - 1] + res[prevEn]) % 1000000007
        for i in xrange(prevEn + 1, en):
            s[i] = s[i - 1];
    prevEn = en
    res[en] = (res[en] + s[en - 1] - s[st - 1]) % 1000000007

print res[last]




