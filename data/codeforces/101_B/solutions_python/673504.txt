#!/usr/bin/python

f = lambda:map(int , raw_input().split())
n , m = f()
L = []
X = {}

ways = [0] * (2 * m + 2)
sum_ways = [0] * (2 * m + 2)

def mycmp(E1 , E2):
	return cmp(E1[1] , E2[1])
	
def Input():
	for i in range(m):
		L.append(f())


def compactify():
	
	X[n] = True
	X[0] = True
	for t in L:
		X[t[0]] = X[t[1]] = True

	cunt = 0
	for k in sorted(X.keys()):
		X[k] = cunt
		cunt += 1
	for i in xrange(m):
		L[i][0] = X[L[i][0]]
		L[i][1] = X[L[i][1]]


def solve():

	res = 0
	compactify()
	L.sort(mycmp)

	pres = 1
	for st , ed in L:
		if pres != ed:
			sum_ways[pres] =(sum_ways[pres - 1] +  ways[pres]) % (10**9 + 7)
			for i in xrange(pres , ed):
				sum_ways[i + 1] = sum_ways[i]

		ways[ed] += sum_ways[ed - 1] - sum_ways[st - 1]
		if st == 0:
			ways[ed] += 1
		ways[ed] %= (10**9 + 7)
		pres = ed

		#print(st  , ed , ways[ed] , sum_ways[ed])

	print(ways[X[n]])

Input()
solve()

		

