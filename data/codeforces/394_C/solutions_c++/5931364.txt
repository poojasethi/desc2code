#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>

using namespace std;

vector<int> x[1000];
int d[1000000];

typedef pair<pair<int, int>, int> P;

int main()
{
	cin.sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
			cin >> d[i*m+j];
	sort(d, d+n*m, greater<int>());
	priority_queue<P, vector<P>, greater<P> > pq;
	for (int i = 0; i < m; ++i)
		pq.push(make_pair(make_pair(0, 0), i));
	for (int i = 0; i < n*m; ++i)
	{
		P pp = pq.top(); pq.pop();
		if (d[i] == 11)
		{
			pp.first.first++;
			pp.first.second++;
		}
		else if (d[i] == 00)
		{
			//
		}
		else if (d[i] == 10)
		{
			if (pp.first.first <= pp.first.second)
				pp.first.first++;
			else
			{
				pp.first.second++;
				d[i] = 01;
			}
		}
		else if (d[i] == 01)
		{
			if (pp.first.second <= pp.first.first)
				pp.first.second++;
			else
			{
				pp.first.first++;
				d[i] = 10;
			}
		}
		x[pp.second].push_back(d[i]);
		if (x[pp.second].size() < n)
			pq.push(pp);
	}
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
			cout << ((x[j][i] == 0 || x[j][i] == 1) ? "0" : "") << x[j][i] << " ";
		cout << "\n";
	}
	return 0;
}
