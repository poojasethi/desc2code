import sys
import os
#input.txt & output.txt
PARA_FROM_STD = True
IN_FILE = 'input.txt'
OUT_FILE = 'output.txt'

#--------- classic ---------
def gcd(a, b):
    #Greatest common divisor
    if a < b:
        return gcd(b, a)
    if b == 0:
        return a
    return gcd(b, a % b)

#Least common multiplie
lcm = lambda a, b: a * b / gcd(a, b)
#Fast pow
def fastPow(x, y):
    res = 1
    while y:
        if (y & 1):
            res *= x
        y = y >> 1
        if y == 0:
            break
        x *= x
    return res
    

#-------- data reading --------
read_int = lambda: int(datum.readline())
read_ints = lambda : map(int, datum.readline().split())
def read_ints_index(sort_reverse = True):
    dat = read_ints()
    x = []
    for _ in enumerate(dat):
        x.append(list(_))
    x.sort(reverse = sort_reverse, key = lambda x: x[1])
    return x

def read_intsN(n):
    res = []
    for _ in xrange(n):
        res.append(map(int, datum.readline().split()))
    return res

#read_words?
read_strs = lambda : map(str, datum.readline().split())
read_str = lambda: datum.readline().replace('\n', '').replace('\r', '')
#---------- graphs ----------



#----------- hat -----------
if len(sys.argv) > 1:
    datum = open(sys.argv[1], 'r')
else:
    datum = sys.stdin
#----------- dbg -----------
if os.environ.get('codeforces_debug', False):
    debug_mode = True
else:
    debug_mode = False

if debug_mode:
    def toStr(was):
        return '\n'.join(map(str, was))
    
    try:
        import colorama
        colorama.init()
        def dbg(*was):
            txt = str(was)
            print '\x1b[32;1m%s\x1b[0m' % toStr(was) # style ->> 32;1
            #print(colorama.Fore.GREEN + colorama.Fore. + txt + colorama.Style.RESET_ALL)
    except:
        def dbg(*was):
            print 'Debug:\t' + toStr(was)
else:
    def dbg(*was):
        pass


#----------------------------
#----------- data -----------
'''
"10" => read_int()
"10 20 30" => read_ints()
"10 20 30
40 5 17" => read_intsN(2)
'''
n, k = read_ints()
data = read_ints()
best_score = None
best_start = 0
for i in xrange(k):
    score = sum(data[i::k])
    if best_score == None or score < best_score:
        best_score = score
        best_start = i
print str(best_start+1)
#---------- solve ----------
#----------- end -----------
#dbg(vals)
dbg("cya")

