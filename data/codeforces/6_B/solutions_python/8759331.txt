def index(ch):
    return ord(ch) - ord('A')


def range_check(row, col):
    return 0 <= row < m and 0 <= col < n


def get_neighbors(row, col):
    for k in range(len(delta_row)):
        if range_check(row + delta_row[k], col + delta_col[k]) and a[row + delta_row[k]][col + delta_col[k]] != '.':
            neigh[index(a[row + delta_row[k]][col + delta_col[k]])] = 1


def dfs(row, col):
    S = [(row, col)]

    while len(S) != 0:
        row, col = S[-1]
        S.pop()

        if range_check(row, col) and a[row][col] == c:
            get_neighbors(row, col)
            a[row][col] = '.'

            for t in range(len(delta_row)):
                S.append((row + delta_row[t], col + delta_col[t]))


def main():
    for i in range(m):
        for j in range(n):
                dfs(i, j)

    cnt = 0
    for q in range(len(neigh)):
        if q != index(c):
            cnt += neigh[q] != 0

    print cnt


neigh = [0] * 26
m, n, c = raw_input().split()
m, n = int(m), int(n)
a = [None] * m
for i in range(m):
    a[i] = list(raw_input())

delta_row = [-1, 0, 1, 0]
delta_col = [0, 1, 0, -1]

main()