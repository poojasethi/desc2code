#include<stdio.h>
#include<string.h>
int x[27][27],y[27][27];
bool d[15][15];
char s[5];
int m,n,xj1,xj2,yj1,yj2,j1[5],j2[5];
int f[100],g[100],z;
int tt;
int aabs(int x)
{
	if (x<0)
		return -x;
	else
		return x;
}
char num2suit(int x)
{
	if (x==0)
		return 'C';
	else if (x==1)
		return 'D';
	else if (x==2)
		return 'H';
	else
		return 'S';
}
int suit2num(char c)
{
	if (c=='C')
		return 0;
	else if (c=='D')
		return 1;
	else if (c=='H')
		return 2;
	else
		return 3;
}
char num2rank(int x)
{
	if (x==10)
		return 'T';
	else if (x==11)
		return 'J';
	else if (x==12)
		return 'Q';
	else if (x==13)
		return 'K';
	else if (x==1)
		return 'A';
	else
		return x+48;
}
int rank2num(char c)
{
	if (c=='T')
		return 10;
	else if (c=='J')
		return 11;
	else if (c=='Q')
		return 12;
	else if (c=='K')
		return 13;
	else if (c=='A')
		return 1;
	else
		return c-48;
}
bool checkrect(int r,int c)
{
	int i,j,tt;
	bool d[15];
	memset(d,0,sizeof(d));
	tt=0;
	for (i=0;i<3;i++)
	{
		for (j=0;j<3;j++)
		{
			if (d[x[r+i][c+j]]==1)
			{
				tt=1;
				break;
			}
			d[x[r+i][c+j]]=1;
		}
	}
	if (tt==0)
		return 1;
	for (i=0;i<3;i++)
		for (j=0;j<3;j++)
			if (y[r+i][c+j]!=y[r][c])
				return 0;
	return 1;
}
bool overlap(int r1,int c1,int r2,int c2)
{
	return aabs(r2-r1)<3&&aabs(c1-c2)<3;
}
void output(int r1,int c1,int r2,int c2)
{
	tt=1;
	printf("Solution exists.\n");
	if (xj1==-1&&xj2==-1)
		printf("There are no jokers.\n");
	else if (xj1!=-1&&xj2==-1)
		printf("Replace J1 with %c%c.\n",num2rank(j1[0]),num2suit(j1[1]));
	else if (xj1==-1&&xj2!=-1)
		printf("Replace J2 with %c%c.\n",num2rank(j2[0]),num2suit(j2[1]));
	else
		printf("Replace J1 with %c%c and J2 with %c%c.\n",num2rank(j1[0]),num2suit(j1[1]),num2rank(j2[0]),num2suit(j2[1]));
	printf("Put the first square to (%d, %d).\n",r1+1,c1+1);
	printf("Put the second square to (%d, %d).\n",r2+1,c2+1);
	return;
}
void dfsrect2(int r,int c)
{
	int i,j;
	for (i=0;i+3<=m&&tt==0;i++)
		for (j=0;j+3<=n&&tt==0;j++)
			if (!overlap(r,c,i,j))
				if (checkrect(i,j))
					output(r,c,i,j);
	return;
}
void dfsrect1()
{
	int i,j;
	for (i=0;i+3<=m&&tt==0;i++)
		for (j=0;j+3<=n&&tt==0;j++)
			if (checkrect(i,j))
				dfsrect2(i,j);
	return;
}
void dfsj2(int k)
{
	int i;
	if (xj2==-1)
	{
		dfsrect1();
		return;
	}
	for (i=0;i<z&&tt==0;i++)
	{
		if (i==k)
			continue;
		j2[0]=f[i];
		j2[1]=g[i];
		x[xj2][yj2]=f[i];
		y[xj2][yj2]=g[i];
		dfsrect1();
	}
	return;
}
void dfsj1()
{
	int i;
	if (xj1==-1)
	{
		dfsj2(-1);
		return;
	}
	for (i=0;i<z&&tt==0;i++)
	{
		j1[0]=f[i];
		j1[1]=g[i];
		x[xj1][yj1]=f[i];
		y[xj1][yj1]=g[i];
		dfsj2(i);
	}
	return;
}
int main()
{
	int i,j;
	scanf("%d %d",&m,&n);
	memset(d,0,sizeof(d));
	xj1=xj2=yj1=yj2=-1;
	for (i=0;i<m;i++)
	{
		for (j=0;j<n;j++)
		{
			scanf("%s",s);
			if (strcmp(s,"J1")==0)
			{
				x[i][j]=y[i][j]=-1;
				xj1=i;
				yj1=j;
			}
			else if (strcmp(s,"J2")==0)
			{
				x[i][j]=y[i][j]=-2;
				xj2=i;
				yj2=j;
			}
			else
			{
				x[i][j]=rank2num(s[0]);
				y[i][j]=suit2num(s[1]);
				d[x[i][j]][y[i][j]]=1;
			}
		}
	}
	z=0;
	for (i=1;i<=13;i++)
	{
		for (j=0;j<4;j++)
		{
			if (d[i][j]==0)
			{
				f[z]=i;
				g[z]=j;
				z++;
			}
		}
	}
	tt=0;
	dfsj1();
	if (tt==0)
		printf("No solution.\n");
	return 0;
}
