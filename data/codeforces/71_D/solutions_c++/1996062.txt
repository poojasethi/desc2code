
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<string>
#include<string.h>
#include<cstring>
#include<stack>
#include<queue>
#include<cassert>
#include<cmath>
using namespace std;

#define LL long long int 
#define PII pair<int,int> 
#define PB push_back
#define MP make_pair
#define INF 1000000000
#define ab(x) ((x)>0?(x):-(x))
char vals[]={'2','3','4','5','6','7','8','9','T','J','Q','K','A'};
char cols[]={'C','D','H','S'};
char val[20][20],col[20][20],ispos[20][20],ocu[400];
vector<PII> locs;
pair<PII,PII> ans;
bool chkpos(int m,int n){
	memset(ocu,0,sizeof(ocu));
	int i,j,k,l,ss,sn,cid=1;
	locs.clear();
	for(i=1;i<=m-2;i++){
		for(j=1;j<=n-2;j++){
			ss=sn=1;
			cid++;
			for(k=i;k<=i+2;k++){
				for(l=j;l<=j+2;l++){
					ss&=(col[k][l]==col[i][j]);
					sn&=(ocu[val[k][l]]!=cid);
					ocu[val[k][l]]=cid;
				}
			}
			if(sn || ss)
				locs.PB(MP(i,j));
		}
	}
	for(i=0;i<locs.size();i++){
		for(j=i+1;j<locs.size();j++){
			if(ab(locs[i].first-locs[j].first)>=3 || ab(locs[i].second-locs[j].second)>=3){
				ans=MP(locs[i],locs[j]);
				return true;
			}
		}
	}
	return false;
}
int main(){
	set<pair<char,char> > s;
	set<pair<char,char> > ::iterator it;
	set<pair<char,char> > ::iterator it2;
	vector<pair<char,PII> > jloc;
	int i,j,m,n;
	char x,y;
	cin>>m>>n;
	for(i=0;i<13;i++)
		for(j=0;j<4;j++)
			s.insert(MP(vals[i],cols[j]));
	for(i=1;i<=m;i++)
		for(j=1;j<=n;j++){
			scanf(" %c%c",&x,&y);
			val[i][j]=x;
			col[i][j]=y;
			if(x=='J' && (y=='1' || y=='2')){

				jloc.PB(MP(y,MP(i,j)));
				continue;
			}
			s.erase(MP(x,y));
		}
	if(jloc.size()==0){
		if(chkpos(m,n)){
			printf("Solution exists.\n");
			printf("There are no jokers.\n");
			printf("Put the first square to (%d, %d).\n",ans.first.first,ans.first.second);
			printf("Put the second square to (%d, %d).\n",ans.second.first,ans.second.second);
		}
		else printf("No solution.\n");
		return 0;
	}
	else if( jloc.size()==1){
		for(it=s.begin();it!=s.end();it++){
			val[jloc[0].second.first][jloc[0].second.second]=it->first;
			col[jloc[0].second.first][jloc[0].second.second]=it->second;
			if(chkpos(m,n)){
				printf("Solution exists.\n");
				printf("Replace J%c with %c%c.\n",jloc[0].first,it->first,it->second);
				printf("Put the first square to (%d, %d).\n",ans.first.first,ans.first.second);
				printf("Put the second square to (%d, %d).\n",ans.second.first,ans.second.second);
				return 0;
			}
		}
		printf("No solution.\n");
		return 0;
	}
	else{
		for(it=s.begin();it!=s.end();it++){
			val[jloc[0].second.first][jloc[0].second.second]=it->first;
			col[jloc[0].second.first][jloc[0].second.second]=it->second;
			for(it2=s.begin();it2!=s.end();it2++){
				if(*it==*it2)continue;
				val[jloc[1].second.first][jloc[1].second.second]=it2->first;
				col[jloc[1].second.first][jloc[1].second.second]=it2->second;
				if(chkpos(m,n)){
					printf("Solution exists.\n");
					if(jloc[0].first=='2')
						printf("Replace J1 with %c%c and J2 with %c%c.\n",it2->first,it2->second,it->first,it->second);
					else
						printf("Replace J1 with %c%c and J2 with %c%c.\n",it->first,it->second,it2->first,it2->second);
					printf("Put the first square to (%d, %d).\n",ans.first.first,ans.first.second);
					printf("Put the second square to (%d, %d).\n",ans.second.first,ans.second.second);
					return 0;
				}
			}
		}
		printf("No solution.\n");
		return 0;
	}
	return 0;
}

