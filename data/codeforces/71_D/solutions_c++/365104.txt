#include <iostream>
#include <vector>
#include <set>
#include <cmath>
using namespace std;

int n, m;
vector< vector<string> > t;
pair<int,int> p1, p2;

bool verify()
{
	vector< pair<int,int> > pp;
	for (int i = 0; i < t.size()-2; ++i)
		for (int j = 0; j < t[i].size()-2; ++j)
		{
			bool ok = true;
			set<char> st1, st2;
			for (int k1 = 0; k1 < 3; ++k1)
				for (int k2 = 0; k2 < 3; ++k2)
				{
					st1.insert( t[i+k1][j+k2][0] );
					st2.insert( t[i+k1][j+k2][1] );
				}
			if ( st1.size() == 9 or st2.size() == 1 ) pp.push_back( make_pair(i,j) );
			//cout << "\t\t" << i << " " << j << ": " << st1.size() << " " << st2.size() << endl;
		}
	/*
	for (int i = 0; i < pp.size(); ++i) 
		cout << "\t" << pp[i].first << " " << pp[i].second << endl;
	*/
	for (int i = 0; i < pp.size(); ++i)
		for (int j = 0; j < pp.size(); ++j)
		{
			if ( abs( (double)(pp[i].first-pp[j].first) ) >= 3 or
			     abs( (double)(pp[i].second-pp[j].second) ) >= 3 )
			{
				p1 = pp[i];
				p2 = pp[j];
				return true;
			}
		}
	return false;
}

char cv[] = {'A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'};
char cn[] = {'S', 'H', 'C', 'D'};
int main()
{
	pair<int,int> j1, j2;
	j2 = j1 = make_pair(-1,-1);

	cin >> n >> m;
	t.resize(n);
	set<string> st;
	for (int i = 0; i < n; ++i)
	{
		t[i].resize(m);
		for (int j = 0; j < m; ++j)
		{
			cin >> t[i][j];
			if (t[i][j][1] == '1') j1 = make_pair(i, j);
			else if (t[i][j][1] == '2') j2 = make_pair(i,j);
			else st.insert( t[i][j] );
		}
	}
	
	if ( j1.first == -1 and j2.first == -1 )
	{
		if (verify())
		{
			cout << "Solution exists.\n";
			cout << "There are no jokers.\n";
			cout << "Put the first square to (" << p1.first+1 << ", " << p1.second+1 << ").\n";
			cout << "Put the second square to (" << p2.first+1 << ", " << p2.second+1 << ").\n";
		}
		else cout << "No solution.\n";
		return 0;
	}
	
	vector<string> ps;
	for (int i = 0; i < 13; ++i)
		for (int j = 0; j < 4; ++j)
		{
			string s=""; s += cv[i]; s += cn[j];
			if ( !st.count(s) ) ps.push_back(s);
		}
	
	if ( j2.first == -1 and j1.first != -1 )
	{
		for (int i = 0; i < ps.size(); ++i)
		{
			t[ j1.first ][ j1.second ] = ps[i];
			if ( verify() )
			{
				cout << "Solution exists.\n";
				cout << "Replace J1 with " << ps[i] << ".\n";
				cout << "Put the first square to (" << p1.first+1 << ", " << p1.second+1 << ").\n";
				cout << "Put the second square to (" << p2.first+1 << ", " << p2.second+1 << ").\n";
				return 0;
			}
		}
	}
	else if ( j2.first != -1 and j1.first == -1 )
	{
		for (int i = 0; i < ps.size(); ++i)
		{
			t[ j2.first ][ j2.second ] = ps[i];
			if ( verify() )
			{
				cout << "Solution exists.\n";
				cout << "Replace J2 with " << ps[i] << ".\n";
				cout << "Put the first square to (" << p1.first+1 << ", " << p1.second+1 << ").\n";
				cout << "Put the second square to (" << p2.first+1 << ", " << p2.second+1 << ").\n";
				return 0;
			}
		}
	}
	else
	{
		for (int i = 0; i < ps.size(); ++i)
			for (int j = 0; j < ps.size(); ++j)
			{
				if (i == j) continue;
				t[ j1.first ][ j1.second ] = ps[i];
				t[ j2.first ][ j2.second ] = ps[j];
				if ( verify() )
				{
					cout << "Solution exists.\n";
					cout << "Replace J1 with " << ps[i] << " and J2 with " << ps[j] << ".\n";
					cout << "Put the first square to (" << p1.first+1 << ", " << p1.second+1 << ").\n";
					cout << "Put the second square to (" << p2.first+1 << ", " << p2.second+1 << ").\n";
					return 0;
				}
			}
	}
	cout << "No solution.\n";
}

