#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cassert>
using namespace std;
typedef long long ll;

#define REP(i,n) for (int i=0; i<(int)(n); ++i)
#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)
#define FOREQ(i,k,n) for (int i=(k); i<=(int)(n); ++i)
#define FORIT(it,c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)

#define SZ(v) (int)((v).size())
#define MEMSET(v,h) memset((v),(h),sizeof(v))
#define FIND(m,w) ((m).find(w)!=(m).end())

int N,M;
string numbers[13]={"2","3","4","5","6","7","8","9","T","J","Q","K","A"};
string suits[4]={"S", "H", "C", "D"};
string s[20][20];

const string nosol = "No solution.", solex = "Solution exists.";

bool solve2(int y, int x) {
    vector<string> vs(9);
    REP(i,3) REP(j,3) vs[i*3+j]=s[y+i][x+j];
        // same suit?
    bool f=true;
    REP(j, 9) if (vs[j][1]!=vs[0][1]) f=false;
    if (f) return true;

        // distinct value?
    vector<int> vi(256,0);
    f=true;
    REP(j, 9) {
        if (vi[(int)vs[j][0]]) f=false;
        else vi[(int)vs[j][0]]=1;
    }
    return f;
}

bool solve(int &ry1, int &rx1, int &ry2, int &rx2) {
    REP(y1, N-2) REP(x1, M-2) REP(y2, N-2) REP(x2, M-2) {
            //cout<<"!"<<endl;
        if (abs(y1-y2)<=2 && abs(x1-x2)<=2) continue;
        if (solve2(y1, x1) && solve2(y2, x2)) {
            ry1=y1, rx1=x1, ry2=y2, rx2=x2;
            return true;
        }
    }
    return false;
}

int main() {
    while (cin>>N>>M) {
        set<string> cards;
        REP(j, 13) REP(k, 4) cards.insert(numbers[j]+suits[k]);
        cards.insert("**");

        int jk1_y=-1, jk1_x=-1;
        int jk2_y=-1, jk2_x=-1;

        REP(y, N) REP(x, M) {
            cin>>s[y][x];
            if (s[y][x] == "J1") jk1_y=y, jk1_x=x;
            else if (s[y][x] == "J2") jk2_y=y, jk2_x=x;
            else cards.erase( cards.find(s[y][x]) );
        }

        FORIT(jt1, cards) FORIT(jt2, cards) {
            if (jt1 == jt2) continue;
            if (jk1_y >= 0) { s[jk1_y][jk1_x] = *jt1; if (*jt1=="**") { continue; } }
            if (jk2_y >= 0) { s[jk2_y][jk2_x] = *jt2; if (*jt2=="**") { continue; } }

            int y1, x1, y2, x2;
            bool res=solve(y1, x1, y2, x2);
            if (res) {
                cout<<solex<<endl;
                if (jk1_y >= 0 && jk2_y < 0) printf("Replace J1 with %s.", jt1->c_str());
                if (jk1_y < 0 && jk2_y >= 0) printf("Replace J2 with %s.", jt2->c_str());
                if (jk1_y >= 0 && jk2_y >= 0) printf("Replace J1 with %s and J2 with %s.", jt1->c_str(), jt2->c_str());
                if (jk1_y < 0 && jk2_y < 0) printf("There are no jokers.");
                puts("");
                printf("Put the first square to (%d, %d).\n", y1+1, x1+1);
                printf("Put the second square to (%d, %d).\n", y2+1, x2+1);
                goto NEXTCASE;
            }
        }
        cout<<nosol<<endl;
NEXTCASE:;
    }
}
