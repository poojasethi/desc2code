#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <string>

#define Forn(i, n) for(i = 0; i < (int)(n); ++i)
#define forn(i, n) for(int i = 0; i < (int)(n); ++i)
#define ford(i, n) for(int i = (int)(n-1); i >= 0; --i)

#define mp make_pair

using namespace std;

int n, m;

string map[17][17], repJ[2];
vector<string> allCard;
string FR = "23456789TJQKA", SD = "CDHS";
int SQ[2][2];
int Bmap[17][17];

bool check2(){
    forn(num, 2){
        bool f2 = 1;
        forn(di, 3)
            forn(dj, 3)
                f2 &= (map[SQ[num][0]+di][SQ[num][1]+dj][1] == map[SQ[num][0]][SQ[num][1]][1]);
        string tmp;
        forn(di, 3)
            forn(dj, 3)
                tmp += map[SQ[num][0]+di][SQ[num][1]+dj][0];
        sort(tmp.begin(), tmp.end());
        if(unique(tmp.begin(), tmp.end()) != tmp.end() && !f2)
            return 0;
    }
    return 1;
}

bool check(){
    Forn(SQ[0][0], n - 2)
        Forn(SQ[0][1], m - 2)
            Forn(SQ[1][0], n - 2)
                Forn(SQ[1][1], m - 2){
                    bool ok = 1;
                    forn(num, 2)
                        forn(di, 3)
                            forn(dj, 3)
                                if(++Bmap[SQ[num][0]+di][SQ[num][1]+dj] == 2)
                                    ok = 0;
                    forn(num, 2)
                        forn(di, 3)
                            forn(dj, 3)
                                --Bmap[SQ[num][0]+di][SQ[num][1]+dj];
                    if(ok){
                        if(check2())
                            return 1;
                    }
                }
    return 0;

}

void f(int r, int c){
    if(r < n){
        if(c == m)
            f(r + 1, 0);
        else if(isdigit(map[r][c][1])){
            string J = map[r][c];
            forn(i, allCard.size()){
                if(allCard[i] == repJ[0] || allCard[i] == repJ[1])
                    continue;
                map[r][c] = allCard[i];
                repJ[J[1]-'1'] = map[r][c];
                f(r, c + 1);
                repJ[J[1]-'1'] = "";
            }
            map[r][c] = J;
        }else
            f(r, c + 1);
    }else{
        if(check()){
            cout << "Solution exists." << endl;
            if(repJ[0].length() == 0 && repJ[1].length() == 0 )
                cout << "There are no jokers." << endl;
            else if(repJ[0].length() == 0 || repJ[1].length() == 0 ){
                if(repJ[0].length() == 0)
                    cout << "Replace J2 with " << repJ[1] << "." << endl;
                else
                    cout << "Replace J1 with " << repJ[0] << "." << endl;
            }else{
                cout << "Replace J1 with " << repJ[0] << " and J2 with " << repJ[1] << "." << endl;
            }
            cout << "Put the first square to (" << SQ[0][0] + 1 << ", " << SQ[0][1] + 1 << ")." << endl;
            cout << "Put the second square to (" << SQ[1][0] + 1<< ", " << SQ[1][1] + 1 << ")." << endl;
            exit(0);
        }
    }
}

int main()
{
    forn(i, FR.length())
        forn(j, SD.length())
            allCard.push_back(string(1, FR[i]) + SD[j]);
    cin >> n >> m;
    int tmp = 0;
    forn(i, n)
        forn(j, m){
            cin >> map[i][j];
            if(!isdigit(map[i][j][1]))
                allCard.erase(find(allCard.begin(), allCard.end(), map[i][j]));
            else ++tmp;
        }
    f(0, 0);
    cout << "No solution." << endl;
    return 0;
}
