#pragma comment(linker, "/STACK:16777216")

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cfloat>
#include <climits>
#include <cctype>
#include <cmath>
#include <cassert>
#include <ctime>

#include <iostream>
#include <iomanip>
#include <algorithm>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <list>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <bitset>
#include <complex>
#include <functional>
#include <numeric>

using namespace std;

template<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }

typedef long long ll;

#define eps 1e-10
#define inf 0x3f3f3f3f
#define INF 0x3f3f3f3f3f3f3f3fLL

#define rep(x,y,z) for(int(x)=(y);(x)<(z);(x)++)
#define cast(x,t) *({stringstream ss;static t __ret;ss<<x,ss>>__ret;&__ret;})

#define dbg(x) cout << #x << " == " << x << endl
#define print(x) cout << x << endl

// var
string tab[20][20];
int n, m, _1, _2;
int jx[20], jy[20];

string a[] = { "2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K", "A" };
string b[] = { "C", "D", "H" , "S" };
map<int,string> mapa;
set<string> mesa;

int vis[20][20], passo;
int X1, Y1, X2, Y2;

set<char> rank, suit;

int test(int x, int y) {
	rank.clear(); suit.clear();	
	rep(i,0,3) rep(j,0,3) {
		if(x + i >= n || y + j >= m || vis[x+i][y+j] == passo) return 0; else vis[x+i][y+j] = passo;
		if(tab[x+i][y+j] == string("J1") || tab[x+i][y+j] == string("J2")) return 0;
		rank.insert( tab[x+i][y+j][0] );
		suit.insert( tab[x+i][y+j][1] );
	}
	return rank.size() == 9 || suit.size() == 1;
}

int test(int x1, int y1, int x2, int y2) {
	++passo;
	return test(x1,y1) && test(x2,y2);
}

int ok() {
	rep(x1,0,n) rep(y1,0,m) rep(x2,0,n) rep(y2,0,m) if( test(x1,y1,x2,y2) ) {
		X1 = x1; Y1 = y1; X2 = x2; Y2 = y2;
		return 1;
	}
	return 0;
}

int main() {
	
	// solve
	for(int i = 0, k = 0; i < 13; i++) {
		for(int j = 0; j < 4; j++) {
			mapa[k++] = a[i] + b[j];
		}
	}
	
	cin >> n >> m;
	
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++) {
			cin >> tab[i][j];
			mesa.insert( tab[i][j] );
			if(tab[i][j][0] == 'J' && !isalpha(tab[i][j][1])) {
				jx[ tab[i][j][1]-'1' ] = i; jy[ tab[i][j][1]-'1' ] = j;
				if(tab[i][j][1] == '1') _1 = 1; else _2 = 1;
			}
		}
	
	if(!_1 && !_2) {
		if(ok()) {
			puts("Solution exists.\nThere are no jokers.");
			printf("Put the first square to (%d, %d).\nPut the second square to (%d, %d).\n",X1+1,Y1+1,X2+1,Y2+1);
		}
		else {
			puts("No solution.");
		}
	}
	else if(_1 & !_2 ) {
		for(int i = 0; i < 52; i++) if(mesa.count(mapa[i]) == 0) {
			tab[jx[0]][jy[0]] = mapa[i];
			if(ok()) {
				puts("Solution exists.");
				printf("Replace J1 with %s.\n", mapa[i].c_str());
				printf("Put the first square to (%d, %d).\nPut the second square to (%d, %d).\n",X1+1,Y1+1,X2+1,Y2+1);
				return 0;
			}
		}
		puts("No solution.");
	}
	else if(!_1 & _2 ) {
		for(int i = 0; i < 52; i++) if(mesa.count(mapa[i]) == 0) {
			tab[jx[1]][jy[1]] = mapa[i];
			if(ok()) {
				puts("Solution exists.");
				printf("Replace J2 with %s.\n", mapa[i].c_str());
				printf("Put the first square to (%d, %d).\nPut the second square to (%d, %d).\n",X1+1,Y1+1,X2+1,Y2+1);
				return 0;
			}
		}
		puts("No solution.");
	}
	else {
		for(int i = 0; i < 52; i++) if(mesa.count(mapa[i]) == 0) for(int j = 0; j < 52; j++) if(j != i && mesa.count(mapa[j]) == 0) {
			tab[jx[0]][jy[0]] = mapa[i];
			tab[jx[1]][jy[1]] = mapa[j];
			if(ok()) {
				puts("Solution exists.");
				printf("Replace J1 with %s and J2 with %s.\n", mapa[i].c_str(), mapa[j].c_str());
				printf("Put the first square to (%d, %d).\nPut the second square to (%d, %d).\n",X1+1,Y1+1,X2+1,Y2+1);
				return 0;
			}
		}
		puts("No solution.");
	}
	
	return 0;
}

