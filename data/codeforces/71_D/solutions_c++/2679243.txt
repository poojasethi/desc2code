#include<algorithm>
#include<iostream>
#include<cstdio>
#include<string>

using namespace std;

const int maxn = 20;

int n , m;
int A[maxn][maxn] , B[maxn][maxn] , C[maxn][maxn];
string str , data[maxn][maxn] , sw[3] , answ[3];
bool used[maxn][maxn];
int x1 = -1 , y1 , x2 , y2;

void input() {
	scanf( "%d%d" , &n , &m );
	for ( int i = 1 ; i <= n ; i++ )
		for ( int j = 1 ; j <= m ; j++ ) {
			cin >> str;
			data[i][j] = str;
			if ( str == "J1" ) C[i][j] = 1; else
			if ( str == "J2" ) C[i][j] = 2; else {
				if ( str[0] == 'A' ) A[i][j] = 1; else
				if ( str[0] == 'T' ) A[i][j] = 10; else
				if ( str[0] == 'J' ) A[i][j] = 11; else
				if ( str[0] == 'Q' ) A[i][j] = 12; else
				if ( str[0] == 'K' ) A[i][j] = 13; else A[i][j] = str[0] - '0';
				if ( str[1] == 'C' ) B[i][j] = 1; else
				if ( str[1] == 'D' ) B[i][j] = 2; else
				if ( str[1] == 'H' ) B[i][j] = 3; else B[i][j] = 4;
				used[A[i][j]][B[i][j]] = true;
			}
		}
}

bool check( int r , int c ) {
	bool ok = true;
	for ( int i = 0 ; i < 3 ; i++ )
		for ( int j = 0 ; j < 3 ; j++ )
			if ( B[r + i][c + j] != B[r][c] ) {
				ok = false;
				break;
			}
	if ( ok ) return true;
	int tub[maxn];
	for ( int i = 1 ; i <= 13 ; i++ )
		tub[i] = 0;
	for ( int i = 0 ; i < 3 ; i++ )
		for ( int j = 0 ; j < 3 ; j++ )
			if ( ++tub[A[r + i][c + j]] > 1 ) return false;
	return true;
}

void caln() {
	for ( int i = 1 ; i <= n - 2 ; i++ )
		for ( int j = 1 ; j <= m - 2 ; j++ )
			for ( int k = 1 ; k <= n - 2 ; k++ )
				for ( int l = 1 ; l <= m - 2 ; l++ ) {
					if ( max( abs( i - k ) , abs( j - l ) ) < 3 ) continue;
					if ( check( i , j ) && check( k , l ) ) {
						x1 = i , y1 = j;
						x2 = k , y2 = l;
						answ[1] = sw[1];
						answ[2] = sw[2];
					}
				}
}

string num( int x ) {
	if ( x == 1 ) return "A";
	if ( x == 10 ) return "T";
	if ( x == 11 ) return "J";
	if ( x == 12 ) return "Q";
	if ( x == 13 ) return "K";
	return string( 1 , '0' + x );
}

string let( int x ) {
	if ( x == 1 ) return "C";
	if ( x == 2 ) return "D";
	if ( x == 3 ) return "H";
	return "S";
}

void search( int r , int c ) {
	if ( r > n ) {
		caln();
		return;
	}
	if ( c > m ) {
		search( r + 1 , 1 );
		return;
	}
	if ( C[r][c] == 1 || C[r][c] == 2 ) {
		for ( int i = 1 ; i <= 13 ; i++ )
			for ( int j = 1 ; j <= 4 ; j++ )
				if ( !used[i][j] ) {
					A[r][c] = i;
					B[r][c] = j;
					used[i][j] = true;
					sw[C[r][c]] = num( i ) + let( j );
					search( r , c + 1 );
					A[r][c] = B[r][c] = 0;
					used[i][j] = false;
				}
	} else
		search( r , c + 1 );
}

void solve() {
	search( 1 , 1 );
	if ( x1 == -1 ) {
		printf( "No solution.\n" );
		return;
	}
	printf( "Solution exists.\n" );
	if ( answ[1].length() == 0 && answ[2].length() == 0 ) printf( "There are no jokers.\n" ); else
	if ( answ[2].length() == 0 ) cout << "Replace J1 with " << answ[1] << "." << endl; else
	if ( answ[1].length() == 0 ) cout << "Replace J2 with " << answ[2] << "." << endl; else
		cout << "Replace J1 with " << answ[1] << " and J2 with " << answ[2] << "." << endl;
	printf( "Put the first square to (%d, %d).\n" , x1 , y1 );
	printf( "Put the second square to (%d, %d).\n" , x2 , y2 );
}

int main() {
	input();
	solve();
	
	return 0;
}
