#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <cstring>
#include <sstream>
#include <cassert>
using namespace std;
static const double EPS = 1e-10;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> PI;
#define rep(i,n) for(int i=0;i<(int)n;++i)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define ALL(c) (c).begin(), (c).end()
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)
#define F first
#define S second
int dx[]={0,1,0,-1},dy[]={1,0,-1,0};

string in[17][17];
int n,m,jas;
set<string> app;
PI jpos[2];
int jnum[2];
string repj[2];

string to(int i){
  char cc[]={'C','D','H','S'};
  string ret;
  rep(j,4){
    if(i<=13){
      switch(i){
      case 1:ret+='A';break;
      case 10:ret+='T';break;
      case 11:ret+='J';break;
      case 12:ret+='Q';break;
      case 13:ret+='K';break;
      default:ret+=i+'0';break;
      }
      ret+=cc[j];
      return ret;
    }
    i-=13;
  }
}

bool can(){
  rep(i,n-2){
    rep(j,m-2){
      set<char> sapp;
      set<int> numapp;
      rep(x,3)rep(y,3){
    sapp.insert(in[i+x][j+y][1]);
    numapp.insert(in[i+x][j+y][0]);
      }
      if(sapp.size()!=1 && numapp.size()!=9)continue;
      rep(k,n-2){
    rep(l,m-2){
      bool ok=true;
      rep(x,3)rep(y,3){
        if(i<=k+x && k+x<=i+2 && j<=l+y && l+y<=j+2)ok=false;
      }
      if(!ok)continue;
      set<char> sapp2,numapp2;
      rep(x,3)rep(y,3){
        sapp2.insert(in[k+x][l+y][1]);
        numapp2.insert(in[k+x][l+y][0]);
      }
      if(sapp2.size()!=1 && numapp2.size()!=9)continue;
      cout<<"Solution exists."<<endl;
      if(jas==1){
        cout<<"Replace J"<<jnum[0]<<" with "<<repj[0]<<'.'<<endl;
      }else if(jas==2){
        cout<<"Replace J1 with "<<repj[0]<<" and J2 with "<<repj[1]<<'.'<<endl;
      }else cout<<"There are no jokers."<<endl;
      cout<<"Put the first square to ("<<i+1<<", "<<j+1<<")."<<endl;
      cout<<"Put the second square to ("<<k+1<<", "<<l+1<<")."<<endl;
      return true;
    }
      }
    }
  }
  return false;
}

bool dfs(int df){
  if(df==0){
    return can();
  }
  rep(i,52){
    string rep=to(i+1);
    if(app.count(rep))continue;
    int x=jpos[df-1].F,y=jpos[df-1].S;
    app.insert(rep);
    in[x][y]=rep;
    repj[df-1]=rep;
    if(dfs(df-1))return true;
    app.erase(rep);
  }
  return false;
}

main(){
  cin>>n>>m;
  rep(i,n){
    rep(j,m){
      cin>>in[i][j];
      if(!isdigit(in[i][j][1]))app.insert(in[i][j]);
      else {
    jnum[jas]=in[i][j][1]-'0';
    jpos[jas++]=mp(i,j);
      }
    }
  }

  if(jas==2 && jnum[0]==2){
    swap(jnum[0],jnum[1]);
    swap(jpos[0],jpos[1]);
  }
  if(dfs(jas)){
    return 0;
  }
  cout<<"No solution."<<endl;
}
