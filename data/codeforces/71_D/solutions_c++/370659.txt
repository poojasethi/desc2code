#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())


string cards[]={"2S","2C","2H","2D","3S","3C","3H","3D","4S","4C","4H","4D","5S","5C","5H","5D","6S","6C","6H","6D","7S","7C","7H","7D","8S","8C","8H","8D","9S","9C","9H","9D","AC","AD","AH","AS","TC","TD","TH","TS","JC","JD","JH","JS","QC","QD","QH","QS","KC","KD","KH","KS","J1","J2"};
map<string,int> stoi;
string board[54][54];
int used[54];
int h,w;
pair<int,int> check2(int x,int y){
	pair<int,int> res;
	res.first=res.second=-1;
	rep(i,h)rep(j,w)if(i+2<h && j+2<w && !(i-2<=x && x<=i+2 && j-2<=y && y<=j+2)){
		set<char> number;
		set<char> suits;
		rep(k,3)rep(l,3){
			number.insert(board[i+k][j+l][0]);
			suits.insert(board[i+k][j+l][1]);
		}
		if(sz(number)==9 || sz(suits)==1){
			res.first=x*w+y;
			res.second=i*w+j;
			return res;
		}
	}
	return res;
}
pair<int,int> check(){
	pair<int,int> res;
	res.first=res.second=-1;
	rep(i,h)rep(j,w)if(i+2<h && j+2<w){
		set<char> number;
		set<char> suits;
		rep(k,3)rep(l,3){
			number.insert(board[i+k][j+l][0]);
			suits.insert(board[i+k][j+l][1]);
		}
		if(sz(number)==9 || sz(suits)==1) res=check2(i,j);
		if(res.first!=-1) return res;
	}
	return res;
}
int main(){
	cin>>h>>w;
	rep(i,h)rep(j,w) cin>>board[i][j];
	rep(i,54) stoi[cards[i]]=i;
	rep(i,54) used[i]=0;
	rep(i,h)rep(j,w) used[stoi[board[i][j]]]=1;
	int j1=-1,j2=-1;
	rep(i,h)rep(j,w){
		if(board[i][j]=="J1") j1=i*w+j;
		if(board[i][j]=="J2") j2=i*w+j;
	}
	int ok=0;
	pair<int,int> res;
	if(j1!=-1 && j2!=-1){
		rep(i,52)rep(j,52)if(ok==0 && i!=j && used[i]==0 && used[j]==0){
			board[j1/w][j1%w]=cards[i];
			board[j2/w][j2%w]=cards[j];
			res=check();
			if(res.first!=-1){
				ok=1;
				cout<<"Solution exists."<<endl;
				cout<<"Replace J1 with "<<cards[i]<<" and J2 with "<<cards[j]<<"."<<endl;
				printf("Put the first square to (%d, %d).\n",res.first/w+1,1+res.first%w);
				printf("Put the second square to (%d, %d).\n",res.second/w+1,1+res.second%w);
			}	
		}
		if(ok==0)	cout<<"No solution."<<endl;
	}else if(j1!=-1 ){
		rep(i,52)if(used[i]==0 && ok==0){
			board[j1/w][j1%w]=cards[i];
			res=check();
			if(res.first!=-1){
				ok=1;
				cout<<"Solution exists."<<endl;
				cout<<"Replace J1 with "<<cards[i]<<"."<<endl;
				printf("Put the first square to (%d, %d).\n",res.first/w+1,1+res.first%w);
				printf("Put the second square to (%d, %d).\n",res.second/w+1,1+res.second%w);
			}	
		}
		if(ok==0)	cout<<"No solution."<<endl;
	}else if(j2!=-1 ){
		rep(i,52)if(used[i]==0 && ok==0){
			board[j2/w][j2%w]=cards[i];
			res=check();
			if(res.first!=-1){
				ok=1;
				cout<<"Solution exists."<<endl;
				cout<<"Replace J2 with "<<cards[i]<<"."<<endl;
				printf("Put the first square to (%d, %d).\n",res.first/w+1,1+res.first%w);
				printf("Put the second square to (%d, %d).\n",res.second/w+1,1+res.second%w);
			}	
		}
		if(ok==0)	cout<<"No solution."<<endl;
	}else{
		res=check();
		if(res.first!=-1){
			cout<<"Solution exists."<<endl;
			cout<<"There are no jokers."<<endl;
			printf("Put the first square to (%d, %d).\n",res.first/w+1,1+res.first%w);
			printf("Put the second square to (%d, %d).\n",res.second/w+1,1+res.second%w);
		}else{
			cout<<"No solution.\n";
		}
	}
}
