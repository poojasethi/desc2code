#include <algorithm>
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <limits.h>
#include <sstream>
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
using namespace std;

string c[] = {"2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K", "A"};
string s[] = {"C", "D", "H", "S"};
vector<string> cards;
map<string,int> used;
string sol[20][20];
vector<string> notUsed;

bool check(int x, int y) {
	set<char> s1,s2;
	for ( int i = x; i < x+3; i++ )
		for ( int j = y; j < y+3; j++ )
			s1.insert(sol[i][j][0]), s2.insert(sol[i][j][1]);
	return s1.size()==9 || s2.size()==1;
}

int main() {
	for ( int i = 0; i < 4; i++ )
		for ( int j = 0; j < 13; j++ )
			cards.push_back(c[j] + s[i]);

	int N, M;
	scanf("%d %d\n", &N, &M);
	int j1x = -1, j1y = -1, j2x = -1, j2y = -1;
	for ( int i = 0; i < N; i++ )
		for ( int j = 0; j < M; j++ ) {
			cin >> sol[i][j];
			if ( sol[i][j] == "J1" ) j1x = i, j1y = j;
			else if ( sol[i][j] == "J2" ) j2x = i, j2y = j;
			used[sol[i][j]] = true;
		}
	
	for ( int i = 0; i < cards.size(); i++ ) if ( !used[cards[i]] ) notUsed.push_back(cards[i]);

	vector<string> v1,v2;
	for ( int i = 0; i < notUsed.size(); i++ ) for ( int j = 0; j < notUsed.size(); j++ ) {
		if ( i == j ) continue;
		if ( j1x>=0 ) sol[j1x][j1y] = notUsed[i];
		if ( j2x>=0 ) sol[j2x][j2y] = notUsed[j];
		for ( int i1 = 0; i1 < N-2; i1++ ) for ( int j1 = 0; j1 < M-2; j1++ )
			for ( int i2 = 0; i2 < N-2; i2++ ) for ( int j2 = 0; j2 < M-2; j2++ )
				if ( (i2-i1) >= 3 || (j2-j1) >= 3 )
					if ( check(i1,j1) && check(i2,j2) ) {
						printf("Solution exists.\n");
						if ( j1x == -1 && j2x == -1 ) printf("There are no jokers.\n");
						else if ( j2x == -1 ) printf("Replace J1 with %s.\n", notUsed[i].c_str());
						else if ( j1x == -1 ) printf("Replace J2 with %s.\n", notUsed[j].c_str());
						else printf("Replace J1 with %s and J2 with %s.\n", notUsed[i].c_str(), notUsed[j].c_str());
						printf("Put the first square to (%d, %d).\n", i1+1,j1+1);
						printf("Put the second square to (%d, %d).\n", i2+1,j2+1);
						return 0;
					}
	}

	cout << "No solution." << endl;
	return 0;
}
