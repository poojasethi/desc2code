#include <algorithm>
#include <bitset>
#include <cassert>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <iterator>
#include <limits>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;


/* Prewritten code begins */
#define PII         pair<int,int>
#define REP(i,n)    for(int i=0; i<(n); ++i)
#define SIZE(x)     (int)(x).size()
#define MP          make_pair
#define FORE(i,c)   for(VAR(i,(c).begin()); i!=(c).end(); ++i)
#define VAR(i,v)    __typeof(v) i=(v)
#define X           first
#define Y           second
#define FOR(i,a,b)  for(int i=(a); i<=(b); ++i)
/* Prewritten code ends */

string A[17][17];
string ranks[] = {"2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K", "A"};
string suits[] = {"C", "D", "H", "S"};
PII pos[10];
set<char> ra, su;
char jok[10];
inline bool check(int r, int c) {
	ra.clear(); su.clear();
	REP(i,3) REP(j,3) {
		ra.insert(A[r+i][c+j][0]);
		su.insert(A[r+i][c+j][1]);
	}
	return SIZE(ra)==9 || SIZE(su)==1;
}
inline bool ins(int r, int c, int rr, int cc) {
	return rr <= r && r < rr+3 && cc <= c && c < cc+3;
}
int main() {
	set<string> used;
	int n, m;
	cin >> n >> m;
	if(n*m < 18 || max(n,m) < 6) {
		cout << "No solution." << endl;
		return 0;
	}
	REP(i,13) REP(j,4) used.insert(ranks[i]+suits[j]);
	int nj = 0;
	REP(i,n) REP(j,m) {
		cin >> A[i][j];
		used.erase(A[i][j]);
		if(A[i][j][0]=='J' && isdigit(A[i][j][1])) pos[nj] = MP(i,j), jok[nj] = A[i][j][1], nj++;
	}
	if(nj == 2 && jok[0] == '2') swap(pos[0],pos[1]);
	FORE(j1,used) {
		if(nj) A[pos[0].X][pos[0].Y] = *j1;
		FORE(j2,used) if(*j1 != *j2) {
			if(nj>1) A[pos[1].X][pos[1].Y] = *j2;
			REP(r1,n-2) REP(c1,m-2) if(check(r1,c1)) {
				FOR(r2,r1,n-3) REP(c2,m-2) if(!ins(r2,c2,r1,c1) && !ins(r2,c2+2,r1,c1) && check(r2,c2)) {
					cout << "Solution exists." << endl;
					if(nj == 0) cout << "There are no jokers." << endl;
					if(nj == 1) cout << "Replace J" << jok[0] << " with " << *j1 << "." << endl;
					if(nj == 2) cout << "Replace J1 with " << *j1 << " and J2 with " << *j2 << "." << endl;
					cout << "Put the first square to (" << r1+1 << ", " << c1+1 << ")." << endl;
					cout << "Put the second square to (" << r2+1 << ", " << c2+1 << ")." << endl;
					goto C;
				}
			}
		}
	}
	cout << "No solution." << endl;
C:;	return 0;
}
