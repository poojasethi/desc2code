#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cstring>
#include<cmath>
using namespace std;

int n,m,bd[20][20],used[55];
char card[5],num[]={'A','2','3','4','5','6','7','8','9','T','J','Q','K'},suit[]={'C','D','H','S'};
int jx[4],jy[4],jok=0,end=0,px[55],py[55],pos=0;

void doit (int cur) {
	if (end==1) return;
	if (cur==3) {
		pos=0;
		for (int i=0; i<n-2; i++)
			for (int j=0; j<m-2; j++) {
				int ok=1;
				for (int a=0; a<9; a++)
					for (int b=0; b<a; b++)
						if (bd[i+a/3][j+a%3]%13==bd[i+b/3][j+b%3]%13) {
							ok=0;
							goto bye;
						}
				bye:
				if (ok) {
					px[pos]=i; py[pos]=j;
					pos++;
				}
			}
		for (int i=0; i<pos; i++)
			for (int j=0; j<i; j++)
				if (abs(px[i]-px[j])>=3 || abs(py[i]-py[j])>=3) {
					printf("Solution exists.\n");
					if (jok==0) printf("There are no jokers.\n");
					if (jok==1) {
						for (int k=1; k<=2; k++)
							if (jx[k]!=-1) {
								printf("Replace J%d with %c%c.\n",k,num[bd[jx[k]][jy[k]]%13],suit[bd[jx[k]][jy[k]]/13]);
							}
					}
					if (jok==2) printf("Replace J1 with %c%c and J2 with %c%c.\n",num[bd[jx[1]][jy[1]]%13],suit[bd[jx[1]][jy[1]]/13],num[bd[jx[2]][jy[2]]%13],suit[bd[jx[2]][jy[2]]/13]);
					printf("Put the first square to (%d, %d).\n",px[i]+1,py[i]+1);
					printf("Put the second square to (%d, %d).\n",px[j]+1,py[j]+1);
					end=1;
					goto fin;
				}
		fin: ;
		return;
	}
	if (jx[cur]==-1) {
		doit(cur+1);
		return;
	}
	for (int i=0; i<52; i++)
		if (used[i]==0) {
			bd[jx[cur]][jy[cur]]=i;
			used[i]=cur;
			doit(cur+1);
			used[i]=0;
		}
}

int main() {
	scanf("%d%d",&n,&m);
	memset(used,0,sizeof(used));
	memset(jx,-1,sizeof(jx));
	for (int i=0; i<n; i++)	
		for (int j=0; j<m; j++) {
			scanf("%s",card);
			if (card[0]=='J' && card[1]>='1' && card[1]<='2') {
				bd[i][j]=-1;
				jx[card[1]-'0']=i;
				jy[card[1]-'0']=j;
				jok++;
			}
			else {
				bd[i][j]=0;
				for (int k=0; k<4; k++)
					if (card[1]==suit[k]) break;
					else bd[i][j]+=13;
				for (int k=0; k<13; k++)
					if (card[0]==num[k]) break;
					else bd[i][j]++;
				used[bd[i][j]]=1;
			}
		}
	doit(1);
	if (end==0) {
		printf("No solution.\n");
	}
}
