#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <string>
#include <vector>

const char kRank[] = "A23456789TJQK";
const char kSuit[] = "CDHS";

std::vector<std::pair<int, int> > pos;
std::vector<std::string> org;
std::vector<int> rep;
std::pair<int, int> ans[2];
int mask[13];
int map[52][52];
bool state[52][52];
bool used[52];
int n, m;

bool Check() {
  for (int i = 0; i + 3 <= n; ++i)
    for (int j = 0; j + 3 <= m; ++j) {
      bool same_suit = true, pairwise = true;
      memset(mask, 0, sizeof(mask));
      for (int k = 0; k < 3; ++k)
        for (int l = 0; l < 3; ++l) {
          if (map[i + k][j + l] / 13 != map[i][j] / 13) same_suit = false;
          if (++mask[map[i + k][j + l] % 13] > 1) pairwise = false;
        }
      state[i][j] = (same_suit || pairwise);
    }
  for (int i = 0; i + 3 <= n; ++i)
    for (int j = 0; j + 3 <= m; ++j) if (state[i][j])
      for (int k = 0; k + 3 <= n; ++k)
        for (int l = 0; l + 3 <= m; ++l) if (state[k][l])
          if (std::abs(i - k) >= 3 || std::abs(j - l) >= 3) {
            ans[0] = std::make_pair(i, j);
            ans[1] = std::make_pair(k, l);
            return true;
          }
  return false;
}

bool DFS(size_t step) {
  if (step == pos.size())
    return Check();
  for (int i = 0; i < 52; ++i)
    if (!used[i]) {
      map[pos[step].first][pos[step].second] = i;
      rep[step] = i;
      used[i] = true;
      if (DFS(step + 1)) return true;
      used[i] = false;
    }
  return false;
}

int main() {
  static char card[10];
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j) {
      scanf("%s", card);
      if (!strchr(kSuit, card[1]) || !strchr(kRank, card[0])) {
        pos.push_back(std::make_pair(i, j));
        org.push_back(card);
      } else {
        map[i][j] = (strchr(kSuit, card[1]) - kSuit) * 13 + (strchr(kRank, card[0]) - kRank);
        used[map[i][j]] = true;
      }
    }
  if (org.size() > 1 && org[0] > org[1]) {
    std::swap(pos[0], pos[1]);
    std::swap(org[0], org[1]);
  }
  rep.resize(pos.size());
  if (!DFS(0)) {
    puts("No solution.");
  } else {
    puts("Solution exists.");
    if (pos.size() == 0) puts("There are no jokers.");
    else {
      printf("Replace %s with %c%c", org[0].c_str(), kRank[rep[0] % 13], kSuit[rep[0] / 13]);
      if (pos.size() == 2)
        printf(" and %s with %c%c", org[1].c_str(), kRank[rep[1] % 13], kSuit[rep[1] / 13]);
      puts(".");
    }
    printf("Put the first square to (%d, %d).\n", ans[0].first + 1, ans[0].second + 1);
    printf("Put the second square to (%d, %d).\n", ans[1].first + 1, ans[1].second + 1);
  }
  return 0;
}
