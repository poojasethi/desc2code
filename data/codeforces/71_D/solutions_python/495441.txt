#!/usr/bin/python

import sys
import math

rank = ["2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K", "A"]
suit = ["C", "D", "H", "S"]
def print_ans(has_ans, jokes = [], pos = []):
    if not has_ans:
        print "No solution."
    else:
        print "Solution exists."
        if len(jokes) == 0:
            print "There are no jokers."
        elif len(jokes) == 1:
            print "Replace %s with %s." %(jokes[0][0], jokes[0][1])
        else:
            print "Replace %s with %s and %s with %s." \
                    %(jokes[0][0], jokes[0][1], jokes[1][0], jokes[1][1]) 
        print "Put the first square to (%d, %d)." %(pos[0][0]+1, pos[0][1]+1)
        print "Put the second square to (%d, %d)." %(pos[1][0]+1, pos[1][1]+1)


def overflow(p1, p2, step = 3):
    
    if (p1[0] <= p2[0] < p1[0] + step) and (p1[1] <= p2[1] < p1[1]+step):
        return True
    if (p2[0] <= p1[0] < p2[0] + step) and (p2[1] <= p1[1] < p2[1]+step):
        return True

    if (p1[0] <= p2[0] < p1[0] + step) and (p2[1] <= p1[1] < p2[1]+step):
        return True
    if (p2[0] <= p1[0] < p2[0] + step) and (p1[1] <= p2[1] < p1[1]+step):
        return True

    return False


def test_square(mat):
    hash = dict()
    for r in rank:
        hash[r] = "-"

    for i in range(0,3):
        for j in range(0,3):
            r,s = mat[i][j]
            if hash[r] == "-":
                hash[r] = s
            elif hash[r] != s:
                return False

    return True

def check(mat):
    n,m=len(mat),len(mat[0])
    res = []
    for i in range(0,n-2):
        for j in range(0,m-2):
            if test_square([ mat[k][j:j+3] for k in range(i,i+3) ]):
                res.append((i,j))
    
    for p1 in res:
        for p2 in res:
            if p1 == p2:
                continue
            elif (overflow(p1,p2)):
                continue
            else:
                return [p1,p2]
    return []


def replace_joke(item, cards, mat, jokes):
    if item >= len(jokes):
        pos = check(mat)
        if pos:
            print_ans(has_ans = True, jokes = jokes, pos = pos)
            return True
        else:
            return False

    joke,(jx,jy) = jokes[item]
    for card in cards:
        rest_cards = cards - set([card])
        mat[jx][jy] = card
        jokes[item][1] = card

        rt = replace_joke(item + 1, rest_cards, mat, jokes)
        if rt:
            return True
    jokes[item][1] = (jx,jy)
    return False


if __name__=="__main__":
    data = sys.stdin.readlines()
    n,m = [int(v) for v in data[0].split(' ')]
    mat = []

    cards = set([r+s for r in rank for s in suit])

    mat = [row[:-1].split(' ') for row in data[1:]]

    jokes = []
    for i,row in enumerate(mat):
        for j,card in enumerate(row):
            if card == "J1" or card == "J2":
                jokes.append( [card, (i,j)] )
            else:
                cards.remove(card)
    if (len(jokes) == 2 and jokes[0][0] == "J2" and jokes[1][0] == "J1"):
        jokes.reverse()
    

    rt = replace_joke(0, cards, mat, jokes)
    if not rt:
        print_ans(False)


        
    
    
    
