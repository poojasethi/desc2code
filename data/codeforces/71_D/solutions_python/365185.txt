
#some convinient function

def make_primelist(size):
  global prime
  from math import sqrt
  _prime=[1 for i in xrange(size+1)]
  _prime[0]=0
  _prime[1]=0
  for i in xrange(size):
    if i*i>size:
      break
    if _prime[i]==0:
      continue
    for k in xrange(2*i,size+1,i):
      _prime[k]=0
  prime=_prime

choice_max=2000
dp_choice=[[None for i in xrange(choice_max+1)] for j in xrange(choice_max+1)]
def choice(n,m): #return (n+m)!/(n!m!)
  if n<0 or m<0:
    return 0
  if dp_choice[n][m]!=None:
    return dp_choice[n][m]
  if n==m==0:
    ret=1
  else:
    ret=choice(n-1,m)+choice(n,m-1)
  dp_choice[n][m]=ret
  return ret

def inverse(x,M): #1/x mod m
  x=x%M
  if x==0 or M<=0:
    raise
  a,b,c,d=1,0,0,1
  v1,v2=x,M
  while v2:
    n=v1/v2
    v1,v2=v2,v1-n*v2
    a, b, c, d = c, d, a-n*c, b-n*d
  if v1!=1:
    raise
  return a%M

def div(a,b,M):
  return a*inverse(b,M)%M

def gcd(x,y):
  while y:
    x,y=y,x%y
  return x

"""
example
choice(0,5)==1 and choice(1,4)==5 and choice(2,3)==10
make_primelist(6); prime==[0,0,1,1,0,1,0]
inverse(3,10) == 7
div(7,9,10) == 3  because 27/9==3
gcd(10,15) == 5
"""



def readints():
  return map(int,raw_input().split())

def main():
  global n,m
  n,m=readints()
  data=[raw_input().split() for j in xrange(n)]
  alldata=[d for d2 in reps(data,"J1") for d in reps(d2,"J2")]
  #print alldata
  for d in alldata:
    allplace=[(i,j) for i in xrange(n) for j in xrange(m) if okp(i,j,d)]
    for x1,y1 in allplace:
      for x2,y2 in allplace:
        if abs(x1-x2)<3 and abs(y1-y2)<3:continue
        print"Solution exists."
        joker_mes=[]
        for jk in ["J1","J2"]:
          for i in xrange(n):
            for j in xrange(m):
              if data[i][j]==jk:
                joker_mes.append((jk,d[i][j]))
        if len(joker_mes)==0:
          print"There are no jokers."
        if len(joker_mes)==1:
          jk,c=joker_mes[0]
          print "Replace %s with %s."%(jk,c)
        if len(joker_mes)==2:
          (j1,c1),(j2,c2)=joker_mes
          print "Replace J1 with %s and J2 with %s."%(c1,c2)
        mes((x1,y1),0)
        mes((x2,y2),1)
        return
  print "No solution."
  pass

def ins(x,y):
  return 0<x<n-1 and 0<y<m-1

def reps(data,s):
  rem = allcards-set(data[i][j]for i in xrange(n) for j in xrange(m))
  ret=[]
  for i in xrange(n):
    for j in xrange(m):
      if data[i][j]==s:
        for card in rem:
          ndata=deepcopy(data)
          ndata[i][j]=card
          ret.append(ndata)
        return ret
  return [data]

def mes(p,n):
  th=["first","second"][n]
  print"Put the %s square to (%s, %s)."%(th,p[0],p[1],)

def okp(x,y,dd):
  if not ins(x,y):return False
  adj=[(x+dx,y+dy) for dx in [-1,0,1] for dy in [-1,0,1]]
  return all(dd[x][y][1] == dd[nx][ny][1] for nx,ny in adj) or len(set(dd[nx][ny][0] for nx,ny in adj)) ==9


from copy import deepcopy
ranks="2 3 4 5 6 7 8 9 T J Q K A".split()
suits="C D H S".split()
allcards=set([ra+su for ra in ranks for su in suits])

if __name__=='__main__':
  main()



