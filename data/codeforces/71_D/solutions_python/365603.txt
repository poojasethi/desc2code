#!/usr/bin/python
import math, random, re, sys

NA = -1

def check ():
	global a, n, m, x1, y1, x2, y2
	b = [[False for j in range (m - 2)] for i in range (n - 2)]
	for i in range (n - 2):
		for j in range (m - 2):
		        t = []
			s = []
			for p in range (3):
				for q in range (3):
					s += a[i + p][j + q][0]
					t += a[i + p][j + q][1]
			b[i][j] = (len (set (s)) == 9) or (len (set (t)) == 1)
	for i1 in range (n - 2):
		for j1 in range (m - 2):
			for i2 in range (n - 2):
				for j2 in range (m - 2):
					if b[i1][j1] and b[i2][j2] and ((abs (i2 - i1) >= 3) or (abs (j2 - j1) >= 3)):
						print 'Solution exists.'
						if (x1 == NA) and (x2 == NA):
							print 'There are no jokers.'
						if (x1 == NA) and (x2 != NA):
							print 'Replace J2 with %s.' % (a[x2][y2])
						if (x1 != NA) and (x2 == NA):
							print 'Replace J1 with %s.' % (a[x1][y1])
						if (x1 != NA) and (x2 != NA):
							print 'Replace J1 with %s and J2 with %s.' % (a[x1][y1], a[x2][y2])
						print 'Put the first square to (%d, %d).' % (i1 + 1, j1 + 1)
						print 'Put the second square to (%d, %d).' % (i2 + 1, j2 + 1)
						return True
	return False

def search ():
	global a, left, x1, y1, x2, y2
	if x1 == NA:
		set1 = set (['NA'])
	else:
		set1 = set (left)
	if x2 == NA:
		set2 = set (['NA'])
	else:
		set2 = set (left)
	for p in set1:
		for q in set2:
			if p == 'NA' or q == 'NA' or p != q:
				if x1 != NA:
					a[x1][y1] = p
				if x2 != NA:
					a[x2][y2] = q
				if check ():
					return True
	return False

while True:
	s = sys.stdin.readline ().strip ()
	if s == '':
		s = sys.stdin.readline ().strip ()
		if s == '':
			break
	deck = [x + y for x in '23456789TJQKA' for y in 'CDHS']
	left = set (deck)
	n, m = [int (x) for x in s.split ()]
	a = []
	for i in range (n):
		a += [[x for x in sys.stdin.readline ().split ()]]
		assert len (a[i]) == m

	x1, y1 = NA, NA
	x2, y2 = NA, NA
	for i in range (n):
		for j in range (m):
			if a[i][j] in left:
				left.remove (a[i][j])
			elif a[i][j] == 'J1':
				x1, y1 = i, j
			elif a[i][j] == 'J2':
				x2, y2 = i, j
			else:
				assert False

	if not search ():
		print 'No solution.'
