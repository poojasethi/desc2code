/* DP (Damerau-Levenshtein distance; O(m*n)) */

#include<string>
#include<iostream>

#define rep(i,n) for(int i=0;i<n;i++)

using namespace std;

/* 2*swap_cost >= insert_cost + delete_cost is necessary */
int DamerauLevenshteinDistance(const string &s,const string &t,int INS=1,int DEL=1,int RPL=1,int SWP=1){
	const int LMAX=4000;
	static int dp[LMAX+1][LMAX+1];
	int m=s.length(),n=t.length();

	rep(i,m+1) dp[i][0]=i*DEL;
	rep(j,n+1) dp[0][j]=j*INS;

	int slast[128],tlast[128];
	fill(slast,slast+128,-1);
	rep(i,m){
		fill(tlast,tlast+128,-1);
		rep(j,n){
			int i1=slast[t[j]],j1=tlast[s[i]];

			dp[i+1][j+1]=min(dp[i+1][j]+INS,dp[i][j+1]+DEL);
			dp[i+1][j+1]=min(dp[i+1][j+1],dp[i][j]+(s[i]==t[j]?0:RPL));
			if(i1>=0 && j1>=0){
				dp[i+1][j+1]=min(dp[i+1][j+1],dp[i1][j1]+(i-i1-1)*DEL+SWP+(j-j1-1)*INS);
			}

			tlast[t[j]]=j;
		}
		slast[s[i]]=i;
	}

	return dp[m][n];
}

int main(){
	int ti,td,tr,te;
	string s,t; cin>>ti>>td>>tr>>te>>s>>t;
	cout<<DamerauLevenshteinDistance(s,t,ti,td,tr,te)<<endl;
	return 0;
}
