#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;
typedef long long ll;

const int MAXN = 100100;
int N, M, K;
vector<int> adj[MAXN], len[MAXN];
int train[MAXN][2];
bool vis[MAXN];
int ans = 0;

void dijkstra()
{
	priority_queue<pair<ll, int> > pq;
	pq.push(make_pair(0, 0));
	for (int i = 0; i < K; i++)
		pq.push(make_pair(-train[i][1], -train[i][0]-N));

	while (!pq.empty())
	{
		ll d = -pq.top().first;
		int node = -pq.top().second;
		pq.pop();

		if (node >= N)
		{
			node -= N;
			ans += vis[node];
		}

		if (vis[node])
			continue;
		vis[node] = true;

		for (int i = 0; i < adj[node].size(); i++)
		{
			int next = adj[node][i];
			if (!vis[next])
				pq.push(make_pair(-d-len[node][i], -next));
		}
	}
}

int main()
{
	cin >> N >> M >> K;
	for (int i = 0; i < M; i++)
	{
		int a, b, c;
		cin >> a >> b >> c;
		a--;
		b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
		len[a].push_back(c);
		len[b].push_back(c);
	}

	for (int i = 0; i < K; i++)
	{
		int a, b;
		cin >> a >> b;
		train[i][0] = a - 1;
		train[i][1] = b;
	}

	dijkstra();

	cout << ans << "\n";

	return 0;
}