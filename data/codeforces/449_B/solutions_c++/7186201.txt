#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef long long int ll;

ll infinito=1000000000000LL;

vector<pair<ll,ll> > g[1000000];
ll dist[1000000];

int main()
{
  ios::sync_with_stdio(false);
  ll n,m,k;
  cin>>n>>m>>k;
  for (int i=0;i<m;i++) {
    ll u,v,x;
    cin>>u>>v>>x;
    g[u].push_back(pair<ll,ll> (v,2*x));
    g[v].push_back(pair<ll,ll> (u,2*x));
  }
  for (int i=0;i<k;i++) {
    ll u=1;
    ll v,x;
    cin>>v>>x;
    g[u].push_back(pair<ll,ll> (v,-2*x));
    g[v].push_back(pair<ll,ll> (u,-2*x));
  }
  priority_queue<pair<ll,ll>,vector<pair<ll,ll> >,greater<pair<ll,ll> > > q;
  q.push(pair<ll,ll> (0,1));
  for (int i=1;i<=n;i++)
    dist[i]=infinito;
  dist[1]=0;
  int sol=0;
  while (not q.empty()) {
    pair<ll,ll> p=q.top();
    q.pop();
    ll u=p.second;
    ll d=p.first;
    if (dist[u]==d) {
      if (d%2) {
	sol++;
	d--;
      }
      vector<pair<ll,ll> > &ar=g[u];
      for (int i=0;i<int(ar.size());i++) {
	ll v=ar[i].first;
	ll duv=ar[i].second;
	if (duv<0)
	  duv=-duv+1;
	if (dist[v]>d+duv) {
	  dist[v]=d+duv;
	  q.push(pair<ll,ll> (dist[v],v));
	}
      }
    }
  }
  cout<<k-sol<<endl;
}
