#include<bits/stdc++.h>
using namespace std;
#define pi pair<int,int>
#define pii pair< pi, int >
#define maxm 100005
struct edge {
	int v;
	int wt;
};
vector<edge> adj[maxm];
long long dist[maxm];

struct state {
	int v;
	long long dist;
	int mode;
	bool operator < (const state &o) const {
		if(dist != o.dist) 
			return dist > o.dist;
		if(mode != o.mode)
			return mode > o.mode;
		return v > o.v;
	}
};

int main() {
	int n,m,k;
	scanf("%d %d %d",&n,&m,&k);
	for(int i=0;i<m;i++) {
		int a,b,c;
		scanf("%d %d %d",&a,&b,&c);
		a--,b--;
		adj[a].push_back((edge) {b,c});
		adj[b].push_back((edge) {a,c});
	}
	  fill_n(dist, n, 1000000000000000000LL);
	priority_queue<state> q;
	q.push((state){0,0,0});
	int used=0;
	for(int i=0;i<k;i++) {
		int s,y;
		scanf("%d %d",&s,&y);
		s--;
		q.push((state){s,y,1});
	}
	bool mark[n+1];
	memset(mark,false,sizeof(mark));
	while(!q.empty()) {
		state st= q.top();
		q.pop();
		if(mark[st.v])	
			continue;
		dist[st.v]=st.dist;
		mark[st.v]=true;
		if(st.mode==1)
			used++;
		for(int i=0;i<adj[st.v].size();i++) {
			edge e = adj[st.v][i];
			if(dist[e.v] >= dist[st.v]+ e.wt)
				q.push((state) {e.v,dist[st.v]+ e.wt,0});
		}
	}
	printf("%d\n", k-used);
	return 0;
}
