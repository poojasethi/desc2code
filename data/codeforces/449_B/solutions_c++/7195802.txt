#include <cstdlib>
#include <cstdio>
#include <algorithm>
using namespace std;

typedef long long lld;

struct Edge{int v,w;Edge *x;}*p,*lnk[100009];

int n,m,k,u,v,w,ans,s[100009],y[100009],b[100009];
lld a[100009];
int r,q[100009];
bool inq[100009];

bool cmp(const int A,const int B)
{
	return a[A]>a[B];
}
int main()
{
	scanf("%d%d%d",&n,&m,&k);
	for (int i=2;i<=n;++i) a[i]=0X40000000;
	for (int i=1;i<=m;++i)
	{
		scanf("%d%d%d",&u,&v,&w);
		p=(Edge*)malloc(sizeof(Edge));
		p->v=v;p->w=w;p->x=lnk[u];lnk[u]=p;
		p=(Edge*)malloc(sizeof(Edge));
		p->v=u;p->w=w;p->x=lnk[v];lnk[v]=p;
	}
	for (int i=1;i<=k;++i)
	{
		scanf("%d%d",&v,&w);
		s[i]=v;
		y[i]=w;
		p=(Edge*)malloc(sizeof(Edge));
		p->v=v;p->w=w;p->x=lnk[1];lnk[1]=p;
	}
	inq[q[r++]=1]=true;
	while (r)
	{
		pop_heap(q,q+r,cmp);
		inq[u=q[--r]]=false;
		for (p=lnk[u];p;p=p->x) if (a[u]+p->w<a[p->v])
		{
			a[p->v]=a[u]+p->w;
			if (!inq[p->v])
			{
				inq[q[r++]=p->v]=true;
				push_heap(q,q+r,cmp);
			}
		}
	}
	for (u=1;u<=n;++u) for (p=lnk[u];p;p=p->x) b[p->v]+=a[u]+p->w==a[p->v];
	for (int i=1;i<=k;++i)
	{
		if (a[1]+y[i]!=a[s[i]]) ++ans;
		else if (b[s[i]]>1)
		{
			++ans;
			--b[s[i]];
		}
	}
	printf("%d",ans);
}