#include <iostream>
#include <vector>
#include <set>
using namespace std;
typedef long long ll;
typedef pair <ll,int> pli;
#define X first
#define Y second
#define Size(x) (int)(x).size()
#define mp(x,y) make_pair(x,y)

const ll INF = 1000ll * 1000 * 1000 * 1000 * 1000 * 10;
const int N = 1000 * 100 + 5;
set <pli> st;
vector <pli> adj[N];
ll dis[N];
int par[N];

int main() {
	ios::sync_with_stdio(false);
	int n, m, k, a, b, c;
	cin >> n >> m >> k;
	for(int i = 0;i < m;++i) {
		cin >> a >> b >> c;
		adj[a].push_back(mp(b, c));
		adj[b].push_back(mp(a, c));
	}
	fill(dis, dis + N, INF);
	dis[1] = 0;
	for(int i = 0;i < k;++i) {
		cin >> a >> b;
		dis[a] = min(dis[a], (ll)b);
		par[a] = 1;
	}
	for(int i = 1;i <= n;++i)
		st.insert(mp(dis[i], i));
	int ans = 0;
	while(!st.empty()) {
		int v = st.begin() -> Y;
		//cerr << v << " " << dis[v] << endl;
		st.erase(st.begin());
		if(par[v])
			++ans;
		par[v] = -1;

		for(int i = 0;i < Size(adj[v]);++i) {
			int u = adj[v][i].X, w = adj[v][i].Y;
			if(par[u] != -1 && dis[u] >= dis[v] + w) {
				par[u] = 0;
				st.erase(mp(dis[u], u));
				dis[u] = dis[v] + w;
				st.insert(mp(dis[u], u));
			}
		}
	}
	cout << k - ans << endl;
	return 0;
}

