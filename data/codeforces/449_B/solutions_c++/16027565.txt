#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
const int maxn = 1e5+10;
const ll inf = 1e16;

struct edge{
    int v;
    ll w;
    edge(){}
    edge(int v,ll w):v(v),w(w){}
};

vector<edge> g[maxn];
priority_queue<pair<ll,int> > q;
int n,m,k,u,v,x,s,y,cnt;
bool V[maxn];

void dijkstra(){
    memset(V,0,sizeof V);
    q.push(make_pair(0,1));
    pair<ll,int> tmp;
    while(!q.empty()){
        tmp = q.top();q.pop();
        int u = tmp.second;
        if(u<1){
            u = n+u;
            if(V[u]) cnt++;
        }
        if(V[u]) continue;
        V[u] = 1;
        for(int i=0;i<g[u].size();i++){
            int v = g[u][i].v;
            int w = g[u][i].w;
            if(!V[v]){
                q.push(make_pair(tmp.first-w,v));
            }
        }
    }
}

int main(){
    scanf("%d%d%d",&n,&m,&k);
    while(m--){
        scanf("%d%d%d",&u,&v,&x);
        g[u].push_back(edge(v,x));
        g[v].push_back(edge(u,x));
    }
    for(int i=0;i<k;i++){
        scanf("%d%d",&s,&y);
        q.push(make_pair(-y,s-n));
    }
    dijkstra();
    printf("%d\n",cnt);
    return 0;
}

 