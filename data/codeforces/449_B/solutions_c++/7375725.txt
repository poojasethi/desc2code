#include<cstdio>
#include<cstring>
#include<cmath>
#include<queue>
#include<algorithm>
using namespace std;
typedef long long LL;
#define rep(i,n) for (int i=1;i<=n;++i)
#define mk make_pair
const int N=600005;
priority_queue<pair<LL,int> > H;
int n,m,k,l,x,y,z,ans,son[N],ed[N],next[N],data[N],u[N],v[N],b[N],c[N]; LL d[N];
void add(int x,int y,int z)
{
	ed[++l]=y,data[l]=z,next[l]=son[x],son[x]=l,
	ed[++l]=x,data[l]=z,next[l]=son[y],son[y]=l;
}
int main()
{
	scanf("%d%d%d",&n,&m,&k); rep(i,n) d[i]=1LL<<60; d[1]=0,H.push(mk(0,1));
	rep(i,m) scanf("%d%d%d",&x,&y,&z),add(x,y,z);
	rep(i,k){scanf("%d%d",u+i,v+i); if (v[i]<d[u[i]]) d[u[i]]=v[i],H.push(mk(-v[i],u[i]));}
	while (!H.empty()){
		int x=H.top().second; H.pop(); if (b[x]++) continue;
		for (int p=son[x];p;p=next[p]){
			int y=ed[p];
			if (d[x]+data[p]<d[y]) d[y]=d[x]+data[p],H.push(mk(-d[y],y));
		}
	}
	rep(i,k) if (d[u[i]]==v[i]) ++c[u[i]];
	rep(x,n) for (int p=son[x];p;p=next[p]){
		int y=ed[p];
		if (d[x]+data[p]==d[y]) ++c[y];
	}
	//rep(i,n) printf("%d ",d[i]); puts("");
	rep(i,k) if (d[u[i]]<v[i]) ++ans;
		else if (d[u[i]]==v[i] && c[u[i]]>1) ++ans,--c[u[i]];
	printf("%d\n",ans);
	return 0;
}

