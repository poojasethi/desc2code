#include<cstdio>
#include<queue>
#include<vector>
#include<cstring>
#include<algorithm>
using namespace std;
struct edge
{
	int l,r,w;
};
struct node
{
	int num,w;
	bool use;
	bool operator < (const node &a) const
	{
		return a.w<w||(a.w==w&&a.use<use);
	}
};
vector<edge> v[200005];
int n,m,k;
int dijsktra()
{
	bool vis[200005]={0};
	int w[200005];
	memset(w,-1,sizeof(w));
	priority_queue<node> q;
	node ori;
	ori.num=1;ori.w=0;ori.use=false;
	q.push(ori);
	ori.use=true;
	for(int i=0;i<k;i++)
	{
		scanf("%d%d",&ori.num,&ori.w);
		q.push(ori);
	}
	int ans=0;
	while(!q.empty())
	{
		node p=q.top();
		q.pop();
		if(vis[p.num])continue;
		vis[p.num]=true;
		w[p.num]=p.w;
		if(p.use)ans++;
		for(int i=0;i<v[p.num].size();i++)
		{
			edge pp=v[p.num][i];
			if(pp.r==p.num)swap(pp.l,pp.r);
			if(vis[pp.r])continue;
			node ppp;
			ppp.num=pp.r;
			ppp.w=p.w+pp.w;
			ppp.use=false;
			q.push(ppp);
		}
	}
	ans=k-ans;
	return ans;
}
int main()
{
	scanf("%d%d%d",&n,&m,&k);
	for(int i=0;i<m;i++)
	{
		edge p;
		scanf("%d%d%d",&p.l,&p.r,&p.w);
		v[p.l].push_back(p);
		v[p.r].push_back(p);
	}
	int ans=dijsktra();
	printf("%d\n",ans);
}
 	   	 	 							 				 	   		 	