#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
using namespace std;

vector<pair<int, int> > edges[200001];
bool visited[200001];
long long dist[200001];
int main() {
	for (int i = 1; i <= 200000; i++) dist[i] = 1LL << 62;
	int n, a, b, x, y, z;
	scanf("%d %d %d", &n, &a, &b);
  for (int i = 0; i < a; i++) {
    scanf("%d %d %d", &x, &y, &z);
  	edges[x].push_back({y, z});
		edges[y].push_back({x, z});
  }
	priority_queue<pair<pair<int, int>, int> >pq;
  for (int i = 0; i < b; i++) {
    scanf("%d %d", &y, &z);
    pq.push({{-z, -1}, y});
  }
	pq.push({{0, 0}, 1});
	int ans = b;
	while (!pq.empty()) {
		pair<pair<int, int>, int> f = pq.top();
		int distance = -f.first.first;
		int current = f.second;
		pq.pop();
		if (visited[current]) continue;
		visited[current] = true;
		if (f.first.second == -1) {
		  ans--;
		}
		for (int i = 0; i < edges[current].size(); i++) {
			int node = edges[current][i].first;
			if(!visited[node]) {
				if(distance + edges[current][i].second < dist[node]) {
					dist[node] = distance + edges[current][i].second;
					pq.push({{-dist[node], 0}, node});
				}
			}
		}
	}
	printf("%d\n", ans);
	return 0;
}
