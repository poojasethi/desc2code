#include <iostream>
#include <set>
#include <vector>
#include <map>
using namespace std;

typedef pair<long long,long long> ii;
typedef pair<ii,char> iii;

int main(){
  long long n,m,k;
  cin >> n >> m >> k;
  vector<vector<ii> > adj (n+1);
  for(long long i=0; i<m; i++){
    long long a,b,d;
    cin >> a >> b >> d;
    adj[a].push_back(make_pair(d,b));
    adj[b].push_back(make_pair(d,a));
  }
  long long answer = 0;
  set<iii> dijk;
  dijk.insert(make_pair(make_pair(0,1),'r'));
  for(long long i=0; i<k; i++){
    long long s,y;
    cin >> s >> y;
    iii newelement = make_pair(make_pair(y,s),'t');
    if(dijk.count(newelement)==1) answer++;
    else dijk.insert(newelement);
  }
  set<long long> visited;
  while(dijk.size() > 0){
    iii now = *dijk.begin();
    dijk.erase(dijk.begin());
    if(visited.count(now.first.second)==1){
      if(now.second == 't'){
        answer++;
      }
      continue;
    }
    visited.insert(now.first.second);
    for(long long i=0; i<adj[now.first.second].size(); i++){
      ii neighbour = adj[now.first.second][i];
      neighbour.first += now.first.first;
      dijk.insert(make_pair(neighbour,'r'));
    }
  }
  cout << answer << endl;
}
