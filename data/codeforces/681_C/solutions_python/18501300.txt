#!/usr/bin/python

import os
import sys
import itertools
import heapq

def solve(f):
    n = f.read_int()
    h = []
    ans = []

    for _ in xrange(n):
        l = f.read_str_list()
        com = l[0]
        num = None if com == "removeMin" else int(l[1])

        if com == "insert":
            heapq.heappush(h, num)
            ans.append("insert %d"%num)

        elif com == "getMin":
            while len(h) > 0 and h[0] < num:
                heapq.heappop(h)
                ans.append("removeMin")

            if len(h) == 0 or h[0] > num:
                heapq.heappush(h, num)
                ans.append("insert %d"%num)

            ans.append("getMin %d"%num)

        elif com == "removeMin":
            if len(h) == 0:
                heapq.heappush(h, 1)
                ans.append("insert 1")

            heapq.heappop(h)
            ans.append("removeMin")

    return "%d\n%s"%(len(ans), "\n".join(ans))

class Reader(object):
    def __init__(self, filename=None):
        self.test_mode = filename is not None
        self.cases = 1
        self.buffer = []
        if self.test_mode:
            with open(filename) as f:
                blank_flg = False
                for line in f:
                    line = line.strip()
                    if line:
                        self.buffer.append(line)
                        blank_flg = False
                    else:
                        if not blank_flg: self.cases += 1
                        blank_flg = True

    def __readline(self):
        return self.buffer.pop(0) if self.test_mode else raw_input()

    def read_int(self):
        return int(self.__readline())
    def read_float(self):
        return float(self.__readline())
    def read_long(self):
        return long(self.__readline())
    def read_str(self):
        return self.__readline()

    def read_int_list(self):
        return [int(item) for item in self.__readline().split()]
    def read_float_list(self):
        return [float(item) for item in self.__readline().split()]
    def read_long_list(self):
        return [long(item) for item in self.__readline().split()]
    def read_str_list(self):
        return self.__readline().split()

if __name__ == '__main__':
    filename = sys.argv[1] if len(sys.argv)>1 else None
    f = Reader(filename)
    if f.test_mode:
        for c in xrange(f.cases):
            print "Case #%d"%(c+1)
            print solve(f)
    else:
        print solve(f)
