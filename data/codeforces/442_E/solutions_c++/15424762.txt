#include <cstdio>
#include <cmath>
#include <algorithm>
using namespace std;
typedef double db;
const db pi=acos(db(-1));
inline db sqr(const db x){ return x*x; }

const int N=1024;

struct vec{
	db x,y;
	vec(){
	}
	vec(db _x,db _y):x(_x),y(_y){
	}
	friend bool operator == (const vec &a,const vec &b){
		return a.x==b.x&&a.y==b.y;
	}
	friend bool operator != (const vec &a,const vec &b){
		return !(a==b);
	}
};

int n;

vec Range;
vec o[N];

db angle[N][N],dist[N][N];

struct data{
	db x;
	int w;
	friend bool operator < (const data &a,const data &b){
		return a.x<b.x;
	}
} seq[N*2],*top;

int lev;

inline void add(db alpha,db theta,int w){
	if(alpha-theta<-pi){
		lev+=w;
		*top++=(data){alpha-theta+2*pi,+w};
	}
	else{
		*top++=(data){alpha-theta,+w};
	}
	if(alpha+theta>=pi){
		lev+=w;
		*top++=(data){alpha+theta-2*pi,-w};
	}
	else{
		*top++=(data){alpha+theta,-w};
	}
}

bool check(int now,db R){
	vec O=o[now];
	top=seq;
	lev=0;
	for(int i=1;i<=n;i++) if(o[i]!=O&&dist[now][i]<2*R){
		add(
			angle[now][i],
			acos( dist[now][i]/2/R ),
			1
		);
	}
	if(O.x-R<0)
		add(-pi,acos(O.x/R),2);
	if(O.x+R>Range.x)
		add(0,acos((Range.x-O.x)/R),2);
	if(O.y-R<0)
		add(-pi/2,acos(O.y/R),2);
	if(O.y+R>Range.y)
		add(+pi/2,acos((Range.y-O.y)/R),2);
	if(top-seq==0) return true;
	sort(seq,top);
	db las=top[-1].x-2*pi;
	for(data *cur=seq;cur<top;cur++){
		if(lev<=1) return true;
		lev+=cur->w;
		las=cur->x;
	}
	return false;
}

int main(){
	scanf("%lf%lf%d",&Range.x,&Range.y,&n);
	for(int i=1;i<=n;i++) scanf("%lf%lf",&o[i].x,&o[i].y);
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			vec t(o[j].x-o[i].x,o[j].y-o[i].y);
			angle[i][j]=atan2(t.y,t.x);
			dist[i][j]=sqrt(sqr(t.x)+sqr(t.y));
		}
	}
	db l=0,rr=1e6*sqrt(2)+5;
	static int ord[N];
	for(int i=1;i<=n;i++) ord[i]=i;
	random_shuffle(ord+1,ord+n+1);
	for(int _=1;_<=n;_++){
		int i=ord[_];
		if(check(i,l+1e-6)){
			db r=rr;
			while(r-l>1e-9){
				db mid=(l+r)/2;
				if(check(i,mid))
					l=mid;
				else
					r=mid;
			}
		}
	}
	printf("%.12lf\n",l);
}
