#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<algorithm>
#define mp make_pair
#define x first
#define y second
using namespace std;
const int maxn=1050;
const double eps=1e-11,PI=acos(-1);
int dcmp(double x)
{
	if(x>eps) return 1;
	else if(x<-eps) return -1;
	return 0;
}
void NormArc(double &x)
{
	if(x>PI*2) x-=PI*2;
	if(x<0) x+=PI*2;
}
struct Point
{
	double x,y;
	Point(double x=0,double y=0):x(x),y(y) {}
	void scan() { scanf("%lf%lf",&x,&y); }
};
typedef Point Vector;
Vector operator + (Point A,Point B) { return Vector(A.x+B.x,A.y+B.y); }
Vector operator - (Point A,Point B) { return Vector(A.x-B.x,A.y-B.y); }
Vector operator * (Point A,double k) { return Vector(A.x*k,A.y*k); }
Vector operator / (Point A,double k) { return Vector(A.x/k,A.y/k); }
double Len(Vector A) { return hypot(A.x,A.y); }
int n;
double w,h,ans;
Point p[maxn];
int as,cov;
pair<double,int> arc[maxn*2];
void add(double l,double r)
{
	NormArc(l),NormArc(r);
	arc[as++]=mp(l,-1);
	arc[as++]=mp(r,1);
	if(l>r) cov++;
}
bool judg(int cur,double r)
{
	int i,j;
	double t,rad;
	as=cov=0;
	if(r>p[cur].x)
	{
		t=acos(p[cur].x/r);
		add(PI-t,PI+t);
		add(PI-t,PI+t);
	}
	if(r>w-p[cur].x)
	{
		t=acos((w-p[cur].x)/r);
		add(-t,t);
		add(-t,t);
	}
	if(r>p[cur].y)
	{
		t=acos(p[cur].y/r);
		add(-PI/2-t,-PI/2+t);
		add(-PI/2-t,-PI/2+t);
	}
	if(r>h-p[cur].y)
	{
		t=acos((h-p[cur].y)/r);
		add(PI/2-t,PI/2+t);
		add(PI/2-t,PI/2+t);
	}
	for(i=0;i<n;i++)
		if(cur!=i)
		{
			Vector v=p[i]-p[cur];
			double d=Len(v);
			if(d==0||d>=2*r) continue;
			rad=atan2(v.y,v.x);
			t=acos(d/r/2);
			add(rad-t,rad+t);
		}
	if(cov<=1) return 1;
	sort(arc,arc+as);
	for(i=0;i<as;i=j)
	{
		for(j=i;j<as&&!dcmp(arc[j].x-arc[i].x);j++)
			cov-=arc[j].y;
		if(cov<=1) return 1;
	}
	return 0;
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("data.in","r",stdin);
	//freopen("data.out","w",stdout);
#endif
	srand(42);
	int i;
	double l=0,r,mid;
	scanf("%lf%lf%d",&w,&h,&n);
	for(i=0;i<n;i++)
		p[i].scan();
	random_shuffle(p,p+n);
	for(i=0;i<n;i++)
		if(judg(i,l+1e-9))
		{
			r=hypot(w,h);
			double delta=r-l;
			while(delta>1e-10)
			{
				mid=(l+r)/2;
				if(judg(i,mid)) l=mid;
				else r=mid;
				delta/=2;
			}
		}
	ans=l;
	printf("%.10lf\n",ans);
	return 0;
}
