#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <utility>
#include <functional>
using namespace std;
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define MN 10005
#define eps 1e-9

const double PI=acos(-1);

inline int sgn(double x){return (x<-eps ? -1 : x>eps);}

double w,h;
int n;
struct point
{
    double x,y;
}po[MN];



int top=0,sum=0;
double sv[(MN+8)<<1];
int id[(MN+8)<<1];
inline bool cmp(const int &x,const int &y)
{
    if(sgn(sv[x]-sv[y])!=0) return sv[x]<sv[y];
    return (x&1)>(y&1);
}
inline void add(double x,double y)
{
    while(x<-PI) x+=2*PI; while(x>PI) x-=2*PI;
    while(y<-PI) y+=2*PI; while(y>PI) y-=2*PI;
    sv[++top]=x; sv[++top]=y; if(x>y) ++sum;
}
inline bool ok(int p,double r)
{
    if(r==0) return true;
    top=0; sum=0;
    point now=po[p]; double alp;
    if(r>now.x)
    {
        alp=acos(now.x/r);
        add(-PI-alp,-PI+alp);
        add(-PI-alp,-PI+alp);
    }
    if(r>h-now.y)
    {
        alp=acos((h-now.y)/r);
        add(PI/2-alp,PI/2+alp);
        add(PI/2-alp,PI/2+alp);
    }
    if(r>w-now.x)
    {
        alp=acos((w-now.x)/r);
        add(-alp,alp);
        add(-alp,alp);
    }
    if(r>now.y)
    {
        alp=acos(now.y/r);
        add(-PI/2-alp,-PI/2+alp);
        add(-PI/2-alp,-PI/2+alp);
    }

    for(int i=1;i<=n;++i)
    if(i!=p)
    {
        double dis=sqrt((now.x-po[i].x)*(now.x-po[i].x)+(now.y-po[i].y)*(now.y-po[i].y));
        if(sgn(dis)==0 || sgn(dis-2*r)>=0) continue;
        alp=atan2(po[i].y-now.y,po[i].x-now.x);
        double beta=acos(dis/(2*r));
        add(alp-beta,alp+beta);
    }

    for(int i=1;i<=top;++i) id[i]=i;
    if(sum<=1) return 1;
    sort(id+1,id+top+1,cmp);
    for(int i=1;i<=top;++i)
    {
        if(id[i]&1) ++sum; else --sum;
        if(sum<=1) return 1;
    }
    return 0;
}

int main()
{
 
    srand(356323);
    scanf("%lf%lf%d",&w,&h,&n);
    for(int i=1;i<=n;++i)
    {
        scanf("%lf%lf",&po[i].x,&po[i].y);
    }
    random_shuffle(po+1,po+n+1);//!!! important
    
    double res=0.0;
    for(int i=1;i<=n;++i)
    if(ok(i,res+eps))//res+eps!!!
    {
        double more=sqrt(w*w+h*h);
        double k=more-res;
        while(k>1e-10)
        {
            double mid=(more+res)/2;
            if(ok(i,mid)) res=mid;
            else more=mid;
            k/=2;
        }
    }

    printf("%.12lf\n",res);
    return 0;
}
