#include<iostream>
#include<algorithm>
#include<iomanip>
#include<cmath>

#define WAIT cout<<flush, system("PAUSE")
using namespace std;
typedef double ld;
#define PI   M_PI
#define T    100
#define MAX  2100
#define MAX2 MAX*2
#define EPS  1e-9

ld mabs(ld x){ return max(x, -x); }
struct event{
	ld ang;
	bool opens;
	bool operator< (event o)const {
		if (mabs(ang - o.ang)>EPS) return ang<o.ang;
		//if (ang != o.ang) return ang<o.ang;
		return opens>o.opens;
	}
} E[MAX2];
int W, H, N, id[MAX];
ld x[MAX], y[MAX], lo, mi, hi, sol;
ld ang[MAX][MAX];
int cnt, curr;

ld norm(ld a){
	while(a < -PI) a += 2*PI;
	while(a >  PI) a -= 2*PI;
	return a;
}
void add(ld l, ld r){
	E[cnt++] = (event){l, true};
	E[cnt++] = (event){r, false};
	if (l>r) 
		curr++;
}
void dadd(ld alpha, ld theta){
	ld l = norm(alpha-theta);
	ld r = norm(alpha+theta);
	add(l, r);
	add(l, r);
}
bool ok(int I, ld R){
	cnt = curr = 0;
	if (x[I]   < R) dadd(-PI/2, acos( x[I]     /R) );
	if (W-x[I] < R) dadd( PI/2, acos( (W-x[I]) /R) );
	if (y[I]   < R) dadd(-PI  , acos( y[I]     /R) );
	if (H-y[I] < R) dadd( 0   , acos( (H-y[I]) /R) );
		
	for(int K=0; K<N; K++){
		ld d = hypot(x[K]-x[I], y[K]-y[I]);
		if (I==K || d > 2*R || d==0)
			continue;
				
		ld alpha = ang[I][K];
		ld theta = acos((d/2) / R);
		add(norm(alpha-theta), norm(alpha+theta));
	}
	if (curr <= 1) return true;
		
	sort(E, E+cnt);
	for(int I=0; I<cnt; I++){
		curr += E[I].opens;
		curr -= !E[I].opens;
		if (curr <= 1) return true;
	}	
	return false;
}
int main(){
	cout<< setprecision(17) << fixed;
	
	cin >> W >> H >> N;
	for(int I=0; I<N; I++)
		cin >> x[I] >> y[I], id[I]=I;
	random_shuffle(id, id+N);
	for(int I=0; I<N; I++)
		swap(x[I], x[id[I]]), swap(y[I], y[id[I]]);
	for(int I=0; I<N; I++)
	  for(int K=0; K<N; K++)
	     if (I != K) ang[I][K] = atan2(x[K]-x[I], y[K]-y[I]);
	
	for(int I=0; I<N; I++){
		if (!ok(I, sol + EPS)) continue;
      lo=sol;
		hi=hypot(W, H);
		for(int it=0; it<T; it++){
			mi = (lo+hi)/2;
			if (ok(I, mi))		lo=mi;
			else			      hi=mi;
		}
		sol = max(sol, lo);
	}
	cout << sol << endl;
	//WAIT;
}


















