#include <ctime>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

#define n	1005
#define DB	long double
#define For(i,a,b)	for(int i=a;i<=b;i++)

const	DB EPS=1e-12,INF=1e15,PI=acos(-1);

int		K,T,ID[n];
DB		N,M,X[n],Y[n],Dis[n][n],Arg[n][n];
struct	Nod{DB x,y;}Q[n<<4];

inline	bool	Big(DB a,DB b)	{return	a>b+EPS;}
inline	bool	Sma(DB a,DB b)	{return	a<b-EPS;}
inline	bool	Equ(DB a,DB b)	{return	abs(a-b)<EPS;}

inline	bool	Le(DB a,DB b)	{return	!Big(a,b);}
inline	bool	Re(DB a,DB b)	{return	!Sma(a,b);}

void	Upd(DB l,DB r,DB v)	{
		for	(;l<0;l+=2*PI);
		for	(;r<0;r+=2*PI);
		for	(;l>=2*PI;l-=2*PI);
		for	(;r>=2*PI;r-=2*PI);

		if	(l<=r)	Q[++T]=(Nod){l,v},Q[++T]=(Nod){r,-v};
			else	Q[++T]=(Nod){0,v},Q[++T]=(Nod){r,-v},Q[++T]=(Nod){l,v},Q[++T]=(Nod){2*PI,-v};
}
inline	bool	Cmp(const Nod&a,const Nod&b)	{return	Sma(a.x,b.x);}

bool	Right(int u,DB D){
		T=0;
		For(i,1,K)	if	(!Equ(X[i],X[u])||!Equ(Y[i],Y[u])){
			DB	a=D,b=D,c=Dis[u][i];
			if	(a+b<=c)	continue;

			DB	v=acos(.5*c/a);
			Upd(Arg[u][i]-v,Arg[u][i]+v,1);
		}

		if	(Sma(N-X[u],D))	Upd(-acos((N-X[u])/D),acos((N-X[u])/D),INF);
		if	(Sma(X[u],D))	Upd(PI-acos(X[u]/D),PI+acos(X[u]/D),INF);
		if	(Sma(M-Y[u],D))	Upd(PI/2-acos((M-Y[u])/D),PI/2+acos((M-Y[u])/D),INF);
		if	(Sma(Y[u],D))	Upd(-PI/2-acos(Y[u]/D),-PI/2+acos(Y[u]/D),INF);

		Q[++T]=(Nod){0,0};	Q[++T]=(Nod){2*PI,0};
		sort(Q+1,Q+T+1,Cmp);	DB	Now=0;
		for (int i=1,j;i<=T;i=j){
			for	(j=i;j<=T&&Equ(Q[i].x,Q[j].x);j++)	Now+=Q[j].y;
			if	(j<=T&&Le(Now,1))	return	1;
		}
		return	0;
}

int		main(){
		srand(time(0));

		cin>>N>>M>>K;
		For(i,1,K)	ID[i]=i;
		random_shuffle(ID+1,ID+K+1);
		For(i,1,K)	cin>>X[ID[i]]>>Y[ID[i]];
		For(i,1,K)	For(j,1,K)
			Dis[i][j]=sqrt((X[i]-X[j])*(X[i]-X[j])+(Y[i]-Y[j])*(Y[i]-Y[j]));
		For(i,1,K)	For(j,1,K)
			Arg[i][j]=atan2(Y[j]-Y[i],X[j]-X[i]);

		DB	L=0,R=sqrt(N*N+M*M);
		For(i,1,K)	if	(Right(i,L+(1e-9))){
			DB	l=L,r=R;
			for	(;l+(1e-9)<r;)	{
				DB	Mid=(l+r)*.5;
				Right(i,Mid)?l=Mid:r=Mid;
			}	L=l;
		}
		printf("%.12lf\n",(double)L);
}