#include <cstdio>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <vector>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pll;

const int K1 = 1000003;
const int K2 = 1000007;

const int MAXN = 50000;

ll B1[MAXN + 1], B2[MAXN + 1];

int n;
string s;
string p[10];
int l[10], r[10];
char buf[65536];

map<ll, int> gao(const string& s, int len) {
    ll v1 = 0;
    for (int j = 0; j < len && j < (int)s.length(); ++j) {
        v1 = v1 * K1 + s[j];
    }
    map<ll, int> mp;
    mp[v1] += 1;
    for (int j = len; j < (int)s.length(); ++j) {
        v1 = (v1 - B1[len - 1] * s[j - len]) * K1 + s[j];
        mp[v1] += 1;
    }
    return mp;
}

int gao(int len) {
    map<ll, int> ms = gao(s, len);
    vector<ll> vs;
    for (map<ll, int>::const_iterator i = ms.begin(); i != ms.end(); ++i) {
        vs.push_back(i->first);
    }
    for (int i = 0; i < n; ++i) {
        map<ll, int> mp = gao(p[i], len);
        vector<ll> newVS;
        for (int j = 0; j < (int)vs.size(); ++j) {
            int count = mp.find(vs[j]) == mp.end() ? 0 : mp[vs[j]];
            if (count >= l[i] && count <= r[i]) {
                newVS.push_back(vs[j]);
            }
        }
        vs.swap(newVS);
    }
    return (int)vs.size();
}

int main() {
    B1[0] = B2[0] = 1;
    for (int i = 1; i <= MAXN; ++i) {
        B1[i] = B1[i - 1] * K1;
        B2[i] = B2[i - 1] * K2;
    }

    scanf("%s%d", buf, &n);
    s = string(buf);
    for (int i = 0; i < n; ++i) {
        scanf("%s%d%d", buf, &l[i], &r[i]);
        p[i] = string(buf);
    }
    int res = 0;
    for (int i = 1; i <= (int)s.length(); ++i) {
        int cur = gao(i);
        res += cur;
    }
    printf("%d\n", res);
    return 0;
}
