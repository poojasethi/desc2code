#include <cassert>
#include <cstdio>
#include <cstring>

#include <algorithm>
#include <set>
#include <string>
#include <vector>

using namespace std;

vector <int> cz( string s ) {
  vector <int> z(s.length());
  z[0] = 0;
  int t = 0;
  for (int i = 1; i < (int)s.length(); i++) {
    int k = 0;
    if (t + z[t] > i && t > 0)
      k = min(t + z[t] - i, z[i - t]);
    while (i + k < (int)s.length() && s[k] == s[i + k])
      k++;
    if (i + k > t + z[t])
      t = i;
    z[i] = k;
  }
  z[0] = s.length();
  return z;
}

const int maxn = 10;
const int maxl = 2010;

int n;
char s0[maxl], *s;
char p[maxn][maxl];
int l[maxn], r[maxn];

int main() {
  assert(scanf("%s", s0) == 1);
  assert(scanf("%d", &n) == 1);
  for (int i = 0; i < n; i++)
    assert(scanf("%s%d%d", p[i], &l[i], &r[i]) == 3);

  set <unsigned long long> ans;
  for (s = s0; *s; s++) {
    int l1 = strlen(s);
    int L = 1, R = l1;
    for (int i = 0; i < n; i++) {
      int l2 = strlen(p[i]);
      vector <int> z = cz(string(s) + '$' + p[i]);
      vector <int> cnt(l1 + 1, 0);
      for (int j = 0; j < l2; j++) {
        assert(z[j + l1 + 1] <= l1);
        cnt[z[j + l1 + 1]]++;
      }
      for (int j = l1 - 1; j >= 0; j--)
        cnt[j] += cnt[j + 1];
      for (int j = 1; j <= l1; j++) {
        if (cnt[j] < l[i])
          R = min(R, j - 1);
        if (cnt[j] > r[i])
          L = max(L, j + 1);
      }
    }
    unsigned long long hash = 0;
    for (int i = 0; s[i]; i++) {
      hash = (hash * 239017 + s[i]) % 1111111111111111111;
      if (i + 1 >= L && i + 1 <= R)
        ans.insert(hash);
    }
  }
  printf("%d\n", (int)ans.size());

  return 0;
}

