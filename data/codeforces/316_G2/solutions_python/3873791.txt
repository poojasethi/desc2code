#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define INF (1<<30)
#define SZ 2000005
using namespace std;

struct node{
	int p[26], cnt, bad, f;
}   T[SZ];

int n, m, nd, q[SZ], lo, hi;
char s[2005], rule[2005];
int ret = 0;

void add(char s[]){
	int x = 0, c;
	for (int i=0; s[i]; i++){
		c = s[i] - 'a';
		if (!T[x].p[c]) T[x].p[c] = nd, ++nd;
		x = T[x].p[c];
	}
}

void build(){
	int x, y, t;
	q[0] = 0;
	T[0].f = -1;

	for (int i=0, j=0; j>=i; i++){
		x = q[i];
		for (int k=0; k<26; k++){
			y = T[x].p[k];
			if (y){
				t = T[x].f;
				while (t >= 0 && !T[t].p[k]) t = T[t].f;
				if (t < 0) T[y].f = 0;
				else T[y].f = T[t].p[k];
				q[++j] = y;
			}
		}
	}
}

void match(char s[]){
	int x = 0, c, t;
	for (int i=0; s[i]; i++){
		c = s[i] - 'a';
		while (x > 0 && !T[x].p[c]) x = T[x].f;
		x = T[x].p[c];
		t = x;
		while (t > 0){
			T[t].cnt++;
			t = T[t].f;
		}
	}
}

int main(){
	scanf("%s", s), n = strlen(s);
	nd = 1;
	FOR(i,0,n) add(s + i);
	build();
	
	scanf("%d", &m);
	FOR(i,0,m){
		scanf("%s%d%d", rule, &lo, &hi);
		FOR(j,0,nd) T[j].cnt = 0;
		match(rule);
		FOR(j,0,nd) if (T[j].cnt < lo || T[j].cnt > hi) T[j].bad = 1;
	}
	
	FOR(i,1,nd) ret += 1 - T[i].bad;

	printf("%d\n", ret);
	return 0;
}

