//In the Name of God
#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <algorithm>
#include <set>
#include <map>

using namespace std;
typedef long long LL;

const LL maxn = 2000 + 10 , MOD = 345730497530475341LL;
string s , t[20];
LL po[maxn];
LL l[20] , r[20] , h[maxn][maxn] , h1[maxn][maxn] , n , ans1 = 0;
vector <LL> ted[maxn] , ans;

int main(){
  ios_base::sync_with_stdio(false);
  po[0] = 1;
  for(LL i = 1 ; i < maxn ; i++)
    po[i] = (po[i - 1] * 26) % MOD;
  cin >> s;
  cin >> n;
  for(LL i = 0 ; i < n ; i++)
    cin >> t[i] >> l[i] >> r[i];
  for(LL i = 0 ; i < s.size() ; i++){
    h[i][i] = (po[0] * (s[i] - 'a' + 1)) % MOD;
    for(LL j = i + 1 ; j < s.size() ; j++)
      h[i][j] = (h[i][j - 1] + po[j - i] * (s[j] - 'a' + 1) % MOD) % MOD;
  }
  for(LL i = 0 ; i < n ; i++)
    for(LL j = 0 ; j < t[i].size() ; j++){
      h1[j][j] = (po[0] * (t[i][j] - 'a' + 1)) % MOD;
	ted[i].push_back(h1[j][j]);
      for(LL k = j + 1 ; k < t[i].size() ; k++){
	h1[j][k] = (h1[j][k - 1] + po[k - j] * (t[i][k] - 'a' + 1) % MOD) % MOD;
	ted[i].push_back(h1[j][k]);
      }
    }
  for(int i = 0 ; i < n ; i++)
    sort(ted[i].begin() , ted[i].end());
  for(LL i = 0 ; i < s.size() ; i++)
    for(LL j = i ; j < s.size() ; j++)
      ans.push_back(h[i][j]);
  sort(ans.begin() , ans.end());
  int N = LL(unique(ans.begin() , ans.end()) - ans.begin());
  for(int i = 0 ; i < N ; i++){
    bool sw = true;
    for(LL k = 0 ; k < n ; k++){
      LL hash = ans[i];
      LL ted1 = upper_bound(ted[k].begin() , ted[k].end() , ans[i]) - lower_bound(ted[k].begin() , ted[k].end() , ans[i]);
      //	cout << i << ' ' << j << ' ' << ted1 << endl;
      if(ted1 >= l[k] && ted1 <= r[k]){}
      else{
	sw = false;
	break;
      }
    }
    if(sw){
      //	cout << i << ' ' << j << endl;
      ans1++;
    }
  }
  cout << ans1 << endl;
  return 0;
}
