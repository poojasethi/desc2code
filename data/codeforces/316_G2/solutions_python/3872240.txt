#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int H = 3;

int mod[] = {44987, 44983, 44971, 44963};
int root[] = {1001, 1002, 1001, 1001};

char s[2048];
char p[16][2048];

int a[16];
int b[16];

struct hash
{
    short h[H];

    hash (int v = 0)
    {
        for (int i=0; i<H; i++)
            h[i] = v;
    }

    inline bool operator < (const hash &other) const
    {
        for (int i=0; i<H; i++)
            if (h[i] != other.h[i])
                return h[i] < other.h[i];
        return false;
    }

    inline bool operator == (const hash &other) const
    {
        for (int i=0; i<H; i++)
            if (h[i] != other.h[i])
                return false;
        return true;
    }
};

vector<hash> x[16][2048];

int main()
{
    cin >> p[0];

    int n;
    cin >> n;
    for (int i=1; i<=n; i++)
        cin >> p[i] >> a[i] >> b[i];

    for (int i=0; i<=n; i++)
    {
        for (int j=0; p[i][j]; j++)
        {
            hash y;
            for (int k=j; p[i][k]; k++)
            {
                for (int q=0; q<H; q++)
                    y.h[q] = (y.h[q] * root[q] + p[i][k]) % mod[q];
                x[i][k-j].push_back(y);
            }
        }

        for (int j=0; j<=2000; j++)
            sort(x[i][j].begin(), x[i][j].end());
    }

    for (int j=0; j<=2000; j++)
        x[0][j].resize(unique(x[0][j].begin(), x[0][j].end()) - x[0][j].begin());

    int ans = 0;
    for (int t=0; t<=2000; t++)
        for (int i=0; i<x[0][t].size(); i++)
        {
            bool ok = true;
            for (int j=1; j<=n; j++)
            {
                int k = upper_bound(x[j][t].begin(), x[j][t].end(), x[0][t][i]) - lower_bound(x[j][t].begin(), x[j][t].end(), x[0][t][i]);
                ok &= a[j] <= k && k <= b[j];
            }

            ans += ok;
        }

    cout << ans << endl;

    return 0;
}
