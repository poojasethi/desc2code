#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <set>
#include <map>

using namespace std;

typedef long long ll;

const int MAX = 2001;
const ll B = 139;
const int MOD = 1000000007;

char s[MAX];
char group[10][MAX];
int con[10][2];

int N;
vector<ll> cnt[10];

int main() {

    int i, j;

    scanf("%s%d", s, &N);

    for( i = 0; i < N; ++ i){
        scanf("%s%d%d", group[i], &con[i][0], &con[i][1]);
        cnt[i].reserve( strlen(group[i]) * strlen(group[i]));
    }

    for(int  t = 0; t < N; ++ t){
        int len = strlen(group[t]);
        for( i = 0; i < len; ++ i){
            ll hash = 0;
            for( j = i; j < len; ++ j){
                hash = hash * B + group[t][j];
                cnt[t].push_back(hash);
            }
        }
        sort(cnt[t].begin(), cnt[t].end());
    }

    int ans = 0, len = strlen(s);
    vector<ll> sub;
    sub.reserve(len * len / 2);

    for( i = 0; i < len; ++ i){
        ll hash = 0;
        for( j = i; j < len; ++ j){
            hash = hash * B + s[j];
            sub.push_back(hash);
        }
    }

    sort(sub.begin(), sub.end());
    sub.resize( unique(sub.begin(), sub.end()) - sub.begin());
    len = sub.size();

    for( int i = 0; i < len; ++ i){
        bool ok = true;
        for( int t = 0; t < N && ok; ++ t){
            int c = upper_bound(cnt[t].begin(), cnt[t].end(), sub[i]) -
                    lower_bound(cnt[t].begin(), cnt[t].end(), sub[i]);
            ok = c >= con[t][0] && c <= con[t][1];
        }
        if(ok)
            ++ ans;
    }

    printf("%d\n", ans);

    return 0;
}
