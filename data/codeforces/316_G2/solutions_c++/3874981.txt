#include <set>
#include <map>
#include <cmath>
#include <ctime>
#include <vector>
#include <string>
#include <cstdio>
#include <cassert>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

#define pb push_back
#define mp make_pair
#define sz(a) (int)a.size()
#define all(a) a.begin(), a.end()
#define ms(a,x) memset(a,x,sizeof a)
#define ones(x) __builtin_popcount(x)
#define rep(i,n) for (int i = 0; i < n; i++)
#define forit(i,a) for (typeof(a.begin()) i = a.begin(); i != a.end(); i++)

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;

const int N = 11;
const int M = 2050;
const int pr = 1993;
const int mod = 1000000031;

vector<ll> st[N];
set<ll> dif;
int l[N], r[N];
ll hs[M], deg[M], ls[M*M];

void proc(int id, string s) {
	int n = sz(s);
	for (int i = 0; i < n; i++) {
		ll h = 0;
		for (int j = i; j < n; j++) {
			h = (h + s[j]) * pr;
			st[id].pb(h);
		}
	}
}

int main()
{
	#ifdef LOCAL
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);
	#endif

	string s; int n;
	cin >> s >> n;

	for (int i = 0; i < n; i++) {
		string p; cin >> p >> l[i] >> r[i];
		proc(i, p);
	}

	for (int i = 0; i < n; i++) {
		sort(all(st[i]));
	}

	int ans = 0;
	
	int len = sz(s);
	deg[0] = 1;
	for (int i = 0; i < len; i++) {
		hs[i+1] = (hs[i] + s[i]) * pr;
		deg[i+1] = deg[i] * pr;
	}

	int k = 0;
	for (int i = 0; i < len; i++)
		for (int j = i; j < len; j++)
			ls[k++] = hs[j+1] - hs[i] * deg[j-i+1];

	sort(ls, ls + k);

	k = unique(ls, ls + k) - ls;

	int cnt = 0;
	for (int it = 0; it < k; it++) {
		cnt++;
		if (cnt == 100) {
			if (double(clock())/double(CLOCKS_PER_SEC) > 3.9) break;
			cnt = 0;
		}

		ll h = ls[it];

		bool ok = 1;
		for (int k = 0; k < n; k++) {
			int cnt = upper_bound(all(st[k]), h) - lower_bound(all(st[k]), h);
			if (!(l[k] <= cnt && cnt <= r[k])) {
				ok = 0;
				break;
			}
		}

		if (ok) {
			ans++;
		}
	}

	cout << ans;

	return 0;
}
