#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
using namespace std;
typedef long long ll;
typedef pair <ll,int> pii;
#define X first
#define Y second
#define Size(x) (int)(x).size()
#define mp(x,y) make_pair(x,y)

const ll N = 100, P = 1002614371193681, M = 707;
vector <pii> vl[N];
int R[N], L[N], m, ans;

void process(int x, const string &s) {
	ll T = 0;
	vector <ll> tmp;
	tmp.reserve(N * N * N);
	for(int i = 0;i < Size(s);++i) {
		T = 0;
		for(int j = i;j < Size(s);++j) {
			T *= M;
			T += s[j];
			T %= P;
			tmp.push_back(T);
// 			cerr << i << " " << j << " " << T << endl;
		}
	}
	///
	sort(tmp.begin(), tmp.end());
	ll la = tmp[0];
	int c = 1;
	for(int i = 1;i < Size(tmp);++i)
		if(tmp[i] != la) {
			vl[x].push_back(mp(la, c));
			la = tmp[i];
			c = 1;
		}
		else
			++c;
	vl[x].push_back(mp(la, c));
	vl[x].push_back(mp(P, 0));
	sort(vl[x].begin(), vl[x].end());
}

bool find(ll x) {
	for(int i = 1;i <= m;++i) {
		int k = lower_bound(vl[i].begin(), vl[i].end(), mp(x, 0)) - vl[i].begin();
		int tmp = vl[i][k].Y;
		if(vl[i][k].X != x)
			tmp = 0;
		if(tmp < L[i] || R[i] < tmp)
			return false;
	}
	return true;
}

int main() {
	ios::sync_with_stdio(false);
	string s;
	cin >> s >> m;
	process(0, s);
	for(int i = 1;i <= m;++i) {
		cin >> s;
		process(i, s);
		cin >> L[i] >> R[i];
	}
	for(int i = 0;i < Size(vl[0]) - 1;++i)
		if(find(vl[0][i].X))
			++ans;
	cout << ans << endl;
	return 0;
}