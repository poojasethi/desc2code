#include <algorithm>
#include <iostream>
#define hash unsigned long long

using namespace std;

string a;
string b[16];
int l[16], r[16];
int N;
hash mp[10][2006*1000];
int sz[10];

hash st[2006 * 1000];
int szz;
hash pw[1 << 17], base = 31;
void scan(){
    cin >> a >> N;
    for ( int i = 0; i < N; ++i )
        cin >> b[i] >> l[i] >> r[i];
}

hash findHash ( hash H[2048], int l, int r ){
    if ( !l )
        return H[r];
    --l;

    return H[r] - H[l] * pw[r - l];
}

void fillHash ( string a, hash T[2006*1000], int &sz){
    hash H[2048];
    H[0] = a[0] - 'a' + 1;

    for ( int i = 1; i < a.size(); ++i )
        H[i] = H[i - 1] * base + a[i] - 'a' + 1;
   // cout << H[1] << endl;
    for ( int i= 0; i < a.size(); ++i )
        for ( int j = i; j < a.size(); ++j )
            T[sz++] = findHash ( H, i, j );
    sort ( T, T + sz );
}


inline int cnt ( int idx, hash x ){
    pair < hash*, hash* > it = equal_range ( mp[idx], mp[idx] + sz[idx], x );
    return it.second - it.first;
}

int ok ( hash t1 ){
    for ( int i = 0; i < N; ++i ){
        int x = cnt ( i, t1 );
        if ( x < l[i] || x > r[i] )
            return 0;
    }

    return 1;
}

void solve(){
    pw[0] =1 ;

    for ( int i = 1; i < ( 1 << 17 ); ++i )
        pw[i] = pw[i - 1] * base;

    for ( int i = 0; i < N; ++i )
        fillHash ( b[i], mp[i], sz[i] );
    fillHash ( a, st, szz );

    int res = 0;

    for ( int i = 0; i < szz; ++i ){
        if ( i == 0 ) res += ok ( st[i] );
        else if ( st[i] != st[i - 1] )
            res += ok ( st[i] );
    }

    cout << res << endl;
}


int main(){
    scan();
    solve();
}
