#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;

const int MAXN = 20, MAXL = 50010, BASE = 701;

ll ph[MAXN][MAXL], baseP[MAXL];
string s, p[MAXN];
vector<ll> subH[MAXN];
int ql[MAXN], qr[MAXN];

ll getHash(int l, int r, int id) {
	return ph[id][r] - ph[id][l] * baseP[r - l];
}

int main() {
	baseP[0] = 1;
	for (int i = 1; i < MAXL; i++)
		baseP[i] = baseP[i - 1] * BASE;
	cin >> s;
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> p[i] >> ql[i] >> qr[i];
	p[n] = s;
	for (int i = 0; i <= n; i++)
		for (int j = 0; j < p[i].size(); j++)
			ph[i][j + 1] = ph[i][j] * BASE + p[i][j];
	for (int i = 0; i <= n; i++) {
		for (int lo = 0; lo < p[i].size(); lo++)
			for (int hi = lo + 1; hi <= p[i].size(); hi++)
				subH[i].push_back(getHash(lo, hi, i));
		sort(subH[i].begin(), subH[i].end());
	}
	subH[n].erase(unique(subH[n].begin(), subH[n].end()), subH[n].end());
	int ans = 0;
	for (int id = 0; id < subH[n].size(); id++) {
		ll curH = subH[n][id];
		bool bad = false;
		for (int i = 0; i < n; i++) {
			int tmp = upper_bound(subH[i].begin(), subH[i].end(), curH)
				- lower_bound(subH[i].begin(), subH[i].end(), curH);
			if (tmp < ql[i] || tmp > qr[i]) {
				bad = true;
				break;
			}
		}
		if (!bad)
			ans++;
	}
	cout << ans << endl;
	return 0;
}
