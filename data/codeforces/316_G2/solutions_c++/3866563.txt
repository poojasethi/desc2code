#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <queue>
#include <vector>
#include <map>
#include <string>
#include <cmath>
#include <ctype.h>
#include <stdlib.h>

using namespace std;

typedef long long INT;
typedef pair<int, int> pii;

int n, l[20], r[20], L[20], mx[60000], mp[20][60000];
char p[20][60000], s[60000], *pp[20][60000], *ps[60000];

bool cmp(char *a, char *b) {
	return strcmp(a, b)<0;
}

bool Test(char *a, int len, int k) {
	int ret, low, high, mid, i, j;
	low=0; high=L[k];
	
	while(high-low>1) {
		mid=(high+low)/2;
		if (strncmp(a, pp[k][mid], len)<=0) high=mid;
		else low=mid;
	}
	if (strncmp(a, pp[k][low], len)<=0) i=low;
	else i=high;
	if (i==L[k] || strncmp(a, pp[k][i], len)) ret=0;
	else {
		for (j=i; j<L[k]; j++) {
			if (mp[k][j]<len) break;
		}
		ret=j-i+1;
	}
	if (ret>=l[k] && ret<=r[k]) return true;
	return false;
	
}

int main() {

	
	int ls, i, j, k, len, t;
	INT ret;

	scanf("%s", s);
	
	ls=strlen(s);
	for (i=0; i<ls; i++) ps[i]=s+i;
	sort(ps, ps+ls, cmp);
	
	scanf("%d", &n);
	
	for (i=0; i<n; i++) {
		scanf("%s%d%d", p+i, l+i, r+i);
		L[i]=strlen(p[i]);
		for (j=0; j<L[i]; j++) pp[i][j]=p[i]+j;
		sort(pp[i], pp[i]+L[i], cmp);
	}
	
	ret=0;
	
	for (i=0; i<ls-1; i++) {
		for (j=0; j<ls; j++) {
			if (*(ps[i]+j)!=*(ps[i+1]+j)) break;
		}
		mx[i]=j;
	}
	mx[ls-1]=0;
	
	for (k=0; k<n; k++) {
		for (i=0; i<L[k]-1; i++) {
			for (j=0; j<L[k]; j++) {
				if (*(pp[k][i]+j)!=*(pp[k][i+1]+j)) break;
			}
			mp[k][i]=j;
		}
		mp[k][i]=0;
	}

	for (i=1; i<=ls; i++) {
		for (j=0; j<ls; j=k+1) {
			for (k=j; k<ls; k++) 
				if (mx[k]<i) break;
			if (j==k) {
				len=ls-(ps[j]-s);
				if (len<i) continue;
			}
			for (t=0; t<n; t++) {
				if (!Test(ps[j], i, t)) break;
			}
			if (t==n) ret++;
		}
	}
	printf("%I64d\n", ret);
	
	return 0;
}