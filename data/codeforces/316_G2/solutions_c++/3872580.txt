#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>
#include <set>

#include <cstdio>
#include <cstring>
#include <cmath>
#include <cctype>
#include <cstdlib>

using namespace std;
typedef  long long LL;
const int MAXN = 1300;
const int ROOT_NODE = 0;

int trie[2000000][26];
short pValue[2000000][10];
char P[11][2001];
int L[11];
int R[11];

char S[2010];
int N,totalNode=1;

int getIndex(char c)
{
   return c - 'a';
}

void buildTrie(int node, int cur)
{
   if(cur == N) return;
   int edge = getIndex(S[cur]);
   if(trie[node][edge]==-1) {
      trie[node][edge]=totalNode++;
   }
   buildTrie(trie[node][edge], cur + 1);
}

void doitP(int node, int cur, const int len, const int whichp)
{
   if(cur == len) return;
   int edge = getIndex(P[whichp][cur]);
   if(trie[node][edge] == -1) return;
   pValue[trie[node][edge]][whichp]++;
   doitP(trie[node][edge], cur + 1, len, whichp);

}

void updateTrie(int whichp)
{
   int len = strlen(P[whichp]);
   for(int i = 0; i < len; i++) {
        doitP(ROOT_NODE, i, len, whichp);
   }

}



int main()
{
   memset(trie,-1,sizeof(trie));
   scanf("%s",S);
   int m;
   scanf("%d",&m);
   for(int i=0; i < m; i++) {
      //cin>>P[i]>>L[i]>>R[i];
      scanf("%s %d %d",P[i],&L[i],&R[i]);
   }

   N = strlen(S);

   for(int i=0; i < N; i++) {
      buildTrie(ROOT_NODE,i);
   }

   for(int i = 0; i < m; i++) {
      updateTrie(i);
   }
   int ret = 0;
   for(int i = 1; i < totalNode; i++) {
      int ok = 1;
      for(int j = 0; j < m; j++) {
         if(pValue[i][j]>=L[j]&&pValue[i][j]<=R[j]) continue;
         ok=0;
      }
      if(ok)ret++;
   }

   cout<<ret<<endl;

}
