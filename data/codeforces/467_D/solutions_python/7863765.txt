from sys import stdin, setrecursionlimit
from collections import defaultdict
setrecursionlimit(100010)
G = defaultdict(list)
rG = defaultdict(list)
yet = [True] * 100010
o = []
def dfs(v):
    yet[v] = False
    for i in G[v]:
        if yet[i]: dfs(i)
    o.append(v)
def main():
    n = int(stdin.readline())
    a = stdin.readline().lower().split()
    m = int(stdin.readline())
    d = defaultdict(int)
    k = 0
    for _ in xrange(m):
        s, t = stdin.readline().lower().split()
        if s not in d:
            d[s] = k
            k = k + 1
        if t not in d:
            d[t] = k
            k = k + 1
        G[d[s]].append(d[t])
        rG[d[t]].append(d[s])
    
    """
    o = []
    for i in xrange(k):
        if yet[i]:
            yet[i] = False
            st = [i]
            while st:
                t = st.pop()
                if t < 0:
                    o.append(-t - 1)
                    continue
                st.append(-t - 1)
                for j in G[t]:
                    if yet[j]:
                        yet[j] = False
                        st.append(j)
    """
    for i in xrange(k):
        if yet[i]:
            dfs(i)
    b = [0] * k
    r = 1
    for i in reversed(o):
        if not b[i]:
            st = [i]
            b[i] = r
            while st:
                t = st.pop()
                for j in rG[t]:
                    if not b[j]:
                        b[j] = r
                        st.append(j)
            r = r + 1
    rc = [(1000000, 1000000)] * r
    for s, t in d.items():
        rc[b[t]] = min((s.count('r'), len(s)), rc[b[t]])
    for i in o:
        for j in G[i]:
            rc[b[i]] = min(rc[b[i]], rc[b[j]])
    ans = [0, 0]
    for s in a:
        if s in d:
            i, j = rc[b[d[s]]]
            ans[0] += i
            ans[1] += j
        else:
            ans[0] += s.count('r')
            ans[1] += len(s)
    print ans[0], ans[1]
main()