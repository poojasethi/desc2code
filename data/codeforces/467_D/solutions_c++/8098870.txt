#include<bits/stdc++.h>

using namespace std;

#define ll long long int

map<string,int> mp;
pair<int,int> r[300010];
vector<int> connected[300010];
vector<int> original;
int word_number;
bool visited[300010];

priority_queue<pair<pair<int,int>, int > > pq;

int solve(string s)
{
    string t;
    int i;

    for(i=0;i<s.size();i++)
        {
        t.push_back(tolower(s[i]));
    }

    if(mp[t])
        return mp[t];
    mp[t] = ++word_number;
    int r_count=0;

    for(i=0;i<t.size();i++)
        {
        if(t[i]=='r')
        {
            r_count++;
        }
    }

    r[mp[t]] = make_pair(-r_count,-t.size());
    pq.push(make_pair(r[mp[t]],mp[t]));

    return mp[t];
}


int main()
{
    int m,n,i,j,from,to;
    string s,a,b;
    word_number=0;
    cin>>m;
    for(i=0;i<m;i++)
        {
        cin>>s;
        original.push_back(solve(s));
    }
    cin>>n;
    for(i=0;i<n;i++)
        {
        cin>>a>>b;
        connected[solve(b)].push_back(solve(a));
    }
    while(!pq.empty())
    {
        from = pq.top().second;
        pq.pop();

        if(visited[from])
        {
            continue;
        }

        visited[from] = true;
        for(j=0;j<connected[from].size();j++)
        {
            to = connected[from][j];
            if(r[from]>r[to])
            {
                r[to] = r[from];
                pq.push(make_pair(r[to],to));
            }
        }
    }

    ll min_r=0,min_len=0;

    for(i=0;i<original.size();i++)
        {
        min_r = min_r + abs(r[original[i]].first);
        min_len = min_len + abs(r[original[i]].second);
    }
    cout<<min_r<<" "<<min_len<<"\n";

    return 0;
}
