#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<map>
#include<queue>
#include<utility>
using namespace std;
#define maxn 300005
int wn;
vector<int> g[maxn];
map<string,int> idx;
pair<int,int> r[maxn];
vector<int> essay;
int res[maxn];
bool vis[maxn];
int m,n;
priority_queue<pair<pair<int,int>,int> > q;
int getidx(string s)
{
    int len=s.length();
    string s1;
    for(int i=0;i<len;i++)
    {
        if('A'<=s[i] && s[i]<='Z') s1+=(s[i]-'A'+'a');
        else s1+=s[i];
    }
    if(idx[s1]) return idx[s1];
    idx[s1]=++wn;
    int cnt=0;
    for(int i=0;i<len;i++)
    {
        if(s1[i]=='r')
            cnt++;
    }
    r[wn]=make_pair(-cnt,-len);
    q.push(make_pair(r[wn],wn));
    return wn;
}
int main()
{
    ios::sync_with_stdio(false);
    cin>>m;
    for(int i=1;i<=m;i++)
    {
        string s;
        cin>>s;
        essay.push_back(getidx(s));
    }
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        string a,b;
        cin>>a>>b;
        int x=getidx(a),y=getidx(b);
        g[y].push_back(x);
    }
    while(!q.empty())
    {
        int cur=q.top().second;
        q.pop();
        if(vis[cur])
            continue;
        vis[cur]=1;
        for(int i=0;i<g[cur].size();i++)
        {
            int next=g[cur][i];
            if(r[cur]>r[next])
            {
                r[next]=r[cur];
                q.push(make_pair(r[next],next));
            }
        }
    }
    
    long long ans1,ans2;
    ans1=ans2=0;
    for(int i=0;i<essay.size();i++)
    {
        ans1-=r[essay[i]].first;
        ans2-=r[essay[i]].second;
    }
    cout<<ans1<<' '<<ans2<<endl;
    return 0;
}
