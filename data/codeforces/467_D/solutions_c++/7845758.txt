#include <bits/stdc++.h>
using namespace std;
const int N = 100005;
string word[N];
int get_lower(string &word){
    int sz = word.size() , res = 0;
      for(int pos = 0; pos < sz; ++pos){
            if(word[pos] >= 'A' && word[pos] <= 'Z')
            word[pos] = 'a' + word[pos] - 'A';
            if(word[pos] == 'r') res++;
        }
    return res;
}
int n , tam[3*N] , R[3*N];
map<string,int> mapeo;
void add(string &a){
    int c = get_lower(a);
    if(mapeo.find(a) == mapeo.end()){
        tam[n] = a.size();
        R[n] = c;
        mapeo[a] = n++;
    }
}

vector<int> adj[3*N];
bool vis[3*N];
void dfs(int u,int t,int r){
    vis[u] = 1; tam[u] = t; R[u] = r;
    for(int j= 0; j < adj[u].size(); ++j)
        if(!vis[adj[u][j]])
            dfs(adj[u][j],t,r);
}

int orden[3*N];
bool cmp(int a,int b){
    if(R[a] != R[b]) return R[a] < R[b];
    return tam[a] < tam[b];
}
int main(){
  //freopen("in.c","r",stdin);

    int m;
    scanf("%d",&m);
    for(int i = 0; i < m; ++i){
        cin >> word[i];
        add(word[i]);
    }

    string a , b;
    int relations;
    scanf("%d",&relations);
    for(int i = 0; i < relations; ++i){
        cin >> a >> b;
        add(a); add(b);
        adj[mapeo[b]].push_back(mapeo[a]);
    }
    for(int i = 0; i < n; ++i)
        orden[i] = i;

    sort(orden,orden+n,cmp);
    for(int i = 0; i < n; ++i)
        if(!vis[orden[i]])
            dfs(orden[i],tam[orden[i]],R[orden[i]]);

    long long x = 0 , y = 0;
    for(int i = 0; i < m; ++i)
        x += R[mapeo[word[i]]] , y += tam[mapeo[word[i]]];

    cout << x<<" "<<y<<endl;
    //
    return 0;
}


