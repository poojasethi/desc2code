#include <string.h>
#include <stdio.h>
#include <string>
#include <vector>
#include <map>
using namespace std;
struct type{
	int col, size;
	bool use;
	type(){
		use = col = size = 0;
	}
	type(char a[]){
		use = 0;
		size = strlen(a);
		col = 0;
		for(int i = 0; i < size; i ++) col += a[i] == 'r';
	}
	type min(type b){
		return col > b.col ? b : col == b.col && size > b.size ? b : *this;
	}
};
map<string, int> id;
vector<vector<int> >w;
vector<int>arr;
vector<int>buf;
vector<type> b;
int n,m,top;
char a[500000];
void dfs(int u){
	b[u].use = true;
	int l = w[u].size();
	for(int i = 0; i < l; i ++){
		int v = w[u][i];
		if(!b[v].use) dfs(v);
		b[u] = b[u].min(b[v]);
	}
}
int read(){
	scanf("%s",a);
	int l = strlen(a);
	for(int i = 0; i < l; i ++) a[i] = a[i] >= 'A' && a[i] <= 'Z' ? a[i] - 'A' + 'a' : a[i];
	if(id.find(a) == id.end()){
		//printf("%s %i\n",a,top);
		id[a] = top;
		b.push_back(type(a));
		w.push_back(buf);
		++ top;
	}
	return id[a];
}
void solve(){
	id.clear();
	arr.clear();
	w.clear();
	b.clear();
	top = 0;
	for(int i = 0; i < n; i ++)
		arr.push_back(read());
	scanf("%i",&m);
	for(int i = 0; i < m; i ++){
		int word = read();
		int synonym = read();
		w[word].push_back(synonym);
	}
	__int64 col = 0, len = 0;
	for(int i = 0; i < top; i ++){
		if(!b[i].use) dfs(i);
	}
	for(int i = 0; i < top; i ++) b[i].use = false;
	for(int i = 0; i < n; i ++){
		int ip = arr[i];
		if(!b[ip].use) dfs(ip);
		col += b[ip].col;
		len += b[ip].size;
	}
	printf("%I64d %I64d\n",col, len);
}
int main(){
	while(~scanf("%i",&n)) solve();
	return 0;
}