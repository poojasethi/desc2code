#include<cstdio>
#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
#include<map>

using namespace std;

long long val[600000];
vector < int > graph[600000];

long long value(string s)
{
	long long c=0;
	int i;
	for(i=0;i<s.size();i++)
		if(s[i]=='r')
			c++;
	return c*6000000 + s.size();
}



void dfs(int node,int mark,vector < int > graph[],int actual[])
{
	actual[node]=mark;
	int i;
	for(i=0;i<graph[node].size();i++)
		if(actual[graph[node][i]]<0)
			dfs(graph[node][i],mark,graph,actual);
}


int main()
{
	int m;
	cin>>m;
	string s[m];
	int i,j;
	for(i=0;i<m;i++)
	{
		cin>>s[i];
		transform(s[i].begin(),s[i].end(),s[i].begin(),::tolower);
	}
	int count=0;
	map < string , int > dic;
	for(i=0;i<m;i++)  if(dic.find(s[i])==dic.end())
	{
		val[count]=value(s[i]);
		dic[s[i]]=count++;
	}
	int n;
	cin>>n;
	string a,b;
	for(i=0;i<n;i++)
	{
		cin>>a>>b;
		transform(a.begin(),a.end(),a.begin(),::tolower);
		transform(b.begin(),b.end(),b.begin(),::tolower);
		if(dic.find(a)==dic.end())
		{
		val[count]=value(a);
		dic[a]=count++;
		}
		if(dic.find(b)==dic.end())
		{
		val[count]=value(b);
		dic[b]=count++;
		}
		graph[dic[b]].push_back(dic[a]);
	}
	vector <pair < long long ,int > >  array;
	for(i=0;i<count;i++)
		array.push_back(make_pair(val[i],i));
	sort(array.begin(),array.end());
	int actual[count+1];
	for(i=0;i<count+1;i++)
		actual[i]=-1;
	for(i=0;i<count;i++)
		if(actual[array[i].second]==-1)
			dfs(array[i].second,array[i].second,graph,actual);
	long long first=0;
	long long second=0;
	for(i=0;i<m;i++)
	{
		int no=dic[s[i]];
		long long  w=val[actual[no]];
		long long r=w%(long long )6000000;
		long long len=w/(long long)6000000;
		first+=r;second+=len;
	}
	cout<<second<<" "<<first<<endl;
}

