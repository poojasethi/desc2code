#include <cstdio>
#include <algorithm>
#include <iostream>
#include <string>
#include <map>
#include <vector>
using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;

map<string, int> rname;
vi text, len, cnt, ans;
vvi lst;

int insert_word(string word)
{
    transform(word.begin(), word.end(), word.begin(), ::tolower);
    if(rname.count(word) == 0)
    {
        int ind = rname.size();
        rname[word] = ind;
        len.push_back(word.size());
        int c = 0;
        for(int j = 0; j < word.size(); ++j)
            c += word[j] == 'r';
        cnt.push_back(c);  
        lst.push_back(vi());
    }
    return rname[word];
}

bool CMP(int i, int j)
{
    return cnt[i] < cnt[j] || cnt[i] == cnt[j] && len[i] < len[j];
}

void dfs(int i, int j)
{
    if(ans[i] != -1)
        return;
    ans[i] = j;
    for(int k = 0; k < lst[i].size(); ++k)
        dfs(lst[i][k], j);
}

int main()
{
    int m, n;
    scanf("%d", &m);
    for(int i = 0; i < m; ++i)
    {
        string word;
        cin >> word;
        text.push_back(insert_word(word));
    }
    scanf("%d", &n);
    for(int i = 0; i < n; ++i)
    {
        string from, to;
        cin >> from >> to;
        int f = insert_word(from), t = insert_word(to);
        lst[t].push_back(f);
    }
    vi order;
    for(int i = 0; i < lst.size(); ++i)
        order.push_back(i);
    sort(order.begin(), order.end(), CMP);
    ans.assign(order.size(), -1);
    for(int i = 0; i < order.size(); ++i)
        dfs(order[i], order[i]);
    long long c = 0, l = 0;
    for(int i = 0; i < text.size(); ++i)
    {
        int ind = ans[text[i]];
        c += cnt[ind], l += len[ind];
    }
    cout << c << ' ' << l << endl;
    return 0;
}
