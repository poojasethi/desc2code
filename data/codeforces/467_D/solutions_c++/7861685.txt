#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int MAXN = 1000005;
ll M, N, A[MAXN], cnt[MAXN], best[MAXN], c, r, l;
string S, T;
map<string, int> ind;
map<int, string> inv;
vector<string> str;
vector<int> adj[MAXN];
bool vis[MAXN];

int count(string s){
  int res = 0;
  for(int i = 0; i < s.size(); i++) res += s[i] == 'r';
  return res;
}

void add(string s){
  if(ind.find(s) != ind.end()) return;
  ind[s] = c;
  inv[c] = s;
  cnt[c++] = count(s);
}

void lower(string &s){
  for(int i = 0; i < s.size(); i++) s[i] = tolower(s[i]);
}

bool comp(string s, string t){
  if(cnt[ind[s]] == cnt[ind[t]]) return s.size() < t.size();
  return cnt[ind[s]] < cnt[ind[t]];
}

void dfs(int v, int k){
  if(vis[v]) return;
  vis[v] = 1;
  best[v] = k;
  for(int i = 0; i < adj[v].size(); i++){
    dfs(adj[v][i], k);
  }
}

int main(){
  cin >> M;
  for(int i = 0; i < M; i++){
    cin >> S;
    lower(S);
    add(S);
    A[i] = ind[S];
  }
  cin >> N;
  for(int i = 0; i < N; i++){
    cin >> S >> T;
    lower(S), lower(T);
    add(S), add(T);
    adj[ind[T]].push_back(ind[S]);
  }
  map<string,int>::iterator it = ind.begin();
  for( ; it != ind.end(); ++it) str.push_back(it -> first);
  sort(str.begin(), str.end(), comp);
  for(int i = 0; i < str.size(); i++) dfs(ind[str[i]], ind[str[i]]);
  for(int i = 0; i < M; i++){
    r += cnt[best[A[i]]];
    l += inv[best[A[i]]].size();
  }
  cout << r << " " << l << '\n';
}
