#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N=100005;
bool vis[N];
int id;
map<string,int> have;
vector<int> v,g[N];
pair<int,int> p[N];
priority_queue < pair<pair<int,int>,int> > que;
int getid(string& str) {
    for(int i=0;i<str.length();i++) {
        if(str[i]>='A'&&str[i]<='Z') str[i]=str[i]+'a'-'A';
    }
    if(have[str]) return have[str];
    id++;
    have[str]=id;
    int cont=0;
    for(int i=0;i<str.length();i++) {
        if(str[i]=='r') cont++;
    }
    p[id]=make_pair(-cont,-str.length());
    que.push(make_pair(p[id],id));
    return id;
}
void bfs() {
    memset(vis,0,sizeof(vis));
    while(que.size()) {
        int u=que.top().second;
        que.pop();
        if(vis[u]) continue;
        vis[u]=1;
        for(int i=0;i<g[u].size();i++) {
            int v=g[u][i];
            if(p[v]<p[u]) {
                p[v]=p[u];
                que.push(make_pair(p[v],v));
            }
        }
    }
}
void solve() {
    int n,m;
    cin>>n;
    id=0;
    string x,y;
    for(int i=0;i<n;i++) {
        cin>>x;
        v.push_back(getid(x));
    }
    cin>>m;
    for(int i=0;i<m;i++) {
        cin>>x>>y;
        int u=getid(x);
        int v=getid(y);
        g[v].push_back(u);
    }
    bfs();
    LL s1=0,s2=0;

    for(int i=0;i<v.size();i++) {
        s1-=p[v[i]].first;
        s2-=p[v[i]].second;
    }

    cout<<s1<<' '<<s2<<endl;

}

int main() {
    #ifndef ONLINE_JUDGE
    freopen("in.txt","r",stdin);
    #endif
    solve();

    return 0;
}
