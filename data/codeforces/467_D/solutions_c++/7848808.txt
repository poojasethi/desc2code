#include <iostream>
#include <stdio.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <map>
using namespace std;

#define fore(i, l, r) for(int i = l; i < r; i++)
#define forn(i, n) fore(i, 0, n)
#define pb push_back
#define mp make_pair
#define x first
#define y second

typedef vector<int> vi;
typedef map<string, int> msi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef vector<vi> vvi;
typedef long long ll;

msi store;
int wc = 0;
pii rlc[500005];
vi G[500005];

int getId(string &s){
  string temp = "";
  int  l = s.length();
  forn(i, l){
    if(s[i] >= 'A' && s[i] <= 'Z') temp += s[i] - ('A' - 'a');
    else temp += s[i];
  }
  
  if(store[temp] != 0) return store[temp];
  wc++;
  store[temp] = wc; 
  int count = 0;
  forn(i, l) if(temp[i] == 'r') count++;
  rlc[wc] = mp(count, l);
  
  return wc;
}


void dfs(int node, pii &rep, vi &visited){
  visited[node] = 1;
  int l = G[node].size();
  rlc[node] = rep;
  forn(i, l){
    if(!visited[G[node][i]]) dfs(G[node][i], rep, visited);
  }
}


bool myOp(int i, int j){
  return rlc[i] < rlc[j];
}

void findOpt(){
  vi t(wc + 1); forn(i, wc + 1) t[i] = i;
  sort(t.begin() + 1, t.end(), myOp);
  vi visited(wc + 1, 0);
  forn(i, wc + 1){
    if(!visited[t[i]]){
      dfs(t[i], rlc[t[i]], visited);
    }
  }
}

int main(){
  std::ios_base::sync_with_stdio(false);
  int m;
  cin>>m;
  vi wrd(m);
  string s1, s2;
  forn(i, m){
    cin>>s1;
    wrd[i] = getId(s1);
  }
  
  int n;
  cin>>n;
  int a, b;
  forn(i, n){
    cin>>s1>>s2;
    a = getId(s1);
    b = getId(s2);
    G[b].pb(a);
  }
  
  findOpt();
  ll ans1 = 0, ans2 = 0;
  forn(i, m){
    ans1 += rlc[wrd[i]].x;
    ans2 += rlc[wrd[i]].y;
  }
  cout<<ans1<<" "<<ans2<<endl;
}
