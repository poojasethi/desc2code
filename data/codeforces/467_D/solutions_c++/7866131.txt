#include<bits/stdc++.h>
using namespace std;

#define N 500050
typedef long long ll;
map<string,int> W;
pair<int,int> r[N];
int wordN;

priority_queue<pair<pair<int, int>, int> > q;

int getW(string s){
	string t;
	for(int i=0;i<s.size();i++){
		if(s[i]>='A' && s[i]<='Z'){
			t.push_back(s[i]-'A'+'a');
		}
		else{
			t.push_back(s[i]);
		}
	}
	if(W[t])
		return W[t];
	W[t] = ++wordN;
	int rs=0;
	for(int i=0;i<t.size();i++){
		if(t[i] == 'r'){
			rs++;
		}
	}
	r[W[t]] = make_pair(-rs,-t.length());
	q.push(make_pair(r[W[t]],W[t]));
	return W[t];
}
	
vector<int> adjList[N];
vector<int> essay;
bool vis[N];

int main(){
	int m;
	cin>>m;
	for(int i=0;i<m;i++){
		string s;
		cin>>s;
		essay.push_back(getW(s));
	}
	int n;
	cin>>n;
	for(int i=0;i<n;i++){
		string a,b;
		cin>>a>>b;
		adjList[getW(b)].push_back(getW(a));
	}
	while(!q.empty()){
		int from = q.top().second;
		q.pop();
		if(vis[from]){
			continue;
		}
		vis[from] = true;
		for(int j=0;j<adjList[from].size();j++){
			int to = adjList[from][j];
			if(r[from] > r[to]){
				r[to] = r[from];
				q.push(make_pair(r[to],to));
			}
		}
	}
	ll ansr=0,anslen=0;
	for(int i=0;i<essay.size();i++){
		ansr-= r[essay[i]].first;
		anslen -= r[essay[i]].second; 
	}
	cout<<ansr<<" "<<anslen<<endl;
	return 0;
}		
			