#include <iostream>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;
map<string,int> mp;
struct node {
    int len;
    int r;
    int id;
    bool operator <(const node &rhs) const {
        return (r<rhs.r)||(r==rhs.r&&len<rhs.len);
    }
}str[200000+5];
int id;
int ord[200000+5];
string sss[200000+5];
int convert(string &s) {
    int sz=s.size();
    int r=0;
    for(int i=0;i<sz;i++) {
        if(s[i]<='Z') s[i]+=32;
        if(s[i]=='r') r++;
    }
    if(!mp[s]) {
        mp[s]=++id;
        str[id].len=sz;
        str[id].r=r;
        str[id].id=id;
    }
    return mp[s];
}
vector<int> g[200000+5];
bool vis[20000+5];
void dfs(int u,int len,int r) {
    vis[u]=1;
    for(int i=0;i<g[u].size();i++) {
        int v=g[u][i];
        if(vis[v]) continue;
        str[ord[v]].len=len,str[ord[v]].r=r;
        dfs(v,len,r);
    }
}
int m,n;
int main() {
    cin>>m;
    for(int i=0;i<m;i++) {
        cin>>sss[i];
        convert(sss[i]);
    }
    cin>>n;
    string a,b;
    for(int i=0;i<n;i++) {
        cin>>a>>b;
        int v=convert(a);
        int u=convert(b);
        g[u].push_back(v);
    }
    sort(str+1,str+id+1);
    for(int i=1;i<=id;i++) ord[str[i].id]=i;
    for(int i=1;i<=id;i++) {
        int u=str[i].id;
        if(!vis[u]) dfs(u,str[i].len,str[i].r);
    }
    long long r=0,len=0;
    for(int i=0;i<m;i++) {
        int u=mp[sss[i]];
        r+=str[ord[u]].r;
        len+=str[ord[u]].len;
    }
    cout<<r<<' '<<len<<endl;
    return 0;
}