#include <bits/stdc++.h>
#define maxn (1000005)

using namespace std;

int D_cnt;
bool vis[maxn];
vector<int> esy;
vector<int> syn[maxn];
map<string,int> Dic;
pair<int,int> R[maxn];
priority_queue<pair<pair<int,int>,int> > Q;

int Getdic(string &str) {
	for(int i=0; i<str.length(); i++) {
		if('A'<=str[i] && str[i]<='Z') {
			str[i] += 'a' - 'A';
		}
	}
	if(Dic[str]) return Dic[str];
	Dic[str] = ++D_cnt;
	int rcnt(0);
	for(int i=0; i<str.length(); i++) {
		if(str[i]=='r') {
			++rcnt;
		}
	}
	R[D_cnt] = make_pair(-rcnt,-str.size());
	Q.push(make_pair(R[D_cnt],D_cnt));
	return D_cnt;
}

int main() {
	int n, m, A, B;
	string str, stra, strb;
	cin >> n;
	for(int i=0; i<n; i++) {
		cin >> str;
		esy.push_back(Getdic(str));
	}
	cin >> m;
	for(int i=0; i<m; i++) {
		cin >> stra >> strb;
	  	A = Getdic(stra) , B = Getdic(strb);
		syn[B].push_back(A);
	}
	while(!Q.empty()) {
		int u = Q.top().second;
		Q.pop();
		if(vis[u]) continue;
		vis[u] = true;
		for(int i=0; i<syn[u].size(); i++) {
			int v = syn[u][i];
			if(R[v] < R[u]) {
				R[v] = R[u];
				Q.push(make_pair(R[v],v));
			}
		}
	}
	long long ansR(0), anslen(0);
	for(int i=0; i<esy.size(); i++) {
		ansR -= R[esy[i]].first;
		anslen -= R[esy[i]].second;
	}
	cout << ansR << ' ' << anslen << endl;
	return 0;
}

