//in the name of God

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const ll maxx = 3e5+10;

struct node
{
	bool operator<(const node &right) const
	{
		if(rs == right.rs)
			return sz < right.sz;
		return rs < right.rs;
	}

	ll rs, sz, nm;
};

ll n, m, length, RS, cnt;
ll e[maxx];
node p[maxx];
vector<ll> g[maxx];
map<string, ll> mp;
bool mark[maxx];
ll best[maxx];

void lower(string& s)
{
	for(ll i=0; i<s.size(); i++)
		s[i] = tolower(s[i]);
}

ll Rs(string &s)
{
	ll ret = 0;
	for(ll i=0; i<s.size(); i++)
		ret += s[i]=='r';
	return ret;
}

ll number(string &s)
{
	if(mp[s] == 0)
	{
		mp[s] = ++cnt;
		p[cnt].rs = Rs(s);
		p[cnt].sz = s.size();
		p[cnt].nm = cnt;

		return cnt;
	}

	return mp[s];
}


void dfs(ll num, ll bst)
{
	mark[num] = true;
	best[num] = bst;

	for(ll i=0; i<g[num].size(); i++)
	{
		if(!mark[g[num][i]])
			dfs(g[num][i], bst);
	}
}

int main()
{
	ios_base::sync_with_stdio(false);

	cin >> m;
	for(ll i=0; i<m; i++)
	{	
		string s;
		cin >> s;
		lower(s);
		e[i] = number(s);
	}
	cin >> n;
	for(ll i=0; i<n; i++)
	{
		string s1, s2;
		cin >> s1 >> s2;
		lower(s1), lower(s2);
		ll n1 = number(s1);
		ll n2 = number(s2);

		g[n2].push_back(n1);
	}

	sort(p+1, p+cnt+1);

	for(ll i=1; i<=cnt; i++)
		if(!mark[p[i].nm])
		{
			dfs(p[i].nm, i);
		}


	for(ll i=0; i<m; i++)
	{
		length += p[best[e[i]]].sz;
		RS += p[best[e[i]]].rs;
	}

	cout << RS << ' ' << length << endl;


	return 0;
}