#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int differ= 'a'-'A';
const int prime = 27;
const int N = 3e5+2;

vector<int> adj[N];
int R[N];
ll ar[(int)1e5+2];
int dp[N];
int len[N];
int ord=0;

map<string,int> hash;
priority_queue<pair<pair<int,int>,int> >pq;
pair<int,int> pp[N];
int make_hash(string s){
	int i,add,r=0,size=s.size();
	for(i=0;i<s.size();++i){
		if(s[i]<'a')s[i]+=differ;
		if(s[i]=='r')++r;
	}
	if(hash.find(s)==hash.end()){
		hash[s]= ord;
		pp[ord]= make_pair(-r,-s.size());
		pq.push(make_pair(pp[ord],ord++) );
	}
	return hash[s];
}

bool visit[N];

int main(){
	int n,m,i;cin>>n;string s,a,b;
	for(i=0;i<n;++i){
		cin>>s;
		ar[i]=make_hash(s);
	}
	cin>>m;
	for(i=0;i<m;++i){
		cin>>a>>b;
		ll r1= make_hash(a),r2= make_hash(b);
		adj[r2].push_back(r1);
	}
	ll rc=0, rl = 0;
	int j,cur,u,rr,tt;
	while(!pq.empty()){
		cur= pq.top().second;pq.pop();
		if(visit[cur])continue;
		for(i=0;i<adj[cur].size();++i){
			u= adj[cur][i];
			if(visit[u])continue;
			if(pp[u]<pp[cur]){
				pp[u]=pp[cur];
				pq.push(make_pair(pp[u],u));
			}
		}
	}
	for(i=0;i<n;++i){
		rc -= pp[ar[i]].first;
		rl-=pp[ar[i]].second;
	}
	cout<<rc<<" "<<rl<<endl;
}
