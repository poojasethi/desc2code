#include <bits/stdc++.h>
using namespace std;

typedef long long int tint;

const int MAXN=2*1e5+10;

int pos=1;
pair <int, int> cost[MAXN];
int order[MAXN];
vector <int> replaces[MAXN]; 
string essay[MAXN];
bool used[MAXN];
map <string, int> ind;

string lowcase (string s){
    for (int i=0;i<int(s.size());i++)
        if (s[i]>='A' && s[i]<='Z')
            s[i]+=32;
    return s;
}

int countR (string s){
    int res=0;
    for (int i=0;i<int(s.size());i++)
        if (s[i]=='r')
            res++;
    return res;
}

int add (string s){
    int i = ind[s];
    if (!i) i=ind[s]=pos++;
    cost[i]=make_pair(countR(s), s.size());
    return i;
}

bool comp (int a, int b){
    return cost[a]<cost[b];
}

void dfs (int u){
    used[u]=true;
    for (int i=0;i<int(replaces[u].size());i++)
        if (!used[replaces[u][i]]){
            cost[replaces[u][i]]=cost[u];   
            dfs (replaces[u][i]);
        }
}

int main(){
    int m, n, ind1, ind2;
    string a, b;
    cin >> m;
    for (int i=0;i<m;i++){
        cin >> essay[i];
        essay[i]=lowcase(essay[i]); 
        add(essay[i]);
    }
    cin >> n;
    for (int i=0;i<n;i++){
        cin >> a >> b;
        a=lowcase(a);
        b=lowcase(b);
        
        ind1=add(a);
        ind2=add(b);
        
        replaces[ind2].push_back(ind1);
    }
    for (int i=1;i<pos;i++) order[i]=i;
    sort (order+1, order+pos, comp); 

    for (int i=1;i<pos;i++)
        if (!used[order[i]])
            dfs (order[i]);

    tint cantr=0, length=0;
    for (int i=0;i<m;i++){
        cantr+=cost[ind[essay[i]]].first;
        length+=cost[ind[essay[i]]].second;
    }

    cout << cantr << ' ' << length << endl;

    return 0;
}
