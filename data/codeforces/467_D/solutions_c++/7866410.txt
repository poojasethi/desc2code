#include <bits/stdc++.h>
#define PB push_back
#define LL long long

using namespace std;

const LL maxn = 5 * 1000 * 100 + 10;
map<string , LL> mp;
LL Cr[maxn] , len[maxn] , n , m , cnt;
bool mark[maxn];
string s;
vector<LL> e[maxn] , sources;

LL change(string &s){
	LL an = 0;
	for(int j = 0;j < s.size();j ++){
		if(s[j] < 'a')
			s[j] = s[j] - 'A' + 'a';
		if(s[j] == 'r')
			an ++;
	}
	if(mp.find(s)->second == 0)
		mp[s] = cnt,
		cnt ++;
	LL p = mp[s];
	Cr[p] = an;
	len[p] = s.size();
	return p;
}

void input(){
	cin >> n;
	cnt = 1;
	for(int o = 0;o < n;o ++)
		cin >> s,
		sources.PB(change(s));
	cin >> m;
	for(int i = 0;i < m;i ++){
		cin >> s;
		LL u = change(s);
		cin >> s;
		LL v = change(s);
		e[u].PB(v);
	}
}

inline void dfs(LL source){
	mark[source] = true;
	for(int i = 0;i < e[source].size();i ++){
		if(!mark[e[source][i]])
			dfs(e[source][i]);
		if(Cr[source] < Cr[e[source][i]])
			continue;
		if(Cr[source] == Cr[e[source][i]]){
			len[source] = min(len[source] , len[e[source][i]]);
			continue;
		}
		Cr[source] = Cr[e[source][i]];
		len[source] = len[e[source][i]];
	}
}

void work(){
	for(int i = 0;i < sources.size();i ++)
		if(!mark[sources[i]])
			dfs(sources[i]);
	memset(mark , 0 , sizeof mark);
	for(int i = 0;i < sources.size();i ++)
		if(!mark[sources[i]])
			dfs(sources[i]);
	LL r_ans = 0;
	LL l_ans = 0;
	for(int i = 0;i < sources.size();i ++)
		r_ans += Cr[sources[i]],
		l_ans += len[sources[i]];
	cout << r_ans << " " << l_ans;
}

int main(){
	input();
	work();
	return 0;
}
