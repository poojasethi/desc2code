#include <bits/stdc++.h>

#define FI(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define F(ii,aa,bb) for(int ii=aa;ii<bb;ii++)
#define TF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define pii pair<int,int>
#define st first
#define nd second
#define pb push_back
#define pdd pair<double,double>
#define ll long long
#define inf (1000000000)

using namespace std;

int n,m,A[100005],k;
pii cnt[100005];
bool H[100005];
vector<int> v[100005];
map<string,int> Map;
priority_queue< pair<pii,int> > Q;

int findVal(string &s){
	int sz = s.size(),r=0;
	
	F(i,0,sz){
		s[i] = tolower(s[i]);
		r += s[i]=='r';
	}
	
	if(Map[s]) return Map[s];

	Map[s] = ++k;
	cnt[k] = mp(r,sz);
	Q.push( mp(mp(-r,-sz),k) );

	return k;
}

int main()
{
	int a,b;
	string s,s1,s2;
	scanf("%d",&m);
	FI(i,1,m){
		cin >> s;
		A[i] = findVal(s);
	}
	scanf("%d",&n);
	FI(i,1,n){
		cin >> s1 >> s2;
		a = findVal(s1);
		b = findVal(s2);
		v[b].pb(a);
	}
	int word,to;
	while(!Q.empty()){
		word = Q.top().nd;
		Q.pop();
		if(H[word]) continue;
		H[word] = true;
		
		int sz = v[word].size();
		F(i,0,sz){
			to = v[word][i];
			if(cnt[word] < cnt[to]){
				cnt[to] = cnt[word];
				Q.push( mp(mp(-cnt[to].st,-cnt[to].nd),to) );
			}
		}
	}
	ll ansR=0,ansLen=0;
	FI(i,1,m){
		ansR += cnt[A[i]].st;
		ansLen += cnt[A[i]].nd;
	}
	cout << ansR << " " << ansLen << endl;

	return 0;
}
