#include<cstring>
#include<cstdlib>
#include<cmath>
#include<cstdio>
#include<iostream>
#include<sstream>
#include<fstream>
#include<algorithm>
#include<map>
#include<set>
#include<bitset>
#include<queue>
#include<deque>
#include<utility>
#include<vector>
#include<functional>
#include<string>
#include<stack>
#define rep(i,n) for(int i=0;i<n;i++)
#define mp make_pair
#define pb push_back
using namespace std;
typedef long long LL;
typedef pair<int,int> pii;
typedef pair<pii,int> piii;
int n,wordn;
vector<int> essay;
priority_queue<piii> heap;
map<string,int> hash;
vector<pii> pnt;
vector<int> g[233333];
bool v[233333];
int Hash(string s){
	int len=s.size();
	int cntr=0;
	rep(i,len){
		if(s[i]>='A' && s[i]<='Z')
			s[i]+='a'-'A';
		if(s[i]=='r')
			cntr++;
	}
	if(hash[s])
		return hash[s];
	hash[s]=++wordn;
	pnt.pb(mp(-cntr,-len));
	heap.push(mp(mp(-cntr,-len),wordn));
	return hash[s];
}
void init(){
	pnt.pb(mp(0,0));
	cin>>n;
	rep(i,n){
		string s;
		cin>>s;
		essay.pb(Hash(s));
	}
	cin>>n;
	rep(i,n){
		string a,b;
		cin>>a>>b;
		g[Hash(b)].pb(Hash(a));
	}
	return;
}
void slove(){
	while(!heap.empty()){
		int id=heap.top().second;
		heap.pop();
		if(v[id])
			continue;
		v[id]=1;
		rep(i,g[id].size())
			if(pnt[id]>pnt[g[id][i]]){
				pnt[g[id][i]]=pnt[id];
				heap.push(mp(pnt[g[id][i]],g[id][i]));
			}
	}
	int r=0;
	LL len=0;
	rep(i,essay.size()){
		r-=pnt[essay[i]].first;
		len-=(LL)pnt[essay[i]].second;
	}
	cout<<r<<' '<<len<<endl;
	return;
}
int main(){
	init();
	slove();
	return 0;
}
