#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
const int maxt = 660, maxn = 1010;
struct BigInt {
	int a[maxt], n;
	int operator [] (int x) const {
		return a[x];
	}
	int&operator [] (int x) {
		return a[x];
	}
	void set(int x) {
		memset(a, 0, sizeof(a));
		a[n = 0] = x;
		if (x > 9)
			a[0] = x % 10, a[n = 1] = x / 10;
	}
	BigInt() {
		set(0);
	}
	void operator -= (const BigInt &b) {
		int v = 0;
		for (int i = 0; i <= n; ++i) {
			a[i] -= b[i] + v;
			v = 0;
			if (a[i] < 0) {
				a[i] += 10;
				v = 1;
			}
		}
		while (n && a[n] == 0)
			--n;
	}
	void operator *= (int x) {
		int v = 0;
		for (int i = 0; i <= n; ++i) {
			v += a[i] * x;
			a[i] = v % 10;
			v /= 10;
		}
		while (v > 0)
			a[++n] = v % 10, v /= 10;
	}
	BigInt operator * (int x) {
		BigInt ret = *this;
		ret *= x;
		return ret;
	}
	bool operator == (const BigInt &b) {
		if (n != b.n)
			return false;
		for (int i = 0; i <= n; ++i)
			if (a[i] != b[i])
				return false;
		return true;
	}
	void print() {
		printf("%d", a[n]);
		for (int i = n - 1; i >= 0; --i)
			printf("%d", a[i]);
		printf("\n");
	}
}a[maxn], res[maxn], b;
int n;
int ans[maxn], tot, sum;
void dfs(int f, bool had2) {
	if (a[f - 1].n > 333)
		return;
	if (a[f - 1] == b) {
		ans[++tot] = f - 1;
		if (tot > 1000)
			tot = 1000;
	}
	if (!had2) {
		a[f] = a[f - 2] * 12;
		dfs(f + 1, false);
	}
	if (!had2 && (f & 1) == 0)
		return;
	a[f] = a[f - 1] * 13;
	a[f] -= a[f - 2] * 12;
	dfs(f + 1, true);
}
void get(int f, bool had2) {
	if (f == n + 1) {
		if (!(a[f - 1] == b) && sum < 1000)
			res[++sum] = a[f - 1];
		return;
	}
	if (!had2) {
		a[f] = a[f - 2] * 12;
		get(f + 1, false);
	}
	if (!had2 && (f & 1) == 0)
		return;
	a[f] = a[f - 1] * 13;
	a[f] -= a[f - 2] * 12;
	get(f + 1, true);
}
int main() {
	//freopen("x.in", "r", stdin);
	char s[1010];
	gets(s);
	n = strlen(s);
	reverse(s, s + n);
	for (int i = 0; i < n; ++i)
		b[i] = s[i] - '0';
	b.n = n - 1;
	if (b.n == 0 && b[0] == 2) {
		printf("YES\n1\n1\n0\n");
		exit(0);
	}
	a[1].set(2);
	a[2].set(13);
	dfs(3, false);
	if (!tot)
		printf("NO\n");
	else {
		printf("YES\n");
		printf("%d\n", tot);
		for (int i = 1; i <= tot; ++i)
			printf("%d%c", ans[i], i < tot ? ' ' : '\n');
		for (int i = 1; i <= tot; ++i) {
			n = ans[i];
			get(3, false);
		}
		printf("%d\n", sum);
		for (int i = 1; i <= sum; ++i)
			res[i].print();
	}
}