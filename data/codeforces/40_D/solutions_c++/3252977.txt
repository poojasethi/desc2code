// In the name of God

#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <set>
#include <map>
#include <complex>
#include <cmath>
#include <fstream>
#include <iomanip>
#define x first
#define y second

using namespace std;

typedef long long ll;
typedef long double ld;
typedef complex<ld> point;
typedef pair<ll,ll> pii;

class bignum
{
public:
  vector<int> v;
  
  bignum(){
    v.resize(0);
  }

  inline void get(){
    string s;
    cin >> s;
    reverse(s.begin(),s.end() );
    for(int i=0;i<s.size();++i)
      if(i % 3 == 0)
	v.push_back(s[i] - '0');
      else if(i % 3 == 1)
	v.back() += (s[i] - '0') * 10;
      else
	v.back() += (s[i] - '0') * 100;
  }

  inline void out(){
    cout << v.back();
    for(int i=v.size()-2;i>=0;--i){
      if(v[i] < 10)
	cout << "00" << v[i];
      else if(v[i] < 100)
	cout << "0" << v[i];
      else
	cout << v[i];
    }
    cout << endl;
  }

  inline void makegood(){
    for(int i=0;i<v.size()-1;++i)
      if(v[i] < 0){
	v[i] += 1000;
	v[i + 1]--;
      }

    while(v.back() == 0)
      v.pop_back();
    
    for(int i=0;i<v.size()-1;++i){
      v[i + 1] += v[i] / 1000;
      v[i] %= 1000;
    }

    while(v.back() >= 1000){
      v.push_back(v.back() / 1000);
      v[v.size() - 2] %= 1000;
    }
  }
};

inline bignum operator - (const bignum &fi,const bignum &se)
{
  bignum ret;
  for(int i=0;i<se.v.size();++i)
    ret.v.push_back(fi.v[i] - se.v[i]);
  for(int i=se.v.size();i<fi.v.size();++i)
    ret.v.push_back(fi.v[i]);
  ret.makegood();
  return ret;
}

inline bignum operator * (const bignum &fi,const int se)
{
  bignum ret;
  for(int i=0;i<fi.v.size();++i)
    ret.v.push_back(fi.v[i] * se);
  ret.makegood();
  return ret;
}

inline bool operator == (const bignum &fi,const bignum &se)
{
  if(fi.v.size() == se.v.size() ){
    for(int i=0;i<fi.v.size();++i)
      if(fi.v[i] != se.v[i])
	return false;
    return true;
  }
  return false;
}

inline bool operator < (const bignum &fi,const bignum &se)
{
  if(fi.v.size() != se.v.size() )
    return fi.v.size() < se.v.size();
  for(int i=fi.v.size()-1;i>=0;--i)
    if(fi.v[i] != se.v[i])
      return fi.v[i] < se.v[i];
  return false;
}

set<pair<bignum,bignum> > s;

int main()
{  
  ios_base::sync_with_stdio(false);

  bignum in;
  in.get();

  if(in.v.size() == 1 && in.v.back() < 10){
    if(in.v[0] == 2){
      cout << "YES" << endl;
      cout << 1 << endl << 1 << endl << 0 << endl;
    }
    else
      cout << "NO" << endl;
    return 0;
  }

  bignum hlp;
  bignum hlp2;
  hlp2.v.push_back(2);
  hlp.v.push_back(13);

  bool flag = false;
  s.insert(pair<bignum,bignum>(hlp2,hlp) );
  for(int i=0;i<600;++i){
    set<pair<bignum,bignum> > q;
    for(set<pair<bignum,bignum> >::iterator it=s.begin();it!=s.end();it++){
      bignum now = it -> second;
      if(now == in){
  	cout << "YES" << endl;
  	cout << 1 << endl << i + 2 << endl;
  	flag = true;
  	break;
      }
      else{
	bignum hlp1 = (it -> first) * 12;
	bignum hlp2 = (it -> second) * 13;
  	q.insert(pair<bignum,bignum>(it -> second,hlp1) );
  	q.insert(pair<bignum,bignum>(it -> second,hlp2 - hlp1) );
      }
    }
    if(flag == true)
      break;
    s = q;
  }

  if(flag == false)
    cout << "NO" << endl;
  else{
    set<bignum> q;
    for(set<pair<bignum,bignum> >::iterator it=s.begin();it!=s.end();++it){
      bignum hlp = it -> second;
      if(!(hlp == in) )
	q.insert(hlp);
    }
    cout << q.size() << endl;
    if(q.size() ){
      for(set<bignum>::iterator it=q.begin();it!=q.end();++it){
	bignum hlp = *it;
	hlp.out();
      }
    }
  }

  return 0;
}
