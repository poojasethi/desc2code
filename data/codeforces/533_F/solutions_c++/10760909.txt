#include <iostream>
#include <vector>
using namespace std;
const int MAX = 200005;
int f[MAX], ptr[26], x[26];
vector<int> v[26];
bool equall(string &s, string &t, int k, int pos)
{
	for (int i = 0; i < 26; i++)
	{
		while (ptr[i] < v[i].size() && v[i][ptr[i]] < pos - k)
			ptr[i]++;
		if (ptr[i] < v[i].size() && v[i][ptr[i]] < pos)
		{
			if (s[v[i][ptr[i]]] == s[pos] && t[v[i][ptr[i]] - (pos - k)] != t[k])
				return false;
			if (s[v[i][ptr[i]]] != s[pos] && t[v[i][ptr[i]] - (pos - k)] == t[k])
				return false;
		}
	}
	return true;
}
int main()
{
	ios::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	string s, t;
	cin >> s >> t;
	for (int i = 0; i < m; i++)
		v[t[i] - 'a'].push_back(i);
	int k = 0;
	for (int i = 1; i < m; i++)
	{
		while (k > 0 && !equall(t, t, k, i))
			k = f[k];
		if (equall(t, t, k, i))
			k++;
		f[i + 1] = k;
	}
	for (int i = 0; i < 26; i++)
	{
		v[i].clear();
		ptr[i] = 0;
	}
	for (int i = 0; i < n; i++)
		v[s[i] - 'a'].push_back(i);
	vector<int> ans;
	k = 0;
	for (int i = 0; i < n; i++)
	{
		while (k > 0 && !equall(s, t, k, i))
			k = f[k];
		if (equall(s, t, k, i))
			k++;
		if (k == m)
		{
			for (int j = 0; j < 26; j++)
			{
				while (ptr[j] < v[j].size() && v[j][ptr[j]] <= i - m)
					ptr[j]++;
				x[j] = -1;
				if (ptr[j] < v[j].size() && v[j][ptr[j]] <= i)
					x[j] = t[v[j][ptr[j]] - (i - (m - 1))] - 'a';
			}
			bool valid = true;
			for (int j = 0; j < 26 && valid; j++)
				if (x[j] != -1 && x[x[j]] != j)
				{
					if (x[x[j]] == -1)
						x[x[j]] = j;
					else
						valid = false;
				}
			if (valid)
				ans.push_back(i - m + 2);
			k = f[k];
		}
	}
	cout << ans.size() << endl;
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
}
