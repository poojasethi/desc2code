#include <iostream>
#include <string.h>
#include <algorithm>
#include <cassert>
using namespace std;

struct tri{
	int ind;int f;int s;int i1;};
	
bool compare1(tri a,tri b){//teacher
	return (a.s > b.s)||(a.s==b.s && a.f<b.f)||(a.s==b.s && a.f==b.f && a.ind < b.ind);
}

bool compare2(tri a,tri b){
	return (a.f > b.f)||(a.f==b.f && a.s>b.s)||(a.s==b.s && a.f==b.f && a.ind < b.ind);
}

tri a[100010];bool mark[100010];

int main()
{
	int n,p,k,i,ptr=0,j=1;
	memset(mark,0,sizeof(mark));
	cin >> n >> p >> k;
	for(i=1;i<=n;i++)
		{a[i].ind=i;cin >> a[i].f >> a[i].s;}
	sort(a+1,a+n+1,compare1);
	for(i=1;i<=n;i++)
		a[i].i1=i;
	sort(a+1,a+n+1-(p-k),compare2);
	for(i=1;i<=k;i++){
		cout << a[i].ind << " ";
		mark[a[i].ind]=1;
		ptr=max(ptr,a[i].i1);
	}
	sort(a+1,a+n+1,compare1);
	for(i=ptr+1;i<=ptr+(p-k);i++){
		if(mark[a[i].ind]!=0)
			cout << a[i].ind << " " << ptr <<" " << a[i].i1;
		assert(mark[a[i].ind]==0);
		mark[a[i].ind]=1;
		cout << a[i].ind << " ";
	}
	return 0;
}
