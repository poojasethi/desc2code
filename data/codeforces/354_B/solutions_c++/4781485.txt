#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<string>
#include<algorithm>
#include<vector>
#include<map>
using namespace std;
map<pair<int, int>, int> mymap;
#define INF 1000
int n;
string s[100];
int ok(int i, int j, int c){
	if (i < 0) return false;
	if (j < 0) return false;
	if (i >= n) return false;
	if (j >= n) return false;
	return s[i][j] == c;
}
int get(int i, int mask){
	if (mymap.find(make_pair(i, mask)) != mymap.end()) return mymap[make_pair(i, mask)];
	if (i == 2 * n - 2) return mymap[make_pair(i, mask)] = 0;
	int t = i % 2;
	int ret = (t?-INF:INF);
	for (char c = 'a'; c <= 'z'; ++c){
		int nm = 0;
		for (int j = 0; j < n; ++j){
			int k = i - j;
			if (k >= n) continue;
			if (k < 0) continue;
			if ((1<<j)&mask){
				if (ok(j + 1, k, c)) nm |= 1<<(j + 1);
				if (ok(j, k + 1, c)) nm |= 1<<j;
			}
		}
		if (nm){
			int now = get(i + 1, nm) + (c == 'a') - (c == 'b');
			if (t) ret = max(ret, now);
			else ret = min(ret, now);
		}
	}
	return mymap[make_pair(i, mask)] = ret;
}
int main(){
	/*
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
	*/
	while (cin>>n){
		mymap.clear();
		for (int i = 0; i < n; ++i)
			cin>>s[i];
		int ret = get(0, 1) + (s[0][0] == 'a') - (s[0][0] == 'b');
		if (ret > 0) cout<<"FIRST"<<endl;
		else if (ret < 0) cout<<"SECOND"<<endl;
		else cout<<"DRAW"<<endl;
	}
}
