#include<cstdio>
#include<cstring>
#include<algorithm>
#define N 20
#define E 0x3f3f3f3f
using namespace std;
char t[N][N+1];

int pd[2*N-1][1<<N];
int eq[2*N-1][26];

int n;
int solve(int d, int msk)
{
	if(d==2*n-2) return 0;

	int& ans = pd[d][msk];

	if(ans != E) return ans;

	for(int i=0;i<26;++i)
	{
		int e = eq[d+1][i];
		int nx;
		if(d+1<n)
			nx = (msk&e) | ((msk<<1)&e);	
		else
			nx = (msk&e) | ((msk>>1)&e);
		if(nx)
		{
			int tmp = (i==0)-(i==1) + solve(d+1, nx);
			if(ans==E)
				ans = tmp;
			else
			{
				if(d%2) //p_1
					ans = max(ans, tmp);
				else //p_2
					ans = min(ans, tmp);
			}
		}
	}
	return ans;	
}
int main()
{
	memset(pd,0x3f, sizeof pd);
	scanf("%d",&n);
	for(int i=0;i<n;++i)
		scanf("%s",t[i]);
	
	for(int i=0;i<n;++i)
	{
		int r=0, c = i, p=0;
		while(c>=0)
		{
			eq[i][t[r][c]-'a'] |= 1<<p;
			++r,--c; ++p;
		}
	}
	for(int i=n;i<2*n-1;++i)
	{
		int r = i-(n-1), c= n-1,p=0;
		while(r<n)
		{
			eq[i][t[r][c]-'a'] |= 1<<p;
			++r,--c;++p;
		}

	}

	int ans = (t[0][0]=='a') - (t[0][0]=='b') + solve(0,1);
	
	if(ans == 0)
		printf("DRAW\n");
	else if( ans > 0)
		printf("FIRST\n");
	else
		printf("SECOND\n");
	return 0;
}
