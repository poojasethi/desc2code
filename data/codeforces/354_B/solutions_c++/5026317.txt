#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#define MAXN 26
#define Num 1<<20
#define Ask(xx, yy) (((xx)>>(yy-1))&1)
#define Add(xx, yy) ((xx)|(1<<(yy-1)))
using namespace std ;

int N, M, INF ;
int dp[42][Num] ;
int map[MAXN][MAXN] ;
char ss[MAXN] ;

int Dp(int at, int state)
{
	if(at == N*2-1) 
		return 0 ;
	if(dp[at][state] != -INF) return dp[at][state] ;
	int i, j, x, y ;
	int to[30], tmp ;
	memset(to, 0, sizeof(to)) ;
	for(x = 1; x <= N; x ++)
	{
		if((y = at-x+1)<1 || y>N) continue ;
		if(!Ask(state, x)) continue ;
		if(y != N) 
			to[map[x][y+1]] = Add(to[map[x][y+1]], x) ;
		if(x != N) 
			to[map[x+1][y]] = Add(to[map[x+1][y]], x+1) ;
	} 
	for(i = 0, tmp = INF; i < 26; i ++)
		if(to[i] != 0) tmp = min(tmp, Dp(at+1, to[i])-(i==at%2)+(i==(at+1)%2)) ;
	return dp[at][state] = -tmp ;
}

int main()
{
	int i, j ;
	int x, y, cnt ;
	scanf("%d", &N) ;
	for(i = 1; i <= N; i ++)
	{
		scanf("%s", ss) ;
		for(j = 1; j <= N; j ++)
			map[i][j] = ss[j-1]-'a' ;
	}
	memset(dp, 200, sizeof(dp)) ;
	// now t move; at x,y.
	INF = -dp[0][0] ;	
	cnt = Dp(1, 1)+(map[1][1]==1)-(map[1][1]==0) ;
	if(cnt > 0) printf("SECOND\n") ;
	else if(cnt < 0) printf("FIRST\n") ;
	else printf("DRAW\n") ;
	//system("pause") ;
	return 0 ;
}