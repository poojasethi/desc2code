#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
#include <map>
using namespace std;

const int oo = 0x3f3f3f3f;
const int N = 25;
char s[N][N];
map<int,int> ma[45];
int n;
int rev[1 << 22];
int get(char c)
{
	if(c == 'a') return 1;
	if(c == 'b') return -1;
	return 0;
}

int lowbit(int x)
{
	return x & (-x);
}

int dfs(int dep,int state)
{
	if(dep == 2 * n) return 0;
	if(ma[dep].count(state)) return ma[dep][state];
	int ans;
	if(dep & 1) ans = -oo;
	else ans = oo;
	int a[N];
	int ct = 0;
	int tmp = state;
	while(state) {
		a[ct ++] = 1 + rev[lowbit(state)];
		state -= lowbit(state);
	}
	state = tmp;
	for(char next = 'a'; next <= 'z'; next ++) {
		int new_state = 0;
		int cost = get(next);
		for(int i = 0; i < ct; i ++) {
			int x = a[i];
			int y = dep - x;
			if(x < n && s[x + 1][y] == next) new_state |= (1 << x);
			if(y < n && s[x][y + 1] == next) new_state |= (1 << (x - 1));
		}
		if(!new_state) continue;
		if(dep & 1) ans = max(ans,cost + dfs(dep + 1,new_state));
		else ans = min(ans,cost + dfs(dep + 1,new_state));
	}
	return ma[dep][state] = ans;
}

int main()
{
	for(int i = 0; i < 22; i ++)
		rev[1 << i] = i;
	scanf("%d",&n);
	for(int i = 1; i <= n; i ++)
		scanf("%s",s[i] + 1);
	int ans = get(s[1][1]) + dfs(2,1);
//	cout << ans << endl;
	if(ans > 0) printf("FIRST\n");
	else if(ans == 0) printf("DRAW\n");
	else printf("SECOND\n");
	return 0;
}
