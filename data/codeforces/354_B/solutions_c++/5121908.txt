#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>

#define mp make_pair

using namespace std;
int n;
char M[20][21];
map<int,int> pd[40];

int f(int a, int b, int p) {
	if (p)	return min(a,b);
	else	return max(a,b);
}

int init (int p) {
	return p?1000:-1000;
}

int num (int x) {
	if (x == 0)	return 1;
	else if (x == 1)	return -1;
	else	return 0;
}

int solve (int len, int mask) {
	int i, j;
	if (len == 2*n-2)	return 0;
	if (pd[len].count(mask) == 0) {
		int ans = init((1-len)%2);
		vector<pair<int,int> > pos;
		for (i = 0; i < 20; i++)	if (mask & (1<<i))	pos.push_back(mp(len-i, i));
		for (i = 0; i < 26; i++) {
			int nmask = 0;
			for (j = 0; j < pos.size(); j++) {
				int x = pos[j].first, y = pos[j].second;
				if (x+1 < n && M[x+1][y]-'a' == i)	nmask |= (1<<y);
				if (y+1 < n && M[x][y+1]-'a' == i)	nmask |= (1<<(y+1));
			}
			if (nmask)
				ans = f(solve (len+1, nmask)+num(i), ans, (1-len)%2);
		}
		pd[len][mask] = ans;
	}
	return pd[len][mask];
}

int main (void) {
	int i;
	scanf ("%d", &n);
	for (i = 0; i < n; i++)	scanf ("%s", M[i]);
	int ans = solve (0,1)+num(M[0][0]-'a');
	//printf ("%d\n", ans);
	if (ans > 0)	printf ("FIRST\n");
	else if (ans < 0)	printf ("SECOND\n");
	else	printf ("DRAW\n");
	return 0;
}
