 #include <bits/stdc++.h>
using namespace std;
const int inf = ~0U>>1;
const int maxN = 222;

int n, m;
int s, e;
int totV;
int g[maxN][maxN];
int flow[maxN][maxN];
int vis[maxN];
int pre[maxN];
queue <int> q;

int bfs() {
	while (!q.empty()) {
		q.pop();
	}
	memset(vis, 0, sizeof(vis));
	q.push(s);
	vis[s] = 1;
	while (!q.empty()) {
		int u = q.front();
		q.pop();
		if (u == e) {
			return 1;
		}
		for (int i = 0; i < totV; ++i) {
			if (!vis[i] && flow[u][i]) {
				q.push(i);
				pre[i] = u;
				vis[i] = 1;
			}
		}
	}
	return 0;
}

int maxFlow() {
	int ret = 0;
	while (1) {
		if (!bfs()) {
			return ret;
		}
		int curFlow = inf;
		for (int i = e; i != s; i = pre[i]) {
			curFlow = min(curFlow, flow[pre[i]][i]);
		}
		for (int i = e; i != s; i = pre[i]) {
			flow[pre[i]][i] -= curFlow;
			flow[i][pre[i]] += curFlow;
		}
		ret += curFlow;
	}
	return ret;
}


int main() {
	cin >> n >> m;
	s = 0;
	e = n + n + 1;
	totV = e + 1;
	int sa = 0;
	for (int i = 1; i <= n; ++i) {
		cin >> g[s][i];
		sa += g[s][i];
	}
	int sb = 0;
	for (int i = 1; i <= n; ++i) {
		cin >> g[i + n][e];
		sb += g[i + n][e];
	}
	for (int i = 1; i <= m; ++i) {
		int u, v;
		cin >> u >> v;
		g[u][v + n] = maxN;
		g[v][u + n] = maxN;
	}
	for (int i = 1; i <= n; ++i) {
		g[i][i + n] = maxN;
	}
	memcpy(flow, g, sizeof(g));
	if (sa != sb) {
		cout << "NO" << endl;
		return 0;
	}
	int ans = maxFlow();
	//cout << "ans = " << ans << endl;
	if (ans != sa) {
		cout << "NO" << endl;
		return 0;
	}
	cout << "YES" << endl;
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= n; ++j) {
			cout << g[i][j + n] - flow[i][j + n];
			if (j == n) {
				cout << endl;
			}
			else {
				cout << " ";
			}
		}
	}
	return 0;
}