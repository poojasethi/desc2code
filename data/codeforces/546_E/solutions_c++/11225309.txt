#include <cstdio>
#include <queue>
#include <cstring>
#define N_Max 2*123
#define maxn 1234567

using namespace std;

int n, m, tmp, tans, ans, sum, N, sum1;
int map[N_Max][N_Max], dis[N_Max];

void init() {
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) {
		scanf("%d", &tmp);
		map[1][i+2] = tmp;
		map[i+2][i+n+2] = tmp;
		sum1 += tmp;
	}
	for (int i = 1; i <= n; i++) {
		scanf("%d", &tmp);
		map[n+i+2][2] = tmp;
		sum += tmp;
	}

	for (int i = 1; i <= m; i++) {
		int x, y;

		scanf("%d%d", &x, &y);
		map[x+2][n+y+2] = 123456;
		map[y+2][n+x+2] = 123456;
	}
	
	N = n;
	n = 2*n+2;
}

bool make_level() {
	queue<int> q;
	memset(dis, 0x1f, sizeof(dis));
	dis[1] = 0;
	q.push(1);

	while (!q.empty()) {
		int x = q.front();
		q.pop();

		for (int i = 1; i <= n; i++)
			if (dis[i] > dis[x]+1 && map[x][i] > 0) {
				dis[i] = dis[x]+1;
				q.push(i);
			}
	}

	if (dis[2] <= 123456)
		return true;
	else
		return false;
}

int find(int x, int low) {
	if (x == 2)  return low;
	
	int tmp = 0;
	for (int i = 1; i <= n; i++)
		if (map[x][i] > 0 && dis[i] == dis[x]+1) {
			tmp = find(i, min(low, map[x][i]));
			if (tmp != 0) {
				map[x][i] -= tmp;
				map[i][x] += tmp;

				return tmp;
			}
		}

	return 0;
}

void dinic() {
	tans = find(1, maxn);
	while (tans != 0) {
		ans += tans;
		tans = find(1, maxn);
	}
}

void solve() {
	if (sum != sum1) {
		printf("NO\n");
		return;
	}

	while (make_level()) {
		dinic();
	}

	if (ans == sum) {
		printf("YES\n");
		for (int i = 3; i <= 2+N; i++) {
			for (int j = N+3; j <= n; j++)
				printf("%d ", map[j][i]);
			printf("\n");
		}
	}

	else
		printf("NO\n");
}

int main() {
	init();
	solve();
}
