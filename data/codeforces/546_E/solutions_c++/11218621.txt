#include <bits/stdc++.h>
using namespace std;
const int MAXN = 500;
int INF = 100000000;
int src,dest,A[MAXN][MAXN];
int find_path()
{
	vector <int> par(dest+1,-1);
	par[src] = 0;
	stack <int> dfs;
	dfs.push(src);
	while(!dfs.empty())
	{
		int top = dfs.top();
		dfs.pop();
		if(top == dest)
			break;
		for (int i = 0; i < dest+1; ++i)
		{
			if(A[top][i] && par[i] == -1)
			{
				par[i] = top;
				dfs.push(i);
			}
		}
	}
	if(par[dest] == -1)
		return 0;
	int to_sub = INF, pos = dest;
	while(pos != src)
	{
		to_sub = min(to_sub,A[par[pos]][pos]);
		pos = par[pos];
	}
	pos = dest;
	while(pos != src)
	{
		A[par[pos]][pos]-=to_sub;
		A[pos][par[pos]]+=to_sub;
		pos = par[pos];
	}
	return to_sub;
}
int main()
{
	// freopen("input.txt", "r", stdin);
	int n,m;
	cin>>n>>m;
	src = 0;
	dest = 2*n+1;
	int tot1 = 0, tot2 = 0;
	for (int i = 1; i <= n; ++i)
	{
		cin>>A[src][i];
		tot1+=A[src][i];
	}
	for (int i = n+1; i <= 2*n; ++i)
	{
		cin>>A[i][dest];
		tot2+=A[i][dest];
	}
	if(tot1 != tot2)
	{
		cout<<"NO\n";
		return 0;
	}
	for (int i = 1; i <= n; ++i)
	{
		A[i][i+n] = INF;
	}
	for (int i = 0; i < m; ++i)
	{
		int u,v;
		cin>>u>>v;
		A[u][v+n] = INF;
		A[v][u+n] = INF;
	}
	int ans = 0;
	while(true)
	{
		int x = find_path();
		if(x == 0)
			break;
			ans+=x;
	}
	assert(ans <= tot1);
	if(ans < tot1)
	{
		cout<<"NO\n";
		return 0;
	}
	cout<<"YES\n";
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= n; ++j)
		{
			cout<<A[j+n][i]<<" ";
		}
		cout<<"\n";
	}
	return 0;
}