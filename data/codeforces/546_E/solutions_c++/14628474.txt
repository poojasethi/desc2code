#include<cmath>
#include<vector>
#include<iostream>
#include<queue>
using namespace std;
#define inf 100000000
int temp[300][300],graph[300][300];
bool flag[300][300];
bool bfs(int s,int t,int *parent,int v)
{
bool visited[v+1];
fill(visited,visited+v+1,false);
queue<int>q;
q.push(s);
visited[s]=true;
parent[s]=-1;
while(!q.empty())
{
int u=q.front();
q.pop();
for(int i=0;i<v;i++)
{
if(visited[i]==false&&temp[u][i]>0)
{
q.push(i);
parent[i]=u;
visited[i]=true;
}
}
}
return visited[t];
}

int func(int v,int s,int t)
{
int parent [v+1];
int flow=0;
while(bfs(s,t,parent,v))
{
int path_flow=INT_MAX;
for(int i=t;i!=s;i=parent[i])
{
int u=parent[i];
path_flow=min(path_flow,temp[u][i]);
}
for(int i=t;i!=s;i=parent[i])
{
int u=parent[i];
temp[u][i]=temp[u][i]-path_flow;
temp[i][u]=temp[i][u]+path_flow;
graph[u][i]+=path_flow;
graph[i][u]-=path_flow;
}
flow=flow+path_flow;
}
return flow;
}


int main()
{
ios_base::sync_with_stdio(false);
int n,m;
cin>>n>>m;
vector<int>adj[n+1];
int a[n],b[n],temp1=0,temp2=0;
for(int i=0;i<n;i++)
{
cin>>a[i];
temp1+=a[i];
}
for(int i=0;i<n;i++)
{
cin>>b[i];
temp2+=b[i];
}
for(int i=0;i<m;i++)
{
int u,v;
cin>>u>>v;
adj[u].push_back(v);
adj[v].push_back(u);
}
for(int i=1;i<=n;i++)
{
temp[0][i]=a[i-1];
temp[n+i][2*n+1]=b[i-1];
temp[i][n+i]=inf;
//temp[n+i][i]=inf;
for(int j=0;j<adj[i].size();j++)
{
temp[i][n+adj[i][j]]=inf;
//temp[n+adj[i][j]][i]=inf;
}
}
int s=0;
int t=2*n+1;
int flow=func(2*n+2,s,t);
if(flow==temp1&&flow==temp2)
{
cout<<"YES"<<endl;
for(int i=1;i<=n;i++)
{
for(int j=1;j<=n;j++)
cout<<graph[i][n+j]<<" ";
cout<<endl;
}
}
else
cout<<"NO"<<endl;
return 0;
}
