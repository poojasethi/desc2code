#include <bits/stdc++.h>
using namespace std;
#define rep(i,n) for(int i=0;i<n;i++)
#define rep2(i,n) for(int i=1;i<=n;i++)
#define INF 10000000
int n,m;
//vector<int>edge[105];
int a[105],b[105],c[105];

struct edgee
{
	int to,cap,rev;
};
vector<edgee>G[505];
bool used[505];

void add_edge(int from,int to,int cap)
{
	G[from].push_back((edgee){to,cap,G[to].size()});
	G[to].push_back((edgee){from,0,G[from].size()-1});
}
int dfs(int v,int t,int f)
{ 
	if(v==t) return f;
	used[v]=true;
	for(int i=0;i<G[v].size();i++)
	{
		edgee e=G[v][i];
		if(!used[e.to] && e.cap>0)
		{ 
			int d=dfs(e.to,t,min(f,e.cap));
			if(d>0) 
			{ 
				G[v][i].cap-=d;
				G[e.to][e.rev].cap+=d;
				return d;
			}
		}
	}
	return 0;
}
int max_flow(int s,int t)
{ 
	int flow=0;
	while(1)
	{ 
		memset(used,0,sizeof(used));
		int f=dfs(s,t,INF);
		if(!f) return flow;
		flow+=f;
	}
}

int main(){
	cin >> n >> m;
	int sum = 0,sum2 = 0;
	rep2(i,n){
		cin >> a[i];
		sum += a[i];
	}
	rep2(i,n){
		cin >> b[i];
		sum2 += b[i];
	}
	rep2(i,n) add_edge(0,i,a[i]);
	rep2(i,n) add_edge(200+i,500,b[i]);
	rep2(i,n) add_edge(i,200+i,200);
	rep(i,m){
		int u,v; cin >> u >> v;
		add_edge(u,200+v,200);
		add_edge(v,200+u,200);
	}
	int f = max_flow(0,500);
	if(f != sum || f != sum2){
		cout << "NO" << endl;
	}
	else{
		cout << "YES" << endl; int r[105][105]={};
		rep2(i,n){
			rep(j,G[i].size()){
				if(200<=G[i][j].to && G[i][j].to<=400){
					r[i][G[i][j].to-200] = 200-G[i][j].cap;
				}
			}
		}
		rep2(i,n){
			rep2(j,n){
				cout << r[i][j] << (j==n?'\n':' ');
			}
		}
	}
}