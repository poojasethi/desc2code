#include<cstdio>
#include<vector>
#include<queue>
#include<cstring>
using namespace std;

const int inf=1e9+7;

int sa,sb,n,m,a[105],b[105],cap[205][205];
vector<int> v[205];

int bfs(){
	queue<int> q;
	bool vis[205],exit=0;
	int from[205];
	memset(vis,0,sizeof vis); memset(from,-1,sizeof from);
	q.push(0); vis[0]=1;
	while(!q.empty()){
		int cur=q.front(); q.pop();
		for(int i=0; i<v[cur].size(); i++){
			if(!vis[v[cur][i]]&&cap[cur][v[cur][i]]>0){
				q.push(v[cur][i]);
				vis[v[cur][i]]=1;
				from[v[cur][i]]=cur;
				if(v[cur][i]==2*n+1)exit=1;
			}
		}
		if(exit)break;
	}
	int cur=2*n+1,res=inf;
	while(from[cur]>-1){
		res=min(res,cap[from[cur]][cur]);
		cur=from[cur];
	}
	cur=2*n+1;
	while(from[cur]>-1){
		cap[from[cur]][cur]-=res;
		cap[cur][from[cur]]+=res;
		cur=from[cur];
	}
	return res;
}

int main(){
	scanf("%d %d",&n,&m);
	for(int i=1; i<=n; i++)scanf("%d",&a[i]),sa+=a[i];
	for(int i=1; i<=n; i++)scanf("%d",&b[i]),sb+=b[i];
	for(int i=0; i<m; i++){
		int x,y;
		scanf("%d %d",&x,&y);
		v[x].push_back(y+n); v[x+n].push_back(y);
		v[y+n].push_back(x); v[y].push_back(x+n);
		cap[x][y+n]=cap[y][x+n]=inf;
	}
	for(int i=1; i<=n; i++)v[i+n].push_back(i),v[i].push_back(i+n),cap[i][i+n]=inf;
	for(int i=1; i<=n; i++)v[0].push_back(i),cap[0][i]=a[i];
	for(int i=n+1; i<=2*n; i++)v[i].push_back(2*n+1),cap[i][2*n+1]=b[i-n];
	int flow=0;
	while(1){
		//find path by bfs
		int pathcap=bfs();
		//if no, break
		if(pathcap==inf)break;
		flow+=pathcap;
	}
//	cout << "max_flow=" << flow << endl;
	if(sa==flow&&sb==flow){
		printf("YES\n");
		for(int i=1; i<=n; i++){
			for(int j=1; j<=n; j++){
				printf("%d ",cap[j+n][i]);
			}printf("\n");
		}
	}else printf("NO\n");
	return 0;
}