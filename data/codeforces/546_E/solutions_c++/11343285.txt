#include<bits/stdc++.h>
using namespace std;
#define INF 1<<20

int graph[256][256];
int rgraph[256][256];
int parent[256];
bool visited[256];
bool bfs(int N){
	queue<int> q;
	for(int i=0;i<N;i++) visited[i] = false;
	q.push(0);
	while(!q.empty()){
		int here = q.front();q.pop();
		if(here == N-1) return true;
		for(int i=0;i<N;i++){
			if(visited[i] == true || rgraph[here][i] == 0) continue;
			q.push(i);
			visited[i] = true;
			parent[i] = here;
		}
	}
	return false;
}

void solve(int N,int check1,int check2){
	if(check1 != check2){cout<<"NO"<<endl; return;}
	for(int i=0;i<N;i++) for(int j=0;j<N;j++) rgraph[i][j] = graph[i][j];
	int maxFlow = 0;
	while(bfs(N)){
		int pathMaxFlow = INF;
		for(int here = N-1;here != 0; here = parent[here]){
			pathMaxFlow = min(pathMaxFlow,rgraph[parent[here]][here]);
		}
		for(int here = N-1;here != 0; here = parent[here]){
			rgraph[parent[here]][here] -= pathMaxFlow;
			rgraph[here][parent[here]] += pathMaxFlow;
		}
		maxFlow += pathMaxFlow;
	}
	if(check1 == maxFlow){
		printf("YES\n");
		for(int i=1;i<N/2;i++){
			for(int j=N/2;j<N-1;j++){
				printf("%d ",(graph[i][j]-rgraph[i][j]));
			}
			printf("\n");
		}
	}else{
		printf("NO\n");
	}
}

int main(){
	int N,M;scanf("%d %d",&N,&M);
	for(int i=0;i<2*N+2;i++) for(int j=0;j<2*N+2;j++) graph[i][j] = 0;
	int check1 =0 , check2 = 0;
	for(int i=1;i<=N;i++){
		int temp;scanf("%d",&temp);
		check1 += temp;
		graph[0][i] = temp;
	}
	for(int i=N+1;i<=2*N;i++){
		int temp;scanf("%d",&temp);
		check2 += temp;
		graph[i][2*N+1] = temp;
	}
	for(int i=1;i<=N;i++) graph[i][i+N] = INF;
	for(int i=0;i<M;i++){
		int from,to;scanf("%d %d",&from,&to);
		graph[from][to+N] = INF;
//		graph[to+N][from] = INF;
//		graph[from+N][to] = INF;
		graph[to][from+N] = INF;
	}
	solve(2*N+2,check1,check2);
	return 0;
}
