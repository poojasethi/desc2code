#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

const int MAXN = 505;

struct Node
{
	int To,Next,Flow;
	Node(void){}
	Node(int a,int b,int c) : To(a),Next(b),Flow(c){}
}E[MAXN * MAXN];

int N,M,S,T,A[MAXN],B[MAXN],Final[MAXN],D[MAXN],Count[MAXN],Fl[MAXN],tot;

void Link(int u,int v,int f)
{
	E[++ tot] = Node(v,Final[u],f),Final[u] = tot;
	E[++ tot] = Node(u,Final[v],0),Final[v] = tot;
}

int Dfs(int Now,int Flow)
{
	if (Now == T) return Flow;
	int Use = 0;
	for(int i = Final[Now];i;i = E[i].Next)
	if (E[i].Flow > 0 && D[E[i].To] + 1 == D[Now])
	{
		int Tmp = Dfs(E[i].To,min(E[i].Flow,Flow - Use));
		Use += Tmp,E[i].Flow -= Tmp,E[i ^ 1].Flow += Tmp;
		if (Use == Flow) return Use;
	}
	if (!(-- Count[D[Now]])) D[S] = T + 1;
	++ Count[++ D[Now]];
	return Use;
}

int main()
{
	scanf("%d%d", &N, &M);
	tot = 1;
	S = 0,T = N * 2 + 1;
	int Q = 0;
	for(int i = 1;i <= N;i ++) scanf("%d", &A[i]);
	for(int i = 1;i <= N;i ++) 
	{
		scanf("%d", &B[i]);
		Q += B[i] - A[i];
		Link(i + N,T,B[i]);
		Link(S,i,A[i]);
		Link(i,i + N,1 << 30);
	}
	if (Q != 0) printf("NO\n"); else
	{
		for(int j = 1;j <= M;j ++)
		{
			int u,v;
			scanf("%d%d", &u, &v);
			Link(u,v + N,1 << 30);Link(v,u + N,1 << 30);
		}
		Count[0] = T + 1;
		while (D[S] < T + 1) Dfs(S,1 << 30);
		bool ok = 1;
		for(int i = Final[T];i;i = E[i].Next)
		if (E[i ^ 1].Flow) {ok = 0;break;}
		if (!ok) printf("NO\n"); else
		{
			printf("YES\n");
			for(int i = 1;i <= N;i ++)
			{
				memset(Fl,0,sizeof Fl);
				for(int j = Final[i];j;j = E[j].Next)
				if (!(j & 1)) Fl[E[j].To - N] = E[j ^ 1].Flow;
				for(int j = 1;j <= N;j ++)
					printf("%d%c", Fl[j], j == N ? '\n' : ' ');
			}
		}
	}
}

 	 	   		   		       	   		 	 	