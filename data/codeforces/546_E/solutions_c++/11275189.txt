#include<stdio.h>
#include<string.h>
#include<queue>

using namespace std;

int C[300][300], F[300][300], P[300], V[300];
int Min;

void rec(int a) {
	if (a == 0)
		return;
	if (Min > C[P[a]][a] - F[P[a]][a])
		Min = C[P[a]][a] - F[P[a]][a];
	rec(P[a]);
	F[P[a]][a] += Min;
	F[a][P[a]] -= Min;
}

int main() {
	int i, n, m;
	int a, b;
	int tot, chk1, chk2;

	scanf("%d%d", &n, &m);

	chk1 = 0;
	for (i = 1; i <= n; i++)	{
		scanf("%d", &a);
		C[0][i] = a;
		chk1 += a;
	}
	chk2 = 0;
	for (i = 1; i <= n; i++)	{
		scanf("%d", &a);
		C[i+n][2*n+1] = a;
		C[i][i + n] = 10000000;
		chk2 += a;
	}

	while (m--)	{
		scanf("%d%d", &a, &b);

		C[a][b + n] = C[b][a + n] = 10000000;
	}

	if (chk1 != chk2)
		printf("NO\n");
	else
	{
		queue<int> q;
		tot = 0;

		while (1) {
			memset(V, 0, sizeof(V));

			q.push(0);
			V[0] = 1;

			while (!q.empty()) {
				for (int k = 0; k <= 2 * n + 1; k++) {
					if (!V[k] && C[q.front()][k] > F[q.front()][k]) {
						V[k] = 1;
						P[k] = q.front();
						q.push(k);
					}
				}
				q.pop();
			}

			if (!V[2 * n + 1])
				break;

			Min = 100000000;

			rec(2 * n + 1);
			tot += Min;
		}

		if (chk1 > tot)
			printf("NO\n");
		else
		{
			printf("YES\n");

			for (i = 1; i <= n; i++)	{
				for (int k = 1; k <= n; k++)
					printf("%d ", F[i][k + n]);
				printf("\n");
			}
		}
	}

	return 0;
}


/*
4 4
1 2 6 3
3 5 3 1
1 2
2 3
3 4
4 2

2 0
1 2
2 1
*/