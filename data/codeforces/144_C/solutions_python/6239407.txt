'''
input:
    string 1 with letters and ?s
    string 2 with letters

    find number of substrings of string 1, where the substrings are anagrams of string 2, replacing ?s with letters


if len(2) > len(1):
    0

|              |
 |              |

have obvious overlap
'''

s = raw_input()
p = raw_input()

p_count = {}
for c in p:
    q = p_count.get(c, 0)
    p_count[c] = q + 1

if len(p) > len(s):
    import sys
    print 0
    sys.exit(0)

index = len(p)
s_count = {}
for c in s[:len(p)]:
    q = s_count.get(c, 0)
    s_count[c] = q + 1

result = 0

def is_compatible():
    need = 0
    #print p_count, s_count
    for pc in p_count:
        req = p_count[pc]
        have = s_count.get(pc, 0)
        if req > have:
            need += req - have

    return s_count.get('?', 0) >= need
    

while index <= len(s):
    if index - len(p):
        prev = s[index - len(p) - 1]
        s_count[prev] -= 1
        cur = s[index - 1]
        b = s_count.get(cur, 0)
        s_count[cur] = b + 1

    if is_compatible():
        result += 1
    #print 'considering', s[index - len(p):index]
    #print s_count

    index += 1

#print s_count
print result

