'''
Created on 2/05/2014

@author: Felipe
'''

def make_link(G,a,b,w, directed): 
        
        
        if a not in G.keys():
            G[a] = {}
        if b not in G.keys():
            G[b] = {}
        
        if directed is True:
            G[a][b] = w
        else:
            G[a][b] = w
            G[b][a] = w
            
###########################################

def remove_link(G,a,b,directed): 
        
        
        if a not in G.keys():
            G[a] = {}
        if b not in G.keys():
            G[b] = {}
        
        if directed is True:
            G[a].pop(b)
        else:
            G[a].pop(b)
            G[b].pop(a)
            
###########################################

def make_visit( G ):
    visit = {}
    for k in G.keys():
        visit[k] = WHITE
    
    return visit

import sys

WHITE = 0
GRAY = 1
BLACK = 2
_n = int(sys.stdin.readline().strip())
g = {}
saved = []
k = 0
while _n > 0:
    
    data = map(int, sys.stdin.readline().strip().split())
    if data[0] == 1:
        node = (data[1],data[2])
        if node not in g.keys():
            g[node] = {}
        
        c = data[1]
        d = data[2]
        for u in g.keys():
            a = u[0]
            b = u[1]
            if ( c < a and a < d ) or ( c < b and b < d ):
                g[ (a,b) ][ (c,d) ] = 1
            
            if ( a < c and c < b ) or ( a < d and d < b ):
                g[ (c,d) ][ (a,b) ] = 1

                
        
        
        saved.append( node )
        
    else:
        find = False
        
        root = saved[ data[1]-1 ]
        visit = make_visit(g)
        q = [root]
        visit[root] = GRAY
        find = False
        while len(q) > 0:
            current = q.pop()
            #Do something with current
            #print current
            if current == saved[ data[2]-1 ]:
                find = True
                break
            for n in g[current].keys():
                if visit[n] is WHITE:
                    visit[n] = GRAY
                    
                    q.append(n)
            
            visit[current] = BLACK  
        
        if find is True:
            print "YES"
        else: print "NO"
                       
    _n -= 1
        
    