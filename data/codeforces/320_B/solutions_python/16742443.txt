
# DFS
NODES = [None]

from collections import deque

R = lambda : map(int, raw_input().split())
i = 1
for ip in range(input()):
    inp = R()
    if inp[0] == 1:
        NODES.append((i, inp[1], inp[2]))
        i += 1
    else:
        s,t = inp[1:]
        VISITED = []
        Q = deque()
        Q.append(NODES[s])
        found = False
        while len(Q) > 0:
            current_node = Q.popleft()
            VISITED.append(current_node[0])
            for node in NODES:
                if node is not None and node[0] not in VISITED:
                    if (node[1] < current_node[1] < node[2]) or (node[1] < current_node[2] < node[2]):
                        if node[0] == t:
                            found = True
                            break
                        else:
                            Q.append(node)
            if found:
                break
        print "YES" if found else "NO"


