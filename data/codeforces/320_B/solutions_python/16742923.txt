
# DFS
NODES = [None]

from collections import deque, namedtuple

R = lambda : map(int, raw_input().split())

Node = namedtuple('Node', 'num, st, end')
v = [0 for i in range(102)]
i = 1
for ip in range(input()):
    inp = R()
    if inp[0] == 1:
        NODES.append(Node(i, inp[1], inp[2]))
        i += 1
    else:
        s,t = inp[1:]
        VISITED = list(v)
        Q = deque()
        Q.append(NODES[s])
        found = False
        while len(Q) > 0:
            current_node = Q.popleft()
            VISITED[current_node.num] = 1
            for node in NODES:
                if node is not None and VISITED[node.num] != 1:
                    if (node.st < current_node.st < node.end) or (node.st < current_node.end < node.end):
                        if node.num == t:
                            found = True
                            break
                        else:
                            Q.append(node)
            if found:
                break
        print "YES" if found else "NO"


