n = input()

graph = []
pairs = []

visited = []

def dfs(i):
    if visited[i]:
        return 0
    visited[i] = True
    return 1+sum(dfs(v) for v in graph[i])

def check_path(i, j):
    dfs(i)
    return visited[j]

def can_go(p1, p2):
    a,b = p1
    c,d = p2
    return c < a < d or c < b < d

def add_node(i, j):
    current_node_index = len(graph)
    pairs.append((i, j))
    graph.append([])
    for it in range(len(graph)-1):
        if(can_go(pairs[it], pairs[-1])):
            graph[it].append(current_node_index)
        if(can_go(pairs[-1], pairs[it])):
            graph[current_node_index].append(it)


for i in range(n):
    qt, pi, pj = map(int, raw_input().split())
    if qt == 1:
        add_node(pi, pj)
    else:
        visited = [False] * len(graph)
        is_path = check_path(pi-1, pj-1)
        if is_path:
            print "YES"
        else:
            print "NO"
