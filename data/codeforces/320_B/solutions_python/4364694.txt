import sys

nodes = []
routes = {}

def can_connect(f,t):
    n_a = nodes[f-1]
    n_b = nodes[t-1]
    return (n_a[0] > n_b[0] and n_a[0] < n_b[1]) or \
           (n_a[1] > n_b[0] and n_a[1] < n_b[1])

def connects(f, t):
    if can_connect(f,t):
        routes[f].add(t)

def search(v, fr, to):
    v[fr] = 1
    for neighbor in routes[fr]:
        if neighbor == to:
            return True
        if v[neighbor] == 0:
            if search(v, neighbor, to):
                return True

    return False

def find(fr, to):
    visited = {x: 0 for x in range(1, len(nodes)+1)}
    return search(visited, fr, to)

def printGraph():
    print 'NODES:', nodes
    print 'ROUTE:', routes

lines = sys.stdin.readline()
for l in range(int(lines)):
    line = sys.stdin.readline()
    query = line.strip().split()
    if query[0] == '1':
        node_x = (int(query[1]), int(query[2]))
        nodes.append(node_x)
        new_index = len(nodes)
        routes[new_index] = set([])
        for i in range(1, new_index):
            connects(i, new_index)
            connects(new_index, i)

    else:
        if find(int(query[1]), int(query[2])):
            print 'YES'
        else:
            print 'NO'
