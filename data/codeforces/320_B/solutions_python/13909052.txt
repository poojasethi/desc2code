from collections import namedtuple
Node = namedtuple('Node', 'start end children')
num_queries = int(raw_input())

graph = {}
interval_num = 1

def insert(interval_num, start, end):
    graph[interval_num] = Node(start, end, [])
    for node_num,node in graph.iteritems():
        if node.start < start < node.end or node.start < end < node.end:
            graph[interval_num].children.append(node_num)
        if start < node.start < end or start < node.end < end: 
            node.children.append(interval_num)

def dfs(visited, start):
    if start not in visited:
        visited.add(start)
        for child in graph[start].children:
            dfs(visited, child)

for x in xrange(num_queries):
    q_type, a, b = map(int, raw_input().split())
    if q_type == 1:
        insert(interval_num, a, b)
        interval_num += 1
    else:
        visits = set()
        dfs(visits, a)
        print('YES' if b in visits else 'NO')
