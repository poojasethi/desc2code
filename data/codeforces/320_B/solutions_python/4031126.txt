# Author: Sachin Jain
# Link: http://codeforces.com/problemset/problem/320/B
# Problem: DIV -189 B

def addNewInterval(connectivityMatrix, existingIntervalsX,
                   existingIntervalsY, newIntervalX,
                   newIntervalY):

  # Define reachabe path from newInterval to already present intervals and vice-versa and update connectivityMatrix
  newIntervalConnections = []
  i = 0
  while i < len(existingIntervalsX):
    if ((existingIntervalsX[i] < newIntervalX < existingIntervalsY[i]) or 
        (existingIntervalsX[i] < newIntervalY < existingIntervalsY[i])):
      newIntervalConnections.append(True)
    else:
      newIntervalConnections.append(False)

    if ((newIntervalX < existingIntervalsX[i] < newIntervalY) or
        (newIntervalX < existingIntervalsY[i] < newIntervalY)):
      connectivityMatrix[i].append(True)
    else:
      connectivityMatrix[i].append(False)

    i += 1

  #Connection to itself (Always False)
  newIntervalConnections.append(False)
  connectivityMatrix.append(newIntervalConnections)

  existingIntervalsX.append(newIntervalX)
  existingIntervalsY.append(newIntervalY)

def updateConnections(connectivityMatrix, sourceIntervalIndex,
                      destinationIntervalIndex):
  bfsQueue = []
  visitedList = {}
  bfsQueue.append(sourceIntervalIndex)

  queueIter = 0
  while queueIter < len(bfsQueue):
    i = bfsQueue[queueIter]
    j = 0
    while j < len(connectivityMatrix[i]):
      if not j in visitedList and connectivityMatrix[i][j] == True:
        bfsQueue.append(j)
        connectivityMatrix[sourceIntervalIndex][j] = True

      j += 1
    visitedList[i] = 1
    queueIter += 1

def main():
  numOperations = int(raw_input())
  connectivityMatrix = []
  existingIntervalsX = []
  existingIntervalsY = []

  while (numOperations > 0):
    operation, x, y = raw_input().split()
    operation = int(operation)
    x = int(x)
    y = int(y)

    if (operation == 1):
      addNewInterval(connectivityMatrix, existingIntervalsX, existingIntervalsY, x, y)
    elif (operation == 2):
      if connectivityMatrix[x-1][y-1] == False:
        updateConnections(connectivityMatrix, x-1, y-1)

      if connectivityMatrix[x-1][y-1] == True:
        print "YES"
      else:
        print "NO"
    
    numOperations -= 1

if (__name__ == "__main__"):
  main()