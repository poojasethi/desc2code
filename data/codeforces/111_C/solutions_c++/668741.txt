#include <cassert>
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

#define REP(i, n) for (int i = 0; i < int(n); ++i)
#define AUTO(it, expr) __typeof__(expr) it = (expr)
#define FOR(it, c) for (AUTO(it, (c).begin()); (it) != (c).end(); ++(it))

int memo[44][1<<7][1<<7];
int n, m, mask;
const int INF = 1111111;

int opt(int i, int prev, int cur) {
    if (i >= n) {
	return (~prev & mask) ? INF : 0;
    }
    int& ret = memo[i][prev][cur];
    if (ret < 0) {
	ret = INF;
	REP (s, mask+1)
	    if ((s | (~prev & mask)) == s) {
		int ncur = mask & (cur | s | (s<<1) | (s>>1));
		ret = min(ret, __builtin_popcount(s) + opt(i+1, ncur, s));
	    }
    }
    return ret;
}

int main() {
    cin >> n >> m;
    if (n < m) swap(n, m);
    mask = (1<<m) - 1;
    memset(memo, 255, sizeof memo);
    cout << (n*m - opt(0, mask, 0)) << endl;
}
