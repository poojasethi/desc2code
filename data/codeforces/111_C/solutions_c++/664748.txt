#include <iostream>
#include <cstring>
#include <algorithm>

using namespace std;

int R, C;

char memo[1<<6][1<<6][1<<6][41][7];

char f(int m1, int m2, int m3, int r, int c)
{
	char &x = memo[m1][m2][m3][r][c];
	
	if(x != 100) return x;
	
	if(c == C)
	{
		if(r == R - 1) x = 2*C - __builtin_popcount(m1) - __builtin_popcount(m2);
		else x = C - __builtin_popcount(m1) + f(m2, m3, 0, r+1, 0);
	}
	else
	{
		x = f(m1, m2 | (1<<c), m3, r, c+1);
		
		if(r > 0) x = max(x, f(m1 | (1<<c), m2, m3, r, c+1));
		if(r + 1 < R) x = max(x, f(m1, m2, m3 | (1<<c), r, c+1));
		if(c > 0) x = max(x, f(m1, m2 | (1<<(c-1)), m3, r, c+1));
		if(c + 1 < C) x = max(x, f(m1, m2 | (1<<(c+1)), m3, r, c+1));
	}
	
	return x;
}

int main()
{
	while(cin>>R>>C)
	{
		if(C > R) swap(R, C);
		
		memset(memo, 100, sizeof(memo));
		
		cout<<int(f((1<<C) - 1, 0, 0, 0, 0))<<endl;
	}
	
	return 0;
}
