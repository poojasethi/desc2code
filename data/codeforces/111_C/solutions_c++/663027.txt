#include <iostream>
#include <map>
#include <algorithm>
using namespace std;
int n, m;
int mask;
bool visited[30][256][256];
int memo[30][256][256];
int f(int p, int q, int r) {
    if (visited[p][q][r]) return memo[p][q][r];
    visited[p][q][r] = true;
    int y = (r | q | (q << 1) | (q >> 1)) & mask;
    if (p == m) {
        if (y == mask) {
            return memo[p][q][r] = 0;
        } else {
            return memo[p][q][r] = 1<<30;
        }
    }
    int ret = 1<<30;
    for (int i = 0; i < (1<<n); ++ i) {
        if (p == 0 || (y|i) == mask) {
            ret = min(ret, f(p+1, i, q) + __builtin_popcount(i));
        }
    }
    return memo[p][q][r] = ret;
}
int main() {
    cin >> n >> m;
    if (n > m) swap(n, m);
    mask = (1<<n)-1;
    if (n == 1) {
        cout << m-1 - (m-1)/3 << endl;
    } else {
        cout << n*m - f(0, 0, 0) << endl;
    }
}
