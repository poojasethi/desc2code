from collections import defaultdict
T = input()
# map of integer to adjacency list
graph = defaultdict(list)
for c in range(T):
  a,b = raw_input().split()
  # do undirected edge adding
  graph[a].append(b)
  graph[b].append(a)

# determine start and end states
start = None
end = None
for node, adj in graph.items():
  if len(adj) == 1:
    if start is None:
      start = node
    else:
      end = node

ans = ''
last = None
while start != end:
  ans += start + ' '
  bs = graph[start]
  for b in bs:
    if b != last:
      last = start
      start = b
      break

print ans + start
		  		 		       		 			 			  			