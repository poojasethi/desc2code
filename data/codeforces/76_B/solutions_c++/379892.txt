#include<cstdio>
#include<algorithm>
using namespace std;

const int maxn=100000+10;

int X1[maxn],X2[maxn];
int Y1,Y2;
int opt[maxn][2];
int L[maxn],R[maxn];
int n,m;

long long d(int a,int b)
{
    return (long long)(X1[a]-X2[b])*(X1[a]-X2[b]);
}

void renew(int &a,int b)
{
    if (a>b) a=b;
}

int main()
{
    scanf("%d%d%d%d",&n,&m,&Y1,&Y2);
    for (int i=1;i<=n;i++) scanf("%d",&X1[i]);
    for (int i=1;i<=m;i++) scanf("%d",&X2[i]);
    sort(X1+1,X1+1+n);
    sort(X2+1,X2+1+m);
    for (int i=1,j=1;i<=n;i++)
    {
        while (j+1<=m && d(i,j)>d(i,j+1)) j++;
        L[i]=j;
        if (j+1<=m && d(i,j)==d(i,j+1)) R[i]=j+1;
        else R[i]=-1;
    }
    if (!m) {printf("%d\n",n);return 0;}

    for (int i=1;i<=n;i++) opt[i][0]=opt[i][1]=n;
    opt[1][0]=0;if (R[1]>=0) opt[1][1]=0;
    for (int i=1;i<n;i++)
    for (int j=0;j<2;j++)
    if (opt[i][j]<n)
    {
        int now=!j?L[i]:R[i];
        if (L[i+1]!=now) renew(opt[i+1][0],opt[i][j]);
        else renew(opt[i+1][0],opt[i][j]+(d(i,now)!=d(i+1,now)));
        if (R[i+1]>0)
        {
            if (R[i+1]!=now) renew(opt[i+1][1],opt[i][j]);
            else renew(opt[i+1][1],opt[i][j]+(d(i,now)!=d(i+1,now)));
        }
    }
    printf("%d\n",min(opt[n][0],opt[n][1]));
}
