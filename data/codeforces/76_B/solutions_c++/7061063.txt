#include <algorithm>
#include <cstdio>

const int N = (int) (1e5);
const int INF = (int) (1e9);

int n, m, x[N], y[N + 2], z[N + 2], ans;

int main() {
	scanf("%d %d %*d %*d", &n, &m);
	for (int i = 0; i < n; ++i) {
		scanf("%d", &x[i]);
	}
	for (int i = 1; i <= m; ++i) {
		scanf("%d", &y[i]);
	}
	y[0] = -INF;
	y[m + 1] = +INF;
	m += 2;
	std::fill(z, z + m, INF);
	ans = 0;
	for (int i = 0; i < n; ++i) {
		int j = std::lower_bound(y, y + m, x[i]) - y;
		int d = std::min(x[i] - y[j - 1], y[j] - x[i]);
		if (y[j] - x[i] > d || (x[i] - y[j - 1] == d && (z[j - 1] == INF || z[j - 1] == d))) {
			--j;
		}
		if (z[j] == INF || z[j] == d) {
			++ans;
		}
		z[j] = std::min(z[j], d);
	}
	printf("%d\n", n - ans);
	return 0;
}

   	   	 	 			   				