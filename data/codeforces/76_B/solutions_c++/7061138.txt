#include <algorithm>
#include <cstdio>

const int N = (int) (1e5);
const int INF = (int) (1e9);

int n, m, x[N], y[N], z[N], ans;

void update(int a, int b) {
	if (z[a] == INF || z[a] == b) {
		--ans;
	}
	z[a] = std::min(z[a], b);
}

int main() {
	scanf("%d %d %*d %*d", &n, &m);
	for (int i = 0; i < n; ++i) {
		scanf("%d", &x[i]);
	}
	for (int i = 0; i < m; ++i) {
		scanf("%d", &y[i]);
	}
	std::fill(z, z + m, INF);
	ans = n;
	for (int i = 0, j = 0; i < n; ++i) {
		while (j < m && y[j] < x[i]) {
			++j;
		}
		if (j == m) {
			--j;
			update(j, x[i] - y[j]);
			continue;
		}
		int k = j - 1;
		if (k < 0) {
			update(j, y[j] - x[i]);
			continue;
		}
		int d = std::min(x[i] - y[k], y[j] - x[i]);
		if (y[j] - x[i] > d || (x[i] - y[k] == d && (z[k] == INF || z[k] == d))) {
			update(k, x[i] - y[k]);
		} else {
			update(j, y[j] - x[i]);
		}
	}
	printf("%d\n", ans);
	return 0;
}

												   		 		 			 	