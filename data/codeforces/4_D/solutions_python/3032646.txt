def compFunction(a,b):
    if a[0] == b[0]:
        return -cmp(a[1],b[1])
    else:
        return cmp(a[0],b[0])

def binarySearch(a,b):
    left = 0
    right = len(a) - 1
    while left <= right:
        mid = (left+right) / 2
        if a[mid][0] < b:
            left = mid + 1
        else:
            right = mid - 1
    return left

n, w, h = map(int, raw_input().split(' '))
letters = list()
for i in range(n):
    eveItem = map(int,raw_input().split(' '))
    if eveItem[0] <= w or eveItem[1] <= h:
        continue
    eveItem.append(i)
    letters.append(eveItem)
letters.sort(compFunction)
#print letters
n = len(letters)
maxIndex, maxLen = -1,0
que = []
dp = []
for i in range(n):
    if len(que) == 0 or que[-1][0] < letters[i][1]:
        que.append([letters[i][1],i])
        dp.append(len(que))
    else:
        pos = binarySearch(que,letters[i][1])
        que[pos] = [letters[i][1],i]
        dp.append(pos+1)
ans = len(que)
print ans
que = []
for i in range(n-1,-1,-1):
    if dp[i] == ans:
        que.append(letters[i][2]+1)
        ans -= 1
for i in range(len(que)-1,-1,-1):
    print que[i],
           
                
