#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sys
import math
import random
import operator
from fractions import Fraction, gcd
from decimal import Decimal, getcontext
from itertools import product, permutations, combinations
getcontext().prec = 100

MOD = 10**9 + 7
INF = float("+inf")

a, b = map(int, raw_input().split())
c, d = map(int, raw_input().split())


def extract(a, b):
    a_e2 = 0
    a_e3 = 0
    while a & 1 == 0:
        a_e2 += 1
        a >>= 1
    while b & 1 == 0:
        a_e2 += 1
        b >>= 1
    while a % 3 == 0:
        a_e3 += 1
        a /= 3
    while b % 3 == 0:
        a_e3 += 1
        b /= 3
    return a_e2, a_e3, a, b


def eat(a, b, e2, e3):
    for _ in xrange(e2):
        if a & 1 == 0:
            a >>= 1
        elif b & 1 == 0:
            b >>= 1
        else:
            assert False
    for _ in xrange(e3):
        if a % 3 == 0:
            a /= 3
            a <<= 1
        elif b % 3 == 0:
            b /= 3
            b <<= 1
        else:
            assert False
    return a, b


a_e2, a_e3, xx1, xx2 = extract(a, b)
b_e2, b_e3, yy1, yy2 = extract(c, d)
if xx1 * xx2 != yy1 * yy2:
    print -1
    quit()

eat_a_3 = 0
eat_b_3 = 0

if a_e3 > b_e3:
    eat_a_3 = a_e3 - b_e3
elif a_e3 < b_e3:
    eat_b_3 = b_e3 - a_e3

total = eat_a_3 + eat_b_3

a, b = eat(a, b, 0, eat_a_3)
c, d = eat(c, d, 0, eat_b_3)

# 2

a_e2, a_e3, xx1, xx2 = extract(a, b)
b_e2, b_e3, yy1, yy2 = extract(c, d)

eat_a_2 = 0
eat_b_2 = 0

if a_e2 > b_e2:
    eat_a_2 = a_e2 - b_e2
elif a_e2 < b_e2:
    eat_b_2 = b_e2 - a_e2

a, b = eat(a, b, eat_a_2, 0)
c, d = eat(c, d, eat_b_2, 0)
total += eat_a_2 + eat_b_2

print total
print a, b
print c, d
