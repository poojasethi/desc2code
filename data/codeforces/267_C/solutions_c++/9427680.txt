#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<cmath>
#define eps (1e-8)
#define N 110
#define M 10010
#define For(x, y, z) for (x = y; x <= z; x++)
using namespace std;
int f[N], Eu[M], Ev[M], Ec[M], n, m, i, j;
double A[N][N], Ans[N], Ep[M], sum, mx;
int find(int x)
{
    return f[x] == x ? x : f[x] = find(f[x]);
}
void Outp()
{
    printf("%.5lf\n", sum);
    for (i = 1; i <= m; i++) printf("%.5lf\n", Ep[i]);
}
void Gauss()
{
    int i, j, k;
    For(i, 1, n)
    {
        int p = 0;
        For(j, i, n)
            if (fabs(A[j][i]) > eps) {p = j; break;}
        if (!p) continue;
        For(j, 1, n + 1) swap(A[i][j], A[p][j]);
        For(j, i + 1, n)
        {
            double r = A[j][i] / A[i][i];
            For(k, i, n + 1) A[j][k] -= r * A[i][k];
        }
    }
    for (i = n; i >= 1; i--)
    {
        if (fabs(A[i][i]) < eps) continue;
        Ans[i] = A[i][n + 1];
        For(j, i + 1, n) Ans[i] -= Ans[j] * A[i][j];
        Ans[i] /= A[i][i];
    }
}
int main()
{
    scanf("%d%d", &n, &m);
    For(i, 1, n) f[i] = i;
    For(i, 1, m)
    {
        int u, v, c;
        scanf("%d%d%d", &u, &v, &c);
        f[find(u)] = f[find(v)];
        A[u][u]++, A[v][v]++;
        A[u][v]--, A[v][u]--;
        Eu[i] = u, Ev[i] = v, Ec[i] = c;
    }
    if (f[find(1)] != f[find(n)]){Outp(); return 0;}
    For(i, 1, n + 1) A[1][i] = A[n][i] = 0;
    A[1][1] = A[n][n] = 1;
    A[1][n + 1] = 3, A[n][n + 1] = 2;
    Gauss();
    mx = 9999999999;
    for (i = 1; i <= m; i++)
    {   
        Ep[i] = Ans[Eu[i]] - Ans[Ev[i]];
        mx = min(mx, Ec[i] / fabs(Ep[i]));
    }
    for (i = 1; i <= m; i++) Ep[i] *= mx;
    for (i = 1; i <= m; i++)
        if (Eu[i] == 1 || Ev[i] == 1) sum += abs(Ep[i]);
    Outp();
    return 0;
}