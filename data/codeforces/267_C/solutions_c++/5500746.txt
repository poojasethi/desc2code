#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#define REP(i,n) for (int i=1;i<=(n);++i)
#define FOR(i,a,b) for (int i=(a);i<=(b);++i)
#define ROF(i,a,b) for (int i=(a);i>=(b);--i)
#define FEC(p,u) for (edge*p=head[u];p;p=p->nxt)
using namespace std;
typedef long long LL;
double inf = 1e10, eps = 1e-8;

int n, m;
int mn[200][200];
struct edge{
	int u, v, w;
}e[10000];

double a[200][200], x[200];

void init(){
	scanf("%d%d", &n, &m);
	REP(i,m){
		scanf("%d%d%d", &e[i].u, &e[i].v, &e[i].w);
		++mn[e[i].u][e[i].v], ++mn[e[i].v][e[i].u];
	}
}
void build(){
	a[1][1] = 1;
	FOR(i,2,n-1){
		int t(0);
		REP(j,n){ a[i][j] = mn[i][j]; t += mn[i][j]; }
		a[i][i] = -t;
	}
}
void solve(){
	FOR(i,1,n-1){
		int t(i);
		FOR(j,i+1,n-1) if (abs(a[j][i]) > abs(a[t][i])) t = j;
		FOR(k,i,n) swap(a[i][k], a[t][k]);
		if (abs(a[i][i]) < eps) continue;
		FOR(k,i+1,n) a[i][k] /= a[i][i];
		a[i][i] = 1;
		FOR(j,i+1,n-1){
			FOR(k,i+1,n) a[j][k] -= a[j][i]*a[i][k];
			a[j][i] = 0;
		}
	}
	ROF(i,n-1,1) if (abs(a[i][i]) > eps){
		a[i][n] /= a[i][i];
		a[i][i] = 1;
		FOR(j,1,i-1){
			a[j][n] -= a[j][i]*a[i][n];
			a[j][i] = 0;
		}
	}
	REP(i,n-1) x[i] = -a[i][n];
	x[n] = 1;
}
void work(){
	double ans(inf), t(0);
	REP(i,m){
		if (x[e[i].u] < x[e[i].v]) ans = min(ans, double(e[i].w)/(x[e[i].v]-x[e[i].u]));
		if (x[e[i].v] < x[e[i].u]) ans = min(ans, double(e[i].w)/(x[e[i].u]-x[e[i].v]));
	}
	REP(i,n) t += x[i]*mn[1][i];
	printf("%.8lf\n", ans*t);
	REP(i,m) printf("%.8lf\n", ans*(x[e[i].v]-x[e[i].u]));
}
int main(){
	init();
	build();
	solve();
	work();
	return 0;
}

