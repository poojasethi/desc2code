#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
using namespace std;

const int N=100+19,M=5000+19;
const double eps=1e-9;
struct Edge {int x,y,f;} E[M*2];
typedef double Matrix[N][N];
int n,m,x,y,f,tot;
double Ans,tmp;
Matrix A;

void Gauss()
{
    for (int i=1;i<=n;i++)
    {
        int r=i;
        for (int j=i+1;j<=n;j++) if (fabs(A[j][i])>fabs(A[r][i])) r=j;
        if (fabs(A[r][i])<eps) continue;
        if (r!=i) for (int j=i;j<=n+1;j++) swap(A[i][j],A[r][j]);
        double x=A[i][i];
        for (int j=i;j<=n+1;j++) A[i][j]/=x;
        for (int j=1;j<=n;j++)
            if (i!=j&&fabs(A[j][i])>eps)
            {
                double x=A[j][i];
                for (int k=i;k<=n+1;k++) A[j][k]-=A[i][k]*x;
            }
    }
}

int main()
{
    scanf("%d",&n);
    scanf("%d",&m);
    for (int i=0;i<m;i++) 
    {
        scanf("%d%d%d",&E[i].x,&E[i].y,&E[i].f);
        if (E[i].y!=n&&E[i].y!=1) A[E[i].y][E[i].y]++,A[E[i].y][E[i].x]--;
        if (E[i].x!=n&&E[i].x!=1) A[E[i].x][E[i].y]--,A[E[i].x][E[i].x]++;
    }

    A[1][1]=A[n][n]=A[n][n+1]=1.0;
    Gauss();
    
    tmp=1e50;
    for (int i=0;i<m;i++) tmp=min(tmp,E[i].f/fabs(A[E[i].y][n+1]-A[E[i].x][n+1]));
    if (fabs(tmp)<eps||tmp>1e10) tmp=0;
    for (int i=0;i<m;i++) if (E[i].y==1||E[i].x==1) Ans+=A[E[i].x*E[i].y][n+1]*tmp;
    printf("%.7lf\n",Ans);
    for (int i=0;i<m;i++) printf("%.7lf\n",(A[E[i].y][n+1]-A[E[i].x][n+1])*tmp);
}