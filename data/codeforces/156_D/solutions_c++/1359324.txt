#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 100*1000+10;

int N, M, K, cmp, u, v;
vector <int> g[MAXN], comp;
bool mark[MAXN];
long long ans = 1;

int dfs(int v)
{
	if (mark[v])
		return 0;
	int count = 1;
	mark[v] = 1;
	for (int i = 0 ; i < g[v].size() ; i++)
		count += dfs(g[v][i]);
	return count;
}

int main()
{
	ios::sync_with_stdio(0);
	cin >> N >> M >> K;
	for (int i = 0 ; i < M ; i++)
	{
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	for (int i = 1 ; i <= N ; i++)
		if (!mark[i])
			comp.push_back(dfs(i));
	if (comp.size() == 1)
	{
		cout << ans%K << endl;
		return 0;
	}
	for (int i = 0 ; i < comp.size() ; i++)
		ans = (ans * comp[i]) % K;
	for (int i = 1 ; i <= comp.size()-2 ; i++)
		ans = (ans * N) % K;
	cout << ans << endl;
	return 0;
}

