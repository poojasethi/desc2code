#include <iostream>
#include <vector>
using namespace std;

const int MAXn=1e5+10;
vector<int> nb[MAXn];
int a[MAXn];
bool mark[MAXn];
int n, m, MOD;
int c;

void dfs(int v)
{
	mark[v]=true;
	a[c]++;
	for(int i = 0; i < (int)nb[v].size(); i++)
		if(!mark[nb[v][i]])
			dfs(nb[v][i]);
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> m >> MOD;
	for(int i = 0; i < m; i++)
	{
		int v1, v2;
		cin >> v1 >> v2;
		v1--; v2--;
		nb[v1].push_back(v2);
		nb[v2].push_back(v1);
	}
	for(int i = 0; i < n; i++)
		if(!mark[i])
		{
			dfs(i);
			c++;
		}
	if(c==1)
	{
		cout << 1%MOD << endl;
		return 0;
	}
	long long res=1;
	for(int i = 0; i < c; i++)
		res=(res*a[i])%MOD;
	for(int i = 0; i < c-2; i++)
		res=(res*n)%MOD;
	cout << res << endl;
	return 0;
}
