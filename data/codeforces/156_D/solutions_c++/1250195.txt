#include <cstdio>

const int N = (int) 1e6;
int p[N], cnt, size[N];

int find(int x) {
	return x == p[x] ? x : p[x] = find(p[x]);
}

void dsu_union(int u, int v) {
	u = find(u), v = find(v);
	if (u != v)
		--cnt, p[u] = v, size[v] += size[u];
}

int main() {
	int n, m, mdl, u, v;
	scanf("%d%d%d", &n, &m, &mdl);
	cnt = n;
	for (int i = 0; i < n; ++i)
		p[i] = i, size[i] = 1;
	for (int i = 0; i < m; ++i) {
		scanf("%d%d", &u, &v), --u, --v;
		dsu_union(u, v);
	}
	int res = 1 % mdl;
	if (cnt == 1) {
		printf("%d\n", res);
		return 0;
	}
	for (int i = 0; i < cnt - 2; ++i)
		res = (res * 1ll * n) % mdl;
	for (int i = 0; i < n; ++i)
		if (i == find(i)) res = (res * 1ll * size[i]) % mdl;
	printf("%d\n", res);
	return 0;
}