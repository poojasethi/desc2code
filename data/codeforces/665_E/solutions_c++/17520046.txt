#include <iostream>
#include <cstdio>
#include <cstring>
#include <map>
using namespace std;
typedef long long LL;

const int MaxN = 1e6, Pt = 2e6 + 3e5 + 11;
int n;
LL K, ans = 0;
LL a[MaxN + 5], b[MaxN + 5];
LL cnt[Pt + 5], hash[Pt + 5];

LL H(int x)
{
	LL orig = x % Pt;
	LL p = orig;
	while ((hash[p] != x) && (hash[p] != -1)) {
		p = (p + 1) == Pt ? 0 : p + 1;
	}
	if (hash[p] == -1) hash[p] = x;
	return p;
}

LL Find(LL b[], LL K)
{
	memset(hash, -1, sizeof(hash));
	memset(cnt, 0, sizeof(cnt));
	cnt[0] = 1; H(0);
	LL sum = 0, pred = 0;
	for (int i = 1; i <= n; i++) {
		pred = pred ^ b[i];	
		sum += cnt[H(pred ^ K)];
		cnt[H(pred)]++;
	}
	return sum;
}

int main()
{
	scanf("%d%I64d", &n, &K);
	for (int i = 1; i <= n; i++) scanf("%I64d", &a[i]);
	for (LL t = 0; t <= 31; t++) {
		LL Pow = 1LL << t;
		if ((K & Pow) == 0) {
			for (int i = 1; i <= n; i++) b[i] = a[i] >> t;
			ans += Find(b, (K >> t) + 1);
		}
	}
	ans += Find(a, K);
	printf("%I64d\n", ans);
	return 0;
}
				  	  		 			     	 	   			 	