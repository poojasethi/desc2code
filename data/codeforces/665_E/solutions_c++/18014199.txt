#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;

struct node {
	int x;
	node *ch[2];
	node() {
		x = 0; ch[0] = ch[1] = NULL;
	}
}root;

const int N = 1000010;
int k,a[N],sum[N],lim[40],bit[40];

void insert(node *t, int i) {
	t->x++;
	if(!t->ch[bit[i]])
		t->ch[bit[i]] = new(node);
	if(i==32) {
		t->ch[bit[i]]->x++;
		return;
	}
	insert(t->ch[bit[i]], i+1);
}
int dfs(node *t,int i)
{
	if(t==NULL) return 0;
	if(i==33) return t->x;
	if(lim[i]==0) {
		int cnt = 0;
		if(t->ch[bit[i]^1])
			cnt = t->ch[bit[i]^1]->x;
		return cnt+dfs(t->ch[bit[i]], i+1);
	}
	else
		return dfs(t->ch[bit[i]^1], i+1);
}

int main()
{
	int n,i,j,temp;
	long long ans = 0;
	cin >> n >> k;
	for(j = 32,i = k; i; i>>=1,j--)
		lim[j] = (i&1);

	insert(&root, 0); //0
	for(i = 1; i<=n; i++) {
		scanf("%d", &a[i]);
		sum[i] = (sum[i-1]^a[i]);
		memset(bit, 0, sizeof(bit));
		for(j = 32,temp = sum[i]; temp; temp>>=1,j--)
			bit[j] = (temp&1);
		insert(&root, 0);
	//	cout << "this" << endl;
		ans += dfs(&root, 0);
	//	cout << "that" << endl;
	}
	cout << ans << endl;
	return 0;
}

 	  			   	 	  	      	  				 	