#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>

#define REP(i,n)		for (int i(0); i < (n); ++i)
#define FOR(i,a,b)		for (int i(a); i <= (b); ++i)
#define FORD(i,a,b)		for (int i(a); i >= (b); --i)
#define FOR_EDGE(i,x)	for (int i = H[x]; i; i = X[i])

#define PB	push_back
#define MP	make_pair
#define FI	first
#define SE	second
#define LB	lower_bound
#define UB	upper_bound
#define LL	long long
#define ULL unsigned long long

using namespace std;


const int N	=	100000 + 10;

int n, q;
int d[N], next[N], index[N], bound[N], ans[N];
int c[N], _c[N];

vector<pair<int, int> > query[N];


inline void Modify(int x, int delta){
	for(; x <= n; x += x & -x) c[x] += delta;
}

inline void _Modify(int x, int delta){
	for(; x <= n; x += x & -x) _c[x] += delta;
}

inline int Query(int x){
	int ret(0);
	for(; x; x -= x & -x) ret += c[x];
	return ret;
}

inline int _Query(int x){
	int ret(0);
	for(; x; x -= x & -x) ret += _c[x];
	return ret;
}


int main(){
	//Read
//	freopen("del.in", "r", stdin);
//	freopen("del.out", "w", stdout);
	
	scanf("%d ", &n);
	FOR(i, 1, n) scanf("%d ", d + i);
	
	//Init
	FOR(i, 1, N) index[i] = n + 1;
	FORD(i, n, 1){
		next[i] = index[d[i]], index[d[i]] = i;
		if(next[i] > n) bound[i] = next[i];
		else{
			int y = next[i], z = next[y];
			if(z > n || z - y == y - i) bound[i] = bound[y];
			else bound[i] = z;
		}
	}
	
	//Read query
	scanf("%d ", &q);
	FOR(i, 1, q){
		int l, r; scanf("%d %d ", &l, &r);
		query[l].PB(MP(r, i));
	}
	
	//Solve
	FORD(i, n, 1){
		Modify(i, 1), Modify(next[i], -1);
		REP(j, query[i].size())
			ans[query[i][j].SE] = Query(query[i][j].FI) - Query(i - 1);
		
		_Modify(i, 1), _Modify(bound[i], -1);
		if(next[i] <= n) _Modify(next[i], -1), _Modify(bound[next[i]], 1);
		REP(j, query[i].size())
			if(_Query(query[i][j].FI) == 0) ++ans[query[i][j].SE];
	}
	
	FOR(i, 1, q) printf("%d\n", ans[i]);
	
	return 0;
}
