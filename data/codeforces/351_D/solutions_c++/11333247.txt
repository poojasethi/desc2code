#include <cstdio>

#include <iostream>

#include <cmath>

#include <algorithm>

#include <cstring>



using namespace std;



struct Node

{

	int l,r,id;

	bool operator <(const Node&B) const {return r<B.r;}

}q[100005];

int n,m;

int a[100005];

int c[200005],d[200005];

int b[100005],next[100005],ans[100005];

int dq,dq1,dq2;

int lowbit(int x)

{

	return x&(-x);

}

void change(int c[],int pos,int w)

{

	int x=pos;

	while (x<=n)

	{

		c[x]+=w;

		x+=lowbit(x);

	}

}

int sum(int c[],int pos)

{

	int ans=0,x=pos;

	while (x>0)

	{

		ans+=c[x];

		x-=lowbit(x);

	}
	return ans;

}

int main()

{

	scanf("%d",&n);

	for (int i=1;i<=n;++i) scanf("%d",&a[i]);

	for (int i=1;i<=n;++i) next[i]=b[a[i]],b[a[i]]=i;

	scanf("%d",&m);

	for (int i=1;i<=m;++i)

	{

		scanf("%d%d",&q[i].l,&q[i].r);

		q[i].id=i;

	}

	sort(q+1,q+m+1);

	memset(b,0,sizeof(b));

	dq=1;

	for (int i=1;i<=n;++i)

	{

		change(c,next[i]+1,1);

		change(c,i+1,-1);

		if (next[next[i]]!=0&&i-next[i]!=next[i]-next[next[i]])

		{

			change(d,b[a[i]]+1,1);

			b[a[i]]=next[next[i]];

			change(d,b[a[i]]+1,-1);

		}

		while (dq<=m&&q[dq].r<i) ++dq;

		while (dq<=m&&q[dq].r==i)

		{

			dq1=sum(c,q[dq].l);

			dq2=sum(d,q[dq].l);

			ans[q[dq].id]=dq1;

			if (dq1==dq2) ans[q[dq].id]++;

			dq++;

		}

	}

	for (int i=1;i<=m;++i) printf("%d\n",ans[i]);

	return 0;

}
 		  		 	 	 	  		   			 		   	