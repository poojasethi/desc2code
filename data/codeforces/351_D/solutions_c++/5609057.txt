#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>

using namespace std;

int n, q;
int b[100010], p[100010], np[100010], v[100010], ans[100010];

struct Query
{
	int l, r, num;
	void read(int i)
	{
		scanf("%d %d", &l, &r);
		num = i;
	}
	bool operator < (const Query &A) const
	{
		return l > A.l;
	}
}a[100010];

int s[2][100010];

inline void add(int f, int x, int y)
{
	for (int i = x; i <= n + 1; i += i & -i)
		s[f][i] += y;
}

inline int getSum(int f, int x)
{
	int ret = 0;
	for (int i = x; i > 0; i -= i & -i)
		ret += s[f][i];
	return ret;
}

int main()
{
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
	{
		scanf("%d", &b[i]);
		if (v[b[i]]) p[v[b[i]]] = i;
		v[b[i]] = i;
	}
	for (int i = n; i >= 1; --i)
	{
		if (!p[i] || !p[p[i]])
		{
			np[i] = n + 1;
			continue;
		}
		if (p[i] - i == p[p[i]] - p[i])
			np[i] = np[p[i]];
		else
			np[i] = p[p[i]];
	}
	
	scanf("%d", &q);
	for (int i = 1; i <= q; ++i) a[i].read(i);
	sort(a + 1, a + q + 1);	
	
	for (int i = n, j = 1; i >= 1; --i)
	{
		add(0, i, 1);
		add(1, i, 1);
		add(1, np[i], -1);
		if (p[i])
		{
			add(0, p[i], -1);
			add(1, p[i], -1);
			add(1, np[p[i]], 1);
		}
		while (j <= q && a[j].l == i)
		{
			ans[a[j].num] = getSum(0, a[j].r) + (getSum(1, a[j].r) == 0);
			++j;
		}
	}
	for (int i = 1; i <= q; ++i) printf("%d\n", ans[i]);
	return 0;
}
