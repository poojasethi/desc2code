#include<algorithm>
#include<cstdio>
#include<cmath>
#include<iostream>
#include<string.h>
using namespace std;
const int N=1e5+10;
struct Seg{
    int sum[N];
    int lowbit(int x){return x&-x;}
    void update(int pos,int val){
        for(int i=pos;i;i-=lowbit(i)) sum[i]+=val;
    }
    int query(int pos){
        int ans=0;
        for(int i=pos;i<N;i+=lowbit(i)) ans+=sum[i];
        return ans;
    }
}seg1,seg2;
int last[N],pre[N],f[N],A[N],ans[N];
struct Node{
    int L,R,id;
    Node(){}
    Node(int L,int R,int id):L(L),R(R),id(id){}
    bool operator <(const Node &a)const{
        return R<a.R;
    }
}t[N];
int main() {
#ifdef gh546
freopen("a.in","r",stdin);
#endif // gh546
    int n,q;
    while(scanf("%d",&n)!=EOF){
        for(int i=1;i<=n;i++){
            scanf("%d",&A[i]);
            pre[i]=last[A[i]]; last[A[i]]=i;
            if(i-pre[i]==pre[i]-pre[pre[i]]) f[i]=f[pre[i]];
            else f[i]=pre[pre[i]];
        }
        scanf("%d",&q);
        for(int i=1;i<=q;i++){
            scanf("%d%d",&t[i].L,&t[i].R); t[i].id=i;
        }
        sort(t+1,t+q+1);
        int id=1;
        for(int i=1;i<=n;i++){
            seg1.update(i,1); seg1.update(pre[i],-1);
            seg2.update(f[i],1); seg2.update(f[pre[i]],-1);
            while(t[id].R==i&&id<=q){
                int L=t[id].L,R=i;
                int ans1=seg1.query(L)-seg1.query(R+1);
                int ans2=seg2.query(L)-seg2.query(R+1);
                if(ans1==ans2) ans1++;
                ans[t[id].id]=ans1;
                id++;
            }
        }
        for(int i=1;i<=q;i++) printf("%d\n",ans[i]);
    }
	return 0;
}

	  	 	  	 	  	  	  	 	 	  		 		