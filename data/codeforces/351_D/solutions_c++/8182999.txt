#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
struct query
{
	int l,r,t,c;
}Q[100050];
int a[100050],head[100050],prev[100050],next[100050],c[100050];
int L[100050],R[100050],ans[100050],good[100050];
int n,m,B,cnt,G,l0,r0;
bool cmp(query a,query b)
{
	return (a.c<b.c)||((a.c==b.c)&&(a.r>b.r));
}
void modify(int x,int d)
{
	if (good[x]^d)
		if (d) G++;
		else G--;
	good[x]=d;
}
void add(int x,int d)
{
	c[a[x]]++;
	if (c[a[x]]==1)
	{
		cnt++; modify(a[x],1);
	}
	else
	{
		if ((d==0)&&(R[x]<=r0)) modify(a[x],0);
		if ((d==1)&&(L[x]>=l0)) modify(a[x],0);
	}
}
void erase(int x,int d)
{
	c[a[x]]--;
	if (c[a[x]]==0)
	{
		cnt--; modify(a[x],0);
	}
	else
	{
		if ((d==0)&&(R[next[x]]>r0)) modify(a[x],1);
		if ((d==1)&&(L[prev[x]]<l0)) modify(a[x],1);
	}
}
int main()
{
	int i;
	scanf("%d",&n);
	B=int(floor(sqrt(n)));
	for (i=1;i<=n;i++) scanf("%d",&a[i]);
	memset(head,0,sizeof(head));
	for (i=1;i<=n;i++)
	{
		prev[i]=head[a[i]]; head[a[i]]=i;
		if (i-prev[i]==prev[i]-prev[prev[i]]) L[i]=L[prev[i]];
		else L[i]=prev[prev[i]];
	}
	for (i=1;i<=n;i++) head[i]=n+1;
	next[n+1]=n+1; R[i]=n+1;
	for (i=n;i>=1;i--)
	{
		next[i]=head[a[i]]; head[a[i]]=i;
		if (i-next[i]==next[i]-next[next[i]]) R[i]=R[next[i]];
		else R[i]=next[next[i]];
	}
	scanf("%d",&m);
	for (i=1;i<=m;i++)
	{
		scanf("%d%d",&Q[i].l,&Q[i].r);
		Q[i].t=i; Q[i].c=(Q[i].l-1)/B;
	}
	sort(Q+1,Q+m+1,cmp);
	memset(c,0,sizeof(c));
	memset(good,0,sizeof(good));
	l0=1; r0=0; cnt=0; G=0;
	for (i=1;i<=m;i++)
	{
		while (Q[i].l<l0)
		{
			l0--; add(l0,0);
		}
		while (Q[i].r>r0)
		{
			r0++; add(r0,1);
		}
		while (Q[i].l>l0)
		{
			erase(l0,0); l0++;
		}
		while (Q[i].r<r0)
		{
			erase(r0,1); r0--;
		}
		ans[Q[i].t]=cnt+(G==0);
	}
	for (i=1;i<=m;i++) printf("%d\n",ans[i]);
	return 0;
}