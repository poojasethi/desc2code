#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cmath>
#include <algorithm>
#include <string>
#include <iostream>
using namespace std;

#define ll long long
#define mp make_pair
#define st first
#define nd second
#define For(_i,a,b) for (int _i=(a),_n=(b); _i<=_n; _i++)
#define Rof(_i,a,b) for (int _i=(a),_n=(b); _i>=_n; _i--)
#define Mem(a,b) memset(a,b,sizeof(a))
#define Cpy(a,b) memcpy(a,b,sizeof(b))

const int maxn=100000+100;
struct bbit
{
    int a[maxn],n;
    void init(int x) { Mem(a,0); n=x; }
    void add(int i,int x) { for (; i<=n; i+=(i&(-i))) a[i]+=x; }
    int que(int i) { int ret=0; for (; i; i-=(i&(-i))) ret+=a[i]; return ret; }
}qa,qb;
struct typ
{
    int x,y,num;
}Q[maxn];
int N,M,A[maxn],pre[maxn],w[maxn],ans[maxn];

bool cmp(const typ &a,const typ &b) { return a.y<b.y; }

void work()
{
    Mem(w,0);
    For(i,1,N) scanf("%d",&A[i]),pre[i]=w[A[i]],w[A[i]]=i;
    scanf("%d",&M);
    For(i,1,M) scanf("%d%d",&Q[i].x,&Q[i].y),Q[i].num=i;
    sort(Q+1,Q+M+1,cmp);
    
    qa.init(N),qb.init(N);
    Mem(w,0);
    int j=1;
    For(i,1,N)
    {
        qa.add(pre[i]+1,1),qa.add(i+1,-1);
        if (pre[i]!=0 && i-pre[i]!=pre[i]-pre[pre[i]]) qb.add(w[A[i]]+1,1),qb.add(pre[pre[i]]+1,-1),w[A[i]]=pre[pre[i]];
        for (; j<=M && Q[j].y<i; j++);
        for (; j<=M && Q[j].y==i; j++)
        {
            int s1=qa.que(Q[j].x),s2=qb.que(Q[j].x);
            ans[Q[j].num]=s1+(s1==s2);
        }
    }
    For(i,1,M) printf("%d\n",ans[i]);
}
int main()
{
    
    for (; scanf("%d",&N)!=EOF; work());
    
    return 0;
}
