#include <vector>
#include <stdio.h>
#include <string.h>
#include <algorithm>

#define PB push_back

using namespace std;

#define MAXN 100005

struct Query{
	int idx;
	int l,r;
	bool operator<(const Query q) const{
		return r<q.r;
	}
} q[MAXN];

int diffnum[MAXN],badnum[MAXN],now[MAXN];
vector<int> pos[MAXN];

#define lowbit(u) (u&(-u))

struct BIT{
	int sum[MAXN];
	int n;
	BIT(int n){
		this->n = n;
		memset(sum,0,sizeof(sum));
	}
	void add(int u,int v){
		while(u<=n){
			sum[u]+=v;
			u+=lowbit(u);
		}
	}

	int Sum(int u){
		int ans = 0;
		while(u){
			ans+=sum[u];
			u-=lowbit(u);
		}
		return ans;
	}
	int Sum(int l,int r){
		return Sum(r)-Sum(l-1);
	}
};

int a[MAXN],last[MAXN];

int main(void){
	int n,m;
	scanf("%d",&n);
	for(int i = 1;i<=n;i++){
		scanf("%d",&a[i]);
		pos[a[i]].PB(i);
	}
	scanf("%d",&m);
	for(int i = 0;i<m;i++){
		q[i].idx = i;
		scanf("%d %d",&q[i].l,&q[i].r);
	}
	sort(q,q+m);
	for(int i = 1;i<MAXN;i++) now[i] = 0;
	int j = 0;
	BIT bit(n);
	for(int i = 1;i<=n;i++){
		if(now[a[i]]) bit.add(pos[a[i]][now[a[i]]-1],-1);
		bit.add(pos[a[i]][now[a[i]]++],1);
		while(j<m&&q[j].r==i){
			diffnum[q[j].idx] = bit.Sum(q[j].l,q[j].r);
			j++;
		}
	}
	j = 0;
	bit = BIT(n);
	memset(now,0,sizeof(now));
	memset(last,-1,sizeof(last));
	for(int i = 1;i<=n;i++){
		if(now[a[i]]>1){
			if(i+pos[a[i]][now[a[i]]-2]!=
					2*pos[a[i]][now[a[i]]-1]){
				if(~last[a[i]])	bit.add(last[a[i]],-1);
				bit.add(pos[a[i]][now[a[i]]-2],1);
				last[a[i]] = pos[a[i]][now[a[i]]-2];
			}
		}
		now[a[i]]++;
		while(j<m&&q[j].r==i){
			badnum[q[j].idx] = bit.Sum(q[j].l,q[j].r);
			j++;
		}
	}
	for(int i = 0;i<m;i++)
		printf("%d\n",diffnum[i]+(badnum[i]==diffnum[i]));
}
