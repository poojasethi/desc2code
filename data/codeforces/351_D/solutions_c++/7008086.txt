#include <stdio.h>
#include <algorithm>
#define N 100100

using namespace std;

int a[N], n;
int prev[N];
int last[N];
int A[N], B[N];
int ans[N];

struct query {
	int l, r, id;
} q[N];

inline bool cmp(query a, query b) {
	return a.r<b.r;
}

inline void Add(int *f, int pos, int v) {
	for (int i=pos; i<=n; i+=i&-i) f[i]+=v;
}

inline int Calc(int *f, int pos) {
	int r=0;
	for (int i=pos; i; i-=i&-i) r+=f[i];
	return r;
}

int main() {
	int Q;
//	freopen ("in.txt", "r", stdin);
	scanf("%d", &n);
	for (int i=1; i<=n; i++) {
		scanf("%d", a+i);
		prev[i]=last[a[i]];
		last[a[i]]=i;
	}
	scanf("%d", &Q);
	for (int i=1; i<=Q; i++) {
		scanf("%d %d", &q[i].l, &q[i].r);
		q[i].id=i;
	}
	sort(q+1, q+Q+1, cmp);
	for (int i=1; i<=n; i++) last[a[i]]=0;
	for (int i=1, j=1; i<=n && j<=Q; i++) {
		Add(A, prev[i]+1, 1);
		Add(A, i+1, -1);
		int p=prev[i], pp=prev[p];
		if (pp && i-p!=p-pp) {
			Add(B, last[a[i]]+1, 1);
			last[a[i]]=pp;
			Add(B, pp+1, -1);
		}
		for (; j<=Q; j++) {
			if (q[j].r==i) {
				int x=Calc(A, q[j].l);
				int y=Calc(B, q[j].l);
				ans[q[j].id]=x+(x==y);
			} else break;
		}
	}
	for (int i=1; i<=Q; i++) printf("%d\n", ans[i]);
}
