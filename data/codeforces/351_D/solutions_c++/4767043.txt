#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<cstring>
using namespace std;
const int N=110000;
int n,ss=0,pre[N],c1[N],c2[N],a[N],last[N],d[N],fr[N],i,t,q,ans[N];
struct rec{
       int st,ed,z;
       }b[N];

bool cmp(rec a,rec b){
     return a.ed<b.ed;
     }
int lowbit(int x){return x&(-x);}
void add1(int x,int k){
     if(!x)return;
     for(;x<=n;x+=lowbit(x))c1[x]+=k;
}
void add2(int x,int k){
     if(!x)return;
     for(;x<=n;x+=lowbit(x))c2[x]+=k;
}
int sum1(int x){
    int tt=0;
    for(;x;x-=lowbit(x))tt+=c1[x];
    return tt;
}
int sum2(int x){
    int tt=0;
    for(;x;x-=lowbit(x))tt+=c2[x];
    return tt;
}
int main(){
    scanf("%d",&n);
    memset(pre,0,sizeof pre);
    for(i=1;i<=n;i++){
                      scanf("%d",&a[i]);
                      last[i]=pre[a[i]];
                      pre[a[i]]=i;
                      if(!last[i])d[i]=-1;
                             else d[i]=i-last[i];
                      if(d[i]==d[last[i]])fr[i]=fr[last[i]];
                                     else fr[i]=last[last[i]];
                      }
    scanf("%d",&q);
    for(i=1;i<=q;i++){ scanf("%d%d",&b[i].st,&b[i].ed); b[i].z=i;; }
    sort(b+1,b+q+1,cmp);
    memset(c1,0,sizeof c1);
    memset(c2,0,sizeof c2);
    t=1;
    for(i=1;i<=n;i++){
      add1(last[i],-1);
      add1(i,1);
      if(last[i]==0 || fr[i]!=fr[last[i]]){
                    if(last[i]){
                    if(!fr[last[i]])ss--;
                      else add2(fr[last[i]],-1);
                      }
                    if(!fr[i])ss++;
                      else add2(fr[i],1);
                    }
      while(t<=q && b[t].ed==i){
                 int tot=sum1(b[t].ed)-sum1(b[t].st-1);
                 ans[b[t].z]=tot+(tot-(sum2(b[t].ed)-sum2(b[t].st-1))==0);
                 t++;
                 }
    }
    for(i=1;i<=q;i++)cout<<ans[i]<<endl;
    return 0;
}
     
                                          
