#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#define N 120000
using namespace std;
struct ppp{
    int l,r,id;
}a[N];
int b[N],next[N],head[N],n,i,x,y,ans[N],tree[N],tree2[N],
    j,qn,f[N];
void add(int x,int flag){
    x=n-x+1;
    for(int i=x;i<=n;i+=i&(-i))tree[i]+=flag;
}
int calc(int x){
    int res=0;
    x=n-x+1;
    for(int i=x;i;i-=i&(-i))res+=tree[i];
    return res;
}
void add2(int x,int flag){
    for(int i=x;i<=n;i+=i&(-i))tree2[i]+=flag;
}
int calc2(int x){
    int res=0;
    for(int i=x;i;i-=i&(-i))res+=tree2[i];
    return res;
}
bool cmp(const ppp&a,const ppp&b){
    return a.r<b.r;
}
int main(){
    scanf("%d",&n);
    for(i=1;i<=n;++i){
        scanf("%d",&b[i]);
        next[i]=head[b[i]];
        head[b[i]]=i;
    }
    scanf("%d",&qn);
    for(i=1;i<=qn;++i){
        scanf("%d%d",&a[i].l,&a[i].r);
        a[i].id=i;
    }
    sort(a+1,a+qn+1,cmp);
    j=1;
    for(i=1;i<=n;++i){
        add(next[i],-1);
        add(i,1);
        if(!next[i]){
            f[i]=1;
            add2(f[i],1);
            add2(i+1,-1);
        }else{
            x=next[i]; y=next[x];
            if(!y || (i-x)==(x-y)){
                f[i]=f[x];
                add2(x+1,1);
                add2(i+1,-1);
            }else{
                f[i]=y+1;
                add2(f[x],-1);
                add2(x+1,1);
                add2(f[i],1);
                add2(i+1,-1);
            }
        }
        while(j<=qn && a[j].r==i){
            x=calc(a[j].l);
            y=calc2(a[j].l);
            if(!y)x++;
            ans[a[j].id]=x;
            j++;
        }
    }
    for(i=1;i<=qn;++i)printf("%d\n",ans[i]);
}