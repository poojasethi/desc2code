#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
const int N=100010;
int bit[N];
int a[N];
int n,m;
struct qq{
	int l,r,id;
}q[N];
int last[N],last1[N],last2[N],d[N],pre[N];
int ans[N];
int cmp(qq xx,qq yy){
	return xx.r<yy.r;
}
int lowbit(int x){
	return x&(-x);
}
void add(int w,int val){
	for (int i=w;i<=n;i+=lowbit(i)) bit[i]+=val;
}
int getsum(int w){
	int res=0;
	for (int i=w;i>0;i-=lowbit(i)) res+=bit[i];
	return res;
}
void solve(){
	int i,j;
	sort(q,q+m,cmp);
	j=0;
	for (i=1;i<=n;i++){
		if (last[a[i]]) add(last[a[i]],-1);
		pre[i]=last[a[i]];
		last[a[i]]=i;
		add(i,1);
		while (j<m&&q[j].r==i){
			ans[q[j].id]=getsum(q[j].r)-getsum(q[j].l-1);
			j++;
		}
	}
	memset(bit,0,sizeof(bit));
	j=0;
	for (i=1;i<=n;i++){
		if (!last1[a[i]]){
			add(i,1);
			last1[a[i]]=i;
		}else{
			int dd=i-last1[a[i]];
			if (!d[last1[a[i]]] || dd==d[last1[a[i]]]){
				d[i]=dd;
				add(last1[a[i]],-1);
				add(i,1);
				last1[a[i]]=i;
			}else{
				d[i]=dd;
				if (last2[a[i]]) add(last2[a[i]],-1);
				last2[a[i]]=pre[last1[a[i]]];
				add(last1[a[i]],-1);
				add(last2[a[i]],1);
				last1[a[i]]=i;
				add(i,1);
			}
		}
		while (j<m&&q[j].r==i){
			int t1=getsum(q[j].r)-getsum(q[j].l-1);
			int t2=ans[q[j].id];
			if (t1==t2*2) ans[q[j].id]++;
			j++;
		}
	}
	for (i=0;i<m;i++){
		printf("%d\n",ans[i]);
	}
}
		
int main(){
//	freopen("d.in","r",stdin);
	int i;
	scanf("%d",&n);
	for (i=1;i<=n;i++){
		scanf("%d",&a[i]);
	}
	scanf("%d",&m);
	for (i=0;i<m;i++){
		scanf("%d%d",&q[i].l,&q[i].r);
		q[i].id=i;
	}
	solve();
//	while (1);
	return 0;
}

