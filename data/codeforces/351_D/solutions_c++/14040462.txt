#include <stdio.h>
#include <memory.h>
#include <algorithm>
#define N 100100

using namespace std;

int a[N], p[N], b[N];
int A[N], B[N];
int ans[N];
struct query {
    int l, r, p;
} q[N];

bool cmp(query a, query b) {
    return a.r<b.r;
}

void add(int *a, int k, int d) {
    while (k<N) {
        a[k]+=d;
        k+=k&-k;
    }
}

int calc(int *a, int k) {
    int d=0;
    while (k) {
        d+=a[k];
        k-=k&-k;
    }
    return d;
}

int main() {
    int n, m, s1, s2, i, j;
    scanf("%d", &n);
    for (i=1; i<=n; i++) scanf("%d", a+i), p[i]=b[a[i]], b[a[i]]=i;
    scanf("%d", &m);
    for (i=1; i<=m; i++) scanf("%d %d", &q[i].l, &q[i].r), q[i].p=i;
    sort(q+1, q+m+1, cmp);
    memset(b, 0, sizeof(b));
    for (i=j=1; i<=n; i++) {
        add(A, p[i]+1, 1), add(A, i+1, -1);
        if (p[p[i]] && p[i]-p[p[i]]!=i-p[i]) add(B, b[a[i]]+1, 1), add(B, (b[a[i]]=p[p[i]])+1, -1);
        for (; j<=m && q[j].r<i; j++);
        for (; j<=m && q[j].r==i; j++) s1=calc(A, q[j].l), s2=calc(B, q[j].l), ans[q[j].p]=s1+(s1==s2);
    }
    for (i=1; i<=m; i++) printf("%d\n", ans[i]);
}
