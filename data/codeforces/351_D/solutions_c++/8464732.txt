#include <cstdio>
#include <vector>
#include <algorithm>
const int N = 100000 + 9;
int c1[N],c2[N],n,q,a[N],ans[N],L[N],R[N],pre[N],t[N],last[N],head[N];
inline bool cmpr(const int lhs,const int rhs)
{
	return R[lhs] < R[rhs];
}
void add(int *c, int x, int y)
{
	for (; x <= n; x += x & -x)
		c[x] += y;
}
int query(int *c, int x)
{
	int res = 0;
	for (; x; x -= x & -x)
		res += c[x];
	return res;
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("351D.in","r",stdin);
	freopen("351D.out","w",stdout);
	#endif
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		scanf("%d", a + i);
		pre[i] = last[a[i]];
		last[a[i]] = i;
		head[a[i]] = 1;
	}
	scanf("%d", &q);
	for (int i = 1; i <= q; ++i) {
		scanf("%d%d", L + i, R + i);
		t[i] = i;
	}
	std::sort(t + 1, t + 1 + q, cmpr);
	for (int i = 1, j = 1; i <= n; ++i) {
		add(c2, pre[i] + 1, 1);
		add(c2, i + 1, -1);
		if (i - pre[i] == pre[i] - pre[pre[i]] || !pre[pre[i]]) {
			add(c1, pre[i] + 1, 1);
			add(c1, i + 1, -1);
		}else {
			add(c1, head[a[i]], -1);
			add(c1, pre[i] + 1, 1);
			add(c1, pre[pre[i]] + 1, 1);
			add(c1, i + 1, -1);
			head[a[i]] = pre[pre[i]] + 1;
		}
		for (; j <= q && R[t[j]] == i; ++j)
			ans[t[j]] = query(c2, L[t[j]]) - (bool)query(c1, L[t[j]]);
	}
	for (int i = 1; i <= q; ++i)
		printf("%d\n", ans[i] + 1);
}
