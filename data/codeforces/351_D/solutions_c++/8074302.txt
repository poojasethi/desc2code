#include <cstdio>
#include <algorithm>
using namespace std;

const int maxn = 100008;
int n, q, l, r, Last[maxn], Next[maxn], Head[maxn], cnt[maxn], d[maxn], a[maxn], fl[maxn], fr[maxn], ccol, cq, sqrtn, ans[maxn];
bool Good[maxn];
struct Query {
	int l, r, o;
	bool operator <(const Query u) const 
		{return l / sqrtn == u.l / sqrtn ? r < u.r : l < u.l;}
} Q[maxn];

inline void Modify(int v, int k) {
	if (k) if (!Good[v]) cq++, Good[v] = true;
	if (!k) if (Good[v]) cq--, Good[v] = false;
}
inline void Insert(int p, int k) {
	int v = a[p], _d; cnt[v]++;
	if (cnt[v] == 1) ccol++, Modify(v, 1);
	else if (k ? fl[p] >= l : fr[p] <= r)
		Modify(v, 0);
}

inline void Delete(int p, int k) {
	int v = a[p], _d; cnt[v]--;
	if (cnt[v] == 0) ccol--, Modify(v, 0);
	else if (k ? fl[Last[p]] < l : fr[Next[p]] > r)
		Modify(v, 1);
}

int main() {
	scanf("%d", &n); sqrtn = 300;
	for (int i = 1; i <= n; i++)
		scanf("%d", a + i);
	fill(Head, Head + maxn, 0);
	for (int i = 1; i <= n; i++) {
		Last[i] = Head[a[i]], Head[a[i]] = i;
		if (Last[i] - Last[Last[i]] == i - Last[i] || !Last[Last[i]])
			fl[i] = fl[Last[i]]; else fl[i] = Last[Last[i]];
	}
	fill(Head, Head + maxn, n + 1); 
	Next[n + 1] = n + 1; fr[n + 1] = n + 1;
	for (int i = n; i; i--) { 
		Next[i] = Head[a[i]], Head[a[i]] = i;
		if (Next[Next[i]] - Next[i] == Next[i] - i || Next[Next[i]] == n + 1)
			fr[i] = fr[Next[i]]; else fr[i] = Next[Next[i]];
	}
	scanf("%d", &q);
	for (int i = 1; i <= q; i++)
		scanf("%d%d", &Q[i].l, &Q[i].r), Q[i].o = i;
	sort(Q + 1, Q + q + 1); l = 1;
	for (int i = 1; i <= q; i++) {
		int  _l = Q[i].l, _r = Q[i].r;
		while (r < _r) 
			Insert(++r, 1);
		while (l > _l)
			Insert(--l, 0);
		while (r > _r)
			Delete(r--, 1);
		while (l < _l)
			Delete(l++, 0);
		ans[Q[i].o] = ccol + (int)(!cq);
	}
	for (int i = 1; i <= q; i++)
		printf("%d\n", ans[i]);
	return 0;
}
