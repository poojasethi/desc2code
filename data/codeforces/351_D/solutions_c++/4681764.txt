#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<algorithm>
#include<vector>
using namespace std;

const int MAX_N = 111111;
typedef pair<int, int> PII;
#define mp make_pair
#define X first
#define Y second
vector<PII> Q[MAX_N];
int pos[MAX_N], EK[MAX_N], a[MAX_N], pre[MAX_N], h1[MAX_N], h2[MAX_N], ans[MAX_N];
int n, m, V;

void add(int h[], int i, int d){
     if (!i) return;
     for (; i <= n; i += i & (-i))
         h[i] += d;
}

int query(int h[], int i){ int s = 0;
    for (; i; i -= i & (-i))
        s += h[i]; return s;
}

int main(){
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i){ 
        scanf("%d", &a[i]); V = max(V, a[i]); } 
    scanf("%d", &m);
    for (int i = 1; i <= m; ++i){
        int x, y;
        scanf("%d%d", &x, &y);
        Q[y].push_back(make_pair(x, i));
    }
    for (int i = 1; i <= V; ++i) pos[i] = 0;
    for (int i = 1; i <= n; ++i){
        pre[i] = pos[a[i]];
        pos[a[i]] = i;
        EK[i] = 0;
        if (pre[i] > 0){
           if (i - pre[i] == pre[i] - pre[pre[i]] || pre[pre[i]] == 0)
              EK[i] = EK[pre[i]];
           else EK[i] = pre[pre[i]];
        }
    }
    for (int i = 1; i <= n; ++i){
        add(h1, i, 1);
        add(h1, pre[i], -1);
        add(h2, i, 1);
        add(h2, EK[i], -1);
        add(h2, pre[i], -1);
        add(h2, EK[pre[i]], 1);
        for (int j = 0; j < Q[i].size(); ++j){
            int l = Q[i][j].X, x = Q[i][j].Y;
            ans[x] = query(h1, i) - query(h1, l - 1) + (query(h2, i) - query(h2, l - 1) == 0);
        }
    }
    for (int i = 1; i <= m; ++i) printf("%d\n", ans[i]);
}
