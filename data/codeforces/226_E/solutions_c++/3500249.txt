#include<cstdio>
#include<algorithm>
#include<list>

#define MAXX 100111
#define MAX (MAXX*100)
#define N 17

int n,m;
int head[MAXX];
int lson[MAX],rson[MAX],sz[MAX],cnt;
int pre[MAXX][N],inv[MAXX][2],dg[MAXX],atk[MAXX];
std::list<int>edge[MAXX];

int i,j,k,l,t,x,y,z;

void dfs(int now)
{
    inv[now][0]=++cnt;
    for(std::list<int>::const_iterator it(edge[now].begin());it!=edge[now].end();++it)
    {
        dg[*it]=dg[now]+1;
        dfs(*it);
    }
    inv[now][1]=cnt;
}

inline int lca(int a,int b)
{
    if(dg[a]<dg[b])
        std::swap(a,b);
    static int i,j;
    for(i=dg[a]-dg[b],j=0;i;i>>=1,++j)
        if(i&1)
            a=pre[a][j];
    if(a==b)
        return a;
    for(i=N-1;i>=0;--i)
        if(pre[a][i]!=pre[b][i])
        {
            a=pre[a][i];
            b=pre[b][i];
        }
    return pre[a][0];
}

int make(int l=1,int r=n)
{
    int id(++cnt);
    if(l!=r)
    {
        int mid((l+r)>>1);
        lson[id]=make(l,mid);
        rson[id]=make(mid+1,r);
    }
    return id;
}

int update(int id,int l=1,int r=n)
{
    int re,nid;
    re=nid=++cnt;
    sz[nid]=sz[id];
    lson[nid]=lson[id];
    rson[nid]=rson[id];
    if(inv[i][0]<=l && r<=inv[i][1])
        ++sz[nid];
    else
    {
        int mid((l+r)>>1);
        if(inv[i][0]<=mid)
            lson[nid]=update(lson[id],l,mid);
        if(inv[i][1]>mid)
            rson[nid]=update(rson[id],mid+1,r);
    }
    return re;
}

inline int access(int id,int pos)
{
    static int re,mid,l,r;
    l=1;
    r=n;
    re=sz[id];
    while(l<r)
    {
        mid=(l+r)>>1;
        if(pos<=mid)
        {
            id=lson[id];
            r=mid;
        }
        else
        {
            id=rson[id];
            l=mid+1;
        }
        re+=sz[id];
    }
    return re;
}

inline int query(int id,int l,int r)
{
    return access(id,r)-(l!=1?access(id,l):0);
}

inline int query(int tl,int tr,int l,int r) // (l,r]
{
    return (dg[r]-dg[l])-(query(head[tl],inv[l][0],inv[r][0])-query(head[tr],inv[l][0],inv[r][0]));
}

int main()
{
    scanf("%d",&n);
    for(i=1;i<=n;++i)
    {
        scanf("%d",pre[i]);
        edge[pre[i][0]].push_back(i);
    }
    for(i=1;i<N;++i)
        for(j=1;j<=n;++j)
            pre[j][i]=pre[pre[j][i-1]][i-1];
    dfs(0);
    cnt=0;
    for(i=0;i<=n;++i)
        edge[i].clear();
    ++n;
    scanf("%d",&m);
    head[0]=make();
    for(t=1;t<=m;++t)
    {
        scanf("%d",&i);
        head[t]=head[t-1];
        if(i==1)
        {
            scanf("%d",&i);
            head[t]=update(head[t]);
            atk[i]=t;
        }
        else
        {
            scanf("%d %d %d %d",&i,&j,&k,&l);
            x=lca(i,j);
            if(atk[i]<=l)
                ++k;
            y=query(t,l,pre[x][0],i);
            z=query(t,l,x,j);
            if(y+z<k)
            {
                puts("-1");
                continue;
            }
            if(y<k)
            {
                i=j;
                k=y+z-k+1;
            }
            for(y=N-1;y>=0;--y)
            {
                x=pre[i][y];
                z=query(t,l,x,i);
                if(z<k)
                {
                    k-=z;
                    i=x;
                }
            }
            if(i==j)
                puts("-1");
            else
                printf("%d\n",i);
        }
    }
    return 0;
}
