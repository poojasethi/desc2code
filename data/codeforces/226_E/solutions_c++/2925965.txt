#include <cstring>
#include <cstdio>
using namespace std;

const int maxn=200010;
int tt, now, tot;

int point[maxn],next[maxn],son[maxn],a[maxn*20],L[maxn*20],R[maxn*20],root[maxn];
int flag[maxn],in[maxn],out[maxn],d[maxn], f[maxn][20],destroy[maxn];

int n,m,q;

void addedge(int x, int y)
{
	point[++tot]=y; next[tot]=son[x]; son[x]=tot; 
}

int lca(int x,int y)
{
	for (int i=17; i>=0; --i)
	{
		if (d[x]-(1<<i)>=d[y]) x=f[x][i];
		if (d[y]-(1<<i)>=d[x]) y=f[y][i];
	}
	
	for (int i=17; i>=0; --i)
		if (f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];
	if (x!=y) x=f[x][0];
	return x;
	
}

void build(int &t, int l, int r)
{
	t=++tot; int mid=(l+r)>>1;
	if (l==r) {a[t]=flag[l]; return;}
	build(L[t],l,mid); build(R[t],mid+1,r); a[t]=a[L[t]]+a[R[t]];
}

void add(int t, int &t1, int l, int r, int x, int dx)
{
	t1=++tot; int mid=(l+r)>>1;
	if (l==r){a[t1]=a[t]+dx; return;}
	if (x<=mid) R[t1]=R[t], add(L[t],L[t1],l,mid,x,dx);
		else L[t1]=L[t], add(R[t],R[t1],mid+1,r,x,dx);
	a[t1]=a[L[t1]]+a[R[t1]];
}

int query(int t, int t1, int l, int r, int x)
{
	if (r==x) return a[t]-a[t1];
	int mid=(l+r)>>1;
	if (x<=mid) return query(L[t],L[t1],l,mid,x);
	else return a[L[t]]-a[L[t1]]+query(R[t],R[t1],mid+1,r,x);
}

void dfs(int x)
{
	flag[m]=1; in[x]=m++; 
	for (int p=son[x]; p; p=next[p])
	{
		int y=point[p];
		if (!d[y]) d[y]=d[x]+1, dfs(y);
	}
	flag[m]=-1; out[x]=m++;
}

int calc(int i, int &exist, int &num, int x)
{
	if (destroy[x]<=tt) exist=1; else exist=0;
	num=d[x]-query(root[i],root[tt],1,m,in[x]);
}

int findkth(int i, int x, int sumx, int k)
{
	int y=x;
	for (int j=17; j>=0; j--)
	{
		int z=f[y][j], exz, sumz;
		if (z)
		{
			calc(i,exz,sumz,z);
			if (sumx-sumz<k) y=z;
		}
	}
	return y;
}

int main()
{
	//freopen("a.in","r",stdin);
	scanf("%d",&n);
	for (int i=1; i<=n; i++)
	{
		scanf("%d", &f[i][0]);
		addedge(f[i][0],i);
	}
	
	for (int j=1; j<18; j++)
	for (int i=1; i<=n; i++)
		f[i][j]=f[f[i][j-1]][j-1];
	
	tot=0;
	dfs(0); m-=2;
	build(root[0],1,m);
	scanf("%d",&q);
	for (int i=1; i<=q; i++)
	{
		int type,x,y,k;
		scanf("%d%d",&type,&x);
		if (type==1)
		{
			destroy[x]=i;
			add(root[i-1],now,1,m,in[x],1);
			add(now,root[i],1,m,out[x],-1);
		}
		else
		{
			scanf("%d%d%d",&y,&k,&tt);
			int z=lca(x,y); root[i]=root[i-1];
			int exx,sumx,exy,sumy,exz,sumz,suml,sumr;
			calc(i,exx,sumx,x), calc(i,exy,sumy,y),calc(i,exz,sumz,z);
			suml=sumx-sumz+exz; sumr=sumy-sumz; k+=exx;
			if (suml+sumr-exy<k) printf("-1\n");
			else if (suml>=k) printf("%d\n",findkth(i,x,sumx,k));
			else printf("%d\n", findkth(i,y,sumy,suml+sumr-k+1));
		}
	}
	//for (;;);
}
