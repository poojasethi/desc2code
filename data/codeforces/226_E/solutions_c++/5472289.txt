#include <cmath>

#include <cstdio>

#include <algorithm>

#define maxn 200005

#define Seg int&p,int q,int L,int R

#define mi ((L+R)>>1)

#define Left t[p].l,t[q].l,L,mi

#define Right t[p].r,t[q].r,mi+1,R

using namespace std;



struct seg

{

	int l,r,s;

} t[maxn*20];

int tot,N,S,M,K,a[maxn],head[maxn],lk[maxn],next[maxn],dfn[maxn],L[maxn],R[maxn],fa[maxn][20],rt[maxn],d[maxn];



void add(int u,int v,int t) {lk[t]=v,next[t]=head[u],head[u]=t;}



void init()

{

	scanf("%d",&N),K=log2(N);

	for (int i=1; i<=N; i++) scanf("%d",&fa[i][0]),add(fa[i][0],i,i);

}



void dfs(int u)

{

	dfn[L[u]=tot++]=u;

	for (int i=1; i<=K; i++) fa[u][i]=fa[fa[u][i-1]][i-1];

	for (int i=head[u],v; v=lk[i],i; i=next[i]) if (v!=fa[u][0]) fa[v][0]=u,d[v]=d[u]+1,dfs(v);

	dfn[R[u]=tot++]=u;

}



void ins(Seg,int x,int v)

{

	if (!p) p=++S;

	if (L==R) {t[p].s=t[q].s+v; return;}

	if (x<=mi) ins(Left,x,v),t[p].r=t[q].r; else ins(Right,x,v),t[p].l=t[q].l;

	t[p].s=t[t[p].l].s+t[t[p].r].s;

}



int query(Seg,int l,int r)

{

	if (r<L||R<l) return 0;

	if (l<=L&&R<=r) return t[p].s-t[q].s;

	if (r<=mi) return query(Left,l,r); else if (mi<l) return query(Right,l,r); else return query(Left,l,mi)+query(Right,mi+1,r);

}



int lca(int x,int y)

{

	if (d[x]<d[y]) swap(x,y);

	for (int i=K; i>=0; i--)

	{

		if (d[fa[x][i]]>=d[y]) x=fa[x][i];

		if (x==y) return x;

	}

	for (int i=K; i>=0; i--) if (fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];

	return fa[x][0];

}



int get(int x,int y,int l,int r) {return d[y]-d[x]<=1?0:d[y]-d[x]-1-query(rt[r],rt[l-1],1,tot,L[x]+1,L[y]-1);}

int find(int x,int k,int l,int r)

{

	for (int i=K,t,p; i>=0; i--) if ((p=fa[x][i])&&(t=get(fa[p][0],x,l,r))<k) x=p,k-=t;

	return fa[x][0];

}



void doit()

{

	dfs(0),scanf("%d",&M);

	for (int i=1,x,y,z,w,k,s1,s2,s3,res; i<=M; i++)

	{

		scanf("%d",&w);

		if (w==1) scanf("%d",&x),a[x]=i,k=0,ins(k,rt[i-1],1,tot,L[x],1),ins(rt[i],k,1,tot,R[x],-1);

		else

		{

			scanf("%d%d%d%d",&x,&y,&k,&w),rt[i]=rt[i-1],z=lca(x,y),s1=get(z,x,w+1,i),s2=get(z,y,w+1,i),s3=x!=z&&y!=z&&a[z]<=w;

			if (k>s1+s2+s3) res=-1; else if (k<=s1) res=find(x,k,w+1,i); else res=find(y,s1+s2+s3-k+1,w+1,i);

			printf("%d\n",res);

		}

	}

}



int main()

{

	init();

	doit();

	return 0;

}