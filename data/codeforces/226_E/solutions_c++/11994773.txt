#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 100010;
const int MAXL = 20;

int st[MAXN], en[MAXN], h[MAXN], par[MAXN][MAXL];
int marked[MAXN];
vector<int> seg[4 * MAXN], edges[MAXN];
int vcnt;

void init(int v)
{
	st[v] = vcnt++;
	for (int i = 0; i < edges[v].size(); i++)
	{
		int u = edges[v][i];
		h[u] = h[v] + 1;
		init(u);
	}
	en[v] = vcnt;
}

int LCA(int u, int v)
{
	if (h[u] < h[v])
		swap(u, v);
	for (int i = MAXL - 1; i >= 0; i--)
		if (h[par[u][i]] >= h[v])
			u = par[u][i];
	if (u == v)
		return u;
	for (int i = MAXL - 1; i >= 0; i--)
		if (par[u][i] != par[v][i])
			u = par[u][i], v = par[v][i];
	return par[u][0];
}

void push(int v, int f, int e, int l, int r, int x)
{
	if (f >= r || l >= e)
		return;
	if (f >= l && e <= r)
	{
		seg[v].push_back(x);
		return;
	}
	int mid = (f + e) / 2;
	push(2 * v, f, mid, l, r, x);
	push(2 * v + 1, mid, e, l, r, x);
}

int get(int v, int f, int e, int x, int y)
{
	int ret = seg[v].end() - upper_bound(seg[v].begin(), seg[v].end(), y);
	if (e - f != 1)
	{
		int mid = (f + e) / 2;
		if (x < mid)
			ret += get(2 * v, f, mid, x, y);
		else
			ret += get(2 * v + 1, mid, e, x, y);
	}
	return ret;
}


int n;
int get_par(int a, int k, int y)
{
	k--;
	int cnt1 = get(1, 0, n, st[a], y);
	for (int i = MAXL - 1; i >= 0; i--)
		if (par[a][i] != 0)
		{
			int cnt2 = get(1, 0, n, st[par[a][i]], y);
			int x = (h[a] - h[par[a][i]]) - (cnt1 - cnt2);
			if (x <= k)
			{
				k -= x;
				a = par[a][i];
				cnt1 = cnt2;
			}
		}
	return par[a][0];
}
int main()
{
	cin >> n;
	int root = 0;
	for (int i = 1; i <= n; i++)
	{
		int p;
		cin >> p;
		if (p == 0)
			root = i;
		else
		{
			edges[p].push_back(i);
			par[i][0] = p;
		}
	}
	for (int i = 1; i < MAXL; i++)
		for (int j = 1; j <= n; j++)
			par[j][i] = par[par[j][i - 1]][i - 1];
	h[root] = 1;
	init(root);
	int m;
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		int t;
		cin >> t;
		if (t == 1)
		{
			int c;
			cin >> c;
			marked[c] = i + 1;
			push(1, 0, n, st[c] + 1, en[c], i + 1);
		}
		else
		{
			int a, b, k, y;
			cin >> a >> b >> k >> y;
			int c = LCA(a, b);
			int p = get(1, 0, n, st[c], y);
			int cnt1 = (h[a] - h[c]) - (get(1, 0, n, st[a], y) - p);
			int cnt2 = (h[b] - h[c]) - (get(1, 0, n, st[b], y) - p);
			if (marked[c] <= y)
				if (b != c)
					cnt2--;
				else
					cnt1--;
			if (cnt1 + cnt2 < k)
				cout << -1 << "\n";
			else if (cnt1 >= k)
				cout << get_par(a, k, y) << "\n";
			else
				cout << get_par(b, cnt2 + 1 - (k - cnt1), y) << "\n";
		}
	}
}
