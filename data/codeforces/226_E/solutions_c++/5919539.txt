#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int maxn=100010;
int p[maxn],h[maxn],n1[maxn],ee=0,Q,n;
int anc[maxn][17],d[maxn]={0},root;
struct que{
	int op,a,b,k,v;
}q[maxn];
int val[maxn];
void ae(int x,int y){
	p[ee]=y;	n1[ee]=h[x];	h[x]=ee++;
}

void dfs(int u){
	for(int i=h[u];~i;i=n1[i])	d[p[i]]=d[ u]+1,dfs(p[i]);
}

int lca(int x,int y){
	if(d[x]>d[y])	swap(x,y);
	int k=d[y]-d[x],j=0;
	while(k){
		if(k&1)	y=anc[y][j];
		k>>=1;
		j++;
	}
	if(x==y)	return x;
	for(int i=16;~i;i--)	if(anc[x][i]!=anc[y][i])	x=anc[x][i],y=anc[y][i];
	return anc[x][0];
}

const int maxt=5000000;
struct segnode{
	int l,r,sz;
}t[maxt];
int T[maxn]={0},TOT=0;

void modify(int &x,int p,int v,int l,int r){
	t[x=++TOT]=(segnode){t[p].l,t[p].r,t[p].sz+1};
	if(l==r)	return;
	int mid=(l+r)>>1;
	if(v<=mid)	modify(t[x].l,t[p].l,v,l,mid);
	else		modify(t[x].r,t[p].r,v,mid+1,r);
}

int ask(int x,int ql,int qr,int l,int r){
	if(ql<=l && r<=qr)	return t[x].sz;
	int mid=(l+r)>>1,ret=0;
	if(ql<=mid)	ret+=ask(t[x].l,ql,qr,l,mid);
	if(mid<qr)	ret+=ask(t[x].r,ql,qr,mid+1,r);
	return ret;
}

void dfs2(int u){
	for(int i=h[u];~i;i=n1[i]){
		modify(T[p[i]],T[u],val[p[i]],0,Q);
		dfs2(p[i]);
	}
}

int upk(int x,int k){
	int j=0;
	while(k){
		if(k&1)	x=anc[x][j];
		k>>=1;
		j++;
	}
	return x;
}

inline int trk(int x,int y,int lc,int k){
	if(k<=d[x]-d[lc])	return upk(x,k);
	else	return upk(y,d[x]+d[y]-2*d[lc]-k);
}

inline int query(int x,int y,int ql,int qr){
	int lc=lca(x,y);
	return ask(T[x],ql,qr,0,Q)+ask(T[y],ql,qr,0,Q)-2*ask(T[lc],ql,qr,0,Q)+(ql<=val[lc] && val[lc]<=qr);
}

int getans(int cur){
	int x=q[cur].a,y=q[cur].b,lc=lca(x,y),cc=d[x]+d[y]-2*d[lc]-1;
	if(cc-query(trk(x,y,lc,1),trk(x,y,lc,cc),q[cur].v+1,cur)<q[cur].k)	return -1;
	int l=1,r=cc,mid,u,c,x1=trk(x,y,lc,1);
	while(l<=r){
		mid=(l+r)>>1;
		u=trk(x,y,lc,mid);
		c=d[u]+d[x1]-d[lca(u,x1)]*2+1;
		if(c-query(x1,u,q[cur].v+1,cur) < q[cur].k)	l=mid+1;	else	r=mid-1;
	}
	return trk(x,y,lc,l);
}

int main(){
	
	scanf("%d",&n);
	memset(h,-1,sizeof(h));
	for(int i=1;i<=n;i++){
		scanf("%d",&anc[i][0]);
		if(!anc[i][0])	root=i;	else	ae(anc[i][0],i);
	}
	for(int j=1;j<=16;j++)
		for(int i=1;i<=n;i++)
			anc[i][j]=anc[anc[i][j-1]][j-1];
	dfs(root);
	scanf("%d",&Q);
	for(int i=1;i<=Q;i++){
		scanf("%d",&q[i].op);
		if(q[i].op==1)	scanf("%d",&q[i].a),val[q[i].a]=i;
		else	scanf("%d%d%d%d",&q[i].a,&q[i].b,&q[i].k,&q[i].v);
	}
	modify(T[root],0,val[root],0,Q);
	dfs2(root);
	for(int i=1;i<=Q;i++)	if(q[i].op==2)	printf("%d\n",getans(i));
	return 0;
}
