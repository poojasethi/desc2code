def truy_vet( ms ):
    global Trace
    x = n-1
    y = n-1
    sres = ''
    while (x > 0)or( y > 0 ):
        v = Trace[ms][x][y]
        if v < 0:
            sres = 'D' + sres
            x -= 1
        else:
            sres = 'R' + sres
            y -= 1
            
    print sres

def parse( x, y ):
    res = 0
    while x % y == 0:
        res += 1
        x /= y
        
    return res

def cal( hs, ms ):
    global n, A, Trace
    
    d = [ [0] * n for x in xrange(n) ]
    d[0][0] = parse( A[0][0], hs )
    trace = Trace[ms]
    for j in xrange(1, n):
        d[0][j] = d[0][j-1] + parse( A[0][j], hs )
        trace[0][j] = +1
    
    for i in xrange(1, n):
        d[i][0] = d[i-1][0] + parse( A[i][0], hs )
        trace[i][0] = -1
        for j in xrange(1, n):
            if d[i-1][j] < d[i][j-1]:
                d[i][j] = d[i-1][j]
                trace[i][j] = -1
            else:
                d[i][j] = d[i][j-1]
                trace[i][j] = +1
            d[i][j] += parse( A[i][j], hs )
    return d[n-1][n-1]

def Main():
    global n, A, Trace
    n = int( raw_input() )
    A = [ [ int(x) for x in raw_input().split() ] for i in xrange(n) ]
    Trace = [ [ [0] * n for i in xrange(n) ] for ms in xrange(2) ]
    
    zero = 60000
    zero_x = -1
    zero_y = -1
    for i in xrange(n):
        for j in xrange(n):
            if A[i][j] is 0:
                A[i][j] = 10
                zero = 1
                zero_x = i
                zero_y = j
                
    val2, val5 = cal(2, 0), cal(5, 1)
    if min( val2, val5 ) > zero:
        print 1
        sres = ''
        for i in xrange(zero_x): sres = sres + 'D'
        for i in xrange(zero_y): sres = sres + 'R'
        for i in xrange(n - zero_x - 1): sres = sres + 'D'
        for i in xrange(n - zero_y - 1): sres = sres + 'R'
        print sres
    else:
        print min( val2, val5)
        if val2 < val5: truy_vet( 0 )
        else: truy_vet( 1 )

Main()