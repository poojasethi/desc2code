import sys

DEBUG = False

########################################

def solve():
	''' Solution here '''

	# reading
	zero = None
	n = int( fin.readline().strip() )
	a2 = [[0] * n for i in xrange(0, n)]
	a5 = [[0] * n for i in xrange(0, n)]
	for i in xrange(0, n):

		# read row
		row = map( int, fin.readline().strip().split() )

		# check zero
		if (zero is None) and (0 in row):
			zero = ( i, row.index(0) )

		# prepare
		for j in xrange(0, n):

			pow2 = pow5 = 0
			value = row[j]

			while (value > 0) and (value % 64 == 0):
				pow2 += 6
				value /= 64

			while (value > 0) and (value % 16 == 0):
				pow2 += 4
				value /= 16

			while (value > 0) and (value % 2 == 0):
				pow2 += 1
				value /= 2

			while (value > 0) and (value % 15625 == 0):
				pow5 += 6
				value /= 15625

			while (value > 0) and (value % 625 == 0):
				pow5 += 4
				value /= 625

			while (value > 0) and (value % 5 == 0):
				pow5 += 1
				value /= 5

			a2[i][j] = pow2
			a5[i][j] = pow5

	# solve
	ans2 = dp(n, a2, 2)
	ans5 = dp(n, a5, 5)

	min_ = min(ans2[0], ans5[0])
	ans = ''

	if (min_ > 1) and (zero is not None):

		# zero path
		min_ = 1
		for i in xrange(0, zero[0]):
			ans += 'D'
		ans += 'R' * (n - 1)
		for i in xrange(zero[0] + 1, n):
			ans += 'D'

	else:

		# non-zero path
		path = None
		if ans2[0] < ans5[0]:
			path = ans2[1]
		else:
			path = ans5[1]

		i = j = n - 1
		while path[i][j] != ' ':
			ans = path[i][j] + ans
			if path[i][j] == 'R':
				j -= 1
			else:
				i -= 1

	fout.write( "%d\n" % min_ )
	fout.write( "%s\n" % ans )

def dp(n, a, dim):

	# dp init
	d = [[0] * n for i in xrange(0, n)]
	path = [[' '] * n for i in xrange(0, n)]

	d[0][0] = a[0][0]
	for j in xrange(1, n):
		d[0][j] = d[0][j-1] + a[0][j]
		path[0][j] = 'R'
	for i in xrange(1, n):
		d[i][0] = d[i-1][0] + a[i][0]
		path[i][0] = 'D'

	# dp
	for i in xrange(1, n):
		for j in xrange(1, n):
			if d[i-1][j] < d[i][j-1]:
				d[i][j] = d[i-1][j] + a[i][j]
				path[i][j] = 'D'
			else:
				d[i][j] = d[i][j-1] + a[i][j]
				path[i][j] = 'R'

	return (d[n-1][n-1], path)

########################################

def init():
	global fin, fout
	if DEBUG:
		fin  = open('input.txt', 'r')
	else:
		fin  = sys.stdin
	fout = sys.stdout

def quit():
	global fin, fout
	fin.close()
	fout.close()
	sys.exit(0)

if __name__ == '__main__':
	init()
	solve()
	quit()