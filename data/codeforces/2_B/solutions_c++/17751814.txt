#include <stdio.h>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
#define fab(i,a,b) for(int i=(a);i<=(b);++i)
#define N 1111
int n, a[2][N][N], f[2][N][N], g[2][N][N];
bool has0 = false;
int pos0, k, cs;
void trace(int x, int y)
{
	if (x + y == 2) return;
	if (g[cs][x][y] == 0) trace(x - 1, y); else trace(x, y - 1);
	putchar(g[cs][x][y] ? 'R' : 'D');
}

int main()
{
	scanf("%d", &n);
	fab(i,1,n)fab(j,1,n)
		{
			scanf("%d", &k);
			if (!k)
				has0 = true,
				pos0 = i,
				k = 1;
			while (k % 2 == 0) ++a[0][i][j], k /= 2;
			while (k % 5 == 0) ++a[1][i][j], k /= 5;
		}
	memset(f, 0x3F, sizeof f);
	f[0][0][1] = f[1][0][1] = 0;
	fab(i,1,n)fab(j,1,n)fab(k,0,1)
	{
		f[k][i][j] = a[k][i][j] + f[k][i - 1][j];
		g[k][i][j] = 0;
		if (f[k][i][j - 1] + a[k][i][j] < f[k][i][j])
			f[k][i][j] = a[k][i][j] + f[k][i][j - 1],
			g[k][i][j] = 1;
	}
	cs = f[0][n][n] < f[1][n][n] ? 0 : 1;
	if (has0 && f[cs][n][n] > 1) cs = 2;
	if (cs == 2)
	{
		puts("1");
		fab(i,2,pos0) putchar('D');
		fab(i,2,n) putchar('R');
		fab(i,pos0,n-1) putchar('D');
	} else
		printf("%d\n", f[cs][n][n]), trace(n, n), puts("");
	return 0;
}
