import unittest
from collections import defaultdict

class TestSolve(unittest.TestCase):

    def test_case_1(self):
        self.assertEqual(solve([10, 99]), (1, [1, 2]))

    def test_case_2(self):
        self.assertEqual(solve([13,24,13,45])[0], 4)

    def test_case_3(self):
        self.assertEqual(solve(map(int, "80 56 58 61 75 60 25 49 59 15 43 39 21 73 67 13 75 31 18 87 32 44 53 15 53 76 79 94 85 80 27 25 48 78 32 18 20 78 46 37".split()))[0],
                400)

    def test_case_4(self):
        res = solve(map(int, "49 13 81 20 73 62 19 49 65 95 32 84 24 96 51 57 53 83 40 44 26 65 78 80 92 87 87 95 56 46 22 44 69 80 41 61 97 92 58 53 42 78 53 19 47 36 25 77 65 81 14 61 38 99 27 58 67 37 67 80 77 51 32 43 31 48 19 79 31 91 46 97 91 71 27 63 22 84 73 73 89 44 34 84 70 23 45 31 56 73 83 38 68 45 99 33 83 86 87 80".split()))
        self.assertEqual(res[0], 1936)
        self.assertTrue(0 not in res[1])
        self.assertEqual(sum(1 for x in res[1] if x == 1),
                         sum(1 for x in res[1] if x == 2))




def solve(xs):
    solution = [0] * len(xs)
    pos = defaultdict(list)
    heaps = [set(), set(), set()]
    heap_len = {1: 0, 2: 0}

    for i, x in enumerate(xs):
        pos[x].append(i)

    for x, positions in pos.iteritems():
        if len(positions) >= 2:
            heaps[1].add(x)
            heaps[2].add(x)
            solution[positions.pop()] = 1
            solution[positions.pop()] = 2
            heap_len[1] += 1
            heap_len[2] += 1

    for x, positions in pos.iteritems():
        if len(positions) == 1 and x not in heaps[1]:
            heap = min(1, 2, key=heap_len.get)
            heaps[heap].add(x)
            heap_len[heap] += 1
            solution[positions.pop()] = heap

    for x, positions in pos.iteritems():
        for p in positions:
            heap = min(1, 2, key=heap_len.get)
            heaps[heap].add(x)
            heap_len[heap] += 1
            solution[p] = heap

    max_n = len(heaps[1]) * len(heaps[2])

    return max_n, solution

if __name__ == '__main__':
    #unittest.main()

    raw_input()
    s = solve(map(int, raw_input().split()))
    print s[0]
    print ' '.join(map(str, s[1]))

