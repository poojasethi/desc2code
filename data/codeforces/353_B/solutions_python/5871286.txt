'''
Time Started :
Sun Feb  2 18:11:04 PST 2014
Time Ended :

'''
def get_res(n, cubes):
    cube_map = {}
    count_multiple = 0
    for i, cube in enumerate(cubes):
        if cube not in cube_map:
            cube_map[cube] = []
        cube_map[cube].append(i)
        if len(cube_map[cube]) == 2:
            count_multiple += 1

    count_unique = len(cube_map) - count_multiple
    common = ((count_unique) / 2) + (count_multiple)
    max_possible = (common + (count_unique % 2)) * common

    print max_possible

    current = 1
    res = [0] * (2*n)

    for cube in cube_map:
        if len(cube_map[cube]) == 1:
            res[cube_map[cube][0]] = current
            current = 2 if current == 1 else 1

    for cube in cube_map:
        if len(cube_map[cube]) >= 2:
            for pos in cube_map[cube]:
                res[pos] = current
                current = 2 if current == 1 else 1

    print ' '.join(map(str,res))

nums = map(int, raw_input('').split())
nums = map(int, raw_input('').split())
get_res(len(nums) / 2, nums)


    
