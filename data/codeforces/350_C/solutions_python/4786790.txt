import math
import sys
def distance(p1):
    delta_x  = abs(p1[0])
    delta_y  = abs(p1[1])
    return math.sqrt(delta_x ** 2 + delta_y ** 2)

def operations(bombs):

    sorted_points = list(bombs)
    sorted_points.sort(key=lambda x: distance(x))

    for point in sorted_points:
        # Go right or left
        if point[0] != 0:
            # Right
            if point[0] > 0:
                sys.stdout.write("1 " + str(point[0]) + " R" + "\n")
            else:
                sys.stdout.write("1 " + str(abs(point[0])) + " L"+ "\n")

        # Go up or down
        if point[1] != 0:
            # Right
            if point[1] > 0:
                sys.stdout.write("1 " + str(abs(point[1])) + " U"+ "\n")
            else:
                sys.stdout.write("1 " + str(abs(point[1])) + " D"+ "\n")

        # pick the bom
        sys.stdout.write("2"+ "\n")

        # Go to the origin
        # Go right or left
        if point[0] != 0:
            # Right
            if point[0] < 0:
                sys.stdout.write("1 " + str(abs(point[0])) + " R"+ "\n")
            else:
                sys.stdout.write("1 " + str(abs(point[0])) + " L"+ "\n")

        # Go up or down
        if point[1] != 0:
            # Right
            if point[1] < 0:
                sys.stdout.write("1 " + str(abs(point[1])) + " U"+ "\n")
            else:
                sys.stdout.write("1 " + str(abs(point[1])) + " D"+ "\n")

        # Pick the bomb
        sys.stdout.write("3"+ "\n")
        

    return True

            

def main():
    num_bombs = int(input())
    cords = []
    minuses = 0
    
    for i in range(num_bombs):
            temp = raw_input().split()
            cord = (int(temp[0]),int(temp[1]))
            cords.append(cord)
            if int(temp[0]) == 0:
                minuses += 2
            if int(temp[1]) == 0:
                minuses += 2

    # number of operations
    sys.stdout.write(str(num_bombs * 6 - minuses)+ "\n")
    operations(cords)



    
    
    
main()
