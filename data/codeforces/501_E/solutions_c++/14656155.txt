#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <iomanip>
#define FOR(i, to, from) for (int i=to; i<from; i++)
#define ri(n) scanf("%d", &n)
#define ms(obj, value) memset(obj, value, sizeof(obj))
#define rii(n, m) scanf("%d%d", &n, &m)
#define pb push_back
using namespace std;
typedef long long ll;
typedef vector<int> vi;

const int MAXN=100000;
int a[MAXN];
int c[MAXN]={};
int cL[MAXN]={};
int cR[MAXN]={};
int N;
bool isPossible(int a[], int n, int pos){
	FOR(i, pos+1, n/2) if(a[i]!=a[n-i-1]) return false;
	ms(cL, 0); ms(cR, 0);
	FOR(i, 0, pos+1) cL[a[i]]++;
	FOR(i, max(pos+1, n-pos-1), n) cR[a[i]]++;
	FOR(i, 1, N+1) if(cL[i]<cR[i]) return false;
	return true;
}
int bs(int a[], int n){
	int l=0, h=n-1, med;
	while(l<h){
		med=(l+h)/2;
		if(isPossible(a, n, med)) h=med;
		else l=med+1;
	}
	return h;
}
ll cant(int a[], int n, ll k){
	int minR, minL;
	minR=bs(a, n);
	FOR(i, 0, n/2) swap(a[i], a[n-i-1]);
	minL=bs(a, n);	
	ll res=k*k; 
	res+=((k+1)*(2*n-minR-minL)-1);
	return res;
}

int main(){
	ri(N);
	FOR(i, 0, N) ri(a[i]);
	int k=0;
	for(int i=0; i<N; i++) c[a[i]]++;
	bool imp=!(N%2);
	FOR(i, 0, N) if(c[i]%2){
		if (imp){
			printf("0\n");
			return 0;
		}
		else imp=true;
	}
	for(; k<N && a[k]==a[N-k-1]; k++);
	if(k==N){
		printf("%I64d\n", (ll) N*(N+1)/2);
		return 0;
	}
	ll res=cant(a+k, N-2*k, k);
	printf("%I64d\n", res);
}
