#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;
typedef long long LL;
vector<int> g[100005];
int a[100005];

int main()
{
    int n;
    cin >> n;
    for(int i = 1; i <= n; ++i) {
        cin >> a[i];
        g[a[i]].push_back(i);
    }
    bool flag = true;
    for(int i = 1, j = n; i < j; i++, j--) {
        if(a[i] != a[j]) {
            flag = false;
            break;
        }
    }
    if(flag) {
        cout << (LL)n * (n + 1) / 2 << endl;
        return 0;
    }
    int cou = 0;
    for(int i = 1; i <= n; ++i) {
        if(g[i].size() & 1) cou++;
    }
    if(cou >= 2) {
        cout << 0 << endl;
        return 0;
    }
    int m = 0;
    for(int i = 1; i <= n / 2; ++i) {
        if(a[i] == a[n - i + 1]) {
            m++;
        } else {
            break;
        }
    }
    int x = 0, y = n + 1;
    for(int i = 1; i <= n; ++i) if(g[i].size()) {
        int L, R;
        if(g[i].size() & 1) R = L = g[i].size() / 2;
        else {
            L = g[i].size()/ 2 - 1; R = L + 1;
        }
        while(L >= 0 && g[i][L] + g[i][R] == n + 1) L--, R++;
        if(L < 0) continue;
        x = max(x, g[i][L]);
        y = min(y, g[i][R]);
    }
    m = n - 2 * m;
    int r = x - (n - m) / 2, l = m + (n - m) / 2 - y + 1;
    cout << (LL)((n - m) / 2 + 1) * ((n - m) / 2 + 1 + 2 * m - r - l) << endl;
    return 0;
}

 				   	   		 			    	 	  		 	