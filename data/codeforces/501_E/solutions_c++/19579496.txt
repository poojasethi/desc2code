#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <deque>
using namespace std;
const int MAXN = 1e5+10;
int n;
int a[MAXN];
int has[MAXN],hasout[MAXN];
deque<int>Q;
inline bool in(int p,int l,int r){
	if(l<=p&&p<=r) return true;
	else return false;
}
bool judge(int l,int r){
	for(int i=1;i<=n;i++) hasout[i] = 0;
	for(int i=l;i<=r;i++) hasout[a[i]]++;
	for(int i=1;i<=n;i++){
		if(!in(i,l,r) && !in(n+1-i,l,r)) {
			if(a[i]!=a[n+1-i]) return false;
		}
		if(!in(i,l,r) && in(n-i+1,l,r)) hasout[a[i]]--;
	}
	for(int i=1;i<=n;i++) if(hasout[a[i]]<0) return false;
	return true;

}
int main(){
	long long ans = 0;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%d",a+i);
		has[a[i]]++;
	}

	int du = 0,flag=1;
	for(int i=1;i<=n;i++) {
		if(a[i]!=a[n-i+1]) flag=0;
		du += (has[i]&1);
	}
	if(du>1) {
		puts("0");
		return 0;
	}
	if(flag){
		cout<<(long long)n*(n+1)/2<<endl;
		return 0;
	}

	du = 1;
	while(a[du]==a[n+1-du])++du;
	int l=du,r=n,mid=0,res;
	while(l<=r) {
		mid = (l+r)>>1;
		if(judge(du,mid)) {
			r=mid-1;
			res = mid;
		}
		else l =mid+1;
	}
	ans=(long long) du*(n-res+1);
	//cout<<"ans = "<<ans<<endl;
	reverse(a+1,a+n+1);
	l=du;r=n;
	//int res;
	while(l<=r) {
	   mid = (l+r)>>1;
	   if(judge(du,mid)){
	 		r=mid-1;
	 		res = mid;
	   }
	   else l=mid+1;
	}
	//cout<<du<<" "<<mid<<endl;
	ans+=(long long) du*(n-du-res+1);
	cout<<ans<<endl;
	return 0;
}
 	  	  	 			   	 	   	    	  		