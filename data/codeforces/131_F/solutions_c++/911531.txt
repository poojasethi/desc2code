#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<algorithm>
using namespace std;

int n, m, k;
bool p[501][501];
char buffer[505];
int f[501][501], s[501][501], st[501];
inline int get_sum(int x1, int y1, int x2, int y2)
{
	return s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1];
}

int main()
{
	scanf("%d %d %d\n", &n, &m, &k);
	for(int i = 0; i < n; ++i)
	{
		gets(buffer);
		for(int j = 0; j < m; ++j)
			if(buffer[j] == '1') p[i][j] = 1;
	}
	for(int i = 1; i < n - 1; ++i)
		for(int j = 1; j < m - 1; ++j)
			if(p[i][j] && p[i - 1][j] && p[i][j - 1] && p[i + 1][j] && p[i][j + 1])
				f[i][j] = 1;
	for(int i = 1; i < n - 1; ++i)
		for(int j = 1; j < m - 1; ++j)
		{
			st[j] = st[j - 1] + f[i][j];
			s[i][j] = s[i - 1][j] + st[j];
		}
	long long ans = 0;
	for(int i = 1; i < n - 1; ++i)
		for(int j = i; j < n - 1; ++j)
		{
			int r = 0;
			for(int l = 1; l < m - 1; ++l)
			{
				r = max(l, r);
				while(r < m - 1 && get_sum(i, l, j, r) < k)
					r++;
				if(r == m - 1) break;
				ans += (long long)(m - r - 1);
			}
		}
	cout << ans;
	return 0;
}

