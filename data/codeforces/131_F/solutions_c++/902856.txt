#include <iostream>
#include <vector>
using namespace std;


int ix[5] = { 0, 1, 1, 1, 2 };
int iy[5] = { 1, 0, 1, 2, 1 };


typedef long long ll;
typedef vector<int> VE;
typedef vector<VE> VVE;


int n, m, k;
VVE M, A;


inline int ok(int i, int j) {
  for (int a = 0; a < 5; ++a)
    if (not M[i-ix[a]][j-iy[a]]) return false;
  return true;
}



ll f() {
  if (n < 3 or m < 3) return 0;

  A = VVE(n, VE(m, 0));
  for (int i = 2; i < n; ++i)
    for (int j = 2; j < m; ++j)
      A[i][j] = A[i-1][j] + A[i][j-1] - A[i-1][j-1] + ok(i, j);

  ll res = 0;
  for (int i = 2; i < n; ++i)
    for (int j = 2; j < m; ++j) {
      int x = i - 1;
      int y = 1;
      while (x >= 1 and y < j) {
        if (A[i][j] - A[x][j] - A[i][y] + A[x][y] >= k) {
          res += x;
          ++y;
        }
        else --x;
      }
    }
  return res;
}


int main() {
  cin >> n >> m >> k;
  M = VVE(n, VE(m));
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j) {
      char c;
      cin >> c;
      M[i][j] = c - '0';
    }

  cout << f() << endl;
}
