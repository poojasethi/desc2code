#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;

#define REP(i,n) for(int (i)=0,_n=(n);(i)<_n;(i)++)
#define FOR(i,a,b) for(int (i)=(a),_n=(b);(i)<=_n;(i)++)
#define FORD(i,a,b) for(int (i)=(a),_n=(b);(i)>=_n;(i)--)
#define FOREACH(it,arr) for (__typeof((arr).begin()) it=(arr).begin(); it!=(arr).end(); it++)

char s[505][505];
int  p[505][505] = {0};

int f(int i, int j, int r, int c) {
	return p[i][j] - p[r+1][j] - p[i][c+1] + p[r+1][c+1];
}

int main()
{
	int n, m, k;
	scanf( "%d %d %d", &n, &m, &k );
	FOR(i,1,n) scanf( "%s", s[i]+1 );
	
	FOR(i,1,n) FOR(j,1,m)
		if ( s[i][j] == '1' && s[i][j-1] == '1' && s[i][j+1] == '1' && s[i-1][j] == '1' && s[i+1][j] == '1' )
			p[i+1][j+1] = 1;
	FOR(i,1,n) FOR(j,1,m) p[i][j] += p[i][j-1] + p[i-1][j] - p[i-1][j-1];
	
	long long ans = 0;

	FOR(i,1,n) FOR(j,1,m) if ( p[i][j] >= k ) {
		FOR(r,1,i-2) {
			int L = 1, R = j-2, c = 0;
			while ( L <= R ) {
				int mid = (L + R) >> 1;
				if ( f(i,j,r,mid) >= k ) c = mid, L = mid + 1;
				else R = mid - 1;
			}
			ans += c;
		}
	}

	cout << ans << endl;
	return 0;
}
