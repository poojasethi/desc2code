# tested by Hightail - https://github.com/dj3500/hightail
from __future__ import print_function


read, read_array = raw_input, lambda: raw_input().split()
read_int, read_int_array = lambda: int(read()), lambda: [int(p) for p in read().split()]
read_float, read_float_array = lambda: float(read()), lambda: [float(p) for p in read().split()]
write, write_array = lambda *args, **kw: print(*args, **kw), lambda arr, **kw: print(*arr, **kw)


def rotate(im):
    m = len(im)
    n = len(im[0])
    im1 = [['.'] * m for _ in xrange(n)]
    for i in xrange(m):
        for j, c in enumerate(im[i]):
            if c == '*':
                im1[j][m - i - 1] = '*'

    return im1


def reflect(im):
    m = len(im)
    n = len(im[0])
    for i in xrange(m):
        for j in xrange(n / 2):
            im[i][j], im[i][n - j - 1] = im[i][n - j - 1], im[i][j]
    return im


def scale(im):
    m = len(im)
    n = len(im[0])
    im1 = [[] for _ in xrange(2 * m)]
    data = {
        '.': '..',
        '*': '**',
    }
    for i in xrange(m):
        for j in xrange(n):
            im1[2 * i].append(data[im[i][j]])
            im1[2 * i + 1].append(data[im[i][j]])
    return im1


intern('.')
intern('..')
intern('*')
intern('**')

w, h = read_int_array()
image = []
for _ in xrange(h):
    image.append(list(read()))
image = rotate(image)
image = reflect(image)
image = scale(image)
for ii in xrange(2 * w):
    write_array(image[ii], sep='')
