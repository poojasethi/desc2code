from collections import deque
import sys

n = input()
tree = {}
inp = sys.stdin.read(100000000).split('\n')
for i in xrange(len(inp)-1):
    fr, to = map(int, inp[i].split())
    tree[fr] = tree.get(fr, {})
    tree[to] = tree.get(to, {})
    tree[fr][to] = 1
    tree[to][fr] = -1
# Find for the 1st node
visited = {}
cost = 0
toVisit = deque()
toVisit.append(1)
while len(toVisit) > 0:
    node = toVisit.pop()
    visited[node] = 0
    for neighbor in tree[node]:
        if neighbor not in visited:
            cost = cost+1 if tree[node][neighbor] == -1 else cost
            toVisit.append(neighbor)
minCost, memoize = {}, {}
memoize[1] = cost
minC = cost
minCost[minC] = []
minCost[minC].append(1)
toVisit = deque()
toVisit.append(1)
while len(toVisit) > 0:
    node = toVisit.pop()
    for neighbor in tree[node]:
        if neighbor not in memoize:
            memoize[neighbor] = memoize[node]+tree[node][neighbor]
            if memoize[neighbor] <= minC:
                minC = memoize[neighbor]
                minCost[minC] = minCost.get(minC, [])
                minCost[minC].append(neighbor)
            toVisit.append(neighbor)
print minC
print " ".join([str(x) for x in sorted(minCost[minC])])
