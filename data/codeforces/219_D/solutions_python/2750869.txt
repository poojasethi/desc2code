import sys

n, tree, inp = input(), {}, sys.stdin.read(100000000).split('\n')
for i in xrange(len(inp)-1):
  fr, to = map(int, inp[i].split())
  tree[fr] = tree.get(fr, {})
  tree[to] = tree.get(to, {})
  tree[fr][to] = 1
  tree[to][fr] = -1

visited, cost, toVisit = {}, 0, [1]
while toVisit:
  node = toVisit.pop()
  visited[node] = 0
  for neighbor in tree[node]:
    if neighbor not in visited:
      cost += int(tree[node][neighbor] == -1)
      toVisit.append(neighbor)

memoize, minCost, minVal, toVisit = {1:cost}, {cost:[1]}, cost, [1]
while toVisit:
  node = toVisit.pop()
  for neighbor in tree[node]:
    if neighbor not in memoize:
      memoize[neighbor] = memoize[node]+tree[node][neighbor]
      toVisit.append(neighbor)
      if memoize[neighbor] <= minVal:
	minVal = memoize[neighbor]
	minCost[minVal] = minCost.get(minVal, [])
	minCost[minVal].append(neighbor)

print minVal
print " ".join([str(x) for x in sorted(minCost[minVal])])