n = int(raw_input())
edge = [[] for i in range(n+1)]
edger = [[] for i in range(n+1)]
for i in xrange(0,n-1):
    a,b = map(int,raw_input().split())
    #print a,b
    #print edge
    edge[a].append(b)
    edger[b].append(a)

dp1 = [0]*(n+1)
dp2 = [0]*(n+1)
marked = {}

def dfs():
    #global dp1, dp2
    global dp1, marked
    stack = []
    total = 0
    stack.append((1,0,0))
    while len(stack):
        now, depth, inv_count = stack[-1]
        if now not in marked:
            dp1[now] = (depth, inv_count)
            marked[now] = True
        pop_flag = True        
        while len(edge[now]):
            i = edge[now].pop()
            if i not in marked:
               stack.append((i,depth+1,inv_count))
               pop_flag = False
               break
        if pop_flag:
            while len(edger[now]):
                i = edger[now].pop()
                if i not in marked:
                    stack.append((i,depth+1,inv_count+1))
                    pop_flag = False
                    total+=1
                    break                    
        if pop_flag:
            stack.pop()
    #dp2[now] = tmp
    return total
    
total = dfs()
#print total
#print dp1
ans = n
ansi = []
for i in xrange(1, n+1):
    if ans > total+dp1[i][0]-2*dp1[i][1]:
        ans = total+dp1[i][0]-2*dp1[i][1]
        ansi = [i]
    elif ans == total+dp1[i][0]-2*dp1[i][1]:
        ansi.append(i)
print ans
ansi.sort()
print ' '.join(map(str,ansi))