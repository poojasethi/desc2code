def main():
    n = int(raw_input())
    data = {}

    for i in xrange(n - 1):
        _from, _to = map(int, raw_input().split())
        _from, _to = _from - 1, _to - 1
        data[_from] = data.get(_from, {})
        data[_to] = data.get(_to, {})
        data[_from][_to] = 1
        data[_to][_from] = -1

    estimates = {}
    # calculate estimate for first node
    val = 0
    seen = set()
    queue = [0]

    while queue:
        _index = queue.pop()
        seen.add(_index)

        for neighbor in data[_index]:
            if neighbor not in seen:
                val += int(data[_index][neighbor] == -1)
                queue.append(neighbor)

    # calculate for the rest
    estimates[0] = val
    seen = set()
    queue = [0]

    while queue:
        _index = queue.pop()
        seen.add(_index)

        for neighbor in data[_index]:
            if neighbor not in seen:
                estimates[neighbor] = estimates[_index] + data[_index][neighbor]
                queue.append(neighbor)

    val = min(estimates.itervalues())
    print val
    print ' '.join([str(k + 1) for k, v in estimates.iteritems() if v == val])


if __name__ == '__main__':
    main()
