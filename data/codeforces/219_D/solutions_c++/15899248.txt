#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

const int MAX_N = 200 * 1000 + 10;
vector <pair <int, int> > graph[MAX_N];
bool mark[MAX_N];
int num[MAX_N], dir1;

void DFS(int v)
{
	mark[v] = true;
	for (int i = 0; i < graph[v].size(); i++)
	{
		int u = graph[v][i].first;
		if (!mark[u])
		{
			num[u] += num[v] + graph[v][i].second;
			if (graph[v][i].second == -1)
				dir1++;
			DFS(u);
		}
	}
}

int main()
{
	int n;
	cin >> n;
	for (int i = 1; i < n; i++)
	{
		int a, b;
		cin >> a >> b;
		a--;
		b--;
		graph[a].push_back(make_pair(b, 1));
		graph[b].push_back(make_pair(a, -1));
	}
	DFS(0);
	int ans = INT_MAX;
	for (int i = 0; i < n; i++)
		ans = min(ans, num[i]);
	cout << ans + dir1 << endl;
	for (int i = 0; i < n; i++)
		if (num[i] == ans)
			cout << i + 1 << " ";
	cout << endl;
	return 0;
}