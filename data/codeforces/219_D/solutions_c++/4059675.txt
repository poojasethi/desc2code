#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;

const int N = 200 * 1000 + 1;
int n, f[N], b[N], v[N], tf, tb, cost[N];//distance, forward, backward, visited, total b, 
vector<int> adj[N];

void dfs(int u) {
	v[u] = 1;
	for (int i = 0; i < adj[u].size(); ++i) {
		int s = adj[u][i] > 0? 1: -1, w = s * adj[u][i];
		if (!v[w]) {
			tf += (1 + s) / 2;
			tb += (1 - s) / 2;
			f[w] = f[u] + (1 + s) / 2;
			b[w] = b[u] + (1 - s) / 2;
			dfs(w);
		}
	}
}

int main() {
	scanf("%d", &n);
	for (int i = 0, u, v; i < n - 1; ++i) {
		scanf("%d%d", &u, &v);
		adj[u].push_back(v);
		adj[v].push_back(-u);
	}
	dfs(1);
	for (int u = 1; u <= n; ++u)
		cost[u] = tb - b[u] + f[u];
	int m = *min_element(cost + 1, cost + n + 1);
	printf("%d\n", m);
	for (int u = 1; u <= n; ++u)
		if (cost[u] == m)
			printf("%d ", u);
	printf("\n");
	return 0;
}
