#include <vector>
#include <iostream>
using namespace std;
const int max_v = 2e5 + 25;
int V, x, y, ret = 0x3f3f3f3f, all, red[max_v], d[max_v];
vector<pair<int, int> > adj[max_v];
void dfs(int curr = 0, int prev = -1){
  for (vector<pair<int, int> >::iterator it = adj[curr].begin(); it != adj[curr].end(); it++)
    if (it->first != prev){
      all += it->second;
      d[it->first] = d[curr] + 1;
      red[it->first] = red[curr] + it->second;
      dfs(it->first, curr);
    }
}
int main(){
  cin >> V;
  for (int i = 1; i < V; i++){
    cin >> x >> y;
    adj[--x].push_back(make_pair(--y, 0));
    adj[y].push_back(make_pair(x, 1));
  }
  dfs();
  for (int i = 0; i < V; i++) ret = min(ret, all - 2 * red[i] + d[i]);
  cout << ret << endl;
  for (int i = 0; i < V; i++) if (all - 2 * red[i] + d[i] == ret) cout << i + 1 << " ";
  return 0;
}
