#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 2e5 + 5;

typedef pair<int,bool> pib;

int N, P[MAX], dep[MAX], val[MAX], s0, lo;
vector<pib> neigh[MAX];

void dfs (int a){
    lo = min (lo, val[a]); 
    for(int i=0; i<neigh[a].size(); i++){
	int cn = neigh[a][i].first;
	if (cn == P[a]) continue;
	
	dep[cn] = dep[a] + 1;
	P[cn] = a;
	if (neigh[a][i].second){
	    val[cn] = val[a] + 1;
	}else{
	    val[cn] = val[a] - 1;
	    s0 ++;
	}
	dfs (cn);
    }
}

int main(){
    cin >> N;
    for(int i=0; i<N-1; i++){
	int a,b; cin >> a >> b; a--; b--;
	neigh[a].push_back (pib (b,1));
	neigh[b].push_back (pib (a,0));
    }
    P[0] = -1;
    val[0] = 0;
    s0 = 0;
    lo = 1e9;
    dfs (0);
    cout << lo + s0 << endl;
    for(int i=0; i<N; i++){
	if (lo == val[i]){
	    cout << i + 1 << " ";
	}
    }
    cout << endl;
}
