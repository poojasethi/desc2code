# include <stdio.h>
# include <string.h>


int a[30], INF = 0x0fffffff ;
int dp[(1<<23)+10] ;


int min(int a, int b){return a<b?a:b;}
int max(int a, int b){return a>b?a:b;}
int count1(int x){return !x?0:((x&1)+count1(x/2));}

int dfs (int mask, int n)
{
	if (n == 0) return dp[mask] = 1 ;
	if (dp[mask] != 0) return dp[mask] ;
	int i, j, ans = INF ;
	for (i = 0 ;i < n ; i++)
		for (j = i ; j < n ;j++)
		{
			if (a[i] + a[j] == a[n]){
				ans = min(ans, dfs ((mask & ~(1<<n))|(1<<i)|(1<<j)|(1<<(n-1)),n-1)) ;
			}
		}
	return dp[mask] = max(ans, count1(mask)) ;
}


int main ()
{
	int i, n ;
	while (~scanf ("%d", &n))
	{
		for (i = 0 ; i< n ;i++)
			scanf ("%d", &a[i]) ;
		memset (dp, 0, sizeof(dp)) ;
		printf ("%d\n", (dfs(1<<(n-1), n-1)==INF)?-1:dp[1<<(n-1)]) ;
	}
	return 0 ;
}
