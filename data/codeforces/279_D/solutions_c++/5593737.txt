#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAX_N = (1 << 24) - 1;
const int INF = 0x3f3f3f3f;

int n, a[25];
int dp[MAX_N];

int dfs(int seed, int cnt) {
    if (dp[seed]) return dp[seed];
    int ret = INF;
    for (int i = 0; i < cnt; ++i) {
        for (int j = 0; j <= i; ++j) {
            if (a[i] + a[j] == a[cnt]) {
                int t = (seed | (1 << i) | (1 << j) | (1 << (cnt - 1))) - (1 << cnt);
                ret = min(ret, max(dfs(t, cnt - 1),  __builtin_popcount(seed)));
            }
        }
    }
    return dp[seed] = ret;
}

void solve() {
    dp[1] = 1;
    int ret = dfs(1 << (n - 1), n - 1);
    if (ret == INF) puts("-1");
    else printf("%d\n", ret);
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", a + i);
    }
    solve();
    return 0;
}

 			 		 						 		   		    	