#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
struct ss{
    int s,t,c,d;
}p[1010];
int n,k,_s,s,t,size=32767,vt,ans[1010],v[4000010],w[4000010],z[4000010],in[10000],next[4000010],head[10000],path[10000],q[400010],l,r,dis[10010];
void add(int u1,int v1,int w1,int z1){
    v[++vt]=v1;w[vt]=w1;z[vt]=z1;next[vt]=head[u1];head[u1]=vt;
    v[++vt]=u1;w[vt]=0;z[vt]=-z1;next[vt]=head[v1];head[v1]=vt;
}
bool spfa(){
    memset(dis,63,sizeof(dis));
    l=r=0;
    q[r]=_s;
    dis[_s]=0;
    while(l!=((r+1)&size)){
        int x=q[l];l=(l+1)&size;
        for(int i=head[x];i;i=next[i])
            if(w[i]&&dis[x]+z[i]<dis[v[i]]){
                dis[v[i]]=dis[x]+z[i];
                path[v[i]]=i;
                if(!in[v[i]]){
                    in[v[i]]=1;
                //  if(dis[v[i]]<dis[q[l]]){
                    //  l=(l-1)&size;
                //      q[l]=v[i];
                //  }else{
                        r=(r+1)&size;
                        q[r]=v[i];
                //  }
                }
            }
        in[x]=0;
    }
    return dis[t]<dis[0];
}
bool cmp(ss a,ss b){
    return a.s<b.s;
}
int main(){
    scanf("%d%d",&n,&k);
    _s=n+n+1;s=_s+1;t=s+1;vt=1;
    add(_s,s,k,0);
    for(int i=1;i<=n;++i){
        scanf("%d%d%d",&p[i].s,&p[i].t,&p[i].c);
        p[i].t+=p[i].s-1;p[i].d=i;
    }
    sort(p+1,p+n+1,cmp);
    for(int i=1;i<=n;++i){
        add(s,i,1,0);
        add(i,i+n,1,-p[i].c);
        add(i+n,t,1,0);
    }
    for(int i=1;i<=n;++i){
        if(i!=n)add(i,i+1,10000,0);
        for(int j=i+1;j<=n;++j)
            if(p[i].t<p[j].s){
                add(i+n,j,10000,0);break;
            }
    }
    while(spfa())
        for(int p=t;p!=_s;p=v[path[p]^1]){
            --w[path[p]];++w[path[p]^1];
        }
        
    for(int i=1;i<=n;++i){
        int flag=0;
        for(int j=head[i];j;j=next[j])
            if(v[j]==i+n){
                if(!w[j])flag=1;
                break;
            }
        ans[p[i].d]=flag;
    }
    for(int i=1;i<=n;++i)printf("%d ",ans[i]);
    return 0;
}
