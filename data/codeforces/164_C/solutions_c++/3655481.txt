#include <cstdio>
#include <cstdlib>
#include <vector>

using namespace std;
vector<int> edge[3006];
vector<int> rev[3006];
vector<int> fmax[3006];
vector<long long> cst[3006];
int queue[2000008];
int n,k,V;
long long INF=2000000001;
long long best[3006];
int bfrom[3006];
void add_edge(int fr,int to,int fvl,int vl) {
	edge[fr].push_back(to);
	rev[fr].push_back(cst[to].size());
	edge[to].push_back(fr);
	rev[to].push_back(cst[fr].size());
	cst[fr].push_back(vl);
	cst[to].push_back(-vl);
	fmax[fr].push_back(fvl);
	fmax[to].push_back(0);
}
int min_cost_flow(int st,int gl,int fv) {
	int sol=0;
	for(int flows=0;flows<fv;flows++) {
		int qst=0,qls=1;
		for(int i=0;i<V;i++) best[i]=INF;
		best[st]=0;
		queue[0]=st;
		while(qst<qls) {
			int fr=queue[qst];
			for(int i=0;i<edge[fr].size();i++) {
				int to=edge[fr][i];
				if(fmax[fr][i]>0) {
					if(best[to]>best[fr]+cst[fr][i]) {
						best[to]=best[fr]+cst[fr][i];
						bfrom[to]=rev[fr][i];
						queue[qls]=to;
						qls++;
					}
				}
			}
			qst++;
		}
		if(best[gl]==INF) return -1;
		sol+=best[gl];
		int now=gl;
		while(now!=st) {
			fmax[now][bfrom[now]]++;
			fmax[edge[now][bfrom[now]]][rev[now][bfrom[now]]]--;
			now=edge[now][bfrom[now]];
		}
	}
	return sol;
}
int tasks[1002];
int taskt[1002];
int taskc[1002];
int nodes[2008];
int comp(const void *ka,const void *kb) {
	int a=*(int *)ka;
	int b=*(int *)kb;
	return a-b;
}
int nk;
int taskedge[1002];
int main() {
	INF*=INF;
	scanf("%d%d",&n,&k);
	for(int i=0;i<n;i++) {
		scanf("%d%d%d",&tasks[i],&taskt[i],&taskc[i]);
		taskt[i]+=tasks[i];
		nodes[i+i]=tasks[i];
		nodes[i+i+1]=taskt[i];
	}
	qsort(nodes,n+n,sizeof(int),comp);
	for(int i=1;i<n+n;i++) {
		if(nodes[nk]!=nodes[i]) {
			nk++;
			nodes[nk]=nodes[i];
		}
	}
	nk++;
	V=nk+2;
	for(int i=0;i<V-1;i++) add_edge(i,i+1,99,1000000);
	for(int i=0;i<n;i++) {
		int s1,s2;
		for(int j=0;j<nk;j++) {
			if(tasks[i]==nodes[j]) s1=j+1;
			if(taskt[i]==nodes[j]) s2=j+1;
		}
		add_edge(s1,s2,1,(s2-s1)*1000000-taskc[i]);
		tasks[i]=s1;
		taskedge[i]=(edge[s1].size())-1;
	}
	min_cost_flow(0,V-1,k);
	for(int i=0;i<n;i++) {
		printf("%d",1-fmax[tasks[i]][taskedge[i]]);
		if(i==n-1) {
			printf("\n");
		} else {
			printf(" ");
		}
	}
	return 0;
}
