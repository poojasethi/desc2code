//By Lin
#include<cstdio>
#include<cstring>
#include<map>
#include<queue>
#include<algorithm>

#define maxn 2005
using namespace std; 

int		t[maxn],cnt,d[maxn],from[maxn][2],n,k;
int		data[maxn][3],ans[maxn];
bool	in_que[maxn]; 

struct	Edge{
	int to,w,c,num; 
	Edge *next; 
}*mat[maxn], edges[maxn*50]; 

void	link(int x,int to ,int w ,int c )
{
	edges[cnt].to = to; 
	edges[cnt].w  = w; 
	edges[cnt].c  = c;
	edges[cnt].num= cnt; 
	edges[cnt].next = mat[x]; 
	mat[x] = &edges[cnt++]; 
}

map<int,int> 	tt; 
queue<int>	 	que; 

bool	spfa(int s ,int t )
{
	memset( d , -1 , sizeof(d) ); 
	memset( in_que, false , sizeof(in_que) ); 
	que.push(s); 
	d[s] = 0; 
	while ( !que.empty() ) 
	{
		int i = que.front(); 
		que.pop(); 
		in_que[i] = false; 
		for ( Edge *p = mat[i]; p ; p = p->next ) 
		{
			if ( p->w == 0 ) continue; 
			int to = p->to; 
			if ( d[to]<d[i]+p->c )  
			{
				d[to] = d[i]+p->c; 
				from[to][0] = i; 
				from[to][1] = p->num; 
				if ( !in_que[to] ) 
				{
					que.push(to); 
					in_que[to] = true; 
				}
			}
		}
	}
	return d[t] != -1; 
}

int		main()
{
	scanf("%d%d", &n , &k ); 
	for (int i = 0; i<n; i++)
	{
		scanf("%d%d%d", &data[i][0] , &data[i][1] , &data[i][2] );

		t[cnt++] = data[i][0]; 
		t[cnt++] = data[i][1] = data[i][0] + data[i][1] ; 
	}
	sort( t , t+cnt ); 
	int	j = 0; 
	for (int i = 0; i<cnt; i++) 
		if ( tt.find(t[i]) == tt.end() ) tt[t[i]] = ++j; 
	cnt = 0; 
	for (int i = 0; i<=j; i++)
		link( i , i+1 , k , 0 ), 
		link( i+1 , i , 0 , 0 ); 
	for (int i = 0; i<n; i++)
	{
		ans[i] = cnt; 
		link( tt[data[i][0]] , tt[data[i][1]] , 1 , data[i][2] ), 
		link( tt[data[i][1]] , tt[data[i][0]] , 0 , -data[i][2] ); 
	}
	while ( spfa(0,j+1) ) 
	{
		int i = j+1;
		while ( i != 0 ) 
		{
			edges[from[i][1]].w -= 1; 
			edges[from[i][1]^1].w += 1; 
			i = from[i][0]; 
		}
	}
	for (int i = 0; i<n; i++)
		printf("%d%c" , edges[ans[i]].w == 0 ? 1:0 , i==n-1?'\n':' ' ); 
	return 0; 
}
