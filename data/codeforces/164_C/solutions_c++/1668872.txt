#include <cstdio>
#include <cstring>
#include <algorithm>

#define N1 2001
#define M 10001


void getSolution(int S, int T, int V, int *qd, int *qn, int *l, int *qc, int *ql) {
    int v[N1], u[N1], q[N1], f[N1];

    for (int i = 0; i < V; ++i) {
        v[i] = -(1<<30);
        u[i] = 0;
    }

    v[S] = 0;
    q[0] = S;

    for (int i = 0, j = 0, s = 1; s; ++i) {
        if (i == N1) {
            i = 0;
        }

        u[q[i]] = 0;
        --s;
        for (int m = l[q[i]]; m; m = qn[m]) {
            if (qc[m] && v[q[i]] + ql[m] > v[qd[m]]){
                v[qd[m]] = v[q[i]] + ql[m];
                f[qd[m]] = m;
                if (!u[qd[m]]){
                    if (++j == N1) j = 0;
                    ++s;
                    u[q[j] = qd[m]] = 1;
                }
            }
        }
    }

    if (v[T] == -(1<<30)) return;
    for (int i = T; i != S; i = qd[f[i]^1]) {
        qc[f[i]]--, qc[f[i]^1]++;
    }
}

void bd(int x, int y, int c, int s, int &ed, int *qd, int *qn, int *l, int *qc, int *ql) {
    qd[++ed] = y, qn[ed] = l[x], qc[ed] = c, ql[ed] = s, l[x] = ed;
    qd[++ed] = x, qn[ed] = l[y], qc[ed] = 0, ql[ed] = -s, l[y] = ed;
}

int main() {
    int N, K;
    scanf("%d%d", &N, &K);

    int s[N1], d[N1], c[N1], t = 0;
    int dis[N1];

    for (int i = 0; i < N; ++i){
        scanf("%d%d%d", s+i, d+i, c+i);
        dis[t++] = s[i];
        dis[t++] = s[i] + d[i];
    }
    

    int S, T, V, ed;

    std::sort(dis, dis + t);
    V = std::unique(dis, dis + t) - dis;
    S = 0, T = V - 1;
    ed = 1;
    

    int qd[M], qn[M], qc[M], ql[M], l[N1], rem[N1];

    for (int i = 0; i < T; ++i) {
        bd(i, i+1, K, 0, ed, qd, qn, l, qc, ql);    
    }
    

    int x, y;

    for (int i = 0; i < N; ++i){
        x = std::lower_bound(dis, dis + V, s[i]) - dis;
        y = std::lower_bound(dis, dis + V, s[i] + d[i]) - dis;
        bd(x, y, 1, c[i], ed, qd, qn, l, qc, ql);
        rem[i] = ed - 1;
    }
    
    for (int i = 0; i < K; ++i) {
        getSolution(S, T, V, qd, qn, l, qc, ql);
    }

    for (int i = 0; i < N; ++i) {
        printf("%d ", 1 - qc[rem[i]]);
    }

    return 0;
}