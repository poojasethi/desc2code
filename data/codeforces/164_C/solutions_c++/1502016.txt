#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int e[2005][2005], en[2005]={};
int C[2005][2005]={};
int W[2005][2005];
int n, k;

void add(int x, int y, int c) {
	C[x][y] = 1;
	C[y][x] = 0;
	W[x][y] = c;
	W[y][x] = -c;
	e[x][en[x]++] = y;
	e[y][en[y]++] = x;
}

int c[1005];
int s[1005], t[1005];
int SINK;
int dist[2005]={}, from[2005]={}, inq[2005]={};
queue<int> Q;
int SPFA() {
	Q = queue<int>();
	for(int i=0;i<=SINK;i++) dist[i] = -1, from[i] = -1, inq[i]=0;
	dist[0] = 0;
	Q.push(0);
	while(!Q.empty()) {
		int x=Q.front(); Q.pop();
		inq[x]=0;
		for(int i=0;i<en[x];i++) {
			if(C[x][e[x][i]]==1 && dist[e[x][i]] < dist[x] + W[x][e[x][i]])
			{
				dist[e[x][i]] = dist[x] + W[x][e[x][i]];
				from[e[x][i]] = x;
				if(!inq[e[x][i]]) {
					inq[e[x][i]] = 1;
					Q.push(e[x][i]);
				}
			}
		}
	}
	if(from[SINK] == -1) return 0;
	int x=SINK, ret=dist[SINK];
	while(x>=0) {
		C[from[x]][x]--;
		if(from[x]!=0 && x!=SINK) C[x][from[x]]++;
		x=from[x];
	}
	return ret;
}

int main(void) {
	scanf("%d%d", &n, &k);
	SINK = n+n+1;
	for(int i=0;i<=SINK;i++) en[i]=0;
	for(int i=1;i<=n;i++) scanf("%d%d%d", &s[i], &t[i], &c[i]);
	for(int i=1;i<=n;i++) add(0, i, 0);
	for(int i=n+1;i<=n+n;i++) add(i, n+n+1, 0);
	for(int i=1;i<=n;i++) add(i, n+i, c[i]);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
			if(s[i]+t[i]<=s[j])
				add(i+n, j, 0);
	int ans=0;
	for(int i=1;i<=k;i++) ans += SPFA();
	for(int i=1;i<=n;i++)
		if(C[n+i][i]) printf("1 ");
		else printf("0 ");
	puts("");
	//printf("%d\n", ans);
	return 0;
}
