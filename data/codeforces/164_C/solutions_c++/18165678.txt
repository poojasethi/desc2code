#include<cstdio>
#include<algorithm>
#include<cstring>
using namespace std;

const int N=3010;
struct edge{
	int x,d,c,nex,fr,id;
}e[N*N];
struct node{
	int id,s,t,c;
	friend bool operator <(node a,node b ){
		if(a.s==b.s) return a.t<b.t;
		return a.s<b.s;
	} 
}a[N];
int first[N],c[N*N],v[N],dis[N],fr[N];
int p,q,tot=1,n,s,k,t;

void add(int x,int y,int d,int c){
	e[++tot].nex=first[x];
	e[tot].x=y;
	e[tot].fr=x;
	e[tot].d=d;
	e[tot].c=c;
	first[x]=tot;
	if(~tot&1) add(y,x,0,-c);
}
bool spfa(){
	memset(dis,128,sizeof(dis));
	c[1]=s; v[s]=1; dis[s]=0;
	for(p=q=1;p<=q;p++){
		for(int i=first[c[p]];i;i=e[i].nex)
			if(e[i].d&&e[i].c+dis[c[p]]>dis[e[i].x]){
				dis[e[i].x]=dis[c[p]]+e[i].c;
				fr[e[i].x]=i;
				if(!v[e[i].x]) v[c[++q]=e[i].x]=1;
			}
		v[c[p]]=0;
	}
	return dis[t]!=dis[0];
}
void solve(){
	int mn=1e9,ans=0;
	while(spfa()){
		for(int i=fr[t];i;i=fr[e[i].fr])
			mn=min(mn,e[i].d);
		ans+=mn*dis[t];
		for(int i=fr[t];i;i=fr[e[i].fr])
			e[i].d-=mn,e[i^1].d+=mn;
	}
	for(int i=1;i<=n;i++)
		for(int j=first[i];j;j=e[j].nex)
		if(e[j].x==i+n) printf("%d ",1-e[j].d);
}
int main(){
	scanf("%d%d",&n,&k);
	s=n*2+1; t=n*2+2;
	for(int i=1;i<=n;i++){
		scanf("%d%d%d",&a[i].s,&a[i].t,&a[i].c);
		a[i].id=i;
	} 
	sort(a+1,a+1+n);
	for(int i=1;i<=n;i++){
		for(int j=i+1;j<=n;j++)
			if(a[i].s+a[i].t<=a[j].s){
				add(a[i].id+n,a[j].id,1e9,0);
				break;
			}
		add(a[i].id,a[i].id+n,1,a[i].c);
		add(a[i].id+n,t,1e9,0);
		if(i<n) add(a[i].id,a[i+1].id,1e9,0);
	}
	add(s,a[1].id,k,0);
	solve();
	return 0;
}