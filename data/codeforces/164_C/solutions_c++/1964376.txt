#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<map>
#include<vector>
#include<algorithm>
#include<cmath>
using namespace std;

const int N = 3050, M = 201000, inf = 1 << 29;

int n, m, o = 1;
int f[N], z[M], p[M], t[M], c[M], w[M];
int d[N], e[N], v[N], q[N], st[N], ss, tt;
int S, T;
int l[N], r[N], k[N];

void add(int i, int j, int cc, int k) {
	o++;
	z[o] = i;
	p[o] = j;
	c[o] = cc;
	w[o] = k;
	t[o] = f[i];
	f[i] = o;

	o++;
	z[o] = j;
	p[o] = i;
	c[o] = 0;
	w[o] = -k;
	t[o] = f[j];
	f[j] = o;
}

bool spfa() {
	st[0] = S;
	ss = 0;
	tt = 1;
	for (int i = 0; i <= T; i++) {
		d[i] = -inf;
		e[i] = -1;
		q[i] = 0;
		v[i] = false;
	}
	d[S] = 0;
	for (; ss != tt; ) {
		int i = st[ss];
		ss = (ss + 1) % T;
		v[i] = false;
		for (int j = f[i]; j; j = t[j]) 
		if (c[j] && d[p[j]] < d[i] + w[j]) {
			d[p[j]] = d[i] + w[j];
			e[p[j]] = j;
			if (!v[p[j]]) {
				v[p[j]] = true;
				q[p[j]]++;
				if (q[p[j]] > T) return false;
				st[tt] = p[j];
				tt = (tt + 1) % T;
			}
		}
	}
	return d[T] > 0;
}

void flow() {
	if (e[T] == -1) return;
	for (int j = 0, i = T; i != S && j <= T; i = z[e[i]], j++) {
		c[e[i]] -= 1;
		c[e[i]^1] += 1;
	}
}

int main() {
	cin >> n >> m;
	vector<int> u;
	for (int i = 1; i <= n; i++) {
		cin >> l[i] >> r[i] >> k[i];
		r[i] += l[i];
		u.push_back(l[i]);
		u.push_back(r[i]);
	}
	u.push_back(-100);
	u.push_back(-1);
	u.push_back(inf);
	sort(u.begin(), u.end());
	u.erase(unique(u.begin(), u.end()), u.end());

	map<int, int> uu;
	for (int i = 0; i < int(u.size()); i++)
		uu[u[i]] = i + 1;
	int b = u.size() + 10;
	for (int i = 1; i <= n; i++) {
		l[i] = uu[l[i]];
		r[i] = uu[r[i]];
		add(l[i], r[i], 1, k[i]);
	}
	for (int i = 2; i <= b; i++)
		add(i, i + 1, inf, 0);
	S = 1;
	T = b + 1;
	add(S, 2, m, 0);
		
	for (int i = 0; i < m; i++) {
		if(!spfa())break;
		flow();
	}
	for (int i = 1; i <= n; i++)
		cout << 1 - c[i * 2] << ' ';
	cout << endl;
}

	 	 					 		  			 	   				