#include <cstdio>
#include <queue>
#include <algorithm>

int e[2010][2010], f[2010] = {};
int C[2010][2010] = {};
int W[2010][2010];
int n, k;

void add(int x, int y, int c) 
{
  C[x][y] = 1;
  C[y][x] = 0;
  W[x][y] = c;
  W[y][x] = -c;
  e[x][(f[x])++] = y;
  e[y][(f[y])++] = x;
}

int c[1010];
int s[1010], t[1010];
int sink;
int dist[2010] = {}, from[2010] = {}, inq[2010] = {};
std::queue<int> Q;

int flow() 
{
  Q = std::queue<int>();
  for (int i = 0; i <= sink; i++) 
  {
    dist[i] = -1; 
    from[i] = -1; 
    inq[i] = 0;
  }
  dist[0] = 0;
  Q.push(0);
  while ( !Q.empty() ) 
  {
    int x = Q.front(); 
    Q.pop();
    inq[x] = 0;
    for(int i = 0; i < f[x]; i++) 
    {
      if ((C[x][e[x][i]] == 1) && (dist[e[x][i]] < dist[x] + W[x][e[x][i]]))
      {
        dist[e[x][i]] = dist[x] + W[x][e[x][i]];
        from[e[x][i]] = x;
        if ( !inq[e[x][i]] ) 
        {
          inq[e[x][i]] = 1;
          Q.push(e[x][i]);
        }
      }
    }
  }
  if (from[sink] == -1) 
    return 0;
  int x = sink, result = dist[sink];
  while (x >= 0) 
  {
    (C[from[x]][x])--;
    if ((from[x] != 0) && (x != sink)) 
      (C[x][from[x]])++;
    x = from[x];
  }
  return result;
}

int main() 
{  
  //FILE *fin = fopen("in.txt", "rt");
  FILE *fin = stdin;
  fscanf(fin, "%d%d", &n, &k);
  sink = n + n + 1;
  for (int i = 0; i <= sink; i++) 
    f[i] = 0;
  for (int i = 1; i <= n; i++) 
    fscanf(fin, "%d%d%d", &s[i], &t[i], &c[i]);
  for (int i = 1; i <= n; i++) 
    add(0, i, 0);
  for (int i = n + 1; i <= n + n; i++) 
    add(i, n + n + 1, 0);
  for (int i = 1; i <= n; i++) 
    add(i, n + i, c[i]);
  for (int i = 1; i <= n; i++)
  {
    for (int j = 1; j <= n; j++)
    {
      if (s[i] + t[i] <= s[j])
        add(i + n, j, 0);
    }
  }

  int ans = 0;
  for (int i = 1; i <= k; i++) 
    ans += flow();
  for (int i = 1; i <= n; i++)
  {
    if (C[n + i][i] != 0) 
      printf("1 ");
    else 
      printf("0 ");
  }  
  return 0;
  fclose(fin);
}