#include <vector>
#include <algorithm>
#include <iostream>
#include <string.h>
#include <fstream>
#include <iostream>
#include <string>
#define N 2005
#define M 10005
using namespace std;

int n, m, S, T, V, ed, x, y, t;
int a[N], b[N], c[N], l[N], cost[N], us[N], q[N], f[N], ED[N], coord[N];
int qd[M], qn[M], qc[M], ql[M];

void mf(){
	for (int i = 0; i < V; ++i)
	{
		cost[i] = -(1<<30); 
		us[i] = 0;
	}
	cost[S] = 0, q[0] = S;

	for (int i=0, j=0, s=1; s; i++)
	{
		if (i == N) i = 0;
		us[q[i]] = 0;
		s--;
		for (int k = l[q[i]]; k; k = qn[k])
			if (qc[k] && cost[q[i]] + ql[k] > cost[qd[k]])
			{
				cost[qd[k]] = cost[q[i]] + ql[k];
				f[qd[k]] = k;
				if (!us[qd[k]])
				{
					if (++j == N) j = 0;
					s++;
					us[q[j]=qd[k]] = 1;
				}
			}
	}

	if (cost[T] == -(1<<30)) return;
	for (int i = T; i != S; i = qd[f[i]^1])
	{
		qc[f[i]]--;
		qc[f[i]^1]++;
	}
}

void addE(int x, int y, int c, int s)
{
	qd[++ed] = y;
	qn[ed] = l[x];
	qc[ed] = c;
	ql[ed] = s;
	l[x] = ed;

	qd[++ed] = x;
	qn[ed] = l[y]; qc[ed] = 0; 
	ql[ed] = -s;
	l[y] = ed;
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; ++i)
	{
		cin >> a[i] >> b[i] >> c[i];
		coord[t++] = a[i];
		coord[t++] = a[i] + b[i];
	}
	
	sort(coord, coord + t);
	V = unique(coord, coord + t) - coord;
	S = 0, T = V - 1;
	ed = 1;
	
	for (int i = 0; i < T; ++i)
		addE(i, i+1, m, 0);
	for (int i = 0; i < n; ++i)
	{
		x = lower_bound(coord, coord + V, a[i]) - coord;
		y = lower_bound(coord, coord + V, a[i] + b[i]) - coord;
		addE(x, y, 1, c[i]);
		ED[i] = ed - 1;
	}
	
	for (int i = 0; i < m; ++i) 
		mf();
	for (int i = 0; i < n; ++i) 
		cout << 1 - qc[ED[i]] << ' ';
	return 0;
}