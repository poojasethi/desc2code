#include <cstdio>
#include <algorithm>
#include <queue>
#define N 2050
#define M 6500
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
using namespace std;

int n, k, m, a[N], b[N], pr[N], cor[N];
int f[N], v[M], o[M], c[M], w[M], p;
int lb[N], d[N], q[N], E[N], L[N], S, T;
bool u[N];

void bd(int a, int b, int x, int y){
	v[++p] = b, o[p] = f[a], f[a] = p, w[p] = x, c[p] = y;
	v[M - p] = a, o[M - p] = f[b], f[b] = M - p, w[M - p] = 0, c[M - p] = -y;
}

int main(){
	scanf("%d %d", &n, &k);
	fi(i, 0, n){
		scanf("%d %d %d", &a[i], &b[i], &pr[i]);
		b[i] += a[i];
		cor[i * 2] = a[i];
		cor[i * 2 + 1] = b[i];
	}
	
	sort(cor, cor + n * 2);
	m = unique(cor, cor + n * 2) - cor;
	
	S = 0, T = m - 1;
	fi(i, 1, m)
		bd(i - 1, i, 1e9, 0);
	
	fi(i, 0, n){
		int A = lower_bound(cor, cor + m, a[i]) - cor;
		int B = lower_bound(cor, cor + m, b[i]) - cor;
		lb[i] = p + 1;
		bd(A, B, 1, pr[i]);
	}
	
	while(k--){
		FI(i, 0, T) d[i] = -1e9;
		d[S] = 0;
		q[0] = S;
		
		for(int l = 0, h = 1; l != h; l = ++l % N){
			int y = q[l];
			u[y] = 0;
			
			for(int i = f[y]; i; i = o[i]) if(w[i] && d[v[i]] < d[y] + c[i]){
				int V = v[i];
				d[V] = d[L[V] = y] + c[E[V] = i];
				if(!u[V]) u[V] = 1, q[h++] = V, h %= N;
			}
		}
		
		for(int i = T; i != S; i = L[i]) w[E[i]]--, w[M - E[i]]++;
	}
	
	fi(i, 0, n) printf("%d%c", !w[lb[i]], i == n - 1 ? '\n' : ' ');
	scanf("\n");
}
