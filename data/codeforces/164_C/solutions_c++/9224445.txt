#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
const int INF = 1000000005;
const int MAXN = 2005;
const int MAXE = 3005;
int to[MAXE * 2], cap[MAXE * 2], ind[2 * MAXE], cost[MAXE * 2], prev[MAXE * 2], head[MAXN], cnt;
int s[MAXN], t[MAXN], c[MAXN];
int d[MAXN], par[MAXN];
vector<int> val;
inline void add_edge(int u, int v, int a, int b, int id)
{
	to[cnt] = v, cap[cnt] = a, ind[cnt] = id, cost[cnt] = b, prev[cnt] = head[u]; head[u] = cnt++;
	to[cnt] = u, cap[cnt] = 0, ind[cnt] = id, cost[cnt] = -b, prev[cnt] = head[v]; head[v] = cnt++;
}
int mp(int x)
{
	return lower_bound(val.begin(), val.end(), x) - val.begin();
}
int mcf(int source, int sink, int maxflow)
{
	int ans = 0;
	while (maxflow)
	{
		memset(d, INF, sizeof(d));
		d[source] = 0;
		for (int _ = 0; _ < MAXN; _++)
			for (int v = 0; v < MAXN; v++)
				for (int i = head[v]; i != -1; i = prev[i])
					if (cap[i] && d[to[i]] > d[v] + cost[i])
					{
						d[to[i]] = d[v] + cost[i];
						par[to[i]] = i;
					}
		int v = sink;
		while (v != source)
		{
			int id = par[v];
			cap[id]--;
			cap[id ^ 1]++;
			ans += cost[id];
			v = to[id ^ 1];
		}
		maxflow--;
	}
	return ans;
}
int main()
{
	ios::sync_with_stdio(false);
	memset(head, -1, sizeof(head));
	int n, k;
	cin >> n >> k;
	for (int i = 0; i < n; i++)
	{
		cin >> s[i] >> t[i] >> c[i];
		val.push_back(s[i]);
		val.push_back(s[i] + t[i]);
	}
	sort(val.begin(), val.end());
	val.resize(unique(val.begin(), val.end()) - val.begin());
	for (int i = 0; i < n; i++)
		add_edge(mp(s[i]), mp(s[i] + t[i]), 1, -c[i], i);
	for (int i = 1; i < val.size(); i++)
		add_edge(i - 1, i, k, 0, -1);
	mcf(0, val.size() - 1, k);
	for (int i = 0; i < n; i++)
	{
		int v = mp(s[i]);
		int u = mp(s[i] + t[i]);
		for (int j = head[v]; j != -1; j = prev[j])
			if (ind[j] == i)
			{
				cout << 1 - cap[j] << " "; 
				break;
			}
	}
	cout << endl;
	return 0;
}
