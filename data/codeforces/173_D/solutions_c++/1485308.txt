#include <map>
#include <set>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <cctype>
#include <cstdio>
#include <string>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <iostream>
#include <algorithm>

#define sqr(x) ((x) * (x))
#define minn(x,y) (x=(y)<(x)?(y):(x))
#define maxx(x,y) (x=(y)>(x)?(y):(x))
#define pluss(x,y) (x+=(y),x%=mod)

using namespace std;

typedef	long long	int64;

const	int	maxn = 500005;

struct	edge
{
	int	v, next;
};

edge	w[maxn], x[maxn];
int	deg[maxn], cnt[maxn], a[maxn], b[maxn], xx[maxn], ww[maxn], ans[maxn], color[maxn], que[maxn], visit[maxn];
int	N, M, W = 1, X = 1;


bool	sort_cnt(const int x, const int y)
{
	return cnt[x] > cnt[y];
}

void	Print(int c, int checkerlog)
{
	int	now = 0;
	
	for (int i = 1; i <= a[0]; ++ i) if (!ans[a[i]])
	{
		ans[a[i]] = c;
		++ now;
		if (now >= 3) now = 0, ++ c;
	}
	
	for (int i = 1; i <= b[0]; ++ i) if (!ans[b[i]])
	{
		ans[b[i]] = c;
		++ now;
		if (now >= 3) now = 0, ++ c;
	}
	
	puts("YES");
	for (int i = 1; i <= N; ++ i) printf("%d ", ans[i]);
	
	exit(0);
}

void	Work(int a[], int b[])
{
	for (int j = 1; j <= a[0]; ++ j)
	{
		int	u = a[j];
		for (int i = ww[u]; i; i = w[i].next) visit[w[i].v] = 1;
		
		int	t[3] = {0, 0, 0};
		for (int i = 1; i <= b[0]; ++ i)
			if (!visit[b[i]])
			{
				t[0] = min(t[0] + 1, 2);
				t[t[0]] = b[i];
			}
		
		for (int i = ww[u]; i; i = w[i].next) visit[w[i].v] = 0;
		
		if (t[0] == 2)
		{
			ans[u] = ans[t[1]] = ans[t[2]] = 1;
			Print(2, 1);
		}
		
		if (t[0])
		{
			x[++ X].v = u; x[X].next = xx[t[1]]; xx[t[1]] = X;
			++ cnt[t[1]];
		}
	}
	
	sort(b + 1, b + b[0] + 1, sort_cnt);
	
	if (cnt[b[2]] >= 2)
	{
		int	u = b[1];
		ans[x[xx[u]].v] = ans[x[x[xx[u]].next].v] = ans[u] = 1;
		int	v = b[2];
		ans[x[xx[v]].v] = ans[x[x[xx[v]].next].v] = ans[v] = 2;
		Print(3, 2);
	}
	
	puts("NO");
}

int	main()
{
//	freopen("D.in", "r", stdin);
//	freopen("D.out", "w", stdout);
	
	scanf("%d%d", &N, &M);
	
	for (int i = 1, u, v; i <= M; ++ i)
	{
		scanf("%d%d", &u, &v);
		w[++ W].v = v; w[W].next = ww[u]; ww[u] = W;
		w[++ W].v = u; w[W].next = ww[v]; ww[v] = W;
		++ deg[u];
		++ deg[v];
	}
	
	for (int s = 1, fi, la; s <= N; ++ s) if (!color[s])
	{
		que[la = 1] = s;
		color[s] = 1;
		
		for (fi = 1; fi <= la; ++ fi)
		{
			int	u = que[fi];
			for (int i = ww[u]; i; i = w[i].next)
			{
				int	v = w[i].v;
				if (color[v]) continue;
				color[v] = 3 - color[u];
				que[++ la] = v;
			}
		}
	}
	
	for (int i = 1; i <= N; ++ i) if (color[i] == 1) a[++ a[0]] = i;
	for (int i = 1; i <= N; ++ i) if (color[i] == 2) b[++ b[0]] = i;
	
	if (a[0] % 3 == 0 && b[0] % 3 == 0) Print(1, 0);
	
	if (a[0] % 3 == 1) Work(a, b); else Work(b, a);
	
	return 0;
}
