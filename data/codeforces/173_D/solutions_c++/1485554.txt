#include <cstdio>
#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

vector < int > v[1 << 17];
int N, M;
int res[1 << 17];
int side[1 << 17];
int used[1 << 17];
int cntl = 0, cntr = 0, l = 1, r;
int zero = 0, one = 0;
void scan(){
    scanf ( "%d%d", &N, &M );

    for ( int i = 0; i < M; ++i ){
        int x, y;

        scanf ( "%d%d", &x, &y );
        v[x].push_back ( y );
        v[y].push_back ( x );
    }
}

int other[1 << 17];

int ok ( int sd ){
    memset ( other, 0, sizeof ( other ) );
    int szother = one;
    if ( sd == 1 ) szother = zero;
    for ( int i = 1; i <= N; ++i )
        if ( side[i] == sd && v[i].size() + 2 <= szother ){

            for ( int j = 0; j < v[i].size(); ++j )
                other[ v[i][j] ] = 1;

            int n1 = -1, n2 = -1;

            for ( int j = 1; j <= N; ++j )
                if ( !other[j] && side[i] != side[j] && side[j] != -1 ){
                    if ( n1 != -1 )
                        n2 = j;
                    else
                        n1 = j;
                }

        //    cout << i << " " << n1 << " " << n2 << endl;
            side[i] = -1;
            side[n1] = -1;
            side[n2] = -1;
            res[i] = l;
            res[n1] = l;
            res[n2] = l;
            ++l;
            return 1;
        }
    return 0;
}


int dfs ( int i, int xr ){
    used[i] = 1;
    side[i] = xr;

    for ( int j = 0; j < v[i].size(); ++j )
        if ( !used[ v[i][j] ] ) dfs ( v[i][j], xr ^ 1 );
}

void solve(){
    memset ( side, -1, sizeof ( side ) );

    for ( int i = 1; i <= N; ++i )
        if ( !used[i] )
            dfs ( i, 0 );


    r = N / 3;

    for ( int i = 1; i <= N; ++i )
        if ( !side[i] )
            ++zero;

    one = N - zero;

    memset ( used, 0, sizeof ( used ) );

    if ( zero % 3 == 2 ){
        for ( int i = 1; i <= N; ++i )
            side[i] ^= 1;
        swap ( zero, one );
    }


    if ( zero % 3 == 1 ){
        if ( !ok ( 0 ) ){
            if ( zero >= 4 ){
                if ( ok ( 1 ) )
                    if ( ok ( 1 ) );
                    else{
                        printf ( "NO\n" );
                        return;
                    }
                else{
                    printf ( "NO\n" );
                    return;
                }
            }
            else{
                printf ( "NO\n" );
                return;
            }
        }
    }

   // cout << zero % 3 << endl;

    for ( int i = 1; i <= N; ++i )
        if ( side[i] == 1 ){
            ++cntr;
            res[i] = r;
            if ( cntr == 3 ){
                cntr = 0;
                --r;
            }
        }
        else if ( !side[i] ){
            ++cntl;
            res[i] = l;
            if ( cntl == 3 ){
                cntl = 0;
                ++l;
            }
        }
    printf ( "YES\n" );

    for ( int i = 1; i <= N; ++i )
        printf ( "%d ", res[i] );
    printf ( "\n" );
}

int main(){
    scan();
    solve();
}
