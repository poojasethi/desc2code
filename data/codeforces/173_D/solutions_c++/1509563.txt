#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
using namespace std;
const int maxn = 100005;
int head[maxn];
int a[maxn];
int b[maxn];
int c[maxn];
struct node
{
	int next,to;
}edge[maxn*4];
int flag[maxn];
queue<int> q;
int kk;

void print( bool u, int n )
{
	if ( !u ) printf("NO\n");
	else
	{
		printf("YES\n");
		for ( int i = 1; i < n; i++ )
			printf("%d ",a[i] );
		printf("%d\n",a[n]);
	}
}

void tint( int n, int ans )
{
	int cou = 0;
	for ( int i = 1; i <= n; i++ )
	if ( a[i] == 0 && flag[i] == 1 )
	{
		a[i] = ans;
		cou++;
		if ( cou == 3 )
		{
			cou = 0;
			ans++;
		}
	}
	for ( int i = 1; i <= n; i++ )
	if ( a[i] == 0 && flag[i] == 2 )
	{
		a[i] = ans;
		cou++;
		if ( cou == 3 )
		{
			cou = 0;
			ans++;
		}
	}
}

void addedge( int x, int y )
{
	++kk;
	edge[kk].next = head[x];
	edge[kk].to = y;
	head[x] = kk;
}

int main()
{
	int n,m;
	scanf( "%d%d", &n, &m );
	memset( head, -1, sizeof( head ));
	for ( int i = 0; i < m; i++ )
	{
		int x,y;
		scanf( "%d%d", &x, &y );
		b[x]++;
		b[y]++;
		addedge( x, y );
		addedge( y, x );
	}
	for ( int i = 1; i <= n; i++ )
	if ( flag[i] == 0 )
	{
		q.push(i);
		flag[i] = 1;
		while ( !q.empty() )
		{
			int x = q.front();
			q.pop();
			int i = head[x];
			while ( i != -1 )
			{
				int to = edge[i].to;
				i = edge[i].next;
				if ( flag[to] == 0 )
				{
					if ( flag[x] == 2 )
					flag[to] = 1;
					else flag[to] = 2;
					q.push(to);
				}
			}
		}
	}
	int re = 0;
	for ( int i = 1; i <= n; i++ )
		if ( flag[i] == 1 ) re++;
		bool u = false;
/*	for ( int i = 1; i <= n; i++ )
		printf( "%d ",flag[i]);
	printf("\n");*/
	if ( re % 3 == 2 )
	{
		re = n - re;
		for ( int i = 1; i <= n; i++ )
		if ( flag[i] == 1 ) flag[i] = 2;
		else flag[i] = 1;
	}
/*	for ( int i = 1; i <= n; i++ )
		printf( "%d ",flag[i]);
	printf("\n");*/
	if ( re % 3 == 0 )
	{
		tint( n, 1 );
		print( true, n );
	}
	else if ( re % 3 == 1 )
	{
		for ( int i = 1; i <= n; i++ )
			if ( flag[i] == 1 )
			if ( n - re - b[i] >= 2 )
			{
				int j = head[i];
				while ( j != -1 )
				{
					int to = edge[j].to;
					j = edge[j].next;
					c[to] = 1;
				}
				u = true;
				a[i] = 1;
				break;
			}
		if ( u )
		{
			int k = 0;
			for ( int i = 1; i <= n; i++ )
			if ( c[i] == 0 && flag[i] == 2 )
			{
				a[i] = 1;
				k++;
				if ( k == 2 ) break;
			}
			tint( n, 2 );
			print( true,n );
		}
		else
		{
			int k = 0;
			int ans = 0;
			for ( int i = 1; i <= n; i++ )
			if ( flag[i] == 2 && re - b[i] >= 2 )
			{
//				printf("%d ",i);
				k++;
				ans++;
				a[i] = ans;
				int j = head[i];
				memset( c, 0, sizeof(c));
				while ( j != -1 )
				{
					int to = edge[j].to;
					j = edge[j].next;
					c[to] = 1;
				}
				int kk = 0;
				for ( int j = 1; j <= n; j++ )
				if ( c[j] == 0 && flag[j] == 1 )
				{
//					printf("%d ",j);
					kk++;
					a[j] = ans;
					if ( kk == 2 ) break;
				}
//				printf("\n");
				if ( k == 2 )
				{
					u = true;
					break;
				}
			}
			if ( u )
			{
				tint( n, 3 );
				print( true, n );
			}
			else print( false,0);
		}
	}
	return 0;
}
