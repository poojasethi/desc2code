#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <ctime>
#include <cmath>
#include <iostream>

using namespace std;

#define pb push_back
#define mp make_pair
#define x first
#define y second
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define sz(a) (int)((a).size())
#define all(a) (a).begin(), (a).end()

typedef long long ll;
typedef long double ld;
typedef pair <int, int> pii;

#define maxn 100010

int n, m;
vector <int> edges[maxn];
int col[maxn];
int nv[2];
vector <int> vs[2];

void dfs(int v, int c) {
  col[v] = c;
  nv[c]++;
  vs[c].pb(v);
  for (int i = 0; i < sz(edges[v]); i++) {
    int u = edges[v][i];

    if (col[u] == -1) {
      dfs(u, c ^ 1);
    }
  }
}

int was[maxn];
int gn = 0;
int ans[maxn];


void make(int v, int f) {
      ++gn;
      ans[v] = gn;

      memset(was, 0, sizeof(was));
      for (int j = 0; j < sz(edges[v]); j++) {
        was[edges[v][j]] = 1;
      }

      int q = 2;
      for (int j = 0; q && j < sz(vs[f ^ 1]); j++) {
        int u = vs[f ^ 1][j];
        if (!was[u] && ans[u] == 0) {
          ans[u] = gn;
          q--;
        }
      }
}

int find1(int f) {
  for (int i = 0; i < sz(vs[f]); i++) {
    int v = vs[f][i];
    if (sz(edges[v]) <= sz(vs[f ^ 1]) - 2) {

      make(v, f);
      return 1;
    }
  }
  return 0;
}

int find2(int f) {
  vector <int> aa;
  for (int i = 0; sz(aa) < 2 && i < sz(vs[f]); i++) {
    int v = vs[f][i];
    if (sz(edges[v]) <= sz(vs[f ^ 1]) - 2) {
      aa.pb(v);
      make(v, f);
    }
  }
  if (sz(aa) < 2) {
    return 0;
  }
  return 1;
}

void fill() {
  for (int f = 0; f < 2; f++) {
    int a = 0;
    for (int i = 0; i < sz(vs[f]); i++) {
      if (ans[vs[f][i]] != 0) continue;
      if (a == 3) a = 0;
      if (a == 0) gn++;
      ans[vs[f][i]] = gn;
      a++;
    }
  }
}

void out() {
  puts("YES");
  for (int i = 0; i < n; i++) {
    printf("%d%c", ans[i], " \n"[i + 1 == n]);
  }
}

int main() {
  scanf("%d %d", &n, &m);
  for (int i = 0; i < m; i++) {
    int a, b;
    scanf("%d %d", &a, &b), a--, b--;
    edges[a].pb(b);
    edges[b].pb(a);
  }

  memset(col, -1, sizeof(col));
  for (int i = 0; i < n; i++) {
    if (col[i] == -1) dfs(i, 0);
  }

  if (nv[0] % 3 == 0) {
    fill();
  } else {
    int bi;
    if (nv[0] % 3 == 1) {
      bi = 0;
    } else {
      bi = 1;
    }

    if (find1(bi)) {
      fill();
    } else {
      if (nv[0] == 1 || !find2(bi ^ 1)) {
        puts("NO");
        return 0;
      }
      fill();
    }
  }

  out();

  return 0;
}
