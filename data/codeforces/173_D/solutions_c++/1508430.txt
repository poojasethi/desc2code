#include <stdio.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <string>
#include <assert.h>
#include <math.h>
#include <string.h>
using namespace std;
typedef long long LL;
typedef vector<int> VI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
#define FOREACH(it,vec) for(typeof((vec).begin()) it = (vec).begin(); it != (vec).end(); it++)
#define MOD(a,b) (((a)%(b)+(b))%(b))
#define REP(i,n) for (int i = 0; i < (n); i++)

int N, M;
VI adj[100000];
VI se[2];
bool vis[100000];
bool ver[100000];
int dep[100000];

void visit(int i, int d) {
	if (vis[i])
		return;
	vis[i] = true;
	se[d].push_back(i);
	FOREACH(k,adj[i])
		visit(*k, 1-d);
}

int D = 1;
bool find() {
	int fo = -1;
	FOREACH(i,se[0])
		if (!dep[*i] && adj[*i].size() < se[1].size()-1)
			fo = *i;
	if (fo == -1)
		return false;
	dep[fo] = D;
	for (int i = 0; i < N; i++)
		ver[i] = false;
	FOREACH(k, adj[fo])
		ver[*k] = true;
	int gem = 0;
	for (int ik = 0; gem < 2; ik++) {
		int k = se[1][ik];
		if (!ver[k]) {
			gem++;
			dep[k] = D;
		}
	}
	D++;
	return true;
}

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 0; i < M; i++) {
		int a, b;
		scanf("%d %d", &a, &b);
		a--; b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	for (int i = 0; i < N; i++)
		visit(i, 0);
	if (se[0].size()%3 == 2)
		swap(se[0],se[1]);
	if (se[0].size()%3 == 1) {
		if (!find()) {
			swap(se[0],se[1]);
			if (!find() || !find()) {
				printf("NO\n");
				return 0;
			}
		}
	}
	int gem = 0;
	for (int s = 0; s < 2; s++) {
		FOREACH(i,se[s]) {
			if (!dep[*i]) {
				gem++;
				dep[*i] = D;
				if (gem == 3) {
					gem = 0;
					D++;
				}
			}
		}
	}
	printf("YES\n");
	REP(i,N) {
		if (i)
			printf(" ");
		printf("%d", dep[i]);
	}
	return 0;
}
