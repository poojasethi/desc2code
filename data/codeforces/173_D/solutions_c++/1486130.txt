#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define int64 long long
#define Sort sort

using namespace std;

const int Maxn=101000;
const int Maxm=201000;

int cnt[Maxn];
int a[Maxn];
int p1[Maxn],p2[Maxn];
int pos[Maxn];
int date[Maxm],next[Maxm];
int ans[Maxn];
bool visit[Maxn];
int tmp[Maxn];
int n1,n2,n,m,tot,u;

void Add(int x,int y)
{
	++tot;
	date[tot]=y;next[tot]=pos[x];pos[x]=tot;
}

void Dfs(int x)
{
	if (a[x]==0) ++n1;
	else ++n2;
	for (int k=pos[x];k;k=next[k])
		if (a[date[k]]==-1) 
		{
			a[date[k]]=1-a[x];
			Dfs(date[k]);
		}
}

void Print()
{
	printf("YES\n");
	int last=u;
	for (int j=1;j<=n1;)
	{
		u=last+1;
		for (int k=0;j<=n1 && k<3;++j)
			if (ans[p1[j]]==-1)
			{
				++k;
				ans[p1[j]]=u;
				last=u;
			}
	}
	for (int j=1;j<=n2;)
	{
		u=last+1;
		for (int k=0;j<=n2 && k<3;++j)
			if (ans[p2[j]]==-1)
			{
				++k;
				ans[p2[j]]=u;
				last=u;
			}
	}
	printf("%d",ans[1]);
	for (int i=2;i<=n;++i) 
		printf(" %d",ans[i]);
	printf("\n");
}

int main()
{
	//freopen("x.in","r",stdin);
	//freopen("x.out","w",stdout);
	
	scanf("%d%d",&n,&m);
	memset(pos,0,sizeof(pos));
	memset(cnt,0,sizeof(cnt));
	tot=0;
	for (int i=1;i<=m;++i)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		Add(x,y);Add(y,x);
		++cnt[x];++cnt[y];
	}
	
	for (int i=1;i<=n;++i) a[i]=-1;
	n1=n2=0;
	for (int i=1;i<=n;++i)
		if (a[i]==-1)
		{
			a[i]=0;
			Dfs(i);
		}
	
	n1=n2=0;
	for (int i=1;i<=n;++i)
		if (a[i]==0) p1[++n1]=i;
		else p2[++n2]=i;
	
	u=0;
	for (int i=1;i<=n;++i) ans[i]=-1;
	if (n1 % 3==0)
	{
		Print();
		return 0;
	}
	if (n1 % 3==2)
	{
		for (int i=1;i<=n2;++i) tmp[i]=p2[i];
		for (int i=1;i<=n1;++i) p2[i]=p1[i];
		for (int i=1;i<=n2;++i) p1[i]=tmp[i];
		swap(n1,n2);
	}
	for (int i=1;i<=n1;++i)
		if (cnt[p1[i]]<n2-1)
		{
			u=1;
			int now=p1[i];
			ans[now]=1;
			memset(visit,false,sizeof(visit));
			for (int k=pos[now];k;k=next[k])
			{
				int nex=date[k];
				visit[nex]=true;
			}
			int uu=0;
			for (int j=1;j<=n2 && uu<2;++j)
				if (!visit[p2[j]])
				{
					ans[p2[j]]=1;
					++uu;
				}
			Print();
			return 0;
		}
	int t1=-1,t2=-1;
	for (int i=1;i<=n2;++i)
		if (cnt[p2[i]]<n1-1)
		{
			if (t1==-1) t1=p2[i];
			else { t2=p2[i];break; }
		}
	if (t2!=-1)
	{
		for (int i=1;i<=n1;++i) visit[p1[i]]=false;
		for (int k=pos[t1];k;k=next[k])
			visit[date[k]]=true;
		ans[t1]=++u;
		for (int i=1,uu=1;i<=n1 && uu<3;++i)
			if (!visit[p1[i]])
			{
				ans[p1[i]]=u;
				++uu;
			}
		for (int i=1;i<=n1;++i) visit[p1[i]]=false;
		for (int k=pos[t2];k;k=next[k])
			visit[date[k]]=true;
		ans[t2]=++u;
		for (int i=1,uu=1;i<=n1 && uu<3;++i)
			if (!visit[p1[i]])
			{
				ans[p1[i]]=u;
				++uu;
			}
		Print();
		return 0;
	}
	
	printf("NO\n");
	
	return 0;
}
	
	