#include<iostream>
#include<cstring>
#include<cstdio>
#include<vector>

using namespace std;

const int maxn = 100010;
const int maxm = 200010;

int n , m;

int tot , cnt;
int first[maxn] , next[maxm];
int node[maxm];

int level[maxn];
int color[maxn];

vector<int> A , B;
int ans[maxn];

bool used[maxn] , caln[maxn];

void merge( int u , int v )
{
	tot++;
	next[tot] = first[u];
	first[u] = tot;
	node[tot] = v;
}

void input()
{
	scanf( "%d%d" , &n , &m );
	
	for ( int i = 1 ; i <= m ; i++ )
	{
		int u , v; scanf( "%d%d" , &u , &v );
		merge( u , v );
		merge( v , u );
		level[u]++;
		level[v]++;
	}
}

void search( int t , int c )
{
	if ( color[t] != 0 ) return;
	color[t] = c;
	
	for ( int tab = first[t] ; tab ; tab = next[tab] )
	{
		int nt = node[tab];
		search( nt , 3 - c );
	}
}

void output()
{
	for ( int i = 0 ; i < (int) A.size() ; i++ )
		if ( !caln[A[i]] ) ans[A[i]] = ( ++cnt + 2 ) / 3;
	for ( int i = 0 ; i < (int) B.size() ; i++ )
		if ( !caln[B[i]] ) ans[B[i]] = ( ++cnt + 2 ) / 3;
	
	printf( "YES\n" );
	
	for ( int i = 1 ; i <= n ; i++ )
		printf( "%d " , ans[i] );
	printf( "\n" );
}

bool check()
{
	for ( int i = 0 ; i < (int) A.size() ; i++ )
		if ( ans[A[i]] == 0 && level[A[i]] <= (int) B.size() - 2 )
		{
			memset( used , false , sizeof( used ) );
			
			int t = A[i];
			for ( int tab = first[t] ; tab ; tab = next[tab] )
			{
				int nt = node[tab];
				used[nt] = true;
			}
			
			ans[t] = ( ++cnt + 2 ) / 3 , caln[t] = true;
			for ( int j = 0 ; j < (int) B.size() ; j++ )
			{
				int nt = B[j];
				if ( !used[nt] ) ans[nt] = ( ++cnt + 2 ) / 3 , caln[nt] = true;
				if ( cnt % 3 == 0 ) break;
			}
			
			return true;
		}
	
	return false;
}

void solve()
{
	for ( int i = 1 ; i <= n ; i++ )
		if ( color[i] == 0 ) search( i , 1 );
	
	for ( int i = 1 ; i <= n ; i++ )
		if ( color[i] == 1 ) A.push_back( i );
			else B.push_back( i );
	
	if ( (int) A.size() % 3 == 0 )
	{
		output();
		return;
	}
	
	if ( A.size() % 3 == 2 ) swap( A , B );
	
	if ( check() ) output();
		else
		{
			swap( A , B );
			if ( check() && check() ) output();
				else printf( "NO\n" );
		}
}

int main()
{
	//freopen( "173D.in" , "r" , stdin );
	//freopen( "173D.out" , "w" , stdout );
	
	input();
	solve();
	
	return 0;
}
