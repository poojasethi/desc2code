#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<ctime>
#include<map>
#include<string>
#include<vector>
#include<set>

using namespace std;
#define For(i,l,r) for (int i = l; i <= r; ++i)
#define Cor(i,l,r) for (int i = l; i >= r; --i)
#define Fill(a,b) memset(a,b,sizeof(a))
#define FI first
#define SE second
#define MP make_pair
#define PII pair<int,int>
#define flt double
#define INF (0x3f3f3f3f)
#define MaxN 1020304
#define MaxNode 1020304
#define MD 1000000007

int v[MaxN],next[MaxN],h[MaxN],tot = 0;
void add(int b,int e) {
    v[++tot] = e; next[tot] = h[b]; h[b] = tot;
    v[++tot] = b; next[tot] = h[e]; h[e] = tot;
}

int n,m,du[MaxN],q[MaxN]; bool vis[MaxN],can[MaxN],c[MaxN]; int s[2];
int cache[MaxN];
int main() {
    //freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    cin >> n >> m; Fill(h,tot = 0); Fill(du,0);
    For(i,1,m) {
            int b,e;
        scanf("%d%d",&b,&e); add(b,e); ++du[b], ++ du[e];
    }
    int hd, tl; Fill(vis,0);
    For(i,1,n) if (!vis[i]) {
        hd = 0, tl = 1;
        vis[q[1] = i] = true; c[i] = 0; ++s[0];
        while (hd < tl) {
            int vex = q[++hd];
            for (int z = h[vex]; z; z = next[z]) if (!vis[v[z]]) {
                c[v[z]] = c[vex] ^ 1; if (c[v[z]]) ++s[1]; else ++s[0];
                vis[q[++tl] = v[z]] = true;
            }
        }
    }
    bool w = 0;int nu[2] = {0,s[0] - s[0] % 3};
    if (s[0] % 3 == 0) { puts("YES");
        For(i,1,n) printf("%d ",nu[c[i]]++ / 3 + 1); cout << endl; return 0;
    }
    if (s[0] % 3 == 2) w^= 1; int cho; Fill(can,1); bool fl = true;
    For(i,1,n) if (c[i] == w) if (du[i] + 2 <= s[!w]) { nu[!w] = s[w] - 1; nu[w] = 0 ;
        for (int z = h[cho = i]; z; z = next[z]) can[v[z]] = false;
        int p1 = 0, p2 = 0;
        For(j,1,n) if (c[j] != w && can[j]) if (p1 == 0) p1 = j; else p2 = j;
        Fill(can,0); For(j,1,n) if (j != p1 && j != p2 && j != cho) can[j] = true; 
        cache[1] = p1; cache[2] = p2; cache[3] = cho; fl = false ; break ;
    }
    if (fl) {
        int Tot = 0;
        For(i,1,n) if (c[i] != w) if (du[i] + 2 <= s[w]) { nu[!w] = s[w] - 4; nu[w] = 0;
            Fill(can,1);
            for (int z = h[i]; z; z = next[z]) can[v[z]] = 0; cache[++Tot] = i;
            For(j,1,Tot) can[cache[j]] = false ;
            int np = 0;
            For(j,1,n) if (c[j] == w && can[j]) { cache[++Tot] = j; np++; if (np == 2) break ; }
            if (Tot == 6) { fl = false ; break ; }
        }
        Fill(can,1); For(i,1,Tot) can[cache[i]] = false ;
    }
    if (fl) { puts("NO"); return 0; } int tn = 0;puts("YES");
    For(i,1,n) if (can[i]) printf("%d ",nu[c[i]]++ / 3 + 1);
        else For(j,1,6) if (cache[j] == i) printf("%d ",(n - j) / 3 + 1);

    return 0;
}
