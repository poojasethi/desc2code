#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <functional>
#include <utility>
#include <string>
#include <vector>
using namespace std;
#define REP(i, n) for(int i = 0; i < n; i++)
#define FOR(i, l, r) for(int i = l; i < r; i++)
#define CLR(a, x) memset(a, x, sizeof(a))
#define randomize() srand(time(NULL))
#define random(x) int((double)rand()/RAND_MAX*(x-1)+0.5)
typedef long long LL;
typedef pair<int, int> PII;
#define MP make_pair
#define FI first
#define SE second
typedef vector<int> VI;
#define PB push_back
const int INF = 1<<30;

const int MAXN = 100010;
int n, m; VI edge[MAXN];
int qN, q[MAXN], tag[MAXN];
VI a, b; int col[MAXN], var;
bool vis[MAXN];

void divGraph() {
     CLR (tag, -1);
     REP (i, n) if (tag[i] == -1) {
         qN = 0; q[qN++] = i; tag[i] = 0; a.PB(i);
         REP (p, qN) {
             int u = q[p];
             REP (j, edge[u].size()) {
                 int v = edge[u][j];
                 if (tag[v] == -1) {
                    q[qN++] = v; tag[v] = 1-tag[u];
                    if (!tag[v]) a.PB(v); else b.PB(v);
                 }
             }
         }
     }   
     if (a.size()%3 == 2) swap(a, b);
}

bool modifyI() {
     var = 0;
     REP (i, a.size()) if (b.size()-edge[a[i]].size() >= 2) {
         int u = a[i], cnt = 0; CLR(vis, false); col[u] = var;
         REP (j, edge[u].size()) vis[edge[u][j]] = true;
         REP (v, n) if ((!vis[v]) && (tag[v] != tag[u])) {
             col[v] = var; if (++cnt >= 2) break;
         }
         var++; return true;
     }
     return false;
}

bool modifyII() {
     var = 0;
     REP (i, b.size()) if (a.size()-edge[b[i]].size() >= 2){
         int u = b[i], cnt = 0; CLR(vis, false); col[u] = var;
         REP (j, edge[u].size()) vis[edge[u][j]] = true;
         REP (v, n) if ((!vis[v]) && (tag[v] != tag[u])) {
             col[v] = var; if (++cnt >= 2) break;
         }
         if (++var >= 2) return true;;
     }
     return false;
}

bool solve() {
     int cnt = 0;
     REP (i, a.size()) if (col[a[i]] == -1) {
         col[a[i]] = var; if (++cnt >= 3) var++, cnt = 0;
     }
     REP (i, b.size()) if (col[b[i]] == -1) {
         col[b[i]] = var; if (++cnt >= 3) var++, cnt = 0;
     }
     return true;
}

int main() {
    #ifndef ONLINE_JUDGE
    freopen("D.in", "r", stdin);
    freopen("D.out", "w", stdout);
    #endif
    std::ios::sync_with_stdio(false);
    
    cin >> n >> m;
    REP (i, m) {
        int u, v; cin >> u >> v; u--, v--;
        edge[u].PB(v), edge[v].PB(u);
    }
    divGraph(); CLR(col, -1);
    if (((a.size()%3 == 0) || modifyI() || modifyII()) && solve()) {
       cout << "YES" << endl;
       REP (i, n) cout << col[i]+1 << ((i == n-1) ? '\n' : ' ');
    }
    else
        cout << "NO" << endl;
        
    return 0;
}
