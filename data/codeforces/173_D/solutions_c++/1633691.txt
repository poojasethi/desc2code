#include<iostream>
#include<vector>
#include<sstream>
#include<algorithm>
#include<numeric>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<complex>
#include<set>
#include<map>
#include<queue>
#include<cassert>

using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define rp(i,c) rep(i,(c).size())
#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int,int> pi;
typedef long long ll;

const int inf=1<<28;
const double INF=1e12,EPS=1e-9;

int n, m;
vector<vi> e;
int na, v[100000], ans[100000];
int st1[100000], sz1, st2[100000], sz2;

void rec(int c, int cl){
	v[c] = 1;
	if(cl == 1) st1[sz1++] = c;
	else st2[sz2++] = c;
	rep(i, e[c].size()) if(!v[e[c][i]])
		rec(e[c][i], 3 - cl);
}
bool func(int *s, int s_, int *t, int t_, int cnt){
	int res[2], sz = 0;
	rep(i, s_) if((int)e[s[i]].size() <= t_ - 2){
		res[sz++] = s[i];
		if(sz == cnt) break;
	}
	if(sz < cnt) return 0;
	rep(i, sz){
		ans[res[i]] = na++;
		cnt = 0;
		rep(j, t_) if(!binary_search(all(e[res[i]]), t[j])){
			ans[t[j]] = na++;
			if(++cnt == 2) break;
		}
	}
	return 1;
}
void run()
{
	memset(ans, -1, sizeof(ans));
	cin >> n >> m;
	e.resize(n);
	rep(i, m){
		int a, b;
		cin >> a >> b;
		e[--a].pb(--b);
		e[b].pb(a);
	}
	rep(i, n) sort(all(e[i]));
	rep(i, n) if(!v[i]) rec(i, 1);
	if(n % 3){
		cout << "NO" << endl;
		return;
	}
	if(sz1 % 3){
		int *s = st1, *t = st2, s_ = sz1, t_ = sz2;
		if(sz1 % 3 == 2) swap(s, t), swap(s_, t_);
		if(!func(s, s_, t, t_, 1) && !func(t, t_, s, s_, 2)){
			cout << "NO" << endl;
			return;
		}
	}
	rep(i, sz1) if(ans[st1[i]] < 0) ans[st1[i]] = na++;
	rep(i, sz2) if(ans[st2[i]] < 0) ans[st2[i]] = na++;
	cout << "YES" << endl;
	rep(i, n) cout << ans[i]/3 + 1 << (i == n-1 ? "\n" : " ");
}

int main()
{
#ifndef ONLINE_JUDGE
	//int cs=3;rep(i,cs)
#endif
	run();
}
