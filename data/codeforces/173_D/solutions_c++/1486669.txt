#include <stdio.h>
#include <string.h>
#include <algorithm>

using namespace std;

struct EDGE
{
	int y;
	EDGE* Next;
};
EDGE EPool[222222];
int EPTop = 0;
EDGE* E[111111];
int Deg[111111];

int insert_edge(int x,int y)
{
	EDGE* Now = &EPool[EPTop++];
	Now->y = y; Now->Next = E[x]; E[x] = Now;
	Deg[x]++;
	return 0;
}

int L[111111];
int R[111111];

int side[111111];

int dfs(int x,int v)
{
	if(side[x] != -1) return 0;
	side[x] = v;
	for(EDGE* e = E[x];e;e = e->Next) dfs(e->y,!v);
	return 0;
}

int deputy[111111];
int mark_deputy(int* LL,int* RR,int lcnt,int rcnt,int idx)
{
	for(int i = 0;i < lcnt;i++) if(deputy[LL[i]] == -1) deputy[LL[i]] = (idx++)/3;
	for(int i = 0;i < rcnt;i++) if(deputy[RR[i]] == -1) deputy[RR[i]] = (idx++)/3;
	return 0;
}

bool conn[111111];
bool find_city(int* LL,int* RR,int lcnt,int rcnt,int& c1,int& c2,int& c3,int ignore=-1)
{
	c1 = c2 = c3 = -1;
	for(int i = 0;i < lcnt;i++)
	{
		int x = LL[i];
		if(x == ignore || Deg[x] > rcnt-2) continue;
		memset(conn,0,sizeof(conn));
		for(EDGE* e = E[x];e;e = e->Next) conn[e->y] = true;

		c1 = x;
		for(int j = 0;j < rcnt;j++)
		{
			if(!conn[RR[j]])
			{
				if(c2 == -1) c2 = RR[j];
				else c3 = RR[j];
			}
		}
		break;
	}
	return c1!=-1;
}

bool try_to_solve(int lcnt,int rcnt)
{
	memset(deputy,-1,sizeof(deputy));
	if(lcnt % 3 == 0 && rcnt % 3 == 0)
	{
		mark_deputy(L,R,lcnt,rcnt,0);
		return true;
	}

	int* LL = L;
	int* RR = R;
	if(lcnt % 3 == 2)
	{
		swap(LL,RR);
		swap(lcnt,rcnt);
	}
	int c[6] = {0};
	if(find_city(LL,RR,lcnt,rcnt,c[0],c[1],c[2]))
	{
		for(int i = 0;i < 3;i++) deputy[c[i]] = 0;
		mark_deputy(LL,RR,lcnt,rcnt,1*3);
		return true;
	}
	if(find_city(RR,LL,rcnt,lcnt,c[0],c[1],c[2]))
	{
		if(find_city(RR,LL,rcnt,lcnt,c[3],c[4],c[5],c[0]))
		{
			for(int i = 0;i < 6;i++) deputy[c[i]] = i/3;
			mark_deputy(LL,RR,lcnt,rcnt,2*3);
			return true;
		}
	}
	return false;
}

int main(void)
{
	int n = 0;
	int m = 0;
	scanf("%d %d",&n,&m);
	for(int i = 0;i < m;i++)
	{
		int x = 0;
		int y = 0;
		scanf("%d %d",&x,&y);
		insert_edge(x,y);
		insert_edge(y,x);
	}
	memset(side,-1,sizeof(side));
	for(int i = 1;i <= n;i++) dfs(i,0);

	int lcnt = 0;
	int rcnt = 0;
	for(int i = 1;i <= n;i++)
	{
		if(!side[i]) L[lcnt++] = i;
		else R[rcnt++] = i;
	}
	if(try_to_solve(lcnt,rcnt))
	{
		puts("YES");
		for(int i = 1;i <= n;i++) printf("%d ",deputy[i]+1);
		putchar('\n');
	}
	else puts("NO");
	return 0;
}
