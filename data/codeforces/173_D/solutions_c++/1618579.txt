#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <string>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <ctime>
#include <cassert>
#include <queue>
#include <list>
#include <bitset>
using namespace std;
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define forit(v,it) for(typeof(v.begin()) it = v.begin(); it != v.end(); ++it)
typedef long long ll;
typedef pair <int, int> pii;
typedef vector <int> vi;

int n,m,cnt[10],c[200000],ans[200000],a[10];
vi e[200000],g1,g2,v[200000];
bool u[200000],used[200000],G[200000];

inline void dfs(int v,int color) {
	c[v] = color;
	++cnt[color];
	forit(e[v],it) {
		int to = *it;
		if(!c[to]) dfs(to,3 - color);
	}
}


int main () {
	#ifdef LOCAL
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	scanf("%d%d",&n,&m);
	for(int i=0;i<m;++i) {
		int x,y;
		scanf("%d%d",&x,&y);
		--x, --y;
		e[x].pb(y), e[y].pb(x);
	}
	for(int i=0;i<n;++i) if(!c[i]) 
		dfs(i,1);
	if(cnt[1]%3 == 2) {
		swap(cnt[1],cnt[2]);
		for(int i=0;i<n;++i)
			c[i] = 3 - c[i];
	}
	for(int i=0;i<n;++i) {
		if(c[i] == 1) g1.pb(i);
		else g2.pb(i);
	}
	if(cnt[1]%3 == 0) {
		puts("YES");
		int l = 0;
		forit(g1,it) {
			ans[*it] = (++l + 2)/3;
		}
		forit(g2,it) {
			ans[*it] = (++l + 2)/3;
		}
		for(int i=0;i<n;++i)
			printf("%d ",ans[i]);
		return 0;
	}

	int ind = -1;
	for(int i=0;i<n;++i) if(c[i] == 1) {
		if((int)e[i].size() < cnt[2] - 1) {
			ind = i;
			break;
		}
	}
	if(ind >= 0) {
		puts("YES");
		int l = 1;
		ans[ind] = 1;
		forit(e[ind],it) {
			u[*it] = true;
		}
		used[ind] = true;
		for(int i=0;i<n  &&  l < 3;++i) {
			if(c[i] == 2  &&  !u[i]) {
				++l;
				ans[i] = 1;
				used[i] = true;
			}
		}
		forit(g1,it) if(!used[*it]) {
			ans[*it] = (++l + 2)/3;
		}
		forit(g2,it) if(!used[*it]) {
			ans[*it] = (++l + 2)/3;
		}
		for(int i=0;i<n;++i)
			printf("%d ",ans[i]);
		return 0;
	}
	for(int i=0;i<n;++i) {
		if(c[i] == 1  &&  (int)e[i].size() == cnt[2] - 1) u[i] = true;
	}
	int z = 0;
	for(int i=0;i<n;++i) if(u[i]) {
		forit(e[i],it) {
			used[*it] = true;
		}
		forit(g2,it) 
			if(!used[*it]) {
				v[*it].pb(i);
				break;
			}
		forit(e[i],it)
			used[*it] = false;
	}      
	for(int i=0;i<n  &&  z < 2;++i) {
		if(c[i] == 2  &&  v[i].size() > 1) a[++z] = i;
	}
	if(z < 2) {
		puts("NO");
		return 0;
	}
	ans[a[1]] = ans[v[a[1]][0]] = ans[v[a[1]][1]] = 1;
	ans[a[2]] = ans[v[a[2]][0]] = ans[v[a[2]][1]] = 2;
	G[a[1]] = G[v[a[1]][0]] = G[v[a[1]][1]] = true;
	G[a[2]] = G[v[a[2]][0]] = G[v[a[2]][1]] = true;
	z = 6;
	forit(g1,it) {
		if(!G[*it]) ans[*it] = (++z + 2)/3;
	}
	forit(g2,it) {
		if(!G[*it]) ans[*it] = (++z + 2)/3;
	}
	puts("YES");
	for(int i=0;i<n;++i)
		printf("%d ",ans[i]);


	return 0;
}