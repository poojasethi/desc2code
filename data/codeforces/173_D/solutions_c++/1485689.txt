#pragma comment (linker, "/STACK:16777216")
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <numeric>
#include <complex>
#include <string>
#ifdef IGEL_ACM
#include <ctime>
#endif

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair <int, int> pnt;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector <vector < pair <int, int> > > VVP;

#define FI(i,a) for (int i=0; i<(a); ++i)
#define RFI(i,a) for (int i=(a); i>=0; --i)
#define FOR(i,s,e) for (int i=(s); i<(e); ++i)
#define RFOR(i,e,s) for (int i=(e); i>=s; --i)
#define MEMS(a,b) memset(a,b,sizeof(a))
#define pb push_back
#define mp make_pair
#define ALL(a) a.begin(),a.end()
#define ISIN(s,a) (s.find(a)!=s.end())
#define sqr(a) ((a)*(a))
#define CPY(a, b) memcpy(a, b, sizeof(a))

#define dout(a) cerr << a << endl
#define sout(a) cerr << a << "  "


const double pi = 3.14159265358979323846264338327950288419716939937511;
const double eps = 1e-9;
//*
char ch_ch_ch[1<<20];
string gs() {scanf("%s",ch_ch_ch); return string(ch_ch_ch);}
string gl() {gets(ch_ch_ch); return string(ch_ch_ch);}
inline int gi() {int x; scanf("%d",&x); return x;}
//*/



VVI G;
int n,m;
int side[111111];
int sdsz[3];

void dfsmark(int v, int col)
{
    if (side[v]) return;
    side[v]=col;
    sdsz[col]++;
    FI(i,G[v].size()) dfsmark(G[v][i],col^3);
}

int vic;

int ass[111111];
int was[111111];

bool findv(int sd, int cnt)  // finds cnt vertexes from side sd which makes 1 - 2 triples
{
    FI(v,n) if (side[v]==sd && cnt)
    {
        if (G[v].size()+2<=sdsz[sd^3])
        {
            --cnt;
            ass[v]=vic;
            MEMS(was,0);
            FI(i,G[v].size()) was[G[v][i]]=1;
            int need=2;
            FI(i,n) if (side[i]==(sd^3) && !was[i] && need) ass[i]=vic,need--;
            vic++;
        }
    }
    return !cnt;
}

void solution()
{   
    scanf("%d%d",&n,&m);
    G.resize(n);
    FI(i,m)
    {
        int u,v;
        scanf("%d%d",&u,&v);
        --u,--v;
        G[u].pb(v);
        G[v].pb(u);
    }
    FI(i,n) if (side[i]==0) dfsmark(i,1);
    int ls=0;
    FI(i,n) ls += side[i]==1;
    vic=1;
    
    dout(ls);
    
    if (ls%3==2) {FI(i,n) side[i]^=3; swap(sdsz[1],sdsz[2]); ls=sdsz[1];}
    
    if (ls%3==1 && !findv(1,1) && !findv(2,2)) {printf("NO\n"); return;}
               
    
    int cnt=0;
    FI(i,n) if (side[i]==1 && !ass[i])
    {
        ass[i]=vic;
        if (++cnt==3) cnt=0,vic++;
    }
    cnt=0;
    FI(i,n) if (side[i]==2 && !ass[i])
    {
        ass[i]=vic;
        if (++cnt==3) cnt=0,vic++;
    }
    
    printf("YES\n");
    FI(i,n) printf("%d%c",ass[i],(i==n-1)?'\n':' ');
    
}



int main(int argc, char** argv)
{
    
       
#ifdef IGEL_ACM
        freopen("sample.in","r",stdin);
	//freopen("sample.in", "w", stdout);
	clock_t beg_time = clock();
#else
        //freopen(argv[1],"r",stdin);
	//freopen("tour.in", "r", stdin);
	//freopen("tour.out", "w", stdout);
#endif
        
        solution(); 


#ifdef IGEL_ACM
	fprintf(stderr,"Time: %.3lf\n",1.0*(clock()-beg_time)/CLOCKS_PER_SEC);
#endif

    return 0;
}