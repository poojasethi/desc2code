#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <map>
#include <queue>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <deque>
#include <assert.h>
#include <ctime>
#include <bitset>
#include <numeric>
#include <complex>
using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (register int i = (a); i < (int)(n); ++i)
#define FORE(i, a, n) for (i = (a); i < (int)(n); ++i)
#define Size(n) ((int)(n).size())
#define all(n) (n).begin(), (n).end()
#define ll long long
#define pb push_back
#define error(x) cout << #x << " = " << x << endl;
#define ull unsigned long long
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define point complex<double>
//#define X real()
//#define Y imag()
#define X first
#define Y second
#define EPS 1e-13
#define endl "\n"
#define pdd pair<double, double>
bool gt(double a, double b) { return a > b+EPS; }

const int MAXN = 111*1000;

int n, m, num = 1;
bool mark[MAXN];
vector<int> adj[MAXN];
pair<vector<int>, vector<int> > comp;
vector<int> res;

void dfs(int pos, int color) {
	if (mark[pos]) return;
	mark[pos] = true;
	(color?comp.X:comp.Y).pb(pos);
	FOREACH(it, adj[pos]) dfs(*it, 1-color);
}

bool make_it_ok() {
	FOREACH(it, comp.X) if (Size(adj[*it]) <= Size(comp.Y)-2) {
		set<int> st(all(comp.Y));
		FOREACH(itt, adj[*it]) st.erase(*itt);
		vector<int> tmp(all(st));
		res[*it] = res[tmp[0]] = res[tmp[1]] = num++;
		comp.X.erase(it);
		FOR(i, 0, 2) comp.Y.erase(find(all(comp.Y), tmp[i]));
		return true;
	}
	int cnt = 0, sx = Size(comp.X);
	FOR(rep, 0, 2) FOREACH(it, comp.Y) if (Size(adj[*it]) <= sx-2) {
		set<int> st(all(comp.X));
		FOREACH(itt, adj[*it]) st.erase(*itt);
		vector<int> tmp(all(st));
		res[*it] = res[tmp[0]] = res[tmp[1]] = num++;
		comp.Y.erase(it);
		FOR(i, 0, 2) comp.X.erase(find(all(comp.X), tmp[i]));
		cnt++;
		break;
	}
	return cnt == 2;
}

int main() {
	ios::sync_with_stdio(false);
	cin >> n >> m;
	FOR(i, 0, m) {
		int x, y;
		cin >> x >> y;
		x--; y--;
		adj[x].pb(y);
		adj[y].pb(x);
	}
	res.resize(n);
	fill(all(res), -1);
	FOR(i, 0, n) if (!mark[i]) dfs(i, 0);
	if (Size(comp.X)%3 == 2) swap(comp.X, comp.Y);
	if (Size(comp.X)%3 == 1 && !make_it_ok()) {
		cout << "NO" << endl;
		return 0;
	}
	FOR(i, 0, Size(comp.X)) res[comp.X[i]] = num, num += i%3==2;
	FOR(i, 0, Size(comp.Y)) res[comp.Y[i]] = num, num += i%3==2;
	cout << "YES" << endl;
	FOREACH(it, res) cout << *it << " ";
	cout << endl;
	return 0;
}

