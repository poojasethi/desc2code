#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<stdio.h>
#include<vector>
#include<queue>
#include<algorithm>
#include<string>
#include<memory.h>
using namespace std;
int dr[] = { 0, 0, 1, -1 };
int dc[] = { 1, -1, 0, 0 };
int n, m, k;
char g[1024][1024], dir[100000];
int y[100000];
vector<pair<int, int> >v;
vector<int>R[1000];
vector<int>C[1000];
string res;
int get(char s){
	if (s == 'E')
		return 0;
	if (s == 'W')
		return 1;
	if (s == 'N')
		return 3;
	return 2;
}
int Hor(int r, int c){
	return lower_bound(R[r].begin(), R[r].end(), c) - R[r].begin();
}
int Ver(int r, int c){
	return lower_bound(C[c].begin(), C[c].end(), r) - C[c].begin();
}
bool solve(int idx){
	int curx = v[idx].first;
	int cury = v[idx].second;
	for (int i = 0; i < k; ++i){
		int d = get(dir[i]);
		int nr = curx + y[i] * dr[d];
		int nc = cury + y[i] * dc[d];
		if (nr < 0 || nc < 0 || nr == n || nc == m)
			return 0;
		if (d < 2){
			int a = Hor(curx, cury) ;
			int b = Hor(nr, nc) ;
			if (a != b || g[nr][nc]=='#')
				return 0;
		}
		else{
			int a = Ver(curx, cury);
			int b = Ver(nr, nc) ;
			if (a != b || g[nr][nc]=='#')
				return 0;
		}
		curx = nr;
		cury = nc;
	}
	return 1;
}
int main(){
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i){
		scanf("%s", g[i]);
		for (int j = 0; j < m; ++j){
			if (g[i][j] >= 'A' && g[i][j] <= 'Z')
				v.push_back(make_pair(i, j));
			else if (g[i][j] == '#'){
				R[i].push_back(j);
				C[j].push_back(i);
			}
		}
	}
	scanf("%d", &k);
	for (int i = 0; i < k; ++i)
		scanf(" %c %d", dir + i, y + i);
	for (int i = 0; i < v.size(); ++i){
		if (solve(i))
			res += g[v[i].first][v[i].second];
	}
	sort(res.begin(), res.end());
	if (!res.size())res = "no solution";
	cout << res << endl;
}