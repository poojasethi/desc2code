#include<cctype>
#include<cstdio>
#include<vector>
#include<algorithm>

#define rep(i,n) for(int i=0;i<(n);i++)

using namespace std;

const int dx[]={1,0,-1,0},dy[]={0,-1,0,1};

struct P{
	int y,x;
	char c;
	bool operator<(const P &p)const{ return c<p.c; }
};

int main(){
	int f[128]; f['E']=0; f['N']=1; f['W']=2; f['S']=3;

	int m,n; scanf("%d%d ",&m,&n);
	static char field[1000][1001];
	vector<P> pos;
	rep(i,m){
		gets(field[i]);
		rep(j,n) if(isalpha(field[i][j])) pos.push_back((P){i,j,field[i][j]});
	}
	sort(pos.begin(),pos.end());

	static int dp[1000][1000][4];
	rep(i,m) rep(j,n) if(field[i][j]!='#') {
		if(i>0 && field[i-1][j]!='#') dp[i][j][1]=dp[i-1][j][1]+1;
		if(j>0 && field[i][j-1]!='#') dp[i][j][2]=dp[i][j-1][2]+1;
	}
	for(int i=m-1;i>=0;i--) for(int j=n-1;j>=0;j--) if(field[i][j]!='#') {
		if(j<n-1 && field[i][j+1]!='#') dp[i][j][0]=dp[i][j+1][0]+1;
		if(i<m-1 && field[i+1][j]!='#') dp[i][j][3]=dp[i+1][j][3]+1;
	}
// rep(i,m){ rep(j,n) printf("%d",dp[i][j][0]); puts(""); } puts("----------");
// rep(i,m){ rep(j,n) printf("%d",dp[i][j][1]); puts(""); } puts("----------");
// rep(i,m){ rep(j,n) printf("%d",dp[i][j][2]); puts(""); } puts("----------");
// rep(i,m){ rep(j,n) printf("%d",dp[i][j][3]); puts(""); } puts("----------");
	int k; scanf("%d ",&k);
	rep(_,k){
		char _dir;
		int len; scanf("%c%d ",&_dir,&len);
		int dir=f[_dir];
		rep(i,pos.size()){
			int &y=pos[i].y,&x=pos[i].x;
			if(dp[y][x][dir]>=len){
				y+=len*dy[dir];
				x+=len*dx[dir];
			}
			else{
				pos.erase(pos.begin()+i);
				i--;
			}
		}
	}

	if(pos.size()==0) puts("no solution");
	else{ rep(i,pos.size()) putchar(pos[i].c); putchar('\n'); }

	return 0;
}
