#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

int X,Y;
char buf[1010];
string board[1010];
int sum[1010][1010];
int K;
string ds = "NSEW";
int dx[] = {-1,1,0,0}, dy[] = {0,0,1,-1};
int dir[100010],len[100010];

bool inside(int x, int y){
    return (x >= 0 && x < X && y >= 0 && y < Y);
}

bool check(int x1, int y1, int x2, int y2){
    if(!inside(x1,y1) || !inside(x2,y2)) return false;
    if(x1 > x2) swap(x1,x2); if(y1 > y2) swap(y1,y2);
    x2++; y2++;
    return (sum[x1][y1] + sum[x2][y2] == sum[x1][y2] + sum[x2][y1]);
}

bool func(int x, int y){
    int i;
    
    REP(i,K){
        int x2 = x + len[i] * dx[dir[i]];
        int y2 = y + len[i] * dy[dir[i]];
        if(!check(x,y,x2,y2)) return false;
        x = x2; y = y2;
    }
    
    return true;
}

int main(void){
    int i,j;
    
    scanf("%d%d",&X,&Y);
    REP(i,X) {scanf("%s",buf); board[i] = buf;}
    scanf("%d",&K);
    REP(i,K){
        scanf("%s",buf);
        REP(j,4) if(ds[j] == buf[0]) break;
        dir[i] = j;
        scanf("%d",&len[i]);
    }
    
    REP(i,X) REP(j,Y) sum[i+1][j+1] = sum[i+1][j] + sum[i][j+1] - sum[i][j] + ((board[i][j] == '#') ? 1 : 0);
    
    string ans;
    REP(i,X) REP(j,Y) if(board[i][j] >= 'A' && board[i][j] <= 'Z'){
        char ch = board[i][j];
        if(func(i,j)) ans += ch;
    }
    
    if(ans.empty()){
        cout << "no solution" << endl;
    } else {
        sort(ans.begin(),ans.end());
        cout << ans << endl;
    }
    
    return 0;
}
