#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;

struct P{
	char d;
	int len;
}ins[100009];

char g[1009][1009];
int n,m,k, num, gg[1009][1009][2];
vector<int> st;
vector<char> ans;

bool dfs(int x,int y, int id){
	if(id>=k)
		return true;
	
	bool flg=true;
	int step=ins[id].len, a;
	if(ins[id].d=='N'){
		a=x-step;
		if(a<=0 || gg[x][y][1]-gg[a-1][y][1]!=0)
			return false;
		x=a;
	}
	else if(ins[id].d=='S'){
		a=x+step;
		if(a>n || gg[a][y][1]-gg[x-1][y][1]!=0)
			return false;
		x=a;
	}
	else if(ins[id].d=='E'){
		a=y+step;
		if(a>m || gg[x][a][0]-gg[x][y-1][0]!=0)
			return false;
		y=a;
	}
	else if(ins[id].d=='W'){
		a=y-step;
		if(a<=0 || gg[x][y][0]-gg[x][a-1][0]!=0)
			return false;
		y=a;
	}
	if(!dfs(x,y,id+1))
		return false;
	return true;
}

int main()
{
//	freopen("in.txt","r",stdin);
	while(cin >> n >> m){
		st.clear();
		for(int i=1; i<=n; ++i){
//			scanf("%s",g[i]+1);
			for(int j=1; j<=m; ++j){
				cin >> g[i][j];
				if('A'<=g[i][j] && g[i][j]<='Z')
					st.push_back(i),st.push_back(j);
			}
		}
		memset(gg,0,sizeof(gg));
		for(int i=1; i<=n; ++i){
			for(int j=1; j<=m; ++j){
				if(g[i][j]=='#')
					gg[i][j][0]=gg[i][j-1][0]+1,gg[i][j][1]=gg[i-1][j][1]+1;
				else gg[i][j][0]=gg[i][j-1][0], gg[i][j][1]=gg[i-1][j][1];
			}
		}
		cin >> k;
		for(int i=0; i<k; ++i,num++)
			cin >> ins[i].d >> ins[i].len;

		ans.clear();
		for(int i=0; i<st.size(); i+=2){
			int x=st[i],y=st[i+1];
			if(dfs(x,y,0))
				ans.push_back(g[x][y]);
		}
		sort(ans.begin(),ans.end());
		if(ans.size()==0)
			cout << "no solution" << endl;
		else{
			for(int i=0; i<ans.size(); ++i)
				cout << ans[i];
			cout << endl;
		}
	}
	return 0;
}
	  			 				 	  	  	 	 		  	