#include <iostream>
#include <algorithm>
#include <vector>

#define rep(i,x) for(int i=0; i<x; ++i)
#define all(x) x.begin(),x.end()
#define MX 1000
#define MX2 1000*100

using namespace std;

int a[MX][MX];
int can[MX][MX][4];

int dir[MX2], step[MX2];
int n,m;

int d[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
char dr[5] = "NSWE";
int rev[4] = {1,0,3,2};

bool ok(int y, int x)
{ return 0<=y && y<n && 0<=x && x<m; }

void init()
{
	rep(i,n)
		rep(j,m)
		{
			if (a[i][j]==-2)
			{
				rep(k,4)
				{
					int di=0;
					int y=i, x=j;
					while(1)
					{
						y += d[k][0];
						x += d[k][1];
						if (ok(y,x) && a[y][x]!=-2)
						{
							can[y][x][rev[k]] = di;
							di++;
						}
						else break;
					}
				}
			}
		}
}

int main()
{
	cin >> n >> m;
	
	rep(i,n)
	{
		string s; cin >> s;
		rep(j,m)
			a[i][j] = (s[j]=='#' ? -2 : (s[j]=='.' ? -1 : s[j]-'A'));
	}

	init();

	int M; cin >> M;
	
	rep(i,M)
	{
		char c;
		cin >> c >> step[i];
		rep(j,4) if (c==dr[j]) dir[i]=j;
	}
	
	string ans;
	
	rep(i,n) rep(j,m)
	{
		if (a[i][j]>=0)
		{
			int y=i,x=j;
			int ok=1;
			rep(k,M)
			{
				int di = dir[k];
				if (step[k] <= can[y][x][di])
				{
					y += step[k] * d[di][0];
					x += step[k] * d[di][1];
				}
				else
				{
					ok = 0;
					break;
				}
			}
			if (ok) ans += (char)(a[i][j]+'A');
		}
	}
	
	sort(all(ans));
	cout << (ans.size() ? ans : "no solution") << endl;
	
	return 0;
}
