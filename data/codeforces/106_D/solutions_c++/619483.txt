#define mset(a) memset(a,0,sizeof(a))

#include <vector>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
char s[1100][1100];



struct P
{
char c;
int x,y;
}ppppp[2];

bool com(const P &a,const P &b)
{
	return a.c<b.c;
}

int dong[1100][1100],xi[1100][1100],nan[1100][1100],bei[1100][1100];

int main()
{
int n,m;
scanf("%d%d",&n,&m);
for(int i=0;i<n;i++)
	scanf("%s",s[i]);
vector<P> v;
for(int i=0;i<n;i++)
	for(int j=0;j<m;j++)
		if(s[i][j]>='A'&&s[i][j]<='Z')
		{
			P p;
			p.c=s[i][j];
			p.x=i;
			p.y=j;
			v.push_back(p);
		}
mset(dong);
mset(xi);
mset(nan);
mset(bei);
for(int i=1;i<n;i++)
	for(int j=1;j<m;j++)
	{
		if(s[i][j]!='#')
		{
			if(s[i][j-1]!='#')
				xi[i][j]=xi[i][j-1]+1;
			if(s[i-1][j]!='#')
				bei[i][j]=bei[i-1][j]+1;
		}
	}
for(int i=n-2;i>=0;i--)
	for(int j=m-2;j>=0;j--)
	{
		if(s[i][j]!='#')
		{
			if(s[i][j+1]!='#')
				dong[i][j]=dong[i][j+1]+1;
			if(s[i+1][j]!='#')
				nan[i][j]=nan[i+1][j]+1;
		}
	}
int k;
scanf("%d",&k);
while(k--)
{
	char ddd[5];
	char d;
	int dd;
	scanf("%s%d",ddd,&dd);
	d=ddd[0];
	vector<P>::iterator it=v.begin();
	while(it!=v.end())
	{
		int x=it->x,y=it->y;
		if(d=='N')
			if(bei[x][y]>=dd)
			{
				it->x-=dd;
				it++;continue;
			}
			else
			{
			it=v.erase(it);
			}

		if(d=='E')
			if(dong[x][y]>=dd)
			{
				it->y+=dd;
				it++;continue;
			}
			else
			{
			it=v.erase(it);
			}
		if(d=='S')
			if(nan[x][y]>=dd)
			{
				it->x+=dd;
				it++;continue;
			}
			else
			{
			it=v.erase(it);
			}
		if(d=='W')
			if(xi[x][y]>=dd)
			{
				it->y-=dd;
				it++;continue;
			}
			else
			{
			it=v.erase(it);
			}
	}
}
if(v.size()==0)
	printf("no solution\n");
else
{
	sort(v.begin(),v.end(),com);
	for(int i=0;i<v.size();i++)
		printf("%c",v[i].c);
	printf("\n");
}
return 0;
}
