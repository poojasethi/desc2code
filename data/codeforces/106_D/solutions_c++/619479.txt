#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdio>
using namespace std;
#define rep(i,n) for(int i=0; i<n; i++)
#define all(c) (c).begin(), (c).end()
const int inf = (1<<28);
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

const int W = 1001, H = 1001, K = 100000;
int w, h, k;
char m[H][W], buf[2];
int dir[K], len[K];
int sx[26], sy[26];
char sight[26];

int memo[H][W][4];
void init() {
  rep(i, h) rep(j, w) rep(k, 4) {
    if(m[i][j] != '#') continue;
    int nx = j, ny = i, cnt = 0;
    do {
      nx += dx[k]; ny += dy[k]; cnt++;
      if(nx==-1||nx==w||ny==-1||ny==h) break;
      if(m[ny][nx] == '#') break;
      memo[ny][nx][(k+2)%4] = cnt;
    } while(true);
  }
}
bool trans(int x, int y, int d, int l, int &nx, int &ny) {
  if(memo[y][x][d] <= l) return false;
  nx = x + dx[d] * l;
  ny = y + dy[d] * l;
  return true;
}

bool solve(int x) {
  int cx = sx[x], cy = sy[x];
  rep(i, k) {
    int nx, ny;
    if(!trans(cx, cy, dir[i], len[i], nx, ny)) return false;
    cx = nx; cy = ny;
  }
  return true;
}

int main() {
  while(scanf("%d%d", &h, &w) != EOF) {
    rep(i, h) scanf("%s", m[i]);
    scanf("%d", &k);
    rep(i, k) {
      scanf("%s%d", buf, &len[i]);
      dir[i] = buf[0]=='E'?0:buf[0]=='S'?1:buf[0]=='W'?2:3;
    }
    int cnt = 0;
    rep(i, h) rep(j, w)
      if('A' <= m[i][j] && m[i][j] <= 'Z') {
        sx[cnt] = j; sy[cnt] = i; sight[cnt] = m[i][j];
        cnt++;
      }
    
    rep(i, h) rep(j, w) rep(k, 4) memo[i][j][k] = inf;
    init();
    
    vector<char> ans;
    rep(i, cnt) if(solve(i)) ans.push_back(sight[i]);
    
    if(ans.empty()) printf("no solution\n");
    else {
      sort(all(ans));
      rep(i, ans.size()) printf("%c", ans[i]);
      printf("\n");
    }
  }
  
  return 0;
}
