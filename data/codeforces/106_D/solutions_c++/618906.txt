#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<set>
#include<string>
using namespace std;

char s[1002][1002],d[100002];
int N,M,K,L[100002];
int row[1002][1002],col[1002][1002];

class node
{
	public:
	int r,c;
};

bool operator < (const node &a,const node &b)
{
	if(a.r!=b.r)return a.r<b.r;
	return a.c<b.c;
}

set<node> ret;

int main()
{
	ret.clear();
	scanf("%d %d",&N,&M);
	
	for(int i=0;i<N;i++)
	scanf("%s",s[i]);
	
	for(int i=0;i<N;i++)
	{
		int c=0;
		for(int j=0;j<M;j++)
		{
			if(s[i][j]=='#')c++;
			row[i][j+1]=c;
		}
	}
	
	for(int i=0;i<M;i++)
	{
		int c=0;
		for(int j=0;j<N;j++)
		{
			if(s[j][i]=='#')c++;
			col[i][j+1]=c;
		}
	}
	
	scanf("%d",&K);
	
	for(int i=0;i<K;i++)
	{
		char cc[5];
		scanf("%s %d",cc,&L[i]);
		d[i]=cc[0];
	}
	
	int curr,curc;
	string h;
	
	for(int i=0;i<N;i++)
	{
		for(int j=0;j<M;j++)
		{
			curr=i,curc=j;
			
			if(s[i][j]>='A' && s[i][j]<='Z')
			{
				int F=0;
				for(int k=0;k<K;k++)
				{
					int f=0;
					if(d[k]=='N')
					{
						if(curr-L[k]<0 || col[curc][curr+1]-col[curc][curr-L[k]]!=0)f=1;
						curr-=L[k];
					}
					if(d[k]=='S')
					{
						if(curr+L[k]>=N || col[curc][curr+L[k]+1]-col[curc][curr]!=0)f=1;
						curr+=L[k];
					}
					if(d[k]=='E')
					{
						if(curc+L[k]>=M || row[curr][curc+L[k]+1]-row[curr][curc]!=0)f=1;
						curc+=L[k];
					}
					if(d[k]=='W')
					{
						if(curc-L[k]<0 || row[curr][curc+1]-row[curr][curc-L[k]]!=0)f=1;
						curc-=L[k];
					}
					
					if(f)
					{
						F=1;
						break;
					}
				}
				if(!F)
				{
					node t;
					t.r=curr;
					t.c=curc;
					h+=s[i][j];
					ret.insert(t);
				}
			}
		}
	}
	sort(h.begin(),h.end());
	if((int)h.size()!=0)printf("%s\n",h.c_str());
	else printf("no solution\n");
	
}
