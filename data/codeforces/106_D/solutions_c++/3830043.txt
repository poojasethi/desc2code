#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 1010;

char s[N][N];
int sum[N][N];

int get(int x1,int y1,int x2,int y2)
{
	if(x1 > x2) swap(x1,x2);
	if(y1 > y2) swap(y1,y2);
	return sum[x2][y2] + sum[x1 - 1][y1 - 1] - sum[x2][y1 - 1] - sum[x1 - 1][y2];
}

struct point
{
	char cd[3];
	int x;
	void read() {
		scanf("%s%d",cd,&x);
	}
}a[N * 100];

int rx[26],ry[26];
int dir[4][2] = {0,1,0,-1,1,0,-1,0};

int change(char c)
{
	if(c == 'E') return 0;
	if(c == 'W') return 1;
	if(c == 'N') return 3;
	return 2;
}

int main()
{
	memset(rx,-1,sizeof(rx));
	memset(ry,-1,sizeof(ry));
	int r,n,m;
	scanf("%d%d",&n,&m);
	memset(sum,0,sizeof(sum));
	for(int i = 1; i <= n; i ++) {
		scanf("%s",s[i] + 1);
		for(int j = 1; j <= m; j ++) {
			if(s[i][j] == '#') sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];
			else sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + 1;
			if(s[i][j] >= 'A' && s[i][j] <= 'Z') {
				int x = s[i][j] - 'A';
				rx[x] = i;
				ry[x] = j;
			}
		}
	}
	scanf("%d",&r);
	for(int i = 1; i <= r; i ++) a[i].read();
	bool flag = false;
	for(int i = 0; i < 26; i ++) {
		if(rx[i] == -1) continue;
		int x = rx[i];
		int y = ry[i];
		bool f = true;
		for(int j = 1; j <= r && f; j ++) {
			int d = change(a[j].cd[0]);
			int tx = x + dir[d][0] * a[j].x;
			int ty = y + dir[d][1] * a[j].x;
			if(!(tx >= 1 && tx <= n && ty >= 1 && ty <= m)) {
				f = false;
				continue;
			}
			if(get(x,y,tx,ty) != a[j].x + 1) {
				f = false;
				continue;
			}
			x = tx,y = ty;
		}
		if(f) {
			flag = true;
			printf("%c",i + 'A');
		}
	}
	if(flag) printf("\n");
	else printf("no solution\n");
	return 0;
}

