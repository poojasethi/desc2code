#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstring>

using namespace std;

int R, C;

vector <string> M;

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

int f(string s)
{
	if(s=="N") return 0;
	else if(s=="E") return 1;
	else if(s=="S") return 2;
	else return 3;
}

int memo[1005][1005][4];

int maxD(int i, int j, int d)
{
	if(i < 0 || i >= R || j < 0 || j >= C || M[i][j] == '#') return 0;
	
	else if(memo[i][j][d] != -1) return memo[i][j][d];
	
	else return memo[i][j][d] = 1 + maxD(i + dx[d], j + dy[d], d);
}

int main()
{
	while(cin>>R>>C)
	{
		M = vector <string> (R);
		
		for(int i=0; i<R; i++)
			cin>>M[i];
		
		memset(memo, -1, sizeof(memo));
		
		int n;
		cin>>n;
		
		int D[n], K[n];
		
		for(int i=0; i<n; i++)
		{
			string s;
			cin>>s>>K[i];
			D[i] = f(s);
		}
		
		string x = "";
		
		for(int i=0; i<R; i++)
		{
			for(int j=0; j<C; j++)
			{
				if(M[i][j] >= 'A' && M[i][j] <= 'Z')
				{
					int I = i, J = j, ok = 1;
					for(int u=0; u<n; u++)
					{
						if(K[u] <= maxD(I, J, D[u]) - 1)
						{
							I += K[u]*dx[D[u]];
							J += K[u]*dy[D[u]];
						}
						else
						{
							ok = 0;
							break;
						}
					}
					if(ok) x += M[i][j];
				}
			}
		}
		
		sort(x.begin(), x.end());
		if(x != "") cout<<x<<endl;
		else cout<<"no solution"<<endl;
	}
	
	return 0;
}
