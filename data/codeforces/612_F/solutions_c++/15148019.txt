#include <iostream>
#include <map>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

const int infinito=1000000001;

int n;
int v[1000000];

int distle(int posini,int posfin)
{
  if (posini>=posfin) return posini-posfin;
  return n-(posfin-posini);
}

int distri(int posini,int posfin)
{
  if (posini<=posfin) return posfin-posini;
  return n-(posini-posfin);
}

int dist(int posini,int posfin)
{
  return min(distle(posini,posfin),distri(posini,posfin));
}

void escribe(vector<int> v)
{
  for (int i=0;i<int(v.size());i++)
    cout<<v[i]<<",";
  cout<<endl;
}

int calcula(vector<int> &pospre,
	    vector<int> &posact,
	    int ipre,
	    int iact)
{
  int posini=pospre[ipre];
  int posfin=posact[iact];
  //cout<<"calcula "<<ipre<<" "<<iact<<" "<<posini<<" "<<posfin<<endl;
  //escribe(pospre);
  //escribe(posact);
  int nact=int(posact.size());
  if (nact==1) return dist(posini,posfin);
  int posle=posact[(iact-1+nact)%nact];
  int posri=posact[(iact+1)%nact];
  return min(dist(posini,posle)+distle(posle,posfin),
	     dist(posini,posri)+distri(posri,posfin));
}

void genera(int posini,int posfin)
{
  int dle=distle(posini,posfin);
  int dri=distri(posini,posfin);
  if (dle<dri) cout<<"-"<<dle<<endl;
  else cout<<"+"<<dri<<endl;
}

void genera(vector<int> &pospre,
	    vector<int> &posact,
	    int ipre,
	    int iact)
{
  int posini=pospre[ipre];
  int posfin=posact[iact];
  //cout<<"GENERA "<<ipre<<" "<<iact<<" "<<posini<<" "<<posfin<<" "<<val<<endl;
  //escribe(pospre);
  //escribe(posact);
  int nact=int(posact.size());
  if (nact==1) {
    genera(posini,posfin);
    return;
  }
  int ile=(iact-1+nact)%nact;
  int iri=(iact+1)%nact;
  int posle=posact[ile];
  int posri=posact[iri];
  if (dist(posini,posle)+distle(posle,posfin)<dist(posini,posri)+distri(posri,posfin)) {
    genera(posini,posle);
    for (int i=ile;i!=iact;i=(i-1+nact)%nact)
      genera(posact[i],posact[(i-1+nact)%nact]);
  } else {
    genera(posini,posri);
    for (int i=iri;i!=iact;i=(i+1)%nact)
      genera(posact[i],posact[(i+1)%nact]);
  }	     
}


map<int,vector<int> > pos;
map<int,vector<int> > sol;
map<int,vector<int> > ant;

int main()
{
  int ini;
  cin>>n>>ini;
  pos[-infinito].push_back(ini);
  sol[-infinito].push_back(0);
  ant[-infinito].push_back(-1);
  for (int i=1;i<=n;i++) {
    cin>>v[i];
    pos[v[i]].push_back(i);
    sol[v[i]].push_back(infinito);
    ant[v[i]].push_back(-1);
  }
  map<int,vector<int> >::iterator it=pos.begin();
  for (;;) {
    int valpre=it->first;
    vector<int> &pospre=pos[valpre];
    vector<int> &solpre=sol[valpre];
    it++;
    if (it==pos.end()) break;
    int valact=it->first;
    vector<int> &posact=pos[valact];
    vector<int> &solact=sol[valact];
    vector<int> &antact=ant[valact];
    for (int ipre=0;ipre<int(pospre.size());ipre++) {
      for (int iact=0;iact<int(posact.size());iact++) {
	int coste=calcula(pospre,posact,ipre,iact);
	if (solpre[ipre]+coste<solact[iact]) {
	  solact[iact]=solpre[ipre]+coste;
	  antact[iact]=ipre;
	}
      }
    }
  }
  it=pos.end();
  it--;
  int valact=it->first;
  vector<int> &solact=sol[valact];
  int imax=0;
  for (int i=1;i<int(solact.size());i++)
    if (solact[i]<solact[imax])
      imax=i;
  cout<<solact[imax]<<endl;
  vector<int> lista(1,imax);
  while (it!=pos.begin()) {
    imax=ant[it->first][imax];
    lista.push_back(imax);
    it--;
  }
  reverse(lista.begin(),lista.end());
  for (int i=0;i<int(lista.size())-1;i++) {
    vector<int> &pospre=it->second;
    it++;
    vector<int> &posact=it->second;
    int ipre=lista[i];
    int iact=lista[i+1];
    genera(pospre,posact,ipre,iact);
  }
}
