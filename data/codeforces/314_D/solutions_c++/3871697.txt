#include <cstdio>
#include <algorithm>

using namespace std;

#define llg long long

const int N = 1e5+10;
const llg inf = -1llu/4;
const llg E = 1e6;

int n;
struct point {
  llg x,y;
  point () { }
  point (llg _x, llg _y) {
    x = _x, y = _y;
  }
} p[N];
llg minL[N],maxL[N];
llg minR[N],maxR[N];
int q[N];

inline bool comp (point a, point b) {
  return a.x < b.x;
}

inline bool check (llg md) {
  md *= 2;
  for (int r = 0,f = 0;r < n;r ++) {
    while (f <= r and p[r].x-p[f].x > md) {
      f ++;
    }

    if (max (maxL[f], maxR[r])-min (minL[f], minR[r]) <= md) {
      return true;
    }
  }

  return false;
}

int main () {
  scanf ("%d", &n);

  for (int i = 0;i < n;i ++) {
    int x,y;
    scanf ("%d %d", &x, &y);

    p[i] = point ((x-y)*E, (x+y)*E);
  }

  sort (p, p+n, comp);

  minL[0] = inf; maxL[0] = -inf;
  for (int i = 1;i < n;i ++) {
    minL[i] = min (minL[i-1], p[i-1].y);
    maxL[i] = max (maxL[i-1], p[i-1].y);
  }

  minR[n-1] = inf; maxR[n-1] = -inf;
  for (int i = n-2;i >= 0;i --) {
    minR[i] = min (minR[i+1], p[i+1].y);
    maxR[i] = max (maxR[i+1], p[i+1].y);
  }

  llg lo = 0,hi = inf;
  while (lo < hi) {
    llg md = lo+hi >> 1;
    if (check (md)) {
      hi = md;
    } else {
      lo = md+1;
    }
  }
  printf ("%lf\n", double(lo)/E);
}
