//In the name of God
#include <algorithm>
#include <iostream>
using namespace std;

#define int long long
typedef pair<int, int> pii;
#define X first
#define Y second
const int N = 1e5 + 3, oo = 1e15 + 4;

int n, mn[N], mx[N], dmn[N], dmx[N];
pii p[N];

bool acp(int l) {
	for (int p1 = 0, p2 = 0; p1 < n; p1++) {
		while (p2 < n && p[p2].X - p[p1].X <= l)
			p2++;
		int a = oo, b = -oo;
		if (p1) {
			a = min(a, mn[p1 - 1]);
			b = max(b, mx[p1 - 1]);
		}
		if (p2 < n) {
			a = min(a, dmn[p2]);
			b = max(b, dmx[p2]);
		}
		if (b - a <= l)
			return true;
	}
	return false;
}
main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 0, x, y; i < n; i++) {
		cin >> x >> y;
		p[i] = pii(x + y, x - y);
	}
	sort(p, p + n);
	mn[0] = mx[0] = p[0].Y;
	dmn[n - 1] = dmx[n - 1] = p[n - 1].Y;
	for (int i = 1; i < n; i++) {
		mn[i] = min(mn[i - 1], p[i].Y);
		mx[i] = max(mx[i - 1], p[i].Y);
		dmn[n - 1 - i] = min(dmn[n - i], p[n - i - 1].Y);
		dmx[n - 1 - i] = max(dmx[n - i], p[n - i - 1].Y);
	}
	int st = -1, ed = oo;
	while (ed - st > 1) {
		int mid = st + ed >> 1;
		if (acp(mid))
			ed = mid;
		else
			st = mid;
	}
	cout << fixed << ed / 2. << '\n';
	return 0;
}
