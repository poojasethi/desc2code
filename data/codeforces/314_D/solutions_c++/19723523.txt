#include <bits/stdc++.h>

using namespace std;

#define NN 110000
#define inf 10000000000000LL
#define eps 1e-8
#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define x first
#define y second

typedef long long INT;
typedef pair<INT, INT> pii;

int N;
pii p[NN];
INT fmx[NN], fmn[NN];
INT bmx[NN], bmn[NN];

bool possible(INT d) {
	for (int i=0, j=0; j<N; i++) {
		while (j<N && p[j].x<=p[i].x+d) j++;
		INT mx=max(fmx[i], bmx[j]);
		INT mn=min(fmn[i], bmn[j]);
		if (mx<=mn+d) return true;
	}
	return false;
}

int main() {
	scanf("%d", &N);
	for (int i=0; i<N; i++) scanf("%I64d%I64d", &p[i].x, &p[i].y);
	
	for (int i=0; i<N; i++) p[i]=pii(p[i].x+p[i].y, p[i].x-p[i].y);
	
	sort(p, p+N);
	
	fmx[0]=-inf; fmn[0]=inf;
	for (int i=0; i<N; i++) {
		fmx[i+1]=max(fmx[i], p[i].y);
		fmn[i+1]=min(fmn[i], p[i].y);
	}
	
	bmx[N]=-inf; bmn[N]=inf;
	for (int i=N-1; i>=0; i--) {
		bmx[i]=max(bmx[i+1], p[i].y);
		bmn[i]=min(bmn[i+1], p[i].y);
	}
	
	INT high=inf, low=0;
	while (high-low>1) {
		INT mid=(high+low)/2;
		if (possible(mid)) high=mid;
		else low=mid;
	}
	
	if (possible(low)) printf("%lf\n", low/2.0);
	else if (possible(high)) printf("%lf\n", high/2.0);
	
	return 0;
}
      