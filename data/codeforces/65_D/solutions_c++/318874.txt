#include <iostream>
#include <map>
using namespace std;
struct State {
	int a[4];
	bool operator<(const State& s) const {
		for(int i=0; i<4; ++i)
			if (a[i]!=s.a[i]) return a[i]<s.a[i];
		return 0;
	}
	int cs() {
		int low=1e8;
		for(int i=0; i<4; ++i) low = min(low, a[i]);
		int r=0;
		for(int i=0; i<4; ++i) r |= (a[i]==low)<<i;
		return r;
	}
};
map<State,int> dp;

const char* ns[4] = {"Gryffindor", "Hufflepuff", "Ravenclaw", "Slytherin"};
int N;
char line[1<<20];
int choise[1<<20];

int dfs(State s) {
	if (dp.count(s)) return dp[s];
	int n=0;
	for(int i=0; i<4; ++i) n+=s.a[i];
	if (n==N) {
		return s.cs();
	}
	if (choise[n]>=0) {
		State s0 = s;
		++s.a[choise[n]];
		return dp[s0] = dfs(s);
	}
	int r = 0;
	int cs = s.cs();
	for(int i=0; i<4; ++i) {
		if (!(cs&(1<<i))) continue;
		++s.a[i];
		r |= dfs(s);
		--s.a[i];
	}
	return dp[s] = r;
}

int main()
{
	cin>>N>>line;
	for(int i=0; i<N; ++i) {
		if (line[i]=='?') {
			choise[i] = -1;
		} else {
			int j=0;
			while(ns[j][0] != line[i]) ++j;
			choise[i] = j;
		}
	}

	State start;
	for(int i=0; i<4; ++i) start.a[i]=0;
	int r = dfs(start);
	for(int i=0; i<4; ++i) {
		if (r&(1<<i)) cout<<ns[i]<<'\n';
	}
}
