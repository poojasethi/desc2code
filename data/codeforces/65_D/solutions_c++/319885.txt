#include<cstdio>
#include<cassert>
#include<cctype>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<string>
#include<cstring>
using namespace std;

const int N=10005;
char hat[N];
int n;

bool ans[] = {
	0,
	0,
	0,
	0
};

struct S {
	int g,h,r,s;
	S (int a=0, int b=0, int c=0 ,int d=0){
		g=a; h=b; r=c; s=d;
	}
	bool operator < (const S &x) const {
		if(x.g!=g) return g<x.g;
		if(x.h!=h) return h<x.h;
		if(x.r!=r) return r<x.r;
		if(x.s!=s) return s<x.s;
		return false;
	}
};

set<S>mem;

void go(int g, int h, int r, int s){
	if(mem.count(S(g,h,r,s))) return;
	mem.insert(S(g,h,r,s));
	int next = g+h+r+s;
	int mn=g;
	if(h<mn) mn=h;
	if(r<mn) mn=r;
	if(s<mn) mn=s;
	if(next==n) {
		if(g==mn) ans[0]=1;
		if(h==mn) ans[1]=1;
		if(r==mn) ans[2]=1;
		if(s==mn) ans[3]=1;
		return;
	}
	if(hat[next]!='?'){
		if(hat[next]=='G') go(g+1,h,r,s);
		if(hat[next]=='H') go(g,h+1,r,s);
		if(hat[next]=='R') go(g,h,r+1,s);
		if(hat[next]=='S') go(g,h,r,s+1);
	} else {
		if(g==mn) go(g+1,h,r,s);
		if(h==mn) go(g,h+1,r,s);
		if(r==mn) go(g,h,r+1,s);
		if(s==mn) go(g,h,r,s+1);
	}
}

main(){
	scanf("%d",&n);
	scanf("%s", hat);
	go(0,0,0,0);
	if(ans[0]) printf("Gryffindor\n");
	if(ans[1]) printf("Hufflepuff\n");
	if(ans[2]) printf("Ravenclaw\n");
	if(ans[3]) printf("Slytherin\n");
	return 0;
}
