#include <cstdio>
#include <algorithm>
#include <cstring>
#include <set>
using namespace std;

struct rec{
	int G,R,H,S;
	rec(){}
	rec(int G,int R,int H,int S):G(G),R(R),H(H),S(S){}
	bool operator < (rec const &T) const{
		if (G!=T.G) return G<T.G;
		if (R!=T.R) return R<T.R;
		if (H!=T.H) return H<T.H;
		if (S!=T.S) return S<T.S;
		return 0;
	}
};

int n,cnt,mn,rg,rr,rh,rs;
set<rec> S;
rec tmp[10005],T;
char s[10005];


int main(){

	scanf("%d",&n);
	scanf("%s",s);
	
	S.clear();
	S.insert(rec(0,0,0,0));
	
	for (int i=0;i<=n;i++){
		cnt=0;
		for (set<rec>::iterator j=S.begin(); j!=S.end(); j++) tmp[cnt++] = *j;
		S.clear();
		rg=rr=rh=rs=0;
		for (int j=0;j<cnt;j++){
			T = tmp[j];
			if (i==n||s[i]=='?'){
				mn = min(min(T.G,T.R),min(T.H,T.S));
				if (T.G==mn) S.insert(rec(T.G+1,T.R,T.H,T.S)),rg=1;
				if (T.R==mn) S.insert(rec(T.G,T.R+1,T.H,T.S)),rr=1;
				if (T.H==mn) S.insert(rec(T.G,T.R,T.H+1,T.S)),rh=1;
				if (T.S==mn) S.insert(rec(T.G,T.R,T.H,T.S+1)),rs=1;
			}
			else if (s[i]=='G') S.insert(rec(T.G+1,T.R,T.H,T.S));
			else if (s[i]=='R') S.insert(rec(T.G,T.R+1,T.H,T.S));
			else if (s[i]=='H') S.insert(rec(T.G,T.R,T.H+1,T.S));
			else if (s[i]=='S') S.insert(rec(T.G,T.R,T.H,T.S+1));
		}
	}
	
	if (rg) printf("Gryffindor\n");
	if (rh) printf("Hufflepuff\n");
	if (rr) printf("Ravenclaw\n");
	if (rs) printf("Slytherin\n");

	return 0;
}
