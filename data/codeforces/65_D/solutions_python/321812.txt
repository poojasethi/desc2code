import string
import itertools
import collections

TEST = False


class State(object):
    def __init__(self, count, idx=None):
        if idx is not None:
            count = list(count) # copy
            count[idx] += 1
        self.count = count
    def __repr__(self):
        return str(self.count)
    def __eq__(self, other):
        return self.count.__eq__(other.count)
    def __hash__(self):
        return hash(tuple(self.count))

char2idx = {'G': 0, 'R': 1,'S': 2, 'H': 3}
idx2name = {0: 'Gryffindor',
            1: 'Ravenclaw',
            2: 'Slytherin',
            3: 'Hufflepuff '}
def func(x):
    states = set()
    states.add(State([0,0,0,0]))
    for el in list(x):
        if el == '?':
            # create alternative state scenarios
            new_states = set()
            for s in states:
                min_count = min(s.count)
                for i in range(4):
                    if s.count[i] == min_count:
                        new_states.add(State(s.count, i))
            states = new_states
        else:
            for s in states:
                s.count[char2idx[el]] += 1
    # find posible outcomes
    candidates = set()
    for s in states:
        min_count = min(s.count)
        for i in range(4):
            if s.count[i] == min_count:
                candidates.add(i)
    return sorted([idx2name[c] for c in candidates])

if TEST:
    desired = [('G????SS???H', ['Gryffindor','Ravenclaw']),
               ('H?', ['Gryffindor','Ravenclaw','Slytherin'])]
    for x, res in desired:
        y = func(x)
        print x, y, res
        assert y == res
else:
    nv = int(raw_input())
    x = raw_input()
    for g in func(list(x)):
        print g
