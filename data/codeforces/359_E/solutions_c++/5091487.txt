#include <iostream>

using namespace std;

const int MAXN = 1000;
int n, d[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
char dir[4] = {'D', 'U', 'R', 'L'}, back[4] = {'U', 'D', 'L', 'R'};
bool mark[MAXN][MAXN], use[MAXN][MAXN], movedIn[MAXN][MAXN];
string ans;

void dfs(int x, int y)
{
	movedIn[x][y] = true;
	if (!mark[x][y])
	{
		mark[x][y] = true;
		ans += '1';
	}
	for (int i = 0; i < 4; i++)
	{
		int x1 = x + d[i][0], y1 = y + d[i][1];
		while (use[x1][y1])
		{
			if (mark[x1][y1])
				break;
			x1 += d[i][0];
			y1 += d[i][1];
		}
		if (use[x1][y1] && !movedIn[x + d[i][0]][y + d[i][1]])
		{
			ans += dir[i];
			dfs(x + d[i][0], y + d[i][1]);
			ans += back[i];
		}
	}
	mark[x][y] = false;
	ans += '2';
}

int main()
{
	int x, y;
	cin >> n >> x >> y;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
		{
			int tmp;
			cin >> tmp;
			mark[i][j] = tmp == 1 ? true : false;
			use[i][j] = true;
		}
	dfs(x, y);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			if (mark[i][j])
			{
				cout << "NO" << endl;
				return 0;
			}
	cout << "YES" << endl << ans << endl;
	return 0;
}
