#include <iostream>
#include <vector>
using namespace std;

#define SZ(x) ((int)(x).size())
#define __ ios::sync_with_stdio(0);

const int N = 505;
int n;
bool room[N][N], vis[N][N];
string ans;

int dx[4] = {1, 0, 0, -1};
int dy[4] = {0, 1, -1, 0};
string dir[4] = {"D", "R", "L", "U"};

bool is_ok(int x, int y)
{
     return x >= 0 && x < n && y >= 0 && y < n;
}

void dfs(int x, int y)
{
     vis[x][y] = 1;
     if (!room[x][y])
     {
	  room[x][y] = 1;
	  ans += "1";
     }
     
     for (int i = 0; i < 4; ++i)
     {
	  if (is_ok(x+dx[i],y+dy[i]) && !vis[x+dx[i]][y+dy[i]])
	  {
	       bool flag = 0;
	       for (int xx = x+dx[i]; xx >= 0 && xx < n && !flag; xx += dx[i])
	       {
		    for (int yy = y+dy[i]; yy >= 0 && yy < n && !flag; yy += dy[i])
		    {
			 flag = room[xx][yy];
			 if (dy[i] == 0) break;
		    }
		    if (dx[i] == 0) break;
	       }
	       if (flag)
	       {
		    ans += dir[i];
		    dfs(x+dx[i], y+dy[i]);
		    ans += dir[3-i];
	       }
	  }
     }
     
     room[x][y] = 0;
     ans += "2";
}

int main()
{ __
     int x, y;
     cin >> n >> x >> y; x--, y--;
     
     for (int i = 0; i < n; ++i)
	  for (int j = 0; j < n; ++j)
	       cin >> room[i][j];
     
     dfs(x, y);
     
     for (int i = 0; i < n; ++i)
	  for (int j = 0; j < n; ++j)
	       if (room[i][j])
	       {
		    cout << "NO\n";
		    return 0;
	       }
     
     cout << "YES\n";
     cout << ans << '\n';
     return 0;
}
