// #pragma comment(linker, "/STACK:256000000")
#include <iostream>
#include <string>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <queue>
#include <utility>
#include <algorithm>
#include <limits>
#include <functional>
#include <numeric>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iomanip>
#include <cmath>

typedef unsigned long long ULL;
typedef long long LL;

using namespace std;

#define For(i, l, r) for (i = l; i <= r; ++i)
const int N = 501;
int a[N][N], visited[N][N];
int x_dir[4] = {1, -1, 0, 0}, y_dir[4] = {0, 0, 1, -1};
int i, j, k, sum, n, x, y;
char ans[3000001];

bool canGo(int x, int y, int i) {
	while (1) {
		x += x_dir[i], y += y_dir[i];
		if (!x || !y || x > n || y > n) return false;
		if (visited[x][y]) return false;
		if (a[x][y]) return true;
	}
}

void DFS(int x, int y) {
	if (!a[x][y]) ans[k++] = '1', ++sum;
	visited[x][y] = 1;
	int i;
	For(i, 0, 3) if (canGo(x, y, i)) {
		ans[k++] = i == 0 ? 'D' : i == 1 ? 'U' : i == 2 ? 'R' : 'L';
		DFS(x + x_dir[i], y + y_dir[i]);
		ans[k++] = i == 0 ? 'U' : i == 1 ? 'D' : i == 2 ? 'L' : 'R';
	}
	ans[k++] = '2', --sum;
}

int main() {
	scanf("%d%d%d", &n, &x, &y);
	For(i, 1, n) For(j, 1, n) scanf("%d", &a[i][j]), sum += a[i][j];
	DFS(x, y);
	if (sum)
		printf("NO\n");
	else 
		printf("YES\n%s\n", ans);
	return 0;
}

