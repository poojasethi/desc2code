#include <cstdio>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
using namespace std;
#define Rep(i,j,k) for(int i=(j); i<=(k); i++)
#define TR(a,e) for(typeof((a).begin()) e=(a).begin(); e!=(a).end(); e++)
#define pb push_back
#define mk make_pair
#define fi first
#define se second
typedef long long LL;

vector<pair<int,int> > edge[200000];
vector<pair<LL, pair<int,int> > > a;
int n, m;
LL d[200000];
set<pair<LL,int> > p;
int f[200000], fa[200000];

int gf(int x){ return (x==fa[x])?x:fa[x]=gf(fa[x]); }

int main(){
	
	scanf("%d%d",&n,&m);
	Rep(i,1,m){
		int x,y,c; scanf("%d%d%d",&x,&y,&c);
		edge[x].pb(mk(y,c));
		edge[y].pb(mk(x,c));
	}
	
	Rep(i,1,n)
		d[i]=((LL)1)<<60;
	
	int k; scanf("%d",&k);
	Rep(i,1,k){
		int x; scanf("%d",&x);
		f[x]=x;
		d[x]=0;
		p.insert(mk(0LL,x));
	}
	
	while(p.size()){
		int x=p.begin()->se;
		p.erase(p.begin());
		TR(edge[x],e)
			if (d[x]+e->se<d[e->fi]){
				f[e->fi]=f[x];
				p.erase(mk(d[e->fi],e->fi));
				p.insert(mk(d[e->fi]=d[x]+e->se,e->fi));
			}
	}
	
	Rep(x,1,n)
		TR(edge[x],e)
			if (f[x]!=f[e->fi])
				a.pb(mk(d[x]+d[e->fi]+e->se,mk(f[x],f[e->fi])));
		
	LL ans=d[1];
	sort(a.begin(), a.end());
	Rep(x,1,n) fa[x]=x;
	TR(a,e)
		if (gf(e->se.fi)!=gf(e->se.se)){
			fa[gf(e->se.fi)]=gf(e->se.se);
			ans+=e->fi;
		}	
	cout<<ans<<endl;
	
	return 0;
}
