#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

typedef int sz[801000];

struct node {long long a, b, c;} a[201000];
sz A, B, first, next, e, g, bj, prev, f, st;
long long d[201000], c[201000], C[201000];
int num, i, n, m, l, r, k, h;

int getfa(int x)
{
    if (f[x] != x) return f[x] = getfa(f[x]);
    return f[x];
}

void link(int u, int v, int w)
{
    e[++num] = v, next[num] = first[u], first[u] = num, c[num] = w;
}

int com(node p, node q)
{
    return p.c < q.c;
}

int main()
{
    scanf("%d%d", &n, &m);
    for (i = 1; i <= m; ++i)
    {
    scanf("%d%d%I64d", &A[i], &B[i], &C[i]);
    link(A[i], B[i], C[i]); link(B[i], A[i], C[i]);
    }
    scanf("%d", &k);
    memset(d, 30, sizeof(d));
    for (i = 1; i <= k; ++i)
    {
    scanf("%d", &g[i]);
    d[st[i] = g[i]] = 0;
    prev[g[i]] = g[i];
    bj[g[i]] = 1;
    }
    for (r = k, l = 1; l <= r; ++l)
    {
    bj[st[l]] = 0;
    for (int p = first[st[l]]; p; p = next[p])
        if (d[e[p]] > d[st[l]] + c[p])
        {
        d[e[p]] = d[st[l]] + c[p];
        prev[e[p]] = prev[st[l]];
        if (!bj[e[p]]) bj[st[++r] = e[p]] = 1;
        }
    }
    long long ans = d[1];
    for (i = 1, h = 0; i <= m; ++i)
    if (prev[A[i]] != prev[B[i]])
        a[++h].a = prev[A[i]], a[h].b = prev[B[i]], a[h].c = C[i] + d[A[i]] + d[B[i]];
    sort(a + 1, a + h + 1, com);
    for (i = 1; i <= n; ++i) f[i] = i;
    for (i = 1; i <= h; ++i)
    {
    int f1 = getfa(a[i].a), f2 = getfa(a[i].b);
    if (f1 != f2) {f[f1] = f2; ans += a[i].c;}
    }
    printf("%I64d\n", ans);
    return 0;
}
