#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 1e5 + 5;

int n, m, q;
int root[N], w[N];
ll dist[N];
vector < ii > v[N];

int f(int x) {
	if(x == root[x])
		return x;
	return root[x] = f(root[x]);
}

int main() {

	scanf("%d %d", &n, &m);
	
	for(int i = 1; i <= m; i++) {
		int x, y, c;
		scanf("%d %d %d", &x, &y, &c);
		v[x].push_back(ii(y, c));
		v[y].push_back(ii(x, c));
	}
	
	scanf("%d", &q);
	
	memset(dist, 63, sizeof(dist));
	
	priority_queue < pair < ll, int > > Q;
	
	for(int i = 1; i <= q; i++) {
		int x;
		scanf("%d", &x);
		dist[x] = 0;
		w[x] = x;
		Q.push(make_pair(0, x));
	}
	
	while(!Q.empty()) {
		ll c = -Q.top().first;
		int x = Q.top().second;
		Q.pop();
		if(c > dist[x])
			continue;
		foreach(it, v[x]) {
			int u = it -> first;
			int e = it -> second;
			if(c + e < dist[u]) {
				dist[u] = c + e;
				w[u] = w[x];
				Q.push(make_pair(-(c + e), u));
			}
		}
	}
	
	vector < pair < ll, ii > > ed;
	
	for(int i = 1; i <= n; i++) {
		foreach(it, v[i]) {
			int x = it -> first;
			int e = it -> second;
			if(w[x] != w[i]) {
				ed.push_back(make_pair(dist[i] + e + dist[x], ii(w[i], w[x])));
			}
		}
	}
	
	sort(ed.begin(), ed.end());
	
	ll ans = dist[1];
	
	for(int i = 1; i <= n; i++)
		root[i] = i;
	
	foreach(it, ed) {
		ll c = it -> first;
		int x = f(it -> second.first);
		int y = f(it -> second.second);
		if(x != y) {
			root[y] = x;
			ans += c;
		}
	}
	
	printf("%lld\n", ans);

	return 0;

}
