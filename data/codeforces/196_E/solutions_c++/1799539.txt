#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <complex>
#define MOD 1000000007
#define INF 0x3f3f3f3f
#define MINF 0xc0c0c0c0

using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
typedef complex<ll> pt;

int n, m, k, start;
vector<pair<int,ll> > adj[100000];
bool portal[100000];
ll dist[100000];
priority_queue<pair<ll,int> > S;

int main()
{
    ios::sync_with_stdio(0);
    memset(portal, false, sizeof portal);
    memset(dist, INF, sizeof dist);
    scanf("%d %d",&n,&m);
    for (int i = 0; i < m; ++i)
    {
        int x, y, w;
        scanf("%d %d %d",&x,&y,&w);
        --x, --y;
        adj[x].push_back(make_pair(y, w));
        adj[y].push_back(make_pair(x, w));
    }
    scanf("%d",&k);
    for (int i = 0; i < k; ++i)
    {
        scanf("%d",&start);
        portal[--start] = true;
    }
    for(int i=0;i<n;i++)if(portal[i])start=i;
    S.push(make_pair(0, start));
    dist[start] = 0;
    ll ans = 0;
    while (!S.empty())
    {
        int u = S.top().second;
        ll dt=S.top().first;

        S.pop();
        if(dist[u]!=-dt)continue;
        if (portal[u])
        {
            ans += dist[u];
            dist[u] = 0;
        }
        ll d = dist[u];

        for (int i = 0; i < adj[u].size(); ++i)
        {
            int v = adj[u][i].first;
            ll vd = d + adj[u][i].second;
            if (dist[v] > vd)
            {
                //S.erase(make_pair(dist[v], v));
                S.push(make_pair(-vd, v));
                dist[v] = vd;
            }
        }
    }
    if (!portal[0]) ans += dist[0];
    cout << ans << endl;
}
