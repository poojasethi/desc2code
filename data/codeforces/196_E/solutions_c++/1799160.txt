#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
const int u=100010;
struct rec{int x; __int64 y;}p;
struct pnt{int x,y; __int64 z;}a[u];
priority_queue<rec> q;
int ver[2*u],edge[2*u],head[u],next[2*u],f[u],n,m,tot,t,i,x,y,z;
__int64 d[u],ans;

bool operator <(rec a,rec b) {return a.y>b.y;}
bool cmp(pnt a,pnt b) {return a.z<b.z;}
void add(int x,int y,int z)
{
	ver[++tot]=y,edge[tot]=z,next[tot]=head[x],head[x]=tot;
}
int get(int x)
{
	if(x==f[x]) return x;
	return f[x]=get(f[x]);
}

int main()
{
	cin>>n>>m;
	for(tot=i=1;i<=m;i++)
	{
		scanf("%d%d%d",&x,&y,&z);
		add(x,y,z),add(y,x,z);
	}
	memset(d,0x3f,sizeof(d));
	cin>>t;
	for(i=1;i<=t;i++)
	{
		scanf("%d",&x);
		q.push((rec){x,0ll}),f[x]=x,d[x]=0;
	}
	while(q.size())
	{
		p=q.top(); q.pop();
		for(int i=head[p.x];i;i=next[i])
			if(d[ver[i]]>p.y+edge[i])
			{
				d[ver[i]]=p.y+edge[i];
				f[ver[i]]=f[p.x];
				q.push((rec){ver[i],d[ver[i]]});
			}
	}
	for(m=0,i=2;i<tot;i+=2)
		if(f[ver[i]]!=f[ver[i^1]])
			a[++m].x=f[ver[i]],a[m].y=f[ver[i^1]],a[m].z=d[ver[i]]+d[ver[i^1]]+edge[i];
	sort(a+1,a+m+1,cmp);
	ans=d[1];
	for(i=1;i<=m;i++)
		if(get(a[i].x)!=get(a[i].y)) f[get(a[i].y)]=get(a[i].x),ans+=a[i].z;
	cout<<ans<<endl;
	return 0;
}