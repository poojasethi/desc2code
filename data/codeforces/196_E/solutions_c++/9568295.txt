#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
using namespace std;
int n,m,o,a[100005],A,k,i,cnt,f[100005],e[200005],chang[200005],head[200005],next[200005],now,X;
long long ans,d[200005];
bool v[200005];
const long long inf=(long long)1e9*(1e5);
struct node {long long x,y,z;} hp[400005],t[100005];
int getf(int k) {return f[k]==k?f[k]:f[k]=getf(f[k]);}
int CMP(node i,node j) {return i.z<j.z;}
int cmp(node i,node j) {return i.x>j.x;}
void add(int a,int b,int c,int d){e[a]=c;next[a]=head[b];head[b]=a;chang[a]=d;}
int main()
{
    scanf("%d%d",&n,&m);
    for (i=1; i<=m; i++)
    {
        scanf("%d%d%d",&t[i].x,&t[i].y,&t[i].z);
        add(++o,t[i].x,t[i].y,t[i].z);
        add(++o,t[i].y,t[i].x,t[i].z);
    }
    scanf("%d",&k);
    for (i=1; i<=k; i++) {scanf("%d",&A); a[A]=1;}
    for (i=1; i<=n; i++) {d[i]=inf; v[i]=false;}
    for (i=1; i<=n; i++) if (a[i]){d[i]=0; f[i]=i;}
    for (i=1; i<=n; i++) {hp[i].x=d[i]; hp[i].y=i; push_heap(hp+1,hp+i+1,cmp);}
    cnt=n;
    while (cnt)
    {
        while (cnt && v[hp[1].y]) {pop_heap(hp+1,hp+cnt+1,cmp); cnt--;}
        if (!cnt) break;
        v[hp[1].y]=true; X=hp[1].y; pop_heap(hp+1,hp+cnt+1,cmp); cnt--;
        now=head[X];
        while (now!=0)
        {
            if (d[e[now]]>d[X]+chang[now])
            {
                d[e[now]]=d[X]+chang[now];
                f[e[now]]=f[X];
                hp[++cnt].x=d[e[now]]; hp[cnt].y=e[now]; push_heap(hp+1,hp+cnt+1,cmp);
            }
            now=next[now];
        }
    }
    for (i=1; i<=m; i++) {t[i].z+=d[t[i].x]+d[t[i].y]; t[i].x=f[t[i].x]; t[i].y=f[t[i].y];}
    for (i=1; i<=n; i++) f[i]=i;
    sort(t+1,t+m+1,CMP);
    for (i=1; i<=m; i++)
      if (getf(t[i].x)!=getf(t[i].y))
      {
          ans+=t[i].z;
          f[getf(t[i].x)]=getf(t[i].y);
      }
    cout<<ans+d[1];
    return 0;
}
