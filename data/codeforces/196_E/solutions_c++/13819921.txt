//In the name of God

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstring>
using namespace std;
#define mp make_pair
#define lol long long
const lol MAXN=1e5+10,inf=1e18;
bool mark[MAXN];
lol p[MAXN],dis[MAXN],sz[MAXN],ans;
vector <pair <lol,lol> > g[MAXN];
vector <pair <lol,pair <lol,lol> > > e;
set <pair <lol,lol> > s;

lol root(lol v)
{
  if(p[v]==v)
    return v;
  return p[v]=root(p[v]);
}

void merg(lol v,lol u)
{
  v=root(v);
  u=root(u);
  if(sz[v]>sz[u])
    p[u]=v;
  else
    p[v]=u; 
}

void dij()
{
  while(!s.empty())
    {
      pair <lol,lol> pp=*(s.begin());
      s.erase(s.begin());
      lol v=pp.second,d=pp.first;
      if(mark[v])
	continue;
      mark[v]=true;
      for(lol i=0;i<g[v].size();i++)
	{
	  lol u=g[v][i].first,w=g[v][i].second;
	  if(dis[u]>dis[v]+w)
	    {
	      dis[u]=dis[v]+w;
	      s.insert(mp(dis[v]+w,u));
	      p[u]=p[v];
	    }
	}//for
    }//while
}//dij

void kruskal()
{
  sort(e.begin(),e.end());
  for(lol i=0;i<e.size();i++)
    {
      lol v=e[i].second.first,u=e[i].second.second,d=e[i].first;
      if(root(v)!=root(u))
	merg(v,u),ans+=d;
    }
}
  
int main()
{
  ios::sync_with_stdio(false);
  fill(dis,dis+MAXN,inf);
  lol n,m;
  cin>>n>>m;
  for(lol i=1;i<=m;i++)
    {
      lol v,u,w;
      cin>>v>>u>>w;
      g[v].push_back(mp(u,w));
      g[u].push_back(mp(v,w));
    }
  lol k;
  cin>>k;
  for(lol i=1;i<=k;i++)
    {
      lol v;
      cin>>v;
      p[v]=v;
      dis[v]=0;
      sz[v]=1;
      s.insert(mp(0,v));
    }
  dij();
  for(lol i=1;i<=n;i++)
    for(lol j=0;j<g[i].size();j++)
      {
	lol v=g[i][j].first,w=g[i][j].second;
	lol p=dis[v]+w+dis[i];
	e.push_back(mp(p,mp(i,v)));
      }
  kruskal();
  cout<<ans+dis[1]<<endl;
  return 0;
}
