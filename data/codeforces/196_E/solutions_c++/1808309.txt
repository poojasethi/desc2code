#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
using namespace std;
const int MAXN=100005,MAXM=100005;
long long d[MAXN];
struct ed
{
  int x,y;
  long long w;
} edge[MAXM];
bool vis[MAXN];
int sta[MAXN*3],head[MAXN],dsf[MAXN],color[MAXN];
int w[MAXM*2],link[MAXM*2],next[MAXM*2];
int e=0,n=0,m=0,q=0;
void add(int u,int v,int tmpw)
{
  next[++e]=head[u];
  head[u]=e;
  link[e]=v;
  w[e]=tmpw;
  next[++e]=head[v];
  head[v]=e;
  link[e]=u;
  w[e]=tmpw;
}
int cmp(const ed p,const ed q)
{
  return p.w<q.w;
}
int find(int x)
{
  if (dsf[x]==x) return x;
  dsf[x]=find(dsf[x]);
  return dsf[x];
}
int main()
{
  scanf("%d%d",&n,&m);
  int i=0;
  for (i=1;i<=m;i++)
    {
      scanf("%d%d%I64d",&edge[i].x,&edge[i].y,&edge[i].w);
      add(edge[i].x,edge[i].y,edge[i].w);
    }
  int top=0,tail=0;
  scanf("%d",&q);
  memset(d,50,sizeof(d));
  int x=0;
  for (i=1;i<=q;i++)
    {
      scanf("%d",&x);
      sta[++tail]=x;
      color[x]=x;
      d[x]=0;
      vis[x]=1;
      dsf[x]=x;
    }
  int ne=0,y=0;
  while (top<tail)
    {
      x=sta[++top];
      for (ne=head[x],y=link[ne];ne;ne=next[ne],y=link[ne])
    if (d[y]>d[x]+w[ne])
      {
        d[y]=d[x]+w[ne];
        color[y]=color[x];
        if (!vis[y])
          {
        sta[++tail]=y;
        vis[y]=1;
          }
      }
      vis[x]=0;
    }
  for (i=1;i<=m;i++)
    {
      edge[i].w+=d[edge[i].x]+d[edge[i].y];
      edge[i].x=color[edge[i].x];
      edge[i].y=color[edge[i].y];
    }
  sort(edge+1,edge+1+m,cmp);
  int sum=0,fx=0,fy=0;
  long long ans=d[1];
  for (i=1;i<=m;i++)
    {
      fx=find(edge[i].x);
      fy=find(edge[i].y);
      if (fx!=fy)
    {
      dsf[fx]=fy;
      sum++;
      ans+=edge[i].w;
      if (sum>=q-1) break;
    }
    }
  printf("%I64d\n",ans);
  return 0;
}
