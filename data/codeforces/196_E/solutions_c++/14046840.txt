#include <bits/stdc++.h>
//to the edge of the earth

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pii;

const ll MAXN = 1e5 + 10;

typedef pair<ll, pii> edge;
#define W(x) x.first
#define U(x) x.second.first
#define V(x) x.second.second
inline edge make_edge(ll u, ll v, ll w){
	edge outp;
	U(outp) = u; V(outp) = v; W(outp) = w;
	return outp;
}

vector< pii > G[MAXN], H[MAXN];
ll p[MAXN], dis[MAXN], source[MAXN];
edge e[MAXN];
vector<edge> spece;
vector<ll> spec;
ll par[MAXN];

ll findpar(ll u){
	return (u == par[u] ? u : par[u] = findpar(par[u]));
}

inline void join(ll u, ll v){
	par[findpar(u)] = findpar(v);
}

ll mst(vector<ll> V, vector<edge> E){
	ll ans = 0;
	sort(E.begin(), E.end());

	for (ll i = 0; i < V.size(); i++)
		par[V[i]] = V[i];

	for (ll i = 0; i < E.size(); i++){
		ll u = U(E[i]), v = V(E[i]), w = W(E[i]);
		if (findpar(u) == findpar(v)) continue;
		ans += w;
		join(u, v);
	}

	return ans;
}

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	ll n, m; cin >> n >> m;
	fill (dis, dis + n, -1uLL/4);

	for (ll i = 0; i < m; i++){
		ll u, v, w; cin >> u >> v >> w;
		u--; v--;

		G[u].push_back(pii(v, w));
		G[v].push_back(pii(u, w));
		e[i] = make_edge(u, v, w);
	}

	set<pii> s;
	ll k; cin >> k;
	for (ll i = 0; i < k; i++){
		cin >> p[i]; p[i]--;
		dis[p[i]] = 0;
		source[p[i]] = p[i];
	}

	for (ll i = 0; i < n; i++)
		s.insert(pii(dis[i], i));

	while(s.size()){
		ll u = s.begin() -> second;
		s.erase(s.begin());

		for (ll i = 0; i < G[u].size(); i++){
			ll v = G[u][i].first, w = G[u][i].second;

			if (dis[v] > dis[u] + w){
				s.erase( pii(dis[v], v) );
				dis[v] = dis[u] + w;
				source[v] = source[u];
				s.insert( pii(dis[v], v) );
			}
		}
	}

	for (ll i = 0; i < m; i++){
		ll u = U(e[i]), v = V(e[i]), w = W(e[i]);
		u = source[u]; v = source[v];
		if (u != v) spece.push_back( make_edge( u, v, w + dis[U(e[i])] + dis[V(e[i])]) ), spec.push_back( u ), spec.push_back( v );
	}

	cout << mst(spec, spece) + dis[0];
}
