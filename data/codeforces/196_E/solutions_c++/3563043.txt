#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <string>
#include <cctype>
#include <algorithm>
#include <queue>
#define maxn 100005

using namespace std;
typedef long long LL;
int n,m,a[maxn],kk,start[maxn*2],e[maxn*2],next[maxn*2],first[maxn],pi=1,pre[maxn],father[maxn];
LL w[maxn*2],ans,dis[maxn];
bool flag[maxn];
queue<int>q;

struct Tnode
 {
  int start,e;LL w;
 }c[maxn];

void ins(int x,int y,int z)
 {
  start[pi]=x;e[pi]=y;next[pi]=first[x];first[x]=pi;w[pi]=z;pi++;
 }

void init()
 {
  scanf("%d%d",&n,&m);
  int i,x,y,z;
  for (i=1;i<=m;i++)
   {
    scanf("%d%d%d",&x,&y,&z);
    ins(x,y,z);ins(y,x,z);
   }
  scanf("%d",&kk);
  for (i=1;i<=kk;i++)scanf("%d",&a[i]);
 }

int cmp(const Tnode &a,const Tnode &b)
 {
  return a.w<b.w;
 }

int getfather(int x)
 {
  int temp,tmp=x,t;
  while (father[tmp]!=tmp)tmp=father[tmp];
  temp=x;
  while (father[temp]!=tmp)
   {
    t=father[temp];father[temp]=tmp;temp=t;
   }
  return tmp;
 }
 
void work()
 {
  memset(dis+1,-1,n*8);
  int i,j,k;
  for (i=1;i<=kk;i++){dis[a[i]]=0;pre[a[i]]=a[i];flag[a[i]]=true;q.push(a[i]);}
  while (!q.empty())
   {
    j=q.front();q.pop();
    for (i=first[j];i;i=next[i])
     {
      k=e[i];
      if (dis[k]==-1 || dis[j]+w[i]<dis[k])
       {
        dis[k]=dis[j]+w[i];pre[k]=pre[j];
        if (!flag[k])
         {
          flag[k]=true;q.push(k);
         }
       }
     }
    flag[j]=false;
   }
  for (i=1;i<=m+m;i+=2)
   {
    c[(i+1)>>1].start=pre[start[i]];
    c[(i+1)>>1].e=pre[e[i]];
    c[(i+1)>>1].w=dis[start[i]]+dis[e[i]]+w[i];
   }
  for (i=1;i<=n;i++)father[i]=i;
  sort(c+1,c+m+1,cmp);
  int fx,fy;
  for (i=1;i<=m;i++)
   {
    fx=getfather(c[i].start);fy=getfather(c[i].e);
    if (fx==fy)continue;
    ans+=c[i].w;father[fy]=fx;
   }
  printf("%I64d\n",ans+dis[1]); 
}
 
int main()
 {
  init();
  work();
  return 0;
 }
