#include<bits/stdc++.h>
#define MP make_pair
#define R second
#define L first
using namespace std;
typedef long long lint;
const lint inf=1000000000000000ll;
const int maxn=100*1000+100;
vector<pair<int, int> > v[maxn];
set<pair<lint, int> > st;
bool isportal[maxn];
vector<int> portals;
lint dis[maxn];
int p[maxn];

pair<int, int>edge[maxn];
lint edgew[maxn];

vector<pair<lint, pair<int, int> > > e;
int par[maxn];

void dij(){
	fill(dis, dis+maxn, inf);
	for(int i=0;i<portals.size();i++)
		dis[portals[i]]=0, p[portals[i]]=portals[i];
	for(int i=0;i<maxn;i++)
		st.insert(MP(dis[i], i));
	while(st.size()){
		int x=st.begin()->R;
		st.erase(st.begin());
		for(int i=0;i<v[x].size();i++){
			int child=v[x][i].L;
			if(dis[child]>dis[x]+v[x][i].R){
				st.erase(MP(dis[child], child));
				dis[child]=dis[x]+v[x][i].R;
				p[child]=p[x];
				st.insert(MP(dis[child], child));
			}
		}
	}
}

int getPar(int x){
	if(par[x]<0)
		return x;
	return par[x]=getPar(par[x]);
}

bool merge(int x, int y){
	x=getPar(x), y=getPar(y);
	if(x==y)
		return false;
	if(par[x]<par[y])
		swap(x, y);
	par[y]+=par[x];
	par[x]=y;
	return true;
}

int main(){
	int n, m;
	cin >> n >> m;
	for(int i=0;i<m;i++){
		int x, y, z;
		cin >> x >> y >> z;
		v[x].push_back(MP(y, z));
		v[y].push_back(MP(x, z));
		edge[i]=MP(x, y);
		edgew[i]=z;
	}
	int k;
	cin >> k;
	for(int i=0;i<k;i++){
		int x;
		cin >> x ;
		isportal[x]=true;
		portals.push_back(x);
	}
	dij();
	for(int i=0;i<m;i++){
		if(p[edge[i].L]!=p[edge[i].R])
			e.push_back(MP(dis[edge[i].L]+dis[edge[i].R]+edgew[i], MP(p[edge[i].L], p[edge[i].R])));
	}
	sort(e.begin(), e.end());
	memset(par, -1, sizeof par);
	lint res=0;
	for(int i=0;i<e.size();i++){
		if(merge(e[i].R.L, e[i].R.R)==true)
			res+=e[i].L;
	}
	cout << res+dis[1] <<endl;
}
