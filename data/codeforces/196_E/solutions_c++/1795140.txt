#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
using namespace std;

int n;
vector<pair<int, int> > gr[100500];
int is_p[100500];
int was[100500];
long long way[100500];
set<pair<long long, int> > s;
int k;
int p[100500];
int from[100500];
vector<pair<int, long long> > gr1[100500];

int main(){
	//freopen("input.txt", "r", stdin);
	int m;
	scanf("%d%d", &n, &m);
	for (int i=0; i<m; ++i){
		int a, b, w;
		scanf("%d%d%d", &a, &b, &w);
		gr[a].push_back(make_pair(b, w));
		gr[b].push_back(make_pair(a, w));
	}
	scanf("%d", &k);
	for (int i=1; i<=n; ++i)
		way[i]=1e18;
	for (int i=0; i<k; ++i){
		scanf("%d", &p[i]);
		way[p[i]]=0;
		from[p[i]]=i;
	}
	for (int i=1; i<=n; ++i)
		s.insert(make_pair(way[i], i));
	while (!s.empty()){
		int best=s.begin()->second;
		s.erase(s.begin());
		was[best]=1;
		for (vector<pair<int, int> >::iterator it=gr[best].begin(); it!=gr[best].end(); ++it)
			if (way[it->first]>way[best]+(long long)it->second){
				s.erase(make_pair(way[it->first], it->first));
				way[it->first]=way[best]+(long long)it->second;
				from[it->first]=from[best];
				s.insert(make_pair(way[it->first], it->first));
			}
			else{
				gr1[from[it->first]].push_back(make_pair(from[best], (long long)it->second+way[it->first]+way[best]));
				gr1[from[best]].push_back(make_pair(from[it->first], (long long)it->second+way[it->first]+way[best]));
			}
	}
	for (int i=0; i<k; ++i)
		was[i]=0;
	was[0]=1;
	for (vector<pair<int, long long> >::iterator it=gr1[0].begin(); it!=gr1[0].end(); ++it){
		s.insert(make_pair(it->second, it->first));
	}
	long long ans = way[1];
	while (!s.empty()){
		int best;
		while (!s.empty() && was[best=s.begin()->second]) s.erase(s.begin());
		if (s.empty()) break;
		was[best]=1;
		ans+=s.begin()->first;
		s.erase(s.begin());
		for (vector<pair<int, long long> >::iterator it=gr1[best].begin(); it!=gr1[best].end(); ++it){
			s.insert(make_pair(it->second, it->first));
		}
	}
	cout<<ans<<endl;
}