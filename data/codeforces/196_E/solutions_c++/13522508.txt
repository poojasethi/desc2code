#include <bits/stdc++.h>
#define mp make_pair
#define pb push_back  
#define s second 
#define f first 
using namespace std ;
typedef long long ll ;
const int MX = 100000 + 10 ; 
const ll INF = 10000000000 ; 
vector < ll > w[MX] ,adj[MX]; 
vector < pair < ll , pair < ll , ll>  > > e  , ee; 
int  n , m ,cp[MX],port[MX]; 
ll d[MX] ,cost ;
set < pair < ll , int > > a ; 

int compp ( int v ) { 
	if ( cp[v] == v ) 
		return v ;
	return cp[v] = compp( cp[v] ) ; 
}
void merge ( int u , int v ) { 
	cp[compp(u)] = cp[compp(v)] ; 
return ;
}
int main(){
	//input
	scanf ( "%d%d" , &n,&m ) ; 

	for ( int i = 0,u,v,ww ;i < m ; i++ ) { 
		scanf ( "%d%d%d" , &u,&v,&ww );
	
		adj[u].pb(v);
		adj[v].pb(u) ;
		w[u].pb(ww) ;
		w[v].pb(ww);
		ee.pb(mp( ww , mp ( v , u )))	;
		}
	// base 
	for ( int i = 1 ; i <= n ; i++ ) 
		d[i] = INF ;
		int k ;
	scanf ("%d", &k ) ; 
	for ( int i = 0 , x ; i < k ; i++ ) { 
		scanf("%d", &x ) ; 
		port[i] = x; 
		d[x] = 0 ;
		cp[x] = x;  
	}
	for ( int i = 1 ; i <= n ; i++ ) {
		a.insert(mp ( d[i] , i )) ; 
	}
	// dij

	while ( (int) a.size())  { 
		
		int v = a.begin() -> second ;
		for ( int i = 0 ; i < (int) adj[v].size() ; i++ ) {
			if (  d[adj[v][i]] > d[v] + w[v][i] ) {
				a.erase ( mp ( d[adj[v][i]] , adj[v][i] ));
				d[adj[v][i]] = d[v] + w[v][i] ; 
				a.insert( mp ( d[adj[v][i]] , adj[v][i] ) ) ;
				cp[adj[v][i]] = cp[v] ;
				
			}

		}
					a.erase(mp( d[v] , v ));
	}
	
	for  ( int i = 0  ;i < (int) ee.size() ; i++ )  
		if (cp[ee[i].s.f] != cp[ee[i].s.s] ) { 
		 ll  dis = d[ee[i].s.f] + d[ee[i].s.s] + ee[i].f ;
		 e.pb(mp ( dis , mp ( ee[i].s.f , ee[i].s.s )) );
	 }
	 ee.clear();
	
	 sort ( e.begin(), e.end()) ;
	 for (int i = 0 ; i < (int) e.size() ; i++ ) { 
		 if ( compp ( e[i].s.f ) != compp( e[i].s.s ) ) {
			 merge ( e[i].s.f , e[i].s.s ) ; 
			 cost += e[i].f ; 
		 }
	 }
	 cost += d[1] ; 
	cout << cost << endl ;
	
	return 0;
 } 
