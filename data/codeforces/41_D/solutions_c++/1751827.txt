#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <queue>
#include <stack>

using namespace std;

const int maxn = 111;
int n, m, k;
char map[maxn][maxn];
int num[maxn][maxn][11];
int ans, col;
string PATH;

void dfs(int x, int y, int sum, string path)
{
    sum += map[x][y] - '0';
    if (x == 0)
    {
        if (sum % (k + 1) == 0 && sum > ans)
        {
            ans = sum;
            PATH = path;
        }
        return ;
    }
    //int temp = num[x][y][sum%(k+1)];
    if (sum > num[x][y][sum%(k+1)])
    {
        num[x][y][sum%(k+1)] = sum;
    }
    else
    {
        return ;
    }
    if (y > 0) dfs(x - 1, y - 1, sum, path + "L");
    if (y < m - 1) dfs(x - 1, y + 1, sum, path + "R");
    //num[x][y][sum%(k+1)] = temp;
}

int main()
{
    while (cin>>n>>m>>k)
    {
        ans = -1;
        memset(num, -1, sizeof(num));
        for (int i = 0; i < n; ++i)
        {
            cin>>map[i];
        }
        for (int i = 0; i < m; ++i)
        {
            int temp = ans;
            dfs(n - 1, i, 0, "");
            if (ans > temp)
                col = i + 1;
        }
        if (ans != -1)
        {
            cout<<ans<<endl;
            cout<<col<<endl;
            cout<<PATH<<endl;
        }
        else cout<<"-1"<<endl;
    }
    return 0;
}

 	   	  						 	  				 	