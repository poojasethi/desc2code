#include <iostream>
#include <cstring>
#include <string>
#include <cstdio>
#include <algorithm>
using namespace std;
#define ALL(x) x.begin(),x.end()
#define REP(i,a,b) for(int i=(a);i<=(b);i++)
#define FOR(i,a) for(int i=0;i<(a);i++)
#define DEP(i,a,b) for(int i=(a);i>=(b);i--)
#define CLR(x,a) memset(x,a,sizeof(x))
#define N 128
#define M 16
#define MP make_pair
#define X first
#define Y second
typedef pair<int,int> PII;
typedef pair<int,char> PIC;

int dp[N][N][M];
char gp[N][N];
PIC path[N][N][M];
int n,m,K;

int main()
{
	cin>>n>>m>>K;
	FOR(i,n)scanf("%s",gp[i+1]+1);
	CLR(dp,-1);
	REP(i,1,m)dp[n][i][0]=0;
	DEP(i,n,1)
	{
		REP(j,1,m)
		{
			int del=gp[i][j]-'0';
			FOR(k,K+1)
			{
				if(dp[i][j][k]!=-1)
				{
					int tk=(k+del)%(K+1);
					if(dp[i-1][j-1][tk]<dp[i][j][k]+del)
					{
						dp[i-1][j-1][tk]=dp[i][j][k]+del;
						path[i-1][j-1][tk]=MP(j,'L');
					}
					if(dp[i-1][j+1][tk]<dp[i][j][k]+del)
					{
						dp[i-1][j+1][tk]=dp[i][j][k]+del;
						path[i-1][j+1][tk]=MP(j,'R');
					}
				}
			}
		}
	}
	int pos,ans=-1,del=0;
	string Path="";
	REP(i,0,m+1)
	{
		if(dp[0][i][0]>ans)
		{
			pos=i;
			ans=dp[0][i][0];
		}
	}
	cout<<ans<<endl;
	if(ans==-1)return 0;
	pos=path[0][pos][0].X;
	REP(i,1,n-1)
	{
		del=((del-gp[i][pos]+'0')%(K+1)+K+1)%(K+1);
		Path+=path[i][pos][del].Y;
		pos=path[i][pos][del].X;
	}
	reverse(ALL(Path));
	cout<<pos<<endl<<Path<<endl;
}