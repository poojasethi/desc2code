#include<iostream>
#include<cstring>
using namespace std;
const int MXN=110, MXK=12;

int N,M,K;
char arr[MXN][MXN];
int mem[MXN][MXN][MXK];
int nxt[MXN][MXN][MXK];

bool in(int x,int y) {
	return x>=0 && x<N && y>=0 && y<M;
}
int dp(int x,int y,int md) {
	if(!in(x,y)) {
		return -2;
	}
	int t=arr[x][y]-'0';
	if(x==0) {
		if(t%K==md) {
			return t;
		} else {
			return -2;
		}
	}
	if(mem[x][y][md]!=-1) return mem[x][y][md];
	int nmd=(md-t+K*100)%K,best=-2;
	for(int i=-1;i<=1;i+=2) {
		int nx=x-1;
		int ny=y+i;
		if(dp(nx,ny,nmd)!=-2) {
			int nres=dp(nx,ny,nmd)+t;
			if(nres>best) {
				best=nres;
				nxt[x][y][md]=ny;
			}
		}
	}
	return mem[x][y][md]=best;
}

int main() {
	memset(mem,-1,sizeof(mem));
	cin>>N>>M>>K;
	K++;
	for(int i=0;i<N;i++) {
		cin>>arr[i];
	}
	int best=-1,besti=-1;
	for(int i=0;i<M;i++) {
		int t=dp(N-1,i,0);
		if(t!=-2 && t>best) {
			best=t;
			besti=i;
		}
	}
	cout<<best<<endl;
	if(best!=-1) {
		cout<<besti+1<<endl;
		int cx=N-1,cy=besti,cmd=0;
		while(cx) {
			if(nxt[cx][cy][cmd]==cy-1) {
				cout<<'L';
			} else {
				cout<<'R';
			}
			int nmd=(cmd-arr[cx][cy]+'0'+K*100)%K,
				ny=nxt[cx][cy][cmd];
			cmd=nmd;
			cy=ny;
			cx--;
		}
	}
}
