#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

#define MAXR 110
#define INF 0x3f3f3f3f

char mat[MAXR][MAXR];
int r,c,memo[MAXR][MAXR][12],k,choose[MAXR][MAXR][12];

int solve(int i, int j, int sum) {
	if (j<0 || j>c-1) return -INF;
	if (!i) {
		sum = (sum + mat[i][j] - '0')%k;
		if (!sum) return mat[i][j] - '0';
		return -INF;
	}
	
	if (memo[i][j][sum] != -1) return memo[i][j][sum];
	
	int p1,p2;
	p1 = solve(i-1,j-1,(sum+mat[i][j]-'0')%k);
	p2 = solve(i-1,j+1,(sum+mat[i][j]-'0')%k);
	
	memo[i][j][sum] = mat[i][j]-'0';
	
	if (p1 > p2) {
		memo[i][j][sum] += p1;
		choose[i][j][sum] = 1;
	}
	
	else {
		memo[i][j][sum] += p2;
		choose[i][j][sum] = 2;
	}
	
	return memo[i][j][sum];
}

void rec(int i, int j, int sum) {
	if (!i) return;
	
	if (choose[i][j][sum] == 1) {
		printf("L");
		rec(i-1,j-1,(sum+mat[i][j]-'0')%k);
	}
	
	else {
		printf("R");
		rec(i-1,j+1,(sum+mat[i][j]-'0')%k);
	}
	
	return;
}

int main() {
	scanf("%d%d%d",&r,&c,&k);	k++;
	
	for (int i=0; i<r; i++)
		scanf(" %s",mat[i]);
	
	int res = -1,ind;
	
	for (int i=0; i<c; i++) {
		memset(memo,-1,sizeof(memo));
		int k = solve(r-1,i,0);
		if (k > res) { res = k;	ind = i;	}	
	}
	
	printf("%d\n",res);
	if (res>-1) {
		printf("%d\n",ind+1);
		solve(r-1,ind,0);
		rec(r-1,ind,0);
		printf("\n");
	}
	
	return 0;
}