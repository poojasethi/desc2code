#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
using namespace std;

int mat[101][101];
int dp[101][101][11];
int son[101][101][11];

int main(){
	int n, m, k;
	cin >> n >> m >> k;
	for(int i = 0; i < n; i++) for(int j = 0; j < m; j++){
		char c; cin >> c;
		mat[i][j] = c - '0';
	}
	k++; 
	
	for(int x = 0; x < n; x++)
		for(int y = 0; y < m; y++)
			for(int mod = 0; mod < k; mod++){
				int mo = mod + mat[x][y];
				dp[x][y][mod] = -100000;
				if(x == 0){
					if(mo % k == 0) dp[x][y][mod] = mo / k;
				}else{
					int a = (y - 1 < 0 || dp[x - 1][y - 1][mo % k] < 0) ? -100000 : (dp[x - 1][y - 1][mo % k] + mo / k);
					int b = (y + 1 >= m || dp[x - 1][y + 1][mo % k] < 0) ? -100000 : (dp[x - 1][y + 1][mo % k] + mo / k);
					if(a > b) son[x][y][mod] = 0;
					else son[x][y][mod] = 1;
					dp[x][y][mod] = max(dp[x][y][mod], max(a, b));
				}
			}
			
	int best = 0;
	for(int y = 0; y < m; y++) if(dp[n - 1][y][0] > dp[n - 1][best][0]) best = y;
	if(dp[n - 1][best][0] < 0){
		cout << -1 << endl;
		return 0;
	}
	cout << dp[n - 1][best][0] * k << endl;
	cout << best + 1 << endl;
	int x = n - 1, y = best, mod = 0;
	while(x != 0){
		int nmod = (mod + mat[x][y]) % k;
		if(son[x][y][mod] == 0) x--, y--, cout << "L";
		else x--, y++, cout << "R";
		mod = nmod;
	}
	cout << endl;
}
