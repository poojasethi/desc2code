#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

#define REP(i,a,b) for(i = (int)(a); i < (int)(b); i++)
#define rep(i,n) REP(i,0,n)

using namespace std;

int board[100][100];

int main() {
  int i, j, k, n, m, mod;
  cin >> n >> m >> mod;
  mod++;

  vector<string> v(n);
  rep(i,n) cin >> v[i];
  rep(i,n) rep(j,m) board[n-1-i][j] = v[i][j]-'0';

  int dp[100][100][11] = {};
  string dps[100][100][11] = {};
  int origin[100][100][11] = {};

  rep(i,n) rep(j,m) rep(k,mod) dp[i][j][k] = -1;
  rep(i,m) {
    dp[0][i][board[0][i]%mod] = board[0][i];
    origin[0][i][board[0][i]%mod] = i;
  }
  rep(i,n-1) rep(j,m) rep(k,mod) {
    if(dp[i][j][k] < 0) continue;
    for(int dx = -1; dx <= 1; dx += 2) {
      if(j+dx < 0 || j+dx >= m) continue;
      int x = dp[i][j][k] + board[i+1][j+dx];
      if(dp[i+1][j+dx][x%mod] < x) {
    dp[i+1][j+dx][x%mod] = x;
    dps[i+1][j+dx][x%mod] = dps[i][j][k] + (dx==-1?"L":"R");
    origin[i+1][j+dx][x%mod] = origin[i][j][k];
      }
    }
  }

  int idx = 0;
  rep(i,m) {
    if(dp[n-1][idx][0] < dp[n-1][i][0]) idx = i;
  }
  //int res = dp[n-1][idx][0] <= 0 ? -1 : dp[n-1][idx][0];
  int res = dp[n-1][idx][0];
  cout << res << endl;
  if(res != -1) {
    cout << origin[n-1][idx][0]+1 << endl;
    cout << dps[n-1][idx][0] << endl;
  }
  return 0;
}
