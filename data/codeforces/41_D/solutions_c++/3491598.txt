#include <cstdio>
#include <cstring>
const int MAXN = 100;
char board[MAXN][MAXN];
int dp[MAXN][MAXN][11];
int path[MAXN][MAXN][11][2];
char ans[MAXN];
int main(int argc, char const *argv[])
{
	int n, m, k;
	scanf("%d%d%d ", &n, &m, &k);
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			board[i][j] = getchar() - '0';
		}
		getchar();
	}
	memset(dp, -1, sizeof(dp));
	for (int i = n - 1; i >= 0; --i) {
		for (int j = 0; j < m; ++j) {
			if (i == n - 1) {
				dp[i][j][board[i][j] % (k + 1)] = board[i][j];
			} else {
				for (int d = -1; d <= 1; d += 2) {
					int prev = j + d;
					if (prev >= 0 && prev < m) {
						for (int pk = 0; pk <= k; ++pk) {
							if (dp[i + 1][prev][pk] != -1) {
								int nv = dp[i + 1][prev][pk] + board[i][j];
								int nvmod = nv % (k + 1);
								if (nv > dp[i][j][nvmod]) {
									dp[i][j][nvmod] = nv;
									path[i][j][nvmod][0] = d;
									path[i][j][nvmod][1] = pk;
								}
							}
						}
					}
				}
			}
		}
	}
	int r = -1, ri;
	for (int j = 0; j < m; ++j) {
		if (dp[0][j][0] > r) {
			r = dp[0][j][0];
			ri = j;
		}
	}
	printf("%d\n", r);
	if (r == -1) return 0;
	for (int i = 0, ck = 0; i < n - 1; ++i) {
		ans[n - i - 2] = (path[i][ri][ck][0] == -1) ? 'R' : 'L';
		int tk = path[i][ri][ck][1];
		ri += path[i][ri][ck][0];
		ck = tk;
	}
	ans[n - 1] = '\0';
	printf("%d\n%s\n", ri + 1, ans);
	return 0;
}