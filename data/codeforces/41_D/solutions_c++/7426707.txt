#include<cstdio>
#include<algorithm>
using namespace std;
int dp[102][102][11],n,m,k,sv1 = 1,sv2,dir[] = {1,-1};
char s[102][102],x[] = {'L','R'};
void dfs(int lv,int mo,int pos){
	if(lv == n) {printf("%d\n",pos); return ;}
	dfs(lv+1,(dp[lv][pos][mo]/10)%100, pos + dir[dp[lv][pos][mo]%10]);
	printf("%c",x[dp[lv][pos][mo]%10]);
}
int main(){
	scanf("%d%d%d",&n,&m,&k); k++;
	for(int i=1;i<=n;i++)
		scanf("%s",s[i]+1);
	for(int i=0;i<=n;i++)
		for(int j=0;j<=m+1;j++)
			for(int r1=0;r1<k;r1++)
				dp[i][j][r1] = -1;
	for(int j=0;j<=m+1;j++)
		for(int r1=1;r1<k;r1++)
			dp[n+1][j][r1] = -1;
	for(int i=n;i>=1;i--)
		for(int j=1;j<=m;j++)
			for(int r1=0;r1<k;r1++)
				if(dp[i+1][j][r1] != -1){
					if(j != 1)
						dp[i][j-1][(r1+s[i][j-1]-'0')%k] = max(dp[i][j-1][(r1+s[i][j-1]-'0')%k], (dp[i+1][j][r1]/1000 + s[i][j-1]- '0')*1000+r1*10);
					if(j != m)
						dp[i][j+1][(r1+s[i][j+1]-'0')%k] = max(dp[i][j+1][(r1+s[i][j+1]-'0')%k], (dp[i+1][j][r1]/1000 + s[i][j+1]- '0')*1000+r1*10+1);
				}
	for(int j=1;j<=m;j++)
		if(dp[1][sv1][0] < dp[1][j][0])
			sv1 = j;
	if(dp[1][sv1][0] == -1) printf("-1\n");
	else{
		printf("%d\n",dp[1][sv1][0]/1000);
		dfs(1,0,sv1);
	}
	return 0;
}