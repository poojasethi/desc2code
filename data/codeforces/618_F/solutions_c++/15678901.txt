#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdlib>
using namespace std;

typedef long long LL;

int main() {
    ios::sync_with_stdio(false);
    int n;
    cin >> n;
    vector<LL> A(n + 1, 0);
    vector<LL> B(n + 1, 0);
    for (int i = 1; i <= n; i++) {
        cin >> A[i];
        A[i] += A[i - 1];
    }
    for (int i = 1; i <= n; i++) {
        cin >> B[i];
        B[i] += B[i - 1];
    }
    bool swaped = false;
    if (A.back() < B.back()) {
        A.swap(B);
        swaped = true;
    }
    vector<pair<int, int> > record(n, pair<int, int>(-1, -1));
    int p = 0;
    for (int i = 0; i < A.size(); i++) {
        while (p + 1 < A.size() && A[i] >= B[p + 1]) p++;
        LL delta = A[i] - B[p];
        pair<int, int> t(i, p);
        if (record[delta].first != -1) {
            //cout << delta << endl;
            if (swaped) {
                swap(record[delta].first, record[delta].second);
                swap(t.first, t.second);
            }
            cout << t.first - record[delta].first << endl;
            for (int i = record[delta].first + 1; i <= t.first; i++) {
                cout << i << " ";
            }
            cout << endl;
            cout << t.second - record[delta].second << endl;
            for (int i = record[delta].second + 1; i <= t.second; i++) {
                cout << i << " ";
            }
            cout << endl;
            return 0;
        } else {
            record[delta] = t;
        }
    }
    return 0;
}
