#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <deque>
using namespace std;
#define INF (1000000001)
#define MLL (1000000000000000001LL)
#define puf push_front
#define pub push_back
#define pof pop_front
#define pob pop_back
#define sz(x) ((int) (x).size())
typedef long long LL;

template<class T>
inline T read() {
	char ch = ' ';
	T ret = (T) 0;
	bool positive = 1;
	while(!(ch >= '0' && ch <= '9')) {
		if(ch == '-') positive ^= 1;
		ch = getchar();
	}
	while(ch >= '0' && ch <= '9') {
		ret = ret * ((T) 10) + ((T) (ch - '0'));
		ch = getchar();
	}
	return positive ? ret : -ret;
}

const int N = 1000010;
int n;
LL a[N], b[N];
bool cnt[N];
int cx[N], cy[N];

inline void solve() {
	for(int i = 1; i < n; i++)
		a[i] += a[i - 1], b[i] += b[i - 1];
	b[n] = MLL;
	
	int delta = -1, dx, dy;
	cnt[0] = 1, cx[0] = -1, cy[0] = -1;
	for(int i = 0, j = -1; i < n; i++) {
		while(a[i] >= b[j + 1]) j++;
		if(j > -1) {
			int tmp = a[i] - b[j];
			if(cnt[tmp]) {
				delta = tmp, dx = i, dy = j;
				break;
			}
			cnt[tmp] = 1, cx[tmp] = i, cy[tmp] = j;
		}
	}
	
	if(delta == -1) {
		puts("-1");
		return;
	}
	printf("%d\n", dx - cx[delta]);
	for(int i = cx[delta] + 1; i < dx; i++)
		printf("%d ", i + 1);
	printf("%d\n", dx + 1);
	printf("%d\n", dy - cy[delta]);
	for(int i = cy[delta] + 1; i < dy; i++)
		printf("%d ", i + 1);
	printf("%d\n", dy + 1);
}

int main() {
	scanf("%d", &n);
	for(int i = 0; i < n; i++) scanf("%I64d", a + i);
	for(int i = 0; i < n; i++) scanf("%I64d", b + i);
	solve();
	return 0;
}
