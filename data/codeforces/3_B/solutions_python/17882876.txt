import sys
import operator
import math

class Vehicle:
    def __init__(self, cost, capacity, index):
        self.cost = cost
        self.capacity = capacity
        self.value = float(capacity) / float(cost)
        self.index = index

    # def __cmp__(self, other):
        # if self.value < other.value:
            # return 1
        # elif self.value > other.value:
            # return -1
        # elif self.cost < other.cost:
            # return -1
        # elif self.cost > other.cost:
            # return 1
        # else:
            # return 0

    def __str__(self):
        return "Vehicle: cost(%d), capacity(%d), value(%.2f)" % (self.cost, self.capacity, self.value)

line = sys.stdin.readline()
parts = line.strip().split()
n = int(parts[0])
v = int(parts[1])

vehicles = [[], []]
capacity_sum = [[0], [0]]

for i in xrange(n):
    line = sys.stdin.readline()
    parts = line.strip().split()
    t = int(parts[0])
    p = int(parts[1])
    vehicles[t - 1].append(Vehicle(t, p, i + 1))

for i in xrange(2):
    vehicles[i].sort(key=lambda vehicle:vehicle.value, reverse=True)
    # for vehicle in vehicles[i]:
        # print vehicle
    # vehicles[i].sort()
    for j in xrange(len(vehicles[i])):
        capacity_sum[i].append(capacity_sum[i][j] + vehicles[i][j].capacity);

ans = 0
selected1 = 0
selected2 = 0
for j in xrange(0, len(vehicles[0]) + 1):
    if j > v:
        break
    k = min((v - j) / 2, len(vehicles[1]))
    capacity = capacity_sum[0][j] + capacity_sum[1][k]
    if capacity > ans:
        ans = capacity
        selected1 = j
        selected2 = k

print ans
ans_set = vehicles[0][:selected1] + vehicles[1][:selected2]
for i in xrange(len(ans_set)):
    if i < len(ans_set) - 1:
        print ans_set[i].index,
    else:
        print ans_set[i].index

 	 	      	  	 	   	 					   		