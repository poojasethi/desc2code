import sys

DEBUG = False

########################################

def solve():
	''' Solution here '''

	n, v = map( int, fin.readline().strip().split() )

	a = []

	for i in xrange(0, n):
		t, w = map( int, fin.readline().strip().split() )
		a.append( ( i + 1, t, w ) ) # idx, type, weight

	def cmp_(b, a):
		# weight for 2 ones
		w1 = (3 - a[1]) * a[2]
		w2 = (3 - b[1]) * b[2]
		if w1 < w2:
			return -1
		if w1 > w2:
			return 1
		if a[1] < b[1]:
			return -1
		if a[1] > b[1]:
			return 1
		return 0

	sorted_ = sorted(a, cmp = cmp_ );

	max_w = 0
	ans = []
	last_added = [-1, -1, -1]
	last_B_in_ans = -1

	for idx in xrange(0, n):

		item = sorted_[idx]

		if item[1] <= v:
			max_w += item[2]
			v -= item[1]
			ans.append( str( item[0] ) )
			# last added by type
			last_added[ 0 ] = last_added[ item[1] ] = idx
			if item[1] == 1:
				last_B_in_ans = len( ans ) - 1

		if v == 0:
			break

	fix_1_good = 0
	fix_2_good = 0

	# maybe swap K to 3B
	# maybe swap 1B to 2K
	B = None
	K = None
	if (v == 1) and ( last_added[0] != -1 ) and ( last_added[0] == last_added[2] ):

		w = sorted_[ last_added[0] ][2]
		B = filter( lambda a: a[1] == 1, sorted_[last_added[0] + 1:] )
		if len( B ) > 2:
			fix_1_good = B[0][2] + B[1][2] + B[2][2] - w

		w = sorted_[ last_added[1] ][2]
		K = filter( lambda a: a[1] == 2, sorted_[last_added[0] + 1:] )
		if len( K ) > 0:
			fix_2_good = K[0][2] - w

	if (fix_1_good > 0) and (fix_1_good >= fix_2_good):
		max_w += fix_1_good
		del ans[-1]
		ans.append( str(B[0][0]), str(B[1][0]), str(B[2][0]) )
		
	if (fix_2_good > 0) and (fix_2_good > fix_1_good):
		max_w += fix_2_good
		del ans[ last_B_in_ans ]
		ans.append( str(K[0][0]) )

	fout.write( "%d\n%s" % ( max_w, " ".join(ans) ) )


########################################

def init():
	global fin, fout
	if DEBUG:
		fin  = open('input.txt', 'r')
	else:
		fin  = sys.stdin
	fout = sys.stdout

def quit():
	global fin, fout
	fin.close()
	fout.close()
	sys.exit(0)

if __name__ == '__main__':
	init()
	solve()
	quit()