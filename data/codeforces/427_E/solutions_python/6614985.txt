dbg = False
def solve(n, m, vals):
    vals.sort()
    ind = len(vals)/2
    point = vals[ind]
    res = 0
    portions = ind/m

    for i in xrange(portions):
        res += 2 * abs(point-vals[m*i])
    if portions>0:
        vals = vals[m*portions:]

    for i in xrange(portions):
        res += 2 * abs(point-vals[-m*i-1])
    if portions>0:
        vals = vals[:-m*portions]

    if len(vals) <= m:
        res += 2*abs(vals[0]-vals[-1])
    else:
        res += 2*abs(vals[0]-point)
        res += 2*abs(vals[-1]-point)

    return res

def solve2(n, m, vals):
    vals.sort()
    ind = len(vals)/2
    point = vals[ind]
    res = 0
    z = 0
    while m*z<ind:
        res += 2*(point - vals[m*z])
        res += 2*(vals[-1-m*z]-point)

        z+=1
    return res

if not dbg:
    n, m = map(int, raw_input().split())
    vals = map(int, raw_input().split())
else:
    n, m = 11, 2
    vals = map(int, "-375 -108 1336 1453 1598 1892 2804 3732 4291 4588 4822".split())
    #n, m = 3, 2
    #vals = [1,2,3,4,5]
print str(solve2(n, m, vals))
if dbg:
    print str(solve(n, m, vals))
