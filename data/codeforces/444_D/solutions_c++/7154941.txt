#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cstring>
#include<vector>
#include<string>
#include<map>
#define INF 0x7fffffff
#define pr pair<int, int>
#define ft first
#define sd second
#define mp make_pair
#define MAXM 200005
using namespace std ;

map<string, int> hash ;
vector<int> have[MAXM] ;
map<pr, int> ans ;
int p[MAXM], id[MAXM], len[MAXM], top ;
int N, M, cnt, last ;
int a, b, get ;
string ss, sa, sb ;

int main()
{
	int i, j ;
	int x, y, lt, rt ;
	cin >> ss ;
	N = ss.length() ;
	for(i = 0; i < N; i ++)
		for(j = 1; j <= 4 && i+j <= N; j ++)
		{
			sa = ss.substr(i, j) ;
			if(!hash[sa]) hash[sa] = ++cnt, len[cnt] = sa.length() ;
			have[hash[sa]].push_back(i) ;
		}
	scanf("%d", &M) ;
	while(M--)
	{
		cin >> sa >> sb ;
		a = hash[sa], b = hash[sb] ;
		if(!a || !b) {printf("-1\n"); continue ;}
		else if(a == b) {printf("%d\n", len[a]); continue ;}
		else if(!ans[mp(a, b)])
		{
			if(len[b] < len[a]) swap(a, b), swap(sa, sb) ;
			get = INF, x = y = 0 ;
			top = 0 ;
			while(x != have[a].size() || y != have[b].size())
			{
				if(y==have[b].size() || x != have[a].size() && have[a][x] <= have[b][y])
					p[++top] = have[a][x], id[top] = a, x ++ ;
				else p[++top] = have[b][y], id[top] = b, y ++ ;
			}
			for(i = 1; i < top; i ++)
				if(id[i] != id[i+1])
				{
					lt = p[i], rt = max(p[i]+len[id[i]]-1, p[i+1]+len[id[i+1]]-1) ;
					get = min(get, rt-lt+1) ;
				}
			ans[mp(a, b)] = ans[mp(b, a)] = get ;
		}
		printf("%d\n", ans[mp(a, b)]) ;
	}
	//system("pause") ;
	return 0 ;
}
