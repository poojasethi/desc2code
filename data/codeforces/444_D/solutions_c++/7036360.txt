#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <map>
#define MX 550000
using namespace std;

typedef pair <int, int> PII;

map <PII, int> H;
vector <int> V[MX];
char str[MX], A[10], B[10];
int N;

void init() {
	int i, j, k, len, P = 1, p;
	N = strlen(str);
	for (len = 1; len <= min(4, N); len++) {
		p = 0;
		for (i = 0; i < len; i++) p = p * 27 + str[i] - 'a' + 1;
		V[p].push_back(0);
		for (; i < N; i++) {
			p = (p % P) * 27 + str[i] - 'a' + 1;
			V[p].push_back(i - len + 1);
		}
		P *= 27;
	}
}

main() {
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	int i, j, k, a, b, p, q, t, x, Q, len;
	scanf("%s", str);
	init();
	for (scanf("%d", &Q); Q--; ) {
		scanf("%s%s", A, B);
		a = strlen(A);
		b = strlen(B);
		for (p = 0, i = 0; i < a; i++) p = p * 27 + A[i] - 'a' + 1;
		for (q = 0, i = 0; i < b; i++) q = q * 27 + B[i] - 'a' + 1;
		if (V[p].size() > V[q].size() || V[p].size() == V[q].size() && p > q) {
			swap(a, b);
			swap(p, q);
		}
		int &len = H[PII(p, q)];
		if (!len) {
			len = MX;
			x = max(a, b);
			for (i = 0; i < V[p].size(); i++) {
				t = lower_bound(V[q].begin(), V[q].end(), V[p][i]) - V[q].begin();
				if (t != V[q].size()) {
					len = min(len, V[q][t] + b - V[p][i]);
				}	
				t = upper_bound(V[q].begin(), V[q].end(), V[p][i]) - V[q].begin();
				if (t) {
					t--;
					len = min(len, V[p][i] + a - V[q][t]);
				}
				if (len <= x) break;
			}
			if (len < x) len = x;
			if (len == MX) len = -1;
		}
		printf("%d\n", len);
	}
}
