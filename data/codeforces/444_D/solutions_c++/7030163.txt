#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
#include <map>
#define mp make_pair
#define pb push_back
#define fir first
#define sec second
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

inline void R(int &x) {
	char ch = getchar(); x = 0;
	for (; ch<'0'; ch=getchar());
	for (; ch>='0'; ch=getchar()) x = x*10+ch-'0';
}
const int N = 200005, inf = 1<<30;
int n, m, ln, l[N];
char a[N], s1[10], s2[10];
int len[550005];
vector<int> lis[550005];
map< pii, int > ANS;
int trans(char *a) {
	int cur = 0;
	for (int i=0; a[i]; ++i) {
		cur *= 27;
		cur += a[i] - 'a' + 1;
	}
	return cur;
}
int match(vector<int> &a, vector<int> &b, int la, int lb) {
	int cnt = b.size(), ans = inf;
	vector<int>::iterator p, s = a.begin(), e = a.end();
	for (int i=0; i<cnt; ++i) {
		p = lower_bound(s, e, b[i]);
		if (p != e) {
			ans = min(ans, max(*p+la, b[i]+lb) - min(*p, b[i]));
		}
		if (p != s) {
			--p;
			ans = min(ans, max(*p+la, b[i]+lb) - min(*p, b[i]));
		}
	}
	return ans;
}
void Q() {
	scanf("%s%s", s1, s2);
	int t1 = trans(s1), t2 = trans(s2);
	if (!len[t1] || !len[t2]) {
		puts("-1");
		return;
	}
	pii P = mp(min(t1, t2), max(t1, t2));
	if (ANS.count(P)) {
		printf("%d\n", ANS[P]);
		return;
	}
	if (lis[t2].size() > lis[t1].size()) swap(t1, t2);
	int ans = match(lis[t1], lis[t2], len[t1], len[t2]);
	ANS[P] = ans;
	printf("%d\n", ans);
}
int main() {
	scanf("%s", a+1);
	n = strlen(a+1);
	for (int i=1; i<=n; ++i) {
		int cur = 0;
		for (int j=0; j<4 && i+j<=n; ++j) {
			cur *= 27, cur += a[i+j]-'a'+1;
			if (!len[cur]) {
				len[cur] = j + 1;
				l[++ln] = cur;
			}
			lis[cur].pb(i);
		}
	}
	R(m);
	for (int i=1; i<=m; ++i) Q();
	return 0;
}
