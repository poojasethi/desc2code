#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <iostream>
#include <stdlib.h>
#include <assert.h>
#include <vector>
#include <string>
#include <set>
#include <map>
using namespace std;
typedef long long lint;
const int Maxn=5e4+5;
char s[Maxn];

set< pair<int, int> > a[1000000];
map < pair<int,int> ,int > ans;

void prework()
{
	for(int i=0;s[i];i++)
	{
		int res=0;
		for(int j=i;s[j]&&j-i+1<=4;j++)
		{
			res=res*27+s[j]-'a'+1;
			a[res].insert( make_pair(i,j) );
		}
	}
}

int solve(int res1,int res2)
{
	set< pair<int, int> >::iterator it;
	int ret=Maxn;
	for(set< pair<int, int> >::iterator i=a[res1].begin();i!=a[res1].end();i++)
	{
		int l=i->first,r=i->second;
		it=a[res2].upper_bound(*i);	
		if(it!=a[res2].end())

		{
			int tmp=max(r,it->second)-min(l,it->first)+1;
			ret=min(ret,tmp);
		}
		if(it!=a[res2].begin())
		{
			--it;
			int tmp=max(r,it->second)-min(l,it->first)+1;
			ret=min(ret,tmp);
		}
	}
	return ret;
}

char s1[10],s2[10];
int main() 
{
	scanf("%s",s);
	prework();
	int q;
	scanf("%d",&q);
	while(q--)
	{
		scanf("%s%s",s1,s2);
		int res1=0,res2=0;
		for(int i=0;s1[i];i++)
		{
			res1=res1*27+s1[i]-'a'+1;
		}
		for(int i=0;s2[i];i++)
		{
			res2=res2*27+s2[i]-'a'+1;
		}
		if(a[res1].size()>a[res2].size()) swap(res1,res2);
		if(ans.find( make_pair(res1,res2) ) != ans.end())
		{
			printf("%d\n",ans[make_pair(res1,res2)]);
		}
		else
		{
			ans[make_pair(res1,res2)]=solve(res1,res2);
			if(ans[make_pair(res1,res2)]==Maxn)
				ans[make_pair(res1,res2)]=-1;
			printf("%d\n",ans[make_pair(res1,res2)]);
		}
	}
	
	return 0;
}
