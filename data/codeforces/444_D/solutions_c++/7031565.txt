#include <bits/stdc++.h>
using namespace std;
typedef long long lint;

char s[55555];
int calc(char *c, int n) {
	int ret = 0;
	while (n--) {
		ret = ret * 27 + (*c - 'a' + 1);
		c++;
	}
	return ret;
}

set< pair<int, int> > st[600000];
int num[600000];
map< pair<int, int>, int > ans;

int getmin(pair<int, int> a, pair<int, int> b) {
	return max(a.second, b.second) - min(a.first, b.first);
}

int gao(int c1, int c2) {
	if (num[c1] > num[c2]) {
		swap(c1, c2);
	}
	int ans = 10000000;
	for (set< pair<int, int> >::iterator it = st[c1].begin(); it != st[c1].end(); ++it) {
		set< pair<int, int> >::iterator it2 = st[c2].upper_bound(*it);
		pair<int, int> u1 = make_pair(-1, 10000000);
		if (it2 != st[c2].end()) u1 = *it2;
		if (it2 != st[c2].begin()) it2--;
		pair<int, int> l1 = *it2;
		ans = min(ans, getmin(*it, u1));
		ans = min(ans, getmin(*it, l1));
	}
	if (ans > 1000000) {
		return -1;
	} else {
		return ans;
	}
}

int main() {
	scanf("%s", s);
	int n = strlen(s);
	for (int i = 0; i < n - 0; i++) st[calc(s + i, 1)].insert(make_pair(i, i + 1)), num[calc(s + i, 1)]++;
	for (int i = 0; i < n - 1; i++) st[calc(s + i, 2)].insert(make_pair(i, i + 2)), num[calc(s + i, 2)]++;
	for (int i = 0; i < n - 2; i++) st[calc(s + i, 3)].insert(make_pair(i, i + 3)), num[calc(s + i, 3)]++;
	for (int i = 0; i < n - 3; i++) st[calc(s + i, 4)].insert(make_pair(i, i + 4)), num[calc(s + i, 4)]++;
	int q;
	scanf("%d", &q);
	while (q--) {
		char s1[6], s2[6];
		scanf("%s%s", s1, s2);
		int n1 = strlen(s1), n2 = strlen(s2);
		int c1 = calc(s1, n1), c2 = calc(s2, n2);
		if (ans.find(make_pair(c1, c2)) != ans.end()) {
			printf("%d\n", ans[make_pair(c1, c2)]);
		} else {
			printf("%d\n", ans[make_pair(c1, c2)] = gao(c1, c2));
		}
	}
	return 0;
}
