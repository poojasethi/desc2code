#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <utility>
#include <cstdio>
#define INF 99999999
using namespace std; //26^4+26^3
typedef pair<int,int> ii;
vector<int> l[600000],r[600000];
map<ii,int> mp;
string s,s1,s2;

int get_hash(string ss)
{
    int len=ss.length();
    int ret=0;
    for(int i=0;i<len;i++)
    {
        ret=ret*26+ss[i]-'a';
    }
    if(len==2) ret+=26;
    else if(len==3) ret+=26*26+26;
    else if(len==4) ret+=26*26*26+ 26*26 + 26;
    return  ret;
}

void init()
{
    mp.clear();
    int len=s.length();
    int ret=0;
    for(int i=0;i<len;i++)
    {
        for(int j=0;j<4&&i+j<len;j++)
        {
            ret=get_hash(s.substr(i,j+1));
            l[ret].push_back(i);r[ret].push_back(i+j);
        }
    }
}

int query(int x,int y,int len)
{
    if(mp.find(ii(x,y))!=mp.end()) return mp[ii(x,y)];
    int ret=INF;
    for(int i=0;i<l[x].size();i++)
    {
        vector<int>::iterator it=lower_bound(r[y].begin(),r[y].end(),l[x][i]+len-1);
        if(it==r[y].end()) continue;
        ret=min(ret,*it-l[x][i]+1);
    }
    //if(ret!=INF) mp[ii(x,y)]=ret;
    return mp[ii(x,y)]=ret;
}
int main()
{
    int q;
    cin>>s>>q;
    init();
    while(q--)
    {
        cin>>s1>>s2;
        if(s1.length()>s2.length()) swap(s1,s2);
        bool ok = 0;
		for(int i=0; i+s1.size()-1<s2.size(); i++){
			if(s2.substr(i, s1.size()) == s1){
				ok = 1;
				break;
			}
		}
		if(ok){
			if(l[get_hash(s2)].empty()) puts("-1");
			else printf("%d\n", s2.size());
			continue;
		}
        int p1,p2;
        p1=get_hash(s1);
        p2=get_hash(s2);
       int ans=min(query(p1,p2,s2.length()),query(p2,p1,s2.length()));
       if(ans==INF) puts("-1");
       else printf("%d\n",ans);
    }
    return 0;
}