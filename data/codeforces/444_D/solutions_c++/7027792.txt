#include <cstdio>
#include <cstring>
#include <string>
#include <map>
#include <vector>
using namespace std;

const int MAXN = 100000;
const int MAXSUB = 200000;
const int MAXQ = 100000;

int n, q;

char ini[MAXN];

map<pair<int, int>, int> memo;

map<string, int> id;
int t;
int len[MAXSUB];
vector<int> loc[MAXSUB];

int getId(string s) {
  if(id.find(s) == id.end()) {
    len[t] = s.length();
    id[s] = t++;
  }
  return id[s];
}

char a[10], b[10];

int moo(int a, int b) {
  if(loc[a].size() > loc[b].size()) {
    swap(a, b);
  }
  if(memo.find(make_pair(a, b)) != memo.end()) {
    return memo[make_pair(a, b)];
  }

  int res = 1<<30;
  int i1 = -1;
  for(int i = 0; i < loc[a].size(); ++i) {
    int del = 1;
    while(i1 + del < loc[b].size() && loc[b][i1 + del] <= loc[a][i]) {
      del *= 2;
    }
    while(del) {
      if(i1 + del < loc[b].size() && loc[b][i1 + del] <= loc[a][i]) {
        i1 += del;
      }
      del /= 2;
    }
    if(i1 != -1) {
      int temp = max(loc[a][i] + len[a], loc[b][i1] + len[b]) - loc[b][i1];
      res = min(res, temp);
    }
    if(i1 + 1 < loc[b].size()) {
      int temp = max(loc[a][i] + len[a], loc[b][i1 + 1] + len[b]) - loc[a][i];
      res = min(res, temp);
    }
  }

  if(res > (1<<20)) {
    res = -1;
  }
  memo[make_pair(a, b)] = res;
  return res;
}

int main() {
  scanf("%s", ini);
  n = strlen(ini);
  t = 0;
  for(int i = 0; i < n; ++i) {
    string cur;
    for(int j = 0; j < 4 && i + j < n; ++j) {
      cur = cur + ini[i + j];
      loc[getId(cur)].push_back(i);
    }
  }

  memo.clear();
  scanf("%d", &q);  
  for(int i = 0; i < q; ++i) {
    scanf("%s%s", a, b);
    if(id.find(a) == id.end() || id.find(b) == id.end()) {
      printf("%d\n", -1);
    }
    else {
      printf("%d\n", moo(id[a], id[b]));
    }
  }  

  return 0;
}
