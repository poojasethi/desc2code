#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define rep(i,n) for (int i=1;i<=n;++i)
const int N=100005;
int n,m,root,opt,ans[N],x[N],y[N],xl[N],xr[N],yl[N],yr[N],z[N],p[N],q[N];
int ll[N],rr[N],uu[N],dd[N],u[N],v[N],L[N],R[N],fa[N];
bool cmp(const int i,const int j){return z[i]<z[j];}
bool cmpx(const int i,const int j){return x[i]<x[j];}
bool cmpy(const int i,const int j){return y[i]<y[j];}
void update(int t)
{
	int l=L[t],r=R[t]; v[t]=min(u[t],min(v[l],v[r]));
	ll[t]=min(x[t],min(ll[l],ll[r])),rr[t]=max(x[t],max(rr[l],rr[r]));
	uu[t]=min(y[t],min(uu[l],uu[r])),dd[t]=max(y[t],max(dd[l],dd[r]));
}
void build(int &t,int l,int r,int d)
{
	if (l>r){t=0; return;}
	if (l==r){int i=q[l]; fa[i]=t,t=i,ll[i]=rr[i]=x[i],uu[i]=dd[i]=y[i],v[i]=i; return;}
	int mid=l+r>>1; nth_element(q+l,q+mid,q+r+1,d?cmpx:cmpy);
	int i=q[mid]; fa[i]=t,t=i,L[i]=R[i]=i;
	build(L[i],l,mid-1,!d),build(R[i],mid+1,r,!d),update(i);
}
void query(int t,int d,int xl,int xr,int yl,int yr)
{
	if (v[t]>=opt) return;
	if (xl<=ll[t] && rr[t]<=xr && yl<=uu[t] && dd[t]<=yr){opt=v[t]; return;}
	int mid=d?x[t]:y[t];
	if ((d?xr:yr)<mid){query(L[t],!d,xl,xr,yl,yr); return;}
	if ((d?xl:yl)>mid){query(R[t],!d,xl,xr,yl,yr); return;}
	if (xl<=x[t] && x[t]<=xr && yl<=y[t] && y[t]<=yr) opt=min(opt,u[t]);
	query(L[t],!d,xl,d?mid:xr,yl,!d?mid:yr),
	query(R[t],!d,d?mid:xl,xr,!d?mid:yl,yr);
}
int main()
{
	scanf("%d",&m); rep(i,m) scanf("%d%d%d%d%d",xl+i,xr+i,yl+i,yr+i,z+i),p[i]=i;
	scanf("%d",&n); rep(i,n) scanf("%d%d",x+i,y+i),u[i]=i,q[i]=i;
	*v=*ll=*uu=1<<25,root=0,build(root,1,n,0),sort(p+1,p+m+1,cmp);
	rep(j,m){
		opt=n+1; int i=p[j]; query(root,0,xl[i],xr[i],yl[i],yr[i]); int t=opt;
		if (t && t<=n){
			ans[t]=i,u[t]=n+1;
			for (int i=t;i;i=fa[i]) v[i]=min(u[i],min(v[L[i]],v[R[i]]));
		}
	}
	rep(i,n) printf("%d\n",ans[i]); return 0;
}
