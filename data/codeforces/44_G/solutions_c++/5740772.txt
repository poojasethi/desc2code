#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#define inf 100000000
#define N 120000
#define Min(x,y) if(y<x)x=y
#define Max(x,y) if(y>x)x=y
using namespace std;
int ans,i,j,id[N],l,r,u,d,n,root,fans[N],m;
struct kd_tree{
	int l,r,fa,tl,tr,tu,td,s;
}t[N];
struct point{
	int x,y,s;
}p[N];
struct question{
	int x1,y1,x2,y2,h,id;
	void read(){
		scanf("%d%d%d%d%d",&x1,&x2,&y1,&y2,&h);
	}
}Q[N];
bool cmp(const question &a,const question &b){
	return a.h<b.h;
}
bool cmpx(const int &a,const int &b){ return p[a].x<p[b].x; }
bool cmpy(const int &a,const int &b){ return p[a].y<p[b].y; }
void renew(int x,int y){
	if(!y)return;
	Min(t[x].s,t[y].s);
	Min(t[x].tl,t[y].tl);
	Min(t[x].td,t[y].td);
	Max(t[x].tr,t[y].tr);
	Max(t[x].tu,t[y].tu);
}
void GX(int x){
	if(p[x].s==m+1){
		t[x].tl=t[x].td=inf;
		t[x].tr=t[x].tu=-inf;
	}else{
		t[x].tl=t[x].tr=p[x].x;
		t[x].tu=t[x].td=p[x].y;
	}
	t[x].s=p[x].s;
	renew(x,t[x].l);
	renew(x,t[x].r);
}
int kd_build(int d,int l,int r){
	int mid=(l+r)/2;
	nth_element(id+l,id+mid,id+r+1,d?cmpx:cmpy);
	int x=id[mid];
	if(l<mid){
		t[x].l=kd_build(d^1,l,mid-1);
		t[t[x].l].fa=x;
	}
	if(mid<r){
		t[x].r=kd_build(d^1,mid+1,r);
		t[t[x].r].fa=x;
	}
	GX(x);
	return x;
}
void calc(int x){
	if(!x)return;
	if(ans<=t[x].s)return;
	if(u<t[x].td || d>t[x].tu || l>t[x].tr || r<t[x].tl)return;
	if(u>=t[x].tu && d<=t[x].td && l<=t[x].tl && r>=t[x].tr){
		ans=min(ans,t[x].s);
		return;
	}
	if(u>=p[x].y && d<=p[x].y && l<=p[x].x && r>=p[x].x)ans=min(ans,p[x].s);
	bool bo=0;
	if(t[t[x].l].s<t[t[x].r].s)bo=1;
	if(bo)calc(t[x].l);
	calc(t[x].r);
	if(!bo)calc(t[x].l);
}
int main(){
	scanf("%d",&n);
	for(i=1;i<=n;++i)Q[i].read(),Q[i].id=i;
	sort(Q+1,Q+n+1,cmp);
	scanf("%d",&m);
	for(i=1;i<=m;++i)scanf("%d%d",&p[i].x,&p[i].y),id[i]=i,p[i].s=i;
	root=kd_build(0,1,m);
	t[0].s=m+1;
	for(i=1;i<=n;++i){
		ans=m+1;
		l=Q[i].x1; r=Q[i].x2; d=Q[i].y1; u=Q[i].y2;
		calc(root);
		if(ans<=m){
			fans[ans]=Q[i].id;
			p[ans].s=m+1;
			while(ans){
				GX(ans);
				ans=t[ans].fa;
			}
		}
	}
	for(i=1;i<=m;++i)printf("%d\n",fans[i]);
}
