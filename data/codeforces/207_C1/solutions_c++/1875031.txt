#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define for1(i, n) for(int i = 1; i <= int(n); ++i)
#define ford(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define pb push_back
#define X first
#define Y second
#define mp make_pair
#define debug(x) {cerr << #x << " = " << x << endl;}
template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)1E9 + 7;
const ld EPS = 1E-9;
const ld PI = 3.1415926535897932384626433832795;

const int NMAX = 100000;

int p[2][NMAX], t[2][NMAX], n[2], m;
char c[2][NMAX];

li ans[NMAX];

int nx[NMAX][40], sznx = 0;
vector<int> tnx[NMAX];

vector<pair<int, char> > g[NMAX];

void dfs(int v, int r){
    if(r == -1) return;
    int curt = t[1][v];

    forn(i, sz(tnx[r])){
        int stt = max(tnx[r][i], curt);
        ans[stt]++;
        ans[m+10]--;
    }

    forn(i, sz(g[v])){
        int u = g[v][i].X;
        char c = g[v][i].Y;
        dfs(u, nx[r][c - 'a']);
    }
}

int main() {
    #ifdef myproject
    freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);
    #endif

    scanf("%d", &m);

    n[0] = n[1] = 1;
    memset(p, -1, sizeof p);
    memset(t, 63, sizeof t);
    memset(c, 0, sizeof c);
    t[0][0] = t[1][0] = 0;

    for1(si, m){
        int ti, vi; char ci;
        scanf(" %d %d %c ", &ti, &vi, &ci);        

        ti--, vi--;

        p[ti][n[ti]] = vi;
        c[ti][n[ti]] = ci;
        t[ti][n[ti]] = si;
        

        if(ti == 1)
            g[vi].pb(mp(n[1], ci));

        n[ti]++;
    }

    memset(nx, -1, sizeof nx);

    sznx = 1;
    forn(v, n[0]){
        int r = 0;

        for(int cv = v; cv != 0; cv = p[0][cv]){

            int& u = nx[r][c[0][cv] - 'a'];
            if(u == -1){
                u = sznx++;
            }

            r = u;
        }

        tnx[r].pb(t[0][v]);
    }

//    cerr << sznx << endl;

    forn(v, n[1])
        dfs(v, 0);

    fore(i, 1, m+10)
        ans[i] += ans[i-1];

    for1(st, m)
        cout << ans[st] << endl;

    return 0;
}
