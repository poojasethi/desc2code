#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int SIZE = 7020;
const int CHARS = 26;
int n, sz[2], father[2][SIZE], fchar[2][SIZE];
long long ans = 1;
vector < int > next[2][SIZE][CHARS];
void dfs ( int c1, int c2 ) {
        ++ans;
        int n2 = father[1][c2];
        if ( n2 < 0 ) return ;
        int cc = fchar[1][c2];
        const vector < int > &v = next[0][c1][cc];
        for ( int i = 0; i < v.size ( ); ++i ) dfs ( v[i], n2 );
}
int main ( ) {
        scanf ( "%d", &n );
        memset ( father, -1, sizeof ( father ) );
        memset ( fchar, -1, sizeof ( fchar ) );
        sz[0] = sz[1] = 1;
        for ( int i = 0; i < n; ++i ) {
                int t, v, c;
                char ch;
                scanf ( "%d%d %c", &t, &v, &ch );
                --t, --v, c = ch - 'a';
                int add = sz[t]++;
                next[t][v][c].push_back ( add );
                father[t][add] = v;
                fchar[t][add] = c;
                if ( t == 0 ) {
                        string s;
                        for ( int cur = add; cur > 0; cur = father[0][cur] )
                                s += fchar[0][cur];
                        reverse ( s.begin ( ), s.end ( ) );
                        for ( int u = 0; u < sz[1]; ++u ) {
                                int cur = u;
                                for ( int q = 0; q < s.size ( ); ++q ) {
                                        if ( fchar[1][cur] != s[q] ) {
                                                cur = -1;
                                                break;
                                        }
                                        cur = father[1][cur];
                                }
                                if ( cur >= 0 ) ++ans;
                        }
                }
                else dfs ( 0, add );
                printf ( "%d\n", ans );
        }
}
