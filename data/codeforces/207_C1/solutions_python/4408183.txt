// Task-ID: 1373
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <string>
#include <stack>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define For(i,a,b) for(int (i)=(a);(i)<=(b);(i)++)
#define FOR(i,a) For(i,1,a)
#define Ford(i,a,b) for(int (i)=(a);(i)>=(b);(i)--)
#define Rep(i,a,b) for(int (i)=(a);(i)<(b);(i)++)
#define REP(i,a) Rep(i,0,a)
#define type(x) __typeof(x.begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#define NEW(x,n) (x*)calloc(n,sizeof(x))
#define fill(x,y) memset(x,y,sizeof x)
#define all(x) x.begin(),x.end()
#define compress(x) {sort(all(x));(x).resize(unique(all(x))-(x).begin());}
#define two(x) (1LL<<(x))
#define fi first
#define se second
#define gcd __gcd
#define pb push_back
#define mp make_pair

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
	#define dbg(x) cerr<<#x<<":"<<(x)<<endl
	#define dg(x) cerr<<#x<<":"<<(x)<<' '
#else
    #define eprintf(...) 0
	#define dbg(x) 0
	#define dg(x) 0
#endif

using namespace std;

typedef long long Lint;
typedef long double ld;
typedef pair<int,int> ii;
typedef pair<int,ii> iii;
typedef vector<int> vi;
typedef vector<ii> vii;

const int inf = 1e9+5143;
const Lint Linf = 1e18+5413;
const double eps = 1e-10;
const double pi = acos(-1);

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T lcm(T a,T b){
	return a/gcd(a,b)*b;
}

inline int read(){
	int res = 0LL ;int neg ;
	while(1){
		char ch = getchar();
		if(ch>='0' && ch<='9' || ch=='-'){
			if(ch=='-') neg = -1;
			else neg = 1 , res = ch-'0';
			break;
		}
	}
	while(1){
		char ch = getchar();
		if(ch>='0' && ch<='9') res*=10 , res+=ch-'0';
		else break;
	}
	return res*neg;
}

const int N = 7010;
const int MOSTR = N - 5;

const Lint prime = 37 ;

Lint power[N];

int par1[N];
int par2[N];
char ch1[N] , ch2[N];
map<Lint,int> down , up;

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int q = read();
    int n1 = 1 ;
    int n2 = 1 ;

    power[0] = 1;
    Rep(i,1,N) power[i] = power[i - 1] * prime;

    Lint res = 1LL;

    while(q--){
        int t = read();
        int u = read();
        char ch;scanf(" %c",&ch);
        if(t == 1){
            ++n1;
            par1[n1] = u;
            ch1[n1] = ch;
            vi path;
            int node = n1;
            do{
                path.pb(ch1[node]);
                node = par1[node];
            }while(node != 1);
            Lint hs = 0;
            REP(i,path.size()){
                if(i == 0){
                    hs = path[i] - 'a' + 1;
                }else{
                    hs += (path[i] - 'a' + 1) * power[i];
                }
            }
            hs *= power[MOSTR];
            up[hs]++;
            res += down[hs];
        }else{
            ++n2;
            res ++ ;
            par2[n2] = u;
            ch2[n2] = ch;
            vi path;
            int node = n2;
            do{
                path.pb(ch2[node]);
                node = par2[node];
            }while(node != 1);
            reverse(all(path));
            vector<Lint> hs;
            hs.resize(path.size());
            REP(i,path.size()){
                if(i == 0){
                    hs[i] = path[i] - 'a' + 1;
                }else{
                    hs[i] = hs[i - 1] + (path[i] - 'a' + 1) * power[i];
                }
            }
            REP(i,path.size()){
                Lint temp = (hs[path.size() - 1] - (i == 0? 0 : hs[i - 1])) * power[MOSTR - i];
                down[temp] ++;
                res += up[temp];
            }
        }
        cout << res << endl;
    }

    return 0;
}
