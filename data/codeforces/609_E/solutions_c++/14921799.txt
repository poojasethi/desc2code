#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
struct E { int x,y,v,id; }e[200050];
int f[200050],n,m;
long long ans[200050];
int fa[200050][20],deep[200050],d[200050][20];
struct sef { int ne,en,v; }h[400050];
int tot,first[200050];
long long tmp;
bool bo[200050];
inline bool cmp(E a,E b)
{ return a.v<b.v; }
inline int Find(int x)
{
	if (f[x]!=x) f[x]=Find(f[x]);
	return f[x];
}
inline void setl(int x,int y,int z)
{
	h[++tot]=(sef){first[x],y,z};
	first[x]=tot;
	
	h[++tot]=(sef){first[y],x,z};
	first[y]=tot;
}
inline void Dfs(int x)
{
	int y;
	for (int i=first[x];y=h[i].en,i;i=h[i].ne)
		if (y!=fa[x][0]) {
			fa[y][0]=x;
			d[y][0]=h[i].v;
			deep[y]=deep[x]+1;
			Dfs(y);
		}
}
inline int Ask(int x,int y)
{
	int tmp=0;
	if (deep[x]<deep[y]) swap(x,y);
	for (int p=18;p>=0;--p)
		if (deep[fa[x][p]]>=deep[y]) {
			tmp=max(tmp,d[x][p]);
			x=fa[x][p];
		}
	if (x==y) return tmp;
	for (int p=18;p>=0;--p)
		if (fa[x][p]!=fa[y][p]) {
			tmp=max(tmp,max(d[x][p],d[y][p]));
			x=fa[x][p]; y=fa[y][p];
		}
	tmp=max(tmp,max(d[x][0],d[y][0]));
	return tmp;
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=m;++i) 
		scanf("%d%d%d",&e[i].x,&e[i].y,&e[i].v),e[i].id=i;;
	sort(e+1,e+m+1,cmp);
	for (int i=1;i<=n;++i) f[i]=i;
	int r1,r2;
	for (int i=1;i<=m;++i)
	{
		r1=Find(e[i].x),r2=Find(e[i].y);
		if (r1!=r2) {
			setl(e[i].x,e[i].y,e[i].v);
			bo[i]=1;
			f[r1]=r2;
			tmp+=e[i].v;
		}
	}
	deep[1]=1;
	Dfs(1);
	for (int p=0;p<=18;++p)
		for (int i=1;i<=n;++i)
			if (fa[fa[i][p]][p]) fa[i][p+1]=fa[fa[i][p]][p],d[i][p+1]=max(d[i][p],d[fa[i][p]][p]);
	for (int i=1;i<=m;++i)
		if (!bo[i]) {
			ans[e[i].id]=tmp+e[i].v-Ask(e[i].x,e[i].y);
		} else ans[e[i].id]=tmp;
	for (int i=1;i<=m;++i) printf("%I64d\n",ans[i]);
}