#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 2e5 + 5;

int n, m, x, y, z, t, root[N], ans[N];
set< int > g[N];
pair< int , pii > e[N];

int findset(int x) { return root[x] = root[x] == x ? x : findset(root[x]); }

int merge(int x, int y, int z) {
	x = findset(x);
	y = findset(y);
	if(g[x].size() < g[y].size()) { swap(g[x], g[y]); }
	root[y] = x;
	while(g[y].size()) {
		if(g[x].find(*g[y].begin()) != g[x].end()) {
			ans[*g[y].begin()] -= z;
		}
		else g[x].insert(*g[y].begin());
		g[y].erase(g[y].begin());
	}
}

int main() {

	scanf("%d %d", &n, &m);

	FOR(i, 1, m) {
		scanf("%d %d %d", &x, &y, &z);
		g[x].insert(i);
		g[y].insert(i);
		e[i] = mp(z, mp(x, y));
		ans[i] = z;
	}
	
	sort(e + 1, e + m + 1);

	FOR(i, 1, n) root[i] = i;

	ll ans = 0;

	FOR(i, 1, m) {
		int x = e[i].nd.st, y = e[i].nd.nd, z = e[i].st;
		if(findset(x) == findset(y)) continue;
		merge(x, y, z);
		ans += z;
	}

	FOR(i, 1, m)
		printf("%lld\n", :: ans[i] + ans);		

	return 0;
}
