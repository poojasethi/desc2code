#include <cstdio>
#include <algorithm>
#include <iostream>
#include <cstring>
using namespace std;
typedef long long ll;
struct edge
{
	int x,y,z,id;
};
edge a[1000005];
struct EDGE
{
	int vet,next,len;
};
EDGE E[1000005];
int label;
bool flag[1000005];
int fmax[200005][20];
int fa[200005][20];
int head[1000005];
ll ans[200005];
int dep[1000005];
ll ANS;
bool cmp(edge x,edge y)
{
	return x.z<y.z;
}
int f[1000005];
int tot;
void add(int u,int v,int c)
{
	E[++tot] = (EDGE){v,head[u],c};
	head[u] = tot;
}
int get(int x)
{
	if (x!=f[x]) f[x] = get(f[x]);
	return f[x];
}
int n,m;
void dfs(int u,int dad,int deep)
{
	dep[u] = deep;
	for (int e=head[u];e!=-1;e=E[e].next)
	{
		int v = E[e].vet;
		if (v!=dad)
		{
			dfs(v,u,deep+1);
			fmax[v][0] = E[e].len;
			fa[v][0] = u;
		}
	}
}
int ask(int x,int y)
{
	int ans = 0;
	if (dep[x]>dep[y]) swap(x,y);
	int f2 = y;
	int f1 = x;
	while (dep[f2]>dep[f1])
	{
		int j = 0;
		while (fa[f2][j+1]!=0&&dep[fa[f2][j+1]]>dep[f1]) j++;
		ans = max(ans,fmax[f2][j]);
		f2 = fa[f2][j];
	}
	while (f1!=f2)
	{
		int j = 0;
		while (fa[f2][j+1]!=0&&fa[f1][j+1]!=0&&fa[f2][j+1]!=fa[f1][j+1]) j++;
		ans = max(ans,fmax[f2][j]);
		ans = max(ans,fmax[f1][j]);
		f1 = fa[f1][j];
		f2 = fa[f2][j];
	}
	return ans;
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=m;i++)
	{
	    scanf("%d%d%d",&a[i].x,&a[i].y,&a[i].z);
	    a[i].id = i;
	}
	for (int i=1;i<=n;i++) head[i] = -1;
	sort(a+1,a+1+m,cmp);
	for (int i=1;i<=n;i++) f[i] = i;
	for (int i=1;i<=m;i++)
	{
		int r1 = get(a[i].x);
		int r2 = get(a[i].y);
		if (r1!=r2)
		{
			f[r2] = r1;
			flag[i] = true;
			ANS += a[i].z;
			add(a[i].x,a[i].y,a[i].z);
			add(a[i].y,a[i].x,a[i].z);
		}
	}
	dfs(1,-1,1);
	for (int j=1;(1<<j)<=n;j++)
	for (int i=1;i<=n;i++)
	if (fa[i][j-1]!=0&&fa[fa[i][j-1]][j-1]!=0)
	{
		fa[i][j] = fa[fa[i][j-1]][j-1];
		fmax[i][j] = max(fmax[i][j-1],fmax[fa[i][j-1]][j-1]);
	}
	for (int i=1;i<=m;i++)
	if (flag[i]==true) ans[a[i].id] = ANS;
	else
	{
		int x = a[i].x;
		int y = a[i].y;
		ans[a[i].id] = ANS-ask(x,y)+a[i].z;
	}
	for (int i=1;i<=m;i++)
	printf("%I64d\n",ans[i]);
	return 0;
}