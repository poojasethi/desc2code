#include <cstdio>
#include <algorithm>
#define LL long long
#define N 200005
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
#define fe(a, b, c) for(int a = (b); a; a = c[a])
using namespace std;

int n, m, f[N], v[N + N], o[N + N], t[N][18], w[N][18], a[N], b[N], c[N], d[N], e[N + N], q[N], s[N], p;
LL tt;
bool u[N];

void bd(int x, int y, int z){
	v[++p] = y; o[p] = f[x]; f[x] = p; e[p] = z;
}

int find(int x){
	return x == s[x] ? x : s[x] = find(s[x]);
}

bool cmp(int x, int y){
	return c[x] < c[y];
}

void dfs(int x, int y, int z, int r){
	t[x][0] = y;
	w[x][0] = z;
	d[x] = r;
	
	fe(i, f[x], o) if(v[i] != y) dfs(v[i], x, e[i], r + 1);
}

int main(){
	scanf("%d %d", &n, &m);
	fi(i, 0, m){
		scanf("%d %d %d", &a[i], &b[i], &c[i]);
		q[i] = i;
	}
	sort(q, q + m, cmp);
	
	FI(i, 1, n) s[i] = i;
	fi(i, 0, m){
		if(find(a[q[i]]) == find(b[q[i]])) continue;
		s[find(b[q[i]])] = find(a[q[i]]);
		tt += c[q[i]];
		u[q[i]] = 1;
		bd(a[q[i]], b[q[i]], c[q[i]]);
		bd(b[q[i]], a[q[i]], c[q[i]]);
	}
	
	dfs(1, 1, 0, 0);
	fi(i, 1, 18) FI(j, 1, n){
		t[j][i] = t[t[j][i - 1]][i - 1];
		w[j][i] = max(w[j][i - 1], w[t[j][i - 1]][i - 1]);
	}
	
	fi(i, 0, m){
		if(u[i]){
			printf("%I64d\n", tt);
			continue;
		}
		
		int x = a[i], y = b[i], z = 0;
		if(d[x] > d[y]) swap(x, y);
		for(int i = d[y] - d[x], j = 0; i; i >>= 1, j++) if(i & 1){
			z = max(z, w[y][j]);
			y = t[y][j];
		}
		
		FD(i, 17, 0){
			if(t[x][i] != t[y][i]){
				z = max(z, max(w[x][i], w[y][i]));
				x = t[x][i];
				y = t[y][i];
			}
		}
		
		if(x != y) z = max(z, max(w[x][0], w[y][0]));
		printf("%I64d\n", tt + c[i] - z);
	}
	scanf("\n");
}
/*
5 7
1 2 3
1 3 1
1 4 5
2 3 2
2 5 3
3 4 2
4 5 4*/
