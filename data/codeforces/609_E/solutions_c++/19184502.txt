#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <cmath>
#include <cstdio>
#include <vector>
#include <string>
#include <cctype>
#include <bitset>
#include <cstdlib>
//#include <ctime>
#include <iomanip>
#include <cstring>
#include <climits>
#include <utility>
#include <iostream>
#include <algorithm>
#define eps 1e-9
using namespace std;
/*
	Source:
	Author:szr(Age_of_CPP_Empires)
	Date:
*/
struct edge{
	int cost,from,to;
};
bool cmp(edge as,edge bs)
{
	return as.cost<bs.cost;
}
int fa[200005],cnt[200005],n,m;
long long sum;
set<int> gra[200005];
edge ed[200005];
int findfa(int as)
{
	if(as!=fa[as]) return fa[as]=findfa(fa[as]);
	return fa[as];
}
void mergeset(int as,int bs,int cost)
{
	if(gra[bs].size()>gra[as].size()) swap(gra[as],gra[bs]);
	fa[bs]=as;
	while(!gra[bs].empty())
	{
		if(gra[as].find(*gra[bs].begin())!=gra[as].end()) cnt[*gra[bs].begin()]-=cost;
		else gra[as].insert(*gra[bs].begin());
		gra[bs].erase(gra[bs].begin());
	}
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) fa[i]=i;
	for(int i=0;i<m;i++)
	{
		scanf("%d%d%d",&ed[i].from,&ed[i].to,&ed[i].cost);
		gra[ed[i].from].insert(i);
		gra[ed[i].to].insert(i);
		cnt[i]=ed[i].cost;
	}
	sort(ed,ed+m,cmp);
	for(int i=0;i<m;i++)
	{
		int st=findfa(ed[i].from),ta=findfa(ed[i].to);
		if(st==ta) continue;
		mergeset(st,ta,ed[i].cost);
		sum+=ed[i].cost;
	}
	for(int i=0;i<m;i++) printf("%I64d\n",sum+cnt[i]);
	//system("pause");
	return 0;
}
			        	   	   				   	 			