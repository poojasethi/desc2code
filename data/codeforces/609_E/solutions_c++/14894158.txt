//In the name of God

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstring>
#include <cmath>
using namespace std;
#define mp make_pair
#define lol long long
const lol MAXN=2e5+10,MAXL=20;
pair <pair <lol,lol>,lol > edge[MAXN];
pair <lol,pair <lol,lol> > tmp[MAXN];
vector <pair <lol,lol> > g[MAXN];
lol s[MAXN],r[MAXN],h[MAXN],val[MAXN][MAXL],par[MAXN][MAXL],tot;

lol root(lol v)
{
  if(r[v]==v)
    return v;
  return r[v]=root(r[v]);
}

void add(lol v,lol u,lol w)
{
  lol tmp1=v,tmp2=u;
  v=root(v);u=root(u);
  if(v==u)
    return;
  g[tmp1].push_back(mp(tmp2,w));
  g[tmp2].push_back(mp(tmp1,w));
  if(s[v]>s[u])
    swap(v,u);
  r[v]=u;
  s[v]+=s[u];
  tot+=w;
}

void dfs(lol v,lol p=0,lol w=0,lol hei=0)
{
  par[v][0]=p;
  for(lol i=1;i<MAXL;i++)
    par[v][i]=par[par[v][i-1]][i-1];
  val[v][0]=w;
  h[v]=hei;
  for(lol i=1;i<MAXL;i++)
    val[v][i]=max(val[v][i-1],val[par[v][i-1]][i-1]);
  for(lol i=0;i<g[v].size();i++)
    {
      lol u=g[v][i].first;
      if(u!=p)
	dfs(u,v,g[v][i].second,hei+1);
    }
}

lol getpar(lol v,lol x)
{
  for(lol i=0;i<MAXL;i++)
    if(x&(1<<i))
      v=par[v][i];
  return v;
}

lol getval(lol v,lol x)
{
  lol res=0;
  for(lol i=0;i<MAXL;i++)
    if(x&(1<<i))
      {
	res=max(res,val[v][i]);
	v=par[v][i];
      }
  return res;
}

lol LCA(lol v,lol u)
{
  if(h[v]>h[u])
    swap(v,u);
  u=getpar(u,h[u]-h[v]);
  if(v==u)
    return v;
  for(lol i=MAXL-1;i>=0;i--)
    if(par[v][i]!=par[u][i])
      v=par[v][i],u=par[u][i];
  return par[v][0];
}

int main()
{
  ios::sync_with_stdio(false);
  lol n,m;
  cin>>n>>m;
  for(lol i=0;i<n;i++)
    r[i]=i,s[i]=1;
  for(lol i=0;i<m;i++)
    {
      lol v,u,w;
      cin>>v>>u>>w;
      v--;u--;
      edge[i]=mp(mp(v,u),w);
      tmp[i]=mp(w,mp(v,u));
    }
  sort(tmp,tmp+m);
  for(lol i=0;i<m;i++)
    add(tmp[i].second.first,tmp[i].second.second,tmp[i].first);
  dfs(0);
  for(lol i=0;i<m;i++)
    {
      lol v=edge[i].first.first,u=edge[i].first.second;
      lol w=edge[i].second;
      lol l=LCA(v,u);
      lol hv=h[v]-h[l],hu=h[u]-h[l];
      lol val1=getval(v,hv),val2=getval(u,hu);
      cout<<tot-max(val1,val2)+w<<endl;
    }
  return 0;
}
