#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<iostream>
#include<set>
using namespace std;
const int maxn = 200000 + 100 ;
set <int> g[maxn];
int p[maxn],ans[maxn];
long long sum=0;
int find(int x){return p[x]==x? x:p[x]=find(p[x]);}
pair <int,pair<int,int> > e[maxn];
void merge(int x,int y,int c)
{
//	cout<<x<<" "<<y<<endl;
	if(g[x].size()>g[y].size())swap(x,y);
	p[x]=y;sum+=c;
	while(g[x].size())
	{
//		cout<<*g[x].begin()<<endl;
		if(g[y].find(*g[x].begin())!=g[y].end())
		ans[*g[x].begin()]-=c;
		else g[y].insert(*g[x].begin()); 
		g[x].erase(g[x].begin());
	}
	return ;
}
int main()
{
	int n,m;cin>>n>>m;
//	cout<<n<<" "<<m<<endl;
	for(int i=1;i<=m;i++)
	{
		int x,y,c;scanf("%d%d%d",&x,&y,&c);
		g[x].insert(i);
		g[y].insert(i);
		ans[i]=c;
		e[i]=make_pair(c,make_pair(x,y));
	}
	sort(e+1,e+1+m);
	for(int i=1;i<=n;i++)p[i]=i;
//	cout<<"******"<<endl;
	for(int i=1;i<=m;i++)
	{
		int a=find(e[i].second.first),b=find(e[i].second.second);
		if(a!=b)merge(a,b,e[i].first);
	}
	for(int i=1;i<=m;i++)
	printf("%I64d\n",sum+ans[i]);
	return 0;
}