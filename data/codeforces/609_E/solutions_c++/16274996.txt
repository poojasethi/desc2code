#pragma comment(linker, "/STACK=102400000, 102400000")
#include <vector>
#include <cstdio>
#include <algorithm>

using namespace std;

const int N = 200001;
const int K = 20;

int n, m;
int a[N], b[N], w[N], d[N];
vector<int> c[N], e[N];
int f[N][K], h[N], g[N], l[N][K];

bool cmp(int i, int j) {
	return w[i] < w[j];
}
int get(int i) {
	if (g[i] == i) return i;
	return g[i] = get(g[i]);
}
void dfs(int i, int fa, int le) {
	h[i] = h[fa] + 1;
	f[i][0] = fa;
	l[i][0] = le;
	for (int k = 1; k < K; k++) {
		f[i][k] = f[f[i][k - 1]][k - 1];
		l[i][k] = max(l[i][k - 1], l[f[i][k - 1]][k - 1]);
	}
	for (int j = 0; j < c[i].size(); j++) {
		if (c[i][j] != fa) {
			dfs(c[i][j], i, e[i][j]);
		}
	}
}
int cal(int u, int v) {
	if (h[u] < h[v]) {
		swap(u, v);
	}
	int ans = 0;
	for (int k = K - 1; k >= 0; k--) {
		if (h[f[u][k]] >= h[v]) {
			ans = max(ans, l[u][k]);
			u = f[u][k];
		}
	}
	for (int k = K - 1; k >= 0; k--) {
		if (f[u][k] != f[v][k]) {
			ans = max(ans, l[u][k]);
			ans = max(ans, l[v][k]);
			u = f[u][k];
			v = f[v][k];
		}
	}
	if (u != v) {
		ans = max(ans, l[u][0]);
		ans = max(ans, l[v][0]);
	}
	return ans;
}
int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		scanf("%d%d%d", &a[i], &b[i], &w[i]);
		d[i] = i;
	}
	sort(d, d + m, cmp);
	for (int i = 1; i <= n; i++) {
		g[i] = i;
	}
	long long ans = 0;
	for (int i = 0; i < m; i++) {
		if (get(a[d[i]]) != get(b[d[i]])) {
			c[a[d[i]]].push_back(b[d[i]]);
			c[b[d[i]]].push_back(a[d[i]]);
			e[a[d[i]]].push_back(w[d[i]]);
			e[b[d[i]]].push_back(w[d[i]]);
			g[get(a[d[i]])] = get(b[d[i]]);
			ans += w[d[i]];
		}
	}
	dfs(1, 0, 0);
	for (int i = 0; i < m; i++) {
		printf("%lld\n", ans + w[i] - cal(a[i], b[i]));
	}
	return 0;
}

			  	 	 		  	  	  	 		   					