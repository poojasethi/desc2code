#include<cstring>
#include<cstdio>
#include<cmath>
#include<vector>
#include<algorithm>
using namespace std; 

#define pb push_back
typedef long long LL; 

struct node{
	int x,y,d,id; 
}edge[200003]; 
int f[200003][20],g[200003][20],n,m,tin[200003],tout[200003],cnt,p[200003]; 
LL  ans[200003]; 
vector<int> a[200003],cost[200003]; 
bool vis[200003]; 

bool cmp(node ta,node tb){
	return ta.d<tb.d; 
}
int getfather(int k){ 
	return k==p[k]? k: p[k]=getfather(p[k]); 
}

void dfs(int k,int fa,int len){ 
	tin[k]=++cnt,f[k][0]=fa,g[k][0]=len; 
	for(int i=1;i<20;i++) { 
		int tmp=f[k][i-1]; 
		f[k][i]=f[tmp][i-1]; 
		g[k][i]=max(g[k][i-1],g[tmp][i-1]); 
	}
	for(int i=0;i<(int)a[k].size();i++) 
		if (fa!=a[k][i]) dfs(a[k][i],k,cost[k][i]); 
	tout[k]=++cnt; 
}

bool ancestor(int x,int y) {
	return ( tin[x]<=tin[y]  && tout[y]<=tout[x]); 
}

int calc(int x,int anc){ 
	if (x==anc) return 0; 
	int ret=0; 
	for(int i=19;i>=0;i--) 
		if  (!ancestor(f[x][i],anc) ) { 
			ret=max(ret,g[x][i]); 
			x=f[x][i]; 
		}
	return max(ret,g[x][0]); 
}
	
int main(){ 
	scanf("%d%d",&n,&m); 
	for(int i=1;i<=m;i++){ 
		scanf("%d%d%d",&edge[i].x,&edge[i].y,&edge[i].d); edge[i].id=i; 
	}
	sort(edge+1,edge+m+1,cmp); 
	for(int i=1;i<=n;i++) p[i]=i; 
	LL  sum=0; 
	for(int k=0,i=1;k<n-1;k++,i++) { 
		int fa=getfather(edge[i].x);
		int fb=getfather(edge[i].y); 
		if ( p[fa]==p[fb]) { 
			k--; continue; 
		}
		p[fa]=p[fb]; vis[edge[i].id]=true; sum+=edge[i].d;
	    a[edge[i].x].pb(edge[i].y); a[edge[i].y].pb(edge[i].x); 	
		cost[edge[i].x].pb(edge[i].d); cost[edge[i].y].pb(edge[i].d); 
	}
	tin[0]=0; tout[0]=2*n+1; 
	dfs(1,0,0); 
	for(int i=1;i<=m;i++) 
		if (vis[edge[i].id]) ans[edge[i].id]=sum;
		else { 
			int x=edge[i].x,y=edge[i].y,anc; 
			if (ancestor(x,y) ) anc=x;
			else if ( ancestor(y,x) )anc=y; 
			else { 
				anc=x; 
				for(int j=19;j>=0;j--) 
					if ( !ancestor( f[anc][j],y) ) anc=f[anc][j];
				anc=f[anc][0]; 
			}
			int mx=max(calc(x,anc),calc(y,anc)); 
			ans[edge[i].id]=sum-mx+edge[i].d; 
		}
	for(int i=1;i<=m;i++) printf("%I64d\n",ans[i]); 
	return 0; 
}