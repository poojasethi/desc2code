#include<algorithm>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque>
#include<iterator>
#include<iostream>
#include<list>
#include<map>
#include<memory>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#include<utility>
#include<bitset>
#define ll long long
const int N=200001;
using namespace std;

struct edge{
       int u,v,w;
}e[N];

bool Comp(edge x,edge y){
     return x.w<y.w;
}

int f[N],w[N];
set<int> g[N];

int find(int x){
    if(f[x]!=x) f[x]=find(f[x]);
    return f[x];
}

bool unite(int x,int y,int z){
     x=find(x);y=find(y);
     if(x==y) return false;
     if(g[x].size()<g[y].size()) swap(x,y);
     f[y]=x;
     while(!g[y].empty())
     {  int p=*g[y].begin();
        if(g[x].find(p)!=g[x].end()) w[p]-=z;
        else g[x].insert(p);
        g[y].erase(g[y].begin());
     }
     return true;
}
           
int main(){
    int n,m;
    scanf("%d%d",&n,&m);
    int i,u,v;
    for(i=0;i<n;i++) f[i]=i;
    for(i=0;i<m;i++)
    {  scanf("%d%d%d",&u,&v,&e[i].w);
       u--;v--;
       g[u].insert(i);
       g[v].insert(i);
       e[i].u=u;e[i].v=v;
       w[i]+=e[i].w;
    }
    sort(e,e+m,Comp);
    ll tot=0;
    for(i=0;i<m;i++)
    {  int u=e[i].u,v=e[i].v;
       if(unite(u,v,e[i].w))
          tot+=(ll)e[i].w;
    }
    for(i=0;i<m;i++)
        printf("%I64d\n",tot+w[i]);
    //system("pause");
    return 0;
}

       
