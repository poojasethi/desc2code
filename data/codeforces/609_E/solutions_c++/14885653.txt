//In the Name of God

#include<iostream>
#include<vector>
#include<algorithm>
#define int long long
#define mp make_pair
#define pb push_back
#define edge(X,Y,Z) mp(X,mp(Y,Z))
#define A second.first
#define B second.second
#define L first

using namespace std;

const int maxn=200200;
const int maxlog=20;
int n,m;
int v[maxn],u[maxn],w[maxn];
int dis[maxn],par[maxn],d[maxn][maxlog],dp[maxn][maxlog];
int MST;
vector<pair<int,int> > g[maxn];
vector<pair<int,pair<int,int> > > e;

void dfs(int V)
{
  for(int i=1;i<maxlog;i++)
    {
      d[V][i]=d[d[V][i-1]][i-1];
      dp[V][i]=max(dp[V][i-1],dp[d[V][i-1]][i-1]);
    }
  for(int U,i=0;i<g[V].size();i++)
    {
      U=g[V][i].first;
      if(U!=d[V][0])
	{
	  dis[U]=dis[V]+1;
	  d[U][0]=V;
	  dp[U][0]=g[V][i].second;
	  dfs(U);
	}
    }
}

int dad(int V,int h)
{
  for(int i=maxlog-1;i>=0;i--)
    if(dis[d[V][i]]>=h)
      V=d[V][i];
  return V;
}

int maxi(int V,int h)
{
  int ret=0;
  for(int i=maxlog-1;i>=0;i--)
    if(dis[d[V][i]]>=h)
      ret=max(ret,dp[V][i]),V=d[V][i];
  return ret;
}

int lca(int V,int U)
{
  if(dis[V]>dis[U])
    swap(V,U);
  U=dad(U,dis[V]);
  if(U==V)
    return V;
  for(int i=maxlog-1;i>=0;i--)
    if(d[V][i]!=d[U][i])
      V=d[V][i],U=d[U][i];
  return d[V][0];
}

int dad(int V)
{
  if(V==par[V])
    return V;
  return par[V]=dad(par[V]);
}

main()
{
  ios_base::sync_with_stdio(0);cin.tie(0);
  cin>>n>>m;
  for(int i=0;i<n;i++)
    par[i]=i;
  for(int i=0;i<m;i++)
    {
      cin>>v[i]>>u[i]>>w[i];
      v[i]--,u[i]--;
      e.pb(edge(w[i],v[i],u[i]));
    }
  sort(e.begin(),e.end());
  for(int a,b,l,i=0;i<m;i++)
    {
      a=e[i].A;
      b=e[i].B;
      l=e[i].L;
      if(dad(a)!=dad(b))
	{
	  g[a].pb(mp(b,l));
	  g[b].pb(mp(a,l));
	  par[dad(a)]=dad(b);
	  MST+=l;
	}
    }
  dfs(0);
  for(int D,a,b,l,c1,c2,i=0;i<m;i++)
    {
      a=v[i];
      b=u[i];
      l=w[i];
      if(d[a][0]==b or d[b][0]==a)
	{
	  cout<<MST<<endl;
        }
      else
	{
	  D=lca(a,b);
	  c1=maxi(a,dis[D]);
	  c2=maxi(b,dis[D]);
	  cout<<MST+l-max(c1,c2)<<endl;
	}
    }
  return 0;
}
