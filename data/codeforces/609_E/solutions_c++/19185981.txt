#include<iostream>
#include<vector>
#include<set>
#include<queue>
#include<utility>
using namespace std;
const int maxN=200001;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<int,pair<int,int> > Edge;
int root[maxN],N,M;
ll ans[maxN];
set<Edge> edge;
set<int> e[maxN];
void Swap(int &a,int &b){int t=a;a=b;b=t;}
void init(){
	for(int i=1;i<=N;i++)
		root[i]=i;
}
int Find(int x){
	if(root[x]==x) return x;
	else return root[x]=Find(root[x]);
}
bool Loop(int x,int y){
	return Find(x)==Find(y);
}
void Union(int x,int y,int d){
	x=Find(x);
	y=Find(y);
	if(e[x].size()<e[y].size()) Swap(x,y);
	root[y]=x;
	while(e[y].begin()!=e[y].end()){
		if(e[x].find(*e[y].begin())!=e[x].end()) ans[*e[y].begin()]-=d;
		else e[x].insert(*e[y].begin());
		e[y].erase(e[y].begin());
	}
}
int main(){
	int a,b,c;
	cin>>N>>M;
	init();
	for(int i=1;i<=M;i++){
		cin>>a>>b>>c;
		edge.insert(make_pair(c,make_pair(a,b)));
		ans[i]+=c;
		e[a].insert(i);
		e[b].insert(i);
	}
	ll dis=0;
	for(set<Edge>::iterator it=edge.begin();it!=edge.end();it++){
		int x=it->second.first,y=it->second.second,d=it->first;
		if(Loop(x,y)) continue;
		Union(x,y,d);
		dis+=d;
	}
	for(int i=1;i<=M;i++) cout<<dis+ans[i]<<'\n';
	return 0;
}
