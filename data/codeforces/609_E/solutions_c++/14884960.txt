#include<bits/stdc++.h>
#define MAXN 200005
using namespace std;
int u[MAXN], v[MAXN], w[MAXN];
vector<int> queries[MAXN];
pair<int, pair<int, int> > edges[MAXN];
long long id[MAXN], sz[MAXN], ans[MAXN];
long long totPrice;
int root(int node) {
    if (id[node] == node)
        return node;
    return id[node] = root(id[node]);
}

void join(int x, int y, int cost) {
    x = root(x);
    y = root(y);
    if (x == y)
        return;
    totPrice += cost;
    if (sz[x] + queries[x].size() > sz[y] + queries[y].size()) {

        for (int i = 0; i < int(queries[y].size()); i++) {
            int ind = queries[y][i];
            int node1 = root(u[ind]);
            int node2 = root(v[ind]);
            int price = w[ind];
            if (node1 != y)
                swap(node1, node2);
            if (node2 == x)
                ans[ind] = price - cost;
            else if(node2 != y)
                queries[x].push_back(ind);
        }
        id[y] = x;
        sz[x] += sz[y];
    }
    else {

        for (int i = 0; i < int(queries[x].size()); i++) {
            int ind = queries[x][i];
            int node1 = root(u[ind]);
            int node2 = root(v[ind]);
            int price = w[ind];
            if (node1 != x)
                swap(node1, node2);
            if (node2 == y)
                ans[ind] = price - cost;
            else if (node2 != x)
                queries[y].push_back(ind);
        }
        id[x] = y;
        sz[y] += sz[x];
    }
}

int main() {
    ios::sync_with_stdio(false);
    int n, m; scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++) {
        scanf("%d%d%d", u + i, v + i, w + i);
        --u[i]; --v[i];
        queries[u[i]].push_back(i);
        queries[v[i]].push_back(i);
        edges[i] = make_pair(w[i], make_pair(u[i], v[i]));
    }

    sort(edges, edges + m);
    for (int i = 0; i < n; i++)
        sz[i] = 1, id[i] = i;
    for (int i = 0; i < m; i++) {
        int u = edges[i].second.first;
        int v = edges[i].second.second;
        int w = edges[i].first;
        join(u, v, w);
    }

    for (int i = 0; i < m; i++)
        printf("%lld\n", ans[i] + totPrice);
    return 0;
}
