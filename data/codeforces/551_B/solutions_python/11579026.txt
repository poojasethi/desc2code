__author__ = 'Rustt'

def input():
   a = raw_input().strip()
   b = raw_input().strip()
   c = raw_input().strip()
   return [a, b, c]

def count_possible_entry(d_1, d_2):
    count_2 = 100000
    for symbol, count in d_2.items():
        d_1.setdefault(symbol, 0)
        if d_1[symbol] / count < count_2:
            count_2 = d_1[symbol] / count
    return count_2

def build_string_answer(d, b, count_b, d_b, c, count_c, d_c):
    s = []
    s += [b for i in xrange(count_b)]
    for symbol, count in d_b.items():
        d[symbol] -= count * count_b
    count_c = 100000
    for symbol, count in d_c.items():
        if d[symbol] / count < count_c:
            count_c = d[symbol] / count
    s += [c for i in xrange(count_c)]
    for symbol, count in d_c.items():
        d[symbol] -= count * count_c
    for symbol, count in d.items():
        s += [symbol for i in xrange(count)]
    return ''.join(s)

def string_to_dict(s):
    d = dict()
    for symbol in s:
        d.setdefault(symbol, 0)
        d[symbol] += 1
    return d

def solve(a, b, c):
    d_a = string_to_dict(a)
    d_b = string_to_dict(b)
    d_c = string_to_dict(c)
    count_b = count_possible_entry(d_a, d_b)
    count_c = count_possible_entry(d_a, d_c)
    if count_b > count_c:
        count_b, count_c = count_c, count_b
        b, c = c, b
        d_b, d_c = d_c, d_b
    new_count_b = 0
    new_count_c = -1
    for i in xrange(0, count_b + 1):
        d = d_a.copy()
        for symbol, count in d_b.items():
            d[symbol] -= count * i
        count_c = 100000
        for symbol, count in d_c.items():
            if d[symbol] / count < count_c:
                count_c = d[symbol] / count
        if new_count_b + new_count_c < i + count_c or new_count_c == -1:
            new_count_b = i
            new_count_c = count_c
    count_b = new_count_b
    count_c = new_count_c
    if count_b > count_c:
        count_b, count_c = count_c, count_b
        b, c = c, b
        d_b, d_c = d_c, d_b
    return build_string_answer(d_a, b, count_b, d_b, c, count_c, d_c)

if __name__ == "__main__":
    print solve(*input())
