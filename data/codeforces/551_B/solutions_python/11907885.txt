#! /usr/bin/python
#coding: utf-8

def init_digit(s, d):
    for i in xrange(len(s)):
        d[ord(s[i]) - ord('a')] += 1

def get_max_sub(sa, da, sb, db, sc, dc):
    ans, cb, cc = 0, 0, 0
    i = 0
    while True:
        temp = len(sa)
        for j in xrange(26):
            if da[j] - db[j] * i < 0:
                temp = -1
                break
            if dc[j] > 0:
                temp = min((da[j] - db[j] * i) / dc[j], temp)
        if temp < 0:
            break
        if temp + i > ans:
            ans = temp + i
            cb = i
            cc = temp
        i += 1
    return ans, cb, cc

a, b, c = raw_input(), raw_input(), raw_input()

digit_a, digit_b, digit_c = [0] * 26, [0] * 26, [0] * 26

init_digit(a, digit_a)
init_digit(b, digit_b)
init_digit(c, digit_c)

ans1, cb1, cc1 = get_max_sub(a, digit_a, b, digit_b, c, digit_c)
ans2, cb2, cc2 = get_max_sub(a, digit_a, b, digit_b, c, digit_c)

s = ""
if ans1 > ans2:
    s += (cb1 * b + cc1 * c)
    for i in xrange(26):
        s += chr(ord('a') + i) * (digit_a[i] - digit_b[i] * cb1 - digit_c[i] * cc1)
else:
    s += (cb2 * b + cc2 * c)
    for i in xrange(26):
        s += chr(ord('a') + i) * (digit_a[i] - digit_b[i] * cb2 - digit_c[i] * cc2)
print s
