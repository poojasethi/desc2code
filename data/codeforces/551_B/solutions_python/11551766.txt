
from sys import stdin

import fileinput
from collections import defaultdict

astr = stdin.readline().rstrip()
bstr = stdin.readline().rstrip()
cstr = stdin.readline().rstrip()

acnts = [0]*30#defaultdict(lambda: 0)
for c in astr:
	acnts[ord(c) - ord('a')] += 1

bcnts = [0]*30#defaultdict(lambda: 0)
for c in bstr:
	bcnts[ord(c) - ord('a')] += 1

ccnts = [0]*30#defaultdict(lambda: 0)
for c in cstr:
	ccnts[ord(c) - ord('a')] += 1


def getCount(counts, acounts):
	maxcount = 10**5
	for idx, count in enumerate(counts):
		if count > 0:
			maxcount = min(maxcount, acounts[idx]//count)
	return maxcount

maxb = getCount(bcnts, acnts)
maxc = getCount(ccnts, acnts)

'''
maxb = 10**5
for key, val in bcnts.items():
	maxb = min(maxb, acnts[key]//val)

maxc = 10**5
for key, val in ccnts.items():
	maxc = min(maxc, acnts[key]//val)
'''
bees = 0
cees = 0
best = 0

if maxb < maxc:
	for bcnt in xrange(maxb + 1):
		for idx, count in enumerate(bcnts):
			acnts[idx] -= bcnt*count
		ccnt = getCount(ccnts, acnts)
		if ccnt + bcnt > best:
			bees = bcnt
			cees = ccnt
			best = ccnt + bcnt
		for idx, count in enumerate(bcnts):
			acnts[idx] += bcnt*count
else:
	for ccnt in xrange(maxc + 1):
		for idx, count in enumerate(ccnts):
			acnts[idx] -= ccnt*count
		bcnt = getCount(bcnts, acnts)
		if ccnt + bcnt > best:
			bees = bcnt
			cees = ccnt
			best = ccnt + bcnt
		for idx, count in enumerate(ccnts):
			acnts[idx] += ccnt*count


for idx, count in enumerate(bcnts):
	acnts[idx] -= bees*count
for idx, count in enumerate(ccnts):
	acnts[idx] -= cees*count

res = []
for i in xrange(bees):
	res.append(bstr)
for i in xrange(cees):
	res.append(cstr)

for idx, count in enumerate(acnts):
	res.append(chr(idx + ord('a'))*count)

print "".join(res)



