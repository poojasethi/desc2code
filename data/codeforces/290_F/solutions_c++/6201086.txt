#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define N 21

int n, m;
struct Node {
    int id, deg;
    int adj[N];
}p[N];
bool con[N][N];

void init(int n)
{
    for(int i = 0; i < n; i++) {
        p[i].id = i;
        p[i].deg = 0;
    }
}

inline void add_edge(int x, int y)
{
    p[x].adj[p[x].deg++] = y;
}

int comp(const void *a, const void *b)
{
    Node *pa = &p[*(int*)a];
    Node *pb = &p[*(int*)b];
    if(pa->deg != pb->deg)
        return pa->deg - pb->deg;
    else
        return pa->id - pb->id;
}

bool v[N];
bool hamilton_path(int x, int n)
{
    v[x] = true;
    --n;
    while(n > 0) {
        int y = -1;
        for(int i = 0; i < p[x].deg; i++)
            if(!v[p[x].adj[i]]) {
                y = p[x].adj[i];
                break;
            }
        if(y < 0)
            return false;
        x = y;
        v[x] = true;
        --n;
    }
    return true;
}
int main()
{
    scanf("%d%d", &n, &m);
    init(n);
    memset(con, false, sizeof(con));
    for(int i = 0; i < m; i++) {
        int x, y;
        scanf("%d%d", &x, &y);
        if(x != y && !con[x-1][y-1]) {
            add_edge(x-1, y-1);
            add_edge(y-1, x-1);
            con[x-1][y-1] = con[y-1][x-1] = true;
        }
    }
    if(n == 1) {
        printf("Yes\n");
        return 0;
    }
    for(int i = 0; i < n; i++)
        if(p[i].deg) {
            qsort(p[i].adj, p[i].deg, sizeof(int), comp);
        } else {
            printf("No\n");
            return 0;
        }
    for(int i = 0; i < n; i++) {
        memset(v, false, sizeof(v));
        if(hamilton_path(i, n)) {
            printf("Yes\n");
            return 0;
        }
    }
    printf("No\n");
    return 0;
}