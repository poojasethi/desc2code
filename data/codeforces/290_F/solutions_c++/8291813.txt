#include <bits/stdc++.h>

#define R "%d"
#define RL "%I64d"
#define RD "%lf"
#define W "%.8lf"

#define Max(x, y) ((x) > (y) ? (x) : (y))
#define Min(x, y) ((x) < (y) ? (x) : (y))
#define Set(x, y) memset(x, y, sizeof(x))
#define Cpy(x, y) memcpy(x, y, sizeof(y))
#define All(x) x.begin(), x.end()
#define Sqr(x) ((x) * (x))
#define Sz(x) ((LL)x.size())

#define Mk make_pair
#define Pb push_back
#define Pk pop_back
#define Fr first
#define Se second

#define FOR(x, l, r) for (LL x = (l), end = (r); x <= end; ++x)
#define ROF(x, l, r) for (LL x = (l), end = (r); x >= end; --x)
#define Edge(x, y) for (LL x = g[y]; x; x = nt[x])

#define Read(x) ((x) = Get())
#define Lowbit(x) ((x) & (-x))
using namespace std;

typedef int LL;
typedef long long ll;
typedef double LD;
typedef long double real;

typedef map <LL, LL> MI;
typedef pair <LL, LL> PI;
typedef set <LL> SI;
typedef vector <LL> VI;

inline LL Get() {
	LL res = 0, q = 1;
	char ch = getchar();
	while ((ch < '0' || ch > '9') && ch != '-') ch = getchar();
	if (ch == '-') q = -1, ch = getchar();
	while (ch >= '0' && ch <= '9') res = res * 10 + ch - '0', ch = getchar();
	return res * q;
}

const LD eps = 1e-12, pi = M_PI;
const LL oo = (LL)2e9, mod = (LL)1e9 + 7;
const ll INF = (ll)1e17;

const LL N = 20;

bool e[N + 10][N + 10];
LL n, m, j, k;
LL d[N + 10], ord[N + 10];
bool v[N + 10];

bool cmp(const LL &a, const LL &b) { return (d[a] < d[b]) || (d[a] == d[b] && a < b); }

LL main() {
#ifndef ONLINE_JUDGE
	freopen("hamil.in", "r", stdin);
	freopen("hamil.out", "w", stdout);
#endif

	scanf(R R "\n", &n, &m);
	FOR (i, 1, m) scanf(R R "\n", &j, &k), e[j][k] = e[k][j] = 1;
	FOR (i, 1, n) {
		ord[i] = i;
		FOR (j, 1, n)
			if (i != j)
				d[i] += e[i][j];
	}
	sort(ord + 1, ord + n + 1, cmp);
	
	for (int st = 1; st <= n; ++st) {
		int x = st;
		memset(v, 0, sizeof(v));
		bool check = 1;
		for (int cnt = 1; cnt < n; ++cnt) {
			v[x] = 1;
			bool flag = 0;
			for (int i = 1; i <= n; ++i) {
				int nt = ord[i];
				if (e[x][nt] && !v[nt]) { x = nt, flag = 1; break; }
			}
			if (!flag) { check = 0; break; }
		}
		if (check) return printf("Yes\n"), 0;
	}

	printf("No\n");
	return 0;
}
