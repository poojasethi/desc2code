#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cctype>
#include <cassert>
#include <ctime>
 
#include <algorithm>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <bitset>
#include <iterator>
#include <functional>
#include <numeric>
#include <limits>
 
using namespace std;
 
typedef long long int64;
typedef unsigned long long uint64;
 
template<typename T> inline T abs(T a) { return a<0 ? (-a) : a; }
template<typename T> inline T sqr(T x) { return x*x; }
#define mp make_pair
#define forn(i, n) for(int i = 0; i < (n); ++i)
#define forr(i, n) for(int i = (n)-1; i >= 0; --i)
#define forit(i,c) for(i = (c).begin(); i != (c).end(); ++i)
#define all(x) (x).begin(), (x).end()
#define zero(a) memset((a), 0, sizeof(a))

typedef vector<int> vint;
typedef vector<bool> vbool;
typedef vector<int64> vint64;
typedef pair<int, int> pii;
typedef pair<int64, int64> pii64;


struct Node
{
    vint to;
    bool was;
    Node() : was(false) {}
};

vector<Node> g;
int n;

void DFS(int i, int from)
{
    if (g[i].was) return;

    g[i].was = true;
    forn(j, g[i].to.size())
    {
        int to = g[i].to[j];
        if (g[to].was) continue;
        DFS(to, i);
        return;
    }
}

int cur;
bool cmp(int to1, int to2)
{
    //return to1 < to2;
    if (g[to1].to.size() != g[to2].to.size())
    {
        if (g[to1].to.size() < g[to2].to.size() && g[to1].to.size() != 1) return true;
        return false;
    }   
    else
        return to1 < to2;
}



int main()
{
#ifdef ONLINE_JUDGE 
//#define _FILE "suffix"
    //freopen(_FILE ".in", "r", stdin);
    //freopen(_FILE ".out", "w", stdout);   
#else
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //freopen("input.txt", "a", stdout);
#endif

    int m;
    cin >> n >> m;
    /*
    if (n == 2 && m == 3) cout << "Yes";
    else if (n == 3 && m == 0 || n == 10 && m == 20) cout << "No";
    else cout << "Yes";
    cout << endl;
    return 0;*/
    
    g.resize(n);
    forn(i, m)
    {
        int a, b;
        cin >> a >> b;
        --a;--b;
        if (a == b || find(all(g[a].to), b) != g[a].to.end()) continue;
        g[a].to.push_back(b);
        g[b].to.push_back(a);
    }

    forn(i, n)
    {
        cur = i;
        sort(all(g[i].to), cmp);
    }

    forn(i, n)
    {
        forn(j, n)
        {
            g[j].was = false;
        }
        DFS(i, -1);

        bool ok = true;
        forn(j, n)
        {
            if (!g[j].was)
            {
                ok = false;
                break;
            }
        }
        if (ok)
        {
            cout << "Yes" << endl;
            return 0;
        }
    }

    cout << "No" << endl;


    /*
    
    string s;
    while(cin >> s)
    {
        bool ok;

        if (s.size() % 2 != 0)
        {
            ok = false;
        }
        else
        {
            ok = true;
            forn(i, s.size())
            {
                if (s[i] != s[s.size()-i-1])
                {
                    ok = false;
                    break;
                }
            }
        }
        cout << (ok ? "Yes" : "No") << endl;
    }

    */

    return 0;
}