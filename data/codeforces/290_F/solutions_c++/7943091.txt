#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <cstdlib>
// #include <cmath>
#include <string>
#define f(x, y, z) for(int x = (y); x <= (z); ++x)
#define g(x, y, z) for(int x = (y); x < (z); ++x)
#define h(x, y, z) for(int x = (y); x >= (z); --x)
#define foreach(x, y) for(__typeof(y.begin()) x = y.begin(); x != y.end(); ++x)
#define rforeach(x, y) for(__typeof(y.rbegin()) x = y.rbegin(); x != y.rend(); ++x)

typedef long long LL;
typedef std::pair<int, int> PII;
typedef long double real;
typedef std::vector<int> VI;

inline void read(int &x){scanf("%d", &x);}
inline void read(LL &x){scanf("%I64d", &x);}
inline void read(double &x){scanf("%lf", &x);}
inline void read(long double &x){
	double tmp; read(tmp); x = tmp;
}
template <class T>
inline void read(T *a, int n){
	g(i, 0, n) read(a[i]);
}

inline void write(int x){printf("%d", x);}
inline void write(LL x){printf("%I64d", x);}
inline void write(double x){printf("%.10lf", x);}
inline void write(long double x){printf("%.10lf", (double) x);}
template <class T>
inline void writeln(T x){write(x); putchar('\n');}
template <class T>
inline void writeln(T *a, int n){
	g(i, 0, n) write(a[i]); putchar('\n');
}
template <class T>
inline void writelnln(T *a, int n){
	g(i, 0, n) writeln(a[i]);
}

int n, m, deg[24];
bool av[24];
std::vector<int> adj[24];
inline bool less(int x, int y){
	return deg[x] < deg[y] || (deg[x] == deg[y] && x < y);
}
inline void dfs(int c, int l){
	if(l){
		foreach(i, adj[c]) if(av[*i]){
			av[*i] = 0; dfs(*i, l - 1); av[*i] = 1; break;
		}
	}else{
		printf("Yes\n"); exit(0);
	}
}

int main(){
	memset(deg, 0, sizeof(deg));
	read(n); read(m);
	while(m--){
		int s, t; read(s); read(t);
		if(s == t) continue;
		bool can = true;
		foreach(i, adj[s]) if(*i == t){can = false; break;}
		if(!can) continue;
		++deg[s]; ++deg[t];
		adj[s].push_back(t); adj[t].push_back(s);
	}
	f(i, 1, n) std::sort(adj[i].begin(), adj[i].end(), less);
	memset(av, 1, sizeof(av));
	f(i, 1, n){
		av[i] = 0; dfs(i, n - 1); av[i] = 1;
	}
	printf("No\n");
	return 0;
}






















