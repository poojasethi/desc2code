#include <algorithm>
#include <iostream>
#include <valarray>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <numeric>
#include <complex>
#include <cstdio>
#include <string>
#include <vector>
#include <bitset>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <deque>
#include <map>
#include <set>

using namespace std;

#define FOREACH(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define FOR(i, a, n) for (int i = (a); i < int(n); ++i)
#define error(x) cout << #x << " = " << (x) << endl;
#define all(n) (n).begin(), (n).end()
#define Size(n) ((int)(n).size())
#define mk make_pair
#define pb push_back
#define F first
#define S second
#define X real()
#define Y imag()

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef complex<double> point;

template <class P, class Q> void smin(P &a, Q b) { if (b < a) a = b; }
template <class P, class Q> void smax(P &a, Q b) { if (b > a) a = b; }
template <class P, class Q> bool in(const P &a, const Q &b) { return a.find(b) != a.end(); }

const int MAXN = 100;

int n, g[MAXN][MAXN];
bool mark[MAXN];

int cnt(int x) {
	int tot = 0;
	FOR(i, 0, n) if (g[x][i]) tot++;
	return tot;
}

void dfs(int pos) {
	mark[pos] = true;
	int best = -1, vert = -1;
	FOR(i, 0, n) if (!mark[i] && g[pos][i]) {
		if (best == -1 || cnt(i) < best) {
			best = cnt(i);
			vert = i;
		}
	}
	if (vert != -1) return dfs(vert);
}

int main() {
	int m;
	cin >> n >> m;
	while (m--) {
		int a, b;
		cin >> a >> b;
		a--; b--;
		if (a != b) g[a][b] = g[b][a] = true;
	}
	FOR(cur, 0, n) {
		memset(mark, 0, sizeof mark);
		dfs(cur);
		bool ok = true;
		FOR(i, 0, n) if (!mark[i]) ok = false;
		if (ok) {
			cout << "Yes" << endl;
			return 0;
		}
	}
	cout << "No" << endl;
	return 0;
}

