// In The Name Of GOD
#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cstring>

using namespace std;

#define REP(i, n) for (register int i = (0); i < (int) (n); (i)++)
#define foreach(it, c) for(__typeof((c).begin()) it = (c).begin(); it !=(c).end(); it++)
#define Size(a) (int)(a.size())
#define all(a) a.begin(), a.end()
#define X first
#define Y second
#define pb push_back
#define mp make_pair
#define gcd __gcd

typedef long long ll;
typedef pair<int, int> pii;

template <class T> inline T sqr (T a) { return a*a; }

set <int> adj[33];
bool mark [33];
int dis[33];

void dfs (int v) {
		int _deg = -(1 << 30);
		int vic = -1;
		bool temp = false;
		mark[v] = true;
		foreach (it, adj[v])
			if (mark[*it] == false)
				if (temp == false or dis[*it] < _deg) {
					temp = true;
					_deg = dis[*it];
					vic = (*it);
				}
		if (vic != -1)
			dfs (vic);
}

int main () {
        ios_base::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	memset (dis, 0, sizeof dis);
	REP (i, m) {
		int a, b;
		cin >> a >> b;
		if (a != b) {
			int _a = Size(adj[a-1]);
			int _b = Size(adj[b-1]);
			adj[a-1].insert (b-1);
			adj[b-1].insert (a-1);
			if (Size(adj[a-1]) > _a)
				dis[a-1] ++;
			if (Size(adj[b-1]) > _b)
				dis[b-1] ++;
		}
	}
	REP (i, n) {
		memset (mark, false, sizeof mark);
		dfs(i);
		bool temp = false;
		REP (j, n)
			if (mark[j] == false) {
				temp = true;
				break;
			}
		if (temp == false) {
			cout << "Yes" << endl;
			return 0;
		}
	}
	cout << "No" << endl;
        return 0;
}
