/*****************
In the name of God
*****************/
/*
 * @ autor:babashah
 * PROBLEM : Hamiltonian cycle
 * CONTEST : April fools day contest 2013
 * TAG : DFS / Graph /Brute force
 */
#include<iostream>
#include<cmath>
#include<math.h>
#include<string>
#include<cstring>
#include<cstdio>
#include<cctype>
#include<algorithm>
#include<cstdlib>
#include<stdio.h>
#include<vector>
#include<set>
#include<map>
#include<fstream>
#include<sstream>
#include<list>
using namespace std;
#define Foreach(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define For(i,a,b)  for(int i=a;i<b;i++)
#define back(i,a,b) for(long long i=a;i>b;i--)
#define wait       system("pause")
#define ff     first
#define ss     second
#define error(x) cout << #x << " = " << (x) <<endl
#define erorr(x) fout<<#x<<" = "<<(x)<<endl
#define un  unsigned
#define ll  long long
#define pb  push_back
#define PB  pop_back()
#define iosfal  ios_base::sync_with_stdio(false)
#define m_p(a,b) make_pair(a,b)
const int maxn=3*10;
int m,n,d[maxn];set<int>adj[maxn];bool mark[maxn];
void dfs(int v)
{

    int deg=-10,ne=-1;bool ok=false;
    mark[v]=true;
    Foreach(i,adj[v])   if(!mark[*i])
        if(!ok || d[*i]<deg)
        {
            ok=true;
            deg=d[*i];
            ne=*i;
        }
    if(ne!=-1)
        dfs(ne);
}
int main()
{ 
    fill(d,d+maxn,0);
    cin>>n>>m;
    For(i,0,m)
    {
        int a,b;
        cin>>a>>b;
        a--;b--;
        if(a!=b)
        {
            int asize=adj[a].size(),bsize=adj[b].size();
            adj[a].insert(b);
            adj[b].insert(a);
            if(adj[a].size()>asize)
            d[a]++;
            if(adj[b].size()>bsize)
            d[b]++;
        }
    }
    For(i,0,n)
    {
        fill(mark,mark+maxn,false);
        dfs(i);
        bool flag=true;
        For(j,0,n)  if(!mark[j])
        {
            flag=false;
            break;
        }
        if(flag)
        {
            cout<<"Yes"<<endl;
            return 0;
        }
    }
        cout<<"No"<<endl;
}
