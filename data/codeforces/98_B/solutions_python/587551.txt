from fractions import Fraction

hash = [0 for i in xrange(10001)]

def solve(n):
    if not isinstance(hash[n], int):
        return hash[n]
    m, cnt = n, 0
    while m > 1:
        if m & 1:
            break
        m >>= 1
        cnt += 1
    else:
        hash[n] = Fraction(cnt)
        return Fraction(cnt)

    l, step = [[1, 0]], 0
    while l[0][0] < n:
        l[0][0] <<= 1
        l[0][1] += 1
    l[0][0] -= n
    while True:
        l.append([l[-1][0], 0])
        while l[-1][0] < n:
            l[-1][0] <<= 1
            l[-1][1] += 1
        l[-1][0] -= n
        step += l[-1][1]
        if l[-1][0] == l[0][0]:
            l.pop()
            break

    part1 = part2 = Fraction()
    p = Fraction((1 << step))
    sum = 0
    for part in l:
        p *= Fraction(1, 1 << part[1])
        sum += part[1]
        part1 += p * sum
        part2 += p * step

    t = Fraction(1, (1 << step) - 1)
    ret = t * (part1 + part2 * t) * n

    for i in xrange(2, n / 2):
        if n % i == 0:
            t = solve(i) + solve(n / i)
            if t < ret: ret = t

    hash[n] = ret
    return ret

n = int(raw_input())
ans = str(solve(n))
if ans.find('/') == -1:
    ans += '/1'
print ans
