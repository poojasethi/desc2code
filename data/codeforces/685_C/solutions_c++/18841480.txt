// Copyright (C) 2016 __debug.

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; version 3

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program; If not, see <http://www.gnu.org/licenses/>.

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cctype>
#include <climits>
#include <cassert>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <functional>

#define x first
#define y second
#define MP std::make_pair
#define VAL(x) #x " = " << x << " "
#define DEBUG(...) fprintf(stderr, __VA_ARGS__)

typedef long long LL;
typedef std::pair<int, int> Pii;

const int oo = 0x3f3f3f3f;

template<typename T> inline bool chkmax(T &a, T b) { return a < b ? a = b, true : false; }
template<typename T> inline bool chkmin(T &a, T b) { return a > b ? a = b, true : false; }
template<typename T> T read(T &x)
{
    int f = 1;
    char ch = getchar();
    for (; !isdigit(ch); ch = getchar())
        if (ch == '-')
            f = -1;
    for (x = 0; isdigit(ch); ch = getchar())
        x = 10 * x + ch - '0';
    return x *= f;
}
template<typename T> void write(T x)
{
    if (x == 0) {
        putchar('0');
        return;
    }
    if (x < 0) {
        putchar('-');
        x = -x;
    }
    static char s[20];
    int top = 0;
    for (; x; x /= 10)
        s[++top] = x % 10 + '0';
    while (top)
        putchar(s[top--]);
}
// End of template

const int MAXN = 1e5 + 5;

struct Point {
    LL x, y, z;
};

int N;
LL min0, max0, min1, max1, min2, max2, min3, max3;
Point P[MAXN];
LL u, v, w, x, y, z;

inline bool calc(LL c0l, LL c0r, LL c1l, LL c1r, LL c2l, LL c2r, LL c3l, LL c3r)
{
    if (c0l & 1) ++c0l; if (c0r & 1) --c0r; c0l /= 2; c0r /= 2;
    if (c1l & 1) ++c1l; if (c1r & 1) --c1r; c1l /= 2; c1r /= 2;
    if (c2l & 1) ++c2l; if (c2r & 1) --c2r; c2l /= 2; c2r /= 2;
    if (c3l & 1) ++c3l; if (c3r & 1) --c3r; c3l /= 2; c3r /= 2;

    if (c0l > c0r) return false;
    if (c1l > c1r) return false;
    if (c2l > c2r) return false;
    if (c3l > c3r) return false;
    if (c1l + c2l + c3l > c0r) return false;
    if (c1r + c2r + c3r < c0l) return false;

    u = c1l;
    v = c2l;
    w = c3l;
    LL delta = c0l - u - v - w;
    if (delta > 0) {
        if (c1r - u >= delta) { u += delta; return true; } else { delta -= c1r - u; u = c1r; }
        if (c2r - v >= delta) { v += delta; return true; } else { delta -= c2r - v; v = c2r; }
        if (c3r - w >= delta) { w += delta; return true; } else { delta -= c3r - w; w = c3r; }

        assert(1 + 1 == 3);
    }

    return true;
}

inline bool check(LL mid)
{
    LL c0l = max0 - mid, c0r = min0 + mid;
    LL c1l = max1 - mid, c1r = min1 + mid;
    LL c2l = max2 - mid, c2r = min2 + mid;
    LL c3l = max3 - mid, c3r = min3 + mid;

    if (calc(c0l, c0r, c1l, c1r, c2l, c2r, c3l, c3r)) {
        x = v + w;
        y = u + w;
        z = u + v;
        return true;
    }
    if (calc(c0l - 3, c0r - 3, c1l - 1, c1r - 1, c2l - 1, c2r - 1, c3l - 1, c3r - 1)) {
        x = v + w + 1;
        y = u + w + 1;
        z = u + v + 1;
        return true;
    }
    return false;
}

void input()
{
    read(N);
    for (int i = 0; i < N; ++i) {
        read(P[i].x); read(P[i].y); read(P[i].z);
    }
}

void solve()
{
    min0 = min1 = min2 = min3 = LONG_LONG_MAX;
    max0 = max1 = max2 = max3 = LONG_LONG_MIN;
    for (int i = 0; i < N; ++i) {
        LL a = P[i].x, b = P[i].y, c = P[i].z;
        chkmin(min0,  a + b + c); chkmax(max0,  a + b + c);
        chkmin(min1, -a + b + c); chkmax(max1, -a + b + c);
        chkmin(min2,  a - b + c); chkmax(max2,  a - b + c);
        chkmin(min3,  a + b - c); chkmax(max3,  a + b - c);
    }
    // std::cout << VAL(min0) << VAL(max0) << std::endl;

    LL l = -1, r = 6e18;
    while (l + 1 < r) {
        // printf("(%lld, %lld]\n", l, r);
        LL mid = l + (r - l) / 2;
        if (check(mid))
            r = mid;
        else
            l = mid;
    }
    // printf("(%lld, %lld]\n", l, r);
    check(r);

    write(x); putchar(' ');
    write(y); putchar(' ');
    write(z); putchar('\n');
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("tmp.in", "r", stdin);
    freopen("tmp.out", "w", stdout);
#endif

    int T;
    read(T);
    while (T--) {
        input();
        solve();
    }

    return 0;
}
