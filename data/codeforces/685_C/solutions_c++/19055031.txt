#include <bits/stdc++.h>
#define FOR(i, l, r) for (int i = int(l); i < int(r); i++)
#define FORE(i, l, r) for (int i = int(l); i <= int(r); i++)
#define STRUCT5(NAME, v1, v2, v3, v4, v5, name) typedef struct NAME \
        {   \
            int v1, v2, v3, v4, v5; \
            NAME(int v1 = 0, int v2 = 0, int v3 = 0, int v4 = 0, int v5 = 0) : v1(v1), v2(v2), v3(v3), v4(v4), v5(v5) {} \
            friend bool operator < (const NAME& athis, const NAME& other) \
            {   \
                if (athis.v1 != other.v1) return athis.v1 < other.v1;   \
                return athis.v2 < other.v2;   \
            }\
        }name;
#define FST first
#define SCD second
#define modp 1000000007
#define EPS 1e-7
#define MAXN 200013
#define INF 0x3f3f3f3f3f3f3f3f
using namespace std;
typedef long long LL;
typedef unsigned int UI;

int T, N;
LL dt[4][2];
LL ans[3];
void trs1(LL& x, LL& y)
{
    if (!(x & 1)) x++;
    if (!(y & 1)) y--;
}
void trs2(LL& x, LL& y)
{
    if (x & 1) x++;
    if (y & 1) y--;
}
bool chk(LL dis, void trs(LL&, LL&))
{
    bool res = true;
    LL s1 = 0, s2 = 0, a, b;
    FOR(i, 0, 4) {
        a = dt[i][0] - dis;
        b = dt[i][1] + dis;
        trs(a, b);
        if (a > b) {
            res = false;
            break;
        }
        if (i < 3) {
            s1 += a;
            s2 += b;
        }
    }
    return res && (s1 <= b && s2 >= a);
}
void cal(LL dis)
{
    void (*trs)(LL& a, LL& b);
    if (chk(dis, trs1)) {
        trs = trs1;
    }
    else {
        trs = trs2;
    }
    LL bd[4][2];
    FOR(i, 0, 4) {
        bd[i][0] = dt[i][0] - dis;
        bd[i][1] = dt[i][1] + dis;
        trs(bd[i][0], bd[i][1]);
    }
    LL S = 0;
    FOR(i, 0, 3) {
        ans[i] = bd[i][0];
        S += bd[i][0];
    }
    if (S >= bd[3][0]) {
        return;
    }
    FOR(i, 0, 3) {
        LL x = min(bd[i][1] - ans[i], bd[3][0] - S);
        ans[i] += x;
        S += x;
    }
}
int main()
{
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &N);
        FOR(i, 0, 4) {
            dt[i][0] = -INF;
            dt[i][1] = INF;
        }
        FOR(i, 0, N) {
            LL x, y, z;
            scanf("%I64d%I64d%I64d", &x, &y, &z);
            LL r[4] = {x + y - z, x - y + z, -x + y + z, x + y + z};
            FOR(i, 0, 4) {
                dt[i][0] = max(dt[i][0], r[i]);
                dt[i][1] = min(dt[i][1], r[i]);
            }
        }
        LL l = 0, r = 3e18;
        while (l < r) {
            LL m = (l + r) / 2;
            if (chk(m, trs1) || chk(m, trs2)) {
                r = m;
            }
            else {
                l = m + 1;
            }
        }
        cal(l);
        printf("%I64d %I64d %I64d\n", (ans[0] + ans[1]) >> 1, (ans[0] + ans[2]) >> 1, (ans[1] + ans[2]) >> 1);
    }
    return 0;
}
