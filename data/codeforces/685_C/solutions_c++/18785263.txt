#include <bits/stdc++.h>

#define fi(a,b,c) for(int a=b; a<=c; a++)
#define fd(a,b,c) for(int a=b; a>=c; a--)
#define fii(a,b,c) for(int a=b; a<c; a++)
#define pb push_back
#define mp make_pair
#define ft first
#define sc second
#define reset(a,b) memset(a,b, sizeof a)

using namespace std;

typedef int64_t ll;
typedef pair <ll, ll> pii;
typedef unsigned int ui;

const int N = 100009;
const ll oo = (ll)(6e18) + 1ll;

struct coor {
    ll x, y, z;
};

ll x[N], y[N], z[N];

struct cal {
    pii S, a, b, c;
} a[N];

int n, tcase;

cal merge_(cal a, cal b) {
    cal ans ;
    ans.S = mp(max(a.S.ft, b.S.ft), min(a.S.sc, b.S.sc));
    ans.a = mp(max(a.a.ft, b.a.ft), min(a.a.sc, b.a.sc));
    ans.b = mp(max(a.b.ft, b.b.ft), min(a.b.sc, b.b.sc));
    ans.c = mp(max(a.c.ft, b.c.ft), min(a.c.sc, b.c.sc));
    return ans;
}

ll div2 (ll x) {
    return (x - (x & 1)) / 2;
}


bool check(ll value , coor &ans) {
    cal res;
    res.S = res.a = res.b = res.c = mp(-oo, oo);
    cal kk;
    coor ans1;
    fi(i, 1, n) {
        kk.S = mp(x[i] + y[i] + z[i] - value, value + x[i] + y[i] + z[i]);
        kk.a = mp(- x[i] + y[i] + z[i] - value, value - x[i] + y[i] + z[i]);
        kk.b = mp(x[i] - y[i] + z[i] - value, value + x[i] - y[i] + z[i]);
        kk.c = mp(x[i] + y[i] - z[i] - value, value + x[i] + y[i] - z[i]);
        res = merge_(res, kk);
    }
  //  cout <<res.S.ft <<' '<<res.S.sc <<' '<<res.a.ft <<' '<<res.a.sc <<' '<<res.b.ft <<' '<<res.b.sc <<' '<<res.c.ft << ' '<<res.c.sc <<endl;

    kk = res;

    fi(k, 0, 1) {
        res = kk ;
        res.S.ft = div2(res.S.ft - 3 * k + 1);
        res.a.ft = div2(res.a.ft - k + 1);
        res.b.ft = div2(res.b.ft - k + 1);
        res.c.ft = div2(res.c.ft - k + 1);
        res.S.sc = div2(res.S.sc - 3 * k);
        res.a.sc = div2(res.a.sc - k);
        res.b.sc = div2(res.b.sc - k);
        res.c.sc = div2(res.c.sc - k);
     //   cout <<res.S.ft <<' '<<res.S.sc <<' '<<res.a.ft <<' '<<res.a.sc <<' '<<res.b.ft <<' '<<res.b.sc <<' '<<res.c.ft << ' '<<res.c.sc <<endl;
        if (res.S.ft > res.S.sc || res.a.ft > res.a.sc || res.b.ft > res.b.sc || res.c.ft > res.c.sc) continue;
        if (res.a.ft + res.b.ft + res.c.ft > res.S.sc) continue;
        if (res.a.sc + res.b.sc + res.c.sc < res.S.ft) continue;
        res.S.ft -= res.a.ft + res.b.ft + res.c.ft;
        res.S.ft = max(res.S.ft, 0ll);
        res.a.sc -= res.a.ft;
        res.b.sc -= res.b.ft;
        res.c.sc -= res.c.ft;
        ans1.x = res.a.ft + min(res.S.ft , res.a.sc);
        res.S.ft -= min(res.S.ft , res.a.sc);
        ans1.y = res.b.ft + min(res.S.ft , res.b.sc);
        res.S.ft -= min(res.S.ft , res.b.sc);
        ans1.z = res.c.ft + min(res.S.ft , res.c.sc);
        res.S.ft -= min(res.S.ft , res.c.sc);
        ans.x = ans1.y + ans1.z + k;
        ans.y = ans1.x + ans1.z + k;
        ans.z = ans1.x + ans1.y + k;
        return 1;
    }
    return 0;


}

int main()
{
   // freopen("test.in", "r", stdin);

    scanf("%d", &tcase);
    while (tcase --) {
        scanf("%d", &n);
        fi(i, 1, n) scanf("%I64d %I64d %I64d", &x[i], &y[i], &z[i]);
        coor ans;
        ll vmin = oo;
        ll l = 0, r = oo/2;
        while (l <= r) {
            ll mid = (l + r)>> 1;
            coor kk;
            if (check(mid, kk)) {
                if (vmin > mid) {
                    vmin = mid;
                    ans = kk;
                }
                r = mid - 1;
            } else l = mid + 1;
        }
    //    cout << vmin <<endl;
        printf("%I64d %I64d %I64d\n", ans.x , ans.y , ans.z);
    }

}
