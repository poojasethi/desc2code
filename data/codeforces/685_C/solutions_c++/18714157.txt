#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<iostream>
using namespace std;

#define maxn 100100
typedef long long ll;
ll inf=9e18;

struct point
{
	ll x,y,z,A,B,C,D;
	point(ll x=0,ll y=0,ll z=0):x(x),y(y),z(z){}
	void upd()
	{
		A=x+y+z;
		B=x+y-z;
		C=x-y+z;
		D=-x+y+z;
	}
};
point p[maxn];

int n;

ll a0,a1,b0,b1,c0,c1,d0,d1;
ll N0,M0,L0,N1,M1,L1;

bool check()
{
	return 
	(b0<=N0 && N0<=b1) && (c0<=M0 && M0<=c1) && (d0<=L0 && L0<=d1) &&
	(a0<=N0+M0+L0 && N0+M0+L0<=a1);
}

	
bool go(ll q,bool print)
{
	N0=b0;if ((N0&1)!=q) N0++;
	M0=c0;if ((M0&1)!=q) M0++;
	L0=d0;if ((L0&1)!=q) L0++;
	if (N0>b1 || M0>c1 || L0>d1) return false;
	if (N0+M0>a1-L0) return false;
	
	N1=b1;if ((N1&1)!=q) N1--;
	M1=c1;if ((M1&1)!=q) M1--;
	L1=d1;if ((L1&1)!=q) L1--;
	if (N1<b0 || M1<c0 || L1<d0) return false;
	if (N1+M1<a0-L1) return false;
	
	
	if (print)
	{
//		cerr<<q<<endl;
		
		if (N0+M0>=a0-L0)
		{
			if (check()) return true;
		}
		if (N1+M0>=a0-L0)
		{
			N0=a0-M0-L0;
			if ((N0&1)!=q) N0++;
			if (check()) return true;
		}
		if (N1+M1>=a0-L0)
		{
			N0=N1;
			M0=a0-L0-N0;
			if ((M0&1)!=q) M0++;
			if (check()) return true;
		}
		N0=N1;M0=M1;
		L0=a0-N0-M0;
		if ((L0&1)!=q) L0++;
		return check();
	}
			
	return true;
}

bool ok(ll r,bool print=false)
{
	a0=b0=c0=d0=-inf;
	a1=b1=c1=d1=inf;
	
	for(int i=1;i<=n;i++)
	{
		a0=max(a0,p[i].A-r);a1=min(a1,p[i].A+r);
		b0=max(b0,p[i].B-r);b1=min(b1,p[i].B+r);
		c0=max(c0,p[i].C-r);c1=min(c1,p[i].C+r);
		d0=max(d0,p[i].D-r);d1=min(d1,p[i].D+r);
	}
	
	if (a0>a1) return false;
	if (b0>b1) return false;
	if (c0>c1) return false;
	if (d0>d1) return false;
	
	if (go(0,print)) return true;
	return go(1,print);
}

int main()
{
	int Test;
	scanf("%d",&Test);
	while (Test--)
	{
		scanf("%d",&n);
		for(int i=1;i<=n;i++)
		{
			scanf("%I64d%I64d%I64d",&p[i].x,&p[i].y,&p[i].z);
			p[i].upd();
		}
		
		ll l=-1,r=3e18,mid;
		while (l+1<r)
		{
			mid=(l+r)>>1;
//			cerr<<l<<' '<<r<<' '<<mid<<endl;
			if (ok(mid))
				r=mid;
			else
				l=mid;
		}
//		cerr<<"Ans"<<r<<endl;
		ok(r,1);
//		cerr<<N0<<' '<<M0<<' '<<L0<<endl;
		printf("%I64d %I64d %I64d\n",(N0+M0)/2,(N0+L0)/2,(L0+M0)/2);
	}
	
	return 0;
}