#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

#ifdef WIN32
	#define LL "%I64d"
#else
	#define LL "%lld"
#endif

#ifdef Lightning
	#define debug(orz...) printf(orz)
	const int DEBUG = 1;
#else
	#define debug(...)
	const int DEBUG = 0;
#endif

#define file_able if (0)
#define setfile(pro_name) freopen(pro_name".in", "r", stdin), freopen(pro_name".out", "w", stdout)
#define closefile() fclose(stdin), fclose(stdout)

#define cmax(_x, _y) (_x < (_y) ? _x = _y : 0)
#define cmin(_x, _y) (_x > (_y) ? _x = _y : 0)
#define gmax(_x, _y) ((_x) > (_y) ? (_x) : (_y))
#define gmin(_x, _y) ((_x) < (_y) ? (_x) : (_y))

namespace defs
{
	// #define getc() (S == T && (T = (S = B) + fread(B, 1, 1 << 15, stdin), S == T) ? EOF : *S++)
	
	// char B[1 << 15], *S = B, *T = B;
	
	#define getc() getchar()

	template <class Type> Type read()
	{
		Type aa;
		int bb = 1, ch;
		while (ch = getc(), (ch < '0' || ch > '9') && ch != '-');
		ch == '-' ? aa = 0, bb = -1 : aa = ch - '0';
		while (ch = getc(), ch >= '0' && ch <= '9') aa = aa * 10 + ch - '0';
		return bb == 1 ? aa : -aa;
	}

	const unsigned int rand_x = 11309;
	const unsigned int rand_y = 1000000019;
	
	unsigned int rand_cur;

	unsigned int rand_int()
	{
		return rand_cur = rand_cur * rand_x + rand_y;
	}

	const int inf = 1071026353;
	const int mod = 1000000007;
	const int modx = 998244353;
}

namespace lightningwork
{
	// my space

	struct cnode
	{
		long long s, x, y, z;
	};

	long long (*read)() = defs::read<long long>;

	int n;

	long long mns, mxs, mnx, mxx, mny, mxy, mnz, mxz;

	cnode p[100010], s[100010];

	cnode __construct(unsigned long long s, unsigned long long x, unsigned long long y, unsigned long long z)
	{
		if (s <= x)
		{
			return (cnode) {0, s, 0, 0};
		} else if (s <= x + y)
		{
			return (cnode) {0, x, s - x, 0};
		} else if (s <= x + y + z)
		{
			return (cnode) {0, x, y, s - x - y};
		} else
		{
			return (cnode) {1, 0, 0, 0};
		}
	}

	cnode _construct(cnode l, cnode r)
	{
		if (l.x > r.x || l.y > r.y || l.z > r.z || l.s > r.s)
		{
			return (cnode) {1, 0, 0, 0};
		}
		if (l.x + l.y + l.z > r.s)
		{
			return (cnode) {1, 0, 0, 0};
		}
		if (l.x + l.y + l.z >= l.s)
		{
			return (cnode) {0, l.x, l.y, l.z};
		}
		cnode ret = __construct(l.s - (l.x + l.y + l.z), r.x - l.x, r.y - l.y, r.z - l.z);
		if (ret.s == 0)
		{
			ret.x += l.x;
			ret.y += l.y;
			ret.z += l.z;
			return ret;
		}
		return (cnode) {1, 0, 0, 0};
	}

	long long div2(long long x)
	{
		return (x - (x & 1)) / 2;
	}

	cnode construct(long long mid)
	{
		long long sl = mxs - mid, sr = mns + mid;
		long long xl = mxx - mid, xr = mnx + mid;
		long long yl = mxy - mid, yr = mny + mid;
		long long zl = mxz - mid, zr = mnz + mid;
		for (int i = 0; i < 2; ++i)
		{
			cnode tmp = _construct(
				(cnode) {div2(sl - i * 3 + 1), div2(xl - i + 1), div2(yl - i + 1), div2(zl - i + 1)},
				(cnode) {div2(sr - i * 3), div2(xr - i), div2(yr - i), div2(zr - i)}
			);
			if (tmp.s == 0)
			{
				cnode ret;
				ret.s = 0;
				ret.x = tmp.y + tmp.z + i;
				ret.y = tmp.x + tmp.z + i;
				ret.z = tmp.x + tmp.y + i;
				return ret;
			}
		}
		return (cnode) {1, 0, 0, 0};
	}

	void solve()
	{
		n = read();
		mns = mnx = mny = mnz = 9223372036854775800ll;
		mxs = mxx = mxy = mxz = -9223372036854775800ll;
		for (int i = 1; i <= n; ++i)
		{
			long long x = read();
			long long y = read();
			long long z = read();
			p[i] = (cnode) {0, x, y, z};
			s[i] = (cnode) {x + y + z, -x + y + z, x - y + z, x + y - z};
			cmin(mns, s[i].s), cmax(mxs, s[i].s);
			cmin(mnx, s[i].x), cmax(mxx, s[i].x);
			cmin(mny, s[i].y), cmax(mxy, s[i].y);
			cmin(mnz, s[i].z), cmax(mxz, s[i].z);
		}
		long long ds = mxs - mns, dx = mxx - mnx;
		long long dy = mxy - mny, dz = mxz - mnz;
		long long l = 0, r = gmax(dx, dy);
		cmax(r, ds), cmax(r, dz);
		while (l < r)
		{
			long long mid = l + (r - l >> 1);
			if (construct(mid).s == 0)
			{
				r = mid;
			} else
			{
				l = mid + 1;
			}
		}
		cnode ans = construct(r);
		printf("%lld %lld %lld\n", ans.x, ans.y, ans.z);
	}

	void work()
	{
		int t = read();
		while (t--)
		{
			solve();
		}
	}
}

int main()
{
	file_able setfile("work");
	lightningwork::work();
	file_able closefile();
	return 0;
}