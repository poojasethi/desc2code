I=lambda:map(int,raw_input().split())
a,b=I()

def P(n):
    p=[0]*n
    f=[]
    for i in range(2,n):
        if not p[i]:
            f+=[i]
            k = i
            while k+i < n:
                k+=i
                p[k] = 1
    return f

def F(n):
    s=int(n**0.5)+1
    p=P(s)
    if n==1: return [1]
    r=[]
    for c in p:
        if c * c > n:
            break
        while n%c == 0:
            r+=[c]
            n /= c
    if n > 1:r+=[n]
    return r


def div(i,r,g):
    if i == len(g):
        return set([r])
    return div(i+1,r,g)|div(i+1,r*g[i],g)

def D(n):
    d=F(n)
    return div(0,1,d)
            
n,=I()
l=sorted(list(D(a)&D(b)))
from bisect import *
#print l
for i in range(n):
    a,b=I()
    B=bisect_right(l, b)-1
    A=bisect_left(l,a)
#    print A,B
    print -1 if B <A or B==len(l) else l[B]