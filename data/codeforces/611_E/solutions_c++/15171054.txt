#include  <cstdio>
#include  <cstdlib>
#include  <cstring>
#include  <cmath>
#include  <algorithm>
#include  <set>
#include  <iterator>
#define  oo  1000000005
using  namespace  std;

int  m[5],ans,best,all,n,x,one,two;
multiset<int>  S;

void  work(int  lim,int  res){
	multiset<int>::iterator  it;
	while  (!S.empty()){
		it=S.end();it--;
		if  (*it<lim)  break;
		S.erase(it);ans++;
		it=S.lower_bound(res);
		if  (it!=S.begin()){
			it--;S.erase(it);
		}
	}
}

int  main(){
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	scanf("%d",&n);
	scanf("%d%d%d",&m[1],&m[2],&m[3]);
	sort(m+1,m+4);
	for  (int  i=1;i<=n;i++)  scanf("%d",&x),S.insert(--x);
	all=m[1]+min(oo,m[2]+m[3]);
	multiset<int>::iterator  it=S.end();it--;
	if  (*it>=all){puts("-1");return  0;}
	work(m[2]+m[3],0);
	work(m[1]+m[3],m[1]);
	work(max(m[1]+m[2],m[3]),m[2]);
	if  (!S.empty()){
		it=S.begin();
		multiset<int>::iterator  iit=S.end();iit--;
		for  (;;iit--){
			if  (*iit<m[1]+m[2])  ++one;
			if  (*iit<m[3])  ++two;
			if  (iit==it)  break;
		}
		best=oo;
		for  (int  rep=0;rep<n+5;rep++){
			int  sz=(int)S.size();
			if  (max(one,two)==sz){
				if  (2*min(one,two)>=sz)  best=min(best,rep+(sz+1)/2);
				else  best=min(best,rep+sz-min(one,two));
			}
			for  (int  i=1;i<=3;i++){
				multiset<int>::iterator it=S.lower_bound(m[i]);
				if  (it!=S.begin()){
					it--;
					if  (*it<m[1]+m[2])  one--;
					if  (*it<m[3])  two--;
					S.erase(it);
				}
			}
		}
	}
	printf("%d\n",ans+best);
	return  0;
}
