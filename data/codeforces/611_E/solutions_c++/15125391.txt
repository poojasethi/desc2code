#include <algorithm>
#include <cstdio>
#include <set>
using namespace std;
typedef multiset<int>::iterator iter;
const int N = 200005;
int n, a, b, c, v[N];
multiset<int> s;

int main() {
	scanf("%d%d%d%d", &n, &a, &b, &c);
	if (a > b) swap(a, b);
	if (a > c) swap(a, c);
	if (b > c) swap(b, c);
	for (int i = 0; i < n; i++) {
		scanf("%d", v+i);
		s.insert(v[i]);
	}
	int ans = 0;
	if (*s.rbegin() > a+b+c) {puts("-1"); return 0;}
	while (*s.rbegin() > b+c) {ans++; s.erase(--s.end());}
	while ((!s.empty())&&(*s.rbegin() > a+c)) {
		ans++;
		s.erase(--s.end());
		iter it = s.upper_bound(a);
		if (it != s.begin()) s.erase(--it);
	}
	while ((!s.empty())&&(*s.rbegin() > max(a+b, c))) {
		ans++;
		s.erase(--s.end());
		iter it = s.upper_bound(b);
		if (it != s.begin()) s.erase(--it);
	}
	while ((!s.empty())&&(*s.rbegin() > c)) {
		ans++;
		s.erase(--s.end());
		iter it = s.upper_bound(c);
		if (it != s.begin()) s.erase(--it);
	}
	while (!s.empty()) {
		ans++;
		s.erase(--s.end());
		iter it_a = s.upper_bound(a);
		if (it_a != s.begin()) {
			s.erase(--it_a);
			iter it_b = s.upper_bound(b);
			if (it_b != s.begin()) s.erase(--it_b);
		} else {
			iter it_b = s.upper_bound(b);
			if (it_b != s.begin()) {
				s.erase(--it_b);
			} else {
				iter it = s.upper_bound(a+b);
				if (it != s.begin()) s.erase(--it);
			}
		}
	}
	printf("%d\n", ans);
	return 0;
}
