#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<map>
#include<vector>
using namespace std;

const int N = 200000 + 10;

int n;
int A[3];
int x[8], b[8];
int a[N];

void solve()
{
	cin >> n >> A[0] >> A[1] >> A[2];
	sort(A, A + 3);
	for(int i = 0; i < n; ++ i) {
		scanf("%d", a + i);
		if (a[i] > A[0] + A[1] + A[2]) {
			cout << -1 << endl;
			return;
		}
	}
	sort(a, a + n);
	int offset = 0;
	for( ; n && a[n - 1] > A[1] + A[2]; -- n) ++ offset;
	int ret = n;

	for(int i = 0; i < 8; ++ i) {
		b[i] = 0;
		for(int j = 0; j < 3; ++ j) {
			if (i >> j & 1) {
				b[i] += A[j];
			}
		}
	}
	sort(b, b + 8);
	for(int i = 0; i < 8; ++ i) {
		x[i] = n - (upper_bound(a, a + n, b[i]) - a);
	}
	for(int r1 = 0; r1 <= n; ++ r1) {
		int r4 = x[5];
		int r3 = max(0, x[4] - r4);
		int r2 = 0;
		if (A[0] + A[1] > A[2]) {
			r2 = max(r2, x[3] - r4 - r3);
		} else {
			r2 = max(r2, x[3] - r4 - r3 - r1);
		}
		r2 = max(r2, (x[2] - r4 - r3 - r1 + 1) / 2);
		r2 = max(r2, (x[1] - r4 - 2 * r3 - 2 * r1 + 1) / 2);
		r2 = max(r2, (x[0] - 2 * r4 - 2 * r3 - 3 * r1 + 1) / 2);
		ret = min(ret, r1 + r2 + r3 + r4);
	}
	
	cout << ret + offset << endl;
}

int main()
{
	solve();
	return 0;
}
