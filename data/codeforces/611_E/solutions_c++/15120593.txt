#include <vector>
#include <cassert>
#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <set>
#include <algorithm>
#include <cstdlib>
#include <numeric>
#include <map>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)

typedef long long ll;

const int MAXN=200000;

int t[MAXN];
int sa[1<<3];

int testbit(int n, int m)
{
	return (n>>m)&1;
}

int main()
{
	int n;
	scanf("%d",&n);
	int a[3];
	REP(i,3)
		scanf("%d",&a[i]);
	sort(a,a+3);
	for(int i=0;i<(1<<3);i++)
	{
		sa[i]=0;
		for(int j=0;j<3;j++)
			if(testbit(i,j))
				sa[i]+=a[j];
	}
	multiset<int> st;
	REP(i,n)
	{
		scanf("%d",&t[i]);
		st.insert(-t[i]);
	}
	if(-*st.begin()>a[0]+a[1]+a[2])
	{
		puts("-1");
		return 0;
	}
	int res=0;
	vector<int> v;
	while(!st.empty())
	{
		// can make three-kill with the largest
		if(-*st.begin()<=a[2])
		{
			v.push_back(*st.begin());
			st.erase(st.begin());
			for(int i=0;i<2;i++)
			{
				multiset<int>::iterator it=st.lower_bound(-a[i]);
				if(it!=st.end())
				{
					v.push_back(*it);
					st.erase(it);
				}
				else break;
			}
			if(v.size()==3)
			{
				res++;
				v.clear();
				continue;
			}
		}
		// try to make double kill with the largest
		if(v.size()<3)
		{
			REP(i,v.size())
				st.insert(v[i]);
			v.clear();
			int leftover=0;
			for(int i=0;i<(1<<3);i++)
			{
				int sum=sa[i];
				if(-*st.begin()<=sum)
					leftover=max(leftover, sa[7]-sum);
			}

			st.erase(st.begin());
			multiset<int>::iterator it=st.lower_bound(-leftover);
			if(it!=st.end())
				st.erase(it);
			res++;
		}


	}
	printf("%d\n",res);
	return 0;
}
