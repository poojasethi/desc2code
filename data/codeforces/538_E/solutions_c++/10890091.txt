#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;

int dse(const vector<vector<int> >& edges, int v);

int dfi(const vector<vector<int> >& edges, int v)
{
	if (edges[v].size() == 0) return 1;
	int mi = edges.size();
	for (int i = 0; i < edges[v].size(); ++i) mi = min(mi, dse(edges, edges[v][i]));
	return mi;
}

int dse(const vector<vector<int> >& edges, int v)
{
	if (edges[v].size() == 0) return 1;
	int sum = 0;
	for (int i = 0; i < edges[v].size(); ++i) sum += dfi(edges, edges[v][i]);
	return sum;
}

int main()
{
	int n;
	scanf("%d", &n);
	int leafs = n;
	vector<vector<int> > edges(n);
	for (int i = 1; i < n; ++i)
	{
		int u, v;
		scanf("%d%d", &u, &v);
		edges[u - 1].push_back(v - 1);
		if (edges[u - 1].size() == 1) --leafs;
	}
	printf("%d %d\n", leafs - dfi(edges, 0) + 1, dse(edges, 0));
	return 0;
}
