#include<bits/stdc++.h>
#define MP make_pair
#define R second
#define L first
using namespace std;
const int maxn=200000+1000;
vector<int> v[maxn];
int dp[maxn][2];
bool mark[maxn];
int h[maxn];
int dfs(int x, int p=-1){
	if(v[x].size()==1 && x!=0){
		dp[x][0]=dp[x][1]=1;
		return 1;
	}
	if(p!=-1)
		h[x]=h[p]+1;
	int lft=0;
	dp[x][0]=maxn;
	for(int i=0;i<v[x].size();i++){
		int child=v[x][i];
		if(child != p){
			lft+=dfs(child, x);
			dp[x][0]=min(dp[x][0], dp[child][1]);
			dp[x][1]+=dp[child][0];
		}
	}
	return lft;
}

int main(){
	int n;
	cin >> n;
	if(n==1){
		cout << "1 1" << endl;
		return 0;
	}
	for(int i=0;i<n-1;i++){
		int x, y;
		cin >> x >> y;
		x--, y--;
		v[x].push_back(y);
		v[y].push_back(x);
	}
	int lft=dfs(0);
	cout << lft-dp[0][0]+1 << " " << dp[0][1] << endl;
}
