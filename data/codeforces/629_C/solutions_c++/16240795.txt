#include <bits/stdc++.h>

using namespace std;

const int MOD = 1e9 + 7, N = 5011;
int n, m;
string s;
long dp[N][N];
int need = 0, balance = 0;

// len bal

void cal() {
	dp[0][0] = 1;
	for (int i = 1; i < 4101; i++)
		for (int j = 0; j <= i; j++) {
			dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j + 1]) % MOD;
		}
	
}

void calmax() {
	for (int i = 0; i < s.size(); i++) {
		if (s[i] == '(')
			balance++;
		else balance--;
		if (balance < 0)
			need = min(need, balance);
	}
}

main() {
	cin >> n >> m >> s;
	calmax();
	cal();
	long long ans = 0;
	need *= -1;
	for (int i = need; i <= n - m; i++) {
		for (int j = need; j <= i; j++) {
			int temp = j + balance;
			if (temp > n - m - i)
				continue;
			ans = (ans + 1LL * dp[i][j] * dp[n - m - i][temp]) % MOD;
		}
	}
	cout << ans << endl;
}
