from bisect import bisect_left as bl
n = input()
n+=1
k = [0]*n
p = [0]*n
ma = [0]*n
mi = [0]*n
l = [0]*n
r = [0]*n
for i in xrange(1,n):
    pp,kk = map(int,raw_input().split())
    p[i] = pp
    ma[i] = mi[i] = k[i] = kk
kn = input()
for i in xrange(1,n):
    if p[i]<0: continue    
    if k[p[i]]<k[i]: r[p[i]]=i
    else: l[p[i]]=i
q = [i for i in xrange(1,n) if not l[i]]
v = [False]*n
for x in q: v[x] = True
for x in q:
    if p[x]<0: continue
    if v[p[x]]: continue
    if l[p[x]] and (not v[l[p[x]]] or not v[r[p[x]]]): continue
    v[p[x]] = True
    q.append(p[x])
for i in q:
    if not l[i]: continue
    ma[i]=ma[r[i]]
    mi[i]=mi[l[i]]
    #ma[p[i]]=max(ma[p[i]],ma[i])
    #mi[p[i]]=min(mi[p[i]],mi[i])
en = [0]*n
ex = [0.]*n
for i in reversed(q):
    if not l[i]: continue
    en[r[i]]=en[l[i]]=en[i]+1
    ex[l[i]]=ex[i]+mi[r[i]]
    ex[r[i]]=ex[i]+ma[l[i]]
k[0]=-1
kp = [(v,i) for i,v in enumerate(k)]
kp.sort()
kpv = [x for x,y in kp]
kpi = [y for x,y in kp]
for _ in xrange(kn):
    x = input()
    p = bl(kpv,x)-1
    e = kpi[p]
    if p<n-1:
        if not e or l[e]:
            e = kpi[p+1]
    if l[e]: raise NotImplemented
    print "%.10f"%(1.*ex[e]/en[e])
