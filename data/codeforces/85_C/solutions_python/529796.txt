import bisect
import sys
SW = []
List = []
L = []
R = []
ans = []

def dfs(u, cum, cnt):    
    if L[u] != -1:
        pos = bisect.bisect_left(SW, (List[u][1], u))        
        dfs(L[u], cum + SW[pos - 1][0], cnt + 1)
        dfs(R[u], cum + SW[pos + 1][0], cnt + 1)
    else:
        ans[u] = cum * 1.0 / cnt

def work(root, n):
    st = []
    st.append(root)
    st.append(0)
    st.append(0)
    mark = [0] * n
    while len(st) > 0:
        u = st[-3]
        cum = st[-2]
        cnt = st[-1]
        if L[u] != -1:
            if mark[u] == 0:
                pos = bisect.bisect_left(SW, (List[u][1], u))
                st.append(L[u])
                st.append(cum + SW[pos - 1][0])
                st.append(cnt + 1)
                mark[u] = 1
            elif mark[u] == 1:
                pos = bisect.bisect_left(SW, (List[u][1], u))
                st.append(R[u])
                st.append(cum + SW[pos + 1][0])
                st.append(cnt + 1)
                mark[u] = 2
            elif mark[u] == 2:
                st.pop()
                st.pop()
                st.pop()                             
                        
        else:
            st.pop()
            st.pop()
            st.pop()
            ans[u] = cum * 1.0 / cnt
        
                    
    

def main():
    #sys.setrecursionlimit(100000)

    f = sys.stdin
    n = int(f.readline())    
    L.extend([-1] * n)
    R.extend([-1] * n)        
    cur = [(int(y[0]) - 1, int(y[1])) for y in [f.readline().split() for x in range(n)]];
    List.extend(cur)
       
    
    for i in xrange(n):
        p = List[i][0]
        w = List[i][1]
        SW.append((w, i))        
        if p == -2:
            root = i
            continue
        if List[p][1] < List[i][1]:
            L[p] = i
        else:
            R[p] = i               

    SW.sort(key = lambda item: item[0])    
    ans.extend([0] * n)    
    #dfs(root, 0, 0)
    work(root, n)    
            
    k = int(f.readline())
    
    for i in xrange(k):
        x = int(f.readline())
        pos = bisect.bisect(SW, (x, -1))
        if pos < len(SW) and L[SW[pos][1]] == -1:
            x = ans[SW[pos][1]]
        else:
            x = ans[SW[pos - 1][1]]             
        print x
           
           
    
if __name__ == '__main__':                      
    main()