#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>
#include <vector>
#include <map>
using namespace std;

typedef long long int64;

int n, m, root;
map<int, int> lc, rc;
map<int, int> Max, Min;
vector<double> ans;
vector<pair<int, int> > a;
vector<pair<int, int> > v;

void dfs(int x) {
	Min[x] = Max[x] = x;
	if (lc.count(x)) {
		dfs(lc[x]);
		dfs(rc[x]);
		Max[x] = Max[rc[x]];
		Min[x] = Min[lc[x]];
	}
	//cout << x << ' ' << Min[x] << ' ' << Max[x] << endl;
}

void countAns(int x, int deep, int64 val, int l, int r) {
	//cout << x << ' ' << val << ' ' << l << ' ' << r << endl;
	if (!lc.count(x)) {
		for (int i = l; i < r; ++i)
			ans[v[i].second] = (double)val / deep;
		return;
	}
	int mid = lower_bound(v.begin() + l, v.begin() + r, make_pair(x, 0)) - v.begin();
	countAns(lc[x], deep + 1, val + Min[rc[x]], l, mid);
	countAns(rc[x], deep + 1, val + Max[lc[x]], mid, r);
}

int main() {
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		int x, y;
		scanf("%d%d", &x, &y);
		a.push_back(make_pair(x, y));
	}
	for (int i = 0; i < n; ++i) {
		int f = a[i].first;
		int x = a[i].second;
		if (f == -1)
			root = x;
		else {
			if (x < a[f - 1].second)
				lc[a[f - 1].second] = x;
			else
				rc[a[f - 1].second] = x;
		}
	}

	dfs(root);

	scanf("%d", &m);
	for (int i = 0; i < m; ++i) {
		int x;
		scanf("%d", &x);
		v.push_back(make_pair(x, i));
	}
	sort(v.begin(), v.end());
	ans.resize(v.size());
	countAns(root, 0, 0, 0, v.size());
	
	for (int i = 0; i < m; ++i)
		printf("%.15f\n", ans[i]);
}
