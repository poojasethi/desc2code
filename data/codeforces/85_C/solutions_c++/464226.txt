#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <map>
#include <set>
#include <queue>
#include <stack>
using namespace std;

#define PB push_back
#define MP make_pair

const int INF = 1000000000;

typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<double> VD;
typedef long long LL;
typedef pair<int,int> PII;

struct p{
	int l, r, val, lv, rv;
}p[100100];

int f[100100];
double a[100100];
vector<PII> v;

void dfs(int i, int l, int r){
	if(p[i].l == 0){
		v.PB(MP(l, i));
		p[i].lv = p[i].rv = p[i].val;
		return;
	}
	dfs(p[i].l, l, p[i].val - 1);
	p[i].lv = p[p[i].l].lv;
	dfs(p[i].r, p[i].val + 1, r);
	p[i].rv = p[p[i].r].rv;
}

void gao(int m, double tt, int depth){
	if(p[m].l == 0){
		if(depth > 0)
			a[m] = tt / depth;
		return;
	}
	gao(p[m].l, tt + p[p[m].r].lv, depth + 1);
	gao(p[m].r, tt + p[p[m].l].rv, depth + 1);
}

int main(){
	int i, j, k, m, n, s;
	scanf("%d", &n);
	for(i = 1; i <= n; i++){
		scanf("%d%d", f + i, &p[i].val);
	}
	for(i = 1; i <= n; i++){
		if(f[i] > -1){
			if(p[f[i]].val > p[i].val)
				p[f[i]].l = i;
			else
				p[f[i]].r = i;
		}else
			s = i;
	}
	dfs(s, 0, INF + 1);
	gao(s, 0, 0);
	v.PB(MP(1000000001,0));
	sort(v.begin(), v.end());
	//for(i = 0; i < v.size(); i++)printf("%d %d\n", v[i].first, v[i].second);
	scanf("%d", &k);
	for(i = 0; i < k; i++){
		int q, u;
		scanf("%d", &u);
		q = lower_bound(v.begin(), v.end(), MP(u, 0)) - v.begin();
		while(v[q].first > u) q--;
		//printf("%d\n", q);
		printf("%.15lf\n", a[v[q].second]);
	}
	scanf("%*d");
}
