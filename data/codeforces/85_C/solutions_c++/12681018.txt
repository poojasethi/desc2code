//In the Name of God

#include<iostream>
#include<vector>
#include<algorithm>
#define ll long long
#define pb push_back
#define mp make_pair

using namespace std;

const ll inf=1000010000,maxn=300300;
ll k,x,n,a[maxn],b[maxn],root,next[maxn],prev[maxn],Next,Prev,v[maxn],d;
vector<ll> g[maxn];
vector<pair<ll,ll> > val;

void dfs(ll x,ll s,ll cnt)
{
     a[x]=s;
     b[x]=cnt;
     if(g[x].size())
     {
       dfs(g[x][0],s+v[next[x]],cnt+1);
       dfs(g[x][1],s+v[prev[x]],cnt+1);
     }
}

main()
{
    cin>>n;
    for(ll i=1;i<=n;i++)
    {
            cin>>d>>v[i];
            g[d].pb(i);
            val.pb(mp(v[i],i));
            if(d==-1)
              root=i;
    }
    g[n+1].pb(1);
    val.pb(mp(-inf,n+1));
    val.pb(mp(+inf,n+1));
    sort(val.begin(),val.end());
    for(ll i=1;i<=n;i++)
    {
      prev[val[i].second]=val[i-1].second;
      next[val[i].second]=val[i+1].second;
    }
    prev[val[1].second]=val[1].second;
    next[val[n].second]=val[n].second;
    for(ll i=1;i<=n;i++)
      if(g[i].size())
        if(v[g[i][1]]<v[g[i][0]])
          swap(g[i][0],g[i][1]);
    dfs(root,0,0);
    cin>>k;
    cout.precision(9);
    for(ll i=1;i<=k;i++)
    {
      cin>>x;
      Next=(*upper_bound(val.begin(),val.end(),mp(x,0ll))).second;
      Prev=(*(upper_bound(val.begin(),val.end(),mp(x,0ll))-1)).second;
      if(!g[Next].size())
        cout<<fixed<<((long double)a[Next])/((long double)b[Next])<<endl;
      else
        cout<<fixed<<((long double)a[Prev])/((long double)b[Prev])<<endl;
    }
    return 0;
}
