//In the name of God

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
using namespace std;
#define mp make_pair
#define lol long long
const lol MAXN=1e5+10;
bool mark[MAXN];
vector <pair <lol,lol> > r;
lol g[MAXN][3],next[MAXN],prev[MAXN],root,a[MAXN],x[MAXN],p[MAXN];
pair <lol,lol> ans[MAXN];

void dfs(lol v,lol sum,lol pos)
{
  //cerr<<v<<" "<<sum<<" "<<pos<<endl;
  //cerr<<g[v][1]<<" "<<g[v][2]<<endl;
  if(mark[v])
    {
      ans[v]=mp(sum,pos);
      return;
    }
  //cerr<<next[v]<<" "<<prev[v]<<endl;
  dfs(g[v][1],sum+next[v],pos+1);
  dfs(g[v][2],sum+prev[v],pos+1);
}

int main()
{
  lol n;
  cin>>n;
  fill(mark,mark+MAXN,true);
  for(lol i=1;i<=n;i++)
    {
      cin>>p[i]>>x[i];
      if(p[i]==-1)
	root=i;
      else
	mark[p[i]]=false;
      a[i]=x[i];
      r.push_back(mp(x[i],i));
    }
  for(int i=1;i<=n;i++)
    if(p[i]!=-1)
      {
	if(a[i]<a[p[i]])
	  g[p[i]][1]=i;
	else
	  g[p[i]][2]=i;
      }
  sort(r.begin(),r.end());
  for(lol i=0;i<r.size();i++)
    {
      if(i+1<r.size())
	next[r[i].second]=r[i+1].first;
      if(i-1>=0)
	prev[r[i].second]=r[i-1].first;
      // cerr<<r[i].first<<" "<<r[i].second<<":"<<prev[r[i].second]<<" "<<next[r[i].second]<<endl;
    }
  dfs(root,0,0);
  lol k;
  cin>>k;
  for(lol i=1;i<=k;i++)
    {
      lol xx;
      cin>>xx;
      lol ind=lower_bound(r.begin(),r.end(),mp(xx,0ll))-r.begin();
      if(ind<r.size() and mark[r[ind].second])
	{
	  lol v=r[ind].second;
	  printf("%.9lf\n",(double)ans[v].first/(double)ans[v].second);
	}
      else
	{
	  lol v=r[ind-1].second;
	  printf("%.9lf\n",(double)ans[v].first/(double)ans[v].second);
	}
    }
  return 0;
}
