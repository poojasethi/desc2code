#include <cstdio>
#include <algorithm>
#include <cstring>
#define N 100005
using namespace std;


int n, m, x, t, p[N], v[N], l[N], r[N], mn[N], mx[N], h[N], list[N], root, pos;
double E[N];

void dfs(int x, int y){

	h[x] = y;
	mn[x] = mx[x] = v[x];
	
	if (v[l[x]] > v[r[x]]) swap(l[x], r[x]);
	if (l[x]) dfs(l[x], y + 1);
	list[++t] = x;
	if (l[x]) dfs(r[x], y + 1);
	
	if (l[x]){
		mn[x] = mn[l[x]];
		mx[x] = mx[r[x]];
	}
}

void pre(int x){

	double t;
	
	if (p[x] != -1){
		t = E[p[x]] * h[p[x]];
		if (v[x] < v[p[x]]) t += mn[r[p[x]]];
		else t += mx[l[p[x]]];
		E[x] = t / h[x];
	}
	
	if (!l[x]) return;
	pre(l[x]);
	pre(r[x]);
}

int main(){

	scanf("%d", &n);
	for (int i=1; i<=n; i++){
		scanf("%d%d", &p[i], &v[i]);
		if (p[i]==-1) root = i;
		else{
			if (!l[p[i]]) l[p[i]] = i;
			else r[p[i]] = i;
		}
	}
	
	t = 0;
	dfs(root, 0);
	pre(root);
	
	scanf("%d", &m);
	while (m--){
		scanf("%d", &x);
		
		pos = 0;
		for (int i=1, j=n, k; j>=i;){
			k = (i+j)/2;
			if (x > v[list[k]]) pos = k, i = k + 1;
			else j = k - 1;
		}
		
		if (pos%2 == 0) pos++;
		printf("%.9f\n", E[list[pos]]);
	}

	return 0;
}
