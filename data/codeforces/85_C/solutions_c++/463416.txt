#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<vector>
#include<set>
#include<algorithm>
#include<map>
#include<cstdlib>
#include<sstream>
#include<iomanip>

#define rep(i,n) for(int i=0;i<n;i++)
#define pb(x) push_back(x)
#define ll long long
#define For(i,a,b) for(int i=a;i<b;i++)

using namespace std;

const int maxn=100100;

int lef[maxn],righ[maxn],p[maxn];
double value[maxn];
int temp[maxn];
map<int,int> ind;
int key[maxn];

void dfs(int k,double ex,int depth){
	if(lef[k] == -1){
		value[k]=ex/depth;
		return ;
	}
	dfs(lef[k],ex+temp[ind[key[k]]+1],depth+1);
	dfs(righ[k],ex+temp[ind[key[k]]-1],depth+1);
}

int n,k;
int ind1[maxn];
int val[maxn];
int root;

int main(){
	cin >> n;
	rep(i,n){
		cin >> p[i] >> key[i];
		if(p[i] != -1){
			p[i]--;
		}else
			root=i;
	}
	rep(i,n)
		lef[i]=righ[i]=-1;
	rep(i,n)
		if(p[i] != -1){
			if(key[i] < key[p[i]])
				lef[p[i]]=i;
			else
				righ[p[i]]=i;
		}
	copy(key,key+n,temp);
	sort(temp,temp+n);
	rep(i,n)
		ind[temp[i]]=i;
	rep(i,n)
		ind1[ind[key[i]]]=i;
	cin >> k;
	rep(i,k)
		cin >> val[i];
	cout << fixed << setprecision(10);
	dfs(root,0,0);
	rep(i,k){
		int tmp=lower_bound(temp,temp+n,val[i])-temp;
		if(tmp == n)
			tmp--;
		int id1=ind1[tmp];
//		cout << val[i] << " " << key[id1] << " " << temp[tmp] << endl;
		if(lef[id1] == -1){
			cout << value[id1] << endl;
		}else{
			if(key[id1] > val[i]){
//				cout << "----1 " << lef[ind1[tmp-1]] << endl;
				cout << value[ind1[tmp-1]] << endl;
			}else{
//				cout << "----1 " << lef[ind1[tmp+1]] << endl;
				cout << value[id1+1] << endl;
			}
		}
	}
	return 0;
}
