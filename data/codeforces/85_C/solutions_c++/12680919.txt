//In the Name of God
#include <iostream>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;
typedef long long LL;
typedef pair<LL, LL> pii;

const LL maxn = 100000 + 10;
LL n, ans[maxn], ted[maxn], l[maxn], root, k, nex[maxn], pre[maxn], value[maxn];
vector <LL> G[maxn];
vector <pii> all;
bool leave[maxn];

void dfs(LL v, LL val, LL t){
	if(G[v].empty()){
		ans[v] = val;
		ted[v] = t;
		//cout << v << ' ' << val << ' ' << t << endl;
		return ;
	}	
	//cout << v << ' ' << val << ' ' << t << endl;
	if(value[G[v][0]] > value[G[v][1]])
		swap(G[v][1], G[v][0]);
	dfs(G[v][0], val + nex[v], t + 1);
	dfs(G[v][1], val + pre[v], t + 1);
}

int main(){
	cin >> n;
	for(LL i = 0 ; i < n ; i++){
		LL p, v;
		cin >> p >> v;
		p--;
		if(p >= 0)
			G[p].push_back(i);
		else
			root = i;
		value[i] = v;
		all.push_back(pii(v, i));
	}
	for(LL i = 0 ; i < n ; i++)
		leave[i] = G[i].empty();
	sort(all.begin(), all.end());
	for(LL i = 0 ; i < n ; i++)
		if(!leave[all[i].second]){
			nex[all[i].second] = all[i + 1].first;
			pre[all[i].second] = all[i - 1].first;
		}
	cin >> k;
	for(LL i = 0 ; i < k ; i++){
		LL v;
		cin >> v;
		all.push_back(pii(v, n + i));
	}
	sort(all.begin(), all.end());
	dfs(root, 0, 0);
	LL fi = -1;
	for(LL i = 0 ; i < all.size() ; i++)
		if(all[i].second < n)
			fi = i;
		else if(fi != -1 && leave[all[fi].second])
			l[all[i].second - n] = all[fi].second;
	fi = -1;
	for(LL i = all.size() - 1 ; i >= 0 ; i--)
		if(all[i].second < n)
			fi = i;
		else if(fi != -1 && leave[all[fi].second])
			l[all[i].second - n] = all[fi].second;
	cout.precision(9);
	for(LL i = 0 ; i < k ; i++)
		cout << fixed << (double)ans[l[i]] / ted[l[i]] << endl;
	return 0;
}