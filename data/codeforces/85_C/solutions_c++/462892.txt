/*
 TASK: C. Petya and Tree
 LANG: C++
 by pasin30055
*/
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <set>

#define MAX_N 100005
#define INF 1000000001

using namespace std;

int n,i,en,j,k;
int root;
int p[MAX_N],val[MAX_N];
int ch[MAX_N][2];
int deg[MAX_N];
int dis[MAX_N];
int valtmp;
int forans[MAX_N];
double tmp1;
double anstmp[MAX_N];
pair<int,double> answer[MAX_N];
set<int> S;
set<int>::iterator it;

void DFS(int node)
{
	if(node!=root)
	{
		if(val[node]>val[p[node]])
		{
			it=S.find(val[p[node]]);
			it--;
			tmp1=(double)(*it);
		}
		else
		{
			it=S.find(val[p[node]]);
			it++;
			tmp1=(double)(*it);
		}
		dis[node]=dis[p[node]]+1;
		anstmp[node]=(anstmp[p[node]]+tmp1);
	}
	if(deg[node]==2)
	{
		DFS(ch[node][0]);
		DFS(ch[node][1]);
	}
	return ;
}

int main()
{
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%d %d",&p[i],&val[i]);
		S.insert(val[i]);
		if(p[i]==-1)
		{
			root=i;
		}
		else
		{
			p[i]--;
			ch[p[i]][deg[p[i]]]=i;
			deg[p[i]]++;
		}
	}
	DFS(root);
	en=0;
	for(i=0;i<n;i++)
	{
		if(deg[i]==2)
		{
			forans[en]=val[i];
			en++;
		}
	}
	forans[en]=INF;
	en++;
	sort(forans,forans+en);
	en=0;
	for(i=0;i<n;i++)
	{
		if(deg[i]==0)
		{
			answer[en].first=val[i];
			answer[en].second=anstmp[i]/dis[i];
			en++;
		}
	}
	sort(answer,answer+en);
	scanf("%d",&k);
	for(i=0;i<k;i++)
	{
		scanf("%d",&valtmp);
		printf("%.9lf\n",answer[upper_bound(forans,forans+en,valtmp)-forans].second);
	}
	return 0;
}