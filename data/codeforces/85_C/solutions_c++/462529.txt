/*
 * 2011-05-20  Martin  <Martin@Martin-desktop>

 * 
 */
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

#define pii pair <int, int>
#define MaxiN 100005

int N, Root, K;
int Pa[MaxiN], Key[MaxiN], Left[MaxiN], Right[MaxiN], Big[MaxiN], Small[MaxiN], Depth[MaxiN];
vector < pair < int, double > > Seg;

void DFS1(int Cur)
{
	Big[Cur] = Small[Cur] = Key[Cur];
	if (Left[Cur] != 0 && Right[Cur] != 0)
	{
		DFS1(Left[Cur]);
		DFS1(Right[Cur]);
		Big[Cur] = max(Big[Cur], max(Big[Left[Cur]], Big[Right[Cur]]));
		Small[Cur] = min(Small[Cur], min(Small[Left[Cur]], Small[Right[Cur]]));
	}
}

void DFS2(int Cur, int l, int r, double s)
{
	if (Left[Cur] != 0 && Right[Cur] != 0)
	{
		Depth[Left[Cur]] = Depth[Right[Cur]] = Depth[Cur] + 1;
		DFS2(Left[Cur], l, Key[Cur] - 1, s + Small[Right[Cur]]);
		DFS2(Right[Cur], Key[Cur] + 1, r, s + Big[Left[Cur]]);
	}
	else
		Seg.push_back(make_pair(r, s / Depth[Cur]));
}

int main()
{
	scanf("%d", &N);
	for (int i = 1; i <= N; ++ i)
		scanf("%d%d", &Pa[i], &Key[i]);
	for (int i = 1; i <= N; ++ i)
	{
		if (Pa[i] == - 1)
			Root = i;
		else
		{
			if (Key[i] < Key[Pa[i]])
				Left[Pa[i]] = i;
			else
				Right[Pa[i]] = i;
		}
	}
	Seg.clear();
	DFS1(Root);
	DFS2(Root, 0, 1000000001, 0);
	scanf("%d", &K);
	for (int i = 1; i <= K; ++ i)
	{
		int X;
		scanf("%d", &X);
		int pos = lower_bound(Seg.begin(), Seg.end(), make_pair(X, - 1000000000.0)) - Seg.begin();
		printf("%.10lf\n", Seg[pos].second);
	}
	return 0;
}
