#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int limite=1000000;

int n;
vector<int> g[limite];
int key[limite];
int minimo[limite];
int maximo[limite];
double expected[limite];
map<int,int> key2node;
map<int,int> anterioriner;

int lastiner=0;

void genera(int u)
{
  vector<int> &ar=g[u];
  if (int(ar.size())==0) {
    key2node[key[u]]=u;
    minimo[u]=maximo[u]=key[u];
    anterioriner[u]=lastiner;
    return;
  }
  if (key[ar[0]]>key[ar[1]]) swap(ar[0],ar[1]);
  genera(ar[0]);
  minimo[u]=minimo[ar[0]];
  lastiner=u;
  genera(ar[1]);
  maximo[u]=maximo[ar[1]];
}

void computa(int u,double expe,int cuantos)
{
  vector<int> &ar=g[u];
  if (int(ar.size())==0) {
    expected[u]=expe;
    return;
  }
  computa(ar[0],(expe*cuantos+minimo[ar[1]])/(cuantos+1),cuantos+1);
  computa(ar[1],(expe*cuantos+maximo[ar[0]])/(cuantos+1),cuantos+1);
}

int main()
{
  ios::sync_with_stdio(false);
  cout.setf(ios::fixed);
  cout.precision(15);
  cin>>n;
  int root;
  for (int i=1;i<=n;i++) {
    int p;
    cin>>p>>key[i];
    if (p!=-1)
      g[p].push_back(i);
    else
      root=i;
  }
  genera(root);
  computa(root,0,0);
  int k;
  cin>>k;
  for (int i=0;i<k;i++) {
    int clave;
    cin>>clave;
    map<int,int>::iterator it=key2node.lower_bound(clave);
    if (it==key2node.end()) {
      it--;
      int u=it->second;
      cout<<expected[u]<<endl;
    } else if (it==key2node.begin()) {
      int u=it->second;
      cout<<expected[u]<<endl;
    } else {
      int u=it->second;
      int umed=anterioriner[u];
      if (clave<key[umed]) {
	it--;
	u=it->second;
      }
      cout<<expected[u]<<endl;
    }
  }
}
