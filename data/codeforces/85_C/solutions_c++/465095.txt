#ifdef DEBUG
#define WATCH(x) (cerr << #x << '=' << (x) << endl)
#define TRACE(x) (cerr << (x) << endl)
#else
#define WATCH(x) /*()*/
#define TRACE(x) /*()*/
#endif

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#define MAXN 100010
#define INF 0x7fffffff
using namespace std;
int n, le[MAXN], ri[MAXN], key[MAXN], l[MAXN], r[MAXN], root, cnt[MAXN];
long long sum[MAXN];
vector<int> inner;
vector<double> ans;
void init(int u) {
	if(le[u] == -1 && ri[u] == -1) {
		l[u] = r[u] = key[u];
	}
	else {
		init(le[u]);
		init(ri[u]);
		l[u] = l[le[u]];
		r[u] = r[ri[u]];
	}
}
void gao(int u) {
	if(le[u] != -1 && ri[u] != -1) {
		cnt[le[u]] = cnt[u] + 1;
		cnt[ri[u]] = cnt[u] + 1;
		sum[le[u]] = sum[u] + l[ri[u]];
		sum[ri[u]] = sum[u] + r[le[u]];
		gao(le[u]);
		inner.push_back(key[u]);
		gao(ri[u]);
	}
	else {
		ans.push_back(sum[u] * 1.0 / cnt[u]);
	}
}
int main() {
	while(scanf("%d", &n) != EOF) {
		memset(le, -1, sizeof(le));
		memset(ri, -1, sizeof(ri));
		for(int i = 0; i < n; ++i) {
			int p;
			scanf("%d%d", &p, &key[i]);
			if(p == -1)
				root = i;
			else {
				--p;
				if(le[p] == -1)
					le[p] = i;
				else {
					ri[p] = i;
					if(key[le[p]] > key[ri[p]])
						swap(le[p], ri[p]);
				}
			}
		}
		init(root);
		cnt[root] = sum[root] = 0;
		inner.push_back(-INF);
		gao(root);
		int k;
		scanf("%d", &k);
		for(int i = 0; i < k; ++i) {
			int val;
			scanf("%d", &val);
			printf("%.10lf\n", ans[lower_bound(inner.begin(), inner.end(), val) - inner.begin() - 1]);
		}
	}
	return 0;
}
