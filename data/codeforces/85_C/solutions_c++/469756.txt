#include<cstdio>
#include<cstring>
#include<set>
#include<algorithm>
#define MAXN 100010
using namespace std;
typedef long long ll;
int p[MAXN],l[MAXN],r[MAXN];
int key[MAXN];
pair<int,int> query[MAXN];
double ans[MAXN];
set<int> tree;
int n,q,root;
void dfs(int x,int dep,ll sum,int low,int high)
{
        //printf("%d %d %d\n",key[x],low,high);
     if(l[x]==-1){
         for(int i=low;i<high;i++)
             ans[query[i].second]=(double)sum/dep;
     }else{
         int mid=upper_bound(query+low,query+high,make_pair(key[x],0))-query;
         int big,small;
         __typeof(tree.begin()) it=tree.find(key[x]);
         it--;
         small=(*it);
         it++; it++;
         big=(*it);

         dfs(l[x],dep+1,sum+big,low,mid);
        dfs(r[x],dep+1,sum+small,mid,high);
    }
}
int main()
{
    while(scanf("%d",&n)!=EOF)
    {
        tree.clear();
        for(int i=0;i<n;i++)
        {
            scanf("%d%d",p+i,key+i);
            p[i]--;
            if(p[i]<0) root=i;
            tree.insert(key[i]);
        }
            //ger left right
        memset(l,255,sizeof(l));
        memset(r,255,sizeof(r));
        for(int i=0;i<n;i++)
            if(key[i]<key[p[i]]) l[p[i]]=i;
            else r[p[i]]=i;
            //
        scanf("%d",&q);
        for(int i=0;i<q;i++)
        {
            scanf("%d",&query[i].first);
            query[i].second=i;
        }
        sort(query,query+q);
        dfs(root,0,0,0,q);
        for(int i=0;i<q;i++)
            printf("%.9lf\n",ans[i]);
    }
    return 0;
}
