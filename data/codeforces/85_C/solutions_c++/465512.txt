//Solution by Ali-Amir Aldan
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <cmath>
#include <map>
#include <set>

using namespace std;

#define N 200000+10

int n, k, x, t;
int key[N], le[N], ri[N], rr[N], ll[N], h[N], p[N], a[N];
long long sum[N];

void precalc (int u, int dep=0)
{
	h[u] = dep;

 	if (!le[u])
 	{
		rr[u] = ll[u] = key[u];
		a[t++] = u;
 	}
 	else
	{
		if (key[le[u]] > key[ri[u]])
			swap (le[u], ri[u]);

		precalc (le[u], dep+1);

		a[t++] = u;

		precalc (ri[u], dep+1);

		ll[u] = ll[le[u]];
		rr[u] = rr[ri[u]];
	}
}

void dp (int u)
{
	if (p[u] != -1)
		sum[u] = sum[p[u]] + (u==le[p[u]]?ll[ri[p[u]]]:rr[le[p[u]]]);

	if (le[u])
		dp (le[u]),
		dp (ri[u]);
}

int main ()
{
	#ifndef ONLINE_JUDGE
		freopen ("input", "r", stdin);
		freopen ("output", "w", stdout);
	#endif

	scanf ("%d", &n);

	int root;

	for (int i = 1; i <= n; i++)
	{
	 	scanf ("%d%d", &p[i], &key[i]);

	 	if (p[i] == -1) root = i;
	 	else
 		if (le[p[i]]) ri[p[i]] = i;
 		else le[p[i]] = i;
	}

	scanf ("%d", &k);

	precalc (root);
	dp (root);

	for (int res, lo, hi, mi; k--;)
	{
	 	scanf ("%d", &x);

	 	res = lo = 0; hi = t-1;

	 	for (; lo<hi;)
	 	{
			mi = (lo+hi+1)>>1;

			if (key[a[mi]]>x) hi = mi-1;
			else lo = mi;
	 	}

	 	lo += lo&1;

	 	printf ("%.12lf\n", (double)sum[a[lo]]/h[a[lo]]);
	}

	return 0;
}
