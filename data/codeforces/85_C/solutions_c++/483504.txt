#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
const int MAXN = 100010;
struct vertex
{
  int l, r, key;
};
int n, k, to[MAXN], key, root;
vertex a[MAXN], s[MAXN];
pair <long long, int> tmp[MAXN], dp[MAXN];
void calc(int& v)
{
  if (a[v].l && a[v].r)
  {
    dp[a[v].l].first = dp[v].first + a[s[v].r].key;
    dp[a[v].l].second = dp[v].second + 1;
    calc(a[v].l);
    dp[a[v].r].first += dp[v].first + a[s[v].l].key;
    dp[a[v].r].second = dp[v].second + 1;
    calc(a[v].r);
  }
}
int find(int& k)
{
  int l = 1, r = n, m;
  while(l < r)
  {
    m = (l + r) / 2;
    if (tmp[m].first < k)
      l = m + 1;
    else
      r = m;
  }
  if (!a[tmp[l].second].l && !a[tmp[l].second].r)
    return tmp[l].second;
  else if (l > 1 && !a[tmp[l - 1].second].l && !a[tmp[l - 1].second].r)
    return tmp[l - 1].second;
}
int main()
{
  scanf("%d", &n);
  for(int i = 1; i <= n; i++)
  {
    scanf("%d%d", &to[i], &key);
    a[i].key = key;
  }
  for(int i = 1; i <= n; i++)
  {
    if (to[i] == -1)
      root = i;
    else if (a[i].key < a[to[i]].key)
      a[to[i]].l = i;
    else
      a[to[i]].r = i;
  }
  for(int i = 1; i <= n; i++)
  {
    tmp[i - 1].first = a[i].key;
    tmp[i - 1].second = i;
  }
  sort(tmp, tmp + n);
  for(int i = n - 1; i >= 0; i--)
    tmp[i + 1] = tmp[i];
  for(int i = 2; i < n; i++)
  {
    s[tmp[i].second].l = tmp[i - 1].second;
    s[tmp[i].second].r = tmp[i + 1].second;
  }
  calc(root);
  cin >> k;
  for(int i = 0; i < k; i++)
  {
    cin >> key;
    to[0] = find(key);
    printf("%.9lf\n", (double) dp[to[0]].first / dp[to[0]].second);
  }
  return 0;
}
