#include<algorithm>
#include<cstdio>
using namespace std;
#define ll long long

const int N=200005;
const ll INF=1e15+9;
ll st[4*N],lazy[4*N],m,n,d[N];

void propagate(int p){
	//if(lazy[p]==INF)return;
	lazy[2*p]+=lazy[p];
	lazy[2*p+1]+=lazy[p];
	st[2*p]+=lazy[p];
	st[2*p+1]+=lazy[p];
	lazy[p]=0;
}

void build(int p, int l, int r){
	if(l==r)st[p]=d[l];
	else{
		build(2*p,l,(l+r)/2);
		build(2*p+1,(l+r)/2 + 1,r);
		st[p]=min(st[2*p],st[2*p+1]);
	}
}

void update(int p, int l, int r, int a, int b, ll val){
	if(l>b||r<a)return;
	else if(l>=a&&r<=b)st[p]+=val,lazy[p]+=val;
	else {
		propagate(p);
		update(2*p,l,(l+r)/2,a,b,val);
		update(2*p+1,(l+r)/2 +1,r,a,b,val);
		st[p]=min(st[2*p],st[2*p+1]);
	}
}

ll rmq(int p, int l, int r, int a, int b){
	if(l>b||r<a)return INF;
	else if(l>=a&&r<=b)return st[p];
	else{
		propagate(p);
		return lazy[p]+min(rmq(2*p,l,(l+r)/2,a,b),rmq(2*p+1,(l+r)/2+1,r,a,b));
	}
}

int main(){
	scanf("%I64d",&n);
	for(int i=0; i<n; i++)scanf("%I64d",&d[i]);
	build(1,0,n-1);
	scanf("%I64d",&m);
	for(int i=0; i<m; i++){
		int u,v,w; char c;
		scanf("%I64d %I64d%c",&u,&v,&c);
		if(c==' '){
			scanf("%I64d",&w);
			if(u<=v)update(1,0,n-1,u,v,w);
			else{
				update(1,0,n-1,u,n-1,w);
				update(1,0,n-1,0,v,w);
			}
		}else{
			if(u<=v)printf("%I64d\n",rmq(1,0,n-1,u,v));
			else printf("%I64d\n",min(rmq(1,0,n-1,u,n-1),rmq(1,0,n-1,0,v)));
		}
	}
	return 0;
}