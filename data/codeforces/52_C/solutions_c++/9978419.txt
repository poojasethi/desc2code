#include <bits/stdc++.h>
#define INF 1000000000000000000
using namespace std;

int n, num, m, l, r, v;
char ch;
long long tree[800005], todo[800005];

void tree_update(int node, int left, int right, int val, int p, int q){
	if(left > q || right < p) return;
	if(left >= p && right <= q){
		tree[node] += val;
		todo[node] += val;
		return;
	}
	int mid = (left + right) / 2;
	tree_update(2 * node, left, mid, val, p, q);
	tree_update(2 * node + 1, mid + 1, right, val, p, q);
	tree[node] = todo[node] + min( tree[2 * node], tree[2 * node + 1]);
}

long long query(int node, int left, int right, int p, int q){
	if(left > q || right < p) return INF;
	if(left >= p && right <= q) return tree[node];
	int mid = (left + right) / 2;
	return todo[node] + min(query(2 * node, left, mid, p, q) , query(2 * node + 1, mid + 1, right, p, q));
}


int main(){
	scanf("%d", &n);
	for(int i = 0 ; i < n ; i++){
		scanf("%d", &num);
		tree_update(1, 1, n, num, i + 1, i + 1);
	}
	scanf("%d", &m);
	while(m--){
		scanf("%d%d%c", &l, &r, &ch);
		if(l <= r){
			if(ch == ' '){
				scanf("%d", &v);
				tree_update(1, 1, n, v, l + 1, r + 1);
			}else{
				printf("%I64d\n", query(1, 1, n, l + 1, r + 1));
			}
		}else{
			if(ch == ' '){
				scanf("%d", &v);
				tree_update(1, 1, n, v, l + 1, n);
				tree_update(1, 1, n, v, 1 , r + 1);
			}else{
				printf("%I64d\n", min(query(1, 1, n, l + 1, n), query(1, 1, n, 1 , r + 1)));
			}
		}
	}
}
 			    	 		  		 	  		 	 					