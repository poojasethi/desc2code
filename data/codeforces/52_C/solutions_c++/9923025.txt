#include <algorithm>
#include <sstream>
#include <vector>
#include <cstddef>
#include <cstdio>

#define INF 1e18;
long tree[200010 * 4];
long diff[200010 * 4];

using namespace std;

void _inc(int i, int tl, int tr, int l, int r, long x)
{
	if (r < tl || l > tr)
		return;

	if (l <= tl && tr <= r) {
		diff[i] += x;
		tree[i] += x;
	} else {
		int m = (tl + tr) / 2;
		_inc(2 * i, tl, m, l, r, x);
		_inc(2 * i + 1, m + 1, tr, l, r, x);
		tree[i] = min(tree[2 * i], tree[2 * i + 1]) + diff[i];
	}
}

long _rmq(int i, int tl, int tr, int l, int r)
{
	if (r < tl || l > tr)
		return INF;

	if (l <= tl && tr <= r) {
		return tree[i];
	} else {
		int m = (tl + tr) / 2;
		return min(_rmq(2 * i, tl, m, l, r),
				_rmq(2 * i + 1, m + 1, tr, l, r)) + diff[i];
	}
}

int main()
{
	int n;
	scanf("%d", &n);

	long x;
	for (int i = 0; i != n; ++i) {
		scanf("%ld", &x);
		_inc(1, 1, n, i + 1, i + 1, x);
	}

	int m;
	scanf("%d", &m);

	char c;
	int l, r;
	for (int i = 0; i != m; ++i) {
		scanf("%d %d%c", &l, &r, &c);
		++l;
		++r;
		if (c != '\n') {
			scanf("%ld", &x);
			if (l > r) {
				_inc(1, 1, n, 1, r, x);
				_inc(1, 1, n, l, n, x);
			} else {
				_inc(1, 1, n, l, r, x);
			}
		} else {
			if (l > r)
				printf("%ld\n", min(_rmq(1, 1, n, 1, r), _rmq(1, 1, n, l, n)));
			else
				printf("%ld\n", _rmq(1, 1, n, l, r));
		}
	}

	return 0;
}
