#include<stdio.h>
#include<algorithm>
#include<iostream>
using namespace std;

int Q,N,arr[200002],f;
long long tree[1000002],TA[1000002];

long long query(int ind,int s,int e,int S,int E,long long sum)
{
	if(s>e || s>E || e<S)return 1e18;
	if(s>=S && e<=E)return tree[ind]+sum;
	
	if(TA[ind])sum+=TA[ind];
	
	return min(query(ind*2,s,(s+e)/2,S,E,sum),query(ind*2+1,(s+e)/2+1,e,S,E,sum));
}

void update(int ind,int s,int e,int S,int E,int val)
{
	if(s>e || s>E || e<S)return;
	if(s>=S && e<=E)
	{
		TA[ind]+=val;
		if(!f)tree[ind]=val;
		else tree[ind]+=val;
		return;
	}
	update(ind*2,s,(s+e)/2,S,E,val);
	update(ind*2+1,(s+e)/2+1,e,S,E,val);
	
	tree[ind]=min(tree[ind*2],tree[ind*2+1])+TA[ind];
}

int main()
{
	f=0;
	for(int i=0;i<1000002;i++)tree[i]=1e18;
	
	scanf("%d",&N);
	
	for(int i=0;i<N;i++)
	{
		scanf("%d",&arr[i]);
		update(1,0,N-1,i,i,arr[i]);
	}
	
	f=1;
	
	scanf("%d",&Q);
	
	while(Q--)
	{
		int A,B,val;
		char C;
		scanf("%d %d%c",&A,&B,&C);
		
		if(C==' ')
		{
			scanf("%d\n",&val);
			if(A<=B)update(1,0,N-1,A,B,val);
			else
			{
				update(1,0,N-1,A,N-1,val);
				update(1,0,N-1,0,B,val);
			}
		}
		else
		{
			if(A<=B)cout << query(1,0,N-1,A,B,0) << endl;
			else cout << min(query(1,0,N-1,A,N-1,0),query(1,0,N-1,0,B,0)) << endl;
		}
	}
	
}
