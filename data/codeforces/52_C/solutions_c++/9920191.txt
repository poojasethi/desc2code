#include <bits/stdc++.h>

#define MAX 200010
#define INF 1e18

using namespace std;

typedef long long ll;

ll tree[4 * MAX], lazy[4 * MAX];

void update(int idx, int l, int r, int i, int j, ll v){
    if(j < l || i > r)
        return;

    if(i <= l && r <= j){
        tree[idx] += v;
        lazy[idx] += v;
    }else{
        int mid = (l + r) / 2;

        update(2 * idx, l, mid, i, j, v); update(2 * idx + 1, mid + 1, r, i, j, v);

        tree[idx] = min(tree[2 * idx], tree[2 * idx + 1]) + lazy[idx];
    }
}

ll query(int idx, int l, int r, int i, int j){
    if(j < l || i > r)
        return INF;

    if(i <= l && r <= j){
        return tree[idx];
    }else{
        int mid = (l + r) / 2;
        return min(query(2 * idx, l, mid, i, j),
                   query(2 * idx + 1, mid + 1, r, i, j)) + lazy[idx];
    }
}

int main(){

    int n, q, l, r;
    char aux;
    ll v;

    cin >> n;

    for(int i = 1; i <= n; i++){
        cin >> v;
        update(1, 1, n, i, i, v);
    }

    cin >> q;

    while(q--){

        scanf("%d %d%c", &l, &r, &aux);
        l++; r++;
        if(aux == '\n'){
            if(l > r){
                cout << min(query(1, 1, n, l, n), query(1, 1, n, 1, r)) << "\n";
            }else{
                cout << query(1, 1, n, l, r) << "\n";
            }
        }else{
            cin >> v;
            if(l > r){
                update(1, 1, n, l, n, v); update(1, 1, n, 1, r, v);
            }else{
                update(1, 1, n, l, r, v);
            }
        }
    }

    return 0;
}
