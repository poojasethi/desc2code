#include <stdio.h>

typedef long long LL;

LL min(LL a, LL b) {
	if (a < b) {
		return a;
	}
	
	return b;
}


LL delta[500000], mini[500000];

int offset;

inline void updateVal(int x) {
	while (true) {
		x >>= 1;
		if (x == 0) {
			break;
		}
		mini[x] = min(mini[2 * x] + delta[2 * x], mini[2 * x + 1] + delta[2 * x + 1]);
	}
}

void inc(int a, int b, LL d) {
	for (a += offset, b += offset; a <= b; a = (a + 1) >> 1, b = (b - 1) >> 1) {
		if (a & 1) {
			delta[a] += d;
			updateVal(a);
		}
		if ((b & 1) == 0) {
			delta[b] += d;
			updateVal(b);
		}
	}
}

inline LL realVal(int x) {
	LL r = mini[x];
	for (; x > 0; x >>= 1) {
		r += delta[x];
	}
	return r;
}

LL RMQ(int a, int b) {
	LL r = 1LL << 62;
	
	for (a += offset, b += offset; a <= b; a = (a + 1) >> 1, b = (b - 1) >> 1) {
		r = min(r, min(realVal(a), realVal(b)));
	}
	
	return r;
}

int main() {
	int n;
	scanf("%d", &n);
	offset = n;
	for (int i = 0; i < n; i++) {
		LL t;
		scanf("%I64d", &t);
		inc(i, i, t);
	}
	
	
	int m;
	scanf("%d", &m);
	for (int i = 0; i < m; i++) {
		int a, b, d;
		char c;
		scanf("%d%d%c", &a, &b, &c);
		if (a <= b) {
			if (c == ' ') {
				scanf("%d", &d);
				inc(a, b, d);
			} else {
				printf("%I64d\n", RMQ(a, b));
			}
		} else {
			if (c == ' ') {
				scanf("%d", &d);
				inc(0, b, d);
				inc(a, n - 1, d);
			} else {
				printf("%I64d\n", min(RMQ(0, b), RMQ(a, n - 1)));
			}
		}
		
	}
	return 0;
}
