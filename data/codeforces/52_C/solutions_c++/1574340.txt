#include<cstdio>
#include<sstream>
#include<iostream>
#include<algorithm>
using namespace std;
#define N 200001 * 3

char st[30];
int tree[N], add[N];
int n, m, x, a, b, c;
void upd(int id, int l, int r, int a, int b, int x)
{
	if (b < l || a > r) return;
	if (a <= l && r <= b)
	{
		tree[id] += x;
		add[id] += x;
		return;
	}
	int m = (l + r) >> 1;
	upd(id << 1, l, m, a, b, x);
	upd((id << 1) + 1, m + 1, r, a, b, x);
	tree[id] = min(tree[id << 1], tree[(id << 1) + 1]) + add[id];
}

int find(int id, int l, int r, int a, int b)
{
	if (b < l || a > r) return 1 << 30;
	if (a <= l && r <= b) return tree[id];
	int m = (l + r) >> 1;
	return min(find(id << 1, l, m, a, b), find((id << 1) + 1, m + 1, r, a, b)) + add[id];
}

int main()
{
	cin>> n;
	for (int i = 0; i < n; i++)
	{
		scanf("%d", &x);
		upd(1, 1, n, i + 1, i + 1, x);
	}
	scanf("%d\n", &m);
	while (m--)
	{
		gets(st);
		stringstream in(st);
		in>> a>> b, ++a, ++b;
		if (in>> c)
		{
			if (a <= b)
				upd(1, 1, n, a, b, c);
			else
				upd(1, 1, n, a, n, c),
				upd(1, 1, n, 1, b, c);
		}
		else
		{
			if (a <= b)
				printf("%d\n", find(1, 1, n, a, b));
			else
				printf("%d\n", min(find(1, 1, n, a, n), find(1, 1, n, 1, b)));
		}
	}
}
