#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <complex>
#include <set>
#include <map>
#include <sstream>
#include <queue>
#include <stack>

using namespace std;

//////////////////////////////////////
typedef long long i64;
typedef complex<double> pnt;
typedef pair<int, int> pii;
typedef vector<int> vi;
//////////////////////////////////////
const int oo = 1 << 20;
const double PI = M_PI;
const double EPS = 1e-15;
//////////////////////////////////////
#define F first
#define S second
#define foreach(i, u) \
        for (typeof(u.begin()) i = u.begin(); i != u.end(); i++)
#define REP(i, n) \
        for (int i = 0; i < (n); i++)
#define FOR(i, n) \
        for (int i = 1; i <= (n); i++)
//////////////////////////////////////
#define DEBUG(x) \
        cout << #x << " = " << x << endl

const int
    MaxN = 10005;

int N;
int a[MaxN];
int d[MaxN];
int prev[MaxN];
int best[MaxN];
int next[MaxN];
int dp[MaxN];

int main()
{
    cin.sync_with_stdio(false);

    cin >> N;
    for (int i = 0; i < N; ++i)
        cin >> d[i];

    i64 ans = 0;
    for (int k = 0; k < N; ++k)
    {
        a[0] = -oo;
        for (int i = 0; i < N; ++i)
            a[i + 1] = (i + 1) - d[(k + i) % N];

        //////////////////////////////////////////
        for (int i = 1; i <= N; i++)
        {
            prev[i] = i-1;
            while (a[ prev[i] ] >= a[i])
                prev[i] = prev[ prev[i] ];
        }
        //////////////////////////////////////////

        next[N] = N;
        dp[N] = 0;
        for (int i = N - 1; i > 0; i--)
        {
            next[i] = next[i+1];
            if (a[ next[i] ] > i)
                next[i] = prev[ next[i] ];
            dp[i] = dp[next[i]] + 1;
        }

        ans = ans + dp[1];
    }

    cout << ans << endl;

    return 0;
}
