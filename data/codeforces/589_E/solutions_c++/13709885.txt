#include <cstdio>
#include <iostream>
#include <cstring>
#include <cstdlib>
#define rep(i,n) for(int i=0;i<n;i++)
using namespace std;

const int MAX_N = 50000 + 10;

int*mp[MAX_N];
int n,m;

typedef long long int64;

int64 calc1(){
    int64 ans=0;
    static int*nmp[MAX_N];
    rep(i,m) nmp[i]=new int[n];
    rep(r,n) rep(c,m) nmp[c][r] = mp[r][c];

    rep(c1,m){
        static int sum[MAX_N],minv[MAX_N];
        memset(sum,0,sizeof(int)*n);
        memset(minv,0,sizeof(int)*n);
        for(int c2=c1;c2<m;++c2){
            rep(i,n) sum[i]+=nmp[c2][i],minv[i]=min(minv[i],sum[i]);
            int cur=0;
            rep(i,n){
                if(sum[i]==0&&minv[i]>=0)
                    ++cur;
                else
                    cur=0;
                ans += cur;
            }
        }
    }
    
    return ans;
}

struct Row{
    int*nxt,*sum;
    
    void init(int*arr,int m){
        sum = new int[m+2];
        nxt = new int[m+2];
        sum[0] = 0;
        rep(i,m)
            sum[i+1] = sum[i] + arr[i];
            
        static int stk[MAX_N];
        int top=0;
        sum[m+1]=-MAX_N-10;
        stk[top++]=m+1;
        
        for(int i=m;i>=0;--i){
            while(sum[i]<=sum[stk[top-1]])
                --top;
            nxt[i] = stk[top-1];
            stk[top++]=i;
        }
    }
};

Row rows[MAX_N];

void dosort(int*p,int*q,int*rk,int n){
    //[-n,n]
    static int cnt[MAX_N*2];
    memset(cnt,0,sizeof(int)*(2*n+2));
    
    rep(i,n) cnt[q[i]+n]++;
    rep(i,n*2) cnt[i+1]+=cnt[i];
    
    static int ord[MAX_N];
    for(int i=n-1;i>=0;--i)
        ord[--cnt[q[p[i]]+n]]=p[i];
    rep(i,n) p[i]=ord[i];
    
    static int nrk[MAX_N];
    int num=0;
    
    rep(i,n) if(!i || (rk[p[i]]>rk[p[i-1]] || q[p[i]] > q[p[i-1]]))
        nrk[p[i]]=num++; else nrk[p[i]]=num-1;
    rep(i,n) rk[i]=nrk[i];
}

int64 calc2(){
    rep(r,n)
        rows[r].init(mp[r],m);
    
    int64 ans=0;
        
    //n<=1000
    rep(r1,n){
        static int p[MAX_N],rk[MAX_N],q[MAX_N],minnxt[MAX_N];
        rep(i,m+1) p[i]=i,rk[i]=0,minnxt[i]=m+1;
        
        for(int r2=r1;r2<n;++r2){
            rep(i,m+1) q[i]=rows[r2].sum[i];
            dosort(p,q,rk,m+1);
            
            rep(i,m+1) minnxt[i]=min(minnxt[i],rows[r2].nxt[i]);
            
            static int prev[MAX_N],tot[MAX_N];
            memset(prev,-1,sizeof(int)*(m+1));
            
            for(int i=m;i>=0;--i){
                if(prev[rk[i]]==-1||prev[rk[i]]>=minnxt[i])
                    prev[rk[i]]=i,tot[rk[i]]=1;
                else {
                    ans += tot[rk[i]];
                    ++tot[rk[i]];
                }
            }
        }
    }
    
    return ans;
}

int main(){
    cin>>n>>m;
    rep(i,n) mp[i] = new int[m+2];
    rep(i,n){
        scanf(" ");
        static char buf[MAX_N];
        scanf("%s",buf);
        rep(j,m)
            mp[i][j] = buf[j]=='('?1:-1;
    }
        
    if(n<=500){
        cout<<calc2()<<endl;
    } else {
        cout<<calc1()<<endl;
    }
    return 0;
}