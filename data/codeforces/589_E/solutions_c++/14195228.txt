#include <cstdio>
#include <cstring>
#include <algorithm>
#include <stack>
#include <vector>
#include <string>
using namespace std;

const int maxm = 5000;

char buf[1 << 20];
int n, m;
vector<string> t;
vector< vector<int> > mb;

void genmb() {
    mb.resize(n);
    for (int i = 0; i < n; ++i) {
        mb[i].assign(m, -1);
        stack<int> ob;
        for (int j = 0; j < m; ++j) {
            if (t[i][j] == '(') {
                ob.push(j);
            } else {
                if (ob.size()) {
                    int k = ob.top();
                    mb[i][k] = j;
                    mb[i][j] = k;
                    ob.pop();
                }
            }
        }
    }
}

long long mul[2][maxm + 10];

void solvenmm() {
    long long ans = 0;
    for (int lc = 1; lc < m; ++lc) {
        memset(mul, 0, sizeof(mul));
        int pr, cr;
        pr = 0; cr = 1;
        for (int i = 0; i < n; ++i) {
            memset(mul[cr], 0, sizeof(mul[cr]));
            int j = lc;
            while (j >= 0 && t[i][j] == ')') {
                int p = mb[i][j];
                if (p == -1) {
                    break;
                }
                mul[cr][p] = mul[pr][p] + 1;
                ans += mul[cr][p];
                j = p - 1;
            }
            swap(cr, pr);
        }
    }
    printf("%lld\n", ans);
}

struct elem {
    int pi, ni;
    int id;
    int tp;
    bool operator<(const elem &e) const {
        if (pi == e.pi) {
            return ni < e.ni;
        }
        return pi < e.pi;
    }
};

int col[50020], lc;
int ncol[50020], lnc;
int tp[50020];
int ntp[50020];
elem e[50020];
int le;

int cnt[50020];

long long count() {
    long long res = 0;
    memset(cnt, 0, sizeof(cnt));
    // printf("COUNTING!\n");
    for (int j = 0; j < m; ++j) {
        if (col[j] != -1 && tp[j]) {
            // printf("SAW OPEN %d %d\n", j, col[j]);
            ++cnt[col[j]];
        } else if (col[j] != -1 && !tp[j]) {
            // printf("SAW CLOSE %d %d\n", j, col[j]);
            res += cnt[col[j]];
        }
    }
    return res;
}

void solvennm() {
    long long ans = 0;
    for (int i = 0; i < n; ++i) {
        // generate first guy
        memset(col, -1, sizeof(col));
        lc = 0;
        for (int j = 0; j < m; ++j) {
            if (mb[i][j] != -1 && t[i][j] == '(') {
                if (j == 0 || col[j - 1] == -1 || t[i][j - 1] == '(') {
                    col[j] = lc++;
                } else {
                    col[j] = col[j - 1];
                }
                tp[j] = 1;
                col[mb[i][j]] = col[j];
                tp[mb[i][j]] = 0;
            }
        }
        ans += count();
        for (int k = i + 1; k < n; ++k) {
            memset(ncol, -1, sizeof(ncol));
            lnc = 0;
            for (int j = 0; j < m; ++j) {
                if (mb[k][j] != -1 && t[k][j] == '(') {
                    if (j == 0 || ncol[j - 1] == -1 || t[k][j - 1] == '(') {
                        ncol[j] = lnc++;
                    } else {
                        ncol[j] = ncol[j - 1];
                    }
                    ntp[j] = 1;
                    ncol[mb[k][j]] = ncol[j];
                    ntp[mb[k][j]] = 0;
                }
            }
            le = 0;
            for (int j = 0; j < m; ++j) {
                if (col[j] != -1 && ncol[j] != -1 && tp[j] == ntp[j]) {
                    e[le].pi = col[j];
                    e[le].ni = ncol[j];
                    e[le].tp = tp[j];
                    e[le].id = j;
                    ++le;
                }
            }
            sort(e, e + le);
            memset(col, -1, sizeof(col));
            for (int j = 0; j < le;) {
                int ne = j;
                while (ne < le && e[ne].pi == e[j].pi && e[ne].ni == e[j].ni) {
                    col[e[ne].id] = j;
                    ++ne;
                }
                j = ne;
            }
            ans += count();
        }
    }
    printf("%lld\n", ans);
}

int main() {
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; ++i) {
        scanf("%s", buf);
        t.push_back(buf);
    }
    genmb();
    if (m <= maxm) {
        solvenmm();
    } else {
        solvennm();
    }
    return 0;
}
