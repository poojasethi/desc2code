from collections import defaultdict
ri = lambda: map(int, raw_input().split())
edges = [[] for _ in xrange(200001)]

def dfs(n, k0, k1, k2):
    path = [k0, k1, k2]
    l = 3
    while l < n:
        dk = next((i for i in edges[k1] if i != k0 and i in edges[k2]), None)
        if dk is None: return None
        path.append(dk)
        k0,k1,k2 = k1,k2,dk
        l += 1

    return path if len(set(path)) == n else None
 
def main():
    n = input() 
    for i in xrange(n*2):
        a,b = ri()
        edges[a].append(b)
        edges[b].append(a)

    for i in xrange(1,n+1):
        if len(edges[i]) < 4:
            print -1
            return 

    if n <= 5:
        print ' '.join(map(str, range(1, n + 1)))
        return

    for k1 in edges[1]:
        for k2 in edges[1]:
            if k1 != k2:
                path = dfs(n,1,k1,k2)
                if path:
                    print " ".join(map(str, path))
                    return
    print "-1"

main()