//By momo
#include <set>
#include <cstdio>
#include <vector>
#include <algorithm>

#define N 100010
#define PB push_back

using namespace std;

set<int> C[N];
vector<int> G[N];
int n, per[N], cnt, vst[N];

bool dfs(int a, int b, int f){
	per[cnt++] = b;
	if(cnt == n+1) return b == 1;
	for(int i = 0; i < 4; i++){
		int u = G[b][i];
		if(C[a].count(u) && u != f){
			if(cnt != n && u == 1) continue;
			return dfs(b, u, a);
		}
	}
	return 0;
}

int main (){
	scanf("%d", &n);
	for(int i = 0; i < 2*n; i++){
		int a, b; scanf("%d%d", &a, &b);
		G[a].PB(b); G[b].PB(a);
		C[a].insert(b); C[b].insert(a);
	}
	for(int i = 1; i <= n; i++)
		if((int)G[i].size() != 4) return puts("-1"), 0;
	for(int i = 0; i < 4; i++){
		int u = G[1][i];
		for(int j = 0; j < 4; j++){
			per[0] = cnt = 1, per[1] = u;
			if(dfs(1, u, G[u][j])){
				bool fl = 0;
				for(int k = 0; k < n; k++){
					if(vst[per[k]]) fl = 1;
					vst[per[k]] = 1;
				}
				if(fl) continue;
				for(int k = 0; k < n; k++)
					printf("%d%c", per[k], k == n-1?'\n':' ');
				return 0;
			}
		}
	}
	puts("-1");
}
