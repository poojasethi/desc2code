#include <bits/stdc++.h>

using namespace std;

#define MAX 100005

vector<int> graph[MAX];
int deg[MAX], ans[MAX], n;
bool visited[MAX];

bool connected(int y, int num){
    for(int i=0 ; i<4 ; i++)
        if(graph[y][i] == num)
            return true;
    return false;
}

void print(){
    for(int i=1 ; i<=n ; i++)
        cout<<ans[i]<<" ";
    exit(0);
}

void dfs(int v, int x){
    visited[v] = true;
    if(x == n){
        print();
    }
    int num;

    for(int i=0 ; i<4 ; i++){
        num = graph[v][i];
        if(!visited[num] && connected(ans[x-1], num)){
            ans[x+1] = num;
            dfs(num, x+1);
        }
    }
    visited[v] = false;
}

int main(){
    cin>>n;

    for(int i=0 ; i<2*n ; i++){
        int u, v;
        cin>>u>>v;
        graph[u].push_back(v);
        graph[v].push_back(u);
        deg[u]++, deg[v]++;
    }

    for(int i=1 ; i<=n ; i++){
        if(deg[i] != 4){
            cout<<-1<<endl;
            return 0;
        }
    }

    visited[1] = true;
    ans[1] = 1;
    for(int i=0 ; i<4 ; i++){
        int num = graph[1][i];
        ans[2] = num;
        dfs(num, 2);
    }

    cout<<-1<<endl;

    return 0;
}