#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
const int maxn = 100000 + 5;
int n, m;
int ans[maxn];
bool used[maxn];
bool exist = false;
vector<int> e[maxn];
bool dfs(int u, int v, int depth) {
	if (depth == n)
		return true;
	if (used[v])
		return false;
	used[v] = true;
	ans[depth] = v;
	if (u == -1) {
		for (int i = 0; i < e[v].size(); i++)
			if (dfs(v, e[v][i], depth + 1))
				return true;
	}
	else {		
		for (int i = 0; i < e[v].size(); i++) {
			bool f1 = false, f2 = false;
			int t = e[v][i];
			for (int j = 0; j < e[t].size(); j++) {
				if (e[t][j] == u)
					f1 = true;
			}
			if (f1) {
				if (dfs(v, t, depth + 1))
					return true;
			}
		}
	}
	used[v] = false;
	return false;
}
int main() {
	//freopen("test.in", "r", stdin);
	//freopen("test.out", "w", stdout);
	scanf("%d", &n);
	m = n << 1;
	for (int i = 0; i < m; i++) {
		int u, v;
		scanf("%d %d", &u, &v);
		e[u].push_back(v);
		e[v].push_back(u);
	}
	bool flag = true;
	for (int i = 1; i <= n; i++)
		if (e[i].size() != 4) {
			flag = false;
			break;
		}
	if (flag) {
		memset(used, false, sizeof(used));
		exist = dfs(-1, 1, 0);
	}
	if (exist) {
		for (int i = 0; i < n; i++)
			printf("%d ", ans[i]);
	}
	else
		printf("-1");
	return 0;
}
 		 		 	  		    			    	 	  	