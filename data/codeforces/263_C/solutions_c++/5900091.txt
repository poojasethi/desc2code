#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<algorithm>
#include<utility>
#include<vector>
#include<queue>
#include<set>
#include<map>
using namespace std;

int n;
vector<int> g[100010];
int ans[100010];
bool f,visit[100010],c;

void dfs(int d,int p,int z)
{
	ans[d]=p;
	visit[p]=1;
	if (d==n-1) f=true;
	for (int i=0;i<4;i++)
	if (!visit[g[p][i]])
	{
		c=false;
		for (int j=0;j<4;j++)
		if (g[z][j]==g[p][i])
		{
			c=true; break;
		}
		if (c==true) dfs(d+1,g[p][i],p);
	}
}

int main()
{
	scanf("%d",&n);
	for(int i=1;i<=2*n;i++)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		g[a].push_back(b);
		g[b].push_back(a);
	}
	for(int i=1;i<=n;i++)
	if(g[i].size()!=4){printf("-1\n");return 0;}
	for(int i=0;i<4;i++)
	{
		for(int j=i+1;j<4;j++)
		{
			f=false;
			memset(ans,0,sizeof(ans));
			memset(visit,false,sizeof(visit));
			ans[1]=1;visit[1]=true;
			ans[2]=g[1][i];visit[ans[2]]=true;
			ans[n]=g[1][j];visit[ans[n]]=true;
			dfs(2,ans[2],1);
			if (f)
			{
				for (int j=1;j<=n;j++) printf("%d ",ans[j]);
				return 0; 
			}
		}
	}
	printf("-1\n");
	return 0;
}
