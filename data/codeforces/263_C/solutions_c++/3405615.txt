#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <climits>
#include <functional>
#include <cmath>
#include <queue>
#include <map>
using namespace std;
int n;
bool vis[100005];
vector<int> ans,edge[100005];
bool check(int x,int y){
	for(int i=0;i<edge[x].size();++i){
		if(edge[x][i]==y) return true;
	}
	return false;
}
bool dfs(int x){
	vis[x]=true;
	ans.push_back(x);
	if(ans.size()==n){
		if(!check(ans[ans.size()-1],ans[0])||
			!check(ans[ans.size()-2],ans[0])||
			!check(ans[ans.size()-1],ans[1])) return false;
		for(int i=0;i<ans.size();++i){
			printf("%d ",ans[i]);
		}
		printf("\n");
		return true;
	}
	for(int i=0;i<edge[x].size();++i){
		int y=edge[x][i];
		if(!vis[y]){
			if(ans.size()>=2&&!check(y,ans[ans.size()-2])) continue;
			if(dfs(y)) return true;
		}
	}
	ans.pop_back();
	vis[x]=false;
	return false;
}
int main(void){
	//freopen("test.in","r",stdin);
	cin>>n;
	int a,b;
	for(int i=0;i<2*n;++i){
		cin>>a>>b;
		edge[a].push_back(b);
		edge[b].push_back(a);
	}
	for(int i=1;i<=n;++i){
		if(edge[i].size()!=4){
			printf("-1\n");
			return 0;
		}
	}
	if(!dfs(1)){
		printf("-1\n");
	}
	return 0;
}