#include <cstdio>
#include <cstring>
#include <iostream>

using namespace std;

const int MaxN = 100010;

typedef long long LL;

#define NUM(p) ((p)-pool)
struct Node{
	int len;
	LL cnt1,cnt2;
	Node *nxt[26],*fa;
}pool[MaxN * 2],*TAIL=pool+1,*tail=pool,*op=pool,*q[MaxN * 2];
int n,d[MaxN * 2];
char st[MaxN];

void extend(int c,int len){
	Node *p=tail,*np=tail=TAIL++;np->len=len;
	for(;p && !p->nxt[c];p=p->fa) p->nxt[c]=np;
	if(!p) np->fa=op;
	else{
		if(p->nxt[c]->len==p->len+1) np->fa=p->nxt[c];
		else{
			Node *q=p->nxt[c],*r=TAIL++;
			*r=*q;np->fa=q->fa=r;r->len=p->len+1;
			for(;p && p->nxt[c]==q;p=p->fa) p->nxt[c]=r;
		}
	}
}

int main()
{
	int l,r;LL ans=0;
	scanf("%s",st+1);n=strlen(st+1);
	for(int i=1;i<=n;i++) extend(st[i]-'a',i);
	for(Node *p=pool;p<TAIL;p++)
		for(int i=0;i<26;i++) if(p->nxt[i])
			d[NUM(p->nxt[i])]++;
	op->cnt1=1;
	for(q[l=r=0]=op;l<=r;l++){
		Node *p=q[l];
		for(int i=0;i<26;i++) if(p->nxt[i])
			p->nxt[i]->cnt1+=p->cnt1,(!(--d[NUM(p->nxt[i])]) ? q[++r]=p->nxt[i] : 0);
	}
	for(Node *p=tail;p;p=p->fa) p->cnt2=1;
	for(;r;r--){
		Node *p=q[r];
		for(int i=0;i<26;i++) if(p->nxt[i])	p->cnt2+=p->nxt[i]->cnt2;
		ans+=p->cnt1*p->cnt2*(p->cnt2+1)/2;
	}
	cout << ans << endl;
	return 0;
}
