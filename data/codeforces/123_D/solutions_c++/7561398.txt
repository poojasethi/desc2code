#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int MAX = 100005;
vector<pair<int, int> > edge[MAX];
int r[20][MAX], par[MAX], size[MAX];
int lcp(int i, int j)
{
	int ans = 0;
	for (int k = 19; k >= 0; k--)
		if (r[k][i] == r[k][j])
		{
			i += (1 << k);
			j += (1 << k);
			ans |= (1 << k);
		}
	return ans;
}
int find(int v)
{
	return (par[v] == v ? v : par[v] = find(par[v]));
}
bool merge(int u, int v)
{
	u = find(u);
	v = find(v);
	if (u == v)
		return false;
	par[u] = v;
	size[v] += size[u];
	return true;
}
int main()
{
	ios::sync_with_stdio(false);
	for (int i = 0; i < MAX; i++)
		par[i] = i, size[i] = 1;
	string s;
	cin >> s;
	int n = s.length();
	for (int i = 0; i < n; i++)
		r[0][i] = s[i];
	vector<pair<pair<int, int>, int> > v;
	for (int i = 1; i < 20; i++)
	{
		v.clear();
		for (int j = 0; j < n; j++)
			v.push_back(make_pair(make_pair(r[i - 1][j], (j + (1 << (i - 1)) < n ? r[i - 1][j + (1 << (i - 1))] : -1)), j));
		sort(v.begin(), v.end());
		for (int j = 0; j < n; j++)
			r[i][v[j].second] = (j && v[j - 1].first == v[j].first ? r[i][v[j - 1].second] : j + 1);
	}
	vector<pair<int, int> > suf;
	for (int i = 0; i < n; i++)
		suf.push_back(make_pair(r[19][i], i));
	sort(suf.begin(), suf.end());
	for (int i = 0; i < suf.size() - 1; i++)
		edge[lcp(suf[i].second, suf[i + 1].second)].push_back(make_pair(suf[i].second, suf[i + 1].second));
	long long ans = 0, res = 1;
	for (int i = n - 1; i >= 0; i--)
	{
		for (int j = 0; j < edge[i].size(); j++)
		{
			int u = edge[i][j].first, v = edge[i][j].second;
			long long su = size[find(u)], sv = size[find(v)];
			if (merge(u, v))
				res += (su + sv) * (su + sv + 1) / 2 - su * (su + 1) / 2 - sv * (sv + 1) / 2;
		}
		ans += res;
	}
	cout << ans << endl;
	return 0;
}
