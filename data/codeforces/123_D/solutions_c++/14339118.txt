#include<cstdio>
#include<algorithm>
#include<set>
#include<cstring>
#include<iostream>
using namespace std;
#define ull unsigned long long
#define M 200007


const char road[1000]="C:\\data\\";
char roadnum[1000]="";
char roadin[1000]="";
char roadout[1000]="";


void writeIntoFile(char num[]){
    strcpy(roadnum,num);
	strcpy(roadin,road);
	strcat(roadin,roadnum);
	strcat(roadin,".");
	strcpy(roadout,roadin);
	strcat(roadin,"in");
	strcat(roadout,"out_b");
	//puts(roadin);
	//puts(roadout);
	freopen(roadin,"r",stdin);
	freopen(roadout,"w",stdout);
}
/*
void solve();
void solveM(){
    char ch[50];
    for(int i=1;i<=30;i++){

        sprintf(ch,"%d",i);
        writeIntoFile(ch);
        solve();
        //return ;
    }
}
*/
int son[M][26], cnt[M], len[M], fail[M];
int t, tail;

void init()
{
	memset( son, 0, sizeof(son) );
	t = tail = 0;
	fail[0] = -1;
}
void add( int x )
{
	int p = tail, np = ++t;
	tail = np;
	len[np] = len[p] + 1, cnt[np] = 1;
	while( p != -1 && !son[p][x] ) son[p][x] = np, p = fail[p];
	if( p == -1 ) fail[np] = 0;
	else{
		int q = son[p][x];
		if( len[p] + 1 == len[q] ) fail[np] = q;
		else{
			int nq = ++t;
			len[nq] = len[p] + 1; cnt[nq] = 0;
			memcpy( son[nq], son[q], sizeof(son[q]) );
			fail[nq] = fail[q];
			fail[np] = fail[q] = nq;
			while( p != -1 && son[p][x] == q ) son[p][x] = nq, p = fail[p];
		}
	}
}
char str[M];
bool cmp( int x, int y )
{
	return len[x] > len[y];
}
int b[M];
int main()
{
	scanf( "%s", str );
	init();
	for( int i = 0; str[i]; i++ ) add( str[i] - 'a' );
	for( int i = 0; i <= t; ++i ) b[i] = i;
	sort( b, b+t+1, cmp );
	int p;
	long long ans = 0;
	for( int i = 0; i <= t; ++i ){
		p = b[i];
		if( fail[p] >= 0 ){
			cnt[fail[p]] += cnt[p];
			ans += ( 0LL +  len[p] - len[fail[p]] ) * ( cnt[p] + 1 ) * cnt[p] / 2;
		}
	}
	cout<<ans<<endl;
}

	 	  	   	 	 	 	 	 		  			 		