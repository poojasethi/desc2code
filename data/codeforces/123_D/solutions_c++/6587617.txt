//In the name of God
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
typedef pair<int, int> pii;
const int N = 1e5 + 5, lg = 18;

int n, r[lg][N], par[N], size[N];
long long ans;
string s;
vector<pii> mer;
vector<int> suf;

int lcps(int a, int b) {
	int res = 0;
	for (int i = lg - 1; i >= 0; i--)
		if (r[i][a] == r[i][b]) {
			res += 1 << i;
			a += 1 << i;
			b += 1 << i;
		}
	return res;
}
void suffix_array() {
	for (int i = 0; i < n; i++)
		r[0][i] = s[i];
	vector<pair<pii, int> > v(n);
	for (int i = 1; i < lg; i++) {
		for (int j = 0; j < n; j++)
			v[j] = make_pair(pii(r[i - 1][j], j + (1 << i - 1) < n? r[i - 1][j + (1 << i - 1)]: -1), j);
		sort(v.begin(), v.end());
		for (int j = 0; j < n; j++)
			r[i][v[j].second] = (j && v[j - 1].first == v[j].first? r[i][v[j - 1].second]: j + 1);
	}
	for (int i = 0; i < n; i++)
		suf.push_back(v[i].second);
	for (int i = 0; i < n - 1; i++)
		mer.push_back(pii(lcps(v[i].second, v[i + 1].second), i));
	sort(mer.begin(), mer.end(), greater<pii>());
}
int find_par(int v) { return v == par[v]? v: par[v] = find_par(par[v]); }
int main() {
	ios_base::sync_with_stdio(false);
	cin >> s; n = s.size();
	suffix_array();
	for (int i = 0; i < n; i++)
		par[i] = i, size[i] = 1;
	for (int i = 0; i < n - 1; i++) {
		int u = find_par(mer[i].second), v = mer[i].second + 1;
		ans += 1ll * size[u] * size[v] * mer[i].first;
		par[v] = u, size[u] += size[v];
	}
	cout << ans + 1ll * n * (n + 1) / 2 << '\n';
	return 0;
}
