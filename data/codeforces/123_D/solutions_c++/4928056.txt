#include <cstdio>
#include <cstring>
#include <algorithm>
const int N = 100010;
int sa[N],X[N],Y[N],b[N],a[N],h[N],r[N];
bool comp(int *r,int a,int b,int le)
{
	return r[a] == r[b] && r[a+le] == r[b+le];
}
void Sort(int *Rank,int *Id,int n,int m)
{
	std::fill(b,b+m,0);
	for(int i = 0; i < n; i++) b[Rank[Id[i]]]++;
	for(int i = 1; i < m; i++) b[i] += b[i-1];
	for(int i = n-1; i >= 0; i--) sa[--b[Rank[Id[i]]]] = Id[i];
}
void calh(int n)
{
	for(int i = 1; i <= n; i++) r[sa[i]] = i;
	int height = 0;
	for(int i = 0; i < n; i++)
	{
		if(height) height--;
		int j = sa[r[i]-1];
		while(a[j+height]==a[i+height]) height++;
		h[r[i]] = height;
	}
}
void suffix(int n,int m=500)
{
	int *Rank = X, *Id = Y, p = 1;
	for(int i = 0; i < n; i++) Rank[i] = a[i], Id[i] = i;
	Sort(Rank,Id,n,m);
	for(int j = 1; p < n; j <<= 1)
	{
		p = 0;
		for(int i = n-j; i < n; i++) Id[p++] = i;
		for(int i = 0; i < n; i++) if(sa[i] >= j) Id[p++] = sa[i] - j;
		Sort(Rank,Id,n,p);
		std::swap(Rank,Id);
		Rank[sa[0]] = 0, p = 1;
		for(int i = 1; i < n; i++)
			Rank[sa[i]] = comp(Id,sa[i-1],sa[i],j) ? p-1 : p++;
		m = p;
	}
	calh(n-1);
}
char s[N];
int top,val[N],len[N];
long long rec[N];
int main()
{
	scanf("%s",s);
	int n = strlen(s);
	for(int i = 0; i < n; i++) a[i] = s[i]; a[n] = 0;
	suffix(n+1);
	long long ans = 1LL*n*(n+1)/2;
	top = 0;
	val[top] = -1;
	rec[top] = 0;
	len[top++] = 0;
	for(int i = 2; i <= n; i++)
	{
		int tot = 1;
		while(val[top-1] >= h[i]) tot += len[--top];
		len[top] = tot;
		val[top] = h[i];
		rec[top] = rec[top-1] + (long long)tot*h[i];
		ans += rec[top];
		top++;
	}
	printf("%I64d\n",ans);
	return 0;
}