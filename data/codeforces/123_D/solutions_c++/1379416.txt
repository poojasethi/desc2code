#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<iostream>
using namespace std;
#define maxn 100005
typedef __int64 ll;
int wa[maxn],wb[maxn],wv[maxn],WS[maxn];
int cmp(int *r,int a,int b,int l)
{return r[a]==r[b]&&r[a+l]==r[b+l];}
void da(int *r,int *sa,int n,int m)
{
     int i,j,p,*x=wa,*y=wb,*t;
     for(i=0;i<m;i++) WS[i]=0;
     for(i=0;i<n;i++) WS[x[i]=r[i]]++;
     for(i=1;i<m;i++) WS[i]+=WS[i-1];
     for(i=n-1;i>=0;i--) sa[--WS[x[i]]]=i;
     for(j=1,p=1;p<n;j*=2,m=p)
     {
       for(p=0,i=n-j;i<n;i++) y[p++]=i;
       for(i=0;i<n;i++) if(sa[i]>=j) y[p++]=sa[i]-j;
       for(i=0;i<n;i++) wv[i]=x[y[i]];
       for(i=0;i<m;i++) WS[i]=0;
       for(i=0;i<n;i++) WS[wv[i]]++;
       for(i=1;i<m;i++) WS[i]+=WS[i-1];
       for(i=n-1;i>=0;i--) sa[--WS[wv[i]]]=y[i];
       for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1;i<n;i++)
       x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
     }
     return;
}
int rank[maxn],height[maxn];
void calheight(int *r,int *sa,int n)
{
     int i,j,k=0;
     for(i=1;i<=n;i++) rank[sa[i]]=i;
     for(i=0;i<n;height[rank[i++]]=k)
     for(k?k--:0,j=sa[rank[i]-1];r[i+k]==r[j+k];k++);
     return;
}
int arr[maxn],SA[maxn];
char str[maxn];
int stack[maxn];
ll f(ll x)
{
	return x*(x+1)/2;
}
int main()
{
    int n,i,k,j;
	scanf("%s",str);
	n=strlen(str);
	for(i=0;i<n;i++)arr[i]=str[i];
	arr[n]=0;
	da(arr,SA,n+1,500);
	calheight(arr,SA,n);
	stack[0]=n+1;
	k=1;
	ll r=0;
	for(i=n;i>0;i--)
	{
		j=n-SA[i];
		while(k&&height[stack[k-1]]>=height[i])
		{
			r+=f(stack[k-1]-i)*(j-height[stack[k-1]]);
			j=height[stack[k-1]];
			k--;
		}
		if(k)
		{
			r+=f(stack[k-1]-i)*(j-height[i]);
		}
		stack[k++]=i;
	}
	printf("%I64d\n",r);
	return 0;
}