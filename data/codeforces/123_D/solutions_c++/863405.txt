#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>

using namespace std;

const int maxn = 100050;
long long pw_base = 1000000007;
char str[maxn];
int len, sa[maxn], lcp[maxn], h[maxn], w[maxn];
long long pw[maxn], hash[maxn], f[maxn];

int b_cmp(int i, int j) {
	if (i == j)
		return 0;
	int l = 0, r = min(len - i + 1, len - j + 1), mid, ret;
	while (l < r) {
		mid = (l + r + 1) >> 1;
		if (hash[i + mid - 1] - hash[i - 1] * pw[mid] == 
				hash[j + mid - 1] - hash[j - 1] * pw[mid]) 
			l = mid;
		else
			r = mid - 1;
	}
	ret = r + 1;
	if (r + i - 1 == len) 
		ret = -ret;
	else if (r + j - 1 < len && str[i + r] < str[j + r])
		ret = -ret;
	return ret;
}

bool cmp(int i, int j) {
	return b_cmp(i, j) < 0;
}

int main() {
	cin >> str + 1;
	len = strlen(str + 1);
	pw[0] = 1;
	for (int i = 1; i <= len; i++)
		pw[i] = pw[i - 1] * pw_base;
	hash[0] = 0;
	for (int i = 1; i <= len; i++)
		hash[i] = hash[i - 1] * pw_base + str[i];
	for (int i = 1; i <= len; i++)
		sa[i] = i;
	sort(sa + 1, sa + len + 1, cmp);
	for (int i = 1; i < len; i++)
		lcp[i] = abs(b_cmp(sa[i], sa[i + 1])) - 1;
	h[0] = -1;
	w[0] = 0;
	f[0] = 0;
	long long res = (long long) len * (len + 1) / 2;
	for (int i = 1, e = 0; i < len; i++) {
		int tmp = 1;
		while (h[e] >= lcp[i]) tmp += w[e--];
		e++;
		h[e] = lcp[i];
		w[e] = tmp;
		f[e] = f[e - 1] + (long long) tmp * h[e];
		res += f[e];
	}
	cout << res;
}
