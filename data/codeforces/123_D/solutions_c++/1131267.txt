#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

struct state
{
    int link;
    long long count, len;
    map <char, int> next;
};

const int max_size = 111111;
state st[max_size * 2 + 1], help[max_size * 2 + 1];
int last, sz;

bool comp(int i, int j) {
    return st[i].len > st[j].len;
}

void sa_build()
{
    last = sz = 0;
    st[sz++].link = -1;
}

void sa_extend (char c)
{
	int cur = sz++;
	st[cur].len = st[last].len + 1;
	st[cur].count = 1;
	int p;
	for (p = last; p != -1 && !st[p].next.count(c); p = st[p].link)
		st[p].next[c] = cur;
	if (p == -1)
		st[cur].link = 0;
	else
	{
		int q = st[p].next[c];
		if (st[p].len + 1 == st[q].len)
			st[cur].link = q;
		else
		{
			int clone = sz++;
			st[clone].len = st[p].len + 1;
			st[clone].next = st[q].next;
			st[clone].link = st[q].link;
			st[q].link = clone;
			st[cur].link = clone;
			for (; p != -1 && st[p].next[c] == q; p = st[p].link)
				st[p].next[c] = clone;
		}
	}
	last = cur;
}

int main()
{
    string s;
    cin >> s;
    sa_build();
    for (int i = 0; i < s.length(); i++)
        sa_extend(s[i]);

    vector <int > x(sz);
    for (int i = 0; i < sz; i++)
        x[i] = i;
    sort(x.begin(), x.end(), comp);
    long long res = 0;
    for (int j = 0; j < sz; j++)
    {
        int i = x[j];
        st[st[i].link].count += st[i].count;
        if (st[i].len != 0)
            res += st[i].count * (st[i].count + 1) * (st[i].len - st[st[i].link].len) / 2;
    }
    cout << res << endl;
}




