#include <iostream>
#include <cstring>

using namespace std;

typedef long long LL;

const int MaxN = 100010;

struct Node{
	int len,d;
	LL f[2];
	Node *ch[26],*fa;
}pool[MaxN*2],*tail=pool,*op=pool,*ed=pool,*q[MaxN*2];
LL ans;
int n,l,r;
char s[MaxN];

void extend(int c,int len){
	Node *p=ed,*np=ed=++tail;np->len=len;
	for(;p && !p->ch[c];p=p->fa) p->ch[c]=np;
	if(!p) np->fa=op;
	else{
		if(p->ch[c]->len==p->len+1) np->fa=p->ch[c];
		else{
			Node *q=p->ch[c],*r=++tail;*r=*q;
			r->len=p->len+1;np->fa=q->fa=r;
			for(;p && p->ch[c]==q;p=p->fa) p->ch[c]=r;
		}
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin>>s;n=strlen(s);
	for(int i=0;i<n;i++) extend(s[i]-'a',i+1);
	for(Node *p=pool;p<=tail;p++)
		for(int i=0;i<26;i++) if(p->ch[i]) p->ch[i]->d++;
	op->f[0]=1;
	for(q[l=r=0]=op;l<=r;l++)
		for(int i=0;i<26;i++) if(q[l]->ch[i])
			q[l]->ch[i]->f[0]+=q[l]->f[0],(!--q[l]->ch[i]->d ? q[++r]=q[l]->ch[i] : 0);
	for(Node *p=ed;p;p=p->fa) p->f[1]=1;
	for(;r;r--){
		for(int i=0;i<26;i++) if(q[r]->ch[i]) q[r]->f[1]+=q[r]->ch[i]->f[1];
		ans+=q[r]->f[0]*q[r]->f[1]*(q[r]->f[1]+1)/2;
	}
	cout<<ans<<endl;
	return 0;
}
