#include<bits/stdc++.h>
using namespace std;

const int N=200100;
struct State{
    State *pre,*go[26];
    int step,val,tot;
    void clear(){
        pre=0;step=val=tot=0;
        memset(go,0,sizeof(go));
    }
}*root,*last;

State statePool[N],*b[N],*cur;
int c[N];

void init(){
    cur=statePool;
    root=last=cur++;
    root->clear();
}

void extend(int w){
    State *p=last,*np=cur++;
    np->clear();
    np->step=p->step+1;
    np->tot=1;
    while(p&&!p->go[w]){
        p->go[w]=np;
        p=p->pre;
    }
    if(0==p){
        np->pre=root;
    }
    else{
        State *q=p->go[w];
        if(p->step+1==q->step){
            np->pre=q;
        }
        else{
            State *nq=cur++;
            nq->clear();
            memcpy(nq->go,q->go,sizeof(q->go));
            nq->step=p->step+1;
            nq->pre=q->pre;
            q->pre=nq;
            np->pre=nq;
            while(p&&p->go[w]==q){
                p->go[w]=nq;
                p=p->pre;
            }
        }
    }
    last=np;
}

char s[N];
int main(){
    init();
    scanf("%s",s);
    int len=strlen(s);
    for(int i=0;s[i];i++){
        extend(s[i]-'a');
    }
    long long ret=0;
    for(State *p=statePool;p<cur;p++){
        c[p->step]++;
    }
    for(int i=1;i<=len;i++){
        c[i]+=c[i-1];
    }
    for(State *p=cur-1;p>=statePool;p--){
        b[--c[p->step]]=p;
    }
    for(int i=cur-statePool-1;i;i--){
        State *p=b[i];
        p->val=p->step-p->pre->step;
        ret+=1LL*p->tot*(p->tot+1)/2*p->val;
        p->pre->tot+=p->tot;
        //cout<<b[i]-statePool<<" "<<p->tot<<" "<<p->val<<endl;
    }
    printf("%I64d\n",ret);
    return 0;
}

 		   					 	 	   		  				 	 	