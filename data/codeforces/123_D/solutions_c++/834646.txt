#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;
typedef long long ll;
#define LEN 100010
struct node{
  int go[26],link,len,term;
  ll sum,ans;
  bool used;
  node(){
   memset(go,-1,sizeof go);
   used=false;
   link=-1; sum=ans=len=term=0;
        }
};
node A[2*LEN+1];
int sz=1, last=0;
void add(char w){
  w-='a';
  int npos=sz++ ,p,q;
  A[npos].len=A[last].len+1;
  for(p=last;p!=-1 && A[p].go[w]==-1;p=A[p].link)A[p].go[w]=npos;
  if(p==-1)A[npos].link=0;
  else{
   q=A[p].go[w];
   if(A[p].len+1==A[q].len)A[npos].link=q;
   else{
    int clone=sz++;
    A[clone].len=A[p].len+1; A[clone].link=A[q].link;
    memcpy(A[clone].go , A[q].go , sizeof(A[q].go));
    for(;p!=-1 && A[p].go[w]==q;p=A[p].link)A[p].go[w]=clone;
    A[q].link=A[npos].link=clone;
       }
      }
  last=npos;
}
void doit(int vr){
  if(A[vr].used)return;
  A[vr].used=true;
  A[vr].sum=A[vr].term;
  for(int i=0;i<26;++i){
   if(A[vr].go[i]==-1)continue;
   doit(A[vr].go[i]);
   A[vr].sum+=A[A[vr].go[i]].sum;
   A[vr].ans+=A[A[vr].go[i]].ans;
                       }
  if(vr)A[vr].ans+= (A[vr].sum)*(A[vr].sum+1)/2;
}
char V[LEN]; int n;
int main(){
  scanf("%s",&V); n=strlen(V);
  for(int i=0;i<n;++i)add(V[i]);
  for(int p=last;p!=-1;p=A[p].link)A[p].term=1;
  doit(0);
  cout<<A[0].ans<<'\n';
  return 0;
}
