#include <algorithm>
#include <iostream>
using namespace std;
typedef long long ll;
typedef pair <int,int> pii;
#define Size(x) (int)(x).size()
#define X first
#define Y second
#define mp(x,y) make_pair(x,y)

const int N = 1000 * 100 + 5, INF = 1000 * 1000;
string s;
pii q[N];
int sa[N], pos[N], lcp[N], S, gap;

bool cmp(int x, int y) {
	if(pos[x] != pos[y])
		return pos[x] < pos[y];
	x += gap, y += gap;
	return (x < S && y < S)? pos[x] < pos[y]: x > y;
}

void buildSA() {
	int tmp[N] = {0};
	S = Size(s);
	for(int i = 0;i < S;++i)
		pos[i] = s[i], sa[i] = i;
	for(gap = 1;;gap <<= 1) {
		sort(sa, sa + S, cmp);
		for(int i = 1;i < S;++i)
			tmp[i] = tmp[i - 1] + cmp(sa[i - 1], sa[i]);
		for(int i = 0;i < S;++i)
			pos[sa[i]] = tmp[i];
		if(tmp[S - 1] == S - 1)
			break;
	}
}

void buildLCP() {
	for(int i = 0, k = 0;i < S;++i, --k)
		if(pos[i] != S - 1) {
			if(k < 0) k = 0;
			while(s[sa[pos[i] + 1]+ k] == s[i + k])
				++k;
			lcp[pos[i]] = k;
			q[pos[i]] = mp(k, pos[i]);
		}
}
///

ll par[N], tmp;

int fp(int x) {
	return par[x] < 0? x: par[x] = fp(par[x]);
}

void add(int x) {
	int y = x + 1;
	x = fp(x), y = fp(y);
	tmp += par[x] * par[y];
	par[x] += par[y];
	par[y] = x;
}

int main() {
	ios::sync_with_stdio(false);
	cin >> s;
	buildSA();
	buildLCP();
	///
	sort(q, q + S - 1);
	fill(par, par + N, -1);
	tmp = 0;
	ll ans = 0;
	int p = S - 2;
	for(int i = S;i > 0;--i) {
		while(p >= 0 && q[p].X >= i)
			add(q[p--].Y);
		ans += tmp;
	}
	ans += ((ll)S * (S + 1)) / 2;
	cout << ans << endl;
	return 0;
}
