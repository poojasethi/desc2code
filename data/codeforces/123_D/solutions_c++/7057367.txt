#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;
typedef unsigned long long ll;
int n,m,i,j,k,x,y,z,cot;
ll ans = 0;
char s[100001];
const int maxn = 200001;
struct Node{
	Node *ch[26],*par;
	int val,cnt;//cnt 该状态代表字串出现次数
	Node(int _val):
		par(0),val(_val),cnt(0){
		memset(ch,0,sizeof ch);
	}
};

Node *State[maxn];
Node *last,*root;

void extend(int w){
	Node *p = last,*np = new Node(p->val + 1);State[cot++] = np;
	np->cnt = 1;
	while (p && !p->ch[w]) p->ch[w] = np,p = p->par;
	if (!p) np->par = root;
	else {
		Node *q = p->ch[w];
		if (p->val + 1 == q->val){
			np->par = q;
		} else {
			Node *nq = new Node(0);State[cot++] = nq;
			nq->cnt = 0;
			memcpy(nq->ch,q->ch,sizeof q->ch);
			nq->val = p->val + 1;
			nq->par = q->par;
			q->par = nq;
			np->par = nq;
			while (p && p->ch[w] == q)
				p->ch[w] = nq,p = p->par;
		}
	}
	last = np;
}

bool cmp(Node *a,Node *b){
	return a->val > b->val;
}

int main()
{
    last = new Node(0);
    last->cnt = 1;
    root = last;
    State[cot++] = last;
	scanf("%s",s + 1);
	n = strlen(s + 1);
	for (i = 1; i <= n; i++) extend(s[i] - 'a');
	sort(State,State + cot,cmp);
	for (i = 0; i < cot; i++){
		Node *p = State[i];
		if (p->par){
			p->par->cnt += p->cnt;
			ans += (0LL + p->val - p->par->val) * (p->cnt + 1) * p->cnt / 2;
		}
	}
	cout<<ans;
	return 0;
}
