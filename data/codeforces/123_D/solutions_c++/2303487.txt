#include<algorithm>
#include<cstdio>
#include<cstring>
#include<vector>
using namespace std;
int cao;
struct node
{
    node *f,*next[26];
    int len;
    int id;
    node(){}
    node(int x)
    {
        f=0;
        id=1;
        len=x;
        memset(next,0,sizeof(next));
    }
}v[500005];
node *now;
node *root;

node* newnode(int x)
{
    v[cao]=node(x);
    return &v[cao++];
}

void init()
{
    cao=0;
    root=now=newnode(0);
}
void gao(int x)
{
    node *p=now;
    node *np=newnode(p->len+1);
    while(p&&p->next[x]==0)
    {
        p->next[x]=np;
        p=p->f;
    }

    if(p==0)
        np->f=root;
    else
    {
        node *q=p->next[x];
        if(q->len==p->len+1)
        np->f=q;
        else
        {
            node *nq=newnode(p->len+1);
            nq->f=q->f;
            q->f=nq;
            np->f=nq;
            nq->id=0;
            memcpy(nq->next,q->next,sizeof(q->next));
            while(p&&p->next[x]==q)
            {
                p->next[x]=nq;
                p=p->f;
            }

        }
    }
    now=np;
}


vector<int>so[500005];
char ch[100005];
long long a[500005];
long long sum;
void dfs(int x)
{
    a[x]+=v[x].id;
    for(int i=0;i<so[x].size();i++)
    {
        int y=so[x][i];
        dfs(y);
        a[x]+=a[y];
        sum+=(v[y].len-v[x].len)*a[y]*(a[y]+1)/2;
    }
}


int main()
{
    scanf("%s",ch);
    int l=strlen(ch);
    init();
    for(int i=0;i<l;i++)
    gao(ch[i]-'a');
    for(int i=1;i<cao;i++)
    so[v[i].f-v].push_back(i);
    sum=0;
    dfs(0);
    printf("%I64d\n",sum);
    return 0;
}
