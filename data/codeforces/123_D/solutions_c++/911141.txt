#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long LL;
const int MaxN = 100010;
int ax[MaxN],sa[MaxN],yo[2][MaxN],Cnt[MaxN],Rank[MaxN],h[MaxN];
bool cmpSa(int *r, int i, int j, int len)
{
	return r[i]==r[j] && r[i+len]==r[j+len];
}
void DA(int *sa, int *r, int n, int m)
{
	int *x=yo[0], *y=yo[1], i,p,len;

	for(int i = 0; i < m; i++)Cnt[i] = 0;
	for(int i = 0; i < n; i++)Cnt[x[i]=r[i]]++;
	for(int i = 1; i < m; i++)Cnt[i] += Cnt[i-1];
	for(int i = n-1; i>=0; i--)
		sa[--Cnt[x[i]]] = i;

	for(len=1,p=0; p<n; m=p,len*=2)
	{
		for(i=n-len,p=0; i<n; i++)y[p++] = i;
		for(i=0; i < n; i++)
			if(sa[i] >= len)
				y[p++] = sa[i]-len;

		for(i = 0; i < m; i++)Cnt[i]=0;
		for(i = 0; i < n; i++)Cnt[x[y[i]]]++;
		for(i = 1; i < m; i++)Cnt[i] += Cnt[i-1];
		for(i = n-1; i >= 0; i--)
			sa[--Cnt[x[y[i]]]] = y[i];
		for(swap(x,y),x[sa[0]]=0,p=i=1; i<n; i++)
			x[sa[i]] = cmpSa(y,sa[i],sa[i-1],len)?(p-1):(p++);
	}
}

void calH(int *sa, int *r, int n)
{
	int j;
	for(int i = 0; i < n; i++)Rank[sa[i]] = i;
	for(int i = 0, k = 0; i < n; h[Rank[i]]=k, i++)
	{
		if(Rank[i]==0)continue;
		for((k?k--:k),j=sa[Rank[i]-1]; r[i+k]==r[j+k]; k++)
			;
	}
}
char s[MaxN];
int q[MaxN];
int main()
{
	int n;
	scanf("%s",s);
	n = strlen(s);
	for(int i = 0; i < n; i++)
		ax[i] = s[i];
	ax[n++] = 0;
	DA(sa,ax,n,300);
	calH(sa,ax,n);
	int top=0;
	LL ret = 0, sum = 0;
	for(int i = 1; i < n; i++)
	{
		int x = 1;
		while(top>0 && q[top-1]>=h[i])
		{
			x+=Cnt[--top];
			sum-=Cnt[top]*q[top];
		}
		sum += (LL)h[i]*x;
//		printf("%d %d\n",h[i],x);
		q[top] = h[i];
		Cnt[top++] = x;
		ret += sum+n-1-sa[i];
	}
	printf("%I64d\n",ret);
	return 0;
}
