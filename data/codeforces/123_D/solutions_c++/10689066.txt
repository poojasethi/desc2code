#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
using namespace std;
#define rep(i, l, r) for (int i = l; i <= r; i++)
#define drep(i, r, l) for (int i = r; i >= l; i--)
typedef long long ll;
const int N = 1e5 + 8;
int n;
char s[N];
ll ans;
struct SAM
{
    int rt, last, tot, go[N << 1][26], fa[N << 1], cnt[N << 1], sz[N << 1], len[N << 1], rk[N << 1];
    SAM(){rt = tot = last = 1;}
    void expand(int w)
    {
        int p = last, np = ++tot; last = np; sz[np]++;
        len[np] = len[p] + 1;
        while (p && !go[p][w]) go[p][w] = np, p = fa[p];
        if (!p) {fa[np] = rt; return;}
        int q = go[p][w];
        if (len[q] == len[p] + 1) fa[np] = q;
        else
        {
            int nq = ++tot; len[nq] = len[p] + 1;
            fa[nq] = fa[q]; fa[q] = nq; fa[np] = nq;
            memcpy(go[nq], go[q], sizeof(go[q]));
            while (p && go[p][w] == q) go[p][w] = nq, p = fa[p];
        }
    }
    void solve()
    {
        rep(i, 1, tot) cnt[len[i]]++;
        rep(i, 1, n) cnt[i] += cnt[i - 1];
        rep(i, 1, tot) rk[cnt[len[i]]--] = i;
        drep(i, tot, 1)
        {
            int u = rk[i]; 
            sz[fa[u]] += sz[u];
        }
        rep(i, 1, tot)
        {
            ans += (ll)sz[i] * (sz[i] + 1) / 2 * (len[i] - len[fa[i]]);
        }
    }
}sam;
int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
#endif
    scanf("%s", s + 1);
    n = strlen(s + 1);
    rep(i, 1, n) sam.expand(s[i] - 'a');
    sam.solve();
    cout << ans << endl;
#ifndef ONLINE_JUDGE
    fclose(stdin); fclose(stdout);
#endif
    return 0;
}