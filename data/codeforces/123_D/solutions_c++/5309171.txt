#include <cstdio>
#include <iostream>
#include <cstring>
using namespace std;
#define REP(i,n) for(int i=0;i<n;i++)
#define FOR(i,l,r) for(int i=l;i<=r;i++)
#define DWN(i,r,l) for(int i=r;i>=l;i--)

#define N 100010
typedef long long ll;

struct node
{
    node *parent, *next, *go[26];
    int len, sum;
};
node mem[N*2], *head[N], *root, *last, *cur;
node *new_node(int len  = 0)
{
    memset(cur->go, 0, sizeof cur->go);
    cur->len = len;
    cur->sum  =0;
    cur->next = head[len];
    head[len] = cur;
    return cur++;
}
void init()
{
    memset(head, 0, sizeof head);
    cur = mem;
    last = root = new_node();
}
void extend(int w )
{
    node *p = last;
    node *np = new_node(p->len + 1);
    np->sum = 1;
    while( p && !p->go[w])
    {
        p->go[w] = np;
        p = p->parent;
    }
    if(!p)
        np->parent = root;
    else
    {
        node *q = p->go[w];
        if(p->len + 1==q->len)
            np->parent = q;
        else
        {
            node *nq = new_node(p->len + 1);
            memcpy(nq->go, q->go, sizeof q->go);
            nq->parent = q->parent;
            q->parent = nq;
            np->parent = nq;
            while( p && p->go[w] == q)
            {
                p->go[w] = nq;
                p = p->parent;
            }
        }
    }
    last = np;
}
char s[N];
int main()
{
    while(scanf("%s", s)!=EOF)
    {
        int len = strlen(s);
        init();
        for(char *c = s;*c;c++)
            extend(*c - 'a');
        ll ans = 0;
        DWN(i,len,1)
        {
            node *p = head[i];
            for(;p;p=p->next)
            {
                ans += (ll)(p->len - p->parent->len) * (ll)p->sum * (p->sum+1)/2;
                p->parent->sum += p->sum;
            }
        }
        cout<<ans<<endl;
    }
    return 0;
}
