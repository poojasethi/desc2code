#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstring>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;

#define rep(i,l,r) for (int i=(l); i<=(r); i++)
#define repd(i,r,l) for (int i=(r); i>=(l); i--)
#define rept(i,c) for (typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)

#ifndef ONLINE_JUDGE
#define debug(x) { cerr<<#x<<" = "<<(x)<<endl; }
#else
#define debug(x) {}
#endif

#define maxn 500010

int t[maxn], prev[maxn], lg2[maxn];
int p[maxn][21];
int f[maxn][21];
int r[maxn];

int getmin(int x, int y)
{
	if (t[x]==t[y]) return min(x,y);
	if (t[x]<t[y]) return x; else return y;
}

int query(int l, int r)
{
	int k=lg2[r-l+1];
	return getmin(f[l][k],f[r-(1<<k)+1][k]);
}

void lemon()
{
	lg2[1]=0; rep(i,2,maxn-1) lg2[i]=lg2[i>>1]+1;
	int n; scanf("%d",&n);
	rep(i,1,n) scanf("%d",&r[i]);
	rep(i,n+1,2*n) r[i]=r[i-n];
	memset(t,0,sizeof t);
	rep(i,1,2*n) t[i]=max(i-r[i],1);
	rep(i,1,2*n) f[i][0]=i;
	rep(k,1,20) rep(i,1,2*n-(1<<k)+1) f[i][k]=getmin(f[i][k-1],f[i+(1<<(k-1))][k-1]);
	rep(i,2,2*n) prev[i]=query(t[i],i-1);
	rep(i,2,2*n) p[i][0]=prev[i]; p[1][0]=1;
	rep(k,1,20) rep(i,1,2*n) p[i][k]=p[p[i][k-1]][k-1];
	LL final=0;
	rep(i,1,n)
	{
		int now=i+n-1, ans=0;
		repd(k,20,0)
			if (t[p[now][k]]>i)
			{
				now=p[now][k];
				ans+=1<<k;
			}
		ans+=2;
		if (t[i+n-1]<=i) ans=1;
		debug(ans);
		final+=ans;
	}
	cout<<final<<endl;
}

int main()
{
	ios::sync_with_stdio(true);
	#ifndef ONLINE_JUDGE
		freopen("207B.in","r",stdin);
	#endif
	lemon();
	return 0;
}