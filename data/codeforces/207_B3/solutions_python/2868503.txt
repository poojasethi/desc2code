#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <iostream>
using namespace std;

enum {MAXN = 250010 * 2,MAXK = 20};
int lbound[MAXN];
int pre[MAXN],deep[MAXN],anc[MAXN][MAXK];

int que[MAXN],pos[MAXN];

int Gans(int s,int t)
{
  int k;
  for(k = 0;(1 << k) <= deep[t];k++);
  int x = t;
  for(--k; k >= 0; --k)
    {
      if ((1 << k) <= deep[x] && lbound[anc[x][k]] > s) x = anc[x][k];
    }
  if (lbound[t] <= s) return 1;
  else return deep[t] - deep[x] + 2;
}

int main()
{
  int n;
  scanf("%d",&n);
  for(int i = 0;i < n;i++)
    {
      scanf("%d",&lbound[i]);
    }
  copy(lbound,lbound + n,lbound + n);
  for(int i = 0;i < n*2;i++) lbound[i] = max(0,i - lbound[i]);

  int r = 0;
  for(int i = 0;i < n*2;i++)
    {
      pre[i] = *lower_bound(pos,pos + r,lbound[i]);
      while(r > 0 && lbound[i] <= que[r-1]) --r;
      que[r] = lbound[i];
      pos[r] = i;
      ++r;
    }

  deep[0] = 0;
  for(int i = 1;i < n*2;i++)
    {
      deep[i] = deep[pre[i]] + 1;
      anc[i][0] = pre[i];
      for(int k = 1;(1 << k) <= deep[i];k++)
	anc[i][k] = anc[anc[i][k-1]][k-1];
    }

  long long ans = 0;
  for(int i = n;i < n*2;i++) ans += Gans(i - n + 1,i);

  cout << ans << endl;
  return 0;
}
