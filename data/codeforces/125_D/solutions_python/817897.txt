import sys
# infile = open(sys.argv[1], 'r')
infile = sys.stdin
def input():
	return infile.readline().rstrip()

n = int(input())
a = map(int, input().split())

def isAP(arr):
	n = len(arr)
	if n == 0:
		return False
	if n == 1:
		return True
	d = arr[1] - arr[0]
	for i in xrange(2, n):
		if arr[i] - arr[i-1] != d:
			return False
	return True

def test(a, a10, a20):
	n = len(a)
	a1 = a10[:]
	a2 = a20[:]
	# assume len(a1) = 2
	d1 = a1[1] - a1[0]
	i = 0
	while i < n:
		can1 = False
		can2 = False
		if a[i] - a1[-1] == d1:
			can1 = True
		if len(a2) < 2 or a[i] - a2[-1] == d2:
			can2 = True
		if can1 and can2:
			if len(a2) == 0:
				can2 = False
			elif len(a2) == 1:
				# if add to a2, a1 must die
				# if add to a1, a2 can live

				# try add to a1
				for j in xrange(i, n):
					if a[j] - a1[-1] ==  d1:
						a1.append(a[j])
					else:
						break
				else:
					return (a1, a2)
				can1 = False
				temp_a = a[j:]
				if isAP(a2+[a1[-1]]+temp_a):
					a2 = a2 + [a1.pop()] + temp_a
					return (a1, a2)
				# let can2 be true
				i = j
			else:
				# one in a1, a2 must die
				# len(a2) >= 2
				# try add to a1, then all following should be added to a1. That means a2 is "dead"
				if isAP(a1 + a[i:]):
					a1 = a1 + a[i:]
					return (a1, a2)
				# not success, try add to a2. Let a1 die
				if isAP(a2 + a[i:]):
					a2 = a2 + a[i:]
					return (a1, a2)
				return False
		if can1:
			a1.append(a[i])
		elif can2:
			a2.append(a[i])
			if len(a2) == 2:
				d2 = a2[-1] - a2[-2]
		else:
			return False
		# print a1
		# print a2
		i += 1

	return (a1, a2)

if isAP(a):
	print a[0]
	print ' '.join([str(i) for i in a[1:]])
else:
	# a candidate is (a_pos, a1, a2)
	candies = ((2, [a[0], a[1]], []),
			(3, [a[0], a[2]], [a[1]]),
			(3, [a[1], a[2]], [a[0]]))
	succ = False
	for a_pos, a1, a2 in candies:
		# print "Candidate------------------------------"
		res = test(a[a_pos:], a1, a2)
		if res:
			a1, a2 = res
			print ' '.join([str(i) for i in a1])
			print ' '.join([str(i) for i in a2])
			break
	else:
		print 'No solution'
