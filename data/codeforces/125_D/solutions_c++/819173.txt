//  ******** 
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <string>
#include <bitset>
#include <cmath>
#include <list>
#include <cstdlib>
#include <map>
#include <cstring>
#include <set>
#include <stack>
#include <sstream>
#include <queue>
#include <ctime>

using namespace std;

#define debug(x) cout<<#x<<" = "<<x<<"\n"
#define   REP(i,n) for((i)=0;(i)<(n);(i)++)
#define  INF (1<<29)
#define         pb push_back
#define    sz		size()
#define         mp make_pair
#define 	all(a) a.begin(),a.end()
#define fill(ar,val) memset(ar,val,sizeof ar)
#define       min(a,b) ((a)<(b)?(a):(b))
#define         max(a,b) ((a)>(b)?(a):(b))
#define FORE(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
int ar[30001], n;
vector<int> v1, v2;

int chek(multiset<int> &ds) {
	if(ds.empty()) return 1;
	multiset<int> ::iterator it1, it2;
	it1 = ds.begin();
	it2 = ds.end(); it2--;
	return *it1 == *it2;
}
int split(int a, int b)
{
	if(n == 2) {
		v1.pb(a); v2.pb(b); 
		return 1;
	}
	int i, j, d, nxt;
	multiset<int> ds;
	REP(i, n-1) {
		ds.insert(ar[i+1] - ar[i]);
	}
	d = b-a, nxt = a, j = -1;
	REP(i, n) {
		if(nxt == ar[i]) {
			v1.pb(ar[i]);
			if(i != n-1) ds.erase(ds.find(ar[i+1]-ar[i]));
			nxt += d;
			if(j != -1) ds.erase(ds.find(ar[i]-ar[j]));
			if(j != -1 && i != n-1) {
				ds.insert(ar[i+1]-ar[j]);
			}
			if(chek(ds)) {
				for(int k = i+1; k <n ;k++) v2.pb(ar[k]);
				return 1;
			}
		}
		else {
			v2.pb(ar[i]);
			j = i;
		}
	}
	v1.clear(); v2.clear();
	return 0;
}	

int main()
{
	int i;
	cin >> n;
	REP(i, n) cin >> ar[i];
	if(split(ar[0],ar[1]) || split(ar[0],ar[2]) || split(ar[1], ar[2])) {
		REP(i, v1.sz) cout << v1[i] << " "; cout << endl;
		REP(i, v2.sz) cout << v2[i] << " "; cout << endl;
	}
	else cout << "No solution\n";
	return 0;
}

