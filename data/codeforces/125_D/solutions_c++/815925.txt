#pragma comment(linker, "/STACK:33554432")

#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <string>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <ctime>
#include <memory.h>

using namespace std;

#define REP(i,n) for(int i=0;i<n;++i)
#define ABS(n) ((n)<0 ? -(n) : (n))
#define SQR(a) (a)*(a)
#define MIN(a,b) (a<b?a:b)
#define MAX(a,b) (a>b?a:b)
#define MP make_pair
#define PB push_back
#define FILL(a) memset(a,0,sizeof(a));
#define COPY(a,b) memcpy(a,b,sizeof (b));
#define SI(a) (int)((a).size())
#define ALL(a) (a).begin(),(a).end()
#define y1 yyyyy1
#define prev prevvvvv
#define LL long long
const double PI = 2*acos(0.0);
const double EPS = 1e-8;
const int INF = (1<<30)-1;

int n, a[30000];
int u[30000];
vector<int> b;

void quit(){
	REP(i,n) if (u[i]==0) printf ("%d ", a[i]);
	printf ("\n");
	REP(i,n) if (u[i]==1) printf ("%d ", a[i]);
	exit (0);
}

bool restprogr(){
	b.clear();
	REP(i,n) if (u[i]==0) b.PB(a[i]);
	if (SI(b)==0) return false;
	if (SI(b) < 3) return true;
	int diff = b[1]-b[0];
	for (int i = 2;  i < SI(b); ++i) if (b[i]-b[i-1] != diff) return false;
	return true;
}

void tryprogr (int c, int d){
	memset (u, 0, sizeof (u));
	int diff = d-c;
	int nxt = c;
	REP(i,n){
		if (a[i]==nxt){
			u[i] = 1;
			nxt += diff;
		}
	}
	if (restprogr()) quit();
	int i = 0;
	while (u[i]==0) ++i;
	u[i] = 0;
	if (restprogr()) quit();
	u[i] = 1;
	i = n-1;
	while (u[i]==0) --i;
	u[i] = 0;
	if (restprogr()) quit();
}

int main(){
	//freopen ("input.txt", "r", stdin);
	//freopen ("output.txt", "w", stdout);
	scanf ("%d", &n);
	REP(i,n) scanf ("%d", &a[i]);
	REP(i,2)
		for (int j = i+1; j < 3; ++j)
			tryprogr (a[i], a[j]);
	cout << "No solution";
	return 0;
};