#include<cstdio>
#include<vector>
#include<cassert>

std::vector<int> a, b;
std::vector<int> x;
std::vector<bool> ari; //ari[m] : x[m], x[m+1], ... , x[n-1] ari. prog.
int n;

bool a_good(int i) { return a.size() < 2 || x[i] + x[a[a.size()-2]] == 2 * x[a[a.size()-1]]; }
bool b_good(int i) { return b.size() < 2 || x[i] + x[b[b.size()-2]] == 2 * x[b[b.size()-1]]; }
bool check() {
	for(int i=a.size()+b.size();i<n;i++) {
		bool ag = a_good(i), bg = b_good(i);
//		printf("%d %d %d %d %d\n", i, ag, bg, a.size(), b.size()); 
		if(ag && bg) {
			if(i != n-1) {
				bg = (b.size() == 0 || x[i+1] - x[i] == x[i] - x[b[b.size()-1]]) && ari[i];
			}
		}
		if(bg)      b.push_back(i);
		else if(ag) a.push_back(i);
		else        return false;
	}
	return true;
}

bool test() {
	if(check()) {
		if(b.size() != 0) {
			for(std::vector<int>::iterator it=a.begin();it!=a.end();it++) {
				printf("%d ", x[*it]);
			}
			printf("\n");
			for(std::vector<int>::iterator it=b.begin();it!=b.end();it++) {
				printf("%d ", x[*it]);
			}
			printf("\n");
		} else {
			for(int i=0;i<n-1;i++) {
				printf("%d ", x[i]);
			}
			printf("\n%d\n", x[n-1]);
		}
		return true;
	} else {
		a = std::vector<int>();
		b = std::vector<int>();
		return false;
	}
}

int main() {
	scanf("%d", &n);
	ari = std::vector<bool>(n);
	for(int i=0;i<n;i++) {
		int t;
		scanf("%d", &t);
		x.push_back(t);
	}
	ari[n-1] = ari[n-2] = true;
	for(int i=n-3;i>=0;i--) {
		ari[i] = ari[i+1] && x[i] + x[i+2] == 2 * x[i+1];
	}
	a.push_back(0); a.push_back(1);                 if(test()) return 0;
	a.push_back(0); a.push_back(2); b.push_back(1); if(test()) return 0;
	a.push_back(1); a.push_back(2); b.push_back(0); if(test()) return 0;
	printf("No solution\n");
	return 0;
}
