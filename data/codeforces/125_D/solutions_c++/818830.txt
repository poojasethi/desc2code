//  ******** 
#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <string>
#include <bitset>
#include <cmath>
#include <list>
#include <cstdlib>
#include <map>
#include <cstring>
#include <set>
#include <stack>
#include <sstream>
#include <queue>
#include <ctime>

using namespace std;

#define debug(x) cout<<#x<<" = "<<x<<"\n"
#define   REP(i,n) for((i)=0;(i)<(n);(i)++)
#define  INF (1<<29)
#define         pb push_back
#define    sz		size()
#define         mp make_pair
#define 	all(a) a.begin(),a.end()
#define fill(ar,val) memset(ar,val,sizeof ar)
#define       min(a,b) ((a)<(b)?(a):(b))
#define         max(a,b) ((a)>(b)?(a):(b))
#define FORE(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
int ar[30001], n;
int X[30002];
vector<int> v1, v2;

void print()
{
	int i;
	REP(i, v1.sz) cout << v1[i] << " "; cout << endl;
	REP(i, v2.sz) cout << v2[i] << " "; cout << endl;
	exit(0);
}

bool chek()
{
	int i, d;
	v1.clear(); v2.clear();
	REP(i,n) if(X[i]) v1.pb(ar[i]); else v2.pb(ar[i]);
	if(v2.sz == 0) return false;
	if(v2.sz <= 2) return true;
	int next = v2[0];
	d = v2[1] - v2[0];
	REP(i, v2.sz) {
		if(v2[i] != next) return false;
		next += d;
	}
	return true;
}

void split(int a, int b)
{
	int d = b-a;
	int next = a;
	int i;
	fill(X,0);
	REP(i, n) if(next == ar[i]) X[i]=1, next += d; 
	if(chek()) print();
	i = n-1;
	while(X[i] == 0) i--; X[i] = 0;
	if(chek()) print();
}

int main()
{
	int i;
	scanf("%d",&n);
	REP(i,n) scanf("%d",&ar[i]);
	
	split(ar[0], ar[1]);
	split(ar[0], ar[2]);
	split(ar[1], ar[2]);
	printf("No solution\n");
	return 0;
}

