#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>

using namespace std;

#define pb push_back
const int MAXN=30010;

int n,a[MAXN];
multiset <int> hash;

bool test()
{
    if(hash.size()==0)return true;
    multiset <int>::iterator it1,it2;
    it1=hash.begin();
    it2=hash.end();
    it2--;
    return *it1 == *it2;
}
void init()
{
    scanf("%d",&n);
    for(int i=0;i<n;++i)
        scanf("%d",&a[i]);
}
bool check(int x,int y)
{
    vector <int> l,r;
    hash.clear();
    for(int i=1;i<n;++i)
        hash.insert(a[i]-a[i-1]);
    int dif=a[y]-a[x],tar=a[x];
    for(int i=0,j=-1;i<n;++i)
    {
        if(tar==a[i])
        {
            l.pb(a[i]);
            tar+=dif;
            if(j!=-1)hash.erase(hash.find(a[i]-a[j]));
            if(i!=n-1)hash.erase(hash.find(a[i+1]-a[i]));
            if(j!=-1 && i!=n-1)hash.insert(a[i+1]-a[j]);
            if(test())
            {
                for(int j=i+1;j<n;++j)
                    r.pb(a[j]);
                for(int j=0;j<(int)l.size();++j)printf("%d ",l[j]);printf("\n");
                for(int j=0;j<(int)r.size();++j)printf("%d ",r[j]);printf("\n");
                return 1;
            }
        }
        else
            r.pb(a[j=i]);
    }
    return 0;
}
void solve()
{
    if(n<=2)printf("%d\n%d\n",a[0],a[1]);
    else
    {
        if(!check(0,1) && !check(0,2) && !check(1,2)) puts("No solution");
    }
}
int main()
{
//    freopen("in.txt","r",stdin);
    init();
    solve();
    return 0;
}
