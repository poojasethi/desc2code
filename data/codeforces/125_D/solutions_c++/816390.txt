#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <set>
using namespace std;

int check(multiset<int> &ds) {
  if (ds.size() == 0)
    return 1;
  multiset<int>::iterator it;
  it = ds.begin();
  int dmin = *it;
  it = ds.end();
  it--;
  int dmax = *it;
  return dmin == dmax;
}

int solve(int a[], int n, int i0, int i1, int *s, int &sn, int *t, int &tn) {
  sn = tn = 0;

  if (n == 2) {
    s[sn++] = a[0];
    t[tn++] = a[1];
    return 1;
  }

  multiset<int> ds;
  for (int i = 0; i + 1 < n; i++)
    ds.insert(a[i + 1] - a[i]);

  int first = a[i0];
  int diff = a[i1] - a[i0];
  int target = first;
  for (int i = 0, j = -1; i < n; i++) {
    if (a[i] == target) {
      s[sn++] = a[i];
      target += diff;
      if (j != -1)
        ds.erase(ds.find(a[i] - a[j]));
      if (i != n - 1)
        ds.erase(ds.find(a[i + 1] - a[i]));
      if (j != -1 && i != n - 1)
        ds.insert(a[i + 1] - a[j]);
      if (check(ds)) {
        for (int k = i + 1; k < n; k++)
          t[tn++] = a[k];
        return 1;
      }
    } else {
      t[tn++] = a[j = i];
    }
  }
  return 0;
}

const int N = 30010;

int n;
int a[N];
int s[N], sn;
int t[N], tn;

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++)
    scanf("%d", &a[i]);
  if (solve(a, n, 0, 1, s, sn, t, tn) || solve(a, n, 0, 2, s, sn, t, tn) || solve(a, n, 1, 2, s, sn, t, tn)) {
    int flag, i;
    flag = 0;
    for (i = 0; i < sn; i++)
      printf("%s%d", ++flag > 1 ? " " : "", s[i]);
    puts("");
    flag = 0;
    for (i = 0; i < tn; i++)
      printf("%s%d", ++flag > 1 ? " " : "", t[i]);
    puts("");
  } else {
    puts("No solution");
  }
  return 0;
}
