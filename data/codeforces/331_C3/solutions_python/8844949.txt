#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<map>
using namespace std;
typedef long long LL;
typedef pair<LL, int> pp;
map<pp, pp> f;
pp solve(LL n, int mx)
{
	if(n == 0)
		return make_pair(0, 0);
	if(n < 10)
	{
		pp ans = make_pair(1, 0);
		if(n < mx)
			ans.second = n - mx;
		return ans;
	}
	pp now = make_pair(n, mx);
	if(f.find(now) != f.end())
		return f[now];
	LL t = 1;
	while(t <= n/10)
		t *= 10;
	pp ans = make_pair(0, 0);
	while(true)
	{
		int nx = mx;
		int d = n/t;
		if(d > nx)
			nx = d;
		pp x = solve(n % t, nx);
		ans.first += x.first;
		n -= n%t;
		if(x.second < 0)
			n += x.second;
		else
		{
			n -= nx;
			if(nx > 0)
				ans.first++;
		}
		if(d == 0)
			break;
	}
	ans.second = n;
	f[now] = ans;
	return ans;
}
int main()
{
	LL n;
	scanf("%I64d", &n);
	pp ans = solve(n, 0);
	printf("%I64d\n", ans.first);
	return 0;
}
