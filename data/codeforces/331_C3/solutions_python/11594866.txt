#include<map>
#include<cstdio>
#include<algorithm>
using namespace std;
map<pair<long long,long long>,pair<long long,long long> > M;
inline pair<long long,long long> dp(long long x,long long y)
{
     if(M[make_pair(x,y)].first)
          return M[make_pair(x,y)];
     if(x<(long long)10)
     {
          M[make_pair(x,y)]=make_pair(x||y,x-max(x,y));
          return M[make_pair(x,y)];
     }
     long long t=x/10,tmp=1;
     while(t!=0)
     {
          tmp*=10;
          t/=10;
     }
     long long v=max(y,x/tmp);
     pair<long long,long long> v1=dp(x%tmp,v);
	 pair<long long,long long> v2=dp(x-x%tmp+v1.second,y);
     M[make_pair(x,y)]=make_pair(v1.first+v2.first,v2.second);
	 return make_pair(v1.first+v2.first,v2.second); 
}
int main()
{
     long long n;
     scanf("%I64d",&n);
     printf("%I64d\n",dp(n,0).first);
     return 0;
}
