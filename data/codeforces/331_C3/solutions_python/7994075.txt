#include<iostream>
#include<map>
using namespace std;
typedef long long LL;
typedef pair<LL,int>PLi;
map<PLi,PLi>dp;
LL n;
PLi calc(LL now,int limit){
	if(now==0)return make_pair(0,0);
	PLi ans=make_pair(0,0);
	if(now<10){
		ans=make_pair(1,0);
		if(limit>now)ans=make_pair(1,now-limit);
		return ans;
	}
	PLi tmp=make_pair(now,limit);
	if(dp.find(tmp)!=dp.end())return dp[tmp];
	LL w=1;
	while(w<=now/10)w*=10;
	while(1){
		int digit=now/w,nexlimit=limit;
		if(digit>limit)nexlimit=digit;
		PLi ntmp=calc(now%w,nexlimit);
		ans.first+=ntmp.first;
		now-=now%w;
		if(ntmp.second)
			now+=ntmp.second;
		else{
			now-=nexlimit;
			if(nexlimit>0)ans.first++;
		}
		if(digit==0)break;
	}
	ans.second=now;
	dp[tmp]=ans;
	return ans;
}
int main(){
	cin>>n;
	cout<<calc(n,0).first<<endl;
}
