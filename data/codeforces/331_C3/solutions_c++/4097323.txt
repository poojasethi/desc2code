#include <iostream>
#include <cstring>
#include <cstdio>
#include <cassert>
#include <map>
using namespace std;
typedef long long ll;
map<pair<ll, int>, pair<ll, int> >mp;

pair<ll, int> dfs(ll n, int mx)
{
	if (n == 0) return make_pair(0, 0);
	if (n < 10)
	{
		pair<ll, int> ret = make_pair(1, 0);
		if (mx > n) ret.second = mx - n;
		return ret;
	}
	pair<ll, int> state = make_pair(n, mx);
	if (mp.count(state)) return mp[state];
	ll base = 1;
	while (base <= n / 10) base *= 10;
	pair<ll, int> ret = make_pair(0, 0);
	for(int i = max(mx, int(n / base)); ; i = max(mx, int(n / base)))
	{
		pair<ll, int> cur = dfs(n % base, i);
		ret.first += cur.first;
		n -= n % base;
		n -= cur.second;
		if (cur.second == 0 && i) n -= i, ret.first++;
		if (i == 0)break;
		if (n <= 0) break;
	}
	ret.second = -n;
	mp.insert(make_pair(state, ret));
	return ret;
}


int main()
{
	ll n;
	cin >> n;
	cout << dfs(n, 0).first << endl;
	return 0;
}