#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<cstring>

using namespace std;

int next[4011],y[4011],flow[4011],g[401],dis[401],que[401],co[401];
int du[401],ot[401],f[401],cur[401];
int tt,tot,T,n,m,i,j,ans,x,z;

struct Ed{
	int x,z,q;
}edge[2011],ne[201*201];

void star(int i,int j,int k)
{
	tt++;
	next[tt]=g[i];
	g[i]=tt;
	y[tt]=j;
	flow[tt]=k;
	tt++;
	next[tt]=g[j];
	g[j]=tt;
	y[tt]=i;
	flow[tt]=0;
}

int Dfs(int x,int fl,int s,int t)
{
	int j,k,z,e;
	if(x==t)return fl;
	z=0;
	j=cur[x];
	while(j!=0){
		k=y[j];
		if(dis[x]==dis[k]+1&&flow[j]>0){
			cur[x]=j;
			e=Dfs(k,min(fl,flow[j]),s,t);
			z+=e;
			fl-=e;
			flow[j]-=e;
			flow[j^1]+=e;
			if(!fl||dis[s]==n)return z;
		}
		j=next[j];
	}
	cur[x]=g[x];
	co[dis[x]]--;
	if(!co[dis[x]])dis[s]=n;
	dis[x]++;
	co[dis[x]]++;
	return z;
}


int Sap(int s,int t)
{
	int i,re;
	tt=1;
	for(i=1;i<=n;i++)g[i]=0;
	for(i=1;i<=m;i++){
		star(edge[i].x,edge[i].z,edge[i].q);
		star(edge[i].z,edge[i].x,edge[i].q);
	}
	re=0;
	co[0]=0;
	for(i=1;i<=n;i++)dis[i]=0,cur[i]=g[i],co[i]=0;
	while(dis[s]<n)re+=Dfs(s,0x7fffffff,s,t);
	return re;
}

bool cmp(Ed a,Ed b)
{
	return a.q>b.q;
}

void dfs(int x,int fa)
{
	int j,k;
	ot[++T]=x;
	j=g[x];
	while(j!=0){
		k=y[j];
		if(k!=fa)dfs(k,x);
		j=next[j];
	}
}

int find(int r)
{
	if(f[r]==r)return r;
	else f[r]=find(f[r]);
	return f[r];
}

int main()
{
	scanf("%d%d",&n,&m);
	for(i=1;i<=m;i++)scanf("%d%d%d",&edge[i].x,&edge[i].z,&edge[i].q);
	for(i=1;i<n;i++)
		for(j=i+1;j<=n;j++){
			tot++;
			ne[tot].x=i;ne[tot].z=j;
			ne[tot].q=Sap(i,j);
		}
	sort(ne+1,ne+1+tot,cmp);
	tt=0;
	memset(g,0,sizeof(g));
	for(i=1;i<=n;i++)f[i]=i;
	for(i=1;i<=tot;i++){
		x=ne[i].x;z=ne[i].z;
		if(du[x]<2&&du[z]<2&&find(f[x])!=find(f[z])){
			f[find(f[z])]=find(f[x]);
			star(x,z,0);
			du[x]++;
			du[z]++;
			ans+=ne[i].q;
		}
	}
	for(i=1;i<=n;i++)if(du[i]==1)break;
	dfs(i,0);
	printf("%d\n",ans);
	for(i=1;i<=n;i++)printf("%d ",ot[i]);
}