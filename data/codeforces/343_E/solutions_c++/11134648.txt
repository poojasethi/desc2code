#include <cstdio>
#include <cstring>
#include <algorithm>
#define memcle(a) memset(a, 0, sizeof(a))
using namespace std;
typedef long long ll;

const int N = 210, M = 2010, inf = 1e9;

int adj[N * N], next[N * N], last[N], fl[M], tfl[M];
int dat[N], gap[N], dist[N], pre[N], cur[N];
int fa[N], deg[N], ans[N];
int n, m, mm = 1, en;

struct edge
{
	int x, y, z;
} e[N * N];

bool cmp(edge x, edge y) {return x.z > y.z;}

void link(int x, int y, int z)
{
	adj[++mm] = y, next[mm] = last[x], last[x] = mm, fl[mm] = z;
	//adj[++mm] = x, next[mm] = last[y], last[y] = mm, fl[mm] = 0;
}

void link(int x, int y) {adj[++mm] = y, next[mm] = last[x], last[x] = mm;}

int gf(int x) {return fa[x] == 0 ? x : fa[x] = gf(fa[x]);}

int maxflow(int S, int T) {
	for (int i = 1; i <= n; i++) cur[i] = last[i];
	memcle(dat); dat[S] = inf;
	memcle(gap); gap[0] = n;
	memcle(dist);
	memcle(pre);
	
	int x = S, y, p, ret = 0;
	for (;;) {
		for (p = cur[x]; p; p = next[p]) {
			y = adj[p];
			if (fl[p] && dist[y] == dist[x] - 1) break;
		}
		
		if (p) {
			pre[y] = cur[x] = p;
			dat[y] = min(dat[x], fl[p]);
			x = y;
			if (x == T) {
				ret += dat[T];
				for (; x != S; x = adj[pre[x] ^ 1]) {
					fl[pre[x]] -= dat[T];
					fl[pre[x] ^ 1] += dat[T];
				}
			}
		} else {
			if (--gap[dist[x]] == 0) return ret;
			dist[x] = n + 1;
			for (p = last[x]; p; p = next[p]) {
				y = adj[p];
				if (fl[p] && dist[y] + 1 < dist[x]) dist[x] = dist[y] + 1, cur[x] = p;
			}
			if (dist[S] > n) return ret;
			gap[dist[x]]++;
			if (x != S) x = adj[pre[x] ^ 1];
		}
	}
}


int main()
{
	
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= m; i++)
	{
		int x, y, z;
		scanf("%d%d%d", &x, &y, &z);
		link(x, y, z);
		link(y, x, z);
	}
	
	memcpy(tfl, fl, sizeof(fl));
	
	for (int i = 1; i <= n; i++)
		for (int j = i + 1; j <= n; j++)
		{
			memcpy(fl, tfl, sizeof(fl));		
		
			e[++en].x = i;
			e[en].y = j;
			e[en].z = maxflow(i, j);
		}
		
	sort(e + 1, e + 1 + en, cmp);
	
	memcle(adj);
	memcle(next);
	memcle(last);
	mm = 0;
	int sum = 0;
	
	for (int i = 1; i <= en; i++)
	{
		int x = e[i].x;
		int y = e[i].y;
		int z = e[i].z;
		
		if (deg[x] < 2 && deg[y] < 2 && gf(x) != gf(y))
		{
			sum += z;
			fa[gf(x)] = gf(y);
			deg[x]++;
			deg[y]++;
			link(x, y);
			link(y, x);
		}
	}
	
	int S = 0;
	
	for (int i = 1; i <= n; i++) if (deg[i] == 1) {S = i; break;}
	ans[1] = S;
	for (int i = 2; i <= n; i++)
	{
		int x = ans[i - 1];
		for (int p = last[x]; p; p = next[p]) 
			if (adj[p] != ans[i - 2])
			{
				ans[i] = adj[p];
				break;
			}
	}
	
	printf("%d\n", sum);
	for (int i = 1; i <= n; i++) printf("%d ", ans[i]);
	
	return 0;
}
