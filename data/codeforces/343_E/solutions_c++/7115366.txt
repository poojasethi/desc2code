#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

const int MaxN = 210;
const int INF = 0x3f3f3f3f;

int a[MaxN][MaxN],flow[MaxN][MaxN],mincut[MaxN][MaxN];
int d[MaxN];
int n,m,S,T,ans;
vector<int> ansList;

inline void chmin(int &a,int b){b<a ? a=b : 0;}
int bfs(){
	static int q[MaxN],l,r;
	memset(d,0,sizeof(d));
	for(d[q[l=r=0]=S]=1;l<=r;l++)
		for(int i=1;i<=n;i++) if(flow[q[l]][i]>0 && !d[i])
			d[q[++r]=i]=d[q[l]]+1;
	return d[T];
}
int dfs(int cur,int fl){
	int dt=fl;
	if(cur==T) return fl;
	for(int i=1;i<=n;i++) if(flow[cur][i]>0 && d[i]==d[cur]+1){
		int tmp=dfs(i,min(fl,flow[cur][i]));
		flow[cur][i]-=tmp;flow[i][cur]+=tmp;fl-=tmp;
		if(!fl) break;
	}
	return dt-fl;
}
int dinic(){
	int res=0;
	while(bfs()) res+=dfs(S,INF);
	return res;
}
void work(vector<int> &list){
	if(list.size()<2) return ;
	S=list[0],T=list[1];
	memcpy(flow,a,sizeof(flow));
	int t=dinic();
	vector<int> x,y;
	for(int i=1;i<=n;i++) (d[i]  ? x : y).push_back(i);
	for(int i=0;i<x.size();i++)
		for(int j=0;j<y.size();j++)
			chmin(mincut[x[i]][y[j]],t),chmin(mincut[y[j]][x[i]],t);
	x.clear();y.clear();
	for(int i=0;i<list.size();i++) (d[list[i]] ? x : y).push_back(list[i]);
	work(x);work(y);
}
void figure_out(vector<int> &list){
	if(list.size()<2){ansList.push_back(list[0]);return ;}
	int t=INF;T=list[list.size()-1];
	for(int i=0;i<list.size()-1;i++) if(mincut[list[i]][T]<t) t=mincut[S=list[i]][T];
	memcpy(flow,a,sizeof(flow));ans+=(t=dinic());
	vector<int> x,y;
	for(int i=0;i<list.size();i++) (d[list[i]] ? x : y).push_back(list[i]);
	figure_out(x);figure_out(y);
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=m;i++){
		int u,v,c;scanf("%d%d%d",&u,&v,&c);
		a[u][v]+=c;a[v][u]+=c;
	}
	memset(mincut,0x3f,sizeof(mincut));
	vector<int> list;
	for(int i=1;i<=n;i++) list.push_back(i);
	random_shuffle(list.begin(),list.end());
	work(list);figure_out(list);
	printf("%d\n",ans);
	for(int i=0;i<ansList.size();i++) printf("%d ",ansList[i]);puts("");
	return 0;
}
