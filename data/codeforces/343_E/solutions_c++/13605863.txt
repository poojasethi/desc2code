#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <algorithm>
using namespace std;
#define N 205
#define M 1050
#define INF 0x3f7f7f7f
int ln[N][3],n,m,fi[N],c[M*2][3],h[N],li[N],ss=1,st=0,ans;
bool b[M*2],d[N];int Ans[N],S,T,sg[N];
inline int Read()
 {
 	int x=0;char y;
 	do y=getchar(); while (y<'0'||y>'9');
 	do x=x*10+y-'0',y=getchar(); while (y>='0'&&y<='9');
 	return x;
 }
inline void Line(int z,int y,int x)
 {
 	c[++ss][0]=y;c[ss][1]=fi[x];c[ss][2]=z;fi[x]=ss;
 	c[++ss][0]=x;c[ss][1]=fi[y];c[ss][2]=z;fi[y]=ss;
 }
bool BFS()
 {
 	int le=1,ri=1;
 	memset(h,0,sizeof(h));h[li[le]=S]=1;
 	for (;le<=ri;le++)
 	 for (int i=fi[li[le]];i;i=c[i][1])
 	  if (c[i][2]&&!h[c[i][0]])
 	  	h[li[++ri]=c[i][0]]=h[li[le]]+1;
 	return h[T]>0;
 }
int DFS(int x,int y)
 {
 	int k,l=0;
 	if (x==T) return y;
 	for (int i=fi[x];i&&y;i=c[i][1])
 	 if (c[i][2]&&h[c[i][0]]==h[x]+1)
 	  {
 	  	 k=DFS(c[i][0],min(y,c[i][2]));
 	  	 if (!k) continue;
 	  	 l+=k;y-=k;c[i][2]-=k;c[i^1][2]+=k;
 	  }
 	return l;
 }
int Dinic()
 {
 	int cnt=0;
 	while (BFS()) cnt+=DFS(S,INF);
 	return cnt;
 }
void DAC(int x,int y)
 {
 	if (x==y) {b[sg[x]]=1;return;}
 	S=sg[x];T=sg[y];
 	ln[++st][0]=S;ln[st][1]=T;ln[st][2]=Dinic();
 	int le=x,ri=x,now=x-1;li[le]=S;
 	memset(d,0,sizeof(d));d[S]=1;
 	for (;le<=ri;le++)
 	 for (int i=fi[li[le]];i;i=c[i][1])
 	  if (!d[c[i][0]]&&c[i][2])
 	    d[li[++ri]=c[i][0]]=1;
 	for (int i=x;i<=y;i++)
 	 if (!d[sg[i]]) swap(sg[++now],sg[i]);
 	for (int i=2;i<=ss;i+=2)
 	  c[i][2]+=c[i+1][2],c[i+1][2]=(c[i][2]>>= 1);
 	for (int i=now+1;i<=y;i++) b[sg[i]]=1;
 	DAC(x,now);
 	for (int i=x;i<=now;i++) b[sg[i]]=1;
 	for (int i=now+1;i<=y;i++) b[sg[i]]=0;
 	DAC(now+1,y);
    for (int i=now+1;i<=y;i++) b[sg[i]]=1;
 }
void Solve(int x,int y)
 {
 	int le=1,ri=1,ma=INF,now=x-1;li[1]=sg[x];d[sg[x]]=1;
 	if (x==y) {Ans[++st]=sg[x];b[sg[x]]=1;return;}
 	memset(d,0,sizeof(d));
 	for (;le<=ri;le++)
 	 for (int i=fi[li[le]];i;i=c[i][1])
 	  if (!b[c[i][0]]&&!d[c[i][0]])
 	   {
 	   	  d[li[++ri]=c[i][0]]=1;
 	   	  if (c[i][2]<ma) ma=c[i][2],S=li[le],T=c[i][0];
 	   }
 	le=ri=1;li[1]=T;ans+=ma;b[T]=1;
 	for (;le<=ri;le++)
 	 for (int i=fi[li[le]];i;i=c[i][1])
 	  if (!b[c[i][0]]&&c[i][0]!=S)
 	    b[li[++ri]=c[i][0]]=1;
 	for (int i=x;i<=y;i++)
 	 if (!b[sg[i]]) swap(sg[++now],sg[i]);
 	Solve(x,now);
 	for (int i=x;i<=now;i++) b[sg[i]]=1;
 	for (int i=now+1;i<=y;i++) b[sg[i]]=0;
 	Solve(now+1,y);
    for (int i=now+1;i<=y;i++) b[sg[i]]=1;
 }
int main()
 {
 	n=Read();m=Read();ss=1;
 	for (int i=1;i<=m;i++) Line(Read(),Read(),Read());
 	for (int i=1;i<=n;i++) d[sg[i]=i]=1;
 	DAC(1,n);
    memset(fi,0,sizeof(fi));ss=1;
    for (int i=1;i<n;i++)
      Line(ln[i][2],ln[i][1],ln[i][0]),c[ss][2]=ln[i][2];
    for (int i=1;i<=n;i++) sg[i]=i;
    memset(b,0,sizeof(b));
    st=0;Solve(1,n);
    cout <<ans<<endl;
    for (int i=1;i<=n;i++) printf("%d ",Ans[i]);
    puts("");
    return 0;
 }