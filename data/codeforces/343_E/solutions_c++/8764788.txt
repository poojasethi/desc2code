#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int N = 205 , M = 1005 , inf = (int)1e9;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define Me(x , y) memset(x , y , sizeof(x))
#define Mc(x , y) memcpy(x , y , sizeof(x))

struct _two{
	int a , b;
}edge[M + M] , state[N];

struct _three{
	int a , b , c;
}p[N];

bool operator < (const _three &x , const _three &y){
	return x.c > y.c;
}

int st[N] , value[M + M] , tmp[M + M] , fa[N] , dis[N] , qu[N] , next[N];
int n , m , ans , len , T;

void Init(){
	scanf("%d%d" , &n , &m); int x , y , z , tot = 1;
	fo (i , 1 , m){
		scanf("%d%d%d" , &x , &y , &z);
		edge[++tot] = (_two){y , st[x]}; value[st[x] = tot] = z;
		edge[++tot] = (_two){x , st[y]}; value[st[y] = tot] = z;
	}
	Mc(tmp , value);
}

void bfs(int x){
	Me(dis , -1); int be = 0 , en = 1; dis[qu[1] = x] = 0;
	while (be < en){
		int x = qu[++be];
		for (int i = st[x]; i; i = edge[i].b)
			if (value[i] && dis[edge[i].a] < 0)
				dis[qu[++en] = edge[i].a] = dis[x] + 1;
	}
}

int Aug(int x , int flow){
	if (x == T) return flow;
	int ret = 0;
	for (int i = st[x]; i; i = edge[i].b)
		if (value[i] && dis[edge[i].a] == dis[x] + 1){
			int y = min(flow , value[i]) , temp = Aug(edge[i].a , y);
			if (temp < y) dis[edge[i].a] = -1;
			value[i] -= temp; value[i ^ 1] += temp; flow -= temp; ret += temp;
			if (!flow) break;
		}
	return ret;
}

int Getflow(int u , int v){
	Mc(value , tmp); T = v; int ret = 0;
	while (bfs(u) , dis[T] != -1) ret += Aug(u , inf);
	return ret;
}

int Get(int x){
	return fa[x] ? fa[x] = Get(fa[x]) : x;
}

void Work(){
	fo (i , 1 , n) fa[i] = 1;
	fo (i , 2 , n){
		int u = 1;
		fo (j , 1 , n)
			if (fa[j] != j) u = j;
		int v = fa[u] , k = Getflow(v , u);
		fo (j , 1 , n)
			if (fa[j] == v && dis[j] < 0) fa[j] = u;
		p[i - 1] = (_three){u , v , k}; ans += k;
	}
	sort(p + 1 , p + n); Me(fa , 0);
	fo (i , 1 , n) state[i] = (_two){i , i};
	fo (i , 1 , n - 1){
		int x = Get(p[i].a) , y = Get(p[i].b);
		next[state[y].b] = state[x].a; state[x].a = state[y].a; fa[y] = x;
	}
	printf("%d\n" , ans);
	fo (i , 1 , n)
		if (!fa[i]){
			bool flag = 0;
			for (int j = state[i].a; j; j = next[j]){
				if (flag) putchar(' '); flag = 1;
				printf("%d" , j);
			}
			puts("");
		}
}

int main(){
	Init();
	Work();
	return 0;
}
