#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
using namespace std;
const int maxn=555,maxm=20005,inf=(1<<30)-1;
int n,m,sum;
int fa[maxn],c[maxn][maxn],s[maxn],sn;

bool vis[maxn];

namespace FLOW
{
    int head[maxn],adj[maxm],f[maxm],next[maxm],tot=1;
    int level[maxn],q[maxn],qh,qt,mf,S,T;
    
    void addedge(int u,int v,int w)
    {tot++;adj[tot]=v;f[tot]=w;next[tot]=head[u];head[u]=tot;
    tot++;adj[tot]=u;f[tot]=0;next[tot]=head[v];head[v]=tot;}
    
    bool bfs()
    {
        memset(level,-1,n+1<<2);
        qh=0;q[qt=1]=S;
        level[S]=0;
        for(int u,i;qh<qt;)
        {
            u=q[++qh];
            for(i=head[u];i;i=next[i])
                if(f[i]>0&&level[adj[i]]==-1)
                {
                    level[adj[i]]=level[u]+1;
                    if(adj[i]==T)return 1;
                    q[++qt]=adj[i];
                }
        }
        return 0;
    }
    
    int aug(int u,int flow)
    {
        if(u==T)return mf+=flow,flow;
        int left=flow,t;
        for(int i=head[u];i&&left;i=next[i])
            if(f[i]>0&&level[adj[i]]==level[u]+1)
            {
                t=aug(adj[i],min(left,f[i]));
                f[i]-=t,f[i^1]+=t,left-=t;
            }
        if(left==flow)level[u]=-1;
        return flow-left;
    }
    
    int dinic(int s,int t)
    {
        S=s,T=t;mf=0;
        while(bfs())
            aug(S,inf);
        return mf;
    }
    
    int flow(int s,int t)
    {
        for(int i=1;i<=tot;i+=2)
            f[i]+=f[i^1],f[i^1]=0;
        return dinic(s,t);
    }
}

void init()
{
    scanf("%d%d",&n,&m);
    for(int u,v,w,i=1;i<=m;i++)
    {
        scanf("%d%d%d",&u,&v,&w);
        FLOW::addedge(u,v,w);
        FLOW::addedge(v,u,w);
    }
}

void build()
{
    using namespace FLOW;
    memset(c,31,sizeof(c));
    for(int i=1;i<=n;i++)fa[i]=1;
    for(int i=2,f;i<=n;i++)
    {
        f=flow(i,fa[i]);
        for(int j=i+1;j<=n;j++)
            if(level[j]!=-1&&fa[j]==fa[i])
                fa[j]=i;
        c[i][fa[i]]=c[fa[i]][i]=f;
        for(int j=1;j<i;j++)
            c[i][j]=c[j][i]=min(c[fa[i]][j],f); 
    }
}

void solve()
{
    s[++sn]=1;
    for(int k=1,u,i,j;k<n;k++)
    {
        u=s[sn];
        vis[u]=1,j=0;
        for(i=1;i<=n;i++)
            if(!vis[i]&&(j==0||c[u][i]>c[u][j]))j=i;
        s[++sn]=j;
        sum+=c[u][j];
    }
    printf("%d\n",sum);
    for(int i=1;i<=n;i++)
        printf("%d%c",s[i]," \n"[i==n]);
}

int main()
{
    init();
    build();
    solve();
    return 0;
}
