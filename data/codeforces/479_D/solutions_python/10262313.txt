import sys
import bisect

import numpy as np


n, l, x, y = map(int, sys.stdin.next().split())
marks = map(int, sys.stdin.next().split())

x_solved = False
y_solved = False

magic_tick = None

for i, mark in enumerate(marks):

    if mark + x > l:
        break

    res_y = bisect.bisect_left(marks, mark + y, lo=i)
    res_x = bisect.bisect_left(marks, mark + x, lo=i, hi=min(res_y + 1, n))

    res_x = min(max(0, res_x), n - 1)
    res_y = min(max(0, res_y), n - 1)

    if (marks[res_x] == mark + x):
        x_solved = True
    if (marks[res_y] == mark + y):
        y_solved = True

if x_solved and y_solved:
    print(0)
elif x_solved and not(y_solved):
    print(1)
    print(y)
elif not(x_solved) and y_solved:
    print(1)
    print(x)
else:
    for shift_x, shift_y in [(x, y), (-x, y), (x, -y), (-x, -y)]:
        i, j = 0, 0
        while True:
            if (i >= n) or (j >= n):
                break

            if marks[i] + shift_x > marks[j] + shift_y:
                j += 1
            elif marks[i] + shift_x < marks[j] + shift_y:
                i += 1
            else:
                if 0 <= marks[i] + shift_x <= l:
                    magic_tick = marks[i] + shift_x
                    break
                else:
                    i += 1
                    j += 1

    if magic_tick:
        print(1)
        print(magic_tick)
    else:
        print(2)
        print("%i %i" % (x, y))
