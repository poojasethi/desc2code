import sys


"""
notes:
1) how to test x or y could be marked
2) how to add marks
	a) minimum
	b) within range
"""


def read_inputs():
	lines = sys.stdin.readlines()
	for i in range(0, len(lines), 2):
		n, l, x, y = map(int, lines[i].strip().split())
		marks = map(int, lines[i+1].strip().split())
		yield x, y, marks


def test(m, t, marks):
	if t == m:
		return True
	elif m < t:
		return (m + t) in marks
	else:
		return (m - t) in marks


def all_possible_marks(t, marks):
	u = max(marks)
	s = set()
	for m in marks:
		if 0 <= (m + t) <= u:
			s.add(m + t)
		if 0 <= (m - t) <= u:
			s.add(m - t)
	return s


def add_marks(x, x_ok, y, y_ok, marks):
	if (not x_ok) and (not y_ok):
		lower, upper = min(marks), max(marks)
		x_marks = all_possible_marks(x, marks)
		y_marks = all_possible_marks(y, marks)
		inter = x_marks.intersection(y_marks)	
		if len(inter) != 0:
			return 1, [inter.pop()]
		else:
			return 2, [x, y]
	elif not x_ok:
		return 1, [x]
	elif not y_ok:
		return 1, [y]
	else:
		return 0, []



def solve(x, y, marks):
	x_ok = y_ok = False
	for m in marks:
		if x_ok and y_ok:
			break
		if not x_ok and test(m, x, marks):
			x_ok = True
		if not y_ok and test(m, y, marks):
			y_ok = True

	return add_marks(x, x_ok, y, y_ok, marks) 


def main():
	for x, y, marks in read_inputs():
		n, marks = solve(x, y, set(marks))
		print n
		if n != 0: 
			print " ".join(map(str, marks))


if __name__ == "__main__":
	main()