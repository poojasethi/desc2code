#include <stdio.h>
#include <math.h>

#define EPS 1E-8

inline int SG(double x) {
    if(x>-EPS && x<EPS) return 0;
    return x>0?1:-1;
}

class PT{
    public:
        double x,y;
        PT() {}
        PT(double _x,double _y) {
            x = _x; y = _y;
        }
        PT operator+(const PT& p) const {
            return PT(x+p.x,y+p.y);
        }
        PT operator-(const PT& p) const {
            return PT(x-p.x,y-p.y);
        }
        PT operator*(const double c) const {
            return PT(x*c,y*c);
        }
        PT operator/(const double c) const {
            return PT(x/c,y/c);
        }
        double operator*(const PT& p) const {
            return x*p.x+y*p.y;
        }
        double operator^(const PT& p) const {
            return x*p.y-y*p.x;
        }
        double len() {
            return sqrt(x*x+y*y);
        }
        void prt() {
            printf("%.5f %.5f\n",x,y);
        }
};

PT pt[20000];

inline double tri(PT p1,PT p2,PT p3) {
    return (p2-p1)^(p3-p1);
}

inline int sect(PT p1,PT p2,PT p3,PT p4) {
    int ta,tb,tc,td;
    ta = SG(tri(p1,p2,p3));
    tb = SG(tri(p1,p2,p4));
    tc = SG(tri(p3,p4,p1));
    td = SG(tri(p3,p4,p2));
    if(ta*tb<0 && tc*td<0) return 1;
    if(ta==0 && tb==0) return 0;
    if(ta*tb<0) {
        if(tc==0 && td>0) return 1;
        if(td==0 && tc>0) return 1;
    }
    return 0;
}

inline int sectPT(PT p1,PT p2,PT p3,PT p4,PT &p) {
    double ta,tb,tc,td;
    ta = tri(p1,p2,p3);
    tb = tri(p1,p2,p4);
    tc = tri(p3,p4,p1);
    td = tri(p3,p4,p2);
    if(SG(ta)==0 && SG(tb)==0) {
        return 0;
    }else if(SG(ta)*SG(tb)<=0 && SG(tc)*SG(td)<=0) {
        p = (p3*tb-p4*ta)/(tb-ta);
        return 1;
    }
    return 0;
}

inline int onSeg(PT p,PT p1,PT p2) {
    if(SG(tri(p,p1,p2))==0 && SG((p2-p)*(p1-p))<=0) return 1;
    return 0;
}

int main() {
    int n,i,cs;
    PT A,V,U,D,W,B,T;
    double F,vz,uz,t,s,t1,t2;
    while(scanf("%d",&n)==1) {
        for( i=0; i<n; i++  ) {
            scanf("%lf %lf",&pt[i].x,&pt[i].y);
        }
        pt[n] = pt[0];
        scanf("%lf %lf",&A.x,&A.y);
        scanf("%lf %lf %lf",&V.x,&V.y,&vz);
        scanf("%lf",&F);
        scanf("%lf %lf %lf",&U.x,&U.y,&uz);
        F = -F;
        uz = -uz;
        if(SG(V^U)==0) {
            t1 = 1E20;
            W = V+(U*(vz/uz));
            for( i=0; i<n; i++ ) {
                D = pt[i+1]-pt[i];
                if(SG(W^D)) {
                    t = ((pt[i]-A)^D)/(W^D);
                    if(SG(t)>=0) {
                        B = A+(W*t);
                        if(SG((B-pt[i])*(B-pt[i+1]))<=0 && t<t1) {
                            t1 = t;
                        }
                    }
                }
                if(SG(V^D)) {
                    t = ((pt[i]-A)^D)/(V^D);
                    if(SG(t)>=0) {
                        B = A+(V*t);
                        if(SG((B-pt[i])*(B-pt[i+1]))<=0 && t<t1) {
                            t1 = t;
                        }
                    }
                }
            }
        }else {
            t1 = 1E20;
            W = V+(U*(vz/uz));
            for( i=0; i<n; i++ ) {
                D = pt[i]-A;
                t = (D^U)/(V^U);
                if(SG(t)>=0) {
                    D = D-(V*t);
                    s = SG(U.x)?D.x/U.x:D.y/U.y;
                    if(SG(s)>=0 && SG(s*uz-t*vz)<=0 && t<t1) {
                        t1 = t;
                    }
                }
                D = pt[i+1]-pt[i];
                if(SG(W^D)) {
                    t = ((pt[i]-A)^D)/(W^D);
                    if(SG(t)>=0) {
                        B = A+(W*t);
                        if(SG((B-pt[i])*(B-pt[i+1]))<=0 && t<t1) {
                            t1 = t;
                        }
                    }
                }
                if(SG(V^D)) {
                    t = ((pt[i]-A)^D)/(V^D);
                    if(SG(t)>=0) {
                        B = A+(V*t);
                        if(SG((B-pt[i])*(B-pt[i+1]))<=0 && t<t1) {
                            t1 = t;
                        }
                    }
                }
            }
        }
        if(t1>1E18) {
            printf("%.8f %.8f\n",-1.0,-1.0);
            continue;
        }
        if(SG(U.x)==0 && SG(U.y)==0) {
            t2 = 0;
        }else {
            B = A+V*t1;
            D = B+U*(vz*t1/uz);
            for( i=0; i<n; i++ ) {
                if(onSeg(D,pt[i],pt[i+1])) break;
            }
            if(i==n) {
                cs = 0;
                for( i=0; i<n; i++ ) {
                    if(sect(pt[i],pt[i+1],D,D+PT(100000,0))) cs++;
                }
                cs%=2;
            }else {
                cs = 1;
            }
            if(cs==1) {
                t2 = 0;
            }else {
                for( i=0; i<n; i++ ) {
                    if(sectPT(pt[i],pt[i+1],D,B,T)) {
                        B = T;
                    }
                }
                t2 = (B-D).len()/U.len()*uz/F;
            }
        }
        printf("%.8f %.8f\n",t1,t2);
    }
    return 0;
}
