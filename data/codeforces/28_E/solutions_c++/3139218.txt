#include <stdio.h>
#include <list>
#include <math.h>
#include <vector>
using namespace std;
struct Point{
    long double  x,y;
};
struct Line{
    long double  a,b,c;
};
bool err;
bool pc(Point a,Point b,Point c);
Point a[100000];
int vx,vy,vz;
int ux,uy,uz;
int Rz;
int ax,ay;
long double  x3,y3;
long double  x2,y2;
int n;
long double  abs(long double  d){
    if (d<0)
        return -d;
    return d;
}
long double  z(Point a,Point b,Point c){
    Line l1,l2;
    l1.a=(b.y-a.y);
    l1.b=(a.x-b.x);
    l1.c=-(l1.a*a.x+l1.b*a.y);
    
    double ans= (l1.a*c.x + l1.b*c.y + l1.c);
    if (fabs(ans)<1e-7)
    {
        if (pc(a,b,c))
            return ans;
        else
        {
            err=true;
            return 1;
        }
    }else
        return ans;
        
}
double zc(Line l1,Point c){
    return (l1.a * c.x + l1.b * c.y + l1.c);
}
long double  zn2(Line l1,Point a,Point b){
    return zc(l1,a)*zc(l1,b);
}
bool zn(Line l1,Point a,Point b){
    if (zc(l1,a)*zc(l1,b)<=0)
        return true;
    
    return false;
}
bool zn3(Line l1,Point a,Point b){
    if (zc(l1,a)*zc(l1,b)<=0)
        return true;
    if (fabs(zc(l1,a))<1e-7)
        return true;
    if (fabs(zc(l1,b))<1e-7)
        return true;
    
    return false;
}
bool pc(Point a,Point b,Point c){
    if (abs(a.x-c.x)+abs(b.x-c.x)<=abs(a.x-b.x)&&a.x!=b.x)
        return true;
    if (abs(a.y-c.y)+abs(b.y-c.y)<=abs(a.y-b.y)&&a.y!=b.y)
        return true;
    
    return false;
}
bool col(Point a,Point b,Point c,Point d){
    Line l1,l2;
    l1.a=(b.y-a.y);
    l1.b=(a.x-b.x);
    l1.c=-(l1.a*a.x+l1.b*a.y);
    
    l2.a=(d.y-c.y);
    l2.b=(c.x-d.x);
    l2.c=-(l2.a*c.x+l2.b*c.y);
    if (fabs(zn2(l1,c,d))<1e-17&&fabs(zn2(l2,a,b))<1e-17){
        if (pc(a,b,c)||pc(a,b,d)||pc(c,d,a)||pc(c,d,b))
            return true;
    }else{
        if (zn(l1,c,d)&&(zn(l2,a,b)))
            return true;
    }
    return false;
}
bool colm(Point a,Point b,Point c,Point d){
    Line l1,l2;
    l1.a=(b.y-a.y);
    l1.b=(a.x-b.x);
    l1.c=-(l1.a*a.x+l1.b*a.y);
    
    l2.a=(d.y-c.y);
    l2.b=(c.x-d.x);
    l2.c=-(l2.a*c.x+l2.b*c.y);
    if (fabs(zn2(l1,c,d))<1e-7&&fabs(zn2(l2,a,b))<1e-7){
        if (pc(a,b,c)||pc(a,b,d)||pc(c,d,a)||pc(c,d,b))
            return true;
    }else{
        if (zn3(l1,c,d)&&(zn3(l2,a,b)))
            return true;
    }
    return false;
}
bool l(Point a,Point b,Point c,Point d){
    err=false;
    if (z(a,b,d)*z(b,c,d)>=-1e-7){
        if (!err)
                return true;
        else
            return false;
    }
    return false;
}
bool in(Point a,Point b,Point c,Point d){
    
    if (l(a,b,c,d)&&l(b,c,a,d)&&l(c,a,b,d))
        return true;
    return false;
}
bool check(long double  mt){
    Point C,D,A;
    A.x=ax;
    A.y=ay;
    C.x=ax+vx*mt;
    C.y=ay+vy*mt;
    D.x=C.x-(long double )vz*mt/uz*ux;
    D.y=C.y-(long double )vz*mt/uz*uy;
    //Проверяем на пересечение со сторонаи инкубатора
    for (int i=0;i<n;i++){
       
        if (col(D,C,a[i],a[(i+1+n)%n])||
            col(A,C,a[i],a[(i+1+n)%n])||
            col(D,A,a[i],a[(i+1+n)%n]))
            return true;
        if (in(A,C,D,a[i]))
            return true;
        
    }
    return false;
}
bool check3(long double  t1,long double  mt){
    Point C,D,A;
    A.x=ax;
    A.y=ay;
    C.x=ax+vx*t1-t1*vz/uz*ux;
    C.y=ay+vy*t1-t1*vz/uz*uy;
    D.x=ax+vx*t1+ux*mt;
    D.y=ay+vy*t1+uy*mt;
    //Проверяем на пересечение со сторонаи инкубатора
    for (int i=0;i<n;i++){
       
        if (colm(C,D,a[i],a[(i+1+n)%n]))
            return true;
        
    }
    return false;
}
bool check2(long double  t1,long double  mt){
    Point A;
    A.x=ax+vx*t1+ux*mt;
    A.y=ay+vy*t1+uy*mt;
    
    //Находится ли внутри
    long double  sum=0;
    for (int i=0;i<n;i++){
        Line l1,l2;
        l1.a=(a[(i+1+n)%n].y-a[i].y);
        l1.b=(a[i].x-a[(i+1+n)%n].x);
        l1.c=-(l1.a*a[i].x+l1.b*a[i].y);
        if (fabs(l1.a*A.x+l1.b*A.y+l1.c)<=1e-8){
            if (pc(a[i],a[(i+1+n)%n],A))
            return true;
        }
        
    }
    for (int i=0;i<n;i++)
        if (!(l(a[i],a[(i+1+n)%n],a[(i+2+n)%n],A)&&
                l(a[(i+1+n)%n],a[(i+2+n)%n],a[(i+n)%n],A)&&
                l(a[(i+2+n)%n],a[(i+n)%n],a[(i+1+n)%n],A)))
            return false;
  
        return true;
   
}
int main(){
    scanf("%d",&n);
    for (int i=0;i<n;i++){
        double x,y;
        
        scanf("%lf%lf",&x,&y);
        a[i].x=x;
        a[i].y=y;
    }
    
    scanf("%d%d",&ax,&ay);
    scanf("%d%d%d",&vx,&vy,&vz);
    scanf("%d",&Rz);
    scanf("%d%d%d",&ux,&uy,&uz);
    
    
    long double  at=1e5;
  
    long double  bt=0;
    while (bt+1e-15<at){
        long double  mt=(at+bt)/2;
       if (check(mt))
            at=mt;
        else
            bt=mt;
    }
    long double  t1=(at+bt)/2;
    if (t1>=5e4)
        printf("-1 -1");
    else{
        printf("%.10lf ",(double)t1);
        at=-vz*t1/uz;
                
        bt=0;
        
        while (bt+1e-15<at){
            long double  mt=(at+bt)/2;
     
            if (check2(t1,mt))
                bt=mt;
            else{
                if (check3(t1,mt))
                    bt=mt;
                else
                    at=mt;
            }
        }
        (check2(t1,at));
        long double  t2=((long double )vz*t1+uz*(at+bt)/2)/(-Rz);
        printf("%.10lf",(double)t2);
    }
    return 0;
}