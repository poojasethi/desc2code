#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;
const int NM = 2e3 + 10;

int m, d;
char a[NM], b[NM];
int dp[NM][NM][2];

int mod(int val){
    val %= MOD;
    if(val < 0) val += MOD;
    return val;
}

int to(char num[]){
    memset(dp, 0, sizeof(dp));
    dp[0][0][0] = 1;

    int n = strlen(num + 1);
    for(int i = 1; i <= n; i++){
        int val = num[i] - '0';
        for(int j = 0; j < m; j++){
            for(int k = 0; k < 2; k++){
                for(int digit = 0; digit <= (k? 9 : val); digit++){
                    if(i%2 == 1 && digit == d) continue;
                    if(i%2 == 0 && digit != d) continue;
                    int ni = i, nj = (j*10 + digit)%m, nk = (k || digit < val);
                    dp[ni][nj][nk] = (dp[ni][nj][nk] + dp[i - 1][j][k])%MOD;
                }
            }
        }
    }
    return (dp[n][0][0] + dp[n][0][1])%MOD;
}

bool isMagic(char num[]){
    int sum = 0;
    for(int i = 1; num[i] != '\0'; i++){
        int val = num[i] - '0';
        if(i%2 == 0 && val != d){
            return false;
        }
        if(i%2 == 1 && val == d){
            return false;
        }
        sum = (sum*10 + val)%m;
    }
    return (sum == 0);
}

int main(){
    scanf("%d %d", &m, &d);
    scanf("%s", a + 1);
    scanf("%s", b + 1);
    printf("%d\n", mod(to(b) - to(a) + isMagic(a)));
    return 0;
}