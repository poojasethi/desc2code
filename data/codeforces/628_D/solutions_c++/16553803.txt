#include <bits/stdc++.h>

using namespace std;

const int MAX = 2001;
const long long q = 1E9 + 7;

long long dp[MAX][MAX][2][2][2];
int len, d, m;
string A;

long long solve(int i, int j, int cmp, int is0, int odd) {
	if (i == len) return (j == 0 && is0);
	long long &ans = dp[i][j][cmp][is0][odd];
	if (ans != -1) return ans;
	ans = 0;
	for (int digit = 0; digit < 10; ++digit) {
		if (cmp == 0 && digit > (A[i] - 48)) continue;
		if (odd && digit != d) continue;
		if (odd == 0 && digit == d) continue;
		ans += solve(i + 1, (j * 10 + digit) % m, cmp | (digit < A[i] - 48),
				is0 | (digit != 0), (odd + (is0 | (digit != 0))) & 1);
		ans %= q;

	}
	return ans;

}

int valid(string a) {
	int cnt = 0, mod = 0;
	for (int i = 0; i < a.size(); ++i) {
		if (i & 1) {
			if (a[i] - 48 != d) return 0;
		} else if (a[i] - 48 == d) return 0;
		mod = (mod * 10 + a[i] - 48) % m;
	}
	return mod == 0;
}

int main() {
	cin >> m >> d;
	
	memset(dp, -1, sizeof dp);
	cin >> A; len = A.size();
	long long ans = solve(0, 0, 0, 0, 0);
	int v = valid(A);
	
	memset(dp, -1, sizeof dp);
	cin >> A; len = A.size();
	ans = (solve(0, 0, 0, 0, 0) + q - ans) % q;
	ans = (ans + v) % q;

	cout << ans;
	return 0;
}
