#include<bits/stdc++.h>

using namespace std;

const int N = 2000 + 10, mod = 1000000007;

void addit(int &x, int y) {
	if((x += y) >= mod) x -= mod;
}

int f[N][N][3], m, d, a[N];

int dfs(int len, int r, int ext, bool lim) {
#define fcur f[len][r][ext]
	if(!len) return !r;
	if(!lim && fcur >= 0) return fcur;
	int res = 0;
	for(int i = 0; i <= (lim ? a[len] : 9); i++) {
		if(!ext && i == 0) {
			addit(res, dfs(len - 1, r, 0, 0));
		} else {
			int ne = ext + 1; if(ne == 3) ne = 1;
			if((ne & 1) ^ (i != d)) {
				addit(res, dfs(len - 1, (r * 10 + i) % m, ne, lim && i == a[len]));
			}
		}
	}
	if(!lim) fcur = res;
	return res;
}

int calc(int dlt) {
	static char s[N];
	scanf("%s", s + 1);
	int n = strlen(s + 1);
	for(int i = 1; i <= n; i++) {
		a[i] = s[n - i + 1] - '0';
	}
	if(dlt) {
		a[1]--; for(int i = 1; i <= n; i++) {
			if(a[i] < 0) a[i] += 10, a[i+1]--;
		}
	}
	return dfs(n, 0, 1, 1);
}

int main() {
#ifdef DEBUG
	freopen("in.txt", "r", stdin);
#endif

	scanf("%d%d", &m, &d);
	memset(f, -1, sizeof f);
	int res = -calc(1);
	addit(res, calc(0));
	if(res < 0) res += mod;
	printf("%d\n", res);
	
	return 0;
}
