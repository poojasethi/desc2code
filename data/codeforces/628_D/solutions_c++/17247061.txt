#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define ll long long
const int mod = 1e9 + 7;
using namespace std;

ll dp[2005][2005];
int m,d,bit[2005],len;
char a[2005],b[2005];

ll dfs( int pos, int md, int over )
{
	if( pos > len )
		return ( md == 0 );
	if( dp[pos][md] != -1 && !over )
		return dp[pos][md];
	int last = over ? bit[pos] : 9;
	ll ans = 0;
	for( int i = 0; i <= last; i++ )
	{
		if( pos%2 && i == d )
			continue;
		if( pos%2 == 0 && i != d )
			continue;
		ans = ( ans + dfs( pos+1, (md*10+i)%m, over && i == last ) )%mod;
	}
	if( !over )
		dp[pos][md] = ans;
	return ans;
}

ll solve( char *s )
{
	len = strlen( s+1 );
	for( int i = 1; i <= len; i++ )
		bit[i] = s[i] - '0';
	return dfs(1,0,1);
}
int main()
{
	memset( dp, -1, sizeof( dp ));
	while( scanf("%d %d",&m,&d) != EOF )
	{
		scanf("%s %s",a+1,b+1);
		int n = strlen( a+1 );
		int tmp,flag;
		flag = tmp = 0;
		for( int i = 1; i <= n; i++ )
		{
			tmp = ( tmp*10 + (a[i] -'0') )%m;
			if( i%2 && a[i]-'0' == d)
            	flag = 1;
        	if( i%2 == 0&& a[i]-'0'!=d)
            	flag = 1;
		}	
		if( tmp != 0 )
			flag = 1;
		printf("%lld\n",(solve(b) - (solve(a) - !flag )+ mod )%mod);
	}
	return 0;
}
        	 			 	  	   			  	 			