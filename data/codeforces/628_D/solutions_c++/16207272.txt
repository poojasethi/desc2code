#include <bits/stdc++.h>
using namespace std;

const int mod = 1e9+7 , SIZE = 2020;

int n,m,d,dp[SIZE][SIZE][2];
char a[SIZE],b[SIZE];

int solve( int pos , int rem , bool small , char *ar ){
	int &ret = dp[pos][rem][small];
	if( ret != -1 ) return ret;
	if( pos == n+1 ) return ret = rem == 0;
	
	ret = 0;
	if( (pos & 1) ){
		int e = small ? 9 : (ar[pos] - '0'); 
		for( int i=(pos==1 and n > 1) ; i <= e ; i++ )
			if( i != d ){
				int x = rem * 10 % m;
				x += i % m;
				if( x >= m ) x -= m;
				
				ret += solve(pos + 1 , x , small or (i < ar[pos] - '0') , ar);
				if( ret >= mod )
					ret -= mod;
			}
	} else {
		
		if( d > ar[pos] - '0' and !small )
			return ret = 0;
		
		int x = rem * 10 % m;
		x += d % m;
		if( x >= m ) x -= m;
		
		ret = solve(pos + 1 , x , small or (d < ar[pos] - '0') , ar);
	}
	
	return ret;
}

int main(){
	
	scanf("%d%d%s%s",&m,&d,a+1,b+1);
	
	n = strlen(a + 1);
	
	memset(dp , -1 , sizeof dp);
	int ans = solve(1 , 0 , 0 , b);
	
	memset(dp , -1 , sizeof dp);
	ans -= solve(1 , 0 , 0 , a);
	if( ans < 0 ) ans += mod;
	
	bool flag = 1;
	int rem = 0;
	for( int i=1 ; i <= n ; i++ ){
		if( (i & 1) and a[i] - '0' == d ) flag = 0;
		if(!(i & 1) and a[i] - '0' != d ) flag = 0;
		rem = rem * 10 % m;
		rem += (a[i] - '0') % m;
		if( rem >= m ) rem -= m;
	}
	
	if( !rem and flag )
		ans++;
	
	if( ans >= mod ) ans -= mod;
	
	printf("%d\n",ans);
	
	return 0;
}
