import bisect

def solve(n, pairs):
	if not pairs:
		return n-1
	left = set(xrange(1, n+1))
	div1, div2 = set([]), set([])
	mn1, mx2 = n+1, 0
	for sm, lg in pairs:
		if lg in div2 or sm in div1:
			return 0
		div1.add(lg)
		div2.add(sm)
		left.discard(lg)
		left.discard(sm)
		mn1 = min(lg, mn1)
		mx2 = max(sm, mx2)
		if mx2 >= mn1:
			return 0
	left = sorted(left)
	i = bisect.bisect_right(left, mx2)
	j = bisect.bisect_left(left, mn1) - 1
	if j < i:
		return 1
	return j - i + 2

n, m = map(int, raw_input().split())
pairs = [sorted(map(int, raw_input().split())) for _ in xrange(m)]
print solve(n, pairs)
