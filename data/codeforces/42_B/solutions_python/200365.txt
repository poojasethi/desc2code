#!/usr/bin/python
# coding=utf-8

def inboard(x, y):
	return x >= 1 and x <= 8 and y >= 1 and y <= 8

direction = [ [ 0, 0],
		[ 1, 0],
		[ 0, 1],
		[-1, 0],
		[ 0,-1],

		[ 1, 1],
		[ 1,-1],
		[-1, 1],
		[-1,-1]]

def reach(x, y, dx, dy):
	global g
	x += dx
	y += dy
	while inboard(x,y):
		if g[x][y] > 0:
			if g[x][y] == ME:
				return True
			else:
				return False
		x += dx
		y += dy
	return False


def judge():
	global g
	for i in range(1, 9):
		for j in range(1, 9):
			if g[i][j] == ROOK:
				if reach(i, j, 0, 1): return False
				if reach(i, j, 0,-1): return False
				if reach(i, j, 1, 0): return False
				if reach(i, j,-1, 0): return False
			if g[i][j] == KING:
				for dx, dy in direction:
					#print "dx = %d, dy = %d" % (dx, dy)
					if inboard(i + dx, j + dy) and g[i + dx][j + dy] == ME:
						return False
	return True


g = [[0 for i in range(0, 9)] for i in range(0, 9)]

ROOK = 1
KING = 2
ME   = 3

chess = raw_input().strip().split(" ")
chess =[[ord(chess[0][0]) - ord('a') + 1, ord(chess[0][1]) - ord('0')],
		[ord(chess[1][0]) - ord('a') + 1, ord(chess[1][1]) - ord('0')],
		[ord(chess[2][0]) - ord('a') + 1, ord(chess[2][1]) - ord('0')],
		[ord(chess[3][0]) - ord('a') + 1, ord(chess[3][1]) - ord('0')]]
g[chess[0][0]][chess[0][1]] = ROOK;
g[chess[1][0]][chess[1][1]] = ROOK;
g[chess[2][0]][chess[2][1]] = KING;

#for i in range(1, 9): print g[i]

ok = True
for dx,dy in direction:
	x = chess[3][0] + dx
	y = chess[3][1] + dy
	#print "dx = %3d, dy = %3d" % (dx, dy)
	if inboard(x, y) and g[x][y] != KING:
		prev = g[x][y]
		g[x][y] = ME
		if judge():
			ok = False
			#for i in range(1, 9): print g[i]
			#print ""
		g[x][y] = prev

if ok:
	print "CHECKMATE"
else:
	print "OTHER"
