from itertools import *
from heapq import *
from string import *
from collections import deque

def get2d(a, b, elem = -1):
  res = []
  for x in range(a):
    res.append(list(repeat(elem, b)))
  return res

def getTuple():
  return tuple(getList())

def getList():
  return map(long, raw_input().split())
  
def getInt():
  return long(raw_input())

S1 = raw_input()
S = map(int, S1)

N = len(S)

def Bigger(S, ind, a4, a7):
  N = len(S)
  for i in xrange(ind, len(S)):
    c = 4 if (i - ind >= a7) else 7
    if S[i] != c:
      return S[i] > c
  return False

def f(S):
  N = len(S)
  left4 = N / 2
  left7 = N / 2
  bigger = False
  ans = []
  for i, c in enumerate(S):
    if not left4 or not left7:
      break
    if (left4 and 
        (bigger or c < 4 or (c == 4 and not Bigger(S, i + 1, left4 - 1, left7)))):
      left4 -= 1
      ans.append('4')
      bigger |= (4 > c)
    else:
      ans.append('7')
      left7 -= 1
      bigger |= (7 > c)
    
  ans.append(left4 * '4' + left7 * '7')
  print ''.join(ans)
  
  
if N % 2 == 1:
  #print '1'
  L = (N + 1) / 2
  print L * '4' + L * '7'
elif Bigger(S, 0, N /2, N/2):
  #print '2'
  L = (N + 2) / 2
  print L * '4' + L * '7'
else:
  #print '3'
  f(S)
  
