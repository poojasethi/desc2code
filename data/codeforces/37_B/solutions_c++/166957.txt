#include <cstdio>
#include <vector>
#include <list>
#include <algorithm>
#define REP(i,n) for(int i=0; i<(n); i++)
#define MP make_pair
#define PB push_back
using namespace std;

int main(){
	int N,max,reg;
	scanf("%d%d%d",&N,&max,&reg);
	bool used[N];
	int scrolls[N][2];
	int sum = 0;
	REP(i,N){
		used[i] = false;
		scanf("%d%d",&scrolls[i][0], &scrolls[i][1]);
		if(scrolls[i][0] == 100)
			sum+=scrolls[i][1];
	}
	if(sum<=reg){
		printf("NO\n");
		return 0;
	}
	list<pair<int,int> > order;
	int health = max;
	int second = 0;
	int damage = 0;
	while(true){
		health -= damage;
		health = min(max, health + reg);
		if(health<=0)break;

		int maxdmg = -1;
		int scrollId = 0;
		REP(i,N){
			if(!used[i] && (health * 100 <= scrolls[i][0] * max)&&
				(scrolls[i][1]>maxdmg)){
				maxdmg = scrolls[i][1];
				scrollId = i;
			}
		}

		if(maxdmg>=0){
			used[scrollId] = true;
			damage += maxdmg;
			order.PB(MP(second, scrollId+1));
		}
		second++;
	}
	printf("YES\n");
	printf("%d %d\n",second, order.size());
	for(list<pair<int,int> > ::iterator it = order.begin(); it != order.end(); it++)
		printf("%d %d\n",it->first, it->second);
}
