#include <iostream>
#include <vector>
#include <cassert>
#include <utility>
#include <cmath>
#include <algorithm>

using namespace std;

typedef pair<int,int> P;

int main(void) {
  int n, maxim, reg;
  cin >> n >> maxim >> reg;
  vector<P> v(n);
  for (int i = 0; i < n; ++i) 
    cin >> v[i].first >> v[i].second;

  int s = 0;
  for (int i = 0; i < n; ++i) {
    if (v[i].first == 100)
      s += v[i].second;
  }
  if (s <= reg)
    cout << "NO" << endl;
  else {
    int eng = maxim;
    int cnt = 0;
    int resta = 0;
    vector<P> sol;
    while (eng > 0) {
      int idx = -1;
      for (int i = 0; i < n; ++i) {
	P p = v[i];
	if (maxim*p.first >= 100*eng and (idx == -1 or p.second > v[idx].second)) {
	  idx = i;
	}
      }
      if (idx != -1) {
	v[idx].first = -5000;
	sol.push_back(P(cnt, idx));
	resta += v[idx].second;
      }
      eng = min(eng-resta+reg, maxim);
      ++cnt;
    }
    cout << "YES" << endl;
    cout << cnt << " " << sol.size() << endl;
    for (int i = 0; i < sol.size(); ++i) {
      cout << sol[i].first << " " << sol[i].second+1 <<  endl;
    }
  }
}
