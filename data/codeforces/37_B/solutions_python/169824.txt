from Queue import PriorityQueue

class Boss:
    def __init__(self, max_helth, regenerate):
        self.max_helth = max_helth
        self.helth = max_helth
        self.damage = 0
        self.regenerate = regenerate

    def Regenerate(self):
        self.helth += self.regenerate
        if self.helth > self.max_helth:
            self.helth = self.max_helth

    def addDamage(self, dmg):
        self.damage += dmg

    def Damage(self):
        self.helth -= self.damage

    def getHelth(self):
        return self.helth

    def isFullHelth(self):
        return self.helth == self.max_helth

    def getPercentHelth(self):
        return 100.0 * self.helth / self.max_helth
    
    def isDead(self):
        return self.helth <= 0

class Scroll:
    def __init__(self, percent, dmg, count):
        self.percent = percent
        self.damage = dmg
        self.count = count

    def getPercent(self):
        return self.percent

    def getDamage(self):
        return self.damage

    def getCount(self):
        return self.count

class Player:
    def __init__(self, scrolls):
        self.scrolls = scrolls
        self.scrolls.sort(lambda x, y: cmp(x.getPercent(), y.getPercent()))
        self.queue_scrolls = []#PriorityQueue()

    def getScrolls(self, percent):
        scrolls = []
        while len(self.scrolls) != 0:
            scroll_percent = self.scrolls[-1].getPercent()
            if scroll_percent < percent:
                return scrolls
            scrolls.append(self.scrolls.pop())
        return scrolls

    def nextScroll(self, boss):
        scroll = None
        percent = boss.getPercentHelth()
        available_scrolls = self.getScrolls(percent)
        for scroll in available_scrolls:
            self.queue_scrolls.append(scroll)#put((1/scroll.getDamage(), scroll))

        #if self.queue_scrolls.empty():
        #    return scroll

        for i in self.queue_scrolls:
            if scroll != None:
                if (scroll.getDamage() < i.getDamage()) or (scroll.getDamage() == i.getDamage() and scroll.getCount() > i.getCount()):
                    scroll = i
            else:
                scroll = i
        if scroll != None:
            self.queue_scrolls.remove(scroll)
            #scroll = self.queue_scrolls.get()
        return scroll
    
        
N, max_helth, reg = map(int, raw_input().split())
scrolls = []
for i in xrange(N):
    percent, dmg = map(int, raw_input().split())
    scrolls.append(Scroll(percent, dmg, i + 1))

boss = Boss(max_helth, reg)
player = Player(scrolls)

win_game = True
used_scrolls = []
seconds = 0;

while True:

    boss.Damage()
    boss.Regenerate()

    if boss.isDead():
        break
    
    scroll = player.nextScroll(boss)
    if scroll != None:
        boss.addDamage(scroll.getDamage())
        used_scrolls.append((seconds, scroll))
    else:
        if boss.isFullHelth():
            win_game = False
            break

    seconds += 1

if win_game:
    print "YES"
    print "{0} {1}".format(seconds, len(used_scrolls))
    for (second, scroll) in used_scrolls:
        print "{0} {1}".format(second, scroll.getCount())
else:
    print "NO"
