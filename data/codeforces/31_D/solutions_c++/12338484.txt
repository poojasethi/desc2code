
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <queue>
#include <vector>
#include <stack>
#include <map>
#include <set>
#include <string>
#include <cstring>
using namespace std;

#define N (1<<7)

int w,h,n;

struct Cut
{
	int x1,y1,x2,y2;
	inline bool Involve(int x3,int y3,int x4,int y4)
	{
		if(x1==x2)
		{
			return (x3<=x1&&x1<=x4&&y1==y3&&y2==y4);
		}
		else
		{
			return (y3<=y1&&y1<=y4&&x1==x3&&x2==x4);
		}
	}
};

Cut q[N];
vector<int> Ans;
bool vis[N];

void dfs(int x1,int y1,int x2,int y2,int p)
{
	for(int i=0;i<p;i++)
	{
		if(vis[i])
		{
			continue;
		}
		if(q[i].Involve(x1,y1,x2,y2))
		{
			vis[i]=true;
			if(q[i].x1==q[i].x2)
			{
				dfs(x1,y1,q[i].x1,y2,p);
				dfs(q[i].x1,y1,x2,y2,p);
			}
			else
			{
				dfs(x1,y1,x2,q[i].y2,p);
				dfs(x1,q[i].y1,x2,y2,p);
			}
			return;
		}
	}
	Ans.push_back((x2-x1)*(y2-y1));
}

int main()
{
	scanf("%d%d%d",&w,&h,&n);
	for(int i=0;i<n;i++)
	{
		scanf("%d%d%d%d",&q[i].x1,&q[i].y1,&q[i].x2,&q[i].y2);
	}
	dfs(0,0,w,h,n);
	sort(Ans.begin(),Ans.end());
	for(int i=0;i<Ans.size()-1;i++)
	{
		printf("%d ",Ans[i]);
	}
	printf("%d\n",Ans[Ans.size()-1]);
	return 0;
}

