#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int maxN= 100+5;

bool mark[maxN][maxN];
bool adj [maxN][maxN][4];
int n,m,Break;
int move[][2]= {{0,1},{1,0},{0,-1},{-1,0}};

inline int dfs (int x, int y){
	if (x*y==0 || n<x || m<y)
		return 0;

	int ret=1; mark[x][y]= true;
	for (int i=0;i<4;i++) if(!adj[x][y][i]){
		int X= x+move[i][0], Y= y+move[i][1];
		if (!mark[X][Y])
			ret+= dfs(X,Y);
	}

	return ret;
}
/*********************************/
int main(){
	cin >> n >> m >> Break;
	for (int i=1;i<=Break;i++){
		int x1,x2,y1,y2;
		cin >> x1>>y1 >> x2>>y2 ;

		if(x1>x2)
			swap(x1,x2);
		if(y1>y2)
			swap(y1,y2);

		if (x1==x2){
			while (y1<y2){
				adj[x1][y1+1][1]= adj[x1+1][y1+1][3]= true;
				y1++;
			}
		}

		else{
			while (x1<x2){
				adj[x1+1][y1][0]= adj[x1+1][y1+1][2]= true;
				x1++;
			}		
		}
	}

	vector <int> Q;

	for (int i=1;i<=n;i++)
		for (int j=1;j<=m;j++) if(!mark[i][j]){
			Q.push_back (dfs(i,j));
		}

	sort (Q.begin(), Q.end());

	for (int i=0;i<(int)Q.size();i++)
		cout << Q[i] << ' ';
	cout << endl;

	return 0;
}
