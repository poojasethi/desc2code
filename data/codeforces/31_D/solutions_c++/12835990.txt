#include<vector>
#include<iostream>
#include<algorithm>
using namespace std;
const int MAX_N = 105;

int W,H,n,cnt;
bool vis[MAX_N][MAX_N];
bool go[MAX_N][MAX_N][4];
const int dx[] = {1,-1,0,0};
const int dy[] = {0,0,1,-1};

void dfs(int x,int y) {
	if (x < 0 || y < 0 || x >= W || y >= H || vis[x][y]) return;
	
	cnt++;
	vis[x][y] = true;
	for (int i = 0;i < 4;i++)
		if (!go[x][y][i]) dfs(x+dx[i],y+dy[i]);
}

int main() {
	cin >> W >> H >> n;
	for (int i = 1;i <= n;i++) {
		int  x1,y1,x2,y2;
		cin >> x1 >> y1 >> x2 >> y2;
		if (x1 == x2) for (int j = y1;j < y2;j++)
			go[x1-1][j][0] = go[x1][j][1] = 1;
		if (y1 == y2) for (int j = x1;j < x2;j++)
			go[j][y1-1][2] = go[j][y1][3] = 1;
	}
	vector<int> ans;
	ans.clear();
	for (int i = 0;i < W;i++)
		for (int j = 0;j < H;j++) {
			if (vis[i][j]) continue;
			cnt = 0;
			dfs(i,j);
			ans.push_back(cnt);
		}
	sort(ans.begin(),ans.end());
	for (int i = 0;i <= n;i++)
		cout << ans[i] << " ";
	cout << "\n";
	return 0;
}
