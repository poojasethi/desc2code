#include <bits/stdc++.h>

using namespace std;
const int MAXN = 105;
const char FI[]="split.i3";
const char FO[]="split.o3";
struct segment{
    int x1, y1, x2, y2;
};

segment a[MAXN];
int n, w, h;
priority_queue<int, vector<int>, greater<int> > kq;

void Divide(int left, int bot, int right, int top){
    for(int i = 0; i < n; i++){
        if(a[i].x1 == left && a[i].x2 == right && bot < a[i].y1 && a[i].y2 < top) //horizon
        {
            Divide(left, bot, right, a[i].y2);
            Divide(left, a[i].y1, right, top);
            return;
        }
        if(a[i].y1 == bot && a[i].y2 == top && left < a[i].x1 && a[i].x2 < right) //vertical
        {
            Divide(left, bot, a[i].x2, top);
            Divide(a[i].x1, bot, right, top);
            return;
        }
    }
    kq.push((right-left)*(top-bot));
}

int main()
{
    ios_base::sync_with_stdio(0);
    #ifndef ONLINE_JUDGE
    ifstream cin (FI);
    ofstream cout(FO);
    #endif // ONLINE_JUDGE
    cin >> w >> h >> n;
    for(int i = 0 ; i < n; i++){
        cin >> a[i].x1 >> a[i].y1 >> a[i].x2 >> a[i].y2;
    }
    Divide(0,0,w,h);
    while(!kq.empty()){
        cout << kq.top() <<' ';
        kq.pop();
    }
    return 0;
}
