#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>
const int N = 100 + 2;
const int dx[] = {1, -1, 0, 0};
const int dy[] = {0, 0, 1, -1};

int vis[N][N], r, c;
int cnt[N * N], tot;
bool w[N][N][4];

void dfs(int x, int y) {
	int nx, ny;
	for (int i = 0; i < 4; ++i) {
		nx = x + dx[i];
		ny = y + dy[i];
		if (nx >= 1 && nx <= r && ny >=1 && ny <= c && !w[x][y][i] && vis[nx][ny] == 0) {
			vis[nx][ny] = tot;
			++cnt[tot];
			dfs(nx, ny);
		}
	}
}

int main() {
	int K;
	int x1, y1, x2, y2;
	
	scanf("%d%d%d", &r, &c, &K);
	while (K -- > 0) {
		scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
		if (x1 == x2) {
			if (y1 > y2)
				std::swap(y1, y2);
			for (int j = y1 + 1; j <= y2; ++j)
				w[x1][j][0] = w[x1 + 1][j][1] = true;
		
		} else {
			if (x1 > x2) 
				std::swap(x1, x2);
			for (int i = x1 + 1; i <= x2; ++i)
				w[i][y1][2] = w[i][y1 + 1][3] = true;
		}
	}
	
	for (int i = 1; i <= r; ++i)
		for (int j = 1; j <= c; ++j)
			if (vis[i][j] == 0) {
				vis[i][j] = ++tot;
				cnt[tot] = 1;
				dfs(i, j);
			}
			
	//printf("%d\n", tot);
	std::sort(cnt + 1, cnt + 1 + tot);
	for (int i = 1; i <= tot; ++i) {
		if (i > 1)
			putchar(' ');
		printf("%d", cnt[i]);
	}
	puts("");
	return 0;
}

							    		 	 	  				 	