#include <bits/stdtr1c++.h>

#define MAX 100010
#define MOD 1000000007
#define clr(ar) memset(ar, 0, sizeof(ar))
#define read() freopen("lol.txt", "r", stdin)
#define dbg(x) cout << #x << " = " << x << endl
#define ran(a, b) ((((rand() << 15) ^ rand()) % ((b) - (a) + 1)) + (a))

using namespace std;

const long long INF = 8111345678373523861LL;

long long temp[128];
int ptr = 0, A[MAX], B[MAX], fact[MAX], inv[MAX], buffer[MAX * 6];

void karatsuba(int n, int *a, int *b, int *res){
    int i, j, h;
	if (n < 33){
        for (i = 0; i < (n + n); i++) temp[i] = 0;
        for (i = 0; i < n; i++){
            if (a[i]){
                for (j = 0; j < n; j++){
                    temp[i + j] += ((long long)a[i] * b[j]);
                    if (temp[i + j] > INF) temp[i + j] %= MOD;
                }
            }
        }
		for (i = 0; i < (n + n); i++) res[i] = temp[i] % MOD;
		return;
	}

	h = n >> 1;
	karatsuba(h, a, b, res);
	karatsuba(h, a + h, b + h, res + n);
	int *x = buffer + ptr, *y = buffer + ptr + h, *z = buffer + ptr + h + h;

	ptr += (h + h + n);
	for (i = 0; i < h; i++){
        x[i] = a[i] + a[i + h], y[i] = b[i] + b[i + h];
        if (x[i] >= MOD) x[i] -= MOD;
        if (y[i] >= MOD) y[i] -= MOD;
	}

	karatsuba(h, x, y, z);
	for (i = 0; i < n; i++) z[i] -= (res[i] + res[i + n]);
	for (i = 0; i < n; i++){
        res[i + h] = (res[i + h] + z[i]) % MOD;
        if (res[i + h] < 0) res[i + h] += MOD;
	}
	ptr -= (h + h + n);
}

int mul(int n, int *a, int m, int *b){
    int i, r, c = (n < m ? n : m), d = (n > m ? n : m), *res = buffer + ptr;
    r = 1 << (32 - __builtin_clz(d) - (__builtin_popcount(d) == 1));
    for (i = d; i < r; i++) a[i] = b[i] = 0;
    for (i = c; i < d && n < m; i++) a[i] = 0;
    for (i = c; i < d && m < n; i++) b[i] = 0;

    ptr += (r << 1), karatsuba(r, a, b, res), ptr -= (r << 1);
    for (i = 0; i < (r << 1); i++) a[i] = res[i];
    return (n + m - 1);
}

int expo(int a, int b){
    int res = 1;

    while (b){
        if (b & 1) res = (long long)res * a % MOD;
        a = (long long)a * a % MOD;
        b >>= 1;
    }
    return res;
}

int binomial(int n, int k){
    if (k > n) return 0;
    int x = ((long long)inv[k] * inv[n - k]) % MOD;
    return ((long long)x * fact[n]) % MOD;
}

vector <int> solve(int n, int k){
    vector <int> a, b, v;
    v.resize(MAX, 0);
    if (n == 1){
        for (int i = 1; i <= k; i++) v[i] = 1;
        return v;
    }

    int i, j, l, r;
    long long x, y, z, res;

    if (n & 1) l = n - 1, r = 1;
    else l = n >> 1, r = n >> 1;

    a = b = solve(l, k);
    if (l != r) b = solve(r, k);
    for (j = 0; j <= k; j++) a[j] = ((long long)a[j] * inv[j]) % MOD;
    for (j = 0; j <= k; j++) a[j] = ((long long)a[j] * expo(2, j * r)) % MOD;
    for (j = 0; j <= k; j++) b[j] = ((long long)b[j] * inv[j]) % MOD;

    for (i = 0; i <= k; i++) A[i] = a[i], B[i] = b[i];
    mul(k + 1, A, k + 1, B);
    for (i = 0; i <= k; i++) v[i] = ((long long)A[i] * fact[i]) % MOD;
    return v;
}

int main(){
    int i, j, k;
    long long n, x, y, res;

    for (fact[0] = 1, i = 1; i < MAX; i++) fact[i] = ((long long)i * fact[i - 1]) % MOD;
    inv[MAX - 1] = expo(fact[MAX - 1], MOD - 2);
    for (i = MAX - 2; i >= 0; i--) inv[i] = ((long long)inv[i + 1] * (i + 1)) % MOD;

    while (scanf("%lld %d", &n, &k) != EOF){
        if (n > k) res = 0;
        else{
            res = 0;
            vector <int> v = solve(n, k);
            for (i = 0; i < v.size(); i++) res = (res + ((long long)v[i] * binomial(k, i))) % MOD;
        }
        printf("%lld\n", res % MOD);
    }
    return 0;
}
