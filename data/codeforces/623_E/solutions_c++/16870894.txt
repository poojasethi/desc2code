#include<bits/stdc++.h>
#define FT first
#define SC second
#define PB push_back
#define MP make_pair
#define REP(i, l, r) for(int i = (l); i <= (r); i++)
#define PER(i, r, l) for(int i = (r); i >= (l); i--)
#define VEP(i, x) for(int i = 0; i < x.size(); i++)
#define DFOR(i, x) for(int i = hd[x]; i; i = e[i].nxt)
#define FOR(i, x) for(int i = 0; i < (x); i++)
#define ROF(i, x) for(int i = (x); i >= 0; i--);
#define MEM(a) memset(a, 0, sizeof(a));
#define rint read<int>()
#define rll read<LL>()

using namespace std;
typedef long long LL;
typedef long double LD;
const int inf = 0x7fffffff;
const int MOD = 1000000007;
const int N = 100000 + 5;
const int PRIME[3] = {1004535809, 1007681537, 1012924417};
const int GROOT[3] = {3, 3, 5};
int array_const[N], but[N], n, m, l, P, G;
LL k;
int aa[3][N], bb[N], jie[N], jieni[N], b[N], pow2[N], ans[N], s[N];

inline int power(int x, int y, int mod){
	if (!y) return 1;
	if (y == 1) return x;
	int ans = power(x, y >> 1, mod);
	ans = (LL)ans * ans % mod;
	if (y & 1) return (LL)ans * x % mod;
	else return ans;
}
template <typename tn>
inline tn read(){
	char ch; tn f = 1;
	while (!isdigit(ch = getchar())) if (ch == '-') f = -1;
	tn x = ch - '0';
	while (isdigit(ch = getchar())) x = x * 10 + ch - '0';
	return x * f;
}

void dft(int a[], int f){
	FOR(i, n) if (i < but[i]) swap(a[i], a[but[i]]);
	for (int i = 1; i < n; i <<= 1){
		int wn = power(G, f * (P - 1) / (i << 1) + P - 1, P);
		for (int j = 0; j < n; j += i << 1){
			int w = 1;
			FOR(k, i){
				int x = (LL)a[j + k + i] * w % P;
				a[j + k + i] = (a[j + k] - x + P) % P;
				a[j + k] = (a[j + k] + x) % P;
				w = (LL)w * wn % P;
			}
		}
	}
	if (f == -1){
		int t = power(n, P - 2, P);
		FOR(i, n) a[i] = (LL)a[i] * t % P;
	}
}

void mul(int a[], int temp[], int conj){
	REP(j, 0, 2){
		P = PRIME[j], G = GROOT[j];
		FOR(i, n) aa[j][i] = (LL)a[i] * power(pow2[i], conj, MOD) % MOD;
		FOR(i, n) bb[i] = temp[i];
		dft(aa[j], 1), dft(bb, 1);
		FOR(i, n) aa[j][i] = (LL)aa[j][i] * bb[i] % P;
		dft(aa[j], -1);
	}
	REP(i, 0, m){
		int p0 = PRIME[0], p1 = PRIME[1], p2 = PRIME[2];
		LL k1 = (LL)power(p0, p1 - 2, p1) * (aa[1][i] - aa[0][i] + p1) % p1;
		LL ans1 = (LL)p0 * k1 + aa[0][i];
		LL k2 = (LL)power((LL)p0 * p1 % p2, p2 - 2, p2) * (aa[2][i] - ans1 % p2 + p2) % p2;
		LL ans2 = ((LL)p0 * p1 % MOD * k2 + ans1 % MOD) % MOD;
		a[i] = ans2;
	}
}

void fft(int a[], int k){
	if (k == 1) {REP(i, 0, m) a[i] = array_const[i]; return;}
	fft(a, k / 2);
	mul(a, a, k / 2);
	if (k & 1) mul(a, array_const, 1);
}

void pre(){
	for (n = 1; n <= m * 2; n <<= 1);
	FOR(i, n) but[i] = but[i >> 1] >> 1 | (i & 1 ? (n >> 1) : 0);
	jie[0] = 1;
	REP(i, 1, n) jie[i] = (LL)jie[i - 1] * i % MOD;
	REP(i, 0, n) jieni[i] = power(jie[i], MOD - 2, MOD);
	REP(i, 1, m) array_const[i] = jieni[i];
	pow2[0] = 1;
	REP(i, 1, n) pow2[i] = pow2[i - 1] * 2 % MOD;
}

int main(){
	k = rll, m = rint;
	pre();
	if (k > m) {cout << '0' << endl; return 0;}
	fft(ans, k);
	int lastans = 0;
	REP(i, 0, m) lastans = ((LL)ans[i] * jieni[m - i] + lastans) % MOD;
	cout << (LL)lastans * jie[m] % MOD << endl;
}
