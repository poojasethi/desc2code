#include<cstdio>
#include<cmath>
#include<map>
#include<algorithm>
#define N 1000005
using namespace std;
const int maxN=10000000;
const int maxX=(int)sqrt(3*maxN/2)+2;
const int maxY=(int)sqrt(maxN/2)+2;
long long P,Q,R;int x,y,n,i,tot,ans,maxS;
int M[maxN+5],a[N],f[N],C[N];
//(x^2-y^2,2xy,x^2+y^2)
//by the solution that:
//2*x*y<=maxN
//->y<=sqrt(maxN/2)
//maxN>=x^2-y^2>=x^2-maxN/2
//->x<=sqrt(3*maxN/2)
inline int get(int u){return f[u]==u?u:f[u]=get(f[u]);}
inline void Union(int x,int y)
{
  int p,q;if (!(p=M[x])||!(q=M[y])) return;
  if (__gcd(x,y)>1) return;
  p=get(p);q=get(q);f[p]=q;
}
int main()
{
  scanf("%d",&n);
  for (i=1;i<=n;i++)
  {
    scanf("%d",&a[i]),maxS=a[i]>maxS?a[i]:maxS;
    if (!M[a[i]]) M[a[i]]=++tot,f[tot]=tot;
  }
  for (y=1;y<=maxY;y++)
    for (x=y+1;x<=maxX;x++)
    {
      P=x*1ll*x-y*1ll*y;
      Q=2ll*x*y;
      R=x*1ll*x+y*1ll*y;
      if (P<=maxS&&Q<=maxS) Union(P,Q);
      if (P<=maxS&&R<=maxS) Union(P,R);
      if (Q<=maxS&&R<=maxS) Union(Q,R);
    }
  for (i=1;i<=tot;i++)
    C[get(i)]=1;
  for (i=1;i<=tot;i++)
    ans+=C[i];
  printf("%d",ans);
  return 0;
}
