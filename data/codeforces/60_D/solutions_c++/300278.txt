#include <iostream>
#include <string.h>
#include <math.h>
using namespace std;
const long maxn = 10000001;
long f[maxn], n, maxN;

long find(long x)
{
	if (f[x]==x) return x;
	else {
		f[x] = find(f[x]);
		return f[x];
	}
}

void get(long x, long y)
{
	x = find(x);
	y = find(y);
	if (x!=y) {
		f[y] = x;
	}
}

long gcd(long x, long y)
{
	while (y>0) {
		long t = y;
		y = x%y;
		x = t;
	}
	return x;
}

int main()
{
	memset(f, 0, sizeof(f));
	cin >> n;
	for (long i = 1; i <= n; i++) {
		long x;
		cin >> x;
		f[x] = x;
		if (x>maxN) {maxN = x;}
	}
	for (long x = 1; x <= ceil(sqrt(double(maxN)/2)); x++)
		for (long y = x+1; y <= ceil(sqrt(double(maxN)*3/2)); y++) 
		if (((x+y)%2==1)&&(gcd(x, y)==1)) {
			long a = y*y-x*x, b = 2*x*y, c = x*x+y*y;
			if (a<=maxN && b<=maxN && f[a] && f[b]) get(a, b);
			if (a<=maxN && c<=maxN && f[a] && f[c]) get(a, c);
			if (b<=maxN && c<=maxN && f[b] && f[c]) get(b, c);
		}

	long ans = 0;
	for (long i = 1; i <= maxN; i++) 
		if ((f[i])&&(find(i)==i)) ans++;
	cout << ans << endl;

	return 0;
}
