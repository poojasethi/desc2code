#include <cstdio>
#include <set>

using namespace std;

#define NN 1000024
#define MM 10000024
int n, ans;
int mark[MM], a[NN];

/* Union-Find {{{ */
int p[MM], rank[MM];
void makeset(int x) { rank[p[x] = x] = 0; }
int findset(int x) { return p[x] = x != p[x] ? findset(p[x]) : p[x]; }
void linkset(int x, int y) {
	if(rank[x] > rank[y]) {
		p[y] = x;
	} else {
		p[x] = y;
		if(rank[x] == rank[y]) rank[y]++;
	}
}
void unionset(int x, int y) { linkset(findset(x), findset(y)); }
/* }}} */

void merge(int a, int b) {
	if(a < MM && b < MM && p[a] && p[b] && findset(a) != findset(b))
		unionset(a, b), ans--;
}

void gen(int a, int b, int c) {
	if(a >= MM || b >= MM) return;
	merge(a, b), merge(a, c), merge(b, c);
	gen( a - 2*b + 2*c,  2*a - b + 2*c,  2*a - 2*b + 3*c);
	gen( a + 2*b + 2*c,  2*a + b + 2*c,  2*a + 2*b + 3*c);
	gen(-a + 2*b + 2*c, -2*a + b + 2*c, -2*a + 2*b + 3*c);
}

int main(void) {
	scanf("%d", &n);
	for(int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
		makeset(a[i]);
	}

	ans = n;
	gen(3, 4, 5);

	printf("%d\n", ans);

	return 0;
}
