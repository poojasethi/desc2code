#include <bits/stdc++.h>

using namespace std;

struct car {
  int v, c, l, r;
  int i;
};

int n;
vector <car> pos[300002];
map <int, int> dp, last, prev;
int best = 0;
vector <int> ans;

int main() {
  scanf ("%d", &n);
  for (int i = 1; i <= n; i++) {
    car c;
    scanf ("%d %d %d %d", &c.v, &c.c, &c.l, &c.r);
    c.i = i;
    pos[c.c + c.l + c.r].push_back(c);
  }
  for (int i = 1; i <= 300000; i++) {
    if (pos[i].empty()) continue;
    dp.clear();
    prev.clear();
    last.clear();
    dp[0] = 1;
    last[0] = -1;
    for (int j = 0; j < (int) pos[i].size(); j++) {
      int x = dp[pos[i][j].l];
      if (x == 0) continue;
      int y = x + pos[i][j].v;
      if (dp[pos[i][j].c + pos[i][j].l] < y) {
	dp[pos[i][j].c + pos[i][j].l] = y;
	last[pos[i][j].c + pos[i][j].l] = j;
	prev[j] = last[pos[i][j].l];
      }
    }
    if (dp[i] - 1 > best) {
      int v = last[i];
      best = dp[i] - 1;
      ans.clear();
      while (v != -1) {
	ans.push_back(pos[i][v].i);
	v = prev[v];
      }
      reverse (ans.begin(), ans.end());
    }
  }
  printf ("%d\n", (int) ans.size());
  for (int i = 0; i < (int) ans.size(); i++) {
    printf ("%d ", ans[i]);
  }
  printf ("\n");
}
