#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<string>
using namespace std;
struct TRUCK{
	int v,c,l,r,d;
}t[100003];
int last[100003],now[300003],f[300003],p[100003];
bool cmp (TRUCK u,TRUCK v){
	return u.c+u.l+u.r<v.c+v.l+v.r || u.c+u.l+u.r==v.c+v.l+v.r && u.d<v.d;
}
void print (int u){
	if (u==0) return ;
	print(last[u]);
	cout << t[u].d << ' ';
	return ;
}
int main(){
	std::ios::sync_with_stdio(false);
	int i,k,n,ans=0,anst=0;
	cin >> n;
	for (i=1;i<=n;t[i].d=i,++i)
		cin >> t[i].v >> t[i].c >> t[i].l >> t[i].r;
	sort(t+1,t+n+1,cmp);
	t[0].c=-1;
	for (i=1,k=0;i<=n;++i){
		if (t[i].c+t[i].l+t[i].r!=t[i-1].c+t[i-1].l+t[i-1].r) ++k;
		p[i]=k;
		if (p[now[t[i].l+t[i].c]]!=k) f[t[i].l+t[i].c]=-1000000000;
		if (p[now[t[i].l]]==k || t[i].l==0)
			if (f[t[i].l+t[i].c]<f[t[i].l]+t[i].v){
				f[t[i].l+t[i].c]=f[t[i].l]+t[i].v;
				last[i]=now[t[i].l];
				now[t[i].l+t[i].c]=i;
			}
		if (t[i].r==0 && ans<f[t[i].l+t[i].c]){
			ans=f[t[i].l+t[i].c];
			anst=i;
		}
	}
	for (k=0,i=anst;i>0;i=last[i],++k);
	cout << k << endl;
	print(anst);
	cout << endl;
	return 0;
}
