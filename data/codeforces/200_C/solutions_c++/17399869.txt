# include<iostream>
# include<cstdio>
# include<cstring>
# include<vector>
# include<queue>
# include<list>
# include<set>
# include<map>
# include<string>
# include<cmath>
# include<cstdlib>
# include<algorithm>
using namespace std;
# define LL long long

const int N=1005;
const int INF=1000000000;

struct Football
{
	string name;
	int point;
	int diff;
	int sore;
	Football(){
		point=diff=sore=0;
	}
	bool operator < (const Football &a) const{
		if(point==a.point){
			if(diff==a.diff){
				if(sore==a.sore)
					return name<a.name;
				return sore>a.sore;
			}
			return diff>a.diff;
		}
		return point>a.point;
	}
};
Football t[9];
int n,m[4];
map<string,int>mp;

void solve(int ene)
{
	t[0]=t[ene];
	sort(t+1,t+5);
	
	int rk1,rk2;
	for(int i=1;i<=4;++i){
		if(t[i].name==t[0].name)
			rk1=i;
		if(t[i].name=="BERLAND")
			rk2=i;
	}
	if(rk2<=2){
		printf("1:0\n");
	}else{
		if(t[2].point-t[rk2].point>3)
			printf("IMPOSSIBLE\n");
		else{
			for(int d=1;;++d){
				for(int y=0;y<=50;++y){
					for(int k=5;k<=8;++k)
						t[k]=t[k-4];
					t[rk2+4].point+=3;
					t[rk2+4].sore+=y+d;
					t[rk2+4].diff+=d;
					t[rk1+4].sore+=y;
					t[rk1+4].diff-=d;
					sort(t+5,t+9);
					if(t[5].name=="BERLAND"||t[6].name=="BERLAND"){
						printf("%d:%d\n",y+d,y);
						return ;
					}
				}
			}
		}
	}
}

int main()
{
	string p,q,r;
	mp.clear();
	int cnt=0;
	memset(m,0,sizeof(m));
	for(int i=1;i<6;++i){
		cin>>p>>q>>r;
		if(mp[p]==0)
			mp[p]=++cnt;
		if(mp[q]==0)
			mp[q]=++cnt;
		int a=mp[p];
		int b=mp[q];
		++m[a],++m[b];
		int s1=r[0]-'0';
		int s2=r[2]-'0';
		t[a].name=p;
		t[b].name=q;
		t[a].sore+=s1;
		t[b].sore+=s2;
		t[a].diff+=s1-s2;
		t[b].diff+=s2-s1;
		if(s1>s2){
			t[a].point+=3;
		}else if(s1==s2){
			++t[a].point;
			++t[b].point;
		}else{
			t[b].point+=3;
		}
	}
	int ene=0;
	for(int i=1;i<=4;++i)
		if(t[i].name!="BERLAND"&&m[i]==2){
			ene=i;
			break;
		}
	solve(ene);
	return 0;
}
 	 	 	   		 	 					 				 						