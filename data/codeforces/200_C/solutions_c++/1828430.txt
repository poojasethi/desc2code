#include<iostream>
#include<cstdio>
#include<string>
#include<algorithm>
#include<utility>
using namespace std;
struct datatype
{
	string name;
	int points, diff, win, index;
	friend bool operator < (const datatype&, const datatype&);
};
bool operator < (const datatype& x, const datatype &y)
{
	if (x.points != y.points) return x.points > y.points;
	else if (x.diff != y.diff) return x.diff > y.diff;
	else if (x.win != y.win) return x.win > y.win;
	else return x.name < y.name;
}
int counts[10];
string names[10];
datatype now[5];
pair<int, int> getans()
{
	int i, j, ansx, ansy, x, y, t;
	for (t=0; counts[t]>2 || names[t]=="BERLAND"; t++);
	for (x=0; now[x].name!="BERLAND"; x++);
	for (y=0; now[y].index!=t; y++);
	now[x].points += 3;
	for (i=1; i<101; i++)
		for (j=0; j<101; j++)
		{
			now[x].diff += i;
			now[y].diff -= i;
			now[x].win += i+j;
			now[y].win += j;
			sort(now, now+4);
			for (x=0; now[x].name!="BERLAND"; x++);
			for (y=0; now[y].index!=t; y++);
			if (x < 2) return make_pair(i+j, j);
			now[x].diff -= i;
			now[y].diff += i;
			now[x].win -= i+j;
			now[y].win -= j;
		}
	return make_pair(-1, -1);
}

void init()
{
	string sa, sb, sc;
	int x, y, n = 0, a, b;
	for (int i=0; i<5; i++)
	{
		cin >> sa >> sb >> sc;
		for (x=0; x<n && names[x]!=sa; x++);
		names[x] = sa; counts[x]++; n = max(n, x+1);
		now[x].name = sa;
		for (y=0; y<n && names[y]!=sb; y++);
		names[y] = sb; counts[y]++; n = max(n, y+1);
		now[y].name = sb;
		a = sc[0]-48; b = sc[2]-48;
		if (a > b) now[x].points += 3;
		else if (a < b) now[y].points += 3;
		else now[x].points++, now[y].points++;
		now[x].diff += a-b; now[y].diff += b-a;
		now[x].win += a; now[y].win += b;
	}
	for (int i=0; i<4; i++) now[i].index = i;
}
void work()
{
	pair<int, int> ans = getans();
	if (ans.first == -1) cout << "IMPOSSIBLE\n";
	else cout << ans.first << ":" << ans.second << endl;
}
int main()
{
	init();
	work();
	return 0;
}
