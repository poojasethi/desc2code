#include <cstdio>
#include <algorithm>
#include <string>
#include <map>
#define N 25
#define fi(a, b, c) for(int a = (b); a < (c); a++)
#define fd(a, b, c) for(int a = (b); a > (c); a--)
#define FI(a, b, c) for(int a = (b); a <= (c); a++)
#define FD(a, b, c) for(int a = (b); a >= (c); a--)
#define fe(a, b) for(int a = (b); a; a = o[a])
using namespace std;

int p = 1, X, Y, z = 1 << 30, q, r;
char s[N], t[N], b[N];
map<int, int> wte;
map<string, int> m;
struct odp{
	int p, g, l, c;
	string s;
	bool operator < (const odp &T) const{
		return p != T.p ? p > T.p : (g - l != T.g - T.l ? g - l > T.g - T.l : (g != T.g ? g > T.g : s < T.s));
	}
} c[5], d[5];

int main(){
	fi(i, 0, 5){
		int a, b;
		scanf("%s %s %d:%d", s, t, &a, &b);
		string S(s), T(t);
		if(!m[S]){
			c[p].s = S;
			m[S] = p++;
		}
		if(!m[T]){
			c[p].s = T;
			m[T] = p++;
		}
		
		c[m[S]].c++;
		c[m[T]].c++;
		c[m[S]].g += a;
		c[m[T]].l += a;
		c[m[T]].g += b;
		c[m[S]].l += b;
		
		if(a > b){
			c[m[S]].p += 3;
		}else if(a == b){
			c[m[S]].p++;
			c[m[T]].p++;
		}else{
			c[m[T]].p += 3;
		}
	}
	
	string x = "BERLAND";
	q = m[x];
	
	fi(i, 1, 5) if(c[i].s != x && c[i].c == 2) r = i;
	
	fi(i, 0, 81) fi(j, 0, i){
		fi(k, 1, 5) d[k] = c[k];
		d[q].p += 3;
		d[q].g += i;
		d[q].l += j;
		d[r].g += j;
		d[r].l += i;
		
		sort(d + 1, d + 5);
		bool fg = 0;
		fi(i, 1, 3) if(d[i].s == x) fg = 1;
		
		if(fg){
			if(i - j < z || i - j == z && j < Y) X = i, Y = j, z = X - Y;
		}
	}
	
	if(z < 1 << 30) printf("%d:%d\n", X, Y);
	else puts("IMPOSSIBLE");
	scanf("\n");
}
