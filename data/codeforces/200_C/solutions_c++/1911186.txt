#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <iostream>
#include <map>
#define SZ(x) ((int)(x).size())
#define FOR(it,c) for ( __typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++ )
using namespace std;

map<string, int> sc, goal, missed, ch;
int main(void) {
	string a, b, c;
	for(int i=0;i<5;i++) {
		cin >> a >> b >> c;
		int s, t;
		sscanf(c.c_str(), "%d:%d", &s, &t);
		if(s > t) sc[a] += 3;
		if(s < t) sc[b] += 3;
		if(s == t) sc[a]++, sc[b]++;
		goal[a] += s; missed[a] += t;
		goal[b] += t; missed[b] += s;
		ch[a]++;
		ch[b]++;
	}
	string me = "BERLAND", other;
	for(map<string, int>::iterator it = ch.begin(); it != ch.end(); it++)
		if(it->second == 2 && it -> first != "BERLAND")
			other = it->first;
	for(int DIF=1;DIF<=40;DIF++) {
		for(int Y=0;Y<=40;Y++) {
			int X = Y+DIF;
			sc[me] += 3;
			goal[me] += X; missed[me] += Y;
			goal[other] += Y; missed[other] += X;
			int cnt = 0;
			for(map<string, int>::iterator it = ch.begin(); it != ch.end(); it++) {
				if (it->first == me) continue;
				if (sc[it->first] > sc[me]) { ++cnt; continue; }
				if (sc[it->first] < sc[me]) continue;
				int v = (goal[it->first] - missed[it->first]);
				int vm = goal[me] - missed[me];
				if (v > vm) { ++cnt; continue; }
				if (v < vm) continue;
				v = goal[it->first];
				vm = goal[me];
				if (v > vm) { ++cnt; continue; }
				if (v < vm) continue;
				if (it->first < me) { ++cnt; continue; }
			}
			if (cnt <= 1) {
				printf("%d:%d\n", X, Y);
				return 0;
			}

			goal[me] -= X; missed[me] -= Y;
			goal[other] -= Y; missed[other] -= X;
			sc[me] -= 3;
		}
	}
	puts("IMPOSSIBLE");
	return 0;
}

