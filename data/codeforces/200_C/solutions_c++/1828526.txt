#include <cstdio>
#include <cstring>
#include <map>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;
const int maxn = 1000005;
int n, t;

struct Node {
	int point;
	int get, lose;
	string name;
	Node(int a, int b, string c, int d): get(a), lose(b), name(c), point(d) {}
	bool operator<(const Node& r) const {
		if (point != r.point) return point > r.point;
		if (get - lose != r.get - r.lose) return get - lose > r.get - r.lose;
		if (get != r.get) return get > r.get;
		return name < r.name;
	}
};

string name[6];
int value[6];

bool bg[6][6];
int pl[6][6], mi[6][6];

int main() {
	map<string, int> im;
	int ID = 0;
	char s1[40], s2[40];
	int g1, g2;

	for (int i = 0; i < 5; ++i) {
		scanf("%s%s%d:%d", s1, s2, &g1, &g2);
		if (!im.count(s1)) { im[s1] = ++ID; name[ID] = string(s1); }
		if (!im.count(s2)) { im[s2] = ++ID; name[ID] = string(s2); }
		int a = im[s1], b = im[s2];
		bg[a][b] = true, pl[a][b] = g1, mi[a][b] = g2;
		bg[b][a] = true, pl[b][a] = g2, mi[b][a] = g1;
	}

	for (int i = 1; i <= 4; ++i)
		for (int j = 1; j <= 4; ++j) if (i != j && !bg[i][j]) {
			int a, b;
			if (im["BERLAND"] == i) a = i, b = j;
			else b = i, a = j;
			for (int len = 1; len < 100; ++len)
				for (int Y = 0; Y < 100; ++Y) {
					int X = Y + len;
					pl[a][b] = X, mi[a][b] = Y;
					pl[b][a] = Y, mi[b][a] = X;

					vector<Node> iv;
					for (int k = 1; k <= 4; ++k) {
						int get = 0, lose = 0, point = 0;
						for (int q = 1; q <= 4; ++q) if (q != k) {
							get += pl[k][q], lose += mi[k][q];
							if (pl[k][q] > mi[k][q]) point += 3;
							else if (pl[k][q] == mi[k][q]) point += 1;
						}
						iv.push_back(Node(get, lose, name[k], point));
					}
					sort(iv.begin(), iv.end());
					if (iv[0].name == "BERLAND" || iv[1].name == "BERLAND") {
						//for (int i = 0; i < 4; ++i) printf("%s %d %d %d\n", iv[i].name.c_str(), iv[i].point,  iv[i].get - iv[i].lose, iv[i].get);
						printf("%d:%d\n", X, Y);
						return 0;
					}
				}
			printf("IMPOSSIBLE\n");
			return 0;
		}

	return 0;
}
