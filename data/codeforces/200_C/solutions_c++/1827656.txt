#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
using namespace std;

int N=0;
struct st
{
	string n;
	int p, s, m, cnt;
	bool operator<(const st &rhs) const
	{
		if (p != rhs.p) return p > rhs.p;
		else if (s-m != rhs.s-rhs.m) return s-m>rhs.s-rhs.m;
		else if (s != rhs.s) return s>rhs.s;
		else return n < rhs.n;
	}
}t[5];
string s1, s2;

int hmr()
{
	for (int i = 0; i < 4; ++i)
		if (t[i].n=="BERLAND") return i;
}

int mdk()
{
	for (int i = 0; i < 4; ++i)
		if (t[i].n!="BERLAND" && t[i].cnt==2) return i;
}

void add(string str, int s, int m, bool a)
{
	int i;
	for (i = 0; i < N; ++i)
		if (str==t[i].n) break;
	if (i==N) t[N++].n = str;
	t[i].s += s;
	t[i].m += m;
	if (a)
	{
		if (s > m) t[i].p += 3;
		else if (s == m) t[i].p += 1;
		t[i].cnt++;
	}
	else
	{
		if (s < m) t[i].p -= 3;
		else if (s == m) t[i].p -= 1;
	}
}



bool solve(int &x, int &y)
{
	for (int d = 1; d<=54; ++d)
		for (y = 0; y <= 54; ++y)
		{
			x = y+d;
			add(s1, x, y, 1);
			add(s2, y, x, 1);
			sort(t, t+4);
			if (hmr()<2) return 1;
			add(s1, -x, -y, 0);
			add(s2, -y, -x, 0);
		}
	return 0;
}

int main()
{
	int i, j, k;
	t[N++].n = "BERLAND";
	for (i = 0; i < 5; ++i)
	{
		cin>>s1>>s2;
		scanf("%d:%d", &j, &k);
		add(s1, j, k, 1);
		add(s2, k, j, 1);
	}
	s1 = "BERLAND";
	s2 = t[mdk()].n;
	int x, y;
	if (solve(x, y)) printf("%d:%d\n", x, y);
	else puts("IMPOSSIBLE");
	return 0;
}
