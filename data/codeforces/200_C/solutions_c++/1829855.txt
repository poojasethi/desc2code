#include <cstdio>
#include <map>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

map<string, int> p;
map<string, int> s;
map<string, int> m;
map<string, int> g;

string left, berl = "BERLAND";

struct Team
{
	string name;
	int p, s, m;
	
	bool operator<(const Team& t) const
	{
		if (p > t.p) return 1;
		if (p < t.p) return 0;
		int d1 = s-m;
		int d2 = t.s-t.m;
		if (d1 > d2) return 1;
		if (d1 < d2) return 0;
		if (s > t.s) return 1;
		if (s < t.s) return 0;
		return name < t.name;
	}
};

bool solve(int x, int y)
{
	map<string, int> pp = p;
	map<string, int> ss = s;
	map<string, int> mm = m;
	
	pp[berl] += 3;
	ss[berl] += x;
	mm[berl] += y;
	ss[left] += y;
	mm[left] += x;
	
	vector<Team> vet;
	for (typeof(g.begin()) it = g.begin(); it != g.end(); ++it)
	{
		Team t;
		t.name = it->first;
		t.p = pp[it->first];
		t.s = ss[it->first];
		t.m = mm[it->first];
		vet.push_back(t);
	}
	sort(vet.begin(), vet.end());
	if (vet[0].name == berl || vet[1].name == berl) return 1;
	return 0;
}

int main()
{
	char aux1[100], aux2[100];
	int a, b;
	
	for (int i = 0; i < 5; ++i)
	{
		scanf(" %s %s %d:%d ", aux1, aux2, &a, &b);
		if (a > b) p[aux1] += 3;
		else if (a == b) p[aux1]++, p[aux2]++;
		else p[aux2]+= 3;
		s[aux1] += a;
		m[aux2] += a;
		s[aux2] += b;
		m[aux1] += b;
		g[aux1]++;
		g[aux2]++;
	}
	
	for (typeof(g.begin()) it = g.begin(); it != g.end(); ++it)
	{
		if (it->second != 3 && it->first != berl) 
			left = it->first;
	}
	
	//printf("%s\n", left.c_str());
	
	for (int i = 1; i < 100; ++i)
	{
		for (int y = 0; y < 100; ++y)
		{
			int x = y+i;
			if (solve(x, y))
			{
				printf("%d:%d\n", x, y);
				return 0;
			}
		}
	}
	
	printf("IMPOSSIBLE\n");
	
	return 0;
}

