#include <bits/stdc++.h>
using namespace std;
#define MAXN 21
#define INF 1e9

int cost[MAXN][MAXN];
int n, max_match;
int lx[MAXN], ly[MAXN];
int xy[MAXN];
int yx[MAXN];
bool S[MAXN], T[MAXN];
int slack[MAXN];
int slackx[MAXN];
int prev[MAXN];
int q[MAXN];

void init_labels() {
	memset(lx, 0, sizeof lx);
	memset(ly, 0, sizeof ly);
	for (int x = 0; x < n; x++)
		for (int y = 0; y < n; y++) lx[x] = max(lx[x], cost[x][y]);
}

void update_labels() {
	int x, y, delta = INF;

	for (y = 0; y < n; y++)
		if (!T[y]) delta = min(delta, slack[y]);
	for (x = 0; x < n; x++)
		if (S[x]) lx[x] -= delta;
	for (y = 0; y < n; y++)
		if (T[y]) ly[y] += delta;
		else slack[y] -= delta;
}

void add_to_tree(int x, int prevx) {
	S[x] = true;
	prev[x] = prevx;
	for (int y = 0; y < n; y++)
		if (lx[x] + ly[y] - cost[x][y] < slack[y]) {
			slack[y] = lx[x] + ly[y] - cost[x][y];
			slackx[y] = x;
		}
}

void augment() {
	if (max_match == n) return;
	int x, y, root;
	int wr = 0, rd = 0;

	memset(S, 0, sizeof S);
	memset(T, 0, sizeof T);
	memset(prev, -1, sizeof prev);
	for (x = 0; x < n; x++)
		if (xy[x] == -1) break;
	q[wr++] = root = x;
	prev[x] = -2;
	S[x] = true;
	for (y = 0; y < n; y++) {
		slack[y] = lx[root] + ly[y] - cost[root][y];
		slackx[y] = root;
	}

	while (true) {
		while (rd < wr) {
			x = q[rd++];
			for (y = 0; y < n; y++)
				if (cost[x][y] == lx[x] + ly[y] && !T[y]) {
					if (yx[y] == -1) break;
					T[y] = true;
					q[wr++] = yx[y];
					add_to_tree(yx[y], x);
				}
			if (y < n) break;
		}
		if (y < n) break;
		update_labels();
		wr = rd = 0;
		for (y = 0; y < n; y++)
			if (!T[y] && !slack[y]) {
				if (yx[y] == -1) {
					x = slackx[y];
					break;
				} else {
					T[y] = true;
					if (!S[yx[y]]) {
						q[wr++] = yx[y];
						add_to_tree(yx[y], slackx[y]);
					}
				}
			}
		if (y < n) break;
	}

	if (y < n) {
		max_match++;
		for (int cx = x, cy = y, ty; cx != -2; cx = prev[cx], cy = ty) {
			ty = xy[cx];
			yx[cy] = cx;
			xy[cx] = cy;
		}
		augment();
	}
}

int ans;

int hungarian() {
	int x, rlt;

	max_match = 0;
	memset(xy, -1, sizeof(xy));
	memset(yx, -1, sizeof(yx));
	init_labels();
	augment();
	for (rlt = x = 0; x < n; x++) rlt += cost[x][xy[x]];
    return rlt;
}

int vis[21], a[21][21], b[21][21], nn;
int suma[21], sumb[21], id[21];
int A[190000];
bool com[190001];
int cnt;

int calc(int bit) {
    n = nn;
    for(int i = 0; i < nn; i ++) for(int j = 0; j < nn; j ++) if(vis[i]) cost[i][j] = a[i][j]; else cost[i][j] = b[i][j];
    int result = hungarian();
    bool more = 1;
    while(more) {
        more = 0;
        for(int i = 0; i < nn; i ++) for(int j = 0; j < nn; j ++) if(vis[i] && !vis[j]) {
            int x = xy[i], y = xy[j];
            if(a[i][x] + b[j][y] < b[i][x] + a[j][y]) {
                swap(vis[i], vis[j]);
                more = 1;
                result += (a[j][y] + b[i][x] - a[i][x] - b[j][y]);
                return result;
                break;
            }
            if(a[i][x] + b[j][y] < b[i][y] + a[j][x]) {
                swap(vis[i], vis[j]);
                more = 1;
                result += (b[i][y] + a[j][x] - a[i][x] - b[j][y]);
                xy[i] = y;
                xy[j] = x;
                return result;
                break;
            }
        }
        break;
    }
    return result;
}


int main() {
    //freopen("1.in", "r", stdin);
    while(scanf("%d", &nn) > 0) {
        double start = clock();
        for(int i = 0; i < nn; i ++) for(int j = 0; j < nn; j ++) scanf("%d", &a[i][j]);
        for(int i = 0; i < nn; i ++) for(int j = 0; j < nn; j ++) scanf("%d", &b[i][j]);
        ans = 0;
        cnt = 0;
        for(int i = 0; i < (1 << nn); i ++) {
            int x = __builtin_popcount(i);
            if(x * 2 != nn) continue;
            A[cnt ++] = i;
        }
        while(clock() - start < 1900) {
            int x = 1ll * rand() * rand() % cnt;
            if(com[x]) continue;
            com[x] = 1;
            memset(vis, 0, sizeof(vis));
            for(int j = 0; j < nn; j ++) if(A[x] & (1 << j)) vis[j] = 1;
            ans = max(ans, calc(A[x]));
        }
        printf("%d\n", ans);
    }
}
