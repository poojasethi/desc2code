#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;

const int N=21,inf=(int)1e9+7;

int n,m;

int a[N][N],b[N][N],c[N][N],w[N][N];

int laba[N],labb[N];
int mat[N];
int tim,visa[N],visb[N];

bool extend(int u){
	if(!u) return true;
	visa[u]=tim;
	for(int v=1;v<=n;v++) if(visb[v]!=tim&&laba[u]+labb[v]==w[u][v]){
		visb[v]=tim;
		if(extend(mat[v])){
			mat[v]=u;
			return true;
		}
	}
	return false;
}

void change(){
	int delta=inf;
	for(int i=1;i<=n;i++) if(visa[i]==tim)
		for(int j=1;j<=n;j++) if(visb[j]!=tim)
			delta=min(delta,laba[i]+labb[j]-w[i][j]);
	for(int i=1;i<=n;i++){
		if(visa[i]==tim) laba[i]-=delta;
		if(visb[i]==tim) labb[i]+=delta;
	}
}

int KM(){
	for(int i=1;i<=n;i++){
		laba[i]=w[i][0];
		labb[i]=0;
		mat[i]=0;
	}
	for(int i=1;i<=n;i++)
		for(;;){
			tim++;
			if(extend(i)) break;
			change();
		}
	int ans=0;
	for(int i=1;i<=n;i++) ans+=w[mat[i]][i];
	return ans;
}


int ans=0;

int ttt=0;

void dfs(int i,int cnt){
	int now=KM();
	if(++ttt>1e5||now<=ans) return;
	if(i==n){
		ans=now;
		return;
	}
	++i;
	if(n-i+1-(m-cnt)>=m-cnt){
		if(m-cnt<n-i+1){
			memcpy(w[i],a[i],sizeof(int)*(n+1));
		//	for(int j=0;j<=n;j++) w[i][j]=a[i][j];
			dfs(i,cnt);
		}
		if(now>ans&&cnt<m){
			memcpy(w[i],b[i],sizeof(int)*(n+1));
		//	for(int j=0;j<=n;j++) w[i][j]=b[i][j];
			dfs(i,cnt+1);
		}
	}
	else{
		if(cnt<m){
			memcpy(w[i],b[i],sizeof(int)*(n+1));
		//	for(int j=0;j<=n;j++) w[i][j]=b[i][j];
			dfs(i,cnt+1);
		}
		if(now>=ans&&m-cnt<n-i+1){
			memcpy(w[i],a[i],sizeof(int)*(n+1));
		//	for(int j=0;j<=n;j++) w[i][j]=a[i][j];
			dfs(i,cnt);
		}
	}
	memcpy(w[i],c[i],sizeof(int)*(n+1));
//	for(int j=0;j<=n;j++) w[i][j]=c[i][j];
}

int main(){
	scanf("%d",&n);
	m=n/2;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
			scanf("%d",&a[i][j]),a[i][0]=max(a[i][0],a[i][j]);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
			scanf("%d",&b[i][j]),b[i][0]=max(b[i][0],b[i][j]);
	for(int i=1;i<=n;i++)
		for(int j=0;j<=n;j++)
			w[i][j]=c[i][j]=max(a[i][j],b[i][j]);
	dfs(0,0);
	printf("%d\n",ans);
}