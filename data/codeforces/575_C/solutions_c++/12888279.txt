#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for(int i = (a); i < (b); i++)
#define FORd(i, a, b) for(int i = (a) - 1; i >= (b); i--)
#define sz(a) int((a).size())
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
ll gcd(ll a, ll b) {ll r; while (b != 0) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}

#define maxn 21
#define inf 1000000000
struct Hungary {
	int nx, ny, cost[maxn][maxn], fx[maxn], fy[maxn], maty[maxn], which[maxn], dist[maxn];
	bool used[maxn];
	void init(int _nx, int _ny) {
		nx = _nx; ny = _ny; memset(fx, 0, sizeof(fx)); memset(fy, 0, sizeof(fy)); memset(maty, 0, sizeof(maty)); memset(which, 0, sizeof(which)); memset(dist, 0, sizeof(dist));
		for (int i = 0; i <= nx; i++) for (int j = 0; j <= ny; j++) cost[i][j] = inf;
	}
	void add(int x, int y, int c) {cost[x][y] = c;}
	int mincost() {
		for (int x = 1; x <= nx; x++) {
			int y0 = 0; maty[0] = x;
			for (int y = 0; y <= ny; y++) {dist[y] = inf + 1; used[y] = false;}
			do {
				used[y0] = true;
				int x0 = maty[y0], delta = inf + 1, y1;
				for (int y = 1; y <= ny; y++) if (!used[y]) {
					int curdist = cost[x0][y] - fx[x0] - fy[y];
					if (curdist < dist[y]) {
						dist[y] = curdist;
						which[y] = y0;
					}
					if (dist[y] < delta) {
						delta = dist[y];
						y1 = y;
					}
				}
				for (int y = 0; y <= ny; y++) if (used[y]) {
					fx[maty[y]] += delta;
					fy[y] -= delta;
				} else dist[y] -= delta;
				y0 = y1;
			}
			while (maty[y0] != 0);
			do {
				int y1 = which[y0];
				maty[y0] = maty[y1];
				y0 = y1;
			}
			while (y0);
		}
		int ret = 0;
		for (int y = 1; y <= ny; y++) {
			int x = maty[y];
			if (cost[x][y] < inf) ret += cost[x][y];
		}
		return ret;
	}
} hungary;

int n;
int a[maxn][maxn];
int b[maxn][maxn];

void solve() {
	scanf("%d", &n);
	FOR(i, 0, n) FOR(j, 0, n) scanf("%d", &a[i][j]);
	FOR(i, 0, n) FOR(j, 0, n) scanf("%d", &b[i][j]);
	int ans = 0;
	FORd(i, 1 << n, 0) {
        if (clock() > 1900) break;
		bool flag[maxn]; ms(flag, 0); int cnt = 0;
		FOR(j, 0, n) if (i & 1 << j) {flag[j] = 1; cnt++;}
		if (cnt != n >> 1) continue;
		hungary.init(n, n);
		FOR(j, 0, n) FOR(k, 0, n) {
			if (flag[k]) hungary.add(j + 1, k + 1, -a[j][k]);
			else hungary.add(j + 1, k + 1, -b[j][k]);
		}
		ans = min(ans, hungary.mincost());
	}
	printf("%d", -ans);
}

int main() {
	//ios_base::sync_with_stdio(0); cin.tie(NULL);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
