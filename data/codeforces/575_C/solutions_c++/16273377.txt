#include<cstdio>
#include<ctime>
#include<cstring>
#include<algorithm>
#include<cstdlib>
using namespace std;
int a[120][120];
int b[120][120],n;
const int inf=(int)1e9;
int pl[120],pr[120],lx[120],ly[120],link[120];
int cnt,pos[220000],ans;
inline int count(int x)
{
	int ss=0;
	while (x!=0)
	{
		ss++;
		x-=(x&(-x));
	}
	return ss;
}
int dis[120][120];
int ck;
int slk[120],visx[120],visy[120],lck[120];
inline bool dfs(int x)
{
	visx[x]=ck;
	for (int i=1;i<=n;i++)
	{
		if(visy[i]==ck)continue;
		int d=lx[x]+ly[i]-dis[x][i];
		if(d==0)
		{
			visy[i]=ck;
			if(link[i]==-1||dfs(link[i]))
			{
				link[i]=x;
				lck[x]=i;
				return true;
			}
		}
		else
		{
			slk[i]=min(slk[i],d);
		}
	}
	return false;
}
inline int km()
{
	int tp=ans;
	for (int i=1;i<=n;i++)
	{
		lx[i]=-inf;
		for (int j=1;j<=n;j++)
		{
			lx[i]=max(lx[i],dis[i][j]); 
		}
		tp-=lx[i];
	}
	if(tp>=0)return 0;
	memset(link,-1,sizeof(link));
	for (int i=1;i<=n;i++)
	{
		while (1)
		{
			ck++;
			for (int j=1;j<=n;j++)
			{
				slk[j]=inf;
			}
			if(dfs(i))break;
			int d=inf;
			for (int j=1;j<=n;j++)
			{
				if(visy[j]!=ck)d=min(d,slk[j]);
			}
			for (int j=1;j<=n;j++)
			{
				if(visx[j]==ck)lx[j]-=d;
			}
			for (int j=1;j<=n;j++)
			{
				if(visy[j]==ck)ly[j]+=d;
			}
		}
	}
	int res=0;
	for (int i=1;i<=n;i++)
	{
		res+=dis[i][lck[i]];
	}
	return res;
}
int main()
{
	//2
	srand(time(0));
	scanf("%d",&n);
	for (int i=1;i<=n;i++)
	{
		for (int j=1;j<=n;j++)
		{
			scanf("%d",&a[i][j]);
		}
	}
	for (int i=1;i<=n;i++)
	{
		for (int j=1;j<=n;j++)
		{
			scanf("%d",&b[i][j]);
		}
	}
	for (int i=0;i<(1<<n);i++)
	{
		if(count(i)==n/2)
		{
			cnt++;
			pos[cnt]=i;
		}
	}
	for (int i=1;i<=n;i++)
	{
		pl[i]=i;pr[i]=i;
	}
	random_shuffle(pos+1,pos+cnt+1);
	random_shuffle(pl+1,pl+n+1);
	random_shuffle(pr+1,pr+n+1);
	while (cnt--)
	{
		for (int i=1;i<=n;i++)
		{
			for (int j=1;j<=n;j++)
			{
				if((pos[cnt+1]&(1<<(i-1)))!=0)
				{
					dis[pl[i]][pr[j]]=a[i][j];
				}
				else
				{
					dis[pl[i]][pr[j]]=b[i][j];
				}
			}
		}
		ans=max(ans,km());
//		printf("%d %d\n",pos[cnt+1],ans);
		if(clock()>1.9*CLOCKS_PER_SEC)break;
	}
	printf("%d\n",ans);
	return 0;
}
