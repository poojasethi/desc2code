//BE NAME DOOST
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

const int MAXN=100005;
vector <int> G[MAXN];
bool mark[MAXN]={false},p=false,f=false;
int dep[MAXN]={-1},r=-1;
int depth=0,n,m,k;

void DFS (int n)
{
	if(f)
		return;
	dep[n]=depth++;
	
	mark[n]=true;
	for(int i=0;i<G[n].size();i++)
	{
		if(!mark[ G[n][i] ]){
			DFS( G[n][i] );
			if(p)
				break;
		}
		else if(abs(dep[n]-dep[ G[n][i] ])+1 > k && !f)
		{
			p=true;
			cout<<abs(dep[n]-dep[ G[n][i] ])+1<<endl<<n<<" ";
			r=G[n][i];
			depth--;
			return;
		}
	}
	if(p)
	{
		cout<<n<<" ";
		if(n==r){
			p=false;
			f=true;
		}
	}
	depth--;
}

int main()
{
	
	cin>>n>>m>>k;
	for(int i=0;i<m;i++)
	{
		int a,b;
		cin>>a>>b;
		G[a].push_back(b);
		G[b].push_back(a);
	}
	DFS(1);
}
