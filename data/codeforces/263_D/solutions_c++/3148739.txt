#include <vector>
#include <cstdlib>
#include <cstring>
#include <iostream>

using namespace std;

const int max_v = 1e5 + 15;

int V, E, k, x, y, d[max_v], prev[max_v];
vector<int> adj[max_v];

void dfs(int curr)
{
  for (vector <int>::iterator it = adj[curr].begin(); it != adj[curr].end(); it++)
    if (!~d[*it]) d[*it] = d[curr] + 1, prev[*it] = curr, dfs(*it);
    else if (d[curr] - d[*it] >= k)
    {
      cout << d[curr] - d[*it] + 1 << endl;
      for (; curr != *it; curr = prev[curr]) cout << curr + 1 << " ";
      cout << *it + 1;
      exit(0);
    }
}

int main()
{
  memset(d, -1, sizeof d);
  cin >> V >> E >> k;
  while (E--)
  {
    cin >> x >> y;
    adj[--x].push_back(--y);
    adj[y].push_back(x);
  }
  dfs(0);
  return 0;
}
