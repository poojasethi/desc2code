#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
vector <int> a[100010];
int V[100010], visited[100010];
int K, f = 1;
int dfs (int u, int k) {
	int s, t, i, j;
	V[u] = k;
	visited[u] = 1;
	for (s = a[u].size(), i = 0; i < s && f ; i ++) {
		if (V[a[u][i]]) {
			if ( k - V[a[u][i]] >= K) {
				f = 0;
				cout << k-V[a[u][i]] + 1<< endl;
				cout << u << " ";
				return a[u][i];
			}
		}
		else if (visited[a[u][i]] != 1 && (t = dfs(a[u][i], k+1))) {
			cout << u << " ";
			if ( u == t)
				u = 0;
			else
				u = t;
			return u;
		}
	}
	visited[u] = 0;
	return 0;
}
int main ()
{
	int i, j, p, q, m, n;
	cin >> n >> m >> K;
	for (i = 1; i <= m; i ++) {
		cin >> p >> q;
		a[p].push_back(q);
		a[q].push_back(p);
	}
	dfs (1, 1);
	cout << endl;
	return 0;
}
