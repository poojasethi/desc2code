n, m, k = map(int, raw_input().strip().split(' '))
edges = [[] for _ in xrange(n)]

for _ in xrange(m):
    a, b = map(int, raw_input().strip().split(' '))
    a -= 1; b -= 1
    edges[a].append(b)
    edges[b].append(a)

els = [len(edge) for edge in edges]
was = [False for _ in xrange(n)]
was[0] = True
nodes = [-1 for _ in xrange(n)]
nodes[0] = 0
indexes = [0 for _ in xrange(n)]
counter = 1
curr = 0

while True:
    # Works because min deg is k and there are only (k - 1) bad ancestors
    # so we will get in the elif branch at most in the nth iteration.
    for edge in edges[curr]:
        if not was[edge]:
            was[edge] = True
            curr = edge
            nodes[counter] = edge
            indexes[edge] = counter
            counter += 1
            break
        elif counter >= k + 1 and counter - indexes[edge] >= k + 1:
            print counter - indexes[edge]
            print ' '.join(map(lambda x: str(x + 1), nodes[indexes[edge]:counter]))
            exit()
