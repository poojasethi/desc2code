#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <fstream>
#include <queue>

using namespace std;

const int N = 75;
const int inf = ~0U >> 3;

struct Node{
    int a, b, c;
    Node() {}
    Node(int a, int b, int c): a(a), b(b), c(c) {}
};
int dp[N][N][N];
char str[N][N];
int a, b, c, n;

void _sort(int &a, int &b, int &c){
    if(a > b) swap(a, b);
    if(b > c) swap(b, c);
    if(a > b) swap(a, b);
}
inline int get_dp(int a, int b, int c){
    _sort(a, b, c);
    return dp[a][b][c];
}
inline void set_dp(int a, int b, int c, int val){
    _sort(a, b, c);
    dp[a][b][c] = val;
}
int bfs(int x, int y, int z){
    _sort(x, y, z);
    queue<Node> Q;
    dp[1][2][3] = 0;
    Q.push(Node(1, 2, 3));
    while(Q.size()){
        int a = Q.front().a, b = Q.front().b, c = Q.front().c;
        Q.pop();

        _sort(a, b, c);
        if(a == x and b == y and c == z) return dp[a][b][c];
        for(int i = 1; i <= n; ++i){
            if(i != a and i != b and i != c){
                if(str[i][a] == str[b][c] and get_dp(i, b, c) == -1) Q.push(Node(i, b, c)), set_dp(i, b, c, dp[a][b][c] + 1); 
                if(str[i][b] == str[a][c] and get_dp(a, i, c) == -1) Q.push(Node(a, i, c)), set_dp(a, i, c, dp[a][b][c] + 1); 
                if(str[i][c] == str[a][b] and get_dp(a, b, i) == -1) Q.push(Node(a, b, i)), set_dp(a, b, i, dp[a][b][c] + 1); 
            }
        }
    }
    return -1;
}
void get_ans(int a, int b, int c){
    _sort(a, b, c);
    if(a == 1 and b == 2 and c == 3) return;
    for(int i = 1; i <= n; ++i)
        if(i != a and i != b and i != c and str[i][a] == str[b][c] and get_dp(i, b, c) + 1 == dp[a][b][c]){
            printf("%d %d\n", a, i);
            get_ans(i, b, c);
            return;
        }
            
    for(int i = 1; i <= n; ++i)
        if(i != a and i != b and i != c and str[i][b] == str[a][c] and get_dp(a, i, c) + 1 == dp[a][b][c]){
            printf("%d %d\n", b, i);
            get_ans(a, i, c);
            return;
        }

    for(int i = 1; i <= n; ++i)
        if(i != a and i != b and i != c and str[i][c] == str[a][b] and get_dp(a, b, i) + 1 == dp[a][b][c]){
            printf("%d %d\n", c, i);
            get_ans(a, b, i);
            return;
        }
}
int main(){
    memset(dp, -1, sizeof(dp));
    scanf("%d %d %d %d", &n, &a, &b, &c);
    for(int i = 1; i <= n; ++i)
        scanf("%s", str[i] + 1);
    
    int ret = bfs(a, b, c);
    printf("%d\n", ret), get_ans(a, b, c);
    return 0;
}