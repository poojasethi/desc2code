#include <iostream>
#include <string>
#include <queue>
#include <map>
#include <cstring>
#include <vector>
using namespace std;

const int MAXn = 70 + 13;

vector<pair<int, int> > moves;

class state{
	public:
	int a, b, c, d, par;
	bool first;
};

int n;
string s[MAXn];

bool sat(const state &st){
	bool mark[MAXn];
	memset(mark, 0, sizeof mark);
	mark[st.a] = true;
	mark[st.b] = true;
	mark[st.c] = true;
	return mark[0] && mark[1] && mark[2];
}

state q[70 * 70 * 70 * 6 + 13];

void findout(const state &a, const state &b){
	if(a.a != b.a)
		moves.push_back(make_pair(a.a+1, b.a+1));
	else if(a.b != b.b)
		moves.push_back(make_pair(a.b+1, b.b+1));
	else
		moves.push_back(make_pair(a.c+1, b.c+1));
}

bool mark[MAXn][MAXn][MAXn];

int main(){
	cin >> n;
	state st;
	cin >> st.a >> st.b >> st.c;
	st.a--; st.b--; st.c--;
	for(int i = 0; i < n; i++)
		cin >> s[i];
	st.d = 0;
	st.first = true;
	int head = 0, tail = 0;
	q[tail++] = st;
	mark[st.a][st.b][st.c] = true;
	int ans = -1, ind = 0;
	while(head < tail){
		state v = q[head];
		//cerr << v.a+1 << " " << v.b+1 << " " << v.c+1 << "\t" << v.d << endl;
		if(sat(v)){
			ans = v.d;
			ind = head;
			break;
		}
		// a
		for(int i = 0; i < n; i++)
			if(!mark[i][v.b][v.c] && s[v.a][i] == s[v.b][v.c] && i != v.a && i != v.b && i != v.c){
				state add;
				add.a = i;
				add.b = v.b;
				add.c = v.c;
				add.d = v.d + 1;
				add.first = false;
				add.par = head;
				q[tail++] = add;
				mark[add.a][add.b][add.c] = true;
			}
		// b
		for(int i = 0; i < n; i++)
			if(!mark[v.a][i][v.c] && s[v.b][i] == s[v.a][v.c] && i != v.a && i != v.b && i != v.c){
				state add;
				add.a = v.a;
				add.b = i;
				add.c = v.c;
				add.d = v.d + 1;
				add.first = false;
				add.par = head;
				q[tail++] = add;
				mark[add.a][add.b][add.c] = true;
			}
		// c
		for(int i = 0; i < n; i++)
			if(!mark[v.a][v.b][i] && s[v.c][i] == s[v.a][v.b] && i != v.a && i != v.b && i != v.c){
				state add;
				add.a = v.a;
				add.b = v.b;
				add.c = i;
				add.d = v.d + 1;
				add.first = false;
				add.par = head;
				q[tail++] = add;
				mark[add.a][add.b][add.c] = true;
			}
		head++;
	}
	cout << ans << endl;
	while(!q[ind].first){
		int par = q[ind].par;
		//cerr << " : " << par << " " << ind << endl;
		findout(q[par], q[ind]);
		ind = par;
	}
	for(int i = moves.size() - 1; i >= 0; i--)
		cout << moves[i].first << " " << moves[i].second << endl;
	return 0;
}
