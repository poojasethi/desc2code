#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <ctime>
#include <cassert>

#define fs first
#define sc second
#define pb push_back
#define mp make_pair
#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)
#define forit(it,v) for(typeof((v).begin()) it = v.begin() ; it != (v).end() ; ++it)
#define eprintf(...) fprintf(stderr, __VA_ARGS__),fflush(stderr)
#define sz(a) ((int)(a).size())
#define all(a) (a).begin(),a.end()

using namespace std;

typedef long long ll;
typedef double ld;
typedef vector<int> vi;
typedef pair<int, int> pi;

const int inf = (int)1e9;
const ld eps = 1e-9;

#define TASK "a"

const int maxn = 80;

char s[maxn][maxn];
int n;

const int maxv = maxn * maxn * maxn;

int q[maxv];
int st = 0, en = 0;

int d[maxv];
pi move[maxv];
int prev[maxv];
pi res[maxv];
int resc = 0;



int main()
{
    int x, y, z;
    scanf("%d%d%d%d", &n, &x, &y, &z);
    forn(i, n) scanf("%s", s[i]);
    x -= 1, y -= 1, z -= 1;
    
    int xx[3] = {x, y, z};
    sort(xx, xx + 3); 

    
    forn(i, n * n * n) d[i] = inf, prev[i] = -1;

    int start = xx[0] * n * n + xx[1] * n + xx[2];
    int end = n + 2;
    
    q[en++] = start;
    d[start] = 0;

    while (st < en)
    {
        int v = q[st++];
        xx[0] = v / n / n;
        xx[1] = (v / n) % n;
        xx[2] = v % n;


        char c;

        forn(_, 3)
        {
            c = s[xx[1]][xx[2]];
            forn(i, n) if (i != xx[0] && i != xx[1] && i != xx[2] && s[xx[0]][i] == c)
            {
                int yy[3] = {xx[1], xx[2], i};
                sort(yy, yy + 3);
                int v2 = yy[0] * n * n + yy[1] * n + yy[2];
                if (d[v2] == inf)
                {
                    d[v2] = d[v] + 1;
                    prev[v2] = v;
                    move[v2] = mp(xx[0], i);
                    q[en++] = v2;
                }
            }
            int t = xx[0];
            xx[0] = xx[1];
            xx[1] = xx[2];
            xx[2] = t;
        }
    }

    if (d[end] == inf) printf("-1\n");
    else
    {
        printf("%d\n", d[end]);
        int cur = end;
        while (cur != start)
        {
            res[resc++] = move[cur];
            cur = prev[cur];
        }
        reverse(res, res + resc);
        forn(i, resc) printf("%d %d\n", res[i].fs + 1, res[i].sc + 1);
    }

    return 0;
}
 	   			   	 	 	 			  	   	