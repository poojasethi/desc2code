#include <cstdio>
#include <set>
#include <map>
#include <queue>
#include <utility>
using namespace std;

int n;
char s[70][71];

queue<set<int> > Q;
map<set<int>, pair<set<int>, pair<int, int> > > dp;

set<int> Pos(int a, int b, int c) {
    set<int> s;
    s.insert(a);
    s.insert(b);
    s.insert(c);
    return s;
}

void f(set<int> x, int i) {
    if (x == Pos(0, 1, 2)) {
        printf("%d\n", i);
    } else {
        f(dp[x].first, i + 1);
    }
}
void g(set<int> x, int i) {
    if (x == Pos(0, 1, 2)) {
    } else {
        printf("%d %d\n", dp[x].second.first + 1, dp[x].second.second + 1);
        g(dp[x].first, i + 1);
    }
}

int main() {
    int a, b, c;
    scanf("%d%d%d%d", &n, &a, &b, &c);
    if (Pos(a, b, c) == Pos(1, 2, 3)) {
        puts("0");
        return 0;
    }
    for (int i = 0; i < n; ++i)
        scanf("%s", s[i]);
    Q.push(Pos(0, 1, 2));
    while (!Q.empty()) {
        set<int> t = Q.front();
        Q.pop();
        int a = *t.begin();
        int b = *++t.begin();
        int c = *--t.end();
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < n; ++j)
                if (j != b && j != c && j != a && s[b][c] == s[a][j] && !dp.count(Pos(j, b, c))) {
                    dp[Pos(j, b, c)] = make_pair(t, make_pair(j, a));
                    Q.push(Pos(j, b, c));
                }
            int t = a;
            a = b;
            b = c;
            c = t;
        }
    }
    if (!dp.count(Pos(a - 1, b - 1, c - 1))) {
        puts("-1");
        return 0;
    }
    f(Pos(a - 1, b - 1, c - 1), 0);
    g(Pos(a - 1, b - 1, c - 1), 0);
}