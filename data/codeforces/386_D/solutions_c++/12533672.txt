//In the name of God

#include<bits/stdc++.h>

#define F first
#define S second
#define pb push_back
#define ll long long
#define ld long double
#define st set<pii>::iterator
#define mem(A) memset(A , 0 , sizeof A)

using namespace std;

typedef pair<int , int> pii;

const int MAXN = 71;
const int inf = 1e9;

struct position
{
	int a , b , c;
	position(int a=0 , int b=0 , int c=0)
		:a(a) , b(b) , c(c){}
};

string s[MAXN];
int mark[MAXN][MAXN][MAXN];
position par[MAXN][MAXN][MAXN];

int main()
{
    ios_base::sync_with_stdio(false);
	int n , fi , se , th;
	cin >> n >> fi >> se >> th;
	fi-- , se-- , th--;

	for(int i = 0 ; i < n ; i++)
		cin >> s[i];

	for(int i = 0 ; i < MAXN ; i++)
		for(int j = 0 ; j < MAXN ; j++)
			for(int l = 0 ; l < MAXN ; l++)
				mark[i][j][l] = inf;

	queue<position> q;
	mark[fi][se][th] = 0;
	q.push(position(fi , se , th));
	while(q.size()){
		position p = q.front();
		q.pop();
		int a = p.a , b = p.b , c = p.c;
		if(a == b || b == c || c == a){
			mark[a][b][c] = inf;
            continue;
		}
		for(int i = 0 ; i < n ; i++)
			if(s[a][i] == s[b][c] && mark[i][b][c] == inf)
				mark[i][b][c] = mark[a][b][c]+1 , par[i][b][c] = p , q.push(position(i , b , c));
		for(int i = 0 ; i < n ; i++)
			if(s[b][i] == s[c][a] && mark[a][i][c] == inf)
				mark[a][i][c] = mark[a][b][c]+1 , par[a][i][c] = p , q.push(position(a , i , c));
		for(int i = 0 ; i < n ; i++)
			if(s[c][i] == s[a][b] && mark[a][b][i] == inf)
				mark[a][b][i] = mark[a][b][c]+1 , par[a][b][i] = p , q.push(position(a , b , i));
	}
	int a = 0 , b = a , c = b;
	for(int i = 0 ; i < 3 ; i++)
		for(int j = 0 ; j < 3 ; j++)
			for(int l = 0 ; l < 3 ; l++)
				if(mark[i][j][l] < mark[a][b][c]){
					a = i; b = j; c = l;}
	if(mark[a][b][c] == inf){
		cout << -1 << "\n";
		return 0;
	}
	cout << mark[a][b][c] << "\n";
	stack<pii> output;
	position now = position(a , b , c) , p = par[a][b][c];
	for(int i = 0 ; i < mark[a][b][c] ; i++){
		if(now.a != p.a)
			output.push(pii(p.a , now.a));
		if(now.b != p.b)
			output.push(pii(p.b , now.b));
		if(now.c != p.c)
			output.push(pii(p.c , now.c));
		now = p;
		p = par[p.a][p.b][p.c];
	}
	while(output.size()){
		pii p = output.top();
		cout << p.F+1 << " " << p.S+1 << "\n";
		output.pop();
	}

    return 0;
}
