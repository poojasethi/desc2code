#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <queue>
#include <iostream>
#include <algorithm>
using namespace std;

#define long long long
#define f1(i,n) for (int i=1; i<=n; i++)
#define f0(i,n) for (int i=0; i<n; i++)

struct triple { 
    int X, Y, Z; 
    triple(int x, int y, int z){ X=x, Y=y, Z=z; }
    triple(){};
};
struct ii { 
    int X, Y; 
    ii(int x, int y){ X=x, Y=y; }
    ii(){};
};
bool operator == (triple a, triple b)
    { return a.X==b.X && a.Y==b.Y && a.Z==b.Z; }

#define N 71
int n;
char b[N][N];
int d[N][N][N];
ii e[N][N][N];
triple p[N][N][N];
#define d(u) d[u.X][u.Y][u.Z]
#define p(u) p[u.X][u.Y][u.Z]
#define e(u) e[u.X][u.Y][u.Z]
#define all(a) a.begin(), a.end()

bool assignable(int &a , int b)
    { if (a==0) a=b; else return false; return true; }

void sort(triple &u){
    if (u.X>u.Y) swap(u.X, u.Y);
    if (u.Y>u.Z) swap(u.Y, u.Z);
    if (u.X>u.Y) swap(u.X, u.Y);
}

void trace(triple u){
    vector<ii> T;
    while (d(u)!=1)
    { T.push_back(e(u)); u=p(u); }
    reverse(all(T));
    f0(i,T.size()) printf("%d %d\n", T[i].X, T[i].Y);
}

void bfs(triple u, triple Target){  
    queue<triple> qu;
    sort(u); qu.push(u); d(u)=1;
    while (qu.size()){
        u=qu.front(); qu.pop();
//      printf("d[%d][%d][%d] = %d\n", u.X, u.Y, u.Z, d(u));
        if (u==Target) 
            { cout << d(u)-1 << endl; trace(u); return ; }

        f1(i,n) if (b[u.X][i]==b[u.Y][u.Z]){
            if (i==u.X || i==u.Y || i==u.Z) continue;
            triple v=u; v.X=i; sort(v);
            if (assignable(d(v), d(u)+1))
            { qu.push(v); p(v)=u; e(v)=ii(u.X, i); }
        }
        f1(i,n) if (b[u.Y][i]==b[u.X][u.Z]){
            if (i==u.X || i==u.Y || i==u.Z) continue;
            triple v=u; v.Y=i; sort(v);
            if (assignable(d(v), d(u)+1))
            { qu.push(v); p(v)=u; e(v)=ii(u.Y, i); }
        }
        f1(i,n) if (b[u.Z][i]==b[u.Y][u.X]){
            if (i==u.X || i==u.Y || i==u.Z) continue;
            triple v=u; v.Z=i; sort(v);
            if (assignable(d(v), d(u)+1))
            { qu.push(v); p(v)=u; e(v)=ii(u.Z, i); }
        }
    }
    cout << -1 << endl;
}

main(){
    scanf("%d", &n);
    int x, y, z;
    scanf("%d%d%d", &x, &y, &z);

    f1(i,n) scanf("%s", b[i]+1);
//  f1(i,n) f1(j,n)
//  if (i==j) b[i][j]='*';
//  else b[i][j] = b[j][i] = rand()%3+'a';
//  f1(i,n) printf("%s\n", b[i]+1);

    bfs(triple(x,y,z), triple(1,2,3));
}
