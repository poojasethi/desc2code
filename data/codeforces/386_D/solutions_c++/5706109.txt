#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long ll;
#define f first
#define s second
#define pb push_back
const int N = 75;
struct field
{
  int x, y, z;
  field() {}
  field(int xx, int yy, int zz)
  {
    x = xx;
    y = yy;
    z = zz;
    if (x > y) swap(x, y);
    if (x > z) swap(x, z);
    if (y > z) swap(y, z);
  }
};
#include <queue>
int n, d[N][N][N], who[N][N][N], where[N][N][N];
field par[N][N][N];
char a[N][N];
queue <field> q;

void trymove(int x, int y, int z)
{
  field cur(x, y, z);
  for (int i = 0; i < n; ++i)
    if (i != x && i != y && i != z && a[i][x] == a[y][z])
    {
      field to(i, y, z);
      if (d[to.x][to.y][to.z] == -1)
      {
        d[to.x][to.y][to.z] = d[cur.x][cur.y][cur.z] + 1;
        q.push(to);
        par[to.x][to.y][to.z] = cur;
        who[to.x][to.y][to.z] = x;
        where[to.x][to.y][to.z] = i;
      }
    }
}

int main()
{
  memset(d, -1, sizeof d);
  cin >> n;
  int x, y, z;
  cin >> x >> y >> z;
  --x;
  --y;
  --z;
  if (x > y) swap(x, y);
  if (x > z) swap(x, z);
  if (y > z) swap(y, z);
  d[x][y][z] = 0;
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < n; ++j)
      cin >> a[i][j];
  q.push(field(x, y, z));
  while (!q.empty())
  {
    field cur = q.front();
    q.pop();

    trymove(cur.x, cur.y, cur.z);
    trymove(cur.y, cur.x, cur.z);
    trymove(cur.z, cur.x, cur.y);
  }
  if (d[0][1][2] != -1)
  {
    int ans = d[0][1][2];
    cout << ans << endl;
    vector <pair <int, int> > answ;
    field c(0, 1, 2);
    for (int i = 1; i <= ans; ++i)
    {
      #define mp make_pair
      answ.pb(mp(who[c.x][c.y][c.z], where[c.x][c.y][c.z]));
      c = par[c.x][c.y][c.z];
    }
    reverse(answ.begin(), answ.end());
    for (int i = 0; i < answ.size(); ++i) cout << answ[i].f + 1 << " " << answ[i].s + 1 << endl;
  } else cout << -1;
  return 0;
}
