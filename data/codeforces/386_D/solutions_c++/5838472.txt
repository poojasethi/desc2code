#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;
char grid[71][71];
bool vis[71][71][71];
struct node {
    int a, b, c , d;

    node()
    : a(0), b(0), c(0) , d(0){
    }

    node(int a, int b, int c , int d)
    : a(a), b(b), c(c) , d(d) {
    }
};
node prevs[71][71][71];
int main()
{
    int n;
    cin >> n;
    int one , two , three;
    cin >> one >> two >> three;
    for(int i = 0; i < n;i++) {
        for(int j = 0; j < n;j++) {
            cin >> grid[i][j];
        }
    }
    bool done = false;
    int z , v , m;
    queue <node> q;
   q.push(node(one - 1,two - 1,three - 1 , 0));
   prevs[one - 1][two - 1][three - 1] = node(-1 , -1 , -1 , 0);
   while(!q.empty()) {
    node temp = q.front(); q.pop();
    vector <int> af; af.push_back(temp.a); af.push_back(temp.b); af.push_back(temp.c);
    sort(af.begin() , af.end());
    if(af[0] == 0 && af[1] == 1 && af[2] == 2) {
        z = temp.a , v = temp.b , m = temp.c;
        done = true;
          break;
    }
    vis[temp.a][temp.b][temp.c] = true;
     for(int i = 0; i < n;i++) {
        if(i == temp.a || i == temp.b || i == temp.c) continue;
        if(grid[temp.a][i] == grid[temp.b][temp.c] && !vis[i][temp.b][temp.c]) {
            vis[i][temp.b][temp.c] = true;
            q.push(node(i , temp.b , temp.c , temp.d + 1));
            prevs[i][temp.b][temp.c] = node(temp.a , temp.b , temp.c , temp.d + 1);
        }
       if(grid[temp.b][i] == grid[temp.a][temp.c] && !vis[temp.a][i][temp.c]) {
            vis[temp.a][i][temp.c] = true;
            q.push(node(temp.a , i , temp.c , temp.d + 1));
            prevs[temp.a][i][temp.c] = node(temp.a , temp.b , temp.c , temp.d + 1);
        }
       if(grid[temp.c][i] == grid[temp.b][temp.a] && !vis[temp.a][temp.b][i]) {
           vis[temp.a][temp.b][i] = true;
            q.push(node(temp.a , temp.b , i , temp.d + 1));
            prevs[temp.a][temp.b][i] = node(temp.a , temp.b , temp.c , temp.d + 1);
        }
     }
   }
   if(!done) {
    cout << -1 << endl;
    return 0;
   }
   vector <int> A;

   while(prevs[z][v][m].a != -1) {
      if(prevs[z][v][m].a != z) {
         A.push_back(z + 1);
         A.push_back(prevs[z][v][m].a + 1);
      }
      else if(prevs[z][v][m].b != v) {
         A.push_back(v + 1);
         A.push_back(prevs[z][v][m].b + 1);
      }
      else if(prevs[z][v][m].c != m) {
         A.push_back(m + 1);
         A.push_back(prevs[z][v][m].c + 1);
      }
      int tempA = z , tempB = v , tempC = m;
      z = prevs[tempA][tempB][tempC].a , v = prevs[tempA][tempB][tempC].b , m = prevs[tempA][tempB][tempC].c;
   }
   cout << A.size()/2 << endl;
   for(int i = A.size() - 1; i >= 0;i-=2) {
     cout << A[i] << " " << A[i - 1] << endl;
   }
}
