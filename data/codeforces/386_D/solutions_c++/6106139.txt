#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <ctype.h>
#include <cmath>
#include <ctime>
#include <queue>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <bitset>

using namespace std;

typedef long long INT;
typedef pair<int, int> pii;
typedef pair<pii, int> p3i;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)
#define inf 0x3f3f3f3f

#define NN 80

queue<int> q;
p3i prev[NN][NN][NN];
int dis[NN][NN][NN];
pii path[NN*NN*NN];

inline void Sort(int &a, int &b, int &c) {
	if (a>b) swap(a, b);
	if (a>c) swap(a, c);
	if (b>c) swap(b, c);
}

int main() {
	int N, a, b, c, aa, bb, cc, i, d;
	char board[NN][NN];
	
	scanf("%d", &N);
	scanf("%d%d%d", &a, &b, &c); 
	for (i=0; i<N; i++) scanf("%s", board[i]);
	a--, b--, c--; Sort(a, b, c);
	memset(dis, 0x3f, sizeof(dis));
	q.push(a); q.push(b); q.push(c);
	dis[a][b][c]=0;
	while (!q.empty()) {
		a=q.front(); q.pop();
		b=q.front(); q.pop();
		c=q.front(); q.pop();
		for (i=0; i<N; i++) {
			if (i!=b && i!=c && board[i][a]==board[b][c]) {
				aa=i; bb=b; cc=c; Sort(aa, bb, cc);
				if (dis[aa][bb][cc]>dis[a][b][c]+1) {
					dis[aa][bb][cc]=dis[a][b][c]+1;
					prev[aa][bb][cc]=p3i(pii(a, b), c);
					q.push(aa); q.push(bb); q.push(cc);
				}
			}
		}
		for (i=0; i<N; i++) {
			if (i!=a && i!=c && board[i][b]==board[a][c]) {
				aa=a; bb=i; cc=c; Sort(aa, bb, cc);
				if (dis[aa][bb][cc]>dis[a][b][c]+1) {
					dis[aa][bb][cc]=dis[a][b][c]+1;
					prev[aa][bb][cc]=p3i(pii(a, b), c);
					q.push(aa); q.push(bb); q.push(cc);
				}
			}
		}
		for (i=0; i<N; i++) {
			if (i!=a && i!=b && board[i][c]==board[a][b]) {
				aa=a; bb=b; cc=i; Sort(aa, bb, cc);
				if (dis[aa][bb][cc]>dis[a][b][c]+1) {
					dis[aa][bb][cc]=dis[a][b][c]+1;
					prev[aa][bb][cc]=p3i(pii(a, b), c);
					q.push(aa); q.push(bb); q.push(cc);
				}
			}
		}
	}
	
	if (dis[0][1][2]==inf) dis[0][1][2]=-1;
	printf("%d\n", dis[0][1][2]);
	a=0; b=1; c=2; d=dis[0][1][2];
	for (i=0; i<d; i++) {
		aa=prev[a][b][c].first.first;
		bb=prev[a][b][c].first.second;
		cc=prev[a][b][c].second;
		if (aa==a && bb==b) path[d-i-1]=pii(cc, c);
		if (aa==a && bb==c) path[d-i-1]=pii(cc, b);
		if (aa==b && bb==c) path[d-i-1]=pii(cc, a);
		if (aa==a && cc==b) path[d-i-1]=pii(bb, c);
		if (aa==a && cc==c) path[d-i-1]=pii(bb, b);
		if (aa==b && cc==c) path[d-i-1]=pii(bb, a);
		if (bb==a && cc==b) path[d-i-1]=pii(aa, c);
		if (bb==a && cc==c) path[d-i-1]=pii(aa, b);
		if (bb==b && cc==c) path[d-i-1]=pii(aa, a);
		a=aa; b=bb; c=cc;
	}
	for (i=0; i<d; i++) printf("%d %d\n", path[i].first+1, path[i].second+1);
	
	return 0;
}
