#include<iostream>
#include<algorithm>
#define f first
#define s second
#define mp make_pair
using namespace std;
int n, front[343000][3], last[343000], rem[343000], add[343000], cur[3], fs, ot[2], oe, fe=1, nmov;
char color[70][70], odiag;
bool exp[70][70][70];
pair<int, int> moves[343000];
int main() {
	cin >> n;
	cin >> front[0][0] >> front[0][1] >> front[0][2];
	front[0][0]--, front[0][1]--, front[0][2]--;
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			cin >> color[i][j];
	sort(front[0], front[0]+3);
	
	while(fs < fe) {
		if(front[fs][0] == 0 && front[fs][1] == 1 && front[fs][2] == 2) {
			int cur = fs;
			while(cur > 0) {
				moves[nmov++] = mp(rem[cur], add[cur]);
				cur = last[cur];
			}
			reverse(moves, moves+nmov);
			cout << nmov << '\n';
			for(int i=0;i<nmov;i++)
				cout << moves[i].f+1 << ' ' << moves[i].s+1 << '\n';
			return 0;
		}
		
		for(int i=0;i<3;i++) {
			oe=0;
			for(int k=0;k<3;k++)
				if(k!= i)
					ot[oe++] = front[fs][k];
			
			odiag = color[ot[0]][ot[1]];
			for(int j=0;j<70;j++)
				if(color[front[fs][i]][j] == odiag && j!= ot[0] && j!=ot[1]) {
					cur[0] = front[fs][0];
					cur[1] = front[fs][1];
					cur[2] = front[fs][2];
					cur[i] = j;
					sort(cur, cur+3);
					if(exp[cur[0]][cur[1]][cur[2]]) continue;
					front[fe][0] = cur[0];
					front[fe][1] = cur[1];
					front[fe][2] = cur[2];
					last[fe] = fs;
					rem[fe] = front[fs][i];
					add[fe++] = j;
					exp[cur[0]][cur[1]][cur[2]]=true;
				}
		}
		fs++;
	}
	cout << "-1\n";
	return 0;
}
















