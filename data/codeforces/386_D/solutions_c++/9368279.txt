#include <bits/stdc++.h>

#define mt make_triple
#define mp make_pair

using namespace std;

const int maxl = 100;

class Triple {
public:
	int a, b, c;
	bool marked;
	Triple ( int a = 0, int b = 0, int c = 0 ){
		this -> a = a;
		this -> b = b;
		this -> c = c;
	}
};

Triple  make_triple ( int a, int b, int c ){
	if ( a > b )
		swap ( a, b );
	if ( b > c )
		swap ( b, c );
	if ( a > b )
		swap ( a, b );

	return Triple ( a, b, c );
}

int n;
int a, b, c;

char v [ maxl ][ maxl ];
pair < Triple, pair < int, int > > par [ maxl ][ maxl ][ maxl ];
int dis [ maxl ][ maxl ][ maxl ];

bool is_valid ( int a, int b, int c, int i ){
	if ( a == i || i == b || i == c )
		return false;
	if ( v [ a ][ i ] != v [ b ][ c ] )
		return false;

	Triple tmp = mt ( i, b, c );
	if ( dis [ tmp.a ][ tmp.b ][ tmp.c ] != -1 )
		return false;
	return true;
}

int main (){
	cin >> n >> a >> b >> c;
	a--; b--; c--;

	for ( int i = 0 ; i < n ; i++ )
		for ( int j = 0 ; j < n ; j++ )
			cin >> v [ i ][ j ];

	memset ( dis, -1, sizeof dis );
	queue < Triple > q;
	q.push ( mt ( 0, 1, 2 ) );
	dis [ 0 ][ 1 ][ 2 ] = 0;
	while ( !q.empty () ){
		Triple node = q.front ();
		q.pop ();

		for ( int i = 0 ; i < n ; i++ ){
			Triple tmp = mt ( i, node.b, node.c );

			if ( is_valid ( node.a, node.b, node.c, i ) ){
				dis [ tmp.a ][ tmp.b ][ tmp.c ] = dis [ node.a ][ node.b ][ node.c ] + 1;
				par [ tmp.a ][ tmp.b ][ tmp.c ] = mp ( node, mp ( i, node.a ) );
				q.push ( tmp );
			}

			tmp = mt ( node.a, i, node.c );
			if ( is_valid ( node.b, node.a, node.c, i ) ){
				dis [ tmp.a ][ tmp.b ][ tmp.c ] = dis [ node.a ][ node.b ][ node.c ] + 1;
				par [ tmp.a ][ tmp.b ][ tmp.c ] = mp ( node, mp ( i, node.b ) );
				q.push ( tmp );
			}

			tmp = mt ( node.a, node.b, i );
			if ( is_valid ( node.c, node.a, node.b, i ) ){
				dis [ tmp.a ][ tmp.b ][ tmp.c ] = dis [ node.a ][ node.b ][ node.c ] + 1;
				par [ tmp.a ][ tmp.b ][ tmp.c ] = mp ( node, mp ( i, node.c ) );
				q.push ( tmp );
			}
		}
	}

	Triple s = mt ( a, b, c );

	cout <<  dis [ s.a ][ s.b ][ s.c ] << endl;
	if ( dis [ s.a ][ s.b ][ s.c ] == -1 )
		return 0;

	while ( s.a != 0 || s.b != 1 || s.c != 2 ){
		int a = par [ s.a ][ s.b ][ s.c ].second.first, A = par [ s.a ][ s.b ][ s.c ].second.second;
		s = par [ s.a ][ s.b ][ s.c ].first;

		cout << a + 1 << " " << A + 1 << endl;
	}
}
