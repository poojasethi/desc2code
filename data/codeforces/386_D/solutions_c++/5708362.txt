#include <iostream>
#include <queue>
#include <algorithm>
#include <vector>

using namespace std;

const int MAXN = 100;
int d[MAXN][MAXN][MAXN];
char col[MAXN][MAXN];

struct tri
{
	tri(int x = 0, int y = 0, int z = 0)
	{
		a = x; b = y; c = z;
	}
	int a, b, c;
} par[MAXN][MAXN][MAXN];

queue<tri> que;

int main()
{
	int n;
	cin >> n;
	int a, b, c;
	cin >> a >> b >> c;
	if (a == b || b == c || a == c)
	{
		cout << -1 << endl;
		return 0;
	}
	for (int i = 1; i <= n; i++)
	{
		string tmp;
		cin >> tmp;
		for (int j = 1; j <= n; j++)
			col[i][j] = tmp[j - 1];
	}
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
			for (int k = 1; k <= n; k++)
				d[i][j][k] = 1e9;
	d[a][b][c] = 0;
	que.push(tri(a, b, c));
	while (!que.empty())
	{
		tri cur = que.front();
		int dist = d[cur.a][cur.b][cur.c];
		que.pop();
		
		// ans
		int tmp[3] = {cur.a, cur.b, cur.c};
		sort(tmp, tmp + 3);
		vector<pair<int, int> > moves;
		if (tmp[0] == 1 && tmp[1] == 2 && tmp[2] == 3)
		{
			cout << dist << endl;
			for (int i = 0; i < dist; i++)
			{
				tri parent = par[cur.a][cur.b][cur.c];
				if (parent.a != cur.a) moves.push_back(make_pair(parent.a, cur.a));
				if (parent.b != cur.b) moves.push_back(make_pair(parent.b, cur.b));
				if (parent.c != cur.c) moves.push_back(make_pair(parent.c, cur.c));
				cur = parent;
			}
			for (int i = 0; i < dist; i++)
				cout << moves[dist - 1 - i].first << " " << moves[dist - 1 - i].second << endl;
			return 0;
		}

		a = cur.a, b = cur.b, c = cur.c;
		for (int i = 1; i <= n; i++)
		{
			if (i != a && i != b && i != c)
			{
				if (col[a][i] == col[b][c] && d[i][b][c] == 1e9)
				{
					d[i][b][c] = dist + 1;
					par[i][b][c] = tri(a, b, c);
					que.push(tri(i, b, c));
				}
				if (col[b][i] == col[a][c] && d[a][i][c] == 1e9)
				{
					d[a][i][c] = dist + 1;
					par[a][i][c] = tri(a, b, c);
					que.push(tri(a, i, c));
				}
				if (col[c][i] == col[a][b] && d[a][b][i] == 1e9)
				{
					d[a][b][i] = dist + 1;
					par[a][b][i] = tri(a, b, c);
					que.push(tri(a, b, i));
				}
			}
		}
	}
	cout << -1 << endl;
	return 0;
}
