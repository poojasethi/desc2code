#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct entry
{
	int a, b, c;
	int last;
	entry (int a, int b, int c, int last)
		: a(a), b(b), c(c), last(last) { }
	bool found()
	{
		return (a + b + c == 3);
	}
};

bool vis[75][75][75];

int main()
{
	int n;
	cin >> n;

	int a, b, c;
	cin >> a >> b >> c;

	char adj[75][75];
	for (int i = 0; i < n; i++)
		cin >> adj[i];

	vector<entry> e;
	queue<entry> q;
	q.push(entry(a - 1, b - 1, c - 1, -1));

	while(!q.empty())
	{
		entry cur = q.front();
        q.pop();
        e.push_back(cur);

        if(cur.found())
		{
            vector<pair<int, int> > v;
            while (cur.last != -1)
			{
                if (cur.a != e[cur.last].a) 
					v.push_back(make_pair(e[cur.last].a, cur.a));
                else if (cur.b != e[cur.last].b) 
					v.push_back(make_pair(e[cur.last].b, cur.b));
                else 
					v.push_back(make_pair(e[cur.last].c, cur.c));
                cur = e[cur.last];
            }

            cout << v.size() << "\n";
            for (int i = (int)v.size() - 1; i >= 0; i--)
				cout << v[i].first + 1 << " " << v[i].second + 1 << "\n";
            return 0;
        }

        for (int i = 0; i < n; i++)
		{
            if (i == cur.a || i == cur.b || i == cur.c) 
				continue;

            if (adj[cur.b][cur.c] == adj[i][cur.a] && !vis[i][cur.b][cur.c]) 
			{
				vis[i][cur.b][cur.c] = true;
				q.push(entry(i, cur.b, cur.c, e.size() - 1));
			}

            if (adj[cur.a][cur.c] == adj[i][cur.b] && !vis[cur.a][i][cur.c]) 
			{
				vis[cur.a][i][cur.c] = true;
				q.push(entry(cur.a, i, cur.c, e.size() - 1));
			}

            if (adj[cur.a][cur.b] == adj[i][cur.c] && !vis[cur.a][cur.b][i]) 
			{
				vis[cur.a][cur.b][i] = true;
				q.push(entry(cur.a, cur.b, i, e.size() - 1));
			}
        }
    }
    
	cout << -1 << "\n";

	return 0;
}