#include <vector>
#include <algorithm>
#include <cstdio>

using namespace std;

typedef long long int ll;
int main()
{
	int n, m;
	scanf("%d%d", &n, &m);
	vector< vector<int> > t(n, vector<int>(m));

	// Load table
	for (int i = 0 ; i < n ; i ++)
	{
		scanf("%d", &t[i][0]);
		for (int j = 1 ; j < m ; j ++)
		{
			scanf("%d", &t[i][j]);
			t[i][j] += t[i][j-1]; // Partial sums
		}
	}

	// Dynamic table
	vector< vector<ll> > v(n, vector<ll>(m, -1e9));
	for (int i = 0 ; i < m ; i ++)
		v[0][i] = t[0][i];

	for (int i = 1 ; i < n ; i ++)
	{
		if (i%2 == 1)
		{
			ll mx = v[i-1][m-1];
			for (int a = m-2 ; a >= 0 ; a --)
			{
				mx = max(mx, v[i-1][a+1]);
				v[i][a] = t[i][a] + mx;
			}
		}
		else
		{
			ll mx = v[i-1][0];
			for (int a = 1 ; a < m ; a ++)
			{
				mx = max(mx, v[i-1][a-1]);
				v[i][a] = t[i][a] + mx;
			}
		}
	}

	printf("%I64d", *max_element(v[n-1].begin(), v[n-1].end()));


	return 0;
}
