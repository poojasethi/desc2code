import os,sys
###IOU: 376B http://codeforces.com/problemset/problem/376/B

###This task is a generalisation of a described example. Imagine that your group of friends has n people and you know the debts between the people. Optimize the given debts without changing their meaning. In other words, finally for each friend the difference between the total money he should give and the total money he should take must be the same. Print the minimum sum of all debts in the optimal rearrangement of the debts. See the notes to the test samples to better understand the problem.

###Input
#The first line contains two integers n. and m. The next m lines contain the debts. The ith line contains three integers ai,bi,ci, which mean that person ai owes person bi ci rubles.

###Output
#Print a single integer-the minimum sum of debts in the optimal rearrangement.
def run():
    n, m = map(int, raw_input().split())#n is number of people
    
    dgr = [0 for i in range(n+1)]
    for j in range(m):
        a, b, c = map(int, raw_input().split())
        dgr[a] += c
        dgr[b] -= c
        
    ###annul debt for each person: indegree means amount of money owned, outdegree means amount of money lent
    ###we merge them together into one array: dgr[i]>0 means outdegree[i]>indegree[i]
    amount = 0
    for i in range(1, n+1):
        if dgr[i] > 0:
            amount += dgr[i]
    print amount
################################################################################################################
run()
