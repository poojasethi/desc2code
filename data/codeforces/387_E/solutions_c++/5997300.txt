#include <stdio.h>

#include <set>
#include <iostream>

using namespace std;

const int MAXN = 1000000;

int N, K;
int P[MAXN], B[MAXN];

int pos[MAXN], need[MAXN];
int fenw[MAXN];

void fenw_inc(int ind)
{
	for(int i = ind; i < N; i = i | (i + 1))
		++fenw[i];
}

int fenw_get(int ind)
{
	if(ind < 0)
		return 0;
	int res = 0;
	for(int i = ind; i >= 0; i = (i & (i + 1)) - 1)
		res += fenw[i];
	return res;
}

int main()
{
	scanf("%d %d", &N, &K);
	for(int i = 0; i < N; ++i)
	{
		scanf("%d", P + i);
		--P[i];
	}
	for(int i = 0; i < K; ++i)
	{
		scanf("%d", B + i);
		--B[i];
	}


	for(int i = 0; i < N; ++i)
	{
		pos[P[i]] = i;
		need[i] = 0;
		fenw[i] = 0;
	}
	for(int i = 0; i < K; ++i)
		need[B[i]] = 1;

	set<int> barriers;
	barriers.insert(-1);
	barriers.insert(N);
	long long res = 0;

	for(int i = 0; i < N; ++i)
	{
		if(!need[i])
		{
			set<int>::iterator iter = barriers.upper_bound(pos[i]);
			int upper = *iter;
			--iter;
			int lower = *iter;
			res += (upper - lower - 1) - (fenw_get(upper - 1) - fenw_get(lower));
			fenw_inc(pos[i]);
		}
		else
		{
			barriers.insert(pos[i]);
		}
	}
	cout << res << endl;
}




