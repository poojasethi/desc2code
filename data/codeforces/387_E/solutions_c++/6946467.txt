#include <cstdio>
#include <cstring>
#include <set>

using namespace std;

const int MAX_N = 1000007;

int n, k;
long long bit[MAX_N];
int pos[MAX_N];
bool need[MAX_N];
set<int> ans;

int lowbit(int x) {
	return x & -x;
}

long long sum(int x) {
	long long ret = 0;
	while (x > 0) {
		ret += bit[x];
		x -= lowbit(x);
	}
	return ret;
}

void add(int x, long long val) {
	while (x < MAX_N) {
		bit[x] += val;
		x += lowbit(x);
	}
}

int main() {
	scanf("%d%d", &n, &k);
	for (int i = 1; i <= n; ++i) {
		int val;
		scanf("%d", &val);
		pos[val] = i;
		add(i, 1);
	}
	for (int i = 1; i <= k; ++i) {
		int val;
		scanf("%d", &val);
		need[val] = true;
	}
	long long res = 0;
	ans.insert(0), ans.insert(n + 1);
	for (int i = 1; i <= n; ++i) {
		if (need[i]) {
			ans.insert(pos[i]);
		} else {
			set<int>::iterator up = ans.upper_bound(pos[i]);
			res += sum(*up - 1) - sum(*(--up));
			add(pos[i], -1);
		}
	}
	printf("%I64d\n", res);
	return 0;
}

 		 						 		   	  	 	  		