#include<cstdio>
#include<cstring>
#include<algorithm>
#include<set>
using namespace std;

const int N=1100000;

int n,k;
int pos[N],choose[N];

int tree[N];
#define L(x) ((x)&-(x))

void Update(int pos)
{
    for(;pos<=n;pos+=L(pos))tree[pos]++;
}

int Sum(int pos)
{
    int i,ret=0;
    for(;pos;pos-=L(pos))ret+=tree[pos];
    return ret;
}

int main()
{
    scanf("%d%d",&n,&k);

    int i,temp;
    for(i=1;i<=n;i++)
    {
        scanf("%d",&temp);
        pos[temp]=i;
    }
    for(i=1;i<=k;i++)
    {
        scanf("%d",&temp);
        choose[temp]=1;
    }
    set<int> s;
    s.insert(0);s.insert(n+1);

    long long ret=0;
    for(i=1;i<=n;i++)
    {
        if(choose[i])s.insert(pos[i]);
        else
        {
            int left=*(--s.lower_bound(pos[i])),right=*(s.upper_bound(pos[i]));
            ret+=(right-left-1);
            ret+=Sum(left);
            ret-=Sum(right-1);
            Update(pos[i]);
        }
    }
    printf("%I64d\n",ret);

    return 0;
}
