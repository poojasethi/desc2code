#include<stdio.h>
#include<memory.h>
#include<algorithm>
#include<set>
using namespace std;
	
typedef __int64 LL;
const int N=1000002;
int p[N],a[N],b[N],m,n,c[N];
bool mem[N];
LL sum[N];
	
int lowbit(int x){
	return x&(-x);
}	
void add(int x,int val){
	while(x<=m) sum[x]+=val,x+=lowbit(x);
}	
LL query(int x){
	LL res=0;
	while(x>0) res+=sum[x],x-=lowbit(x);
	return res;
}	
int main(){
	int l,r,i,j,t,k,x,y;
	LL ans;
	set<int> st;
	set<int>::iterator it;
	while(~scanf("%d%d",&n,&k)){
		m=n;
		st.clear();
		memset(mem,0,sizeof(mem));
		memset(sum,0,sizeof(sum));
		for(i=1;i<=n;i++) scanf("%d",a+i),p[a[i]]=i;
		for(i=1;i<=k;i++) scanf("%d",c+i),mem[c[i]]=1;
		for(i=1;i<=n;i++) add(i,1);
		st.insert(0),st.insert(n+1);
		for(ans=0,i=1;i<=n;i++){
			if(mem[i]) st.insert(p[i]);
			else{
				it=st.upper_bound(p[i]);
				r=*it-1;
				l=*(--it);
				ans+=(LL)query(r)-query(l);
				add(p[i],-1);
			}
		}
		printf("%I64d\n",ans);
	}
	return 0;
}	