#include<vector>
#include<string>
#include<cstring>
#include<iostream>
#include<sstream>
#include<set>

using namespace std;
typedef long long ll;

const ll MAX = 1001000;

ll pos[MAX], isin[MAX];
ll tree[MAX];
ll n, m;


void update(ll *t, ll ind, ll v) {
  while(ind < MAX) {
    t[ind] += v;
    ind += ind & (-ind); 
  }
}
ll get(ll *t, ll ind) {
  ll ret = 0;
  while(ind > 0) {
    ret += t[ind];
    ind -= ind & (-ind);
  }
  return ret;
}

int main (void) {
  
  ll x;
  cin >> n >> m;
  for(ll i=1; i<=n ; i++) {
    cin >> x;
    pos[x] = i;
  }
  memset(isin, 0, sizeof(isin));
  memset(tree, 0, sizeof(tree));

  for(ll i=1 ; i<=m; ++i) {
    cin >> x;
    isin[x] = 1;
  }
  for(ll i=1 ; i<=n ; i++) update(tree, i, 1);

  ll ret = 0;
  set<ll> in;
  in.insert(0), in.insert(n+1);
  for(ll i=1 ; i<=n ; i++) {
    if(isin[i]) {

      in.insert(pos[i]);

    } else {
      
      // upper y lower indexadas desde 1
      ll l = *(--in.lower_bound(pos[i]));
      ll r = *(in.upper_bound(pos[i]));

      ret += get(tree, r-1) - get(tree, l);
      update(tree, pos[i], -1);
    }
  }

  cout << ret << endl;
  return 0;
}
