#include <iostream>
#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;
int q[1048577],w[1048577],s[1048577],T=1048576;
int lowbit(int x) {return x&(-x);}
void adds(int *f,int x,int c)
{
	for (;x<=T;x+=lowbit(x)) f[x]+=c;
}
int querys(int *f,int x)
{
	int m=0;
	for (;x;x-=lowbit(x)) m+=f[x];
	return m;
}
void addm(int *f,int x,int c)
{
	for (;x<=T;x+=lowbit(x)) f[x]=max(f[x],c);
}
int querym(int *f,int x)
{
	int m=0;
	for (;x;x-=lowbit(x)) m=max(m,f[x]);
	return m;
}
int p[1000005];
bool v[1000005];
int main()
{
	int i,j,l,r,n,m;
	long long ans=0;
	memset(q,0,sizeof(q));
	memset(w,0,sizeof(w));
	memset(v,0,sizeof(v));
	scanf("%d %d",&n,&m);
	for (i=1;i<=n;i++) scanf("%d",&j),p[j]=i;
	for (i=1;i<=m;i++) scanf("%d",&j),v[j]=1;
	for (i=1;i<=n;i++)
	{
		if (!v[i])
		{
			l=querym(q,p[i])+1;
			r=n-querym(w,n-p[i]+1);
			ans+=r-l+1-(querys(s,r)-querys(s,l-1));
			adds(s,p[i],1);
		}
		else
		{
			addm(q,p[i],p[i]);
			addm(w,n-p[i]+1,n-p[i]+1);
		}
	}
	printf("%I64d\n",ans);
}
