#ifdef VX_PRECOMPILED
#include "precomp.h"
#else
#include<string>
#include<iostream>
#include<sstream>
#include<assert.h>
#include<cstdio>
#include<map>
#include<algorithm>
#include<bitset>
#include<cmath>
#include<queue>
#include<functional>
#include<set>
#include<sys/stat.h>
#include<numeric>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#endif
typedef long long int64;
#define long int64
#define var(q,s) typeof(s) q = s
#define for_each(q,s) for(var(q,(s).begin()); q!=(s).end(); q++)
#define scanf error
#define printf error
using namespace std;

//=========================================================
// program:
//
string s;
int qPos[1000];
char newOutput[1000001];

string solve()
{
    int n = s.length();
    int q = count(s.begin(), s.end(), 'Q');
    if (q == 0) {
        return "Yes";
    }
    int p = 0;
    while (p*p < q) {
        p++;
    }
    if (p * p > q) {
        return "No";
    }
    // p is the number of Q characters in the source.
    int leftH = 0;
    while ( (leftH < n) && (s[leftH] == 'H') ) {
        leftH++;
    }
    int rightH = 0;
    while ( (rightH < n) && (s[n - rightH - 1] == 'H') ) {
        rightH++;
    }
    if (leftH % 2 != 0 || rightH % 2 != 0) {
        return "No";
    }
    // find first p Q characters
    int j = 0;
    for (int i = 0; (i < n) && (j < p); i++) {
        if (s[i] == 'Q') {
            qPos[j] = i;
            j++;
        }
    }
    //cyclic part is: leftH/2..qPos[0]..qPos[p-1]..rightH/2
    //             [qPos[0] - leftH/2 , qPos[p-1] + rightH/2 ]
    int a = qPos[0] - leftH/2, b = qPos[p-1] + rightH/2;  
    if ( (a < 0) || (b >= n) ) {
        return "No";
    }
    
    int t = 0;
    for (int i = a; i <= b; i++) {
        if (s[i] == 'H') {
            if (t == n+1) {
                break;
            }
            newOutput[t++] = 'H';
        } else {
            for (int j = a; j <= b; j++) {
                if (t == n+1) {
                    break;
                }
                newOutput[t++] = s[j];                
            }
        }
    }
    if (t != n) {
        return "No";
    }
    for (int i = 0; i < n; i++) {
        if ( newOutput[i] != s[i]) {
            return "No";
        }
    }
    return "Yes";
}


inline void init(){}
//=========================================================
// I/O:
//
int main()
{
    ios::sync_with_stdio(0);  
    init();
    
    bool prev = false;
    while( cin >> s) {
        if (prev) {
            cout << endl;
        }
        prev = true;
        cout << solve() << endl;

    }
    return 0;
}
