#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <map>
#include <set>
#include <string>
#include <vector>

using namespace std;

#define forn(i,n) for (int i = 0; i < (n); i++)
#define forit(it,v) for (typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it)
#define eprintf(...) {fprintf(stderr,__VA_ARGS__); fflush(stderr);}
#define sz(v) ((int)((v).size()))
typedef pair<int, int> ii;
typedef long long LL;

char s[1000500];
char gen[1000500];
char tmp[1000500];

bool solve0() {
    int n = strlen(s);
    
    bool hq = true;
    forn(i, n) hq &= (s[i] == 'H' || s[i] == 'Q');
    if (!hq) unexpected();
    
    int k = 0, l = 0;
    forn(i, n) if (s[i] == 'H') l++; else if (s[i] == 'Q') k++;
    
    if (!k) return 1;
    
    int q = (int)(round(sqrt(k + 0.)));
    if (q * q != k) return 0;
    
    if (l % (1 + q)) return 0;
    int h = l / (1 + q);
    
    int m = q + h;
    int fq = 0;
    while (s[fq] != 'Q') fq++;
    
    for (int i = fq/2; i < fq/2 + m; i++) gen[i-fq/2] = s[i];
    
    // gen[0..m] -> tmp[0..1000000]
    
    int p = 0;
    forn(i, m) {
        if (gen[i] == 'H') {
            tmp[p++] = 'H';
            if (p > n) return 0;
            continue;
        }
        forn(j, m) {
            tmp[p++] = gen[j];
            if (p > n) return 0;
        }
    }
    
    if (p != n) return 0;
    
    tmp[n] = 0;
    return !strcmp(tmp, s);
}

string solve() {
    return string(solve0() ? "Yes" : "No");
}

int main() {
#ifdef LOCAL
    while (gets(s)) {
        if (!strlen(s)) continue;
        static char ans[10];
        gets(ans);
        string cur = solve();
        if (cur != ans) {
            printf("s: %s\ncur: %s\nans: %s\n", s, cur.c_str(), ans);
            return 1;
        }
    }
#else
    gets(s);
    string t = solve();
    puts(t.c_str());
#endif
    return 0;
}
