#include <set>
#include <cstdio>
#include <cstring>
#include <iostream>
#define rep(i,j,k)  for (int i = j; i <= k; i++)
using namespace std;
typedef long long ll;
const int N = 200010, inf = 2e9;
multiset <int> st[N];
int fa[N], is[N], pfa[N], son[N][2], cnt[N], myd[N], dep[N], maxd[N], maxdep[N];
void up(int x)
{
    cnt[x] = cnt[son[x][0]]+cnt[son[x][1]]+1;
    maxdep[x] = max(max(dep[x],*st[x].rbegin()),max(maxdep[son[x][0]],maxdep[son[x][1]]));
    myd[x] = max(dep[x],*st[x].rbegin())-2*dep[x];
    maxd[x] = max(myd[x],max( maxd[son[x][0]],maxd[son[x][1]]));
}
inline void rot(int x)
{
    int y = fa[x], z = fa[y];
    int r = son[y][1]==x;
    son[y][r] = son[x][!r], fa[son[y][r]] = y;
    son[x][!r] = y, fa[y] = x, fa[x] = z;
    if (is[y])  is[y] = 0, is[x] = 1;
    else    son[z][son[z][1]==y] = x;
    up(y);  return;
}
void spl(int x)
{
    int y, z;
    while (!is[x])
    {
        y = fa[x], z = fa[y];
        if (is[y])  rot(x);
        else if ((son[y][1]==x)^(son[z][1]==y)) rot(x), rot(x);
        else    rot(y), rot(x);
    }
    up(x);
}
int acs(int x)
{
    int y;
    for (y = 0; x; x = fa[y=x])
    {
        spl(x);
        if (son[x][1])
        {
            is[son[x][1]] = 1;
            st[x].insert(maxdep[son[x][1]]);
        }is[son[x][1]=y] = 0;
        if (y)  st[x].erase(st[x].find(maxdep[y]));
        up(x);
    }
    return y;
}
int lca(int u, int v)
{
    acs(u);
    return acs(v);
}
int jump(int x, int d)
{
    acs(x);
    while (x)
    {
        if (cnt[son[x][1]] == d)    return x;
        else if (cnt[son[x][1]] > d)    x = son[x][1];
        else    d -= cnt[son[x][1]]+1, x = son[x][0];
    }
    return x;
}
void link(int u, int v)
{
    int zcc;
    if (dep[u] > dep[v])    zcc = u, u = v, v = zcc;
    acs(u), spl(v), fa[v] = u, st[u].insert(maxdep[v]), spl(u);
}
void cut(int u, int v)
{
    int zcc;
    if (dep[u] > dep[v])    zcc = u, u = v, v = zcc;
    acs(u), spl(v), fa[v] = 0, st[u].erase(st[u].find(maxdep[v])), spl(u);
}
int e, h[N], vv[N<<1], nxt[N<<1];
void add(int u, int v)
{
    vv[e] = v, nxt[e] = h[u], h[u] = e++;
    vv[e] = u, nxt[e] = h[v], h[v] = e++;
}
int gao(int u)
{
    int x = acs(u);
    return maxd[x]+dep[u];
}
void dfs(int u, int f)
{
    pfa[u] = f;
    cnt[u] = is[u] = 1;
    st[u].insert(0);    int v;
    for (int i = h[u]; i+1; i = nxt[i])
    {
        v = vv[i];
        if (v == f) continue;
        maxdep[v] = dep[v] = dep[u]+1;
        myd[v] = maxd[v] = -dep[v]; dfs(v,u);
    }
}
int solve(int u, int v)
{
    if (u == v) return gao(u);
    int f = lca(u,v);
    int d = dep[u]+dep[v]-2*dep[f];
    int hd = (d-1)>>1, x, y;
    if (dep[u]-dep[f] > hd)
    {
        x = jump(u,hd);
        y = jump(x,1);
    }
    else
    {
        x = jump(v,hd);
        y = jump(x,1);
    }
    cut(y,x);
    int ans = max(gao(u),gao(v));
    link(y,x);
    return ans;
}
inline int get()
{
    int szx = 0; char ch = getchar();
    while (ch<'0' || ch>'9')    ch = getchar();
    while (ch>='0' && ch<='9')  szx = szx*10+ch-'0', ch = getchar();
    return szx;
}
int main()
{
    int n, m, u, v; cin >> n;
    memset(h,-1,sizeof(h));
    rep(i,1,n-1)    add(get(),get());
    dfs(1,1);   maxdep[0] = maxd[0] = -inf; cnt[0] = 0;
    rep(i,2,n)  link(pfa[i],i);
    cin >> m;
    rep(i,0,m-1)    printf("%d\n", solve(get(),get()));
}
