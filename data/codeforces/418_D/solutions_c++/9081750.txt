#include<cstdio>
#include<vector>
#include<cstring>
#include<queue>
#include<algorithm>
#define ls l,mid,x<<1
#define rs mid+1,r,x<<1|1
using namespace std;
const int Maxn=100010;
vector<int>G[Maxn];
int d[Maxn],pre[Maxn],d_v[Maxn],bel[Maxn],len;
int d_max[Maxn];
int tree[2][Maxn<<2];
int bfs(int x,int pv,int t)
{
   d[x]=0;
   pre[x]=pv;
   queue<int>q;
   q.push(x);
   int ret=x;
   while(!q.empty())
   {
       int u=q.front();q.pop();
       bel[u]=t;
       for(int i=0;i<G[u].size();i++)
       {
          int v=G[u][i];if(v==pre[u])continue;
          d[v]=d[u]+1;pre[v]=u;
          ret=v;
          q.push(v);
       }
   }return ret;
}
void add(int ty,int tar,int w,int l,int r,int x)
{
   if(l==r){tree[ty][x]=w;return;}
   int mid=(l+r)>>1;
   if(tar<=mid)add(ty,tar,w,ls);
   else add(ty,tar,w,rs);
   tree[ty][x]=max(tree[ty][x<<1],tree[ty][x<<1|1]);
}
int query(int ty,int L,int R,int l,int r,int x)
{
   if(L>R)return 0;
   if(L<=l&&R>=r)return tree[ty][x];
   int mid=(l+r)>>1;
   int ret=0;
   if(L<=mid)ret=max(ret,query(ty,L,R,ls));
   if(R>mid)ret=max(ret,query(ty,L,R,rs));
   return ret;
}
/*
4
1 4
1 2
2 3
3
1 3
*/
int main()
{
   int n;
   scanf("%d",&n);
   for(int i=1;i<n;i++)
   {
       int u,v;scanf("%d%d",&u,&v);
       G[u].push_back(v),G[v].push_back(u);
   }
   int st=bfs(1,0,0);
   int ed=bfs(st,0,0);
   len=d[ed];
   for(int i=0,p=ed;i<=len;i++)
      d_v[i]=p,p=pre[p];
   for(int i=0;i<=len;i++)
   {
      int u=d_v[i];
      d[u]=-1;bel[u]=i;
      for(int j=0;j<G[u].size();j++)
      {
         int v=G[u][j];
         if((i>0&&v==d_v[i-1])||(i<len&&v==d_v[i+1]))continue;
         int t=bfs(v,u,i);
         d_max[i]=max(d_max[i],d[t]+1);
      }
      if(i!=0&&i!=len)add(0,i,i+d_max[i],1,len-1,1),add(1,i,len-i+d_max[i],1,len-1,1);
   }
   //for(int i=0;i<=len;i++)printf("%d ",d_v[i]);puts("");
   int q;
   scanf("%d",&q);
   while(q--)
   {
      int u,v;scanf("%d%d",&u,&v);

      if(bel[u]>bel[v])swap(u,v);
      int t1=bel[u],t2=bel[v];
      //printf("t1=%d t2=%d\n",t1,t2);
      if(t1==t2)
      {
         int plus1=min(d[u],d[v])+1;
         printf("%d\n",plus1+max(t1,len-t1));
         continue;
      }
      int plus1=d[u]+1,plus2=d[v]+1;
      //printf("plus1=%d plus2=%d\n",plus1,plus2);
      int ans=max(min(plus1+t1,plus2+t2),min(plus1+len-t1,plus2+len-t2));
      //printf("%d\n",ans);
      int total=plus1+plus2+t2-t1;
      //printf("%d\n",total);
      int mid=total/2;
      if(mid<=plus1)
      {
         ans=max(ans,query(1,t1+1,t2-1,1,len-1,1)-(len-t2)+plus2);
      }
      else
      {
          if(mid>=total-plus2)ans=max(ans,query(0,t1+1,t2-1,1,len-1,1)-t1+plus1);
          else
          {
             mid-=plus1;mid+=t1;
             int r1=mid,r2=mid;
             if(total&1)r2++;
             //printf("r1=%d r2=%d\n",r1,r2);
             ans=max(ans,query(0,t1+1,r1,1,len-1,1)-t1+plus1);
             ans=max(ans,query(1,r2,t2-1,1,len-1,1)-(len-t2)+plus2);
          }
      }
      printf("%d\n",ans);
   }
}
