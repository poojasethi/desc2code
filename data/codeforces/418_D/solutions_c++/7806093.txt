#include<stdio.h>
#include<algorithm>
using namespace std;
const int maxn=100050,maxb=20;
int n,m;
int es=0,he[maxn],to[maxn],ne[maxn];
bool whe[maxn];
int ord[maxn],en=0;
int dep[maxn],f[maxn][maxb],up[maxn][2][maxb],down[maxn][3];
void ins(int x,int y)
{
	to[++es]=y,ne[es]=he[x],he[x]=es;
}
int get_far0(int x,int k)
{
	int i,j=0,s=0;
	for(i=maxb-1;i>=0;i--)
		if(k>=(1<<i))
			s=max(s,up[x][0][i]+j),x=f[x][i],k-=1<<i,j+=1<<i;
	return s;
}
int get_far1(int x,int k)
{
	int i,s=0;
	for(i=maxb-1;i>=0;i--)
		if(k>=(1<<i))
			s=max(s,up[x][1][i]),x=f[x][i],k-=1<<i;
	return s-dep[x]+k;
}
inline int get(int x,int a,int b=0)
{
	int i;
	bool vis[3]={0};
	for(i=0;i<3;i++)
		if(a==down[x][i])
		{ vis[i]=1;break; }
	for(i=0;i<3;i++)
		if(!vis[i]&&b==down[x][i])
		{ vis[i]=1;break; }
	for(i=0;vis[i];i++);
	return down[x][i];
}
void bfs(int S)
{
	int i,j,x,y;
	ord[en++]=S;
	for(i=0;i<en;i++)
	{
		x=ord[i];
		for(j=he[x];j;j=ne[j])
		{
			dep[ord[en++]=to[j]]=dep[x]+1;
			f[to[j]][0]=x;
		}
	}
	for(i=n-1;i>=0;i--)
	{
		x=ord[i];
		for(j=he[x];j;j=ne[j])
		{
			y=to[j];
			if(down[y][0]+1>down[x][0])
				down[x][2]=down[x][1],down[x][1]=down[x][0],down[x][0]=down[y][0]+1;
			else if(down[y][0]+1>down[x][1])
				down[x][2]=down[x][1],down[x][1]=down[y][0]+1;
			else if(down[y][0]+1>down[x][2])
				down[x][2]=down[y][0]+1;
		}
	}
	for(i=1;i<n;i++)
	{
		x=ord[i];
		up[x][0][0]=get(f[x][0],down[x][0]+1)+1;
		up[x][1][0]=get(f[x][0],down[x][0]+1)+dep[x]-1;
		for(j=0;f[x][j];j++)
		{
			f[x][j+1]=f[f[x][j]][j];
			up[x][0][j+1]=max(up[x][0][j],up[f[x][j]][0][j]+(1<<j));
			up[x][1][j+1]=max(up[x][1][j],up[f[x][j]][1][j]);
		}
	}
}
int LCA(int x,int y)
{
	int i;
	if(dep[x]>dep[y]) swap(x,y);
	for(i=maxb-1;i>=0;i--)
		if(dep[y]-dep[x]>=(1<<i))
			y=f[y][i];
	for(i=maxb-1;i>=0;i--)
		if(f[x][i]!=f[y][i])
			x=f[x][i],y=f[y][i];
	return x!=y?f[x][0]:x;
}
int get_fa(int x,int k)
{
	int i;
	for(i=maxb-1;i>=0;i--)
		if(k>=(1<<i))
			x=f[x][i],k-=1<<i;
	return x;
}
int query(int x,int y)
{
	int lca=LCA(x,y),mid,ret;
	if(dep[x]>dep[y]) swap(x,y);
	if(lca==x)
	{
		mid=get_fa(y,(dep[y]-dep[x])/2);
		ret=max(get_far0(x,dep[x]),down[y][0]);
		ret=max(ret,get(x,down[get_fa(y,dep[y]-dep[x]-1)][0]+1));
		ret=max(ret,get_far0(y,dep[y]-dep[mid]));
		ret=max(ret,get_far1(mid,dep[mid]-dep[x]-1)+1);
	}
	else
	{
		mid=get_fa(y,(dep[x]+dep[y]-dep[lca]*2)/2);
		ret=max(get_far0(lca,dep[lca])+dep[x]-dep[lca],max(down[x][0],down[y][0]));
		ret=max(ret,get(lca,down[get_fa(x,dep[x]-dep[lca]-1)][0]+1,down[get_fa(y,dep[y]-dep[lca]-1)][0]+1)+dep[x]-dep[lca]);
		ret=max(ret,get_far0(y,dep[y]-max(dep[lca]+1,dep[mid])));
		ret=max(ret,get_far0(x,dep[x]-dep[lca]-1));
		ret=max(ret,get_far1(mid,dep[mid]-dep[lca]-1)+1+dep[x]-dep[lca]);
	}
	return ret;
}
int main()
{
	//freopen("thirst.in","r",stdin);
	//freopen("thirst.out","w",stdout);
	int i,j,x,y;
	scanf("%d",&n);
	for(i=1;i<n;i++)
		scanf("%d%d",&x,&y),ins(x,y),whe[y]=1;
	for(i=1;i<=n;i++) 
		if(!whe[i]) break;
	bfs(i);
	//for(i=1;i<=n;i++) { for(j=0;j<maxb;j++) printf("%d ",f[i][j]); printf("\n"); } printf("\n");
	//for(i=1;i<=n;i++) { for(j=0;j<maxb;j++) printf("%d ",up[i][0][j]); printf("\n"); } printf("\n");
	//for(i=1;i<=n;i++) { for(j=0;j<maxb;j++) printf("%d ",up[i][1][j]); printf("\n"); } printf("\n");
	scanf("%d",&m);
	for(i=0;i<m;i++)
		scanf("%d%d",&x,&y),printf("%d\n",query(x,y));
	return 0;
}
