#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <set>
#include <algorithm>

using namespace std;

#define LL long long
#define N 400010
#define M 500010
#define MP make_pair
#define Pi acos(-1.0)
//#pragma comment(linker,"/STACK:1024000000,1024000000")
#define inf 0x3f3f3f3f
#define ls (i << 1)
#define rs (ls | 1)
#define md ((ll+rr)>>1)
#define lson ll, md, ls
#define rson md+1,rr,rs
#define mod 1000000007
#define INF 1LL<<63
#define sqr(x) ((x)*(x))
#define uLL unsigned long long
LL powmod(LL a,LL b){
    LL res = 1; a %= mod;
    for(;b;b>>=1){
        if(b & 1) res = res * 1 % mod;
        a = a * a % mod;
    }
    return res;
}

int fa[N][22],up[N][22],down[N][22];
int dep[N],fst[N],nxt[M],g[N],vv[M],e;
int f[N],mx1[N],mx2[N],mx3[N],id1[N],id2[N];

void init(){
    e = 0;
    dep[1] = 0;
    memset(fst,-1,sizeof fst);
}

void add(int u,int v){
    vv[e] = v,nxt[e] = fst[u],fst[u] = e++;
    vv[e] = u,nxt[e] = fst[v],fst[v] = e++;
}

void dfs(int u,int ff){
    fa[u][0] = ff;
    f[u] = 0;
    mx1[u] = mx2[u] = mx3[u] = 0;
    for(int i = fst[u]; ~i; i = nxt[i]){
        int v = vv[i];
        if(v == ff) continue;
        dep[v] = dep[u] + 1;
        dfs(v,u);
        f[u] = max(f[u],f[v]+1);
        if(f[v] + 1 > mx1[u]){
        	mx3[u] = mx2[u];
            mx2[u] = mx1[u],id2[u] = id1[u];
            mx1[u] = f[v] + 1,id1[u] = v;
        }
        else if(f[v] + 1 > mx2[u]){
        	mx3[u] = mx2[u];
            mx2[u] = f[v] + 1,id2[u] = v;
        }
        else mx3[u] = max(mx3[u],f[v]+1);
    }
}

void dfs2(int u,int ff){
    for(int i = fst[u]; ~i; i = nxt[i]){
        int v = vv[i];
        if(v == ff) continue;
        if(id1[u] == v) up[v][0] = mx2[u];
        else up[v][0] = mx1[u];
        g[v] = max(g[u],up[v][0]) + 1;
    }
    down[u][0] = up[u][0] + 1;
    for(int i = 1; i <= 20; i++){
        int t = fa[u][i-1];
        fa[u][i] = fa[t][i-1];
        up[u][i] = max(up[u][i-1]+(1<<(i-1)),up[t][i-1]);
        down[u][i] = max(down[u][i-1],down[t][i-1]+(1<<(i-1)));
    }
    for(int i = fst[u]; ~i; i = nxt[i]){
        int v = vv[i];
        if(v == ff) continue;
        dfs2(v,u);
    }
}

int lca(int u,int v){
    if(dep[u] < dep[v]) swap(u,v);
    for(int i = 20; i >= 0; i--) if((dep[u]-dep[v])&(1<<i)) u = fa[u][i];
    if(u == v) return u;
    for(int i = 20; i >= 0; i--)
        if(fa[u][i] != fa[v][i]){
            u = fa[u][i];
            v = fa[v][i];
        }
    return fa[u][0];
}

int find(int u,int dis){
    for(int i = 0; i <= 20; i++)
        if(dis & (1 << i)) u = fa[u][i], dis -= (1 << i);
    return u;
}

int f1(int u,int len){
    int res = 0,l = 0;
    for(int i = 20; i >= 0; i--)
        if(len >= (1 << i)){
            res = max(res,l + down[u][i]);
            u = fa[u][i];
            l += 1 << i;
            len -= 1 << i;
        }
    return res;
}

int f2(int u,int len){
    if(len <= 0) return -10000;
    int res = -10000;
    for(int i = 20; i >= 0; i--)
        if(len >= (1<<i)){
            res = max(res + (1<<i),up[u][i]);
            u = fa[u][i];
            len -= 1 << i;
        }
    return res;
}

int main(){
    int n,m;
    scanf("%d",&n);
    init();
    for(int i = 1; i < n; i++){
        int u,v;
        scanf("%d%d",&u,&v);
        add(u,v);
    }
    
    scanf("%d",&m);
    dfs(1,0);
    dfs2(1,0);
    for(int i = 1; i <= m; i++){
        int u,v;
        scanf("%d%d",&u,&v);
        if(dep[u] > dep[v]) swap(u,v);
        int l = lca(u,v);
        int d = dep[u]+dep[v]-2*dep[l];
        int dis = (d-1)/ 2;
        int ans = f[v];
        if(u != l) ans = max(ans,f[u]);
        ans = max(ans,f1(v,dis));
        ans = max(ans,f1(u,dep[u] - dep[l]-1));
        
        int ll = find(v,dep[v] - dep[l] - 1),rl = find(u,dep[u] - dep[l] - 1),lu = dep[u] - dep[l];
        
        ans = max(ans,f2(find(v,dis),dep[v] - dep[l] - dis - 1) + 1 + lu);
        if(id1[l] != ll && id1[l] != rl) ans = max(ans,mx1[l] + lu);
        else if(id2[l] != ll && id2[l] != rl) ans = max(ans,mx2[l] + lu);
        else ans = max(ans,mx3[l] + lu);
        ans = max(ans,g[l] + lu);
        printf("%d\n",ans);
    }
    return 0;
}
 	   	 	  	   		  	  		   	