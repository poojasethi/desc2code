#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<vector>
#include<queue>
#include<map>
#include<set>
#include<string>
#include<iostream>
using namespace std;
typedef __int64 ll;
const int N = 101000;
int max(int x,int y){return x>y?x:y;}
vector<int>E[N];
int dep[N],fa[N],mx[N][3];
void dfs(int x,int de)
{
	dep[x]=de;
	for(int i=E[x].size()-1;i>=0;i--)
	{
		int j=E[x][i];
		if(j!=fa[x])
		{
			fa[j]=x;
			dfs(j,de+1);
			int v=mx[j][0]+1;
			for(int h=0;h<3;h++)if(mx[x][h]<v)
			{
				for(int g=2;g>h;g--)mx[x][g]=mx[x][g-1];
				mx[x][h]=v;
				break;
			}
		}
	}
}
int ff[N][20],up[N][20],down[N][20];
int fd(int x,int k)
{
	if(k<=0)return x;
	for(int i=19;i>=0;i--)if(k&(1<<i))
	{
		x=ff[x][i];
	}
	return x;
}
int get(int x,int k,int t)
{
	int r=0,p=0;
	for(int i=19;i>=0;i--)if(k&(1<<i))
	{
		if(!t)
		{
			r=max(r,p+up[x][i]);
		}
		else
		{
			r=max(r,down[x][i]+k-(1<<i)-p);
		}
		p+=(1<<i);
		x=ff[x][i];
	}
	return r;
}
int lca(int x,int y)
{
    if(dep[x]>dep[y])x^=y^=x^=y;
    int i;
    for(i=19;i>=0;i--)
    {
        if(dep[y]-dep[x]>=(1<<i))
        {
            y=ff[y][i];
        }
    }
    if(x==y)return x;
    for(i=19;i>=0;i--)
    {
        if(ff[x][i]!=ff[y][i])
        {
            x=ff[x][i];
            y=ff[y][i];
        }
    }
    return fa[x];
}
int main()
{
	int i,n,m,h;
	scanf("%d",&n);
	for(i=1;i<n;i++)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		E[a].push_back(b);
		E[b].push_back(a);
	}
	dfs(1,0);
	for(i=1;i<=n;i++)ff[i][0]=fa[i];
	for(h=1;h<20;h++)
	{
		for(i=1;i<=n;i++)
		{
			ff[i][h]=ff[ff[i][h-1]][h-1];
		}
	}
	for(i=1;i<=n;i++)
	{
		up[i][0]=down[i][0]=mx[ff[i][0]][mx[ff[i][0]][0]==mx[i][0]+1];
		up[i][0]++;
	}
	for(h=1;h<20;h++)
	{
		for(i=1;i<=n;i++)
		{
			up[i][h]=max(up[i][h-1],up[ff[i][h-1]][h-1]+(1<<(h-1)));
			down[i][h]=max(down[ff[i][h-1]][h-1],down[i][h-1]+(1<<(h-1)));
		}
	}
	scanf("%d",&m);
	while(m--)
	{
		int a,b,c;
		scanf("%d%d",&a,&b);
		c=lca(a,b);
		if(dep[a]>dep[b])a^=b^=a^=b;
		int ret=mx[b][0];
		if(a!=c)
		{
			ret=max(ret,mx[a][0]);
			ret=max(ret,get(a,dep[a]-dep[c]-1,0));
		}
		int dis=dep[a]+dep[b]-dep[c]-dep[c];
		ret=max(ret,get(b,(dis-1)/2,0));
		int f=fd(b,(dis-1)/2);
		if(dep[f]>dep[c]+1)
		{
			ret=max(ret,get(f,dep[f]-dep[c]-1,1)+dep[a]-dep[c]+1);
		}
		ret=max(ret,get(c,dep[c],0)+dep[a]-dep[c]);
		int aa=fd(a,dep[a]-dep[c]-1);
		int bb=fd(b,dep[b]-dep[c]-1);
		int av=mx[aa][0],bv=mx[bb][0],t;
		if(a==c)av=-1;
		if(av<bv)av^=bv^=av^=bv;
		if(mx[c][0]!=av+1)t=mx[c][0];
		else if(mx[c][1]!=bv+1)t=mx[c][1];
		else t=mx[c][2];
		ret=max(ret,t+dep[a]-dep[c]);
		printf("%d\n",ret);
	}
	return 0;
}