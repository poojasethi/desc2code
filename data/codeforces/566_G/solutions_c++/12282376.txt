//tonynater

#include <algorithm>
#include <iostream>
#include <set>
#include <stack>
#include <utility>

#define sz(x) ((int) x.size())

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;

const int MAXN = 100010;

int N, M, X, Y, Hsz = 0;

pii A[MAXN], B[MAXN], H[MAXN];

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> N >> M >> X >> Y;
    
    for(int i = 0; i < N; i++) {
        cin >> A[i].first >> A[i].second;
    }
    
    int mxY = 0;
    for(int i = 0; i < M; i++) {
        cin >> B[i].first >> B[i].second;
        mxY = max(B[i].second, mxY);
    }
    
    sort(B, B+M);
    
    H[Hsz++] = pii(0,mxY);
    H[Hsz++] = B[0];
    for(int i = 1; i < M; i++) {
        while(Hsz >= 2) {
            ll dx1 = B[i].first-H[Hsz-2].first;
            ll dy1 = B[i].second-H[Hsz-2].second;
            ll dx2 = H[Hsz-1].first-H[Hsz-2].first;
            ll dy2 = H[Hsz-1].second-H[Hsz-2].second;
            if(dy1*dx2 >= dy2*dx1) {
                --Hsz;
            }else {
                break;
            }
        }
        H[Hsz++] = B[i];
    }
    while(H[Hsz-2].first == H[Hsz-1].first) {
        --Hsz;
    }
    H[Hsz] = pii(H[Hsz-1].first,0);
    ++Hsz;
    
    sort(A, A+N);
    
    for(int i = 0, pos = 0; i < N; i++) {
        while(pos < Hsz) {
            if(H[pos].first <= A[i].first) {
                ++pos;
            }else {
                break;
            }
        }
        if(pos == Hsz) {
            cout << "Max\n";
            return 0;
        }
        if(A[i].second > H[pos-1].second) {
            cout << "Max\n";
            return 0;
        }
        ll dx1 = A[i].first - H[pos-1].first;
        ll dy1 = A[i].second - H[pos-1].second;
        ll dx2 = H[pos].first - H[pos-1].first;
        ll dy2 = H[pos].second - H[pos-1].second;
        if(dy1*dx2 >= dy2*dx1) {
            cout << "Max\n";
            return 0;
        }
    }
    
    cout << "Min\n";
    
    return 0;
}