#include <bits/stdc++.h>

using namespace std;

#define fr(a,b,c) for(int (a) = (b); (a) < (c); ++(a))
#define rp(a,b) fr(a,0,b)
#define fre(a,b) for(int a = adj[b]; ~a; a = ant[a])
#define cl(a,b) memset((a), (b), sizeof(a))
#define sc(a) scanf("%d", &a)
#define sc2(a,b) scanf("%d%d", &a, &b)
#define sc3(a,b,c) scanf("%d%d%d", &a, &b, &c)
#define scs(s) scanf("%s", s)
#define pri(x) printf("%d\n", x)

#define iter(a) __typeof((a).begin())
#define fore(a,b) for(iter(b) a = (b).begin(); a != (b).end(); ++a)

#define st first
#define nd second
#define mp make_pair
#define pb push_back

#define db(x) cerr << #x << " == " << x << endl
#define dbs(x) cerr << x << endl
#define _ << ", " <<

const int oo = 0x3f3f3f3f;

typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector< vi > vii;

#define N 1000009

int n, m, x, y;
pii a[N], b[N], c[N];

bool dom(pii a, pii b) {
	return (a.st >= b.st) &&
			(a.nd >= b.nd);
}

bool domm(pii a, pii b) {
	return (a.st > b.st) &&
			(a.nd > b.nd);
}

int curva(pii lf, pii md, pii rt) {
	ll x = md.st, yy = md.nd;
	ll x1 = lf.st, x2 = rt.st;
	ll y1 = lf.nd, y2 = rt.nd;
	ll v1 = y1*ll(x2-x), v2 = y2*ll(x-x1), v3 = yy*ll(x2-x1);
	
	//db(double(v1+v2)/double(x2-x1));
	return (v1+v2 < v3)? 1: (v1+v2 == v3)? 0: -1;
}

void prep() {
	int mxy = 0;
	rp(i, n) mxy = max(mxy, b[i].nd);
	
	c[0] = pii(0, mxy);
	int j = 0;
	rp(i, n) {
		while (j > 0 && curva(c[j-1], c[j], b[i]) <= 0) j--;
		c[++j] = b[i];
	}
	rp(i, j) c[i] = c[i+1];
	
	n = j;
	//rp(i, n) db(c[i].st _ c[i].nd);
}

bool proc() {
	rp(i, m) {
		pii curr = a[i];
		int pos = lower_bound(c, c+n, pii(curr.st, -oo)) -c;
		//db(a[i].st _ a[i].nd _ pos);
		
		if (pos == n) return 0;
		if (pos == n-1) {
				if (c[pos].st == curr.st) return 0;
			}
		
		if (pos == 0) {
			if (c[pos].nd <= curr.nd) return 0;
		} else {
			pii lf = c[pos-1], rt = c[pos];
			if (curva(lf, curr, rt) >= 0) return 0;
		}
	}
	return 1;
}

int main() {
	while (sc2(m, n) == 2) {
		sc2(x, y);
		rp(i, m) sc2(a[i].st, a[i].nd);
		rp(i, n) sc2(b[i].st, b[i].nd);
		
		sort(b, b+n);
		prep();
		puts(proc()? "Min": "Max");
		//return 0;
	}
	return 0;
}




































