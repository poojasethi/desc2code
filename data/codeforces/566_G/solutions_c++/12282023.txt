// TEMPLATE {{{
#include <bits/stdc++.h>
using namespace std;
#ifndef LOCAL
#define OJ 1
#else
#define OJ 0
#endif

#define endl '\n'
#define TIMESTAMP merr << "Execution time: " << (double)clock()/CLOCKS_PER_SEC << " s.\n"
class C_ {}; template <typename T> C_& operator <<(C_& __m, const T& __s) { if (!OJ) cerr << "\E[91m" << __s << "\E[0m"; return __m; }
C_ merr;

struct __s { __s() { if (OJ) { ios_base::Init i; cin.sync_with_stdio(0); cin.tie(0); } } ~__s(){ TIMESTAMP; } } __S;
/// END OF TEMPLATE }}}

// int winMax[1111][1111];
// int winMin[1111][1111];
long long A[111111], B[111111], C[111111], D[111111];
int n,m;

// bool winMn(int x, int y, int len);
// bool winMx(int x, int y, int len) {
  // if (x < 0 && y < 0) return false;
  // if (!(0 <= x+555 && x+555 < 1111 && 0 <= y+555 && y+555 < 1111) || len > 1000) {
    // return true;
  // }
  // if (winMax[x+555][y+555] != -1) return winMax[x+555][y+555];
  // for (int i = 0; i < n; i++) {
    // if (!winMn(x+A[i], y+B[i], len+1)) return (winMax[x+555][y+555] = 1);
  // }
  // return (winMax[x+555][y+555] = 0);
// }

// bool winMn(int x, int y, int len) {
  // if (x < 0 && y < 0) return true;
  // if (!(0 <= x+555 && x+555 < 1111 && 0 <= y+555 && y+555 < 1111) || len > 1000) {
    // return false;
  // }
  // if (winMin[x+555][y+555] != -1) return winMin[x+555][y+555];
  // for (int i = 0; i < m; i++) {
    // if (!winMx(x-C[i], y-D[i], len+1)) return (winMin[x+555][y+555] = 1);
  // }
  // return (winMin[x+555][y+555] = 0);
// }

int I[111111];
int comp(int a, int b) {
  return C[a] > C[b];
}
bool check(long long a, long long b) {
  // merr << a << " " << b << '\n';
  for (int i = 0; i < m; i++) {
    if (C[i] > a && D[i] > b) return true;
  }
  for (int i = 0; i < m; i++) {
    I[i] = i;
  }
  sort(I, I+m, comp);
  int idx = 0;
  long long mxd = -1;
  for (int ii = 0; ii < m; ii++) {
    int i = I[ii];
    long long c1 = C[i];
    long long d1 = D[i];
    if (idx < m && C[I[idx]] > 2*a-c1) {
      while (idx < m && C[I[idx]] > 2*a-c1) {
        // merr << idx << " " << c1 << " " << ii << " " << 2*a-c1 << " " << C[I[idx]] << '\n';
        mxd = max(mxd, D[I[idx]]); idx++;
      }
      // merr << mxd << '\n';
      if (d1 + mxd > 2*b) {
        // merr << c1 << " " << d1 << '\n';
        // merr << mxd << '\n';
        return true;
      }
    }
  }
  return false;
}

bool solve() {
  int i1 = 0, i2 = 0;
  for (int i = 0; i < n; i++) {
    if (A[i] > A[i1] || (A[i] == A[i1] && B[i] > B[i1])) i1 = i;
    if (B[i] > B[i2] || (B[i] == B[i2] && A[i] > A[i2])) i2 = i;
  }
  return !(check(A[i1], B[i1]) && check(A[i2], B[i2]));
}

// void tests() {
  // int fidx = 0;
  // while (1) {
    // merr << '\r' << ++fidx << '\r';
    // n = 5;
    // m = 5;
    // for (int i = 0; i < n; i++) {
      // A[i] = rand()%9+1;
      // B[i] = rand()%9+1;
    // }
    // for (int i = 0; i < m; i++) {
      // C[i] = rand()%9+1;
      // D[i] = rand()%9+1;
    // }
    // memset(winMin, 255, sizeof(winMin));
    // memset(winMax, 255, sizeof(winMax));
    // int x = rand()%50 + 1, y = rand()%50 + 1;
    // bool a1 = winMx(x, y, 0);
    // bool a2 = solve();
    // if (a1 != a2) {
      // merr << "EROEROERoeorro!" << '\n';
      // merr << a1 << " " << a2 << '\n';
      // for (int i = 0; i < n; i++) {
        // merr << A[i] << " " << B[i] << '\n';
      // }
      // merr << '\n';
      // for (int i = 0; i < m; i++) {
        // merr << C[i] << " " << D[i] << '\n';
      // }
      // merr << x << " " << y << '\n';
      // cin.get();
    // }
    // // if (winMx(x, y, 0)) {
    // // // cout << "Max" << endl;
    // // } else {
    // // cout << "Min" << endl;
    // // cin.get();
    // // }
  // }
// }

int main(void) {
  // tests();
  int x,y;
  cin >> n >> m;
  cin >> x >> y;
  for (int i = 0; i < n; i++) {
    cin >> A[i] >> B[i];
  }
  for (int i = 0; i < m; i++) {
    cin >> C[i] >> D[i];
  }
  cout << (solve() ? "Max" : "Min") << endl;
  return 0;
}
