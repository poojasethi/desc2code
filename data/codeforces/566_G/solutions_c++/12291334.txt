#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime>
#include <string>

#define mp make_pair
#define pb push_back
#define sz(x) ((int)(x).size())
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#define fs first
#define sc second
#define forn(i, n) for (int i = 0; i < (n); ++i)
#define forit(it, s) for (typeof(s.begin()) it = s.begin(); it != s.end(); ++it)

#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif

using namespace std;

long long rdtsc() { long long tmp; asm("rdtsc" : "=A"(tmp)); return tmp; }

typedef long long ll;
typedef double dbl;
typedef pair<int, int> pi;
typedef vector<int> vi;

const int inf = (int)1.01e9;
const dbl eps = 1e-9;

/* --- main part --- */

#define TASK "text"

const int maxn = (int)1e5 + 10;

struct pt
{
  ll x, y;
  pt(){}
  pt(ll xx, ll yy): x(xx), y(yy) {}
  void read()
  {
    scanf(LLD LLD, &x, &y);
  }
};

inline ll vect(pt p1, pt p2)
{
  return p1.x * p2.y - p1.y * p2.x;
}

inline pt operator - (pt p1, pt p2)
{
  return pt(p1.x - p2.x, p1.y - p2.y);
}

inline bool operator < (pt p1, pt p2)
{
  return p1.x < p2.x || (p1.x == p2.x && p1.y > p2.y);
}

pt a[maxn];
pt b[maxn];


pt st[maxn];
int stc = 0;

int main() {
  #ifdef DEBUG
    freopen(TASK ".in", "r", stdin);
    freopen(TASK ".out", "w", stdout);
  #endif
  int n, m;
  scanf("%d%d", &n, &m);
  pt start;
  start.read();
  forn(i, n) b[i].read();
  forn(i, m) a[i].read();
  sort(a, a + m);
  /*for (int i = 0; i < m; ++i) {
    eprintf("%lld %lld\n", a[i].x, a[i].y);
  }*/
  forn(i, m)
  {
    while (stc >= 2 && vect(a[i] - st[stc - 1], a[i] - st[stc - 2]) <= 0) stc -= 1;
    st[stc++] = a[i];
  }
  
  {
    int first = 0;
    while (first + 1 < stc && st[first].y < st[first + 1].y) {
      ++first;
    }
    rotate(st, st + first, st + stc);
    stc -= first;

    while (stc >= 2 && st[stc - 1].x == st[stc - 2].x) {
      --stc;
    }
  }
  /*for (int i = 0; i < stc; ++i) {
    eprintf("%lld %lld\n", st[i].x, st[i].y);
  }*/
  bool ok = true;
  forn(i, n)
  {  
    if (!ok) break;
    pt p = b[i];
    //eprintf("p = (%lld, %lld)\n", p.x, p.y);

    int pos = lower_bound(st, st + stc, p) - st;
    if (pos == 0) {
      assert(p.x <= st[0].x);
      if (p.y >= st[0].y) {
        ok = false;
        break;
      }
      continue;
    }
    if (pos == stc) {
      ok = false;
      break;
    }
    assert(st[pos - 1].x < st[pos].x);
    if (vect(p - st[pos - 1], st[pos] - st[pos - 1]) <= 0)
    {
      ok = false;
      break;
    }
  }
  if (ok) printf("Min\n");
  else printf("Max\n");

  #ifdef DEBUG
    eprintf("Time: %d ms\n", (int) (clock() * 1000. / CLOCKS_PER_SEC));
  #endif
  return 0;
}
