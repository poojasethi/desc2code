#include <algorithm>
#include <bitset>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
#define INF 1000000007
#define MP make_pair
#define FI first
#define SE second
#define PB push_back
#define VI vector<int>
const double EPS = 1e-7, PI = acos(-1.0);
using namespace std;
typedef long long LL;
typedef pair <LL, LL> P;
template<class T>
inline T IN(T &num)
{
    num = 0;
    char c = getchar(), f = 0;
    while(c != '-' && (c < '0' || c > '9')) c = getchar();
    if(c == '-') f = 1, c = getchar();
    while('0' <= c && c <= '9') num = num * 10 + c - '0', c = getchar();
    if(f) num = -num;
    return num;
}
template<class T>
inline void U(T num) {if(num < 0)putchar('-'), num = -num; if(num > 9)U(num / 10); putchar(num % 10 + '0');}
//------------------------   code   ---------------------------------//
const int NUM = 100010;
set<P> p;
vector<P> v, w;
bool mult(P &a, P &b, P &c)
{
    return 1LL * (a.FI - c.FI) * (b.SE - c.SE) < 1LL * (a.SE - c.SE) * (b.FI - c.FI);
}
bool cmp(P a, P b)
{
    if(a.FI == b.FI) return a.SE > b.SE;
    return a.FI < b.FI;
}
int main()
{
#ifdef ACM_TEST
    freopen("in.txt", "r", stdin);
//	freopen("in.txt", "w", stdout);
#endif
    int n, m, x, y;
    IN(n), IN(m);
    IN(x), IN(y);
    for(int i = 0; i < n; i++)
    {
        IN(x), IN(y);
        p.insert(P(x, -y));
        v.PB(P(x, -y));
    }
    for(int i = 0; i < m; i++)
    {
        IN(x), IN(y);
        v.PB(P(x, -y));
    }
    sort(v.begin(), v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    w.clear();
    for(int i = 0; i < (int)v.size(); i++)
    {
        while(!w.empty() && w.back().SE > v[i].SE) w.pop_back();
        while(w.size() > 1 && mult(w.back(), v[i], w[w.size() - 2])) w.pop_back();
        w.PB(v[i]);
    }
    for(int i = 0; i < (int)w.size(); i++)
        if(p.find(w[i]) != p.end())
        {
            puts("Max");
            return 0;
        }
    puts("Min");
    return 0;
}
