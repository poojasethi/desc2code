#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 1e5 + 5;

int n, m, x, y;
ii a[N], b[N], c[N], v[N], nmax[N];

ll ccw(ii a, ii c, ii b) {
    ii v1 = ii(c.first - a.first, c.second - a.second);
    ii v2 = ii(b.first - a.first, b.second - a.second);
    return (ll) v1.first * v2.second - (ll) v2.first * v1.second;
}

int main () {
    
    scanf("%d %d %d %d", &n, &m, &x, &y);
    
    for(int i = 1; i <= n; i++)
        scanf("%d %d", &a[i].first, &a[i].second);
    
    for(int i = 1; i <= m; i++)
        scanf("%d %d", &b[i].first, &b[i].second);
    
    sort(a + 1, a + n + 1);
    sort(b + 1, b + m + 1);
    
    int j = m, mx = -inf, k = 0, sz = 0;
    
    for(int i = n; i >= 1; i--) {
        while(j >= 1 and b[j].first > a[i].first) {
            mx = max(mx, b[j].second);
            j--;
        }
        if(a[i].second >= mx)
            c[++k] = a[i];
    }
    
    ii iimax = ii(0, 0);
    
    for(int i = 1; i <= m; i++)
        iimax = max(iimax, ii(b[i].second, i));
    
    if(iimax.second == m) {
        if(k)
            puts("Max");
        else
            puts("Min");
        return 0;
    }
    
    v[sz++] = b[iimax.second];
    v[sz++] = b[m];
    
    for(int i = iimax.second + 1; i <= m; i++) {
        while(sz > 1 and ccw(v[sz - 2], v[sz - 1], b[i]) >= 0)
            sz--;
        v[sz++] = b[i];
    }
    
    int beg = 0;
    
    reverse(c + 1, c + k + 1);
    
    for(int i = 1; i <= k; i++) {
        if(c[i].first <= v[0].first or c[i].first >= v[sz - 1].first) {
            puts("Max");
            return 0;
        }
        while(beg + 2 < sz and v[beg + 1].first <= c[i].first)
            beg++;
        if(ccw(v[beg], v[beg + 1], c[i]) >= 0) {
            puts("Max");
            return 0;
        }
    }
    
    puts("Min");
        
    return 0;
    
}