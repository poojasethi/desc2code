#include<cmath>
#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

const int inf=1000000000;
typedef long long ll;

struct point
{
    int x,y;
    point(int x0=0,int y0=0) {x=x0;y=y0;}
    point operator -(point a)const {return point(x-a.x,y-a.y);}
    bool operator <(point a)const {return x<a.x||(x==a.x&&y<a.y);}
}a[100010],b[100010];

ll cross(point a,point b) {return ll(a.x)*b.y-ll(a.y)*b.x;}

int main()
{
    #ifdef waltz
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int n,m;scanf("%d%d",&n,&m);
    int x,y;scanf("%d%d",&x,&y);
    for (int i=1;i<=n;i++) scanf("%d%d",&a[i].x,&a[i].y);
    for (int i=1;i<=m;i++) scanf("%d%d",&b[i].x,&b[i].y);
    for (int i=1;i<=n;i++) {a[i].x=-a[i].x;a[i].y=-a[i].y;}
    for (int i=1;i<=m;i++) {b[i].x=-b[i].x;b[i].y=-b[i].y;}
    sort(b+1,b+m+1);
    int top=1;
    for (int i=2;i<=m;i++)
    {
        if (b[i].y>=b[top].y) continue;
        while (top>1&&cross(b[top]-b[top-1],b[i]-b[top-1])<=0) top--;
        b[++top]=b[i];
    }
    b[0]=point(b[1].x,inf);b[top+1]=point(inf,b[top].y);top++;
    bool ok=1;
    point O(0,0);
    for (int i=1;i<=n;i++)
    {
        int l=0,r=top-1;
        while (l<=r)
        {
            int mid=(l+r)>>1;
            if (cross(b[mid]-O,a[i]-O)>0) l=mid+1; else r=mid-1;
        }
        if (cross(b[l]-b[r],a[i]-b[r])<=0) {ok=0;break;}
    }
    if (ok) printf("Min\n"); else printf("Max\n");
    return 0;
}
