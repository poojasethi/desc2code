#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <cmath>

using namespace std;

typedef long long int ll;

struct punt {
  ll x,y,ind;
  punt() {
  }
  punt(ll inx,ll iny,ll inind) {
    x=inx;y=iny;ind=inind;
  }
};

punt operator-(punt p1,punt p2)
{
  p1.x-=p2.x;
  p1.y-=p2.y;
  return p1;
}

ll prodvec(punt p1,punt p2)
{
  return p1.x*p2.y-p1.y*p2.x;
}

ll sq(punt p)
{
  return p.x*p.x+p.y*p.y;
}

bool compara(punt p1,punt p2)
{
  ll pv=prodvec(p1,p2);
  if (pv>0) return true;
  if (pv<0) return false;
  ll m1=sq(p1);
  ll m2=sq(p2);
  if (m1<m2) return true;
  if (m1>m2) return false;
  return p1.ind>p2.ind;
}

int main()
{
  ios::sync_with_stdio(false);
  int n,m;
  cin>>n>>m;
  int xini,yini;
  cin>>xini>>yini;
  vector<punt> input;
  ll maxx=0,maxy=0;
  for (int i=0;i<n;i++) {
    punt p;
    cin>>p.x>>p.y;
    maxx=max(maxx,p.x);
    maxy=max(maxy,p.y);
    p.ind=0;
    input.push_back(p);
  }
  for (int i=0;i<m;i++) {
    punt p;
    cin>>p.x>>p.y;
    maxx=max(maxx,p.x);
    maxy=max(maxy,p.y);
    p.ind=1;
    input.push_back(p);
  }
  input.push_back(punt(maxx,0,1));
  input.push_back(punt(0,maxy,1));
  sort(input.begin(),input.end(),compara);
  vector<punt> nextinput;
  for (int i=0;i<int(input.size());i++) {
    while (int(nextinput.size())>0 and
	   ((nextinput.back().x<input[i].x and nextinput.back().y<input[i].y) or
	    (nextinput.back().x==input[i].x and nextinput.back().y==input[i].y)))
      nextinput.pop_back();
    nextinput.push_back(input[i]);
  }
  input=nextinput;
  vector<punt> v;
  v.push_back(punt(0,0,1));
  for (int i=0;i<int(input.size());i++) {
    while (int(v.size())>1 and prodvec(v.back()-v[int(v.size())-2],input[i]-v.back())<0)
      v.pop_back();
    v.push_back(input[i]);
  }
  for (int i=0;i<int(v.size());i++) {
    if (v[i].ind==0) {
      cout<<"Max"<<endl;
      exit(0);
    }
  }
  cout<<"Min"<<endl;
}
