#include <cstdio>
#include <string>
#include <algorithm>
#include <vector>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <queue>
#include <set>
#include <map>

#define fru(j,n) for(int j=0;j<n;++j)
#define tr(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();++it)
#define x first
#define y second
#define pb push_back

using namespace std;

typedef pair<int,int> pii;
typedef long long LL;

const int MAXK=55,MAXN=405;

int DP[MAXK][MAXN][2];
int T[MAXN];

int f(int k,int n,bool czy){
	if(n==-1) return k==0?0:-(1<<30);
	return DP[k][n][czy];
}
void popraw(int &A, int b){
	A=max(A,b);
}
int main()
{
	int N,K,ret=0;
	scanf("%d%d",&N,&K);
	fru(i,N) scanf("%d",&T[i]);
	fru(i,MAXK) fru(j,MAXN) fru(k,2) DP[i][j][k]=-(1<<30);
	for(int k=1;k<=K;++k) for(int i=k-1;i<N;++i){
		fru(j,2) DP[k][i][j]=i==0?-(1<<30):DP[k][i-1][j];
		int s=0;
		for(int j=i;j>=0;--j){
			s+=T[j];
			int tam;
			if(k==1) tam=0;
			else tam=max(f(k-1,j-1,1)-s,f(k-1,j-1,0)+s);
			if(k==K) {
				ret=max(ret,tam);
//				printf("k = %d, i = %d, j = %d, s = %d, poprawiam dla tam = %d\n",k,i,j,s,tam);
			}
			else{
				popraw(DP[k][i][0],tam-s);
				popraw(DP[k][i][1],tam+s);
			}
		}
//		if(i) fru(j,2) assert(DP[k][i][j]>=DP[k][i-1][j]);
//		if(k!=K) fru(j,2) printf("DP[%d,%d,%d ] =%d\n",k,i,j,DP[k][i][j]);
	}
	printf("%d\n",ret);
  return 0;
}
