#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <queue>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <stack>
#include <bitset>
#define INF 0x3f3f3f3f
#define eps 1e-8
#define FI first
#define SE second
using namespace std;
typedef long long LL;
int a[405], dp[2][405][405];

int main() {
    int n, K;
    scanf("%d%d", &n, &K);
    for(int i = 1; i <= n; ++i) scanf("%d", a + i);
    for(int i = 1; i <= n; ++i) a[i] += a[i - 1];
    memset(dp, -0x3f, sizeof(dp));
    for(int i = 1; i <= n; ++i) {
        for(int j = i; j <= n; ++j) {
            dp[1][i][j] = 0;
        }
    }
    for(int k = 2; k <= K; ++k) {
        int cur = k & 1, pre = cur ^ 1;
        memset(dp[cur], -0x3f, sizeof(dp[cur]));
        int val1 = -INF, val2 = -INF;
        for(int i = 1; i <= n; ++i) {
            for(int j = i; j <= n; ++j) {
                int sum = a[j] - a[i - 1];
                dp[cur][i][j] = max(val1 - sum, val2 + sum);
            }
            for(int j = 1; j <= i; ++j) {
                val1 = max(val1, dp[pre][j][i] + a[i] - a[j - 1]);
                val2 = max(val2, dp[pre][j][i] + a[j - 1] - a[i]);
            }
        }
    }
    int ans = -INF;
    for(int i = 1; i <= n; ++i) {
        for(int j = i; j <= n; ++j) {
            ans = max(ans, dp[K & 1][i][j]);
        }
    }
    printf("%d\n", ans);
    return 0;
}
