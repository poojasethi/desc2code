#include <iostream>
using namespace std;
const int MAX = 405;
int dp[MAX][55][2][2], sum[MAX];
int main()
{
	ios::sync_with_stdio(false);
	int n, k;
	cin >> n >> k;
	for (int i = 0; i < n; i++)
	{
		int val;
		cin >> val;
		sum[i + 1] = sum[i] + val;
	}
	for (int i = 0; i < MAX; i++)
		for (int j = 1; j < 55; j++)
			for (int b = 0; b < 2; b++)
				for (int p = 0; p < 2; p++)
					dp[i][j][b][p] = -1e9;
	int ans = -1e9;
	for (int i = 1; i <= k; i++)
		for (int j = 1; j <= n; j++)
			for (int b = 0; b < 2; b++)
				for (int p = 0; p < 2; p++)
				{
					dp[j][i][b][p] = dp[j - 1][i][b][p];
					for (int x = 0; x < j; x++)
					{
						int val = sum[j] - sum[x];
						if (b)
							val *= -1;
						if (1 < i && i < k)
							val *= 2;
						if (!p)
							val = 0;
						dp[j][i][b][p] = max(dp[j][i][b][p], dp[x][i - 1][b ^ 1][1] + val);
						if (i > 2)
							dp[j][i][b][p] = max(dp[j][i][b][p], dp[x][i - 1][b][0] + val);
					}
				}
	cout << max(dp[n][k][0][1], dp[n][k][1][1]) << endl;
	return 0;
}
