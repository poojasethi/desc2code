#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <ctime>
#include <cassert>
#include <functional>

using namespace std;

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> PII;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FILL(x,v) memset(x,v,sizeof(x))

const int INF = (int)1E9;
#define MAXN 405
int N, K;
int a[MAXN], sa[MAXN];
int dp[55][MAXN][2][2];
int main(){
	cin >> N >> K;
	REP(i, 1, N + 1) {
		scanf("%d", a + i);
		sa[i] = a[i] + sa[i - 1];
	}
	REP(k, 0, K + 1) REP(i, 0, N + 1) REP(t, 0, 2) REP(e,0,2) dp[k][i][t][e] = -INF;
	REP(i, 0, N + 1) REP(t, 0, 2) dp[0][i][t][0] = 0;
	REP(k, 1, K + 1){
		REP(i, 1, N + 1){
			REP(j, 0, i){
				int s = sa[i] - sa[j];
				REP(t, 0, 2){
					REP(e, 0, 2){
						if (dp[k - 1][j][t][e] == -INF) continue;
						if (k > 1) {
							dp[k][i][t][0] = max(dp[k][i][t][0], dp[k - 1][j][t][e]);
						}
						int nt = !t;
						int f = (k == 1 || k == K) ? 1 : 2;
						int ne = k == 1 ? 0 : 1;
						dp[k][i][nt][ne] = max(dp[k][i][nt][ne], dp[k - 1][j][t][e] + f*(nt == 0 ? s : -s));
					}
				}
			}
			REP(t, 0, 2) REP(e, 0, 2){
				if (dp[k][i - 1][t][e] == -INF) continue;
				dp[k][i][t][e] = max(dp[k][i][t][e], dp[k][i - 1][t][e]);
			}
		}
	}
	int ans = max(dp[K][N][0][1], dp[K][N][1][1]);
	cout << ans << endl;

	return 0;
}