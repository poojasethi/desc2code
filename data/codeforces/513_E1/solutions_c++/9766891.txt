#include<bits/stdc++.h>
#define pb(x) push_back(x)
#define all(x) x.begin(), x.end()
#define cout2(x, y) cout << x << " " << y <<  endl
#define N 402
#define INF (1<<29)

using namespace std;

int memo[N][2][52], A[N], n, K;

int DP(int pos, int last_sig, int k){ // last_sig ->0 (+)
    
    if(pos == n)return k == 0? 0:-INF;
    if(k == 0)return 0;
    
    int &ret = memo[pos][last_sig][k];
        
    if(ret != -1)return ret;
    int ans = -INF, sum = 0;
    
    for(int i = pos; n - 1 - i >= k - 1; i++){
        
        sum += A[i];
        if(last_sig == 0){
            
            ans = max(ans, -sum * (k != K) - sum * (k != 1) + DP(i + 1, 1, k - 1));
            ans = max(ans, -sum * (k != K) + sum * (k != 1) + DP(i + 1, 0, k - 1)); 
        }
        else{
            
            ans = max(ans, sum * (k != K) + sum * (k != 1) + DP(i + 1, 0, k - 1));
            ans = max(ans, sum * (k != K) - sum * (k != 1) + DP(i + 1, 1, k - 1));
        }
    }
    
    ans = max(ans, DP(pos + 1, last_sig, k));
    
    return ret = ans;
}



int main(){

    while(cin>>n>>K){
        
        for(int i = 0; i < n; i++)cin>>A[i];
        memset(memo, -1, sizeof memo);
        
        int ans = max(DP(0, 0, K), DP(0, 1, K));
        cout << ans << endl;
        
    }

}


