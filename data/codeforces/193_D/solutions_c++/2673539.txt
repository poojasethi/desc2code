#include<iostream>
using namespace std;
struct{int l,r,dat,add,cnt1,cnt2;}t[1200001];
int p[300010],a[300010],n,i,x,y;
__int64 ans;

void build(int x,int l,int r)
{
	t[x].l=l,t[x].r=r,t[x].cnt1=r-l+1;
	if(l==r) return;
	int mid=(l+r)>>1;
	build(x*2,l,mid);
	build(x*2+1,mid+1,r);
}

void spread(int x)
{
	if(t[x].add)
	{
		t[x*2].add+=t[x].add,t[x*2].dat+=t[x].add;
		t[x*2+1].add+=t[x].add,t[x*2+1].dat+=t[x].add;
		t[x].add=0;
	}
}

void update(int x)
{
	t[x].dat=min(t[x*2].dat,t[x*2+1].dat);
	t[x].cnt1=t[x*2].cnt1*(t[x].dat==t[x*2].dat)+t[x*2+1].cnt1*(t[x].dat==t[x*2+1].dat);
	t[x].cnt2=t[x*2].cnt2*(t[x].dat==t[x*2].dat)+t[x*2+1].cnt2*(t[x].dat==t[x*2+1].dat);
	t[x].cnt2+=t[x*2].cnt1*(t[x].dat+1==t[x*2].dat)+t[x*2+1].cnt1*(t[x].dat+1==t[x*2+1].dat);
}

void change(int x,int l,int r,int d)
{
	if(l<=t[x].l&&r>=t[x].r) {t[x].dat+=d,t[x].add+=d; return;}
	spread(x);
	int mid=(t[x].l+t[x].r)>>1;
	if(l<=mid) change(x*2,l,r,d);
	if(r>mid) change(x*2+1,l,r,d);
	update(x);
}

void ask(int x,int l,int r)
{
	if(l<=t[x].l&&r>=t[x].r) {ans+=t[x].cnt1*(t[x].dat<=2)+t[x].cnt2*(t[x].dat==1); return;}
	spread(x);
	int mid=(t[x].l+t[x].r)>>1;
	if(l<=mid) ask(x*2,l,r);
	if(r>mid) ask(x*2+1,l,r);
}

int main()
{
	ios::sync_with_stdio(false);
	cin>>n;
	for(i=1;i<=n;i++) cin>>x,p[x]=i;
	build(1,1,n);
	for(i=n;i;i--)
	{
		a[p[i]]=i,x=a[p[i]-1],y=a[p[i]+1];
		if(x>y) swap(x,y);
		if(x&&y) change(1,i,x-1,1),change(1,y,n,-1);
		else if(y) change(1,i,y-1,1);
		else change(1,i,n,1);
		ask(1,i,n);
	}
	cout<<ans-n<<endl;
	return 0;
}