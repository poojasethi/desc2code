#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;


struct Tseg {
    Tseg *lc, *rc;
    int l, r, m, mm, s0, s1, tg;
    void update() {
        mm = min(lc->mm, rc->mm); s0 = s1 = 0;
        if (lc->mm == mm) s0 += lc->s0, s1 += lc->s1;
        else if (lc->mm == mm + 1) s1 += lc->s0;
        if (rc->mm == mm) s0 += rc->s0, s1 += rc->s1;
        else if (rc->mm == mm + 1) s1 += rc->s0;
    }
    void add(int a, int b, int x) {
        if (a <= l && r <= b) {
            mm += x; tg += x; return ;
        }
        if (tg) {
            lc->tg += tg; lc->mm += tg;
            rc->tg += tg; rc->mm += tg;
            tg = 0;
        }
        if (a < m) lc->add(a, b, x);
        if (b > m) rc->add(a, b, x);
        update();
    }
};

typedef long long LL;
const int maxn = 300005;
Tseg buf[maxn * 2], *ptr = buf, *root;
int a[maxn], ta[maxn], n;
LL ans;

Tseg *build(int l, int r) {
    Tseg *p = ptr++; p->l = l; p->r = r;
    if (l + 1 == r) {
        p->mm = p->s0 = 1; return p;
    }
    p->m = (l + r) >> 1;
    p->lc = build(l, p->m);
    p->rc = build(p->m, r);
    p->update(); return p;
}

int main() {
    int i, u, v;
    scanf("%d", &n);
    for (i = 1; i <= n; ++i) {
        scanf("%d", ta + i); a[ta[i]] = i;
    }
    root = build(1, n + 1);
    for (i = 1; i <= n; ++i) {
        u = ta[a[i] - 1]; v = ta[a[i] + 1];
        if (u > i) u = 0; if (v > i) v = 0;
        if (u > v) swap(u, v);
        if (u > 0) root->add(1, u + 1, -1);
        if (v + 1 < i) root->add(v + 1, i, 1);
        ans += root->s0 + root->s1 - (n - i + 1);
    }
    printf("%I64d\n", ans);
    return 0;
}

