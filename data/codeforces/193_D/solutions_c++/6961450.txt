#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#define N 300010
#define int64 long long
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int cov,m1,m2,s1,s2;
} tr[N*4];
struct w {
	int a,b;
} b[10];
int i,j,k,n,m;
int a[N],id[N];
int64 an;
inline bool cc1(const w &a,const w &b) {
	return a.a<b.a;
}
inline void update(int x) {
	int y=x*2,z=x*2+1,m=0,i;
	b[1]=(w){tr[y].m1,tr[y].s1};
	b[2]=(w){tr[y].m2,tr[y].s2};
	b[3]=(w){tr[z].m1,tr[z].s1};
	b[4]=(w){tr[z].m2,tr[z].s2};
	sort(b+1,b+5,cc1);
	For(i,1,4) if (!m||b[i].a>b[m].a) b[++m]=b[i];
		else b[m].b+=b[i].b;
	b[m+1].a=N,b[m+1].b=0;
	tr[x]=(ww){0,b[1].a,b[2].a,b[1].b,b[2].b};
}
inline void Inc(int x,int y) {
	tr[x].cov+=y;
	tr[x].m1+=y;
	tr[x].m2+=y;
}
inline void renew(int x) {
	if (tr[x].cov) Inc(x*2,tr[x].cov),Inc(x*2+1,tr[x].cov);
	tr[x].cov=0;
}
void inc(int q,int x,int y,int l,int r,int k) {
	if (l<=x&&y<=r) {
		Inc(q,k);
		return;
	}
	renew(q);
	int mid=(x+y)/2;
	if (l<=mid) inc(q*2,x,mid,l,r,k);
	if (mid<r) inc(q*2+1,mid+1,y,l,r,k);
	update(q);
}
void build(int q,int x,int y) {
	if (x==y) {
		tr[q].m1=N,tr[q].m2=N+1;
		tr[q].s1=1;
		return;
	}
	int mid=(x+y)/2;
	build(q*2,x,mid);
	build(q*2+1,mid+1,y);
	update(q);
}
void into(int q,int x,int y,int k) {
	if (x==y) {
		tr[q].m1=0;
		return;
	}
	int mid=(x+y)/2;
	if (k<=mid) into(q*2,x,mid,k);
	else into(q*2+1,mid+1,y,k);
	update(q);
}
int main() {
	scanf("%d",&n);
	For(i,1,n) scanf("%d",&a[i]),id[a[i]]=i;
	build(1,1,n);
	For(i,1,n) {
		into(1,1,n,i);
		inc(1,1,n,1,i,1);
		int A=id[i];
		if (A>1&&a[A-1]<i) inc(1,1,n,1,a[A-1],-1);
		if (A<n&&a[A+1]<i) inc(1,1,n,1,a[A+1],-1);
		if (tr[1].m1<3) an+=tr[1].s1;
		if (tr[1].m2<3) an+=tr[1].s2;
		an--;
	}
	printf("%I64d\n",an);
	//for(;;);
	return 0;
}
