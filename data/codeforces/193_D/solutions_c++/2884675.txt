#include<cstdio>
const int t=300005;
#define ll s[now<<1]
#define rr s[(now<<1)+1]
#define ii s[now]
#define mid ((l+r)>>1)
struct segment{
    int mn,tg,lp0,lp1;
} s[t<<2];
int a[t],b[t];
void downtag(int now){
    if (ii.tg){
        ll.tg+=ii.tg,rr.tg+=ii.tg;
        ll.mn+=ii.tg,rr.mn+=ii.tg;
        ii.tg=0;
    }
}
void update(int now){
    ii.mn=ll.mn<rr.mn?ll.mn:rr.mn;
    ii.lp0=(ii.mn==ll.mn?ll.lp0:0)+(ii.mn==rr.mn?rr.lp0:0);
    ii.lp1=(ii.mn==ll.mn?ll.lp1:ii.mn==ll.mn-1?ll.lp0:0)+
        (ii.mn==rr.mn?rr.lp1:ii.mn==rr.mn-1?rr.lp0:0);
}
void mdf(int now,int l,int r,int a,int b,int c){
    if (a<=l && r<=b) ii.mn+=c,ii.tg+=c;
    else{
        downtag(now);
        if (a<=mid) mdf(now*2,l,mid,a,b,c);
        if (b>mid) mdf(now*2+1,mid+1,r,a,b,c);
        update(now);
    }
}
int getans(int now,int l,int r,int a){
    if (a<=l) return (ii.mn<=2?ii.lp0:0)+(ii.mn<=1?ii.lp1:0);
    downtag(now);
    int ans=getans(now*2+1,mid+1,r,a);
    if (a<=mid) ans+=getans(now*2,l,mid,a);
    return ans;
}
void build(int now,int l,int r){
    ii.mn=ii.lp1=ii.tg=0,ii.lp0=r-l+1;
    if (l!=r) build(now*2,l,mid),build(now*2+1,mid+1,r);
}
int main(){
    int n,i,x,y;
    long long ans;
    for (scanf("%d",&n),a[0]=a[n+1]=0,i=1;i<=n;i++)
        b[scanf("%d",a+i),a[i]]=i;
    build(1,1,n);
    for (i=n,ans=0;i;i--){
        x=a[b[i]-1],y=a[b[i]+1];
        if (x>y) x^=y,y^=x,x^=y;
        if (x>i) mdf(1,1,n,i,x-1,1),mdf(1,1,n,y,n,-1); else
        if (y>i) mdf(1,1,n,i,y-1,1); else
        mdf(1,1,n,i,n,1);
        ans+=getans(1,1,n,i);
    }
    printf("%I64d\n",ans-n);
    return 0;
}
