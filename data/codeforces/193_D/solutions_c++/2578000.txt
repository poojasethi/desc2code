#include<cstdio>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<iostream>

using namespace std;
const int maxn = 310000;
struct T{
	int mx1,mx2,mx3,s1,s2,s3;
	int ms;
	void clear(){
		mx1=mx2=mx3=10000;
	}
}h[maxn*4];
static int A[maxn],P[maxn],n;
void update(int x,int mx,int s){
	if (h[x].mx1==mx){h[x].s1+=s;return;}
	if (h[x].mx2==mx){h[x].s2+=s;return;}
	if (h[x].mx3==mx){h[x].s3+=s;return;}
	if (mx<h[x].mx1){
		h[x].mx3=h[x].mx2;h[x].s3=h[x].s2;
		h[x].mx2=h[x].mx1;h[x].s2=h[x].s1;
		h[x].mx1=mx;h[x].s1=s;
	}else
	if (mx<h[x].mx2){
		h[x].mx3=h[x].mx2;h[x].s3=h[x].s2;
		h[x].mx2=mx;h[x].s2=s;
	}else if (mx<h[x].mx3){
		h[x].mx3=mx;h[x].s3=s;
	}
}
void Build(int t,int l,int r){
	if (h[t].s1+h[t].s2+h[t].s3==0){
		h[t].mx2=h[t].mx3=10000;
		h[t].s1=r-l+1;
	}
	if (l==r) return;
	int mid=l+r>>1;
	Build(t*2+1,l,mid);Build(t*2+2,mid+1,r);
}
void ins(int t,int l,int r,int x,int y,int s){
	if (r<x||l>y) return;
	
	if (x<=l&&r<=y){
		h[t].ms+=s;
		return;
	}
	int mid=l+r>>1;
	ins(t*2+1,l,mid,x,y,s);
	ins(t*2+2,mid+1,r,x,y,s);
	h[t].clear();
	update(t,h[t*2+1].mx1+h[t*2+1].ms,h[t*2+1].s1);update(t,h[t*2+1].mx2+h[t*2+1].ms,h[t*2+1].s2);
	update(t,h[t*2+1].mx3+h[t*2+1].ms,h[t*2+1].s3);
	update(t,h[t*2+2].mx1+h[t*2+2].ms,h[t*2+2].s1);update(t,h[t*2+2].mx2+h[t*2+2].ms,h[t*2+2].s2);
	update(t,h[t*2+2].mx3+h[t*2+2].ms,h[t*2+2].s3);
}
int main(){
	//freopen("193D.in","r",stdin);
	//freopen("193D.out","w",stdout);
	scanf("%d",&n);
	for (int i=1;i<=n;i++){
		scanf("%d",&A[i]);
		P[A[i]]=i;
	}
	long long ans=0;Build(0,1,n);
	for (int ts=n;ts;ts--){
		int loc1=A[P[ts]-1],loc2=A[P[ts]+1];
		if (loc1>loc2) swap(loc1,loc2);
		if (loc2<ts)
			ins(0,1,n,ts,n,1);
		else
		if (loc1<ts){
			ins(0,1,n,ts,loc2-1,1);
			ins(0,1,n,loc2,n,0);
		}else{
			ins(0,1,n,ts,loc1-1,1);
			ins(0,1,n,loc1,loc2-1,0);
			ins(0,1,n,loc2,n,-1);
		}
		if (h[0].mx1==1||h[0].mx1==2) ans+=h[0].s1;
		if (h[0].mx2==1||h[0].mx2==2) ans+=h[0].s2;
		if (h[0].mx3==1||h[0].mx3==2) ans+=h[0].s3;
	}
	ans-=n;if (n==1) ans++;
	cout<<ans<<endl;
	return 0;
}
