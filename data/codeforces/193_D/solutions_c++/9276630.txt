#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#define ls (x << 1)
#define rs (x << 1 | 1)
#define N 300100
using namespace std;
typedef int arr[N * 8];
arr L, R, Mn, T, C1, C2;
int A[N], B[N], n, i;
long long s;
inline int gi()
{
    int ret = 0; char ch = getchar();
    while (ch > '9' || ch < '0') ch = getchar();
    while (ch <= '9' && ch >= '0') ret = ret * 10 + ch - '0', ch = getchar();
    return ret;
}
void Build(int x, int l, int r)
{
    L[x] = l, R[x] = r;
    if (l == r) {C1[x] = 1; return;}
    int mid = (l + r) >> 1;
    Build(ls, l, mid);
    Build(rs, mid + 1, r);
}
void Gets(int x, int v)
{
    Mn[x] += v, T[x] += v;
}
void Down(int x)
{
    if (!T[x]) return;
    Gets(ls, T[x]);
    Gets(rs, T[x]);
    T[x] = 0;
}
void Up(int x)
{
    Mn[x] = min(Mn[ls], Mn[rs]);
    C1[x] = C2[x] = 0;
    if (Mn[x] == Mn[ls])
    {
        C1[x] = C1[ls]; C2[x] += C2[ls];
        if (Mn[rs] == Mn[x] + 1) C2[x] += C1[rs];
    }
    if (Mn[x] == Mn[rs])
    {
        C1[x] += C1[rs]; C2[x] += C2[rs];
        if (Mn[ls] == Mn[x] + 1) C2[x] += C1[ls];
    }
}
void Add(int x, int l, int r, int v)
{
    Down(x);
    if (L[x] == l && R[x] == r)
    {
        Gets(x, v); return;
    }
    int mid = (L[x] + R[x]) >> 1;
    if (r <= mid) Add(ls, l, r, v);
    else if (l > mid) Add(rs, l, r, v);
    else Add(ls, l, mid, v), Add(rs, mid + 1, r, v);
    Up(x);
}
int Query(int x, int l, int r)
{
    Down(x);
    if (L[x] == l && R[x] == r)
    {
        int s = 0;
        if (Mn[x] <= 1) s += C2[x];
        if (Mn[x] <= 2) s += C1[x];
        return s;
    }
    int mid = (L[x] + R[x]) >> 1;
    if (r <= mid) return Query(ls, l, r);
    else if (l > mid) return Query(rs, l, r);
    else return Query(ls, l, mid) + Query(rs, mid + 1, r);
}
int main()
{
    scanf("%d", &n);
    for (i = 1; i <= n; i++) 
        A[i] = gi(), B[A[i]] = i;
    Build(1, 1, n);
    for (i = 1; i <= n; i++)
    {
        int x = A[B[i] + 1], y = A[B[i] - 1];
        Add(1, 1, i, 1);
        if (x && x < i) Add(1, 1, x, -1);
        if (y && y < i) Add(1, 1, y, -1);
        if (i > 1) s += 1LL * Query(1, 1, i - 1);
    }
    printf("%I64d\n", s);
    return 0;
}