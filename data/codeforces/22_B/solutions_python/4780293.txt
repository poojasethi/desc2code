# coding=utf8

# from __future__ import division
# from collections import *
# from heapq import *
# from random import *
# from itertools import permutations
# import sys
# import re

def main():
    R=lambda:map(int,raw_input().split())
    n, m = R()
    mp = []
    for i in xrange(n):
        mp.append(raw_input())

    mx = 0
    for i in xrange(0, n):
        for j in xrange(0, m):
            ans = [[True] * (m + 1) for x in xrange(n + 1)]
            for k in xrange(i, n):
                for l in xrange(j, m):
                    ans[k + 1][l + 1] = ans[k][l + 1] and ans[k + 1][l] and mp[k][l] == '0'
                    if ans[k + 1][l + 1]:
                        curr = (k - i + 1) * 2 +  (l - j + 1) * 2
                        if curr > mx:
                            mx = curr
    print mx

if __name__ == '__main__':
    main()
