#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <utility>
#include <queue>
#include <string>
#include <map>
using namespace std;

#define REP(i,n) for(int i=0;i<n;i++)
#define CL(x) memset(x,0,sizeof(x))

struct score {
	string nme;
	int pts;
	int places[55];
	
	score() {
		CL(places); pts = 0;
	}
};

map<string, score> p;
int t, n, pts[10] = {25,18,15,12,10,8,6,4,2,1};
string s;

bool mycmp_a(score a, score b) {
	if (a.pts != b.pts) return a.pts > b.pts;
	for (int i = 0; i < 55; i++)
		if (a.places[i] != b.places[i]) return a.places[i] > b.places[i];
	return false;
}
bool mycmp_b(score a, score b) {
	if (a.places[0] != b.places[0]) return a.places[0] > b.places[0];
	else return mycmp_a(a, b);
}

int main() {
	score best_a, best_b;
	
	cin >> t;
	REP(i, t) {
		cin >> n;
		REP(j, n) {
			cin >> s;
			if (j < 10)
				p[s].pts += pts[j];
			p[s].places[j]++;
			p[s].nme = s;
			
			if (mycmp_a(p[s], best_a))
				best_a = p[s];
			if (mycmp_b(p[s], best_b))
				best_b = p[s];
		}
	}
	
	cout << best_a.nme << endl;
	cout << best_b.nme << endl;
}