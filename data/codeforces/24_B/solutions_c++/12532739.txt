#include<iostream>
#include<string>
#include<algorithm>
#include<map>
using namespace std;
const int point[11]={0,25,18,15,12,10,8,6,4,2,1};
struct data{
	string nm;
	int pt,pos[51];
}driver[50];
map<string,int> dn;
bool comp1(data x,data y)
{
	if(x.pt!=y.pt) return x.pt>y.pt;
	int p=1;
	while(x.pos[p]==y.pos[p]&&p<50) p++;
	return x.pos[p]>y.pos[p];
}
bool comp2(data x,data y)
{
	if(x.pos[1]!=y.pos[1]) return x.pos[1]>y.pos[1];
	if(x.pt!=y.pt) return x.pt>y.pt;
	int p=2;
	while(x.pos[p]==y.pos[p]&&p<50) p++;
	return x.pos[p]>y.pos[p];
}

int main()
{
	int t,n,mx=0,p=0;
	cin>>t;
	string name;
	for(int i=0;i<t;i++)
	{
		cin>>n;
		for(int j=1;j<=n;j++)
		{
			cin>>name;
			if(dn[name]==0&&driver[0].nm!=name) dn[name]=p++;
			driver[dn[name]].nm=name;
			driver[dn[name]].pos[j]++;
			driver[dn[name]].pt+=j<11?point[j]:0;
		}
	}
	sort(driver,driver+p,comp1);
	cout<<driver[0].nm<<endl;
	sort(driver,driver+p,comp2);
	cout<<driver[0].nm;
	return 0;
}
