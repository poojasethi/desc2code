    #include <iostream>
    #include <string>
    #include <set>  
    #include <algorithm>
    #include <vector>
    #include <cmath>
    #include <queue>
    #include <cstring>
    #include <cstdio>
    #include <map>
using namespace std;
map <string,int> M;
struct cha{
	string n;
	int sc;
	int po[55];
	cha()
	{
	sc=0;
	memset(po,0,sizeof(po));
	}}d1[1111],d2[1111];
int tpo[51]={25,18,15,12,10,8,6,4,2,1},t,n,cnt=1,num;
string s;
bool ocmp(cha a,cha b)
{
	if(a.sc!=b.sc)return a.sc>b.sc;
	for(int i=1;i<=99;i++)
	if(a.po[i]!=b.po[i])
		return a.po[i]>b.po[i];
}
bool ncmp(cha a,cha b)
{
	if(a.po[1]!=b.po[1])return a.po[1]>b.po[1];
	if(a.sc!=b.sc)return a.sc>b.sc;
	for(int i=2;i<=99;i++)
		if(a.po[i]!=b.po[i])
			return a.po[i]>b.po[i];
}
int main()
{
	cin>>t;
	while(t--)
	{
		cin>>n;
		for(int i=0;i<n;i++)
		{
			cin>>s;
			map <string,int>::iterator it=M.find(s);
			if(it==M.end())M[s]=cnt++;
			num=M[s];
			d1[num].n=d2[num].n=s;
			d1[num].sc+=tpo[i];
			d2[num].sc+=tpo[i];
			d1[num].po[i+1]++;
			d2[num].po[i+1]++;
		}
	}
	sort(d1,d1+cnt,ocmp);
	cout<<d1[0].n<<endl;
	sort(d2,d2+cnt,ncmp);
	
	cout<<d2[0].n<<endl;
	return 0;
}
