#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<iostream>
#include<vector>
using namespace std;
typedef long long LL;
const int maxn=100005,M=1000000007;
int n,m,cnt,S,C,K;
int fc[maxn];
int F[55],G[55],temp[55];
int f[1<<17],g[maxn*2][2][55],g_[55];
int sta[maxn*2],used;
int head[maxn*2],adj[maxn],c[maxn],next[maxn],tot=1;
int col[maxn*2],id[maxn*2],fa[maxn*2];

vector<pair<int,int> > E;
vector<int> son[maxn*2],val[maxn*2],A,B,W;

void addedge(int u,int v,int w)
{tot++;adj[tot]=v;c[tot]=w;next[tot]=head[u];head[u]=tot;
tot++;adj[tot]=u;c[tot]=w;next[tot]=head[v];head[v]=tot;}

inline void up(int &x,const int &y)
{x=(x+y)%M;}

int cnt1(const int &x)
{return x?1+cnt1(x&x-1):0;}

void merge(int *a,int an,int *b,int bn,int *c)
{
	int cn=an+bn;
	memset(temp,0,cn+1<<2);
	for(int i=0;i<=an;i++)
		for(int j=0;j<=bn;j++)
			up(temp[i+j],(LL)a[i]*b[j]%M);
	memcpy(c,temp,cn+1<<2);
}

void init()
{
	scanf("%d%d",&n,&m);F[K=0]=1;
	for(int u,v,w,i=0;i<m;i++)
		scanf("%d%d%d",&u,&v,&w),addedge(u-1,n+v-1,(w+M-1)%M);
}

void dfs(int x)
{
	col[x]=cnt;
	son[x].clear();
	if(x<n)id[x]=A.size(),A.push_back(x);
	else id[x]=B.size(),B.push_back(x);
	for(int i=head[x];i;i=next[i])
		if(col[adj[i]]!=cnt)
		{
			son[x].push_back(adj[i]),
			val[x].push_back(c[i]);
			fa[adj[i]]=x;
			dfs(adj[i]);
		}
		else if(adj[i]!=fa[x]&&x<adj[i])
			E.push_back(make_pair(x,adj[i])),
			W.push_back(c[i]);
}

int dp(int x)
{
	int sz=0,ss;
	g[x][0][0]=g[x][1][0]=1;
	for(int y,i=0;i<son[x].size();i++)
	{
		ss=dp(y=son[x][i]);
		if(sta[x]!=used&&sta[y]!=used)
		{
			for(int j=g_[0]=0;j<=ss;j++)
				g_[j+1]=(LL)g[y][1][j]*val[x][i]%M;
			merge(g[x][1],sz,g_,ss+1,g_);
		}
		merge(g[x][0],sz,g[y][0],ss,g[x][0]);
		merge(g[x][1],sz,g[y][0],ss,g[x][1]);
		g[x][0][sz+ss+1]=0;
		if(sta[x]!=used&&sta[y]!=used)
			for(int j=0;j<=sz+ss+1;j++)
				up(g[x][0][j],g_[j]);
		sz+=ss;
	}
	sz++;
	if(sta[x]==used)
		memset(g[x][1],0,sz+1<<2);
	return sz;
}

void work()
{
	for(int x=0;x<n;x++)
		if(!col[x])
		{
			cnt++;
			A.clear(),B.clear(),E.clear(),W.clear();
			fa[x]=-1,dfs(x);
			int An=A.size(),Bn=B.size(),En=E.size();
			if((C=min(An,Bn))==0)continue;
			if(C<=17)
			{
				if(A.size()<B.size())swap(A,B),swap(An,Bn);
				int i,j,k,t,p,w;
				memset(f,0,4<<Bn);
				f[0]=1;
				for(i=0;i<An;i++)
				{
					for(k=(1<<Bn)-1;~k;k--)
						if(t=f[k])
							for(p=head[A[i]];p;p=next[p])
								if(!(k>>(w=id[adj[p]])&1))
									up(f[k^1<<w],(LL)t*c[p]%M);
				}
				memset(G,0,Bn+1<<2);
				for(k=0;k<1<<Bn;k++)
					up(G[cnt1(k)],f[k]);
				merge(F,K,G,Bn,F);K+=Bn;
			}
			else
			{
				int i,j,k;
				memset(G,0,sizeof(G));
				for(S=0;S<1<<En;S++)
				{
					k=0;
					used++;
					for(i=0;i<En;i++)
						if(S>>i&1)
						{
							k|=sta[E[i].first]==used||sta[E[i].second]==used;
							sta[E[i].first]=sta[E[i].second]=used;
						}
					if(k)continue;
					for(i=0;i<A.size();i++)
						memset(g[A[i]][0],0,C+1<<2),
						memset(g[A[i]][1],0,C+1<<2);
					for(i=0;i<B.size();i++)
						memset(g[B[i]][0],0,C+1<<2),
						memset(g[B[i]][1],0,C+1<<2);
					dp(x);
					k=1,j=0;
					for(i=0;i<En;i++)
						if(S>>i&1)
							k=(LL)k*W[i]%M,j++;
					for(int i=0;i<=C;i++)
						up(G[i+j],(LL)g[x][0][i]*k%M);
				}
				merge(F,K,G,C,F);K+=C;
			}
		}
}

void solve()
{
	int ans=0;
	for(int i=fc[0]=1;i<=n;i++)
		fc[i]=(LL)fc[i-1]*i%M;
	for(int i=0;i<=K;i++)
		up(ans,(LL)F[i]*fc[n-i]%M);
	printf("%d\n",ans);
}

int main()
{
	init();
	work();
	solve();
	return 0;
}
