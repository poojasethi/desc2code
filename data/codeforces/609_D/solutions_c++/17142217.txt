#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <string>
#include <iostream>
#include <complex>
#include <queue>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<ll,int> P;
int n,m,k,s;
int a[200001],b[200001];
P am[200001],bm[200001];
vector<P> cost[2];
vector<ll> sum[2];

int C(int v){
	ll ab=am[v].first;
	ll bb=bm[v].first;
	ll need=0;
	for(int i=0;i<=k;i++){
		if(cost[0].size()<i || cost[1].size()<k-i)continue;
		need=sum[0][i]*ab+sum[1][k-i]*bb;
		if(need<=s)return i;
	}
	return -1;
}

int main(void){
	scanf("%d%d%d%d",&n,&m,&k,&s);
	for(int i=0;i<n;i++){
		scanf("%d",&a[i]);
		am[i]=P(a[i],i);
		if(i>0)am[i]=min(am[i],am[i-1]);
	}
	for(int i=0;i<n;i++){
		scanf("%d",&b[i]);
		bm[i]=P(b[i],i);
		if(i>0)bm[i]=min(bm[i],bm[i-1]);
	}
	for(int i=0;i<m;i++){
		int t,c;
		scanf("%d%d",&t,&c);
		t--;
		cost[t].push_back(P(c,i+1));
	}
	sort(cost[0].begin(),cost[0].end());
	sort(cost[1].begin(),cost[1].end());
	for(int i=0;i<2;i++){
		sum[i].push_back(0);
		for(int j=0;j<cost[i].size();j++){
			sum[i].push_back(sum[i][j]+cost[i][j].first);
		}
	}
	int l=0,r=n,id=0;
	for(int i=0;i<20;i++){
		int mid=(l+r)/2;
		int k=C(mid);
		if(k!=-1){
			r=mid;
			id=k;
		}else l=mid;
	}
	printf("%d\n",r==n?-1:r+1);
	if(r!=n){
		vector<P> res;
		for(int i=0;i<id;i++){
			res.push_back(P(am[r].second,cost[0][i].second));
		}
		for(int i=0;i<k-id;i++){
			res.push_back(P(bm[r].second,cost[1][i].second));
		}
		sort(res.begin(),res.end());
		for(int i=0;i<k;i++){
			printf("%d %d\n",(int)res[i].second,(int)res[i].first+1);
		}
	}
	return 0;
}