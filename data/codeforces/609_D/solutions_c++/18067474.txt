//2016-05-25 02:31:28.458000
#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>

using namespace std;

typedef long long INT;
typedef pair<INT, int> pii;

#define NN 210000

int N, M, K, S;

int a[NN], b[NN], aid[NN], bid[NN];
int t[NN], c[NN];

pii cost[NN];

bool possible(int d) {
	int A=a[d-1], B=b[d-1];
	for (int i=0; i<M; i++) {
		if (t[i]==1) cost[i]=pii((INT)A*c[i], i);
		else cost[i]=pii((INT)B*c[i], i);
	}
	
	sort(cost, cost+M);
	
	INT need=0;
	
	for (int i=0; i<K; i++) 
		need+=cost[i].first;
	
	return need<=S;
}

int main() {
	scanf("%d%d%d%d", &N, &M, &K, &S);
	
	for (int i=0; i<N; i++) scanf("%d", &a[i]);
	for (int i=0; i<N; i++) scanf("%d", &b[i]);
	for (int i=0; i<M; i++) scanf("%d%d", &t[i], &c[i]);
	
	aid[0]=bid[0]=0;
	for (int i=1; i<N; i++) {
		if (a[i]>=a[i-1]) {
			a[i]=a[i-1];
			aid[i]=aid[i-1];
		} else {
			aid[i]=i;
		}
		
		if (b[i]>=b[i-1]) {
			b[i]=b[i-1];
			bid[i]=bid[i-1];
		} else {
			bid[i]=i;
		}
	}
	
	int high=N, low=1, mid;
	int ans=-1;
	
	while (high>low+1) {
		mid=(high+low)/2;
		if (possible(mid)) high=mid;
		else low=mid+1;
	}
	
	if (possible(low)) ans=low;
	else if (possible(high)) ans=high;
	
	if (ans<0) {
		puts("-1");
		return 0;
	}
	
	possible(ans);
	
	printf("%d\n", ans);
	for (int i=0; i<K; i++) {
		int u=cost[i].second;
		printf("%d ", u+1);
		if (t[u]==1) printf("%d", aid[ans-1]+1);
		else printf("%d", bid[ans-1]+1);
		puts("");
	}
	
	return 0;
}