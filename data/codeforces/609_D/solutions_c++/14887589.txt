#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;

const int MAXN = 200005;
int N, M, K, S;
ll conv[2][MAXN];
pair<ll, int> cost[2][MAXN];
int sz[2];
int idx[2];
int ans[MAXN][2];

bool check(int days)
{
	idx[0] = idx[1] = 0;
	for (int i = 1; i < days; i++)
	{
		if (conv[0][i] < conv[0][idx[0]])
			idx[0] = i;
		if (conv[1][i] < conv[1][idx[1]])
			idx[1] = i;
	}

	ll total = 0;
	for (int i = 0, j = 0, k = 0; k < K; k++)
	{
		if (i < sz[0] && (j == sz[1] || cost[0][i].first*conv[0][idx[0]] < cost[1][j].first*conv[1][idx[1]]))
		{
			ans[k][0] = cost[0][i].second;
			ans[k][1] = idx[0];
			total += cost[0][i].first*conv[0][idx[0]];
			i++;
		}
		else
		{
			ans[k][0] = cost[1][j].second;
			ans[k][1] = idx[1];
			total += cost[1][j].first*conv[1][idx[1]];
			j++;
		}
	}

	return total <= S;
}

int main()
{
	ios::sync_with_stdio(0);

	cin >> N >> M >> K >> S;
	for (int i = 0; i < N; i++)
		cin >> conv[0][i];
	for (int i = 0; i < N; i++)
		cin >> conv[1][i];
	for (int i = 0, type, c; i < M; i++)
	{
		cin >> type >> c;
		cost[type - 1][sz[type - 1]++] = make_pair(c, i);
	}

	sort(cost[0], cost[0] + sz[0]);
	sort(cost[1], cost[1] + sz[1]);

	int lo = 1, hi = N + 1;
	while (lo < hi)
	{
		int mid = lo + (hi - lo) / 2;
		if (check(mid))
			hi = mid;
		else
			lo = mid + 1;
	}

	if (lo == N + 1)
		cout << "-1\n";
	else
	{
		check(lo);
		cout << lo << "\n";
		for (int i = 0; i < K; i++)
			cout << ans[i][0] + 1 << " " << ans[i][1] + 1 << "\n";
	}

	return 0;
}