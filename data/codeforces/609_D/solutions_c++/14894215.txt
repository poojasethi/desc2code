#include <bits/stdc++.h>
using namespace std;

#define int long long

const int N = 200011;
int n, m, k, s, value, type;
int rate[2][N], a[N], b[N];
vector < pair < int, int > > gad[2];

int can(int day)
{
	int money = s, need = 0;
	for (int i = 0; i <= gad[0].size(); i++)
	{
		money = s;
		if (i > k)
			break;
		if (i - 1 >= 0)
			money -= gad[0][i - 1].first * rate[0][day];
		need = k - i;
		if (need > gad[1].size())
			continue;
		if (need - 1 >= 0)
			money -= gad[1][need - 1].first * rate[1][day];
		if (money >= 0)
			return i;
	}
	return -1;
}

main()
{
	cin >> n >> m >> k >> s;	
	for (int i = 0; i < 2; i++)
	{
		cin >> rate[i][0];
		for (int j = 1; j < n; j++)
			cin >> value, rate[i][j] = min(value, rate[i][j -  1]);
	}
	for (int i = 0; i < m; i++)
	{
		cin >> type >> value;
		gad[type - 1].push_back(make_pair(value, i));
	}
	sort(gad[0].begin(), gad[0].end());
	sort(gad[1].begin(), gad[1].end());
	for (int i = 0; i < 2; i++)
		for (int j = 1; j < gad[i].size(); j++)
			gad[i][j].first += gad[i][j - 1].first;
			
	int left = 0, right = n, mid = 0, ans = n + 1, ind = 0, check = 0;
	while (left < right)		
	{
		mid = (left + right) / 2;
		check = can(mid);
		if (check != -1)
		{
			right = mid;
			ind = check;
			ans = mid;
		}
		else left = mid + 1; 
	}
	if (ans == n + 1)
		return cout << -1, 0;
	cout << ans + 1 << endl;
	for (int i = 0; i < 2; i++)
		for (int j = 0; j < ans + 1; j++)
			if (rate[i][j] == rate[i][ans])
			{
				if (i == 1)
					ind = k - ind;
				for (int l = 0; l < ind; l++)
					cout << gad[i][l].second + 1 << ' ' << j + 1 << endl;
				break;
			}
}
