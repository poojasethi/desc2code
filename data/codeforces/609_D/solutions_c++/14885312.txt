#include <cstdio>
#include <vector>
#include <algorithm>
#include <utility>
using namespace std;
vector<pair<int, int> > v[2];
pair<int, int> a[200010], b[200010];
pair<int, int> ans[200010];
int can(int d, int k, int s) {
	long long c[2] = {a[d].first, b[d].first};
	vector<pair<long long, int> > w;
	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < v[i].size(); j++) {
			w.push_back(make_pair(c[i] * v[i][j].first, v[i][j].second * (i ? -1 : 1)));
		}
	}
	sort(w.begin(), w.end());
	long long t = 0;
	for (int i = 0; i < k; i++) {
		t += w[i].first;
		if (w[i].second > 0) {
			ans[i] = make_pair(w[i].second, a[d].second);
		} else {
			ans[i] = make_pair(-w[i].second, b[d].second);
		}
	}
	return t <= s;
}
int main() {
	int n, m, k, s;
	scanf("%d%d%d%d", &n, &m, &k, &s);
	a[0].first = 100000000;
	for (int i = 1; i <= n; i++) {
		scanf("%d", &a[i].first);
		a[i].second = i;
		a[i] = min(a[i], a[i-1]);
	}
	b[0].first = 100000000;
	for (int i = 1; i <= n; i++) {
		scanf("%d", &b[i].first);
		b[i].second = i;
		b[i] = min(b[i], b[i-1]);
	}
	for (int i = 0; i < m; i++) {
		int t, x;
		scanf("%d%d", &t, &x);
		v[--t].push_back(make_pair(x, i + 1));
	}
	if (!can(n, k, s)) {
		printf("-1\n");
		return 0;
	}
	int lo = 0, hi = n;
	while (lo + 1 < hi) {
		int mid = (lo + hi + 1) / 2;
		if (can(mid, k, s)) {
			hi = mid;
		} else {
			lo = mid;
		}
	}
	can(hi, k, s);
	printf("%d\n", hi);
	for (int i = 0; i < k; i++) {
		printf("%d %d\n", ans[i].first, ans[i].second);
	}
	return 0;
}
