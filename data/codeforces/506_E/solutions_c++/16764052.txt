#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;

const int maxs = 206, maxm = 406;
const int modd = 10007;
int s, n;
string str;

int f[maxs][maxs][maxs];
bool vis[maxs][maxs][maxs];
int dfs(int le, int ri, int n24)
{
	if (vis[le][ri][n24]) return f[le][ri][n24];
	vis[le][ri][n24] = true;
	
	int &res = f[le][ri][n24];
	if (le == ri) return res = (n24 == 0);
	if (str[le] == str[ri]) {
		if (le + 1 == ri) res = (n24 == 0);
		else res = dfs(le + 1, ri - 1, n24);
	} 
	else {
		if (n24) 
			res = (dfs(le + 1, ri, n24 - 1) + dfs(le, ri - 1, n24 - 1)) % modd;
	}
	return res;
}

int m;
int A[maxm][maxm], B[maxm][maxm], C[maxm][maxm];

void mulmat(int A[][maxm], int B[][maxm])
{
	for (int i=0; i<m; i++)
		for (int j=0; j<m; j++) {
			long long res=0;
			for (int k=i; k<=j; k++) //!!
				res += A[i][k]*B[k][j];
			C[i][j] = res % modd; //!!
		}
	for (int i=0; i<m; i++)
		for (int j=0; j<m; j++) A[i][j] = C[i][j];
}

int main()
{
	cin >> str >> n;
	s = str.size();
	
	for (int i=0; i<=s; i++) {
		f[0][s-1][i] = dfs(0, s-1, i);
		int n25 = (s - i + 1) / 2;
	}
	
	int N24 = s - 1;
	int N25 = (s + 1) / 2;
	int N26 = N25;
	int step = (n + s) / 2;
	
	//build matrix
	m = N24;
	for (int i = 0; i < N24; i++) {
		A[i][i] = 24;
		A[i][i + 1] = 1;
	}
	for (int i = 0; i < N25; i++) {
		A[m][m] = 25;
		if (i != N25 - 1) A[m][m + 1] = 1;
		A[m][m + N25] = 1;
		m++;
	}
	for (int i = 0; i < N26; i++) {
		A[m][m] = 26;
		m++;
	}
	
	//pow (A, step)
	for (int i = 0; i < m; i++) B[i][i] = 1;
	for (int k = step; k; k >>= 1)
	{
		if (k & 1) mulmat(B, A);
		mulmat(A, A);
		//cout<<k<<endl;
	}
	
	int ans = 0;
	for (int n24 = 0; n24 < s; n24++) {
		int n25 = (s - n24 + 1) / 2;
		int way = f[0][s-1][n24];
		int x = B[N24 - n24][N24 + n25 - 1 + N25];
		if (!((s + n) & 1)) ans = (ans + way * x) % modd;
		else {
			ans = (ans + ((way * x) % modd) * 26) % modd;
			if (n24 + n25 * 2 > s)
				ans = (ans + f[0][s-1][n24] * B[N24 - n24][N24 + n25 - 1]) % modd;		
		}
	}
	cout << ans << endl;
		
	return 0;
}

