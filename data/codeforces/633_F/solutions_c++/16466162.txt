#include <set>
#include <map>
#include <ctime>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
#define LL long long
int N,x,y,pt,last,l,r;
LL ans;
LL f[100010][6];
int stack[100010],q[100010],a[100010];
LL data[100010];
int st[100010],ne[200010],go[200010],fa[100010],now[100010];
void Add(int x,int y){ne[++pt]=st[x];st[x]=pt;go[pt]=y;}
void add(int x,int y){
	LL w=f[y][1]+a[x];
	for (int k=1;k<=3;k++)
		if (f[x][k]<w){
			for (int t=3;t>k;t--)f[x][t]=f[x][t-1];
			f[x][k]=w;break;
		}
	w=f[y][0];
	for (int k=4;k<=5;k++)
		if (f[x][k]<w){
			for (int t=5;t>k;t--)f[x][t]=f[x][t-1];
			f[x][k]=w;break;
		}
	f[x][0]=max(f[x][4],f[x][1]+f[x][2]-a[x]);
}
void del(int x,int y){
	LL w=f[y][1]+a[x];
	for (int k=1;k<=3;k++)
		if (f[x][k]==w){
			for (int t=k;t<3;t++)f[x][t]=f[x][t+1];
			f[x][3]=0;break;
		}
	w=f[y][0];
	for (int k=4;k<=5;k++)
		if (f[x][k]==w){
			for (int t=k;t<5;t++)f[x][t]=f[x][t+1];
			f[x][5]=0;break;
		}
	f[x][0]=max(f[x][4],f[x][1]+f[x][2]-a[x]);
}
void move_root(int x,int y){
	del(x,y);
	add(y,x);
}
void renew_ans(int x,int y){
	ans=max(ans,data[x]+f[y][0]);
}
int main(){
	scanf("%d",&N);
	for (int i=1;i<=N;i++)scanf("%d",&a[i]);
	for (int i=1;i<N;i++)
		scanf("%d%d",&x,&y),Add(x,y),Add(y,x);
	for (q[l=r=0]=1;l<=r;l++){
		int x=q[l];
		for (int i=st[x];i;i=ne[i])
			if (fa[x]!=go[i]){
				fa[go[i]]=x;
				q[++r]=go[i];
			}
	}
	for (int i=r;i>=0;i--){
		int x=q[i];
		memset(f[x],0,sizeof(f[x]));
		f[x][1]=f[x][2]=f[x][3]=f[x][0]=a[x];
		for (int j=st[x];j;j=ne[j])
		if (go[j]!=fa[x])
			add(x,go[j]);
	}
	for (stack[last=1]=1,now[1]=st[1];last;){
		bool flag=1;
		int x=stack[last];
		for (int i=now[x];i;i=ne[i])
			if (fa[x]!=go[i]){
				data[go[i]]=f[go[i]][0];
				move_root(x,go[i]);
				renew_ans(go[i],x);
				now[x]=ne[i];
				now[go[i]]=st[go[i]];
				stack[++last]=go[i];
				flag=0;
				break;
			}
		if (flag){
			if (last>1){
				data[stack[last]]=0;
				move_root(stack[last],stack[last-1]);
			}
			stack[last--]=0;
		}
	}
	printf("%I64d",ans);
}
