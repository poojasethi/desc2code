#include <set>
#include <map>
#include <cmath>
#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define x first
#define y second

typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;

template <class T>
void read(T &x)
{
	char ch;
	for (ch=getchar();(ch<'0'||ch>'9')&&ch!='-';) ch=getchar();
	x=0;int t=1;if (ch=='-') {ch=getchar();t=-1;}
	for (;ch>='0'&&ch<='9';ch=getchar()) x=x*10+ch-'0';
	x*=t;
}

const int N=100010;

struct edge
{
	int to,next;
}e[2*N];

int head[N],a[N];
bool v[N];
ll d[N][3],f[N][2],dp[N],ans;

void push(int k,int x,int y)
{
	e[k].to=y;e[k].next=head[x];head[x]=k;
}

void check2(ll &x,ll &y,ll z)
{
	if (z>x) {y=x;x=z;} else y=max(y,z);
}

void check3(ll &x,ll &y,ll &z,ll d)
{
	if (d>x) {z=y;y=x;x=d;} else check2(y,z,d);
}

void dfs1(int k)
{
	v[k]=1;
	int p=head[k];
	while (p)
	{
		if (!v[e[p].to])
		{
			dfs1(e[p].to);
			check3(d[k][0],d[k][1],d[k][2],d[e[p].to][0]+a[e[p].to]);
			check2(f[k][0],f[k][1],dp[e[p].to]);
		}
		p=e[p].next;
	}
	dp[k]=max(f[k][0],d[k][0]+d[k][1]+a[k]);
}

void dfs2(int k,ll len,ll dis)
{
	v[k]=1;
	ans=max(ans,dp[k]+len);
	int p=head[k];
	while (p)
	{
		if (!v[e[p].to])
		{
			ll d1=len,d2=dis+a[k];
			if (d[k][0]==d[e[p].to][0]+a[e[p].to]) d2=max(d2,d[k][1]+a[k]); else d2=max(d2,d[k][0]+a[k]);
			if (dp[e[p].to]==f[k][0]) d1=max(d1,f[k][1]); else d1=max(d1,f[k][0]);
			if (d[k][0]==d[e[p].to][0]+a[e[p].to]) d1=max(d1,dis+d[k][1]+a[k]); else d1=max(d1,dis+d[k][0]+a[k]);
			if (d[k][0]==d[e[p].to][0]+a[e[p].to])
				d1=max(d1,d[k][1]+d[k][2]+a[k]);
			else
				if (d[k][1]==d[e[p].to][0]+a[e[p].to])
					d1=max(d1,d[k][0]+d[k][2]+a[k]);
				else
					d1=max(d1,d[k][0]+d[k][1]+a[k]);
			dfs2(e[p].to,d1,d2);
		}
		p=e[p].next;
	}
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	int n;read(n);
	for (int i=1;i<=n;i++) read(a[i]);
	for (int i=1;i<n;i++)
	{
		int x,y;read(x);read(y);
		push(2*i-1,x,y);push(2*i,y,x);
	}
	memset(v+1,0,n*sizeof(bool));
	dfs1(1);
	memset(v+1,0,n*sizeof(bool));ans=0;
	dfs2(1,0,0);
	cout<<ans<<endl;
	return 0;
}
