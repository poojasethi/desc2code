#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>

using namespace std;

typedef long long ll;

const int maxn = 250000;

int tot = 1, n;
vector<int> e[maxn];
ll dep[maxn], f[maxn], dis[maxn], a[maxn], g[maxn];
ll dp[maxn][2];


void dfs(int x, int fa)
{
	ll max1 = 0, max2 = 0, r1 = 0, r2 = 0;
	ll pre1 = 0, pre2 = 0;
	int sz = (int )e[x].size();
	if (sz == 1 && x != 1)
	{
		dep[x] = f[x] = dis[x] = g[x] = a[x];
		return ;
	}
	for (int i = 0; i < (int )(e[x].size()); i ++)
	{
		int to = e[x][i];
		if (to == fa) continue;
		dfs(to, x);
		
		dp[to][0] = max1, dp[to][1] = max2;
		dep[x] = max(dep[x], dep[to] + a[x]);
		dis[x] = max(dis[x], dis[to]);

		g[x] = max(g[x], max1 + a[x] + dis[to]);
		g[x] = max(g[x], r1 + a[x] + dep[to]);
 
		if (dep[to] >= max1) max2 = max1, max1 = dep[to];
		else if (dep[to] >= max2) max2 = dep[to];
	
		g[x] = max(g[x], g[to] + a[x]);

		f[x] = max(f[x], f[to]);
		f[x] = max(f[x], dep[to] + a[x] + pre1);
		f[x] = max(f[x], g[to] + a[x] + pre2);
		
		pre1 = max(pre1, g[to]);
		pre2 = max(pre2, dep[to]);
	
		if (dis[to] >= r1) r2 = r1, r1 = dis[to];
		else if (dis[to] >= r2) r2 = dis[to];
	}
	max1 = 0, max2 = 0;
	for (int i = (int )(e[x].size()) - 1; i >= 0; i --)
	{
		int to = e[x][i];
		if (to == fa) continue;
		ll cur = 0;
		cur = max(cur, dp[to][0] + max1);
		cur = max(cur, dp[to][0] + dp[to][1]);
		cur = max(cur, max1 + max2);
		f[x] = max(f[x], dis[to] + cur + a[x]);
		if (dep[to] >= max1) max2 = max1, max1 = dep[to];
		else max2 = max(max2, dep[to]);
	}

	f[x] = max(f[x], r1 + r2);
	dis[x] = max(dis[x], max1 + max2 + a[x]);

}

int main( )
{
	int x, y;
	scanf("%d", &n);
	for (int i = 1; i <= n; i ++)
		scanf("%d", &a[i]);
	for (int i = 1; i < n; i ++)
	{
		scanf("%d %d", &x, &y);
		e[x].push_back(y);
		e[y].push_back(x);
	}
	dfs(1, 0);
	printf("%I64d\n", f[1]);
	return 0;
}
	