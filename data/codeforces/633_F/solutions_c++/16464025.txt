#include<stdio.h>
#include<cstring>
#include<algorithm>
#define N 100005
#define M 200005
using namespace std;
long long i,j,k,l,s,n,m,tot,last[N],next[M],to[M],q[N],fa[N],a[N],x,y,ans;
long long f[N][3][3];
struct node {
	long long ma[4],id[4];
	inline void clear() {
		memset(ma,0,sizeof(ma)); 
		memset(id,0,sizeof(id));
	}
}A,B,C,D;
inline void add(long long o,long long p) {
	next[++tot]=last[o]; last[o]=tot; to[tot]=p;
}
inline void build() {
	long long l=0,r=1; q[1]=1;
	while (l<r) {
		long long k=q[++l];
		for (long long i=last[k];i;i=next[i]) if (fa[k]!=to[i]) fa[q[++r]=to[i]]=k;
	}
}
inline void change(node &x,long long y,long long z) {
	if (y>x.ma[1]) x.ma[3]=x.ma[2],x.id[3]=x.id[2],x.ma[2]=x.ma[1],x.id[2]=x.id[1],x.ma[1]=y,x.id[1]=z;
	else if (y>x.ma[2]) x.ma[3]=x.ma[2],x.id[3]=x.id[2],x.ma[2]=y,x.id[2]=z;
	else if (y>x.ma[3]) x.ma[3]=y,x.id[3]=z; 
}
int main() {
	scanf("%I64d",&n);
	for (i=1;i<=n;i++) scanf("%I64d",&a[i]);
	for (i=1;i<n;i++) scanf("%I64d%I64d",&x,&y),add(x,y),add(y,x);
	build(); 
	for (i=n;i;i--) {
		A.clear(); B.clear(); C.clear(); D.clear();
		for (j=last[q[i]];j;j=next[j]) {
			if (to[j]==fa[q[i]]) continue;
			change(A,f[to[j]][0][1],to[j]);
			change(B,f[to[j]][1][0],to[j]);
			change(C,f[to[j]][1][1],to[j]);
			change(D,f[to[j]][2][0],to[j]);
		}
		f[q[i]][1][0]=max(B.ma[1],A.ma[1]+a[q[i]]+A.ma[2]);
		f[q[i]][0][1]=A.ma[1]+a[q[i]];
		if (A.id[1]!=B.id[1]) f[q[i]][1][1]=B.ma[1]+A.ma[1]+a[q[i]];
		else f[q[i]][1][1]=max(B.ma[2]+A.ma[1]+a[q[i]],B.ma[1]+A.ma[2]+a[q[i]]);
		f[q[i]][1][1]=max(f[q[i]][1][1],C.ma[1]+a[q[i]]);
		f[q[i]][2][0]=max(D.ma[1],B.ma[1]+B.ma[2]);
		if (C.id[1]!=A.id[1]) f[q[i]][2][0]=max(f[q[i]][2][0],C.ma[1]+A.ma[1]+a[q[i]]);
		else f[q[i]][2][0]=max(f[q[i]][2][0],max(C.ma[2]+A.ma[1]+a[q[i]],C.ma[1]+A.ma[2]+a[q[i]]));
		for (j=1;j<=3;j++) for (k=1;k<=3;k++) for (l=k+1;l<=3;l++) {
			if (B.id[j]==A.id[k]||B.id[j]==A.id[l]) continue;
			f[q[i]][2][0]=max(f[q[i]][2][0],B.ma[j]+A.ma[k]+A.ma[l]+a[q[i]]);
		}		
	}
	for (i=1;i<=n;i++) ans=max(ans,f[i][2][0]); 
	printf("%I64d\n",ans);
}
			
		
				