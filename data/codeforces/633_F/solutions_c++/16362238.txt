#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
#include <sstream>
#include <numeric>
#include <cassert>
using namespace std;

#define f first
#define s second
#define mp make_pair
#define sz(a) int((a).size())
#define pb push_back
#define all(c) (c).begin(),(c).end()
#define forit(it,S) for(__typeof(S.begin()) it = S.begin(); it != S.end(); ++it)
#ifdef WIN32
#define I64d "%I64d"
#else
#define I64d "%lld"
#endif

typedef pair <int, int> pi;
typedef vector <int> vi;
typedef long long ll;

int n;
vector<int> e[111111];
int a[111111];
ll mx[111111], head[111111];
ll res;

void rec(int u, int p) {
  ll m1 = 0, m2 = 0;
  forit (it, e[u]) {
    int v = *it;
    if (v == p) continue;
    rec(v, u);
    mx[u] = max(mx[u], mx[v]);    
    ll x = head[v];
    if (x > m1) {
      m2 = m1, m1 = x;
    } else if (x > m2) {
      m2 = x;
    }
  }
  head[u] = m1 + a[u];
  mx[u] = max(mx[u], m1 + m2 + a[u]);
}

void calc(int u, int p, ll tail, ll alt) {
  res = max(res, alt + mx[u]);

  ll a1 = 0, a2 = 0;
  ll t1 = 0, t2 = 0, t3 = 0;

  forit (it, e[u]) {
    int v = *it;
    if (v  == p) continue;
    if (mx[v] > a1) {
      a2 = a1, a1 = mx[v];
    } else if (mx[v] > a2) {
      a2 = mx[v];
    }

    if (head[v] > t1) {
      t3 = t2, t2 = t1, t1 = head[v];
    } else if (head[v] > t2) {
      t3 = t2, t2 = head[v];
    } else if (head[v] > t3) {
      t3 = head[v];
    }
  }

  forit (it, e[u]) {
    int v = *it;
    if (v == p) continue;

    ll ma = 0, mt1 = 0, mt2 = 0;
    
    if (mx[v] == a1) {
      ma = a2;
    } else {
      ma = a1;
    }

    if (head[v] == t1) {
      mt1 = t2, mt2 = t3;
    } else if (head[v] == t2) {
      mt1 = t1, mt2 = t3;
    } else {
      mt1 = t1, mt2 = t2;
    }

    ll nalt = max(alt, ma);
    nalt = max(nalt, tail + mt1 + a[u]);
    nalt = max(nalt, tail + mt2 + a[u]);
    nalt = max(nalt, mt1 + mt2 + a[u]);

    ll ntail = max(tail, max(mt1, mt2)) + a[u];
    calc(v, u, ntail, nalt);
  }
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u, --v;
    e[u].pb(v);
    e[v].pb(u);
  }

  rec(0, -1);
  
  calc(0, -1, 0LL, 0LL);
  cout << res << endl;
  return 0;
}
