#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#include <bitset>

#define rep(i, l, r) for(int i=l; i<=r; i++)
#define down(i, l, r) for(int i=l; i>=r; i--)
#define travel(x) for(edge *p=fir[x]; p; p=p->n)
#define clr(x,c) memset(x, c, sizeof(x))

#define ll long long
#define pb push_back
#define lowbit(x) (x&-x)
#define l(x) Left[x]
#define r(x) Right[x]

#define maxn 100009
#define maxm 200009

using namespace std;
inline int read()
{
	int x=0, f=1; char ch=getchar();
	while (ch<'0' || ch>'9') {if (ch=='-') f=-1; ch=getchar();}
	while ('0'<=ch && ch<='9') x=x*10+ch-'0', ch=getchar();
	return x*f;
}

struct edge{int y; edge *n;} e[maxm], *fir[maxn], *pt=e;
void AddE(int x, int y){pt->y=y, pt->n=fir[x], fir[x]=pt++;}

int n, h[maxn]; ll k[maxn], f[maxn], A[maxn], B[maxn], C[maxn], g[maxn], Ag[maxn], Bg[maxn], G[maxn], H[maxn], ans;

void dfs(int x)
{
	travel(x) if (p->y!=h[x])
		h[p->y]=x, dfs(p->y), f[x]=max(f[x], f[p->y]);
	f[x]+=k[x];
	
	travel(x) if (p->y!=h[x])
	{
		if (f[p->y]>A[x]) 
			C[x]=B[x], B[x]=A[x], A[x]=f[p->y];
		else if (f[p->y]>B[x]) 
			C[x]=B[x], B[x]=f[p->y];
		else if (f[p->y]>C[x])
			C[x]=f[p->y];
	}
	g[x]=k[x]+A[x]+B[x];
	
	travel(x) if (p->y!=h[x])
	{
		g[x]=max(g[x], g[p->y]);
		if (g[p->y]>Ag[x])
			Bg[x]=Ag[x], Ag[x]=g[p->y];
		else if (g[p->y]>Bg[x])
			Bg[x]=g[p->y];
	}
}

void dfs2(int x)
{
	if (H[x]>A[x]) 
		C[x]=B[x], B[x]=A[x], A[x]=H[x];
	else if (H[x]>B[x]) 
		C[x]=B[x], B[x]=H[x];
	else if (H[x]>C[x])
		C[x]=H[x];
	
	travel(x) if (p->y!=h[x])
	{
		H[p->y]=max(H[x],(f[p->y]==A[x]?B[x]:A[x]))+k[x];
		
		if (f[p->y]==A[x]) G[x]=k[x]+B[x]+C[x];
		else if (f[p->y]==B[x]) G[x]=k[x]+A[x]+C[x];
		else G[x]=k[x]+A[x]+B[x];
		
		G[x]=max(G[x], G[h[x]]);
		
		if (g[p->y]==Ag[x]) G[x]=max(G[x], Bg[x]); 
		else G[x]=max(G[x], Ag[x]);
		
		ans=max(ans, G[x]+g[p->y]);
		
		dfs2(p->y);
	}
}

int main()
{
	n=read(); rep(i, 1, n) k[i]=read();
	rep(i, 1, n-1) {int x=read(), y=read(); AddE(x,y); AddE(y,x);}
	dfs(1); dfs2(1);
	printf("%lld\n", ans);
	return 0;
}