#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <sstream>
#include <complex>
#include <ctime>
#include <cassert>
#include <functional>

using namespace std;

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> PII;

#define REP(i,s,t) for(int i=(s);i<(t);i++)
#define FILL(x,v) memset(x,v,sizeof(x))

const int INF = (int)1E9;
#define MAXN 100005

int N, a[MAXN], par[MAXN];
VI adj[MAXN];
ll ans, down[MAXN], maxin[MAXN], up[MAXN];
void dfs(int x, int p) {
	par[x] = p;
	int sz = adj[x].size();
	maxin[x] = down[x] = a[x];
	vector<ll> downs, maxins;
	REP(i, 0, sz) {
		int y = adj[x][i];
		if (y == p) continue;
		dfs(y, x);
		down[x] = max(down[x], down[y] + a[x]);
		downs.push_back(down[y]);
		maxin[x] = max(maxin[x], maxin[y]);
		maxins.push_back(maxin[y]);
	}
	sort(downs.begin(), downs.end(), greater<ll>());
	sort(maxins.begin(), maxins.end(), greater<ll>());
	maxin[x] = max(maxin[x], a[x] + (downs.size() ? downs[0] : 0) + (downs.size() > 1 ? downs[1] : 0));
	ans = max(ans, (maxins.size() ? maxins[0] : 0) + (maxins.size() > 1 ? maxins[1] : 0));
}
void dfs2(int x, int p) {
	int sz = adj[x].size();
	multiset<ll, greater<ll> > s;
	multiset<ll>::iterator it;
	REP(i, 0, sz) {
		int y = adj[x][i];
		if (y == p) continue;
		s.insert(down[y]);
	}
	REP(i, 0, sz) {
		int y = adj[x][i];
		if (y == p) continue;
		it = s.find(down[y]);
		s.erase(it);
		int take = 0;
		ll other1 = 0, other2 = 0;
		for (it = s.begin(); take < 2 && it != s.end(); it++, take++) {
			if (take == 0) other1 += *it;
			if (take <= 1) other2 += *it;
		}
		ans = max(ans, maxin[y] + a[x] + other2);
		ans = max(ans, maxin[y] + a[x] + other1 + up[x]);
		up[y] = max(a[x] + up[x], a[x] + other1);
		s.insert(down[y]);

		dfs2(y, x);
	}
}
int main() {
	cin >> N;
	REP(i, 0, N) scanf("%d", a + i);
	REP(i, 0, N - 1) {
		int a, b;
		scanf("%d%d", &a, &b); a--; b--;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	dfs(0, -1);
	dfs2(0, -1);
	cout << ans << endl;
	return 0;
}