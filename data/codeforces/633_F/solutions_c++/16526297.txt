#include<iostream>
#include<cstring>
#include<string>
#include<cstdio>
#include<stdio.h>
#include<algorithm>
#include<cmath>
#include<map>
#include<queue>
#include<bitset>
#include<stack>
using namespace std;


#pragma comment(linker, "/STACK:1024000000,1024000000")
#define inf 0x3f3f3f3f
#define eps 1e-9
#define pii pair<int,int>
#define MP make_pair
#define LL  long long
#define ULL unsigned long long
#define N ( 100000 + 10 )
#define M ( 200000 + 10)
#define mod  1000000007

int fst[N], vv[M], nxt[M], e;
void init() {
	e = 0;
	memset(fst, -1, sizeof fst);
}

void add(int u, int v) {
	vv[e] = v, nxt[e] = fst[u], fst[u] = e++;
}

LL dp[N][3];
LL f[N][4];
int w[N];

void update(long long v, LL ma[3]) {
	if(v > ma[0]) ma[2] = ma[1], ma[1] = ma[0], ma[0] = v;
	else if(v == ma[0]) ma[2] = ma[1], ma[1] = ma[0];
	else if(v > ma[1]) ma[2] = ma[1], ma[1] = v;
	else if(v == ma[1]) ma[2] = ma[1];
	else ma[2] = max(ma[2], v);
}

void dfs(int u, int fa) {
	for(int i = 0; i < 3; ++i) dp[u][i] = -inf;
	dp[u][0] = w[u];
	f[u][0] = f[u][1] = w[u];
	for(int i = fst[u]; ~i; i = nxt[i]) {
		int v = vv[i];
		if(v == fa) continue;
		dfs(v, u);
		update(dp[v][0]+w[u], dp[u]);
	}
	LL ma[3];
	for(int i = 0; i < 3; ++i)
		ma[i] = -inf;
	for(int i = fst[u]; ~i; i = nxt[i]) {
		int v = vv[i];
		if(v == fa) continue;
		f[u][0] = max(f[u][0], f[v][0] + w[u]);

		f[u][1] = max(f[u][1], f[v][0] + w[u]);
		f[u][1] = max(f[u][1], f[v][1]);
		if(dp[u][1] != -inf) f[u][1] = max(f[u][1], dp[u][0] + dp[u][1] - w[u]);

		f[u][2] = max(f[u][2], f[v][2] + w[u]);
		if(dp[u][0] == dp[v][0] + w[u]) f[u][2] = max(f[u][2], f[v][1] + dp[u][1]);
		else f[u][2] = max(f[u][2], f[v][1] + dp[u][0]);

		f[u][3] = max(f[u][3], f[v][2] + w[u]);
		LL tmp = 0, tmp2 = 0;
		if(dp[u][0] == dp[v][0] + w[u]) {
			tmp += dp[u][1] + dp[u][2];
			tmp2 += dp[u][1];
		}
		else {
			tmp += dp[u][0];
			tmp2 += dp[u][0];
			if(dp[u][1] == dp[v][0] + w[u])
				tmp += dp[u][2];
			else
				tmp += dp[u][1];
		}
		f[u][3] = max(f[u][3], tmp - w[u] + f[v][1]);
		//f[u][3] = max(f[u][3], tmp - w[u] + f[v][2]);
		f[u][3] = max(f[u][3], tmp2 + f[v][1]);
		f[u][3] = max(f[u][3], tmp2 + f[v][2]);
		f[u][3] = max(f[u][3], f[v][3]);
		update(f[v][1], ma);
	}
	f[u][3] = max(f[u][3], ma[0] + ma[1]);
	//printf("u %d %I64d %I64d %I64d %I64d\n", u, f[u][0], f[u][1], f[u][2], f[u][3]);
}
int main() {
	int n;
	scanf("%d", &n);
	for(int i = 1; i <= n; ++i) {
		scanf("%d", &w[i]);
	}
	//printf("res %I64d\n", (LL)w[5] + w[9] + w[2] + w[8] +w[10] + w[4] + w[7] );

	init();
	int u, v;
	for(int i = 1; i < n; ++i) {
		scanf("%d%d", &u, &v);
		add(u, v);
		add(v, u);
	}

	dfs(1, -1);
	printf("%I64d\n", max(f[1][2], f[1][3]));
}
