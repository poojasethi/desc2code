#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const LL INF = 0x3f3f3f3f3f3f3f3f;
const int maxn = 100005;
LL dp[maxn][3][2], f[3][2];
int a[maxn];
struct Edge{
    int v, next;
}E[maxn << 1];
int head[maxn], tol;

void Init(){
    memset(head, - 1, sizeof head);
    tol = 0;
}

void add_edge(int u, int v){
    E[tol].v = v;
    E[tol].next = head[u];
    head[u] = tol++;
}

void cmax(LL &a, LL b){ if(a < b) a = b; }

void dfs(int u, int pre){
    for(int i = 0; i < 3; i++)
        for(int j = 0; j < 2; j++)
            dp[u][i][j] = -INF;
    dp[u][0][0] = 0;
    dp[u][0][1] = a[u];
    dp[u][1][0] = a[u];
    LL mx = -INF;
    for(int i = head[u]; ~i; i = E[i].next){
        int v = E[i].v;
        if(v == pre) continue;
        dfs(v, u);
        memcpy(f, dp[u], sizeof dp[u]);
        for(int j = 0; j < 3; j++){
            for(int k = j; k >= 0; k--){
                cmax(dp[u][j][0], f[j - k][0] + dp[v][k][0]);
                if(j - k - 1 >= 0)
                    cmax(dp[u][j][0], f[j - k - 1][1] + dp[v][k][1]);
                cmax(dp[u][j][1], f[j - k][1] + dp[v][k][0]);
            }
            cmax(dp[u][j][1], dp[v][j][1] + a[u]);
            if(j == 1)
                cmax(dp[u][j][1], dp[v][j - 1][1] + mx + a[u]);
        }
        cmax(mx, dp[v][1][0]);
    }
}

int main(){
    int n, u, v;
    scanf("%d", &n);
    for(int i = 1; i <= n; i++) scanf("%d", &a[i]);
    Init();
    for(int i = 1; i < n; i++){
        scanf("%d%d", &u, &v);
        add_edge(u, v);
        add_edge(v, u);
    }
    dfs(1, -1);
    cout << max(dp[1][2][0], dp[1][1][1]) << endl;
    return 0;
}
