#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<vector>
#define ll long long
using namespace std;
const int M=1e5+5;
int n,A[M];
ll dp[M][3],f[M],s[M];
/*f[x]��ʾ��xΪ���������л����ཻ������·��Ȩֵ�͵����ֵ,����һ��һ���Ǵ�x��Ҷ�ӽڵ� 
  s[x]��ʾx��������Զ��Ҷ�ӽڵ�ľ���
  dp[x][i]��ʾ��xΪ����������i��·�������Ȩֵ�� 
*/
inline void rd(int &res){
	int k=1;char c;
	res=0;
	while(c=getchar(),c<48);
	do res=(res<<1)+(res<<3)+(c^48);
	while(c=getchar(),c>=48);
}
inline void Max(ll &x,ll y){
	if(x<y)x=y;
}
vector<int>e[M];
struct node{
	int id;
	ll val;
	bool operator<(const node &tmp)const{
		return val>tmp.val;//����val�Ӵ�С 
	}
};
void insert(node B[],int &c,int id,ll v,int p){	
	if(c<p)B[c++]=(node){id,v};
	else B[c]=(node){id,v};
	sort(B,B+c+1);
}
void dfs(int x,int pre,ll v){
	s[x]=v;
	f[x]=A[x];
	dp[x][1]=A[x];
	dp[x][2]=A[x];
	node mxdp[4],mxdis[4],mxf[4];
	for(int i=0;i<4;i++)mxf[i].val=mxdis[i].val=mxdp[i].val=0;
	int cnt=0,sz=e[x].size();
	for(int i=0;i<sz;i++){
		int y=e[x][i];
		if(y==pre)continue;
		dfs(y,x,v+A[y]);
		Max(s[x],s[y]);
		insert(mxdp,cnt,y,dp[y][1],3);
		insert(mxdis,cnt,y,s[y],3);
		insert(mxf,cnt,y,f[y],2);
		Max(dp[x][1],dp[y][1]);
		Max(dp[x][2],dp[y][2]);//(1) 
		Max(f[x],f[y]+A[x]);
	}
	if(!cnt)return ;
	Max(dp[x][2],mxdp[0].val+mxdp[1].val);//(2)
	Max(dp[x][1],mxdis[0].val+mxdis[1].val-v*min(cnt,2)+A[x]);
	for(int i=0;i<min(cnt,3);i++){
		int c=0;
		ll tmp=0;
		for(int j=0;j<min(cnt,3);j++){
			if(mxdis[j].id!=mxdp[i].id){
				c++;tmp+=mxdis[j].val;
				if(c==2)break; 
			}
		}
		Max(dp[x][2],tmp+mxdp[i].val+A[x]-c*v);//(3)
	}
	for(int i=0;i<min(cnt,2);i++){
		ll tmp=mxdis[0].val;
//		ll h=v;
		if(mxdp[i].id==mxdis[0].id)tmp=mxdis[1].val;
		Max(f[x],mxdp[i].val-(tmp==0?0:v)+A[x]+tmp);
		if(mxf[i].id==mxdis[0].id)tmp=mxdis[1].val;
		else tmp=mxdis[0].val;
		Max(dp[x][2],tmp+A[x]+mxf[i].val-(tmp==0?0:v));//(4)
	}
}
int main(){
//	freopen("my.in","r",stdin);
//	freopen("my.out","w",stdout);
	int i,j,k,a,b;
	rd(n);
	for(i=1;i<=n;i++)rd(A[i]);
	for(i=1;i<n;i++){
		rd(a);rd(b);
		e[a].push_back(b);
		e[b].push_back(a);
	}
	dfs(1,1,A[1]);
	cout<<dp[1][2]<<endl;
	return 0;
}
