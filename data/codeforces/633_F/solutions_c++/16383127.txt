#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 2e5 + 5;

int S, n, m, x, y, z, a[N], t, h[N];
ll dp[N][3][3], dp2[3][3];
vector< int > v[N];

int dfs(int node, int root) {
	foreach(it, v[node]) {
		if(*it != root) {
			dfs(*it, node);
			FOR(i, 0, 2)
				FOR(j, 0, 2)
					dp2[i][j] = dp[node][i][j];
			FOR(i, 0, 2)			
				FOR(j, 0, 2) {
					FOR(q1, 0, i)					
						FOR(q2, 0, j) {
							dp[node][i][j] = max(dp[node][i][j], dp2[q1][q2] + dp[*it][i-q1][j-q2]);
						}					
				}			
		}
	}
	FOR(i, 1, 2)
		FOR(j, 0, 2) 
			dp[node][i][j] += a[node];

	FOR(i, 0, 2)
		dp[node][2][i] = max(dp[node][2][i], dp[node][1][i]);

	dp[node][0][2] = max(dp[node][0][2], dp[node][2][1]);
	dp[node][0][1] = max(dp[node][0][1], dp[node][2][0]);
	dp[node][2][0] = dp[node][2][1] = dp[node][2][2] = 0;
}

int main() {

	scanf("%d", &n);

	FOR(i, 1, n) {
		scanf("%d", &a[i]);
	}

	FOR(i, 2, n) {
		scanf("%d %d" ,&x, &y);
		v[x].pb(y); v[y].pb(x);
	}

	dfs(1, 0);

	cout << dp[1][0][2] << endl;
}
