#include<cstdio>
#define ls (k<<1)
#define rs (k<<1|1)
#define N 110005
#define count(x) (x*1ll*x%P*1ll*x%P)
using namespace std;
struct arr{int l,r,add,cnt,sum[50];}a[N*4];
int data[N],i,n,m,opt,L,R;
const int P=95542721;
inline int calc(int x) {while (x>47) x-=48;return x;}
inline void down(int k)
{
  if (!a[k].cnt||a[k].l==a[k].r) return;int W=a[k].cnt;a[k].cnt=0;
  a[ls].add=calc(a[ls].add+W);a[ls].cnt=calc(a[ls].cnt+W);
  a[rs].add=calc(a[rs].add+W);a[rs].cnt=calc(a[rs].cnt+W);
}
inline void up(int k)
{
  for (int i=0;i<48;i++)
    a[k].sum[i]=(a[ls].sum[calc(a[ls].add+i)]+a[rs].sum[calc(a[rs].add+i)])%P;
}
void build(int k,int l,int r)
{
  a[k].l=l;a[k].r=r;a[k].add=a[k].cnt=0;
  if (l==r)
  {
    a[k].sum[0]=data[l];
    for (int i=1;i<=47;i++)
      a[k].sum[i]=count(a[k].sum[i-1]);
    return;
  }
  int mid=(l+r)>>1;
  if (l<=mid) build(ls,l,mid);
  if (r>mid) build(rs,mid+1,r);
  for (int i=0;i<48;i++) a[k].sum[i]=(a[ls].sum[i]+a[rs].sum[i])%P;
}
void update(int k)
{
  if (L<=a[k].l&&a[k].r<=R)
  {
    a[k].cnt=calc(a[k].cnt+1);
    a[k].add=calc(a[k].add+1);
    return;
  }
  down(k);
  int mid=(a[k].l+a[k].r)>>1;
  if (L<=mid) update(ls);
  if (R>mid) update(rs);
  a[k].add=0;up(k);
}
int Query(int k)
{
  if (L<=a[k].l&&a[k].r<=R) return a[k].sum[calc(a[k].add)];
  down(k);int res=0;
  int mid=(a[k].l+a[k].r)>>1;
  if (L<=mid) res=Query(ls);
  if (R>mid) (res+=Query(rs))%=P;
  return res;
}
int main()
{
  scanf("%d",&n);
  for (i=1;i<=n;i++)
    scanf("%d",&data[i]);
  build(1,1,n);scanf("%d",&m);
  while (m--)
  {
    scanf("%d%d%d",&opt,&L,&R);
    if (opt==1) printf("%d\n",Query(1));
    else update(1);
  }
  return 0;
}
