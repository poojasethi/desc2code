#include<cstdio>
typedef long long LL;
#include<cstring>
#include<algorithm>
#include<iostream>
using namespace std;
const int MOD=95542721;
int pow3(LL x){
	return x*x%MOD*x%MOD;
}
#define N 200000
int tmp[48];
struct node{
	node*c[2];
	int sum[48],add,ans[48];
	void plus(int w){
		for(int i=0;i<48;i++)
			tmp[i]=ans[(i+w)%48];
		for(int i=0;i<48;i++)
			ans[i]=tmp[i];
		add+=w;
	}
	void push(){
		if(c[0])c[0]->plus(add),c[1]->plus(add);
		add=0;
	}
}pool[N*2+10],*stp=pool,*root;
int ql,qr;
int n,a[N],numQ;
#define mid (l+r)/2
node*build(int l,int r){
	node*x=stp++;
	if(l==r){
		x->sum[0]=x->ans[0]=a[l];
		for(int i=1;i<48;i++)x->sum[i]=x->ans[i]=pow3(x->sum[i-1]);
	}else{
		x->c[0]=build(l,mid);
		x->c[1]=build(mid+1,r);
		for(int i=0;i<48;i++)
			x->sum[i]=x->ans[i]=(x->c[0]->sum[i]+x->c[1]->sum[i])%MOD;
	}return x;
}
int query(node*o,int l,int r){
	o->push();
	if(l>=ql&&r<=qr)return o->ans[0];
	else{
		int ans=0;
		if(ql<=mid)ans+=query(o->c[0],l,mid);
		if(qr>mid)ans+=query(o->c[1],mid+1,r);
		return ans%MOD;
	}
}
void change(node*o,int l,int r){
	o->push();
	if(l>=ql&&r<=qr)o->plus(1);
	else{
		if(ql<=mid)change(o->c[0],l,mid);
		if(qr>mid)change(o->c[1],mid+1,r);
		for(int i=0;i<48;i++)
			o->ans[i]=(o->c[0]->ans[i]+o->c[1]->ans[i])%MOD;
	}
}
int main(){
	scanf("%d",&n);
	for(int i=1;i<=n;i++)scanf("%d",&a[i]);
	root=build(1,n);
	scanf("%d",&numQ);
	while(numQ--){
		int typ;
		scanf("%d%d%d",&typ,&ql,&qr);
		if(typ==1)printf("%d\n",query(root,1,n));
		else change(root,1,n);
	}
}
