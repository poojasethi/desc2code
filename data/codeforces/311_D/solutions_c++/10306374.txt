#include <cstring>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
using namespace std;
#define cube(a) ((a%mod*a%mod)%mod*a%mod)%mod
#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
#define getmid int mid=(l+r)>>1
#define maxn 400010
#define mod 95542721
typedef long long sint;
sint sum[maxn][50];
int cal[maxn];
void pushup(int rt)
{
    for(int i=0;i<48;++i)
		sum[rt][i]=sum[rt<<1][(i+cal[rt<<1])%48] + sum[rt<<1|1][(i+cal[rt<<1|1])%48];
}
void pushdown(int rt)
{
    cal[rt<<1]+=cal[rt];
    cal[rt<<1|1]+=cal[rt];
    cal[rt]=0;
    pushup(rt);
}
void build(int l,int r,int rt)
{
    getmid;
    if(l==r)
    {
        scanf("%I64d",&sum[rt][0]);
        for(int i=1;i<=48;i++)
        {
            sum[rt][i]=cube(sum[rt][i-1]);
        }
        return;
    }
    build(lson);
    build(rson);
    pushup(rt);
}
sint query(int l,int r,int rt,int x,int y)
{
    if(x<=l&&y>=r)
    {
        return sum[rt][cal[rt]%48];
    }
    pushdown(rt);
    getmid;
    sint tmp=0;
    if(x<=mid) tmp+=query(lson,x,y);
    if(y>mid) tmp+=query(rson,x,y);
    tmp%=mod;
    return tmp;
}
void modify(int l,int r,int rt,int x,int y)
{
    if(x<=l&&y>=r)
    {
        cal[rt]++;
        return;
    }
    pushdown(rt);
    getmid;
    if(x<=mid) modify(lson,x,y);
    if(y>mid) modify(rson,x,y);
    pushup(rt);
}
int main()
{
    int n,m;
    scanf("%d",&n);
    build(1,n,1);
    scanf("%d", &m);
    int p,l,r;
	while(m--)
    {
		scanf("%d%d%d",&p,&l,&r);
		if(p == 1)
			printf("%I64d\n",query(1,n,1,l,r));
		else
			modify(1,n,1,l,r);
	}
    return 0;
}
