// By Anudeep :)
#include <cstdio>
typedef long long ll;
#define rep(i,n) for(int i=0;i<n;i++)
const int N=111111,T=48,M=95542721;
struct node {
    int v[T],ptr;
};

int in[N],aa;
node st[N<<2];
int modsum(int a,int mod) { if(a>=mod) a-=mod; return a; }
void make_tree( int cur, int s, int e) {
    if(e-1==s) {
        scanf("%d",&aa); st[cur].v[0] = aa%M; st[cur].ptr=0;
        rep(i,T) if(i) st[cur].v[i] = (((1LL*st[cur].v[i-1]*st[cur].v[i-1])%M)*st[cur].v[i-1])%M;
        return;
    }
    make_tree( (cur<<1), s, (e+s)>>1); make_tree( (cur<<1)|1, (e+s)>>1, e);
    rep(i,T) st[cur].v[i] = modsum(st[cur<<1].v[i] + st[(cur<<1)+1].v[i],M);
}

void update(int cur, int &S, int &E, int s, int e) {
    if(s>=E || e<=S) return;
    if(s>=S && e<=E) { if(++st[cur].ptr==T) st[cur].ptr=0;  }
    else {
        update(cur<<1, S, E, s, (s+e)>>1); update((cur<<1)+1, S, E, (s+e)>>1, e);
        rep(i,T) st[cur].v[i] = modsum(st[cur<<1].v[modsum(i+st[cur<<1].ptr,T)] + st[(cur<<1)+1].v[modsum(i+st[(cur<<1)|1].ptr,T)],M);
    }
}

int query( int cur, int &S, int &E, int s, int e, int add) {
    if(s>=E || e<=S) return 0;
    add = modsum(add+st[cur].ptr,T);
    if(s>=S && e<=E) return st[cur].v[add];
    else return modsum( query(cur<<1,S,E,s,(s+e)>>1,add) + query((cur<<1)|1,S,E,(s+e)>>1,e,add) , M);
}

int main() {
    int n; scanf("%d",&n);
    make_tree( 1, 0 , n);
    int q; scanf("%d",&q);
    while(q--) {
        int type,a,b;
        scanf("%d%d%d",&type,&a,&b); a--;
        if(type==1) printf("%d\n",query( 1, a, b, 0, n,0));
        else update( 1, a, b, 0, n);
    }
    return 0;
}