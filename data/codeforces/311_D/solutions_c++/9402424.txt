#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <map>
using namespace std;
int n,j,tree[262144][48],D[262144],L[262144],R[262144],i,Q,A,B,C,f[48];
const int MOD=95542721;
void Update(int x)
{
    for (int i=0; i<48; i++)
      tree[x][i]=(tree[x*2][(i+D[x*2])%48]+tree[x*2+1][(i+D[x*2+1])%48])%MOD;
}
void Down(int x)
{
    for (int i=0; i<48; i++) f[(i-D[x]%48+48)%48]=tree[x][i];
    for (int i=0; i<48; i++) tree[x][i]=f[i];
    if (x<131072)
    {
        D[x*2]+=D[x];
        D[x*2+1]+=D[x];
    }
    D[x]=0;
}
void WORK(int x,int l,int r)
{
    Down(x);
    if (L[x]==l && R[x]==r) {D[x]++; return;}
    int mid=(L[x]+R[x])/2;
    if (l<=mid) WORK(x*2,l,min(mid,r));
    if (r>mid) WORK(x*2+1,max(mid+1,l),r);
    Update(x);
}
int work(int x,int l,int r)
{
    Down(x);
    if (L[x]==l && R[x]==r) return tree[x][0];
    int mid=(L[x]+R[x])/2,p=0,q=0;
    if (l<=mid) p=work(x*2,l,min(mid,r));
    if (r>mid) q=work(x*2+1,max(mid+1,l),r);
    return (p+q)%MOD;
}
int main()
{
    scanf("%d",&n);
    for (i=1; i<=n; i++) scanf("%d",&tree[131071+i][0]);
    for (i=131072; i<262144; i++)
      for (j=1; j<48; j++) tree[i][j]=1ll*tree[i][j-1]*tree[i][j-1]%MOD*tree[i][j-1]%MOD;
    for (i=131071; i>=1; i--) Update(i);
    for (i=131072; i<262144; i++) L[i]=R[i]=i;
    for (i=131071; i>=1; i--) {L[i]=L[i*2]; R[i]=R[i*2+1];}
    scanf("%d",&Q);
    while (Q--)
    {
        scanf("%d%d%d",&A,&B,&C);
        if (A==1) printf("%d\n",work(1,131071+B,131071+C)); else
          WORK(1,131071+B,131071+C);
    }
    return 0;
}
