#include<cstdio>
#include<cstring>
#define CH getchar()
#define rep(i,n) for (int i=0;i<n;i++)
#define tree int t,int l,int r
#define left t*2,l,mid
#define right t*2+1,mid+1,r
#define M int mid=(l+r)/2
const int p=95542721,N=400005;
int a[N],s[N][48],c[N],tmp[48];
int cube(long long x){return x*x%p*x%p;}
void build(tree)
{
	if (l==r){s[t][0]=a[l]; rep(i,47) s[t][i+1]=cube(s[t][i]); return;} M;
	build(left); build(right); rep(i,48) s[t][i]=(s[t*2][i]+s[t*2+1][i])%p;
}
void renew(int t,int C)
{c[t]+=C; rep(i,48) tmp[i]=s[t][(i+C)%48]; rep(i,48) s[t][i]=tmp[i];}
void down(int t,int &C){if (C) renew(t*2,C),renew(t*2+1,C),C=0;}
void modify(tree,int ll,int rr)
{
	if (l==ll && r==rr){renew(t,1); return;} M; down(t,c[t]);
	if (rr<=mid) modify(left,ll,rr);
	else if (ll>mid) modify(right,ll,rr);
		else modify(left,ll,mid),modify(right,mid+1,rr); 
	rep(i,48) s[t][i]=(s[t*2][i]+s[t*2+1][i])%p;
}
int query(tree,int ll,int rr)
{
	if (l==ll && r==rr) return s[t][0]; M; down(t,c[t]);
	if (rr<=mid) return query(left,ll,rr);
	if (ll>mid) return query(right,ll,rr);
	return (query(left,ll,mid)+query(right,mid+1,rr))%p;
}
int main()
{
	int n,m,type,l,r; scanf("%d",&n); rep(i,n) scanf("%d",a+i+1);
	build(1,1,n); scanf("%d",&m);
	while (m--){
		scanf("%d%d%d",&type,&l,&r);
		if (type==1) printf("%d\n",query(1,1,n,l,r)); else modify(1,1,n,l,r);
		}
	return 0;
}
