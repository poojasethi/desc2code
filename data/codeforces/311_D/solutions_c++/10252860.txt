#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 100010;
const int mod = 95542721;
const int Cy = 48;
int a[Cy][N];
inline int calc(int x) {
	return (LL)x * x % mod * x % mod;
}
void prepare(int n) {
	for(int i = 1; i < Cy; i ++) 
		rep(j, n) 
			a[i][j] = calc(a[i - 1][j]);
}
#define lc o<<1
#define rc o<<1|1
#define lson l,m,lc
#define rson m+1,r,rc
int sum[N << 2][Cy], add[N << 2];
void up(int o) {
	rep(i, Cy)
		sum[o][i] = (sum[lc][i] + sum[rc][i]) % mod;
}
void build(int l, int r, int o) {
	if(l == r) {
		rep(i, Cy)
			sum[o][i] = a[i][l];
	} else {
		int m = l + r >> 1;
		build(lson);
		build(rson);
		up(o);
	}
}
int tmp[Cy];
void Set(int o, int val) {
	add[o] += val;
	add[o] %= Cy;
	memcpy(tmp, sum[o], sizeof tmp);
	rep(i, Cy)
		tmp[i] = sum[o][(i + val) % Cy];
	memcpy(sum[o], tmp, sizeof tmp);
}
void down(int o) {
	if(add[o]) {
		Set(lc, add[o]);
		Set(rc, add[o]);
		add[o] = 0;
	}
}
void update(int l, int r, int o, int L, int R) {
	if(L <= l && r <= R) {
		Set(o, 1);
	} else {
		int m = l + r >> 1;
		down(o);
		if(L <= m)	update(lson, L, R);
		if(R  > m)	update(rson, L, R);
		up(o);
	}
}
int query(int l, int r, int o, int L, int R) {
	if(L <= l && r <= R) 
		return sum[o][0];
	int m = l + r >> 1;
	int ret = 0;
	down(o);
	if(L <= m)	ret += query(lson, L, R);
	if(R >  m)	ret += query(rson, L, R);
	up(o);
	return ret % mod;
}
int main() {
	int n, q;	
	scanf("%d", &n);
	rep(i, n) 
		scanf("%d", &a[0][i]);
	prepare(n);
	build(0, n-1, 1);
	scanf("%d", &q);
	while(q --) {
		int op, l, r;
		scanf("%d%d%d", &op, &l, &r);
		l --, r --;
		if(op == 1)
			printf("%d\n", query(0, n - 1, 1, l, r));
		else
			update(0, n-1, 1, l, r);
	}
	return 0;
}

