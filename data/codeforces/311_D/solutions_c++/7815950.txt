#include <cstdio>
const int N=100005,mo=95542721,rnd=48;
typedef long long ll;

int n,m,L,R,b[rnd];

struct tree{
	int p,a[rnd];
} t[4*N];
void move(int cur,int d){
	(t[cur].p+=d)%=rnd;
	for(int i=0;i<d;i++) b[i]=t[cur].a[i];
	for(int i=d;i<rnd;i++) t[cur].a[i-d]=t[cur].a[i];
	for(int i=0;i<d;i++) t[cur].a[rnd-d+i]=b[i];
}
	
void update(int cur){
	t[cur].p=0;
	for(int i=0;i<rnd;i++) t[cur].a[i]=(t[cur<<1].a[i]+t[cur<<1|1].a[i])%mo;
}
void build(int cur,int beg,int end){
	if(end-beg==1){
		scanf("%d",t[cur].a);
		t[cur].a[0]%=mo;
		for(int i=1;i<rnd;i++) t[cur].a[i]=(ll)t[cur].a[i-1]*t[cur].a[i-1]%mo*t[cur].a[i-1]%mo;
		return;
	}
	int mid=beg+end>>1;
	build(cur<<1,beg,mid);
	build(cur<<1|1,mid,end);
	update(cur);
}
int qsum(int cur,int beg,int end){
	if(R<=beg||end<=L) return 0;
	if(L<=beg&&end<=R) return t[cur].a[0];
	if(t[cur].p){
		move(cur<<1,t[cur].p);
		move(cur<<1|1,t[cur].p);
		t[cur].p=0;
	}
	int mid=beg+end>>1;
	return (qsum(cur<<1,beg,mid)+qsum(cur<<1|1,mid,end))%mo;
}
void modify(int cur,int beg,int end){
	if(R<=beg||end<=L) return;
	if(L<=beg&&end<=R)
		return move(cur,1);
	if(t[cur].p){
		move(cur<<1,t[cur].p);
		move(cur<<1|1,t[cur].p);
		t[cur].p=0;
	}
	int mid=beg+end>>1;
	modify(cur<<1,beg,mid);
	modify(cur<<1|1,mid,end);
	update(cur);
}

int main(){
	scanf("%d",&n);
	build(1,0,n);
	scanf("%d",&m);
	while(m--){
		int type; scanf("%d%d%d",&type,&L,&R);
		L--;
		if(type==1)
			printf("%d\n",qsum(1,0,n));
		else
			modify(1,0,n);
	}
}
