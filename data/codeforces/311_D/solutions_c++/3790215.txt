#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;

int mod=95542721;

const int maxn=400010;

int s[maxn][48],lz[maxn];
int tmp[48],lft[maxn],rht[maxn];

void set(int *a,int k)
{
    int i;
    k%=48;
    if(!k)return;
    memset(tmp,0,sizeof(tmp));
    for(i=0;i<48;i++)
	tmp[i]=a[(i+k)%48];
    memcpy(a,tmp,sizeof(tmp));
}
void flow(int *a,int *l,int *r)
{
    int i;
    for(i=0;i<48;i++)
    {
	a[i]=l[i]+r[i];
	if(a[i]>=mod)
	    a[i]-=mod;
    }
}
void push(int n)
{
    if(!lz[n])
	return;
    lz[n<<1]+=lz[n];
    lz[(n<<1)+1]+=lz[n];
    set(s[n<<1],lz[n]);
    set(s[(n<<1)+1],lz[n]);
    lz[n]=0;
}
void upd(int n,int l,int r)
{
    if(lft[n]==l&&rht[n]==r)
    {
	lz[n]++;
	if(lz[n]>=48)
	    lz[n]-=48;
	set(s[n],1);
	return;
    }
    push(n);
    int mid=(lft[n]+rht[n])/2;
    if(r<=mid)
	upd(n<<1,l,r);
    else if(l>mid)
	upd((n<<1)+1,l,r);
    else
	upd(n<<1,l,mid),upd((n<<1)+1,mid+1,r);
    flow(s[n],s[n<<1],s[(n<<1)+1]);
}
int get(int n,int l,int r)
{
    if(lft[n]==l&&rht[n]==r)
	return s[n][0];
    push(n);
    int mid=(lft[n]+rht[n])/2;
    if(r<=mid)
	return get(n<<1,l,r);
    else if(l>mid)
	return get((n<<1)+1,l,r);
    return (get(n<<1,l,mid)+get((n<<1)+1,mid+1,r))%mod;
}
int a[maxn];
void build(int n,int l,int r)
{
    lft[n]=l,rht[n]=r;
    if(l==r)
    {
	int i;
	s[n][0]=a[l]%mod;
	for(i=1;i<48;i++)
	    s[n][i]=(s[n][i-1]+0ll)*s[n][i-1]%mod*s[n][i-1]%mod;
	return;
    }
    int mid=(l+r)/2;
    build(n<<1,l,mid);
    build((n<<1)+1,mid+1,r);
    flow(s[n],s[n<<1],s[(n<<1)+1]);
}
int main()
{
    int n,i,j,k;
    scanf("%d",&n);
    for(i=1;i<=n;i++)
	scanf("%d",&a[i]);
    build(1,1,n);
    int q;
    scanf("%d",&q);

    while(q--)
    {
	scanf("%d",&i);
	if(i==1)
	    scanf("%d%d",&i,&j),printf("%d\n",get(1,i,j));
	else
	    scanf("%d%d",&i,&j),upd(1,i,j);
    }
}
