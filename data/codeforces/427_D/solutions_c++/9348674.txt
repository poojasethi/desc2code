#include <iostream>
#include <string>
#include <algorithm>
#include <cstring>
using namespace std;

string S[2];
int len[2];
int dp[5005][5005];
int lcp[2][5005];

int main()
{
	cin >> S[0] >> S[1];
	len[0] = S[0].size(), len[1] = S[1].size();

	for (int i = 0; i < 2; i++)
	{
		for (int j = len[i] - 1; j >= 0; j--)
			for (int k = len[i] - 1; k >= 0; k--)
			{
				if (j == k)
					continue;
				if (S[i][j] == S[i][k])
				{
					dp[j][k] = 1 + dp[j+1][k+1];
					lcp[i][j] = max(lcp[i][j], dp[j][k]);
				}
			}
		memset(dp, 0, sizeof(dp));
	}

	int best = 1<<30;
	for (int i = len[0] - 1; i >= 0; i--)
		for (int j = len[1] - 1; j >= 0; j--)
			if (S[0][i] == S[1][j])
			{
				dp[i][j] = 1 + dp[i+1][j+1];
				if (lcp[0][i] >= dp[i][j] || lcp[1][j] >= dp[i][j]) //substring appears twice
					continue;
				best = min(best, max(lcp[0][i], lcp[1][j]) + 1);
			}

	if (best == 1<<30)
		cout << "-1\n";
	else
		cout << best << "\n";

	return 0;
}