#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

const int MAXN = 5010;
const int INF = 1 << 30;

string A, B;
int MA[MAXN], MB[MAXN];

int lcp[MAXN][MAXN];

void getlcp(string& A, string& B) {
  memset(lcp, 0, sizeof(lcp));
  for (int i = (int) A.size() - 1; i >= 0; --i) {
    for (int k = (int) B.size() - 1; k >= 0; --k) {
      if (A[i] == B[k]) {
        lcp[i][k] = lcp[i + 1][k + 1] + 1;
      }
    }
  }
}

void getmin(int* ML, int len) {
  for (int i = 0; i < len; ++i) {
    int maxl = 0;
    for (int k = 0; k < len; ++k) {
      if (i != k) {
        maxl = max(maxl, lcp[i][k]);
      }
    }
    ML[i] = maxl + 1;
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);

  cin >> A >> B;

  getlcp(A, A);
  getmin(MA, (int) A.size());

  getlcp(B, B);
  getmin(MB, (int) B.size());

  getlcp(A, B);
  int ans = INF;
  for (int i = 0; i < (int) A.size(); ++i) {
    for (int k = 0; k < (int) B.size(); ++k) {
      int cand = max(MA[i], MB[k]);
      if (lcp[i][k] >= cand) {
        ans = min(ans, cand);
      }
    }
  }
  if (ans == INF) ans = -1;
  cout << ans << endl;
  return 0;
}
