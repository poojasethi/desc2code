import sys, math
def rs():
    return sys.stdin.readline().strip()
def ri():
    return int(sys.stdin.readline().strip())
def ras():
    return list(sys.stdin.readline().strip())
def rai():
    return map(int,sys.stdin.readline().strip().split())
def raf():
    return map(float,sys.stdin.readline().strip().split())




def main():
    n, k = rai()
    arr = rai()
    ar = [0]*n
    for x in xrange(n):
        ar[x] = (x, arr[x])
    ar = sorted(ar, key=lambda x: x[1])

    g = {}
    m = {}

    for x in ar:
        if x[1] in m:
            m[x[1]].append(x[0])
        else:
            m[x[1]] = [x[0]]

    seen = [k]*n
    ok = n - 1

    result = []

    def link(d, ok):
        d0 = d-1
        s = 0
        for x in m[d]:
            while seen[m[d0][s]] <=0:
                s+=1
            t = (m[d0][s] , x)
            result.append(t)
            ok -= 1
            seen[x] -= 1
            seen[m[d0][s]] -= 1
        return ok
    d = 1
    while ok > 0:
        try:
            ok = link(d, ok)
        except Exception, e:
            print -1
            return -1
        d += 1

    print len(result)
    print '\n'.join(map(lambda x: str(x[0]+1) + " " + str(x[1]+1),result))





main()
