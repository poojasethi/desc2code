def CounterClockwiseRotate(posx, posy, homex, homey):
    abx = posx - homex
    aby = posy - homey
    return -aby + homex, abx + homey

def SquareDist(a, b):
    return a**2 + b**2

def Distance(a, b):
    return SquareDist(a[0] - b[0], a[1] - b[1])

def IsSquare(a, b, c, d):
    point = [a, b, c, d]
    for i in range(4):
        for j in range(i + 1, 4):
            rest = [point[k] for k in range(4) if k != i and k!= j]
            disi = [Distance(point[i], rest[0]), Distance(point[i], rest[1])]
            disj = [Distance(point[j], rest[0]), Distance(point[j], rest[1])]
            if disi[0] == disi[1] != 0 and disj[0] == disj[1] != 0 \
                    and Distance(rest[0], rest[1]) == Distance(point[i], point[j]) != 0 \
                    and disi[0] == disj[0] != 0 and disi[1] == disj[1] != 0:
                return True
    return False

n = input()
for i in range(n):
    value = []
    for i in range(4):
        value.append(map(int, raw_input().split()))
    pos = [i[:2] for i in value]
    home = [i[2:] for i in value]
    res = 16
    for i in range(256):
        rotate = [i % 4, i / 4 % 4, i / 16 % 4, i / 64 % 4]
        rpos = pos[:]
        for j in range(4):
            for k in range(rotate[j]):
                rpos[j] = CounterClockwiseRotate(rpos[j][0], rpos[j][1], home[j][0], home[j][1])
        if IsSquare(*rpos) and res > sum(rotate):
            res = sum(rotate)
    if res == 16:
        print -1
    else:
        print res
