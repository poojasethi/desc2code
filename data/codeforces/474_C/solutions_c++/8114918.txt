#include<iostream>
using namespace std;
struct point {
	int x, y, a, b;
	void rotate() {
		int xp = a-(y-b), yp = b+(x-a);
		x = xp, y = yp;
	}
};
point p[4];
bool sq(point& p0, point& p1, point& p2, point& p3) {
	bool sq = true;
	int a[] = {p0.x-p1.x, p1.y-p2.y, p2.x-p3.x, p3.y-p0.y};
	int b[] = {p0.y-p1.y, p1.x-p2.x, p2.y-p3.y, p3.x-p0.x};
	if (a[0] != -a[2] || a[1] != -a[3] || (a[0] != a[1] && a[0] != -a[1]) || (a[0] == 0 && b[0] == 0))
		sq = false;
	if (b[0] != -b[2] || b[1] != -b[3] || (b[0] != b[1] && b[0] != -b[1]))
		sq = false;
	return sq;
}
bool square() {
	return sq(p[0],p[1],p[2],p[3]) || sq(p[0],p[1],p[3],p[2]) || sq(p[0],p[2],p[1],p[3]) || sq(p[0],p[3],p[1],p[2]);
}
void solve() {
	for (int i = 0; i < 4; i++)
		cin >> p[i].x >> p[i].y >> p[i].a >> p[i].b;
	int min = -1;
	for (int a1 = 0; a1 < 4; a1++) {
		for (int a2 = 0; a2 < 4; a2++) {
			for (int a3 = 0; a3 < 4; a3++) {
				for (int a4 = 0; a4 < 4; a4++) {
					if (square() && (min == -1 || a1+a2+a3+a4 < min))
						min = a1+a2+a3+a4;
					p[3].rotate();
				}
				p[2].rotate();
			}
			p[1].rotate();
		}
		p[0].rotate();
	}
	cout << min << endl;
}
int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		solve();
}