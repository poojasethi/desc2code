#include <iostream>
#include <algorithm>
#define INF 100000000

using namespace std;

struct point {
    long long x,y;
};

long long n;
point a[4],b[4],o[4];

void rot(long long i) {
    long long dx = b[i].x - o[i].x;
    long long dy = b[i].y - o[i].y;
    b[i].x = o[i].x - dy;
    b[i].y = o[i].y + dx;
}

long long dist2(long long i, long long j) {
    long long dx = b[i].x - b[j].x;
    long long dy = b[i].y - b[j].y;
    return dx*dx + dy*dy;
}

bool good() {
    long long s = min(dist2(0,1),dist2(0,2));
    if (s == 0) return false;
    for (long long i = 0; i < 4; i++) {
        long long c[4];
        for (long long j = 0; j < 4; j++) c[j] = dist2(i,j);
        sort(c,c+4);
        if (c[0] != 0 || c[1] != s || c[2] != s || c[3] != 2*s) return false;
    }
    return true;
}

long long dfs(long long d) {
    if (d >= 4) {
        if (good()) return 0;
        else return INF;
    }
    long long res = INF;
    b[d] = a[d];
    for (long long i = 0; i < 4; i++) {
        res = min(res,i+dfs(d+1));
        rot(d);
    }
    return res;
}

int main() {
    cin >> n;
    while (n--) {
        for (long long i = 0; i < 4; i++) {
            cin >> a[i].x >> a[i].y >> o[i].x >> o[i].y;
        }
        long long ans = dfs(0);
        cout << (ans < INF ? ans : -1) << '\n';
    }
}
