#include <bits/stdc++.h>
using namespace std;

#define LL long long
const int INF = 1e9;
int n, x[4], y[4], a[4], b[4];

LL sq(int x) { return (LL) x * x; };
LL findDist(int i, int j) { return sq( x[i] - x[j] ) + sq(y[i] - y[j]); }

void rot(int i) {

	int dx = x[i] - a[i];
	int dy = y[i] - b[i];
	swap(dx, dy);
	dx *= -1;
	x[i] = a[i] + dx;
	y[i] = b[i] + dy;
}
bool isSquare() {
	vector<LL> distances;
	for (int i = 0; i < 4; i++) for (int j = i + 1; j < 4; j++) 
		distances.push_back( findDist(i, j) );
	sort(distances.begin(), distances.end());
	return distances[0] != 0 and distances[0] == distances[3] and distances[4] == distances[5];
}
int solve() {
	int ans = INF;
	for (int i = 0; i < 4; i++, rot(0))
		for (int j = 0; j < 4; j++, rot(1))
			for (int k = 0; k < 4; k++, rot(2))
				for (int l = 0; l < 4; l++, rot(3)) {
					if (isSquare()) ans = min(ans, i + j + k + l);
				}
	if (ans == INF) return -1;
	return ans;
}
int main() {
	scanf("%d", &n);
	for ( int i = 0 ; i < n ; i++ ) {
		for (int j = 0; j < 4; j++)
			scanf("%d %d %d %d", &x[j], &y[j], &a[j], &b[j]);
		printf("%d\n", solve());
	}
	return 0;
}