#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
typedef long long LL;
struct point{
	   LL x,y;}A[10][10], B[10];
LL minn, T, i, D[20], dx[10], dy[10];
LL dis(point a, point b)
{
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
}
void dfs(LL x, LL step)
{
	if (x == 5)
	{
		LL tot=0, i, j;
		for (i=1; i<=3; i++)
   			for (j=i + 1; j<=4; j++)
				D[++tot]=dis(B[i], B[j]);
		sort(D + 1, D + 7);
		if (D[1] == 0) return;
		if (D[1] == D[2] && D[2] == D[3] && D[3] == D[4] && D[5] == 2 * D[1] && D[5] == D[6]) 
		    minn=min(minn, step);
		return;
	}
	if (step > minn) return;
	for (LL i=1; i<=4; i++)
	{
		B[x]=A[x][i];
		dfs(x + 1, step + i - 1);
	}
}
int main()
{
	scanf("%I64d", &T);
	while (T--)
	{
		for (i=1; i<=4; i++) scanf("%I64d%I64d%I64d%I64d", &A[i][1].x, &A[i][1].y, &dx[i], &dy[i]);
		for (i=1; i<=4; i++)
		{
			A[i][2].x=dx[i] - (A[i][1].y - dy[i]);
			A[i][2].y=dy[i] + (A[i][1].x - dx[i]);
			A[i][3].x=dx[i] - (A[i][1].x - dx[i]);
			A[i][3].y=dy[i] - (A[i][1].y - dy[i]);
			A[i][4].x=dx[i] + (A[i][1].y - dy[i]);
			A[i][4].y=dy[i] - (A[i][1].x - dx[i]);
		}
		minn = 999999999;
		dfs(1, 0);
		if (minn == 999999999) minn=-1;
		printf("%I64d\n", minn);
	}
	return 0;
}