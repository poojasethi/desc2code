#include <bits/stdc++.h>
using namespace std;

int n;
int x[4], y[4], a[4], b[4];
int ans;
int cnt;
pair<int, int> pts[4];
long long d[6];
int it;

inline pair<int, int> rotate(int X, int Y) {
  return make_pair(-Y, X);
}

inline long long sqr(long long x) {
  return x * x;
}

bool check() {
  it = 0;
  for (int i = 0; i < 4; ++i) {
    for (int j = i + 1; j < 4; ++j) {
      d[it++] = sqr(pts[i].first - pts[j].first) + sqr(pts[i].second - pts[j].second);
    }
  }
  stable_sort(d, d + 6);
  if (d[0] == 0)
    return false;
  return d[0] == d[3] && d[4] == d[5] && 2 * d[0] == d[5];
}

void f(int cur) {
  if (cur == 4) {
    if (check())
      ans = min(ans, cnt);
    return;
  }
  pts[cur] = make_pair(x[cur], y[cur]);
  for (int i = 0; i < 4; ++i) {
    cnt += i;
    f(cur + 1);
    cnt -= i;
    pts[cur] = rotate(pts[cur].first - a[cur], pts[cur].second - b[cur]);
    pts[cur].first += a[cur];
    pts[cur].second += b[cur];
  }
}

int solve() {
  ans = 1e9;
  cnt = 0;
  f(0);
  if (ans == 1e9)
    ans = -1;
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin >> n;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < 4; ++j) {
      cin >> x[j] >> y[j] >> a[j] >> b[j];
    }
    cout << solve() << '\n';
  }
  return 0;
}
