#include<stdio.h>
#include<algorithm>
using namespace std;
const int INF=0x7fffffff;
struct Point
{
	int x,y;
	bool operator < (const Point &yy) const { return x!=yy.x?x<yy.x:y<yy.y; }
}p[4],ph[4];
int T,ans;
int Dis(Point a,Point b) { return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y); }
void dfs(int cur,int s0)
{
	int i,j;
	if(cur==4) 
	{
		Point pp[4];
		int a;
		for(i=0;i<4;i++)
			pp[i]=p[i];
		sort(pp,pp+4);
		a=Dis(pp[0],pp[1]);
		if(!a) return ;
		if(Dis(pp[0],pp[1])!=a||Dis(pp[0],pp[2])!=a||Dis(pp[1],pp[3])!=a||Dis(pp[2],pp[3])!=a) return ;
		if(Dis(pp[0],pp[3])!=a*2||Dis(pp[1],pp[2])!=a*2) return ;
		ans=min(ans,s0);
		return ;
	}
	for(i=0;i<4;i++)
	{
		Point p0;
		dfs(cur+1,s0+i);
		p0.x=ph[cur].x-(p[cur].y-ph[cur].y);
		p0.y=ph[cur].y+(p[cur].x-ph[cur].x);
		p[cur]=p0;
	}
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("data.in","r",stdin);
#endif
	int i,j;
	scanf("%d",&T);
	while(T--)
	{
		ans=INF;
		for(i=0;i<4;i++)
			scanf("%d%d%d%d",&p[i].x,&p[i].y,&ph[i].x,&ph[i].y);
		dfs(0,0);
		printf("%d\n",ans==INF?-1:ans);
	}
	return 0;
}
