#include <iostream>
#include <algorithm>
#include <vector>
#define point pair<long long, long long>
#define x first
#define y second
using namespace std;
point p[4], h[4], x[4];
long long dist(point a, point b)
{
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
}
vector<long long> d;
bool square()
{
	d.clear();
	for (int i = 0; i < 4; i++)
		for (int j = i + 1; j < 4; j++)
			d.push_back(dist(x[i], x[j]));
	sort(d.begin(), d.end());
	return (d[0] == d[3] && d[4] == d[5] && d[0] != 0);
}
point rot(point a, point b)
{
	return point(b.x + b.y - a.y, b.y + a.x - b.x);
}
int cnt[4];
bool check()
{
	for (int i = 0; i < 4; i++)
	{
		x[i] = p[i];
		for (int j = 0; j < cnt[i]; j++)
			x[i] = rot(x[i], h[i]);
	}
	return square();
}
int main()
{
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	while (n--)
	{
		for (int i = 0; i < 4; i++)
			cin >> p[i].x >> p[i].y >> h[i].x >> h[i].y;
		int ans = 100;
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				for (int k = 0; k < 4; k++)
					for (int l = 0; l < 4; l++)
					{
						cnt[0] = i;
						cnt[1] = j;
						cnt[2] = k;
						cnt[3] = l;
						if (check())
							ans = min(ans, i + j + k + l);
					}
		if (ans == 100)
			ans = -1;
		cout << ans << endl;
	}
	return 0;
}
