#include<iostream>
#include<cstdio>
#define maxn 100000
#define max(a,b) (a>b?a:b)
using namespace std;
typedef long long LL;
struct EDGE{int u,v,next;};
struct Tree{
	EDGE edge[2*maxn+10];
	int head[maxn+10],pp;
	void adde(int u,int v){
		edge[++pp]=(EDGE){u,v,head[u]};
		head[u]=pp;
	}
	int fa[maxn+10],son[maxn+10],bro[maxn+10],sta[maxn+10],top;
	LL n,sz[maxn+10],s[maxn+10],sum,ms;
	void dfs(int u){
		sta[++top]=u;
		sz[u]=1;
		for(int i=head[u];i;i=edge[i].next){
			int v=edge[i].v;
			if(v!=fa[u]){
				fa[v]=u;
				bro[v]=son[u];
				son[u]=v;
				dfs(v);
				sz[u]+=sz[v];
				s[u]+=s[v]+sz[v];
			}
		}
	}
	void init(){
		int a,b;
		for(int i=1;i<n;i++){
			scanf("%d%d",&a,&b);
			adde(a,b);
			adde(b,a);
		}
		dfs(1);
		sum=ms=s[1];
		for(int i=2;i<=n;i++){
			int u=sta[i];
			s[u]=s[fa[u]]+n-2*sz[u];
			ms=max(ms,s[u]);
			sum+=s[u];
		}
		sum/=2;
	}
	int b[maxn+10];
	LL f[maxn+10],g[maxn+10],d[maxn+10];
	void dp(LL t1,LL t2){
		for(int i=n;i;i--){
			int u=sta[i];
			f[u]=t1*s[u];
			int mv=0,pv=0;
			for(int v=son[u];v;v=bro[v]){
				if(f[v]+t2>f[u]){
					f[u]=f[v]+t2;
					pv=mv;
					mv=v;
				}else if(f[v]>f[pv])pv=v;
			}
			for(int v=son[u];v;v=bro[v])if(v==mv)b[v]=pv;
			else b[v]=mv;
		}
		f[0]=g[0]=-(1ll<<60);
		for(int i=1;i<=n;i++){
			int u=sta[i];
			g[u]=max(s[u]*t1,max(f[b[u]]+2*t2,g[fa[u]]+t2));
			d[u]=max(g[u],f[u]);
		}
	}
}T[3];
LL solve(Tree &t1,Tree &t2,Tree &t3){
	LL ret=(t1.ms+t1.n)*(t3.n+t2.n)+(t3.ms+t3.n)*(t1.n+t2.n);
	t2.dp(t3.n,t1.n*t3.n);
	LL m=0;
	for(int i=1;i<=t2.n;i++)m=max(m,t1.n*t2.s[i]+t2.d[i]);
	return ret+m;
}
int main(){
	for(int i=0;i<3;i++)cin>>T[i].n;
	for(int i=0;i<3;i++)T[i].init();
	LL ans=0;
	for(int i=0;i<3;i++)ans=max(ans,solve(T[i],T[(i+1)%3],T[(i+2)%3]));
	for(int i=0;i<3;i++)ans+=T[i].sum;
	cout<<ans<<endl;
	return 0;
}
