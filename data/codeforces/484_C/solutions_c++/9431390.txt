#include <bits/stdc++.h>

using namespace std;

const int MAXN = 1e6+123;

char init[MAXN],tmp[MAXN];
int N,M,dad[MAXN][30],len[MAXN],used[MAXN];

void build(int a,int b){
	int cnt=-1;
	for(int i=1;i<=b;i++)
		for(int j=i;j<=a;j+=b)
			dad[j][0]=++cnt;
	for(int i=a+1;i<=M;i++)
		dad[i][0]=i-1;
	for(int i=1;i<=25;i++)
		for(int j=1;j<=M;j++)
			dad[j][i]=dad[dad[j][i-1]][i-1];
}

int find(int start,int step){
	for(int i=23;i>=0;i--)
		if(step >= (1<<i)){
			start=dad[start][i];
			step-=(1<<i);
		}
	return start;
}

int dfs(int node){
	if(!node) return 1;
	if(used[node] && !len[node]) return -1;
	if(used[node]) return len[node]+1;
	used[node]=1;
	len[node]=dfs(dad[node][0]);
	return ( (len[node]!=-1) ? (len[node]+1) : (-1) );
}

int main(){
	
	scanf(" %s",init+1);
	scanf(" %d",&N);
	M=strlen(init+1);
	for(int i=1,a,b;i<=N;i++){
		scanf(" %d %d",&a,&b);
		for(int j=1;j<=M;j++)
			used[j]=len[j]=0;
		build(a,b);
		for(int j=1;j<=M;j++)
			if(!used[j])
				dfs(j);
		for(int j=1;j<=M;j++){
			if(len[j]!=-1 && len[j]<=M-a+1)
				tmp[len[j]]=init[j];
			else
				tmp[find(j,M-a+1)+(M-a+1)]=init[j];
		}
		for(int j=1;j<=M;j++)
			init[j]=tmp[j];
		printf("%s\n",init+1);
	}
	
	return 0;
}
