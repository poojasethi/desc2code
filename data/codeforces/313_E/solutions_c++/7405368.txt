#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;

multiset<int> Set[2];
int n,m;

int search(int t,int v) {
  __typeof(Set[t].begin()) it = Set[t].upper_bound(v);
  if (it == Set[t].begin()) return search(t,m-1);
  it --;
  return *it;
}

int main() {
  scanf("%d%d",&n,&m);
  for (int i = 0; i < 2; ++ i) {
    for (int j = 0; j < n; ++ j) {
      int x;
      scanf("%d",&x);
      Set[i].insert(x);
    }
  }
  vector<int> ans;
  for (int i = 0; i < n; ++ i) {
    int a,b;
    a = search(0,m-1);
    b = search(1,m-1-a);
    a = search(0,m-1-b);
    ans.push_back((a+b)%m);
    Set[0].erase(Set[0].find(a));
    Set[1].erase(Set[1].find(b));
  }
  sort(ans.begin(),ans.end(),greater<int>());
  for (int i = 0; i < n; ++ i) {
    printf("%d%c",ans[i]," \n"[i==n-1]);
  }
  return 0;
}
