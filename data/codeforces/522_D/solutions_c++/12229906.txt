#include <bits/stdc++.h>

using namespace std;
const int N = 500005;

int n, m, a[N], L[N], ans[N], tree[N << 2];
vector<int> Q[N];
map<int, int> last;

void update(int i, int x) {
	i += N;
	for (tree[i] = min(tree[i], x); i > 0; i >>= 1)
		tree[i >> 1] = min(tree[i], tree[i ^ 1]);
}

int query(int a, int b) {
	int mn = INT_MAX;
	for (a += N, b += N + 1; a < b; a >>= 1, b >>= 1) {
		if (a & 1) mn = min(mn, tree[a++]);
		if (b & 1) mn = min(mn, tree[--b]);
	}
	return mn;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; ++i)
		cin >> a[i];
	for (int i = 0; i < m; ++i) {
		int R;
		cin >> L[i] >> R;
		Q[R].push_back(i);
	}
	fill(tree, tree + (N << 2), INT_MAX);
	for (int i = 1; i <= n; ++i) {
		int l = last[a[i]];
		update(l, i - l);
		for (int j = 0; j < Q[i].size(); ++j)
			ans[Q[i][j]] = query(L[Q[i][j]], i);
		last[a[i]] = i;
	}
	for (int i = 0; i < m; ++i)
		cout << (ans[i] == INT_MAX ? -1 : ans[i]) << '\n';
	cout << flush;
}