#include <iostream>
#include <map>
#include <algorithm>
using namespace std;
map<int ,int > mp;
const int max_n = 500010;
int a[max_n];
int l[max_n],r[max_n],ans[max_n],per[max_n];
int tree[4*max_n];
const int inf = 5630010;
void add(int node,int a,int b,int i,int j,int val)
{
	if(a>=b||a>=j||b<=i)
		return;
	if(a>=i&&b<=j)
	{
		tree[node] = val;
		return;
	}
	int mid = (a+b)/2;
	add(2*node,a,mid,i,j,val);
	add(2*node+1,mid,b,i,j,val);
	tree[node] = min(tree[2*node],tree[2*node+1]);
}
int get(int node,int a,int b,int i,int j)
{
	if(a>=b||a>=j||b<=i)
		return inf;
	if(a>=i&&b<=j)
		return tree[node];
	int mid = (a+b)/2;
	return min(get(2*node,a,mid,i,j),get(2*node+1,mid,b,i,j));
}
bool cmp(const int &A,const int &B)
{
	if(r[A]!=r[B])
		return r[A]<r[B];
	return l[A]<l[B];
}
int main()
{
	ios_base::sync_with_stdio(false);
	int n,m;
	cin>>n>>m;
	for(int i=1;i<=n;i++)
		cin>>a[i];
	for(int i=1;i<=m;i++)
	{
		cin>>l[i]>>r[i];
		per[i] = i;
	}
	fill(tree,tree+4*max_n,inf);
	sort(per+1,per+m+1,cmp);
	for(int i = 1;i<=m;i++)
	{
		int pos = per[i];
		for(int j = r[per[i-1]]+1;j<=r[pos];j++)
		{
			if(mp[a[j]])
				add(1,1,n+1,mp[a[j]],mp[a[j]]+1,j - mp[a[j]]);
			mp[a[j]] = j;
		}
		ans[pos] = get(1,1,n+1,l[pos],r[pos]+1);
	}
	for(int i=1;i<=m;i++)
		cout<< (ans[i]!=inf ? ans[i] : -1) <<"\n";
	return 0;
}
