#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <cstdio>
using namespace std;
int N, M;
int a[500003];
struct Seg{
	int l;
	int r;
} seg[500003];

int cmp(int a, int b){
	if(seg[a].r == seg[b].r)
		if(seg[a].l == seg[b].l)
			return a<b;
		else
			return seg[a].l < seg[b].l;
	return seg[a].r < seg[b].r;
}

int tmp[500003];
int res[500003];

int priq[500003];
int priq_len[500003];

int main(){
	cin>>N>>M;
	for(int i=0; i<N; ++i){
		//cin>>a[i];
		scanf("%d", a+i);
	}
	for(int i=0; i<M; ++i){
		//cin>>seg[i].l>>seg[i].r;
		scanf("%d%d", &seg[i].l, &seg[i].r);
		--seg[i].l;
		--seg[i].r;
	}
	for(int i=0;i<M;++i)
		tmp[i]=i;
	std::sort(tmp, tmp+M, cmp);
	//for(int i=0;i <M; ++i)
		//cout<<tmp[i]<<' ';
	//cout<<endl;

	int l=0;
	int cnt=0;
	int k=0;
	map<int, int> m;
	for(int r=0; r<N; ++r){
		if(m.count(a[r])){
			int len = r - m[a[r]];
			while(priq_len[cnt-1] >= len){
				--cnt;
			}
			if( m[ a[r] ] < priq[cnt-1])
				;
			else{
				priq_len[cnt] = len;
				priq[cnt] = m [ a[r]];
				++cnt;
			}
		}
		m[ a[r] ] = r;
		while(seg[tmp[k]].r <= r && k<M){
			//for(int i=0;i<cnt;++i)
				//cout<<priq[i]<<' ';
			//cout<<endl;
			int pl = lower_bound(priq, priq+cnt, seg[tmp[k]].l) - priq;
			if(pl == cnt)
				res[tmp[k]]=-1;
			else
				res[tmp[k]] = priq_len[pl];
			++k;
		}
	}
	for(int i=0; i<M; ++i)
		printf("%d\n", res[i]);

	return 0;
}

