#include <bits/stdc++.h>

using namespace std;

map <int, int> ma;
int n, m;
int t[1000002];
vector <pair<int, int> > ke[1000002];
int a[1000002];
int ans[1000002];

struct BITTree
{
    int tree[1020000];
    void update(int x, int y)
    {
        while (x)
        {
            tree[x] = min(tree[x], y);
            x -= x & (-x);
        }
    }
    int get(int x)
    {
        int res = n+1;
        while (x <= n)
        {
            res = min(res, tree[x]);
            x += x& (-x);
        }
        return res;
    }
};

BITTree Bittree;

int main()
{
    ios_base::sync_with_stdio(false);
    //freopen("VKCUPD.INP","r",stdin);
    //freopen("VKCUP.OUT","w",stdout);
    cin >> n >> m;
    for(int i = 1; i <= n; i++)
    {
        cin >> a[i];
        t[i] = ma[a[i]];
        ma[a[i]] = i;
    }
    int u, v;
    for(int i = 1; i <= m; i++)
    {
        cin >> u >> v;
        ke[v].push_back(make_pair(u, i));
    }
    for(int i = 1; i <= n; i++) Bittree.tree[i] = n + 1;
    for(int i = 1; i <= n; i++)
    {
        Bittree.update(t[i], i - t[i]);
        for(int j = 0; j < ke[i].size(); j++)
        {
            int v = ke[i][j].first;
            int l = ke[i][j].second;
            int vv = Bittree.get(v);
            ans[l] = (vv == n+1) ? -1 : vv;
        }
    }
    for(int i = 1; i <= m; i++)
        cout << ans[i] <<endl;
    return 0;
}
