#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#define pi pair<int, int>
#define mp make_pair
#define N 600000
#define inf 1000000000
using namespace std;
int n, m, l, r;
int a[N], BIT[N];
map<int, int> pre;
vector<pi> seg;
vector<pair<pi, int> > query;
int ans[N]; 
int lowbit (int bit) {
	return  bit & (bit ^ (bit - 1));
}
void update (int pos, int val) {
	while (pos <= n) {
		BIT[pos] = min(BIT[pos], val);
		pos += lowbit(pos);
	}
}
int find (int pos) {
	int res = inf;
	while (pos > 0) {
		res = min(res, BIT[pos]);
		pos -= lowbit(pos);
	}
	return res;
}
int main() {
	while (cin>>n>>m) {
		for (int i = 1; i <= n; ++i) {
			scanf("%d", a + i);
			if (pre.find(a[i]) != pre.end()) {
				seg.push_back(mp(pre[a[i]], i));
			}
			pre[a[i]] = i;
			BIT[i] = inf;
		}
		sort(seg.begin(), seg.end());
		for (int i = 0; i < m; ++i) {
			scanf("%d%d", &l, &r);
			query.push_back(mp(mp(l, r), i));
		}
		sort(query.begin(), query.end());
		int j = seg.size() - 1;
		for (int i = m - 1; i >= 0; --i) {
         //   cout<<i<<endl;
			l = query[i].first.first;
			r = query[i].first.second;
			while (j >= 0 && seg[j].first >= l) {
				update(seg[j].second, seg[j].second - seg[j].first);
				j--;
			}
			int res = find(r);
		//	cout<<i<<" "<<res<<endl;
			ans[query[i].second] = (res == inf ? -1 : res);
		}
		for (int i = 0; i < m; ++i) {
			cout<<ans[i]<<endl;
		}
	}
	return 0;
}

   				  	 	  		 	 			 	 					