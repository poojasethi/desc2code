#include<bits/stdc++.h>
using namespace std;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
int n,p,a[500005],b[500005],pre[500005],sum[500005<<2],ans[500005];
struct node{
	int l,r,id;
}q[500005];

bool cmp(node a,node b){
	return a.r<b.r;
}

void pushup(int rt){
	sum[rt]=min(sum[rt<<1],sum[rt<<1|1]);
}

void build(int l,int r,int rt){
	sum[rt]=n;
	if(l==r) return;
	int m=l+r>>1;
	build(lson);
	build(rson);
}

void update(int pos,int val,int l,int r,int rt){
	if(l==r){
		sum[rt]=min(sum[rt],val);
		return;
	}
	int m=l+r>>1;
	if(pos<=m) update(pos,val,lson);
	else update(pos,val,rson);
	pushup(rt);
}

int query(int L,int R,int l,int r,int rt){
	if(L<=l && r<=R) return sum[rt];
	int m=l+r>>1,ans1=n,ans2=n;
	if(L<=m) ans1=query(L,R,lson);
	if(R>m) ans2=query(L,R,rson);
	return min(ans1,ans2);
}

int main(void){
	int i,j;
	while(~scanf("%d%d",&n,&p)){
		for(i=1;i<=n;i++) scanf("%d",&a[i]),b[i]=a[i];
		for(i=1;i<=p;i++) scanf("%d%d",&q[i].l,&q[i].r),q[i].id=i;
		sort(b+1,b+1+n);
		sort(q+1,q+1+p,cmp);
		int cnt=unique(b+1,b+1+n)-b-1;
		for(i=1;i<=n;i++) a[i]=lower_bound(b+1,b+cnt+1,a[i])-b;
		build(1,n,1);
		memset(pre,-1,sizeof(pre));
		for(i=1,j=1;i<=n && j<=p;i++){
			if(~pre[a[i]]) update(pre[a[i]],i-pre[a[i]],1,n,1);
			pre[a[i]]=i;
			while(j<=p && q[j].r==i){
				ans[q[j].id]=query(q[j].l,q[j].r,1,n,1);
				j++;
			}
		}
		for(i=1;i<=p;i++) printf("%d\n",ans[i]==n?-1:ans[i]);
	}
	return 0;
} 

