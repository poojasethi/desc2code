#include <cstdio>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

const int MAXN = 500100;

struct fenwick {
	int p[MAXN];
	
	void init() {
		for (int i = 0;i < MAXN; i++)
			p[i] = (1 << 30);
	}
	
	void update(int x,int y) {
		for (; x < MAXN; x += x &- x)
			p[x] = min(p[x],y);
	}
	
	int get(int x) {
		int ret = (1 << 30);
		for (; x > 0; x -= x &- x) 
			ret = min(ret, p[x]);
		return ret;
	}
}loga;

int n,a,b,p[MAXN],m,sol[MAXN];

vector <pair<int,int> > v[MAXN];
map <int, int> mp;

int main() {
	loga.init();
	scanf("%d %d",&n,&m);
	for (int i = 0;i < n; i++)
		scanf("%d",p + i);
		
	for (int i = 0; i < m; i++) {
		scanf("%d %d",&a,&b);
		v[a - 1].push_back(make_pair(b,i));
	}
	
	for (int i = n - 1; i >= 0; i--) {
		if (mp.find(p[i]) != mp.end()) {
			loga.update(mp[p[i]], mp[p[i]] - i - 1);
			//printf("update %d %d\n",mp[p[i]],mp[p[i]] - i - 1);
		}
		mp[p[i]] = i + 1;
		for (int j = 0;j < (int)v[i].size(); j++) {
			//printf("get %d %d %d\n",v[i][j].second,v[i][j].first,loga.get(v[i][j].first));
			sol[v[i][j].second] = loga.get(v[i][j].first);
			if (sol[v[i][j].second] == (1 << 30)) sol[v[i][j].second] = -1;
		}
	}
	
	for (int i = 0;i < m; i++)
		printf("%d\n",sol[i]);
	
	return 0;
}
