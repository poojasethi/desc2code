#include <cstdio>
#include <iostream>
#include <map>
#define N 500050
using namespace std;
map <int,int> hash;
int n,m,last[N],key[N];
int tot,root[N],v[N*40],ls[N*40],rs[N*40];
void build(int &x,int l,int r){
	x=++tot;
	if(l==r){
		if(last[l])v[x]=l-last[l];
		else v[x]=N;
		return;
	}
	int mid=(l+r)>>1;
	build(ls[x],l,mid);
	build(rs[x],mid+1,r);
	v[x]=min(v[ls[x]],v[rs[x]]);
}
void update(int &x,int y,int l,int r,int pos){
	ls[x=++tot]=ls[y],rs[x]=rs[y];
	if(l==r){v[x]=N;return;}
	int mid=(l+r)>>1;
	if(pos<=mid)update(ls[x],ls[y],l,mid,pos);
	else update(rs[x],rs[y],mid+1,r,pos);
	v[x]=min(v[ls[x]],v[rs[x]]);
}
int query(int x,int l,int r,int L,int R){
	if(L<=l && r<=R)return v[x];
	int res=N,mid=(l+r)>>1;
	if(L<=mid)res=min(res,query(ls[x],l,mid,L,R));
	if(R>mid)res=min(res,query(rs[x],mid+1,r,L,R));
	return res;
}
int main(){
	scanf("%d%d",&n,&m);
	for(int i=1,a;i<=n;++i){
		scanf("%d",&a);
		key[last[i]=hash[a]]=hash[a]=i;
	}
	build(root[1],1,n);
	for(int i=2;i<=n;++i)
	    update(root[i],root[i-1],1,n,key[i-1]);
	for(int i=1,l,r;i<=m;++i){
		scanf("%d%d",&l,&r);
		int ans=query(root[l],1,n,l,r);
		ans<N ? printf("%d\n",ans):printf("-1\n"); 
	}
}
