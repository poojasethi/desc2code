#include <bits/stdc++.h>
using namespace std;
const int maxn = 5e5+1;
struct Query {
    int l, r, i;
    bool operator<(const Query &a) const {
        return r<a.r;
    }
}q[maxn];
int n, m, a[maxn], b[maxn], c[maxn], ans[maxn], last[maxn];
inline int lowbit(int x) {
    return x&-x;
}
inline void update(int x, int v) {
    for (; x>0; x-=lowbit(x)) {
        c[x] = min(c[x], v);
    }
}
inline int query(int x) {
    int ret = n;
    for (; x<=n; x+=lowbit(x)) {
        ret = min(ret, c[x]);
    }
    return ret;
}
int main()
{
    scanf ("%d%d", &n, &m);
    for (int i=1; i<=n; ++i) {
        scanf ("%d", &a[i]);
        b[i] = a[i];
    }
    sort(b+1, b+n+1);
    int nn = unique(b+1, b+n+1)-b-1;
    for (int i=1; i<=n; ++i) {
        a[i] = lower_bound(b+1, b+nn+1, a[i])-b;
    }
    for (int i=1; i<=m; ++i) {
        scanf ("%d%d", &q[i].l, &q[i].r);
        q[i].i = i;
    }
    sort(q+1, q+m+1);
    for (int i=1; i<=n; ++i) {
        c[i] = n;
    }
    for (int i=1,j=1; i<=n && j<=m; ++i) {
        if (last[a[i]]!=0) {
            update(last[a[i]], i-last[a[i]]);
        }
        last[a[i]] = i;
        while (j<=m && q[j].r==i) {
            ans[q[j].i] = query(q[j].l);
            ++j;
        }
    }
    for (int i=1; i<=m; ++i) {
        if (ans[i]==n) {
            ans[i] = -1;
        } else {
            ans[i] = ans[i];
        }
        printf ("%d\n", ans[i]);
    }
    return 0;
}
