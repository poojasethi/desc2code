#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#define end _end

typedef long long ll;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 5e5 + 5;
const int K = 707;

int n, q, beg[N], end[N];
ll a[N], add[N];
pair < ll, int > v[N];

void update(int x, int l, int r, int k) {

	if(r < beg[x] or end[x] < l)
		return;

	if(l <= beg[x] and end[x] <= r) {
		add[x] += k;
		return;
	}

	l = max(l, beg[x]);
	r = min(r, end[x]);

	for(int i = beg[x]; i <= end[x]; i++)
		if(i < l or i > r) {
			a[i] += add[x];
			v[i] = make_pair(a[i], i);
		}

	for(int i = l; i <= r; i++) {
		a[i] += add[x] + k;
		v[i] = make_pair(a[i], i);
	}

	add[x] = 0;

	sort(v + beg[x], v + end[x] + 1);

}

int main() {

	ios :: sync_with_stdio(0);

	cin >> n >> q;

	for(int i = 1; i <= n; i++)
		cin >> a[i];

	for(int i = 1; (i - 1) * K + 1 <= n; i++) {
		beg[i] = (i - 1) * K + 1;
		end[i] = min(n, i * K);
		for(int j = beg[i]; j <= end[i]; j++)
			v[j] = make_pair(a[j], j);
		sort(v + beg[i], v + end[i] + 1);
	}

	for(int i = 1; i <= q; i++) {
		int type;
		cin >> type;
		if(type == 1) {
			int x, y, k;
			cin >> x >> y >> k;
			for(int i = 1; (i - 1) * K + 1 <= n; i++)
				update(i, x, y, k);
		}
		else {
			int x;
			cin >> x;
			int l = -1, r = -1;
			for(int i = 1; (i - 1) * K + 1 <= n; i++) {
				ll k = x - add[i];
				if(l == -1) {
					int ind = lower_bound(v + beg[i], v + end[i] + 1, make_pair(k, 0)) - v;
					if(ind <= end[i] and v[ind].first == k)
						l = v[ind].second;
				}
				int ind = lower_bound(v + beg[i], v + end[i] + 1, make_pair(k + 1, 0)) - v - 1;
				if(ind >= beg[i] and v[ind].first == k)
					r = v[ind].second;
			}
			if(l != -1)
				cout << r - l << endl;
			else
				cout << -1 << endl;
		}
	}

	return 0;

}
