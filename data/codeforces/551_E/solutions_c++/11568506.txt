#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<algorithm>
using namespace std;
typedef long long LL;
typedef pair<LL,int> pli;
typedef vector<pli>::iterator vpi;
const int MAXS=1000;
vector<pli> seq[MAXS];
int n,m,len,q;
LL delta[MAXS];
bool cmp(pli a,pli b){return a.first<b.first;}
inline void update(int o,int l,int r,int k)
{
    if(l<=o*len&&(o+1)*len-1<=r)delta[o]+=k;
    else
    {
        for(vpi i=seq[o].begin();i!=seq[o].end();i++)
        {
            if(l<=i->second&&i->second<=r)i->first+=k;
            i->first+=delta[o];
        }
        delta[o]=0;
        sort(seq[o].begin(),seq[o].end());
    }
}
inline int query(int x)
{
    int l=n,r=-1;
    for(int o=0;o<m;o++)
    {
        pair<vpi,vpi> temp=equal_range(seq[o].begin(),seq[o].end(),pli(x-delta[o],-1),cmp);
        if(temp.first!=temp.second)l=min(l,temp.first->second),r=max(r,(temp.second-1)->second);
    }
    return r-l>=0?r-l:-1;
}
inline void init()
{
    scanf("%d%d",&n,&q);
    len=sqrt(n+0.5);
    for(int i=0;i<n;i++)
    {
        int a;
        scanf("%d",&a);
        seq[i/len].push_back(pli(a,i));
    }
    m=(n-1)/len+1;
    for(int o=0;o<m;o++)sort(seq[o].begin(),seq[o].end());
}
int main(void)
{
    init();
    int opt,l,r,x;
    while(q--)
    {
        scanf("%d",&opt);
        if(opt==1)
        {
            scanf("%d%d%d",&l,&r,&x);
            l--,r--;
            int st=l/len,ed=r/len;
            for(int i=st;i<=ed;i++)update(i,l,r,x);
        }
        else
        {
            scanf("%d",&x);
            printf("%d\n",query(x));
        }
    }
    return 0;
}
