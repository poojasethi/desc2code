#include <iostream>
#include <set>

using namespace std;


const int BOXSIZE = 800;
const int MAXN = 500010;
const int MAXB = MAXN / BOXSIZE + 10;

typedef multiset<long long>::iterator sit;

multiset<long long> s[MAXB];
long long a[MAXN];
long long add[MAXB];

int main()
{	
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	int n, q;
	cin >> n >> q;
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		s[i / BOXSIZE].insert(a[i]);
	}
	for (int i = 0; i < q; i++)
	{
		int t;
		cin >> t;
		if (t == 1)
		{
			int l, r, x;
			cin >> l >> r >> x;
			l--;
			int bl = l / BOXSIZE;
			int br = r / BOXSIZE;
			if (bl == br)
			{
				for (; l < r; l++)
				{
					s[bl].erase(s[bl].lower_bound(a[l]));
					a[l] += x;
					s[bl].insert(a[l]);
				}
			}
			else
			{
				bl++;
				for (; l < bl * BOXSIZE; l++)
				{
					s[bl - 1].erase(s[bl - 1].lower_bound(a[l]));
					a[l] += x;
					s[bl - 1].insert(a[l]);
				}
				for (r--; r >= br * BOXSIZE; r--)
				{
					s[br].erase(s[br].lower_bound(a[r]));
					a[r] += x;
					s[br].insert(a[r]);
				}
				for (int k = bl; k < br; k++)
					add[k] += x;
			}	
		}
		else
		{
			int x;
			cin >> x;
			int last_box = (n + BOXSIZE - 1) / BOXSIZE;
			int l = -1, r = -1;
			for (int i = 0; i < last_box; i++)
			{	
				sit it = s[i].lower_bound(x - add[i]);
				if (it != s[i].end() && *it == x - add[i])
				{
					for (l = i * BOXSIZE; a[l] != x - add[i]; l++);
					break;
				}
			}
			for (int i = last_box - 1; i >= 0; i--)
			{
				sit it = s[i].lower_bound(x - add[i]);
				if (it != s[i].end() && *it == x - add[i])
				{
					for (r = i * BOXSIZE + BOXSIZE - 1; a[r] != x - add[i]; r--);
					break;
				}
			}
			if (l == -1)
				cout << -1 << "\n";
			else
				cout << r - l << "\n";
		}
	}
}
