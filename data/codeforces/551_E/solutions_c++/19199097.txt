#include <bits/stdc++.h>

using namespace std;

#define x first
#define y second

typedef long long ll;

const int maxn = 1010;

int n, m, b, op, l, r;
ll a[maxn*maxn], lay[maxn], x;
pair <ll, int> Blk[maxn][maxn];
int bel[maxn*maxn], sz[maxn], s[maxn], t[maxn];

void modify1(int c, ll x) {
	lay[c] += x;
}

void modify2(int c, int l, int r, ll x) {
	if(l == s[c] && r == t[c]) return modify1(c, x);
	for(int j = 1; j <= sz[c]; j ++) {
		if(l <= Blk[c][j].y && Blk[c][j].y <= r) {
			Blk[c][j].x += x;
		}
	}
	sort(Blk[c]+1, Blk[c]+sz[c]+1);
}

int main() {
	scanf("%d%d", &n, &m);
	b = ceil(sqrt(n));
	for(int i = 1; i <= n; i ++) {
		cin >> a[i];
		bel[i] = i / b + 1;
		sz[bel[i]] ++;
	}
	b = bel[n];
	for(int i = 1, c = 0; i <= b; i ++) {
		for(int j = 1; j <= sz[i]; j ++) {
			Blk[i][j] = make_pair(a[c+j], c+j);
		}
		s[i] = c+1, t[i] = c+sz[i];
		sort(Blk[i]+1, Blk[i]+sz[i]+1);
		c += sz[i];
	}
	
	while(m --) {
		cin >> op;
		if(op == 1) {
			cin >> l >> r >> x;
			if(bel[l] == bel[r]) {
				modify2(bel[l], l, r, x);
			} else {
				for(int c = bel[l]+1; c <= bel[r]-1; c ++) {
					modify1(c, x);
				}
				modify2(bel[l], l, t[bel[l]], x);
				modify2(bel[r], s[bel[r]], r, x);
			}
		} else {
			cin >> x;
			int fst = 0, lst = -1;
			for(int i = 1; i <= b && !fst; i ++) {
				int p = lower_bound(Blk[i]+1, Blk[i]+sz[i]+1, make_pair(x-lay[i], 0)) - (Blk[i]);
				if(1 <= p && p <= sz[i] && Blk[i][p].x + lay[i] == x) {
					fst = Blk[i][p].y;
				}
			}
			for(int i = b; i >= 1 && !~lst; i --) {
				int p = lower_bound(Blk[i]+1, Blk[i]+sz[i]+1, make_pair(x-lay[i], maxn*maxn)) - (Blk[i]+1);
				if(1 <= p && p <= sz[i] && Blk[i][p].x + lay[i] == x) {
					lst = Blk[i][p].y;
				}
			}
			cout << lst - fst << endl;
		}
	}
	return 0;
}
