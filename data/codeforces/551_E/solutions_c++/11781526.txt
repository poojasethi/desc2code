// In the name of Allah

#include <bits/stdc++.h>
using namespace std;

#define dbg(x) cerr << #x << " = " << (x) << endl;
#define FOR(i,a,b) for (int i = (a); i < (b); i ++)
#define rep(i,n) for (int i = 0; i < (n); i ++)
#define repd(i,n) for (int i = (n); i >= 0; i --)
#define PI 3.14159265358979323846
#define pb push_back
#define mp make_pair
#define X first
#define Y second

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;

const int max_n = 500*1000, max_sq = 1000;
ll a [max_n];
ll shift [max_sq];
multiset <ll> S[max_sq];

int main()
{
	int n, q;
	scanf ("%d%d", &n, &q);
	const int sq = sqrt (n);
	rep (i, n)
	{
		int x;
		scanf ("%d", &x);
		a[i] = x;
		S[i/sq].insert (a[i]);
	}	
	
	memset (shift, 0, sizeof shift);
	while ( q-- )
	{
		int k;
		scanf ("%d", &k);
		if ( k == 1 )
		{
			int l, r, x;
			scanf ("%d%d%d", &l, &r, &x);
			l --, r --;
			for (int i = l; i <= r; i = (i/sq+1)*sq)
				if ( i%sq == 0 && i+sq-1 <= r )
					shift [i/sq] += x;
				else
					for (int j = i; j <= r && j < (i/sq+1)*sq; j ++)
					{
						S[i/sq].erase (S[i/sq].find(a[j]));
						S[i/sq].insert (a[j]+x);
						a[j] += x;
					}
		}
		else
		{
			int y;
			scanf ("%d", &y);
			int l = n+1, r = n;
			for (int i = 0; i*sq < n && l == n+1; i ++)
				if ( S[i].count (y-shift[i]) )
					for (int j = i*sq; j < (i+1)*sq; j ++)
						if ( a[j] == y-shift[i] )
						{
							l = j;
							break;
						}
			for (int i = (n-1)/sq; i >= 0 && r == n; i --)
				if ( S[i].count (y-shift[i]) )
					for (int j = min ((i+1)*sq, n)-1; j >= i*sq; j --)
						if ( a[j] == y-shift[i] )
						{
							r = j;
							break;
						}
			printf ("%d\n", r-l);
		}
	}
	
	return 0;
}
