#include <bits/stdc++.h>
using namespace std;
const int maxn = 500005;
long long a[maxn], extra[maxn];
int l[maxn], r[maxn];
pair <long long, int> b[maxn];

void Rebuild(int i) {
	for(int j = l[i]; j <= r[i]; j++) {
		b[j] = make_pair(a[j], j);
	}
	sort(b + l[i], b + r[i] + 1);
}

int FastScan() {
	int ret = 0;
	char c;
	while(!isdigit(c = getchar()));
	do {
		ret = ret * 10 + (c - '0');
	} while(isdigit(c = getchar()));
	return ret;
}
int main() {

	int n, q, x, y, t;
	long long z;
	n = FastScan();
	q = FastScan();
	int idx = 0, cnt = 0, size = (int)sqrt(n);
	bool flag = 0;
	for(int i = 0; i < n; i++) {
		if(flag == 0) {
			l[idx] = i;
			flag = 1;
		} 
		r[idx] = i;
		if(++cnt == size) {
			idx++;
			cnt = 0;
			flag = 0;
		}
	}
	if(cnt) idx++;
	
	for(int i = 0; i < n; i++) a[i] = FastScan();
	for(int i = 0; i < idx; i++) Rebuild(i);

	while(q--) {
		t = FastScan();
		if(t == 1) {
			x = FastScan();
			y = FastScan();
			z = FastScan();
			x--; y--;
			for(int i = 0; i < idx; i++) {
				if(r[i] < x) continue;
				if(l[i] > y) break;
				if(x <= l[i] && y >= r[i]) {
					extra[i] += z;
				} else {
					for(int j = max(x, l[i]); j <= min(y, r[i]); j++) a[j] += z;
					Rebuild(i);
				}
			}
		} else {
			z = FastScan();
			int ansl = -1, ansr = -2;
			for(int i = 0; i < idx; i++) {
				int u = lower_bound(b + l[i], b + r[i] + 1, make_pair(z - extra[i], 0)) - b;
				if(u == r[i] + 1 || b[u].first != z - extra[i]) continue;
				int v = upper_bound(b + l[i], b + r[i] + 1, make_pair(z - extra[i], INT_MAX)) - b - 1;
				if(ansl == -1) ansl = b[u].second;
				ansr = b[v].second;
			}
			printf("%d\n", ansr - ansl);
		}
	}
	return 0;
}
