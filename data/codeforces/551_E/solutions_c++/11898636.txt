#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 5e5 + 7;
const int M = 7e2 + 7;

multiset<ll> ex[M];
multiset<ll> :: iterator it;
ll a[N];
ll add[M];
ll n, q;
ll k;


void inc(ll l, ll r, ll c)
{
	for (int i = l / k + 1; i < r / k; i++)
	{
		add[i] += c;
	}
	for (int i = l; i < min((l / k + 1) * k, r); i++)
	{
		ex[l / k].erase(ex[l / k].find(a[i]));
		a[i] += c;
		ex[l / k].insert(a[i]);
	}

	if (r / k != l / k)
		for (int i = max(r / k * k, l); i < r; i++)
		{
			ex[r / k].erase(ex[r / k].find(a[i]));
			a[i] += c;
			ex[r / k].insert(a[i]);
		}
}

ll Guki(ll x)
{
	int Left = -1, Right = -1;

	for (int i = 0; i * k < n; i++)
	{
		if (ex[i].find(x - add[i]) != ex[i].end())
		{
			if (Left == -1)
				Left = i;
			Right = i;
		}
	}

	if (Right == -1)
		return -1;

	int Lout = -1, Rout = -1;

	for (int i = Left * k; i < min(Left * k + k, n); i++)
		if (a[i] + add[Left] == x)
		{
			Lout = i;
			break;
		}

	for (int i = Right * k; i < min(Right * k + k, n); i++)
		if (a[i] + add[Right] == x)
		{
			Rout = i;
		}

	return Rout - Lout;
}


int main()
{
	scanf("%I64d %I64d", &n, &q);

	for (int i=0; i<n; i++)
		scanf("%I64d", &a[i]);

	k = sqrt(n);

	for (int i=0; i*k<n; i++)
	{
		for (int j = i * k; j < min(i * k + k, n); j++)
			ex[i].insert(a[j]);
	}

	/*for (int i=0; i * k < n; i++)
	{
		for (it = ex[i].begin(); it != ex[i].end(); it++)	
			cout << *it << " ";
		cout << "\n";
	}*/

	for (int i=0; i<q; i++)
	{
		ll t;
		scanf("%I64d", &t);
		if (t == 1)
		{
			ll l, r, x;
			scanf("%I64d %I64d %I64d", &l, &r, &x);
			l--;
			inc(l, r, x);
		}
		else
		{
			ll x;
			scanf("%I64d", &x);
			printf("%I64d \n", Guki(x));
		}
/*		for (int i=0; i<n; i++)
			cout << a[i] << " ";
		cout << "\n";
		for (int i=0; i * k < n; i++)
			cout << add[i] << " ";
		cout << "\n";*/
	}

	

	return 0;	
}