#include <bits/stdc++.h>
#define fi first
#define se second
#define type(x) __typeof(x.begin());
using namespace std;

typedef long long lint;
typedef pair < lint , int > li;
const int maxn = 5e5+5 , sqrtn = 710;

int n,m,ar[maxn];
lint add[sqrtn];
vector < li > srt[sqrtn];
int main(){
	
	scanf("%d%d",&n,&m);n--;
	for( int i=0 ; i <= n ; i++ ){
		scanf("%d",&ar[i]);
		srt[i / sqrtn].push_back(li(ar[i] , i));
	}
	int cntB = n / sqrtn;
	for( int i=0 ; i <= cntB ; i++ )
		sort(srt[i].begin() , srt[i].end());
	
	for( int qq=0,type,l,r,x ; qq < m ; qq++ ){
		scanf("%d",&type);
		if( type == 1 ){
			scanf("%d%d%d",&l,&r,&x);l--;r--;
			int leftB = l / sqrtn;
			int righB = r / sqrtn;
			if( leftB == righB ){
				for( int i=0 ; i < (int)srt[leftB].size() ; i++ )
					if( srt[leftB][i].se >= l and srt[leftB][i].se <= r )
						srt[leftB][i].fi += x;
				sort(srt[leftB].begin() , srt[leftB].end());
				continue;
			}
			for( int i=0 ; i < (int)srt[leftB].size() ; i++ )
				if( srt[leftB][i].se >= l )
					srt[leftB][i].fi += x;
			sort(srt[leftB].begin() , srt[leftB].end());
			leftB++;
			
			for( int i=0 ; i < (int)srt[righB].size() ; i++ )
				if( srt[righB][i].se <= r )
					srt[righB][i].fi += x;
			sort(srt[righB].begin() , srt[righB].end());
			righB--;
			
			for( int i=leftB ; i <= righB ; i++ )
				add[i] += x;
			
		} else {
			scanf("%d",&x);
			int mn=-1 , mx = -2;
			vector < li > :: iterator it;
			for( int i=0 ; i <= cntB ; i++ )
				if( add[i] < x ){
					if( mn == -1 ){
						it = lower_bound(srt[i].begin() , srt[i].end() , li(x-add[i] , 0));
						if( it -> fi == x - add[i] )
							mn = it -> se;
					}
					it = upper_bound(srt[i].begin() , srt[i].end() , li(x-add[i] , n+1));
					it--;
					if( it -> fi == x - add[i] )
						mx = it -> se;
				}
			
			printf("%d\n",mx-mn);
		}
	}
	
	return 0;
}
