import math
def gcd(a, b):
	return a if abs(b)<1e-4 else gcd(b, a%b)
def round(x):
	return int(x + 0.5)
def alpha(a, b):
	b = b.conjugate()
	return abs(math.atan2((a*b).imag, (a*b).real))
p = map(lambda x: x[0] + 1j*x[1], [map(float, raw_input().split()) for s in range(3)])
R = abs(p[1] - p[0])*abs(p[2] - p[1])*abs(p[2] - p[0]) / abs(((p[1] - p[0])*((p[2] - p[0]).conjugate())).imag) / 2
N = 1 / reduce(gcd, [alpha(p[(i+1)%3]-p[i], p[(i+2)%3]-p[i])/math.pi for i in range(3)])
print '%.9f' % (R**2*N*1./2*math.sin(2*math.pi/N))
