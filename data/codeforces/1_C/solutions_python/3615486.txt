import math

EPSILON = math.pi / 100

def gcd(a, b):
    return a if b < EPSILON else gcd(b, math.fmod(a, b))

p = [map(float, raw_input().split()) for __ in range(3)]
vec = [map(lambda x, y: x-y, p1, p2) for (p1, p2) in [(p[0], p[1]), (p[1], p[2]), (p[2], p[0])]]
a, b, c = [math.hypot(*v) for v in vec]

alpha, beta, gamma = [math.acos((y*y+z*z-x*x) / (2.0*y*z)) for x, y, z in [(a, b, c), (b, c, a), (c, a, b)]]

r = a / (2.0*math.sin(alpha))
theta = 2.0 * gcd(alpha, gcd(beta, gamma))

print r*r * math.sin(theta) * math.pi/theta
