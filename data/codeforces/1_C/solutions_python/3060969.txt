import math

def dist(a, b):
	return math.sqrt(a*a + b*b)

def area(side, n):
	#n = int(round(-2 / (angle / math.pi - 1)))
	#print n
	return n * side * side / 4 / math.tan(math.pi / n)

def cos_law(a, b, c):
	c_angle = (c*c - a*a - b*b) / (-2 * a * b)
	return math.acos(c_angle)

def gcd(a, b):
	if abs(b) < 0.001: return a
	return gcd(b, a%b)

x1, y1 = raw_input().split(' ')
x2, y2 = raw_input().split(' ')
x3, y3 = raw_input().split(' ')

x1 = float(x1)
y1 = float(y1)
x2 = float(x2)
y2 = float(y2)
x3 = float(x3)
y3 = float(y3)

d1 = dist(x3 - x2, y3 - y2)
d2 = dist(x3 - x1, y3 - y1)
d3 = dist(x2 - x1, y2 - y1)

arr = [d1, d2, d3]
arr.sort()
#print x1, y1
#print x2, y2
#print x3, y3
#print arr
a, b, c = arr
s = (a + b + c) / 2
radius = a*b*c / 4 / math.sqrt(s * (a+b-s) * (a+c-s) * (b+c-s))
angle_a = cos_law(radius, radius, a)
angle_b = cos_law(radius, radius, b)
#angle_c = cos_law(radius, radius, c)
#min_gcd = min(gcd(angle_a, 2*math.pi % angle_b), gcd(angle_b, 2*math.pi % angle_a), gcd(angle_b, angle_a))
#min_gcd = min(gcd(angle_a, 2*math.pi % angle_b), gcd(angle_b, 2*math.pi % angle_a))
min_gcd = gcd(2*math.pi, gcd(angle_b, angle_a))
n = int(round(2 * math.pi / min_gcd))
#print 'gcd', gcd(angle_a, angle_b) / math.pi * 180

#print angle / math.pi * 180
#print 'radius', radius
#print angle_a / math.pi * 180
#print angle_b / math.pi * 180
#print angle_c / math.pi * 180
#print (angle_a+angle_b+angle_c) / math.pi * 180

print area(2 * radius * math.sin(math.pi / n), n)
