import math

def Phi(p):
    delta_y = p[1]-Cy
    delta_x = p[0]-Cx
    
    if (delta_x >= 0):
        if (delta_y >= 0):
            return math.asin(delta_y/r)
        else:
            return math.asin(delta_y/r) + 2*math.pi
    else:
        return math.pi - math.asin(delta_y/r) 
 
def isPhiinList(phi,philist):
    for n in philist:
        if (math.fabs(n-phi) < 1E-6):
            return 1
    return 0         

n0 = map(float, raw_input().split())
n1 = map(float, raw_input().split())
n2 = map(float, raw_input().split())

u = (n0[0]**2+n0[1]**2 - n1[0]**2 - n1[1]**2)/2
v = (n0[0]**2+n0[1]**2 - n2[0]**2 - n2[1]**2)/2

Cx = (u*(n0[1]-n2[1]) - v*(n0[1]-n1[1])) / ((n0[1]-n2[1])*(n0[0]-n1[0]) - (n0[1]-n1[1])*(n0[0]-n2[0]))

if (n0[1] - n1[1] != 0):
    Cy = (u - (n0[0]-n1[0])*Cx) / (n0[1]-n1[1])
else:
    Cy = (v - (n0[0]-n2[0])*Cx) / (n0[1]-n2[1])
    
r = math.sqrt((n0[0]-Cx)**2 + (n0[1]-Cy)**2)

phi0 = Phi(n0)
phi1 = Phi(n1)
phi2 = Phi(n2)

for columns in range(3,101):
    phi_columns = []
    delta_phi = 2*math.pi/columns
    for i in range(1, columns):
        phi = phi0 + i*delta_phi
        if (phi >= 2*math.pi):
            phi -= 2*math.pi
        phi_columns.append(phi)   
    if (isPhiinList(phi1, phi_columns) == 1 and isPhiinList(phi2, phi_columns) == 1):
        break
     
A = columns*r**2/2*math.sin(2*math.pi/columns)
print A