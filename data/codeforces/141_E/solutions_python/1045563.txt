class DSU(object):
    def __init__(self, n):
        self.pnt = [-1] * n

    def find(self, x):
        pnt = self.pnt
        if pnt[x] == -1:
            return x
        pnt[x] = self.find(pnt[x])
        return pnt[x]

    def join(self, u, v):
        pnt = self.pnt
        u = self.find(u)
        v = self.find(v)
        if u != v:
            pnt[v] = u
            return True
        return False

    def same(self, u, v):
        u = self.find(u)
        v = self.find(v)
        return u == v

def main():
    n, m = map(int, raw_input().split())
    e1 = []
    e2 = []
    for i in range(m):
        u, v, t = raw_input().split()
        u = int(u) - 1
        v = int(v) - 1
        if t == 'S':
            e1.append((u, v, i + 1))
        else:
            e2.append((u, v, i + 1))

    if n % 2 == 0:
        print-1
        return

    dsu1 = DSU(n)
    for u, v, i in e2:
        dsu1.join(u, v)

    dsu2 = DSU(n)
    ans = []
    for u, v, i in e1:
        if not dsu1.same(u, v):
            dsu1.join(u, v)
            dsu2.join(u, v)
            ans.append(i)

    half = (n - 1) / 2
    for u, v, i in e1:
        if len(ans) < half and dsu2.join(u, v):
            ans.append(i)

    if len(ans) != half:
        print -1
        return

    for u, v, i in e2:
        if len(ans) < half * 2 and dsu2.join(u, v):
            ans.append(i)

    print len(ans)
    for i in ans:
        print i,
    print

main()
