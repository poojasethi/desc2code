#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

struct edge
{
	int x, y;
	char c;
	bool ans;
};

const int maxn = 1010, maxm = 100010;
int n, m, f[2][maxn];
edge e[maxm];

bool cmp1(const edge &a, const edge &b)
{
	return a.c < b.c;
}

bool cmp2(const edge &a, const edge &b)
{
	return a.c > b.c;
}

int find(int p, int k)
{
	if (f[p][k] < 0) return k;
	else
	{
		f[p][k] = find(p, f[p][k]);
		return f[p][k];
	}
}

inline void nosolution()
{
	printf("-1\n");
	exit(0);
}

int main()
{
	scanf("%d%d", &n, &m);
	if ((n - 1) & 1)
		nosolution();
	memset(f, -1, sizeof(f));
	for (int i = 0; i < m; i++)
	{
		scanf("%d%d %c", &e[i].x, &e[i].y, &e[i].c);
		e[i].ans = false;
		if (e[i].c == 'S')
                {
			int a = find(0, e[i].x), b = find(0, e[i].y);
			if (a != b)
			        f[0][a] = b;
		}
	}
	int cc = 0;
	for (int i = 0; i < m; i++)
		if (e[i].c == 'M')
		{
			int a = find(0, e[i].x), b = find(0, e[i].y);
			if (a != b)
			{
				e[i].ans = true;
				f[1][a] = b;
			        f[0][a] = b;
				cc++;
                        }
        	}
	if (cc * 2 > n - 1)
	        nosolution();
	for (int i = 0; i < m && cc * 2 < n - 1; i++)
	        if (e[i].c == 'M' && e[i].ans == false)
                {
			int a = find(1, e[i].x), b = find(1, e[i].y);
			if (a != b)
			{
				e[i].ans = true;
				f[1][a] = b;
				cc++;
			}
		}
	if (cc * 2 < n - 1)
	        nosolution();
	for (int i = 0; i < m && cc < n - 1; i++)
	        if (e[i].c == 'S')
	        {
			int a = find(1, e[i].x), b = find(1, e[i].y);
			if (a != b)
                        {
				e[i].ans = true;
				f[1][a] = b;
				cc++;
			}
		}
	printf("%d\n", n - 1);
	for (int i = 0; i < m; i++)
	        if (e[i].ans == true)
	                printf("%d ", i + 1);
	                
	return 0;
}
