/* kaneko141E.cc
 */
#include <algorithm>
#include <iostream>
#include <cassert>
#include <vector>
using namespace std;
const int L = 1010, LL = 100000+10;
int N, M, A[LL], B[LL]; char C[LL], used[LL];
int parent[3][L];
void init(int N) {
    for (int i=1; i<=N; ++i) parent[0][i] = parent[1][i] = parent[2][i] = i;
}
int root(int t, int a) {
    if (parent[t][a] == a) return a;
    return (parent[t][a] = root(t, parent[t][a]));
}
bool is_same_set(int t, int a, int b) {
    return root(t, a) == root(t, b);
}
bool unite(int t, int a, int b) {
    int ra = root(t, a), rb = root(t, b);
    if (ra == rb) return false;
    parent[t][ra] = rb;
    return true;
}
int solution() {
    if (N % 2 == 0) return -1;
    init(N);
    int count = N;
    for (int i=0; i<M; ++i)
	if (C[i] == 'S' && unite(0, A[i], B[i])) --count;
    if (count-1 > (N-1)/2) return -1;
    int needed = count-1, other = (N-1)/2-needed;
    for (int i=0; i<M; ++i) {
	if (C[i] == 'S') continue;
	if (! unite(1, A[i], B[i])) continue;
	if (! unite(0, A[i], B[i])) {
	    if (other-- > 0) {
		used[i] = 1;
		unite(2, A[i], B[i]);
	    }
	    continue;
	}
	used[i] = 1;
	unite(2, A[i], B[i]);
	--count;
    }
    if (count != 1 || other > 0) return -1;
    int n=0; for (int i=0; i<M && n<(N-1)/2; ++i)
	if (C[i] == 'S' && unite(2, A[i], B[i])) {
	    unite(2, A[i], B[i]);
	    used[i] = 1;
	    ++n;
	}
    assert(n == (N-1)/2);
    return (N-1);
}
int main() {
    cin >> N >> M;
    for (int i=0; i<M; ++i) cin >> A[i] >> B[i] >> C[i];
    int c = solution();
    cout << c << endl;
    if (c >= 0) {
	for (int i=0, n=0; i<M; ++i)
	    if (used[i]) cout << i+1 << (++n==N-1 ? '\n' : ' ');
    }
    cout << endl;
}
