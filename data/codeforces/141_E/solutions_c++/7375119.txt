#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pie;

#define MP make_pair
#define PB push_back
#define L first
#define R second

const int maxn = 1000 + 100;

int par[maxn];
vector<pair<pie, int> > v[2];
pie eg[maxn * maxn];
vector<int> ans;

void initDsu(){
	for(int i=1;i<maxn;i++)
		par[i] = i;
}

int find(int x){
	if(par[x] == x)
		return x;
	return par[x] = find(par[x]);
}

void dsu(int fi, int se){
	fi = find(fi);
	se = find(se);
	par[fi] = se;
}

int main(){
	ios_base::sync_with_stdio(false);
	int n, m;
	cin>>n>>m;
	for(int i=1;i<=m;i++){
		int fi, se;
		char c;
		cin>>fi>>se>>c;
		if(c == 'S')
			v[0].PB(MP(MP(fi, se), i));
		else
			v[1].PB(MP(MP(fi, se), i));
		eg[i] = MP(fi, se);
	}
	if(n % 2 == 0){
		cout<<-1<<endl;
		return 0;
	}
	initDsu();
	for(int i=0;i<v[0].size();i++){
		int fi = v[0][i].L.L, se = v[0][i].L.R;
		dsu(fi, se);
	}
	for(int i=0;i<v[1].size();i++){
		int fi = v[1][i].L.L, se = v[1][i].L.R;
		if(find(fi) != find(se)){
			ans.PB(v[1][i].R);
			dsu(fi, se);
		}
	}
	if(ans.size() > (n - 1)/2){
		cout<<-1<<endl;
		return 0;
	}
	initDsu();
	for(int i=0;i<ans.size();i++)
		dsu(eg[ans[i]].L, eg[ans[i]].R);
	for(int i=0;i<v[1].size() and ans.size()<(n-1)/2;i++){
		int fi = v[1][i].L.L, se = v[1][i].L.R;
		if(find(fi) != find(se)){
			ans.PB(v[1][i].R);
			dsu(fi, se);
		}
	}
	if(ans.size() != (n-1)/2){
		cout<<-1<<endl;
		return 0;
	}
	for(int i=0;i<v[0].size() and ans.size() < (n-1);i++){
		int fi = v[0][i].L.L, se = v[0][i].L.R;
		if(find(fi) != find(se)){
			ans.PB(v[0][i].R);
			dsu(fi, se);
		}
	}
	if(ans.size() != n - 1){
		cout<<-1<<endl;
		return 0;
	}
	cout<<ans.size()<<endl;
	for(int i=0;i<ans.size();i++)
		cout<<ans[i]<<" ";
}
