#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;
const int MAXM = 100000;
int n,m,fa[MAXM],u,v,x,y;
char str[5];
vector<int> res;
struct node{
    int x,y,w,id;
    node(){}
    node(int x_,int y_,int w_,int id_){
        x=x_;y=y_;w=w_;id=id_;
    }
    friend bool operator < (const node &a,const node &b){
        return a.w<b.w;
    }
}e[MAXM];
int getfa(int x){
    if (fa[x]==x) return x;
    return fa[x]=getfa(fa[x]);
}
int main(){
    scanf("%d%d",&n,&m);
    for (int i=1;i<=n;i++) fa[i]=i;
    for (int i=0;i<m;i++){
        scanf("%d%d%s",&u,&v,str);
        e[i]=node(u,v,str[0]=='S',i+1);
    }sort(e,e+m);
    for (int i=m-1;i>=0;i--){
        x=getfa(e[i].x);y=getfa(e[i].y);
        if (x==y) continue;
        if (e[i].w==0)e[i].w=-1;fa[x]=y;
    }sort(e,e+m);
    int S=0,M=0,per=(n-1)/2;
    for (int i=1;i<=n;i++) fa[i]=i;
    for (int i=0;i<m;i++){
        x=getfa(e[i].x);y=getfa(e[i].y);
        if (e[i].w<=0){
            if (S==per) continue;
            if (x==y) continue;
            res.push_back(e[i].id);
            fa[x]=y;S++;
        }else{
            if (M==per) continue;
            if (x==y) continue;
            res.push_back(e[i].id);
            fa[x]=y;M++;
        }
    }
    if (res.size()!=n-1)
        printf("-1\n");
    else{
        printf("%d\n",n-1);
        for (int i=0;i<res.size();i++)
            printf("%d ",res[i]);
    }
    return 0;
}
