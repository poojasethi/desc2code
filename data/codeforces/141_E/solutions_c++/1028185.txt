#include <algorithm>
#include <iostream>
#include <cstring>
#include <numeric>
#include <cstdio>
#include <string>
#include <vector>
#include <math.h>
#include <cmath>
#include <deque>
#include <queue>
#include <map>
#include <set>
using namespace std;

#define mp make_pair
#define pb push_back

const int N = 1005;

struct Node {
	int f[N];
	int cnt;
	Node() {
		for (int i = 0; i < N; i++) {
			f[i] = i;
		}
		cnt = 0;
	}
	int getf(int x) {
		if (x != f[x]) {
			f[x] = getf(f[x]);
		}
		return f[x];
	}
	bool Un(int x, int y) {
		x = getf(x);
		y = getf(y);
		if (x == y) return false;
		f[x] = y;
		cnt++;
		return true;
	}
};

int main() {
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);

	int n, m;
	cin >> n >> m;
	if (1 - n & 1) {
		cout << -1 << endl;
		return 0;
	}
	Node si, mi, ret;
	vector<int> ans;
	vector<char> t(m);
	vector<bool> yes(m);
	vector<pair<int, int> > v(m);
	for (int i = 0; i < m; i++) {
		cin >> v[i].first >> v[i].second >> t[i];
		if (t[i] == 'S') {
			yes[i] = si.Un(v[i].first, v[i].second);
		} else {
			yes[i] = mi.Un(v[i].first, v[i].second);
		}
	}
	n -= 1;
	if (si.cnt < n / 2 || mi.cnt < n / 2) {
		cout << -1 << endl;
		return 0;
	}
	for (int i = 0; i < m; i++) {
		if (yes[i] && t[i] == 'M') {
			if (si.Un(v[i].first, v[i].second)) {
				if (ret.Un(v[i].first, v[i].second)) {
					ans.pb(i + 1);
				}
			}
		}
	}
	for (int i = 0; i < m; i++) {
		if (yes[i] && t[i] == 'M' && ret.cnt < n / 2) {
			if (ret.Un(v[i].first, v[i].second)) {
				ans.pb(i + 1);
			}
		}
	}
	for (int i = 0; i < m; i++) {
		if (yes[i] && t[i] == 'S') {
			if (ret.Un(v[i].first, v[i].second)) {
				ans.pb(i + 1);
			}
		}
	}
	cout << n << endl;
	for (int i = 0; i < n; i++) {
		printf("%d ", ans[i]);
	}
	cout << endl;

	return 0;
}