#include<iostream>
#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
const int N = 1010;
const int M = 100100;
int a[M],b[M];
bool ty[M],use[M];
int zep[N],totp[N];
int find(int x,int par[])
{
    if(par[x]==x)
        return x;
    return x=find(par[x],par);
}
inline void uni(int a,int b,int par[])
{
    par[find(a,par)]=find(b,par);
}
void init(int n,int m)
{
    int i,j;
    char s[10];

    for(i=1;i<=m;i++){
        scanf("%d %d %s",&a[i],&b[i],s);
        ty[i]=(s[0]=='S'?0:1);
        use[i]=0;
    }
}
bool work(int n,int m)
{
    int i,j,k,zero=0,one=0;

    if(n%2==0)
        return 0;
    for(i=1;i<=n;i++)
        zep[i]=totp[i]=i;
    for(i=1;i<=m;i++){
        if(ty[i]==1&&find(a[i],totp)!=find(b[i],totp)){
            uni(a[i],b[i],totp);
            one++;
        }
    }
    if(one*2<n-1)
        return 0;
    for(i=1;i<=m;i++){
        if(ty[i]==0&&find(a[i],totp)!=find(b[i],totp)){
            uni(a[i],b[i],totp);
            uni(a[i],b[i],zep);
            zero++;
            use[i]=1;
        }
    }
    for(i=1;i<=m&&zero<one;i++){
        if(ty[i]==0&&find(a[i],zep)!=find(b[i],zep)){
            uni(a[i],b[i],zep);
            zero++;
            one--;
            use[i]=1;
        }
    }
    if(zero<one)
        return 0;
    for(i=1;i<=m;i++){
        if(ty[i]==1&&find(a[i],zep)!=find(b[i],zep)){
            uni(a[i],b[i],zep);
            use[i]=1;
        }
    }
    return 1;
}
int main()
{
    int n,m;

    cin>>n>>m;
    init(n,m);
    if(work(n,m)==0)
        cout<<"-1"<<endl;
    else{
        cout<<n-1<<endl;
        for(int flag=0,i=1;i<=m;i++){
            if(use[i]==1){
                if(flag==1)
                    printf(" ");
                else
                    flag=1;
                printf("%d",i);
            }
        }
        cout<<endl;
    }
    return 0;
}