#include <cstdio>
#include <vector>
using namespace std;

struct Edge {
    int u, v;
    char c;
};

const int N = 1003;
const int M = 100003;
int ps[N];
int pm[N];
Edge e[M];

void init(int* p, int n)
{
    for(int i = 1; i <= n; ++i)
        p[i] = i;
}

int find(int x, int* p)
{
    if(x != p[x])
        p[x] = find(p[x], p);
    return p[x];
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    if((n-1) & 1) {
        puts("-1");
        return 0;
    }
    
    int c = 0;
    init(ps, n);
    for(int i = 1; i <= m; ++i) {
        scanf("%d%d %c", &e[i].u, &e[i].v, &e[i].c);
        if(e[i].c == 'S' && find(e[i].u, ps) != find(e[i].v, ps)) {
            ps[ps[e[i].u]] = ps[e[i].v];
            ++c;
        }
    }
    if(c < (n-1)/2) {
        puts("-1");
        return 0;
    }
    
    vector<int> res;
    init(pm, n);
    for(int i = 1; i <= m; ++i) {
        if(e[i].c == 'M' && find(e[i].u, ps) != find(e[i].v, ps)) {
            ps[ps[e[i].u]] = ps[e[i].v];
            pm[find(e[i].u, pm)] = find(e[i].v, pm);
            res.push_back(i);
        }
    }
    if(c + (int)res.size() < n-1) {
        puts("-1");
        return 0;
    }
    
    for(int i = 1; i <= m && (int)res.size() < (n-1)/2; ++i) {
        if(e[i].c == 'M' && find(e[i].u, pm) != find(e[i].v, pm)) {
            pm[pm[e[i].u]] = pm[e[i].v];
            res.push_back(i);
        }
    }
    if((int)res.size() < (n-1)/2) {
        puts("-1");
        return 0;
    }
    
    for(int i = 1; i <= m; ++i) {
        if(e[i].c == 'S' && find(e[i].u, pm) != find(e[i].v, pm)) {
            pm[pm[e[i].u]] = pm[e[i].v];
            res.push_back(i);
        }
    }
    
    printf("%d\n", n-1);
    for(int i = 0; i < n-1; ++i) {
        if(i) printf(" ");
        printf("%d", res[i]);
    }
    printf("\n");
    return 0;
}
