#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <vector>
using namespace std;

const int maxn = 1010;

int p[maxn];
vector< pair<int, int> > e;
vector<int> res;
vector<char> d;

int Find(int x)
{
	return p[x] == x ? x : p[x] = Find(p[x]);
}
void Merge(int x, int y)
{
	p[Find(x)] = Find(y);
}
int main()
{
	//freopen("input.txt", "r", stdin);
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++) {
		int u, v;
		char c;
		scanf("%d%d", &u, &v); u--; v--;
		while ((c = getchar()) && c != 'S' && c != 'M');
		e.push_back(make_pair(u, v));
		d.push_back(c);
	}
	if (n % 2 == 0) { puts("-1"); return 0; }
	int N = (n-1)/2;
	for (int i = 0; i < n; i++) p[i] = i;
	for (int i = 0; i < e.size(); i++) if (d[i] == 'S') p[Find(e[i].first)] = Find(e[i].second);
	int sum0 = 0, sum1 = 0;
	for (int i = 0; i < e.size(); i++)
		if (d[i] == 'M' && Find(e[i].first) != Find(e[i].second)) {
			d[i] = 'D';
			Merge(e[i].first, e[i].second);
			res.push_back(i);
		}
	if (res.size() > N) { puts("-1"); return 0; }
	for (int i = 0; i < n; i++) p[i] = i;
	for (int i = 0; i < res.size(); i++) Merge(e[res[i]].first, e[res[i]].second);
	for (int i = 0; i < e.size(); i++)
		if (d[i] == 'M' && res.size() < N && Find(e[i].first) != Find(e[i].second)) {
			d[i] = 'D';
			Merge(e[i].first, e[i].second);
			res.push_back(i);
		}
	if (res.size() != N) { puts("-1"); return 0; }
	for (int i = 0; i < e.size(); i++)
		if (d[i] == 'S' && Find(e[i].first) != Find(e[i].second)) {
			d[i] = 'D';
			Merge(e[i].first, e[i].second);
			res.push_back(i);
		}
	if (res.size() != N*2) { puts("-1"); return 0; }
	printf("%lu\n", res.size());
	for (int i = 0; i < res.size(); i++) {
		printf("%d", res[i]+1);
		i+1 == res.size() ? puts("") : printf(" ");
	}
	return 0;
}

