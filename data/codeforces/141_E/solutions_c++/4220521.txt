#include <iostream>
#include <vector>
using namespace std;
const int maxN = 1000  * 100 + 10;
int dsu[maxN], ans, res[maxN];
char name[maxN];
pair <int,int> ial[maxN];
int par(int v){
    if(dsu[v] == v)
    return v;
    return dsu[v] = par(dsu[v]);
}
void unione(int v, int s){
    dsu[v] = dsu[s];
}
void make(int i){
    if(par(ial[i].first) != par(ial[i].second)){
    unione(par(ial[i].first), par(ial[i].second));
    res[ans++] = i;
    }
}

int main(){
    int n,m;
    cin>>n>>m;
    if(!(n % 2)){
    cout<<-1<<endl;
    return 0;
    }
    for(int i = 1; i <= n; i++)
    dsu[i] = i;
    for(int i = 1; i <= m; i++){
    cin>>ial[i].first>>ial[i].second>>name[i];
    if(name[i] == 'M')
        if(par(ial[i].first) != par(ial[i].second))
        unione(par(ial[i].first), par(ial[i].second));
    }
    for(int i = 1; i <= m; i++)
    if(name[i] == 'S')
        make(i);
    if(ans > n / 2){
    cout<<-1<<endl;
    return 0;
    }////////////////////////////////////////////////////////
    for(int i = 1; i <= n; i++)
    dsu[i] = i;
    for(int i = 0; i < ans; i++)
    unione(par(ial[res[i]].first), par(ial[res[i]].second));
    for(int i = 1; i <= m; i++)
    if(ans < n / 2 && name[i] == 'S')
        make(i);
    if(ans != n / 2){
    cout<<-1<<endl;
    return 0;
    }
    for(int i = 1; i <= m; i++)
    if(name[i] == 'M')
        make(i);
    if(ans != n - 1){
    cout<<-1<<endl;
    return 0;
    }
    cout<<n - 1<<endl;
    for(int i = 0; i < ans; i++)
    cout<<res[i]<<" ";
    return 0;
}