#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstring>

using namespace std;

#define pie pair <int, int>
#define ff first
#define ss second

const int maxN = 1000 + 100;
const int maxE = 100 * 1000 + 100;

int n, m, x;
pie e[maxE];
vector <int> red, blue;

int par[maxN], h[maxN];
int father (int v) { return par[v] == -1 ? v : par[v] = father (par[v]); }

bool add (pie edge)
{
	int x = father (edge.ff), y = father (edge.ss);
	if (x == y) return 0;
	if (h[x] > h[y]) return add (pie (y, x));
	par[x] = y, h[y] += h[x] == h[y];
	return 1;
}

int main()
{
	ios::sync_with_stdio (false);
	
	cin >> n >> m;
	if (n % 2 == 0) { cout << -1 << endl; return 0; }
	x = n / 2;
	for (int i = 0; i < m; i++)
	{
		int x, y; char c;
		cin >> x >> y >> c; x--; y--;
		e[i] = pie (x, y);
		(c == 'S'? red : blue).push_back (i);
	}
	
	if (red.size() < x || blue.size() < x) { cout << -1 << endl; return 0; }
	
	memset (par, -1, sizeof par);
	for (int i = 0; i < red.size(); i++) add (e[red[i]]);
	vector <int> added;
	for (int i = 0; i < blue.size(); i++) 
		if (add (e[blue[i]])) added.push_back (blue[i]);
	if (added.size() > x) { cout << -1 << endl; return 0; }
	
	memset (par, -1, sizeof par);
	for (int i = 0; i < added.size(); i++) add (e[added[i]]);
	for (int i = 0; i < blue.size() && added.size() < x; i++)
		if (add (e[blue[i]])) added.push_back (blue[i]);
	if (added.size() < x) { cout << -1 << endl; return 0; }
	for (int i = 0; i < red.size(); i++)
		if (add (e[red[i]])) added.push_back (red[i]);
	if (added.size() < n - 1) { cout << -1 << endl; return 0; }
	
	cout << added.size() << endl;
	for (int i = 0; i < added.size(); i++)
		cout << added[i] + 1 << ' ';
	cout << endl;
	
	return 0;
}
