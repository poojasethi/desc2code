#include<iostream>
#include<algorithm>
#include<vector>

#define F first
#define S second
#define PB push_back
#define MP make_pair

using namespace std;

const int MAXN = 100003;
int in[MAXN], in2[MAXN], par[MAXN], size[MAXN], mark[MAXN], ans[MAXN], comp;
vector<pair<int, int> > e, e2;

int getpar(int x)
{
	if(par[x] == -1)
		return x;
	return par[x] = getpar(par[x]);
}

bool add(int x, int y)
{
	x = getpar(x), y = getpar(y);
	if(x == y)
		return false;
	if(size[x] < size[y])
		swap(x, y);
	par[y] = x;
	size[x] += size[y];
	comp--;
	return true;
}

int main()
{
	int n, m;
	cin >> n >> m;
	comp = n;
	fill(par, par + MAXN, -1);
	fill(size, size + MAXN, 1);
	for(int i = 0; i < m; i++)
	{
		int a, b;
		char c;
		cin >> a >> b >> c;
		a--, b--;
		if(c == 'S')
		{
			in2[e2.size()] = i;
			e2.PB(MP(a, b));
			add(a, b);
		}
		else
		{
			in[e.size()] = i;
			e.PB(MP(a, b));
		}
	}
	if(comp > n / 2 + 1)
	{
		cout << -1 << endl;
		return 0;
	}
	for(int i = 0; i < e.size(); i++)
		mark[i] = add(e[i].F, e[i].S);
	if(comp > 1 || n % 2 == 0)
	{
		cout << -1 << endl;
		return 0;
	}
	comp = n;
	fill(par, par + MAXN, -1);
	fill(size, size + MAXN, 1);
	for(int i = 0; i < e.size(); i++)
		if(mark[i])
		   ans[i] = add(e[i].F, e[i].S);
	for(int i = 0; i < e.size(); i++)
		if(comp > n / 2 + 1 && !mark[i])
			ans[i] = add(e[i].F, e[i].S);
	if(comp != n / 2 + 1)
	{
		cout << -1 << endl;
		return 0;
	}
	cout << n - 1 << endl;
	for(int i = 0; i < e2.size(); i++)
		if(add(e2[i].F, e2[i].S))
			cout << in2[i] + 1 << ' ';
	for(int i = 0; i < e.size(); i++)
		if(ans[i])
			cout << in[i] + 1 << ' ';
	cout << endl;
	return 0;
}
