#include <cstdio>
#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <queue>
using namespace std;

typedef pair<int,int> pii;
struct node
{
	int l,r,no;
	node(int _l,int _r,int _no):l(_l),r(_r),no(_no){}
};
int fa[1111];
pii ln[111111];
vector<int> S,M;


void wrong()
{
	printf("-1\n");
	exit(0);
}

int getfa(int p)
{
	if (fa[p] == p) return p;
	fa[p] = getfa(fa[p]);
	return fa[p];
}

bool joint(int l,int r)
{
	int fl = getfa(l);
	int fr = getfa(r);
	if (fl == fr) return false;
	fa[fl] = fr;
	return true;
}

int main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	if (!(n & 1)) wrong();
	for (int i = 1;i <= m;++i)
	{
		int l,r;
		char c;
		scanf("%d%d %c",&l,&r,&c);
		ln[i] = make_pair(l,r);
		if (l == r) continue;
		if (c == 'S')
			S.push_back(i);
		else M.push_back(i);
	}
	for (int i = 1;i <= n;++i)
	{
		fa[i] = i;
	}
	int sum = 0;
	for (int i = 0;i < S.size();++i)
	{
		sum += joint(ln[S[i]].first,ln[S[i]].second);
	}
	if (sum < n / 2) wrong();
	sum = 0;
	vector<int> ans;
	for (int i = 0;i < M.size();++i)
	{
		if (joint(ln[M[i]].first,ln[M[i]].second))
			ans.push_back(M[i]);
	}
	for (int i = 1;i <= n;++i)
	{
		fa[i] = i;
	}
	sum = 0;
	for (int i = 0;i < ans.size();++i)
	{
		sum += joint(ln[ans[i]].first,ln[ans[i]].second);
	}
	for (int i = 0;i < M.size();++i)
	{
		if (sum == n / 2) break;
		if (joint(ln[M[i]].first,ln[M[i]].second))
		{
			sum++;
			ans.push_back(M[i]);
		}
	}
	if (sum < n/2) wrong();
	for (int i = 0;i < S.size();++i)
	{
		if (joint(ln[S[i]].first,ln[S[i]].second))
		{
			ans.push_back(S[i]);
			sum++;
		}
	}
	if (sum != n - 1) wrong();
	printf("%u\n",ans.size());
	for (int i = 0;i < ans.size();++i)
	{
		printf("%d ",ans[i]);
	}
	puts("");
	return 0;
}
