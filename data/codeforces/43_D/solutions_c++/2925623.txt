#include <iostream>
#include <cstdio>
#include <stack>
#include <utility>
#include <cstdlib>
#include <vector>

using namespace std;

const int MaxN = 300;
int dx[] = {0, 1, -1, 0};
int dy[] = {1, 0, 0, -1};

int n, m;
bool mark[MaxN][MaxN], teleport;
vector<pair<int, int> > path;

inline bool in(int x, int y) {return (x >= 1 && x <= n && y >= 1 && y <= m);}

void dfs(int currx, int curry)
{
    mark[currx][curry] = true;
    path.push_back(make_pair(currx, curry));

    for (int i = 0; i < 4; i++)
    {
        int newx = currx + dx[i], newy = curry + dy[i];

        if (in(newx, newy) && !mark[newx][newy]) dfs(newx, newy);
    }

    if (teleport)
    {
        printf("1\n");
        printf("%d %d 1 1\n", currx, curry);
    }
    else printf("0\n");

    path.push_back(make_pair(1, 1));
    for (int i = 0; i < path.size(); i++) printf("%d %d\n", path[i].first, path[i].second);

    exit(0);
}

int main()
{
    cin.sync_with_stdio(0);

    cin >> n >> m;

    if (n % 2 == 0)
    {
        swap(dx[2], dx[3]);
        swap(dy[2], dy[3]);
    }

    if (n == 1 || (n * m) % 2 == 1 || m == 1) teleport = true;
    if ((n == 1 && m == 2) || (m == 1 && n == 2)) teleport = false;

    dfs(1, 1);

    return 0;
}
