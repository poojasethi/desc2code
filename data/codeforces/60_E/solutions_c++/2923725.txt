#include <cstdio>
using namespace std;

typedef long long LL;

const int N = 1000003;
const int M = 2;
int p;

void mul(int A[M][M], int B[M][M], int R[M][M])
{
    LL C[M][M] = {};
    for(int i = 0; i < M; ++i)
        for(int k = 0; k < M; ++k)
            for(int j = 0; j < M; ++j)
                C[i][j] += (LL)A[i][k] * B[k][j];
    for(int i = 0; i < M; ++i)
        for(int j = 0; j < M; ++j)
            R[i][j] = C[i][j] % p;
}

void power(int R[M][M], LL n)
{
    int A[M][M];
    for(int i = 0; i < M; ++i)
        for(int j = 0; j < M; ++j) {
            A[i][j] = R[i][j];
            R[i][j] = (i == j);
        }
    
    while(n) {
        if(n & 1) mul(R, A, R);
        n >>= 1;
        mul(A, A, A);
    }
}

int a[N];
int n;

int calc_S(int S, LL x)
{
    int A[M][M] = { { 3, 1 },
                    { 0, 1 } };
    power(A, x);
    S = ((LL)A[0][0]*S - (LL)A[0][1]*(a[0]+a[n-1])) % p;
    if(S < 0) S += p;
    return S;
}

int main()
{
    LL x, y;
    scanf("%d%lld%lld%d", &n, &x, &y, &p);
    int S = 0;
    for(int i = 0; i < n; ++i) {
        scanf("%d", a+i);
        S = (S + a[i]) % p;
    }
    if(n == 1) {
        printf("%d\n", a[0]%p);
        return 0;
    }
    
    S = calc_S(S, x);
    
    int B[M][M] = { { 1, 1 },
                    { 1, 0 } };
    power(B, x);
    a[n-1] = ((LL)B[0][0]*a[n-1] + (LL)B[0][1]*a[n-2]) % p;
    
    printf("%d\n", calc_S(S, y));
    return 0;
}
