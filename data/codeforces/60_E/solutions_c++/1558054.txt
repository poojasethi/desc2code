#include<iostream>
#include<algorithm>
using namespace std;
typedef long long ll;

const int MAX = 1000*1000;
ll a[MAX+10];
int n;
ll x,y;
ll D;
ll sum = 0;

struct Mat
{
	int n,m;
	ll **a;
	void Identity()
	{
		for(int i=0; i<n; i++)
			for(int j=0; j<m; j++)
				if( i == j )
					a[i][j] = 1;
				else
					a[i][j] = 0;
	}
	void clear()
	{
		for(int i=0; i<n; i++)
			for(int j=0; j<m; j++)
				a[i][j] = 0;
	}
	Mat(int b=2,int c=2)
	{
		n = b; m=c;
		a = new ll *[n];
		for(int i=0; i<n; i++)
			a[i] = new ll [m];
		clear();
	}
	ll& operator()(int c,int b)
	{
		return (a[c][b]);
	}
	friend Mat operator*(Mat &a,Mat &b)
	{
		Mat c( a.n , b.m );
		for(int i=0; i<c.n; i++)
			for(int j=0; j<c.m; j++)
				for(int k=0; k<a.m; k++)
				{
					c(i,j) += ( a(i,k) * b(k,j) )%D;
					c(i,j) %= D;
					if( c(i,j) < 0 )
						c(i,j) += D;
				}
		return c;
	}
};


Mat pow(Mat a,ll b)
{
	Mat ret(2,2);
	ret.Identity();
	if( b == 0 )
		return ret;
	ret = pow( a , b/2 );
	ret = ret * ret;
	if( b&1 )
		ret = ret * a;
	return ret;
}

#define show(x) cerr << #x << " " << x << endl;

int main()
{
	cin >> n >> x >> y >> D;
	for(int i=0; i<n; i++)
		cin >> a[i] , sum += a[i];
	sum %= D;
	sort( a , a+n );
	if( n == 1 )
	{
		cout << a[0]%D << endl;
		return 0;
	}
	
	Mat all(2,1);
	all(0,0) = sum;  all(1,0) = (a[0] + a[n-1])%D;

	Mat mult(2,2);

	mult(0,0) = 3;  mult(0,1) = -1;
	mult(1,0) = 0;  mult(1,1) = 1;

	Mat Tp = pow( mult , x );
	
	all = Tp * all;   // after x minutes
	
	Mat badx(2,1) , badm(2,2);
	
	badx(0,0) = a[n-1];  badx(1,0) = a[n-2];
	
	badm(0,0) = badm(1,0) = badm(0,1) = 1;
	badm(1,1) = 0;
	
	Tp = pow( badm , x );
	badx = Tp * badx;
	
	all(1,0) = badx(0,0) + a[0];
	
	Tp = pow( mult , y );
	all = Tp * all; // after x+y minutes
	
	cout << all(0,0) << endl;
	return 0;
}