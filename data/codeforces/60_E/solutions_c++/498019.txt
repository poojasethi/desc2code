#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <string.h>
#include <cassert>
#include <math.h>
#include <vector>
#include <time.h>
#include <set>
#include <queue>
#include <map>
#define REP(i,n) for(int i=0, _n=(n); i<_n; i++)
#define REPD(i,n) for(int i=n-1; i>=0; i--)
#define FOR(i,a,b) for(int i=a,_b=(b); i<=_b; i++)
#define FORD(i,a,b) for(int i=a,_b=(b); i>=_b; i--)
#define FILL(x, v) memset(&x,v,sizeof(x))
#define DB(vari) cout<<#vari<<" = "<<vari<<endl;
#define x first
#define y second
#define mp make_pair
#define pb push_back

using namespace std;

typedef pair<int, int> pii;
typedef long long LL;

const int maxn = 1000000;
const int maxk = 100000;

int n, p; LL x, y;
int a[maxn];

inline LL mul(int a, int b)
{
	return (LL(a) * b) % p;
}

struct matrix
{
	int v[2][2];
	matrix(int a = 0, int b = 0, int c = 0, int d = 0)
	{
		v[0][0] = a;
		v[0][1] = b;
		v[1][0] = c;
		v[1][1] = d;
	}
	matrix operator * (matrix t)
	{
		matrix res;
		REP(i, 2)
			REP(j, 2)
				REP(k, 2)
					res.v[i][j] = (res.v[i][j] + mul(v[i][k], t.v[k][j])) % p;
		return res;
	}
	void print()
	{
		printf("|%d %d|\n|%d %d|\n", v[0][0], v[0][1], v[1][0], v[1][1]);
	}
};

void Pow(matrix &m, LL b)
{
	matrix t = m;
	m = matrix(1, 0, 0, 1);
	while (b)
	{
		if (b & 1)
			m = m*t;
		t = t*t;
		b >>=  1;
	}
}


int sum;

int main()
{
	//freopen("input.txt","r", stdin); freopen("output.txt","w", stdout);
	cin >> n >> x >> y >> p;
	REP(i, n)
	{
		scanf("%d", &a[i]);
		sum = (sum + a[i]) % p;
	}
	matrix m(3, -1, 0, 1);
	Pow(m, x);
	sum = (mul(m.v[0][0], sum) + mul(m.v[0][1], (a[0] + a[n-1])%p)) % p;
	m = matrix(1, 1, 1, 0);
	Pow(m, x);
	a[n-1] = (mul(a[n-1], m.v[0][0]) + mul(a[n-2], m.v[0][1])) % p;
	m = matrix(3, -1, 0, 1);
	Pow(m, y);
	sum = (mul(m.v[0][0], sum) + mul(m.v[0][1], (a[0] + a[n-1])%p)) % p;
	printf("%d\n", (LL(sum) + p) % p);
	return 0;
}
