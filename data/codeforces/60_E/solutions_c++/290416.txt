#include <iostream>
#include <vector>
#include <queue>
#include <cstdlib>
#include <cstdio>
using namespace std;

typedef long long ll;

int p;

inline int mns(int a)
{
	return (p-a)%p;
}

inline int sum(int a,int b)
{
	return (a+b)%p;
}

inline int subtr(int a,int b)
{
	return sum(a,mns(b));
}

inline int mul(int a,int b)
{
	return int((a*1LL*b)%p);
}

struct matrix
{
	int a[2][2];
	matrix()
	{
		for(int i=0;i<2;++i)
			for(int j=0;j<2;++j)
				a[i][j]=i==j;
	}
	matrix operator*(const matrix& m) const
	{
		matrix r;
		for(int i=0;i<2;++i)
			for(int j=0;j<2;++j)
			{
				int s=0;
				for(int k=0;k<2;++k)
					s=sum(s,mul(a[i][k],m.a[k][j]));
				r.a[i][j]=s;
			}
		return r;
	}
	matrix pow(ll n) const
	{
		matrix r,q=*this;
		while(n)
		{
			if(n%2)
				r=r*q;
			q=q*q;
			n/=2;
		}
		return r;
	}
};

int main(int argc, char *argv[])
{
#ifdef _DEBUG
	freopen("input.txt","r",stdin);
#endif

	int n;
	ll x,y;
	cin>>n>>x>>y>>p;
	vector<int> a(n);
	for(int i=0;i<n;++i)
		scanf("%d",&a[i]);

	if(n==1)
	{
		printf("%d",sum(a[0],0));
		return 0;
	}

	matrix M1;
	M1.a[0][0]=0;
	M1.a[0][1]=1;
	M1.a[1][0]=1;
	M1.a[1][1]=1;
	M1=M1.pow(x);
	int q1=M1.a[0][1];
	int q2=M1.a[1][1];

	matrix Z;
	Z.a[0][0]=1;
	Z.a[0][1]=0;
	Z.a[1][0]=1;
	Z.a[1][1]=3;

	int A0=sum(a[0],a[n-1]);
	int B0=0;
	for(int i=1;i<n-1;++i)
		B0=sum(B0,a[i]);
	
	matrix Z1=Z.pow(x);
	int A1=A0;
	int B1=sum(mul(Z1.a[1][0],A0),mul(Z1.a[1][1],B0));

	int C1=subtr(sum(mul(q1,a[n-2]),mul(q2,a[n-1])),a[n-1]);
	A1=sum(A1,C1);
	B1=subtr(B1,C1);

	matrix Z2=Z.pow(y);
	int ans=sum(sum(mul(Z2.a[0][0],A1),mul(Z2.a[0][1],B1)),sum(mul(Z2.a[1][0],A1),mul(Z2.a[1][1],B1)));
	printf("%d",ans);

	return 0;
}
