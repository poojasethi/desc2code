#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

long long x, y, p, sum, B;
int n;
int a[1000005];
typedef long long LL;

int getMax(LL m, LL X, LL Y) {
	LL mat[2][2] = {{1,1},{1,0}};
	swap(Y,X);
	while(m>0) {
		if(m%2==1) {
			LL v=mat[0][0]*X+mat[0][1]*Y, w=mat[1][0]*X+mat[1][1]*Y;
			v%=p; w%=p;
			X=v; Y=w;
		}
		LL nat[2][2]={};
		for(int i=0;i<2;i++) for(int k=0;k<2;k++) for(int j=0;j<2;j++)
			nat[i][j] = (nat[i][j]+mat[i][k]*mat[k][j])%p;
		for(int i=0;i<2;i++) for(int j=0;j<2;j++) mat[i][j] = nat[i][j];
		m/=2;
	}
	return (int)(X%p);
}
LL bigmod(LL A, LL m) {
	if(m==0) return 1;
	if(m==1) return A;
	LL r=bigmod(A*A%p, m/2);
	if(m%2) r=r*A%p;
	return r;
}
LL calSum(LL m) {
	if(m==0) return 0;
	if(m==1) return 1;
	LL r=calSum(m/2);
	r=(1+bigmod(3,m/2))*r%p;
	if(m%2) r=(r*3+1)%p;
	return r;
}
int getSum(LL m, LL X, LL Y) {
	if(m==0) return X%p;
	if(m==1) return ((3*X-Y)%p+p)%p;
	return (bigmod(3,m)*X%p-calSum(m)*Y%p+p)%p;
}

void solve() {
	if(n==1) {
		printf("%d\n", (int)(a[1]%p));
		return;
	}
	sum = getSum(x, sum, B);
	B = (a[1] + getMax(x, a[n-1], a[n]))%p;
	sum = getSum(y, sum, B);

	sum = (sum%p+p)%p;
	printf("%d\n", (int)sum);
}

int main(void) {
	scanf("%d%I64d%I64d%I64d", &n, &x, &y, &p);
	for(int i=1;i<=n;i++) scanf("%d", &a[i]);
	for(int i=1;i<=n;i++) sum += a[i];
	B = a[1] + a[n];
	sum %= p; B %= p; 
	solve();

	return 0;
}

