#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;
#define forn(i,n) for(int i=0;i<(int)n;++i)
typedef long long ll;

const int N = (int)1e6;
ll a[N],n,x,y,p,sum;

struct mat
{
  ll a[2][2];
  mat(){memset(a,0,sizeof a);}
  mat(ll x, ll b, ll c, ll d)
  {
    a[0][0]=x;
    a[0][1]=b;
    a[1][0]=c;
    a[1][1]=d;
  }
};
mat operator *(mat a, mat b)
{
  mat c=mat();
  forn(i,2)
    forn(j,2)
      forn(k,2)
        c.a[i][j]=(c.a[i][j]+a.a[i][k]*b.a[k][j])%p;
  return c;
}
mat deg(mat a, ll n)
{
  if (n==0)
    return mat(1,0,0,1);
  mat x=deg(a,n/2);
  x=x*x;
  if (n%2==1)
    x=x*a;
  return x;
}

ll phib(ll a, ll b, ll n)
{
  mat x = deg(mat(0,1,1,1),n);
  return (x.a[0][0]*b+x.a[0][1]*a)%p;
}

ll deg(ll a, ll n, ll p)
{
  if (n<=0)
    return 1;
  ll x=deg(a,n/2,p);
  x=(x*x)%p;
  if (n%2==1)
    x=(x*a)%p;
  return x;
}

ll sumdeg(ll a, ll r, ll p)
{
  if (r<0)
    return 0;
  if (r==0)
    return 1;
  ll deg2=2, sum=1, d=a;
  while (deg2<=r)
  {
    sum=(sum*d+sum)%p;
    d=(d*d)%p;
    deg2*=2;
  }
  return (sum+d*sumdeg(a,r-deg2/2,p))%p;
}

int main()
{
  scanf("%I64d%I64d%I64d%I64d",&n,&x,&y,&p);
  forn(i,n)
    scanf("%I64d",&a[i]);
  reverse(a,a+n);
  ll mn=a[n-1],mx=0;
  if (n==1)
  {
    cout<<a[0]%p;
    return 0;
  };
  mx=phib(a[0],a[1],x+1);
  forn(i,n) 
    sum=(sum+a[i])%p;
  sum=((sum*deg(3,x,p)-(a[0]+a[n-1])*sumdeg(3,x-1,p))%p+p)%p;
  sum=((sum*deg(3,y,p)-(mn+mx)*sumdeg(3,y-1,p))%p+p)%p;
  cout<<sum;
}
