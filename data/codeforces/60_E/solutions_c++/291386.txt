#include <iostream>
#include <cstring>
#include <cstdio>

using namespace std;

typedef long long int64;
const int N = 1000000;
int a[N];

int64 pow_mod(int64 a, int64 x, int64 p)
{
    int64 ret = 1;
    a %= p;
    for (; x; x >>= 1)
    {
        if (x & 1) ret = ret * a % p;
        a = a * a % p;
    }
    return ret;
}

void do_it(int64 &sum, int64 x, int64 b, int64 p)
{
    sum = pow_mod(3, x, p) * sum % p;
    int64 tmp = (pow_mod(3, x, 2 * p) + 2 * p - 1) % (2 * p) / 2 * b % p;
    sum = (sum + (p - tmp)) % p;
}

void mul_mod(int64 A[2][2], int64 B[2][2], int64 C[2][2], int64 p)
{
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
        {
            C[i][j] = 0;
            for (int k = 0; k < 2; ++k)
            {
                C[i][j] += A[i][k] * B[k][j] % p;
                C[i][j] %= p;
            }
        }
}

int64 F[2][2], G[2][2], C[2][2];

void pow_mod(int64 A[2][2], int64 x, int64 B[2][2], int64 p)
{
    B[0][1] = B[1][0] = 0;
    B[0][0] = B[1][1] = 1;
    for (; x; x >>= 1)
    {
        if (x & 1)
        {
            mul_mod(B, A, C, p);
            memcpy(B, C, sizeof(C));
        }
        mul_mod(A, A, C, p);
        memcpy(A, C, sizeof(C));
    }
}


int main()
{
    int n;
    int64 x, y, p;
    cin >> n >> x >> y >> p;
    // scanf("%d %lld %lld %lld", &n, &x, &y, &p);
    for (int i = 0; i < n; ++i) scanf("%d", a + i);
    if (n == 1)
    {
        cout << a[0] % p << endl;
        return 0;
    }

    int64 sum = 0;
    for (int i = 0; i < n; ++i) sum = (sum + a[i]) % p;
    do_it(sum, x, a[0] + a[n - 1], p);
    // cout << sum << endl;
    if (y > 0)
    {
        F[0][0] = 0; F[0][1] = F[1][0] = F[1][1] = 1;
        pow_mod(F, x, G, p);
        // cout << G[0][1] << " " << G[1][1] << endl;
        int64 big = (a[0] + G[0][1] * a[n - 2] + G[1][1] * a[n - 1]) % p;
        do_it(sum, y, big, p);
    }
    cout << sum << endl;
    return 0;
}
