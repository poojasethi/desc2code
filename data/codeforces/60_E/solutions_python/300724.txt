import sys
def mulMatrix(a, b, p):
	n = len(a)
	c = []
	for i in range(n):
		c.append([0] * n)
	for i in range(n):
		for j in range(n):
			for k in range(n):
				c[i][j] += a[i][k] * b[k][j]
				c[i][j] %= p
	return c

def powMatrix(a, pw, p):
	n = len(a)
	r = []
	for i in range(n):
		l = [0] * n
		l[i] = 1
		r.append(l)
	while pw:
		if pw & 1:
			r = mulMatrix(r, a, p)
		a = mulMatrix(a, a, p)
		pw >>= 1
	return r

def getFib(n, p):
	if n < 0: return 0
	if n < 2: return 1
	r = powMatrix([[1, 1], [1, 0]], n - 1, p)
	return (r[0][0] + r[0][1]) % p

def getSumPow3(x, p):
	if x == 0:
		return 0
	if x == 1:
		return 1
	if x & 1:
		t = getSumPow3(x - 1, p)
		return (t * 3 + 1) % p
	else:
		t = getSumPow3(x >> 1, p)
		return (t + t * pow(3, x >> 1, p)) % p

def mod(x, p):
	x %= p
	if x < 0:
		x += p
	return x

def getSum(first, last, mid, n, p):
	(first, last, mid) = (mod(first, p), mod(last, p), mod(mid, p))
	#print first, last, mid
	return ((first + last) * (getSumPow3(n, p) + 1) + mid * pow(3, n, p)) % p
				
def main():
	(n, x, y, p) = sys.stdin.readline().split(' ')
	(n, x, y, p) = (long(n), long(x), long(y), long(p))
	a = sys.stdin.readline().strip().split(' ')
	s = 0
	for i in xrange(n):
		a[i] = long(a[i])
		a[i] %= p
		s += a[i]
	
	if n == 1:
		print a[0]
		return

	s = getSum(a[0], a[-1], s - a[0] - a[-1], x, p)

	last = (a[-1] * getFib(x, p) + a[-2] * getFib(x - 1, p)) % p

	s = getSum(a[0], last, s - a[0] - last, y, p)
	print s
	
	#3 ** (s - a[0] - a[-1])
main()
