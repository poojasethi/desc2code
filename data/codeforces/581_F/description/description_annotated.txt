It's election time in Berland. The favorites are of course parties of zublicanes and mumocrates. The election campaigns of both parties include numerous demonstrations on †n‡ main squares of the capital of Berland. Each of the †n‡ squares certainly can have demonstrations of only one party, otherwise it could lead to riots. On the other hand, both parties have applied to host a huge number of demonstrations, so that on all squares demonstrations must be held. Now the capital management will distribute the area between the two parties.
Some pairs of squares are connected by (†n‡ - 1) bidirectional roads such that between any pair of squares there is a unique way to get from one square to another. Some squares are on the outskirts of the capital meaning that they are connected by a road with only one other square, such squares are called dead end squares.
The mayor of the capital instructed to distribute all the squares between the parties so that the dead end squares had the same number of demonstrations of the first and the second party. It is guaranteed that the number of dead end squares of the city is even.
To prevent possible conflicts between the zublicanes and the mumocrates it was decided to minimize the number of roads connecting the squares with the distinct parties. You, as a developer of the department of distributing squares, should determine this smallest number.

Input
The first line of the input contains a single integer †n‡ (2 ≤ †n‡ ≤ 5000) — the number of squares in the capital of Berland.
Next †n‡ - 1 lines contain the pairs of integers †x‡, †y‡ (1 ≤ †x‡, †y‡ ≤ †n‡, †x‡ ≠ †y‡) — the numbers of the squares connected by the road. All squares are numbered with integers from 1 to †n‡. It is guaranteed that the number of dead end squares of the city is even.

Output
Print a single number — the minimum number of roads connecting the squares with demonstrations of different parties.

Examples
Input
8
1 4
2 4
3 4
6 5
7 5
8 5
4 5

Output
1

Input
5
1 2
1 3
1 4
1 5

Output
2



