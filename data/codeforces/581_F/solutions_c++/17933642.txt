#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define ff(i, a, b) for(int i = a; i <= b; i++)
#define fo(i, a, b) for(int i = a; i < b; i++)
#define fod(i, a, b) for(int i = a; i >= b; i--)
#define pb push_back
#define mp make_pair
#define fi first
#define se second

const int INF = 1e9, N = 5010;
const ll INFL = 1e18;

typedef pair <int, int> ii;
typedef vector <int> vi;
typedef vector <ii> vii;

int n, leave[N], f[N][N][2], root; // f[i][j][k] j: count 1s
vector <vi> G;
bool vis[N];

void dfs(int u) {
	vis[u] = 1; 
	if (G[u].size() == 1) { leave[u] = 1; f[u][0][0] = f[u][1][1] = 0; return; }
	f[u][0][0] = f[u][0][1] = 0;
	fo(i, 0, G[u].size()) {
		int v = G[u][i]; if (vis[v]) continue;
		dfs(v); 
		vector <vi> tmp(leave[u]+1, vi(2, INF));
		ff(j, 0, leave[u]) ff(color, 0, 1) tmp[j][color] = f[u][j][color], f[u][j][color] = INF;
		ff(j, 0, leave[u]) ff(color, 0, 1) ff(k, 0, leave[v]) ff(c, 0, 1) {
			f[u][j+k][color] = min(f[u][j+k][color], tmp[j][color] + f[v][k][c] + (c != color));
		}
		leave[u] += leave[v];
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin >> n; G.assign(n + 1, vi());
	ff(i, 1, n-1) {
		int u, v; cin >> u >> v;
		G[u].pb(v); G[v].pb(u);
	}
	ff(i, 1, n) ff(j, 0, n) f[i][j][0] = f[i][j][1] = INF;
	ff(i, 1, n) if (G[i].size() > 1) {
		root = i;
		dfs(root);
		//cout << "root " << root << endl;
		cout << min(f[root][leave[root]>>1][0], f[root][leave[root]>>1][1]) << endl;
		return 0;
	}
}