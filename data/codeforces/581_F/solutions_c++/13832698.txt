#include<bits/stdc++.h>
using namespace std;
const int maxn=5015;
int n,f[maxn][maxn][2],leaf_num[maxn];
vector<int> g[maxn];
void tree_dp(int u,int fa){
	if (g[u].size()==1){
		leaf_num[u]=1;
		f[u][1][1]=f[u][0][0]=0;
		return;
	}
	f[u][0][0]=f[u][0][1]=0;
	static int t[maxn][2];
	for (int v,i=0;i<g[u].size();++i){
		if ((v=g[u][i])==fa) continue;
		tree_dp(v,u);
		memset(t,63,sizeof(t));
		leaf_num[u]+=leaf_num[v];
		for (int j=leaf_num[u];j>=0;--j){
			for (int k=min(j,leaf_num[v]);k>=0;--k){
				t[j][0]=min(t[j][0],min(f[u][j-k][0]+f[v][k][0],f[u][j-k][0]+f[v][k][1]+1));
				t[j][1]=min(t[j][1],min(f[u][j-k][1]+f[v][k][1],f[u][j-k][1]+f[v][k][0]+1));
			}
		}
		memcpy(f[u],t,sizeof(t));
	}
}
int main(){
	scanf("%d",&n);
	for (int u,v,i=1;i<=n-1;++i){
		scanf("%d%d",&u,&v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	if (n==2){printf("1\n");return 0;}
	memset(f,63,sizeof(f));
	for (int i=1;i<=n;++i)
		if (g[i].size()!=1){
			tree_dp(i,0);
			printf("%d\n",min(f[i][leaf_num[i]>>1][0],f[i][leaf_num[i]>>1][1]));
			break;
		}
	return 0;
}
 	   	 		      	 		 	 	   		 		