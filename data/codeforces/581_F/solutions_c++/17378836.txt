#include <bits/stdc++.h>
using namespace std;

const int N     = (int) 5e3 + 10;
const int INF   = (int) 1e9 + 7;

int n, f[N][N][2], g[N][N], cnt[N];
vector<int> adj[N];
bool fre[N];

void DFS(int u) {
    vector<int> c; fre[u] = false;
    for (int i = 0; i < (int) adj[u].size(); ++i) {
        int v = adj[u][i];
        if (fre[v]) {
            DFS(v);
            c.push_back(v);
            cnt[u] += cnt[v];
        }
    }
    if (c.empty()) {
        cnt[u]++;
        f[u][0][0] = INF;
        f[u][1][1] = INF;
        return ;
    }
    for (int col = 0; col < 2; ++col) {
        g[0][0] = 0; for (int i = 1; i <= n; ++i) g[0][i] = INF;
        for (int i = 0; i < (int) c.size(); ++i) {
            int v = c[i];
            for (int j = 0; j <= cnt[u]; ++j) {
                g[i + 1][j] = INF;
                for (int k = 0; k <= cnt[v] && k <= j; ++k)
                    g[i + 1][j] = min(g[i + 1][j], g[i][j - k] + min(f[v][k][col], f[v][k][col ^ 1] + 1));
            }
        }
        for (int i = 0; i <= cnt[u]; ++i) f[u][i][col] = g[(int) c.size()][i];
    }
}

int main() {
    #ifdef LOCAL
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif

    scanf("%d", &n);
    for (int i = 1; i <= n - 1; ++i) {
        int u, v;
        scanf("%d%d", &u, &v);
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    if (n == 2) {
        puts("1");
        return 0;
    }

    int root;
    for (int i = 1; i <= n; ++i)
        if (adj[i].size() >= 2) root = i;
    memset(fre, true, sizeof fre);
    DFS(root);

    printf("%d", min(f[root][cnt[root] / 2][0], f[root][cnt[root] / 2][1]));
    return 0;
}
