#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define ll long long
#define s second
#define f first
#define mp make_pair
#define N 5005
#define BIT(i, j) ((j >> i) & 1)
#define ln 1e9+1

using namespace std;

int DP[2][N][N], num[N];
vector <int> a[N];
int n, W;

void DFS(int u, int pre)
{
    for(int k=0; k<=1; k++)
        for(int j=0; j<=n; j++)
            DP[k][u][j] = ln;
    if(a[u].size() == 1)
    {
        num[u] = 1;
        DP[0][u][0] = 0;
        DP[1][u][1] = 0;
        return;
    }
    DP[0][u][0] = 0;
    DP[1][u][0] = 0;
    for(int i=0; i<a[u].size(); i++)
    {
        int v = a[u][i];
        if(v == pre)    continue;
        DFS(v, u);
        num[u] += num[v];
        for(int ku=0; ku<=1; ku++)
            for(int p=num[u]; p >= 0; p--)
            {
                DP[ku][u][p] = min( DP[ku][u][p] + DP[ku][v][0], DP[ku][u][p] + DP[1-ku][v][0] + 1);
                for(int kv=0; kv<=1; kv++)
                    for(int j=0; j<=min(num[v], p); j++)
                        DP[ku][u][p] = min(DP[ku][u][p], DP[ku][u][p-j] + DP[kv][v][j] + (kv != ku));
            }
    }
}

int main()
{
    //filein("inp.txt");  fileout("out.txt");
    cin >> n;
    int root = 1, u, v;
    for(int i=1; i<n; i++)
    {
        cin >> u >> v;
        a[u].push_back(v);
        a[v].push_back(u);
    }
    while(a[root].size() == 1)  root++;
    DFS(root, 0);
    int W = num[root] / 2;
    cout << DP[0][root][W];
}
