#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
using namespace std;
const int maxn=5051,maxm=10010,inf=999999999;
int n;
vector<int>edge[maxm];
void init()
{
    for(int i=0; i<=n; i++)
        edge[i].clear();
}
int dp[maxn][maxn],leaf[maxn];

void dfs(int u,int pre)
{
    if(edge[u].size()==1)
        leaf[u]=1;
    else
        leaf[u]=0;
    int L=edge[u].size();
    dp[u][0]=0;
    for(int i=1; i<=n; i++)
        dp[u][i]=inf;
    for(int i=0; i<L; i++)
    {
        int v=edge[u][i];
        if(v==pre)continue;
        dfs(v,u);
        ///状态转移，卧槽
        for(int j=leaf[u]; j>=0; j--)
            for(int k=0; k<=leaf[v]; k++)
                dp[u][j+k]=min(dp[u][j+k],dp[u][j]+dp[v][k]);
        leaf[u]+=leaf[v];
    }
    for(int i=0; i<=leaf[u]; i++)
        dp[u][i]=min(dp[u][i],dp[u][leaf[u]-i]+1);
}
int main()
{

    while(scanf("%d",&n)!=-1)
    {
        init();
        if(n==2)
        {
            printf("1\n");
          return 0;
        }
        memset(dp,0,sizeof(dp));
        for(int i=1; i<n; i++)
        {
            int u,v;
            scanf("%d%d",&u,&v);
            edge[u].push_back(v);
            edge[v].push_back(u);
        }
        int root=1;
        while(edge[root++].size()==1);
        dfs(root,0);
        printf("%d\n",dp[root][leaf[root]/2]);
    }
    return 0;
}

		    		 	 				 	      		   		