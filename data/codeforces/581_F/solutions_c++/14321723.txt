#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

const int MAXN = 5005;
const int INFTY = 1 << 25;
int N;
vector<int> adj[MAXN];
int sz[MAXN];
int dp[MAXN][MAXN];

void dfs(int cur, int prev)
{
	sz[cur] = (adj[cur].size() == 1);
	for (int i = 1; i <= N; i++)
		dp[cur][i] = INFTY;
	for (int i = 0; i < adj[cur].size(); i++)
	{
		int next = adj[cur][i];
		if (next == prev)
			continue;
		dfs(next, cur);
		for (int j = sz[cur]; j >= 0; j--)
			for (int k = 0; k <= sz[next]; k++)
				dp[cur][j + k] = min(dp[cur][j + k], dp[cur][j] + dp[next][k]);
		sz[cur] += sz[next];
	}
	for (int i = 0; i <= sz[cur]; i++)
		dp[cur][sz[cur] - i] = min(dp[cur][sz[cur] - i], dp[cur][i] + 1);
}

int main()
{
	ios::sync_with_stdio(0);

	cin >> N;
	for (int i = 0, a, b; i < N - 1; i++)
	{
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}

	if (N == 2)
	{
		cout << "1\n";
		return 0;
	}

	int root = 1;
	while (adj[root].size() == 1)
		root++;

	dfs(root, 0);
	cout << dp[root][sz[root] / 2] << "\n";

	return 0;
}