#include <cstdio>
#include <cstring>
const int MAXN = 5005, MAXM = 10005, INF = 0x3f3f3f3f;

int dp[MAXN][MAXN][2], g[MAXN], edgeSize, to[MAXM], nxt[MAXM];
int size[MAXN], deg[MAXN], n, tmp[MAXN][MAXN][2];

void addEdge(int u, int v){
	edgeSize ++;
	nxt[edgeSize] = g[u];
	g[u] = edgeSize;
	to[edgeSize] = v;
	deg[v] ++;
}
void update(int &a, int b){if(b < a) a = b;}
inline int min(int a, int b){return a > b ? b : a;}
void dfs(int x, int fa){
	int p, i, j; size[x] = 0;
	for(p = g[x]; p; p = nxt[p])
		if(to[p] != fa){
			dfs(to[p], x);
			if(!size[x]){
				for(i = 0; i <= size[to[p]]; ++ i){
					dp[x][i][0] = min(dp[to[p]][i][0], dp[to[p]][i][1] + 1);
					dp[x][i][1] = min(dp[to[p]][i][1], dp[to[p]][i][0] + 1);
				}
				size[x] += size[to[p]];
				continue;
			}
			for(i = 0; i <= size[x] + size[to[p]]; ++ i) tmp[x][i][0] = tmp[x][i][1] = INF;
			for(i = 0; i <= size[x]; ++ i)
				for(j = 0; j <= size[to[p]]; ++ j){
					update(tmp[x][i + j][0], min(dp[x][i][0] + dp[to[p]][j][0], dp[x][i][0] + dp[to[p]][j][1] + 1));
					update(tmp[x][i + j][1], min(dp[x][i][1] + dp[to[p]][j][1], dp[x][i][1] + dp[to[p]][j][0] + 1));
				}
			size[x] += size[to[p]];
			for(i = 0; i <= size[x]; ++ i) dp[x][i][0] = tmp[x][i][0], dp[x][i][1] = tmp[x][i][1];
		}
	if(size[x] == 0){
		size[x] = 1;
		dp[x][0][0] = dp[x][1][1] = 0;
	}
}
int main(){
	int i, rt = 0, leaves = 0, u, v;
	memset(dp, 0x3f, sizeof(dp));
	scanf("%d", &n);
	for(i = 1; i < n; ++ i){
		scanf("%d%d", &u, &v);
		addEdge(u, v), addEdge(v, u);
	}
	for(i = 1; i <= n; ++ i)
		if(deg[i] == 1) leaves ++;
		else if(!rt) rt = i;
	dfs(rt, -1);
	printf("%d\n", min(dp[rt][leaves >> 1][0], dp[rt][leaves >> 1][1]));
	return 0;
}
