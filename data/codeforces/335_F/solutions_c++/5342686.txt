#include <cmath>
#include <map>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <bitset>
#include <memory.h>
#include <functional>
#include <queue>
#include <fstream>
#include <ctime>
#include <deque>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <cctype> 
#include <numeric> 
using namespace std;
#define sqr(_) ((_)*(_))

typedef long long LL;

typedef pair<int, int> Pii;
#define x first
#define y second
#define mp make_pair

typedef map<int, int>::reverse_iterator mrit;
typedef multiset<int>::iterator msit;

multiset<int> b;
map<int, int> h;

int n;
LL s;

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
#endif
	cin >> n;
	for (int i = 1; i <= n; ++i)
	{
		int x;
		cin >> x;
		s += x;
		++h[x];
	}
	int tot = 0;
	for (mrit it = h.rbegin(); it != h.rend(); ++it)
	{
		int v = it -> x, cnt = it -> y;
		int add = min(tot, cnt), nex = min(min(cnt + (int)b.size(), (cnt + tot) / 2), tot);
		int del = add - (nex - b.size());
		msit p = b.begin();
		for (int i = 1; i <= del; ++i, ++p);
		vector<int> remove(b.begin(), p);
		b.erase(b.begin(), p);
		reverse(remove.begin(), remove.end());
		int t = nex - b.size();
		vector<int> a(t, v);
		if ((tot + add) & 1)
			++t, a.push_back(0);
		for (int i = 0; i < del; ++i)
			if (remove[i] > a[i])
				a[i] = remove[i], a[t - i - 1] -= remove[i] - v;
		for (; a.size() && a.back() <= 0; a.pop_back());
		b.insert(a.begin(), a.end());
		tot += cnt;
	}
	cout << s - accumulate(b.begin(), b.end(), 0ll) << endl;
	fclose(stdin);
	fclose(stdout);
	return 0;
}

