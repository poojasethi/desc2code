#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<queue>
#define N 1001000
using namespace std;
typedef long long ll;
priority_queue<ll, vector<ll>, greater<ll> > qu;
int q[N], s[N], a[N], b[N], sum, i, j, n, m;
inline int gi() {
    int s = 0; char ch = getchar();
    while (ch > '9' || ch < '0') ch = getchar();
    while (ch <= '9' && ch >= '0') s = s * 10 + ch - '0', ch = getchar();
    return s;
}
int main()
{
    scanf("%d", &n); ll ans = 0;
    for (i = 1; i <= n; i++) s[i] = gi(), ans += (ll)s[i];
    sort(s + 1, s + n + 1);
    reverse(s + 1, s + n + 1);
    for (i = 1; i <= n; i++) {
        if (s[i] != s[i - 1]) a[++m] = s[i];
        b[m]++;
    }
    for (i = 1; i <= m; i++) {
        int x = min(sum - 2 * (int)qu.size(), b[i]);
        int y = min(b[i], sum), z = y - x, t = 0;
        for (j = 1; j <= x; j++) q[++t] = a[i];
        for (j = 1; j <= z; j += 2) {
            int u = qu.top(); qu.pop();
            q[++t] = max(u, a[i]);
            if (j != z && u < a[i]) q[++t] = a[i];
            if (j != z && 2 * a[i] - u > 0 && u >= a[i]) q[++t] = 2 * a[i] - u;
        }
        for (j = 1; j <= t; j++) qu.push(q[j]);
        sum += b[i];
    }
    while (!qu.empty()) ans -= (ll)qu.top(), qu.pop();
    printf("%I64d\n", ans);
    return 0;
}