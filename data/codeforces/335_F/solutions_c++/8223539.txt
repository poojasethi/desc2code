#include<map>
#include<set>
#include<cstdio>
#include<vector>
#include<cstring>
#include<algorithm>
using namespace std;

typedef long long ll;

const int N = 500005;

#define fo(i , st , en) for (int i = st; i <= en; i++)
#define Me(x , y) memset(x , y , sizeof(x))

int n;
ll sum;

int main(){
    map<int , int> t; int x; scanf("%d" , &n);
    fo (i , 1 , n){
        scanf("%d" , &x); t[x]++; sum += x;
    }
    multiset<int> a; int total = 0;
    for (map<int , int>::reverse_iterator p = t.rbegin(); p != t.rend(); p++){
        int value = p->first , num = p->second , last = a.size();
        int maxnum = min((total + num) / 2 , min(total , num + last)) , add = min(num , maxnum) , left = total - last * 2;
        multiset<int>::iterator cur = a.begin();
        fo (i , 1 , last - maxnum + add) cur++;            
        vector<int> temp(a.begin() , cur);
        reverse(temp.begin() , temp.end());
        a.erase(a.begin() , cur); int tot = 0;
        fo (i , 1 , last - maxnum + add)
            if (value > temp[i - 1]){
                a.insert(value); left++;
            }   
            else{
                tot = i; a.insert(temp[i - 1]);
            }
        fo (i , last + 1 , maxnum)
            if (left){
                a.insert(value); left--;
            }
            else{
                a.insert(value + value - temp[--tot]);
            }
        total += num;
    }
    for (multiset<int>::reverse_iterator i = a.rbegin(); i != a.rend(); i++)
        if (*i < 0) break; else sum -= *i;
    printf("%I64d\n" , sum);
    return 0;
}
