#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>
#include <set>
#include <numeric>
using namespace std;
typedef long long ll;

const int N = 500010;
map<int, int> a;
multiset<ll> t;
int n, m, b[N];
ll sum;

bool cmp (int x, int y) {return x > y;}

void read(int &x) {
    char c = getchar();
    for (; c < '0' || c > '9'; ) c = getchar();
    x = 0;
    for (; c >= '0' && c <= '9'; ) x = x * 10 + c - '0', c = getchar();
}

int main() {
    
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {int x; read(x); a[x]++; sum += x;}
    for (map<int, int>::reverse_iterator it = a.rbegin(); it != a.rend(); it++) {
        int x = it->first, y = it->second;
        int pn = min(m, (m + y) / 2);
        int st = max(0, pn - y);
        for (int i = pn - 1; i >= st; i--) if (i < t.size()) b[i] = *t.begin(), t.erase(t.begin()); else b[i] = 0;
        for (int i = st, j = m - i; i < j && i < pn; i++) 
            if (x > b[i]) b[i] = x; else if (--j < pn) b[j] = max(0, 2 * x - b[i]);
        for (int i = st; i < pn; i++) t.insert(b[i]);
        m += y;
    }
    printf("%I64d\n", sum - accumulate(t.begin(), t.end(), 0LL));
    
    return 0;
}