#include <cstdio>
#include <algorithm>
#include <queue>
#include <vector>

using namespace std;

typedef long long LL;

const int N = 500050;

int n, a[N], v[N], cnt[N];
priority_queue<LL, vector<LL>, greater<LL> > Q;

void add_item(int v, int cnt, int sum)
{
	cnt = min(cnt, sum);
	int free = min(sum - 2 * (int)Q.size(), cnt);
	static LL sv[N * 2];
	int svt = 0;
	for (int i = 1; i <= free; ++i) sv[++svt] = v;

	int res = cnt - free;
	for (int i = 1; i <= res; i += 2)
	{
		if (Q.empty())
			break;
		LL tmp = Q.top(); Q.pop();
		if (v >= tmp)
		{
			sv[++svt] = v;
			if (i < res) sv[++svt] = v;
		}
		else
		{
			sv[++svt] = tmp;
			if (i < res) sv[++svt] = 2LL * v - tmp;
		}
	}
	for (int i = 1; i <= svt; ++i) Q.push(sv[i]);
}
int main()
{
	LL ans = 0;
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
	{
		scanf("%d", a + i);
		ans += a[i];
	}
	sort(a + 1, a + n + 1);
	reverse(a + 1, a + n + 1);
	int nn = 0;
	for (int i = 1; i <= n; ++i)
	{
		if (a[i] != a[i - 1])
			v[++nn] = a[i];
		++cnt[nn];
	}
	n = nn;
	int sum = 0;
	for (int i = 1; i <= n; ++i)
	{
		if (i == 5)
			i = 5;
		add_item(v[i], cnt[i], sum);
		sum += cnt[i];
	}
	while (!Q.empty())
	{
	    LL cur = Q.top(); Q.pop();
	    if (cur >= 0) ans -= cur;
	}
	printf("%I64d\n", ans);
}
