#include <cstdio>
#include <algorithm>
inline unsigned int getuint(){
    char w=getchar();
    while (w<'0'||'9'<w) w=getchar();
    unsigned int ans=0;
    for (;'0'<=w&&w<='9';w=getchar()) ans=ans*10+w-'0';
    return ans;
}
int a[500005];
int heap[500005], heap_size;inline bool cmp(int i, int j){return i>j;}
inline void pop(){std::pop_heap(heap, heap+heap_size--, cmp);}
inline void push(int v){heap[heap_size++]=v, std::push_heap(heap, heap+heap_size, cmp);}
int b[500005];
int main(){
    //freopen("ex.in", "r", stdin);
    int n=getuint();
    for (int i=1;i<=n;i++) a[i]=getuint();
    std::sort(a+1, a+n+1);
    for (int r=n, l, remain=0, now, v;r;remain+=now, r=l-1){
        for (v=a[l=r];l&&a[l-1]==a[r];l--);
        for (now=r-l+1;remain&&now;remain--, now--) b[++*b]=v;
        for (;now>=2&&heap_size&&(v<<1)>*heap;pop(), now-=2) if (v>*heap) b[++*b]=v, b[++*b]=v; else b[++*b]=*heap, b[++*b]=(v<<1)-*heap;
        if (now&&heap_size&&v>*heap) b[++*b]=v, pop();
        for (;*b;(*b)--) push(b[*b]);
    }
    long long ans=0;
    for (int i=1;i<=n;i++) ans+=a[i];
    for (int i=0;i<heap_size;i++) ans-=heap[i];
    printf("%I64d\n", ans);
    return 0;
}
