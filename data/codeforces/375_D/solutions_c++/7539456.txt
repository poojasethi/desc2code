#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
using namespace std;
typedef long long ll;
typedef double db;

const int N=1e5+5,M=N;

int n,m;

struct node;
struct edge{
	node *ed;
	edge *next;
} E[N<<1],*newE=E;
struct que{
	int k,ans;
	que *next;
} Q[M];
int cnt[N],sum[N];
struct node{
	edge *son;
	node *pa,*pr;
	que *qson;
	int size,c;
	void dfs(){
		int maxs=0;
		size=1;
		for(edge *e=son;e;e=e->next) if(e->ed!=pa){
			e->ed->pa=this;
			e->ed->dfs();
			size+=e->ed->size;
			if(e->ed->size>maxs){
				maxs=e->ed->size;
				pr=e->ed;
			}
		}
	}
	void doit(){
		for(edge *e=son;e;e=e->next) if(e->ed!=pa)
			e->ed->doit();
		sum[++cnt[c]]++;
	}
	void back(){
		for(edge *e=son;e;e=e->next) if(e->ed!=pa)
			e->ed->back();
		sum[cnt[c]--]--;
	}
	void work(){
		for(edge *e=son;e;e=e->next) if(e->ed!=pa&&e->ed!=pr){
			e->ed->work();
			e->ed->back();
		}
		if(pr) pr->work();
		sum[++cnt[c]]++;
		for(edge *e=son;e;e=e->next) if(e->ed!=pa&&e->ed!=pr)
			e->ed->doit();
		for(que *q=qson;q;q=q->next)
			q->ans=sum[q->k];
	}
} V[N];
int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) scanf("%d",&V[i].c);
	for(int i=1;i<n;i++){
		int a,b; scanf("%d%d",&a,&b);
		*newE=(edge){V+b,V[a].son},V[a].son=newE++;
		*newE=(edge){V+a,V[b].son},V[b].son=newE++;
	}
	for(int i=0;i<m;i++){
		int v; scanf("%d%d",&v,&Q[i].k);
		Q[i].next=V[v].qson;
		V[v].qson=Q+i;
	}
	sum[0]=n;
	V[1].dfs();
	V[1].work();
	for(int i=0;i<m;i++) printf("%d\n",Q[i].ans);
}
