#include<bits/stdc++.h>
#define MP make_pair
#define R second
#define L first
using namespace std;
const int maxn=100*1000+1000;
vector<pair<int, int> > q[maxn];
int fen[maxn], cnt[maxn];
int ans[maxn], sz[maxn];
vector<int> v[maxn];
int c[maxn];

void _add(int id, int val){
	for(id++;id<maxn;id+=id&-id)
		fen[id]+=val;
	return;
}

int get(int id){
	int ret=0;
	for(id;id>0;id-=id&-id)
		ret+=fen[id];
	return ret;
}

int prep(int x, int p=-1){
	sz[x]=1;
	for(int i=0;i<v[x].size();i++){
		if(v[x][i]!=p)
			sz[x]+=prep(v[x][i], x);
		else
			v[x].erase(v[x].begin()+i), i--;
	}
	return sz[x];
}

bool cmp(int a, int b){
	return sz[a]>sz[b];
}

void add(int id, int val){
	_add(cnt[id], -1);
	cnt[id]+=val;
	_add(cnt[id], +1);
}

void Clean(int x, int val){
	for(int i=0;i<v[x].size();i++)
		Clean(v[x][i], val);
	add(c[x], val);
	return ;
}

void dfs(int x){
	//cout << x << endl;
	for(int i=1;i<v[x].size();i++){
		dfs(v[x][i]);
		Clean(v[x][i], -1);
	}
	if(!v[x].empty())
		dfs(v[x][0]);
	for(int i=1;i<v[x].size();i++)
		Clean(v[x][i], +1);
	add(c[x], 1);
	for(int i=0;i<q[x].size();i++)
		ans[q[x][i].L]=get(q[x][i].R);
	return;
}

int main(){
ios_base::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	for(int i=0;i<n;i++)
		cin >> c[i];
	for(int i=0;i<n-1;i++){
		int x, y;
		cin >> x >> y;
		x--, y--;
		v[x].push_back(y);
		v[y].push_back(x);
	}
	for(int i=0;i<m;i++){
		int v, k;
		cin >> v >> k;
		q[--v].push_back(MP(i, k));
	}
	_add(0, n);
	prep(0);
	for(int i=0;i<n;i++)
		sort(v[i].begin(), v[i].end(), cmp);
	dfs(0);
	for(int i=0;i<m;i++)
		cout << n-ans[i] << endl;
}