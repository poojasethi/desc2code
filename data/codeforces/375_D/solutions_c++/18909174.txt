#include<cstdio>
#include<vector>
#include<cassert>
#include<cmath>
#include<cctype>
#include<set>
#include<algorithm>
using namespace std;
const int M=100005;
int col[M],L[M],R[M],dfs_clock,s;
int ans[M],cnt[M],sum[M],tmp[M];
vector<int>edge[M];
struct Query{
	int L,R,num,id;
}q[M];
inline void rd(int&res){
	res=0;char c;
	while(c=getchar(),!isdigit(c));
	do res=res*10+(c^48);
	while(c=getchar(),isdigit(c));
}
void rec(int x,int f){
	L[x]=++dfs_clock;
	for(int i=0;i<edge[x].size();i++)
		if(edge[x][i]!=f) rec(edge[x][i],x);
	R[x]=dfs_clock;
}
bool cmp(Query a,Query b){
	if(a.L/s==b.L/s) return a.R<b.R;
	return a.L/s<b.L/s;
}
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	s=(int)sqrt(n);
	for(int i=1;i<=n;i++)
		rd(col[i]);
	for(int i=1;i<n;i++){
		int a,b;
		rd(a);rd(b);
		edge[a].push_back(b);
		edge[b].push_back(a);
	}
	rec(1,0);
	for(int i=0;i<m;i++){
		int a,b;
		rd(a);rd(b);
		q[i]=(Query){L[a],R[a],b,i};
	}
	for(int i=1;i<=n;i++)
		tmp[i]=col[i];
	for(int i=1;i<=n;i++)
		col[L[i]]=tmp[i];
	sort(q,q+m,cmp);
	int L=0,R=0,res=0;
	for(int i=0;i<m;i++){
		while(R<q[i].R){
			R++;
			cnt[col[R]]++;
			sum[cnt[col[R]]]++;
		}
		while(L>q[i].L){
			L--;
			cnt[col[L]]++;
			sum[cnt[col[L]]]++;
		}
		while(L<q[i].L){
			sum[cnt[col[L]]]--;
			cnt[col[L]]--;
			L++;
		}
		while(R>q[i].R){
			sum[cnt[col[R]]]--;
			cnt[col[R]]--;
			R--;
		}
		ans[q[i].id]=sum[q[i].num];
	}
	for(int i=0;i<m;i++)
		printf("%d\n",ans[i]);
	return 0;
}
