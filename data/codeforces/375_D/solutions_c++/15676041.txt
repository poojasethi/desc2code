#include<bits/stdc++.h>
using namespace std;
struct query
{
	int l,r,id,block,k;
}Q[100005];
int n,m,s,c[100005],timeStamp,A[200005],L[100005],R[100005],ans[100005],cnt[100005],sum[100005];
bool visited[100005];
vector<int>tree[100005];
bool comp(query a,query b)
{	
	if(a.block!=b.block)
		return a.block<b.block;
	return a.r<b.r;
}
void dfs(int u)
{
	A[++timeStamp]=c[u];
	L[u]=timeStamp;
	visited[u]=true;
	for(int j=0;j<(int)tree[u].size();j++)
		if(!visited[tree[u][j]])
			dfs(tree[u][j]);
	R[u]=timeStamp;
}
void queries()
{
	int k,v;
	for(int i=0;i<m;i++)
	{
		scanf("%d%d",&v,&k);
		Q[i].id=i;
		Q[i].l=L[v];
		Q[i].r=R[v];
		Q[i].block=Q[i].l/s;
		Q[i].k=k;
	}
	sort(Q,Q+m,comp);
}
inline void add(int pos)
{
    if(A[pos]==0)return;
    //cout<<"insert "<<pos<<"\n";
	cnt[A[pos]]++;
	sum[cnt[A[pos]]]++;
}
inline void remove(int pos)
{
    if(A[pos]==0)return;
    //cout<<"remove "<<pos<<"\n";
	sum[cnt[A[pos]]]--;
	cnt[A[pos]]--;
}
int main()
{
	int u,v,currentL=0,currentR=0,L,R;
	//ios_base::sync_with_stdio(0);
	scanf("%d%d",&n,&m);
	s=ceil(sqrt(n));
	//cout<<n<<" "<<m<<" "<<s<<"\n";
	for(int i=1;i<=n;i++)scanf("%d",&c[i]);
	for(int i=1;i<n;i++)
	{
		scanf("%d%d",&u,&v);
		tree[u].push_back(v);tree[v].push_back(u);
	}
	timeStamp=0;
	dfs(1);
	queries();
	for(int i=0;i<m;i++)
	{L=Q[i].l,R=Q[i].r;//cout<<L<<" "<<R<<endl;
		while(currentL<L)
			remove(currentL),currentL++;
		while(currentL>L)
			currentL--,add(currentL);
		while(currentR<R)
			currentR++,add(currentR);
		while(currentR>R)
			remove(currentR),currentR--;
		ans[Q[i].id]=sum[Q[i].k];
	}
	for(int i=0;i<m;i++)printf("%d\n",ans[i]);
}
