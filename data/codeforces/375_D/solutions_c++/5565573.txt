#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<map>
#include<cstdio>
#include<vector>
#define N 120000
using namespace std;
int a[N],n,m,i,x,y,size[N],ans[N];
vector <int> E[N];
vector <pair<int,int> >Q[N];
struct vt{
	map<int,int> s;
	vector <int> w;
	void add(int x){
		int p=++s[x];
		if(p>w.size())w.push_back(0);
		w[p-1]++;
	}
	void merge(map<int,int> &tmp){
		for(map<int,int> ::iterator it=tmp.begin();it!=tmp.end();++it)
			for(int i=1;i<=it->second;++i)add(it->first);
	}
};
vt* dfs(int x,int ff){
	vt * t=new vt;
	t->add(a[x]);
	size[x]=1;
	for(int i=0;i<E[x].size();++i)if(E[x][i]!=ff){
		vt *tmp=dfs(E[x][i],x);
		if(size[x]<size[E[x][i]])swap(t,tmp);
		t->merge(tmp->s);
		delete tmp;
		size[x]+=size[E[x][i]];
	}
	for(int i=0;i<Q[x].size();++i){
		int u=Q[x][i].first,v=Q[x][i].second;
		if(u>t->w.size())ans[v]=0;
		else ans[v]=t->w[u-1];
	}
	return t;
}
int main(){
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;++i)scanf("%d",&a[i]);
	for(i=1;i<n;++i){
		scanf("%d%d",&x,&y);
		E[x].push_back(y);
		E[y].push_back(x);
	}
	for(i=1;i<=m;++i){
		scanf("%d%d",&x,&y);
		Q[x].push_back(make_pair(y,i));
	}
	dfs(1,0);
	for(i=1;i<=m;++i)printf("%d\n",ans[i]);
}
