#include <cstdio>
#include <algorithm>
#define REP(i, l, r) for (int i = l; i <= r; i ++)
using namespace std;

typedef int arr32[100010];

const int Sn = 100010, S = 330;

int n, m, Tm;
arr32 cc, c, in, out, p, l, r, x, ls, an, ct, Ans;

struct edge {
     int to, nx;
} E[Sn*2];
int qE[Sn], En = 1;

void dfs(int d, int fa)
{
     in[d] = ++Tm, c[Tm] = cc[d];
     for (int j = qE[d]; j; j = E[j].nx)
	  if (E[j].to != fa) dfs(E[j].to, d);
     out[d] = Tm;
}
bool cmp(const int& i, const int& j) {
     return (l[i]/S < l[j]/S) || (l[i]/S == l[j]/S && r[i] < r[j]);
}

int main()
{
#ifndef ONLINE_JUDGE
     freopen("cf.in" , "r", stdin);
     freopen("cf.out", "w", stdout);
#endif
     scanf("%d%d", &n, &m);
     REP(i, 1, n) scanf("%d", cc + i);
     for (int i = 1, u, v; i < n; i ++) {
	  scanf("%d%d", &u, &v);
	  E[++En] = (edge){v, qE[u]}, qE[u] = En;
	  E[++En] = (edge){u, qE[v]}, qE[v] = En;
     }
     dfs(1, 0);
     REP(i, 1, m) {
	  scanf("%d%d", p + i, x + i);
	  l[i] = in[p[i]], r[i] = out[p[i]], ls[i] = i;
     }
     sort(ls+1, ls+m+1, cmp);
     for (int QAQ = 1, L = 1, R = 0, i; i = ls[QAQ], QAQ <= m; QAQ ++) {
	  while (R < r[i]) an[++ ct[c[++R]]] ++;
	  while (L > l[i]) an[++ ct[c[--L]]] ++;
	  while (R > r[i]) an[ct[c[R--]] --] --;
	  while (L < l[i]) an[ct[c[L++]] --] --;
	  Ans[i] = an[x[i]];
     }
     REP(i, 1, m) printf("%d\n", Ans[i]);
}
