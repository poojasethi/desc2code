#include <bits/stdc++.h>
#define fi first
#define se second
#define endl '\n'

using namespace std;

typedef long long lint;
typedef pair<int,int> ii;
const int MAXN = 2e5;
const int mod = 1e9+7;
const int sqr = 350;

struct node{ int beg,end,k,loc; } qu[MAXN];

ii df[MAXN];
int N,M,col[MAXN],cnt,ar[MAXN],num[MAXN],ans[MAXN],w[MAXN];
vector<int> v[MAXN];

bool comp(const node &a,const node &b){
	if(a.beg/sqr == b.beg/sqr)
		return a.end<b.end;
	return a.beg/sqr < b.beg/sqr;
}

void dfs(int nd,int dad){
	df[nd].fi=++cnt;
	ar[cnt]=nd;
	for(int i=0;i<(int)v[nd].size();i++)
		if(dad!=v[nd][i])
			dfs(v[nd][i],nd);
	df[nd].se=cnt;
}

int main(){
	
	scanf(" %d %d",&N,&M);
	for(int i=1;i<=N;i++)
		scanf(" %d",&col[i]);
	for(int i=1,a,b;i<N;i++){
		scanf(" %d %d",&a,&b);
		v[a].push_back(b);
		v[b].push_back(a);
	}
	
	dfs(1,0);
	
	for(int i=1,a,b;i<=M;i++){
		scanf(" %d %d",&a,&b);
		qu[i].beg=df[a].fi-1;
		qu[i].end=df[a].se;
		qu[i].k=b;
		qu[i].loc=i;
	}
	
	sort(qu+1,qu+M+1,comp);
	
	int b=1,e=1;
	for(int i=1;i<=M;i++){
		int b1=qu[i].beg,e1=qu[i].end;
		while(b<b1){
			b++;
			ans[num[col[ar[b]]]]--;
			num[col[ar[b]]]--;
		}
		while(b>b1){
			num[col[ar[b]]]++;
			ans[num[col[ar[b]]]]++;
			b--;
		}
		while(e<e1){
			e++;
			num[col[ar[e]]]++;
			ans[num[col[ar[e]]]]++;
		}
		while(e>e1){
			ans[num[col[ar[e]]]]--;
			num[col[ar[e]]]--;
			e--;
		}
		w[qu[i].loc]=ans[qu[i].k];
	}
	
	for(int i=1;i<=M;i++)
		printf("%d\n",w[i]);
	
	return 0;
}
