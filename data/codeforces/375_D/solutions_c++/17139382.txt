#include <bits/stdc++.h>
using namespace std;
#define M 100100

int n;
int m;
int Q;
int c[M], clr[M];
int ans[M];
vector<int> v[M];

int dt[M], ft[M], tot;
void dfs(int x, int f) {
	dt[x] = ++ tot;
	clr[tot] = c[x];
	for (int y, i = 0; i < v[x].size(); i ++) {
		if ((y = v[x][i]) == f) {
			continue;
		}
		dfs(y, x);
	}
	ft[x] = tot;
}

struct query{
	int l, r, v, id;
	query(int l = 0, int r = 0, int v = 0, int id = 0) : l(l), r(r), v(v), id(id) {};
} q[M];
bool operator<(query a, query b) {
	int al = a.l / Q, bl = b.l / Q;
	return al != bl ? al < bl : (al & 1) ? a.r < b.r : a.r > b.r;
}

int cnt[M], num[M];

int main() {
	//freopen("D.in", "r", stdin);
	scanf("%d", &n);
	scanf("%d", &m);
	for (int i = 1; i <= n; i++) {
		scanf("%d", c + i);
	}
	for (int x, y, i = 1; i < n; i++) {
		scanf("%d %d", &x, &y);
		//printf("x = %d, y = %d\n", x, y);
		v[x].push_back(y);
		v[y].push_back(x);
	}
	dfs(1, 0);
	Q = sqrt(n + .5);
	//printf("Q = %d\n", Q);

	for (int x, i = 1; i <= m; i++) {
		scanf("%d %d", &x, &q[i].v);
		q[i].l = dt[x];
		q[i].r = ft[x];
		q[i].id = i;
	}
	sort(q + 1, q + m + 1);

	int L = 1, R = 0;
	for (int j = 1; j <= m; j++) {
		int l = q[j].l, r = q[j].r;
		//printf("l = %d, r = %d\n",  l, r);
		while (R < r) {
			cnt[clr[++R]]++;
			num[cnt[clr[R]]]++;
		}
		while (L > l) {
			cnt[clr[--L]]++;
            num[cnt[clr[L]]]++;
		}
		while (R > r) {
			num[cnt[clr[R]]]--;
			cnt[clr[R--]]--;
		}
		while (L < l) {
			num[cnt[clr[L]]]--;
			cnt[clr[L++]]--;
		}
		ans[q[j].id] = num[q[j].v];
	}

	for (int i = 1; i <= m; i++) {
		printf("%d\n", ans[i]);
	}
	return 0;
}
