#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>

using namespace std;

const int MAXN = 100010;
const int MAXM = 200010;
const int MAXQ = 100010;
const int SIZE = 300;

int O[MAXN];

struct Query
{
	int l, r, k, num;
	Query(int nl = 0, int nr = 0, int nk = 0, int nnum = 0)
	{
		l = nl, r = nr, k = nk, num = nnum;
	}
	bool operator < (const Query &A) const
	{
		return O[l] < O[A.l] || O[l] == O[A.l] && r < A.r;
	}
}a[MAXQ];

int n, m, tt;
int c[MAXN], v[MAXN], st[MAXN], ed[MAXN], ans[MAXQ];
int H[MAXN], E[MAXM], X[MAXM], co = 0;
inline void add(int x, int y)
{
	E[++co] = y, X[co] = H[x], H[x] = co;
	E[++co] = x, X[co] = H[y], H[y] = co;
}
void dfs(int x, int ff)
{
	st[x] = ++tt;
	v[tt] = c[x];
	for (int p = H[x]; p; p = X[p])
		if (E[p] != ff)
			dfs(E[p], x);
	ed[x] = tt;
}
int sum[MAXN], cnt[MAXN];
int main()
{
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= n; ++i) scanf("%d", &c[i]);
	int x, y;
	for (int i = 1; i < n; ++i)
	{
		scanf("%d %d", &x, &y);
		add(x, y);
	}
	for (int i = 1; i <= n; ++i) O[i] = (i - 1) / SIZE + 1;
	
	dfs(1, 0);
	
	for (int i = 1; i <= m; ++i)
	{
		scanf("%d %d", &x, &y);
		a[i] = Query(st[x], ed[x], y, i);
	}
	sort(a + 1, a + m + 1);
	int L = 1, R = 0;
	for (int i = 1; i <= m; ++i)
	{
		while (R < a[i].r) ++sum[++cnt[v[++R]]];
		while (R > a[i].r) --sum[cnt[v[R--]]--];
		while (L < a[i].l) --sum[cnt[v[L++]]--];
		while (L > a[i].l) ++sum[++cnt[v[--L]]];
		ans[a[i].num] = sum[a[i].k];
	}
	for (int i = 1; i <= m; ++i) printf("%d\n", ans[i]);
	return 0;
}
