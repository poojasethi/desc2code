#include <bits/stdc++.h>
using namespace std;

const int maxN = 1e5 + 100 , sqrtN = 316;

int N,M,color[maxN],bgn[maxN],end[maxN],ID[maxN],ans[maxN],num[maxN],cur[maxN],visit;
vector < int > way[maxN];

struct node{
	int b,e,rt,limit,plc;
	
	friend bool operator < ( const node &x , const node &y ){
		if( x.rt == y.rt )
			return x.e < y.e;
		return x.rt < y.rt;
	}
	
}query[maxN];

void dfs( int node ){
	
	bgn[node] = ++visit;
	ID[visit] = node;
	
	for( int i=0 ; i < (int)way[node].size() ; i++ )
		if( !bgn[way[node][i]] )
			dfs( way[node][i] );
	
	end[node] = visit;
}

int main(){
	
	scanf("%d%d",&N,&M);
	
	for( int i=1 ; i <= N ; i++ )
		scanf("%d",&color[i]);
	
	for( int i=1,a,b ; i < N ; i++ ){
		scanf("%d%d",&a,&b);
		way[a].push_back(b);
		way[b].push_back(a);
	}
	
	dfs( 1 );
	
	for( int i=1,v,k ; i <= M ; i++ ){
		scanf("%d%d",&v,&k);
		query[i].b = bgn[v];
		query[i].e = end[v];
		query[i].rt = query[i].b / sqrtN;
		query[i].limit = k;
		query[i].plc = i;
	}
	
	sort( query+1 , query+M+1 );
	
	cur[1]++;
	num[color[ID[1]]]++;
	
	for( int i=1,b=1,e=1 ; i <= M ; i++ ){
		
		while( b < query[i].b ){
			cur[ num[ color[ ID[b] ] ] ]--;
			num[ color[ ID[b] ] ]--;
			b++;
		}
		while( b > query[i].b ){
			b--;
			num[ color[ ID[b] ] ]++;
			cur[ num[ color[ ID[b] ] ] ]++;
		}
		while( e < query[i].e ){
			e++;
			num[ color[ ID[e] ] ]++;
			cur[ num[ color[ ID[e] ] ] ]++;
		}
		while( e > query[i].e ){
			cur[ num[ color[ ID[e] ] ] ]--;
			num[ color[ ID[e] ] ]--;
			e--;
		}
		
		ans[query[i].plc] = cur[query[i].limit];
	}
	
	for( int i=1 ; i <= M ; i++ )
		printf("%d\n",ans[i]);
	
	return 0;
}
