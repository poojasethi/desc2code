#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

int n, m, a, b, col[123456], sz[123456], q[123456], qans[123456], cc[123456], tr[(1<<17)+1];
vector<int> al[123456], qs[123456];
void ch(int at, int sc) {
	while (at <= 1<<17) {
		tr[at] += sc;
		at += (at&-at);
	}
}
int qry(int at) {
	int res = 0;
	while (at) {
		res += tr[at];
		at -= (at&-at);
	}
	return res;
}
bool cmp(int a, int b) {
	return sz[a] > sz[b];
}
void upd(int at, int sc) {
	ch(100000-cc[col[at]], -1);
	cc[col[at]] += sc; ch(100000-cc[col[at]], 1);
}
void updtr(int at, int sc) {
	upd(at, sc);
	for (int i = 0; i < al[at].size(); i++) updtr(al[at][i], sc);
}
void dfs1(int at, int cal) {
	sz[at] = 1;
	for (int i = 0; i < al[at].size();) {
		if (al[at][i] != cal) {
			dfs1(al[at][i], at); sz[at] += sz[al[at][i]]; i++;
		}
		else al[at].erase(al[at].begin()+i);
	}
}
void dfs2(int at) {
	for (int i = 1; i < al[at].size(); i++) {
		dfs2(al[at][i]); updtr(al[at][i], -1);
	}
	if (!al[at].empty()) dfs2(al[at][0]);
	for (int i = 1; i < al[at].size(); i++) updtr(al[at][i], 1);
	upd(at, 1);
	for (int i = 0; i < qs[at].size(); i++) {
		qans[qs[at][i]] = qry(100000-q[qs[at][i]]);
	}
}
int main() {
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= n; i++) scanf("%d", col+i);
	for (int i = 0; i < n-1; i++) {
		scanf("%d %d", &a, &b);
		al[a].push_back(b); al[b].push_back(a);
	}
	for (int i = 0; i < m; i++) {
		scanf("%d %d", &a, q+i);
		qs[a].push_back(i);
	}
	dfs1(1, 0);
	for (int i = 0; i < n; i++) sort(al[i].begin(), al[i].end(), cmp);
	dfs2(1);
	for (int i = 0; i < m; i++) printf("%d\n", qans[i]);

	return 0;
}