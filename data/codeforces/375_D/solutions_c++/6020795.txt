#include<stdio.h>
#include<memory.h>
#include<algorithm>
#include<math.h> 
using namespace std;
	
const int N=200005;
	
int cnt,S,b[N],v[N],next[N],to[N],L[N],R[N],a[N],c[N],s[N],ans[N],mem[N];
struct node{
	int l,r,k,i;
	bool operator<(const node &m)const{
		if(l/S==m.l/S) return r<m.r;
		return l/S<m.l/S;
//		return l/S!=m.l/S?l/S!<m.l/S:r<m.r;
	}
}q[N];
	
inline void add(int x,int y){
	to[cnt]=y;
	next[cnt]=v[x];
	v[x]=cnt++;
}	
void dfs(int x){
	mem[x]=1;
	L[x]=++cnt;b[cnt]=a[x];
	for(int i=v[x];i;i=next[i]) if(!mem[to[i]]) dfs(to[i]);
	R[x]=cnt;
}	
int main(){
	int l,r,i,j,n,m,k,t,x,y;
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;i++) scanf("%d",&a[i]);
	for(cnt=1,i=0;i<n-1;i++){
		scanf("%d%d",&x,&y);
		add(x,y),add(y,x);
	}
	cnt=0,dfs(1);
	for(i=0;i<m;i++){
		scanf("%d%d",&x,&q[i].k);
		q[i].i=i;q[i].l=L[x],q[i].r=R[x];
//		printf("%d %d---\n",q[i].l,q[i].r);
	}
	S=sqrt(n);
	sort(q,q+m);
/*	for(i=0;i<m;i++){
		printf("%d %d %d\n",q[i].i,q[i].l,q[i].r);
	}
	for(i=1;i<=n;i++)
		printf("%d ",L[i]);
	printf("\n");
	for(i=1;i<=n;i++)
		printf("%d ",R[i]);
	printf("\n");*/
	for(l=1,r=i=0;i<m;i++){
		x=q[i].i;
		while(l<q[i].l) --c[s[b[l++]]--];
		while(l>q[i].l) ++c[++s[b[--l]]];
		while(r<q[i].r) ++c[++s[b[++r]]]; 
		while(r>q[i].r) --c[s[b[r--]]--];
		ans[x]=c[q[i].k];
//		printf("x=%d %d %d\n",x,q[i].l,q[i].r);
//		printf("x=%d %d %d %d %d %d\n",x,l,r,q[x].l,q[x].r,ans[x]);
//		for(j=1;j<=n;j++)
//			printf("%d ",s[j]);
//		printf("\n");
	}
	for(i=0;i<m;i++) printf("%d\n",ans[i]);
	return 0;
}	