#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <bitset>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <climits>
typedef long long LL;
using namespace std ;

struct node{
    map<int,int> cnt;
    vector<int> s;
    int size;
    node(){
        size=0;
    }
    void add(int x){
        ++size; ++cnt[x];
        while (s.size()<=cnt[x]) s.push_back(0);
        ++s[cnt[x]];
    }
    int get(int x){
        return x<s.size()?s[x]:0;
    }
};
node aa[110000],*a[110000];
vector<int> G[110000];
vector< pair<int,int> > q[110000];
int ans[110000],c[110000];

void merge(node* &u,node* v){
    if (u->size<v->size) swap(u,v);
    for (map<int,int>::iterator i=v->cnt.begin();i!=v->cnt.end();i++)
        for (int j=0;j<i->second;j++) u->add(i->first);
}

void dfs(int u,int p){
    for (vector<int>::iterator i=G[u].begin();i!=G[u].end();i++){
        if (*i==p) continue;
        dfs(*i,u);
        merge(a[u],a[*i]);
    }
    a[u]->add(c[u]);
    for (vector< pair<int,int> >::iterator i=q[u].begin();i!=q[u].end();i++) ans[i->first]=a[u]->get(i->second);
}

int main(){
    int N,M,i,u,v;
    scanf("%d%d",&N,&M);
    for (i=1;i<=N;i++){
        scanf("%d",&c[i]); a[i]=&aa[i];
    }
    for (i=1;i<N;i++){
        scanf("%d%d",&u,&v); G[u].push_back(v); G[v].push_back(u);
    }
    for (i=0;i<M;i++){
        scanf("%d%d",&u,&v); q[u].push_back(make_pair(i,v));
    }
    dfs(1,0);
    for (i=0;i<M;i++) printf("%d\n",ans[i]);
}
