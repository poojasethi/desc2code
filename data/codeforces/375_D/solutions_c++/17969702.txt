#include <bits/stdc++.h>
typedef long long ll;
using namespace std;
const int N = 100005;
int n, m, z, a, b, id, l, r, res, c[N], L[N], R[N], O[N], ans[N], freq[N + 1], ac[N + 1];

vector<int> g[N];

struct Query {
	int l, r, idx, k;
	Query(int L = 0, int R = 0, int IDX = 0, int K = 0) {
		l = L, r = R, idx = IDX, k = K;
	}
	bool operator <(const Query &o) const {
		if (l / z != o.l / z)
			return l / z < o.l / z;
		return r < o.r;
	}
} q[N];

int dfs(int u, int p) {
	L[u] = R[u] = id;
	O[id++] = u;
	for (int i = 0; i < (int) g[u].size(); ++i)
		if (g[u][i] != p)
			R[u] = dfs(g[u][i], u);
	return R[u];
}

int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i)
		scanf("%d", c + i);
	for (int i = 1; i < n; ++i) {
		scanf("%d%d", &a, &b);
		--a, --b;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	dfs(0, -1);
	for (int i = 0; i < m; ++i) {
		scanf("%d%d", &a, &b);
		--a;
		q[i] = Query(L[a], R[a], i, b);
	}
	z = sqrt(n) + 1;
	sort(q, q + m);
	l = 0, r = -1, res = 0;
	for (int i = 0; i < m; ++i) {
		Query &t = q[i];

		while (r < t.r)
			++ac[++freq[c[O[++r]]]];

		while (r > t.r)
			--ac[freq[c[O[r--]]]--];

		while (l > t.l)
			++ac[++freq[c[O[--l]]]];

		while (l < t.l)
			--ac[freq[c[O[l++]]]--];

		ans[t.idx] = ac[t.k];
	}

	for (int i = 0; i < m; ++i)
		printf("%d\n", ans[i]);
	return 0;
}
