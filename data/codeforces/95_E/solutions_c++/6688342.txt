#include <algorithm>
#include <string>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <cassert>
#include <queue>
#include <cstdlib>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define lli long long int
#define all( gg )	gg.begin(),gg.end()
#define foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define FP( ii,aa,bb ) for( int ii=aa;ii<=bb;ii++ )
#define FM( ii,aa,bb ) for( int ii=aa;ii>=bb;ii-- )

using namespace std;

int n,m,cnt,res,h[200000],s[200000];
vector<int>	v[200000];

int dp[200000];

void dfs( int nod ){
	if( h[nod] )	return;
	h[nod]=1;
	cnt++;
	foreach( v[nod],it )
		dfs( *it );
}

void rec( int lucky ){
	if( lucky*10+4<=n ){
		res = min( res,dp[lucky*10+4] );
		rec( lucky*10+4 );
	}
	if( lucky*10+7<=n ){
		res = min( res,dp[lucky*10+7] );
		rec( lucky*10+7 );
	}
}

int main(){

	cin >> n >> m;
	
	int x,y;
	FP( i,1,m ){
		scanf("%d %d",&x,&y);
		v[x].pb(y);
		v[y].pb(x);
	}
	
	FP( i,1,n ){
		if( h[i] )	continue;
		cnt=0;
		dfs( i );
		s[cnt]++;
	}
	
	FP( i,1,n )	dp[i] = n+1;
	FP( a,1,n )
		for( int t=1;s[a];t*=2 ){
			int k = min( t,s[a] );
			s[a] -= k;
			FM( i,n,k*a )
				dp[i] = min( dp[i],dp[i-k*a]+k );
		}
	
	res = n+1;
	rec( 0 );
	if( res!=n+1 )
		cout << res-1 << endl;
	else
		cout << -1 << endl;

}
