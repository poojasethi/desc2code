#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())

#define MAX 100005
#define UNION_N MAX
int parent[UNION_N];
void init(){
	rep(i,UNION_N) parent[i]=i;
}
int find(int a){
	if(parent[a]==a) return a;
	return parent[a]=find(parent[a]);
}
void uni(int a,int b){
	parent[find(a)]=find(b);
	return ;
}

li dp[MAX];

int main(){
	init();
	li n,m;
	cin>>n>>m;
	rep(i,m){
		li t0,t1;
		cin>>t0>>t1;
		uni(t0-1,t1-1);
	}
	map<li,li> cnt_mp,mp;
	rep(i,n) cnt_mp[find(i)]++;
//rep(i,n) cout<<find(i)<<endl;
	rep(i,MAX)if(cnt_mp.find(i)!=cnt_mp.end()) mp[cnt_mp[i]]++;
#define INF (1<<25)
	rep(i,MAX) dp[i]=(i==0)?0:INF;
	rep(i,MAX)if(mp.find(i)!=mp.end()){
		li base=1;
		while(mp[i]){
//cout<<i<<" "<<mp[i]<<endl;
			li tmp=min(mp[i],base);
			mp[i]-=tmp;
			rep(j,MAX-tmp*i) dp[MAX-j-1]=min(dp[MAX-j-1],dp[MAX-tmp*i-j-1]+tmp);
			base*=2;
		}
	}
//rep(i,MAX)if(dp[i]<INF) cout<<i<<" "<<dp[i]<<endl;
	li res=INF;
	rep(i,MAX)if(i){
		bool flag=true;
		li tmp=i;
		while(tmp){
			if(tmp%10!=4 && tmp%10!=7) flag=false;
			tmp/=10;
		}
		if(flag) res=min(res,dp[i]);
	}
	if(res==INF) res=0;
	cout<<res-1<<endl;
}
