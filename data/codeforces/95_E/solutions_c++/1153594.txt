#include<iostream>
#include<cstdio>
#include<ctime>
#include<cstdlib>
using namespace std;
const int N = 100000 + 2;
int cnt[N], n, m, f[N], num[N];
int dp[N];
void init()
{
    for(int i = 1; i <= n; ++i)
    {
        f[i] = i;
    }
}
int getRoot(int x)
{
    return f[x] = (x == f[x] ? x : getRoot(f[x]));
}
void unions(int x, int y)
{
    x = getRoot(x);
    y = getRoot(y);
    if(rand() & 1)
        f[x] = y;
    else
        f[y] = x;
}
void dfs(int x)
{
    if(x > n) return ;
    if(x != 0)
    {
        m = min(m , dp[x]);
    }
    dfs(x * 10 + 4);
    dfs(x * 10 + 7);
}
int main()
{
    cin >> n >> m;
    init();
    while(m--)
    {
        int x, y;
        scanf("%d%d",&x,&y);
        unions(x, y);
    }
    for(int i = 1; i <= n; ++i)
    {
        ++num[getRoot(i)];
    }
    for(int i = 1; i <= n; ++i)
    {
        ++cnt[num[i]];
        dp[i] = N;
    }
    dp[0] = -1;
    for(int i = 1; i <= n; ++i)
    {
        int t = 1;
        while(cnt[i])
        {
            if(t > cnt[i]) t = cnt[i];
            for(int j = n; j >= i * t; --j)
            {
                if(dp[j] > dp[j - i * t] + t)
                    dp[j] = dp[j - i * t] + t;
            }
            cnt[i] -= t;
            t <<= 1;
        }
    }
    m = N;
    dfs(0);
    cout << (m < N ? m : -1) << endl;
    return 0;
}
