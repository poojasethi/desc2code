#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

int g[100005];
int siz[100005];
int FIND(int x) { return g[x]==x?x:g[x]=FIND(g[x]); }
void UNION(int x, int y) {
	if(FIND(x)==FIND(y)) return;
	siz[FIND(y)] += siz[FIND(x)];
	g[FIND(x)] = FIND(y);
}
int c[100005];
int dp[100005]={};
inline int islucky(int x) {
	while(x>0) { if(x%10!=4 && x%10!=7) return false; x/=10;}
	return true;
}
int main(void) {
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i=1;i<=n;i++) g[i]=i, siz[i]=1;
	for(int i=0;i<m;i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		UNION(x, y);
	}
	for(int i=1;i<=n;i++)
		if(FIND(i)==i) {
			c[siz[i]]++;
		}
	for(int i=1;i<=n;i++) dp[i] = 100005;
	int nowsum=0;
	for(int i=1;i<=n;i++) {
		if(!c[i]) continue;
		if(c[i]) {
			for(int t=1;t<=c[i];t*=2) {
				for(int j=nowsum;j>=0;--j)
					dp[j+i*t] =min(dp[j+i*t], dp[j]+t);
				nowsum += i*t;
				c[i] -= t;
				if(c[i]%(t*2)) {
					for(int j=nowsum;j>=0;--j)
						dp[j+i*t] =min(dp[j+i*t], dp[j]+t);
					nowsum += i*t;
					c[i] -= t;
				}
			}
		}
	}
	const int INF=100005;
	int ans=INF;
	for(int i=1;i<=n;i++) if(islucky(i)) ans=min(ans, dp[i]);
	if(ans==INF) printf("-1\n");
	else printf("%d\n", ans-1);
	return 0;
}

