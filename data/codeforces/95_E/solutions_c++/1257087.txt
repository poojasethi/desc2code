#include <cstdio>
#include <algorithm>
using namespace std;

const int N = 100005;
const int INF = 1 << 29;

int f[N], cnt[N], tot[N], dp[N * 2];

int getf(int x) {
	return x == f[x] ? x : f[x] = getf(f[x]);
}
bool isluck(int x) {
	while (x) {
		if (x % 10 != 4 && x % 10 != 7) return false;
		x /= 10;
	}
	return true;
}

int main() {
	int n, m;

	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; i++) {
		f[i] = i;
	}
	for (int i = 0; i < m; i++) {
		int x, y;
		scanf("%d %d", &x, &y);
		f[getf(x)] = getf(y);
	}
	for (int i = 1; i <= n; i++) {
		tot[getf(i)]++;
	}
	for (int i = 1; i <= n; i++) {
		cnt[tot[i]]++;
	}
	fill(dp + 1, dp + n + 1, INF);
	dp[0] = 0;
	for (int i = 1; i <= n; i++) {
		if (cnt[i]) {
			int num = cnt[i];
			for (int j = 1; num > 0; j <<= 1) {
				int q = min(j, num);
				num -= q;
				for (int k = max(0, n - q * i); k >= 0; k--) {
					dp[k + q * i] = min(dp[k + q * i], dp[k] + q);
				}
			}
		}
	}
	int ret = INF;
	for (int i = 1; i <= n; i++) {
		if (isluck(i)) {
			ret = min(ret, dp[i]);
		}
	}
	printf("%d\n", ret == INF ? -1 : ret - 1);

	return 0;
}
