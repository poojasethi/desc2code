#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cstdlib>

using namespace std;
const int MaxN=100011;
int d[MaxN], f[MaxN];
int getFather(int x) {
	if(f[x] == x)
		return x;
	f[x] = getFather(f[x]);
	return f[x];
}

void merge(int x, int y){
	x = getFather(x), y = getFather(y);
	if (x == y) return;
	if (d[x] < d[y])
		swap(x,y);
	d[x] += d[y];
	d[y] = 0;
	f[y] = x;
}

bool isLucky(int x) {
	while (x){
		if (x % 10 != 4 && x % 10 != 7)
			return false;
		x /= 10;
	}
	return true;
}
int cnt[MaxN],dp[MaxN];
int main() {
	int n, m, x, y;
	// freopen("E.in","r",stdin);
	scanf("%d%d",&n,&m);
	for (int i = 1; i <= n; i++)
		f[i] = i, d[i] = 1, dp[i] = 0x3fffffff;
	for (int i = 1; i <= m; i++) {
		scanf("%d%d",&x,&y);
		merge(x,y);
	}
	for (int i = 1; i <= n; i++)
		cnt[d[i]]++;
	// dp[k] = min(dp[k - j * i] + j)
	for (int i = 1; i <= n; i++)
		if (cnt[i] > 0) {
			for (int j = 1; cnt[i] > 0; j <<= 1) {
				if (j > cnt[i])
					j = cnt[i];
				cnt[i] -= j;
				for (int k = n; k >= j *  i; k--) 
					dp[k] = min(dp[k], dp[k - j * i] + j);
			}
		}
	int ans = 0x7fffffff;
	for (int i = 1; i <= n; i++)
		if (isLucky(i))
			ans = min(ans, dp[i]-1);
	printf("%d\n",(ans > n)?(-1):ans);
}