//make knapsack
//dp
//start	:	8:24
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;

const int inf=1000000000;
const int maxn=100005;
vector<int> link[maxn];
int n,m;
int num[maxn];
bool V[maxn];

int dfs(int x)
{
	int ret=1;V[x]=1;
	for(int k=0;k<link[x].size();++k)if(!V[link[x][k]])ret+=dfs(link[x][k]);
	return ret;
}

int N;
int w[maxn],c[maxn];
int f[maxn];

inline void upmin(int &x,int t){if(t<x)x=t;}

inline bool check(int x)
{
	for(int i;x;x/=10)
	{
		i=x%10;
		if(i!=4&&i!=7)return 0;
	}
	return 1;
}

int main()
{
//	freopen("in","r",stdin);
	
	scanf("%d%d",&n,&m);
	for(int i=1,x,y;i<=m;++i)
	{
		scanf("%d%d",&x,&y);
		link[x].push_back(y),link[y].push_back(x);
	}
	
	for(int i=1;i<=n;++i)if(!V[i])++num[dfs(i)];
	
	for(int i=1,j;i<=n;++i)if(num[i])
	{
		int k=num[i];
		for(j=1;j<=k;k-=j,j<<=1)w[++N]=i*j,c[N]=j;
		if(k)w[++N]=i*k,c[N]=k;
	}
	
	for(int i=1;i<=n;++i)f[i]=inf;
	for(int i=1;i<=N;++i)
	for(int j=n;j>=w[i];--j)
		upmin(f[j],f[j-w[i]]+c[i]);
	
	int Ans=inf;
	for(int i=4;i<=n;++i)if(check(i))upmin(Ans,f[i]);
	
	if(Ans<inf)printf("%d\n",Ans-1);else puts("-1");
	
	return 0;
}
