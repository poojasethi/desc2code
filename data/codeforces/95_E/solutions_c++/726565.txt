#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <bitset>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li       	long long int
#define rep(i,to)	for(li i=0;i<((li)(to));i++)
#define pb       	push_back
#define sz(v)    	((li)v.size())
#define bit(n)   	(1ll<<(li)(n))


#define MAX 100005
li dp[MAX];
li parent[MAX];
li n,m,cnt[MAX];
li num[MAX];

li find(li t){
	if(parent[t]==t) return t;
	return parent[t]=find(parent[t]);
}

void renew(li t){
	for(li i=MAX-1;0<=i;i--)if(dp[i]!=bit(60)){
		for(li j=1;j<=num[t];j++){
			if(MAX<=i+j*t) break;
			if(dp[i+j*t]<=dp[i]+j) break;
			dp[i+j*t]=dp[i]+j;
		}
	}
}

li search(li t){
	if(MAX<=t) return bit(60);
	li res=t?dp[t]:bit(60);
	res=min(res,search(t*10+4));
	res=min(res,search(t*10+7));
	return res;
}

int main(){
	rep(i,MAX) parent[i]=i;
	rep(i,MAX) dp[i]=bit(60);
	dp[0]=0;
	cin>>n>>m;
	rep(i,m){
		li a,b;
		cin>>a>>b; a--; b--;
		parent[find(a)]=find(b);
	}
	rep(i,n) cnt[find(i)]++;
	rep(i,MAX) num[cnt[i]]++;
	for(li i=n;0<i;i--)if(num[i]) renew(i);
	li res=search(0);
	cout<<((res==bit(60))?-1:res-1)<<endl;
}
