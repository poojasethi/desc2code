#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
#include <map>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

#define FOR(i,a,b) for (int i=(a),_b=(b); i<=_b; i++)
#define REP(i,n) for (int i=0,_n=(n); i<_n; i++)

#define MAXN 100010

int n,m, vis[MAXN], lucky[MAXN], dp[MAXN], cnt[MAXN];
vector<int> con[MAXN];

int dfs(int i){
	if (vis[i]) return 0;
	vis[i] = 1;
	int ret = 1;
	REP(j,con[i].size())
		ret += dfs(con[i][j]);
	return ret;
}

void gen(int num){
	if (num >= MAXN) return;
	lucky[num] = 1;
	gen(num*10 + 4);
	gen(num*10 + 7);
}

int main(){
	gen(4); gen(7);

	scanf("%d %d",&n,&m);
	REP(i,m){
		int u,v;
		scanf("%d %d",&u,&v); u--; v--;
		con[u].push_back(v);
		con[v].push_back(u);
	}
	REP(i,n) if (!vis[i]) cnt[dfs(i)]++;

	REP(i,MAXN) dp[i] = MAXN;
	dp[0] = 0;
	REP(i,MAXN) if (cnt[i]){
		int rem = cnt[i];
		for (int k=1; rem>0; rem-=k, k<<=1){
			int elem = min(k, rem);
			int jump = elem * i;
			for (int j=MAXN-1-jump; j>=0; j--)
				dp[j+jump] = min(dp[j+jump], dp[j]+elem);
		}
	}
	int res = MAXN;
	REP(i,MAXN) if (lucky[i] && dp[i] < res) res = dp[i];
	printf("%d\n",res==MAXN?-1:(res-1));
}
