#include "stdio.h"
#define wr printf("-----------\n");
#define MAXN 100009
#define umin(x,y) (x>y?(x=y):x=x);
#define INF 1000000007
int dp[MAXN],cnt[MAXN];
int lucky(int x){
	while(x>=1){
		if(x%10!=4 and x%10!=7)
			return 0;
		x/=10;
	}
	return 1;
}
struct dsu{
	int ata[MAXN],rank[MAXN];
	void init(int x){
		for(int i=1;i<=x;i++)
			ata[i]=i,rank[i]=1;
	}
	int tap(int x){
		if(ata[x]==x)
			return x;
		return ata[x]=tap(ata[x]);	
	}
	void merge(int x,int y){
		if((x=tap(x))==(y=tap(y)))
			return;
		if(rank[y]<=rank[x]){
			rank[x]+=rank[y];
			ata[y]=x;
		}
		else{
			rank[y]+=rank[x];
			ata[x]=y;
		}
	}
}T;
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	T.init(n);
	for(int i=1;i<=m;i++){
		int u,v;
		scanf("%d%d",&u,&v);
		T.merge(u,v);
	}
	for(int i=1;i<=n;i++)
		if(T.ata[i]==i)
			cnt[T.rank[i]]++;
	int ans=INF;
	for(int i=0;i<MAXN;i++)
		dp[i]=INF;
	dp[0]=0;
	for(int i=1;i<=n;i++){
		if(!cnt[i])
			continue;
		int cof=1;	
		while(cnt[i]>=1){
			cnt[i]-=cof;
			for(int j=n-cof*i;j>=0;j--)
				umin(dp[j+cof*i],dp[j]+cof);
			cof*=2;umin(cof,n);	
		}
	}
	for(int i=1;i<=n;i++)
		if(lucky(i))
			umin(ans,dp[i]);
	if(ans==INF)				
		ans=0;
	printf("%d\n",ans-1);
	return 0;	
}