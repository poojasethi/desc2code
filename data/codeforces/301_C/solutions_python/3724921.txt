import re

cMaxIter = 20

class Alg:
  aSteps = list()
  def dump(self):
    for sStep in self.aSteps:
      print sStep
  def run(self, nIn):
    sIn = str(nIn)
    iIter = 0
    while True:
      bFound = False
      bLast = False
      for sStep in self.aSteps:
        bLast = sStep.find("<>") >= 0
        sStep = sStep.replace("<>", ">>")
        parts = sStep.split(">>")
        if parts[0] == "":
          sIn = parts[1] + sIn
          bFound = True
          break
        elif sIn.find(parts[0]) >= 0:
          sIn = sIn.replace(parts[0], parts[1])
          bFound = True
          break
      # if bFound: print sStep, sIn
      if not bFound: break
      if bFound and bLast: break
      iIter += 1
      if iIter == cMaxIter: break
    return [nIn, sIn]
    
alg = Alg()
sU1 = '78345'
sU2 = '?'
for i in range(10):
  alg.aSteps.append(sU1 + str(i) + ">>" + str(i) + sU1)
alg.aSteps.append(sU1 + ">>" + sU2)
for i in range(9):
  alg.aSteps.append(str(i) + sU2 + "<>" + str(i+1))
alg.aSteps.append("9" + sU2 + ">>" + sU2 + "0")  
alg.aSteps.append(sU2 + "0<>10")
alg.aSteps.append(">>" + sU1)

alg.dump()

# print alg.run(877)
# print alg.run(8789)
# print alg.run(8799)
# print alg.run(999)
