#include <bits/stdc++.h>
using namespace std;
const int MOD = (int)1e9 + 7;
const int maxn = 200005;
vector <int> E[maxn], ans[maxn], pre[maxn], suf[maxn];
int tot[maxn], up[maxn];
void dfs(int x, int fa) {
	int n = E[x].size();
	ans[x].resize(n);
	pre[x].resize(n);
	suf[x].resize(n);

	for(int i = 0; i < n; i++) {
		int u = E[x][i];
		if(u != fa) {
			dfs(u, x);
			ans[x][i] = tot[u] + 1;
		} else {
			ans[x][i] = 1;
		}
	}
	int tmp = 1;
	for(int i = 0; i < n; i++) {
		tmp = (long long)tmp * ans[x][i] % MOD;
		pre[x][i] = tmp;
	}
	tmp = 1;
	for(int i = n - 1; i >= 0; i--) {
		tmp = (long long)tmp * ans[x][i] % MOD;
		suf[x][i] = tmp;
	}
	tot[x] = pre[x][n - 1];
}
void dfs_again(int x, int fa) {
	int n = E[x].size();
	for(int i = 0; i < n; i++) {
		int u = E[x][i];
		if(u != fa) {
			up[u] = (long long)(up[x] + 1) * (i > 0 ? pre[x][i - 1] : 1) % MOD * (i + 1 < n ? suf[x][i + 1] : 1) % MOD;
			dfs_again(u, x);
		} 
	}
}
int main() {
	int n, x;
	scanf("%d", &n);
	for(int i = 2; i <= n; i++) {
		scanf("%d", &x);
		E[i].push_back(x);
		E[x].push_back(i);
	}
	dfs(1, 0);
	dfs_again(1, 0);
	for(int i = 1; i <= n; i++) {
		printf("%I64d%c", (long long)(up[i] + 1) * tot[i] % MOD, i == n ? '\n' : ' ');
	}
	return 0;
}
