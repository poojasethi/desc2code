#include<cstdio>
#include<vector>
#include<iostream>
using namespace std;
typedef long long LL;
const int N=2e5+5;
const int MOD=1e9+7;
int n;
vector<LL> G[N],L[N],R[N];
LL dp[N], up[N];

void dfsdown(int x,int fa)
{
   dp[x]=1;  int v;
   for(int i=0;i<G[x].size();i++)
   {
  	   v=G[x][i];
  	   if(v==fa){ L[x].push_back(1); R[x].push_back(1);continue; }
  	   dfsdown(v,x);
  	   L[x].push_back(dp[v]+1);
  	   R[x].push_back(dp[v]+1);
  	   dp[x]=dp[x]*(dp[v]+1)%MOD;
   }
   for(int i=1;i<L[x].size();i++)   L[x][i]=L[x][i]*L[x][i-1]%MOD;
   for(int i=R[x].size()-2;i>=0;i--)R[x][i]=R[x][i]*R[x][i+1]%MOD;
}

void dfsup(int x,int fa,LL value)
{
	up[x]=value;  int v; LL tem;
	for(int i=0;i<G[x].size();i++)
	{
		v=G[x][i];
		tem=value;
		if(v==fa)continue;
		if(i>0)            tem=tem*L[x][i-1]%MOD;
		if(i<G[x].size()-1)tem=tem*R[x][i+1]%MOD;
		dfsup(v,x,tem+1);
	}
}

int main()
{    
     int x;
	 scanf("%d",&n);
	 for(int i=2;i<=n;i++)
	 {
	 	 scanf("%d",&x);
	 	 G[i].push_back(x); G[x].push_back(i);
	 }
	 dfsdown(1,0);
	 dfsup(1,0,1);
	 for(int i=1;i<=n;i++) ( i==n? printf("%I64d\n",up[i]*dp[i]%MOD): printf("%I64d ",up[i]*dp[i]%MOD));
}
	   	 		 	 		  	   					 	  		