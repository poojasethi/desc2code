#include <cstdio>
#include <cassert>
#include <vector>

typedef long long i64;

const int N = 200000 + 10, MOD = 1000000007;

int n, fa[N];
std::vector<int> son[N];

int main() {
  scanf("%d", &n);
  for (int i = 2; i <= n; ++i) {
    scanf("%d", fa + i);
    son[fa[i]].push_back(i);
  }
  static std::vector<int> q;
  static int up[N], down[N];
  q.push_back(1);
  for (int i = n; i > 0; --i) {
    down[i] = 1;
    for (int j = 0; j < son[i].size(); ++j) 
      down[i] = (i64)down[i] * (down[son[i][j]] + 1) % MOD;
  }
  up[1] = 1;
  for (int i = 1; i <= n; ++i) {
    static int pre[N], suf[N];
    for (int j = 0; j < son[i].size(); ++j) pre[j] = suf[j] = (down[son[i][j]] + 1) % MOD;
    for (int j = 1; j < son[i].size(); ++j) pre[j] = (i64)pre[j] * pre[j - 1] % MOD;
    for (int j = son[i].size() - 2; j >= 0; --j) suf[j] = (i64)suf[j] * suf[j + 1] % MOD;
    for (int j = 0; j < son[i].size(); ++j)
      up[son[i][j]] = ((i64)up[i] * (j ? pre[j - 1] : 1) % MOD * (j + 1 < son[i].size() ? suf[j + 1] : 1) % MOD + 1) % MOD;
  }
  for (int i = 1; i <= n; ++i) printf("%I64d%c", (i64)up[i] * down[i] % MOD, i == n ? '\n' : ' ');
  return 0;
}

 	    		  		    	   				  					