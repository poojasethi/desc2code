#include <iostream>
#include <vector>
using namespace std;
const int MOD = 1000000007;
const int MAX = 200005;
long long down[MAX], up[MAX];
vector<int> adj[MAX];
void dfs_down(int v)
{
	down[v] = 1;
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		dfs_down(u);
		down[v] = down[v] * (down[u] + 1) % MOD;
	}
}
void dfs_up(int v)
{
	vector<long long> l, r;
	l.resize(adj[v].size() + 1, 1);
	r.resize(adj[v].size() + 1, 1);
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		l[i + 1] = l[i] * (down[u] + 1) % MOD;
	}
	for (int i = (int)adj[v].size() - 1; i > 0; i--)
	{
		int u = adj[v][i];
		r[i - 1] = r[i] * (down[u] + 1) % MOD;
	}
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		up[u] = l[i] * r[i] % MOD * (up[v] + 1) % MOD;
		dfs_up(u);
	}
}
int main()
{
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 1; i < n; i++)
	{
		int p;
		cin >> p;
		p--;
		adj[p].push_back(i);
	}
	dfs_down(0);
	dfs_up(0);
	for (int i = 0; i < n; i++)
		cout << down[i] * (up[i] + 1) % MOD << " ";
	cout << endl;
	return 0;
}
