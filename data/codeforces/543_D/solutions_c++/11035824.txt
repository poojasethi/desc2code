#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>

using namespace std;

typedef long long ll;

const int N = 2e5 + 10;
const ll MOD = 1e9 + 7;

ll dp[N];
ll up[N];
vector<int> adj[N];
ll par[N];
ll l[N];
ll r[N];

void dfs_down(int v)
{
	dp[v] = 1;
	for (int i=0; i<adj[v].size(); i++)
	{
		dfs_down(adj[v][i]);
		dp[v] *= (dp[adj[v][i]] + 1) % MOD;
		dp[v] %= MOD;
	}
}

void dfs_up(int v)
{
	l[0] = 1;
	r[adj[v].size()] = 1;


	for (int i=0; i<adj[v].size(); i++)
		l[i+1] = l[i] * (dp[adj[v][i]] + 1) % MOD;

	for (int i=adj[v].size()-1; i>=0; i--)
		r[i] = r[i+1] * (dp[adj[v][i]] + 1) % MOD;

	for (int i=0; i<adj[v].size(); i++)
		up[adj[v][i]] = l[i] * r[i+1] % MOD * up[v] % MOD + 1;

	for (int i=0; i<adj[v].size(); i++)
		dfs_up(adj[v][i]);

	up[v] = up[v] * dp[v] % MOD;
}

int main()
{
	ios :: sync_with_stdio(false);

	int n;
	cin >> n;

	for (int i=1; i<n; i++)
	{
		int v;
		cin >> v;
		v--;
		adj[v].push_back(i);
		par[i] = v;
	}

	up[0] = 1;

	dfs_down(0);
	dfs_up(0);

	up[0] = dp[0];

	for (int i=0; i<n; i++)
		cout << up[i] << " ";
	
	return 0;
}