#include <bits/stdc++.h>

using namespace std;
const int mod = 1e9 + 7;

typedef vector<int> vi;

vector< vi > child;
vi a, ans;

void dfs(int v) {
	a[v] = 1;
	for(int i = 0; i<child[v].size(); i++) {
		int u = child[v][i];
		dfs(u);
		a[v] = (1LL*a[v]*(a[u] + 1LL)) % mod;
	}
}

void ansdfs(int v, int par = 0) {
	int oldav = a[v];
	ans[v] = a[v];
	vi b;
	int now = (par+1) % mod;
	for(int i = 0; i<child[v].size(); i++) {
		b.push_back(now);
		now = (1LL*now*(a[child[v][i]] + 1LL)) % mod;
	}
	now = 1;
	for(int i = child[v].size()-1; i>= 0; i--) {
		b[i] = (1LL* b[i] *now) % mod;
		now = (1LL * now * (a[child[v][i]]+1LL)) % mod;
	}
	for(int i = 0; i<child[v].size(); i++) {
		int u = child[v][i];
		int oldau = a[u];
		a[v] = b[i];
		a[u] = (1LL*a[u]*(a[v]+1LL)) % mod;
		ansdfs(u, a[v]);
		a[v] = oldav;
		a[u] = oldau;
	}
}

int main()
{
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    child.assign(n, vi());
    a.assign(n, 1);
    ans.assign(n, 0);
    for(int i = 1; i<n; i++) {
    	int p;
    	cin >> p;
    	child[p-1].push_back(i);
    }
    dfs(0);
    ansdfs(0);
    for(int i = 0; i<n; i++) {
    	cout << ans[i] << " ";
    }
    return 0;
};