#include <iostream>
#include <vector>
using namespace std;

vector<int> adj[200200];
int n;
int _a,_b;
long long dp[200200];
long long mod=1000000007;
long long init(){
	return 1;
}
long long compute(long long parent,long long child){
	return (parent*(child+1))%mod;
}
void dfs(int node,int p){
	dp[node]=init();
	for(int i=0;i<adj[node].size();i++){
		int ch=adj[node][i];
		if(ch==p)continue;
		dfs(ch,node);
		dp[node]=compute(dp[node],dp[ch]);
	}
}
void dfs2(int node,int p,long long up){
	dp[node]=compute(dp[node],up);
	int k=adj[node].size();
	vector<long long> left(k+1,init());
	vector<long long> right(k+1,init());
	for(int i=0;i<k;i++){
		int ch=adj[node][i];
		if(ch==p)continue;
		left[i+1]=compute(left[i],dp[ch]);
	}
	for(int i=k-1;i>=0;i--){
		int ch=adj[node][i];
		if(ch==p)continue;
		right[i]=compute(right[i+1],dp[ch]);
	}
	for(int i=0;i<k;i++){
		int ch=adj[node][i];
		if(ch==p)continue;
		dfs2(ch,node,compute((left[i]*right[i+1])%mod,up));
	}
}
int main(){
	cin>>n;
	for(int i=2;i<=n;i++){
		cin>>_a;
		adj[_a].push_back(i);
		adj[i].push_back(_a);
	}
	dfs(1,1);
	dfs2(1,1,0);
	for(int i=1;i<=n;i++){
		cout<<dp[i]<<" ";
	}
}