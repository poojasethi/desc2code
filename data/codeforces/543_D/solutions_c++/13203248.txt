#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

typedef long long LL;

const int N = 200005, P = 1e9 + 7;

vector<int> G[N];
int f[N];

void dp(int x) {
	f[x] = 1;
	for (int i = 0; i < (int)G[x].size(); ++i) {
		dp(G[x][i]);
		f[x] = (LL)f[x] * (f[G[x][i]] + 1) % P;
	}
}

void dfs(int x, int res) {
	f[x] = (LL)f[x] * (res + 1) % P;
	vector<int> pow;
	pow.resize(G[x].size() + 1);
	pow[0] = 1;
	for (int i = 0; i < (int)G[x].size(); ++i)
		pow[i + 1] = (LL)pow[i] * (f[G[x][i]] + 1) % P;
	int foo = 1;
	for (int i = G[x].size() - 1; i >= 0; --i) {
		int tmp = f[G[x][i]];
		dfs(G[x][i], (LL)foo * pow[i] % P * (res + 1) % P);
		foo = (LL)foo * (tmp + 1) % P;
	}
}

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 2; i <= n; ++i) {
		int x;
		scanf("%d", &x);
		G[x].push_back(i);
	}
	dp(1);
	dfs(1, 0);
	for (int i = 1; i <= n; ++i) printf("%d%c", f[i], " \n"[i == n]);
	return 0;
}

