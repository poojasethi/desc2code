#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

struct node{
	int x, y, n4, n7, m4, m7, fp;
};
node T[2097160];
int n, m, x, y;
char s[1000005], cmd[10];

void ext(int d){
	int l = d<<1, r = l+1;
	T[d].n4 = T[l].n4 + T[r].n4;
	T[d].n7 = T[l].n7 + T[r].n7;
	
	T[d].m4 = max(T[l].m4 + T[r].n7, T[l].n4 + T[r].m4);
	T[d].m7 = max(T[l].m7 + T[r].n4, T[l].n7 + T[r].m7);
}

void flip(int d){
	T[d].fp ^= 1;
	swap(T[d].n4, T[d].n7);
	swap(T[d].m4, T[d].m7);
}

void bd(int d, int x, int y){
	T[d].x = x, T[d].y = y;
	
	if (x != y){
		int w = (x + y) >> 1;
		bd(d<<1, x, w);
		bd(1+(d<<1), w+1, y);
		ext(d);
	}
	else{
		if (s[x-1] == '4') T[d].n4 = 1;
		else T[d].n7 = 1;
		T[d].m4 = T[d].m7 = 1;
	}
}

void upd(int d, int x, int y){
	if (x <= T[d].x && y >= T[d].y){
		flip(d);
		return;
	}
	else{
		if (T[d].fp){
			T[d].fp = 0;
			flip(d<<1);
			flip(1+(d<<1));
		}
		if (x <= T[d<<1].y) upd(d<<1, x, y);
		if (y > T[d<<1].y) upd(1+(d<<1), x, y);
		ext(d);
	}
}

int main(){
	scanf("%d%d", &n, &m);
	scanf("%s", s);
	bd(1, 1, n);
	
	while (m--){
		scanf("%s", cmd);
		if (cmd[0] == 'c') printf("%d\n", T[1].m4);
		else{
			scanf("%d%d", &x, &y);
			upd(1, x, y);
		}
	}
	return 0;
}
