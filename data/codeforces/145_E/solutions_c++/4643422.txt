#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

int n,Q,a,b,Tn;
char s[2*1048576+100];

struct node{
	int c4,c7;
	int u,d;
	bool inv;
}T[2*1048576+100];

void push_down(int x){
	if (T[x].inv){
		T[x].inv = 0;
		T[x<<1].inv ^= 1;
		swap(T[x<<1].c4,T[x<<1].c7);
		swap(T[x<<1].u,T[x<<1].d);
		T[(x<<1)+1].inv ^= 1;
		swap(T[(x<<1)+1].c4,T[(x<<1)+1].c7);
		swap(T[(x<<1)+1].u,T[(x<<1)+1].d);
	}
}

void pull_up(int x){
	node &p = T[x];
	node &l = T[x<<1];
	node &r = T[(x<<1)+1];
	
	p.c4 = l.c4 + r.c4;
	p.c7 = l.c7 + r.c7;
	p.u = max(l.u + r.c7, l.c4 + r.u);
	p.d = max(l.c7 + r.d, l.d + r.c4);
}

void inv(int x,int L,int R,int l,int r){
	
	if (R<l || L>r) return;
	if (l<=L && R<=r){
		T[x].inv ^= 1;
		swap(T[x].c4,T[x].c7);
		swap(T[x].u,T[x].d);
	} else {
		push_down(x);
		int k = (L+R)>>1;
		inv((x<<1),L,k,l,r);
		inv((x<<1)+1,k+1,R,l,r);
		pull_up(x);
	}
}

int main(){
	scanf("%d%d",&n,&Q);
	Tn = 2;
	while (Tn < n) Tn *= 2;
	scanf("%s",s);
	for (int i=0;i < n;i++)
		if (s[i]=='4')
			T[Tn+i].c4 = T[Tn+i].u = T[Tn+i].d = 1;
		else
			T[Tn+i].c7 = T[Tn+i].u = T[Tn+i].d = 1;
	
	for (int i = Tn-1;i > 0;i--)
		pull_up(i);
	
	while (Q--){
		scanf("%s",s);
		if (s[0]=='c')
			printf("%d\n",T[1].u);
		else if (s[0]=='s'){
			scanf("%d%d",&a,&b);
			inv(1,0,Tn-1,a-1,b-1);
		}
	}
	return 0;
}