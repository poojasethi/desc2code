#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

struct Seg{
	int val, r44, r47, r74, r77;
} p[4000005];
char s[1000005];
void pull(int x) {
	p[x].r44 = p[x*2].r44 + p[x*2+1].r44;
	p[x].r47 = max(p[x*2].r47+p[x*2+1].r77, p[x*2].r44+p[x*2+1].r47);
	p[x].r74 = max(p[x*2].r74+p[x*2+1].r44, p[x*2].r77+p[x*2+1].r74);
	p[x].r77 = p[x*2].r77 + p[x*2+1].r77;
	if(p[x].val) { swap(p[x].r44,p[x].r77); swap(p[x].r47,p[x].r74); }
}
void pullLeaf(int x, int c) {
	p[x].r44=(!c);
	p[x].r47=p[x].r74=1;
	p[x].r77=(c);
}

void init(int x, int L, int R) {
	if(L==R) {
		p[x].val=(s[L]=='7');
		pullLeaf(x, p[x].val);
		return;
	}
	int M=(L+R)/2;
	init(x*2, L, M);
	init(x*2+1, M+1, R);
	pull(x);
}
void op(int x, int L, int R, int ll, int rr) {
	//fprintf(stderr, "%d %d %d\n", x, L, R);
	if(ll <= L && rr >= R) {
		p[x].val = !p[x].val;
		if(L==R) pullLeaf(x, p[x].val);
		else pull(x);
		return;
	}
	int M=(L+R)/2;
	if(ll<=M) op(x*2, L, M, ll, rr);
	if(rr>M) op(x*2+1, M+1, R, ll, rr);
	pull(x);
}

int main(void) {
	int n, m;
	scanf("%d%d", &n, &m);
	scanf("%s", s+1);
	init(1, 1, n);
	while(m--) {
		scanf("%s", s);
		if(strcmp(s, "count")==0) {
			printf("%d\n", p[1].r47);
		} else {
			int l, r;
			scanf("%d%d", &l, &r);
			op(1, 1, n, l, r);
		}
	}
	return 0;
}

