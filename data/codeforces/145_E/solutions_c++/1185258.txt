#include<cstdio>
#include<algorithm>
#include<bitset>
using namespace std;
#define L(x) (( x)<<1)
#define R(x) (L(x)|1)
#define N	(1<<20)
char s[N];
int c4[N<<2],c7[N<<2],c47[N<<2],c74[N<<2];
bitset<N<<2> rev;
inline void pull(int x){
	c4[x]=c4[L(x)]+c4[R(x)];
	c7[x]=c7[L(x)]+c7[R(x)];
	c47[x]=max(c47[L(x)]+c7[R(x)],c4[L(x)]+c47[R(x)]);
	c74[x]=max(c74[L(x)]+c4[R(x)],c7[L(x)]+c74[R(x)]);
}
inline void push(int x,bool nonleaf){
	if(rev[x]){
		swap(c4[x],c7[x]);
		swap(c47[x],c74[x]);
		rev.reset(x);
		if(nonleaf){
			rev.flip(L(x));
			rev.flip(R(x));
		}
	}
}
void build(int l,int r,int k){
	if(l+1<r){
		build(l,l+r>>1,L(k));
		build(l+r>>1,r,R(k));
		pull(k);
	}else{
		c4[k]=(s[l]=='4');
		c7[k]=(s[l]=='7');
		c47[k]=c74[k]=1;
	}
}
int ll,rr;
void swch(int l,int r,int k){
	if(l>=ll && r<=rr){
		rev.flip(k);
		push(k,l+1<r);
	}else{
		int m=l+r>>1;
		push(k,l+1<r);
		if(m>ll)swch(l,m,L(k));
		if(m<rr)swch(m,r,R(k));
		push(L(k),l+1<m);
		push(R(k),m+1<r);
		pull(k);
	}
}
int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	scanf("%s",s);
	build(0,n,1);
	while(m--){
		scanf("%s",s);
		if(s[0]=='c')printf("%d\n",c47[1]);
		else{
			scanf("%d%d",&ll,&rr);--ll;
			swch(0,n,1);
		}
	}
	return 0;
}