#include <iostream>
using namespace std;
const int MAX = 4000005;
int inc[MAX], decr[MAX], one[MAX], zero[MAX], n, q;
bool mark[MAX];
string str;
void shift(int v)
{
	if (!mark[v])
		return;
	mark[v] = false;
	mark[2 * v] = !mark[2 * v];
	mark[2 * v + 1] = !mark[2 * v + 1];
	swap(inc[2 * v], decr[2 * v]);
	swap(one[2 * v], zero[2 * v]);
	swap(inc[2 * v + 1], decr[2 * v + 1]);
	swap(one[2 * v + 1], zero[2 * v + 1]);
}
void merge(int v)
{
	one[v] = one[2 * v] + one[2 * v + 1];
	zero[v] = zero[2 * v] + zero[2 * v + 1];
	inc[v] = max(inc[2 * v] + one[2 * v + 1], zero[2 * v] + inc[2 * v + 1]);
	decr[v] = max(decr[2 * v] + zero[2 * v + 1], one[2 * v] + decr[2 * v + 1]);
}
void build(int v = 1, int s = 0, int e = n)
{
	if (e - s < 2)
	{
		if (str[s] == '4')
			zero[v] = 1;
		else
			one[v] = 1;
		inc[v] = decr[v] = 1;
		return;
	}
	int mid = (s + e) / 2;
	build(2 * v, s, mid);
	build(2 * v + 1, mid, e);
	merge(v);
}
void rev(int l, int r, int v = 1, int s = 0, int e = n)
{
	if (l <= s && e <= r)
	{
		mark[v] = !mark[v];
		swap(inc[v], decr[v]);
		swap(one[v], zero[v]);
		return;
	}
	if (e <= l || r <= s)
		return;
	shift(v);
	int mid = (s + e) / 2;
	rev(l, r, 2 * v, s, mid);
	rev(l, r, 2 * v + 1, mid, e);
	merge(v);
}
int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> q >> str;
	build();
	while (q--)
	{
		cin >> str;
		if (str[0] == 's')
		{
			int l, r;
			cin >> l >> r;
			l--;
			rev(l, r);
		}
		else
			cout << inc[1] << endl;
	}
	return 0;
}
		 						 			 	  	 	