#include<iostream>
using namespace std;
const int N=1e6+100;
string s;
int nf[4*N],ns[4*N],ans[4*N],rans[4*N];
bool lazy[4*N];
void shift(int v)
{
    if(lazy[v]==false)
        return;
    swap(ans[2*v],rans[2*v]);
    swap(nf[2*v],ns[2*v]);
    lazy[2*v]^=1;
    swap(ans[2*v+1],rans[2*v+1]);
    swap(nf[2*v+1],ns[2*v+1]);
    lazy[2*v+1]^=1;
    lazy[v]^=1;
}
void mrg(int v)
{
    nf[v]=nf[2*v]+nf[2*v+1];
    ns[v]=ns[2*v]+ns[2*v+1];
    ans[v]=max(ans[2*v]+ns[2*v+1],ans[2*v+1]+nf[2*v]);
    rans[v]=max(rans[2*v]+nf[2*v+1],rans[2*v+1]+ns[2*v]);
}
void build(int v,int b,int e)
{
    if(b==e-1)
    {
        nf[v]=(s[b]=='4');
        ns[v]=(s[b]=='7');
        ans[v]=1;
        rans[v]=1;
        return;
    }
    int mid=(b+e)/2;
    build(2*v,b,mid);
    build(2*v+1,mid,e);
    mrg(v);
}
void st(int r,int l,int v,int b,int e)
{
    if(r<=b && e<=l)
    {
        swap(ans[v],rans[v]);
        swap(nf[v],ns[v]);
        lazy[v]^=1;
        return;
    }
    if(e<=r || l<=b)
        return;
    int mid=(b+e)/2;
    shift(v);
    st(r,l,2*v,b,mid);
    st(r,l,2*v+1,mid,e);
    mrg(v);
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie();
    int n,q;
    cin>>n>>q>>s;
    build(1,0,n);
    for(int i=0;i<q;i++)
    {
        string t;
        cin>>t;
        if(t=="switch")
        {
            int a,b;
            cin>>a>>b;
            st(a-1,b,1,0,n);
        }
        if(t=="count")
            cout<<ans[1]<<endl;
    }
    return 0;
}
