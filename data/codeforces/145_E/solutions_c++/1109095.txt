#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int MaxN = 1000005;
struct Seg
{
    int c4,c7,m4,m7,rev;
}seg[MaxN*4];
int n,m;
char s[MaxN];
void Up(int k)
{
    seg[k].c4 = seg[k*2].c4+seg[k*2+1].c4;
    seg[k].c7 = seg[k*2].c7+seg[k*2+1].c7;
    seg[k].m4 = max(seg[k*2].m4+seg[k*2+1].c7, seg[k*2].c4+seg[k*2+1].m4);
    seg[k].m7 = max(seg[k*2].m7+seg[k*2+1].c4, seg[k*2].c7+seg[k*2+1].m7);
}
void build(int k, int L, int R)
{
    seg[k].rev = 0;
    if(L==R)
    {
        if(s[L]=='4')seg[k].c4=1,seg[k].c7=0;
        else seg[k].c7=1,seg[k].c4=0;
        seg[k].m4=seg[k].m7 = 1;
        return;
    }
    int mid = (L+R)/2;
    build(k*2,L,mid);
    build(k*2+1,mid+1,R);
    Up(k);
}

void Rev(int k)
{
    seg[k].rev ^= 1;
    swap(seg[k].c4,seg[k].c7);
    swap(seg[k].m4,seg[k].m7);
}

void Down(int k)
{
    if(seg[k].rev)
    {
        seg[k].rev = 0;
        Rev(k*2),Rev(k*2+1);
    }
}

void update(int k, int L, int R, int l, int r)
{
    if(l<=L && R<=r)
    {
        Rev(k);
        return;
    }
    Down(k);
    int mid = (L+R)/2;
    if(l<=mid)update(k*2,L,mid,l,r);
    if(r>mid)update(k*2+1,mid+1,R,l,r);
    Up(k);
}

int main()
{
    scanf("%d%d%s",&n,&m,s);
    build(1,0,n-1);
    for(int i = 0; i < m; i++)
    {
        scanf("%s",s);
        if(s[0]=='c')printf("%d\n",seg[1].m4);
        else
        {
            int x,y;scanf("%d%d",&x,&y);x--;y--;
            update(1,0,n-1,x,y);
        }
    }


    return 0;
}
