#include <bits/stdc++.h>
#define fi first
#define se second
#define endl '\n'

using namespace std;

typedef long long lint;
typedef pair<int,int> ii;
const int MAXN = 1e6+222;
const int mod = 1e9+7;

struct node{ int ff,ss,fs,sf,lazy; } seg[MAXN*5];

char er[20],ar[MAXN];
int N,M;

node f(int k){
	if(!seg[k].lazy) return seg[k];
	node ret=seg[k];
	swap(ret.ss,ret.ff);
	swap(ret.fs,ret.sf);
	return ret;
}

node init(int k,int b,int e){
	if(b==e){
		if(ar[b]=='7') seg[k].ss=1;
		else seg[k].ff=1;
		return seg[k];
	}
	node q1=init(k*2,b,(b+e)/2),q2=init(k*2+1,(b+e)/2+1,e);
	seg[k].ff=q1.ff+q2.ff;
	seg[k].ss=q1.ss+q2.ss;
	seg[k].fs=max(q1.ff+q2.ss,max(q1.fs+q2.ss,q1.ff+q2.fs));
	seg[k].sf=max(q1.ss+q2.ff,max(q1.sf+q2.ff,q1.ss+q2.sf));
	return seg[k];
}

node upd(int k,int b,int e,int a1,int a2){
	if(b>a2 || e<a1)
		return f(k);
	if(b>=a1 && e<=a2){
		seg[k].lazy^=1;
		return f(k);
	}
	if(seg[k].lazy){
		seg[k].lazy^=1;
		seg[k+k].lazy^=1;
		seg[k+k+1].lazy^=1;
	}
	node q1=upd(k*2,b,(b+e)/2,a1,a2),q2=upd(k*2+1,(b+e)/2+1,e,a1,a2);
	seg[k].ff=q1.ff+q2.ff;
	seg[k].ss=q1.ss+q2.ss;
	seg[k].fs=max(q1.ff+q2.ss,max(q1.fs+q2.ss,q1.ff+q2.fs));
	seg[k].sf=max(q1.ss+q2.ff,max(q1.sf+q2.ff,q1.ss+q2.sf));
	return seg[k];
}

int main(){
	
	scanf(" %d %d %s",&N,&M,ar+1);
	
	init(1,1,N);
	
	for(int i=1,a,b;i<=M;i++){
		scanf(" %s",er+1);
		if(er[1]=='c'){
			node res=f(1);
			printf("%d\n",max(res.fs,max(res.ss,res.ff)));
		}
		else{
			scanf(" %d %d",&a,&b);
			upd(1,1,N,a,b);
		}
	}
	
	return 0;
}
