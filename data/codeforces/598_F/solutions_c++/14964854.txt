#include <iostream>
#include <iomanip>
#include <strstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <iterator>
#include <complex>
#include <utility>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <ctime>
#define INF 0x03FFFFFF
#define Sqr(x) ((x)*(x))
#define MP make_pair
#define PB push_back
#define F first
#define S second
typedef long long LL;
typedef long double LD;
using namespace std;
const int MOD = 1e9+7;
const int maxn = 100000+5;
const LD eps = 1e-6;
LD PI = acos((LD)(-1));

inline int dcmp(LD x) {
    return x < -eps ? -1 : x > eps;
}

struct Point {
    LD x, y;
    
    Point() {}
    
    Point(LD _x, LD _y) : x(_x), y(_y) {}

    Point operator + (const Point &rhs) const {
        return Point(x + rhs.x, y + rhs.y);
    }

    Point operator - (const Point &rhs) const {
        return Point(x - rhs.x, y - rhs.y);
    }

    LD len() const {
        return hypot(x, y);
    }

    void in() {
        cin >> x >> y;
    }
};

LD det(const Point &a, const Point &b) {
    return a.x * b.y - a.y * b.x;
}

LD dot(const Point &a, const Point &b) {
    return a.x * b.x + a.y * b.y;
}

typedef Point Vec;
typedef vector<Point> Poly;
int n, m;

LD get_pos(Point a, Vec b, Point c, Vec d) {
    return det(d, a-c) / det(b, d);
}

LD solve(const Poly &poly, Point a, Vec b) {
    LD ret = 0.0;
    vector<pair<LD, int> > vec;
    for (int i = 0; i < n; i++) {
        int j = (i+1) % n;
        Point c = poly[i];
        Vec d = poly[j] - poly[i];
        int f1 = dcmp(det(b, c-a));
        int f2 = dcmp(det(b, c+d-a));
        if (!f1 && !f2) continue;
        if (f1 > f2)
            vec.PB(MP(get_pos(a,b,c,d), !f1||!f2 ? +1 : +2));
        else if (f1 < f2)
            vec.PB(MP(get_pos(a,b,c,d), !f1||!f2 ? -1 : -2));
    }
    sort(vec.begin(), vec.end());
    int now = 0;
    for (int i = 0; i+1 < vec.size(); i++) {
        now += vec[i].S;
        if (now) ret += vec[i+1].F - vec[i].F;
    }
    ret *= b.len();
    return ret;
}

int main() {
    //freopen("input.in", "r", stdin);

    std::ios_base::sync_with_stdio(false);
    cin >> n >> m;
    Poly poly(n);
    for (int i = 0; i < n; i++)
        poly[i].in();

    for (int i = 0; i < m; i++) {
        Point a, b;
        a.in(); b.in();
        cout << setprecision(13) << solve(poly, a, b - a) << endl;
    }

    return 0;
}

