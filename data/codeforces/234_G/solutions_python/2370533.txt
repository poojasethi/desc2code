import sys
infile = open('input.txt')
outfile = open('output.txt', 'w')
# outfile = sys.stdout

class Node:
    lch = None
    rch = None
    def __init__(self, nums, side):
        self.nums = nums
        self.side = side

        k = len(nums)
        if k > 1:
            lnums = nums[:k/2]
            rnums = nums[k/2:]
            self.lch = Node(lnums, side)
            self.rch = Node(rnums, 1 - side)
    def __repr__(self):
        return 'Node(%s,side=%d)' %(self.nums, self.side)

    def print_tree(self, indent=''):
        print indent, self
        if self.lch:
            self.lch.print_tree(indent + '  ')
            self.rch.print_tree(indent + '  ')

def cal_level(root, level):
    if root.lch:
        return max(cal_level(root.lch, level + 1),
                cal_level(root.rch, level + 1))
    else:
        return level

def print_ans(root):
    print >> outfile, cal_level(root, 0)
    nodes = [root]
    while len(nodes) <= n:
        nodes1 = []
        sides = [[], []]
        for node in nodes:
            for x in node.nums:
                sides[node.side].append(x)
            if node.lch:
                nodes1.append(node.lch)
                nodes1.append(node.rch)
            else:
                nodes1.append(node)
        if sides[1]:
            print >> outfile, len(sides[0]), ' '.join(str(x) for x in sides[0])
        if len(nodes) == n: break
        nodes = nodes1

n = int(infile.readline().rstrip())
root = Node(range(1, n+1), 0)
# root.print_tree()
print_ans(root)

