#include<stdio.h>
#include<memory.h>
#include<queue>
#include<algorithm>
#define M 4444
#define N 33

struct Tp{
	int x,y;
	bool operator<(const Tp & B)const{
		return y>B.y;
	}
} t;
std::priority_queue<Tp> q;
int x,y,z,dd[N],pr[N],n,m,kk,sum,msk,D[65555],d,rebro[N][N];

int fs(int x){
	if(pr[x]!=x) pr[x]=fs(pr[x]);
	return pr[x];
}

int main(void){
//	freopen(".in","r",stdin);
//	freopen(".out","w",stdout);
	scanf("%d%d",&n,&m);
	memset(rebro,63,sizeof(rebro));
	for(int i=0;i<n;i++) pr[i]=i;
	for(int i=0;i<m;i++){
		scanf("%d%d%d",&x,&y,&z);
		x--;
		y--;

		rebro[x][y]=rebro[y][x]=std::min(rebro[x][y],z);

		dd[x]++;
		dd[y]++;
		sum+=z;

		pr[fs(x)]=fs(y);
	}
	for(int i=0;i<n;i++) if(dd[i] && fs(0)!=fs(i)){
		puts("-1");
		return 0;
	}
	for(int i=0;i<n;i++) if(dd[i]&1) msk|=1<<i;
	memset(D,63,sizeof(D));
	D[msk]=0;
	q.push((Tp){msk,0});
	while(!q.empty()){
		t=q.top(); q.pop();
		msk=t.x, d=t.y;
		if(D[msk]!=d) continue;
		if(msk == 0 ){
			 printf("%d\n",sum+D[0]);
			 return 0;
		}
		for(int i=0;i<n;i++)
			for(int j=i+1;j<n;j++) if(rebro[i][j]<1e9)
				if(D[msk ^ (1<<i) ^ (1<<j)] > d + rebro[i][j]){
					D[msk ^ (1<<i) ^ (1<<j)]=d + rebro[i][j];
					q.push((Tp){ msk ^ (1<<i) ^ (1<<j) , d + rebro[i][j] });
				}
	}
//	puts("-1");
	while(1){puts("!!!!");};
	return 0;
}

