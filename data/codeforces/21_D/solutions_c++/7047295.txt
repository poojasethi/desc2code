#include<cstdio>
#include<algorithm>
#include<cstring>
#define N 16
#define LL long long
#define inf 0x3f3f3f3f
using namespace std;
int d[N][N];
int deg[N];
int n,m;
int dp[1<<N];
LL ans;
void init(){
    memset(d,inf,sizeof(d));
    memset(deg,0,sizeof(deg));
}
void floyd(){
    for(int k=0;k<n;++k){
        for(int i=0;i<n;++i){
            for(int j=0;j<n;++j){
                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);
            }
        }
    }
    for(int i=0;i<n;++i)d[i][i]=0;
}
LL solve(){
    for(int i=1;i<n;++i)if(deg[i]>0 && d[0][i]==inf)return -1;
    int r=(1<<n);
    for(int i=0;i<r;++i)dp[i]=inf;
    dp[0]=0;
    for(int i=0;i<r;++i){
        int j;
        for(j=0;j<n;++j)if((deg[j]&1)&&(i&(1<<j)))break;
        if(j==n)dp[i]=0;
        for(int j=0;j<n;++j){
            if((deg[j]&1) && !(i&(1<<j))){
                for(int k=j+1;k<n;++k){
                    if((deg[k]&1) && !(i&(1<<k)) && d[j][k]!=inf){
                        dp[i|(1<<j)|(1<<k)]=min(dp[i|(1<<j)|(1<<k)],dp[i]+d[j][k]);
                    }
                }
            }
        }

    }
    if(dp[r-1]==inf)return -1;
    return ans+dp[r-1];
}
int main(){
    while(~scanf("%d%d",&n,&m)){
        init();
        ans=0;
        int u,v,w;
        while(m--){
            scanf("%d%d%d",&u,&v,&w);
            --u;--v;
            d[u][v]=min(d[u][v],w);
            d[v][u]=d[u][v];
            ++deg[u],++deg[v];
            ans+=w;
        }
        floyd();
        printf("%I64d\n",solve());
    }
    return 0;
}
