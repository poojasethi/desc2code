#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define N 16

const int INF = 0x7f7f7f7f;

int n;
int a[N][N];
int g[1 << N];
bool mk[N];

int dfs(int st) {
    int &ret = g[st];
    if (~ret) return ret;
    ret = INF;
    for (int i = 0; i < n; ++i)
        if (st >> i & 1)
            for (int j = i + 1; j < n; ++j)
                if (st >> j & 1)
                    if (a[i][j] != INF)
                        ret = min(ret, dfs(st ^ (1 << i) ^ (1 << j)) + a[i][j]);
    return ret;
}

int main() {
    int m, st = 0, sum = 0;
    scanf("%d %d", &n, &m);
    memset(a, 0x7f, sizeof(a));
    memset(mk, 0, sizeof(mk));
    for (int i = 0; i < m; ++i) {
        int x, y, w;
        scanf("%d %d %d", &x, &y, &w);
        --x; --y;
        mk[x] = mk[y] = 1;
        if (w < a[x][y])
            a[x][y] = a[y][x] = w;
        st ^= (1 << x);
        st ^= (1 << y);
        sum += w;
    }
    for (int k = 0; k < n; ++k)
        for (int i = 0; i < n; ++i)
            if (a[i][k] != INF)
                for (int j = 0; j < n; ++j)
                    if (a[k][j] != INF)
                        a[i][j] = min(a[i][j], a[i][k] + a[k][j]);
    for (int i = 1; i < n; ++i)
        if (mk[i] && a[0][i] == INF) {
            puts("-1");
            return 0;
        }
    memset(g, -1, sizeof(g));
    g[0] = 0;
    printf("%d\n", sum + dfs(st));
    return 0;
}
