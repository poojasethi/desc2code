#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;

const int INF = 1 << 20;
const int N = 15;
int deg[N];
int d[N][N];
int dp[1<<N];

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    for(int i = 0; i < n; ++i)
        for(int j = 0; j < n; ++j)
            d[i][j] = (i == j ? 0 : INF);
        
    int sw = 0;
    while(m--) {
        int u, v, w;
        scanf("%d%d%d", &u, &v, &w);
        --u; --v;
        ++deg[u]; ++deg[v];
        sw += w;
        if(d[u][v] > w) 
            d[u][v] = d[v][u] = w;
    }
    
    for(int k = 0; k < n; ++k)
        for(int i = 0; i < n; ++i)
            for(int j = 0; j < n; ++j)
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
    
    for(int j = 0; j < n; ++j)
        if(d[0][j] == INF && deg[j] > 0) {
            puts("-1");
            return 0;
        }
    
    vector<int> v;
    for(int i = 0; i < n; ++i)
        if(deg[i] & 1)
            v.push_back(i);
    
    n = v.size();
    for(int x = 1; x < (1 << n); ++x) {
        int bc = 0;
        for(int i = 0; i < n; ++i)
            if(x & (1 << i))
                ++bc;
        if(bc & 1)
            continue;
        
        dp[x] = INF;
        for(int i = 0; i < n; ++i) {
            if(x & (1 << i)) {
                for(int j = i+1; j < n; ++j)
                    if(x & (1 << j))
                        dp[x] = min(dp[x], dp[x^(1<<i)^(1<<j)] + d[v[i]][v[j]]);
            } 
        }
    }
    
    printf("%d\n", sw + dp[(1<<n)-1]);
    return 0;
}
