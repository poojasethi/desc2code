#include <stdio.h>
#include <string.h>

int g[16];
int FIND(int x) {
	return g[x]==x?g[x]:(g[x]=FIND(g[x]));
}
void UNION(int x, int y) {
	g[FIND(x)] = FIND(y);
}
int deg[16]={};
int a[16][16];
inline void update(int &x, int v) {
	if(v==-1) return;
	if(x==-1||x>v) x=v;
}
int dp[1<<16];
int n, m;
int go(int state) {
	if(dp[state]>=0) return dp[state];
	int i, j;
	for(i=1;i<=n;i++)
		if(state&(1<<i))
			break;
	for(j=i+1;j<=n;j++)
		if(state&(1<<j))
			if(a[i][j]>=0)
				update(dp[state], a[i][j]+go(state^(1<<i)^(1<<j)));
	return dp[state];
}

int main(void) {
	int i, j, x, y, z;
	scanf("%d%d", &n, &m);
	memset(a, -1, sizeof(a));
	memset(dp, -1, sizeof(dp));
	dp[0] = 0;
	for(i=1;i<=n;i++)
		g[i] = i;
	int ans=0;
	for(i=0;i<m;i++) {
		scanf("%d%d%d", &x, &y, &z);
		update(a[x][y], z);
		a[y][x] = a[x][y];
		deg[x]++;
		deg[y]++;
		UNION(x, y);
		ans += z;
	}
	for(i=1;i<=n;i++)
		if(FIND(i) !=FIND(1) && deg[i]>0)
			break;
	if(i<=n) {puts("-1"); return 0;}
	for(z=1;z<=n;z++)
		for(x=1;x<=n;x++)
			for(y=1;y<=n;y++)
				if(a[x][z]>=0 && a[z][y]>=0)
					update(a[x][y], a[x][z]+a[z][y]);
	int ask=0, value=0;
	for(i=1;i<=n;i++)
		if(deg[i]%2)
			ask+=(1<<i);

	value = go(ask);
	ans += value;
	printf("%d\n", ans);
	return 0;
}
