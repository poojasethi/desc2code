#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdio>
using namespace std;
const int maxn=20;
const int maxm=(1<<16)+10;
int f[maxn][maxn],n,dp[maxm],m,d[maxn],ans;
struct node
{
  int x,y,c;
}go[maxm];
void floyd()
{
  for(int k=1;k<=n;k++)
    for(int i=1;i<=n;i++)
      for(int j=1;j<=n;j++)
        if(f[i][k]!=-1&&f[k][j]!=-1)
          if(f[i][j]==-1||f[i][j]>f[i][k]+f[k][j]) f[i][j]=f[i][k]+f[k][j];    
}
int main()
{
  //freopen("21D.in","r",stdin);
  //freopen("21D.out","w",stdout);
  scanf("%d%d",&n,&m);
  for(int i=1;i<=n;i++)
    for(int j=1;j<=n;j++)
      f[i][j]=-1;
  for(int i=1;i<=m;i++)
  {
    int x,y,c;scanf("%d%d%d",&x,&y,&c);
    if(f[x][y]==-1||f[x][y]>c)
      f[x][y]=f[y][x]=c;
    d[x]++;d[y]++;
    ans+=c;
  }
  floyd();int flag=1;
  for(int i=2;i<=n;i++)
  {
    if(!d[i]) continue;
    if(f[1][i]==-1) flag=0;
  }
  if(!flag)
  {
    puts("-1");
    return 0;
  }
  int s=0;
  for(int i=1;i<=n;i++)
    if(d[i]%2==0)
      s|=(1<<(i-1));
  memset(dp,-1,sizeof(dp));
  dp[s]=0;
  for(int i=s;i<(1<<n);i++)
    if(dp[i]>=0)
      for(int j=1;j<=n;j++)
        for(int k=1;k<=n;k++)
        {
          int v1=i&(1<<(j-1)),v2=i&(1<<(k-1));
          if(v1!=0||v2!=0||f[j][k]==-1||j==k) continue;
          int ns=i|(1<<(j-1))|(1<<(k-1));
          if(dp[ns]==-1||dp[ns]>dp[i]+f[j][k])
            dp[ns]=dp[i]+f[j][k];
        }
  printf("%d\n",ans+dp[(1<<n)-1]);
  return 0;
}
  