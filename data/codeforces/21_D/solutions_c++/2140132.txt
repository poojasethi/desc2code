#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <cassert>
#include <sstream>
#include <numeric>
#include <climits>
#include <string>
#include <cctype>
#include <ctime>
#include <cmath>
#include <vector>
#include <queue>
#include <list>
#include <map>
#include <set>
using namespace std;

const int N = 15, M = 1 << N;
const int INF = INT_MAX / 2;

int n, m;
int dist[N][N];
int f[M];

void update(int &x, int t) {
	if (t < x)
		x = t;
}

int main() {
	scanf("%d%d", &n, &m);
	fill(dist[0], dist[n], INF);
	int init = 0, ans = 0, visited = 0;
	for (int i = 0; i < m; ++i) {
		int x, y, z;
		scanf("%d%d%d", &x, &y, &z);
		x--;
		y--;
		ans += z;
		update(dist[x][y], z);
		update(dist[y][x], z);
		init ^= 1 << x;
		init ^= 1 << y;
		visited |= 1 << x;
		visited |= 1 << y;
	}

	for (int k = 0; k < n; ++k)
		for (int i = 0; i < n; ++i)
			for (int j = 0; j < n; ++j)
				update(dist[i][j], dist[i][k] + dist[k][j]);

	for (int i = 0; i < n; ++i)
		if ((visited >> i & 1) && dist[0][i] == INF)
			return puts("-1"), 0;
	
	fill(f, f + init + 1, INF);
	f[init] = 0;
	for (int msk = init; msk; --msk)
		for (int x = 0; x < n; ++x)
			if (msk >> x & 1)
				for (int y = x + 1; y < n; ++y)
					if (msk >> y & 1)
						update(f[msk ^ (1 << x) ^ (1 << y)], f[msk] + dist[x][y]);
	
	cout << ans + f[0] << endl;
}

