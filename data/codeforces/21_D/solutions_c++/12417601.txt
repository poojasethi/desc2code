#include <iostream>
#include <algorithm>

using namespace std;
typedef long long ll;

const int maxn = 16;
const ll inf = 1e15;

int n, deg[maxn];
ll dis[maxn][maxn];

ll solve(int mask)
{
	if (!mask)
		return 0;
	ll res = inf;
	int a = -1;
	for (int i = 0; i < n; ++i)
	{
		if ((mask & (1 << i)))
		{
			if (a == -1)
				a = i, mask ^= (1 << i);
			else
				res = min(res, solve((mask ^ (1 << i))) + dis[a][i]);
		}
	}
	return res;
}

int main()
{
	int m;
	cin >> n >> m;
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
			dis[i][j] = inf;
		dis[i][i] = 0;
	}
	int mask = 0;
	ll ans = 0;
	for (int i = 0; i < m; ++i)
	{
		int u, v;
		ll w;
		cin >> u >> v >> w;
		u --, v --;
		dis[u][v] = min(dis[u][v], w);
		dis[v][u] = min(dis[v][u], w);
		mask ^= (1 << u);
		mask ^= (1 << v);
		deg[v] ++, deg[u] ++;
		ans += w;
	}
	for (int k = 0; k < n; ++k)
		for (int i = 0; i < n; ++i)
			for (int j = 0; j < n; ++j)
				dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);
	for (int i = 0; i < n; ++i)
		if (dis[0][i] == inf && deg[i] != 0)
		{
			cout << "-1\n";
			goto hell;
		}
	ans += solve(mask);
	cout << ans << '\n';
	hell: return 0;
}