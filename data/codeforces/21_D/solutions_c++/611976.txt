#include<iostream>
#include<algorithm>
#include<vector>
#include<cstdio>
#include<cstring>
#include<cctype>
using namespace std;

#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define SZ(a) ((int)((a).size()))
#define REPSZ(i,v) REP(i,SZ(v))
#define ALL(a) (a).begin(),(a).end()
typedef long long Int;
template<class T>void pv(T a,T b){for(T i=a;i!=b;++i)cout<<*i<<" ";cout<<endl;}

const int MAX_N = 15;

const Int inf = 1LL << 58;
Int a[MAX_N][MAX_N];
Int dp[1 << MAX_N];

int main() {
  int N, M; scanf("%d%d", &N, &M);
  REP(i, N) REP(j, N) a[i][j] = inf;
  REP(i, N) a[i][i] = 0;
  int deg[N]; REP(i, N) deg[i] = 0;
  Int res = 0;
  REP(m, M) {
    int x, y, c;
    scanf("%d%d%d", &x, &y, &c);
    x--, y--;
    a[x][y] = min(a[x][y], (Int)c);
    a[y][x] = min(a[y][x], (Int)c);
    ++deg[x];
    ++deg[y];
    res += c;
  }
  deg[0] += 2;

  REP(k, N) REP(i, N) REP(j, N) a[i][j] = min(a[i][j], a[i][k] + a[k][j]);
  REP(i, N) REP(j, N) {
    if (deg[i] > 0 && deg[j] > 0 && a[i][j] == inf) {
      cout << -1 << endl;
      return 0;
    }
  }

  vector<int> odd;
  REP(i, N) if (deg[i] % 2 == 1) odd.push_back(i);
  REP(i, 1 << MAX_N) dp[i] = inf;
  dp[0] = 0;

  for (int i = 0; i + 1 < SZ(odd); i++)
    for (int set = 0; set < 1 << SZ(odd); set++)
      if ((set >> i & 1) == 0)
        for (int j = i + 1; j < SZ(odd); j++)
          if ((set >> j & 1) == 0)
          {
            int next = set | (1 << i) | (1 << j);
            dp[next] = min(dp[next], dp[set] + a[odd[i]][odd[j]]);
          }

  cout << res + dp[(1 << SZ(odd)) - 1] << endl;

}
