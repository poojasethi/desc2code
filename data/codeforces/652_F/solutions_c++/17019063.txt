#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;

const int limite=1000000;

struct elem {
  int id,pos,d;
  elem() {
  }
  elem(int inid,int inpos,int ind) {
    id=inid;pos=inpos;d=ind;
  }
};

bool operator<(elem e1,elem e2)
{
  return e1.pos<e2.pos;
}

typedef long long int ll;

int n,m;
ll t;
vector<elem> v;
int sol[limite];
int amount[limite][2];
int num[2];

int main()
{
  ios::sync_with_stdio(false);
  cin>>n>>m>>t;
  ll tmod=t%m;
  ll t2div=2*t/m;
  ll t2mod=2*t%m;
  /*
  t*=2;
  t%=m;
  */
  //cout<<"tmod "<<tmod<<" t2div "<<t2div<<" t2mod "<<t2mod<<endl;
  for (int i=0;i<n;i++) {
    int pos;
    cin>>pos;
    pos--;
    char c;
    cin>>c;
    int d=c=='R';
    num[d]++;
    v.push_back(elem(i+1,pos,d));
    v.push_back(elem(i+1,pos+m,d));
  }
  sort(v.begin(),v.end());
  /*
  for (int i=0;i<2*n;i++)
    cout<<"("<<v[i].id<<","<<v[i].pos<<","<<v[i].d<<")";
  cout<<endl;
  */
  for (int k=0;k<2;k++) {
    for (int i=0;i<2*n;i++) {
      amount[i][k]=(i>0?amount[i-1][k]:0)+(v[i].d==k);
      //cout<<amount[i][k]<<",";
    }
    //cout<<endl;
  }
  {
    //cout<<"Primer caso"<<endl;
    int i2=0;
    for (int i1=0;i1<n;i1++) {
      if (v[i1].d==1) {
	while (v[i2+1].pos<=v[i1].pos+t2mod) i2++;
	int saltos=(t2div*num[0]+amount[i2][0]-(i1>0?amount[i1-1][0]:0))%n;
	//cout<<"["<<i1<<","<<i2<<","<<saltos<<"]"<<endl;
	sol[v[i1+saltos].id]=(v[i1].pos+tmod)%m+1;
      }
    }
  }
  {
    //cout<<"Segundo caso"<<endl;
    int i1=2*n-1;
    for (int i2=2*n-1;i2>=n;i2--) {
      if (v[i2].d==0) {
	while (v[i1-1].pos>=v[i2].pos-t2mod) i1--;
	int saltos=(t2div*num[1]+amount[i2][1]-(i1>0?amount[i1-1][1]:0))%n;
	//cout<<"["<<i1<<","<<i2<<","<<saltos<<"]"<<endl;
	sol[v[i2-saltos].id]=(v[i2].pos-tmod+m)%m+1;
      }
    }
  }
  for (int i=1;i<=n;i++) {
    if (i>1) cout<<" ";
    cout<<sol[i];
  }
  cout<<endl;
}
