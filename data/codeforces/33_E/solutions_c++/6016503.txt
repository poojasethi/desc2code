#include<cstdio>
#include<cstring>
#include<algorithm>
#include<map>
#include<string>
using namespace std ;

const int MAXN = 100;
const int oops = 1<<25;

class Subject
{
    public:
        string name;
        int time;
}subject[MAXN+5];

class Job
{
    public:
        int input_id,subject_id;
        int profit,deadline;
    bool operator < (const Job &with) const
    {
        if (deadline != with.deadline)return deadline < with.deadline;
        return input_id < with.input_id;
    }
}job[MAXN+5];

char tempo[40];
map<string,int>mp;
int m,n,k;

int from[10],to[10];

int scanTime(FILE *in)
{
    int hours,minutes;
    fscanf(in,"%d:%d",&hours,&minutes);
    return hours*60 + minutes;
}

bool busy[30 * 24 * 60 + 5];
int nex[30 * 24 * 60 + 5];

int jump[1440 + 5][MAXN+5];

int best[30*24*60+5][MAXN+5];
bool choose[30*24*60+5][MAXN+5];
bool flag[30*24*60+5][MAXN+5];

int solve(int day,int ind)
{
    if (day >= k * 1440)return -oops;
    if (ind == n)return 0;
    int &ret = best[day][ind];
    if (flag[day][ind])return ret;
    ret = solve(day,ind+1);
    choose[day][ind]=0;
    if (~job[ind].subject_id && day + jump[day%1440][job[ind].subject_id] <= job[ind].deadline){
        int temp = job[ind].profit + solve(day+jump[day%1440][job[ind].subject_id],ind+1);
        if (temp > ret){
            ret = temp;
            choose[day][ind]=1;
        }
    }
    flag[day][ind]=1;
    return ret;
}


int main()
{
    FILE *in=stdin;//fopen("helper.in","r");
    int c,c2;
    fscanf(in,"%d%d%d",&m,&n,&k);
    for (c=0;c<m;c++){
        fscanf(in,"%s",tempo);
        mp[subject[c].name=tempo]=c;
    }
    for (c=0;c<m;c++)
        fscanf(in,"%d",&subject[c].time);

    for (c=0;c<4;c++){
        from[c]=scanTime(in);
        fscanf(in,"-");
        to[c]=scanTime(in);
    }
    for (c=0;c<n;c++){
        fscanf(in,"%s",tempo);
        map<string,int>::iterator it = mp.find(tempo);
        job[c].input_id = c+1;
        job[c].subject_id = -1;
        if (it!=mp.end())
            job[c].subject_id = it->second;
        int day;
        fscanf(in,"%d",&day);
        job[c].deadline = (day-1)*1440 + scanTime(in);
        fscanf(in,"%d",&job[c].profit);
    }
    sort(job,job+n);
    int c3;
    for (c=0;c<k;c++)
        for (c2=0;c2<4;c2++)
            for (c3=from[c2];c3<=to[c2];c3++)
                busy[c*1440 + c3]=1;
    int farfree = k*1440;
    int nearfree = k*1440;
    for (int day=k*1440-1;day>=0;day--){
        if (busy[day]){
            nex[day] = nearfree;
            farfree = -1;
        }
        else {
            farfree=max(farfree,day);
            nearfree = day;
            nex[day] = farfree;
        }
    }

    for (c=0;c<k*1440;c++)
        if (!busy[c])break;
    if (c == k*1440){
        printf("0\n0\n");
        return 0;
    }

    for (c=0;c<1440;c++)
        for (c2=0;c2<m;c2++){
            int total = subject[c2].time;
            int now = c;
            while(now<k*1440 && total){
                if (busy[now])now = nex[now];
                else {
                    int alpha = min(total,nex[now]-now+1);
                    now+=alpha;
                    total-=alpha;
                }
            }
            if (total)
                jump[c][c2]=oops;
            else jump[c][c2] = now - c;
        }

    int ret = solve(0,0);
    printf("%d\n",ret);
    int jobs=0;
    int day = 0;
    int ind = 0;
    for (ind=0;ind<n;ind++){
        if (choose[day][ind]){
            day+=jump[day%1440][job[ind].subject_id];
            jobs++;
        }
    }
    printf("%d\n",jobs);
    for (day=0,ind=0;ind<n;ind++){
        if (choose[day][ind]){
            int start = day;
            int ending = day + jump[day%1440][job[ind].subject_id] - 1;
            if (busy[start])
                start = nex[start];
            printf("%d %d %.2d:%.2d %d %.2d:%.2d\n",job[ind].input_id,start/1440 + 1,start%1440/60,start%1440%60,ending/1440+1,ending%1440/60,ending%1440%60);
            day = ending+1;
        }
    }



/*    int h1 = 19;
    int m1 = 1;
    int i = 0;
    int h2 = (h1*60 + m1 + jump[h1*60 + m1][i])/60;
    int m2 = (h1*60 + m1 + jump[h1*60 + m1][i])%60;
    printf("%.2d:%.2d - %.2d:%.2d\n",h1,m1,h2,m2);*/

//    system("pause");
    return 0;
}