#define N (1<<19)
#define ll long long
#define INFP (1ll<<60)
#define PII pair<ll,int>
#include <bits/stdc++.h>
using namespace std;

ll dis[N];
bool vis[N];
vector<PII> g[N];
int n,m,u,w[N],res[N],x,y;

void Dijkstra()
{
	for(int i=1;i<=n;i++)
		dis[i]=INFP;

	priority_queue<PII,vector<PII>,greater<PII> >q;
	q.push(PII(0,u)),dis[u]=0;

	for(;!q.empty();q.pop())
	{
		int x=q.top().second;
		if(vis[x]) continue; vis[x]=1;
		for(int i=0;i<g[x].size();i++)
		{
			int v=g[x][i].first,k=g[x][i].second;
			if(dis[v]>dis[x]+w[k])
			{
				dis[v]=dis[x]+w[k],res[v]=k;
				q.push(PII(dis[v],v));
			}
			else if(dis[v]==dis[x]+w[k] && w[k]<w[res[v]]) res[v]=k;
		}
	}

	ll sum=0;
	for(int i=1;i<=n;i++)
		sum+=w[res[i]];
	cout<<sum<<endl;
	for(int i=1;i<=n;i++)
		if(i!=u) printf("%d ",res[i]);
	cout<<endl;
}

int main()
{
	cin>>n>>m;
	for(int i=1;i<=m;i++)
		scanf("%d%d%d",&x,&y,w+i),
		g[x].push_back(PII(y,i)),
		g[y].push_back(PII(x,i));

	cin>>u,Dijkstra();
	return 0;
}
