#include <cstdio>
#include <cstring>
#include <algorithm>
#define INF 0x3f3f3f3f3f3f3f3fll
using namespace std;

int n,h[5000010],p[300010];
long long d[300010];

struct adlist
{
	int u[300010],v[600010],w[600010],p[600010],m;
	adlist():m(1) {};
	void insert(int x,int y,int z)
	{
		++m; v[m]=y; w[m]=z; p[m]=u[x]; u[x]=m;
		++m; v[m]=x; w[m]=z; p[m]=u[y]; u[y]=m;
	}
}g;

bool cmp(int x,int y) {return d[x]>d[y];}

int main()
{
	int m; scanf("%d%d",&n,&m);
	while (m--)
	{
		int x,y,z; scanf("%d%d%d",&x,&y,&z);
		g.insert(x,y,z);
	}
	int S; scanf("%d",&S); h[++h[0]]=S;
	memset(d,0x3f,sizeof(d)); d[S]=0;
	while (h[0])
	{
		int x=h[1]; pop_heap(h+1,h+h[0]+1,cmp); --h[0];
		for (int i=g.u[x];i;i=g.p[i])
		{
			int y=g.v[i];
			if (d[x]+g.w[i]<d[y])
			{
				d[y]=d[x]+g.w[i]; p[y]=i;
				h[++h[0]]=y; push_heap(h+1,h+h[0]+1,cmp);
			}
			else if (d[x]+g.w[i]==d[y]&&g.w[i]<g.w[p[y]]) p[y]=i;
		}
	}
	long long ans=0;
	for (int i=1;i<=n;++i) ans+=g.w[p[i]];
	printf("%I64d\n",ans);
	for (int i=1;i<=n;++i)
	{
		if (i==S) continue;
		printf("%d",p[i]>>1);
		if (!(i==n||(i==n-1&&S==n))) putchar(' ');
	}
	putchar('\n');
	return 0;
}
