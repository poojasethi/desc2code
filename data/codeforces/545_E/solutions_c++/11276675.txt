#include <cstdio>
#include <queue>
#include <vector>
using namespace std;

const int M = 300003, M2 = 2*M;
int list[M];
bool visit[M];
long long dist[M];

struct E {
	int v, w, x;
} edge[M2];

struct V {
	int u, b;
	long long d;
	V (int U, long long D, int B = 0) : u(U), d(D), b(B) {}
	bool operator <(const V &a) const {
		return d == a.d ? edge[b].w > edge[a.b].w : d > a.d;
	}
};

int main(){
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 1, j, k, l; i < 2*m; ) {
		scanf("%d%d%d", &j, &k, &l);
		edge[i].v = k;
		edge[i].w = l;
		edge[i].x = list[j];
		list[j] = i++;
		edge[i].v = j;
		edge[i].w = l;
		edge[i].x = list[k];
		list[k] = i++;
	}
	int s;
	scanf("%d", &s);
	vector<int> ans;
	priority_queue<V> q;
	for (int i = 1; i <= n; i++) dist[i] = 1e18;
	q.push(V(s, dist[s] = 0));
	long long sum = 0;
	while (!q.empty()) {
		int a = q.top().u, b = q.top().b;
		q.pop();
		if (!visit[a]) {
			visit[a] = true;
			if (b) {
				sum += edge[b].w;
				ans.push_back((b+1)>>1);
			}
			for (int i = list[a]; i; i=edge[i].x) {
				int j = edge[i].v;
				if (dist[a] + edge[i].w <= dist[j]) {
					dist[j] = dist[a] + edge[i].w;
					q.push(V(j, dist[j], i));
				}
			}
		}
	}
	printf("%I64d\n", sum);
	for (int i = 0; i < ans.size(); i++) {
		printf("%d%c", ans[i], i+1<ans.size()?' ':'\n');
	}
	return 0;
}
