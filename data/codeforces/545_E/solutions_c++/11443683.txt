#include <bits/stdc++.h>
#define MAX 333333
#define INF 1111111111111111LL
#define pii pair<ll, ll>

using namespace std;

typedef long long ll;

ll C[MAX];
ll P[MAX];

vector<pii> E[MAX];
ll D[MAX];
map<ll, ll> Ans;

ll hash(ll u, ll v)
{
	return MAX * 1LL * min(u, v) + max(u, v);
}

int main()
{
	int N, M;
	cin >> N >> M;
	ll u, v, w;
	for (int i = 1; i <= M; i++)
	{
		scanf("%I64d %I64d %I64d", &u, &v, &w);
		E[u].push_back({v, w});
		E[v].push_back({u, w});
		Ans[hash(u, v)] = i;
	}
	
	cin >> v;
	
	for (int i = 1; i <= N; i++)
		D[i] = INF;
	D[v] = 0;
	set<pii> S;
	S.insert({0, v});
	
	while (!S.empty())
	{
		v = S.begin()->second;
		S.erase(S.begin());
		
		for (int i = 0; i < E[v].size(); i++)
		{
			u = E[v][i].first, w = E[v][i].second;
			if (D[u] > D[v] + w)
			{
				if (D[u] != INF)
					S.erase({D[u], u});
				D[u] = D[v] + w;
				C[u] = w;
				P[u] = Ans[hash(u, v)];
				S.insert({D[u], u});
			}
			else if (D[u] == D[v] + w)
			{
				if (w < C[u])
				{
					P[u] = Ans[hash(u, v)];
					C[u] = w;
				}
			}
		//	cout << u << ' ' << P[u] << endl;
		}
	}
	
	ll ans = 0;
	for (int i = 1; i <= N; i++)
		ans += C[i];
	printf("%I64d\n", ans);
	
	for (int i = 1; i <= N; i++)
	{
		if (P[i])
			printf("%I64d ", P[i]);
	}
}

