#include <cstdio>
#include <queue>
using namespace std;

const int M = 300003;
struct E { int v, w, x; } edge[M<<1];
int list[M], uses[M];
long long dist[M];
queue<int> q;
bool in[M];

void Push (int s) { q.push(s); in[s] = true; }
void Pop () { in[q.front()] = false; q.pop(); }

int main(){
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 1, j, k, l; i < 2*m; ) {
		scanf("%d%d%d", &j, &k, &l);
		edge[i].v=k;
		edge[i].w=l;
		edge[i].x=list[j];
		list[j] = i++;
		edge[i].v=j;
		edge[i].w=l;
		edge[i].x=list[k];
		list[k] = i++;
	}
	int s;
	scanf("%d", &s);
	for (int i = 0; i < M; i++) dist[i] = 1e18;
	dist[s] = 0;
	Push(s);
	while (!q.empty()) {
		int a = q.front();
		for (int i = list[a]; i; i=edge[i].x) {
			if (dist[a] + edge[i].w < dist[edge[i].v]) {
				dist[edge[i].v] = dist[a] + edge[i].w;
				uses[edge[i].v] = i;
				if (!in[edge[i].v]) {
					Push(edge[i].v);
				}
			} else if (dist[a] + edge[i].w == dist[edge[i].v]) {
				if (edge[i].w < edge[uses[edge[i].v]].w) {
					uses[edge[i].v] = i;
				}
			}
		}
		Pop();
	}
	long long sum = 0;
	for (int i = 1; i <= n; i++) {
		if (i == s) continue;
		sum += edge[uses[i]].w;
	}
	printf("%I64d\n", sum);
	for (int i = 1; i <= n; i++) {
		if (i == s) continue;
		printf("%d%c", (uses[i]+1)/2, i==(n-(s==n))?'\n':' ');
	}
	return 0;
}
