#include <bits/stdc++.h>
using namespace std;
const int maxn = 300005;
int a[maxn], b[maxn], c[maxn];
long long d[maxn];
bool vis[maxn];
vector <int> ans;
vector <pair <int, int> >E[maxn];
void SPFA(int x) {
	queue <int> Q;
	Q.push(x);
	memset(d, 0x3f, sizeof(d));
	d[x] = 0;
	vis[x] = 1;
	while(!Q.empty()) {
		int u = Q.front(); Q.pop();
		for(int i = 0; i < E[u].size(); i++) {
			int v = E[u][i].first;
			int w = E[u][i].second;
			if(d[v] > d[u] + c[w]) {
				d[v] = d[u] + c[w];
				if(!vis[v]) {
					Q.push(v);
					vis[v] = 1;
				}
			}
		}
		vis[u] = 0;
	}
}
int main() {
	int n, m, u;
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= m; i++) {
		scanf("%d%d%d", &a[i], &b[i], &c[i]);
		E[a[i]].push_back(make_pair(b[i], i));
		E[b[i]].push_back(make_pair(a[i], i));
	}
	scanf("%d", &u);
	SPFA(u);
	long long tot = 0;
	for(int i = 1; i <= n; i++) {
		if(i == u) continue;
		int tmp = INT_MAX, idx;
		for(int j = 0; j < E[i].size(); j++) {
			int u = E[i][j].first;
			int v = E[i][j].second;
			if(d[i] == d[u] + c[v]) {
				if(c[v] < tmp) {
					tmp = c[v];
					idx = v;
				}
			}
		}
		tot += tmp;
		ans.push_back(idx);
	}
	printf("%I64d\n", tot);
	for(int i = 0; i < ans.size(); i++) printf("%d%c", ans[i], " \n"[i + 1 == ans.size()]);
	return 0;
}
