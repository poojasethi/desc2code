#include <cstdio>
#include <queue>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
#define ll long long
const int maxN = 3e5 + 100;
const ll inf = maxN * 1e9;
struct Node {
	int v, w, id;
	Node() {

	}
	Node(int _v, int _w, int _id): v(_v), w(_w), id(_id) {

	}
};
vector <Node> e[maxN];
int n, m, u;
int f[maxN];
int ed[maxN];
ll dis[maxN];
vector <int> ans;

int main() {
	cin >> n >> m;
	for (int i = 1; i <= m; ++i) {
		int u, v, w;
		scanf("%d%d%d", &u, &v, &w);
		ed[i] = w;
		e[u].push_back(Node(v, w, i));
		e[v].push_back(Node(u, w, i));
	}
	cin >> u;
	queue <int> q;
	q.push(u);
	for (int i = 1; i <= n; ++i) {
		dis[i] = inf;
	}
	dis[u] = 0;
	while (!q.empty()) {
		int cur = q.front();
		q.pop();
		int tot = e[cur].size();
		for (int i = 0; i < tot; ++i) {
			int v = e[cur][i].v;
			ll w = dis[cur] + e[cur][i].w;
			if (w < dis[v] || (w == dis[v] && e[cur][i].w < ed[f[v]])) {
				f[v] = e[cur][i].id;
				dis[v] = w;
				q.push(v);
			}
		}
	}
	ll cnt = 0;
	for (int i = 1; i <= n; ++i) {
		if (f[i] != 0) {
			cnt += ed[f[i]];
			ans.push_back(f[i]);
		}
	}
	sort(ans.begin(), ans.end());
	cout << cnt << endl;
	for (int i = 0; i < ans.size(); ++i) {
		cout << ans[i] << ' ';
	}
	return 0;
}
