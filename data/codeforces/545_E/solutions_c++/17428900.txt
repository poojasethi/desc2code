#include <stdio.h>
#include <queue>
#include <algorithm>
#include <vector>
#define pii pair<int,int>
#define piii pair<pii,int>
#define ppi pair<pair<long long,int>,pii>
#define F first
#define S second
using namespace std;
struct comp{
    bool operator()(ppi x,ppi y){
        if(x.F.F!=y.F.F)    return x.F.F>y.F.F;
        else    return x.F.S>y.F.S;
    }
};
priority_queue<ppi,vector<ppi>,comp> heap;
vector <piii>   edge[300005];
vector<int> ans;
bool b[300005];
int main(){
    int n,m,g1,g2,g3;
    scanf("%d %d",&n,&m);
    for(int i=1;i<=m;i++){
        scanf("%d %d %d",&g1,&g2,&g3);
        edge[g1].push_back(piii(pii(g2,g3),i));
        edge[g2].push_back(piii(pii(g1,g3),i));
    }
    scanf("%d",&g1);
    heap.push(ppi(pii(0,0),pii(g1,0)));
    ppi g4;
    long long sm=0;
    while(!heap.empty()){
        g4=heap.top();
        heap.pop();
        int tn=g4.S.F;
        if(b[tn])   continue;
        b[tn]=true;
        if(g4.S.S!=0){
            sm+=g4.F.S;
            ans.push_back(g4.S.S);
        }
        for(int i=0;i<edge[tn].size();i++){
            heap.push(ppi(make_pair(edge[tn][i].F.S+g4.F.F,edge[tn][i].F.S),pii(edge[tn][i].F.F,edge[tn][i].S)));
        }
    }
    printf("%I64d\n",sm);
    for(int i=0;i<ans.size();i++){
        printf("%d ",ans[i]);
    }
}

  	  							 				  	  			 	 			