#include <bits/stdc++.h>
using namespace std;
vector<pair<int, pair<int, int> > > edges[300005];
vector<int> ans;
bool visited[300005];
int main() {
  int n, m, x, y, z, u;
  scanf("%d %d", &n, &m);
  for (int i = 1; i <= m; i++) {
    scanf("%d %d %d", &x, &y, &z);
    edges[x].push_back({y, {z, i}});
    edges[y].push_back({x, {z, i}});
  }
  scanf("%d", &u);
  long long sum = 0;
  priority_queue<pair<pair<long long, int>, pair<int, int> > > pq;
  pq.push({{0, 0}, {u, 0}});
  while (!pq.empty()) {
    pair<pair<long long, int>, pair<int, int> > f = pq.top();
    int cur = f.second.first;
    pq.pop();
    if (visited[cur]) continue;
    visited[cur] = true;
    //printf("%d %d %d %d\n", f.first.first, f.first.second, f.second.first, f.second.second);
    if (f.second.second) {
      ans.push_back(f.second.second);
    }
    sum += -f.first.second;
    for (int i = 0; i < edges[cur].size(); i++) {
      pq.push({{f.first.first - edges[cur][i].second.first, -edges[cur][i].second.first}, {edges[cur][i].first, edges[cur][i].second.second}});
    }
  }
  printf("%I64d\n", sum);
  for (int i = 0; i < ans.size(); i++) {
    printf("%d ", ans[i]);
  }
  return 0;
}
