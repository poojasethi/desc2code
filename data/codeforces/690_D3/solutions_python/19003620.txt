#include <bits/stdc++.h>
using namespace std;

#define ff(i, a, b) for (int i = (int)(a); i <= (int)(b); i++)
#define fod(i, a, b) for (int i = (int)(a); i >= (int)(b); i--)
#define ll long long
#define pb push_back
#define fi first
#define se second
typedef pair <int, int> ii;
typedef vector <int> vi;
const int N = 100010, INF = (int)1e9, mod = (int)1e6 + 3;

struct Matrix {
    vector <vi> M;
    vi& operator [] (int x) { return M[x]; }
    int size() { return M.size(); }
    Matrix(int n = 0, int m = 0) { M.assign(n, vi(m, 0)); }
};

Matrix operator * (Matrix a, Matrix b) {
    int m = a.size(), n = b.size(), p = b[0].size();
    Matrix c = Matrix(m, p);
    ff(i, 0, m-1) ff(j, 0, p-1) ff(k, 0, n-1) c[i][j] = (c[i][j] + (1ll * a[i][k] * b[k][j]) % mod) % mod;
    return c;
}

Matrix pw(Matrix a, int n) {
    int m = a.size(); Matrix r = Matrix(m, m); ff(i, 0, m-1) r[i][i] = 1;
    for (int i = 0; (1LL << i) <= n; i++) {
        if (n & (1LL << i)) r = r * a;
        a = a * a;
    }
    return r;
}

int c, w, h;

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);
    cin >> c >> w >> h;
    Matrix F = Matrix(w + 1, 1), Unit = Matrix(w + 1, w + 1);
    F[0][0] = 1; /// 0 brick
    //cout << Unit.size() << endl;
    ff(i, 0, w-1) Unit[i + 1][i] = h;
    ff(i, 0, w) Unit[0][i] = 1;

    Unit = pw(Unit, c);
    F = Unit * F;
    int ans = 0;
    ff(i, 0, w) ans = (ans + F[i][0]) % mod;
    cout << ans << endl;
}
