#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<map>
#include<cmath>
#include<vector>
#include<algorithm>
#include<iomanip>
#include<cmath> 
#include<stack>
#include<math.h>
#include<set>
#include<string>
#include<cstring>
#include<queue>
#include<complex>	
#include<assert.h>
#include<math.h>
#include<memory.h>
#include <stdlib.h>
#include<sstream>	
#include<cstdio>
using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define repi(i,a,n) for(int i=a;i<n;i++)

#define mp make_pair
#define pb push_back
#define fastIO ios::sync_with_stdio(false)
#define read freopen("in.in","r",stdin)
#define write freopen("out.out","w",stdout)
#define scf(xx) scanf("%d",&xx)
#define scfl(xx) scanf("%I64d",&xx)
#define All(a) a.begin(), a.end()
#define LSOne(S) (S & (-S))

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef long double ld;

#define X first 
#define Y second 
int dx[] = { 0, 0, 1, -1, -1, -1, 1, 1 };
int dy[] = { 1, -1, 0, 0, 1, -1, 1, -1 };


ll MOD = 1e6 + 3;

#define MAX_N 105 // increase this if needed
struct Matrix { ll mat[MAX_N][MAX_N]; }; // so that we can return a 2D array
Matrix matMul(Matrix a, Matrix b) { // O(n^3)
	Matrix ans; int i, j, k;
	for (i = 0; i < MAX_N; i++)
	for (j = 0; j < MAX_N; j++)
	for (ans.mat[i][j] = k = 0; k < MAX_N; k++) // if necessary,
		ans.mat[i][j] = (ans.mat[i][j] + (a.mat[i][k] * b.mat[k][j]) % MOD) % MOD; // do modulo arithmetic here
	return ans;
}
Matrix matPow(Matrix base, ll p) { // O(n^3 log p)
	Matrix ans; int i, j;
	for (i = 0; i < MAX_N; i++) for (j = 0; j < MAX_N; j++)
		ans.mat[i][j] = (i == j); // prepare identity matrix
	while (p) { // iterative version of Divide & Conquer exponentiation
		if (p & 1) ans = matMul(ans, base); // check if p is odd (last bit is on)
		base = matMul(base, base); // square the base
		p >>= 1; // divide p by 2
	}
	return ans;
}

Matrix a, b;
ll c, w, h;
int main(){
	//fastIO;
	//read; write;
	cin >> c >> w >> h;
	rep(i, w+1)b.mat[i][0] = 1;
	rep(i, w)b.mat[i][i + 1] = h;
	b = matPow(b, c);
	ll res = 0;
	rep(i, w + 1)res = (res + b.mat[0][i]) % MOD;
	cout << res << endl;
	return 0;
}
