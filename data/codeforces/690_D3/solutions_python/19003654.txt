#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<map>
#include<set>
#include<vector>
#include<cmath>
#include<stack>
#include<queue>
using namespace std;
typedef long long LL;
const int N=105;
const int MOD = 1e6+3;
int n,w,h,m;
struct Matrix{
	LL a[N][N];
	void csh(){
		memset(a,0,sizeof(a));
	}
	void print(){
		for(int i=1;i<=n;i++){
			for(int j=1;j<=n;j++)
				cout<<a[i][j]<<' ';
			cout<<endl;
		}
	}
}Matrix_ini;
LL dp[1000];
Matrix operator * (const Matrix &a, const Matrix &b){
	Matrix tmp;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++){
			tmp.a[i][j] = 0;
			for(int k=1;k<=n;k++)
				tmp.a[i][j] = (tmp.a[i][j] + a.a[i][k] * b.a[k][j]) % MOD;
		}
	return tmp;
}
Matrix mi(const Matrix &x, int n){
	if(n==0) return Matrix_ini;
	Matrix tmp = mi(x, n/2);
	tmp = tmp * tmp;
	if(n % 2) tmp = tmp * x;
	return tmp;
}
LL mi_int(LL x, int n){
	if(n==0) return 1;
	LL tmp = mi_int(x, n/2);
	tmp = tmp * tmp % MOD;
	if(n % 2) tmp = tmp * x % MOD;
	return tmp;	
}
LL f[10000];
int main(){
	cin>>m>>w>>h;
	n = w + 1;
	for(int i=0;i<=w;i++)
		dp[i] = mi_int(h,i);
		
	Matrix_ini.csh();
	for(int i=1;i<=n;i++)
		Matrix_ini.a[i][i] = 1;
		
	Matrix x;
	x.csh();
	for(int i=1;i<n;i++)
		x.a[i][i+1] = 1;
	for(int i=1;i<=n;i++)
		x.a[n][i] = dp[n-i];
		
	f[0] = 1;
	for(int i=1;i<=w;i++){
		for(int j=0;j<=i;j++)
			f[i] = (f[i] + dp[j] * (i==j?1:f[i-j-1])) % MOD;
	}
	if(m<=w) cout<<f[m]<<endl;
	else{
		Matrix ans = mi(x, m-w);
		//ans.print();
		LL sum = 0;
		for(int i=1;i<=n;i++)
			sum=(sum + f[i-1] * ans.a[n][i]) % MOD;
		cout<<sum<<endl;
	}
} 