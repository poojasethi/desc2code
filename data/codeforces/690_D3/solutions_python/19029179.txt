#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <deque>
#include <algorithm>
#include <queue>
#include <cmath>
#include <map>
#include <complex>
#include <cstring>
#include <bitset>
//#include "sdf.hpp"

using namespace std;
#define rep(i, a, b) for(int i = (a); i < (b); i++)
#define repd(i, a, b) for(int i = (a); i > (b); i--)
#define forIt(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define forRev(it, a) for(__typeof((a).rbegin()) it = (a).rbegin(); it != (a).rend(); it++)
#define ft(a) __typeof((a).begin())
#define ll long long
#define ld long double
#define fi first
#define se second
#define mk make_pair
#define pb push_back
#define sz(a) (a).size()
#define all(a) (a).begin(), (a).end()
#define Rep(i,n) for(int i = 0; i < (n); ++i)

typedef complex<ld> cplex;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef pair<ii, int> iii;
typedef vector<ii> vii;
typedef vector<iii> viii;

const int N = 100 + 7;
const int M = 59;
const int mid = M / 2;
const int mod = 1e9 + 9;
const int inf = 1e6 + 3;
const ll linf = 1ll * inf * inf;
const double pi = acos(-1);
const double eps = 1e-7;
const double ep = 1e-5;
const int maxn = 1e5 + 7;
const double PI = acos(-1);


int C, W, H;

int dp[2][107];

struct matrix{
    ll a[N][N];
    int n, m;
    matrix(int _n, int _m){
        n = _n;
        m = _m;
        memset(a, 0, sizeof(a));
    }
    
    matrix(int _n, int _m, bool itype) {
        n = _n;
        m = _m;
        if (itype) {
            rep(i, 1, n + 1) a[i][i] = 1;
        }
    }
    
    matrix operator*(matrix u){
        matrix c(n, u.m);
        for(int i = 1; i <= c.n; i++){
            for(int j = 1; j <= c.m; j++){
                ll tmp = 0;
                for(int t = 1; t <= m; t++)
                    tmp = (tmp + (ll)a[i][t] * u.a[t][j]) % inf;
                c.a[i][j] = tmp;
            }
        }
        return c;
    }
    void print() {
        for(int i = 1; i <= n; ++i) {
            for(int j = 1; j <= m; ++j)
                printf("%lld ", a[i][j]);
            printf("\n");
        }
    }
};

// - (<= H + <= W); <= H; <= W

void solve() {
    cin >> C >> W >> H;
//    int cur = 0;
//    dp[cur][0] = 1;
//    rep(i, 1, C + 1) {
//        int pre = cur;
//        cur ^= 1;
//        dp[cur][0] = dp[pre][0];
//        
//        rep(j, 1, W + 1) {
//            dp[cur][j] = dp[pre][j - 1] * H % inf;
//            dp[cur][0] = (dp[cur][0] + dp[pre][j]) % inf;
//        }
//    }
//    
//    int ans = 0;
//    rep(j, 0, W + 1) ans = (ans + dp[cur][j]) % inf;
//    cout << dp[cur][0] << " " << dp[cur][1] << "\n";
    
    //cout << ans;
    
    matrix b(W + 1, W + 1);
    rep(i, 2, W + 2) {
        b.a[i - 1][i] = H;
    }
    rep(i, 1, W + 2) b.a[i][1] = 1;
//    b.print();
    matrix I(W + 1, W + 1,true);
    //I.print();
    
    while (C > 0) {
        if (C & 1) {
            I = I * b;
        }
        b = b * b;
        C >>= 1;
    }
    //I.print();
    
    matrix res(1, W + 1);
    res.a[1][1] = 1;
    
    
    res = res * I;
    
//    res.print();
    int ans = 0;
    rep(i, 1, res.m + 1) ans = (ans + res.a[1][i]) % inf;
    
    cout << ans;
    
    
    
}



int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
    int T = 1;
    //cin >>T;
    //cout << T << "\n";
    rep(i, 1, T + 1) {
        //printf("Case #%d: ", 1i);
        //        m = i;
        solve();
        //cout << prime.size() << "\n";
    }
    
}