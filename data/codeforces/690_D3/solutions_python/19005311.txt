#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <string>
#include <iostream>
#include <algorithm>
using namespace std;

#define getmid(l,r) ((l) + ((r) - (l)) / 2)
#define MEM(a,b) memset(a,b,sizeof(a))
#define MP(a,b) make_pair(a,b)
#define PB push_back

typedef long long ll;
typedef pair<int,int> pii;
const double eps = 1e-8;
const int INF = (1 << 30) - 1;
const int mod = 1e6 + 3;
const int MAXN = 1000010;

int C,W,H;

struct Mx{
    int a[110][110];
    void clear(){ memset(a,0,sizeof(a)); }
    void stand(){ memset(a,0,sizeof(a)); for(int i = 0; i <= W; ++i) a[i][i] = 1;}
    Mx operator * (const Mx &b){
        Mx c; c.clear();
        for(int i = 0; i <= W; ++i)
        for(int j = 0; j <= W; ++j)
        for(int k = 0; k <= W; ++k){
            c.a[i][j] = (c.a[i][j] + 1ll * a[i][k] * b.a[k][j]) % mod;
        }
        return c;
    }
};

Mx Mx_pow(int num){
    Mx res; res.stand();
    Mx t; t.clear();
    for(int i = 0; i <= W; ++i) t.a[0][i] = 1;
    for(int i = 1; i <= W; ++i) t.a[i][i - 1] = H;
    while(num){
        if(num & 1) res = res * t;
        t = t * t;
        num >>= 1;
    }
    return res;
}

int main(){
	scanf("%d%d%d",&C,&W,&H);
	Mx ans; ans.clear();
	ans.a[0][0] = 1;
	ans = Mx_pow(C) * ans;
	int sum = 0;
	for(int i = 0; i <= W; ++i){
		//printf("%d : %d\n",i,ans.a[i][0]);
		sum = (sum + ans.a[i][0]) % mod;
	}
	printf("%d\n",sum);
	return 0;
}