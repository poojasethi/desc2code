#include <bits/stdc++.h>
using namespace std;

#define MOD 1000003

long long C, W, H;
long long F[105], A[105][105], X[105][105];
long long R[105][105];

long long power(long long N, long long expo)
{
    long long ans = 1;
    
    while(expo)
    {
        if(expo%2)
            ans = ans*N%MOD;
        
        expo/=2;
        N=N*N%MOD;
    }
    
    return ans;
}

void multiply(long long P[][105], long long Q[][105])
{
    for(int i=1; i<=W+1; i++)
        for(int j=1; j<=W+1; j++)
        {
            R[i][j] = 0;
            
            for(int k=1; k<=W+1; k++)
                R[i][j] = (R[i][j] + P[i][k]*Q[k][j])%MOD;
        }
    
    for(int i=1; i<=W+1; i++)
        for(int j=1; j<=W+1; j++)
            P[i][j] = R[i][j];
}

void expoMat(long long N)
{
    if(N==1)
        return;
    
    expoMat(N/2);
    multiply(A, A);
    
    if(N%2)
        multiply(A, X);
}

int main() {
	
	scanf("%lld %lld %lld", &C, &W, &H);
	
	F[0] = 1;
	
	for(int i=1; i<=W; i++)
	{
	    F[i] = power(H, i);
	    
	    for(int j=0; j<i; j++)
	        F[i] = (F[i] + F[i-j-1]*power(H, j))%MOD;
	}
	
	if(C<=W)
	{
	    printf("%lld\n", F[C]);
	    return 0;
	}
	
	for(int i=1; i<=W+1; i++)
	    A[1][i] = X[1][i] = power(H, i-1);
	
	for(int i=2; i<=W+1; i++)
	    A[i][i-1] = X[i][i-1] = 1;
	
	expoMat(C-W);
	long long ans = 0;
	
	for(int i=1; i<=W+1; i++)
	    ans = (ans + A[1][i]*F[W-i+1])%MOD;
	
	printf("%lld\n", ans);
	
	return 0;
}
