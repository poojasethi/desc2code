/*
ID: espr1t
TASK: 
KEYWORDS: 
*/

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;
FILE *in; FILE *out;

const int MAX = 104;
const int MOD = 1000003;

int n, w, h;
int dp[MAX];

int solve() {
    int htow = 1;
    for (int i = 0; i < w; i++)
        htow = (htow * h) % MOD;
    
    memset(dp, 0, sizeof(dp));
    int cur = 0, last = MAX - w - 2;
    dp[MAX - 1] = 1;
    dp[cur] = 1;
//    fprintf(stderr, "At cur = %d (last = %d) answer: %d\n", cur, last, dp[cur]);
    int sum = 1;
    for (int col = 0; col < n; col++) {
        cur++; if (cur >= MAX) cur -= MAX;
        last++; if (last >= MAX) last -= MAX;

        dp[cur] = sum;
        dp[cur] -= ((long long)dp[last] * htow) % MOD;
        if (dp[cur] < 0) dp[cur] += MOD;
        dp[cur] = (dp[cur] * h) % MOD;
        dp[cur] += sum;
        if (dp[cur] >= MOD) dp[cur] -= MOD;
        sum = dp[cur];
//        fprintf(stderr, "At cur = %d (last = %d) answer: %d\n", cur, last, dp[cur]);
    }
    return dp[cur];
}

int slow() {
    memset(dp, 0, sizeof(dp));
	dp[0] = 1;
	int sum = 1;
	for (int col = 0; col < n; col++) {
	    int nsum = sum;
	    // New or continued wall
	    for (int width = w; width > 0; width--) {
	        dp[width] = dp[width - 1] * h;
	        if (dp[width] >= MOD) dp[width] %= MOD;
	        nsum += dp[width]; if (nsum >= MOD) nsum -= MOD;
        }
	    // Empty column
        dp[0] = sum;
        sum = nsum;
    }
    return sum;
}

int main(void) {
	in = stdin; out = stdout;
//	in = fopen("D3.in", "rt"); // out = fopen("file.out", "wt");
	
	fscanf(in, "%d %d %d", &n, &w, &h);
    fprintf(out, "%d\n", solve());
	
	return 0;
}
