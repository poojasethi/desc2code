#include<bits/stdc++.h>
#define FT first
#define SC second
#define PB push_back
#define MP make_pair
#define REP(i, l, r) for(int i = (l); i <= (r); i++)
#define PER(i, r, l) for(int i = (r); i >= (l); i--)
#define FOR(i, n) for(int i = 0; i < (n); i++)
#define ROF(i, n) for(int i = (n) - 1; i >= 0; i--)
#define VEP(i, x) for(int i = 0; i < x.size(); i++)
#define DFOR(i, x) for(int i = hd[x]; i; i = e[i].nxt)
#define MEM(a, b) memset(a, b, sizeof(a))
#define rint read<int>()
#define rll read<LL>()

using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PI;
const int inf = 0x7fffffff;
const int MOD = 1000003;

template <typename tn>
inline tn read(){
	char ch; tn f = 1;
	while (!isdigit(ch = getchar())) if (ch == '-') f = -1;
	tn x = ch - '0';
	while (isdigit(ch = getchar())) x = x * 10 + ch - '0';
	return x * f;
}
template <typename tn> inline void cmax(tn &a, tn b){ if (a < b) a = b; }
template <typename tn> inline void cmin(tn &a, tn b){ if (a > b) a = b; }

const int K = 100 + 5;
int n;
struct Matrix{
	int n[K][K];
	Matrix(int x){
		MEM(n, 0);
		if (x) FOR(i, K) n[i][i] = 1;
	}
}a(0), Fir(0);
inline Matrix operator * (const Matrix a, const Matrix b){
	Matrix c(0);
	REP(i, 1, n) REP(j, 1, n) REP(k, 1, n)
		c.n[i][k] = (c.n[i][k] + (LL)a.n[i][j] * b.n[j][k]) % MOD;
	return c;	
}
inline Matrix power(Matrix a, LL k){
	Matrix s(1);
	for(; k; k >>= 1, a = a * a) 
		if (k & 1) s = s * a;
	return s;
}
void prematrix(){
}

int main(){
	int k = rint;
	n = rint + 1;
	int h = rint, tmp = 1;
	REP(i, 1, n - 1) a.n[i][i + 1] = 1;
	PER(i, n, 1){
		a.n[n][i] = tmp;
		tmp = tmp * h % MOD;
	}
	Matrix ans = power(a, k + 1);
	cout << ans.n[n][n] << endl;
}
