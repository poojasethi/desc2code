#include <bits/stdtr1c++.h>

#define MOD 1000003
#define clr(ar) memset(ar, 0, sizeof(ar))
#define read() freopen("lol.txt", "r", stdin)
#define dbg(x) cout << #x << " = " << x << endl

using namespace std;

struct Matrix{
    int row, col, ar[101][101];

    Matrix(){}
    Matrix(int n, int m, int diagonal = 0){
        clr(ar);
        row = n, col = m;
        for (int i = min(n, m) - 1; i >= 0; i--) ar[i][i] = diagonal;
    }

    Matrix operator* (const Matrix& other) const{
        int i, j, k;
		Matrix res(row, other.col);
		long long x, y = (long long)MOD * MOD;

		for(i = 0; i < row; i++){
			for(j = 0; j < other.col; j++){
				for(k = 0, x = 0; k < col; k++){
					x += ((long long)ar[i][k] * other.ar[k][j]);
					if (x >= y) x -= y;
				}
				res.ar[i][j] = x % MOD;
			}
		}
		return res;
	}

	Matrix operator^ (long long n) const{
	    Matrix x = *this, res = Matrix(row, col, 1);
		while (n){
			if (n & 1) res = res * x;
			n = n >> 1, x = x * x;
		}
		return res;
	}

	Matrix transpose(){
	    Matrix res = Matrix(col, row);
        for (int i = 0; i < row; i++){
            for (int j = 0; j < col; j++){
                res.ar[j][i] = ar[i][j];
            }
        }
        return res;
	}

	Matrix rotate(){
        Matrix res = this->transpose();
        for (int i = 0; i < res.row; i++) reverse(res.ar[i], res.ar[i] + res.col);
        return res;
	}

	inline void print(){
	    for (int i = 0; i < row; i++){
            for (int j = 0; j < col; j++){
                printf("%d%c", ar[i][j], ((j + 1) == col) ? 10 : 32);
            }
	    }
	}
};

int main(){
    int n, w, h, i, j, k, c, x, res;

    while (scanf("%d %d %d", &n, &w, &h) != EOF){
        Matrix mat = Matrix(w + 1, w + 1);
        for (c = 0; c <= w; c++){
            mat.ar[c][0] = 1;
            if (w != c) mat.ar[c][c + 1] = h;
        }

        mat = mat ^ n;
        for (i = 0, res = 0; i < mat.row; i++) res += mat.ar[0][i];
        printf("%d\n", res % MOD);
    }
    return 0;
}
