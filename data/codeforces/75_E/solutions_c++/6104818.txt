#include<stdio.h>
#include<iostream>
#include<string.h>
#include<queue>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<sstream>
#include<cmath>
#include<assert.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define pi acos(-1)
#define inf 1001001001
#define mod 1000000007
//const ll inf = 1000000000005LL;
#define pii pair<int,int>
#define vi vector<int>
#define all(x) x.begin(),x.end()
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define N 250010

template<typename T,typename TT> 
ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> 
ostream& operator<<(ostream &s,vector<T> t){for(int i=0;i<t.size();i++)s<<t[i]<<" ";return s;}
#define DBG(vari) cerr<<#vari<<"="<<(vari)<<endl;
#define FOREACH(i,t) for(typeof(t.begin()) i=t.begin();i!=t.end();i++)

struct point{int x,y;}s,e,a[120],u,v;
int n;
double d[120],L=1,R,t,ti,Li,Ri;
int xm(point a,point b,point c)
{
    return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);
}
void add(double x,double y)
{
    if(x>R)R=x,Ri=y;
    if(x<L)L=x,Li=y;
}
double D(point a,point b)
{
    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)+0.);
}
double C(double x)
{
    int t=(int)x;
    return d[t]+(x-t)*(d[t+1]-d[t]);
}
int main()
{
    cin>>s.x>>s.y>>e.x>>e.y>>n;
    int i;
    for(i=0;i<n;i++)cin>>a[i].x>>a[i].y;
    a[n]=a[0];
    for(i=0;i<n;i++)
    {
        u=a[i],v=a[i+1];
        if(xm(s,e,u)*xm(s,e,v)<0&&xm(u,v,s)*xm(u,v,e)<0)
        {
            t=(double)xm(v,u,s)/(xm(v,u,s)+xm(u,v,e));
            ti=i+(double)xm(s,e,u)/(xm(s,e,u)+xm(e,s,v));
            add(t,ti);
        }
    }
        for(i=0;i<n;i++)
        if(fabs(D(s,a[i])+D(a[i],e)-D(s,e))<1e-8)
        add(D(s,a[i])/D(s,e),i);
        for(i=0;i<n;i++)d[i+1]=d[i]+D(a[i],a[i+1]);
        if(L>R)printf("%.9lf\n",D(s,e));
        else
        {
            double dl=C(Li),dr=C(Ri);
            if(dl>dr)swap(dl,dr);
            printf("%.9lf\n",min(D(s,e)*(1+R-L),D(s,e)*(1-R+L)+min(dr-dl,d[n]-dr+dl)));
        }
    return 0;
}