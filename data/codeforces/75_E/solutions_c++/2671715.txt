/*
Author: LJQ
PROG: Codeforces Beta #67 Div2 E. Ship's Shortest Path
DATE: 2012.11.28
*/
#include <cmath>
#include <cstdio>

using namespace std;

const int maxn = 35;
const double eps = 1e-10;

struct Tpoint{
	double x, y;
} a, b, num[maxn];

double ret;
int n;

void init()
{
	scanf("%lf%lf%lf%lf", &a.x, &a.y, &b.x, &b.y);
	scanf("%d", &n);
	for (int i = 1; i <= n; i ++)
		scanf("%lf%lf", &num[i].x, &num[i].y);
}

inline double Fabs(double x){
	return x < 0 ? -x : x;
}

inline double dist(Tpoint a, Tpoint b){
	return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

inline double Cross(Tpoint p0, Tpoint p1, Tpoint p2){
	return (p1.x - p0.x) * (p2.y - p0.y) - (p2.x - p0.x) * (p1.y - p0.y);
}

bool InterPt(Tpoint a, Tpoint b, Tpoint c, Tpoint d, Tpoint &ret){
	double s0 = Cross(a, b, c);
	double s1 = Cross(a, b, d);
	double s2 = Cross(c, d, a);
	double s3 = Cross(c, d, b);
	if (s0 * s1 > -eps || s2 * s3 > -eps) return 0;
	ret.x = (c.x * s1 - d.x * s0) / (s1 - s0);
	ret.y = (c.y * s1 - d.y * s0) / (s1 - s0);
	return 1;
}

Tpoint pt[2];
double dis[2];

double Fmin(double x, double y, double z){
	if (x > y) x = y;
	if (x > z) x = z;
	return x;
}

void work()
{
	double tot = 0; int cnt = 0;
	num[n + 1] = num[1];
	for (int i = 1; i <= n; i ++){
		if (Fabs(Cross(a, b, num[i])) < eps && Fabs(Cross(a, b, num[i + 1])) < eps) break;
		if (Fabs(Cross(a, b, num[i])) < eps){
			pt[cnt] = num[i]; dis[cnt ++] = tot;
		}
		if (InterPt(a, b, num[i], num[i+1], pt[cnt])) 
			dis[cnt] = tot + dist(num[i], pt[cnt]), cnt ++;
		tot += dist(num[i], num[i + 1]);
	}
	if (cnt < 2){
		ret = dist(a, b);
	} else {
		ret = dist(a, b) - dist(pt[0], pt[1]) + Fmin(dist(pt[0], pt[1]) * 2, dis[1] - dis[0], tot - (dis[1] - dis[0]));
	}
}

void print()
{
	printf("%.10lf\n", ret);
}

int main()
{
	init();
	work();
	print();
	return 0;
}
