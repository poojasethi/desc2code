#include<cstdio>
#include<cmath>
#include<algorithm>
#define next(x) (x==n?1:x+1)
using namespace std;
struct point
{	double x,y;
} a[105],s,e,f[5];
int g[5],n,m;
double ans,eps=1e-10;
double mul(point a,point b,point c)
{	return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x); 
}
double dist(point a,point b)
{	return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
void cross(int p,point a,point b,point c,point d)
{	double t1=mul(a,c,b),t2=mul(a,b,d),t3=mul(c,a,d),t4=mul(c,d,b);
	if (fabs(t1)<eps&&fabs(t2)<eps) 
		return;
	if (fabs(dist(a,c)+dist(b,c)-dist(a,b))<eps) 
	{	f[m]=c,g[m++]=p; 
		return;
	}
	if (t1*t2>eps&&t3*t4>eps)
	{	f[m].x=(t1*d.x+t2*c.x)/(t1+t2);
		f[m].y=(t1*d.y+t2*c.y)/(t1+t2);
		g[m++]=p;
		return;
	}
}
double calc(int st,int ed,int s,int e)
{	double res;
	int i;
	if (ed==1)
		ed=n;
	else --ed;
	res=dist(f[s],a[st]);
	for (i=st;i!=ed;i=next(i))
		res+=dist(a[i],a[next(i)]);
	return res+dist(a[ed],f[e]);
}
double work()
{	int i;
	a[0]=a[n];
	for (i=1;i<=n;++i)
		cross(i,s,e,a[i-1],a[i]);
	if (m>1)
	{	if (dist(s,f[0])>dist(s,f[1]))
			swap(f[0],f[1]),swap(g[0],g[1]);
		ans=min(calc(g[0],g[1],0,1),calc(g[1],g[0],1,0));
		ans=min(ans,2*dist(f[0],f[1]));
		ans+=dist(s,f[0])+dist(f[1],e);
	}
	else ans=dist(s,e);
	return ans;
}
int main()
{	int i;
	scanf("%lf%lf%lf%lf",&s.x,&s.y,&e.x,&e.y);
	scanf("%d",&n);
	for (i=1;i<=n;i++)
		scanf("%lf%lf",&a[i].x,&a[i].y);
	printf("%.10lf\n",work());
	return 0;
}
				 	 				  	   	 	 			  	