#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

struct point {double x,y;};

const double eps = 1e-2;
const double INF = 1e+9;
const double pi = acos(-1.0);

int N;
point A,B,P[40];
double sum[40];

double area(point P, point Q, point R){
    return ((Q.x - P.x) * (R.y - P.y) - (Q.y - P.y) * (R.x - P.x)) / 2.0;
}

double dot(point O, point P, point Q){
    return (P.x - O.x) * (Q.x - O.x) + (P.y - O.y) * (Q.y - O.y);
}

double dist(point P, point Q){
    double dx = P.x - Q.x, dy = P.y - Q.y;
    return sqrt(dx*dx + dy*dy);
}

int sgn(double x){
    if(x > eps) return 1;
    if(x < -eps) return -1;
    return 0;
}

double perimeter(double x){
    int n = (int)x;
    if(n < 0) n = 0;
    if(n == N) n = N-1;
    return sum[n] + (sum[n+1] - sum[n]) * (x - n);
}

double func(void){
    double low = 1.0, high = 0.0;
    double lowindex = 0.0, highindex = 0.0;
    
	for(int i=0;i<N;i++) 
		if(sgn(area(A,B,P[i])) == 0 && dot(A,B,P[i]) > 0.0 && dot(B,A,P[i]) > 0.0){
        	double tmp = dist(A,P[i]) / dist(A,B);
        	if(tmp < low) {low = tmp; lowindex = i;}
        	if(tmp > high) {high = tmp; highindex = i;}
    	}
    
	for(int i=0;i<N;i++){
        point C = P[i], D = P[(i+1)%N];
        if(sgn(area(A,B,C)) * sgn(area(A,B,D)) == -1 && sgn(area(C,D,A)) * sgn(area(C,D,B)) == -1){
            double tmp = area(C,D,A) / (area(C,D,A) - area(C,D,B));
            double id = i + area(A,B,C) / (area(A,B,C) - area(A,B,D));
            if(tmp < low) {low = tmp; lowindex = id;}
            if(tmp > high) {high = tmp; highindex = id;}
        }
    }
    
    if(low > high)
		return dist(A,B);
    
    double p1 = perimeter(lowindex), p2 = perimeter(highindex);
    if(p1 > p2) swap(p1,p2);
    double buf = min(p2-p1,sum[N]-(p2-p1));
    
    return min(dist(A,B) * (1.0 + high - low), dist(A,B) * (1.0 - (high - low)) + buf);
}

int main(void){
    cin >> A.x >> A.y >> B.x >> B.y;
    cin >> N;

	for(int i=0;i<N;i++)
		cin >> P[i].x >> P[i].y;
    
	for(int i=0;i<N;i++)
		sum[i+1] = sum[i] + dist(P[i],P[(i+1)%N]);
    
    double ans = func();
    printf("%.9f\n",ans);
    
    return 0;
}