#include<cstdio>
#include<cmath>

struct Point
{
    double X,Y;
};

double Cp(Point &P0,Point &P1,Point &P2)
{
    return (P1.X-P0.X)*(P2.Y-P0.Y)-(P2.X-P0.X)*(P1.Y-P0.Y);
}

bool Cross(Point &A,Point &B,Point &C,Point &D,double &X,double &Y)
{
    double Cp1=Cp(A,B,C);
    double Cp2=Cp(A,B,D);
    double Cp3=Cp(C,D,A);
    double Cp4=Cp(C,D,B);
    
    if(Cp1*Cp2>=0||Cp3*Cp4>=0) return 0;
    
    double K=Cp1/(Cp1-Cp2);
    
    X=C.X+(D.X-C.X)*K;
    Y=C.Y+(D.Y-C.Y)*K;
    
    return 1;
}

void Get(int &T)
{
    char C;bool F=0;
    for(;C=getchar(),C<'0'||C>'9';)if(C=='-')F=1;
    for(T=C-'0';C=getchar(),C>='0'&&C<='9';T=T*10+C-'0');
    F&&(T=-T);
}

int N;
Point S,T;
Point A[105];

void Init()
{
    scanf("%lf %lf %lf %lf",&S.X,&S.Y,&T.X,&T.Y);
    
    Get(N);
    for(int i=1;i<=N;i++)
        scanf("%lf %lf",&A[i].X,&A[i].Y);
    A[0]=A[N];
}

void Debug()
{
    Point A={1,3};
    Point B={1,4};
    Point C={1,1};
    Point D={1,2};
    
    double X=0,Y=0;
    
    int F=Cross(A,B,C,D,X,Y);
    printf("%d %lf %lf\n",F,X,Y);
}

double Dist(Point A,Point B)
{
    double DX=A.X-B.X;
    double DY=A.Y-B.Y;
    return sqrt(DX*DX+DY*DY);
}

Point B[15];
double Dis[15];
int BTop;
double Length;
double Ans;

double Min(double X,double Y)
{
    return X<Y?X:Y;
}

void Work()
{
    double X,Y;
    for(int i=0;i<N;i++)
    {
        if(Cp(S,T,A[i])==0&&Cp(S,T,A[i+1])==0) break;
        
        if(Cp(S,T,A[i])==0)
        {
            B[++BTop]=A[i];
            Dis[BTop]=Length;
        }
        
        Length+=Dist(A[i],A[i+1]);
        
        if(Cross(S,T,A[i],A[i+1],X,Y)==0) continue;
        
        B[++BTop]=(Point){X,Y};
        Dis[BTop]=Length-Dist(A[i+1],B[BTop]);
    }
    
    if(BTop<2)
    {
        Ans=Dist(S,T);
    }
    else
    {
        Ans=Dist(S,T)-Dist(B[1],B[2]);
        Ans+=Min(2*Dist(B[1],B[2]),Min(Dis[2]-Dis[1],Length-Dis[2]+Dis[1]));
    }
}

void Output()
{
    printf("%lf\n",Ans);
}

int main()
{
    Init();
    Work();
    Output();
    return 0;
}