#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
using namespace std;
#define rep(x, n) for (int x = 1; x <= n; ++x)
#define zrp(x, n) for (int x = n; x; --x)
#define FOR(x, l, r) for (int x = l; x <= r; ++x)
#define foredge(i, x) for (int i = start[x]; i; i = e[i].l)
typedef long long int64;
struct point{double x, y;}a[110], s, e, u, v;
inline long double dis(point w1, point w2){return sqrt((w1.x - w2.x) * (w1.x - w2.x) + (w1.y - w2.y) * (w1.y - w2.y));}
inline long double chaji(point w1, point w2, point w3){return (w2.x - w1.x) * (w3.y - w1.y) - (w2.y - w1.y) * (w3.x - w1.x);}
long double l[110], t1, t2, l1, l2, r1, r2, ans;
int n;
inline long double calc(long double x)
{
    int t = int(x);
    return l[t] + (x - t) * (l[t + 1] - l[t]);
}
int main()
{
    scanf("%lf%lf%lf%lf%d", &s.x, &s.y, &e.x, &e.y, &n);
    for (int i = 1; i <= n; i++) scanf("%lf%lf", &a[i].x, &a[i].y);
    a[n + 1] = a[1], l1 = 1.0;
    for (int i = 1; i <= n; i++)
    {
        u = a[i], v = a[i + 1], l[i] = l[i - 1] + dis(u, v);
        if (chaji(u, v, s) * chaji(u, v, e) < -1e-14 && chaji(s, e, u) * chaji(s, e, v) < -1e-14)
        {
            t1 = chaji(u, v, s) / (chaji(u, v, s) + chaji(v, u, e));
            t2 = (i - 1) * 1.0 + chaji(s, e, u) / (chaji(s, e, u) + chaji(e, s, v));
            if (t1 > r1) r1 = t1, r2 = t2;
            if (t1 < l1) l1 = t1, l2 = t2;
        }
        if (fabs(dis(s, u) + dis(u, e) - dis(s, e)) < 1e-9)
        {
            if (fabs(dis(s, v) + dis(v, e) - dis(s, e)) < 1e-9) continue;
            t1 = dis(s, u) / dis(s, e), t2 = i * 1.0;
            if (t1 > r1) r1 = t1, r2 = t2;
            if (t1 < l1) l1 = t1, l2 = t2;
        }
    }
    if (l1 > r1 + 1e-9) printf("%.14lf\n", (double)dis(s, e));
    else
    {
        l2 = calc(l2), r2 = calc(r2);
        if (l2 > r2) swap(l2, r2);
        ans = min(dis(s, e) * (r1 - l1 + 1), dis(s, e) * (l1 - r1 + 1) + min(l[n] + l2 - r2, r2 - l2));
        printf("%.14lf\n", (double)ans);
    }
    return 0;
}
