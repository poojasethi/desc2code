#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cmath>
using namespace std;

const int maxn = 105;
const double eps = 1e-10;
struct Tpoint { double x, y; };
Tpoint a[maxn], st, en, h[maxn];
int p[maxn], n, m;
double ans;

double dis(Tpoint a, Tpoint b) {
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

double cross(Tpoint s, Tpoint a, Tpoint b) {
    return (a.x - s.x) * (b.y - s.y) - (b.x - s.x) * (a.y - s.y);
}

void check(Tpoint a, Tpoint b, Tpoint c, Tpoint d, int i) {
    double t1 = cross(a, c, b), t2 = cross(a, b, d), t3 = cross(c, a, d), t4 = cross(c, d, b);
    if (fabs(t1) < eps && fabs(t2) < eps) return ;
    if (fabs(dis(a, c) + dis(c, b) - dis(a, b)) < eps) {
        h[m] = c; p[m] = i; ++m; return ;
    }
    if (t1 * t2 > eps && t3 * t4 > eps) {
        h[m].x = (t1 * d.x + t2 * c.x) / (t1 + t2);
        h[m].y = (t1 * d.y + t2 * c.y) / (t1 + t2);
        p[m] = i; ++m;
    }
}

double getl(int st, int en, int x, int y) {
    double res; st = (st + 1) % n; res = 0;
    for (int i = st; i != en; i = (i + 1) % n)
        res += dis(a[i], a[(i + 1) % n]);
    return res + dis(h[x], a[st]) + dis(a[en], h[y]);
}

int main() {
    int i;
    scanf("%lf%lf%lf%lf%d", &st.x, &st.y, &en.x, &en.y, &n);
    for (i = 0; i < n; ++i) scanf("%lf%lf", &a[i].x, &a[i].y);
    for (i = 0; i < n; ++i) check(st, en, a[i], a[(i + 1) % n], i);
    if (m == 2) {
        if (dis(st, h[0]) > dis(st, h[1])) swap(h[0], h[1]), swap(p[0], p[1]);
        ans = min(getl(p[0], p[1], 0, 1), getl(p[1], p[0], 1, 0));
        ans = min(ans, dis(h[0], h[1]) * 2);
        ans += dis(st, h[0]) + dis(h[1], en);
    } else ans = dis(st, en);
    printf("%.10lf\n", ans);
    return 0;
}
