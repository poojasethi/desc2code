#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <cassert>
using namespace std;
#define p(x) cout<<#x<<":"<<x<<"\n"
#define cross(x1,y1,x2,y2) ((x1)*(y2)-(x2)*(y1))
#define dist(x1,y1,x2,y2) sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define lim 31
#define eps 1e-10
#define in(x,y,z) ((x)+eps>min(y,z) && (x)-eps<max(y,z))
#define in2(x,y,z) ((x)-eps>min(y,z) && (x)+eps<max(y,z))

int sx,sy,ex,ey,n,i,j,c;
double mn,s,z,xi,yi,s2,s3;
int X[lim],Y[lim],I[lim];
double XI[lim],YI[lim];

bool intersect(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4)
{
  double A1,B1,C1,A2,B2,C2,det;

  A1=y2-y1;
  B1=x1-x2;
  C1=A1*x1+B1*y1;
  A2=y4-y3;
  B2=x3-x4;
  C2=A2*x3+B2*y3;
  det=cross(A1,B1,A2,B2);
  if(fabs(det)<eps)
    return 0;
  else
  {
    xi=cross(C1,B1,C2,B2)/det;
    yi=cross(A1,C1,A2,C2)/det;
    return in(xi,x1,x2) && in(yi,y1,y2) && in(xi,x3,x4) && in(yi,y3,y4);
  }
}
int main()
{
  scanf("%d%d%d%d%d",&sx,&sy,&ex,&ey,&n);    
  for(i=0;i<n;i++)
    scanf("%d%d",&X[i],&Y[i]);
  X[n]=X[0];
  Y[n]=Y[0];
  for(i=0;i<n;i++)
    if(intersect(sx,sy,ex,ey,X[i],Y[i],X[i+1],Y[i+1]))
    {
      I[c]=i;
      XI[c]=xi;
      YI[c]=yi;
      for(j=0;j<i;j++)
        if(intersect(sx,sy,ex,ey,X[j],Y[j],X[j+1],Y[j+1]) && fabs(XI[c]-xi)<eps && fabs(YI[c]-yi)<eps)
          break;
      if(j==i)
        c++;
    }
  assert(c>=0 || c<=2);
  if(c==2)
  {
    s=min(dist(sx,sy,XI[0],YI[0]),dist(sx,sy,XI[1],YI[1]))+min(dist(ex,ey,XI[0],YI[0]),dist(ex,ey,XI[1],YI[1]));
    assert(fabs(s+dist(XI[0],YI[0],XI[1],YI[1])-dist(sx,sy,ex,ey))<eps);
    s2=s+2*dist(XI[0],YI[0],XI[1],YI[1]);
    //assert(dist(XI[0],YI[0],X[I[0]+1],Y[I[0]+1])>eps && dist(XI[0],YI[0],X[I[0]+1],Y[I[0]+1])+eps<dist(X[I[0]],Y[I[0]],X[I[0]+1],Y[I[0]+1]));
    //assert(dist(XI[1],YI[1],X[I[1]],Y[I[1]])>eps && dist(XI[1],YI[1],X[I[1]],Y[I[1]])+eps<dist(X[I[1]],Y[I[1]],X[I[1]+1],Y[I[01]+1]));
    assert(I[0]!=I[1]);
    s3=dist(XI[0],YI[0],X[I[0]+1],Y[I[0]+1])+dist(XI[1],YI[1],X[I[1]],Y[I[1]]);
    for(j=(I[0]+1)%n;j!=I[1];j=(j+1)%n)
      s3+=dist(X[j],Y[j],X[j+1],Y[j+1]);
    for(j=0;j<n;j++)
      z+=dist(X[j],Y[j],X[j+1],Y[j+1]);
    mn=min(s2,min(s+s3,z-s3+s));
  }
  else
    mn=dist(sx,sy,ex,ey);
  printf("%.10lf",mn);
  return 0;
}
