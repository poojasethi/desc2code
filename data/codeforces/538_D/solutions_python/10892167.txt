n = int(raw_input())
board = []
op = []
xp = []
moves=[]
for i in range(n):
    row = raw_input()
    for j,l in enumerate(row):
        if l=="o":
            op.append((i,j))
            xp.append((i,j))

        if l=="x":
            xp.append((i,j))

    board.append(row)
def validate_move(dr,dc,cover=False):
    for o in op:
        r = o[0]+dr
        c = o[1]+dc
        if r < 0 or r>=n or c<0 or c>=n:
            continue
        if board[r][c]==".":
            return False
        if cover:
            covered.add((r,c))

    return True

imp = False
covered = set()
for x in xp:
    if x in covered:
        continue
    found = False
    for o in op:
        dr = x[0]-o[0]
        dc = x[1]-o[1]
        if validate_move(dr,dc):
            validate_move(dr,dc,cover=True)
            found = True
            moves.append((dr,dc))
            break
    if not found:
        imp = True


if imp:
    print "NO"
else:
    print "YES"
    grid = [['.' for i in range(2*n-1)] for i in range(2*n-1)]
    
    for move in moves:
        grid[n-1+move[0]][n-1+move[1]]="x"
    grid[n-1][n-1]="o"

    for row in grid:
        print "".join(row)





