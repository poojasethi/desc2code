#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

long long a, b;
long long v[110000], dp[110000];
int c[110000], n, q;

int main() {
	cin >> n >> q;
	for (int i = 0; i < n; i++)
		cin >> v[i];
	for (int i = 0; i < n; i++)
		cin >> c[i];
	while (q--) {
		cin >> a >> b;
		memset(dp + 1, 0x80, sizeof(dp[0]) * n); // Initialize to -inf
		int c0 = 0, c1 = 1; // c0 would never equals to c1
		// dp[c] is the max value of a sequence in range [0, i] ends with color c
		for (int i = 0; i < n; i++) {
			if (c[i] == c0) {
				dp[c0] = max(dp[c0], max(dp[c0] + v[i] * a, dp[c1] + v[i] * b));
			} else {
				dp[c[i]] = max(dp[c[i]], max(dp[c0] + v[i] * b, dp[c[i]] + v[i] * a));
				if (dp[c[i]] > dp[c1])
					c1 = c[i];
				if (dp[c0] < dp[c1])
					swap(c0, c1);
			}
		}
		cout << dp[c0] << endl;
	}
	return 0;
}

						   	    		   		    	