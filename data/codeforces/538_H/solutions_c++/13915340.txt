#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cassert>
#include <algorithm>
#include <vector>
#include <stack>
using namespace std;

#ifdef wck
#define ep(...) fprintf(stderr, __VA_ARGS__)
#else
#define ep(...)
#endif

const int MAXN = (int) 1e5 + 3;
const int MAXM = (int) 1e5 + 3;
const int MAXV = MAXN * 18;

void noSolution() {
  printf("IMPOSSIBLE\n");
  exit(0);
}

int t, T;
int n, m;
int l[MAXN], r[MAXN];

vector<int> edge[MAXV];

void addEdge(int u, int v) {
  ep("%d -> %d\n", u, v);
  edge[u].push_back(v);
}

void insert(int u, int v) {
  addEdge(u, v);
  addEdge(v ^ 1, u ^ 1);
}

int col[MAXV], colCount;
int dfn[MAXV], low[MAXV], timer;
stack<int> stk;

/*
void tarjan(int u) {
  dfn[u] = low[u] = timer++;
  stk.push(u);
  for (int i = 0, _i = edge[u].size(); i < _i; i++) {
    int v = edge[u][i];
    if (col[v] != -1) continue;
    if (dfn[v] == -1) {
      tarjan(v);
      low[u] = min(low[u], low[v]);
    }
    else low[u] = min(low[u], dfn[v]);
  }
  if (low[u] == dfn[u]) {
    while (true) {
      int v = stk.top();
      stk.pop();
      col[v] = colCount;
      if (v == u) break;
    }
    colCount++;
  }
}
*/

void tarjan(int S) {
  stack< pair<int, int> > s;
  s.push(make_pair(S, -1));
  int timer = 0;
  while (! s.empty()) {
    int u = s.top().first;
    int &pt = s.top().second;

    if (pt >= 0) {
      int v = edge[u][pt];
      low[u] = min(low[u], low[v]);
    }
    else {
      low[u] = dfn[u] = timer++;
      stk.push(u);
    }
    pt++;

    for (int _pt = edge[u].size(); pt < _pt; pt++) {
      int v = edge[u][pt];
      if (col[v] != -1) continue;
      if (dfn[v] == -1) {
        s.push(make_pair(v, -1));
        break;
      }
      low[u] = min(low[u], dfn[v]);
    }

    if (pt == (int) edge[u].size()) {
      if (low[u] == dfn[u]) {
        while (true) {
          int v = stk.top();
          stk.pop();
          col[v] = colCount;
          if (v == u) break;
        }
        colCount++;
      }
      s.pop();
    }
  }
}

int main() {
  scanf("%d%d", &t, &T);
  scanf("%d%d", &n, &m);

  vector<int> p;
  for (int i = 0; i < n; i++) {
    scanf("%d%d", l + i, r + i);
    p.push_back(l[i]);
    p.push_back(r[i]);
    if (t > l[i]) p.push_back(t - l[i]);
    if (t > r[i]) p.push_back(t - r[i]);
  }
  p.push_back(0);
  p.push_back(T);
  sort(p.begin(), p.end());
  p.erase(unique(p.begin(), p.end()), p.end());
  while (p.back() > T) p.pop_back();

#ifdef wck
  for (unsigned int i = 0; i < p.size(); i++) ep("%d ", p[i]);
  ep("\n");
#endif

  int k = p.size();
  int off1 = 0, off2 = 2 * k, off3 = 4 * k;
#define idx(off, i, b) ((off) + ((i) << 1) + (b))
  for (int i = 0; i < k; i++) {
    int x = p[i];
    int j = lower_bound(p.begin(), p.end(), t - x) - p.begin();
    if (j) {
      j--;
      insert( idx(off1, i, 0), idx(off2, j, 1) );
      insert( idx(off2, i, 0), idx(off1, j, 1) );
    }

    if (i + 1 < k) {
      j = upper_bound(p.begin(), p.end(), T - p[i + 1]) - p.begin();
      if (j) {
        j--;
        insert( idx(off1, i, 1), idx(off2, j, 0) );
        insert( idx(off2, i, 1), idx(off1, j, 0) );
      }

      insert( idx(off1, i, 0), idx(off1, i + 1, 0) );
      insert( idx(off2, i, 0), idx(off2, i + 1, 0) );
    }
  }
  insert( idx(off1, k - 1, 1), idx(off1, k - 1, 0) );
  insert( idx(off2, k - 1, 1), idx(off2, k - 1, 0) );

  for (int i = 0; i < n; i++) {
    int j = lower_bound(p.begin(), p.end(), l[i]) - p.begin();
    if (j) {
      j--;
      insert( idx(off3, i, 0), idx(off1, j, 1) );
      insert( idx(off3, i, 1), idx(off2, j, 1) );
    }

    j = lower_bound(p.begin(), p.end(), r[i]) - p.begin();
    if (j < k) {
      insert( idx(off3, i, 0), idx(off1, j, 0) );
      insert( idx(off3, i, 1), idx(off2, j, 0) );
    }
  }

  for (int i = 0; i < m; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    u--, v--;
    insert( idx(off3, u, 0), idx(off3, v, 1) );
    insert( idx(off3, u, 1), idx(off3, v, 0) );
  }

  int total = 4 * k + 2 * n;
  assert(total <= MAXV);
  fill(col, col + total, -1);
  fill(dfn, dfn + total, -1);
  for (int i = 0; i < total; i++)
    if (col[i] == -1) tarjan(i);
  for (int i = 0; i < total; i+= 2)
    if (col[i] == col[i | 1]) {
      ep("confilct %d %d\n", i, i | 1);
      noSolution();
    }
  
  int n1, n2;
  for (int i = 0; i < k; i++)
    if (col[idx(off1, i, 0)] < col[idx(off1, i, 1)]) {
      n1 = p[i];
      break;
    }
  for (int i = 0; i < k; i++)
    if (col[idx(off2, i, 0)] < col[idx(off2, i, 1)]) {
      n2 = p[i];
      break;
    }
  //assert(n1 + n2 >= t);
  //assert(n1 + n2 <= T);
  printf("POSSIBLE\n");
  //return 0;
  printf("%d %d\n", n1, n2);
  for (int i = 0; i < n; i++) {
    printf("%d",
        col[idx(off3, i, 0)] < col[idx(off3, i, 1)] ?
        1 : 2);
  }
  printf("\n");

  return 0;
}
