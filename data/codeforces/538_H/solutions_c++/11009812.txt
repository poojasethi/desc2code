#include <bits/stdc++.h>
using namespace std;
const int Nx=102345;
const int oo=0x7fffffff;
int l[Nx],r[Nx],n[3],vis[Nx];
vector<int> adj[Nx],ss;

void impossible(){
	printf("IMPOSSIBLE\n");
	exit(0);
}

void dfs(int id, int v){
	vis[id]=v;
	ss.push_back(id);
	for(int jd,k=0;k<adj[id].size();k++){
		jd=adj[id][k];
		if(!vis[jd])dfs(jd,3-v);
		if(vis[jd]==vis[id]) impossible();
	}
}

bool is_in(int n,int a, int b){
	return (a<=n && n<=b);
}

int main(){
	int t,T,N,M;
	scanf("%d%d%d%d",&t,&T,&N,&M);
	n[1]=0; n[2]=oo;
	for(int i=1;i<=N;i++){
		scanf("%d%d",l+i,r+i);
		n[1]=max(l[i],n[1]);
		n[2]=min(r[i],n[2]);
	}
	if((n[1]+n[2])<t)n[1]=t-n[2];
	if((n[1]+n[2])>T)n[2]=T-n[1];
	if( n[1]<0 || n[2]<0 || (n[1]+n[2])>T || (n[1]+n[2])<t )impossible();
	
	for(int a,b;M--;){
		scanf("%d%d",&a,&b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	for(int i=1;i<=N;i++)if(!vis[i]){
		ss.clear();
		dfs(i,1);
		bool ok[3];
		ok[1]=ok[2]=true;
		for(int k=0;k<ss.size();k++){
			if( !is_in(n[  vis[ss[k]]],l[ss[k]],r[ss[k]]) ) ok[1]=false;
			if( !is_in(n[3-vis[ss[k]]],l[ss[k]],r[ss[k]]) ) ok[2]=false;
		}
		
		if(ok[1]){
			//...
		}else if(ok[2]){
			for(int k=0;k<ss.size();k++)vis[ss[k]]=3-vis[ss[k]];
		}else impossible();
	}
	printf("POSSIBLE\n%d %d\n",n[1],n[2]);
	for(int i=1;i<=N;i++)printf("%d",vis[i]);
	printf("\n");
	return 0;
}