#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

int ls[100000], rs[100000];
vector<int> con[100000];
int grp[100000];

queue<int> q;

bool bfs(){
	while(q.size()>0){
		int cur = q.front(); q.pop();
		for(int i=0; i<con[cur].size(); i++){
			if(grp[con[cur][i]] == grp[cur]){
				printf("IMPOSSIBLE\n");
				return false;
			}else if(grp[con[cur][i]] == 0){
				grp[con[cur][i]] = 3-grp[cur];
				q.push(con[cur][i]);
			}
		}
	}
	return true;
}

int main(){
	memset(grp, 0, sizeof(grp));
	int t, T;
	scanf("%d %d", &t, &T);
	int n, m;
	scanf("%d %d", &n, &m);
	int L = 0, R = 1000000000;
	for(int i=0; i<n; i++){
		scanf("%d %d", &ls[i], &rs[i]);
		L = max(L, ls[i]);
		R = min(R, rs[i]);
	}
	// printf("	%d %d\n", L, R);
	if(L+R < t){
		L = t-R;
	}else if(L+R > T){
		R = T-L;
	}
	// printf("	%d %d\n", L, R);
	if(L < 0 || R < 0){
		printf("IMPOSSIBLE\n");
		return 0;
	}
	int a, b;
	for(int i=0; i<m; i++){
		scanf("%d %d", &a, &b);
		a--; b--;
		con[a].push_back(b);
		con[b].push_back(a);
	}
	for(int i=0; i<n; i++){
		if(ls[i] <= L && L <= rs[i] && ls[i] <= R && R <= rs[i]){
		}else if(ls[i] <= L && L <= rs[i]){
			grp[i] = 1;
			q.push(i);
			if(!bfs()) return 0;
		}else if(ls[i] <= R && R <= rs[i]){
			grp[i] = 2;
			q.push(i);
			if(!bfs()) return 0;
		}else{
			printf("IMPOSSIBLE\n");
			return 0;
		}
	}
	for(int i=0; i<n; i++){
		if(grp[i] == 0){
			grp[i] = 1;
			q.push(i);
			if(!bfs()) return 0;
		}
	}
	printf("POSSIBLE\n");
	printf("%d %d\n", L, R);
	for(int i=0; i<n; i++){
		printf("%d", grp[i]);
	}
	printf("\n");
	
	return 0;
}