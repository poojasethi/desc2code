#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
#include<queue>
#define SF scanf
#define PF printf
using namespace std;
typedef long long LL;
const int MAXN = 100000;
const int INF = 0x3f3f3f3f;
int col[MAXN+10], L[MAXN+10], R[MAXN+10];
int tmin, tmax, n, m;
vector <int> G[MAXN+10];
void dfs(int u, int c) {
	if(col[u]) {
		if(col[u] != c) {
			puts("IMPOSSIBLE");
			exit(0);
		}
		return ;
	}
	col[u] = c;
	for(int i = 0; i < G[u].size(); i++) {
		int v = G[u][i];
		dfs(v, 3-c);
	}
}
bool in(int i, int x) {
	return L[i] <= x && x <= R[i];
}
int main() {
	SF("%d%d", &tmin, &tmax);
	SF("%d%d", &n, &m);
	for(int i = 1; i <= n; i++) SF("%d%d", &L[i], &R[i]);
	for(int i = 1; i <= m; i++) {
		int u, v;SF("%d%d", &u, &v);
		G[u].push_back(v); G[v].push_back(u);
	}
	int tl = INF, tr = 0;
	for(int i = 1; i <= n; i++) tl = min(tl, R[i]), tr = max(tr, L[i]);
	if(tl + tr < tmin)
		tr = tmin - tl;
	else if(tl + tr > tmax)
		tl = tmax - tr;
	if(tl < 0) { puts("IMPOSSIBLE"); exit(0); }
	for(int i = 1; i <= n; i++) {
		if(!in(i, tl)) dfs(i, 2);
		if(!in(i, tr)) dfs(i, 1);
	}
	for(int i = 1; i <= n; i++) if(!col[i]) dfs(i, 1);
	puts("POSSIBLE");
	PF("%d %d\n", tl, tr);
	for(int i = 1; i <= n; i++) PF("%d", col[i]);
}

 			   	   				  		   			  				