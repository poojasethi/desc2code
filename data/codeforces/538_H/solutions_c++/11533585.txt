#include <iostream>
#include <set>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <map>

using namespace std;

int minimo(multiset<int> &s)
{
  return *(s.begin());
}

int maximo(multiset<int> &s)
{
  return *(--(s.end()));
}

void borra(multiset<int> &s,int x)
{
  s.erase(s.find(x));
}

int t,T,n,m;
int l[1000000];
int r[1000000];
vector<int> g[1000000];
int color[1000000];

int maxl[3],minr[3];
int maxltot[3],minrtot[3];
vector<int> listacolor;

bool compara(int u1,int u2)
{
  return r[u1]<r[u2] or (r[u1]==r[u2] and l[u1]<l[u2]);
}

void colorea(int u,int c)
{
  if (color[u]!=0) {
    if (color[u]!=c) {
      cout<<"IMPOSSIBLE"<<endl;
      exit(0); 
   }
    return;
  }
  color[u]=c;
  listacolor.push_back(u);
  maxl[color[u]]=max(maxl[color[u]],l[u]);
  minr[color[u]]=min(minr[color[u]],r[u]);
  vector<int> &ar=g[u];
  for (int i=0;i<int(ar.size());i++) {
    int v=ar[i];
    colorea(v,3-c);
  }
}

void generasol(int x,int y)
{
  for (int u=1;u<=n;u++)
    color[u]=0;
  for (int u=1;u<=n;u++) {
    if (not color[u] and int(g[u].size())>0) {
      listacolor=vector<int>();
      maxl[1]=maxl[2]=0;
      minr[1]=minr[2]=1000000000;
      colorea(u,1);
      if (not (maxl[1]<=x and x<=minr[1] and maxl[2]<=y and y<=minr[2])) {
	for (int i=0;i<int(listacolor.size());i++)
	  color[listacolor[i]]=3-color[listacolor[i]];
      }
    } else if (not color[u]) {
      if (l[u]<=x and x<=r[u]) color[u]=1;
      else color[u]=2;
    }
  }
  cout<<"POSSIBLE"<<endl;
  cout<<x<<" "<<y<<endl;
  for (int u=1;u<=n;u++)
    cout<<color[u];
  cout<<endl;
  exit(0);
}

multiset<int> sl1,sr1,sl2,sr2;

void mirasolucion()
{
  int l1=maximo(sl1);
  int r1=minimo(sr1);
  int l2=maximo(sl2);
  int r2=minimo(sr2);
  if (l1>r1 or l2>r2 or not (r1+r2>=t and l1+l2<=T)) return;
  if (l1+l2>=t) generasol(l1,l2);
  if (l2+r1>=t) generasol(t-l2,l2);
  generasol(r1,t-r1);
}

struct info {
  vector<pair<int,int> > entra,sale;
};

int main()
{
  ios::sync_with_stdio(false);
  cin>>t>>T>>n>>m;
  for (int i=1;i<=n;i++)
    cin>>l[i]>>r[i];
  for (int i=0;i<m;i++) {
    int u,v;
    cin>>u>>v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  maxltot[1]=maxltot[2]=0;
  minrtot[1]=minrtot[2]=1000000000;
  map<int,info> mapa;
  for (int u=1;u<=n;u++) {
    if (not color[u] and int(g[u].size())>0) {
      listacolor=vector<int>();
      maxl[1]=maxl[2]=0;
      minr[1]=minr[2]=1000000000;
      colorea(u,1);
      if (maxl[1]>minr[1] or maxl[2]>minr[2]) {
	cout<<"IMPOSSIBLE"<<endl;
	exit(0);
      }
      if (minr[1]>minr[2]) {
	swap(maxl[1],maxl[2]);
	swap(minr[1],minr[2]);
      }
      if (maxl[1]<=maxl[2]) {
	maxltot[1]=max(maxltot[1],maxl[1]);
	minrtot[1]=min(minrtot[1],minr[1]);
	maxltot[2]=max(maxltot[2],maxl[2]);
	minrtot[2]=min(minrtot[2],minr[2]);
      } else {
	maxltot[1]=max(maxltot[1],maxl[2]);
	minrtot[1]=min(minrtot[1],minr[2]);
	maxltot[2]=max(maxltot[2],maxl[2]);
	minrtot[2]=min(minrtot[2],minr[2]);
	mapa[maxl[1]].entra.push_back(pair<int,int> (maxl[1],minr[1]));
	mapa[minr[1]].sale.push_back(pair<int,int> (maxl[1],minr[1]));
	sl2.insert(maxl[1]);
	sr2.insert(minr[1]);
      }
    } else if (not color[u]) {
      mapa[l[u]].entra.push_back(pair<int,int> (l[u],r[u]));
      mapa[r[u]].sale.push_back(pair<int,int> (l[u],r[u]));
      sl2.insert(l[u]);
      sr2.insert(r[u]);
    }
  }
  if (maxltot[1]>minrtot[1] or maxltot[2]>minrtot[2]) {
    cout<<"IMPOSSIBLE"<<endl;
    exit(0);
  }
  sl1.insert(maxltot[1]);
  sr1.insert(minrtot[1]);
  sl2.insert(maxltot[2]);
  sr2.insert(minrtot[2]);
  mirasolucion();
  for (map<int,info>::iterator it=mapa.begin();it!=mapa.end();it++) {
    vector<pair<int,int> > &entra=it->second.entra;
    for (int i=0;i<int(entra.size());i++) {
      int le=entra[i].first;
      int ri=entra[i].second;
      borra(sl2,le);
      borra(sr2,ri);
      sl1.insert(le);
      sr1.insert(ri);
    }
    mirasolucion();
    vector<pair<int,int> > &sale=it->second.sale;
    for (int i=0;i<int(sale.size());i++) {
      int le=sale[i].first;
      int ri=sale[i].second;
      borra(sl1,le);
      borra(sr1,ri);
      sl2.insert(le);
      sr2.insert(ri);
    }
    mirasolucion();
  }
  cout<<"IMPOSSIBLE"<<endl;
}

