debug = False

import sys

d = [-1, 1]

def out():
    FIN.close()
    FOUT.close()
    sys.exit()



if debug:
    FIN = open('input.txt', 'r')
    FOUT = open('output.txt', 'w')
else:
    FIN = sys.stdin
    FOUT = sys.stdout
    
s = FIN.readline()
if s[-1] == '\n':
    s = s[:-1]
n = int(FIN.readline())
fm = [[[0 if (t == 1) and(j == 0) and (i == 0) else None for t in range(2)] for j in range(n + 1)] for i in range(len(s) + 1)]
fM = [[[0 if (t == 1) and(j == 0) and (i == 0) else None for t in range(2)] for j in range(n + 1)] for i in range(len(s) + 1)]

for i in range(1, len(s) + 1):
    for j in range(n + 1):
        if s[i - 1] == 'F':
            for k in range(0, j + 1, 2):
                for t in range(2):
                    if fM[i - 1][j - k][t] is not None:
                        ff = fM[i - 1][j - k][t] + d[t]
                        if fM[i][j][t] is None or ff > fM[i][j][t]:
                            fM[i][j][t] = ff
            for k in range(1, j + 1, 2):
                for t in range(2):
                    ff = fM[i - 1][j - k][t ^ 1]
                    if (ff is not None) and (fM[i][j][t] is None or ff > fM[i][j][t]):
                        fM[i][j][t] = ff
            for k in range(0, j + 1, 2):
                for t in range(2):
                    if fm[i - 1][j - k][t] is not None:
                        ff = fm[i - 1][j - k][t] + d[t]
                        if fm[i][j][t] is None or ff < fm[i][j][t]:
                            fm[i][j][t] = ff
            for k in range(1, j + 1, 2):
                for t in range(2):
                    ff = fm[i - 1][j - k][t ^ 1]
                    if (ff is not None) and (fm[i][j][t] is None or ff < fm[i][j][t]):
                        fm[i][j][t] = ff
        else:
            for k in range(0, j + 1, 2):
                for t in range(2):
                    ff = fM[i - 1][j - k][t ^ 1]
                    if (ff is not None) and (fM[i][j][t] is None or ff > fM[i][j][t]):
                        fM[i][j][t] = ff
            for k in range(1, j + 1, 2):
                for t in range(2):
                    if fM[i - 1][j - k][t] is not None:
                        ff = fM[i - 1][j - k][t] + d[t]
                        if fM[i][j][t] is None or ff > fM[i][j][t]:
                            fM[i][j][t] = ff
            for k in range(0, j + 1, 2):
                for t in range(2):
                    ff = fm[i - 1][j - k][t ^ 1]
                    if (ff is not None) and (fm[i][j][t] is None or ff < fm[i][j][t]):
                        fm[i][j][t] = ff
            for k in range(1, j + 1, 2):
                for t in range(2):
                    if fm[i - 1][j - k][t] is not None:
                        ff = fm[i - 1][j - k][t] + d[t]
                        if fm[i][j][t] is None or ff < fm[i][j][t]:
                            fm[i][j][t] = ff
                            
if fm[len(s)][n][0] is None:
    fm[len(s)][n][0] = 0
if fm[len(s)][n][1] is None:
    fm[len(s)][n][1] = 0  
if fM[len(s)][n][0] is None:
    fM[len(s)][n][0] = 0
if fM[len(s)][n][1] is None:
    fM[len(s)][n][1] = 0  
ans = max(abs(fm[len(s)][n][0]), abs(fm[len(s)][n][1]), abs(fM[len(s)][n][0]), abs(fM[len(s)][n][1]))
FOUT.write(str(ans))
out()

