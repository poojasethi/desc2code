#include<cmath>
#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

const int N=100000; 

int m,L;
int a[N+10],c[N+10],q[N+10][2],dp[N+10],pre[N+10];

struct node1
{
    int data,cnt;
    bool operator <(node1 a)const {return data<a.data;}
}b[N+10];

struct node2
{
    int l,r,dp;
    bool operator <(node2 a)const {return dp<a.dp||(dp==a.dp&&l<a.l);}
}g[N+10];

int find1(int x,int y)
{
    int l=1,r=L;
    while (l<=r)
    {
        int mid=(l+r)>>1;
        if (g[mid].dp<x||(g[mid].dp==x&&g[mid].r<y)) l=mid+1; else r=mid-1;
    }
    if (l>L) return -1;
    if (g[l].dp==x&&y>=g[l].l) return l; else return -1;
}

int find2(int x)
{
    int l=1,r=m;
    while (l<=r)
    {
        int mid=(l+r)>>1;
        if (b[mid].data<x) l=mid+1; else r=mid-1;
    }
    return r;
}

int main()
{
    #ifdef waltz
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int n;scanf("%d",&n);
    for (int i=1;i<=n;i++) scanf("%d",&a[i]);
    scanf("%d",&m);
    for (int i=1;i<=m;i++) scanf("%d",&b[i].data);
    sort(b+1,b+m+1);
    int l=1;b[1].cnt=1;
    for (int i=2;i<=m;i++) if (b[l].data==b[i].data) b[l].cnt++; else {b[++l].data=b[i].data;b[l].cnt=1;}
    m=l;int len=0;
    for (int i=1;i<=n;i++) c[i]=n+1;
    int now;
    for (int i=1;i<=n;i++)
    {
        pre[i]=now;
        if (a[i]!=-1)
        {
            int l=1,r=len;
            while (l<=r)
            {
                int mid=(l+r)>>1;
                if (q[mid][1]<a[i]) l=mid+1; else r=mid-1;
            }
            dp[i]=l;
            if (l>len) len++; else if (q[l][0]!=-1) c[q[l][0]]=i;
            q[l][0]=i;q[l][1]=a[i];
        }
        else
        {
            int k=len;
            for (int j=m;j>=1;j--)
            {
                while (k&&q[k][1]>=b[j].data) k--;
                if (k==len) len++; else if (q[k+1][0]!=-1) c[q[k+1][0]]=i;
                q[k+1][0]=-1;q[k+1][1]=b[j].data;
            }
            now=i;
        }
    }
    int k,d;
    if (q[len][0]!=-1)
    {
        k=q[len][0];d=q[len][1];
    }
    else
    {
        k=now;d=a[k]=b[m].data;
        b[m].cnt--;
    }
    L=0;
    for (int i=1;i<=n;i++)
        if (a[i]!=-1)
        {
            g[++L].l=i+1;g[L].r=c[i];g[L].dp=dp[i];
        }
    sort(g+1,g+L+1);
    for (int i=len-1;i;i--)
    {
        int x=find1(i,k);
        if (x!=-1)
        {
            k=g[x].l-1;
            d=a[k];
        }
        else
        {
            k=pre[k];
            d=find2(d);
            b[d].cnt--;
            d=a[k]=b[d].data;
        }
    }
    int p=1;
    for (int i=1;i<=n;i++)
        if (a[i]==-1)
        {
            while (!b[p].cnt) p++;
            b[p].cnt--;a[i]=b[p].data;
        }
    for (int i=1;i<=n;i++) printf("%d ",a[i]);
    return 0;
}
