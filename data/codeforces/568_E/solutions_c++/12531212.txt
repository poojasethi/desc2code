#include <iostream>
#include <algorithm>
#include <set>
#include <cmath>

using namespace std;

const int limite=1000000;

int n,m;
int input[limite];
int posiniant[limite];
int numgapsant[limite];

int nvalor=1;
int valor[limite];
int posini[limite];
int numgaps[limite];

int lista[limite];

multiset<int> s;

int main()
{
  ios::sync_with_stdio(false);
  cin>>n;
  for (int i=1;i<=n;i++)
    cin>>input[i];
  cin>>m;
  for (int i=0;i<m;i++) {
    cin>>lista[i];
    s.insert(lista[i]);
  }
  sort(lista,lista+m);
  for (int i=1;i<=n;i++) {
    int val=input[i];
    if (val!=-1) {
      int inf=0;
      int sup=nvalor;
      while (inf+1<sup) {
	int med=(inf+sup)/2;
	if (valor[med]<val) inf=med;
	else sup=med;
      }
      if (inf+1==nvalor or val<valor[inf+1]) {
	inf++;
	valor[inf]=val;
	posini[inf]=i;
	numgaps[inf]=0;
	posiniant[i]=posini[inf-1];
	numgapsant[i]=numgaps[inf-1];
	nvalor=max(nvalor,inf+1);
      }
    } else {
      int ilista=m-1;
      for (int ivalor=nvalor-1;ivalor>=0;ivalor--) {
	while (ilista>0 and lista[ilista-1]>valor[ivalor]) ilista--;
	if (valor[ivalor]<lista[ilista] and (ivalor+1==nvalor or lista[ilista]<valor[ivalor+1])) {
	  valor[ivalor+1]=lista[ilista];
	  posini[ivalor+1]=posini[ivalor];
	  numgaps[ivalor+1]=numgaps[ivalor]+1;
	  nvalor=max(nvalor,ivalor+2);
	}
      }
    }
  }
  int pos=posini[nvalor-1];
  int ngaps=numgaps[nvalor-1];
  for (;;) {
    int posant=posiniant[pos];
    int ngapsant=numgapsant[pos];
    int val=input[pos];
    while (ngaps) {
      while (input[pos]!=-1) pos++;
      multiset<int>::iterator it=s.upper_bound(val);
      input[pos]=*it;
      val=*it;
      s.erase(it);
      ngaps--;
    }
    if (pos==0) break;
    pos=posant;
    ngaps=ngapsant;
  }
  multiset<int>::iterator it=s.begin();
  for (int i=1;i<=n;i++) {
    if (input[i]==-1) {
      input[i]=*it;
      it++;
    }
    if (i>1) cout<<" ";
    cout<<input[i];
  }
  cout<<endl;
}
