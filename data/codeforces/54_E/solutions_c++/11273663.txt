#include<iostream>
#include<queue>
#include<set>
#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<math.h>
using namespace std;
#define eps 1e-8
#define zero(x) (((x)>0?(x):-(x))<eps)
#define pi acos(-1.0)
double helen(double a,double b,double c){
    double p=(a+b+c)/2;
    return sqrt(p*(p-a)*(p-b)*(p-c));
}
struct point{
    double x,y;
    point(){}
    point(double x,double y):x(x),y(y){}
}p[50000];
int n;
double xmult(point a,point b,point o){
    return ((a.x-o.x)*(b.y-o.y)-(b.x-o.x)*(a.y-o.y));
}
double dmult(double x,double y,double x1,double y1){
    return (x*x1+y*y1);
}
int next(int i){
    if(i==(n-1)) return 0;
    else return (i+1);
}
int pre(int i){
    if(i==0) return (n-1);
    else return (i-1);
}
double dis(point a,point b){
    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
point intersection(point u1,point u2,point v1,point v2){
   point ret=u1;
   double t=((u1.x-v1.x)*(v1.y-v2.y)-(u1.y-v1.y)*(v1.x-v2.x))
           /((u1.x-u2.x)*(v1.y-v2.y)-(u1.y-u2.y)*(v1.x-v2.x));
          ret.x+=(u2.x-u1.x)*t;
          ret.y+=(u2.y-u1.y)*t;
       return ret;
}
int main(){
      scanf("%d",&n);
     for(int i=0;i<n;i++){
       scanf("%lf %lf",&p[i].x,&p[i].y);  
     }
     if(xmult(p[0],p[1],p[2])<0){
          reverse(p,p+n);  
     }
     double R=1e100;
     for(int step=1;step<=2;step++){
            double s=0.0; int key=1;
          for(int i=0;i<n;i++){
              double dx=p[next(i)].x-p[i].x;
              double dy=p[next(i)].y-p[i].y;  
              if(i>0) s-=xmult(p[i],p[key],p[pre(i)]);
              
            while(dmult(dx,dy,p[next(key)].x-p[key].x,p[next(key)].y-p[key].y)>0)   
            {    
                s+=xmult(p[key],p[next(key)],p[i]);
                key=next(key);
            }
            point u2;
            u2.x=p[key].x+dy;
            u2.y=p[key].y-dx;
            u2=intersection(p[i],p[next(i)],p[key],u2);
            double ss=dis(u2,p[i])*dis(u2,p[key])/2.0-s/2.0;
            R=min(R,ss);
          }  
          for(int i=0;i<n;i++) p[i].x=-p[i].x;
          reverse(p,p+n);
     }        
        printf("%.18lf\n",R);
      //  while(2);
}
/*
8
1 2
2 1
2 -1
1 -2
-1 -2
-2 -1
-2 1
-1 2
0.50000000000000000000
*/
