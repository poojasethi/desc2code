#include <stdio.h>
#include <math.h>
#include <iostream>
#include <algorithm>
using namespace std;
struct point
{
	 double x, y;
	 point() {}
	 point(double xx, double yy)
	 {
		 x = xx; y = yy;
	 }		 
};
const int nmax = 100000;
int n, i, num;
point p[nmax], vv, swp;
double ans, res, s, pi;
point operator - (point& p1, point& p2)
{
	 return point(p1.x - p2.x, p1.y - p2.y);
}
double len(point p)
{
	 return sqrt(p.x * p.x + p.y * p.y); 
}
double skal(point p1, point p2)
{
	 return p1.x * p2.x + p1.y * p2.y;
}
double vect(point p1, point p2)
{
	 return p1.x * p2.y - p1.y * p2.x;
}
double square(int i, int num)
{
	 point v1 = p[i + 1] - p[i];
	 point v2 = p[num] - p[i];
	 double cos = fabs(skal(v1, v2)) / (len(v1) * len(v2));
	 return len(v2) * len(v2) * cos * sqrt(1 - cos * cos);
}
int main()
{
	 //freopen("input.txt", "r", stdin);
	 //freopen("output.txt", "w", stdout);
	 scanf("%d", &n); pi = atan(1.0) * 4;
	 for (i = 1; i <= n; i++)
	 {
		 scanf("%lf%lf", &p[i].x, &p[i].y);
	 } 
	 if (vect(p[2] - p[1], p[3] - p[2]) < 0)
	 {
		 for (i = 1; i < n - i + 1; i++)
		 {
			 swp = p[i]; p[i] = p[n - i + 1]; p[n - i + 1] = swp;
		 }
	 }
	 for (i = 1; i <= n; i++)
	 {
		 p[i + n] = p[i];
		 if (skal(p[i] - p[i + 1], p[i + 2] - p[i + 1]) >= 0)
		 {
			 cout << 0; return 0;
		 }
	 }
	 num = 1; res = 0;
	 for (i = 1; i <= n; i++)
	 {
		 vv = p[i + 1] - p[i];
		 vv = point(-vv.y, vv.x);
		 if (i > 1)
		 {
			 res -= fabs(vect(p[i] - p[i - 1], p[num] - p[i - 1]));
		 }
		 while (vect(p[num + 1] - p[num], vv) > 0)
		 {
			 res += fabs(vect(p[num] - p[i], p[num + 1] - p[i]));
			 num++;
		 }
		 s = square(i, num);
		 if ((i == 1) || (ans > s - res)) ans = s - res;
	 }
	 i = n; res = 0;
	 vv = p[i + 1] - p[i];
	 vv = point(vv.y, -vv.x);
	 while (vect(p[i + 1] - p[i], vv) < 0) i--;
	 num = i + 1;
	 for (i = num + 1; i <= n - 1; i++)
	 {
		 res += vect(p[i] - p[num], p[i + 1] - p[num]);
	 }
	 s = square(n, num);
	 if (ans > s - res) ans = s - res;
	 for (i = n + 1; i <= n * 2 - 1; i++)
	 {
		 vv = p[i + 1] - p[i];
		 vv = point(vv.y, -vv.x);
		 res += fabs(vect(p[i] - p[i - 1], p[num] - p[i - 1]));
		 while (vect(p[num + 1] - p[num], vv) > 0)
		 {
			 res -= fabs(vect(p[num] - p[i], p[num + 1] - p[i]));
			 num++;
		 }
		 s = square(i, num);
		 if (ans > s - res) ans = s - res;
	 }
	 cout.precision(30);
	 cout << ans / 2;
	 return 0;
} 

