#include <iostream>
#include <vector>
#include <cmath>
#include <cstdio>
#include <set>
#include <map>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>

#define mp make_pair
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define ll long long

using namespace std;

struct pt
{
    double x, y;

    pt(){}
    pt(double x, double y): x(x), y(y){}
    double dist();
};

double pt::dist()
{
    return sqrt(x * x + y * y);
}

pt operator -(pt A, pt B)
{
    return pt(A.x - B.x, A.y - B.y);
}

double dot(pt A, pt B)
{
    return A.x * B.x + A.y * B.y;
}

double cross(pt A, pt B)
{
    return A.x * B.y - A.y * B.x;
}

double solve(pt * A, int n)
{
    double S = 0;
    int i = 0, j = 1;
    double res = 1e18;

    while (i < n)
    {
        while (dot(A[(j + 1) % n] - A[j], A[(i + 1) % n] - A[i]) > 0)
            S += fabs(cross(A[i] - A[j], A[i] - A[(j + 1) % n])) / 2, j = (j + 1) % n;
        double now = (A[i] - A[j]).dist() * (A[i] - A[j]).dist();
        double angle = atan2(cross(A[(i + 1) % n] - A[i], A[j] - A[i]), dot(A[(i + 1) % n] - A[i], A[j] - A[i]));
        now *= sin(angle * 2) / 4;
        res = min(res, fabs(fabs(now) - fabs(S)));
        S -= fabs(cross(A[j] - A[i], A[j] - A[(i + 1) % n]) / 2);
        i++;
    }
    return res;
}

int main()
{
    int n;
    scanf("%d", & n);
    pt A[n];

    for (int i = 0 ; i < n; i++)
        scanf("%lf%lf", & A[i].x, & A[i].y);
    double res = solve(A, n);

    for (int i = 0; i < n / 2; i++)
        swap(A[i], A[n - i - 1]);
    printf("%.16lf\n", min(res, solve(A, n)));
}
