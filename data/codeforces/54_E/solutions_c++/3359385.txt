#include <cstdio>
#include <algorithm>
#include <cmath>
#define sqr(x) ((x)*(x))
using namespace std;
const double eps=1e-8;
const int maxn=400100;
struct point{
    double x,y;
    point(double _x=0,double _y=0)
        :x(_x),y(_y){}
    point operator-(const point&o)const{
        return point(x-o.x,y-o.y);
    }
    point operator+(const point&o)const{
        return point(x+o.x,y+o.y);
    }
};
inline double det(const point&p1,const point&p2){
    return p1.x*p2.y-p2.x*p1.y;
}
inline double dot(const point&p1,const point&p2){
    return p1.x*p2.x+p1.y*p2.y;
}
inline double dis(const point&p1,const point&p2){
    return sqrt(sqr(p1.x-p2.x)+sqr(p1.y-p2.y));
}
inline int sgn(double a,double b=0){
    return fabs(a-b)<eps?0:a<b?-1:1;
}
int n,m;
point a[maxn],b[maxn],ctr;
double s[maxn],ans=1e30;
void solve(){
    for(int i=1;i<m;++i)
        s[i]=s[i-1]+fabs(det(b[i+1]-b[i],ctr-b[i]))/2.0;
    int cur=2;
    for(int i=1;i<=n;++i){
        for(;sgn(dot(b[i+1]-b[i],b[cur+1]-b[cur]))>0;++cur);
        double AB=dis(b[i],b[cur]);
        double cos_alpha=dot(b[i+1]-b[i],b[cur]-b[i])/dis(b[i+1],b[i])/dis(b[cur],b[i]);
        double OA=AB*cos_alpha;
        double OB=sgn(AB-OA)==0?0:sqrt(sqr(AB)-sqr(OA));
        double area=OA*OB*0.5-(s[cur-1]-s[i-1]);
        if(sgn(det(b[i+1]-b[i],ctr-b[i])*det(ctr-b[i],b[cur]-b[i]))>0)
            area-=fabs(det(ctr-b[i],b[cur]-b[i]))/2.0;
        else
            area+=fabs(det(ctr-b[i],b[cur]-b[i]))/2.0;
        ans=min(ans,area);
    }
}
int main(){
    //freopen("x.in","r",stdin);
    scanf("%d",&n);
    m=n<<1;
    for(int i=1,x,y;i<=n;++i){
        scanf("%d%d",&x,&y);
        a[i].x=x,a[i].y=y;
        ctr.x+=x,ctr.y+=y;
    }
    ctr.x/=n,ctr.y/=n;
    for(int i=1;i<=m;++i)
        b[i]=i<=n?a[i]:a[i-n];
    solve();
    for(int i=1;i<=m;++i)
        b[i]=i<=n?a[n-i+1]:a[n-(i-n)+1];
    solve();
    printf("%lf\n",ans);
}