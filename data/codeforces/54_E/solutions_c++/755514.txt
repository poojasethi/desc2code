#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <bitset>
#include <sstream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

#define forn(i, n) for(int i = 0; i < int(n); ++i)
#define for1(i, n) for(int i = 1; i <= int(n); ++i)
#define ford(i, n) for(int i = int(n) - 1; i >= 0; --i)
#define fore(i, l, r) for(int i = int(l); i < int(r); ++i)
#define sz(v) int((v).size())
#define all(v) (v).begin(), (v).end()
#define pb push_back
#define X first
#define Y second
#define mp make_pair
#define debug(x) {cerr << #x << " = " << x << endl;}
template<typename T> inline T abs(T a){ return ((a < 0) ? -a : a); }
template<typename T> inline T sqr(T a){ return a * a; }

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int INF = (int)1E9 + 7;
const ld EPS = 1E-9;
const ld PI = 3.1415926535897932384626433832795;

//16:32

const int NMAX = 100000;

pt a[NMAX];
int n;

li sum[NMAX];

pt operator - (const pt& a, const pt& b){
    return pt(a.X-b.X, a.Y-b.Y);
}

li smul(const pt& a, const pt& b){
    return a.X * 1LL * b.X + a.Y * 1LL * b.Y;
}

li vmul(const pt& a, const pt& b){
    return a.X * 1LL * b.Y - a.Y * 1LL * b.X;
}

li area(const pt& a, const pt& b, const pt& c){
    return abs(vmul(b-a, c-a));
}

inline li getSum(int lf, int rg){
    if(lf>rg) return 0;
    return sum[rg] - (lf == 0 ? 0 : sum[lf-1]);    
}

li getArea(int lf, int rg){
    if(lf==rg) return 0;

    li ans = 0;
    if(lf < rg){
        ans = getSum(lf, rg-1);        
        ans -= area(a[0], a[lf], a[rg]);
    }else{
        ans = getSum(lf, n-2) + getSum(0, rg-1) + area(a[0], a[lf], a[rg]);
    }
    return ans;
}

const int dx[] = {1, -1};

inline bool move(int& it, const pt& v){
    li C = -smul(a[it], v);
    forn(i, 2){
        int nit = it + dx[i];

        while(nit >= n) nit -= n;
        while(nit < 0)  nit += n;

        li curC = -smul(a[nit], v);

        if(curC < C){
            it = nit;
            return true;
        }
    }            
    return false;
}

ld ans = 1E100;

ld dist(const pt& a, const pt& b, const pt& v){
    li C1 = -smul(a, v), C2 = -smul(b, v);
    return abs(C1-C2) / sqrtl((sqr(v.X*1LL) + sqr(v.Y*1LL)) * 1.0);
}

void updAns(int i, int j, const pt& v){

    li S = getArea(i, j);

    ld dx = dist(a[i], a[j], v);
    ld dy = dist(a[i], a[j], pt(-v.Y, v.X));


//    cerr << dx << " " << dy << endl;
//    cerr << S << endl;
    
    ld cur = dx*dy*0.5 - S*0.5;

    ans = min(ans, cur);
}

int main() {
    #ifdef my_project
    freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);
    #endif

    scanf("%d", &n);
    forn(i, n)
        scanf("%d%d", &a[i].X, &a[i].Y);

    fore(i, 1, n-1){
        sum[i] = area(a[0], a[i], a[i+1]);
        if(i > 0)
            sum[i] += sum[i-1];
    }

    int iup = 0, idown = 0;
    forn(i, n){
        pt cp = a[i], np = a[i+1 == n ? 0 : i+1];

  //      cerr << i << endl;

        pt v = np - cp;
        while(move(iup, v));

  //      cerr << iup << endl;

        updAns(i, iup, v);

        v = cp - np;
        while(move(idown, v));

  //      cerr << idown << endl;


//        cerr << "A = " << ans << endl;
        updAns(idown, i, v);
    }

    cout.precision(10);
    cout << fixed << ans << endl;

    return 0;
}

