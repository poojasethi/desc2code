#include <stdio.h>
#include <algorithm>
#include <math.h>

using namespace std;

#define EPS 1E-8

class PT{
    public:
        double x,y;
        PT(){}
        PT(double _x,double _y) {
            x = _x;
            y = _y;
        }
        PT operator-(const PT& p) const {
            return PT(x-p.x,y-p.y);
        }
        double operator^(const PT& p) const {
            return x*p.y-y*p.x;
        }
        double operator*(const PT& p) const {
            return x*p.x+y*p.y;
        }
        double len() {
            return sqrt(x*x+y*y);
        }
};

inline double tri(PT p1,PT p2,PT p3) {
    return (p2-p1)^(p3-p1);
}

PT pt[1000000];

int main() {
    int n,i,j;
    PT p;
    double sum,sint,L,d,md;
    while(scanf("%d",&n)==1) {
        for( i=0; i<n; i++ ) {
            scanf("%lf %lf",&pt[i].x,&pt[i].y);
        }
        if(tri(pt[0],pt[1],pt[2])<0) {
            for( i=0,j=n-1; i<j; i++,j-- ) {
                swap(pt[i],pt[j]);
            }
        }
        pt[n] = pt[0];
        for( i=0; i<n; i++ ) {
            if((pt[(i+n-1)%n]-pt[i])*(pt[i+1]-pt[i])>-EPS) {
                break;
            }
        }
        if(i<n) {
            printf("%.8f\n",0.0);
            continue;
        }
        sum = 0;
        md = 1E20;
        for( i=0,j=1; i<n; i++ ) {
            p = pt[i+1]-pt[i];
            p = PT(-p.y,p.x);
            while((p^(pt[j+1]-pt[j]))<-EPS) {
                sum+=tri(pt[i],pt[j],pt[(j+1)%n])*0.5;
                j = (j+1)%n;
            }
            L = (pt[j]-pt[i]).len();
            sint = ((pt[i+1]-pt[i])^(pt[j]-pt[i]))/(L*(pt[i+1]-pt[i]).len());
            d = L*L*sint*sqrt(1.0-sint*sint)*0.5-sum;
            if(d<md) md = d;
            sum-=tri(pt[i],pt[i+1],pt[j])*0.5;
        }
        for( i=0,j=n-1; i<j; i++, j-- ) {
            swap(pt[i],pt[j]);
        }
        for( i=0; i<n; i++ ) {
            pt[i].x = -pt[i].x;
        }
        pt[n] = pt[0];
        sum = 0;
        for( i=0,j=1; i<n; i++ ) {
            p = pt[i+1]-pt[i];
            p = PT(-p.y,p.x);
            while((p^(pt[j+1]-pt[j]))<-EPS) {
                sum+=tri(pt[i],pt[j],pt[(j+1)%n])*0.5;
                j = (j+1)%n;
            }
            L = (pt[j]-pt[i]).len();
            sint = ((pt[i+1]-pt[i])^(pt[j]-pt[i]))/(L*(pt[i+1]-pt[i]).len());
            d = L*L*sint*sqrt(1.0-sint*sint)*0.5-sum;
            if(d<md) md = d;
            sum-=tri(pt[i],pt[i+1],pt[j])*0.5;
        }
        printf("%.8f\n",md);
    }
    return 0;
}

