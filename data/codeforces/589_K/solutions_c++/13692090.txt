#include<bits/stdc++.h>
using namespace std;
inline int getint()
{
	char ch;
	while(!isdigit(ch=getchar())) ;
	int x=ch-'0';
	while(isdigit(ch=getchar())) x=x*10+ch-'0';
	return x;
}
const int N=100100,L=0,R=1,D=2000,T=100100;
const long long Inf=1ll<<60;
struct task
{
	int l,t,num;
	long long b,k;
}a[N]={};
bool task_cmp(const task &t1,const task &t2)
{
	return t1.l>t2.l || (t1.l==t2.l && t1.num>t2.num);
}
int n,maxt=0,last[T]={},next[T]={};
vector<task> bucket[T];
long long ans[N]={};
void init()
{
	n=getint();
	for(int i=1;i<=n;++i)
	{
		a[i].l=getint(),a[i].t=getint()+1;
		a[i].b=a[i].l-a[i].t*1ll*a[i].t;
		a[i].k=2*a[i].t;
		a[i].num=i;
		bucket[a[i].t].push_back(a[i]);
		maxt=max(maxt,a[i].t);
	}
	for(int i=0;i<=maxt;++i)
		sort(bucket[i].begin(),bucket[i].end(),task_cmp);
	for(int i=1;i<=maxt;++i)
		last[i]=i-1,next[i]=i+1;
	next[0]=1,last[maxt+1]=maxt;
	for(int i=1;i<=maxt;++i)
		if(bucket[i].empty())
			last[next[i]]=last[i],next[last[i]]=next[i];
	//for(int d=next[0]; d<=maxt; d=next[d])
	//	cout<<d<<' ';
	//cout<<endl;
}
void work()
{
	long long now=1;
	for(int i=1;i<=n;++i)
	{
		long long v=Inf;
		int p=0;
		task nowt=(task){0,0,0,0ll,0ll};
		now=max(now,1ll*next[0]);
		for(int d=next[0],x=0; x<D&&d<=maxt&&d<=now; d=next[d],++x)
		{
			task t0=bucket[d].back();
			long long tmp=t0.b + now*t0.k;
			if(tmp<v || (tmp==v && t0.num<nowt.num))
				v=tmp,p=d,nowt=t0;
		}
		bucket[p].pop_back();
		if(bucket[p].empty())
		{
			last[next[p]]=last[p];
			next[last[p]]=next[p];
		}
		//cout<<"p="<<p<<endl;
		ans[nowt.num]=now+nowt.l;
		now+=nowt.l;
	}
	for(int i=1;i<=n;++i)
		printf("%I64d ",ans[i]-1);
	printf("\n");
}
int main()
{
	//freopen("K.in","r",stdin);
	//freopen("K.out","w",stdout);
	init();
	work();
	//cerr<<clock()<<endl;
	
	return 0;
}