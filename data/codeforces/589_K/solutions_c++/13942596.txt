#include<bits/stdc++.h>
#define FT first
#define SC second
#define PB push_back
#define MP make_pair
#define REP(i, l, r) for(int i = (l); i <= (r); i++)
#define PER(i, r, l) for(int i = (r); i >= (l); i--)
#define DFOR(i, x) for(int i = hd[x]; i; i = e[i].nxt)
#define MEM(a) memset(a, 0, sizeof(a));

using namespace std;
typedef long long LL;
typedef long double LD;
const int inf = 0x7fffffff;
const int MOD = 1000000007;
const int N = 100000 + 5;
const int maxt = 100000;
const int block = 345;
vector<pair<int, int> > v[N];
int t[N], l[N];
LL T, ans[N];
pair<LL, int> getans(int i){
	return MP(l[i] - (T - t[i]) * (T - t[i]), i);
}
void update(int &a, int b){
	int i = v[a][v[a].size() - 1].SC, j = v[b][v[b].size() - 1].SC;
	if (getans(i) > getans(j)) a = b;
}
int main(){
	int n;
	scanf("%d", &n);
	REP(i, 1, n){
		scanf("%d%d", &l[i], &t[i]);
		v[t[i]].PB(MP(l[i], i));
	}
	REP(i, 0, maxt){
		sort(v[i].begin(), v[i].end());
		reverse(v[i].begin(), v[i].end());
	}
	T = 0;
	REP(i, 0, maxt){
		T = max(T, LL(i));
		while (v[i].size()){
			int now = i;
			REP(j, i + 1, min(i + int(sqrt(v[i][v[i].size() - 1].FT)) + 1, int(min((LL)maxt, T))))
				if (v[j].size()) update(now, j);
			int k = v[now][v[now].size() - 1].SC;
			T += l[k], ans[k] = T, v[now].pop_back();
		}
	}
	REP(i, 1, n) printf("%I64d%c", ans[i], i == n ? '\n' : ' ');
}
