#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
typedef double dou;
const int N=1E5+5;
const int magic=666;
const ll inf=1E18;
struct map{
    int l,t,p;
}a[N],P;
int n,last,pre[N],ne[N],fir,r,k,p,pp,to[N],sum,tot;
vector <map> G[N];
ll T,ans[N],mini;

int comp(const map&a,const map&b)
{
    if (a.t!=b.t) return a.t<b.t;
    if (a.l!=b.l) return a.l<b.l;
    return a.p<b.p;
}

void add(int i)
{
//  cerr<<i<<endl;
    int t=a[i].t;
    if (!G[t].size())
    {
        ne[last]=t; pre[t]=last; last=t;
    }
    G[t].push_back(a[i]);
    if (fir==-1) fir=t;
}

void del(int t)
{
 // cerr<<t<<" "<<to[t]<<endl;
    P=G[t][to[t]];
    T+=G[t][to[t]].l;
    ans[G[t][to[t]].p]=T;
    to[t]++;
    if (to[t]==G[t].size())
    {
        if (fir==t) fir=ne[t]; else ne[pre[t]]=ne[t]; 
        if (last==t) last=pre[t]; else pre[ne[t]]=pre[t];
        pre[t]=ne[t]=-1;
    }
}  

int main()
{
    cin>>n;
    for (int i=1;i<=n;i++)
    {
        scanf("%d%d",&a[i].l,&a[i].t); a[i].p=i;
//      if (a[i].t<=1) sum++;
    }
//  cerr<<sum<<endl;
//  cerr<<n<<endl;
    sort(a+1,a+n+1,comp);
    fir=last=-1;
    memset(pre,-1,sizeof(pre));
    memset(ne,-1,sizeof(ne));
    for (;;sum++)
    {
        for (;r<n&&a[r+1].t<=T;r++) 
            add(r+1);
        if (fir==-1) 
        {
            if (r==n) break;
            T=a[r+1].t;
            continue;
        }
        k=fir; mini=inf;
        for (int i=1;i<=magic&&k!=-1;i++,k=ne[k]) 
        {
            P=G[k][to[k]];
            ll w=(ll)P.l+2*T*P.t-(ll)P.t*P.t;
            if (w<mini||(w==mini&&P.p<p))
            {
                mini=w; p=P.p; pp=k;
            }
        }
        del(pp);
    }
    for (int i=1;i<=n;i++) printf("%I64d ",ans[i]);
}







