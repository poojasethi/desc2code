#include <bits/stdc++.h>

using namespace std;

#define NN 100010
#define inf 10000000000000000LL

typedef long long LL;

LL ans[NN];
int prev[NN], nxt[NN];

struct Task {
	int l, t;
	int id;
	Task (int _l = 0, int _t = 0, int _id = 0) {
		l = _l; t = _t; id = _id;
	}
	
	bool operator < (const Task& a) const {
		if (t == a.t) return l < a.l;
		return t < a.t;
	}
} TA[NN];

int main() {
	
	
	memset(prev, 0xff, sizeof(prev));
	memset(nxt, 0xff, sizeof(nxt));
	
	int N, L, TT, st, en, po;
	LL val, res, hop, y, T, la;
	int ID, x;
	
	scanf("%d", &N);
	for (int i = 0; i < N; i ++) {
		scanf("%d%d", &L, &TT);
		TA[i] = Task(L, TT, i);
	}
	
	sort(TA, TA + N);
	
	st = -1; en = -1;
	po = 0;
	for (T = 0; ; T = la) {
		while (po < N && TA[po].t <= T) {
			if (en != -1) {
				nxt[en] = po;
				prev[po] = en;
				en = po;
			} else {
				st = en = po;
			}
			po ++;
		}
		if (en == -1) {
			if (po == N) break ;
			la = T + 1;
			continue ;
		}
	
		val = -2 * T * TA[st].t + (LL)TA[st].t * TA[st].t - TA[st].l;
		x = st;
		res = inf;
		while (1) {
			if (x == -1) break ;
			y = (LL)TA[x].t * TA[x].t - 2 * T * TA[x].t;
			if (y < val) break ;
			hop = TA[x].l + 2 * T * TA[x].t - (LL)TA[x].t * TA[x].t;
			if (hop < res || (res == hop && TA[x].id < TA[ID].id)) {
				res = hop; 
				ID = x;
			}
			x = nxt[x];
		}
		
	
		la = T + TA[ID].l;
		ans[TA[ID].id] = la;
		if (nxt[ID] != -1) prev[nxt[ID]] = prev[ID];
		if (prev[ID] != -1) nxt[prev[ID]] = nxt[ID];
		if (ID == st) st = nxt[st];
		if (ID == en) en = prev[en];
	}
	
	for (int i = 0; i < N; i ++) 
		if (i == N - 1) printf("%I64d\n", ans[i]);
		else printf("%I64d ", ans[i]);
	
	return 0;
}
                   