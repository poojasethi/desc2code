#include<cstdio>
#include<algorithm>
#define N 100010
using namespace std;
typedef long long ll;
typedef long double ld;
const ld eps=1e-12;
int n,m,lim,i,id[N],loc[N],st[N],en[N],L[N],R[N],need[N],b[N],q[N];
int vis[N],cnt,j,ans;ll fin[N],best,T;
struct P{int l,t,p;ll b;}a[N];
inline bool cmp(const P&a,const P&b){
  if(a.t!=b.t)return a.t>b.t;
  if(a.b!=b.b)return a.b<b.b;
  return a.p<b.p;
}
inline ld pos(int x,int y){return (ld)(a[x].b-a[y].b)/(ld)(a[y].t-a[x].t);}
inline void build(int x){
  int cnt=0,t=st[x],i;
  for(i=t;i<=en[x];i++)if(vis[i])q[++cnt]=i;
  if(!cnt){
    L[x]=st[x];
    R[x]=0;
    return;
  }
  for(b[t]=q[1],i=2;i<=cnt;i++)if(a[q[i]].t!=a[q[i-1]].t){
    while(t>st[x]&&pos(q[i],b[t])+eps<pos(b[t],b[t-1]))t--;
    b[++t]=q[i];
  }
  L[x]=st[x],R[x]=t;
}
inline void use(int x){
  ll tmp=T*2*a[b[x]].t+a[b[x]].b;
  if(tmp<best){
    ans=a[b[x]].p;
    best=tmp;
  }else if(tmp==best)ans=min(ans,a[b[x]].p);
}
inline void ask(int x){
  while(L[x]<R[x]&&(ld)T*2+eps>pos(b[L[x]],b[L[x]+1]))use(L[x]++);
  for(int i=L[x],j=0;i<=R[x]&&j<2;i++,j++)use(i);
}
inline void addline(int x){
  cnt++;
  vis[x]=1;
  need[id[x]]=1;
}
inline void delline(int x){
  cnt--;
  vis[x]=0;
  need[id[x]]=1;
}
inline void takeout(){
  best=1LL<<62;
  for(int i=id[1];i<=id[n];i++){
    if(need[i])build(i),need[i]=0;
    ask(i);
  }
  ans=loc[ans];
  T+=a[ans].l;
  fin[a[ans].p]=T;
  delline(ans);
}
int main(){
  scanf("%d",&n);
  while(lim*lim<n)lim++;
  for(i=1;i<=n;i++)en[id[i]=i/lim]=i;
  for(i=n;i;i--)st[id[i]]=i;
  for(i=id[1];i<=id[n];i++)L[i]=1;
  for(i=1;i<=n;i++){
    scanf("%d%d",&a[i].l,&a[i].t);
    a[i].b=1LL*a[i].l-1LL*a[i].t*a[i].t;
    a[i].p=i;
  }
  sort(a+1,a+n+1,cmp);
  for(i=1;i<=n;i++)loc[a[i].p]=i;
  for(i=j=n;i;i--){
    while(j&&a[j].t<=T)addline(j--);
    if(!cnt)T=a[j].t,addline(j--);
    while(j&&a[j].t<=T)addline(j--);
    takeout();
  }
  for(i=1;i<n;i++)printf("%I64d ",fin[i]);printf("%I64d",fin[n]);
  return 0;
}
  		   	  	 	 	 			 	  		 		 	