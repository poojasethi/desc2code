#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <string>
#include <algorithm>
#include <queue>
#include <vector>
using namespace std;

const long long sqr=317;
const int N=100005;

struct Node
{
    long long l;
    int id;
    bool operator < (const Node &o) const
    {
        return (l<o.l)||((l==o.l)&&(id<o.id));
    }
};

struct node
{
    vector <Node> a;
    int i=0;
}hash[N];

int n;
long long p2,p1,x,T,ans[N],minx,maxx;

bool pd(long long u,long long v)
{
    long long lu=hash[u].a[hash[u].i].l;
    long long lv=hash[v].a[hash[v].i].l;
    long long fu=lu-(T-u)*(T-u);
    long long fv=lv-(T-v)*(T-v);
    if (fu<fv) return 0;
    if (fu>fv) return 1;
    return (hash[u].a[hash[u].i].id>hash[v].a[hash[v].i].id);
}

int main()
{
    scanf("%d",&n);
    minx=N; maxx=-1;
//    for (int i=0; i<N: i++) hash[i].i=0;
    for (int i=1; i<=n; i++)
    {
        scanf("%I64d%I64d",&p1,&p2);
        hash[p2].a.push_back( (Node) {p1,i} );
        minx=min(minx,p2);
        maxx=max(maxx,p2);
    }
    for (int i=minx; i<=maxx; i++)
      if (hash[i].a.size())
        sort(hash[i].a.begin(),hash[i].a.end());
    T=x=0;
    for (int j=1; j<=n; j++)
    {
        while (hash[x].i>=hash[x].a.size()) x++;
        T=max(T,x); minx=x;
        for (long long i=x+1; i<=min(maxx,x+sqr); i++)
          if ((T>=i)&&(hash[i].i<hash[i].a.size()))
            if (pd(minx,i))
              minx=i;
        T+=hash[minx].a[hash[minx].i].l;
        ans[hash[minx].a[hash[minx].i].id]=T;
        hash[minx].i++;
    }
    for (int i=1; i<=n; i++) printf("%I64d ",ans[i]); printf("\n");
    return 0;
}

