#include <bits/stdc++.h>
using namespace std;

const int N = 1e5+9;

int n;
struct Data
{
    int l, t, id;
    inline void input()
    {
        scanf("%d%d", &l, &t);
    }
}a[N];
vector<int> b[N];
long long ans[N];

void init()
{
    scanf("%d", &n);
    for(int i = 1; i <= n; ++i)
    {
        a[i].input();
        a[i].id = i;
    }
}

inline bool cmp(const Data &a, const Data &b)
{
    return a.l > b.l || (a.l == b.l && a.id > b.id);
}

void solve()
{
    sort(a+1, a+n+1, cmp);
    for(int i = 1; i <= n; ++i)
        b[a[i].t].push_back(i);
    long long tim = 0;
    int pos = 0;
    for(int i = 1; i <= n; ++i)
    {
        while(b[pos].empty()) pos++;
        tim = max(tim, (long long)pos);
        int node = b[pos].back(), p = pos;
        long long tmp = a[node].l+2LL*tim*pos-(long long)pos*pos;
        int j = pos+1;
        while(j <= tim)
        {
            if(1+2LL*j*tim-(long long)j*j > tmp)
                break;
            if(b[j].size())
            {
                int node2 = b[j].back();
                long long tmp2 = a[node2].l+2LL*j*tim-(long long)j*j;
                if(tmp2 < tmp || (tmp2 == tmp && a[node2].id < a[node].id))
                    node = node2, tmp = tmp2, p = j;
            }
            j++;
        }
        ans[a[node].id] = tim+=a[node].l;
        b[p].pop_back();
    }
    for(int i = 1; i <= n; ++i)
        printf("%I64d%c", ans[i], i==n?'\n':' ');
}

int main()
{
    init();
    solve();
    return 0;
}