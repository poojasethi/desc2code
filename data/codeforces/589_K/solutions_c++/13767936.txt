#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
typedef long long LL;
const int maxn = 100050 ;

int N ;
struct TASK{
    int l , t , id ;
    bool operator < (const TASK & rhs) const {
        if(l != rhs.l) return l > rhs.l  ;
        return id > rhs.id ;
    }
}task[maxn];

bool cmp(TASK a , TASK b) {
    return a.t < b.t ;
}

priority_queue< int , vector<int> , greater<int> > Q ;
priority_queue<TASK> L[maxn] ;


void Insert(TASK p) {
    if(L[p.t].empty()) {
        Q.push(p.t) ;
    }
    L[p.t].push(p) ;
}

bool better(TASK a , TASK b , LL T) {
    if(T >= 200000) {
        if(a.t != b.t) return a.t < b.t ;
        if(a.l != b.l) return a.l < b.l ;
        return a.id < b.id ;
    }
    else {
        LL ta = a.l - (T - a.t) * (T - a.t) ;
        LL tb = b.l - (T - b.t) * (T - b.t) ;
        if(ta != tb) return ta < tb ;
        return a.id < b.id ;
    }
}

int ti[500] , tn ;
TASK best[500] ;
LL ans[maxn] ;


int main()
{
//    freopen("data.in","r", stdin);

    scanf("%d", &N) ;
    for(int i=1; i<=N; i++) {
        scanf("%d%d", &task[i].l , &task[i].t);
        task[i].id = i;
    }

    sort(task+1 , task+1+N , cmp) ;
    LL T = 0 ;
    int cc = 1 ;

    for(int times=0; times<N; times++) {
        if(Q.empty() && T < task[cc].t ) T = task[cc].t ;

        while(cc <= N && task[cc].t <= T) {
            Insert(task[cc]) ;
            cc ++ ;
        }


        tn = 0 ;
        while(!Q.empty() && tn < 320) {
            ti[tn] = Q.top() ; Q.pop() ;
            best[tn] = L[ti[tn]].top() ;
            tn ++ ;
        }

        int bst = 0 ;
        for(int i=1; i<tn; i++) {
            if(better(best[i] , best[bst] , T)) bst = i;
        }

        ans[best[bst].id] = T + best[bst].l ;
        T += best[bst].l ;

        int tt = best[bst].t ;

        for(int i=0; i<tn; i++) {
            if(i == bst) {
                L[tt].pop() ;
                if(!L[tt].empty()) Q.push(tt) ;
            }
            else {
                Q.push( best[i].t ) ;
            }
        }

    }



    for(int i=1; i<=N; i++){
        printf("%I64d%c" , ans[i] , i==N ? '\n' : ' ') ;
    }


    return 0;
}
