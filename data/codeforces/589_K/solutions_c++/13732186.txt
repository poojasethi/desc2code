#include <bits/stdc++.h>
using namespace std;

#define ms(s, n) memset(s, n, sizeof(s))
#define FOR(i, a, b) for(int i = (a); i < (b); i++)
#define FORd(i, a, b) for(int i = (a) - 1; i >= (b); i--)
#define sz(a) int((a).size())
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef vector<pi> vii;
ll gcd(ll a, ll b) {ll r; while (b != 0) {r = a % b; a = b; b = r;} return a;}
ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}
#define EPS 1e-9
const int mod = 1000000007;
const int INF = (int) 1e9;
const ll LINF = (ll) 1e18;
const ld PI = 2 * acos(0);

const int maxn = 100010;
int n;
int l[maxn];
int t[maxn];
deque<pi> dq[maxn];
ll ans[maxn];

ll calc(int l, ll t, ll T) {
    return l - (T - t) * (T - t);
}

void solve() {
    scanf("%d", &n);
    FOR(i, 0, n) {
        scanf("%d%d", l + i, t + i);
        dq[t[i]].push_back(make_pair(l[i], i));
    }
    FOR(i, 0, maxn) if (sz(dq[i])) sort(dq[i].begin(), dq[i].end());
    int rm = n, cur = 0;
    ll tms = 0;
    while (rm) {
        while (cur < maxn && !sz(dq[cur])) cur++;
        if (cur > tms) tms = cur;
        int idx1 = -1, idx2 = INF;
        ll dmin = LINF;
        if (tms > INF) {
            idx1 = cur;
            idx2 = dq[cur][0].second;
        }
        else {
            int up = min(maxn, cur + 400);
            up = min((ll) up, tms + 1);
            FOR(i, cur, up) if (sz(dq[i])) {
                ll tmp = calc(dq[i][0].first, i, tms);
                if (dmin > tmp || (dmin == tmp && idx2 > dq[i][0].second)) {
                    dmin = tmp; idx1 = i;
                    idx2 = dq[i][0].second;
                }
            }
        }
        rm--; tms += dq[idx1][0].first;
        ans[idx2] = tms; dq[idx1].pop_front();
    }
    FOR(i, 0, n) printf("%I64d ", ans[i]);
}

int main() {
	//ios_base::sync_with_stdio(0); cin.tie(NULL);
#ifdef _LOCAL_
	freopen("in.txt", "r", stdin); //freopen("out.txt", "w", stdout);
#endif
	solve();
#ifdef _LOCAL_
	//printf("\nTime elapsed: %dms", 1000 * clock() / CLOCKS_PER_SEC);
#endif
	return 0;
}
