

def cut(word, k):
  vowels = "aeiou"
  acc = []
  for i in word[::-1]:
    acc.append(i)

    if i in vowels:
      k -= 1

    if k == 0:
      return "".join(acc)

  return ""


def find_scheme(verses, k):
  vs = map(lambda v: cut(v, k), verses)

  if "" in vs:
    return "fail"

  if vs[0] == vs[1] == vs[2] == vs[3]:
    return "aaaa"
  elif vs[0] == vs[1] and vs[2] == vs[3]:
    return "aabb"
  elif vs[0] == vs[2] and vs[1] == vs[3]:
    return "abab"
  elif vs[0] == vs[3] and vs[1] == vs[2]:
    return "abba"

  return "fail"

[n, k] = map(int, raw_input().split())
res = []

for i in xrange(n):
  lines = []
  lines.append(raw_input())
  lines.append(raw_input())
  lines.append(raw_input())
  lines.append(raw_input())

  res.append(find_scheme(lines, k))
  
res = set(res)

if "fail" in res:
  print "NO"
elif len(res) == 1:
  v = res.pop()
  print v
elif len(res) == 2 and "aaaa" in res:
  res.remove("aaaa")
  v = res.pop()
  print v
else:
  print "NO"

