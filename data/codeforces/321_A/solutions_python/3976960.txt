
import sys

def toPoly(c):
	return [(0, 1), (0, -1), (-1, 0), (1, 0)]['UDLR'.index(c)]

def addPoly(a, b):
	return tuple([x+y for x, y in zip(a, b)])

def subPoly(a, b):
	return tuple([x-y for x, y in zip(a, b)])

def check(p, d):
	if d[0]==0:
		if p[0]!=d[0]:
			return False
	elif p[0]%d[0]!=0 or p[0]/d[0]<0:
		return False
	if d[1]==0:
		if p[1]!=d[1]:
			return False
	elif p[1]%d[1]!=0 or p[1]/d[1]<0:
		return False
	if d[0]!=0 and d[1]!=0 and p[0]/d[0]!=p[1]/d[1]:
		return False
	return True

P = map(int, raw_input().split())
S = map(toPoly, raw_input())

N = len(S)

dRound = reduce(addPoly, S, (0, 0))

for p in S:
	#print '#', P, dRound
	if check(P, dRound):
		print 'Yes'
		sys.exit()
	P = subPoly(P, p)

print 'No'
