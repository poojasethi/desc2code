#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>
using namespace std;
#define Mod 1000000007

typedef long long LL;

int x[110], y[110], sx[110];
int f[110][11000];
int c[11000][110];

inline void zy(int&a, int b) {
	a = (a + b) % Mod;
}

int p[11000];

int mypow(int a, int p) {
	int r = 1;
	while (p) {
		if (p & 1)
			r = r * (LL)a % Mod;
		a = a * (LL)a % Mod;
		p >>= 1;
	}
	return r;
}

int main() {
	p[0] = 1;
	for (int i = 1; i <= 10000; ++i)
		p[i] = p[i - 1] * (LL)i % Mod;
	for (int i = 0; i <= 10000; ++i) {
		c[i][0] = 1;
		for (int j = 1; j <= i && j <= 100; ++j)
			c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % Mod;
	}
	int m;
	while (scanf("%d", &m) != EOF) {
		int n = 0;
		for (int i = 1; i <= m; ++i) {
			scanf("%d", x + i);
			n += x[i];
			sx[i] = sx[i - 1] + x[i];
		}
		for (int i = 1; i <= m; ++i)
			scanf("%d", y + i);
		memset(f, 0, sizeof f);
		f[0][0] = 1; y[m + 1] = 0;
		for (int i = 1; i <= m; ++i)
			for (int j = 0; j <= sx[i]; ++j)
				for (int k = 0; k <= j + x[i] && k <= y[i]; ++k)
					zy(f[i][j + x[i] - k], f[i - 1][j] * (LL)c[j + x[i]][k] % Mod);
		int t = p[n];
		for (int i = 1; i <= m; ++i)
			t = t * (LL)mypow(p[x[i]], Mod - 2) % Mod;
//		printf("%d\n", t);
		t = t * (LL)f[m][0] % Mod;
//		printf("%d\n", f[m][0]);
		printf("%d\n", t);
	}
	return 0;
}
				 	 		  		    	  		  	