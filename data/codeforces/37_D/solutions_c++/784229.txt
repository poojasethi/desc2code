#include <stdio.h>
#include <iostream>
#include <memory.h>
#include <algorithm>
#include <vector>
#include <string>
#include <math.h>
#include <string.h>
using namespace std;
typedef __int64 LL;
const int Mod = 1000000000 + 7;
const int N = 1000 + 5;
LL dp[100 + 5][1000 + 5],C[1000 + 5][1000 + 5];
int x[N],y[N];
void Init(){
	int i,j;
	C[0][0] = 1;C[1][1] = 1;C[1][0] = 1;
	for(i = 2;i <= 1000;i++){
		C[i][0] = 1;
		for(j = 1;j <= i;j++){
			C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % Mod;
		}
	}
	return;
}
void update(LL &cur,LL v){cur = (cur + v) % Mod;}
int main(){
	int i,j,k;
	int n,m = 0;
	Init();
	scanf("%d",&n);
	for(i = 1;i <= n;i++) {
		scanf("%d",&x[i]);
		m += x[i]; 
	}
	for(i = 1;i <= n;i++) scanf("%d",&y[i]);
	dp[0][0] = 1;
	for(i = 0;i < n;i++)for(j = 0;j <= m;j++)if(dp[i][j] != 0){
		int Newp = j + x[i + 1];
		for(k = 0;k <= Newp && k <= y[i + 1];k++){
			update(dp[i + 1][Newp - k],dp[i][j] * C[Newp][k] % Mod);
		}
	}
	LL ans = dp[n][0];
	for(i = 1;i <= n;i++){
		ans = (ans * C[m][x[i]])%Mod;
		m -= x[i];
	}
	printf("%I64d\n",ans);
	return 0;
} 
			 	  	 	 			 	 					  	