#include <cstdio>
#include <iostream>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long llong;

const int M = 128, N = 1024;
const int MOD = 1000*1000*1000+7;

int n, x[M], y[M];
llong dp[M][N];

llong c[N][N];

llong C(int n, int m)
{
	if(n < 0 || n > m) return 0;
	if(n == 0 || n == m) return 1;
	if(c[n][m] != -1) return c[n][m];
	return c[n][m] = (C(n-1, m-1)+C(n, m-1))%MOD;
}

void update(llong& a, llong b) { a = (a+b)%MOD; }

int main()
{
	scanf("%d", &n);
	for(int i = 0; i < n; i++) scanf("%d", &x[i]);
	for(int i = 0; i < n; i++) scanf("%d", &y[i]);
	
	int m = 0;
	for(int i = 0; i < n; i++) m += x[i];

	memset(c, -1, sizeof(c));
	memset(dp, 0, sizeof(dp));
	// dp[i][j]: room [0, i) is used, and j groups remain 
	dp[0][0] = 1;
	for(int i = 0; i < n; i++) for(int j = 0; j <= m; j++) if(dp[i][j] != 0) {
		// enum the insert groups of this X
		int newG = j + x[i];
		for(int k = 0; k <= y[i] && k <= newG; k++) {
			update(dp[i+1][newG-k], 1LL*C(k, newG)*dp[i][j]);
		}
	}
	llong res = dp[n][0];
	
	int sum = m;
	for(int i = 0; i < n; i++) {
		res = 1LL*res*C(x[i], sum)%MOD;
		sum -= x[i];
	}
	cout << res << endl;
	
	return 0;
}

