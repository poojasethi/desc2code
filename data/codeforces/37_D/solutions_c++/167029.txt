#include<iostream>
#include<set>
#include<map>
#include<string>
#include<stdio.h>
#include<sstream>
#include<algorithm>
#include<sstream>
#include<queue>
#include<cmath>
#include<string.h>
using namespace std ;
#define INF (int)1e9
typedef pair<int,int> P ;
#define MOD 1000000007
#define MAXN 1002
int n,m,x[MAXN],y[MAXN],o[MAXN] ;

int memo[MAXN][MAXN],ncr[MAXN][MAXN] ;
int solve(int k1,int k2)
{
 if(k1 == n) return 1 ;
 if(k1 > n || k2 == m) return 0 ;
 if(memo[k1][k2] != -1) return memo[k1][k2] ;
 int i,j,k,ret = 0 ;
 
 for(k = k1;k < n;k++) if(o[k] > k2) break ;
 k -= k1 ;
 for(int i = 0;i <= y[k2];i++)
 {
  ret += 1LL * ncr[k][i] * solve(k1 + i,k2 + 1) % MOD ;
  if(ret >= MOD) ret -= MOD ;
 }
 return memo[k1][k2] = ret ;
}

int main()
{
 int i,j,k ;
 
 scanf("%d",&m) ;
 for(i = 0;i < m;i++) { scanf("%d",&x[i]) ; n += x[i] ; }
 for(i = 0;i < m;i++) { scanf("%d",&y[i]) ; }
 
 k = 0 ;
 for(i = 0;i < m;i++)
  for(j = 0;j < x[i];j++)
   o[k++] = i ;
 
 for(i = 0;i < MAXN;i++)
 {
  ncr[i][0] = ncr[i][i] = 1 ;
  for(j = 1;j < i;j++)
  {
   ncr[i][j] = ncr[i - 1][j] + ncr[i - 1][j - 1] ;
   if(ncr[i][j] >= MOD) ncr[i][j] -= MOD ;
  }
 }
 
 memset(memo,255,sizeof memo) ;
 int ret = solve(0,0) ;

 int ret2 = 1 ;
 for(i = m - 1;i > 0;i--)
 {
  ret2 = 1LL * ret2 * ncr[n][x[i]] % MOD ;
  n -= x[i] ;
 }
 
// cout << ret << " " << ret2 << endl ;
 ret = 1LL * ret * ret2 % MOD ;
 cout << ret << endl ;
 
 return 0 ;
}
