#include <bits/stdc++.h>
using namespace std;
#define REP(a, b, c) for(int a = b; a < c; a++)
#define asd(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define asdf(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
typedef pair<int,int> ii;
typedef long long LL;

int m, X[102], Y[102], csum[102];
const int MOD = 1e9 + 7;
int dp[102][1002], N, choose[1002][1002];

int rec(int idx, int second){

    if(idx == m) return second == 0;

    int &ret = dp[idx][second];
    if(ret != -1) return ret;

    int first = N - ((idx == 0) ? 0 : csum[idx - 1]);
    ret = 0;

    if(X[idx] > first) return ret = 0;

    int ways = choose[first][X[idx]];

    second += X[idx];

    REP(i, 0, Y[idx] + 1){

        if(i > second) break;

        LL here = choose[second][i];
        here = (here * ways) % MOD;
        here = here * rec(idx + 1, second - i);

        ret = (ret + here % MOD) % MOD;
    }

    return ret;

}

int main(){

    scanf("%d", &m);
    REP(i, 0, m) {
        scanf("%d", &X[i]);
        csum[i] = X[i] + (i == 0 ? 0 : csum[i-1]);
    }
    REP(i, 0, m) scanf("%d", &Y[i]);
    
    REP(i, 0, 1002){
        choose[i][0] = 1;
        REP(j, 1, i+1){
            choose[i][j] = (choose[i-1][j] + choose[i-1][j-1])%MOD;
        }
    }
    
    memset(dp, -1, sizeof dp);
   
    N = accumulate(X, X + m, 0);

    cout << rec(0, 0) << endl;

    return 0;
}
