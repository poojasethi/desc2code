#include <cstring>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>

using namespace std;

#define Max(a,b) ((a)>(b)?(a):(b))

const int Mod=1000000000+7;
const int MAXM=100,MAXN=1000;

int power(int x,int k)
{
    int ret=1;
    while (k) {
        if (k&1) ret=1LL*ret*x%Mod;
        x=1LL*x*x%Mod; k>>=1; }
    return ret;
}

int jc[MAXN+10],ny[MAXN+10];

int n,m;

int x[MAXM+10],y[MAXM+10];

int dp[MAXM+10][MAXN+10];

#define relax(X,Y) (X)=((Y)+(X))%Mod

#define C(a,b) (1LL*jc[a]*ny[b]%Mod*ny[(a)-(b)]%Mod)

void init()
{
    cin>>m;
    for (int i=1;i<=m;i++) { scanf("%d",&x[i]); n+=x[i]; }
    for (int i=1;i<=m;i++) scanf("%d",&y[i]);
    
    jc[0]=ny[0]=1;
    for (int i=1;i<=n;i++) {
        jc[i]=1LL*jc[i-1]*i%Mod; ny[i]=power(jc[i],Mod-2); }
    
    dp[0][0]=1;
    for (int i=1;i<m;i++)
        for (int j=0;j<=n;j++)
            if (dp[i-1][j])
                for (int k=Max(0,j+x[i]-y[i]);j+x[i]-k>=0;k++)
                    relax(dp[i][k],1LL*C(x[i]+j,k)*dp[i-1][j]);
    
    int ans=0;
    for (int i=0;i+x[m]<=y[m];i++) relax(ans,dp[m-1][i]);
    
    for (int i=1;i<=m;i++) {
        ans=1LL*ans*C(n,x[i])%Mod; n-=x[i]; }
    
    cout<<ans;
    return ;
}

int main()
{
    init();
    return 0;
}