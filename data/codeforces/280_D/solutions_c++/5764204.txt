#include<iostream>
#include<cstdio>
#include<vector>
using namespace std;

#define X first
#define Y second
#define lx (x << 1)
#define rx (lx + 1)
#define rep(i, s, t) for (int i = s; i <= t; ++i)
typedef pair<int, int> PII;
struct HF{
    int s;
    int mxl, mxr, mxs, mxlc, mxrc; PII mxsc;
    void init(int v, int si){
        mxl = mxr = mxs = v;
        s = v;
        mxlc = mxrc = si; mxsc = make_pair(si, si);
    }
};
HF p[2][111111 * 4]; int tag[111111 * 4];
int a[111111];
int n, m;

HF upd(HF a, HF b){
    HF c;
    c.s = a.s + b.s;
    c.mxl = a.mxl, c.mxlc = a.mxlc;
    if (a.s + b.mxl > c.mxl) {c.mxl = a.s + b.mxl; c.mxlc = b.mxlc;}
    c.mxr = b.mxr, c.mxrc = b.mxrc;
    if (b.s + a.mxr > c.mxr) {c.mxr = b.s + a.mxr; c.mxrc = a.mxrc;}
    if (a.mxs > b.mxs) {c.mxs = a.mxs, c.mxsc = a.mxsc;}
            else {c.mxs = b.mxs; c.mxsc = b.mxsc;}
    if (a.mxr + b.mxl > c.mxs){
        c.mxs = a.mxr + b.mxl;
        c.mxsc = make_pair(a.mxrc, b.mxlc);
    }
    return c;
}

void rev(int x){
    swap(p[0][x], p[1][x]);
}

void push(int x){
    if (tag[x]){
        tag[lx] ^= 1; rev(lx);
        tag[rx] ^= 1; rev(rx);
        tag[x] = 0;
    }
}
 
void build(int x, int l, int r){
    if (l == r){
        p[0][x].init(a[l], l);
        p[1][x].init(-a[l], l);
        return;
    }
    int mid = (l + r) >> 1;
    build(lx, l, mid);
    build(rx, mid + 1, r);
    rep(c, 0, 1) p[c][x] = upd(p[c][lx], p[c][rx]);
}

void modify(int x, int l, int r, int v, int t){
    if (l < r) push(x);
    if (l == r){
        p[0][x].init(t, l);
        p[1][x].init(-t, l);
        return;
    }
    int mid = (l + r) >> 1;
    if (v <= mid) modify(lx, l, mid, v, t);
    else modify(rx, mid + 1, r, v, t);
    rep(c, 0, 1) p[c][x] = upd(p[c][lx], p[c][rx]);
}

HF query(int x, int l, int r, int f, int t){
    if (l < r) push(x);
    if (f <= l && r <= t) return p[0][x];
    int mid = (l + r) >> 1; HF ans;
    if (f <= mid && mid < t) 
        ans = upd(query(lx, l, mid, f, t), query(rx, mid + 1, r, f, t));
    else 
        if (f <= mid) ans = query(lx, l, mid, f, t); 
            else ans = query(rx, mid + 1, r, f, t);
    rep(c, 0, 1) p[c][x] = upd(p[c][lx], p[c][rx]);
    return ans;
}

void modifyr(int x, int l, int r, int f, int t){
    if (l < r) push(x);
    if (f <= l && r <= t){
        tag[x] ^= 1;
        rev(x);
        return;
    }
    int mid = (l + r) >> 1;
    if (f <= mid) modifyr(lx, l, mid, f, t);
    if (t > mid) modifyr(rx, mid + 1, r, f, t);
    rep(c, 0, 1) p[c][x] = upd(p[c][lx], p[c][rx]);
}

int main(){
    scanf("%d", &n);
    rep(i, 1, n) scanf("%d", &a[i]);
    scanf("%d", &m);
    build(1, 1, n);
    rep(i, 1, m){
        int t, l, r, v;
        scanf("%d%d%d", &t, &l, &r);
        if (!t)
            modify(1, 1, n, l, r);
        else{
            scanf("%d", &v);
            int ans = 0;
            vector<PII> q;
            rep(j, 1, v){
                HF res = query(1, 1, n, l, r);
                if (res.mxs >= 0){
                    ans += res.mxs;
                    modifyr(1, 1, n, res.mxsc.X, res.mxsc.Y);
                    q.push_back(res.mxsc);
                }
                else break;
            }
            rep(j, 1, q.size()) modifyr(1, 1, n, q[j - 1].X, q[j - 1].Y);
            printf("%d\n", ans);
        }
    }
}
 
