#include <iostream>
#include <string.h>
#include <cstdio>
#include <map>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <limits.h>
#include <vector>
#include <string>
using namespace         std;
const int               Maxn=400010;
struct F{
    int x,y,sum;
};
struct Tree{
    F lmin,rmin,smin;
    F lmax,rmax,smax;
    F all;
    int mk;
    
}                       t[Maxn];
int                     n,m,i,j,op,l,r,k,ans;
vector<F>               opr;

F max(F a,F b)
{
    if (a.sum>b.sum) return a; return b;
}

F min(F a,F b)
{
    if (a.sum<b.sum) return a; return b;
}

Tree New(int l,int key)
{
    Tree t;
    t.lmin=t.rmin=t.smin=(F){l,l,key};
    t.lmax=t.rmax=t.smax=(F){l,l,key};
    t.all=(F){l,l,key};
    t.mk=0;
    return t;
}
F operator +(F a, F b)
{
    if (a.x==-1) return b;
    if (b.x==-1) return a;
    return (F){a.x,b.y,a.sum+b.sum};
}
Tree operator +(Tree a,Tree b)
{
    Tree c;
    c.lmin=min(a.lmin,a.all+b.lmin);
    c.rmin=min(b.rmin,a.rmin+b.all);
    c.smin=min(min(a.smin,b.smin),a.rmin+b.lmin);
    c.lmax=max(a.lmax,a.all+b.lmax);
    c.rmax=max(b.rmax,a.rmax+b.all);
    c.smax=max(max(a.smax,b.smax),a.rmax+b.lmax);
    c.all=a.all+b.all;
    c.mk=0;
    return c;
}

void exc(F &a,F &b)
{
    swap(a,b);
    a.sum*=-1; b.sum*=-1;
}

void check(int k,int l,int r)
{
    if (!t[k].mk) return;
    exc(t[k].lmin,t[k].lmax);
    exc(t[k].rmin,t[k].rmax);
    exc(t[k].smin,t[k].smax);
    t[k].all.sum*=-1;
    t[k].mk=0;
    if (r-l)
    {
        t[k*2].mk=(t[k*2].mk+1)%2;
        t[k*2+1].mk=(t[k*2+1].mk+1)%2;
    }
}
void ins(int k,int l,int r,int x,int y,int key)
{
    check(k,l,r);
    if(r<x||y<l) return;
    if(x<=l&&r<=y)
    {
        t[k]=New(l,key);
        return;
    }
    int mid=(l+r)/2;
    ins(k*2,l,mid,x,y,key);
    ins(k*2+1,mid+1,r,x,y,key);
    t[k]=t[k*2]+t[k*2+1];
}
Tree get(int k,int l,int r,int x,int y)
{
    check(k,l,r);
    if(r<x||y<l) return New(-1,0);
    if(x<=l&&r<=y)
        return t[k];
    int mid=(l+r)/2;
    return get(k*2,l,mid,x,y)+get(k*2+1,mid+1,r,x,y);
}
void Rev(int k,int l,int r,int x,int y)
{
    check(k,l,r);
    if(r<x||y<l) return ;
    if(x<=l&&r<=y)
    {
        t[k].mk=(t[k].mk+1)%2;
        check(k,l,r);
        return;
    }
    int mid=(l+r)/2;
    Rev(k*2,l,mid,x,y);
    Rev(k*2+1,mid+1,r,x,y);
    t[k]=t[k*2]+t[k*2+1];
}
int main()
{
    ios::sync_with_stdio(0);
    //freopen("/Users/MAC/Desktop/Error202/Error202/1.in","r",stdin);
    //freopen("/Users/MAC/Desktop/Error202/Error202/1.out","w",stdout);
    cin>>n;
    for (i=1;i<=n;i++)
    {
        cin>>m;
        ins(1,1,n,i,i,m);
    }
    cin>>m;
    for(i=1;i<=m;i++)
    {
        cin>>op;
        if (op)
        {
            cin>>l>>r>>k;
            opr.clear();
            ans=0;
            for (j=1;j<=k;j++)
            {
                F cag=get(1,1,n,l,r).smax;
                if(cag.sum<=0) break;
                ans+=cag.sum;
                opr.push_back(cag);
                Rev(1,1,n,cag.x,cag.y);
            }
            for (j=0;j<opr.size();j++)
                Rev(1,1,n,opr[j].x,opr[j].y);
            cout<<ans<<endl;
        }
        else
        {
            cin>>l>>k;
            ins(1,1,n,l,l,k);
        }
    }
}
