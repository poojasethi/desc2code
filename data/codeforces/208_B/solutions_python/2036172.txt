#-*-coding=utf8-*-

from collections import deque

def ok(c1, c2):
    return (c1[0] == c2[0] or c1[1] == c2[1])

n = int(raw_input())
cards = raw_input().split()

used = set()
used.add(((n,) + tuple(cards[-3:])))
q = deque()
q.append(list(used)[0])
while q:
    cur_move = q.popleft()
    cur_cnt = cur_move[0]
    if (cur_cnt == 1):
        ans = "YES"
        break
    if (cur_cnt >= 2 and ok(cur_move[-2], cur_move[-1])):
        new_move = (cur_cnt - 1, )
        if (cur_cnt >= 4):
            new_move += (cards[cur_cnt - 4], )
        new_move += cur_move[1:-2]
        new_move += (cur_move[-1], )
        if (not new_move in used):
            used.add(new_move)
            q.append(new_move)
    if (cur_cnt >= 4 and ok(cards[cur_cnt - 4], cur_move[-1])):
        new_move = (cur_cnt - 1, cur_move[-1]) + cur_move[1:-1]
        if (not new_move in used):
            used.add(new_move)
            q.append(new_move)
else:
    ans = "NO"

print(ans)