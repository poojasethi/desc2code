#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <bitset>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li       	long long int
#define rep(i,to)	for(li i=0;i<((li)(to));i++)
#define pb       	push_back
#define sz(v)    	((li)v.size())
#define bit(n)   	(1ll<<(li)(n))


#define MAX 255
li a[MAX];
li n;
li res;
li b[MAX],c[MAX],d[MAX];

bool recur(li num){
	if(num==res) return (a[res]==n);
	rep(i,num+1)rep(j,4){
		a[num+1]=a[i]<<j;
		b[num]=i;
		c[num]=j;
		d[num]=-1;
		if(recur(num+1)) return true;
	}
	rep(i,num+1)rep(j,num+1)rep(k,4){
		a[num+1]=a[i]+(a[j]<<k);
		b[num]=i;
		c[num]=j;
		d[num]=k;
		if(recur(num+1)) return true;
	}
	return false;
}

bool cal(li num){
	a[0]=1;
	return recur(0);
}

int main(){
	cin>>n;
	while(!cal(res)) res++;
	cout<<res<<endl;
	rep(i,res){
		if(d[i]==-1){
			printf("lea e%cx, [%d*e%cx]\n",(char)('b'+i),(1<<c[i]),(char)('a'+b[i]));
		}else{
			printf("lea e%cx, [e%cx + %lld",(char)('b'+i),(char)('a'+b[i]),bit(d[i]));
			printf("*e%cx]\n",(char)('a'+c[i]));
		}
	}
}
