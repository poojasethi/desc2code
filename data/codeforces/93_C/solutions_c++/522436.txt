#include<algorithm>
#include<iostream>
#include<iomanip>
#include<cstring>
#include<string>
#include<vector>
#include<cmath>
using namespace std;

int n , x[101];
int f1[101] , f2[101] , f3[101];
int F1[101] , F2[101] , F3[101];
int mul[] = {1 , 2 , 4 , 8};
int ans;

void dfs(int cur)
{
    if(cur >= ans)
        return;
    for(int i = 0 ; i < cur ; i++)
        for(int j = 0 ; j < cur ; j++)
            for(int k = 0 ; k < 4 ; k++)
            {
                x[cur] = x[i] + mul[k] * x[j];
                f1[cur] = i;
                f2[cur] = j;
                f3[cur] = k;
                if(x[cur] == n)
                {
                    ans = min(ans , cur);
                    for(int u = 2 ; u <= cur ; u++)
                        F1[u] = f1[u] , F2[u] = f2[u] , F3[u] = f3[u];
                    return;
                }
                if(x[cur] > n)
                    continue;
                dfs(cur + 1);
            }
}

string trans(int id)
{
    if(id == 0)
        id = 20;
    string ret;
    ret += "e";
    ret += char('a' - 1 + id);
    ret += "x";
    return ret;
}

void solve()
{
    memset(x , 0 , sizeof(x));
    ans = 7;
    if(n == 1)
    {
        cout << 0 << endl;
        return ;
    }
    x[1] = 1;
    dfs(2);
    cout << ans - 1 << endl;
    for(int i = 2 ; i <= ans ; i++)
    {
        cout << "lea " << trans(i) << ", [" << trans(F1[i]) << " + " << mul[F3[i]] << "*" << trans(F2[i]) << "]" << endl; 
        
    }
}

int main()
{
    ios :: sync_with_stdio(false);
    while(cin >> n)
        solve();
    return 0;
}
