#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#define N 90000
using namespace std;

int n, qx[N], qy[N], x, y, val[3], hd, tl;
int v[300][300], fx[300][300], fy[300][300], ok=-1;

char rec[260][260][30];
char name[3][10];
char s[100];

void relax(int tx, int ty, char s[]){

	if (tx>255 || ty>255) return;
	if (v[tx][ty]) return;

	strcpy(rec[tx][ty], s);
	v[tx][ty] = v[x][y] + 1;
	tl++;
	
	qx[tl] = tx;
	qy[tl] = ty;
	fx[tx][ty] = x;
	fy[tx][ty] = y;
	
	if (tx == n) ok = ty;
}

void trace(int x, int y){
	if (!x && !y) return;
	
	trace(fx[x][y], fy[x][y]);
	printf("%s\n", rec[x][y]);
}

int main(){

	scanf("%d", &n);
	
	if (n==1){
		printf("0\n");
		return 0;
	}
	
	qx[0] = 0;
	qy[0] = 0;
	v[0][0] = 1;
	

	strcpy(name[0], "ecx");
	strcpy(name[1], "ebx");
	strcpy(name[2], "eax");
	
	hd = tl = 0;
	while (tl >= hd){

		x = qx[hd];
		y = qy[hd];
		
		val[0] = x;
		val[1] = y;
		val[2] = 1;

		for (int mul=1; mul<=8; mul<<=1){

			for (int i=0; i<2; i++){
				for (int j=0; j<3; j++){

					sprintf(s, "lea %s, [%d*%s]", name[i], mul, name[j]);

					if (i==0) relax(mul*val[j], y, s);
					if (i==1) relax(x, mul*val[j], s);
					
					for (int k=0; k<3; k++){

						sprintf(s, "lea %s, [%s + %d*%s]", name[i], name[j], mul, name[k]);
						if (i==0) relax(val[j] + val[k]*mul, y, s);
						if (i==1) relax(x, val[j] + val[k]*mul, s);
					}
				}
			}


		}

		if (ok != -1) break;
		hd++;

	}
	
	printf("%d\n", v[n][ok]-1);
	trace(n, ok);

	return 0;
}
