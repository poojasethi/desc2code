#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <bitset>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li       	long long int
#define rep(i,to)	for(li i=0;i<((li)(to));i++)
#define pb       	push_back
#define sz(v)    	((li)v.size())
#define bit(n)   	(1ll<<(li)(n))


#define MAX 255
li n;
vector<li> a,b,c;
vector<li> d;

bool recur(li rem){
	if(rem==0) return d.back()==n;
	rep(i,4)rep(j,sz(d)){
		a.pb(-1);
		b.pb(i);
		c.pb(j);
		d.pb(d[j]*bit(i));
		if(recur(rem-1)) return true;
		d.pop_back();
		c.pop_back();
		b.pop_back();
		a.pop_back();
	}
	rep(i,sz(d))rep(j,4)rep(k,sz(d)){
		a.pb(i);
		b.pb(j);
		c.pb(k);
		d.pb(d[i]+bit(j)*d[k]);
		if(recur(rem-1)) return true;
		d.pop_back();
		c.pop_back();
		b.pop_back();
		a.pop_back();
	}
	return false;
}
		
		

int main(){
	cin>>n;
	li res=0;
	d.pb(1);
	while(!recur(res)) res++;
	cout<<sz(a)<<endl;
	rep(i,sz(a)){
		printf("lea e%cx, [",(char)('b'+i));
		if(a[i]==-1){
			printf("%I64d*e%cx]\n",bit(b[i]),(char)c[i]+'a');
		}else{
			printf("e%cx + %I64d*e%cx]\n",(char)(a[i]+'a'),(bit(b[i])),(char)(c[i]+'a'));
		}
	}
}
