#include <iostream>
#include <vector>
#include <cstdio>

using namespace std;

int n, lmt;
int m[4] = {2, 4, 8, 1};
vector<int> t, ans;
bool found = false;

void dfs() {
	if(found || t.size() > lmt)
		return;
	if(t.back() == n){
		found = true, ans = t;
		return;
	}
	vector<bool> bit(n + 1, false);
	for (int i = 0; i <= t.size(); i++)
		for (int j = 0; j < t.size(); j++)
			for (int k = 0; k < 4; k++)
				if (t[j] * m[k] + ((i == t.size())?(0):(t[i])) > t.back() && 
					t[j] * m[k] + ((i==t.size())?(0):(t[i])) <= n
				   )
					bit[(i == t.size() ? 0 : t[i]) + t[j]*m[k]] = true;

	for(int i = 0; i < t.size(); i++)
		bit[t[i]] = false;

	for(int i = 2; i < bit.size() && !found; i++)
		if(bit[i]) {	
			t.push_back(i);
			dfs();
			t.pop_back();
		}
}

int main(){
	scanf("%d",&n);
	t.resize(1, 1);
	for(int i = 1; i < 7 && !found; ++i) {
		lmt = i;
		dfs();
	}
	printf("%d\n",ans.size() - 1);
	for(int h = 1; h < ans.size(); h++) {
		found = false;
		for(int i = 0; i <= h; i++)
			for(int j = 0; j < h; j++)
				for(int k = 0; k < 4 && !found; k++) 
					if(ans[h] == ans[j] * m[k] + ((i==h)?(0):(ans[i]))) {	
						printf("lea e%cx, ", h + 'a');
						if(i == h)
							printf("[%d*e%cx]\n", m[k], j + 'a');
						else if(k == 3)
							printf("[e%cx + e%cx]\n", i + 'a', j + 'a');
						else
							printf("[e%cx + %d*e%cx]\n", i + 'a', m[k], j + 'a');
						found = true;
					}
	}

	return 0;
}