#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <queue>
#include <map>
#include <set>
using namespace std;

const int N = 1000100;
const long long Mod = 1000000007;

char s[N], a[N];
int n, k, f[2][N], now=1;
long long dp[N][3], g[N];

void deal(int i, int p)
{
    long long t1=0, t2=0, t0=0;
    if(p==0)
    {
        t2=dp[i-1][2];t1=dp[i-1][1];
        if(f[p][i]>=k&&s[i-k]!='B')
        {
            if(s[i-k]!='X')
                t1=(t1+dp[i-k][0])%Mod;
            else
                t1=(t1+dp[i-k-1][0])%Mod;
        }
        t0=(now-t1-t2+Mod*2)%Mod;
        g[i]=(g[i]+t1)%Mod;
    }
    else
    {
        t0=dp[i-1][0];t2=dp[i-1][2];
        if(f[p][i]>=k&&s[i-k]!='W')
            t2=(t2+g[i-k])%Mod;
        t1=(now-t0-t2+2*Mod)%Mod;
    }
    dp[i][0]=(dp[i][0]+t0)%Mod;
    dp[i][1]=(dp[i][1]+t1)%Mod;
    dp[i][2]=(dp[i][2]+t2)%Mod;
}

int main()
{
    scanf("%d%d%s", &n, &k, s+1);
    s[0]='#';
    now=1;dp[0][0]=1;
    for(int i=1;i<=n;i++)
    {
        if(s[i]=='B')
        {
            f[0][i]=f[0][i-1]+1;
            f[1][i]=0;
            deal(i, 0);
        }
        else if(s[i]=='W')
        {
            f[0][i]=0;
            f[1][i]=f[1][i-1]+1;
            deal(i, 1);
        }
        else
        {
            f[0][i]=f[0][i-1]+1;
            f[1][i]=f[1][i-1]+1;
            deal(i, 0);
            deal(i, 1);
            now=now*2%Mod;
        }
    }
    cout<<dp[n][2]<<endl;
    return 0;
}
		    	  			  			     		 			  	