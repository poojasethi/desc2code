#include<iostream>
#include<set>
#include<algorithm>
#define forc(i,j,n)  for(int(i)=(j);(i)<(n);++(i))
using namespace std;
const int Maxn = int(1e3)+10;
bool table[Maxn][Maxn];
int n , m  , q , up[Maxn][Maxn] , dow[Maxn][Maxn] , ri[Maxn][Maxn] , le[Maxn][Maxn];

void upd(int x, int y ){

	int temp = -1;
	forc(i,0,n){
		if(!table[i][y]) temp = i;
		up[i][y] = temp;
	}
	temp = n;
	for(int i = n-1 ; i>=0 ; i--){
		if(!table[i][y]) temp = i;
		dow[i][y] = temp;
	}
	temp = -1;
	forc(i,0,m){
		if(!table[x][i]) temp = i;
		le[x][i] = temp;
	}
	temp = m;
	for(int i = m-1 ; i>=0 ;i--){
		if(!table[x][i]) temp = i;
		ri[x][i] = temp;
	}
}

void log(int x , int y){
	cout << "x is" << x << "y is " << y << endl;
	cout <<"up = " << up[x][y] << "dow = " << dow[x][y] << "le =  " << le[x][y] << "ri = " << ri[x][y] << endl;

}

int largeS(int x , int y){
	if(!table[x][y]) return 0;
	int minx1 , minx2 , miny1 , miny2;
	int lS = 0 ;
	minx1 = -1 , minx2 = n;
	forc(i,y,m){
		minx1 = max(minx1 , up[x][i]);
		minx2 = min(minx2 , dow[x][i]);
		lS = max(lS , (minx2 - minx1-1)*(i-y+1));
	}
	minx1 = -1 , minx2 = n;
	for(int i = y ; i>=0 ; i--){
		minx1 = max(minx1 , up[x][i]);
		minx2 = min(minx2 , dow[x][i]);
		lS = max(lS , (minx2 - minx1-1)*(y-i+1));
	}
	miny1 = -1 , miny2 = m;
	forc(i,x,n){
		miny1 = max(miny1 , le[i][y]);
		miny2 = min(miny2 , ri[i][y]);
		lS = max(lS , (miny2 - miny1-1)*(i-x+1));
	}
	miny1 = -1 , miny2 = m;
	for(int i = x ; i>=0 ; i--){
		miny1 = max(miny1 , le[i][y]);
		miny2 = min(miny2 , ri[i][y]);
		lS = max(lS , (miny2 - miny1-1)*(x-i+1));
	}
 return lS;

}

int main()
{
	ios_base::sync_with_stdio(false);
	cin >> n >> m >> q;
	forc(i,0,n)
		forc(j,0,m)
			cin >> table[i][j];
	forc(i,0,m) upd(0,i);
	forc(i,0,n) upd(i,0);
	//forc(i,0,n)
	//	forc(j,0,m)
	//		log(i,j);
	while(q--){
		int op , x , y;
		cin >> op >> x >> y;
		--x , -- y;
		if(op==1)
			table[x][y] = !table[x][y] , upd(x , y);
		else 
			cout << largeS(x,y)<<"\n";
	}
	return 0;
}
