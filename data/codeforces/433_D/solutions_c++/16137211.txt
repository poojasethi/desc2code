#include <cstdio>
#include <cstring>
#include <algorithm>
const int M = 1010;
using namespace std;
int left[M][M],right[M][M],up[M][M],down[M][M],len[M],n,m,x,y,Q,val[M][M],ans,opt;
int read(){
	int x = 0,f = 1,c = getchar();
	while (c<'0' || c>'9') {if (c=='-') f = -1;c = getchar();}
	while (c>='0' && c<='9') x = x*10+c-'0',c = getchar();
	return x*f;
}
void Update_X(int r){
	for (int i=1;i<=m;i++) left[r][i] = (val[r][i]==1)?left[r][i-1]+1:0;
	for (int i=m;i;i--) right[r][i] = (val[r][i]==1)?right[r][i+1]+1:0;
}
void Update_Y(int r){
	for (int i=1;i<=n;i++) up[i][r] = (val[i][r]==1)?up[i-1][r]+1:0;
	for (int i=n;i;i--) down[i][r] = (val[i][r]==1)?down[i+1][r]+1:0;
}
int work(int s,int len[],int N){
	int l = s,r = s,res = 0;
	for (int i=len[s];i;i--) {
		while (l>=1 && len[l]>=i) l--;
		while (r<=N && len[r]>=i) r++;
		res = max(res,i*(r-l-1));
	}
	return res;
}
int main(){
	n = read();m = read();Q = read();
	for (int i=1;i<=n;i++)
		for (int j=1;j<=m;j++)
			val[i][j] = read();
	for (int i=1;i<=n;i++) Update_X(i);
	for (int i=1;i<=m;i++) Update_Y(i);
	for (int I=1;I<=Q;I++){
		opt = read();
		if (opt==1) {
			x = read();y = read();val[x][y]^=1;
			Update_X(x);Update_Y(y);
		}
		else {
			x = read();y = read();
			ans = max(work(y,up[x],m),work(y,down[x],m));
			for (int i=1;i<=n;i++) len[i] = left[i][y];
			ans = max(ans,work(x,len,n));
			for (int i=1;i<=n;i++) len[i] = right[i][y];
			ans = max(ans,work(x,len,n));
			printf("%d\n",ans);
		}
	}
}
