#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

int n, m;
int ma, fa;

int tab[30][30];
char wcz[25];
vector < pair < long long , pair <int,int> > > wek;

pair <int,int> v;
long long t;

long long odl[30][30];
queue <pair <int,int> > bfs;

int n1;
vector <int> graf[2007];
int mac[2007][2007];
int bylo[2007];
int wyn;

void czys()
{
	for (int i=1; i<=n; i++)
	{
		for (int j=1; j<=m; j++)
		{
			odl[i][j]=-1;
		}
	}
}

void czysb()
{
	for (int i=1; i<=n1; i++)
	{
		bylo[i]=0;
	}
}

void bbbfs()
{
	while(!bfs.empty())
	{
		v=bfs.front();
		bfs.pop();
		
		if (!tab[v.first-1][v.second] && odl[v.first-1][v.second]==-1)
		{
			odl[v.first-1][v.second]=odl[v.first][v.second]+1;
			v.first--;
			bfs.push(v);
			v.first++;
		}
		
		if (!tab[v.first+1][v.second] && odl[v.first+1][v.second]==-1)
		{
			odl[v.first+1][v.second]=odl[v.first][v.second]+1;
			v.first++;
			bfs.push(v);
			v.first--;
		}
		
		if (!tab[v.first][v.second-1] && odl[v.first][v.second-1]==-1)
		{
			odl[v.first][v.second-1]=odl[v.first][v.second]+1;
			v.second--;
			bfs.push(v);
			v.second++;
		}
		
		if (!tab[v.first][v.second+1] && odl[v.first][v.second+1]==-1)
		{
			odl[v.first][v.second+1]=odl[v.first][v.second]+1;
			v.second++;
			bfs.push(v);
			v.second--;
		}
	}
}

int dfs(int u)
{
	bylo[u]=1;
	if (u==n1)
	{
		return 1;
	}
	for (int i=0; i<graf[u].size(); i++)
	{
		if (!bylo[graf[u][i]] && mac[u][graf[u][i]] && dfs(graf[u][i]))
		{
			mac[u][graf[u][i]]--;
			mac[graf[u][i]][u]++;
			return 1;
		}
	}
	return 0;
}

int main()
{
	scanf("%d%d%d%d", &n, &m, &ma, &fa);
	if (max(fa-ma, ma-fa)!=1)
	{
		printf("-1");
		return 0;
	}
	for (int i=0; i<=25; i++)
	{
		for (int j=0; j<=25; j++)
		{
			tab[i][j]=1;
		}
	}
	for (int i=1; i<=n; i++)
	{
		scanf("%s", &wcz);
		for (int j=1; j<=m; j++)
		{
			if (wcz[j-1]=='.')
			{
				tab[i][j]=0;
			}
		}
	}
	if (ma<fa)
	{
		ma++;
		for (int i=1; i<=ma; i++)
		{
			czys();
			scanf("%d%d%lld", &v.first, &v.second, &t);
			odl[v.first][v.second]=0;
			bfs.push(v);
			bbbfs();
			for (int ii=1; ii<=n; ii++)
			{
				for (int jj=1; jj<=m; jj++)
				{
					if (odl[ii][jj]>=0)
					{
						wek.push_back(make_pair( odl[ii][jj]*t , make_pair( i+1 , 1+ma+(ii-1)*m+jj ) ));
					}
				}
			}
		}
		for (int i=1; i<=fa; i++)
		{
			czys();
			scanf("%d%d%lld", &v.first, &v.second, &t);
			odl[v.first][v.second]=0;
			bfs.push(v);
			bbbfs();
			for (int ii=1; ii<=n; ii++)
			{
				for (int jj=1; jj<=m; jj++)
				{
					if (odl[ii][jj]>=0)
					{
						wek.push_back(make_pair( odl[ii][jj]*t , make_pair( 1+ma+n*m+(ii-1)*m+jj , 1+ma+2*n*m+i ) ));
					}
				}
			}
		}
	}
	else
	{
		
		fa++;
		for (int i=1; i<=1; i++)
		{
			czys();
			scanf("%d%d%lld", &v.first, &v.second, &t);
			odl[v.first][v.second]=0;
			bfs.push(v);
			bbbfs();
			for (int ii=1; ii<=n; ii++)
			{
				for (int jj=1; jj<=m; jj++)
				{
					if (odl[ii][jj]>=0)
					{
						wek.push_back(make_pair( odl[ii][jj]*t , make_pair( i+1 , 1+ma+(ii-1)*m+jj ) ));
					}
				}
			}
		}
		for (int i=1; i<=fa; i++)
		{
			czys();
			scanf("%d%d%lld", &v.first, &v.second, &t);
			odl[v.first][v.second]=0;
			bfs.push(v);
			bbbfs();
			for (int ii=1; ii<=n; ii++)
			{
				for (int jj=1; jj<=m; jj++)
				{
					if (odl[ii][jj]>=0)
					{
						wek.push_back(make_pair( odl[ii][jj]*t , make_pair( 1+ma+n*m+(ii-1)*m+jj , 1+ma+2*n*m+i ) ));
					}
				}
			}
		}
		for (int i=2; i<=ma; i++)
		{
			czys();
			scanf("%d%d%lld", &v.first, &v.second, &t);
			odl[v.first][v.second]=0;
			bfs.push(v);
			bbbfs();
			for (int ii=1; ii<=n; ii++)
			{
				for (int jj=1; jj<=m; jj++)
				{
					if (odl[ii][jj]>=0)
					{
						wek.push_back(make_pair( odl[ii][jj]*t , make_pair( i+1 , 1+ma+(ii-1)*m+jj ) ));
					}
				}
			}
		}
	}
	n1=1+ma+n*m+n*m+fa+1;
	sort(wek.begin(), wek.end());
	for (int i=2; i<=ma+1; i++)
	{
		graf[1].push_back(i);
		graf[i].push_back(1);
		mac[1][i]=1;
	}
	for (int i=1+ma+n*m*2+1; i<=1+ma+n*m*2+fa; i++)
	{
		graf[i].push_back(n1);
		graf[n1].push_back(i);
		mac[i][n1]=1;
	}
	for (int i=1+ma+1; i<=1+ma+n*m; i++)
	{
		graf[i].push_back(i+n*m);
		graf[i+n*m].push_back(i);
		mac[i][i+n*m]=1;
	}
	/*for (int i=1; i<=n1; i++)
	{
		printf("%d\n", i);
		for (int j=0; j<graf[i].size(); j++)
		{
			printf(" %d %d\n", graf[i][j], mac[i][graf[i][j]]);
		}
	}*/
	for (int i=0; i<wek.size(); i++)
	{
		czysb();
		graf[wek[i].second.first].push_back(wek[i].second.second);
		graf[wek[i].second.second].push_back(wek[i].second.first);
		mac[wek[i].second.first][wek[i].second.second]=1;
		//printf("  %d %d\n", wek[i].second.first, wek[i].second.second);
		while(dfs(1))
		{
			wyn++;
			//printf("JEST\n");
			czysb();
		}
		if (wyn==ma)
		{
			printf("%lld", wek[i].first);
			return 0;
		}
	}
	printf("-1");
	return 0;
}
