#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int maxn=320,inf=400000000;
inline int min(const int a,const int b){return (a<b)?a:b;}

int n,m,lim,p;
struct rec{
	int x,y,typ,dp;
	inline void print(){
		printf("(%d,%d) typ=%d,dp=%d\n",x,y,typ,dp);
		return;
	}
	bool operator < (const rec &a)const{
		return typ<a.typ;
	}
}nod[maxn*maxn];

inline bool cmp(const rec &a,const rec &b){return a.x<b.x;}

int cnt[maxn],vis[maxn],tim;

inline void insert(int a,int b){
	while(a<=m){
		if (vis[a]!=tim){
			cnt[a]=b;
			vis[a]=tim;
		}
		else if (cnt[a]>b) cnt[a]=b;
		a+=a&(-a);
	}
	return;
}

inline int ask(int a){
	int ret=inf;
	while(a){
		if (vis[a]==tim) if (cnt[a]<ret) ret=cnt[a];
		a-=a&(-a);
	}
	return ret;
}

inline void work(int lst,int now,int ed){
	tim++;
	sort(nod+lst,nod+now,cmp);
	sort(nod+now,nod+ed,cmp);
	int i=lst,j=now;
	while(j<ed){
		if (i<now&&nod[i].x<=nod[j].x){
			insert(nod[i].y,nod[i].dp-nod[i].x-nod[i].y);
			i++;
		}
		else{
			nod[j].dp=min(nod[j].dp,nod[j].x+nod[j].y+ask(nod[j].y));
			j++;
		}
	}
	return;
}

int main(){
	scanf("%d%d%d",&n,&m,&p);
	for (int i=1;i<=n;i++)
	for (int j=1;j<=m;j++){
		scanf("%d",&nod[++lim].typ);
		nod[lim].x=i;
		nod[lim].y=j;
		nod[lim].dp=inf;
//		nod[lim].print();
	}
	sort(nod+1,nod+1+lim);
	int now=1,lst=1;
	while(nod[now].typ==1){
		nod[now].dp=nod[now].x-1+nod[now].y-1;
//		nod[now].print();
		now++;
	}
	while(now<=lim){
		int ed=now+1;
		while(ed<=lim&&nod[ed].typ==nod[now].typ) ed++;
		work(lst,now,ed);
		for (int i=lst;i<ed;i++) nod[i].y=m-nod[i].y+1;
		work(lst,now,ed);
		for (int i=lst;i<ed;i++) nod[i].x=n-nod[i].x+1;
		work(lst,now,ed);
		for (int i=lst;i<ed;i++) nod[i].y=m-nod[i].y+1;
		work(lst,now,ed);
		for (int i=lst;i<ed;i++) nod[i].x=n-nod[i].x+1;
		lst=now;
		now=ed;
	}
//	for (int i=1;i<=lim;i++) nod[i].print();
	printf("%d",nod[lim].dp);
	return 0;
}