#include<cmath>
#include<cstdio>
#include<cctype>
#include<vector>
#include<cstring>
#include<algorithm>
using namespace std;
inline void rd(int &res){
	char c;res=0;
	while(c=getchar(),!isdigit(c));
	do res=(res<<1)+(res<<3)+(c^48);
	while(c=getchar(),isdigit(c));
}
const int M=305;
int n,m,p,ed,res=-1;
struct node{int x,y;};
vector<node>num[M*M];
int val[2][M][M];
int dp[M][M];
inline void Max(int &a,int b){if(a<b)a=b;}
inline void Min(int &a,int b){if(a==-1||a>b)a=b;}
int main(){
	int a;
	rd(n),rd(m),rd(p);
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++){
			rd(a);
			Max(ed,a);
			num[a].push_back((node){i,j});
		}
	if(n==1&&m==1){puts("0");return 0;}
	memset(val,-1,sizeof(val));
	memset(dp,-1,sizeof(dp));
	for(int i=0;i<num[1].size();i++){
		int x=num[1][i].x,y=num[1][i].y;
		dp[x][y]=x+y;
		for(int i=0;i<m;i++){
			Min(val[1][x][i],abs(y-i)+dp[x][y]);
//			printf("val[%d][%d]=%d %d\n",x,i,val[1][x][i],abs(y-i));
		}
	}
	for(int k=2;k<=ed;k++){
		int t=k&1;
		memset(val[t],-1,sizeof(val[t]));
		for(int i=0;i<num[k].size();i++){
			int x=num[k][i].x,y=num[k][i].y;
			for(int j=0;j<n;j++)
				if(val[t^1][j][y]!=-1)Min(dp[x][y],abs(j-x)+val[t^1][j][y]);
			for(int j=0;j<m;j++)
				Min(val[t][x][j],abs(y-j)+dp[x][y]);
			if(k==p)Min(res,dp[x][y]);
//			printf("dp[%d][%d]=%d\n",x,y,dp[x][y]);
		}
	}
	printf("%d\n",res);
	return 0;
}
