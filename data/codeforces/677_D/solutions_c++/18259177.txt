#include<cstdio>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
#include<cmath>
#include<set>
#include<string>
#include<iostream>
using namespace std;
#define mem(x) memset(x,0,sizeof(x))
#define inf 99999999999999999
#define random(x) (rand()%x)//取一定范围内的随机数
#define ll long long
#define mod 1000000007
#define N 90500
#define lld I64d
#define newnode (node*)malloc(sizeof(node));
struct node
{
	int x,y,d;
	bool operator <(const node&a)const{return d<a.d;}
};
vector<node>dp[N];
int main()
{
	int i,j,l;
	int n,m,k;
	scanf("%d %d %d",&n,&m,&k);
	for(i = 1;i <= n;i ++)
	{
		for(j = 1;j <= m;j ++)
		{
			int y;
			scanf("%d",&y);
			node now;
			now.x=i,now.y=j,now.d=100000000;
			dp[y].push_back(now);
		}
	}
	node now;
	now.x=1,now.y=1,now.d=0;
	dp[0].push_back(now);
	for(i = 0;i <= k;i ++)
	{
		sort(dp[i].begin(),dp[i].end());
		for(j = 0;j <min((int)dp[i].size(),900);j ++)
		{
			for(l = 0;l <dp[i+1].size();l ++)
			{
				dp[i+1][l].d = min(dp[i+1][l].d,dp[i][j].d+abs(dp[i+1][l].x-dp[i][j].x)+abs(dp[i+1][l].y-dp[i][j].y));
			}
		}
	}
	int ans = 99999999;
	for(i = 0;i < dp[k].size();i ++)
	{
		ans = min(ans,dp[k][i].d);
	}
	printf("%d\n",ans);
}