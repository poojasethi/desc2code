#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <string>
#include <math.h>
#include <stdlib.h>
using namespace std;
long long INF=1LL<<62;
int n,m,p,a,x,y,X,Y;
long long ans;
long long dp[309][309];
vector<pair<int,int> > G[90009];
vector<int> g[2][309];
void up(long long &a,long long b)
{
    if(a>b)a=b;
}
int main()
{
    scanf("%d%d%d",&n,&m,&p);
    for(int i=0;i<n;++i)
    {
        for(int j=0;j<m;++j)
        {
            scanf("%d",&a);
            if(a==1)
            {
                g[0][i].push_back(j);
                dp[i][j]=i+j;
            }
            else G[a].push_back(make_pair(i,j));
        }
    }
    int cur=0;
    for(int i=2;i<=p;++i)
    {
        for(int j=0;j<n;++j)g[cur^1][j].clear();
        for(int j=0;j<G[i].size();++j)
        {
            x=G[i][j].first;
            y=G[i][j].second;
            dp[x][y]=INF;
            for(int k=0;k<n;++k)
            {
                a=lower_bound(g[cur][k].begin(),g[cur][k].end(),y)-g[cur][k].begin();
                if(a)
                {
                    Y=g[cur][k][a-1];
                    up(dp[x][y],dp[k][Y]+abs(x-k)+abs(y-Y));
                }
                if(a!=g[cur][k].size())
                {
                    Y=g[cur][k][a];
                    up(dp[x][y],dp[k][Y]+abs(x-k)+abs(y-Y));
                }
            }
            g[cur^1][x].push_back(y);
        }
        cur^=1;
    }
    for(int i=0;i<G[p].size();++i)
    {
        x=G[p][i].first;
        y=G[p][i].second;
        ans=dp[x][y];
    }
    printf("%I64d\n",ans);
    return 0;
}
