
#define MAXN 310UL
#include <cstdio>
#include <vector>
#include <queue>
#include <cmath>
#define INF 1e9

using namespace std;

int n, m, p, bg[MAXN][MAXN], f[MAXN][MAXN], dis[MAXN][MAXN], U[] = {0, 0, 1, -1}, V[] = {1, -1, 0, 0};
bool ins[MAXN][MAXN];

struct ME { int x, y; };

vector <ME> v[MAXN*MAXN];
queue <ME> q;

void Spfa() {
	while(!q.empty()) {
		int x = q.front().x, y = q.front().y;
		q.pop();
		ins[x][y] = false;
		for(int i = 0 ; i < 4 ; ++ i) {
			int nx = x+U[i], ny = y+V[i];
			if(nx>=1&&nx<=n&&ny>=1&&ny<=m&&dis[nx][ny]>dis[x][y]+1) {
				dis[nx][ny] = dis[x][y]+1;
				if(!ins[nx][ny]) ins[nx][ny] = true, q.push((ME){nx, ny});
			}
		}
	}
	return;
}

int Abs(int x) {
	return x>0?x:-x;
}

int main() {
	scanf("%d%d%d", &n, &m, &p);
	for(int i = 1 ; i <= n ; ++ i) {
		for(int j = 1 ; j <= m ; ++ j) {
			scanf("%d", &bg[i][j]), v[bg[i][j]].push_back((ME){i, j});
			f[i][j] = INF;
		}
	}
	for(int i = 0, r = v[1].size() ; i < r ; ++ i) {
		int x = v[1][i].x, y = v[1][i].y;
		f[x][y] = x-1+y-1;
	}
	for(int i = 2 ; i <= p ; ++ i) {
		if(v[i].size()*v[i-1].size()<n*m) {
			for(int j = 0, r1 = v[i-1].size() ; j < r1 ; ++ j) {
				int x2 = v[i-1][j].x, y2 = v[i-1][j].y;
				for(int k = 0, r2 = v[i].size() ; k < r2 ; ++ k) {
					int x = v[i][k].x, y = v[i][k].y;
					f[x][y] = min(f[x][y], f[x2][y2]+Abs(x-x2)+Abs(y-y2));
				}
			}
		} else {
			for(int j = 1 ; j <= n ; ++ j) {
				for(int k = 1 ; k <= m ; ++ k) {
					if(bg[j][k]==i-1) dis[j][k] = f[j][k], q.push((ME){j, k}), ins[j][k] = true;
					else dis[j][k] = INF;
				}
			}
			Spfa();
			for(int j = 0, r = v[i].size() ; j < r ; ++ j) {
				int x = v[i][j].x, y = v[i][j].y;
				f[x][y] = dis[x][y];
			}
		}
	}
	int x = v[p][0].x, y = v[p][0].y;
	printf("%d", f[x][y]);
	//while(1);
	return 0;
}
