#include <iostream>
#include <cstdio>
#include <vector>
#include <cstring>
#include <queue>
#include <algorithm>

using namespace std;

typedef pair < int, int > pii;
const int maxn = 505;
const int inf = 0x3f3f3f3f;

int dp[maxn][maxn];
int rj[maxn][maxn];
int a[maxn][maxn];
int cnt[maxn * maxn];

int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };


vector < pii > v[maxn*maxn];

int main() {
	
	int n,m,p;
	cin >> n >> m >> p;
	
	memset(dp, inf, sizeof(dp));
	
	int x,y;
	for ( int i = 0 ; i < n ; i ++ ) {
		for ( int j = 0 ; j < m ; j ++ ) {
			cin >> a[i][j];
			v[a[i][j]].push_back(pii(i,j));
			cnt[a[i][j]] ++;
			if ( a[i][j] == 1 ) 
				dp[i][j] = i + j;
			if ( a[i][j] == p ) {		
				x = i;
				y = j;
			}
		}
	}
	
	//cout << inf << endl;
	
	for ( int i = 2 ; i <= p ; i ++ ) {
		if ( cnt[i] * cnt[i-1] <= n * m ) {
			
			for ( int j = 0 ; j < v[i].size() ; j ++ ) {
				int sadx = v[i][j].first;
				int sady = v[i][j].second;
				for ( int k = 0 ; k < v[i-1].size() ; k ++ ) {
					int proslix = v[i-1][k].first;
					int prosliy = v[i-1][k].second;
					dp[sadx][sady] = min ( dp[sadx][sady], dp[proslix][prosliy] + abs(sadx - proslix) + abs(sady - prosliy) );
				}
			}
		}
		
		else {
			memset(rj, inf, sizeof(rj));
			queue < pii > q;
			for ( int j = 0 ; j < v[i-1].size() ; j ++ ) {
				rj[v[i-1][j].first][v[i-1][j].second] = dp[v[i-1][j].first][v[i-1][j].second];
				q.push(pii(v[i-1][j].first, v[i-1][j].second));
			}
			while ( !q.empty() ) {
				int tx = q.front().first;
				int ty = q.front().second;
				q.pop();
				for ( int j = 0 ; j < 4 ; j ++ ) {
					int nx = tx + dx[j];
					int ny = ty + dy[j];
					if ( nx >= 0 && ny >= 0 && nx < n && ny < m && rj[nx][ny] > rj[tx][ty] + 1 ) {
						if ( a[nx][ny] == i ) 
							dp[nx][ny] = rj[tx][ty] + 1;
						rj[nx][ny] = rj[tx][ty] + 1;
						q.push(pii(nx,ny));
					}
				}
			}
		}
	}
	
	cout << dp[x][y] << endl;
	
	return 0;
}
