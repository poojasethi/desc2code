#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<string>
#include<iostream>
#include<sstream>
#include<set>
#include<map>
#include<queue>
#include<bitset>
#include<vector>
using namespace std;
typedef pair<int,int> pii;
#define mp make_pair
#define pb push_back 
#define sz(v) (int)(v).size()
#define x first
#define y second

const int N = 310;
int a[N][N], n, m, p, dp[N][N];
vector<pii> r[N*N];
int dist[N][N];
pii move[] = {mp(1,0), mp(0,1), mp(-1,0), mp(0,-1)}; 

int main()
{//freopen("in.txt","r",stdin);
//freopen("out.txt","w",stdout);

	scanf("%d%d%d",&n,&m,&p);
	for(int i=0; i<n; i++)
	for(int j=0; j<m; j++)
	{
		scanf("%d",&a[i][j]);
		r[a[i][j]].pb(mp(i,j));
	}
	
	memset(dp,0x7f,sizeof(dp));
	for(int i=0; i<sz(r[1]); i++) 
		dp[r[1][i].x][r[1][i].y] = r[1][i].x + r[1][i].y;
		
	for(int k=2; k<=p; k++)
	{
		if(sz(r[k]) * sz(r[k-1]) < n * m)
		{
			for(int i=0; i<sz(r[k-1]); i++)
			for(int j=0; j<sz(r[k]); j++)
				dp[r[k][j].x][r[k][j].y] = min(dp[r[k][j].x][r[k][j].y], 
					dp[r[k-1][i].x][r[k-1][i].y] + abs(r[k][j].x - r[k-1][i].x) + abs(r[k][j].y - r[k-1][i].y));
		}
		else
		{
			memset(dist,0x7f,sizeof(dist));
			queue<pii> Q;
			for(int i=0; i<sz(r[k-1]); i++)
			{
				dist[r[k-1][i].x][r[k-1][i].y] = dp[r[k-1][i].x][r[k-1][i].y];
				Q.push(r[k-1][i]);
			}
			while(!Q.empty())
			{
				pii u = Q.front(); Q.pop();
				for(int i=0; i<4; i++)
				{
					pii v = mp(u.x+move[i].x, u.y+move[i].y);
					if(v.x>=0 && v.x<n && v.y>=0 && v.y<m && dist[v.x][v.y] > dist[u.x][u.y] + 1)
					{
						dist[v.x][v.y] = dist[u.x][u.y] + 1;
						Q.push(v);
					}
				}
			}
			for(int j=0; j<sz(r[k]); j++)
				dp[r[k][j].x][r[k][j].y] = dist[r[k][j].x][r[k][j].y];
		}
	}
	printf("%d\n",dp[r[p][0].x][r[p][0].y]);
	return 0;
}
