#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath> 
#include <vector>
using namespace std;
const int maxn = 3e2 + 4;
int ans[maxn][maxn], dis[maxn][maxn], mark[maxn][maxn];
vector<int> node[maxn*maxn];
int n, m, p, x, y;
int main(){
	ios::sync_with_stdio(false);
	int i, j, k, kase;
	memset(mark, -1, sizeof mark);
	memset(ans, 63, sizeof ans);
	memset(dis, 0, sizeof dis);
	cin >> n >> m >> p;
	for (i = 0; i <= p; ++i) node[i].clear();
	for (i = 0; i < n; ++i)
		for (j = 0; j < m; ++j){
			cin >> x;
			node[x].push_back(i*m + j);
		}
	node[0].push_back(0);
	for (i = 0; i <= p; ++i){
		for (j = 0; j < int(node[i].size()); ++j){
			x = node[i][j] / m;
			y = node[i][j] % m;
//			cout << x << ' ' << y << endl;
			if (x == 0 && y == 0 && i != 0) ans[x][y] = 0x3f3f3f3f;
			for (k = 0; k < n; ++k)
				if (mark[k][y] == i - 1) ans[x][y] = min(ans[x][y], dis[k][y] + int(abs(k - x)));
//				cout << ans[x][y] << endl;
		}
		
		for (j = 0; j < int(node[i].size()); ++j){
			x = node[i][j] / m;
			y = node[i][j] % m;
//			cout << x << ' ' << y << ' ' << ans[x][y] << endl;
			for (k = 0; k < m; ++k)
				if (mark[x][k] != i){
					mark[x][k] = i;
					dis[x][k] = ans[x][y] + abs(y - k);
				}
				else dis[x][k] = min(dis[x][k], ans[x][y] + int(abs(y - k)));
		}
//		cout << endl;
	}
//	cout << x << ' ' << y << endl;
	cout << ans[x][y] << endl;
	return 0;
}
