#include<cstdio>
#include<queue>
#include<vector>
#include<cstring>
#include<cstdlib>
#include<iostream>
#include<algorithm>
using namespace std;

const int fx[] = {1,0,0,-1},
	  	  fy[] = {0,1,-1,0};
const int N = 310;
typedef pair<int,int> pii;
vector<pii> e[N * N];
int n,m,p, a[N][N],d[N][N];

bool cmp(pii a, pii b){
	return d[a.first][a.second] < d[b.first][b.second];
}

int main(){
	scanf("%d%d%d",&n,&m,&p);
	for(int i = 1; i <= n; i ++)
		for(int j = 1; j <= m; j ++){
			scanf("%d",&a[i][j]);
			e[a[i][j]].push_back(make_pair(i,j));
			d[i][j] = 1e9;
			if (a[i][j] == 1) d[i][j] = i + j - 2;
		}
	
	int x, y, tx, ty;
	for(int i = 2; i <= p; i ++){
		sort(e[i - 1].begin(), e[i - 1].end(), cmp);
		for(int j = 0; j < e[i].size(); j ++){
			x = e[i][j].first; y = e[i][j].second;
			for(int k = 0; k < min(n + m + 100, (int)e[i - 1].size()); k ++){
				tx = e[i - 1][k].first; ty = e[i - 1][k].second;
				d[x][y] = min(d[x][y], d[tx][ty] + abs(tx - x) + abs(ty - y));
			}
		}
	}
	tx = e[p][0].first, ty = e[p][0].second;
	printf("%d\n",d[tx][ty]);
	return 0;
}
