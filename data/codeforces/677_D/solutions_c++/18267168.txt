#include<stdio.h>
#include<vector>
#include<math.h>
#include<iostream>
#include<algorithm>
#include<string.h>
#include<stdlib.h>
#include<queue>
using namespace std;
int xx[4]={0,0,1,-1},yy[4]={1,-1,0,0};
struct node
{
	int l,r;
};
vector<node>vt[99999];
int num[99999];
int dp[333][333],dis[333][333],vis[333][333];
int main()
{
	int n,m,k,i,j,z; 
    scanf("%d%d%d",&n,&m,&k);
    memset(dp,9999999,sizeof(dp));
    for(i=1;i<=n;i++)
    {
    	for(j=1;j<=m;j++)
    	{
	    	int x;
			scanf("%d",&x);
	        node a;
	        a.l=i;
	        a.r=j;
	        vt[x].push_back(a);
	        if(x==1)dp[i][j]=i+j-2;
		}
    }
    for(i=1;i<=k;i++)
    num[i]=vt[i].size();
    int level=sqrt(n*m);
    int no=1;
    for(i=1;i<k;i++)
    {
    	if(num[i]<=level){
	        for(j=0;j<num[i+1];j++)
			for(z=0;z<num[i];z++)
			dp[vt[i+1][j].l][vt[i+1][j].r]=min(dp[vt[i+1][j].l][vt[i+1][j].r],dp[vt[i][z].l][vt[i][z].r]+abs(vt[i+1][j].l-vt[i][z].l)+abs(vt[i][z].r-vt[i+1][j].r));
	    }
	    else 
	    {
    		no++;
			memset(dis,9999999,sizeof(dis));
    		queue<node>Q;
			for(j=0;j<num[i];j++)
    		{
		    	dis[vt[i][j].l][vt[i][j].r]=dp[vt[i][j].l][vt[i][j].r];
		        Q.push(vt[i][j]);
			}
			while(!Q.empty())
			{
				node now=Q.front();
				Q.pop();
				node next;
				vis[now.l][now.r]=0;
				for(j=0;j<4;j++)
				{
					next.l=now.l+xx[j];
					next.r=now.r+yy[j]; 	
				    if(next.l<1||next.l>n||next.r<1||next.r>m)continue;
				    if(dis[next.l][next.r]>dis[now.l][now.r]+1)
				  {
					  dis[next.l][next.r]=dis[now.l][now.r]+1;
					  if(vis[next.l][next.r]<no)
					 {
						vis[next.l][next.r]=no;
						Q.push(next);
					 }
				  }
				}
			}
		    for(j=0;j<num[i+1];j++)
		    dp[vt[i+1][j].l][vt[i+1][j].r]=dis[vt[i+1][j].l][vt[i+1][j].r];
		    
    	}
    }
    printf("%d\n",dp[vt[k][0].l][vt[k][0].r]);
} 