// Bismillahirrahmanirrahim
#include <bits/stdc++.h>
using namespace std;

typedef long long int Lint;
typedef pair < int , int > pii;
typedef pair < int , pii > piii;

#define foreach(_i,x)  for(__typeof(x.begin()) _i=x.begin() ; _i != x.end() ; _i++)
#define yeral() (struct node *)calloc(1,sizeof(struct node))
#define bug printf("#start#\n")
#define bug2 printf("#end#\n")
#define all(x) x.begin(),x.end()
#define mid (l/2+r/2+(l%2&&r%2))
#define pb push_back
#define mp make_pair
#define sc second
#define ft first

inline int read(){ int _x; scanf("%d",&_x); return _x; }

const int INF  = (int) 1e9;
const int mod  = (int) 1e9+7;
const int maxn = (int) 305;
const int logn = 20;
const int sqrtn = 1e3+5;

int N,M,P,q[maxn][maxn];
set < piii > pq[maxn*maxn];
vector < pii > v[maxn*maxn];
bool used[maxn][maxn];

int dis ( int x , int y , int a , int b ) {
	return abs(x-a)+abs(y-b);
}

int main() {
	
	cin >> N >> M >> P;
	
	for ( int i = 1 ; i <= N ; i++ )
		for ( int j = 1 ; j <= M ; j++ ) {
			q[i][j] = read();
			v[q[i][j]].pb ( mp ( i,j ) );
		}
		
	pq[0].insert ( mp ( 0 , mp(1,1) ) );
	
	for ( int i = 1 ; i <= P ; i++ ) {
		int best = INF;
		for ( int j = 0 ; j < v[i].size() ; j++ ) {
			int minn = INF;
			foreach(it,pq[i-1]) {
				minn = min ( minn , it->ft + dis(v[i][j].ft,v[i][j].sc,it->sc.ft,it->sc.sc) );
			}
			//~ if ( best + N + M < minn )
				//~ continue;
			best = min ( best , minn );
			pq[i].insert ( mp ( minn , mp(v[i][j].ft,v[i][j].sc) ) );
			if ( pq[i].size() > M+N ) {
				set < piii > :: iterator it;
				it = pq[i].end();
				it--;
				pq[i].erase(it);
			}
		}
	}
	
	printf("%d\n",pq[P].begin()->ft);
	
	return 0;
}
