#include <iostream>
#include <cstdio>
#include <cmath>

using namespace std;

struct node{
	node *next;
	int i,j,d;
}*ok[90001];

struct edge{
	int i,j,next;
}e[500001];

const int infi=2100000001;
int n,m,p,tot;
int cnt[90001],box[601];
int d[301][301];
bool vis[301][301];

void addn(int x,int i,int j,int dist){
	node *p=new node;
	p->i=i,p->j=j,p->d=dist,p->next=ok[x];
	ok[x]=p;
}

void adde(int cur,int i,int j){
	tot++;
	e[tot].i=i,e[tot].j=j,e[tot].next=box[cur];
	box[cur]=tot;
}

int main(){
	scanf("%d%d%d",&n,&m,&p);
	for (int i=1;i<=n;i++)
		for (int j=1;j<=m;j++){
			int x;
			scanf("%d",&x);
			if (x==1) addn(x,i,j,i+j-2); else addn(x,i,j,0);
			cnt[x]++;
		}
	for (int i=2;i<=p;i++){
		node *t;
		if (cnt[i-1]*cnt[i]<=n*m){
			t=ok[i];
			while (t){
				t->d=infi;
				node *tt=ok[i-1];
				while (tt){
					int cur=tt->d+abs(t->i-tt->i)+abs(t->j-tt->j);
					t->d=min(t->d,cur);
					tt=tt->next;
				}
				t=t->next;
			}
			continue;
		}
		int mini=infi;
		t=ok[i-1];
		while (t){
			if (t->d<mini)
				mini=t->d;
			t=t->next;
		}
		tot=0;
		for (int j=0;j<=n+m-2;j++)
			box[j]=0;
		t=ok[i-1];
		while (t){
			int cur=t->d-mini;
			if (cur<=n+m-2)
				adde(cur,t->i,t->j);
			t=t->next;
		}
		for (int j=1;j<=n;j++)
			for (int k=1;k<=m;k++)
				vis[j][k]=false;
		for (int j=0;j<=n+m-2;j++)
			for (int k=box[j];k;k=e[k].next){
				int x=e[k].i,y=e[k].j;
				if (!vis[x][y]){
					vis[x][y]=true;
					d[x][y]=j;
					if (x!=1&&!vis[x-1][y]) adde(j+1,x-1,y);
					if (x!=n&&!vis[x+1][y]) adde(j+1,x+1,y);
					if (y!=1&&!vis[x][y-1]) adde(j+1,x,y-1);
					if (y!=m&&!vis[x][y+1]) adde(j+1,x,y+1);
				}
			}
		t=ok[i];
		while (t){
			t->d=d[t->i][t->j]+mini;
			t=t->next;
		}
	}
	printf("%d\n",ok[p]->d);
	return 0;
}
