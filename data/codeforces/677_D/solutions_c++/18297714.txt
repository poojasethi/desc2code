#include<stdio.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
#define M 305
struct node{
	int x,y;
};
vector<node>P[M*M];
int n,m,K,X,Y,mp[M][M],dp[M][M],L[2][M][M],R[2][M][M];
void Min(int &a,int b){
	if(a==-1||a>b)a=b;
}
int MIN(int a,int b){
	if(a==-1)return b;
	if(b==-1)return a;
	return min(a,b);
}
int main(){
	scanf("%d%d%d",&n,&m,&K);
	int cur=0;
	memset(dp,-1,sizeof(dp));
	memset(L[cur],-1,sizeof(L[cur]));
	memset(R[cur],-1,sizeof(R[cur]));
	memset(L[cur^1],-1,sizeof(L[cur]));
	memset(R[cur^1],-1,sizeof(R[cur]));
	for(int i=1;i<=n;++i)
		for(int j=1;j<=m;++j)
			scanf("%d",&mp[i][j]);
	for(int i=1;i<=n;++i)
		for(int j=1;j<=m;++j){
			node tmp;
			tmp.x=i;tmp.y=j;P[mp[i][j]].push_back(tmp);
			if(mp[i][j]==1){
				dp[i][j]=i+j-2;
				L[cur][i][j]=dp[i][j];R[cur][i][j]=dp[i][j];
				for(int k=1;k<j;++k)
					Min(R[cur][i][k],j-k+dp[i][j]);
				for(int k=j+1;k<=m;++k)
					Min(L[cur][i][k],k-j+dp[i][j]);
			}
			if(mp[i][j]==K){X=i;Y=j;}
		}
	for(int i=2;i<=K;++i){
		cur^=1;
		if(i>2){
			for(int j=0;j<P[i-2].size();++j){
				node tmp=P[i-2][j];
				int x=tmp.x;
				for(int k=1;k<=m;++k){
					L[cur][x][k]=-1;
					R[cur][x][k]=-1;
				}
			}
		}
		for(int j=0;j<P[i].size();++j){
			node tmp=P[i][j];
			int x=tmp.x,y=tmp.y;
			for(int k=1;k<=x;++k){
				if(L[cur^1][k][y]==-1&&R[cur^1][k][y]==-1)continue;
				Min(dp[x][y],x-k+MIN(L[cur^1][k][y],R[cur^1][k][y]));
			}
			for(int k=x+1;k<=n;++k){
				if(L[cur^1][k][y]==-1&&R[cur^1][k][y]==-1)continue;
				Min(dp[x][y],k-x+MIN(L[cur^1][k][y],R[cur^1][k][y]));
			}
			for(int k=1;k<=y;++k)
				Min(R[cur][x][k],y-k+dp[x][y]);
			for(int k=y+1;k<=m;++k)
				Min(L[cur][x][k],k-y+dp[x][y]);
		}
	}
	printf("%d",dp[X][Y]);
	return 0;
}