#include <bits/stdc++.h>
using namespace std;

int n, m, p;
int g[305][305];
vector<int> fast[301*301];
int dp[305][305];

void init()
{
	memset(dp, -1, sizeof(dp));
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			fast[g[i][j]].push_back(j*n*m + i*m + j);
			for (int k = j+1; k < m; k++)
			{
				if (g[i][k] == g[i][j])
					break;
				fast[g[i][j]].push_back(k*n*m + i*m + j);
			}
			for (int k = j-1; k >= 0; k--)
			{
				if (g[i][k] == g[i][j])
					break;
				fast[g[i][j]].push_back(k*n*m + i*m + j);
			}
		}
	}
	for (int i = 1; i <= p; i++)
		sort(fast[i].begin(), fast[i].end());
}

int sol(int i, int j)
{
	if (dp[i][j] != -1)
		return dp[i][j];
	if (g[i][j] == p)
		return dp[i][j] = 0;
	dp[i][j] = 1000000000;
	int mn = 1000000000;
	int start = j*n*m;
	int end = (j+1)*n*m;
	int l = lower_bound(fast[g[i][j]+1].begin(), fast[g[i][j]+1].end(), start) - fast[g[i][j]+1].begin();
	for (int k = l; k < fast[g[i][j] + 1].size(); k++)
	{
		int x, y;
		int val = fast[g[i][j] + 1][k];
		if (val >= end)
			break;
		val -= start;
		y = val % m;
		x = val / m;
		mn = min(abs(x-i) + abs(y - j) + sol(x, y) , mn);
	}
	return dp[i][j] = mn;
}

int main()
{
	scanf("%d %d %d", &n, &m, &p);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			scanf("%d", &g[i][j]);
	init();
	int mn = 1000000000;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			if (g[i][j] == 1)
				mn = min(mn, i+j + sol(i, j));
	cout<<mn<<endl;
}