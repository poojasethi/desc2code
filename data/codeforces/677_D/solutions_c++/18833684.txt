#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <cstdlib>
#include <algorithm>

using namespace std;

const int INF = 1e9;
const int MAXN = 300 + 10; 

int n, m, p;

struct Node {
	int x, y, w;
	bool operator < (const Node &rhs) const {
		return w < rhs.w;
	}
	Node (int _x = 0, int _y = 0, int _w = 0) : x(_x), y(_y), w(_w) {}
};

vector <Node> ls[MAXN * MAXN];

int dist(int x1, int y1, int x2, int y2) {
	return abs(x1 - x2) + abs(y1 - y2);
}

int main() {
	scanf("%d%d%d", &n, &m, &p);
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= m; ++j) {
			int x;
			scanf("%d", &x);
			ls[x].push_back(Node(i, j, INF));
		}
	for (int i = 0; i < ls[1].size(); ++i)
		ls[1][i].w = ls[1][i].x  + ls[1][i].y - 2;
	sort(ls[1].begin(), ls[1].end());
	for (int i = 2; i <= p; ++i) {
		for (int j = 0; j < ls[i].size(); ++j)
			for (int k = 0; k < min(n + m, (int)ls[i - 1].size()); ++k)
				ls[i][j].w = min(ls[i][j].w, ls[i - 1][k].w + dist(ls[i][j].x, ls[i][j].y, ls[i - 1][k].x, ls[i - 1][k].y));
		sort(ls[i].begin(), ls[i].end());
	}
	printf("%d\n", ls[p][0].w);
	return 0;
}
