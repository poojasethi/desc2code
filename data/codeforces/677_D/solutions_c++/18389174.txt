#include <bits/stdc++.h>
#define maxn 305
using namespace std;
typedef long long ll;

struct Node{
	Node(){
	}
	Node(int a, int b){
		x = a;
		y = b;
	}
	friend bool operator < (const Node&a, const Node&b){
		return a.d > b.d;
	}
	int x, y, d;
};
int dis[maxn][maxn], vis[maxn][maxn], num[maxn][maxn];
int cnt[maxn*maxn];
int n, m, p;
vector<Node> v[maxn*maxn];
int dir[4][2] = {1, 0, -1, 0, 0, 1, 0, -1};
void bfs(int s, int e){
	
	priority_queue<Node> q;
	for(int i = 0; i < cnt[s]; i++){
		Node a = v[s][i];
		a.d = dis[a.x][a.y];
		q.push(a);
		vis[a.x][a.y] = 1;
	}
	int kk = cnt[e];
	while(kk){
		
		Node c = q.top();
		q.pop();
	    for(int i = 0; i < 4; i++){
	    	int x = c.x + dir[i][0];
	    	int y = c.y + dir[i][1];
	    	if(x >= 0 && x < n && y >= 0 && y < m && !vis[x][y]){
	    		Node u = Node(x, y);
	    		u.d = c.d + 1;
	    		vis[x][y] = 1;
	    		if(num[x][y] == e){
	    			dis[x][y] = u.d;
	    			kk--;
	    		}
	    		q.push(u);
	    	}
	    }
	}
}
int main(){
	
//	freopen("in.txt", "r", stdin);
	scanf("%d%d%d", &n, &m, &p);
	for(int i = 0; i < n; i++)
	  for(int j = 0; j < m; j++){
	  	scanf("%d", num[i]+j);
	    v[num[i][j]].push_back(Node(i, j));
		cnt[num[i][j]]++;	
	  }
	for(int i = 0; i < cnt[1]; i++){
		int x = v[1][i].x;
		int y = v[1][i].y;
		dis[x][y] = x + y;
	}
	for(int i = 2; i <= p; i++){
		if(cnt[i]*cnt[i-1] <= n*m*100){
			for(int h1 = 0; h1 < cnt[i-1]; h1++){
				Node &a = v[i-1][h1];
				for(int h2 = 0; h2 < cnt[i]; h2++){
					Node &b = v[i][h2];
					int d = abs(a.x-b.x) + abs(a.y-b.y) + dis[a.x][a.y];
					if(dis[b.x][b.y] == 0){
						dis[b.x][b.y] = d;
					}
					else
					 dis[b.x][b.y] =  dis[b.x][b.y] < d ? dis[b.x][b.y] : d;
				}
			}
			continue;
		}
	    memset(vis, 0, sizeof(vis));
		bfs(i-1, i);	
	}
	Node &a = v[p][0];
	printf("%d\n", dis[a.x][a.y]);
	
	return 0; 
} 
