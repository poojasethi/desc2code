#include <iostream>
#include <vector>
#define pb push_back
using namespace std;
const int maxn = 110;
vector<int> tour,ne;
bool mat[maxn][maxn];
int n,m,w,t_path;
void dfs(int x,int tool) {
	if(tool == t_path) { int j = tour[tool+1]+1; while(!mat[x][j]) j++; if(j > n) return; mat[x][j] = mat[j][x] = 0; dfs(j,tool+1); 
	for(int i = j ; i <= n ; i++) if(mat[x][i]) {
		mat[x][i] = mat[i][x] = 0;
		dfs(i,tool+1);
	} }
	else {	
	for(int i = 1 ; i <= n ; i++) if(mat[x][i]) {
		mat[x][i] = mat[i][x] = 0;
		dfs(i,tool+1);
	} }
	ne.pb(x);
}
int main () {
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for(int i = 0 ; i <= m ; i++) { cin >> w; if(i > 0) { mat[w][tour[i-1]] = mat[tour[i-1]][w] = 1; } tour.pb(w); }
	for(int i = m-1 ; i >= 0 ; i--) { 
		for(int j = 1; j <= i; j++) mat[tour[j]][tour[j-1]] = mat[tour[j-1]][tour[j]] = 0;
		t_path = i;
		ne.clear();
		dfs(tour[i],i);
		if(ne.size() == m - i + 1) { for(int j = 0 ; j < i ; j++) cout << tour[j] << ' '; for(int j = ne.size() -1 ; j >= 0 ; j--) cout << ne[j] << ' '; cout << endl; return 0; } 
		for(int j = 0; j < m; j++) mat[tour[j]][tour[j+1]] = mat[tour[j+1]][tour[j]] = 1;
	}
	cout << "No solution\n"; return 0;
}
