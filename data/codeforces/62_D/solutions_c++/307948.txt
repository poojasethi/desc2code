#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int maxn = 105;
const int maxe = 2005;

int mat[maxn][maxn] , data[maxe] , path[maxe] , n , m , ans;
bool used[maxn][maxn];

void init() {
	scanf( "%d%d" , &n , &m );
	for ( int i = 0; i <= m; i++ ) scanf( "%d" , &data[i] );
	for ( int i = 0; i < m; i++ ) {
		int x = data[i] , y = data[i+1];
		mat[x][++mat[x][0]] = y;
		mat[y][++mat[y][0]] = x;
	}
	for ( int i = 1; i <= n; i++ ) sort( mat[i]+1 , mat[i]+mat[i][0]+1 );
}

void dfs( int x , int depth , bool flag ) {
	if ( depth == m+1 ) {
		if ( !flag ) ans = 1;
	} else {
		for ( int i = 1; i <= mat[x][0]; i++ ) {
			int y = mat[x][i];
			if ( used[x][y] || ( flag && y < data[depth] ) ) continue;
			used[x][y] = used[y][x] = 1;
			path[depth] = y;
			dfs( y , depth+1 , flag && y == data[depth] );
			if ( ans ) return;
			used[x][y] = used[y][x] = 0;
		}
	}
}

int main() {
	init();
	path[0] = data[0];
	dfs( data[0] , 1 , 1 );
	if ( ans ) {
		for ( int i = 0; i < m; i++ ) printf( "%d " , path[i] );
		printf( "%d\n" , path[m] );
	} else printf( "No solution\n" );
}
