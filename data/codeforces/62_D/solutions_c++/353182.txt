#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<cstring>
using namespace std;
int n,m;
vector<int>ooxx[110];
int path[2010];
bool flag;
int ans[2010];
bool used[110][110];
void dfs(int now,int dep,bool mark)
{
	if(flag)
		return;
	if(dep == m+1)
	{
		if(mark)
			flag=true;
		return;
	}
	int len=ooxx[now].size();
	for(int i=0;i<len;i++)
	{
		int v=ooxx[now][i];
		if(used[now][v])
			continue;
		if(v < path[dep] && !mark)
			continue;
		used[now][v]=used[v][now]=true;
		ans[dep]=v;
		if(mark)
			dfs(v,dep+1,true);
		else if(v > path[dep])
			dfs(v,dep+1,true);
		else
			dfs(v,dep+1,false);
		if(flag)
			return;
		used[now][v]=used[v][now]=false;
	}
}
int main()
{
	cin >> n >> m;
	for(int i=1;i<=n;i++)
		ooxx[i].clear();
	cin >> path[0];
	for(int i=1;i<=m;i++)
	{
		cin >> path[i];
		ooxx[path[i-1]].push_back(path[i]);
		ooxx[path[i]].push_back(path[i-1]);
	}
	for(int i=1;i<=n;i++)
		sort(ooxx[i].begin(),ooxx[i].end());
	flag=false;
	memset(used,false,sizeof(used));
	ans[0]=path[0];
	dfs(path[0],1,false);
	if(flag)
	{
		for(int i=0;i<m;i++)
			printf("%d ",ans[i]);
		printf("%d\n",ans[m]);
	}
	else
		printf("No solution\n");
	return 0;
}
