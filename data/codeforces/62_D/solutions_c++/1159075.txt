#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <map>
#include <queue>
#include <string>
#include <algorithm>
using namespace std;

int mp[120][120];
int ret[2200];
int num[2200];
int n,m;

bool dfs(int u,int dep,int f)
{
    ret[dep]=u;
    if(dep==m)
    {
         if(u==num[0]&&f==1)
           return true;
         else
           return false;
    }
    int start;
    if(f==0)
      start=num[dep+1];
    else if(f==1)
      start=1;
    int nf;
    for(int v=start;v<=n;v++)
    {
         if(!mp[u][v])
           continue;
         mp[u][v]--;
         mp[v][u]--;
         if(f==1||v>start)
           nf=1;
         else
           nf=0;
         if(dfs(v,dep+1,nf))
           return true;
         mp[u][v]++;
         mp[v][u]++;
    }
    return false;


}

int main()
{

  while(scanf("%d%d",&n,&m)==2)
  {
       memset(mp,0,sizeof(mp));
       for(int i=0;i<=m;i++)
         {
              scanf("%d",&num[i]);

         }
       for(int i=0;i<m;i++)
       {
           mp[num[i]][num[i+1]]++;
           mp[num[i+1]][num[i]]++;
       }
       if(dfs(num[0],0,0))
         {
              for(int i=0;i<=m;i++)
              {
                   if(i==m)
                     printf("%d\n",ret[i]);
                   else
                     printf("%d ",ret[i]);
              }
         }
       else
         printf("No solution\n");
  }
  return 0;
}

		      	 					       				