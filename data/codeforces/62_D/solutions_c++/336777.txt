#include <stdio.h>
#include <string.h>
int path[2005],newpath[2005];
bool can[105][105],can2[105][105];
int n,m,cc;
void build_euler(int node){
    for(int i=1;i<=n;++i){
        if(can2[node][i]){
            can2[node][i]=can2[i][node]=false;
            build_euler(i);
        }
    }
    newpath[cc++]=node;
}
bool next_euler(int node,int pos){
    if(path[pos]!=node){
		cc=0;
        memcpy(can2,can,sizeof can);
        build_euler(node);
        return (cc+pos)==m+1;
    }
    if(pos==m) return false;
    for(int i=path[pos+1];i<=n;++i){
        if(can[node][i]){
            can[node][i]=can[i][node]=false;
            if(next_euler(i,pos+1)){
                newpath[cc++]=node;
                return true;
            }
            can[node][i]=can[i][node]=true;
        }
    }
    return false;
}
int main(){
    int i;
    scanf("%d%d",&n,&m);
    scanf("%d",&path[0]);
    for(i=1;i<=m;++i){
        scanf("%d",&path[i]);
        can[path[i-1]][path[i]]=can[path[i]][path[i-1]]=true;
    }
    if(next_euler(path[0],0)){
        for(i=m;i>0;--i) printf("%d ",newpath[i]);
        printf("%d\n",newpath[0]);
    }
    else printf("No solution\n");
    return 0;
}
