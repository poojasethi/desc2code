#include<cstdio>
#include<algorithm>
#include<iostream>
#include<cmath>
#include<cstring>
#include<queue>
#include<vector>
#include<string>
#include<map>
using namespace std;
#define pb push_back
#define LL __int64
#define N 2010
#define INF 1<<30

int n,m;
int l[N],ans[N];
int mpt[N][N];

bool dfs(int u,bool flag,int edge) {
    if(edge==m) {
        ans[m]=u ;
        return flag ;
    }
    int v;
    ans[edge]=u;
    v=l[edge+1] ;
    if(flag)
        v=1 ;
    for(int i=v;i<=n;i++) {
        if(!mpt[u][i]) continue ;
        mpt[u][i]=mpt[i][u]=0 ;
        if(i>l[edge+1])
            flag=1 ;
        bool ok=dfs(i,flag,edge+1) ;
        if(ok) return true ;
        mpt[u][i]=mpt[i][u]=1 ;
    }
    return 0;
}

int main() {
    //freopen("C:\\Users\\F\\Desktop\\in.txt", "r", stdin);
    //freopen("C:\\Users\\F\\Desktop\\out.txt", "w", stdout);
    while(~scanf("%d%d",&n,&m)) {
        memset(mpt,0,sizeof(mpt));
        scanf("%d",&l[0]);
        for(int i=1;i<=m;i++) {
            scanf("%d",&l[i]);
            mpt[l[i]][l[i-1]] = 1 ;
            mpt[l[i-1]][l[i]] = 1 ;
        }
        bool check=dfs(l[0],0,0);
        if(!check){
            printf("No solution\n");
        }else{
            for(int i=0;i<=m;i++) {
                if(i!=0)printf(" ");
                printf("%d",ans[i]);
            }
            printf("\n");
        }
    }
    return 0;
}
