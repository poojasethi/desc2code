#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<set>
#define rep(i,n) for(int i=0;i<n;i++)
#define fr(i,c) for(__typeof (c.begin()) i=c.begin(); i!=c.end(); i++)
#define all(c) (c).begin(), (c).end()
#define mp make_pair
#define pb push_back
using namespace std;

typedef vector<int> vi;
typedef long long ll;

int n,m;
vector<vi> g;
int ans[2001],in[2001];
set<pair<int,int> > used;

bool dfs(int c,int d,bool greater){
  ans[d]=c;
  if(d==m)return c==in[0]&&greater;
  
  rep(i,g[c].size())if(!used.count(mp(c,g[c][i]))&&!used.count(mp(g[c][i],c))
    &&(greater||g[c][i]>=in[d+1])){
    bool ng=greater;
    if(g[c][i]>in[d+1])ng=1;
    used.insert(mp(c,g[c][i]));
    if(dfs(g[c][i],d+1,ng))return 1;
    used.erase(mp(c,g[c][i]));
  }
  return 0;
}
bool solve(){
  used.clear();
  if(dfs(in[0],0,0))return 1;
  
  int a=in[0]+1;
  for(;a<n;a++)if(g[a].size()%2)break;
  if(a==n)return 0;
  
  used.clear();
  return dfs(a,0,1);
  if(in[0]==n-1)return 0;
  
  used.clear();
  return dfs(in[0]+1,0,1);
}
void run(){
  cin>>n>>m;
  g=vector<vi>(n);
  int p,c;
  rep(i,m+1){
    cin>>c; in[i]=--c;
    if(i)g[c].pb(p), g[p].pb(c);
    p=c;
  }
  rep(i,n)sort(all(g[i]));
  
  if(solve()){
    rep(i,m+1)cout<<ans[i]+1<<(i==m?"\n":" ");
  }
  else cout<<"No solution"<<endl;
}
int main(){
#ifndef ONLINE_JUDGE
  rep(i,3)
#endif
    run();
  return 0;
}
