#include <iostream>
#include <vector>

using namespace std;
const int MAX=100+50;
int a[MAX][MAX];
int m,n;
bool mk[MAX];
vector <int> arr;

void dfs(int v)
{
    mk[v]=true;
    for(int i=0;i<n;i++)
        if(a[v][i]>0 && mk[i]==false)
            dfs(i);
}

bool notbridge(int f,int e)
{
    for(int i=0;i<n;i++)
        mk[i]=0;
    a[f][e]--;
    a[e][f]--;
    dfs(e);
    for(int i=0;i<n;i++) 
        for(int j=0;j<n;j++) 
            if(a[i][j]!=0 && mk[i]==0)
            {
                a[f][e]++;
                a[e][f]++;
                return 0;
            }
    a[f][e]++;
    a[e][f]++;
    return 1;    
}

void cycle(int x,int b)
{
    cout<<b+1<<' ';
    a[x][b]--;
    a[b][x]--;
    for(int i=0;i<n;i++)
        if(a[b][i]!=0 && notbridge(b,i))
        {
            cycle(b,i);
            return;
        }
    return;
}

int main()
{
    cin>>n>>m;
    for(int i=0;i<m+1;i++)
    {
        int in;
        cin>>in;
        arr.push_back(in-1);
    }
    for(int i=arr.size()-2;i>=0;i--) 
    {
        int x=arr[i],y=arr[i+1];
        a[x][y]++;
        a[y][x]++;
        for(int j=y+1;j<n;j++) 
            if(a[x][j]!=0 && notbridge(x,j))
            {
                for(int k=0;k<=i;k++)
                    cout<<arr[k]+1<<' ';
                cycle(x,j);
                cout<<endl;
                return 0;
            }
    }
    cout<<"No solution\n";
    return 0;
}
