from collections import deque
def readint(): return int(raw_input())
def readarray(foo): return [foo(x) for x in raw_input().split()]


def ok(to, s, t):
	if s == t:
		if len(to[s]) % 2 != 0: return False
	else:
		if len(to[s]) % 2 == 0: return False

	left = 0
	for u in xrange(0, len(to)):
		l = len(to[u])
		if u != s and u != t and l % 2 != 0: return False
		left += 0 if l == 0 else 1

	if left == 0: return s == t

	used = set()
	q = deque([s])
	used.add(s)
	while q:
		u = q.popleft()
		for v in to[u]:
			if v in used: continue
			used.add(v)
			q.append(v)
	return len(used) == left
	

def reconstruct(to, u, t):
	while u != t or len(to[u]) > 0:
		found = False
		for v in sorted(to[u]):
			to[u].remove(v)
			to[v].remove(u)
			if not ok(to, v, t):
				to[u].add(v)
				to[v].add(u)
				continue
			yield v
			found = True
			u = v
			break
		assert found
		

def run():
	n, m = readarray(int)
	a = readarray(lambda x: int(x) - 1)
	to = [set() for u in xrange(n)]
	t = a[0]
	for i in xrange(m - 1, -1, -1):
		u, v = a[i:i + 2]
		to[u].add(v)
		to[v].add(u)
		for w in sorted(to[u]):
			if w <= v: continue
			to[u].remove(w)
			to[w].remove(u)
			if not ok(to, w, t):
				to[u].add(w)
				to[w].add(u)
				continue
			res = a[:i + 1] + [w] + list(reconstruct(to, w, t))
			return " ".join([str(x + 1) for x in res])
	return "No solution"
print run()

