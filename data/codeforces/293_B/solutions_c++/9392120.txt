#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 15;
const int MOD = int(1e9 + 7);

int g[N][N], a[N][N];
int f[N][N][N], d[N];
int ways[N];
int n, m, k, ans;

void dfs(int x, int y, int z)
{
	if(x>n){ (ans+=ways[z])%=MOD; return; }
	int t = g[x-1][y] | g[x][y-1], X(x), Y(y+1);
	if(Y>m) X++, Y=1;
	
	if(a[x][y])
	{
		if(!(t & (1<<a[x][y])))
		{
			g[x][y] = t | (1<<a[x][y]);
			dfs(X, Y, z);
		}
	}
	else
	{
		for(int i=1; i<=k; i++)
		if(!(t & (1<<i)) && (i<=z || (i>d[0] && !f[i][x][y])))
		{
			g[x][y] = t | (1<<i);
			dfs(X, Y, z + (i==z));
		}
	}
}

int main()
{
	scanf("%d%d%d", &n, &m, &k);
	if(n+m-1 > k) return puts("0"), 0;
	
	d[0] = k;
	for(int i=1; i<=n; i++) for(int j=1; j<=m; j++)
	{
		scanf("%d", &a[i][j]);
		if(a[i][j])
		{
			if(!d[a[i][j]]) d[a[i][j]] = d[0]--;
			a[i][j] = d[a[i][j]];
		}
	}
	
	for(int c=d[0]+1; c<=k; c++)
	for(int i=n; i; i--) for(int j=m; j; j--)
	f[c][i][j] = f[c][i+1][j] || f[c][i][j+1] || (a[i][j]==c);
	
	ways[1] = 1;
	for(int i=1; i<=d[0]; i++) ways[i+1] = ways[i] * (d[0]-i+1);
	
	ans = 0;
	dfs(1, 1, 1);
	printf("%d\n", ans);
	
	return 0;
}
