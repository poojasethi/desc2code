#include <cstdio>
#include <algorithm>
inline unsigned int getuint(){
    char w=getchar();
    while (w<'0'||'9'<w) w=getchar();
    unsigned int ans=0;
    for (;'0'<=w&&w<='9';w=getchar()) ans=ans*10+w-'0';
    return ans;
}
const int mod=1000000007;
inline void inc(int &a, const int &b){if ((a+=b)>=mod) a-=mod;}
std::pair<int, int> a[233];
int n, m, k, q;
int map[15][15], cnt[15];
bool ok(){
    int minpos[15];
    for (int i=1;i<=k;i++) minpos[i]=m+1;
    for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) if (map[i][j]) if (minpos[map[i][j]]<=j) return false; else minpos[map[i][j]]=j;
    return true;
}
int dfs(int now){
    if (!ok()) return 0;
    if (now>q) return 1;
    int x=a[now].first, y=a[now].second;
    if (map[x][y]) return dfs(now+1);
    int ans=0, tmp=-1;
    for (int i=1;i<=k;cnt[i++]--) if (cnt[map[x][y]=i]++) inc(ans, dfs(now+1)); else if (~tmp) inc(ans, tmp); else inc(ans, tmp=dfs(now+1));
    map[x][y]=0;
    return ans;
}
int main(){
    //freopen("ex.in", "r", stdin);
    n=getuint(), m=getuint(), k=getuint();
    if (k<n+m-1) return puts("0"), 0;
    for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) a[++q]=std::make_pair(i, j), cnt[map[i][j]=getuint()]++;
    std::random_shuffle(a+1, a+q+1);
    printf("%d\n", dfs(1));
    return 0;
}
