#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>

#define rep(i,x,y) for (int i=x;i<=y;i++)
#define dep(i,y,x) for (int i=y;i>=x;i--)
#define mp(x,y) make_pair(x,y)
#define bit(x,d) ((((x)&(1<<(d)))==0)?0:1)

using namespace std;

typedef long long LL;

const int maxn=10+2;
const LL MOD=1000000000+7;


int F[maxn][maxn],vis[maxn],a[maxn][maxn],n,m,k,x;

LL ans;

void search(int x,int y)
{
 if (x==(n+1)) 
 {
  ans++;
  if (ans==MOD) ans=0;
  return;
 }
 
 F[x][y]=F[x-1][y]|F[x][y-1];
  
 int p=1,q=k,c=0;

 rep(i,1,k) if (bit(F[x][y],i-1)) c++;
 
 if (((n-x)+(m-y)+1)>(k-c)) return;

 LL sum=-1,pre;
 if (a[x][y]>0) p=q=a[x][y];
 
 rep(i,p,q)
  if (!(bit(F[x][y],i-1)))
  {
   if (!vis[i]) 
   {
    if (sum>=0) 
    {
     ans+=sum;
     if (ans>MOD) ans-=MOD;
     continue;
    }
    pre=ans;
   }

   F[x][y]^=(1<<(i-1)),vis[i]++;

   if (y==m) search(x+1,1); else search(x,y+1);

   F[x][y]^=(1<<(i-1)),vis[i]--;

   if (!vis[i])
   {
    sum=(ans-pre)%MOD;
   }
  }
  
}

int main()
{
 scanf("%d%d%d",&n,&m,&k);

 if ((n+m-1)>k) {printf("%d\n",0);return 0;}
 
 memset(F,0,sizeof(F));
 memset(vis,0,sizeof(vis));

 rep(i,1,n) 
  rep(j,1,m)
  {
   scanf("%d",&a[i][j]);
   if (a[i][j]>0) vis[a[i][j]]++;
  }
 
 
 ans=0;

 search(1,1);
 
 printf("%I64d\n",ans);

 return 0;
}

 	    	 			    	 	  	  		   			