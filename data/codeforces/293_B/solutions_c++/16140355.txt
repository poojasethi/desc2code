#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

const int Mod = 1000000007;

int N, M, K, Ans;
int S[11][11], Map[11][11], Hash[11];
int Log[1 << 11];

inline int DFS(register int x, register int y) {
	y == M + 1 ? y = 1, ++ x : 0;
	if (x == N + 1) return 1;
	register int Ans = 0, Flag = -1, Last = S[x - 1][y] | S[x][y - 1];
	for (register int i = (~ Last & ((1 << K) - 1)); i; i -= (i & (- i))) {
		register int Now = (Log[i & (- i)]) + 1;
		if (!Map[x][y] || Map[x][y] == Now) {
			S[x][y] = Last | (1 << (Now - 1)),
			++ Hash[Now];
			if (Hash[Now] == 1) {
				Flag == -1 ? Flag = DFS(x, y + 1) : 0,
				Ans += Flag;
			}
			else {
				Hash[Now] ? Ans += DFS(x, y + 1) : 0;
			}
 			Ans >= Mod ? Ans -= Mod : 0,
			-- Hash[Now];
		}
	}
	return Ans;
}

int main() {
	scanf("%d%d%d", &N, &M, &K);
	if (N + M - 1 > K) {
		puts("0");
		return 0;
	}
	for (register int i = 1; i <= K; ++ i) {
		Log[1 << i] = i;
	}
	for (register int i = 1; i <= N; ++ i) {
		for (register int j = 1; j <= M; ++ j) {
			scanf("%d", &Map[i][j]);
			++ Hash[Map[i][j]];
		}
	}
	Ans = DFS(1, 1);
	printf("%d\n", Ans);
	return 0;
}