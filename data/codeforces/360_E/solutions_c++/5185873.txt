#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;

typedef long long LL;
const int Sn = 10010;
const int Sm = 20020;

int n, m, k;
int s, f, t;

struct edge {
     int to, nx, le;
} E[Sm*2];

int qE[Sn], En = 1;

int sec[Sm], vs[Sm], vt[Sm], leL[Sm], leR[Sm];

LL d1[Sn], d2[Sn];
int nex[Sn];
bool il[Sn];


void spfa(int S, LL dist[])
{
     for (int i = 1; i <= n; i ++) dist[i] = 1LL<<60;
     dist[S] = 0;

     int hd, tl, tt;
     for (il[hd=tl=S] = 1; hd; tt = hd, hd = nex[hd], il[tt] = nex[tt] = 0)
	  for (int j = qE[hd], k; k = E[j].to, j; j = E[j].nx)
	       if (dist[hd] + E[j].le < dist[k]) {
		    dist[k] = dist[hd] + E[j].le;
		    if (!il[k]) {
			 if (hd != tl && dist[k] < dist[nex[hd]]) nex[k] = nex[hd], nex[hd] = k, il[k] = 1;
			 else nex[tl] = k, tl = k, il[k] = 1;
		    }
	       }
}
bool spread()
{
     bool ret = 0;
     spfa(s, d1);
     spfa(f, d2);
     for (int i = 1; i <= k; i ++)
	  if (!sec[i] && d1[vs[i]] <= d2[vs[i]]) {
	       sec[i] = 1, ret = 1;
	       E[++En] = (edge) {vt[i], qE[vs[i]], leL[i]}, qE[vs[i]] = En;
	  }
     return ret;
}

int main()
{
#ifndef ONLINE_JUDGE
     freopen("cf.in" , "r", stdin);
     freopen("cf.out", "w", stdout);
#endif
     cin >> n >> m >> k;
     cin >> s >> f >> t;
     for (int i = 1, u, v, w; i <= m; i ++) {
	  cin >> u >> v >> w;
	  E[++En] = (edge) {v, qE[u], w}, qE[u] = En;
     }
     for (int i = 1, u, v, l, r; i <= k; i ++) {
	  cin >> u >> v >> l >> r;
	  E[++En] = (edge) {v, qE[u], r}, qE[u] = En;
	  vs[i] = u, vt[i] = v, leL[i] = l, leR[i] = r;
     }

     while(spread());
     
     if (d1[t] < d2[t]) cout << "WIN" << endl;
     if (d1[t] > d2[t]) cout << "LOSE" << endl;
     if (d1[t] == d2[t]) cout << "DRAW" << endl;
     if (d1[t] <= d2[t]) {
	  for (int i = 1; i <= k; i ++) {
	       if (sec[i]) cout << leL[i]; else cout << leR[i];
	       cout << " ";
	  } cout << endl;
     }
}
