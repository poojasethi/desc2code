#include <cstdio>
#include <vector>
#include <queue>
#include <cstring>
#include <cstdlib>
#define MAX 20000

using namespace std;

typedef pair <int, int> pii;
typedef pair <int, pii> pip;

int n, m, k;
int s1, s2, f;
vector <int> out[MAX], d[MAX], lo[MAX], hi[MAX], ind[MAX];
int ans[200];
long long dist[MAX];
int close[MAX];
bool use[MAX];
priority_queue <pip> pq;

int Dijkstra() {
  for (int i = 1; i <= n; i++) {
    dist[i] = (long long) 1e18;
    close[i] = -2;
    use[i] = false;
  }
  dist[s1] = 0;
  dist[s2] = 0;
  close[s1] = 1;
  close[s2] = -1;
  pq.push(pip(0, pii(close[s1], s1)));
  pq.push(pip(0, pii(close[s2], s2)));
  while (!pq.empty()) {
    int v = pq.top().second.second;
    pq.pop();
    if (use[v]) continue;
    use[v] = true;
    for (int i = 0; i < (int) out[v].size(); i++) {
      int w = out[v][i];
      if (d[v][i] == -1) {
	if (close[v] <= 0) d[v][i] = hi[v][i];
	else d[v][i] = lo[v][i];
	// printf ("%d->%d\n", ind[v][i], d[v][i]);
	ans[ind[v][i]] = d[v][i];
      }
      if (dist[v] + d[v][i] < dist[w]) {
	dist[w] = dist[v] + d[v][i];
	close[w] = close[v];
	pq.push(pip(-dist[w], pii(close[w], w)));
      }
      else if (dist[v] + d[v][i] == dist[w]) {
	if (close[w] != -3 && close[w] != close[v]) {
	  close[w] = -3;
	  pq.push(pip(-dist[w], pii(close[w], w)));
	}
      }
    }
  }
  return close[f];
}

int main() {
  scanf ("%d %d %d", &n, &m, &k);
  scanf ("%d %d %d", &s1, &s2, &f);
  for (int i = 0; i < m; i++) {
    int a, b, c;
    scanf ("%d %d %d", &a, &b, &c);
    out[a].push_back(b);
    d[a].push_back(c);
    lo[a].push_back(c);
    hi[a].push_back(c);
    ind[a].push_back(-1);
  }
  memset (ans, -1, sizeof (ans));
  for (int i = 0; i < k; i++) {
    int a, b, l, r;
    scanf ("%d %d %d %d", &a, &b, &l, &r);
    out[a].push_back(b);
    d[a].push_back(-1);
    lo[a].push_back(l);
    hi[a].push_back(r);
    ind[a].push_back(i);
    ans[i] = -r;
  }
  int res = 0;
  if (s1 != s2) {
    res = Dijkstra();
    if (res == -3) res = 0;
  }
  if (res >= 0) {
    if (res == 0) printf ("DRAW\n");
    else printf ("WIN\n");
    for (int i = 0; i < k; i++) {
      printf ("%d ", abs(ans[i])); 
    }
    printf ("\n");
  }
  else {
    printf ("LOSE\n");
  }
}
