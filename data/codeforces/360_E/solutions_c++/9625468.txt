#include <cstdio>
const int N=(int)1e4+5,M=N,K=105;
typedef long long ll;
const ll inf=1e18;
int getint(){
	char c;
	while((c=getchar())<'0'||c>'9'); int a=c-'0';
	while((c=getchar())>='0'&&c<='9') a=a*10+(c-'0');
	return a;
}
int n,m,k;
struct node;
struct edge{
	node *ed;
	edge *next;
	int w;
} E[M+K],*newE=E,*seq;
int a[K],b[K],l[K],r[K];
struct node{
	edge *son;
	ll dist[2];
	bool inq;
} V[N],*s[2],*t;
int head,tail;
node *q[N];
void spfa(int f,node *s){
	head=tail=0;
	s->inq=true;
	q[tail++]=s;
	while(head!=tail){
		node *u=q[head]; if(++head==N) head=0;
		u->inq=false;
		for(edge *e=u->son;e;e=e->next){
			node *v=e->ed;
			if(u->dist[f]+e->w<v->dist[f]){
				v->dist[f]=u->dist[f]+e->w;
				if(!v->inq){
					v->inq=true;
					q[tail]=v;
					if(++tail==N) tail=0;
				}
			}
		}
	}
}
void renew(node *u){
	spfa(0,u);
	spfa(1,u);
}
bool work0(){
	bool moved=true;
	while(moved){
		moved=false;
		for(int i=0;i<k;i++) if(V[a[i]].dist[0]<V[a[i]].dist[1]&&seq[i].w!=l[i]){
			seq[i].w=l[i];
			renew(V+a[i]);
			moved=true;
		}
	}
	return t->dist[0]<t->dist[1];
}
bool work1(){
	bool moved=true;
	while(moved){
		moved=false;
		for(int i=0;i<k;i++) if(V[a[i]].dist[0]<=V[a[i]].dist[1]&&seq[i].w!=l[i]){
			seq[i].w=l[i];
			renew(V+a[i]);
			moved=true;
		}
	}
	return t->dist[0]<=t->dist[1];
}
int main(){
	n=getint(),m=getint(),k=getint();
	s[0]=V+getint(),s[1]=V+getint(),t=V+getint();
	for(int i=0;i<m;i++){
		int a=getint(),b=getint(),c=getint();
		*newE=(edge){V+b,V[a].son,c},V[a].son=newE++;
	}
	seq=newE;
	for(int i=0;i<k;i++){
		a[i]=getint(),b[i]=getint();
		l[i]=getint(),r[i]=getint();
		*newE=(edge){V+b[i],V[a[i]].son,r[i]},V[a[i]].son=newE++;
	}
	for(int i=0;i<k;i++) seq[i].w=r[i];
	for(int i=1;i<=n;i++) V[i].dist[0]=V[i].dist[1]=inf;
	s[0]->dist[0]=0;
	renew(s[0]);
	s[1]->dist[1]=0;
	renew(s[1]);
	if(work0()){
		puts("WIN");
		for(int i=0;i<k;i++) printf("%d ",seq[i].w);
	}
	else
	if(work1()){
		puts("DRAW");
		for(int i=0;i<k;i++) printf("%d ",seq[i].w);
	}
	else
		puts("LOSE");
}
