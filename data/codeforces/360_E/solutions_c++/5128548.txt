#include<stdio.h>
#include<string.h>
#include<queue>
#include<algorithm>
using namespace std;
const long long inf=(long long)(1e14);
struct ee{
    int u,v,c;
    int next;
}e[20010];
int n,m1,m2;
int s1,s2,f;
long long d[10010],d1,d2;
int head[10010],cnt,pre[10010];
int l[110],r[110],ch[110];
long long ans;
void addedge(int u,int v,int c){
    e[cnt].u=u;
    e[cnt].v=v;
    e[cnt].c=c;
    e[cnt].next=head[u];
    head[u]=cnt++;
}
int vis[10010];
queue<int> q;
int spfa(){
    int i,u,v;
    memset(vis,0,sizeof(vis));
    memset(pre,-1,sizeof(pre));
    for (i=1;i<=n;i++) d[i]=inf;
    d[f]=0;
    vis[f]=1;
    q.push(f);
    while (!q.empty()){
        u=q.front();
        q.pop();
        vis[u]=0;
        for (i=head[u];i!=-1;i=e[i].next){
            v=e[i].v;
            if (d[u]+e[i].c<d[v]){
                d[v]=d[u]+e[i].c;
                pre[v]=i;
                if (!vis[v]){
                    vis[v]=1;
                    q.push(v);
                }
            }
        }
    }
    d1=d[s1];d2=d[s2];
    if (d1-d2<ans){
        ans=d1-d2;
        return 1;
    }
    return 0;
}   
void solve(){
    int i;
    ans=inf;
    while (1){
        spfa();
        if (ans<0) break;
        for (i=pre[s2];i>=0;i=pre[e[i].u]){
            if (i>=m1&&ch[i-m1]<r[i-m1]){
                ch[i-m1]=r[i-m1];
                e[i].c=r[i-m1];
                break;
            }
        }
        if (i<0) break;
    }
    if (ans>0){
        printf("LOSE\n");
    }else{
        if (ans==0) printf("DRAW\n");
        else printf("WIN\n");
        for (i=0;i<m2-1;i++) printf("%d ",ch[i]);
        printf("%d\n",ch[i]);
    }
}
int main(){
    //freopen("e.in","r",stdin);
    int i;
    int u,v,c;
    scanf("%d%d%d",&n,&m1,&m2);
    scanf("%d%d%d",&s1,&s2,&f);
    memset(head,-1,sizeof(head));
    cnt=0;
    for (i=0;i<m1;i++){
        scanf("%d%d%d",&u,&v,&c);
        addedge(v,u,c);
    }
    for (i=0;i<m2;i++){
        scanf("%d%d%d%d",&u,&v,&l[i],&r[i]);
        ch[i]=l[i];
        addedge(v,u,l[i]);
    }
    solve();
    //while (1);
    return 0;
}
