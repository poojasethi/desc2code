#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;

const long long inf=100000000000000000LL;
int s1,s2,t,n,m,k,num;
struct edge {
	int from,to,next,l,r;
} e[20005];
int head[10005];
long long dist1[10005],dist2[10005];
bool ok[10005];
queue<int> q;
inline void insert(int u,int v,int l,int r) {
	e[++num]=(edge){u,v,head[u],l,r}; head[u]=num;
}
inline void spfa(long long *dist,int s) {
	for (int i=1;i<=n;i++) dist[i]=inf;
	memset(ok,false,sizeof(ok));
	q.push(s);
	dist[s]=0; ok[s]=true;
	while (!q.empty()) {
		int x=q.front(); q.pop();
		ok[x]=false;
		for (int i=head[x];i;i=e[i].next)
			if (dist[x]+e[i].r<dist[e[i].to]) {
				dist[e[i].to]=dist[x]+e[i].r;
				if (!ok[e[i].to]) {
					q.push(e[i].to);
					ok[e[i].to]=true;
				}
			}
	}
}
inline bool work(int f) {
	bool flag=true;
	while (flag) {
		flag=false;
		spfa(dist1,s1); spfa(dist2,s2);
		if (dist1[t]<dist2[t]+f) {
			if (f) printf("DRAW\n"); else printf("WIN\n");
			for (int i=m+1;i<=m+k;i++) printf("%d ",e[i].r);
			return true;
		}
		for (int i=m+1;i<=m+k;i++)
			if (dist1[e[i].from]<dist2[e[i].from]+f&&e[i].l!=e[i].r) {
				e[i].r=e[i].l;
				flag=true;
			}
	}
	return false;
}
int main() {
	scanf("%d%d%d%d%d%d",&n,&m,&k,&s1,&s2,&t);
	for (int i=1;i<=m;i++) {
		int u,v,w;
		scanf("%d%d%d",&u,&v,&w);
		insert(u,v,w,w);
	}
	for (int i=1;i<=k;i++) {
		int u,v,l,r;
		scanf("%d%d%d%d",&u,&v,&l,&r);
		insert(u,v,l,r);
	}
	if ((!work(0))&&(!work(1))) printf("LOSE\n");
	return 0;
}
