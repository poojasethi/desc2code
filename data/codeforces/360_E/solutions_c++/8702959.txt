#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

using namespace std;

typedef long long int ll;

const ll infinito=1000000000000000000LL;

int n,m,k;
vector<pair<int,int> > g[100000];
int l[200][2],escoge[200],escogido[200];
ll dist[100000][2];

struct elem {
  ll d;
  int u,h;
  elem () {
  }
  elem (ll ind,int inu,int inh) {
    d=ind;u=inu;h=inh;
  }
};

bool operator<(elem e1,elem e2)
{
  return e1.d>e2.d;
}

int main()
{
  cin>>n>>m>>k;
  for (int i=1;i<=n;i++)
    dist[i][0]=dist[i][1]=infinito;
  int u0,u1,uf;
  cin>>u0>>u1>>uf;
  for (int i=0;i<m;i++) {
    int u,v,c;
    cin>>u>>v>>c;
    g[u].push_back(pair<int,int> (v,c));
  }
  for (int i=0;i<k;i++) {
    int u,v;
    cin>>u>>v>>l[i][0]>>l[i][1];
    g[u].push_back(pair<int,int> (v,-i));
  }
  priority_queue<elem> q;
  dist[u0][0]=0;
  dist[u1][1]=0;
  q.push(elem(0,u0,0));
  q.push(elem(0,u1,1));
  while (not q.empty()) {
    elem e=q.top();
    q.pop();
    ll du=e.d;
    int u=e.u;
    int h=e.h;
    if (dist[u][h]==du) {
      vector<pair<int,int> > &ar=g[u];
      for (int i=0;i<int(ar.size());i++) {
	pair<int,int> p=ar[i];
	int v=p.first;
	if (p.second<=0) {
	  int il=-p.second;
	  if (escogido[il]==0) {
	    escogido[il]=1;
	    escoge[il]=h;
	  }
	  ll duv=l[il][escoge[il]];
	  if (du+duv<dist[v][h]) {
	    dist[v][h]=du+duv;
	    q.push(elem(dist[v][h],v,h));
	  }
	} else {
	  ll duv=p.second;
	  if (du+duv<dist[v][h]) {
	    dist[v][h]=du+duv;
	    q.push(elem(dist[v][h],v,h));
	  }
	}
      }
    }
  }
  if (dist[uf][0]>dist[uf][1]) {
    cout<<"LOSE"<<endl;
  } else {
    if (dist[uf][0]<dist[uf][1])
      cout<<"WIN"<<endl;
    else
      cout<<"DRAW"<<endl;
    for (int i=0;i<k;i++) {
      if (i>0) cout<<" ";
      cout<<l[i][escoge[i]];
    }
    cout<<endl;
  }
}
