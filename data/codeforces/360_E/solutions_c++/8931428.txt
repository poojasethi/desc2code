#include<cstdio>
#include<cstring>
#include<queue>
#include<algorithm>

using namespace std;

typedef long long LL;

const int MAX_N = 10000;
const int MAX_M = 100;
const LL INF = 1e17;


struct Edge{
	int a, b, le, ri;
};

Edge edges[MAX_M + 10];

int nodes[MAX_N + 10], nxt[MAX_N + MAX_M + 10], to[MAX_N + MAX_M + 10], len[MAX_N + MAX_M + 10], en;
int n, ee, m;
int s1, s2, cent;
queue<int> q;
bool inQ[MAX_N + 10];

LL dist[2][MAX_N + 10];

inline void addEdge(int f, int t, int c){
	++ en;
	len[en] = c;
	to[en] = t;
	nxt[en] = nodes[f];
	nodes[f] = en;
}

void spfa(LL* dist, int s){
	fill(dist + 1, dist + n + 1, INF);	
	q.push(s);
	inQ[s] = true;
	dist[s] = 0;
	while(!q.empty()){
		int cur = q.front();
		q.pop();
		inQ[cur] = false;
		for(int e = nodes[cur]; e; e = nxt[e]){
			if(dist[to[e]] > dist[cur] + len[e]){
				dist[to[e]] = dist[cur] + len[e];
				if(!inQ[to[e]]){
					inQ[to[e]] = true;
					q.push(to[e]);
				}
			}
		}
	}
}


bool check(int li){
	for(int i = 1; i <= m; i ++)
		len[ee + i] = edges[i].ri;
	while(true){
		spfa(dist[0], s1);
		spfa(dist[1], s2);
		if(dist[0][cent] + li <= dist[1][cent])
			return true;
		bool tag = false;
		for(int i = 1; i <= m; i ++)
			if(len[ee + i] != edges[i].le && dist[0][edges[i].a] + li <= dist[1][edges[i].a]){
				len[ee + i] = edges[i].le;
				tag = true;
				break;
			}
		if(!tag)
			break;
	}
	return false;
}

int main(){
#ifndef ONLINE_JUDGE
	freopen("test.in", "r", stdin);
	freopen("test.out", "w", stdout);
#endif
	scanf("%d%d%d", &n, &ee, &m);
	scanf("%d%d%d", &s1, &s2, &cent);
	for(int i = 1; i <= ee; i ++){
		int a, b, w;
		scanf("%d%d%d", &a, &b, &w);
		addEdge(a, b, w);
	}
	for(int i = 1; i <= m; i ++){
		scanf("%d%d%d%d", &edges[i].a, &edges[i].b, &edges[i].le, &edges[i].ri);
		addEdge(edges[i].a, edges[i].b, edges[i].ri);
	}
	if(check(1)){
		printf("WIN\n");
		for(int i = 1; i <= m; i ++)
			printf("%d ", len[ee + i]);
		printf("\n");
	} else if(check(0)){
		printf("DRAW\n");
		for(int i = 1; i <= m; i ++)
			printf("%d ", len[ee + i]);
		printf("\n");
	} else
		printf("LOSE\n");

	return 0;
}


