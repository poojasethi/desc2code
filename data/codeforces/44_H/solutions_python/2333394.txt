#!/usr/bin/python
import sys

class IndexKey:
	def __init__(self, key1, key2):
		self.key1 = key1
		self.key2 = key2
	def __hash__(self):
		return hash((self.key1, self.key2))
	def __eq__(x, y):
		return x.key1 == y.key1 and x.key2 == y.key2

s = sys.stdin.readline().strip()
d = dict()

def f(x, index):
	#print x, index
	a = int(s[index])
	if index == len(s) - 1:
		return 2 if (a + x) % 2 == 1 else 1
	k = IndexKey(x, index)
	if k in d:
		return d[k]

	if (a + x) % 2 == 0:
		d[k] = f((a+x)/2, index+1)
		return d[k]
	else:
		d[k] = f((a+x)//2, index+1) + f((a+x)//2+1, index+1)
		return d[k]

def selfInclude(s):
	for i in range(0, len(s)-1):
		a = int(s[i])
		b = int(s[i+1])
		if abs(a-b) > 1:
			return False
	return True

result = 0
if len(s) == 1:
	print 9
	sys.exit(0)

for i in range(10):
	result += f(i, 1)
print result-1 if selfInclude(s) else result
