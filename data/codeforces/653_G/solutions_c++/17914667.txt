//codeforces IndiaHacks 2016 (Div. 1 + Div. 2) G
#include<cstdio>
#include<cmath>
#include<cstring>
#include<cstdlib>
#include<map>
#include<vector>
#include<algorithm>
#define LL long long
using namespace std;
const long long mp=1000000007LL;
const int range=300000;
int p[25998];
bool isp[range+2];
int n;
long long pow2;
long long ans;
int t[range+1];
long long f[range+2];
long long ff[range+2];
long long c[range+2];
map< int , int > m;
vector< vector<int> > vec;
void get_p(){
	int n=0;
	isp[0]=isp[1]=false;
	for(int i=2;i<=range;i++)isp[i]=true;
	for(int i=2;i<=range;i++){
		if(isp[i]){
			p[n++]=i;
			if(i<=range/i)for(int j=i*i;j<=range;j+=i)isp[j]=false;
		}
	}
}
/*long long extend_gcd(long long a,long long b,long long &x,long long &y){
	if(a==0LL&&b==0LL)return -1LL;
	if(b==0LL){
		x=1LL;
		y=0LL;
		return a;
	}
	long long d=extend_gcd(b,a%b,y,x);
	y-=a/b*x;
	return d;
}

long long mod_reverse(long long a,long long n){
	long long x,y,d=extend_gcd(a,n,x,y);
	if(d==1LL)return (x%n+n)%n;
	else return -1LL;
}*/

long long fast_pow(long long a,long long b){
	//printf("Debug: x = %I64d b = %I64d\n",a,b);
	long long ans = 1LL;
    //printf("Debug: ans = %I64d a = %I64d b = %I64d\n",ans,a,b);
    while( b ){
    	if( b & 1LL )
    		ans = (ans * a) % mp;
    	a = (a * a) % mp;
    	b>>=1LL;
    	//printf("Debug: ans = %I64d a = %I64d b = %I64d\n",ans,a,b);
	}
	return ans;
}
void get_f(int b){
	f[0]=1LL;
	f[1]=(LL)b;
	for(int i=2;i<=(b+1)/2;i++)
		f[i]=((f[i-1]*/*mod_reverse((LL)i,mp)*/fast_pow((LL)i,mp-2LL))%mp*(LL)(b-i+1))%mp;
	for(int i=b;i>(b+1)/2;i--)
		f[i]=f[b-i];
}
void get_ff(int b){
	ff[0]=0LL;
	for(int i=1;i<=b+1;i++)ff[i]=(ff[i-1]+f[i-1])%mp;
}
void get_c(int n){
	for(int k=1;k<=n;k++){
		c[k]=(pow2-f[n-k]-2LL*(ff[n-k]-ff[0])+3LL*mp)%mp;
	}
}
void fj(int k){
	int j=0;
	while(k>1){
		int s=0;
		while(k%p[j]==0){
			s++;
			k/=p[j];
		}
		if(s){
			if(m.find(j)!=m.end()){
				vec[m[j]].push_back(s);
			}
			else{
				vector<int> v(1,s);
				m.insert(make_pair(j,vec.size()));
				vec.push_back(v);
			}
		}
		j++;
	}
}
int main(){
	m.clear();
	vec.clear();
	ans=0LL;
	scanf("%d",&n);
	pow2=fast_pow(2LL,(LL)n-1LL);
	get_p();
	get_f(n-1);
	get_ff(n-1);
	get_c(n);

	for(int i=0;i<n;i++)
		scanf("%d",&t[i]);
	
	for(int i=0;i<n;i++)
		fj(t[i]);
	for(int i=0;i<vec.size();i++){
		sort(vec[i].begin(),vec[i].end());
		for(int j=0;j<vec[i].size();j++)ans=(ans+((LL)vec[i][j]*c[n-vec[i].size()+j+1])%mp)%mp;
		
	}
	
	printf("%I64d\n",ans);
	return 0;
}

