#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 3e5 + 5;

int suff[N], n, x, y, z, P[N], F[N];
vector< int > v[N];
int ans;

int FE(int x, int k) {
	if(!k) return 1;
	int temp = FE(x, k / 2);
	if(k & 1) return temp * (ll) temp % mod * x % mod;
	return temp * (ll) temp % mod;
}

int C(int x, int y) {
	if(x < y || x < 0 || y < 0) return 0;
	return P[x] * (ll) F[y] % mod * F[x - y] % mod;
}

int main() {

	scanf("%d", &n);

	FOR(i, 1, n) {
		scanf("%d", &x); int t = x;
		for(int i = 2; i * i <= t; i++) {
			if(x % i == 0) {
				int s = 0;
				while(x % i == 0) {
					x /= i; s++;
				} v[i].pb(s);
			}
		}
		if(x > 1) v[x].pb(1);
	}

	P[0] = F[0] = 1;
	FOR(i, 1, N-1) {
		P[i] = P[i-1] * (ll) i % mod;
		F[i] = FE(P[i], mod - 2);
	}

	ROF(i, n, 1)
		suff[i] = (suff[i + 1] + C(n - 1, i)) % mod;

	FOR(i, 2, 300000) {
		if(!v[i].size()) continue;
		sort(v[i].begin(), v[i].end());
		int sz = v[i].size();
		ll sum = 0, l = n - v[i].size(), all = 0;
		foreach(it, v[i]) all += *it;
		ans = (ans + suff[n-l+1] * (ll) all % mod) % mod;		
		foreach(it, v[i]) {
			l++; sum += *it;
			ll temp = C(n - 1, l - 1);
			ans = (ans + temp * (ll) (((*it) * (ll) l - sum) % mod) % mod) % mod;	
			temp = C(n - 1, n - l + 1);
			ans = (ans + temp * (((all - sum) - (ll) (*it) * (n - l)) % mod) % mod) % mod;
		}
	}

	cout << ans << endl;

	return 0;
}
