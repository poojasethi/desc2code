#include<stdio.h>
#include<algorithm>
#include<vector>
#define mod 1000000007
using namespace std;

typedef long long lld;

struct sis {
	int p, r;
	bool operator< (const sis& c) const {
		if(p != c.p)return p<c.p;
		return r<c.r;
	}
}im;
vector<sis> soin;

void soinsu(int num, int ix){
	if(num<=1)return;
	if(ix*ix > num){
		im.p=num, im.r=1;
		soin.push_back(im);
		return;
	}

	im.p=ix, im.r=0;
	while(num%ix==0)num/=ix, im.r++;
	if(im.r)soin.push_back(im);
	soinsu(num, ix+1);
}

vector<int> v;
int xy;
lld inv[400300], acb[400300], acb_s[400300];
lld dap;

lld pow(lld a, lld b){
	if(b<=0)return 1;
	lld res=pow(a, b/2);
	res = res*res%mod;
	if(b%2)res = res*a%mod;
	return res;
}

void getdap(){
	int i;
	for(i=0; i<v.size(); i++){
		int j=i+(xy-v.size()+1);
		lld im=0;
		if(j)im=acb_s[j-1];
		im=(im+acb_s[j]-acb_s[xy])%mod;
		im=(im+mod)%mod;

		dap = (dap + (lld)v[i]*im)%mod;
	}
//	puts("");
}

int main(){
	int n, i;
	scanf("%d", &n), xy=n-1;
	for(i=1; i<=n; i++)inv[i] = pow(i, mod-2);
	acb[0]=1, acb_s[0]=1;
	for(i=1; i<=xy; i++){
		acb[i]=(acb[i-1]*(xy+1-i))%mod * inv[i]%mod;
		acb_s[i]=(acb_s[i-1]+acb[i])%mod;
	}

	while(n--){
		int a;
		scanf("%d", &a);
		soinsu(a, 2);
	}
	sort(soin.begin(), soin.end());

	for(i=0; i<soin.size(); i++){
		v.push_back(soin[i].r);
		if(i < soin.size()-1 && soin[i].p == soin[i+1].p);
		else{
			getdap();
			v.clear();
		}
	}
	printf("%I64d", dap);
	return 0;
}
