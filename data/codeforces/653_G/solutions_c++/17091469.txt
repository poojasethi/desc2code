#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <map>
using namespace std;

const int maxN = 300005;
const int mod = 1000000007;

int n, m;

int s[maxN];
int cnt[maxN][21];

bool flag[maxN];
int primes, prime[maxN];
int Next[maxN];

long long c[maxN], sum[maxN];

long long ans;

void Readln(){
	scanf( "%d\n", &n );	
	for (int i=1; i<=n; i++){
		scanf( "%d", &s[i] );
		m = max(m, s[i]);
	}
}

long long powe(long long A, int B){
	long long ret = 1;
	for (int i=1; i<=B; i<<=1){
		if (B & i) (ret *= A) %= mod;
		(A *= A) %= mod;
	}
	return ret;
}

void init(){
	flag[1] = true;
	for (int i=2; i<=m; i++){
		if (!flag[i]){
			prime[++primes] = i;
			Next[i] = primes;
		}
		for (int j=1; j<=primes && i*prime[j] <= m; j++){
			flag[i*prime[j]] = true;
			Next[i*prime[j]] = j;
			if (i%prime[j] == 0) break;
		}
	}
	long long comb = n;
	c[1] = 1 - powe(2, n-1);
	c[1] = (c[1] + mod) % mod;
	sum[1] = c[1];
	for (int i=2; i<=n; i++){
		c[i] = c[i-1] + comb;
		c[i] %= mod;
		comb = comb * (n-i+1) % mod;
		comb = comb * powe(i, mod-2) % mod;
		sum[i] = (sum[i-1] + c[i]) % mod;
	}
}

void Solve(){
	for (int i=1; i<=primes; i++) cnt[i][0] = n;
	for (int i=1; i<=n; i++){
		if (s[i] == 1) continue;
		int now = Next[s[i]];
		int tot = 0;
		for (;;){
			if (Next[s[i]] != now){
				cnt[now][tot] ++;
				cnt[now][0] --;
				now = Next[s[i]];
				tot = 1;
				if (s[i] == 1) break;
			}else tot ++;
			s[i] /= prime[Next[s[i]]];
		}
	}
	for (int i=1; i<=primes; i++){
		if (cnt[i][0] == n) continue;
		int tot = cnt[i][0];
		for (int j=1; j<=20; j++){
			(ans += 1LL*(sum[tot + cnt[i][j]] - sum[tot])*j) %= mod;
			tot += cnt[i][j];
			if (tot == n) break;
		}
	}
	printf( "%I64d\n", (ans + mod) % mod );
}

int main(){
	Readln();
	init();
	Solve();
	return 0;
}