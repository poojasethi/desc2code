#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

const int MAXN = 500005,Mo = int(1e9) + 7;

vector<int> Lk[MAXN];
int Fac[MAXN],Rev[MAXN],F[MAXN],N;

int GetC(int n,int m)
{
	return Fac[n] * 1ll * Rev[m] % Mo * Rev[n - m] % Mo;
}

int Pow(int a,int b)
{
	if (!b) return 1;
	long long mid = Pow(a,b >> 1);
	mid = mid * mid % Mo;
	if (b & 1) mid = mid * a % Mo;
	return mid;
}

int main()
{
	//freopen("data.in","r",stdin),freopen("data.out","w",stdout);
	scanf("%d", &N);
	Fac[0] = 1;
	for(int i = 1;i <= N;i ++) Fac[i] = Fac[i - 1] * 1ll * i % Mo;
	Rev[N] = Pow(Fac[N],Mo - 2);
	for(int i = N;i;i --) Rev[i - 1] = Rev[i] * 1ll * i % Mo;
	F[1] = (1 - Pow(2,N - 1) + Mo);
	for(int i = 2;i <= N;i ++)
		F[i] = ((F[i - 1] + GetC(N - 1,N - i + 1)) % Mo + GetC(N - 1,N - i)) % Mo;
	for(int i = 1;i <= N;i ++)
	{
		int x;
		scanf("%d", &x);
		for(int j = 2;j * j <= x;j ++)
			if (x % j == 0)
			{
				int t = 0;
				for(;x % j == 0;x /= j,++ t);
				Lk[j].push_back(t);
			}
		if (x > 1) Lk[x].push_back(1);
	}
	int ans = 0;
	for(int i = 2;i <= 500000;i ++)
		if (Lk[i].size())
		{
			sort(Lk[i].begin(),Lk[i].end());
			int c = N - Lk[i].size();
			for(int j = 0;j < Lk[i].size();j ++)
				ans = (ans + F[j + 1 + c] * 1ll * Lk[i][j]) % Mo;
		}
	printf("%d\n", ans);
	return 0;
}
