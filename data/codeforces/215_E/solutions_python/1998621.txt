import math

def tree_search(l, u, x, a, b):
    if u == l:
        if check_upper(u, a, b, x):
            return u
        else:
            return u-1
    if u - l <= 1:
        if check_upper(u, a, b, x):
            return u
        elif check_upper(l, a, b, x):
            return l 
        else:
            return l-1

    m = (l+u)/2
    if check_upper(m, a, b, x):
        return tree_search(m, u, x, a, b)
    else:
        return tree_search(l, m, x, a, b)
        

dict_periodical = {}
def periodical(n):
    if n == 1:
        return 0
    
    if n in dict_periodical:
        return dict_periodical[n]
       
    total = 0
    for d in divisor(n):
        total = total + pow(2, d-1) - periodical(d)

    dict_periodical[n] = total
    return total

def check_upper(p, a, b, upper):
#    mask = pow(2, a) - 1
#    for i in range(b-1, -1,-1):
#        converted = (upper >> i*a) & mask
#        if converted > p:
#            return True
#        elif converted < p:
#            return False
#        else:
#            continue
#    return True
    return p*sigma(a, b) <= upper

    
#dict_periodical_upper_div = {}
def periodical_upper_div(a, upper, k):
#    if a in dict_periodical_upper_div:
#        return dict_periodical_upper_div[a]
    
    sum = 0
    b = k/a
#    for c in range(pow(2,a-1), pow(2,a)):
#        if check_upper(c, a, b, upper):
#            sum += 1
#        else:
#            break
    l = pow(2,a-1)
    u = pow(2,a)
    sum = tree_search(l, u-1, upper, a, b) - l + 1    

    for d in divisor(a):
        sum -= periodical_upper_div(d, upper, k)
        
#    dict_periodical_upper_div[a] = sum
    return sum
            
def periodical_upper(upper, k):
    sum = 0
    for a in divisor(k):
        sum += periodical_upper_div(a, upper, k)
#    dict_periodical_upper_div.clear()
    return sum

dict_sigma = {}
def sigma(n, l):
    if (n, l) in dict_sigma:
        return dict_sigma[(n, l)]
    k = pow(2,n)
    result = (1 - pow(k, l))/(1-k)
    dict_sigma[(n, l)] = result
    return result

dict_divisor = {}        
def divisor(n):
    if n in dict_divisor:
        return dict_divisor[n]
    results = []
    for i in range(1, n/2+1):
        if n%i == 0:
            results.append(i)
    dict_sigma[n] = results
    return results

def periodical_upper_total(m):
    
    if m == 0:
        return 0
    
    k = int(math.floor(math.log(m, 2)))+1
    num = 0
    for i in range(1, k):
        num += periodical(i)
    
    num += periodical_upper(m, k)
    
    return num

def count_periodical(n, m):
    return periodical_upper_total(m) - periodical_upper_total(n-1)

[l, r] = raw_input().split()
print count_periodical(long(l), long(r))
#print count_periodical(1, 1000000000000000000)
#print count_periodical(1, 10000000000000000000)
#print periodical_upper_total(25)
#print periodical_upper_total(38) #100100
#print count_periodical(7, 9)
#883 947
#(891, 5, 2)1101111011
#(924, 5, 2)1110011100
