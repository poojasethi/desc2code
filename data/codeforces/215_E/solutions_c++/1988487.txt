#include <cstdio>
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;
#define LL long long

LL solve(LL);

bool good(int b, int k, LL m, LL a)
{
	LL r = 0;
	for (int i = 0; i < b; ++i)
	{
		r <<= k;
		r += m;
	}
	return r <= a;
}

LL solve2(int b, int k, LL a)
{
	LL low = (1LL<<(k-1)), hig = (1LL<<k)-1;
	while (low != hig)
	{
		LL mid = (low+hig+1)/2;
		if (good(b/k, k, mid, a)) low = mid;
		else hig = mid-1;
	}
	if (!good(b/k, k, low, a)) return 0;
	LL r = low-(1LL<<(k-1))+1;
	return r-(solve(low)-solve((1LL<<(k-1))-1));
}

vector<int> use[64];

void pre()
{
	for (int i = 2; i <= 63; ++i)
		for (int j = 1; j < i; ++j)
			if (i%j == 0) use[i].push_back(j);
}

LL solve(LL a)
{
	LL res = 0;
	for (int i = 2; i <= 63; ++i)
	{
		if ((1LL<<(i-1)) > a) break;
		for (int j = 0; j < use[i].size(); ++j)
			res += solve2(i, use[i][j], a);
	}
	return res;
}

int main()
{
	pre();
	LL a, b;
	cin >> a >> b;
	cout << (solve(b)-solve(a-1)) << endl;
	//cout << solve(b) << endl << solve(a-1) << endl;
	return 0;
}

