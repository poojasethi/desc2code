#include<cmath>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
#define LL __int64
LL num[100],dp[100];
LL getdp(int len,int k,LL m)
{
    LL x=0;
    for(int i=0;i<k;i++) x<<=1,x+=num[len-i];
    LL y=x;
    for(int i=1;i<len/k;i++) y<<=k,y+=x;
    return x-(1<<(k-1))+1-(y>m);
}
LL getans(LL m)
{
    int len;
    LL n=m,ans=0;
    for(len=0;n;n>>=1) num[++len]=n&1;
    for(int i=2;i<=len;i++)
    {
        memset(dp,0,sizeof(dp));
        for(int j=1;j<i;j++)
        {
            if(i%j) continue;
            if(i<len) dp[j]=1<<(j-1);
            else dp[j]=getdp(len,j,m);
            for(int k=1;k<j;k++)
                if(!(j%k)) dp[j]-=dp[k];
            ans+=dp[j];
        }
    }
    return ans;
}
int main()
{
    LL l,r;
    scanf("%I64d%I64d",&l,&r);
    printf("%I64d\n",getans(r)-getans(l-1));
    return 0;
}
