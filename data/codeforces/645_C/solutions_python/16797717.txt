#!/usr/bin/python

n, k = map(int, raw_input().split())
h = raw_input()
r = 0
d = []
lastroom = None
for _h in h:
    if _h == '0':
        if lastroom != None:
            d.append(r - lastroom)
        lastroom = r
    r += 1

def D(L):
    return [L[i+1]-L[i] for i in range(len(L)-1)]

pd = [0]
for _d in d:
    pd.append(pd[-1] + _d)

#print "pd", pd
#print "room", D(pd)
dd = D(pd)

def findbest(l, r):
    L, R = 0, 0
    while l < r:
        if L < R:
            L += dd[l]
            l += 1
        else:
            R += dd[r-1]
            r -= 1

    return l, L, R

#for s in range(0, len(dd)+1-k):
#    print findbest(s, s+k)

bestJohn, bestL, bestR = findbest(0, k)
john, L, R = bestJohn, bestL, bestR
#print "start L/R now: ", L, R
for s in range(1, len(dd)+1-k):
    L = L - dd[s-1]
    R = R + dd[s+k-1]
    #print "L/R now: ", L, R
    while True:
        Lp = L + dd[john]
        Rp = R - dd[john]
        if max(Lp, Rp) < max(L, R):
            john += 1
            L, R = Lp, Rp
        else:
            break

    if max(L, R) < max(bestL, bestR):
        #print "best", L, R, "john at", john
        bestL, bestR = L, R

print max(bestL, bestR)


