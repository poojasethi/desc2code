#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys

def readint():
    return int(raw_input())
def readfloat():
    return float(raw_input())
def readarray(N, foo=raw_input):
    return [foo() for i in xrange(N)]
def readlinearray(foo=int):
    return map(foo, raw_input().split())

def NOD(a, b):
    while b:
        a,b = b, a%b
    return a

def gen_primes(max):
    primes = [1]*(max+1)
    for i in range(2, max+1):
        if primes[i]:
            for j in range(i+i, max+1, i):
                primes[j] = 0
    primes[0] = 0
    return [x for x in range(max+1) if primes[x]]

def is_prime(N):
    i = 3
    if not(N % 2):
        return 0
    while i*i < N:
        if not(N % i):
            return 0
        i += 3
    return 1

def print_ip(ip):
    parts = []
    for j in range(4):
        parts.append(ip % 256)
        ip /= 256
    print '.'.join(map(str, parts[::-1]))

n, k = readlinearray()
ips = [map(int, s.split('.')) for s in sys.stdin.readlines()]

ips = [ip[3] + 256 * (ip[2] + 256 * (ip[1] + 256 * ip[0])) for ip in ips]

mask = 2**31

for i in range(30, -1, -1):
    if len(set(map(mask.__and__, ips))) == k:
        print_ip(mask)
        break
    mask += 2**i
else:
    print -1
