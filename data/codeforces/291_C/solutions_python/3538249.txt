import sys
sys.setrecursionlimit(10001)

def num_networks(ones):
	mask = int(("1" * ones) + ("0" * (32 - ones)), 2)
	networks = set()
	for ip in ips:
		networks.add(mask & ip)
	return len(networks)

def binary_search_first():
	x = 1
	y = 32
	while x < y:
		mid = x + (y - x) / 2
		nets = num_networks(mid)
		if k <= nets:
			y = mid
		else:
			x = mid + 1
	return x if (x == y and num_networks(x) == k) else 0

n, k = map(int, sys.stdin.readline().strip().split())
ips = []
for _ in xrange(n):
	ip = sys.stdin.readline().strip()
	bit = ""
	for b in ip.split("."):
		bit += bin(int(b))[2:].rjust(8, "0")
	ips.append(int(bit, 2))

ones = binary_search_first()
if ones == 0:
	print -1
else:
	ans = int(("1" * ones) + ("0" * (32 - ones)), 2)
	ans1 = bin(ans)[2:].rjust(32, "0")
	print ".".join(str(int(ans1[8*i:8*(i+1)], 2)) for i in xrange(4))
