#!/usr/bin/env python
import sys

def ip_to_int(ip):
    x = 0
    for i, seq in enumerate(reversed(ip.split('.'))):
        x = x | (int(seq) << (8 * i))
    return x

def bin_str_to_ip(ip):
    return ".".join([str(int(ip[8*i:8*i+8], 2)) for i in xrange(4)])

def count_partitions(mask, ips):
    count = 1
    for i in xrange(1, len(ips)):
        if (ips[i-1] & mask) != (ips[i] & mask):
            count += 1
    return count

if __name__ == '__main__':
    n, k = map(int, sys.stdin.readline().strip().split())
    
    ips  = []
    for i in xrange(n):
        ips.append(ip_to_int(sys.stdin.readline().strip()))     

    ips.sort()
    lo, hi = 1, 32
    possible = False
    while lo < hi:
        mid  = lo + (hi - lo) / 2
        mask = int("1" * mid + "0" * (32 - mid), 2) 

        count = count_partitions(mask, ips)
        if count > k:
            hi = mid
        elif count == k:
            possible = True
            hi = mid
        else:
            lo = mid + 1

    result = "1" * lo + "0" * (32 - lo)
    if not possible or result.count('1') == 0 or result.count('0') == 0:
        print "-1"
    else:
        print bin_str_to_ip(result)
