#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

double dp[1010][1010];

double func(int x, int y){
    if(dp[x][y] > -0.5) return dp[x][y];
    if(x == 0) return dp[x][y] = 1.0 / (y + 1.0);
    if(y == 0) return dp[x][y] = 1.0;
    
    /*
    dp[x][y] = max{1 / (1 + y), f(p, q)}
    px + q(y+1) = 1
    f(p, q) = min{px + qy(1.0 - dp[y-1][x]), p + q + qy(1.0 - dp[y-1][x]), px(1.0 - dp[y][x-1]) + q + qy(1.0 - dp[y-1][x])}
    */

    func(y-1, x);
    func(y, x-1);
    
    double L1 = 1.0, R1 = y * (1.0 - dp[y-1][x]) / (y + 1.0);
    double L2 = 1.0 - dp[y][x-1], R2 = (1.0 + y * (1.0 - dp[y-1][x])) / (y + 1.0);
    return dp[x][y] = max(1.0 / (y + 1.0), (L1 * R2 - L2 * R1) / (L1 + R2 - L2 - R1));
}

int main(void){
    int x,y,i,j;
    
    cin >> x >> y;
    REP(i,1010) REP(j,1010) dp[i][j] = -1.0;
    func(x, y);
    printf("%.12f %.12f\n", dp[x][y], 1.0 - dp[x][y]);
    
    return 0;
}
