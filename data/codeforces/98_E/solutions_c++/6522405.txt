/* 决策矩阵求最优值
假设有决策矩阵
        对方 决策1 决策2
我方 决策1    A     B      P
     决策2    C     D     1-P  （A\B\C\D表示对于这个决策组合我方的胜率）
最优期望胜率满足
假设我方执行决策1和决策2 的概率分别为P和1-P
那么，如果这个概率使得无论对方选择何种决策，总的期望胜率是一致，
    则A*P+B*(1-P)=C*P+D*(1-P)=最优胜率
*/
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
typedef long long ll;
double dp[1010][1010];
int m,n;
double gao(int m, int n){
    if(dp[m][n]>0) return dp[m][n];
    if(m==0 || n==0) return 1.0/(n+1);
    //do trick and the opponent believes
    double A = 1.0;

    //do trick and the opponent doesn't belive
    double B = 1.0-gao(n,m-1);
    
    //guess the opponent's card
    //if incorrect; opponent believes ? C : D
    double C=(double)n/(n+1)*(1-gao(n-1,m));
    double D=(double)n/(n+1)*(1-gao(n-1,m))+1.0/(n+1);
    
    //A*P+B*(1-P)=C*P+D*(1-P)
    //AP-BP-CP+DP=D-B
    double P=(D-B)/(A-B-C+D);
    dp[m][n]=P*A+(1-P)*B;
    return dp[m][n];
}

int main(){
    scanf("%d%d",&m,&n);
    memset(dp,0,sizeof(0));
    printf("%.10lf %.10lf\n",gao(m,n),1-gao(m,n));
    return 0;
}

