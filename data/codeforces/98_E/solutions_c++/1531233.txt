#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <fstream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <iterator>
#include <cassert>
#include <stack>
#include <queue>
#include <ctime>
#include <vector>
#include <map>
#include <set>
#include <utility>

using namespace std;

#define FORALL(i,a,b) for (int i = (a); i <= (b); i++)
#define FOR(i,n) for (int i=0;i<n;i++)
#define FORB(i,a,b) for (int i = (a); i >= (b); i--)
#define FORIN(it,type,b) for(type::iterator it = (b).begin(); it != (b).end(); it++)
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;

#define in cin
#define out cout
#define dout if(true) cout

#define MAXM 1010
#define MAXN 1010
ld smemo[MAXM][MAXN];

#define EPS 0.000000001l
#define valid(a) (-EPS<=(a)&&(a)<=1.+EPS)

ld gamev(int m, int n, ld p2);

ld sq(int m, int n, ld p2){
	return -(p2-1)*p2;
}

#define MAXVAL 1000000

//ternary search
ld maximize(int m, int n, ld V(int,int,ld), ld low, ld high){
	ld a = low;
	ld b = high;
	
	int itr = 10000;
	while (a<b){
		ld p1 = a + (((ld)(rand()%MAXVAL)+1)/(MAXVAL+1))*(b-a);
		ld p2 = a + (((ld)(rand()%MAXVAL)+1)/(MAXVAL+1))*(b-a);
		
		//assert(p1 <= p2);
		if (p1 > p2) swap(p1,p2);
				
		ld v1 = V(m,n,p1);
		ld v2 = V(m,n,p2);
		
		if (v1 <= v2){
			a = p1;
		}else{
			b = p2;
		}
	}
	
	assert(a <= b);
	return (a+b)/2.0l;
}

ld S(int m, int n){
	ld& ans = smemo[m][n];
	if (ans >= -0.5) return ans;
	if (n==0) return ans = 1.0;
	if (m==0) return ans = 1.0l / ((ld)(n+1.0));
	
	ld play = S(n,m-1);
	ld hit = S(n-1,m);
	
	ld up = 1/(play*(n+1) + 1.0);
	
	ans = 1.0/((ld)(n+1));
	ans = max(ans,gamev(m,n,up));
	//ans = max(ans,gamev(m,n,maximize(m,n,gamev,0.0,up)));
	
	assert(valid(ans));
	
	return ans;
}

ld gamev(int m, int n, ld p2){
	ld play = S(n,m-1);
	ld hit = S(n-1,m);
	
	ld p3 = p2*play*(n+1);
	ld p1 = 1 - (p2+p3);
	
	//cout << p1 << " " << p2 << " " << p3 << endl;
	
	assert(valid(p1)); assert(valid(p2)); assert(valid(p3));
	//assert(valid(p1) && valid(p2) && valid(p3));
	
	ld kill = p1/(n+1.);
	ld bluff = p2;
	ld myplay = p3*n*(1.0-hit)/(n+1.0);
	
	return kill + bluff + myplay;
}

int main()
{
	srand(time(NULL));
	int M,N;
	in >> M >> N;
	FOR(i,MAXM) FOR(j,MAXN) smemo[i][j] = -10;
	ld ans = S(M,N); 
	cout << fixed << setprecision(16) << ans << " " << (1.0-ans) << endl;
}
