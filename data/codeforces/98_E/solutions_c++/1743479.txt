/*
�����о��߾���
       �Է� ����1 ����2
�ҷ� ����1    A     B      p
     ����2    C     D     1-p  ��A\B\C\D��ʾ���������������ҷ���ʤ�ʣ�
��������ʤ������
�����ҷ�ִ�о���1�;���2 �ĸ��ʷֱ�Ϊp��1-p
��ô������������ʹ�����۶Է�ѡ����־��ߣ��ܵ�����ʤ����һ�£�
	��Ap+C(1-p)=Bp+D(1-p)=����ʤ��
*/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <string>
#include <cstdlib>
#include <ctime>
using namespace std;
typedef long long ll;
double dp[1010][1010];
int N, M;

double Dp(int N, int M) {
	if (dp[N][M] >= 0) return dp[N][M];
	if (N == 0) return 1.00 / (M + 1);
	if (M == 0) return 1.00;
	//do trick and the opponent believes
	double A = 1.00;
	//do trick and the opponent doesn't belive
	double B = 1.00 - Dp(M, N - 1);
	//guess the opponent's card
	//if incorrect; opponent believes ? C : D
	double C = (double)M / (M + 1) * (1 - Dp(M - 1, N));
	double D = (double)M / (M + 1) * (1 - Dp(M - 1, N)) + 1.00 / (M + 1);
	//A * P + B * (1 - P) = C * P + D * (1 - P)
	//AP + BP - CP + DP = D - B
	double P = (D - B) / (A - B - C + D);
	dp[N][M] = P * A + (1 - P) * B;
	return dp[N][M];
}

int main()
{
	scanf("%d%d",&N,&M);
	for (int i = 0; i < 1010; ++ i)
		for (int j = 0; j < 1010; ++ j)
			dp[i][j] = -0x7ffff;
	printf("%.10lf %.10lf\n", Dp(N,M), 1 - Dp(N,M));
	return 0;
}