#include<cstdio>
#include<cstring>
#include<algorithm>
#include<bitset>
using namespace std;
bitset<200>s1[200],s2[200];
int dis[200][200];
struct matrix
{
	int siz,a[200][200];
	matrix()
	{
		memset(a,0,sizeof(a));
	}
}one,vis,mul;
struct ggg
{
	int u,v,w;
}edge[1200];
int n,m;
inline bool cmp(ggg x,ggg y)
{
	return x.w<y.w;
}
inline matrix multi(matrix a,matrix b)
{
	matrix c;
	c.siz=a.siz;
	for (int i=1;i<=c.siz;i++)
	{
		s1[i].reset();
		s2[i].reset();
		for (int j=1;j<=c.siz;j++)
		{
			if(a.a[i][j]==1)s1[i].set(j);
			if(b.a[j][i]==1)s2[i].set(j);
		}
	}
	for (int i=1;i<=c.siz;i++)
	{
		for (int j=1;j<=c.siz;j++)
		{
			if((s1[i]&s2[j]).count())c.a[i][j]=1;
		}
	}
	return c;
}
inline matrix exp(int y)
{
	if(y==0)return one;
	matrix res;
	res=exp(y/2);
	res=multi(res,res);
	if(y%2==1)
	{
		res=multi(res,mul);
	}return res;
}
int ans;
int main()
{
	scanf("%d %d",&n,&m);
	for (int i=1;i<=m;i++)
	{
		scanf("%d %d %d",&edge[i].u,&edge[i].v,&edge[i].w);
	}
	sort(edge+1,edge+m+1,cmp);
	memset(dis,63,sizeof(dis));
	one.siz=vis.siz=mul.siz=n;
	for (int i=1;i<=n;i++)
	{
		one.a[i][i]=1;
		vis.a[i][i]=1;
		dis[i][i]=0;
	}
	int last=0;
	ans=dis[0][0];
	for (int i=1;i<=m;i++)
	{
		vis=multi(vis,exp(edge[i].w-last));
		last=edge[i].w;
		mul.a[edge[i].u][edge[i].v]=1;
		for (int j=1;j<=n;j++)
		{
			for (int k=1;k<=n;k++)
			{
				dis[j][k]=min(dis[j][k],dis[j][edge[i].u]+dis[edge[i].v][k]+1);
			}
		}
		for (int j=1;j<=n;j++)
		{
			if(vis.a[1][j]==1)
			{
				ans=min(ans,last+dis[j][n]);
			}
		}
	}
	if(ans==dis[0][0])
	{
		printf("Impossible\n");
	}
	else
	{
		printf("%d\n",ans);
	}
	return 0;
}
