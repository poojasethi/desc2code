#include <bits/stdc++.h>
using namespace std;

const int maxn = 155 , inf = 1e9+200;

int n,m,ord[maxn],a[maxn],b[maxn],d[maxn],dist[maxn];
vector < int > way[maxn];
bool mp[maxn][maxn],tmp[maxn][maxn],res[maxn][maxn];
bitset < maxn > str[maxn],rev[maxn];

bool comp( const int &x , const int &y ){
	return d[x] < d[y];
}

void matrix( bool ar[maxn][maxn] , bool er[maxn][maxn] ){
	
	for( int i=1 ; i <= n ; i++ )
		for( int j=1 ; j <= n ; j++ ){
			str[i][j] = ar[i][j];
			rev[i][j] = er[j][i];
		}
	
	for( int i=1 ; i <= n ; i++ )
		for( int j=1 ; j <= n ; j++ )
			ar[i][j] = (str[i] & rev[j]).any();
}

int main(){
	
	scanf("%d%d",&n,&m);
	
	for( int i=1 ; i <= m ; i++ ){
		scanf("%d%d%d",&a[i],&b[i],&d[i]);
		ord[i] = i;
	}
	sort( ord+1 , ord+m+1 , comp );
	
	for( int i=1 ; i <= n ; i++ )
		res[i][i] = 1;
	
	vector < int > v;
	int last = 0;
	
	for( int k=1 ; k <= m ; k++ ){
		int cur = ord[k];
		int mul = d[cur] - last;
		last = d[cur];
		
		memcpy( tmp , mp , sizeof tmp );
		
		while( mul ){
			if( mul & 1 )
				matrix(res , tmp);
			matrix(tmp , tmp);
			mul >>= 1;
		}
		
		mp[a[cur]][b[cur]] = 1;
		way[a[cur]].push_back(b[cur]);
		v.clear();
		
		for( int i=1 ; i <= n ; i++ ){
			dist[i] = inf;
			if( res[1][i] ){
				
				if( i == n ){
					printf("%d\n",last);
					return 0;
				}
				
				dist[i] = last;
				v.push_back(i);
			}
		}
		
		for( int i=0 ; i < (int)v.size() ; i++ ){
			int x = v[i];
			for( int j=0 ; j < (int)way[x].size() ; j++ ){
				int y = way[x][j];
				if( dist[y] > dist[x] + 1 ){
					dist[y] = dist[x] + 1;
					if( y == n ){
						printf("%d\n",dist[y]);
						return 0;
					}
					v.push_back(y);
				}
			}
		}
	}
	
	puts("Impossible");
	
	return 0;
}
