#include<stdio.h>
#include<algorithm>
#include<bitset>
using namespace std;
struct node {
    bitset<155>f[155];
    inline void clear() {
        for (int i=1;i<=150;i++)
        for (int j=1;j<=150;j++) f[i][j]=0;
        for (int i=1;i<=150;i++) f[i][i]=1;
    }
    inline void clean() {
        for (int i=1;i<=150;i++)
        for (int j=1;j<=150;j++) f[i][j]=0;
    }
}A,B;
struct node1 {
    int x,y,z;
}a[155];
int i,j,k,l,s,n,m;
inline bool cmp(node1 x,node1 y) {
    return x.z<y.z;
}
inline node cheng(node x,node y) {
    node z;
    //z.clear();
    z.clean();
    for (int i=1;i<=n;i++)
    for (int j=1;j<=n;j++) {
        if (x.f[i][j])
        z.f[i]|=y.f[j];
    }
    return z;
}
inline node work(node x,int p) {
    node o;
    o.clear();
    while (p) {
        if (p&1) o=cheng(o,x);
        x=cheng(x,x);
        p>>=1;
    }
    return o;
}
inline bool check(int l,int r) {
    node gt;
    gt=cheng(B,work(A,r));
    if (gt.f[1][n]) return true;
    B=gt;
    return false;
}
inline int ask(int l,int r) {
    //r--;
    int s=1000000;
    while (l<=r) {
        int mid=(l+r)>>1;
        node gt=cheng(B,work(A,mid));
        if (gt.f[1][n]) s=mid,r=mid-1;
        else l=mid+1;
    }
    return s;
}
int main() {
    scanf("%d%d",&n,&m);
    for (i=1;i<=m;i++) scanf("%d%d%d",&a[i].x,&a[i].y,&a[i].z);
    sort(a+1,a+1+m,cmp);
    if (a[1].z) return puts("Impossible\n"),0;
    i=1; A.f[a[1].x][a[1].y]=1;
    A.f[n][n]=1;
    B.clear();
    for (i=2;i<=m;i++) {
        if (a[i].z!=a[i-1].z) {
            if (check(0,a[i].z-a[i-1].z)) return printf("%d\n",ask(1,a[i].z-a[i-1].z)+a[i-1].z),0;
            A.f[a[i].x][a[i].y]=1;
        }
        else A.f[a[i].x][a[i].y]=1;
    }
    if (check(0,1000)) 
    printf("%d\n",ask(1,1000)+a[m].z);
    else puts("Impossible");
}
    