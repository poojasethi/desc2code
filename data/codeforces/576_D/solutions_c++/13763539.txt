#include <bits/stdc++.h>
#define fi first
#define se second
#define m ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)

using namespace std;

typedef long long lint;
typedef pair <int,int> ii;
typedef pair <int,ii> iii;
typedef vector <int> vi;
typedef vector <ii> vii;

const int maxn=160;

int N,M;
vector <iii> ways;

struct matrices{
	bitset <maxn> base[maxn],mp[maxn],mat[maxn];
	int last;
	
	matrices(int N=0){
		for(int i=1;i<=N;i++)
			mp[i].set(i) , mat[i].set(i);
		last=0;
	}
	
	void reset(){
		for(int i=1;i<=N;i++)
			mp[i].reset() , mp[i].set(i);
	}
	
	void carp(bitset <maxn> a[maxn] , bitset <maxn> b[maxn]){
		bitset<maxn> x[maxn],tmp[maxn];
		
		for(int i=1;i<=N;i++)
			for(int j=1;j<=N;j++)
				x[i].set(j,b[j][i]);
		
		for(int i=1;i<=N;i++)
			for(int j=1;j<=N;j++)
				tmp[i][j]=(a[i]&x[j]).any();
		
		for(int i=1;i<=N;i++)
			a[i]=tmp[i];
	}
	
	void sp(){
		priority_queue <ii , vector <ii> , greater<ii> > heap;
		for(int i=1;i<=N;i++)
			if(mat[1][i])
				heap.push(ii(0,i));
		bool used[maxn];
		int mes[maxn];
		memset(used,0,sizeof used);
		memset(mes,0,sizeof mes);
		
		while(!heap.empty()){
			while(!heap.empty() && used[heap.top().se])
				heap.pop();
			
			if(heap.empty()) break;
			
			ii a=heap.top();
			heap.pop();
			
			used[a.se]=1;
			mes[a.se]=a.fi;
			
			for(int i=1;i<=N;i++)
				if(!used[i] && base[a.se][i])
					heap.push(ii(a.fi+1,i));
		}
		
		if(used[N]){
			printf("%d\n",mes[N]+last);
			exit(0);
		}
	}
	
	void go(int time){
		int x=time-last;
		last=time;
		
		if(!x) return;
		
		carp(mp,base);

		for(int k=0;k<=30;k++){
			if((1<<k)&x)
				carp(mat,mp);
			
			carp(mp,mp);
		}
	}
}asd;

int main(){
	scanf("%d %d",&N,&M);
	
	for(int i=1;i<=M;i++){
		int a,b,c;
		scanf("%d %d %d",&a,&b,&c);
		ways.push_back(iii(c,ii(a,b)));
	}
	
	asd=matrices(N);
	
	sort(ways.begin(),ways.end());
	
	if(ways[0].fi){
		printf("Impossible\n");
		return 0;
	}
	
	for(int i=0;i<ways.size();i++){
		asd.reset();
		asd.go(ways[i].fi);
		asd.base[ways[i].se.fi].set(ways[i].se.se);
		asd.sp();
	}
	
	printf("Impossible\n");

	return 0;
}
