#include<bits/stdc++.h>

using namespace std;

struct mtx{int s[151][151];};

int n,m,adj[151][151];
mtx cur,res,temp;

vector<int> V,T[151];
list<int> Q;
int vis[151];

mtx mult(mtx a,mtx b){
  int ta[151][6],tb[6][151];
  mtx c;
  memset(ta,0,sizeof(ta));
  memset(tb,0,sizeof(tb));
  for(int i=1;i<=150;i++){
    for(int j=0;j<150;j++){
      ta[i][j/30]+=(1<<(j%30))*a.s[i][j+1];
    }
  }
  for(int i=0;i<150;i++){
    for(int j=1;j<=150;j++){
      tb[i/30][j]+=(1<<(i%30))*b.s[i+1][j];
    }
  }
  for(int i=1;i<=150;i++){
    for(int j=1;j<=150;j++){
      c.s[i][j]=0;
      for(int k=0;k<5;k++){
        c.s[i][j]|=ta[i][k]&tb[k][j];
      }
      if(c.s[i][j]>1) c.s[i][j]=1;
    }
  }
  return c;
}

void f(int step){
  temp=cur;
  while(step){
    if(step&1) res=mult(temp,res);
    temp=mult(temp,temp);
    step>>=1;
  }
  return;
}

int reach(int f,int ct){
  memset(vis,-1,sizeof(vis));
  vis[f]=0;
  while(!Q.empty()) Q.pop_front();
  Q.push_back(f);
  while(!Q.empty()){
    int cur=Q.front();
    Q.pop_front();
    for(int i=0;i<T[cur].size();i++){
      int to=T[cur][i];
      if(vis[to]==-1){
        vis[to]=vis[cur]+1;
        Q.push_back(to);
      }
    }
  }
  return vis[n];
}

int main(){
  
  for(int i=1;i<=150;i++){
    for(int j=1;j<=150;j++){
      cur.s[i][j]=0;
      res.s[i][j]=i==j;
    }
  }
  memset(adj,-1,sizeof(adj));
  
  scanf("%d %d",&n,&m);
  
  int ans=2000000000;
  
  for(int i=1;i<=m;i++){
    int a,b,c;
    scanf("%d %d %d",&a,&b,&c);
    if(adj[a][b]==-1) adj[a][b]=c;
    else if(adj[a][b]>c) adj[a][b]=c;
    else continue;
    V.push_back(c);
  }
  sort(V.begin(),V.end());
  int pv=0;
  for(int i=0;i<V.size();i++){
    if(i>0 && V[i-1]==V[i]) continue;
    f(V[i]-pv);
    for(int j=1;j<=n;j++){
      for(int k=1;k<=n;k++){
        if(adj[j][k]==V[i]){
          cur.s[k][j]=1;
          T[j].push_back(k);
        }
      }
    }
    //chk(res);
    for(int j=1;j<=n;j++){
      int k=reach(j,V[i]);
      if(res.s[j][1]==1 && k!=-1){
        ans=min(ans,V[i]+k);
      }
    }
    pv=V[i];
  }
  if(ans==2000000000) printf("Impossible\n");
  else printf("%d\n",ans);
  return 0;
}