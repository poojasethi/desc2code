#include <cstdio>
#include <bitset>
#include <cstring>
#include <iostream>
#include <algorithm>
#define N 160
using namespace std;
bitset<N>use[N],base[N],tmp[N];
int dis[N][N];
int n,m; 
struct Line
{
    int x,y,d;
}edge[N];
bool cmp(Line a,Line b)
{
    return a.d<b.d;
}
void mul(bitset<N>*a,bitset<N>*b)
{
    bitset<N>ret[N];
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            if(a[i][j])ret[i]|=b[j];
    for(int i=1;i<=n;i++)a[i]=ret[i];
}
void Quick_Power(bitset<N>*a,int b)
{
    bitset<N>ret[N];
    for(int i=1;i<=n;i++)ret[i][i]=1;
    while(b)
    {
        if(b&1)mul(ret,a);
        mul(a,a);
        b>>=1;
    }
    for(int i=1;i<=n;i++)a[i]=ret[i];
}
int ans;
int main()
{
    ans=0x3f3f3f3f;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=m;i++)
    {
        int x,y,d;
        scanf("%d%d%d",&x,&y,&d);
        edge[i].x=x,edge[i].y=y,edge[i].d=d;
    }
    sort(edge+1,edge+m+1,cmp);
    memset(dis,0x3f,sizeof(dis));
    for(int i=1;i<=n;i++)use[i][i]=1,dis[i][i]=0; 
    int la=0;
    for(int i=1;i<=m;i++)
    {
        int x=edge[i].x,y=edge[i].y,d=edge[i].d;
        for(int j=1;j<=n;j++)
            for(int k=1;k<=n;k++)
                dis[j][k]=min(dis[j][x]+1+dis[y][k],dis[j][k]);
        for(int j=1;j<=n;j++)tmp[j]=base[j];
        Quick_Power(tmp,d-la);
        mul(use,tmp);
        for(int j=1;j<n;j++)
        {
            if(use[1][j])
            {
                if(dis[j][n]!=0x3f3f3f3f)
                    ans=min(ans,d+dis[j][n]);
            }
        }
        la=d;
        base[x][y]=1;
    }
    if(ans==0x3f3f3f3f)puts("Impossible");
    else printf("%d\n",ans);
} 