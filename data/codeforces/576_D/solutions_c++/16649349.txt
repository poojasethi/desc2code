#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define maxn 155
bool v[32][maxn][maxn],rea[maxn],rea2[maxn];
int n,m,sta[maxn],dep[maxn],l[maxn],r[maxn],w[maxn],od[maxn];
bool cmp(const int &p,const int &q)
{
	return w[p]<w[q];
}
void add(int d,int x,int y)
{
	if(v[d][x][y] || d>30) return;
	v[d][x][y]=true;
	for(int i=1; i<=n; i++)
	{
		if(v[d][y][i]) add(d+1,x,i);
		if(v[d][i][x]) add(d+1,i,y);
	}
}
void get(int tme)
{
	int tmp[35],cnt=-1;
	while(tme)
	{
		tmp[++cnt]=tme&1;
		tme>>=1;
	}
	memset(rea2,0,sizeof(rea2));
	for(int d=cnt; d>=0; d--)
		if(tmp[d])
		{
			memset(rea2,0,sizeof(rea2));
			for(int i=1; i<=n; i++) if(rea[i])
				for(int j=1; j<=n; j++) if(v[d][i][j]) rea2[j]=true;
			memcpy(rea,rea2,sizeof(rea));
		}
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1; i<=m; i++)
	{
		scanf("%d%d%d",&l[i],&r[i],&w[i]);
		od[i]=i;
	}
	int ans=0x7fffffff;
	sort(od+1,od+1+m,cmp);
	if(w[od[1]]!=0) {puts("Impossible"); return 0;}
	rea[1]=true;
	for(int i=1; i<=m; i++)
	{
		int lst=i;
		while(i<m && w[od[i+1]]==w[od[i]]) i++;
		for(int j=lst; j<=i; j++) add(0,l[od[j]],r[od[j]]);
		memset(dep,0x3f,sizeof(dep));
		int ta=1,fr=0;
		for(int j=1; j<=n; j++) if(rea[j]) sta[++fr]=j,dep[j]=0;
		while(ta<=fr)
		{
			int np=sta[ta++],ndt=dep[np];
			for(int j=1; j<=n; j++) if(v[0][np][j] && dep[j]==0x3f3f3f3f)
			{
				dep[j]=ndt+1;
				sta[++fr]=j;
			}
		}
		if(dep[n]!=0x3f3f3f3f) ans=min(ans,w[od[i]]+dep[n]);
		if(i!=m) get(w[od[i+1]]-w[od[i]]);
	}
	if(ans!=0x7fffffff) printf("%d\n",ans);
	else puts("Impossible");
	return 0;
}