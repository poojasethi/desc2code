#include<cstdio>
#include<bitset>
#define X first
#define Y second
#include<algorithm>
inline void read(int&r)
{
	char c;r=0;bool flag=false;
	do c=getchar();while(c!='-'&&(c<'0'||c>'9'));
	if(c=='-')flag=true,c=getchar();
	do r=r*10+c-'0',
	   c=getchar();while(c>='0'&&c<='9');
	if(flag)r*=-1;
}
/**************************模板****************************
srt:2016 6 20 20:08
end:2016 6 20 21:33
nme:Flights for Regular Customers
src:cf round 319 div1 D
smr:最后的错误竟是次幂的res.meta()meta()没有初始化为0 
**********************************************************/

int n;
struct M//Matrix_boolean
{
	bool o[151][151];
	std::bitset<151>r[151],c[151];
	void meta()
	{
		for(int i=1;i<=n;
			c[i].set(i),
			r[i].set(i),
			o[i][i]=true,i++)
		for(int j=1;j<=n;j++)
			c[j].reset(i),
			r[i].reset(j),
			o[i][j]=false;
	}
	M operator*(const M&O)const
	{
		M res;
		for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
		if((res.o[i][j]=(r[i]&O.c[j]).any()))
			res.r[i].set(j),
			res.c[j].set(i);
		else
			res.r[i].reset(j),
			res.c[j].reset(i);
		return res;
	}
	M&operator*=(const M&O)
	{
		return*this=*this*O;
	}
	M operator^(int k)const
	{
		M res,p=*this;res.meta();
		while(k)
		{
			if(k&1)res*=p;
			k>>=1;p*=p;
		}
		return res;
	}
}c,o;

const int inf=0x3fffffff;
int dis[151][151],now;
void init()
{
	for(int i=1;i<=n;dis[i][i]=0,i++)
	for(int j=1;j<=n;j++)
		dis[i][j]=inf;
}
void floyd()
{
	for(int k=1;k<=n;k++)
	for(int i=1;i<=n;i++)
	for(int j=1;j<=n;j++)
		dis[i][j]>dis[i][k]+dis[k][j]
	&&( dis[i][j]=dis[i][k]+dis[k][j] );
	int path=inf;
	for(int i=1;i<=n;i++)
		if(c.o[1][i]&&dis[i][n]<path)
			path=dis[i][n];
	if(path<inf)
		printf("%d\n",now+path),exit(0);
}

std::pair<int,std::pair<int,int> >e[22500];
int main()
{
	int m,i;read(n),read(m);init();c.meta();
	for(i=0;i<m;i++)
		read(e[i].Y.X),
		read(e[i].Y.Y),
		read(e[i].X);
	std::sort(e,e+m);
	for(i=0;i<m;i++)
	{
		c*=o^(e[i].X-now);
		now=e[i].X;
		o.c[e[i].Y.Y].set(e[i].Y.X);
		o.r[e[i].Y.X].set(e[i].Y.Y);
		o.o[e[i].Y.X][e[i].Y.Y]=true;
		dis[e[i].Y.X][e[i].Y.Y]=1;
		floyd();
	}
	puts("Impossible");
	return 0;
}
                                                                                                                                                 