#include <bits/stdc++.h>

#define Task "D"

#define N 155
#define delta (1 << 31) - 1
#define block(x) (x >> 5)
#define offset(x) (x & 31)
#define copy(a, b) memcpy(a, b, sizeof b)

using namespace std;

typedef unsigned int matrix[N][5];

int n, m, res;
struct data {
  int u, v, d;
  bool operator < (const data &other) const {
    return d < other.d;
  }
} a[N];
matrix c, root, p, q, x[30], y[30];

int mul1(matrix &A, matrix &B, matrix &C) {
  for (int i = 0; i < n; i++) {
    for (int k = 0; k < 5; k++) {
      C[i][k] = 0;
    }
    for (int j = 0; j < n; j++) {
      if (A[i][block(j)] & (1 << offset(j))) {
        for (int k = 0; k < 5; k++) {
          C[i][k] |= B[j][k];
        }
      }
    }
  }
}

int mul2(matrix &A, matrix &B, matrix &C) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < 5; j++) {
      C[i][j] = A[i][j] | B[i][j];
    }
  }
}

int process() {
  copy(x[0], c);
  copy(y[0], c);
  for (int i = 1; i < 30; i++) {
    mul1(x[i - 1], x[i - 1], x[i]);
    mul1(x[i - 1], y[i - 1], y[i]);
    mul2(y[i], y[i - 1], y[i]);
  }
}

int calcResult(int t) {
  int l = 0;
  copy(p, root);
  for (int i = 29; i >= 0; i--) {
    mul1(p, y[i], q);
    if (!(q[0][block(n - 1)] & (1 << offset(n - 1)))) {
      l |= 1 << i;
      mul1(p, x[i], q);
      copy(p, q);
    }
  }
  mul1(p, c, q);
  if (q[0][block(n - 1)] & (1 << offset(n - 1))) {
    res = min(res, t + l + 1);
  }
}

int main() {
  //cout << ((1 << 31) - 1);
  //freopen(Task".in", "r", stdin);
  //freopen(Task".out", "w", stdout);
  ios_base::sync_with_stdio(0);
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    cin >> a[i].u >> a[i].v >> a[i].d;
    a[i].u--;
    a[i].v--;
  }
  sort(a, a + m);

  int t = 0;
  res = delta;
  root[0][0] = 1;
  for (int i = 0; i < m; ) {
    while (i < m && a[i].d == t) {
      c[a[i].u][block(a[i].v)] |= 1 << offset(a[i].v);
      i++;
    }
    process();
    calcResult(t);
    if (i < m) {
      int k = a[i].d - t;
      for (int i = 0; i < 30; i++) {
        if (k & (1 << i)) {
          mul1(root, x[i], p);
          copy(root, p);
        }
      }
      t = a[i].d;
    }
  }
  if (res < delta) {
    cout << res;
  } else {
    cout << "Impossible";
  }
}
