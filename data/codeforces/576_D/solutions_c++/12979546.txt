#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <bitset>
#include <cmath>

#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define PER(i, a, b) for (int i = (a); i > (b); --i)
#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)
#define ROF(i, a, b) for (int i = (a); i >= (b); --i)
    
inline int read()
{
    static char ch;
    while (ch = getchar(), ch < '0' || ch > '9');
    int res = ch - 48;
    while (ch = getchar(), ch >= '0' && ch <= '9') res = res * 10 + ch - 48;
    return res;
}

const int N = 151, INF = 0x3f3f3f3f;
int n, m, ans = INF, dist[N][N];
int eu[N], ev[N], ed[N], p[N];
struct Matrix
{
    std::bitset<N> a[N];
    Matrix()
    {
        REP(i, 0, n) a[i].reset();
    }
    inline void Init()
    {
        REP(i, 0, n) a[i].reset(), a[i].set(i);
    }
    inline Matrix operator * (const Matrix &rhs)
    {
        Matrix res;
        REP(i, 0, n) REP(j, 0, n)
            if (a[i][j]) res.a[i] |= rhs.a[j];
        return res;
    }
    inline Matrix operator ^ (int Exp)
    {
        Matrix res, x = *this;
        res.Init();
        for (; Exp > 0; Exp >>= 1, x = x * x)
            if (Exp & 1) res = res * x;
        return res;
    }
} f, g;

inline bool cmp(const int &x, const int &y)
{
    return ed[x] < ed[y];
}

inline void Graph_Init()
{
    memset(dist, INF, sizeof(dist));
    REP(i, 0, n) dist[i][i] = 0;
    g.Init();
}

int main()
{
    n = read(); m = read();
    FOR(i, 1, m)
    {
        eu[i] = read() - 1;
        ev[i] = read() - 1;
        ed[i] = read();
        p[i] = i;
    }
    std::sort(p + 1, p + m + 1, cmp);
    
    Graph_Init();
    
    FOR(k, 1, m)
    {
        int u = eu[p[k]], v = ev[p[k]], d = ed[p[k]];

        REP(i, 0, n) REP(j, 0, n)
            if (dist[i][u] + 1 + dist[v][j] < dist[i][j])
                dist[i][j] = dist[i][u] + 1 + dist[v][j];
        
        g = g * (f ^ (d - ed[p[k - 1]]));
        
        REP(i, 0, n) if (g.a[0][i] && dist[i][n - 1] != INF && d + dist[i][n - 1] < ans)
            ans = d + dist[i][n - 1];
        f.a[u][v] = 1;
    }
    
    if (ans == INF) puts("Impossible");
    else printf("%d\n", ans);
    return 0;
}