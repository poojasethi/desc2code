#include "bits/stdc++.h"
#define MAXN 100009
#define INF 1000000007
#define mp(x,y) make_pair(x,y)
#define all(v) v.begin(),v.end()
#define pb(x) push_back(x)
#define wr cout<<"----------------"<<endl;
#define ppb() pop_back()
#define tr(ii,c) for(typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)
#define ff first
#define ss second

using namespace std;

typedef long long ll;
typedef pair<int,int> PII;
template<class T>bool umin(T& a,T b){if(a>b){a=b;return 1;}return 0;}
template<class T>bool umax(T& a,T b){if(a<b){a=b;return 1;}return 0;}
//freopen("file.in","r",stdin);
//freopen("file.out","w",stdout);
int n,q;
class matris{
	public:
	bitset<151>m[151];
	void mul(matris x){
		bitset<151>row[151],col[151];
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++){
				if(m[i][j])
					row[i][j]=1;
				if(x.m[i][j])
					col[j][i]=1;
			}
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++)
				m[i][j]=(row[i]&col[j]).any();
	}
}ans,cur;
matris Fe(matris x,int y){
	if(y==1)
		return x;
	matris h=Fe(x,y/2);
	h.mul(h);
	if(y&1)
		h.mul(x);
	return h;	
}
int res=INT_MAX,vis[151];
vector<PII>adj[151];
void bfs(int node,int cost){
	memset(vis,0,sizeof(vis));
	queue<PII>q;
	q.push(mp(node,cost));
	while(!q.empty()){
		int nd=q.front().ff;
		int cs=q.front().ss;
		q.pop();
		if(vis[nd])
			continue;
		if(nd==n){
			umin(res,cs);
			return;
		}	
		vis[nd]=1;	
		tr(it,adj[nd])
			if(cs>=it->ss)
				q.push(mp(it->ff,cs+1));
	}
}
int main(){
	scanf("%d%d",&n,&q);
	vector<pair<int,PII> >v;
	for(int i=1;i<=q;i++){
		int x,y,d;
		scanf("%d%d%d",&x,&y,&d);
		adj[x].pb(mp(y,d));
		v.pb(mp(d,mp(x,y)));
	}
	v.pb(mp(0,mp(-1,-1)));
	sort(all(v));
	for(int i=1;i<=n;i++)
		ans.m[i][i]=1;
	for(int i=1;i<=q;i++){
		if(v[i].ff>v[i-1].ff)
			ans.mul(Fe(cur,v[i].ff-v[i-1].ff));
	//	ans.m[v[i].ss.ff][v[i].ss.ss]=1;
	/*
		for(int j=1;j<=n;j++)
			for(int k=1;k<=n;k++)
				if(ans.m[j][k])
					printf("%d-%d\n",j,k);
		printf("-----------------\n");			*/
		for(int j=1;j<=n;j++)
			if(ans.m[1][j])
				bfs(j,v[i].ff);
		cur.m[v[i].ss.ff][v[i].ss.ss]=1;
	}
	if(res==INT_MAX)
		printf("Impossible\n");
	else	
		printf("%d\n",res);
	return 0;
}
