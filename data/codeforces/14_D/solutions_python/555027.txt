def read():
    return map(int, raw_input().split())

def longest(u):
    v, d = dfs(u, None)
    v, d = dfs(v, None)
    return d

def dfs(u, f):
    best_ver = u
    best_dis = -1
    for v in edge[u]:
        if v != f:
            ver, dis = dfs(v, u)
            if dis > best_dis:
                best_ver, best_dis = ver, dis
    return best_ver, best_dis + 1

n = input()
ans = 0
edge = [set() for _ in xrange(n)]
for i in xrange(n - 1):
    u, v = read()
    u -= 1
    v -= 1
    edge[u].add(v)
    edge[v].add(u)

for u in xrange(n):
    for v in edge[u]:
        if u < v:
            edge[u].remove(v)
            edge[v].remove(u)
            ans = max(ans, longest(u) * longest(v))
            edge[u].add(v)
            edge[v].add(u)
print ans
