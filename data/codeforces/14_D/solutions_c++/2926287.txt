#include<iostream>
#include<cstring>
using namespace std;
const int mm=233;
int map[mm][mm];
int n,ans;
int dep;
int dfs(int u,int p)
{
  int max1=0,max2=0;
  int path_max=0;
  for(int i=1;i<=n;i++)
    if(map[u][i]&&i!=p)
  {
    int z=dfs(i,u);
    if(path_max<z)path_max=z;
    if(max1<dep)///更新当前点的两条最长路径
    {
      max2=max1;max1=dep;
    }
    else if(max2<dep)max2=dep;

  }
  if(path_max<max1+max2)path_max=max1+max2;///最长路径等于最长两条分路径和
  dep=max1+1;///更新上层最大深度为当前层最大深度
  return path_max;
}

int main()
{
  int a,b;
  while(cin>>n)
  { memset(map,0,sizeof(map));
    for(int i=0;i<n-1;i++)
    {
      cin>>a>>b;map[a][b]=map[b][a]=1;
    }
    ans=0;
    for(int i=1;i<=n;i++)
      for(int j=1;j<=n;j++)
      if(map[i][j])
    {
      int a=dfs(i,j);
      int b=dfs(j,i);
      if(ans<a*b)
        ans=a*b;
    }
    cout<<ans<<"\n";
  }
}

					    		 	  		 	 	