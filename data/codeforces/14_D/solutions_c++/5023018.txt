#include <iostream>
#include <vector>
using namespace std;

vector<int> v[201];
int n, deep;

int dfs(int x, int pre)
{
	int s = 0, maxd1 = 0, maxd2 = 0;
	for(int i = 0; i < v[x].size(); i++)
		if(v[x][i] != pre)
		{
			s = max(dfs(v[x][i], x), s);
			if(deep > maxd1)
			{
				maxd2 = maxd1;
				maxd1 = deep;
			}
			else
				maxd2 = max(maxd2, deep);
		}
	s = max(s, maxd1 + maxd2);
	deep = maxd1 + 1;
	return s;
}

int main()
{
	int x, y;
	cin >> n;
	for(int i = 1; i < n; i++)
	{
		cin >> x >> y;
		v[x].push_back(y);
		v[y].push_back(x);
	}
	int ans = 0;
	for(int i = 1; i <= n; i++)
		for(int j = 0; j < v[i].size(); j++)
		{
			x = dfs(i, v[i][j]);
			y = dfs(v[i][j], i);
			ans = max(ans, x * y);
		}
	cout << ans << endl;
	return 0;
}
