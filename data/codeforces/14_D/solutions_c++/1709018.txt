#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

#define N 205
bool g[N][N];
int n;
int best;
int x[N],y[N];
int dist[N];
void dfs(int root,int pre)
{
    for(int i=1;i<=n;i++)
    if(g[root][i]&&i!=pre)
    {
        dist[i]=dist[root]+1;
        dfs(i,root);
    }
}
int solve(int root){


    for(int i=1;i<=n;i++) dist[i]=0;

    dfs(root,-1);

    int t=root;
    for(int i=1;i<=n;i++) if(dist[i]>dist[t]) t=i;

    dist[t]=0;

    dfs(t,-1);

    t=0;

    for(int i=1;i<=n;i++) t=max(t,dist[i]);
    return t;
}
int main()
{
    cin>>n;
    for(int i=0;i<n-1;i++){
       cin>>x[i]>>y[i];
       g[x[i]][y[i]]=g[y[i]][x[i]]=1;
    }

    best=0;

    for(int i=0;i<n-1;i++){

        g[x[i]][y[i]]=g[y[i]][x[i]]=0;

        best=max(best,solve(x[i])*solve(y[i]));

        g[x[i]][y[i]]=g[y[i]][x[i]]=1;
    }
    cout<<best<<endl;
}
