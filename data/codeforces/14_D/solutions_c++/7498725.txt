#include <cstdio>
#include <algorithm>
using namespace std;
int Map[202][202];
int son[202];
struct Edge
{
	int link,next;
}ed[404];
int Ecnt=1;
inline void Add(int u,int v)
{
	ed[++Ecnt].link=v,ed[Ecnt].next=son[u];
	son[u]=Ecnt;
}
bool Go[404];
int st,len;
void Dfs(int x,int fa,int dep)
{
	if (dep>len) st=x,len=dep;
	for (int i=son[x];i;i=ed[i].next)
	if (!Go[i] && ed[i].link!=fa) Dfs(ed[i].link,x,dep+1);
}
int Get_D(int x)
{
	st=0,len=-1;
	Dfs(x,0,0);
	len=-1;
	Dfs(st,0,0);
	return len;
}
int ans=0,n;
int main()
{
	scanf("%d",&n);
	for (int i=1,u,v;i<n;i++) scanf("%d%d",&u,&v),Add(u,v),Add(v,u);
	for (int i=1;i<=n;i++)
	{
		for (int j=son[i];j;j=ed[j].next)
		if (ed[j].link>i)
		{
			Go[j]=Go[j^1]=true;
			int A=Get_D(i),B=Get_D(ed[j].link);
			ans=max(ans,A*B);
			Go[j]=Go[j^1]=false;
		}
	}
	printf("%d\n",ans);
	return 0;
}
