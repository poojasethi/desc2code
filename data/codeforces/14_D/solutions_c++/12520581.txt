#include <iostream>
#include <algorithm>
#include <cstdio>
#include <vector>
using namespace std;
const int maxn = 200 + 5;
struct t
{
	int a, b;
}road[maxn];
int n;
int profit = 0;
vector<int> v[maxn];
int deep = 0;
int dfs(int pre, int next)
{
	int res = 0;
	int max1 = 0, max2 = 0;
	for (int i = 0; i < v[next].size(); i++)
	{
		if (v[next][i] != pre)
		{
			res = max(res, dfs(next, v[next][i]));
			if (deep > max1)
			{
				max2 = max1;
				max1 = deep;
			}
			else
				max2 = max(max2, deep);
		}
	}
	res = max(res, max1 + max2);
	deep = max1 + 1;
	return res;
}
int main()
{
	//freopen("test.in", "r", stdin);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> road[i].a >> road[i].b;
		v[road[i].a].push_back(road[i].b);
		v[road[i].b].push_back(road[i].a);
	}
	for (int i = 0; i < n; i++)
	{
		int c1 = road[i].a;
		int c2 = road[i].b;
		profit = max(profit, dfs(c1, c2) * dfs(c2, c1));
	}
	cout << profit << endl;
	return 0;
}

 	   				 			 	 		 	 				   		