#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

#define MP make_pair
#define PB push_back

const int MAXN = 5000;
int c[MAXN], col, a[MAXN], cnt[MAXN];
int n, m;
vector<pair<int, int> > ans;

void DFS(int n)
{
	if(c[n])
		return;
	c[n] = col;
	DFS(a[n]);
}

int C()
{
	col = 1;
	fill(c, c + MAXN, 0);
	fill(cnt, cnt + MAXN, 0);
	for(int i = 1; i <= n; i++)
	{
		if(!c[i])
		{
			DFS(i);
			col++;
		}
		cnt[c[i]]++;
	}
	col--;
}

int main()
{
	cin >> n;
	for(int i = 1; i <= n; i++)
		cin >> a[i];
	cin >> m;
	while(n - C() < m)
	{
		for(int i = 1; i <= n; i++)
			if(c[i] != c[1])
			{
				swap(a[i], a[1]);
				ans.PB(MP(1, i));
				break;
			}
	}
	while(n - C() > m)
	{
		bool flag = false;
		for(int j = 1; j <= n && !flag; j++)
		for(int i = 1; cnt[c[j]] > 1 && i <= n; i++)
			if(c[i] == c[j] && i != j)
			{
				swap(a[i], a[j]);
				ans.PB(MP(j, i));
				flag = true;
				break;
			}
	}
	cout << ans.size() << endl;
	for(int i = 0; i < ans.size(); i++)
		cout << ans[i].first << ' ' << ans[i].second << ' ';
	cout << endl;
	return 0;
}
