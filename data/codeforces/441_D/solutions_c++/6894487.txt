#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>

using namespace std;

typedef pair<int, int> ii;

int p[3000];
bool v[3000];
int c[3000];

void dfs(int i)
{
	v[i] = true;
	if (!v[p[i]])
		dfs(p[i]);
}

int main()
{
	int n, m, x = 0;
	cin >> n;
	for (int i = 0; i < n; ++i)
	{
		cin >> p[i];
		p[i]--;
	}
	cin >> m;
	int k = 0;
	for (int i = 0; i < n; ++i)
	{
		if (!v[i])
		{
			k++;
			dfs(i);
		}
	}
	memset(v, false, sizeof(v));
	cout << abs(n-m-k) << endl;
	if (k > n-m)
	{
		dfs(0);
		for (int i = 1; i < n && k > n-m; ++i)
		{
			if (!v[i])
			{
				cout << "1 " << i+1 << " ";
				dfs(i);
				k--;
			}
		}
	}
	else if (k < n-m)
	{
		for (int i = 0; i < n && k < n-m; ++i) 
		{
			vector<int>pos(n, -1);
			int cur = 0;
			for (int j = p[i]; j != i; j = p[j])
				pos[j] = cur++;
			pos[i] = cur;
			
			cur = 0;
			for (int j = i+1; j < n && k < n-m; ++j)
				if (pos[j] >= cur) 
				{	
					cout << i+1 << " " << j+1 << " ";
					k++;
					cur = pos[j]+1;
					swap(p[i], p[j]);
				}
		}
	}
	return 0;
}
