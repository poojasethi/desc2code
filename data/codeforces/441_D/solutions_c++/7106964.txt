#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int n; cin >> n;
    int p[n+1];
    for (int i=1; i<=n; i++) cin >> p[i];
    int m; cin >> m;
    int prev[n+1];
    for (int i=1; i<=n; i++) prev[p[i]] = i;
    int partner[n+1];
    vector<int> heads;
    for (int i=1; i<=n; i++) {
	int j=p[i];
	while (j > i) {
	    j = p[j];
	}
	partner[i] = j;
	if (j == i) heads.push_back(i);
    }
    sort(heads.begin(),heads.end());
    if (m == n-heads.size()) cout << 0 << endl;//Distance already correct
    else if (m > n-heads.size()) { //Increase the distance
	cout << (m-n+heads.size()) << endl;
	for (int i=1; i<=m-n+heads.size(); i++) {
	    cout << 1 << " " << heads[i] << " ";
	}
	cout << endl;
    } else { //Split cycles, one by one
	cout << (n-heads.size() -m) << endl;
	int steps = n-heads.size()-m;
	vector< pair<int,int> > T;
	for (int i=1; i<=n; i++) {
	    if (partner[i] != i) T.push_back( pair<int,int>(partner[i],i) );
	}
	sort(T.begin(),T.end());
	for (int i=0; i<steps; i++) {
	    cout << T[i].first << " " << T[i].second << " ";
	}
	cout << endl;
    }
}
