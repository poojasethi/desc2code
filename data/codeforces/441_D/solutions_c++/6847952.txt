#include <iostream>
#include <cstring>
#include <vector>
using namespace std;
const int MAX = 3005;
int p[MAX];
vector<int> ans, roots;
bool mark[MAX];
void dfs(int v)
{
	mark[v] = true;
	if (!mark[p[v]])
		dfs(p[v]);
}
int main()
{
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> p[i];
	int cur = 0;
	for (int i = 1; i <= n; i++)
		if (!mark[i])
		{
			roots.push_back(i);
			dfs(i);
			cur++;
		}
	int m;
	cin >> m;
	m = n - m;
	if (cur < m)
	{
		int v = 1;
		while (cur != m)
		{
			while (p[v] == v)
				v++;
			memset(mark, false, sizeof(mark));
			dfs(v);
			for (int i = v + 1; i <= n; i++)
				if (mark[i])
				{
					ans.push_back(v);
					ans.push_back(i);
					cur++;
					swap(p[v], p[i]);
					break;
				}
		}
	}
	else
	{
		for (int i = 1; i < (int)roots.size(); i++)
			if (cur != m)
			{
				ans.push_back(roots[0]);
				ans.push_back(roots[i]);
				cur--;
			}
	}
	cout << ans.size() / 2 << endl;
	for (int i = 0; i < (int)ans.size(); i++)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
}
