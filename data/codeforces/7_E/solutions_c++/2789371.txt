#include<stdio.h>
#include<string.h>
#include<string>
#include<tr1/unordered_map>
#include<algorithm>
using namespace std;
using namespace tr1;
typedef pair<int,int> pii;
int n;
unordered_map<string,pii> M;
char s[400];
pii calc(int l,int r)
{
	if(l>r)return make_pair(0,0);
	int p=0;
	for(int i=r,w=0;i>=l;i--)
	{
		if(s[i]==')')w++;
		else if(s[i]=='(')w--;
		else if(!w&&(s[i]=='+'||s[i]=='-')){p=i;break;}
	}
	if(p)
	{
		pii x=calc(l,p-1),y=calc(p+1,r);
		if(s[p]=='-'&&y.first>1)return make_pair(0,0);
		return x.first&&y.first?make_pair(x.first+y.first,1):make_pair(0,0);
	}
	for(int i=r,w=0;i>=l;i--)
	{
		if(s[i]==')')w++;
		else if(s[i]=='(')w--;
		else if(!w&&(s[i]=='*'||s[i]=='/')){p=i;break;}
	}
	if(p)
	{
		pii x=calc(l,p-1),y=calc(p+1,r);
		if(x.first!=1||y.first!=1)return make_pair(0,0);
		if(s[p]=='/'&&y.second>1)return make_pair(0,0);
		return make_pair(1,x.second+y.second);
	}
	if(s[l]=='('&&s[r]==')')
	{
		pii t=calc(l+1,r-1);
		if(t.first)return make_pair(1,1);
		return make_pair(0,0);
	}
	string str(s+l,s+r+1);
	if(M.count(str))return M[str];
	return make_pair(1,1);
}
pii work()
{
	gets(s+1);
	int nn=0,n=strlen(s+1);
	for(int i=1;i<=n;i++)if(s[i]!=' ')s[++nn]=s[i];
	return calc(1,nn);
}
int main()
{
	scanf("%d ",&n);
	for(int i=1;i<=n;i++)
	{
		scanf(" #%*s");
		char buf[300];
		scanf("%s",buf);
		string str(buf);
		M[str]=work();
	}
	puts(work().first?"OK":"Suspicious");
	return 0;
}
