import re
import string

class Token:
    sus = 0
    oas = 1
    omd = 2
    fac = 3

def foo(s):
    if s in d: return d[s]
    
    brk = 0
    for i in xrange(len(s) - 1, 0, -1):
        if s[i] in '()': brk += (1, -1)[s[i] == '(']
        if brk == 0 and s[i] in '+-':
            val = foo(s[:i]), foo(s[i+1:])
            return Token.sus if Token.sus in val or s[i] == '-' and val[1] == Token.oas else Token.oas

    brk = 0
    for i in xrange(len(s) - 1, 0, -1):
        if s[i] in '()': brk += (1, -1)[s[i] == '(']
        if brk == 0 and s[i] in '*/':
            val = foo(s[:i]), foo(s[i+1:])
            return Token.sus if Token.sus in val or Token.oas in val or s[i] == '/' and val[1] == Token.omd else Token.omd

    d[s] = Token.sus if s.startswith('(') and foo(s[1:-1]) == Token.sus else Token.fac
    return d[s]

d = {}
for i in xrange(input()):
    m = re.match(r'( *# *define) +(\w+) +([^\n]*)', raw_input())
    s = re.sub(r'\s+', '', m.group(3))
    d[m.group(2)] = foo(s)
s = re.sub(r'\s+', '', raw_input())
print 'Suspicious' if foo(s) == Token.sus else 'OK'
