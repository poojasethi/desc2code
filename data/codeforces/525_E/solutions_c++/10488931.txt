#include<algorithm>
#include<iostream>
#include<cstdio>
#include<map>
#include<cstring>
using namespace std;
typedef long long LL;
struct node
{
	LL x;
	LL y;
}pre[1111111];
map<LL , LL> mp[30];
LL Mid , cnt = 0 , n , k , s , a[50] , jc[50];
void dfs1(LL p , LL q , LL r)
{
	if(q > k || r > s)
		return;
	if(p == Mid + 1)
	{
		pre[++cnt].x = q;
		pre[cnt].y = r;
		return;
	}
	dfs1(p+1 , q , r);
	dfs1(p+1 , q , r + a[p]);
	if(a[p] <= 19)
	{
		dfs1(p+1 , q+1 , r + jc[a[p]]);
	}
}
void dfs2(LL p , LL q , LL r)
{
	if(q > k || r > s)
		return;
	if(p == n + 1)
	{
		mp[q][r]++;
		return;
	}
	dfs2(p+1 , q , r);
	dfs2(p+1 , q , r + a[p]);
	if(a[p] <= 19)
		dfs2(p+1 , q+1 , r + jc[a[p]]);
}
int main()
{
	cin >> n >> k >> s;
	jc[0] = 1;
	for(int i=1; i<=19; ++i)
		jc[i] = (i * jc[i-1]);
	for(int i=1; i<=n; ++i)
	{
		scanf("%I64d", &a[i]);
	}
	Mid = n / 2;
	LL ans = 0;
	dfs1(1 , 0 , 0);
	dfs2(Mid + 1, 0 , 0);
	for(int i=1; i<=cnt; ++i)
	{
		for(int j=0; j<=k-pre[i].x; ++j)
			ans += mp[j][s-pre[i].y];
	}
	cout << ans << endl;
	return 0;
}
