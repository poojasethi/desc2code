#include <iostream>
#include <algorithm>
#include <string.h>
#include <map>
#include<cstdio>
using namespace std;
typedef long long LL;
map<LL,int>mp[30];
LL A[30];
LL dp[30];
LL time[1000000];
int n,K;
LL S,ans;
void dfs(int p, int k, LL s){
    if(p==n/2){
         mp[k][s]++;
    }else{
        dfs(p+1,k,s);
        if(s+A[p]<=S)dfs(p+1,k,s+A[p]);
        if(k+1<=K && A[p]<=18 &&  s+dp[A[p]] <=S ) dfs(p+1,k+1,s+dp[A[p]]);
    }
}
void dfs1(int p, int k, LL s){
    if(p==n){
         for(int i =0; i+k<=K; i++)
            if(mp[i].count(S-s)>0) ans+=mp[i][S-s];
    }else{
         dfs1(p+1,k,s);
         if(s+A[p]<=S) dfs1(p+1,k,s+A[p]);
         if(k+1<=K && A[p]<=18 && s+dp[A[p]]<=S) dfs1(p+1,k+1,s+dp[A[p]]);
    }
}
int main()
{


   dp[0]=1;
   for(LL i=1; i<=18; i++) dp[i]=dp[i-1]*i;
   ans=0;
   scanf("%d%d%I64d",&n,&K,&S);
   for(int i=0; i<n; i++)
      scanf("%I64d",&A[i]);
   dfs(0,0,0);
   dfs1(n/2,0,0);
   printf("%I64d\n",ans);
    return 0;
}
