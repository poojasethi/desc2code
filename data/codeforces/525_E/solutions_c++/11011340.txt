#include <cstdio>
#include <iostream>
#include <algorithm>
#include <map>
using namespace std;
typedef long long LL;

const int maxn = 30;
LL a[maxn], fac[maxn], S, ans;
int n, m, k;
map<LL, LL> cnt[maxn];

void dfs(int d, int used, LL s)
{
    if(s > S) return;
	if(d == m)
	{
		cnt[used][s]++;
		return;
	}
	dfs(d + 1, used, s);
	dfs(d + 1, used, s + a[d]);
	if(a[d] < 19) dfs(d + 1, used + 1, s + fac[a[d]]);
}

void dfs2(int d, int used, LL s)
{
    if(s > S) return;
	if(d == n)
	{
		for(int i = 0; i + used <= k; i++) if(cnt[i].count(S - s)) ans += cnt[i][S - s];
		return;
	}
	dfs2(d + 1, used, s);
	dfs2(d + 1, used, s + a[d]);
	if(a[d] < 19) dfs2(d + 1, used + 1, s + fac[a[d]]);
}

int main()
{
	//freopen("in.txt", "r", stdin);

	fac[0] = fac[1] = 1;
	for(int i = 2; i <= 19; i++) fac[i] = fac[i - 1] * i;

	scanf("%d%d%I64d", &n, &k, &S);
	for(int i = 0; i < n; i++) scanf("%I64d", &a[i]);
	sort(a, a + n);
	m = n / 2;
	dfs(0, 0, 0);
	dfs2(m, 0, 0);
	printf("%I64d\n", ans);

	return 0;
}
