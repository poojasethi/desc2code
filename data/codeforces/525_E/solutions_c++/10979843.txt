#include <iostream>
#include <map>
using namespace std;

typedef long long LL;

LL vals[30];
LL fact[20];
map<LL, int> m[30];
int N,K;
long long S;
long long res;

void dfs1(int cur, int flag, long long sum) {
	if (flag > K || sum > S) return;
	if (cur == N/2) {
		if (!m[flag].count(sum)) {
			m[flag][sum] = 1;
		} else {
			m[flag][sum]++;
		}
		return;
	}
	dfs1(cur + 1, flag, sum);
	dfs1(cur + 1, flag, sum + vals[cur]);
	if (vals[cur] < 20) { 
		dfs1(cur + 1, flag + 1, sum + fact[vals[cur]]);
	}
}

void dfs2(int cur, int flag, long long sum) {
	if (flag > K || sum > S) return;
	if (cur == N) {
		for (int i=0; i<=K-flag; i++) {
			if (m[i].count(S-sum)) {
				res += (LL)(m[i][S-sum]);
			}
		}
		return;
	}
	dfs2(cur + 1, flag, sum);
	dfs2(cur + 1, flag, sum + vals[cur]);
	if (vals[cur] < 20) { 
		dfs2(cur + 1, flag + 1, sum + fact[vals[cur]]);
	}
}


int main() {
	cin>>N>>K>>S;
	for (int i=0; i<N; i++) {
		cin>>vals[i];
	}
	fact[0] = 1;
	for (int i=1; i<20; i++) {
		fact[i] = fact[i-1]*(long long)(i);
	}

	dfs1(0, 0, 0);
	dfs2(N/2, 0, 0);

	cout<<res<<endl;
	return 0;
}