#include <map>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>

using namespace std;

const int MAX = 30;

map <long long, int> mp[MAX];
int n, k;
int a[MAX]; 
long long f[MAX], s, ans = 0;

void init(){
	f[1] = 1;
	for(int i=2; i<19; i++)
		f[i] = f[i-1] * i; 
}

void dfs1(int index, int num, long long sum){
	if(sum > s)	return ;
	if(index == n / 2){
		mp[num][sum]++;
		return ;
	}
	dfs1(index+1, num, sum);
	dfs1(index+1, num, sum+a[index]);
	if(a[index] < 19 && num < k)
		dfs1(index+1, num+1, sum+f[a[index]]);
}

void dfs2(int index, int num, long long sum){
	if(sum > s) return;
	if(index == n){
		for(int i=0; i<=k-num; i++){
			if(mp[i].find(s - sum) != mp[i].end()){
				ans += mp[i][s-sum];
			}
		}
		return ;
	}
	dfs2(index+1, num, sum);
	dfs2(index+1, num, sum+a[index]);
	if(a[index] < 19 && num < k)
		dfs2(index+1, num+1, sum+f[a[index]]);
}

int main(){
	scanf("%d%d%lld",&n,&k,&s);
	for(int i=0; i<n; i++)
		scanf("%d",&a[i]);
	init();
	dfs1(0, 0, 0);
	dfs2(n/2, 0, 0);
	printf("%lld\n",ans);
	return 0;	
}
