#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
#include <queue>
#include <cmath>
using namespace std;
const int maxn=100005;
const long long INF=12345678987654321LL;
vector<pair<int,int> >v[maxn];
int n,m,p[maxn];
long long  d[maxn];
int print_x(int x)
{
	if(x!=1)print_x(p[x]);
	printf("%d ",x);
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)d[i]=INF;
	for(int i=1;i<=m;i++)
	{
		int a,b,c;
		scanf("%d%d%d",&a,&b,&c);
		v[a].push_back(make_pair(b,c));
		v[b].push_back(make_pair(a,c));
	}
	priority_queue<pair<long long,int> >qq;
	qq.push(make_pair(-(d[1]=0),1));
	while(!qq.empty())
	{
		long long dis=-qq.top().first;
		int k=qq.top().second;
		qq.pop();
		if(dis!=d[k])continue;
		for(vector<pair<int,int> >::const_iterator i=v[k].begin();i!=v[k].end();++i)
		{
			long long  y=dis+i->second;
			if(y<d[i->first])
			{
				d[i->first]=y;
				p[i->first]=k;
				qq.push(make_pair(-d[i->first],i->first));
			}
		 } 
	}
	if(d[n]==INF)puts("-1"); else print_x(n);
	return 0;
}

