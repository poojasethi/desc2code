#include <cstdio>
#include <vector>
#include <queue>
#include <utility>
#include <algorithm>
using namespace std;

const long long INF = 1LL << 60;
const int MAXN = 110000;

vector<pair<int, int> > e[MAXN];
long long d[MAXN];
int p[MAXN];

void dump(int x)
{
	if(x > 1)	dump(p[x]);
	printf("%d ", x);
}

int main()
{
	int n, m, a, b, w;
	priority_queue<pair<long long, int> > pq;
	long long x, y;

	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; i++)
		d[i] = INF;
	for(int i = 0; i < m; i++)
	{
		scanf("%d%d%d", &a, &b, &w);
		e[a].push_back(make_pair(b, w));
		e[b].push_back(make_pair(a, w));
	}
	pq.push(make_pair(-(d[1] = 0), 1));
	while(!pq.empty())
	{
		x = -pq.top().first;
		b = pq.top().second;
		pq.pop();
//		if(x != d[b])	continue;
		for(int i = 0; i < e[b].size(); i++)
		{
			y = x + e[b][i].second;
			a = e[b][i].first;
			if(y < d[a])
			{
				pq.push(make_pair(-y, a));
				d[a] = y;
				p[a] = b;
			}
		}
	}
	if(d[n] == INF)	puts("-1");
	else dump(n);
	return 0;
}
