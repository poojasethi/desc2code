#include <bits/stdc++.h>
using namespace std;
vector < pair<int,int> > g[100005];
int n,m,p[100005];
long long d[100005];
vector <int> path;
void dijkstra()
{
	set < pair<int,int> > q;
	d[1]=0;
	q.insert(make_pair(0,1));
	while(!q.empty())
	{
		pair<int,int> top=*(q.begin());
		q.erase(q.begin());
		int x=top.first,y=top.second;
		for(int i=0;i<g[y].size();i++)
		{
			int cost=g[y][i].first,v=g[y][i].second;
			if(d[v]>d[y]+cost)
			{
				p[v]=y;
				d[v]=d[y]+cost;
				q.insert(make_pair(d[v],v));
			}
		}
	}
}
int main()
{
	cin >> n >> m;
	for(int i=0;i<m;i++)
	{
		int u,v,w;
		cin >> u >> v >> w;
		g[u].push_back(make_pair(w,v));
		g[v].push_back(make_pair(w,u));
	}
	for(int i=0;i<100001;i++)d[i]=100000000001;
	memset(p,1,sizeof(p));
	dijkstra();
	if(d[n]==100000000001)cout << "-1\n";
	else
	{
		int x=n;
		while(x!=1)
		{
			path.push_back(x);
			x=p[x];
		}
		path.push_back(1);
		for(int i=path.size()-1;i>=0;i--)cout << path[i] << " ";
		cout << endl;
	}
	return 0;
}
