#include<bits/stdc++.h>
#define MP make_pair
#define R second
#define L first
using namespace std;
typedef pair<long long, long long> pll;
typedef pair<int, int> pie;
typedef priority_queue<pair<long long, pie>, vector<pair<long long, pie> >, greater<pair<long long, pie> > > Heap;
const int maxn=100*1000+100;
const long long INF=100000000000000ll;
long long dis[maxn];
int par[maxn];
vector<pie> v[maxn];
bool mark[maxn];

void dij(int source, int n){
	Heap q;
	dis[source]=0;
	q.push(MP(dis[source], MP(source, 0)));
	while(!q.empty()){
		int cur=q.top().R.L, p=q.top().R.R, d=q.top().L;
		q.pop();
		if(!mark[cur]){
			mark[cur]=true,
			dis[cur]=d,
			par[cur]=p;
			for(int i=0;i<v[cur].size();i++)
				q.push(MP(dis[cur]+v[cur][i].R, MP(v[cur][i].L, cur)));
		}
	}
}

void print(int x){
	if(par[x]!=0)
		print(par[x]);
	cout << x << " ";
}

int main(){
	int n, m;
	cin >> n >> m;
	while(m--){
		int fi, se, w;
		cin >> fi >> se >> w;
		v[fi].push_back(MP(se, w));
		v[se].push_back(MP(fi, w));
	}
	dij(1, n);
	if(!mark[n])
		cout << -1 << endl;
	else
		print(n);
}
