#include <queue>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long LL;
const int MAXN = 100000 + 86;
const LL INF = 0x3f3f3f3f3f3f3f3fll;

vector <pair<int, int> > e[MAXN];
priority_queue <pair<LL, int> > q;
LL d[MAXN];
int p[MAXN];

void path(int c) {
	if (!c) return;
	path(p[c]);
	printf("%d ", c);
}

int main() {
	int n, m;

	scanf("%d%d", &n, &m);
	for (int i=0,a,b,w; i<m; ++i) {
		scanf("%d%d%d", &a, &b, &w);
		e[a].push_back(make_pair(b, w));
		e[b].push_back(make_pair(a, w));
	}
	fill(d+2, d+n+1, INF);
	q.push(make_pair(0, 1));
	while (!q.empty()) {
		int a = q.top().second;
		LL dd = -q.top().first;
		q.pop();
		if (d[a] != dd) continue;
		for (vector<pair<int,int> >::iterator it=e[a].begin(); it!=e[a].end(); ++it) {
			int b = it->first, w = it->second;
			if (dd + w < d[b]) {
				d[b] = dd + w;
				q.push(make_pair(-d[b], b));
				p[b] = a;
			}
		}
	}
	if (d[n] == INF) return puts("-1"), 0;
	path(n);

	return 0;
}
