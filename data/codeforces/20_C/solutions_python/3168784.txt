from sys import stdin
import heapq
Inf = float("inf")

def line():
	return stdin.readline().strip()

""" Dijkstra's Shortest Paths -> O(E + V log V) """
def dijkstra(G, source):
	N = len(G)
	dist = [Inf] * N # Distance from source
	prev = [None] * N # Previous node
	visited = [False] * N
	dist[source] = 0
	Q = [(0, source)] # (dist, node)
	while Q:
		_, node = heapq.heappop(Q)
		if not visited[node]:
			visited[node] = True
			for nex in G[node]:
				if dist[node] + G[node][nex] < dist[nex]:
					dist[nex] = dist[node] + G[node][nex]
					heapq.heappush(Q, (dist[nex], nex)) # Update next's distance in Q
					prev[nex] = node
	return dist, prev

n, m = map(int, line().split())
G = {}
for node in xrange(n+1):
	G[node] = {}
for _ in xrange(m):
	a, b, w = map(int, line().split())
	G[a][b] = w
	G[b][a] = w

dist, prev = dijkstra(G, 1)
if dist[n] == Inf:
	print -1
else:
	path = []
	x = n
	while x != None:
		path.append(x)
		x = prev[x]
	for i in xrange(len(path)):
		print path[len(path)-i-1],
	print ""
