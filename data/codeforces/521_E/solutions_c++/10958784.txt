#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <fstream>
#include <algorithm>
#include <vector>

using namespace std;

const int MAXN = 200000 + 10;
const int MAXM = 400000 + 10;

struct Edge
{
    int next, to;
} g[MAXM];
int gn, start[MAXN];

inline void AddEdge(int a, int b)
{
    gn++; g[gn].next = start[a]; start[a] = gn; g[gn].to = b;
}

int n, m, dfsclock, bcc_cnt, cirlen;
int bccno[MAXN], low[MAXN], dfn[MAXN], cir[MAXN], oncir[MAXN];
int stk[MAXM][2], Top, st[MAXN], path[MAXN], cntEdge[MAXN];
bool GotAnswer = false, instk[MAXN];
vector <int> bcc[MAXN];

bool check(int p, int v)
{
    if (!oncir[p] || !oncir[v]) return false;
    if ((abs(oncir[v] - oncir[p]) == 1) || (oncir[v] == cirlen && oncir[p] == 1) || (oncir[v] == cirlen && oncir[p] == n)) return true;
    return false;
}

void dfs(int p, int fa)
{
    dfn[p] = low[p] = ++dfsclock;
    for (int i = start[p]; i; i = g[i].next)
    {
        int v = g[i].to;
        if (!dfn[v])
        {
            stk[++Top][0] = p; stk[Top][1] = v;
            dfs(v, p);
            low[p] = min(low[p], low[v]);
            if (low[v] >= dfn[p])
            {
                ++bcc_cnt; bcc[bcc_cnt].clear();
                while (Top)
                {
                    int pp = stk[Top][0], vv = stk[Top][1];Top--;
                    cntEdge[bcc_cnt]++;
                    if (bccno[pp] != bcc_cnt) bcc[bcc_cnt].push_back(pp);
                    if (bccno[vv] != bcc_cnt) bcc[bcc_cnt].push_back(vv);
                    bccno[pp] = bccno[vv] = bcc_cnt;
                    if (pp == p && vv == v) break;
                }
            }
        }
        else if (dfn[v] < dfn[p] && v != fa)
        {
            stk[++Top][0] = p; stk[Top][1] = v;
            low[p] = min(low[p], dfn[v]);
        }
    }
}

void dfs1(int p, int fa, int idx)
{
    if (cirlen) return;
    instk[p] = 1;
    st[++Top] = p;
    for (int i = start[p]; i; i = g[i].next)
    {
        if (cirlen) break;
        int v = g[i].to;
        if (v == fa) continue;
        if (bccno[v] != idx) continue;
        if (instk[v])
        {
            while (Top)
            {
                cir[++cirlen] = st[Top];
                instk[st[Top]] = 0;
                if (st[Top] == v) break;
                Top--;
            }
            break;
        }
        dfs1(v, p, idx);
    }
}

int dfs2(int p, int fa, int idx)
{
    path[++path[0]] = p;
    instk[p] = 1;
    for (int i = start[p]; i; i = g[i].next)
    {
        int v = g[i].to;
        if (v == fa) continue;
        if (bccno[v] != idx) continue;
        if (check(p, v)) continue;
        if (instk[v]) continue;
        if (oncir[v]) return v;
        int ret = dfs2(v, p, idx);
        if (ret != -1) return ret;
    }
    --path[0];
    instk[p] = 0;
    return -1;
}

void Work(int idx)
{
    cirlen = 0;
    int len = bcc[idx].size();
    if (len == 2) return;
    if (len == cntEdge[idx]) return;
    for (int i = 0; i < len; ++i) bccno[bcc[idx][i]] = idx;
    dfs1(bcc[idx][0], 0, idx);
    for (int i = 1; i <= Top; ++i) instk[st[i]] = 0;
    Top = 0;
    GotAnswer = true;
    for (int i = 1; i <= cirlen; ++i) oncir[cir[i]] = i;
    int idd = 1;
    for (; idd <= cirlen; ++idd)
    {
        int p = cir[idd];
        bool flag = false;
        for (int i = start[p]; i; i = g[i].next)
        {
            int v = g[i].to;
            if (bccno[v] != idx) continue;
            if (check(p, v)) continue;
            flag = true; break;
        }
        if (flag) break;
    }
    int px = dfs2(cir[idd], 0, idx);
    path[++path[0]] = px;
    puts("YES");
    printf("%d", path[0]);
    for (int i = 1; i <= path[0]; ++i) printf(" %d", path[i]);
    puts("");
    path[0] = 0;
    int id1;
    for (int i = 1; i <= cirlen; ++i) if (cir[i] == px) id1 = i;
    printf("%d", id1 - idd + 1);
    for (int i = idd; i <= id1; ++i) printf(" %d", cir[i]);
    puts("");
    printf("%d", cirlen - id1 + 1 + idd);
    for (int i = idd; i; --i) printf(" %d", cir[i]);
    for (int i = cirlen; i >= id1; --i) printf(" %d", cir[i]);
    puts("");
}

int main()
{
//    freopen("input.txt", "r", stdin);
    scanf("%d%d", &n, &m);
    for (int a, b, i = 1; i <= m; ++i)
    {
        scanf("%d%d", &a, &b);
        AddEdge(a, b);
        AddEdge(b, a);
    }
    for (int i = 1; i <= n; ++i) if (!dfn[i]) dfs(i, 0);
    for (int i = 1; i <= bcc_cnt && !GotAnswer; ++i) Work(i);
    if (!GotAnswer) puts("NO");

	return 0;
}
