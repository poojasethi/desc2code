#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<vector>
#include<set>
using namespace std;
typedef pair<int,int> PII;
const int L_N=2e5+10;
int N,M;
int pre[L_N],f[L_N],dfs_cnt;
vector<PII> low[L_N];
vector<int> G[L_N];
void find_cycle(int v,int u,vector<int> & c){
    while(u!=v){
        c.push_back(u);
        u=f[u];
    }
    c.push_back(v);
}
int find(vector<int> & c,int num){
    for(int i=0;i<c.size();i++){
        if(c[i]==num) return i;
    }
    return -1;
}
void rev(vector<int> & c,int s,int t){
    vector<int> tmp;
    int si=find(c,s),ei=find(c,t);
    for(int i=si;i>=0;i--) tmp.push_back(c[i]);
    for(int i=c.size()-1;i>=ei;i--) tmp.push_back(c[i]);
    c=tmp;
}
void print(vector<int> c){
    printf("%d ",(int)c.size());
    for(int i=0;i<c.size();i++) printf("%d ",c[i]);
    printf("\n");
}
void solve(PII p1,PII p2){
    vector<int> c1,c2,c3;
    find_cycle(p1.first,p1.second,c1);
    find_cycle(p2.first,p2.second,c2);
    set<int> s;
    for(int i=0;i<c1.size();i++) s.insert(c1[i]);
    for(int i=0;i<c2.size();i++){
        if(s.count(c2[i])) c3.push_back(c2[i]);
    }
    rev(c1,*c3.begin(),*c3.rbegin());
    rev(c2,*c3.begin(),*c3.rbegin());
    printf("YES\n");
    print(c1);
    print(c2);
    print(c3);
    exit(0);
}
void dfs(int u,int fa){
    f[u]=fa;
    pre[u]=++dfs_cnt;
    for(int i=0;i<G[u].size();i++){
        int v=G[u][i]; if(v==fa) continue;
        if(pre[v]){
            if(pre[v]<pre[u]) low[u].push_back(PII(v,u));
        }else{
            dfs(v,u);
            for(int i=0;i<low[v].size();i++){
                int t=low[v][i].first;
                if(pre[t]<pre[u]) low[u].push_back(low[v][i]);
            }
        }
        if(low[u].size()>=2) solve(low[u][0],low[u][1]);
    }
    
}
int main(){
    //freopen("in.txt","r",stdin);
    scanf("%d %d",&N,&M);
    for(int i=1;i<=M;i++){
        int u,v; scanf("%d %d",&u,&v);
        G[u].push_back(v);
        G[v].push_back(u);
    }
    for(int i=1;i<=N;i++) if(!pre[i]) dfs(i,0);
    printf("NO\n");
    return 0;
}