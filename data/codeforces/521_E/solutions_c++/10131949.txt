#include<algorithm>
#include<bitset>
#include<cctype>
#include<climits>
#include<cmath>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<string>
#include<vector>

using namespace std;

const int maxn=400001;

typedef long long LL;
typedef long double LD;
typedef int array[maxn];

int n,m,e,cnt,top,scc;
array low,dfn,fa,v,vis;
pair<int,int> st[maxn];
array begin,to,next;
vector<int> circle,inscc,ans[3];

void add(int x,int y)
{
	to[++e]=y;
	next[e]=begin[x];
	begin[x]=e;
}

bool dfs2(int x,int f)
{
	fa[x]=f;
	v[x]=-scc;
	for(int i=begin[x];i;i=next[i])
		if(to[i]!=f)
		{
			if(v[to[i]]==scc)
			{
				if(dfs2(to[i],x))
				{
					v[x]=scc;
					return true;
				}
			}
			else if(v[to[i]]==-scc)
			{
				for(int j=x;j!=to[i];j=fa[j])
					circle.push_back(j);
				circle.push_back(to[i]);
				v[x]=scc;
				return true;
			}
		}
	v[x]=scc;
	return false;
}
int getPos(int x,int f,int avoid)
{
	if(v[x]==-scc)
		return x==avoid?-1:x;
	vis[x]=1;
	for(int i=begin[x];i;i=next[i])
		if(to[i]!=f && abs(v[to[i]])==scc && !vis[to[i]])
		{
			int ans=getPos(to[i],x,avoid);
			if(ans!=-1)
			{
				vis[x]=0;
				return ans;
			}
		}
	return -1;
}
bool getAns(int x,int f,int aim,vector<int> &ans)
{
	if(x==aim)
	{
		ans.push_back(x);
		return true;
	}
	if(vis[x])
		return false;
	vis[x]=1;
	for(int i=begin[x];i;i=next[i])
		if(to[i]!=f && abs(v[to[i]])==scc)
		{
			if(getAns(to[i],x,aim,ans))
			{
				ans.push_back(x);
				return true;
			}
		}
	vis[x]=-1;
	return false;
}
void print(int x)
{
	cout<<"YES"<<endl;
	ans[2].push_back(x);
	reverse(ans[2].begin(),ans[2].end());
	for(int i=0;i<3;i++)
	{
		printf("%d ",ans[i].size());
		for(int j=0;j<int(ans[i].size());j++)
			printf("%d ",ans[i][j]);
		printf("\n");
	}
}

void dfs1(int x,int f)
{
	dfn[x]=low[x]=++cnt;
	for(int i=begin[x];i;i=next[i])
		if(to[i]!=f)
		{
			if(!dfn[to[i]])
			{
				st[++top]=make_pair(x,to[i]);
				dfs1(to[i],x);
				low[x]=min(low[x],low[to[i]]);
				if(low[to[i]]>=dfn[x])
				{
					scc++;
					if(st[top]==make_pair(x,to[i]))
					{
						v[x]=v[to[i]]=scc;
						top--;
						continue;
					}
					for(;st[top]!=make_pair(x,to[i]);top--)
					{
						if(v[st[top].first]!=scc)
							v[st[top].first]=scc;
						if(v[st[top].second]!=scc)
							v[st[top].second]=scc;
					}
					if(v[st[top].first]!=scc)
						v[st[top].first]=scc;
					if(v[st[top].second]!=scc)
						v[st[top].second]=scc;
					top--;
					circle.clear();
					dfs2(x,0);
					if(!circle.size())
						continue;
					// for(int i=0;i<int(circle.size());i++)
					// 	cout<<circle[i]<<' ';
					// cout<<endl;
					for(int i=0;i<int(circle.size());i++)
						v[circle[i]]=-scc;
					for(int i=0;i<int(circle.size());i++)
					{
						int y=circle[i],P=circle[(i+1)%circle.size()],N=circle[(i-1+circle.size())%circle.size()];
						for(int j=begin[y];j;j=next[j])
							if(to[j]!=P && to[j]!=N && abs(v[to[j]])==scc)
							{
								// cout<<y<<' '<<to[j]<<' '<<circle[(i+1)%circle.size()]<<' '<<circle[(i-1+circle.size())%circle.size()]<<endl;
								// for(int k=0;k<int(circle.size());k++)
								// 	cout<<circle[k]<<' ';
								// cout<<endl;
								int z=getPos(to[j],y,y);
								// cout<<z<<endl;
								// cout<<y<<' '<<to[j]<<' '<<N<<' '<<P<<endl;
								for(int k=i;circle[k]!=z;k=(k+1)%circle.size())
								{
									ans[0].push_back(circle[k]);
									vis[circle[k]]=1;
								}
								ans[0].push_back(z);
								for(int k=i;circle[k]!=z;k=(k-1+circle.size())%circle.size())
								{
									ans[1].push_back(circle[k]);
									vis[circle[k]]=1;
								}
								ans[1].push_back(z);
								getAns(to[j],y,z,ans[2]);
								print(y);
								exit(0);
							}
					}
				}
			}
			else if(dfn[to[i]]<dfn[x])
			{
				st[++top]=make_pair(x,to[i]);
				low[x]=min(low[x],dfn[to[i]]);
			}
		}
}

int main()
{
#ifdef LOCAL_TEST
	freopen("data.in","r",stdin);
	// freopen("data.out","w",stdout);
#endif
	cin>>n>>m;
	for(int i=1;i<=m;i++)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		add(x,y);
		add(y,x);
	}
	for(int i=1;i<=n;i++)
		if(!v[i])
			dfs1(i,0);
	cout<<"NO"<<endl;
	return 0;
}
