#include<bits/stdc++.h>
#define lc(x) (x<<1)
#define rc(x) ((x<<1)|1)
#define x first
#define y second
#define mp make_pair
using namespace std;
const int maxn=200000+10;
typedef long long ll;
typedef double lf;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
typedef pair<ll,int> pli;
typedef pair<ll,ll> pll;
template<typename T>void read(T &a){
	char c;
	bool ne=0;
	a=0;
	for(c=getchar();c<'0' || c>'9';c=getchar())
		if(c=='-')
			ne=1;
	for(;c>='0' && c<='9';c=getchar())
		a=(a<<1)+(a<<3)+c-'0';
	if(ne)
		a=-a;
}
vector<int> g[maxn];
vector<int> p[maxn];
stack<pii> st;
int n,m,scc;
int vis[maxn];
int dfn[maxn],low[maxn],tim;
int pre[maxn];
vector<int> circle;
bool dfs2(int u,int fa){
	pre[u]=fa;
	vis[u]=-scc;
	for(int i=0;i<g[u].size();i++){
		int &v=g[u][i];
		if(v==fa)
			continue;
		if(vis[v]==scc){
			if(dfs2(v,u)){
				vis[u]=scc;
				return 1;
			}
		}
		else if(vis[v]==-scc){
			for(int j=u;j!=v;j=pre[j])
				circle.push_back(j);
			circle.push_back(v);
			vis[u]=scc;
			return 1;
		}
	}
	vis[u]=scc;
	return 0;
}
bool vi[maxn];
vector<int> ans[3];
int getpos(int u,int fa,int stop){
	//printf("%d %d %d %d\n",u,fa,stop,vis[u]);
	if(vis[u]==-scc)
		return u==stop?-1:u;
	vi[u]=1;
	for(int i=0;i<g[u].size();i++){
		int &v=g[u][i];
		if(v!=fa && abs(vis[v])==scc && !vi[v]){
			int ans=getpos(v,u,stop);
			if(ans!=-1){
				vi[u]=0;
				return ans;
			}
		}
	}
	return -1;
}
bool getans(int u,int fa,int aim,vector<int> &ans){
	if(u==aim){
		ans.push_back(u);
		return 1;
	}
	if(vi[u])
		return 0;
	vi[u]=1;
	for(int i=0;i<g[u].size();i++){
		int &v=g[u][i];
		if(v!=fa && abs(vis[v])==scc){
			if(getans(v,u,aim,ans)){
				ans.push_back(u);
				return 1;
			}
		}
	}
	vi[u]=-1;
	return 0;
}
void dfs(int u,int fa){
	dfn[u]=low[u]=++tim;
	for(int i=0;i<g[u].size();i++){
		int &v=g[u][i];
		if(v==fa)
			continue;
		if(!dfn[v]){
			st.push(mp(u,v));
			dfs(v,u);
			low[u]=min(low[u],low[v]);
			if(low[v]>=dfn[u]){
				++scc;
				//printf("%d %d %d %d\n",u,v,st.top().x,st.top().y);
				if(st.top()==mp(u,v)){
					vis[u]=vis[v]=scc;
					st.pop();
					continue;
				}
				while(st.top()!=mp(u,v)){
					if(vis[st.top().x]!=scc)
						vis[st.top().x]=scc;
					if(vis[st.top().y]!=scc)
						vis[st.top().y]=scc;
					st.pop();
				}
				if(vis[st.top().x]!=scc)
					vis[st.top().x]=scc;
				if(vis[st.top().y]!=scc)
					vis[st.top().y]=scc;
				st.pop();
				circle.clear();
				//printf("%d\n",u);
				//for(int i=1;i<=n;i++)
					//printf("%d %d\n",i,vis[i]);
				//puts("");
				dfs2(u,0);
				//for(int i=1;i<=n;i++)
					//printf("%d %d\n",i,vis[i]);
				//exit(0);
				//printf("%d\n",circle.size());
				if(!circle.size())
					continue;
				int tp=circle.size();
				for(int i=0;i<tp;i++)
					vis[circle[i]]=-scc;
				for(int i=0;i<circle.size();i++){
					int &y=circle[i],&p=circle[(i+1)%tp],&N=circle[(i-1+tp)%tp];
					for(int j=0;j<g[y].size();j++){
						int &c=g[y][j];
						if(c==p || c==N || abs(vis[c])!=scc)
							continue;
						//printf("start:%d %d %d %d\n",c,y,N,p);
						int z=getpos(c,y,y);
						//puts("end");
						//exit(0);
						for(int k=i;circle[k]!=z;k=(k-1+tp)%tp){
							//printf("%d %d\n",z,circle[k]);
							ans[0].push_back(circle[k]);
							vi[circle[k]]=1;
						}
						ans[0].push_back(z);
						for(int k=i;circle[k]!=z;k=(k+1)%tp){
							ans[1].push_back(circle[k]);
							vi[circle[k]]=1;
						}
						ans[1].push_back(z);
						getans(c,y,z,ans[2]);
						ans[2].push_back(y);
						reverse(ans[2].begin(),ans[2].end());
						puts("YES");
						for(int k=0;k<3;k++){
							printf("%d",ans[k].size());
							for(int d=0;d<ans[k].size();d++)
								printf(" %d",ans[k][d]);
							puts("");
						}
						exit(0);
					}
				}
			}
		}
		else if(dfn[v]<dfn[u]){
			st.push(mp(u,v));
			low[u]=min(low[u],dfn[v]);
		}
	}
}
int main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
	read(n),read(m);
	for(int i=1;i<=m;i++){
		int u,v;
		read(u),read(v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	for(int i=1;i<=n;i++)
		if(!vis[i])
			dfs(i,0);
	puts("NO");
	return 0;
}

