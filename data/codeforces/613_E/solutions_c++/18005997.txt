#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
const int mod=1e9+7;
const int maxn=2000+10;
int n,m,ans;
char a[maxn],b[maxn],c[maxn];
int g[2][maxn],w[maxn];
bool left1[2][maxn][maxn],right1[2][maxn][maxn];
bool left2[2][maxn][maxn],right2[2][maxn][maxn];
int suf1[2][maxn][maxn],suf2[2][maxn][maxn],dp1[2][maxn][maxn],dp2[2][maxn][maxn];
inline void update1(int i,int j,int k,int val)
{
    if (k==m||right1[i][j][k])
        (ans+=val)%=mod;
}
inline void update2(int i,int j,int k,int val)
{
    if (k==m||right2[i][j][k])
        (ans+=val)%=mod;
}
inline void solve1()
{
    for (int i=0;i<=1;i++)
        for (int j=n-1;j>=0;j--)
            for (int k=m-1;k>=0;k--)
                if (g[i][j]==w[k])
                    suf1[i][j][k]=suf1[i][j+1][k+1]+1;
    for (int i=0;i<=1;i++)
    {
        for (int j=0,k,cur;j<n;j++)
        {
            k=j;cur=0;
            while (k>=0)
            {
                if (g[i][k]!=w[cur++]||(cur<<1)>m)
                    break;
                if (k!=j)
                    left1[i^1][j+1][cur<<1]=k+suf1[i^1][k][cur]>j;
                k--;
            }
        }
        for (int j=n-1,k,cur;j>=0;j--)
        {
            k=j;cur=m;
            while (k<n)
            {
                if (g[i][k]!=w[--cur]||(cur<<1)<m)
                    break;
                if (j!=k)
                    right1[i^1][j][(cur<<1)-m]=j+suf1[i^1][j][(cur<<1)-m]>k;
                k++;
            }
        }
    }
    for (int j=0;j<=n;j++)
        for (int i=0;i<=1;i++)
            for (int k=0;k<=m;k++)
            {
                if (!k||left1[i][j][k])
                    (dp1[i][j][k]+=1)%=mod;
                if (dp1[i][j][k])
                {
                    if (j<n)
                    {
                        if (k<m&&g[i][j]==w[k])
                            (dp1[i][j+1][k+1]+=dp1[i][j][k])%=mod;
                        if (k+1<m&&g[i][j]==w[k]&&g[!i][j]==w[k+1])
                            (dp1[i^1][j+1][k+2]+=dp1[i][j][k])%=mod;
                    }
                    update1(i,j,k,dp1[i][j][k]);
                }
            }
}
inline void solve2()
{
    for (int i=0;i<=1;i++)
        for (int j=n-1;j>=0;j--)
            for (int k=m-1;k>=0;k--)
                if (g[i][j]==w[k])
                    suf2[i][j][k]=suf2[i][j+1][k+1]+1;
    for (int i=0;i<=1;i++)
    {
        for (int j=0,k,cur;j<n;j++)
        {
            k=j;cur=0;
            while (k>=0)
            {
                if (g[i][k]!=w[cur++]||(cur<<1)>m)
                    break;
                if (k!=j)
                    left2[i^1][j+1][cur<<1]=k+suf2[i^1][k][cur]>j;
                k--;
            }
        }
        for (int j=n-1,k,cur;j>=0;j--)
        {
            k=j;cur=m;
            while (k<n)
            {
                if (g[i][k]!=w[--cur]||(cur<<1)<m)
                    break;
                if (j!=k)
                    right2[i^1][j][(cur<<1)-m]=j+suf2[i^1][j][(cur<<1)-m]>k;
                k++;
            }
        }
    }
    for (int j=0;j<=n;j++)
        for (int i=0;i<=1;i++)
            for (int k=0;k<=m;k++)
            {
                if (!k||left2[i][j][k])
                    (dp2[i][j][k]+=1)%=mod;
                if (k&&k<m)
                    update2(i,j,k,dp2[i][j][k]);
                if (dp2[i][j][k])
                {
                    if (j<n)
                    {
                        if (k<m&&g[i][j]==w[k])
                        {
                            (dp2[i][j+1][k+1]+=dp2[i][j][k])%=mod;
                            if (k&&k+1==m)
                                update2(i,j+1,k+1,dp2[i][j][k]);
                        }
                        if (k+1<m&&g[i][j]==w[k]&&g[!i][j]==w[k+1])
                        {
                            (dp2[i^1][j+1][k+2]+=dp2[i][j][k])%=mod;
                            if (k&&k+2==m)
                                update2(i^1,j+1,k+2,dp2[i][j][k]);
                        }
                    }
                }
            }
}
int main()
{
    if (fopen("in.in","r")!=NULL)
    {
        freopen("in.in","r",stdin);
        freopen("out.out","w",stdout);
    }
    scanf("%s%s%s",a,b,c);
    n=strlen(a);
    m=strlen(c);
    for (int i=0;i<n;i++)
    {
        g[0][i]=a[i]-'a';
        g[1][i]=b[i]-'a';
    }
    for (int i=0;i<m;i++)
        w[i]=c[i]-'a';
    solve1();
    reverse(w,w+m);
    solve2();
    printf("%d\n",ans);
    return 0;
}
	 	 				  			 		 	  	 	 	  				