#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#define ll long long
#define clr(a) memset(a, 0, sizeof a)
using namespace std;

const int MaxN = 2010, mod = 1000000007;
const int h_mod = 998244353, base = 233;
char s[2][MaxN], w[MaxN];

inline int trans(int &a, int b) {
	a += b;
	return a >= mod ? a -= mod : a; 
}
inline int dec(int x, int v) {
	x -= v;
	return x < 0 ? x += h_mod : x;
}

int ans;
int f[MaxN * 2][MaxN], n, m;
int g[MaxN * 2][MaxN];

int hash[2][MaxN], hw[MaxN], invhw[MaxN], pow[MaxN];

int get_hash(int *h, int l, int r) {
	return dec(h[r], 1ll * h[l - 1] * pow[r - l + 1] % h_mod);
}
int solve() {
	clr(f);
	clr(g);
	for (int i = 1; i <= n; ++i) {
		hash[0][i] = (1ll * hash[0][i - 1] * base + s[0][i]) % h_mod;
		hash[1][i] = (1ll * hash[1][i - 1] * base + s[1][i]) % h_mod;
	}
	for (int i = 1; i <= m; ++i) hw[i] = (1ll * hw[i - 1] * base + w[i]) % h_mod;
	for (int i = 1; i <= m; ++i) invhw[i] = (1ll * invhw[i - 1] * base + w[m - i + 1]) % h_mod;

	for (int i = 0; i <= n * 2; ++i) ++f[i][0];
	for (int i = 0; i <= n * 2 + 2; ++i) ++g[i][m];
	for (int i = 1; i <= n; ++i)
		for (int j = i + 1; j <= n; ++j) {
			int l = j - i + 1;
			if (2 * l > m) break;
			int hs0 = get_hash(hash[0], i, j), hs1 = get_hash(hash[1], i, j);
			int hw0 = get_hash(invhw, m - l + 1, m), hw1 = get_hash(hw, l + 1, l + l);
			int rhw0 = get_hash(hw, m - 2 * l + 1, m - l), rhw1 = get_hash(invhw, 1, l);
			if ((hs0 == hw0) && (hs1 == hw1)) ++f[j + n + 1][2 * l];
			if ((hs0 == hw1) && (hs1 == hw0)) ++f[j][2 * l];
			if ((hs0 == rhw0) && (hs1 == rhw1)) ++g[i][m - 2 * l];
			if ((hs0 == rhw1) && (hs1 == rhw0)) ++g[i + n + 1][m - 2 * l];
		}
	int ret = 0;
	for (int i = 0; i < n; ++i) 
		for (int j = 0; j < m; ++j) {
			if (s[0][i + 1] == w[j + 1]) {
				trans(f[i + 1][j + 1], f[i][j]);
				if (s[1][i + 1] == w[j + 2]) trans(f[n + 1 + i + 1][j + 2], f[i][j]);
			}
			if (s[1][i + 1] == w[j + 1]) {
				trans(f[n + 1 + i + 1][j + 1], f[n + 1 + i][j]);
				if (s[0][i + 1] == w[j + 2]) trans(f[i + 1][j + 2], f[n + 1 + i][j]);
			}
		}
	for (int i = 1; i <= n; ++i) 
		for (int j = 1; j <= m; ++j) {
			trans(ret, 1ll * f[i][j] * g[i + 1][j] % mod);
			trans(ret, 1ll * f[n + 1 + i][j] * g[n + 1 + i + 1][j] % mod);
//			printf("%d %d %d\n", i, j, ret);
		}
//	cerr << g[10][1] << endl;
//	cerr << ret << endl;
	return ret;
}

int main() {
	scanf("%s%s%s", s[0] + 1, s[1] + 1, w + 1);
	n = strlen(s[0] + 1);
	m = strlen(w + 1);
	pow[0] = 1;
	for (int i = 1; i <= max(n, m); ++i) pow[i] = 1ll * pow[i - 1] * base % h_mod;
	
	if (m == 1) {
		for (int i = 1; i <= n; ++i) ans += (s[0][i] == w[1]) + (s[1][i] == w[1]);
		cout << ans << endl;
		return 0;
	}

	int ans = 0;
	ans += solve();
	reverse(s[0] + 1, s[0] + n + 1);
	reverse(s[1] + 1, s[1] + n + 1);
	ans += solve();
	ans %= mod;

	if (m == 2) {
		for (int i = 1; i <= n; ++i) {
			if ((s[0][i] == w[1]) && (s[1][i] == w[2])) --ans;
			if ((s[0][i] == w[2]) && (s[1][i] == w[1])) --ans;
		}
	}
	if (ans < 0) ans += mod;
	cout << ans << endl;
	return 0;
}