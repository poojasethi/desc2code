#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<cassert>
#include<map>
#include<vector>
#include<cmath>
#include<queue>
#include<set>
#include<climits>
#define X first
#define INF 0x3f3f3f3f
#define Y second
#define LL long long
#define DB double
#define pii pair<int,int>
#define MP make_pair
#define pb push_back
#define ui unsigned long long
#define zqf 1000000007
#define DEBUG(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
template<class T>void Read(T& x)
{
	x=0;int flag=0,sgn=1;char c;
	while(c=getchar())
	{
		if(c=='-')sgn=-1;
		else if(c>='0'&&c<='9')x*=10,x+=c-'0',flag=1;
		else if(flag)break;
	}
	x*=sgn;
}
const int MAXN=4100;
char s[4][MAXN],p[MAXN];
const int times=29;
int dp[MAXN][2][MAXN],ans,n,m;
ui hash[2][2][MAXN],_pow[MAXN],lover[MAXN];
void _hash()
{
	memset(hash,0,sizeof(hash));
	for(int i=0;i<2;i++)
	{
		for(int j=0;j<n;j++)
			hash[i][0][j]=j==0?s[i][j]-'a'+1:hash[i][0][j-1]*29+s[i][j]-'a'+1;
		for(int j=n-1;j>=0;j--)
			hash[i][1][j]=hash[i][1][j+1]*29+s[i][j]-'a'+1;
	}
	for(int i=0;i<m;i++)
		lover[i]=!i?0+p[i]-'a'+1:lover[i-1]*29+p[i]-'a'+1;
}
ui gethash(int k,int l,int r,int flag)
{
	ui res;
	if(flag==0)//positive
	{
		res=hash[k][0][r];
		res-=l==0?0:hash[k][0][l-1]*_pow[r-l+1];
		return res;
	}
	else
	{
		res=hash[k][1][l];
		res-=hash[k][1][r+1]*_pow[r-l+1];
		return res;
	}
}
ui getori(int l,int r)
{
	ui res;
	res=lover[r];
	res-=l==0?0:lover[l-1]*_pow[r-l+1];
	return res;
}
void solve()
{
	_hash();
	memset(dp,0,sizeof(dp));
	if(m%2==0&&m!=2)for(int j=0;j<2;j++)
			{
				for(int b=m/2;b==m/2;b++)
				{
					if(gethash(j,0,b-1,1)==getori(m-b,m-1)&&gethash(j^1,0,b-1,0)==getori(m-2*b,m-b-1))
						ans++;
				}
			}
	for(int i=0;i<n;i++)
	{
		if(i==2)
			i=2;
		dp[i][0][0]=dp[i][1][0]=1;
		for(int j=0;j<2;j++)
		{
			for(int a=2;i-a+1>=0;a++)
			{
				if(gethash(j,i-a+1,i,1)==getori(0,a-1)&&gethash(j^1,i-a+1,i,0)==getori(a,2*a-1))
					dp[i][j^1][2*a]=(dp[i][j^1][2*a]+1)%zqf;
			}
			for(int k=1;k<=m;k++)
			{
				if(s[j][i]!=p[k-1])continue;
				dp[i][j][k]=(dp[i][j][k]+(i==0?(k-1==0?1:0):dp[i-1][j][k-1]))%zqf;
				if(s[j^1][i]==p[k])
					dp[i][j^1][k+1]=(dp[i][j^1][k+1]+(i==0?(k-1==0?1:0):dp[i-1][j][k-1]))%zqf;
			}
		}
		ans=(ans+dp[i][0][m])%zqf;
		ans=(ans+dp[i][1][m])%zqf;
		if(i<n-1)
		{
			for(int j=0;j<2;j++)
			{
				for(int b=2;m-2*b>=0&&i+b<n;b++)
				{
					if(gethash(j,i+1,i+b,1)==getori(m-b,m-1)&&gethash(j^1,i+1,i+b,0)==getori(m-2*b,m-b-1))
						ans=(ans+dp[i][j^1][m-2*b])%zqf;
				}
			}
		}
	}
}
void fuck()
{
	LL ans=0;
	for(int i=0;i<2;i++)
		for(int j=0;j<n;j++)
		{
			if(s[i][j]==p[0])
				ans++;
		}
	printf("%d\n",ans);
	return;
}
int main()
{
	//freopen("5.in","r",stdin);
	//freopen("5.out","w",stdout);
	scanf("%s",s[0]);
	scanf("%s",s[1]);
	getchar();
	_pow[0]=1;
	for(int i=1;i<MAXN;i++)_pow[i]=_pow[i-1]*29;
	scanf("%s",p);
	n=strlen(s[0]);
	m=strlen(p);
	if(m==1)
	{
		fuck();
		return 0;
	}
	solve();
	reverse(s[0],s[0]+n);
	reverse(s[1],s[1]+n);
	solve();
	reverse(s[0],s[0]+n);
	reverse(s[1],s[1]+n);
	_hash();
	int cnt=0;
	if(m%2==0)
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<2;j++)
			{
				if(i-m/2+1>=0)if(gethash(j,i-m/2+1,i,1)==getori(0,m/2-1)&&gethash(j^1,i-m/2+1,i,0)==getori(m/2,m-1))cnt++;
				if(m!=2)if(gethash(j,i,i+m/2-1,0)==getori(0,m-m/2-1)&&gethash(j^1,i,i+m/2-1,1)==getori(m-m/2,m-1))cnt++;
			}
		}
	cout<<(ans-cnt+zqf)%zqf<<endl;
}
                                                                                                                                                                                                                                                                                                     