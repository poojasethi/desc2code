#include <cstdio>
#include <algorithm>
#include <map>
#include <vector>
using namespace std;
struct nod
{
    int a,b,c,idx;
};
bool operator<(nod a1,nod a2)
{
    return a1.c<a2.c;
}
const int inf =100009;
typedef long long ll;
nod edge[inf];
typedef pair<int,int> ii;
vector<ii>adj[inf];
ll seln;
int sz[inf];
int tree[inf];
pair<ll,int> sol[inf];
int root(int a)
{
    while(tree[a]!=a)
    {
        tree[a]=tree[tree[a]];
        a=tree[a];
    }
    return a;
}
int getsum(int x,int p)
{
    int s=sz[x];
    for (int i=0; i<adj[x].size(); ++i)
    {
        if (adj[x][i].first!=p)
            s+=getsum(adj[x][i].first,x);
    }
    return s;
}
int dfs(int x,int p)
{
    ll l;
    int s=sz[x];
    for (int i=0; i<adj[x].size(); ++i)
    {
        if (adj[x][i].first==p)continue;
        l=dfs(adj[x][i].first,x);
        s+=l;
        sol[adj[x][i].second].first=l*(seln-l)*2;
    }
    return s;
}
int main()
{
    int n,a,b,m;
    scanf("%d",&n);
    m=n-1;
    for (int i=0; i<m; ++i)
        scanf("%d %d %d",&edge[i].a,&edge[i].b,&edge[i].c),edge[i].idx=i+1;
    sort(edge,edge+m);
    for (int i=1; i<=n; ++i)
        sz[i]=1,tree[i]=i;
    for (int i=1; i<=m; ++i)
        sol[i].second=i;
    for (int i=0; i<m;)
    {
        int j=i;
        do{
            a=root(edge[j].a);
            b=root(edge[j].b);
            adj[a].push_back(ii(b,edge[j].idx));
            adj[b].push_back(ii(a,edge[j].idx));
            ++j;
        }while (j<m && edge[j].c==edge[j-1].c);
        for (int h=i;h<j;++h){
        if (sol[edge[h].idx].first!=0)continue;
        a=root(edge[h].a);
        seln=getsum(a,-1);
        dfs(a,-1);
        }
        while(i<j)
        {
            a=root(edge[i].a);
            b=root(edge[i].b);
            if (sz[a]<sz[b])
                swap(a,b);
            sz[a]+=sz[b];
            tree[b]=a;
            adj[a].clear();
            ++i;
        }

    }
    sort(sol+1,sol+m+1);
    int sel=m;
    while(sel>0 && sol[sel-1].first==sol[sel].first)
        --sel;
    printf("%I64d %d\n",sol[sel].first,m-sel+1);
    for (int i=sel; i<=m; ++i)
        printf("%d ",sol[i].second);
    printf("\n");
}