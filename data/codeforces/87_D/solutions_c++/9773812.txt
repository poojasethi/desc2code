#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>

#define PB push_back
#define MP make_pair
#define F first
#define S second

using namespace std;

const int MAXN  = 100005;
int a[MAXN], b[MAXN];
vector<pair<int, int> > e;
vector<int> l;
vector<pair<int, pair<int, int> > > v[MAXN];
map<pair<int, int>, long long> plc;
int sub[MAXN], sum, size[MAXN], par[MAXN];
long long ans[MAXN];
bool seen[MAXN], mark[MAXN];

int getpar(int x)
{
	if(par[x] == -1)
		return x;
	return par[x] = getpar(par[x]);
}

void add(int i)
{
	int x = getpar(a[i]), y = getpar(b[i]);
	if(size[x] < size[y])
		swap(x, y);
	size[x] += size[y];
	par[y] = x;
}

void DFS1(int n)
{
	mark[n] = true;
	sum += size[n];
	for(int i = 0; i < v[n].size(); i++)
		if(!mark[v[n][i].F])
		{
			DFS1(v[n][i].F);
			sub[n] += sub[v[n][i].F];
		}
	sub[n] += size[n];
}

void DFS2(int n)
{
	if(seen[n])
		return;
	seen[n] = true;
	for(int i = 0; i < v[n].size(); i++)
	{
		int x = v[n][i].F;
		if(seen[x])
			continue;
		DFS2(x);
		pair<int, int> p = MP(v[n][i].S.F, v[n][i].S.S);
		if(p.F > p.S)
			swap(p.F, p.S);
		ans[plc[p]] = 1ll * (sum - sub[x]) * sub[x];
	}
}

int main()
{
	int n;
	scanf("%d", &n);
	for(int i = 0; i < n - 1; i++)
	{
		int c;
		scanf("%d%d%d", &a[i], &b[i], &c);
		a[i]--, b[i]--;
		e.PB(MP(c, i));
		if(a[i] > b[i])
			swap(a[i], b[i]);
		plc[MP(a[i], b[i])] = i;
	}
	sort(e.begin(), e.end());
	fill(size, size + MAXN, 1);
	fill(par, par + MAXN, -1);
	for(int i = 0; i < n - 1; i++)
	{
		l.clear();
		int j = i;
		while(j < n - 1 && e[i].F == e[j].F)
		{
			int x = e[j].S;
			int f = getpar(a[x]), g = getpar(b[x]);
			if(v[f].size() == 0)
				l.PB(f);
			if(v[g].size() == 0)
				l.PB(g);
			v[f].push_back(MP(g, MP(a[x], b[x])));
			v[g].push_back(MP(f, MP(a[x], b[x])));
			j++;
		}
		for(int k = 0; k < l.size(); k++)
			if(!mark[l[k]])
			{
				sum = 0;
				DFS1(l[k]);
				DFS2(l[k]);
			}
		for(int k = i; k < j; k++)
			add(e[k].S);
		for(int k = 0; k < l.size(); k++)
		{
			mark[l[k]] = seen[l[k]] = sub[l[k]] = 0;
			v[l[k]].clear();
		}
		i = j - 1;
	}
	long long MAX = 0;
	int t = 0;
	for(int i = 0; i < n - 1; i++)
		MAX = max(MAX, ans[i]);
	for(int i = 0; i < n - 1; i++)
		if(ans[i] == MAX)
			t++;
	printf("%lld %d\n", MAX * 2, t); 
	for(int i = 0; i < n - 1; i++)
		if(ans[i] == MAX)
			printf("%d ", i + 1);
	printf("\n");
	return 0;
}
