#include <bits/stdc++.h>
using namespace std;
#define LL long long
#define PII pair<int,int>
#define F first
#define S second
#define MAXN 100010
std::vector< PII > Edge[MAXN];
std::vector<int> Nodes;
LL Rank[MAXN];
LL Parent[MAXN];
LL Sz[MAXN];
LL Subtree[MAXN];
int vis[MAXN];
LL Ans;
void create(int N)
{
	for(int i = 0;i<N;i++)
	{
		Parent[i] = i;
		Sz[i] = 1;
		Rank[i] = 1;
	}
}
int find(int x)
{
	return x == Parent[x]?x:Parent[x] = find(Parent[x]);
}
void Merge(int x,int y)
{
	int xi = find(x);
	int yi = find(y);
	if(Rank[yi]>=Rank[xi])
		swap(xi,yi);
	Rank[xi] = max(Rank[xi],Rank[yi] + 1);
	Sz[xi]+=Sz[yi];
	Parent[yi] = xi;
}
void dfs1(int idx,int p)
{
	vis[idx] = 1;
	Subtree[idx] = Sz[idx];
	for(int i = 0;i<Edge[idx].size();i++)
	{
		int v = Edge[idx][i].F;
		if(vis[v]==0)
		{
			dfs1(v,idx);
			Subtree[idx]+=Subtree[v];
		}
	}
}

void dfs2(int idx,int p)
{
	vis[idx] = 2;
	for(int i = 0;i<Edge[idx].size();i++)
	{
		int v = Edge[idx][i].F;
		if(vis[v] == 1)
		{
			Merge(idx,v);
			LL Res = Subtree[v];
			Res = Res*(Subtree[p] - Subtree[v]);
			if(Ans<Res)
			{
				Ans = Res;
				Nodes.clear();
				Nodes.push_back(Edge[idx][i].S);
			}
			else if(Ans==Res)
			{
				Nodes.push_back(Edge[idx][i].S);
			}
			dfs2(v,p);
		}
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	int N;
	cin>>N;
	int u,v,i,j,k,len;
	std::vector< pair < PII,PII > > Roads;
	for(int i = 1;i<N;i++)
	{
		cin>>u>>v>>len;
		u-=1,v-=1;
		Roads.push_back(make_pair(make_pair(len,i),make_pair(u,v)));
	}
	sort(Roads.begin(),Roads.end());
	create(N);
	for(i = 0;i<N-1;i = j)
	{
		for(j = i+1;j<N-1;j++)
		{
			if(Roads[i].F.F!=Roads[j].F.F)
				break;
		}
		for(k = i;k<j;k++)
		{
			u = find(Roads[k].S.F);
			v = find(Roads[k].S.S);
			vis[u] = 0;
			vis[v] = 0;
			Edge[u].clear();
			Edge[v].clear();
		}
		for(k = i;k<j;k++)
		{
			u = find(Roads[k].S.F);
			v = find(Roads[k].S.S);
			Edge[u].push_back(make_pair(v,Roads[k].F.S));
			Edge[v].push_back(make_pair(u,Roads[k].F.S));
		}
		for(k = i;k<j;k++)
		{
			u = find(Roads[k].S.F);
			v = find(Roads[k].S.S);
			if(vis[u]==0)
			{
				dfs1(u,-1);
			}
		}
		for(k = i;k<j;k++)
		{
			u = find(Roads[k].S.F);
			v = find(Roads[k].S.S);
			if(vis[u]==1)
			{
				dfs2(u,u);
			}
		}
	}
	cout<<Ans*2<<" "<<Nodes.size()<<endl;
	sort(Nodes.begin(),Nodes.end());
	for(int i = 0;i<Nodes.size();i++)
		cout<<Nodes[i]<<" ";
	cout<<endl;
	return 0;
}