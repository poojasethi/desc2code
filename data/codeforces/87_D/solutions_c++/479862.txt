#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>

#define REP(AA,BB) for(int AA=0; AA<(BB); ++AA)
#define FOR(AA,BB,CC) for(int AA=(BB); AA<(CC); ++AA)
#define FC(AA,BB) for(__typeof((AA).begin()) BB=(AA).begin(); BB!=(AA).end(); ++BB)
#define SZ(AA) ((int)((AA).size()))
#define ALL(AA) (AA).begin(), (AA).end()
#define PB push_back
#define MP make_pair

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PII;
typedef long long LL;
typedef long double LD;

struct edge {
	int a, b, n, c;
	int operator<(const edge &x) const {
		return c<x.c;
	}
};

int st[100100], sz[100100];

int fnd(int a) {
	if(a==st[a])
		return a;
	return st[a]=fnd(st[a]);
}

void unite(int a, int b) {
	a=fnd(a); b=fnd(b);
	if(rand()&1)
		swap(a,b);
	sz[a]+=sz[b];
	st[b]=a;
}

LL res[100100];
edge E[100100];

vector<PII> ve[100100];
int vis[100100], skl[100100];

int dfs(int v, int par) {
	int w=sz[v]; vis[v]=1;
	REP(i,SZ(ve[v])) {
		if(ve[v][i].first==par) {
			swap(ve[v][i], ve[v].back());
			ve[v].pop_back();
			break;
		}
	}
	REP(i,SZ(ve[v]))
		w+=dfs(ve[v][i].first, v);
	skl[v]=w;
	return w;
}

int ROZ;

void licz(int v) {
	REP(i,SZ(ve[v])) {
		res[ve[v][i].second]=2LL*(LL)skl[ve[v][i].first]*(LL)(ROZ-skl[ve[v][i].first]);
		licz(ve[v][i].first);
	}
}

int main(void) {
	int n; scanf("%d", &n);
	REP(i,n-1) {
		scanf("%d%d%d", &E[i].a, &E[i].b, &E[i].c);
		E[i].n=i;
	}
	sort(E,E+n-1);
	REP(i,n) {
		st[i]=i;
		sz[i]=1;
	}
	for(int i=0; i<n-1; ) {
		set<int> V;
		for(int j=i; j<n-1 && E[j].c==E[i].c; ++j) {
			int x=fnd(E[j].a), y=fnd(E[j].b);
			ve[x].PB(MP(y, E[j].n));
			ve[y].PB(MP(x, E[j].n));
			V.insert(x);
			V.insert(y);
		}
		FC(V,it) {
			if(!vis[*it]) {
				ROZ=dfs(*it, -1);
				licz(*it);
			}
		}
		FC(V,it) {
			ve[*it].clear();
			vis[*it]=0;
		}
		int j;
		for(j=i; j<n-1 && E[j].c==E[i].c; ++j)
			unite(E[j].a, E[j].b);
		i=j;
	}
	LL best=0;
	REP(i,n-1)
		best=max(best, res[i]);
	VI wyn;
	REP(i,n-1) {
		if(res[i]==best)
			wyn.PB(i+1);
	}
	printf("%I64d %d\n", best, wyn.size());
	REP(i,SZ(wyn))
		printf("%d ", wyn[i]);
	puts("");
	return 0;
}
