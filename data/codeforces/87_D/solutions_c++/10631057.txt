#include <bits/stdc++.h>

using namespace std;

#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl

#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)

#define type(x) __typeof(x.begin())

#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)

#define pb push_back
#define mp make_pair

#define nd second
#define st first

#define endl '\n'

typedef pair < int ,int > pii;

typedef long long ll;

const int inf = 1e9, mod = 1e9+7;
const int N = 1e5+5;

int S = 1, t1, t2, n, m, k, x, y, z, size[N], root[N], h[N], sum[N];

ll res[N];

vector< pair< pii , pii > > edges;
vector< pii > v[N];

int findset(int x){ return root[x] = (root[x] == x)? root[x] : findset(root[x]);  }

void merge(int x,int y){

	if((t1 = findset(x)) == (t2 = findset(y))) return ;
	root[t1] = t2; size[t2] += size[t1]; size[t1] = 0;

}

int prepare(int node,int last,int col){

	sum[node] = size[node]; 
	foreach(it, v[node]) if(it->st != last){ sum[node] += prepare(it->st, node, S); h[it->st] = col; }
	return sum[node];

}

void solve(int node,int last,int all){

	foreach(it, v[node]){
		if(it->st == last) continue ;
		res[it->nd] = 2LL * (all - sum[it->st]) * sum[it->st];
		solve(it->st, node, all);
	}
	
}

int main(){
	
	scanf("%d",&n);

	FOR(i,1,n-1){
		scanf("%d %d %d",&x,&y,&z);
		edges.pb(mp(mp(z,i),mp(x,y)));
	}

	sort(edges.begin(),edges.end());

	FOR(i,1,n) root[i] = i, size[i] = 1;

	FOR(i,0,(int)edges.size()-1){
		
		int last = i;

		while(i < (int)edges.size() - 1 && edges[i+1].st.st == edges[last].st.st) i++;
	
		vector< int > temp; ++S;

		FOR(j,last,i){

			int x = findset(edges[j].nd.st);
			int y = findset(edges[j].nd.nd);

			temp.pb(x); temp.pb(y);

			v[x].pb(mp(y,edges[j].st.nd)); v[y].pb(mp(x,edges[j].st.nd));

		}

		sort(temp.begin(),temp.end());
		temp.resize(unique(temp.begin(),temp.end())-temp.begin());

		foreach(it,temp) if(h[*it] != S) prepare(*it,0,S);
		foreach(it,temp) if(h[*it] != S) solve(*it,0,sum[*it]);

		foreach(it,temp){ foreach(it2,v[*it]) merge(*it, it2->st); v[*it].clear(); }

	}

	ll mx = *max_element(res+1,res+n), cnt = 0;

	FOR(i,1,n-1) cnt += res[i] == mx;

	printf("%lld %lld\n", mx, cnt);

	FOR(i,1,n-1) if(res[i] == mx) printf("%d ",i);

    return 0;
}
