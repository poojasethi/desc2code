#include <algorithm>
#include <iostream>
#include <utility>
#include <vector>
using namespace std;
#define X first
#define Y second
#define pb push_back
#define pii pair<int,int>
const int maxn = 100000+10;
long long n,par[maxn],col,rang[maxn],dp[maxn],ans[maxn],sz,t,mx,val[maxn];
vector <int> v;
vector <pii> adj[maxn];
pair <pii,pii> edge[maxn];
int find(int x) { if(par[x] == x) return x; return par[x] = find(par[x]); }
void un(int x, int y) { val[find(y)] += val[find(x)]; par[find(x)] = find(y); }
void dfs(int x) {
    rang[x] = col;
    dp[x] = val[x];
    for(int i = 0; i < adj[x].size(); i++) if(rang[adj[x][i].X] != col) { 
        dfs(adj[x][i].X); 
        ans[adj[x][i].Y] =  2*dp[adj[x][i].X]*(sz-dp[adj[x][i].X]); 
        dp[x] += dp[adj[x][i].X]; 
    }
}
void cal(int x, int prv) {
    sz += val[x];
    for(int i = 0; i < adj[x].size(); i++) if(prv != adj[x][i].X) cal(adj[x][i].X,x);
}
int main () {
    ios::sync_with_stdio();
    cin >> n;
    for(int i = 1; i <= n; i++) { par[i] = i; val[i] = 1; }
    for(int i = 1; i < n; i++) {
        cin >> edge[i].Y.X >> edge[i].Y.Y >> edge[i].X.X;
        edge[i].X.Y = i;
    }   
    sort(edge+1,edge+n);
    for(int i = 1; i < n; i++) {
        int j = i;
        col++;
        v.clear();
        while(j < n && edge[i].X.X == edge[j].X.X) {
            int x = find(edge[j].Y.X);
            int y = find(edge[j].Y.Y);
            int z = edge[j].X.Y;
            if(rang[x] != col) { rang[x] = col; adj[x].clear(); v.pb(x); }
            if(rang[y] != col) { rang[y] = col; adj[y].clear(); v.pb(y); }
            adj[x].pb(pii(y,z));
            adj[y].pb(pii(x,z));
            j++;
        }
        col++;
        for(int p = 0; p < v.size(); p++) if(col != rang[v[p]]) { 
            sz = 0; cal(v[p],0); 
            dfs(v[p]); 
        }
        for(int p = i; p < j; p++) un(edge[p].Y.X,edge[p].Y.Y);
        i = j-1;
    }
    for(int i = 1; i < n; i++) { if(mx < ans[i]) { mx = ans[i]; t = 1; } else if(mx == ans[i]) t++; }
    cout << mx << ' ' << t << endl;
    for(int i = 1; i < n; i++) if(ans[i] == mx) cout << i << ' '; cout << endl;
    return 0;
}
        
    
