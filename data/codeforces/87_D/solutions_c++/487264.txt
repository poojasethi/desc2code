#include <stdio.h>
#include <string.h>
#include <algorithm>
#define maxn 100010

using namespace std;

typedef long long LL;

int st[maxn],aim[maxn<<1],next[maxn<<1],num[maxn<<1],ln;
int a[maxn],b[maxn],cost[maxn];
int tag[maxn],flag[maxn];
int idx[maxn];
int father[maxn];
int q[maxn],tot[maxn];
LL w[maxn];
int n;
bool cmp(int x,int y){
	return cost[x]<cost[y];
}
inline void in_edge(int x,int y,int z){
	aim[ln]=y;
	next[ln]=st[x];
	num[ln]=z;
	st[x]=ln++;
}
inline int find(int x){
	return father[x]<0 ? x : father[x]=find(father[x]);
}
void bfs(int sp){
	int qn=1,sum=-father[sp];
	q[0]=sp;
	tag[sp]=1;
	for (int p=0;p<qn;p++)
		for (int i=st[q[p]];i!=-1;i=next[i])
			if (!tag[aim[i]]){
				tag[aim[i]]=1;
				q[qn++]=aim[i];
				sum-=father[aim[i]];
			}
	for (int p=qn-1;p>=0;p--){
		int k=q[p];
		flag[k]=1;
		tot[k]=-father[k];
		tag[k]=0;
		for (int i=st[k];i!=-1;i=next[i])
			if (!tag[aim[i]]){
				LL v=tot[aim[i]];
				w[num[i]]=v*(sum-v);
				tot[k]+=v;
			}
	}
}
int main(){
	scanf("%d",&n);
	for (int i=1;i<n;i++){
		scanf("%d%d%d",a+i,b+i,cost+i);
		idx[i]=i;
	}
	for (int i=1;i<=n;i++) father[i]=-1;
	sort(idx+1,idx+n,cmp);
	memset(tag,0,sizeof(tag));
	ln=0;
	for (int i=1,j;i<n;i=j+1){
		for (j=i;j<n-1 && cost[idx[j+1]]==cost[idx[j]];j++);
		for (int k=i;k<=j;k++){
			int p=idx[k];
			int u=find(a[p]),v=find(b[p]);
			st[u]=-1;
			st[v]=-1;
			a[p]=u;b[p]=v;
			flag[u]=flag[v]=0;
		}
		for (int k=i;k<=j;k++){
			int u=a[idx[k]],v=b[idx[k]];
			in_edge(u,v,idx[k]);
			in_edge(v,u,idx[k]);
		}
		for (int k=i;k<=j;k++)
			if (!flag[a[idx[k]]]) bfs(a[idx[k]]);
		for (int k=i;k<=j;k++){
			int u=find(a[idx[k]]),v=find(b[idx[k]]);
			if (father[u]<father[v]){
				father[v]+=father[u];
				father[u]=v;
			}else{
				father[u]+=father[v];
				father[v]=u;
			}
		}
	}
	LL ans=0,ansp=0;
	for (int i=1;i<n;i++)
		if (w[i]>ans){
			ans=w[i];
			ansp=1;
		}else
		if (w[i]==ans) ansp++;
	printf("%I64d %d\n",ans<<1,ansp);
	for (int i=1;i<n;i++)
		if (w[i]==ans) printf("%d ",i);
	printf("\n");
	// freopen("test.txt","w",stdout);
	// printf("100000");
	// for (int i=1;i<100000;i++){
		// printf("1 %d 1\n",i+1);
	// }
	return 0;
}