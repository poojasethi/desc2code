#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)v.size())

#define MAX 100005
vector<pair<int,int> > tree[MAX];
li n;
li ans[MAX];
li sum[MAX];
li cnt=0;
bool visited[MAX];
#define E pair<li,pair<pair<li,li>,li> >
#define UNION_N MAX
#define P pair<li,li>
vector< E > edge;
int parent[UNION_N];
void init(){
	rep(i,UNION_N) parent[i]=i;
}
int find(int a){
	if(parent[a]==a) return a;
	return parent[a]=find(parent[a]);
}
void uni(int a,int b){
	parent[find(a)]=find(b);
	return ;
}

void dfs(int pos,int parent){
	visited[pos]=true;
	cnt+=sum[pos];
	rep(i,sz(tree[pos]))if(tree[pos][i].first!=parent) dfs(tree[pos][i].first,pos);
}

int cal(int pos,int parent){
	li res=0;
	rep(i,sz(tree[pos]))if(tree[pos][i].first!=parent){
		li tmp=cal(tree[pos][i].first,pos);
		ans[tree[pos][i].second]=2ll*tmp*(cnt-tmp);
		res+=tmp;
	}
	return res+sum[pos];
}

int main(){
	cin>>n;
	init();
	rep(i,n-1){
		li a,b,dis;
		cin>>a>>b>>dis;
		edge.pb(make_pair(dis,make_pair(make_pair(a-1,b-1),i)));
	}
	rep(i,MAX) sum[i]=1;
	sort(edge.begin(),edge.end());
	for(int pos=0;pos<n-1;pos++){
		li from=pos;
		while(pos+1<n-1 && edge[pos].first==edge[pos+1].first) pos++;
		li to=pos;
#define first(i) find(edge[i].second.first.first)
#define second(i) find(edge[i].second.first.second) 
		for(int i=from;i<=to;i++){
			tree[first(i)].clear();
			tree[second(i)].clear();
			visited[first(i)]=visited[second(i)]=false;
		}
		for(int i=from;i<=to;i++){
			tree[first(i)].pb(make_pair(second(i),edge[i].second.second));
			tree[second(i)].pb(make_pair(first(i),edge[i].second.second));
		}
		for(int i=from;i<=to;i++){
			if(!visited[first(i)]){
				cnt=0;
				dfs(first(i),-1);
				cal(first(i),-1);
			}
		}
		for(int i=from;i<=to;i++){
			li a=sum[first(i)];
			li b=sum[second(i)];
			uni(first(i),second(i));
			sum[first(i)]=a+b;
		}
	}
	li maxi=0;
	vector<int> res;
	rep(i,n-1) maxi=max(maxi,ans[i]);
	rep(i,n-1)if(ans[i]==maxi) res.pb(i);
	cout<<maxi<<" "<<sz(res)<<endl;
	rep(i,sz(res)) cout<<1+res[i]<<" ";
	cout<<endl;
}
