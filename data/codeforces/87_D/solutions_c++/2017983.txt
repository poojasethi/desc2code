#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<vector>
using namespace std;
int n,tmp[51],h[100001],tag[100001],rr=0,a1,a2,sv[100001];
long long s[100001],all,ans[100001],sh=0;
vector <int> Ed[100001];
pair<int,int> W[100001],E[100001];
long long DFS(int now,int cent){
    if(tag[now] == rr) return 0;
    tag[now] = rr; all += s[now];
    sv[now] = cent;
    for(int i=0;i<Ed[now].size();i++)
       s[now] += DFS(Ed[now][i],cent);
    return s[now];
}
int find(int now){ if(h[now] != now) h[now] = find(h[now]); return h[now];}
int main(){
    scanf("%d",&n);
    for(int i=1;i<n;i++){
        for(int j=0;j<3;j++) scanf("%d",&tmp[j]);
        E[i] = make_pair( tmp[0],tmp[1] );
        W[i] = make_pair( tmp[2],i );
    }
    sort(W+1,W+n);
    for(int i=1;i<=n;i++) h[i] = i,s[i] = 1LL;
    for(int i=1,j=i;i<n;i++){
       for(j=i;j<n&&W[i].first == W[j].first;j++){
          a1 = h[E[W[j].second].first] = find(h[E[W[j].second].first]);
          a2 = h[E[W[j].second].second] = find(h[E[W[j].second].second]);
          Ed[a1].push_back(a2);
          Ed[a2].push_back(a1);        
       }
       rr++;
       for(int k=i;k<j;k++){
          if(tag[h[E[W[k].second].first]] < rr)
              s[h[E[W[k].second].first]] = DFS(h[E[W[k].second].first],h[E[W[k].second].first]);
       }
       for(int k=i;k<j;k++){
          a1 = h[E[W[k].second].first],a2 = h[E[W[k].second].second];
          ans[W[k].second] = (s[sv[a1]]-min(s[a1],s[a2]))*min(s[a1],s[a2]);     
          sh = max(sh,ans[W[k].second]);
          Ed[a1].pop_back(); Ed[a2].pop_back();
       }
       for(int k=i;k<j;k++){
          a1 = h[E[W[k].second].first],a2 = h[E[W[k].second].second];
          h[a1] = sv[a1]; h[a2] = sv[a2];
       }
       i = j-1;
    }
    //for(int i=1;i<n;i++) printf("%d %I64d\n",i,ans[i]);
    int x = 0;
    for(int i=1;i<n;i++) if(ans[i] == sh) x++;
    printf("%I64d %d\n",sh*2,x);
    for(int i=1;i<n;i++) if(ans[i] == sh) printf("%d ",i);
    //system("pause");
    return 0;
}
