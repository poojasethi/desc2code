#include<iostream>
#include<vector>
#include<sstream>
#include<algorithm>
#include<numeric>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<complex>
#include<set>
#include<map>
#include<queue>
#include<cassert>

using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define rp(i,c) rep(i,(c).size())
#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int,int> pi;
typedef long long ll;

const int inf=1<<28;
const double INF=1e12,EPS=1e-9;

struct edge{
	int u,v,w,id;
	bool operator<(const edge &r)const{
		return w<r.w;
	}
};
edge es[100000];
int n;
int p[100000],sz[100000];
int root(int x){
	if(x==p[x])return x;
	return p[x]=root(p[x]);
}
void merge(int a,int b){
	a=root(a); b=root(b);
	if(a==b)return;
	p[a]=b;
	sz[b]+=sz[a];
}
int cnt,cur;
ll ans[100000],mx;
int dp[200000],dpi[200000];
vector<edge> graph[100000];

int dfs(int u,int prev,int id){
	if(dpi[id]==cur)return dp[id];
	
	int res=sz[root(u)];
	rep(i,graph[u].size()){
		int v=graph[u][i].v, nid=graph[u][i].id;
		if(v!=prev)res+=dfs(v,u,nid);
	}
	dpi[id]=cur;
	return dp[id]=res;
}
void run()
{
	cin>>n;
	rep(i,n-1){
		int u,v,w; cin>>u>>v>>w;
		es[i]=(edge){u-1,v-1,w,i};
		dpi[i]=dpi[i+n]=-1;
	}
	sort(es,es+n-1);
	rep(i,n)p[i]=i,sz[i]=1;
	mx=-1;
	
	rep(i,n-1){
		vector<edge> e;
		for(int j=i;j<n-1&&es[j].w==es[i].w;j++){
			e.pb(es[j]);
			int u=root(es[j].u), v=root(es[j].v), id=es[j].id;
			graph[u].pb((edge){ u,v,0,id });
			graph[v].pb((edge){ v,u,0,id+n });
		}
		cur=i;
		rep(j,e.size()){
			int u=root(e[j].u), v=root(e[j].v), id=e[j].id;
			ans[e[j].id]=2ll*dfs(v,u,id)*dfs(u,v,id+n);
			if(ans[e[j].id]>mx)mx=ans[e[j].id], cnt=0;
			if(ans[e[j].id]==mx)cnt++;
		}
		rep(j,e.size()){
			int u=root(e[j].u), v=root(e[j].v);
			graph[u].clear();
			graph[v].clear();
			merge(u,v);
		}
		i+=e.size()-1;
	}
	cout<<mx<<" "<<cnt<<endl;
	rep(i,n-1)if(ans[i]==mx)cout<<i+1<<" ";
	cout<<endl;
}

int main()
{
#ifndef ONLINE_JUDGE
	int cs=3;rep(i,cs)
#endif
	run();
}
