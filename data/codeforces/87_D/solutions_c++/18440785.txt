#include<bits/stdc++.h>
#define N 100005
#define pb push_back
using namespace std;
typedef long long LL;LL ans;
int Q[N],vis[N],id[N],u[N],v[N],w[N],f[N],g[N],size[N];
vector<int>a[N],b[N],ID;int n,i,k,Case,all;
int cmp(const int &A,const int &B){return w[A]<w[B];}
int get(int u){return f[u]==u?u:f[u]=get(f[u]);}
void check(LL value,int pos){
  if (value<ans) return; 
  if (value>ans) ans=value,ID.clear();
  ID.pb(pos);
}
void DFS1(int x,int Fa){
  size[x]=g[x];vis[x]=Case;
  for (int i=0,y;i<a[x].size();i++)
    if ((y=a[x][i])!=Fa)
      DFS1(y,x),size[x]+=size[y];
}
void DFS2(int x,int Fa,int lastid){
  for (int i=0,y;i<a[x].size();i++)
    if ((y=a[x][i])!=Fa)
      DFS2(y,x,b[x][i]);
  if (lastid)
    check(1ll*size[x]*(all-size[x]),lastid);
}
void Push(int p){if (vis[p]!=Case) vis[p]=Case,Q[++*Q]=p,all+=g[p];}
void work(int x,int y){
  *Q=0;++Case;all=0;
  for (int i=x;i<=y;i++){
    int p=get(u[id[i]]),q=get(v[id[i]]);
    assert(p!=q);Push(p);Push(q);
    a[p].pb(q);a[q].pb(p);
    b[p].pb(id[i]);b[q].pb(id[i]);
  }
  ++Case;
  for (int i=1;i<=*Q;i++)
    if (vis[Q[i]]!=Case)
      DFS1(Q[i],0),all=size[Q[i]],DFS2(Q[i],0,0);
  for (int i=1;i<=*Q;i++) 
    a[Q[i]].clear(),b[Q[i]].clear();
  for (int i=x;i<=y;i++){
    int p=get(u[id[i]]),q=get(v[id[i]]);
    assert(p!=q);
    f[p]=q;g[q]+=g[p];
  }
  //puts("---------------------");
}
int main(){
  scanf("%d",&n);ans=-1;
  for (i=1;i<n;i++)
    scanf("%d%d%d",&u[i],&v[i],&w[i]),id[i]=i;
  for (i=1;i<=n;i++) f[i]=i,g[i]=1;
  sort(id+1,id+n,cmp);
  for (k=1,i=2;i<=n;i++)
    if (i==n||w[id[i]]!=w[id[k]])
      work(k,i-1),k=i;
  printf("%I64d %d\n",ans*2,ID.size());
  sort(ID.begin(),ID.end());
  for (int i=0;i<ID.size();i++)
    printf("%d ",ID[i]);
}
  