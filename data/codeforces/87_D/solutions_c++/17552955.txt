#include <bits/stdc++.h>
using namespace std;
#define DEBUG(x) cerr << #x << " = " << x << endl;

typedef long long LL;
typedef pair<int, int> II;
struct Edge {
	int u, v, w, id;
	bool operator < (const Edge &d) const {
		return w < d.w;
	}
};

const int N = (int) 1e5 + 10;
int n, p[N], p2[N], tot;
Edge E[N];
vector<II> adj[N];
bool fre[N];
pair<LL, int> f[N];

int Root(int *p, int u) {
	if (p[u] < 0) return u;
	return p[u] = Root(p, p[u]);
}

void Merge(int *p, int u, int v) {
	u = Root(p, u); v = Root(p, v);
	if (u == v) return;
	if (p[u] > p[v]) swap(u, v);
	p[u] += p[v]; p[v] = u;
}

int DFS(int u) {
	int ans = -p[u]; fre[u] = false;
	for (int i = 0; i < (int) adj[u].size(); ++i) {
		int v = adj[u][i].first, w = adj[u][i].second;
		if (fre[v]) {
			int c = DFS(v); ans += c;
			f[w].first = c * (tot - c + 0ll);
		}
	}
	adj[u].clear();
	return ans;
}

int main() {
#ifdef LOCAL
	freopen("Data.inp", "r", stdin);
	freopen("Data.out", "w", stdout);
#endif

	scanf("%d", &n);
	for (int i = 1; i <= n - 1; ++i) scanf("%d%d%d", &E[i].u, &E[i].v, &E[i].w), E[i].id = i;
	sort(E + 1, E + n);

	for (int i = 1; i <= n; ++i) p[i] = -1;
	for (int i = 1; i <= n - 1; ++i) f[i] = make_pair(0, -i);
	for (int i = 1; i <= n - 1; ++i) {
		int j = i; tot = 0;
		while (j <= n - 2 && E[i].w == E[j + 1].w) j++;
		for (int k = i; k <= j; ++k) {
			int u = Root(p, E[k].u), v = Root(p, E[k].v), x = E[k].id;
			if (u != v) {
				adj[u].push_back(II(v, x));
				adj[v].push_back(II(u, x));
				fre[u] = fre[v] = true;
				p2[u] = p[u];
				p2[v] = p[v];
			}
		}
		for (int k = i; k <= j; ++k) Merge(p2, E[k].u, E[k].v);
		for (int k = i; k <= j; ++k) {
			int r = Root(p, E[k].u);
			if (fre[r]) {
				tot = -p2[Root(p2, E[k].u)];
				DFS(r);
			}
		}
		for (int k = i; k <= j; ++k) Merge(p, E[k].u, E[k].v);
		i = j;
	}
	sort(f + 1, f + n, greater< pair<LL, int> >());

	int d = 0;
	for (int i = 1; i <= n - 1; ++i) if (f[i].first == f[1].first) d++;
	printf("%I64d %d\n", f[1].first * 2, d);
	for (int i = 1; i <= d; ++i) printf("%d ", -f[i].second);
	return 0;
}
