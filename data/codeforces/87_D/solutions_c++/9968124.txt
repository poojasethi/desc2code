#include <cstdio>
#include <algorithm>
#define maxn 200005
using namespace std;

struct node{int u,v,l,id,s;}W[maxn];
int a,b,c,d,e,f,g,h,i,j,k,l,n,tot;
long long m;
int way[maxn],next[maxn],last[maxn],deep[maxn],fa[maxn],s[maxn],sum[maxn],ans[maxn];

inline void make(int a,int b){
    way[++tot]=b;next[tot]=last[a];last[a]=tot;
    way[++tot]=a;next[tot]=last[b];last[b]=tot;
}

inline void dfs(int x){
    for(int i=last[x];i;i=next[i])
    if(!deep[way[i]]){
        deep[way[i]]=deep[x]+1;
        dfs(way[i]);
    }
}

inline bool cmp(node a,node b){return a.l<b.l||(a.l==b.l&&a.s>b.s);}

int get(int x){if(fa[x]==x)return x;return fa[x]=get(fa[x]);}

int main(){
    scanf("%d",&n);
    for(i=1;i<n;i++){
        scanf("%d%d%d",&a,&b,&c);
        make(a,b);
        W[i]=(node){a,b,c,i};
    }
    deep[1]=1;dfs(1);
    for(i=1;i<n;i++)W[i].s=max(deep[W[i].u],deep[W[i].v]);
    sort(W+1,W+n,cmp);
    for(i=1;i<=n;i++){fa[i]=i;sum[i]=1;}
    for(i=1;i<n;i=j){
        for(j=i;j<n&&W[j].l==W[i].l;j++){
            int U=W[j].u,V=W[j].v;
            if(deep[U]>deep[V])swap(U,V);
            s[j]=sum[V];
            sum[get(U)]+=sum[V];
            fa[V]=get(U);
        }
        for(k=i;k<j;k++){
            long long Ans=2ll*s[k]*(sum[get(W[k].u)]-s[k]);
            if(Ans>m){m=Ans;ans[0]=1;ans[1]=W[k].id;}
            else if(Ans==m){ans[++ans[0]]=W[k].id;}
        }
    }
    printf("%I64d %d\n",m,ans[0]);
    sort(ans+1,ans+1+ans[0]);
    for(i=1;i<=ans[0];i++)printf("%d ",ans[i]);
    return 0;
}