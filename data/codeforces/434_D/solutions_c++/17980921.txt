#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>
using namespace std;
typedef long long LL;
const int SIZEN=60*210+10;
const LL INF=1e18;
int N,S,T;
class Edge{
public:
	int from,to;
	LL cap,flow;
};
vector<Edge> edges;
vector<int> c[SIZEN];
void addedge(int from,int to,LL cap){
	//cout<<from<<" "<<to<<" "<<cap<<endl;
	edges.push_back((Edge){from,to,cap,0});
	edges.push_back((Edge){to,from,0,0});
	int tot=edges.size()-2;
	c[from].push_back(tot);
	c[to].push_back(tot+1);
}
int dep[SIZEN]={0};
bool vis[SIZEN]={0};
bool BFS(int S,int T){
	memset(vis,0,sizeof(vis));
	queue<int> Q;
	Q.push(S);vis[S]=true;dep[S]=0;
	while(!Q.empty()){
		int x=Q.front();Q.pop();
		for(int i=0;i<c[x].size();i++){
			Edge &e=edges[c[x][i]];
			if(!vis[e.to]&&e.cap>e.flow){
				vis[e.to]=true;
				dep[e.to]=dep[x]+1;
				Q.push(e.to);
			}
		}
	}
	return vis[T];
}
int cur[SIZEN]={0};
LL DFS(int x,LL a){
	if(x==T||!a) return a;
	LL ret=0;
	for(int &i=cur[x];i<c[x].size();i++){
		Edge &e=edges[c[x][i]];
		if(dep[x]+1==dep[e.to]){
			LL df=DFS(e.to,min(a,e.cap-e.flow));
			if(df){
				ret+=df;
				a-=df;
				e.flow+=df;
				edges[c[x][i]^1].flow-=df;
			}
			if(!a) break;
		}
	}
	if(!ret) dep[x]=-1;
	return ret;
}
LL Dinic(void){
	LL ans=0;
	while(BFS(S,T)){
		memset(cur,0,sizeof(cur));
		ans+=DFS(S,INF);
	}
	return ans;
}
const int SIZEn=60;
int n,m;
int A[SIZEn],B[SIZEn],C[SIZEn];
int L[SIZEn],R[SIZEn];
LL calc(int i,LL x){
	return A[i]*x*x+B[i]*x+C[i];
}
LL all_sum;
LL get_mx(int k){
	//cout<<k<<" "<<A[k]<<" "<<B[k]<<" "<<C[k]<<endl;
	//cout<<k<<" "<<L[k]<<" "<<R[k]<<endl;
	LL ans=-INF;
	for(LL x=L[k];x<=R[k];x++){
		ans=max(ans,calc(k,x));
	}
	return ans;
}
int id[SIZEn][210]={0};
int idtot=0;
void init(void){
	//LL mxX=-INF,mnX=INF;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) scanf("%d%d%d",&A[i],&B[i],&C[i]);
	for(int i=1;i<=n;i++){
		scanf("%d%d",&L[i],&R[i]);
		//cout<<i<<" "<<L[i]<<" "<<R[i]<<endl;
		//mxX=max(mxX,R[i]);
		//mnX=min(mnX,L[i]);
	}
	for(int i=1;i<=n;i++){
		for(int j=L[i];j<=R[i]+1;j++){
			id[i][j+100]=++idtot;
			//cout<<i<<" "<<j<<" "<<id[i][j+100]<<endl;
		}
	}
	N=idtot+1;
	S=0,T=N;
	for(int i=1;i<=n;i++){
		LL nowmax=get_mx(i);
		//cout<<i<<" "<<nowmax<<endl;
		all_sum+=nowmax;
		addedge(S,id[i][L[i]+100],INF);
		for(int j=L[i];j<=R[i];j++){
			addedge(id[i][j+100],id[i][j+101],nowmax-calc(i,j));
		}
		addedge(id[i][R[i]+1+100],T,INF);
	}
	int u,v,d;
	for(int t=1;t<=m;t++){
		scanf("%d%d%d",&u,&v,&d);//xu<=xv+d
		for(int i=L[u];i<=R[u]+1;i++){
			if(L[v]<=i-d&&i-d<=R[v]+1){
				//cout<<u<<" "<<v<<" "<<i<<" "<<i-d<<endl;
				//cout<<id[u][i+100]<<" "<<id[v][i-d+100]<<endl;
				addedge(id[u][i+100],id[v][i-d+100],INF);
			}
		}
	}
}
int main(){
	//freopen("input.in","r",stdin);
	init();
	//cout<<all_sum<<endl;
	LL ans=all_sum-Dinic();
	cout<<ans<<endl;
	return 0;
}

