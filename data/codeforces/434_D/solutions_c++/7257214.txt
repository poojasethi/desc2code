#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

using namespace std;

const int limite=51*205;

const int infinito=100000000;

int n,m;

vector<int> g[limite];
vector<int> gg[limite];
int capacidad[limite][limite];
int anterior[limite];
int visto[limite];
int llega[limite];
int power[limite];
int vistobis[limite];

int pasos=0;

int aumenta()
{
  pasos++;
  queue<int> q;
  q.push(0);
  llega[0]=infinito;
  anterior[0]=-1;
  visto[0]=pasos;
  while (not q.empty()) {
    int u=q.front();
    q.pop();
    vector<int> &ar=g[u];
    for (int i=0;i<int(ar.size());i++) {
      int v=ar[i];
      if (visto[v]<pasos and capacidad[u][v]>0) {
	visto[v]=pasos;
	anterior[v]=u;
	llega[v]=min(llega[u],capacidad[u][v]);
	if (v==1) {
	  u=v;
	  while (u!=0) {
	    int antu=anterior[u];
	    capacidad[antu][u]-=llega[v];
	    capacidad[u][antu]+=llega[v];
	    u=antu;
	  }
	  return llega[v];
	}
	q.push(v);
      }
    }
  }
  return 0;
}

int calcula()
{
  
  int flow=0;
  int addflow;
  do {
    addflow=aumenta();
    flow+=addflow;
  } while (addflow>0);
  return 1000000*n-flow;
}


int a[50],b[50],c[50],l[50],r[50];

int cuad(int x)
{
  return x*x;
}

int main()
{
  cin>>n>>m;
  for (int i=0;i<n;i++)
    cin>>a[i]>>b[i]>>c[i];
  for (int i=0;i<n;i++) {
    cin>>l[i]>>r[i];
    int ll=l[i]+205*(i+1);
    int rr=r[i]+205*(i+1);
    g[0].push_back(ll-1);
    gg[0].push_back(ll-1);
    g[ll-1].push_back(0);
    capacidad[0][ll-1]=infinito;
    for (int j=ll;j<=rr;j++) {
      g[j-1].push_back(j);
      gg[j-1].push_back(j);
      g[j].push_back(j-1);
      power[j]=a[i]*cuad(j-205*(i+1))+b[i]*(j-205*(i+1))+c[i];
      capacidad[j-1][j]=1000000-power[j];
    }
    g[rr].push_back(1);
    gg[rr].push_back(1);
    g[1].push_back(rr);
    capacidad[rr][1]=infinito;
  }
  for (int k=0;k<m;k++) {
    int i1,i2,d;
    cin>>i1>>i2>>d;
    i1--;i2--;
    for (int j1=l[i1]-1;j1<=r[i1];j1++) {
      int j2=j1-d;
      if (j2>=l[i2]-1 and j2<=r[i2]) {
	int jj1=j1+205*(i1+1);
	int jj2=j2+205*(i2+1);
	g[jj1].push_back(jj2);
	gg[jj1].push_back(jj2);
	g[jj2].push_back(jj1);
	capacidad[jj1][jj2]=infinito;
      }
    }
  }
  cout<<calcula()<<endl;
}












