#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
using namespace std;
const int L=10010;
const int R=110;
const int LEN=1000000;
const int INF=2000010000;
const int MAXN=2010000;
struct edge{int x,y,n,c,op;}e[LEN];
int h[L],tot;
int ps[L],dep[L],cur[L],top;
int vs,vt,n,m;
int a[R],b[R],c[R],l[R],r[R],s[R];
int calc(int i,int x)	{return a[i]*x*x+b[i]*x+c[i];}
void ins(int x,int y,int c)
{
	e[++tot].x=x;e[tot].y=y;e[tot].c=c;e[tot].n=h[x];h[x]=tot;e[tot].op=tot+1;
	e[++tot].x=y;e[tot].y=x;e[tot].c=0;e[tot].n=h[y];h[y]=tot;e[tot].op=tot-1;
}
void init(void)
{
  //  freopen("Nanami's Power Plant.in","r",stdin);
  //  freopen("Nanami's Power Plant.out","w",stdout);
    cin>>n>>m;
    vs=0;vt=1;
    int i,j,k,u,v,d;
    for(i=1;i<=n;i++)	scanf("%d%d%d",&a[i],&b[i],&c[i]);
    for(i=1;i<=n;i++)
	{
		scanf("%d%d",&l[i],&r[i]);
		s[i]=vt;vt+=r[i]-l[i]+2;
	}
	for(k=0,i=1;i<=n;i++)
	{
		ins(vs,s[i],INF);ins(s[i]+r[i]-l[i]+1,vt,INF);
		for(j=0;l[i]+j<=r[i];j++)	ins(s[i]+j,s[i]+j+1,MAXN-calc(i,l[i]+j));
	}
	for(i=1;i<=m;i++)
	{
		scanf("%d%d%d",&u,&v,&d);
		for(j=-1;l[u]+j<=r[u];j++)
		{
			k=l[u]+j-d;
			if(k>=l[v]-1&&k<=r[v])	ins(s[u]+j+1,s[v]+k-(l[v]-1),INF);
		}
	}
}

int dinic(void)
{
	int i,j,k,f,r,tr,res=0;
	while(1)
	{
		memset(dep,-1,sizeof(dep));
		for(dep[ps[0]=vs]=0,f=0,r=1;f!=r;)
			for(j=h[i=ps[f++]];j;j=e[j].n)
				if(e[j].c&&dep[k=e[j].y]==-1)
				{
					dep[k]=dep[i]+1;ps[r++]=k;
					if(k==vt)	{f=r;break;}
				}
		if(dep[vt]==-1)	break;
		memcpy(cur,h,sizeof(h));
		for(i=vs,top=0;;)
		{
			if(i==vt)
			{
				for(k=0,tr=INF;k<top;k++)
					if(e[ps[k]].c<tr)	tr=e[ps[f=k]].c;
				for(k=0;k<top;k++)
					e[ps[k]].c-=tr,e[e[ps[k]].op].c+=tr;
				res+=tr;i=e[ps[top=f]].x;
			}
			for(j=cur[i];cur[i];j=cur[i]=e[j].n)
				if(e[j].c&&dep[e[j].y]==dep[i]+1)	break;
			if(cur[i])	{ps[top++]=j;i=e[j].y;}
			else
			{
				if(!top)	break;
				dep[i]=-1;i=e[ps[--top]].x;
			}
		}
	}
	return res;
}
void work(void)
{
	printf("%d\n",MAXN*n-dinic());
}
int main(void)
{
    init();
    work();
    return 0;
}
