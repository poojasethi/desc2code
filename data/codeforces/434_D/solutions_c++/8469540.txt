#include <bits/stdc++.h>
using namespace std;
#define M0(a) memset(a, 0, sizeof(a))
#define Inf 0x3fffffff
const int maxn = 20010;
const int maxm = 900010;
const int big = 15000000;
struct oo{
    int y, f, next;
};
struct MaxFlow{
       int n, S, T, tot;
       int son[maxn], dist[maxn], gap[maxn];
       oo e[maxm];
       int sap(int x, int aug){
           if (x == T) return aug;
           int mind = n;
           int sum = 0, f;
           for (int p = son[x]; p != -1; p = e[p].next){
                  int y = e[p].y;
                  if (dist[y] + 1 == dist[x] && e[p].f){
                       f = sap(y, min(e[p].f, aug - sum));
                       e[p].f -= f;
                       e[p^1].f += f;
                       sum += f;
                       if (sum == aug || dist[S] >= n) return sum;
                  }
                  if (e[p].f) mind = min(mind, dist[y]);
           }
           if (!sum){
               if (!(--gap[dist[x]])) dist[S] = n;
               ++gap[dist[x] = mind + 1];
           }
           return sum;
       }
       void add(int x, int y, int f){
            e[tot].y = y; e[tot].f = f;
            e[tot].next = son[x]; son[x] = tot++;
            e[tot].y = x; e[tot].f = 0;
            e[tot].next = son[y]; son[y] = tot++;
       }

       void init(int S, int T, int n){
            memset(son, -1, sizeof(son));
            tot = 0;
            this->S = S, this->T = T, this->n = n;
       }
       int maxflow(){
            M0(gap);
            M0(dist);
            gap[0] = n;
            int ans = 0;
            while (dist[S] < n) ans += sap(S, Inf);
            return ans;
       }
} F;
int S, T;
int n, m, a[120], b[200], c[200], l[200], r[200];
inline int f(const int&k, const int& x){
     return big - (a[k] * x * x + b[k] * x + c[k]);
}

inline int node(const int&k, const int& x){
     return x == l[k] - 1 ? S : (k-1) * 201 + x + 101;
}

void solve(){
     for (int i = 1; i <= n; ++i) scanf("%d%d%d", &a[i], &b[i], &c[i]);
     for (int i = 1;  i<= n; ++i) scanf("%d%d", &l[i], &r[i]);
     S = 0, T = 201 * n + 1;
     F.init(S, T, T + 1);
     for (int i = 1; i <= n; ++i){
         for (int j = l[i]; j <= r[i]; ++j)
             F.add(node(i, j-1), node(i, j), f(i, j));
         F.add(node(i, r[i]), T, Inf);
     }
     int u, v, d;
     int x;
     for (int i = 1; i <= m; ++i){
          scanf("%d%d%d", &u, &v, &d);
          for (int j = l[v]; j <= r[v]; ++j) if (j + d <= r[u]){
                  x = j + d;
                  if (x < l[u]) x = l[u] - 1;
                  F.add(node(u, x), node(v, j), Inf); 
          }
     }
     int ans = big * n;
     ans -= F.maxflow();
     cout << ans << endl;
}

int main(){
 //   freopen("a.in", "r", stdin);
    while (scanf("%d%d", &n, &m) != EOF){
        solve();
    }            
}
