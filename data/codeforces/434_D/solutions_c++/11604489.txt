#include<cstring>
#include<algorithm>
#include<cstdio>
using namespace std;

#define Me(x , y) memset(x , y , sizeof x)
#define mymax(x , y) ((x) > (y) ? (x) : (y))
#define mymin(x , y) ((x) < (y) ? (x) : (y))
typedef long long ll;
const int N = 60007;

int fi[N] , g[N * 30] , next[N * 30] , cur[N] , vh[N] , h[N] , n , m , st[N] , l[N] , r[N] , tot , S , T;
ll A[N],B[N],C[N],d[N * 30],inf,maxt;

ll Calc(int x , int i)
{
	return A[x] * i * i + B[x] * i + C[x];
}

int Getnum(int x , int p)
{
	return st[x] + p - l[x];
}

void Link(int x , int y , ll z)
{
	g[++ tot] = y , next[tot] = fi[x] , fi[x] = tot , d[tot] = z;
	g[++ tot] = x , next[tot] = fi[y] , fi[y] = tot , d[tot] = 0;
}

ll Dfs(int x , ll flow)
{
	if (x == T) return flow;
	ll now = 0;
	for (int y = cur[x] ; y != -1 ; y = next[y])
		if (d[y] && h[g[y]] + 1 == h[x])
		{
			ll st = Dfs(g[y] , mymin(flow - now , d[y]));
			now += st , d[y ^ 1] += st , d[y] -= st;
			if (now == flow || h[S] > 3 * T) return now;
		}
	cur[x] = fi[x];
	if (!(-- vh[h[x]])) h[S] = 4 * T;
	vh[++ h[x]] ++;
	return now;
}

int main()
{
	Me(fi , 255) , Me(next , 255) , Me(vh , 0) , Me(h , 0) , tot = -1 , inf = 1 << 30 , inf <<= 30;
	maxt = -inf;
	scanf("%d%d" , &n , &m);
	for (int i = 1 ; i <= n ; i ++) scanf("%I64d%I64d%I64d" , &A[i] , &B[i] , &C[i]);
	st[1] = 1;
	for (int i = 1 ; i <= n ; i ++)
	{
		scanf("%d%d" , &l[i] , &r[i]);
		st[i + 1] = st[i] + r[i] - l[i] + 2;
		for (int j = l[i] ; j <= r[i] ; j ++)
			maxt = mymax(maxt , Calc(i , j));
	}
	S = 0 , T = st[n + 1];
	for (int i = 1 ; i <= n ; i ++)//st[i] --> l[i] - 1
	{
		Link(S , st[i] , inf);
		for (int j = l[i] ; j <= r[i] ; j ++) Link(Getnum(i , j) , Getnum(i , j) + 1 , maxt - Calc(i , j));
		Link(st[i + 1] - 1 , T , inf);
	}
	
	for (int i = 1 ; i <= m ; i ++)
	{
		int x,y,z;
		scanf("%d%d%d" , &x , &y , &z);
		for (int j = l[x] ; j <= r[x] ; j ++) // Getnum(x , l[i]) means choose l[i] , which links its fa to another side
			if (j - z >= l[y] && j - z <= r[y] + 1)
				Link(Getnum(x , j) , Getnum(y , j - z) , inf);
	}
	
	vh[0] = T + 1;for (int i = S ; i <= T ; i ++) cur[i] = fi[i];
	ll flow = 0 , ans = 0;
	while (1)
	{
		flow += Dfs(S , inf);
		if (h[S] > T * 3) break;
	}
	ans = maxt * n - flow;
	printf("%I64d" , ans);
	
	return 0;
}