#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
const long long oo=(1LL)<<50;
using namespace std;
long long flow[2000000],d[2000000];
int next[2000000],sora[2000000],tail[2000000],st[2000000],po[2000000];
int n,s,t,ss,m;
int u[200000],v[200000],l[200000],r[200000],a[200000],b[200000],c[200000],e[200000],id[500][500];
void origin()
{
	s=n*300+1,t=s+1,ss=t;
	for (int i=1;i<=t;i++) tail[i]=i;
}
void link(int x,int y,long long z)
{
	++ss,next[tail[x]]=ss,tail[x]=ss,sora[ss]=y,flow[ss]=z;
	++ss,next[tail[y]]=ss,tail[y]=ss,sora[ss]=x,flow[ss]=0;
	po[ss]=ss-1,po[ss-1]=ss;
}
int bfs(int s,int t)
{
	for (int i=1;i<=t;i++) d[i]=oo;
	int h,r=h=0;
	st[r=1]=s,d[s]=0;
	for (;h<r;) {
		int ne=st[++h];
		for (int i=ne,na;next[i];) {
			i=next[i],na=sora[i];
			if (flow[i] && d[ne]+1<d[na]) {
				d[na]=d[ne]+1;
				st[++r]=na;
			}
		}
	}
	return d[t]<oo;
}
long long dfs(int x,long long low)
{
	if (x==t) return low;
	long long sum=0,tmp;
	for (int i=x,ne;next[i];) {
		i=next[i],ne=sora[i];
		if (flow[i] && d[x]+1==d[ne]) {
			if (flow[i]<low) tmp=dfs(ne,flow[i]);
			else tmp=dfs(ne,low);
			if (!tmp) d[ne]=oo;
			flow[i]-=tmp,flow[po[i]]+=tmp,sum+=tmp,low-=tmp;
			if (!low) break;
		}
	}
//    if (oo+oo==sum) cout<<x<<endl;
	return sum;
}
long long F(int i,int j)
{
	j-=101;
	return a[i]*j*j+b[i]*j+c[i];
}
int main()
{
    scanf("%d%d",&n,&m);
    origin();
    for (int i=1;i<=n;i++)
        scanf("%d%d%d",&a[i],&b[i],&c[i]);
    for (int i=1;i<=n;i++)
    		scanf("%d%d",&l[i],&r[i]),l[i]+=101,r[i]+=101;
    for (int i=1;i<=m;i++)
        scanf("%d%d%d",&u[i],&v[i],&e[i]);
    int tot=0;
    for (int i=1;i<=n;i++) {
    	link(s,tot+1,oo+oo);
    	for (int j=l[i];j<=r[i]-1;j++) {
    		id[i][j]=++tot;
    		link(tot,tot+1,oo-F(i,j));
    	}
    	id[i][r[i]]=++tot;
    	link(tot,t,oo-F(i,r[i]));
        id[i][r[i]+1]=t;
    }
    for (int i=1;i<=m;i++) {
        int L=u[i],R=v[i];
        for (int j=l[L];j<=r[L];j++) {
            int x=id[L][j],y;
            if (j-e[i]<l[R]) continue;
            y=id[R][min(j-e[i],r[R]+1)];
//            cout<<j<<' '<<min(j+e[i],r[R]+1)<<endl;
            link(x,y,oo+oo);
//            if (j==l[L] && y==t) cout<<L<<' '<<R<<endl;
        }
    }
    long long ans=0;
    for (;bfs(s,t);ans+=dfs(s,oo+oo+oo)) ;
//    cout<<oo*n<<' '<<ans<<endl;
    cout<<oo*n-ans<<endl;
    return 0;
}

                                                                                                                                                                                  