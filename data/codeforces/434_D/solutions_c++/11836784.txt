#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define Max	1000000
#define INF	(1<<30)
#define min(a,b)	((a)<(b)?(a):(b))
#define For(i,a,b)	for(int i=a;i<=b;i++)

namespace	Flow{
		#define n	200005

		int 	S=1,T=2,D=1,C=2,Q[n],st[n],Dis[n];
		struct	Lin{int v,f,next;}E[n];

		void	Link(int u,int v,int f){
			E[++D]=(Lin){v,f,st[u]};	st[u]=D;
			E[++D]=(Lin){u,0,st[v]};	st[v]=D;
		}
		bool	BFS(){
			For(i,1,C)	Dis[i]=-1;	Dis[Q[1]=S]=0;
			for (int l=0,r=1;l<r;){
				int u=Q[++l];
				for (int i=st[u],v;i;i=E[i].next)
				if	(E[i].f&&Dis[v=E[i].v]==-1)	{
					Dis[Q[++r]=v]=Dis[u]+1;
					if	(v==T)	return	1;
				}
			}	return	0;
		}
		int		DFS(int u,int Lim){
			if	(u==T)	return	Lim;	int c=0;
			for (int i=st[u],v;i;i=E[i].next)
			if	(E[i].f&&Dis[u]+1==Dis[v=E[i].v]){
				int t=DFS(v,min(E[i].f,Lim-c));
				if	(t){
					E[i].f-=t;	E[i^1].f+=t;c+=t;
					if	(c==Lim)	break;
				}	else	Dis[v]=-1;
			}	return	c;
		}
		int		Max_Flow(){
			int ret=0;	for (;BFS();)	ret+=DFS(S,INF);
			return	ret;
		}
		#undef	n
};

#define n	55

int		N,M,A[n],B[n],C[n],L[n],R[n],G[n];

int		main(){
		scanf("%d%d",&N,&M);
		For(i,1,N)	scanf("%d%d%d",&A[i],&B[i],&C[i]);
		For(i,1,N)	{
			scanf("%d%d",&L[i],&R[i]);	Flow::Link(Flow::S,++Flow::C,INF);	G[i]=Flow::C;
			For(j,L[i],R[i])	Flow::Link(Flow::C,Flow::C+1,Max-(A[i]*j*j+B[i]*j+C[i])),++Flow::C;
			Flow::Link(Flow::C,Flow::T,INF);
		}

		For(i,1,M)	{
			int u,v,d;	scanf("%d%d%d",&u,&v,&d);
			For(j,L[u],R[u])	if	(j-d>=L[v]&&j-d<=R[v])
				Flow::Link(G[u]+j-L[u],G[v]+j-d-L[v],INF);
			else	if	(j-d>R[v])	Flow::Link(G[u]+j-L[u],Flow::T,INF);
		}
		printf("%d\n",N*Max-Flow::Max_Flow());
}