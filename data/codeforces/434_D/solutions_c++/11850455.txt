#include <cstdio>
#include <algorithm>
using namespace std;

const int N=55,M=105,L=-105,R=105;

const int sizeV=2+N*(R-L),sizeE=N*2+N*(R-L)+M*(R-L);
typedef int capType;
const capType inf=(int)1e9+7;
#define nonzero(x) bool(x)
struct node;
struct edge{
	node *ed;
	edge *next;
	capType cap;
} E[sizeE<<1],*newE=E;
int labtim;
struct node{
	edge *son;
	int lab,labtim;
} S[2],*T=S+1;
bool layer(){
	static node *q[sizeV];
	int head=0,tail=0;
	labtim++;
	q[tail++]=S;
	S->labtim=labtim;
	S->lab=0;
	while(head!=tail){
		node *u=q[head++];
		for(edge *e=u->son;e;e=e->next) if(nonzero(e->cap)){
			node *v=e->ed;
			if(v->labtim==labtim) continue;
			v->labtim=labtim;
			v->lab=u->lab+1;
			if(v==T)
				return true;
			q[tail++]=v;
		}
	}
	return false;
}
capType flow(node *u,const capType F){
	if(u==T) return F;
	capType left=F;
	for(edge *e=u->son;e&&nonzero(left);e=e->next) if(nonzero(e->cap)){
		node *v=e->ed;
		if(v->labtim!=labtim||v->lab!=u->lab+1) continue;
		capType f=flow(v,min(left,e->cap));
		e->cap-=f;
		E[e-E^1].cap+=f;
		left-=f;
	}
	if(!nonzero(F-left)) u->labtim=0;
	return F-left;
}
capType maxflow(){
	capType ans=0,f;
	while(layer())
		while(nonzero(f=flow(S,inf)))
			ans+=f;
	return ans;
}
void addedge(node *u,node *v,const capType cap0,const capType cap1=0){
	*newE=(edge){v,u->son,cap0},u->son=newE++;
	*newE=(edge){u,v->son,cap1},v->son=newE++;
}

int n,m,ans,a[N],b[N],c[N],l[N],r[N];

node V[N][R-L];

inline int calc(int a,int b,int c,int x){
	return (a*x+b)*x+c;
}

int main(){
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++) scanf("%d%d%d",&a[i],&b[i],&c[i]);
	for(int i=1;i<=n;i++){
		scanf("%d%d",&l[i],&r[i]); r[i]++;
		addedge(S,&V[i][l[i]-L],inf);
		int ma=-inf;
		for(int j=l[i];j<r[i];j++) ma=max(ma,calc(a[i],b[i],c[i],j));
		ans+=ma;
		for(int j=l[i];j<r[i];j++){
			addedge(&V[i][j-L],&V[i][j+1-L],ma-calc(a[i],b[i],c[i],j));
		}
		addedge(&V[i][r[i]-L],T,inf);
	}
	while(m--){
		int u,v,d; scanf("%d%d%d",&u,&v,&d);
		for(int j=l[v];j<=r[v];j++) if(j+d>=l[u]&&j+d<=r[u]){
			addedge(&V[u][j+d-L],&V[v][j-L],inf);
		}
	}
	printf("%d\n",ans-maxflow());
}