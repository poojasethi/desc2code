
//sap�㷨���������srcΪԴ�㣬dstΪ��㣬���Ŵ�0��ʼ

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAXV 20010
#define MAXE 2000000
#define INF 1000000000

using namespace std;

struct Edge {
    int ed, flow, next;
} edge[MAXE];

int head[MAXV], nEdge;
int d[MAXV], pre[MAXV], path[MAXV], his[MAXV], cur[MAXV], vh[MAXV];

void init() {
    memset(head, -1, sizeof(head));
    nEdge = 0;
}

void addEdge(const int a, const int b, const int flow) {
    edge[nEdge].ed = b;
    edge[nEdge].flow = flow;
    edge[nEdge].next = head[a];
    head[a] = nEdge++;
    edge[nEdge].ed = a;
    edge[nEdge].flow = 0;
    edge[nEdge].next = head[b];
    head[b] = nEdge++;
}

int sap(const int v, const int src, const int dst) {
    int x, y, i, m, nowFlow = INF, totalFlow = 0;
    bool flag;

    memset(d, 0, sizeof(d));
    memset(vh, 0, sizeof(vh));
    memcpy(cur, head, sizeof(cur));

    for (vh[0] = v, x = src; d[src] < v;) {
        his[x] = nowFlow;
        for (flag = false, i = cur[x]; ~i; i = edge[i].next) {
            if (edge[i].flow && d[x] == d[y = edge[i].ed] + 1) {
                flag = true;
                nowFlow = min(nowFlow, edge[i].flow);
                pre[y] = x; path[y] = cur[x] = i;
                if ((x = y) == dst) {
                    for (totalFlow += nowFlow; x != src; x = pre[x]) {
                        edge[path[x]].flow -= nowFlow;
                        edge[path[x] ^ 1].flow += nowFlow;
                    }
                    nowFlow = INF;
                }
                break;
            }
        }
        if (!flag) {
            for (m = v, i = cur[x] = head[x]; ~i; i = edge[i].next) {
                if (edge[i].flow && d[y = edge[i].ed] < m) {
                    m = d[y]; cur[x] = i;
                }
            }
            if (!(--vh[d[x]])) break;
            ++vh[d[x] = m + 1];
            if (x != src) nowFlow = his[x = pre[x]];
        }
    }

    return totalFlow;
}
int n,m,MA;
int a[100],b[100],c[100];
int l[100],r[100];
int u,v,D;
int node(int i,int x){
    return i*202+x+100+2;
}
int main(){
    init();
    scanf("%d%d",&n,&m);
    for (int i=0;i<n;i++){
        scanf("%d%d%d",&a[i],&b[i],&c[i]);
    }
    MA=200000;
    for (int i=0;i<n;i++){
        addEdge(0,node(i,-100),INF);
        scanf("%d%d",&l[i],&r[i]);
        for (int j=-100;j<=100;j++){
            if ((l[i]<=j)&&(j<=r[i]))
                addEdge(node(i,j),node(i,j+1),MA-(a[i]*j*j+b[i]*j+c[i]));
            else
                addEdge(node(i,j),node(i,j+1),INF);
        }
        addEdge(node(i,101),1,INF);
    }
    for (int i=0;i<m;i++){
        scanf("%d%d%d",&u,&v,&D);
        for (int j=-100;j<=100;j++)
        if (j-D>=-100){
            addEdge(node(u-1,j),node(v-1,j-D),INF);
        }
    }
    printf("%d\n",n*MA-sap(2+n*202,0,1));
}
