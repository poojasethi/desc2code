#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
using namespace std;
struct Tedge
{
    int to,next;
    long long f;
}edges[500000];
const int maxn=100000;
int head[maxn],bs=-1;
void add(int now,int to,long long f)
{
    bs++;
    edges[bs].to=to;
    edges[bs].f=f;
    edges[bs].next=head[now];
    head[now]=bs;
}
void addedge(int now,int to,long long f)
{
    add(now, to, f);
    add(to, now, 0);
}
int n,m;
long long a[55],b[55],c[55];
int getp(int i,int x)
{
    x+=100;
    return (i-1)*203+x;
}
const long long big=10000000000ll,oo=999999999999999ll;
long long f(int i,long long x)
{
    return big-(a[i]*x*x+b[i]*x+c[i]);
}
int S,T;
int L[55],R[55];
int dis[maxn];
queue<int> que;
bool bfs()
{
    memset(dis, 0, sizeof(dis));
    dis[S]=1;que.push(S);
    while (!que.empty())
    {
        int now=que.front();
        for (int i=head[now];i!=-1;i=edges[i].next)
        {
            int to=edges[i].to;
            if (!edges[i].f||dis[to]) continue;
            dis[to]=dis[now]+1;
            que.push(to);
        }
        que.pop();
    }
    return dis[T];
}
long long dfs(int now,long long maxf)
{
    if (now==T) return maxf;
    long long t=0,f;
    for (int i=head[now];i!=-1;i=edges[i].next)
    {
        int to=edges[i].to;
        if (!edges[i].f||(dis[now]+1!=dis[to])) continue;
        f=dfs(to, min(maxf,edges[i].f));
        t+=f;maxf-=f;
        edges[i].f-=f;edges[i^1].f+=f;
        if (!maxf) break;
    }
    if (!t) dis[now]=-9999;
    return t;
}
int main()
{
    memset(head, -1, sizeof(head));
    scanf("%d%d",&n,&m);
    for (int i=1;i<=n;i++)
        scanf("%lld%lld%lld",a+i,b+i,c+i);
    S=getp(n+1, -100);T=S+1;
    for (int i=1;i<=n;i++)
    {
        scanf("%d%d",L+i,R+i);
        addedge(S, getp(i, L[i]), oo);
        for (int j=L[i];j<=R[i];j++)
            addedge(getp(i, j), getp(i, j+1), f(i, j));
        addedge(getp(i, R[i]+1), T, oo);
    }
    for (;m;m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        for (int j=L[a];j<=R[a];j++)
        {
            int t=j-c;
            if (t<L[b]) t=L[b];
            if (t>R[b])
            {
                addedge(getp(a, j), T, oo);
                break;
            }
            addedge(getp(a, j), getp(b, t), oo);
        }
    }
    long long ans=big*n;
    while (bfs()) ans-=dfs(S, oo);
    printf("%lld",ans);
    return 0;
}
