#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
 
const int T = 20001;
const long long oo = 10000000000ll;
 
struct Edge {
    int y;
    long long v;
    Edge *next,*op;
};
 
Edge *b[20010],*cur[20010];
int h[20010];
long long ans;
 
void addedge(int x,int y,long long z) {
    Edge *p = new Edge;
    p->y = y;
    p->v = z;
    p->next = b[x];
    b[x] = p;
    Edge *p1 = p;
    p = new Edge;
    p->y = x;
    p->v = 0;
    p->next = b[y];
    b[y] = p;
    p1->op = p;
    p->op = p1;
}
 
bool bfs() {
    queue<int> q;
    memset(h,-1,sizeof(h));
    h[0] = 0;
    q.push(0);
    for (; ! q.empty();) {
        int x = q.front();
        q.pop();
        for (Edge *i = b[x]; i != NULL; i = i->next)
            if (i->v && h[i->y] == -1) {
                h[i->y] = h[x] + 1;
                q.push(i->y);
            }
    }
    return h[T] != -1;
}
 
long long dfs(int x,long long f) {
    if (x == T)
        return f;
    long long w,used = 0;
    for (Edge *i = cur[x]; i != NULL; i = i->next)
        if (h[x] + 1 == h[i->y]) {
            w = f - used;
            w = dfs(i->y,min(i->v,w));
            i->v -= w;
            i->op->v += w;
            if (i->v)
                cur[x] = i;
            used  += w;
            if (used == f)
                return f;
        }
    if (! used)
        h[x] = -1;
    return used;
}
 
void dinic() {
    for (; bfs();) {
        for (int i = 0; i <= 20001; i++)
            cur[i] = b[i];
        ans += dfs(0,oo);
    }
}

int A[51],B[51],C[51],l[51],r[51],st[51];

int f(int i,int x) {
    return A[i] * x * x + B[i] * x + C[i];
}

int node(int x,int y) {
    return st[x] + y - l[x];
}

int main() {
    int n,m;
    scanf("%d%d",&n,&m);
    for (int i = 1; i <= n; i++)
        scanf("%d%d%d",&A[i],&B[i],&C[i]);
    int tot = 1;
    for (int i = 1; i <= n; i++) {
        scanf("%d%d",&l[i],&r[i]);
        st[i] = tot;
        tot += r[i] - l[i] + 2;
    }
    int mx = 210000;
    for (int i = 1; i <= n; i++) {
        addedge(0,st[i],oo);
        for (int j = l[i]; j <= r[i]; j++)
            addedge(node(i,j),node(i,j) + 1,mx - f(i,j));
        addedge(node(i,r[i]) + 1,T,oo);
    }
    for (int i = 0; i < m; i++) {
        int x,y,v;
        scanf("%d%d%d",&x,&y,&v);
        for (int j = l[x]; j <= r[x]; j++)
            if (j - v >= l[y] && j - v <= r[y] + 1)
                addedge(node(x,j),node(y,j - v),oo);
    }
    dinic();
    printf("%I64d\n",(long long)mx * n - ans);
    return 0;
}

