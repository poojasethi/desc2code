#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;

const int MAXN = 20005,MAXM = 1000005;

struct Node
{
	int To,Next,Flow;
	Node(void){}
	Node(int a,int b,int c) : To(a),Next(b),Flow(c){}
}E[MAXM];

int Ord[55][205],V[55][205],Final[MAXN],D[MAXN],Count[MAXN],Cur[MAXN],S,T,cnt,tot,N,M;

int sqr(int a) {return a * a;}

void Link(int u,int v,int f)
{
	E[++ tot] = Node(v,Final[u],f),Final[u] = tot;
	E[++ tot] = Node(u,Final[v],0),Final[v] = tot;
}

int Get(int a,int b,int c,int x)
{
	return a * sqr(x) + b * x + c;
}

int Dfs(int Now,int Flow)
{
	if (Now == T) return Flow;
	int Use = 0;
	for(int i = Cur[Now];i;i = E[i].Next)
	if (E[i].Flow > 0 && D[E[i].To] + 1 == D[Now])
	{
		Cur[Now] = i;
		int Tmp = Dfs(E[i].To,min(E[i].Flow,Flow - Use));
		E[i].Flow -= Tmp,E[i ^ 1].Flow += Tmp,Use += Tmp;
		if (Use == Flow) return Use;
	}
	Cur[Now] = Final[Now];
	if (!(-- Count[D[Now]])) D[S] = T + 1;
	++ Count[++ D[Now]];
	return Use;
}

int main()
{
	scanf("%d%d", &N, &M);
	tot = 1;
	for(int i = 1;i <= N;i ++)
		for(int j = 0;j < 201;j ++) Ord[i][j] = ++ cnt;
	S = 0,T = ++ cnt;
	int Ans = 0;
	for(int i = 1;i <= N;i ++)
	{
		int a,b,c,Mx = -(1e9);
		scanf("%d%d%d", &a, &b, &c);
		for(int j = -100;j <= 100;j ++) V[i][j + 100] = Get(a,b,c,j),Mx = max(Mx,V[i][j + 100]);
		for(int j = -100;j <= 100;j ++) V[i][j + 100] = Mx - V[i][j + 100];
		Ans += Mx;
	}
	for(int i = 1;i <= N;i ++)
	{
		int l,r,lst = S;
		scanf("%d%d", &l, &r);
		for(int j = -100;j <= 100;j ++)
		{
			if (j < l) Link(lst,Ord[i][j + 100],1 << 30); else
				if (j > r) Link(lst,Ord[i][j + 100],1 << 30); else
					Link(lst,Ord[i][j + 100],V[i][j + 100]);
			lst = Ord[i][j + 100];
		}
		Link(lst,T,1 << 30);
	}
	for(int i = 1;i <= M;i ++)
	{
		int u,v,d;
		scanf("%d%d%d", &u, &v, &d);
		if (-100 - d - 1 >= -100) Link(S,Ord[v][-d - 1],1 << 30);
		for(int j = -100;j <= 100;j ++)
		{
			if (j - d < -100) continue;
			if (j - d  >= 100) Link(Ord[u][j + 100],T,1 << 30); else
				Link(Ord[u][j + 100],Ord[v][j - d + 100],1 << 30);
		}
	}
	Count[0] = T + 1;
	while (D[S] < T + 1) 
		Ans -= Dfs(S,1 << 30);
	printf("%d\n" ,Ans);
}

	  		  	 	       	 	     		 	