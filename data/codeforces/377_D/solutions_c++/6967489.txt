#include <stdio.h>
#include <algorithm>
#include <memory.h>
#include <vector>
using namespace std;
#define M 333333
#define sz size()
#define pb push_back
#define rep(i,n) for(int i=0; i<n; i++)
#define clr(u) memset(u, 0, sizeof(u))
int n;
int MAX(int a, int b){return a>b?a:b;}
vector<int> A[M], B[M];
int l[M], u[M], r[M];
int mx[4*M], add[4*M];

int ll, rr, ans;

void push_up(int id){
	mx[id]=MAX(mx[2*id], mx[2*id+1]);
}
void push_down(int id){
	if(add[id]){
		add[2*id]+=add[id];
		add[2*id+1]+=add[id];
		mx[2*id]+=add[id];
		mx[2*id+1]+=add[id];
		add[id]=0;
	}
}
void insert(int id, int s, int t, int a, int b, int v){
	if(s>t)return;
	if(a<=s && t<=b){
		mx[id] += v;
		add[id] += v;
		return;
	}
	push_down(id);
	int mid=(s+t)/2;
	if(mid>=a)insert(2*id, s, mid, a, b, v);
	if(mid+1<=b)insert(2*id+1, mid+1, t, a, b, v);
	push_up(id);
}

int calc(int id, int s, int t){
	if(s==t)return s;
	push_down(id);
	int l, mid=(s+t)/2;
	if(mx[2*id]==ans)l=calc(2*id, s, mid);
	else l=calc(2*id+1, mid+1, t);
	push_up(id);
	return l;
}

void input(){
	scanf("%d", &n);
	rep(i,n){
		scanf("%d %d %d", l+i, u+i, r+i);
		A[u[i]].pb(i);
		B[r[i]+1].pb(i);
	}
}

void print(){
	printf("%d\n", ans);
	bool res=0;
	rep(i,n){
		if(l[i]<=ll && ll<=u[i] && u[i]<=rr && rr<=r[i]){
			if(res)putchar(' ');
			res=1;
			printf("%d", i+1);
		}
	}
	puts("");
}

int solve(){
	int R, j, i;
	clr(add), clr(mx);
	for(R=1; R<M; R++){
		for(j=0; j<A[R].sz; j++){
			i=A[R][j], insert(1, 1, M-1, l[i], u[i], 1);
		}
		for(j=0; j<B[R].sz; j++){
			i=B[R][j], insert(1, 1, M-1, l[i], u[i], -1);
		}
		if(ans>=mx[1])continue;
		ans=mx[1];
		rr=R;
		ll=calc(1, 1, M-1);
	}
}

int main(){
	///freopen("D2.in", "r", stdin);
	input();
	solve();
	print();
	return 0;
}
