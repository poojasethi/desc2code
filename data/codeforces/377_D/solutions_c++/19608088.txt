#include <bits/stdc++.h>

using namespace std;

#define LL long long
#define ULL unsigned long long
#define pii pair<int, int>
#define MP make_pair
#define ls i << 1
#define rs ls | 1
#define md (ll + rr >> 1)
#define lson ll, md, ls
#define rson md + 1, rr, rs
#define mod 1000000007
#define inf 0x3f3f3f3f
#define eps 1e-12
#define N 300005
#define M 200020
#define Pi acos(-1.0)

struct node{
	int l, r, h, in;
	node(int l = 0, int r = 0, int h = 0, int in = 0) : l(l), r(r), h(h), in(in) {}
	bool operator < (const node &b) const {
		return h < b.h || h == b.h && in > b.in;
	}
}p[N];
int n, mx[N<<2], add[N<<2];
void push_down(int i){
	if(add[i]){
		mx[ls] += add[i];
		add[ls] += add[i];
		mx[rs] += add[i];
		add[rs] += add[i];
		add[i] = 0;
	}
}
void push_up(int i){
	mx[i] = max(mx[ls], mx[rs]);
}
void update(int l, int r, int v, int ll, int rr, int i){
	if(l == ll && r == rr){
		add[i] += v;
		mx[i] += v;
		return ;
	}
	push_down(i);
	if(r <= md) update(l, r, v, lson);
	else if(l > md) update(l, r, v, rson);
	else update(l, md, v, lson), update(md + 1, r, v, rson);
	push_up(i);
}
int query(int v, int ll, int rr, int i){
	if(ll == rr) return ll;
	push_down(i);
	if(mx[ls] == v)
		return query(v, lson);
	else 
		return query(v, rson);
}
int L[N], V[N], R[N];
int main(){
	scanf("%d", &n);
	for(int i = 1; i <= n; ++i){
		int l, v, r;
		scanf("%d%d%d", &l, &v, &r);
		p[i] = node(l, v, v, 1);
		p[i+n] = node(l, v, r, -1);
		L[i] = l, V[i] = v, R[i] = r;
	}
	int m = n << 1;
	sort(p + 1, p + 1 + m);
	int ans = 0, x = 0, y = 0;
	for(int i = 1; i < m; ++i){
		int l = p[i].l, r = p[i].r;
		if(l <= r)
			update(l, r, p[i].in, 1, N - 1, 1);
		if(mx[1] > ans){
			ans = mx[1];
			x = query(mx[1], 1, N - 1, 1);
			y = p[i].h;
		}
	}
	printf("%d\n", ans);
	for(int i = 1; i <= n; ++i){
		if(L[i] <= x && V[i] <= y && V[i] >= x && R[i] >= y)
			printf("%d ", i);
	}
	puts("");
	return 0;
}
				 		 	 	   					   				 		 	