#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;
int n;
#define N 100005
#define MAX 300000
struct node{
    int l, r, v;
}a[N];
vector<node> fl[MAX+5], fv[MAX+5];
int s[MAX*4], b[MAX*4], p[MAX*4];

void update(int k, int r){
    s[k] = s[k*2] + s[k*2+1];
    b[k] = max(max(s[k], s[k*2] + b[k*2+1]), b[k*2]);
    if (b[k] == s[k]){
        p[k] = r;
    } else 
    if (b[k] == b[k*2]){
        p[k] = p[k*2];
    } else {
        p[k] = p[k*2+1];
    }
}

void add(int k, int l, int r, int x, int y){
    if (l == r){
        s[k] += y; b[k] += y; p[k] = l;
        return;
    }
    int mid = (l + r) / 2;
    if (x <= mid){
        add(k*2, l, mid, x, y);
    } else {
        add(k*2+1, mid+1, r, x, y);
    }
    update(k, r);
}

int main(){
    scanf("%d", &n);
    for (int i = 1; i <= n; ++ i){
        scanf("%d%d%d", &a[i].l, &a[i].v, &a[i].r);
        fl[a[i].l].push_back(a[i]);
        fv[a[i].v].push_back(a[i]);
    }
    int ans = 1, L, R;
    L = R = a[1].v;
    for (int i = 1; i <= MAX; ++ i){
        for (int j = 0; j < fl[i].size(); ++ j){
            node x = fl[i][j];
            add(1, 1, MAX, x.v, 1);
            if (x.r + 1 <= MAX) add(1, 1, MAX, x.r + 1, -1);
        }
        if (b[1] > ans){
            ans = b[1];
            L = i;
            R = p[1];
        }
        for (int j = 0; j < fv[i].size(); ++ j){
            node x = fv[i][j];
            add(1, 1, MAX, x.v, -1);
            if (x.r + 1 <= MAX) add(1, 1, MAX, x.r + 1, 1);
        }
    }
    printf("%d\n", ans);
    for (int i = 1; i <= n; ++ i){
        if (a[i].l <= L && a[i].r >= R && a[i].v >= L && a[i].v <= R){
            printf("%d ", i);
        }
    }
    puts("");
    return 0;
}