#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>

using namespace std;
struct Node
{
	int x,y1,y2,w;
}a[200005];
struct T
{
	int x,bj,pos;
}tree[1500000];
int ans,num,ansl,ansr;
bool cmp(Node a,Node b)
{
	if (a.x==b.x) return a.w<b.w;
	return a.x<b.x;
}
int n,l[100005],r[100005],x[100005];
void build(int x,int l,int r)
{
	tree[x].x=0;tree[x].bj=0;tree[x].pos=l;
	if (l==r) return;
	int mid=(l+r)/2;
	build(x*2,l,mid);
	build(x*2+1,mid+1,r);
}
void change(int x,int l,int r,int ll,int rr,int w)
{
	if (l==ll&&r==rr)
	{
		tree[x].bj+=w;
		tree[x].x+=w;
		return;
	}
	if (tree[x].bj!=0)
	{
		tree[x*2].bj+=tree[x].bj;
		tree[x*2+1].bj+=tree[x].bj;
		tree[x*2].x+=tree[x].bj;
		tree[x*2+1].x+=tree[x].bj;
		tree[x].bj=0;
	}
	int mid=(l+r)/2;
	if (rr<=mid) change(x*2,l,mid,ll,rr,w);
	else if (ll>=mid+1) change(x*2+1,mid+1,r,ll,rr,w);
	else
	{
		change(x*2,l,mid,ll,mid,w);
		change(x*2+1,mid+1,r,mid+1,rr,w);
	}
	if (tree[x*2].x>tree[x*2+1].x)
	{
		tree[x].x=tree[x*2].x;
		tree[x].pos=tree[x*2].pos;
	}
	else
	{
		tree[x].x=tree[x*2+1].x;
		tree[x].pos=tree[x*2+1].pos;
	}
}
int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;++i) scanf("%d%d%d",&l[i],&x[i],&r[i]);
	for (int i=1;i<=n;++i)
	{
		++num;a[num].x=l[i];
		a[num].y1=x[i];a[num].y2=r[i];
		a[num].w=1;
		++num;a[num].x=x[i]+1;
		a[num].y1=x[i];a[num].y2=r[i];
		a[num].w=-1;
	}
	sort(a+1,a+num+1,cmp);
	ans=0;
	build(1,1,300005);
	for (int i=1;i<=num;++i)
	{
		if (tree[1].x>ans) 
		{
			ans=tree[1].x;
			ansl=a[i].x;ansr=tree[1].pos;
		}
		change(1,1,300005,a[i].y1,a[i].y2,a[i].w);
		if (tree[1].x>ans) 
		{
			ans=tree[1].x;
			ansl=a[i].x;ansr=tree[1].pos;
		}
	}
	printf("%d\n",ans);
	for (int i=1;i<=n;++i)
	{
		if (l[i]<=ansl&&ansl<=x[i]&&x[i]<=ansr&&ansr<=r[i]) printf("%d ",i);
	}
	return 0;
}
		 	  	 	  		 		 							  				