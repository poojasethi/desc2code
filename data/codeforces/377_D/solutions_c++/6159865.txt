#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
#define MN 100005
#define MX 300005

using namespace std;

vector <int> V[MX], R[MX];
int l[MN], r[MN], v[MN];
int a[MX * 4], b[MX * 4], c[MX * 4];
int n;

void Insert(int L, int R, int l, int r, int v, int id) {
	if (l >= L && r <= R) {
		a[id] += v;
		b[id] += v;
		if (!c[id]) c[id] = l;
		return;
	}
	int mid = l + r >> 1;
	if (L <= mid) Insert(L, R, l, mid, v, id * 2);
	if (R > mid) Insert(L, R, mid + 1, r, v, id * 2 + 1);
	if (a[2 * id] > a[2 * id + 1])
		a[id] = a[2 * id] + b[id], c[id] = c[2 * id];
	else
		a[id] = a[2 * id + 1] + b[id], c[id] = c[2 * id + 1];
}

main() {
	
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
	
	int i, j, sz, ans, LL, RR;
	
	scanf("%d", &n);
	for (i = 0; i < n; i++) {
		scanf("%d%d%d", l + i, v + i, r + i);
		V[v[i]].push_back(i);
		R[r[i]].push_back(i);
	}
	
	ans = 0;
	for (i = 1; i < MX; i++) {
		sz = V[i].size();
		for (j = 0; j < sz; j++) Insert(l[V[i][j]], v[V[i][j]], 0, MX, 1, 1);
		if (a[1] >= ans)
			ans = a[1], LL = c[1], RR = i;
		sz = R[i].size();
		for (j = 0; j < sz; j++) Insert(l[R[i][j]], v[R[i][j]], 0, MX, -1, 1);
	}
	cout << ans << endl;
	for (i = 0; i < n; i++) if (l[i] <= LL && r[i] >= RR && v[i] >= LL && v[i] <= RR)
		printf("%d ", i + 1);
		
}
