#include <algorithm>
#include <cstdio>
#include <cstring>
#include <deque>
#include<cmath>
#include<vector>
#define max(x,y) ((x)>(y)?(x):(y))
#define min(x,y) ((x)<(y)?(x):(y))
#define lson i<<1
#define rson i<<1|1
#define pi acos(-1.0)
#define MAXN 300050
#define LL long long
#define lson i<<1
#define rson i<<1|1
using namespace std;
vector<int>V[MAXN];
vector<int>R[MAXN];
int maxn[MAXN*4],va[MAXN*4],lmost[MAXN*4];
void build(int l,int r,int i)
{
	maxn[i]=0;
	va[i]=0;
	lmost[i]=l;
	if(l!=r)
	{
		int mid=(l+r)>>1;
		build(l,mid,lson);
		build(mid+1,r,rson);
	}
}
void pushup(int i)
{
	if(maxn[lson]>=maxn[rson])
	{
		maxn[i]=maxn[lson]+va[i];
		lmost[i]=lmost[lson];
	}else
	{
		maxn[i]=maxn[rson]+va[i];
		lmost[i]=lmost[rson];
	}
}
void update(int l,int r,int pl,int pr,int x,int i)
{
	if(l>=pl&&r<=pr)
	{
		va[i]+=x;
		maxn[i]+=x;
		return;
	}
	int mid=(l+r)>>1;
	if(pl<=mid)update(l,mid,pl,pr,x,lson);
	if(pr>mid)update(mid+1,r,pl,pr,x,rson);
	pushup(i);
}
int l[MAXN],r[MAXN],v[MAXN];
int main()
{
	int m;
	scanf("%d",&m);
	for(int i=0;i<m;++i)
	{
		scanf("%d%d%d",&l[i],&v[i],&r[i]);
		V[v[i]].push_back(i);
		R[r[i]].push_back(i);
	}
	int ans,ll,rr;
	ans=1;
	ll=l[0],rr=v[0];
	int mx=300000;
	build(1,mx,1);
	for(int i=1;i<MAXN;++i)
	{
		for(int j=0;j<V[i].size();++j)
		{
			update(1,mx,l[V[i][j]],i,1,1);
		}

		if(maxn[1]>ans)
		{
			ans=maxn[1];
			ll=lmost[1];
			rr=i;
		}
		for(int j=0;j<R[i].size();++j)
		{
			update(1,mx,l[R[i][j]],v[R[i][j]],-1,1);
		}
	}

	printf("%d\n",ans);
	bool ok=false;
	for(int i=0;i<m;++i)
	{
		if(l[i]<=ll&&r[i]>=rr&&v[i]>=ll&&v[i]<=rr)
		{
			if(ok)printf(" ");
			ok=true;
			printf("%d",i+1);
		}
	}
	puts("");
}
