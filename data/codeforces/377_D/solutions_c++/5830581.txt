//In the name of God
#include <iostream>
#include <vector>
using namespace std;
typedef pair<int, int> pii;
typedef pair<int, pii> ev;
const int N = 3e5 + 5;
struct rect { 
	int l, v, r;
	rect(int a, int b, int c) { l = a, v = b, r = c; }
	rect() {};
} a[N];

int n, mx, l, r, sta[4 * N], dyn[4 * N], best[4 * N];
vector<rect> v[N];

void update(int n, int b, int e, int u, int v, int c) {
	if (best[n] == -1)
		best[n] = b;
	if (e < u || v < b)
		return;
	if (u <= b && e <= v) {
		dyn[n] += c;
		return;
	}
	int l = n << 1, r = l | 1, m = b + e >> 1;
	update(l, b, m, u, v, c);
	update(r, m + 1, e, u, v, c);
	int dif = sta[l] + dyn[l] < sta[r] + dyn[r];
	sta[n] = sta[l + dif] + dyn[l + dif], best[n] = best[l + dif];
}
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i].l >> a[i].v >> a[i].r;
		v[a[i].l].push_back(rect(a[i].v, a[i].r, 1));
		v[a[i].v + 1].push_back(rect(a[i].v, a[i].r, -1));
	}
	fill(best, best + 4 * N, -1);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < v[i].size(); j++)
			update(1, 0, N - 1, v[i][j].l, v[i][j].v, v[i][j].r);
		if (mx < sta[1]) {
			mx = sta[1];
			l = i, r = best[1];
		}
	}
	cout << mx << '\n';
	for (int i = 0; i < n; i++)
		if (a[i].l <= l && l <= a[i].v && a[i].v <= r && r <= a[i].r)
			cout << i + 1 << ' ';
	cout << '\n';
	return 0;
}
