#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 3 * 100 * 1000 + 10;
int l[MAXN], r[MAXN], v[MAXN], val[4 * MAXN], num[4 * MAXN], d[4 * MAXN];
vector<int> open[MAXN], close[MAXN];

void shift(int cur)
{
	d[cur * 2] += d[cur];
	d[cur * 2 + 1] += d[cur];
	val[cur * 2] += d[cur];
	val[cur * 2 + 1] += d[cur];
	d[cur] = 0;
}

void merge(int cur)
{
	if (val[cur * 2] > val[cur * 2 + 1])
		num[cur] = num[cur * 2];
	else
		num[cur] = num[cur * 2 + 1];
	val[cur] = max(val[cur * 2 + 1], val[cur * 2]);
}

void add(int lo, int hi, int v, int cur, int s, int e)
{
	if (lo == s && hi == e)
	{
		d[cur] += v;
		val[cur] += v;
		return;
	}
	shift(cur);
	int mid = (s + e) / 2;
	if (lo < mid) add(lo, min(mid, hi), v, cur * 2, s, mid);
	if (hi > mid) add(max(mid, lo), hi, v, cur * 2 + 1, mid, e);
	merge(cur);
}

void init(int cur, int s, int e)
{
	if (e - s < 2)
	{
		num[cur] = s;
		return;
	}
	int mid = (s + e) / 2;
	init(cur * 2, s, mid);
	init(cur * 2 + 1, mid, e);
	merge(cur);
}

vector<int> ans;

int main()
{
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> l[i] >> v[i] >> r[i];
		open[l[i]].push_back(i);
		close[v[i] + 1].push_back(i);
	}
	init(1, 0, MAXN);
	int bestL, bestR, bestV = -1;
	for (int i = 0; i < MAXN; i++)
	{
		for (int j = 0; j < open[i].size(); j++)
			add(v[open[i][j]], r[open[i][j]] + 1, 1, 1, 0, MAXN);
		for (int j = 0; j < close[i].size(); j++)
			add(v[close[i][j]], r[close[i][j]] + 1, -1, 1, 0, MAXN);
		if (val[1] > bestV)
		{
			bestV = val[1];
			bestL = i;
			bestR = num[1];
		}
	}
	for (int i = 0; i < n; i++)
		if (v[i] >= bestL && l[i] <= bestL && r[i] >= bestR && v[i] <= bestR)
			ans.push_back(i + 1);
	cout << ans.size() << endl;
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << endl;
	return 0;
}
