#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;
const int N = 750000;

int add[4 * N], tree[4 * N], num[4 * N], l1[N], r1[N], l2[N], r2[N], a[N], b[N], c[N];
vector <int> ad, from;

bool cmp1(const int &a, const int &b) { return l1[a] < l1[b]; }
bool cmp2(const int &a, const int &b) { return l2[a] < l2[b]; }

void modify(int i, int l, int r, int ql, int qr, int x) {
    if (l == ql && r == qr) {
        add[i] += x;
        tree[i] += x;
        if (num[i] == 0) num[i] = l;
        return;
    }
    int m = (l + r) / 2;
    if (ql <= m) modify(i * 2, l, m, ql, min(qr, m), x);
    if (m < qr) modify(i * 2 + 1, m + 1, r, max(ql, m + 1), qr, x);
    if (tree[i * 2] > tree[i * 2 + 1]) tree[i] = tree[i * 2], num[i] = num[i * 2]; else tree[i] = tree[i * 2 + 1], num[i] = num[i * 2 + 1];
    tree[i] += add[i];
}

int main() {
    int n;
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> a[i] >> b[i] >> c[i];
        l1[i] = a[i], l2[i] = b[i];
        r1[i] = b[i], r2[i] = c[i];
        ad.push_back(i);
        from.push_back(i);
    }
    sort(ad.begin(), ad.end(), &cmp1);
    sort(from.begin(), from.end(), &cmp2);
    int l, r, x, y, ans;
    l = r = x = y = ans = 0;
    for (int i = 1; i <= N; i++) {
        while (l < n && l1[ad[l]] == i) modify(1, 1, N, r1[ad[l]], r2[ad[l]], +1), l++;
        if (tree[1] > ans) {
            ans = tree[1];
            x = i;
            y = num[1];
        }
        while (r < n && l2[from[r]] == i) modify(1, 1, N, r1[from[r]], r2[from[r]], -1), r++;
    }
    cout << ans << endl;
    for (int i = 1; i <= n; i++) if (a[i] <= x && x <= b[i] && b[i] <= y && y <= c[i]) cout << i << " ";
    return 0;
}

