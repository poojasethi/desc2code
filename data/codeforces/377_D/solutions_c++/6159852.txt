#include <iostream>
#include <vector>
#include <memory.h>
#include <cstdio>

#define MX 300005
using namespace std;

int l[MX], v[MX], r[MX];
vector <int> V[MX], R[MX];

int n, N;
struct Node {
	int inc, pinc;
	int L;
} node[MX * 4];

void Update(int id, int l, int r, int a, int b, int val) {
	
	if (a <= l && b >= r) {
		node[id].inc += val;
		node[id].pinc += val;
		if (!node[id].L) node[id].L = l;	
		return;
	}
	
	int m = (l + r) / 2;
	if (a <= m) Update(id * 2, l, m, a, b, val);
	if (b > m) Update(id * 2 + 1, m + 1, r, a, b, val);
	
	if (node[id * 2].inc > node[id * 2 + 1].inc) {
		node[id].inc = node[id * 2].inc;
		node[id].L = node[id * 2].L;
	} else {
		node[id].inc = node[id * 2 + 1].inc;
		node[id].L = node[id * 2 + 1].L; 
	}
	node[id].inc += node[id].pinc;
}

int main() {

//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
		
	int i, k, size, id;
	cin >> n;
	for (i = 0; i < n; i ++) {
		scanf("%d%d%d", l + i, v + i, r + i);
		V[v[i]].push_back(i);
		R[r[i]].push_back(i);	
	}
	int rlt = 0, s = -1, e = -1;
	N = 300000;
	for (i = 1; i <= N; i ++) {
		size = V[i].size();
		for (k = 0; k < size; k ++) 
			Update(1, 1, N, l[V[i][k]], i, 1);
		if (rlt < node[1].inc) {
			rlt = node[1].inc, s = node[1].L, e = i;	
		}
		size = R[i].size();
		for (k = 0; k < size; k ++)
			Update(1, 1, N, l[R[i][k]], v[R[i][k]], -1);
	}
	cout << rlt << endl;
	for (i = 0; i < n; i ++) {
		if (v[i] >= s && v[i] <= e && s >= l[i] && e <= r[i])
			cout << i + 1 << " ";	
	}
	cout << endl;
	return 0;
}
