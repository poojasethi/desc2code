#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<int,int> pii;
 
#define mp make_pair

const ll N = 4e5;
const ll M = 20;
const ll SQRT = 350;
const ll INF = 1e16;
const ll MOD = 1e9+7;

int n,l[N],v[N],r[N];
vector<int> a[N],b[N];
pair<int,int> seg[4*N];
int lazy[4*N];
vector<int> ans;

pair<int,int> merge(pair<int,int> a,pair<int,int> b)
{
	if (a.first>b.first)
		return a;
	else
		return b;
}

void upd(int v,int val)
{
	lazy[v] += val;
	seg[v].first += val;
}

void shift(int v)
{
	upd(2*v,lazy[v]);
	upd(2*v+1,lazy[v]);
	lazy[v] = 0;
}

void update(int v,int l,int r,int s,int e,int val)
{
	if (e<=l || s>=r) return;
	if (s<=l && e>=r) 
	{
		upd(v,val);
		return;
	}
	int mid = (l+r)/2;
	shift(v);
	update(2*v,l,mid,s,e,val);
	update(2*v+1,mid,r,s,e,val);
	seg[v] = merge(seg[2*v],seg[2*v+1]);
}

void build(int v,int l,int r)
{
	if (r-l<2)
	{
		seg[v] = mp(0,l);
		return;
	}
	int mid = (l+r)/2;
	build(2*v,l,mid);
	build(2*v+1,mid,r);
	seg[v] = merge(seg[2*v],seg[2*v+1]);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n;
	for (int i = 0; i<n; i++)
	{
		cin >> l[i] >> v[i] >> r[i];
		a[l[i]].push_back(i);
		b[v[i]].push_back(i);
	}
	int s = 3*1e5;
	build(1,0,s);
	int mx = 0 , l1 , r1;
	for (int i = 1; i<=s; i++)
	{
		for (int j = 0; j<a[i].size(); j++)
		{
		//	cout << v[a[i][j]] << ' ' << r[a[i][j]] << endl;
			update(1,0,s,v[a[i][j]],r[a[i][j]]+1,1);
		}

		if (seg[1].first>mx)
		{
			mx = seg[1].first;
			l1 = i;
			r1 = seg[1].second;
		}
		
		for (int j = 0; j<b[i].size(); j++)
			update(1,0,s,v[b[i][j]],r[b[i][j]]+1,-1);
	}
//	cout << mx << ' ' << l1 << ' ' << r1 << endl;
	for (int i = 0; i<n; i++)
		if (v[i]>=l1 && v[i]<=r1 && l[i]<=l1 && r[i]>=r1)
			ans.push_back(i);
	
	cout << ans.size() << "\n";
	for (int i = 0; i<ans.size(); i++)
		cout << ans[i]+1 << ' ';
	cout << "\n";

	return 0;
}
			 	   		 			 		   	 	 	  			