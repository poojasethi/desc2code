#include <iostream>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;

const int maxn = 300010;

int N,n,li[maxn],vi[maxn],ri[maxn];
vector<int> V[maxn],R[maxn];

//IntervalTree
int M[maxn*4],A[maxn*4],In[maxn*4];

void Modify(int x,int L,int R,int l,int r,int d) {
     if (L <= l && r <= R) {
        M[x] += d;
        A[x] += d;
        if (!In[x]) In[x] = l;
        return ;
     }else {
        int m = (l+r)>>1;
        if (L <= m) Modify(x<<1,L,R,l,m,d);
        if (m < R)  Modify((x<<1)+1,L,R,m+1,r,d);
        if (M[x<<1] >= M[(x<<1)+1]) {
           M[x] = M[x<<1];
           In[x] = In[x<<1];
        }else {
              M[x] = M[(x<<1)+1];
              In[x] = In[(x<<1)+1];
        }   
     }
     M[x] += A[x];
}

int main() {
    N = maxn-10;
    scanf("%d",&n);
    for (int i = 1;i <= n; i++) {
        scanf("%d%d%d",&li[i],&vi[i],&ri[i]);
        V[vi[i]].push_back(i);
        R[ri[i]].push_back(i);
    }
    int ret = 0,ll,rr;
    for (int i = 1;i <= N; i++) {
         int sz = V[i].size();
         for (int j = 0;j < sz; j++) Modify(1,li[V[i][j]],vi[V[i][j]],1,N,1);
         if (M[1] > ret) ret = M[1],ll = In[1],rr = i;        
         sz = R[i].size();
         for (int j = 0;j < sz; j++) Modify(1,li[R[i][j]],vi[R[i][j]],1,N,-1);
    }
    printf("%d\n",ret);
    for (int i = 1;i <= n; i++)
        if (li[i] <= ll && rr <= ri[i] && ll <= vi[i] && vi[i] <= rr) printf("%d ",i);
    printf("\n");
  //  system("pause");
    return 0;
}
