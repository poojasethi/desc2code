#include <cstdio>
#include <algorithm>
#define MD ((lt + rt) >> 1)
#define LS ((d << 1) + 0)
#define RS ((d << 1) + 1)
using namespace std;

const int Sn = 100010, maxw = 300000;

int n, l[Sn], r[Sn], v[Sn];
int tagA[maxw<<2], maxV[maxw<<2], maxD[maxw<<2], lq, rq, cq;
int curmax = -1, curx, cury;

struct event {
     int t, l, r, w;
} e[Sn + Sn];
int en = 0;

bool cmp_e(const event& a, const event& b) {
     return a.t < b.t;
}
void addevent(int t, int l, int r, int w) {
     e[++en] = (event){t, l, r, w};
}
void build(int d, int lt, int rt)
{
     if (lt == rt) {maxD[d] = lt; return;}
     build(LS, lt, MD);
     build(RS, MD+1, rt);
     maxD[d] = maxD[LS];
}
void setA(int d, int w)
{
     tagA[d] += w;
     maxV[d] += w;
}
void modify(int d, int lt, int rt)
{
     if (lq <= lt && rt <= rq) {
	  setA(d, cq); return;
     }
     if (tagA[d] != 0) {
	  setA(LS, tagA[d]);
	  setA(RS, tagA[d]);
	  tagA[d] = 0;
     }
     if (lq <= MD) modify(LS, lt, MD);
     if (MD <  rq) modify(RS, MD+1, rt);
     int s = LS + (maxV[LS] < maxV[RS]);
     maxV[d] = maxV[s], maxD[d] = maxD[s];
}

int main()
{
#ifndef ONLINE_JUDGE
     freopen("cf.in" , "r", stdin);
     freopen("cf.out", "w", stdout);
#endif
     scanf("%d", &n);
     for (int i = 1; i <= n; i ++) {
	  scanf("%d%d%d", l + i, v + i, r + i);
	  addevent(l[i], v[i], r[i], 1);
	  addevent(v[i]+1, v[i], r[i], -1);
     }
     sort(e + 1, e + en + 1, cmp_e);
     build(1, 1, maxw);
     for (int x = 1, q = 1; x <= maxw; x ++) {
	  for (; q <= en && e[q].t == x; q ++) {
	       lq = e[q].l, rq = e[q].r, cq = e[q].w;
	       modify(1, 1, maxw);
	  }
	  if (maxV[1] > curmax) {
	       curmax = maxV[1], curx = x, cury = maxD[1];
	  }
     }
     printf("%d\n", curmax);
     for (int i = 1; i <= n; i ++)
	  if (l[i] <= curx && curx <= v[i] &&
	      v[i] <= cury && cury <= r[i]) {
	       printf("%d ", i);
	  }
     printf("\n");
}
