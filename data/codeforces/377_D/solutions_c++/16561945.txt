#include<bits/stdc++.h>

using namespace std;

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define sol (root+root)
#define sag (root+root+1)
#define orta ((bas+son)/2)
#define ll long long
#define pii pair<int,int>
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

const int N=3e5+10;
const int mod=1e9+7;
const int inf=1e9+7;

int n,i,j,l,v,r,ans,q,w;
int lazy[4*N],vv[N],rr[N],H[N];

vector<pii > V[2][N];

vector<int> V2[2][N];

pii st[4*N];

void push(int root,int bas,int son){
	st[sol].st+=lazy[root];
	st[sag].st+=lazy[root];
	lazy[sol]+=lazy[root];
	lazy[sag]+=lazy[root];
	lazy[root]=0;
}

void update(int root,int bas,int son,int x,int y,int v){
	if(bas>y or son<x)
		return;
	if(x<=bas and son<=y){
		lazy[root]+=v;
		st[root].st+=v;
		return;
	}
	push(root,bas,son);
	update(sol,bas,orta,x,y,v);
	update(sag,orta+1,son,x,y,v);
	if(st[sol].st>st[sag].st){
		st[root].st=st[sol].st;
		st[root].nd=st[sol].nd;
	}
	else {
		st[root].st=st[sag].st;
		st[root].nd=st[sag].nd;
	}
}

void init(int root,int bas,int son){
	if(bas==son){
		st[root].nd=bas;
		return;
	}
	init(sol,bas,orta);
	init(sag,orta+1,son);
	st[root].nd=bas;
}

main(){

	scanf("%d",&n);

	for(i=1 ; i<=n ; i++){
		scanf("%d %d %d",&l,&v,&r);
		V[0][l].pb(mp(v,r));
		V[1][v].pb(mp(v,r));
		V2[0][l].pb(i);
		V2[1][v].pb(i);
		vv[i]=v;
		rr[i]=r;
	}

	init(1,1,N);

	for(i=1 ; i<N ; i++){
		for(j=0 ; j<V[0][i].size() ; j++)
			update(1,1,N,V[0][i][j].st,V[0][i][j].nd,1);
		if(ans<st[1].st){
			ans=st[1].st;
			q=i;
			w=st[1].nd;
		}
		for(j=0 ; j<V[1][i].size() ; j++)
			update(1,1,N,V[1][i][j].st,V[1][i][j].nd,-1);
	}

	cout<<ans<<endl;

	for(i=1 ; i<N ; i++){
		for(j=0 ; j<V2[0][i].size() ; j++)
			H[V2[0][i][j]]=1;
		if(q==i)
			break;
		for(j=0 ; j<V2[1][i].size() ; j++)
			H[V2[1][i][j]]=0;
	}

	for(i=1 ; i<=n ; i++)
		if(H[i] and vv[i]<=w and w<=rr[i])
			printf("%d ",i);

}
