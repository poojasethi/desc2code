#include <iostream>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <utility>
#include <algorithm>
#include <cmath>
#define MAXN 100010
#define MAXV 300010

using namespace std;

int n;
int lo[MAXN],v[MAXN],hi[MAXN];
vector<int> start[MAXV],end[MAXV];
int st[8*MAXV],lazy[8*MAXV],ind[8*MAXV];
int ans,a,b;

void init(int i, int l, int r) {
	ind[i] = l;
	if (l < r) {
		int mid = (l+r)/2;
		init(2*i, l, mid);
		init(2*i+1, mid+1, r);
	}
}

void push(int i) {
	st[i] += lazy[i];
	lazy[2*i] += lazy[i];
	lazy[2*i+1] += lazy[i];
	lazy[i] = 0;
}

void update(int i, int l, int r, int ll, int rr, int val) {
	push(i);
	if (r < ll || l > rr) return;
	if (l >= ll && r <= rr) {
		lazy[i] += val;
		push(i);
		return;
	}
	int mid = (l+r)/2;
	update(2*i, l, mid, ll, rr, val);
	update(2*i+1, mid+1, r, ll, rr, val);
	if (st[2*i] > st[2*i+1]) {
		st[i] = st[2*i];
		ind[i] = ind[2*i];
	}
	else {
		st[i] = st[2*i+1];
		ind[i] = ind[2*i+1];
	}
}

int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> lo[i] >> v[i] >> hi[i];
		start[lo[i]].push_back(i);
		end[v[i]].push_back(i);
	}
	init(1,1,MAXV);
	for (int i = 1; i < MAXV; i++) {
		for (int j = 0; j < start[i].size(); j++) {
			int id = start[i][j];
			update(1,1,MAXV,v[id],hi[id],1);
		}
		if (st[1] > ans) {
			ans = st[1];
			a = i;
			b = ind[1];
		}
		for (int j = 0; j < end[i].size(); j++) {
			int id = end[i][j];
			update(1,1,MAXV,v[id],hi[id],-1);
		}
	}
	cout << ans << '\n';
	for (int i = 0; i < n; i++) {
		if (lo[i] <= a && a <= v[i] && v[i] <= b && b <= hi[i])
			cout << i+1 << ' ';
	}
}