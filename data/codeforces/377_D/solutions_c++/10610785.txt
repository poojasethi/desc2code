#include <bits/stdc++.h>
#define fi first
#define se second
#define endl '\n'

using namespace std;

typedef long long lint;
typedef pair<int,int> ii;
const int MAXN = 3e5+333;
const int mod = 1e9+7;

struct node{ int l,val,r,loc; } ar[MAXN];

int N,seg[MAXN*5],lazy[MAXN*5],sum[MAXN];
priority_queue< ii,vector<ii>,greater<ii> > q;
vector<int> wr;

bool comp(const node &a,const node &b){
	return a.l<b.l;
}

int upd(int k,int b,int e,int a1,int a2,int p){
	if(b>a2 || e<a1)
		return seg[k]+lazy[k];
	if(b>=a1 && e<=a2){
		lazy[k]+=p;
		return seg[k]+lazy[k];
	}
	seg[k]=max(upd(k*2,b,(b+e)/2,a1,a2,p),upd(k*2+1,(b+e)/2+1,e,a1,a2,p));
	return seg[k]+lazy[k];
}

int main(){
	
	scanf(" %d",&N);
	for(int i=1;i<=N;i++){
		scanf(" %d %d %d",&ar[i].l,&ar[i].val,&ar[i].r);
		ar[i].loc=i;
	}
	
	sort(ar+1,ar+N+1,comp);
	
	int ans=0,beg,end;
	for(int i=1;i<=N;i++){
		while(!q.empty() && q.top().fi<ar[i].l){
			upd(1,1,3e5,q.top().fi,q.top().se,-1);
			q.pop();
		}
		q.push(ii(ar[i].val,ar[i].r));
		upd(1,1,3e5,ar[i].val,ar[i].r,1);
		int tmp=seg[1]+lazy[1];
		if(ans<tmp){
			ans=tmp;
			beg=ar[i].l;
		}
	}
	
	for(int i=1;i<=N;i++)
		if(ar[i].l<=beg && ar[i].val>=beg){
			sum[ar[i].val]++;
			sum[ar[i].r+1]--;
		}
	for(int i=1;i<=3e5;i++){
		sum[i]+=sum[i-1];
		if(sum[i]==ans)
			end=i;
	}
	
	for(int i=1;i<=N;i++)
		if(ar[i].l<=beg && ar[i].r>=end && ar[i].val>=beg && ar[i].val<=end)
			wr.push_back(ar[i].loc);
	sort(wr.begin(),wr.end());
	printf("%d\n",(int)wr.size());
	for(int i=0;i<(int)wr.size();i++)
		printf("%d ",wr[i]);
	printf("\n");
	
	return 0;
}
