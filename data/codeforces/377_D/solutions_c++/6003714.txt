#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <algorithm>
using namespace std;

const int N = 300003;

#define root 1, mc, 1
#define lson l, m, k << 1
#define rson m + 1, r, k << 1 | 1
#define lc (k << 1)
#define rc (k << 1 | 1)

vector<int> y1[2][N], y2[2][N];
int n, mb, mc, a[N], b[N], c[N], cov[N << 2], mcov[N << 2], pos[N << 2];

inline void init(int l, int r, int k) {
	mcov[k] = 0; cov[k] = 0; pos[k] = l;
	if (l == r) return;

	int m = (l + r) >> 1;
	init(l, m, lc);
	init(m + 1, r, rc);
}

inline void update(int s, int t, int tag, int l, int r, int k) {
	// printf("update : (%d %d) %d -> (%d %d)\n", s, t, tag, l, r);
	if (s <= l && t >= r) {
		cov[k] += tag;
		mcov[k] += tag;
	} else {
		int m = (l + r) >> 1;
		if (s <= m) update(s, t, tag, lson);
		if (t >  m) update(s, t, tag, rson);
		if (mcov[lc] > mcov[rc]) {
			mcov[k] = mcov[lc] + cov[k];
			pos[k] = pos[lc];
		} else {
			mcov[k] = mcov[rc] + cov[k];
			pos[k] = pos[rc];
		}
	}
	// printf("upback   : (%d %d) (%d %d) at %d\n", l, r, mcov[k], cov[k], pos[k]);
}

int main() {
	mb = 0, mc = 0;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i] >> b[i] >> c[i];
		y1[0][a[i]].push_back(b[i]); y2[0][a[i]].push_back(c[i]);
		y1[1][b[i]].push_back(b[i]); y2[1][b[i]].push_back(c[i]);
		mb = max(mb, b[i]);
		mc = max(mc, c[i]);
	}

	init(root);

	int ans = 0, L, R;
	for (int i = 1; i <= mb; i++) {
		int sz = y1[0][i].size();
		for (int j = 0; j < sz; j++) update(y1[0][i][j], y2[0][i][j], 1, root);
		if (mcov[1] > ans) {
			ans = mcov[1];
			L = i; R = pos[1];
		}
		sz = y1[1][i].size();
		for (int j = 0; j < sz; j++) update(y1[1][i][j], y2[1][i][j], -1, root);
	}

	cout << ans << endl;
	for (int i = 0; i < n; i++) if (a[i] <= L && L <= b[i] && b[i] <= R && R <= c[i]) {
		cout << i + 1 << " ";
	}

	return 0;
}