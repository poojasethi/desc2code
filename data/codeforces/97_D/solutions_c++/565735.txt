#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <memory.h>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <string> 
#include <sstream>
 
using namespace std;
 
void ASS(bool b)
{
	if (!b)
	{
		++*(int*)0;
	}
}
 
typedef long long LL;
typedef vector<int> vi;
 
#define CL(x) memset(x, 0, sizeof(x))
#define CLX(x, v) memset(x, v, sizeof(x))
#define FOR(i, x) for (int i = 0; i < (int)(x); i++)
 
const int N = 150;
const int M = 5;

int n, m;

char cmd[] = "LRUD";
int dx[] = {0, 0, -1, 1};
int dy[] = {-1, 1, 0, 0};

struct P
{
	unsigned a[N][M];
	P()
	{
		CL(a);
	}
	void set(int x, int y)
	{
		if (x < 0 || x >= n) return;
		if (y < 0 || y >= m) return;
		a[x][y >> 5] |= 1 << (y & 31);
	}
	void Move(int dir, P& res) const
	{
		if (dir == 0)
			Move0(res);
		if (dir == 1)
			Move1(res);
		if (dir == 2)
			Move2(res);
		if (dir == 3)
			Move3(res);
	}
	void Move0(P& res) const
	{
		FOR(i, N)
		{
			unsigned t = 0;
			for (int j = M - 1; j >= 0; j--)
			{
				res.a[i][j] = (a[i][j] >> 1) | t;
				t = a[i][j] << 31;
			}
		}
	}
	void Move1(P& res) const
	{
		FOR(i, N)
		{
			unsigned t = 0;
			FOR(j, M)
			{
				res.a[i][j] = (a[i][j] << 1) | t;
				t = a[i][j] >> 31;
			}
		}
	}
	void Move2(P& res) const
	{
		FOR(i, N - 1)
		{
			FOR(j, M)
				res.a[i][j] = a[i + 1][j];
		}
		FOR(i, M)
			res.a[N - 1][i] = 0;
	}
	void Move3(P& res) const
	{
		FOR(i, N - 1)
		{
			FOR(j, M)
				res.a[i + 1][j] = a[i][j];
		}
		FOR(i, M)
			res.a[0][i] = 0;
	}
	bool eq(const P& p) const
	{
		return memcmp(a, p.a, sizeof(a)) == 0;
	}
	void W()
	{
		FOR(i, n)
		{
			FOR(j, m)
			{
				int x = (a[i][j >> 5] & (1 << (j & 31))) != 0;
				cout << x;
			}
			cout << endl;
		}
		cout << endl;
	}
};

char a[N + 5][N + 5];
char str[1 << 17];

void Op(P& res, const P& x, const P& s, const P&xx, const P&f)
{
	FOR(i, N)
		FOR(j, M)
			res.a[i][j] = ((x.a[i][j] & s.a[i][j]) | xx.a[i][j]) & f.a[i][j];
}

int main()
{
	int k;
	scanf("%d %d %d", &n, &m, &k);
	FOR(i, n)
		scanf("%s", a[i]);
	scanf("%s", str);
	P s[4];
	P x[2];
	P end;
	FOR(i, n)
		FOR(j, m)
	{
		if (a[i][j] != '#')
			x[0].set(i, j);
		if (a[i][j] == 'E')
			end.set(i, j);
	}
	P f = x[0];
	if (x[0].eq(end))
	{
		cout << 0 << endl;
		return 0;
	}
	FOR(dir, 4)
	{
		FOR(i, n)
			FOR(j, m)
		{
			int X = i + dx[dir];
			int Y = j + dy[dir];
			if (X < 0 || X >= n) continue;
			if (Y < 0 || Y >= m) continue;
			if (a[i][j] != '#' && a[X][Y] == '#')
				s[dir].set(i, j);
		}
	}
	int c0 = 0;
	int c1 = 1;
	P xx;
	FOR(z, k)
	{
		int id = 0;
		while (id < 4 && str[z] != cmd[id])
			id++;
		ASS(id < 4);
		x[c0].Move(id, xx);
		Op(x[c1], x[c0], s[id], xx, f);
		if (x[c1].eq(end))
		{
			cout << (z + 1) << endl;
			return 0;
		}
		swap(c0, c1);
	}
	cout << -1 << endl;
	return 0;
} 