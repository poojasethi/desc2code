#include <iostream>
#include <vector>
#include <cstdio>
#include <algorithm>
#include <utility>
#include <bitset>
using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PII;
typedef long long LL;

#define REP(i, n) for(int i=0; i<n; ++i)
#define ST first
#define ND second
#define PB push_back
#define VAR(v,n) __typeof__(n) v=(n)
#define FE(i,c) for(VAR(i,(c).begin());i!=(c).end();++i)
#define ALL(c) (c).begin(),(c).end()

#define MAXN 151
#define MAXK 100001
char buf[MAXK];

int main(){
    int n, m, k;
    scanf("%d%d%d", &n, &m, &k);
    
    bitset<MAXN*MAXN> exit, walls;
    walls.flip();
    
    REP(i, n){
        scanf("%s", buf);
        REP(j, m){
            if ( buf[j] != '#' ) walls.reset( i*MAXN+j );
            if ( buf[j] == 'E' ) exit.set( i*MAXN+j );
        }
        walls.set( i*MAXN + MAXN-1 );
    }
    
    scanf("%s", buf);
    
    bitset<MAXN*MAXN> possible = ~walls;
    
    int turn = 0;
    for(; turn<k; ++turn){
        if ( possible == exit ) break;
        switch(buf[turn]){
            case 'U':
                possible = ( ( possible >> MAXN ) & ( ~ walls ) ) | ( ( walls << MAXN ) & possible );
                break;
            case 'R':
                possible = ( ( possible << 1 ) & ( ~ walls ) ) | ( (walls >> 1) & possible );
                break;
            case 'D':
                possible = ( ( possible << MAXN ) & ( ~ walls ) ) | ( ( walls >> MAXN ) & possible );
                break;
            case 'L':
                possible = ( ( possible >> 1 ) & ( ~ walls ) ) | ( (walls << 1) & possible );
                break;
        }
    }
    
    if ( possible != exit ) turn = -1;
    printf("%d\n", turn);
return 0;
}

