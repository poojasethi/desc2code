#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

#define long long long

const int N = 1.5e5 +7;
const int M = 307;

int n, m;
long d;
long dp[N];
long tmp[N];
long a[M], b[M], t[M];
int q[N];

int main() {
  scanf("%d %d %I64d", &n, &m, &d);
  for (int i = 1; i <= m; i++) scanf("%I64d %I64d %I64d", a+i, b+i, t+i);
  int i = 0;
  while (i < m) {
    int j = i + 1;
    long step = (t[j] - t[i]) * d;
    if (step >= n) {
      fill(dp+1, dp+1 + n, *max_element(dp+1, dp+1 + n));
    } else {
      int f = 0, l = -1;
      for (int x = 1; x <= step + n; x++) {
	while (f <= l && q[f] < x - step*2) f++;
	if (x <= n) {
	  while (f <= l && tmp[q[l]] < tmp[x]) l--;
	  q[++l] = x;
	}
	if (x > step) dp[x - step] = tmp[q[f]];
      }
    }
    while (j <= m && t[j] == t[i+1]) {
      for (int x = 1; x <= n; x++) dp[x] += b[j] - abs(a[j] - x);
      j++;
    }
    memcpy(tmp, dp, sizeof dp);
    i = j - 1;
  }
  printf("%I64d\n", *max_element(dp+1, dp+1 + n));
}
