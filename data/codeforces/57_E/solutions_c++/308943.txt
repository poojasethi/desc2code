#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <iostream>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <queue>
#include <stack>
#include <deque>

using namespace std;

#define x1 fiwgiunb
#define x2 viosjosk
#define y1 fnwnfwgw
#define y2 jfowjgon
#define ws osgsogsg



#define dbg(x) cerr << #x << " = " << x << endl
#define deb(x) cerr << #x << " = " << x << endl


#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(c) (int)(c).size()          
#define mp make_pair
#define forn(i,n) for(int i=0;i<(int)n;++i)
#define ford(i,n) for(int i=(int)n;i>=0;--i)
#define X first
#define Y second
#define bits(x) __builtin_popcount(x)
typedef long long int64;
typedef long long ll;
typedef long double ld;

const int N = 1500;
const int M = N*N*4;
const int64 p = 1000000007;


int d[2*N][2*N];
bool ok[2*N][2*N];
#define d(a,b) d[a+N][b+N]
#define ok(a,b) ok[a+N][b+N]


pair<int,int> o[M];
int64 k,ans;
int n,b,e;

int dx[8]={1,2,2,1,-1,-2,-2,-1};
int dy[8]={2,1,-1,-2,-2,-1,1,2};

int64 calc(int w)
{
  e=b=0;
  for(int i=-N+1;i<N;i++)
    for(int j=-N+1;j<N;j++)
      d(i,j)=1<<20;

  o[b++]=mp(0,0);
  d(0,0)=0;

  while(b!=e)
  {
    pair<int,int> a=o[e++];
    if (e==M)
      e=0;
    if (d(a.X,a.Y)==w)
      continue;

    forn(t,8)
    {
      if (d(a.X+dx[t],a.Y+dy[t])>d(a.X,a.Y)+1 && ok(a.X+dx[t],a.Y+dy[t]))
      {
        d(a.X+dx[t],a.Y+dy[t])=d(a.X,a.Y)+1;
        o[b++]=mp(a.X+dx[t],a.Y+dy[t]);
        if (b==M)
          b=0;
      }
    }
  }
  int64 ans=0;
  for(int i=-N+1;i<N;i++)
    for(int j=-N+1;j<N;j++)
      if (d(i,j)<(1<<20))
        ans++;
  return ans;
}

int main()
{ 
  memset(ok,true,sizeof ok);
  scanf("%I64d%d",&k,&n);

  int64 w=200;
  w=min(k,w);

  forn(i,n)
  {
    int x,y;
    scanf("%d%d",&x,&y);
    ok(x,y)=false;
  }

  int64 ans=calc(w);
  int64 ans2=calc(w+1);
  int64 add=ans2-ans;

  if (ans<100)
  {
    printf("%I64d\n",ans);
    return 0;
  }

  k-=w;
  k%=p;
  k--;
  int64 rez = (((((2*add+28*k)%p)*(k+1))%p)*((p+1)/2))%p;
  deb(ans);

  printf("%I64d\n",(ans+rez)%p);
  return 0;
}
