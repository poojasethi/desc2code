#include <set>
#include <map>
#include <cmath>
#include <cctype>
#include <cstdio>
#include <string>
#include <vector>
#include <cstring>
#include <cstdlib>
#include <utility>
#include <iostream>
#include <algorithm>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))

using namespace std;

const LL base = 1000000007LL;

set<pair<int, int> > u, c;
vector<pair<int, int> > cur, next;
LL k, ans;
int n, delta, times, F, L;

int d[8][2] = {1, 2, 1, -2, -1, 2, -1, -2, 2, 1, 2, -1, -2, 1, -2, -1};

int main()
{
#ifndef ONLINE_JUDGE
    freopen("a.in", "r", stdin);
    freopen("a.out", "w", stdout);
#endif
    cin >> k >> n;
    u.clear(); c.clear();
    for (int i = 1; i <= n; i ++)
    {
        int x, y;
        cin >> x >> y;
        c.insert(make_pair(x, y));
    }
    //BFS
    u.insert(make_pair(0, 0));
    cur.clear(); cur.push_back(make_pair(0, 0));
    delta = times = 0;
    ans = 1LL;
    for (int step = 1; (LL) step <= k; step ++)
    {
        next.clear();
        for (int i = 0; i < cur.size(); i ++)
            for (int dir = 0; dir < 8; dir ++)
            {
                int nx = cur[i].first + d[dir][0];
                int ny = cur[i].second + d[dir][1];
                pair<int, int> v = make_pair(nx, ny);
                if (! u.count(v) && ! c.count(v))
                {
                    u.insert(v);
                    next.push_back(v);
                }
            }
        if (delta == next.size() - cur.size()) times ++;
            else delta = next.size() - cur.size(), times = 0;
        ans += next.size();
        if (times > 5)
        {
            LL tot = (k - (LL) step) % (2LL * base);
            LL F = (LL) (next.size() + delta) % (2LL * base);
            LL L = (F + (LL) delta * (tot - 1LL)) % (2LL * base);
            LL sum = (F + L) * tot % (2LL * base);
            sum /= 2;
            ans += sum;
            ans %= base;
            break;
        }
        cur = next;
    }
    cout << ans << endl;
    return 0;
}
