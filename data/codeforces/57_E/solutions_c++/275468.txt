#include <algorithm>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#define PB push_back
#define MP make_pair
#define PII pair<int, int>
typedef long long LL;
using namespace std;

#define MOD 1000000007
LL k;
int n;
struct Node {
    int x, y, tim;
    Node(){}
    Node(int a, int b, int c):x(a),y(b),tim(c){}
};

set<PII> exi;
deque<Node> q;

int move[8][2] = { -2, -1,
                   -2, 1,
                   -1, -2,
                   -1, 2,
                   1, -2,
                   1, 2,
                   2, -1,
                   2, 1};

int main() {

//    freopen("in", "r", stdin);
    cin >> k >> n;
    for (int i = 0; i < n; i++) {
        int a, b;
        cin >> a >> b;
        exi.insert(MP(a, b));
    }
    int nowtim = 0;
    LL ans = 0;
    q.PB(Node(0, 0, 0));
    exi.insert(MP(0, 0));
    int cnt = 0, deta = 0, lastcnt = 0, nowcnt = 0;
    while (nowtim <= k) {
        while (!q.empty()) {
            Node now = q.front();
            if (now.tim > nowtim) break;
            q.pop_front();
            ans++;
            nowcnt++;
            for (int i = 0; i < 8; i++) {
                Node next(now.x + move[i][0], now.y + move[i][1], now.tim + 1);
                if (exi.count(MP(next.x, next.y)) > 0) continue;
                exi.insert(MP(next.x, next.y));
                q.PB(next);
            }
        }
        if (nowcnt - lastcnt == deta) cnt++;
        else {
            deta = nowcnt - lastcnt;
            cnt = 0;
        }
        lastcnt = nowcnt;
        nowcnt = 0;
        if (cnt > 5) {
            LL a1 = lastcnt + deta;
            LL nn = k - nowtim;
            LL an = a1 + a1 + (nn - 1) % MOD * deta;
            if (an % 2 == 0) an /= 2;
            else nn /= 2;
            ans += (nn % MOD) * (an % MOD);
            break;
        }
        nowtim++;
    }
    cout << ans % MOD << endl;
    return 0;
}