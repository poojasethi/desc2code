
#include<algorithm>
#include<cassert>
#include<complex>
#include<map>
#include<iomanip>
#include<sstream>
#include<queue>
#include<set>
#include<string>
#include<vector>
#include<iostream>
#include<cstring>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define fup FOR
#define fdo FORD
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define siz SZ
#define CLR(x) memset((x), 0, sizeof(x))
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
#define FI X
#define SE Y
#define SQR(a) ((a)*(a))
#define DEBUG 0
#define debug(x) {if (DEBUG)cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {if (DEBUG) {cerr <<#x <<" = "; FORE(it, (x)) cerr <<*it <<", "; cout <<endl; }}
using namespace std;

typedef long long LL;
typedef long double LD;
typedef pair<int, int>P;
typedef vector<int>VI;
const int INF=1E9+7;
template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }

const int maxD = 600;
const int DOD = maxD * 3;
const LL mod = 1E9 + 7;

LL K, n;
int dx[] = {1, -1, 1, -1, 2, -2, 2, -2};
int dy[] = {2, -2, -2, 2, 1, -1, -1, 1};

int d[DOD * 2][DOD * 2];

LL pot(LL a, LL n_) {
    LL s = a;
    s %= mod;
    LL res = 1;
    fup(i, 0, 31) {
        if (n_ & (1 << i)) res *= s; 
//        cout << res << " " << s << endl;
        res %= mod;
        s *= s;
        s %= mod;
    }
    return res;
}

LL odw(LL a) {
    return pot(a, mod - 2);
}

int X[5];
int Y[5];
int sum[maxD + 6];

int main(){
	ios_base::sync_with_stdio(false);
    cin >> K >> n;
    queue<P> Q;

    fup(i, 0, 2 * DOD - 1) fup(j, 0, 2 * DOD - 1) d[i][j] = INF;
    fup(i, 1, n) { int a, b; cin >> a >>  b; d[a + DOD][b + DOD] = -1; }
    d[DOD][DOD] = 0;
    Q.push(P(DOD, DOD));
    while (!Q.empty()) {
        int x = Q.front().FI, y = Q.front().SE; Q.pop();
        sum[d[x][y]]++;

        if (d[x][y] == maxD) continue;
        fup(i, 0, 7) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (d[nx][ny] == INF) {
                d[nx][ny] = d[x][y] + 1;
                Q.push(P(nx, ny));
            }
        }
    }
    if (DEBUG) fup(i, 1, 10) cout << i << " " << sum[i] << endl;
    int k = 4;
    int a = 0;
    fup(i, maxD - k + 1, maxD) {
        X[a] = i;
        Y[a] = sum[i] + (a > 0? Y[a - 1]: 0);

        if (DEBUG) cout << i << " " << sum[i] << " " << X[a] << " " << Y[a] << endl;

        ++a;
    }

    LL S = 0;
    debug(K);
    fup(i, 0, min(LL(maxD - k), K)) {
        S += sum[i];
    }
    S %= mod;
    bool tak = K > maxD - k;
    K %= mod; 

if (tak) {
    fup(i, 0, k - 1) {
        LL g = 1, d = 1;
        fup(j, 0, k - 1) if (i != j) {
            g *= (mod + K - X[j]);
            d *= (X[i] - X[j] + mod);
            g %= mod;
            d %= mod;
        }
        /*
        debug(g);
        debug(d);
        debug(odw(d));
        debug(g * odw(d));
        debug(Y[i] * ((g * odw(d)) % mod));*/

        S += Y[i] * ((g * odw(d)) % mod);
        S %= mod;
    }
}
    cout << S << endl;

    

	return 0;
}

