#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
#define MOD 1000000007ll
#define D 1000

int dx[]={1,1,-1,-1,2,2,-2,-2},dy[]={2,-2,2,-2,1,-1,1,-1};

int a[D+10];
bool used[4*D+10][4*D+10];
queue <int> q;

void add(int x, int y, int d){
    if(!used[x][y]){
        used[x][y] = true;
        a[d]++;
        q.push(x); q.push(y); q.push(d);
    }
}

int main(void){
    int N,i,x,y,d;
    ll K;
    
    cin >> K >> N;
    REP(i,N){
        cin >> x >> y;
        used[2*D+5+x][2*D+5+y] = true;
    }
    
    add(2*D+5,2*D+5,0);
    while(!q.empty()){
        x = q.front(); q.pop(); y = q.front(); q.pop(); d = q.front(); q.pop();
        if(d < D) REP(i,8) add(x+dx[i],y+dy[i],d+1);
    }
    
    ll ans = 0;
    REP(i,D+1) if(i <= K) ans = (ans + a[i]) % MOD;
    if(a[D] > 0 && K > D){
        ll term = (K - D) % MOD;
        ll low = (a[D] + 28) % MOD;
        ll high = (a[D] + 28 * term) % MOD;
        ll sum = (low + high) % MOD * term % MOD * ((MOD + 1) / 2) % MOD;
        ans = (ans + sum) % MOD;
    }
    
    cout << ans << endl;
    
    return 0;
}
