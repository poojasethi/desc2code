#include <cstdio>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cstring>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <cctype>
#define REP(i,n) for(int i = 0; i < (n); ++i)
#define MP make_pair
#define BitC __builtin_popcount
#define GCD __gcd
#define RDI(n) int n; cin >> n
#define RDL(n) ll n; cin >> n
#define RDS(s) string s; cin >> s
#define OUT(x) cout << (x) << endl
#define MA(a,b) a=max((a),(b))
#define MI(a,b) a=min((a),(b))
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef map<string,int> msi;
typedef map<int,int> mii;
typedef vector<int> vi;
const ll MOD=1000000007;
int di[8]={-1,1,0,0,-1,-1,1,1};
int dj[8]={0,0,-1,1,0,0,0,0};
//inline bool valid(int i, int j){
//	   return i >=0 && j >=0 && i < n && j < m;
//}
pii d[8]={MP(1,2),MP(1,-2),MP(-1,2),MP(-1,-2),MP(2,-1),MP(2,1),MP(-2,1),MP(-2,-1)};
pii operator +(pii a, pii b){
	return MP(a.first+b.first, a.second+b.second);
}
int main(){
	//freopen("input", "r", stdin);
	set<pii> S, D;
	S.insert(MP(0,0));
	RDL(K);
	RDI(m);
	REP(i,m){
		pii t;
		cin >> t.first>>t.second;
		D.insert(t);
	}
	
	queue<pii> Q[2];
	int now=0, next;
	Q[now].push(MP(0,0));
	int padd=0;
	ll ni=-1;
	int cnt28=0;
	REP(i,K){
		if(Q[now].size()==0){
			OUT(S.size());
			return 0;
		}
		next=1-now;
		if(Q[now].size()-padd==28){
			if(++cnt28==2){
				ni=i;
				break;
			}
		}else{
			cnt28=0;
		}
		
		//printf("%d %d %d\n", i, Q[now].size(), Q[now].size()-padd);
		padd=Q[now].size();
		while(!Q[now].empty()){
			pii p=Q[now].front();
			Q[now].pop();
			REP(i,8){
				pii n=p+d[i];
				if(D.find(n)==D.end()&&S.find(n)==S.end()){
					S.insert(n);
					Q[next].push(n);
				}
			}
		}
		now=next;
		//printf("%d %d\n", i+1,S.size());
	}
	if(ni==-1){
		OUT(S.size());
		return 0;
	}
	ll nn=(K-ni)%MOD;
	ll nd=28;
	ll na=Q[now].size()+28;
	//OUT(S.size()+(2*na+(nn-1)*nd)*nn/2);
	OUT(S.size()+(2*na+(nn+MOD-1)%MOD*nd%MOD)%MOD*nn%MOD*500000004%MOD);
	
	
	//freopen("output", "w", stdout);
	return 0;
}

