#include <iostream>
#include <cstring>
#include <cstdio>
using namespace std;

int dx[] = {-1,-2,-2,-1, 1, 2, 2, 1};
int dy[] = {-2,-1, 1, 2, 2, 1,-1,-2};

bool valid( int x, int y ){
	if ( x < 0 || y < 0 )
		return false;
	return true;
}

int record[2100][2100];
int x[4100000];
int y[4100000];

#define modulo 1000000007

main(){
	long long k;
	int n;
	int i, j, beg, end;
	int last;
	int prev;
	
	cin >> k >> n;
	memset ( record, 0, sizeof ( record ) );
	for ( i = 0; i < n; i ++ ){
		cin >> beg >> end;
		beg += 1050;	end += 1050;
		record[beg][end] = -1;
	}
	record[1050][1050] = -1;
	x[0] = y[0] = 1050;
	beg = 0; end = 1;
	prev = 1;
	int total = 1;
	for ( i = 1; i <= 500 && i <= k; i ++ ){
		last = end;
		while( beg < last ){
			for ( j = 0; j < 8; j ++ )
				if ( valid( x[beg] + dx[j], y[beg] + dy[j] ) && record[ x[beg] + dx[j] ][ y[beg] + dy[j] ] == 0 ){
					record[ x[beg] + dx[j] ][ y[beg] + dy[j] ] = i;
					x[end] = x[beg] + dx[j];
					y[end] = y[beg] + dy[j];
					end ++;
				}
			beg ++;
		}
		total += end - last;
		prev = end - last;
	}
	if ( prev == 0 || i > k ){
		cout << total << endl;
		cin >> n;
		return 0;
	}
	k -= 500;
	
	k %= modulo;
	total = ( k * prev + total ) % modulo;
	k = ( k * ( k + 1 ) / 2 ) % modulo;
	total = ( k * 28 + total ) % modulo;
	cout << total << endl;
		cin >> n;
	
	return 0;
}
