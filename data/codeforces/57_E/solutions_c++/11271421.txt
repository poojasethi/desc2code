#include<iostream>
#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<math.h>
#include<vector>
#include<set>
#include<map>
using namespace std;
typedef long long lld;
#define mod 1000000007
#define inv2 500000004
#define inf 0xfffffff
#define mp make_pair
#define X first
#define Y second
pair<int,int> queue[210*210];
bool can[210][210];
int rear,front;
int dis[210][210];
int ax[8]={-1,1,-2,2,-2,2,-1,1};
int ay[8]={-2,-2,-1,-1,1,1,2,2};
lld num[1010];
void bfs()
{
    memset(num,0,sizeof(num));
    for(int i=0;i<=200;i++)
        for(int j=0;j<=200;j++)
            dis[i][j]=inf;
    rear=front=0;
    queue[front++]=mp(100,100);
    dis[100][100]=0;
    while(rear < front)
    {
        int x=queue[rear].X;
        int y=queue[rear].Y;
        rear++;
        num[dis[x][y]]++;
        for(int k=0;k<8;k++)
        {
            int xx=x+ax[k];
            int yy=y+ay[k];
            if(xx < 0 || xx > 200 || yy < 0 || yy > 200)
                continue;
            if(!can[xx][yy])
                continue;
            if(dis[x][y]+1 < dis[xx][yy])
            {
                dis[xx][yy]=dis[x][y]+1;
                queue[front++]=mp(xx,yy);
            }
        }
    }
//  for(int i=0;i<=100;i++)
//      printf("%d:%d\n",i,num[i]);
}
int main()
{
    lld k;
    int n;
    cin >> k >> n;
    memset(can,true,sizeof(can));
    for(int i=0;i<n;i++)
    {
        int x,y;
        scanf("%d %d",&x,&y);
        can[x+100][y+100]=false;
    }
    bfs();
    if(k <= 30)
    {
        lld ans=0;
        for(int i=0;i<=k;i++)
            ans=(ans+num[i])%mod;
        cout << ans << endl;
    }
    else
    {
        lld ans=0;
        for(int i=0;i<=30;i++)
            ans=(ans+num[i])%mod;
        if(num[31] == 0)
            cout << ans << endl;
        else
        {
            k-=30;
            k=k%mod;
            lld tmp=(k*num[31])%mod;
            ans=(ans+tmp)%mod;
            tmp=(k*(k-1))%mod;
            tmp=(tmp*inv2)%mod;
            tmp=(tmp*28)%mod;
            ans=(ans+tmp)%mod;
            cout << ans << endl;
        }
    }
    return 0;
}
