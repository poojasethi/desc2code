#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 2000010;
int ch[N][26], len[N], tot, fail[N];
int num[N];
int tail, root;
void extend(int c) {
	int p = tail;
	tail = ++ tot;
	len[tail] = len[p] + 1;
	num[tail] = 1;
	memset(ch[tail], 0, sizeof ch[tail]);
	while(~p && !ch[p][c])
		ch[p][c] = tail, p=fail[p];
	if(p == -1) {
		fail[tail] = root;
	} else if(len[p]+1 == len[ch[p][c]]) {
		fail[tail] = ch[p][c];
	} else {
		len[++ tot] = len[p] + 1;
		int tmp = ch[p][c];
		memcpy(ch[tot], ch[tmp], sizeof ch[tmp]);
		fail[tot] = fail[tmp];
		fail[tmp] = fail[tail] = tot;
		while(~p && ch[p][c] == tmp)
			ch[p][c] = tot, p=fail[p];
	}
}
char buf[N];
int f[N];
int Kmp(char *S, int n) {
	rep(i, n)	S[i + n] = S[i];
	f[0] = f[1] = 0;
	for(int i = 1; i < n; i ++) {
		int j = f[i];
		while(j && S[i] != S[j])	j = f[j];
		f[i + 1] = S[i]==S[j]? j+1:0;
	}
	if(n % (n - f[n]) == 0)
		return n - f[n] + n - 1;
	return n*2 - 1;
}
LL calc(char *S, int n, int m) {
	int p = root, Len = 0;
	LL ret = 0;
	rep(i, n) {
		int c = S[i] - 'a';
		while(p && !ch[p][c])	p = fail[p];
		Len = std::min(Len, len[p]);
		p = ch[p][c];
		if(p)	Len ++;
		while(~fail[p] && len[fail[p]] >= m)
			p = fail[p], Len = len[p];
		if(Len >= m)
			ret += num[p];
	}
	return ret;
}
std::vector<int> G[N];
void dfs(int u) {
	rep(i, G[u].size()) {
		int v = G[u][i];
		dfs(v);
		num[u] += num[v];
	}
}
int main() {
	tail = root = 0;
	fail[root] = -1;
	int n, m, k;
	scanf("%s", buf);
	for(int i = 0; buf[i]; i ++) {
		extend(buf[i]-'a');
	}
	for(int i = 1; i <= tot; i ++)
		G[fail[i]].push_back(i);
	dfs(0);
	scanf("%d", &m);
	rep(i, m) {
		scanf("%s", buf);
		k = strlen(buf);
		printf("%I64d\n", calc(buf, Kmp(buf, k), k));
	}
	return 0;
}

	 	  	 		 		 		     			    	