#include<cstdio>
#include<cstring>
#define MAXN 1010000

int s[2*MAXN],n;

char Chr;

void read(int&x)
{
	for(;(Chr=getchar())<'0';);
	for(x=Chr-'0';(Chr=getchar())>='0';x=x*10+Chr-'0');
}

void reads(int*s,int&l)
{
	for(l=0;(Chr=getchar())<'a';);
	for(s[l++]=Chr-'a';(Chr=getchar())>='0';s[l++]=Chr-'a');
}

struct Suffix_Automaton
{
	int c[2*MAXN][26],_[2*MAXN],d[2*MAXN],t,Last,Peo[2*MAXN],In[2*MAXN],ss[2*MAXN],Vis,bl[2*MAXN];
	
	void Reset()
	{
		d[t=Last=1]=1;
		for(int i=0;i<26;i++)c[0][i]=1;
	}
	
	void Insert(int x)
	{
		int i(Last),j;
		d[Last=++t]=d[i]+1;
		for(;!c[i][x];i=_[i])c[i][x]=t;
		if(d[c[i][x]]==d[i]+1)_[t]=c[i][x];
		else
		{
			d[++t]=d[i]+1;
			memcpy(c[t],c[j=c[i][x]],sizeof c[t]);
			_[t]=_[j];
			_[j]=_[t-1]=t;
			for(;c[i][x]==j;i=_[i])c[i][x]=t;
		}
	}

	void Bfs()
	{
		int i,j,k;
		for(i=Last;i;i=_[i])Peo[i]=1;
		for(i=1;i<=t;i++)
			for(k=0;k<26;k++)
				if(c[i][k])
					In[c[i][k]]++;
		for(ss[i=0]=j=1;i<j;i++)
			for(k=0;k<26;k++)
			if(c[ss[i]][k])
			{
				In[c[ss[i]][k]]--;
				if(!In[c[ss[i]][k]])
					ss[j++]=c[ss[i]][k];
			}
		for(i=j-1;i>=0;i--)
			for(k=0;k<26;k++)
				Peo[ss[i]]+=Peo[c[ss[i]][k]];
	}
	
	void Query()
	{
		int i,j,l(1),Ans(0),k(0);
		reads(s,n);
		for(i=0;i<n;i++)s[i+n]=s[i];
		Vis++;
		for(i=j=0;i<n;i++)
		{
			for(;j<i+n&&c[l][s[j]];)l=c[l][s[j++]];
			if(j==i+n)
			{
				if(bl[l]==Vis)break;
				Ans+=Peo[l];
				bl[l]=Vis;
			}
			if(d[_[l]]==j-i)l=_[l];
		}
		printf("%d\n",Ans);
	}

}	Sam;

int main()
{
	int i;
	reads(s,n);
	Sam.Reset();
	for(i=0;i<n;i++)Sam.Insert(s[i]);
	Sam.Bfs();
	for(read(i);i--;)Sam.Query();
	return 0;
}
