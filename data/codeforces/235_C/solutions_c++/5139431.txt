#include <cstdio>
#include <cstring>
using namespace std;

struct T {
	int l, s, du, mask;
	T *par, *son[26];
} f[2200000], *f1 = f, *f2, *last, *root, *n1[2200000], *now;

int len, i, j, ans, l, q, h, n;
char S[2200000];

void ins(int x) {
	T *np = ++f1, *q, *nq, *p = last;
	np -> l = p -> l + 1;
	np -> s = 1;
	while (p && !p -> son[x])	p -> son[x] = np, p = p -> par;
	if (!p)	np -> par = root;
	else	{
		q = p -> son[x];
		if (p -> l + 1 == q -> l)	np -> par = q;
		else {
			nq = ++f1;
			nq -> l = p -> l + 1;
			nq -> s = 0;
			memcpy(nq -> son, q -> son, sizeof(q -> son));
			nq -> par = q -> par;
			q -> par = nq;
			np -> par = nq;
			while (p && p -> son[x] == q)	p -> son[x] = nq, p = p -> par;
		}
	}
	last = np;
}

int main() {
	scanf("%s", S);
	n = strlen(S);
	root = last = ++f1;
	for (i = 0; i < n; i++)	ins(S[i] - 'a');
	for (f2 = f; f2 != f1;) {
		++f2;
		if (f2 -> par)	f2 -> par -> du++;
	}
	for (f2 = f; f2 != f1;) {
		++f2;
		if (!f2 -> du)	n1[++h] = f2;
	}
	for (q = 1; q <= h; q++) if (n1[q] -> par){
		n1[q] -> par -> s += n1[q] -> s;
		if (!(-- n1[q] -> par -> du))	n1[++h] = n1[q] -> par;
	}
	scanf("%d", &n);
	for (j = 1; j <= n; j++) {
		scanf("%s", S);
		len = strlen(S);
		for (i = len; i < 2 * len; i++)	S[i] = S[i - len];
		for (ans = l = 0, now = root, i = 0; i < 2 * len; i++) {
			while (now != root && !now -> son[S[i] - 'a'])	now = now -> par, l = now -> l;
			if (now -> son[S[i] - 'a'])	l++, now = now -> son[S[i] - 'a'];
			else	l = 0, now = root;

			if (l > len) for (; now != root && now -> par -> l >= len; now = now -> par, l = now -> l);
			if (l >= len && now -> mask != j)	ans += now -> s, now -> mask = j;
		}
		printf("%d\n", ans);
	}
}
