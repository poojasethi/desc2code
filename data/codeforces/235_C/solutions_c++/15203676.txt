#include<bits/stdc++.h>
using namespace std;
char st[2000100];
int son[2000100][26],fail[2000100],len[2000100],size[2000100],tt,lst;
void extend(int ch)
{
	int now=++tt;len[now]=len[lst]+1;size[now]=1;
	while ((lst)&&(!son[lst][ch]))
	{
		son[lst][ch]=now;
		lst=fail[lst];
	}
	if (!lst) {fail[now]=1;lst=now;return;}
	int ths=son[lst][ch];
	if (len[ths]==len[lst]+1) {fail[now]=ths;lst=now;return;}
	int dup=++tt;fail[dup]=fail[ths];
	for (int i=0;i<=25;i++) son[dup][i]=son[ths][i];
	len[dup]=len[lst]+1;
	fail[ths]=fail[now]=dup;
	while ((lst)&&(son[lst][ch]==ths))
	{
		son[lst][ch]=dup;
		lst=fail[lst];
	}
	lst=now;
}
int x[2000100],q[2000100];
void build(int n)
{
	tt=lst=1;
	for (int i=1;i<=n;i++)
	{
		int ch=st[i]-'a';
		extend(ch);
	}
	for (int i=1;i<=tt;i++) q[len[i]]++;
	for (int i=1;i<=n;i++) q[i]+=q[i-1];
	for (int i=1;i<=tt;i++) x[q[len[i]]--]=i;
	for (int i=tt;i>=1;i--) size[fail[x[i]]]+=size[x[i]];
}
bool tag[2000100];
vector <int> vec;
void work(int n)
{
	long long ans=0;
	for (int i=1;i<=n;i++) st[n+i]=st[i];
	int now=1,ths=0;
	for (int i=1;i<=2*n-1;i++)
	{
		int ch=st[i]-'a';
		if (son[now][ch]) {now=son[now][ch];ths++;}
		else 
		{
			while ((now)&&(!son[now][ch])) now=fail[now];
			if (!now) {ths=0;now=1;}
			else {ths=len[now]+1;now=son[now][ch];}
		}
		if (ths>n) {if (len[fail[now]]+1>n) now=fail[now];ths=n;}
		if ((ths==n)&&(!tag[now]))
		{
			tag[now]=true;vec.push_back(now);
			ans+=size[now];
		}
	}
	for (int i=0;i<vec.size();i++) tag[vec[i]]=false;
	vec.clear();
	printf("%lld\n",ans);
}
int main()
{	
	scanf("%s\n",st+1);
	int n=strlen(st+1);
	build(n);
	int q;scanf("%d\n",&q);
	while (q--)
	{
		scanf("%s\n",st+1);
		n=strlen(st+1);
		work(n);
	}
}