#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <stack>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

vector <int> graph[100010];
int x[100010];

void dfs(int v, int c){
    if(x[v] != -1) return;
    x[v] = c;
    int i;
    REP(i,graph[v].size()) dfs(graph[v][i],c+1);
}

int gcd(int a, int b){
    return a ? gcd(b%a,a) : b;
}

int main(void){
    int N,M,i,j,a,b,g=0;
    
    scanf("%d%d",&N,&M);
    REP(i,M){
        scanf("%d%d",&a,&b); a--; b--;
        graph[a].push_back(b);
    }
    
    REP(i,N) x[i] = -1;
    dfs(0,0);
    
    REP(i,N) REP(j,graph[i].size()){
        a = i; b = graph[i][j];
        if(x[a] != -1 && x[b] != -1){
            int tmp = x[b] - x[a] - 1;
            if(tmp < 0) tmp = -tmp;
            if(tmp != 0) g = gcd(g,tmp);
        }
    }
    
    printf("%d\n",g);
    
    int cnt = 0;
    REP(i,N) if(x[i] != -1 && x[i] % g == 0) cnt++;
    printf("%d\n",cnt);
    REP(i,N) if(x[i] != -1 && x[i] % g == 0){
        cnt--;
        printf("%d",i+1);
        if(cnt == 0) printf("\n"); else printf(" ");
    }
    
    return 0;
}
