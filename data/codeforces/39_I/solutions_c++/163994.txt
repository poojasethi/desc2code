
//Tomasz Kulczy≈Ñski
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <numeric>
#include <cmath>
#include <cstdlib>
using namespace std;

#define X first
#define Y second
#define MP make_pair
#define PB push_back
typedef long long ll;
typedef double D;
typedef long double ld;
typedef vector<int> VI;
typedef pair<int,int> PII;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(VAR(i,a);i<=(b);++i)
#define FORD(i,a,b) for(VAR(i,a);i>=(b);--i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define SIZE(a) ((int)((a).size()))
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))
int cond = 1;
#define db(x) {if(cond){cerr << __LINE__ << " " << #x << " " << x << endl; } }
#define dbv(x) {if(cond){cerr << __LINE__ << " " << #x << ": "; FORE(__i,x) cerr << *__i << " "; cerr << endl;} }

VI v[101013];
int c[101013], ret;

int nwd(int a, int b)
{
    if(b < 0) 
        return nwd(a, -b);
    return a?nwd(b%a,a):b;
}

void dfs(int x)
{
    FORE(i, v[x]) if(!c[*i])
    {
        c[*i] = c[x] + 1;
        dfs(*i);
    }
    else ret = nwd(ret, c[x] + 1 - c[*i]);
}

int main()
{
    int n,m;
    scanf("%d %d",&n,&m);
    while(m--)
    {
        int a,b;
        scanf("%d %d",&a,&b);
        v[a].PB(b);
    }
    c[1] = 1;
    dfs(1);
    printf("%d\n",ret);
    int x = 0;
    FOR(i,1,n) if(c[i] % ret == 1 % ret && c[i]) x++;
    printf("%d\n", x);
    FOR(i,1,n) if(c[i] % ret == 1 % ret && c[i]) printf("%d ", i);
    puts("");
    return 0;
}
