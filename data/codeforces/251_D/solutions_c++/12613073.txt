#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
const int maxn=100010,maxk=70;
int64 a[maxn],s; int n;

void init(){
	scanf("%d",&n),s=0;
	for(int i=1;i<=n;++i)
		scanf("%I64d",a+i),s^=a[i];
}

bitset<maxn> w[maxk]; int p[maxn],wn;
bool insert(bitset<maxn> t){
	for(int i=1;i<=n;++i)
		if(p[i]!=-1 && t.test(i)) t^=w[p[i]];
	if(t.count()==1 && t.test(0)) return false;
	if(!t.count()) return true; w[++wn]=t;
	for(int i=1;i<=n;++i)
		if(t.test(i)){ p[i]=wn; break; }
	return true;
}
void gauss(){
	static bitset<maxn> t;
	memset(p,-1,sizeof(p)),wn=0;
	for(int k=63;k>=0;--k){
		if(!((s>>k)&1)){
			t.reset();
			for(int i=1;i<=n;++i)
				if((a[i]>>k)&1) t.set(i);
			t.set(0); if(!insert(t)) t.reset(0),assert(insert(t));
		}
	}
	for(int k=63;k>=0;--k){
		if((s>>k)&1){
			t.reset();
			for(int i=1;i<=n;++i)
				if((a[i]>>k)&1) t.set(i);
			t.reset(0); if(!insert(t)) t.set(0),assert(insert(t));
		}
	}
	static int x[maxn]; memset(x,0,sizeof(x));
	for(int i=n;i>=1;--i)
		if(p[i]!=-1){
			x[i]=w[p[i]].test(0);
			for(int j=n;j>i;--j)
				if(w[p[i]].test(j)) x[i]^=x[j];
		}
	for(int i=1;i<=n;++i)
		if(x[i]) printf("1 "); else printf("2 ");
	printf("\n");
}

int main(){
	init();
	gauss();
	return 0;
}