#include <algorithm>
#include <cstdio>

typedef long long ll;

using namespace std;

const int MAXM = 61;
const int MAXN = 100001;

int n, t;
ll tot_xor;
ll a[MAXN];
int d[MAXM][MAXN/32+1];
int p[MAXM], ans[MAXN], pos[MAXN];

void xorv(int i, int j)
{
 	d[i][j>>5] ^= 1LL<<(j&31);
}

int getv(int i, int j)
{
	return (d[i][j>>5]>>(j&31))&1;
}

int main()
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%I64d", a+i),
		tot_xor ^= a[i];

	for (int i = 59; i >= 0; i--)
		if (tot_xor&(1LL<<i));
		else p[t++] = i;
	for (int i = 59; i >= 0; i--)
		if (tot_xor&(1LL<<i))
			p[t++] = i;

	for (int i = 0; i < 60; i++)
	{
	 	for (int j = 0; j < n; j++)
	 		if (a[j] & (1LL<<p[i]))
		 		xorv(i, j);
		if ((1LL<<p[i])&tot_xor);
		else xorv(i, n);
	}

	for (int i = 0; i < 60; i++)
	{
		int j = 0;
		for (; !getv(i, j) && j < n; j++);

		pos[i] = j;
		if (j == n)
		{
			if (getv(i, n)) xorv(i, n);
		 	continue;
		}

		for (int k = 0; k < 60; k++)
			if (k!=i && getv(k, j))
				for (int q = j>>5; q <= (n>>5); q++)
					d[k][q] ^= d[i][q];
	}

	for (int i = 0; i < 60; i++)
		ans[pos[i]] = getv(i, n);

	for (int i = 0; i < n; i++)
		printf("%d%c", (ans[i]^1)+1, " \n"[i+1==n]);

	return 0;
}
