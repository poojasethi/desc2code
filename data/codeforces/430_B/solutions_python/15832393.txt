# coding: utf-8

	
def eoq(newconj):
	#print newconj
	
	nest = 0
	k = 0
	
	for nn in xrange(len(newconj)-1, 0, -1):
		if newconj[nn][0] == newconj[nn-1][0] and (len(newconj[nn]) > 1 or len(newconj[nn-1]) > 1):
			nest = len(newconj[nn]) + len(newconj[nn-1])
		
			k = nn
			break
				
	if nest == 0:
		return nest
		
	else:
		return eoq(newconj[0:k-1] + newconj[k+1:]) + nest


n, k, x = map(int, raw_input().split())
bos = map(int, raw_input().split())

af = []

final = 0
ndele = False

if n == 2:
	if bos[1] == bos[0] and bos[0] == x:
		est = 2 

if n > 2:
	i = 0
	ultimo = bos[0]
	while i < n-1:
		
		for u in xrange(i, n+1):
			if u == n or bos[u] != ultimo:
				af.append(bos[i:u])				
				i = u
				
			if u != n:
				ultimo = bos[u]

	for conj in xrange(len(af)):
		est = 0
		if af[conj][0] == x and len(af[conj]) == 2:
			est += 2
			
			newconj = af[:conj] + af[conj+1:]
			
			est += eoq(newconj)
			
		if est > final:
			final = est	
print final
