import sys
dbg = False
def calcBoom(row):
    llen = len(row)
    if llen < 3:
        return 0
    if dbg:
        #print row
        pass
    for i in xrange(llen-3):
        if row[i] == row[i+1] == row[i+2] == row[i+3]:
            return 4 + calcBoom(row[:i] + row[i+4:])
        if row[i] == row[i+1] == row[i+2]:
            return 3 + calcBoom(row[:i] + row[i+3:])
    if row[-1]==row[-2]==row[-3]:
        return 3 + calcBoom(row[:-3])
    return 0

def solve(n, k, x, row):
    llen = len(row)
    if llen < 2:
        return 0
    
    strikes = []
    for i in xrange(llen-1):
        if row[i:i+2] == [x, x]:
            strikes.append(i)
    if dbg:
        print strikes
    res = 1
    for strike in strikes:
        boom = calcBoom(row[:strike] + [x] + row[strike:])
        if boom > res:
            res = boom
        if dbg:
            print strike, boom, res

    return res-1

if not dbg:
    n, k, x = map(int, sys.stdin.readline().split())
    row = map(int, sys.stdin.readline().split())
else:
    n, k, x = 6, 2, 2
    row = [1,1,2,2,1,1]
    n, k, x = 50, 2, 1
    row = map(int, "1 1 2 2 1 2 1 1 2 2 1 2 1 2 1 1 2 2 1 2 1 2 2 1 2 1 2 1 2 2 1 1 2 2 1 1 2 2 1 2 1 1 2 1 1 2 2 1 1 2".split())
print str(solve(n, k, x, row))
