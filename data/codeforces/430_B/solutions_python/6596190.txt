import sys
from collections import defaultdict, namedtuple

n,k,x = map(int, sys.stdin.readline().split())

cs = map(int, sys.stdin.readline().split())

class Node(object):
    def __init__(self, color):
        super(Node, self).__init__()
        self.color = color
        self.cnt = 0

    def __repr__(self):
        return "<Node color:%d cnt:%d>" % (self.color, self.cnt)

search = []
balls = []

prev = None
for c in cs:
    if prev:
        if prev.color == c:
            cnt += 1
        else:
            prev.cnt = cnt
            if prev.color == x and prev.cnt == 2:
                search.append(len(balls))
            balls.append(prev)
            
            cur = Node(c)
            prev = cur
            cnt = 1
    else:
        cur = Node(c)
        prev = cur
        cnt = 1

prev.cnt = cnt
if prev.color == x and prev.cnt == 2:
    search.append(len(balls))
balls.append(prev)

max_total = 0
for b in search:
    total = balls[b].cnt
    l = b - 1
    r = b + 1
    while l >= 0 and r < len(balls) \
            and balls[l].color == balls[r].color \
            and balls[l].cnt + balls[r].cnt > 2:
        total += balls[l].cnt + balls[r].cnt
        l -= 1
        r += 1
    max_total = max(max_total, total)

print max_total
