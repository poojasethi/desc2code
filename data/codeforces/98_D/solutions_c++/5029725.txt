#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const int MAX = 30;
vector<pair<int, int> > ans;
vector<int> col[MAX];
int d[MAX];
void move(int n, int s, int t, int h, bool rev)
{
	if (n == 0)
		return;
	if (d[n] == 1 || rev)
	{
		move(n - 1, s, h, t, true);
		for (int i = 0; i < d[n]; i++)
			ans.push_back(make_pair(s, t));
		move(n - 1, h, t, s, true);
	}
	else
	{
		if (n == 1)
		{
			for (int i = 0; i < d[n] - 1; i++)
				ans.push_back(make_pair(s, h));
			ans.push_back(make_pair(s, t));
			for (int i = 0; i < d[n] - 1; i++)
				ans.push_back(make_pair(h, t));
		}
		else
		{
			move(n - 1, s, t, h, true);
			for (int i = 0; i < d[n]; i++)
				ans.push_back(make_pair(s, h));
			move(n - 1, t, s, h, true);
			for (int i = 0; i < d[n]; i++)
				ans.push_back(make_pair(h, t));
			move(n - 1, s, t, h, false);
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int val;
		cin >> val;
		d[val]++;
	}
	vector<int> tmp;
	for (int i = 0; i < MAX; i++)
		if (d[i])
			tmp.push_back(d[i]);
	n = tmp.size();
	for (int i = 0; i < n; i++)
		d[i + 1] = tmp[i];
	move(n, 1, 3, 2, false);
	cout << ans.size() << endl;
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i].first << " " << ans[i].second << endl;
	return 0;
}
	 	   			   		 		 	    		