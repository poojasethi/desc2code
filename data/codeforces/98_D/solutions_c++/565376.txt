#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

const int base = 97, mod = 307;

int a[3][30], an[3];
int rx[2000000], ry[2000000], rn;

void put(int u, int v) {
	rx[rn] = u, ry[rn] = v;
	++rn;
	a[v][an[v]++] = a[u][--an[u]];
}

void rec2(int n, int u, int v) {
	if (n == 0) return;
	
	int w = 3 - u - v;
	int i;
	for (i = 0; i < n && a[u][an[u] - n + i] == a[u][an[u] - n]; ++i);
	
	rec2(n - i, u, w);
	for (int j = 0; j < i; ++j)
		put(u, v);
	rec2(n - i, w, v);		
}

void rec1(int n, int u, int v) {
	if (n == 0) return;

	int w = 3 - u - v;
	
	if (a[u][an[u] - 1] == a[u][an[u] - n]) {   // Case in which disks are of same radius
		for (int i = 0; i < n - 1; ++i)
			put(u, w);
		put(u, v);		
		for (int i = 0; i < n - 1; ++i)
			put(w, v);
	}
	else if (a[u][an[u] - n] != a[u][an[u] - n + 1]) {
		rec2(n - 1, u, w);
		put(u, v);
		rec2(n - 1, w, v);
	}
	else {
		int i;
		for (i = 0; i < n && a[u][an[u] - n + i] == a[u][an[u] - n]; ++i);
		
		rec2(n - i, u, v);	
		rec2(i, u, w);
		rec2(n - i, v, u);
		rec2(i, w, v);
		rec1(n - i, u, v);
	}
}

int main() {
	scanf("%d", &an[0]);
	int i, j, k;
	
	for (i = 0; i < an[0]; ++i)
		scanf("%d", &a[0][i]);
		
	rec1(an[0], 0, 2);		
	
	printf("%d\n", rn);
	for (i = 0; i < rn; ++i)
		printf("%d %d\n", rx[i] + 1, ry[i] + 1);
	return 0;		
}

