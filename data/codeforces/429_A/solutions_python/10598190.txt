# here are the variables
n = 0
graph = [[]] # containing the adjency list of graph
ans = []
mark = []
initV = []
destV = []
# end of variables

def bfs() :
    global graph, ans, initV, destV, mark
    queue = [(0, 0, 0)]
    headQ = 0
    tailQ = 1
    while headQ < tailQ :
        (cur, evens, odds) = queue[headQ]
        headQ += 1
        if initV[cur] ^ (evens % 2) != destV[cur] :
            ans.append(cur)
            evens ^= 1
        for i in range(0, len(graph[cur])) :
            v = graph[cur][i]
            if mark[v] == False :
                queue.append((v, odds, evens))
                tailQ += 1
                mark[v] = True

def input() :
    global graph, initV, destV, n
    [n] = map(int, raw_input().split())
    graph = [[] for i in range(0, n)]
    for i in range(0, n - 1) :
        [u, v] = map(int, raw_input().split())
        u -= 1; v -= 1
        graph[u].append(v)
        graph[v].append(u)
    initV = map(int, raw_input().split())
    destV = map(int, raw_input().split())


def main() :
    input()
    global mark, ans, n
    mark = [False for i in range(0, n)]
    bfs()
    print len(ans)
    for i in range(0, len(ans)) :
        print ans[i] + 1

main()
