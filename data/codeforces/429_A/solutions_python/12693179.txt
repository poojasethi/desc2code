class Solve(object):
	def __init__(self, n, edges, init, goal):
		self.n = n
		self.edges = edges
		self.init = init
		self.goal = goal

	def run(self):
		n = self.n
		edges = self.edges
		init = self.init
		goal = self.goal

		self.rv = []
		self.used = [False] * n
		root = None

		self.level = -1
		self.dfs(1, 0, 0)

	def dfs(self, v, odd, even):
		st = [(v, odd, even, 0)]

		while st:
			v, cur, nxt, u = st.pop(0)
			if ((cur + self.init[v]) & 1) ^ self.goal[v]:
				self.rv.append(v)
				cur += 1
			for e in self.edges[v]:
				if u != e:
					st.insert(0, (e, nxt, cur, v))


def solve():
	n = int(raw_input()) + 1
	edges = {}

	for _ in range(n - 2):
		e, v = map(int, raw_input().split())
		if e in edges:
			edges[e].append(v)
		else:
			edges[e] = [v]
		
		temp = e
		e = v
		v = temp

		if e in edges:
			edges[e].append(v)
		else:
			edges[e] = [v]
		
		
	init = [-1] + map(int, raw_input().split())
	goal = [-1] + map(int, raw_input().split())

	if n - 1 == 1:
		if init[1] != goal[1]:
			print "1\n1"
		else:
			print "0"
		return
	s = Solve(n, edges, init, goal)
	s.run()
	rv = '\n'.join(map(str, s.rv))
	print len(s.rv)
	print rv

if __name__ == '__main__':
	solve()