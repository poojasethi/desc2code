#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;

const int N = (int) 1e5;
vector<int> graph[N], res;
int a[N], b[N];

void dfs(int u, int p, int x, int y) {
	if((a[u] ^ x) != b[u]) {
		x ^= 1;
		res.push_back(u);
	}
	for(int i = 0; i < (int) graph[u].size(); ++i) {
		int v = graph[u][i];
		if(v != p) dfs(v, u, y, x);
	}
}

int main() {
	ios::sync_with_stdio(false);
	int n; cin >> n;
	for(int i = 0; i < n - 1; ++i) {
		int u, v; cin >> u >> v; --u; --v;
		graph[u].push_back(v);
		graph[v].push_back(u);
	}
	for(int i = 0; i < n; ++i) cin >> a[i];
	for(int i = 0; i < n; ++i) cin >> b[i];
	dfs(0, -1, 0, 0);
	printf("%d\n", (int) res.size());
	for(int i = 0; i < (int) res.size(); ++i)
		printf("%d\n", res[i] + 1);
	return 0;
}
