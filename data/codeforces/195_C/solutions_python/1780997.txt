import re
pattTry = re.compile(r' *(try)')
pattThrow = re.compile(r' *(throw) *[(] *(\w+) *[)]')
pattCatch = re.compile(r' *(catch) *[(] *(\w+) *, *"(.+)" *[)]')
patts = [pattTry, pattThrow, pattCatch]

def parse(line):
    # print '|'.join(line)
    for patt in patts:
        g = patt.match(line)
        if g is not None:
            r = g.groups()
            opr = r[0]
            if opr == 'try':
                return opr, []
            elif opr == 'throw':
                return opr, r[1:]
            elif opr == 'catch':
                return opr, r[1:]
            break

n = int(raw_input())
def solve():
    th = None
    level = None
    for i in xrange(n):
        line = raw_input()
        if not line.strip(): continue
        opr, args = parse(line)
        if opr == 'try':
            if th is not None:
                level += 1
        elif opr == 'throw':
            if th is None:
                th = args[0]
                level = 0
                # print 'throw', th, level
        elif opr == 'catch':
            if th is not None:
                if level == 0:
                    type, msg = args
                    if type == th:
                        print msg
                        th = level = None
                else:
                    level -= 1
    if th is not None:
        print "Unhandled Exception"
solve()
