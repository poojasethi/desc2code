#include <cstdio>
#include <stack>
#include <iostream>
#include <string>
#include <cstring>

using namespace std;

struct Node
{
	string s; int c;
	Node(string p, int q): s(p), c(q) {}
};

stack<Node> s, t;
int n;

int deal(char str[], string& cmd, string& out)
{
	for(int i=0, flag=0; i<strlen(str); i++)
	{
		if(str[i]=='"') { flag=1-flag; continue; }
		if(flag || str[i]!=' ') cmd+=str[i];
	}
	if(cmd.find("throw(")<cmd.size()) { cmd.erase(0, 6), cmd.erase(cmd.size()-1, 1); return 0; }
	if(cmd.find("catch(")<cmd.size()) 
	{
		cmd.erase(0, 6), cmd.erase(cmd.size()-1, 1);
		for(int i=0; cmd[i]!=','; i++) out+=cmd[i];
		cmd.erase(0, out.size()+1); swap(cmd, out);
		return 1;
	}
	if(cmd=="try") return 2;
	return -1;
}
		

int main()
{
	char str[111111];
	scanf("%d\n", &n);
	
	for(int i=0; i<n; i++) 
	{
		gets(str);
		string cmd="", out="";
		int x=deal(str, cmd, out);
		if(x==2) { Node a(cmd, x); s.push(a); }
		if(x==0) { Node a(cmd, x); s.push(a); }
		if(x==1)
		{
			while(s.top().c!=2)
			{
				Node q=s.top(); s.pop();
				if(q.s==cmd) { cout<<out<<endl; return 0; }
				t.push(q);
			}
			s.pop();
			while(!t.empty()) s.push(t.top()), t.pop();
		}
	}

	cout<<"Unhandled Exception"<<endl;

	return 0;
}
		       				 	 			  	   	