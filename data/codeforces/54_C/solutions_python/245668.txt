

stdin_flag=1
if not stdin_flag:
  read_line_index=0
  testcasefilename="test.txt"
  Stestcase=open(testcasefilename).read()
  read_line_datas=Stestcase.split("\n")


def debugs(s):
  if not stdin_flag:
    print ";;;",s

#####################################
######################################

def read_line():
  global read_line_index
  if stdin_flag:
    return raw_input()
  else:
    s=read_line_datas[read_line_index]
    read_line_index+=1
    return s

def answer():
  if stdin_flag:
    return solve()
  else:
    while read_line_proceed():
      solve()
      

def read_line_proceed():
  global read_line_index
  print"##################"
  while 1:
    if read_line_index>= len (read_line_datas ):
      return False
    if read_line_datas[read_line_index]=="%%%":
      read_line_index+=1
      return True
    read_line_index+=1


def readint():
  return int (read_line() )


def readints():
  return map(int, read_line().split(" "))

def reads():
  return read_line()




###############################################################
###############################################################
###############################################################
###############################################################
###############################################################
###############################################################
###############################################################
###############################################################

def compute(m,n,d):
  pass

def poo(a):
  n=1
  while n<=a:
    n*=10
  n/=10
  x=(n-1)/9
  if a<2*n:
    return x+(a-n)
  else:
    return x+n


def po(a1,a2):
  y=poo(a2+1)-poo(a1)
  return (y+0.0)/(a2+1-a1)

def mul(res,a):
  return [(1-a)*i+j*a for i,j in zip(res+[0], [0]+res) ]

def solve():
  n=readint()
  m=[]
  for _ in xrange(n):
    a1,a2=readints()
    m.append(po(a1,a2))
    debugs("%s %s %s"%(a1,a2,po(a1,a2) ))
  res=[1]
  for k in m:
    res=mul(res,k)

  debugs(res)
  target=(len(m)*readint()-1)/100+1
  debugs(target)
  print sum(res[target:])

def test():
  pass

test()
answer()
