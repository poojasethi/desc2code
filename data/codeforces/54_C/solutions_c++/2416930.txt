#include <iostream>
using namespace std;

typedef long long ll;
const int MAXn = 1000+10;
ll L[MAXn], R[MAXn];
ll C[MAXn];
double P[MAXn];
double dp[MAXn][MAXn];
int n, k;

int main() {
	ios::sync_with_stdio(false);
	cin >> n;
	for(int i = 0; i < n; i++)
		cin >> L[i] >> R[i];
	cin >> k;
	for(int i = 0; i < n; i++) {
		ll t = 1;
		while(L[i]/t > 1)
			t *= 10;
		while(t < R[i]) {
			ll mn = 0, mx = t-1;
			if(L[i] / t == 1)
				mn = L[i]%t;
			if(R[i] / t == 1)
				mx = R[i]%t;
			C[i] += mx - mn + 1;
			t *= 10;
		}
		if(R[i] == t)
			C[i]++;
		P[i] = C[i]/double(R[i]-L[i]+1);
	}
	dp[0][1] = P[0];
	dp[0][0] = 1.0-P[0];
	for(int i = 1; i < n; i++) {
		dp[i][0] = (1-P[i]) * dp[i-1][0];
		for(int j = 1; j <= i+1; j++)
			dp[i][j] = (1-P[i])*dp[i-1][j] + P[i]*dp[i-1][j-1];
	}
	double ans = 0;
	for(int i = 0; i <= n; i++)
		if(i * 100 >= k * n)
			ans += dp[n-1][i];
	cout.precision(15);
	cout << ans << endl;
	return 0;
}
