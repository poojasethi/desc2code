#include <stdio.h>
#include <string.h>
#include <math.h>
#define OJ

typedef __int64 LL;

double dp[1001][1001];
LL l[1001] , r[1001];

int n , k;

LL num(LL x)
{
	LL ret = 0;
	for ( LL i = 1;x/i!=0;i *= 10)	{
		if ( x/i == 1)	{
			ret += x%i+1;
			break;
		}
		ret += i;
	}
	return ret;
}
double p(LL l , LL r)
{
	return (num(r)-num(l-1))*1.0/(r-l+1);
}
double solve()
{
	memset(dp , 0 , sizeof(dp));
	dp[0][0] = 1.0;
	for ( int i = 1;i <= n;i ++ )	{
		double one = p(l[i] , r[i]);
		double none = 1-one;
		dp[i][0] = dp[i-1][0]*none;
		for ( int j = 1;j <= k;j ++ )	{
			dp[i][j] = dp[i-1][j-1]*one+dp[i-1][j]*none;
		}
	}
	double ret = 0.0;
	for ( int i = 0;i < k;i ++ )	{
		ret += dp[n][i];
	}
	return 1.0-ret;
}
int main()
{
	LL x;

	while (scanf("%d",&n)!=EOF)	{
		for ( int i = 1;i <= n;i ++ )	{
			scanf("%I64d%I64d" , &l[i] , &r[i]);
		}
		scanf("%d" , &k);
		k = (int)ceil(n*k/100.0);
		printf("%.12lf\n" , solve());
	}
	return 0;
}