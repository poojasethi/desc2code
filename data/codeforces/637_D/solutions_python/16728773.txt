import sys
import pdb
import math
import operator

from collections import OrderedDict

insys = sys.stdin

def msort(arr, l, r, reverse=True):
    if r - l <= 1:
        return

    mid = (l + r) // 2
    msort(arr, l, mid, reverse=reverse)
    msort(arr, mid, r, reverse=reverse)


    left, right = arr[l:mid], arr[mid:r]
    i, j = 0, 0 
    for it in xrange(l, r):
        if j >= len(right) or (i < len(left) and (left[i] > right[j] if reverse else left[i] < right[j])):
            arr[it] = left[i]
            i += 1
        else:
            arr[it] = right[j]
            j += 1


def gin(func=int):
    if func is None:
        return raw_input().split()

    return map(func, raw_input().split())


def main():
    n, m, s, d = gin()
    arr = sorted(gin())
    if arr[0] - s <= 0 or d < 2:
        print 'IMPOSSIBLE'
        return

    memo = set([arr[0]])
    ans = [[0, 2, 0]]
    for i in xrange(1, n):
        memo.add(arr[i])
        if arr[i] - s <= arr[ans[-1][2]] + 1 or arr[i] - s in memo:
            ans[-1][1] += arr[i] - arr[ans[-1][2]]
            if ans[-1][1] > d:
                print 'IMPOSSIBLE'
                return

            ans[-1][2] = i
        else:
            if arr[i] - s <= arr[ans[-1][2]] + 1:
                print 'IMPOSSIBLE'
                return

            ans.append([i, 2, i])

    cur = 0
    for f, l, last in ans:
        print 'RUN {}'.format(arr[f] - cur - 1)
        print 'JUMP {}'.format(l)

        cur = arr[last] + 1

    if cur != m:
        print 'RUN {}'.format(m - cur)


if __name__ == '__main__':
    main()

