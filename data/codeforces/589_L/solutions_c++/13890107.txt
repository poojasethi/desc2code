#include <bits/stdc++.h>

using namespace std;

#define endl '\n'
#define LEN(s) ((int)(s).length())

typedef double ld;
const double EPS = 1e-7;

const int MAXN = 333;
const int MAXM = 333;
const int MAXK = 99;

char sym[MAXK], board[MAXN][MAXM];
bool placed[MAXK];
int n, m, k, idx[256];
string adj[MAXK][4];
int sz[MAXK], row[MAXK], col[MAXK];

int N, M;
ld G[2*MAXK][MAXK];

void print_mat() {
    cout << endl;
    for (int i = 0; i < N; i++)
        for (int j = 0; j < M+1; j++)
            cout << G[i][j] << " \n"[j==M];
    cout << endl;
}

void gauss() {
    for (int c = 0; c < M; c++) {
        int sw = c;
        for (int r = c+1; r < N; r++)
            if (fabs(G[r][c]) > fabs(G[sw][c]))
                sw = r;
        if (sw != c)
            for (int i = 0; i <= M; i++)
                swap(G[sw][i], G[c][i]);
                
        assert(fabs(G[c][c]) > EPS);
        
        ld den = ld(1) / G[c][c];
        for (int i = c; i <= M; i++)
            G[c][i] *= den;
        //assert(fabs(G[c][c]-1) <= EPS);

        for (int r = c+1; r < N; r++)
            if (fabs(G[r][c]) > EPS) {
                den = ld(1) / G[r][c];
                for (int i = c; i <= M; i++)
                   G[r][i] = G[r][i] * den - G[c][i];
            }
   }
   
   for (int r = M-1; r >= 0; r--)
        for (int i = r+1; i < M; i++) {
            G[r][M] -= G[r][i] * G[i][M];
            G[r][i] = 0;
        }
}

bool mk[MAXK][4];

void find_sizes() {
    N = 0;
    M = k;
    for (int d = 0; d < 4; d++) {
        for (int i = 0; i < k; i++) {
            int b = idx[(int)adj[i][d][0]];
            if (b == k)
                G[N][i] = 1;
        }
        G[N][M] = (d % 2 == 0) ? m : n;
        N++;
    }
    
    queue<int> q;
    for (int i = 0; i < k; i++) {
        for (int d = 0; d < 2; d++) {
            int f = idx[(int)adj[i][d][0]];
            if (f == k || mk[i][d])
                continue;
            
            //cout << sym[i] << " " << d << endl;
            q.push(i);
            mk[i][d] = true;
            G[N][i] = 1;
            while (!q.empty()) {
                int b = q.front();
                q.pop();
                int dir = (G[N][b] == 1) ? d : (d + 2) % 4;
                int opdir = (dir + 2) % 4;
                for (int j = 0; j < LEN(adj[b][dir]); j++) {
                    int w = idx[(int)adj[b][dir][j]];
                    if (!mk[w][opdir]) {
                        G[N][w] = -G[N][b];
                        mk[w][opdir] = true;
                        q.push(w);
                    }
                }
            }
            N++;
        }
    }
    //print_mat();
    gauss();
    //print_mat();
    for (int i = 0; i < k; i++)
        sz[i] = (int)(G[i][M]+0.5);
}

void place(int block) {
    placed[block] = true;
    
    int x = idx[(int)adj[block][1][0]];
    int y = idx[(int)adj[block][2][0]];
    row[block] = row[y] - sz[block];
    col[block] = col[x] - sz[block];
    
    for (int r = row[block]; r < row[y]; r++)
        for (int c = col[block]; c < col[x]; c++)
            board[r][c] = sym[block];
    //cout << sym[block] << "(" << row[block] << ", " << col[block] << ")" << endl;
}

bool fixed(int block) {
    for (int d = 1; d <= 2; d++)
        for (int i = 0; i < LEN(adj[block][d]); i++) {
            int b = idx[(int)adj[block][d][i]];
            if (!placed[b])
                return false;
        }
    return true;
}

void make_board() {
    int bleft = k;
    while (bleft > 0) {
        for (int i = 0; i < k; i++)
            if (!placed[i] && fixed(i)) {
                place(i);
                bleft--;
            }
        //for (int i = 0; i < k; i++)
            //cout << sym[i] << " " << fixed(i) << endl;
        //system("PAUSE");
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    //freopen("L.out", "w", stdout);
    
    cin >> n >> m >> k;
    for (int i = 0; i < k; i++) {
        cin >> sym[i];
        for (int d = 0; d < 4; d++)
            cin >> adj[i][d];
            
        idx[(int)sym[i]] = i;
    }
    
    idx[126] = k;
    find_sizes();
    
    row[k] = n;
    col[k] = m;
    placed[k] = true;
    
    make_board();
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++)
            cout << board[i][j];
        cout << endl;
    }
}
