from fractions import gcd
from collections import defaultdict
def do_rev(x):
	if x == 0: return 0
	r = int(str(x)[::-1])
	g = gcd(x, r)
	return (x / g, r / g)

(maxx, maxy, w) = map(int, raw_input().split())
rev = [do_rev(x) for x in xrange(max(maxx, maxy) + 1)]

ab = defaultdict(int)
ba = defaultdict(int)

for x in xrange(1, maxx + 1):
	ab[rev[x]] += 1


r = 0
cury = 0
res = (maxx, maxy)

def relax(x, y):
	global res
	if res[0] * res[1] > x * y:
		res = (x, y)

def inc_y(x):
	global r, cury
	for y in xrange(cury + 1, maxy + 1):
		(b, a) = rev[y]
		ba[(b, a)] += 1
		r += ab[(a, b)]
		if r >= w:
			cury = y
			relax(x, y)
			return
	cury = maxy

inc_y(maxx)
if r < w:
	print -1
	exit(0)


for x in xrange(maxx, 0, -1):
	(a, b) = rev[x]
	ab[(a, b)] -= 1
	r -= ba[(b, a)]
	if r >= w:
		relax(x - 1, cury)
		continue
	inc_y(x - 1)

print "%d %d" % res
