#include <algorithm>
#include <iostream>
#include <map>
#include <utility>
using namespace std;

const int INF = 0x7FFFFFFF;

int r, c, w, answerx, answery;
map < pair < int, int >, int > mapx, mapy;

inline int rev(int val)
{
	int result = 0;
	while (val) {
		result = result * 10 + val % 10;
		val /= 10;
	}
	return result;
}

inline pair < int, int > frac(int p, int q)
{
	int r = __gcd(p, q);
	return make_pair(p / r, q / r);
}

inline int input()
{
	cin >> r >> c >> w;
	return 0;
}

inline int solve()
{
	for (int y = 1; y <= c; ++ y)
		++ mapy[frac(rev(y), y)];

	long long total = 0;
	answerx = answery = INF;

	for (int x = 1, y = c; x <= r; ++ x) {
		total += mapy[frac(x, rev(x))];
		++ mapx[frac(x, rev(x))];

		while (total - mapx[frac(rev(y), y)] >= w) {
			total -= mapx[frac(rev(y), y)];
			-- mapy[frac(rev(y), y)];
			-- y;
		}

		if (total >= w && (long long)x * y < (long long)answerx * answery) {
			answerx = x;
			answery = y;
		}
	}

	return 0;
}

inline int output()
{
	if (answerx < INF) {
		cout << answerx << ' ' << answery << endl;
	} else {
		cout << -1 << endl;
	}
	return 0;
}

int main()
{
	input();
	solve();
	output();
	return 0;
}
