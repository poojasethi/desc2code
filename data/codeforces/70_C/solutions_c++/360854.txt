#include <stdio.h>
#include <algorithm>
#include <map>
#include <vector>

const int kMaxN = 100001;

std::map<long long, int> left, right;

inline int Rev(int x) {
  int result = 0;
  while (x) {
    result = result * 10 + x % 10;
    x /= 10;
  }
  return result;
}

inline int GCD(int a, int b) {
  if (b == 0) return a;
  return GCD(b, a % b);
}

inline long long GetID(int a, int b) {
  int g = GCD(a, b);
  return a / g * 1000000LL + b / g;
}

int main() {
  int maxx, maxy, w;
  scanf("%d%d%d", &maxx, &maxy, &w);
  for (int i = 1; i <= maxy; ++i) ++right[GetID(i, Rev(i))];
  int resa = 1000000, resb = 1000000, tot = 0;
  for (int i = 1; i <= maxx; ++i) {
    long long id = GetID(Rev(i), i);
    tot += right[id];
    ++left[id];
    if (tot >= w) {
      do {
        id = GetID(maxy, Rev(maxy));
        if (tot - left[id] < w) break;
        tot -= left[id];
        --right[id];
        --maxy;
      } while (maxy > 0);
    }
    if (tot >= w && (long long) i * maxy < (long long) resa * resb) {
      resa = i;
      resb = maxy;
    }
  }
  if (resa == 1000000) {
    puts("-1");
  } else {
    printf("%d %d\n", resa, resb);
  }
  return 0;
}
