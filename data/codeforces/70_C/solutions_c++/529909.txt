#include <iostream>
#include <map>

using namespace std;

typedef pair<int,int> frac;

long long rev(int a)
{
	long long b = 0;
	while (a != 0)
	{
		b = b * 10 + a % 10;
		a /= 10;
	}

	return b;
}

int gcd(int a, int b)
{
	if (b == 0)
		return a;
	else
		return gcd(b, a % b);
}

frac make_frac(int i)
{
	int r = rev(i);
	int g = gcd(i, r);
	return make_pair(i / g, r / g);
}

frac swap_frac(frac f)
{
	return make_pair(f.second, f.first);
}

int main(int argc, char* argv[])
{
	int mx, my, w;
	cin >> mx >> my >> w;

	map<frac,int> dx, dy;

	for (int y = 1; y <= my; y++)
	{
		dy[make_frac(y)]++;
	}

	int y = my;
	int lucky = 0;
	int rx = 0, ry = 0;

	for (int x = 1; x <= mx; x++)
	{
		frac fx = swap_frac(make_frac(x));
		frac fy = make_frac(y);

		lucky += dy[fx];
		dx[fx]++;

		while (lucky - dx[fy] >= w)
		{
			dy[fy]--;
			lucky -= dx[fy];
			y--;
			fy = make_frac(y);
		}

		if ((lucky >= w) && ((rx == 0) || ((long long)x * y < (long long)rx * ry)))
		{
			rx = x;
			ry = y;
		}
	}

	if (rx != 0)
		cout << rx << " " << ry << endl;
	else
		cout << -1 << endl;

	return 0;
}
