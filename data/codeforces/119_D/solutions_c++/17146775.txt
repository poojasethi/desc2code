#include <bits/stdc++.h>
using namespace std;
#define N 1000005
string a,b,s1,s2;
int n;
int z[2*N];
int lps[2*N];
void prefix()
{
	lps[0] = 0;
	int j = 0;
	for(int i=1;i<2*n+1;i++)
	{
		while(j > 0 && s1[j] != s1[i])
			j = lps[j-1];
		if(s1[j] == s1[i])j++;
		lps[i] = j;
	}
	return;
}
// z-algorithm O(n) time complexity
void calZ()
{
// longest substring starting at k which is also a prefix of the string
	z[0] = 0;	
	for(int i=1,l=0,r=0;i<2*n+1;i++)
	{
		if(i<=r)
			z[i] = min(z[i-l] , r-l+1);
		while(i+z[i] < 2*n+1 && s2[z[i]] == s2[i+z[i]])
			z[i]++;
		if(i+z[i]-1 > r)
		{
			l = i;
			r = i+z[i]-1;
		}
	}
	return;
}

int main()
{
	getline(cin, a);
	getline(cin, b);
	//cout<<a.length()<<" "<<b.length()<<"\n";
	if(a.length() != b.length()){
		puts("-1 -1");
		return 0;
	}
	
	n = a.length();
	
	s1 = a;
	reverse(s1.begin(),s1.end());
	s1 += '\0' + b;
	
	s2 = b + '\0' + a;
	
	calZ();
	prefix();
	int x = -1;
	int y = -1;
	for(int i=0;i<n-1;i++)
	{
		if(a[i] != b[n-1-i])break;
		int prelen = lps[2*n - i - 1]; 
		if(z[n+i+2] >= n - (i+1) - prelen)
		{
			x = i;
			y = n - prelen;
		}
	}
	cout<<x<<" "<<y<<"\n";
	return 0;
}