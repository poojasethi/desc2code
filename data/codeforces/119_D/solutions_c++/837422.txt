#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <bitset>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li       	long long int
#define rep(i,to)	for(li i=0;i<((li)(to));++i)
#define pb       	push_back
#define sz(v)    	((li)(v).size())
#define bit(n)   	(1ll<<(li)(n))
#define all(vec)	(vec).begin(),(vec).end()
#define each(i,c)	\
for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)



#define MAX 1000005
#define SEED 1007
char a[MAX],b[MAX];
li p[MAX],ha[MAX],hb[MAX],ah[MAX];
li best[MAX];

void kill(){
	cout<<-1<<" "<<-1<<endl;
	exit(0);
}

li get(li num,li low){
	return num*p[MAX-low-1];
}

int main(){
	gets(a);
	gets(b);
	li n=strlen(a);
	if(strlen(a)!=strlen(b)) kill();
	p[0]=1;
	for(li i=1;i<=MAX;i++) p[i]=p[i-1]*SEED;
	for(li i=1;i<=n;i++) ha[i]=ha[i-1]+a[i-1]*p[i];
	for(li i=1;i<=n;i++) hb[i]=hb[i-1]+b[i-1]*p[i];
	for(li i=1;i<=n;i++) ah[i]=ah[i-1]+a[n-i]*p[i];
	li cnt=0;
	for(li i=0;i<=n;i++){
		li low=0,high=n-i+1;
		while(low+1<high){
			li mid=(low+high)/2;
			if(get(hb[mid+i]-hb[i],i)==get(ah[mid],0)) low=mid;
			else high=mid;
		}
		while(cnt<=low+i) best[cnt++]=i;
	}
	
	li mini=bit(60),maxi=bit(60);
	for(li i=1;i<n;i++){
		li least=best[n-i];
		if(a[i-1]!=b[n-i]) break;
		if(n<=least+i) continue;
		if(get(hb[least],0)==get(ha[least+i]-ha[i],i)){
			mini=i-1;
			maxi=i+least;
		}
	}
	if(mini==bit(60)) kill();
	cout<<mini<<" "<<maxi<<endl;
}
