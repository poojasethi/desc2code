#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string>
#include <iostream>

using namespace std;

const int N = 1000010;

string a, b;
int p[N], z[N], L[N], R[N], n;

void KMP()
{
	int j, i;
	string c = a;
	reverse(c.begin(), c.end());
	p[0]=j=0;
	for (i=1; i<n; ++i)
	{
		while (j && c[j]!=c[i]) j=p[j-1];
		if (c[j]==c[i]) ++j;
		p[i]=j;
	}
	j=0;
	for (i=0; i<n; ++i)
	{
		while (j && b[i]!=c[j]) j=p[j-1];
		if (b[i]==c[j]) ++j;
		L[i]=j;
	}
}
void exKMP()
{
	int k, p, i, j;
	for (j = 0; j + 1 < n && b[j] == b[j+1]; ++j);
	z[1] = p = j; k = 1;
	for (i = 2; i < n; ++i)
		if (z[i - k] < p - i + 1) z[i] = z[i - k];
		else
		{
			for (j = max(0, p - i + 1); i + j < n && b[i + j] == b[j]; ++j);
			z[i] = j; k = i; p = i + j - 1;
		}
	for (j = 0; j < n && a[j] == b[j]; ++j);
	R[0] = j; k = 0; p = j - 1;
	for (i = 1; i < n; ++i)
		if (z[i - k] < p - i + 1) R[i] = z[i - k]; 
		else
		{
			for (j = max(0, p - i + 1); i + j < n && a[i + j] == b[j]; ++j);
			R[i] = j; k = i; p = i + j - 1;
		}
}
int main()
{
	getline(cin, a);
	getline(cin, b);
	if(a.length() != b.length())
	{
		puts("-1 -1");
		exit(0);
	}
	n = a.length();
	exKMP();
	KMP();
	int ii = -1, jj = -1;
	for (int i=0; i+1<n && a[i]==b[n-1-i]; ++i)
		if (R[i+1]>=n-L[n-2-i]-i-1) ii=i, jj=n-L[n-2-i];
	printf("%d %d\n",ii,jj);
	return 0;
}


