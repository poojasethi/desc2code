#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long LL;
const int Maxn=1000000;
const LL P1=7, P2=13, Mod1=100000007, Mod2=300000017;
string s,a,b;
int n,p[Maxn*2+1];
LL base1[Maxn],base2[Maxn];
struct {LL x,y;} wa[Maxn],wb[Maxn];

void kmp()
{
    s=a;
    reverse(s.begin(),s.end());
    s+=char(31)+b;
    p[0]=0;
    int j=0;
    for (int i=1; s[i]; ++i)
    {
        while (j && s[j]!=s[i]) j=p[j-1];
        if (s[j]==s[i]) ++j;
        p[i]=j;
    }
}

void getweight()
{
    base1[0]=base2[0]=1;
    wa[0].x=wa[0].y=a[0];
    wb[0].x=wb[0].y=b[0];
    for (int i=1; i<n; ++i)
    {
        base1[i]=base1[i-1]*P1%Mod1, base2[i]=base2[i-1]*P2%Mod2;
        wa[i].x=(wa[i-1].x*P1+a[i])%Mod1; wa[i].y=(wa[i-1].y*P2+a[i])%Mod2;
        wb[i].x=(wb[i-1].x*P1+b[i])%Mod1; wb[i].y=(wb[i-1].y*P2+b[i])%Mod2;
    }
}

int main()
{
    getline(cin,a);
    getline(cin,b);
    if (a.size()!=b.size())
    {
        printf("-1 -1\n"); return 0;
    }
    n=a.size();
    kmp();
    getweight();
    LL wa1,wa2,wb1,wb2;
    int j, ii=-1, jj=-1;
    for (int i=0; i+1<n && a[i]==b[n-1-i]; ++i)
    {
        j=n-p[n*2-i-1];
        if (j==i+1) {ii=i, jj=j; continue;}
        wa1=((wa[j-1].x-wa[i].x*base1[j-i-1])%Mod1+Mod1)%Mod1;
        wa2=((wa[j-1].y-wa[i].y*base2[j-i-1])%Mod2+Mod2)%Mod2;
        wb1=wb[j-i-2].x, wb2=wb[j-i-2].y;
        if (wa1==wb1 && wa2==wb2) ii=i, jj=j;
    }
    printf("%d %d\n",ii,jj);
    return 0;
}
