#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int maxn=1000005;

int n, rf[maxn], tg[maxn], hs[maxn], ht[maxn], pow[maxn];
char r[maxn], s[maxn], t[maxn];

void KMP(char s[], char t[], int f[], int g[])
{
	for (int i=2,j=0;i<=n;i++)
	{
		while (j && s[j+1]!=s[i]) j=f[j];
		if (s[j+1]==s[i]) j++;
		f[i]=j;
	}
	for (int i=1,j=0;i<=n;i++)
	{
		while (j && s[j+1]!=t[i]) j=f[j];
		if (s[j+1]==t[i]) j++;
		g[i]=j;
	}
}

void hash()
{
	pow[0]=1;
	for (int i=1;i<=n;i++)
	{
		pow[i]=pow[i-1]*257;
		hs[i]=hs[i-1]*257+s[i];
		ht[i]=ht[i-1]*257+t[i];
	}
}

bool check(int i, int j)
{
	return hs[j-1]-hs[i]*pow[j-i-1]==ht[j-i-1];
}

int main()
{
	fgets(s+1,maxn,stdin);
	fgets(t+1,maxn,stdin);
	n=strlen(s+1);
	if (!t[n] || t[n+1]) return printf("-1 -1\n"), 0;
	s[n]=t[n]=0, n--;
	for (int i=1;i<=n;i++) r[i]=s[n-i+1];
	KMP(r,t,rf,tg);
	hash();
	int p(0), q(0);
	for (int i=1;i<n;i++)
	{
		if (s[i]!=t[n-i+1]) break;
		if (tg[n-i] && check(i,n-tg[n-i]+1))
			p=i, q=n-tg[n-i]+1;
	}
	printf("%d %d\n",p-1,q-1);
	return 0;
}
