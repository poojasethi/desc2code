#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int Maxn=1000001;
char a[Maxn],b[Maxn],c[Maxn];
int n,i,j,p[Maxn],q[Maxn],z[Maxn],y[Maxn];

void kmp()
{
	memcpy(c,a,sizeof a);
	reverse(c,c+n);
	p[0]=j=0;
	for (i=1; i<n; ++i)
	{
		while (j && c[j]!=c[i]) j=p[j-1];
		if (c[j]==c[i]) ++j;
		p[i]=j;
	}
	j=0;
	for (i=0; i<n; ++i)
	{
		while (j && b[i]!=c[j]) j=p[j-1];
		if (b[i]==c[j]) ++j;
		q[i]=j;
	}
}

void exkmp()
{
	int k,p;
	for (j=0; j+1<n && b[j]==b[j+1]; ++j);
	z[1]=p=j; k=1;
	for (i=2; i<n; ++i)
		if (z[i-k]<p-i+1) z[i]=z[i-k]; else
		{
			for (j=max(0,p-i+1); i+j<n && b[i+j]==b[j]; ++j);
			z[i]=j; k=i; p=i+j-1;
		}
	for (j=0; j<n && a[j]==b[j]; ++j);
	y[0]=j; k=0; p=j-1;
	for (i=1; i<n; ++i)
		if (z[i-k]<p-i+1) y[i]=z[i-k]; else
		{
			for (j=max(0,p-i+1); i+j<n && a[i+j]==b[j]; ++j);
			y[i]=j; k=i; p=i+j-1;
		}
}

int main()
{
	gets(a); gets(b);
	n=strlen(a);
	if (n!=strlen(b)) {puts("-1 -1"); return 0;}
	kmp();
	exkmp();
	int ii=-1, jj=-1;
	for (i=0; i+1<n && a[i]==b[n-1-i]; ++i)
		if (y[i+1]>=n-q[n-2-i]-i-1) ii=i, jj=n-q[n-2-i];
	printf("%d %d\n",ii,jj);
	return 0;
}
