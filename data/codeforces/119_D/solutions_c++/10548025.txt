#include <bits/stdc++.h>

using namespace std;

#define dbgs(x) cerr << (#x) << " --> " << (x) << ' '
#define dbg(x) cerr << (#x) << " --> " << (x) << endl

#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)

#define type(x) __typeof(x.begin())

#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)

#define pb push_back
#define mp make_pair

#define nd second
#define st first

#define endl '\n'

typedef pair < int ,int > pii;

typedef long long ll;

const int inf = 1e9, mod = 1e9+7;
const int N = 2e6+5;

int i, j, k, n, m, h1[N], h2[N], fail[N], P[N];

string s, s2;

int get1(int x,int y){ return h1[y] - P[y-x+1] * h1[x-1]; }
int get2(int x,int y){ return h2[x] - P[y-x+1] * h2[y+1]; }

int main(){

	ios::sync_with_stdio(false);	

	getline(cin, s );
	getline(cin, s2);

	if(s.size() != s2.size()){ cout << "-1 -1" << endl; return 0; }

	reverse(s.begin(),s.end()); 

	n = s.size();
	
	s = '0' + s + '\0' + s2;

	P[0] = 1; FOR(i,1,2*n+1) P[i] = P[i-1] * 257;
	FOR(i,1,2*n+1) h1[i] = h1[i-1] * 257 + s[i];
	ROF(i,2*n+1,1) h2[i] = h2[i+1] * 257 + s[i];
	
	int p = 0;

	FOR(i,2,2*n+1) {
		while(p && s[p+1] != s[i]) p = fail[p];
		if(s[p+1] == s[i]) p++;
		fail[i] = p;
	}
	
	int p1 = -1, p2 = -1;

	ROF(i,2*n+1,n+3){
		
		if(s[i] != s[i-n-1]) break;

		int s = fail[i-1]; 

		int l = s + 1; int r = i - s - 1;

		if(get1(l,i-n-2) == get2(n+2,r)){ p1 = 2 * n - i + 1; p2 = n - s; }

	}

	cout << p1 << ' ' << p2 << endl;

    return 0;
}
