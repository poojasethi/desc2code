#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

void Z(vector<int> &z, string s) {
  int L = 0, R = 0;
  int n = s.size();
  for (int i = 1; i < n; i++) {
    if (i > R) {
      L = R = i;
      while (R < n && s[R-L] == s[R]) R++;
      z[i] = R-L; R--;
    } else {
      int k = i-L;
      if (z[k] < R-i+1) z[i] = z[k];
      else {
        L = i;
        while (R < n && s[R-L] == s[R]) R++;
        z[i] = R-L; R--;
      }
    }
  }
}

void Build(vector<int> &F, const string &P) {
  F[0] = -1;
  int i = 0, j = -1;
  while (i < P.size()) {
    while (j >= 0 && P[i] != P[j]) j = F[j];
    ++i; ++j;
    F[i] = j;
  }
}

int main() {
  string a, b;
  getline(cin, a);
  getline(cin, b);

  if (a.size() != b.size()) {
    cout << "-1 -1" << endl;
    return 0;
  }

  string ra(a.rbegin(), a.rend()), rb(b.rbegin(), b.rend());
  string lim(1, 10);
  string X = ra + lim + b, Y = rb + lim + a, P = b + lim + a;
  vector<int> FX(X.size() + 1), FY(Y.size() + 1), z(P.size() + 1);
  Build(FX, X); Build(FY, Y); Z(z, P);

  bool found = false;
  for (int i = int(a.size()) - 2; !found && i >= 0; --i) {
    if (FY[i+1+1+b.size()] != i+1) continue;
    int j = a.size() - FX[a.size() - i - 2 + 2 + a.size()];
    if (z[i+1+1+a.size()] < j-i-1) continue;
    cout << i << ' ' << j << endl;
    found = true;
  }
  if (!found)
    cout << "-1 -1" << endl;

  return 0;
}
