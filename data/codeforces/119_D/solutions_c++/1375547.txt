#include <cstdio>
#include <cstring>
#include <vector>
#include <string>
#include <algorithm>
#include <iostream>
using namespace std;

const int N = 1000005;
string a, b;
int p[2*N], q[2*N], from[2*N];

void zvalue(string s, int t[]) {
	t[0] = -1;
	int big=0, last=0;
	for(int i=1;i<(int)s.size();i++) {
		if(last<=i || last<=i+t[i-big]) {
			int j;
			for(j=max(last, i);j<(int)s.size();j++)
				if(s[j]!=s[j-i]) break;
			last=j;
			t[i] = j-i;
			big = i;
		} else t[i] = t[i-big];
	}
	/*for(int i=0;i<(int)s.size();i++)
		printf("%c", s[i]);
	puts("");
	for(int i=1;i<(int)s.size();i++) printf("%d,",t[i]);
	puts("");*/
}

int main(void) {
	getline(cin, a);
	getline(cin, b);
	if(a.size()!=b.size()) { puts("-1 -1"); return 0; }
	zvalue(b+"\1"+a, p);
	string c = a;
	reverse(c.begin(), c.end());
	zvalue(c+"\1"+b, q);
	int n = a.size(), rlimit = n-1;
	for(int i=0;i<n;i++)
		if(b[n-1-i] != a[i]) {
			rlimit = i;
			break;
		}
	vector<pair<int, int> > vp;
	vp.push_back(make_pair(-1, 0));
	for(int i=n+1;i<=n+n;i++)
		if(q[i]+i-n-1 > vp.back().first)
			vp.push_back(make_pair(q[i]+i-n-1, i-n));
	pair<int, int> ret(-1, 1);
	int j = vp.size()-1;
	for(int i=n+2;i<=n+rlimit+1;i++) {
		while(j>=0 && vp[j].first + i-n-1 >= n) {
			//printf("p[%d]=%d\n", i, p[i]);
			if(vp[j].second <= p[i]+1) {
				ret = max(ret, make_pair(i-n-2, -(i-n-2+vp[j].second)));
			}
			--j;
		}
		j=min((int)vp.size()-1, j+1);
	}
	printf("%d %d\n", ret.first, -ret.second);
	return 0;
}


