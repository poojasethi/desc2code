#include<stdio.h>
#include<iostream>
#include<stdlib.h>
#include<cstring>
#define rep(i,s,t) for (int i=s;i<=t;i++)
typedef unsigned long long ULL ;
const int maxn = 800001;
int a[maxn],n,m,i,rank,x,ans,sizes[maxn];
ULL v[maxn],sum,tree[maxn];
using namespace std;
void insert(int k,int l,int r,int p,int x,int rank)
{
	int mid = (l + r) / 2;
	if (l == r)
	{
		sizes[k] = x;
		if (x) tree[k] = rank;else tree[k] = 0;
		return;
	}
	if (p <= mid) insert(k*2,l,mid,p,x,rank);
	else insert(k*2+1,mid+1,r,p,x,rank);
	sizes[k] = sizes[k*2] + sizes[k*2+1];
	tree[k] = tree[k*2+1] + tree[k*2] * v[sizes[k*2+1]];
}
int main()
{
//	freopen("1.in","r",stdin);
	scanf("%d%d",&n,&m);
	ULL hash = 0;
	v[0] = 1;
	rep(i,1,n) 
	{
		scanf("%d",&x);
		a[x] = i;
		v[i] = v[i-1] * 10000007;
		sum += v[i-1];
		hash = hash * 10000007 + x;
	}

	memset(tree,0,sizeof(tree));
	memset(a,0,sizeof(a));

	rep(i,1,m) {scanf("%d",&x);a[x] = i;}
	rep(i,1,n) insert(1,1,m,a[i],1,i);		
	if (tree[1] == hash) ans++;
	rep(i,n+1,m)
	{
		insert(1,1,m,a[i-n],0,0);
		insert(1,1,m,a[i],1,i);
		if (tree[1] == hash + sum * (i-n)) ans++;
	}
	cout << ans << endl;
	fclose(stdin);
	return 0;
}
