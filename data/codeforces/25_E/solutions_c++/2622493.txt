#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

void Build(vector<int> &F, const string &P) {
  F[0] = -1;
  int i = 0, j = -1;
  while (i < P.size()) {
    while (j >= 0 && P[i] != P[j]) j = F[j];
    ++i; ++j;
    F[i] = j;
  }
}

bool KMP(const vector<int> &F, const string &T, const string &P, int &j) {
  int i = 0;
  j = 0;
  while (i < T.size()) {
    while (j >= 0 && T[i] != P[j]) j = F[j];
    i++; j++;
    if (j == P.size()) return true;
  }
  return false;
}

void Extend(string &s1, const string &s2) {
  vector<int> F(s2.size() + 1);
  Build(F, s2);
  int last;
  if (!KMP(F, s1, s2, last)) {
    s1 += s2.substr(last);
  }
}

int Solve(vector<string> in) {
  Extend(in[0], in[1]);
  Extend(in[0], in[2]);
  return in[0].size();
}

int main() {
  vector<string> in(3);
  cin >> in[0] >> in[1] >> in[2];
  sort(in.begin(), in.end());

  int res = 1 << 20;
  do {
    res = min(res, Solve(in));
  } while (next_permutation(in.begin(), in.end()));

  cout << res << endl;

  return 0;
}
