from bisect import bisect_left

def F(query, dic, address):
    rtn = 0
    for i in range(len(address)):
        #print 'i = {}'.format(i)
        char = address[i]
        if char not in dic:
            #print '\t{} is not in {}'.format(char, query)
            rtn += len(address)
        else: 
            index = bisect_left(dic[char], i)
            left = max(index - 1, 0)
            right = min(index, len(dic[char]) - 1)
            #print '\t{} is in {} at {}'.format(char, query, dic[char])
            #print '\t(left, right) = ({}, {})'.format(left, right)
            #print '\t' + str(min(abs(dic[char][left] - i), abs(dic[char][right] - i)))
            rtn += min(abs(dic[char][left] - i), abs(dic[char][right] - i))
    return rtn

if __name__ == '__main__':
    n, k = [int(x) for x in raw_input().rstrip().split()]
    query = raw_input().rstrip()
    addressList = []
    for i in range(n):
        addressList.append(raw_input().rstrip())
    
    dic = {}
    for i in range(len(query)):
        char = query[i]
        if char not in dic:
            dic[char] = [i]
        else:
            dic[char].append(i)

    for address in addressList:
        print F(query, dic, address)