#include <iostream>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cassert>
#include <map>
#include <algorithm>

using namespace std;
const int N = 10005;
typedef long long lag;

int n, m, prev[N];
char s[1005],  buf[1005];
map<int, string> hsh[1005];
string* prv[N];
int dp[N], maxlen;

bool solve(int i) {
	// cout << i << endl;
	if (i == n) return true;
	if (~dp[i]) return dp[i];
	long long h = 0;
	for (int j = 0; i + j < n && j < maxlen; ++j) {
		h = h * 31 + s[i + j];
		// cout << h << endl;
		if (hsh[j].count(h) && solve(i + j + 1)) {
			prv[i] = &hsh[j][h];
			return dp[i] = true;
		}
	}
	return dp[i] = false;
}

int main() {
	scanf("%d", &n);
	scanf("%s", s);
	scanf("%d", &m);
	for (int i = 0; i < m; ++i) {
		scanf("%s", buf);
		int len = strlen(buf);
		maxlen = max(maxlen, len);
		lag h = 0;
		for (int i = len - 1; i >= 0; --i)
			h = h * 31 + tolower(buf[i]);
		hsh[len - 1][h] = buf;
	}
	memset(dp, -1, sizeof dp);
	assert(solve(0));
	for (int i = 0; i < n; i += prv[i]->length()) {
		if (i) cout << ' ';
		cout << *prv[i];
	}
	cout << endl;
}
