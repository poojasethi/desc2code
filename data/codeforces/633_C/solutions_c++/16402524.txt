#include <bits/stdc++.h>
using namespace std;
struct trie {
	int leaf;
	trie *nxt[26];
	trie() : leaf(0) { for(int i = 0; i < 26; i++) nxt[i] = NULL; }
};
trie *root = new trie;
int dp[12345];
int main() {
	ios::sync_with_stdio(false);
	int n, m, i, j, k;
	string s, t;
	vector<string> v;
	cin >> n >> s >> m;
	for(i = 0 ; i < m; i++) {
		cin >> t;
		v.push_back(string(t));
		trie *n = root;
		for(j = 0; j < t.size(); j++) {
			if(t[j] < 'a') t[j] += 32;
			k = t[j] - 'a';
			if(!n->nxt[k]) n->nxt[k] = new trie;
			n = n->nxt[k];
			if(j == t.size() - 1) n->leaf = (i + 1);
		}
	}
	dp[n] = 1;
	for(i = n - 1; i >= 0; i--) {
		if(!dp[i+1]) continue;
		trie *n = root;
		for(j = i; j >= 0; j--) {
			k = s[j] - 'a';
			if(!n->nxt[k]) break;
			n = n->nxt[k];
			if(n->leaf) dp[j] = n->leaf;
		}
	}
	stringstream out;
	for(i = 0; i < n; ) {
		if(i > 0) out << ' ';
		t = v[dp[i] - 1];
		out << t;
		i += t.size();
	}
	cout << out.str() << endl;
	delete root;
	return 0;
}
