#include <set>
#include <map>
#include <vector>
#include <string>
#include <iostream>

using namespace std;

int main()
{
    int n;
    cin >> n;

    map<string, set<string> > paths;
    for (int i = 0; i < n; ++i) {
        string host_path;
        cin >> host_path;
        size_t delim = host_path.find_first_of("/", 7);
        string host, path;

        if (delim == string::npos) {
            host = host_path;
            path = "";
        }
        else {
            host = host_path.substr(0, delim);
            if (delim == host_path.size() - 1) {
                path = "/";
            }
            else {
                path = host_path.substr(delim + 1);
            }
        }

        paths[host].insert(path);
    }

    map<set<string>, vector<string> > groups;

    for (map<string, set<string> >::iterator i = paths.begin(); i != paths.end(); ++i) {
        groups[i->second].push_back(i->first);
    }

    int group_count = 0;
    for (map<set<string>, vector<string> >::iterator i = groups.begin(); i != groups.end(); ++i) {
        if ((i->second).size() > 1) {
            group_count++;
        }
    }

    cout << group_count << endl;

    for (map<set<string>, vector<string> >::iterator i = groups.begin(); i != groups.end(); ++i) {
        if ((i->second).size() > 1) {
            for (size_t j = 0; j < (i->second).size(); ++j) {
                cout << (i->second)[j] << " ";
            }
            cout << endl;
        }
    }    

    return 0;
}