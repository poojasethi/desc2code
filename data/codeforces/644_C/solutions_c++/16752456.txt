#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;

#define fi first
#define se second
#define sz(x) x.size()
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(),(v).end()
#define forn(i,a,n) for(int i = a; i < n; i++)
#define dbg(a) cout << #a << " = " << a << endl

map<string, set<string> > m;

string get_path(string s) {
	s = s = s.substr(s.find('/') + 2);
	if(s.find('/') + 1 == s.length()) {
		return "";
	}
	if(s.find('/') == -1) {
		return "&&";
	}
	s = s.substr(s.find('/') + 1);
	return s;
}

string get_host(string s) {
	s = s.substr(s.find('/') + 2);
	s = s.substr(0, s.find('/'));
	return s;
}
 

int main() {

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	
	int n;
	cin >> n;
	
	for(int i = 0; i < n; i++) {
		string s;
		cin >> s;
		//dbg(get_host(s));
		//dbg(get_path(s));
		m[get_host(s)].insert(get_path(s));
	}
	
	map<string, set<string> >::iterator it = m.begin();
	
	map<set<string>, set<string> > ans;
	
	/*while(it != m.end()) {
		set<string> ms = it->se;
		cout << it->fi << ": "; 
		set<string>::iterator it1 = ms.begin();
		while(it1 != ms.end()) {
			cout << *it1 << " ";
			it1++;
		}
		it++;
		cout << endl;
	}
	*/
	
	
	while(it != m.end()) {
		set<string> ms = it->se;
		ans[ms].insert(it->fi);
		it++;
	}
	
	map<set<string>, set<string> >:: iterator it2 = ans.begin();
		
	map<set<string>, set<string> > ans1;
	
	while(it2 != ans.end()) {
		set<string> ms = it2->se;
		if(ms.size() != 1) {
			ans1[it2->fi] = ms;
		}
		it2++;
	}
	
	it2 = ans1.begin();
	
	cout << ans1.size() << endl;
	
	while(it2 != ans1.end()) {
		set<string> ms = it2->se;
		set<string>::iterator it1 = ms.begin();
		while(it1 != ms.end()) {
			cout << "http://" << *it1 << " ";
			it1++;
		}	
		it2++;
		cout << endl;
	}
	
	
 
	return 0;
}


