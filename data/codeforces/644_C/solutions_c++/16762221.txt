#include<bits/stdc++.h>

int n, lh = 1, lp = 1, ln = 2, ans;
char h[30] = "http://", p[30];
std::string sh, sp;
std::vector<int> a[100005], g[100005];
std::vector<std::string> mh, mp;
std::map<int, int> mc[100005];
std::map<std::string, int> host, path;
std::map<std::pair<std::string, std::string>, bool> u;

bool cmp(int x, int y) {
	return mp[x] < mp[y];
}

int main() {
	scanf("%d", &n);
	mh.push_back(p);
	mp.push_back(p);
	while (n--) {
		scanf("\nhttp://%[^\n/]", h + 7);
		p[0] = 0;
		if (getchar() == '/') {
			p[0] = '/';
			p[1] = 0;
			scanf("%[^\n]", p + 1);
		}
		sh = h;
		sp = p;
		if (!u[std::make_pair(sh, sp)]) {
			u[std::make_pair(sh, sp)] = true;
			if (!host[sh]) {
				host[sh] = lh++;
				mh.push_back(sh);
			}
			if (!path[sp]) {
				path[sp] = lp++;
				mp.push_back(sp);
			}
			a[host[sh]].push_back(path[sp]);
		}
	}
	for (int i = 1; i < lh; i++) std::sort(a[i].begin(), a[i].end(), cmp);
	for (int i = 1; i < lh; i++) {
		int c = 1;
		for (int j = 0; j < a[i].size(); j++) {
			if (mc[c][a[i][j]]) c = mc[c][a[i][j]];
			else c = mc[c][a[i][j]] = ln++;
		}
		g[c].push_back(i);
	}
	for (int i = 0; i < ln; i++) if (g[i].size() > 1) ans++;
	printf("%d\n", ans);
	for (int i = 0; i < ln; i++) if (g[i].size() > 1) for (int j = 0; j < g[i].size(); j++)
		printf("%s%c", mh[g[i][j]].c_str(), j == g[i].size() - 1 ? '\n' : ' ');
	scanf("\n");
	return 0;
}
