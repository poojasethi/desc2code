#include <bits/stdc++.h>

using namespace std;

int main()
{
	ios::sync_with_stdio(false);
	int n, cnt = 0;
	cin >> n;
	map<string, set<int> > m;
	map<string, int> who;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		s = s.substr(7, s.size()-7);
		string host, path;
		int pos = 0;
		while (pos < s.size() and s[pos] != '/')
		{
			host.push_back(s[pos]);
			pos++;
		}
		while (pos < s.size())
		{
				path.push_back(s[pos]);
			pos++;
		}
		if (!who.count(path))
			who[path] = cnt++;
		m[host].insert(who[path]);
	}
	vector<pair<vector<int>, string> > v;
	for (map<string, set<int> >::iterator it = m.begin(); it != m.end(); it++)
	{
		string host = it->first;
		set<int>& s = it->second;
		vector<int> p;
		for (set<int> ::iterator its = s.begin(); its != s.end(); its++)
			p.push_back(*its);
		v.push_back(make_pair(p, host));		
	}
	sort(v.begin(), v.end());
	vector<vector<string> > ans;
	for (int i = 1; i < v.size(); i++)
	{
		if (v[i].first == v[i-1].first)
		{
			ans.push_back(vector<string>());
			ans.back().push_back("http://" + v[i-1].second);
			while (i < v.size() and v[i].first == v[i-1].first)
			{
				ans.back().push_back(" http://" + v[i].second);
				i++;
			}
		}
	}
	cout << ans.size() << '\n';
	for (int i = 0; i < ans.size(); i++)
	{
		for (int j = 0; j < ans[i].size(); j++)
		{
			if (j) cout << " ";
			cout << ans[i][j];
		}
		cout << '\n';
	}
	return 0;
}
