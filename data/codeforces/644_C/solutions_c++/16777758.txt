#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

int main() {
	int n, i, j, pos;
	string fullpath, hostname, path, str;
	map<string, set<string> > addrs;
	vector<string> keys;
	vector<vector<string> > groups;

	cin >> n;
	for (i = 0; i < n; i++) {
		cin >> fullpath;
		str = fullpath.substr(7);
		pos = str.find('/');
		hostname = (pos == -1)? str : str.substr(0, pos);
		path = (pos == -1)? "" : str.substr(pos);

		map<string, set<string> >::iterator it = addrs.find(hostname);
		if (it != addrs.end()) {
			(*it).second.insert(path);
		} else {
			set<string> v;
			v.insert(path);
			addrs.insert(pair<string, set<string> >(hostname, v));
			keys.push_back(hostname);
		}
	}

	// Find duplicates
	map<set<string>, vector<string> > g;
	vector<set<string> > gKeys;
	int gCount = 0;
	for (i = 0; i < static_cast<int>(keys.size()); i++) {
		set<string> k = addrs[keys[i]];
		map<set<string>, vector<string> >::iterator it = g.find(k);
		if (it != g.end()) {
			(*it).second.push_back(keys[i]);
			if ((*it).second.size() == 2) {
				gCount++;
			}
		} else {
			vector<string> v;
			v.push_back(keys[i]);
			g.insert(pair<set<string>, vector<string> >(k, v));
			gKeys.push_back(k);
		}
	}
	cout << gCount << endl;
	for (i = 0; i < static_cast<int>(gKeys.size()); i++) {
		if (g[gKeys[i]].size() > 1) {
			for (j = 0; j < static_cast<int>(g[gKeys[i]].size()); j++) {
				cout << "http://" << g[gKeys[i]][j] << " ";
			}
			cout << endl;
		}
	}
	return 0;
}
