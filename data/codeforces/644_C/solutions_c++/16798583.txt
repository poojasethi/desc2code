#include<iostream>
#include<map>
#include<algorithm>
#include<vector>
using namespace std;
const int MAXN = 7 * 1e5 + 5;
string s[MAXN];
string rev[MAXN];
map<string, int> mp;
const long long BASE = 1009;
const long long BASE2 = 1e9 + 7;

int cnt = 0;

vector<string> v[MAXN];
vector<pair<pair<long long , long long> , int> > lst;
vector<string> ans;


int main()
{
	int n;
	cin >> n;
	for(int i = 0;i < n;i ++)
	{
		cin >> s[i];

		int id = s[i].find('/',s[i].find('/',s[i].find('/') + 1) + 1);
		if(id == -1)
			id = (int)s[i].length();

		string host = s[i].substr(0 , id);
		string path = s[i].substr(id);

		if(mp.find(host) == mp.end())	
			mp[host] = ++ cnt;
		
		if(mp.find(path) == mp.end())
			mp[path] = ++ cnt;

		
		int h = mp[host];
		int p = mp[path];
		
		rev[h] = host;
		rev[p] = path;

		v[h].push_back(path);
	}
	
	for(int i = 1;i <= cnt;i ++)
	{
		sort(v[i].begin() , v[i].end());
		v[i].resize(unique(v[i].begin() , v[i].end()) - v[i].begin());
	}
	
	for(int i = 1;i <= cnt;i ++)
	{
		long long t1 = 0 , t2 = 0;
		
		if(v[i].size() == 0) continue;

		string tmp = "";
		for(int j = 0;j < (int)v[i].size();j ++)
			tmp += v[i][j] + "#";
		
		for(int j = 0;j < tmp.size();j ++)
		{
			t1 = (t1 * BASE) + tmp[j];
			t2 = (t2 * BASE2) + tmp[j];
		}
		
		lst.push_back(make_pair(make_pair(t1, t2) , i));
	}

	sort(lst.begin() , lst.end());
	int pos = 0 , Q = 0;

	while(pos < (int)lst.size())
	{
		int j = pos;
		while(j < (int)lst.size() && lst[pos].first == lst[j].first)
			j ++;
			
		if(j > pos + 1)
		{
			Q ++;
			for(int t = pos;t < j;t ++)
				ans.push_back(rev[lst[t].second] + " ");
			ans.push_back("\n");
		}
		pos = j;
	}
	
	cout << Q << endl;
	for(int i = 0;i < (int)ans.size();i ++)
		cout << ans[i];
	

	return 0;
}
