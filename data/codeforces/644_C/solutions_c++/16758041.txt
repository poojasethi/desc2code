#include <iostream>
#include <string>
#include <map>
#include <set>
#include <vector>
using namespace std;

void parseURL(string s, string & host, string & path) {
	int p = s.find('/', 7);
	if (p == string::npos) {
		host = s.substr(7);
		path = "";
	} else {
		host = s.substr(7, p - 7);
		path = s.substr(p);
	}
}

map<string, set<string> > host2path;
map<string, vector<string> > paths2host;

int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n; i ++) {
		string s;
		cin >> s;

		string host, path;
		parseURL(s, host, path);

		if (host2path.find(host) == host2path.end()) {
			set<string> se;
			se.insert(path);
			host2path[host] = se;
		} else {
			host2path[host].insert(path);
		}

	}

	int ans = 0;

	for (map<string, set<string> >::iterator iter = host2path.begin(); iter != host2path.end(); iter ++) {
		string paths;
		for (set<string>::iterator it = (iter->second).begin(); it != (iter->second).end(); it ++) {
			paths += (*it) + "#";
		}
		if (paths2host.find(paths) == paths2host.end()) {
			vector<string> host;
			host.push_back(iter->first);
			paths2host[paths] = host;
		} else {
			if (paths2host[paths].size() == 1) {
				ans ++;
			}
			paths2host[paths].push_back(iter->first);
		}
	}

	cout << ans << endl;
	for (map<string, vector<string> >::iterator iter = paths2host.begin(); iter != paths2host.end(); iter ++) {
		if ((iter->second).size() <= 1) continue;
		for (int i = 0; i < (iter->second).size(); i ++) {
			cout << "http://" << (iter->second)[i];
			if (i == (iter->second).size() - 1) cout << endl; else cout << " ";
		}
	}
}