#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

#define MAXN 100000

int N;
string s;

map<string, int> keylist;
vector<string> pts[MAXN];
vector< pair<string, string> > idf;
map<int, string> revkey;

int main(){

  //Read strings to vector, remove http:// part
  int count = 0;
  getline(cin, s);
  N = atoi(s.c_str());
  for(int i=0; i<N; i++){
    getline(cin, s);
    int split = s.find('/', 7); // don't consider http
    int nl = split - 7;
    string hostname = s.substr(7, nl);
    string path = (split == string::npos)? " ": s.substr(split);

    // Add string to map or retrieve its adress in the vector
    if(keylist.count(hostname)==1){
      pts[keylist[hostname]].push_back(path);
    }else{
      keylist[hostname] = count;
      revkey[count] = hostname;

      pts[count].push_back(path);
      count += 1;
    }
  }

  // Create strings from the vectors
  for(int i=0; i<count; i++){
    sort(pts[i].begin(), pts[i].end());
    string t = pts[i][0];
    for(int j=1; j<pts[i].size(); j++){
      if(pts[i][j].compare(pts[i][j-1]) == 0) continue;
      t += "|" + pts[i][j];
    }
    idf.push_back(make_pair(t, revkey[i]));
    pts[i].clear();
  }

  // Sort list with strings
  sort(idf.begin(), idf.end());
  int count2 = 0;
  pts[count2].push_back(idf[0].second);
  for(int i=1; i<count; i++){
    //cout << idf[i].first << endl;
    if(idf[i-1].first.compare(idf[i].first) != 0) count2 +=1;
    pts[count2].push_back(idf[i].second);
  }

  int count3 = 0;
  for(int i=0; i<=count2; i++){
    if(pts[i].size() > 1) count3 += 1;
  }

  cout << count3 << endl;
  for(int i=0; i<=count2; i++){
    if(pts[i].size() > 1){
      for(int j=0; j<pts[i].size()-1; j++){
        cout << "http://" << pts[i][j] << " ";
      }
      cout << "http://" << pts[i][pts[i].size() - 1] << endl;
    }
  }

  return 0;
}
