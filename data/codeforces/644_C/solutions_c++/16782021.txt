#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <queue>
#include <stack>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <numeric>

using namespace std;

#define FOR(i, n) for(int i = 0; i < (n); ++i)
#define SIZEOF(a) (sizeof(a)/sizeof((a)[0]))


typedef long long ll;

const int MAX_N = 1e6+10;
ll a[MAX_N];
int res;

const int BUFSIZE = MAX_N;
char buf[BUFSIZE + 1];
char host[30];
char path[30];
string nextString() {
	scanf("%s", buf); return buf;
}

int main()
{
	int n; cin >> n;
	map<string, set<string> > host2paths;
	FOR(i,n){
		scanf("%s", buf);
		int j = 7;
		int k = 0;
		while(buf[j] && buf[j] != '/'){
			host[k++] = buf[j++];
		}
		host[k] = 0;
		int m = 0;
		//if(buf[j]=='/') ++j;
		while(buf[j]){
			path[m++] = buf[j++];
		}
		path[m] = 0;

		string h(host), p(path);
		//cout << "h(" << h << ") > p(" << p << ")" << endl;
		host2paths[h].insert(p);
	}
	map<set<string>, set<string> > paths2hosts;
	for(map<string, set<string> >::const_iterator it = host2paths.begin();
		it != host2paths.end();
		++it)
	{
		paths2hosts[it->second].insert(it->first);
	}

	vector<set<string> > v;
	for(map<set<string>, set<string> >::const_iterator it = paths2hosts.begin();
		it != paths2hosts.end();
		++it)
	{
		const set<string>& paths = it->first;
		if(paths.size() < 1)
			continue;
		const set<string>& hosts = it->second;
		if(hosts.size() < 2)
			continue;
		v.push_back(hosts);
	}
	cout << v.size() << endl;
	FOR(i,v.size()){
		const set<string>& hosts = v[i];
		for(set<string>::const_iterator it = hosts.begin(); it != hosts.end(); ++it)
		{
			cout << "http://" << *it << " ";
		}
		cout << endl;
	}
	return 0;
}
