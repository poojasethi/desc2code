#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int maxn = 1000*1000 + 10;

int n;
ll a[maxn];
ll dev[maxn];
ll cnt[maxn];

ll calc(int index)
{
	memset(cnt, 0, sizeof cnt);
	memset(dev, 0, sizeof cnt);

	int indx = 0;
	for(ll i = 1; i*i <= a[index]; i++){
		if(a[index] % i == 0){
			dev[indx++] = i;
			if(i*i != a[index])
				dev[indx++] = a[index]/i;
		}
	}
	sort(dev, dev + indx);

	for(int i = 0; i < n; i++){
		ll dv = __gcd(a[index], a[i]);
		cnt[ lower_bound(dev, dev + indx, dv) - dev ]++;
	}

	for(int i = 0; i < indx; i++)
		for(int j = i+1; j < indx; j++)
			if(dev[j] % dev[i] == 0)
				cnt[i] += cnt[j];

	ll ans = 0;
	for(int i = 0; i < indx; i++)
		if(2*cnt[i] >= n)
			ans = max(ans, dev[i]);
	return ans;
}

int main()
{
	srand(time(NULL));
	//ios::sync_with_stdio(false);
	//cin.tie(0);

	scanf("%d", &n);
	for(int i = 0; i < n; i++)
		scanf("%I64D", &a[i]);
	random_shuffle(a, a+n);

	ll maxi = -1;
	for(int i = 0; i < min(8, n); i++)
		maxi = max(maxi, calc(i));

	cout << maxi << endl;
}
