# include <cstdio>

# define REP(i, n) for (int i = 1; i <= n; ++ i)
# define NR 300

template <class T0, class T1> inline bool RlxN (T0 &x, const T1 &y) {if (x > y) return x = y, true; return false;}
const int inf = (1 << 30) - 2;
int n, m, S, T, K, cur, g[NR][NR], d[NR][NR], fv[NR], sR[NR], tR[NR];
bool e[NR][NR], reach[NR], newr[NR];

int temp (int x) {return x > 100 ? -1 : x;}

bool dfs (int x)
{
	if (x == tR[cur]) return reach[x];
	if (fv[x] != -1) return fv[x];
	bool res = true;
	REP (v, n) if (e[x][v] && g[sR[cur]][x] + 1 + g[v][tR[cur]] == g[sR[cur]][tR[cur]]) res &= dfs (v);
	res |= reach[x];
	if (res && d[sR[cur]][x] * d[x][tR[cur]] == d[sR[cur]][tR[cur]]) newr[x] = true;
	return fv[x] = res;
}

int main ()
{
	scanf ("%d%d%d%d", &n, &m, &S, &T);
	if (S == T) return puts ("0"), 0;
	int t1, t2;
	REP (i, n) REP (j, n) g[i][j] = inf;
	REP (i, m) scanf ("%d%d", &t1, &t2), g[t1][t2] = d[t1][t2] = 1, e[t1][t2] = true;
	REP (k, n) 
		REP (i, n) 
			REP (j, n) 
			{
				if (g[i][j] > g[i][k] + g[k][j]) g[i][j] = g[i][k] + g[k][j], d[i][j] = d[i][k] * d[k][j];
				else if (g[i][j] == g[i][k] + g[k][j]) d[i][j] += d[i][k] * d[k][j];
			}
	REP (i, n) g[i][i] = 0, d[i][i] = 1;
	//REP (i, n) {REP (j, n) printf ("%d ", g[i][j]); puts ("");}
	scanf ("%d", &K);
	REP (i, K) scanf ("%d%d", &sR[i], &tR[i]);
	reach[T] = true;
	REP (i, n)
	{
		for (cur = 1; cur <= K; ++ cur) 
		{
			if (d[sR[cur]][tR[cur]] == 0) continue;
			REP (j, n) fv[j] = -1; dfs (sR[cur]);
			//REP (j, n) printf ("%d(%d %d %d) ", newr[j], fv[j], temp (g[sR[cur]][j] + g[j][tR[cur]]), d[sR[cur]][j] * d[j][tR[cur]]); puts ("");
		}
		REP (j, n) reach[j] = newr[j];
		if (reach[S]) return printf ("%d\n", i), 0;
	}
	puts ("-1");
	return 0;
}
