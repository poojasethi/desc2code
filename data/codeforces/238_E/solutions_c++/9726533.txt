#include <cstdio>
#include <queue>
#include <algorithm>
using namespace std;
const int N=105,K=N,inf=1e9+7;
int n,m,a,b,k,s[K],t[K];
int g[N][N],dist[N][N],deg[N][K],f[N][K];
bool must[N][K];
struct data{
	int i,j,val;
	void extend();
};
deque<data> q;
void data::extend(){
	if(f[i][j]) return;
	f[i][j]=val;
	if(must[i][j])
		for(int jj=1;jj<=k;jj++) if(dist[s[jj]][i]+dist[i][t[jj]]==dist[s[jj]][t[jj]])
			q.push_back((data){i,jj,val+1});
	for(int ii=1;ii<=n;ii++) if(ii!=i)
		if(dist[s[j]][ii]+g[ii][i]+dist[i][t[j]]==dist[s[j]][t[j]]&&!--deg[ii][j])
			q.push_front((data){ii,j,val});
}
int J,*top,ord[N];

bool cmp(const int i,const int j){
	return dist[s[J]][i]<dist[s[J]][j];
}

int main(){
	scanf("%d%d%d%d",&n,&m,&a,&b);
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
			g[i][j]=dist[i][j]=i==j?0:inf;
	for(int i=1;i<=m;i++){
		int u,v; scanf("%d%d",&u,&v);
		g[u][v]=dist[u][v]=1;
	}
	for(int k=1;k<=n;k++)
		for(int i=1;i<=n;i++)
			for(int j=1;j<=n;j++)
				if(dist[i][k]+dist[k][j]<dist[i][j])
					dist[i][j]=dist[i][k]+dist[k][j];
	scanf("%d",&k);
	for(J=1;J<=k;J++){
		scanf("%d%d",&s[J],&t[J]);
		if(dist[s[J]][t[J]]==inf){
			J--;
			k--;
			continue;
		}
		top=ord;
		for(int i=1;i<=n;i++) if(dist[s[J]][i]+dist[i][t[J]]==dist[s[J]][t[J]])
			*top++=i;
		sort(ord,top,cmp);
		for(int l=0,r;l<top-ord;l=r){
			for(r=l;r<top-ord&&!cmp(ord[l],ord[r]);r++);
			if(r-l==1) must[ord[l]][J]=true;
		}
	}
	for(int i=1;i<=n;i++)
		for(int j=1;j<=k;j++)
			for(int ii=1;ii<=n;ii++) if(ii!=i)
				if(dist[s[j]][i]+g[i][ii]+dist[ii][t[j]]==dist[s[j]][t[j]])
					deg[i][j]++;
	for(int j=1;j<=k;j++) if(dist[s[j]][b]+dist[b][t[j]]==dist[s[j]][t[j]])
		q.push_back((data){b,j,1});
	while(!q.empty()){
		data u=q.front(); q.pop_front();
		u.extend();
	}
	int ans=inf;
	for(int j=1;j<=k;j++) if(must[a][j]&&f[a][j])
		ans=min(ans,f[a][j]);
	printf("%d\n",ans==inf?-1:ans);
}
