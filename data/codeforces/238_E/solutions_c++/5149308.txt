#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <set>
#include <queue>
#include <vector>
using namespace std;

#define pb push_back
#define mp make_pair
const int inf = 1e9;
const long long INF = 1e18;
typedef long long LL;
typedef pair<int, int> PII;

const int maxn = 110;

int S[maxn], T[maxn], b[maxn][maxn], d[maxn][maxn], f[maxn], g[maxn], h[maxn];
vector<int> G[maxn][maxn];

int main()
{
	//freopen("input.txt", "r", stdin);
	int n, m, s, t;
	scanf("%d%d%d%d", &n, &m, &s, &t); s--; t--;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			d[i][j] = inf;
	for (int i = 0; i < n; i++) d[i][i] = 0;
	for (int i = 0; i < m; i++) {
		int u, v;
		scanf("%d%d", &u, &v); u--; v--;
		d[u][v] = 1;
	}
	for (int k = 0; k < n; k++)
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				d[i][j] = min(d[i][j], d[i][k]+d[k][j]);
	int K = 0, K_;
	scanf("%d", &K_);
	memset(b, 0, sizeof(b));
	for (int i = 0; i < K_; i++) {
		scanf("%d%d", &S[K], &T[K]); S[K]--; T[K]--;
		if (d[S[K]][T[K]] == inf) continue;
		for (int j = 0; j < n; j++)
			if (d[S[K]][j]+d[j][T[K]] == d[S[K]][T[K]])
				G[K][d[S[K]][j]].pb(j);
		for (int j = 0; j <= d[S[K]][T[K]]; j++)
			if (G[K][j].size() == 1)
				b[K][G[K][j][0]] = 1;
		K++;
	}
	for (int i = 0; i < n; i++) f[i] = inf;
	f[t] = 0;
	for (int o = 1; ; o++) {
		int done = 0;
		memset(g, 0, sizeof(g));
		for (int i = 0; i < K; i++) {
			for (int j = 0; j < n; j++) h[j] = f[j] < inf;
			for (int j = d[S[i]][T[i]]-1; j >= 0; j--)
				for (int k = 0; k < G[i][j].size(); k++) if (h[G[i][j][k]] == 0) {
					int cnt = G[i][j][k];
					h[cnt] = 1;
					for (int l = 0; l < G[i][j+1].size(); l++) {
						int cnt_ = G[i][j+1][l];
						if (d[cnt][cnt_] == 1 && ! h[cnt_]) {
							h[cnt] = 0;
							break;
						}
					}
					if (h[cnt] && b[i][cnt]) g[cnt] = 1;
				}
		}
		for (int i = 0; i < n; i++) if (g[i]) { done = 1; f[i] = o; }
		if (! done) break;
	}
	f[s] < inf ? printf("%d\n", f[s]) : puts("-1");
	return 0;
}

