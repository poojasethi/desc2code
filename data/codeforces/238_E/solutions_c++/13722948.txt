#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>
#define Rep(i, x, y) for (int i = x; i <= y; i ++)
#define Dwn(i, x, y) for (int i = x; i >= y; i --)
#define RepE(i, x) for(int i = pos[x]; i; i = g[i].nex)
using namespace std;
typedef long long LL;
const int N = 105;
int n, m, p, S, T, a[N][N], b[N][N], s[N], t[N], que[N * N], hd, tl, d[N], f[N][N], in[N];
int main()
{
	scanf ("%d%d%d%d", &n, &m, &S, &T);
	Rep(i, 1, n) Rep(j, i + 1, n) a[i][j] = a[j][i] = m + 1;
	Rep(i, 1, m) {
		int x, y;
		scanf ("%d%d", &x, &y), a[x][y] = b[x][y] = 1;
	}
	Rep(k, 1, n) {
		Rep(i, 1, n) {
			Rep(j, 1, n) if (i != j) {
				int k0 = a[i][k] + a[k][j], k1 = b[i][k] * b[k][j];
				if (a[i][j] > k0) a[i][j] = k0, b[i][j] = k1;
				else if (a[i][j] == k0) b[i][j] += k1;
			}
		}
	}
	//Rep(i, 1, n) Rep(j, 1, n) cout << i<<" "<<j<<" "<<a[i][j] <<endl;
	scanf("%d", &p);
	Rep(i, 1, p) {
		scanf ("%d%d", &s[i], &t[i]);
		//Rep(j, 1, n) Rep(k, 1, n)
		//	if (a[j][k] == 1 && a[ s[i] ][ t[i] ] == a[ s[i] ][j] + a[k][ t[i] ] + 1) 
	}
	f[0][T] = 1;
	Rep(k, 1, n) {
		Rep(i, 1, n) f[k][i] = f[k - 1][i];
		Rep(i, 1, p) {
			que[hd = tl = 1] = t[i];
			int mind = a[ s[i] ][ t[i] ];
			if (mind > m) continue ;
			Rep(x, 1, n) d[x] = 1; d[ t[i] ] = 0;
			//cout << s[i]<<"         "<<t[i]<<endl;
			while (hd <= tl) {
				int y = que[hd ++]; // c[y] = max(c[y], d[y]);
				if (d[y] && (b[ s[i] ][y] * b[y][ t[i] ] == b[ s[i] ][ t[i] ] || y == s[i])) f[k][y] = 1;
				// cout << i<<"     "<<y<<" " <<f[k][y]<<" "<<b[s[i]][y]<< endl;
				d[y] = max(d[y], f[k - 1][y]);
				Rep(x, 1, n) if (a[x][y] == 1 && a[s[i]][x] + a[y][t[i]] + 1 == mind) {
					// cout << y<<"  "<<x<<" - "<<d[y]<<endl;
					d[x] = min(d[x], d[y]);
					if (!in[x]) que[++ tl] = x, in[x] = 1;
				}
				in[y] = 0;
			}
		}
		if (f[k][S]) { printf("%d\n", k); return 0 ; }
	}
	puts("-1");

	return 0;
}
