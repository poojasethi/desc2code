#include<bits/stdc++.h>
using namespace std;
#define O Re()
inline int Re() { int x = 0; char ch = getchar(); while(!isdigit(ch)) ch = getchar(); while(isdigit(ch)) x = x*10 + ch-48, ch = getchar(); return x; }
const int N = 105, oo = 0x3f3f3f3f;
int n, m, A, B, T, U[N], V[N], g[N], ans[N], dis[N][N], pass[N][N], vis[N], TIME;

inline bool On(int S, int x, int T)
{
	return dis[S][T] == dis[S][x] + dis[x][T];
}

inline int dfs(int x, int T)
{
	if(x == T) return ans[x];
	if(vis[x] == TIME) return g[x];
	
	vis[x] = TIME; g[x] = 0;
	for(int i = 1; i <= n; ++ i)
		if(On(x, i, T) && dis[x][T] == dis[i][T] + 1)
			g[x] = max(g[x], dfs(i, T));

	return g[x] = min(ans[x], g[x]);
}

int main()
{
	n = O, m = O, A = O, B = O;
	memset(dis, oo, sizeof dis);
	for(int i = 1; i <= n; ++ i) dis[i][i] = 0;
	for(int i = 1, I, R; i <= m; ++ i) {
		I = O, R = O;
		dis[I][R] = 1;
	}

	for(int k = 1; k <= n; ++ k)
		for(int i = 1; i <= n; ++ i)
			for(int j = 1; j <= n; ++ j)
				dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);

	T = O;
	for(int k = 1; k <= T; ++ k) {
		int s = O, t = O;
		U[k] = s, V[k] = t;
		if(dis[s][t] == oo) continue;
		for(int i = 1; i <= n; ++ i)
			if(On(s, i, t)) {
				bool flag = 1;
				for(int j = 1; j <= n && flag; ++ j)
					if(i != j && On(s, j, t) && dis[s][j] == dis[s][i])
						flag = 0;
				pass[k][i] = flag;
			}
	}

	memset(ans, oo, sizeof ans);
	ans[B] = 0;

	for(;;) {
		bool flag = 1;
		for(int i = 1; i <= T; ++ i) {
			if(dis[U[i]][V[i]] == oo) continue;
			TIME++;
			for(int j = 1; j <= n; ++ j) if(pass[i][j]) {
				int tmp = dfs(j, V[i]) + 1;
				if(tmp < ans[j]) ans[j] = tmp, flag = 0;
			}
		}
		if(flag) break;
	}

	printf("%d", ans[A] < oo ? ans[A] : -1);
}

		 				 	 			    	 		    	