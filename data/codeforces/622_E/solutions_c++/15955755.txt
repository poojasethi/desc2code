#include <bits/stdc++.h>

using namespace std;

const int N = 500001;
vector < int > g[N];
vector < int > v;
bool mark[N];

void dfs(int node, int distance) {			
	if (mark[node])
		return;
	mark[node] = true;
	for (int i = 0; i < g[node].size(); i++)
		dfs(g[node][i], distance + 1);
	if (g[node].size() == 1)
		v.push_back(distance);
}

main () { 
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		scanf("%d %d", &u, &v);
		u--, v--;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	mark[0] = true;
	int ans = 0;
	for (int i = 0; i < g[0].size(); i++) {
		v.clear();
		dfs(g[0][i], 1);
		sort(v.begin(), v.end());
		for (int j = 1; j < v.size(); j++)
			v[j] = max(v[j], v[j - 1] + 1);
		ans = max(ans, v.back());
	}
	cout << ans << endl;
}

