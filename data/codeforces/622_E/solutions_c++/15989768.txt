#include<bits/stdc++.h>
using namespace std;
int a[500005];
vector<int> g[500005];
vector<int> d;
void dfs(int node, int parent, int layer) {
	bool isLeaf = true;
	for (int i = 0; i < int(g[node].size()); i++) {
		int child = g[node][i];
		if (child == parent)
			continue;
		isLeaf = false;
		dfs(child, node, layer + 1);
	}
	if (isLeaf)
		d.push_back(layer);
}

int main() {
	ios::sync_with_stdio(false);
	int n; scanf("%d", &n);
	for (int i = 0; i < n - 1; i++) {
		int u, v; scanf("%d%d", &u, &v);
		--u; --v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	int ans = 0;
	for (int i = 0; i < int(g[0].size()); i++) {
		d.clear();
		dfs(g[0][i], 0, 1);
		sort(d.begin(), d.end());
		for (int i = 1; i < int(d.size()); i++)
			d[i] = max(d[i], d[i - 1] + 1);
		ans = max(ans, d.back());
	}
	printf("%d\n", ans);




	return 0;
}
