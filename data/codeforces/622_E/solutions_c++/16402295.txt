#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>
using std::vector;

const int Maxn = 500010;
int nxt[Maxn<<1], head[Maxn], to[Maxn<<1], cnt;
void add(int x, int y){
	nxt[++cnt] = head[x], head[x] = cnt, to[cnt] = y;
}

vector<int> D;
void dfs(int u, int v, int d){
	int flag = 0;
	for (int i = head[u]; i; i = nxt[i]){
		int e = to[i];
		if (e == v) continue;
		flag = 1;
		dfs(e, u, d+1);
	}
	if (!flag)
		D.push_back(d);
}

int solve(int u){
	D.clear();
	dfs(u, 1, 0);
	std::sort(D.begin(), D.end());
	int res = D[0];
	for (int i = 1; i < D.size(); ++i)
		res = std::max(res+1, D[i]);
	return res;
}

int main(){
#ifndef ONLINE_JUDGE
	freopen ("622E.in", "r", stdin);
#endif
	int n;
	scanf ("%d", &n);
	for (int i = 1, a, b; i < n; ++i){
		scanf ("%d%d", &a, &b);
		add(a, b), add(b, a);
	}

	int ans = 0;
	for (int i = head[1]; i; i = nxt[i])
		ans = std::max(ans, solve(to[i]));
	printf ("%d", ans+1);
	return 0;
}
