#include <iostream>
#include <algorithm>
#include <cstring>
#include <cstdio>
#include <vector>
using namespace std;
const int N = 500010;

vector<int> g[N], p;
void dfs(int u, int fa, int d) {
	if (g[u].size() == 1) {
		p.push_back(d);
		return ;
	}
	for (int i = 0; i < g[u].size(); i++) {
		int v = g[u][i];
		if (v != fa) {
			dfs(v, u, d + 1);
		}
	}
}

int cal() {
	sort(p.begin(), p.end());
	int ti = -1;
	for (int i = 0; i < p.size(); i++) {
		int d = p[i];
		if (d > ti) {
			ti = d;
		} else {
			ti = ti + 1;
		}
	}
	return ti;
}

int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n - 1; i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		g[x].push_back(y);
		g[y].push_back(x);
	}
	int ans = -1;
	for (int i = 0; i < g[1].size(); i++) {
		int v = g[1][i];
		p.clear();
		dfs(v, 1, 1);
		ans = max(ans, cal());
	}
	printf("%d\n", ans);
}
