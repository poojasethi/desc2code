#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>
#include <queue>

typedef long long ll;

using namespace std;

const int N = 500010;

int n, a, b, dp[N];
vector<int> adj[N];
vector<int> depth;

void dfs(int u, int p) {
	bool leaf = true;
	dp[u] = dp[p] + 1;
	for (int i = 0; i < adj[u].size(); i++) {
		if (adj[u][i] != p) {
			dfs(adj[u][i], u);
			leaf = false;
		}
	}
	if (leaf)
		depth.push_back(dp[u]);
}
int main() {
	scanf("%d", &n);
	for (int i = 0; i < n - 1; i++) {
		scanf("%d%d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	int mx = 0;
	for (int i = 0;i < adj[1].size(); i++) {
		depth.clear();
		dfs(adj[1][i], 1);
		sort(depth.begin(), depth.end());
		int sub = depth[0];
		for (int u = 1; u < depth.size(); u++) {
			depth[u] = max(depth[u - 1] + 1, depth[u]);
			sub = max(sub, depth[u]);
		}
		mx = max(mx, sub);
	}
	printf("%d\n", mx);
	return 0;
}