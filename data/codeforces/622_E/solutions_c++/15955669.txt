#include <iostream>
#include <string>
#include <algorithm>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <cstdio>
using namespace std;

vector<int > g[500005];
vector<int > tmp;

void dfs(int u, int p, int depth) {
	bool isLeaf = true;
	for (int i = 0; i < g[u].size(); i++) {
		if(g[u][i] != p) {
			isLeaf = false;
			dfs(g[u][i], u, depth+1);
		}
	}
	if (isLeaf)
		tmp.push_back(depth);
}

int main() {
	int n;
	scanf("%d", &n);
	int u, v;
	for (int i = 1; i <= n-1; i++) {
		scanf("%d%d", &u, &v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	
	int ret = 0, cur = 0;
	for (int i = 0; i < g[1].size(); i++) {
		u = g[1][i];
		tmp.clear();
		dfs(u, 1, 1);
		sort(tmp.begin(), tmp.end());
		cur = tmp[0];
		for (int j = 1; j < tmp.size(); j++) {
			if (cur >= tmp[j]) cur++;
			else cur = tmp[j];
		}
		ret = (ret > cur) ? ret : cur;
	}
	cout << ret;
	return 0;
}