#include<bits/stdc++.h>
using namespace std;
const int N=500018;
int l[N],ans;
vector <int> G[N],leaf[N];

void dfs(int u,int p,int r) {
    bool deo=0;
    for(int i=0;i<G[u].size();i++) {
        int v=G[u][i]; if(v==p) continue;
        deo=1;
        l[v]=l[u]+1;
        dfs(v,u,r);
    }
    if(!deo) leaf[r].push_back(l[u]);
}

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    int n; cin>>n;
    for(int i=1;i<n;i++) {
        int u,v; cin>>u>>v;
        G[u].push_back(v);
        G[v].push_back(u);
    }
    for(int i=0;i<G[1].size();i++) {
        int v=G[1][i];
        dfs(v,1,v);
        sort(leaf[v].begin(),leaf[v].end());
        int cur=leaf[v][0];
        for(int j=1;j<leaf[v].size();j++) {
            if(leaf[v][j]<=leaf[v][j-1]) leaf[v][j]=leaf[v][j-1]+1;
            cur=max(cur,leaf[v][j]);
        }
        ans=max(ans,cur);
    }
    cout<<ans+1<<endl;
}
