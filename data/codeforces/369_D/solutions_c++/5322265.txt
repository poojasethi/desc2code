#include<iostream>
using namespace std;

int N,K,rightmax[3010],prob[3010];
bool odw[3010][3010];
long long wyn;

int maxi(int a,int b){return a>b?a:b;}

void DFS(int aim1,int aim2,int round){
    if(round>K) return;
    odw[aim1][aim2]=1;
    ++wyn;
    if(aim2>N)  return;
    if(prob[aim1]>0 && rightmax[aim2]>0 && !odw[aim2+1][aim2+2])    DFS(aim2+1,aim2+2,round+1);
    if(prob[aim1]<100 && rightmax[aim2]>0 && !odw[aim2][aim2+1])    DFS(aim2,aim2+1,round+1);
    if(prob[aim1]>0 && rightmax[aim2]<100 && !odw[aim1][aim2+1])    DFS(aim1,aim2+1,round+1);
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin >> N >> K;
    if(N==1){
        cin >> prob[0];
        cout << 1;
        return 0;
    }
    for(int i=1;i<=N;++i)   cin >> prob[i];
    for(int i=N;i>0;--i)    rightmax[i]=maxi(rightmax[i+1],prob[i]);
    DFS(1,2,0);
    cout << wyn;
    return 0;
}
