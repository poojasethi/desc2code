#include <iostream>
#include <algorithm>
#include <utility>
#include <string>

using std::string;
using std::cout;
using std::cin;
using std::sort;
using std::pair;
using std::endl;

typedef pair<string, int> PSI;

const int RACERS = 100012;

int n, m;
string vasya;
PSI results[RACERS];
int points[RACERS];

void loadData();
bool cmp(const PSI &, const PSI &);
int highest();
int lowest();
int findVasya();

int main() {
	loadData();
	cout << highest() << " " << lowest();
}



void loadData() {
	cin >> n;
	for(int i = 0; i < n; ++i) {
		cin >> results[i].first;
		cin >> results[i].second;
	}
	sort(results, results + n, cmp);
	cin >> m;
	for(int i = 0; i < m; ++i) {
		cin >> points[i];
	}
	for(int i = m; i < n; ++i) {
		points[i] = 0;
	}
	sort(points, points + n);

	cin >> vasya;
}

int lowest() {
	int pos = findVasya();
	int vasyaResult = results[pos].second + points[0];
	int count = 0;
	int start = n-1;
	for(int i = 0; i < pos; ++i) {
		if(points[start] + results[i].second > vasyaResult) {
			--start;
			++count;
		}
	}
	return n - pos + count;
}

int highest() {
	int pos = findVasya();
	int vasyaResult = results[pos].second + points[n-1];
	int count = 0;
	int start = 0;
	for(int i = n-1; i > pos; --i) {
		if(points[start] + results[i].second < vasyaResult) {
			++start;
			++count;
		}
	}
	return n - pos - count;
}

int findVasya() {
	int i = 0;
	while(results[i].first != vasya) {
		++i;
	}
	return i;
}

bool cmp(const PSI & a, const PSI & b) {
	if(a.second == b.second)
		return a.first > b.first;
	return a.second < b.second;
}
