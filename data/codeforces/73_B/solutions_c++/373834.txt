#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
struct team
{
	char s[21];
	int p;
};
bool operator <(const team &a,const team &b)
{
	if (a.p!=b.p)
		return a.p>b.p;
	else
		return strcmp(a.s,b.s)<0;
}
team b[100000];
int a[100000],n,k;
char s[21];
bool check_high(int c)
{
	int i,j,cc;
	cc=c;
	b[k].p+=a[n-1];
	i=n-2;
	j=0;
	while (c>0)
	{
		if (j==k)
			j++;
		i--;
		c--;
		j++;
	}
	j=n-1;
	while (i>=0)
	{
		if (j==k)
			j--;
		b[j].p+=a[i];
		if (b[j]<b[k])
		{
			b[j].p-=a[i];
			b[k].p-=a[n-1];
			return 0;
		}
		b[j].p-=a[i];
		j--;
		i--;
	}
	b[k].p-=a[n-1];
	return 1;
}
int find_high()
{
	int l,r,c;
	l=0;
	r=n-1;
	while (l<r)
	{
		c=(l+r)/2;
		if (check_high(c))
			r=c;
		else
			l=c+1;
	}
	return l+1;
}
bool check_low(int c)
{
	int i,j;
	b[k].p+=a[0];
	i=1;
	j=n-1;
	while (c>0)
	{
		if (j==k)
			j--;
		i++;
		c--;
		j--;
	}
	j=0;
	while (i<n)
	{
		if (j==k)
			j++;
		b[j].p+=a[i];
		if (b[k]<b[j])
		{
			b[j].p-=a[i];
			b[k].p-=a[0];
			return 0;
		}
		b[j].p-=a[i];
		i++;
		j++;
	}
	b[k].p-=a[0];
	return 1;
}
int find_low()
{
	int l,r,c;
	l=0;
	r=n-1;
	while (l<r)
	{
		c=(l+r)/2;
		if (check_low(c))
			r=c;
		else
			l=c+1;
	}
	return n-l;
}
int main()
{
	int m,i;
	scanf("%d",&n);
	for (i=0;i<n;i++)
		scanf("%s %d",b[i].s,&b[i].p);
	sort(b,b+n);
	scanf("%d",&m);
	for (i=0;i<m;i++)
		scanf("%d",a+i);
	for (i=m;i<n;i++)
		a[i]=0;
	sort(a,a+n);
	scanf("%s",s);
	for (k=0;k<n;k++)
		if (strcmp(s,b[k].s)==0)
			break;
	printf("%d %d\n",find_high(),find_low());
	return 0;
}
