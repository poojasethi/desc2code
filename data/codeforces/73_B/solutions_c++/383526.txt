#include<stdio.h>
#include<string.h>
#include<set>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;
struct fff
{
	string p;
	int s;
}adsl;
vector<fff>ooxx;
bool cmp(fff a,fff b)
{
	if(a.s == b.s)
		return a.p<b.p;
	else
		return a.s<b.s;
}
multiset<int>pp;
multiset<int>qq;
multiset<int>::iterator ll;
int main()
{
	int n;
	scanf("%d",&n);
	char fuck[1000];
	ooxx.clear();
	for(int i=0;i<n;i++)
	{
		scanf("%s %d",fuck,&adsl.s);
		adsl.p=fuck;
		ooxx.push_back(adsl);
	}
	int m;
	scanf("%d",&m);
	int s;
	pp.clear();
	qq.clear();
	for(int i=0;i<m;i++)
	{
		scanf("%d",&s);
		qq.insert(s);
	}
	for(int i=m;i<n;i++)
		qq.insert(0);
	scanf("%s",fuck);
	adsl.p=fuck;
	for(vector<fff>::iterator it=ooxx.begin();it != ooxx.end();it++)
	{
		if(it->p == adsl.p)
		{
			adsl.s=it->s;
			ooxx.erase(it);
			break;
		}
	}
	sort(ooxx.begin(),ooxx.end(),cmp);
	int ans;
	ans=1;
	pp=qq;
	int mark=adsl.s;
	//adsl.s+=*qq.rbegin();
	ll=pp.end();
	ll--;
	adsl.s+=*ll;
	pp.erase(ll);
	for(vector<fff>::iterator it=ooxx.begin();it != ooxx.end();it++)
	{
		if(it->p < adsl.p)
			ll=pp.lower_bound(adsl.s-it->s);
		else
			ll=pp.upper_bound(adsl.s-it->s);
		if(ll != pp.begin())
		{
			ll--;
			pp.erase(ll);
		}
		else
			ans++;
	}
	printf("%d ",ans);


	ans=1;
	pp=qq;
	adsl.s=mark;
	adsl.s+=*qq.begin();
	ll=pp.begin();
	pp.erase(ll);
	for(vector<fff>::iterator it=ooxx.begin();it != ooxx.end();it++)
	{
		if(it->p < adsl.p)
			ll=pp.lower_bound(adsl.s-it->s);
		else
			ll=pp.upper_bound(adsl.s-it->s);
		if(ll != pp.end())
		{
			ans++;
			pp.erase(ll);
		}
	}
	printf("%d\n",ans);
	return 0;
}
