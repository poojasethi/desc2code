#include<iostream>
#include<sstream>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#define rep(i,n) for(int i=0;i<n;i++)
#define fr(i,c) for(__typeof (c.begin()) i=c.begin(); i!=c.end(); i++)
#define all(c) (c).begin(), (c).end()
using namespace std;

struct S{
  string name;
  int pt;
  S(string name,int pt):name(name),pt(pt){}
  S(){}
  bool operator<(const S &r)const{
    if(pt!=r.pt)return pt<r.pt;
    return name>r.name;
  }
};
bool win(string n,int p,S s){
  if(p!=s.pt)return s.pt>p;
  return s.name<n;
}

void run(){
  int n,m,t; cin>>n;
  vector<S> v,w;
  rep(i,n){
    S tmp;
    cin>>tmp.name>>tmp.pt;
    v.push_back(tmp);
  }
  
  cin>>m;
  vector<int> p;
  rep(i,n-m)p.push_back(0);
  rep(i,m)cin>>t,p.push_back(t);
  sort(all(p));

  string myteam; cin>>myteam;
  rep(i,n-1)if(v[i].name==myteam)swap(v[i],v[n-1]);

  sort(v.begin(),v.end()-1);

  int mx=n,mn=1;
  v[n-1].pt+=p[n-1];

  for(int i=0,j=n-2;i<n-1;i++){
    while(j>=0&&!win(v[i].name,v[i].pt+p[j],v[n-1]))j--;
    if(j>=0)mx--, j--;
  }
  
  v[n-1].pt+=p[0]-p[n-1];
  reverse(v.begin(),v.end()-1);

  for(int i=0,j=1;i<n-1;i++){
    while(j<n&&win(v[i].name,v[i].pt+p[j],v[n-1]))j++;
    if(j<n)mn++, j++;
  }

  cout<<mx<<" "<<mn<<endl;
}
int main(){
  //rep(i,2)
    run();
  return 0;
}
