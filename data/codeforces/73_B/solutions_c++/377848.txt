#include <stdio.h>
#include <string.h>
#include <string>
#include <algorithm>
#include <map>
#define maxn 100010

using namespace std;

struct node{
	string Name;
	int s;
	friend bool operator < (const node &x,const node &y){
		return x.s>y.s || (x.s==y.s && x.Name<y.Name);
	}
} a[maxn];
map<string,int> score;
int b[maxn];
int n,m;
string Vas;
string GetString(){
	char s[100];
	scanf("%s",s);
	string res;
	res.clear();
	for (int i=0;i<strlen(s);i++) res+=s[i];
	return  res;
}
int Bonus(int p){
	return p<=m ? b[p-1] : 0;
}
void Highest(){
	int i,sp=score[Vas]+Bonus(1);
	int Low=n,High=2;
	int res=1;
	for (i=0;i<n;i++)
		if (a[i].Name !=Vas){
			int tmp=a[i].s+Bonus(Low);
			if (tmp<sp || (tmp==sp && a[i].Name>Vas)){
				Low--;
			}else{
				High++;
				res++;
			}
		}
	printf("%d ",res);
}
void Lowest(){
	int i,sp=score[Vas]+Bonus(n);
	int Low=n-1,High=1;
	int res=n;
	for (i=n-1;i>=0;i--)
		if (a[i].Name!=Vas){
			int tmp=a[i].s+Bonus(High);
			if (tmp>sp || (tmp==sp && a[i].Name<Vas)){
				High++;
			}else{
				Low--;
				res--;
			}
		}
	printf("%d\n",res);
}
bool cmp(int x,int y){
	return x>y;
}
int main(){
	int i,j,k;
	scanf("%d",&n);
	score.clear();
	for (i=0;i<n;i++){
		a[i].Name=GetString();
		scanf("%d",&a[i].s);
		score.insert(make_pair(a[i].Name,a[i].s));
	}
	sort(a,a+n);
	//for (i=0;i<n;i++) printf("%s\n",a[i].Name.c_str());
	for (scanf("%d",&m),i=0;i<m;i++) scanf("%d",b+i);
	sort(b,b+m,cmp);
	Vas=GetString();
	Highest();
	Lowest();
	return 0;
}
