#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>

#define pb(x) push_back(x)
#define forn(i, n) for (int i = 0; i < n; ++i)
#define foreach(i, c) for (typeof(c.begin()) i = c.begin(); i != c.end(); ++i)

using namespace std;

typedef long long int64;

const int MAXN = 100010;

char buf[40];
int n, m;
string name[MAXN];
vector<int64> a, b;
int64 score, init_score;

struct cmp {
	const bool operator () (int i, int j) {
		if (a[i] != a[j])
			return a[i] > a[j];
		return name[i] < name[j];
	}
};


int main () {
	scanf("%d", &n);
	a.resize(n);
	forn(i, n) {
		int tmp;
		scanf("%s%d", buf, &tmp);
		a[i] = int64(tmp);
		name[i] = string(buf);
	}

	scanf("%d", &m);
	b.resize(m);
	forn(i, m) {
		int tmp;
		scanf("%d", &tmp);
		b[i] = int64(tmp);
	}
	forn(i, n - m)
		b.pb(0);
	scanf("%s", buf);
	string cname = string(buf);
	forn(i, n) {
		if (name[i] == cname)
			init_score = a[i];
	}

	vector<int> p(n);
	forn(i, n)
		p[i] = i;
	sort(p.begin(), p.end(), cmp());
	sort(b.begin(), b.end());

	// max
	int rmax = 1;
	int bp = 0;
	score = init_score + b[n - 1];
	forn(i, n) {
		//debug("%lld %s\n", a[p[i]], name[p[i]].c_str());
	}

	for (int i = 0; i < n; ++i) {
		if (name[p[i]] == cname)
			break;
		int64 cscore = a[p[i]] + b[bp];
		if (cscore < score || (cscore == score && name[p[i]] > cname)) {
			bp += 1;
			continue;
		}
		rmax += 1;
	}

	// min
	int rmin = n;
	bp = n - 1;
	score = init_score + b[0];

	for (int i = n - 1; i >= 0; --i) {
		if (name[p[i]] == cname)
			break;
		int64 cscore = a[p[i]] + b[bp];
		if (cscore > score || (cscore == score && name[p[i]] < cname)) {
			bp -= 1;
			continue;
		}
		rmin -= 1;
	}

	cout << rmax << " " << rmin << endl;
}

