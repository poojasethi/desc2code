#include <iostream>
#include <string.h>
#include <algorithm>
#include <string>
using namespace std;
struct node
{
	string na;
	long c;
};

const long maxn = 100001;


long n,m;
long b[maxn];
node g[maxn], wc[maxn];
string na;

bool cmp(node x, node y)
{
	return (x.c<y.c || (x.c==y.c && x.na>y.na));
}

void work()
{
	// cal max;
	sort(g,g+n,cmp);
	long k;
	node www;
	for (int i = 0; i !=n; ++i)
		if (g[i].na == na) {
			k = i;
			www = g[i];
			break;
		}
	for (long i = k; i != n; ++i) g[i] = g[i+1];
	g[n-1] = www;
	
	long ans;
	//max;
	for (long i = 1; i <= n; ++i) wc[i] = g[i-1];
	wc[n].c += b[n-1];

	ans = 0;
	long f = 0, r = n-2;
	for (long i = n-1; i >= 1; --i) {
		if (wc[i].c+b[f]>wc[n].c || (wc[i].c+b[f]==wc[n].c && wc[i].na<wc[n].na)) {
			++ans;
			--r;
		} else {
			++f;
		}
	}
	cout << ans+1;

	//min;
	for (long i = 1; i <= n; ++i) wc[i] = g[i-1];
	wc[n].c += b[0];
	ans = 0;
	f = 1; r = n-1;
	for (long i = 1; i < n; ++i) {
		if (wc[i].c+b[r]>wc[n].c || (wc[i].c+b[r]==wc[n].c && wc[i].na<wc[n].na)) {
			++ans;
			--r;
		} else {
			if (wc[i].c+b[f]>wc[n].c || (wc[i].c+b[f]==wc[n].c && wc[i].na<wc[n].na)) ++ans;
			++f;
		}
	}
	cout << " " << ans+1 << endl;
}

void init()
{
	cin >> n;
	for (long i = 0; i != n; ++i)
		cin >> g[i].na >> g[i].c;
	memset(b,0,sizeof(b));
	cin >> m;
	for (long i = 0; i != m; ++i) cin >> b[i];
	cin >> na;

	sort(b,b+n);
	return;
}

int main()
{
	init();
	work();
	return 0;
}