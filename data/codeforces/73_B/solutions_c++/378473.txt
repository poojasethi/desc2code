#include <iostream>
#include <string>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
struct data{
  string name;int pts;
  data(string _name,int _pts){name=_name;pts=_pts;}
  bool operator<(const data& w)const{return ((pts!=w.pts)?pts>w.pts:(name<w.name));}
};
int N,M;
vector<int> pr;
vector<data> V;
string PL;
char BUF[200];
int main(){
  //system("pause");
  int i,j,k,l;
  scanf("%d",&N);
  for(i=0;i<N;++i){
   int _P;
   scanf("%s%d",&BUF,&_P);
   V.push_back(data(BUF,_P));
                  }
  pr.resize(N);
  cin>>l;for(i=0;i<l;++i)cin>>pr[i];
  cin>>PL;
  sort(pr.rbegin(),pr.rend());
  sort(V.begin(),V.end());
  int BP,WP;
  vector<data> T;
  vector<data>::iterator it;
  // BEST
  T=V;
  j=N-1;
  BP=N;l=pr[0];
  for(it=T.begin();it!=T.end();++it)
   if(it->name==PL){l+=it->pts;T.erase(it);break;}
  it=T.begin();
  while(j>0){
   bool OK=false;
   while(it!=T.end()){                                             
    if(data(PL,l)<data(it->name,it->pts+pr[j])){
     OK=true;--BP;++it;
     break;
                                               }
    ++it;
                     }
   if(OK)--j;
   else break;
              }
  // WORST
  T=V;
  j=0;
  WP=1;l=pr[N-1];
  for(it=T.begin();it!=T.end();++it)
   if(it->name==PL){l+=it->pts;T.erase(it);break;}
  it=T.end()-1;
  while(j<N-1){
   bool OK=false;
   for(;it>=T.begin();--it)                                             
    if(data(it->name,it->pts+pr[j])<data(PL,l)){
     OK=true;++WP;--it;
     break;
                                               }
   if(OK)++j;
   else break;
              }
  cout<<BP<<' '<<WP<<'\n';
  //system("pause");
  return 0;
}
