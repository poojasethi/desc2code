#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <stdlib.h>
#include <ctime>
#include <set>
#include <map>
#include <queue>
#include <string>
#include <math.h>
#include <queue>
#include <memory.h>
#include <iostream>
#include <stack>
#include <complex>
 
using namespace std;
 
void ASS(bool b)
{
    if (!b)
    {
        ++*(int*)0;
    }
}
 
#define FOR(i, x) for (int i = 0; i < (int)(x); i++)
#define CL(x) memset(x, 0, sizeof(x))
 
#pragma comment(linker, "/STACK:106777216")
 
typedef vector<int> vi;
typedef long long LL;

const int N = 1 << 17;

struct S
{
	string s;
	int x;
};

bool operator < (const S& a, const S& b)
{
	return a.s < b.s;
}

S a[N];
int b[N];

int FF(int *b, int *c, int n)
{
	int p = 0;
	int res = 0;
	FOR(i, n)
	{
		while (p < n && c[p] < b[i])
			p++;
		if (p < n)
		{
			p++;
			res++;
		}
	}
	return res;
}

int Best(int n, int ind)
{
	int v = a[ind].x + b[n - 1];
	static int c[N];
	int p = 0;
	FOR(i, n)
	{
		if (i < ind)
			c[p++] = v - a[i].x - 1;
		if (i > ind)
			c[p++] = v - a[i].x;
	}
	sort(c, c + p);
	return n - 1 - FF(b, c, n - 1);
}

int Worst(int n, int ind)
{
	int v = a[ind].x + b[0];
	static int c[N];
	int p = 0;
	FOR(i, n)
	{
		if (i < ind)
			c[p++] = v - a[i].x;
		if (i > ind)
			c[p++] = v - a[i].x + 1;
	}
	sort(c, c + p);
	return FF(c, b + 1, n - 1);
}

int main()
{
	int n, m;
	cin >> n;
	FOR(i, n)
		cin >> a[i].s >> a[i].x;
	cin >> m;
	FOR(i, m)
		cin >> b[i];
	sort(a, a + n);
	sort(b, b + n);
	string vasya;
	cin >> vasya;
	int ind = 0;
	while (ind < n && a[ind].s != vasya)
		ind++;
	ASS(ind < n);

	int res0 = Best(n, ind) + 1;
	int res1 = Worst(n, ind) + 1;

	cout << res0 << " " << res1 << endl;

	return 0;
}