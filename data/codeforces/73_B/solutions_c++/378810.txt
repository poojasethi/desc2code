#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

#define MAXN 100010

struct Racer
{
  char name[22];
  int val;
  bool operator<(const Racer &p) const {
    return val > p.val || (val == p.val && strcmp(name, p.name) < 0);
  }
  bool operator=(const Racer &p) {
    val = p.val;
    strcpy(name, p.name);
  }
} racer[MAXN], player;

int bon[MAXN];
int n, m;

void init()
{
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) scanf("%s%d", racer[i].name, &racer[i].val);
  scanf("%d", &m);
  for (int i = 1; i <= m; ++i) scanf("%d", &bon[i]);

  char myname[22];
  scanf("%s", myname);
  for (int i = 1; i <= n; ++i) 
    if (strcmp(myname, racer[i].name) == 0) {
      player = racer[i];
      for (int j = i+1; j <= n; ++j) racer[j-1] = racer[j];
      --n;
      break;
    }
}

int high_cal()
{
  if (m > 0) player.val += bon[m];

  int rank = 1, i, j = m-1;
  for (i = 1; i <= n; ++i) {
    if (player < racer[i]) break;
    ++rank;
    --j;
  }
  
  Racer tmp;
  int ii = n;
  for (; 0 < j; --j) {
    tmp = racer[ii];
    tmp.val += bon[j];
    if (tmp < player) {
      ++rank;
      ++i;
    } else
      --ii;
  }
  
  if (m > 0) player.val -= bon[m];

  return rank;
}

int low_cal()
{
  int j;
  if (m == n+1) 
    player.val += bon[1], j = 2;
  else
    j = 1;

  int i, rank = 0;
  for (i = 1; i <= n; ++i) {
    if (player < racer[i]) break;
    ++rank;
  }

  int extr = (m-j+1)-(n-rank);
  if (extr > 0) j += extr;

  Racer tmp;
  for (; j <= m; ++j) {
    tmp = racer[i];
    tmp.val += bon[j];
    if (tmp < player) { ++rank; ++i; }
  }

  if (m == n+1) player.val -= bon[1];

  return rank+1;
}

void solve()
{
  sort(racer+1, racer+n+1);
  sort(bon+1, bon+m+1);


  int h = high_cal(), l = low_cal();
  printf("%d %d\n", h, l);
}

int main()
{
  init();
  solve();
  return 0;
}
