#include <iostream>
#include <map>
#include <string>
#include <algorithm>
#include <set>

using namespace std;

const int MAX_N = 100005;

int val[MAX_N];
int sum[MAX_N];
string name[MAX_N];

int solve2(int n, int x) {
	set < pair < int, int > > sums;
	for (int i = 0; i < n; i++)
		sums.insert(make_pair(sum[i], i));
	
	int valx = val[x] + sums.rbegin()->first; 
	set < pair < int, int > >::iterator jt = sums.end(); --jt;
	sums.erase(jt);
	
	int ans = 1;
	for (int i = 0; i < n; i++) if (i != x) {
		set < pair < int, int > >::iterator it;
		if (name[i] < name[x]) 
			it = sums.lower_bound(make_pair(valx - val[i], -1));
		else
			it = sums.upper_bound(make_pair(valx - val[i], 1000000000));
	
		if (it == sums.begin()) {
			ans++;
			jt = sums.end(); --jt;
			sums.erase(jt);
		}
		else {
			--it;
			sums.erase(it);
		}
	}

	return ans;
}

int solve1(int n, int x) {
	set < pair < int, int > > sums;
	for (int i = 0; i < n; i++)
		sums.insert(make_pair(sum[i], i));
	
	int valx = val[x] + sums.begin()->first; sums.erase(sums.begin());
	
	int ans = 1;
	for (int i = 0; i < n; i++) if (i != x) {
		set < pair < int, int > >::iterator it;
		if (name[i] < name[x])
			it = sums.lower_bound(make_pair(valx - val[i], -1));
		else
			it = sums.upper_bound(make_pair(valx - val[i], 1000000000));
		if (it == sums.end()) {
			sums.erase(sums.begin());
		}
		else {
			ans++;
			sums.erase(it);
		}
	}

	return ans;
}

int main() {
	int n; cin >> n;
	map < string, int > id;
	for (int i = 0; i < n; i++) {
		string s; int v;
		cin >> s >> v;
		name[i] = s;
		id[s] = i;
		val[i] = v;
	}

	int m; cin >> m;
	for (int i = 0; i < m; i++)
		cin >> sum[i];
	
	string s; cin >> s;
	int x = id[s];

	int ans1 = solve1(n, x);
	int ans2 = solve2(n, x);
	cout << min(ans1, ans2) << " " << max(ans1, ans2) << "\n";

	return 0;
}
