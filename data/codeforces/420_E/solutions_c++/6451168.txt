#include<bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)n;i++)
#define all(c) (c).begin(),(c).end()
#define mp make_pair
#define pb push_back
#define each(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define dbg(x) cerr<<__LINE__<<": "<<#x<<" = "<<(x)<<endl

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
const int inf = (int)1e9;
const double EPS = 1e-8, INF = 1e12, PI = acos(-1.0);
typedef complex<double> P;

inline double fix(double a){
	if(a >= 2 * PI) a -= 2 * PI;
	if(a < 0) a += 2 * PI;
	return a;
}

int n, d;
P c[20000];
int r[20000];

int main(){
	scanf("%d%d", &n, &d);
	
	vector<pair<double, int> > event;
	
	rep(i, n){
		
		int x, y;
		scanf("%d%d%d", &x, &y, r + i);
		c[i] = P(x, y);
		
		double dist = abs(c[i]);
		double lim = dist + r[i] + EPS;
		
		for(int k = (int)ceil((dist - r[i]) / d - EPS) * d; k < lim; k += d){
			
			double t = (dist * dist + k * k - r[i] * r[i]) / 2 / dist / k;
			t = acos(t);
			
			double a = fix(arg(c[i]) - t);
			double b = fix(arg(c[i]) + t);
			
			event.pb(mp(a - EPS, 1));
			event.pb(mp(b + EPS, -1));
			if(a > b) event.pb(mp(-EPS, 1));
		}
	}
	
	//rep(i, event.size()) cerr<<event[i].first<<" "<<event[i].second<<endl;
	
	sort(all(event));
	int ans = 0;
	int cur = 0;
	
	rep(e, event.size()){
		
		cur += event[e].second;
		ans = max(ans, cur);
	}
	cout << ans << endl;
	
	return 0;
}
