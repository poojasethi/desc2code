#include<bits/stdc++.h>
using namespace std;
#define sqr(v) (v)*(v)
#define sgn(v) (abs(v)<eps?0:(v)<0?-1:1)
#define MP make_pair
#define PB push_back
#define FI first
#define SE second 
typedef pair<double,double> PDD;
typedef pair<double,bool> PDB;
const double eps=1e-9;
const double pi=acos(-1);
vector<PDD> inv;
vector<PDB> no;
bool cmp(PDB a,PDB b)
{
	return a.FI<b.FI||sgn(a.FI-b.FI)==0&&a.SE>b.SE;
}
int main()
{
	int n,i,j,L,R;
	double d,x,y,D,rr;
	double len,l,r,tx,ty,aa,bb;
	int tmp=0,ans=0;
	scanf("%d%lf",&n,&d);
	for(i=0;i<n;++i)
	{
		scanf("%lf%lf%lf",&x,&y,&rr);
		len=sqrt(sqr(x)+sqr(y));
		L=ceil((len-rr)/d);
		R=floor((len+rr)/d);
		//cout <<i<<" "<<L<<" "<<R<<endl;
		for(j=L;j<=R;++j)
		{
			D=j*d;
			aa=(sqr(D)-sqr(rr)+sqr(x)+sqr(y))/2/x;
			bb=y/x;
			double a=sqr(bb)+1;
			double b=-2*aa*bb;
			double c=sqr(aa)-sqr(D);
			double delta=b*b-4*a*c;
			//cout <<delta<<endl; 
			if(sgn(delta)==0)
			{
				ty=-b/2/a;		
				tx=sqrt(sqr(D)-sqr(ty));
				l=atan2(ty,tx);
				inv.PB(MP(l,l));
			}
			else if(sgn(delta)>0)
			{
				ty=(-b+sqrt(delta))/2/a;
				tx=(aa-y/x*ty);
				l=atan2(ty,tx);
				ty=(-b-sqrt(delta))/2/a;
				tx=(aa-y/x*ty);
				r=atan2(ty,tx);
				if(l>r)swap(l,r);
				if(r-l>pi)
				{
					swap(l,r);
					++tmp;
				}
				inv.PB(MP(l,r));
			}
		}
	}
	n=inv.size();
	for(i=0;i<n;++i)
	{
		no.PB(MP(inv[i].FI,1));
		no.PB(MP(inv[i].SE,0));
	}
	sort(no.begin(),no.end(),cmp);
	n=no.size();
	for(i=0;i<n;++i)
	{
		if(no[i].SE)++tmp;
		else --tmp;
		ans=max(ans,tmp);
	}
	printf("%d\n",ans);
	return 0;
}
