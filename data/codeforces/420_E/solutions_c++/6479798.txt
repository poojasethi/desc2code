#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <map>
#define MAX 20000
#define PI 3.141592653589793
#define FOR(i, n) for (int i = 0; i < (n); ++i)
#define TR(it, c) for (typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)
using namespace std;

int n, d;
map<double, int> sweep;

int main() {
  const double EPS = 1.0e-8;
  const double MPI = 3.141592653589793L;
  const double TAU = MPI * 2;

  scanf("%d%d", &n, &d);
  int dd = d * d;
  FOR (i, n) {
    int px, py, pr;
    scanf("%d%d%d", &px, &py, &pr);

    int DD = px * px + py * py;
    int pr2 = pr * pr;
    double D = sqrtl(DD);
    int ks = max(1, (int) floor((D - pr) / d));
    int ke = (int) ceil((D + pr) / d);

    for (int k = ks; k <= ke; ++k) {
      int kkdd = k * k * dd;
      int kkddDDpr = kkdd - DD - pr2;
      int prD2 = 2 * pr * D;
      if (kkddDDpr >= -prD2 && kkddDDpr <= prD2) {
        double t0 = atan2l(py, px);
        double dt = acosl((kkdd + DD - pr2) / (2 * k * d * D));
        double t1 = t0 - dt, t2 = t0 + dt;
        if (t1 + EPS < -PI) t1 += TAU;
        if (t2 > PI + EPS) t2 -= TAU;
        if (t1 < t2 + EPS) {
          ++sweep[t1 - EPS];
          --sweep[t2 + EPS];
        } else {
          ++sweep[t1 - EPS];
          --sweep[MPI + EPS];
          ++sweep[-MPI - EPS];
          --sweep[t2 + EPS];
        }
      }
    }
  }

  int maxf = 0, f = 0;
  TR (it, sweep) {
    f += it->second;
    if (f > maxf) maxf = f;
  }

  printf("%d\n", maxf);

  return 0;
}
