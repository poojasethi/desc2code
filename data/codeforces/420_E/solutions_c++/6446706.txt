#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdio>
#include <cmath>
#include <deque>
#include <set>


using namespace std;

#define MAXN 1024*1024
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define sz(a) (int)(a.size())
#define all(a) a.begin(), a.end()
#define R(a) ((a)%mod)

typedef long long ll;
typedef vector<int> VI;
typedef vector<ll> VL;
typedef vector<VI> VVI;
typedef pair<int, int> PI;
typedef vector<PI> VPI;
typedef vector<VPI> VVPI;
typedef vector<VVPI> VVVPI;
typedef vector<VVI> VVVI;

int n, cnt, ans;
vector< pair<double, int> > q;
double d, lt, rt, dist, dist2, alpha, theta, D, TP = 2.0*acos(-1.0);
vector<double> x, y, r;

double norm ( double t )
{
	while( t < 0 )
		t += TP;
	while(t > TP)
		t -= TP;
	return t;
}

int main (int argc, char const* argv[])
{
	ios::sync_with_stdio(false);
	
	cin >> n >> d;
	
	x = vector<double> (n), y = vector<double> (n), r = vector<double> (n);
	
	for (int i = 0; i < n; i += 1)
		cin >> x[i] >> y[i] >> r[i];
	
	for (int i = 0; i < n; i += 1)
	{
		dist2 = x[i]*x[i] + y[i]*y[i];
		dist = sqrt(dist2);
		theta = atan2(y[i], x[i]);
		int k = int((dist-r[i])/d);
		while(double(k)*d+r[i] < dist)
			k++;
		for (D = double(k)*d; D <= dist+r[i]+(1e-9); D += d)
		{
			alpha = acos( (D*D+dist2-r[i]*r[i]) / (2.0*D*dist) );			
			lt = norm(theta-alpha), rt = norm(theta+alpha);
//			cout << i << ' ' << int(D/d+.5) <<  ' ' <<  (theta*360.0/TP) << ' ' << (lt*360.0/TP)  << ' ' << (rt*360.0/TP)  << '\n';
//			cout << ">>> " << lt << ' ' << rt << '\n';
			if(lt <= rt)
			{
				q.pb(mp(lt,-1));
				q.pb(mp(rt, 1));
			}
			else 
			{
				q.pb(mp(0.0,-1));
				q.pb(mp(rt , 1));
				
				q.pb(mp(lt ,-1));
				q.pb(mp(TP , 1));
			}
			
		}
	}
	sort(all(q));
	cnt = 0;
	ans = 0;
	for (int i = 0; i < sz(q); i += 1)
	{
		if(q[i].y == -1)
			cnt++;
		else
			cnt--;
		ans = max(ans, cnt);
//		cout << "-> " << q[i].x << ' ' << q[i].y << ' ' << cnt << '\n';
	}
	cout << ans << '\n';
	return 0;
}














