//============================================================================
// Name        : cf.cpp
// Author      : HX
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#define RD(x) scanf("%d", &x)
#define REP(i, n) for (int i=0; i<(n); i++)
#define REP1(i, n) for (int i=1; i<=(n); i++)

using namespace std;
#define  N   111111
#define  M   22222
#define  eps 1e-9
#define  pi  acos(-1.0)
#define  inf 0XFFFFFFFll
#define  mod 1000000007ll
#define  LL  long long

int n, d;
int x[N], y[N], r[N];

double getangle(int x, int y) {
	return atan2(y, x) < 0.0 ? atan2(y, x) + 2.*pi : atan2(y, x);
}
double dist(int x, int y) {
	return sqrt(x*x+y*y);
}
struct node {
	double first;
	int second;
	node(){}
	node(double x, int y) : first(x), second(y){}
	friend bool operator < (const node &a, const node &b) {
		return a.first < b.first - eps || !(b.first < a.first - eps) && a.second > b.second;
	}
};
vector<node> a;
int main() {
//	freopen("cf.txt", "r", stdin);
	RD(n); RD(d);
	REP(i, n) {
		RD(x[i]);
		RD(y[i]);
		RD(r[i]);
	}
	REP(i, n) {
		double theta = getangle(x[i], y[i]);
		double l = dist(x[i], y[i]);
		for (double j=d; j<l+r[i]+eps; j+=d) {
			if (j < l - r[i] - eps)
				continue;
			double ad = acos((j*j+l*l-r[i]*r[i]) / (2.*j*l));
			a.push_back(node(theta-ad, 1));
			a.push_back(node(theta+ad, -1));
			a.push_back(node(theta-ad+2.*pi, 1));
			a.push_back(node(theta+ad+2.*pi, -1));
		}
	}
	sort(a.begin(), a.end());
	int ans = 0, sum = 0;
	REP(i, a.size()) {
		sum += a[i].second;
		ans = max(ans, sum);
	}
	cout << ans << endl;
	return 0;
}
