#include <iostream>
#include <cmath>
#include <math.h>
#include <vector>
#include <cstdio>
#include <algorithm>
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1);

struct ray
{
    double angle ;
    int w ;

    ray( double _angle , int _w )
    {
        angle = _angle ;
        w = _w;
    }

};

bool compare( ray a , ray b )
{
    if ( abs( a.angle - b.angle ) > eps )
    {
        if ( a.angle < b.angle ) return true;
        else return false;
    }
    else
    {
        if ( a.w == 1 ) return true ;
        else return false;
    }
}

vector < ray > A;

double Normalize( double alfa )
{
    if ( alfa > 0 && alfa < 2*PI ) return alfa;
    if ( alfa < 0 ) return alfa + ( 2 * PI ) ;
    if ( alfa > 2*PI ) return alfa - ( 2 * PI );
}

int main()
{

    //freopen("input.in" , "r" , stdin );

    int N ;
    int start = 0;
    double d ;

    cin >> N >> d;


    for ( int i = 1 ; i <= N ; i++ )
    {
        double x , y , r;
        cin >> x >> y >> r;

        double ToPoint = d ;
        double ToCenter = sqrt( x * x + y * y );
        while ( ToPoint < ToCenter + r + eps )
        {
            if ( ToPoint < ToCenter - r - eps )
            {
                ToPoint += d ;
                continue;
            }

            double angle = atan2( y , x ) ;
            Normalize( angle );

            double Q = (ToPoint * ToPoint) + (ToCenter * ToCenter) - (r * r) ;
            Q = Q / ( 2 * ToPoint * ToCenter );
            if ( Q > 1 ) Q = 1 ;
            if ( Q < -1 ) Q = -1 ;

            if ( (angle - acos(Q) - eps ) < 0 && ( angle + acos(Q) + eps ) > 0 ) start++;

            A.push_back( ray( Normalize( angle + acos(Q) + eps) , -1) );
            A.push_back( ray( Normalize( angle - acos(Q) - eps) , 1 ) );
            ToPoint += d;

        }


    }

    //cout << start << endl;
    int best , Sum ;
    best = Sum = 0;
    sort( A.begin() , A.end() , compare );

    for ( int i = 0 ; i < A.size() ; i++ )
    {
        //cout << A[i].angle << " " << A[i].w << endl;
        Sum += A[i].w;
        if ( Sum > best ) best = Sum;
    }

    cout << best + start << endl;

    return 0;
}
