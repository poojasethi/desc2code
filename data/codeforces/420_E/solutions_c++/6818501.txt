#include<cmath>
#include<cstdio>
#include<cstring>
#include<utility>
#include<algorithm>
using namespace std;

typedef long double LD;
typedef pair<LD, int> PI;

const int N = 20005;
LD pi = acos(-1);

int a[N], b[N], r[N];
LD dio[N];
PI srt[N*100];
int top, n, d;

bool equ(LD a, LD b){return fabs(a-b) < 1e-15;}
bool cmp(PI a, PI b){return equ(a.first, b.first) ? a.second<b.second : a.first < b.first;}

void upd(LD a, LD b)
{
	srt[++top] = PI(a, -1);
	srt[++top] = PI(b, 1);
}

void equal(LD &x, LD &y, LD a, LD b, LD c)
{
	LD q = sqrt(b*b - 4*a*c);
	x = (-b + q) / (a+a);
	y = (-b - q) / (a+a);
}

void solve(LD d, LD a, LD b, LD c)
{
	LD x1, x2, y1, y2;
	if(b != 0)
	{
		LD D = (d*d - c*c + a*a + b*b) / (b+b);
		equal(x1, x2, (b*b+a*a)/(b*b), (-2*D*a)/b, D*D-d*d);
		y1 = D - x1*a/b, y2 = D - x2*a/b;
	}
	else
	{
		x1 = x2 = (d*d-c*c+a*a+b*b) / (a+a);
		y1 = sqrt(LD(d)*d - x1*x1);
		y2 = -y1;
	}
	
	LD a1 = atan2(y1, x1), a2 = atan2(y2, x2);
	if(a1 > a2) swap(a1, a2), swap(x1, x2), swap(y1, y2);
	if(a2 - a1 >= pi)
	{
		upd(a2, pi), upd(-pi, a1);
	}
	else upd(a1, a2);
}

int main()
{
	
	scanf("%d%d", &n, &d);
	for(int i=1; i<=n; i++)
	{
		scanf("%d%d%d", &a[i], &b[i], &r[i]);
		dio[i] = sqrt(a[i] * a[i] + b[i] * b[i]);
	}
	
	for(int round = 1; ; round ++)
	{
		int R = d * round;
		
		int out(1);
		for(int i=1; i<=n; i++)
		{
			if(dio[i] + r[i] >= R)
			{
				out = 0;
				if(dio[i] - r[i] <= R)
				{
					solve( R, a[i], b[i], r[i] );
				}
			}
		}
		if(out) break;
	}
	
	int ans(0);
	sort(srt+1, srt+top+1, cmp);
	for(int i=1, j=0; i<=top; i++)
	{
		j-= srt[i].second;
		if(j>ans) ans = j;
	}
	printf("%d\n", ans);
	
	return 0;
}
