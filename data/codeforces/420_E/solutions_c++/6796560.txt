#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>

using namespace std;

typedef long long LL;
typedef double dbl;

#define Abs(t) ( (t) > 0 ? (t) : -(t) )
#define Sqr(t) ( (t) * (t) )

void setIO(string St) {
    string IN = St + ".in" , OUT = St + ".out";
    freopen(IN.c_str(),"r",stdin);
    freopen(OUT.c_str(),"w",stdout);
}

const dbl EPS = 1e-10;
const dbl pi = 3.1415926535897932384626433832795;

int sgn(dbl t) {
    if ( fabs(t) < EPS ) return 0;
    if ( t < EPS ) return -1;
        else return 1;
}

struct Motion{
    dbl t; int cz;
    Motion() {}
    Motion(dbl T,int CZ) : t(T) , cz(CZ) {}
    friend bool operator< (const Motion &A,const Motion &B) {
        int t = sgn(A.t - B.t);
        if ( t == 0 ) return A.cz > B.cz;
        return t == -1;
    }
} P[1000008];

int N,M = 0;
dbl D;

int main() {
   // setIO("e");
    scanf("%d%lf",&N,&D);
    
    M = 0;
    int Ans = 0;
    for (int i = 1; i <= N; i++) {
        dbl Ox,Oy,R;
        scanf("%lf%lf%lf",&Ox,&Oy,&R);
        
        dbl dO = sqrt( Sqr(Ox) + Sqr(Oy) );
        dbl mid = atan2(Ox,Oy) + pi;
        dbl t = (int)( (dO - R) / D ) * D;
        while ( t < (dO - R) ) t += D;
        for (; t <= (dO + R); t += D) {
            dbl da = acos( (t * t + dO * dO - R * R) / (2.0 * t * dO) );
            dbl t1 = mid - da , t2 = mid + da;
            if ( sgn(t1) == -1 ) Ans++ , t1 += 2.0 * pi;
            if ( t2 >= 2.0 * pi ) Ans++ , t2 -= 2.0 * pi;
            P[++M] = Motion(t1,1);
            P[++M] = Motion(t2,-1);
        }
    }
    sort(P + 1,P + M + 1);
    /*for (int i = 1; i <= M; i++)
        printf("%.5f %d\n",P[i].t,P[i].cz);*/
    int Max = Ans;
    for (int i = 1; i <= M; i++) {
        Ans += P[i].cz;
        if ( Ans > Max ) Max = Ans;
        while ( i < M && sgn(P[i].t - P[i + 1].t) == 0 ) {
            Ans += P[++i].cz;
            if ( Ans > Max ) Max = Ans;
        }
    }
    printf("%d\n",Max);
    return 0;
}
