#include<stdio.h>
#include<math.h>
#include<algorithm>
using namespace std;
const int maxn=20050,maxp=800050,big=1e8;
const double eps=1e-10,PI=acos(-1);
int dcmp(double x)
{
	if(x>eps) return 1;
	else if(x<-eps) return -1;
	return 0;
}
struct Point
{
	double x,y;
	Point() {}
	Point(double x,double y):x(x),y(y) {}
	void scan() { scanf("%lf%lf",&x,&y); }
};
Point O=Point(0,0);
typedef Point Vector;
Vector operator + (Point A,Point B) { return Vector(A.x+B.x,A.y+B.y); }
Vector operator - (Point A,Point B) { return Vector(A.x-B.x,A.y-B.y); }
Vector operator * (Vector A,double k) { return Vector(A.x*k,A.y*k); }
Vector operator / (Vector A,double k) { return Vector(A.x/k,A.y/k); }
double Len(Vector A) { return A.x*A.x+A.y*A.y; }
double Ang(Vector A) { return atan2(A.y,A.x); }
struct Circle
{
	Point p;
	double r;
	Circle() {}
	Circle(Point p,double r):p(p),r(r) {}
	void scan() { p.scan(),scanf("%lf",&r); }
}c[maxn];
int n,d,ps=0,ans=0;
struct Inter
{
	double rad;
	int p;
	Inter() {}
	Inter(double rad,int p):rad(rad),p(p) {}
	bool operator < (const Inter &yy) const { return !dcmp(rad-yy.rad)?p>yy.p:dcmp(rad-yy.rad)<0; }
}po[maxp];
void CirCirInter(Circle c1,Circle c2)
{
	Vector v=c2.p-c1.p;
	double d=sqrt(Len(v)),ang=Ang(v),rad=acos((d*d+c1.r*c1.r-c2.r*c2.r)/c1.r/d/2);
	//printf("%lf %lf\n",ang/PI*180,rad/PI*180);
	po[ps++]=Inter(ang-rad,1);
	po[ps++]=Inter(ang+rad,-1);
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("data.in","r",stdin);
	freopen("data.out","w",stdout);
#endif
	int i,j;
	scanf("%d%d",&n,&d);
	for(i=0;i<n;i++)
	{
		c[i].scan();
		double dis=Len(c[i].p);
		int lo=(sqrt(dis)-c[i].r-eps)/d+1,hi=(sqrt(dis)+c[i].r)/d;
		//printf("%d %d\n",lo,hi);
		for(j=max(lo,1);j<=hi;j++)
			CirCirInter(Circle(O,j*d),c[i]);
	}
	sort(po,po+ps);
	//for(i=0;i<ps;i++) printf("%lf ",po[i].rad/PI*180); printf("\n");
	//for(i=0;i<ps;i++) printf("%d ",po[i].p); printf("\n");
	for(i=j=0;i<ps;i++)
		j+=po[i].p,ans=max(ans,j);
	printf("%d\n",ans);
	return 0;
}
