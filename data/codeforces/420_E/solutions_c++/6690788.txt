#include <cmath>
#include <map>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <bitset>
#include <memory.h>
#include <functional>
#include <queue>
#include <fstream>
#include <ctime>
#include <deque>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <cctype> 
#include <numeric>
#include <iomanip>
#include <assert.h>
using namespace std;
#define sqr(_) ((_)*(_))

typedef long long LL;

typedef pair<double, int> Pdi;
#define x first
#define y second
#define mp make_pair
#define pb push_back

int n, d, x, y;
vector<Pdi> w;
double D, r;
int Mashiro;

void solve(double R)
{
	if (D + R < r + 1e-10)
	{
		++Mashiro;
		return ;
	}
	if (R + r < D - 1e-10)
		return ;
	if (R > D + r + 1e-10)
		return ;
	double del = acos((sqr(R) + sqr(D) - sqr(r)) / 2.0 / R / D);
	double agl = atan2((double)y, (double)x);
	double l = agl - del, r = agl + del;
	if (l < -M_PI)
		w.pb(mp(-M_PI, -1)), w.pb(mp(l + M_PI * 2, -1)), w.pb(mp(M_PI, 1));
	else
	w.pb(mp(l, -1));
	if (r > M_PI)
		w.pb(mp(M_PI, 1)), w.pb(mp(-M_PI, -1)), w.pb(mp(r - M_PI * 2, 1));
	else
	w.pb(mp(r, 1));
}
int main()
{
	scanf("%d%d", &n, &d);
	for (int i = 1; i <= n; ++i)
	{
		scanf("%d%d%lf", &x, &y, &r);
		D = sqrt((double)sqr(x) + sqr(y));
		for (int k = max((int)((D - r) / d), 1); k <= (int)((D + r) / d + 1e-10); ++k)
			solve(k * d);
	}
	int Tohka = 0;
	sort(w.begin(), w.end());
	for (int i = 0, s = 0; i < (int)w.size(); ++i)
	{
		s += w[i].y;
		Tohka = max(Tohka, -s);
	}
	cout << Tohka + Mashiro << endl;
	
	return 0;
}
