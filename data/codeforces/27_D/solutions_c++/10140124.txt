#include <cstdio>
#include <cstring>
#include <algorithm>

struct EG{
	int x, y;
}edge[110];
int n, m;
int inside[110];

bool cross(int i, int j)
{
	if(edge[i].y <= edge[j].x || edge[i].x >= edge[j].y) return 0;
	if(edge[i].x <= edge[j].x && edge[i].y >= edge[j].y) return 0;
	if(edge[i].x >= edge[j].x && edge[i].y <= edge[j].y) return 0;
	return 1;
}

bool dfs(int x, bool flag)
{
	for(int i = 1; i <= m; i++) if(cross(x, i))
	{
		if(inside[i] == -1)
		{
			inside[i] = !flag;
			if(!dfs(i, !flag)) return 0;
		}
		else if(inside[i] == flag) return 0;
	}
	return 1;
}

bool solve()
{
	memset(inside, -1, sizeof(inside));
	for(int i = 1; i <= m; i++) if(inside[i] == -1)
	{
		inside[i] = 1;
		if(!dfs(i, 1)) return 0;
	}
	return 1;
}

int main()
{
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= m; i++)
	{
		scanf("%d%d", &edge[i].x, &edge[i].y);
		if(edge[i].x > edge[i].y) std::swap(edge[i].x, edge[i].y);
	}
	if(!solve()) puts("Impossible");
	else{
		for(int i = 1; i <= m; i++) putchar(inside[i] ? 'i' : 'o');
		puts("");
	}
	return 0;
}
 	 	 	 	 				 		   				 				 		