#include <iostream>
#include <vector>

using namespace std;

bool dfs(vector<vector<int> >& g, vector<int>& c, int v, int z)
{
	if (c[v] == -1)
		c[v] = z;
	else if (c[v] == z)
		return true;
	else
		return false;
	
	for (int i = 0; i < g[v].size(); ++i)
	{
		if (!dfs(g, c, g[v][i], !z))
			return false;
	}
	
	return true;
}

int main(int argc, char* argv[])
{
	int n, m;
	cin >> n >> m;
	
	vector<pair<int,int> > v;
	
	for (int i = 0; i < m; ++i)
	{
		int a, b;
		cin >> a >> b;
		v.push_back(make_pair(min(a, b), max(a, b)));
	}
	
	vector<vector<int> > g(m);
	
	for (int i = 0; i < v.size() - 1; ++i)
	{
		for (int j = i + 1; j < v.size(); ++j)
		{
			if (((v[i].first < v[j].first) && (v[i].second > v[j].first) && (v[i].second < v[j].second)) ||
				((v[i].first > v[j].first) && (v[i].first < v[j].second) && (v[i].second > v[j].second)))
			{
				g[i].push_back(j);
				g[j].push_back(i);
			}
		}
	}
	
	vector<int> c(m, -1);
	
	bool r = true;
	for (int i = 0; i < m; ++i)
	{
		if (c[i] == -1)
			r &= dfs(g, c, i, 0);
	}
	
	if (r)
	{
		for (int i = 0; i < m; ++i)
			cout << ((c[i] == 0) ? 'i' : 'o');
		cout << endl;
	}
	else
		cout << "Impossible" << endl;
	
	return 0;
}