//In the name of God
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

typedef pair<int, int> pii;
const int N = 1e4 + 10;

int n, m, par[N], col[N];
pii e[N];

int find_par(int v) {
	return par[v] == v? v: par[v] = find_par(par[v]);
}
bool intersect(pii x, pii y) {
	return x.first < y.first && y.first < x.second && x.second < y.second;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		e[i] = pii(min(u, v) - 1, max(u, v) - 1);
	}
	for (int i = 0; i < 2 * m; i++)
		par[i] = i;
	for (int i = 0; i < m; i++)
		for (int j = 0; j < i; j++)
			if (intersect(e[i], e[j]) || intersect(e[j], e[i])) {
				par[find_par(i)] = find_par(j + m);
				par[find_par(j)] = find_par(i + m);
			}
	for (int i = 0; i < m; i++)
		if (find_par(i) == find_par(i + m)) {
			cout << "Impossible\n";
			return 0;
		}
	for (int i = 0; i < m; i++) {
		if (!col[par[i]]) {
			col[par[i]] = 1;
			col[par[i + m]] = 2;
		}
		cout << (col[par[i]] == 1? 'i': 'o');
	}
	cout << '\n';
	return 0;
}
