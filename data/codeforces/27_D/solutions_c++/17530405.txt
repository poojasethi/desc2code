#include <cstdio>
#include <cstring>
#include <algorithm>
#define repu(i,x,y) for (int i=x; i<=y; ++i)
using namespace std;

int n,m,a[110],b[110],ans[110];
struct edge
{
    int v;
    edge *nxt;
} pool[40100],*tp=pool,*fst[210];

void addedge(int u,int v)
{
    *tp=(edge){v,fst[u]},fst[u]=tp++;
    *tp=(edge){u,fst[v]},fst[v]=tp++;
}

void dfs(int x,int w)
{
    ans[x]=w;
    for (edge *i=fst[x]; i; i=i->nxt)
        if (ans[i->v]!=w)
            dfs(i->v,w);
}

int main()
{
    scanf("%d%d",&n,&m);
    repu(i,1,m)
    {
        scanf("%d%d",&a[i],&b[i]);
        if (a[i]>b[i])
            swap(a[i],b[i]);
        repu(j,1,i-1)
            if (a[i]<a[j] && a[j]<b[i] && b[i]<b[j] || a[j]<a[i] && a[i]<b[j] && b[j]<b[i])
                addedge(i,j+m),addedge(i+m,j);
    }
    memset(ans,-1,sizeof(ans));
    repu(i,1,m)
        if (ans[i]==-1)
        {
            dfs(i,1),dfs(i+m,0);
            if (!ans[i])
            {
                printf("Impossible\n");
                return 0;
            }
        }
    repu(i,1,m)
        printf(ans[i]?"i":"o");
    return 0;
}