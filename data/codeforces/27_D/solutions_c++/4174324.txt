//In the name of God
#include <iostream>
#include <vector>
using namespace std;

typedef pair<int, int> pii;
const int N = 1e4 + 10;

int n, m;
pii e[N];
vector<int> adj[100];
bool mark[N], col[N], flag;

bool intersect(pii x, pii y) {
	return x.first < y.first && y.first < x.second && x.second < y.second;
}
void dfs(int v, bool c) {
	mark[v] = true, col[v] = c;
	for (int i = 0; i < adj[v].size(); i++) {
		int u = adj[v][i];
		if (mark[u])
			flag = flag || col[v] == col[u];
		else
			dfs(u, !c);
	}
}
int main() {
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int u, v;
		cin >> u >> v;
		if (u > v)
			swap(u, v);
		e[i] = pii(--u, --v);
	}
	for (int i = 0; i < m; i++)
		for (int j = 0; j < i; j++)
			if (intersect(e[i], e[j]) || intersect(e[j], e[i])) {
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < adj[i].size(); j++)
			cerr << adj[i][j] << ' ';
		cerr << '\n';
	}
	for (int i = 0; i < m; i++)
		if (!mark[i])
			dfs(i, false);
	if (flag)
		cout << "Impossible";
	else
		for (int i = 0; i < m; i++)
			cout << (col[i]? 'o': 'i');
	cout << '\n';
	return 0;
}
