#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int n,e;
int x[123],y[123],col[123];
vector <int> g[123];
inline void check (int a1, int a2, int a3, int a4, int b1, int b2){
    if (a1==a3 || a1==a4 || a2==a3 || a2==a4)
        return;
    if (a1>a2) swap(a1,a2);
    if (a3>a4) swap(a3,a4);
    if (a2<a3 || a4<a1) return;
    if (a1<a3 && a4<a2) return;
    if (a3<a1 && a2<a4) return;
    g[b1].push_back (b2);
    g[b2].push_back (b1);
}
inline void dfs (int x, int c){
    col[x]=c;
    for (int i=0; i<(int)g[x].size(); i++) if (col[g[x][i]]==0)
        dfs(g[x][i],3-c);
}
int main(){
    cin >> n >> e;
    for (int i=1; i<=e; i++){
        cin >> x[i] >> y[i];
    }
    for (int i=1; i<=e; i++)
        for (int j=i+1; j<=e; j++)
            check(x[i],y[i],x[j],y[j],i,j);
    for (int i=1; i<=e; i++) if (col[i]==0)
        dfs(i,1);
    for (int i=1; i<=e; i++)
        for (int j=0; j<(int)g[i].size(); j++) if (col[i]==col[g[i][j]]){
            cout << "Impossible" << endl;
            return 0;
        }
    for (int i=1; i<=e; i++)
        cout << ((col[i]==1) ? 'i' : 'o');
    cout << endl;
    return 0;
}
