#include <cstdio>
#include <vector>
using namespace std;

#define N 100

int n, m, g = 1;
int vet[N][2], col[N];
vector<int> adj[N];

void dfs(int p, int c)
{
	col[p] = c;
	for (int i = 0; i < adj[p].size(); ++i)
	{
		int u = adj[p][i];
		if (!col[u]) dfs(u, 3-c);
		if (col[u] != 3-c) g = 0;
	}
}

bool good(int a, int b)
{
	bool l = 0;
	if (vet[a][0] == vet[b][0] || vet[a][0] == vet[b][1] || vet[a][1] == vet[b][0] || vet[a][1] == vet[b][1]) return false;
	int k = vet[a][0];
	while (1)
	{
		k = (k+1)%(n+1);
		if (!k) k = 1;
		if (vet[a][1] == k) return l;
		else if (vet[b][0] == k || vet[b][1] == k)
		{
			if (l) return false;
			l = 1;
		}
	}
	return true;
}

int main()
{
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i)
	{
		scanf("%d%d", &vet[i][0], &vet[i][1]);
		for (int j = 0; j < i; ++j)
		{
			if (good(i, j)) adj[i].push_back(j), adj[j].push_back(i);
		}
	}
	for (int i = 0; i < m; ++i) if (!col[i])
		dfs(i, 1);
	if (!g) printf("Impossible\n");
	else
	{
		for (int i = 0; i < m; ++i)
			printf("%c", col[i] == 1 ? 'i' : 'o');
		printf("\n");
	}
}

