#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

typedef pair<int, int> pii;

vector<int> adj[200];
pii edge[200];
int n, m, lable[200];
bool mark[200];

void inp();
bool dfs(int v, int l);

int main() {
	inp();
	for (int i = 0; i < m; i++) 
		for (int j = i + 1; j < m; j++) {
			int x1 = edge[i].first, y1 = edge[i].second;
			int x2 = edge[j].first, y2 = edge[j].second;
			if ((x2 > x1 && x2 < y1 && y2 > y1) || (x2 < x1 && y2 > x1 && y2 < y1)) {
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	for (int i = 0; i < m; i++) {
		if (!mark[i]) 
			if (!dfs(i, 0)) {
				cout << "Impossible\n";
				return 0;
			}
	}
	for (int i = 0; i < m; i++) 
		if (lable[i])
			cout << 'i';
		else 
			cout << 'o';
	cout << '\n';
	return 0;
}
void inp() {
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int x, y;
		cin >> x >> y;
		x--, y--;
		edge[i] = pii(min(x, y), max(x, y));
	}
}
bool dfs(int v, int l) {
	if (mark[v]) {
		if (lable[v] != l)
			return false;
		return true;
	}
	mark[v] = true;
	lable[v] = l;
	bool res = true;
	for (int i = 0; i < adj[v].size(); i++) 
		res = res && dfs(adj[v][i], 1 - l);
	return res;
}
