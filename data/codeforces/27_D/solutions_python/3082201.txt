from collections import defaultdict

n,m = map(int, raw_input().split())

vertices = [map(int, raw_input().split()) for _ in xrange(m)]
  

graph = defaultdict(set)
for i, u in enumerate(vertices):
  for j, v in enumerate(vertices):
    a, b = sorted(u)
    c, d = sorted(v)
    if a == c or c == b or a == d or d == b:
      continue
    if a < c < b and not a < d < b:
      graph[i].add(j)
      graph[j].add(i)

def dfs(node, myside, otherside):
  myside.add(node)

  for neigh in graph[node]:
    if neigh in myside:
      print "Impossible"
      exit()
    if neigh not in otherside:
      dfs(neigh, otherside, myside)

inside = set()
outside = set()
for v in xrange(m):
  if v not in inside and v not in outside:
    dfs(v, inside, outside)


ret = ['_' for _ in xrange(m)]
for i in inside:
  ret[i] = 'i'
for o in outside:
  ret[o] = 'o'
print ''.join(ret)



      
    
