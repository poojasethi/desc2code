#include <stdio.h>
#include <vector>
#include <algorithm>
#include <set>
#include <utility>
#include <iostream>
#include <string>
#include <math.h>
#include <string.h>
#include <stack>
#include <iomanip>
#include <map>
#include <queue>
using namespace std;
//printf("%.7f\n", double value);

typedef long long ll;
const int mod =1e9 + 9; 
int m;
map<pair<int,int> , int> cubes;
int x[100001], y[100001];
bool del[100001];

bool critical(int index) {
  for(int px=x[index]-1; px<=x[index]+1; px++){
    int py = y[index]+1;
    int p = cubes[make_pair(px,py)]-1;
    if(p>=0 && !del[p]) {
      int children =0;
      for(int cpx=px-1; cpx<=px+1; cpx++){
        int c = cubes[make_pair(cpx,py-1)]-1;
        if(c>=0 && !del[c])
          children++;
      }
      if(children == 1) return true;
    }
  }
  return false;
}

int main () {
  cin >> m;
  for(int i=0; i< m; i++) {
    cin >> x[i] >> y[i];
    cubes[make_pair(x[i],y[i])] = i+1;
  }

  set<int> s;
  for(int i=0; i<m; i++)
    if(!critical(i)) s.insert(i);
  ll res = 0;
  ll turn = 0;
  while(!s.empty()) {

    int biggest;
    if(turn%2==0) biggest = *s.rbegin();
    else biggest = *s.begin();
    //cout << biggest << endl;
    s.erase(biggest);
    if(critical(biggest)) continue;
    turn ++;
    res = (res*m + biggest) % mod;
    del[biggest]=true;

    for(int i=x[biggest]-1; i<=x[biggest]+1; i++) {
      int child = cubes[make_pair(i, y[biggest]-1)]-1;
      if(child >=0 && !critical(child) && !del[child]) s.insert(child);
    }
  }

  cout << res << endl;


  return 0;
}