#include <iostream>
#include <cstdio>
#include <algorithm>
#include <set>
#include <map>
#define mp make_pair
const int mod = 1000000009;
const int MAXN = 100000;
using namespace std;
typedef pair<int,int> pii;
int x[MAXN +10],y[MAXN +10],ans[MAXN +10];
set<int> S;
map<pii,int> M;
bool check(int i)
{
	int Y = y[i]+1, X = x[i]-1;
	if(M.count(mp(X, Y)) && !M.count(mp(X, Y-1)) && !M.count(mp(X-1, Y-1)))
		return false;
	X++;
	if(M.count(mp(X, Y)) && !M.count(mp(X+1, Y-1)) && !M.count(mp(X-1, Y-1)))
		return false;
	X++;
	if(M.count(mp(X, Y)) && !M.count(mp(X+1, Y-1)) && !M.count(mp(X, Y-1)))
		return false;
	return true;
}
void updata(pii nt)
{
	if(M.count(nt))
	{
		int k = M[nt];
		if(check(k))
			S.insert(k);
	}
}
int main()
{
	int n,i,k;
	scanf("%d",&n);
    for(i = 0;i < n;i++)
	{
		scanf("%d%d",&x[i],&y[i]);
		M[mp(x[i],y[i])] = i;
	}
	for(i = 0;i < n;i++)
		if(check(i))
			S.insert(i);
	for(i = 0;i < n;i++)
	{
		do{
		if(i&1)
			k = *S.begin();
		else
			k = *S.rbegin();
			S.erase(k);
		}while(!check(k));
		ans[i] = k;
		M.erase(mp(x[k],y[k]));
		updata(mp(x[k]-1,y[k]-1));
		updata(mp(x[k],y[k]-1));
		updata(mp(x[k]+1,y[k]-1));
	}
	int cnt = 0;
	for(i = 0;i < n;i++)
		cnt = ((long long)cnt * n + ans[i]) % mod;
	printf("%d\n",cnt);
    return 0;    
}
