#include <stdio.h>
#include <algorithm>
#include <map>
#include <set>

using namespace std;

#define NMAX 100000
#define K 1000000009

struct point{
	int y,x;
	bool operator<(const point b)const{return y==b.y?x<b.x:y<b.y;}
};

int n;
long long ans=0;

int dy[8]={1,1,1,0,0,-1,-1,-1};
int dx[8]={-1,0,1,-1,1,-1,0,1};

int y[NMAX],x[NMAX];
int p[NMAX][8];

map<point,int> mp;
set<int> s;

bool is_stable(int m){
	int i;

	for(i=5;i<8;i++)
		if(p[m][i]>-2)return true;
	return false;
}

bool can_remove(int m){
	bool b;
	int i;

	if(m<0)return false;
	for(i=0;i<3;i++)
		if(p[m][i]>=0){
			p[p[m][i]][8-i-1]=-2;
			b=is_stable(p[m][i]);
			p[p[m][i]][8-i-1]=m;
			if(!b)return false;
		}
	return true;
}

void update(int m){if(can_remove(m))s.insert(m);}

bool remove(int m){
	int i;

	s.erase(m);
	if(!can_remove(m))return false;
//	printf("%d ",m);
	ans=((ans*n)%K+m)%K;
	for(i=0;i<8;i++)
		if(p[m][i]>-1)
			p[p[m][i]][8-i-1]=-2;
	for(i=0;i<8;i++)update(p[m][i]);
	return true;
}

int main(){
	point pt;
	bool b;
	int i,j;

	scanf("%d",&n);
	getchar();
	for(i=0;i<n;i++){
		scanf("%d%d",&pt.x,&pt.y);
		getchar();
		y[i]=pt.y;
		x[i]=pt.x;
		mp[pt]=i;
	}

	for(i=0;i<n;i++)
		for(j=0;j<8;j++){
			pt.y=y[i]+dy[j];
			pt.x=x[i]+dx[j];
			if(pt.y<0)p[i][j]=-1;
			else if(mp.find(pt)==mp.end())p[i][j]=-2;
			else p[i][j]=mp[pt];
//			printf("%d %d %d\n",i,j,p[i][j]);
		}

	for(i=0;i<n;i++)update(i);

	for(b=false;!s.empty();b=!b)
		if(b)while(!remove(*s.begin()));
		else while(!remove(*s.rbegin()));

	printf("%I64d",ans);
	return 0;
}

