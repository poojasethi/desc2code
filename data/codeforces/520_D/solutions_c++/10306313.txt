#include <iostream>
#include <cstdio>
#include <set>
#include <vector>
#include <map>
#include <cstring>
#include <cstdlib>
#define rep(i, n) for (int i=0;i<(n);i++)
using namespace std;

const int inf = 1e9+9;
const int MAXN = 2e5;
int n, cur, tmp;
map<pair<int, int>, int> mp;
set<int> candidate;
vector<int> ans;

struct point {
	int x, y;
} p[MAXN];

inline bool check(int cur) {
	int y=p[cur].y+1;
	for (int i=p[cur].x-1;i<=p[cur].x+1;i++) {
		if (!mp[make_pair(i, y)]) continue;
		int sum = 0;
		for (int j=i-1;j<=i+1;j++) if (mp[make_pair(j, y-1)]) sum++;
		if (sum<=1) return false;
	}
	return true;
}

int main() {
	scanf("%d", &n);
	rep(i, n) {
		scanf("%d%d", &p[i].x, &p[i].y);
		mp[make_pair(p[i].x, p[i].y)] = i+1;
	}
	rep(i, n) if (check(i)) {
		candidate.insert(i);
//		printf("Insert %d\n", i);
	}
	rep(i, n) {
		 do {
			 cur = (i&1)?*candidate.begin():*(--candidate.end());
			 candidate.erase(cur);
		 } while(!check(cur));
		ans.push_back(cur);
		mp.erase(make_pair(p[cur].x, p[cur].y));
		for (int j=p[cur].x-1;j<=p[cur].x+1;j++)
			for (int k=p[cur].y-1;k<=p[cur].y+1;k++)
				if ((tmp=mp[make_pair(j, k)]) && check(tmp-1)) {
					candidate.insert(tmp-1);
//					printf("Insert %d\n", tmp-1);
				}
//		printf("%d %d\n", i, cur);
	}
//	for (int i=0;i<n;i++) printf("%d ",ans[i]);putchar('\n');
	long long pt=1, final=0;
	for (int i=n-1;i>=0;i--) {
		final+=pt*ans[i];
		final%=inf;
		pt=(pt*n)%inf;
	}
	printf("%lld\n", final);
	return 0;
}
 						 	    	  	  					 		 	 	