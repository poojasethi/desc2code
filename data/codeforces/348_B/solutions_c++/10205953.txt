#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;
const ll MAX = 100001;
vector<ll> mas[MAX];
ll a[MAX], d[MAX], q[MAX], t;

ll gcd(ll a, ll b)
{
	return b ? gcd(b, a%b) : a;
}
ll lcm(ll a, ll b)
{
	return a / gcd(a, b) * b;
}
ll min(ll a, ll b)
{
	return a < b ? a : b;
}

void dfs(int p, int g)
{
	d[p] = 1;
	ll k = (1LL << 62), s = mas[p].size() - ((p == 1) ? 0 : 1);
	for (int i = 0; i < mas[p].size(); i++){
		if (mas[p][i] != g){
			dfs(mas[p][i], p);
			d[p] = lcm(d[p], d[mas[p][i]]);
			k = min(k, q[mas[p][i]]);
		}
	}
	if (s == 0){
		q[p] = a[p];
		return;
	}
	q[p] = k;
	if (q[p] < d[p]){
		d[p] = 1;
		q[p] = 0;
	}
	q[p] = (q[p]/d[p]*d[p]) * s;
	d[p] *= s;
}

int main()
{
	ll n, x,y, sum = 0;
	cin >> n;
	for (int i = 1; i <= n; i++){
		cin >> a[i];
		sum += a[i];
	}
	for (int i = 1; i < n; i++){
		cin >> x >> y;
		mas[x].push_back(y);
		mas[y].push_back(x);
	}
	dfs(1, 0);
	cout << sum - q[1];
}