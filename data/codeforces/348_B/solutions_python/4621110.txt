# coding: UTF-8
from collections import deque

Leaves = []
N = 0
meletolte = 0
Result = [None for i in xrange(100020)]

def read():
	global N, Tree, Leaves
	N = int(raw_input())
	Tree = [[] for i in xrange(N+1)]
	Leaves = [0]+[int(a) for a in raw_input().split()]
	for i in xrange(N-1):
		a,b = raw_input().split()
		a = int(a)
		b = int(b)
		Tree[a].append(b)
		Tree[b].append(a)

def mcd(a,b):
	while b:
		a,b = b, a%b
	return a

def Mcm(a, b):
	#if a == -1 or b == -1: return b
	if abs(a) == 1: return b
	if b == 1: return a
	return a/mcd(a,b)*b
	
def process_vertex(nodo):
	global meletolte, Tree, Result
	mcm = -1
	weights = []
	minw=-1
	for n in Tree[nodo]:
		w, m = Result[n]
		weights.append(w)
		mcm = Mcm(mcm, m)
		
	minw = min(weights)/mcm*mcm
	
	for w in weights:
		meletolte+=(w-minw)
	ln = len(weights)
	Result[nodo] = (ln*minw, ln*mcm)

def dfs2():
	global N, Tree, Leaves, meletolte
	stack = deque()
	stack.append(1)
	
	while stack:
		nodo = stack.pop()
		if Visited[nodo] == PROCESSED:
			continue
		elif Visited[nodo] == NOT_PROCESSED:
			Visited[nodo] = TO_PROCESS
			lista = [n for n in Tree[nodo] if Visited[n]==NOT_PROCESSED]
			if len(lista) == 0: 
				Visited[nodo] = PROCESSED
				Result[nodo] = (Leaves[nodo], 1)
			else:
				stack.append(nodo)
				stack.extend(lista)
				
		else:
			Visited[nodo] = PROCESSED
			process_vertex(nodo)
			continue
			
def dfs3():
	global N, Tree, Leaves
	stk = [1]
	vis = {1}
	p = []
	Tree2 = [[] for i in xrange(N+1)]
	while stk:
		u = stk.pop()
		p.append(u)
		for v in Tree[u]:
			if not v in vis:
				stk.append(v)
				vis.add(v)
				Tree2[u].append(v)
	p.reverse()
	Tree = Tree2
	for nodo in p:
		if len(Tree[nodo]) == 0:
			Result[nodo] = (Leaves[nodo], 1)
		else:
			process_vertex(nodo)
			
def main():
	global meletolte, Tree
	read()
	dfs3()
	print meletolte
	
if __name__ == '__main__':
	main()
	