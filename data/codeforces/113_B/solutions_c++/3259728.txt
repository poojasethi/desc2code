#include <iostream>
#include <set>
#define MAXN 5000
using namespace std;
typedef unsigned long long hash;
hash H[MAXN], pow[MAXN], B=31;

inline hash get_hash(int i, int j) {
    return H[j]-H[i]*pow[j-i];
}

int main() {
    ios::sync_with_stdio(0);
    pow[0] = 1;
    for(int i=1; i<MAXN; i++)
        pow[i] = pow[i-1]*B;
    string s, a, b;
    cin >> s >> a >> b;
    H[0] = 0;
    for(int i=0; i<s.size(); i++)
        H[i+1] = H[i]*B+(s[i]-'a'+1);
    hash ha = 0, hb = 0;
    for(int i=0; i<a.size(); i++)
        ha = ha*B + (a[i]-'a'+1);
    for(int i=0; i<b.size(); i++)
        hb = hb*B + (b[i]-'a'+1);
    set<hash> S;
    for(int i=0; i+a.size()<=s.size(); i++)
        if(ha == get_hash(i, i+a.size()))
            for(int j=i+max(a.size(),b.size())-b.size(); j+b.size()<=s.size(); j++)
                if(hb == get_hash(j, j+b.size()))
                    S.insert(get_hash(i, j+b.size()));
    cout << S.size() <<endl;
}