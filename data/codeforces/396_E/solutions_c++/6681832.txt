#include <iostream>
#include <sstream>
#include <bitset>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>

#define FOR(i,a,b) for (int i=a;  i<=b;  i++)
#define DFU(i,a,b) for (int i=a;  i>=b;  i--)
#define SIZE(a) int(a.size())

using namespace std;

struct point
{
    int x;
    long long value;
};

bool f[1111111];
long long dp[1111111],next[1111111],deg[1111111],price[1111111];
int nprime,prime[1111111],np[1111111];
int p[1111111][22];
int n;
long long k;
point d[1111111];

void init()
{
    memset(f,true,sizeof(f));
    nprime=0;
    FOR(i,2,1000000) if (f[i]) {
        int t=i*2;  prime[++nprime]=i;
        while (t<=1000000) {
            f[t]=false;  t+=i;
        }
    }
    FOR(i,2,1000000) {
        int s=i;  np[i]=0;
        FOR(j,1,nprime) if (prime[j]*prime[j]>s) break;
        else {
            while (s%prime[j]==0) {
                p[i][++np[i]]=prime[j];  s/=prime[j];
            }
        }
        if (s!=1) p[i][++np[i]]=s;
    }
}

int main()
{
   // freopen("test.inp","r",stdin);
    cin >>n;
    FOR(i,1,n) scanf("%d%I64d",&d[i].x,&d[i].value);
    cin >>k;
    init();
    memset(dp,0,sizeof(dp));
    FOR(i,1,n) dp[d[i].x]=d[i].value;
    bool check=true;
    long long value,s;
    memset(deg,0,sizeof(deg));
    memset(price,0,sizeof(price));
    FOR(i,2,1000000) if (f[i]) {
        s=i-1;
        FOR(j,1,nprime) if (prime[j]*prime[j]>s) break;
        else {
            if (s%prime[j]==0) deg[prime[j]]++;
            while (s%prime[j]==0) s/=prime[j];
        }
        if (s!=1) deg[s]++;
    }
    while (k&&check) {
        check=false;
        memset(next,0,sizeof(next));
        FOR(i,2,1000000) if (f[i]) if (deg[i]>=0) if (dp[i]||(deg[i]==0)) {
            check=true;
            if (deg[i]==0) value=min(k,dp[i]), deg[i]=-1;
            else value=1;
            dp[i]-=value;
            s=i-1;
            FOR(j,1,np[s]) {
                int x=p[s][j];
                if (deg[i]==-1) if ((j==1)||(p[s][j]!=p[s][j-1])) deg[x]--;
                next[x]+=value;
            }
        }
        FOR(i,2,1000000) dp[i]+=next[i];
      //  FOR(i,1,d[n].x) cout <<dp[i]<<" "; cout <<endl;
        k--;
    }
    int ncount=0;
    FOR(i,2,1000000) if (dp[i]) if (f[i]) ncount++;
    cout <<ncount<<endl;
    FOR(i,2,1000000) if (dp[i]) if (f[i]) printf("%d %I64d\n",i,dp[i]);
    return 0;
}
