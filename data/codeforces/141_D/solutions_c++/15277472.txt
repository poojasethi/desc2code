#include <bits/stdc++.h>
//Damned if I don't take what I want.

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 4e5 + 100;

int xs[MAXN * 3], sz;

inline int getid(int x){ return lower_bound(xs, xs + sz, x) - xs; }

int x[MAXN], t[MAXN], d[MAXN], p[MAXN];

vector<pii> G[MAXN];
vector<bool> rmp[MAXN];
vector<int> rmpid[MAXN];

int dis[MAXN], topar[MAXN], h[MAXN], par[MAXN];

void print(int u){
	//cerr << u << " : " << xs[u] << endl;
	if (xs[u] == 0) return;
	print( par[u] );
	if (topar[u] != -1) cout << topar[u] + 1 << " ";
}

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	int n, L; cin >> n >> L;

	for (int i = 0; i < n; i++){
		cin >> x[i] >> d[i] >> t[i] >> p[i];
		if (x[i] + d[i] <= L && x[i] + d[i] >= 0) xs[ sz++ ] = x[i] + d[i];
		if (x[i] - p[i] <= L && x[i] - p[i] >= 0) xs[ sz++ ] = x[i] - p[i];
	}
	xs[sz++] = 0;
	xs[sz++] = L;

	sort(xs, xs + sz);
	sz = unique(xs, xs + sz) - xs;

	for (int i = 0; i < sz; i++){
		if (i) G[i].push_back( pii(i - 1, xs[i] - xs[i - 1]) ), rmp[i].push_back(false), rmpid[i].push_back(-1);
		if (sz - i - 1) G[i].push_back( pii( i + 1, xs[i + 1] - xs[i]) ), rmp[i].push_back(false), rmpid[i].push_back(-1);
	}

	for (int i = 0; i < n; i++){
		if (x[i] + d[i] <= L && x[i] + d[i] >= 0 && x[i] - p[i] <= L && x[i] - p[i] >= 0) {
			int u = getid(x[i] - p[i]), v = getid(x[i] + d[i]);
			G[u].push_back( pii(v, t[i] + p[i]) );
			rmp[u].push_back(true);
			rmpid[u].push_back(i);
		}
	}

	memset(dis, 63, sizeof dis);
	memset(par, -1, sizeof par);
	memset(topar, -1, sizeof topar);

	dis[0] = 0;
	priority_queue< pii, vector<pii>, greater<pii> > q;
	q.push( pii(dis[0], 0) );

	while(q.size()){
		int u = q.top().second; q.pop();

		for (int i = 0; i < G[u].size(); i++){
			int v = G[u][i].first, w = G[u][i].second;
			if (dis[u] + w < dis[v]){
				dis[v] = dis[u] + w;
				par[v] = u; h[v] = h[u]; 
				topar[v] = rmpid[u][i];
				if (rmp[u][i]) h[v]++; 
				q.push(pii(dis[v], v));
			}
		}
	}

	cout << dis[sz - 1] << "\n"; 
	cout << h[sz - 1] << "\n";
	print(sz - 1);
}

