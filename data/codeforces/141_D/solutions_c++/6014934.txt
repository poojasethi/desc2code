#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <bitset>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <climits>
typedef long long LL;
using namespace std ;
typedef pair<int,int> PII;

const int oo=INT_MAX>>1;
struct Edge{
    int v,d,num;
    Edge(int a,int b,int c){
        v=a; d=b; num=c;
    }
};  
vector<Edge> a[310000];
int dis[310000],pre[310000],num[310000],T[310000],L[310000],R[310000];
bool vis[310000];

int main(){
    int N,len;
    cin >> N >> len;
    vector<int> val;
    val.push_back(0); val.push_back(len);
    int i;
    for (i=1;i<=N;i++){
        int x,d,t,p;
        cin >> x >> d >> T[i] >> p;
        L[i]=x-p; R[i]=x+d; T[i]+=p;
        if (L[i]<0 || R[i]>len) continue;
        val.push_back(L[i]); val.push_back(R[i]);
    }
    sort(val.begin(),val.end());
    val.resize(unique(val.begin(),val.end())-val.begin());
    map<int,int> pp;
    for (i=0;i<val.size();i++) pp[val[i]]=i;
    for (i=0;i<val.size()-1;i++){
        int d=val[i+1]-val[i];
        a[i].push_back(Edge(i+1,d,0));
        a[i+1].push_back(Edge(i,d,0));
    }
    for (i=1;i<=N;i++){
        if (L[i]<0 || R[i]>len) continue;
        int u=pp[L[i]],v=pp[R[i]];
        a[u].push_back(Edge(v,T[i],i));
    }
    N=val.size()-1;
    priority_queue< PII,vector<PII>,greater<PII> > Q;
    Q.push(make_pair(0,0));
    fill(dis+1,dis+N+1,oo);
    while (!Q.empty()){
        int u=Q.top().second,v,d; Q.pop();
        if (vis[u]) continue;
        vis[u]=1;
        for (vector<Edge>::iterator i=a[u].begin();i!=a[u].end();i++){
            v=i->v;
            if (dis[u]+i->d<dis[v]){
                dis[v]=dis[u]+i->d; pre[v]=u; num[v]=i->num;
                Q.push(make_pair(dis[v],v));
            }
        }
    }
    int u=N;
    vector<int> ans;
    while (u){
        if (num[u]) ans.push_back(num[u]);
        u=pre[u];
    }
    reverse(ans.begin(),ans.end());
    cout << dis[N] << endl;
    cout << ans.size() << endl;
    for (i=0;i<ans.size();i++) cout << ans[i] << ' ';
}

		 			 				 	  	 		   			