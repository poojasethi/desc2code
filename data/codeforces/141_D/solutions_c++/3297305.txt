#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define PB push_back
#define MP make_pair

const int maxn		=	100005;
const int maxnode	=	maxn*2+2;
const int maxedge	=	maxnode*2+maxn;
const int inf		=	1000000001;

struct node
{
	int a,b,c;
}edge[maxn];

int n,L;
int head[maxnode],vtx[maxedge],next[maxedge],cost[maxedge],ramp[maxedge],tot,from[maxedge];
int dist[maxnode],pre[maxnode];

inline void add(int a,int b,int c,int type)
{
//printf("%d %d %d %d\n",a,b,c,type);
	vtx[tot]=b;
	from[tot]=a;
	next[tot]=head[a];
	cost[tot]=c;
	ramp[tot]=type;
	head[a]=tot++;
}

inline void spfa(int s,int t)
{
	priority_queue< pair<int,int> > q;
	for (int i=0;i<=t;++i){
		dist[i]=inf;
	}
	dist[s]=0;
	q.push(MP(0,s));
	while (q.size()){
		int u=q.top().second;
		int d=q.top().first;
		q.pop();
		if (dist[u]!=-d){
			continue;
		}
		for (int p=head[u];p;p=next[p]){
			if (dist[vtx[p]]>dist[u]+cost[p]){
				dist[vtx[p]]=dist[u]+cost[p];
				pre[vtx[p]]=p;
				q.push(MP(-dist[vtx[p]],vtx[p]));
			}
		}
	}
}

int main()
{
	scanf("%d%d",&n,&L);
	for (int i=0;i<n;++i){
		int x,d,t,p;
		scanf("%d%d%d%d",&x,&d,&t,&p);
		edge[i].a=x-p;
		edge[i].b=x+d;
		edge[i].c=p+t;
	}
	vector<int> pos;
	pos.PB(0);
	pos.PB(L);
	for (int i=0;i<n;++i){
		if (edge[i].a>=0){
			pos.PB(edge[i].a);
			pos.PB(edge[i].b);
		}
	}
	sort(pos.begin(),pos.end());
	pos.erase(unique(pos.begin(),pos.end()),pos.end());
	tot=2;
	memset(head,0,sizeof(head));
	for (int i=0;i<n;++i){
		if (edge[i].a>=0){
			int a=lower_bound(pos.begin(),pos.end(),edge[i].a)-pos.begin();
			int b=lower_bound(pos.begin(),pos.end(),edge[i].b)-pos.begin();
			add(a,b,edge[i].c,i);
		}
	}
	for (int i=0;i<pos.size();++i){
		if (i+1<pos.size()){
			add(i,i+1,pos[i+1]-pos[i],-1);
		}
		if (i>0){
			add(i,i-1,pos[i]-pos[i-1],-1);
		}
	}
	
	spfa(0,pos.size()-1);
	
	printf("%d\n",dist[pos.size()-1]);
	vector<int> used;
	for (int u=pos.size()-1,p;u!=0;u=from[p]){
		p=pre[u];
		if (ramp[p]!=-1){
			used.push_back(ramp[p]);
		}
	}
	reverse(used.begin(),used.end());
	printf("%d\n",(int)used.size());
	for (int i=0;i<used.size();++i){
		printf("%d ",used[i]+1);
	}
}

    	   		 				   			 				