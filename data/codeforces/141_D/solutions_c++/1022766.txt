#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
using namespace std;
struct edge
{
	int s, e, l;
	edge(int _s, int _e, int _l):s(_s), e(_e), l(_l)
		{
		}
	edge()
		{
		}
	
};
vector<edge> edges;
vector<vector<int> > g;
vector<int> d;
vector<int> p, pe;
void dijkstra(int s)
{
	int n = g.size();
	vector<int> c(n);
	d.resize(n, -1);
	p.resize(n, -1);
	pe.resize(n, -1);
	d[s] = 0;
	c[s] = 1;
	priority_queue<pair<int, int>, vector<pair<int,int> >, greater<pair<int,int> > > q;
	q.push(make_pair(0, s));
	while(!q.empty())
	{
		int v = q.top().second;
		q.pop();
		if(c[v] == 2)continue;
		c[v] = 2;
		for(int i = 0; i < g[v].size(); i++)
		{
			int te = g[v][i];
			int t = edges[te].s == v ? edges[te].e : edges[te].s;
			int dv = d[v] + edges[te].l;
			if(dv < d[t] || d[t] == -1)
			{
				d[t] = dv;
				c[t] = 1;
				q.push(make_pair(d[t], t));
				p[t] = v;
				pe[t] = te;
				
			}
		}
	}
}
int main()
{
	int n, l;
	cin >> n >> l;
	set<int> pts;
	pts.insert(0);
	pts.insert(l);
	vector<int> s(n), e(n), len(n);
	for(int i = 0; i < n; i++)
	{
		int x, d, t, p;
		cin >> x >> d >> t >> p;
		if(x - p < 0 || x + d > l)
		{
			s[i] = 0;
			e[i] = 0;
			len[i] = 1;
			continue;
			
		}
		s[i] = x - p;
		e[i] = x + d;
		len[i] = p + t;
		pts.insert(x - p);
		pts.insert(x + d);
	}
	vector<int> pts_v;
	for(set<int>::iterator pt = pts.begin(); pt != pts.end(); pt++)
		pts_v.push_back(*pt);
	map<int, int> conv;
	edges.resize(n);
	g.resize(pts_v.size());
	for(int i = 0; i < pts_v.size(); i++)
	{
		if(i > 0)
		{
			edges.push_back(edge(i-1, i, pts_v[i] - pts_v[i - 1]));
			g[i-1].push_back(edges.size() - 1);
			g[i].push_back(edges.size() - 1);
		}
		conv[pts_v[i]] = i;
	}
	for(int i = 0; i < n; i++)
	{
		int st = conv[s[i]], et = conv[e[i]];
		edges[i] = edge(st, et, len[i]);
		g[st].push_back(i);
	}
	dijkstra(0);
	cout << d.back() << '\n';
	int pc = pts_v.size() - 1;
	vector<int> r;
	while(pc != -1)
	{
		if(pe[pc] >= 0 && pe[pc] < n)r.push_back(pe[pc] + 1);
		pc = p[pc];
	}
	reverse(r.begin(), r.end());
	cout << r.size() << '\n';
	for(int i = 0; i < r.size(); i++)
		cout << r[i] << '\n';
	return 0;
}
