#include<cstdio>
#include<vector>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;

int x[110000],d[110000],t[110000],p[110000];
int n,lim,nn,r[210000];
int add,hea[210000],nex[660000],vv[660000],ww[660000],uu[660000];

inline void adj(const int &u, const int &v, const int &w, const int &idx)
{
	vv[add]=v;	ww[add]=w;	uu[add]=idx;
	nex[add]=hea[u];	hea[u]=add++;
}
void init()
{
	memset(hea,-1,sizeof(hea));
	nn=add=0;
	r[nn++]=0;	r[nn++]=lim;
	for(int i=0;i<n;++i)
	{
		scanf("%d %d %d %d",&x[i],&d[i],&t[i],&p[i]);
		if(x[i]-p[i]<0)	continue;
		r[nn++]=x[i]-p[i];
		r[nn++]=x[i]+d[i];
	}
	sort(r,r+nn);
	nn=unique(r,r+nn)-r;
	for(int i=1;i<nn;++i)
	{
		adj(i-1,i,r[i]-r[i-1],0);
		adj(i,i-1,r[i]-r[i-1],0);
		/*
		g[i-1].push_back(i);
		g[i-1].push_back(r[i]-r[i-1]);
		g[i-1].push_back(0);
		g[i].push_back(i-1);
		g[i].push_back(r[i]-r[i-1]);
		g[i].push_back(0);
		*/
	}
	for(int i=0;i<n;++i)
	{
		if(x[i]-p[i]<0)	continue;
		if(t[i]>=d[i])	continue;
		int u=x[i]-p[i],v=x[i]+d[i];
		u=lower_bound(r,r+nn,u)-r;
		v=lower_bound(r,r+nn,v)-r;
		adj(u,v,t[i]+p[i],i+1);		
		/*
		g[u].push_back(v);
		g[u].push_back(t[i]+p[i]);
		g[u].push_back(i+1);
		*/
	}
}

int dp[210000],inq[210000];
int f[210000],used[210000];
int q[1100000];
const int inf = 1048575 ;
void spfa()
{
	int h=0,t=0;
	for(int i=1;i<nn;++i)	dp[i]=lim;
	dp[0]=0;
	inq[0]=1;
	q[t++]=0;
	while(h!=t)
	{
		int u=q[h];	h=(h+1)&inf;
		inq[u]=0;
		for(int e=hea[u];e!=-1;e=nex[e])
		{
			int v=vv[e],dv=dp[u]+ww[e];
			if(dp[v]<=dv)	continue;
			dp[v]=dv;
			f[v]=u;	used[v]=uu[e];
			if(inq[v])	continue;
			inq[v]=1;
			if(h==t||dv>dp[q[h]])
				q[t]=v,t=(t+1)&inf;
			else
				h=(h+inf)&inf,q[h]=v;
		}
	}
}

vector<int>res;
void gao()
{
	for(int i=nn-1;i;i=f[i])if(used[i])
		res.push_back(used[i]);
}
int main()
{
	scanf("%d %d",&n,&lim);
	init();
	spfa();
	gao();
	printf("%d\n",dp[nn-1]);
	printf("%d\n",res.size());
	for(int i=res.size();i>0;--i)	printf("%d ",res[i-1]);
	puts("");
	return 0;
}
 		 	   	  		 		   	  	 		