#include<iostream>
#include<vector>
#include<sstream>
#include<algorithm>
#include<numeric>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<complex>
#include<set>
#include<map>
#include<queue>
#include<cassert>

using namespace std;

#define rep(i,n) for(int i=0;i<n;i++)
#define rp(i,c) rep(i,(c).size())
#define fr(i,c) for(__typeof((c).begin()) i=(c).begin();i!=(c).end();i++)
#define pb push_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define dbg(x) cerr<<#x<<" = "<<(x)<<endl

typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int,int> pi;
typedef long long ll;

const int inf=1<<28;
const double INF=1e12,EPS=1e-9;

const int MX=200002;
int v[MX],m,prev[MX],prevjump[MX];
vi jump[MX];

void run()
{
	int n,L; cin>>n>>L;
	vi x(n),d(n),t(n),p(n);
	
	m=0;
	rep(i,n){
		cin>>x[i]>>d[i]>>t[i]>>p[i];
		if(x[i]-p[i]>=0)v[m++]=x[i]-p[i];
		v[m++]=x[i]+d[i];
	}
	v[m++]=0; v[m++]=L;
	
	sort(v,v+m);
	m=unique(v,v+m)-v;
	
	rep(i,n)if(x[i]-p[i]>=0){
		int pos=lower_bound(v,v+m,x[i]-p[i])-v;
		jump[pos].pb(i);
	}
	
	rep(i,m)prev[i]=prevjump[i]=-1;
	
	priority_queue<pair<pi,pi> > q;
	q.push(mp(mp(0,0),mp(-1,-1)));
	while(!q.empty()){
		int c=q.top().first.second, cost=q.top().first.first;
		int prv=q.top().second.first, pj=q.top().second.second;
		q.pop();
		if(prev[c]>=0)continue;
		prev[c]=prv;
		prevjump[c]=pj;
		
		if(c==m-1){
			cout<<-cost<<endl;
			break;
		}
		
		rep(i,jump[c].size()){
			int id=jump[c][i], dist=p[id]+t[id];
			int pos=lower_bound(v,v+m,x[id]+d[id])-v;
			if(prev[pos]<0)q.push(mp(mp(cost-dist,pos),mp(c,id)));
		}
		if(c<m-1)q.push(mp(mp(cost-(v[c+1]-v[c]),c+1),mp(c,-1)));
		if(c&&prev[c-1]<0)q.push(mp(mp(cost-(v[c]-v[c-1]),c-1),mp(c,-1)));
	}
	int i=m-1;
	vi ans;
	while(i!=0){
		if(prevjump[i]>=0)ans.pb(prevjump[i]+1);
		i=prev[i];
	}
	reverse(all(ans));
	cout<<ans.size()<<endl;
	rep(i,ans.size())cout<<ans[i]<<(i==ans.size()-1?"\n":" ")<<endl;
}

int main()
{
#ifndef ONLINE_JUDGE
	int cs=3;rep(i,cs)
#endif
	run();
}
