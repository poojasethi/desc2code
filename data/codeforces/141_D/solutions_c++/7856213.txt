#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <algorithm>
#define pb push_back
#define sz size()
#define mp make_pair
#define f first
#define s second
#define ll long long
using namespace std;

const int MAXN = (int)1e5 + 500;
const int INF = 1 << 30;
int n, L, x[MAXN], d[MAXN], t[MAXN], p[MAXN], N, par[MAXN * 3], a[MAXN * 3], go[MAXN];
ll ans[MAXN * 3];
vector < pair < pair < int, int >, int > > g[MAXN * 3];
set < pair < ll, int > > q;
map < int, int > ind;
map < pair < int, int >, int > trm;

int main()
{
//	freopen("in", "r", stdin);

	cin >> n >> L;
	a[++N] = 0;
	a[++N] = L;
	for (int i = 1; i <= n; i++)
	{
		cin >> x[i] >> d[i] >> t[i] >> p[i];
		if (x[i] - p[i] >= 0)
		{
			a[++N] = x[i] - p[i];
			a[++N] = x[i] + d[i];
		}
	}
	sort(a + 1, a + 1 + N);
	int cnt = 0;
	for (int i = 1; i <= N; i++)
	{
		if (a[i] != a[i - 1])
		{
			cnt++;
			ind[a[i]] = cnt;
			g[ind[a[i - 1]]].pb( mp(mp(ind[a[i]], a[i] - a[i - 1]), -1) );
			g[ind[a[i]]].pb( mp(mp(ind[a[i - 1]], a[i] - a[i - 1]), -1) );
		}
	}
	for (int i = 1; i <= n; i++)
	{
		if (x[i] - p[i] >= 0)
		{
			int from = ind[x[i] - p[i]];
			int to = ind[x[i] + d[i]];
			g[from].pb(mp(mp(to, t[i] + p[i]), i));
		}
	}
	for (int i = 1; i <= cnt; i++)
		ans[i] = INF;
	ans[ind[0]] = 0;
	q.insert(mp(0, ind[0]));
	while (!q.empty())
	{
		int v = q.begin()->s;
		q.erase(q.begin());
		for (int i = 0; i < g[v].sz; i++)
		{
			int to = g[v][i].f.f;
			int w = g[v][i].f.s;
			int ind = g[v][i].s;
			if (ans[to] > ans[v] + w)
			{
				q.erase(mp(ans[to], to));
				ans[to] = ans[v] + w;
				par[to] = v;
				go[to] = ind;
				q.insert(mp(ans[to], to));
			}
		}
	}
	cout << ans[ind[L]] << endl;
	vector < int > vec;
	for (int v = ind[L]; v != 0; v = par[v])
	{
		if (go[v] != -1) vec.pb(go[v]);
	}
	reverse(vec.begin(), vec.end());
	cout << vec.sz <<endl;
	for (int i = 0; i < vec.sz; i++)
		cout << vec[i] << " ";
	
		
	return 0;
}
