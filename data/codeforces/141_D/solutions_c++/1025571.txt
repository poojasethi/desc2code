#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>
#include <vector>
#include <algorithm>

using namespace std;

struct tramplin {
    int x, d, t, p;
    void in() {
        scanf("%d%d%d%d", &x, &d, &t, &p);
    }
}tr[101010];

const int N = 201010;
int x[N], n = 1, k, d[N], from[N], inf = 1<<30, fr2[N];
vector<int> g[N], w[N], gfr[N], ans;
set<pair<int,int> > q;

int main() {
    memset(from, -1, sizeof from);
    scanf("%d%d", &k, x);
    x[n++] = 0;
    for (int i = 0; i < k; i++) {
        tr[i].in();
        x[n++] = tr[i].x - tr[i].p;
        if (x[n-1] < 0) n--;
        x[n++] = tr[i].x + tr[i].d;
    }
    sort(x, x+n);
    n = unique(x,x+n) - x;

    for (int i = 0; i < k; i++) {
        int frx = tr[i].x - tr[i].p,
            tox = tr[i].x + tr[i].d;
        if (frx < 0)
            continue;
        int fr = lower_bound(x,x+n,frx)-x,
            to = lower_bound(x,x+n,tox)-x;
        g[fr].push_back(to);
        w[fr].push_back(tr[i].t+tr[i].p);
        gfr[fr].push_back(i);
    }

    for (int i = 0; i < n; i++) {
        if (i != n-1) {
            g[i].push_back(i+1);
            w[i].push_back(x[i+1]-x[i]);
            gfr[i].push_back(-1);
        }
        if (i) {
            g[i].push_back(i-1);
            w[i].push_back(x[i]-x[i-1]);
            gfr[i].push_back(-1);
        }
    }

    for (int i = 0; i < n; i++)
        d[i] = inf;
    d[0] = 0;
    q.insert(make_pair(0,0));
    while(!q.empty()) {
        int v = q.begin()->second;
        q.erase(q.begin());
        for (int i = 0; i < (int)g[v].size(); i++) {
            int to = g[v][i], W = w[v][i];
            if (d[to] > d[v] + W) {
                q.erase(make_pair(d[to], to));
                d[to] = d[v] + W;
                from[to] = gfr[v][i];
                fr2[to] = v;
                q.insert(make_pair(d[to], to));
            }
        }
    }

    printf("%d\n", d[n-1]);
    int v = n-1;
    for (; v != 0; v = fr2[v])
        if (from[v] != -1)
            ans.push_back(from[v]+1);
    printf("%d\n", (int)ans.size());
    for (int i = 0; i < (int)ans.size(); i++)
        printf("%d ", ans[(int)ans.size() - i - 1]);

    return 0;
}
