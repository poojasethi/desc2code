#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<set>
#include<map>
#include<bitset>
#include<string>
#include<cmath>
#define pb push_back
#define mp make_pair
using namespace std;
const int N=300000,M=500000;
int t=0,next[M],v[M],w[M],head[N],slx[N],e[M],top=0,last[M],tmp[M];
int stack[N];
struct 
{
    int s,e,t;
}ramp[100010];
int n,l;
int f[N],g[N];
void add(int a,int b,int c,int d)
{
    next[++t]=head[a];v[t]=b;w[t]=c;head[a]=t;e[t]=d;
}
priority_queue<pair<int,int> >q;
void dp()
{
    int s,i;
    memset(f,127,sizeof(f));
    f[1]=0;
    pair<int,int>c;
    q.push(mp(0,1));
    while(!q.empty())
    {
        c=q.top();q.pop();
        if(f[c.second]!=-c.first)continue;
        s=c.second;
        for(i=head[s];i;i=next[i])
        {
            if(f[v[i]]>f[s]+w[i])
            {
                f[v[i]]=f[s]+w[i],g[v[i]]=g[s]+(e[i]>0),last[v[i]]=e[i],tmp[v[i]]=s;
                q.push(mp(-f[v[i]],v[i]));
            }
        }
    }
    i=top;
    int A=0;
    while(i>1)
    {
        if(last[i])
        stack[++A]=last[i];
        i=tmp[i];
    }
    printf("%d\n%d\n",f[top],g[top]);
    for(i=A;i;i--)
    printf("%d ",stack[i]);
}
inline int find(int x)
{
    int s=1,e=top;
    int mid;
    while(1)
    {
        mid=s+e>>1;
        if(slx[mid]==x)return mid;
        if(slx[mid]<x)s=mid+1;
        else e=mid-1;
    }   
}
int main()
{
    int i,x,k=0;
    scanf("%d%d",&n,&l);
    for(i=1;i<=n;i++)
    {
        scanf("%d%d%d%d",&ramp[i].s,&ramp[i].e,&ramp[i].t,&x);
        ramp[i].e+=ramp[i].s;
        ramp[i].t+=x;
        ramp[i].s-=x;
        if(ramp[i].s<0)continue;
        slx[++top]=ramp[i].s;
        slx[++top]=ramp[i].e;
    }
    slx[++top]=0;
    slx[++top]=l;
    sort(slx+1,slx+1+top);
    slx[0]=-1;k=0;
    for(i=1;i<=top;i++)
    if(slx[i]!=slx[k])slx[++k]=slx[i];
    top=k;
    for(i=1;i<=n;i++)
    if(ramp[i].s>=0)
    {
        add(find(ramp[i].s),find(ramp[i].e),ramp[i].t,i);
    }
    for(i=1;i<top;i++)
    add(i,i+1,slx[i+1]-slx[i],0),add(i+1,i,slx[i+1]-slx[i],0);
    dp();
}

