#include <cstdio>
#include <queue>
#include <algorithm>
#define N 200005
#define K 500005
#define Q(a, b, c, d) v[++p] = b, o[p] = f[a], f[a] = p, w[p] = c, x[p] = d
using namespace std;

int n, l, c[N], f[N], v[K], o[K], x[K], p, k, t, X[N], Y[N], Z[N], w[K], d[N], E[N], L[N], A;
priority_queue<pair<int, int> > q;

int main(){
	scanf("%d %d", &n, &l);
	c[k++] = 0; c[k++] = l;
	for(int i = 1, a, b, r, d; i <= n; i++){
		scanf("%d %d %d %d", &a, &b, &r, &d);
		X[i] = a - d;
		Y[i] = a + b;
		Z[i] = r + d;
		if(X[i] < 0 || b <= r) continue;
		c[k++] = X[i]; c[k++] = Y[i];
	}
	sort(c, c + k);
	for(int i = 0, j = -1; i < k;){
		while(i < k && j >= c[i]) i++;
		if(i < k){
			d[t] = 2e9;
			if(t) Q(t - 1, t, c[i] - j, 0), Q(t, t - 1, c[i] - j, 0);
			j = c[t++] = c[i];
		}
	}
	for(int i = 1, a, b; i <= n; i++){
		if(X[i] < 0 || Y[i] - X[i] <= Z[i]) continue;
		a = lower_bound(c, c + t, X[i]) - c;
		b = lower_bound(c, c + t, Y[i]) - c;
		Q(b, a, Z[i], i);
	}
	d[t - 1] = 0;
	q.push(make_pair(0, t - 1));
	for(int V; !q.empty();){
		V = q.top().second;
		q.pop();
		if(d[V] >= d[0]) break;
		for(int j = f[V], y; j; j = o[j]) if(d[y = v[j]] > d[V] + w[j]){
			d[y] = d[E[y] = V] + w[L[y] = j];
			q.push(make_pair(-d[y], y));
		}
	}
	printf("%d\n", d[0]);
	for(int i = 0; i != t - 1; i = E[i]) if(x[L[i]]) A++;
	printf("%d\n", A);
	for(int i = 0, F = 0; i != t - 1; i = E[i]) if(x[L[i]]){
		if(F) printf(" ");
		printf("%d", x[L[i]]);
		F = 1;
	}
	if(A) printf("\n");
}
