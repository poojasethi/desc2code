#include<bits/stdc++.h>
using namespace std;

const int MAX_N = 1e5 + 10;
const long long inf = 2e10;
int n, L;
vector<pair<int, int> > v[2 * MAX_N];
int x[MAX_N], d[MAX_N], t[MAX_N];
int store[2 * MAX_N + 10];
int c = 0;
vector <int> ans;
map <pair<int, pair<int, int> >, int> m;

long long dis[2 * MAX_N];
int par[2 * MAX_N];
struct cmp
{
	bool operator()(int x1, int y1)
	{
		if(dis[x1] != dis[y1])
			return dis[x1] < dis[y1];
		return x1 < y1;
	}
};
set<int, cmp> s;

void dijkstra(int t1);

int main()
{
	cin >> n >> L;
	for(int i = 0; i < n; ++ i)
	{
		int p;
		cin >> x[i] >> d[i] >> t[i] >> p;
		d[i] += x[i];
		x[i] -= p;
		t[i] += p;
		if(x[i] > 0)
			store[c ++] = x[i];
		store[c ++] = d[i];
	}
	store[c ++] = 0;
	store[c ++] = L;
	sort(store, store + c);
	c = unique(store, store + c) - store;
	for(int i = 0; i < n; ++ i)
	{
		if(x[i] < 0)
			continue;
		x[i] = lower_bound(store, store + c, x[i]) - store;
		d[i] = lower_bound(store, store + c, d[i]) - store;
		v[x[i]].push_back(make_pair(d[i], t[i]));
		m[make_pair(x[i], make_pair(d[i], t[i]))] = i;
	}
	
	for(int i = 0; i < c - 1; ++ i)
	{
		v[i].push_back(make_pair(i + 1, store[i + 1] - store[i]));
		v[i + 1].push_back(make_pair(i, store[i + 1] - store[i]));
	}
	dijkstra(0);
	cout << dis[c - 1] << endl;
	for(int i = c - 1; i > 0; i = par[i])
	{
		if(abs(store[i] - store[par[i]]) != dis[i] - dis[par[i]])
		{
			ans.push_back(m[make_pair(par[i], make_pair(i, dis[i] - dis[par[i]]))]);
		}
	}
	cout << ans.size() << endl;
	reverse(ans.begin(), ans.end());
	for(int i = 0; i < ans.size(); ++ i)
		cout << ans[i] + 1 << endl;
	return 0;
}

void dijkstra(int t1)
{
	fill(dis, dis + c, inf);
	dis[t1] = 0;
	s.insert(t1);
	while(!s.empty())
	{
		int u = *s.begin();
		s.erase(u);
		for(int i = 0; i < v[u].size(); ++ i)
		{
			int h = v[u][i].first, y = v[u][i].second;
			if(dis[h] <= dis[u] + y)
				continue;
			s.erase(h);
			dis[h] = dis[u] + y;
			par[h] = u;
			s.insert(h);
		}
	}
}
