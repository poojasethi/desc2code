#include <cstdio>
#include <algorithm>
#include <queue>
#include <utility>
#include <vector>
#include <map>
#define INF 1000000000
using namespace std;
typedef pair<int,int> ii;
vector<int> points;
map<int,int> idx;
vector<ii> adjlist[200005];
map<ii,ii> edges;
bool visited[200005] = {false};
int dist[200005]={0};
int prev[200005];
priority_queue<ii,vector<ii>,greater<ii> > pq;
int main() {
	int n,l;
	scanf("%d%d", &n, &l);
	int x,d,t,p;
	points.push_back(0);
	points.push_back(l);
	for (int i = 0; i < n; i++) {
		scanf("%d%d%d%d",&x,&d,&t,&p);
		if (((x-p)>=0)&&(x+d<=l)&&t<d) {
			if (edges.count(make_pair(x-p,x+d))) {
				int tmp = edges[make_pair(x-p,x+d)].first;
				if (p+t<tmp) edges[make_pair(x-p,x+d)] = make_pair(p+t,i+1);
			} else {
				points.push_back(x-p);
				points.push_back(x+d);
				edges[make_pair(x-p,x+d)] = make_pair(p+t,i+1);
			}
		}
	}
	sort(points.begin(), points.end());
	points.resize(distance(points.begin(),unique(points.begin(), points.end())));
	for (int i=0;i<(int)points.size();i++) idx[points[i]]=i;
	for (int i=0;i<(int)points.size()-1;i++) adjlist[i].push_back(make_pair(i+1,points[i+1]-points[i])),adjlist[i+1].push_back(make_pair(i,points[i+1]-points[i]));
	for (map<ii,ii>::iterator it=edges.begin();it!=edges.end();++it) adjlist[idx[(it->first).first]].push_back(make_pair(idx[(it->first).second],(it->second).first));
	for (int i=1;i<(int)points.size();i++) dist[i]=INF;
	pq.push(make_pair(0,0));
	while(!pq.empty()){
		ii p=pq.top();
		pq.pop();
		int v=p.second;
		if(visited[v]) continue;
		visited[v]=true;
		for(vector<ii>::iterator it=adjlist[v].begin();it!=adjlist[v].end();++it){
			if(dist[it->first]>dist[v]+it->second){
				dist[it->first]=dist[v]+it->second;
				pq.push(make_pair(dist[it->first],it->first));
				prev[it->first]=v;
			}
		}
	}
	int c = (int)points.size()-1;
	printf("%d\n", dist[c]);
	vector<int> ans;
	while(c!=0) {
		if (edges.count(make_pair(points[prev[c]],points[c]))) {
			ans.push_back(edges[make_pair(points[prev[c]],points[c])].second);
		}
		c=prev[c];
	}
	printf("%d\n", (int)ans.size());
	for (int i=(int)ans.size()-1;i>=0;i--) {
		printf("%d", ans[i]);
		if (i) printf(" ");
		else printf("\n");
	}
	return 0;
}