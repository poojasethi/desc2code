#include <cstdio>
#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <queue>
using namespace std;

struct edge
{
	int l,r,c,next,no;
};
typedef pair<int,int> pii;
priority_queue<pii> que;
int st[111111],ed[111111],cost[111111];
int x[222222],last[222222];
int tot;
bool b[222222];
int d[222222];
edge ln[555555];
vector<int> axis;

void add(int l,int r,int c,int no = 0)
{
	ln[++tot].l = l;
	ln[tot].r = r;
	ln[tot].c = c;
	ln[tot].no = no;
	ln[tot].next = x[l];
	x[l] = tot;
}	

void relax(int p)
{
	b[p] = true;
	for (int i = x[p];i;i = ln[i].next)
	{
		if (d[p] + ln[i].c < d[ln[i].r])
		{
			d[ln[i].r] = d[p] + ln[i].c;
			last[ln[i].r] = i;
			que.push(make_pair(-d[ln[i].r],ln[i].r));
		}
	}
}

int main()
{
	int m,L;
	scanf("%d%d",&m,&L);
	for (int i = 1;i <= m;++i)
	{
		int xi,di,ti,pi;
		scanf("%d%d%d%d",&xi,&di,&ti,&pi);
		st[i] = xi - pi;
		ed[i] = xi + di;
		cost[i] = pi + ti;
		if (st[i] >= 0)
		{
			axis.push_back(st[i]);
			axis.push_back(ed[i]);
		}
	}
	axis.push_back(0);
	axis.push_back(L);
	sort(axis.begin(),axis.end());
	axis.erase(unique(axis.begin(),axis.end()),axis.end());
	for (int i = 1;i < axis.size();++i)
	{
		add(i-1,i,axis[i] - axis[i-1]);
		add(i,i-1,axis[i] - axis[i-1]);
	}
	for (int i = 1;i <= m;++i)
	{
		if (st[i] >= 0)
		{
			int l = lower_bound(axis.begin(),axis.end(),st[i]) - axis.begin();
			int r = lower_bound(axis.begin(),axis.end(),ed[i]) - axis.begin();
			add(l,r,cost[i],i);
		}
	}
	memset(d,127,sizeof(d));
	d[0] = 0;
	que.push(make_pair(0,0));
	while (!que.empty())
	{
		if (!b[que.top().second]) relax(que.top().second);
		que.pop();
	}
	printf("%d\n",d[axis.size()-1]);
	vector<int> ans;
	for (int i = last[axis.size() - 1];i;i = last[ln[i].l])
	{
		if (ln[i].no)
		{
			ans.push_back(ln[i].no);
		}
	}
	printf("%u\n",ans.size());
	for (int i = ans.size()-1;i >= 0;--i)
	{
		printf("%d ",ans[i]);
	}
	puts("");
	return 0;
}
