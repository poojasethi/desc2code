#include <algorithm>
#include <cstring>
#include <utility>
#include <vector>
#include <cstdio>
#include <queue>
#define mp make_pair
#define pb push_back
#define f first
#define s second
using namespace std;
const int N=210000;
int n,L,i,j,x,y,s,a[N],b[N],c[N],X[N],d[N],h[N],f[N],F[N],H[N];
vector<pair<int,int> > G[N];
vector<int> ans;
queue<int> t;
bool cmp(int x,int y) {return a[x]<a[y];}
int id(int x) {
	int l=1,r=s,mid;
	while (l<r) {
		mid=(l+r)/2;
		if (X[mid]<x) l=mid+1;
		else r=mid;
	}
	return l;
}
int main() {
	scanf("%d%d",&n,&L);
	X[++s]=0;X[++s]=L;
	for (i=1;i<=n;i++) {
		int x,d,t,p;
		scanf("%d%d%d%d",&x,&d,&t,&p);
		a[i]=x-p;b[i]=x+d;c[i]=t+p;
		if ((a[i]>=0)&&(c[i]<b[i]-a[i])) {
			X[++s]=a[i];X[++s]=b[i];
		}
	}
	sort(X+1,X+s+1);
	s=unique(X+1,X+s+1)-X-1;
	for (i=1;i<s;i++) {
		G[i].pb(mp(i+1,X[i+1]-X[i]));
		G[i+1].pb(mp(i,X[i+1]-X[i]));
	}
	for (i=1;i<=n;i++) {
		if ((a[i]<0)||(c[i]>=b[i]-a[i])) continue;
		x=id(a[i]);y=id(b[i]);
		G[x].pb(mp(y,c[i]));
	}
	memset(d,0x7F,sizeof(d));
	t.push(1);h[1]=1;d[1]=0;
	while (!t.empty()) {
		x=t.front();
		for (i=0;i<G[x].size();i++) {
			y=G[x][i].f;
			if (d[y]>d[x]+G[x][i].s) {
				f[y]=x;
				d[y]=d[x]+G[x][i].s;
				if (h[y]==0) {
					t.push(y);
					h[y]=1;
				}
			}
		}
		h[x]=0;t.pop();
	}
	printf("%d\n",d[s]);
	for (x=s;x>0;x=f[x]) H[x]=F[x]=1;
	for (i=1;i<=n;i++) {
		if ((a[i]<0)||(c[i]>=b[i]-a[i])) continue;
		x=id(a[i]);y=id(b[i]);
		if (c[i]!=d[y]-d[x]) continue;
		if (F[x]&&H[y]&&(f[y]==x)) {
			ans.pb(i);
			H[y]=false;
		}
	}
	sort(ans.begin(),ans.end(),cmp);
	printf("%d\n",ans.size());
	for (i=0;i<ans.size();i++) printf("%d ",ans[i]);
}
