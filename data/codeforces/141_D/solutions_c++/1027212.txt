#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;
typedef pair<int,int> ii;
typedef pair<ii,int> pii;
#define fi first.first
#define se first.second
#define id second
const int inf=1<<30;
const int Z=200100;

vector<pii> adj[Z];
ii prev[Z];
int dist[Z];
void dijkstra(int num,int s,int e) {
    fill(dist,dist+num,inf);
    dist[s]=0;
    priority_queue<ii> pq;
    pq.push(ii(0,s));
    while(pq.size()) {
        int a=pq.top().second,d=-pq.top().first;
        pq.pop();
        if(d!=dist[a]) {
            continue;
        }
        for(int i=0;i<adj[a].size();i++) {
            int b=adj[a][i].fi;
            int t=d+adj[a][i].se;
            if(t<dist[b]) {
                dist[b]=t;
                prev[b]=ii(a,adj[a][i].id);
                pq.push(ii(-t,b));
            }
        }
    }
}
void trace(int a,int d) {
    if(dist[a]==0) {
        cout<<d<<endl;
    } else {
        if(prev[a].second!=-1) {
            d++;
        }
        trace(prev[a].first,d);
        if(prev[a].second!=-1) {
            cout<<prev[a].second+1<<' ';
        }
    }
}
vector<pii> rmp;
int main() {
    int N,L;
    cin>>N>>L;
    vector<int> pts;
    for(int i=0;i<N;i++) {
        int x,d,t,p;
        cin>>x>>d>>t>>p;
        rmp.push_back(pii(ii(x-p,x+d),t+p));
        if(x-p>0) {
            pts.push_back(x-p);
        }
        pts.push_back(x+d);
    }
    pts.push_back(0);
    pts.push_back(L);
    sort(pts.begin(),pts.end());
    pts.erase(unique(pts.begin(),pts.end()),pts.end());
    for(int i=0;i<pts.size();i++) {
        if(i>0) {
            adj[i].push_back(pii(ii(i-1,pts[i]-pts[i-1]),-1));
        }
        if(i<pts.size()-1) {
            adj[i].push_back(pii(ii(i+1,pts[i+1]-pts[i]),-1));
        }
    }
    for(int i=0;i<rmp.size();i++) {
        int a=rmp[i].first.first;
        int b=rmp[i].first.second;
        int d=rmp[i].second;
        if(a<0) {
            continue;
        }
        a=lower_bound(pts.begin(),pts.end(),a)-pts.begin();
        b=lower_bound(pts.begin(),pts.end(),b)-pts.begin();
        adj[a].push_back(pii(ii(b,d),i));
    }
    int e=pts.size()-1;
    dijkstra(pts.size(),0,e);
    cout<<dist[e]<<endl;
    trace(e,0);
}