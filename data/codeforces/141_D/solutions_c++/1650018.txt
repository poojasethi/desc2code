#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <string>
#include <cstdlib>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <ctime>
#include <cassert>
#include <list>
#include <bitset>
using namespace std;
#define f first
#define s second
#define pb push_back
#define mp make_pair
#define forit(v,it) for(typeof(v.begin()) it = v.begin(); it != v.end(); ++it)
typedef long long ll;
typedef pair <int, int> pii;
typedef vector <int> vi;
typedef pair <pii,int> pi;

const int N = 400005;
const int inf = (int)1e9 + 7;
int n,L,v,x[N],d[N],p[N],c[2*N],t[N],a[N],b[N],dist[N];
pii from[N];
vector <pi> e[N];
vi ans;
priority_queue <pii> q;


int main () {
	#ifdef LOCAL
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	scanf("%d%d",&n,&L);
	c[v++] = 0, c[v++] = L;
	for(int i=1;i<=n;++i) {
		scanf("%d%d%d%d",&x[i],&d[i],&t[i],&p[i]);
		if(x[i] >= p[i]) c[v++] = x[i] - p[i];
		c[v++] = x[i] + d[i];
	}
	sort(c,c + v);
	v = unique(c,c + v) - c;
	int l = v - 1;
	for(int i=1;i<=n;++i) {
		if(x[i] >= p[i]) {
			b[i] = lower_bound(c,c + v,x[i] - p[i]) - c;
			a[i] = lower_bound(c,c + v,x[i] + d[i]) - c;
			e[b[i]].pb(mp(mp(a[i],p[i] + t[i]),i));
		}
	}
	for(int i=0;i<l;++i) {
		e[i].pb(mp(mp(i + 1,c[i + 1] - c[i]),-1));
		e[i + 1].pb(mp(mp(i,c[i + 1] - c[i]),-1));
	}
	for(int i=0;i<v;++i) {
		dist[i] = inf;
	}
	dist[0] = 0;
	q.push(mp(0,0));
	while(!q.empty()) {
		int v = q.top().s, cur_d = -q.top().f;
		q.pop();
		if(cur_d > dist[v]) continue;
		forit(e[v],it) {
			int to = (*it).f.f, len = (*it).f.s;
			if(dist[to] > dist[v] + len) {
				dist[to] = dist[v] + len;
				q.push(mp(-dist[to],to));
				from[to] = mp(v,(*it).s);
			}	
		}
	}
	printf("%d\n",dist[l]);
	int v = l;
	while(v > 0) {
		int x = from[v].s;
		if(x != -1) 
			ans.pb(x);
		v = from[v].f;
	}
	printf("%d\n",ans.size());
	for(int i=(int)ans.size() - 1;i>=0;--i)
		printf("%d ",ans[i]);
	return 0;
}