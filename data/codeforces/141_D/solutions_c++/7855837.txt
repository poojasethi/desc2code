#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<queue>
#include<vector>
#include<string>
#include<cmath>
#include<math.h>
#include<set>
#include<map>
#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define cint const int
#define ll long long
#define fname "a"
using namespace std;
const int nn = (int)(1e5) + 1;
const ll inf = (ll)(1e18);
const int INF = (int)(1e9 + 15);
int n, l, x[nn], p[nn], d[10 * nn], t[nn], a[10 * nn], cnt;
vector< pair< int, pair< int, int > > > g[10 * nn];       
set< pair< int, int > > q;
map< ll, int > c;
vector< int > v;
pair< int, int > path[10 * nn];
int main()
{
//	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);
	ios_base::sync_with_stdio(false);
	cin >> n >> l;
	for(int i = 1; i <= n; ++i)
	{
		cin >> x[i] >> d[i] >> t[i] >> p[i];
		if(x[i] - p[i] < 0)
			continue;
		v.pb(x[i] - p[i]);
		v.pb(x[i] + d[i]);
	}
	v.pb(0);
	v.pb(l);
	sort(v.begin(), v.end());
	int m = (int)v.size();
	a[0] = 0;
	for(int i = 1; i < m; ++i)
	{
		if(v[i] != v[i - 1])
		{
			a[i] = ++cnt;
			c[v[i]] = cnt;
		}
		else
			a[i] = a[i - 1];
	}
	for(int i = 1; i <= n; ++i)
	{
		if(x[i] - p[i] < 0)
			continue;
		g[c[x[i] - p[i]]].pb(mp(c[x[i] + d[i]], mp(i, t[i] + p[i])));
	}
	for(int i = 1; i < m; ++i)
	{
		g[a[i - 1]].pb(mp(a[i], mp(-1, v[i] - v[i - 1])));
		g[a[i]].pb(mp(a[i - 1], mp(-1, v[i] - v[i - 1])));
	}
	for(int i = 0; i <= cnt; ++i)
		d[i] = INF;
	d[0] = 0;
	q.insert(mp(d[0], 0));
	path[0] = mp(-1, -1);
	while(!q.empty())
	{
		int v = q.begin() -> second;
		q.erase(q.begin());
		for(int i = 0; i < g[v].size(); ++i)
		{
			int to = g[v][i].first, id = g[v][i].second.first, len = g[v][i].second.second;
			if(d[to] > d[v] + len)
			{
				q.erase(mp(d[to], to));
				d[to] = d[v] + len;
				q.insert(mp(d[to], to));
				path[to] = mp(v, id);
			}
		}
	}
	cout << d[cnt] << "\n";
	vector< int > ans;
	for(int cur = cnt;;)
	{
		if(path[cur].second != -1)
			ans.pb(path[cur].second);
		cur = path[cur].first;
		if(!cur)
			break;		
	}
	cout << ans.size() << "\n";
	reverse(ans.begin(), ans.end());
	for(int i = 0; i < ans.size(); ++i)
		cout << ans[i] << " ";
	return 0;
}


