#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <queue>
#include <map>
#include <stack>
using namespace std;

#define mod 100000007
#define oo 0x3f3f3f3f
#define LL long long
#define mxn 210005
#define mxe 520005

int first[mxn], vv[mxe], cost[mxe], nxt[mxe], id[mxe], e = 0;
int d[mxn], fa[mxn], p[mxn], cnt = 2, x[mxn];

struct node {
	int cur, dis;
	bool operator < (const node &b) const {
		return b.dis < dis;
	}
};

map<int,int> mp;
priority_queue<node> q;
stack<int> st;

void add( int u, int v, int cst, int k ) {
	id[e] = k;
	vv[e] = v; cost[e] = cst; nxt[e] = first[u]; first[u] = e++;
}

int main()
{
	memset( first, -1, sizeof(first) );
	memset( d, 0x3f, sizeof(d) );
	int n, l, xx, dd, tt, pp, u, v;
	scanf( "%d%d", &n, &l );
	mp[0] = 1; mp[l] = 2;
	x[0] = 0; x[1] = l;
	for( int i = 0; i < n; ++i ) {
		scanf( "%d%d%d%d", &xx, &dd, &tt, &pp );
		if( mp.count(xx + dd) == 0 ) {
			x[cnt++] = xx + dd;
			mp[xx+dd] = v = cnt;
		}
		else v = mp[xx+dd];
		if( xx - pp >= 0 && mp.count(xx - pp) == 0 ) {
			x[cnt++] = xx - pp;
			mp[xx-pp] = u = cnt;
		}
		else if(xx - pp >= 0) u = mp[xx-pp];
		if( xx - pp >= 0 )
			add( u, v, tt + pp, i + 1 );
	}
	sort( x, x + cnt );
	node k;
	for( int i = 0; i < cnt - 1; ++i ) {
		u = mp[x[i]], v = mp[x[i+1]]; fa[v] = u;
		add( u, v, x[i+1] - x[i], 0 ); p[v] = e - 1;
		add( v, u, x[i+1] - x[i], 0 );
		d[u] = x[i];
		k.cur = u; k.dis = d[u];
		q.push(k);
	}
	d[v] = x[cnt-1];
	k.cur = v; k.dis = d[v]; q.push(k);
	while( !q.empty() ) {
		node f = q.top(); q.pop();
		if( f.dis > d[f.cur] )
			continue;
		if( f.cur == 2 )
			break;
		for( int i = first[f.cur]; i != -1; i = nxt[i] ) {
			v = vv[i];
			if( d[v] > f.dis + cost[i] ) {
				d[v] = f.dis + cost[i];
				node nv;
				nv.cur = v; nv.dis = d[v];
				fa[v] = f.cur; p[v] = i;
				q.push(nv);
			}
		}
	}
	printf( "%d\n", d[2] );
	int s = 2;
	while( fa[s] ) {
		if( id[p[s]] )
			st.push(id[p[s]]);
		s = fa[s];
	}
	printf( "%d\n", st.size() );
	if( st.size() ) {
		while( !st.empty() )
			printf( "%d ", st.top() ), st.pop();
		puts("");
	}
	return 0;
}
  	 		  		 	   		  				  	