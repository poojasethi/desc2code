#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <cstring>
#include <cassert>
#include <queue>

#define big long long int
#define ubig unsigned long long int 
#define SZ(x) int(x.size())
#define pb push_back
// #define mp make_pair
#define Ctrn(); cout << endl; return 0;
#define Debug(x) cout << #x << " = " << x << endl;
#define Mire(); cout << "Mire" << endl; 
#define Endl(); cout << "\n"; 
#define rep(i, b, e) for(int i = (b);i < (e);i++)
#define intheNameOfGod ios::sync_with_stdio(false);

using namespace std;

const big maxn = 2000 * 100 + 100;
const big mod = 1000000007;

set < pair <int, int> > s;
int d[maxn];
int par[maxn], id[maxn];

vector<int> r;

map <int, int> mp;

struct Edge
{
	int u, w, id;
	Edge() {}
	Edge(int _u, int _w, int _id)
	{
		u = _u;
		w = _w;
		id = _id;
	}
};

vector<Edge> adj[maxn];


int sz = 0;
void mpc(int x) {
	if (!mp.count(x))
		mp[x] = sz++;
}

int main () {
	int n, l;
	cin >> n >> l;

	mpc(0);
	mpc(l);

	l = mp[l];

	int pr = 0, prx = 0;

	for (int i = 0; i < n; i++) {
		int x, d, p, t;

		cin >> x >> d >> t >> p;

		int v = x - p, u = x + d;
		if (v < 0)
			continue;
		mpc(v);
		mpc(u);

		v = mp[v], u = mp[u];
		adj[v].pb(Edge(u, p+t ,i+1));
	}

	for (map <int, int> :: iterator it = mp.begin(); it != mp.end(); it++) {
		map <int, int> :: iterator it2 = it;
		it2++;
		if (it2 == mp.end())
			continue;
		adj[it->second].push_back(Edge(it2->second, it2->first - it->first, -1));
		adj[it2->second].push_back(Edge(it->second, it2->first - it->first, -1));
	}

	memset(d, 63, sizeof(d));

	d[0] = 0;
	s.insert(make_pair(d[0], 0));

	while (!s.empty()) {

		int v = s.begin() -> second;
		s.erase(make_pair(d[v],v));

		for (int i = 0; i < SZ(adj[v]); i++) {
			int u = adj[v][i].u;
			int w = adj[v][i].w;

			if (d[u] > d[v] + w) {
				par[u] = v;
				id[u] = adj[v][i].id;
				s.erase(make_pair(d[u], u));
				d[u] = d[v] + w;
				s.insert(make_pair(d[u], u));
			}
		}
	}

	cout << d[l] << endl;

	int k = l;

	while (k != 0) {
		if(id[k] != -1)
			r.pb(id[k]);
		k = par[k];
	}

	cout << SZ(r) << endl;

	for (int i = SZ(r)-1; i >= 0; i--) {
		cout << r[i] << " ";
	}
	cout << endl;
	return 0;




	

}