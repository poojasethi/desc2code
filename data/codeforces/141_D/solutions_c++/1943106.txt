#include <cstdio>
#include <string>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <queue>
using namespace std;

typedef pair<int,int> pii;
struct event
{
	int val,x,last;
	event(int _val,int _x,int _last)
	{
		val = _val;
		x = _x;
		last = _last;
	}
};
struct segment
{
	int st,ed,cost,no,last;
	segment(int _st,int _ed,int _cost,int _no):st(_st),ed(_ed),cost(_cost),no(_no),last(0
			){}
};
vector<segment> seg;
int lbest = 0;
int lbestlast = -1, tmplast;

class Rcmp
{
	public:
		bool operator() (const event &a,const event &b) const
		{
			return a.val > b.val;
		}
};
priority_queue< event, vector<event>, Rcmp > rque;

class Lcmp
{
	public:
		bool operator() (const event &a,const event &b) const 
		{
			return a.x > b.x;
		}
};
priority_queue< event, vector<event>, Lcmp > lque;

bool segcmp(const segment &a,const segment &b)
{
	return a.st < b.st;
}

int main()
{
	int n,l;
	scanf("%d%d",&n,&l);
	for (int i = 1;i <= n;++i)
	{
		int xi,di,ti,pi;
		scanf("%d%d%d%d",&xi,&di,&ti,&pi);
		if (xi - pi >= 0)
		{
			seg.push_back(segment(xi-pi,xi+di,pi+ti,i));
		}
	}

	sort(seg.begin(),seg.end(),segcmp);

	for (int i = 0;i < seg.size();++i)
	{
		while (!lque.empty() && lque.top().x <= seg[i].st)
		{
			if (lque.top().val < lbest)
			{
				lbest = lque.top().val;
				lbestlast = lque.top().last;
			}
			lque.pop();
		}
		while (!rque.empty() && rque.top().x < seg[i].st)
		{
			rque.pop();
		}
		int f = seg[i].st + lbest;
		tmplast = lbestlast;
		if (!rque.empty() && rque.top().val - seg[i].st < f)
		{
			f = rque.top().val - seg[i].st;
			tmplast = rque.top().last;
		}
		f += seg[i].cost;       
		seg[i].last = tmplast;
		lque.push(event(f - seg[i].ed,seg[i].ed,i));
		rque.push(event(f + seg[i].ed,seg[i].ed,i));
	}
	while (!lque.empty())
	{
		if (lque.top().val < lbest)
		{
			lbest = lque.top().val;
			lbestlast = lque.top().last;
		}
		lque.pop();
	}
	printf("%d\n",l + lbest);
	vector<int> ans;
	for (int i = lbestlast;i != -1;i = seg[i].last)
	{
		ans.push_back(seg[i].no);
	}
	printf("%u\n",ans.size());
	for (int i = ans.size()-1;i >= 0;--i)
	{
		printf("%d ",ans[i]);
	}
	printf("\n");
	return 0;
}
