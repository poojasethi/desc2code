#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <algorithm>

using namespace std;

const int limite=200000;
const int infinito=1000000001;

//typedef long long int ll;

int n,l;
int x[limite],d[limite],t[limite],p[limite];

int main()
{
  cin>>n>>l;
  set<int> s;
  s.insert(0);
  s.insert(l);
  for (int i=0;i<n;i++) {
    cin>>x[i]>>d[i]>>t[i]>>p[i];
    if (x[i]-p[i]>=0) {
      s.insert(x[i]-p[i]);
      s.insert(x[i]+d[i]);
    }
  }
  map<int,int> m;
  vector<int> invm(int(s.size()));
  {
    int i=0;
    for (set<int>::iterator it=s.begin();it!=s.end();it++,i++) {
      m[*it]=i;
      invm[i]=*it;
    }
  }
  int pos0=m[0];
  int posl=m[l];
  vector<vector<pair<int,int> > > g(int(m.size()));
  vector<vector<int> > tramp(int(m.size()));
  for (int i=0;i<int(g.size());i++) {
    if (i<int(g.size())-1) {
      g[i].push_back(pair<int,int> (i+1,invm[i+1]-invm[i]));
      tramp[i].push_back(-1);
    } if (i>0) {
      g[i].push_back(pair<int,int> (i-1,invm[i]-invm[i-1]));
      tramp[i].push_back(-1);
    }
  }
  for (int i=0;i<n;i++) {
    if (x[i]-p[i]>=0) {
      g[m[x[i]-p[i]]].push_back(pair<int,int> (m[x[i]+d[i]],p[i]+t[i]));
      tramp[m[x[i]-p[i]]].push_back(i+1);
    }
  }
  priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;
  q.push(pair<int,int> (0,pos0));
  vector<int> dist(int(g.size()),infinito);
  vector<int> anterior(int(g.size()),-1);
  vector<int> trampanterior(int(g.size()),-1);
  dist[pos0]=0;
  while (not q.empty()) {
    pair<int,int> p=q.top();
    q.pop();
    int u=p.second;
    int du=p.first;
    if (du==dist[u]) {
      vector<pair<int,int> > &ar=g[u];
      for (int i=0;i<int(ar.size());i++) {
	p=ar[i];
	int v=p.first;
	int duv=p.second;
	if (dist[v]>du+duv) {
	  dist[v]=du+duv;
	  anterior[v]=u;
	  trampanterior[v]=tramp[u][i];
	  q.push(pair<int,int> (dist[v],v));
	}
      }
    }
  }
  cout<<dist[posl]<<endl;
  vector<int> sol;
  int u=posl;
  while (u!=pos0) {
    if (trampanterior[u]!=-1)
      sol.push_back(trampanterior[u]);
    u=anterior[u];
  }
  reverse(sol.begin(),sol.end());
  cout<<int(sol.size())<<endl;
  for (int i=0;i<int(sol.size());i++) {
    if (i>0) cout<<" ";
    cout<<sol[i];
  }
  cout<<endl;
}
