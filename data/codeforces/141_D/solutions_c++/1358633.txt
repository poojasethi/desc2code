#include<iostream>
#include<vector>
#include<queue>
#include<map>
using namespace std;

#define PII pair<int,int>
#define PPP pair<PII,PII>
#define F first
#define S second
#define SX F.F
#define EX F.S
#define T S.F
#define Ind S.S
#define RT F.F
#define V F.S
#define Mrk S.F
#define P S.S

const int MAX = 200*1000+10;
const int INF = 1<<28;
vector<int> adj[MAX+10];
vector<int> ind[MAX+10];
PPP ramp[MAX+10];
bool mrk[MAX+10];
map<int,int> mp;
int x[MAX+10];
int par[MAX+10];
int n,L;
int end;

priority_queue<PPP,vector<PPP>,greater<PPP> > heap;

int dij(int s)
{
	heap.push( PPP( PII( 0 , s ) , PII( 0 , INF ) ) );
	for(int i=0; i<=end; i++)
	{
		int v,t,p;
		do
		{
			v = heap.top().V;
			t = heap.top().RT;
			p = heap.top().P;
			heap.pop();
		}while( mrk[v] );
		//cerr << v << " " << x[v] << endl;
		mrk[v] = true;
		par[v] = p;
		if( v == end )
			return t;
		heap.push( PPP( PII( t + x[v+1] - x[v] , v+1 ) , PII( 0 , INF ) ) );
		if( v != 0 )
			heap.push( PPP( PII( t + x[v] - x[v-1] , v-1 ) , PII( 0 , -INF ) ) );
		for(int j=0; j<(int)adj[v].size(); j++)
			heap.push( PPP( PII( t + ramp[ ind[v][j] ].T , adj[v][j] ) , PII( 1 , ind[v][j] ) ) );
	}
	return 0;
}


int main()
{
	mp[0];
	cin >> n >> L;
	mp[L];
	for(int i=0; i<n; i++)
	{
		int x,d,t,p;
		cin >> x >> d >> t >> p;
		if( x - p < 0 )
			continue;
		mp[x-p]; mp[x+d];
		ramp[i] = PPP( PII( x-p , x+d ) , PII( t+p , i ) );
	}
	{ int i=0;	
		for(map<int,int>::iterator it = mp.begin(); it != mp.end(); it++)
		{
			x[i] = it->F;
			it->S = i++;
		}
	}
	end = mp.size() - 1;
	for(int i=0; i<n; i++)
	{
		adj[ mp[ramp[i].SX] ].push_back( mp[ramp[i].EX] );
		ind[ mp[ramp[i].SX] ].push_back( i );
	}
	cout << dij(0) << endl;
	int now = end;
	vector<int> out;
	while( now != 0 )
	{
		if( par[now] == INF )
			now--;
		else if( par[now] == -INF )
			now++;
		else
		{
			out.push_back( par[now] );
			now = mp[ ramp[ par[now] ].SX ];
		}
	}
	cout << out.size() << endl;
	for(int i=(int)out.size()-1; i>=0; i--)
		cout << out[i]+1 << endl;
	return 0;
}