#include<bits/stdc++.h>
#define N 1000005
using namespace std;
vector<int>vec[N];long long ans;
int a[N],sum[N],id[N<<2],n,P,ql,qr,i;
int Max(int A,int B){return a[A]>a[B]?A:B;}
void build(int x,int l,int r){
	id[x]=l;if (l==r) return;
	int mid=(l+r)>>1;
	build(x<<1,l,mid);build(x<<1|1,mid+1,r);
	id[x]=Max(id[x<<1],id[x<<1|1]);
}
int Query(int x,int l,int r){
	if (ql<=l&&r<=qr) return id[x];
	int mid=(l+r)>>1,ret=0;
	if (ql<=mid) ret=Max(ret,Query(x<<1,l,mid));
	if (qr>mid)  ret=Max(ret,Query(x<<1|1,mid+1,r));
	return ret;
}
int Find(int t,int l,int r){
	if (!vec[t].size()) return 0;
	int L=lower_bound(vec[t].begin(),vec[t].end(),l)-vec[t].begin();
	int R=upper_bound(vec[t].begin(),vec[t].end(),r)-vec[t].begin();
	return R-L;
}
void solve(int l,int r){
	if (l>=r) return;
	ql=l;qr=r;int k=Query(1,1,n);
	if (k-l<r-k){
	  for (int i=l;i<k;i++){
		  int t=(sum[k-1]-sum[i-1]+P)%P;
		  if (!(t=(P-t)%P)) ans++;
		  t=(t+sum[k])%P;
		  ans+=Find(t,k+1,r);
    }ans+=Find(sum[k],k+1,r);
  }else{
  	for (int i=k+1;i<=r;i++){
  		int t=(sum[i]-sum[k]+P)%P;
  		if (!(t=(P-t)%P)) ans++;
  		t=(sum[k-1]-t+P)%P;
  		ans+=Find(t,l-1,k-2);
    }ans+=Find(sum[k-1],l-1,k-2);
  }
  solve(l,k-1);
  solve(k+1,r);
}
int main(){
	scanf("%d%d",&n,&P);a[0]=-1;
	vec[sum[0]=0].push_back(0);
	for (i=1;i<=n;i++)
		scanf("%d",&a[i]),
		vec[sum[i]=(sum[i-1]+a[i])%P].push_back(i);
	build(1,1,n);
	solve(1,n);
	printf("%I64d\n",ans);
}