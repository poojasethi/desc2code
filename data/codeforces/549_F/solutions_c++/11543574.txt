#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
long long ans;
vector <int> v[1000005];
int a[300005],V[300005],F[300005],f[300005],L,R,i,j,k,n,t[300005],s[300005];
int getf(int k) {return f[k]==k?f[k]:f[k]=getf(f[k]);}
int GETF(int k) {return F[k]==k?F[k]:F[k]=GETF(F[k]);}
int cmp(int i,int j) {return a[i]<a[j];}
int work(int A,int B,int C)
{
    A=(A%k+k)%k;
    return upper_bound(v[A].begin(),v[A].end(),C)-lower_bound(v[A].begin(),v[A].end(),B);
}
int main()
{
    scanf("%d%d",&n,&k);
    for (i=1; i<=n; i++)
    {
        scanf("%d",&a[i]);
        s[i]=(s[i-1]+a[i])%k;
        t[i]=i;
    }
    for (i=0; i<=n; i++) v[s[i]].push_back(i);
    sort(t+1,t+n+1,cmp);
    for (i=1; i<=n; i++) f[i]=F[i]=i;
    for (i=1; i<=n; i++)
    {
        V[t[i]]=1;
        if (V[t[i]-1]) f[getf(t[i])]=getf(t[i]-1),F[GETF(t[i]-1)]=GETF(t[i]);
        if (V[t[i]+1]) f[getf(t[i]+1)]=getf(t[i]),F[GETF(t[i])]=GETF(t[i]+1);
        L=getf(t[i]); R=GETF(t[i]);
        if (t[i]-L<=R-t[i]) for (j=L; j<=t[i]; j++) ans+=work(s[j-1]+a[t[i]],t[i],R); else
            for (j=t[i]; j<=R; j++) ans+=work(s[j]-a[t[i]],L-1,t[i]-1);
    }
    cout<<ans-n;
    return 0;
}
