#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long ll;
const int MAXN = 300006,MAXK = 1000006;
ll ret = 0LL;
int n,k,ord[MAXN],nxt[MAXN],pre[MAXN],s[MAXN],a[MAXN];
vector<int> pos[MAXK];

inline bool cmp(const int &x,const int &y){
	return a[x] < a[y];
}

int main(){
	scanf("%d%d",&n,&k);
	for(int i = 1;i <= n;++ i){
		scanf("%d",&a[i]);
		ord[i - 1] = i;
		pre[i] = i - 1; nxt[i] = i + 1;
	}
	sort(ord,ord + n,cmp);
	pos[s[0] = 0].push_back(0);
	for(int i = 1;i <= n;++ i){
		s[i] = (s[i - 1] + a[i] % k) % k;
		pos[s[i]].push_back(i);
	}
	for(int cur,i = 0;i < n;++ i){
		cur = ord[i];
		if(cur - pre[cur] < nxt[cur] - cur){
			for(int tmp,j = pre[cur];j < cur;++ j){
				tmp = (s[j] + a[cur]) % k;
				ret += upper_bound(pos[tmp].begin(),pos[tmp].end(),nxt[cur] - 1) - lower_bound(pos[tmp].begin(),pos[tmp].end(),cur);
			}
		}else{	
			for(int tmp,j = cur;j < nxt[cur];++ j){
				tmp = (s[j] + k - a[cur] % k) % k;
				ret += upper_bound(pos[tmp].begin(),pos[tmp].end(),cur - 1) - lower_bound(pos[tmp].begin(),pos[tmp].end(),pre[cur]);
			}
		}
		pre[nxt[cur]] = pre[cur];
		nxt[pre[cur]] = nxt[cur];
	}
	printf("%I64d\n",ret - n);
	return 0;
}
