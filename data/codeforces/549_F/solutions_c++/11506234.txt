#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#define M 300300
using namespace std;
struct Array{
	int a[1001001],tim[1001001],T;
	void Initialize()
	{
		++T;
	}
	int& operator [] (int x)
	{
		if(tim[x]!=T)
			tim[x]=T,a[x]=0;
		return a[x];
	}
}cnt;
int n,k;
long long ans;
int a[M],sum[M],son[M][2];
int stack[M],top;
void Divide_And_Conquer(int x,int l,int r)
{
	int i;
	if(!x) return ;
	if( x-l < r-x )
	{
		Divide_And_Conquer(son[x][0],l,x-1);
		cnt.Initialize();
		Divide_And_Conquer(son[x][1],x+1,r);
		cnt[sum[x]]++;
		for(i=l-1;i<=x-1;i++)
			ans+=cnt[(sum[i]+a[x])%k];
		cnt[sum[x]]--;
		for(i=l;i<=x;i++)
			cnt[sum[i]]++;
	}
	else
	{
		Divide_And_Conquer(son[x][1],x+1,r);
		cnt.Initialize();
		Divide_And_Conquer(son[x][0],l,x-1);
		cnt[sum[l-1]]++;
		for(i=x;i<=r;i++)
			ans+=cnt[(sum[i]+k-a[x]%k)%k];
		cnt[sum[l-1]]--;
		for(i=x;i<=r;i++)
			cnt[sum[i]]++;
	}
}
int main()
{
	int i;
	cin>>n>>k;
	for(i=1;i<=n;i++)
		scanf("%d",&a[i]);
	for(i=1;i<=n;i++)
		sum[i]=(sum[i-1]+a[i])%k;
	for(i=1;i<=n;i++)
	{
		while( top && a[stack[top]]<a[i] )
		{
			if( top>=2 && a[stack[top-1]]<a[i] )
				son[stack[top-1]][1]=stack[top];
			else
				son[i][0]=stack[top];
			stack[top--]=0;
		}
		stack[++top]=i;
	}
	for(i=1;i<top;i++)
		son[stack[i]][1]=stack[i+1];
	Divide_And_Conquer(stack[1],1,n);
	cout<<ans-n<<endl;
	return 0;
}
