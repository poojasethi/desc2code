#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<stdlib.h>
#include<vector>
#include<queue>
using namespace std;
#define ll long long

int max(int a,int b) {return a>b?a:b;}
int min(int a,int b) {return a<b?a:b;}
void chkmax(int &a,int b) {if (a<b) a=b;}
void chkmin(int &a,int b) {if (a>b) a=b;}

const int maxn=300000+10;
const int maxsz=1000000+10;
int mo,a[maxn],sum[maxn];
ll aang;

struct cnt{
	int a[maxsz],tim[maxsz],t;
	void init() {t++;}
	int& operator [] (int x)
	{
		if (tim[x]!=t)
			tim[x]=t,a[x]=0;
		return a[x];
	}
}cnt;

int get_mod(int x)
{
	x=x%mo;
	x=x<0?x+mo:x;
	return x;
}

void work(int l,int r)
{
	int i;
	if (l==r) return;
//	printf("%d--%d\n",l,r);
	if (l+1==r)
	{
		if (min(a[l],a[r])%mo==0) aang++;//,printf("min(%d,%d)\n",a[l],a[r]);
		return;
	}
	int mid=(l+r)/2,p1,p2,maxa;

	p1=mid+1; p2=mid; maxa=0;
	cnt.init();
	while (p1>l)
	{
		p1--;
		chkmax(maxa,a[p1]);
		while (a[p2+1]<maxa&&p2<r)
		{
			p2++;
			cnt[get_mod(sum[p2]-sum[mid])]++;
		}
		aang+=(ll)cnt[get_mod(maxa-sum[mid]+sum[p1-1])];
	}

	p1=mid+1; p2=mid; maxa=0;
	cnt.init();
	while (p2<r)
	{
		p2++;
		chkmax(maxa,a[p2]);
		while (a[p1-1]<=maxa&&p1>l)
		{
			p1--;
			cnt[get_mod(sum[mid]-sum[p1-1])]++;
		}
		aang+=cnt[get_mod(maxa-sum[p2]+sum[mid])];
	}
	work(l,mid); work(mid+1,r);

}

int main()
{
	int i,n;
	scanf("%d%d\n",&n,&mo);
	for (i=1;i<=n;i++) scanf("%d",&a[i]);
	sum[0]=0;
	for (i=1;i<=n;i++)
		sum[i]=(sum[i-1]+a[i])%mo;
	cnt.t=0;
	work(1,n);
	printf("%I64d\n",aang);
}

         