#include <cstdio>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include <queue>
#include <set>
#include <map>
using namespace std;
typedef pair< int, int > PII;
typedef long long LL;
typedef double db;
const int N = 300005, M = 1000005;

#define foi( i, x ) for ( typeof( x.begin() ) i=x.begin(); i!=x.end(); ++i )
#define fd( i, y, x ) for ( int i=y-1; i>=x; --i )
#define fo( i, x, y ) for ( int i=x; i<y; ++i )
#define mkp( A, B ) make_pair( A, B )
#define pb( x ) push_back( x )
#define fi first
#define se second

int v[N], lc[M], rc[M], ind[N];
int n, m;
LL Res;

void solve( int l, int r )
{
    if ( r - l == 1 ) return;
    int mid = ( l + r ) >> 1;
    int _l = mid, _r = mid;
    int lm = v[ _l-1 ], rm = v[_r];
    int sl = v[ _l-1 ]%m, sr = v[_r]%m;
    while ( _l>l || _r<r )
        if ( _l>l && ( _r==r || rm>lm ) )
        {
            Res += rc[ ( m+lm-sl )%m ], ++lc[ ind[ _l-1 ]=sl ]; 
            if ( --_l ) sl=( sl+v[ _l-1 ] )%m, lm=max( lm, v[ _l-1 ] );
        }
        else
        {
            Res += lc[ ( m+rm-sr )%m ], ++rc[ ind[_r]=sr ];
            ++_r, sr = ( sr+v[_r] )%m, rm = max( rm, v[_r] );
        }
    fo ( i, l, mid ) --lc[ ind[i] ];
    fo ( i, mid, r ) --rc[ ind[i] ];
    solve( l, mid ), solve( mid, r );
}

int main()
{
    ios :: sync_with_stdio( 0 );
    cin >> n >> m;
    fo ( i, 0, n ) cin >> v[i];
    solve( 0, n );
    cout << Res << endl;
    return 0;
}
