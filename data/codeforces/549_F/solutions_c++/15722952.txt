#include<bits/stdc++.h>
using namespace std;
const int N = 3e5 + 5;
int n, k, a[N], s[N], L[N], R[N];
long long ans;
vector<int> G[1000005];
inline int work(int k, int l, int r) { return upper_bound(G[k].begin(), G[k].end(), r) - lower_bound(G[k].begin(), G[k].end(), l); }
int main() {
	scanf("%d%d", &n, &k);
	G[0].push_back(0);
	for(int i = 1; i <= n; ++ i) scanf("%d", &a[i]), s[i] = (s[i-1] + a[i]) % k, G[s[i]].push_back(i);
	for(int i = 1; i <= n; ++ i)for(L[i] = i - 1; L[i] && a[L[i]] < a[i]; L[i] = L[L[i]]);
	for(int i = n; i; -- i)		for(R[i] = i + 1; R[i] <= n && a[R[i]] <= a[i]; R[i] = R[R[i]]);
	for(int i = 1; i <= n; ++ i)
		if(i - L[i] < R[i] - i) 
			for(int j = L[i] + 1; j <= i; ++ j) ans += work((s[j-1] + a[i]) % k, i, R[i] - 1); 		
		else 
			for(int j = i; j <= R[i] - 1; ++ j) ans += work(((s[j] - a[i]) % k + k) % k, L[i], i-1);
	printf("%I64d", ans-n);
}

                                        