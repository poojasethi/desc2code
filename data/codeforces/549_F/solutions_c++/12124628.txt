#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

#define LY(p) freopen (p".in", "r", stdin); freopen (p".out", "w", stdout)
#define M 300010
using namespace std;
int s[1000010], a[M], n, k;
long long ans = 0;

int mod (int x) {
	if (x >= k) x -= k;
	if (x >= k) x %= k;
	if (x < 0) x += k;
	return x;
}

void clean (int l, int r, int mode) {
	int t = 0;
	s[t] = 0;
	if (mode)
		for (int i = l; i <= r; i++)
			t = mod (t + a[i]), s[t] = 0;
	else
		for (int i = r; i >= l; i--)
			t = mod (t + a[i]), s[t] = 0;
}

void work (int l, int r) {
	int mid ((l + r) >> 1);
	for (int i = mid, j = mid, le = 0, ri = 0, sl = 0, sr = 0; i >= l; i--) {
		sl = mod (sl + a[i]), le = max (le, a[i]);
		while (j < r && max (ri, a[j + 1]) <= le)
			j ++, sr = mod (sr + a[j]), ri = max (ri, a[j]), s[sr] ++;
		ans += s[mod (k - sl + le)];
	}
	clean (mid + 1, r, 1);
	for (int i = mid + 1, j = mid + 1, le = 0, ri = 0, sl = 0, sr = 0; i <= r; i++) {
		sr = mod (sr + a[i]), ri = max (ri, a[i]);
		while (j > l && max (le, a[j - 1]) < ri) //<
			j --, sl = mod (sl + a[j]), le = max (le, a[j]), s[sl] ++;
		ans += s[mod (k - sr + ri)];
	}
	clean (l, mid, 0);
	if (l < r)
		work (l, mid), work (mid + 1, r);
}

int main()
{
	//LY("F");
	scanf ("%d %d", &n, &k);
	for (int i = 1; i <= n; i++)
		scanf ("%d", &a[i]);
	work (1, n);
	printf ("%I64d", ans);
	return 0;
}
