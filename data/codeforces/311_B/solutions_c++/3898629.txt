#include <cstdio>
#include <algorithm>
using namespace std;
int a[101010], h[101010], t[101010];
long long l[101010], S[101010], dp[2][101010];
int w[101010];
bool g(int i, int k, int m, int n) {
	long long bn = dp[i][n] + S[n];
	long long bm = dp[i][m] + S[m];
	long long bk = dp[i][k] + S[k];
	return (-k + m) * (bm - bn) <= (bk - bm) * (-m + n);
}
long long f(int i, int j, int k) {
	return dp[i][k] + S[k] - l[j] * k;
}
int main() {
	int n, m, p;
	scanf("%d%d%d", &n, &m, &p);
	for (int i = 1; i < n; i++) {
		scanf("%d", &a[i]);
		a[i] += a[i-1];
	}
	for (int i = 0; i < m; i++) {
		scanf("%d%d", &h[i], &t[i]);
		l[i] = t[i] - a[h[i]-1];
	}
	sort(l, l+m);
	dp[0][0] = 0;
	for (int i = 1; i <= m; i++) {
		S[i] = S[i-1] + l[i-1];
		dp[0][i] = 1ll << 60;
	}
	for (int i = 0; i < p; i++) {
		int s = 0, r = 1, ii = i & 1;
		dp[ii ^ 1][0] = 0;
		w[s] = 0;
		for (int j = 1; j <= m; j++) {
			while (s + 1 < r && g(ii, j-1, w[r-1], w[r-2])) --r;
			w[r++] = j-1;
			while (s + 1 < r && f(ii, j-1, w[s]) >= f(ii, j-1, w[s+1])) ++s;
			dp[ii ^ 1][j] = l[j-1] * j - S[j] + f(ii, j-1, w[s]);
		}
	}
	printf("%I64d\n", dp[p&1][m]);
	return 0;
}
