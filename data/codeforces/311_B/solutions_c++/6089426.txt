#include<cstdlib>
#include<cmath>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
using namespace std;
int n,m,p;
int d[100000+10];
int a[100000+10];
typedef long long LL;
LL dp[100000+10][100];
LL sum[100000+10];
LL queue[100000+10];
int l,r;
LL getup(int x,int y,int j)
{
	return dp[x][j]-dp[y][j]+sum[x]-sum[y];
}
LL getdown(int x,int y,int j)
{
	return x-y;
}
bool better(int x,int y,int i,int j)
{
	return getup(x,y,j)<getdown(x,y,j)*a[i];
}
int main()
{
	scanf("%d%d%d",&n,&m,&p);
	for(int i=2;i<=n;i++)
	{
		scanf("%d",&d[i]);
		d[i]+=d[i-1];
	}
	for(int i=1;i<=m;i++)
	{
		int h,t;
		scanf("%d%d",&h,&t);
		a[i]=t-d[h];
	}
	sort(a+1,a+m+1);
	for(int i=1;i<=m;i++)
	{
		sum[i]=sum[i-1]+a[i];
		dp[i][1]=(LL)a[i]*(i-1)-sum[i-1]+sum[0];
	}
	for(int j=2;j<=p;j++)
	{
		l=r=0;
		queue[r++]=0;
		for(int i=1;i<=m;i++)
		{
			dp[i][j]=dp[i][j-1];
			while(l<r-1&&!better(queue[l],queue[l+1],i,j-1))l++;
			dp[i][j]=min(dp[i][j],dp[queue[l]][j-1]+(LL)a[i]*(i-queue[l]-1)-sum[i-1]+sum[queue[l]]);
			while(l<r-1&&getup(queue[r-2],queue[r-1],j-1)*getdown(queue[r-1],i,j-1)>=getup(queue[r-1],i,j-1)*getdown(queue[r-2],queue[r-1],j-1))r--;
			queue[r++]=i;
		}
	}
	cout<<dp[m][p]<<endl;
	return 0;
}
    	 	 	 	 	  	 				   	