#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

const int maxn = 100000+10;

int n,m,p,q[maxn],front,tail,d[maxn];

long long w[maxn],sum[maxn],dp[2][maxn],ans;

int main() {
	int a,b;
	scanf("%d%d%d",&n,&m,&p);
	for(int i = 2; i <= n; i++) {
		scanf("%d",&d[i]);
		d[i] += d[i-1];
	}
	for(int i = 1; i <= m; i++) {
		scanf("%d%d",&a,&b);
		w[i] = b-d[a];
	}
	sort(w+1,w+m+1);
	for(int i = 1; i <= m; i++) {
		sum[i] = sum[i-1] + w[i];
	}
	int now = 1;
	while(now <= m) {
		dp[1][now] = now*w[now]-sum[now];
		now++;
	}
	for(int i = 2; i <= p; i++) {
		int t = (i&1);
		front = 0;tail = 0;q[0] = i-1;
		for(int j = i; j <= m; j++) {
			while(front < tail && 1.0*dp[t^1][q[front+1]]-dp[t^1][q[front]]+sum[q[front+1]]-sum[q[front]] < 1.0*w[j]*(q[front+1]-q[front]))front++;
			dp[t][j] = dp[t^1][q[front]]+(j-q[front])*w[j]-(sum[j]-sum[q[front]]);
			while(front < tail && 1.0*(1.0*dp[t^1][q[tail]]-dp[t^1][q[tail-1]]+sum[q[tail]]-sum[q[tail-1]])*(j-q[tail]) >= 1.0*(1.0*dp[t^1][j]-dp[t^1][q[tail]]+sum[j]-sum[q[tail]])*(q[tail]-q[tail-1]))tail--;
			q[++tail] = j;
		}
	}
	printf("%I64d\n",dp[p&1][m]);
	return 0;
}
  				 	 		 	   		 	  			 	   	