#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
#define N 100005
using namespace std;

int n, m, p, x, y;
int d[N], q[N];
LLD a[N], s[N], dp[N], val[N];

LLD Cross(int x, int y){
	return (val[y] - val[x]) / (y - x);
}

int main(){
	scanf("%d%d%d", &n, &m, &p);
	d[0] = 0;
	FOR(i,1,n) scanf("%d", &x), d[i] = d[i-1] + x;
	FOR(i,0,m){
		scanf("%d%d", &x, &y);
		a[i] = y - d[x - 1];
	}
	
	sort(a, a + m);
	FOD(i,m,0) a[i] -= a[0];
	s[0] = a[0];
	FOR(i,1,m) s[i] = s[i-1] + a[i];
	
	FOR(i,0,m) dp[i] = a[i] * (i + 1) - s[i];
	FOR(i,1,p){
		FOR(j,0,m) val[j] = dp[j] + s[j];
		int hd = 0, tl = -1;
		FOR(j,0,m){
			while (tl > hd && val[q[hd]] - a[j] * q[hd] >= val[q[hd+1]] - a[j] * q[hd+1]) ++hd;
			while (tl > hd && (val[q[tl]] - val[q[tl-1]]) *(j - q[tl]) > (val[j] - val[q[tl]]) * (q[tl] - q[tl-1])) --tl;
			q[++tl] = j;
			dp[j] = a[j] * j - s[j] + val[q[hd]] - a[j] * q[hd];
		}
	}
	
	printf("%I64d\n", dp[m-1]);
	return 0;
}
