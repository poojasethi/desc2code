#include <algorithm>
#include <iostream>
#include <cstring>
using namespace std;
const int MAX = 100005;
long long d[MAX], s[MAX], x[MAX], k[2][MAX], dp[2][MAX], deq[MAX];
long long get(int p, int i, int j)
{
	return (k[p][j] - k[p][i] + j - i - 1) / (j - i);
}
int main()
{
	ios::sync_with_stdio(false);
	int n, m, p;
	cin >> n >> m >> p;
	for (int i = 0; i < n - 1; i++)
	{
		cin >> d[i + 1];
		d[i + 1] += d[i];
	}
	for (int i = 0; i < m; i++)
	{
		int h, t;
		cin >> h >> t;
		x[i] = t - d[h - 1];
	}
	sort(x, x + m);
	for (int i = 1; i <= m; i++)
		s[i] = s[i - 1] + x[i - 1];
	for (int i = 1; i <= m; i++)
	{
		dp[1][i] = i * x[i - 1] - s[i];
		k[1][i] = dp[1][i] + s[i];
	}
	for (int z = 2; z <= p; z++)
	{
		int h = 0, t = 0;
		deq[t++] = 0;
		for (int i = 1; i <= m; i++)
		{
			while (t - h > 1 && get((z - 1) & 1, deq[h], deq[h + 1]) <= x[i - 1])
				h++;
			dp[z & 1][i] = k[(z - 1) & 1][deq[h]] - deq[h] * x[i - 1] - s[i] + i * x[i - 1];
			k[z & 1][i] = dp[z & 1][i] + s[i];
			while (t - h > 1 && get((z - 1) & 1, i, deq[t - 1]) <= get((z - 1) & 1, deq[t - 1], deq[t - 2]))
				t--;
			deq[t++] = i;
		}
	}
	cout << dp[p & 1][m] << endl;
	return 0;
}
