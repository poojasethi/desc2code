#include <cstdio>
#include <algorithm>
using namespace std;
#define LL long long
#define For(i,a,b) for(int i = a; i <= b; i++)
#define G(x) (f[c^1][x]+a[i]*(i-x)-s[i]+s[x])
#define N 111111
LL d[N], o[N], a[N], q[N], s[N], id[N], f[2][N];
int n, m, x, p, l, r, c;
bool cmp(int x, int y){
	return o[x] < o[y];
}
int main(){
	scanf("%d%d%d", &n, &m, &p);
	For(i, 2, n) scanf("%I64d", &d[i]), d[i] += d[i - 1];
	For(i, 1, m)
		scanf("%d%I64d", &x, &o[i]), o[i] -= d[x], id[i] = i;
	sort(id + 1, id + 1 + m, cmp);
	For(i, 1, m)
		a[i] = o[id[i]], s[i] = s[i - 1] + a[i];
	For(i, 1, m)
		f[0][i] = a[i] * i - s[i];
	For(j, 2, p){
		q[l = r = 1] = 0; c ^= 1;
		For (i, 1, m) f[c][i] = 1ll << 50;
		For (i, 1, m){
			while (l <= r && (f[c ^ 1][i] - G(q[r])) * (q[r] - q[r - 1]) <= (G(q[r]) - G(q[r - 1])) * (i - q[r])) r--;
			q[++r] = i;
			while (l < r && G(q[l]) >= G(q[l + 1])) l++;
			f[c][i] = min(f[c ^ 1][i], G(q[l]));
		}
	}
	printf("%I64d\n", f[c][m]);
}
