#include <bits/stdc++.h>
#define REP(i,x) for (int i=0;i<(x);i++)
#define REPT(i,x,y) for (int i=(x);i<=(y);i++)
#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAXV 100100
#define MAXP 100
using namespace std;
typedef long long LL;

int n,m,p;
int d[MAXV];
int h[MAXV];
LL t[MAXV];
LL s[MAXV];
LL ssum[MAXV];
LL F[MAXV][MAXP];

inline void fill(int g,int l,int r,int p1,int p2) {
	if (l>r) return;
	int lm=(l+r)>>1;
	int pp=-1; F[lm][g]=1000000000000000000;
	REPT(i,p1,p2) {
		LL nc=F[i][g-1]+(lm-i)*s[lm] - ssum[lm]+ssum[i];
		if (nc < F[lm][g]) {
			F[lm][g]=nc; pp=i;
		}
	}
	fill(g,l,lm-1,p1,pp);
	fill(g,lm+1,r,pp,p2);
}

int main() {
	//ios_base::sync_with_stdio(false);
	//cin>>n>>m>>p; // try 
	scanf("%d %d %d",&n,&m,&p);
	d[1]=0;
	REPT(i,2,n) {
		//cin>>d[i];
		scanf("%d",&d[i]);
		d[i]=d[i-1]+d[i];
	}
	REPT(i,1,m) {
		//cin>>h[i]>>t[i];
		scanf("%d %I64d",&h[i],&t[i]);
	}
	REPT(i,1,m) {
		s[i]=t[i]-d[h[i]];
	}
	sort(s+1,s+m+1); ssum[0]=0;
	REPT(i,1,m) {
		ssum[i]=ssum[i-1]+s[i];
	}
	REPT(i,1,m) {
		F[i][1]=i*s[i] - ssum[i];
	}
	REPT(i,2,p) {
		fill(i,1,m,1,m);
	}
	//cout<<F[m][p]<<endl;
	printf("%I64d\n",F[m][p]);
	return 0;
}

			
