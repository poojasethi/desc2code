#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<fstream>
#include<map>
#include<ctime>
#include<set>
#include<queue>
#include<cmath>
#include<vector>
#include<bitset>
#include<functional>
#define x first
#define y second
#define mp make_pair
#define pb push_back
#define REP(i,l,r) for((i)=(l);(i)<=(r);++(i))
#define REP2(i,l,r) for((i)=(l);(i)!=(r);++(i))
using namespace std;

typedef long long LL;
typedef double ld;

/*
   1 2 2 2 3 1
   1 1 2 3 1 2
   1 2 1 1 3 2
   1 1 2 3 1 2
   1 2 1 1 3 2
   */

const int MAX=200000+10;
const int T=1300;

int n,m;
int a[MAX];
int sum[MAX/T+1][MAX];//这一块的答案
int sum2[MAX/T+1][MAX];//之前数的个数
//对于每个块，维护每个数最后出现的位置，以及该位置的个数。

int tot,back[MAX];
map<int,int> Hash;

int init(int u)
{
    if(Hash.find(u)!=Hash.end())
        return Hash[u];
    Hash[u]=++tot;
    back[tot]=u;
    return tot;
}

void add(int sum[MAX],int x,int b)
{
    if(!x)
        return;
    for(;x<MAX;x+=x&(-x))
        sum[x]+=b;
}

int ask(int sum[MAX],int x)
{
    if(!x)
        return 0;
    int ans=0;
    for(;x;x-=x&(-x))
        ans+=sum[x];
    return ans;
}

void add(int x,int y,int delta)//x为y，到底是加还是减？
{
    for(int i=x/T;i<=n/T;++i)
    {
        int& a=sum2[i][y];
        add(sum[i], a, -1);
        a+=delta;
        add(sum[i], a, 1);
    }
}

int find(int x,int y)//查找x之前的y的个数`
{
    int ans=0;
    if(x/T>0)
        ans=sum2[x/T-1][y];
    for(int i=x/T * T;i<=x;++i)
        if(a[i]==y)
            ++ans;
    return ans;
}

int in[MAX],tmp[MAX],Test;

int getAns(int x,int y)//小于等于x的，个数大于y的数的个数。
{
    int ans=0;
    if(x/T>0)
        ans=ask(sum[x/T-1], n)-ask(sum[x/T-1], y-1);
    ++Test;
    for(int i=max( x/T *T,1 );i<=x;++i)
    {
        if(in[a[i]]!=Test)
        {
            in[a[i]]=Test;
            tmp[a[i]]=( x/T>0?sum2[x/T-1][a[i]]: 0);
        }
        ++tmp[a[i]];
        if(tmp[a[i]]==y)
            ++ans;
    }
    return ans;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#endif
    int i;
    scanf("%d",&n);
    REP(i,1,n)
    {
        scanf("%d",&a[i]);
        a[i]=init(a[i]);
        add(i,a[i],1);
    }
    int m;
    scanf("%d",&m);
    while(m--)
    {
        int type,u,v;
        scanf("%d%d%d",&type,&u,&v);
        if(type==1)
        {
            add(v,a[v],-1);
            a[v]=init(u);
            add(v,a[v],1);
        }
        else if(type==2)
        {
            if(u==1)
                printf("%d\n",back[ a[v] ]);
            else if(u%2==0)
                printf("%d\n",find(v,a[v]));
            else printf("%d\n",getAns(v,find(v,a[v])));
        }
    }
    return 0;
}
