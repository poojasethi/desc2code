#include <cstdio>
#include <cstring>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <utility>
#include <queue>
#include <functional>
#include <map>
#include <set>
#include <cmath>

#define fi first
#define se second
#define fo(i,a,b) for (int i = a; i <= b; i ++)
#define fd(i,a,b) for (int i = a; i >= b; i --)
#define fe(i,x,y) for (int i = x, y = lnk[i]; i; i = nxt[i], y = lnk[i])
#define mkp make_pair
#define pb push_back
#define Fill(x,y) memset(x,y,sizeof(x))
#define Cpy(x,y) memcpy(x,y,sizeof(x))
#define Bit(x,y) ((((x) >> (y)) & 1))
#define mit map<int,SI>::iterator
#define sit SI::iterator
#define SQR(x) ((x) * (x))

#define F(x) (((x)-1)/n+1)
#define BG(x) (1+((x)-1)*n)
#define EN(x) (min(N,(x)*n))

using namespace std;
 
typedef long long LL;
typedef long double DB;
typedef pair <DB, DB> PD;
typedef pair <LL, LL> PLI;
typedef pair <PD, int> PDI;
typedef pair <int, int> PI;
typedef pair <int, PI> PII;
typedef pair <PI, PI> PIII;
typedef set <PI> SI;
typedef vector <int> VI;
 
int Read()
 {
    char c; while (c = getchar(), (c != '-') && (c < '0' || c > '9'));
    bool neg = (c == '-'); int ret = (neg ? 0 : c - 48);
    while (c = getchar(), c >= '0' && c <= '9') ret = ret * 10 + c - 48;
    return neg ? -ret : ret;
 }
 
const int MAXN = 100005;

int cnt[110][MAXN*2], f[110][MAXN*2];
map <int, int> ind;
int N, M, m, n, a[MAXN], ori[MAXN << 1];

void init()
 {
 	scanf("%d", &N);
 	fo (i, 1, N) a[i] = Read();
 	scanf("%d", &M);
 	fo (i, 1, N)
 	 {
 	 	if (!ind[a[i]]) ind[a[i]] = ++ m;
 	 	ori[ind[a[i]]] = a[i];
 	 	a[i] = ind[a[i]];
 	 }
 	 
 	// calc n
 	while (n * n < N) ++ n;
 	n *= 3;
 	
 	fo (i, 1, F(N))
 	 {
 	 	fo (j, 1, N+M) cnt[i][j] = cnt[i-1][j], f[i][j] = f[i-1][j];
 	 	fo (j, BG(i), EN(i))
 	 		++ cnt[i][a[j]], ++ f[i][cnt[i][a[j]]];
 	 }
 }

void work()
 {
 	fo (ca, 1, M)
 	 {
 	 	int tp = Read(), x = Read(), y = Read();
 	 	if (tp & 1)
 	 	 {
 	 	 	swap(x, y);
 	 	 	if (!ind[y]) ind[y] = ++ m, ori[m] = y;
 	 	 	
 	 	 	fo (i, F(x), F(N)) -- f[i][cnt[i][a[x]]], -- cnt[i][a[x]];
 	 	 	a[x] = ind[y];
 	 	 	fo (i, F(x), F(N)) ++ cnt[i][a[x]], ++ f[i][cnt[i][a[x]]];
 	 	 } else
 	 	 {
 	 	 	if (x == 1) { printf("%d\n", ori[a[y]]); continue; }
 	 	 	int bel = F(y);
 	 	 	
 	 	 	int ans1 = cnt[bel-1][a[y]];
 	 	 	fo (i, BG(bel), y) if (a[i] == a[y]) ++ ans1;
 	 	 	if (x & 1)
 	 	 	 {
 	 	 	 	int ans2 = f[bel-1][ans1];
 	 	 	 	fo (i, BG(bel), y) if (++ cnt[bel-1][a[i]] == ans1) ++ ans2;
 	 	 	 	printf("%d\n", ans2);
 	 	 	 	fo (i, BG(bel), y) -- cnt[bel-1][a[i]];
 	 	 	 } else printf("%d\n", ans1);
 	 	 }
 	 }
 }
 
int main()
 {
 	init();
 	work();
 	return 0;
 }
