#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<map>
#define MAXN 200005
#define MAXS 1305
#define MAXK 81
#define lowbit(xx) ((xx)&(-xx))
using namespace std ;
typedef long long LL ;

int sp = 1300, N, M, K ;

struct LTree
{
	int tree[MAXN] ;
	void Add(int x, int ad)
	{
		if(!x) return ;
		for(x; x <= N+M; x += lowbit(x))
			tree[x] += ad ;
	}
	int Ask(int x)
	{
		int ret = 0 ;
		for(x; x; x -= lowbit(x))
			ret += tree[x] ;
		return ret ;
	}
} T[MAXK] ;

int mx[MAXK][MAXN] ;
int p[MAXN], tot, sum[MAXN] ;
int sc[MAXN] ;
map<int, int> rk ;

int one(int x)
{
	int i, now = p[x], c = x/sp, ret = mx[c][now] ;
	for(i = c*sp; i <= x; i ++)
		if(p[i] == now) ret ++ ;
	return ret ;
}
int two(int x)
{
	int i, now = one(x), c = x/sp, ret = T[c].Ask(N+M)-T[c].Ask(now-1) ;
	for(i = c*sp; i <= x; i ++)
		sum[p[i]] = 0 ;
	for(i = c*sp; i <= x; i ++)
		if(mx[c][p[i]]+(++sum[p[i]]) == now) ret ++ ;
	return ret ;
}
void Change(int x, int to)
{
	int i, c = x/sp ;
	for(i = c+1; i <= K; i ++)
	{
		T[i].Add(mx[i][p[x]], -1) ;
		mx[i][p[x]]--, T[i].Add(mx[i][p[x]], 1) ;
		T[i].Add(mx[i][to], -1) ;
		mx[i][to]++, T[i].Add(mx[i][to], 1) ;
	}
	p[x] = to ;
		
}
int main()
{
	int i, j, tmp ;
	int type, fr, to ;
	//freopen("1.in", "r", stdin) ;
	scanf("%d", &N) ;	
	for(i = 0; i < N; i ++)
	{
		scanf("%d", &p[i]) ;
		if(!rk[p[i]]) rk[p[i]] = ++tot, sc[tot] = p[i] ;
		p[i] = rk[p[i]] ;
		mx[i/sp+1][p[i]] ++ ;
	} 
	K = (N-1)/sp+1 ;
	scanf("%d", &M) ;
	for(i = 1; i <= K; i ++)
		for(j = 1; j <= tot; j ++)
		{
			mx[i][j] += mx[i-1][j] ;
			T[i].Add(mx[i][j], 1) ;
		}
	for(i = 1; i <= M; i ++)
	{
		scanf("%d %d %d", &type, &fr, &to) ;
		if(type == 2) 
			if(fr == 1) printf("%d\n", sc[p[to-1]]) ;
			else printf("%d\n", ((fr&1)?two(to-1):one(to-1))) ;
		else 
		{
			if(!rk[fr]) rk[fr] = ++tot, sc[tot] = fr ;
			fr = rk[fr] ;
			Change(to-1, fr) ;
		}
	}
	//system("pause") ;
	return 0 ;
}
