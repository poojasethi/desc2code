#include <bits/stdc++.h>

#define mp make_pair
#define st first
#define nd second
#define pb push_back

using namespace std;

typedef long long ll;
typedef pair< ll,ll > pll;
typedef pair< int,int > pii;

const int inf = 1000000000, N = 100000, SQ = 320, MAX = 200000;

int n, m, q, sq, val[MAX+5], a[N+5], cnt[SQ+5][MAX+5], f[SQ+5][MAX+5];
map<int, int> Map;

int upd(int w, int x, int t) {
	for (; x; x -= x & -x)
		f[w][x] += t;
}

int que(int w, int x) {
	int ans = 0;

	for (; x <= MAX; x += x & -x)
		ans += f[w][x];

	return ans;
}

int g(int i) {
	return (i + sq - 1) / sq;
}

int main()
{
	int cmd, x, y;

	scanf("%d", &n);
	sq = sqrt(n);

	for (int i = 1; i <= n; i++) {
		scanf("%d", a+i);

		if (Map[a[i]] == 0) {
			Map[a[i]] = ++m;
			val[m] = a[i];
		}

		a[i] = Map[a[i]];
	}

	for (int i = 1; i <= n; i++) {
		for (int j = g(i); j <= g(n); j++)
			cnt[j][a[i]]++;
	}

	for (int i = 1; i <= g(n); i++) {
		for (int j = 1; j <= MAX; j++)
			upd(i, cnt[i][j], 1);
	}

	scanf("%d", &q);

	while (q--) {
		scanf("%d %d %d", &cmd, &x, &y);

		if (cmd == 1) {
			if (Map[x] == 0) {
				Map[x] = ++m;
				val[m] = x;
			}

			x = Map[x];

			for (int i = g(y); i <= g(n); i++) {
				upd(i, cnt[i][a[y]], -1);
				cnt[i][a[y]]--;
				upd(i, cnt[i][a[y]], +1);
			}

			a[y] = x;
			
			for (int i = g(y); i <= g(n); i++) {
				upd(i, cnt[i][a[y]], -1);
				cnt[i][a[y]]++;
				upd(i, cnt[i][a[y]], +1);
			}
		}
		else {
			if (x == 1)
				printf("%d\n", val[a[y]]);
			else {
				int ans = 0;

				ans += cnt[g(y) - 1][a[y]];

				for (int i = (g(y) - 1) * sq + 1; i <= y; i++)
					ans += a[i] == a[y];

				if (x % 2 == 0) {
					printf("%d\n", ans);
				}
				else {
					for (int i = (g(y) - 1) * sq + 1; i <= y; i++) {
						upd(g(y) - 1, cnt[g(y) - 1][a[i]], -1);
						cnt[g(y) - 1][a[i]]++;	
						upd(g(y) - 1, cnt[g(y) - 1][a[i]], +1);
					}
					
					int sum = que(g(y) - 1, ans);

					for (int i = (g(y) - 1) * sq + 1; i <= y; i++) {
						upd(g(y) - 1, cnt[g(y) - 1][a[i]], -1);
						cnt[g(y) - 1][a[i]]--;	
						upd(g(y) - 1, cnt[g(y) - 1][a[i]], +1);
					}

					printf("%d\n", sum);
				}
			}
		}
	}

	return 0;
}
