#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <bitset>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <stack>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

typedef long long ll;
typedef pair<int, int> ii;

const int inf = 1e9 + 143;
const ll longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 201001;
const int K = 450;

int a[N], op[N], x[N], y[N];

class tree{
public:
    int f[N];
    void operator += (int x){
        while(x < N){
            f[x]++;
            x += x & -x;
        }
    }
    void operator -= (int x){
        while(x < N){
            f[x]--;
            x += x & -x;
        }
    }
    int operator [] (int kth) const{
        int cur = 0;
        for(int i = 18; i >= 0; i--){
            int d = 1 << i;
            if(cur + d < N && f[cur + d] < kth){
                cur += d;
                kth -= f[cur];
            }
        }
        if(kth != 1)
            return inf;
        return cur + 1;
    }
    int getless(int x){
        int s = 0;
        while(x > 0){
            s += f[x];
            x -= x & -x;
        }
        return s;
    }
};

class tree_dsz{
public:
    int *f, n, lg;
    vector<int> vs;
    void init(){
        sort(all(vs));
        vs.erase(unique(all(vs)), vs.end());
        n = vs.size() + 5;
        f = new int[n];
        for(int i = 0; i < n; i++)
            f[i] = 0;
        lg = 1;
        while((1 << lg) < n)
            ++lg;
    }
    void operator += (int x){
        x = lower_bound(all(vs), x) - vs.begin() + 1;
        while(x < n){
            f[x]++;
            x += x & -x;
        }
    }
    void operator -= (int x){
        x = lower_bound(all(vs), x) - vs.begin() + 1;
        while(x < n){
            f[x]--;
            x += x & -x;
        }
    }
    int operator [] (int kth) const{
        int cur = 0;
        for(int i = lg; i >= 0; i--){
            int d = 1 << i;
            if(cur + d < n && f[cur + d] < kth){
                cur += d;
                kth -= f[cur];
            }
        }
        if(cur >= vs.size())
            return inf;
        return vs[cur];
    }
    int getless(int x){
        x = upper_bound(all(vs), x) - vs.begin();
        int s = 0;
        while(x > 0){
            s += f[x];
            x -= x & -x;
        }
        return s;
    }
};

tree T[K + 5];
tree_dsz Tbig[K + 5];

vector<int> have[N];

int occ[N];
int big_id[N];
vector<int> bigs;

void add(int i,int x){
    a[i] = x;
    if(big_id[x]){
        Tbig[big_id[x]] += i;
    }else{
        for(int j = 0; j < have[x].size(); j++)
            T[j + 1] -= have[x][j];

        have[x].push_back(i);

        int j = (int)have[x].size() - 1;
        while(j > 0 && have[x][j - 1] > have[x][j]){
            swap(have[x][j - 1], have[x][j]);
            --j;
        }

        for(int j = 0; j < have[x].size(); j++)
            T[j + 1] += have[x][j];
    }
}

void del(int i){
    int x = a[i];
    if(big_id[x]){
        Tbig[big_id[x]] -= i;
    }else{
        for(int j = 0; j < have[x].size(); j++)
            T[j + 1] -= have[x][j];

        for(int j = 0; j < have[x].size(); j++)
            if(have[x][j] == i){
                have[x].erase(have[x].begin() + j);
                break;
            }

        for(int j = 0; j < have[x].size(); j++)
            T[j + 1] += have[x][j];
    }
}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int n = read();

    vector<int> xs;

    for(int i = 1; i <= n; i++){
        a[i] = read();
        xs.push_back(a[i]);
    }

    int m = read();

    for(int i = 1; i <= m; i++){
        op[i] = read();
        x[i] = read();
        y[i] = read();
        if(op[i] == 1){
            xs.push_back(x[i]);
        }
    }

    sort(all(xs));
    xs.erase(unique(all(xs)), xs.end());

    for(int i = 1; i <= n; i++)
        a[i] = lower_bound(all(xs), a[i]) - xs.begin();

    for(int i = 1; i <= m; i++){
        if(op[i] == 1){
            x[i] = lower_bound(all(xs), x[i]) - xs.begin();
        }
    }

    for(int i = 1; i <= n; i++){
        occ[a[i]]++;
    }
    for(int i = 1; i <= m; i++){
        if(op[i] == 1)
            occ[x[i]]++;
    }

    int big_sz = 0;
    for(int x = 0; x < N; x++){
        if(occ[x] >= K){
            big_id[x] = ++big_sz;
            bigs.push_back(x);
        }
    }

    for(int i = 1; i <= n; i++){
        if(big_id[a[i]])
            Tbig[big_id[a[i]]].vs.push_back(i);
    }

    for(int i = 1; i <= m; i++){
        if(op[i] == 1){
            if(big_id[x[i]])
                Tbig[big_id[x[i]]].vs.push_back(y[i]);
        }
    }

    for(int i = 1; i <= big_sz; i++)
        Tbig[i].init();

    for(int i = 1; i <= n; i++)
        add(i, a[i]);

    for(int i = 1; i <= m; i++){
        if(op[i] == 1){
            int v = x[i], p = y[i];
            del(p);
            add(p, v);
        }else{
            eprintf("here\n");
            if(x[i] == 1){
                printf("%d\n", xs[a[y[i]]]);
            }else{
                int r = x[i] % 2, c = y[i];
                int val = -1;
                int xx = a[c];
                if(big_id[xx]){
                    val = Tbig[big_id[xx]].getless(c);
                }else{
                    for(int j = 0; j < have[xx].size(); j++)
                        if(have[xx][j] == c){
                            val = j + 1;
                            break;
                        }
                }
                assert(val != -1);
                eprintf("val = %d\n", val);
                if(r == 0){
                    printf("%d\n", val);
                }else{
                    int ans = (val < K)? T[val].getless(c) : 0;
                    for(int j = 1; j <= big_sz; j++){
                        ans += (Tbig[j][val] <= c);
                    }
                    printf("%d\n", ans);
                }
            }
        }
    }

    return 0;
}
