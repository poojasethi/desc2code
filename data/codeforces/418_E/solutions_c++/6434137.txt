#include <cstdio>
#include <map>
using namespace std;

int n, m, i, now, len, a[110000], t[110000], x[110000], y[110000], zhan[110000], trash[11000000], sum[11000000], son[11000000][2];

map <int, int> du, root1, root2, used;

void ins(int &k, int l, int r, int x, int y) {
	if (!k) {
		if (trash[0])	k = trash[trash[0]--];
		else	k = ++len;
		sum[k] = 0;
	}
	sum[k] += y;
	if (l < r) {
		if (x <= (l + r) / 2)	ins(son[k][0], l, (l + r) / 2, x, y);
		else	ins(son[k][1], (l + r) / 2 + 1, r, x, y);
	}
	if (!sum[k])	trash[++trash[0]] = k, k = 0;
}

void dfsins(int k, int l, int r, int y) {
	if (!sum[k])	return ;
	if (l == r) {
		now++;
		ins(root2[now], 1, n, l, y);
	}else {
		dfsins(son[k][0], l, (l + r) / 2, y);
		dfsins(son[k][1], (l + r) / 2 + 1, r, y);
	}
}

int query(int k, int q, int h, int l, int r) {
	if (l <= q && h <= r)	return sum[k];
	if (r <= (q + h) / 2)	return query(son[k][0], q, (q + h) / 2, l, r);
	if ((q + h) / 2 < l)	return query(son[k][1], (q + h) / 2 + 1, h, l, r);
	return query(son[k][0], q, (q + h) / 2, l, r) + query(son[k][1], (q + h) / 2 + 1, h, l, r);
}

int calc(int x, int y) {
	int ans = query(root2[y], 1, n, 1, x);
	for (int i = 1; i <= zhan[0]; i++)
		if (query(root1[zhan[i]], 1, n, 1, x) >= y)	ans++;
	return ans;
}

int main() {
	scanf("%d", &n);
	int T = 100;
	for (i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
		du[a[i]]++;
		if (du[a[i]] >= T && !used[a[i]])	used[a[i]] = true, zhan[++zhan[0]] = a[i];
	}
	scanf("%d", &m);
	for (i = 1; i <= m; i++) {
		scanf("%d%d%d", &t[i], &x[i], &y[i]);
		if (t[i] == 1) {
			du[x[i]]++;
			if (du[x[i]] >= T && !used[x[i]])	used[y[i]] = true, zhan[++zhan[0]] = x[i];
		}
	}
	du.clear();
	for (i = 1; i <= n; i++)	ins(root1[a[i]], 1, n, i, 1);
	for (i = 1; i <= n; i++)	if (!du[a[i]] && !used[a[i]])	now = 0, dfsins(root1[a[i]], 1, n, 1), du[a[i]] = true;
	for (i = 1; i <= m; i++) {
		if (t[i] == 1) {
			if (x[i] == a[y[i]])	continue;
			if (!used[a[y[i]]]) {
				now = 0;
				dfsins(root1[a[y[i]]], 1, n, -1);
			}
			if (!used[x[i]]) {
				now = 0;
				dfsins(root1[x[i]], 1, n, -1);
			}
			ins(root1[a[y[i]]], 1, n, y[i], -1);
			ins(root1[x[i]], 1, n, y[i], 1);
			if (!used[a[y[i]]]) {
				now = 0;
				dfsins(root1[a[y[i]]], 1, n, 1);
			}
			if (!used[x[i]]) {
				now = 0;
				dfsins(root1[x[i]], 1, n, 1);
			}
			a[y[i]] = x[i];
		}else {
			if (x[i] == 1)	printf("%d\n", a[y[i]]);
			else	if (x[i] % 2 == 0)	printf("%d\n", query(root1[a[y[i]]], 1, n, 1, y[i]));
			else {
				int t = query(root1[a[y[i]]], 1, n, 1, y[i]);
				printf("%d\n", calc(y[i], t));
			}
		}
	}
}
