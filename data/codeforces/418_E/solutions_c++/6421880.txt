#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define N 100005
#define BSZ 700
#define M 145
using namespace std;

int n, m, TBL;
int arr[N], buf[N];
int BIT[M][N], tot[M];
int Freq[M][N+N];
map<int, int> Dis;


void BITupdate(int d, int x, int v){
	if (x){
		 for (int i=x; i<=n; i+=i&-i) BIT[d][i] += v;
		 tot[d] += v;
	}
}

void update(int p, int v, int d){
	int p1 = p / BSZ, t;
	FOR(i,p1,TBL){
		int t = Freq[i][v];
		BITupdate(i, t, -1);
		Freq[i][v] += d;
		BITupdate(i, t + d, 1);
	}
}

int solve1(int p, int v){
	int p1 = p / BSZ, p2 = p % BSZ, ret = 0;
	if (p1) ret += Freq[p1 - 1][v];
	FOE(i,0,p2) ret += (arr[p - i] == v);
	return ret;
}

int BITcount(int d, int x){
	int ret = tot[d];
	for (int i=x-1; i; i-=i&-i) ret -= BIT[d][i];
	return ret;
}

int solve2(int p, int v){
	int p1 = p / BSZ, p2 = p % BSZ, ret = 0;
	int fr = solve1(p, v);
	if (p1) ret = BITcount(p1 - 1, fr);
	FOE(i,1,p2) buf[i - 1] = arr[p - i];
	sort(buf, buf + p2);
	int cnt = 0;
	FOR(i,0,p2){
		if (i && buf[i] != buf[i - 1]) cnt = 1;
		else ++cnt;
		if (i == p2 - 1 || buf[i] != buf[i + 1]){
			if (p1){
				int t = Freq[p1 - 1][buf[i]];
				if (t < fr && t + cnt >= fr) ++ret;
			}
			else if (cnt >= fr) ++ret;
		}
	}
	return ret + 1;
}

int id = 0;
int Rev[N+N];

int Mapto(int x){
	if (Dis[x] == 0){
		Dis[x] = ++id;
		Rev[id] = x;
	}
	return Dis[x];
}

int main(){
	scanf("%d", &n);
	FOR(i,0,n) scanf("%d", &arr[i]), arr[i] = Mapto(arr[i]);
	scanf("%d", &m);

	TBL = (n + BSZ - 1) / BSZ;
	FOR(i,0,n) update(i, arr[i], 1);

	while (m--){
		int op, x, y;
		scanf("%d%d%d", &op, &x, &y), --y;
		if (op == 1){
			x = Mapto(x);
			update(y, arr[y], -1);
			update(y, x, 1);
			arr[y] = x;
		}
		else{
			if (x == 1) printf("%d\n", Rev[arr[y]]);
			else if ((x & 1) == 0) printf("%d\n", solve1(y, arr[y]));
			else printf("%d\n", solve2(y, arr[y]));
		}
	}
	return 0;
}
