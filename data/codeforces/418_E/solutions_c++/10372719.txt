#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <map>
#include <queue>
#include <vector>
using namespace std;

int total, data[222222], flag[222222], x[222222], y[222222], dif[222222], pos[222222];
int cnt[222][222222], tree[222][300000];
bool can[222222];

int  Rand()
{
     return (rand() << 15) | rand();
}

void Update(int root, int nowleft, int nowright, int askleft, int askright, int add, int flag)
{
int  mid = (nowleft + nowright) >> 1;
     
     if  (nowright < askleft || askright < nowleft)
     {
         return;
     }
     if  (askleft <= nowleft && nowright <= askright)
     {
         tree[flag][root] += add;
         
         return;
     }
     Update(root << 1, nowleft, mid, askleft, askright, add, flag);
     Update((root << 1) | 1, mid + 1, nowright, askleft, askright, add, flag);
     tree[flag][root] = tree[flag][root << 1] + tree[flag][(root << 1) | 1];
          
     return;
}

int  Ask(int root, int nowleft, int nowright, int askleft, int askright, int flag)
{
int  mid = (nowleft + nowright) >> 1;
     
     if  (nowright < askleft || askright < nowleft)
     {
         return 0;
     }
     if  (askleft <= nowleft && nowright <= askright)
     {
         return tree[flag][root];
     }
     
     return Ask(root << 1, nowleft, mid, askleft, askright, flag) +
            Ask((root << 1) | 1, mid + 1, nowright, askleft, askright, flag);
}

int  Half(int ask)
{
int  low, mid, high;
     
     low = 0;
     high = total + 1;
     while (low + 1 < high)
     {
           mid = (low + high) >> 1;
           if  (dif[mid] == ask)
           {
               return mid;
           }
           if  (dif[mid] < ask)
           {
               low = mid;
           }   else
           {
               high = mid;
           }
     }
     
     return low;
}

int  Read()
{
char flag = getchar();
int  result = 0;
     
     for (; flag < '0' || '9' < flag; flag = getchar());
     for (; '0' <= flag && flag <= '9'; flag = getchar())
     {
         result = 10 * result + flag - 48;
     }
     
     return result;
}

int  main()
{
int  n, q, i, j, belong, temp, rest, len, parts, record, answer;
bool need;
     
//     freopen("e.in", "r", stdin);
//     freopen("e.out", "w", stdout);
     
     srand((unsigned) time (0));
     
     need = false;
     n = Read();
     total = 0;
     for (i = 0; i < n; i++)
     {
         data[i] = Read();
         dif[++total] = data[i];
     }
     q = Read();
     for (i = 1; i <= q; i++)
     {
         flag[i] = Read();
         x[i] = Read();
         y[i] = Read() - 1;
         if  (flag[i] == 1)
         {
             dif[++total] = x[i];
         }   else
         {
             need = true;
         }
     }
     
     if  (!need)
     {
         return 0;
     }
     
     sort(dif + 1, dif + total + 1);
     for (i = j = 1; i < total; i++)
     if  (dif[i + 1] != dif[j])
     {
         dif[++j] = dif[i + 1];
     }
     total = j;
     
     for (i = 0; i < n; i++)
     {
         pos[i] = Half(data[i]);
     }
     
     len = (int) (sqrt(n * log2(n)));
     parts = (n - 1) / len;
     cnt[0][pos[0]] = 1;
     Update(1, 1, n, 1, 1, 1, 0);
     for (i = 1; i <= parts; i++)
     {
         for (j = 1; j <= total; j++)
         {
             cnt[i][j] = cnt[i - 1][j];
         }
         cnt[i][pos[i * len]]++;
         for (j = 1; j < len; j++)
         {
             cnt[i][pos[(i - 1) * len + j]]++;
         }
         for (j = 1; j <= total; j++)
         if  (cnt[i][j] > 0)
         {
             Update(1, 1, n, cnt[i][j], cnt[i][j], 1, i);
         }
     }
//     printf("\n\n%d\n\n", clock());
     
     for (i = 1; i <= q; i++)
     if  (flag[i] == 1)
     {
         belong = y[i] / len;
         temp = pos[y[i]];
         if  (y[i] % len == 0)
         {
             Update(1, 1, n, cnt[belong][temp], cnt[belong][temp], -1, belong);
             cnt[belong][temp]--;
             Update(1, 1, n, cnt[belong][temp], cnt[belong][temp], 1, belong);
         }
         for (j = belong + 1; j <= parts; j++)
         {
             Update(1, 1, n, cnt[j][temp], cnt[j][temp], -1, j);
             cnt[j][temp]--;
             Update(1, 1, n, cnt[j][temp], cnt[j][temp], 1, j);
         }
         
         data[y[i]] = x[i];
         pos[y[i]] = Half(data[y[i]]);
         temp = pos[y[i]];
         if  (y[i] % len == 0)
         {
             Update(1, 1, n, cnt[belong][temp], cnt[belong][temp], -1, belong);
             cnt[belong][temp]++;
             Update(1, 1, n, cnt[belong][temp], cnt[belong][temp], 1, belong);
         }
         for (j = belong + 1; j <= parts; j++)
         {
             Update(1, 1, n, cnt[j][temp], cnt[j][temp], -1, j);
             cnt[j][temp]++;
             Update(1, 1, n, cnt[j][temp], cnt[j][temp], 1, j);
         }
     }   else
     if  (x[i] == 1)
     {
         answer = data[y[i]];
         printf("%d\n", answer);
     }   else
     if  (x[i] & 1)
     {
         belong = y[i] / len;
         if  (y[i] % len == 0)
         {
             temp = pos[y[i]];
             answer = Ask(1, 1, n, cnt[belong][temp], n, belong);
             printf("%d\n", answer);
         }   else
         {
             rest = y[i] % len;
             for (j = 1; j <= rest; j++)
             {
                 temp = pos[belong * len + j];
                 cnt[belong][temp]++;
                 can[temp] = false;
             }
             record = cnt[belong][pos[y[i]]];
             for (j = rest; j >= 1; j--)
             {
                 temp = pos[belong * len + j];
                 cnt[belong][temp]--;
             }
             for (j = 1; j <= rest; j++)
             {
                 temp = pos[belong * len + j];
                 if  (cnt[belong][temp] < record)
                 {
                     can[temp] = true;
                 }
             }
             for (j = 1; j <= rest; j++)
             {
                 temp = pos[belong * len + j];
                 cnt[belong][temp]++;
             }
             answer = Ask(1, 1, n, record, n, belong);
             for (j = 1; j <= rest; j++)
             {
                 temp = pos[belong * len + j];
                 if  (can[temp] && cnt[belong][temp] >= record)
                 {
                     can[temp] = false;
                     answer++;
                 }
             }
             printf("%d\n", answer);
             for (j = rest; j >= 1; j--)
             {
                 temp = pos[belong * len + j];
                 cnt[belong][temp]--;
             }
         }
     }   else
     {
         belong = y[i] / len;
         if  (y[i] % len == 0)
         {
             answer = cnt[belong][pos[y[i]]];
             printf("%d\n", answer);
         }   else
         {
             rest = y[i] % len;
             for (j = 1; j <= rest; j++)
             {
                 cnt[belong][pos[belong * len + j]]++;
             }
             answer = cnt[belong][pos[y[i]]];
             printf("%d\n", answer);
             for (j = 1; j <= rest; j++)
             {
                 cnt[belong][pos[belong * len + j]]--;
             }
         }
     }
//     printf("\n\n%d\n\n", clock());
     return 0;
}
