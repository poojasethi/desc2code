#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

map<int,int> cnt[100005];
vector<int> v[100005];
int n,c[100005],index[100005],mx[100005];
long long ans[100005],tmp[100005];

void Merge(int s,int e) {
    if(cnt[index[s]].size()<cnt[index[e]].size())
        swap(index[s],index[e]);
    for(map<int,int>::iterator it=cnt[index[e]].begin();it!=cnt[index[e]].end();++it) {
        cnt[index[s]][it->first]+=it->second;
        if(cnt[index[s]][it->first]>mx[index[s]]) {
            mx[index[s]]=cnt[index[s]][it->first];
            tmp[index[s]]=it->first;
        }
        else if(cnt[index[s]][it->first]==mx[index[s]])
            tmp[index[s]]+=it->first;
    }
}

void dfs(int pre,int u) {
    for(int i=0;i<v[u].size();++i)
        if(v[u][i]!=pre) {
            dfs(u,v[u][i]);
            Merge(u,v[u][i]);
        }
    ans[u]=tmp[index[u]];
}

int main() {
    int s,e,i;
    while(1==scanf("%d",&n)) {
        for(i=1;i<=n;++i) {
            scanf("%d",c+i);
            index[i]=i;
            mx[i]=cnt[i][c[i]]=1;
            tmp[i]=c[i];
        }
        for(i=1;i<n;++i) {
            scanf("%d%d",&s,&e);
            v[s].push_back(e);
            v[e].push_back(s);
        }
        dfs(1,1);
        for(i=1;i<n;++i)
            printf("%I64d ",ans[i]);
        printf("%I64d\n",ans[n]);
    }
    return 0;
}
