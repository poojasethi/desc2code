#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;
#define N 100010
#define pb push_back

int val[N],fa[N],id[N],Max[N];
long long ans[N],sum[N];
vector<int> edge[N];
map<int,int> cnt[N];

void merge(int &x,int &y)
{
    if (cnt[x].size()<cnt[y].size())
        swap(x,y);
    int a,b,c;
    for (map<int,int>::iterator iter=cnt[y].begin();iter!=cnt[y].end();++iter)
    {
        a=iter->first;
        b=iter->second;
        if (cnt[x].find(a)==cnt[x].end()) cnt[x][a]=0;
        c=(cnt[x][a]+=b);
        if (c>Max[x])
        {
            Max[x]=c;
            sum[x]=a;
        }
        else if (c==Max[x])
            sum[x]+=a;
    }
}

void dfs(int i)
{
    id[i]=i;
    cnt[i][val[i]]=1;
    sum[i]=val[i];
    Max[i]=1;
    for (vector<int>::iterator j=edge[i].begin();j!=edge[i].end();++j)
        if (*j!=fa[i])
        {
            fa[*j]=i;
            dfs(*j);
            merge(id[i],id[*j]);
        }
    ans[i]=sum[id[i]];
}

int main()
{
    int n,x,y;
    scanf("%d",&n);
    for (int i=1;i<=n;++i) scanf("%d",val+i);
    for (int i=1;i<n;++i)
    {
        scanf("%d%d",&x,&y);
        edge[x].pb(y);
        edge[y].pb(x);
    }
    dfs(1);
    for (int i=1;i<=n;++i) printf("%I64d%c",ans[i],i==n?'\n':' ');
    return 0;
}
