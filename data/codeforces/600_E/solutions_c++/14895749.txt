# include <bits/stdc++.h>

using namespace std;

typedef long long int ll;
typedef pair<ll,ll> pii;

# define MP make_pair
# define L first 
# define R second

const int maxn = 1e5 + 100;

vector <ll> adj[maxn];

set <pii> s[maxn];

ll c[maxn], ans[maxn], cnt[maxn];

void dfs(int v,int par){
	ans[v] = c[v], cnt[v] = 1;
	s[v].insert(MP(ans[v], cnt[v]));
	for (int i = 0; i < adj[v].size(); i++){
		int u = adj[v][i];
		if(u - par){
			dfs(u, v);
			if(cnt[u] > cnt[v])
				cnt[v] = cnt[u], ans[v] = 0;
			if(cnt[u] == cnt[v])
				ans[v] += ans[u];

			if(s[u].size() > s[v].size())
				swap(s[v], s[u]);

			for (set<pii> :: iterator it = s[u].begin(); it != s[u].end(); it++){
				pii x = *it;
				if(s[v].lower_bound(MP(x.L, 0)) != s[v].end() && (*s[v].lower_bound(MP(x.L, 0))).L == x.L){
					x.R += (*s[v].lower_bound(MP(x.L, 0))).R;
					s[v].erase(s[v].lower_bound(MP(x.L, 0)));
					s[v].insert(x);
					if(x.R > cnt[v])
						cnt[v] = x.R, ans[v] = 0;
					if(x.R == cnt[v])
						ans[v] += x.L;
				}
				else
					s[v].insert(x);
			}
		}
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);

	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> c[i];
	for (int i = 1; i < n; i++){
		int v, u;
		cin >> v >> u;
		v--, u--;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	dfs(0, -1);

	for (int i = 0; i < n; i++)
		cout << ans[i] << " ";
	cout << endl;

	return 0;
}
