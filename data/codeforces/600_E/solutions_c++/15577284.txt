#include<cstdio>
#include<cstring>
#include<algorithm> 
#include<map>
#include<vector>
#define rep(i,a,b) for(int i=(a);i<=(b);i++)
using namespace std;
const int N=1e5+5;
typedef long long ll;
struct node
{
	map<int,int> s;
	int ma; ll res;
}*a[N];

int f[N];
ll ans[N];
vector<int> g[N];
inline void merge(node &x,node &y)
{
	map<int,int>::iterator it=x.s.begin();
	for(;it!=x.s.end();it++)
	{
		pair<int,int> q=*it;
		y.s[q.first]+=q.second;
		int p=y.s[q.first];
		if(p>y.ma)
		{
			y.ma=p;
			y.res=q.first;
		}
		else if(p==y.ma) y.res+=(ll)q.first;
	} 
}
void dfs(int x,int fa)
{
	for(int i=0;i<g[x].size();i++)
	{
		int to=g[x][i];
		if(to==fa) continue;
		dfs(to,x);
		if(a[x]->s.size()<a[to]->s.size()) swap(a[x],a[to]);
		merge(*a[to],*a[x]);
	}
	ans[x]=a[x]->res;
}
int main()
{
	int n; scanf("%d",&n);
	rep(i,1,n)
	{
		scanf("%d",&f[i]);
		a[i]=new node();
		a[i]->s[f[i]]=1;
		a[i]->ma=1; a[i]->res=f[i];
	}
	rep(i,1,n-1)
	{
		int x,y; scanf("%d%d",&x,&y);
		g[x].push_back(y);
		g[y].push_back(x);
	}
	dfs(1,0);
	rep(i,1,n) printf("%I64d ",ans[i]); puts("");
	return 0;
}