#include <bits/stdc++.h>
using namespace std;

const int N = 1E5 + 10;

map<int, int> m[N];
vector<int> G[N];
int n, col[N], id[N];
long long nu[N], ans[N], xd[N];

void Merge(int a, int b) {
  if(m[id[a]].size() < m[id[b]].size()) swap(id[a], id[b]), nu[a] = nu[b], ans[a] = ans[b];
  for(map<int, int>::iterator it = m[id[b]].begin(); it != m[id[b]].end(); it++) {
    m[id[a]][it->first] += it->second;
    if(m[id[a]][it->first] == nu[a]) ans[a] += it->first;
    else if(m[id[a]][it->first] > nu[a]) nu[a] = m[id[a]][it->first], ans[a] = it->first;
  }
}

void dfs(int u, int fa) {
  m[u].clear();
  m[u][col[u]] = 1, ans[u] = col[u], nu[u] = 1;
  for(int i = 0; i < G[u].size(); i++) {
    if(G[u][i] == fa) continue;
    dfs(G[u][i], u);
    Merge(u, G[u][i]);
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin >> n;
  for(int i = 0; i < n; i++) {
    cin >> col[i + 1];
    id[i + 1] = i + 1;
  }
  for(int i = 0; i < n - 1; i++) {
    int a, b;
    cin >> a >> b;
    G[a].push_back(b);
    G[b].push_back(a);
  }
  dfs(1, -1);
  for(int i = 1; i <= n; i++) {
    cout << ans[i] << endl;
  }
  return 0;
}