#include<bits/stdc++.h>
using namespace std;
int const lim = 100000;
long long col[lim+3],p[lim+3],sz[lim+3];
vector<int>adj[lim+4],tree;
map<int,int> coun[lim+4];
long long mx[lim+4],sum[lim+4],ans[lim+4];
int findp(int i )
{
    if(p[i]==i)return i;
    return p[i]=findp(p[i]);
}
void merg(int u,int v)
{
    int pv = findp(v),pu=findp(u);
    if(sz[pu]>sz[pv])swap(pv,pu);
    for(map<int,int>::iterator it=coun[pu].begin();it!=coun[pu].end();it++)
    {
        int ind = it->first,val = it->second;
        coun[pv][ind]+=val;
        if(coun[pv][ind]>mx[pv])
            mx[pv]= coun[pv][ind],sum[pv] = ind;
        else if(coun[pv][ind]==mx[pv])
            sum[pv] += ind;
    }
    p[pu] = pv;
    sz[pv]+=sz[pu];
}
void dfs(int v ,int p=-1)
{
    for(int i = 0;i<adj[v].size();i++)
        if(adj[v][i]!=p)dfs(adj[v][i],v);
    ans[v] = sum[findp(v)];
    if(p!=-1)merg(findp(v),findp(p));
}
int main()
{
    int n,u,v;cin >> n;
    for(int i =0;i<n;i++)
        cin >> col[i],sz[i] = 1,coun[i][col[i]]++,sum[i]=col[i],mx[i]= 1,p[i]=i;
    for(int i = 0;i<n-1;i++)
        cin >> u>>v,u--,v--,adj[u].push_back(v),adj[v].push_back(u);
    dfs(0);
    for(int i = 0;i<n;i++)
        cout << ans[i]<<" ";
}
