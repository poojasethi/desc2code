#include <iostream>
#include <cstdio>
#include <cstring>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;
const int N = 100005;
typedef map<int, long long> mapLL;
typedef map<int, int> mapI; 

int n, col[N];
long long ans[N];
vector<int> adj[N];
mapLL sum[N];
mapI cnt[N];

void dfs(int u, int p = -1) {
	mapLL& usum = sum[u];
	mapI& ucnt = cnt[u];

	// add children colors
	for (int i = 0; i < adj[u].size(); ++i) {
		int v = adj[u][i];
		if (v != p) {
			dfs(v, u);
			mapLL& vsum = sum[v];
			mapI& vcnt = cnt[v];
			if (ucnt.size() < vcnt.size()) {
				// iterate through the small map only
				// pruning the large map: HLD makes it O(n log n)
				usum.swap(vsum);
				ucnt.swap(vcnt);
			}
			for (mapI::iterator it = vcnt.begin(); it != vcnt.end(); ++it) {
				int color = it->first;
				int vfreq = it->second;
				int& ufreq = ucnt[it->first];
				usum[ufreq] -= color;
				usum[ufreq += vfreq] += color;
			}
		}
	}

	// finally add this color
	int& ufreq = ucnt[col[u]];
	usum[ufreq] -= col[u];
	usum[++ufreq] += col[u];
	ans[u] = usum.rbegin()->second;
}

int main() {
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i)
		scanf("%d", &col[i]);
	for (int i = 1; i < n; ++i) {
		int a, b; scanf("%d%d", &a, &b);
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	dfs(1);
	for (int i = 1; i <= n; ++i)
		printf("%I64d%s", ans[i], i == n ? "\n" : " ");
}