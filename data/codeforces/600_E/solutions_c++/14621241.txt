#include<map>
#include<cmath>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
#include<algorithm>

#ifdef WIN32
#define orz "%I64d"
#else
#define orz "%lld"
#endif
#define N 100010

using namespace std;
typedef long long LL;
map<int,int>mp[N];
int n,a[N],c[N],head[N],tot,mx[N],w[N];
LL cnt[N],ans[N];
struct Edge{
	int u,v,next;
	Edge() {}
	Edge(int _u,int _v,int _nt):u(_u),v(_v),next(_nt) {};
}edge[N*2];
void link(int xx,int yy)
{
	edge[++tot]=Edge(xx,yy,head[xx]);
	head[xx]=tot;
}
void merge(int x,int y)
{
	if (mp[w[x]].size()>mp[w[y]].size()) swap(w[x],w[y]);
	int k=w[x];
	for (map<int,int>::iterator it=mp[k].begin();it!=mp[k].end();it++)
	{
		int col=(*it).first,num=(*it).second;
		mp[w[y]][col]+=num;
		if (mp[w[y]][col]>mx[w[y]])
		{
			mx[w[y]]=mp[w[y]][col];
			cnt[w[y]]=col;
		}
		else
			if (mp[w[y]][col]==mx[w[y]])
				cnt[w[y]]+=col;
	}
}
void DFS(int x,int ft)
{
	for (int i=head[x];i!=0;i=edge[i].next)
	{
		int nt=edge[i].v;
		if (nt==ft) continue;
		DFS(nt,x);
		merge(nt,x);
	}
	ans[x]=cnt[w[x]];
}
int main()
{
	scanf("%d",&n);
	for (int i=1;i<=n;i++) scanf("%d",&c[i]);
	for (int i=1;i<n;i++)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		link(x,y),link(y,x);
	}
	for (int i=1;i<=n;i++)
		w[i]=i,mx[i]=1,cnt[i]=c[i],mp[i][c[i]]=1;
	DFS(1,-1);
	for (int i=1;i<=n;i++)
		printf(orz" ",ans[i]);
	return 0;
}
