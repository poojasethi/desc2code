#include <map>
#include <vector>
#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;

const int maxn = 100005;

typedef long long ll;
typedef pair<int, int> pii;

int n;
int c[maxn];
vector<int> e[maxn];

int cnt;
ll sum[maxn];
int pos[maxn];
int most[maxn];
map<int, int> s[maxn];

ll sol[maxn];

void merge(int x, int y) {
	if ((int)s[pos[x]].size() > (int)s[pos[y]].size())
		swap(x, y);
	int px = pos[x], py = pos[y];
	for (map<int, int>::iterator it = s[px].begin(); it != s[px].end(); it++) {
		s[py][it -> first] += it -> second;
		int curr = s[py][it -> first];
		if (curr > most[py]) {
			most[py] = curr;
			sum[py] = it -> first;
		}
		else
			if (curr == most[py])
				sum[py] += it -> first;
	}
	pos[x] = py;
}

void dfs(int x, int p) {
	pos[x] = cnt;
	most[cnt] = 1;
	sum[cnt] = c[x];
	s[cnt][c[x]] = 1;
	cnt++;
	for (int i = 0; i < e[x].size(); i++) {
		int y = e[x][i];
		if (y != p) {
			dfs(y, x);
			merge(x, y);
		}
	}
	sol[x] = sum[pos[x]];
}

int main (void) {
	scanf("%d", &n);
	for (int i = 1; i <= n; i++)
		scanf("%d", &c[i]);
	for (int i = 0; i < n - 1; i++) {
		int x, y;
		scanf("%d%d", &x, &y);
		e[x].push_back(y);
		e[y].push_back(x);
	}
	dfs(1, 0);
	for (int i = 1; i <= n; i++)
		printf("%lld ", sol[i]);
	printf("\n");
	return 0;
}