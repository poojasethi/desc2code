#include<iostream>
#include<map>
#include<algorithm>
#include<list>
#include<vector>
using namespace std;
vector<map<int,int> >temp1;
vector<pair<int,long long int> >temp2;
void dfs(int i,bool *visited,list<int>*adj,int *temp,long long int *ans)
{
visited[i]=true;
list<int>::iterator j;
for(j=adj[i].begin();j!=adj[i].end();j++)
if(!visited[*j])
{
dfs(*j,visited,adj,temp,ans);
if(temp1[temp[i]].size()<temp1[temp[*j]].size())
swap(temp[i],temp[*j]);
map<int,int>::iterator it;
for(it=temp1[temp[*j]].begin();it!=temp1[temp[*j]].end();it++)
{
temp1[temp[i]][it->first]+=it->second;
if(temp2[temp[i]].first==temp1[temp[i]][it->first])
temp2[temp[i]].second+=it->first;
else if(temp1[temp[i]][it->first]>temp2[temp[i]].first)
temp2[temp[i]]={temp1[temp[i]][it->first],it->first};
}
}
ans[i]=temp2[temp[i]].second;
}


void func(int *c,int n,list<int>*adj)
{
bool visited[n+2];
temp1.resize(n);
temp2.resize(n);
long long int ans[n+2];
int temp[n+2];
for(int i=0;i<n;i++)
{
temp1[i][c[i]]=1;
temp2[i]={1,c[i]};
temp[i]=i;
}
fill(visited,visited+n+2,false);
dfs(0,visited,adj,temp,ans);
for(int i=0;i<n;i++)
cout<<ans[i]<<" ";
cout<<endl;
}

int main()
{
ios_base::sync_with_stdio(false);
int n;
cin>>n;
int c[n];
list<int>adj[n];
for(int i=0;i<n;i++)
cin>>c[i];
for(int i=1;i<n;i++)
{
int u,v;
cin>>u>>v;
u--;v--;
adj[u].push_back(v);
adj[v].push_back(u);
}
func(c,n,adj);
return 0;
}
