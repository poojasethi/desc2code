#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#define rep(i,a,b) for(int i=(a);i<=(b);i++)
using namespace std;
const int N=100005,Z=300;
typedef long long ll;
struct query
{
	int l;
	int r;
	int id;
}a[N];
inline bool cmp(const query &x,const query &y)
{
	if(x.l/Z==y.l/Z) return x.r<y.r;
	else return x.l<y.l;
}
ll ans[N],cnt2[N];
int cnt[N],pos[N],cnt3[N],ma;
//multiset<int> s;
ll res;
vector<int> g[N];
int id[N],od[N],cp;
int f[N],fp[N];
void dfs(int x,int fa)
{
	id[x]=++cp; f[cp]=fp[x];
	for(int i=0;i<g[x].size();i++)
	{
		int to=g[x][i];
		if(to==fa) continue;
		dfs(to,x);
	}
	od[x]=cp;	
}
inline void update(int x,int y)
{
	cnt2[cnt[x]]-=x; if(cnt[x]==ma && !cnt2[cnt[x]]) while(ma>=0 && !cnt2[ma]) ma--;
	cnt[x]+=y;
	cnt2[cnt[x]]+=x; if(cnt[x]>ma) ma=cnt[x];
}
int main()
{
	int n; scanf("%d",&n);
	rep(i,1,n) scanf("%d",&fp[i]);
	rep(i,1,n-1)
	{
		int x,y; scanf("%d%d",&x,&y);
		g[x].push_back(y);
		g[y].push_back(x);
	}
	dfs(1,0);
	rep(i,1,n)
	{
		a[i].l=id[i],a[i].r=od[i];
		a[i].id=i;
	}
	rep(i,1,n) pos[i]=i/Z;
	sort(a+1,a+1+n,cmp);
	int tx=1,ty=0;
	rep(i,1,n)
	{
		int x=a[i].l,y=a[i].r;
		while(ty<y)
		{
			update(f[ty+1],1);
			++ty;
		}
		while(ty>y)
		{
			update(f[ty],-1);
			--ty;
		}
		while(tx<x)
		{
			update(f[tx],-1);
			++tx;
		}
		while(tx>x)
		{
			update(f[tx-1],1);
			--tx;
		}
		ans[a[i].id]=cnt2[ma]; 
	}
	rep(i,1,n) printf("%I64d ",ans[i]); puts("");
	return 0;
}
