#include <bits/stdc++.h>
#define xx first
#define yy second

using namespace std;

typedef long long ll;
const ll maxn = 100008;

vector<ll> g[maxn];
map<ll, ll> mp[maxn];
int c[maxn];
ll has[maxn], cou[maxn];
ll res[maxn], sum[maxn];

void merge(ll cc, ll y){
	if(mp[has[cc]].size() < mp[has[y]].size()){
		swap(has[cc], has[y]);
	}
	ll x = has[cc]; y = has[y];
	for(map<ll, ll>::iterator it = mp[y].begin(); it != mp[y].end(); it++){
		mp[x][it->xx] += it->yy;
		if(mp[x][it->xx] > cou[x]){
			cou[x] = mp[x][it->xx];
			sum[x] = it->xx;
		}
		else if(mp[x][it->xx] == cou[x]){
			sum[x] += it->xx;
		}
	}
	res[cc] = sum[x];
}

void dfs(ll x, ll pre){
	for(unsigned int i = 0; i < g[x].size(); i++){
		if(g[x][i] == pre) continue;
		dfs(g[x][i], x);
		merge(x, g[x][i]);
	}
	res[x] = sum[has[x]];
}

int main(){
	int n, x, y;

	scanf("%d", &n);
	for(ll i = 1; i <= n; i++){
		scanf("%d", c + i);
		has[i] = i;
		mp[i][c[i]] = 1;
		cou[i] = 1;
		sum[i] = c[i];
	}
	for(ll i = 1; i < n; i++){
		scanf("%d%d", &x, &y);
		g[x].push_back(y);
		g[y].push_back(x);
	}
	dfs(1, -1);
	for(ll i = 1; i <= n; i++){
		printf("%I64d", res[i]);
		if(i == n) printf("\n");
		else printf(" ");
	}

	return 0;
}
