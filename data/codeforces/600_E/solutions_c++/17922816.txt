#include <bits/stdc++.h>
using namespace std;

#define rep(i,a,n) for(int (i)=(a);(i)<(int)(n);(i)++)
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)
#define SZ(x) ((int) (x).size())
#define ll long long

const int N = 100000 + 5;
int cnt[N],col[N],sz[N];
ll sum[N],tot;
bool big[N];
vector<int> g[N];
int n,Max;
void getsz(int v, int p){
	sz[v] = 1;
	foreach(u,g[v]) if(*u != p){
			getsz(*u, v);
			sz[v] += sz[*u];
		}
}
void add(int v, int p, int x){
	cnt[col[v]]+=x;
	if(Max<cnt[col[v]]) Max=cnt[col[v]], tot=col[v];
	else if(Max==cnt[col[v]]) tot+=col[v];
	foreach(u,g[v]) if(*u != p && !big[*u]) add(*u, v, x);
}
void rem(int v, int p, int x) {
	cnt[col[v]]-=x;
	foreach(u,g[v]) if(*u != p && !big[*u]) rem(*u, v, x);
}
void dfs(int v, int p, bool keep){
	int mx = -1, son = -1;
	foreach(u,g[v]) if(*u != p && sz[*u] > mx) mx = sz[*u], son = *u;
	foreach(u,g[v]) if(*u != p && *u != son) dfs(*u, v, 0);
	if(son != -1) dfs(son, v, 1), big[son] = 1;
	add(v, p, 1);
	sum[v]=tot;
	if(son != -1) big[son] = 0;
	if(keep == 0) rem(v, p, 1), Max=tot=0;
}
int main(){
	//freopen("E.in","r",stdin);
	scanf("%d", &n);
	rep(i,0,n) cin>>col[i];
	rep(i,0,n-1) {
		int a,b;
		cin >> a >> b;
		--a, --b;
		g[a].push_back(b);	
		g[b].push_back(a);	
	}
	getsz(0,-1);
	dfs(0,-1,1);
	rep(i,0,n) printf("%lld ",sum[i]);
	printf("\n");
	return 0;
}
 	  	 	  	 		  	 	  	 			 			 	