#include <cstdio>
#include <iostream>
#include <vector>
#include <map>

using namespace std;

const int MAXN = 100100;

struct color {
	map < int, int > mp;
	int mx;
	long long sum;

	color ( int mx_ = 0, long long sum_ = 0 ) {
		mx = mx_;
		sum = sum_;
	}

};

int n;
int a[MAXN];
long long ans[MAXN];
color *it[MAXN];
vector < int > v[MAXN];

void read() {
	scanf ( "%d", &n );

	for ( int i = 1; i <= n; ++ i ) {
		scanf ( "%d", &a[i] );
	}

	int x, y;
	for ( int i = 0; i < n - 1; ++ i ) {
		scanf ( "%d %d", &x, &y );
		v[x].push_back ( y );
		v[y].push_back ( x );
	}

}

void update ( color &a, color &b ) {
	for ( map < int, int > ::iterator it = b.mp.begin(); it != b.mp.end(); ++ it ) {
		int cnt = ( a.mp[it->first] += it->second );

		if ( cnt > a.mx ) {
			a.mx = cnt;
			a.sum = ( long long ) it->first;
		}
		else if ( cnt == a.mx ) {
			a.sum += ( long long ) it->first;
		}
	}

}

void dfs ( int i, int prv ) {
	it[i] = new color ( 1, ( long long ) a[i] );
	it[i]->mp[ a[i] ] ++;

	for ( int j = 0; j < ( int ) v[i].size(); ++ j ) {
		if ( v[i][j] != prv ) {
			dfs ( v[i][j], i );

			if ( ( int ) it[i]->mp.size() < ( int ) it[ v[i][j] ]->mp.size() ) swap ( it[i], it[ v[i][j] ] );
			update ( *it[i], *it[ v[i][j] ] );
		}
	}

	ans[i] = it[i]->sum;

}

void solve() {
	dfs ( 1, -1 );

	for ( int i = 1; i <= n; ++ i ) {
		printf ( "%I64d ", ans[i] );
	}

	printf ( "\n" );

}

int main() {
	read();
	solve();

	return 0;

}