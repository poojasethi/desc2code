//Pranet Verma
#include <bits/stdc++.h>
using namespace std;
vector<int> g[100001];
long long ans[100001];
int pa[100001],col[100001],mfreq[100001];
long long value[100001];
map<int,int> M[100001];
int fs(int u)
{
	return pa[u]=(pa[u]==u?u:fs(pa[u]));
}
void merge(int u,int v)
{
	u=fs(u);
	v=fs(v);
	if(M[u].size()<M[v].size())
		swap(u,v);
	pa[v]=u;
	for(map<int,int>::iterator i=M[v].begin();i!=M[v].end();++i)
	{
		M[u][i->first]+=i->second;
		if(M[u][i->first] > mfreq[u])
		{
			mfreq[u]=M[u][i->first];
			value[u]=0;
		}
		if(M[u][i->first]==mfreq[u])
			value[u]+=i->first;
	}
	M[v].clear();
}	
void dfs(int u,int p)
{
	for(int i=0;i<g[u].size();++i)
	{
		int v=g[u][i];
		if(v==p)
			continue;
		dfs(v,u);
		merge(u,v);
	}
	ans[u]=value[fs(u)];
}
int main()
{
	int n;
	scanf("%d",&n);
	for(int i=1;i<=n;++i)
		scanf("%d",&col[i]),
		pa[i]=i,M[i][col[i]]=1,
		value[i]=col[i],mfreq[i]=1;
	for(int i=2;i<=n;++i)
	{
		int u,v;
		scanf("%d%d",&u,&v);
		g[u].push_back(v);
		g[v].push_back(u);
	}
	dfs(1,0);
	for(int i=1;i<=n;++i)
		printf("%lld ",ans[i]);
}