#include <cstdio>
#include <cstdlib>
#include <algorithm>
using namespace std;
const int P=1000000007,MaxN=1011,MaxK=1000011;
long long fac[MaxK],inv[MaxK];
long long dp[MaxN][MaxN];

long long pow(long long a,long long p){
	if (p == 0) return 1;
	if (p == 1) return a;
	long long r = pow(a,p>>1);
	if (p&1) return (((r * r) % P) * a) % P;
	return r * r % P;
}
long long C(long long n, long long m){
	return ((fac[n] * inv[n-m]) % P) * inv[m] % P;
}
int main() {
	// freopen("D.in","r",stdin);
	fac[0] = 1, dp[0][0] = 1;
	for(int i = 1; i <= MaxK; i++) 
		fac[i] = fac[i-1] * i % P;
	
	inv[MaxK] = pow(fac[MaxK], P - 2);

	for(int i = MaxK; i > 0; i--) 
		inv[i-1] = inv[i] * i % P;
	
	for(int i = 1; i < MaxN; i++)
		for(int j = 1; j <= i; j++)
			dp[i][j] = (((dp[i-1][j] + dp[i-1][j-1]) % P) * j) % P;

	int n,m,k;
	scanf("%d%d%d",&n,&m,&k);
	int ans = 0, l = 1,r = min(n,k);;
	if(m == 1) {
		for(int i = l; i <= r; i++)
			ans = (ans + (dp[n][i] * C(k,i)) % P) % P;
	} else {
		if (m == 2) l = 0;
		for(int i = l; i <= r; i++) {
			for(int j = 0; j * 2 + i <= k && j + i <= n;j++) {
				long long t = dp[n][i+j] * dp[n][i+j] % P;
				t *= C(k,i), t %= P;
				t *= C(k-i,j), t %= P;
				t *= C(k-i-j,j), t %= P;
				t=t*pow(i,n*(m-2))%P;
				ans=(ans+t)%P;
			}
		}
	}
	printf("%d\n",ans);
	return 0;
}