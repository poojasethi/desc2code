//In the name of God
#include <iostream>
using namespace std;

typedef long long ll;
const ll mod = 1e9 + 7, N = 2e6 + 2;

int n, m, k;
ll ans, fact[N] = {1}, dfact[N] = {1}, dp[N];

ll pow(ll a, ll b) {
	if (!b)
		return 1;
	if (b % 2)
		return pow(a * a % mod, b / 2) * a % mod;
	return pow(a * a % mod, b / 2);
}
ll sqr(ll x) {
	return x * x % mod;
}
ll C(int n, int k) {
	return fact[n] * dfact[k] % mod * dfact[n - k] % mod;
}
ll func(int x) {
	ll res = 0;
	for (int i = 0; i <= x; i++)
		res = (res + pow(-1, i % 2) * C(x, i) * pow(x - i, n) % mod + mod) % mod;
	return res;
}

int main() {
	for (int i = 1; i < N; i++) {
		fact[i] = fact[i - 1] * i % mod;
		dfact[i] = pow(fact[i], mod - 2);
	}
	cin >> n >> m >> k;
	for (int i = 0; i <= n; i++)
		dp[i] = func(i);
	if (m == 1)
		cout << pow(k, n) << '\n';
	else if (m == 2) {
		for (int i = 1; i <= min(k, n); i++) {
			ll t = dp[i];
			ans = (sqr(C(k, i) * t % mod) * pow(i, (m - 2) * n) + ans) % mod;
		}
		cout << ans << '\n';
	}
	else {
		for (int i = 1; i <= k; i++) {
			ll t = C(k, i) * pow(i, n * (m - 2)) % mod;
			for (int j = 0; i + 2 * j <= k && i + j <= n; j++)
				ans = (ans + t * C(k - i, j) % mod * C(k - i - j, j) % mod * sqr(dp[i + j])) % mod;
		}
		cout << ans << '\n';
	}
	return 0;
}
