#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
typedef long long LL;
using namespace std;
const LL mod=1000000007;
LL fac[1000005]={1},rev[1000005]={1};
LL dp[1005];
LL pow_mod(LL a,LL i,LL n)
{
    if(i==0)return 1%n;
    LL temp=pow_mod(a,i>>1,n);
    temp=temp*temp%n;
    if(i&1)temp=temp*a%n;
    return temp;
}
void init()
{
    for(int i=1;i<=1000000;i++)
    fac[i]=fac[i-1]*i%mod,rev[i]=pow_mod(fac[i],mod-2,mod);
}
LL C(int n,int m)
{
    return (fac[n]*rev[m]%mod)*rev[n-m]%mod;
}

int main()
{
    init();
    int n,m,k;
    scanf("%d%d%d",&n,&m,&k);
    if(m==1)
    {
        printf("%I64d\n",pow_mod(k,n,mod));
        return 0;
    }

    for(int i=1;i<=n && i<=k;i++)
    {
        dp[i]=pow_mod(i,n,mod);
        for(int j=1;j<i;j++)
        {
            dp[i]=(dp[i]-C(i,j)*dp[j]%mod)+mod;
            dp[i]%=mod;
        }
    }

    LL ans=0;
    if(m==2)
    {
        for(int i=1;i<=n && i<=k;i++)
        {
            ans=(ans+(((dp[i]*dp[i]%mod)*C(k,i)%mod)*C(k,i))%mod)%mod;
        }
        printf("%I64d\n",ans);
    }
    else
    {
        for(int i=1;i<=n && i<=k;i++)
        {
            for(int j=0;2*j+i<=k && i+j<=n;j++)
            {
                LL tmp=dp[i+j]*dp[i+j]%mod;
                tmp=((tmp*C(k,i)%mod)*C(k-i,j)%mod)*C(k-i-j,j)%mod;
                tmp=(tmp*pow_mod(i,n*(m-2),mod))%mod;
                ans=(ans+tmp)%mod;
            }
        }
        printf("%I64d\n",ans);
    }
    return 0;
}

     					 	  			  		   	 	