#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <cstring>
#define Mod (1000000007LL)
using namespace std;
int n,m,k;
long long ans;
long long v[1100][1100];
long long f[1000100];
long long Power(long long x ,long long k)
{
    long long tmp=1;
    while(k)
    {
        if(k&1) tmp=tmp*x%Mod;
        x=x*x%Mod;
        k>>=1;
    }
    return tmp;
}
long long inv(long long x)
{
    return Power(x,Mod-2LL);
}
long long C(int i,int j)
{
    long long tmp=1;
    tmp=f[i]*inv(f[j])%Mod*inv(f[i-j]);
    return tmp%Mod;
}
long long work(int x)
{
    //printf("%d %d %lld\n",n,x,v[n][x]);
    return v[n][x]*v[n][x]%Mod;
}
void pre_v()
{
    memset(v,0,sizeof(v));
    v[1][1]=1;
    for(int i=1;i<=1000;i++)
    for(int j=1;j<=i;j++)
    {
        v[i+1][j+1]+=v[i][j]*(j+1);
        v[i+1][j+1]%=Mod;
        v[i+1][j]+=v[i][j]*j;
        v[i+1][j]%=Mod;
    }
}
int main()
{
    f[0]=1;
    for(int i=1;i<=1000000;i++)
    f[i]=f[i-1]*i%Mod;

    pre_v();
    while(~scanf("%d%d%d",&n,&m,&k))
    {
        ans=0;
        if(m==1)
        {
            ans=Power(k,n);
        }
        else
        {
            int t=n*(m-2);
            long long tmp;
            for(int i=1;i<=n;i++)
            for(int j=0;j+i<=k&&j<=i;j++)
            {
                tmp=C(k,j)*C(k-j,j)%Mod*C(k-2*j,i-j)%Mod;
                ans+=tmp*Power(i-j,t)%Mod*work(i)%Mod;
                ans%=Mod;
            }
        }
        printf("%I64d\n",ans);
    }
    return 0;
}

 		 			 	 	   						  		