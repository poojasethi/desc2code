//By Lin
#include<cstdio>
#include<cstring>
#include<algorithm>
#define maxn 1005
#define maxK 1000050
#define MOD 1000000007
using namespace std;
typedef long long LL;

int     n,m,K;
LL      dp[maxn];

LL      quick_sqr(LL g , int K ){
    LL  ret = 1; 
    while ( K ) {
        if ( K&1 ) ret = ret*g%MOD;
        g = g*g%MOD;
        K>>= 1; 
    }
    return ret;
}

LL      sum[maxK],psum[maxK];
inline  LL  C(int a ,int b) {
    return sum[a]*psum[b]%MOD*psum[a-b]%MOD;
}
int     main(){
    sum[0] = psum[0] = 1;
    for (int i = 1; i<maxK; i++) {
        sum[i] = sum[i-1]*i%MOD;
        psum[i] = quick_sqr( sum[i],MOD-2);
    }
    scanf("%d%d%d", &n,&m, &K );
    for (int i = 1; i<=n; i++) {
        dp[i] = quick_sqr(i,n);
        for (int k = 1; k<i; k++) {
            dp[i] += MOD-C(i,k)*dp[k]%MOD;
            dp[i] %= MOD;
        }
    }
    LL  A = 1, ans = 0; 
    if ( m == 1 ){
        printf("%I64d\n", quick_sqr(K,n) );
        return 0;
    }
    if ( m == 2 ){
        for (int j = 1,i = 0; i+j*2<=K && i+j<=n; j++){
            ans += dp[i+j]*dp[i+j]%MOD*C(K,i)%MOD*C(K-i,j)%MOD*C(K-i-j,j)%MOD*quick_sqr(i,n*(m-2))%MOD;
            if ( ans >= MOD ) ans -= MOD;
        }
    }
//  printf("%lld\n" ,ans );
    for (int i = 1; i<=min(n,K); i++ )
        for (int j = 0; i+j*2<=K && i+j<=n ; j++){
            ans += dp[i+j]*dp[i+j]%MOD*C(K,i)%MOD*C(K-i,j)%MOD*C(K-i-j,j)%MOD*quick_sqr(i,n*(m-2))%MOD;
            if ( ans >= MOD ) ans -= MOD;
        }
//  if ( m == 2 ) ans += 2;
    printf("%I64d\n" , ans );

}
