#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const long long mod = 1000000007;
long long pow(long long a,long long b)
{
	long long ans = 1;
	while(b) {
		if(b & 1) ans = ans * a % mod;
		a = a * a % mod;
		b /= 2;
	}
	return ans;
}

long long fac[1000010],inv[1000010];

long long cal(long long n,long long m)
{
	if(n < m) return 0;
	long long ans = fac[n] * inv[m] % mod * inv[n - m] % mod;
	return ans;
}

long long dp[1010];
int main()
{	
	fac[0] = inv[0] = 1;
	for(int i = 1; i < 1000010; i ++) {
		fac[i] = fac[i - 1] * i % mod;
		inv[i] = inv[i - 1] * pow(i,mod - 2) % mod;
	}
	long long n,m,k;
	cin >> n >> m >> k;
	memset(dp,0,sizeof(dp));
	dp[1] = 1;
	for(int i = 2; i <= min(n,k); i ++) {
		dp[i] = 1;
		for(int j = 1; j <= n; j ++) dp[i] = dp[i] * i % mod;
		for(int j = 1; j < i; j ++)
			dp[i] = (dp[i] - dp[j] * cal(i,j)) % mod;
		if(dp[i] < 0) dp[i] += mod;
	}
	if(m == 1) {
		long long ans = 0;
		for(int i = 1; i <= min(n,k); i ++) {
			ans = (ans + cal(k,i) * dp[i]) % mod;
		}
		cout << ans << endl;
		return 0;
	}
///	cout << dp[1] << " " << dp[2] << " " << dp[3] << endl;
	long long ans = 0;
	for(int i = 0; i <= min(n,k); i ++) // same color 
		for(int j = 0; i + 2 * j <= k && i + j <= n; j ++)
			ans = (ans + cal(k,i + 2 * j) * cal(2 * j + i,i) % mod * cal(2 * j,j) % mod * dp[i + j] % mod * dp[i + j] % mod * pow(i,(m - 2) * n)) % mod;
	cout << ans << endl;	
	return 0;
}
   					 	 	 	 	  	