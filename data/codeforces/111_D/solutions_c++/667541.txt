#include <iostream>
#include <cstring>

using namespace std;

#define CLEAR(a) memset(a,0,sizeof a)

const int MOD = 1000000007;
int n,m,k; 
long long s[1001][1001];
long long f[1001];
long long p[1001];
long long inv[1001];

long long power(long long x, int e){
  if(e==0) return 1;
  if(e%2)
    return x*power(x,e-1)%MOD;
  else{
    long long r=power(x,e/2);
    return r*r % MOD;
  }
}

bool done[1001][1001];
long long memo[1001][1001];
long long ch(int i, int j){
  if(not done[k-i][j]){
    long long res = 1;
    for(int u = 0; u <=1000; u++){
      memo[k-i][u] = res;
      done[k-i][u] = true;
      res = res*(i-u)%MOD*inv[u+1]%MOD;
    }
  }
  return memo[k-i][j];
}

void init(){
  CLEAR(s);
  s[0][0] = 1;
  for(int i = 1; i <= n; i++)
    for(int j = 1; j <= i; j++)
      s[i][j] = (s[i-1][j-1] + j*s[i-1][j])%MOD;
  f[0]=1;
  for(int i = 1; i <= n; i++)
    f[i] = i*f[i-1]%MOD;
  for(int i = 0; i <= n; i++)
    p[i] = power(i,n*(m-2));
  inv[1]=1;
  for(int i = 2; i <= 1000; i++)
    inv[i] = (MOD-MOD/i)*inv[MOD%i]%MOD;
  CLEAR(done);
}

int main(int argc, char* argv[]) {
  cin >> n >> m >> k ;
  if(m==1){
    cout << power(k,n) << endl;
    return 0;
  }
  init();
  long long res=0;
  for(int c = 1; c <= n ; c++){
    for(int b = 0; b <= c ; b++) if(2*c-b<=k){
      long long center = p[b];
      long long side = s[n][c]*f[c]%MOD;
      long long num = ch(k,b)*ch(k-b,c-b)%MOD*ch(k-c,c-b)%MOD;
      res += side*center%MOD*side%MOD*num%MOD;
      res %= MOD;
    }
  }
  cout << res << endl;
  return 0;
}
