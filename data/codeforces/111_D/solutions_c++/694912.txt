#include <stdio.h>
#include <string.h>

typedef long long LL;

#define MAXN 1010
#define MAXK 1000010
#define MOD 1000000007

int fact[MAXK];
int inv[MAXK];
int s[MAXN];

int pow(int x, int times) {
	if(x == 0) return 0;
	int res = 1;
	while(times) {
		if(times & 1) res = (LL)res * x % MOD;
		x = (LL)x * x % MOD;
		times >>= 1;
	}
	return res;
}

int comb(int n, int m) {
	if(n < m) return 0;
	return (LL)fact[n] * inv[m] % MOD * inv[n - m] % MOD;
}

int main() {
	fact[0] = inv[0] = fact[1] = inv[1] = 1;
	for(int i = 2; i <= 1000000; ++i) {
		fact[i] = (LL)fact[i - 1] * i % MOD;
		inv[i] = (LL)inv[i - 1] * pow(i, MOD - 2) % MOD;
	}

	int n, m, k;
	scanf("%d%d%d", &n, &m, &k);
	int res = 0;
	if(m == 1) {
		res = pow(k, n);
	}
	else {
		for(int i = 1; i <= n; ++i) {
			s[i] = 0;
			for(int j = 0; j <= i; ++j) {
				if(j % 2 == 0) s[i] = (s[i] + (LL)comb(i, j) * pow(i - j, n)) % MOD;
				else s[i] = ((s[i] - (LL)comb(i, j) * pow(i - j, n)) % MOD + MOD) % MOD;
			}
//			printf("S[%d] = %d\n", i, s[i]);
		}
		for(int a = 0; a <= n; ++a)
			for(int b = 0; b + a <= n; ++b) {
				int t1 = (LL)comb(k, a) * comb(k - a, a) % MOD * comb(k - 2 * a, b) % MOD;
				int t2 = s[a + b];
				int t3;
				if(m == 2) t3 = 1;
				else t3 = pow(b, (m - 2) * n);
				int t = (LL)t1 * t2 % MOD * t2 % MOD * t3 % MOD;
				res = (res + t) % MOD;
			}
	}
	printf("%d\n", res);
	return 0;
}
