#include <stdio.h>
#include <vector>
#include <string.h>
#include <queue>
#include <iostream>
#define mp make_pair

using namespace std;
#define d9 1000000000LL

int uf[100000];
long long l[100000];

int f(int x) {
	if (uf[x] < 0)	return x;
	return uf[x] = f(uf[x]);
}

void u(int x, int y, long long w) {
	x = f(x); y = f(y);
	if (x != y)	{
		uf[x] += uf[y];
		uf[y] = x;
		l[x] += l[y];
	}
	l[x] += w;
}

int main (void) {
	int n, m, p, c, i;
	cin >> n >> m >> p >> c;
	memset (uf, -1, sizeof uf);
	int a, b;
	bool exist = false;
	for (i = 0; i < m; i++) {
		int x, y;
		long long w;
		cin >> x >> y >> w;
		x--; y--;
		u(x, y, w);
		a = x; b = y;
		exist = true;
	}
	int cc = 0;
	priority_queue<pair<long long,int>, vector<pair<long long,int> >, greater<pair<long long,int> > > pq;
	for (i = 0; i < n; i++) {
		if (uf[i] < 0) {
			pq.push(mp(l[i], i));
			cc++;
		}
	}
	vector<pair<int,int> > sol;
	while (cc > c && p > 0 && pq.size() > 1) {
		pair<long long, int> c1 = pq.top();	pq.pop();
		pair<long long, int> c2 = pq.top(); pq.pop();
		long long nl = min(d9, c1.first+c2.first+1);
		u(c1.second, c2.second, nl);
		a = c1.second; b = c2.second;
		exist = true;
		sol.push_back(mp(c1.second, c2.second));
		pq.push(mp(l[f(c1.second)], f(c1.second)));
		cc--;
		p--;
	}
	while (exist && p > 0) {
		sol.push_back(mp(a, b));
		p--;
	}
	if (cc != c || p > 0)	cout << "NO" << endl;
	else {
		cout << "YES" << endl;
		for (i = 0; i < sol.size(); i++)	cout << sol[i].first+1 << " " << sol[i].second+1 << endl;
	}
	return 0;
}
