#include <iostream>
#include <queue>
#include <cstdlib>
#include <vector>
#include <cmath>

using namespace std;

typedef long long int ll;

int n,m,p,compfinal;
int pare[1000000];
ll coste[1000000];

int identificador(int u)
{
  if (pare[u]==0) return u;
  int idpareu=identificador(pare[u]);
  pare[u]=idpareu;
  return idpareu;
}

int main()
{
  cin>>n>>m>>p>>compfinal;
  int uu=-1,vv=-1;
  for (int i=0;i<m;i++) {
    int u,v,l;
    cin>>u>>v>>l;
    uu=u;vv=v;
    int idu=identificador(u);
    int idv=identificador(v);
    if (idu!=idv) {
      pare[idv]=idu;
      coste[idu]+=coste[idv];
    }
    coste[idu]+=l;
  }
  priority_queue<pair<ll,int>,vector<pair<ll,int> >,greater<pair<ll,int> > > q;
  for (int u=1;u<=n;u++)
    if (pare[u]==0)
      q.push(pair<ll,int> (coste[u],u));
  if (int(q.size())<compfinal or int(q.size())-p>compfinal) {
    cout<<"NO"<<endl;
    exit(0);
  }
  ll sol=0;
  vector<pair<int,int> > vsol;
  while (int(q.size())>compfinal) {
    p--;
    pair<ll,int> p1=q.top();
    q.pop();
    pair<ll,int> p2=q.top();
    q.pop();
    int u=p1.second;
    int v=p2.second;
    vsol.push_back(pair<int,int> (u,v));
    uu=u;vv=v;
    coste[u]+=coste[v];
    sol+=min(1000000000LL,coste[u]+1);
    coste[u]+=min(1000000000LL,coste[u]+1);
    q.push(pair<ll,int> (coste[u],u));
  }
  while (p>0) {
    if (int(q.size())==n) {
      cout<<"NO"<<endl;
      exit(0);
    }
    vsol.push_back(pair<int,int> (uu,vv));
    sol+=1000;
    p--;
  }
  cout<<"YES"<<endl;
  for (int i=0;i<int(vsol.size());i++)
    cout<<vsol[i].first<<" "<<vsol[i].second<<endl;
}
