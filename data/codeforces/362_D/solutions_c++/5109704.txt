#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>

#define MAXN 100005
#define INF 1000000000LL
#define data pair<long long, int>
#define U second
#define W first

using namespace std;

int n, m, k, P, Q, d[MAXN], next[MAXN];
long long sum[MAXN];
vector<int> a[MAXN];

int find(int u)
{
  return next[u] == u ? u : next[u] = find(next[u]);
}

long long dfs(int u, int r)
{
  d[u] = k;
  next[u] = r;
  long long s = sum[u];
  for (int i = 0; i < a[u].size(); i++)
    if (d[a[u][i]] == 0) s += dfs(a[u][i], r);
  return s;
}

main()
{
  cin >> n >> m >> P >> Q;
  for (int i = 0; i < m; i++)
  {
    int u, v, l;
    cin >> u >> v >> l;
    sum[u] += l;
    sum[v] += l;
    a[u].push_back(v);
    a[v].push_back(u);
  }
  
  priority_queue<data> pq;
  for (int i = 1; i <= n; i++)
    if (d[i] == 0)
    {
      k++;
      long long s = dfs(i, i);
      sum[i] = s / 2;
      pq.push(make_pair(-sum[i], i));
    }
    
  vector<pair<int, int> > res;
  while (k > Q && P > 0)
  {
    P--;
    k--;
    data x = pq.top(); pq.pop();
    data y = pq.top(); pq.pop();
    next[y.U] = find(x.U);
    sum[x.U] += sum[y.U] + min(INF, -x.W - y.W + 1);
    pq.push(make_pair(-sum[x.U], x.U));
    res.push_back(make_pair(x.U, y.U));
  }
  
  if (P > 0)
  {
    for (int i = 1; i <= n; i++)
      if (i != next[i])
      {
        while (P--) res.push_back(make_pair(i, next[i]));
        break;
      }
  }
  
  if (k == Q && P <= 0)
  {
    cout << "YES\n";
    for (int i = 0; i < res.size(); i++) cout << res[i].first << " " << res[i].second << "\n";
  }
  else
    cout << "NO\n";
    
//  system("pause");
}
