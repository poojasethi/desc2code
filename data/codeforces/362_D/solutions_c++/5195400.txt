#include <iostream>
#include <cstdio>
#include <queue>
#include <cstring>
#include <cmath>
#include <algorithm>
#define ll long long
using namespace std;
const int maxn = 100005;
int f[maxn];
bool use[maxn];
ll sz[maxn];
void init(int n)
{
    for (int i=0; i<=n; i++)
        f[i]=i;
}
int get_father(int x)
{
    if (x!=f[x])
        f[x]=get_father(f[x]);
    return f[x];
}
void Union(int x, int y, ll d)
{
    int fx=get_father(x), fy=get_father(y);
    if (fx==fy) {
        sz[fx]+=d;
        return ;
    }
    f[fx]=fy;
    sz[fy]+=d+sz[fx];
    sz[fx]=0;
}
priority_queue<pair<ll, int> > s;
int main()
{
    int n, m, p, q;
    int x, y, xx, yy, t;
    ll d;
    pair<ll, int> u, v;
    scanf("%d%d%d%d", &n, &m, &p, &q);
    init(n);
    for (int i=0; i<m; i++) {
        scanf("%d%d%I64d", &x, &y, &d);
        Union(x, y, d);
        xx=x; yy=y;
    }
    for (int i=1; i<=n; i++) {
        t=get_father(i);
        if (!use[t]) {
            s.push(make_pair(-sz[t], t));
            use[t]=1;
        }
    }
    t=s.size();
    if (t-p>q||q>t||(t==q&&!m&&p)) {
        printf("NO\n");
        return 0;
    }
    printf("YES\n");
    while (s.size()>q) {
        u=s.top(); s.pop();
        v=s.top(); s.pop();
        printf("%d %d\n", u.second, v.second);
        Union(u.second, v.second, min(1000000000ll, -u.first-v.first+1));
        xx=u.second; yy=v.second;
        s.push(make_pair(-sz[v.second], v.second));
        p--;
    }
    while (p--)
        printf("%d %d\n", xx, yy);
    return 0;
}
