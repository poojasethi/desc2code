#include <bits/stdc++.h>

#pragma comment(linker, "/STACK:102400000,102400000")
using namespace std;

#define LL long long
#define pii pair<int,int>
#define MP make_pair
#define ls i << 1
#define rs ls | 1
#define md (ll + rr >> 1)
#define lson ll, md, ls
#define rson md + 1, rr, rs
#define Pi acos(-1.0)
#define mod 1000000007
#define eps 1e-10
#define inf 0x3f3f3f3f
#define N 200010
#define M 2000020

struct node{
	int u;
	LL c;
	node(int u = 0, LL c = 0) : u(u), c(c) {}
	bool operator < (const node &b) const {
		return c > b.c || (c == b.c && u > b.u);
	}
};
int n, m, a, b, fa[N];
priority_queue<node> q;
LL val[N];
pii ans[N];
int cnt, tt;
int find(int x){
	if(fa[x] != x) fa[x] = find(fa[x]);
	return fa[x];
}
int main(){
	scanf("%d%d%d%d", &n, &m, &a, &b);
	for(int i = 1; i <= n; ++i) fa[i] = i;
	for(int i = 1; i <= m; ++i){
		int u, v, c;
		scanf("%d%d%d", &u, &v, &c);
		int x = find(u);
		int y = find(v);
		if(x == y){
			val[x] += c;
			continue;
		}
		fa[x] = y;
		val[y] += val[x] + c;
	}
	for(int i = 1; i <= n; ++i){
		if(fa[i] == i){
			q.push(node(i, val[i]));
			cnt++;
		}
	}
	if(cnt < b || cnt - b > a || (cnt == b && cnt == n && a > 0)){
		puts("NO"); return 0;
	}
	while(cnt > b){
		node t1 = q.top(); q.pop();
		node t2 = q.top(); q.pop();
		LL c = t1.c + t2.c + 1;
		c = min(c, 1000000000LL);
		fa[t1.u] = t2.u;
		q.push(node(t2.u, t1.c + t2.c + c));
		ans[++tt] = MP(t1.u, t2.u);
		a--;
		cnt--;
	}
	if(a){
		for(int i = 1; i <= n; ++i){
			if(find(i) != i){
				int u = find(i), v = i;
				for(int j = 0; j < a; ++j)
					ans[++tt] = MP(u, v);
				break;
			}
		}	
	}
	puts("YES");
	for(int i = 1; i <= tt; ++i)
		printf("%d %d\n", ans[i].first, ans[i].second);
	return 0;
}
