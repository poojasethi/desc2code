#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;

typedef long long LL;
const LL INF=1e9;
struct Node
{
	LL x,w;
	bool operator <(const Node&B) const {return w>B.w;}
}dq1,dq2;
priority_queue<Node> que;
LL n,m,p,q;
LL fa[100005];
LL x[100005],w[100005];
LL y;
LL dqx,dqy;
Node dq;
LL dqk,nowx,nowy;

LL sumw[100005];
LL getfather(LL x)
{
	if (x!=fa[x]) fa[x]=getfather(fa[x]);
	return fa[x];
}
int main()
{
	scanf("%I64d%I64d%I64d%I64d",&n,&m,&p,&q);
	for (int i=1;i<=n;++i) fa[i]=i;
	for (int i=1;i<=m;++i)
	{
		scanf("%I64d%I64d%I64d",&x[i],&y,&w[i]);
		dqx=getfather(x[i]);
		dqy=getfather(y);
		if (dqx!=dqy) fa[dqx]=dqy;
		nowx=x[i];nowy=y;
	}
	for (int i=1;i<=m;++i)
	{
		dqx=getfather(x[i]);
		sumw[dqx]=min(sumw[dqx]+w[i],INF);
	}
	for (int i=1;i<=n;++i)
	{
		if (fa[i]!=i) continue;
		dqk++;
		dq.x=i;dq.w=sumw[i];
		que.push(dq);
	}
	if (dqk<q)
	{
		cout<<"NO"<<endl;
		return 0;
	}
	if (q<dqk-p)
	{
		cout<<"NO"<<endl;
		return 0;
	}
	if (q==n&&p!=0)
	{
		cout<<"NO"<<endl;
		return 0;
	}
	cout<<"YES"<<endl;

	for (int i=1;i<=p;++i)
	{
		if (dqk==q)
		{
			printf("%I64d %I64d\n",nowx,nowy);
		}
		else
		{
			dq1=que.top();que.pop();
			dq2=que.top();que.pop();
			dq.x=dq1.x;
			dq.w=dq1.w+dq2.w+dq1.w+dq2.w+1;
			dq.w=min(dq.w,INF);
			que.push(dq);
			dqk--;
			printf("%I64d %I64d\n",dq1.x,dq2.x);
			nowx=dq1.x;
			nowy=dq2.x;
		}
	}
	return 0;
}
	 	 			 	  				    	 		 		    	