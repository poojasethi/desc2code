#include<cstdio>
#include<cmath>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
const int maxn = 510000;
typedef long long LL;
LL fa[maxn], sum[maxn], asd[maxn], ss[maxn];
int find(int x){
	if (fa[x] == x) return x;
	return fa[x] = find(fa[x]);
}
int aa[maxn];
struct Tzy{
	int x; LL  y;
	bool  operator < (const Tzy b) const { return y > b.y; }
};
priority_queue<Tzy>head;
int num, n, m, Q, P;
void init(){
	scanf("%d%d%d%d", &n, &m, &P, &Q);
	for (int i = 1; i <= n; i ++) fa[i] = i;
	for (int i = 1; i <= m; i ++){
		int a = 0, b = 0, c = 0;
		scanf("%d%d%d", &a, &b, &c);
		int fax = find(a), fay = find(b);
		fa[fay] = fax; sum[a] += c, sum[b] += c;
	}
	for (int i = 1; i <= n; i ++){
		int fai = find(i);
		asd[fai] += sum[i];
		if (fai == i){
			num ++;
			aa[num] = i;
		}
	}
	for (int i = 1; i <= num; i ++){
		head.push((Tzy){aa[i], asd[aa[i]] / 2});
	}

}
int ans[maxn][2];
void work(){
	int ans1 = 0;
	if (num < Q){
		puts("NO");
		return;
	}
	for (int i = 1; i <= num - Q; i ++){
		Tzy a = head.top(); head.pop();
		Tzy b = head.top(); head.pop();
		ans[++ ans1][0] = a.x, ans[ans1][1] = b.x;
		head.push((Tzy){a.x, a.y + b.y + min(a.y + b.y + 1LL, 1000000000LL)});
		fa[b.x] = fa[a.x];
	}
	if (ans1 > P){
		puts("NO");
		return;
	}
//	puts("YES");	for (int i = 1; i <= n;  ++){

	for (int j = 1; j <= n; j ++){
		int faj = find(j);
		if (j != faj)
			while (ans1 < P){
				ans[++ ans1][0] = faj;
				ans[ans1][1] = j; 
			}
		if (ans1 == P) break;	
	}
	if (ans1 != P){ puts("NO"); return;}
	puts("YES");
	for (int i = 1; i <= ans1; i ++) printf("%d %d\n", ans[i][0], ans[i][1]);	
}
int main(){
	init();
	work();
	return 0;
}
	  	 	 					 		  	 			 		 		