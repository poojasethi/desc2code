#include <cstdio>
#include <vector>
#include <utility>
#include <set>

using namespace std;

#define LL long long

int g[100000];
LL w[100000];
set< pair<LL, int> > r;

int find(int i)
{
	if (g[i] != i)
		return g[i] = find(g[i]);
	return i;
}

void unio(int i, int j, LL ww)
{
	int fi = find(i);
	int fj = find(j);
	if (fi != fj)
	{
		w[fj] += ww + w[fi];
		g[fi] = fj;
	}
	else
		w[fj] += ww;
}

int main()
{
	int n, m, p, q;
	scanf("%d %d %d %d", &n, &m, &p, &q);
	vector< pair<int, int> > res;
	for (int i = 0; i < n; ++i)
		g[i] = i;
	for (int i = 0; i < m; ++i)
	{
		int u, v, w;
		scanf("%d %d %d", &u, &v, &w);
		unio(u-1, v-1, w);
	}
	for (int i = 0; i < n; ++i)
		if (g[i] == i)
			r.insert(make_pair(w[i], i));
	while (r.size() > q && p > 0)
	{
		set< pair<LL, int> >::iterator it = r.begin();
		pair<LL, int> r1 = *it;
		pair<LL, int> r2 = *(++it);
		r.erase(r.begin());
		r.erase(r.begin());
		unio(r1.second, r2.second, min(1000000000LL, r1.first+r2.first+1)); 
		r.insert(make_pair(w[r2.second], r2.second));
		res.push_back(make_pair(r1.second, r2.second));
		p--;
	}
	if (r.size() < q || r.size() > q && p == 0)
	{
		printf("NO\n");
		return 0;
	}
	if (p > 0)
	{
		bool ok = false;
		vector<int> s[100000];
		for (int i = 0; i < n; ++i)
			s[find(i)].push_back(i);
		for (int i = 0; i < n; ++i)
		{
			if (s[i].size() >= 2)
			{
				while (p-- > 0)
					res.push_back(make_pair(s[i][0], s[i][1]));
				ok = true;
			}
		}
		if (!ok)
		{
			printf("NO\n");
			return 0;
		}
	}
	printf("YES\n");
	for (int i = 0; i < res.size(); ++i)
		printf("%d %d\n", res[i].first+1, res[i].second+1);
	return 0;
}
