#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

typedef long long LL;
typedef pair<LL,int> PLI;

const int N = 100005;
const LL INF = 1000000000;

int n, m, p, q;
LL s[N];

int find(int x) {
	if(s[x] <= 0) return x;
	return s[x] = find(s[x]);
}

bool merge(int x, int y, LL l) {
	x = find(x);
	y = find(y);
	if(x == y) {
		s[x] -= l;
		return false;
	} else {
		s[x] += s[y]-l;
		s[y] = x;
		return true;
	}
}

int main() {
	scanf("%d%d%d%d", &n, &m, &p, &q);
	memset(s, 0, sizeof(s));
	int t = n;
	for(int a,b,c,i = 0; i < m; ++i) {
		scanf("%d%d%d", &a, &b, &c);
		if(merge(a, b, c)) --t;
	}
	if(t < q || p < t-q || t == n && q == n && p) {
		puts("NO");
		return 0;
	}
	int diff = t-q;
	int same = p-diff;
	priority_queue<PLI> que;
	for(int i = 1; i <= n; ++i) {
		if(s[i] <= 0) {
			que.push(PLI(s[i], i));
		}
	}
	puts("YES");
	while(diff--) {
		int x = que.top().second; que.pop();
		int y = que.top().second; que.pop();
		printf("%d %d\n", x, y);
		merge(x, y, min(INF, -s[x]-s[y]+1));
		x = find(x);
		que.push(PLI(s[x], x));
	}
	int x = 0;
	for(int i = 1; i <= n; ++i) {
		if(s[i] > 0) { x = i; break; }
	}
	while(same--) {
		printf("%d %d\n", x, (int)s[x]);
	}
}
