#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
#include <iostream>

using namespace std;

const int MAXN = (int)1e5+10 ;

int n,m,p,q,cnt;
int fa[MAXN];
long long g[MAXN];
int u,v;

int getfa(int x){
    if (fa[x]==x) return fa[x] ;
    return fa[x]=getfa(fa[x]);
}

void solve(){
    if (cnt-q > p){ puts("NO"); return ;}
    int moreedge = p-cnt+q;
    priority_queue< pair<long long,int> > heap ;
    for (int i=1;i<=n;i++)if (fa[i]==i) heap.push(make_pair(-g[i],i));
    int times = cnt-q;
    puts("YES");
    while (times--){
        u = heap.top().second ; heap.pop() ;
        v = heap.top().second ; heap.pop() ;
        long long length = min(g[u]+g[v]+1,(long long)1e9);
        fa[v] = u;
        g[u] = g[u]+g[v]+length;
        printf("%d %d\n",u,v);
        heap.push(make_pair(-g[u],u));
    }
    while (moreedge--)
        printf("%d %d\n",u,v);
}

int main(){
    scanf("%d%d%d%d",&n,&m,&p,&q);
    for (int i=1;i<=n;i++) fa[i]=i,g[i]=0;
    for (int i=0;i<m;i++){
        int x,y,l;
        scanf("%d%d%d",&x,&y,&l);
        u=x; v=y;
        x=getfa(x); y=getfa(y);
        if (x==y) g[x]+=l;
        else{
            fa[y]=x;
            g[x]+=g[y]+l;
        }
    }
    cnt=0;
    for (int i=1;i<=n;i++) if (fa[i]==i) cnt++;
    if (cnt<q){
        puts("NO");
        return 0;
    }
    if (cnt==n){
        if (p-n+q > 0 && q==n) puts("NO");
        else solve() ;
    }else
        solve();
    return 0;
}
