#include <algorithm>
#include <stdio.h>
#include <set>
#define  fi        first
#define  se        second
#define  maxn      100003
#define  maxs      1000000000LL
using    namespace std;
typedef  long long LL;
typedef  pair<LL,LL> pi;

LL n,m,p,q,k;
LL par[maxn];
LL cnt[maxn];
LL sum[maxn];
set<pi>myset;

LL merge(LL x , LL y , LL z)
{
  while(x!=par[x]) x=par[x];
  while(y!=par[y]) y=par[y];
  if(x==y)
  {
    sum[x]+=z;
    return x;
  }  
  else if(cnt[x]>cnt[y])
  {
    par[y]=x;
    cnt[x]+=cnt[y];
    sum[x]=min(maxs,sum[x]+sum[y]+z);
    return x;
  }
  else
  {
    par[x]=y;
    cnt[y]+=cnt[x];
    sum[y]=min(maxs,sum[x]+sum[y]+z);
    return y;
  }
}

int main()
{
  scanf("%I64d%I64d%I64d%I64d",&n,&m,&p,&q);
  for(LL i=1 ; i<=n ; i++)
    par[i]=i,cnt[i]=1;
  for(LL i=0,x,y,z ; i<m ; i++)
  {
    scanf("%I64d%I64d%I64d",&x,&y,&z);
    merge(x,y,z);
  }
  for(LL i=1 ; i<=n ; i++)
    if(par[i]==i)
      myset.insert(pi(sum[i],i));
  k=myset.size();
  if(k<q || k-p>q)      { printf("NO\n"); exit(0); }
  if(n==q && !m && p)   { printf("NO\n"); exit(0); }
  printf("YES\n");
  for(LL i=0 ; i<k-q ; i++)
  {
    set<pi>::iterator it=myset.begin();
    pi tmp1=(*it);
    myset.erase(it);
    it=myset.begin();
    pi tmp2=(*it);
    myset.erase(it);
    printf("%I64d %I64d\n",tmp1.se,tmp2.se);
    LL tmp=merge(tmp1.se,tmp2.se,min(maxs,tmp1.fi+tmp2.fi+1));
    myset.insert(pi(sum[tmp],tmp));
  }
  LL tmp=-1;
  for(LL i=1 ; i<=n ; i++)
    if(par[i]!=i)
      tmp=i;
  for(LL i=0 ; i<p-(k-q) ; i++)
    printf("%I64d %I64d\n",tmp,par[tmp]);
  return 0;
}
