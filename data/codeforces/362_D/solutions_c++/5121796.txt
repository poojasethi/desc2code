#include <cstdio>
#include <iostream>
#include <set>
#include <queue>

#define fi first
#define se second

using namespace std;

typedef long long int Lint;
typedef pair<int,int> ii;
typedef pair<Lint,int> li;

const int MAXN=1e5+10;

int N,M,K,P,A,B;
int dad[MAXN];

Lint res;
Lint L[MAXN];

set<li> s;

inline int find( int k ){
	
	if( k==dad[k] )
		return k;
	
	return dad[k]=find(dad[k]);
}

inline void merge( int a , int b , Lint l ){
	
	int x=find(dad[a]);
	int y=find(dad[b]);
	
	if( x!=y ){
		L[x]+=L[y]+l;
		dad[y]=x;
		A=x;
		B=y;
	}
	
	else
		L[x]+=l;
}

int main(){
	
	scanf(" %d %d %d %d",&N,&M,&K,&P);
	
	for( int i=1 ; i<=N ; i++ )
		dad[i]=i;
	
	for( int a,b,c,i=0 ; i<M ; i++ ){
		scanf(" %d %d %d",&a,&b,&c);
		merge(a,b,(Lint)c);
	}
	
	int cnt=0;
	
	for( int i=1 ; i<=N ; i++ )
		if( dad[i]==i ){
			cnt++;
			s.insert(li(L[i],i));
		}
	
	if( P>cnt || ( P==cnt && cnt==N && K ) || cnt-K>P ){
		printf("NO\n");
		return 0;
	}
	
	printf("YES\n");
	
	li s1,s2;
	
	for( int i=0 ; i<cnt-P ; i++ ){
		
		set<li>::iterator it=s.begin();
		
		s1=*it;
		it++;
		s2=*it;
		
		s.erase(s1);
		s.erase(s2);
		
		A=s1.se;
		B=s2.se;
		
		s.insert(li(min(2LL*(s1.fi+s2.fi)+1LL,(Lint)1e9),s1.se));
		printf("%d %d\n",s1.se,s2.se);
		K--;
	}
	
	while( K-- )
		printf("%d %d\n",A,B);
	
	return 0;
}
