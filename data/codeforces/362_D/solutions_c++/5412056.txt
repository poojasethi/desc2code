#include<stdio.h>
#include<algorithm>
using namespace std;
#define maxn 101000
#define maxint 1000000000
typedef long long int LD;

int i,j,n,m,P,Q;

int fa[maxn], sum[maxn];
LD value[maxn];

int findfa(int a){
  if (fa[a]==a)
    return a;
  return fa[a]=findfa(fa[a]);
}

bool cmp(int a,int b){
  return value[a]>value[b];
}

bool merge(int a,int b){
  a=findfa(a);
  b=findfa(b);
  if(a==b)
    return false;
  if (sum[a]>sum[b])
    swap(a,b);
  sum[b]+=sum[a];
  value[b]+=value[a];
  fa[a]=b;
  return true;
}

int h[maxn],t;

int main() {
  scanf("%d %d %d %d",&n,&m,&P,&Q);
  int a,b,c;
  for(i=1;i<=n;i++){
    fa[i]=i;
    sum[i]=1;
  }
  while(m--){
    scanf("%d %d %d",&a,&b,&c);
    merge(a,b);
    value[findfa(a)]+=c;
  }
  for(i=1;i<=n;i++){
    if(findfa(i)==i) {
      h[t++]=i;
      push_heap(h,h+t,cmp);
    }
  }
  if (Q > t || Q < t - P) {
    printf("NO\n");
    return 0;
  }
  if(Q == n && P > 0) {
    printf("NO\n");
    return 0;
  }
  printf("YES\n");
  while(Q < t){
    P--;
    pop_heap(h,h+t,cmp);
    t--;
    a=h[t];
    pop_heap(h,h+t,cmp);
    b=h[t-1];
    printf("%d %d\n",a,b);
    if(value[b]+value[a]+1>maxint)
      value[b]+=maxint;
    else
      value[b]+=value[b]+value[a]+1;
    value[b]+=value[a];
    push_heap(h,h+t,cmp);
    fa[findfa(a)]=findfa(b);
  }
  if (P) {
    for(i=1;i<=n;i++){
      if(findfa(i)!=i){
        while(P--){
          printf("%d %d\n",i,fa[i]);
        }
        break;
      }
    }
  }
  return 0;
}
