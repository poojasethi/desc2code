#include<bits/stdc++.h>
using namespace std;

vector<int> adj[100005];
vector<int> edge[100005];
int edges[100005];
long long weight;
int par[100005];
bool vis[100005];
bool vis2[100005];
int parent;
set<pair<long long,int> > heap;

void dfs(int s)
{
	par[s]=parent;
	vis[s]=true;
	
	for(int i=0;i<adj[s].size();i++)
	{
	    if(!vis2[edge[s][i]])
	    {
	        vis2[edge[s][i]]=true;
	        weight+=edges[edge[s][i]];
	    }
	    if(!vis[adj[s][i]])
	    {
	        dfs(adj[s][i]);
	    }
	}
}
int noc=0;

int main()
{
	int n,m,p,q;
	int ver1,ver2,wt1,wt2;
	scanf("%d %d %d %d",&n,&m,&p,&q);
	int a,b,c;
	for(int i=0;i<m;i++)
	{
		scanf("%d %d %d",&a,&b,&c);
		adj[a].push_back(b);
		edge[a].push_back(i);
		adj[b].push_back(a);
		edge[b].push_back(i);
		edges[i]=c;
		ver1=a,ver2=b;
	}
	for(int i=1;i<=n;i++)
	{
		if(!vis[i])
		{
			noc++;
			parent=i;
			weight=0;
			dfs(i);
			heap.insert(make_pair(weight,i));
		}
	}
	if((noc-q)>p)
	{
		printf("NO");
		return 0;
	}
	if(noc<q)
	{
		printf("NO");
		return 0;
	}
	if(m==0&&q==noc&&p>0)
	{
	    printf("NO");
	    return 0;
	}
	printf("YES\n");
	set<pair<long long,int> > ::iterator it;
	while(heap.size()>q)
	{
		it=heap.begin();
		ver1=(*it).second;
		wt1=(*it).first;
		heap.erase(it);
		it=heap.begin();
		ver2=(*it).second;
		wt2=(*it).first;
		heap.erase(it);
		printf("%d %d\n",ver1,ver2);
		heap.insert(make_pair(2*(wt1+wt2)+1,max(ver1,ver2)));
		p--;
	}
	for(int i=0;i<p;i++)
	{
	    printf("%d %d\n",ver1,ver2);
	}
}