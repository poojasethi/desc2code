#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll, int> ii;
const int N = 100010;
int n, m, k, q, a, b, c, p[N];
ll sz[N], len;

priority_queue<ii, vector<ii>, greater<ii> > qu;
vector<ii> v;
int node[N];

int find(int x) {
	if(x == p[x]) return x;
	return p[x] = find(p[x]);
}

int main(int argc, char **argv) {
#ifndef ONLINE_JUDGE
	freopen("a.in", "r", stdin);
#endif
	scanf("%d%d%d%d", &n, &m, &k, &q);
	int now = n;
	for(int i=0 ; i<=n ; ++i)
		p[i] = i;
	while(m--) {
		scanf("%d%d%d", &a, &b, &c);
		a = find(a), b = find(b);
		if(a != b) {
			sz[b] += sz[a] + c;
			p[a] = b;
			--now;
		} else {
			sz[a] += c;
		}
	}
	for(int i=1 ; i<=n ; ++i)
		v.push_back(ii(sz[find(i)], find(i)));
	sort(v.begin(), v.end());
	v.resize(unique(v.begin(), v.end()) - v.begin());
	for(int i=0 ; i<(int)v.size() ; ++i)
		qu.push(ii(v[i].first, v[i].second));
	for(int i=1 ; i<=n ; ++i)
		node[find(i)] = i;
	v.clear();
	while(now > q && k>0) {
		a = qu.top().second;
		qu.pop();
		b = qu.top().second;
		qu.pop();
		a = find(a), b = find(b);
		len = sz[a] + sz[b] + 1;
		len = min(len, 1000000000LL);
		sz[b] += sz[a] + len;
		a = find(a);
		b = find(b);
		v.push_back(ii(a, b));
		p[a] = b;
		a = find(a);
		qu.push(ii(sz[b], b));
		--now;
		--k;

	}
	if(now != q) {
		return puts("NO"), 0;
	}
	if(k > 0) {
		for(int i=1 ; i<=n ; ++i)
			if(find(i) != i) {
				while(k > 0) {
					v.push_back(ii(i, find(i)));
					--k;
				}
				break;
			}
	}
	if(k != 0 || now != q) puts("NO");
	else {
		puts("YES");
		for(int i=0 ; i<(int)v.size() ; ++i) {
			printf("%lld %d\n", v[i].first, v[i].second);
		}
	}
	return 0;
}
