from sys import stdin, stdout, setrecursionlimit
from heapq import heapify, heappop, heappush
setrecursionlimit(100000)
def main():
    read_ints = lambda: map(int, stdin.readline().split())
    n, m, p, q = read_ints()
    par = range(n)
    s = [0] * n
    def find(x):
        if x == par[x]:
            return x
        else:
            par[x] = find(par[x])
            return par[x]
    def unite(x, y, l):
        x, y = find(x), find(y)
        s[x] += l
        if x == y: return
        par[y] = x
        s[x] += s[y]
        s[x] = min(s[x], 1000000000)
    lastpair = ()
    for _ in xrange(m):
        x, y, l = read_ints()
        lastpair = (x, y)
        unite(x-1, y-1, l)
    if q == n and p:
        stdout.write("NO\n")
        return
    h = [(s[i], i) for i in xrange(n) if find(i) == i]
    c = len(h) - q
    if c < 0 or c > p:
        stdout.write("NO\n")
        return
    stdout.write("YES\n")
    heapify(h)
    ans = []
    for _ in xrange(c):
        x, y = heappop(h), heappop(h)
        ans.append((x[1] + 1, y[1] + 1))
        heappush(h, (min(x[0] + y[0] + x[0] + y[0] + 1, 1000000000), x[1]))
    if ans:
        lastpair = ans[-1]
    ans.extend([lastpair] * (p - c))
    stdout.write('\n'.join(' '.join(map(str, x)) for x in ans))
main()
