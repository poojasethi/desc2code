#include<queue>
#include<cstdio>
#include<algorithm>
using namespace std;
struct node{
	int sk,v,po;
	bool operator <(const node &s)const{
		return sk<s.sk;
	}
}stu[100010],bug[100010];
struct cmp{
	bool operator() (node &a,node &b){
		return a.v>b.v;
	} 
};
int n,m,s,ans[100010];

bool check(int t){
	int money=0;
	priority_queue<node,vector<node>,cmp> que;
	for (int i=m,j=n;i>=1;i-=t){
		for (;j>=0&&stu[j].sk>=bug[i].sk;j--) que.push(stu[j]);
		if (que.empty()) return false;
		money+=que.top().v;
		if (money>s) return false;
		for (int k=i;k>=max(1,i-t+1);k--)
			ans[bug[k].po]=que.top().po;
		que.pop();
	}
	return true;
}

int main(){
	scanf("%d%d%d",&n,&m,&s);
	for (int i=1;i<=m;i++){
		scanf("%d",&bug[i].sk);
		bug[i].po=i;
	}
	for (int i=1;i<=n;i++){
		scanf("%d",&stu[i].sk);
		stu[i].po=i;
	}
	for (int i=1;i<=n;i++) scanf("%d",&stu[i].v);
	sort(stu+1,stu+1+n);
	sort(bug+1,bug+1+m);
	if (!check(m)){printf("NO\n");return 0;}
	printf("YES\n");
	int l=0,r=m+1;
	while (l+1<r){
		int mid=(l+r)/2;
		if (check(mid)) r=mid;
		else l=mid;
	}
	check(r);
	for (int i=1;i<=m;i++)
		printf("%d ",ans[i]);
	return 0;
}

  	 	  		   					 				 		   	