#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>

using namespace std;

const int MAX_N = 100001;
typedef pair<int,int> pii;

int n, m, s;
vector<pii> Bug, Stu;
int cost[MAX_N], ans[MAX_N];

bool C(int day) {
	int left = s;
	priority_queue<pii> heap;
	int i = n - 1, j = m - 1;
	while (j >= 0) {
		while (i >= 0 && Stu[i].first >= Bug[j].first) {
			heap.push(pii(-cost[Stu[i].second], Stu[i].second)); --i;
		}
		if (0 == heap.size() || -heap.top().first > left) return false;
		int cur = heap.top().second; heap.pop();
		left -= cost[cur];
		for (int k = 0; k < day && j >= 0; ++k, --j) {
			ans[Bug[j].second] = cur;
		} 
	}
	return true;
}

void solve() {
	int l = 0, r = n + 1;
	sort(Bug.begin(), Bug.end());
	sort(Stu.begin(), Stu.end());
	if (!C(r)) {
		puts("NO");
		return ;
	}
	while (l + 1 < r) { 
		int mid = (l + r) >> 1;
		if (C(mid)) r = mid;
		else l = mid;
	}
	C(r);
	puts("YES");
	for (int i = 0; i < m; ++i) {
		if (0 == i) printf("%d", ans[i] + 1);
		else printf(" %d", ans[i] + 1);
	}
	puts("");
}

int main() {
	scanf("%d%d%d", &n, &m, &s);
	for (int i = 0; i < m; ++i) {
		int a;
		scanf("%d", &a);
		Bug.push_back(pii(a, i));
	}
	for (int i = 0; i < n; ++i) {
		int b;
		scanf("%d", &b);
		Stu.push_back(pii(b, i));
	}
	for (int i = 0; i < n; ++i) {
		scanf("%d", cost + i);
	}
	solve();
	return 0;
}