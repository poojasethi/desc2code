#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 2e5 + 5;
const int MASK = (1 << 16) - 1;

int n, m, q;
int cnt[N];
unsigned a1[32][N >> 5], a2[32][N >> 5];
char a[N], b[N];

int main () {
    
    for(int i = 1; i < (1 << 16); i++)
        cnt[i] = cnt[i - (i & -i)] + 1;
    
    scanf("%s %s", a, b);
    n = strlen(a);
    m = strlen(b);
    
    for(int j = 0; j < 32; j++) {
        for(int i = 0; i + j < n; i++)
            if(a[i + j] == '1')
                a1[j][i >> 5] |= 1 << (i & 31);
    }
        
    for(int j = 0; j < 32; j++) {
        for(int i = 0; i + j < m; i++)
            if(b[i + j] == '1')
                a2[j][i >> 5] |= 1 << (i & 31);
    }
    
    scanf("%d", &q);
    
    for(int i = 0; i < q; i++) {
        int x, y, len;
        scanf("%d %d %d", &x, &y, &len);
        int end = x + len, ans = 0;
        int w1 = x & 31;
        int w2 = y & 31;
        int l = x >> 5;
        int r = y >> 5;
        while(x + 32 < end) {
            unsigned mask = a1[w1][l] ^ a2[w2][r];
            ans += cnt[mask & MASK] + cnt[mask >> 16];
            x += 32;
            y += 32;
            l++;
            r++;
        }
        while(x < end) {
            ans += a[x] != b[y];
            x++;
            y++;
        }
        printf("%d\n", ans);
    }
    
    return 0;
    
}
