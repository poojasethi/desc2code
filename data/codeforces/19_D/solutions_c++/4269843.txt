#include <cstdio>
#include <cstring>
#include <set>
#include <algorithm>
#include <vector>
using namespace std;
#define maxn 200100 
int n, m;
int A[maxn], ma[maxn << 2]; 
set<int> a[maxn];
char s[10];

struct Point {
	char op;
	int x, y;
} P[maxn];

void update(int x, int l, int r, int rt) {
	if (l == r) {
		if (a[x].size() == 0) ma[rt] = 0;
		else ma[rt] = *a[x].rbegin();
		return;
	}
	//int mid = l + (r - l) >> 1; 
	int mid = l + r >> 1;
	if (x <= mid) update(x, l, mid, rt << 1);
	else update(x, mid + 1, r, rt << 1 | 1);
	ma[rt] = max(ma[rt << 1], ma[rt << 1 | 1]);
}

int query(int x, int y, int l, int r, int rt) {
	if (l == r) {
		if (ma[rt] > y && x < l) return l;
		return 0; //else ?...//really is else..
	}
	//int mid = l + (r - l) >> 1;
	int mid = l + r >> 1;
	int t = 0; //t==0 if not change
	if (x < mid && ma[rt << 1] > y) t = query(x, y, l, mid, rt << 1); 
	if (t == 0 && ma[rt << 1 | 1] > y) t = query(x, y, mid + 1, r, rt << 1 | 1);
	return t;
}

int main() {//freopen("in.txt", "r", stdin);
	scanf("%d", &n);
	m = 0;
	for (int i = 0; i < n; ++i) {
		scanf("%s%d%d", s, &P[i].x, &P[i].y); 
		P[i].op = s[0];
		A[m++] = P[i].x;
		a[i].clear();
	}
	a[n].clear(); //

	sort(A, A + m);
	m = unique(A, A + m) - A;
	memset(ma, 0, sizeof(ma));
	int x, y;
	for (int i = 0; i < n; ++i) {
		x = lower_bound(A, A + m, P[i].x) - A + 1; 
		y = P[i].y;
		if (P[i].op == 'a') {
			a[x].insert(y); 
			update(x, 1, n, 1);
		} else if (P[i].op == 'r') {
			a[x].erase(y);
			update(x, 1, n, 1);
		} else {
			int t = query(x, y, 1, n, 1);
			if (t) printf("%d %d\n", A[t - 1], *a[t].upper_bound(y));
			else puts("-1");
		}
	}
	return 0;
}