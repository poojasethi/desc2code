#include <bits/stdc++.h>
using namespace std;

int N, LIM;
struct query
{
    char cmd[10];
    int x, y;
} Q[200002];
vector <int> Zip;
set < pair <int, int> > BIT[200002];

int getpos(int v)
{
    return lower_bound(Zip.begin(), Zip.end(), v) - Zip.begin();
}

void Add(int x, int y)
{
    pair <int, int> v = make_pair(x, y);
    for (int yy = getpos(y); yy; yy -= yy & -yy)
        BIT[yy].insert(v);
}

void Remove(int x, int y)
{
    pair <int, int> v = make_pair(x, y);
    for (int yy = getpos(y); yy; yy -= yy & -yy)
        BIT[yy].erase(v);
}

void Query(int x, int y)
{
    pair <int, int> v = make_pair(x, y), ans = make_pair(INT_MAX, INT_MAX);
    for (int yy = getpos(y); yy <= LIM; yy += yy & -yy)
    {
        set < pair <int, int> > :: iterator it = BIT[yy].lower_bound(v);
        if (it != BIT[yy].end()) ans = min(ans, *it);
    }
    if (ans.first != INT_MAX) printf("%d %d\n", ans.first, ans.second);
        else printf("-1\n");
}

main()
{
    scanf("%d", &N);
    for (int i = 1; i <= N; i++)
    {
        scanf("\n%s %d %d", &Q[i].cmd, &Q[i].x, &Q[i].y);
        Zip.push_back(Q[i].y + (Q[i].cmd[0] == 'f'));
    }

    Zip.push_back(-1);
    sort(Zip.begin(), Zip.end());
    Zip.resize(LIM = distance(Zip.begin(), unique(Zip.begin(), Zip.end())));
    for (int i = 1; i <= LIM; i++) BIT[i].insert(make_pair(-1, -1));

    for (int i = 1; i <= N; i++)
        if (Q[i].cmd[0] == 'a') Add(Q[i].x, Q[i].y);
            else if (Q[i].cmd[0] == 'r') Remove(Q[i].x, Q[i].y);
                else Query(Q[i].x + 1, Q[i].y + 1);
}
