//In the Name of God ;

#include<bits/stdc++.h>

using namespace std;

#define vec(A) A.begin(),A.end()
#define pb push_back

const int Maxn=1<<19;

const string ADD="add";
const string REM="remove";
const string FND="find";

int n;
string d[Maxn];
int x[Maxn],y[Maxn];
vector<int>X;
set<int>s[Maxn];
int mx[2*Maxn],pos[2*Maxn];
int XX;

void change(int l,int r,int p,int m,int node=1)
{
  if(r<=p || p<l)
    return ;
  if(l==p && r-1==l)
    {
      mx[node]=m;
      return ;
    }
  int mid=(l+r)/2;
  change(l,mid,p,m,2*node+0);
  change(mid,r,p,m,2*node+1);
  mx[node]=max(mx[2*node+0],mx[2*node+1]);
}

int bs(int l,int r,int a,int b,int node=1)
{
  if(r<=a || (mx[node]<=b && a<=l))
    return n;
  if(a<l && mx[node]>b && l==r-1)
    return XX=l;
  int mid=(l+r)/2;
  int lc=bs(l,mid,a,b,2*node+0);
  if(lc==n)
    return bs(mid,r,a,b,2*node+1);
  return lc;
}

int main()
{
  ios_base::sync_with_stdio(0);cin.tie(0);
  cin>>n;
  for(int i=0;i<n;i++)
    {
      cin>>d[i]>>x[i]>>y[i];
      X.pb(x[i]);
    }
  sort(vec(X));
  X.resize(unique(vec(X))-X.begin());
  int mm=n;
  n=X.size();
  for(int i=0;i<mm;i++)
    {
      x[i]=lower_bound(vec(X),x[i])-X.begin();
      if(d[i]==ADD)
	{
	  s[x[i]].insert(y[i]);
	  change(0,n,x[i],*s[x[i]].rbegin());
	}
      if(d[i]==REM)
	{
	  s[x[i]].erase(y[i]);
	  int t=0;
	  if(s[x[i]].size()!=0)
	    t=*s[x[i]].rbegin();
	  change(0,n,x[i],t);
	}
      if(d[i]==FND)
	{
	  XX=n;
	  bs(0,n,x[i],y[i]);
	  if(XX!=n)
	    printf("%d %d\n",X[XX],*s[XX].upper_bound(y[i]));
	  else
	    printf("-1\n");
	}
    }
  return 0;
}
