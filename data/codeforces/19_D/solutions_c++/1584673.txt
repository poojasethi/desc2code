#include <cstdio>
#include <algorithm>

using namespace std;

struct node
{
  int a,b;
  bool operator<(const node& o) const
  {
    if(a!=o.a)
      return a<o.a;
    return b<o.b;
  }
};

node p[200001],q[200001];
int f[800001],l[800001],r[800001],t[200001];
char s[50];

void buildtree(int x,int y,int z)
{
  l[x]=y;
  r[x]=z;
  f[x]=0;
  if(y==z)
    return;
  int mid=(y+z)/2;
  buildtree(x*2,y,mid);
  buildtree(x*2+1,mid+1,z);
}

void ins(int x,int y,int z)
{
  if(l[x]==r[x])
  {
    f[x]=z;
    return;
  }
  int mid=(l[x]+r[x])/2;
  if(y<=mid)
    ins(x*2,y,z);
  else
    ins(x*2+1,y,z);
  f[x]=max(f[x*2],f[x*2+1]);
}

int find(int x,int y,int z)
{
  if((q[r[x]].a<=y)||f[x]<=z)
    return -1;
  if(l[x]==r[x])
    return l[x];
  int mid=(l[x]+r[x])/2;
  int w=find(x*2,y,z);
  if(w==-1)
    w=find(x*2+1,y,z);
  return w;
}

int main(void)
{
  int n;
  scanf("%d",&n);
  for(int i=1;i<=n;++i)
  {
    scanf("%s %d %d",s,&p[i].a,&p[i].b);
    q[i]=p[i];
    if(s[0]=='a')
      t[i]=1;
    else if(s[0]=='r')
      t[i]=0;
    else
      t[i]=2;
  }
  sort(q+1,q+n+1);
  buildtree(1,1,n);
  for(int i=1;i<=n;++i)
  {
    if(t[i]<2)
      ins(1,lower_bound(q+1,q+n+1,p[i])-q,t[i]*p[i].b);
    else
    {
      int ans=find(1,p[i].a,p[i].b);
      if(ans==-1)
        printf("-1\n");
      else
        printf("%d %d\n",q[ans].a,q[ans].b);
    }
  }
  return 0;
}