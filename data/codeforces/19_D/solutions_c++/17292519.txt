#include <stdio.h>
#include <algorithm>
#include <map>
#include <set>
using namespace std;
#define N 200005
typedef pair<int,int> PII;
const int INF = 0x7fffffff;
int Y[N], cnt, x[N], y[N];
char ch[N];
set<PII> mp[N];
set<PII>::iterator it;
void Update(const int& x, int y, int d) {
    PII p = make_pair(x,y);
    while (y) {
        if (d) mp[y].insert(p);
        else mp[y].erase(p);
        y -= (y&(-y));
    }
}
PII Find(const int& x, int y) {
    PII p = make_pair(x,y);
    PII ans = make_pair(INF, INF);
    while (y <= cnt) {
        it = mp[y].lower_bound(p);
        if (it != mp[y].end()) {
            if (it->first < ans.first) {
                ans = *it;
            }
            else if (it->first == ans.first &&
                     it->second < ans.second) {
                ans = *it;
            }
        }
        y += (y&(-y));
    }
    return ans;
}
int main() {
    int n, yy;
    char s[7];
    PII ans;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%s%d%d", s, &x[i], &y[i]);
        ch[i] = s[0], Y[i] = y[i];
    }
    sort(Y, Y + n);
    cnt = unique(Y, Y + n) - Y;
    for (int i = 0; i < n; ++i) {
        yy = lower_bound(Y, Y + cnt, y[i]) - Y;
        if (ch[i] == 'a') Update(x[i], yy, 1);
        else if (ch[i] == 'r') Update(x[i], yy, 0);
        else {
            ans = Find(x[i]+1, yy+1);
            if (ans.first == INF) puts("-1");
            else printf("%d %d\n", ans.first, Y[ans.second]);
        }
    }
    return 0;
}