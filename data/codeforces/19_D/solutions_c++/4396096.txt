#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<set>
#include <utility>
#include<algorithm>
using namespace std;
inline int lowbit(int x){
    return x & -x;
}

#define ALL(v) (v).begin(),(v).end()

const int N = 200000 + 10;
int x[N],y[N],n;
char type[N];
set< pair<int,int> > sets[N];
const int inf = 0x7fffffff;
int main(){
    scanf("%d",&n);
    vector<int>values;
    char buffer[7];
    for(int i = 0; i < n; i++){
        scanf("%s%d%d",buffer,x+i,y+i);
        type[i] = *buffer;
        values.push_back(y[i]);
    }
    sort(ALL(values));
    values.erase(unique(ALL(values)),values.end());
    for(int i = 0; i < n; ++i){
        pair<int,int>p(x[i],y[i]);
        if(type[i] == 'f'){
            pair<int,int>q(inf,inf);
            for(int k = upper_bound(ALL(values),y[i]) - values.begin() + 1; k <= values.size(); k += lowbit(k)){
                set<pair<int,int> >::iterator iter = sets[k].upper_bound(make_pair(x[i],inf));
                if(iter != sets[k].end()){
                    q = min(q,*iter);
                }
            }
            if(q.first == inf) puts("-1");
            else printf("%d %d\n",q.first,q.second);
        }else{
            for(int k = lower_bound(ALL(values),y[i]) - values.begin()+1; k >= 1; k -= lowbit(k)){
                if(type[i] =='a') sets[k].insert(p);
                else sets[k].erase(p);
            }

        }
    }
    return 0;
}
