#include <stdio.h>
#include <algorithm>
#include <set>
using namespace std;
#define N 200050
set<int> st[N];
set<int>::iterator it;
int X[N], cnt, Max[N*3] ,id[N], L, valx, valy, x[N], y[N];
char ch[N];
void Build(int rt, int l, int r) {
    if (l == r) id[l] = rt;
    else{
        int m = (l + r) >> 1;
        Build(rt<<1, l, m);
        Build(rt<<1|1, m + 1, r);
    }
}
void Update(int rt, const int& y, int d) {
    if (rt == 0) return ;
    if (d == 1) st[rt].insert(y);
    else st[rt].erase(y);
    d = rt, rt = id[rt];
    if (st[d].empty()) Max[rt] = 0;
    else Max[rt] = *st[d].rbegin();
    while (rt > 1) {
        rt >>= 1;
        Max[rt] = max(Max[rt<<1], Max[rt<<1|1]);
    }
}
void Find(int rt, int l, int r) {
    if (Max[rt] <= valy) return ;
    if (L < l && l == r) {
        valx = l, valy = *st[l].upper_bound(valy);
        return ;
    }
    int m = (l + r) >> 1;
    if (L < m) Find(rt<<1, l, m);
    if (valx == -1) Find(rt<<1|1, m+1, r);
}
int main() {
    int n, xx;
    char s[7];
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%s%d%d", s, &x[i], &y[i]);
        ch[i] = s[0], X[i] = x[i];
    }
    sort(X, X + n);
    cnt = unique(X, X + n) - X;
    Build(1, 1, cnt);
    for (int i = 0; i < n; ++i) {
        xx = lower_bound(X, X + cnt, x[i]) - X;
        if (ch[i] == 'a') Update(xx, y[i], 1);
        else if (ch[i] == 'r') Update(xx, y[i], -1);
        else {
            valx = -1, valy = y[i], L = xx;
            Find(1, 1, cnt);
            if (valx == -1) puts("-1");
            else printf("%d %d\n", X[valx], valy);
        }
    }
    return 0;
}