#include <cstdio>
#include <cstring>
#include <algorithm>
#include <set>
using namespace std;

typedef pair<int, int> PII;

const int N = 200010;
const int INF = 1 << 30;

int valy[N], cnt_y;
int op[N], x[N], y[N];
set<PII> st[N];

#define lowbit(x) ((x)&(-x))

void add(int id, PII p, int sz) {
	for (int i = id; i <= sz; i += lowbit(i)) st[i].insert(p);
}
void remove(int id, PII p, int sz) {
	for (int i = id; i <= sz; i += lowbit(i)) st[i].erase(p);
}
PII query(int id, PII p) {
	PII ans = make_pair(INF, INF);
	for (int i = id; i; i -= lowbit(i)) {
		set<PII>::iterator it = st[i].lower_bound(p);
		if (it != st[i].end() && *it < ans) ans = *it;
	}
	return ans;
}

int main() {
	int n;
	scanf("%d", &n);
	cnt_y = 0;
	for (int i = 0; i < n; i++) {
		char str[10];
		scanf("%s%d%d", str, &x[i], &y[i]);
		valy[cnt_y++] = -y[i];
		if (str[0] == 'a') op[i] = 0;
		else if (str[0] == 'r') op[i] = 1;
		else op[i] = 3;
	}
	sort(valy, valy + cnt_y);
	cnt_y = unique(valy, valy + cnt_y) - valy;
	for (int i = 0; i < n; i++) {
		if (op[i] == 0) {
			int id = upper_bound(valy, valy + cnt_y, -y[i]) - valy + 1;
			add(id, make_pair(x[i], y[i]), cnt_y);
		} else if (op[i] == 1) {
			int id = upper_bound(valy, valy + cnt_y, -y[i]) - valy + 1;
			remove(id, make_pair(x[i], y[i]), cnt_y);
		} else {
			int id = lower_bound(valy, valy + cnt_y, -y[i]) - valy + 1;
			PII ans = query(id, make_pair(x[i], INF));
			if (ans.first == INF) printf("-1\n");
			else printf("%d %d\n", ans.first, ans.second);
		}
	}
	return 0;
}
