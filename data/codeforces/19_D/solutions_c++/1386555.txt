#include<cstdio>
#include<algorithm>
using namespace std;
struct node
{
    int x,y;
    bool friend operator<(node a,node b)
    {
        if(a.x!=b.x)return a.x<b.x;
        return a.y<b.y;
    }
}arr[200005],x[200005];
int op[200005],mx[200005*4];
int n;
char s[10];
void update(int u,int l,int r,int tag,int v)
{
    if(l==r)
    {
        mx[u]=v;
        return;
    }
    int mid=(l+r)/2;
    if(tag<=mid)update(u*2,l,mid,tag,v);
    else update(u*2+1,mid+1,r,tag,v);
    mx[u]=max(mx[u*2],mx[u*2+1]);
}
int query(int u,int l,int r,int xx,int yy)
{
    if(x[r].x<=xx||mx[u]<=yy)return -1;
    if(l==r)return l;
    int mid=(l+r)/2;
    int ans=query(u*2,l,mid,xx,yy);
    if(ans==-1)ans=query(u*2+1,mid+1,r,xx,yy);
    return ans;
}
int main()
{
   // freopen("c://111.txt","r",stdin);
    scanf("%d",&n);
    int i;
    for(i=0;i<n;i++)
    {
        scanf("%s%d%d",s,&arr[i].x,&arr[i].y);
        if(s[0]=='a')op[i]=1;
        else if(s[0]=='r')op[i]=0;
        else op[i]=2;
        x[i]=arr[i];
    }
    sort(x,x+n);
    for(i=0;i<n;i++)
    {

        if(op[i]==2)
        {
            int temp=query(1,0,n-1,arr[i].x,arr[i].y);
            if(temp==-1)puts("-1");
            else printf("%d %d\n",x[temp].x,x[temp].y);
        }
        else
        {
            int tag=lower_bound(x,x+n,arr[i])-x;
            update(1,0,n-1,tag,arr[i].y*op[i]);
        }
    }
    return 0;
}
