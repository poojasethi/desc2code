#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
#define maxn 200005
using namespace std;
int flag[maxn],tree[maxn<<3];
struct Node
{
	int x,y;
	bool operator < (const Node &a)const
	{
		if(x!=a.x) return x<a.x;
		return y<a.y;
	}
}a[maxn],x[maxn],ans,null;
void pushup(int rt)
{
    tree[rt]=max(tree[rt<<1],tree[rt<<1|1]);
}
void update(bool f,int X,int p,int l,int r,int rt)
{
	if(l==r)
	{
	    if(f) tree[rt]=p;
        else tree[rt]=-1;
        return;
    }
	int mid=(l+r)>>1;
	if(X<=mid) update(f,X,p,lson);
	else update(f,X,p,rson);
	pushup(rt);
}
void query(Node p,int l,int r,int rt)
{
	if(x[r].x<=p.x||tree[rt]<=p.y) return;
	if(l==r) ans=x[l];
	int mid=(l+r)>>1;
	query(p,lson);
	if(ans.x==-1) query(p,rson);
}
bool cmp(Node a,Node b)
{
    if(a.x!=b.x)
        return a.x<b.x;
    return a.y<b.y;
}
int main()
{
	memset(tree,-1,sizeof(tree));
	int n,i,m=0;
	null.x=null.y=-1;
	char tr[10];
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%s%d%d",tr,&a[i].x,&a[i].y);
		if(tr[0]=='a') {x[m++]=a[i];flag[i]=1;}
		else if(tr[0]=='f') {x[m++]=a[i];flag[i]=2;}
		else flag[i]=0;
	}
	sort(x,x+m,cmp);
    for(i=0;i<n;i++)
	{
		int now=lower_bound(x,x+m,a[i])-x;
		if(flag[i]<2) update(flag[i],now,a[i].y,0,m-1,1);
		else
		{
			ans=null;
			query(a[i],0,m-1,1);
			if(ans.x==-1) puts("-1");
			else printf("%d %d\n",ans.x,ans.y);
		}
	}
	return 0;
}

 		 		  			  	 			 		 	 		