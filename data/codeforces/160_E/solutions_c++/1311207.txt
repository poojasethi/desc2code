#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define rep(i,n) for(int i = 0; i < n; i++)
const int MAXn=1e5+10;
struct Inter
{
	int l,r,t,i;
	static bool byT(const Inter& i1, const Inter& i2) { return i1.t<i2.t; }
	static bool byL(const Inter& i1, const Inter& i2) { return i1.l<i2.l; }
};
Inter cit[MAXn], bus[MAXn];
int sol[MAXn], ans[MAXn];
int n, m;

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> m;
	rep(i,n) cin >> bus[i].l >> bus[i].r >> bus[i].t;
	rep(i,n) bus[i].i=i;
	rep(i,m) cin >> cit[i].l >> cit[i].r >> cit[i].t;
	rep(i,m) cit[i].i=i,sol[i]=-1;
	sort(bus,bus+n,Inter::byT);
	sort(cit,cit+m,Inter::byL);
	int sq=sqrt(n)+1;
	for(int i = n-1; i >= 0; i-=sq)
	{
		vector<Inter> v; v.clear();
		int b=max(i-sq+1,0);
		for(int j = b; j <= i; j++)
			v.push_back(bus[j]);
		sort(v.begin(),v.end(),Inter::byL);
		int k=0,mx=0;
		for(int j = 0; j < m; j++)
		{
			while(k<(int)v.size()&&v[k].l<=cit[j].l)
				mx=max(mx,v[k++].r);
			if(mx>=cit[j].r && bus[b].t>=cit[j].t)
				sol[j]=b;
		}
	}
	rep(i,m)
	{
		ans[cit[i].i]=-2;
		for(int j = sol[i]; sol[i]!=-1 && j < sol[i]+sq && j < n; j++)
			if(bus[j].l<=cit[i].l&&cit[i].r<=bus[j].r)
			{
				ans[cit[i].i]=bus[j].i;
				break;
			}
		int l=lower_bound(bus,bus+n,cit[i],Inter::byT)-bus;
		for(int j = l; j < l+sq && j < n; j++)
			if(bus[j].l<=cit[i].l&&cit[i].r<=bus[j].r)
			{
				ans[cit[i].i]=bus[j].i;
				break;
			}
	}
	rep(i,m) cout << ans[i]+1 << " ";
	cout << endl;
	return 0;
}
