#include<iostream>
#include<algorithm>
#include<map>
using namespace std;
typedef pair<int,int> PII;

#define P(x) (lower_bound(s,s+head,x)-s)
#define F first
#define S second

const int INF = 1<<30;
const int MAX = 200*1000+10;

struct F{ int s,e,t,Ind; bool is_b; };

bool cmpe(F a,F b) { return ( a.e != b.e ? a.e > b.e : a.is_b > b.is_b ); }

F bp[MAX+10];
int s[MAX+10];
int out[MAX+10];
int head;
int n,m;

map<int,int> c[MAX+10];

void insert(int x,PII a)
{
	for(; x<=head; x += x & -x )
		c[x][a.F] = a.S;
}

int find(int x,int t)
{
	PII ret = PII(INF,-1);
	for(; x>0; x -= x & -x )
	{
		map<int,int>::iterator tmp = (c[x].lower_bound( t ));
		if( tmp != c[x].end() )
			if( tmp->F < ret.F )
				ret = *tmp;
	}
	return ret.S;
}

int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for(int i=0; i<n; i++)
		cin >> bp[i].s >> bp[i].e >> bp[i].t , bp[i].Ind = i+1 , bp[i].is_b = true , s[head++] = bp[i].s;
	for(int i=0; i<m; i++)
		cin >> bp[n+i].s >> bp[n+i].e >> bp[n+i].t , bp[n+i].Ind = i , s[head++] = bp[n+i].s;
	
	s[head++] = 0;
	sort( bp , bp+n+m , cmpe );
	sort( s , s+head );
	head = unique( s , s+head ) - s;
	
	for(int i=0; i<n+m; i++)
	{
		if( bp[i].is_b )
			insert( P(bp[i].s) , PII( bp[i].t , bp[i].Ind ) );
		else
			out[bp[i].Ind] = find( P(bp[i].s) , bp[i].t );
	}
	
	for(int i=0; i<m; i++)
		cout << out[i] << " ";
	cout << endl;
	return 0;
}