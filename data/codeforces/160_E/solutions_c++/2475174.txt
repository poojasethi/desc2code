#include <algorithm>
#include <stdio.h>
#define  maxn      100002
using    namespace std;

struct bc
{
  int l,r,t,ind;
};

bool comp2(bc a , bc b)
{
  if(a.l!=b.l) return a.l<b.l;
  return a.ind<b.ind;
}

bool comp1(bc a , bc b)
{
  return a.t<b.t;
}

int n,m;
int ans[maxn];
int pos[maxn];
int tree[4*maxn];
bc ar[maxn];
bc ar2[maxn*2];

int Query(int cx , int cy , int q , int ps)
{
  if(ar[tree[ps]].r<ar2[q].r || ar[cy].t<ar2[q].t)  return 0;
  if(cx==cy)                                              return tree[ps];
  int mid=(cx+cy)>>1;
  int x=Query(cx,mid,q,ps*2);
  if(x)                                                   return x;
  return Query(mid+1,cy,q,ps*2+1);
}

int Update(int cx , int cy , int q , int ps)
{
  if(q<cx || q>cy)                    return tree[ps];
  if(cx==cy)                          return tree[ps]=q;
  int mid=(cx+cy)>>1;
  int lx=Update(cx,mid,q,ps*2);
  int rx=Update(mid+1,cy,q,ps*2+1);
  if(ar[lx].r>ar[rx].r)               return tree[ps]=lx;
  return tree[ps]=rx;
}

int main()
{
  scanf("%d%d",&n,&m);
  for(int i=1 ; i<=n+m ; i++)
  {
    scanf("%d%d%d",&ar2[i].l,&ar2[i].r,&ar2[i].t);
    ar2[i].ind=i;
    if(i<=n) ar[i]=ar2[i];
  }
  sort(ar+1,ar+n+1,comp1);
  sort(ar2+1,ar2+n+m+1,comp2);
  for(int i=1 ; i<=n ; i++)
    pos[ar[i].ind]=i;
  for(int i=1 ; i<=n+m ; i++)
  {
    if(ar2[i].ind<=n)
      Update(1,n,pos[ar2[i].ind],1);
    else
      ans[ar2[i].ind-n]=Query(1,n,i,1);
  }
  for(int i=1 ; i<=m ; i++)
  {
    if(!ans[i]) printf("-1 ");
    else        printf("%d ",ar[ans[i]].ind);
  }
  printf("\n");
  return 0;
}
