#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
using namespace std;

class Data {
	public:
		int type, l, r, t, id;
		Data(int _typ=0, int _l=0,int _r=0,int _t=0, int _id=0)
		{ type=_typ; l=_l; r=_r; t=_t; id=_id; }
		bool operator<(const Data &d) const {
			return l<d.l || (l==d.l && (type==0 && d.type==1));
		}
};
map<int, int> s;
set<pair<int, int> > v[200005];
set<pair<int, int> >::iterator its;
vector<Data> a;
int ans[100005];
int main(void) {
	int n, m;
	scanf("%d%d", &n, &m);
	for(int i=0;i<n;i++) {
		int l, r, t;
		scanf("%d%d%d", &l, &r, &t);
		a.push_back(Data(0, l, r, t, i+1));
		s[r]=0;
	}
	for(int i=0;i<m;i++) {
		int l, r, t;
		scanf("%d%d%d", &l, &r, &t);
		a.push_back(Data(1, l, r, t, i));
	}
	int c=0;
	for(map<int, int>::iterator it=s.begin();it!=s.end();it++)
		it->second = ++c;
	sort(a.begin(), a.end());
	for(int i=0;i<(int)a.size();i++) {
		if(a[i].type == 0) {
			int p = s[a[i].r];
			//printf("p=%d [%d,%d]\n", p, a[i].t, a[i].id);
			while(p>0) {
				v[p].insert(make_pair(a[i].t, a[i].id));
				p -= p&-p;
			}
		} else {
			map<int,int>::iterator mit = s.lower_bound(a[i].r);
			int p=1e9+1;
			if(mit != s.end()) { p=mit->second; }
			else {ans[a[i].id]=-1;continue; }
			//printf("q=%d [%d,%d]\n", p, a[i].t, a[i].id);
			pair<int, int> ret(1e9+1, -1);
			while(p<=c) {
				its = v[p].lower_bound(make_pair(a[i].t, 0));
				if(its != v[p].end()) ret=min(ret, *its);
				p += p&-p;
			}
			ans[a[i].id] = ret.second;
		}
	}
	for(int i=0;i<m;i++)
		printf("%d ", ans[i]);
	puts("");
	return 0;
}

