#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <sstream>
using namespace std;

const int N = 200002;

struct DS{
    int l, r, t, id;
    DS(){};
    bool operator < (const DS other)const{
        return l == other.l ? id < other.id : l < other.l;
    }
}a[N];

struct Node{
    int id, rmax;
}IT[N*4];

int n, m, u;
int res[100002], time[N];

void Update(int x, int l, int r, int val, int id)
{
    if (l > r) return;
    if (l == r){
        IT[x].id = id;
        IT[x].rmax = val;
        return;
    }
    int mid = (l + r) >> 1;
    if (mid >= u) Update(x+x, l, mid, val, id);
    else Update(x+x+1, mid+1, r, val, id);
    IT[x].rmax = max(IT[x+x].rmax, IT[x+x+1].rmax);
}

int Get(int x, int l, int r, int val)
{
    if (IT[x].rmax < val || l > r) return -1;
    if (l == r) return IT[x].id;
    int ret = -1;
    int mid = (l + r) >> 1;
    if (mid >= u){
        ret = Get(x+x, l, mid, val);
        if (ret > 0) return ret; //can tim t[i] nho nhat, nhanh trai nho hon => out luon
    }
    if (mid < m+n) ret = Get(x+x+1, mid+1, r, val);
    return ret;
}

int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    scanf("%d %d", &n, &m);
    for(int i = 1; i <= n+m; i++){
        scanf("%d %d %d", &a[i].l, &a[i].r, &a[i].t);
        a[i].id = i;
        time[i] = a[i].t;
    }
    sort(a+1, a+n+m+1);
    sort(time+1, time+n+m+1);
    for(int i = 1; i <= n+m; i++){
        u = lower_bound(time+1, time+n+m+1, a[i].t) - time;
        if (a[i].id <= n) Update(1, 1, m+n, a[i].r, a[i].id); //bus
        else res[a[i].id-n] = Get(1, 1, m+n, a[i].r); //passenger
    }
    for(int i = 1; i <= m; i++) printf("%d ", res[i]);

    return 0;
}