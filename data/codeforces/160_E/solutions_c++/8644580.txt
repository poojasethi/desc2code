#include <map>
#include <set>
#include <list>
#include <cmath>
#include <queue>
#include <stack>
#include <cstdio>
#include <vector>
#include <string>
#include <cctype>
#include <complex>
#include <cassert>
#include <utility>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#define read freopen("in.txt","r",stdin)
#define write freopen("out.txt","w",stdout)
using namespace std;
int n,m;
const int maxn = 200010;
int tt[maxn],ans[maxn>>1];
int ind[maxn<<2],mv[maxn<<2];

struct bus
{
    int l,r,ti,id;
    bool operator<(const bus a) const
    {
        return (l<a.l||(l==a.l&&id<a.id));
    }
} bs[maxn];

int query(int p,int v,int l,int r,int rt)
{
    if(mv[rt]<v)
        return -1;
    if(l==r)
        return ind[rt];
    int m = (l+r)>>1;
    if(p<=m)
    {
        int st = query(p,v,l,m,rt<<1);
        if(st>0)
            return st;
    }
    return query(p,v,m+1,r,rt<<1|1);
}

void update(int p,int v,int w,int l,int r,int rt)
{
    if(l==r)
    {
        mv[rt] = v;
        ind[rt] = w;
        return ;
    }
    int m = (l+r)>>1;
    if(p<=m)
        update(p,v,w,l,m,rt<<1);
    else
        update(p,v,w,m+1,r,rt<<1|1);
    mv[rt] = max(mv[rt<<1],mv[rt<<1|1]);
}

int main()
{
    //read;
    while(~scanf("%d%d",&n,&m))
    {
        m += n;
        for(int i=1; i<=m; ++i)
        {
            scanf("%d%d%d",&bs[i].l,&bs[i].r,&bs[i].ti);
            bs[i].id = i;
            tt[i] = bs[i].ti;
        }
        sort(bs+1,bs+m+1);
        sort(tt+1,tt+m+1);
        int tot = unique(tt+1,tt+m+1) - tt - 1;
        for(int i=1; i<=m; i++)
        {
            int p = lower_bound(tt+1,tt+tot+1,bs[i].ti) - tt;
            if(bs[i].id<=n)
                update(p,bs[i].r,bs[i].id,1,tot,1);
            else
                ans[bs[i].id-n] = query(p,bs[i].r,1,tot,1);
        }
        for(int i=1; i<=m-n; i++)
        {
            printf("%d\n",ans[i]);
        }
    }
}

 	    	 		  	       				 	 		