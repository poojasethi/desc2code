#include <cstdio>
#include <climits>
#include <cstring>
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
using namespace std;

#define traverse(v,it) for (typeof(v.begin()) it=v.begin();it!=v.end();it++)

struct bus {
	int s; int f; int t; int id;
};
bool operator<(bus b1, bus b2) {
	return b1.s<b2.s;
}

struct person {
	int l; int r; int b; int id; int bus;
};
bool operator<(person p1, person p2) {
	return p1.l<p2.l;
}
bool cmpId(person p1, person p2) {
	return p1.id<p2.id;
}

int n,m;
vector<bus> buses;
vector<person> people;

set<int> bit[200001];
set<int>::iterator it;

int get(int r, int b) {
	int f=INT_MAX;
	for (int a=r;a!=0;a-=(a&-a)) {
		it = bit[a].lower_bound(b);
		if (it!=bit[a].end()) f=min(f,*it);
	}
	return f;
}

int put(int f, int t) {
	for (int a=f;a<=200000;a+=(a&-a)) {
		bit[a].insert(t);
	}
}

map<int,int> t2b;
set<int> times;
map<int,int> t2t;

int main() {
	scanf("%d %d",&n,&m);
	for (int i=0;i<n;i++) {
		bus b; b.id=i;
		scanf("%d %d %d",&b.s,&b.f,&b.t);
		t2b[b.t]=b.id;
		buses.push_back(b);
		times.insert(b.f);
	}
	for (int i=0;i<m;i++) {
		person p; p.id=i;
		scanf("%d %d %d",&p.l,&p.r,&p.b);
		people.push_back(p);
		times.insert(p.r);
	}
	int x=1;
	traverse(times,it) {
		t2t[*it]=x;
		x++;
	}
	sort(buses.begin(),buses.end());
	sort(people.begin(),people.end());
	int bi=0;
	for (int i=0;i<m;i++) {
		while (bi<buses.size() && buses[bi].s<=people[i].l) {
			put(200001-t2t[buses[bi].f], buses[bi].t);
			bi++;
		}
		int res = get(200001-t2t[people[i].r],people[i].b);
		if (res==INT_MAX) people[i].bus=-1;
		else people[i].bus=t2b[res]+1;
	}
	sort(people.begin(),people.end(),cmpId);
	for (int i=0;i<m;i++) {
		printf("%d ",people[i].bus);
	}
	printf("\n");
    return 0;
}
