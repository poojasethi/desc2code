#include<iostream>
using namespace std;
#include<stdio.h>
#include<set>
#include<algorithm>
#define N 100050
#define lowbit(i) ((i)&(-i))
int num,n,m,len;
int ans[N];
struct node
{
    int l,r,t;
    int id;
    node(){}
    node(int l,int r,int t,int id):l(l),r(r),id(id),t(t){}
    bool operator < (const node b) const
    {
        if(r!=b.r) return r>b.r;
        return id<b.id;
    }
}no[N*2];
int l[N*2];
set < pair<int,int> > st[N*2];
inline int get(int val)
{
    return lower_bound(l,l+len,val)-l+1;
}
inline void update(int i,pair<int,int> p)
{
    while(i<=len)
    {
        st[i].insert(p);
        i+=lowbit(i);
    }
}
inline int query(int i,int val)
{
    pair<int,int> ans=make_pair(1000000001,-1);
    set < pair<int,int> > ::iterator it;
    while(i)
    {
        it=st[i].lower_bound(make_pair(val,-1));
        if(it!=st[i].end())
            ans=min(ans,*it);
        i-=lowbit(i);
    }
    return ans.second;
}
int main()
{
    //freopen("1.in","r",stdin);
    scanf("%d%d",&n,&m);
    {
        int s,f,t;
        for(int i=0;i<n;i++)
        {
            scanf("%d%d%d",&s,&f,&t);
            no[i]=node(s,f,t,i);
            l[i]=s;
        }
        num=n;
        for(int i=1;i<=m;i++)
        {
            scanf("%d%d%d",&s,&f,&t);
            l[num]=s;
            no[num]=node(s,f,t,num++);
        }
        sort(no,no+num);
        sort(l,l+num);
        len=unique(l,l+num)-l;
       // for(int i=0;i<=len;i++) st[i].clear();
        for(int i=0;i<num;i++)
        {
//            cout<<get(no[i].l)<<endl;
            if(no[i].id>=n)
            {
                ans[no[i].id-n]=query(get(no[i].l),no[i].t);
            }
            else
                update(get(no[i].l),make_pair(no[i].t,no[i].id+1));
        }
        for(int i=0;i<m;i++)
            printf("%d ",ans[i]);
        puts("");
    }
}
