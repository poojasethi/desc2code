#include<map>
#include<set>
#include<cstdio>
#include<vector>
#include<algorithm>

#define rep(i,n) for(int i=0;i<(n);i++)

using namespace std;

const int INF=(1<<31)-1;

struct event{
	int l,r,t,id,type; // type = 0 : bus, 1 : person
	bool operator<(const event &e)const{
		if(r!=e.r) return r>e.r;
		if(l!=e.l) return l<e.l;
		if(t!=e.t) return t>e.t;
		if(type!=e.type) return type<e.type;
		return id<e.id;
	}
};

// segtree
int n_data;
set<int> data[1<<20]; // sequence of bus arrival time

void init(int n){
	for(n_data=1;n_data<n;n_data*=2);
}

void update(int x,int elem){
	x=x+n_data-1;
	while(1){
		data[x].insert(elem);
		if(x==0) break;
		x=(x-1)/2;
	}
}

// [l, r], [a, b]
int query(int l,int r,int a,int b,int u,int elem){
	if(l<=a && b<=r){
		set<int>::iterator it;
		it=data[u].lower_bound(elem);
		return it==data[u].end()?INF:*it;
	}

	int c=(a+b)/2;
	int res=INF;
	if( a <=r && l<=c) res=min(res,query(l,r, a ,c,2*u+1,elem));
	if(c+1<=r && l<=b) res=min(res,query(l,r,c+1,b,2*u+2,elem));
	return res;
}

// [l, r]
int query(int l,int r,int elem){
	return query(l,r,0,n_data-1,0,elem);
}

int main(){
	int n,m; scanf("%d%d",&n,&m);
	static event E[200000];
	map<int,int> f; // f : bus arrival time -> bus id
	vector<int> X;
	rep(i,n+m){
		int l,r,t; scanf("%d%d%d",&l,&r,&t);
		E[i]=(event){l,r,t,i<n?i:i-n,i<n?0:1};
		if(i<n) f[t]=i;
		X.push_back(l);
		X.push_back(r);
	}
	sort(X.begin(),X.end());
	X.erase(unique(X.begin(),X.end()),X.end());

	rep(i,n+m){
		E[i].l=lower_bound(X.begin(),X.end(),E[i].l)-X.begin();
		E[i].r=lower_bound(X.begin(),X.end(),E[i].r)-X.begin();
	}

	init(X.size());
	sort(E,E+n+m);

	static int ans[100000];
	rep(i,m) ans[i]=-1;
	rep(i,n+m){
		int l=E[i].l,t=E[i].t,id=E[i].id;
		if(E[i].type==0){ // bus
			update(l,t);
		}
		else{ // person
			int res=query(0,l,t);
			if(res<INF) ans[id]=f[res]+1;
		}
	}

	rep(i,m) printf("%d%c",ans[i],i<m-1?' ':'\n');

	return 0;
}
