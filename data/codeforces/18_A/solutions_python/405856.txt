import sys
import Queue
from sets import Set

class pythonin:
    _data = []
    _cur = 0
    def __init__(self):
        while True:
            try: sm = raw_input().split(" ") 
            except EOFError: break
            for x in sm :
                if x != "" and x != "\t" :
                    self._data.append(x)
                
    def eof(self) : 
        return self._cur == len(self._data)

    def nextToken(self) :
        self._cur += 1
        return self._data[self._cur - 1]
    
    def nextInt(self) :
        return (int)(self.nextToken())
    
    def nextFloat(self) :
        return (float)(self.nextToken())
    
#sys.stdin = open("input.txt", "r")
#sys.stdout = open("output.txt", "w")

pin = pythonin()

def isTriangle(T):
    s = Set()
    for p in T :
        s.add(p)
    return len(s) == 3

def difVect(a, b) :
    return (a[0] - b[0], a[1] - b[1])

def addVect(a, b) :
    return (a[0] + b[0], a[1] + b[1])

def scalMul(a, b) :
    return a[0] * b[0] + a[1] * b[1]

def isRect(p1, p2, p3) :
    return scalMul(difVect(p2, p1), difVect(p2, p3)) == 0

def isRectTriangle(T) :
    return isTriangle(T) and (isRect(T[0], T[1], T[2]) or isRect(T[1], T[2], T[0]) or isRect(T[2], T[0], T[1]))

def isAlmostRectTriangle(T) :
    dxy = [(0, 1), (1, 0), (-1, 0), (0, -1)]
    res = False
    for i in xrange(0, 3) :
        for da in dxy :
            u = list(T)
            rx = addVect(T[i], da)
            u[i] = rx
            res = res or isRectTriangle(u)
            
    return res


T = [(pin.nextInt(), pin.nextInt()) for i in xrange(0, 3)]

if isRectTriangle(T) : print "RIGHT"
else :
    if isAlmostRectTriangle(T) : print "ALMOST"
    else:                        print "NEITHER"

#print ("Press any key to continue")
#raw_input() 