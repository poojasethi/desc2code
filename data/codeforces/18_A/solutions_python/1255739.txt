#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import sys
ifs = sys.stdin
ofs = sys.stdout

from itertools import cycle


RIGHT = 'RIGHT'
ALMOST = 'ALMOST'
NEITHER = 'NEITHER'


def det(a,b):
    return a[0]*b[1] - a[1]*b[0]


def colinear(a,b):
    return abs(det(a,b)) == 0


def dot_product(a,b):
    return a[0]*b[0] + a[1]*b[1]


def orthogonal(a,b):
    return dot_product(a,b) == 0


def move(p,v):
    return (p[0]+v[0],p[1]+v[1])


def vector(p1,p2):
    return (p2[0]-p1[0],p2[1]-p1[1])


def is_triangle(A,B,C):
    AB = vector(A,B)
    AC = vector(A,C)
    return not colinear(AB,AC)


def is_orthogonal_triangle(A,B,C):
    AB = vector(A,B)
    AC = vector(A,C)
    BC = vector(B,C)
    return orthogonal(AB,AC) or orthogonal(AB,BC) or orthogonal(BC,AC)


def solve(x1,y1,x2,y2,x3,y3):
    A = (x1,y1)
    B = (x2,y2)
    C = (x3,y3)
    
    if is_orthogonal_triangle(A, B, C):
        return RIGHT
    else:
        directions = [(1,0),(0,1),(-1,0),(0,-1)]
        points = [A,B,C]
        points_it = cycle(points)
        for _ in range(3):
            An = points_it.next()
            Bn = points_it.next()
            Cn = points_it.next()
            points_it.next()
            for v in directions:
                Amoved = move(An,v)
                if is_triangle(Amoved,Bn,Cn):
                    if is_orthogonal_triangle(Amoved, Bn, Cn):
                        return ALMOST
    return NEITHER


def numbers_from_line(d=' '):
    return [int(s) for s in ifs.readline().strip().split(d) if len(s.strip())>0]

x1,y1,x2,y2,x3,y3 = numbers_from_line()

a = solve(x1,y1,x2,y2,x3,y3)

ofs.write('%s\n' % a)
