#pragma comment(linker, "/STACK:102400000,102400000")
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <string.h>
#include <vector>
#include <map>
#include <queue>
#include <set>
#include <cmath>
#include <fstream>
#include <assert.h>
#include <complex>
using namespace std;
#define vi vector<int>
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define inf 1000000007
#define mod 1000000007
#define x first
#define y second
#define pi acos(-1.0)
#define DBG(x) cerr<<(#x)<<"="<<x<<"\n";
#define FOREACH(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)
#define ull unsigned long long
#define ll long long
#define N 100005

pii p[110];
int n,m,mx[305][305],v[305],val[305],le[110],dp[305];
inline int get_max(int l,int r){if(l>r)return -1;return mx[l][r];}
bool can[305][305];
int dfs(int l,int r){
    can[l][r]=1;
    for(int i=0;i<n;i++){
        if(p[i].x>r&&le[i]<=r){
            int t=p[i].x;
            for(;;){
                int nt=max(get_max(r+1,p[i].x-1),get_max(p[i].x+1,t));
                if(nt<=t)break;
                t=nt;
            }
            if(!can[l][t])dfs(l,t);
        }
    }
}
int main()
{
    //freopen("1.txt","w",stdout);
    int T,i,j,k,ca=0;
    scanf("%d",&n);
    for(i=0;i<n;i++){
        scanf("%d%d",&p[i].x,&p[i].y);
        v[m++]=p[i].x-p[i].y;
        v[m++]=p[i].x;
        v[m++]=p[i].x+p[i].y;
    }
    sort(p,p+n);
    sort(v,v+m);
    m=unique(v,v+m)-v;
    map<int,int>g;
    for(i=0;i<m;i++)g[v[i]]=i;
    for(i=0;i<n;i++){
        val[g[p[i].x]]=g[p[i].x+p[i].y];
        le[i]=g[p[i].x-p[i].y];
        p[i].x=g[p[i].x];
    }
    for(i=0;i<m;i++){
        int s=-1;
        for(j=i;j<m;j++){
            s=max(s,val[j]);
            mx[i][j]=s;
        }
    }
    for(i=0;i<m;i++){
        int t=i;
        for(;;){
            int nt=get_max(i,t);
            if(nt<=t)break;
            t=nt;
        }
        dfs(i,t);
    }
    for(i=0;i<m;i++){
        dp[i+1]=max(dp[i+1],dp[i]);
        for(j=i;j<m;j++)if(can[i][j]){
            dp[j+1]=max(dp[j+1],dp[i]+v[j]-v[i]);
        }
    }
    printf("%d\n",dp[m]);
    return 0;
}