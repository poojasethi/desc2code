#include<stdio.h>
#include<algorithm>
using namespace std;
int maxi,p,n,d[110][110][2],dap;
struct data
{
    int x,l;
    bool operator<(const data&r)const
    {
        return x<r.x;
    }
}a[110];
int main()
{
    int i,j,k,q;
    scanf("%d",&n);
    for(i=1;i<=n;i++) scanf("%d %d",&a[i].x,&a[i].l);
    sort(a+1,a+n+1);
    d[1][1][0]=d[1][1][1]=a[1].l; dap=a[1].l;
    for(i=2;i<=n;i++)
    {
        //left
        maxi=a[i].x; p=i; d[i][i][0]=a[i].l; q=0;
        for(j=i-1;j>=1;j--)
        {
            for(k=1;k<=j;k++)
            {
                if(a[k].x<=a[i].x-a[i].l)
                {
                    d[i][p][q]=max(d[i][p][q],d[j][k][0]+a[i].l+maxi-a[i].x);
                }
                else if(a[k].x<=a[i].x)
                {
                    d[i][p][q]=max(d[i][p][q],d[j][k][0]+a[i].x-a[k].x+maxi-a[i].x);
                }
                else d[i][k][0]=max(d[i][k][0],d[j][k][0]);

                if(a[k].x+a[k].l<=a[i].x-a[i].l)
                {
                    d[i][p][q]=max(d[i][p][q],d[j][k][1]+a[i].l+maxi-a[i].x);
                }
                else if(a[k].x+a[k].l<=a[i].x)
                {
                    d[i][p][q]=max(d[i][p][q],d[j][k][1]+a[i].x-a[k].x-a[k].l+maxi-a[i].x);
                }
                else d[i][k][1]=max(d[i][k][1],d[j][k][1]);
                dap=max(dap,d[i][p][q]);
            }
            if(maxi<a[j].x+a[j].l)
            {
                maxi=a[j].x+a[j].l;
                p=j; q=1;
            }
        }
        d[i][p][q]=max(d[i][p][q],maxi-(a[i].x-a[i].l));
        //right
        for(j=1;j<=i-1;j++)
        {
            if(a[j].x<=a[i].x+a[i].l) d[i][i][1]=max(d[i][i][1],d[i-1][j][0]+min(a[i].l,a[i].x+a[i].l-a[j].x));
            else d[i][j][1]=max(d[i][j][1],d[i-1][j][0]);
            if(a[j].x+a[j].l<=a[i].x+a[i].l) d[i][i][1]=max(d[i][i][1],d[i-1][j][1]+min(a[i].l,a[i].x+a[i].l-a[j].x-a[j].l));
            else d[i][j][1]=max(d[i][j][1],d[i-1][j][1]);
            dap=max(dap,d[i][i][1]);
        }
    }
    printf("%d",dap);
    return 0;
}
