#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <iostream>

using namespace std;

struct Light
{
	int x,len;
}pot[110]={{0,0}};
int N;
int F[110][110]={{0}};

bool cmp(struct Light a,struct Light b)
{return a.x<b.x;}

int getmin(int a,int b)
{
	if(a==-1 || b==-1) return a+b+1;
	return (pot[a].x-pot[a].len<pot[b].x-pot[b].len)?a:b;
}

int getmaxl(int l,int r)
{
	if(l>r) return -1;
	int ret=l;
	for(int i=l+1;i<=r;i++)
		ret=getmin(ret,i);
	return ret;
}

int getadd(int l,int r,int Mr)
{
	int ret=0;
	int Ml=getmaxl(l+1,r);
	if(Ml!=-1 && pot[Ml].x-pot[Ml].len<=min(Mr,pot[l].x))
		ret+=min(Mr,pot[l].x)-(pot[Ml].x-pot[Ml].len);
	Ml=pot[l].x+pot[l].len;
	if(pot[l].x<=min(Ml,Mr)) ret+=min(Ml,Mr)-pot[l].x;
	for(int i=r;i>l;i--)
	{
		if(pot[i].x<=Ml) break;
		if(Mr<=Ml) break;
		int ll=max(Ml,pot[i].x-pot[i].len),rr=min(pot[i].x,Mr);
		if(rr>=ll)
			ret+=rr-ll;
		Mr=min(pot[i].x-pot[i].len,Mr);
	}
	return ret;
}

int main()
{
	cin>>N;
	for(int i=1;i<=N;i++)
		scanf("%d%d",&pot[i].x,&pot[i].len);
	N++;
	pot[N].x=3e8,pot[N].len=0;
	sort(pot+1,pot+N+1,cmp);
	pot[0].x=-3e8;
	pot[0].len=0;
	for(int i=1;i<=N-1;i++)
		F[i][getmaxl(i+1,N)]=getadd(i,N,3e8);
	int Ans=0;
	for(int i=N-2;i>=0;i--)
	{
		for(int j=i+1;j<=N-1;j++)
		{
			for(int p=j+1;p<=N;p++)
			{
				int to=getmin(getmaxl(i+1,j-1),p);
				F[i][to]=max(F[i][to],F[j][p]+getadd(i,j-1,min(pot[p].x-pot[p].len,pot[j].x)));
			}
		}
		for(int j=i+1;j<=N;j++)
			Ans=max(Ans,F[i][j]);
	}
	cout<<Ans<<endl;
	return 0;
}
              