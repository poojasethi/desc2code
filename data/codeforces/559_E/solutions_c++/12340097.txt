#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<algorithm>
#define inf 0x3f3f3f3f
#define N 110
using namespace std;
int n;
struct node {
	int p,len,to,last;
	bool operator < (node const &ano) const {return p<ano.p;}
}A[N];
int f[N][N][2];
void MAX(int &a,int b) {if (b>a) a=b;}
 
int main()
{
//	freopen("path.in","r",stdin);
//	freopen("path.out","w",stdout);
	int t=0;
while (scanf("%d",&n)==1) {
	memset(f,0,sizeof(f));
	memset(A,0,sizeof(A));
	
	for (int i=1;i<=n;++i) scanf("%d%d",&A[i].p,&A[i].len);
	sort(A+1,A+n+1);
	A[0].p=A[0].to=A[0].last=-inf;
	int ans=0;
	
	for (int i=0;i<=n;++i) for (int j=0;j<=i;++j) for (int k=0;k<2;++k) {
		MAX(ans,f[i][j][k]);
		int at=A[j].p+A[j].len*k;
		int far=-1,jjj,kkk;
		for (int jj=i+1;jj<=n;++jj) for (int kk=0;kk<2;++kk) {
			int to=A[jj].p+A[jj].len*kk;			
			if (to>far) far=to,jjj=jj,kkk=kk;
			MAX(f[jj][jjj][kkk],f[i][j][k]+min(A[jj].len,to-at)+far-to); 
		}
	}
//	for (int i=1;i<=n;++i) {		
//		for (int j=0;j<i;++j) {
//			MAX(f[i][0],f[j][0]+min(A[i].len,A[i].p-A[j].p));
//			MAX(f[i][0],f[j][1]+min(A[i].len,A[i].p-A[j].to));
//			MAX(f[i][1],f[j][0]+A[i].len);
//			MAX(f[i][1],f[j][1]+min(A[i].len,A[i].to-A[j].to));
//		}
//		for (int j=i-1;j>=0;--j) if (A[j].to>A[i].p&&A[j].p>A[i].last) {
//			for (int k=0;k<j;++k) if (A[k].last<A[i].last) {
//				MAX(f[j][1],f[k][0]+A[j].to-max(A[k].p,A[i].last));
//			}
//			for (int k=0;k<j;++k) if (A[k].p<A[i].last) {
//				MAX(f[j][1],f[k][1]+A[j].to-max(A[k].to,A[i].last));
//			}
//		}
//		MAX(ans,f[i][0]);
//		MAX(ans,f[i][1]);
//	}
//	for (int i=1;i<=n;++i) {
//		MAX(ans,f[i][0]),MAX(ans,f[i][1]);
//		printf("%d %d\n",f[i][0],f[i][1]);
//	}
	printf("%d\n",ans);
//	printf("%d\n",f[3][1]);	
}

	return 0;
}
