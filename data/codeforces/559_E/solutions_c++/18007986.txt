#include <cstring>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>

#define x first
#define y second
#define mp std::make_pair
#define pii std::pair<int,int>

const int MAXN=100;

int n;
pii a[MAXN+10];

int X[MAXN*3+10],xt;
int get(int x)
{
	int l=1,r=xt;
	while (l<=r) {
		int mid=(l+r)>>1;
		if (X[mid]<x) l=mid+1;
		else if (X[mid]==x) return mid;
		else r=mid-1; }
	return -1;
}

#define Min(a,b) ((a)<(b)?(a):(b))
#define Max(a,b) ((a)>(b)?(a):(b))
#define relax(a,b) (a)=Max((b),(a)) 

#define ull long long

ull trans[MAXN+10][MAXN+10][MAXN*3+10];

ull dp[MAXN+10][MAXN*3+10];

void init()
{
	scanf("%d",&n);
	for (int i=1;i<=n;i++) {
		scanf("%d%d",&a[i].x,&a[i].y);
		X[++xt]=a[i].x-a[i].y; X[++xt]=a[i].x; X[++xt]=a[i].x+a[i].y; }
	std::sort(a+1,a+n+1);
	std::sort(X+1,X+xt+1); xt=std::unique(X+1,X+xt+1)-X-1;
	
	for (int l=1;l<=n;l++) {
		int li=get(a[l].x-a[l].y),mid=get(a[l].x),ri=get(a[l].x+a[l].y);
		for (int j=li;j<mid;j++) trans[l][l][j]=mid;
		for (int j=mid;j<=xt;j++) trans[l][l][j]=ri; }

	for (int l=1;l<=n;l++)
		for (int r=l+1;r<=n;r++) {
			int le=get(a[r].x-a[r].y),mid=get(a[r].x),re=get(a[r].x+a[r].y);
			for (int li=1;li<=xt;li++)
				for (int c=l;c<r;c++)
					if (trans[l][c][li]) {
						int ri=trans[l][c][li]; //[li,ri] & [le,mid]
						if (mid<li) { relax(trans[l][r][li],ri); relax(trans[l][r][le],mid); }
						else if (mid<ri) relax(trans[l][r][Min(li,le)],ri);
						else if (le<=ri) relax(trans[l][r][Min(li,le)],mid);
						else { relax(trans[l][r][li],ri); relax(trans[l][r][le],mid); }
						//[li,ri] & [mid,re]
						if (re<li) { relax(trans[l][r][li],ri); relax(trans[l][r][mid],re); }
						else if (re<ri) relax(trans[l][r][Min(li,mid)],ri);
						else if (mid<=ri) relax(trans[l][r][Min(li,mid)],re);
						else { relax(trans[l][r][li],ri); relax(trans[l][r][mid],re); } }
			for (int li=1;li<=xt;li++) trans[l][r][li]=Max(trans[l][r][li],trans[l][r][li-1]); }

	ull ans=0;
	for (int i=0;i<n;i++)
		for (int j=i+1;j<=n;j++) {
			ull MAX=0;
			for (int l=1;l<=xt;l++) {
				int r=trans[i+1][j][l]; MAX=Max(MAX,dp[i][l]);
				for (int k=l;k<=r;k++) {
					dp[j][k]=Max(dp[j][k],MAX+X[k]-X[l]);
					ans=Max(ans,dp[j][k]); } } }

	std::cout<<ans<<std::endl;
	return ;
}

int main()
{
	init();
	return 0;
}