#include <stdio.h>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cstring>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <iostream>
#include <algorithm>

#define REP(I,A,B) for (int I=(A),_END_=(B);I<=_END_;I++)
#define REPD(I,A,B) for (int I=(A),_END_=(B);I>=_END_;I--)
#define FOR(I,A,B) for (int I=(A),_END_=(B);I<_END_;I++)
#define GCH getchar()
#define PCH(X) putchar(X)
#define MS(X,Y) memset(X,Y,sizeof(X))
#define fr first
#define sc second
#define RI(X) scanf("%d",&X)
#define RII(X,Y) scanf("%d%d",&X,&Y)
#define RIII(X,Y,Z) scanf("%d%d%d",&X,&Y,&Z)
#define RL(X) X=Readll()
#define RLL(X,Y) RL(X),RL(Y)
#define RLLL(X,Y,Z) RL(X),RL(Y),RL(Z)
#define RS(X) scanf("%s",X)
#define RD(X) scanf("%lf",&X)
#define lch(p) ((p)+(p))
#define rch(p) ((p)+(p)+1)
#define lowbit(x) ((x)&(-(x)))
#define debug(...) fprintf(stderr,__VA_ARGS__)
#define pb(X) push_back(X)
#define mp(X,Y) make_pair(X,Y)

using namespace std;

typedef vector<int> vi;
typedef pair<int,int> poi;

inline long long Readll()
{
	long long ret=0;
	int f=1;
	char ch;
	do{
		ch=GCH;
		if (ch=='-') f=-1;
	}while (ch>=0 && ( ch<'0' || ch>'9' ));
	while (ch>='0' && ch<='9')
	{
		ret=ret*10+ch-'0';
		ch=GCH;
	}
	return ret*f;
}

void open()
{
	freopen("E.in","r",stdin);
	freopen("E.out","w",stdout);
}
void close()
{
	fclose(stdin);
	fclose(stdout);
}

const int maxn = 111;
const int inf = 0x3f3f3f3f;

struct node{
	int aim;
	int len;
}a[maxn];
int n;
int f[maxn][maxn][2];

bool cmp(node a,node b){
	return a.aim<b.aim;
}

void init()
{
	RI(n);
	REP(i,1,n) RII(a[i].aim,a[i].len);
}

void work()
{
	int ans=0;
	int mx,A,B,xxm;
	a[0].aim=-inf;
	REP(i,0,n)
	REP(j,0,i)
	REP(p,0,1)
	{
		ans=max(ans,f[i][j][p]);
		xxm=a[j].aim+p*a[j].len;
		mx=-inf;
		REP(k,i+1,n)
		REP(d,0,1)
		{
			int nxt=a[k].aim+d*a[k].len;
			if (nxt>mx) mx=nxt,A=k,B=d;
			f[k][A][B]=max(f[k][A][B],f[i][j][p]+min(a[k].len,nxt-xxm)+mx-nxt);
		}
	}
	printf("%d\n",ans);
}

int main()
{
	init();
	sort(a+1,a+1+n,cmp);
	work();
	close();
	return 0;
}

                                                                                                                                                                                                                 