#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 100 + 5;
const int M = 300 + 5;

int n;
ii a[N];
vector < int > vs;
int go[N][N][M], dp[N][M];
int ind1[N], ind2[N], ind3[N];

int main() {

	scanf("%d", &n);

	for(int i = 1; i <= n; i++) {
		scanf("%d %d", &a[i].first, &a[i].second);
		vs.push_back(a[i].first - a[i].second);
		vs.push_back(a[i].first);
		vs.push_back(a[i].first + a[i].second);
	}

	sort(vs.begin(), vs.end());
	vs.resize(unique(vs.begin(), vs.end()) - vs.begin());

	/*
	foreach(it, vs) {
		printf("%d ", *it);
	}

	puts("");
	*/

	sort(a + 1, a + n + 1);

	for(int i = 1; i <= n; i++) {
		ind1[i] = lower_bound(vs.begin(), vs.end(), a[i].first - a[i].second) - vs.begin() + 1;
		ind2[i] = lower_bound(vs.begin(), vs.end(), a[i].first) - vs.begin() + 1;
		ind3[i] = lower_bound(vs.begin(), vs.end(), a[i].first + a[i].second) - vs.begin();
		//printf("i = %d ind1 = %d ind2 = %d ind3 = %d\n", i, ind1[i], ind2[i], ind3[i]);
	}

	int m = vs.size() - 1;

	for(int i = 1; i <= n; i++) {
		for(int r = 1; r <= m; r++) {
			int l = r + 1;
			for(int j = i; j <= n; j++) {
				if(ind2[j] < l) {
					if(ind3[j] >= l - 1) {
						l = ind2[j];
					}
				}
				else {
					l = min(l, ind1[j]);
				}
				go[i][j][r] = l;
				//printf("go[%d][%d][%d] = %d\n", i, j, r, l);
			}
		}
	}

	int ans = 0;

	for(int i = 1; i <= n; i++) {
		for(int r = 1; r <= m; r++) {
			int end = vs[r];
			dp[i][r] = end - vs[go[1][i][r] - 1];
			for(int j = 1; j < i; j++) {
				for(int l = 1; l < r; l++) {
					if(go[j + 1][i][r] > l) {
						int newVal = dp[j][l] + end - vs[go[j + 1][i][r] - 1];
						if(newVal > dp[i][r]) {
							dp[i][r] = newVal;
						}
					}
				}
			}
			//printf("dp[%d][%d] = %d\n", i, r, dp[i][r]);
			ans = max(ans, dp[i][r]);
		}
	}

	printf("%d\n", ans);

	return 0;

}
