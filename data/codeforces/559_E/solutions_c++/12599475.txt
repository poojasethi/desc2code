// In the name of Allah

#include <bits/stdc++.h>
using namespace std;

#define dbg(x) cerr << #x << " = " << (x) << endl;
#define FOR(i,a,b) for (int i = (a); i < (b); i ++)
#define rep(i,n) for (int i = 0; i < (n); i ++)
#define repd(i,n) for (int i = (n); i >= 0; i --)
#define PI 3.14159265358979323846
#define pb push_back
#define mp make_pair
#define X first
#define Y second

typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;

int n, m;
const int max_n = 100;
int a [max_n], l [max_n];
int dp [max_n][3*max_n+1];
int Map [3*max_n+1];
const int inf = 1e9;

int find_in_map (const int &x)
{
	return lower_bound (Map, Map+m, x) - Map;
}

int find (const int k, const int x)
{
	if ( k == n )
		return 0;
	const int id_x = find_in_map (x);
	if ( dp [k][id_x] != -1 )
		return dp [k][id_x];
	{
		dp [k][id_x] = 0;
		int L = x;
		FOR (i, k, n)
			if ( a[i]+l[i] > L )
			{
				dp [k][id_x] += a[i]+l[i] - max (a[i], L); 
				L = a[i]+l[i];
			}
	}
	FOR (i, k, n)
	{
		int sum = 0;
		sum += min (l[i], a[i]-x);
		int new_x = a[i];
		int L = x, R = a[i]-l[i];
		int j;
		for (j = k; j < i; j ++)
		{
			if ( L < R && a[j]+l[j] >= L && a[j] < R )
			{
				sum += min (R, a[j]+l[j]) - max (a[j], L);
				L = a[j]+l[j];
			}
			new_x = max (a[j]+l[j], new_x);
		}
		for (j = i+1; j < n && a[j] <= new_x; j++)
			new_x = max (a[j]+l[j], new_x);
		sum += new_x - a[i];
		dp [k][id_x] = max (find (j, new_x)+sum, dp[k][id_x]);
	}
	return dp [k][id_x];
}

int main()
{
	cin >> n;
	rep (i, n)
		cin >> a[i] >> l[i];		
	
	rep (i, n)
		FOR (j, i+1, n)
			if ( a[i] > a[j] )
			{
				swap (a[i], a[j]);
				swap (l[i], l[j]);
			}
	
	m = 0;
	rep (i, n)
	{
		Map [m++] = a[i]-l[i];
		Map [m++] = a[i];
		Map [m++] = a[i]+l[i];
	}
	Map [m++] = -inf;
	sort (Map, Map+m);
	m = unique (Map, Map+m) - Map;
	
	memset (dp, -1, sizeof dp);
	cout << find (0, -inf) << endl; 
	
	return 0;
}
