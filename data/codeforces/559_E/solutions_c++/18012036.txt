#include <bits/stdc++.h>
using namespace std;

template<typename T>inline void Read(T &x)
{
    int f = 1;
    char t = getchar();
    while (t < '0' || t > '9') {
        if (t == '-') f = -1;
        t = getchar();
    }
    x = 0;
    while (t >= '0' && t <= '9') {
        x = x * 10 + t - '0';
        t = getchar();
    }
    x *= f;
}

template<typename T>inline void Write(T x)
{
    static int output[20];
    int top = 0;
    if (x < 0) putchar('-'), x = -x;
    do {
        output[++top] = x % 10;
        x /= 10;
    } while (x > 0);
    while (top > 0) putchar('0' + output[top --]);
    putchar('\n');
}

template<typename T>inline void chkmin(T &x, T y) { if (x > y) x = y; }
template<typename T>inline void chkmax(T &x, T y) { if (x < y) x = y; }

const int inf = 0x3f3f3f3f;
const int maxn = 105;
const int logn = 9;

#define X first
#define L second

int n;
int f[maxn][maxn][2];
pair<int, int> lig[maxn];

void input()
{
    Read(n);
    for (int i = 1; i <= n; i++) {
        Read(lig[i].X);
        Read(lig[i].L);
    }
}

void solve()
{
    int ans = 0;
    lig[0].X = -inf;
    sort(lig + 1, lig + n + 1);
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= i; j++) {
            for (int d = 0; d < 2; d++) {
                chkmax(ans, f[i][j][d]);
                int rgt = lig[j].X + d * lig[j].L;
                int lim = -inf;
                for (int p = i + 1, t, s; p <= n; p++) {
                    for (int k = 0; k < 2; k++) {
                        int to = lig[p].X + k * lig[p].L;
                        if (to > lim) {
                            lim = to;
                            t = p;
                            s = k;
                        }
                        chkmax(f[p][t][s], f[i][j][d] + min(lig[p].L, to - rgt) + lim - to);
                    }
                }
            }
        }
    }
    cout << ans << endl;
}


int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    input();
    solve();

#ifndef ONLINE_JUDGE
    cerr << (double) clock() / CLOCKS_PER_SEC << " s" << endl;
    fclose(stdin);
    fclose(stdout);
#endif
    return 0;
}

    