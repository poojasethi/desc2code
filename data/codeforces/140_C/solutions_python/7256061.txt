import heapq
def main():
	n = int(raw_input())
	a = map(int,raw_input().split())
	d = {}
	for i in range(n):
		if d.has_key(a[i]):
			d[a[i]]+=1
		else:
			d[a[i]]=1
	pq = [(-d[x],x) for x in d]
	heapq.heapify(pq)
	r = []
	tot = 0
	while len(pq) >= 3:
		x = heapq.heappop(pq)
		y = heapq.heappop(pq)
		z = heapq.heappop(pq)
		#t = abs(max(x[0],max(y[0],z[0])))
		tot += 1
		xx = (1-abs(x[0]),x[1])
		yy = (1-abs(y[0]),y[1])
		zz = (1-abs(z[0]),z[1])
		r.append((x[1],y[1],z[1],1))
		if not(xx[0]==0):
			heapq.heappush(pq,xx)
		if not(yy[0]==0):
			heapq.heappush(pq,yy)
		if not(zz[0]==0):
			heapq.heappush(pq,zz)
	print tot
	for x in r:
		l = [x[0],x[1],x[2]]
		l.sort()
		for j in range(x[3]):
			print " ".join(reversed(map(str,l)))
	return 0

if __name__ == '__main__':
	main()

