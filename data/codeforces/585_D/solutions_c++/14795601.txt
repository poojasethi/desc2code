#include <iostream>
#include <algorithm>
#include <map>
using namespace std;
typedef long long ll;

const int MAXN = 30;
int N;
int L[MAXN], M[MAXN], W[MAXN];
map<pair<ll, ll>, pair<ll, ll> > mp;

int main()
{
	ios::sync_with_stdio(0);

	cin >> N;
	for (int i = 0; i < N; i++)
		cin >> L[i] >> M[i] >> W[i];

	int power1 = 1;
	for (int i = 0; i < N / 2; i++)
		power1 *= 3;

	for (int i = 0; i < power1; i++)
	{
		ll a = 0, b = 0, c = 0;
		for (int j = i, k = 0; k < N / 2; j /= 3, k++)
		{
			if (j % 3 == 0)
				a += L[k], b += M[k];
			else if (j % 3 == 1)
				a += L[k], c += W[k];
			else
				b += M[k], c += W[k];
		}

		pair<ll, ll> p = make_pair(b - a, c - b);
		if (mp.count(p))
		{
			pair<ll, ll>& cur = mp[p];
			if (cur.first < a)
				cur = make_pair(a, i);
		}
		else
			mp[p] = make_pair(a, i);
	}

	int power2 = 1;
	for (int i = N / 2; i < N; i++)
		power2 *= 3;

	ll total = -(((ll)1) << 60), ans = -1;
	for (int i = 0; i < power2; i++)
	{
		ll a = 0, b = 0, c = 0;
		for (int j = i, k = N / 2; k < N; j /= 3, k++)
		{
			if (j % 3 == 0)
				a += L[k], b += M[k];
			else if (j % 3 == 1)
				a += L[k], c += W[k];
			else
				b += M[k], c += W[k];
		}

		pair<ll, ll> p = make_pair(a - b, b - c);
		if (mp.count(p))
		{
			pair<ll, ll> cur = mp[p];
			if (total < cur.first + a)
			{
				total = cur.first + a;
				ans = cur.second + (ll)i*power1;
			}
		}
	}

	if (ans == -1)
		cout << "Impossible\n";
	else
	{
		for (int i = 0; i < N; i++, ans /= 3)
		{
			if (ans % 3 == 0)
				cout << "LM\n";
			else if (ans % 3 == 1)
				cout << "LW\n";
			else
				cout << "MW\n";
		}
	}

	return 0;
}