#include <algorithm>
#include <cmath>
#include <ctype.h>
#include <fstream>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <utility>
#include <stdlib.h>
#include <assert.h>

using namespace std;

typedef long long ll;

map<pair<int,int>,ll> mp;
map<pair<int,int>,ll> pm;
map<pair<int,int>,ll> ::iterator it;
int x[3][25];
int lim = 1e9;
int n,mx=-lim;
pair<int,int> pp;
string s[3]={"LM","LW","MW"};

inline void solve(int l,int m,int w,int pos,ll r)
{
	if(pos == (n/2))
	{
		// printf("%d %d\n",m-l,w-m);
		pair<int,int> pr = make_pair(m-l,w-m);
		if(l+lim > mp[pr])
		{
			mp[pr] = l+lim;
			pm[pr] = r;
		}
		return;
	}
	solve(l+x[0][pos],m+x[1][pos],w,pos+1,r*3);
	solve(l+x[0][pos],m,w+x[2][pos],pos+1,r*3+1);
	solve(l,m+x[1][pos],w+x[2][pos],pos+1,r*3+2);
}
inline void resolve(int l,int m,int w,int pos,ll r)
{
	if(pos == n)
	{
		pair<int,int> pr = make_pair(l-m,m-w);
		if(!mp[pr]) return;
		// printf("%d %d %d\n",l-m,m-w);
		int tp = mp[pr]-lim;
		if(tp+l > mx)
		{
			mx = tp+l;
			pp = make_pair(pm[pr],r);
		}
		return;
	}
	resolve(l+x[0][pos],m+x[1][pos],w,pos+1,r*3);
	resolve(l+x[0][pos],m,w+x[2][pos],pos+1,r*3+1);
	resolve(l,m+x[1][pos],w+x[2][pos],pos+1,r*3+2);
}
int main()
{
	#ifndef ONLINE_JUDGE
		freopen("I.in","r",stdin);
	#endif

	cin>>n;
	for(int i=0;i<n;i++) cin>>x[0][i]>>x[1][i]>>x[2][i];
	solve(0,0,0,0,0);
	resolve(0,0,0,n/2,0);
	if(mx == -lim) puts("Impossible");
	else 
	{
		int a = pp.first;
		int b = pp.second;
		vector<int> h;
		for(int i=n/2;i<n;i++,b/=3) h.push_back(b%3);
		for(int i=0;i<(n/2);i++,a/=3) h.push_back(a%3);
		reverse(h.begin(), h.end());
		for(int i=0;i<n;i++)
		{
			if(h[i]==0) puts("LM");
			if(h[i]==1) puts("LW");
			if(h[i]==2) puts("MW");
		}
	}
	return 0;
}