#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstring>
#include<algorithm>
#define maxn 30
#define base 500000000
#define inf base
#define mod 9999993
using namespace std;
char ch;
int n,m,a[maxn],b[maxn],c[maxn],ans,sta1,sta2;
bool ok;
void read(int &x){
	for (ok=0,ch=getchar();!isdigit(ch);ch=getchar()) if (ch=='-') ok=1;
	for (x=0;isdigit(ch);x=x*10+ch-'0',ch=getchar());
	if (ok) x=-x;
}
struct Hash{
	int tot,pos[mod],pre[600000],val[600000][3],sta[600000];
	void insert(int a,int b,int c,int st){
		int u=(a-b+base)%mod;
		for (int p=pos[u];p;p=pre[p])
			if (val[p][0]==a&&val[p][1]==b&&val[p][2]==c) return;
		pre[++tot]=pos[u],pos[u]=tot,val[tot][0]=a,val[tot][1]=b,val[tot][2]=c,sta[tot]=st;
	}
	void check(int a,int b,int c,int st){
		int u=(b-a+base)%mod,tmp=-inf*2,t1;
		for (int p=pos[u];p;p=pre[p])
			if (val[p][1]-val[p][2]==c-b)
				if (val[p][0]>tmp) tmp=val[p][0],t1=sta[p];
		if (tmp+a>ans) ans=tmp+a,sta1=st,sta2=t1;
	}
}hash;
//L M W
void dfs(int k,int lim,int va,int vb,int vc,int sta,int op){
	if (k==lim+1){
		if (op) hash.check(va,vb,vc,sta);
		else hash.insert(va,vb,vc,sta);
		return;
	}
	dfs(k+1,lim,va+a[k],vb+b[k],vc,(sta<<2),op);
	dfs(k+1,lim,va+a[k],vb,vc+c[k],(sta<<2)+1,op);
	dfs(k+1,lim,va,vb+b[k],vc+c[k],(sta<<2)+2,op);
}
int main(){
	read(n),m=(1+n)>>1;
	for (int i=1;i<=n;i++) read(a[i]),read(b[i]),read(c[i]);
	ans=-inf,dfs(m+1,n,0,0,0,0,0),dfs(1,m,0,0,0,0,1);	
	if (ans==-inf) puts("Impossible");
	else{
		for (int i=1;i<=m;i++){
			int t=(sta1>>((m-i)<<1))&3;
			if (t==0) puts("LM");
			else if (t==1) puts("LW");
			else puts("MW");
		}
		for (int i=m+1;i<=n;i++){
			int t=(sta2>>((n-i)<<1))&3;
			if (t==0) puts("LM");
			else if (t==1) puts("LW");
			else puts("MW");	
		}
	}
	return 0;
}

	     			 	 		     	   	   				