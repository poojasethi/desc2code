#include<iostream>
#include<cstdio>
#include<map>
#include<algorithm>
using namespace std;
typedef pair<int,int> pii;
const int MAXN=30,inf=~0u>>1;
map<pii,pii> f;
int n,ans=-inf,l[MAXN],m[MAXN],w[MAXN],lim,op1,op2;
inline void init()
{
	scanf("%d",&n);
	for(int i=0;i<n;i++)scanf("%d%d%d",&l[i],&m[i],&w[i]);
}
void DFS1(int k,int sl,int sm,int sw,int seq)
{
	if(k==lim)
	{
		map<pii,pii>::iterator p=f.find(pii(sm-sl,sw-sm));
		if(p==f.end()||sl>p->second.first)f[pii(sm-sl,sw-sm)]=pii(sl,seq);
		return;
	}
	DFS1(k+1,sl+l[k],sm+m[k],sw,seq<<2|1);
	DFS1(k+1,sl+l[k],sm,sw+w[k],seq<<2|2);
	DFS1(k+1,sl,sm+m[k],sw+w[k],seq<<2|3);
}
void DFS2(int k,int sl,int sm,int sw,int seq)
{
	if(k==lim)
	{
		map<pii,pii>::iterator p=f.find(pii(sl-sm,sm-sw));
		if(p!=f.end()&&sl+p->second.first>ans)ans=sl+p->second.first,op1=p->second.second,op2=seq;
		return;
	}
	DFS2(k+1,sl+l[k],sm+m[k],sw,seq<<2|1);
	DFS2(k+1,sl+l[k],sm,sw+w[k],seq<<2|2);
	DFS2(k+1,sl,sm+m[k],sw+w[k],seq<<2|3);
}
inline void output(int x)
{
	if(!x)return;
	int t=x&3;
	output(x>>2);
	if(t==1)printf("LM\n");
	else if(t==2)printf("LW\n");
	else printf("MW\n");
}
int main(void)
{
	init();
	lim=n/2;
	DFS1(0,0,0,0,0);
	lim=n;
	DFS2(n/2,0,0,0,0);
	if(ans==-inf)printf("Impossible\n");
	else
	{
		output(op1);
		output(op2);
	}
	return 0;
}
