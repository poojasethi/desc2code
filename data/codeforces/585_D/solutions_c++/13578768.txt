#include <iostream>
#include <cstdio>
#include <map>
#include <algorithm>
#include <vector>
#include <string>
using namespace std;

map < pair<int,int> , int > mp;

int val[4][30];

struct state {
    int a,b,c,s;
}ss[15000000];
int cou = 0;
void dfs(int s, int a, int b, int c, int l, int to) {
    if(l == to + 1) {
        ss[cou].s = s; ss[cou].a = a; ss[cou].b = b;
        ss[cou].c = c; mp[pair<int,int>(b-a,c-a)] = cou++;
        return;
    }
    dfs(s*3, a + val[1][l], b + val[2][l], c, l+1, to);
    dfs(s*3+1, a + val[1][l], b, c + val[3][l], l+1,  to);
    dfs(s*3+2, a, b + val[2][l], c + val[3][l], l+1, to);
}

int ans_id = -1,ans_val = -111111111,ans_s = 0;

void dfs_ (int s, int a, int b, int c, int l, int to) {
    if(l == to + 1) {
        map< pair<int,int>, int>::iterator it;
        it = mp.find(pair<int,int>(a-b,a-c));
        if(it == mp.end()) return;
        int i = it -> second;
        if(ans_id == -1 || ans_val < a + ss[i].a) {
            ans_id = i; ans_s = s; ans_val = a + ss[i].a;
        }
        return;
    }
    dfs_(s*3, a + val[1][l], b + val[2][l], c, l+1, to);
    dfs_(s*3+1, a + val[1][l], b, c + val[3][l], l+1, to);
    dfs_(s*3+2, a, b + val[2][l], c + val[3][l], l+1, to);
}

string str[30];

int main()
{
    int n,i,j; cin>>n;
    int m = n/2;
    for(i = 1; i <= n; i++) for(j = 1; j <= 3; j++)
        scanf("%d",&val[j][i]);
    dfs(0,0,0,0,1,m);dfs_(0,0,0,0,m+1,n);
    if(ans_id == -1) cout<<"Impossible"<<endl;
    else {
        for(i = n; i > m; i--) {
            if(ans_s%3 == 0) str[i] = "LM";
            if(ans_s%3 == 1) str[i] = "LW";
            if(ans_s%3 == 2) str[i] = "MW";
            ans_s /= 3;
        }
        ans_s = ss[ans_id].s;
        for(i = m; i > 0; i--) {
            if(ans_s%3 == 0) str[i] = "LM";
            if(ans_s%3 == 1) str[i] = "LW";
            if(ans_s%3 == 2) str[i] = "MW";
            ans_s /= 3;
        }
        for(i = 1; i <= n; i++) cout<<str[i]<<endl;
    }
    return 0;
}
