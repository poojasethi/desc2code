#include <bits/stdc++.h>
using namespace std;
int a[30], b[30], c[30], n;
int best = -999999999, bestx, besty;
map<pair<int, int>, pair<int, int> > m;
void gen(int x, int y, int z, int p, int q, int r) {
  if (y == 13) {
    q -= p;
    r -= p;
    if (x == 26) {
      map<pair<int, int>, pair<int, int> >::iterator it;
      it = m.find({-q, -r});
      if (it != m.end()) {
        if (p + it->second.first > best) {
          best = p + it->second.first;
          bestx = z;
          besty = it->second.second;
        }
      }
    } else {
      if (m.find({q, r}) == m.end() || m[{q, r}].first < p) {
        m[{q, r}] = {p, z};
      }
    }
    return ;
  }
  gen(x + 1, y + 1, z * 3, p, q + b[x], r + c[x]);
  gen(x + 1, y + 1, z * 3 + 1, p + a[x], q, r + c[x]);
  gen(x + 1, y + 1, z * 3 + 2, p + a[x], q + b[x], r);
}
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    scanf("%d %d %d", &a[i], &b[i], &c[i]);
  }
  gen(0, 0, 0, 0, 0, 0);
  gen(13, 0, 0, 0, 0, 0);
  if (best == -999999999) {
    printf("Impossible\n");
    return 0;
  }
  stack<int> st;
  int t = bestx;
  for (int i = 0; i < 13; i++) {
    st.push(t % 3);
    t /= 3;
  }
  t = besty;
  for (int i = 0; i < 13; i++) {
    st.push(t % 3);
    t /= 3;
  }
  for (int i = 0; i < n; i++) {
    int f = st.top();
    printf(f == 0 ? "MW\n" : f == 1 ? "LW\n" : "LM\n");
    st.pop();
  }
  return 0;
}