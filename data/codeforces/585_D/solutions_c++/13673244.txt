#include <cstdio>
#include <cstring>
#include <algorithm>
#include <map>

using namespace std;

typedef long long int64;

const int MAX_N = 30;
const int INF = ~0U >> 1;

map<pair<int, int>, pair<int, int64> > h;
pair<int, int64> ans = pair<int, int64> (-INF, 0);
int n, m, a[MAX_N], b[MAX_N], c[MAX_N];

void dfs1(int x, int state, int _a, int _b, int _c) {
    if(x == m + 1) {
        pair<int, int64> &s = h[pair<int, int> (_a - _b, _b - _c)];
        if(s.second == 0)
            s = pair<int, int64> (_a, state);
        else s = max(s, pair<int, int64> (_a, state));
        return ;
    }
    dfs1(x + 1, state << 2 | 1, _a + a[x], _b + b[x], _c);
    dfs1(x + 1, state << 2 | 2, _a + a[x], _b, _c + c[x]);
    dfs1(x + 1, state << 2 | 3, _a, _b + b[x], _c + c[x]);
}

void dfs2(int x, int state, int _a, int _b, int _c) {
    if(x == n + 1) {
        pair<int, int64> s = h[pair<int, int> (_b - _a, _c - _b)];
        if(s.second == 0)
            return ;
        ans = max(ans, pair<int, int64> (_a + s.first, s.second << (n - m << 1) | state));
        return ;
    }
    dfs2(x + 1, state << 2 | 1, _a + a[x], _b + b[x], _c);
    dfs2(x + 1, state << 2 | 2, _a + a[x], _b, _c + c[x]);
    dfs2(x + 1, state << 2 | 3, _a, _b + b[x], _c + c[x]);
}

int main() {
    const char s[4][10] = {"", "LM", "LW", "MW"};
    scanf("%d", &n);
    m = n + 1 >> 1;
    for(int i = 1; i <= n; i++)
        scanf("%d%d%d", &a[i], &b[i], &c[i]);
    dfs1(1, 0, 0, 0, 0);
    dfs2(m + 1, 0, 0, 0, 0);
    if(ans.first == -INF)
        puts("Impossible");
    else {
        static int stk[MAX_N], top;
        for(int i = 1; i <= n; i++) {
            stk[++top] = ans.second & 3;
            ans.second >>= 2;
        }
        while(top)
            puts(s[stk[top--]]);
    }
    return 0;
}