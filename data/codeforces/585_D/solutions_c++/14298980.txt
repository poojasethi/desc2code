#include <bits/stdc++.h>

#define mp make_pair
#define st first
#define nd second
#define pb push_back

using namespace std;

typedef long long ll;
typedef pair< ll,ll > pll;
typedef pair< int,int > pii;

const int N = 25, inf = 1000000000;

int n, g1, g2, a[3][N+1];
map<pii, pii> Map;

int main()
{
	scanf("%d", &n);

	g1 = n / 2;
	g2 = n - g1;

	for (int i = 1; i <= n; i++) {
		scanf("%d %d %d", a[0]+i, a[1]+i, a[2]+i);
	}

	int to = 1;
	for (int i = 0; i < g1; i++)
		to = to * 3;

	for (int mask = 0; mask < to; mask++) {
		int sum[3] = {};
		
		for (int i = 1, tmask = mask; i <= g1; i++, tmask /= 3) {

			for (int j = 0; j < 3; j++)
				if (j != tmask % 3)
					sum[j] += a[j][i];
		}
		
		pii t = mp(sum[0] - sum[1], sum[1] - sum[2]);
		
		if (Map.find(t) != Map.end())
			Map[t] = max(Map[t], mp(sum[0], mask));
		else
			Map[t] = mp(sum[0], mask);
	}
	
	to = 1;
	for (int i = 0; i < g2; i++)
		to = to * 3;

	pair<int, pii> ans = mp(-inf, mp(0, 0));

	for (int mask = 0; mask < to; mask++) {
		int sum[3] = {};
		
		for (int i = 1, tmask = mask; i <= g2; i++, tmask /= 3) {
			for (int j = 0; j < 3; j++)
				if (j != tmask % 3)
					sum[j] += a[j][i + g1];
		}
		
		pii t = mp(sum[1] - sum[0], sum[2] - sum[1]);
	
		if (Map.find(t) != Map.end()) {
			ans = max(ans, mp(sum[0] + Map[t].st, mp(Map[t].nd, mask)));
		}
	}

	if (ans.st > -inf) {
		for (int tmask = ans.nd.st, i = 1; i <= g1; tmask /= 3, i++) {
			if (tmask % 3 == 0)
				printf("MW\n");
			else if (tmask % 3 == 1)
				printf("LW\n");
			else
				printf("LM\n");
		}
		
		for (int tmask = ans.nd.nd, i = 1; i <= g2; tmask /= 3, i++) {
			if (tmask % 3 == 0)
				printf("MW\n");
			else if (tmask % 3 == 1)
				printf("LW\n");
			else
				printf("LM\n");
		}
	}
	else
		puts("Impossible");
	

	return 0;
}

