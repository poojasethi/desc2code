#include <stdio.h>
#include <stdlib.h>
#include <utility>
#include <map>

using namespace std;

typedef pair<int,int> pii;

#define MP make_pair

int main(){
	int n,s,t,i,j,k,mid,up,z,u,v;
	pii p;

	scanf("%d", &n);

	int c[n][3],x[3],y[3];

	for(i=0;i<n;i++)
		for(j=0;j<3;j++)
			scanf("%d", &c[i][j]);

	mid = (n+1)/2;
	up = n - mid;

	map<pii,int> m;
	map<pii,int>::iterator it;

	for(i=0,s=1;i<mid;i++,s*=3);

	int *a;
	a=(int*)malloc(s*sizeof(int));

	x[0]=x[1]=x[2]=0;

	for(i=0;i<mid;i++){
		x[0]+=c[i][0];x[1]+=c[i][1];x[2]+=c[i][2];
	}

	// printf("%d %d %d\n", x[0], x[1], x[2]);

	for(i=0;i<s;i++){
		y[0]=x[0];y[1]=x[1];y[2]=x[2];

		t=i;
		for(j=0;j<mid;j++){
			k=t%3;
			t/=3;
			y[k]-=c[j][k];
		}

		y[1]-=y[0];
		y[2]-=y[0];

		p.first=y[1];
		p.second=y[2];

		it=m.find(p);

		if(it!=m.end())
			if(a[it->second]>y[0]);
			else
				it->second=i;
		else
			m.insert(MP(p,i));

		a[i]=y[0];
	}

	for(i=0,s=1;i<up;i++,s*=3);

	x[0]=x[1]=x[2]=0;

	for(i=mid;i<n;i++){
		x[0]+=c[i][0];x[1]+=c[i][1];x[2]+=c[i][2];
	}

	// printf("%d %d %d\n", x[0], x[1], x[2]);

	z=-1000000000;
	u=v=-1;

	for(i=0;i<s;i++){
		y[0]=x[0];y[1]=x[1];y[2]=x[2];

		t=i;
		for(j=0;j<up;j++){
			k=t%3;
			t/=3;
			y[k]-=c[j+mid][k];
		}

		y[1]=y[0]-y[1];
		y[2]=y[0]-y[2];

		p.first=y[1];
		p.second=y[2];

		it=m.find(p);

		if(it!=m.end()){
			if(a[it->second]+y[0]>z){
				z=a[it->second]+y[0];
				u=it->second;
				v=i;
			}
		}
	}

	if(n==1){
		if(c[0][0]==0)
			if(c[0][1]==0)
				printf("LM\n");
			else
				if(c[0][2]==0)
					printf("LW\n");
				else
					printf("Impossible\n");
		else
			if(c[0][1]==0 && c[0][2]==0)
				printf("MW\n");
			else
				printf("Impossible\n");

	}
	else{
		if(u==-1)
			printf("Impossible\n");
		else{
			for(j=0;j<mid;j++){
				k=u%3;
				u/=3;

				if(k==0)
					printf("MW\n");
				else
					if(k==1)
						printf("LW\n");
					else
						printf("LM\n");
			}

			for(j=0;j<up;j++){
				k=v%3;
				v/=3;

				if(k==0)
					printf("MW\n");
				else
					if(k==1)
						printf("LW\n");
					else
						printf("LM\n");
			}
		}
	}

	return 0;
}