#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int n;
int a[30][4];
struct node{
	int y,z;
	bool operator<(const node & b) const{
		if(y != b.y) return y < b.y;
		return z < b.z;
	}
};
map<node, pair<int, int> > m1; 
int ans = -0x3f3f3f3f;
pair<int, int> anss;
int mid;
void dfs(int u, int type, int end, int x, int y, int z, int s){
	if(u == end){
		if(type == 1){
			node tmp = (node){y - x, z - y};
			if(m1[tmp].first <= x || m1[tmp].second == 0)
				m1[tmp] = make_pair(x, s);
		}
		else {
			node tmp = (node){x-y, y-z};
			pair<int, int> now = m1[tmp];	
			if(now.second != 0){
				if(now.first + x > ans){
					ans = now.first + x;
					anss.first = now.second;
					anss.second = s;
				}
			}
		}
	   	return;
	}
	dfs(u+1, type, end, x+a[u][1], y+a[u][2], z, s<<2|1);
	dfs(u+1, type, end, x+a[u][1], y, z+a[u][3], s<<2|2);
	dfs(u+1, type, end, x, y+a[u][2], z+a[u][3], s<<2|3);
}
int main(){
	cin>>n;
	m1.clear();
	for(int i=1; i<=n; i++) scanf("%d %d %d", &a[i][1], &a[i][2], &a[i][3]);
	if(n == 1){
		if(a[1][1] == a[1][2]&&a[1][1] == 0){
			puts("LM");
		}
		else if(a[1][1] == a[1][3] &&a[1][1] == 0){
			puts("LW");
		}
		else if(a[1][2] == a[1][3] && a[1][2] == 0) puts("WM");
		else puts("Impossible");
		return 0;
	}
	mid = n/2;
	dfs(1, 1, mid+1, 0, 0, 0, 0); 
	dfs(mid+1, 2, n+1, 0, 0, 0, 0);
	if(ans == -0x3f3f3f3f){
		puts("Impossible");
		return 0;
	}	
	int len = mid*2;
	for(int i=len-1; i>=0; i-=2){
		int tmp = (1LL<<i);
		int tmp2 = (1LL<<(i-1));
		if((tmp&anss.first)&&(tmp2&anss.first)){
			puts("MW");
		}
		else if(tmp&anss.first){
			puts("LW");
		}
		else printf("LM\n");
	}
	len = (n-mid)*2;
	for(int i=len-1; i>=0; i-=2){
		int tmp = (1LL<<i);
		int tmp2 = (1LL<<(i-1));
		if((tmp&anss.second)&&(tmp2&anss.second)){
			puts("MW");
		}
		else if(tmp&anss.second){
			printf("LW\n");
		}
		else printf("LM\n");
	}
	return 0;
}