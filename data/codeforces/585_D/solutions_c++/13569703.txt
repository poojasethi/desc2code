#include <map>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#define M 30
using namespace std;
int n,mid;
int a[M],b[M],c[M];
map<pair<int,int>,pair<int,long long> > s;
pair<int,long long> ans(0x80000000,0);
//LMW
void DFS1(int pos,long long sta,int _a,int _b,int _c)
{
	if(pos==mid+1)
	{
		pair<int,long long> &temp=s[pair<int,int>(_a-_b,_b-_c)];
		if(temp.second==0)
			temp=pair<int,long long>(_a,sta);
		else
			temp=max(temp,pair<int,long long>(_a,sta));
		return ;
	}
	DFS1(pos+1,sta<<2|1,_a,_b+b[pos],_c+c[pos]);
	DFS1(pos+1,sta<<2|2,_a+a[pos],_b,_c+c[pos]);
	DFS1(pos+1,sta<<2|3,_a+a[pos],_b+b[pos],_c);
}
void DFS2(int pos,long long sta,int _a,int _b,int _c)
{
	if(pos==n+1)
	{
		pair<int,long long> temp = s[pair<int,int>(_b-_a,_c-_b)];
		if(temp.second==0) return ;
		ans=max(ans,pair<int,long long>(_a+temp.first,temp.second<<(n-mid<<1)|sta));
		return ;
	}
	DFS2(pos+1,sta<<2|1,_a,_b+b[pos],_c+c[pos]);
	DFS2(pos+1,sta<<2|2,_a+a[pos],_b,_c+c[pos]);
	DFS2(pos+1,sta<<2|3,_a+a[pos],_b+b[pos],_c);
}
int main()
{
	static const char s[4][10]={"","MW","LW","LM"};
	int i;
	cin>>n;mid=n+1>>1;
	for(i=1;i<=n;i++)
		scanf("%d%d%d",&a[i],&b[i],&c[i]);
	DFS1(1,0,0,0,0);
	DFS2(mid+1,0,0,0,0);
	if(ans.first==(signed)0x80000000)
		puts("Impossible");
	else
	{
		static int stack[M],top;
		for(i=1;i<=n;i++)
			stack[++top]=ans.second&3,ans.second>>=2;
		while(top)
			puts(s[stack[top--]]);
	}
	return 0;
}
