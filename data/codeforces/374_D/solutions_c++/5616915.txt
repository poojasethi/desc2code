#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

int a[1000000];
int v[1000001];
int tree[1000001];
int t = 0;
int tot = 0;

int read(int idx)
{
	int sum = 0;
	while (idx > 0)
	{
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}

void update(int idx, int val)
{
	while (idx <= 1000000)
	{
		tree[idx] += val;
		idx += (idx & -idx);
	}
}

bool ok(int ind, int j)
{
	return ind-read(ind)+j >= a[j];
}

int main()
{
	int n, m;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i)
		scanf("%d", &a[i]);
	for (int i = 0; i < n; ++i)
	{
		int op;
		scanf("%d", &op);
		if (op != -1)
		{
			v[++t] = op;
			tot++;
		}
		else
		{
			int aux = tot;
			int acc = 0;
			for (int j = 0; j < m && a[j] <= aux; ++j)
			{
				int low = 1;
				int high = t;
				while (high-low > 1)
				{
					int mid = (high+low)/2;
					if (ok(mid, j))
						high = mid;
					else
						low = mid;	
				}
				int pos = ok(low, j) ? low : high;
				v[pos] = -1;
				tot--;
				update(pos, 1);
			}
		}
	}
	if (tot == 0)
		printf("Poor stack!\n");
	else
	{
		for (int i = 1; i <= t; ++i)
		{
			if (v[i] != -1)
				printf("%d", v[i]);
		}
		printf("\n");
	}
	return 0;
}
