#include <cstdio>
#include <algorithm>
using namespace std;
#define N 1000001

int vet[N], bit[N], use[N], id = 1;

int query(int x)
{
	int r = 0;
	while (x)
	{
		r += bit[x];
		x -= x&-x;
	}
	return r;
}

void update(int x, int v)
{
	while (x < N)
	{
		bit[x] += v;
		x += x&-x;
	}
}

int main()
{
	int n, m, a = 0, b = 0;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; ++i) scanf("%d", vet+i);
	while (n--)
	{
		int x; scanf("%d", &x);
		if (x == 0 || x == 1)
		{
			use[id] = x;
			update(id, 1);
			++id;
		}
		else
		{
			int tem = query(N-1), pos = lower_bound(vet, vet+m, tem)-vet, aux = tem;
			for (int i = pos; i >= 0; --i)
			{
				if (i == m || vet[i] > tem) continue;
				int go = vet[i];
				int lo = 1, hi = id-1;
				while (lo != hi)
				{
					int mi = (lo+hi)/2;
					if (query(mi) >= go) hi = mi;
					else lo = mi+1;
				}
				update(lo, -1);
			}
		}
	}
	if (query(N-1) == 0) printf("Poor stack!\n");
	else
	{
		for (int i = 1; i < id; ++i) if (query(i)-query(i-1))
			printf("%d", use[i]);
		printf("\n");
	}
}

