#include <bits/stdc++.h>
using namespace std;
int N,M,opt;
int B[1000010];
int Tree[1000010];
int A[1000010];
void update(int idx,int val)
{
	while(idx<=N)
	{
		Tree[idx]+=val;
		idx+=(idx & -idx);
	}
}
int Sum(int idx)
{
	int ans = 0;
	while(idx)
	{
		ans+=Tree[idx];
		idx-=(idx & -idx);
	}
	return ans;
}
int Search(int val)
{
	int l = 1,r = N;
	if(Sum(N)<val)
		return false;
	int res;
	while(l<=r)
	{
		int m = (l+r)/2;
		if(Sum(m)>=val)
		{
			r = m-1;
			res = m;
		}
		else
			l = m+1;
	}
	update(res,-1);
	return true;

}
int main()
{
	cin>>N>>M;
	for(int i = 0;i<M;i++)
		cin>>A[i];
	for(int i = 1;i<=N;i++)
	{
		cin>>opt;
		if(opt==-1)
		{
			for(int j = 0;j<M;j++)
			{
				if(!Search(A[j] - j))
					break;
			}

		}
		else
		{
			B[i] = opt;
			update(i,1);
		}
	}
	for(int i = 1;i<=N;i++)
	{
		if(Sum(i) - Sum(i-1))
			cout<<B[i];
	}
	if(Sum(N)==0)
		cout<<"Poor stack!";
	cout<<endl;
	return 0;
}