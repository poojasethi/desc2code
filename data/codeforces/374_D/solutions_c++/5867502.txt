//In the name of God
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;
const int N = 1e6 + 6;

int n, m, a[N], ex[N], t[4 * N];
vector<int> s;

void add(int n, int b, int e, int x) {
	t[n]++;
	if (b == e) { ex[b] = true; return; }
	int l = n << 1, r = l | 1, m = b + e >> 1;
	if (x <= m)
		return add(l, b, m, x);
	return add(r, m + 1, e, x);
}
void get(int n, int b, int e, int x) {
	t[n]--;
	if (b == e) {	ex[b] = false; return; }
	int l = n << 1, r = l | 1, m = b + e >> 1;
	if (x <= t[l])
		return get(l, b, m, x);
	return get(r, m + 1, e, x - t[l]);
}
int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < m; i++)
		scanf("%d", a + i), a[i];
	while (n--) {
		int x; scanf("%d", &x);
//		cerr << x << ':';
		if (x != -1) {
			add(1, 0, N - 1, s.size());
			s.push_back(x + '0');
		}
		else
			for (int i = 0; i < m && t[1] >= a[i] - i; i++)
				get(1, 0, N - 1, a[i] - i);
//		for (int i = 0; i < s.size(); i++)
//			if (ex[i])
//				printf("%c", s[i]);
//		printf("\n");
	}
	for (int i = 0; i < s.size(); i++)
		if (ex[i])
			printf("%c", s[i]);
	printf(count(ex, ex + s.size(), true)? "\n": "Poor stack!\n");
	return 0;
}
