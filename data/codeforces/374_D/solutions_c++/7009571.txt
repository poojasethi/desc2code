/*
 * D.cpp
 *
 *  Created on: 2014年7月4日
 *      Author: indeed
 */

#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
const int MAXN = 1000010;

using namespace std;
int n, m, k, s;
int tr[MAXN], a[MAXN], b[MAXN];

static inline void tree_arr_add(int x)
{
	for (; x <= n; x += x & -x)
		tr[x]++;
}
static inline int tree_arr_sum(int x)
{
	int an = 0;
	for (; x; x -= x & -x)
		an += tr[x];
	return an;
}
static inline int get(int x)
{
	return x - tree_arr_sum(x);
}
static inline void hit_table()
{
	for (int i = 1; i <= m; i++)
	{
		int l = 1, r = s;
		while (l <= r)
		{
			int mid = (l + r) / 2;
			if (get(mid) >= a[i] - i + 1)
				r = mid - 1;
			else
				l = mid + 1;
		}
		++r;
		if (r > s)
			return;
		if (!(get(r) == a[i] - i + 1))
			return;
		tree_arr_add(r);
	}
}

int main()
{
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= m; i++)
		scanf("%d", &a[i]);

	for (int i = 1; i <= n; i++)
	{
		scanf("%d", &k);
		if (k == -1)
			hit_table();
		else
		{
			++s;
			b[s] = k;
		}
	}
	bool flag = false;
	for (int i = 1; i <= s; i++)
		if (tree_arr_sum(i) == tree_arr_sum(i - 1))
			printf("%d", b[i]), flag = true;
	if (!flag)
		puts("Poor stack!");
	return 0;
}

 	       	 	  	  	 	  	   	