#include <algorithm>
#include <iostream>
using namespace std;

const int M = (1<<20);

int n,m,i,j,id,x;
int a[M],sz=0,ans[M];
int tree[M+M+5];
int del[M],ln=0;

void update(int x,int value){
	x = x + M - 1;
	tree[x] = value;
	x >>= 1;
	while(x){
		tree[x]=tree[x+x]+tree[x+x+1];
		x >>= 1;
	}
}

int Find(int k,int v = 1,int tl=1,int tr=M){
	if(tl == tr)return tl;
	int tm=(tl+tr)>>1;
	if(tree[v+v]>=k)return Find(k,v+v,tl,tm);
	else return Find(k-tree[v+v],v+v+1,tm+1,tr);
}

int main () {
//	freopen("in","r",stdin);
//	freopen("out","w",stdout);
	cin >> n >> m ;
	for(i=1;i<=m;i++)
		cin >> a[i] ;
	for(i=1;i<=n;i++){
		cin >> x ;	
		if(x == -1){
			ln = 0;
			for(j=1;j<=m;j++){
	                	if(a[j]>tree[1])break;
				id = Find(a[j]);
				del[++ln] = id;
			}	
			for(j=1;j<=ln;j++)update(del[j],0);
		}
		else {
			ans[++sz] = x ;
			update(sz,1);
		}	
	}                     
	if(!tree[1])cout<<"Poor stack!";
	else {
		for(i=1;i<=sz;i++)
			if(tree[i+M-1])
				cout<<ans[i];
        }
	return 0;
}