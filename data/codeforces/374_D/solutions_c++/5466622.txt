#include <cstdio>
#include <algorithm>

using namespace std;

int idxTree[1<<21], val[1<<20], sz;
int arr[1<<20];

int find(int idx, int v) {
    if( sz <= idx )
        return idx;

    if( idxTree[2*idx] < v ) {
        return find(2*idx+1,v-idxTree[2*idx]);
    } else {
        return find(2*idx,v);
    }
}

int main() {
    int n,m;
    scanf("%d %d",&n,&m);
    for(int i=0;i<m;i++)
        scanf("%d",arr+i);

    for(sz=1;sz<n;sz*=2);
    for(int i=0;i<n;i++) {
        int t;
        scanf("%d",&t);

        if( t==-1 ) {
            int idx = upper_bound(arr,arr+m,idxTree[1])-arr-1;
            for(;idx>=0;idx--) {
                int j = find(1,arr[idx]);
                for(;j>0;j/=2)
                    idxTree[j]--;
            }
        }
        else {
            val[i] = t;
            for(int j = i+sz;j>0;j/=2)
                idxTree[j]++;
        }
    }
    if( idxTree[1] == 0 )
        puts("Poor stack!");
    else
        for(int i=0;i<n;i++)
            if( idxTree[i+sz] == 1 )
                printf("%d",val[i]);
}