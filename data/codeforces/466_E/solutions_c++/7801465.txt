#include<cstdio>
#include<vector>
#define N 200005
#define pb push_back
using namespace std;
vector<int>son[N],ask[N];
struct arr{int x,y,id,opt;}a[N];
int f[N],L[N],R[N],fa[N],ans[N];
int i,n,m,now,num,id,tot,P,j;
inline int get(int u){return f[u]==u?f[u]:f[u]=get(f[u]);}
void dfs(int k)
{
  L[k]=++tot;
  for (int i=0;i<son[k].size();i++)
    dfs(son[k][i]);
  R[k]=tot;
}
int main()
{
  scanf("%d%d",&n,&m);
  for (i=1;i<=m;i++)
  {
    scanf("%d%d",&a[i].opt,&a[i].x);a[i].id=i;
    if (a[i].opt!=2) scanf("%d",&a[i].y);
    if (a[i].opt==1) son[a[i].y].pb(a[i].x),fa[a[i].x]=1;
    if (a[i].opt==3) ask[a[i].y].pb(a[i].id);
  }
  for (i=1;i<=n;i++) if (!fa[i]) dfs(i);
  for (i=1;i<=n;i++) f[i]=i;now=0;
  for (i=1;i<=m;i++)
  {
    if ((P=a[i].opt)==1) {f[get(a[i].x)]=get(a[i].y);continue;}
    if (P==3) {puts(ans[i]?"YES":"NO");continue;}now++;
    for (j=0;j<ask[now].size();j++)
    {
      id=ask[now][j];num=a[id].x;
      if (get(num)==get(a[i].x)&&L[num]<=L[a[i].x]&&R[num]>=R[a[i].x]) ans[id]=1;
    }
  }
}
