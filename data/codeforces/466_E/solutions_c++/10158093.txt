#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 100010;
int st[N], ed[N], dfs_clock;
int ID[N], tot;
int In[N], ans[N];
std::vector<int> pack[N], G[N];

struct Query {
	int typ, x, y;
	void read(int i) {
		scanf("%d", &typ);
		if(typ == 1) {
			scanf("%d%d", &x, &y);
			x --, y --;
			G[y].push_back(x);
			In[x] ++;
		} else if(typ == 2) {
			scanf("%d", &x);
			x --;
			ID[i] = ++ tot;
		} else {
			scanf("%d%d", &x, &y);
			x --;
			pack[y].push_back(i);
		}
	}
}ly[N];

void dfs(int u) {
	st[u] = ++ dfs_clock;
	rep(i, G[u].size()) {
		int v = G[u][i];
		dfs(v);
	}
	ed[u] = dfs_clock;
}

int f[N];
int find(int x) {
	return x == f[x] ? x: f[x] = find(f[x]);
}
int main() {
	int n, m;
	scanf("%d%d", &n, &m);
	rep(i, m) 
		ly[i].read(i);
	rep(i, n)if(In[i] == 0) {
		dfs(i);
	}
	rep(i, n)	f[i] = i;
	rep(i, m) {
		int typ = ly[i].typ;
		int x = ly[i].x, y = ly[i].y;
		if(typ == 1) {
			f[find(x)] = find(y);
		} else if(typ == 2) {
			rep(_, pack[ID[i]].size()) {
				int id = pack[ID[i]][_];
				y = ly[id].x;
		//		printf("%d %d %d\n", i, x, y);
				if(find(y) != find(x))	continue;
				ans[id] = (st[y] <= st[x] && st[x] <= ed[y]);
			}
		}
	}
	rep(i, m) if(ly[i].typ == 3) {
		puts(ans[i] ? "YES": "NO");
	}
	return 0;
}

