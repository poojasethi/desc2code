#include<bits/stdc++.h>

using namespace std;

#define int long long

#define seg int v, int tl, int tr
#define tm (tl + tr >> 1)
#define sag v*2+1, tm+1, tr
#define sol v*2, tl, tm
#define N   4 * 100005

int s[N],lz[N],lz2[N],c[N],n,w,h,l,r,x;

void push(seg){
	if(lz2[v]){
		c[v*2] = c[v*2+1] = lz2[v*2] = lz2[v*2+1] = lz2[v];
		lz[v*2] += lz[v];
		lz[v*2+1] += lz[v];
		s[v*2] += lz[v] * (tm - tl + 1);
		s[v*2+1] += lz[v] * (tr - tm);
		lz[v] = lz2[v] = 0;
	}
}
void mrg(int v){
	c[v] = c[v*2] == c[v*2+1] ? c[v*2] : 0;
	s[v] = s[v*2] + s[v*2+1];
}
void bld(seg){
	if(tl == tr)
	{  c[v] = tl;  return;  }
	bld(sol);  bld(sag);  mrg(v);
}
void up(seg){

	if(tl > r || tr < l)
		return;

	if(tl >= l && tr <= r && c[v]){
		s[v] += abs(c[v] - x) * (tr - tl + 1);
		lz[v] += abs(x - c[v]);  lz2[v] = c[v] = x;
		return;
	}

	push(v,tl,tr);  up(sol);  up(sag);  mrg(v);
}		
int qry(seg){
	if(tl > r || tr < l)
		return 0;

	if(tl >= l && tr <= r)
		return s[v];

	push(v,tl,tr);
	return qry(sag) + qry(sol);
}

main(){

	scanf("%lld%lld",&n,&w);

	bld(1,1,n);

	while(w--){

		scanf("%lld%lld%lld",&h,&l,&r);

		if(h == 1){
			scanf("%lld",&x);
			up(1,1,n);
		}

		else
			printf("%lld\n",qry(1,1,n));

	}

	return 0;
}
