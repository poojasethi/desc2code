#include <iostream>
#include <cstring>
#include <algorithm>
#include <cstdio>

using namespace std;
#define MID(x,y) ((x+y)>>1)
typedef long long ll;
#define maxn 400000
int lx[maxn];
struct Tree{
	Tree* ls,*rs;
	int l,r;
	ll sum;bool same; int x;ll add;
	Tree(){}
	void up(){
		if (ls->same && rs->same && ls->x == rs->x){
			same = 1; x = ls->x; add = 0;
		}else same = 0, add = 0;
		sum = rs->sum + ls->sum;
	}
	void down(){
		if (add){
			ls->add += add; ls->sum += add * (ls->r - ls->l + 1); ls->x = x;
			rs->add += add; rs->sum += add * (rs->r - rs->l + 1); rs->x = x;
			add = 0;
		}

	}
	Tree(int l,int r):l(l),r(r){
		sum = 0;same = 0;
		x = l; add = 0;
		if (r == l) {same = 1; return ;}
		int m = MID(l,r);
		ls = new Tree(l, m);
		rs = new Tree(m + 1, r);
		up();
	}
	void gao(int L,int R,int X){
		if (L <= l && r <= R){
			if (same){
				ll v = 1LL * abs(X-x);
				x = X;
				add += v;
				sum += v * (r - l + 1);
				return;
			}
		}
		down();
		int m = MID(l, r);
		if (L <= m) ls->gao(L, R, X);
		if (R > m)  rs->gao(L, R, X);
		up();
	}
	ll ask(int L,int R){
		if (L <= l && r <= R) return sum;
		ll ans = 0;
		down();
		int m = MID(l, r);
		if (L <= m) ans += ls->ask(L, R);
		if (R > m ) ans += rs->ask(L, R);
		up();
		return ans;
	}
};


int n,m;
int main(int argc, char const *argv[])
{
	while (cin >> n >> m){
		Tree* t = new Tree(1, n);
		int ty, a, b,c;
		for (int i = 0; i < m; i ++){
			cin >> ty;
			if (ty == 1){
				cin >> a >> b >> c;
				t->gao(a, b, c);
			}else {
				cin >> a >> b;
				cout << t->ask(a, b) << endl;
			}
		}
		delete t;
	}
	return 0;
}