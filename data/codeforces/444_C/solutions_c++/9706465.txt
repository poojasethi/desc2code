#include <bits/stdc++.h>
using namespace std;
#define SQRT 333
long long col[SQRT][SQRT],bcol[SQRT],val[SQRT][SQRT],bval[SQRT];
long long sum[SQRT];
void pushdowncol(int root){
	for(int i=0;i<SQRT;i++){
		col[root][i]=bcol[root];
	}
	bcol[root]=-1;
}
void point(int root,int l,int r,int c){
	if(bcol[root]!=-1){
		pushdowncol(root);
	}
	bcol[root]=-1;
	for(int i=l;i<=r;i++){
		val[root][i]+=abs(c-col[root][i]);
		col[root][i]=c;
	}
	sum[root]=accumulate(val[root],val[root]+SQRT,0LL);
}
long long solve(int root,int l,int r){
	long long res=0;
	for(int i=l;i<=r;i++){
		res+=val[root][i]+bval[root];
	}
	return res;
}
int main()
{
	int n,m,op,l,r,x;
	cin>>n>>m;
	for(int i=0;i<n;i++){
		col[i/SQRT][i%SQRT]=i+1;
	}
	memset(bcol,-1,sizeof bcol);
	for(int i=0;i<m;i++){
		scanf("%d%d%d",&op,&l,&r);
		l--;r--;
		if(op==1){
			scanf("%d",&x);
			if(l/SQRT==r/SQRT){
				point(l/SQRT,l%SQRT,r%SQRT,x);
			}
			else{
				point(l/SQRT,l%SQRT,SQRT-1,x);
				point(r/SQRT,0,r%SQRT,x);
				for(int j=l/SQRT+1;j<r/SQRT;j++){
					if(bcol[j]!=-1){
						bval[j]+=abs(bcol[j]-x);
						bcol[j]=x;
					}
					else{
						sum[j]=0;
						for(int k=0;k<SQRT;k++){
							val[j][k]+=abs(col[j][k]-x);
							col[j][k]=x;
							sum[j]+=val[j][k];
						}
						bcol[j]=x;
					}
				}
			}
		}
		else{
			long long ans=0;
			if(l/SQRT==r/SQRT){
				ans=solve(l/SQRT,l%SQRT,r%SQRT);
			}
			else
			{
				ans=solve(l/SQRT,l%SQRT,SQRT-1)+solve(r/SQRT,0,r%SQRT);
				for(int j=l/SQRT+1;j<r/SQRT;j++){
					ans+=sum[j]+bval[j]*SQRT;
				}
			}
			printf("%I64d\n",ans);
		}
	}
	return 0;
}
