#include <cstdio>
long long s[1 << 18], ls[1 << 18];
int v[1 << 18], ch[1 << 18];
const int N = 1 << 17;
inline int abs(int a) {
	return a > 0 ? a : -a;
}
void push(int p, int L, int R) {
	if (!ls[p]) return;
	if (p < N) {
		ls[p+p] += ls[p];
		ls[p+p+1] += ls[p];
		s[p+p] += ls[p] * (R - L) / 2;
		s[p+p+1] += ls[p] * (R - L) / 2;
		v[p+p] = v[p+p+1] = v[p];
	}
	ls[p] = 0;
}
void update(int l, int r, int x, int L = 0, int R = N, int p = 1) {
	if (r <= L || R <= l) return;
	push(p, L, R);
	if (l <= L && R <= r) {
		if (v[p]) {
			ls[p] += abs(v[p] - x);
			s[p] += abs(v[p] - x) * 1ll * (R - L);
			v[p] = x;
			push(p, L, R);
			return;
		}
		int mid = (L + R) / 2;
		update(l, r, x, L, mid, p+p);
		update(l, r, x, mid, R, p+p+1);
		s[p] = s[p+p] + s[p+p+1];
		v[p] = x;
	} else {
		int mid = (L + R) / 2;
		update(l, r, x, L, mid, p+p);
		update(l, r, x, mid, R, p+p+1);
		s[p] = s[p+p] + s[p+p+1];
		v[p] = 0;
	}
}
long long query(int l, int r, int L = 0, int R = N, int p = 1) {
	if (r <= L || R <= l) return 0;
	push(p, L, R);
	if (l <= L && R <= r) {
		return s[p];
	}
	long long res = 0;
	int mid = (L + R) / 2;
	res += query(l, r, L, mid, p+p);
	res += query(l, r, mid, R, p+p+1);
	return res;
} 
int main() {
	int n, m, type, l, r, x;
	scanf("%d%d", &n, &m);
	for (int i = 0; i < N; i++) {
		v[i+N] = i+1;
	}
	while (m--) {
		scanf("%d%d%d", &type, &l, &r);
		if (type == 1) {
			scanf("%d", &x);
			update(l-1, r, x);
		} else {
			printf("%I64d\n", query(l-1, r));
		}
	}
	return 0;
}
