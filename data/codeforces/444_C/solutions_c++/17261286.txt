#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
using namespace std;
typedef long long ll;
const int maxn=111111;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
ll col[maxn<<2],sum[maxn<<2],add[maxn<<2];
void pushup(int rt){
	sum[rt]=sum[rt<<1]+sum[rt<<1|1];
	if(col[rt<<1]==col[rt<<1|1]&&col[rt<<1]!=0)col[rt]=col[rt<<1];
	else col[rt]=0;
}
void pushdown(int rt,int m)
{
	if(add[rt]){
		add[rt<<1]+=add[rt];
		add[rt<<1|1]+=add[rt];
		sum[rt<<1]+=add[rt]*(m-(m>>1));
		sum[rt<<1|1]+=add[rt]*(m>>1);
		add[rt]=0;
		if(col[rt]!=0)
			col[rt<<1]=col[rt<<1|1]=col[rt];
	}
}
void build(int l,int r,int rt)
{
	add[rt]=0;
	sum[rt]=0;
	col[rt]=0;
	if(l==r){
		col[rt]=l;
		return;
	}
	int m=(l+r)>>1;
	build(lson);
	build(rson);
	pushup(rt);
}
void updata(int L,int R,int c,int l,int r,int rt){
	if(L<=l&&r<=R&&col[rt]!=0){
		add[rt]+=abs(col[rt]-c);
		sum[rt]+=(ll)abs(col[rt]-c)*(r-l+1);
		col[rt]=c;
		return ;
	}
	pushdown(rt,r-l+1);
	int m=(l+r)>>1;
	if(L<=m)updata(L,R,c,lson);
	if(R>m)updata(L,R,c,rson);
	pushup(rt);
}
ll query(int L,int R,int l,int r,int rt)
{
	if(L<=l&&r<=R){
		return sum[rt];
	}
	pushdown(rt,r-l+1);
	int m=(l+r)>>1;
	ll res=0;
	if(L<=m)res+=query(L,R,lson);
	if (m<R)res+=query(L,R,rson);
	return res;
}
int main()
{
   	int n,m;scanf("%d%d",&n,&m);
	build(1,n,1);
	int s,a,b,x;
	while(m--)
	{
		scanf("%d",&s);
		if(s==1){
			scanf("%d%d%d",&a,&b,&x);
			updata(a,b,x,1,n,1);
		}else{
			scanf("%d%d",&a,&b);
			printf("%I64d\n",query(a,b,1,n,1));
		}
	}	
    return 0;
}