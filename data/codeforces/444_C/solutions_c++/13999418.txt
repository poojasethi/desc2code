#include<cstdio>
#include<cstdlib>
#define N 100005
#define MID int mid=(a[k].l+a[k].r)>>1
using namespace std;
typedef long long LL;
struct arr{int l,r,num;LL cnt,sum;}a[N*4];
int opt,L,R,color,n,m;
void Build(int k,int l,int r)
{
  a[k].l=l;a[k].r=r;
  if (l==r) {a[k].num=l;return;}
  int mid=(l+r)>>1;
  if (l<=mid) Build(k<<1,l,mid);
  if (r>mid) Build(k<<1|1,mid+1,r);
}
inline void Down(int k)
{
  if (!a[k].num) return;
  a[k<<1].num=a[k<<1|1].num=a[k].num;
  if (!a[k].cnt) return;
  a[k<<1].cnt+=a[k].cnt;a[k<<1|1].cnt+=a[k].cnt;
  a[k<<1].sum+=a[k].cnt*(a[k<<1].r-a[k<<1].l+1);
  a[k<<1|1].sum+=a[k].cnt*(a[k<<1|1].r-a[k<<1|1].l+1);
  a[k].cnt=0;
}
inline void Up(int k)
{
  a[k].sum=a[k<<1].sum+a[k<<1|1].sum;
  if ((a[k].num=a[k<<1].num)!=a[k<<1|1].num) a[k].num=0;
}
void Update(int k)
{
  if (a[k].l>=L&&a[k].r<=R&&a[k].num)
  {
    a[k].cnt+=abs(color-a[k].num);
    a[k].sum+=abs(color-a[k].num)*1ll*(a[k].r-a[k].l+1);
    a[k].num=color;return;
  }
  Down(k);MID;
  if (L<=mid) Update(k<<1);
  if (R>mid) Update(k<<1|1);
  Up(k);
}
LL Query(int k)
{
  if (a[k].l>=L&&a[k].r<=R) return a[k].sum;
  Down(k);MID;LL res=0;
  if (L<=mid) res+=Query(k<<1);
  if (R>mid) res+=Query(k<<1|1);
  return res;
}
int main()
{
  scanf("%d%d",&n,&m);
  Build(1,1,n);
  while (m--)
  {
    scanf("%d%d%d",&opt,&L,&R);
    if (opt==2) printf("%I64d\n",Query(1));
    else scanf("%d",&color),Update(1);
  }
  return 0;
}
