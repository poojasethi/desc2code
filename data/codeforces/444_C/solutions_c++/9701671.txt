#include <cstdio>
#include <algorithm>
#define lc (k<<1)
#define rc ((k<<1)|1)
using namespace std;
typedef long long ll;

const int N=100003;
ll re[4*N],ad[4*N];
int sv[4*N],type,l0,r0,x;

void build(int k,int l,int r)
{
  re[k]=ad[k]=sv[k]=0;
  if(l==r)
  {
    sv[k]=l;
    return;
  }
  int mid=(l+r)/2;
  build(lc,l,mid);
  build(rc,mid+1,r);
}

void pd(int k,int l,int r)
{
  if(ad[k])
  {
    int mid=(l+r)/2;
    sv[lc]=sv[rc]=sv[k];
    ad[lc]+=ad[k];
    ad[rc]+=ad[k];
    re[lc]+=1LL*ad[k]*(mid-l+1);
    re[rc]+=1LL*ad[k]*(r-mid);
    ad[k]=0;
  }
}

void up(int k,int l,int r)
{
  if(l!=r) pd(k,l,r);
  int mid=(l+r)/2;
  if(l0<=l&&r<=r0&&sv[k])
  {
    ad[k]+=abs(x-sv[k]);
    re[k]+=1LL*abs(x-sv[k])*(r-l+1);
    sv[k]=x;
    //printf("l=%d r=%d l0=%d r0=%d x=%d sv=%d re=%d\n",l,r,l0,r0,x,sv[k],re[k]);///
    return;
  }
  if(l0<=mid) up(lc,l,mid);
  if(r0>mid) up(rc,mid+1,r);
  re[k]=re[lc]+re[rc];
  if(sv[lc]==sv[rc]&&sv[lc]==x)
    sv[k]=x;
  else sv[k]=0;
}

ll query(int k,int l,int r)
{
  if(l!=r) pd(k,l,r);
  if(l0<=l&&r<=r0) return re[k];
  ll res=0;int mid=(l+r)/2;
  if(l0<=mid) res+=query(lc,l,mid);
  if(r0>mid) res+=query(rc,mid+1,r);
  return res;
}

int main()
{
  //freopen("e.in","r",stdin);
  int n,q;scanf("%d%d",&n,&q);
  build(1,1,n);
  while(q--)
  {
    scanf("%d%d%d",&type,&l0,&r0);
    if(type==1)
    {
      scanf("%d",&x);
      up(1,1,n);
    }
    if(type==2)
      printf("%I64d\n",query(1,1,n));
  }
  return 0;
}
     			 		 		  	 	 		      		