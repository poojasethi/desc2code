#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int MAXN = 100005, SZ = 1 << 17;
int n, m;
ll arr[2 * SZ] = {}, lazy[2 * SZ] = {}, val[2 * SZ] = {};

ll ab(ll x){ return x > 0 ? x : -x; }

void push(int p, int a, int b){
  arr[p] += lazy[p];
  if(a != b){
    lazy[2 * p] += lazy[p] / 2;
    lazy[2 * p + 1] += lazy[p] / 2;
    if(val[p] > 0) val[2 * p] = val[2 * p + 1] = val[p];
  }
  lazy[p] = 0;
}

void update(int p, int a, int b){
  int mid = (a + b) / 2;
  push(2 * p, a, mid), push(2 * p + 1, mid + 1, b);
  arr[p] = arr[2 * p] + arr[2 * p + 1];
  if(val[2 * p] == val[2 * p + 1]) val[p] = val[2 * p];
  else val[p] = 0;
}

void upd(int p, int a, int b, int l, int r, int v){
  push(p, a, b);
  if(l <= a && b <= r && val[p] > 0){
    lazy[p] += ab(v - val[p]) * (b - a + 1);
    val[p] = v;
    return;
  }
  if(b < l || r < a) return;
  int mid = (a + b) / 2;
  upd(2 * p, a, mid, l, r, v);
  upd(2 * p + 1, mid + 1, b, l, r, v);
  update(p, a, b);
}

ll sum(int p, int a, int b, int l, int r){
  push(p, a, b);
  if(b < l || r < a) return 0;
  if(l <= a && b <= r) return arr[p];
  int mid = (a + b) / 2;
  return sum(2 * p, a, mid, l, r) + sum(2 * p + 1, mid + 1, b, l, r);
}

int main(){
  ios::sync_with_stdio(0);
  cin.tie(0);
  cin >> n >> m;
  for(int i = 0; i < n; i++) val[SZ + i] = i + 1;
  for(int i = 0; i < m; i++){
    int t, l, r, x;
    cin >> t >> l >> r;
    if(t == 1){
      cin >> x;
      upd(1, 1, SZ, l, r, x);
    } else {
      cout << sum(1, 1, SZ, l, r) << '\n';
    }
  }
}
