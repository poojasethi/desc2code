#include<iostream>
#include<set>
#include<vector>
#include<algorithm>
#include<string>
#include<cmath>
using namespace std;
const int Maxn = int(1e5)+1000;
long long n , m , a[Maxn] , t[4*Maxn];
long long s[4*Maxn] , delta[4*Maxn];

void build(int v, int tl , int tr){
	if(tl == tr)
		t[v] = tl+1;
	else{
		int tm = (tl+tr)/2;
		build(v*2 , tl , tm);
		build(v*2+1 , tm+1 , tr);
		t[v] = -1;
	}
}

void paint(int v, int tl , int tr  , long long col){
	if(t[v] != -1){
		delta[v] += abs(t[v]-col);
		s[v]   += abs(t[v]-col)*(tr-tl+1);
	}
	else{
		int tm = (tl+tr)/2;
		paint(v*2 , tl , tm , col);
		paint(v*2+1 , tm+1, tr , col);
		s[v] = s[v*2] + s[v*2+1] + delta[v]*(tr-tl+1);
	}
	t[v] = col;
}

void color(int v, int tl , int tr , int l , int r , long long col){
	if(tl==l && tr==r)
		paint(v , tl , tr , col);
	else{
		if(t[v]!=-1) t[v*2] =t[v*2+1] = t[v] , t[v] = -1;
		int tm = (tl+tr)/2;
		if(l <= tm)
			color(v*2 , tl , tm , l , min(r , tm) , col);
		if(r > tm)
			color(v*2+1 , tm+1 , tr , max(tm+1 , l ) , r, col);
		s[v] = s[v*2] + s[v*2+1] + delta[v]*(tr - tl+1);
	}
}
long long get(int v, int tl , int tr, int l , int r){
	if(tl == l && tr == r)
		return s[v];
	else{
		long long a = delta[v]*(r-l+1);
		int tm = (tl+tr)/2;
		if(l <= tm )
			a+=get(v*2 , tl ,tm , l ,min(r , tm));
		if(r > tm)
			a+=get(v*2+1 , tm+1 , tr , max(l , tm+1) , r);
		return a;
	}
}

int main()
{
	cin >> n >> m;
	build(1 , 0 , n-1);
	for(int i = 0 ; i< m;i++){
		long long t , l ,r , x ; 
		cin >> t >> l >> r;
		--l , -- r;
		if(t==1){
			cin >> x;
			 color(1 , 0 , n-1 , l , r, x);
		}
		else{
			cout << get(1 , 0  ,n- 1, l  , r)<<endl;
		}
	}
	return 0;
}
