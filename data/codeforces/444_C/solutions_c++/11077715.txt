#include <cstdio>
#include <cmath>
using namespace std;
typedef long long LL;
const int maxn = 100000 + 10;
LL sum[maxn << 2], add[maxn << 2], col[maxn << 2];
int qL, qR, v, op;

void build(int o, int L, int R)
{
    if(L == R) { col[o] = L; return; }
    int M = (L + R) / 2;
    build(o<<1, L, M);
    build(o<<1|1, M+1, R);
}

inline void maintain(int o, int L, int R)
{
    sum[o] = sum[o<<1] + sum[o<<1|1] + add[o] * (R - L + 1);
}

void Paint(int o, int L, int R)
{
    if(col[o])
    {
        sum[o] += (LL)abs(col[o] - v) * (R - L + 1);
        add[o] += (LL)abs(col[o] - v);
    }
    else
    {
        int M = (L + R) / 2;
        Paint(o<<1, L, M);
        Paint(o<<1|1, M+1, R);
        maintain(o, L, R);
    }
    col[o] = 0;
}

void update(int o, int L, int R)
{
    if(qL <= L && qR >= R) { Paint(o, L, R); col[o] = v; return; }
    if(col[o]) col[o<<1] = col[o<<1|1] = col[o];
    col[o] = 0;
    int M = (L + R) / 2;
    if(qL <= M) update(o<<1, L, M);
    if(qR > M) update(o<<1|1, M+1, R);
    maintain(o, L, R);
}

LL query(int o, int L, int R, LL _add)
{
    if(qL <= L && qR >= R) return sum[o] + _add * (R - L + 1);
    LL ans = 0;
    int M = (L + R) / 2;
    if(qL <= M) ans += query(o<<1, L, M, _add + add[o]);
    if(qR > M) ans += query(o<<1|1, M+1, R, _add + add[o]);
    return ans;
}

int main()
{
    int n, m;
    scanf("%d%d", &n, &m);
    build(1, 1, n);
    while( m-- )
    {
        scanf("%d%d%d", &op, &qL, &qR);
        if(op == 1)
        {
            scanf("%d", &v);
            update(1, 1, n);
        }
        else printf("%I64d\n", query(1, 1, n, 0));
    }

    return 0;
}

	 	  				  		  	 	  	  		  	  	