#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef pair<ii, int> interval;
const int N = 1e5+5;

namespace sum {
  struct bit {
    ll a[N];
    void add(int i, ll x) {
      for (; i < N; i += i&-i) a[i] += x;
    }
    ll get(int i) {
      ll res = 0;
      for (; i; i -= i&-i) res += a[i];
      return res;
    }
  } m, c;
  void add(int l, int r, ll x) {
    m.add(l, x); c.add(l, -x*(l-1));
    m.add(r+1, -x); c.add(r+1, x*r);
  }
  ll query(int i) {
    return m.get(i)*i + c.get(i);
  }
}
int n, m;
set<interval> intervals;
set<interval>::iterator it;

void cut(int i) {
  it = intervals.lower_bound(interval(ii(i+1, i), 0));
  if (it == intervals.begin()) return;
  it--;
  int l = it->first.first, r = it->first.second, c = it->second;
  if (l <= i && r > i) {
    intervals.erase(it);
    intervals.insert(interval(ii(l, i), c));
    intervals.insert(interval(ii(i+1, r), c));
  }
}

int main() {
  cin>>n>>m;
  for (int i = 1; i <= n; i++) intervals.insert(interval(ii(i, i), i));
  for (int i = 0; i < m; i++) {
    int type, l, r, x;
    scanf("%d%d%d", &type, &l, &r);
    if (type == 1) {
      scanf("%d", &x);
      cut(l-1); cut(r);
      it = intervals.lower_bound(interval(ii(l, l), 0));
      while (it != intervals.end() && it->first.first <= r) {
        sum::add(it->first.first, it->first.second, abs(it->second - x));
        intervals.erase(it);
        it = intervals.lower_bound(interval(ii(l, l), 0));
      }
      intervals.insert(interval(ii(l, r), x));
    } else {
      cout<<sum::query(r) - sum::query(l-1)<<"\n";
    }
  }
  return 0;
}


	 	   	  			  		      				