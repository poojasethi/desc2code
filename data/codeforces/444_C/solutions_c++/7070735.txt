#include <cstdio>
#include <algorithm>

using namespace std;

typedef long long ll;

const ll N = 1 << 17;
ll n, m;
ll la[ N * 2 + 10 ], c[ N * 2 + 10 ], s[ N * 2 + 10 ];

void lp( ll i, ll v )
{
    la[ i << 1 ] += la[ i ]; s[ i << 1 ] += la[ i ] * v;
    la[ i << 1 | 1 ] += la[ i ]; s[ i << 1 | 1 ] += la[ i ] * v;
    if ( c[ i ] ) c[ i << 1 ] = c[ i << 1 | 1 ] = c[ i ];
    la[ i ] = 0;
}

ll q( ll l, ll r, ll L, ll R, ll i )
{
    if ( r < L || l > R ) return 0;
    if ( l >= L && r <= R ) return s[ i ];
    lp( i, ( r - l + 1 ) >> 1 );
    ll m = ( l + r ) >> 1, rt = 0;
    rt += q( l, m, L, R, i << 1 );
    rt += q( m + 1, r, L, R, i << 1 | 1 );
    return rt;
}

void u( ll l, ll r, ll L, ll R, ll x, ll i )
{
    if ( r < L || l > R ) return;
    if ( l >= L && r <= R && c[ i ] )
    {
        s[ i ] += abs( c[ i ] - x ) * ( r - l + 1 );
        la[ i ] += abs( c[ i ] - x );
        c[ i ] = x;
        return;
    }
    lp( i, ( r - l + 1 ) >> 1 );
    ll m = ( l + r ) >> 1;
    u( l, m, L, R, x, i << 1 );
    u( m + 1, r, L, R, x, i << 1 | 1 );
    if ( c[ i << 1 ] == c[ i << 1 | 1 ] ) c[ i ] = c[ i << 1 ]; else
    c[ i ] = 0;
    s[ i ] = s[ i << 1 ] + s[ i << 1 | 1 ];
}

int main( )
{
    scanf( "%I64d %I64d", &n, &m );
    for ( ll i = 1; i <= n; i++ ) c[ N + i - 1 ] = i;
    while ( m-- )
    {
        ll t, l, r, x;
        scanf( "%I64d %I64d %I64d", &t, &l, &r );
        if ( t == 1 )
        {
            scanf( "%I64d", &x );
            u( 1, N, l, r, x, 1 );
        } else
        printf( "%I64d\n", q( 1, N, l, r, 1 ) );
    }
    return 0;
}
