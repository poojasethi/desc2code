#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#define L(__) (__ << 1)
#define R(__) (L(__) + 1)
#define N 100005
#define LL long long
#define oo (1<<30)
#define TAT "%I64d"
using namespace std;
LL sum[4*N],add[4*N];
int n,m,A[N],col[4*N];
void push(int t,int l,int r);
void paint(int t,int l,int r,LL v,int d)
{
	sum[t]+=1LL*(r-l+1)*v;
	add[t]+=v,col[t]=d;
}
void push(int t,int l,int r)
{
	int mid=(l+r)>>1;
	if(col[t]==-1) return ;
	paint(L(t),l,mid,add[t],col[t]);
	paint(R(t),mid+1,r,add[t],col[t]);
	add[t]=0;
}
void update(int x)
{
	sum[x]=sum[L(x)]+sum[R(x)];
	col[x]=(col[L(x)]==col[R(x)]) ? col[L(x)] : -1;
}
void build(int t,int l,int r)
{
	int mid=(l+r)>>1;
	if(l==r){ col[t]=A[l]; return ;}
	build(L(t),l,mid),build(R(t),mid+1,r);
	update(t);
}
void modify(int t,int l,int r,int l1,int r1,int d)
{
	int mid=(l+r)>>1;
	if(l>r1||r<l1) return ;
	if(l>=l1&&r<=r1&&col[t]!=-1){ paint(t,l,r,abs(col[t]-d),d); return ;}
	push(t,l,r);
	modify(L(t),l,mid,l1,r1,d);
	modify(R(t),mid+1,r,l1,r1,d);
	update(t);
}
LL query(int t,int l,int r,int l1,int r1)
{
	int mid=(l+r)>>1;
	if(l>r1||r<l1) return 0;
	if(l>=l1&&r<=r1) return sum[t];
	push(t,l,r);
  LL res=query(L(t),l,mid,l1,r1)+query(R(t),mid+1,r,l1,r1);
	return res;
}
int main()
{
	int i,num,l,r,d;
	scanf("%d %d",&n,&m);
	for(i=1;i<=n;i++)
		A[i]=i,sum[i]=0;
	build(1,1,n);
	for(i=1;i<=m;i++){
		scanf("%d",&num);
		if(num==1){
			scanf("%d %d %d",&l,&r,&d);
			modify(1,1,n,l,r,d);
		  }
		else{
		  scanf("%d %d",&l,&r);
			printf(TAT"\n",query(1,1,n,l,r));
		  }
	  }
	return 0;
}