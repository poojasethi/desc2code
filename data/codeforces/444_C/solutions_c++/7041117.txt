#include <cstdio>
#include <iostream>
#include <cstring>
#include <cmath>
#include <vector>
#include <set>
#include <queue>
#include <algorithm>
using namespace std;
#define INF 0x3f3f3f3f
#define LL long long
#define uLL unsigned long long
#define MX 100005

const int SZ=300;
int N;
LL add[MX], gadd[MX], gsum[MX];
int col[MX], gcol[MX];

void down(int g){
	for(int i=g*SZ; i<(g+1)*SZ; ++i)
		col[i]=gcol[g];
	gcol[g]=0;
}

void updateUnit(int l, int x){
	int g=l/SZ;
	if(gcol[g]!=0){
		down(g);
		int t=abs(x-col[l]);
		add[l]+=t;
		gsum[g]+=t;
		col[l]=x;
	} else{
		int t=abs(x-col[l]);
		add[l]+=t;
		gsum[g]+=t;
		col[l]=x;
	}
}

void updateGroup(int g, int x){
	if(gcol[g]==0){
		for(int i=SZ*g; i<SZ*(g+1); ++i){
			int t=abs(x-col[i]);
			add[i]+=t;
			gsum[g]+=t;
		}
		gcol[g]=x;
	} else{
		int t=abs(x-gcol[g]);
		gadd[g]+=t;
		gsum[g]+=(LL)SZ*t;
		gcol[g]=x;
	}
}

void update(int l, int r, int x){
	while(l<=r && l%SZ!=0){
		updateUnit(l, x);
		++l;
	}
	while(l+SZ<=r){
		updateGroup(l/SZ, x);
		l+=SZ;
	}
	while(l<=r){
		updateUnit(l, x);
		++l;
	}
}

LL query(int l, int r){
	LL ret=0;
	while(l<=r && l%SZ!=0){
		ret+=gadd[l/SZ]+add[l];
		++l;
	}
	while(l+SZ<=r){
		ret+=gsum[l/SZ];
		l+=SZ;
	}
	while(l<=r){
		ret+=gadd[l/SZ]+add[l];
		++l;
	}
	return ret;
}

int main(){
	//freopen("in", "r", stdin);
	int M; scanf("%d%d", &N, &M);
	for(int i=0; i<N; ++i) col[i]=i+1;
	while(M--){
		int type, x, y; scanf("%d%d%d", &type, &x, &y);
		if(type==1){
			int z; scanf("%d", &z);
			update(x-1, y-1, z);
		} else{
			cout<<query(x-1, y-1)<<endl;
		}
	}
	return 0;
}
