#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

struct point {double x,y;};
#define eps 1.0E-9
#define PI acos(-1.0)

double angle(point P, point Q){
    double dx = Q.x - P.x, dy = Q.y - P.y;
    return atan2(dy, dx);
}

double normalize(double theta){
    while(theta < -PI) theta += 2.0 * PI;
    while(theta > PI) theta -= 2.0 * PI;
    return theta;
}

double dist(point P, point Q){
    double dx = P.x - Q.x, dy = P.y - Q.y;
    return sqrt(dx*dx + dy*dy);
}

typedef long long ll;

int N;
point O[1010];
double r[1010];

int func(void){
    int ans=1,i,j,k;
    
    REP(i,N){
        int tmp = 1;
        vector <pair <double, int> > v;
        
        REP(j,N) if(j != i){
            double mid = angle(O[i], O[j]);
            double d = dist(O[i], O[j]);
            
            {
                double low = mid - asin((r[j] - r[i]) / d);
                double high = mid - asin((-r[j] - r[i]) / d) - eps;
                low = normalize(low);
                high = normalize(high);
                v.push_back(make_pair(low, 1));
                v.push_back(make_pair(high, -1));
                if(low > high) tmp++;
            }
            
            {
                double low = mid + PI - asin((r[j] + r[i]) / d) + eps;
                double high = mid + PI - asin((-r[j] + r[i]) / d);
                low = normalize(low);
                high = normalize(high);
                v.push_back(make_pair(low, 1));
                v.push_back(make_pair(high, -1));
                if(low > high) tmp++;
            }
        }
        
        sort(v.begin(),v.end());
        REP(j,v.size()){
            ans = max(ans, tmp);
            tmp += v[j].second;
        }
    }
    
    return ans;
}

int main(void){
    int i;
    ll K;
    
    cin >> N >> K;
    REP(i,N) cin >> O[i].x >> O[i].y >> r[i];
    
    ll cnt = func();
    ll ans = N + cnt * K + K * (K-1) / 2;
    cout << ans << endl;
    
    return 0;
}
