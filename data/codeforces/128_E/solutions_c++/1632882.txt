#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <set>
#include <map>
#include <vector>

using namespace std;
#define rep(i, l, r)	for (int i = l; i <= r; i++)
#define drep(i, r, l)	for (int i = r; i >= l; i--)
#define max(a, b)	(a > b ? a : b)
#define min(a, b)	(a < b ? a : b)
#define LL	long long
#define Travel(u)	for (int i = start[u], v; v = e[i].a, i; i = e[i].next)
#define pb push_back
#define sqr(x) ((x)*(x))
#define eps 1e-8
#define pi 3.1415926535897
int tot, n, ans = 1, k;
double r[1000008];
struct point
{
    	double x , y;
       	point(){}
       	point(double x1 , double y1){x = x1; y = y1;}
       	inline double operator%(const point &a)const{ return x*a.y - y*a.x; }
       	inline double operator*(const point &a)const{ return x*a.x + y*a.y; }
       	inline point operator+(const point &a)const{ return point(x + a.x , y + a.y); }
       	inline point operator-(const point &a)const{ return point(x - a.x , y - a.y); }
       	inline point operator*(double k)const{ return point(x*k , y*k); }
       	inline point operator/(double k)const{ return point(x/k , y/k); }
       	inline double dis(){ return sqrt(x*x + y*y); }
      	inline void out() {printf("%.10lf %.10lf\n", x, y);}
       	inline void read() {scanf("%lf%lf", &x, &y);}
}a[1000008]; 
struct arr
{
	double v; int i;
	bool operator<(const arr &t)const
    {
		return v < t.v - 1e-9 || v < t.v + 1e-9 && i < t.i;
	}	
}b[1000008];

void Get_out(int i, int j, double &x1, double &x2)
{
	double t = atan2(a[j].y - a[i].y, a[j].x - a[i].x);
	double t1 = acos(fabs(r[i] - r[j]) / (a[i] - a[j]).dis());
	if (r[i] <= r[j]) t1 = pi - t1;
	x1 = t - t1; x2 = t + t1;
	if (x1 < -pi) x1 += 2*pi; if (x2 > pi) x2 -= 2*pi;
}

void Get_in(int i, int j, double &x1, double &x2)
{
	double t = atan2(a[j].y - a[i].y, a[j].x - a[i].x);
	double t1 = acos((r[i] + r[j]) / (a[i] - a[j]).dis());
	x1 = t - t1; x2 = t + t1;
	if (x1 < -pi) x1 += 2*pi; if (x2 > pi) x2 -= 2*pi;
}

void Add(double l, double r)
{
	if (l > r)
	{
		b[++tot].v = l; b[tot].i = 1;
		b[++tot].v = pi; b[tot].i = -1;
		b[++tot].v = -pi; b[tot].i = 1;
		b[++tot].v = r; b[tot].i = -1;
	}
	else
	{
		b[++tot].v = l; b[tot].i = 1;
		b[++tot].v = r; b[tot].i = -1;
	}
}

void Dp()
{
	sort(b+1, b+tot+1);	
	int tmp = 0;
	rep(i,1,tot)
	{
		tmp += b[i].i;
		ans = max(tmp + 1, ans);	
	}
}

int main()
{
    scanf("%d%d", &n, &k);
    rep(i,1,n)
    {
		scanf("%lf%lf%lf", &a[i].x, &a[i].y, &r[i]);	
	}
	rep(i,1,n)
	{
		tot = 0;
		double p1, p2, p3, p4;
		rep(j,1,n)	if (i != j)
		{
			Get_out(i, j, p1, p2);
			Get_in(i, j, p3, p4);
			Add(p1, p3); Add(p4, p2);
		}
		Dp();
	}
	printf("%I64d\n", n + (ans-1)*k + (LL)k*(k+1)/2);
    return 0;   
} 
