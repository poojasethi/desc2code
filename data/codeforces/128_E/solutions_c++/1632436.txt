#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <complex>
using namespace std;
#define rep(x, n) for (int x = 1; x <= n; ++x)
#define drp(x, n) for (int x = n; x; --x)
#define FOR(x, l, r) for (int x = l; x <= r; ++x)
#define forside(i, x) for (int i = start[x]; i; i = e[i].l)
#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))
typedef long long int64;
typedef pair<int, int> PII;
typedef complex<double> dot;
#define eps 1e-9
#define Maxn 1005
const double pi = acos(-1.0);
struct seg
{
    double v; int s;
    bool operator<(const seg &o)const
        {return v < o.v - eps || (fabs(v - o.v) <= eps && s > o.s);}
}p[Maxn * 8];
struct cicle
{
    dot o; int r;
    void read()
    {
        int x, y;
        scanf("%d%d%d", &x, &y, &r);
        real(o) = x; imag(o) = y;
    }
}c[Maxn];
int n, k, m, s;

void def(double &a)
{
    while (a > pi + eps) a -= 2 * pi;
    while (a <= -pi + eps) a += 2 * pi;
}

inline void add(double l, double r)
{
    l += eps; r -= eps;
    if (l - r > eps) return;
    def(l); def(r);
    if (l > r + eps)
    {
        p[++m].v = l; p[m].s = 1;
        p[++m].v = pi; p[m].s = -1;
        p[++m].v = -pi + eps; p[m].s = 1;
        p[++m].v = r; p[m].s = -1;
    }
    else
    {
        p[++m].v = l; p[m].s = 1;
        p[++m].v = r; p[m].s = -1;
    }
}

int main()
{
    scanf("%d%d", &n, &k);
    rep(i, n) c[i].read();
    rep(i, n)
    {
        m = 0;
        rep(j, n) if (i != j)
        {
            double d, ang, a1, a2;
            d = abs(c[j].o - c[i].o);
            ang = arg(c[j].o - c[i].o);
            a1 = 0.5 * pi - asin((c[j].r + c[i].r) / d);
            a2 = 0.5 * pi + asin((c[j].r - c[i].r) / d);
            add(ang + a1, ang + a2);
            add(ang - a2, ang - a1);
        }
        sort(p + 1, p + 1 + m);
        int now = 0;
        rep(j, m)
        {
            now += p[j].s;
            s = max(s, now);
        }
    }
    long long ans = (int64)(k + 1) * k / 2 + (int64)(k) * s + n;
    cout << ans << endl;
    return 0;
}

