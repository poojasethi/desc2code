#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;
const double pi = acos(-1);
double x[1000], y[1000], r[1000];
int sign(double x) {
    if (fabs(x) < 1e-8) return 0;
    return (x > 0) ? 1 : -1;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    
    int n, k;
    scanf("%d%d", &n, &k);
    for (int i = 0; i < n; i ++)
        scanf("%lf%lf%lf", &x[i], &y[i], &r[i]);
    
    int maxv = 0;
    for (int i = 0; i < n; i ++) {
        vector< pair<double, int> > L;
        for (int j = 0; j < n; j ++) {
            if (i == j) continue;
            double d = sqrt((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]));
            double alpha = acos((r[i] - r[j]) / d);
            double beta = acos((r[i] + r[j]) / d);
            double theta = atan2(y[j] - y[i], x[j] - x[i]);
            for (double angle = -2 * pi; angle <= 2 * pi; angle += 2 * pi) {
                L.push_back(make_pair(theta - alpha + angle, 1));
                L.push_back(make_pair(theta - beta + angle, -1));
                L.push_back(make_pair(theta + beta + angle, 1));
                L.push_back(make_pair(theta + alpha + angle, -1));
            }
        }
        sort(L.begin(), L.end());
        int tot = 0;
        for (int i = 0; i < L.size(); i ++) {
            tot += L[i].second;
            maxv = max(maxv, tot);
        }
    }
    
    long long res = (long long)(k + 1) * k / 2 + 1;
    res += (long long)(k + 1) * maxv + n - maxv - 1;
    printf("%I64d\n", res);
    
    return 0;
}

