#include <bits/stdc++.h>
using namespace std;

const int maxn = 1e5 + 5;
bool notRoot[maxn];
int n, m, u, v, a[maxn];
vector <int> ans, G[maxn];

bool dfs(int u, int p) {
	for(int i = 0; i < G[u].size(); i++) {
		int v = G[u][i];
		if(v == p) {
			continue;
		}
		if(a[v] != v && a[v] != a[u]) {
			return false;
		}
		if(dfs(v, u) == false) {
			return false;
		}
	}
	if(a[u] == u) {
		ans.push_back(u);
	}
	return true;
}

int main() {
	scanf("%d%d", &n, &m);
	while(m--) {
		scanf("%d%d", &u, &v);
		G[u].push_back(v);
		notRoot[v] = true;
	}
	for(int i = 1; i <= n; i++) {
		scanf("%d", &a[i]);
	}
	for(int i = 1; i <= n; i++) {
		if(notRoot[i] == true) {
			continue;
		}
		if(dfs(i, -1) == false) {
			puts("-1");
			return 0;
		}
	}
	printf("%d\n", ans.size());
	for(int i = 0; i < ans.size(); i++) {
		printf("%d\n", ans[i]);
	}
	return 0;
}
