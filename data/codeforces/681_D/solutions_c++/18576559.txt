#include <iostream>
#include <cstdio>
#include <queue>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

#define pb push_back

vector<int> graph[100001];
int arr[100001];
int depth[100001];
bool root[100001];
bool g=1;
map<int,bool> mp;

void dfs1(int v){
	for(int i=0;i<graph[v].size();i++){
		if(arr[v]!=arr[graph[v][i]]&&arr[graph[v][i]]!=graph[v][i])
			g=0;
		depth[graph[v][i]]=1+depth[v];
		dfs1(graph[v][i]);
	}
}

bool cmp(int a,int b){
	return depth[a]>depth[b];
}

int main(){
	int n,m;
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		root[i]=1;
	for(int i=0;i<m;i++){
		int p,q;
		scanf("%d%d",&p,&q);
		graph[p].pb(q);
		root[q]=0;
	}
	for(int i=1;i<=n;i++){
		scanf("%d",&arr[i]);
		mp[arr[i]]=1;
	}
	for(int i=1;i<=n;i++)
		if(root[i])
			dfs1(i);
	if(!g){
		printf("-1\n");
		return 0;
	}
	vector<int> ans;
	for(map<int,bool>::iterator it=mp.begin();it!=mp.end();it++)
		ans.pb(it->first);
	sort(ans.begin(),ans.end(),cmp);
	printf("%d\n",(int)ans.size());
	for(int i=0;i<ans.size();i++)
		printf("%d\n",ans[i]);
}