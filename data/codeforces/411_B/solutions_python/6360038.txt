import sys
import math
from collections import defaultdict

def main():
  inputs = sys.stdin.readline().split()
  n = int(inputs[0])
  m = int(inputs[1])
  k = int(inputs[2])

  # Keep track of if a given cell is locked
  locked = [False]*(k+1)

  # Keep track of which cycle a processor was locked
  locked_on = [0]*n

  values = [[0]*m for i in range(n)]

  for i in range(n):
    line = sys.stdin.readline().split()
    for j in range(m):
      values[i][j] = int(line[j])

  for j in range(m):
    access_counts = defaultdict(int)

    # Preprocess cycle to know ahead of time which cells will deadlock
    for i in range(n):
      # Skip if the processor is already locked
      if locked_on[i] != 0:
        continue
      access_counts[values[i][j]] += 1

    for i in range(n):
      # Skip if the processor is already locked
      if locked_on[i] != 0:
        continue

      value = values[i][j]

      if value == 0:
        continue

      # Check if the cell was already locked or that
      # it's accessed by more than one processor this cycle
      if locked[value] or access_counts[value] > 1:
        locked_on[i] = j+1
        locked[value] = True

  for index in locked_on:
    print index

if __name__ == '__main__':
  main()
