#include <iostream>
#include <cstdlib>
#include <vector>

using namespace std;

typedef long long int ll;

ll sq(ll x)
{
  return x*x;
}

const int limite=1000000;

int esprimo[limite];
ll division[limite];
int primosant[limite];
vector<int> primo;
int cuantos[limite];
int raiz[limite];
vector<ll> criba[limite];
int root;

int cuantosbase[limite];
int raizbase[limite];
vector<ll> cribabase[limite];

int computacribabase(int valor,int ip)
{
  ip=min(ip,cuantosbase[valor]-1);
  if (ip<0) return max(0,valor-1);
  return cribabase[valor][ip];
}

ll n;

ll computacriba(ll divisor,int ip)
{
  if (root<divisor) return computacribabase(n/divisor,ip);
  ip=min(ip,cuantos[divisor]-1);
  if (ip<0) return max(0LL,n/divisor-1);
  return criba[divisor][ip];
}

int main()
{
  ll sol=0;
  cin>>n;
  root=1;
  for (;sq(root+1)<=n;root++) ;
  //cout<<"root "<<root<<endl;
  for (int i=2;i<=root;i++)
    esprimo[i]=1;
  for (int i=2;i<=root;i++) {
    if (esprimo[i]) {
      if (ll(i)*i*i<=n) sol++;
      primo.push_back(i);
      for (int j=i+i;j<=root;j+=i)
	esprimo[j]=0;
    }
    primosant[i]=esprimo[i]+primosant[i-1];
  }
  raizbase[1]=1;
  for (int i=2;i<=root;i++) {
    for (raizbase[i]=raizbase[i-1];sq(raizbase[i]+1)<=i;raizbase[i]++) ;
    int &cuan=cuantosbase[i];
    cuan=primosant[raizbase[i]];
    vector<ll> &c=cribabase[i];
    c=vector<ll> (cuan);
    if (cuan>0) {
      c[0]=(i+1)/2;
      for (int j=1;j<cuan;j++)
	c[j]=c[j-1]-(computacribabase(i/primo[j],j-1)-j);
    }
    /*
    cout<<i<<":";
    for (int j=0;j<cuan;j++) cout<<c[j]<<",";
    cout<<endl;
    */
  }
  //cout<<endl;
  for (int i=2;i<=root;i++)
    division[i]=n/i;
  raiz[root+1]=1;
  for (int i=root;i>=2;i--) {
    for (raiz[i]=raiz[i+1];sq(raiz[i]+1)<=division[i];raiz[i]++) ;
    int &cuan=cuantos[i];
    ll div=division[i];
    cuan=primosant[raiz[i]];
    vector<ll> &c=criba[i];
    c=vector<ll> (cuan);
    if (cuan>0) {
      c[0]=(div+1)/2;
      for (int j=1;j<cuan;j++)
	c[j]=c[j-1]-(computacriba(i*ll(primo[j]),j-1)-j);
    }
    if (esprimo[i] and sq(i)<n)
      sol+=(cuan>0?c.back():div-1)-primosant[i];
    /*
    cout<<i<<"("<<div<<")"<<":";
    for (int j=0;j<cuan;j++) cout<<c[j]<<",";
    cout<<endl;
    cout<<"sol "<<sol<<endl;
    */
  }
  cout<<sol<<endl;
}
