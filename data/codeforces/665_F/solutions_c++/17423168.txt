#include <bits/stdc++.h>
using namespace std;
typedef long long LL;

const int N = (int) 4e5 + 10;
const int M = (int) 1e9 + 7;
bool np[N];
LL p[N];
int pp=0;

void eratos() {
    np[0]=np[1]=true;
    for (int i=2; i*i<N; i++) if (!np[i])
        for (int j=i*i; j<N; j+=i) np[j]=true;
    for (int i=2; i<N; i++)
    if (!np[i]) p[++pp]=i;
}

LL power(LL a, LL k) {
    LL P = 1;
    while (k) {
        if (k & 1) P = P * a;
        a = a * a;
        k >>= 1;
    }
    return P;
}

LL power(LL a, LL k, LL M) {
    LL P=1;
    for (a=a%M; k; k/=2)
    { if (k&1) P=P*a%M; a=a*a%M; }
    return P;
}

LL root(LL n, LL k) {
    LL x = pow(n, 1.0/k);
    while (power(x, k)%M==power(x, k, M) && power(x, k)<n) x++;
    while (power(x, k)%M!=power(x, k, M) || power(x, k)>n) x--;
    return x;
}

map<LL, LL> Phi[N];

LL phi(LL x, int a) {
    if (Phi[a].count(x)) return Phi[a][x];
    if (a==1) return (x+1)/2;
    LL Result = phi(x, a-1) - phi(x/p[a], a-1);
    return Phi[a][x] = Result;
}

LL pi(LL x) {
    if (x<N)
        return upper_bound(p+1, p+pp+1, x) - (p+1);
    LL a = pi(root(x, 4));
    LL b = pi(root(x, 2));
    LL c = pi(root(x, 3));
    LL Sum = phi(x, a) + (b+a-2)*(b-a+1)/2;
    for (int i=a+1; i<=b; i++)
        Sum -= pi(x/p[i]);
    for (int i=a+1; i<=c; i++) {
        LL bi = pi(root(x/p[i], 2));
        for (int j=i; j<=bi; j++)
        Sum -= pi(x/p[i]/p[j]) - (j-1);
    }
    return Sum;
}

int main() {
    #ifdef LOCAL
        //freopen("Data.inp", "r", stdin);
        //freopen("Data.out", "w", stdout);
    #endif

    LL n;
    cin >> n;

    LL ans = 0; eratos();
    for (int i = 1; p[i] * p[i] * p[i] <= n; ++i) ans++;
    for (int i = 1; p[i] * p[i] <= n; ++i) {
        LL r = n / p[i];
        ans += pi(r) - i;
    }

    cout << ans;
    return 0;
}
