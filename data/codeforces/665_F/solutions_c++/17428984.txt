#include<bits/stdc++.h>
#define N 800005
#define M 34000005
using namespace std;
bool _S;
const int P=2e7+9;
typedef long long LL;LL n,ans;
int prime[N],flag[N],valid[N],i,j,S,cnt;
struct Hash{
	LL Go[M],Value[M];int Next[M],End[P],cnt;
	inline LL Query(LL now){
	  int u=now%P;
		for (int i=End[u];i;i=Next[i])
			if (Go[i]==now) return Value[i];
		return -1;
  }
  inline void Insert(LL now,LL ret){
  	int u=now%P;
  	Go[++cnt]=now;Value[cnt]=ret;
		Next[cnt]=End[u];End[u]=cnt;
		//if (cnt%1000000==0) printf("%d\n",cnt);
  }
}G;
bool _T;
int ID(LL x){return x<=S?x:2*S+1-n/x;}
LL Count(int m,LL n){
	if (!m) return n;
	LL ret=G.Query(n*(S+1)+m);
	if (ret!=-1) return ret;
	if (1ll*prime[m]*prime[m]>n){
		int id=valid[ID(n)];
		ret=Count(id,n)-(m-id);
  }else
  	ret=Count(m-1,n)-Count(m-1,n/prime[m]);
  G.Insert(n*(S+1)+m,ret);
  //printf("%d %d %I64d\n",m,n,ret);
	return ret;
	//f[i][j]=f[i-1][j]-1
	//f[i][j]=f[i-1][j]-f[i-1][j/prime[i]]
}
int main(){
	//printf("%.5f\n",(&_T-&_S)/1024./1024.);
	cin>>n;
	for (S=1;1ll*(S+1)*(S+1)<=n;++S);
	for (i=2;i<=S;i++){
		if (!flag[i]) prime[++cnt]=i,flag[i]=i;
		for (j=1;j<=cnt&&prime[j]*i<=S;j++)
			flag[prime[j]*i]=prime[j];
	}
	for (i=1;i<=cnt&&1ll*prime[i]*prime[i]*prime[i]<=n;i++) ans++;
	for (i=1;i<=S;i++)
		valid[i]=upper_bound(prime+1,prime+cnt+1,sqrt(i))-(prime+1);
	for (i=1;i<=S;i++)
		valid[ID(n/i)]=upper_bound(prime+1,prime+cnt+1,sqrt(n/i))-(prime+1);
	//cout<<Count(cnt,n)<<endl;
	for (i=1;i<=cnt;i++)
		ans+=Count(cnt,n/prime[i])-1+cnt-i;
	cout<<ans<<endl;
	//printf("%d\n",clock());			
}