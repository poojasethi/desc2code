num = int(raw_input())
mojilist = []
for i in range(num):
    mojilist.append(raw_input())


def alpha(mojilist,allnode):
    for i in range(len(mojilist)-1):
        new =  difalpha(mojilist[i],mojilist[i+1])
        if new == True:
            continue
        if new == False:
            return False
        else:
            allnode.append(new)

def difalpha(first,second):
    if first == "":
        return True
    if second == "":
        return False
    if first[0] == second[0]:
        return difalpha(first[1:],second[1:])
    else:
        return (first[0],second[0])

def visit(node,allnode,visited,ans):
    if visited.get(node,0) == 1:
        return False
    elif node not in visited:
        visited[node] = 1
        for new in allnode:
            if new[0] == node:
                if visit(new[1],allnode,visited,ans) == False:
                    return False
        visited[node] = 2
        ans.insert(0,node)

allnode = []
visited = {}
ans = []
lower = [chr(i) for i in range(97,97+26)]


if alpha(mojilist,allnode) == False:
    print "Impossible"
elif allnode == []:
    print "".join(lower)
else:
    for each in allnode:
        if each[0] not in visited:
            visit(each[0],allnode,visited,ans)
    test = 0
    for i in visited:
        if visited[i] == 1:
            test = 1
            print "Impossible"
            break
    if test == 0:
        for i in ans:
            if i in lower:
                lower.remove(i)
        print "".join(ans+lower)


# def DFS_alpha(allnode):
#     ans = []
#     notvisited = allnode
#     test = [allnode[0]]
#     while test != []:
#         for i in range(len(notvisited)):
#             if notvisited[i][0] == test[0][1]:
#                 test = [notvisited[i]] + test
#                 ans.append(test[0][0])
#                 del notvisited[i]
#                 break
#         del test[0]
#     if notvisited != []:
#         return "Impossible"
#     else:
#         lower = ["abcdefghijklmnopqrstuvwxyz"]
#         for i in ans:
#             if i in lower:
#                 lower.remove(i)
#         print "".join(ans + lower)
