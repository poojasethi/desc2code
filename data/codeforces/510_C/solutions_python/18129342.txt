def dfs(adj, visited, source, order, modify):

	if visited[source] == 0:
		visited[source] = 1
		for u in adj[source]:
			if visited[u] == 0:
				dfs(adj, visited, u, order, modify)
			if visited[u] == 1:
				#print 'gg'
				return -1
		if modify[source] == 1:
			order.append(source)
		visited[source] *= -1
		

def toposort(adj, order, modify):
	visited = [0]*len(adj)
	for source in range(len(adj)):
		if visited[source] == 0:
			if dfs(adj, visited, source, order, modify)==-1:
				return []

	order.reverse()
	return order

ans = ''
n = int(raw_input())
names = []
for _  in range(n):
	names.append(raw_input())

modify = [0]*26
adj = {}
is_modify, stop = False,True
for i in range(26): adj[i] = []
for i in range(n-1):
	a, b = len(names[i]), len(names[i+1])
	j = 0
	while j<a and j<b:
		if names[i][j] != names[i+1][j]:
			adj[ord(names[i][j])-ord('a')].append(ord(names[i+1][j])-ord('a'))
			modify[ord(names[i][j])-ord('a')] = 1
			modify[ord(names[i+1][j])-ord('a')] = 1
			is_modify = True
			break
		j += 1

	if b<a and is_modify == False:
		print 'Impossible'
		stop = False
		exit(0)
#print adj
#print modify
if stop:
	if is_modify == False:
		print 'abcdefghijklmnopqrstuvwxyz'
	else:
		order = toposort(adj,[],modify)
		#print order
		#assert False
		if len(order) == 0:
			print 'Impossible'
		else:
			for i in range(26):
				if modify[i] == 0:
					ans += chr(ord('a') + i)

			for i in order:
				ans += chr(ord('a') + i)

			print ans


