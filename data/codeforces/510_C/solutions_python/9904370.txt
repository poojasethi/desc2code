import sys

words=[]
no_income=[]
new_alpha_beta=[]
cnt_income=[0 for i in range(26)]
tree=[[] for i in range(26)]


N=input()

for i in range(N):
    inp=raw_input()
    words.append(inp)



for i in range(N-1):
    p=0
    diff=False

    while(p<len(words[i]) and p<len(words[i+1])):
        if(words[i][p]!=words[i+1][p]):
                diff=True
                break
        p+=1
        

    if(diff==False and len(words[i])>len(words[i+1])):
       print "Impossible"
       sys.exit()

    elif(diff==True):
        tree[ ord(words[i][p])-ord('a') ].append( ord(words[i+1][p])-ord('a') )
        cnt_income[ ord(words[i+1][p])-ord('a') ] += 1



#TOPOLOGICAL SORT
for i in range(26):
    if(cnt_income[i]==0):
        no_income.append(i)


while(len(no_income)>0):
    node=no_income[len(no_income)-1]
    no_income.pop()

    new_alpha_beta.append(node)

    for i in range(len(tree[node])):
        conn_node=tree[node][i]
        cnt_income[conn_node] -= 1

        if(cnt_income[conn_node] == 0):
            no_income.append(conn_node)



if(len(new_alpha_beta)==26):
    for i in range(len(new_alpha_beta)):
        new_alpha_beta[i]=chr(new_alpha_beta[i]+ord('a'))
        
    print ''.join(new_alpha_beta)


elif(len(new_alpha_beta)<26):
    print "Impossible"
