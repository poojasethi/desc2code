def main():
    # import sys
    # sys.stdin = open('input.txt','r')
    mat = []
    graph = [[] for i in range(26)]
    n = input()
    vertices = set()
    maxm = -1
    for i in range(n):
        s = map(str,raw_input())
        for j in range(len(s)):
            s[j] = (ord(s[j]) - 97)
        maxm = max(len(s),maxm)
        mat.append(s)

    for i in range(n-1):
        flag = True
        for j in range(min(len(mat[i]),len(mat[i + 1]))):
            if mat[i + 1][j] != mat[i][j]:
                k = 0
                # graph[mat[i][k]].append(mat[i][j])
                # vertices.add(mat[i][k])
                # vertices.add(mat[i][j])

                graph[mat[i][j]].append(mat[i + 1][j])
                vertices.add(mat[i][j])
                vertices.add(mat[i + 1][j])
                flag = False
                break
        if len(mat[i]) > len(mat[i + 1]) and flag:
            print 'Impossible'
            exit(0)


    vertices = list(vertices)
    visited = [False]*26
    backEdge = [False]*26

    def hasCycle(v):
        visited[v] = True
        backEdge[v] = True

        for i in graph[v]:
            if not visited[i] and hasCycle(i):
                return True
            elif backEdge[i]:
                return True
            else:
                pass
        backEdge[v] = False
        return False

    for i in vertices:
        if hasCycle(i):
            print 'Impossible'
            exit(0)

    stack = []
    visited = [False]*26
    def topoSort(v):
        visited[v] = True
        for i in graph[v]:
            if not visited[i]:
                topoSort(i)
        stack.append(v)

    for i in vertices:
        if not visited[i]:
            topoSort(i)
    ans = ''
    stack = stack[::-1]
    for i in stack:
        ans += chr(i+97)
    for i in range(26):
        if i not in stack:
            ans += chr(i+97)
    print ans
main()