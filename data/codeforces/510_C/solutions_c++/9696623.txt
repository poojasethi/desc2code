#include<bits/stdc++.h>
using namespace std;
vector<string> vs;
vector<int> v[100];
int n;
int visited[100];
int use[100]={0};
stack<int> s;
void dfs(int pos)
{
	visited[pos]=1;	
	use[pos]=1;
	for(int i=0;i<v[pos].size();i++)
	{
		int a=v[pos][i];
		if(use[a])
		{
			cout<<"Impossible"<<endl;
			exit(0);
		}
		if(!visited[a])
			dfs(a);
	}
	use[pos]=0;
	s.push(pos);
}

int main()
{
	cin>>n;
	for(int i=0;i<n;i++)
	{
		string s;
		cin>>s;
		vs.push_back(s);
	}
	for(int i=0;i<n-1;i++)
	{
		string a=vs[i];
		string b=vs[i+1];
		int l=min(a.length(),b.length());int f=0;
		for(int k=0;k<l;k++)
		{
			if(a[k]!=b[k])
			{	f=1;
				v[a[k]-'a'].push_back(b[k]-'a');
				break;
			}
		}
		if(!f&& (a.length()>b.length()))
		{
			cout<<"Impossible"<<endl;
			exit(0);
		}
	}
	memset(visited,0,sizeof visited);
	for(int i=0;i<26;i++)
	{
		if(!visited[i])
			dfs(i);
	}
	while(!s.empty())
	{
		cout<<(char)(s.top()+'a');
		s.pop();
	}
}

		
	
