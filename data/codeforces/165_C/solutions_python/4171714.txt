from re import compile
from collections import deque
regex = compile(r'0+')
k = int(raw_input())

def stable_search( zero, bin_num ):
    c_one = ans = temp_ans = temp_z = 0
    c_zero = deque()
    for f in bin_num[zero:]:
        if f == '1':
            c_zero.append(zero); zero = 0
            c_one = -~c_one
            if c_one >= k:
                ans = ans + ( temp_z * temp_ans ) + temp_z
                temp_ans = 0; temp_z = -~c_zero.popleft()
        else: temp_ans, zero = -~temp_ans, -~zero
    return ans + ( temp_z * temp_ans ) + temp_z

def mid(bin_num):
    return stable_search(bin_num.find('1'), bin_num)

def find_zeros(bin_num):
    return sum((len(sed)*-~len(sed))>>1 for sed in regex.findall(bin_num))

if k == 0: print find_zeros(raw_input())
else: print mid(raw_input())