from re import compile
from collections import deque
regex = compile(r'0*')
k = int(raw_input())

def stable_search( zero, bin_num ):
    c_one = ans = temp_ans = temp_z = 0
    c_zero = deque()
    for f in xrange( zero, len(bin_num)):
        if bin_num[f] == '1':
            c_zero.append(zero); zero = 0
            c_one = -~c_one
            if c_one == k:
                ans = ans + temp_z + temp_ans
                temp_ans = 0; temp_z = -~c_zero.popleft()
                c_one = ~-c_one
        else: temp_ans = temp_ans + temp_z; zero = -~zero
    return ans + temp_z + temp_ans

mid = lambda bin_num: stable_search(bin_num.find('1'), bin_num)
find_zeros = lambda bin_num: sum(len(sed)*-~len(sed) for sed in regex.findall(bin_num))>>1

if k == 0: print find_zeros(raw_input())
else: print mid(raw_input())