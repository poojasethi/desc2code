#include <iostream>
#include <vector>
using namespace std;
const int MAX = 100005;
vector<int> adj[MAX];
int a[MAX], d[MAX];
bool mark[MAX];
void dfs(int v)
{
	mark[v] = true;
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		if (!mark[u])
		{
			d[u]--;
			if (d[u] < a[u])
				dfs(u);
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int u, v;
		cin >> u >> v;
		adj[u].push_back(v);
		adj[v].push_back(u);
		d[u]++;
		d[v]++;
	}
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 1; i <= n; i++)
		if (!mark[i] && d[i] < a[i])
			dfs(i);
	vector<int> ans;
	for (int i = 1; i <= n; i++)
		if (!mark[i])
			ans.push_back(i);
	cout << ans.size() << endl;
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
}
