#include<iostream>
#include<cmath>
#include<algorithm>
#include<cstring>
#include<string>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#define pb push_back
#define debug puts("=====================");
using namespace std;
typedef long long ll;
const int N = 110;
int n, k, a[N], b[N];
ll dp[N][N];
string sign[N];
int L, R, F, S;
enum {
    OLD, CUR, NEW
};
int get_type(int i) {
    if (i < L || i > R) return OLD;
    if (i == F || i == S) return CUR;
    return NEW;
}
bool compare(int a, int b, string s) {
    if (s == "=") return a == b;
    if (s == ">") return a > b;
    if (s == "<") return a < b;
    if (s == ">=") return a >= b;
    if (s == "<=") return a <= b;
}
bool check(int l, int r, int f, int s) {
    L = l, R = r;
    F = f, S = s;
    for (int i = 0; i < k; i++) {
        int lf = get_type(a[i]);
        int rg = get_type(b[i]);
        if (lf != CUR && rg != CUR) continue;
        if (!compare(lf, rg, sign[i])) return false;
    }
    return true;
}
ll calcdp(int l, int r) {
    ll &res = dp[l][r];
    if (res != -1) return res;
    res = 0;
    if (l + 1 == r) {
        if (check(l, r, l, r)) res++;
    } else {
        if (check(l, r, l, l + 1)) res += calcdp(l + 2, r);
        if (check(l, r, l, r)) res += calcdp(l + 1, r - 1);
        if (check(l, r, r - 1, r)) res += calcdp(l, r - 2);
    }
    return res;
}
int main () {
    scanf("%d%d", &n, &k);
    for (int i = 0; i < k; i++) {
        cin>>a[i]>>sign[i]>>b[i];
        a[i]--;
        b[i]--;
    }
    n *= 2;
    memset(dp, -1, sizeof(dp));
    printf("%I64d\n", calcdp(0, n - 1));
    return 0;
}
