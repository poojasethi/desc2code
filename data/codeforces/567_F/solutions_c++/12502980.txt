#include <cstdio>
#include <set>
#include <cstring>
#include <cstdlib>
#include <vector>
#include <algorithm>

using namespace std;
bool visited[71][71];
long long sol[71][71];
int rules[101][3]; // <, <=, =, =>, >
int n, m;

long long canBeSame(int start, int end)
{
    for (int i = 0; i < m; i++)
        if (rules[i][0] == start && rules[i][1] == end && (rules[i][2] == 0 || rules[i][2] == 4))
            return 0LL;
    return 1LL;
}

long long solve(int start, int end) {
    if (visited[start][end])
        return sol[start][end];
    visited[start][end] = true;
    sol[start][end] = 0LL;
    if (start == end-1) sol[start][end] = canBeSame(start, end);
    for (int i = 0; i < m; i++)
    {
        if (rules[i][0] >= start && rules[i][0] <= end && rules[i][1] > end && rules[i][2] < 3) { // (*)*
            sol[start][end] = 0LL; return 0;
        }
        if (rules[i][0] < start && rules[i][1] <= end && rules[i][1] >= start && rules[i][2] > 1) { // *(*)
            sol[start][end] = 0LL; return 0;
        }
    }
    if (start == end-1) return sol[start][end];
    sol[start][end] += solve(start+1, end-1) * canBeSame(start, end);
    sol[start][end] += solve(start, end-2) * canBeSame(end-1, end);
    sol[start][end] += solve(start+2, end) * canBeSame(start, start+1);
    return sol[start][end];
}

int main(int argc, char ** argv) {
    int l, r;
    char c1, c2;
    scanf("%d%d", &n, &m);
    
    for (int i = 0; i < m; i++)
    {
        scanf("%d %c%c %d", &l, &c1, &c2, &r);
        if (r < l) { if (c1 == '<') c1 = '>'; else if (c1 == '>') c1 = '<'; r += l; l = r-l; r -= l; }
        rules[i][0] = l; rules[i][1] = r;
        if (c1 == '<' && c2 == '=') rules[i][2] = 1;
        if (c1 == '=' && c2 == ' ') rules[i][2] = 2;
        if (c1 == '>' && c2 == '=') rules[i][2] = 3;
        if (c1 == '>' && c2 == ' ') rules[i][2] = 4;
    }
    solve(1, 2*n);
    printf("%I64d\n", sol[1][2*n]);
    
    return 0;
}