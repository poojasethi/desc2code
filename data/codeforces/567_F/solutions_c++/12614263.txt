
#include<iostream>
#include<iomanip>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<string>
#include<map>
#include<set>
#include<queue>
#include<vector>
#include<stack>
#define y0 abc111qqz
#define y1 hust111qqz
#define yn hez111qqz
#define j1 cute111qqz
#define tm crazy111qqz
#define lr dying111qqz
using namespace std;
#define REP(i, n) for (int i=0;i<int(n);++i)  
typedef long long LL;
typedef unsigned long long ULL;
const int inf = 0x7fffffff;
const int N = 1E2+7;
int n, k, a[N], b[N];
LL dp[N][N];
string sign[N];
int L, R, F, S;
enum 
{
    OLD, CUR, NEW
};
int get_type(int i) 
{
    if (i < L || i > R) return OLD;
    if (i == F || i == S) return CUR;
    return NEW;
}
bool compare(int a, int b, string s) 
{
    if (s == "=") return a == b;
    if (s == ">") return a > b;
    if (s == "<") return a < b;
    if (s == ">=") return a >= b;
    if (s == "<=") return a <= b;
}
bool check(int l, int r, int f, int s)
{
    L = l, R = r;
    F = f, S = s;
    for (int i = 0; i < k; i++) 
    {
        int lf = get_type(a[i]);
             
        int rg = get_type(b[i]);
        if (lf != CUR && rg != CUR) continue;
        if (!compare(lf, rg, sign[i])) return false;
    }
    return true;
}
LL cal(int l, int r) 
{
    LL &res = dp[l][r];
    if (res != -1) return res;
    res = 0;
    if (l + 1 == r)
    {
        if (check(l, r, l, r)) res++;
    } else 
    {
        if (check(l, r, l, l + 1)) res += cal(l + 2, r); 
        if (check(l, r, l, r)) res += cal(l + 1, r - 1);
        if (check(l, r, r - 1, r)) res += cal(l, r - 2);
    }
    return res;
}
int main () 
{
    scanf("%d %d", &n, &k);
    n = n * 2;
    for (int i = 0; i < k; i++) 
    {
        cin>>a[i]>>sign[i]>>b[i];
        a[i]--;
        b[i]--;
    }
    memset(dp, -1, sizeof(dp));
    printf("%I64d\n",cal(0,n-1));
    return 0;
}