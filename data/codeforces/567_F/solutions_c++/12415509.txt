#include <iostream>
#include <fstream>
#include <iomanip>
#include <set>
#include <cstdio>
#include <cstring>
#include <stack>
#include <string>
#include <map>
#include <vector>
#include <queue>
#include <deque>
#include <algorithm>
#include <cmath>
#include <sstream>
#include <bitset>
#include <ctime>
#include <list>
using namespace std;
#define mp make_pair
#define ull unsigned long long
#define ll long long
#define mod1 (ll)1000000009
#define mod (ll)1000000007
#define inf 1600000016000000000
#define mpi acos(-1.0)
#define M_E (double)2.71828182846
#pragma comment(linker, "/STACK:1000000000")

static int m1[200], m2[200];
static ll m3[80][80];
static vector <string> vc;

int gt(int l, int r, int x, int y){
	if (x > r || x < l)
		return -1;
	if (y == 0 && (x == r || x == l))
		return 0;
	if (y == 1 && (x == l || x == l + 1))
		return 0;
	if (y == 2 && (x == r || x == r - 1))
		return 0;
	return 1;
}

bool cmp(int a, int b, string s){
	if (s == ">")
		return a > b;
	if (s == "<")
		return a < b;
	if (s == "=")
		return a == b;
	if (s == ">=")
		return a >= b;
	return a <= b;
}

bool chk(int l, int r, int y){
	int a, b;
	for (int i = 0; i < vc.size(); ++i){
		a = gt(l, r, m1[i], y), b = gt(l, r, m2[i], y);
		if (a * b == 1)
			continue;
		if (!cmp(a, b, vc[i]))
			return 0;
	}
	return 1;
}

ll dp(int l, int r){
	if (l == r + 1)
		return 1;
	if (m3[l][r] != -1)
		return m3[l][r];
	m3[l][r] = 0;
	m3[l][r] += dp(l + 1, r - 1) * chk(l, r, 0);
	if (r - l > 1){
		m3[l][r] += chk(l, r, 1) * dp(l + 2, r);
		m3[l][r] += chk(l, r, 2) * dp(l, r - 2);
	}
	return m3[l][r];
}

int main(){
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	//freopen("queue.in", "r", stdin);
	//freopen("queue.out", "w", stdout);
	int n, m, a, b;
	cin >> n >> m;
	vc.resize(m);
	for (int i = 0; i < m; ++i){
		cin >> m1[i] >> vc[i] >> m2[i];
		--m1[i], --m2[i];
	}
	memset(m3, 255, sizeof(m3));
	cout << dp(0, 2 * n - 1) << endl;
	return 0;
}