#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
#include <vector>
#include <cmath>
#include <stack>
#include <cstdlib>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#define rep(i,a,b) for (int i=a;i<((b)+1);i++)
#define Rep(i,a,b) for (int i=a;i>=b;i--)
#define foreach(e,x) for (__typeof(x.begin()) e=x.begin();e!=x.end();e++)
#define mid ((l+r)>>1)  //segment tree
#define lson (k<<1)     //segment tree
#define rson (k<<1|1)   //segment tree
#define MEM(a,x) memset(a,x,sizeof a)
#define L ch[r][0]                  //splay tree
#define R ch[r][1]                  //splay tree
#define keyvalue ch[ch[root][1]][0] //splay tree
#define eps 1e-6
using namespace std;
const int N=600050;
const long long Mod=1e9+7;
const int inf=0x3f3f3f3f;
typedef pair<int, int> pii;
typedef long long ll;
typedef pair<ll,ll> pll;
typedef pair<ll,int> pli;
int h1[500],h2[500],n,k;
string s[500];
ll dp[100][100];
int getcom(int x,int y,int l,int r,int p) {
    if (p<l||p>r) return 0;
    if (p==x||p==y)   return 1;
    return 2;
}
bool comp(int x,int y,string c) {
    if (c=="=") return x==y;
    if (c=="<") return x<y;
    if (c==">") return x>y;
    if (c=="<=")    return x<=y;
    if (c==">=")    return x>=y;
}
bool check(int l,int r,int f1,int f2) {
    rep(i,1,k) {
        int a1=getcom(f1,f2,l,r,h1[i]),b1=getcom(f2,f1,l,r,h2[i]);
        if (a1!=1&&b1!=1)   continue;
        if (!comp(a1,b1,s[i]))  return false;
    }
    return true;
}
ll cal(int l,int r) {
    ll &res=dp[l][r];
    if (res!=-1)    return res;
    res=0;
    if (l+1==r) {
        if (check(l,r,l,r)) res++;
    }else {
        if (check(l,r,l,l+1))   res+=cal(l+2,r);
        if (check(l,r,l,r)) res+=cal(l+1,r-1);
        if (check(l,r,r-1,r))   res+=cal(l,r-2);
    }
    return res;
}
int main() {
    scanf("%d%d",&n,&k);
    n<<=1;
    rep(i,1,k)  cin>>h1[i]>>s[i]>>h2[i];
    MEM(dp,-1);
    printf("%I64d\n",cal(1,n));
    return 0;
}