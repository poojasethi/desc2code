#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <sstream>
#include <typeinfo>
#include <fstream>

#include <iomanip>
#include <string>
#include <cstdlib>
#include <utility>
#include <locale>
#include <queue>
#include <stack>
#include <list>
#include <climits>
#include <cfloat>
#include <map>
#include <functional>
using namespace std;

long long dp[100][100], n, q_N, ql[105], qr[105];
char op[105][5];

bool isValid(long long smlIdx1, long long smlIdx2, long long bgLf, long long bgRt)
{
	for(long long q=0; q<q_N; q++)
		if(ql[q]==smlIdx1 || ql[q]==smlIdx2)
		{
			if(qr[q]==smlIdx1 || qr[q]==smlIdx2) // l = r
			{
				if(!strcmp(op[q], "<") || !strcmp(op[q], ">")) return false;
			}
			else if(bgLf<=qr[q] && qr[q]<=bgRt) // l < r
			{
				if(!strcmp(op[q], ">") || !strcmp(op[q], ">=") || !strcmp(op[q], "=")) return false;
			}
		}
		else if(bgLf<=ql[q] && ql[q]<=bgRt)
		{
			if(qr[q]==smlIdx1 || qr[q]==smlIdx2) // l > r
			{
				if(!strcmp(op[q], "<") || !strcmp(op[q], "<=") || !strcmp(op[q], "=")) return false;
			}
		}

	return true;
}

long long func(long long lf, long long rt) // [lf, rt]
{
	long long& ret = dp[lf][rt];
	if(ret!=-1LL) return ret;
	ret = 0LL;

	if(lf+1==rt)
	{
		bool isPossible = true;
		for(long long q=0; q<q_N; q++)
			if(ql[q]==lf || ql[q]==rt)
			{
				if(qr[q]==lf || qr[q]==rt) // l = r
				{
					if(!strcmp(op[q], "<") || !strcmp(op[q], ">"))
					{
						isPossible = false;
						break;
					}
				}
			}

		return ret = isPossible? 1LL:0LL;
	}
	
	// case 0: NEW + [lf+1, rt-1] + NEW
	if(isValid(lf, rt, lf+1, rt-1)) ret += func(lf+1, rt-1);

	// case 1: NEW + NEW + [lf+2, rt]
	if(isValid(lf, lf+1, lf+2, rt)) ret += func(lf+2, rt);

	// case 2: [lf, rt-2] + NEW + NEW
	if(isValid(rt-1, rt, lf, rt-2)) ret += func(lf, rt-2);

	return ret;
}

int main() // Codeforces Round #Pi (Div. 2)
{
	memset(dp, -1LL, sizeof(dp)); // 초기화

	scanf("%lld %lld", &n, &q_N);
	for(long long q=0; q<q_N; q++)
	{
		scanf("%lld %s %lld", &ql[q], op[q], &qr[q]);
		ql[q]--;
		qr[q]--; // to 0-based
	}

	printf("%lld\n", func(0LL, 2LL*n-1LL));

    return 0;
}