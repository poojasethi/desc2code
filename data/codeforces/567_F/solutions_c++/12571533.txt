#include <bits/stdc++.h>
using namespace std;
#define LL long long
const int INF = 1<<20;
const int N = 80;
LL dp[N][N];
vector<int>lse[N],ls[N],eq[N],bge[N],bg[N];
int ans[N];
bool check(int a, int b, int now)
{
    ans[a] = ans[b] = now;
    int s[2] = {a, b};
    for(int i=0; i<2; i++)
    {
        int x = s[i];
        for(int j=0; j<ls[x].size(); j++)
            if(ans[x] >= ans[ls[x][j]]) {ans[a] = ans[b] = INF; return false;}
        for(int j=0; j<lse[x].size(); j++)
            if(ans[x] > ans[lse[x][j]]) {ans[a] = ans[b] = INF; return false;}
        for(int j=0; j<bg[x].size(); j++)
            if(ans[x] <= ans[bg[x][j]]) {ans[a] = ans[b] = INF; return false;}
        for(int j=0; j<bge[x].size(); j++)
            if(ans[x] < ans[bge[x][j]]) {ans[a] = ans[b] = INF; return false;}
        for(int j=0; j<eq[x].size(); j++)
            if(ans[x] != ans[eq[x][j]]) {ans[a] = ans[b] = INF; return false;}
    }
    return true;
}
LL DP(int x, int y, int now)
{
    if(x > y) return 1;
    if(dp[x][y] != -1) return dp[x][y];
    LL ret = 0;
    if(check(x, x+1, now)) ret += DP(x+2, y, now+1), ans[x] = ans[x+1] = INF;
    if(x + 1 != y) {
        if(check(x, y, now)) ret += DP(x+1, y-1, now+1), ans[x] = ans[y] = INF;
        if(check(y-1, y, now)) ret += DP(x, y-2, now+1), ans[y-1] = ans[y] = INF;
    }
    return dp[x][y] = ret;
}
int main()
{
    int i,j,k,m,n;
    char s[3];
    int a,b;
    while(scanf("%d%d",&n,&m) == 2)
    {
        for(i=1; i<=n*2; i++)
            lse[i].clear(), ls[i].clear(), eq[i].clear(),
            bge[i].clear(), bg[i].clear();
        while(m--)
        {
            scanf("%d %s %d",&a,s,&b);
            if(s[0] == '=') eq[a].push_back(b), eq[b].push_back(a);
            else if(s[0]=='>'&&s[1]=='=') bge[a].push_back(b), lse[b].push_back(a);
            else if(s[0]=='<'&&s[1]=='=') lse[a].push_back(b), bge[b].push_back(a);
            else if(s[0]=='>') bg[a].push_back(b), ls[b].push_back(a);
            else ls[a].push_back(b), bg[b].push_back(a);
        }
        memset(dp,-1,sizeof(dp));
        for(i=1; i<=n*2; i++) ans[i] = INF;
        printf("%I64d\n",DP(1,n*2,1));
    }
    return 0;
}
