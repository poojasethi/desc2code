#include <cstdio>
#include <cstring>
#include <vector>
using namespace std; 

typedef long long ll;

const char c[5][5]={"<", ">", "<=", ">=", "="};
const int maxn = 100; 
int n, k, a, b, opt;
char sign[5];
ll d[maxn][maxn];
vector <int> m[maxn][5];

int find(char *s) {
	for(int i=0; i<5; i++)  
		if(!strcmp(c[i], s))
			return i;
    return -1;
}

bool equal(int x, int y) {
	for(int i=0; i<2; i++) {
		for(int j=0; j<m[x][i].size(); j++)
			if(m[x][i][j] == y)
				return false;
		for(int j=0; j<m[y][i].size(); j++)
			if(m[y][i][j] == x)
				return false;
	}
	return true;					
} 

bool less(int x, int l, int r) {
	for(int i=1; i <= 4; i++)
		if(i && i != 2)
			for(int j=0; j<m[x][i].size(); j++)
				if(m[x][i][j] >= l && m[x][i][j] <= r)
					return false;	
	return true;				
}

ll dp(int l, int r) {
	if(r <= l) return 0;
	if(l == r-1 || d[l][r]) return d[l][r];
	ll res=0;
	if(equal(l, l+1) && less(l+1, l+2, r) && less(l, l+2, r)) res += dp(l+2, r);
	if(equal(r, r-1) && less(r, l, r-2) && less(r-1, l, r-2)) res += dp(l, r-2);
	if(equal(l, r) && less(l, l+1, r-1) && less(r, l+1, r-1)) res += dp(l+1, r-1);
	return d[l][r]=res;
}

int main() {
	bool ok=true;
	scanf("%d%d", &n, &k);
	for(int i=0; i<k; i++) {
		scanf("%d%s%d", &a, sign, &b);
		opt=find(sign);
		if(a == b && (opt == 0 || opt == 1)) ok=false;
		if(opt == 4) {
			m[a][4].push_back(b);
			m[b][4].push_back(a);
		}
		else {
			m[a][opt].push_back(b);
			m[b][opt^1].push_back(a);
		}
	}
	if(!ok) puts("0");
	else {
		for(int i=1; i<2*n; i++) 
			if(equal(i, i+1))
				d[i][i+1]=1;
		dp(1, 2*n);
		printf("%lld\n", d[1][2*n]);		
	}
	return 0;
} 
				 		 	   	  		 	  	   	 	  	