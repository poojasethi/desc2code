#include <algorithm>
#include <iostream>
#include <cassert>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <queue>
#include <map>
#include <set>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(i, x) for(type(x) i = (x).begin(); i != (x).end(); i++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + 333;

const int N = 100 + 5;
const int E = 0;
const int SE = 1;
const int S = 2;

int n, k;
ll dp[N][N];
vector < ii > v[N];

bool ok(int l, int r, int x, int y, bool w = 0) {
    if(x < 1 or y < 1 or x > n or y > n)
        return 0;
    //l-r arasi bizden buyuk
    foreach(it, v[x]) {
        int z = it -> first;
        int type = it -> second;
        if(type == E and z != y)
            return 0;
        if(type == SE and z != y and !(l <= z and z <= r))
            return 0;
        if(type == S and !(l <= z and z <= r))
            return 0;
    }
    return w ? 1 : ok(l, r, y, x, 1);
}

ll f(int x, int y) {
    if(x == 1 and y == n)
        return 1;
    ll &r = dp[x][y];
    if(r != -1)
        return r;
    r = 0;
    if(ok(x, y, x - 1, x - 2))
        r += f(x - 2, y);
    if(ok(x, y, y + 1, y + 2))
        r += f(x, y + 2);
    if(ok(x, y, x - 1, y + 1))
        r += f(x - 1, y + 1);
    return r;
}

int main () {
    
    char str[5];
    
    scanf("%d %d", &n, &k);
    
    n += n;
    
    for(int i = 0; i < k; i++) {
        int x, y;
        scanf("%d %s %d", &x, str, &y);
        if(x == y)
            continue;
        if(str[0] == '>')
            swap(x, y);
        if(str[0] == '=')
            v[x].push_back(ii(y, E));
        else if(str[1] == '=')
            v[x].push_back(ii(y, SE));
        else
            v[x].push_back(ii(y, S));
    }
    
    memset(dp, -1, sizeof(dp));
    
    ll ans = 0;
    
    for(int i = 1; i < n; i++)
        if(ok(-1, -1, i, i + 1))
            ans += f(i, i + 1);
    
    printf("%lld\n", ans);
    
    return 0;
    
}
