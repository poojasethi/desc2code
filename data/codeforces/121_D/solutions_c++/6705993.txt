#include <algorithm>
#include <string>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <cassert>
#include <queue>
#include <cstdlib>
#include <set>
#include <map>
#include <stack>
#include <cmath>
#include <ctime>

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define lli long long int
#define all( gg )	gg.begin(),gg.end()
#define foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define FP( ii,aa,bb ) for( int ii=aa;ii<=bb;ii++ )
#define FM( ii,aa,bb ) for( int ii=aa;ii>=bb;ii-- )

#define maxn	200005
#define mod		(lli)1e12

using namespace std;

class bigint{
	public:
		lli a,b;
		bigint(){
			a = b = 0;
		}
		bigint(int x){
			a = 0;
			b = x;
		}
		bigint(lli x){
			a = 0;
			b = x;
			a += b/mod;
			b %= mod;
		}
};
bigint operator+( bigint a,bigint b ){
	bigint t;
	t.a = a.a+b.a;
	t.b = a.b+b.b;
	t.a += t.b/mod;
	t.b %= mod;
	return t;
}
bigint operator*( bigint a,int x ){
	bigint t;
	t.a = a.a*x;
	t.b = a.b*x;
	t.a += t.b/mod;
	t.b %= mod;
	return t;
}
bigint operator-( bigint a,bigint b ){
	if( a.b<b.b ){
		a.a--;
		a.b += mod;
	}
	a.a -= b.a;
	a.b -= b.b;
	assert( a.b<mod and a.a>=0 );
	return a;
}
bool operator<( bigint a,bigint b ){
	if( a.a!=b.a )	return a.a<b.a;
	return a.b<b.b;
}

lli n,k,N,minsize,x[maxn],y[maxn],arr[600000];
bigint sumx[maxn],sumy[maxn];

void rec( lli lucky ){
	if( lucky>=1e17 )	return;
	arr[++N] = lucky*10+4;
	arr[++N] = lucky*10+7;
	rec( lucky*10+4 );
	rec( lucky*10+7 );
}

int hesap( lli a,lli b ){
	if( minsize<b-a+1 )	return 0;
	int t;
	bigint res;
	t = upper_bound( x+1,x+n+1,a )-x;
	res = res+sumx[t]-(bigint)a*(n-t+1);
	t = lower_bound( y+1,y+n+1,b )-y-1;
	res = res+(bigint)b*t-sumy[t];
	if( (bigint)k<res )	return 0;
	return 1;
}

int main(){

	ios_base::sync_with_stdio( false );

	minsize = 1e18;
	cin >> n >> k;
	FP( i,1,n ){
		cin >> x[i] >> y[i];
		minsize = min(minsize,y[i]-x[i]+1);
	}
	sort( x+1,x+n+1 );
	sort( y+1,y+n+1 );
	FM( i,n,1 )	sumx[i] = sumx[i+1]+x[i];
	FP( i,1,n )	sumy[i] = sumy[i-1]+y[i];
	rec(0);
	sort( arr+1,arr+N+1 );
	int ind=0,res=0;
	FP( i,1,N ){
		ind = max( ind,i-1 );
		while( ind<N and hesap( arr[i],arr[ind+1] ) )	ind++;
		res = max( res,ind-i+1 );
	}
	cout << res << endl;
}
