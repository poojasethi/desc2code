#include <algorithm>
#include <iostream>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <cstring>
#include <map>
#include <string>
#include <queue>
#include <set>
#include <stack>
#define rep(i, a, b) for(int i = a; i < b; i++)
#define red(i, a, b) for(int i = a; i > b; i--)
#define RED true
#define BLACK false
#define pb push_back
#define mk make_pair
#define fi first
#define se second
using namespace std;
typedef pair<int, int> ii;
typedef long long ll;
typedef long double ld;
typedef vector<ii> vii;
typedef vector<int> vi;
const int N = 2e5 + 7;
const int M = 257;
const int inf = 1e9 + 7;
const ll base = 1e18;
const double pi = acos(-1);
const double ep = 1e-18;


vector<ll> b;

void go(ll x){
    if (x >= base) return;
    if (x > 0) b.push_back(x);
    //cout << x << endl;
    go(x * 10 + 4);
    go(x * 10 + 7);
}


ll l[N], r[N];
ll mindist = base + 1;
int n;
ll k;
int p = 0, q = 0;
long double sumL = 0, sumR = 0;

bool check(ll u, ll v){
    if (v - u + 1 > mindist) return false;
    while (p < n && r[p] <= v) sumR += r[p++];
    while (q < n && l[q] <= u) sumL -= l[q++];
    ld moveR = (ld) v * p - sumR;
    ld moveL = sumL - (ld)u * (n - q);
    //cout << moveR << " " << moveL << endl;
    return moveL + moveR <= (ld)k;
}

void solve(){
    go(0);
    cin >> n >> k;
    rep(i, 0, n){
        scanf("%I64d%I64d", l + i, r + i);
        mindist = min(mindist, r[i] - l[i] + 1);
    }
    //cout << mindist << " " << k << endl;
    sort(l, l + n);
    sort(r, r + n);
    sort(b.begin(), b.end());

    rep(i, 0, n) sumL += (ld)l[i];

    //cout << sumR << endl;
    int j = 0;
    ll ans = 0;
    for(int i = 0; i < b.size(); i++){
        if (j < i) j = i;

        while (j < b.size() && check(b[i], b[j])) j++;
        ans = max(ans, (ll)j - i);
        //break;
    }
    cout << ans;

}

int main(){
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
#endif // ONLINE_JUDGE
    solve();
}
