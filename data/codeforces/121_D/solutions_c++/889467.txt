#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cmath>
#include <ctime>
#include <cstdlib>

#define LL long long
#define LD long double
#define pb(x) push_back(x)
#define size(S) S.size()

using namespace std;

const int maxn=100010;
int n, cnt, rl, rr;
LL k, len, lucky[600000], ans, l[maxn], r[maxn];
LD sl[maxn], sr[maxn];

void generateL(int x, LL s, LL fac){
	if (s>0) lucky[cnt++]=s;
	if (x>18) return;
	generateL(x+1, s+4*fac, fac*10);
	generateL(x+1, s+7*fac, fac*10);
}

inline LD cost(LL MIN, LL MAX){
	while (rl<=n && l[rl]<MIN) rl++;
	while (rr<=n && r[rr]<MAX) rr++;
	LD ret=sl[rl]-(n-rl+1)*(LD)(MIN)-sr[rr-1]+(rr-1)*(LD)(MAX);
	return ret;
}

int main(){
//	freopen("D.in", "r", stdin);
	generateL(1, 0, 1);
	sort(lucky, lucky+cnt);
	cin.sync_with_stdio(false);
	cin>>n>>k;
	len=(LL)1e18;
	for (int i=1; i<=n; i++) cin>>l[i]>>r[i], len=min(len, r[i]-l[i]+1);
	sort(l+1, l+n+1); sort(r+1, r+n+1);

	LL ln=0, rn=0; rl=1, rr=1; ans=0;
	for (int i=1; i<=n; i++) sr[i]=sr[i-1]+r[i];
	for (int i=n; i>0; i--) sl[i]=sl[i+1]+l[i];
	for (rn=0; rn<cnt; rn++){
	//	if (rn==327678)
	//		printf(" ");
		while (ln<=rn && (lucky[rn]-lucky[ln]+1>len || cost(lucky[ln], lucky[rn])>k)) ln++;
		//LL tmp=cost(lucky[ln], lucky[rn]);
		if (cost(lucky[ln], lucky[rn])<=k) ans=max(ans, rn-ln+1);
	//	if (ans>0)
	//		printf(" ");
	}
	cout<<ans<<endl;
}
