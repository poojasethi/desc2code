#include<cstdio>
#include<algorithm>
#include<vector>

using namespace std;

#define FOR(i, a, b) for(int i(a); i < b; i++)
#define REP(i, n) FOR(i, 0, n)

#define INF 1000000000000000001ll
#define MAX_DIGIT 18
#define MAX_N 100005
#define MAX_M (1ll << (MAX_DIGIT + 1))

int n;
long long min_gap;
long long k;
long long l[MAX_N];
long long r[MAX_N];
long long lucky[MAX_M], m;
long long u[MAX_M];
long long v[MAX_M];

inline void gen_lucky(long long mul, long long x)
{
    if(mul == 0)
    {
        lucky[m++] = x;
        return;
    }
    gen_lucky(mul / 10, x * 10 + 4);
    gen_lucky(mul / 10, x * 10 + 7);
}

inline void initial()
{
    long long mul = 1;
    REP(_, MAX_DIGIT)
    {
        gen_lucky(mul, 0);
        mul *= 10;
    }
}

inline long long add(long long a, long long b)
{
    return min(a + b, INF);
}

inline long long mul(long long a, long long b)
{
    if(a == 0 or b == 0)
        return 0;
    long long t = mul(a, b >> 1);
    if(b & 1)
        return add(add(t, t), a);
    return add(t, t);
}

inline bool check(int len)
{
    len--;
    REP(i, m - len)
        if(lucky[i + len] - lucky[i] <= min_gap and u[i] + v[i + len] <= k)
            return true;
    return false;
}

int main()
{
    initial();
    scanf("%d %I64d", &n, &k);
    REP(i, n)
    {
        scanf("%I64d %I64d", &l[i], &r[i]);
        min_gap = i == 0 ? r[i] - l[i]: min(min_gap, r[i] - l[i]);
    }
    sort(l, l + n);
    sort(r, r + n);

    int j = 0;
    REP(i, m)
    {
        if(i > 0)
            v[i] = add(v[i - 1], mul(j, lucky[i] - lucky[i - 1]));
        for(; j < n and r[j] < lucky[i]; j++)
            v[i] = add(v[i], lucky[i] - r[j]);
    }

    j = n - 1;
    for(int i = m; i --> 0; )
    {
        if(i < m - 1)
            u[i] = add(u[i + 1], mul(n - j - 1, lucky[i + 1] - lucky[i]));
        for(; j >= 0 and l[j] > lucky[i]; j--)
            u[i] = add(u[i], l[j] - lucky[i]);
    }

    int s = 1, e = m;
    while(s <= e)
    {
        int m = (s + e) >> 1;
        check(m) ? s = m + 1: e = m - 1;
    }

    printf("%d\n", e);
}
