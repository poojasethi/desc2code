#include <bits/stdc++.h>
#define fi first
#define se second
#define m ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)
#define foreach(asd,it) for(__typeof(asd.begin()) it=asd.begin();it!=asd.end();it++)

using namespace std;

typedef long long lint;
typedef double db;
typedef pair <db,db> ii;
typedef vector <db> vi;
typedef vector <ii> vii;

const lint maxn=1e5+20;

db N,K,s;
db L[10*maxn],R[10*maxn],ans,mn=1e18;
lint lucky[10*maxn];
vi l,r;

void make(lint a){
	if(a>1e18) return;
	lucky[(int)(s+1)]=a;
	s+=1;
	make(a*10+4);
	make(a*10+7);
}

int main(){
	make(4) , make(7);
	
	scanf("%lf %lf",&N,&K);
	
	sort(lucky+1,lucky+(int)s+1);
	
	for(db i=1;i<=N;i++){
		db a,b;
		scanf("%lf %lf",&a,&b);
		umin(mn,b-a);
		l.push_back(a);
		r.push_back(b);
	}
	
	sort(l.begin(),l.end());
	reverse(l.begin(),l.end());
	sort(r.begin(),r.end());
	
	bool flag=0;
	db sum=0;
	for(db i=1,al=0;i<=s;i++){
		if(!flag)
			while(sum < 1e18 && al<r.size() && r[(int)al]<lucky[(int)i]) sum+=r[(int)al] , al++;
		
		if(sum>1e18)flag=1;
		if(flag)
			L[(int)i]=-1;
		
		else
			L[(int)i]=1.0*lucky[(int)i]*al-sum;
		//~ printf("L%.2lf %lld -> %.2lf\n",lucky[(int)i],i,L[(int)i]);
	}

	sum=0 , flag=0;
	for(db i=s,al=0;i>=1;i--){
		if(!flag)
			while(sum<1e18 && al<l.size() && l[(int)al]>lucky[(int)i] ) sum+=l[(int)al] , al++;
		
		if(sum > 1e18) flag=1;
		if(flag)
			R[(int)i]=-1;
		
		else
			R[(int)i]=sum-1.0*lucky[(int)i]*al;
	}

	for(db i=1,j=1;L[(int)i]!=-1 && i<=s;i++){
		if(R[(int)i]==-1) continue;
		umax(i,j);
		umax(j,i);
		while(j<=s && L[(int)j]!=-1 && R[(int)i]+L[(int)j]<=K && lucky[(int)j]-lucky[(int)i]<=mn) j++;
		j--;
		//~ printf("%lld %lld %.2lf %.2lf\n",i,j,lucky[(int)i],lucky[(int)j]);
		umax(ans,(db)j-i+1);
		//~ if(j-i+1==4) printf("%.0lf %.0lf %.0lf %.0lf\n",i,j,lucky[(int)i],lucky[(int)j]);
	}

	cout << ans << endl;
	
	return 0;
}
