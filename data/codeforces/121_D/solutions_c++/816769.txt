#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

typedef long long LL;

const int MAXL = 19;
const int MAXN = 100010;
const int MAXM = (1 << MAXL);

int n;
LL k;
LL inv_len;
vector<LL> lucknum;
LL lsum[MAXM], rsum[MAXM];
LL L[MAXN], R[MAXN];

void init()
{
#ifdef __linux__
  scanf("%d%lld", &n, &k);
#else
  scanf("%d%I64d", &n, &k);
#endif

  inv_len = (1ll << 62);

  LL l, r;
  for (int i = 0; i < n; ++i) {
#ifdef __linux__
    scanf("%lld%lld", &l, &r);
#else
    scanf("%I64d%I64d", &l, &r);
#endif

    inv_len = min(inv_len, r - l);
    R[i] = r;
    L[i] = l;
  }
}

void lucknum_cal()
{
  lucknum.clear();
  for (int len = 1; len < MAXL; ++len) 
    for (int limit = (1 << len), num = 0; num < limit; ++num) {
      LL cur = 0;
      for (int l = len-1; l >= 0; --l) cur = cur*10 + ((num&(1<<l)) ? 7 : 4);
      lucknum.push_back(cur);
    }
}

void solve()
{
  lucknum_cal();

  sort(L, L+n);
  sort(R, R+n);

  LL cur_sum = 0;
  int pt = 0;
  for (int i = 0; i < lucknum.size(); ++i) {
    for (; pt < n && R[pt] < lucknum[i]; ++pt) 
      cur_sum += R[pt];
    
    if (i > 0 && rsum[i-1] > k) 
      rsum[i] = k+1;
    else {
      rsum[i] = lucknum[i] * pt - cur_sum;
      if (rsum[i] > k) rsum[i] = k+1;
    }
  }

  cur_sum = 0;
  pt = n-1;
  for (int i = lucknum.size()-1; i >= 0; --i) {
    for (; pt >= 0 && L[pt] > lucknum[i]; --pt)
      cur_sum += L[pt];
    
    if (i < lucknum.size() && lsum[i+1] > k) 
      lsum[i] = k+1;
    else {
      lsum[i] = cur_sum - lucknum[i] * (n-1-pt);
      if (lsum[i] > k) lsum[i] = k+1;
    }
  }

  int ans = 0, lf = 0;
  LL remain;
  for (int head = 0, tail = 0; tail < lucknum.size(); ++tail) {
    for (; lucknum[tail] - lucknum[head] > inv_len; ++head);

    remain = k - rsum[tail];
    for (; lf < lucknum.size() && lsum[lf] > remain; ++lf);

    ans = max(ans, tail - max(head, lf) + 1);
  }

  printf("%d\n", ans);
}

int main()
{
  init();
  solve();
  return 0;
}
