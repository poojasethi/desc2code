#include <bits/stdc++.h>

using namespace std;

#define type(x) __typeof((x).begin())
#define foreach(it, x) for(type(x) it = (x).begin(); it != (x).end(); it++)

typedef long long ll;
typedef pair < int, int > ii;

const int inf = 1e9 + 333;
const ll linf = 1e18 + inf;

const int N = 1e5 + 5;

class pd{ public:
	ll x;
	double dx;
	pd() {
		x = 0;
		dx = 0;
	}
	pd(int X) {
		x = X;
		dx = X;
	}
	pd(ll X) {
		x = X;
		dx = X;
	}
	pd operator+(pd oth) {
		pd res;
		res.x = x + oth.x;
		res.dx = dx + oth.dx;
		return res;
	}
	pd operator-(pd oth) {
		oth.x = -oth.x;
		oth.dx = -oth.dx;
		return (*this) + oth;
	}
	pd operator*(pd oth) {
		pd res;
		res.x = x * oth.x;
		res.dx = dx * oth.dx;
		return res;
	}
	bool operator<(double x) {
		return dx < x;
	}
};


int n;
ll k, mn = linf;
pair < ll, ll > a[N];
vector < ll > ls, rs;

pd sumL[N], sumR[N];

bool check(pd l, pd r) {
	if(l.x > r.x)
		return 1;
	if(r.x - l.x + 1 > mn)
		return 0;
	pd res;
	int id = upper_bound(rs.begin(), rs.end(), r.x) - rs.begin() - 1;
	if(id >= 0) {
		//printf("r = %d (id + 1) = %d sumR[id] = %d\n", r.x, id + 1, sumR[id].x);
		res = res + r * (id + 1) - sumR[id];
	}
	id = lower_bound(ls.begin(), ls.end(), l.x) - ls.begin();
	if(id < ls.size()) {
		//printf("l = %d (id + 1) = %d sumL[id] = %d\n", l.x, ls.size() - id, sumL[id].x);
		res = res + sumL[id] - l * ((int) ls.size() - id);
	}
	return res < linf * 2 and res.x <= k;
}

int main() {

	scanf("%d %lld", &n, &k);

	for(int i = 1; i <= n; i++) {
		scanf("%lld %lld", &a[i].first, &a[i].second);
		ls.push_back(a[i].first);
		rs.push_back(a[i].second);
		mn = min(mn, a[i].second - a[i].first + 1);
	}

	sort(ls.begin(), ls.end());
	sort(rs.begin(), rs.end());

	sumR[0] = rs[0];

	for(int i = 1; i < rs.size(); i++) {
		sumR[i] = sumR[i - 1] + rs[i];
	}

	sumL[ls.size() - 1] = ls[ls.size() - 1];

	for(int i = (int) ls.size() - 1 - 1; i >= 0; i--) {
		sumL[i] = sumL[i + 1] + ls[i];
	}

	int ans = 0;

	vector < pd > v;

	v.push_back(4);
	v.push_back(7);

	for(int it = 0; it < v.size(); it++) {
		pd x = v[it];
		if(x * 10 + 4 < linf)
			v.push_back(x * 10 + 4);
		if(x * 10 + 7 < linf)
			v.push_back(x * 10 + 7);
	}

	int ptr = 0;

	for(int i = 0; i < v.size(); i++) {
		while(ptr < v.size() and check(v[i], v[ptr]))
			ptr++;
		ans = max(ans, ptr - i);
	}

	printf("%d\n", ans);

	return 0;

}
