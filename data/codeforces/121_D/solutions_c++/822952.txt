#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <utility>
#include <sstream>
#include <algorithm>
using namespace std;
#define ll long long
const long long LINF = ~(((long long)0x1)<<63)/2;
const int INF=0X3F3F3F3F;
const double eps=1e-7;
const ll LIM=1000000000000000000LL;
vector<ll> lucky;
void dfs(ll now)
{
    if(now>LIM)
        return;
    if(now!=0) lucky.push_back(now);
    dfs(now*10+4);
    dfs(now*10+7);
}
vector<pair<ll,ll> >lnode;
vector<pair<ll,ll> >rnode;
ll luck[1000000];
double lp[110000],rp[110000];
int main()
{
    int i,j,k,n,num;
    ll lim,minlen=LINF,l,r;
    dfs(0);
    num=lucky.size();
    for(i=0;i<num;i++)
        luck[i]=lucky[i];
    sort(luck,luck+num);
    cin>>n>>lim;
        
    for(i=0;i<n;i++)
    {
        cin>>l>>r;
        lnode.push_back(make_pair(r,l));
        rnode.push_back(make_pair(l,r));
        minlen=min(minlen,r-l+1);
    }
    sort(lnode.begin(),lnode.end());
    sort(rnode.begin(),rnode.end());
    for(i=1;i<n;i++)
        lp[i]=((double)i)*(lnode[i].first-lnode[i-1].first)+lp[i-1];
    for(i=n-2;i>=0;i--)
        rp[i]=((double)(n-i-1))*(rnode[i+1].first-rnode[i].first)+rp[i+1];
    int left=0,right=0,lcur=0,rcur=0,ans=0;
    double lvalue=0,rvalue,value;
    while(right<num&&left<num)
    {
        if(lcur==-1) lcur=0;
        while(lcur<n&&lnode[lcur].first<=luck[left]) lcur++;
        lcur--;
        lvalue=0;
        if(lcur!=-1)
            lvalue=lp[lcur]+((double)(luck[left]-lnode[lcur].first))*(lcur+1);
        if(right<left) right=left;
        while(right<num&&luck[right]-luck[left]+1<=minlen)
        {
            while(rcur<n&&rnode[rcur].first<=luck[right]) rcur++;
            rvalue=0;
            if(rcur!=n) rvalue=rp[rcur]+((double)(rnode[rcur].first-luck[right]))*(n-rcur);
            if(rvalue+lvalue>lim)
                break;
            ans=max(right-left+1,ans);
            right++;
        }
        left++;
    }
    cout<<ans<<endl;
    return 0;
}
