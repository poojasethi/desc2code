#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

#define N 100005
#define M (1 << 19)
#define LL long long

int vn;
vector < LL > v;

void dfs(int k, LL x) {
	v.push_back(x);
	if (k == 18) return;
	dfs(k + 1, x * 10 + 4);
	dfs(k + 1, x * 10 + 7);
}

void init() {
	dfs(0, 0);
	sort(v.begin(), v.end());
	vn = v.size();
	v.push_back(1LL << 61);
}

int n;
LL m, len;
LL a[N], b[N];
LL fl[M], fr[M];

inline void add(LL & ret, LL delta) {
	ret = min(ret + delta, m + 1);
}

inline LL mul(LL a, LL b) {
	if (!a || !b) return 0;
	return m / a < b ? m + 1 : a * b;
}

void read() {
	//scanf("%d %lld", &n, &m);
	scanf("%d %I64d", &n, &m);
	len = 1LL << 60;
	for (int i = 0; i < n; ++i) {
		//scanf("%lld %lld", &a[i], &b[i]);
		scanf("%I64d %I64d", &a[i], &b[i]);
		len = min(len, b[i] - a[i]);
	}
	sort(a, a + n);
	sort(b, b + n);
	//puts("ha");
	LL sum = 0;
	int k = 0;
	for (int i = 1; i < vn; ++i) {
		add(sum, mul(k, v[i] - v[i - 1]));
		while (k < n && b[k] <= v[i]) {
			add(sum, v[i] - b[k]);
			++k;
		}
		fl[i] = sum;
	}
	sum = 0;
	k = n - 1;
	for (int i = vn - 1; i >= 1; --i) {
		add(sum, mul(n - 1 - k, v[i + 1] - v[i]));
		while (k >= 0 && v[i] <= a[k]) {
			add(sum, a[k] - v[i]);
			--k;
		}
		fr[i] = sum;
	}
	//puts("ha");
}

int solve () {
	int l = 1, r = vn - 1;
	while (l <= r) {
		int mid = (l + r) >> 1;
		bool flag = 0;
		for (int i = 1; i + mid - 1 < vn && !flag; ++i)
			if (v[i + mid - 1] - v[i] <= len && fr[i] + fl[i + mid - 1] <= m)
				flag = 1;
		if (flag) l = mid + 1;
		else r = mid - 1;
	}
	return l - 1;
}

int main() {
	init();
	read();
	printf("%d\n", solve());
	return 0;
}
