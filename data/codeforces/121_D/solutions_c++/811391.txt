#include<iostream>
#include<cstdio>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<cstring>
using namespace std;

const int N(100010),T((1<<19)+10);

typedef __int64 LL;

struct TSeg {
       LL l,r;
};
TSeg s[N];
LL lnum[T];
int n,i,j,ans,t;
LL k,ms;
LL ls[T],rs[T];
#define FOR(I,A,B) for (I=int(A);I<int(B);++I)
#define MEN(A,B) memset(A,B,sizeof(A));
#define CPY(A,B) memcpy(A,B,sizeof(B));
void getnum(int x,LL y)
{
     if (y) lnum[++t]=y;
     if (x==18) return;
     getnum(x+1,y*10+4);
     getnum(x+1,y*10+7);
}
bool cmp1(TSeg a,TSeg b) {return a.r<b.r;}
bool cmp2(TSeg a,TSeg b) {return a.l<b.l;}
int main()
{
    scanf("%d%I64d",&n,&k);
    getnum(0,0);
    sort(lnum+1,lnum+t+1);
    ms=1;
    FOR(i,0,18) ms*=10;
    FOR(i,0,n) {
       scanf("%I64d%I64d",&s[i].l,&s[i].r);
       ms=min(ms,s[i].r-s[i].l);
    }
    sort(s,s+n,cmp1);
    j=0;
    FOR(i,1,t+1) {
       if ((k-rs[i-1])/(lnum[i]-lnum[i-1])+1<j) rs[i]=k+1;
       else rs[i]=min(k+1,rs[i-1]+j*(lnum[i]-lnum[i-1])); 
       for (;j!=n&&s[j].r<=lnum[i];++j) rs[i]=min(k+1,rs[i]+lnum[i]-s[j].r);
    }
    sort(s,s+n,cmp2);
    for (i=t,j=n-1;i;--i) {
        if ((k-ls[i+1])/(lnum[i+1]-lnum[i])+1<n-1-j) ls[i]=k+1;
        else ls[i]=min(k+1,ls[i+1]+(n-1-j)*(lnum[i+1]-lnum[i]));
        for (;j!=-1&&s[j].l>=lnum[i];--j) ls[i]=min(k+1,ls[i]+s[j].l-lnum[i]);
    }
    j=1;
    ans=0;
    FOR(i,1,t+1) {
       for (;j<=i&&(rs[i]+ls[j]>k||lnum[i]-lnum[j]>ms);++j); 
       if (j<=i) ans=max(ans,i-j+1);
    }
    printf("%d\n",ans);
    return 0;
}
