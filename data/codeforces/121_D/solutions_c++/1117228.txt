#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>

using namespace std;

const long long inf = 1000000000000000000LL;

long long l[100000], r[100000];

void search(long long x, long long limit, vector<long long> &lucky) {
	if (x > limit) return;
	if (x > 0) lucky.push_back(x);
	search(x * 10 + 4, limit, lucky);
	search(x * 10 + 7, limit, lucky);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	
	int n;
	long long k;
	scanf("%d%I64d", &n, &k);
	long long minv = inf;
	for (int i = 0; i < n; i ++) {
		scanf("%I64d%I64d", &l[i], &r[i]);
		minv = min(minv, r[i] - l[i] + 1);
	}
	
	vector<long long> lucky;
	search(0, inf, lucky);
	sort(lucky.begin(), lucky.end());
	
	sort(l, l + n);
	sort(r, r + n);
	vector<long long> s1(lucky.size(), 0), s2(lucky.size(), 0);
	for (int i = 0, j = 0; i < lucky.size(); i ++) {
		if (i > 0) {
			double tmp = (double)(lucky[i] - lucky[i-1]) * j + s1[i-1];
			if (tmp > inf + 1)
				s1[i] = inf + 1;
			else
				s1[i] = s1[i-1] + (long long)(lucky[i] - lucky[i-1]) * j;
		}
		while (j < n && r[j] <= lucky[i]) {
			s1[i] += lucky[i] - r[j];
			if (s1[i] > inf + 1) s1[i] = inf + 1;
			j ++;
		}
	}
	for (int i = lucky.size() - 1, j = n - 1; i >= 0; i --) {
		if (i < lucky.size() - 1) {
			double tmp = (double)(lucky[i+1] - lucky[i]) * (n - 1 - j) + s2[i+1];
			if (tmp > inf + 1)
				s2[i] = inf + 1;
			else
				s2[i] = s2[i+1] + (long long)(lucky[i+1] - lucky[i]) * (n - 1 - j);
		}
		while (j >= 0 && l[j] >= lucky[i]) {
			s2[i] += l[j] - lucky[i];
			if (s2[i] > inf + 1) s2[i] = inf + 1;
			j --;
		}
	}
	
	int ans = 0;
	for (int i = 0, j = 0; i < lucky.size(); i ++) {
		while (j <= i && lucky[i] - lucky[j] + 1 > minv) j ++;
		while (j <= i && s1[i] + s2[j] > k) j ++;
		ans = max(ans, i - j + 1);
	}
	
	printf("%d\n", ans);
	
	return 0;
}
