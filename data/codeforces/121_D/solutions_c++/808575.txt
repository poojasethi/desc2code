#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<set>
using namespace std;
#define LL long long 
LL a[1000000];
int as;
void Init()
{
    as=0;
    for (int t=1;t<=18;t++)
    {
        for (int i=0;i<(1<<t);i++)
        {
            LL r=0;
            for (int j=0;j<t;j++)
                if ((1<<j)&i) r=r*10+4;
                    else r=r*10+7;
            a[as++]=r;
        }
    }
    sort(a,a+as);
}
const int MAXN = 100050;
int n;
LL k;
pair<LL,LL> l[MAXN];
LL minl;
multiset<LL> s;
LL r[MAXN]; 
LL M(LL a,LL b)
{
    if (a<=3000000000LL*1000000000LL/b) return a*b;
    return 3000000000LL*1000000000LL;
}
bool Check(LL len)
{
    if (len==0) return true;
    s.clear();
    int j=1;
    LL delta=0,td=0;
    for (int i=0;i+len-1<as;i++) // i..i+len-1
    if (a[i+len-1]-a[i]<=minl)
    {
        while (j<=n && l[j].first<=a[i]) {
            s.insert(l[j].second);
            j++; 
        }
        LL t;
        LL tk=k;
        if (td>0){
            delta += M(a[i+len-1]-a[i+len-2],td);
        }
        if (delta>k) return false;
        while (s.size()>0 && (t=(*s.begin()))<a[i+len-1]){
            delta+=a[i+len-1]-t;
            td++;
            if (delta>k) return false;
            s.erase(s.begin());
        }
        tk -= delta;
        if (j==n+1) if (tk>=0) {
            return true;
        }
        if (r[j]<=k)
        {
            LL temp=r[j]+M(n-j+1,l[j].first-a[i]);
            if (tk>=temp) return true;
        }
    }
    return false;
}
void Work()
{
    scanf("%d",&n);
    scanf("%I64d",&k);
    for (int i=1;i<=n;i++) scanf("%I64d%I64d",&l[i].first,&l[i].second);
    sort(l+1,l+n+1);
    minl=l[1].second-l[1].first;
    for (int i=2;i<=n;i++)
        minl=min(minl,l[i].second-l[i].first);
    r[n]=0;
    for (int i=n-1;i>=1;i--)
    {
        r[i]=r[i+1]+M(l[i+1].first-l[i].first,n-i);
        if (r[i]>k) r[i]=k+1;
    }
    LL f=0,r=as;
    while (f<r)
    {
        LL mid=(f+r+1)/2;
        if (Check(mid)) f=mid;
            else r=mid-1;
    }
    cout << f << endl;
}
int main()
{
    Init();
    Work();
    return 0;
}
