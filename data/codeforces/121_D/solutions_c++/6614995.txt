#include<cstdio>
#include<algorithm>
#include<cstring>
#include<iostream>
using namespace std;
#define fi first
#define se second

typedef long long ll;
typedef long double ld;
typedef pair<ll,ll> pii;
const int N=100010;
const ll INF=ll(2e18);
int n,i,j,k;ll l0,r0,m0,K,len,p;
pii a[N];

ll z[1000010];

ld X[N],Y[N],sx[N],sy[N],cost,res,L,R;


void dfs(int i,ll s)
{
	if(s>ll(1e18))return;
	if(s>0)z[++z[0]]=s;
	dfs(i+1,s*10+4);dfs(i=1,s*10+7);
}

ld calc(int m0)
{
	R=z[m0];p=lower_bound(Y+1,Y+1+n,R)-Y-1;
	return R*p-sy[p]+res;
}
int main()
{
	//freopen("1.in","r",stdin);freopen("1.out","w",stdout);
	
	scanf("%d",&n);scanf("%lld",&K);
	len=ll(2e18);
	for(i=1;i<=n;i++)
	scanf("%lld%lld",&a[i].fi,&a[i].se),
	len=min(len,a[i].se-a[i].fi);
	
	for(i=1;i<=n;i++)X[i]=a[i].fi,Y[i]=a[i].se;
	
	
	sort(X+1,X+1+n);for(i=n;i>=1;i--)sx[i]=sx[i+1]+X[i];
	sort(Y+1,Y+1+n);for(i=1;i<=n;i++)sy[i]=sy[i-1]+Y[i];
	
	dfs(1,0);sort(z+1,z+1+z[0]);
	
	ll ans=0;
	for(i=1;i<=z[0];i++)
	{
		L=z[i];p=lower_bound(X+1,X+1+n,L)-X;
		res=sx[p]-(n-p+1)*L;
		
		r0=upper_bound(z+1,z+1+z[0],L+len)-z-1;
		for(l0=i,r0;l0<r0;)
		{
			m0=(l0+r0+1)/2;
			if(calc(m0)<=K)	l0=m0;else r0=m0-1;
		}
		//printf("%I64d\n",calc(l0));
		
		if(calc(l0)<=K)
		ans=max(ans,l0-i+1);
		
	}
	printf("%I64d\n",ans);
	
	return 0;
}
