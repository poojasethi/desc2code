#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define ends ENDS
#define SZ(x) int(x.size())
#define ll long long
vector<ll> lucky;

void fill_lucky()
{
	for(int i = 2; i < (1<<19); i++)
	{
		int ti = i;
		long long num = 0;
		while(ti > 1)
		{
			num*=10;
			if(ti % 2 == 0)
				num += 4;
			else
				num += 7;
			ti /= 2;
		}
		long long tnum = 0;
		while(num > 0) 
		{
			tnum = tnum * 10 + num % 10;
			num /= 10;
		}
		lucky.push_back(tnum);
	}
}

const int MAXn = 1e6;
const long long INF = 2e18; 
int n;
ll k;
ll beg[MAXn], end[MAXn];
ll begs[MAXn], ends[MAXn];
ll minl=INF;

ll mul(ll x1, ll x2)
{
	if(x1 == 0 || x2 == 0)
		return 0;
	else if(x1<1+INF/x2)
		return min(x1*x2, INF);
	else
		return INF;
}

ll find_beg(ll x)
{
	int lb=lower_bound(beg,beg+n,x)-beg;
	if(lb==n) return 0;
	return min(INF,begs[lb]+mul(n-lb,beg[lb]-x));
}

ll find_end(ll x)
{
	int lb=(lower_bound(end,end+n,x)-end)-1;
	if(lb < 0) return 0;
	return min(INF,ends[lb]+mul(lb+1,x-end[lb]));
}

bool solve(int mid)
{
	for(int i = 0; i+mid < SZ(lucky); i++)
	{
		if(lucky[i+mid]-lucky[i]+1>minl)
			continue;
		ll req=find_beg(lucky[i])+find_end(lucky[i+mid]);
		if(req <= k)
			return true;
	}
	return false;


}

int main()
{
	ios::sync_with_stdio(false);
	fill_lucky();
	cin >> n >> k;
	for(int i = 0; i < n; i++)
	{
		cin >> beg[i] >> end[i];
		minl = min(minl, end[i]-beg[i]+1);
	}
	sort(beg, beg + n);
	sort(end, end + n);
	begs[n-1]=0;
	for(int i = n - 2; i >= 0; i--)
		begs[i]=min(INF,begs[i+1]+mul(n-1-i,beg[i+1]-beg[i]));
	ends[0]=0;
	for(int i = 1; i < n; i++)
		ends[i]=min(INF,ends[i-1]+mul(i,end[i]-end[i-1]));
	int beg=0,end=SZ(lucky);
	while(beg != end - 1)
	{
		int mid=(beg+end)/2;
		if(solve(mid))
			beg=mid;
		else
			end=mid;
	}
	if(solve(beg))
		cout << beg + 1 << endl;
	else
		cout << 0 << endl;
	return 0;
}
