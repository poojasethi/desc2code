#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <map>
#include <queue>
#include <set>

using namespace std;

bool dead[100500];
const int inf  = int(1e9) + 7;
priority_queue<pair<int,int> > s;
int a[100600];
int p[100500];
int next[100500];
int prev[100500];
int value[100500];
pair<int,int> b[100500];
int n,m;

void check(int u,int v)
{
    int dist = p[v] - p[u];
    if(dist<0) dist+=m;
    if(dist<=a[u] && u<v) value[u] = 1; else
    if(a[u]<=a[v])value[u] = inf; else
    {
            if(u>v)
            {
                int k = dist / (a[u]-a[v]);
                if(dist%(a[u]-a[v])) k++;
                value[u] = k;
            }else
            {
                int k = 1;
                dist-=a[u];
                k += dist / (a[u]-a[v]);
                if(dist%(a[u]-a[v])) k++;
                value[u] = k;
            }
    }
    pair<int,int> t = make_pair(-value[u],-u);
    s.push(t);
}

void test()
{
    s.push(make_pair(0,0));
    s.push(make_pair(0,0));
    s.push(make_pair(0,0));
    while(!s.empty())
    {
        cerr<<s.top().first<<' '<<s.top().second<<endl;
        s.pop();
    }
}

int main()
{
    //test();return 0;
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;i++)
    {
        scanf("%d%d",p+i,a+i);
        p[i]--;
        b[i].first = p[i];
        b[i].second = i;
    }
    sort(b,b+n);
    b[n] = b[0];
    for(int i=0;i<n;i++)
    {
        int u = b[i].second;
        int v = b[i+1].second;
        next[u] = v;
        prev[v] = u;
        check(u,v);
    }
    int total = n;
    while(!s.empty())
    {
        int u = -s.top().second;
        int val = -s.top().first;
        s.pop();
        if(value[u]!=val) continue;
        if(dead[u]) continue;
        if(val==inf) break;
        int v = next[u];
        dead[v] = true;
        total--;
        if(total==1) break;
        v = next[v];
        next[u] = v;
        prev[v] = u;
        a[u]--;
        p[u]+=val; p[u]%=m;
        check(u,v);

        v = u;
        u = prev[u];
        check(u,v);
    }
    printf("%d\n",total);
    for(int i=0;i<n;i++)
        if(!dead[i])    printf("%d ",i+1);
    return 0;
}
