#include <bits/stdc++.h>
using namespace std;
#define vi vector<int>
#define pii pair<int,int>
#define x first
#define y second
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define ll long long 
#define inf 1000000007
#define mod 1000000007
#define N 100005
#define DBG(x) cerr<<(#x)<<"="<<x<<endl;
#define FOREACH(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++)

template <class T> inline void Max(T &a,T b){if(a<b)a=b;}
template <class T> inline void Min(T &a,T b){if(a>b)a=b;}

inline void add(int &a,int b){a+=b;while(a>=mod)a-=mod;}

int pow(int a,int b){
    int ans=1;
    while(b){
        if(b&1)ans=1LL*ans*a%mod;
        a=1LL*a*a%mod;b>>=1;
    }
    return ans;
}
int ne[N],pr[N],dead[N],p[N],a[N],z[N],m,val[N],p1[N];
pii b[N];
priority_queue<pii>q;
void check(int u,int v){
    int dist=p[v]-p[u];
    if(dist<0)dist+=m;
    if(dist<=a[u]&&u<v)val[u]=1;
    else if(a[u]<=a[v])val[u]=inf;
    else if(u>v){
        int k=dist/(a[u]-a[v]);
        if(dist%(a[u]-a[v]))k++;
        val[u]=k;
    }
    else{
        int k=1;dist-=a[u];
        k+=dist/(a[u]-a[v]);
        if(dist%(a[u]-a[v]))k++;
        val[u]=k;
    }
    q.push(mp(-val[u],-u));
}
bool check2(int u,int v,int k){
    ll pos1=z[u]*m+p[u]+1LL*a[u]*k;
    ll pos2=z[v]*m+p[v]+1LL*a[v]*(k-1);
    if(u>v)pos2+=a[v];
    if(p1[u]>p1[v])pos2+=m;
    return pos1>=pos2;
}
int main(){
    int n,i,j,k;
    scanf("%d%d",&n,&m);
    for(i=0;i<n;i++){
        scanf("%d%d",&p[i],&a[i]);
        p[i]--;
        p1[i]=p[i];
        b[i]=mp(p[i],i);
    }
    sort(b,b+n);
    b[n]=b[0];
    for(i=0;i<n;i++){
        j=b[i].y,k=b[i+1].y;
        ne[j]=k;
        pr[k]=j;
        check(j,k);
    }
    int ans=n;
    while(!q.empty()){
        int u=-q.top().y;
        int t=-q.top().x;
        q.pop();
        if(dead[u])continue;
        if(t==inf)break;
        int v=ne[u];
        bool ok=true;
        while(check2(u,v,t)){
            ok=false;
            dead[v]=true;
            ans--;
            if(ans==1)break;
            v=ne[v];
            ne[u]=v,pr[v]=u;
            if(a[u]){
                a[u]--;
                p[u]+=t;
                z[u]+=p[u]/m;
                p[u]%=m;
            }
        }
        if(ans==1)break;
        if(ok)continue;
        check(u,ne[u]);
        check(pr[u],u);
    }
    printf("%d\n",ans);
    for(i=0;i<n;i++)if(!dead[i])printf("%d ",i+1);puts("");
    return 0;
}

