#include <cstdio>
#include <set>
#include <algorithm>
using namespace std;
const int MAXN=100000;
const int INF=1<<30;
int n,m;
int p[MAXN+10],a[MAXN+10],pos[MAXN+10],after[MAXN+10],before[MAXN+10];
set<pair<int,int> > S;
int read(void)
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		scanf("%d%d",&p[i],&a[i]);
	return 0;
}
bool cmp(int i,int j)
{
	return p[i]<p[j];
}
int init(void)
{
	for(int i=1;i<=n;i++)
	{
		p[i]--;
		pos[i]=i;
	}
	sort(pos+1,pos+n+1,cmp);
	for(int i=1;i<=n;i++)
	{
		if(i<n)
			after[pos[i]]=pos[i+1];
		else
			after[pos[i]]=pos[1];
		before[after[pos[i]]]=pos[i];
	}
	return 0;
}
int dist(int i,int j)
{
	if(i==j)
		return INF;
	int d=(p[j]-p[i]+m)%m;
	if(i>j)
		d=(d+a[j])%m;
	if(d<=a[i])
		return 1;
	if(a[i]<=a[j])
		return INF;
	int s=a[i]-a[j];
	return (d-a[j]-1)/s+1;
}
int solve(void)
{
	for(int i=1;i<=n;i++)
		S.insert(make_pair(dist(i,after[i]),i));
	while(!S.empty())
	{
		set<pair<int,int> >::iterator it=S.begin();
		if(it->first==INF)
			break;
		int tempa=it->second;
		S.erase(it);
		S.erase(make_pair(dist(after[tempa],after[after[tempa]]),after[tempa]));
		S.erase(make_pair(dist(before[tempa],tempa),before[tempa]));
		p[tempa]+=dist(tempa,after[tempa]);
		a[tempa]--;
		after[tempa]=after[after[tempa]];
		before[after[tempa]]=tempa;
		S.insert(make_pair(dist(before[tempa],tempa),before[tempa]));
		S.insert(make_pair(dist(tempa,after[tempa]),tempa));
	}
	printf("%d\n",S.size());
	for(set<pair<int,int> >::iterator it=S.begin();it!=S.end();it++)
	{
		if(it!=S.begin())
			printf(" ");
		printf("%d",it->second);
	}
	printf("\n");
	return 0;
}
int main(void)
{
	read();
	init();
	solve();
	return 0;
}
