#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <list>
#include <set>
#include <map>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <iterator>
#include <complex>
#include <utility>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cctype>
#include <cstring>
#include <ctime>
#include <cassert>
#define INF 0x7FFFFFFF
#define sqr(x) ((x)*(x))
#define MP make_pair
#define PB push_back
#define F first
#define S second
typedef long long LL;
typedef long double LD;
typedef std::pair<int, int> PII;
using namespace std;
const int MOD = 1e9+7;
const int maxn = 1000000+5;
const LD eps = 1e-6;
LD PI = acos((LD)(-1));

int n, m;
int p[maxn], a[maxn];
int nxt[maxn], pre[maxn];
set<PII> S;
PII c[maxn];

int time(int x, int y) {
    if (x == y) return INF;
    LL p1 = p[x], p2 = p[y];
    if (x > y) p2 = (p2 + a[y]) % m;
    if (p2 < p1) p2 += m;
    if (p2-p1 <= a[x]) return 1;
    if (a[y] >= a[x]) return INF;

    int l = 1, r = INF, ans = INF;
    while (l <= r) {
        int mid = l + (r - l)/2;
        if (p1+(LL)a[x]*mid >= p2+(LL)a[y]*(mid-1))
            ans = mid, r = mid-1;
        else
            l = mid+1;
    }
    return ans;
}

int main() {
    //freopen("input.in", "r", stdin);
    //std::ios_base::sync_with_stdio(false);

    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i++) {
        scanf("%d%d", &p[i], &a[i]);
        p[i]--;
        c[i] = MP(p[i], i);
    }
    sort(c, c+n);
    for (int i = 0; i < n; i++) {
        nxt[c[i].S] = c[(i+1)%n].S;
        pre[c[i].S] = c[(i-1+n)%n].S;
    }
    for (int i = 0; i < n; i++)
        S.insert(MP(time(i, nxt[i]), i));
    while (!S.empty()) {
        PII now = *S.begin();
        if (now.F == INF) break;
        S.erase(now);
        int x = now.S;
        S.erase(MP(time(nxt[x], nxt[nxt[x]]), nxt[x]));
        S.erase(MP(time(pre[x], x), pre[x]));
        p[x] += now.F, a[x]--;
        nxt[x] = nxt[nxt[x]];
        pre[nxt[x]] = x;
        pre[nxt[x]] = x;
        S.insert(MP(time(pre[x], x), pre[x]));
        S.insert(MP(time(x, nxt[x]), x));
    }
    printf("%d\n", (int)S.size());
    for (set<PII>::iterator iter = S.begin(); iter != S.end(); iter++)
        printf("%d ", (*iter).S + 1);
    printf("\n");

    
    return 0;
}

