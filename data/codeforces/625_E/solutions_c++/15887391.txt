#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <map>
#include <queue>
#include <set>

using namespace std;

bool dead[100500];
const int inf  = int(1e9) + 7;
priority_queue<pair<int,int> > s;
int a[100600];
int p[100500];
int p1[100500];
int z[100500];
int next[100500];
int prev[100500];
int value[100500];
pair<int,int> b[100500];
int n,m;

void check(int u,int v)
{
    int dist = p[v] - p[u];
    if(dist<0) dist+=m;
    if(dist<=a[u] && u<v) value[u] = 1; else
    if(a[u]<=a[v])value[u] = inf; else
    {       if(u>v)
            {
                int k = dist / (a[u]-a[v]);
                if(dist%(a[u]-a[v])) k++;
                value[u] = k;
            }else
            {
                int k = 1;
                dist-=a[u];
                k += dist / (a[u]-a[v]);
                if(dist%(a[u]-a[v])) k++;
                value[u] = k;
            }
    }
    pair<int,int> t = make_pair(-value[u],-u);
    s.push(t);
}

bool check2(int u,int v,long long k)
{
    long long pos1 = z[u]; pos1*=m; pos1+=p[u]; pos1 +=(long long)a[u] *k;
    long long pos2 = z[v]; pos2*=m; pos2+=p[v]; pos2 +=(long long)a[v] *(k-1);
    if(u>v) pos2+=a[v];
    if(p1[u]>p1[v]) pos2+=m;
    return (pos1>=pos2);
}

int main()
{
    //test();return 0;
    scanf("%d%d",&n,&m);
    for(int i=0;i<n;i++)
    {
        scanf("%d%d",p+i,a+i);
        p[i]--;
        p1[i] = p[i];
        b[i].first = p[i];
        b[i].second = i;
    }
    sort(b,b+n);
    b[n] = b[0];
    for(int i=0;i<n;i++)
    {
        int u = b[i].second;
        int v = b[i+1].second;
        next[u] = v;
        prev[v] = u;
        check(u,v);
    }
    int total = n;
    while(!s.empty())
    {
        int u = -s.top().second;
        int val = -s.top().first;
        s.pop();
//        if(value[u]!=val) continue;
        if(dead[u]) continue;
        if(val==inf) break;
        int v = next[u];
        bool t = true;
        while(check2(u,v,val))
        {
            t= false;
            dead[v] = true;
            total--;
            if(total==1) break;
            v = next[v];
            next[u] = v;
            prev[v] = u;
            if(a[u])
            {
                a[u]--;
                p[u]+=val;
                z[u]+=p[u]/m;
                p[u]%=m;
            }
        }
        if(total==1) break;
        if(t) continue;
        check(u,next[u]);
        check(prev[u],u);
    }
    printf("%d\n",total);
    for(int i=0;i<n;i++)
        if(!dead[i])    printf("%d ",i+1);
    return 0;
}
