#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <vector>
#include <bitset>
#include <functional>
using namespace std;
const long long mod = 1e9 + 7;
const int inf = 1 << 30;
const int maxn = 100005;
inline int read ()
{
	int res, ok = 1;
	char ch;
	for (ch = getchar (); ch < '0' || ch > '9'; ch = getchar ())
	if (ch == '-')
	ok = -1;
	res = ch - '0';
	for (ch = getchar (); ch >= '0' && ch <= '9'; ch = getchar ())
	res = res * 10 + ch - '0';
	return res * ok;
}
int n, m, next[maxn], pre[maxn], p[maxn], a[maxn];
bool vis[maxn];
vector <pair <int, int> > vec;
vector <int> ans;
set <pair <int, int> > s;
inline int get_time (int i, int j)
{
	if (i == j)
	return inf;
	int pa, pb, d;
	pa = p[i];
	pb = p[j];
	d = (pb - pa + m) % m;
	if (i > j)
	d = (d + a[j]) % m;
	if (d <= a[i])
	return 1;
	if (a[j] >= a[i])
	return inf;
	long long v = a[i] - a[j];
	return (d - a[j] - 1) / v + 1;
}
int main ()
{
	n = read();
	m = read();
	for (int i = 0; i < n; i++)
	{
		p[i] = read();
		a[i] = read();
		p[i]--;
		vec.push_back (make_pair (p[i], i));
	}
	sort (vec.begin(), vec.end());
	for (int i = 0; i < n; i++)
	{
		next[vec[i].second] = vec[(i + 1) % n].second;
		pre[vec[i].second] = vec[(i + n - 1) % n].second;
	}
	for (int i = 0; i < n; i++)
	s.insert (make_pair (get_time (i, next[i]), i));
	while (!s.empty())
	{
		pair <long long, int> head = *s.begin();
		if (head.first == inf)
		break;
		int x = head.second;
		vis[next[x]] = 1;
		s.erase (head);
		s.erase (make_pair (get_time (next[x], next[next[x]]), next[x]));
		s.erase (make_pair (get_time (pre[x], x), pre[x]));
		p[x] += get_time (x, next[x]);
		a[x]--;
		next[x] = next[next[x]];
		pre[next[x]] = x;
		s.insert (make_pair (get_time (pre[x], x), pre[x]));
		s.insert (make_pair (get_time (x, next[x]), x));
	}
	for (int i = 0; i < n; i++)
	{
		if (!vis[i])
		ans.push_back (i + 1);
	}
	printf ("%d\n", ans.size());
	for (int i = 0; i < (int)ans.size(); i++)
	printf ("%d ", ans[i]);
	printf ("\n");
	return 0;
}
