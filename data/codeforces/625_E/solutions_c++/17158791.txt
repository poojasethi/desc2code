#include<set>
#include<map>
#include<list>
#include<cmath>
#include<queue>
#include<ctime>
#include<stack>
#include<bitset>
#include<string>
#include<vector>
#include<cstdio>
#include<climits>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<algorithm>
using namespace std;

int n,m;
int p[100010],a[100010];//p��ʾ���Ϊi�����ܵ����꣬a��ʾ���Ϊi���������ľ���
int x[100010];//x��ʾ�ŵ�iλ�����ܵı��
int nextt[100010],pre[100010];//ģ��������ʾ���Ϊi�����ܵĺ�̺�ǰ��
bool cmp(int i,int j)
{
    return p[i]<p[j];
}
typedef pair<int,int>pii;
set<pii>st;
set<pii>::iterator it;
const int inf=INT_MAX;

int dis(int i,int j)//��������i������jҪ�����ٲ���inf��ʾ����ײ��
{
    if(i==j)
        return inf;
    int d=(p[j]-p[i]+m)%m;
    if(i>j)
        d=(d+a[j])%m;
    if(d<=a[i])
        return 1;
    if(a[i]<=a[j])
        return inf;
    int s=a[i]-a[j];
    return (d-a[j]-1)/s+1;
}

int main()
{
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d",&p[i],&a[i]);
        p[i]--;
        x[i]=i;
    }
    sort(x+1,x+n+1,cmp);//ʹ���ܰ������С��������
    for(int i=1;i<=n;i++)//����˫����ģ�⻷�������ϵ�����
    {
        if(i<n)
            nextt[x[i]]=x[i+1];
        else
            nextt[x[i]]=x[1];
        pre[nextt[x[i]]]=x[i];
    }
    for(int i=1;i<=n;i++)
        st.insert(make_pair(dis(i,nextt[i]),i));
    while(!st.empty())
    {
        it=st.begin();
        if(it->first==inf)
            break;
        int i=it->second;
        st.erase(it);
        st.erase(make_pair(dis(nextt[i],nextt[nextt[i]]),nextt[i]));
        st.erase(make_pair(dis(pre[i],i),pre[i]));
        p[i]+=dis(i,nextt[i]);//������ײ�����ܵ��ƶ������С1����ǰ����ƶ��Ѿ�������������ڵ���ֻ���ܵ���ײ��������Ӱ�죬����Ҫ���ϲ�������Ӱ��
        a[i]--;
        nextt[i]=nextt[nextt[i]];//ɾ����ײ������
        pre[nextt[i]]=i;
        st.insert(make_pair(dis(pre[i],i),pre[i]));//���¼����������ܵĲ���
        st.insert(make_pair(dis(i,nextt[i]),i));
    }
    printf("%d\n",st.size());
    for(it=st.begin();it!=st.end();it++)
        printf("%d ",it->second);
    return 0;
}
