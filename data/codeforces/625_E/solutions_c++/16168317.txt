#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <stdio.h>
using namespace std;
typedef long long ll;
const int n=100003;
int q,f[n],f1[n];
int k(int w){
  if(f[w]!=w)
   f[w]=k(f[w]);
  return f[w];
}
int k1(int w){
  if(f1[w]!=w)
   f1[w]=k1(f1[w]);
  return f1[w];
}
ll s[n],immval[n],rnd[n];
int jmp[n],start[n],realid[n];
int invrealid[n];
ll gotoimmval[n];
ll gotornd[n];
void qs(int q,int w){
  int e=q,r=w,t=start[q+(rand()%(w-q+1))],y;
  do{
   while(start[e]<t)e++;
   while(start[r]>t)r--;
   if(e<=r){
    y=start[e];start[e]=start[r];start[r]=y;
    y=jmp[e];jmp[e]=jmp[r];jmp[r]=y;
    y=realid[e];realid[e]=realid[r];realid[r]=y;
    e++;r--;}
  }while(e<=r);
  if(q<r)qs(q,r);
  if(e<w)qs(e,w);
}
class heap{
  public:
  int y,u,*d,*f,*g;
  int cmp(int e,int r){
    if(s[e]<s[r])
     return -1;
    if(s[e]>s[r])
     return 1;
    if(realid[e]<realid[r])
     return -1;
    if(realid[e]>realid[r])
     return 1;
    return 0;
  }
  void k(int e,int w){
    while((e>1)&&(cmp(w,d[e>>1])<0)){
     d[e]=d[e>>1];
     g[d[e]]=e;
     e>>=1;
    }
    d[e]=w;
    g[w]=e;
  }
  void l(int w){
    if(u){
     u--;
     k(f[u],w);
    }else{
     k(y,w);
     y++;
    }
  }
  void m(int w){
    int e=g[w],r=e<<1;
    while((d[r]>=0)||(d[r+1]>=0))
     if((d[r]>=0)&&((d[r+1]<0)||( cmp(d[r],d[r+1])<0 ))){
      d[e]=d[r];
      g[d[e]]=e;
      e=r;
      r=e<<1;
     }else{
      d[e]=d[r+1];
      g[d[e]]=e;
      e=r+1;
      r=e<<1;
     }
    d[e]=-1;
    f[u]=e;
    u++;
  }
  void ini(){
    int w;
    y=1;
    u=0;
    d=new int[n*2];
    f=new int[n];
    g=new int[n];
    for(w=0;w<n*2;w++)
     d[w]=-1;
    for(w=0;w<q;w++)
     l(w);
  }
  void upd(int w,ll e){
    s[w]=e;
    m(w);
    l(w);
  }
};
heap c;
int y;
void check(int e){
  int r;
  r=k(e+1);
  if(e==r){
   c.upd(e,((ll)1)<<40);
   return;
  }
  ll c1=immval[e],v1=immval[r];
  if(e>r){
   v1+=y;
  }
  ll rnde=rnd[e];
  if((rnd[e]<=rnd[r])&&(realid[e]<realid[r])){
   c1+=(rnd[r]-rnd[e]+1)*jmp[e];
   rnde=rnd[r]+1;
  }
  if((rnd[e]<rnd[r])&&(realid[e]>realid[r])){
   c1+=(rnd[r]-rnd[e])*jmp[e];
   rnde=rnd[r];
  }
  if((rnd[e]>rnd[r])&&(realid[e]<realid[r])){
   v1+=(rnd[e]-rnd[r]-1)*jmp[r];
  }
  if((rnd[e]>=rnd[r])&&(realid[e]>realid[r])){
   v1+=(rnd[e]-rnd[r])*jmp[r];
  }
  if(c1>=v1){
   gotoimmval[e]=c1;
   gotornd[e]=rnde;
   c.upd(e,rnde);
   return;
  }
  if(jmp[e]<=jmp[r]){
   c.upd(e,((ll)1)<<40);
   return;
  }
  gotoimmval[e]=c1+((v1-c1)/(jmp[e]-jmp[r]))*jmp[e];
  rnde+=(v1-c1)/(jmp[e]-jmp[r]);
  if((v1-c1)%(jmp[e]-jmp[r])>0){
   rnde++;
   gotoimmval[e]+=jmp[e];
  }
  gotornd[e]=rnde;
  c.upd(e,rnde);
}
int main(){
  #ifdef Vlad_kv
   freopen("input.txt","r",stdin);
   freopen("output.txt","w",stdout);
  #endif // Vlad_kv
  int w,r,t,del;
  cin>>q>>y;
  c.ini();
  for(w=0;w<q;w++){
   s[w]=((ll)1)<<40;
   scanf("%d%d",&start[w],&jmp[w]);
   realid[w]=w;
  }
  qs(0,q-1);
  for(w=0;w<q;w++){
   invrealid[realid[w]]=w;
   immval[w]=start[w];
   rnd[w]=0;
   f[w]=f1[w]=w;
  }
  f[q]=0;
  for(w=0;w<q;w++)
   check(w);
  ll e,buffimmval,buffrnd;
  while(s[c.d[1]]< ((ll)1)<<40 ){
   w=c.d[1];
   e=s[w];
   r=0;
   buffimmval=gotoimmval[w];
   buffrnd=gotornd[w];
   do{
    r++;
    del=k(w+1);
    c.upd(del,((ll)1)<<40);
    f[del]=f[del+1];
    f1[del]=(del-1+q)%q;
    check(w);
   }while((c.d[1]==w)&&(s[w]==e));
   jmp[w]-=r;
   immval[w]=buffimmval;
   rnd[w]=buffrnd;
   check(w);
   check(k1( (w-1+q)%q ));
  }
  int ans=0;
  for(w=0;w<q;w++)
   if(f[w]==w)
    ans++;
  cout<<ans<<"\n";
  for(w=0;w<q;w++)
   if(f[w]==w)
    printf("%d ",realid[w]+1);
  return 0;
}