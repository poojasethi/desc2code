import sys
from fractions import Fraction

class Area:
    def __init__(self, x1, y1, x2, y2):
        self.x1 = x1
        self.x2 = x2
        self.y1 = y1
        self.y2 = y2

    def __mul__(self, other):
        x1 = max(self.x1, other.x1)
        x2 = min(self.x2, other.x2)
        y1 = max(self.y1, other.y1)
        y2 = min(self.y2, other.y2)
        return Area(x1, y1, x2, y2)

class Brick:
    def __init__(self, a, x, y):
        self.x = Fraction(2 * x + a, 2)
        self.y = Fraction(2 * y + a, 2)
        self.w = a ** 3
    def addTo(self, other):
        self.x = Fraction(self.x * self.w + other.x * other.w, self.w + other.w)
        self.y = Fraction(self.y * self.w + other.y * other.w, self.w + other.w)
        self.w += other.w

    def inArea(self, area):
        return self.x >= area.x1 and self.x <= area.x2 and self.y >= area.y1 and self.y <= area.y2

if __name__ == "__main__":
    n = int(raw_input())
    Bricks = []
    Areas = []
    topArea = Area(-100, -100, 100, 100);
    for i in range(n):
        (x1, y1, x2, y2) = map(int, raw_input().split())
        if x1 > x2:
            x1, x2 = x2, x1
        if y1 > y2:
            y1, y2 = y2, y1
        Areas.append(topArea * Area(x1, y1, x2, y2))
        topArea = Area(x1, y1, x2, y2)
        a = x2 - x1
        Bricks.append(Brick(a, x1, y1))
        for j in range(i - 1, -1, -1):
            Bricks[j].addTo(Bricks[i])
        for j in range(i, -1, -1):
            if not Bricks[j].inArea(Areas[j]):
                print i
                sys.exit(0)
    print n
