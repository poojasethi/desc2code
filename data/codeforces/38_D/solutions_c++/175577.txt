#include <iostream>
using namespace std;
const double EPS = 1e-10;
const int N = 100;
double x1[N], x2[N], y1[N], y2[N];
double x0[N], y0[N], V[N];
int n, m;

double Cube(double x){
	return x * x * x;
}

void init(){
	for (int i=0;i<n;i++){
		cin >> x1[i] >> y1[i] >> x2[i] >> y2[i];
		if (x1[i] > x2[i]) swap(x1[i], x2[i]);
		if (y1[i] > y2[i]) swap(y1[i], y2[i]);
		V[i] = Cube(x2[i] - x1[i]);
		x0[i] = (x1[i] + x2[i]) / 2;
		y0[i] = (y1[i] + y2[i]) / 2;
	}
}

bool cover(double l, double m, double r){
	return l-EPS<=m && m-EPS<=r;
}

bool collapse(){
	double X = 0, Y = 0, S = 0;
	
	for (int i=m;i>0;i--){
		X = (S * X + V[i] * x0[i]) / (S + V[i]);
		Y = (S * Y + V[i] * y0[i]) / (S + V[i]);
		if (!cover(x1[i-1], X, x2[i-1])) return true;
		if (!cover(y1[i-1], Y, y2[i-1])) return true;
		S += V[i];
	}
	return false;
}

void solve(){		
	for (m=1;m<n;m++)
		if (collapse()) break;
}

int main(){
	while (cin >> n){
		init(); solve();
		cout << m << endl;
	}
}