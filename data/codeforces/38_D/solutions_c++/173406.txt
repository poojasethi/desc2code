#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <complex>

using namespace std;

typedef long double ld;

struct cube {
	ld x1;
	ld y1;
	ld x2;
	ld y2;
};


bool in(ld a, ld b, ld c) {
	return (b > a) ? (c >= a && c <= b) : (c >= b && c <= a);
}

int main()
{
	int n;
    cin >> n;

    vector<cube> vc(n);
    vector< complex<ld> > vcm(n);
    vector<ld> vm(n);

	int i=0;
	ld h = 0;
    for(i=0; i<n; ++i) {
    	cin >> vc[i].x1 >> vc[i].y1 >> vc[i].x2 >> vc[i].y2;

    	vcm[i] = complex<ld> (vc[i].x1 + vc[i].x2, vc[i].y1 + vc[i].y2) / 2.0l;
    	vm[i] = fabsl( ld(vc[i].y1 - vc[i].y2) * (vc[i].y1 - vc[i].y2) * (vc[i].y1 - vc[i].y2) );

    	for(int j=i-1; j>=0; --j) {
    		if(!in(vc[j].x1, vc[j].x2, vcm[j+1].real()) || !in(vc[j].y1, vc[j].y2, vcm[j+1].imag()))
				goto end;

			double dm = vm[j] / vm[i];
			vcm[j] = ( vm[j] * vcm[j] + vm[i] * vcm[i] ) / (vm[j] + vm[i]);
			vm[j] += vm[i];
    	}

    }

	end:

	cout << i;
	/*cout << endl << vcm[0].x << ' ' << vcm[0].y << endl;
	cout << vm[0] << endl;
	cout << vcm[1].x << ' ' << vcm[1].y << endl;
	cout << vm[1] << endl;*/

    return 0;
}
