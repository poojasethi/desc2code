#include<map>
#include<set>
#include<list>
#include<cmath>
#include<queue>
#include<stack>
#include<bitset>
#include<cstdio>
#include<string>
#include<vector>
#include<climits>
#include<complex>
#include<cstdlib>
#include<cstring>
#include<numeric>
#include<iostream>
#include<algorithm>
#include<functional>

using namespace std;

int main()
{
	int n,m;	cin>>n>>m;
	vector<int> seg(n);
	int xs,ys;	cin>>xs>>ys;
	int xb=xs,yb=ys;
	for(int i=0;i<n-1;i++){
		int x,y;	cin>>x>>y;
		seg[i]=abs(x-xb)+abs(y-yb);
		xb=x,yb=y;
	}
	seg[n-1]=abs(xs-xb)+abs(ys-yb);

	vector<int> rod(m);
	for(int i=0;i<m;i++)	cin>>rod[i];

	int ok=-1;
	vector<int> patt[2];
	for(int k=0;k<2;k++){
		patt[k].resize(n/2);
		for(int i=0;i<n/2;i++){
			if(k==0)	patt[k][i]=seg[2*i]+seg[2*i+1];
			else		patt[k][i]=seg[2*i]+seg[(2*i+n-1)%n];
		}

		// check whether it is feasible to make closed polyline
		int usedcnt=0;
		vector<bool> used(m);
		for(int i=0;i<n/2;i++){
			for(int j=0;j<m;j++){
				if(used[j])	continue;
				if(patt[k][i]==rod[j]){
					patt[k][i]=j+1;
					used[j]=true;
					usedcnt++;
					break;
				}
			}
		}
		if(usedcnt==n/2){ok=k;break;}
	}

	cout<<(~ok?"YES":"NO")<<endl;
	if(~ok){
		if(ok==0)
			for(int i=0;i<n/2;i++)
				cout<<(i?" ":"")<<-1<<" "<<patt[ok][i];
		else
			for(int i=0;i<n/2;i++)
				cout<<(i?" ":"")<<patt[ok][i]<<" "<<-1;
	}

	return 0;
}
