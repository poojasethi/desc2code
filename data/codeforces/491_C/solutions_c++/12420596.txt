#include <bits/stdc++.h>
#define MX 105
#define INF ((int)1e9)
using namespace std;
int n, K;
char str[2][2234567];
int cost[MX][MX], u[MX], v[MX], L[MX], R[MX], res, dist[MX], prev[MX], chk[MX];
char getrev(int ch) {
    if (ch < 26) return ch + 'a';
    return ch - 26 + 'A';
}
int get(char ch) {
    if (ch <= 'z' && ch >= 'a') return ch - 'a';
    return ch - 'A' + 26;
}
 
void Hungarian() {
    int i, j;
    memset(L, -1, sizeof L);
    memset(R, -1, sizeof R);
    for (i = 0; i < K; i++) {
        u[i] = cost[i][0];
        for (j = 1; j < K; j++) {
            u[i] = max(u[i], cost[i][j]);
        }
    }
    for (j = 0; j < K; j++) {
        v[j] = u[0] - cost[0][j];
        for (i = 1; i < K; i++) {
            v[j] = max(v[j], u[i] - cost[i][j]);
        }
    }
    int max_match = 0;
    for (i = 0; i < K; i++) {
        for (j = 0; j < K; j++) if (R[j] == -1) {
            if (u[i] + v[j] == cost[i][j]) {
                L[i] = j;
                R[j] = i;
                max_match++;
                break;
            }
        }
    }
    while (max_match++ < K) {
        int s;
        for (s = 0; s < K; s++) if (L[s] == -1) break;
        memset(prev, -1, sizeof prev);
        memset(chk, 0, sizeof chk);
        for (i = 0; i < K; i++) {
            dist[i] = u[s] + v[i] - cost[s][i];
        }
        while (true) {
            j = -1;
            for (i = 0; i < K; i++) if (chk[i] == 0) {
                if (j == -1 || dist[i] < dist[j]) j = i;
            }
            chk[j] = 1;
             
            if (R[j] == -1) {
                break;
            }
            int mate = R[j];
            for (i = 0; i < K; i++) if (!chk[i]) {
                int wei = dist[j] + u[mate] + v[i] - cost[mate][i];
                if (wei < dist[i]) {
                    dist[i] = wei;
                    prev[i] = j;
                }
            }
        }
        for (i = 0; i < K; i++) if (chk[i] == 1) {
            if (i == j) continue;
            int mate = R[i];
            u[mate] -= dist[j] - dist[i];
            v[i] += dist[j] - dist[i];
        }
        u[s] -= dist[j];
        for (; prev[j] >= 0;) {
            int d = prev[j];
            assert(d >= 0 && d < K);
            int mate = R[d];
            L[mate] = j; R[j] = mate;
            j = d;
        }
        L[s] = j; R[j] = s;
    }
    for (i = 0; i < K; i++) res += u[i] + v[i];
    printf("%d\n", res);
    for (i = 0; i < K; i++) {
        putchar(getrev(L[i]));
    }
    puts("");
}
 
int main() {
    scanf("%d%d%s%s", &n, &K, str[0], str[1]);
    int i;
    for (i = 0; i < n; i++) {
        int id = get(str[0][i]), id1 = get(str[1][i]);
        cost[id][id1]++;
    }
    Hungarian();
    return 0;
} 

		   		 	 		  	 				      		  	