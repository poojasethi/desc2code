#include <cstdio>
#include <cstring>

const int MaxN = 2000000;
int n;
char s1[MaxN+5], s2[MaxN+5];
const int MaxK = 52;
int K;
int w[MaxK+1][MaxK+1];
int lx[MaxK+1], ly[MaxK+1];
int slack[MaxK+1];
bool xvis[MaxK+1], yvis[MaxK+1];
int match[MaxK+1];

const int WInf = 100000000;

int Ans;

void read()
{
	scanf("%d%d", &n, &K);
	scanf("%s", s1+1);
	scanf("%s", s2+1);
	for (int i = 1; i <= n; ++i)
	{
		if (s1[i] <= 'Z') s1[i] -= 'A' - 26; else s1[i] -= 'a';
		if (s2[i] <= 'Z') s2[i] -= 'A' - 26; else s2[i] -= 'a';
		++w[s2[i] + 1][s1[i] + 1];
	}
}

bool Hungary(int i)
{
    int j; int t;
    xvis[i] = 1; 
	for (j = 1; j<=K; ++j)
	 if (!yvis[j])
	 {
		t = lx[i] + ly[j] - w[i][j];
		if (!t)
		{
			yvis[j] = 1;
			if (!match[j] || Hungary(match[j]))
			{
				match[j] = i;
				return 1;
			}
		}
		else
		 if (slack[j] > t)
		  slack[j] = t;
	 }
	return 0;
}

void KM()
{
    int i, j, p; int d;
	for (i = 1; i<=K; ++i)
	 for (j = 1; j<=K; ++j)
	  if (lx[i] < w[i][j]) lx[i] = w[i][j];

	for (p = 1; p<=K; ++p)
	{
		for (j = 1; j<=K; ++j)
		 slack[j] = WInf;
		while (1)
		{
			memset(xvis, 0, sizeof xvis);
			memset(yvis, 0, sizeof yvis);
			if (Hungary(p)) break;
			d = WInf;
			for (j = 1; j<=K; ++j)
			 if (!yvis[j])
			  if (slack[j] < d) d = slack[j];
		    for (i = 1; i<=K; ++i)
		    {
		    	if (xvis[i]) lx[i] -= d;
		    	if (yvis[i]) ly[i] += d; else slack[i] -= d;
		    }
		}
	}
}

void write()
{
    int j; 
	Ans = 0;
	for (j = 1; j<=K; ++j)
	 Ans += w[match[j]][j];
	printf("%d\n", Ans);
	for (j = 1; j<=K; ++j)
	 putchar(match[j] <= 26 ? 'a' + match[j] - 1 : 'A' + match[j] - 27);
	putchar('\n');
}

int main()
{
	read();
	KM();
	write();
	return 0;
}
