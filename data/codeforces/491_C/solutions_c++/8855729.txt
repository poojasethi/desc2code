#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>

using namespace std;

const int inf = 1e9;
const int N = 505;
const int M = N * N;

char a[2000005];
char b[2000005];
int ff[N][N];
int n;
int m;
int s;
int t;
int c[M];
int f[M];
int cost[M];
int to[M];
int prev[M];
int last[N];
int needf;
int ansf;
int ansc;

void add_edge(int x, int y, int v, int cc) {
  c[m] = v; f[m] = 0; cost[m] = +cc; to[m] = y; prev[m] = last[x]; last[x] = m; ++m;
  c[m] = 0; f[m] = 0; cost[m] = -cc; to[m] = x; prev[m] = last[y]; last[y] = m; ++m;
}

bool spfa() {
  static int pv[N], pe[N], d[N], q[1000000];
  static bool inq[N];
  for (int i = 0; i < N; ++i) {
    d[i] = inf;
    inq[i] = false;
  }
  q[0] = s;
  d[s] = 0;
  inq[s] = true;
  for (int qh = 0, qt = 1; qh < qt; ++qh) {
    int x = q[qh];
    inq[x] = false;
    for (int i = last[x]; i != -1; i = prev[i]) {
      if (c[i] > f[i]) {
        if (d[x] + cost[i] < d[to[i]]) {
          d[to[i]] = d[x] + cost[i];
          pv[to[i]] = x;
          pe[to[i]] = i;
          if (!inq[to[i]]) {
            q[qt++] = to[i];
            inq[to[i]] = true;
          }
        }
      }
    }
  }
  if (d[t] == inf) {
    return false;
  }
  int flow = needf - ansf;
  for (int x = t; x != s; x = pv[x]) {
    flow = min(flow, c[pe[x]] - f[pe[x]]);
  }
  for (int x = t; x != s; x = pv[x]) {
    f[pe[x]] += flow;
    f[pe[x] ^ 1] -= flow;
    ansc += cost[pe[x]] * flow;
  }
  ansf += flow;
  return needf != ansf;
}

int get_id(char c) {
  return tolower(c) - 'a' + (isupper(c) ? 26 : 0);
}

char get_char(int x) {
  return x < 26 ? x + 'a' : x - 26 + 'A';
}

int main() {
  // freopen("in", "r", stdin); freopen("out", "w", stdout);
  int n, k;
  scanf("%d %d", &n, &k);
  scanf("%s %s", a, b);
  m = 0;
  s = 0;
  t = 1;
  for (int i = 0; i < N; ++i) {
    last[i] = -1;
  }
  memset(ff, 0, sizeof ff);
  for (int i = 0; i < n; ++i) {
    ff[get_id(a[i])][get_id(b[i])] += 1;
  }
  for (int i = 0; i < k; ++i) {
    add_edge(0, i + 2, 1, 0);
  }
  for (int i = 0; i < k; ++i) {
    for (int j = 0; j < k; ++j) {
      add_edge(i + 2, j + 2 + k, 1, -ff[i][j]);
    }
  }
  for (int i = 0; i < k; ++i) {
    add_edge(i + 2 + k, 1, 1, 0);
  }
  needf = k;
  ansf = 0;
  ansc = 0;
  while (spfa());
  printf("%d\n", -ansc);
  for (int i = 0; i < k; ++i) {
    int e = last[i + 2];
    while (e != -1) {
      if (f[e] == 1) {
        putchar(get_char(to[e] - 2 - k));
      }
      e = prev[e];
    }
  }
  printf("\n");
  return 0;
}