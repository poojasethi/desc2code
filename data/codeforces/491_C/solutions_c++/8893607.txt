#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>

using namespace std;

#define ll long long
#define vi vector<int>
#define pi pair<int,int>
#define pb push_back
#define mp make_pair
#define forn(i,n) for (size_t i = 0; i < n; ++i)
#define forb(i,n) for (int i = n - 1; i >= 0; --i)
                              
const double EPS = 1e-9;
const int MAXN = 2000005;
const int MOD = 1e9 + 7;
const int MOD1 = 1e9 + 35011;
const int MOD2 = 1e9 + 18169;
const int INF = (1 << 30);
const long long INFl = 1e18;

int g[55][55], n, m, len;
char a[MAXN], b[MAXN];

int cti(char ch) {
	if ('A' <= ch && ch <= 'Z')
		return ch - 'A' + 27;
	return ch - 'a' + 1;
}
int ctc(int n) {
	if (n < 27)
		return 'a' + n - 1;
	return 'A' + n - 27;
}

int main() {
#ifdef F0X
	freopen("input.in", "r", stdin);
	double st = clock();
#endif

	while(scanf("%d%d\n", &len, &n) == 2) {
		memset(g, 0, sizeof(g));
		m = n;
		gets(a); gets(b);
		forn(i,len) g[cti(a[i])][cti(b[i])]++;
	
		forn(i,55) forn(j,55) g[i][j] *= -1;
	
		// e-maxx algos
		vector<int> u(n + 1), v(m + 1), p(m + 1), way(m + 1);
		for (int i = 1; i <= n; ++i) {
			p[0] = i;
			int j0 = 0;
			vector<int> minv(m + 1, INF);
			vector<char> used(m + 1, false);
			do {
				used[j0] = true;
				int i0 = p[j0], delta = INF, j1;
				for (int j = 1; j <= m; ++j)
					if (!used[j]) {
						int cur = g[i0][j] - u[i0] - v[j];
						if (cur < minv[j])
							minv[j] = cur, way[j] = j0;
						if (minv[j] < delta)
							delta = minv[j], j1 = j;
					}
				for (int j = 0; j <= m; ++j)
					if (used[j])
						u[p[j]] += delta, v[j] -= delta;
					else
						minv[j] -= delta;
				j0 = j1;
			} while (p[j0]);
			do {
				int j1 = way[j0];
				p[j0] = p[j1];
				j0 = j1;
			} while (j0);
		}		
		vector<int> ans(n + 1);
		for (int j = 1; j <= m; ++j)
			ans[p[j]] = j;
		// end
  	
		int val = 0;
		for (int i = 1; i <= n; ++i)
			val += -g[i][ans[i]];
		printf("%d\n", val);
		for (int i = 1; i <= n; ++i)
			putchar(ctc(ans[i]));
		putchar('\n');
	}
#ifdef F0X
	cerr << "Time is " << (clock() - st) / CLOCKS_PER_SEC << endl;
#endif
	return 0;
}