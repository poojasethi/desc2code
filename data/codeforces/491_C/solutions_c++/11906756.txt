#include <bits/stdc++.h>
using namespace std ;

typedef long long LL ;

#define clr( a , x ) memset ( a , x , sizeof a )

const int MAXN = 125 ;
const int MAXE = 10005 ;
const int INF = 0x3f3f3f3f ;

struct Edge {
	int v , c , w , n ;
	Edge () {}
	Edge ( int v , int c , int w , int n ) : v ( v ) , c ( c ) , w ( w ) , n ( n ) {}
} ;

Edge E[MAXE] ;
int H[MAXN] , cntE ;
int d[MAXN] , vis[MAXN] , cur[MAXN] ;
int Q[MAXN] , head , tail ;
int flow , cost ;
int s , t ;
int n , k ;
char s1[2000005] , p[2000005] ;
int G[MAXN][MAXN] ;

void init () {
	cntE = 0 ;
	clr ( H , -1 ) ;
}

void addedge ( int u , int v , int c , int w ) {
	E[cntE] = Edge ( v , c , +w , H[u] ) ;
	H[u] = cntE ++ ;
	E[cntE] = Edge ( u , 0 , -w , H[v] ) ;
	H[v] = cntE ++ ;
}

bool spfa () {
	head = tail = 0 ;
	clr ( vis , 0 ) ;
	clr ( d , INF ) ;
	d[s] = 0 ;
	cur[s] = -1 ;
	Q[tail ++] = s ;
	while ( head != tail ) {
		int u = Q[head ++] ;
		if ( head == MAXN ) head = 0 ;
		vis[u] = 0 ;
		for ( int i = H[u] ; ~i ; i = E[i].n ) {
			int v = E[i].v ;
			if ( E[i].c && d[v] > d[u] + E[i].w ) {
				d[v] = d[u] + E[i].w ;
				cur[v] = i ;
				if ( !vis[v] ) {
					vis[v] = 1 ;
					Q[tail ++] = v ;
					if ( tail == MAXN ) tail = 0 ;
				}
			}
		}
	}
	if ( d[t] == INF ) return 0 ;
	cost += d[t] ;
	flow ++ ;
	for ( int i = cur[t] ; ~i ; i = cur[E[i ^ 1].v] ) {
		E[i].c -- ;
		E[i ^ 1].c ++ ;
	}
	return 1 ;
}

int mcmf () {
	cost = flow = 0 ;
	while ( spfa () ) ;
	return cost ;
}

int encode ( char c ) {
	if ( c <= 'Z' ) return c - 'A' + 26 ;
	return c - 'a' ;
}

char decode ( int x ) {
	if ( x < 26 ) return x + 'a' ;
	return x - 26 + 'A' ;
}

void solve () {
	init () ;
	clr ( G , 0 ) ;
	for ( int i = 0 ; i < n ; ++ i ) {
		G[encode ( s1[i] )][encode ( p[i] )] ++ ;
	}
	s = 2 * k , t = s + 1 ;
	for ( int i = 0 ; i < k ; ++ i ) {
		addedge ( s , i , 1 , 0 ) ;
		addedge ( i + k , t , 1 , 0 ) ;
		for ( int j = 0 ; j < k ; ++ j ) {
			addedge ( i , k + j , 1 , -G[i][j] ) ;
		}
	}
	mcmf () ;
	printf ( "%d\n" , -cost ) ;
	for ( int i = 0 ; i < k ; ++ i ) {
		for ( int j = H[i] ; ~j ; j = E[j].n ) {
			int v = E[j].v ;
			if ( v == s || E[j].c ) continue ;
			printf ( "%c" , decode ( v - k ) ) ;
			break ;
		}
	}
	printf ( "\n" ) ;
}

int main () {
	while ( ~scanf ( "%d%d%s%s" , &n , &k , s1 , p ) ) solve () ;
	return 0 ;
}