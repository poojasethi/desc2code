#include <bits\stdc++.h>

using namespace std;

int a[55][55];

int conv(char c)
{
    if('A' <= c && c <= 'Z')
        return 27 + c - 'A';
    return c - 'a' + 1;
}

char smurfic(int x)
{
    if(x <= 26)
        return 'a' + x - 1;
    return 'A' + x - 27;
}

const int INF = 8000000;

int main(void)
{
    int n, len;
    string from, to;
    cin >> len >> n;
    cin >> from >> to;
    int m(n);
    for(int i = 0; i < len; ++i) {
        ++a[conv(from[i])][conv(to[i])];
    }
    for(int i = 0; i < 55; ++i)
        for(int j = 0; j < 55; ++j)
            a[i][j] *= -1;
            ///������� � ���� ������ ��� �� ������ �������� � e-maxx
    vector<int> u(n+1), v(m+1), p(m+1), way(m+1);
    for (int i = 1; i <= n; ++i) {
	p[0] = i;
	int j0(0);
	vector<int> minv(m+1, INF);
	vector<char> used(m+1, false);
	do {
		used[j0] = true;
		int i0(p[j0]),  delta(INF), j1;
		for (int j = 1; j <= m; ++j)
			if (!used[j])
                {
				int cur(a[i0][j]-u[i0]-v[j]);
				if (cur < minv[j])
					minv[j] = cur,  way[j] = j0;
				if (minv[j] < delta)
					delta = minv[j],  j1 = j;
			}
		for (int j = 0; j <= m; ++j)
			if (used[j])
				u[p[j]] += delta,  v[j] -= delta;
			else
				minv[j] -= delta;
		j0 = j1;
	} while (p[j0] != 0);
	do {
		int j1 = way[j0];
		p[j0] = p[j1];
		j0 = j1;
	} while (j0);
    }
    vector<int> ans(n+1);
    for (int j = 1; j <= m; ++j)
	ans[p[j]] = j;
    int val(0);
    for(int i = 1; i <= n; ++i)
        val += -a[i][ans[i]];
    cout << val << '\n';
    for(int i = 1; i <= n; i++)
        cout << smurfic(ans[i]);
    return 0;
}
