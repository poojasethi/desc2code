#include <bits/stdc++.h>
using namespace std;

#define MAXC 2000006
#define MAXN 55
#define INF 2147483647

int n, delta;
int w[MAXN][MAXN];
int alpha[MAXN], beta[MAXN];
int ma[MAXN], mb[MAXN];
bool visa[MAXN], visb[MAXN];
char mes[MAXC], cor[MAXC];


int iconv(char x) {
	if ('a' <= x && x <= 'z') return x - 'a';
	return (x - 'A') + 26;
}

char cconv(int x) {
	if (x < 26) return 'a' + x;
	return 'A' + x - 26;
}

bool dfs_augmentation(int v) {
	visa[v] = true;
	for (int u = 0; u < n; u++) {
		if (visb[u]) continue;
		if (alpha[v] + beta[u] == w[v][u]) {
			visb[u] = true;
			if (mb[u] == -1 || dfs_augmentation(mb[u])) {
				ma[v] = u; 
				mb[u] = v;
				return true;
			}
		} else {
			delta = min(delta, alpha[v] + beta[u] - w[v][u]);
		}
	}
	return false;
}

void hungarian() {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			alpha[i] = max(alpha[i], w[i][j]);
		}
	}
	int v = 0;
	while (v < n) {
		for (int i = 0; i < n; i++) {
			visa[i] = visb[i] = false;
		}
		delta = INF;
		if (dfs_augmentation(v)) {
			v++;
			continue;
		}
		for (int i = 0; i < n; i++) {
			if (visa[i]) alpha[i] -= delta;
		}
		for (int i = 0; i < n; i++) {
			if (visb[i]) beta[i] += delta;
		}
	}
}

int main() {
	int m;
	scanf("%d %d", &m, &n);
	scanf("%s %s", mes, cor);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			w[i][j] = 0;
		}
		ma[i] = mb[i] = -1;
		alpha[i] = beta[i] = 0;
	}
	for (int i = 0; i < m; i++) {
		int u = iconv(mes[i]);
		int v = iconv(cor[i]);
		w[u][v]++;
	}
	
	hungarian();
	
	int resp = 0;
	for (int i = 0; i < n; i++) {
		resp += w[i][ma[i]];
	}
	printf("%d\n", resp);
	for (int i = 0; i < n; i++) {
		printf("%c", cconv(ma[i]));
	}
	printf("\n");
	
	return 0;
}