#include <cstdio>
#include <cstring>
#include <iostream>
#define AddEdge(x,y,z,q) num[tail[x] = next[tail[x]] = ++ tot] = y;max[tot] = z;val[tot] = q;
#define N 11111
int d[N],map[111][111],l[N],next[N],tail[N],num[N],max[N],val[N],dfa[N],son[N],dpoi[N],ans,n,m,tot;
std::string s1,s2;
bool in[N];
bool spfa(int s, int tt){
	memset(d, 128, sizeof d);
	memset(dfa, 0, sizeof dfa);
	d[l[1] = s] = 0;
	int t = 1, w = 1;
	for (; t <= w; t ++ ){//printf("[%d %d]",l[t],d[l[t]]);
		int T = l[t];
		for (int i = next[T]; i; i = next[i])
			if (max[i] && d[num[i]] < val[i] + d[T]){
				d[num[i]] = val[i] + d[T];
				dpoi[num[i]] = i;
				dfa[num[i]] = T;
				if (!in[num[i]])
					in[l[ ++ w] = num[i]] = 1;
			}
		in[T] = 0;
	}
	if (d[tt] < - 10000000) return 0;
	ans += d[tt];
	for (int i = tt; i != s; i = dfa[i]){//printf("%d ",i);
		max[dpoi[i]] -- ;
		max[dpoi[i] ^ 1] ++ ;
		if (i > n) son[dfa[i]] = i - n;
	}//printf("\n");
	return 1;
}
int main(){
	scanf("%d%d", &m, &n);
	std::cin >> s1 >> s2;
	for (int i = 0; i < s1.size(); i ++ ){
		int t1 = 1, t2 = 1;
		if (s1[i] >= 'a') t1 += s1[i] - 'a';
		else t1 += s1[i] - 'A' + 26;
		if (s2[i] >= 'a') t2 += s2[i] - 'a';
		else t2 += s2[i] - 'A' + 26;
		map[t1][t2] ++ ;
	}
	for (tot = 1; tot <= n * 2 + 2; tot ++ )
		tail[tot] = tot;
	if (tot % 2 == 0) tot ++ ;
	for (int i = 1; i <= n; i ++ )
		for (int j = 1; j <= n; j ++ ){
			AddEdge(i, j + n, 1, map[i][j]);
			AddEdge(j + n, i, 0, - map[i][j]);
		}
	for (int i = 1; i <= n; i ++ ){
		AddEdge(n * 2 + 2, i, 1, 0);
		AddEdge(i, n * 2 + 2, 0, 0);
		AddEdge(i + n, n * 2 + 1, 1, 0);
		AddEdge(n * 2 + 1, i + n, 0, 0);
	}
	for (int i = 1; i <= n; i ++ ){
		spfa(n * 2 + 2, n * 2 + 1);
	}
	printf("%d\n", ans);
	for (int i = 1; i <= n; i ++ )
		if (son[i] > 26) putchar('A' + son[i] - 27);
		else putchar('a' + son[i] - 1);
	putchar('\n');
}
