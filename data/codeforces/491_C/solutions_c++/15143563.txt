//Pham Huu Canh
//C. Deciphering

#include <iostream>
#include <fstream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

#define max64 9223372036854775807LL
#define max32 2147483647
#define maxty 1001001001
#define max16 32767
#define EPS 1e-8
#define ll long long
#define ull unsigned long long
#define PB push_back
#define MP make_pair
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define timmax(x, y)    ((x) > (y) ? (x) : (y))
#define timmin(x, y)    ((x) < (y) ? (x) : (y))
#define fori(i, n)      for((i) = 0; (i) < (n); (i)++)
#define ford(i, n)      for((i) = (n-1); (i) >= 0; (i)--)
#define repi(i, a, b)   for((i) = (a); (i) <= (b); (i)++)
#define repd(i, a, b)   for((i) = (a); (i) >= (b); (i)--)
#define _all(tmpv)      tmpv.begin(), tmpv.end()

#define fi "c.inp"
#define fo "c.out"
#define nmax 2000005
#define key "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

using namespace std;

char s1[nmax], s2[nmax];
int d[60][60];
int trai[60], phai[60], fx[60], fy[60], q[60], trc[60];
bool dtrai[60], dphai[60];

int pos(char c){
    if (c >= 'a' && c <= 'z')   return c - 'a';
    return c - 'A' + 26;
}

void tangduong(int st, int j){
    int i, j2;
    do{
        i = trc[j];
        j2 = phai[i];
        trai[j] = i;
        phai[i] = j;
        j = j2;
    }while (i != st);
}

bool timduong(int st, int n){
    int i, dau, cuoi, x;
    
    fori(i, n)  dtrai[i] = dphai[i] = false;
    
    dau = -1, cuoi = 0;
    q[0] = st, dtrai[st] = true;
    while (dau < cuoi){
        x = q[++dau];
        
        fori(i, n)
            if (fx[x] + fy[i] == d[x][i] && !dphai[i]){
                dphai[i] = true;
                trc[i] = x;
                if (trai[i] == -1){
                    tangduong(st, i);
                    return true;
                }
                else{
                    q[++cuoi] = trai[i];
                    dtrai[trai[i]] = true;
                }
            }
    }
    return false;
}

void suanhan(int n){
    int i, j, xmin = maxty;
    
    fori(i, n)
        if (dtrai[i])
            fori(j, n)
                if (!dphai[j])
                    if (xmin > fx[i] + fy[j] - d[i][j])
                        xmin = fx[i] + fy[j] - d[i][j];
    
    fori(i, n)  if (dtrai[i])   fx[i] -= xmin;
    fori(i, n)  if (dphai[i])   fy[i] += xmin;
}


void hungarian(int n){
    int i, j, xmax, res;
    
    //reset
    fori(i, n){
        trai[i] = phai[i] = -1;
        fy[i] = 0;
    }
    //init
    fori(i, n){
        xmax = 0;
        fori(j, n)  if (d[i][j] > xmax) xmax = d[i][j];
        fx[i] = xmax;
    }
    //matching
    fori(i, n)
        while (!timduong(i, n))
            suanhan(n);
    
    res = 0;
    fori(i, n)  res += d[i][phai[i]];
    printf("%d\n", res);
    fori(i, n)  printf("%c", key[phai[i]]); printf("\n");
}

void input()
{
    int n, nk, i;
    
    scanf("%d %d", &n, &nk);
    scanf("%s %s", &s1, &s2);
    
    fori(i, n)
        d[pos(s1[i])][pos(s2[i])]++;
    
    hungarian(nk);
}

int main()
{
   // freopen(fi,"r",stdin);
   // freopen(fo,"w",stdout);

    input();

    return 0;
}
