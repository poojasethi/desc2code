#include <algorithm>
#include <cfloat>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
 
using namespace std;
 
#define sz size()
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define all(c) (c).begin(), (c).end()
#define rep(i,a,b) for(int i=(a);i<(b);++i)
#define clr(a, b) memset((a), (b) ,sizeof(a))
 
#define MOD 1000000007
#define INF 1000000000

int main(){
  string s1,s2;
  cin>>s1;
  cin>>s2;
  int k;
  rep(i,1,1000001){
    int a = s1.sz-i;
    int d = 0;
    for(int j = a; j > 0; j/=10){
      d++;
    }
    if(i==d)k=i;
  }
  int a = s1.sz-k;
  int d1[10];
  clr(d1,0);
  rep(i,0,s1.sz){
    d1[s1[i]-'0']++;
  }
  int d2[10];
  clr(d2,0);
  for(int j = a; j > 0; j/=10){
    d2[j%10]++;
  }
  int d3[10];
  clr(d3,0);
  rep(i,0,s2.sz){
    d3[s2[i]-'0']++;
  }
  int flag = 0;
  rep(i,0,s2.sz-1){
    if(s2[i]<s2[i+1]){
      flag = 1;
      break;
    }
    if(s2[i]>s2[i+1]){
      flag = -1;
      break;
    }    
  }
  rep(i,0,10){
    d1[i]-=d2[i];
  }
  rep(i,0,10){
    d1[i]-=d3[i];
  }
  d1[s2[0]-'0']++;
  string ans;
  rep(i,1,10){
    if(d1[i]!=0){
      ans+='0'+i;
      d1[i]--;
      break;
    }
  }
  rep(i,0,10){
    rep(j,0,d1[i]){
      ans+='0'+i;
    }
  }
  vector<int> v;
  rep(i,0,ans.sz){
    if(ans[i]==s2[0])v.pb(i);
  }
  vector<string> vs;
  string ss;
  rep(i,0,ans.sz){
    if(i==v[0]){
      ss+=s2;
    }
    else{
      ss+=ans[i];  
    }
  }
  vs.pb(ss);
  ss = "";
  if(v.sz>1){
    rep(i,0,ans.sz){
      if(i==v[1]){
        ss+=s2;
      }
      else{
        ss+=ans[i];  
      }
    }
    vs.pb(ss);
  }
  ss = "";
  if(v.sz>2){
    rep(i,0,ans.sz){
      if(i==v[v.sz-1]){
        ss+=s2;
      }
      else{
        ss+=ans[i];  
      }
    }
    vs.pb(ss);
  }
  sort(all(vs));
  cout << vs[0] << endl;
  return 0;
}
