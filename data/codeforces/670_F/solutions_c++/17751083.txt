#include <cmath>
#include <cstdio>
#include <cstring>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <vector>
#include <string>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;

#define MAXN 1000111

int main()
{
	ios::sync_with_stdio(false);

	static char s[MAXN], sx[MAXN];
	gets(s);
	gets(sx);

	int n = strlen(s);

	int nsx[999] = {0};
	for(int i=0; sx[i]; ++i)
		++nsx[sx[i]];

	static char sleft[MAXN];
	int k=0;
	for(int i=0; s[i]; ++i)
		if(0 < nsx[s[i]])
			--nsx[s[i]];
		else
			sleft[k++] = s[i];
	sleft[k] = 0;

	static char tmp[MAXN], ans[MAXN] = {0};
	
	for(int l=1; l<9; ++l)
	{
		int nl[999] = {0};
		int x = n-l;
		int y=0;
		while(x)
		{
			++nl['0' + x%10];
			x /= 10;
			++y;
		}
		if(y != l)
			continue;


		static char sleft2[MAXN];
		int kk=0;
		for(int i=0; sleft[i]; ++i)
			if(0 < nl[sleft[i]])
				--nl[sleft[i]];
			else
				sleft2[kk++] = sleft[i];
		sleft2[kk] = 0;
		sort(sleft2, sleft2+kk);

		if(sleft2[0] == 0)
		{
			strcpy(tmp, sx);
		}
		else
		{
			{
				strcpy(tmp, sx);
				strcat(tmp, sleft2);
				if(tmp[1] == 0 || tmp[0] != '0')
					if(ans[0] == 0 || strcmp(tmp,ans) < 0)
						strcpy(ans, tmp);
			}

			if(sleft2[0] == '0')
			{
				int l=0;
				for(; sleft2[l] == sleft2[0]; ++l)
				{}
				if(sleft2[l])
					swap(sleft2[0], sleft2[l]);
			}

			if(sleft2[0] == '0')
			{
				strcpy(tmp, sx);
				strcat(tmp, sleft2);
			}
			else
			{
				char *p2 = &sleft2[strlen(sleft2)];

				for(int i=1; i<=9; ++i)
				{
					char *pbeg = &sleft2[1];
					char *pend = p2;
					char *p = pend;
					if(pbeg < pend)
						p = lower_bound(pbeg, pend, '0'+i);
					*p2 = 0;
					memcpy(tmp, sleft2, p-sleft2); tmp[p-sleft2] = 0;
					strcat(tmp, sx);
					strcat(tmp, p);

					if(ans[0] == 0 || strcmp(tmp,ans) < 0)
						strcpy(ans, tmp);
				}
			}
		}
		if(ans[0] == 0 || strcmp(tmp,ans) < 0)
			strcpy(ans, tmp);
	}

	cout << ans << "\n";

	return 0;
}
