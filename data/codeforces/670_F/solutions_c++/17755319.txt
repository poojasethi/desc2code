#include <set>
#include <map>
#include <math.h>
#include <cmath>
#include <stack>
#include <deque>
#include <queue>
#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#define fi first
#define sec second
#define ld long double
#define ll long long
#define mp make_pair
#define pb push_back
#define pll pair<ll, ll>
#define pii pair<int, int>
using namespace std;

const int maxn = 1000005;

int cnt[15], as, ss;
char a[maxn], s[maxn];

int z(int x) {
	int ret = 0;
	for (; x > 0; x /= 10)
		ret++;
	return ret;
}

vector<int> bef, aft;

string get() {
	if (bef.empty() && s[0] == '0')
		return "z";
	bool zs = 0;
	string ret = "";
	for (int i=0; i<bef.size(); i++) {
		ret += (char)('0' + bef[i]);
		if (!zs) {	
			zs = 1;
			for (int j=0; j<cnt[0]; j++)
				ret += '0';		
		}	
	}
	for (int i=0; i<ss; i++)
		ret += s[i];
	if (!zs) 
		for (int j=0; j<cnt[0]; j++)
			ret += '0';
	for (int i=0; i<aft.size(); i++) {
		if (aft[i] == -1)
			continue;
		ret += (char)('0' + aft[i]);	
	}
	return ret;
}

string solve(int x) {
	int f = (s[0] - '0') + 1;
	f -= x;
	bef.clear();
	aft.clear();
	for (int i=max(f, 1); i<10; i++)
		for (int j=0; j<cnt[i]; j++)
			aft.push_back(i);
	for (int i=1; i<f; i++)
		for (int j=0; j<cnt[i]; j++)
			bef.push_back(i); 
	string sol1 = get();
	if (!aft.empty()) {
		bef.push_back(aft[0]);
		aft[0] = -1;
	}		
	string sol2 = get();
	return min(sol1, sol2);
}

int main (void) {
	scanf("%s", a);
	scanf("%s", s);
	as = strlen(a);
	ss = strlen(s);
	for (int i=0; i<as; i++)
		cnt[a[i] - '0']++;
	for (int i=1; i<min(7, as); i++)
		if (z(as - i) == i) {
			int curr = as - i;
			while (curr > 0) {
				cnt[curr % 10]--;
				curr /= 10;
			}		
			break;
		}
	if (as == 2 && cnt[0] == 1) {
		printf("0\n");
		return 0;	
	}
	for (int i=0; i<ss; i++)
		cnt[s[i] - '0']--;
	string sol1 = solve(1);
	string sol2 = solve(0);
	string sol = min(sol1, sol2);
	for (int i=0; i<sol.size(); i++)
		printf("%c", sol[i]);
	printf("\n");
	return 0;
}