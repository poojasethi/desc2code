#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <iostream>

using namespace std;

#define MAXCHAR	1000000

string findSolution1(const string& strKate, string& strRemember)
{
	int rlen, rdigits;
	int len = strKate.length();
	
	for (int i = 1, v = 10; i <= 6; i++, v *= 10)
	{
		if (len - i < v)
		{
			rlen = len - i;
			rdigits = i;
			break;
		}
	}

	
	int counts[10];
	for (int i = 0; i < 10; i++)
		counts[i] = 0;
	for (int i = 0; i < (int)strKate.length(); i++)
		counts[strKate[i] - '0']++;
		
	int appendedDigits = rlen;
	while (appendedDigits != 0)
	{
		int m = appendedDigits % 10;
		counts[m]--;
		appendedDigits /= 10;
	}
		

	for (int i = 0; i < (int)strRemember.length(); i++)
		counts[strRemember[i] - '0']--;


	int latter = 0;
	for (int i = 1; i < (int)strRemember.length(); i++)
	{
		if (strRemember[i] != strRemember[0])
		{
			latter = (strRemember[i] > strRemember[0]);
			break;
		}
	}

	string result1, result2;
	if (strRemember[0] != '0')
	{
		result1 = strRemember;
		for (int i = 0; i < 10; i++)
			result1.append(counts[i], '0' + i);
	}

	int h = -1;
	for (int i = 1; i < 10; i++)
	{
		if (counts[i] > 0)
		{
			result2 = '0' + i;
			counts[i]--;
			h = i;
			break;
		}
		
	}

	if (h >= 0)
	{
		int checkPoint = -1;
		for (int i = 0; i < 10; i++)
		{
			if (i >= strRemember[0] - '0' && checkPoint < 0)
				checkPoint = result2.length();

			result2.append(counts[i], '0' + i);
		}

		if (result2[checkPoint] <= strRemember[0] && latter)
			checkPoint += counts[strRemember[0] - '0'];

		result2.insert(checkPoint, strRemember);
	}
	
	if (result1.empty())
	{
		if (result2.empty())
			return "0";
		else
			return result2;
	}

	if (result2.empty()) return result1;

	if (result1 > result2)
		return result2;

	return result1;
}

int main(int argc, char **argv)
{
	string strKate;
	string strRemember;

	cin >> strKate >> strRemember;
	string result = findSolution1(strKate, strRemember);
//	printf("#%d[%s, %s] = %s\n", t, strKate.c_str(), strRemember.c_str(), result.c_str());
	cout << result << endl;

	return 0;
}
