#include <bits/stdc++.h>
using namespace std;

string S, T;
vector<int> counter(10);
int len = 0; int N;
const string INF(1e6 + 5, '9');

vector<int> ofInt(int x) {
	vector<int> ans(10);
	if (!x) { ++ans[0]; return ans; }
	while (x) { ++ans[x % 10]; x /= 10; }
	return ans;
}

bool canMake(vector<int> x, vector<int> y) {
	for (int i = 0; i < 10; ++i) if (x[i] < y[i]) return 0;
	return 1;
}

string make_with_leading_z() {
	string p = "";
	for (int i = 0; i < 10; ++i) p.append(counter[i], i + '0');
	return p;
}

string make_with_no_lead(int insert_after) {
	string p = "";
	int ch = 0;
	for (int i = 1; i < 10; ++i) if (counter[i]) {
		p.append(1, i + '0'); ch = i; --counter[i]; break;
	}
	if (!ch) return INF;
	if (insert_after == -1) p += T;
	for (int i = 0; i < 10; ++i) {
		p.append(counter[i], i + '0'); if (insert_after == i) p.append(T); 
		if (i == ch) ++ counter[i];
	}
	return p;
}

void do_zero() {
	for (int i = 1; i < 10; ++i) if (counter[i]) return;
	cout << "0" << endl; exit(0);
}

int total(vector<int> x) { return accumulate(x.begin(), x.end(), 0); }

int main() {
	ios_base::sync_with_stdio(false); cin.tie(0);
	cin >> S >> T; N = (int)S.length();
	for (int i = 0; i < (int)S.length(); ++i) ++counter[S[i] - '0'];
	for (int i = 1; i < min(N, 10); ++i) if (canMake(counter, ofInt(N - i)) && total(ofInt(N - i)) == i) {
		len = N - i; 
		vector<int> k = ofInt(N - i); 
		for (int i = 0; i < 10; ++i) counter[i] -= k[i]; break;
	}
	string ans = INF;
	do_zero();
	for (int i = 0; i < (int)T.length(); ++i) --counter[T[i] - '0'];
	if (T[0] != '0') {
		ans = T + make_with_leading_z();
	}
	for (int i = -1; i < 10; ++i) ans = min(ans, make_with_no_lead(i));
	cout << ans << endl;
}