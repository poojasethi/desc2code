#include <bits/stdc++.h>
#define FOR(i, l, r) for (int i = l; i < r; i++)
#define FST first
#define SCD second
#define MAXN 1000113
using namespace std;

typedef long long LL;
typedef unsigned int UI;

char str[MAXN], sub[MAXN];
int num[MAXN];
int N, M;
int cnt(int k)
{
    int res = 0;
    while (k) {
        res++;
        k /= 10;
    }
    return res;
}
int main()
{
    scanf("%s", str);
    scanf("%s", sub);
    N = strlen(str);
    FOR(i, 0, N) {
        num[str[i] - '0']++;
    }
    M = strlen(sub);
    FOR(i, 0, M) {
        num[sub[i] - '0']--;
    }
    int k = 1;
    while (cnt(N - k) != k) {
        k++;
    }
    k = N - k;
    while (k) {
        num[k % 10]--;
        k /= 10;
    }
    int h = -1;
    FOR(i, 1, 10) {
        if (num[i]) {
            h = i;
            num[i]--;
            break;
        }
    }
    if (h == -1) {
        printf("%s", sub);
        FOR(i, 0, num[0]) {
            printf("0");
        }
        printf("\n");
        return 0;
    }
    bool use = false;
    bool large = 0;
    FOR(i, 1, M) {
        if (sub[i - 1] != sub[i]) {
            if (sub[i - 1] < sub[i]) {
                large = true;
            }
            break;
        }
    }
    string s1 = "";
    s1 += char(h + '0');
    FOR(i, 0, num[0]) {
        s1 += '0';
    }
    if (!large) {
        s1 += sub;
        FOR(i, 0, num[h]) {
            s1 += char(h + '0');
        }
    }
    else {
        FOR(i, 0, num[h]) {
            s1 += char(h + '0');
        }
        s1 += sub;
    }
    string s2 = sub;
    FOR(i, 0, num[0]) {
        s2 += '0';
    }
    FOR(i, 0, num[h] + 1) {
        s2 += char(h + '0');
    }
    if (sub[0] != '0' && (s2 < s1)) {
        printf("%s", sub);
        use = true;
        num[h]++;
    }
    else {
        printf("%c", h + '0');
    }
    FOR(i, 0, 10) {
        if (!use && (sub[0] - '0' < i || sub[0] - '0' == i && !large)) {
            printf("%s", sub);
            use = true;
        }
        FOR(j, 0, num[i]) {
            printf("%c", i + '0');
        }
    }
    printf("\n");
    return 0;
}
