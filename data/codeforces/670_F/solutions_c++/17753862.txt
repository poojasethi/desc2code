#include <stdio.h>
#include <string.h>
#include <stdlib.h>



int tab[1000010];
int pow10[] = {0,10,100,1000,10000, 100000, 1000000};
int cmp(const void *a, const void *b)
{
	return *(char*)a - *(char*)b;
}


int init()
{
	int i;
	int cnt = 0;
	for (i = 0; i <= 1000000; i++)
	{
		if (i == pow10[cnt]) cnt++;
		tab[i+cnt] = i;
	}
}

char s[1000010], t[1000010];
char buff[1000010];
char b[1000010];
char ans[1000010];
int mp[15];
int n;


void gao()
{
	int i, j, cc;
	n = strlen(s);
	memset(mp, 0, sizeof(mp));
	for (i = 0; s[i]; i++)
		mp[s[i]-'0']++;
	sprintf (buff, "%d", tab[n]);
	for (i = 0; buff[i]; i++)
		mp[buff[i]-'0']--;
	for (i = 0; t[i]; i++)
		mp[t[i]-'0']--;
	
	cc = 0;	
	for (i = 1; i < 10; i++) if (mp[i] != 0)
		break;
	if (i < 10)
	{
		buff[cc++] = i + '0';
		mp[i]--;
	}
	for (i = 0; i < 10; i++)
		while (mp[i] != 0) buff[cc++] = i+'0', mp[i]--;
	buff[cc++] = '\0';
	
	strcpy(ans, t);
	strcat(ans, buff);
	if (buff[0] == '0' || buff[0] == '\0') return;
	
	for (i = 1; buff[i]; i++) if (i == 1 || buff[i] != buff[i-1])
	{
		strncpy(b,buff,i);
		b[i] = '\0';
		strcat(b, t);
		strcat(b, buff+i);
		if (b[0] == '0') continue; 
		if (ans[0] == '0') strcpy(ans, b);
		if (strcmp(b,ans) < 0) strcpy(ans, b);
	}
	strcpy(b, buff);
	strcat(b, t);
	if (b[0] != '0' && (ans[0] == '0' || strcmp(b, ans) < 0))
		strcpy(ans, b);
	strcpy(b, t);
	qsort(buff, strlen(buff), sizeof(buff[0]), cmp);
	strcat(b, buff);
	if (b[0] != '0' && (ans[0] == '0' || strcmp(b, ans) < 0))
		strcpy(ans, b);
	return; 
}


int main()
{
	init();
	while (~scanf ("%s %s", s, t))
	{
		gao();
		printf ("%s\n", ans);
	}
	return 0;
}