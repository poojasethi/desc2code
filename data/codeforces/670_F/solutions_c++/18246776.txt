#include <iostream>
#include <string>

using namespace std;


string str, substr;
string c[3];
bool v[3] = {};
int strSize, numSize;
int digitCounter[10] = {};

int roundupLog2( int n )
{
	for( int i = 31; i >= 0; i-- )
		if( 1 << i & n ) return i+1;
		
}

bool checkSize( int x, int s )
{
	int ss = 0;
	while( x )
	{
		x/=10;
		ss++;
	}
	return ss == s;
}

int whatIsSize( int n )
{
	for( int i = 0; i < 8; i++)
	{
		if( checkSize(n-i, i) )
			return n-i;
	}
}


int main() 
{
	cin >> str;
	cin >> substr;
	
	strSize = str.length();
	numSize = whatIsSize(strSize);
//	cout << numSize << endl;
	
	for( int i = 0; i < str.length(); i++ )
	{
		digitCounter[str[i]-'0']++;
	}
	
	for( int i = 0; i < substr.length(); i++ )
	{
		digitCounter[substr[i]-'0']--;
	}
	
	int t = numSize;
	while( t )
	{
		digitCounter[t%10]--;
		t /= 10;
	}
	
	
//	for( int i = 0; i < 10; i++ )
//		cout << digitCounter[i] << endl;
	
	int startCandidate = 0;
	
	for( int i = 1; i < 10; i++ )
		if(digitCounter[i])
		{
			startCandidate = i;
			break;
		}
	
	if( substr[0] != '0') 
	{
		v[0] = true;
		c[0] += substr;
		for( int i = 0; i < 10; i++ )
			for( int j = 0; j < digitCounter[i]; j++ )
				c[0] += char(i+'0');
	}
//	cout << v[0] << " " << c[0] << endl;
	
	if ( startCandidate )
	{
		v[1] = true;
		v[2] = true;
		c[1] += char( startCandidate+'0');
		c[2] += char( startCandidate+'0');
		digitCounter[startCandidate]--;
		for( int i = 0; i < 10; i++ )
		{
			if(substr[0]-'0'==i)
				c[1] += substr;
			for( int j = 0; j < digitCounter[i]; j++ )
			{
				c[1] += char(i+'0');
				c[2] += char(i+'0');
			}
			if(substr[0]-'0'==i)
				c[2] += substr;
		}
		
	}
//	cout << v[1] << " " << c[1] << endl;
//	cout << v[2] << " " << c[2] << endl;
	
	int startPos = 0;
	for( startPos = 0; startPos < 3 && !v[startPos] ; startPos++);
//	cout << startPos << endl;
	int bestPos = startPos;
	for( int i = startPos+1; i < 3; i++ )
	{
		if( v[i] && c[i].compare(c[bestPos]) < 0 )
			bestPos = i;
			
	}
//	cout << bestPos << endl;
	
//	cout << c[bestPos] << numSize << endl;
	cout << c[bestPos] << endl;
	return 0;

}