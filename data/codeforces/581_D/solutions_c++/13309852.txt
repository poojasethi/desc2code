#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>

using namespace std;

struct Rectangle {
	int x, y;
	char ltr;
};

inline bool operator < (const Rectangle & a, const Rectangle & b) {
	return a.y > b.y;
}

const int MAXN = 200;
Rectangle p [3];
int area, n, i, j;
char mat [MAXN] [MAXN + 1];

inline void fill (const int & x, const int & y, const Rectangle & r) {
	int i;
	for (i = 0; i < r.x; i ++)
		memset (mat [x + i] + y, r.ltr, r.y * sizeof (char));
	return;
}

int main () {
	area = 0;
	for (i = 0; i < 3; i ++) {
		scanf ("%d%d", & p [i].x, & p [i].y);
		if (p [i].x > p [i].y)
			swap (p [i].x, p [i].y);
		p [i].ltr = 'A' + i;
		area += p [i].x * p [i].y;
	}
	n = sqrt (area);
	if (n * n != area) {
		printf ("-1\n");
		return 0;
	}
	sort (p, p + 3);
	for (i = 0; i < n; i ++) {
		memset (mat [i], '.', n * sizeof (char));
		mat [i] [n] = '\0';
	}
	fill (0, 0, p [0]);
	if (p [1].y == n) {
		fill (p [0].x, 0, p [1]);
		fill (p [0].x + p [1].x, 0, p [2]);
	}
	else {
		if (p [1].y == n - p [0].x)
			swap (p [1].x, p [1].y);
		if (p [2].y == n - p [0].x)
			swap (p [2].x, p [2].y);
		fill (p [0].x, 0, p [1]);
		fill (p [0].x, p [1].y, p [2]);
	}
	for (i = 0; i < n; i ++)
		for (j = 0; j < n; j ++)
			if (mat [i] [j] == '.') {
				printf ("-1\n");
				return 0;
			}
	printf ("%d\n", n);
	for (i = 0; i < n; i ++)
		printf ("%s\n", mat [i]);
	return 0;
}
