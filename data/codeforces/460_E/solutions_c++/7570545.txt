#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;
struct node {
  int x,y,r;
}point[300];
int n,r,totl;
int hx1[8],hx2[8];
int nows;
bool cmp(node a,node b){
  return a.r>b.r;
}
int gets(int now,int k){
  //cout<<now<<" "<<totl<<endl;
  if (k==n){
    int kkk=0;
    for (int i=0;i<n;i++){
      int x=point[hx1[i]].x;
      int y=point[hx1[i]].y;
      for (int j=i+1;j<n;j++){
        int x0=point[hx1[j]].x;
        int y0=point[hx1[j]].y;
        kkk+=(x-x0)*(x-x0)+(y-y0)*(y-y0);
      }
    }
    //cout<<kkk<<endl;
    if (kkk>nows){
        nows=kkk;
        for (int i=0;i<k;i++)
            hx2[i]=hx1[i];
    }
  }
  else {
    for (int i=now;i<totl;i++){
        hx1[k]=i;
        gets(i,k+1);
    }
  }
}
int main (){
  while (~scanf("%d%d",&n,&r)){
    totl=0;
    for (int i=-r;i<=r;i++)
    for (int j=-r;j<=r;j++){
        int s=j*j+i*i;
        if (s>=(r-1)*(r-1)&&s<=r*r){
            point[totl].x=i;
            point[totl].y=j;
            point[totl++].r=s;
        }
    }
    //cout<<totl<<endl;
    sort(point,point+totl,cmp);
    totl=30-2*n;
    //cout<<totl<<endl;
    nows=0;
    gets(0,0);
    printf("%d\n",nows);
    for (int i=0;i<n;i++){
        printf("%d %d\n",point[hx2[i]].x,point[hx2[i]].y);
    }
  }
  return 0;
}
