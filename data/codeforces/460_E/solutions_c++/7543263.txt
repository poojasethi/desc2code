#include <cstdio>
#include <cstdlib>
#include <cmath>

using namespace std;

int n,r,tt,x[150],y[150],stack[150],a[10],ans,sx,sy,sx2,sy2,l[10],top;
int xj(int a1,int a2,int a3)
{
	int x1 = x[a2] - x[a1],y1 = y[a2] - y[a1],x2 = x[a3] - x[a2],y2 = y[a3] - y[a2];
	return (x1*y2-x2*y1);
}
void dfs(int now,int have)
{
	if (have == n)
	{
		if (n*(sx2+sy2)-(sx*sx+sy*sy)>ans)
		{
			ans = n*(sx2+sy2)-(sx*sx+sy*sy);
			for (int i = 1;i <= n;i++) a[i] = stack[l[i]];
		}
	} else
	for (int i = now;i <= top;i++)
	{
		l[have+1] = i;
		sx+=x[stack[i]];
		sy+=y[stack[i]];
		sx2+=x[stack[i]]*x[stack[i]];
		sy2+=y[stack[i]]*y[stack[i]];
		dfs(i,have+1);
		sx-=x[stack[i]];
		sy-=y[stack[i]];
		sx2-=x[stack[i]]*x[stack[i]];
		sy2-=y[stack[i]]*y[stack[i]];
	}
}

int main()
{
	scanf("%d%d",&n,&r);
	tt = 0;
	for (int i = -r;i <= r;i++)
	{
		int lmt = (int)(sqrt(r*r-i*i));
		if (lmt*lmt+i*i>r*r) lmt--;
		x[++tt] = i; y[tt] =-lmt;
		x[++tt] = i; y[tt] = lmt;
	}
	stack[top = 1] = 1;
	for (int i = 2;i <= tt;i++)
	{
		while (top > 1)
		if (xj(stack[top-1],stack[top],i)>=0) top--; else break;
		stack[++top] = i;
	}
	for (int i = tt - 1;i >= 1;i--)
	{
		while (stack[top]!=tt)
		if (xj(stack[top-1],stack[top],i)>=0) top--; else break;
		stack[++top] = i;
	}
	top--;
	sx = 0; sy = 0;
	sx2 = 0; sy2 = 0;
	ans = 0;
	dfs(1,0);
	printf("%d\n",ans);
	for (int i = 1;i <= n;i++) printf("%d %d\n",x[a[i]],y[a[i]]);
	return 0;
}
