#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <algorithm>

#define MAXN 110000

using namespace std;

int n,r,m;

struct Point
{
    int x,y,dist;
}points[MAXN],stack[MAXN],sol[MAXN];

bool cmp(Point a,Point b)
{
    return a.dist>b.dist;
}

int tot=0,top=0,soltop=0;
int maxans=0;

int dist(int ax,int ay,int bx,int by)
{
    return (ax-bx)*(ax-bx)+(ay-by)*(ay-by);
}

void DFS(int id,int num,int nowans)
{
    if(num>n)
    {
        if(nowans>maxans)
        {
            maxans=nowans;
            soltop=top;
            for(int i=1;i<=top;i++)
                sol[i]=stack[i];
        }
        return;
    }
    if(id>m) return;
    int tmptop=top;
    stack[++top]=points[id];
    int tmp=0;
    for(int i=1;i<top;i++) tmp+=dist(stack[top].x,stack[top].y,stack[i].x,stack[i].y);
    DFS(id,num+1,nowans+tmp);
    top=tmptop;
    for(int t=id+1;t<=m;t++)
    {
        stack[++top]=points[t];
        tmp=0;
        for(int i=1;i<top;i++) tmp+=dist(stack[top].x,stack[top].y,stack[i].x,stack[i].y);
        DFS(t,num+1,nowans+tmp);
        top=tmptop;
    }
}

int main()
{
    scanf("%d%d",&n,&r);
    for(int i=-r;i<=r;i++)
        for(int j=-r;j<=r;j++)
        {
            if(dist(i,j,0,0)<=r*r)
            {
                Point tmp;
                tmp.dist=dist(i,j,0,0);
                tmp.x=i,tmp.y=j;
                points[++tot]=tmp;
            }
        }
    sort(points+1,points+tot+1,cmp);
    m=min(tot,18);
    DFS(1,1,0);
    printf("%d\n",maxans);
    for(int i=1;i<=soltop;i++) printf("%d %d\n",sol[i].x,sol[i].y);
    return 0;
}