#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
using namespace std;
typedef pair<int,int> ii;
const int MAX = 901;
#define sqr(a) ((a)*(a))
int n, r;
int s;

vector<ii> p;
vector<int> candidate;
int res = 0;
vector<int> ret;
int getDist(int x1, int x2, int y1, int y2){
    return sqr(x1 - x2) + sqr(y1 - y2);
}
void backtrack(int start, int len, int dist){
    if (len >= n){
        if (res < dist){
            res = dist;
            ret = candidate;
        }
        return;
    }
    for(int i = start; i < s; ++i){
        int t = dist;
        for(int j = 0; j < (int) candidate.size(); ++j) t += getDist(p[i].first, p[candidate[j]].first, p[i].second, p[candidate[j]].second);
        candidate.push_back(i);
        backtrack(i, len + 1, t);
        candidate.pop_back();
    }
}

bool cmp(ii A, ii B){
    return sqr(A.first) + sqr(A.second) > sqr(B.first) + sqr(B.second);
}

int main(int argc, char *argv[]){
    ios::sync_with_stdio(0);
    cin >> n >> r;
    for(int i = 0; i <= r; ++i){
        for(int j = 0; j <= r; ++j){
            if (sqr(i) + sqr(j) <= sqr(r)){
                p.push_back(ii(i, j));
                if (i) p.push_back(ii(-i, j));
                if (j) p.push_back(ii(i, -j));
                if (i && j) p.push_back(ii(-i, -j));
            }
        }
    }
    sort(p.begin(), p.end(), cmp);
    s = min((int)p.size(), 20);
    backtrack(0, 0, 0);
    cout << res << "\n";
    for(int i = 0; i < n; ++i) cout << p[ret[i]].first << " " << p[ret[i]].second << "\n";
}
