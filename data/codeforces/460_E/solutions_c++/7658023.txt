#include <algorithm>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <vector>

using namespace std;

const int N = 10010;

struct Point{
	int x, y;
	Point(int x = 0, int y = 0):x(x), y(y) {}
}P[N];

#define sp(x) ((x) * (x))

bool operator < (const Point &A, const Point &B) {
	return sp(A.x) + sp(A.y) > sp(B.x) + sp(B.y);
}


int maxx = 0;
int cur = 0;
int n, r, cnt = 0;

vector<Point> ans;
vector<Point> best;

void Case(int px, int sx, int py, int sy, int iteration, int last)
{
	if (iteration < n)
	{
		for(int i = last; i<cnt; ++i)
		{
			int curx = iteration*P[i].x*P[i].x - 2*px*P[i].x + sx;
			int cury = iteration*P[i].y*P[i].y - 2*py*P[i].y + sy;

			cur += curx;
			cur += cury;

			int dpx = P[i].x;
			int dpy = P[i].y;

			int dsx = P[i].x*P[i].x;
			int dsy = P[i].y*P[i].y;

			ans.push_back(P[i]);

			Case(px + dpx, sx + dsx, py + dpy, sy + dsy, iteration + 1, i);

			cur -= curx;
			cur -= cury;

			ans.pop_back();
		}
	}
	else
	{
		if (maxx < cur)
		{
			maxx = cur;
			best = ans;
		}
	}
}

int main(){
	scanf("%d%d", &n, &r);
	for(int x = -r; x <= r; x++)
		for(int y = -r; y <= r; y++)
			if(sp(x) + sp(y) <= sp(r)) P[cnt++] = Point(x, y);
	sort(P, P + cnt);
	cnt = min(cnt, 36);
	Case(0, 0, 0, 0, 0, 0);
	cout << maxx << endl;
	for(int i = 0; i < best.size(); i++)
		cout << best[i].x << " " << best[i].y << endl;
	return 0;
}
