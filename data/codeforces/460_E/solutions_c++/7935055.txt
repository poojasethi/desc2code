#include<algorithm>
#include<climits>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<string>
#define x first
#define y second
using namespace std;
typedef pair<int, int> point;
int n, r, m, i, j, ans, a[11], b[11];
point p[10001];
inline int d(int x, int y)
{
	return x * x + y * y;
}
inline bool cmp(point a, point b)
{
	return d(a.x, a.y) > d(b.x, b.y);
}
void DFS(int x, int y, int z)
{
	if (y == n)
	{
		if (z > ans)
		{
			ans = z;
			memcpy(a, b, sizeof(a));
		}
		return;
	}
	int i, j, t;
	for (i = x; i <= m; i++)
	{
		for (j = 1, t = 0; j <= y; j++)
			t += d(p[b[j]].x - p[i].x, p[b[j]].y - p[i].y);
		b[y + 1] = i;
		DFS(i, y + 1, z + t);
	}
}
int main()
{
	//freopen("rar.in", "r", stdin);
	//freopen("rar.out", "w", stdout);
	scanf("%d%d", &n, &r);
	for (i = -r; i <= r; i++)
		for (j = -r; j <= r; j++)
			if (d(i, j) <= r * r)
				p[++m] = make_pair(i, j);
	sort(p + 1, p + m + 1, cmp);
	m = min(m, 18);
	DFS(1, 0, 0);
	printf("%d\n", ans);
	for (i = 1; i <= n; i++)
		printf("%d %d\n", p[a[i]].x, p[a[i]].y);
	//fclose(stdin);
	//fclose(stdout);
	return 0;
}
