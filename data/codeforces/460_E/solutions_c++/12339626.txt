#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstring>
#include <algorithm>
#define mp make_pair

using namespace std;

const int lim = 18;

int sqr(int x) { return x * x; }

struct node
{
    int x, y;
    node() {}
    node(int x, int y) : x(x), y(y) {}
    friend bool operator < (node p1, node p2)
    {
        return sqr(p1.x) + sqr(p1.y) > sqr(p2.x) + sqr(p2.y);
    }
};

node b[100001], stack[100001], v[100001];
int ans = 0, n, r, size = 0;

void Upd()
{
    for (int i = 1; i <= n; i ++) b[i] = stack[i];
}

void dfs(int x, int now, int cnt)
{
    if (x > lim) return ; 
    if (now == n)
    {
        if (cnt > ans) ans = cnt, Upd();
        return ;
    }
    int top = now, sum = cnt;
    for (int i = now; i <= n; i ++)
    {
        dfs(x + 1, i, sum);
        stack[++ top] = v[x];
        for (int j = 1; j < top; j ++)
            sum += sqr(stack[j].x - stack[top].x) + sqr(stack[j].y - stack[top].y);
    }
}
int main( )
{
    scanf("%d %d", &n, &r);
    for (int i = -r; i <= r; i ++)
        for (int j = -r; j <= r; j ++)
            if (i * i + j * j <= r * r) ++ size, v[size] = node(i, j);
    sort(v + 1, v + 1 + size);
    dfs(1, 0, 0);
    printf("%d\n", ans);
    for (int i = 1; i <= n; i ++)
        printf("%d %d\n", b[i].x, b[i].y);
    return 0;
}