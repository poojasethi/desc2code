#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;
typedef pair<int,int> P;
int n, r, lim;
P point[9], out[9];
vector<P> p;
int best;
bool cmp(P A, P B) {
    return pow(A.first, 2) + pow(A.second, 2) > pow(B.first, 2) + pow(B.second, 2);
}
int dist(P A, P B) {
    return pow(A.first - B.first, 2) + pow(A.second - B.second, 2);
}
void DFS(int i, int nn, int total) {
    if(i>=lim)return;
    if(nn==n){
        if(best<total){
            best = total;
            for(int j = 0; j < n; j++)
                out[j] = point[j];
        }
    }else{
        DFS(i+1,nn,total);
        point[nn]=p[i];
        int now = 0;
        for(int j = 0; j < nn; j++)
            now += dist(p[i], point[j]);
        DFS(i, nn + 1, total + now);
    }
}
int main()
{
    cin>>n>>r;
    for(int i=-r;i<=r;i++)
        for(int j=-r;j<=r;j++)
            if(pow(i,2) + pow(j,2) <= r * r)
                p.push_back(P(i, j));
    sort(p.begin(),p.end(),cmp);
    lim=min(16,(int)p.size());
    DFS(0, 0, 0);
    cout<<best<<endl;
    for(int i=0;i<n;i++)
        cout<<out[i].first<<" "<<out[i].second<<endl;
    return 0;
}
