#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>
#include <set>
#include <cmath>

using namespace std ;

vector<pair<int,int> > arr ;
int d[8] ;
int best = 0 ;
int ans[8] ;
int n, r ;

int getp()
{
	int out = 0 ;
	for(int i=0;i<n;i++)
		for(int j=i+1;j<n;j++)
		{
			out += (arr[d[i]].first-arr[d[j]].first)*(arr[d[i]].first-arr[d[j]].first) ;
			out += (arr[d[i]].second-arr[d[j]].second)*(arr[d[i]].second-arr[d[j]].second) ;
		}
	return out ;
}

int main(void)
{
	scanf("%d%d",&n,&r) ;
	
	for(int x=-r;x<=r;x++)
		for(int y=-r;y<=r;y++)
			if(x*x+y*y<=r*r)
				arr.push_back(make_pair(x,y)) ;
	
	srand(514) ;
	
	for(int k=0;k<514;k++)
	{
		for(int i=0;i<n;i++)
			d[i] = rand()%arr.size() ;
		int curp = getp() ;
		bool isGood = true ;
		while(isGood)
		{
			isGood = false ;
			for(int i=0;i<n;i++)
			{
				int tar = d[i] ;
				for(int j=0;j<(int)arr.size();j++)
				{
					d[i] = j ;
					int newp = getp() ;
					if(newp>curp)
					{
						tar = j ;
						curp = newp ;
						isGood = true ;
					}
				}
				d[i] = tar ;
			}
		}
		if(curp>best)
		{
			best = curp ;
			for(int i=0;i<n;i++)
				ans[i] = d[i] ;
		}
	}
	
	printf("%d\n",best) ;
	for(int i=0;i<n;i++)
		printf("%d %d\n", arr[ans[i]].first, arr[ans[i]].second) ;
	
	return 0 ;
}
