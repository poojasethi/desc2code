
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <map>
#pragma comment(linker, "/STACK:102400000,102400000")
using namespace std;

#define LL long long
#define N (500 + 10)
#define M (1<<16 + 10)
#define inf (1100000000)
#define lson ll, md, ls
#define rson md + 1, rr, rs
#define mod (1000000007)

const int P = 1<<4;
const int Q = 1<<P;
char s[N];
int son[N][2];
int kind[N];
int cnt;
int nxt[N], que[N], tot;
int ires[N], imark[N];
int n;
int dp[200][1<<16];
int lf[Q], rf[Q], tor[Q], tand[Q];
int change (int l, int r) {
	int u = cnt++;
	if(l == r) {
		kind[u] = s[l];
		return u;
	}
	int i = nxt[l] + 1;
	kind[u] = s[i];
	son[u][0] = change(l+1, i-2);
	son[u][1] = change(i+2, r-1);
	return u;
}

void add(int &u, int v){ 
	u += v;
	if(u >= mod) u -= mod;
}

int getmark(int t) {
	int ans = 0;
	for(int i = 0; i < P; ++i) {
		if((1<<t) & i)
			ans += 1 << i;
	}
	return ans;
}

void getsum(int f[Q], int dp[Q], int k) {
	for(int i = 0; i < Q; ++i) 
		f[i] = dp[i];
	for(int i = 0; i < P; ++i) {
		for(int j = 0; j < Q; ++j) {
			if(!(j&(1<<i))) {
				if(k == 1) add(f[j^(1<<i)], f[j]);
				else add(f[j^(1<<i)], mod-f[j]);
			}
		}
	}
}

void gao(int ll[Q], int rr[Q], int dp[Q]) {
	getsum(lf, ll, 1);
	getsum(rf, rr, 1);
	
	for(int i = 0; i < Q; ++i) {
		lf[i] = (LL)lf[i] * rf[i] % mod;
	}
	getsum(dp, lf, -1);
}
void dfs(int u) {
	if(son[u][0] == -1 && son[u][1] == -1) {
		if(kind[u] == '?') {
			for(int i = 0; i < 4; ++i) {
				int mark = getmark(i);
				dp[u][mark] = 1;
				dp[u][(Q-1)^mark] = 1;
			}
		}
		else {
			int mark;
			if('A' <= kind[u] && kind[u] <= 'D') 
				mark = getmark(kind[u]-'A');
			else mark = (Q-1) ^ getmark(kind[u]-'a');
			dp[u][mark] = 1;
		}
		return ;
	}		
	int ls = son[u][0], rs = son[u][1];
	dfs(ls);
	dfs(rs);

	gao(dp[ls], dp[rs], tor);
	reverse(dp[ls], dp[ls] + Q);
	reverse(dp[rs], dp[rs] + Q);
	gao(dp[ls], dp[rs], tand);
	reverse(tand, tand + Q);
	reverse(dp[ls], dp[ls] + Q);
	reverse(dp[rs], dp[rs] + Q);
	if(kind[u] == '?' || kind[u] == '|') 
		for(int i = 0; i < Q; ++i)
			dp[u][i] = tor[i];
	if(kind[u] == '?' || kind[u] == '&')
		for(int i = 0; i < Q; ++i)
			add(dp[u][i], tand[i]);
}

int main() {
	//freopen("in.txt", "r",stdin);
	scanf("%s", s);
	int len = strlen(s);
	memset(son, -1, sizeof son);
	tot = cnt = 0;
	for(int i = len-1; i >= 0; --i) {
		if(s[i] == ')') que[tot++] = i;
		else if(s[i] == '('){
			nxt[i] = que[--tot];
		}
	}
	scanf("%d", &n);

	for(int i = 0; i < n; ++i) {
		int x;
		for(int j = 0; j < 4; ++j) {
			scanf("%d", &x);
			imark[i] += x << j;
		}
		scanf("%d", &ires[i]);
	}
	change(0, len-1);
	dfs(0);
	int ans = 0;
	for(int i = 0; i < Q; ++i) {
		bool e = 1;
		for(int j = 0; j < n; ++j) {
			if(((i>>imark[j]) & 1) != ires[j])
				e = 0;
		}
		if(e) 
			add(ans, dp[0][i]);
	}
	printf("%d\n", ans);
}