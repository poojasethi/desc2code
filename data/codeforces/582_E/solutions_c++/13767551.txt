#include <iostream>
#include <string>
#include <vector>

using namespace std;

typedef long long int ll;

int modulo=1e9+7;

void anyade(int &a,int b)
{
  a=(a+b)%modulo;
}

void maneras2acumbot(int maneras[1<<16],int acum[1<<16])
{
  for (int c=0;c<1<<16;c++)
    acum[c]=maneras[c];
  for (int b=0;b<16;b++)
    for (int c=0;c<1<<16;c++)
      if ((c&(1<<b))==0)
	anyade(acum[c^(1<<b)],acum[c]);
}

void acumbot2maneras(int maneras[1<<16],int acum[1<<16])
{
  for (int c=0;c<1<<16;c++)
    maneras[c]=acum[c];
  for (int b=15;b>=0;b--)
    for (int c=(1<<16)-1;c>=0;c--)
      if ((c&(1<<b))==0)
	anyade(maneras[c^(1<<b)],-maneras[c]);
}

void maneras2acumtop(int maneras[1<<16],int acum[1<<16])
{
  for (int c=0;c<1<<16;c++)
    acum[c]=maneras[c];
  for (int b=15;b>=0;b--)
    for (int c=(1<<16)-1;c>=0;c--)
      if ((c&(1<<b))!=0)
	anyade(acum[c^(1<<b)],acum[c]);
}

void acumtop2maneras(int maneras[1<<16],int acum[1<<16])
{
  for (int c=0;c<1<<16;c++)
    maneras[c]=acum[c];
  for (int b=0;b<16;b++)
    for (int c=0;c<1<<16;c++)
      if ((c&(1<<b))!=0)
	anyade(maneras[c^(1<<b)],-maneras[c]);
}


int tope=1;
int r[300];
int h0[300];
int h1[300];
int maneras[300][1<<16];
int acum[300][1<<16];
int manerasaux[1<<16];

void parsing(int &is,string &s)
{
  int pos=tope++;
  if (s[is]=='(') {
    is++;
    h0[pos]=tope;
    parsing(is,s);
    is++;
    r[pos]=5+(s[is]!='?')+(s[is]=='|');
    is++;
    is++;
    h1[pos]=tope;
    parsing(is,s);
    is++;
    return;
  }
  if (s[is]>='A' and s[is]<='D') r[pos]=s[is]-'A'+1;
  else if (s[is]>='a' and s[is]<='d') r[pos]='a'-s[is]-1;
  is++;
}

int fbase(int b)
{
  int val=1;
  if (b<0) {
    b=-b;
    val=0;
  }
  b--;
  int f=0;
  for (int d=0;d<16;d++)
    f|=((d&(1<<b))==(val<<b))<<d;
  //cout<<"fbase "<<b<<" "<<f<<endl;
  return f;
}

void calcula(int pos)
{
  //cout<<"calcula "<<pos<<endl;
  if (r[pos]<=4) {
    if (r[pos]) {
      maneras[pos][fbase(r[pos])]=1;
    } else {
      for (int b=1;b<=4;b++) {
	maneras[pos][fbase(b)]=1;
	maneras[pos][fbase(-b)]=1;
      }
    }
    return;
  }
  calcula(h0[pos]);
  calcula(h1[pos]);
  //cout<<"combina "<<r[pos]<<endl;
  if (r[pos]==6) {
    maneras2acumtop(maneras[h0[pos]],acum[h0[pos]]);
    maneras2acumtop(maneras[h1[pos]],acum[h1[pos]]);
    for (int c=0;c<1<<16;c++)
      acum[pos][c]=ll(acum[h0[pos]][c])*acum[h1[pos]][c]%modulo;
    acumtop2maneras(maneras[pos],acum[pos]);    
  } else if (r[pos]==7) {
    maneras2acumbot(maneras[h0[pos]],acum[h0[pos]]);
    maneras2acumbot(maneras[h1[pos]],acum[h1[pos]]);
    for (int c=0;c<1<<16;c++)
      acum[pos][c]=ll(acum[h0[pos]][c])*acum[h1[pos]][c]%modulo;
    acumbot2maneras(maneras[pos],acum[pos]);
  } else {
    maneras2acumtop(maneras[h0[pos]],acum[h0[pos]]);
    maneras2acumtop(maneras[h1[pos]],acum[h1[pos]]);
    for (int c=0;c<1<<16;c++)
      acum[pos][c]=ll(acum[h0[pos]][c])*acum[h1[pos]][c]%modulo;
    acumtop2maneras(manerasaux,acum[pos]);    

    maneras2acumbot(maneras[h0[pos]],acum[h0[pos]]);
    maneras2acumbot(maneras[h1[pos]],acum[h1[pos]]);
    for (int c=0;c<1<<16;c++)
      acum[pos][c]=ll(acum[h0[pos]][c])*acum[h1[pos]][c]%modulo;
    acumbot2maneras(maneras[pos],acum[pos]);
    for (int c=0;c<1<<16;c++)
      anyade(maneras[pos][c],manerasaux[c]);
  }
}

int n;
vector<pair<int,int> > v;

bool compatible(int c)
{
  for (int i=0;i<n;i++)
    if ((c&(1<<v[i].first))!=(v[i].second<<v[i].first))
      return false;
  return true;
}

int main()
{
  string s;
  cin>>s;
  int is=0;
  parsing(is,s);
  cin>>n;
  for (int i=0;i<n;i++) {
    int m=0;
    for (int b=0;b<4;b++) {
      int x;
      cin>>x;
      m|=x<<b;
    }
    int val;
    cin>>val;
    v.push_back(pair<int,int> (m,val));
  }
  calcula(1);
  int sol=0;
  for (int c=0;c<1<<16;c++)
    if (compatible(c))
      anyade(sol,maneras[1][c]);
  cout<<((sol%modulo)+modulo)%modulo<<endl;
}
