#include <cstdio>
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <cstring>
#define ll long long
#define ld long double
#define pb push_back
#define rep(i,n) for( int i = 0; i < n; ++i )
#define REP(i,n) for ( int i = 1; i <= n; ++i )
#define fo(i,j,k) for ( int i = j; i <= k; ++i )
#define sqr(x) ((x)*(x))
#define Abs(x) ((x)>0?(x):-(x))
#define eps 1e-8
#define Maxn 202014
#define Maxm
 
 
using namespace std;

int N, op, ed;
ll S, ans;
 
struct Node {
    ll v, c, x, y;
    ll ask (ll S){
        return  (S + v - 1 - c)/v; 
    }
    inline bool operator==( Node &y ){
        return  c<=y.c&&v>=y.v;
    }
}s[Maxn];

inline bool cmp(Node x, Node y){
    return (x.c<y.c)||(x.c==y.c&&x.v>y.v);
}

inline ll ask(Node x, Node y){
    return (x.c-y.c)/(y.v-x.v);
}

inline ll y(ll x, Node p){
    return p.v*x + p.c; 
}

int main(){
    cin>>N>>S;
    rep(i,N) scanf( "%I64d%I64d", &s[i].v, &s[i].c);
    sort(s,s+N,cmp);
    N = unique(s,s+N) - s;
    ans = s[0].ask(S);
    REP(i,N-1){
        while ( op<ed&& s[op+1].y<=s[i].c ) ++op;
        ll x0 = s[op].ask(s[i].c);
        s[i].c = x0*s[op].v + s[op].c - s[i].c - x0*s[i].v;
        while ( ed>=op&& (x0 = ask(s[ed],s[i])) < s[ed].x ) --ed;
        s[i].x = (op<=ed)?x0+1:0; s[i].y = (op<=ed)?y(x0,s[ed])+1:0;
        ans = min( ans, s[i].ask(S) );
        s[++ed] = s[i]; 
    }
    cout<<ans<<endl;
    return 0;
}