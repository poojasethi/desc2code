#include <bits/stdc++.h>

#define fi first
#define se second
#define mm ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)
#define inf 1000000009ll
#define kare(a) ((a)*(a))
#define max3(a,b,c) max((a),max((b),(c)))
#define bit(k) (1ll<<(k))
#define fbit(k,i) ((k) & (bit(i)))
#define count(a) __builtin_popcount(a)
#define pq priority_queue
#define all(v) v.begin(),v.end()
#define type(x) __typeof(x.begin())
#define foreach(v,it) for(type(v) it=v.begin(); it!=v.end();it++)

using namespace std;

typedef double db;
typedef long long lint;
typedef pair <lint,lint> ii;
typedef pair <ii,lint> iii;
typedef vector <lint> vi;
typedef vector <ii> vii;

const lint maxn=2e5+20;

lint N,S,at,P[maxn],G[maxn],mx,upto=inf*inf;
ii st[maxn];
vii v;

db kes(ii a,ii b){
	return (db)(b.se-a.se)/(a.fi-b.fi);
}

void add(lint m,lint n){
	//~ printf("add %lld %lld\n",m,n);
	while(at>=2 && kes(st[at-1],st[at]) >= kes(st[at-1],ii(m,n)))
		at--;
	
	st[++at]=ii(m,n);
	umax(mx,m);
	umin(upto,(S-n)/m+1);
}

lint f(lint x){
	lint cur=1;
	
	for(lint k=19;k>=0;k--){
		lint asd=cur+bit(k);
		
		if(asd>at) continue;
		
		if(kes(st[asd-1],st[asd]) <= x) cur=asd;
	}
	//~ printf("query %lld -> %lld using %lld,%lld\n",x,st[cur].fi*x+st[cur].se, st[cur].fi,st[cur].se);
	return st[cur].fi*x+st[cur].se;
}

int main(){
	cin >> N >> S;
	
	for(lint i=1;i<=N;i++){
		scanf("%lld %lld",&G[i],&P[i]);
		v.push_back(ii(P[i],-G[i]));
	}
	sort(all(v));
	
	v[0].se=-v[0].se , add(v[0].se,0);
	lint cur=0;
	for(lint i=1;i<v.size();i++){
		v[i].se=-v[i].se;
		if(mx>=v[i].se) continue;
		if(v[i].fi > S) break;
		for(lint k=30;k>=0;k--){
			lint x=cur+bit(k);
			
			if(x>upto) continue;
			
			if(f(x)<v[i].fi) cur=x;
		}
		
		add(v[i].se,f(cur+1)-v[i].fi-v[i].se*(cur+1));
	}
	
	for(lint k=53;k>=0;k--){
		lint x=cur+bit(k);
		
		if(x>upto) continue;
		
		if(f(x)<S) cur=x;
	}
	
	cout << cur+1 << endl;
	
	return 0;
}
