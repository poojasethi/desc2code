#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <map>
#include <vector>
#include <set>
#include <cmath>
#include <cstring>
#include <string>
using namespace std;
typedef long long LL;

LL S;
class Line{
public:
	LL a, b;
	LL dd;
};
LL cachetime(Line p, Line q){
	//q-p
	LL a = q.a-p.a, b = p.b-q.b;
	return (b+a-1)/a;
}
const int maxn = 200000 + 10;
Line q[maxn];
int head, tail;
struct VC{
	LL v, c;
};
bool operator <(VC a, VC b){
	return a.c < b.c || (a.c==b.c && a.v>b.v);
}
VC b[maxn];
int n;
void init(){
	cin>>n>>S;
	for (int i = 0; i<n; i++){
		int v, c;
		scanf("%d%d", &v, &c);
		b[i].v = v;
		b[i].c = c;
	}
	sort(b, b+n);
	int j = 0;
	for (int i = 0; i<n; i++){
		if (j && b[i].v <= b[j-1].v){
		}else{
			b[j++] = b[i];
		}
	}
	n = j;
}
LL work(){
	head = 0, tail = -1;
	Line l;
	l.a = b[0].v;
	l.b = 0;
	q[++tail] = l;
	int i = 1;
	while (i<n){
		LL tl = (b[i].c - q[head].b + q[head].a-1)/q[head].a;
		LL ts = (S - q[head].b + q[head].a-1)/q[head].a;

		if (head<tail && q[head+1].dd <= tl){
			if (q[head+1].dd >= ts){
				return ts;
			}
			head++;
			continue;
		}
		if (tl >= ts){
			return ts;
		}
		LL mon = tl * (q[head].a-b[i].v) + (q[head].b - b[i].c);
		l.a = b[i].v;
		l.b = mon;
		while (head+1<=tail){
			l.dd = cachetime(q[tail], l);
			if (l.dd <= q[tail].dd){
				tail--;
			}else{
				break;
			}
		}
		l.dd = cachetime(q[tail], l);
		q[++tail] = l;
		i++;
	}
	while (true){
		LL ts = (S - q[head].b + q[head].a-1)/q[head].a;
		if (head == tail) return ts;
		if (q[head+1].dd>=ts) return ts;
		head++;
	}
	return 0;
}
int main(){
	init();
	LL res = work();
	cout<<res<<endl;
	return 0;
}
