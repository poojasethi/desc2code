#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cmath>

#define REP(i,n)		for (int i(0); i < (n); ++i)
#define FOR(i,a,b)		for (int i(a); i <= (b); ++i)
#define FORD(i,a,b)		for (int i(a); i >= (b); --i)
#define FOR_EDGE(i,x)	for (int i = H[x]; i; i = X[i])

#define MP	make_pair
#define FI	first
#define SE	second
#define LB	lower_bound
#define UB	upper_bound
#define LL	long long
#define ULL unsigned long long

using namespace std;


const int N	=	200000 + 10;

int n;
LL s;
pair<LL, LL> d[N];

int t;
LL dx[N], dy[N], dk[N];


inline double Cross(int a, int b){
	return (double) (dk[b] * dx[b] - dk[a] * dx[a] + dy[a] - dy[b])/(dk[b] - dk[a]);
}

inline void Get(LL date, LL& x, LL& y){
	if(!date) return (void) (x = y = 0);
	int l(0), r(t), mid;
	while(l + 1 < r){
		mid = (l + r)>> 1; LL tx, ty;
		tx = (mid == t)? 100000000LL: (LL) Cross(mid, mid + 1);
		ty = dk[mid] *(tx - dx[mid])+ dy[mid];
		if(ty >= date) r = mid; else l = mid;
	}
	x = (date - dy[r] + dk[r] - 1)/ dk[r] + dx[r];
	y = dk[r] *(x - dx[r])+ dy[r];
}

inline void Add(LL x, LL y, LL k){
	++t, dx[t] = x, dy[t] = y, dk[t] = k;
	while(t > 2 && Cross(t - 1, t) <= Cross(t - 2, t - 1))
		dx[t - 1] = dx[t], dy[t - 1] = dy[t], dk[t - 1] = dk[t], --t;
}

int main(){
//	freopen("test.in", "r", stdin);
//	freopen("test.out", "w", stdout);
	
	//Read
	scanf("%d %I64d", &n, &s);
	FOR(i, 1, n) scanf("%I64d %I64d ", &d[i].FI, &d[i].SE);
	
	//Select useful buildings
	sort(d + 1, d + n + 1);
	FORD(start, n, 1) if(!d[start].SE){
		int m(0);
		FOR(i, start, n)
			if(i == start || d[i].FI > d[m].FI){
				while(m && d[m].SE > d[i].SE) --m;
				d[++m] = d[i];
			}
		n = m;
	}
//	FOR(i, 1, n) printf("%I64d %I64d\n", d[i].FI, d[i].SE);
	
	//Dp
	FOR(i, 1, n){
		LL x, y;
		Get(d[i].SE, x, y);
	//	printf("%I64d %I64d\n", x, y);
		Add(x, y - d[i].SE, d[i].FI);
	//	printf("%d:\n", i);
	//	FOR(i, 1, t) printf("%I64d %I64d %I64d\n", dx[i], dy[i], dk[i]);
	//	puts("debug:");
	//	printf("%I64d\n", Cross(1, 2));
	}
	
	//Print
	LL x, y;
	Get(s, x, y);
	printf("%I64d\n", x);
	
	return 0;
}
