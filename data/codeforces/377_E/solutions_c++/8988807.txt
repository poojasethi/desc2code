#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
int L,R,mid,i,o,n,r,l;
long long s,dp[300005],DP[300005];
struct node {long long x,y,z;}a[300005],b[300005],st[300005];
int cmp(node i,node j) {return i.y<j.y || i.y==j.y && i.x>j.x;}
bool OK(int x,int y,int z)
{
    long long A,B;
    if (DP[x]>=b[z].y) A=dp[x]; else A=dp[x]+(b[z].y-DP[x]-1)/b[x].x+1;
    if (DP[y]>=b[z].y) B=dp[y]; else B=dp[y]+(b[z].y-DP[y]-1)/b[y].x+1;
    if (A<B) return true;
    if (A>B) return false;
    long long C=(A-dp[x])*b[x].x+DP[x]-b[z].y,D=(A-dp[y])*b[y].x+DP[y]-b[z].y;
    if (C>D) return true; else return false;
}
int main()
{
    cin>>n>>s;
    for (i=1; i<=n; i++) scanf("%I64d%I64d",&a[i].x,&a[i].y);
    sort(a+1,a+n+1,cmp);
    long long ans=(long long)1000000000*100000000;
    for (i=1; i<=n; i++) if (a[i].x>a[i-1].x && a[i].y<s) {b[++o].x=a[i].x; b[o].y=a[i].y;}
    b[++o].y=s;
    st[1].x=2; st[1].y=o; st[1].z=1; r=1; l=1;
    ans=min(ans,dp[1]+(s-DP[1]-1)/b[1].x+1);
    for (i=2; i<o; i++)
    {
        if (DP[st[l].z]>=b[i].y) dp[i]=dp[st[l].z]; else dp[i]=dp[st[l].z]+(b[i].y-DP[st[l].z]-1)/b[st[l].z].x+1;
        DP[i]=(dp[i]-dp[st[l].z])*b[st[l].z].x+DP[st[l].z]-b[i].y;
        st[l].x++;
        if (i==o) break; while (st[l].x>st[l].y) l++;
        while (r>=l && OK(i,st[r].z,st[r].x)) r--;
        if (r<l) {st[++r].x=i+1; st[r].y=o; st[r].z=i;} else
        {
            L=st[r].x; R=st[r].y; mid=(L+R)/2;
            while (L<=R) {
            if (OK(i,st[r].z,mid))
            {
                R=mid-1;
                mid=(L+R)/2;
            } else
            {
                L=mid+1;
                mid=(L+R)/2;
            }}
            st[r].y=R;
            if (L!=o+1) {st[++r].x=L; st[r].y=o; st[r].z=i;}
        }
        ans=min(ans,dp[i]+(s-DP[i]-1)/b[i].x+1);
    }
    cout<<ans;
    return 0;
}
