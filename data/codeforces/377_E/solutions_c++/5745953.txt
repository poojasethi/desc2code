#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <map>
#include <set>
#include <list>
#include <queue>
#include <vector>
#include <bitset>
#include <complex>
#include <cmath>
#include <ctime>
#include <cassert>

using namespace std;

#define pb push_back
#define mp make_pair
#define ft first
#define sd second
#define REP(i, n) for (int i = 0; i < (int)(n); i++)
#define foreach(e, x) for (__typeof(x.begin()) e = x.begin(); e != x.end(); e++)
typedef long long LL;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef pair<double, double> PDD;

const int maxn = 200010;
const double eps = 1e-9;

int c[maxn], v[maxn];
PII a[maxn];
PLL l[maxn];

PDD cross(PLL l1, PLL l2)
{
	PDD res;
	res.ft = (double)(l2.sd-l1.sd)/(l1.ft-l2.ft);
	res.sd = (double)l2.ft/(l2.ft-l1.ft)*l1.sd-(double)l1.ft/(l2.ft-l1.ft)*l2.sd;
	return res;
}

int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int n;
	LL s;
	cin >> n >> s;
	for (int i = 0; i < n; i++) cin >> a[i].sd >> a[i].ft;

	int m = 0;
	sort(a, a+n);
	for (int i = 0, j; i < n; i = j) {
		for (j = i+1; j < n && a[i].ft == a[j].ft; j++);
		if (m == 0 || a[j-1].sd > v[m-1]) {
			v[m] = a[j-1].sd;
			c[m++] = a[j-1].ft;
		}
	}

	int lw = 0, tp = 1;
	l[0].ft = v[0];
	l[0].sd = 0;
	for (int i = 1; i < m; i++) {
		while (tp-lw >= 2 && (c[i]-l[lw].sd-1)/l[lw].ft+1+eps >= cross(l[lw], l[lw+1]).ft) lw++;
		LL k = l[lw].ft, b = l[lw].sd;
		LL x = (c[i]-b-1)/k+1, y = x*k+b;
		l[tp++] = mp(v[i], y-c[i]-x*v[i]);
		for ( ; tp-lw >= 3; tp--) {
			LL x0 = (LL)(cross(l[tp-3], l[tp-2]).ft+eps)+1;
			LL x1 = (LL)(cross(l[tp-2], l[tp-1]).ft-eps);
			if (x0 > x1) l[tp-2] = l[tp-1]; else break;
		}
		while (tp-lw >= 2 && cross(l[tp-2], l[tp-1]).sd+eps >= s) tp--;
	}

	cout << (s-l[tp-1].sd-1)/l[tp-1].ft+1 << endl;
	return 0;
}

