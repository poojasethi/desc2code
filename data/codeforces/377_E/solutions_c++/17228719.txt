#include<bits/stdc++.h>

using namespace std;

#define pii pair<int,int>
#define ll long long
#define N (int)(2e5+10)
#define mod 1000000007LL
#define mp make_pair
#define pb push_back
#define nd second
#define st first
#define inf mod
#define endl '\n'
#define sag (sol|1)
#define sol (root<<1)
#define bit(x,y) ((x>>y)&1)
#define int long long

pii A[N],C[N],B[N],F[N];
int D[N],i,j,k,n,m,x,y,z,last=1,E[N],S,t,s;

double intersect(pii x,pii y){
	return (1.0*y.nd-x.nd)/(x.st-y.st);
}

int f(int x){
	int bas=1;
	int son=S;
	while(bas<son){
		int ort=bas+son>>1;
		if(bas==ort)
			ort++;
		if(inf*inf/x < C[ort].st)
			return inf*inf;
		if(intersect(C[ort],C[ort-1]) <= (double)x)
			bas = ort;
		else
			son = ort-1;
	}
	if(inf*inf/x < C[bas].st)
		return inf*inf;
	return C[bas].st*x + C[bas].nd;
}

int mntime(int x){
	int bas=1;
	int son=inf;
	if(x == s)
		son*=inf;
	while(bas<son){
		int ort=(bas+son)/2;
		if(f(ort) >= x)
			son = ort;
		else
			bas = ort+1;
	}
	return bas;
}

void add(int m,int n,int d,int e){
	while(S>1 and intersect(C[S],C[S-1]) >= intersect(C[S-1],mp(m,n)))
		S--;
	C[++S] = mp(m,n);
	D[S] = d;
	E[S] = e;
}

main(){
	cin >> n >> s;

	for(i=1 ; i<=n ; i++){
		scanf("%lld %lld",&A[i].nd,&A[i].st);
		A[i].nd = -A[i].nd;
	}
	
	sort(A+1,A+1+n);

	for(i=1 ; i<=n ; i++){
		if(A[i].st >= s)
			break;
		if(t and A[i].nd >= -B[t].nd)
			continue;
		B[++t] = A[i];
		B[t].nd = -B[t].nd;
	}

	n = t;

	add(B[1].nd,0,0,0);
	F[1] = B[1];
	for(i=2 ; i<=n ; i++){
		int mn = mntime(B[i].st);
		int d = f(mn)-B[i].st;
		add(B[i].nd,d-B[i].nd*mn,d,mn);
		F[S] = B[i];
	}

	cout << mntime(s) << endl;
}
