#include <algorithm>
#include <stdio.h>
#include <memory.h>
#include <queue>
#include <cmath>
#include <set>
#include <map>
#include <string.h>
#include <string>
#include <ctype.h>
#include <ctime>
#include <bitset>
#include <vector>
#include <cassert>

using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)
template <class T> inline void chkmin(T &a, T b) { if (a>b) a=b; }
template <class T> inline void chkmax(T &a, T b) { if (a<b) a=b; }

typedef long long INT;
typedef pair<int, int> pii;

#define inf 0x3f3f3f3f3f3f3f3f
#define NN 410000

pii h[NN];
double xs[NN];
int st[NN];
INT value[NN], cost[NN], f[NN], g[NN];

double inter(int i, int j) {
  double vv=1.0*value[i]*value[j];
  double fvv=vv * (f[j]-f[i]);
  double gv=1.0*g[i]*value[j]-1.0*g[j]*value[i];
  double vmv=value[j]-value[i];
  return (fvv+gv)/vmv;
}

int main() {
	int N, i, j, m, e, low, high, mid, u;
	INT tar, nf, ng, ans, need, day, cur;
	double xx;
	
	scanf("%d%I64d", &N, &tar);
	for (i=0; i<N; i++) {
		scanf("%d%d", &h[i].second, &h[i].first);
		h[i].second*=-1;
	}
	
	sort(h, h+N);
	for (i=m=1; i<N; i++) {
		if (h[i].second<h[m-1].second) h[m++]=h[i];
	}
	N=m;
	for (i=0; i<N; i++) cost[i]=h[i].first, value[i]=-h[i].second;
	
	e=0;
	for (i=0; i<N; i++) {
		f[i]=inf; g[i]=0;
		if (cost[i]==0) f[i]=g[i]=0;
		else {
			low=1; high=e;
			while (low<high) {
				mid=(high+low)/2;
				if (xs[mid]<cost[i]) low=mid+1;
				else high=mid;
			}
		}
		for (u=low-5; u<=low+5; u++) {
			if (u<1 || u>e) continue;
			j=st[u];
			nf=f[j], ng=g[j];
			if (ng<cost[i]) {
				need=cost[i]-ng;
				if (need>0) {
					day=(need+value[j]-1)/value[j];
					nf+=day;
					ng+=day*value[j];
				}
			}
			ng-=cost[i];
			if (nf<f[i] || nf==f[i] && ng>g[i]) {
				f[i]=nf; g[i]=ng;
			}
		}
		while (e>1) {
			xx=inter(st[e], i);
			if (xx<xs[e-1]) e--;
			else break;
		}
		e++;
		st[e]=i;
		if (e>1) {
			xs[e-1]=inter(st[e-1], st[e]);
		}
	}
	ans=inf;
	for (i=0; i<N; i++) {
		cur=f[i];
		if (g[i]<tar) {
			need=tar-g[i];
			cur+=(need+value[i]-1)/value[i];
		}
		chkmin(ans, cur);
	}
	
	printf("%I64d\n", ans);
	
	return 0;
}