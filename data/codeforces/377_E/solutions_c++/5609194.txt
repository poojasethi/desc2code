#include<stdio.h>
#include<stdlib.h>

#define if if (
#define then )
#define do )
#define for for (
#define while while (
#define begin {
#define end }
#define int64 long long
#define INF 10000000000000000LL

char ch;
inline void read(int &x)
begin
	x=0;ch=getchar();
	while ch<=32 do ch=getchar();
	while ch>32 do begin
		x=x*10+ch-48;ch=getchar();
	end;
end;

inline void read(int64 &x)
begin
	x=0;ch=getchar();
	while ch<=32 do ch=getchar();
	while ch>32 do begin
		x=x*10+ch-48;ch=getchar();
	end;
end;

struct line begin
	int64 k,b,l,r;
	int64 mi,ma;
end;

int n,i,j;
int64 s;
int cnt;
int64 a[200005],b[200005];
line aa[200005];

inline void qsort(int l,int r)
begin
	if l>r then return;
	int i=l,j=r;
	int pos=l+(rand()*RAND_MAX+rand())%(r-l+1);
	int64 mid=a[pos],mid2=b[pos],p;
	while i<j do begin
		while a[i]<mid || (a[i]==mid && b[i]<mid2) do ++i;
		while a[j]>mid || (a[j]==mid && b[j]>mid2) do --j;
		if i<=j then begin
			p=a[i];a[i]=a[j];a[j]=p;
			p=b[i];b[i]=b[j];b[j]=p;
			++i;--j;
		end;
	end;
	if l<j then qsort(l,j);
	if i<r then qsort(i,r);
end;

inline void getmintime(int64 ss,int64 &rettime,int64 &retss)
begin
	int l=1,r=cnt,mid;
	while l<r do begin
		mid=(l+r)>>1;
		if aa[mid].ma<ss then l=mid+1; else r=mid;
	end;
	
	line *a=aa+l;
	int64 t1=(ss-a->b)/a->k;
	if t1*a->k<ss-a->b then ++t1;
	rettime=t1;
	retss=t1*a->k+a->b;
end;

int main()
begin
	read(n);read(s);
	cnt=1;
	int64 kkk=0;
	for i=1;i<=n;i++ do begin
		read(a[i]);read(b[i]);
		if b[i]==0 then begin
			if a[i]>kkk then kkk=a[i];
			--n;--i;
		end;
	end;
	int64 tt=INF/kkk+1;
	aa[1]=(line){kkk,0,0,tt,0,tt*kkk};
	qsort(1,n);
	for i=1;i<=n;i++ do begin
		if a[i]<=kkk then continue;
		if i>1 && a[i]==a[i-1] then continue;
		int64 tk,tb;
		int64 tt,ts;
		getmintime(b[i],tt,ts);
		tk=a[i];
		tb=ts-b[i]-tt*tk;
		for j=cnt;j>=1;j-- do begin
			if tb+tk*aa[j].l<aa[j].mi then begin
				int64 t1=(aa[j].b-tb)/(tk-aa[j].k);
				if t1*(tk-aa[j].k)<aa[j].b-tb then ++t1;
				aa[j].r=t1-1;
				aa[j].ma=aa[j].k*(t1-1)+aa[j].b;
				cnt=j+1;
				aa[cnt].l=t1;
				aa[cnt].mi=t1*tk+tb;
				aa[cnt].k=tk;aa[cnt].b=tb;
				aa[cnt].r=(INF-tb)/tk+1;
				aa[cnt].ma=aa[cnt].r*tk+tb;
				break;
			end;
		end;
	end;
	int64 ans1,ans2;
	getmintime(s,ans1,ans2);
	printf("%I64d\n",ans1);
end