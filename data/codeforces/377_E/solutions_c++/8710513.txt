#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const int MAX = 200005;
pair<long long, long long> dp[MAX], p[MAX];
long long d[MAX], h, t, n, s;
pair<long long, long long> get_min(pair<long long, long long> a, pair<long long, long long> b)
{
	if (a.first == b.first)
		return max(a, b);
	return min(a, b);
}
pair<long long, long long> update(int i, int j)
{
	long long rem = p[j].second - dp[i].second;
	if (rem <= 0)
		return make_pair(dp[i].first, dp[i].second - p[j].second);
	rem = (rem + p[i].first - 1) / p[i].first;
	return make_pair(dp[i].first + rem, dp[i].second + rem * p[i].first - p[j].second);
}
int when(int i, int j)
{
	int l = 0, r = n;
	while (r - l > 1)
	{
		int mid = (l + r) / 2;
		if (get_min(update(i, mid), update(j, mid)) == update(i, mid))
			l = mid;
		else
			r = mid;
	}
	return r;
}
int main()
{
	ios::sync_with_stdio(false);
	cin >> n >> s;
	for (int i = 0; i < n; i++)
		cin >> p[i].first >> p[i].second;
	p[n++] = make_pair(1000000000, s);
	sort(p, p + n);
	vector<pair<long long, long long> > v;
	for (int i = 0; i < n; i++)
	{
		while (!v.empty() && v.back().second >= p[i].second)
			v.pop_back();
		v.push_back(p[i]);
	}
	n = v.size();
	for (int i = 0; i < n; i++)
		p[i] = v[i];
	dp[0] = make_pair(0, 0);
	d[t++] = 0;
	for (int i = 1; i < n; i++)
	{
		while (t - h > 1 && when(d[h], d[h + 1]) <= i)
			h++;
		dp[i] = update(d[h], i);
		while (t - h > 1 && when(d[t - 1], i) <= when(d[t - 2], d[t - 1]))
			t--;
		d[t++] = i;
	}
	cout << dp[n - 1].first << endl;
	return 0;
}
