#include <bits/stdc++.h>

using namespace std;

struct node
{
	int l,r,t;
	node(){};
	node( int a, int b, int c )
	{
		l = a; r = b; t = c;
	}
	
	node operator + ( node foo )
	{
		int tot = min( l, foo.r );
		int al = l+foo.l-tot;
		int ar = r+foo.r-tot;
		int at = tot+t+foo.t;
		return node(al,ar,at);
	} 
};

const int N = 1100000;
node tr[4*N];

string s;
int n;


void build( int no, int l, int r )
{
	if( l == r ) 
	{
		if( s[l] == '(' ) tr[no] = node(1,0,0);
		else tr[no] = node(0,1,0);
		return;
	}
	int nxt = (no<<1);
	int mid = (l+r)>>1;
	build(nxt,l,mid); build(nxt+1,mid+1,r);
	
	tr[no] = tr[nxt]+tr[nxt+1];
}

node query( int no, int l, int r, int i, int j )
{
	if( r<i || l>j ) return node(0,0,0);
	if(l>=i && r<=j ) return tr[no];
	int nxt = (no<<1);
	int mid = (l+r)>>1;
	return query(nxt,l,mid,i,j)+query(nxt+1,mid+1,r,i,j);
}

int main()
{
	cin >> s;
	n = s.size();
	build(1,0,n-1);
	
	int m;
	scanf("%d",&m);
	while(m--)
	{
		int a,b;
		scanf("%d %d",&a,&b); a--;b--;
		printf("%d\n",2*query(1,0,n-1,a,b).t);
	}
	return 0;
}
