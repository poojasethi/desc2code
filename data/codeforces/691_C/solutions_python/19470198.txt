from string import *
from math import *
from random import *
from itertools import *

import re

TEST_MODE = False

class Test:
	def __init__(self):
		self.__tests = []
		self.__iteration = 0

	def add(self, test_input, test_output):
		self.__tests.append((tuple(test_input), test_output))

	def __iter__(self):
		return self

	def next(self):
		if self.__iteration == len(self.__tests):
			raise StopIteration
		else:
			self.__iteration += 1
			return self.__tests[self.__iteration - 1]

	def test(self, soln_func):
		passes = 0
		total = 0
		for test in self:
			i,o = test
			print "Input:", i
			print "Expected Out:", o
			actual = soln_func(*i)
			print "Actual Out:", actual
			print "Result:",
			
			if o == actual:
				passes += 1
				print "Pass"
			else: print "Fail"
			total += 1
			print
		print "Summary: %d/%d Passes" % (passes, total)

def solution(x):
	x = x.strip("0").rstrip(".") if "." in x else x.lstrip("0")

	digit_filter = lambda n: n != "."

	RE_1 = re.compile(r"^[1-9][0-9]+\.[0-9]*[1-9][0-9]*$")
	RE_2 = re.compile(r"^[0-9]?$")
	RE_3 = re.compile(r"^[0-9][0-9]+$")
	RE_4 = re.compile(r"^[1-9]\.[0-9]*[1-9][0-9]*$")
	RE_5 = re.compile(r"^\.[0-9]*[1-9][0-9]*$")

	if RE_1.match(x):
		decimal_index = x.find(".")
		x_digits = filter(digit_filter, x)
		return x_digits[0] \
			+ "." \
			+ x_digits[1:] \
			+ "E" \
			+ str(decimal_index - 1)

	elif RE_2.match(x):
		return x

	elif RE_3.match(x):
		x_stripped = x.rstrip("0")
		return x_stripped[0] \
			+ ("." if len(x_stripped) > 1 else "") \
			+ x_stripped[1:] \
			+ "E" \
			+ str(len(x) - 1)

	elif RE_4.match(x):
		return x

	elif RE_5.match(x):
		first_index = -1
		for c in xrange(1, len(x)):
			if x[c] != "0":
				first_index = c
				break
		assert first_index > 0

		x_digits = x[1:].lstrip("0")
		return x_digits[0] \
			+ ("." if len(x_digits) > 1 else "")\
			+ x_digits[1:] \
			+ "E-" \
			+ str(first_index)
	else:
		assert False, "No REs Matched!"

if TEST_MODE:
	tests = Test()
	tests.add(["16"], "1.6E1")
	tests.add(["01.23400"], "1.234")
	tests.add([".100"], "1E-1")
	tests.add(["100."], "1E2")

	tests.test(solution)
else:
	x = raw_input().strip()
	print solution(x)
	'''
	for a in xrange(10):
		b = ""
		for c in xrange(randint(1, 10)):
			b += str(randint(0,9))
		d = randint(0, len(b)+1)
		b = b[:d] + "." + b[d:]
		print b
		print solution(b)
		print
	'''