#include <map>
#include <set>
#include <list>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <bitset>
#include <vector>
#include <cstdio>
#include <string>
#include <cstring>
#include <sstream>
#include <iomanip>
#include <cstdlib>
#include <iostream>
#include <algorithm>
using namespace std;
int a[5005],b[5005],g[1005][2],f[4005][4005],c,d;
bool work (int x,int y) {
	return x>=0 && x<c && y>=0 && y<d;
}
int solve (int *x,int y,int z) {
	return lower_bound(x,x+y,z)-x;
}
void add (int *x,int &y,int z) {
	x[y]=z;y++;
	x[y]=z-1;y++;
	x[y]=z+1;y++;
}
void dfs (int x,int y) {
	if (!work(x,y) || f[x][y]!=0) return;
	f[x][y]=-1;
	dfs(x-1,y);
	dfs(x+1,y);
	dfs(x,y-1);
	dfs(x,y+1);
}
int main ( ) {
	long long ans=0;
	int n,i,j,k,u=0,v=0;
	add(a,c,u);
	add(b,d,v);
	scanf("%d",&n);
	g[0][0]=0;g[0][1]=0;
	for (i=1;i<=n;i++) {
		char x;
		int y;
		scanf("\n%c %d",&x,&y);
		if (x=='D') v-=y;
		else if (x=='U') v+=y;
		else if (x=='L') u-=y;
		else if (x=='R') u+=y;
		add(a,c,u);
		add(b,d,v);
		g[i][0]=u;
		g[i][1]=v;
	}
	sort(a,a+c);
	c=unique(a,a+c)-a;
	sort(b,b+d);
	d=unique(b,b+d)-b;
	for (i=0;i<n;i++) {
		int u,v,x,y;
		u=solve(a,c,g[i][0]);
		v=solve(b,d,g[i][1]);
		x=solve(a,c,g[i+1][0]);
		y=solve(b,d,g[i+1][1]);
		if (u>x) swap(u,x);
		if (v>y) swap(v,y);
		for (j=u;j<=x;j++) {
			for (k=v;k<=y;k++) f[j][k]=1;
		}
	}
	dfs(0,0);
	for (i=0;i<c-1;i++) {
		for (j=0;j<d-1;j++) {
			if (f[i][j]!=-1) ans+=(a[i+1]-a[i])*1LL*(b[j+1]-b[j]);
		}
	}
	printf("%I64d\n",ans);
	return 0;
}
/*
Sample test(s)

input

5
x 8
U 9
L 9
D 8
L 2

output

101

input

7
R 10
D 2
L 7
U 9
D 2
R 3
D 10

output

52
*/
