#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define P(x) printf("%d\n",x)

typedef long long int LL;
const int N = 1001;
map<int, int > MX, MY;
map<int, int >::iterator it;
int dx[4] = {-1, 0, 0, +1};
int dy[4] = {0, -1, +1, 0};

struct rect {
	int x1,y1,x2,y2;
};

rect A[N];
int VX[2*N], VY[2*N];
int X,Y;
int F[2*N][2*N];

void dfs(int x, int y) {
	if(x < 0 || y < 0 || x >= X || y >= Y || F[x][y]) return;
	F[x][y] = 2;
	rep(i,0,4)
		dfs(x+dx[i], y+dy[i]);

}

int main() {
	int n;
	S(n);
	int x,y;
	x = y = 0;
	rep(i,0,n) {
		string s;
		int d;
		cin >> s >> d;

		if(s == "R") {
			A[i].x1 = x;
			A[i].y1 = y;
			A[i].x2 = x+d+1;
			A[i].y2 = y+1;
			x += d;
		} else if(s == "L") {
			A[i].x1 = x-d;
			A[i].y1 = y;
			A[i].x2 = x+1;
			A[i].y2 = y+1;
			x -= d;
		} else if(s == "U") {
			A[i].x1 = x;
			A[i].y1 = y;
			A[i].x2 = x+1;
			A[i].y2 = y+d+1;
			y += d;
		} else {
			A[i].x1 = x;
			A[i].y1 = y-d;
			A[i].x2 = x+1;
			A[i].y2 = y+1;
			y -= d;
		}
		MX[A[i].x1] = MX[A[i].x2] = 0;
		MY[A[i].y1] = MY[A[i].y2] = 0;
	}
	for(it = MX.begin(); it != MX.end(); it++) {
		it->second = X;
		VX[X] = it->first;
		X++;
	}
	for(it = MY.begin(); it != MY.end(); it++) {
		it->second = Y;
		VY[Y] = it->first;
		Y++;
	}
	// cout << X << " " << Y << endl;
	X--;Y--;

	rep(i,0,n) {
		rep(j,MX[A[i].x1],MX[A[i].x2])
			rep(k,MY[A[i].y1],MY[A[i].y2]) {
				F[j][k] = 1;
				// printf("here %d %d\n",i,)
			}
	}

	rep(i,0,X) rep(j,0,Y) if(i == 0 || i == X-1 || j == 0 || j == Y-1)
		dfs(i,j);

	LL ans = 0;
	rep(i,0,X) rep(j,0,Y) if(F[i][j] != 2) {
		// printf("%d %d\n",i,j);
		ans += (VX[i+1] - VX[i]) * 1LL * (VY[j+1] - VY[j]);
	}
	cout << ans << endl;

	return 0;

}