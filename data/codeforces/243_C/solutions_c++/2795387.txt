//By Lin
#include<cstdio>
#include<cstring>
#include<queue>
#include<map>
#include<algorithm>
#include<iostream>
#define maxn 1005
#define X first
#define Y second
using namespace std;
typedef long long LL;

const	int	d[4][2] = {0,1,0,-1,1,0,-1,0};
int		n;
int		xcnt,xx[maxn*3],ycnt,yy[maxn*3];
bool	mark[maxn*3][maxn*3],mq[maxn*3][maxn*3];
pair<int,int> data[maxn];
queue<pair<int,int> > que;
map<int,int>  mm;

bool	in_R(int x,int y ){
	return x>=0 && x<=xcnt+1 && y>=0 && y<=ycnt+1; 
}
int		main(){
	scanf("%d",&n);
	data[0].X = data[0].Y = 0;
	for (int i = 1; i<=n; i++ ){
		char str[10];
		int	 L;
		scanf("%s%d", str, &L );
		data[i] = data[i-1];
		if ( str[0] == 'L' ) data[i].Y -= L;
		if ( str[0] == 'R' ) data[i].Y += L;
		if ( str[0] == 'U' ) data[i].X -= L;
		if ( str[0] == 'D' ) data[i].X += L;
	}
	for (int i = 0; i<=n;i++) {
		xx[i*3+0] = data[i].X , xx[i*3+1] = data[i].X-1 , xx[i*3+2] = data[i].X+1;
		yy[i*3+0] = data[i].Y , yy[i*3+1] = data[i].Y-1 , yy[i*3+2] = data[i].Y+1;
	}
	sort( xx , xx+n*3+3 );
	xcnt = unique( xx , xx+n*3+3 )-xx;
	mm.clear();
	for (int i = 0; i<xcnt; i++) mm[xx[i]] = i+1;
	for (int i = 0; i<=n; i++) data[i].X = mm[data[i].X];

	sort( yy , yy+n*3+3 );
	ycnt = unique( yy , yy+n*3+3 )-yy;
	mm.clear();
	for (int i = 0; i<ycnt; i++) mm[yy[i]] = i+1;
	for (int i = 0; i<=n; i++) data[i].Y = mm[data[i].Y];

	for (int i = 0; i<n; i++ ) 
		for (int x = min(data[i].X,data[i+1].X); x<=max(data[i].X,data[i+1].X); x++ )
			for (int y = min(data[i].Y,data[i+1].Y); y<=max(data[i].Y,data[i+1].Y); y++ )
				mq[x][y] = 1;
	que.push( make_pair(0,0) );
	mark[0][0] = true;
	while ( !que.empty() ) {
		int x = que.front().X , y = que.front().Y;
		que.pop();
		for (int i = 0; i<4; i++) {
			int g = x+d[i][0], h = y+d[i][1];
			if ( in_R(g,h) && !mark[g][h] && !mq[g][h] ) {
				mark[g][h] = true;
				que.push( make_pair(g,h) );
			}
		}
	}
	LL	ans = 0;
	for (int i = 1; i<=xcnt; i++)
		for (int j = 1; j<=ycnt; j++) 
			if ( !mark[i][j] ) ans += ((LL)xx[i]-xx[i-1])*((LL)yy[j]-yy[j-1]);
	cout<<ans<<endl;
	return 0;
}
