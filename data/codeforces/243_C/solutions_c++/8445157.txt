#include <cstdio>
#include <algorithm>
#include <iostream>

using namespace std;

const int N = 3030, INF = 1e9 + 2;
const int mx[4] = {1, -1, 0, 0}, my[4] = {0, 0, 1, -1};

char d[N];
bool vs[N][N], fil[N][N];
int n, t[N], sx[N], sxt, sy[N], syt;

void add(int x, int y) {
	sx[++sxt] = x - 1, sx[++sxt] = x, sx[++sxt] = x + 1;
	sy[++syt] = y - 1, sy[++syt] = y, sy[++syt] = y + 1;
}
void dfs(int x, int y) {
	if (x < 1 || y < 1 || x > sxt || y > syt) return;
	if (vs[x][y] || fil[x][y]) return;
	fil[x][y] = 1;
	for (int l = 0; l < 4; ++l) {
		dfs(x + mx[l], y + my[l]);
	}
}
int main() {
	scanf("%d\n", &n);
	add(0, 0);
	for (int i = 1, mx = 0, my = 0; i <= n; ++i) {
		scanf("%c %d\n", &d[i], &t[i]);
		if (d[i] == 'L') mx -= t[i];
		if (d[i] == 'R') mx += t[i];
		if (d[i] == 'D') my -= t[i];
		if (d[i] == 'U') my += t[i];
		add(mx, my);
	}
	sx[++sxt] = -INF, sx[++sxt] = INF;
	sy[++syt] = -INF, sy[++syt] = INF;
	sort(sx + 1, sx + sxt + 1), sxt = unique(sx + 1, sx + sxt + 1) - sx - 1;
	sort(sy + 1, sy + syt + 1), syt = unique(sy + 1, sy + syt + 1) - sy - 1;

	int x = find(sx + 1, sx + sxt + 1, 0) - sx;
	int y = find(sy + 1, sy + syt + 1, 0) - sy;
	vs[x][y] = 1;
	for (int i = 1; i <= n; ++i) {
		while (d[i] == 'L' && t[i]) {
			t[i] -= (sx[x] - sx[x - 1]), --x;
			vs[x][y] = 1;
		}
		while (d[i] == 'R' && t[i]) {
			t[i] -= (sx[x + 2] - sx[x + 1]), ++x;
			vs[x][y] = 1;
		}
		while (d[i] == 'D' && t[i]) {
			t[i] -= (sy[y] - sy[y - 1]), --y;
			vs[x][y] = 1;
		}
		while (d[i] == 'U' && t[i]) {
			t[i] -= (sy[y + 2] - sy[y + 1]), ++y;
			vs[x][y] = 1;
		}
	}
	dfs(1, 1);

	long long ans = 0;
	for (int x = 1; x < sxt; ++x)
		for (int y = 1; y < syt; ++y)
			if (!fil[x][y]) {
				ans += 1LL * (sx[x + 1] - sx[x]) * (sy[y + 1] - sy[y]);
			}
	cout << ans << endl;
}
