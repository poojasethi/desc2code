#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <vector>

using namespace std;

#define FOR(i, a, b) for(int i = a; i < b; i++)
#define REP(i, n) FOR(i, 0, n)
#define ll long long
#define pb push_back
#define mp make_pair

#define N 4444

vector<ll> xImportant, yImportant;
int x[N], y[N];
int mark[N][N];

void add(ll x, ll y)
{
	REP(k, 3) xImportant.push_back(x+k-1);
	REP(k, 3) yImportant.push_back(y+k-1);
}

ll xGet(ll x)
{
	return lower_bound(xImportant.begin(), xImportant.end(), x) - xImportant.begin();
}

ll yGet(ll y)
{
	return lower_bound(yImportant.begin(), yImportant.end(), y) - yImportant.begin();
}

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, -1, 0, 1};

void dfs(int i, int j)
{
	if(i < 0 or i >= xImportant.size() or j < 0 or j >= yImportant.size() or mark[i][j]) return;
	mark[i][j] = 1;
	REP(k, 4) dfs(i+dx[k], j+dy[k]);
}

int main()
{
	int n; cin >> n;

	add(x[0], y[0]);

	for(int i = 1; i <= n; i++)
	{
		char c; int d;
		cin >> c >> d;

		x[i] = x[i-1];
		y[i] = y[i-1];

		if(c == 'R') y[i] += d;
		if(c == 'L') y[i] -= d;
		if(c == 'D') x[i] += d;
		if(c == 'U') x[i] -= d;

		add(x[i], y[i]);
	}

	sort(xImportant.begin(), xImportant.end()); xImportant.erase(unique(xImportant.begin(), xImportant.end()), xImportant.end());
	sort(yImportant.begin(), yImportant.end()); yImportant.erase(unique(yImportant.begin(), yImportant.end()), yImportant.end());

	REP(i, n)
	{
		int x1 = xGet(x[i]);
		int y1 = yGet(y[i]);
		int x2 = xGet(x[i+1]);
		int y2 = yGet(y[i+1]);

		for(int xx = min(x1, x2); xx <= max(x1, x2); xx++)
			for(int yy = min(y1, y2); yy <= max(y1, y2); yy++)
				mark[xx][yy] = 2;
	}
	
	dfs(0, 0);

	ll ans = 0;

	for(int i = 0; i < xImportant.size(); i++)
		for(int j = 0; j < yImportant.size(); j++)
		{
			if(mark[i][j] != 1)
				ans += (xImportant[i+1] - xImportant[i]) * (yImportant[j+1] - yImportant[j]);
		}

	cout << ans << endl;

	return 0;
}

