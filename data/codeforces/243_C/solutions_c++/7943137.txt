#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <set>
#define N 3010
#define int64 long long
#define inf 2000000000
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
const int A1[4]={0,0,1,-1},A2[4]={1,-1,0,0};
struct ww {
	int a,l,r;
} hen[N],shu[N];
int i,j,k,n,m,s1,s2,x,y,t1,t2;
char p[2];
int a1[N],a2[N],f[N][N],lenx[N],leny[N],b[N];
int64 an;
inline void pre(int a[N],int &n,int c[N]) {
	int i,m=0;
	sort(a+1,a+n+1);
	For(i,1,n) if (!m||b[m]<a[i]) b[++m]=a[i];
	n=0;
	For(i,1,m) {
		a[++n]=b[i]; c[n]=1;
		if (i<m&&b[i]+1<b[i+1]) {
			a[++n]=b[i]+1;
			c[n]=b[i+1]-b[i]-1;
		}
	}
}
inline int getx(int x) {
	int A=lower_bound(a1+1,a1+t1+1,x)-a1;
	return A;
}
inline int gety(int x) {
	int A=lower_bound(a2+1,a2+t2+1,x)-a2;
	return A;
}
inline void tian(int x,int y,int X,int Y) {
	for (;x!=X||y!=Y;) {
		f[x][y]=1;
		if (x<X) x++;
		if (y<Y) y++;
	}
	f[X][Y]=1;
}
void dfs(int x,int y) {
	if (x<0||y<0||x>t1+1||y>t2+1||f[x][y]) return;
	int i;
	f[x][y]=2;
	For(i,0,3) dfs(x+A1[i],y+A2[i]);
}
int main() {
	scanf("%d",&n);
	t1=t2=1;
	For(i,1,n) {
		int len;
		scanf("%s%d",p,&len);
		if (p[0]=='R') hen[++s1]=(ww){x,y,y+len},y+=len;
		if (p[0]=='L') hen[++s1]=(ww){x,y-len,y},y-=len;
		if (p[0]=='U') shu[++s2]=(ww){y,x-len,x},x-=len;
		if (p[0]=='D') shu[++s2]=(ww){y,x,x+len},x+=len;
		a1[++t1]=x,a2[++t2]=y;
	}
	pre(a1,t1,lenx),pre(a2,t2,leny);
	For(i,1,s1) {
		ww A=hen[i];
		tian(getx(A.a),gety(A.l),getx(A.a),gety(A.r));
	}
	For(i,1,s2) {
		ww A=shu[i];
		tian(getx(A.l),gety(A.a),getx(A.r),gety(A.a));
	}
	dfs(0,0);
	For(i,1,t1)For(j,1,t2) if (f[i][j]<2) an+=1ll*lenx[i]*leny[j];
	printf("%I64d\n",an);
	return 0;
}
