#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

int xs[5005], ys[5005], xn, Yn;
void add(int *p, int &q, int v) {
	p[q++] = v;
	p[q++] = v-1;
	p[q++] = v+1;
}
int get(int *p, int q, int v) {
	return lower_bound(p, p+q, v) - p;
}
int moves[1005][2];
int safe[4005][4005];
bool valid(int x, int y) {
	return x>=0 && x<xn && y>=0 && y<Yn;
}
void go(int x, int y) {
	if(!valid(x, y) || safe[x][y] != 0) return;
	safe[x][y] = -1;
	go(x-1, y); go(x+1, y); go(x, y-1); go(x, y+1);
}
int main(void) {
	int n, X = 0, Y = 0;
	add(xs, xn, X);
	add(ys, Yn, Y);
	scanf("%d", &n);

	moves[0][0] = moves[0][1] = 0;
	for(int i=1;i<=n;i++) {
		char x[10]; int d;
		scanf("%s%d", x, &d);
		if(x[0]=='D') Y -= d;
		else if(x[0]=='U') Y += d;
		else if(x[0]=='L') X -= d;
		else if(x[0]=='R') X += d;
		add(xs, xn, X); add(ys, Yn, Y);
		moves[i][0] = X;
		moves[i][1] = Y;
	}
	
	sort(xs, xs+xn);
	xn = unique(xs, xs+xn) - xs;
	sort(ys, ys+Yn);
	Yn = unique(ys, ys+Yn) - ys;

		
	
	for(int i=0;i<n;i++) {
		int P = get(xs, xn, moves[i][0]), Q = get(ys, Yn, moves[i][1]);
		int R = get(xs, xn, moves[i+1][0]), S = get(ys, Yn, moves[i+1][1]);
		if(P>R) swap(P, R); if(Q>S) swap(Q, S);
		for(int x=P;x<=R;x++)
			for(int y=Q;y<=S;y++)
				safe[x][y] = 1;
	}
	go(0, 0);
	long long ans = 0;
	for(int i=0;i<xn-1;i++) {
		for(int j=0;j<Yn-1;j++) {
			//printf("%d ", safe[i][j]);
			if(safe[i][j] != -1)
				ans += (xs[i+1]-xs[i]) * 1LL * (ys[j+1]-ys[j]);
		}
		//printf("\n");
	}
	printf("%I64d\n", ans);
	return 0;
}
