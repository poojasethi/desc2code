#include <iostream>
#include <cstdio>
#include <map>
#include <algorithm>
#include <vector>
using namespace std;
int di[]={0,1,0,-1};
int dj[]={1,0,-1,0};
char d[] ="RDLU";
int isz[4020],jsz[4020],r,c,g[4020][4020];
map<int,int>is,js;
vector <pair <pair<int,int> , pair<int,int> > >segs;
int compress( map<int,int>&m , int s[] )
{
    //to give every event a value
    int lst=m.begin()->first-1 ,nxt=1;
    for(map<int,int>::iterator it=m.begin();it!=m.end();it++)
    {
        int cur=it->first;
        if(lst+1!=cur)
        {
            s[nxt++]=cur-lst-1;
            //to leave spaces between cells
        }
        s[nxt]=1;
        it->second=nxt++;
        lst=cur;
    }
    return nxt+1;
}
void floyd(int i, int j)
{
   if(i<0 || i>=r ||j<0 || j>=c || g[i][j])
    return;
  g[i][j]=2;
  for(int x=0;x<4;x++)
    floyd(i+di[x],j+dj[x]);
}
int main()
{
    //freopen("r.txt","r",stdin);
    int i=0,j=0,n;
    scanf("%d",&n);
    while(n--)
    {
        char c;
        int s;
        scanf(" %c%d",&c,&s);
        int k=find(d,d+4,c)-d;//to find the direction
        int ii=i+s*di[k];
        int jj=j+s*dj[k];
        is[i],is[ii],js[j],js[jj];//add to the map with out a secound value
        segs.push_back( make_pair(make_pair(i,j),make_pair(ii,jj)));
        i=ii , j=jj;
    }
    //mark the vis places with ones on the compreesed grid
    r=compress(is,isz);
    c=compress(js,jsz);
    for(int k=0;k<segs.size();k++)
    {
        int si=is[segs[k].first.first];
        int sj=js[segs[k].first.second];
        int ei=is[segs[k].second.first];
        int ej=js[segs[k].second.second];
        for(int i=min(si,ei);i<=max(si,ei);i++)
            for(int j=min(sj,ej);j<=max(sj,ej);j++)
                g[i][j]=1;
    }
    floyd(0,0);
    long long int res=0;
    for(int i=0;i<r;i++)
        for(int j=0;j<c;j++)
           if(g[i][j]!=2)
               res+= 1ll*isz[i]*jsz[j];
   printf("%I64d",res);

    return 0;
}
