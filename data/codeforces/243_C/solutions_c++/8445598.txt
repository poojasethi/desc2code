#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
using namespace std;
typedef long long LL;
const int Maxn=1005,Maxp=3005;
int n,px[Maxn],py[Maxn],tx[Maxp],ty[Maxp],nx=0,ny=0;
int f[Maxp][Maxp];

inline int get() {
    char ch;
    while (!isdigit(ch=getchar()));
    int v=ch-48;
    while (isdigit(ch=getchar())) v=v*10+ch-48;
    return v;
}

void ins(int x,int y) {
    tx[++nx]=x-1; tx[++nx]=x; tx[++nx]=x+1;
    ty[++ny]=y-1; ty[++ny]=y; ty[++ny]=y+1;
}

void dfs(int x,int y) {
    if (x<1||x>nx||y<1||y>ny||f[x][y]) return;
    f[x][y]=1;
    dfs(x,y-1); dfs(x,y+1);
    dfs(x+1,y); dfs(x-1,y);
}

int main() {
    n=get();
    ins(0,0);
    for (int i=1,len;i<=n;i++) {
        char opx;
        while (!isalpha(opx=getchar()));
        len=get();
        px[i]=px[i-1]; py[i]=py[i-1];
        if (opx=='U') py[i]+=len;
        if (opx=='D') py[i]-=len;
        if (opx=='L') px[i]-=len;
        if (opx=='R') px[i]+=len;
        ins(px[i],py[i]);
    }
    sort(tx+1,tx+nx+1);
    nx=unique(tx+1,tx+nx+1)-tx-1;
    sort(ty+1,ty+ny+1);
    ny=unique(ty+1,ty+ny+1)-ty-1;
    px[0]=lower_bound(tx+1,tx+nx+1,px[0])-tx;
    py[0]=lower_bound(ty+1,ty+ny+1,py[0])-ty;
    for (int i=1;i<=n;i++) {
        px[i]=lower_bound(tx+1,tx+nx+1,px[i])-tx;
        py[i]=lower_bound(ty+1,ty+ny+1,py[i])-ty;
        int sx=px[i-1],tx=px[i],sy=py[i-1],ty=py[i];
        if (sx>tx) swap(sx,tx);
        if (sy>ty) swap(sy,ty);
        for (int x=sx;x<=tx;x++)
            for (int y=sy;y<=ty;y++)
                f[x][y]=2;
    }
    dfs(1,1);
    LL ans=0;
    for (int i=1;i<=nx;i++)
        for (int j=1;j<=ny;j++)
            if (f[i][j]!=1) ans+=(tx[i]-tx[i-1])*LL(ty[j]-ty[j-1]);
    cout<<ans<<endl;
    return 0;
}