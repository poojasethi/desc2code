#include<map>
#include<queue>
#include<stdio.h>
#include<string.h>
#include<algorithm>
#define N 3100
#define pr pair<int,int>
using namespace std;
typedef long long ll;
char str[5];
map<char,int>dx,dy;
void init()
{
	dx['L']=-1,dy['L']=0;
	dx['R']=1,dy['R']=0;
	dx['U']=0,dy['U']=1;
	dx['D']=0,dy['D']=-1;
}
queue<pr>q;
char op[N];
int len[N];
int disx[N],disy[N],lenx,leny;
bool mp[N][N],cov[N][N];
void Go(int x,int y)
{
	if(0<=x&&x<=lenx&&0<=y&&y<=leny&&!mp[x][y]&&!cov[x][y])
	{
		cov[x][y]=1;
		q.push(pr(x,y));
	}
}
int main()
{
	int n,i,j,k,x,y,tx,ty,sum;
	ll ans;
	scanf("%d",&n);
	init();
	disx[lenx=1]=0,disy[leny=1]=0;
	disx[++lenx]=-1,disy[++leny]=-1;
	disx[++lenx]=1,disy[++leny]=1;
	for(i=1,x=y=0;i<=n;i++)
	{
		scanf("%s%d",str,&len[i]);
		op[i]=str[0];
		x+=dx[op[i]]*len[i],y+=dy[op[i]]*len[i];
		disx[++lenx]=x,disy[++leny]=y;
		disx[++lenx]=x-1,disy[++leny]=y-1;
		disx[++lenx]=x+1,disy[++leny]=y+1;
	}
	sort(disx+1,disx+lenx+1);
	sort(disy+1,disy+leny+1);
	lenx=unique(disx+1,disx+lenx+1)-disx-1;
	leny=unique(disy+1,disy+leny+1)-disy-1;
	tx=lower_bound(disx+1,disx+lenx+1,0)-disx;
	ty=lower_bound(disy+1,disy+leny+1,0)-disy;
	for(i=1,x=y=0;i<=n;i++)
	{
		x+=dx[op[i]]*len[i],y+=dy[op[i]]*len[i];
		while(disx[tx]!=x||disy[ty]!=y)
		{
			mp[tx][ty]=1;
			tx+=dx[op[i]],ty+=dy[op[i]];
		}
	}
	mp[tx][ty]=1;
	for(i=1;i<lenx;i++)
	{
		q.push(pr(i,0));cov[i][0]=1;
		q.push(pr(i,leny));cov[i][leny]=1;
	}
	for(i=1;i<=leny;i++)
	{
		q.push(pr(0,i));cov[0][i]=1;
		q.push(pr(lenx,i));cov[lenx][i]=1;
	}
	q.push(pr(0,0));cov[0][0]=1;
	q.push(pr(lenx,leny));cov[lenx][leny]=1;
	while(!q.empty())
	{
		x=q.front().first,y=q.front().second;
		q.pop();
		tx=x+1,ty=y;
		Go(tx,ty);
		tx=x-1,ty=y;
		Go(tx,ty);
		tx=x,ty=y+1;
		Go(tx,ty);
		tx=x,ty=y-1;
		Go(tx,ty);
	}
	for(i=1,ans=0;i<=lenx;i++)
	{
		if(i!=1)
			ans+=(ll)sum*(disx[i]-disx[i-1]);
		for(j=1,sum=0;j<=leny;j++)
		{
			if(!cov[i][j])
			{
				sum+=disy[j]-disy[j-1];
			}
		}
	}
	printf("%I64d\n",ans);
	return 0;
}
