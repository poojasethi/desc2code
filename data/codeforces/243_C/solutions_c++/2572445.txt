#include<iostream>
#include<fstream>
#include<sstream>
#include<cstdio>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<cstring>
using namespace std;

#define FOR(I,A,B) for (int I=int(A);I<int(B);++I)
#define MEM(A,B) memset(A,B,sizeof(A));
#define CPY(A,B) memcpy(A,B,sizeof(B));
#define FIN(A) freopen(A, "r", stdin)
#define FOUT(A) freopen(A, "w", stdout)
typedef long long LL;
const int N(1010);
const int dir[4][2] = {0, 1, 1, 0, 0, -1, -1, 0};
int x, y, n;
int qx[4 * N * N], qy[4 * N * N];
map<int, int> xx, yy;
int ind_x[2 * N], ind_y[2 * N];
int inv[2 * N][2 * N];
struct TLine {
    int dx, dy;
    void get() {
	 string s;
	 int mov;
	 cin >> s >> mov;
	 if (s == "U") dy = mov;
	 if (s == "D") dy = -mov;
	 if (s == "R") dx = mov;
	 if (s == "L") dx = -mov;
	 x += dx; y += dy;
	 xx[x] = yy[y] = xx[x + 1] = yy[y + 1] = 0;
    }
    void cover() {
	 int x1 = xx[x], y1 = yy[y];
	 x += dx; y += dy;
	 int x2 = xx[x], y2 = yy[y];
	 if (x1 > x2) swap(x1, x2);
	 if (y1 > y2) swap(y1, y2);
	 FOR(a, x1, x2 + 1)
	    FOR(b, y1, y2 + 1)
	       inv[a][b] = -1;
    }
}l[N];
int main() {
    //FIN("in.txt");
    cin >> n;
    x = y = 0;
    xx[0] = yy[0] = xx[1] = yy[1] = 0;
    FOR(i, 0, n) 
       l[i].get();
    int tx = 0, ty = 0;
    for (map<int, int> :: iterator it = xx.begin(); it != xx.end(); ++it) ind_x[it->second = ++tx] = it->first;
    for (map<int, int> :: iterator it = yy.begin(); it != yy.end(); ++it) ind_y[it->second = ++ty] = it->first;
    x = y = 0; 
    FOR(i, 0, n)
       l[i].cover();
    ++tx; ++ty;
    int t = 1;
    qx[0] = qy[0] = 0;
    FOR(h, 0, t) {
       FOR(i, 0, 4) {
	  int a = qx[h] + dir[i][0], b = qy[h] + dir[i][1];
	  if (a == -1 || b == -1 || a > tx || b > ty || inv[a][b] != 0) continue;
	  qx[t] = a; qy[t] = b; inv[a][b] = 1;
	  ++t;
       }
    }
    LL ans = 0;
    FOR(i, 0, tx + 1)
       FOR(j, 0, ty + 1)
          if (inv[i][j] != 1) 
	      ans += (LL)(ind_x[i + 1] - ind_x[i]) * (ind_y[j + 1] - ind_y[j]);
    cout << ans << endl;
    return 0;
}
