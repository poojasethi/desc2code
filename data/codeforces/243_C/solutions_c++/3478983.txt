#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <algorithm>
#include <numeric>
using namespace std;
const int INF=0x3f3f3f3f;
char d[1000];
int xx[1000],X[2005],Y[2005],Nx,Ny;
int Map[2005][2005];
int mark(int x1,int x2,int y1,int y2){
    x1 = lower_bound(X,X+Nx,x1)-X;
    x2 = lower_bound(X,X+Nx,x2)-X;
    y1 = lower_bound(Y,Y+Ny,y1)-Y;
    y2 = lower_bound(Y,Y+Ny,y2)-Y;
    for(int i=x1;i<=x2;++i)
        for(int j=y1;j<=y2;++j)
            Map[i][j] = -1;
}
void dfs(int x,int y){
    if(x<0||y<0||x>=Nx||y>=Ny||Map[x][y])return;
    Map[x][y] = 1;
    dfs(x+1,y);dfs(x-1,y);dfs(x,y+1);dfs(x,y-1);
}
int main(){
    Y[Ny++]=X[Nx++]=-1000000005;
    Y[Ny++]=X[Nx++]=0;
    Y[Ny++]=X[Nx++]=1;
    Y[Ny++]=X[Nx++]=1000000005;
    int N,curx=0,cury=0;
    scanf("%d",&N);
    for(int i=0;i<N;++i){
        scanf(" %c %d",d+i,xx+i);
        switch(d[i]){
        case 'R':curx+=xx[i];break;
        case 'L':curx-=xx[i];break;
        case 'U':cury+=xx[i];break;
        case 'D':cury-=xx[i];break;
        }
        X[Nx++]=curx;X[Nx++]=curx+1;
        Y[Ny++]=cury;Y[Ny++]=cury+1;
    }
    sort(X,X+Nx);Nx=unique(X,X+Nx)-X;
    sort(Y,Y+Ny);Ny=unique(Y,Y+Ny)-Y;
    curx=cury=0;
    for(int i=0;i<N;++i){
        switch(d[i]){
        case 'R':mark(curx,curx+xx[i],cury,cury);curx+=xx[i];break;
        case 'L':mark(curx-xx[i],curx,cury,cury);curx-=xx[i];break;
        case 'U':mark(curx,curx,cury,cury+xx[i]);cury+=xx[i];break;
        case 'D':mark(curx,curx,cury-xx[i],cury);cury-=xx[i];break;
        }
    }
    dfs(0,0);
    long long sum = 0;
    for(int i=0;i<Nx;++i)
        for(int j=0;j<Ny;++j)
            if(Map[i][j]!=1)
                sum += (long long)(X[i+1]-X[i])*(Y[j+1]-Y[j]);
    cout<<sum<<endl;
    return 0;
}


