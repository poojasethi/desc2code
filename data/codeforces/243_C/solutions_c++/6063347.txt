#include <iostream>
#include <cstdio>
#include <cstring>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

typedef pair<int,int> p;
map<int,int>si,sj;
vector<pair<p,p> >segs;
int iD[3500],jD[3500],r,c,grid[3500][3500];
char d[]="UDLR";
int dr[]={-1,1,0,0};
int dc[]={0,0,-1,1};
void ff(int i,int j){
	if(i<0 || i==r || j<0 || j==c || grid[i][j])
		return;
	grid[i][j]=2;
	for(int k=0;k<4;k++)
		ff(i+dr[k],j+dc[k]);
}
int compressGrid(map<int,int>&m,int s[]){
	int last=m.begin()->first-1,next=1;
	for(map<int,int>::iterator it=m.begin();it!=m.end();it++){
		int cur=it->first;
		if(last!=cur-1)
			s[next++]=cur-last-1;
		s[next]=1;
		it->second=next++;
		last=cur;
	}
	return next+1;
}
int main(){
	int n,i=0,j=0,s;
	long long ans=0;
	char C;
	cin>>n;
	while(n--){
		cin>>C>>s;
		int k=find(d,d+4,C)-d;
		int ii=i+s*dr[k],jj=j+s*dc[k];
		si[i],si[ii],sj[j],sj[jj];
		segs.push_back(make_pair(make_pair(i,j),make_pair(ii,jj)));
		i=ii,j=jj;
	}
	r=compressGrid(si,iD);
	c=compressGrid(sj,jD);
	for(int k=0;k<segs.size();k++){
		//on grid
		int sr=si[segs[k].first.first];
		int sc=sj[segs[k].first.second];
		int er=si[segs[k].second.first];
		int ec=sj[segs[k].second.second];
		for(int a=min(sr,er);a<=max(sr,er);a++)
			for(int b=min(sc,ec);b<=max(sc,ec);b++)
				grid[a][b]=1;
	}
	ff(0,0);
	for(int a=0;a<r;a++)
		for(int b=0;b<c;b++)
			if(grid[a][b]!=2)
				ans+=iD[a]*1ll*jD[b];
	cout<<ans;
	return 0;
}
