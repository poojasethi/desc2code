def binarySearch(arr, elem):
	left = 0
	right = len(arr)-1
	while left<=right:
		mid = (left+right)/2
		if arr[mid] == elem:
			return mid+1
		elif mid!=len(arr)-1 and arr[mid]<elem<arr[mid+1]:
			return mid+1
		elif elem>arr[mid]:
			left = mid+1
		else:
			right = mid-1
	if left == 0:
		return 0
	else:
		return len(arr)

# arr = [3,4,8,12]
# res = binarySearch(arr,2)
# print res, len(arr)-res

import math
n = int(raw_input())
arr = [int(x) for x in raw_input().split()]
res = 0
dict_arr = {}
max_num = max(arr)
max_sum = 2*max_num
i = 1
power2 = []
while 2**i <= max_sum:
	power2.append(2**i)
	i+=1

# print power2

for i in range(len(arr)):
	num = arr[i]
	if num in dict_arr:
		dict_arr[num].append(i)
	else:
		dict_arr[num] = [i]

# print dict_arr

for i in range(len(arr)):
	num = arr[i]
	for power_2 in power2:
		if power_2-num in dict_arr:
			#Apply bianry search and find position
			bres = binarySearch(dict_arr[power_2-num],i)
			res+=len(dict_arr[power_2-num])-bres
print res