#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const int MAX = 6005;
vector<int> adj[MAX], ans;
int a[MAX], answer;
void dfs(int p, int v)
{
	int pos = lower_bound(ans.begin(), ans.end(), a[v]) - ans.begin();
	int tmp = -1;
	if (pos == ans.size())
		ans.push_back(a[v]);
	else
	{
		tmp = ans[pos];
		ans[pos] = a[v];
	}
	answer = max(answer, (int)ans.size());
	for (int i = 0; i < adj[v].size(); i++)
	{
		int u = adj[v][i];
		if (u != p)
			dfs(v, u);
	}
	if (tmp == -1)
		ans.pop_back();
	else
		ans[pos] = tmp;
}
int main()
{
	ios::sync_with_stdio(false);
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> a[i];
	for (int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		u--;
		v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	for (int i = 0; i < n; i++)
		dfs(-1, i);
	cout << answer << endl;
	return 0;
}
