#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 6010;

vector<int> lis;
int ans = 0;
int r[MAXN];
vector<int> edges[MAXN];

void dfs(int v, int fat)
{
	int pl = lower_bound(lis.begin(), lis.end(), r[v]) - lis.begin();
	int lst = -1;
	if (pl == lis.size())
		lis.push_back(r[v]);
	else
	{
		lst = lis[pl];
		lis[pl] = r[v];
	}
	ans = max(ans, (int)lis.size());
	for (int i = 0; i < edges[v].size(); i++)
		if (edges[v][i] != fat)
			dfs(edges[v][i], v);
	if (lst == -1)
		lis.pop_back();
	else
		lis[pl] = lst;
}

int main()
{	
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
		cin >> r[i];
	for (int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		u--, v--;
		edges[u].push_back(v);
		edges[v].push_back(u);
	}
	for (int i = 0; i < n; i++)
		dfs(i, -1);
	cout << ans << endl;
}
