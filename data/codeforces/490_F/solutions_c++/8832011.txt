#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int ans;
vector<int> res;
vector<int> g[6000+6];
int r[6000+6];
void dfs(int u,int p) {
	int id=lower_bound(res.begin(),res.end(),r[u])-res.begin();
	int flag=0;
	int last=-1;
	if(id==res.size()) res.push_back(r[u]);
	else {
		last=res[id];
		res[id]=r[u];
	}
	ans=max(ans,(int)res.size());
	for(int i=0;i<g[u].size();i++) {
		int v=g[u][i];
		if(v!=p) dfs(v,u);
	}
	if(last!=-1)
		res[id]=last;
	else res.pop_back();
}
int main() {
	ios::sync_with_stdio(0);
	int n;
	cin>>n;
	for(int i=1;i<=n;i++) cin>>r[i];
	int u,v;
	for(int i=0;i<n-1;i++) {
		cin>>u>>v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	for(int i=1;i<=n;i++) dfs(i,-1);
	cout<<ans<<endl;
	return 0;
}