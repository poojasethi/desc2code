#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int n, x, y, res = 0;
long r[6009];
vector<int> v[6009], c;

void dfs (int u, int p)
{
	res = max(res, (int)c.size());
	for (int i = 0; i < v[u].size(); i++)
	{
		int vv = v[u][i];
		if (vv == p) continue;
		int pos = lower_bound(c.begin(), c.end(), r[vv]) - c.begin();
		int tmp = 0;
		if (pos == c.size()) c.push_back(r[vv]);
		else
		{
			tmp = c[pos];
			c[pos] = r[vv];
		}
		dfs(vv,u);
		if (!tmp) c.pop_back();
		else c[pos] = tmp;
	}
}

int main ()
{
	cin >> n;
	for (int i = 1; i <= n; i++) cin >> r[i];
	for (int i = 0; i < n - 1; i++)
	{
		cin >> x >> y;
		v[x].push_back(y);
		v[y].push_back(x);
	}
	
	for (int i = 1; i <= n; i++)
	{
		c.clear();
		c.push_back(r[i]);
		dfs(i,i);
	}
	
	cout << res;

	return 0;
}

