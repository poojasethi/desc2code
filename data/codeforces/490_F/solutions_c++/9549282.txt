#include <algorithm>
#include <iostream>
using namespace std;

const int inf=1000000000;
const int N=100010;

int top,n,v[N],dp[N];
int g[N],to[N],fut[N],t,ans;


void m(int &x,int y) 
{
	if (y>x) 
		x=y;
}


void add(int x,int y) 
{
    to[++t]=y; 
	fut[t]=g[x]; 
	g[x]=t;
    to[++t]=x; 
	fut[t]=g[y]; 
	g[y]=t;
}
void dfs(int x,int fat) 
{
    int k,t=lower_bound(dp,dp+1+n,v[x])-dp,tmp=dp[t];
    m(ans,t+1); 
	dp[t]=v[x];
    for (k=g[x];k;k=fut[k])
	{ 
		if (to[k]!=fat) 
			dfs(to[k],x);
	}
    dp[t]=tmp;
}
int main() 
{
    int x,y;
    cin>>n;
    dp[0]=inf;
    
    for (int i=1;i<=n;i++) 
	{
        cin>>v[i];
        dp[i]=inf;
    }
    
    for (int i=1;i<n;i++) 
	{
        cin>>x>>y;
        add(x,y);
    }   
    
    
    for (int i=1;i<=n;i++) 
		dfs(i,0);
    cout<<ans;
    return 0;
}
