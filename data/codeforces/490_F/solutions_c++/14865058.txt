#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair < int, int > pii;

const ll linf = 1e18 + 9;
const int inf = 1e9 + 9;
const int N = 6e3 + 9;

int n, p[N], u, v, ans, cnt;

vector < int > gr[N], st(N, inf);

void dfs(int node, int from) {
	int ind = lower_bound(st.begin(), st.end(), p[node]) - st.begin();
	ans = max(ind + 1, ans);
	int last = st[ind];
	st[ind] = p[node];
	for (int i = 0; i < gr[node].size(); i++)
		if (gr[node][i] != from)
			dfs(gr[node][i], node);
	st[ind] = last;
}

int main() {

	cin >> n;

	for (int i = 1; i <= n; i++)
		cin >> p[i];

	for (int i = 1; i < n; i++) {
		cin >> u >> v;
		gr[u].push_back(v);
		gr[v].push_back(u);
	}

	for (int i = 1; i <= n; i++) {
		dfs(i, -1);
		fill(st.begin(), st.end(), inf);
	}

	cout << ans << endl;

	return 0;
}
