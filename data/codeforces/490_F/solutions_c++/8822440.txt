#include <cstdio>
#include <stack>
#include <vector>
#include <algorithm>
using namespace std;
vector<int> e[6010];
int r[6010];
int t[6010];
stack<int> pre[6010];
int ans;
int dfs(int v, int p = -1) {
	int x = lower_bound(t, t+6010, r[v]) - t;
	pre[x].push(t[x]);
	t[x] = r[v];
	ans = max(ans, x);
	for (int i = 0; i < e[v].size(); i++) {
		if (e[v][i] != p) {
			dfs(e[v][i], v);
		}
	}
	t[x] = pre[x].top();
	pre[x].pop();
}
int main() {
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		scanf("%d", &r[i]);
	}
	for (int i = 0; i < n-1; i++) {
		int a, b;
		scanf("%d%d", &a, &b);
		--a; --b;
		e[a].push_back(b);
		e[b].push_back(a);
	}
	for (int i = 0; i < 6010; i++) {
		t[i] = 1001001001;
	}
	for (int i = 0; i < n; i++) {
		dfs(i);
	}
	printf("%d\n", ans + 1);
	return 0;
}
