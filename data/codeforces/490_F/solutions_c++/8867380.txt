#include <bits/stdc++.h>

using namespace std;

int n, R[6000], D[6000];
int ans = 1;
vector <int> V[6000];

void dfs(int current, int parrent){
	int k = lower_bound(D, D+6000, R[current]) - D;
	ans = max(ans, k+1);

	int backup = D[k];
	D[k] = R[current];

	for(int i=0; i<V[current].size(); ++i){
		if(V[current][i] != parrent) dfs(V[current][i],current);
	}

	D[k] = backup;
}

int main(){
	for(int i=0; i<6000; ++i) D[i] = 10000000;
	cin >> n;
	for(int i=0; i<n; ++i) cin >> R[i];
	for(int i=0; i<n-1; ++i){
		int x, y;
		cin >> x >> y;
		x--;y--;
		V[x].push_back(y);
		V[y].push_back(x);
	}

	for(int i=0; i<n; ++i) dfs(i, -1);

	cout << ans << endl;
	return 0;
}
