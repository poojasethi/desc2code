#include<vector>
#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;
const int N = 6006;
const int INF = 0x3fffffff;

int n,r[N],dp[N];
vector<int> vec[N];

void Dfs(int u,int fa,int & ans)
{
    int pos=lower_bound(dp+1,dp+1+n,r[u]) - dp;
    int tmp=dp[pos];
    dp[pos]=r[u];
    ans=max(ans,pos);
    for(int k=0;k<vec[u].size();k++)
    {
        if(vec[u][k]==fa) continue;
        Dfs(vec[u][k],u,ans);
    }
    dp[pos]=tmp;
}
int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++) scanf("%d",r+i);
    for(int i=1,x,y;i<n;i++)
    {
        scanf("%d %d",&x,&y);
        vec[x].push_back(y);
        vec[y].push_back(x);
    }
    int ans=0;
    memset(dp,0x7f,sizeof(dp));
    for(int i=1;i<=n;i++) Dfs(i,0,ans);
    printf("%d\n",ans);
    return 0;
}