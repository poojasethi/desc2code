#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
using namespace std;

int ans;
vector <int> res;
vector <int> g[6000+5];
int val[6000+5];

void dfs(int u,int fa){
    int id = lower_bound(res.begin(),res.end(),val[u])-res.begin();
    int last = -1;

    if (id==res.size()) res.push_back(val[u]);
    else{
        last = res[id];
        res[id] = val[u];
    }
    ans = max(ans,(int)res.size());
    for (int i=0;i<g[u].size();i++)
    if (g[u][i]!=fa) dfs(g[u][i],u);

    if (last==-1) res.pop_back();
    else res[id] = last;
}

int main()
{
    int n;
    cin>>n;
    for (int i=1;i<=n;i++) cin>>val[i];
    int u,v;
    for (int i=1;i<n;i++){
        cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    ans = 0;
    for (int i=1;i<=n;i++) dfs(i,-1);
    cout<<ans<<endl;

    return 0;
}
