import sys
import math

DEBUG = False

########################################

def solve():
	''' Solution here '''

	a, v, l, d, w = map( float, fin.read().split() )

	acc_t = lambda v0, v: (v - v0) / a
	dec_t = lambda v0, v: (v0 - v) / a

	acc_d = lambda v0, v: v0 * acc_t(v0, v) + a * acc_t(v0, v) * acc_t(v0, v) / 2
	dec_d = lambda v0, v: v0 * dec_t(v0, v) - a * dec_t(v0, v) * dec_t(v0, v) / 2

	ans = float()

	# if we can't exceed limit before road sign => remove road sign
	limit_d = acc_d(0, w)
	if limit_d >= d:
		if acc_d(0, v) < l:
			ans = acc_t(0, v) + ( l - acc_d(0, v) ) / v
		else:
			ans = math.sqrt( 2 * l / a )
		quit( str( ans ) )

	# if we can't exceed limit at all => remove road sign
	if w >= v:
		w = 0
		d = 0

	# end of distance
	end_acc_d = acc_d(w, v)

	if end_acc_d <= l - d:
		ans = acc_t(w, v) + (l - d - end_acc_d) / v
	else:
		ans = ( (-1) * w + math.sqrt( w * w + 2 * a * (l - d) ) ) / a

	# if no road sign => quit
	if d == 0:
		quit( str( ans ) )

	l, r = 0.0, 1000000.0
	u = (l + r) / 2
	dist = acc_d(0, u) + dec_d(u, w)
	while abs( dist - d ) > 1e-7:
		if dist < d:
			l = u
		else:
			r = u
		u = (l + r) / 2
		dist = acc_d(0, u) + dec_d(u, w)

	if u <= v:
		ans += acc_t(0, u) + dec_t(u, w)
	else:
		ans += acc_t(0, v)
		ans += dec_t(v, w)
		ans += (d - acc_d(0, v) - dec_d(v, w)) / v

	quit( str( ans ) )

########################################

def init():
	global fin, fout
	if DEBUG:
		fin  = open('input.txt', 'r')
	else:
		fin  = sys.stdin
	fout = sys.stdout

def quit(message=None):
	global fin, fout
	if message is not None:
		fout.write(message)
	fin.close()
	fout.close()
	sys.exit(0)

if __name__ == '__main__':
	init()
	solve()
	quit()