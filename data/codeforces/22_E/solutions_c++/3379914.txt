#include <iostream>
#include <vector>

using namespace std;

typedef pair<int, int> ii;
const int LIM = 100010;

int used[LIM];
int to[LIM];
int indegree[LIM];

int dfs(int v) {
    while (!used[v]) {
        used[v] = 1;
        v = to[v];
    }
    return v;
}

int main() {
    int n;
    cin >> n;

    for (int i = 0; i < n; ++i) {
        cin >> to[i];
        to[i]--;
        indegree[to[i]]++;
    }

    vector<ii> r;
    for (int i = 0; i < n; ++i) {
        if (indegree[i] == 0) {
            r.push_back(ii(i, dfs(i)));
        }
    }
    bool have_chains = !r.empty();

    for (int i = 0; i < n; ++i) {
        if (!used[i]) {
            r.push_back(ii(i, i));
            dfs(i);
        }
    }

    // for (int i = 0; i < r.size(); ++i) {
    //     cout << r[i].first + 1 << ' ' << r[i].second + 1 << endl;
    // }

    if (r.size() == 1 && !have_chains) {
        cout << 0 << endl;
        return 0;
    }

    cout << r.size() << endl;
    for (int i = 0; i + 1 < r.size(); ++i) {
        cout << r[i].second + 1 << ' ' << r[i + 1].first + 1 << endl;
    }
    cout << r.back().second + 1 << ' ' << r.front().first + 1 << endl;


    return 0;
}
