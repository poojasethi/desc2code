#include <iostream>
using namespace std;
int son[100005],Ecnt,n,Head[100005],Refer[100005],IDx,Bl[100005],Pre[100005],In_Degree[100005],Size=0;
struct Edge
{
	int u,v;
	Edge(){};
	Edge(int x,int y):u(x),v(y){}
}Ans[500005];
bool Vst[100005];
void Dfs(int x)
{
	Vst[x]=true;
	if (Vst[Refer[x]])
	{
		if (Bl[Refer[x]]) Bl[x]=Bl[Refer[x]];
		else Bl[x]=++IDx,Pre[IDx]=Refer[x];
		Head[Bl[x]]=x;
		return;
	}
	Dfs(Refer[x]);
	Bl[x]=Bl[Refer[x]];
	Head[Bl[x]]=x;
}
int main()
{
	cin>>n;
	for (int i=1;i<=n;i++)
	{
		cin>>Refer[i];
		In_Degree[Refer[i]]++;
	}
	for (int i=1;i<=n;i++)
		if (!Vst[i]) Dfs(i);
	if (IDx-1)
	{
		for (int i=1;i<IDx;i++)
			Ans[++Size]=Edge(Pre[i],Head[i+1]),In_Degree[Head[i+1]]++;
		Ans[++Size]=Edge(Pre[IDx],Head[1]),In_Degree[Head[1]]++;
	}
	for (int i=1;i<=n;i++)
		if (!In_Degree[i]) Ans[++Size]=Edge(Pre[1],i);
	cout<<Size<<endl;
	for (int i=1;i<=Size;i++)
		cout<<Ans[i].u<<' '<<Ans[i].v<<endl;
	return 0;
}
