#! /usr/bin/env python

from sys import stdin
import math
INF=2**64

def dist(p1,p2):
	return math.hypot(p1[0]-p2[0],p1[1]-p2[1])

if __name__=='__main__':
	n,m,x=map(int,stdin.readline().split())
	grid=[stdin.readline().strip() for i in xrange(n)]
	#dist=[[INF for col in xrange(m)] for row in xrange(n)]

	shifts=[]
	seen=set()
	for r,row in enumerate(grid):
		for c,symbol in enumerate(row):
			if symbol=='S':
				shifts.append((r,c))
			else:
				seen.add(symbol)

	nearest_shift={}
	for r,row in enumerate(grid):
		for c,symbol in enumerate(row):
			if symbol!='S':
				min_dist=nearest_shift.get(symbol,INF)
				for shift in shifts:
					min_dist=min(min_dist,dist(shift,(r,c)))
				nearest_shift[symbol]=min_dist
	q=int(stdin.readline())
	T=stdin.readline().strip()
	answer=0
	for c in T:
		if c.lower() not in seen:
			#print c," not found"
			answer=-1
			break
		elif c.isupper():
			distance=nearest_shift.get(c.lower(),INF)
			if distance==INF:
				#print c," distance is inf"
				answer=-1
				break
			elif distance>x:
				answer+=1

	print answer


