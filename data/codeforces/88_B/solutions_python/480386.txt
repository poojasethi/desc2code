#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import sys
input = sys.stdin
output = sys.stdout

def square_euclid(x,y):
    return (x[0] - y[0])**2 + (x[1] - y[1])**2

def solve(size,lines,T,x):
    allkeys = ''.join(lines)
    symbols = set(list(allkeys))
    has_shift = 'S' in symbols

    text_symbols = set(list(T))
    text_symbols_lowercase = set(list(T.lower()))
    
    if not text_symbols_lowercase.issubset(symbols):
        return -1
    
    need_shift = False
    if text_symbols != text_symbols_lowercase:
        need_shift = True
        if not has_shift:
            return -1
    
#    print 'Need Shift:', need_shift
    # it is possible to type given text, counting pushes
    
    positions = {}
    for c in symbols:
        positions[c] = []
    
    n,m = size
    for i in range(len(lines)):#range(n):
        row = lines[i]
        for j in range(len(row)):#range(m):
            c = row[j]
            positions[c].append((i,j))
            
    min_d_to_shift = {}
    if need_shift:
        shift_positions = positions['S']
        normal_symbols = symbols - set('S')
        for c in normal_symbols:
            ps = positions[c]
            min_d = n*n + m*m + 1
            dds = [min_d]
            for p in ps:
                for sp in shift_positions:
                    dds.append(square_euclid(p, sp))
#                ds = [square_euclid(p, sp) for sp in shift_positions]
#                if ds:
#                    md = min(ds)
#                    if min_d > md:
#                        min_d = md
#            min_d_to_shift[c] = min_d
            min_d_to_shift[c] = min(dds)
    
#    print min_d_to_shift
    
    pushes = 0

    # text processing
    max_d_allowed = x*x
    if need_shift:
        for c in filter(lambda c: c.isupper(), T):
            c = c.lower()
            if min_d_to_shift[c] > max_d_allowed:
                pushes += 1

    return pushes


S = input.readline().split(' ')
n = int(S[0])
m = int(S[1])
x = int(S[2])
assert 1<=n and n<=30
assert 1<=m and m<=30
assert 1<=x and x<=50

lines = []
for r in range(n):
    line = input.readline().strip()
    lines.append(line)

q = int(input.readline())
assert 1<=q and q<=500000

T = input.readline().strip()
assert len(T) == q

min_pushes = solve((n,m),lines,T,x)

output.write('%s\n' % str(min_pushes))
