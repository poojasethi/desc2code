def check_key(keys, k):
    li = []
    for i in xrange(len(keys)):
        for j in xrange(len(keys[i])):
            if keys[i][j] == k:
                li.append((i, j))
    return li

def need_shift(lxy, li, x):
    #print "shift", li
    for l in li:
        for xy in lxy:
            d = (l[0]-xy[0]) ** 2 + (l[1]-xy[1]) ** 2
            #print '##', x, d
            if x ** 2 >= d:
                return False
    return True

def solve(n, m, x, keys, q, t):
    sum = 0
    li = []
    for i in xrange(len(keys)):
        for j in xrange(len(keys[i])):
            if keys[i][j] == 'S':
                li.append((i, j))
    h = {}
    for k in t:
        if h.get(k):
            h[k] += 1
        else:
            h[k] = 1
    for k, c in h.items():
        #print '###', k
        lxy = check_key(keys, k.lower())
        #print lxy
        if len(lxy) == 0:
            return -1
        if k.isupper():
            if len(li) == 0:
                return -1
            elif need_shift(lxy, li, x):
                #print '####', k
                sum += c
    return sum

#c = int(raw_input())
for i in xrange(1):
    n, m, x = map(int, raw_input().split())
    keys = []
    for j in xrange(n):
        keys.append(raw_input())
    q = raw_input()
    t = raw_input()
    r = solve(n, m, x, keys, q, t)
    print r
