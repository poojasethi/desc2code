#include <cmath>
#include <vector>
#include <cstdio>
#include <iostream>
#include <algorithm>
#define maxn 100005
#define All(u) V[u].begin(),V[u].end()
using namespace std;

struct point
{
	int x,y;
	point(int _x=0,int _y=0) {x=_x,y=_y;}
	friend point operator -(const point&A,const point&B) {return point(A.x-B.x,A.y-B.y);}
	friend double operator *(const point&A,const point&B) {return 1.0*A.x*B.y-1.0*A.y*B.x;}
} a[maxn];
struct st
{
	double k;
	int x,s;
	bool operator <(const st&B) const {return k-B.k<-1e-9;}
	st(double _k=0,int _x=0,int _s=0) {k=_k,x=_x,s=_s;}
};
int N,M,Q,q[maxn],c[maxn*2],head[maxn],lk[maxn*2],next[maxn*2],bg[maxn];
bool b[maxn];
vector<st> V[maxn];

void add(int u,int v,int t) {lk[t]=v,next[t]=head[u],head[u]=t;}

void read(int&x)
{
	char c,n=0;
	for (;!isdigit(c=getchar());) if (c=='-') n=1;
	for (x=0; isdigit(c); c=getchar()) (x*=10)+=c-48; 
	if (n) x=-x;
}

int dfs(int u)
{
	int s=0;
	b[u]=1;
	for (int i=head[u],v,f; v=lk[i],i; i=next[i]) if (!b[v]) f=dfs(v),s+=f,c[i]+=f,c[i^1]-=f;
	return s+1;
}

void init()
{
	read(N),read(M);
	for (int i=1,u,v,t=1; i<=M; i++) read(u),read(v),add(u,v,++t),add(v,u,++t);
	for (int i=1; i<=N; i++) read(a[i].x),read(a[i].y);
	int mi=1e9,p;
	for (int i=1; i<=N; i++) if (a[i].x<mi) mi=a[i].x,p=i;
	dfs(p);
	for (int u=1; u<=N; u++)
	{
		V[u].push_back(st(-1e9,0,0));
		for (int i=head[u],v; v=lk[i],i; i=next[i]) V[u].push_back(st(atan2(a[v].y-a[u].y,a[v].x-a[u].x),v,c[i])),bg[u]+=c[i];
		sort(All(u));
		for (int j=1; j<V[u].size(); j++) V[u][j].s+=V[u][j-1].s;
	}
}

void doit()
{
	read(Q);
	for (int i=1,res,s; i<=Q; i++)
	{
		read(s),res=s;
		for (int j=1; j<=s; j++) read(q[j]);
		double k=0; q[0]=q[s];
		for (int j=1; j<=s; j++) k+=a[q[j-1]]*a[q[j]];
		if (k<0) for (int j=1; j+j<=s; j++) swap(q[j],q[s-j+1]);
		q[0]=q[s],q[s+1]=q[1];
		for (int j=1; j<=s; j++)
		{
			vector<st>::iterator x,y;
			x=lower_bound(All(q[j]),st(atan2(a[q[j-1]].y-a[q[j]].y,a[q[j-1]].x-a[q[j]].x),0,0));
			y=lower_bound(All(q[j]),st(atan2(a[q[j+1]].y-a[q[j]].y,a[q[j+1]].x-a[q[j]].x),0,0));
			if (x>y) res+=x->s-(--y)->s; else res+=bg[q[j]]-(--y)->s+x->s;
		}
		printf("%d\n",res);
	}
}

int main()
{
	init();
	doit();
	return 0;
}