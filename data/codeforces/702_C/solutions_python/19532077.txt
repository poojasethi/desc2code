import math

quant_cities, quant_towers = [int(x) for x in raw_input().split()]

city_list = [int(x) for x in raw_input().split()]
tower_list = [int(x) for x in raw_input().split()]

max_min_dist = 0

def binary_search_lo(search, lo, hi):
  if hi == lo:
    if tower_list[lo] <= search:
      return search - tower_list[lo]
    else:
      return pow(10, 10) + 1
  mid = int(math.ceil((hi + lo) / 2.0))
  if search == tower_list[mid]:
    return 0
  elif search > tower_list[mid]:
    return binary_search_lo(search, mid, hi)
  else:
    return binary_search_lo(search, lo, mid - 1)

def binary_search_hi(search, lo, hi):
  if hi == lo:
    if tower_list[hi] >= search:
      return tower_list[hi] - search
    else:
      return pow(10, 10) + 1
  mid = (hi + lo) / 2
  if search == tower_list[mid]:
    return 0
  elif search < tower_list[mid]:
    return binary_search_hi(search, lo, mid)
  else:
    return binary_search_hi(search, mid + 1, hi)

for city in city_list:
  dist = min(binary_search_lo(city, 0, len(tower_list) - 1), binary_search_hi(city, 0, len(tower_list) - 1))
  max_min_dist = max(max_min_dist, dist)

print max_min_dist
