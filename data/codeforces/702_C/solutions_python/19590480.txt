import sys

def binary_search (city, towers):
	first = 0
	last = len(towers)-1
	min = sys.maxint
	while first<=last:
		midpoint = (first+last)//2
		if towers[midpoint]==city:
			return 0
		else:
			if city<towers[midpoint]:
				if abs(city-towers[midpoint]) < min:
					min = abs(city-towers[midpoint])
				last=midpoint-1
			else:
				if abs(city-towers[midpoint]) < min:
					min = abs(city-towers[midpoint])
				first=midpoint+1
	return min

file = sys.stdin
count = 0
max_curr = 0
cities = []
towers = []

for line in file:	
	if count==0:
		n, m = [int(i) for i in line.split()]
	elif count==1:
		for i in line.split():
			if len(cities)==0: 
				cities.append(int(i))
			elif cities[-1]!=int(i):
				cities.append(int(i))
	else:
		for i in line.split():
			if len(towers)==0:
				towers.append(int(i))
			elif towers[-1]!=int(i):
				towers.append(int(i))
	count+=1

for city in cities:
	curr = binary_search(city, towers)
	if curr>max_curr:
		max_curr = curr

print max_curr