//580E
#include <bits/stdc++.h>
using namespace std;

const int maxN=1e5+100;
const int base=1e9+13;
const long long maxlen=1e15;

typedef pair<int,long long> heap_;

struct heap_cmp{
	bool operator() (heap_ x,heap_ y) {
		return x.second>y.second;
	}
};

priority_queue<heap_,vector<heap_>,heap_cmp> heap;

struct kq_ {
	long long kc,sl,sl1;
} a[maxN],b[maxN];
int ca[maxN][3],n,m,s,t;
vector<int> ke[maxN],gt[maxN];

void distra(int s) {
	for(int i=0;i<=n;i++) {
		a[i].kc=maxlen;
		a[i].sl=0;
		a[i].sl1=0;
	}
	a[s].sl=1;
	a[s].sl1=1;
	a[s].kc=0;
	heap.push(make_pair(s,0));
	while (!heap.empty()) {
		int u=heap.top().first;
		long long d=heap.top().second;
		heap.pop();
		if (d!=a[u].kc) continue;
		for(int i=0;i<ke[u].size();i++) 
			if (gt[u][i]>0)
				if (a[u].kc+gt[u][i]<a[ke[u][i]].kc) {
					a[ke[u][i]].kc=a[u].kc+gt[u][i];
					a[ke[u][i]].sl=a[u].sl;
					a[ke[u][i]].sl1=a[u].sl1;
					heap.push(make_pair(ke[u][i],a[ke[u][i]].kc));
				} else if (a[u].kc+gt[u][i]==a[ke[u][i]].kc) {
					a[ke[u][i]].sl+=a[u].sl;
					a[ke[u][i]].sl1=(a[ke[u][i]].sl1+a[u].sl1)%base;
				}
	}
	//for(int i=1;i<=n;i++) printf("%i ",a[i].kc);
	//cout<<endl;
}

int main() {
	cin>>n>>m>>s>>t;
	for(int i=0;i<m;i++) {
		scanf("%i%i%i",&ca[i][0],&ca[i][1],&ca[i][2]);
		ke[ca[i][1]].push_back(ca[i][0]);
		ke[ca[i][0]].push_back(ca[i][1]);
		gt[ca[i][0]].push_back(ca[i][2]);
		gt[ca[i][1]].push_back(-ca[i][2]);
	}
	distra(s);
	for(int i=1;i<=n;i++) {
		b[i]=a[i];		
		for(int j=0;j<ke[i].size();j++) gt[i][j]=-gt[i][j];
	}
	distra(t);
	long long kc=b[t].kc;
	long long sl=b[t].sl;
	for(int i=0;i<m;i++) 
		if (b[ca[i][0]].kc+a[ca[i][1]].kc+ca[i][2]==kc) {
			if (b[ca[i][0]].sl*a[ca[i][1]].sl==sl && b[ca[i][0]].sl1*a[ca[i][1]].sl1%base==b[t].sl1%base) 
				printf("YES\n"); 
			else {
				long long delta=b[ca[i][0]].kc+a[ca[i][1]].kc+ca[i][2]-(kc-1);						
				if (delta<ca[i][2]) printf("CAN %I64d\n",delta); else printf("NO\n");				
			}
		} else {
			long long delta=b[ca[i][0]].kc+a[ca[i][1]].kc+ca[i][2]-(kc-1);					
			if (delta<ca[i][2]) printf("CAN %I64d\n",delta); else printf("NO\n");
		}
	return 0;
}