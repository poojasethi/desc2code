#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
typedef long long LL;
const int N = 110000;
const LL inf = (1ll<<60);
int n,m,s,t,tim,tot[2];
bool vis[N];
LL dis[N][2],ans[N],res;
int to[N][2],nex[N][2],head[N][2],val[N][2],sta[N];
int rtot=1,rto[N<<1],rnex[N<<1],rhead[N],dfn[N],low[N],ref[N<<1];

bool iscut[N];

deque<int> q;

struct Edge{
	int x,y,w;
}E[N];

void SE(int u,int v,int w,bool f){
	to[++tot[f]][f]=v;nex[tot[f]][f]=head[u][f];
	head[u][f]=tot[f];val[tot[f]][f]=w;
	return;
}

void RSE(int u,int v,int ff){
	rto[++rtot]=v;rnex[rtot]=rhead[u];rhead[u]=rtot;ref[rtot]=ff;
	rto[++rtot]=u;rnex[rtot]=rhead[v];rhead[v]=rtot;ref[rtot]=ff;
	return;
}

void SPFA(bool f){
	for(int i=1;i<=n;i++) dis[i][f]=inf;
	if(f==0) dis[s][f]=0,q.push_front(s),vis[s]=1;
	else dis[t][f]=0,q.push_front(t),vis[t]=1;
	int k;
	while(!q.empty()){
		k=q.front();q.pop_front();vis[k]=0;
		for(int p,i=head[k][f];i;i=nex[i][f]){
			p=to[i][f];
			if(dis[p][f]>dis[k][f]+val[i][f]){
				dis[p][f]=dis[k][f]+val[i][f];
				if(!vis[p]){
					vis[p]=1;
					if(q.empty()||dis[p][f]<dis[q.front()][f]) q.push_front(p);
					else q.push_back(p);
				}
			}
		}
	}
	return;
}

int Min(int x,int y){if(x>y) return y;return x;}

void DFS(int x,int pre){
	low[x]=dfn[x]=++tim;
	for(int p,i=rhead[x];i;i=rnex[i]){
		p=rto[i];
		if(pre!=-1&&((pre^i)==1)) continue;
		if(!dfn[p]) {
			DFS(p,i);
			low[x]=Min(low[x],low[p]);
			if(low[p]>dfn[x]) iscut[ref[i]]=1;
		}
		else low[x]=Min(low[x],dfn[p]);
	}
	return;
}

int main(){
	scanf("%d%d%d%d",&n,&m,&s,&t);
	
	for(int u,v,w,i=1;i<=m;i++){
		scanf("%d%d%d",&u,&v,&w);
		SE(u,v,w,0);
		SE(v,u,w,1);
		E[i].x=u,E[i].y=v,E[i].w=w;
	}
	
	SPFA(0),SPFA(1);
	res=dis[t][0];
	for(int x,y,w,i=1;i<=m;i++){
		x=E[i].x,y=E[i].y,w=E[i].w;
		if(dis[x][0]+dis[y][1]+1ll*w==res) RSE(x,y,i);
	}
	DFS(s,-1);
	
	for(int x,y,w,i=1;i<=m;i++){
		x=E[i].x,y=E[i].y,w=E[i].w;
		if(iscut[i]) sta[i]=1;
		else {
			if(dis[x][0]+dis[y][1]+1ll<res) sta[i]=2,ans[i]=dis[x][0]+dis[y][1]+w-res+1;
			else sta[i]=3;
		}
	}
	
	for(int i=1;i<=m;i++){
		if(sta[i]==3) printf("NO\n");
		if(sta[i]==1) printf("YES\n");
		if(sta[i]==2) printf("CAN %I64d\n",ans[i]);
	}
	
	return 0;
}
		 	  	   	 	 			 		 		 	  		 	