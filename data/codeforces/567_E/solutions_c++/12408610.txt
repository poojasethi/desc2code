#include <bits/stdc++.h>

using namespace std;

typedef pair<long long, long long> PII;

struct Edge
{
  int u, v, w;
  void Input() { cin >> u >> v >> w;}
  void AddToGraph(vector <PII> gp[]) { gp[u].push_back(make_pair(v, w)); }
  void AddToRGraph(vector <PII> gr[]) { gr[v].push_back(make_pair(u, w)); }
};

int n, m, s, t;
Edge a[100005];
long long w1[2][100005], w2[2][100005], d[2][100005];
vector <PII> gp[2][100005];
#define M0 100000007ll
#define M1 532142427ll

void Dijkstra(int u, long long D[], vector <PII> graph[], long long ways1[], long long ways2[])
{
  priority_queue <PII, vector <PII>, greater<PII> > q;
  q.push(make_pair(0, u));
  ways1[u] = ways2[u] = 1;
  D[u] = 0;
  while (!q.empty())
  {
    PII p = q.top();
    q.pop();
    u = p.second;
    if (p.first > D[u]) continue;
    for (int i = 0; i < graph[u].size(); ++i)
    {
      int v = graph[u][i].first, w = graph[u][i].second;
      if (D[v] == D[u] + w)
      {
        ways1[v] = (ways1[u] + ways1[v])%M0;
        ways2[v] = (ways2[u] + ways2[v])%M1;
      }
      else if (D[v] > D[u] + w)
      {
        D[v] = D[u] + w;
        q.push(make_pair(D[v], v));
        ways1[v] = ways1[u];
        ways2[v] = ways2[u];
      }
    }
  }
}

int main()
{
  #ifndef ONLINE_JUDGE
  freopen ("input", "r", stdin);
  freopen ("output", "w", stdout);
  #endif
  ios_base::sync_with_stdio(0);
  cin >> n >> m >> s >> t;
  for (int i = 1; i <= m; ++i)
  {
    a[i].Input();
    a[i].AddToGraph(gp[0]);
    a[i].AddToRGraph(gp[1]);
  }
  memset(d, 61, sizeof(d));
  #define MAXLENGTH d[0][0]
  #define MINPATH d[0][t]
  Dijkstra(s, d[0], gp[0], w1[0], w1[1]);
  Dijkstra(t, d[1], gp[1], w2[0], w2[1]);
  for (int i = 1; i <= m; ++i)
  {
    int u = a[i].u, v = a[i].v, w = a[i].w;
    long long Cur = d[0][u] + d[1][v] + w;
    if (Cur == MINPATH && w1[0][u]*w2[0][v]%M0 == w1[0][t] && w1[1][u]*w2[1][v]%M1 == w1[1][t])
      cout << "YES\n";
    else if (d[0][u] != MAXLENGTH && d[1][v] != MAXLENGTH && MINPATH - 1 > d[0][u] + d[1][v])
      cout << "CAN " << Cur - (MINPATH - 1) << endl;
    else cout << "NO\n";
  }
}
