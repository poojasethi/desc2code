#include <bits/stdc++.h>
using namespace std;
#define INF 1000000000000
#define ll long long
#define pii pair<int, int>
#define pli pair<long long, int>
#define FI "repair.i1"
#define FO "repair.o1"

const int MAXN = 100010, MOD = 999119999;

struct edge{
    int u, v, w;
    edge(){}
    edge(int x, int y, int z) : u(x), v(y), w(z) {}
};

edge E[MAXN];
list<pii> adj1[MAXN], adj2[MAXN];

ll Ds[MAXN], Dt[MAXN];
int Cs[MAXN], Ct[MAXN], N, M, s, t;

void dijkstra (int src , ll D[], int C[], list<pii> adj[]){
    set<pli> S;
    for(int i= 1; i <= N; i++) D[i] = INF;
    S.insert(pli(0, src));
    D[src] = 0, C[src] = 1;
    while (!S.empty()) {
        int u = S.begin()->second, d = S.begin()->first;
        S.erase(S.begin());
        for (list<pii>::iterator it = adj[u].begin(); it != adj[u].end(); it++){
            int v = it->first, w = it->second;
            if (D[v] > D[u] + w){
                S.erase(pii(D[v], v));
                D[v] = D[u] + w, C[v] = C[u];
                S.insert(pli(D[v], v));
            }
            else if (D[v] == D[u] + w)
                C[v] = (C[v] + C[u]) % MOD;
        }
    }
}

int main (){
    ios::sync_with_stdio(0), cin.tie(0);
    #ifndef ONLINE_JUDGE
    ifstream cin(FI);
    ofstream cout(FO);
    #endif // ONLINE_JUDGE
    cin >> N >> M >> s >> t;
    for (int u, v, w, i = 1; i <= M; ++i){
        cin >> u >> v >> w;
        E[i] = edge(u, v, w);
        adj1[u].push_back(pii(v, w));
        adj2[v].push_back(pii(u, w));
    }
    dijkstra(s, Ds, Cs, adj1);
    dijkstra(t, Dt, Ct, adj2);
    for (int i = 1; i <= M; ++i){
        int u = E[i].u, v = E[i].v, w = E[i].w;
        if (Ds[u] + Dt[v] + w == Ds[t] && (1LL * Cs[u] * Ct[v]) % MOD == Cs[t]) cout << "YES\n";
        else if (Ds[u] + Dt[v] + 1 < Ds[t]) cout << "CAN " << Ds[u] + Dt[v] + w + 1 - Ds[t] << "\n";
        else cout << "NO\n";
    }
    return 0;
}
