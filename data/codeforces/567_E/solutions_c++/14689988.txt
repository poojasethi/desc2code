#include <bits/stdc++.h>
//Practice makes perfect

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pii;


const ll MAXN = 2e5 + 100, MOD = 98765431LL;

vector<ll> G[MAXN];
ll s[MAXN], t[MAXN], w[MAXN];
ll n, m;
bool vis[MAXN];

inline ll other(ll id, ll u){
	return (s[id] == u ? t[id] : s[id]);
}

inline ll getdir(ll id, ll u){
	return (s[id] == u ? 1 : -1);
}

void dijk(ll root, ll dis[MAXN], ll cnt[MAXN], ll dir){
	fill(dis, dis + MAXN, -1LLu/8);
	memset(vis, 0, sizeof vis);

	set< pii > q;
	dis[root] = 0;
	cnt[root] = 1;
	q.insert( pii(dis[root], root) );

	while(q.size()){
		ll u = q.begin()->second; q.erase(q.begin());
		vis[u] = true;

		for (ll i = 0; i < G[u].size(); i++){
			ll e = G[u][i], v = other(e, u);
			if (getdir(e, u) == dir && !vis[v]){
				q.erase( pii(dis[v], v) );
				
				if (dis[v] == dis[u] + w[e]) cnt[v] += cnt[u], cnt[v] %= MOD;
				else if (dis[v] > dis[u] + w[e]) {
					cnt[v] = cnt[u];
					dis[v] = dis[u] + w[e];
				}

				q.insert( pii(dis[v], v) );
			}

		}
	}
}

ll xdis[MAXN], ydis[MAXN], xcnt[MAXN], ycnt[MAXN];

int main(){
	ios::sync_with_stdio( false );
	cout.tie(0); cin.tie(0);

	ll x, y;
	cin >> n >> m >> x >> y; x--; y--;
	for (ll i = 0; i < m; i++){
		cin >> s[i] >> t[i] >> w[i]; s[i]--; t[i]--;

		G[ s[i] ].push_back(i);
		G[ t[i] ].push_back(i);
	}

	dijk(x, xdis, xcnt, 1);
	dijk(y, ydis, ycnt,  -1);
	
	/*cerr << "\ndistance from source : \n";
	for (ll i = 0; i < n; i++)
		cout << xdis[i] << " ";
	cout << "\n\ndistance from destination : \n";
	for (ll i = 0; i < n; i++)
		cout << ydis[i] << " ";
	cout << "\n\n";*/

	for (ll i = 0; i < m; i++){
		ll u = s[i], v = t[i];

		if (xdis[u] + ydis[v] + w[i] == xdis[y] && (xcnt[u] * ycnt[v]) %MOD == xcnt[y]) cout << "YES\n";
		else if (xdis[u] + ydis[v] + w[i] == xdis[y] && w[i] != 1) cout << "CAN 1\n";
		else if (xdis[u] + ydis[v] < xdis[y] -1) cout << "CAN " << w[i] - (xdis[y] - (xdis[u] + ydis[v])) + 1 << "\n";
		else cout << "NO\n";
	}

}
