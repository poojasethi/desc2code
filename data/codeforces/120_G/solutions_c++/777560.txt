#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <algorithm>
using namespace std;

int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int n, _T;
	cin >> n >> _T;
	vector<int> a(2*n), b(2*n);
	vector< vector<string> > solved(n);


	for (int ii = 0; ii < n; ++ii)
		cin >> a[ii] >> b[ii] >> a[ii+n] >> b[ii+n];

	int m;
	cin >> m;

	vector< pair<string, int> > words(m);
	vector< vector<int> > d(n, vector<int>(m, 0));
	vector<int> c(m);

	for (int ii = 0; ii < m; ++ii)
		cin >> words[ii].first >> c[ii], words[ii].second = 0;

	int unsolved = m;
	int i = -1;
	int j = 0;
	while (unsolved)
	{
		++i;
		if (i == n*2)
			i = 0;
		int t = _T;
		while (t && unsolved)
		{
			while (words[j].second)
				j = (j + 1 == m ? 0 : j+1);
			int need = max(c[j] - a[i] - b[i>=n ? i%n : i+n] - d[i%n][j], 1);
			if (need <= t)
			{
				t -= need;
				unsolved--;
				solved[i%n].push_back(words[j].first);
				words[j].second = 1;
			}
			else
			{
				d[i%n][j] += t;
				t = 0;
			}
			j = (j + 1 == m ? 0 : j+1);
		}
	}

	for (int i = 0; i < n; ++i)
	{
		cout << solved[i].size() << ' ';
		for (size_t j = 0; j < solved[i].size(); ++j)
			cout << solved[i][j] << ' ';
		cout << endl;
	}

	return 0;
}