#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
using namespace std;
const int INF = 1000000000;
#define pb push_back
   

int a[105][2], b[105][2], d[105][105], p[105];
vector<string> phi[105];

struct point
{
	int x,y;
	point () {}
	point (int x, int y) : x(x), y(y) {}
};
  
int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	int n, t;
	cin >> n >> t;
	for (int i = 0; i < n; i++)	
		cin >> a[i][0] >> b[i][0] >> a[i][1] >> b[i][1];
		
	int m;
	cin >> m;
	vector<string> wrd(m);
	vector<int> c(m);
	for (int i = 0; i < m; i++)
		cin >> wrd[i] >> c[i];
		
	
	queue<int> q;
	for (int i = 0; i < m; i++)
		q.push(i);
	int team = 0;
	
	while (!q.empty())
	{
		
		int t0 = t;
		while (t0 > 0 && !q.empty())
		{
			int word = q.front();
			q.pop();
		//	cout << team << ' ' << p[team] << ' ' << wrd[word] << endl;
			int t1 = max(1, c[word] - (a[team][p[team]] + b[team][p[team]^1]) - d[team][word]);
		//	cout << t1 << endl;
			if (t0 - t1 >= 0)
			{
				t0 -= t1;
				phi[team].pb(wrd[word]);
			}
			else
			{
				d[team][word] += t0;
				q.push(word);
				t0 = 0;
			}
		}
		p[team] ^= 1;
		team = (team+1)%n;
	}
	
	for (int j = 0; j < n; j++)
	{
		cout << phi[j].size() << ' ';
		for (int i = 0; i < phi[j].size(); i++)
			cout << phi[j][i] << ' ';
		cout << endl;
	}
	
	return 0;
}
