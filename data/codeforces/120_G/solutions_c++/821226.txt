#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef pair<int, string> card;
int a[110][3], b[110][3], c[110], d[110][110];
vector<card> ans[110];

int main(int argc, const char** argv) {
  ifstream in("input.txt");
  ofstream out("output.txt");
  int n, t, i, j, m;
  in >> n >> t;
  
  REP(i, n)
    in >> a[i][0] >> a[i][1] >> b[i][0] >> b[i][1];

  in >> m;
  queue<card> q;
  REP(i, m) {
    card cd;
    in >> cd.second >> c[i];
    cd.first = i;
    q.push(cd);
  }

  for(int nt = 0, np = 0;!q.empty();++nt) {
    if (nt == n) {
      np = 1-np;
      nt = 0;
    }
    for(int e = t; !q.empty() && e > 0;){
      card cd = q.front(); q.pop();
      int f = max(1, c[cd.first] - (a[nt][np] + b[nt][1-np]) - d[nt][cd.first]);
      if (e >= f) {
        e -= f;
        ans[nt].push_back(cd);
      } else {
        d[nt][cd.first] += e;
        e = 0;
        q.push(cd);
      }
    }
  }

  REP(i, n) {
    out << ans[i].size();
    REP(j, ans[i].size())
      out << " " << ans[i][j].second;
    out << endl;
  }
}
