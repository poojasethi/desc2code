/* by Ashar Fuadi [fushar] */

#include <cstdio>
#include <cstring>

#include <vector>
#include <string>
#include <set>
#include <list>
#include <map>
#include <utility>
#include <queue>
#include <iostream>
#include <algorithm>

using namespace std;

#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define FOR(i, a, b) for (int i = (int)a; i <= (int)b; i++)
#define REPE(i,c) for (typeof((c).end()) i = (c).begin(); i != (c).end(); ++i)
#define RESET(c,v) memset(c, v, sizeof(c))

typedef long long ll;

#define pb push_back
#define mp make_pair

int N, T, M;
int A[100][2], B[100][2];
string card[100];
int C[100], D[100][100];
vector<int> guess[100];
int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	cin >> N >> T;
	REP(i, N) REP(j, 2)
		cin >> A[i][j] >> B[i][j];
	cin >> M;
	REP(i, M)
		cin >> card[i] >> C[i];
	queue<int> lho;
	REP(i, M)
		lho.push(i);
		
	int team = 0, player = 0;
	while (!lho.empty())
	{
		int wow = T;
		while (wow && !lho.empty())
		{
			int k = lho.front(); lho.pop();
			int t = max(1, C[k] - (A[team][player]+B[team][1-player]) - D[team][k]);
			if (t <= wow)
			{
				wow -= t;
				guess[team].pb(k);
			}
			else
			{
				lho.push(k);
				D[team][k] += wow;
				break;
			}
		}
		team++;
		if (team == N)
		{
			team = 0;
			player = 1-player;
		}
	}
	REP(i, N)
	{
		cout << guess[i].size();
		REP(j, guess[i].size())
			cout << " " << card[guess[i][j]];
		cout << endl;
	}
}
