#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <bitset>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li       	long long int
#define rep(i,to)	for(li i=0;i<((li)(to));++i)
#define pb       	push_back
#define sz(v)    	((li)(v).size())
#define bit(n)   	(1ll<<(li)(n))

ifstream ifs;
ofstream ofs;
void init(){
	ifs.open("input.txt");
	ofs.open("output.txt");
}



#define MAX 105
int main(){
	init();
	li n,m,t;
	string name[MAX];
	vector<string> ans[MAX];
	li base[MAX];
	li time[MAX];
	li a[2][MAX],b[2][MAX],used[MAX][MAX];
	ifs>>n>>t;
	rep(i,n) ifs>>a[0][i]>>b[0][i]>>a[1][i]>>b[1][i];
	queue<li> deck;
	ifs>>m;
	rep(i,m) ifs>>name[i]>>base[i];
	rep(i,n)rep(j,m) used[i][j]=0;
	rep(i,m) deck.push(i);
	rep(i,n) time[i]=t;
	li now=0,ind=0;
	while(sz(deck)){
		if(time[now]==0){
			time[now++]=t;
			if(now==n){
				now=0;
				ind=1-ind;
			}
		}
		li num=deck.front();
//cout<<now<<","<<ind<<":"<<time[now]<<"   "<<num<<":"<<used[now][num]<<endl;
		deck.pop();
		li need=max(1ll,base[num]-(a[ind][now]+b[1-ind][now])-used[now][num]);
		li use=min(need,time[now]);
		used[now][num]+=use;
		time[now]-=use;
		if(use==need) ans[now].pb(name[num]);
		else deck.push(num);
	}
	rep(i,n){ ofs<<sz(ans[i])<<" "; rep(j,sz(ans[i])) ofs<<ans[i][j]<<" "; ofs<<endl; }
}
