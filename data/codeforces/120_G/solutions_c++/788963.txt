#include <deque>
#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

const int MAXN = 128;
const int MAXL = 32;

struct card {
	char name[MAXL];
	int c;
	int idx;
};

int m, n;
deque <card> dq;
int a[MAXN][2], b[MAXN][2];
int d[MAXN][MAXN];
vector <card> res[MAXN];

inline void next(int &team, int &turn) {
	if (team == n - 1) team = 0, turn ^= 1;
	else ++team;
}

int main() {
	int i, j, k;
	int s, t;
	int team, turn;
	int q, c;
	int rem;
	int tot;
	card xx;
	
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);

	scanf("%d %d", &n, &t);
	for (i=0; i<n; ++i) for (j=0; j<2; ++j) scanf("%d %d", a[i]+j, b[i]+j);
	scanf("%d", &m);
	for (i=0; i<m; ++i) {
		scanf("%s %d", xx.name, &xx.c);
		xx.idx = i;
		dq.push_back(xx);
	}
	
	i = 0, j = 0;
	while (!dq.empty()) {
		tot = t;
		while (tot && !dq.empty()) {
			xx = dq.front();
			dq.pop_front();
			c = xx.c, q = j ^ 1, k = xx.idx;
			rem = max(1, c-(a[i][j]+b[i][q])-d[i][k]);
			
			if (tot >= rem) {
				res[i].push_back(xx);
				tot -= rem;
			} else {
				d[i][k] += tot;
				dq.push_back(xx);
				break;
			}
		}
		next(i, j);
	}
	
	for (i=0; i<n; ++i) {
		printf("%d ", res[i].size());
		for (j=0; j<res[i].size(); ++j) printf("%s%s", res[i][j].name, j==res[i].size()-1?"\n":" ");
	}

	return 0;
}
 					   		    				 	 			