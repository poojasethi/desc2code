/*
 *
 * File:   p331EscapingonBeaveractor.cpp
 * Author: Andy Y.F. Huang
 * Created on July 17, 2013, 12:55 PM
 */

#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

#ifdef AZN
#include "Azn.cpp"
#define LLD "%lld"
#else
#define LLD "%I64d"
#endif

using namespace std;

namespace p331EscapingonBeaveractor {
#define INF 0x3F3F3F3F
const int dy[] = {1, 0, -1, 0};
const int dx[] = {0, 1, 0, -1};
const char* DIRS = "URDL";
int dir[33][33];
int dist[33][33][4];
int N, B;

int oob(int x, int y) {
  return x < 0 || x > B || y < 0 || y > B;
}

int mark(int sx, int sy, int d, int steps) {
  while (steps--) {
    dir[sx][sy] = d;
    sx += dx[d];
    sy += dy[d];
  }
}

void solve(int test_num) {
  memset(dir, -1, sizeof (dir));
  scanf("%d %d", &N, &B);
  for (int i = 0, x1, y1, x2, y2; i < N; i++) {
    scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
    if (x1 == x2) {//vertical
      if (y1 > y2)
        mark(x1, y1, 2, y1 - y2 + 1);
      else
        mark(x1, y1, 0, y2 - y1 + 1);
    }
    else {
      if (x1 > x2)
        mark(x1, y1, 3, x1 - x2 + 1);
      else
        mark(x1, y1, 1, x2 - x1 + 1);
    }
  }
  //plnarr(dir, B + 1, B + 1);
  int Q;
  scanf("%d", &Q);
  for (int q = 0; q < Q; q++) {
    int x, y, last;
    char type;
    long long dur;
    memset(dist, 0x3F, sizeof (dist));
    scanf("%d %d %c", &x, &y, &type);
    scanf(LLD, &dur);
    last = strchr(DIRS, type) - DIRS;
    int cdist = 0;
    while (dur > 0) {
      if (cdist > dist[x][y][last]) {
        //cycle
        dur %= (cdist - dist[x][y][last]);
        cdist = -INF;
      }
      if (dur == 0) break;
      dist[x][y][last] = min(dist[x][y][last], cdist);
      if (~dir[x][y])
        last = dir[x][y];
      if (oob(x + dx[last], y + dy[last]))
        break;
      x += dx[last];
      y += dy[last];
      cdist++;
      dur--;
    }
    printf("%d %d\n", x, y);
  }
}

void solve() {
  #ifdef AZN
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  freopen("azn.txt", "w", stderr);
  #endif
  solve(1);
}
}

int main() {
  p331EscapingonBeaveractor::solve();
  return 0;
}

