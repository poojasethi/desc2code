//
// d.cpp -- D
//
// Siwakorn Sriakaokul - ping128
// Written on Wednesday, 17 July 2013.
//

#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <algorithm>
#include <map>
#include <ctype.h>
#include <string.h>

#define MAXN 35

using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef pair<PII, int> PII2;

int forcedDir[MAXN][MAXN];
int n, B;
int dx[] = {0, 0, 1, -1}, dy[] = {1, -1, 0, 0};

int visit[MAXN][MAXN][4];

int main(){
    scanf("%d %d", &n, &B);
    for(int i = 0; i <= B; i++ )
        for(int j = 0; j <= B; j++ )
            forcedDir[i][j] = -1; // no force

    for(int i = 0; i < n; i++ ){
        int x1, y1, x2, y2;
        scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
        if(x1 == x2){
            if(y2 > y1)
                for(int j = y1; j <= y2; j++ ) forcedDir[x1][j] = 0;
            else
                for(int j = y2; j <= y1; j++ ) forcedDir[x1][j] = 1;
        } else {
            if(x2 > x1)
                for(int j = x1; j <= x2; j++ ) forcedDir[j][y1] = 2;
            else
                for(int j = x2; j <= x1; j++ ) forcedDir[j][y1] = 3;
        }
    }

/*
    for(int i = 0; i <= B; i++ ){
        for(int j = 0; j <= B; j++ ) printf("%d ", forcedDir[i][j]);
        printf("\n");
    }
*/
    int Q, x, y, d;
    LL tt;
    char dir;
    scanf("%d", &Q);
    for(int q = 0; q < Q; q++ ){
        cin >> x >> y >> dir >> tt;
        int d;
        switch(dir){
            case 'R': d = 2; break;
            case 'L': d = 3; break;
            case 'D': d = 1; break;
            case 'U': d = 0; break;
            default: break;
        }

        for(int i = 0; i <= B; i++ )
            for(int j = 0; j <= B; j++ )
                for(int k = 0; k < 4; k++ )
                    visit[i][j][k] = -1;

        LL cur_t = 0;
        bool repeat = false;
        if(cur_t == tt){
            printf("%d %d\n", x, y);
        } else {
            while(true){
                visit[x][y][d] = cur_t;
                cur_t++;
                if(forcedDir[x][y] != -1) d = forcedDir[x][y];
                int ii = x + dx[d];
                int jj = y + dy[d];
                if(ii < 0 || ii > B || jj < 0 || jj > B){
                    printf("%d %d\n", x, y);
                    break;
                }

                if(visit[ii][jj][d] != -1 && !repeat){
                    cur_t += (tt - cur_t) / (cur_t - visit[ii][jj][d]) * (cur_t - visit[ii][jj][d]);
                    repeat = true;
		}
                x = ii;
                y = jj;
                if(cur_t == tt){
                    printf("%d %d\n", x, y);
                    break;
                }
            }
	}
    }

    return 0;
}
