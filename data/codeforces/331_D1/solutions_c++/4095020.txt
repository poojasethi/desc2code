#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <map>
#include <algorithm>
#include <iomanip>
#include <complex>
#include <valarray>
#include <tr1/unordered_map>
#include <tr1/unordered_set>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>

using namespace std;
using namespace std::tr1;

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
#define foreach(v,c) for(typeof((c).begin()) v=(c).begin(); v!=(c).end();++v)
#define rep(i,s,e) for (int i=(s);i<(e);++i)
#define pb push_back
#define mk make_pair
#define X first
#define Y second
#define all(x) (x).begin(),(x).end()
#define clr(x,y) memset(x,y,sizeof x)
#define contains(x,y) (x).find(y)!=(x).end()
//#define endl "\n"

int dx[]={ 0, 0, 1, -1, 1,-1,1,-1};
int dy[]={-1, 1, 0,  0, 1,-1,-1,1};
const int mod = 1e9+7;

const int maxn=100;
int n,b;
int dir[maxn][maxn];
ll ttime[maxn][maxn][4];

pii solve2(int x, int y, int d, ll ti) {
  for(ll t = 0; ; ++t) {
    //cout<<"t="<<t<<" x="<<x<<" y="<<y<<endl;
    if (dir[x][y]!=-1)
      d=dir[x][y];
    if (t==ti)
      return mk(x,y);
    int newx=x+dx[d], newy=y+dy[d];
    //cout<<"newx="<<newx <<" newy="<<newy<<endl;
    if (newx<0||newx>b||newy<0||newy>b)
      return mk(x,y);
    x=newx,y=newy;
  }
}
pii solve1(int x, int y, int d, ll ti) {
  memset(ttime,-1,sizeof ttime);
  for(ll t = 0; ; ++t) {
    //cout<<"t="<<t<<" d="<<d<<endl;
    if (dir[x][y]!=-1)
      d=dir[x][y];
    if (ttime[x][y][d]!=-1) {
      ll loop = t - ttime[x][y][d];
      return solve2(x,y,d,(ti-t)%loop);
    }else ttime[x][y][d]=t;
    if (t==ti) {
      return mk(x,y);
    }
    int newx=x+dx[d], newy=y+dy[d];
    //cout<<"newx="<<newx <<" newy="<<newy<<endl;
    if (newx<0||newx>b||newy<0||newy>b)
      return mk(x,y);
    x=newx,y=newy;
  }
  return mk(x,y);
}

int main() {
#ifndef LOCAL
  //freopen("x.in", "r", stdin);
  //freopen("x.out", "w", stdout);
#endif
  ios::sync_with_stdio(0);
  cout << fixed << setprecision(16);
  cin >> n >> b;
  memset(dir,-1,sizeof dir);
  rep(i,0,n) {
    int x0,y0,x1,y1;
    cin>>x0>>y0>>x1>>y1;
    //cout<<x0<<" "<<y0<<" "<<x1<<" "<<y1<<endl;
    int d;
    if (x0==x1) d=y0<y1;
    else d=(x1<x0) + 2;
    if(x0>x1)swap(x0,x1);
    if(y0>y1)swap(y0,y1);
    //cout<<"d="<<d<<endl;
    for(int x=x0;x<=x1;++x)
      for(int y=y0;y<=y1;++y)
        dir[x][y]=d;
  }
  //for(int i=b;i>=0;--i) {
    //rep(j,0,b+1)
      //cout<<dir[j][i]<<" ";cout<<endl;
  //}
  int q;cin>>q;
  rep(i,0,q) {
    char w;
    int x,y;ll ti;cin>>x>>y>>w>>ti;
    int d;
    if (w=='L')d=3;
    else if (w=='R')d=2;
    else if (w=='U')d=1;
    else d=0;
    pii res=solve1(x,y,d,ti);
    cout << res.first << " " << res.second << endl;
  }
}
