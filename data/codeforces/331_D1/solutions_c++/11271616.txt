#include <iostream>
#include <algorithm>
#include <cstring>
using namespace std;

int was[35][35][4][4];
int vect[35][4], n, b, q;

int main() {
    cin >> n >> b;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < 4; j++)
            cin >> vect[i][j];
    cin >> q;
    for(int i = 0; i < q; i++) {
        int x, y, dx, dy;
        char c;
        long long rem_time;
        cin >> x >> y >> c >> rem_time;
        if(c == 'U') dx = 0, dy = 1;
        if(c == 'D') dx = 0, dy = -1;
        if(c == 'L') dx = -1, dy = 0;
        if(c == 'R') dx = 1, dy = 0;
        memset(was, 0, sizeof(was));
        int cnt = 1;
        was[x][y][dx + 1][dy + 1] = 1;
        while(rem_time > 0 and x >= 0 and x <= b and y >= 0 and y <= b) {
            for(int j = 0; j < n; j++) {
                if(vect[j][0] == vect[j][2] and x == vect[j][0] and y >= min(vect[j][1], vect[j][3]) and y <= max(vect[j][1], vect[j][3])) {
                    dx = 0;
                    dy = (vect[j][3] - vect[j][1]) / abs(vect[j][3] - vect[j][1]);
                }
                if(vect[j][1] == vect[j][3] and y == vect[j][1] and x >= min(vect[j][0], vect[j][2]) and x <= max(vect[j][0], vect[j][2])) {
                    dy = 0;
                    dx = (vect[j][2] - vect[j][0]) / abs(vect[j][2] - vect[j][0]);
                }
            }
            x += dx;
            y += dy;
            cnt++;
            rem_time--;
            if(rem_time and x >= 0 and y >= 0)
                if(was[x][y][dx + 1][dy + 1] != 0) {
                    int in_cycle = cnt - was[x][y][dx + 1][dy + 1];
                    rem_time %= in_cycle;
                } else 
                    was[x][y][dx + 1][dy + 1] = cnt;
        }
        if(x < 0 or y < 0 or x > b or y > b)
            x -= dx, y -= dy;
        cout << x << " " << y << "\n";
    }
    return 0;   
}
