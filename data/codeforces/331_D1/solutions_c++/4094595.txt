#include <bits/stdc++.h>

using namespace std;

int mat[110][110];
long long visit[110][110][5];

int xf, yf;
int b;

int my[] = {1, -1, 0, 0};
int mx[] = {0, 0, -1, 1};

bool fuera(int x, int y)
{
    if ( x < 0 || x > b )
        return true;
    if ( y < 0 || y > b )
        return true;
    return false;
}

void sim(int x, int y, int dir, long long pact, long long np, bool imp)
{
    if ( fuera(x, y) )
        return;
    xf = x;
    yf = y;
    if ( np == 0 )
        return;

    if ( visit[x][y][dir] != -1 && imp )
    {
        long long dif = pact - visit[x][y][dir];
        long long mod = np % dif;
        // cout << np << " mod " << dif << " = " << mod << endl;
        // cout << x << " " << y << " " << dir << " " << pact << " " << mod << "\n";
        sim(x, y, dir, pact, mod, false);
        return;
    }
    if ( mat[x][y] != -1 )
    {
        for ( int i = 0; i < 4; i ++ )
            visit[x][y][i] = pact;

        int dx = mx[mat[x][y]];
        int dy = my[mat[x][y]];
        sim( x + dx, y + dy, mat[x][y], pact + 1, np - 1, imp);
    }
    else
    {
        int dx = mx[dir];
        int dy = my[dir];
        sim( x + dx, y + dy, dir, pact + 1, np - 1, imp);
    }
}

map <char, int> direccion;

int main()
{
    ios::sync_with_stdio(false);

    // freopen ( "d.in", "r", stdin );
    // freopen ( "d.out", "w", stdout );


    int n, q;

    int x0, y0, x1, y1;

    cin >> n >> b;

    for ( int i = 0; i <= b; i ++ )
        for ( int j = 0; j <= b; j ++ )
            mat[i][j] = -1;

    for ( int i = 0; i < n; i ++ )
    {
        cin >> x0 >> y0 >> x1 >> y1;

        if ( x0 == x1 )
        {
            for ( int j = min(y0, y1); j <= max(y0, y1); j ++ )
                mat[x0][j] = ((y1 - y0) < 0)?1:0;
        }
        else
        {
            for ( int j = min(x0, x1); j <= max(x0, x1); j ++ )
                mat[j][y0] = ((x1 - x0) < 0)?2:3;
        }
    }

    cin >> q;

    int x, y;
    long long np;
    char dir;

    direccion['U'] = 0;
    direccion['D'] = 1;
    direccion['L'] = 2;
    direccion['R'] = 3;

    for ( int i = 0; i < q; i ++ )
    {
        cin >> x >> y;
        cin >> dir;
        cin >> np;

        for ( int j = 0; j <= b; j ++ )
            for ( int k = 0; k <= b; k ++ )
                for ( int l = 0; l < 4; l ++ )
                    visit[j][k][l] = -1;

        sim (x, y, direccion[dir], 0, np, true );

        cout << xf << " " << yf << "\n";
    }
}
