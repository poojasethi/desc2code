#include <iostream>
#include <cstring>
#include <cstdio>
#include <cassert>
using namespace std;
typedef long long ll;
const int Maxn = 33;
int dirx[] = {-1, 0, 1, 0};
int diry[] = {0, 1, 0, -1};
int dirBoard[Maxn][Maxn];
ll T[Maxn][Maxn][4];
int n, m;
bool valid(int x, int y)
{
	return x >= 0 && x <= n && y >= 0 && y <= n;
}
int getDir(char c)
{
	switch(c)
	{
		case 'L': return 0;
		case 'U': return 1;
		case 'R': return 2;
		case 'D':return 3;
	}
	
	assert(0);
}
int cnt;
void dfs(int x, int y, int d, ll t)
{
	if (dirBoard[x][y] != -1) d = dirBoard[x][y];
	cnt++;
	if (cnt >= 10000)
		return;
	if (T[x][y][d] != -1)
	{
		assert(T[x][y][d] > t);
		t %= (T[x][y][d] - t);
	}
	else T[x][y][d] = t;
	if (t == 0) 
	{
		printf("%d %d\n", x, y);
		return;
	}
	
	int x1 = x + dirx[d], y1 = y + diry[d];
	if (!valid(x1, y1))
		printf("%d %d\n", x, y);
	else dfs(x1, y1, d, t - 1);
}
int main()
{
	scanf("%d%d", &m, &n);
	memset(dirBoard, -1, sizeof(dirBoard));
	for (int i = 0; i < m; ++i)
	{
		int x0, x1, y0, y1;
		scanf("%d%d%d%d", &x0, &y0, &x1, &y1);
		if (x0 == x1)
		{
			if (y1 > y0)
				for (int i = y0; i <= y1; ++i)
					dirBoard[x0][i] = 1;
			else for (int i = y0; i >= y1; --i)
					dirBoard[x0][i] = 3;
		}
		else
		{
			if (x1 > x0) 
				for (int i = x0; i <= x1; ++i)
					dirBoard[i][y0] = 2;
			else for (int i = x0; i >= x1; --i)
					dirBoard[i][y0] = 0;
		}
	}
	int q;
	scanf("%d", &q);
	while (q--)
	{
		int x0, y0;
		ll t;
		char str[5];
		scanf("%d%d%s%I64d", &x0, &y0, str, &t);
		memset(T, -1, sizeof(T));
		cnt = 0;
		dfs(x0, y0, getDir(str[0]), t);
	}
	return 0;
}