#include <iostream>
#include <sstream>
#include <algorithm>
#include <bitset>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <functional>
#include <numeric>
#include <iomanip>
#include <utility>

using namespace std;

struct point
{
    int x,y;
};

int f[31][31][3][3],n,b;
long long tim;
point ph,s,vitri[10000],vec[10000][2],d[10000];

bool kiemtra(point u)
{
    if ((u.x<0)||(u.y<0)||(u.x>b)||(u.y>b)) return false;
    else return true;
}

void solve()
{
    int i,j;  bool check;  point v;
    memset(f,0,sizeof(f));  f[s.x][s.y][ph.x+1][ph.y+1]=1;  i=1;
    while (i<=tim)
        {
            check=true;
            for (j=1;  j<=n;  j++)
                if ((s.x>=vec[j][0].x)&&(s.x<=vec[j][1].x))
                    if ((s.y>=vec[j][0].y)&&(s.y<=vec[j][1].y))
                        {
                            v.x=s.x+d[j].x;  v.y=s.y+d[j].y;  check=false;  ph=d[j];  break;
                        }
            if (check) {  v.x=s.x+ph.x;  v.y=s.y+ph.y;  }
            if (kiemtra(v)) s=v; else break;
            if (f[s.x][s.y][ph.x+1][ph.y+1]==0) {  f[s.x][s.y][ph.x+1][ph.y+1]=i+1;  i++;  }
            else
                {
                    tim-=i;  tim=tim%(i+1-f[s.x][s.y][ph.x+1][ph.y+1]);  i=1;
                    memset(f,0,sizeof(f));  f[s.x][s.y][ph.x+1][ph.y+1]=1;
                }
        }
    printf("%d %d\n",s.x,s.y);
}

void init()
{
    int i,temp;
    for (i=1;  i<=n;  i++)
        {
            d[i].x=vec[i][1].x-vec[i][0].x;  d[i].y=vec[i][1].y-vec[i][0].y;
            if (d[i].x!=0) d[i].x/=abs(d[i].x);
            if (d[i].y!=0) d[i].y/=abs(d[i].y);
            if (vec[i][1].x<vec[i][0].x) {  temp=vec[i][1].x;  vec[i][1].x=vec[i][0].x;  vec[i][0].x=temp;  }
            if (vec[i][1].y<vec[i][0].y) {  temp=vec[i][1].y;  vec[i][1].y=vec[i][0].y;  vec[i][0].y=temp;  }
        }
}

int main()
{
  //  freopen("test.inp","r",stdin);
    cin >>n>>b;  int i;  char daucach,ch;  int query;
    for (i=1;  i<=n;  i++) { scanf("%d%d%d%d",&vec[i][0].x,&vec[i][0].y,&vec[i][1].x,&vec[i][1].y);  }
    cin >>query;  init();
    for (i=1;  i<=query;  i++)
        {
            scanf("%d%d%c%c",&s.x,&s.y,&daucach,&ch);  cin >>tim;  ph.x=0;  ph.y=0;
            if (ch=='L') ph.x--;
            else if (ch=='R') ph.x++;
            else if (ch=='U') ph.y++;
            else ph.y--;
            solve();
        }
    return 0;
}
