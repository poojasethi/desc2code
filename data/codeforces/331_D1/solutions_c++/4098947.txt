#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <complex>
#include <memory.h>

#define F first
#define S second

#define MX 50
#define MXP 50

#define OUT -2
#define RING -3

#define mp make_pair
#define pb push_back

using namespace std;

typedef pair<int, int> PII;
pair<PII, PII> ar[MX];

int n, b;
int arr[MXP][MXP];

char DIR[] = "URDL";

int dr[] = {0,1,0,-1};
int dc[] = {1,0,-1,0};

vector<PII>v[MXP][MXP][4];

int rlt[MX][MX][4];
int was[MX][MX][4];

int isout(int x, int y) {
	return x < 0 || y < 0 || x > b || y > b;
}

int rou[100000][3];

int sx, sy, sd;
int vis[MX][MX][4], T;

int start[MX][MX][4];
int ring[MX][MX][4];

char buf[MX];
int ok = 0;

int gogo(int x, int y, int d, int dp) {

	vis[x][y][d] = dp;

	int nd = arr[x][y];
	if (nd == -1) nd = d;
	else ok = 1;
	
	int xt = x + dr[nd];
	int yt = y + dc[nd];
	
	int r, c, i;

	rou[dp][0] = x;
	rou[dp][1] = y;

	if (isout(xt, yt)) {
		for (i = 0; i <= dp; i ++) {
			r = rou[i][0];
			c = rou[i][1];
			v[sx][sy][sd].pb(mp(r, c));
		}
		rlt[sx][sy][sd] = OUT;
	} else {
		if (vis[xt][yt][nd] >= 0) {

			start[sx][sy][sd] = vis[xt][yt][nd];
			ring[sx][sy][sd] = dp - start[sx][sy][sd] + 1;

			for (i = 0; i <= dp; i ++) {
				r = rou[i][0];
				c = rou[i][1];
				v[sx][sy][sd].pb(mp(r, c));				
			}
			rlt[sx][sy][sd] = RING;
			return 0;
		}
		gogo(xt, yt, nd, dp + 1);
	}
}

main() {
	
	
	int x, y, i, d, id;
	int dx, dy;
	long long lt, q;
	
	cin >> n >> b;
	
	for (i = 0; i < n; i ++)
		cin >> ar[i].F.F >> ar[i].F.S >> ar[i].S.F >> ar[i].S.S;
	
	memset(arr, -1, sizeof(arr));
	
	for (i = 0; i < n; i ++) {
		
		int x1 = ar[i].F.F;
		int y1 = ar[i].F.S;
		int x2 = ar[i].S.F;
		int y2 = ar[i].S.S;
		
		dx = x1 == x2 ? 0 : (x2 - x1) / abs(x2 - x1);
		dy = y1 == y2 ? 0 : (y2 - y1) / abs(y2 - y1);
		
		for (d = 0; d < 4; d ++) 
			if (dx == dr[d] && dy == dc[d]) break;
		
		for (x = x1, y = y1; ; x += dx, y += dy) {
			arr[x][y] = d;
			if (x == x2 && y == y2) break;
		}
	}
	for (cin >> q; q --; ) {
		
		cin >> x >> y >> buf >> lt;
		d = strchr(DIR, *buf) - DIR;
		
		sx = x, sy = y, sd = d, T ++;
		
		if (!was[x][y][d]) {
			was[x][y][d] = 1;
			memset(vis, -1, sizeof(vis));
			ok = 0; gogo(x, y, d, 0);
		}

		if (rlt[x][y][d] == OUT) {
			if (lt >= v[x][y][d].size()) id = v[x][y][d].size() - 1;
			else id = lt;
			printf("%d %d\n", v[x][y][d][id].F, v[x][y][d][id].S);
		} else {
			
			if (lt > start[x][y][d]) {
				lt -= start[x][y][d];
				lt %= ring[x][y][d];
				id = lt + start[x][y][d];
				printf("%d %d\n", v[x][y][d][id].F, v[x][y][d][id].S);
			} else {
				id = lt;
				printf("%d %d\n", v[x][y][d][id].F, v[x][y][d][id].S);
			}
		}
	}
}
