#include<stdio.h>
#include<string.h>
#include<math.h>
#include<iostream>
#include<algorithm>
#include<map>
#include<set>
#include<vector>
using namespace std;
typedef long long lld;
#define pb push_back
#define mp make_pair
#define X first
#define Y second
int d[40][40];
int ax[4]={-1,0,1,0};//L,D,R,U
int ay[4]={0,-1,0,1};
char str[110];
int get()
{
    scanf("%s",str);
//  printf("%c",str[0]);
    if(str[0] == 'L')
        return 0;
    if(str[0] == 'D')
        return 1;
    if(str[0] == 'R')
        return 2;
    if(str[0] == 'U')
        return 3;
}
int vis[40][40];
int m,n;
bool inside(int x,int y)
{
    if(x < 0 || x > n || y < 0 || y > n)
        return false;
    return true;
}
pair<int,int>at[100010];
int main()
{
    scanf("%d %d",&m,&n);
    memset(d,-1,sizeof(d));
    while(m--)
    {
        int x1,y1,x2,y2;
        scanf("%d %d %d %d",&x1,&y1,&x2,&y2);
        if(x1 == x2)
        {
            if(y1 < y2)
            {
                for(int i=y1;i<=y2;i++)
                    d[x1][i]=3;//U
            }
            else
            {
                for(int i=y2;i<=y1;i++)
                    d[x1][i]=1;//D
            }
        }
        else
        {
            if(x1 < x2)
            {
                for(int i=x1;i<=x2;i++)
                    d[i][y1]=2;//R
            }
            else
            {
                for(int i=x2;i<=x1;i++)
                    d[i][y1]=0;//L
            }
        }
    }
//  for(int i=0;i<=n;i++)
//  {
//      for(int j=0;j<=n;j++)
//          printf("%d ",d[i][j]);
//      printf("\n");
//  }
//  return 0;
    int Q;
    scanf("%d",&Q);
    while(Q--)
    {
        int x,y;
        scanf("%d %d",&x,&y);
        int flag=get();
        lld T;
        scanf("%I64d",&T);
        lld now=0;
        memset(vis,-1,sizeof(vis));
        if(d[x][y] != -1)
            vis[x][y]=0;
        at[0]=mp(x,y);
        while(now < T)
        {
            now++;
//          vis[x][y]=now-1;
            if(d[x][y] != -1)
                flag=d[x][y];
            int xx=x+ax[flag];
            int yy=y+ay[flag];
            if(!inside(xx,yy))
                break;
            if(vis[xx][yy] != -1)
            {
                lld t=vis[xx][yy];
                lld rrr=now-t;
                lld left=T-now;
                left%=rrr;
                left+=t;
                x=at[left].X;
                y=at[left].Y;
                break;
            }
            at[now]=mp(xx,yy);
            if(d[xx][yy] != -1)
                vis[xx][yy]=now;
            x=xx;
            y=yy;
        }
        printf("%d %d\n",x,y);
    }
    return 0;
}
/*
3 3
0 0 0 1
0 2 2 2
3 3 2 3
5
2 0 U 2
2 0 U 3
3 0 U 5
1 3 D 2
1 3 R 2
 */