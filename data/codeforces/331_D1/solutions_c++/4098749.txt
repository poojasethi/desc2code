#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define mp make_pair
#define y1 stupid_cmath
#define sz(a) (int)a.size()
#define all(a) a.begin(), a.end()
#define fill(a,x) memset(a,x,sizeof a)
#define foreach(i,a) for (typeof(a.begin()) i = a.begin(); i != a.end(); i++)

#ifdef linux
#define i64 "%lld"
#else
#define i64 "%I64d"
#endif

#ifdef LOCAL
#define dbg(...) fprintf(stderr,__VA_ARGS__)
#else
#define dbg(...)
#endif

typedef long long ll;
typedef pair<int,int> pii;

const int N = 1005;
const int inf = 1<<30;

const int dx[] = {0,0,-1,1};
const int dy[] = {1,-1,0,0};

bool was[N][N], leave[N][N][4];
int n,b,dd['Z'],vx[N][N],vy[N][N];
vector<pii> p[N][N][4];
pii last[N][N][4];

void dfs(int x, int y, int xx, int yy, vector<pii> &path, bool &leave, pii &last) {
	//printf("%d %d\n", x, y);
	if (x < 0 || x > b || y < 0 || y > b) {
		leave = 1;
		return;
	}

	if (was[x][y]) {
		last = mp(x, y);
		return;
	}
	was[x][y] = abs(vx[x][y]) + abs(vy[x][y]);

	path.pb(mp(x,y));

	if (vx[x][y] + vy[x][y]) {
		xx = vx[x][y];
		yy = vy[x][y];
	}

	dfs(x + xx, y + yy, xx, yy, path, leave, last);
}

void calc(const vector<pii> p, pii last, const bool left, ll t) {
	int sz = sz(p);

	if (t < sz) {
		printf("%d %d\n", p[t].first, p[t].second);
		return;
	}
	if (left) {
		printf("%d %d\n", p[sz-1].first, p[sz-1].second);
		return;
	}

	for (int i = 0; i < sz; i++)
		dbg("(%d,%d) -> ", p[i].first, p[i].second);
	dbg("(%d,%d)\n",last.first,last.second);

	dbg("sz=%d\n",sz);
	for (int i = 0; i < sz; i++)
		if (p[i] == last) {
			dbg("i=%d\n",i);
			dbg("t=%I64d\n",t);
			t -= i;
			dbg("t-i=%I64d\n",t);
			t %= sz-i;
			dbg("t%(sz-i)=%I64d\n",t);
			t += i;
			dbg("t+i=%I64d\n",t);
			break;
		}

	printf("%d %d\n", p[t].first, p[t].second);
}

int main()
{
	#ifdef LOCAL
	freopen("a.in", "r", stdin);
	freopen("a.out", "w", stdout);
	#endif

	scanf("%d %d", &n, &b);
	for (int i = 0; i < n; i++) {
		int x0, y0, x1, y1;
		scanf("%d %d %d %d", &x0, &y0, &x1, &y1);
		int len = abs(x1-x0) + abs(y1-y0);
		int xx = (x1-x0)/len;
		int yy = (y1-y0)/len;
		for (int k = 0; k <= len; k++) {
			vx[x0][y0] = xx;
			vy[x0][y0] = yy;
			x0 += xx;
			y0 += yy;
		}
	}

	for (int x = 0; x <= b; x++)
		for (int y = 0; y <= b; y++)
			for (int d = 0; d < 4; d++) {
				fill(was,0);
				dfs(x,y,dx[d],dy[d],p[x][y][d],leave[x][y][d],last[x][y][d]);
			}

	//foreach(i, p[0][0][2])
	//	printf("%d %d\n", i->first, i->second);

	dd['U'] = 0; dd['D'] = 1; dd['L'] = 2; dd['R'] = 3;

	int q;
	scanf("%d\n", &q);
	for (int i = 0; i < q; i++) {
		int x, y; char w; ll t;
		scanf("%d %d %c %I64d\n", &x, &y, &w, &t);
		int d = dd[w];
		calc(p[x][y][d], last[x][y][d], leave[x][y][d], t);
	}

	return 0;
}
