#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
#define fo(i,a,b) for(i=a;i<=b;++i)
using namespace std;
typedef long long LL;
const int mn=1050;
const double inf=1e60;
struct node{int x1,x2,y1,y2;}a[mn];
int n,m,A,B,i,j,k;
double st[mn],d[mn],c;
bool vis[mn];
LL sqr(LL x){return x*x;}
LL dis(node a,node b) 
{
    return (sqr(max(0,max(a.x1,b.x1)-min(a.x2,b.x2)))+sqr(max(0,max(a.y1,b.y1)-min(a.y2,b.y2))));
}
int main()
{
    scanf("%d%d",&A,&B);
    ++n;
    scanf("%d%d",&a[n].x1,&a[n].y1);
    a[n].x2=a[n].x1,a[n].y2=a[n].y1;
    ++n;
    scanf("%d%d",&a[n].x1,&a[n].y1);
    a[n].x2=a[n].x1,a[n].y2=a[n].y1;
    scanf("%d",&k);
    while(k--)
    {
        ++n;
        scanf("%d%d%d%d",&a[n].x1,&a[n].y1,&a[n].x2,&a[n].y2);
        if(a[n].x1>a[n].x2)swap(a[n].x1,a[n].x2);
        if(a[n].y1>a[n].y2)swap(a[n].y1,a[n].y2);
    }
    fill(d+1,d+1+n,inf);
    fill(st+1,st+1+n,inf);
    d[1]=st[1]=0;
    for(;;)
    {
        k=1;
        fo(i,2,n)if(!vis[i]&&(vis[k]||d[i]<d[k]))k=i;
        if(vis[k])break;
        vis[k]=1;
        fo(i,1,n)
        {
            if(dis(a[k],a[i])>sqr(A))continue;
            c=sqrt(dis(a[k],a[i]))+st[k]*(A+B);
            if(c<d[i])
                d[i]=c,st[i]=st[k]+1;
        }
    }
    if(d[2]==inf)printf("-1\n");
    else printf("%.3lf\n",d[2]);
    return 0;
}
