//By Lin
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#include<cmath>
#define sqr(x) ((x)*(x))
using namespace std; 

int     a,b,n,d[1005];
struct  Node{
    int x,y;
    void init(){ scanf("%d%d", &x ,&y); }
}A,B;
struct  Trench{
    Node g , h; 
}data[1005];
int dis( Node a , Node b ) {
    int ret = sqr(a.x-b.x) + sqr(a.y-b.y);
    return ret;
}
int dis( Node a , Trench b ) {
    if ( b.g.x == b.h.x ) {
        if ( b.g.y < a.y && b.h.y > a.y || b.g.y > a.y && b.h.y < a.y ) return sqr( b.g.x - a.x ); 
        return min( dis(a , b.g) , dis(a,b.h) );
    }
    else 
        if ( b.g.x < a.x && b.h.x > a.x || b.g.x > a.x && b.h.x < a.x ) return sqr( b.g.y - a.y ); 
        return min( dis(a , b.g) , dis(a,b.h) );
}
int dis(Trench a , Trench b ){
    int  ret = min( min( dis(a.g,b) , dis(a.h,b) ) , min( dis(b.g,a) , dis(b.h,a) ) );
    return ret; 
}

queue<int> que; 
int     main()
{
    scanf("%d%d" , &a , &b );
    A.init() , B.init();
    scanf("%d", &n );
    for (int i = 0; i<n; i++) data[i].g.init() , data[i].h.init();
    if ( dis( A , B ) <= sqr(a) ) {
        printf("%.5f\n" , sqrt(dis(A,B)*1.0) );
        return 0;
    }

    for (int i = 0; i<n; i++)
        if ( dis(A,data[i]) <= sqr(a) ) { que.push(i); d[i] = 1; }
    double out = 1e10;
    while ( !que.empty() ) {
        int i = que.front(); que.pop();
        if ( dis(B,data[i]) <= sqr(a) ) {
            double ans = dis(B,data[i]);
            ans = sqrt( ans );
            ans += d[i] * ( a+b );
            out = min( out , ans );
        }
        for (int j = 0; j<n; j++) 
            if ( d[j] == 0 && dis(data[i],data[j]) <= sqr(a) ) {
                que.push(j); 
                d[j] = d[i] + 1;
            }
    }
    if ( out == 1e10 ) printf("-1\n");
    else printf("%.5f\n" , out );
    return 0;
}