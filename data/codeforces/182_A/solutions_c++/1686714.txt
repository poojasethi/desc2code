#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <complex>
#include <queue>
#include <utility>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define mp make_pair
#define EPS (1e-10)
typedef long long Int;
typedef complex<double> P;
inline double sq(double a) { return a*a; }

int a, b;
int n;
P p1[1024], p2[1024];
int vis[1024];

double distanceSP(const P& s0, const P& s1, const P& p) {
    if (s0.real() <= p.real() && p.real() <= s1.real()) {
        return sq(p.imag()-s0.imag());
    }
    if (s0.imag() <= p.imag() && p.imag() <= s1.imag()) {
        return sq(p.real()-s0.real());
    }
    return min(norm(s0-p), norm(s1-p));
}

double distanceSS(const P& s0, const P& s1, const P& t0, const P& t1) {
    return min(min(distanceSP(s0, s1, t0), distanceSP(s0, s1, t1)),
               min(distanceSP(t0, t1, s0), distanceSP(t0, t1, s1)));
}

inline double dist(int i, int j) {
    return distanceSS(p1[i], p2[i], p1[j], p2[j]);
}

double solve() {
    priority_queue<pair<double, int> > q;
    q.push(mp(0.0, 0));
    vis[0] = 1;
    double ans = -1;
    while (!q.empty()) {
        const pair<double, int> vv(q.top());
        q.pop();
        const double t = -vv.first;
        const int at = vv.second;
        if (at == 1) return t;
        rep (i, n) if (vis[i] == 0 && dist(at, i) <= a*a) {
            if (i == 1) {
                const double nt = t+sqrt(dist(at, i));
                q.push(mp(-nt, i));
            }
            else {
                vis[i] = 1;
                q.push(mp(-t-a-b, i));
            }
        }
    }
    return ans;
}

int main() {
    scanf("%d%d", &a, &b);
    rep (i, 2) {
        int x, y;
        scanf("%d%d", &x, &y);
        p1[i] = p2[i] = P(x, y);
    }
    scanf("%d", &n);
    rep (i, n) {
        int x1, y1, x2, y2;
        scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
        if (x1 > x2) swap(x1, x2);
        if (y1 > y2) swap(y1, y2);
        p1[i+2] = P(x1, y1);
        p2[i+2] = P(x2, y2);
    }
    n += 2;
    const double ans = solve();
    if (ans < 0) printf("%d\n", -1);
    else printf("%.9f\n", ans);
    return 0;
}
