#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define LLD long long
#define N 1005
using namespace std;

struct vect{
	int x, y;
	vect(){}
	vect(int x, int y) : x(x), y(y){}
	vect operator + (vect const &T) const{return vect(x+T.x, y+T.y);}
	vect operator - (vect const &T) const{return vect(x-T.x, y-T.y);}
	int operator % (vect const &T) const{return x*T.x + y*T.y;}
	int operator ^ (vect const &T) const{return x*T.y - y*T.x;}
	double len(){return sqrt((x*x + y*y) * 1.);}
	int len2(){return x*x + y*y;}
	bool operator < (vect const &T) const{return x==T.x ? y<T.y : x<T.x;}
	int get(){return scanf("%d%d", &x, &y);}
};

int ta, tb, n, t, hd, tl, q[N], v[N], G[N][N];
double ret;
vect st, ed, pa[N], pb[N];

int sqr(int x){return x * x;}

int DPS(vect p, vect L1, vect L2){
	if ((L2-L1)%(p-L1) < 0 || (L1-L2)%(p-L2) < 0) return min((p-L1).len2(), (p-L2).len2());
	if (L1.x == L2.x) return sqr(L1.x - p.x);
	else return sqr(L1.y - p.y);
}

int DSS(vect a, vect b, vect c, vect d){
	return min(min(DPS(a, c, d), DPS(b, c, d)), min(DPS(c, a, b), DPS(d, a, b)));
}


int main(){
	scanf("%d%d", &ta, &tb);
	st.get();
	ed.get();
	
	scanf("%d", &n);
	FOR(i,0,n){
		pa[i].get(), pb[i].get();
		FOR(j,0,i)
		if (DSS(pa[i], pb[i], pa[j], pb[j]) <= ta * ta) G[i][j] = G[j][i] = 1;
//		printf("%d-%d = %d\n",i,j,DSS(pa[i], pb[i], pa[j], pb[j]));
	}
	
	if ((ed - st).len2() <= ta * ta){
		printf("%.9f\n", (ed - st).len());
		return 0;
	}
	
	CLR(v, -1);
	hd = 0, tl = -1;
	FOR(i,0,n){
		if (DPS(st, pa[i], pb[i]) <= ta * ta) v[i] = 1, q[++tl] = i;
	}
	
	while (tl >= hd){
		FOR(i,0,n)
		if (v[i] == -1 && G[q[hd]][i]) v[q[++tl]=i] = v[q[hd]] + 1;
		++hd;
	}
	
	ret = 1e20;
	FOR(i,0,n){
		t = DPS(ed, pa[i], pb[i]);
		if (t <= ta * ta && v[i] != -1){
			ret = min(ret, v[i] * (ta + tb) + sqrt(t));
		}
	}
	
	if (ret > 1e19) puts("-1");
	else printf("%.9f\n", ret);
	return 0;
}
