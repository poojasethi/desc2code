#include<cstdio>
#include<iostream>
#include<algorithm>
#include<vector>
#include<cmath>
using namespace std;
const double eps = 1e-8;
struct point{double x, y;};
double sqr (double x) {return x * x;}
double dis (point a, point b){return sqrt(sqr(a.x-b.x) + sqr(a.y-b.y));}
int dcmp (double x) {return x < -eps ? -1: x > eps;}
double cross (point a, point b, point c){return (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);}
double dot (point a, point b, point c){return (b.x-a.x)*(c.x-a.x) + (b.y-a.y)*(c.y-a.y);}
double PointToSeg (point a, point b, point p){ //点P到线段ab的最短距离
if (dcmp(dot(a, b, p)) <= 0) return dis (a, p);
if (dcmp(dot(b, a, p)) <= 0) return dis (b, p);
double h = cross(a, b, p) / dis (a, b);
return h > 0 ? h : -h; }
double SegToSeg(point a,point b,point c,point d){ //线段ab到线段cd的最短距离    
    return min(min(PointToSeg(a,b,c),PointToSeg(a,b,d)),
               min(PointToSeg(c,d,a),PointToSeg(c,d,b)));
}
int a,b,n;
point end,A[1009],B[1009];
vector<int> Adj[1009];
int d[1009];
int Q[1009],qs,qe;
int main()
{
    cin>>a>>b>>A[0].x>>A[0].y>>end.x>>end.y;
    B[0]=A[0];
    cin>>n; n++;    
    for(int i=1;i<n;i++)
        cin>>A[i].x>>A[i].y>>B[i].x>>B[i].y;
    for(int i=0;i<n;i++)
        for(int j=i+1;j<n;j++)
            if(dcmp(SegToSeg(A[i],B[i],A[j],B[j])-a)<=0)
                Adj[i].push_back(j),Adj[j].push_back(i);
    d[Q[qe++]=0]=1;
    while(qs!=qe){
        int p=Q[qs++],v;
        for(int i=0;i<Adj[p].size();i++)
            if(!d[v=Adj[p][i]]){
                d[v]=d[p]+1;
                Q[qe++]=v;
            }                
    }
    double ans=1000000000,t;
    for(int i=0;i<n;i++)
        if(d[i]&&dcmp((t=PointToSeg(A[i],B[i],end))-a)<=0)
            ans=min(ans,(d[i]-1)*(a+b)+t);
    if(dcmp(ans-1000000000)==0) cout<<-1<<endl;
    else cout<<ans<<endl;
}
