#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef long long int ll;

struct trinchera {
  ll x1,y1,x2,y2;
};

void arregla(trinchera &t)
{
  if (t.x1>t.x2 or (t.x1==t.x2 and t.y1>t.y2)) {
    swap(t.x1,t.x2);
    swap(t.y1,t.y2);
  }
}

ll cuad(ll x)
{
  return x*x;
}

ll distp(ll x1,ll y1,ll x2,ll y2)
{
  return cuad(x1-x2)+cuad(y1-y2);
}

void mejora(trinchera &t1,trinchera &t2,ll &d)
{
  if (t1.x1==t1.x2) {
    if (t2.y1>=t1.y1 and t2.y1<=t1.y2) d=min(d,cuad(t1.x1-t2.x1));
    if (t2.y2>=t1.y1 and t2.y2<=t1.y2) d=min(d,cuad(t1.x1-t2.x2));
  }
  if (t1.y1==t1.y2) {
    if (t2.x1>=t1.x1 and t2.x1<=t1.x2) d=min(d,cuad(t1.y1-t2.y1));
    if (t2.x2>=t1.x1 and t2.x2<=t1.x2) d=min(d,cuad(t1.y1-t2.y2));
  }
}

ll distcuad(trinchera &t1,trinchera &t2)
{
  ll d=min(min(distp(t1.x1,t1.y1,t2.x1,t2.y1),distp(t1.x1,t1.y1,t2.x2,t2.y2)),
	   min(distp(t1.x2,t1.y2,t2.x1,t2.y1),distp(t1.x2,t1.y2,t2.x2,t2.y2)));
  mejora(t1,t2,d);
  mejora(t2,t1,d);
  return d;
}

const int limite=1000000;

trinchera t[limite];

int main()
{
  cout.setf(ios::fixed);
  cout.precision(10);
  ll a,b;
  cin>>a>>b;
  cin>>t[0].x1>>t[0].y1;
  t[0].x2=t[0].x1;
  t[0].y2=t[0].y1;
  cin>>t[1].x1>>t[1].y1;
  t[1].x2=t[1].x1;
  t[1].y2=t[1].y1;
  int n;
  cin>>n;
  n+=2;
  for (int i=2;i<n;i++) {
    cin>>t[i].x1>>t[i].y1>>t[i].x2>>t[i].y2;
    arregla(t[i]);
  }
  vector<int> visto(n,0);
  visto[0]=1;
  vector<double> dist(n,1000000000000.0);
  vector<int> v;
  v.push_back(0);
  ll pasos=-1;
  while (int(v.size())>0 and not visto[1]) {
    pasos++;
    vector<int> nextv;
    for (int i=0;i<int(v.size());i++) {
      int u=v[i];
      for (int w=0;w<n;w++) {
	if (u!=w) {
	  ll dc=distcuad(t[u],t[w]);
	  if (dc<=a*a and sqrt(dc)+pasos*(a+b)<dist[w]) {
	    dist[w]=sqrt(dc)+pasos*(a+b);
	    if (not visto[w]) {
	      visto[w]=1;
	      nextv.push_back(w);
	    }
	  }
	}
      }
    }
    v=nextv;
  }
  if (not visto[1])
    cout<<-1<<endl;
  else
    cout<<dist[1]<<endl;
}
