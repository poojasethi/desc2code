#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <queue>
#include <cmath>

using namespace std;

const int MAXN = (int)1e3 + 10 ;
const int INFINITE = 0x3f3f3f3f ;

int ax[MAXN],bx[MAXN],ay[MAXN],by[MAXN] ;

int a,b;
int xx,yy;
int n ;

int d[MAXN][MAXN]  ;
double dis[MAXN] ;
int visit[MAXN] ;

int sqr(int x){
    return x*x;
}

int main(){
    scanf("%d%d",&a,&b) ;
    int cnt=0;
    scanf("%d%d",&xx,&yy) ;
    ax[cnt]=bx[cnt]=xx; ay[cnt]=by[cnt]=yy;
    cnt++;
    scanf("%d%d",&xx,&yy);
    ax[cnt]=bx[cnt]=xx; ay[cnt]=by[cnt]=yy;
    cnt++;
    scanf("%d",&n);
    for (int i=0;i<n;i++)
    {
        scanf("%d%d%d%d",&ax[cnt],&ay[cnt],&bx[cnt],&by[cnt]);
        if (ax[cnt]>bx[cnt]) swap(ax[cnt],bx[cnt]) ;
        if (ay[cnt]>by[cnt]) swap(ay[cnt],by[cnt]) ;
        cnt++;
    }
    n=cnt;
    for (int i=0;i<n;i++)
        for (int j=0;j<n;j++)
            d[i][j] = sqr(max(0,max(ax[i],ax[j]) - min(bx[i],bx[j]))) + sqr(max(0,max(ay[i],ay[j]) - min(by[i],by[j]))) ;
    for (int i=0;i<n;i++) dis[i]=double(INFINITE) ;
    priority_queue< pair<double,int> > q ; dis[0]=0;
    q.push(make_pair(0,0)) ;
    memset(visit,false,sizeof(visit)) ;
    while (!q.empty()){
        int u = q.top().second; q.pop();
        if (visit[u]) continue ;
        if (u==1){
            printf("%.12f\n",dis[u]);
            return 0;
        }
        visit[u] = true ;
        for (int v = 0 ; v < n ; v++){
            if (visit[v]) continue ;
            if (d[u][v]>a*a) continue ;
            if (v==1)
            {
                if (dis[u] + sqrt(d[u][v]) < dis[v])
                {
                    dis[v] = dis[u] + sqrt(d[u][v]) ;
                    q.push(make_pair(-dis[v],v)) ;
                }
            }else if (dis[u] + a + b < dis[v]){
                    dis[v] = dis[u] + a + b ;
                    q.push(make_pair(-dis[v],v)) ;
            }
        }
     }
     printf("-1\n");
     return 0 ;
}
