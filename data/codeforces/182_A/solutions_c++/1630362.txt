#include <iostream>
#include <cmath>
#include <climits>

using namespace std;

struct trench
{
    int x1, y1, x2, y2;
};

int dist(trench a, trench b) {
    int x, y;
    if (a.x2 < b.x1) {
        x = b.x1 - a.x2;
    } else if(b.x2 < a.x1) {
        x = a.x1 - b.x2;
    } else {
        x = 0;
    }
    if (a.y2 < b.y1) {
        y = b.y1 - a.y2;
    } else if(b.y2 < a.y1) {
        y = a.y1 - b.y2;
    } else {
        y = 0;
    }
    return x*x+y*y;
}

int main()
{
    trench t[1005];
    int a, b;
    cin >> a >> b;
    cin >> t[0].x1 >> t[0].y1;
    t[0].x2 = t[0].x1;
    t[0].y2 = t[0].y1;
    cin >> t[1].x1 >> t[1].y1;
    t[1].x2 = t[1].x1;
    t[1].y2 = t[1].y1;
    int n;
    cin >> n;
    for (int i = 2; i < n+2; ++i) {
        cin >> t[i].x1 >> t[i].y1 >> t[i].x2 >> t[i].y2;
        if (t[i].x1 > t[i].x2) swap(t[i].x1, t[i].x2);
        if (t[i].y1 > t[i].y2) swap(t[i].y1, t[i].y2);
    }
    int shortestround[1005];
    double shortesttime[1005];
    bool visited[1005];
    for (int i = 0; i < n+2; ++i) {
        visited[i] = false;
        shortestround[i] = INT_MAX;
        shortesttime[i] = 1e8;
    }
    shortestround[0] = 0;
    shortesttime[0] = 0;
    bool allvisited = false;
    while (!allvisited) {
        allvisited = true;
        int minv = INT_MAX;
        int mini;
        for (int i = 0; i < n+2; ++i) {
            if (!visited[i] && shortestround[i] < minv) {
                mini = i;
                minv = shortestround[i];
                allvisited = false;
            }
        }
        for (int i = 0; i < n+2; ++i) {
            int d;
            d = dist(t[i], t[mini]);
            if (d <= a*a) {
                shortestround[i] = min(shortestround[i], shortestround[mini]+1);
                shortesttime[i] = min(shortesttime[i], sqrt(d)+shortestround[mini]*(a+b)*1.0);
            }
        }
        visited[mini] = true;
    }
    if (shortesttime[1] < 1e7)
        cout << shortesttime[1] << endl;
    else
        cout << -1 << endl;
}