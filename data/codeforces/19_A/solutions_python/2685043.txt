#!/usr/bin/python
import re
from operator import attrgetter

scoreBoard = {}

class Score:
	def __init__(self, name):
		self.name = name
		self.points = 0
		self.goal = 0
		self.netGoal = 0

def addScore(a, b, aGoal, bGoal):
	assert(a in scoreBoard)
	assert(b in scoreBoard)

	scoreBoard[a].goal += aGoal
	scoreBoard[a].netGoal += aGoal - bGoal
	scoreBoard[b].goal += bGoal
	scoreBoard[b].netGoal += bGoal - aGoal
	if aGoal > bGoal:
		scoreBoard[a].points += 3
	elif aGoal == bGoal:
		scoreBoard[a].points += 1
		scoreBoard[b].points += 1
	else:
		scoreBoard[b].points += 3

pattern = re.compile("^([a-zA-Z]+)-([a-zA-Z]+) (\d+):(\d+)$")
n = int(raw_input())
for i in range(n):
	player = raw_input()
	scoreBoard[player] = Score(player)
for i in range(n*(n-1)/2):
	result = raw_input()
	matchobj = pattern.match(result)
	name1 = matchobj.group(1)
	name2 = matchobj.group(2)
	score1 = int(matchobj.group(3))
	score2 = int(matchobj.group(4))
	addScore(name1, name2, score1, score2)

players = scoreBoard.values()
players = sorted(players, key = attrgetter('points', 'netGoal', 'goal'), 
		reverse = True)
qualified = players[0:n/2]
qualified = sorted(qualified, key = attrgetter('name'))
for p in qualified:
	print p.name
