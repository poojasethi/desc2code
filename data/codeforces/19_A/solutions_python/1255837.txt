#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import sys
ifs = sys.stdin
ofs = sys.stdout

from operator import attrgetter
from functools import total_ordering

@total_ordering
class TeamResult:
    
    def __init__(self,name):
        self.name = name
        self.points = 0
        self.scored = 0
        self.missed = 0
        
    def update(self,scored,missed):
        self.scored += scored
        self.missed += missed
        if scored > missed:
            self.points += 3
        elif scored == missed:
            self.points += 1
 
    def __eq__(self, other):
        return self.to_tuple() == other.to_tuple()
    
    def __lt__(self, other):
        return self.to_tuple() < other.to_tuple()
        
        if self.points != other.points:
            return self.points < other.points
        
        self_d = self.scored - self.missed
        other_d = other.scored - other.missed
        if self_d != other_d:
            return self_d < other_d

        return self.scored < other.scored
    
    def to_tuple(self):
        return (self.points, self.scored-self.missed, self.scored)
    

def solve(teams,matches):
    
    for m in matches:
        tr1,tr2 = m
        name1,goals1 = tr1
        name2,goals2 = tr2
        teams[name1].update(goals1,goals2)
        teams[name2].update(goals2,goals1)
    
#    #T = [(name,tr) for name,tr in teams.iteritems()]
#    T = teams.items()
#    #T = teams.keys()
#    T = sorted(T, key=lambda t: t[1].to_tuple(), reverse=True)
    
    T = sorted(teams.values(), reverse=True)
    
    #T = sorted(T, key=attrgetter('points','difference','scored'), reverse=True)
    #print T

    n = len(T)
    T_names = [t.name for t in T[:(n/2)] ]
    return sorted(T_names)
    #return sorted(T_names, key=lambda s: (s.lower(),s))


def numbers_from_line(d=' '):
    return [int(s) for s in ifs.readline().strip().split(d) if len(s.strip())>0]


n = int(ifs.readline())

teams = {}
for _ in range(n):
    name = ifs.readline().strip()
    teams[name] = TeamResult(name)

matches = []
for _ in range(n*(n-1)/2):
    marks,goals = ifs.readline().strip().split(' ')
    t1,t2 = marks.split('-')
    g1,g2 = goals.split(':')
    matches.append( ((t1,int(g1)), (t2,int(g2))) )

winners = solve(teams,matches)

for name in winners:
    ofs.write('%s\n' % name)
