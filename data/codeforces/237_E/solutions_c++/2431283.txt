#include <cstdio>
#include <cstring>
#include <algorithm>
#define FOR(i,s,e) for (int i=(s); i<(e); i++)
#define FOE(i,s,e) for (int i=(s); i<=(e); i++)
#define FOD(i,s,e) for (int i=(s)-1; i>=(e); i--)
#define CLR(a,x) memset(a, x, sizeof(a))
#define EXP(i,l) for (int i=(l); i; i=qn[i])
#define N 500005
using namespace std;

int n, m, x, t, lim, S, T, ed, ok, len, ret;
int v[N], q[N], f[N], u[N], l[N], cnt[30];
int qn[N], qd[N], qc[N], ql[N];
char s[105];

void bd(int x, int y, int c, int d){
	qd[++ed] = y, qn[ed] = l[x], l[x] = ed;
	qc[ed] = c, ql[ed] = d;
	if (ed % 2 == 0) bd(y, x, 0, -d);
}

int SPFA(int S, int T){
	for (int i=0; i<t; i++) v[i] = (1<<30), u[i] = 0;
	v[S] = 0, q[0] = S;

	for (int i=0, j=0, s=1; s; i++){
		if (i == N) i = 0;
		u[q[i]] = 0;
		s--;
		for (int k=l[q[i]]; k; k=qn[k])
			if (qc[k] && v[q[i]] + ql[k] < v[qd[k]]){
				v[qd[k]] = v[q[i]] + ql[k];
				f[qd[k]] = k;
				if (!u[qd[k]]){
					if (++j == N) j = 0;
					s++;
					u[q[j]=qd[k]] = 1;
				}
			}
	}


	if (v[T] == (1<<30)) return 0;
	ret += v[T];
	for (int i=T; i!=S; i=qd[f[i]^1]) qc[f[i]]--, qc[f[i]^1]++;
	return 1;
}


int main(){
	S = 0, T = 1, ed = 1;
	scanf("%s", s);
	n = strlen(s);
	FOR(i,0,n) cnt[s[i]-'a']++;
	FOR(i,0,26) bd(S, i+2, cnt[i], 0);
	t = 28;

	scanf("%d", &m);
	FOR(i,0,m){
		scanf("%s%d", s, &lim);
		len = strlen(s);
		bd(t, T, lim, 0);
		x = t;
		++t;

		CLR(cnt, 0);
		FOR(j,0,len) cnt[s[j]-'a']++;
		FOR(j,0,26){
			bd(j+2, t, cnt[j], i + 1);
			bd(t, x, cnt[j], 0);
			++t;
		}
	}

	ok = 1;
	FOR(i,0,n) if (!SPFA(S, T)) ok = 0;
	printf("%d\n", ok ? ret : -1);
	return 0;
}
