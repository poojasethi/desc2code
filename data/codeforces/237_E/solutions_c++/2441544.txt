#include <iostream>
#include <string>
using namespace std;
int cap[300][300];
int cost[300][300];
int d[300],prev[300];
const int INF = 1e9;
int N;
void bellman(int source)
{
    for(int i=0;i<N;i++)
    {
        d[i]=INF;
        prev[i]=-1;
    }
    d[source]=0;
    for(int i=0;i<N;i++)
    {
        for(int u=0;u<N;u++)
        {
            for(int v=0;v<N;v++)
            {
                if(cap[u][v]>0&&d[v]>d[u]+cost[u][v])
                {
                    d[v]=d[u]+cost[u][v];
                    prev[v]=u;
                }
            }
        }
    }
}
int cst=0;
int flow(int source,int sink)
{
    int f=0;
    while(true)
    {
        bellman(source);
        if(prev[sink]==-1)  break;
        int v=sink;
        int mn=INF;
        while(prev[v]!=-1)
        {
            mn=min(mn,cap[prev[v]][v]);
            v=prev[v];
        }
        f+=mn;
        v=sink;
        while(prev[v]!=-1)
        {
            cap[prev[v]][v]-=mn;
            cap[v][prev[v]]+=mn;
            cst+=mn*cost[prev[v]][v];
            v=prev[v];
        }
    }
    return f;
}
int main()
{
    int n;
    string s;
    cin>>s>>n;
    for(int i=1;i<=n;i++)
    {
        int x;
        string buff;
        cin>>buff>>x;
        cap[0][i]=x;
        cost[0][i]=i;
        cost[i][0]=-i;
        for(int j=0;j<buff.size();j++)
        {
            cap[i][buff[j]-'a'+n+1]++;
        }
    }
    for(int i=0;i<s.size();i++)
        cap[n+s[i]-'a'+1][n+27]++;
    N=n+30;
    int f=flow(0,n+27);
    if(f!=s.size()) cout<<"-1"<<endl;
    else    cout<<cst<<endl;
    return 0;
}
