#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;

#define rep(i,n) for(int i=0; i<(n); i++)
#define sz(v) int(v.size())
typedef long long ll;

int cap[300][300];
int cost[300][300];
const int INF = 1e9;
int d[300], par[300];
int N;

void bellman(int source) {
	for(int i = 0; i < N; i++)
		d[i] = INF,
		par[i] = -1;
	d[source] = 0;
	for(int i = 0; i < N; i++)
		for(int v = 0; v < N; v++)
			for(int u = 0; u < N; u++)
			   if(cap[v][u] > 0 && d[u] > d[v]+cost[v][u])
			   {
				   d[u] = d[v]+cost[v][u];
				   par[u] = v;
			   }
}

int fl ;
int cst ;

int flow(int source, int sink) {
	fl = cst = 0;
	while(true) {
		bellman(source);
		if(par[sink] == -1) break;
		int v = sink;
		int mn = INF;
		while(par[v] != -1) {
			mn = min(mn, cap[par[v]][v]);
			v = par[v];
		}
		fl += mn;
		v = sink;
		while(par[v] != -1) {
			cap[par[v]][v]-=mn;
			cap[v][par[v]]+=mn;
			cst += mn*cost[par[v]][v];
			v = par[v];
		}
	}
	return fl;
}

int main()
{
	ios::sync_with_stdio(false);
	string s;
	int n;
	cin >> s >> n;
	for(int i = 1; i <= n; i++) {
		string tmp;
		int x;
		cin >> tmp >> x;
		cap[0][i] = x;
		cost[0][i] = i;
		cost[i][0] = -i;
		for(int j = 0; j < sz(tmp); j++)
			cap[i][n+tmp[j]-'a'+1]++;
	}
	for(int i = 0; i < sz(s); i++)
		cap[n+s[i]-'a'+1][n+27]++;
	N = n+30;
	flow(0, n+27);
	if(fl != sz(s))
		cout << -1 << endl;
	else
		cout << cst << endl;
	return 0;
}
