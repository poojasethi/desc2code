#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define FOR(it, c) for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define SZ(c) ((int)(c).size())

int S, T, OFFSET;
int f[205][205], cost[205][205];
char t[205], s[205];
int ans = 0;

int inq[205], last[205], val[205];
bool aug() {
	const int INF = 1e9+7;
	for(int i=0;i<=T;i++) last[i] = -1, inq[i] = 0;
	for(int i=0;i<=T;i++) val[i] = INF;
	queue<int> Q;
	Q.push(S);
	val[0] = 0;
	while(!Q.empty()) {
		int x = Q.front(); Q.pop();
		inq[x] = 0;
		for(int y=1;y<=T;y++)
			if(f[x][y]>0 && val[y] > val[x] + cost[x][y]) {
				last[y] = x;
				val[y] = val[x] + cost[x][y];
				if(inq[y]==0) { Q.push(y); inq[y] = 1; }
			}
	}
	if(val[T] == INF) return false;
	ans += val[T];
	int x = T;
	while(x!=S) {
		f[last[x]][x]--;
		f[x][last[x]]++;
		x=last[x];
	}
	return true;
}
int main(void) {
	int n;
	scanf("%s", t);
	scanf("%d", &n);
	S = 0, T = n+26+1, OFFSET=n-'a'+1;
	for(int i=0;t[i];i++)
		f[OFFSET+t[i]][T]++;
	for(int i=1;i<=n;i++) {
		int limit;
		scanf("%s%d", s, &limit);
		for(int j='a';j<='z';j++) {
			cost[i][OFFSET+j] = i;
			cost[OFFSET+j][i] = -i;
		}
		for(int j=0;s[j];j++) f[i][OFFSET+s[j]]++;
		f[S][i] = limit;
	}
	int cnt = 0;
	while(aug()) ++cnt;
	if(cnt < (int)strlen(t)) puts("-1");
	else printf("%d\n", ans);
	return 0;
}
