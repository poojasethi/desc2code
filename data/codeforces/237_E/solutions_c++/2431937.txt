#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

int n,m,ans,t,f;
int maxf[210][210],flow[210][210],cost[210][210];
int fa[210],dist[210];
bool inque[210];
inline int abs(int a) {return a > 0 ? a : -a ;}
inline int value(int i,int j) {
  return flow[j][i] > 0 ? -cost[i][j] : cost[i][j];
}

char str[333];
int arr[111][33];
int max_take[111];
int cnt[33];


bool spfamark() {
  memset(fa,0,sizeof(fa));
  memset(inque,0,sizeof(inque));
  memset(dist, 0x3f, sizeof(dist));
  queue<int> q;
  q.push(f); inque[f] = true; dist[f]=0;
  while (!q.empty()) {
    int now = q.front(); q.pop(); inque[now] = false;
    for (int i = 0; i < n;i++)
      if ((maxf[now][i] - flow[now][i] > 0)
          && dist[now] + value(now,i) < dist[i]){
        dist[i] = dist[now] + value(now,i);
        fa[i] = now;
        if (!inque[i]) {
          inque[i]=1;
          q.push(i);
        }
      }
  }
  return dist[t] != 0x3f3f3f3f;
}

int main() {
  scanf("%s",str); int nn = strlen(str);
  for (int i = 0; str[i]; i++) cnt[str[i] - 'a'] ++;
  scanf("%d",&n);
  for (int i = 0; i < n; i++) {
    scanf("%s",str);
    for (int j = 0; str[j]; j++) arr[i][str[j] - 'a'] ++;
    scanf("%d",max_take + i);
  }
  f = 0;
  t = 1;
  for (int i = 0; i < 26; i++) {
    maxf[i + 2][t] = cnt[i];
  }
  for (int i = 0; i < n; i++) {
    maxf[f][i + 28] = max_take[i];
    cost[f][i + 28] = cost[i + 28][f] = i + 1;
    for (int j = 0; j < 26; j++) {
      maxf[i + 28][j + 2] = arr[i][j];
    }
  }
  n += 28;
  while (spfamark()) {
    for(int i = t; i != f; i = fa[i]) {
      ans+=value(fa[i],i);
      flow[fa[i]][i]++;
      flow[i][fa[i]]--;
    }
  }

  int sum = 0;
  for (int i = 0; i < 26; i++) {
    sum += flow[i + 2][t];
  }
  if (sum < nn) ans = -1;
  printf("%d\n",ans);
  return 0;
}
