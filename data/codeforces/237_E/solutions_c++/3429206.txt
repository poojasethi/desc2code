#include <iostream>
#include <cstring>
#include <algorithm>
#include <cstdio>
#include <string>
#include <queue>
using namespace std;

int i, j, k, x, y, z, n, m, N, maxflow, ans;
int g[1001][1001], c[1001][1001], dist[1001], p[1001];
bool v[1001];
string s;
queue<int>q;

void ae(int x, int y, int cap, int cost) {
    g[x][y] += cap;
    c[x][y] = cost;
    c[y][x] = -cost;
}

bool spfa() {
    for (int i = 2; i <= n; ++i) dist[i] = 100000000; dist[1] = 0;
    memset(v, false, sizeof(v));
    q.push(1);
    while (!q.empty()) {
        int k = q.front(); q.pop(); v[k] = false;
        for (int i = 1; i <= n; ++i)
            if (g[k][i] && dist[i] > dist[k] + c[k][i]) {
                dist[i] = dist[k] + c[k][i]; p[i] = k;
                if (!v[i]) {
                    q.push(i);
                    v[i] = true;
                }
            }
    }
    return dist[n] < 10000000;
}

int main() {
    //freopen("data.txt", "r", stdin);
    //freopen("data.out", "w", stdout);
    cin >> s; cin >> n;
    N = s.length();
    for (i = 0; i < N; ++i)
        ae(n + 2 + s[i] - 'a', n + 28, 1, 0);
    for (i = 1; i <= n; ++i) {
        cin >> s >> x;
        ae(1, i + 1, x, i);
        m = s.length();
        for (j = 0; j < m; ++j)
            ae(i + 1, n + 2 + s[j] - 'a', 1, 0);
    }
    n += 28;
    while (spfa()) {
        int flow = 100000000;
        for (x = n; x > 1; x = p[x])
            flow = min(flow, g[p[x]][x]);
        for (x = n; x > 1; x = p[x]) {
            g[p[x]][x] -= flow;
            g[x][p[x]] += flow;
        }
        ans += flow * dist[n];
        maxflow += flow;
    }
    if (maxflow < N) printf("-1\n"); else printf("%d\n", ans);
    return 0;
}
