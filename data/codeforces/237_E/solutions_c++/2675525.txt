#include<cmath>
#include<string>
#include<cstring>
#include<iostream>
#include<iomanip>
#define rep(i,n) for(int i=0;i<n;i++)
#define FOR(i,a,b) for(int i=a;i<=b;i++)
using namespace std;
const int N=150,Q=255,M=10000,inf=0x7F7F7F7F;
string str;
int s,t,n,m,x,v,l,r,sz,tot,flow,ans,c[26],d[N],
	q[Q],en[N],pre[M],g[M],capa[M],cost[M];
bool Inq[N],vis[N];
inline void Ins(int u,int v,int ca,int co)
{
	pre[++sz]=en[u];en[u]=sz;g[sz]=v;capa[sz]=ca;cost[sz]=co;
	pre[++sz]=en[v];en[v]=sz;g[sz]=u;capa[sz]=0;cost[sz]=-co;
}
inline void Read()
{
	cin>>str;
	memset(c,0,sizeof(c));
	rep(i,str.length()) c[str[i]-'a']++;
}
bool relabel()
{
	memset(d,0x7F,sizeof(d));
	q[l=r=0]=t;d[t]=0;
	while(l!=r+1 &Q)
	{
		Inq[x=q[l]]=0;
		l=l+1 &Q;
		for(int i=en[x];i;i=pre[i])
		{
			v=g[i];
			if (capa[i^1] && d[x]-cost[i]<d[v])
			{
				d[v]=d[x]-cost[i];
				if (Inq[v]) continue;
				Inq[v]=1;
				if (d[v]<=d[q[l]]) q[l=l-1 &Q]=v;
	           				else   q[r=r+1 &Q]=v;
			}
		}
	}
	return d[s]<inf;
}
int dfs(int x,int flow)
{
	if (x==t) return flow;
	int cnt=0,w;
	vis[x]=1;
	for(int i=en[x];i;i=pre[i])
	{
		int v=g[i];
		if (!vis[v] && capa[i] && d[x]-cost[i]==d[v])
		{
			w=dfs(v,min(capa[i],flow-cnt));
			capa[i]-=w;capa[i^1]+=w;
			cnt+=w;
			if (cnt==flow) return cnt;
		}
	}
	return cnt;
}
void ZKW_Mincost()
{
	while (relabel())
		while (m=dfs(s,inf))
		{
			memset(vis,0,sizeof(vis));
			flow+=m;ans+=m*d[s];
		}
}
int main()
{
	Read();
	s=26;t=27;sz=1;
	rep(i,26)
		if(c[i]) Ins(i,t,c[i],0),tot+=c[i];
	cin>>n;
	rep(x,n)
	{
		Read();cin>>m;
		Ins(s,28+x,m,x+1);
		rep(i,26) if (c[i]) Ins(28+x,i,c[i],0);
	}
	ZKW_Mincost();
	cout<<((flow==tot)?ans:-1)<<endl;
	return 0;
	
}
