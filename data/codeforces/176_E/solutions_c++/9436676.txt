#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<set>
#define N 200100
using namespace std;
typedef long long LL;
int V[N], nxt[N], C[N], p[N], A[N], B[N], d[N], n, m, i, j, ed, tm, q, f[N][18];
LL ans, s[N];
set<int> S;
void Add(int u, int v, int c)
{
	V[++ed] = v, C[ed] = c, nxt[ed] = p[u], p[u] = ed;
}
void Dfs(int x, int fa)
{
	f[x][0] = fa, A[x] = ++tm, B[tm] = x, d[x] = d[fa] + 1;
	for (int i = p[x]; i != -1; i = nxt[i])
		if (V[i] != fa) s[V[i]] = s[x] + (LL)C[i], Dfs(V[i], x);
}
int Lca(int u, int v)
{
	if (d[u] < d[v]) swap(u, v);
	for (int i = 17; i >= 0; i--)
		if (d[f[u][i]] >= d[v]) u = f[u][i];
	if (u == v) return u;
	for (int i = 17; i >= 0; i--)
		if (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i];
	return f[u][0];
}
LL Calc(int x)
{
	if (!S.size()) return 0;
	set<int>::iterator it = S.lower_bound(A[x]);
	int p1, p2, z1, z2, z3;
	if (it == S.begin() || it == S.end())
		p1 = B[*S.begin()], p2 = B[*(--S.end())];
	else p1 = B[*it], p2 = B[*(--it)];
	z1 = Lca(x, p1), z2 = Lca(x, p2), z3 = Lca(p1, p2);
	return s[x] - s[z1] - s[z2] + s[z3];
}
int main()
{
	memset(p, -1, sizeof(p));
	scanf("%d", &n);
	int u, v, c;
	for (i = 1; i < n; i++)
	{
		scanf("%d%d%d", &u, &v, &c);
		Add(u, v, c), Add(v, u, c);
	}
	Dfs(1, 0);
	for (i = 1; i <= 17; i++)
		for (j = 1; j <= n; j++)
			f[j][i] = f[f[j][i - 1]][i - 1];
	scanf("%d", &q);
	for (i = 1; i <= q; i++)
	{
		char ch[2];
		scanf("%s", ch); 
		if (ch[0] == '?') {printf("%I64d\n", ans); continue;}
		scanf("%d", &u);
		if (ch[0] == '+') ans += Calc(u), S.insert(A[u]);
		else if (ch[0] == '-') S.erase(A[u]), ans -= Calc(u);
	}
	return 0;
}