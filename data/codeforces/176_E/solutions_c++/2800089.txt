#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <set>
#include <algorithm>
using namespace std;

typedef long long LL;
typedef set<int>::iterator SIit;
const int maxn = 100005;
struct Tedge { int v, c; Tedge *p; };
Tedge *head[maxn], buf[maxn * 2], *ptr = buf;
int sum[maxn], fa[maxn], dep[maxn];
int top[maxn], down[maxn], dfn[maxn], loc[maxn];
LL dis[maxn], ans;
set<int> list;
int n, tot;

LL dist(int u, int v) {
    LL tmp = dis[u] + dis[v];
    while (u != v) {
        if (dep[u] > dep[v]) swap(u, v);
        if (top[u] == top[v]) break;
        if (dep[top[u]] > dep[top[v]]) swap(u, v);
        v = fa[top[v]];
    }
    return tmp - dis[u] * 2;
}

int pred(SIit it) {
    if (it == list.begin())
        return *(--list.end());
    else return *(--it);
}

int succ(SIit it) {
    ++it;
    if (it == list.end())
        return *(list.begin());
    else return *it;
}

void dfs(int u) {
    int v; Tedge *p;
    dfn[u] = ++tot; loc[tot] = u; sum[u] = 1;
    for (p = head[u]; p; p = p->p)
        if (p->v != fa[u]) {
            dis[p->v] = dis[u] + p->c;
            dep[p->v] = dep[u] + 1;
            fa[p->v] = u; dfs(p->v);
            sum[u] += sum[p->v];
            if (down[u] == 0 || sum[p->v] > sum[down[u]])
                down[u] = p->v;
        }
    for (p = head[u]; p; p = p->p)
        if (p->v != down[u]) {
            for (v = p->v; v; v = down[v]) top[v] = p->v;
        }
    if (fa[u] == 0)
        for (v = u; v; v = down[v]) top[v] = u;
}

int main() {
    int i, u, v, c; char st[10];
    scanf("%d", &n);
    for (i = 1; i < n; ++i) {
        scanf("%d%d%d", &u, &v, &c);
        *ptr = (Tedge){v, c, head[u]}; head[u] = ptr++;
        *ptr = (Tedge){u, c, head[v]}; head[v] = ptr++;
    }
    dfs(1);
    SIit it;
    scanf("%d", &tot);
    while (tot--) {
        scanf("%s", st);
        if (st[0] == '+') {
            scanf("%d", &c);
            it = list.insert(dfn[c]).first;
            u = loc[pred(it)]; v = loc[succ(it)];
            ans += dist(u, c) + dist(v, c) - dist(u, v);
        } else if (st[0] == '-') {
            scanf("%d", &c);
            it = list.find(dfn[c]);
            u = loc[pred(it)]; v = loc[succ(it)];
            ans -= dist(u, c) + dist(v, c) - dist(u, v);
            list.erase(it);
        } else printf("%I64d\n", ans / 2);
    }
    return 0;
}
