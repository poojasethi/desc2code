//In the name of God
#include <iostream>
#include <vector>
#include <set>
using namespace std;
typedef set<int>::iterator IT;
typedef pair<int, int> pii;
const int N = 1e5 + 5, lg = 20;

int n, q, st[N], adr[N], par[N][lg], h[N];
long long sum, len[N];
vector<pii> adj[N];
set<int> s;

void dfs(int v) {
	static int cnt = 0;
	st[v] = cnt;
	adr[cnt++] = v;
	for (int i = 1; i < lg; i++)
		par[v][i] = par[par[v][i - 1]][i - 1];
	for (int i = 0; i < (int) adj[v].size(); i++) {
		int u = adj[v][i].first;
		if (par[v][0] != u) {
			h[u] = h[v] + 1;
			len[u] = len[v] + adj[v][i].second;
			par[u][0] = v;
			dfs(u);
		}
	}
}
int lca(int u, int v) {
	if (h[u] > h[v])
		swap(u, v);
	for (int i = lg - 1; i >= 0; i--)
		if (h[v] - h[u] >= 1 << i)
			v = par[v][i];
	for (int i = lg - 1; i >= 0; i--)
		if (par[v][i] != par[u][i])
			v = par[v][i], u = par[u][i];
	return u == v? v: par[v][0];
}
long long dis(int u, int v) { return len[u] + len[v] - 2 * len[lca(u, v)]; }
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n - 1; i++) {
		int u, v, w;
		cin >> u >> v >> w;
		u--, v--;
		adj[v].push_back(pii(u, w));
		adj[u].push_back(pii(v, w));
	}
	dfs(0);
	cin >> q;
	while (q--) {
		char c; int v;
		cin >> c;
		if (c == '?') {
			cout << sum / 2 << '\n';
			continue;
		}
		cin >> v; v--;
		if (c == '+')
			s.insert(st[v]);
		IT me = s.find(st[v]), pr = me, nx = me;
		int u = adr[*--(pr == s.begin()? s.end(): pr)], w = adr[*(++nx == s.end()? s.begin(): nx)];
		long long tmp = dis(u, v) + dis(v, w) - dis(u, w);
		sum += c == '+'? tmp: -tmp;
		if (c == '-')
			s.erase(me);
//		cerr << v + 1 << ':' << sum / 2 << '\n';
	}
	return 0;
}
