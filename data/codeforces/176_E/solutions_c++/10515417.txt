#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <set>

using namespace std;

const int MAXN = 201010;

struct Edge
{
	int to, next, l;
}e[MAXN];

char opr[10];
long long int res, ans, d[MAXN];
int p[MAXN], z = -1;
int v[MAXN], w[MAXN], deep[MAXN], f[MAXN][18], cnt, qus, n;
set <int> a;

void add(int u, int v, int l)
{
	e[++ z].to = v;
	e[z].l = l;
	e[z].next = p[u];
	p[u] = z;
}

void dfs(int u)
{
	w[v[u] = ++ cnt] = u;
	for(int temp = p[u]; temp != -1; temp = e[temp].next)
	{
		int now = e[temp].to;
		if(!deep[now])
		{
			deep[now] = deep[u] + 1;
			d[now] = d[u] + e[temp].l;
			*f[now]= u;
			dfs(now);
		}
	}
}

int lca(int x, int y)
{
	if(deep[x] < deep[y])
		swap(x, y);
	for(int i = 17, k = deep[x] - deep[y]; i >= 0; i --)
		if(k & 1 << i)
			x = f[x][i];
	for(int i = 17; i >= 0; i --)
		if(f[x][i] != f[y][i])
		{
			x = f[x][i];
			y = f[y][i];
		}
	return x == y ? x : *f[x];
}

void init()
{
	memset(p, -1, sizeof(p));
	scanf("%d", &n);
	for(int i = 1; i < n; i ++)
	{
		int u, v, l;
		scanf("%d%d%d", &u, &v, &l);
		add(u, v ,l);
		add(v, u, l);
	}
	deep[1] = 1;
	dfs(1);
	scanf("%d", &qus);
}

void process()
{
	for(int j = 0; j < 17; j ++)
		for(int i = 1; i <= n; i ++)
			f[i][j + 1] = f[f[i][j]][j];
	while(qus --)
	{
		scanf("%s", opr);
		if(*opr == '?')
			printf("%I64d\n", ans);
		else
		{
			int t;
			scanf("%d", &t);
			set <int> :: iterator it = a.insert(v[t]).first, l = it, r = it;
			if(l -- == a.begin())
				l = -- a.end();
			if(++ r == a.end())
				r = a.begin();
			int sl = w[*l], sr = w[*r];
			res = d[t] - d[lca(sl, t)] - d[lca(t, sr)] + d[lca(sl, sr)];
			if(*opr == '+')
				ans += res;
			else
			{
				ans -= res;
				a.erase(v[t]);
			}
		}
	}
}

int main()
{
	init();
	process();
	return 0;
}
