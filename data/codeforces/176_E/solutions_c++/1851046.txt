#include<cstdio>
#include<iostream>
#include<set>
#include<algorithm>
#define MAX_N 100009
#define MAX_L 18
#define ll long long
using namespace std;
struct edge{
    int v,w;
    edge *nxt;
}E[MAX_N<<1],*cur,*Adj[MAX_N];
int n,q,od[MAX_N],rk[MAX_N],dep[MAX_N],anc[MAX_N][MAX_L],C;
ll len[MAX_N],ans;
set<int> T;
void addedge(int u,int v,int w){cur->v=v,cur->w=w,cur->nxt=Adj[u],Adj[u]=cur++;}
void DFS(int rt){
    rk[od[rt]=++C]=rt;
    for(int i=1;i<MAX_L;i++) anc[rt][i]=anc[anc[rt][i-1]][i-1];
    int v;
    for(edge *p=Adj[rt];p;p=p->nxt)
        if((v=p->v)!=anc[rt][0]){
            dep[v]=dep[rt]+1,anc[v][0]=rt,len[v]=len[rt]+p->w;
            DFS(v);
        }
}
int LCA(int u,int v){
    if(dep[u]<dep[v]) swap(u,v);
    for(int i=MAX_L-1;i>=0;i--)
        if(dep[u]-dep[v]>=(1<<i))
            u=anc[u][i];
    if(u==v) return u;
    for(int i=MAX_L-1;i>=0;i--)
        if(anc[u][i]!=anc[v][i])
            u=anc[u][i],v=anc[v][i];
    return anc[u][0];
}
int main(){    
    cur=E;
    cin>>n;
    for(int i=1;i<n;i++){
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        addedge(u,v,w);
        addedge(v,u,w);
    }
    DFS(1);
    cin>>q;
    char cmd[5];
    int v,pv,nv,c1,c2;
    ll tmp;
    set<int>::iterator pre,it,nxt;
    while(q--){
        cin>>cmd;
        if(cmd[0]=='?') cout<<ans<<endl;
        else{
            cin>>v;
            pre=it=nxt=T.insert(od[v]).first;
            if(pre--==T.begin()) pre=--T.end();
            if(++nxt==T.end()) nxt=T.begin();
            pv=rk[*pre],nv=rk[*nxt];
            tmp=len[v]-len[LCA(pv,v)]-len[LCA(v,nv)]+len[LCA(pv,nv)];
            if(cmd[0]=='+') ans+=tmp;
            else  ans-=tmp,T.erase(od[v]);
        }
    }
}