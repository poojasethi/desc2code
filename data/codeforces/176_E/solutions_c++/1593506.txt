#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <set>
#define maxn 100010

using namespace std;

int st[maxn],aim[maxn<<1],nxt[maxn<<1],ln;
int w[maxn<<1];
int n;
void in_edge(int x,int y,int z){
	aim[ln]=y;
	nxt[ln]=st[x];
	w[ln]=z;
	st[x]=ln++;
}
long long tw[maxn];
int fp[maxn][18];
int level[maxn];
int pos[maxn],pn;
void dfs(int x){
	pos[x]=++pn;
	for (int i=1;i<18;i++)
		if (fp[x][i-1]) fp[x][i]=fp[fp[x][i-1]][i-1];
	for (int i=st[x];i!=-1;i=nxt[i]){
		int v=aim[i];
		if (level[v]==0){
			level[v]=level[x]+1;
			fp[v][0]=x;
			tw[v]=tw[x]+w[i];
			dfs(v);
		}
	}
}
int lab[maxn];
set< pair<int,int> > list;
int get_lca(int x,int y){
	if (level[x]<level[y]) swap(x,y);
	for (int i=17;i>=0;i--)
		if (level[x]-(1<<i)>=level[y]) x=fp[x][i];
	if (x==y) return y;
	for (int i=17;i>=0;i--)
		if (fp[x][i]!=fp[y][i]){
			x=fp[x][i];
			y=fp[y][i];
		}
	return fp[x][0];
}
int main(){
	scanf("%d",&n);
	memset(st,-1,sizeof(st));
	for (int i=1;i<n;i++){
		int u,v,w;
		scanf("%d%d%d",&u,&v,&w);
		in_edge(u,v,w);
		in_edge(v,u,w);
	}
	level[1]=1;
	dfs(1);
	long long ans=0;
	int m;
	for (scanf("%d",&m);m;m--){
		char type[10];
		scanf("%s",type);
		int p;
		if (type[0]=='+'){
			scanf("%d",&p);
			if (lab[p]) continue;
			lab[p]=1;
			set< pair<int,int> >::iterator x=list.insert(make_pair(pos[p],p)).first;
			set< pair<int,int> >::iterator pre=(x==list.begin()?list.end():x);
			--pre;
			set< pair<int,int> >::iterator nxt=x;
			++nxt;
			if (nxt==list.end()) nxt=list.begin();
			//printf("%d %d %d\n",p,pre->second,nxt->second);
			int r1=get_lca(p,pre->second),r2=get_lca(p,nxt->second),r3=get_lca(pre->second,nxt->second);
			ans+=(tw[p]-tw[r2])-(tw[r1]-tw[r3]);
		}else
		if (type[0]=='-'){
			scanf("%d",&p);
			if (!lab[p]) continue;
			lab[p]=0;
			set< pair<int,int> >::iterator x=list.insert(make_pair(pos[p],p)).first;
			set< pair<int,int> >::iterator pre=(x==list.begin()?list.end():x);
			--pre;
			set< pair<int,int> >::iterator nxt=x;
			++nxt;
			if (nxt==list.end()) nxt=list.begin();
			int r1=get_lca(p,pre->second),r2=get_lca(p,nxt->second),r3=get_lca(pre->second,nxt->second);
			ans-=(tw[p]-tw[r2])-(tw[r1]-tw[r3]);
			list.erase(make_pair(pos[p],p));
		}else{
			printf("%I64d\n",ans);
		}
	}
	return 0;
}