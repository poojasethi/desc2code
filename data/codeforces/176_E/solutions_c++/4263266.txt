#include <set>
#include <queue>
#include <cmath>
#include <ctime>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#define LL long long
using namespace std;
const int MAXN=100005;
const int oo=10000005;
typedef pair<int,int> Pair;
set<int>::iterator it,it2,it1;
set<int> S;
int deep[MAXN],f[MAXN][20],r[MAXN],nub[MAXN];
LL L[MAXN][20],l[MAXN*2];
int next[MAXN*2],last[MAXN],d[MAXN*2],top,X[MAXN];
void add(int x,int y,LL z)
{
	next[++top]=last[x];last[x]=top;d[top]=y;l[top]=z;
}
int dfs()
{
	int time=1;
	X[1]=1;
	time=1;
	while(1)
	{
		newstage:
		r[++top]=X[time];
		for(int i=0;f[X[time]][i];i++)
			f[X[time]][i+1]=f[f[X[time]][i]][i],
			L[X[time]][i+1]=L[X[time]][i]+L[f[X[time]][i]][i];
		oldstage:
		for(int &i=last[X[time]];i;i=next[i])
			if(d[i]!=f[X[time]][0])
			{
				f[d[i]][0]=X[time];
				L[d[i]][0]=l[i];
				deep[d[i]]=deep[X[time]]+1;
				X[++time]=d[i];
				i=next[i];
				goto newstage;
			}
		time--;
		if(!time)break;
		goto oldstage;
	}
}
LL lca(int x,int y)
{
	LL d=0;
	for(int j=19;j+1;j--)
		if(deep[f[x][j]]>=deep[y])
			d+=L[x][j],x=f[x][j];
	for(int j=19;j+1;j--)
		if(deep[f[y][j]]>=deep[x])
			d+=L[y][j],y=f[y][j];
	if(x==y)return d;
	for(int j=19;j+1;j--)if(f[x][j]!=f[y][j])d+=L[x][j]+L[y][j],x=f[x][j],y=f[y][j];
	d+=L[x][0]+L[y][0],x=f[x][0],y=f[y][0];
	return d;
}
int main()
{
	int n;
	scanf("%d",&n);
	for(int i=1;i<n;i++)
	{
		int x,y;LL z;
		scanf("%d%d%I64d",&x,&y,&z);
		add(x,y,z);add(y,x,z);
	}
	deep[1]=1;
	top=0;
	dfs();
	for(int i=1;i<=n;i++)
		nub[r[i]]=i;
	int Q;
	scanf("%d\n",&Q);
	LL ans=0;
	S.insert(-oo);
	S.insert(oo);
	for(;Q--;)
	{
		char ch=getchar();int x;
		if(ch=='?')
			printf("%I64d\n",ans/2);
		else
			scanf("%d",&x);
		if(ch=='+')
		{
			S.insert(nub[x]);
			it=S.find(nub[x]);
			it1=it;it1--;
			if(*it1==-oo)
				it1=S.end(),
				it1--,it1--;
			ans+=lca(x,r[*it1]);
			it2=it;it2++;
			if(*it2==oo)
				it2=S.begin(),
				it2++;
			ans+=lca(x,r[*it2]);
			ans-=lca(r[*it1],r[*it2]);
		}
		if(ch=='-')
		{
			it=S.find(nub[x]);
			it1=it;it1--;
			if(*it1==-oo)
				it1=S.end(),
				it1--,it1--;
			ans-=lca(x,r[*it1]);
			it2=it;it2++;
			if(*it2==oo)
				it2=S.begin(),
				it2++;
			ans-=lca(x,r[*it2]);
			ans+=lca(r[*it1],r[*it2]);
			S.erase(it);
		}
		scanf("\n");
	}
	return 0;
}
    	  		 		    	 				