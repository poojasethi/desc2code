#include <iostream>
#include <cstring>
#include <algorithm>
#include <set>
using namespace std;

typedef long long LL;

int n, q, x[200011], c[200011], Nxt[200011], head[200011], Cnt;
int Index, id[200011], dict[200011], p[200011][17], depth[200011];
LL d[200011], ans;
set<int> V;

inline void link(int A, int B, int C)
{
	x[++Cnt] = B;
	c[Cnt] = C;
	Nxt[Cnt] = head[A];
	head[A] = Cnt;
}

void dfs(int u, int pre = -1)
{
	dict[id[u] = ++Index] = u;
	for (int i = head[u]; i; i = Nxt[i])
	{
		int v = x[i];
		if (v == pre) continue;
		d[v] = d[u] + c[i];
		p[v][0] = u;
		depth[v] = depth[u] + 1;
		dfs(v, u);
	}
}

void init()
{
	ios::sync_with_stdio(false);
	cin >> n;
	for (int i = 1, A, B, C; i < n; ++i)
	{
		cin >> A >> B >> C;
		link(A, B, C);
		link(B, A, C);
	}
	dfs(1);
	for (int i = 1; i < 17; ++i)
		for (int j = 1; j <= n; ++j)
			p[j][i] = p[p[j][i-1]][i-1];
}

inline int LCA(int u, int v)
{
	if (depth[u] < depth[v]) swap(u, v);
	for (int i = 16; i >= 0; --i)
		if (depth[u] - (1 << i) >= depth[v])
			u = p[u][i];
	if (u == v) return u;
	for (int i = 16; i >= 0; --i)
		if (p[u][i] != p[v][i])
			u = p[u][i], v = p[v][i];
	return p[u][0];
}

LL cost(int k)
{
	if (!V.size()) return 0LL;
	int u, v, p, q;
	set<int>::iterator it = V.upper_bound(id[k]);
	if (it == V.begin())
	{
		u = dict[*V.begin()], v = dict[*(--(it = V.end()))];
		p = LCA(u, v), q = LCA(v, k);
		if (p == q) return q = LCA(u, k), d[k] - d[q];
		else return d[k] + d[p] - d[q] - d[q];
	}
	else if (it == V.end())
	{
		u = dict[*V.begin()], v = dict[*(--(it = V.end()))];
		p = LCA(u, v), q = LCA(u, k);
		if (p == q) return q = LCA(v, k), d[k] - d[q];
		else return d[k] + d[p] - d[q] - d[q];
	}
	else
	{
		v = dict[*it], u = dict[*(--it)];
		p = LCA(u, k), q = LCA(v, k);
		if (depth[p] < depth[q]) swap(p, q);
		return d[k] - d[p];
	}
}

void work()
{
	cin >> q;
	char cmd[9];
	for (int i = 0, X; i < q; ++i)
	{
		cin >> cmd;
		switch (*cmd)
		{
			case '+': cin >> X; ans += cost(X); V.insert(id[X]); break;
			case '-': cin >> X; V.erase(id[X]); ans -= cost(X); break;
			case '?': cout << ans << endl;
		}
	}
}

int main()
{
	init();
	work();
	return 0;
}
