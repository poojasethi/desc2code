#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<vector>
using namespace std;
const int maxn=100005;
int n,m,tot;
int index[maxn*2],idx[maxn];
int ask(int x)
{
	return lower_bound(index,index+tot,x)-index;
}
struct node
{
	int o,x,y;
}q[maxn];
int fa[maxn];
int get(int x)
{
	return fa[x]==x?fa[x]:fa[x]=get(fa[x]);
}
int L[maxn],R[maxn];
int merge(int x,int y)
{
	x=get(x),y=get(y);
	fa[y]=x;
	L[x]=min(L[x],L[y]);
	R[x]=max(R[x],R[y]);
	return x;
}
vector<int>tree[maxn<<2];
void insert(int p,int L,int R,int l,int r,int w)
{
	if(l<=L&&r>=R)
	{
		tree[p].push_back(w);
		return;
	}
	int mid=(L+R)>>1;
	if(l<=mid)
	insert(p<<1,L,mid,l,r,w);
	if(r>mid)
	insert(p*2+1,mid+1,R,l,r,w);
}
void merge(int p,int l,int r,int x,int &o)
{
	while(1)
	{
		for(int i=0,j=tree[p].size();i<j;i++)
		o=merge(o,tree[p][i]);
		tree[p].clear();
		if(l==r)
		return;
		int mid=(l+r)>>1;
		if(x<=mid)
		{
			p=p<<1;
			r=mid;
		}
		else
		{
			p=p*2+1;
			l=mid+1;
		}
	}
}
int main()
{
	cin>>n;
	for(int i=1;i<=n;i++)
	{
		scanf("%d%d%d",&q[i].o,&q[i].x,&q[i].y);
		if(q[i].o==1)
		{
			idx[i]=++m;
			fa[m]=m;
			L[m]=q[i].x;
			R[m]=q[i].y;
			index[tot++]=q[i].x;
			index[tot++]=q[i].y;
		}
	}
	sort(index,index+tot);
	tot=unique(index,index+tot)-index;
	for(int i=1;i<=n;i++)
	{
		if(q[i].o==1)
		{
			int o=get(idx[i]);
			int x=ask(q[i].x);
			int y=ask(q[i].y);
			merge(1,0,tot-1,x,o);
			merge(1,0,tot-1,y,o);
			x=ask(L[o]);
			y=ask(R[o]);
			if(x+1<y)
			insert(1,0,tot-1,x+1,y-1,o);
		}
		else
		{
			int x=get(q[i].x);
			int y=get(q[i].y);
			if(x==y||(L[y]<=L[x]&&R[x]<=R[y]))
			{
				printf("YES\n");
			}
			else
			{
				printf("NO\n");
			}
		}
	}
	return 0;
}
