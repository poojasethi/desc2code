// 我也很想他 

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <vector>
#define INF int(1e9+7)
using namespace std;
int N;

int fa[100000+7];
int ml[100000+7], mr[100000+7];

int find(int x) {return fa[x]==x?x:fa[x]=find(fa[x]);}

int Union(int x, int y)
{
 	x=find(x);
	y=find(y);
	fa[y]=x;
	if (ml[y]<ml[x]) ml[x]=ml[y];
	if (mr[y]>mr[x]) mr[x]=mr[y]; 	
}

int Tot=0;
struct Node{
	vector<int> v;
	int l, r;
} tree[8000000+7];

void Append(int& x, int s, int t, int k, int L=-INF, int R=INF)
{
	if (!x) x=++Tot;
	if (s<=L&&R<=t) {tree[x].v.push_back(k); return;}	
	int M=L+R>>1;
	if (s<=M) Append(tree[x].l, s, t, k, L, M);
	if (M<t) Append(tree[x].r, s, t, k, M+1, R);
}

void Access(int x, int pos, int d, int L=-INF, int R=INF)
{
	if (!x) return;
	while (!tree[x].v.empty())
	{
		int k=tree[x].v.back(); 
		tree[x].v.pop_back();
		Union(k, d);
	}
	
	if (L==R) return; 
	int M=L+R>>1;
	
	if (pos<=M) Access(tree[x].l, pos, d, L, M);
	else Access(tree[x].r, pos, d, M+1, R);
}

int astone[100000+7][2];

int main()
{
	scanf("%d", &N);
	int tot=0, root=0;
	int x, y;
	for (int oper; N--; )
	{
		scanf("%d", &oper);
		if (oper==1)
		{
			tot++; scanf("%d %d", &x, &y);
			fa[tot]=tot;
			astone[tot][0]=ml[tot]=x; 
			astone[tot][1]=mr[tot]=y;
			Access(root, x, tot);
			Access(root, y, tot);
			Append(root, ml[find(tot)]+1, mr[find(tot)]-1, find(tot));
		}
		else
		{
			scanf("%d %d", &x, &y);
			y=find(y);
			if (find(x)==y || ml[y]<=astone[x][0]&&astone[x][1]<mr[y]) puts("YES");
			else puts("NO");
		}
	}
	return 0;
}