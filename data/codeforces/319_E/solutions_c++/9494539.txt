#include<cstdio>
#include<cstring>
#include<cctype>
#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
using namespace std;

#define N 100010
int n;

#define l(x) S[x].l
#define r(x) S[x].r
struct Node{
    int l,r;vector<int>v;
}S[N<<2];int cnt;

int r[N];
inline int find(int x){return x==r[x]?x:r[x]=find(r[x]);}

int qte[N],x[N],y[N];

int sav[N<<1],id,num;map<int,int>M;

int build(int tl,int tr){
    int q=++cnt;if(tl==tr)return q;
    int mid=(tl+tr)>>1;
    l(q)=build(tl,mid),r(q)=build(mid+1,tr);return q;
}

bool covered[N];int seq[N],tot;
void push(int q,int tl,int tr,int ins){
    while(!S[q].v.empty()){int y=S[q].v.back();S[q].v.pop_back();if(!covered[y])covered[y]=1,seq[++tot]=y;}
    if(tl==tr)return;
    int mid=(tl+tr)>>1;
    if(ins<=mid)push(l(q),tl,mid,ins);else push(r(q),mid+1,tr,ins);
}
void cover(int q,int tl,int tr,int dl,int dr,int label){
    if(dl<=tl&&tr<=dr){S[q].v.push_back(label);return;}
    int mid=(tl+tr)>>1;
    if(dl<=mid)cover(l(q),tl,mid,dl,dr,label);if(dr>mid)cover(r(q),mid+1,tr,dl,dr,label);
}

int lins[N],rins[N];

int main(){
    scanf("%d",&n);
    register int i,j;
    for(i=1;i<=n;++i){scanf("%d%d%d",&qte[i],&x[i],&y[i]);if(qte[i]==1)sav[++num]=x[i],sav[++num]=y[i];}
    sort(sav+1,sav+num+1);for(sav[0]=-1<<30,i=1;i<=num;++i)if(sav[i]!=sav[i-1])M[sav[i]]=++id;
    
    build(1,id);
    
    int cur=0;
    for(i=1;i<=n;++i){
        if(qte[i]==1){
            x[i]=M[x[i]],y[i]=M[y[i]];
            tot=0,push(1,1,id,x[i]),push(1,1,id,y[i]);
            ++cur,r[cur]=cur,lins[cur]=x[i],rins[cur]=y[i];
            for(j=1;j<=tot;++j)lins[cur]=min(lins[cur],lins[seq[j]]),rins[cur]=max(rins[cur],rins[seq[j]]),r[find(seq[j])]=cur;
            if(lins[cur]+1<=rins[cur]-1)cover(1,1,id,lins[cur]+1,rins[cur]-1,cur);
        }
        else{
            int rx=find(x[i]),ry=find(y[i]);
            if(rx==ry||(lins[rx]>lins[ry]&&lins[rx]<rins[ry])||(rins[rx]>lins[ry]&&rins[rx]<rins[ry]))puts("YES");else puts("NO");
        }
    }
    
    return 0;
}
                