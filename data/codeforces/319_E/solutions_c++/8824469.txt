#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector> 
using namespace std;

#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP0(i, n) for (int i = 0; i < n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define FORE(i, x) for (int i = fi[x]; i != -1; i = e[i].n)

#define MAX_N 110000
#define PB push_back
#define A first
#define B second
#define MP make_pair
#define oo 1000000001
typedef pair < int, int > PT;

PT a[MAX_N];
typedef struct node* ntp;
ntp rt, ta;
struct node{ ntp lc, rc; vector < int > a; } ua[MAX_N * 40];
int f[MAX_N], n, m;

int find(int x) { return f[x] == x ? x : f[x] = find(f[x]); }
inline void upd(int x, int y)
{
 	   if (a[x].A > a[y].A) a[x].A = a[y].A;
 	   if (a[x].B < a[y].B) a[x].B = a[y].B;
}

void get(ntp v, int l, int r, int x)
{
 	 if (!v) return ;
 	// if (m == 2) printf ("%d %d\n", l, r);
 	 REP0(i, v->a.size()) { int y = v->a[i]; upd(m, find(y)), f[find(y)] = m; }
 	 v->a.clear(); if (l == r) return ;
 	 int mid = (l + r) / 2; if (mid == r) mid--; //处理负数(-1, 0)
     if (x <= mid) get(v->lc, l, mid, x); else get(v->rc, mid + 1, r, x);
}

void change(ntp &v, int l, int r, int x, int y)
{
 	 if (!v) v = ++ta; if (x <= l && r <= y) { v->a.PB(m); return ; }
 	 int mid = (l + r) / 2; if (mid == r) mid--;
 	 if (x <= mid) change(v->lc, l, mid, x, y);
 	 if (y > mid) change(v->rc, mid + 1, r, x, y);
}

int main(void)
{
	scanf ("%d", &n), rt = ta = ua;
	REP1(i, n)
	{
	    int type, x, y; scanf ("%d%d%d", &type, &x, &y);
	    if (type == 1)
		{
		   a[++m] = MP(x, y), f[m] = m, get(rt, -oo, oo, x), get(rt, -oo, oo, y);
		//   printf ("%d %d\n", a[m].A, a[m].B);
		   if (a[m].A + 1 < a[m].B) change(rt, -oo, oo, a[m].A + 1, a[m].B - 1);
        }
	    else
		{
		 	x = find(x), y = find(y);
		 //	printf ("%d %d\n", x, y);
		 	if (x == y || a[x].A > a[y].A && a[x].A < a[y].B || a[x].B > a[y].A && 
			    a[x].B < a[y].B) puts("YES"); else puts("NO");
	    }
	}
	return 0;
}
