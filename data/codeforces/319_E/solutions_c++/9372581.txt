#include<cstdio>
#include<iostream>
#include<cstring>
#include<string>
#include<cmath>
#include<algorithm>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>

using namespace std;

const int INF = 1000000000;
const int maxn = 100010;

vector <int> tree[8000000];
int tree_tot, key, pos, ql, qr, N, cmd, x, y;
int pa[maxn], L[maxn], R[maxn];
int lc[8000000], rc[8000000];

int findpa (int x)
{
  if (x == pa[x]) return x; else return pa[x] = findpa (pa[x]);
}

void merge (int x, int y)
{
  y = findpa (y);
  pa[y] = x;
  L[x] = min (L[x], L[y]);
  R[x] = max (R[x], R[y]);
}

void query (int o, int l, int r)
{
  for (int i=0; i<tree[o].size(); i++)
    merge (key, tree[o][i]);
  tree[o].clear ();
  if (l == r) return;
  int mid = l+(r-l)/2;
  if (pos <= mid && lc[o]) query (lc[o], l, mid);
  if (mid < pos && rc[o]) query (rc[o], mid+1, r);
}

void add (int o, int l, int r)
{
  if (ql <= l && r <= qr)
    {
      tree[o].push_back (key);
      return;
    }
  int mid = l+(r-l)/2;
  if (ql <= mid) add (lc[o]?lc[o]:lc[o]=++tree_tot, l, mid);
  if (mid < qr) add (rc[o]?rc[o]:rc[o]=++tree_tot, mid+1, r);
}

int main ()
{
#ifndef ONLINE_JUDGE
  freopen ("CF319E.in", "r", stdin);
  freopen ("CF319E.out", "w", stdout);
#endif
  cin >> N;
  for (int i=1; i<=N; i++) pa[i] = i;
  for (int i=1; i<=N; i++)
    {
      scanf ("%d%d%d", &cmd, &x, &y);
      if (cmd == 1) 
        {
          ++key; L[key] = x+1; R[key] = y-1;
          pos = x; query (1, -INF, INF);
          pos = y; query (1, -INF, INF);
          if (L[key] > R[key]) continue;
          ql = L[key]; qr = R[key]; add (1, -INF, INF);
        }
      else
        {
          x = findpa (x);
          y = findpa (y);
          if (x == y || L[y] <= L[x] && R[x] <= R[y])
            puts ("YES");
          else
            puts ("NO");
        }
    }
  return 0;
}
