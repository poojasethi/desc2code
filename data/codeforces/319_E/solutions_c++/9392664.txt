#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
const int X=4000005;
int f[100005],cnt,i,A,B,C,T,n,rt,ll[100005],rr[100005],CC;
struct node {int l,r; vector<int> a;} p[X];
int getf(int k) {return f[k]==k?f[k]:f[k]=getf(f[k]);}
void Update(int &x,int l,int r,int LL,int RR)
{
    if (!x) x=++cnt;
    if (l>=LL && r<=RR)
    {
        p[x].a.push_back(T);
        return;
    }
    int mid=(l+r)/2;
    if (mid==r) mid--;
    if (LL<=mid) Update(p[x].l,l,mid,LL,min(mid,RR));
    if (RR>mid) Update(p[x].r,mid+1,r,max(mid+1,LL),RR);
}
void work(int x,int l,int r,int t)
{
    if (!x) return;
    for (int i=0; i<p[x].a.size(); i++) {int X=p[x].a[i]; ll[T]=min(ll[T],ll[getf(X)]); rr[T]=max(rr[T],rr[getf(X)]);f[getf(X)]=T;}
    p[x].a.clear();
    int mid=(l+r)/2;
    if (mid==r) mid--;
    if (t<=mid) work(p[x].l,l,mid,t);
    if (t>mid) work(p[x].r,mid+1,r,t);
}
int main()
{
    scanf("%d",&n);
    for (i=1; i<=n; i++)
    {
        scanf("%d%d%d",&A,&B,&C);
        if (A==1) {T++; ll[T]=B; rr[T]=C; f[T]=T;work(rt,-1e9,1e9,B);work(rt,-1e9,1e9,C);if (ll[T]<rr[T]-1)Update(rt,-1e9,1e9,ll[T]+1,rr[T]-1);} else
           {B=getf(B); C=getf(C); printf(B==C || ll[B]>ll[C] && ll[B]<rr[C]  ||
                                                 rr[B]>ll[C] && rr[B]<rr[C] ?"YES\n":"NO\n");}
    }
    return 0;
}
