#include<iostream>
#include<algorithm>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<vector>
using namespace std;
#define N 110000
#define INF 1000000000
struct rec2{
       int x,y;
       }a[N];
struct rec{
       vector<int> a;
}t[N*35];
int fa[N],n,m,num=0,lson[N*35],rson[N*35],root=0;
int find(int k){
    if(k==fa[k])return k;
    return fa[k]=find(fa[k]);
}
void merge(int x,int y){
     a[x].x=min(a[x].x,a[y].x);
     a[x].y=max(a[x].y,a[y].y);
     }
void hb(int u,int l,int r,int x){
     if(!u)return;
     int siz=t[u].a.size();
     for(int i=0;i<siz;i++){
       merge(m,find(t[u].a[i]));
       fa[find(t[u].a[i])]=m;
     }
     t[u].a.clear();
     if(l==r)return;
     int mid=(l+r)/2;
     if(mid==r)mid--;
     if(x<=mid)hb(lson[u],l,mid,x);
     else hb(rson[u],mid+1,r,x);
}
void cover(int &u,int l,int r,int x,int y){
     if(x>r || y<l)return;
     if(!u){u=++num,lson[u]=rson[u]=0;}
     if(x<=l && y>=r){
       t[u].a.push_back(m);
       return;
     }
     if(l==r)return ;
     int mid=(l+r)/2;
     if(mid==r)mid--;
     cover(lson[u],l,mid,x,y);
     cover(rson[u],mid+1,r,x,y);
}
int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
      int kk,x,y;
      scanf("%d%d%d",&kk,&x,&y);
      if(kk==1){
        ++m;a[m].x=x;a[m].y=y;
        fa[m]=m;
        hb(root,-INF,INF,x);
        hb(root,-INF,INF,y);
        if(a[m].y-a[m].x+1>=3)cover(root,-INF,INF,a[m].x+1,a[m].y-1);
      }
      else{
        x=find(x);y=find(y);
        if(x==y || (a[x].x>=a[y].x && a[x].y<=a[y].y && (a[x].x!=a[y].x || a[x].y!=a[y].y)))printf("YES\n");
        else printf("NO\n");
      }
    }
    return 0;
}
