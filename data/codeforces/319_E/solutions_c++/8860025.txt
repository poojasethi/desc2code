#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <cctype>
#include <vector>

using namespace std;

struct Tpoint
{
	int t,a,b;
};

int N,M,Num;
Tpoint E[100005],L[100005];
int c[200005],fa[100005];
vector<int> tree[400005];

int Find(int p)
{
	if (fa[p]!=p) fa[p]=Find(fa[p]);
	return fa[p];
}

void Update(int root,int le,int ri,int x)
{
	if ((le==70) && (ri==81))
		le=70;
	int len=tree[root].size();
	for (int i=0; i<len; i++)
	{
		E[Num].a=min(E[Num].a,E[tree[root][i]].a);
		E[Num].b=max(E[Num].b,E[tree[root][i]].b);
		fa[Find(tree[root][i])]=Num;
	}
	tree[root].clear();
	if (le==ri) return;
	int mid=(le+ri)/2;
	if (x<=mid) Update(2*root,le,mid,x); else Update(2*root+1,mid+1,ri,x);
}

void Add(int root,int le,int ri,int x,int y)
{
	if ((le==x) && (ri==y))
	{
		tree[root].push_back(Num);
		return;
	}
	int mid=(le+ri)/2;
	if (y<=mid) Add(2*root,le,mid,x,y);
	else if (x>mid) Add(2*root+1,mid+1,ri,x,y);
	else 
	{
		Add(2*root,le,mid,x,mid);
		Add(2*root+1,mid+1,ri,mid+1,y);
	}
}

void Init()
{
	scanf("%d",&N);
	for (int i=1; i<=N; i++)
	{
		scanf("%d%d%d",&L[i].t,&L[i].a,&L[i].b);
		if (L[i].t==1)
		{
			M++;
			c[M]=L[i].a;
			M++;
			c[M]=L[i].b;
		}
	}
	sort(c+1,c+M+1);
	M=unique(c+1,c+M+1)-c-1;
	for (int i=1; i<=N; i++)
		if (L[i].t==1)
		{
			L[i].a=lower_bound(c+1,c+M+1,L[i].a)-c;
			L[i].b=lower_bound(c+1,c+M+1,L[i].b)-c;
		}
}

void Solve()
{
	Num=0;
	int tmp=0;
	for (int i=1; i<=N; i++)
	{
		if (L[i].t==1) 
		{
			Num++;
			fa[Num]=Num;
			E[Num]=L[i];
			Update(1,1,M,L[i].a);
			Update(1,1,M,L[i].b);
			if (E[Num].a+1<E[Num].b) Add(1,1,M,E[Num].a+1,E[Num].b-1);
		}
		else
		{
			int x=Find(L[i].a), y=Find(L[i].b);
			if ((E[y].a<=E[x].a) && (E[x].b<=E[y].b)) printf("YES\n"); else printf("NO\n");
		}
	}
}

int main()
{
	//freopen("319E.in","r",stdin);
	//freopen("319E.out","w",stdout);
	Init();
	Solve();
	return 0;
}

