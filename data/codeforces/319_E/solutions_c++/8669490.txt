#include <cstdio>
#include <algorithm>
const int N = 3000000,M = 100000 + 9,MAX = 2000000001;
int n,lc[N],rc[N],f[M],left[M],right[M],cnt,L,R,V,rt,ec,son[N],lnk[N],nxt[N],m,test;
inline int getf(int x){return f[x] == x ? x : f[x] = getf(f[x]);}
void addedge(int x,int y)
{
	int fx = getf(x),fy = getf(y);
	f[fx] = fy;
	left[fy] = std::min(left[fy],left[fx]);
	right[fy] = std::max(right[fy],right[fx]);
}
void insert(int &idx,int l,int r)
{
	if (!idx) idx = ++cnt;
	if (L <= l && r <= R) {
		nxt[++ec] = son[idx]; lnk[son[idx] = ec] = V;
		// ++test;
		// printf("%d %d %d\n",l,r,V);
		return;
	}
	const int mid = (1ll*l + r) / 2;
	if (L <= mid) insert(lc[idx],l,mid);
	if (mid < R) insert(rc[idx],mid + 1,r);
}
void merge(int &idx,int l,int r)
{
	if (!idx) return;
	for (int &i = son[idx]; i; i = nxt[i]) {
		addedge(lnk[i],V);
	}
	if (l == r) return;
	const int mid = (1ll*l + r) / 2;
	if (L <= mid) merge(lc[idx],l,mid);
	else merge(rc[idx],mid + 1,r);
}
void addinterval(int idx,int l,int r)
{
	V = idx;
	L = l;
	merge(rt,1,MAX);
	L = r;
	merge(rt,1,MAX);
	L = left[m] + 1; R = right[m] - 1;
	if (L <= R) insert(rt,1,MAX);
}
void query(int l,int r)
{
	int x = getf(l),y = getf(r);
	//if (l > r) std::swap(l,r);
	puts((x == y || left[y] < left[x] && left[x] < right[y] || left[y] < right[x] && right[x] < right[y]) ? "YES" : "NO");
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("319E.in","r",stdin);
	freopen("319E.out","w",stdout);
	#endif
	scanf("%d",&n);
	//cnt = n;
	for (int t,x,y,i = 1; i <= n; ++i) {
		scanf("%d%d%d",&t,&x,&y);
		if (t == 1) {
			++m;
			f[m] = m;
			x += 1000000000 + 1;
			y += 1000000000 + 1;
			right[m] = y;
			left[m] = x;
			addinterval(m,x,y);
		}else query(x,y);
	}
	//printf("%d\n",ec);
}
