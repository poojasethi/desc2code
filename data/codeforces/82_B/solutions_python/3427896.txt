import sys

A_MAX = 200

class Number:
    number = 0
    count = 0
    hash = 0

    def __init__(self, number):
        self.number = number

    def __cmp__(self, other):
        assert isinstance(other, Number)
        return cmp(self.hash, other.hash)

numbers = [None] * A_MAX
for x in xrange(A_MAX): numbers[x] = Number(x + 1)

if __name__ == "__main__":
    n = int(raw_input())
    data = []

    for x in xrange(n*(n-1)/2):
        data.append(map(lambda x: int(x) - 1, raw_input().split()[1:]))

    for num_piece, piece in enumerate(data):
        for number in piece:
            numbers[number].count += 1
            numbers[number].hash += (num_piece + 1)**numbers[number].count

    numbers.sort(reverse=True)

    prev = 0
    answer = []

    for x in xrange(A_MAX):
        hash, number = numbers[x].hash, str(numbers[x].number)

        if hash == 0: break
        
        if prev == hash:
            answer[len(answer)-1].append(number)
        else:
            answer.append([number])

        prev = hash

    # dirty hack
    if n == 2:
        answer = [[str(answer[0][0])], map(str, answer[0][1:])]
    output = "\n".join(map(lambda l: str(len(l)) + " " + " ".join(l), answer))
    print output
