#!/usr/bin/python

#
# Generic memoizer
#
def memoize(f):
    cache= {}
    def memf(*x):
        if x not in cache:
            cache[x] = f(*x)
        return cache[x]
    return memf

w = raw_input()

M = [None] * 128
for i, v in enumerate("0123456789"):
    M[ord(v)] = i

M[ord('-')] = 62
M[ord('_')] = 63

for i, v in enumerate("abcdefghijklmnopqrstuvwxyz"):
    M[ord(v)] = 36 + i

for i, v in enumerate("ABCDEFGHIJKLMNOPQRSTUVWXYZ"):
    M[ord(v)] = 10 + i

MOD = 10**9 + 7

@memoize
def nmatches(nzeros):
    c = 0
    for x in range(1<<nzeros):
        for y in range(1<<nzeros):
            if (x & y) != 0:
                continue
            c += 1
    return c

#for k in range(10):
#    print k, nmatches(k)

zbits = 1
for _w in w:
    v = M[ord(_w)]
    b = bin(v)[2:]
    b = '0' * (6-len(b)) + b
    # print "v", v, b
    z = b.count("0")
    mm = nmatches(z)
    # print z
    zbits = (zbits * mm) % MOD

print zbits

# 1: 0 -> 00 01 10  = 3
# 2: 00 -> 00-00, 01-10, 10-01, 11-00, 01-00, 10-00

