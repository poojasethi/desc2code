#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <vector>
#include <string>
#include <stack>

using namespace std;

typedef pair<string,int> PSI;

const int MAXN=500000;

int m;
vector<PSI> a;
vector<int> e[MAXN];
vector<string> query;
int queryLen,ans;

PSI get()
{
	PSI ret;
	char ch;
	int cnt=0;
	ch=getchar();
	if(ch=='\n')
	{
		ret.second=-1;
		return ret;
	}
	while(1)
	{
		ch=getchar();
		cnt++;
		if(ch=='>')break;
		if(ch=='/')
		{
			if(cnt==1)ret.second=1;
			else ret.second=2;
			continue;
		}
		ret.first+=ch;
	}
	return ret;
}
void init()
{
	while(1)
	{
		PSI ret=get();
		if(ret.second==-1)break;
		a.push_back(ret);
	}
	stack<int> myStack;
	myStack.push(0);
	for(int i=0;i<a.size();++i)
	{
		if(a[i].second==0)myStack.push(i+1);
		if(a[i].second==1)
		{
			int now=myStack.top();myStack.pop();
			e[myStack.top()].push_back(now);
		}
		if(a[i].second==2)
			e[myStack.top()].push_back(i+1);
	}
}
int dfs(int x,int dep)
{
	int ret=0;
	if(dep<queryLen && a[x-1].first==query[dep])dep++;
	if(dep>=queryLen && a[x-1].first==query[queryLen-1])++ret;
	for(int i=0;i<e[x].size();++i)
		ret+=dfs(e[x][i],dep);
	return ret;
}
void solve()
{
	string str,ele;
	cin>>m;
	getchar();
	while(m--)
	{
		query.clear();
		getline(cin,str);
		stringstream sin(str);
		while(sin>>ele)query.push_back(ele);
		queryLen=query.size();
		int ans=0;
		for(int i=0;i<e[0].size();++i)
			ans+=dfs(e[0][i],0);
		cout<<ans<<endl;
	}
}
int main()
{
	init();
	solve();
	return 0;
}
