#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <stack>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

int V;
bool root[400000];
vector <int> child[400000];
string name[400000];
stack <int> st;

int N;
string query[210];
int dp[400000];

void open(string s){
    if(st.empty()) root[V] = true; else child[st.top()].push_back(V);
    st.push(V);
    name[V] = s;
    V++;
}

void close(string s){
    st.pop();
}

void dfs(int x, int val){
    int i;
    if(val < N && name[x] == query[val]) val++;
    dp[x] = val;
    REP(i,child[x].size()) dfs(child[x][i], val);
}

int func(void){
    int i;
    REP(i,V) if(root[i]) dfs(i, 0);
    int ans = 0;
    REP(i,V) if(dp[i] == N && name[i] == query[N-1]) ans++;
    return ans;
}

int main(void){
    int i;
    
    string s;
    cin >> s;
    REP(i,s.length()) if(s[i] == '<' || s[i] == '>') s[i] = ' ';
    istringstream ss(s);
    
    while(ss >> s){
        if(s[0] == '/'){
            close(s.substr(1));
        } else if(s[s.length()-1] == '/'){
            open(s.substr(0,s.length()-1));
            close(s.substr(0,s.length()-1));
        } else {
            open(s);
        }
    }
    
    int Q;
    cin >> Q;
    
    string t;
    getline(cin, t);
    
    REP(i,Q){
        getline(cin, t);
        istringstream ss2(t);
        N = 0;
        while(ss2 >> query[N]) N++;
        int ans = func();
        cout << ans << endl;
    }
    
    return 0;
}
