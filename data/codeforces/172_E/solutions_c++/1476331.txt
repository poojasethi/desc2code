#include<cstdio>
#include<string>
#include<vector>
#include<cstdlib>

#define rep(i,n) for(int i=0;i<(n);i++)

using namespace std;

typedef long long ll;

ll hash(const char *s,int n){
	ll res=0;
	rep(i,n) res=27*res+(s[i]-'a'+1);
	return res;
}

int n;
ll label[250001];
vector<int> G[250001];

int idx;
char s[1000001];

void build_tree(int u){
	while(1){
		if(!s[idx]) break;
		if(s[idx+1]=='/'){
			idx++;
			while(s[idx] && s[idx]!='<') idx++;
			break;
		}

		int v=n++,l=idx++;
		while(s[idx] && s[idx]!='<') idx++;
		if(s[idx-2]=='/'){
			label[v]=hash(s+l+1,idx-l-3);
			G[u].push_back(v);
		}
		else{
			label[v]=hash(s+l+1,idx-l-2);
			G[u].push_back(v);
			build_tree(v);
		}
	}
}

int n_seq;
ll seq[256];

int query(int u,int i){ // 今見ている頂点, seq の何番目までマッチしたか
	int ans=0;
	if(i<n_seq && label[u]==seq[i]) i++;
	if(i==n_seq && label[u]==seq[n_seq-1]) ans++;
	rep(j,G[u].size()) ans+=query(G[u][j],i);
	return ans;
}

int main(){
	gets(s);

	label[0]=hash("@",1);
	build_tree(n++);

	static char t[1000001];
	int q=atoi(gets(t));
	while(q--){
		gets(t);
		n_seq=0;
		for(int i=0,pre=0;;i++){
			if(!t[i] || t[i]==' '){
				seq[n_seq++]=hash(t+pre,i-pre);
				pre=i+1;
				if(!t[i]) break;
			}
		}
		printf("%d\n",query(0,0));
	}

	return 0;
}
