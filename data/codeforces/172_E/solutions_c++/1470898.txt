#include <string>
#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

#define pb push_back
#define mp make_pair
#define x first
#define y second

using namespace std ;

typedef long long LL ;

const int N = 1000010 ;

int n ;
int h[N], e[N], ne[N], idx ;
int stack[N] ;
string v[N] ;
char str[N] ;

void add (int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;
}

void init ()
{
    memset (h, -1, sizeof h) ;
    vector<pair<string,bool> >ss ;
    for (int i = 0; str[i]; i ++ )
    {
        string s ;
        int t = i + 1, flag = 0 ;
        if (str[t] == '/') t ++, flag = 1 ;
        while (str[t] != '/' && str[t] != '>') s += str[t ++ ] ;
        ss.pb (mp (s, flag)) ;
        if (str[t] == '/') ss.pb (mp (s, 1)), t ++ ;
        i = t ;
    }
    int top = 0 ;
    for (int i = 0; i < ss.size (); i ++ )
        if (!ss[i].y)
        {
            stack[ ++ top] = ++ n, v[n] = ss[i].x ;
            add (stack[top - 1], n) ;
        }
        else top -- ;
}

int dfs (int u, int pos, vector<string> &ss)
{
    int res = 0 ;
    if (pos == ss.size () - 2 && ss[pos + 1] == v[u]) res = 1 ;
    if (pos < (int)ss.size () - 2 && ss[pos + 1] == v[u]) pos ++ ;
    for (int i = h[u]; ~i; i = ne[i])
        res += dfs (e[i], pos, ss) ;
    return res ;
}

int main ()
{
    scanf ("%s", str) ;
    init () ;
    int m ;
    vector<string>ss ;
    scanf ("%d", &m), gets (str) ;
    while (m -- )
    {
        ss.clear () ;
        gets (str) ;
        int l = strlen (str) ;
        for (int i = 0; i < l; i ++ )
        {
            int t = i ;
            string s ;
            while (t < l && str[t] != ' ') s += str[t ++ ] ;
            i = t ;
            ss.pb (s) ;
        }
        printf ("%d\n", dfs (0, -1, ss)) ;
    }
    return 0 ;
}
