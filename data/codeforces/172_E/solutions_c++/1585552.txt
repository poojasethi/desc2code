#include<iostream>
#include<sstream>
#include<cstdio>
#include<string>
#include<vector>
#include<map>

using namespace std;

const int maxn = 1000010;

int tot;
map<string,int> code;

int n , tag[maxn];
int par[maxn];
vector<int> son[maxn];
vector<int> aim;

int caln( string str )
{
	int &w = code[str];
	if ( w == 0 ) w = ++tot;
	
	return w;
}

void input()
{
	string data; cin >> data;
	
	int t = 0;
	for ( int i = 0 , j = 0 , len = (int) data.size() ; i < len ; i++ )
		if ( data[i] == '>' )
		{
			string str = data.substr( j + 1 , i - j - 1 );
			j = i + 1;
			
			int m = (int) str.length();
			if ( str[0] == '/' )
			{
				t = par[t];
			} else
			if ( str[m - 1] == '/' )
			{
				son[t].push_back( ++n );
				par[n] = t;
				tag[n] = caln( str.substr( 0 , m - 1 ) );
			} else
			{
				son[t].push_back( ++n );
				par[n] = t;
				tag[n] = caln( str.substr( 0 , m ) );
				t = n;
			}
		}
}

int search( int t , int c )
{
	int ret = 0;
	
	if ( tag[t] == aim[c] )
	{
		if ( c == (int) aim.size() - 1 ) ret++;
			else c++;
	}
	
	for ( int i = 0 ; i < (int) son[t].size() ; i++ )
	{
		int nt = son[t][i];
		ret += search( nt , c );
	}
	
	return ret;
}

void solve()
{
	int T; scanf( "%d" , &T );
	getchar();
	while ( T-- )
	{
		string data; getline( cin , data , '\n' );
		stringstream scin( data );
		
		aim.clear();
		for ( string str ; scin >> str; aim.push_back( caln( str ) ) );
		
		int ans = search( 0 , 0 );
		printf( "%d\n" , ans );
	}
	
}

int main()
{
	//freopen( "172E.in" , "r" , stdin );
	//freopen( "172E.out" , "w" , stdout );
	
	input();
	solve();
	
	return 0;
}
