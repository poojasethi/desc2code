#include <cstdio>
#include <vector>
#include <string>
#include <cctype>
using namespace std;

const int MAXN = 1000000 + 1;

int poolPnt, textPnt;
char text[MAXN];

struct BHTML {
	string name;
	vector <int> enclose;

	BHTML() {
		enclose.clear();
	}

	BHTML(string name) : name(name) {
		enclose.clear();
	}
};

BHTML html[MAXN];

int stack[MAXN];

void init() {
	gets(text);
	int depth = 0, textPnt = 0;
	stack[0] = poolPnt = 0;
	html[poolPnt++] = BHTML("");
	while (text[textPnt] != '\0') {
		int endPnt;
		if (text[textPnt + 1] == '/') {
			for (endPnt = textPnt + 2; islower(text[endPnt]); endPnt++) ;
			textPnt = endPnt + 1;
			depth--;
		} else {
			int len = 0;
			char token[11];
			for (endPnt = textPnt + 1; islower(text[endPnt]); endPnt++) {
				token[len++] = text[endPnt];
			}
			token[len] = '\0';
			html[poolPnt] = BHTML(token);
			stack[depth + 1] = poolPnt;
			html[stack[depth]].enclose.push_back(poolPnt++);
			if (text[endPnt] == '/') {
				textPnt = endPnt + 2;
			} else {
				textPnt = endPnt + 1;
				depth++;
			}
		}
	}
}

vector <string> rule;
int m, res;

void calc(int best, const BHTML & bhtml) {
	if (bhtml.name == rule[best]) {
		if (best + 1 == m) {
			res++;
		} else {
			best++;
		}
	}
	for (vector <int>::const_iterator it = bhtml.enclose.begin(); it != bhtml.enclose.end(); it++) {
		calc(best, html[*it]);
	}
}

int main() {
	init();
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		char token[11];
		rule.clear();
		do {
			scanf("%s", token);
			rule.push_back(token);
		} while (getchar() == ' ');
		m = rule.size();
		res = 0;
		calc(0, html[0]);
		printf("%d\n", res);
	}
	return 0;
}