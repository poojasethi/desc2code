#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <cctype>
#include <ctime>
#include <cstring>
#include <cmath>
#include <string>
#include <map>
#include <set>
#include <iostream>
#include <map>
#include <sstream>
#include <algorithm>
#include <vector>
#define mp make_pair
#define pb push_back
#define fs first
#define sc second
#define sz(a) ((int) (a).size())
#define taskname "e"
using namespace std;

const int N = (int) 1e6;
vector<int> adj[N], all;
vector<string> tags;
string name[N], token;
char s[N + 1];
int total, pos, par, cur, ans, m;

void next_token() {
	token = "";
	while (isalpha(s[pos]))
		token += s[pos++];
}

void dfs(int v, int pos) {
	if (name[v] == tags[pos]) {
		if (pos == sz(tags) - 1)
			++ans;
		else
			++pos;
	}
	for (int j = 0; j < sz(adj[v]); ++j)
		dfs(adj[v][j], pos);
}

int main() {
	//freopen(taskname".in", "r", stdin);
	//freopen(taskname".out", "w", stdout);
	scanf("%s", s);
	pos = 0, all.pb(0), total = 1;
	while (s[pos]) {
		par = all.back(), pos++;
		if (s[pos] == '/') {
			++pos;
			next_token();
			all.pop_back();
			++pos;
		} else {
			cur = total++;
			next_token();
			name[cur] = token;
			adj[par].pb(cur);
			if (s[pos] == '/')
				++pos;
			else
				all.pb(cur);
			++pos;
		}
	}
	scanf("%d\n", &m);
	for (int i = 0; i < m; ++i) {
		fgets(s, N, stdin);
		tags.clear();
		ans = 0, pos = 0;
		while (isalpha(s[pos])) {
			next_token();
			tags.pb(token);
			++pos;
		}
		dfs(0, 0);
		printf("%d\n", ans);
	}
	return 0;
}