#include <cstdio>
#include <cstring>
#include <string>
#include <sstream>
#include <vector>
#include <cctype>

using namespace std;

const int MAXL = 1024 * 1024;

class Node {
public:
	string name;
	vector<Node *> children;

	~Node() {
		for (int i = 0; i < children.size(); i++) {
			delete children[i];
		}
	}


};

inline void ASSERT(bool x) {
	if (!x) {
		while (true) {
			puts("OLEOLEOLE!");
		}
	}
}

char html[MAXL];
int ptr;

Node * readNode() {
	Node * node = new Node;
	while (html[ptr] != '>' && html[ptr] != '/') {
		ASSERT(islower(html[ptr]));
		node->name.push_back(html[ptr++]);
	}
	if (html[ptr] == '/') { // <a/>
		ASSERT(html[++ptr] == '>');
		ptr++;
	} else { // <a>
		ASSERT(html[ptr++] == '>');
		while (true) {
			ASSERT(html[ptr++] == '<');
			if (html[ptr] == '/') { // <a></a>
				ptr++;
				for (int i = 0; i < node->name.size(); i++) {
					ASSERT(html[ptr++] == node->name[i]);
				}
				ASSERT(html[ptr++] == '>');
				break;
			} else { // <a><b>
				node->children.push_back(readNode());
			}
		}
	}
	return node;
}

int ans;
char line[2200];
vector<string> words;

void query(int pos, Node * node) {
	if (node->name == words[pos]) {
		if (pos + 1 == words.size()) {
			ans++;
		} else {
			pos++;
		}
	}
	for (int i = 0; i < node->children.size(); i++) {
		query(pos, node->children[i]);
	}
}

int main() {
	gets(html);
	ptr = 0;
	vector<Node *> roots;
	while (html[ptr++] == '<') {
		roots.push_back(readNode());
	}
	
	int q;
	scanf("%d", &q);
	while (getchar() != '\n');
	while (q-- > 0) {
		gets(line);
		istringstream sin(line);
		words.clear();
		string word;
		while (sin >> word) {
			words.push_back(word);
		}
		ans = 0;
		for (int i = 0; i < roots.size(); i++) {
			query(0, roots[i]);
		}
		printf("%d\n", ans);
	}

	for (int i = 0; i < roots.size(); i++) {
		delete(roots[i]);
	}
	return 0;
}
