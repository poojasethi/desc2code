#include <cstdio>
#include <iostream>
#include <vector>
#include <map>
#include <sstream>

using namespace std;

#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define readString(s, i) while (buf [i] != '>') { s += string(1, buf [i]) ; i ++ ; }

struct Node {
  int id ;
  vector<Node> c ;
  Node *parent ;
} ;

//string code ;
int curId, sol ;
Node root ;
map<string, int> s2i ;
map<int, string> i2s ;
vector<int> v ;

void go(int check, Node *cur) {
  if (v [check] == cur->id) {
    if (check == v.size() - 1) sol ++ ;
    else check ++ ;
  }
  for (int i = 0 ; i < cur->c.size() ; i ++)
    go(check, &cur->c [i]) ;
}

int main() {
  char buf [1000005] ;
  scanf("%s", buf) ;
  //code = string(buf) ;
  //delete [] buf ;

  curId = 0 ;
  Node *curNode = &root ;
  s2i [" "] = curId ; i2s [curId] = " " ;
  curNode->id = curId ; curNode->parent = NULL ;
  curId ++ ;

  for (int i = 0 ; buf [i] ; i ++) {
    string cur = "" ;
    i ++ ;
    readString(cur, i) ;
    if (cur [cur.size() - 1] == '/') {
      cur = cur.substr(0, cur.size() - 1) ;
      if (s2i.count(cur) == 0) {
        s2i [cur] = curId ; i2s [curId] = cur ;
        curId ++ ;
      }
      Node next ;
      next.id = s2i [cur] ; next.parent = curNode ;
      curNode->c.push_back(next) ;
    }
    else {
      if (cur [0] == '/') {
        curNode = curNode->parent ;
      } else {
        if (s2i.count(cur) == 0) {
          s2i [cur] = curId ; i2s [curId] = cur ;
          curId ++ ;
        }
        Node next ;
        next.id = s2i [cur] ; next.parent = curNode ;
        curNode->c.push_back(next) ;
        curNode = &curNode->c.back() ;
      }
    }
  }
  int nq ;
  scanf("%d", &nq) ;
  gets(buf) ;
  for (int iq = 0 ; iq < nq ; iq ++) {
    gets(buf) ;
    string s = string(buf), cur ;
    istringstream in(s) ;
    v.clear() ;
    bool ok = true ;
    while (!in.eof()) {
      in >> skipws >> cur >> ws ;
      if (s2i.count(cur) == 0) ok = false ;
      else v.push_back(s2i [cur]) ;
    }
    if (!ok) printf("0\n") ;
    else {
      sol = 0 ;
      go(0, &root) ;
      cout << sol << endl ;
    }
  }
  return 0 ;
}
