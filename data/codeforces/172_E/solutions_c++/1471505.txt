#include <stdio.h>
#include <string.h>
#include <memory.h>
char node[2000005][11], buf[1000005], s[203][11];
int t = 0, pn[203];
int process( char s[][11], int n ) {
    int st = -1, i, r = 0, n1 = n - 1;
    //for ( i = 0; i < n; ++i ) printf( "%s ", s[i] );
    //puts("");
    memset( pn, 0, ( n + 1 ) << 2 );
    for ( i = 0; i < t; ++i ) {
        if ( node[i][0] == '/' ) {
            if ( st < 0 ) continue;
            if ( strcmp( node[i] + 1, s[st] ) == 0 ) {
                --pn[st];
                if ( pn[st] == 0 ) --st;
            }
        }
        else {
            if ( st < n1 && strcmp( node[i], s[st+1] ) == 0 ) {
                ++st;
                pn[st] = 1;
                if ( st == n1 ) ++r;
            }
            else if ( st >= 0 && strcmp( node[i], s[st] ) == 0 ) {
                ++pn[st];
                if ( st == n1 ) ++r;
            }
        }
        //printf( "%d  ###\n", st );
    }
    return r;
}
int main( int argc, char *argv[] )
{
    scanf( "%s", buf );
    int i, j;
    for ( i = 0; buf[i]; ++i ) {
        if ( buf[i] == '<' ) {
            ++i;
            for ( j = 0; buf[i+j] != '>'; ++j ) node[t][j] = buf[i+j];
            if ( buf[i+j-1] == '/' ) {
                node[t][j-1] = 0;
                strcpy( node[t+1] + 1, node[t] );
                node[t+1][0] = '/';
                t += 2;
            }
            else {
                node[t][j] = 0;
                ++t;
            }
            i += j;
        }
    }
    int m, n;
    //for ( i = 0; i < t; ++i ) printf( "%s ", node[i] );
    //putchar( '\n' );
    scanf( "%d", &m );
    getchar();
    while ( m-- ) {
        gets( buf );
        n = 0;
        for ( i = 0; buf[i]; ++i ) {
            if ( buf[i] != ' ' ) {
                for ( j = 0; buf[i+j] != ' ' && buf[i+j]; ++j ) {
                    s[n][j] = buf[i+j];
                }
                s[n][j] = 0;
                ++n;
                i += j - 1;
            }
        }
        printf( "%d\n", process( s, n ) );
    }
    return 0;
}
