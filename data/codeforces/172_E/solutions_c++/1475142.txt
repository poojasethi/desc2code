#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
using namespace std;

map<string, int> ID;
int getID(string name, int forget=0) {
	if(ID.find(name)==ID.end()) {
		if(forget) return -1;
		int t=ID.size()+1;
		ID[name] = t;
	}
	return ID[name];	
}

int node[500005];
int parent[500005];
int stack[500005], top, n;
vector<int> r[500005];

char input[1000005];
int retID;
int parse(int &x) {
	char c;
	char w[15];
	int m=0;
	if(!(c=input[x]) || c!='<') return 0;
	++x;
	while((w[m]=input[x]) && input[x]!='>') m++,x++;
	++x;
	w[m]=0;
	if(w[0]=='/') return -1;
	if(w[m-1]=='/') {
		w[m-1]=0;
		retID = getID(w);
		return 1;
	}
	retID = getID(w);
	return 2;
}

int go(int x, int i, int f[]) {
	int ret=0;
	if(node[x] == f[i]) {
		if(i==0) ++ret;
		else --i;
	}
	for(int j=0;j<(int)r[x].size();j++) {
		ret += go(r[x][j], i, f);
	}
	return ret;
}

char query[500005];
int main(void) {
	parent[0] = 0;
	node[0] = 0;
	stack[top++] = 0;
	n = 1;
	int v, x=0;
	scanf("%s", input);
	while((v = parse(x)) != 0) {
		if(v<0) { --top; continue; }
		r[stack[top-1]].push_back(n);
		node[n] = retID;
		parent[n] = stack[top-1];
		if(v==2) stack[top++] = n;
		n++;
	}
	int Q;
	scanf("%d", &Q);
	gets(query);
	while(Q--) {
		gets(query);
		int offset=0, no;
		char w[15]={};
		int f[205],m=0;
		while(sscanf(query+offset, "%s%n", w, &no)>0) {
			offset += no; 
			f[m++] = getID(w, 1);
		}
		reverse(f, f+m);
		int ans = go(0, m-1, f);
		printf("%d\n", ans);
	}
	return 0;
}

