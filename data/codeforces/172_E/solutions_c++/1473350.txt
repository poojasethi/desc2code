#include <queue>
#include <cstdio>
#include <vector>
#include <string>
#include <cstring>
#include <sstream>
#include <iostream>
using namespace std;

vector < int > f[1 << 20];
vector < string > s;
vector < int > st;
vector < string > t;

char buf[1 << 20];
int dp[1 << 20];
string q;

queue < int > qq;

void read() {
	string w;
	int i , j;
	int next = 0;
	
	scanf ( "%s" , buf );
	q = (string)buf;
	
	st.push_back ( 0 );
	s.push_back ( "_a" );
	
	for (i = 0; i < (int)q.size(); i++) {
		if ( q[i] == '<' ) {
			if ( q[i + 1] == '/' ) {
				st.pop_back();
			} else {
				w = "";
				for (j = i + 1; j < (int)q.size(); j++) {
					if ( q[j] < 'a' || q[j] > 'z' ) {
						break;
					}
					w += q[j];
				}
				
				++ next;
				s.push_back ( w );
				f[ st.back() ].push_back ( next );
				
				if ( q[j] != '/' ) {	
					st.push_back ( next );
				}
			}
		}
	}
}

void solve() {
	string w;
	int ans = 0;
	int queries , x , i;
	
	
	scanf ( "%d\n" , &queries );
	while ( queries -- ) {
		gets ( buf );
		q = (string)buf;
		istringstream in ( q );
		t.clear();
		
		while ( in >> w ) {
			t.push_back ( w );
// 			printf ( "%s " , w.c_str() );
		}
// 		printf ( "\n" );
		
		memset ( dp , -1 , sizeof dp );
		ans = 0;
		dp[0] = -1;
		qq.push ( 0 );
		
		while ( !qq.empty() ) {
			x = qq.front();
			qq.pop();
			
// 			printf ( "%d %d     %s\n" , x , dp[x] , s[x].c_str() );
			
			if ( dp[x] < (int)t.size() - 1 && t[ dp[x] + 1 ] == s[x] ) {
				++ dp[x];
			}
			
			if ( dp[x] == (int)t.size() - 1 && t[ dp[x] ] == s[x] ) {
				++ ans;
			}
			
			for (i = 0; i < (int)f[x].size(); i++) {
				dp[ f[x][i] ] = dp[x];
				qq.push ( f[x][i] );
			}
		}
		
		printf ( "%d\n" , ans );
// 		return ;
	}
}

int main() {
	read();
	solve();
	
	return 0;
}
