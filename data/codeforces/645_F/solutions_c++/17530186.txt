#include <bits/stdc++.h>
using namespace std;

typedef __int64 LL;

const LL MOD = 1000000007;
const int MAXN = 200005;
const int MAXA = 1000005;
int N, K, Q, A[MAXN];
int use[MAXA], phi[MAXA], cnt[MAXA];
vector<int> divisors[MAXA];
LL bin[MAXN], res;

LL inv(LL a, LL p)
{
    if(a == 1) return 1;
    return (p - p / a) * inv(p % a, p) % p;
}


void init()
{
    for(int i=1;i<MAXA;i++)phi[i]=i;
    for(int i = 1; i < MAXA; i++)
    {
        for(int j = i; j < MAXA; j += i)
        {
            if(i != j) phi[j] -= phi[i];
            if(use[j]) divisors[j].push_back(i);
        }
    }
    bin[K - 1] = 1;
    for(int i = K; i < MAXN; i++)
    {
        bin[i] = bin[i - 1] * i % MOD * inv(i - K + 1, MOD) % MOD;
    }
    //for(int i=K;i<10;i++)printf("%I64d ",bin[i]);printf("\n");
}

int main()
{
    #ifdef DouBi
    freopen("in.cpp","r",stdin);
    #endif // Doubi
    scanf("%d%d%d", &N, &K, &Q);
        for(int i = 0; i < N + Q; i++)
        {
            scanf("%d", &A[i]);
            use[A[i]] = 1;
        }
        init();
        res=0;
        for(int i = 0; i < N + Q; i++)
        {
            //printf("%d\n",divisors[A[i]].size());
            for(int j=0; j<divisors[A[i]].size(); j++)
            {
                int d=divisors[A[i]][j];
                res = (res + bin[cnt[d]] * phi[d]) % MOD;
                cnt[d] += 1;
            }
            if(i >= N)
            {
                printf("%I64d\n", res);
            }
        }
    return 0;
}

 		 			        			 			  		  	