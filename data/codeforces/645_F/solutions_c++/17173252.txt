#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAXN = 1000005,Mo = int(1e9) + 7;

typedef long long LL;

int C[MAXN],Miu[MAXN],N,K,Q,Sum;
int Fac[MAXN],Rev[MAXN],Fai[MAXN];

int Pow(int a,int b)
{
	if (!b) return 1;
	LL mid = Pow(a,b >> 1);
	mid = mid * mid % Mo;
	if (b & 1) mid = mid * a % Mo;
	return mid;
}

int GetC(int n,int m)
{
	if (n < m) return 0;
	return Fac[n] * 1ll * Rev[m] % Mo * Rev[n - m] % Mo;
}

void Pre_Treat()
{
	static int Stack[MAXN];
	int top = 0,Lim = 1000000;
	Fai[1] = 1;
	for(int i = 2;i <= Lim;i ++)
	{
		if (!Fai[i]) Stack[++ top] = i,Fai[i] = i - 1;
		for(int j = 1;i * Stack[j] <= Lim;j ++)
		{
			if (i % Stack[j] == 0)
			{
				Fai[i * Stack[j]] = Fai[i] * Stack[j];
				break;
			}
			Fai[i * Stack[j]] = Fai[i] * Fai[Stack[j]];
		}
	}
}

int Add(int x)
{
	static int Fact[MAXN],Lar[MAXN],G[MAXN];
	int tot = 0,ctot = 0;
	for(int i = 1;i * i <= x;i ++)
		if (x % i == 0)
		{
			Fact[++ tot] = i;
			if (i != x / i) Lar[++ ctot] = x / i;
		}
	for(int i = ctot;i;i --) Fact[++ tot] = Lar[i];
	int tmp = 0;
	for(int i = tot;i;i --)
	{
		G[Fact[i]] = GetC(C[Fact[i]],K - 1);
		C[Fact[i]] ++;
		tmp = (tmp + G[Fact[i]] * 1ll * Fai[Fact[i]]) % Mo;
	}		
	return tmp;
}

int main()
{
	//freopen("data.in","r",stdin),freopen("data.out","w",stdout);
	scanf("%d%d%d", &N, &K, &Q);
	Fac[0] = 1;
	int L = max(N + Q,K);
	for(int i = 1;i <= L;i ++) Fac[i] = Fac[i - 1] * 1ll * i % Mo;
	Rev[L] = Pow(Fac[L],Mo - 2);
	for(int i = L;i;i --) Rev[i - 1] = Rev[i] * 1ll * i % Mo;
	Pre_Treat();
	int Sum = 0;
	for(int i = 1,x;i <= N;i ++)
	{
		scanf("%d", &x);
		Sum = (Sum + Add(x)) % Mo;
	}
	for(int i = 1,x;i <= Q;i ++)
	{
		scanf("%d", &x);
		Sum = (Sum + Add(x)) % Mo;
		printf("%d\n", Sum);
	}
	return 0;
}
