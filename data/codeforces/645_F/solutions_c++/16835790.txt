#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cmath>
#include <climits>
#include <algorithm>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <cassert>
#include <vector>
#define all(x) x.begin() , x.end()
#define fi first
#define se second
#define pb push_back
#define umax( x , y ) x = max( x , (y) )
#define umin( x , y ) x = min( x , (y) )
#define For( i , a ) for(int i=1;i<=a;i++)
#define ort (((b+s) < 0 )? (b+s)/2-1:(b+s)/2)
#define y2 asrwjaelkf
#define y1 asseopirwjaelkf

using namespace std;

inline int read() {
	int res = 0 ;int neg ;
	while(true){char ch = getchar();if(ch>='0' && ch<='9' || ch=='-'){if(ch=='-') neg = -1;else neg = 1 , res = ch-'0';break;} }
	while(true){char ch = getchar();if(ch>='0' && ch<='9') res*=10 , res+=ch-'0';else break;}
	return res*neg;
}

const int maxn = 100020;
const int maxx = 1000000;
const int maxm = 1000020;
const int MOd = 1e9+7;

typedef long long Lint;
typedef double db;
typedef pair<int,int> ii;
typedef pair<ii,int> iii;

int a, k, q;
int m[maxm], h[maxm], cnt[maxm];
vector<int> w[maxm];

int mul( int a, int b ) {
	return (Lint)a * b % MOd;
}

int add( int a, int b ) {
	return a+b>=MOd? a+b-MOd:a+b;
}

int ext( int a, int b ) {
	return a-b<0? a-b+MOd:a-b;
}

int us( int x, int y ) {
	int z = 1;
	while( y ) {
		if( y&1 ) z = mul( z, x );
		x = mul( x, x );
		y >>= 1;
	}
	return z;
}

int main() {
	
	scanf("%d %d %d",&a,&k,&q);
	for(int i=1;i<=maxx;i++) m[i] = i;

	for(int i=1;i<=maxx;i++) {
		for(int j=i;j<=maxx;j+=i) {
			if( i != j ) m[j] -= m[i];
			w[j].pb( i );
		}
	}
	h[k] = 1;
	for(int i=k+1;i<=maxx;i++) {
		h[i] = mul( h[i-1], mul( i, us( i-k, MOd-2 ) ) );
	}
	int ans = 0;
	for(int i=1,k;i<=a+q;i++) {
		scanf("%d",&k);
		for(int j=0;j<w[k].size();j++) {
			int t = w[k][j];
			//~ printf("asd %d %d -- %d %d\n",t,m[t],cnt[t],ans);
			ans = ext( ans, mul( h[cnt[t]], m[t] ) );
			cnt[t]++;
			ans = add( ans, mul( h[cnt[t]], m[t] ) );
		}
		if( i > a )
			printf("%d\n",ans);
	}
	
	return 0;
}
