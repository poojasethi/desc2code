#include<cstdio>
#include<vector>
using namespace std;
long long cnt[2200000],con[2200000],a[2200000],vis[2200000];
long long cnk[2200000],fac[2200000],anti[2200000];
const long long mod=1000000007;
long long n,k,q,ans;
vector<long long>div[2200000];
inline long long sqr(long long x)
{
	return x*x%mod;
}
inline long long fastexp(long long x,long long y)
{
	if(y==0)return 1;
	if(y==1)return x;
	if(y%2==0)return sqr(fastexp(x,y/2));
	return sqr(fastexp(x,y/2))*x%mod;
}
inline long long C(long long x,long long y)
{
	if(x<y)return 0;
	return (fac[x]*anti[y]%mod)*anti[x-y]%mod;
}
inline void precalc()
{
	fac[0]=1;
	anti[0]=1;
	for (long long i=1;i<=1000000;i++)
	{
		fac[i]=fac[i-1]*i%mod;
		anti[i]=fastexp(fac[i],mod-2);
		con[i]=i;
	}
	for (long long i=1;i<=1000000;i++)
	{
		if(vis[i]==1)div[i].push_back(i);
		for (long long j=i+i;j<=1000000;j+=i)
		{
			if(vis[j]==1)div[j].push_back(i);
			con[j]-=con[i];
		}
	}
}
int main()
{
	scanf("%I64d %I64d %I64d",&n,&k,&q);
	for (long long i=1;i<=n+q;i++)
	{
		scanf("%I64d",&a[i]);
		vis[a[i]]=1;
	}
	precalc();
	for (long long i=1;i<=n+q;i++)
	{
		for (long long j=0;j<div[a[i]].size();j++)
		{
			long long tmp=div[a[i]][j];
		//	printf("%I64d %I64d\n",a[i],tmp);
			cnt[tmp]++;
			ans+=((C(cnt[tmp],k)-C(cnt[tmp]-1,k)+mod)%mod)*con[tmp]%mod;
			ans%=mod;
		}
		if(i>n)
		{
			printf("%I64d\n",ans);
		}
	}
	return 0;
}
