#include <bits/stdc++.h>

#define fi first
#define se second
#define mm ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)
#define inf 1000000009
#define max3(a,b,c) max((a),max((b),(c)))
#define bit(k) (1ll<<(k))
#define fbit(k,i) ((k) & (bit(i)))
#define count(a) __builtin_popcount(a)
#define pq priority_queue
#define all(v) v.begin(),v.end()
#define type(x) __typeof(x.begin())
#define foreach(v,it) for(type(v) it=v.begin(); it!=v.end();it++)

using namespace std;

typedef double db;
typedef long long lint;
typedef pair <int,int> ii;
typedef pair <ii,int> iii;
typedef vector <int> vi;
typedef vector <ii> vii;

const int maxn=1e6+20,mod=1e9+7,lim=1e6;

int N,K,Q,sum,combk[maxn],cnt[maxn],p[maxn],inv[maxn];
vi divi[maxn];

int carp(int a,int b){
	lint x=1ll*a*b;
	x-=x/mod*mod;
	return x;
}

int top(int a,int b){return a+b >= mod ? a+b-mod: a+b;}

void pre_cal(){
	inv[1]=1;
	p[1]=1;
	
	for(int i=2;i<=lim;i++){
		p[i]=i;
		inv[i]=carp((mod-mod/i),inv[mod%i]);
	}

	for(int i=1;i<=lim;i++)
		for(int j=i;j<=lim;j+=i){
			if(i!=j) p[j]-=p[i];
			divi[j].push_back(i);
		}

	combk[K]=1;
	for(int i=K+1;i<=lim;i++)
		combk[i]=carp(carp(combk[i-1],i),inv[i-K]);
}

void add(int a){
	foreach(divi[a],it){
		int x=*it;
		
		sum=top(sum,carp(p[x],(top(mod,combk[cnt[x]+1] - combk[cnt[x]]))));
		
		//~ printf("%d , %d | %d , cnt[x]=%d \n",a,x,sum,cnt[x]);
		
		cnt[x]++;
	}
}

int main(){
	cin >> N >> K >> Q;

	pre_cal();
	for(int i=1;i<=N;i++){
		int a;
		scanf("%d",&a);
		add(a);
	}
	
	for(int i=1;i<=Q;i++){
		int a;
		scanf("%d",&a);
		add(a);
		printf("%d\n",sum);
	}
	
	return 0;
}
