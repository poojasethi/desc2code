#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define orta (bas + son >> 1)
#define sag (k + k + 1)
#define sol (k + k)
#define endl '\n'
#define foreach(i,x) for(type(x)i=x.begin();i!=x.end();i++)
#define FOR(ii,aa,bb) for(int ii=aa;ii<=bb;ii++)
#define ROF(ii,aa,bb) for(int ii=aa;ii>=bb;ii--)
#define mp make_pair
#define nd second
#define st first
#define type(x) __typeof(x.begin())

typedef pair < int ,int > pii;

typedef long long ll;

const long long linf = 1e18+5;
const int mod = (int) 1e9 + 7;
const int logN = 17;
const int inf = 1e9;
const int N = 1e6 + 5;

int all[N], rem[N], cur, t2, cnt[N], s, d[N + 10], n, k, q, a[N + 10], H[N + 10], P[N + 10], C[N + 10], F[N + 10], t, c, x, y;
vector< int > v[N];

int FE(int x, int k) {
	if(!k) return 1;
	int temp = FE(x, k / 2);
	if(k & 1) return (ll) temp * temp % mod * x % mod;
	return (ll) temp * temp % mod;
}

int main() {

	ll ans = 0;
	
	scanf("%d %d %d", &n, &k, &q);

	FOR(i, 1, n) {
		scanf("%d", &a[i]);
		if(k == 1) ans = (ans + a[i]) % mod;
		H[a[i]]++;
	}

	int t = 0;

	FOR(i, 1, N-1) {
		for(int j = i + i; j < N; j += i) {
			v[j].pb(i);
			H[i] += H[j];
		}
	}

	FOR(i, 1, N-1) {
		v[i].pb(i);
		reverse(v[i].begin(), v[i].end());
	}

	P[0] = 1;
	F[0] = 1;
	FOR(i, 1, N-1) {
		all[i] = v[i].size();
		P[i] = P[i-1] * (ll) (i) % mod;
		F[i] = FE(P[i], mod - 2);
	}

	FOR(i, k, N-1) { 
		C[i] = P[i] * (ll) F[k] % mod * F[i - k] % mod;		
	}

	int att = 0;

	ROF(i, N-1, 1) {
		cnt[i] = H[i];
		H[i] = C[H[i]];
		for(int j = i + i; j < N; j += i) {
			H[i] = (H[i] - H[j] + mod) % mod;
		}
		if(k > 1) ans = (ans + i * (ll) H[i]) % mod; 
	}

	FOR(i, 1, q) {
		scanf("%d", &x);
		s = 0;
		int tt, t = v[x].size();
		if(k == 1) {
			ans = (ans + x) % mod;
		}
		else {
			for(int j = 0; j < t; j++) {
				cur = v[x][j];
				cnt[cur]++; d[++s] = cur;
				rem[cur] = (C[cnt[cur]] - C[cnt[cur]-1] + mod) % mod;
			}
			for(int j = 0; j < t; j++) {
				t2 = v[v[x][j]].size();
				cur = v[x][j];
				ans = (ans + rem[cur] * (ll) cur) % mod;
				for(int k = 1; k < t2; k++) {
					rem[v[cur][k]] = (rem[v[cur][k]] - rem[cur] + mod) % mod;
				}
			}
			for(int j = 1; j <= s; j++) {
				H[d[j]] = (H[d[j]] + rem[d[j]]) % mod;
				rem[d[j]] = 0;
			} 
		}
		printf("%lld\n", ans);
	}

	return 0;
}
