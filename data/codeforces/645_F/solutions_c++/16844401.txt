#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;

ll modulo=1e9+7;

//#include "alerta.h"
const int limite=1000005;
//const int limite=1000;

ll eleva(ll b,ll e)
{
  if (e==0) return 1;
  if (e%2==0) return eleva(b*b%modulo,e/2);
  return b*eleva(b*b%modulo,e/2)%modulo;
}

ll inverso(ll x)
{
  return eleva(x,modulo-2);
}

ll fact[limite],factinv[limite];

ll combi(ll n,ll k)
{
  if (n<k) return 0;
  return fact[n]*factinv[n-k]%modulo*factinv[k]%modulo;
}

ll memcombi[limite];
int esprimo[limite];
vector<int> factores[limite];
vector<int> divisores[limite];

int n,k,q;

ll sol=0;

int cuantosmultiples[limite];

void calcula(int d,vector<int> &f,int ind,int par,ll &acum)
{
  if (ind==int(f.size())) {
    ll &val=memcombi[cuantosmultiples[d]];
    if (par) acum-=val;
    else acum+=val;
    return;
  }
  calcula(d,f,ind+1,par,acum);
  calcula(d*f[ind],f,ind+1,par^1,acum);
}

int main()
{
  ios::sync_with_stdio(false);
  fact[0]=factinv[0]=1;
  for (int i=1;i<limite;i++) {
    fact[i]=fact[i-1]*i%modulo;
    factinv[i]=inverso(fact[i]);
  }
  for (int i=1;i<limite;i++)
    for (int j=i;j<limite;j+=i)
      divisores[j].push_back(i);
  for (int i=2;i<limite;i++)
    esprimo[i]=1;
  for (int i=2;i<limite;i++) {
    if (esprimo[i]) {
      factores[i].push_back(i);
      for (int j=i+i;j<limite;j+=i) {
	esprimo[j]=0;
	factores[j].push_back(i);
      }
    }
  }
  cin>>n>>k>>q;
  for (int i=0;i<limite;i++)
    memcombi[i]=combi(i,k-1);
  for (int caso=1;caso<=n+q;caso++) {
    int x;
    cin>>x;
    vector<int> &ld=divisores[x];
    for (int i=0;i<int(ld.size());i++) {
      int d=ld[i];
      vector<int> &f=factores[x/d];
      ll acum=0;
      calcula(d,f,0,0,acum);
      sol=(sol+acum*d)%modulo;
    }
    if (caso>n) cout<<sol<<endl;
    for (int i=0;i<int(ld.size());i++) {
      int d=ld[i];
      cuantosmultiples[d]++;
    }
  }
}
