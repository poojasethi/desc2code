#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
#define MOD 1000000007ll
#define MAX 1000010

int N,K,Q;
int freq[MAX];

ll F[MAX],inv[MAX],Finv[MAX];
ll C[MAX];
ll coef[MAX];

int minp[MAX];

ll query(int x){ 
	ll ans = C[freq[x]+1] - C[freq[x]] + MOD;
	if(ans >= MOD) ans -= MOD;
	ans = ans * coef[x] % MOD;
	freq[x]++;
	return ans;
}

int main(void){
	int i,j;
	
	inv[1] = 1;
	for(i=2;i<MAX;i++) inv[i] = (MOD - MOD/i) * inv[MOD%i] % MOD;
	F[0] = Finv[0] = 1;
	for(i=1;i<MAX;i++) F[i] = F[i-1] * i % MOD;
	for(i=1;i<MAX;i++) Finv[i] = Finv[i-1] * inv[i] % MOD;
	
	cin >> N >> K >> Q;
	REP(i,MAX) if(i >= K) C[i] = F[i] * Finv[K] % MOD * Finv[i-K] % MOD;
	
	for(i=2;i<MAX;i++) minp[i] = i;
	for(i=2;i<MAX;i++) if(minp[i] == i) for(j=2*i;j<MAX;j+=i) minp[j] = min(minp[j], i);
	for(i=1;i<MAX;i++){
		int n = i;
		int x = i;
		while(n > 1){
			int p = minp[n];
			while(n % p == 0) n /= p;
			x -= x / p;
		}
		coef[i] = x;
	}
	
	ll ans = 0;
	
	REP(i,N+Q){
		int x;
		scanf("%d", &x);
		
		for(int d=1;d*d<=x;d++) if(x % d == 0){
			ans += query(d);
			if(d * d != x) ans += query(x/d);
		}
		
		ans %= MOD;
		if(i >= N) printf("%I64d\n", ans);
	}
	
	return 0;
}
