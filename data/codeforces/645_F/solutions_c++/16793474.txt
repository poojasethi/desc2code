#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <map>
#include <vector>
using namespace std;

#define N 1000030
#define M 15000030
#define mod 1000000007

int n, k, q;
int f[N], nf[N];
int p[N], cnt, np[N], mu[N];
int ans;
int s[N];
int G[N];
int fst[N], nxt[M], vv[M], e;

void add(int u, int v) {
	if(e == M - 1) puts("-1");
	++e;
	vv[e] = v, nxt[e] = fst[u], fst[u] = e;
}

int qpow(int x, int k) {
	int ret = 1;
	while(k) {
		if(k & 1) ret = 1LL * ret * x % mod;
		k >>= 1;
		x = 1LL * x * x % mod;
	}
	return ret;
}

void init() {
	f[0] = 1;
	for(int i = 1; i < N; ++i) f[i] = 1LL * f[i-1] * i % mod;
	nf[N-1] = qpow(f[N-1], mod - 2);
	for(int i = N - 2; i >= 0; --i) {
		nf[i] = 1LL * nf[i+1] * (i + 1) % mod;
	}
	mu[1] = 1;
	for(int i = 2; i < N; ++i) {
		if(!np[i]) {
			p[cnt++] = i;
			mu[i] = -1;
		}
		for(int j = 0; j < cnt && i * p[j] < N; ++j) {
			int t = i * p[j];
			np[t] = 1;
			if(i % p[j] == 0) {
				mu[t] = 0;
				break;
			}
			else {
				mu[t] = -mu[i];
			}
		}
	}
	for(int i = 1; i < N; ++i) {
		if(mu[i] < 0) mu[i] += mod;
	}
	for(int i = 1; i < N; ++i) {
		for(int j = i; j < N; j += i) {
			G[j] += 1LL * mu[i] * (j / i) % mod;
			if(G[j] >= mod) G[j] -= mod;
			add(j, i);
		}
	}
}

int C(int x, int y) {
	if(x < y) return 0;
	return 1LL * f[x] * nf[x-y] % mod * nf[y] % mod;
}

int calc(int x) {
	return 1LL * G[x] * C(s[x], k) % mod;
}

void add(int x) {
	for(int i = fst[x]; i; i = nxt[i]) {
		int v = vv[i];
		ans -= calc(v);
		s[v]++;
		if(ans < 0) ans += mod;
		ans += calc(v);
		if(ans >= mod) ans -= mod;
	}
}

int main() {
	
	init();
	scanf("%d%d%d", &n, &k, &q);
	for(int i = 1; i <= n; ++i) {
		int x;
		scanf("%d", &x);
		add(x);

	}
	while(q--) {
		int x;
		scanf("%d", &x);
		add(x);
		printf("%d\n", ans);
	}
	return 0;
}

