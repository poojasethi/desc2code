#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define FILL(a,x) memset(a,x,sizeof(a))
#define foreach( gg,ii ) for( typeof(gg.begin()) ii=gg.begin();ii!=gg.end();ii++)
#define mp make_pair
#define pb push_back
#define X first
#define Y second
#define sz(a) int((a).size())
#define N 1000001
#define MAX 30
#define mod 1000000007
#define REP(i,a) for(int i=0;i<a;++i)
#define REPP(i,a,b) for(int i=a;i<b;++i)
#define all(a) a.begin(),a.end()
const ll INF = 1e18+1;

inline ll input(void)
{
	char t;
	ll x=0;
	int neg=0;
	t=getchar();
	while((t<48 || t>57) && t!='-')
		t=getchar();
	if(t=='-')
		{neg=1; t=getchar();}
	while(t>=48 && t<=57)
	{
		x=(x<<3)+(x<<1)+t-48;
		t=getchar();
	}
	if (neg) x=-x;
	return x;
}

inline void output(ll x)
{
	char a[20];
	int i=0,j;
	a[0]='0';
	if (x<0) {putchar('-'); x=-x;}
	if (x==0) putchar('0');
	while(x)
	{
		a[i++]=x%10+48;
		x/=10;
	}
	for(j=i-1;j>=0;j--)
	{
		putchar(a[j]);
	}
	putchar('\n');
}

ll p[N+1],fac[N+1],invfac[N+1],cnt[N+1];
vector <int> divisors[N+1];

ll power(ll a, ll b, ll m)
{
	ll ans=1;
	while(b)
	{
		if (b%2) ans*=a;
		b/=2;
		a*=a;
		if (a>=m) a%=m;
		if (ans>=m) ans%=m;
	}
	return ans;
}

void make()
{
	int j;
	REPP(i,1,N)
	{
		for(j=1;j*j<i;j++)
			if (i%j==0)
			{
				divisors[i].pb(j);
				divisors[i].pb(i/j);
			}
		if (j*j==i) divisors[i].pb(j);
	}
	p[1]=1;
	REPP(i,2,N)
	{
		p[i]=i;
		REP(j,sz(divisors[i]))
		{
			if (divisors[i][j]!=i)
				p[i]-=p[divisors[i][j]];
		}
	}
	fac[0]=1;
	invfac[0]=1;
	REPP(i,1,N)
	{
		fac[i]=(i*fac[i-1])%mod;
		invfac[i]=(power(i,mod-2,mod)*invfac[i-1])%mod;
	}
}

inline ll ncr(ll n, ll r)
{
	if (r>n) return 0;
	ll ans=(fac[n]*invfac[r])%mod;
	return (ans*invfac[n-r])%mod;
}

int main()
{
	ll n,k,q,tmp,ans=0;
	n=input();
	k=input();
	q=input();
	make();
	FILL(cnt,0);
	REP(i,n)
	{
		tmp=input();
		REP(j,sz(divisors[tmp]))
			cnt[divisors[tmp][j]]++;
	}
	REPP(i,1,N) ans=(ans+p[i]*ncr(cnt[i],k))%mod;
	REP(i,q)
	{
		tmp=input();
		REP(j,sz(divisors[tmp]))
		{
			ans=(ans-p[divisors[tmp][j]]*ncr(cnt[divisors[tmp][j]],k))%mod;
			ans+=mod;
			ans%=mod;
			cnt[divisors[tmp][j]]++;
			ans=(ans+p[divisors[tmp][j]]*ncr(cnt[divisors[tmp][j]],k))%mod;
		}
		output(ans);
	}
return 0;
}
