/*
 * problem.cpp
 *
 *  Created on: Mar 19, 2016
 *      Author: Zhao Huangjie
 */


#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<set>
#include<string>
using namespace std;
long long mod = 1000000007;
long long n,k,q;
vector<long long> p;
vector<vector<long long> > divisors;
vector<long long> Coe;
vector<long long> d;
vector<long long> tuples;
void gcdE(long long a,long long b,long long& d,long long& x,long long& y){
	if(!b){
		d=a;
		x=1;
		y=0;
	}else{
		gcdE(b,a%b,d,y,x);
		y-=x*(a/b);
	}
}

long long inv(long long a){
	long long d,x,y;
	gcdE(a,mod,d,x,y);
	return d==1?(x+mod)%mod:-1;
}

long long P(long long x){
	if(x==0LL) return p[x]=1LL;
	if(p[x]!=-1) return p[x];
	return p[x]=(x*P(x-1))%mod;
}

long long mul_mod(long long x,long long y){
	return (x*y)%mod;
}

long long C(long long n,long long m){
	if(n<m) return 0LL;
	return mul_mod(P(n),inv(mul_mod(P(m),P(n-m))));
}
void get_divisors(){
	for(long long i=1;i<=1000000;i++){
		for(long long j=i;j<=1000000;j+=i){
			divisors[j].push_back(i);
		}
	}
}

long long coe(long long x){
	if(x==1LL) return 1LL;
	if(Coe[x]!=-1) return Coe[x];
	long long ans = x;
	for(long long i=0;i<(long long)divisors[x].size()-1;i++){
		ans-=coe(divisors[x][i]);
	}
	return Coe[x]=ans;
}

long long C(long long n){
	if(tuples[n]!=-1) return tuples[n];
	return tuples[n]=C(n,k);
}

int main(){
	cin>>n>>k>>q;
	p.assign(1000010,-1);
	Coe=p;
	tuples.assign(200010,-1);
	divisors.assign(1000010,vector<long long>(0,0));
	get_divisors();
	//cout<<"!"<<endl;
	d.assign(1000010,0);
	for(long long i=0;i<n;i++){
		long long x;
		scanf("%I64d",&x);
		for(int j=0;j<(int)divisors[x].size();j++){
			d[divisors[x][j]]++;
		}
	}
	long long ans = 0LL;
	for(long long i=1;i<=1000000;i++){
		ans += mul_mod(coe(i),C(d[i]));
		ans%=mod;
	}
	for(long long i=0;i<q;i++){
		long long x;
		scanf("%I64d",&x);
		for(int j=0;j<(int)divisors[x].size();j++){
			long long div = divisors[x][j];
			d[div]++;
			long long gap = C(d[div])-C(d[div]-1);
			gap+=mod;
			gap%=mod;
			ans+=mul_mod(coe(div),gap);
			ans%=mod;
		}
		printf("%I64d\n",ans);
	}
	return 0;
}

