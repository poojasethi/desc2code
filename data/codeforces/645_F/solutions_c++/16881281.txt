#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <ctime> 

using namespace std;

#define _int64 long long
#define mo 1000000007

int b[1000];
vector<int> primes;
int d[1100000];
int w[1100000];
int diff[1100000];
int f[1100000];
int invf[1100000];

int pow1(int x,int y)
{
  int i;
  _int64 ret;
  ret=1;
  for (i=30;i>=0;i--)
  {
    ret=ret*ret%mo;
    if (((1<<i)&y)!=0)
      ret=ret*x%mo;
  }
  return (int)ret;
}

int inv(int x)
{
  return pow1(x,mo-2);
}

int c(int x,int y)
{
  if (x<y) return 0;
  return (_int64)f[x]*invf[y]%mo*invf[x-y]%mo;
}

vector<int> getfactors(int x)
{
  int i;
  vector<int> ret;
  ret.clear();
  for (i=1;i<=1000;i++)
  {
    if (i*i>x) break;
    if (x%i==0)
    {
      ret.push_back(i);
      if (x/i!=i) ret.push_back(x/i);
    }
  }
  return ret;
}

int main()
{
  int i,j,n,k,q,x,ans;
  vector<int> fac;
  memset(w,0,sizeof(w));
  for (i=1;i<=1000000;i++)
  {
    diff[i]=i-w[i];
    for (j=i;j<=1000000;j+=i)
      w[j]+=diff[i];
  }
  f[0]=1;
  invf[0]=1;
  for (i=1;i<=1000000;i++)
  {
    f[i]=(_int64)f[i-1]*i%mo;
    invf[i]=inv(f[i]);
  }
  //for (i=0;i<100;i++)
  //  cout<<" "<<diff[i];
  //cout<<endl;
  primes.clear();
  memset(b,0,sizeof(b));
  for (i=2;i<1000;i++)
    if (b[i]==0)
    {
      primes.push_back(i);
      for (j=i*i;j<1000;j+=i)
        b[j]=1;
    }
  scanf("%d%d%d",&n,&k,&q);
  memset(d,0,sizeof(d));
  for (i=0;i<n;i++)
  {
    scanf("%d",&x);
    fac=getfactors(x);
    for (j=0;j<fac.size();j++)
      d[fac[j]]++;
  }
  ans=0;
  for (i=1;i<=1000000;i++)
    ans=((_int64)ans+(_int64)diff[i]*c(d[i],k))%mo;
  for (i=0;i<q;i++)
  {
    scanf("%d",&x);
    fac=getfactors(x);
    for (j=0;j<fac.size();j++)
    {
      ans=(((_int64)ans-(_int64)diff[fac[j]]*c(d[fac[j]],k))%mo+mo)%mo;
      d[fac[j]]++;
      ans=((_int64)ans+(_int64)diff[fac[j]]*c(d[fac[j]],k))%mo;
    }
    printf("%d\n",ans);
  }
}
  
