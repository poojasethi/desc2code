#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<string>
using namespace std;
struct poi { int x, y; };
struct rec { 
	int x, y, z;
	rec() {} 
	rec(int X, int Y, int Z) { x = X, y = Y, z = Z; }
};
const int N = 1000000, mod = 1000000007;
int n, m, t, ans;
__int64 co[N + 10], c[N + 10];
int f[N + 10], jc[N + 10], jcv[N + 10];

int inv(int x)
{
	int y = 1;
	for (int i = mod - 2; i; i >>= 1)
	{
		if (i & 1) y = (__int64)y*x%mod;
		x = (__int64)x*x%mod;
	}
	return y;
}

void prework()
{
	for (int i = 1; i <= N; i++) co[i] = i;
	for (int i = 1; i <= N; i++)
	{
		c[i] += co[i];
		for (int j = 2; j <= N / i; j++) co[j*i] -= co[i];
	}
	jc[0] = 1; jcv[0] = inv(1);
	for (int i = 1; i <= N; i++)
	{
		jc[i] = (__int64)jc[i - 1] * i%mod;
		jcv[i] = inv(jc[i]);
	}
}

int C(int n, int m)
{
	if (n < m) return 0;
	return (__int64)jc[n] * jcv[m] % mod*jcv[n - m] % mod;
}

void update(int x)
{
	int old = C(f[x], m);
	f[x]++;
	int now = C(f[x], m);
	ans = (ans + (now - old)*c[x]) % mod;
}

void insert(int x)
{
	for (int i = 1; i*i <= x; i++)
	{
		if (x%i) continue;
		update(i);
		if (i != x / i) update(x / i);
	}
}

int main()
{
	prework();
	cin >> n >> m >> t;
	for (int i = 1; i <= n; i++)
	{
		int x;
		scanf("%d", &x);
		insert(x);
		//printf("%d\n", ans);
	}
	for (int i = 1; i <= t; i++)
	{
		int x;
		scanf("%d", &x);
		insert(x);
		printf("%d\n", (ans + mod) % mod);
	}
}