#pragma comment(linker, "/STACK:640000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>

#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

const int maxn = (int)2e5 + 10;
const int maxv = (int)1e6;
const int mod = (int)1e9 + 7;

int C[maxn];
int f[maxn];
int a[maxv + 1];
int coef[maxv + 1];
int T = 0;

void add(int &x, int y) {
	x += y;
	if (x >= mod) x -= mod;
}

void sub(int &x, int y) {
	x -= y;
	if (x < 0) x += mod;
}

int binpow(int a, int b) {
	int res = 1;
	while(b > 0) {
		if (b & 1) res = res * 1LL * a % mod;
		a = a * 1LL * a % mod;
		b >>= 1;
	}
	return res;
}

int main() {
	#ifdef LOCAL
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);	
	#endif
	
	int n,k,q; cin >> n >> k >> q;
	
	
	f[0] = 1;
	for (int i = 1; i < maxn; i++) {
		f[i] = f[i - 1] * 1LL * i % mod;
	}

	for (int i = k; i < maxn; i++) {
		C[i] = f[i] * 1LL * binpow(f[k] * 1LL * f[i - k] % mod,mod - 2) % mod;
	}
	
	for (int i = 1; i <= maxv; i++) {
		coef[i] = i;
	}
	
	for (int i = 1; i <= maxv; i++) {
		for (int j = 2; i * j <= maxv; j++) {
			coef[i * j] -= coef[i];
		}
	}
	
	for (int i = 0; i < n; i++) {
		int x; scanf("%d",&x);
		for (int j = 1; j * j <= x; j++) if (x % j == 0) {
			a[j]++;
			if (j * j != x) a[x / j]++;
		}
	}
	
	int res = 0;
	
	for (int i = 1; i <= maxv; i++) {
		add(res,C[a[i]] * 1LL * coef[i] % mod);
	}
	
	while(q--) {
		int x; scanf("%d",&x);
		for (int i = 1; i * i <= x; i++) if (x % i == 0) {
			sub(res,C[a[i]] * 1LL * coef[i] % mod);
			a[i]++;
			add(res,C[a[i]] * 1LL * coef[i] % mod);
			if (i * i == x) continue;
			int j = x / i;
			sub(res,C[a[j]] * 1LL * coef[j] % mod);
			a[j]++;
			add(res,C[a[j]] * 1LL * coef[j] % mod);
		}
		printf("%d\n",res);
	}
	
	return 0;
}
