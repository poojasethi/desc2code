#include <bits/stdc++.h>
#define ll long long
#define mod 1000000007
#define upperlimit 1000100
#define INF 1e18
#define eps 1e-8
#define endl '\n'
#define mp make_pair
#define pb push_back
#define pcc pair<char,char>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define tr(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define F first
#define S second

using namespace std;

ll gcd(ll n1,ll n2){
	if(n1%n2==0)return n2;
	return gcd(n2,n1%n2);
}
ll powmod(ll base,ll exponent)
{
	ll ans=1;
	while(exponent){
		if(exponent&1)ans=(ans*base)%mod;
		base=(base*base)%mod;
		exponent/=2;
	}
	return ans;
}
ll fact[upperlimit+1];
ll inv[upperlimit+1];
int cnt[upperlimit+1];
bool prime[upperlimit+1];
int mobius[upperlimit+1];
int f[upperlimit+1];
int g[upperlimit+1];
int dp[upperlimit+1];
int arr[upperlimit+1];
vector <int> factors[upperlimit+1];
ll C(int n,int r){
	if(r<0||r>n)return 0;
	ll ret=fact[n];
	ret*=(inv[r]*inv[n-r])%mod;
	return (ret%mod);
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int n,k,q,a;
	ll answer=0;
	int i,j;
	cin>>n>>k>>q;
	for(i=0;i<n;i++){
		cin>>arr[i];
		cnt[arr[i]]++;
	}
	fact[0]=1;
	inv[0]=1;
	for(i=1;i<=upperlimit;i++){
        fact[i]=(i*fact[i-1])%mod;
        inv[i]=powmod(fact[i],mod-2);
	}
	for(i=1;i<upperlimit;i++)mobius[i]=1;
	for(i=2;i*i<=upperlimit;i++)if(!prime[i])for(j=i*i;j<=upperlimit;j+=i)prime[j]=true;
	for(i=2;i*i<=upperlimit;i++)if(!prime[i])for(j=i*i;j<=upperlimit;j+=i*i)mobius[j]=0;
	for(i=2;i<=upperlimit;i++)if(!prime[i])for(j=i;j<=upperlimit;j+=i)mobius[j]*=-1;
	for(i=1;i<=upperlimit;i++)f[i]=i;
	for(i=1;i<=upperlimit;i++)if(mobius[i])for(j=i;j<=upperlimit;j+=i)g[j]+=mobius[i]*f[j/i];
	for(i=1;i<=upperlimit;i++)for(j=i;j<=upperlimit;j+=i)dp[i]+=cnt[j];
	for(i=1;i<=upperlimit;i++)for(j=i;j<=upperlimit;j+=i)factors[j].pb(i);
	for(i=1;i<=upperlimit;i++)answer=(answer+g[i]*C(dp[i],k))%mod;
	while(q--){
		cin>>a;
		for(i=0;i<factors[a].size();i++){
			dp[factors[a][i]]++;
			answer+=g[factors[a][i]]*C(dp[factors[a][i]],k);
			answer-=g[factors[a][i]]*C(dp[factors[a][i]]-1,k);
			answer%=mod;
			answer=(answer+mod)%mod;
		}
		cout<<answer<<endl;
	}

	return 0;
}
