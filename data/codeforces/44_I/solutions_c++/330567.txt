#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <iostream>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <queue>
#include <stack>
#include <deque>

using namespace std;

#define x1 fiwgiunb
#define x2 viosjosk
#define y1 fnwnfwgw
#define y2 jfowjgon
#define ws osgsogsg
#define free fnibfn


#define dbg(x) cerr << #x << " = " << x << endl
#define deb(x) cerr << #x << " = " << x << endl


#define all(c) (c).begin(),(c).end()
#define pb push_back
#define sz(c) (int)(c).size()          
#define mp make_pair
#define forn(i,n) for(int i=0;i<(int)n;++i)
#define ford(i,n) for(int i=(int)n;i>=0;--i)
#define X first
#define Y second
#define bits(x) __builtin_popcount(x)
typedef long long int64;
typedef long long ll;
typedef long double ld;


vector<vector<vector<int> > > ans(int n)
{
 if (n==1)
 {
   vector<int>v;
   v.pb(1);
   vector<vector<int> >w;
   w.pb(v);
   vector<vector<vector<int> > >h;
   h.pb(w);
   return h;
 }
 vector<vector<vector<int> > > old=ans(n-1);
 vector<vector<vector<int> > > nw;
 bool beg=true;
 forn(i,sz(old))
 {
   if (beg)
   forn(j,sz(old[i])+1)
   {
     vector<vector<int> >w;
     forn(t,sz(old[i]))
     {
       w.pb(old[i][t]);
       if (t==j)
         w[sz(w)-1].pb(n);
     }
     if(j==sz(old[i]))
     {
       vector<int>q;
       q.pb(n);
       w.pb(q);
     }
     nw.pb(w);
   }
   else
   ford(j,sz(old[i]))
   {
     vector<vector<int> >w;
     forn(t,sz(old[i]))
     {
       w.pb(old[i][t]);
       if (t==j)
         w[sz(w)-1].pb(n);
     }
     if(j==sz(old[i]))
     {
       vector<int>q;
       q.pb(n);
       w.pb(q);
     }
     nw.pb(w);
   }
   beg=!beg;
 }
 return nw;
}
int main()
{
  int n;
  scanf("%d",&n);
  vector<vector<vector<int> > >x=ans(n);
  printf("%d\n",sz(x));
  forn(i,sz(x))
  {
    forn(j,sz(x[i]))
    {
      if (j>0)
        printf(",");
      printf("{");
      forn(k,sz(x[i][j]))
      {
        if(k>0)
          printf(",");
        printf("%d",x[i][j][k]);
      }
      printf("}");
    }
    printf("\n");
  }
  return 0;
}
