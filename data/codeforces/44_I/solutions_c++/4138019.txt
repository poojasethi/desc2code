#include <iostream>
#include <cstdio>
#include <map>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <vector>
#include <queue>
using namespace std;
int num,N;
bool fst;
int cnt[11];
struct arr
{
	int d[10];
}c0;
void dfs(int n,arr c)
{
	if(n==N)
	{
		if(fst) num++;
		else{
			bool flag=true;
			bool f=true;
			for(int i=0;i<N;i++)
			{
				flag=true;
				for(int j=0;j<N;j++)
					if(c.d[j]==i)
					{
						if(flag){
							if(f) f=false;
							else printf(",");
							printf("{%d",j+1);
							flag=false;
						}
						else{
							printf(",%d",j+1);
						}
					}
				if(!flag)
				{
					printf("}");
				}
			}
			printf("\n");
		}
		return;
	}
	cnt[n]++;
	int m=0;
	for(int i=0;i<n;i++) m=max(c.d[i],m);
	m++;
	if(cnt[n]&1)
	{
		c.d[n]=0;
		dfs(n+1,c);
		for(int j=m;j>=1;j--)
		{
			c.d[n]=j;
			dfs(n+1,c);
		}
	}
	else{
		for(int j=1;j<=m;j++)
		{
			c.d[n]=j;
			dfs(n+1,c);
		}
		c.d[n]=0;
		dfs(n+1,c);
	}
}
int main()
{
	while(cin>>N)
	{
		fst=true;
		num=0;
		memset(c0.d,0,sizeof(c0.d));
		memset(cnt,0,sizeof(cnt));
		dfs(1,c0);
		fst=false;
		cout<<num<<endl;
		memset(c0.d,0,sizeof(c0.d));
		memset(cnt,0,sizeof(cnt));
		dfs(1,c0);
	}
	return 0;
}
 	 	   			 	      	  	  	 	