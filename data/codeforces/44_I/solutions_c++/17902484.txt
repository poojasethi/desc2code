/*
 * Per una spiegazione della soluzione, vedere http://codeforces.com/blog/entry/834
 * 
 */

#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>
#include <map>

#define pb push_back
#define MAXN 13 // per ora
#define pb push_back

using namespace std;

struct nodo {
	int pila; // in che pila metto il cubetto
	int figli; // il numero dei figli nell'albero
	int padre; // il padre dell'albero, -1 se non c'Ã¨
	
	nodo () {}
	nodo (int pila, int figli, int padre): pila(pila), figli(figli), padre(padre) {}
};

vector<nodo> V[MAXN];


void print(int x, int N) {
	vector<int> v;
	while (N > 0) {
		v.pb(V[N][x].pila);
		x = V[N][x].padre;
		N--;
	}
	v.push_back(0);
	reverse(v.begin(), v.end());
	
	//~ for (int i=0; i<v.size(); i++) cout << v[i];
	//~ cout << endl;
	
	vector<vector<int > > pile;
	vector<int> vuoto;
	pile.pb(vuoto);
	pile[0].pb(0);
	for (int i = 1; i < (int)v.size(); i++) {
		if (v[i] >= (int)pile.size()) {
			assert (v[i] == (int)pile.size());
			pile.pb(vuoto);
		}
		pile[v[i]].pb(i);
	}
	
	for (int i = 0; i < (int)pile.size(); i++) {
		cout << "{";
		for (int j = 0; j < (int)pile[i].size()-1; j++)
			cout << pile[i][j]+1 << ",";
		cout << pile[i][pile[i].size()-1]+1 << "}";
		if (i != (int)pile.size()-1)
			cout << ",";
	}
	cout << "\n";
}

void propaga(int x, int liv) {
	if (x % 2 == 0) {
		V[liv+1].pb(nodo(0, max(2, V[liv][x].figli), x));
		for (int i = V[liv][x].figli-1; i >= 1; i--)
			V[liv+1].pb(nodo(i, max(i+2, V[liv][x].figli), x));
	}
	else {
		for (int i = 1; i <= V[liv][x].figli-1; i++)
			V[liv+1].pb(nodo(i, max(i+2, V[liv][x].figli), x));
		V[liv+1].pb(nodo(0, max(2, V[liv][x].figli), x));
	}
}

int main() {
	int N;
	cin >> N;
	V[0].push_back(nodo(0, 2, -1));
	for (int i = 0; i < N-1; i++)
		for (int j = 0; j < (int)V[i].size(); j++)
			propaga(j, i);
			
	/*for (int liv = 0; liv < N; liv++) {
		cout << "livello " << liv << endl;
		for (int i=0; i<(int)V[liv].size(); i++)
		cout << V[liv][i].pila << " " << V[liv][i].figli << " " << V[liv][i].padre << endl;
	}*/
	
	cout << V[N-1].size() << endl;
	for (int i = 0; i < (int)V[N-1].size(); i++)
		print(i, N-1);
	
	return 0;
}
