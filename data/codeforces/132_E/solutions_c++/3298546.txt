#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>

using namespace std;

const int maxn=510;
const int maxm=maxn*maxn<<1;
const int INF=0x3f3f3f3f;

int n,m,s,t,en,ans,cost[maxn],z[maxn],value[maxn],pre[maxn],dist[maxn],q[maxn],f[maxn];

bool use[maxn];

struct edge
{
	int e,f,d;
	bool dir;
	edge *next,*op;
}*v[maxn],ed[maxm],*fe[maxn];

void add_edge(int s,int e,int f,int d)
{
	en++;
	ed[en].next=v[s];v[s]=ed+en;v[s]->e=e;v[s]->f=f;v[s]->d=d;v[s]->dir=true;
	en++;
	ed[en].next=v[e];v[e]=ed+en;v[e]->e=s;v[e]->f=0;v[e]->d=-d;v[e]->dir=false;
	v[s]->op=v[e];v[e]->op=v[s];
}

bool spfa()
{
	memset(dist,0x3f,sizeof(dist));
	dist[s]=0;
	int front=1,tail=2;
	q[1]=s;
	for (;front!=tail;)
	{
		int now=q[front++];
		if (front==maxn) front=0;
		use[now]=false;
		for (edge *e=v[now];e;e=e->next)
			if (e->f && dist[e->e]>dist[now]+e->d)
			{
				dist[e->e]=dist[now]+e->d;
				f[e->e]=now;
				fe[e->e]=e;
				if (!use[e->e])
				{
					use[e->e]=true;
					q[tail++]=e->e;
					if (tail==maxn) tail=0;
				}
			}
	}
	return dist[t]!=INF;
}

void agument()
{
	int delta=INF;
	for (int p=t;p!=s;p=f[p])
		delta=min(delta,fe[p]->f);
	for (int p=t;p!=s;p=f[p])
	{
		fe[p]->f-=delta;
		fe[p]->op->f+=delta;
	}
	ans+=dist[t]*delta;
}

void flow()
{
	while (spfa())
		agument();
}

int main()
{
	scanf("%d%d",&n,&m);
	s=n<<1|1;
	t=s+1;
	add_edge(s,0,m,0);
	for (int a=1;a<=n;a++)
	{
		scanf("%d",&z[a]);
		int v=z[a];
		while (v)
			cost[a]+=v&1,v>>=1;
		add_edge(s,a,1,0);
		add_edge(0,n+a,1,cost[a]);
		add_edge(n+a,t,1,0);
		for (int b=1;b<a;b++)
			if (z[a]!=z[b]) add_edge(b,a+n,1,cost[a]);
			else add_edge(b,a+n,1,0);
	}
	flow();
	int num=0;
	for (edge *e=v[0];e;e=e->next)
		if (e->dir && !e->f) value[e->e-n]=++num;
	for (int a=1;a<=n;a++)
		for (edge *e=v[a];e;e=e->next)
			if (e->dir && !e->f) pre[e->e-n]=a;
	for (int a=1;a<=n;a++)
		num+=1+(pre[a] && z[a]!=z[pre[a]]);
	printf("%d %d\n",num,ans);
	for (int a=1;a<=n;a++)
	{
		if (pre[a]) value[a]=value[pre[a]];
		if (z[a]!=z[pre[a]]) printf("%c=%d\n",'a'+value[a]-1,z[a]);
		printf("print(%c)\n",'a'+value[a]-1);
	}

	return 0;
}

		  	 		    	     		 			  	