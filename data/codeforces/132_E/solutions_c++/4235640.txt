#include<cstdio>
#include<cstring>
#include<algorithm>
#include<queue>
#define INF 0x7ffffff
#define lowbit(x) (x&(-x))
#define add(a,b,c,d) (e[++m]=b,pre[m]=last[a],last[a]=m,f[m]=c,w[m]=d)
using namespace std;
int pre[200005];
int e[200005];
int f[200005];
int w[200005];
int last[605];
int dist[605];
int r[605];
int a[605];
int v[605];
int p[605];
int c,k,m,src,dest,ans;
int cost(int x)
{	int src=0;
	while (x)
	{	++src;
		x-=lowbit(x);
	}
	return src;
}
void buildgraph()
{	int i,j;
	src=c*2+1,dest=src+1,m=1;
	add(src,0,k,0);
	add(0,src,0,0);
	for (i=1;i<=c;++i) 
    {	add(0,c+i,1,cost(a[i]));
    	add(c+i,0,0,-cost(a[i]));
		add(src,i,1,0);
		add(i,src,0,0);
		add(c+i,dest,1,0);
		add(dest,c+i,0,0);
	}
	for (i=1;i<c;++i)
		for (j=i+1;j<=c;++j)
			if (a[i]==a[j])
			{	add(i,c+j,1,0);
				add(c+j,i,0,0);
			}
			else
			{	add(i,c+j,1,cost(a[j]));
				add(c+j,i,0,-cost(a[j]));
			}
}
int findpath()
{	int in[605]={0};
	int q[10005]={0};
	int i,h,t;
	memset(dist,1,sizeof(dist));
	h=t=1;
	q[1]=src;
	dist[src]=0;
	while (h<=t)
	{	for (i=last[q[h]];i!=0;i=pre[i])
			if (f[i]>0&&dist[e[i]]>dist[q[h]]+w[i])
			{	r[e[i]]=i;
				dist[e[i]]=dist[q[h]]+w[i];
				if (in[e[i]]==0)
	   			{	in[e[i]]=1;
	   				q[++t]=e[i];
				}
			}
		in[q[h]]=0;
		++h;
	}
	return dist[dest]!=16843009;
}
void ek()
{	int i,minflow;
	while (findpath())
	{	minflow=INF;
		for (i=dest;i!=src;i=e[r[i]^1])
			minflow=min(minflow,f[r[i]]);
		for (i=dest;i!=src;i=e[r[i]^1])
		{	f[r[i]]-=minflow;
			f[r[i]^1]+=minflow;
		}
		ans+=minflow*dist[dest];
	}
}
void output()
{	int i,j,cnt=0;
	memset(v,0,sizeof(v));
	for (i=last[0];i!=0;i=pre[i])
		if (!(i&1)&&!f[i])
			v[e[i]-c]=++cnt;
	for (i=1;i<=c;++i)
		for (j=last[i];j!=0;j=pre[j])
			if (!(j&1)&&!f[j])
				p[e[j]-c]=i;
	for (i=1;i<=c;++i)
		if (p[i]&&a[i]!=a[p[i]])
			cnt+=2;
		else ++cnt;
	printf("%d %d\n",cnt,ans);
	for (i=1;i<=c;++i)
	{	if (p[i])
			v[i]=v[p[i]];
		if (a[i]!=a[p[i]])
			printf("%c=%d\n",'a'+v[i]-1,a[i]);
		printf("print(%c)\n",'a'+v[i]-1);
	}
}
int main()
{	int i;
	scanf("%d%d",&c,&k); 
	for (i=1;i<=c;++i)
		scanf("%d",&a[i]);
	buildgraph();
	ek();
	output();
	return 0;
}

				 	 	   		 	 	  	   		