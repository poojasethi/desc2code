#include<cstdio>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
const int maxn=500+30;
const int maxm=maxn*maxn;
const int INF=10000;
int a[maxn],vis[maxn],dis[maxn],N,S,T,A,n,m;
int to[maxm],cost[maxm],flow[maxm],cap[maxm],next[maxm],start[maxn],tot=1;
queue<int> q;
int fa[maxn],pre[maxn];
void add(int a,int b,int c,int d)
{
	to[++tot]=b,cap[tot]=c,cost[tot]=d,next[tot]=start[a],start[a]=tot;
	to[++tot]=a,cap[tot]=0,cost[tot]=-d,next[tot]=start[b],start[b]=tot;
}
int spfa()
{
	for(int i=1;i<=N;i++)
		dis[i]=INF,vis[i]=0;
	q.push(S),dis[S]=0,vis[S]=1;
	while(!q.empty())
	{
		int u=q.front(); q.pop(); vis[u]=0;
		for(int i=start[u];i;i=next[i])
		{
			int v=to[i];
			if(dis[v]>dis[u]+cost[i] && cap[i]-flow[i])
			{
				dis[v]=dis[u]+cost[i];
				pre[v]=u,fa[v]=i;
				if(!vis[v])
					q.push(v),vis[v]=1;
			}
		}
	}
	return dis[T];
}
int flag[maxn],s1[maxn],s2[maxn][2],now;
void find(int x)
{
	if(x==T) { now++; return; }
	for(int i=start[x];i;i=next[i])
	{
		int y=to[i];
		if(flow[i]>0)
		{
			if(cost[i]>0)
			{
				flag[y]=1;
				s2[y][0]=now;
				s2[y][1]=a[y];
			}
			if(cost[i]!=-INF)
				s1[y]=now;
			flow[i]--;
			find(y);
		}
	}
}
void mincostflow()
{
	int ans=0,cnt=n;
	while(spfa()<0)
	{
		ans+=dis[T];
		for(int i=T;i!=S;i=pre[i])
			flow[fa[i]]++,flow[fa[i]^1]--;
	}
	ans+=INF*n;
	find(S);
	for(int i=1;i<=n;i++)
		if(flag[i])
			cnt++;
	printf("%d %d\n",cnt,ans);
	for(int i=1;i<=n;i++)
	{
		if(flag[i])
			printf("%c=%d\n",s2[i][0]+'a',s2[i][1]);
		printf("print(%c)\n",s1[i]+'a');			
	}	
}
int val(int x)
{
	int cnt=0;
	while(x)
	{
		if(x&1) cnt++;
		x>>=1;
	}
	return cnt;
}
int main()
{
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	scanf("%d %d",&n,&m);
	for(int i=1;i<=n;i++)
		scanf("%d",&a[i]);
	S=0,A=2*n+1,T=A+1,N=T+1;
	add(S,A,m,0);
	for(int i=1;i<=n;i++)
	{
		add(A,i,1,val(a[i]));		
		add(i,i+n,1,-INF);
		add(i+n,T,1,0);
	}
	for(int i=1;i<=n;i++)
		for(int j=i+1;j<=n;j++)
			add(i+n,j,1,a[i]==a[j]?0:val(a[j]));	
	mincostflow();
	return 0;
}