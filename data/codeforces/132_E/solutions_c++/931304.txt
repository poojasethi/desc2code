#include <map>
#include <queue>
#include <cmath>
#include <cstdio>
#include <vector>
#include <string>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <fstream>
#include <iostream>
#include <algorithm>
#define PB push_back
#define MP make_pair
#define BG begin()
#define ED end()
#define SZ(x) ((int)((x).size()))
#define FF first
#define SS second
#define foreach(i,x) for (__typeof((x).begin()) i=(x).begin();i!=(x).end();i++)
#define FOR(i,l,r) for (int i=(l);i<=(r);i++)
#define ROF(i,r,l) for (int i=(r);i>=(l);i--)
using namespace std;
#define N 1000000
int S,T,t,ans,d[N],p[N],c[N],next[N],w[N],b[N],fa[N],f[N],o[N];

void link(int i,int j,int k,int l) {
  next[++t]=d[i],d[i]=t,p[t]=j,c[t]=k,w[t]=l,b[t]=t+1;
  next[++t]=d[j],d[j]=t,p[t]=i,c[t]=0,w[t]=-l,b[t]=t-1;
}

void imp() {
  int i=T,flow=1<<20;
  while (i!=S) {
    flow=min(flow,c[fa[i]]);
    i=p[b[fa[i]]];
  };
  i=T,ans+=flow;
  while (i!=S) {
    c[fa[i]]-=flow;
    c[b[fa[i]]]+=flow;
    i=p[b[fa[i]]];
  };
}

bool spfa() {
  FOR(i,0,T) f[i]=1<<20,o[i]=0;
  f[0]=0;
  queue<int> q;
  q.push(0);
  o[0]=1;
  while (!q.empty()) {
    int i=q.front();
    q.pop();o[i]=0;
    for (int k=d[i],j=p[k];k;k=next[k],j=p[k])
      if (c[k] && w[k]+f[i]<f[j]) {
        f[j]=f[i]+w[k];
        fa[j]=k;
        if (!o[j]) o[j]=1,q.push(j);
      };
  };
  return (f[T]<=(1<<15));
}

string CG(int a) {
  stringstream s;
  s<<a;return s.str();
}

int cal(int x) {
  int ans=0;
  FOR(i,0,30) ans+=(x>>i)&1;
  return ans;
}

int main() {
  int n,m;
  cin>>n>>m;
  int a[300];
  FOR(i,1,n) cin>>a[i];
  S=0,T=n+n+2;
  link(S,T-1,m,0);
  FOR(i,1,n) {
    link(S,i,1,0);
    link(i+n,T,1,0);
    link(T-1,i+n,1,cal(a[i]));
    FOR(j,i+1,n) link(i,j+n,1,cal(a[j])*(a[i]!=a[j]));
  };
  while (spfa()) imp();
  char b[300],tt='a'+m-1;
  int ans2=0;
  vector<string> ans;
  FOR(i,1,n) {
    int cs=0;
    for (int k=d[i+n];k;k=next[k])
      if (c[k] && p[k]==T-1) {
        cs=1;
        b[i]=tt--;
      } else
      if (c[k] && p[k]>0 && p[k]<=n) {
        cs=!!w[k];
        b[i]=b[p[k]];
      };
    if (cs) {
      ans.PB(string("")+b[i]+'='+CG(a[i]));
      FOR(x,0,30) ans2+=(a[i]>>x)&1;
    };
    ans.PB(string("print(")+b[i]+')');
  };
  cout<<SZ(ans)<<' '<<ans2<<endl;
  foreach(x,ans) cout<<*x<<endl;
  return 0;
}
