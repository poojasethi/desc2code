//  Coder:  Crystal_Bird of <Pioneer> team
 
#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#include <queue>
 
using namespace std;
 
#define maxn 500
#define mxn 1000
#define INF 1e9
 
int N,K;
int g[maxn];
int cap[mxn][mxn],cost[mxn][mxn];
int path[mxn][mxn],f[mxn],s[mxn],prev[mxn];
bool chk[maxn];
 
void init(){
    int i,j;
    memset( cap,0,sizeof(cap) );
    cap[0][1]=K; cost[0][1]=0;
    for ( i=0; i<N; i++ ){
        cap[0][i+2]=1; cost[0][i+2]=0;
        cap[1][i+2+N]=1; cost[1][i+2+N]=__builtin_popcount(g[i]);
        for ( j=i+3+N; j<=2*N+1; j++ )
            cap[i+2][j]=1,cost[i+2][j]=(g[i]==g[j-2-N])?0:__builtin_popcount(g[j-2-N]);
        cap[i+2+N][2*N+2]=1; cost[i+2+N][2*N+2]=0;
    }
}
 
int SPFA(){
    int i,j,u,v;
    queue <int> Q;
    for ( i=0; i<=2*N+2; i++ ){
        f[i]=0,s[i]=INF,prev[i]=-1;
        chk[i]=false;
    }
    f[0]=INF; s[0]=0;
    Q.push(0); chk[0]=true;
    while( !Q.empty() ){
        u=Q.front(); chk[u]=false; Q.pop();
        if( !f[u] ) continue;
        for ( v=1; v<=2*N+2; v++ ){
            if ( !cap[u][v] || s[v]<=s[u]+cost[u][v] ) continue;
            f[v]=min( f[u],cap[u][v] );
            s[v]=s[u]+cost[u][v];
            prev[v]=u;
            if ( !chk[v] ){
                chk[v]=true;
                Q.push(v);
            }
        }
    }
    if ( !f[2*N+2] ) return -1;
    for ( j=2*N+2; prev[j]>=0; j=prev[j] ){
        cap[prev[j]][j]-=f[2*N+2];
        cap[j][prev[j]]+=f[2*N+2];
        cost[j][prev[j]]=-cost[prev[j]][j];
        path[prev[j]][j]++;
        path[j][prev[j]]--;
    }
    return s[2*N+2];
}
 
void min_cost_max_flow(){
    int i,j,ct,ans=0,x;
    memset( path,0,sizeof(path) );
    while(1){
        if ( (j=SPFA())>=0 ) ans+=j;
        else break;
    }
    memset( chk,false,sizeof(chk) );
    for ( j=2+N,ct=x=0; j<2*N+2; j++ ){
        for ( i=1; i<j-N && !path[i][j]; i++ ){}
        if ( i==1 ) f[j]=x++;
        else f[j]=f[i+N];
        if ( i==1 || g[i-2]!=g[j-N-2] ) chk[j]=true,ct++;
        ct++;
    }
    printf( "%d %d\n",ct,ans );
    for ( j=2+N; j<2*N+2; j++ ){
        if ( chk[j] ) printf( "%c=%d\n",f[j]+'a',g[j-2-N] );
        printf( "print(%c)\n",f[j]+'a' );
    }
}
 
int main(){
     
    int i;
    scanf( "%d%d",&N,&K );
        for ( i=0; i<N; i++ ) scanf( "%d",g+i );
        init();
        min_cost_max_flow();
     
    return 0;
} 

				 		     						 		 	 		 			