#include <iostream>
#include <algorithm>
#include <cstdlib>

using namespace std;

//#include "alerta.h"
const int base=550;
//const int base=4;

int obtenpadre(int u,int padre[1000000])
{
  int &pu=padre[u];
  if (pu==0) return u;
  pu=obtenpadre(pu,padre);
  return pu;
}

void fusionar(int u,int v,int padre[1000000],int impar[1000000],int &numimpares)
{
  //cout<<"fus "<<u<<" "<<v<<endl;
  if (u==v) return;
  u=obtenpadre(u,padre);
  v=obtenpadre(v,padre);
  //cout<<"padres "<<u<<" "<<v<<endl;
  if (u==v) return;
  padre[u]=v;
  if (impar[u] and impar[v]) numimpares-=2;
  impar[v]^=impar[u];
}

int n,m;
int padre[2][1000000];
int impar[2][1000000];
int numimpares[2];
int ua[1000000],va[1000000],la[1000000],inda[1000000],posa[1000000];
int tiempo[1000000];

int tope;

void reset(int t)
{
  //cout<<"reset"<<endl;
  tope-=base;
  for (int i=1;i<=n;i++) {
    padre[0][i]=0;
    impar[0][i]=1;
  }
  numimpares[0]=n;
  for (int i=1;i<=m and i<tope;i++) {
    int ind=inda[i];
    if (ind<=t) {
      fusionar(ua[ind],va[ind],padre[0],impar[0],numimpares[0]);
      if (numimpares[0]==0) {
	reset(t);
	return;
      }
    }
  }
}

bool compara(int i1,int i2)
{
  return la[i1]<la[i2];
}

void traslada(int u,int t)
{
  if (tiempo[u]<t) {
    tiempo[u]=t;
    padre[1][u]=0;
    impar[1][u]=impar[0][u];
  }
}

int main()
{
  ios::sync_with_stdio(false);
  cin>>n>>m;
  for (int i=1;i<=m;i++) {
    cin>>ua[i]>>va[i]>>la[i];
    inda[i]=i;
  }
  /*
  if (n%2==1) {
    for (int i=1;i<=m;i++)
      cout<<-1<<endl;
    exit(0);
  }
  */
  sort(inda+1,inda+m+1,compara);
  for (int i=1;i<=m;i++)
    posa[inda[i]]=i;
  /*
  for (int i=1;i<=m;i++)
    cout<<"("<<i<<","<<ua[i]<<","<<va[i]<<","<<la[i]<<","<<posa[i]<<")"<<endl;
  */
  tope=(m/base+1)*base;
  int topemaximo=tope;
  for (int i=1;i<=n;i++)
    impar[0][i]=1;
  numimpares[0]=n;
  for (int t=1;t<=m;t++) {
    //cout<<"t "<<t<<endl;
    if (posa[t]<tope) {
      //cout<<"fusionar0 "<<ua[t]<<","<<va[t]<<endl;
      fusionar(ua[t],va[t],padre[0],impar[0],numimpares[0]);
      if (numimpares[0]==0)
	reset(t);
    }
    //cout<<"tope "<<tope<<endl;
    if (tope==topemaximo) {
      cout<<-1<<endl;
      continue;
    }
    numimpares[1]=numimpares[0];
    int nexttope=tope+base;
    for (int i=tope;i<nexttope and i<=m;i++) {
      int ind=inda[i];
      if (ind<=t) {
	int u=ua[ind];
	int v=va[ind];
	int l=la[ind];
	u=obtenpadre(u,padre[0]);
	v=obtenpadre(v,padre[0]);
	traslada(u,t);
	traslada(v,t);
	//cout<<"fusionar1 "<<u<<","<<v<<endl;
	fusionar(u,v,padre[1],impar[1],numimpares[1]);
	if (numimpares[1]==0) {
	  cout<<l<<endl;
	  break;
	}
      }
    }
  }
}

