#include <stdio.h>
#include <memory.h>
#include <vector>
#include <algorithm>
#define MN 100000
#define MM 524288
#define MD 20
using namespace std;
int n, m;
int d[MM][3];
pair<int,int> srt[MM]; int srtp;
int r[MM];
struct DSU {
	int cnt;
	int sz[MN], pr[MN];
	void init() {
		cnt = n;
		for (int i = 0; i < n; i++) {
			sz[i] = 1; pr[i] = -1;
		}
	}
	pair<int,int> merge(int a, int b) {
		while (pr[a] != -1) a = pr[a];
		while (pr[b] != -1) b = pr[b];
		if (a == b) return make_pair(-1,-1);
		if (sz[a] > sz[b]) swap(a,b);
		cnt += ((sz[a]+sz[b])&1)-(sz[a]&1)-(sz[b]&1);
		pr[a] = b; sz[b] += sz[a];
		return make_pair(a,b);
	}
	void split(int a, int b) {
		pr[a] = -1; sz[b] -= sz[a];
		cnt += (sz[a]&1)+(sz[b]&1)-((sz[a]+sz[b])&1);
	}
}dsu;
struct BIT {
	vector<int> vec[MM*2];
	
	void init() {
		for (int i = 1; i < MM*2; i++) vec[i].clear();
	}
	void push(int s, int e, int v) {
		s += MM; e += MM;
		vec[s].push_back(v);
		if (e != s) vec[e].push_back(v);
		for (; s/2 != e/2; s /= 2, e /= 2) {
			if ((s&1) == 0) vec[s+1].push_back(v);
			if ((e&1) == 1) vec[e-1].push_back(v);
		}
	}
}tr;
pair<int,int> st[MD][MM]; int top[MD];
void help(int p, int dep) {
	int i, j;
	pair<int,int> re;
	for (i = 0; i < tr.vec[p].size(); i++) {
		j = tr.vec[p][i];
		re = dsu.merge(d[j][0],d[j][1]);
		if (re.first >= 0)
			st[dep][top[dep]++] = re;
	}
	if (p < MM) {
		help(p*2+1,dep+1);
		help(p*2,dep+1);
	}
	else {
		for (; srtp < m; srtp++) {
			if (dsu.cnt == 0) break;
			j = srt[srtp].second;
			if (j <= p-MM) {
				re = dsu.merge(d[j][0],d[j][1]);
				if (re.first >= 0)
					st[dep][top[dep]++] = re;
			}
			if (j <= p-MM-1)
				tr.push(j,p-MM-1,j);
		}
		if (dsu.cnt == 0) r[p-MM] = srt[srtp-1].first;
		else r[p-MM] = -1;
	}
	while (top[dep]) {
		dsu.split(st[dep][top[dep]-1].first,st[dep][top[dep]-1].second);
		top[dep]--;
	}
}
int main()
{
	int i;
	
	scanf("%d%d",&n,&m);
	for (i = 0; i < m; i++) {
		scanf("%d%d%d",&d[i][0],&d[i][1],&d[i][2]);
		d[i][0]--; d[i][1]--;
		srt[i] = make_pair(d[i][2],i);
	}
	sort(srt,srt+m);
	tr.init(); dsu.init();
	help(1,0);
	for (i = 0; i < m; i++)
		printf("%d\n",r[i]);
	return 0;
}