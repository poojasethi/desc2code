#include"bits/stdc++.h"
#define PII pair<int,int>
#define X first
#define Y second
#define FOR(a,b,c) for(int a=b;a<=c;a++)
using namespace std;
const int N = 400100;

int from[N],to[N],len[N];
int ch[N][2],fa[N];
int size[N],rev[N];
int si21[N],sum[N];
PII val[N], Max[N];
int n;
void maintain(int x) {
	size[x]=size[ch[x][0]]+size[ch[x][1]]+(x<=n);
	sum[x]=sum[ch[x][0]]+sum[ch[x][1]]+(x<=n)+si21[x];
	Max[x]=max(max(Max[ch[x][0]],Max[ch[x][1]]),val[x]);
}
void reverse(int x) {
	if(!x) return;
	rev[x]^=1;
	swap(ch[x][0],ch[x][1]);
}
void pushdown(int x) {
	if(rev[x]) {
		reverse(ch[x][0]);
		reverse(ch[x][1]);
		rev[x]=0;
	}
}
int type(int x) {
	if(ch[fa[x]][0]==x) return 0;
	if(ch[fa[x]][1]==x) return 1;
	return -1;
}
void init_(int x) {
	if(~type(x)) init_(fa[x]);
	pushdown(x);
}
void rotate(int x) {		//保证fa[x]存在,不保证fa[fa[x]]和ch[x][d^1];
	int y=fa[x],d=type(x),w=ch[x][d^1];
	if(~type(y)) ch[fa[y]][type(y)]=x;
	ch[x][d^1]=y;
	ch[y][d]=w;
	fa[x]=fa[y];
	fa[y]=x;
	if(w) fa[w]=y;
	maintain(y);
	maintain(x);
}
void splay(int x) {
	init_(x);
	while(~type(x)) {
		int y=fa[x];
		if(~type(y)) {
			if(type(x)==type(y))
				rotate(y);
			else rotate(x);
		}
		rotate(x);
	}
}
void access(int x) {
	splay(x);
	si21[x]+=sum[ch[x][1]];//new
	ch[x][1]=0;
	maintain(x);
	while(fa[x]) {
		splay(fa[x]);
		si21[fa[x]]+=sum[ch[fa[x]][1]];//new
		si21[fa[x]]-=sum[x];//new
		ch[fa[x]][1]=x;
		maintain(fa[x]);
		rotate(x);
	}
}
void evert(int x) {
	access(x);
	reverse(x);
	pushdown(x);
}
bool unicom(int x,int y) {					//x!=y
	evert(x);
	evert(y);
	return fa[x];
}
void link(int x,int y) {					//x,y不连通
	evert(x);
	evert(y);
	fa[x]=y;
	si21[y]+=sum[ch[y][1]];//new
	ch[y][1]=x;
	maintain(y);
}
void cut(int x,int y) {						//x,y相邻
	evert(x);
	access(y); 					//此处有坑
	fa[x]=0;
	ch[y][0]=0;
	maintain(y);
}
int m,block,lastdel;
multiset<PII,greater<PII> > myset;
void deledge(int i) {
	int x=from[i],y=to[i],s=len[i];
	cut(x,n+i);
	cut(y,n+i);
	myset.erase(myset.find(PII(s,i)));
	evert(x);
	evert(y);
	if(sum[x]%2&&sum[y]%2) block+=2;
}
void addedge(int i) {
	int x=from[i],y=to[i],s=len[i];
	if(unicom(x,y)) {
		if(Max[y].X>s)
			deledge(Max[y].Y);
		else return;
	}
	evert(x);
	evert(y);
	if(sum[x]%2&&sum[y]%2) block-=2;
	link(x,n+i);
	link(y,n+i);
	myset.insert(PII(s,i));
}
int main() {
	cin>>n>>m;
	FOR(i,1,n) size[i]=sum[i]=1;
	block=n;
	FOR(i,1,m) {
		int t,v,s;
		scanf("%d%d%d",&t,&v,&s);
		from[i]=t,to[i]=v,len[i]=s;
		Max[n+i]=val[n+i]=PII(s,i);
		addedge(i);
		while(!block) {
			lastdel=myset.begin()->Y;
			deledge(myset.begin()->Y);
		}
		if(lastdel) {
			addedge(lastdel);
			lastdel=0;
		}
		if(block) puts("-1");
		else printf("%d\n",myset.begin()->X);
	}
	return 0;
}