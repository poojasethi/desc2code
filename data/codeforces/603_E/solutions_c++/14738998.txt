#include<iostream>
#include<algorithm>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<string>
#include<vector>
#include<stdio.h>
using namespace std;
int Get(){
    int ret,ch;
    while (!isdigit(ch=getchar()));
    ret=ch-'0';
    while (isdigit(ch=getchar()))
        ret=(ret<<1)+(ret<<3)+ch-'0';
    return ret;
}
const int maxn = 303333;
struct edge{
    int u,v,w,p;
    int rk;
}E[maxn],*H[maxn];
bool cmp(edge *a,edge *b){return a->w < b->w;}

int N,M;
int ans[maxn];
int f[maxn],siz[maxn];
int O;
vector<int>ra,rb,rO;
int Getf(int i){
    while (f[i]!=i)
        i=f[i];
    return i;
}
void go(int t){
    int a=E[t].u,b=E[t].v;
    a=Getf(a);
    b=Getf(b);
    if (a==b) return;
    if (siz[a]<siz[b]) swap(a,b);
    if (siz[a]%2 && siz[b]%2){
        rO.push_back(2);
        O-=2;
    }
    else{
        rO.push_back(0);
        O-=0;
    }
    ra.push_back(a);
    rb.push_back(b);
    f[b]=a;
    siz[a]+=siz[b];
}
void Block(int ver){
    for (int i=rO.size();i>ver;i--){
        O+=rO.back();
        int a=ra.back(),b=rb.back();
        siz[a]-=siz[b];
        f[b]=b;
        rO.pop_back();
        ra.pop_back();
        rb.pop_back();
    }
}
void solve(int l,int r,int lo,int hi){//for l,r,lo,hi    every (p<l && rk<lo) have been added
    if (l>r) return;
    int mid=(l+r)>>1;
    int ver=rO.size();
    for (int i=l;i<=mid;i++)
        if (E[i].rk < lo)
            go(i);
    ans[mid]=-1;
    for (int i=lo;i<=hi;i++){
        if (H[i]->p <= mid){
            go(H[i]->p);
            if (O==0){
                ans[mid]=i;
                break;
            }
        }
    }
    if (ans[mid]==-1){
        for (int i=l;i<=mid;i++)
            ans[i]=-1;
    }
    else{
        Block(ver);
        for (int i=lo;i<ans[mid];i++)
            if (H[i]->p < l)
                go(H[i]->p);
        solve(l,mid-1,ans[mid],hi);
    }
    Block(ver);
    for (int i=l;i<=mid;i++){
        if (E[i].rk<lo)
            go(i);
    }
    solve(mid+1,r,lo,(ans[mid]==-1?hi:ans[mid]));
    Block(ver);
}

void init(){
    cin>>N>>M;
    for (int i=1;i<=M;i++){
        E[i].u = Get();
        E[i].v = Get();
        E[i].w = Get();
        E[i].p = i;
        H[i] = &E[i];
    }
    sort(H+1,H+M+1,cmp);
    for (int i=1;i<=M;i++)
        H[i]->rk = i;
    for (int i=1;i<=N;i++){
        f[i]=i;
        siz[i]=1;
    }
}
int main(){
    init();
    O = N;
    rO.clear();
    ra.clear();
    rb.clear();
    solve(1,M,1,M);
    for (int i=1;i<=M;i++){
        if (ans[i]!=-1)
            ans[i]=H[ans[i]]->w;
        printf("%d\n",ans[i]);
    }
    return 0;
}
