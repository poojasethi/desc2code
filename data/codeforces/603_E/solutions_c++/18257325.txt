#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<vector>
#define X first
#define Y second
#define MP make_pair
#define LL long long
#define INF 0x3f3f3f3f
#define DB double
#define pb push_back
#define pii pair<int,int>
#define DEBUG(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
template<class T> void Read(T& x)
{
  x=0;char c;int flag=0,sgn=1;
  while(c=getchar())
  {
    if(c=='-')sgn=-1;
    else if(c>='0'&&c<='9')x*=10,x+=c-'0',flag=1;
    else if(flag)break;
  }
  x*=sgn;
}
const int MAXN=1e5+10,MAXM=15e5+10;
int n,m,ans[MAXM],fa[MAXN],size[MAXN],odd=0;
struct Edge{
  int u,v,id,l;
  Edge(int u=0,int v=0,int id=0,int l=0):u(u),v(v),id(id),l(l){}
  bool operator < (const Edge& rhs)const {
    return l<rhs.l;
  }
};
struct Info{
  int u,v,s1,s2,cnt;
  Info(int u=0,int v=0,int s1=0,int s2=0,int cnt=0):u(u),v(v),s1(s1),s2(s2),cnt(cnt){}
}st[MAXM];
vector<Edge> edges;
int top=0;
int find(int u)
{
  return fa[u]==u?u:find(fa[u]);
}
void unite(int u,int v)
{
  int f1=find(u),f2=find(v);
  if(f1==f2)return;
  if(size[f1]>size[f2])swap(f2,f1);
  st[++top]=Info(f1,f2,size[f1],size[f2],odd);
  fa[f1]=f2;
  if(size[f1]&1)odd--;
  if(size[f2]&1)odd--;
  if((size[f2]+size[f1])&1)odd++;
  size[f2]+=size[f1];
  size[f1]=0;
}
void back(int x)
{
  while(top!=x)
  {
    Info now=st[top];top--;
    fa[now.u]=now.u;
    size[now.u]=now.s1;
    size[now.v]=now.s2;
    odd=now.cnt;
  }
}
void work(int l,int r,int ansl,int ansr,vector<Edge> &e)
{
  if(l>r)return;
  int fr=top;
  vector<Edge> nxt;
  for(int i=0;i<e.size();i++)
  {
    Edge& now=e[i];
    if(now.id<l&&now.l<ansl)
      unite(now.u,now.v);
    else if(now.id<=r&&now.l<ansr)
      nxt.pb(e[i]);
  }
  int mid=(l+r)>>1;
  ans[mid]=ansr;
  int pr=top;
  for(int i=0;i<e.size();i++)
  {
    Edge& now=e[i];
    if(now.id<=mid)//<=
      unite(now.u,now.v);
    if(odd==0)
    {
      ans[mid]=now.l;
      break;
    }
  }
  back(pr);
  work(l,mid-1,ans[mid],ansr,nxt);
  work(mid+1,r,ansl,ans[mid],nxt);
  back(fr);
}
int main()
{
  //freopen("5.in","r",stdin);
  //freopen("5.out","w",stdout);
  Read(n),Read(m);
  for(int i=1;i<=m;i++)
  {
    int u,v,w;
    Read(u),Read(v),Read(w);
    edges.pb(Edge(u,v,i,w));
  }
  odd=n;
  memset(ans,INF,sizeof(ans));
  for(int i=1;i<=n;i++)fa[i]=i,size[i]=1;
  sort(edges.begin(),edges.end());
  work(1,m,0,INF,edges);
  for(int i=1;i<=m;i++)
    printf("%d\n",ans[i]==INF?-1:ans[i]);
}
