//In the name of God
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;
const ll mod = 1e9 + 7;
const int N = 1e5 + 10;

ll ans = 1;
vector<int> d[N];
int dp[N], n, maxa;

ll pow(ll a, int b) {
	if (!b)
		return 1;
	if (b % 2)
		return pow(a * a % mod, b / 2) * a % mod;
	return pow(a * a % mod, b / 2);
}

int main() {
	for (int i = 1; i <= 100001; i++)
		for (int j = 1; i * j <= 100001; j++)
			d[i * j].push_back(i);
	scanf("%d", &n);
	for (int i = 0; i < n; i++) {
		int x;
		scanf("%d", &x);
		maxa = max(maxa, x);
		dp[x]++;
	}
	for (int i = 1; i <= maxa; i++)
		dp[i] += dp[i - 1];
	for (int m = 2; m <= maxa; m++) {
		ll t = 1;
		for (int i = 1; i < d[m].size(); i++)
			t = t * pow(i, dp[d[m][i] - 1] - dp[d[m][i - 1] - 1]) % mod;
		ans = (ans + t * (pow(d[m].size(), n - dp[d[m].back() - 1]) - pow(d[m].size() - 1, n - dp[d[m].back() - 1]))) % mod;
		ans %= mod;
	}
	printf("%I64d\n", (ans + mod) % mod);
	return 0;
}
