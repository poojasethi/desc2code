#include <iostream>
#include <vector>
#include <set>

using namespace std;

typedef vector< char > VC;
typedef vector<  VC  > MC;

MC extract(const MC& m, int x, int y, int i, int j) {
  MC p(x,VC(y));
  for (int ii = 0; ii < x; ++ii)
    for (int jj = 0; jj < y; ++jj)
      p[ii][jj] = m[i+ii][j+jj];
  return p;
}

MC rotation(const MC& m) {
  int x = m.size();
  int y = m[0].size();
  MC r(y,VC(x));
  for (int i = 0; i < x; ++i)
    for (int j = 0; j < y; ++j)
      r[y-1-j][i] = m[i][j];
  return r;
}

MC rotation(const MC& m, int exp) {
  if (exp == 0) return m;
  return rotation(rotation(m, exp-1));
}

bool ok(const MC& m, int x, int y) {
  int a = m.size();
  int b = m[0].size();
  if (a % x != 0  or  b % y != 0) return false;
  set<MC> s;
  for (int i = 0; i < a; ++i)
    for (int j = 0; j < b; ++j) {
      if (i % x == 0 and j % y == 0) {
	MC p = extract(m, x, y, i, j);
	for (int exp = 0; exp < 4; ++exp)
	  if (s.find(rotation(p,exp)) != s.end())
	    return false; 
	s.insert(p);
      }
    }
  return true;
}

bool better(int x1, int y1, int x2, int y2) {
  return x1*y1 < x2*y2  or  (x1*y1 == x2*y2 and x1 < x2);
}

int main(void) {
  int a, b;
  cin >> a >> b;
  MC m(a, VC(b));
  for (int i = 0; i < a; ++i)
    for (int j = 0; j < b; ++j)
      cin >> m[i][j];

  int n = 0;
  int best_x = a;
  int best_y = b;
  for (int x = 1; x <= a; ++x)
     for (int y = 1; y <= b; ++y)
       if (ok(m, x, y)) {
	 ++n;
	 if (better(x,y,best_x,best_y)) {
	   best_x = x;
	   best_y = y;
	 }
       }
  cout << n << endl;
  cout << best_x << " " << best_y << endl;
}
