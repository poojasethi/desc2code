#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cfloat>
#include <numeric>

using namespace std;

const int oo = 0x3f3f3f3f;
const double eps = 1e-9;

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<string> vs;
typedef pair<int, int> pii;

#define sz(c) int((c).size())
#define all(c) (c).begin(), (c).end()
#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)
#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)

int A, B;
string grid[30];

vs rotate(vs v) {
	int x = sz(v), y = sz(v[0]);
	vs vv(y, string(x, ' '));
	FOR(i, 0, y) FOR(j, 0, x) vv[i][j] = v[x-j-1][i];
	return vv;
}

vs getsmallest(vs v) {
	vs best = v;
	FOR(i, 0, 3) {
		v = rotate(v);
		best = min(best, v);
	}
	return best;
}

bool good(int X, int Y) {
	vector<vs> pieces;
	for (int i = 0; i < A; i += X) for (int j = 0; j < B; j += Y) {
		vs cur;
		FOR(k, i, i + X) cur.push_back(grid[k].substr(j, Y));
		cur = getsmallest(cur);
		pieces.push_back(cur);
	}
	sort(all(pieces));
	FOR(i, 0, sz(pieces)-1) if (pieces[i] == pieces[i+1]) return false;
	return true;
}

int main() {
	cin >> A >> B;
	FOR(i, 0, A) cin >> grid[i];
	pii res(A, B);
	int num = 0;
	FOR(X, 1, A+1) FOR(Y, 1, B+1) {
		if (A % X || B % Y) continue;
		if (good(X, Y)) {
			num++;
			if (X*Y < res.first * res.second || (X*Y == res.first * res.second && X < res.first)) res = pii(X, Y);
		}
	}
	cout << num << endl << res.first << ' ' << res.second << endl;
	return 0;
}
