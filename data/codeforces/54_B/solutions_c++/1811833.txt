#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>

using namespace std;

vector <string> rotate(vector <string> M)
{
	int R = M.size(), C = M[0].size();
	
	vector <string> ans;
	for(int j=C-1; j>=0; j--)
	{
		string s = "";
		for(int i=0; i<R; i++)
			s += M[i][j];
		ans.push_back(s);
	}
	return ans;
}

vector <string> minRotate(vector <string> M)
{
	vector <string> v1 = M;
	vector <string> v2 = rotate(v1);
	vector <string> v3 = rotate(v2);
	vector <string> v4 = rotate(v3);
	return min(min(v1, v2), min(v3, v4));
}

bool valid(vector <string> M, int x, int y)
{
	set < vector <string> > S;
	
	int cnt = 0;
	for(int i=0; i<M.size(); i+=x)
	{
		for(int j=0; j<M[0].size(); j+=y)
		{
			cnt++;
			
			vector <string> piece;
			for(int ii=i; ii<i+x; ii++)
				piece.push_back(M[ii].substr(j, y));
			S.insert(minRotate(piece));
		}
	}
	
	return S.size() == cnt;
}

int main()
{
	int R, C;
	while(cin>>R>>C)
	{
		vector <string> M(R);
		for(int i=0; i<R; i++)
			cin>>M[i];
		
		int ans = 0, minT = 1<<30, bestX = 1<<30, bestY = 1<<30;
		for(int x=1; x<=R; x++)
		{
			if(R % x != 0) continue;
			
			for(int y=1; y<=C; y++)
			{
				if(C % y != 0) continue;
				
				if(valid(M, x, y))
				{
					ans++;
					if(x * y < minT || (x * y == minT && x < bestX))
					{
						minT = x * y;
						bestX = x;
						bestY = y;
					}
				}
			}
		}
		
		cout<<ans<<endl;
		cout<<bestX<<" "<<bestY<<endl;
	}
	
	return 0;
}