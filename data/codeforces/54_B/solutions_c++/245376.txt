#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <cstdio>
#include <string>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <string.h>
#include <cassert>

using namespace std;

#define GI ({int t;scanf("%d",&t);t;})
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define REP(i,n) FOR(i,0,n)
#define pb push_back
#define sz size()
#define INF (int)1e9

typedef long long LL;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<vector<int> > VVI;
typedef pair<int,int> PII;

const int mn=22;
int m,n;
string grid[mn];

VS rot(VS v){
	int m=v.sz, n=v[0].sz;
	VS ret(n);
	REP(i,n)	REP(j,m)	ret[i].pb(' ');
	REP(i,m)	REP(j,n)	ret[n-j-1][i]=v[i][j];	
	return ret;	
}

int main(){
	
//	freopen("inp.txt","r",stdin);
//	freopen("out.txt","w",stdout);
	cin>>m>>n;
	REP(i,m)	cin>>grid[i];
	int ans=0, ansx=m, ansy=n;
	FOR(x,1,m+1)	FOR(y,1,n+1){
		if(m%x || n%y)	continue;
		vector<VS> pieces;
		int mbx=m/x, nby=n/y;
		set<VS> sv;
		bool ok=1;
		REP(i,mbx)	REP(j,nby){
			VS v;
			FOR(i1,i*x,i*x+x)	v.pb(grid[i1].substr(j*y,y));
			pieces.pb(v);
			if(sv.find(v)!=sv.end())	ok=0;
			sv.insert(v);
		}
		REP(i,pieces.sz){
			VS v=pieces[i];
			REP(times,3){
				v=rot(v);
				if(v!=pieces[i] && sv.find(v)!=sv.end())	ok=0;
			}
		}
		if(ok){
			ans++;
			if(x*y<ansx*ansy || x*y==ansx*ansy && x<ansx)	ansx=x, ansy=y;	
		}
	}
	cout<<ans<<endl<<ansx<<" "<<ansy<<endl;
//	while(1);
	return 0;
}
