#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <queue>
#include <cmath>
using namespace std;

const int MAXN = 100000 + 10;

deque <int> :: iterator it;

struct rec{
	deque<int> q;
	int num[MAXN]; 
}kuai[400];

int n,m,ty,x,y,vd,fq,ans,
	pos[MAXN];

void Change( int l, int r )
{
	int L = pos[l], R = pos[r],tmp;
	int ll = l%fq,rr=r%fq;
	if( L == R ){
		it = kuai[R].q.begin() + rr;
		tmp = *it;
		kuai[R].q.erase( kuai[R].q.begin()+rr );
		kuai[R].q.insert( kuai[R].q.begin()+ll, tmp );
		return;
	}
	it = kuai[R].q.begin()+rr;
	tmp = *it;
	kuai[R].q.erase( kuai[R].q.begin()+rr );
	kuai[R].num[tmp] --;
	for( int i = L; i < R; ++i )
	{
		int s = kuai[i].q.back();
		kuai[i].q.pop_back();
		kuai[i].num[s] --;
		kuai[i+1].q.push_front( s );
		kuai[i+1].num[s] ++;
	}
	kuai[L].q.insert( kuai[L].q.begin()+ll, tmp );
	kuai[L].num[tmp] ++;
}

void Qry( int l, int r )
{
	int L = pos[l], R = pos[r],tmp;
	int ll = l%fq,rr=r%fq;
	scanf("%d",&vd); vd = (vd+ans-1)%n+1;
	ans = 0;
	if( L == R )
	{
		for( it = kuai[L].q.begin()+ll; it <= kuai[L].q.begin()+rr; ++it ) if( *it == vd ) ans ++;
		return;
	}
	for( int i = L+1; i < R; ++i ) ans += kuai[i].num[vd];
	for( it = kuai[L].q.begin()+ll; it < kuai[L].q.end(); ++it ) if( *it == vd ) ans ++;
	for( it = kuai[R].q.begin(); it <= kuai[R].q.begin()+rr; ++it ) if( *it == vd ) ans ++;
}

int main()
{
	scanf("%d",&n);  fq = pow(n, 0.618);  
	for( int i = 0; i < n; ++i ) pos[i] = i/fq;
	
	for( int i = 0; i < n; ++i ) scanf("%d",&x),kuai[pos[i]].q.push_back(x),kuai[pos[i]].num[x]++;
	scanf("%d",&m);
	
	for( int i = 1; i <= m; ++i )
	{
		scanf("%d%d%d",&ty,&x,&y);
		x = (x+ans-1)%n; y = (y+ans-1)%n;
		if( x > y ) swap( x, y );
		if( ty == 1 ) Change( x, y );
		else Qry( x, y ),printf("%d\n",ans); 
	}

	return 0;
}