#include <queue>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

void input(void);
void solve(void);

int main() {
    input();
    solve();
    return 0;
}

const int maxn = 1 << 17;
const int K = 320;

int n;
deque<int> a[maxn / K];
int c[maxn / K][maxn];

void input() {
    scanf("%d", &n);
    for (int i = 0, x; i < n; i++) {
        scanf("%d", &x);
        a[i / K].push_back(x);
        c[i / K][x] += 1;
    }
}

void solve() {
    int q, pre = 0;
    scanf("%d", &q);
    for (int i = 0; i < q; i++) {
        int t, l, r, k;
        scanf("%d%d%d", &t, &l, &r);
        l = (l + pre - 1) % n;
        r = (r + pre - 1) % n;
        if (l > r) swap(l, r);
        int lb = l / K, rb = r / K;
        int lu = l % K, ru = r % K;
        if (t == 1) {
            int last = a[rb][ru];
            a[rb].erase(a[rb].begin() + ru);
            c[rb][last] -= 1;
            for (int b = rb; b > lb; b--) {
                int ed = a[b - 1].back();
                a[b].push_front(ed);
                c[b][ed] += 1;
                a[b - 1].pop_back();
                c[b - 1][ed] -= 1;
            }
            c[lb][last] += 1;
            a[lb].insert(a[lb].begin() + lu, last);
        } else {
            scanf("%d", &k);
            k = (k + pre - 1) % n + 1;
            pre = 0;
            if (lb == rb) {
                for (int it = lu; it <= ru; it++) pre += a[lb][it] == k;
            } else {
                for (int it = 0; it <= ru; it++) pre += a[rb][it] == k;
                for (int it = lu; it < a[lb].size(); it++) pre += a[lb][it] == k;
                for (int it = lb + 1; it <= rb - 1; it++) pre += c[it][k];
            }
            printf("%d\n", pre);
        }
    }
}