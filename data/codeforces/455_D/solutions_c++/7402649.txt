#include <iostream>
#include <cstdio>
#include <cstring>
#include <deque>
#include <cmath>
using namespace std;

const int N = 1e5 + 5;
int n, m, num;
int a[N];
int cnt[400][N];
deque <int> mark[400];

void solve() {
    int q, lastans = 0;
    scanf("%d", &q);
    while (q--) {
	int ch, l, r;
	scanf("%d%d%d", &ch, &l, &r);
	l = (l + lastans - 1) % n + 1;
	r = (r + lastans - 1) % n + 1;
	if (l > r) swap(l, r);
	if (ch == 2) {
	    int k;
	    scanf("%d", &k);
	    k = (k + lastans - 1) % n + 1;
	    int L = (l - 1) / m, R = (r - 1) / m;
	    lastans = 0;
	    for (int i = L; i <= R; ++i) {
		int p1 = 0, p2 = mark[i].size() - 1;
		if (i == L) p1 = (l - 1) % m;
		if (i == R) p2 = (r - 1) % m;
		if (p1 == 0 && p2 == mark[i].size() - 1) {
		    lastans += cnt[i][k];
		    continue;
		}
		for (int j = p1; j <= p2; ++j)
		    if (mark[i][j] == k)
			++lastans;
	    }
	    printf("%d\n", lastans);
	    continue;
	}
	int L = (l - 1) / m, R = (r - 1) / m;
	int T = mark[R][r - R * m - 1];
	//if (L == R) {
	//    swap(mark[R][r - R * m - 1], mark[R][l - R * m - 1]);
	//    continue;
	//	}
	mark[R].erase(mark[R].begin() + (r - R * m - 1));
	--cnt[R][T];
	mark[L].insert(mark[L].begin() + (l - L * m - 1), T);
	++cnt[L][T];
	for (int i = L; i < R; ++i) {
	    int T = mark[i].back();
	    mark[i].pop_back();
	    mark[i + 1].push_front(T);
	    --cnt[i][T];
	    ++cnt[i + 1][T];
	}
    }
}

int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) scanf("%d", &a[i]);
    m = sqrt(n + 1);
    num = (n + m - 1) / m;
    for (int i = 0; i < num; ++i) {
	int p1 = m * i + 1, p2 = m * i + m;
	for (int j = p1; j <= p2 && j <= n; ++j) {
	    mark[i].push_back(a[j]);
	    ++cnt[i][a[j]];
	} 
    }
    solve();
    return 0;
}
