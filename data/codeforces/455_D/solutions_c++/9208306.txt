#include <stdio.h>
#include <deque>
#include <math.h>
#define MAX 100010

int n, rt, query;
std::deque<int> vec[330];
int sum[330][MAX];

int main(void){
	int i, t, l, r, com, k, lastans=0;
	int L, R;
	scanf("%d", &n);
	rt=sqrt((double)n);
	for (i=1;i<=n;i++){
		scanf("%d", &t);
		vec[(i-1)/rt + 1].push_back(t);
		sum[(i-1)/rt+1][t]++;
	}
	scanf("%d", &query);
	for (;query>=1;query--){
		scanf("%d %d %d", &com, &l, &r);
		l=(l+lastans-1+n) % n + 1, r=(r+lastans-1+n) % n + 1;
		if (l>r) t=l, l=r, r=t;
		L=(l-1)/rt+1, R=(r-1)/rt+1;
		if (com==1){
			if (L==R){
				k=vec[L][(r-1)%rt];
				vec[L].erase(vec[L].begin()+(r-1)%rt);
				vec[L].insert(vec[L].begin()+(l-1)%rt, k);
			}else{
				for (i=L;i<R;i++){
					k=vec[i].back();
					vec[i].pop_back();
					sum[i][k]--;
					vec[i+1].push_front(k);
					sum[i+1][k]++;
				}
				k=vec[R][(r-1)%rt+1];
				vec[R].erase(vec[R].begin()+((r-1)%rt+1));
				sum[R][k]--;
				vec[L].insert(vec[L].begin()+(l-1)%rt, k);
				sum[L][k]++;
			}
		}else{
			scanf("%d", &t);
			t=(t+lastans-1+n)%n+1;
			lastans=0;
			if (L==R){
				for (i=(l-1)%rt;i<=(r-1)%rt;i++) lastans+=(vec[L][i]==t);
			}else{
				for (i=(l-1)%rt;i<vec[L].size();i++) lastans+=(vec[L][i]==t);
				for (i=0;i<=(r-1)%rt;i++) lastans+=(vec[R][i]==t);
				for (i=L+1;i<R;i++) lastans+=sum[i][t];
			}

			printf("%d\n", lastans);
		}
	}
	return false;
}