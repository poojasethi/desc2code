#include<bits/stdc++.h>
using namespace std;
const int maxn = 1000 + 131;
const int Step[4][2] = {0,1, 0,-1, 1,0, -1,0};
const int INF = 9999999;
typedef pair<int,int> pi;
int Dist[3][maxn][maxn];
char Map[maxn][maxn];
int N, M;

void INIT()
{
	for(int i = 0; i < maxn; ++i)
	for(int j = 0; j < maxn; ++j)
	Dist[0][i][j] = Dist[1][i][j] = Dist[2][i][j] = INF;
}

void BFS(int k) {
	queue< pi > Que;
	for(int i = 0; i < N; ++i)
	for(int j = 0; j < M; ++j)
	{
		if(Map[i][j] == k + '1')
		{
			Que.push(pi(i,j));
			Dist[k][i][j] = 0;
		}
	}
	while(!Que.empty())
	{
		pi tmp = Que.front();
		Que.pop();
		int x = tmp.first, y = tmp.second;
		for(int i = 0; i < 4; ++i)
		{
			int xx = x + Step[i][0];
			int yy = y + Step[i][1];
			if(xx < 0 || yy < 0 || xx >= N || yy >= M) continue ;
			if(Map[xx][yy] == '#') continue ;
			if(Dist[k][xx][yy] > (Dist[k][x][y] + (Map[xx][yy] == '.')))
			{
				Dist[k][xx][yy] = Dist[k][x][y] + (Map[xx][yy] == '.');
				Que.push(pi(xx, yy));
			}
		}		
	}
}

int Get_Ans()
{
	int Ans = INF;
	for(int i = 0; i < N; ++i)
	for(int j = 0; j < M; ++j)
	{
		if(Map[i][j] != '#')
		{
			int tmp = Dist[0][i][j] + Dist[1][i][j] + Dist[2][i][j];
			if(Map[i][j] == '.') tmp -= 2;
			Ans = min(Ans, tmp);
		}
	}
	return Ans >= INF ? -1 : Ans;
}

int main()
{
	while(scanf("%d%d",&N,&M)!= EOF)
	{
		for(int i = 0; i < N; ++i)
		scanf("%s",Map[i]);
		INIT();
		BFS(0), BFS(1), BFS(2);
		printf("%d\n", Get_Ans());
	}
}

   		 	  	 	  		 				  	 	 	