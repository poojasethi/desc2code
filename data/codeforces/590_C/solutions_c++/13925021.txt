#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdio>
#include<queue>
using namespace std;
char mp[1010][1010];
int dis[5][5],d[5][1010][1010];
int dx[]={1,-1,0,0},dy[]={0,0,1,-1};
int n,m,ans;
bool vis[1010][1010];
struct node{
	int x,y,w;
};
bool check(int x,int y){return x<=n&&y<=m&&x>0&&y>0;}
void bfs(int num)
{
	queue<node> q;
	node s;
	memset(vis,0,sizeof(vis));
	for(int i=1;i<=n;i++)
	for(int j=1;j<=m;j++)
	{
		d[num][i][j]=-1;
		if(mp[i][j]-'0'==num)
		{
			s.x=i;s.y=j;s.w=0;
			q.push(s);
			vis[i][j]=1;
		}
	}
	while(!q.empty())
	{
		node now=q.front();q.pop();
		int tx=now.x,ty=now.y;
		for(int i=0;i<4;i++)
		{
			tx=now.x+dx[i];ty=now.y+dy[i];
			if(mp[tx][ty]!='#'&&check(tx,ty)&&!vis[tx][ty])
			{
				node temp=now;
				temp.x=tx;temp.y=ty;temp.w++;
				vis[tx][ty]=1;
				d[num][tx][ty]=d[num][now.x][now.y]+1;
				q.push(temp);
				if(mp[tx][ty]!='.')
				{
					if(dis[num][mp[tx][ty]-'0']==-1)
					dis[num][mp[tx][ty]-'0']=d[num][now.x][now.y]+1;
				}
			}
		}
	}
}
int main()
{
	memset(mp,'#',sizeof(mp));
	memset(dis,-1,sizeof(dis));
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
	{
		scanf("%s",mp[i]+1);
	}
	bfs(1);
	bfs(2);
	bfs(3);
	for(int i=1;i<=3;i++)
	for(int j=1;j<=3;j++)
	{
		if(dis[i][j]==-1&&i!=j)
		{
			printf("-1");
			return 0;
		}
	}
	ans=min(dis[1][2]+dis[1][3],min(dis[2][3]+dis[2][1],dis[3][1]+dis[3][2]));
	for(int i=1;i<=n;i++)
	for(int j=1;j<=m;j++)
	{
		if(d[1][i][j]!=-1&&d[2][i][j]!=-1&&d[3][i][j]!=-1)
		ans=min(ans,d[1][i][j]+d[2][i][j]+d[3][i][j]+1);
	}
	printf("%d",ans);
	return 0;
}
	    		  		    	  	  	