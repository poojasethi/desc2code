#include <bits/stdc++.h>

using namespace std;

const int maxn = 1010;
const int dx[] = { 0, -1, 0, 1 };
const int dy[] = { -1, 0, 1, 0 };

int n, m;
char G[maxn][maxn];
int dis[3][maxn][maxn];
bool vis[maxn][maxn];

struct Node {
	int x, y, d;
	Node(int _x, int _y, int _d) {
		x = _x, y = _y, d = _d;
	}
	bool operator < (const Node &r) const {
		return d > r.d;
	}
};

bool inB(int x, int y) {
	return 1 <= x && x <= n && 1 <= y && y <= m && G[x][y] != '#';
}

void BFS(char c) {
	int id = c-'1';
	priority_queue <Node> Q;
	memset(vis, 0, sizeof(vis));
	for(int i = 1; i<= n; i ++) for(int j = 1; j <= m; j ++) {
		if(G[i][j] == c) {
			Q.push(Node(i, j, 0));
			vis[i][j] = 1;
		}
	}
	while(!Q.empty()) {
		Node cur = Q.top(); Q.pop();
		dis[id][cur.x][cur.y] = cur.d;
		for(int d = 0; d < 4; d ++) {
			int xx = cur.x+dx[d], yy = cur.y+dy[d];
			if(inB(xx, yy) && !vis[xx][yy]) {
				Q.push(Node(xx, yy, cur.d+(G[xx][yy] == '.')));
				vis[xx][yy] = 1;
			}
		}
	}
}

int main() {
	scanf("%d%d", &n, &m);
	for(int i = 1; i <= n; i ++) scanf("%s", G[i]+1);
	memset(dis, -1, sizeof(dis));
	BFS('1'); BFS('2'); BFS('3');
	
	bool ok = 0;
	int res = 1 << 30;
	for(int i = 1; i <= n; i ++) for(int j = 1; j <= m; j ++) {
		if(~dis[0][i][j] && ~dis[1][i][j] && ~dis[2][i][j]) {
			ok = 1;
			res = min(res, dis[0][i][j]+dis[1][i][j]+dis[2][i][j]+(G[i][j] == '.' ? -2 : 0));
		}
	}
	if(ok) printf("%d\n", res);
	else printf("-1\n");
	return 0;
}

		  	 		   	   							 		  	