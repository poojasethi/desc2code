#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
const int maxn=1000+5;
const int inf=1e7;

int n,m,pre[4][2]={0,1,1,0,0,-1,-1,0};
int f[5][maxn][maxn];
char mp[maxn][maxn];

struct node 
{
	int x,y;
}pos[maxn*maxn];

void init()
{
	for(int i=0;i<3;i++)
		for(int j=0;j<n;j++)
			for(int k=0;k<m;k++)
				f[i][j][k]=inf;
}

bool judge(int xx,int yy)
{
	if(xx<0||xx>=n||yy<0||yy>=m)
		return 0;
	return 1;
}

queue<node> q;
void bfs(int c)
{
	char ch=c+'1';
	while(!q.empty())
		q.pop();

	node a,b;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			if(mp[i][j]==ch)
			{
				a.x=i;a.y=j;
				q.push(a);
				f[c][i][j]=0;
			}
	while(!q.empty())
	{
		a=q.front();
		q.pop();
		for(int i=0;i<4;i++)
		{
			int xx=a.x+pre[i][0];
			int yy=a.y+pre[i][1];
			if(!judge(xx,yy)||mp[xx][yy]=='#')
				continue ;
			if(f[c][xx][yy]>f[c][a.x][a.y]+(mp[a.x][a.y]=='.'))
			{
				f[c][xx][yy]=f[c][a.x][a.y]+(mp[a.x][a.y]=='.');
				b.x=xx,b.y=yy;q.push(b);
			}	
		}
	}
}

int deal()
{
	int minn=inf;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			minn=min(minn,f[0][i][j]+f[1][i][j]+f[2][i][j]+(mp[i][j]=='.'));
	return minn;
}

int main()
{
	while(~scanf("%d%d",&n,&m))
	{
		for(int i=0;i<n;i++)
			scanf("%s",mp[i]);
		init();
		for(int i=0;i<3;i++)
			bfs(i);
		int mm=deal();
		printf("%d\n",(mm>=inf)?-1:mm);
	}
	return 0;
}
			  			 			     	  		  	    		