#include<cstdio>
#include<deque>
#include<cstring>
using namespace std;
typedef pair<int,int> pii;
char grid[1000][1001];
int dis[3][1000][1000],n,m;
bool u[3][1000][1000];
const int dx[4]={-1,0,0,1},
		  dy[4]={0,-1,1,0};
bool inrange(int x,int y){
	return x>=0&&x<n&&y>=0&&y<m;
}
template<typename T>T MIN(T a,T b){return a<b?a:b;}
void BFS(int c){
	deque<pii> que;
	for(int i=0;i<n;i++) for(int j=0;j<m;j++)
		if(grid[i][j]=='1'+c){
			que.push_front(pii(i,j));
			dis[c][i][j]=0;
		}else dis[c][i][j]=1<<30;
	while(!que.empty()){
		int x=que.front().first,y=que.front().second,tx,ty;
		que.pop_front();
		u[c][x][y]=1;
		for(int d=0;d<4;d++){
			tx=x+dx[d];ty=y+dy[d];
			if(!inrange(tx,ty)||grid[tx][ty]=='#') continue;
			int cost=grid[tx][ty]=='.'?1:0;
			if(dis[c][tx][ty]<=dis[c][x][y]+cost) continue;
			dis[c][tx][ty]=dis[c][x][y]+cost;
			if(cost) que.push_back(pii(tx,ty)); else que.push_front(pii(tx,ty));
		}
	}
	
}
int main(){
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;i++) scanf("%s",grid+i);
	for(int i=0;i<3;i++) BFS(i);
	int res=1<<30;bool ok=false;
	for(int i=0;i<n;i++) for(int j=0;j<m;j++)
		if(u[0][i][j]&&u[1][i][j]&&u[2][i][j]){
			ok=true;
			res=MIN(res,dis[0][i][j]+dis[1][i][j]+dis[2][i][j]-(grid[i][j]=='.'?2:0));
		}
	printf("%d\n",ok?res:-1);
	return 0;
}
		  	    			   		 	  	  	  	