#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

struct node
{
	int x,y;
	node(int xx,int yy)
	{
		x=xx;
		y=yy;
	}
};

#define maxn 1005
#define INF 0x3f3f3f
int div[4][2]={-1,0,1,0,0,-1,0,1};
int dis[5][maxn][maxn];
char mp[maxn][maxn];
int n,m;
queue<node>q;

bool ok(int x,int y)
{
	if(x<0 || x>=n || y<0 || y>=m || mp[x][y]=='#')
		return 0;
	return 1;
}

void bfs(int ch)
{
	char c=ch+'1';
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
		{
			if(mp[i][j]==c)
			{
				node temp(i,j);
				q.push(temp);
				dis[ch][i][j]=0;
			}
		}
	while(!q.empty())
	{
		node p=q.front();
		q.pop();
		for(int i=0;i<4;i++)
		{
			int x=p.x+div[i][0];
			int y=p.y+div[i][1];
			int d=dis[ch][p.x][p.y]+(mp[p.x][p.y]=='.');
			if(ok(x,y) && dis[ch][x][y]>d)
			{
				dis[ch][x][y]=d;
				node temp(x,y);
				q.push(temp);
			}
		}
	}
}

int main()
{
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;i++)
		scanf("%s",mp[i]);
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			for(int k=0;k<3;k++)
				dis[k][i][j]=INF;
	for(int i=0;i<3;i++)
		bfs(i);
	int ans=INF;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			ans=min(ans,dis[0][i][j]+dis[1][i][j]+dis[2][i][j]+(mp[i][j]=='.'));
	if(ans==INF) printf("-1\n");
	else printf("%d\n",ans);
	return 0;
}
    	 	 		  		 	   		 			