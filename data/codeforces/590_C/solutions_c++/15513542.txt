#include<cstdio>
#include<queue>
#include<cstring>
using namespace std;
typedef pair<int,int> pii;
const int cx[4]={-1,0,0,1},cy[4]={0,-1,1,0},oo=1001*1001;
deque<pii> state[3];
int d[3][1000][1000],n,m;
char grid[1000][1000];
bool ingrid(int x,int y){
	return (x>=0&&x<n&&y>=0&&y<m);
}
void calcu(int st){
	deque<pii> que=state[st];
	d[st][que.front().first][que.front().second]=0;
	while(!que.empty()){
		int i=que.front().first,j=que.front().second;
		que.pop_front();
		int nd=d[st][i][j];
		for(int k=0;k<4;k++){
			int ti=i+cx[k],tj=j+cy[k];
			if(ingrid(ti,tj)&&grid[ti][tj]!='#'){
				if(grid[ti][tj]=='.'&&nd+1<d[st][ti][tj]){
					d[st][ti][tj]=nd+1;que.push_back(pii(ti,tj));
				}else if(grid[ti][tj]!='.'&&nd<d[st][ti][tj]){
					d[st][ti][tj]=nd;que.push_front(pii(ti,tj));
				}
			}
		}
	}
}
int main(){
	scanf("%d %d\n",&n,&m);
	memset(d,oo,sizeof(d));
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			grid[i][j]=getchar();
			if(grid[i][j]>'0'&&grid[i][j]<'4')
				state[grid[i][j]-'1'].push_back(pii(i,j));	
		}
		getchar();
	}
	for(int k=0;k<3;k++)
		calcu(k);
	int res=oo;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			if(grid[i][j]!='#')
				if(grid[i][j]=='.') res=min(res,d[0][i][j]+d[1][i][j]+d[2][i][j]-2);
				else res=min(res,d[0][i][j]+d[1][i][j]+d[2][i][j]);
	printf("%d\n",(res==oo?-1:res));
	return 0;
}
