#include<iostream>
#include<set>
#include<queue>
using namespace std;
const int maxn=1000*1000+10;
int a[1010][1010],dis[maxn][4],t=4;
set <int> st[maxn];
void bfs(int v)
{
    queue <int> qe;
    qe.push(v);
    dis[v][v]=0;
    while(qe.size())
    {
        int u=qe.front();
        qe.pop();
        for(set<int>::iterator it=st[u].begin(); it!=st[u].end(); it++)
        {
            int u2=*(it);
            if(dis[u2][v]==maxn)
            {
                dis[u2][v]=dis[u][v];
                if(u2>3) dis[u2][v]++;
                qe.push(u2);
            }
        }
    }
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n,m;
    cin>>n>>m;
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
        {
            char s;
            cin>>s;
            if(s=='.') a[i][j]=t,t++;
            if(int(s)-int('0')>0 && int(s)-int('0')<4) a[i][j]=int(s)-int('0');
            if(s!='#')
            {
                if(i>0) st[a[i-1][j]].insert(a[i][j]),st[a[i][j]].insert(a[i-1][j]);
                if(j>0) st[a[i][j-1]].insert(a[i][j]),st[a[i][j]].insert(a[i][j-1]);
            }
        }
    for(int i=1; i<t; i++) dis[i][1]=dis[i][2]=dis[i][3]=maxn;
    bfs(1),bfs(2),bfs(3);
    int mn=dis[2][1]+dis[3][1]+dis[3][2]-max(max(dis[2][1],dis[3][1]),dis[3][2]);
    for(int i=4; i<t; i++) mn=min(mn,dis[i][1]+dis[i][2]+dis[i][3]-2);
    if(mn>t)
        cout<<-1<<'\n';
    else
        cout<<mn<<'\n';
    return 0;
}
