#include<cstdio>
#include<algorithm>
#define nn 100010
using namespace std;
typedef long long ll;
ll a[nn],b[nn];
int j,n,d,w,u_p,ans,l,now,r,d_o,pre[nn],f[nn];
struct node{
    int t[nn],id[nn];
void add(int s,int w)
 {for (int i=w;i<=n;i+=i&(-i))
   if (s>t[i])t[i]=s,id[i]=j;
 } 
int ask(int w)
 {
  int s=0,tem=0;
  if ((!w)||(w>n))return tem;
  for (int i=w;i;i-=i&(-i))
   if (t[i]>s)s=t[i],tem=id[i];
  return tem;
 }
}T1,T2;
void ok(int w){if (pre[w])ok(pre[w]);printf("%d ",w);}
int main()
{
 scanf("%d%d",&n,&d);
 for (j=1;j<=n;j++)scanf("%I64d",&a[j]),b[j]=a[j];
 sort(b+1,b+n+1);
 for (j=1;j<=n;j++)
       {
		w=lower_bound(b+1,b+n+1,a[j])-b;
        u_p=lower_bound(b+1,b+n+1,a[j]+d)-b;
        d_o=upper_bound(b+1,b+n+1,a[j]-d)-b-1;
        l=T1.ask(d_o);r=T2.ask(n-u_p+1);
	    if (f[l]>f[r])
	     f[j]=f[l]+1,pre[j]=l;else f[j]=f[r]+1,pre[j]=r;
	    T1.add(f[j],w);T2.add(f[j],n-w+1);
	   }
 ans=0;
 for (j=1;j<=n;j++)if (ans<f[j])ans=f[j],now=j;
 printf("%d\n",ans);
 ok(now);printf("\n");
 return 0;
}
