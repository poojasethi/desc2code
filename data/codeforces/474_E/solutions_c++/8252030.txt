#include <bits/stdc++.h>
using namespace std;
#define N 100005
int pre[N], n, last, ans, F[N], i, id, L, R, t1, t2;
long long a[N], b[N], d;
void print(int i){ if(pre[i]) print(pre[i]); cout << i << " "; }
struct fenwickTree{
    int max_extension[N], id[N];
    inline void add(int x, int s){ for(; x <= n; x += (x & (-x))) if(max_extension[x] < s) max_extension[x] = s, id[x] = i; }
    inline int ask(int x){ int s = 0, num = 0; for(; x; x -= (x & (-x))) if(max_extension[x] > s) s = max_extension[x], num = id[x]; return num;  }
}B, A;
int main(){
    scanf("%d%I64d",&n,&d);
    for (i=1;i<=n;i++) scanf("%I64d",&a[i]),b[i]=a[i];  sort(b+1,b+n+1);
    for (i=1;i<=n;i++)
      {
        id=lower_bound(b+1,b+n+1,a[i])-b;
        L=upper_bound(b+1,b+n+1,a[i]-d)-(b+1);
        R=lower_bound(b+1,b+n+1,a[i]+d)-b;
        t1=A.ask(L);t2=B.ask(n-R+1);
        if (F[t1]>F[t2]) F[i]=F[t1]+1,pre[i]=t1;else F[i]=F[t2]+1,pre[i]=t2;
        A.add(id,F[i]);B.add(n-id+1,F[i]);
      }
      for (i=1;i<=n;i++) 
        if (F[i]>ans) ans=F[i],last=i;
      printf("%d\n",ans);print(last);
}