#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> ipr;
typedef long long LL;
#define mp make_pair
#define x first
#define y second
const int maxn = 2e5 + 100;
int V, table[maxn], pre[maxn], cnt;
struct bit {
	ipr d[maxn];
	bit() { memset(d, 0, sizeof d); }
	ipr get_max(int p) {
		ipr ret = mp(0, 0);
		for(int i = p; 0 < i; i -= i & (-i)) {
			ret = max(ret, d[i]);
		}
		return ret;
	}
	void modify(int p, const ipr&s) {
		for(int i = p; i <= V; i += i & (-i)) {
			d[i] = max(d[i], s);
		}
	}
} T[2];
int n;
LL D, H[maxn], vals[maxn];

int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> D;
	for(int i = 0; i < n; ++i) {
		cin >> H[i];
		vals[V++] = H[i];
	}
	sort(vals, vals + V);
	V = unique(vals, vals + V) - vals;
	ipr ans = mp(0, 0);
	for(int i = 0, p = 1; i < n; ++i, ++p) {
		ipr u = T[0].get_max(upper_bound(vals, vals + V, H[i] - D) - vals), 
			v = T[1].get_max(V - (lower_bound(vals, vals + V, H[i] + D) - vals));
		ipr s = max(u, v);
		pre[p] = s.y;
		++s.x, s.y = p;
		ans = max(ans, s);
		int pos = lower_bound(vals, vals + V, H[i]) - vals;
		T[0].modify(pos + 1, s), T[1].modify(V - pos, s);
	}
	cout << ans.x << '\n';
	for(int i = ans.y; 0 < i; i = pre[i]) {
		table[++cnt] = i;
	}
	for(int i = cnt; 0 < i; --i) {
		cout << table[i] << ' ';
	}
	cout << '\n';
	

	return 0;
}
