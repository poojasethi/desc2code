#include<cstdio>
#include<algorithm>
#include<cstring>
#define rep(i,x,y) for(int i=x;i<=y;++i)
#define dep(i,x,y) for(int i=x;i>=y;--i)
#define LL long long
using namespace std;
const LL top=(LL)1e15;
#define N 100005

struct Seg{
	Seg *l,*r;
	int p;
	
	Seg(){l=r=NULL,p=0;}
	
}*root;

int n,ans,mx,from[N],t,f[N],point;
LL x,d;

inline int Max(int x,int y){
	if(f[x]>f[y]) return x;
	return y;
}

int query(Seg *x,LL l,LL r,LL a,LL b){
	if(b<a) return 0;
	if(!x) return 0;
	if(l==a && b==r) return x->p;
	LL mid=l+r>>1;
	if(b<=mid) return query(x->l,l,mid,a,b);
	if(a>mid) return query(x->r,mid+1,r,a,b);
	return Max(query(x->l,l,mid,a,mid),query(x->r,mid+1,r,mid+1,b));
}

void insert(Seg *&x,LL l,LL r,LL k){
	if(!x) x=new Seg();
	if(l==r){x->p=point;return;}
	LL mid=l+r>>1;
	if(mid>=k) insert(x->l,l,mid,k);
	else insert(x->r,mid+1,r,k);
	x->p=Max(x->l?x->l->p:0,x->r?x->r->p:0);
}

void dfs(int p){
	if(!p) return;
	dfs(from[p]);
	printf("%d ",p);
}

int main(){
	scanf("%d%I64d",&n,&d);
	root=new Seg();
	
	rep(i,1,n){
		point=i;
		scanf("%I64d",&x);
		mx=query(root,1,top,1,x-d);
		mx=Max(mx,query(root,1,top,x+d,top));
		f[i]=f[mx]+1;
		insert(root,1,top,x);
		if(f[i]>ans){
			ans=f[i];
			t=i;
		}
		from[i]=mx;
	}
	printf("%d\n",ans);
	dfs(t);
}