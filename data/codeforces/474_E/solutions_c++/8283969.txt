#include <cstdio>

#include <algorithm>
#include <vector>

using namespace std;

typedef long long lli;

const int MAXN = 100010;

int n, d, ll[MAXN], lr[MAXN], v[MAXN];
lli h[MAXN], f[MAXN];

void update(int *, int, int);
int query(int *, int);
int find(lli);

int main() {
	scanf("%d%d", &n, &d);
	
	for (int i = 0; i < n; i++) {
		scanf("%I64d", h + i);
		f[i] = h[i];
	}
	
	sort(f, f + n);
	
	int mx = 0;
	for (int i = 0; i < n; i++) {
		lli ch = h[i];
		
		int c = max(query(ll, find(ch - d + 1) - 1), query(lr, n - find(ch + d) - 1)) + 1;
		
		v[i] = c;
		mx = max(mx, c);
		
		update(ll, find(ch), c);
		update(lr, n - find(ch) - 1, c);
	}
	
	printf("%d\n", mx);
	
	int xf = mx, last = -1;
	vector <int> res;
	
	for (int i = n - 1; i >= 0 && xf; i--)
		if (v[i] == xf && (last == -1 || abs(h[last] - h[i]) >= d)) {
			res.push_back(i);
		
			xf--;
			last = i;
		}
	
	for (int i = res.size() - 1; i >= 0; i--)
		printf("%d ", res[i] + 1);
	
	printf("\n");

	return 0;
}

void update(int *l, int x, int v) {
	for (int i = x + 1; i < MAXN; i += i & -i)
		l[i] = max(l[i], v);
}

int query(int *l, int x) {
	int mx = 0;
	for (int i = x + 1; i; i -= i & -i)
		mx = max(mx, l[i]);
	
	return mx;
}

int find(lli x) {
	return lower_bound(f, f + n, x) - f;
}
