def if_intersect(string1, string2):
	for symbol in string1:
		if symbol in string2:
			return True
	return False			

def intersect(current, adding):
	retstring = ""
	for symbol in current:
		retstring += symbol

	for symbol_id in range(len(adding)):
		if adding[symbol_id] in current:
			break

	position = 0
	while adding[symbol_id] != current[position]:
		position += 1

	if (len(current) - position < len(adding) - symbol_id):
		for idx in range(len(adding) - symbol_id - len(current) + position):
			retstring += adding[idx + symbol_id + len(current) - position]
	if (symbol_id > position):
		conc = ""
		for idx in range(symbol_id - position):
			conc = adding[idx] + conc
		retstring = conc[::-1] + retstring	

	return retstring				
			
number_of_strings = int(raw_input())

strings = []
if_string_used = []
for string_idx in range(number_of_strings):
	strings.append(raw_input())
	if_string_used.append(False)	

answer = strings[0]
if_string_used[0] = True
number_of_strings -= 1

patterns = []

while number_of_strings > 0:
	changed = False
	for string_id in range(len(strings)):
		if ((not if_string_used[string_id]) and if_intersect(answer, strings[string_id])):
			answer = intersect(answer, strings[string_id])
			number_of_strings -= 1
			if_string_used[string_id] = True
			changed = True

	if not changed:
		patterns.append(answer)
		answer = ""
		for string_id in range(len(strings)):
			if not if_string_used[string_id]:
				answer += strings[string_id]
				if_string_used[string_id] = True
				number_of_strings -= 1
				break
patterns.append(answer)					

final_answer = ""
for pattern in patterns:
	final_answer += pattern

print final_answer			