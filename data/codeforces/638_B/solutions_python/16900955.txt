# -*- coding: utf-8 -*-

def n2(c):
	return ord(c) - 97
def c2(n):
	return chr(n+97)
	
class Genome(object):
	def __init__(self):
		self.L = range(26)
		self.nxt = [-1]*26
		self.apr = [False]*26
		self.ans = ''
	def solve(self, s):
		n = len(s)
		for i in range(1, n):
			a = n2(s[i])
			if a in self.L:
				self.L.pop(self.L.index(a))
		for i in range(n-1):
			a = n2(s[i])
			b = n2(s[i+1])
			self.nxt[a] = b
		for i in range(n):
			a = n2(s[i])
			self.apr[a] = True
	def cal(self):
		L = []
		for x in self.L:
			if self.apr[x] == True:
				L.append(x)
		for x in L:
			y = x
			while y != -1:
				self.ans += c2(y)
				y = self.nxt[y]
		return self.ans
		
if __name__ == '__main__':
	genome = Genome()
	n = input()
	for i in range(n):
		s = raw_input()
		genome.solve(s)
	print genome.cal()
	