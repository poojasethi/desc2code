from itertools import izip

def has_common_char(s1,s2):
	for x in s1:
		if x in s2: return True
	return False

def try_add(strings, s):
	for j in xrange(len(strings)):
		if has_common_char(s,strings[j]):
			if s in strings[j]:
				return True
			if strings[j] in s:
				strings[j] = s
				return True
			if s[0] in strings[j]:
				s1, s2 = strings[j], s
			else:
				s1, s2 = s, strings[j]
			pos = s1.index(s2[0])
			strings[j] = s1[:pos]+s2
			return True
	strings.append(s)
	return False


strings = []
n = input()

for i in xrange(n):
	s = raw_input()
	try_add(strings,s)


def divide_and_merge(coll):
	if len(coll)<=1:
		return [x for x in coll]
	mid = len(coll)/2
	left, rigth = divide_and_merge(coll[:mid]), divide_and_merge(coll[mid:])
	for x in left:
		if try_add(rigth, x):
			tmp = rigth
			boo = True
			while boo or len(tmp)!=len(rigth):
				rigth = tmp
				tmp = []
				boo = False
				for x in rigth:
					try_add(tmp,x)
			rigth = tmp
	#print '========='
	#print coll
	#print rigth
	#print '+++++++++'
	return rigth

string = "".join(divide_and_merge(strings))
index = 0
while index<len(string)-index-1:
	if string[index]==string[len(string)-index-1]:
		string = string[:len(string)-index]
	index += 1
print string