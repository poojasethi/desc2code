def trip(start, dat):
    outx = [[i, dat[i]] for i in range(len(dat))]
    outx.sort(key=lambda value: value[1])
    cur_t, cur_x, i, n, delay = start, 0, 0, len(outx), 0
    outtime = range(n)
    while i < n:
        cur_x = outx[i][1]
        num = 0
        while i < n and cur_x == outx[i][1]:
            cur_t = start + outx[i][1] + delay
            outtime[outx[i][0]] = cur_t
            num += 1
            i += 1
        delay += 1 +  num / 2
    print " ".join(map(str,outtime)) ,
    return start + cur_x * 2 + delay

reader=lambda:map(int,raw_input().split())
n, m = reader()
i, cur_t = m, 0
while i < n:
    j = 0
    dat = []
    while j < m:
        dat_t, dat_x = reader()
        dat.append(dat_x)
        j += 1
    if dat_t < cur_t:
        cur_t = trip(cur_t, dat)
    else:
        cur_t = trip(dat_t, dat)
    i += m
#last trip
i -= m
dat = []
while i < n:
    dat_t, dat_x = reader()
    dat.append(dat_x)
    i += 1
if dat_t < cur_t:
    cur_t = trip(cur_t, dat)
else:
    cur_t = trip(dat_t, dat)