def solve(reader):
    tokens = reader.nextLine().split(" ")
    n = int(tokens[0])
    m = int(tokens[1])
    res = []
    students = []
    for i in range(0, n):
        res.append(-1)
        tokens = reader.nextLine().split(" ")
        students.append(Student(int(tokens[0]), int(tokens[1]), i))
    time = 0
    student = 0
    while student < n:
        pos = 0
        bus = []
        while (student < n and len(bus) < m):
            bus.append(students[student])
            time = max(time, students[student].t)
            student += 1
        bus.sort(key = lambda st : st.x)
        i = 0
        while i < len(bus):
            leaving = []
            leaving.append(bus[i])
            time += bus[i].x - pos
            pos = bus[i].x
            i += 1
            while (i < len(bus) and bus[i].x == pos):
                leaving.append(bus[i])
                i += 1
            for passenger in leaving:
                res[passenger.index] = time
            time += 1 + len(leaving)/2
        time += pos
    print(" ".join(map(str, res)))

class Student:

    t = 0
    x = 0
    index = 0

    def __init__(self, t, x, ind):
        self.t = t
        self.x = x
        self.index = ind

    def __str__(self):
        return "(t="+str(self.t)+", x="+str(self.x)+")"

class io:

    index = 0
    lines = None

    def nextLine(self):
        
        if self.lines == None or self.index >= len(self.lines):
            self.lines = None
            while self.lines == None or len(self.lines) == 0:
                self.lines = raw_input().splitlines()
            self.index = 1
            return self.lines[0]
        self.index += 1
        return self.lines[self.index - 1]

if __name__ == "__main__":
    solve(io())
