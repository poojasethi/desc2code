#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

const double pi = acos(-1.0);
const double eps = 1E-7;

typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
#define sqr(x) ((x)*(x))
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.size())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)
#define ME(a) memset((a), 0, sizeof((a)))
#define MM(a, b) memcpy((a), (b), sizeof((a)))
#define FOR(i,n) for (int (i) = 0; (i) < (n); ++(i))
#define REP(i,a,b) for (int (i) = (a); (i) < (b); ++(i))


int n,m;
int im[200][4];
string si[200][2];

struct resid{
    string na,ho;
    int bo;
    resid(const string& x="",int y=0,const string& z=""):na(x),ho(z),bo(y){}
} re[3][2000];
int fr[3][2000];

bool cmp(const resid& x,const resid& y){
    return x.bo>y.bo;
}
int cntr[3];
map<char,int> mp;


int main(){
    mp['g']=0;mp['s']=1;mp['p']=2;
    mp['w']=0;mp['a']=1;mp['o']=2;

    cin>>n;
    int cap=0;
    FOR(i,n){
        cin>>si[i][0]>>si[i][1];
        FOR(j,4)cin>>im[i][j];
        cap+=im[i][3];
    }
    cin>>m;
    FOR(i,m){
        string p1,p2,p4;int p3;
        cin>>p1>>p2>>p3>>p4;
        re[mp[p2[0]]][cntr[mp[p2[0]]]++] = resid(p1,p3,p4);
    }
    FOR(i,3)sort(&re[i][0],&re[i][0]+cntr[i],cmp);

    if(cap==m){
        FOR(i,3){
            vector<string> br,cr;
            int best=-1;
            string ans;
            FOR(j,n)
                if(mp[si[j][1][0]]==i){
                    int cur=im[j][i];
                    cr.clear();
                    FOR(t,3)FOR(k,cntr[t])
                        if(re[t][k].ho==si[j][0]){
                            if(t==i)cur+=re[t][k].bo;
                            cr.push_back(re[t][k].na);
                        }
                    if(cur>best){
                        best=cur;
                        ans=si[j][0];
                        br=cr;
                    }
                }
            cout<<ans<<' '<<br.size();
            FOR(i,br.size())cout<<' '<<br[i];
            cout<<endl;
        }
    } else{
        vector<string> br[3];
        vector<int> ch[3];
        int ans[3];
        FOR(i,3){
            vector<int> cr;
            int best=-1;
            FOR(j,n)
                if(mp[si[j][1][0]]==i){
                    int cur=im[j][i];
                    cr.clear();
                    FOR(k,min(cntr[i],im[j][3])){
                            cur+=re[i][k].bo;
                            cr.push_back(k);
                        }
                    if(cur>best){
                        best=cur;
                        ans[i]=j;
                        ch[i]=cr;
                    }
                }
        }
        FOR(i,3)FOR(j,ch[i].size()){
            fr[i][ch[i][j]]=1;
            br[i].push_back(re[i][ch[i][j]].na);
        }
        FOR(i,3){
            FOR(u,3) FOR(v,cntr[u]){
                if(br[i].size()==im[ans[i]][3])break;
                if(fr[u][v]==0){
                    fr[u][v]=1;
                    br[i].push_back(re[u][v].na);
                }
            }
            cout<<si[ans[i]][0]<<' '<<br[i].size();
            FOR(j,br[i].size())cout<<' '<<br[i][j];
            cout<<endl;
        }
    }

    return 0;
}
