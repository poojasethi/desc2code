#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <cassert>
using namespace std;
 
#define all(c) (c).begin(), (c).end() 
#define iter(c) __typeof((c).begin())
#define cpresent(c, e) (find(all(c), (e)) != (c).end())
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define tr(c, i) for (iter(c) i = (c).begin(); i != (c).end(); ++i)
#define pb(e) push_back(e)
#define mp(a, b) make_pair(a, b)


int main() {
  int N;
  while (cin >> N) {
    map<string, int> item_type;
    map<string, int> item_val[3];
    map<string, int> item_size;

    map<string, int> item_fill;
    map<string, int> item_initial_val;
    map<string, vector<string> > item_initial_resident;
    
    rep (i, N) {
      string name, type;
      int val[3], size;
      cin >> name >> type >> val[0] >> val[1] >> val[2] >> size;

      int type_i = type == "weapon" ? 0 : type == "armor" ? 1 : 2;
      item_type[name] = type_i;
      item_size[name] = size;
      item_val[type_i][name] = val[type_i];
      
      item_initial_val[name] = val[type_i];
    }

    int M;
    cin >> M;
    vector<pair<int, string> > resident[3];
    rep (i, M) {
      string name, type, home;
      int bonus;
      cin >> name >> type >> bonus >> home;
      ++item_fill[home];
      int type_i = type == "gladiator" ? 0 : type == "sentry" ? 1 : 2;
      resident[type_i].pb(mp(bonus, name));

      if (type_i == item_type[home]) item_initial_val[home] += bonus;
      item_initial_resident[home].pb(name);
    }

    bool filled = true;
    tr (item_size, ite) {
      string name = ite->first;
      if (item_fill[name] < item_size[name]) filled = false;
    }

    if (filled) {
      rep (i, 3) {
        string best_name = "";
        tr (item_val[i], ite) {
          string name = ite->first;
          if (best_name == "" || item_initial_val[best_name] < item_initial_val[name]) {
            best_name = name;
          }
        }
        cout << best_name << " " << item_initial_resident[best_name].size();
        tr (item_initial_resident[best_name], ite) cout << " " << *ite;
        cout << endl;
      }
    }
    else {
      vector<bool> usd[3];
      string sel_item[3];
      vector<string> sel_res[3];

      rep (i, 3) {
        sort(resident[i].rbegin(), resident[i].rend());
        usd[i].resize(resident[i].size());
        
        string best_name = "";
        int best_val = -1;
        tr (item_val[i], ite) {
          string name = ite->first;
          int val = item_val[i][name];

          int k = min(item_size[name], (int)resident[i].size());
          rep (j, k) val += resident[i][j].first;

          if (val > best_val) {
            best_name = name;
            best_val = val;
          }
        }

        sel_item[i] = best_name;
        int k = min(item_size[best_name], (int)resident[i].size());
        rep (j, k) {
          sel_res[i].pb(resident[i][j].second);
          usd[i][j] = true;
        }
      }
      
      rep (i, 3) rep (j, resident[i].size()) if (usd[i][j] == false) {
        rep (k, 3) if ((int)sel_res[k].size() < item_size[sel_item[k]]) {
          sel_res[k].pb(resident[i][j].second);
          break;
        }
      }

      rep (i, 3) {
        cout << sel_item[i] << " " << sel_res[i].size();
        rep (j, sel_res[i].size()) cout << " " << sel_res[i][j];
        cout << endl;
      }
    }
  }
}
