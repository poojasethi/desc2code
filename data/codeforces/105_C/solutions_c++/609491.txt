#include <map>
#include <set>
#include <cmath>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <bitset>
#include <sys/time.h>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
using namespace std;
#define li		long long
#define rep(i,to)	for(li i=0;i<((li)to);i++)
#define pb		push_back
#define sz(v)		((li)(v).size())

int main(){
	li n,m,sum=0;
	cin>>n;
	vector<string> RES[3][100];
	vector<pair<string,pair<li,li> > > eq[3];
	vector<pair<li,string> > res[3];
	map<string,int> mp;
	mp["weapon"]=0; mp["armor"]=1; mp["orb"]=2;
	mp["gladiator"]=0; mp["sentry"]=1; mp["physician"]=2;
	rep(i,n){
		string name,type;
		li a[3],num;
		cin>>name>>type>>a[0]>>a[1]>>a[2]>>num;
		sum+=num;
		eq[mp[type]].pb(make_pair(name,make_pair(a[mp[type]],num)));
	}
	cin>>m;
	if(sum==m){
		rep(i,m){
			string name,type,owner;
			li power;
			cin>>name>>type>>power>>owner;
			rep(j,3)rep(k,sz(eq[j]))if(eq[j][k].first==owner){
				RES[j][k].pb(name);
				if(mp[type]==j) eq[j][k].second.first+=power;
			}
		}
		rep(i,3){
			li best=0;
			rep(j,sz(eq[i]))if(eq[i][best].second.first<eq[i][j].second.first) best=j;
			cout<<eq[i][best].first<<" "<<sz(RES[i][best])<<" ";
			rep(j,sz(RES[i][best])) cout<<RES[i][best][j]<<" ";
			cout<<endl;
		}
	}else{
		vector<string> names;
		bool used[1005];
		rep(i,1005) used[i]=false;
		rep(i,m){
			string name,type,owner;
			li power;
			cin>>name>>type>>power>>owner;
			res[mp[type]].pb(make_pair(power,name));
			names.pb(name);
		}
		
		rep(i,3) sort(res[i].begin(),res[i].end());
		rep(i,3) reverse(res[i].begin(),res[i].end());
		rep(i,3){
			li best=0;
			rep(j,sz(eq[i])){
				li sum0=eq[i][best].second.first;
				rep(k,min(sz(res[i]),eq[i][best].second.second)) sum0+=res[i][k].first;
				li sum1=eq[i][j].second.first;
				rep(k,min(sz(res[i]),eq[i][j].second.second)) sum1+=res[i][k].first;
				if(sum0<sum1) best=j;
			}
//			cout<<eq[i][best].first<<" "<<min(sz(res[i]),eq[i][best].second.second)<<" ";
//			rep(j,min(sz(res[i]),eq[i][best].second.second)) cout<<res[i][j].second<<" ";
//			cout<<endl;
			rep(j,min(sz(res[i]),eq[i][best].second.second)){
				rep(k,m)if(res[i][j].second==names[k]) used[k]=true;
			}
		}
		rep(i,3){
			li best=0;
			rep(j,sz(eq[i])){
				li sum0=eq[i][best].second.first;
				rep(k,min(sz(res[i]),eq[i][best].second.second)) sum0+=res[i][k].first;
				li sum1=eq[i][j].second.first;
				rep(k,min(sz(res[i]),eq[i][j].second.second)) sum1+=res[i][k].first;
				if(sum0<sum1) best=j;
			}
			vector<string> ans;
			cout<<eq[i][best].first<<" ";
			rep(j,min(sz(res[i]),eq[i][best].second.second)) ans.pb(res[i][j].second);
			rep(j,eq[i][best].second.second-sz(res[i])){
				rep(k,m)if(!used[k]){
					ans.pb(names[k]);
					used[k]=true;
					break;
				}
			}
			cout<<sz(ans)<<" ";
			rep(j,sz(ans)) cout<<ans[j]<<" ";
			cout<<endl;
		}
	}
}
