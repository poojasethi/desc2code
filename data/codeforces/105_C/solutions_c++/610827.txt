// #includes {{{
#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cassert>
#include <cstring>
#include <cmath>
#include <complex>
#include <functional>
using namespace std;
// }}}
// pre-written code {{{
#define rep(i,n) for(int i=0;i<(int)(n);++i)
#define rrep(i,a,b) for(int i=(int)(a);i<(int)(b);++i)
#define foreach(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define all(c) (c).begin(), (c).end()
#define MP make_pair

typedef long long Int;
typedef long long ll;
typedef long double ld;

typedef pair<int,int> pii;
// }}}

const int N=110,K=1010;
int n,k;
string item[N],resi[K],resi_home[K];//name of item and resident
int type[N],para[N][3],size[N];
int resi_type[K],resi_bonus[K];
bool used[K];

int myfunc(const int &a, const pii &b){return a+b.first;}
int ans[3];
vector<int> ansv[3];

void iter(int ctrl){
	vector<pii> v;
	rep(i,k){
		if((not used[i]) and resi_type[i]==ctrl){
			v.push_back(MP(resi_bonus[i],i));
		}
	}
	sort(v.begin(),v.end(),greater<pair<int,int> >());
	int maxi=-1,maxi_id=-1;
	rep(i,n){
		if(type[i]==ctrl){
			int sum=accumulate(v.begin(),v.begin()+min(size[i],(int)v.size()),0,myfunc)+para[i][ctrl];
			if(maxi<sum){
				maxi=sum;maxi_id=i;
			}
		}
	}
	int sz=min(size[maxi_id],(int)v.size());
	ans[ctrl]=maxi_id;
	for(int i=0;i<sz;i++){
		used[v[i].second]=true;
		ansv[ctrl].push_back(v[i].second);
	}
}

void iter2(int ctrl){
	int maxi=-1, maxi_id=-1;
	rep(i,n){
		if(type[i]==ctrl){
			int s=para[i][ctrl];
			rep(j,k){
				if(item[i]==resi_home[j] and resi_type[j]==ctrl){
					s+=resi_bonus[j];
				}
			}
			if(maxi<s){
				maxi=s;maxi_id=i;
			}
		}
	}
	cout<<item[maxi_id]<<" "<<size[maxi_id]<<" ";
	rep(j,k){
		if(resi_home[j]==item[maxi_id]){
			cout<<resi[j]<<" ";
		}
	}
	cout<<endl;
}


int main() {
	int size_num=0;
	cin>>n;
	rep(i,n){
		string types;
		cin>>item[i]>>types;
		if(types=="weapon"){
			type[i]=0;
		}else if(types=="armor"){
			type[i]=1;
		}else if(types=="orb"){
			type[i]=2;
		}else{
			assert(false);
		}
		cin>>para[i][0]>>para[i][1]>>para[i][2]>>size[i];
		size_num+=size[i];
	}
	cin>>k;
	rep(i,k){
		string types;
		cin>>resi[i]>>types;
		if(types=="gladiator"){
			resi_type[i]=0;
		}else if(types=="sentry"){
			resi_type[i]=1;
		}else if(types=="physician"){
			resi_type[i]=2;
		}else{
			assert(false);
		}
		cin>>resi_bonus[i]>>resi_home[i];
	}
	if(size_num>k){
		memset(used,false,sizeof(used));
		vector<pii> v;
		iter(0);iter(1);iter(2);
		rep(i,3){
			int id=ans[i];
			while((ansv[i].size()<size[id]) and ansv[0].size()+ansv[1].size()+ansv[2].size()<k){
				rep(j,k){
					if(not used[j]){
						ansv[i].push_back(j);
						used[j]=true;
						break;
					}
				}
			}
		}
		rep(i,3){
			int id=ans[i];
			cout<<item[id]<<" "<<ansv[i].size()<<" ";
			rep(j,ansv[i].size()){
				cout<<resi[ansv[i][j]]<<" ";
			}
			cout<<endl;
		}
	}else{
		iter2(0);iter2(1);iter2(2);
	}
	return 0;
}
