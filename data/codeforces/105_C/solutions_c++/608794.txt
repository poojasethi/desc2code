#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <iomanip>
#include <bitset>
#include <list>
#include <utility>
#include <ctime>
using namespace std;

#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define foreach(i, n) for (__typeof(n.begin()) i = n.begin(); i != n.end(); ++i)
#define sqr(x) ((x)*(x))
#define clr(a, b) memset(a, b, sizeof(a))
#define PB push_back
#define MP make_pair
#define SZ(a) ((int)a.size())
#define all(a) (a).begin(),(a).end()
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef vector<int> vi;
const double eps = 1e-9;
const double pi = acos(-1.0);

#ifdef CHEN_PC
    #define R "%lld"
#else
    #define R "%I64d"
#endif

const int N = 110;
const int M = 1010;
int n, m, ans[3];
bool vis[M];

struct iteam {
    string name;
    int type, val[3], size;
    vi have;
    void get() {
        char buf[100];
        scanf("%s", buf);
        name = buf;

        scanf("%s", buf);
        if (buf[0] == 'w') type = 0;
        else if (buf[0] == 'a') type = 1;
        else type = 2;

        forn (i, 3) scanf("%d", val + i);
        scanf("%d", &size);
        have.clear();
    }
    void add(int v) {
        val[type] += v;
    }
}t[N];

struct resident {
    string name, home;
    int type, bonus;
    void get() {
        char buf[100];
        scanf("%s", buf);
        name = buf;

        scanf("%s", buf);
        if (buf[0] == 'g') type = 0;
        else if (buf[0] == 's') type = 1;
        else type = 2;

        scanf("%d%s", &bonus, buf);
        home = buf;
    }
    bool operator < (const resident& u) const {
        return bonus < u.bonus;
    }
}p[M];

void print() {
    forn (i, 3) {
        iteam& z = t[ans[i]];
        printf("%s %d", z.name.c_str(), SZ(z.have));
        forn (j, SZ(z.have)) {
            printf(" %s", p[z.have[j]].name.c_str());
        }
        puts("");
    }
}

void solve() {
    int cnt = 0;
    forn (i, n) {
        t[i].get();
        cnt += t[i].size;
    }
    scanf("%d", &m);
    forn (i, m) p[i].get();
    clr(ans, -1);
    if (cnt == m) {
        forn (i, n) {
            forn (j, m) if (t[i].name == p[j].home) {
                t[i].have.push_back(j);
                if (t[i].type == p[j].type)
                    t[i].add(p[j].bonus);
            }
            int type = t[i].type;
            if (ans[type] == -1) ans[type] = i;
            else {
                int z = ans[type];
                if (t[z].val[type] < t[i].val[type])
                    ans[type] = i;
            }
        }
        print();
        return;
    }
    forn (i, n) t[i].have.clear();
    sort(p, p + m);
    reverse(p, p + m);
    forn (i, n) {
        forn (j, m) if (t[i].type == p[j].type) {
            if (t[i].size == 0) continue;
            t[i].add(p[j].bonus);
            t[i].size--;
            t[i].have.push_back(j);
        }
        int type = t[i].type;
        if (ans[type] == -1) ans[type] = i;
        else {
            int z = ans[type];
            if (t[z].val[type] < t[i].val[type])
                ans[type] = i;
        }
    }
    clr(vis, 0);
    forn (i, 3) {
        int z = ans[i];
        forn (j, SZ(t[z].have))
            vis[t[z].have[j]] = 1;
    }
    forn (i, 3) {
        forn (j, m) if (!vis[j]) {
            int z = ans[i];
            if (t[z].size == 0) break;
            t[z].have.push_back(j);
            t[z].size--;
            vis[j] = 1;
        }
    }
    print();

}

int main() {
#ifdef CHEN_PC
    freopen("in", "r", stdin);
#endif
    while (~scanf("%d", &n)) {
        solve();
//      puts("");
    }
    return 0;
}
