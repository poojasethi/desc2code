#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <stack>

using namespace std;

#define REP(i,n) for((i)=0;(i)<(int)(n);(i)++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

struct box {string name; int param; int cap;};
struct item {string name; int param; string home;};
deque <box> B[3];
deque <item> I[3];
int id[3];
int best[3];
int cap[3];
vector <string> item_name[3];

pair <string, vector <string> > func2(int type){
    int id = -1;
    int best = -1;
    int i,j;
    
    REP(i,B[type].size()){
        int score = B[type][i].param;
        REP(j,I[type].size()) if(I[type][j].home == B[type][i].name) score += I[type][j].param;
        if(score > best){
            best = score;
            id = i;
        }
    }
    
    vector <string> ans;
    REP(i,3) REP(j,I[i].size()) if(I[i][j].home == B[type][id].name) ans.push_back(I[i][j].name);
    return make_pair(B[type][id].name, ans);
}

vector <pair <string, vector <string> > > func(void){
    int i,j,k;
    vector <pair <string, vector <string> > > ans;
    
    int sum = 0;
    REP(i,3) REP(j,B[i].size()) sum += B[i][j].cap;
    REP(i,3) sum -= I[i].size();
    
    if(sum == 0){
        REP(i,3) ans.push_back(func2(i));
        return ans;
    }
    
    REP(i,3) id[i] = best[i] = -1;
    REP(i,3) REP(j,B[i].size()){
        int score = B[i][j].param, cap = B[i][j].cap;
        REP(k,cap) if(k < I[i].size()) score += I[i][k].param;
        if(score > best[i]){
            best[i] = score;
            id[i] = j;
        }
    }
    
    REP(i,3) cap[i] = B[i][id[i]].cap;
    
    REP(i,3){
        while(!I[i].empty() && cap[i] > 0){
            cap[i]--;
            item_name[i].push_back(I[i][0].name);
            I[i].pop_front();
        }
    }
    
    REP(i,3) REP(j,3){
        while(!I[j].empty() && cap[i] > 0){
            cap[i]--;
            item_name[i].push_back(I[j][0].name);
            I[j].pop_front();
        }
    }
    
    REP(i,3) ans.push_back(make_pair(B[i][id[i]].name, item_name[i]));
    return ans;
}

int main(void){
    int N,M,i,j,k;
    
    cin >> N;
    REP(i,N){
        box tmp;
        string type;
        int a[3];
        cin >> tmp.name >> type >> a[0] >> a[1] >> a[2] >> tmp.cap;
        if(type == "weapon") {tmp.param = a[0]; B[0].push_back(tmp);}
        if(type == "armor") {tmp.param = a[1]; B[1].push_back(tmp);}
        if(type == "orb") {tmp.param = a[2]; B[2].push_back(tmp);}
    }
    
    cin >> M;
    REP(i,M){
        item tmp;
        string type;
        cin >> tmp.name >> type >> tmp.param >> tmp.home;
        if(type == "gladiator") I[0].push_back(tmp);
        if(type == "sentry") I[1].push_back(tmp);
        if(type == "physician") I[2].push_back(tmp);
    }
    
    REP(i,3){
        int sz = I[i].size();
        REP(j,sz) REP(k,sz-1) if(I[i][k].param < I[i][k+1].param) swap(I[i][k], I[i][k+1]);
    }
    
    vector <pair <string, vector <string> > > ans = func();
    REP(i,3){
        cout << ans[i].first;
        vector <string> v = ans[i].second;
        cout << ' ' << v.size();
        REP(j,v.size()) cout << ' ' << v[j];
        cout << endl;
    }
    
    return 0;
}
