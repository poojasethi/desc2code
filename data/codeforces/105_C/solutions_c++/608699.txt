#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

vector<pair<pair<int, int>, string> > items[3];
vector<pair<int, pair<string, string> > > peoples[3];
map<string, set<string> > mp;

void run()
{
	int n, m;
	cin >> n;
	int holesum = 0;
	for (int i = 0; i < n; ++i) {
		string name, tp;
		int a, b, c, d;
		cin >> name >> tp >> a >> b >> c >> d;
		if (tp == "weapon") {
			items[0].push_back(make_pair(make_pair(a, d), name));
		}
		else if (tp == "armor") {
			items[1].push_back(make_pair(make_pair(b, d), name));
		}
		else {
			items[2].push_back(make_pair(make_pair(c, d), name));
		}
		holesum += d;
	}
	cin >> m;
	for (int i = 0; i < m; ++i) {
		string name, tp, home;
		int a;
		cin >> name >> tp >> a >> home;
		if (tp == "gladiator") {
			peoples[0].push_back(make_pair(a, make_pair(name, home)));
		}
		else if (tp == "sentry") {
			peoples[1].push_back(make_pair(a, make_pair(name, home)));
		}
		else {
			peoples[2].push_back(make_pair(a, make_pair(name, home)));
		}
		mp[home].insert(name);
	}
	if (holesum == m) {
		for (int i = 0; i < 3; ++i) {
			for (int j = 0; j < (int)peoples[i].size(); ++j) {
				string name = peoples[i][j].second.second;
				for (int k = 0; k < (int)items[i].size(); ++k) {
					if (items[i][k].second == name) {
						items[i][k].first.first += peoples[i][j].first;
						break;
					}
				}
			}
		}
		for (int i = 0; i < 3; ++i) {
			sort(items[i].begin(), items[i].end(), greater<pair<pair<int, int>, string> >());
			set<string> &s = mp[items[i][0].second];
			cout << items[i][0].second << " " << s.size();
			
			for (set<string>::iterator si = s.begin(); si != s.end(); ++si) {
				cout << " " << *si;
			}
			cout << endl;
		}
	}
	else {
		int needitems[3];
		int choose[3];
		int emptyholes = 0;
		int leftpeoples = 0;
		set<string> s[3];
		for (int i = 0; i < 3; ++i) {
			sort(peoples[i].begin(), peoples[i].end(), greater<pair<int, pair<string, string> > >());
			int bestval = -1, bestind = -1;
			for (int j = 0; j < (int)items[i].size(); ++j) {
				int sum = items[i][j].first.first;
				int holes = items[i][j].first.second;
				for (int k = 0; k < holes && k < (int)peoples[i].size(); ++k) {
					sum += peoples[i][k].first;
				}
				if (sum > bestval) {
					bestval = sum;
					bestind = j;
				}
			}
			needitems[i] = min(items[i][bestind].first.second, (int)peoples[i].size());
			leftpeoples += peoples[i].size() - needitems[i];
			int holes = items[i][bestind].first.second;
			for (int k = 0; k < holes && k < (int)peoples[i].size(); ++k) {
				s[i].insert(peoples[i][k].second.first);
			}
			choose[i] = bestind;
			for (int j = 0; j < (int)items[i].size(); ++j) {
				if (j != bestind) {
					emptyholes += items[i][j].first.second;
				}
			}
		}
		if (leftpeoples > emptyholes) {
			int needgao = leftpeoples - emptyholes;
			int ind = 0;
			for (int i = 0; i < 3 && needgao; ++i) {
				for (int j = needitems[i]; j < (int)peoples[i].size() && needgao; ++j) {
					while (s[ind].size() == items[ind][choose[ind]].first.second) {
						++ind;
					}
					s[ind].insert(peoples[i][j].second.first);
					--needgao;
				}
			}
		}
		for (int i = 0; i < 3; ++i) {
			cout << items[i][choose[i]].second << " " << s[i].size();
			for (set<string>::iterator si = s[i].begin(); si != s[i].end(); ++si) {
				cout << " " << *si;
			}
			cout << endl;
		}
	}
}

int main()
{
	run();
	return 0;
}