#include <iostream>
#include <stdio.h>
#include <string.h>
#include<map>
#include<cmath>
#include<algorithm>
#include <string>
#include<iostream>
#include<queue>
using namespace std;
struct B{int k;string s,s2;}ee;
int pt1(B a,B b)
{
    return a.k>b.k;
}
vector<B> f[3];
struct A{int s,n;vector<string> da;};
int pt2(A a,A b)
{
    return a.s>b.s;
}
map<string,A>mp[3];
string nam[3]={"weapon","armor","orb"};
map<string,int>id;
struct C{string nm;A a;}ans[3];
map<string,int>fk;
int main()
{

    id["gladiator"]=0;
    id["sentry"]=1;
    id["physician"]=2;
    int n;
    while(cin>>n)
    {
        for(int i=0;i<3;i++)
            mp[i].clear();
        //  cout<<n<<endl;
        int ind=0;
        for(int i=0;i<n;i++)
        {
            string nm,cs;
            int a[3];
            int nn;
            cin>>nm>>cs>>a[0]>>a[1]>>a[2]>>nn;
            ind+=nn;
            //cout<<nn<<"  "<<ind<<endl;
            A e;
            for(int i=0;i<3;i++)
            {
                if(cs==nam[i])
                {
                    e.n=nn;
                    e.s=a[i];
                    mp[i][nm]=e;
                }
            }
        }       //cout<<ind<<endl;
        //cout<<mp[0].size()<<endl;
        int m;
        cin>>m;
        map<string,A>::iterator it;

        if(ind==m)
        {
            for(int i=0;i<m;i++)
            {
                int k;
                string a,b,c;
                cin>>a>>b>>k>>c;
                for(int z=0;z<3;z++)
                {
                    it=mp[z].find(c);
                    if(it==mp[z].end())continue;
                    else 
                    {
                        it->second.da.push_back(a);
                        if(id[b]==z)
                            it->second.s+=k;
                    }
                }
            }
        }
        else
        {
            while(m--)
            {
                int k;
                string nm1,nm2,nm3;
                cin>>nm1>>nm2>>k>>nm3;
                ee.s=nm1;
                ee.k=k;
                f[id[nm2]].push_back(ee);
                fk[nm1]=1;
            }

            for(int i=0;i<3;i++)
                sort(f[i].begin(),f[i].end(),pt1);
            for(int i=0;i<3;i++)
            {
                string danm;
                for(it=mp[i].begin();it!=mp[i].end();it++)
                    for(int q=0;q<min(it->second.n,(int)f[i].size());q++)
                        it->second.s+=f[i][q].k,it->second.da.push_back(f[i][q].s);

            }
        }   
        for(int i=0;i<3;i++)
        {
            
                int da=-1e9;
                for(it=mp[i].begin();it!=mp[i].end();it++)
                {
                    if(it->second.s>da)
                    {
                        da=it->second.s;
                        ans[i].nm=it->first;
                        ans[i].a=it->second;
                    }
                }
        }
        for(int i=0;i<3;i++)
        {
            for(int q=0;q<ans[i].a.da.size();q++)
                fk.erase(ans[i].a.da[q]);
        }
        for(int i=0;i<3;i++)
        {
            while(fk.size()&&ans[i].a.da.size()!=ans[i].a.n)
                ans[i].a.da.push_back(fk.begin()->first),fk.erase(fk.begin()->first);
            cout<<ans[i].nm<<' '<<ans[i].a.da.size();
            for(int q=0;q<ans[i].a.da.size();q++)
                cout<<' '<<ans[i].a.da[q];
            cout<<endl;
        }
    }

}