#!/usr/bin/env python
# -*- coding: utf-8 -*-
from sys import stdout
from collections import defaultdict

n = int(raw_input())
things = {}
for _ in xrange(n):
    name, cls, atk, df, res, size = raw_input().split()
    things[name] = [cls] + map(int, [atk, df, res, size])
tk = sum([x[4] for x in things.values()])
k = int(raw_input())
resids = {}
home = defaultdict(list)
for _ in xrange(k):
    name, tp, bonus, lhome = raw_input().split()
    home[lhome].append(name)
    resids[name] = [tp, int(bonus)]
#print answers
if tk <= k:
    for thing, names in home.items():
        for name in names:
            if resids[name][0] == 'gladiator':
                things[thing][1] += resids[name][1]
            elif resids[name][0] == 'sentry':
                things[thing][2] += resids[name][1]
            elif resids[name][0] == 'physician':
                things[thing][3] += resids[name][1]
    lm = max([x for x in things.items() if x[1][0] == 'weapon'], key = lambda x: x[1][1])[0]
    print lm, len(home[lm]), ' '.join(home[lm])
    lm = max([x for x in things.items() if x[1][0] == 'armor'], key = lambda x: x[1][2])[0]
    print lm, len(home[lm]), ' '.join(home[lm])
    lm = max([x for x in things.items() if x[1][0] == 'orb'], key = lambda x: x[1][3])[0]
    print lm, len(home[lm]), ' '.join(home[lm])
else:
    ans = []
    
    lresids = sorted([x for x in resids.items() if x[1][0] == 'gladiator'], key = lambda x: x[1][1], reverse = True)
    lthings = []
    for name, args in [x for x in things.items() if x[1][0] == 'weapon']:
        lthings.append((name, args[1] + sum([x[1] for _, x in lresids[:args[4]]])))
    lm = max(lthings, key = lambda x: x[1])[0]
    ans.append([lm, [x for x, _ in lresids[:things[lm][4]]]])
    
    lresids = sorted([x for x in resids.items() if x[1][0] == 'sentry'], key = lambda x: x[1][1], reverse = True)
    lthings = []
    for name, args in [x for x in things.items() if x[1][0] == 'armor']:
        lthings.append((name, args[2] + sum([x[1] for _, x in lresids[:args[4]]])))
    lm = max(lthings, key = lambda x: x[1])[0]
    ans.append([lm, [x for x, _ in lresids[:things[lm][4]]]])
    
    lresids = sorted([x for x in resids.items() if x[1][0] == 'physician'], key = lambda x: x[1][1], reverse = True)
    lthings = []
    for name, args in [x for x in things.items() if x[1][0] == 'orb']:
        lthings.append((name, args[3] + sum([x[1] for _, x in lresids[:args[4]]])))
    lm = max(lthings, key = lambda x: x[1])[0]
#    print lm, min(len(lresids), things[lm][4]), ' '.join([x for x, _ in lresids[:things[lm][4]]])
    ans.append([lm, [x for x, _ in lresids[:things[lm][4]]]])
    
    for thing, names in ans:
        tk -= things[thing][4]
        for name in names:
            del resids[name]
    
    if tk < len(resids):
        for i in xrange(len(ans)):
            while len(ans[i][1]) < things[ans[i][0]][4] and len(resids) > 0:
                name = resids.keys()[0]
                del resids[name]
                ans[i][1].append(name)
    
    for thing, names in ans:
        print thing, len(names), ' '.join(names)
