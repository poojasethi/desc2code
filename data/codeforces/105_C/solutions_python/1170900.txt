d = {}
class Item:
    def __init__(self, name, tp, a, d, r, sz, no):
        self.name = name
        self.tp = tp
        self.s = [0]*3
        self.s[0] = a
        self.s[1] = d
        self.s[2] = r
        self.sz = sz
        self.god = self.s[self.tp]
        self.no = no
    def calc(self,s):
        for i in xrange(min(self.sz,len(s))):
            self.god += s[i].bound

class Resident:
    def __init__(self, name, tp, bound, home, no):
        self.name = name
        self.tp = tp
        self.bound = bound
        self.home = home
        self.no = no

def getItem(no):
    s = raw_input().split()
    tp=0
    if s[1]=="weapon": tp=0
    elif s[1]=="armor": tp=1
    else: tp=2
    d[s[0]] = no
    return Item(s[0], tp, int(s[2]), int(s[3]), int(s[4]), int(s[5]), no)

def getRes(no):
    s = raw_input().split()
    tp=0
    if s[1]=="gladiator": tp=0
    elif s[1]=="sentry": tp=1
    else: tp=2
    return Resident(s[0], tp, int(s[2]), d[s[3]],no)

def pt(i,r):
    print i.name,len(r),
    for rt in r:
        print rt.name,
    print

n = input()
item = [getItem(i) for i in xrange(n)]
m = input()
res = [getRes(i) for i in xrange(m)]
num = 0

for i in item:
    num += i.sz

if num==m:
    for cnt in xrange(3):
        _item = filter(lambda s: s.tp==cnt,item)
        _res = filter(lambda s: s.tp==cnt,res)
        _res.sort(key=lambda s: s.bound, reverse=True)
        for i in _item:
            for r in _res:
                if i.no == r.home:
                    i.god += r.bound
        ans = max(_item, key=lambda s: s.god)
        pt(ans, filter(lambda s:s.home==ans.no, res))
        
else:
    myans = []
    vis = [False] * m
    for cnt in xrange(3):
        _item = filter(lambda s: s.tp==cnt,item)
        _res = filter(lambda s: s.tp==cnt,res)
        _res.sort(key=lambda s: s.bound, reverse=True)
        for i in _item:
            i.calc(_res)
        ans = max(_item, key=lambda s: s.god)
        myans.append((ans,_res[:min(len(_res),ans.sz)]))
    for i in myans:
        for j in i[1]:
            vis[j.no]=True
    for i in myans:
        for j in xrange(m):
            if not vis[j] and len(i[1]) < i[0].sz:
                i[1].append(res[j])
                vis[j]=True
    for ch in myans:
        pt(ch[0],ch[1])
