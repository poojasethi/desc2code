//By momo
#include <cstdio>
#include <vector>
#include <algorithm>
#define N 100010
#define PB push_back
#define FOR(it,c) for(__typeof((c).begin())it=(c).begin();it!=(c).end();it++)
using namespace std;

int n, dat[N*4], cov[N*4], ans[N];
void add(int l, int r, int a, int b, int id, int v){
	if(r < a || b < l) return;
	if(a <= l && r <= b){
		cov[id] += v;
		if(cov[id]) dat[id] = r-l+1;
		else dat[id] = (l==r)?0:(dat[id*2]+dat[id*2+1]);
		return;
	}
	int mid = (l + r) / 2;
	/*
	if(cov[id]){
		cov[id*2] += cov[id], cov[id*2+1] += cov[id]; cov[id] = 0;
		dat[id*2] = mid-l+1, dat[id*2+1] = r-mid;
	}
	*/
	add(l, mid, a, b, id*2, v);
	add(mid+1, r, a, b, id*2+1, v);
	if(!cov[id]) dat[id] = (l==r)?0:dat[id*2]+dat[id*2+1];
}

vector<int> G[N], H[N];
int cnt = 0, L[N], R[N];
void dfs(int p, int f){
	L[p] = cnt++;
	FOR(it, G[p]) if(*it != f) dfs(*it, p);
	R[p] = cnt-1;
}
void dfs2(int p, int f){
	FOR(it, H[p]) add(1, n, L[*it], R[*it], 1, 1);
	ans[p] = max(0, dat[1]-1);
	FOR(it, G[p]) if(*it != f) dfs2(*it, p);
	FOR(it, H[p]) add(1, n, L[*it], R[*it], 1, -1);
}

int main (){
	int m; scanf("%d%d", &n, &m);
	for(int i = 0; i < n-1; i++){
		int u, v; scanf("%d%d", &u, &v);
		G[u].PB(v); G[v].PB(u);
	}
	for(int i = 0; i < m; i++){
		int u, v; scanf("%d%d", &u, &v);
		H[u].PB(u); H[u].PB(v); H[v].PB(v); H[v].PB(u);
	}
	cnt = 1; dfs(1, 0); dfs2(1, 0);
	for(int i = 1; i <= n; i++) printf("%d%c", ans[i], i == n?'\n':' ');
}
