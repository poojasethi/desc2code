#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>
#include <vector>

#define root 1, 0, idx - 1
#define left idx << 1, l, mid
#define right idx << 1 | 1, mid + 1, r

using namespace std;

const int kMaxV = 1 << 17;

int L[kMaxV], R[kMaxV], order[kMaxV << 1], idx;
int ans[kMaxV], st[kMaxV << 3], has[kMaxV << 3];
bool open[kMaxV];

vector<int> t[kMaxV], s[kMaxV];

void dfs(int u, int p) {
  order[L[u] = idx++] = u;
  for (int i = 0; i < t[u].size(); ++i) {
    const int v = t[u][i];
    if (v != p)
      dfs(v, u);
  }
  order[R[u] = idx++] = u;
}

inline void touch(int idx, int l, int r) {
  if (has[idx])
    st[idx] = r - l + 1;
  else
    st[idx] = st[idx << 1] + st[idx << 1 | 1];
}

void update(int idx, int l, int r, int A, int B, int delta) {
  if (A <= l && r <= B) {
    has[idx] += delta;
    return touch(idx, l, r);
  }
  const int mid = (l + r) >> 1;
  if (B <= mid) update(left, A, B, delta);
  else if (A > mid) update(right, A, B, delta);
  else {
    update(left, A, B, delta);
    update(right, A, B, delta);
  }
  touch(idx, l, r);
}

int main() {
  ios::sync_with_stdio(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    t[u].push_back(v);
    t[v].push_back(u);
  }
  for (int i = 0; i < m; ++i) {
    int u, v;
    cin >> u >> v;
    s[u].push_back(u);
    s[v].push_back(v);
    s[u].push_back(v);
    s[v].push_back(u);
  }
  dfs(1, 0);
  assert(idx = 2 * n);
  for (int i = 0; i < idx; ++i) {
    const int u = order[i];
    open[u] ^= 1;
    for (int j = 0; j < s[u].size(); ++j)
      update(root, L[s[u][j]], R[s[u][j]], open[u] ? + 1 : -1);
    if (open[u])
      ans[u] = st[1] >> 1;
  }
  for (int i = 1; i <= n; ++i)
    cout << max(1, ans[i]) - 1 << ' ';
  cout << endl;
  return 0;
}
