/*
 ID: aandrew
 PROG: codeforces #157
 URL:
 LANG: C++

 
*/
#include <iostream>
#include <map>
#include <algorithm>
#include <set>
#include <vector>
#include <queue>
#include <utility>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <stack>
#include <cassert>
#include <ctime>
using namespace std;

#define REP(i,n) for(int i = 0; i < n; i++)
#define CL(x) memset(x, 0, sizeof(x))
#define MP make_pair
#define PB push_back
typedef pair<int,int> pii;
typedef long long ll;

const int N = 100005;
int k, pre[N], final[N], n, m, u, v, a, b, ans[N];
vector<int> adj[N], on[N];

int val[8*N], sum[8*N];
void add_range(int l, int r, int v, int id, int a, int b) {
	if (l <= a && b <= r) {
		val[id] += v;
	} else if (!(r <= a || b <= l)) {
		add_range(l, r, v, 2*id, a, (a+b)/2);
		add_range(l, r, v, 2*id+1, (a+b)/2, b);
	}
	if (val[id]) 
		sum[id] = b-a;	//this is like the rectangle union -type segment tree
	else
		sum[id] = sum[2*id] + sum[2*id+1];
}

void dfs2(int x, int p) {
	REP(i,on[x].size()) {
		add_range(pre[x], final[x], 1, 1, 0, n);
		int pr = on[x][i];
		add_range(pre[ pr ], final[ pr ], 1, 1, 0, n);
	}
	ans[x] = sum[1] ? sum[1]-1 : 0;
	
	REP(i,adj[x].size()) {
		int to = adj[x][i];
		if (to != p) {
			dfs2(to, x);
		}
	}
	
	REP(i,on[x].size()) {
		add_range(pre[x], final[x], -1, 1, 0, n);
		int pr = on[x][i];
		add_range(pre[ pr ], final[ pr ], -1, 1, 0, n);
	}
}

void dfs(int x, int p) {
	pre[x] = k++;
	
	REP(i,adj[x].size()) {
		int to = adj[x][i];
		if (to != p) {
			dfs(to, x);
		}
	}
	
	final[x] = k;
}

int main() {
	cin >> n >> m;
	REP(i,n-1) {
		cin >> u >> v;
		u--; v--;
		adj[u].PB(v);
		adj[v].PB(u);
	}
	REP(i,m) {
		cin >> a >> b;
		a--; b--;
		on[a].PB(b);
		on[b].PB(a);
	}
	
	//preorder numbering traversal
	k = 0;
	dfs(0, -1);
	
	//sum queries
	CL(val); CL(sum);
	dfs2(0, -1);
	
	REP(i,n)
		cout << (i ? " " : "") << ans[i];
	cout<< endl;
}
