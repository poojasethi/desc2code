#include<iostream>
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<stdlib.h>
#include<vector>
#include<algorithm>
#define pb push_back
using namespace std;
const int N = 701010;
vector<int> e[N];
int L[N],R[N],tot,id[N],v[N],s[N],ans[N];
int n,m,i,j,a,b;
struct o{
	int l,r,typ;
	o(int a,int b,int c)
	{
		l=a;r=b;typ=c;
	}
};
vector<o> vec[N];
void dfs(int x,int fa)
{
	int i;
	L[x]=++tot;
	id[tot]=x;
	for (i=0;i<e[x].size();i++)
	if (e[x][i]!=fa) dfs(e[x][i],x);
	R[x]=tot;
}
void change(int x,int a,int b,int l,int r,int c)
{
	if ((a<=l)&&(r<=b))
	{	
		v[x]+=c;
		if (v[x]) s[x]=r-l;else s[x]=s[2*x]+s[2*x+1];
		return;
	}
	int m=(l+r)>>1;
	if (a<m) change(2*x,a,b,l,m,c);
	if (m<b) change(2*x+1,a,b,m,r,c);
	if (v[x]) s[x]=r-l;else s[x]=s[2*x]+s[2*x+1];
}
/*
int query(int x,int a,int b,int l,int r,int c)
{
	if (v[x]) c=1;
	if ((a<=l)&&(r<=b))
	{
		if (c==1) 
		return r-l;
		else 
		return s[x];
	}
	int m=(l+r)>>1,ans=0;
	if (a<m) ans+=query(2*x,a,b,l,m,c);
	if (m<b) ans+=query(2*x+1,a,b,m,r,c);
	return ans; 
}
*/
int main()
{
	scanf("%d%d",&n,&m);
	for (i=1;i<n;i++)
	{
		scanf("%d%d",&a,&b);
		e[a].pb(b);
		e[b].pb(a);
	}
	dfs(1,0);

	for (i=1;i<=m;i++)
	{
		scanf("%d%d",&a,&b);
		vec[L[a]].pb(o(L[b],R[b],1));
		vec[R[a]+1].pb(o(L[b],R[b],-1));
		vec[L[b]].pb(o(L[a],R[a],1));
		vec[R[b]+1].pb(o(L[a],R[a],-1));
		
		vec[L[a]].pb(o(L[a],R[a],1));
		vec[R[a]+1].pb(o(L[a],R[a],-1));
		vec[L[b]].pb(o(L[b],R[b],1));
		vec[R[b]+1].pb(o(L[b],R[b],-1));
	}
	for (i=1;i<=n;i++)
	{
		for (j=0;j<vec[i].size();j++)
			change(1,vec[i][j].l-1,vec[i][j].r,0,n,vec[i][j].typ);
		ans[id[i]]=max(0,s[1]-1);
	}
	for (i=1;i<=n;i++) printf("%d ",ans[i]);
}


		 	  			 		   	 	    	 		 				