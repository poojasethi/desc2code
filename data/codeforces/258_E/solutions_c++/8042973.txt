#include <algorithm>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <vector>
#define N 200010
#define For(i,x,y) for (i=x;i<=y;i++)
using namespace std;
struct ww {
	int l,r,a,c;
} tr[N*70];
int i,j,k,n,m,x,y,t,w;
int a[N],next[N],head[N],L[N],R[N],root[N],an[N];
vector<int> b[N];
inline void add(int x,int y) {
	a[++t]=y,next[t]=head[x],head[x]=t;
	a[++t]=x,next[t]=head[y],head[y]=t;
}
void dfs(int x,int y) {
	int v;
	L[x]=++t;
	for (v=head[x];v;v=next[v]) if (a[v]!=y) dfs(a[v],x);
	R[x]=t;
}
inline void update(int x) {
	tr[x].a=tr[tr[x].l].a+tr[tr[x].r].a;
}
void get(int p,int &q,int x,int y,int l,int r) {
	if (!q) q=++w;
	if (l<=x&&y<=r||tr[p].c) {
		tr[q].a=y-x+1;
		tr[q].c=1;
		return;
	}
	int mid=(x+y)/2;
	if (l<=mid) get(tr[p].l,tr[q].l,x,mid,l,r);
	else tr[q].l=tr[p].l;
	if (mid<r) get(tr[p].r,tr[q].r,mid+1,y,l,r);
	else tr[q].r=tr[p].r;
	update(q);
}
void Dfs(int x,int y) {
	int v,i,last=root[y];
	for (i=0;i<b[x].size();i++) {
		 int A=b[x][i],B=0;
		 get(last,B,1,n,L[A],R[A]);
		 last=B;
	}
	root[x]=last;
	an[x]=tr[last].a;
	if (an[x]) an[x]--;
	for (v=head[x];v;v=next[v]) if (a[v]!=y) Dfs(a[v],x);
}
int main() {
	scanf("%d%d",&n,&m);
	For(i,1,n-1) {
		scanf("%d%d",&x,&y);
		add(x,y);
	}
	t=0,dfs(1,0);
	For(i,1,m) {
		scanf("%d%d",&x,&y);
		b[x].push_back(y);
		b[y].push_back(x);
	}
	For(i,1,n) if (b[i].size()) b[i].push_back(i);
	root[0]=w=1;
	Dfs(1,0);
	For(i,1,n) printf("%d ",an[i]);
	printf("\n");
	return 0;
}
