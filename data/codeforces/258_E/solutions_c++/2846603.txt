#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
using namespace std;
const int M =500010;
int n,m,t,sum[M*4],cover[M*4],l[M],r[M],ans[M];
vector<int> v[M],p[M];
void dfs(int x,int fa)
{
    l[x]=++t;
    for (int i=0;i<v[x].size();i++)
        if (fa!=v[x][i])
        dfs(v[x][i],x);
    r[x]=t;
}
void ins(int k,int l,int r,int x,int y,int key)
{
    if ((y<l)||(r<x)) return ;
    if ((x<=l)&&(r<=y))
    {
        cover[k]+=key;
        if (cover[k]) sum[k]=r-l+1;
        else sum[k]=sum[k*2]+sum[k*2+1];
        return;
    }
    int mid=(l+r)/2;
    ins(k*2,l,mid,x,y,key);
    ins(k*2+1,mid+1,r,x,y,key);
    if (cover[k]) return;
    else sum[k]=sum[k*2]+sum[k*2+1];
}
void work(int x,int fa)
{
	ins(1,1,t,l[x],l[x],1);
    for (int i=0;i<p[x].size();i++)
            ins(1,1,t,l[p[x][i]],r[p[x][i]],1);
    ans[x]=sum[1]-1;
    ins(1,1,t,l[x],l[x],-1);
    for (int i=0;i<v[x].size();i++)
        if (fa!=v[x][i])
        work(v[x][i],x);
    for (int i=0;i<p[x].size();i++)
            ins(1,1,t,l[p[x][i]],r[p[x][i]],-1);
}
int main()
{
	//freopen("1.in","r",stdin);
	//freopen("1.out","w",stdout);
    int a,b;
    t=0;
    memset(sum,0,sizeof(sum));
    memset(cover,0,sizeof(cover));
    ios::sync_with_stdio(0);
    cin>>n>>m;
    for(int i=1;i<n;i++){
        cin>>a>>b;
        v[a].push_back(b);
        v[b].push_back(a);
    }
    dfs(1,0);
    while(m--)
    {
        cin>>a>>b;
        p[a].push_back(b);
        p[b].push_back(a);
        p[a].push_back(a);
        p[b].push_back(b);
    }
    work(1,0);
    for (int i=1;i<n;i++) cout<<ans[i]<<' ';
    cout<<ans[n]<<endl;
    return 0;
}