#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#define N 120000
using namespace std;
struct ppp{
	int k,l,r,sta;
	void mk(int _k,int _l,int _r,int _sta){
		k=_k; l=_l; r=_r; sta=_sta;
	}
}a[N*8];
int i,j,k,l,t[N*4],sign[N*4],ans[N],dfn[N],dfn2[N],tim,x,y,head[N],next[N*2],e[N*2],
	tot,len,n,m;
void dfs(int x,int fa){
	dfn[x]=++tim;
	for(int i=head[x];i;i=next[i])if(e[i]!=fa){
		dfs(e[i],x);
	}
	dfn2[x]=tim;
}
void renew(int p,int v){
	if(sign[p])t[p]=v;
	else t[p]=t[p<<1]+t[(p<<1)+1];
}
void insert(int p,int l,int r,int x,int y,int sta){
	int mid=l+r>>1;
	if(x<=l && y>=r){
		sign[p]+=sta;
		if(l==r)t[p]=(r-l+1)*(sign[p]!=0);
		else renew(p,r-l+1);
		return;
	}
	if(x<=mid)insert(p<<1,l,mid,x,y,sta);
	if(y>mid)insert((p<<1)+1,mid+1,r,x,y,sta);
	renew(p,r-l+1);
}
void add(int x1,int x2,int y1,int y2){
	a[++tot].mk(x1,y1,y2,1);
	a[++tot].mk(x2+1,y1,y2,-1);
}
bool cmp(const ppp&a,const ppp&b){
	return a.k<b.k;
}
int main(){
	scanf("%d%d",&n,&m);
	for(i=1;i<n;++i){
		scanf("%d%d",&x,&y);
		next[++len]=head[x]; head[x]=len; e[len]=y;
		next[++len]=head[y]; head[y]=len; e[len]=x;
	}
	dfs(1,0);
	for(i=1;i<=m;++i){
		scanf("%d%d",&x,&y);
		add(dfn[x],dfn2[x],dfn[x],dfn2[x]);
		add(dfn[y],dfn2[y],dfn[y],dfn2[y]);
		add(dfn[x],dfn2[x],dfn[y],dfn2[y]);
		add(dfn[y],dfn2[y],dfn[x],dfn2[x]);
	}
	sort(a+1,a+tot+1,cmp);
	j=1;
	for(i=1;i<=n;++i){
		while(j<=tot && a[j].k==i){
			insert(1,1,n,a[j].l,a[j].r,a[j].sta);
			j++;
		}
		ans[i]=t[1];
	}
	for(i=1;i<=n;++i)printf("%d ",max(0,ans[dfn[i]]-1));
}
