#include <iostream>
#include <cstdio>
#include <vector>
#define pb push_back
using namespace std;
const int maxn = 100005;
int lef[maxn], rig[maxn], c[maxn], aa[maxn], bb[maxn];
vector<int> v[maxn], q[maxn];
int f[maxn * 8], cnt[maxn * 8];
int tt = 0, first = 0, n, m;
void dfs(int a, int fa) {
    ++tt;
    lef[a] = tt;
    for (int i = 0; i < v[a].size(); ++i)
        if (v[a][i] != fa) dfs(v[a][i], a);
    rig[a] = tt;
}

void add(int k, int l, int r, int lc, int rc) {
    if (lc <= l && r <= rc) {
        cnt[k] = cnt[k] + tt;
        if (cnt[k] == 0) f[k] = f[k * 2] + f[k * 2 + 1];
        else f[k] = r - l + 1;
        return ;
    }
    if ((l + r) / 2 >= lc) add(k * 2, l, (l + r) / 2, lc, rc);
    if ((l + r) / 2 < rc) add(k * 2 + 1, (l + r) / 2 + 1, r, lc, rc);
    if (cnt[k] == 0) f[k] = f[k * 2 + 1] + f[k * 2]; else f[k] = r - l + 1;
}

void dfs2(int a, int fa) {
    tt = 1;
    for (int i = 0; i < q[a].size(); ++i)
        add(1, 1, n, lef[q[a][i]], rig[q[a][i]]);
    if (q[a].size() > 0) add(1, 1, n, lef[a], rig[a]);
    c[a] += f[1];
    for (int i = 0; i < v[a].size(); ++i) if (v[a][i] != fa) dfs2(v[a][i], a);
    tt = -1;
    for (int i = 0; i < q[a].size(); ++i)
        add(1, 1, n, lef[q[a][i]], rig[q[a][i]]);
    if (q[a].size() > 0) add(1, 1, n, lef[a], rig[a]);
}

int main() {
  //  freopen("in.txt", "r", stdin);
    scanf("%d%d", &n, &m);
    int a, b;
    for (int i = 1; i < n;++i) {
        scanf("%d%d", &a, &b);
        v[a].pb(b);
        v[b].pb(a);
    }
    dfs(1, 0);
    for (int i = 1; i <= m; ++i) scanf("%d%d", &a, &b), q[a].pb(b), q[b].pb(a);
    dfs2(1, 0);
    for (int i = 1; i <= n; ++i) printf("%d%c", c[i] > 0? c[i] - 1: 0, i == n?'\n':' ');
    return 0;
}
