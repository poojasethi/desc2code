#include <stdio.h>
#include <algorithm>
#include <memory.h>
#include <vector>
using namespace std;
#define M 100010

vector <int> v[M], s[M];
int ans[M], a[M], b[M], L[M], R[M], Tim, n, flag[4*M], tot[4*M];

void dfs(int x, int pa){
	L[x] = ++Tim;
	for(int i = 0; i < v[x].size(); i++){
		if(v[x][i] != pa) dfs(v[x][i], x);
	}
	R[x] = Tim;
}

void update(int id, int st, int en){
	if(flag[id]) tot[id] = (en - st + 1);
	else if(st != en) tot[id] = tot[2*id] + tot[2*id+1];
	else tot[id] = 0;
}

void add(int id, int st, int en, int l, int r, int val){
	int mid = (st + en) / 2;
	if(l <= st && en <= r){flag[id] += val;}
	else{
		if(l <= mid) add(2 * id, st, mid, l, r, val);
		if(mid < r) add(2 * id + 1, mid + 1, en, l, r, val);
	}
	update(id, st, en);
}

void DFS(int x, int pa){
	int i, u;
	for(i = 0; i < s[x].size(); i++){
		int uu = s[x][i];
		u = a[uu];
		add(1, 1, n, L[u], R[u], 1);
		u = b[uu];
		add(1, 1, n, L[u], R[u], 1);
	}
	ans[x] = tot[1];
    for(i = 0; i < v[x].size(); i++){
		u = v[x][i];
		if(u != pa) DFS(u, x);
    }
    for(i = 0; i < s[x].size(); i++){
		int uu = s[x][i];
		u = a[uu];
		add(1, 1, n, L[u], R[u], -1);
		u = b[uu];
		add(1, 1, n, L[u], R[u], -1);
	}
	return;
}

int main(){
	///freopen("E.in", "r", stdin);
	int Q, i, x, y;
	scanf("%d %d", &n, &Q);
	for(i = 1; i < n; i++){
		scanf("%d %d", &x, &y); v[x].push_back(y); v[y].push_back(x);
	}
	dfs(1, 0);
	for(i = 0; i < Q; i++){
		scanf("%d %d", &a[i], &b[i]);
		s[a[i]].push_back(i); s[b[i]].push_back(i);
	}
	DFS(1, 0);
	for(i = 1; i <= n; i++) printf("%d ", max(ans[i] - 1, 0));
	return 0;
}
