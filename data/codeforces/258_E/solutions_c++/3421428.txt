#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <algorithm>
#include <numeric>
using namespace std;
const int MAXN = 100005 ;
vector<int> E[MAXN],S[MAXN];
int L[MAXN],R[MAXN],id,ans[MAXN];
int N,M,u,v;
int Tree[MAXN<<2],Sum[MAXN<<2];
void add(int a,int b,int v,int pos=1,int l=1,int r=N){
    Sum[pos]+=(b-a+1)*v;
    if(a==l&&b==r){Tree[pos]+=v;return;}
    int Mid=(l+r)>>1;
    if(b<=Mid)return add(a,b,v,pos*2,l,Mid);
    if(a>Mid) return add(a,b,v,pos*2+1,Mid+1,r);
    add(a,Mid,v,pos*2,l,Mid);
    add(Mid+1,b,v,pos*2+1,Mid+1,r);
}
int query(int pos=1,int l=1,int r=N){
    if(!Sum[pos])return 0;
    if(Tree[pos])return r-l+1;
    int Mid=(l+r)>>1;
    return query(pos*2,l,Mid)+query(pos*2+1,Mid+1,r);
}
void dfs1(int u=1,int pre=0){
    L[u] = ++id;
    for(int i=E[u].size()-1;~i;--i){
        if(E[u][i]==pre)continue;
        dfs1(E[u][i],u);
    }
    R[u] = id;
}
void dfs2(int u=1,int pre=0){
    for(int i=S[u].size()-1;~i;--i){
        add(L[S[u][i]],R[S[u][i]],1);
    }
    add(L[u],L[u],1);
    ans[u] = query() - 1 ;
    add(L[u],L[u],-1);
    for(int i=E[u].size()-1;~i;--i){
        if(E[u][i]==pre)continue;
        dfs2(E[u][i],u);
    }
    for(int i=S[u].size()-1;~i;--i)
        add(L[S[u][i]],R[S[u][i]],-1);
}
int main()
{
    scanf("%d%d",&N,&M);
    for(int i=1;i<N;++i){
        scanf("%d%d",&u,&v);
        E[u].push_back(v);
        E[v].push_back(u);
    }
    dfs1();
    while(M--){
        scanf("%d%d",&u,&v);
        S[u].push_back(v);S[u].push_back(u);
        S[v].push_back(u);S[v].push_back(v);
    }
    dfs2();
    for(int i=1;i<N;++i)
        printf("%d ",ans[i]);
    printf("%d\n",ans[N]);
    return 0;
}

	     	  	  				 		  	 		