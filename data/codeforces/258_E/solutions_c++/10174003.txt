#include <bits/stdc++.h>
typedef long long LL;
#define rep(i,n) for(int i = 0;i < n;i ++)

const int N = 100010;
std::vector<int> G[N], ly[N];
int st[N], ed[N], dfs_clock;
void dfs(int u, int f) {
	st[u] = ++ dfs_clock;
	rep(i, G[u].size()) {
		int v = G[u][i];
		if(v == f)	continue;
		dfs(v, u);
	}
	ed[u] = dfs_clock;
}
int n;
namespace SGT {
#define lc o<<1
#define rc o<<1|1
#define lson l,m,lc
#define rson m+1,r,rc
	int sum[N << 2], set[N << 2];
	void up(int l, int r, int o) {
		if(set[o] > 0) {
			sum[o] = r - l + 1;
		} else if(l == r) {
			sum[o] = 0;
		} else {
			sum[o] = sum[lc] + sum[rc];
		}
	}
	void update(int l, int r, int o, int L, int R, int val) {
		if(L <= l && r <= R) {
			set[o] += val;
			up(l, r, o);
		} else {
			int m = l + r >> 1;
			if(L <= m)	update(lson, L, R, val);
			if(R  > m)	update(rson, L, R, val);
			up(l, r, o);
		}
	}
}
int answer[N];
void Go(int u, int f) {
	if(ly[u].size())
		SGT::update(1, n, 1, st[u], ed[u], 1);
	rep(i, ly[u].size()) {
		int v = ly[u][i];
		SGT::update(1, n, 1, st[v], ed[v], 1);
	}
	answer[u] = std::max(answer[u], SGT::sum[1]);
	if(answer[u] > 0)
		answer[u] --;
	rep(i, G[u].size()) {
		int v = G[u][i];
		if(v == f)		continue;
		Go(v, u);
	}
	if(ly[u].size())
		SGT::update(1, n, 1, st[u], ed[u], -1);
	rep(i, ly[u].size()) {
		int v = ly[u][i];
		SGT::update(1, n, 1, st[v], ed[v], -1);
	}
}
int main() {
	int u, v, q;	
	scanf("%d%d", &n, &q);
	rep(i, n - 1) {
		scanf("%d%d", &u, &v);
		u --, v --;
		G[u].push_back(v);
		G[v].push_back(u);
	}
	rep(i, q) {
		scanf("%d%d", &u, &v);
		u --, v --;
		ly[u].push_back(v);
		ly[v].push_back(u);
	}
	dfs(0, -1);
	Go(0, -1);
	rep(i, n)
		printf("%d%c", answer[i], " \n"[i == n - 1]);
	return 0;
}

