#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <set>
#include <map>
using namespace std;

#define rep(i,a,b) for (int i = a; i <= b; ++i)
#define dep(i,a,b) for (int i = a; i >= b; --i)
typedef long long ll;

const int nn = 100010*4;
int sum[nn], s[nn], g[nn], ans[nn], L[nn], R[nn];
vector<int> E[nn], e[nn];
int N,M,ti;

void dfs(int x, int fa) {
	L[x] = ++ti;
	for (int i = 0; i < E[x].size(); ++i) {
		int j = E[x][i];
		if (j == fa) continue;
		dfs(j, x);
	}
	R[x] = ti;
}
void add(int p, int l, int r, int x, int y, int d) {
	if (y < l || r < x) return;
	if (x <= l && r <= y) {
		g[p] += d;
		if (g[p] > 0) s[p] = r-l+1;
		if (sum[p] == 0 && g[p] == 0) s[p] = sum[p] = g[p] = 0;
		if (g[p] == 0) s[p] = sum[p];
		return;
	}
	int mid = l+r>>1, lc = p << 1, rc = lc+1;
	add(lc, l, mid, x, y, d);
	add(rc, mid+1, r, x, y, d);
	s[p] = sum[p] = s[lc] + s[rc];
	if (g[p] > 0) s[p] = r-l+1;
}
void work(int x, int fa) {
	if (e[x].size())
	add(1, 1, N, L[x], R[x], 1);
	for (int i = 0; i < e[x].size(); ++i) {
		int j = e[x][i];
		add(1, 1, N, L[j], R[j], 1);
	}
	ans[x] = s[1] - 1;
	if (ans[x] < 0) ans[x] = 0;
	for (int i = 0; i < E[x].size(); ++i) {
		int j = E[x][i];
		if (j == fa) continue;
		work(j, x);
	}
	if (e[x].size())
	add(1, 1, N, L[x], R[x], -1);
	for (int i = 0; i < e[x].size(); ++i) {
		int j = e[x][i];
		add(1, 1, N, L[j], R[j], -1);
	}
}
int main() {
	
	scanf("%d%d", &N, &M);
	rep(i,1,N-1) {
		int x,y;
		scanf("%d%d", &x, &y);
		E[x].push_back(y);
		E[y].push_back(x);
	}
	dfs(1, 0);
	rep(i,1,M) {
		int x,y;
		scanf("%d%d", &x, &y);
		e[x].push_back(y);
		e[y].push_back(x);
	}
	work(1, 0);
	rep(i,1,N) printf("%d ", ans[i]);
	return 0;
}
