#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <set>
using namespace std;
typedef long long LL;
set<LL> luck;
void dfs(LL x){
	if(x>10000000000LL) return;
	if (x) luck.insert(x);
	dfs(x*10+4);
	dfs(x*10+7);
}
const int MaxF = 15;
LL fac[MaxF];
bool check(int x){
	if(x <= 0) return false;
	while(x > 0){
		int d = x%10;
		x /= 10;
		if(d != 4 && d != 7) return false;
	}
	return true;
}
bool usd[MaxF];
int P[MaxF];
int main(){
	dfs(0);
	fac[0]=1;
	for(int i=1;i<MaxF;++i)
		fac[i]=fac[i-1]*i;

	int n,k;
	scanf("%d%d",&n,&k);
	if(n < MaxF && fac[n] < k)
		puts("-1");
	else {
		int L = 0;
		while (fac[L] < k) L++;
		k--;
		// Cantor
		for (int i = 0;i < L;++i){
			int less = k / fac[L-i-1], fd = 0;k %= fac[L-i-1];
			while (usd[fd]) ++fd;
			while(less--){
				++fd;
				while (usd[fd]) ++fd;
			}
			usd[fd] = true;
			P[i] = n - L + 1 + fd;
		}
		int ans = 0;
		for (set<LL>::iterator it = luck.begin();it != luck.end() && *it <= n; it++)
			if(1<=*it && *it<=n-L) ans++;
			else if(check(P[*it-(n-L+1)])) ans++;
		printf("%d",ans);
	}
	return 0;
}