#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std;

const long long INF = 10000000000;

int n, K;
long long f[15];
vector <long long> v;

inline bool lucky(long long n) {
	vector <long long>::iterator i = lower_bound(v.begin(), v.end(), n);
	return i != v.end() && *i == n;
}

int main() {
	v.push_back(4);
	v.push_back(7);
	for (int i = 0; i < (int)v.size(); ++i) {
		if (v[i] <= INF) {
			v.push_back(v[i] * 10 + 4);
			v.push_back(v[i] * 10 + 7);
		}
	}
	f[0] = 1;
	for (int i = 1; i <= 14; ++i) {
		f[i] = f[i - 1] * i;
	}
	scanf("%d%d", &n, &K);
	int res = 0, offset = 0;
	if (n > 14) {
		offset = n - 14;
		n -= offset;
		for (vector <long long>::const_iterator i = v.begin(); i != v.end(); ++i) {
			if (*i <= offset) {
				++res;
			}
		}
	}
	--K;
	//printf("n = %d, offset = %d, K = %d, res = %d\n", n, offset, K, res);
	vector <bool> used(n + 1, false);
	for (int i = 1; i <= n; ++i) {
		int c = K / f[n - i];
		K -= c * f[n - i];
		for (int j = 1; j <= n; ++j) {
			if (!used[j] && c-- == 0) {
				used[j] = true;
				if (lucky(i + offset) && lucky(j + offset)) {
					++res;
				}
				break;
			}
		}
		if (c >= 0) {
			K = -1;
			break;
		}
	}
	printf("%d\n", K < 0 ? -1 : res);
	return 0;
}
