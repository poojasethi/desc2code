#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
using namespace std;

void gen(vector<long long>& h, long long num)
{
	if (num < 10000000000) {
		h.push_back(num);
		gen(h, num * 10 + 4);
		gen(h, num * 10 + 7);
	}
}

vector<long long> fact;

int get(int n, int perm, int pos)
{
	int sf = std::max(0, n - (int) fact.size());
	if (pos < sf) {
		return pos;
	}
	set<int> was;
	for (int i = sf; i < n; ++i) {
		int f = perm / fact[n - i - 1];
		perm -= f * fact[n - i - 1];
		int j = sf;
		for (int k = f; ; ++j) {
			if (was.find(j) == was.end()) {
				if (k == 0) {
					break;
				}
				--k;
			}
		}
		was.insert(j);
		if (i == pos) {
			return j;
		}
	}
}

int main()
{
	for (long long i = 0, p = 1; i < 15; ++i, p *= i) {
		fact.push_back(p);
	}

	vector<long long> h;
	gen(h, 4);
	gen(h, 7);
	sort(h.begin(), h.end());

	int n, k;
	cin >> n >> k;
	if (n < (int) fact.size() && fact[n] < k) {
		cout << -1 << endl;
	} else {
		int result = 0;
		for (int i = 0, ilen = h.size(); i < ilen; ++i) {
			if (h[i] <= n) {
				int num = get(n, k - 1, h[i] - 1);
				if (find(h.begin(), h.end(), num + 1) != h.end()) {
					++result;
				}
			}
		}
		cout << result << endl;
	}
}
