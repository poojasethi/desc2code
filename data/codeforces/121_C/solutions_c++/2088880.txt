#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define MAX_NUM 1000000000ll
typedef long long LL;

LL fac[14];
vector<LL> lucky;

bool isLucky(LL n)
{
    int x;
    while(n)
    {
        x=n%10;
        n/=10;
        if(x==4 || x==7) continue;
        return 0;
    }
    return 1;
}

void gen(LL n)
{
    LL x=n*10;
    if(x>MAX_NUM) return;
    
    x+=4;lucky.push_back(x);gen(x);
    x+=3;lucky.push_back(x);gen(x);
}

int main()
{
    int i, j, r, ans;
    LL n, k, m;
    cin>>n>>k;
    
    fac[0]=1;
    for(i=1;i<14;i++) fac[i]=i*fac[i-1];
    
    if(n<14 && fac[n]<k)
    {
        cout<<-1;
        return 0;
    }
    
    gen(0);
    lucky.push_back(4444444444ll);
    sort(lucky.begin(),lucky.end());
    
    m=max(n-13,0ll);
    ans=upper_bound(lucky.begin(),lucky.end(),m)-lucky.begin();
    
    vector<bool> used(n-m+1,false);
    
    for(i=n-m;i>=1;i--)
    {
        r=(k+fac[i-1]-1)/fac[i-1];
        
        k-=(r-1)*fac[i-1];
        for(j=1;;j++)if(!used[j])
        {
            r--; if(!r) break;
        }
        
        used[j]=1;
        if(isLucky(n-i+1) && isLucky(m+j)) ans++;
    }
    
    cout<<ans;
    
    return 0;
}
