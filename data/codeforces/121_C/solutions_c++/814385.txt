#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
typedef long long llong;
vector<llong> luck;
void dfs(llong x){
	if(x>10000000000LL) return;
	luck.push_back(x);
	dfs(x*10+4);
	dfs(x*10+7);
}
const int MaxF=20;
llong fact[MaxF];
bool check(int x){
	if(x<=0) return false;
	while(x>0){
		int d=x%10;
		x/=10;
		if(d!=4 && d!=7) return false;
	}
	return true;
}
int main(){
	dfs(4);
	dfs(7);
	sort(luck.begin(),luck.end());
	luck.erase(unique(luck.begin(),luck.end()),luck.end());
	fact[0]=1;
	for(int i=1;i<MaxF;++i){
		fact[i]=fact[i-1]*i;
		//cout<<i<<": "<<fact[i]<<endl;
	}
	int n,k;
	cin>>n>>k;
	if(n<MaxF && fact[n]<k){
		puts("-1");
	}
	else{
		int L=0;
		while(fact[L]<k) ++L;
		bool vst[L];
		int permu[L];
		memset(vst,0,sizeof(vst));
		--k;
		for(int i=0;i<L;++i){
			int t=k/fact[L-i-1];
			int x=0;
			while(vst[x]) ++x;
			while(t--){
				++x;
				while(vst[x]) ++x;
			}
			vst[x]=true;
			permu[i]=n-L+1+x;
			k%=fact[L-i-1];
		}
		int ans=0;
		for(int i=0;i<luck.size() && luck[i]<=n;++i){
			if(1<=luck[i] && luck[i]<=n-L) ++ans;
			else if(check(permu[luck[i]-(n-L+1)])) ++ans;
		}
		cout<<ans<<endl;
	}
	return 0;
}
