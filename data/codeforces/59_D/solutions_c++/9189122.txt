#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int maxn = 3 * 100 * 1000 + 100;

int rank[maxn];
vector<int> gr[maxn];
int k, g[maxn], n;
vector<int> v;

bool cmp(int ind1, int ind2) {return (rank[ind1] < rank[ind2]);}

int main() {
	ios :: sync_with_stdio(false);
	cin.tie(0);

	cin >> n;
	for (int i = 0; i < 3 * n; i++) {
		int ind;
		cin >> ind;
		ind--;
		rank[ind] = i;
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < 3; j++) {
			int x;
			cin >> x;
			x--;
			gr[i].push_back(x);
			g[x] = i;
		}
		sort(gr[i].begin(), gr[i].end(), cmp);
		sort(gr[i].begin() + 1, gr[i].end());
	}
	cin >> k;
	k--;
	if (gr[g[k]][0] != k) {
		for (int i = 0; i < 3 * n; i++)
			if (i != k)
				cout << i + 1 << " ";
		return 0;
	}
	int ind = g[k];
	for (int i = 0; i < ind; i++)
		for (int j = 0; j < 3; j++)
			v.push_back(gr[i][j]);
	v.push_back(gr[ind][1]);
	v.push_back(gr[ind][2]);
	sort(v.begin(), v.end());
	int ind2;
	for (int i = 0; i < v.size(); i++)
		if (v[i] == gr[ind][2])
			ind2 = i;
	for (int i = ind + 1; i < n; i++)
		for (int j = 0; j < 3; j++)
			v.push_back(gr[i][j]);
	sort(v.begin() + ind2 + 1, v.end());
	for (int i = 0; i < v.size(); i++)
		cout << v[i] + 1 << " ";
	return 0;
}
	

