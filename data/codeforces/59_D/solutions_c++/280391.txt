#include <iostream>
#include <algorithm>
#include <vector>
#include <algorithm>
using namespace std;
int n;
int k;
const int MN = 300*1000+50;
int arr[MN];
int perm[MN];
int pos[MN];
bool cmp(int a, int b) {
	return pos[a] < pos[b];
}
int main()
{
	cin>>n;
	for(int i=0; i<3*n; ++i) cin>>perm[i];
	for(int i=0; i<3*n; ++i) pos[perm[i]] = i;
	for(int i=0; i<3*n; ++i) cin>>arr[i];
	cin>>k;
	int a=0;
	while(arr[a]!=k) ++a;
	vector<int> pre,cur,post;
	for(int i=0; i<a/3*3; ++i) pre.push_back(arr[i]);
	for(int i=0; i<3; ++i) {
		int x = a/3*3+i;
		if (arr[x]==k) continue;
		cur.push_back(arr[x]);
		int xx = arr[x];
		if (pos[xx] < pos[k]) {
			bool sp=0;
			for(int i=1; i<=3*n; ++i) {
				if (i!=k) {
					if (sp) cout<<' ';
					cout<<i;
					sp=1;
				}
			}
			cout<<'\n';
			return 0;
		}
	}
	for(int i=a/3*3+3; i<3*n; ++i) post.push_back(arr[i]);
	sort(pre.begin(),pre.end());
	sort(cur.begin(),cur.end());
	sort(post.begin(),post.end());
	vector<int> res;

	size_t p=0, c=0, o=0;
	for(int i=0; i<3*n-1; ++i) {
		int x = p<pre.size() ? pre[p] : (int)1e8;
		int y = c<cur.size() ? cur[c] : (int)1e8;
		int z = o<post.size() && c==cur.size() ? post[o] : (int)1e8;
		int m = min(x,min(y,z));
		if (x==m) ++p;
		if (y==m) ++c;
		if (z==m) ++o;
		res.push_back(m);
	}

	for(int i=0; i<3*n-1; ++i) {
		if (i>0) cout<<' ';
		cout<<res[i];
	}
	cout<<'\n';
}
