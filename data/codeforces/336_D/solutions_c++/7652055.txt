#include <iostream>
#include <cstdio>
#include <cstring>
using namespace std;

const int N = 3e5 + 5;
const int P = 1e9 + 7;
typedef long long LL;
int p[N], I[N];

int C(int n, int m) {
    return (LL)p[n] * I[m] % P * I[n - m] % P;
}

int solve(int n, int m) {
    return C(n + m - 1, m - 1);
}

int find(int n, int m, int g) {
    if (n < 0 || m < 0) return 0;
    if (n + m == 0) return 1;
    if (n + m == 1) return g == m;
    if (g == 1) return find(n - 1, m, 0);
    return (solve(n, m + 1) - find(n, m, 1) + P) % P;
}

void init() {
    p[0] = p[1] = I[0] = I[1] = 1;
    for (int i = 2; i < N; ++i) {
	I[i] = ((LL)P - P / i) * I[P % i] % P;
	p[i] = i;
    } 
    for (int i = 2; i < N; ++i) {
	I[i] = (LL)I[i] * I[i - 1] % P;
	p[i] = (LL)p[i] * p[i - 1] % P;
    }
}

int main() {
    int n, m, g;
    init();
    scanf("%d%d%d", &n, &m, &g);
    cout << find(n, m, g) << endl;
    return 0;
}
