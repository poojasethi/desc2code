#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
using namespace std;
const int Maxn = 2e5 + 10, Mod = 1e9 + 7;

int n, m, g;
typedef long long ll;
ll powMod(ll x, ll y)
{
	ll ret = 1;
	while(y)
	{
		if (y & 1) ret = ret * x % Mod;
		y >>= 1;
		x = x * x % Mod;
	}
	return ret;
}
ll A[Maxn];
ll ni[Maxn];
int c(int x, int y)
{
	if (y < 0 || x <= 0) return 0;
	return A[x] * ni[y] % Mod * ni[x - y] % Mod;
}
int dfs(int n, int m, int g)
{
	if (n + m == 1) 
	{
		if (n) return g == 0;
		else return g == 1;
	}
	if (n == 0)
	{
		return g == 0;
	}
	if (g == 0) return (dfs(n - 1, m, 1) + c(n + m - 1, m - 1)) % Mod;
	else return (dfs(n - 1, m, 0) + (m == 1 && n == 0)) % Mod;
}
int main()
{
	A[0] = 1, ni[0] = 1;
	scanf("%d%d%d", &n, &m, &g);
		for (int i = 1; i <= n + m; ++i)
	{
		A[i] = A[i - 1] * i % Mod;
		ni[i] = ni[i - 1] * powMod(i, Mod - 2) % Mod;
	}	
	printf("%d\n", dfs(n, m, g));

	return 0;
}