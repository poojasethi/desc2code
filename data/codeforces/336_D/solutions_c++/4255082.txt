#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>

using namespace std;

typedef long long ll;

const int N = 200010;
const int mod = 1e9 + 7;

int n, m, c;
ll p[N];

ll pow(ll a, ll b, ll c){
	ll ret = 1;
	while(b){
		if(b & 1) ret = ret * a % c;
		a = a * a % c;
		b >>= 1;
	}
	return ret;
}
ll com(int n, int m){
	ll ret = 1;
	ret = (ret * p[n]) % mod;
	ret = (ret * pow(p[m], mod - 2, mod)) % mod;
	ret = (ret * pow(p[n - m], mod - 2, mod)) % mod;
	return ret;
}
ll dfs(int z, int o, int c){
	if(z + o == 1){
		if(z) return c == 0;
		return c == 1;
	}
	if(c == 1){
		if(z) return dfs(z - 1, o, 0);
		else return 0;
	}
	else{
		ll ret = 0;
		if(z) ret += dfs(z - 1, o, 1);
		if(o) ret += com(z + o - 1, z);
		ret %= mod;
		return ret;
	}
}
int main(){
	p[0] = 1;
	for(int i = 1; i < N; ++i)
		p[i] = p[i - 1] * i % mod;
	cin >> n >> m >> c;
	cout << dfs(n, m, c) << endl;
	return 0;
}