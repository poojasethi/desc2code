#include <bits/stdc++.h>
using namespace std;

#define rep(i,a,n) for(int (i)=(a);(i)<(int)(n);(i)++)
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)
#define SZ(x) ((int) (x).size())

const int N = 100000 + 5;
int n,q;
string str[N];
vector<int> G[N];
vector<pair<int,int> > query[N];
map<string,int> has[N];
int H[N],S[N],B[N],ans[N];
void dfs1(int v) {
	S[v] = 1;
	foreach(u,G[v]) H[*u]=H[v]+1, dfs1(*u), S[v]+=S[*u];
}
void add(int v, int x) {
	int t= has[H[v]][str[v]]+=x;
	if(t==0) has[H[v]].erase(str[v]);
	foreach(u,G[v]) if(!B[*u]) add(*u, x);
}
void dfs2(int v, bool keep) {
	int mx = -1, son = -1;
	foreach(u, G[v]) if(mx<S[*u]) son=*u, mx=S[*u];
	foreach(u, G[v]) if(*u!=son) dfs2(*u, 0);
	if(son!=-1) dfs2(son, 1), B[son] = 1;
	add(v, 1);
	foreach(u,query[v]) 
		ans[u->second]=H[v]+u->first>n?0:has[H[v]+u->first].size();
	if(son!=-1) B[son] = 0;
	if(!keep) add(v, -1);
}
int main(){
    //freopen("E.in","r",stdin);
	ios_base::sync_with_stdio(0);
	cin >> n;
	rep(i,1,n+1) {
		int a;
		cin >> str[i] >> a;
		G[a].push_back(i);
	}
	cin >> q;
	rep(i,0,q) {
		int a,b;
		cin >> a >> b;
		query[a].push_back(make_pair(b,i));
	}
	dfs1(0);
	dfs2(0,1);
	rep(i,0,q) cout<<ans[i]<<endl;
    return 0;
}
		  	 	   		  	 		  	  		  	  	