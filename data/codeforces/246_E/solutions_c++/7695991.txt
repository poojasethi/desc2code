#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <set>
#include <string>
#include <map>
#define maxn 100009
using namespace std;
int n,m,L[maxn],R[maxn],d[maxn],dfs_time;
char S[maxn];
vector<int>G[maxn];
vector<pair<int,int> >Q[maxn];
string s[maxn];
map<pair<int,int>,int>mp;
void dfs(int u,int dep)
{
	L[u]=++dfs_time;
	d[u]=dep;
	Q[dep].push_back(make_pair(L[u],u));
	for(int i=0;i<(int)G[u].size();i++)
	{
		dfs(G[u][i],dep+1);
	}
	R[u]=dfs_time;
}
int solve(int u,int k)
{
	if(mp.count(make_pair(u,k)))
		return mp[make_pair(u,k)];
	vector<pair<int,int> >::iterator bg,ed;
	bg=lower_bound(Q[d[u]+k].begin(),Q[d[u]+k].end(),make_pair(L[u],maxn));
	ed=upper_bound(Q[d[u]+k].begin(),Q[d[u]+k].end(),make_pair(R[u],maxn));
	set<string>st;
	for(;bg!=ed;++bg)
		st.insert(s[bg->second]);
	return mp[make_pair(u,k)]=(int)st.size();
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
	{
		int x;
		scanf("%s%d",S,&x);
		s[i]=string(S);
		G[x].push_back(i);
	}
	dfs(0,0);
	scanf("%d",&m);
	while(m--)
	{
		int u,k;
		scanf("%d%d",&u,&k);
		printf("%d\n",solve(u,k));
	}
	return 0;
}