#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <vector>
#include <map>
#include <set>
using namespace std;

#define LL long long
#define mod 1000000007
#define MP make_pair
#define eps 1e-8
#define mxn 100005

vector<int> son[mxn], D[mxn];
string s[mxn], in[mxn];
map<pair<int,int>, int> ans;
int dep[mxn], L[mxn], R[mxn], cnt, n;

void dfs( int u, int d ) {
    dep[u] = d;
    D[d].push_back(++cnt);
    s[cnt] = in[u];
    L[u] = cnt;
    for( int i = 0; i < son[u].size(); ++i )
        dfs( son[u][i], d + 1 );
    R[u] = cnt;
}

int solve( int x, int y ) {
    pair<int,int> cur = MP(x, y);
    map<pair<int,int>, int>::iterator it = ans.find(cur);
    if( it != ans.end() ) return it->second;
    int d = dep[x] + y;
    if( d > n ) return ans[cur] = 0;
    int ll = upper_bound(D[d].begin(), D[d].end(), L[x]) - D[d].begin();
    int rr = upper_bound(D[d].begin(), D[d].end(), R[x]) - D[d].begin();
    set<string> st;
    for( int i = ll; i < rr; ++i )
        st.insert(s[D[d][i]]);
    int ret = st.size();
    ans[cur] = ret;
    return ret;
}

int main()
{
    ios::sync_with_stdio(false);
    int m, x, y;
    cin >> n;
    for( int i = 1; i <= n; ++i ) {
        cin >> in[i] >> x;
        son[x].push_back(i);
    }
    dfs( 0, 0 );
    cin >> m;
    while( m-- ) {
        cin >> x >> y;
        cout << solve(x, y) << endl;
    }
    return 0;
}
 	   			  	 			 	       	 	