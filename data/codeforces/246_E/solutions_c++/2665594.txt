#include <iostream>
#include <vector>
#include <map>
#include <set>
using namespace std;

const int MAX = 100010;

string names[MAX];
vector<int> childrens[MAX];
vector< pair<int, int> > nodes[MAX];
pair<int,int> *l, *u;
int L[MAX], U[MAX], D[MAX];
map< pair<int,int>, int > sols;
string name;
int ancestor;
int i,n,m,v,k,counter;

void dfs(int i, int d) {
    L[i] = ++counter;
    D[i] = d;
    nodes[d].push_back(make_pair(counter,i));
    for (vector<int>::iterator p=childrens[i].begin();p!=childrens[i].end();p++)
        dfs(*p,d+1);
    U[i] = counter+1;
}

int getSol(int v, int k) {
    if (sols[make_pair(v,k)])
        return sols[make_pair(v,k)];
    set<string> namesSet;
    vector< pair<int,int> >::iterator
        l=lower_bound(nodes[D[v]+k].begin(),nodes[D[v]+k].end(),make_pair(L[v], -1)),
        u=lower_bound(nodes[D[v]+k].begin(),nodes[D[v]+k].end(),make_pair(U[v], -1));
    for (vector< pair<int, int> >::iterator p=l;p!=u;p++)
        namesSet.insert(names[(*p).second]);
    return sols[make_pair(v,k)] = int(namesSet.size());
}

int main() {
    cin >> n;
    for (i=1;i<=n;i++) {
        cin >> name >> ancestor;
        names[i] = name;
        childrens[ancestor].push_back(i);
    }
    
    dfs(0,0);
    
    cin >> m;
    for (i=0;i<m;i++) {
        cin >> v >> k;
        cout << getSol(v, k) << endl;
    }
    
    return 0;
}