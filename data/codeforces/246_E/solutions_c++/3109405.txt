#include <cstdio>
#include <set>
#include <map>
#include <vector>
#include <iostream>
#include <algorithm>

#define fi first
#define se second

using namespace std;

const int MAXN = 1e5+5;

typedef pair<int,int> ii;

string s[MAXN];
int N;
vector<int> way[MAXN];
vector<int> root;
int beg[MAXN];
int end[MAXN];
vector<ii> dep[MAXN];
int tim;
int dp[MAXN];
set<string> S;
map<ii,int> ans;

void rec(int node,int k){
	beg[node] = ++tim;
	dep[k].push_back(ii(tim,node));
	dp[node] = k ; 
	for(int i=0;i<way[node].size();i++){
		rec(way[node][i],k+1);
		end[node] = ++tim;
	}
}

int solve(int node,int k){

	if(ans[ii(node,k)]) return ans[ii(node,k)];
 
	if(k+dp[node]>=MAXN) return 0; 
	
	vector<ii>::iterator it = lower_bound(dep[k+dp[node]].begin(),dep[k+dp[node]].end(),ii(beg[node],0));
	S.clear();

	while(it!=dep[k+dp[node]].end()){
		
		if(it->fi>end[node])	break;
		
		S.insert(s[it->se]);
			
		it++;
	
	}
	
	return ans[ii(node,k)] = S.size();

}

int main(){
	
	cin >> N ; 
	
	char buf[22];
	
	for(int i=1;i<=N;i++){
		
		int a;
		
		scanf(" %s %d",buf,&a);
		s[i] = buf;
		if(a) way[a].push_back(i);
		else root.push_back(i);	
			
	}
	
	for(int i=0;i<root.size();i++)
		rec(root[i],1);
		
	int Q;cin>>Q;
	
	while(Q--){
	
		int v,k;scanf(" %d %d",&v,&k);
		
		printf("%d\n",solve(v,k));
	
	}	
		
	return 0;

}
