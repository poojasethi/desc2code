#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<algorithm>
#include<vector>
#include<queue>
#include<math.h>
#include<string>
#include<map>
#include<set>
using namespace std;
typedef long long ll;
const int inf = 1 << 30;
#define mod 1000000007

#define N 100010

vector<int> e[N],S[N];
char name[N][22];
int id=0,L[N],R[N];
int depth[N];

map<pair<int,int>,int > ans;

void dfs(int u,int dep)
{
	depth[u]=dep;
	S[dep].push_back(u);
	L[u]=id++;
	for(int i=0;i<(int)e[u].size();i++){
		dfs(e[u][i],dep+1);
	}
	R[u]=id++;
}

int solve(int x,int y,int l,int r)
{
	int dep=depth[x]+y;
	if(dep>=N) return 0;
	if(S[dep].empty()) return 0;
	if(ans.find(make_pair(x,y))!=ans.end()){
		return ans[make_pair(x,y)];
	}
	int left=0,right=S[dep].size()-1,mid,begin=S[dep].size();
	while(left<=right){
		mid=(left+right)>>1;
		if(L[S[dep][mid]]>l){
			right=mid-1;
			begin=mid;
		}
		else left=mid+1;
	}
	left=0,right=S[dep].size()-1;
	int end=-1;
	while (left<=right) {
		mid=(left+right)>>1;
		if(L[S[dep][mid]]<r) {
			left=mid+1;
			end = mid;
		}else
			right=mid-1;
	}
	set<string> Name;
	for(int i=begin;i<=end;i++){
		Name.insert(name[S[dep][i]]);
	}
	return ans[make_pair(x,y)]=Name.size();
}
int main()
{
	int n,x,m,y;
	scanf("%d",&n);
	for(int i=1;i<=n;i++){
		scanf("%s%d",name[i],&x);
		e[x].push_back(i);
	}
	dfs(0,0);
	scanf("%d",&m);
	for(int i=0;i<m;i++){
		scanf("%d%d",&x,&y);
		printf("%d\n",solve(x,y,L[x],R[x]));
	}
}
