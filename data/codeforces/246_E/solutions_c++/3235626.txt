#include <iostream>
#include <fstream>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <cstring>
#include <algorithm>
#define mk make_pair
using namespace std;
const int maxn=2000*100+100;
int sz[maxn],d[maxn],cnt,num[maxn],n,m,rev[maxn];
string s[maxn];
vector <int> adj[maxn],h[maxn];
map <pair <int,int> ,int> mp[maxn];
void dfs(int v)
{
    sz[v]++;
    rev[cnt]=v;
    num[v]=cnt++;
    for(int i=0;i<adj[v].size();i++)
    {
        int tmp=adj[v][i];
        d[tmp]=d[v]+1;
        dfs(tmp);
        sz[v]+=sz[tmp];
        h[d[tmp]].push_back(num[tmp]);
    }
}
int get(int x,int y)
{
    y+=d[x];
    int l=lower_bound(h[y].begin(),h[y].end(),num[x])-h[y].begin();
    int r=lower_bound(h[y].begin(),h[y].end(),num[x]+sz[x])-h[y].begin();
    if(mp[y].find(mk(l,r))!=mp[y].end())
        return mp[y][mk(l,r)];
    set <string> q;
    for(int i=l;i<r;i++)
        q.insert(s[rev[h[y][i]]]);
    return mp[y][mk(l,r)]=q.size();
}
int main()
{
    ios_base::sync_with_stdio (false);
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        int x;
        cin>>s[i]>>x;
        adj[x].push_back(i);
    }
    dfs(0);
    cin>>m;
    for(int i=1;i<=m;i++)
    {
        int x,y;
        cin>>x>>y;
        cout<<get(x,y)<<endl;
    }

    return 0;
}
