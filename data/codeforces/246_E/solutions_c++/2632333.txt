#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
using namespace std;

#define maxn 100010
typedef pair<int,int> pii;
vector<int> adj[maxn];
vector< pii > point[maxn];
map< pii, int > vis;
int n, m, v, k,depth[maxn], pos[maxn][2], tot;
char s[maxn][23];

void Dfs(int k, int d) {
    pos[k][0] = ++tot;
    point[d].push_back(make_pair(tot, k));
    depth[k] = d;
    for (vector<int>::iterator p = adj[k].begin(); p != adj[k].end(); ++p) {
        Dfs(*p, d + 1);
    }
    pos[k][1] = ++tot;
}

int Work() {
        if(vis[make_pair(v,k)])
        return vis[make_pair(v,k)]-1;
    vector<pii>::iterator l,r;
    set <string> str;
    l=lower_bound(point[depth[v]+k].begin(),point[depth[v]+k].end(),make_pair(pos[v][0],maxn));
    r=lower_bound(point[depth[v]+k].begin(),point[depth[v]+k].end(),make_pair(pos[v][1],0));
    for( vector<pii>::iterator p=l;p!=r;++p){
        str.insert(s[(*p).second]);
    }
    return (vis[make_pair(v,k)]=str.size()+1)-1;
}

int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
        scanf("%s%d", &s[i], &k);
        adj[k].push_back(i);
    }
    Dfs(0, 0);
    scanf("%d", &m);
    for (int i = 1; i <= m; ++i) {
        scanf("%d%d", &v, &k);
        printf("%d\n", Work());
    }
    return 0;
}