#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <string>
#include <deque>

using namespace std;

int n, m, x, y;
string s[111111];
vector<int> tree[111111];
vector<int> q[111111];
vector<int> an[111111];
int ans[111111];

void unite (set<string> * s1, set<string> * s2) {
    if (s2->size() > s1->size()) unite(s2, s1), s1 = s2;
    else s1->insert(s2->begin(), s2->end());
}

deque<set<string>*>* dfs(int j) {
    deque<set<string>*>* d = new deque<set<string>*>;
    d->push_back(new set<string>() );
    for (int i=0; i<tree[j].size(); i++) {
        deque<set<string>*> * d1=dfs(tree[j][i]);
        d1->push_front(new set<string>);
        if (d1->size() > d->size()) swap(d1, d);
        for (int i=1; i<d1->size(); i++) {
            if ((*d)[i]->size() > (*d1)[i]->size()) (*d)[i]->insert((*d1)[i]->begin(), (*d1)[i]->end());
            else (*d1)[i]->insert((*d)[i]->begin(), (*d)[i]->end()), (*d)[i] = (*d1)[i];
        }
    }
    (*d)[0]->insert(s[j]);
    for (int i=0; i<q[j].size(); i++)
        if (d->size()>q[j][i])ans[an[j][i]] = (*d)[q[j][i]]->size();
        else ans[an[j][i]] = 0;
    return d;
}

int main()
{
    cin >> n;
    for (int i=1; i<=n; i++) cin >> s[i] >> x, tree[x].push_back(i);
    cin >> m;
    for (int i=0; i<m; i++) cin >> x >> y, q[x].push_back(y), an[x].push_back(i);
    dfs(0);
    for (int i=0; i<m; i++) cout << ans[i] << endl;
    return 0;
}
