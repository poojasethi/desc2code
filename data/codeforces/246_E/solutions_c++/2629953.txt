#include<iostream>
#include<iterator>
#include<map>
#include<set>
#include<string>
#include<utility>
#include<algorithm>
#include<vector>
using namespace std;
const int maxn=100010;
int n,t[maxn][2],cnt,fa,depth[maxn],v,k,m;
set<string>st;
string str[maxn];
vector<int>vt[maxn];
vector<pair<int,int> >dp[maxn];
map<pair<int,int>, int>mp;
void dfs(int x,int dep)
{
    t[x][0]=++cnt;
    depth[x]=dep;
    dp[dep].push_back(make_pair(cnt,x));
    for(vector<int> ::iterator it=vt[x].begin();it!=vt[x].end();++it)
        dfs(*it,dep+1);
    t[x][1]=++cnt;
}
int goo()
{
    if(mp.count(make_pair(v,k)))return mp[make_pair(v,k)];
    int tp=k+depth[v];
    vector<pair<int,int> >::iterator l=lower_bound(dp[tp].begin(),dp[tp].end(),
            make_pair(t[v][0],maxn)),r=lower_bound(dp[tp].begin(),dp[tp].end(),
            make_pair(t[v][1],0));
    st.clear();
    for(vector<pair<int,int> >::iterator it=l;it!=r;++it)
        st.insert(str[it->second]);
    return  mp[make_pair(v,k)]=st.size();
}
int main()
{
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        cin>>str[i]>>fa;
        vt[fa].push_back(i);
    }
    dfs(0,0);
    cin>>m;
    while(m--)
    {
        cin>>v>>k;
        cout<<goo()<<endl;
    }
    return 0;
}
