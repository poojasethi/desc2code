#include<cstdio>
#include<utility>
#include<map>
#include<cstring>
#include<string>
#include<vector>
#include<set>
#include<algorithm>
#include<iterator>
#include<iostream>
using namespace std;
#define maxn 100010

typedef pair<int, int> pii;
map<pii, int> vis;
set <string> app;
vector<int> adj[maxn];
vector< pii > point[maxn];

char name[maxn][23];
int pre[maxn], post[maxn], dep[maxn], tot, n, v, k, m; 

void Dfs(int u, int d) {
    pre[u]=++tot; dep[u]=d;
    point[d].push_back(make_pair(pre[u], u));
    for (vector<int>::iterator p=adj[u].begin(); p!=adj[u].end(); ++p)
        Dfs(*p, d+1);
    post[u] = ++tot;
}

int solve() {
    if (vis[make_pair(v, k)]) return vis[make_pair(v, k)] - 1;
    vector<pii>::iterator l, r; app.clear();
    l = lower_bound(point[dep[v] + k].begin(), point[dep[v] + k].end(), make_pair(pre[v], maxn));
    r = lower_bound(point[dep[v] + k].begin(), point[dep[v] + k].end(), make_pair(post[v], 0));
    for (vector<pii>::iterator p = l; p != r; ++p)
        app.insert(name[(*p).second]);
    return (vis[make_pair(v, k)] = app.size() + 1) - 1;
}

int main() {
    scanf("%d", &n);	
    for (int i=1, fa; i<=n; ++i) {
        scanf("%s%d", name[i], &fa);
        adj[fa].push_back(i);
    }
    Dfs(0, 0);
    scanf("%d", &m);
    while (m--) {
        scanf("%d%d", &v, &k);
        printf("%d\n", solve());
    }
    return 0;
}
