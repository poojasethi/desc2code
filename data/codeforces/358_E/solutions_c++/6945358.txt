#include <bits/stdc++.h>
using namespace std;
int A[1010][1010];
int vis[1010][1010];
int N,M;
int K;
int dx[] = {-1,0,1,0};
int dy[] = {0,-1,0,1}; 
int check(int x,int y)
{
	return x>=1&&y>=1&&y<=M&&x<=N;
}
void dfs(int i,int j)
{
	vis[i][j] = 1;
	for(int k = 0;k<4;k++)
	{
		int x = i + K*dx[k];
		int y = j + K*dy[k];
		if(!check(x,y))
			continue;
		for(int l = 1;l<=K;l++)
		{
			int xi = i + l*dx[k];
			int yi = j + l*dy[k];
			if(A[xi][yi]+vis[xi][yi]==0)
			{
				goto here;
			}
		}
		for(int l = 1;l<K;l++)
		{
			int xi = i + l*dx[k];
			int yi = j + l*dy[k];
			A[xi][yi] = 0;
		}
		if(!vis[x][y])
			dfs(x,y);
here:;
	}
}
int main()
{
	cin>>N>>M;
	pair<int,int> root;
	int Euler = 0;
	int X = 0,Y = 0;
	for(int i = 1;i<=N;i++)
	{
		for(int j = 1;j<=M;j++)
		{
			cin>>A[i][j];
			if(A[i][j]^1)
				continue;
			if(root==make_pair(0,0))
				root = make_pair(i,j);
		}
	}
	for(int i = 1;i<=N;i++)
	{
		for(int j = 1;j<=M;j++)
		{
			if(A[i][j]==0)
				continue;
			int degree = 0;
			int dir = 0;
			for(int k = 0;k<4;k++)
			{
				int xi = i + dx[k];
				int yi = j + dy[k];
				if(A[xi][yi])
				{
					dir|=(1<<k);
					degree+=1;
				}
			}
			if(dir!=5&&dir!=10)
			{
				X = __gcd(X,abs(root.first - i));
				Y = __gcd(Y,abs(root.second - j));
			}
			if(degree&1)
				Euler+=1;
		}
	}
	K = __gcd(X,Y);
	dfs(root.first,root.second);
	for(int i = 1;i<=N;i++)
	{
		for(int j = 1;j<=M;j++)
		{
			if(A[i][j]&&!vis[i][j])
			{
				cout<<-1<<endl;
				return 0;
			}
		}
	}
	if(K<=1||Euler>2)
	{
		cout<<-1<<endl;
		return 0;
	}
	for(int i = 2;i<=K;i++)
	{
		if(K%i==0)
			cout<<i<<" ";
	}
	cout<<endl;
	return 0;
}