#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
using namespace std;
const int maxn = 1002;
int cnt = 0, odd;
int sx = -1, sy = -1;
int xx, vis[maxn][maxn],row[maxn][maxn],col[maxn][maxn];
int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
int n, m;
bool ok(int a, int b, int x, int y)
{
    if(a==x)
    {
        if(y<b)swap(y,b);
        return (y-b+1)==(row[x][y]-row[x][b-1]);
    }
    else
    {
        if(x<a) swap(x,a);
        return (x-a+1)==(col[x][y]-col[a-1][y]);
    }
}
int dfs(int x, int y, int k)
{
    int ret = 2; int deg = 0;
    for (int i = 0; i < 4; i++)
    {
        int a = x + dir[i][0] * k;
        int b = y + dir[i][1] * k;
        if(a<1||a>n||b<1||b>m) continue;
        if(ok(a,b,x,y)) // avaliable
        {
            deg++;
            ret += k-1;
            if(vis[a][b]!=k)
            {
                vis[a][b] = k;
                ret+=dfs(a,b,k);
            }
        }
    }
    if(deg&1) odd++;
    return ret;
}
bool check(int k)
{
    vis[sx][sy] = k; odd = 0;
    int num = dfs(sx,sy,k);
    //cout << num << endl;
    //cout << odd << endl;

    if(num != 2*cnt) return false;
    if(odd == 0 || odd == 2) return true;
    return false;
}
int main()
{
    cin >> n >> m;
    for (int i = 1;i <= n; i++)
    {
        for (int j = 1;j <= m; j++)
        {
            cin >> xx;
            if(sx == -1&& xx==1) sx=i,sy=j;
            if(xx) cnt++;
            row[i][j] += row[i][j-1]+xx;
            col[i][j] += col[i-1][j]+xx;
        }
    }
    if(cnt <= 2) {cout << -1 << endl;return 0;}
    vector<int> ans;
    for (int k = 2; k <= n-1; k++)
    {
        if(check(k)) ans.push_back(k);
    }
    if(ans.size()!=0)
    {
        for (vector <int>::iterator it=ans.begin(); it!=ans.end(); it++)
        {
            cout << *it << " ";
        }
        cout << endl;
    }
    else
    {
        cout << -1 << endl;
    }
    return 0;
}
