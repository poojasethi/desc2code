#include <cmath>
#include <queue>
#include <cstdio>
#include <vector>
#include <cstring>
#include <utility>
#include <algorithm>

#define N 1000
#define down 0
#define righ 1

using namespace std;

vector<int> v;
bool a[N+10][N+10];
const int dx[]={1,-1,0,0},dy[]={0,0,1,-1};
int n,m,x,y,len,b[N+10][N+10],c[N+10][N+10];

inline void bfs(int k){
	memset(b,0,sizeof(b));
	memset(c,0,sizeof(c));
	queue<pair<int,int> > Q;
	Q.push(make_pair(x,y));
	b[x][y]=1;
	while (!Q.empty()){
		pair<int,int> t=Q.front();
		c[t.first][t.second]=1;
		Q.pop();
		for (int i=0;i<4;++i){
			int xx=t.first+dx[i]*k,yy=t.second+dy[i]*k;
			if (xx<1 || xx>n || yy<1 || yy>m || !a[t.first+dx[i]][t.second+dy[i]]) continue;
			for (int j=1;j<k;++j) b[t.first+dx[i]*j][t.second+dy[i]*j]=1;
			if (b[xx][yy]) continue;
			b[xx][yy]=1;
			Q.push(make_pair(xx,yy));
		}
	}
}

inline bool check(int k){
	bfs(k);
	for (int i=1;i<=n;++i)
		for (int j=1;j<=m;++j)
			if (a[i][j]!=b[i][j]) return 0;
	int odd=0;
	for (int i=1;i<=n;++i)
		for (int j=1;j<=m;++j)
			if (c[i][j]){
				int deg=0;
				for (int d=0;d<4;++d){
					int xx=i+dx[d]*k,yy=j+dy[d]*k;
					if (xx<1 || xx>n || yy<1 || yy>m || !a[i+dx[d]][j+dy[d]]) continue;
					deg++;
				}
				odd+=deg&1;
			}
	if (!odd || odd==2) return 1;else return 0;
}

int main(){
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;++i)
		for (int j=1;j<=m;++j) scanf("%d",&a[i][j]);
	for (int i=1;i<=m;++i){
		for (int j=1;j<=n;++j)
			if (a[j][i]){x=j,y=i;break;}
		if (x && y) break;
	}
	for (int i=1;i<=n;++i)
		for (int j=1;j<=m;++j)
			if (a[i][j]) len=max(len,b[i][j]=b[i][j-1]+1);
	for (int i=1;i<=m;++i)
		for (int j=1;j<=n;++j)
			if (a[j][i]) len=max(len,c[i][j]=c[i][j-1]+1);
	len--;
	if (len>1 && check(len)) v.push_back(len);
	for (int i=2;i<=(int)sqrt(len);++i)
		if (len%i==0){
			if (check(i)) v.push_back(i);
			if (i!=len/i) if (check(len/i)) v.push_back(len/i);
		}
	sort(v.begin(),v.end());
	if (!v.size()) puts("-1");
	else for (int i=0;i<v.size();++i) printf("%d%c",v[i],i==v.size()-1?'\n':' ');
	return 0;
}