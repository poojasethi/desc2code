//In the name of God
#include <algorithm>
#include <iostream>
using namespace std;
const int N = 1003;

int n, m, ans, r[N], c[N], cnt;
bool mark[N][N], flag, a[N][N];

int gcd(int a, int b) { return b? gcd(b, a % b): a; }
bool node(int i, int j) {
	if (!mark[i][j])
		return false;
	int t = mark[i - 1][j] + mark[i][j - 1] + mark[i + 1][j] + mark[i][j + 1];
	if (!t)
		flag = true;
	if (t % 2)
		return cnt++, true;
	return (mark[i - 1][j] || mark[i + 1][j]) && (mark[i][j - 1] || mark[i][j + 1]);
}
void dfs(int x, int y) {
	a[x][y] = true;
	if (mark[x][y + 1] && !a[x][y + 1])
		dfs(x, y + 1);
	if (mark[x][y - 1] && !a[x][y - 1])
		dfs(x, y - 1);
	if (mark[x + 1][y] && !a[x + 1][y])
		dfs(x + 1, y);
	if (mark[x - 1][y] && !a[x - 1][y])
		dfs(x - 1, y);
}
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			cin >> mark[i][j];
	fill(r, r + N, -1);
	fill(c, c + N, -1);
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if (node(i, j)) {
				if (r[i] != -1)
					ans = gcd(j - r[i], ans);
				r[i] = j;
				if (c[j] != -1)
					ans = gcd(i - c[j], ans);
				c[j] = i;
			}
	for (int i = 1, tmp = 0; i <= n; i++)
		for (int j = 1; j <= m; j++)
			if (mark[i][j])
				if (!tmp++)
					dfs(i, j);
				else if (!a[i][j])
					flag = true;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j < i; j++)
			if (r[i] != -1 && r[j] != -1)
				ans = gcd(j - i, gcd(abs(r[i] - r[j]), ans));
	if (cnt > 2 || cnt == 1 || ans == 1 || flag)
		cout << -1;
	else
		for (int i = 2; i <= ans; i++)
			if (!(ans % i))
				cout << i << ' ';
	cout << '\n';
	return 0;
}
