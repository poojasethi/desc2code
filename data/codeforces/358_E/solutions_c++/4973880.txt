#include <cstdio>
#include <algorithm>
#include <cstring>
#include <queue>
#define N 1000
using namespace std;

int go[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
int sq[N][N], n, m, sum, v, s, x0 = -1, y0 = -1, k;

bool sim(int x, int y, int z){
    for(int i = 1; i <= k; ++i){
        x += go[z][0], y += go[z][1];
        if(!sq[y][x])
            return false;
        if(sq[y][x] != k && i != k)
            ++s, sq[y][x] = k;
    }
    return true;
}

bool dfs(int x, int y){
    bool f = true;
    if(sq[y][x] == k)
        f = false;
    else
        sq[y][x] = k, ++s;
    int t = 0;
    for(int z = 0; z < 4; ++z){
        int nx = x+go[z][0], ny = y+go[z][1];
        if(ny > -1 && ny < n && nx > -1 && nx < m && sq[ny][nx]){
            if(sq[ny][nx] == k){
                ++t;
                continue;
            }
            nx = x+go[z][0]*k, ny = y+go[z][1]*k;
            if(nx < 0 || nx >= m || ny < 0 || ny >= n || !sim(x,y,z) || !dfs(nx,ny))
                return false;
            ++t;
        }
    }
    if(t&1 && f)
        ++v;
    return true;
}

int main(){
    scanf("%d %d", &n, &m);
    for(int i = 0; i < n; ++i)
        for(int j = 0; j < m; ++j){
            scanf("%d", &sq[i][j]);
            if(sq[i][j]){
                ++sum;
                if(y0 == -1)
                    y0 = i, x0 = j;
            }
        }
    if(sum == 1){
        puts("-1");
        return 0;
    }
    bool f = false;
    int p = max(m, n);
    for(k = 2; k <= p; ++k){
        s = 0, v = 0;
        if(dfs(x0, y0) && (!v || v == 2) && sum == s)
            printf("%d ", k), f = true;
    }
    if(!f)
        puts("-1");
}

