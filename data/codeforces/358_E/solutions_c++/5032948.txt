#include <algorithm>
#include <iostream>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <math.h>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>
using namespace std;
    
/*-------------------------Template----*/
#define N  1024
#define E  200000
#define ll long long
#define SQ(x)     ((x)*(x))
#define ALL(x)     x.begin(),x.end()
#define CLR(x,a) memset(x,a,sizeof(x))
#define maxAry(a,n) max_element(a,a+(n))
#define minAry(a,n) min_element(a,a+(n))
typedef pair<int,int> PI;
const int INF=0x3fffffff;
const int MOD   =1000000007;
const double EPS=1e-9;
const int dx[]  = {-1, 1, 0, 0}; 
const int dy[]  = {0, 0, -1, 1};
/*----------------------end Template----*/

bool g[N][N];
int sx,sy,n,m;

void bfs()
{
	queue<PI > que;
	que.push((PI){sx,sy});
	while(!que.empty()){
		PI u=que.front();
		que.pop();
		g[u.first][u.second]=false;
		for(int i=0;i<4;i++){
			int x=u.first+dx[i], y=u.second+dy[i];
			if(x<0 || x>=n || y<0 || y>=m) continue;
			if(g[x][y]){
				g[x][y]=false;
				que.push((PI){x,y});
			}			
		}
	}
}

int main()
{
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			scanf("%d",&g[i][j]);
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)if(g[i][j]){
				sx=i,sy=j,i=n;
				break;
		}
	int d=0,odd=0;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)if(g[i][j]){
			int mask=0;
			for(int k=0;k<4;k++){
				int x=i+dx[k], y=j+dy[k];
				if(x<0 || x>=n || y<0 || y>=m) continue;
				if(g[x][y]) mask|=1<<k;
			}
			if(mask==3 || mask==12) continue;
			d=__gcd(d,abs(i-sx));
			d=__gcd(d,abs(j-sy));
			int cnt=0;
			for(int k=0;k<4;k++) if(mask&(1<<k)) cnt++;
			if(cnt%2) odd++;
		}
	bfs();
	bool connect=false;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			connect|=g[i][j];
	if(d<=1 || odd>2 || connect) puts("-1");
	else{
		for(int i=2;i<=d;i++) if(d%i==0) printf("%d ", i);
		puts("");
	}
	return 0;
}
