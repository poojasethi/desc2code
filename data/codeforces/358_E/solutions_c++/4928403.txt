#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;

const int MAXN=1005;

int N,M,X,Y,K,tot,deg,vis[MAXN][MAXN],Rsum[MAXN][MAXN],Csum[MAXN][MAXN],dx[4]={0,0,-1,1},dy[4]={-1,1,0,0};

int sum(int x,int y,int nx,int ny)
{
    if(x>nx) swap(x,nx);
    if(y>ny) swap(y,ny);
    if(x==nx) return Rsum[x][ny]-Rsum[x][y-1];
    else return Csum[nx][y]-Csum[x-1][y];
}

int dfs(int x,int y)
{
    vis[x][y]=K;
    int ret=2,vd=0;
    for(int k=0;k<4;++k)
    {
        int nx=x+dx[k]*K,ny=y+dy[k]*K;
        if(nx>=1&&ny>=1&&nx<=N&&ny<=M&&sum(x,y,nx,ny)==K+1)
        {
            ret+=K-1;
            ++vd;
            if(vis[nx][ny]!=K) ret+=dfs(nx,ny);
        }
    }
    deg+=vd&1;
    return ret;
}

int main()
{
    cin>>N>>M;
    for(int i=1;i<=N;++i)
    {
        for(int j=1;j<=M;++j)
        {
            int t;
            cin>>t;
            if(t&&!X) X=i,Y=j;
            Csum[i][j]=Csum[i-1][j]+t;
            Rsum[i][j]=Rsum[i][j-1]+t;
            tot+=t;
        }
    }
    if(tot==1) {cout<<-1<<endl;return 0;}
    int f=1;
    for(K=2;K<=N;++K)
    {
        deg=0;
        if(dfs(X,Y)==tot*2&&(deg==0||deg==2))
        {
            cout<<K<<" ";
            f=0;
        }
    }
    if(f) cout<<-1;
    cout<<endl;
    return 0;
}
