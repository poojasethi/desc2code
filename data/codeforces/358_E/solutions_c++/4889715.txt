#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<ctime>
#include<map>
#include<string>
#include<vector>
#include<set>

using namespace std;
#define For(i,l,r) for (int i = l; i <= r; ++i)
#define Cor(i,l,r) for (int i = l; i >= r; --i)
#define Fill(a,b) memset(a,b,sizeof(a))
#define FI first
#define SE second
#define MP make_pair
#define PII pair<int,int>
#define flt double
#define INF (0x3f3f3f3f)
#define MaxN 1020300
#define MaxNode 1020304
#define MD 1000000007
#define UPD(a,b) { a = max(a,(b)); }

const int pi[] = {0,1,0,-1};
const int pj[] = {1,0,-1,0};

int n,m,A[1111][1111],u[1111][1111],l[1111][1111],vis[1111][1111];
int can[6];
PII q[MaxN];

int main() {
	//freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
	cin >> n >> m;
	Fill(A,0);
	For(i,1,n) For(j,1,m) scanf("%d",&A[i][j]);
	Fill(vis,0); int cnt = 0; 
	For(i,1,n) For(j,1,m) if (!vis[i][j] && A[i][j] == 1) {
		++cnt;
		int hd = 0, tl = 1;
		vis[i][j] = true; q[1] = MP(i,j);
		while (hd < tl) {
			PII vex = q[++hd];
			For(p,0,3) {
				int ni = vex.FI + pi[p], nj = vex.SE + pj[p];
				if (!vis[ni][nj] && ni && nj && ni <= n && nj <= m && A[ni][nj] == 1) {
					vis[ni][nj] = true;
					q[++tl] = MP(ni,nj);
				}
			}
		}
	}
	if (cnt > 1) {
		puts("-1"); return 0;
	}
	int odd = 0,GCD = 0;
	For(i,1,n) For(j,1,m) {
		if (!A[i][j]) {
			l[i][j] = u[i][j] = 0; continue ;
		}
		l[i][j] = l[i][j - 1] + 1;
		u[i][j] = u[i - 1][j] + 1;
		Fill(can,0);
		int sm = 0;
		For(p,0,3) {
			int ni = i + pi[p], nj = j + pj[p];
			if (A[ni][nj]) can[p] = true;
			sm += can[p];
		}
		if (sm == 2 && ((can[0] && can[2]) || (can[1] && can[3]))) continue ;
		odd += sm & 1;
		GCD = __gcd(GCD,l[i][j] - 1);
		GCD = __gcd(GCD,u[i][j] - 1);
	}
	if (GCD <= 1 || (odd != 0 && odd != 2)) {
		puts("-1"); return 0;
	}
	For(i,2,max(n,m)) if (GCD % i == 0) printf("%d ",i); puts("");
	return 0;
}
