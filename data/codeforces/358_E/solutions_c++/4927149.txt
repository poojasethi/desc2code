#include <cmath>
#include <map>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>
#include <bitset>
#include <memory.h>
#include <functional>
#include <queue>
#include <fstream>
#include <ctime>
#include <deque>
#include <utility>
#include <stack>
#include <sstream>
#include <list>
#include <cctype> 
#include <numeric> 
#include <iomanip>
using namespace std;

typedef pair<int, int> Pii;
#define x first
#define y second
#define mp make_pair

typedef long long LL;

const int MAXN = 1000 + 10, dir[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

int n, m, sx, sy, cnt, tot, sumr[MAXN][MAXN], sumc[MAXN][MAXN], vis[MAXN][MAXN];

void init()
{
	scanf("%d%d", &n, &m);
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= m; ++j)
		{
			int x;
			scanf("%d", &x);
			if (x && !sx)
				sx = i, sy = j;
			tot += x;
			sumr[i][j] = sumr[i][j - 1] + x;
			sumc[i][j] = sumc[i - 1][j] + x;
		}
}
int idx;
int sum(int xl, int yl, int xr, int yr)
{
	if (xl > xr) swap(xl, xr);
	if (yl > yr) swap(yl, yr);
	return (xl == xr) ? (sumr[xl][yr] - sumr[xl][yl - 1]) : (sumc[xr][yl] - sumc[xl - 1][yl]);
}
int DFS(int x, int y)
{
	vis[x][y] = idx;
	int Tohka = 2, d = 0;
	for (int i = 0; i < 4; ++i)
	{
		int nx = x + dir[i][0] * idx, ny = y + dir[i][1] * idx;
		if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && sum(x, y, nx, ny) == idx + 1)
		{
			++d;
			Tohka += idx - 1;
			if (vis[nx][ny] != idx)
				Tohka += DFS(nx, ny);
		}
	}
	cnt += (d & 1);
	return Tohka;
}
void solve()
{
	if (tot == 1)
		puts("-1"), exit(0);
	bool flag = true;
	for (int i = 2; i <= n; ++i)
	{
		idx = i;
		cnt = 0;
		if (DFS(sx, sy) == tot * 2 && (cnt == 0 || cnt == 2))
		{
			printf("%d ", i);
			flag = false;
		}
	}
	if (flag) puts("-1");
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
#endif
	init();
	solve();
	fclose(stdin);
	fclose(stdout);
	return 0;
}
