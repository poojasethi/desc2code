#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <map>
#include <set>

using namespace std;

int dx[] = {1,0,-1,0};
int dy[] = {0,1,0,-1};

int gcd( int a, int b ){
  if( b == 0 ) return a;
  return gcd(b,a%b);
}

const int tmax = (int)1e3 + 100;
int mat[tmax][tmax];
int deg[tmax][tmax];
bool is_start[tmax][tmax];
bool visited[tmax][tmax];

void fill( int x, int y ){
  if( visited[x][y] ) return;
  visited[x][y] = true;
  for( int k = 0; k < 4; k++)
    if( mat[x + dx[k]][y + dy[k]] == 1 ) fill(x+dx[k],y+dy[k]);
}

int main(){
  int n,m;
  scanf("%d %d", &n, &m);
  for( int i = 1; i <= n; i++)
    for( int j = 1; j <= m; j++)
      scanf("%d", &mat[i][j]);
  int tot = 0;
  vector < pair < int, int > > starts;
  int count_comp = 0;
  for( int i = 1; i <= n; i++)
    for( int j = 1; j <= m; j++){
      if( !visited[i][j] && mat[i][j] == 1 ){
    count_comp++;
    fill(i,j);
      }
    }
  if( count_comp > 1 ){
    printf("-1\n");
    return 0;
  }
  for( int i = 1; i <= n; i++){
    for( int j = 1; j <= m; j++){
      if( mat[i][j] == 0 ) continue;
      int x = i, y = j;
      int cc = 0;
      int hor = 0;
      for( int k = 0; k < 4; k++)
    if( mat[x + dx[k]][y + dy[k]] == 1 ) cc++, hor += k%2;
      tot += cc%2;
      if( cc == 2 && hor%2 == 0 ) continue;
      starts.push_back(make_pair(i,j));
      is_start[i][j] = true;
    }
  }
  if( tot > 2 ){
    printf("-1\n");
    return 0;
  }
  int total_ans = 0;
  for( int i = 0; i < starts.size(); i++){
    int x = starts[i].first;
    int y = starts[i].second;
    for( int k = 0; k < 4; k++){
      int cx = dx[k];
      int cy = dy[k];
      if( mat[x + cx][y + cy] == 0 ) continue;
      int sz = 1;
      int nx = x + cx;
      int ny = y + cy;
      while( mat[nx][ny] == 1 ){
    nx += cx;
    ny += cy;
    sz++;
      }
      total_ans = gcd(total_ans,sz - 1);
    }
  }
  if( total_ans <= 1 ){
    printf("-1\n");
    return 0;
  }
  for( int i = 2; i <= total_ans; i++)
    if( total_ans % i == 0 ) printf("%d ", i);
  printf("\n");
  return 0;
}
