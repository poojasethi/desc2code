#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int dirx[4] = {0, 0, 1, -1};
const int diry[4] = {1, -1, 0, 0};

bool map[1005][1005]={0}, vis[1005][1005]={0}, value[1000][1000]={0};
int d[1005][1005]={0}, p[1000005]={0};
vector<int> q;
int n, m, k=1;

bool v(int x, int y)
{
	int flag=0;
	for(int i=0; i<4; i++)
	{
		if(x+dirx[i]<0 || y+diry[i]<0 || x+dirx[i]>=n || y+diry[i]>=m || map[x+dirx[i]][y+diry[i]]==0) continue;
		flag|=(1<<i);
	}
	if(flag==0 || flag==7 || flag==15 || flag==11 || flag==13|| flag==14 || flag==5 || flag==6 || flag==9 || flag==10 || flag==1 || flag==2 || flag==4 || flag==8) return true;
	return false;
}

void dfs(int x, int y)
{
	p[d[x][y]]=0;
	for(int i=0; i<4; i++)
	{
		int _x=x+dirx[i], _y=y+diry[i], len=1;
		if(_x<0 || _y<0 || _x>=n || _y>=m) continue;
		if(map[_x][_y]==0) continue;
		p[d[x][y]]++;
		while(map[_x][_y])
		{
			if(v(_x, _y)) 
			{
				if(!d[_x][_y]) 
				{
					d[_x][_y]=k++;
					dfs(_x, _y);
				}
				q.push_back(len);
				break;
			}
			len++, _x+=dirx[i], _y+=diry[i];
		}
	}
}

int gcd(int a, int b) { return b==0?a:gcd(b, a%b); }

int main()
{
	cin>>n>>m;
	for(int i=0; i<n; i++)
		for(int j=0; j<m; j++) cin>>map[i][j];
	for(int i=0; i<n; i++)
		for(int j=0; j<m; j++)
		{
			if(map[i][j]==0 || d[i][j]) continue;
			if(v(i, j))
			{
				if(k>1) { cout<<-1<<endl; return 0; }
				d[i][j]=k++;
				dfs(i, j);
			}
		}
	int sum=0;
	if(k==1 || k==2) { cout<<-1<<endl; return 0; }
	for(int i=1; i<k; i++) sum+=(p[i]%2);
	if(k>1 && (sum==0 || sum==2))
	{
		sort(q.begin(), q.end());
		int res=q[0];
		for(int i=1; i<q.size(); i++) res = gcd(q[i], res);
		if(res<2) { cout<<"-1"<<endl; return 0; }
		for(int i=2; i<=res; i++)
			if(res%i==0) cout<<i<<" "; cout<<endl;
	}
	else cout<<"-1"<<endl;
	return 0;
}
