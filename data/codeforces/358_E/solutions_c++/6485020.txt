#include <bits/stdc++.h>
using namespace std;
#define FREP(b) for(int i=0;i<b;i++)
#define REP(a,b,c) for(int a=b;a<c;a++)
#define asd(x) cout << "Here for " << #x << " :" <<x << endl;
#define asdf(x, y)  cout << "Here FOR " << #x << " :" << x << " " << #y  << " :" << y << endl;
typedef pair<int,int> ii;
typedef long long LL;
int A[1008][1008], n, m, total = 0, cnt;
int hsum[1008][1008], vsum[1008][1008];
int visited[1008][1008];
int DX[4] = {0,0,1,-1}, DY[4] = {1,-1,0,0};
int dist(int sx, int sy, int dx, int dy){
    if(sx > dx) swap(sx, dx);
    if(sy > dy) swap(dy, sy);
    if(sx == dx) return hsum[dx][dy] - hsum[dx][sy];
    return vsum[dx][dy] - vsum[sx][dy];
}

bool valid(int x, int y, int &k){
    return x>=1 && x <= n && y>=1 && y <= m;
}
int dfs(int sx, int sy, int &k){

    int ret = 2, degree = 0;
    visited[sx][sy] = k;
//    printf("Here for %d %d %d\n",sx,sy,k);
    FREP(4){
        int dx = sx +  k*DX[i], dy = sy + k*DY[i];
//        asdf(dx, dy);
    //    if(dx == 5 &&dy == 3){
      //      asd(dist(sx, sy, dx, dy));
        //}
        if(!valid(dx, dy, k) || !(dist(sx, sy, dx, dy) == k)) continue;
        ret += k-1, degree++;
        if(visited[dx][dy]!=k)  ret += dfs(dx, dy, k);
    }
    if(degree%2) cnt++;
  //  cout << "=============\n";
    return ret;
}


void solve(int no, int sx, int sy){

    bool solved = false;
    if(total == 1){
        cout << -1 << endl; return;
    }
    //no = 2;
    for(int k = 2; k <= no; k++){
//        if(no%k) continue;
        cnt = 0;
        if(dfs(sx, sy, k) == 2*total && (cnt == 0 || cnt == 2)){
            printf("%d ", k);
            solved = true;
        }
    }
    if(!solved) cout << -1;
    cout << endl;
} 
int main()
{
    int x=0,y;
    cin >> n >> m;
    REP(i,1,n+1) REP(j,1,m+1){
        scanf("%d", &A[i][j]);
        total += A[i][j];
        if(A[i][j] == 1 && !x) x = i, y = j;
    }
    int maxx = 0;
    REP(i,1,n+1) REP(j,1,m+1) hsum[i][j] = hsum[i][j-1] + (A[i][j] == 1), maxx = max(maxx, hsum[i][j]);
    REP(j,1,m+1) REP(i,1,n+1) vsum[i][j] = vsum[i-1][j] + (A[i][j] == 1), maxx = max(maxx, vsum[i][j]);
    
    solve(max(n,m),x,y);
    return 0;
}

