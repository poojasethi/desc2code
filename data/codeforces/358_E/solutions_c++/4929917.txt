#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#define FOR(i,p,k) for(int i = (p);i<(k);i++)
typedef long long int LL;
using namespace std;
int n,m;
bool s[1007][1006];
bool odw[1007][1007];
vector<pair<int,int> >kol;
int kx[4]={0,1,0,-1};
int ky[4]={1,0,-1,0};
bool in(int x , int y)
{
	if(x>=1 && x<=n && y>=1 && y<=m && s[x][y]==1)
		return 1;
	return 0;
}
void bfs(int x,int y)
{
	kol.push_back(make_pair(x,y));
	odw[x][y]=1;
	FOR(i,0,kol.size())
	{
		int xx = kol[i].first;
		int yy = kol[i].second;
		FOR(i,0,4)
			if(in(xx+kx[i],yy+ky[i]))
			if(odw[xx+kx[i]][yy+ky[i]]==0)
			{
				odw[xx+kx[i]][yy+ky[i]]=1;
				kol.push_back(make_pair(xx+kx[i],yy+ky[i]));	
			}
	}
}
bool spr()
{
	bool ok=1;
	FOR(i,1,n+1)
	FOR(j,1,m+1)
		if(s[i][j]==1 && odw[i][j]==0)
			ok=0;
	return ok;
}

void dane()
{
	cin>>n>>m;
	FOR(i,1,n+1)
		FOR(j,1,m+1)
			cin>>s[i][j];
	int odp =0;
	FOR(i,1,n+1)
		FOR(j,1,m+1)
		{
			int sum = s[i+1][j]+s[i-1][j]+s[i][j+1]+s[i][j-1];
			if(sum%2==1 && s[i][j]==1)
				odp++;	
		}
	int naj = 0;
	int ile = 0;	
	FOR(i,1,n+1)
	{
		FOR(j,1,m+1)
		{
			if(s[i][j]==1)
			ile++;
			else
			ile=0;
			if((s[i-1][j]!=0 || s[i+1][j]!=0 ||s[i][j+1]==0)&&ile>1)
			{
				naj=__gcd(naj,ile-1);
				ile=1;
			}
		}
		ile=0;
	}
	ile=0;
	FOR(j,1,m+1)
	{
		FOR(i,1,n+1)
		{
			if(s[i][j]==1)
			 ile++;
			else
			 ile=0;
			if((s[i][j+1]!=0 || s[i][j-1]!=0||s[i+1][j]==0)&&ile>1)
			{
				naj=__gcd(naj,ile-1);
				ile=1;
			}
		}
		ile=0;
	}
	int px,py;
	FOR(j,1,m+1)
		FOR(i,1,n+1)
		if(s[i][j]==1)
		{px=i;py=j;break;}

	bfs(px,py);
	if(odp>2 || naj<=1||!spr())
	{
		cout<<"-1\n";
		return;
	}
	FOR(i,2,naj+1)
		if(naj%i==0)
			cout<<i<<" ";
	cout<<"\n";
}

int main()
{	
	dane();
	return 0;
}
