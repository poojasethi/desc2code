#include<stdio.h>
#include<algorithm>
#include<stack>
#include<vector>
#include<iostream>
#define M 500000
using namespace std;
int lcp[M + 5] , sa[M + 5] , label[M + 5] , tmp[M + 5];
int k , n , ff[M + 5] , toRight[M + 5];
long long ans;
stack<int> st;
char s[M + 5];
vector < int > all[2*M + 5];
bool cmp(int x,int y){
	if(label[x] == label[y]){
		x += (1<<k);
		y += (1<<k);
		if(x <= n && y <= n)	return (label[x] < label[y]);
		return (x > y);
	}
	return (label[x] < label[y]);
}
void suffix_array(){
	for(int i = 1 ; i <= n ; i++){
		sa[i] = i;
		label[i] = (s[i - 1] == '(' ? 1 : 2);
	}
	for(;;k++){
		sort(sa + 1 , sa + 1 + n , cmp);
		tmp[sa[1]] = 1;
		for(int i = 2 ; i <= n ; i++)
			if(cmp(sa[i - 1] , sa[i]))	tmp[sa[i]] = tmp[sa[i - 1]] + 1;
			else tmp[sa[i]] = tmp[sa[i - 1]];
		for(int i = 1 ; i <= n ; i++)	label[i] = tmp[i];
		if(label[sa[n]]	== n)	break;	
	}
	int c = 0;
	for(int i = 1 ; i <= n ; i++){
		if(label[i] == n)	continue;
		int j = sa[label[i] + 1];
		while(i + c <= n && j + c <= n && s[i + c - 1] == s[j + c - 1])	c++;
		lcp[i] = c ;	if(c > 0)	c--;
	}
}
void cal(){
	for(int i = 1 ; i <= n ; i++)	ff[i] = ff[i - 1] + (s[i - 1] == '(' ? 1 : -1);
	for(int i = 0 ; i <= n ; i++){
		all[ff[i] + M].push_back(i);
		while(!st.empty() && ff[st.top()] > ff[i]){
			toRight[st.top()] = i; st.pop();
		}
		st.push(i);
	}
	while(!st.empty()){
		toRight[st.top()] = n + 1;
		st.pop();
	}
	for(int i = 1 ; i <= n ; i++){
		int hi = toRight[i - 1] - 1;
		int lo = i + lcp[i];
		if(lo > hi) continue;
		int x = ff[i - 1] + M;
		ans += upper_bound(all[x].begin() , all[x].end() , hi)	-	upper_bound(all[x].begin() , all[x].end() , lo - 1);
	}
	cout<<ans;
}
main(){
//	freopen("test.inp","r",stdin);
	scanf("%d",&n);
	scanf("%s",s);
	suffix_array();
	cal();
}