#include <cstring>
#include <cstdio>
#include <algorithm>
#include <vector>

using namespace std;
typedef long long LL;

const int MAXN = 5e5 + 5;

vector<int> Num[MAXN * 2 + 5];
int N, M, Log[MAXN], Rmq[MAXN * 2 + 5][21], rank[MAXN], tp[MAXN], tax[MAXN], SA[MAXN], Height[MAXN];
char S[MAXN];

void Rsort() {
	for (int i = 0; i <= M; i ++) tax[i] = 0;
	for (int i = 1; i <= N; i ++) tax[rank[tp[i]]] ++;
	for (int i = 1; i <= M; i ++) tax[i] += tax[i - 1];
	for (int i = N; i >= 1; i --) SA[tax[rank[tp[i]]] --] = tp[i];
}

bool cmp(int *f, int x, int y, int w) { return f[x] == f[y] && f[x + w] == f[y + w];}

void Suffix() {
	for (int i = 1; i <= N; i ++) tp[i] = i, rank[i] = S[i];
	M = max(')', '('), Rsort();
	for (int i, p = 0, w = 1; p < N; w += w, M = p) {
		for (i = N - w + 1, p = 0; i <= N; i ++) tp[++ p] = i;
		for (i = 1; i <= N; i ++) if (SA[i] > w) tp[++ p] = SA[i] - w;
		Rsort(), swap(rank, tp), p = rank[SA[1]] = 1;
		for (int i = 2; i <= N; i ++) rank[SA[i]] = cmp(tp, SA[i], SA[i - 1], w) ? p : ++ p;
	}
	
	int j, k = 0;
	for (int i = 1; i <= N; Height[rank[i ++]] = k)
		for (k = k ? k - 1 : k, j = SA[rank[i] - 1]; S[j + k] == S[i + k]; k ++);
}

void MakeRmq() {
	for (int i = 0, j = 1; j <= N; i ++, j *= 2) Log[j] = i;
	for (int i = 1; i <= N; i ++) Log[i] = max(Log[i], Log[i - 1]);
	for (int i = 1; i <= N; i ++) Rmq[i][0] = Rmq[i - 1][0] + (S[i] == '(' ? 1 : -1);
	for (int j = 1; j <= 20; j ++)
		for (int i = 1; i + (1 << (j - 1)) - 1 <= N; i ++)
			Rmq[i][j] = min(Rmq[i][j - 1], Rmq[i + (1 << (j - 1))][j - 1]);
}

int Get(int L, int R) {
	int Len = Log[R - L + 1];
	return min(Rmq[L][Len], Rmq[R - (1 << Len) + 1][Len]);
}

void Prepare() {
	Suffix();
	MakeRmq();
	for (int i = 1; i <= N; i ++) 
		Num[Rmq[i][0] + MAXN].push_back(i);
}

int GetSide(int L, int R1, int R2) {
	int Ans = 0;
	while (R1 <= R2) {
		int Mid = (R1 + R2) / 2;
		if (Get(L, Mid) - Rmq[L - 1][0] < 0) R2 = Mid - 1; else Ans = Mid, R1 = Mid + 1;
	}
	return Ans;
}

void Solve() {
	LL Ans = 0;
	for (int i = 1; i <= N; i ++) {
		int L = (Height[i] == 0) ? SA[i] + 1 : SA[i] + Height[i];
		int R = GetSide(SA[i], L, N);
		if (R == 0) continue;
		int t = Rmq[SA[i] - 1][0] + MAXN;
		Ans += upper_bound(Num[t].begin(), Num[t].end(), R) - lower_bound(Num[t].begin(), Num[t].end(), L);
	}
	printf("%I64d\n", Ans);
}

int main() {	
	scanf("%d", &N);
	scanf("%s", S + 1);
	
	Prepare();
	Solve();
}