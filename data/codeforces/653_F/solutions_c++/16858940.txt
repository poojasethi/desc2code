#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
inline unsigned int getuint(){
	char w=getchar();
	while (w<'0'||'9'<w) w=getchar();
	unsigned int ans=0;
	for (;'0'<=w&&w<='9';w=getchar()) ans=ans*10+w-'0';
	return ans;
}
const int MAXN=500005;
char str[MAXN];
int sum[MAXN], nextle[MAXN];
std::vector<int> vec[MAXN<<1];
int sa[MAXN], rank[MAXN], height[MAXN];
void suffix_array(int n, int m){
	static int c[MAXN], tmp[2][MAXN<<1], *x=tmp[0], *y=tmp[1];
	for (int i=1;i<=n;i++) c[x[i]=str[i]]++;
	for (int i=2;i<=m;i++) c[i]+=c[i-1];
	for (int i=n;i;i--) sa[c[x[i]]--]=i;
	for (int k=1, l=0;k<n;k<<=1, l=0){
		for (int i=n-k+1;i<=n;i++) y[++l]=i;
		for (int i=1;i<=n;i++) if (sa[i]>k) y[++l]=sa[i]-k;
		memset(c+1, 0, sizeof(*c)*m);
		for (int i=1;i<=n;i++) c[x[i]]++;
		for (int i=2;i<=m;i++) c[i]+=c[i-1];
		for (int i=n;i;i--) sa[c[x[y[i]]]--]=y[i];
		std::swap(x, y), x[sa[1]]=m=1;
		for (int i=2;i<=n;x[sa[i++]]=m) if (y[sa[i-1]]!=y[sa[i]]||y[sa[i-1]+k]!=y[sa[i]+k]) m++;
		if (n==m) break;
	}
	for (int i=1;i<=n;i++) rank[sa[i]]=i;
	for (int i=1, j, k=0;i<=n;height[rank[i++]]=k?k--:0) for (j=sa[rank[i]-1];str[i+k]==str[j+k];k++);
}
int main(){
	//freopen("ex.in", "r", stdin);
	int n=getuint();
	scanf("%s", str+1);
	*sum=n;for (int i=1;i<=n;i++) sum[i]=sum[i-1]+(str[i]=='('?1:-1);
	for (int i=n;~i;i--){
		static int stack[MAXN], j;
		for (;j&&sum[i]<=sum[stack[j]];j--);
		nextle[i]=j?stack[j]:n+1;
		stack[++j]=i;
	}
	for (int i=1;i<=n;i++) vec[sum[i]].push_back(i);
	for (int i=1;i<=n;i++) str[i]-='('-1;
	suffix_array(n, 2);
	long long ans=0;
	for (int i=1;i<=n;i++){
		//sa[i]+height[i]~n
		int t=sa[i]-1, l=sa[i]+height[i], r=nextle[t]-1;
		if (l>r) continue;
		l=std::lower_bound(vec[sum[t]].begin(), vec[sum[t]].end(), l)-vec[sum[t]].begin();
		r=std::upper_bound(vec[sum[t]].begin(), vec[sum[t]].end(), r)-vec[sum[t]].begin();
		ans+=r-l;
	}
	printf("%I64d\n", ans);
	return 0;
}
