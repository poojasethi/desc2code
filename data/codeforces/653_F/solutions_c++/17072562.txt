#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<vector>
#include<queue>
#include<map>
#include<set>
using namespace std;
const int maxn=500100;
typedef pair <int,int> p;
typedef long long ll;
vector<p>vec[maxn];
char str[maxn];
int rank[maxn],sa[maxn],lcp[maxn],cnt[maxn],tg[maxn],start[maxn],memo[maxn],to[maxn][20],n;
void build()
{
	for(int i=0;i<n;i++)
		rank[i]=str[i]=='('?1:0;
	for(int k=1;k<=n;k<<=1)
	{
		for(int i=0;i<=n;i++) vec[i].clear();
		memset(cnt,0,sizeof(cnt));
		for(int i=0;i<n;i++)
		{
			int to=i+k<n?rank[i+k]:-1;
			vec[to+1].push_back(p(rank[i],i));
			cnt[rank[i]]++;
		}
		for(int i=1;i<=n;i++) cnt[i]+=cnt[i-1];
		for(int i=0;i<n;i++) 
			if(rank[i]>0) rank[i]=cnt[rank[i]-1];
		memset(cnt,0,sizeof(cnt));
		for(int i=0;i<=n;i++)
		{
			for(int j=0;j<vec[i].size();j++)
			{
				p p1=vec[i][j];
				rank[p1.second]+=cnt[p1.first];
			}
			for(int j=0;j<vec[i].size();j++)
			{
				p p1=vec[i][j];
				cnt[p1.first]++;
			}
		}
	}	
	for(int i=0;i<n;i++) sa[rank[i]]=i;
	int h=0;
	for(int i=0;i<n;i++)
	{
		if(h>0) h--;
		if(rank[i]==n-1) continue;
		int to=sa[rank[i]+1];
		while(i+h<n&&to+h<n&&str[i+h]==str[to+h]) h++;
		lcp[rank[i]]=h;
	}
}
void make()
{
	memset(tg,-1,sizeof(tg));
	int sz=0;
	for(int i=0;i<n;i++)	
		if(str[i]==')'&&sz>0) tg[memo[--sz]]=i;
		else if(str[i]=='(') memo[sz++]=i;
	for(int i=0;i<n;i++)
		if(rank[i]==0) start[i]=i;
		else start[i]=i+lcp[rank[i]-1];
}
int main()
{
	scanf("%d%s",&n,str);
	build();make();
	memset(to,-1,sizeof(to));
	for(int i=0;i<n;i++) if(tg[i]!=-1) to[i][0]=tg[i]+1;
	for(int i=0;i+1<20;i++)
		for(int j=0;j<=n;j++)
			if(to[j][i]==-1) to[j][i+1]=-1;
			else to[j][i+1]=to[to[j][i]][i];
	ll ret=0;
	for(int i=0;i<n;i++)
	{
		if(str[i]==')') continue;
		int now=i,f=ret;
		for(int j=20-1;j>=0;j--)
			if(to[now][j]!=-1)
			{
				ret+=(ll)1<<j;
				now=to[now][j];
			}
		now=i;
		for(int j=20-1;j>=0;j--)
			if(to[now][j]!=-1&&to[now][j]<=start[i])
			{
				ret-=(ll)1<<j;
				now=to[now][j];
			}
	}
	printf("%I64d\n",ret);
 	return 0;
}

