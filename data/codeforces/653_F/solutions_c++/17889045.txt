#include <cstring>
#include <cstdio>
#include <algorithm>
using namespace std;

const int N = 2e6+17;

int go[N][2],len[N],fail[N],Ri[N];
int R[N>>2][21],S[N],que[N],tank[N];
char s[N];

int n,cnt,Lst;

int Add(int p, int c)
{
	int np = ++ cnt;
	len[np] = len[p] + 1;
	for ( ; p && !go[p][c]; p = fail[p]) go[p][c] = np;
	if (!p) fail[np] = 1; else
	{
		int q = go[p][c];
		if (len[p] + 1 == len[q]) fail[np] = q; else
		{
			int nq = ++ cnt;
			len[nq] = len[p] + 1;
			fail[nq] = fail[q];
			memcpy(go[nq], go[q], sizeof go[q]);
			fail[np] = fail[q] = nq;
			for ( ; p && go[p][c] == q; p = fail[p]) go[p][c] = nq;
		}
	}
	return np;
}

int Query(int p, int len)
{
	p = n - p + 1;
	int sum = 0, ed = p + len - 1;
	for (int j = 20; j + 1; j --)
		if (R[p][j] <= ed) sum += 1 << j, p = R[p][j] + 1;
	return sum;
}

void Solve()
{
	for (int i = 1; i <= cnt; i ++) tank[len[i]] ++;
	for (int i = 1; i <= n; i ++) tank[i] += tank[i-1];
	for (int i = 1; i <= cnt; i ++) que[ tank[ len[i] ] --] = i;

	for (int r = cnt; r; r --)
	{
		int x = que[r];
		if (Ri[x] && fail[x]) Ri[fail[x]] = Ri[x];
	}

	long long ans = 0;
	
	for (int i = cnt; i; i --)
	{
		int x = que[i];
		if (!Ri[x]) continue;
		int l = len[fail[x]] + 1, r = len[x];
		ans += Query(Ri[x], r) - Query(Ri[x], l-1);
	}

	printf("%I64d\n", ans);
}

int main()
{
	scanf("%d", &n);
	scanf(" %s", s + 1);

	for (int i = 1; i <= n; i ++)
		if (s[i] == '(') S[i] = 1; else S[i] = 0;

	static int stack[N];
	int top = 0;

	for (int i = 1; i <= n; i ++)
		if (S[i]) stack[++ top] = i;
			else if (top) R[stack[top --]][0] = i;

	for (int i = 1; i <= n; i ++) if (!R[i][0]) R[i][0] = n + 1;
	R[n+1][0] = n + 1;

	for (int j = 1; j <= 20; j ++)
		for (int i = 1; i <= n+1; i ++)
			R[i][j] = (R[i][j-1] == n+1) ? R[i][j-1] : R[R[i][j-1]+1][j-1];
	
	reverse(S + 1, S + 1 + n);

	Lst = cnt = 1;
	for (int i = 1; i <= n; i ++)
	{
		Lst = Add(Lst, S[i]);
		Ri[Lst] = i;
	}

	Solve();

	return 0;
}
