#pragma comment(linker, "/STACK:640000000")
#include<iostream>
#include<cstdio>
#include<cassert>
#include<cstring>
#include<ctime>
#include<cstdlib>
#include<cmath>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<bitset>
#include<algorithm>

#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define ll long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
#define forit(it,S) for(__typeof((S).begin()) it = (S).begin(); it != (S).end(); it++)

using namespace std;

typedef pair<int, int> pii;

const double eps = 1e-9;
const double pi = acos(-1.0);

const int maxlen = (int)5e5 + 10;

char s[maxlen];
int p[maxlen], cnt[maxlen], c[20][maxlen];
int pn[maxlen], cn[maxlen];
int b[maxlen];
int lcp[maxlen];
int alphabet = 256;

vector<int> pos[2 * maxlen];

int main() {
	#ifdef LOCAL
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	
	int n; cin >> n;
	scanf("%s",s);
	
	int bal = 0;
	
	for (int i = 0; i < n; i++) {
		b[i] = bal;
		if (s[i] == '(') {
			bal++;
		} else {
			bal--;
		}		
		pos[maxlen + bal].pb(i);
	}	
	s[n++] = 0;	
	
	memset (cnt, 0, alphabet * sizeof(int));
	for (int i=0; i<n; ++i)
		++cnt[s[i]];
	for (int i=1; i<alphabet; ++i)
		cnt[i] += cnt[i-1];
	for (int i=0; i<n; ++i)
		p[--cnt[s[i]]] = i;
	c[0][p[0]] = 0;
	int classes = 1;
	for (int i=1; i<n; ++i) {
		if (s[p[i]] != s[p[i-1]])  ++classes;
		c[0][p[i]] = classes-1;
	}	
	int h;
	for (h=0; (1<<h)<n; ++h) {
		for (int i=0; i<n; ++i) {
			pn[i] = p[i] - (1<<h);
			if (pn[i] < 0)  pn[i] += n;
		}
		memset (cnt, 0, classes * sizeof(int));
		for (int i=0; i<n; ++i)
			++cnt[c[h][pn[i]]];
		for (int i=1; i<classes; ++i)
			cnt[i] += cnt[i-1];
		for (int i=n-1; i>=0; --i)
			p[--cnt[c[h][pn[i]]]] = pn[i];
		c[h + 1][p[0]] = 0;
		classes = 1;
		for (int i=1; i<n; ++i) {
			int mid1 = (p[i] + (1<<h)) % n,  mid2 = (p[i-1] + (1<<h)) % n;
			if (c[h][p[i]] != c[h][p[i-1]] || c[h][mid1] != c[h][mid2])
				++classes;
			c[h + 1][p[i]] = classes-1;
		}
	}

	for (int i = 0; i + 1 < n; i++) {
		lcp[i] = 0;
		int x = p[i];
		int y = p[i + 1];
		for (int j = h; j >= 0; j--) {
			if (c[j][x] == c[j][y]) {
				lcp[i] += 1 << j;
				x += 1 << j;
				y += 1 << j;
			}
		}		
	}
	
	n--;
	
	ll res = 0;
	
	for (int i = 1; i <= n; i++) {
		int pp = p[i];
		if (s[pp] == ')') continue;
		int nxt = lower_bound(all(pos[maxlen + b[pp] - 1]),p[i]) - pos[maxlen + b[pp] - 1].begin();
		if (nxt == sz(pos[maxlen + b[pp] - 1])) {
			nxt = n;
		} else {
			nxt = pos[maxlen + b[pp] - 1][nxt];
		}
		int start = lower_bound(all(pos[maxlen + b[pp]]),p[i] + lcp[i - 1]) - pos[maxlen + b[pp]].begin();
		int end = lower_bound(all(pos[maxlen + b[pp]]),nxt) - pos[maxlen + b[pp]].begin();
		res += max(end - start,0);
	}
	
	cout << res << endl;
	
	return 0;
}
