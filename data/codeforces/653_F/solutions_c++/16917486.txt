#include <stack>
#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;
const int maxn=5e5+10;
char s[maxn];
int sa[maxn],tmp[maxn],rank[maxn],hgt[maxn],gap,n;
bool cmp(int x,int y)
{
    if(rank[x]!=rank[y])
        return rank[x]<rank[y];
    x+=gap,y+=gap;
    return (x<n&&y<n)?rank[x]<rank[y]:y<x;
}
void build()
{
    for(int i=0;i<n;i++)
        sa[i]=i,rank[i]=s[i];
    for(gap=1;;gap*=2)
    {
        sort(sa,sa+n,cmp);
        for(int i=1;i<n;i++)
            tmp[i]=tmp[i-1]+cmp(sa[i-1],sa[i]);
        for(int i=0;i<n;i++)
            rank[sa[i]]=tmp[i];
        if(tmp[n-1]==n-1)    break;
    }
}
void getHeight()
{
    for(int i=0,k=0;i<n;i++)
    {
        if(rank[i]==n-1)    continue;
        int j=sa[rank[i]+1];
        while(i+k<n&&j+k<n&&s[i+k]==s[j+k])
            ++k;
        hgt[rank[i]]=k;
        if(k)    --k;
    }
}
int pre[maxn],next[maxn];
vector<int> val[maxn*2];
int query(int l,int r)
{
    int id=pre[l]+maxn;
    r=min(r,next[l]-1);
    if(l>r||s[l]==')')    return 0;
    return upper_bound(val[id].begin(),val[id].end(),r)-
            upper_bound(val[id].begin(),val[id].end(),l);
}
void print(int *x,int n)
{
    for(int i=0;i<n;i++)
        printf("%d ",x[i]);
    printf("\n");
}
int main()
{
    scanf("%d%s",&n,s);
    for(int i=0;i<n;i++)
    {
        if(s[i]=='(')    pre[i+1]=pre[i]+1;
        else    pre[i+1]=pre[i]-1;
        val[pre[i+1]+maxn].push_back(i);
    }
    build();
    getHeight();
    stack<int> stk;
    pre[n]=-maxn;
    stk.push(n);
    for(int i=n-1;i>=0;i--)
    {
        while(pre[i]<=pre[stk.top()])    stk.pop();
        next[i]=stk.top();
        stk.push(i);
    }
    long long ans=0;
    //print(sa,n);
    //print(hgt,n);
    //print(pre,n);
    for(int i=0;i<n;i++)
    {
     //   printf("%d %d %d %d\n",sa[i],hgt[i],query(sa[i],n),
       //         query(sa[i],sa[i]+hgt[i]));
        ans+=query(sa[i],n);
       // printf("%lld ",ans);
        if(i!=n-1)    ans-=query(sa[i],sa[i]+hgt[i]-1);
      //  printf("%lld\n",ans);
    }
    printf("%lld\n",ans);
    return 0;
}