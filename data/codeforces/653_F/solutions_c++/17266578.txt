#include <bits/stdc++.h>

#define fi first
#define se second
#define mm ((b+s)>>1)
#define umax(a,b) a=max(a,b)
#define umin(a,b) a=min(a,b)
#define inf 1000000009ll
#define kare(a) ((a)*(a))
#define max3(a,b,c) max((a),max((b),(c)))
#define bit(k) (1ll<<(k))
#define fbit(k,i) ((k) & (bit(i)))
#define count(a) __builtin_popcount(a)
#define pq priority_queue
#define all(v) v.begin(),v.end()
#define type(x) __typeof(x.begin())
#define foreach(v,it) for(type(v) it=v.begin(); it!=v.end();it++)

using namespace std;

typedef double db;
typedef long long lint;
typedef pair <lint,lint> ii;
typedef pair <ii,lint> iii;
typedef vector <lint> vi;
typedef vector <ii> vii;

const lint maxn=5e5+20;

lint N,ar[maxn],mark[maxn],go[maxn],kar[maxn],gr[maxn],lcp[maxn],ans,at;
vi v[maxn];

void suffix_array(){
	for(lint k=1;k<=20;k++){
		//~ printf("+++ %lld +++\n",k);
		vector <iii> all;
		for(lint i=1;i<=N;i++)
			all.push_back(iii(ii(mark[i] , mark[min(N+1,i+(lint)bit(k-1))]) , i));
		
		sort(all(all));
		
		for(lint i=0,cnt=1;i<N;i++,cnt++){
			//~ printf("%lld %lld %lld\n",all[i].fi.fi , all[i].fi.se , all[i].se);
			mark[all[i].se]=cnt;
			if(i+1!=N && all[i].fi==all[i+1].fi)
				cnt--;
		}
	}
	
	for(lint i=1;i<=N;i++)
		kar[mark[i]]=i;
	
	for(lint i=1,match=0;i<=N;i++){
		if(mark[i]==1){ match=0;continue;}
		lint j=kar[mark[i]-1];
		
		while(max(j,i)+match<=N && ar[i+match]==ar[j+match]) match++;
		
		lcp[i]=match;
		
		match-=!!match;
	}
}

void bs(lint gr,lint val){
	lint cur=v[gr].size();
	
	for(lint k=20;k>=0;k--){
		lint x=cur-bit(k);
		
		if(x<0) continue;
		
		if(v[gr][x] < val) cur=x;
	}
	
	ans+=cur;
}

int main(){
	cin >> N;
	
	for(lint i=1;i<=N;i++){
		char a;
		scanf(" %c",&a);
		ar[i]= a=='(' ? 1:2;
		mark[i]=ar[i];
	}
	
	suffix_array();
	
	memset(go,-1,sizeof go);
	for(lint i=N;i>=1;i--) if(ar[i]==1){
		lint cur=i+1;
		
		while(cur){
			if(ar[cur]==2){
				go[i]=cur;
				break;
			}
			cur=go[cur]+1;
		}
	}
	
	for(lint i=N;i>=1;i--) if(go[i]!=-1){
		if(go[go[i]+1]==-1)
			gr[i]=++at;
		else
			gr[i]=gr[go[i]+1];
		
		v[gr[i]].push_back(go[i]);
		
		bs(gr[i],i+lcp[i]);
	}
	
	//~ for(lint i=1;i<=N;i++)
		//~ printf("%lld -> mark=%lld , lcp=%lld , go=%lld , gr=%lld\n",i,mark[i],lcp[i],go[i],gr[i]);
	
	cout << ans << endl;
	
	return 0;
}
