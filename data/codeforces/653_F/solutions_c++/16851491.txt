#include <cstdio>
#include <cstring>
#include <stack>
#include <algorithm>
using namespace std;

const int MAXLEN = 500005;

struct Suffix {

	int s[MAXLEN];
	int sa[MAXLEN], t[MAXLEN], t2[MAXLEN], c[MAXLEN], n;
	int rank[MAXLEN], height[MAXLEN];

	void build_sa(int m) {
		n++;
		int i, *x = t, *y = t2;
		for (i = 0; i < m; i++) c[i] = 0;
		for (i = 0; i < n; i++) c[x[i] = s[i]]++;
		for (i = 1; i < m; i++) c[i] += c[i - 1];
		for (i = n - 1; i >= 0; i--) sa[--c[x[i]]] = i;
		for (int k = 1; k <= n; k <<= 1) {
			int p = 0;
			for (i = n - k; i < n; i++) y[p++] = i;
			for (i = 0; i < n; i++) if (sa[i] >= k) y[p++] = sa[i] - k;
			for (i = 0; i < m; i++) c[i] = 0;
			for (i = 0; i < n; i++) c[x[y[i]]]++;
			for (i = 0; i < m; i++) c[i] += c[i - 1];
			for (i = n - 1; i >= 0; i--) sa[--c[x[y[i]]]] = y[i];
			swap(x, y);
			p = 1; x[sa[0]] = 0;
			for (i = 1; i < n; i++)
				x[sa[i]] = (y[sa[i - 1]] == y[sa[i]] && y[sa[i - 1] + k] == y[sa[i] + k]) ? p - 1 : p++;
			if (p >= n) break;
			m = p;
		}
		n--;
	}

	void getHeight() {
		int i, j, k = 0;
		for (i = 1; i <= n; i++) rank[sa[i]] = i;
		for (i = 0; i < n; i++) {
			if (k) k--;
			int j = sa[rank[i] - 1];
			while (s[i + k] == s[j + k]) k++;
			height[rank[i]] = k;
		}
	}

} gao;

const int N = 500005;
int n, rt[N], sz;
char str[N];

struct Node {
    int ls, rs, cnt;
} node[N * 20];

void build(int L, int R, int &x) {
    x = ++sz;
    node[x].cnt = 0;
    if (L == R) return;
    int mid = (L + R)>>1;
    build(L, mid, node[x].ls);
    build(mid + 1, R, node[x].rs);
}

stack<int> S;

void add(int pre, int &u, int v, int L = 1, int R = n) {
    u = ++sz;
    node[u] = node[pre];
    node[u].cnt++;
    if (L == R) return;
    int mid = (L + R)>>1;
    if (v <= mid) add(node[pre].ls, node[u].ls, v, L, mid);
    else add(node[pre].rs, node[u].rs, v, mid + 1, R);
}

int get(int u, int l, int r, int L = 1, int R = n) {
    int mid = (L + R)>>1;
    int ans = 0;
    if (L >= l && R <= r) return node[u].cnt;
    if (l <= mid) ans += get(node[u].ls, l, r, L, mid);
    if (r > mid) ans += get(node[u].rs, l, r, mid + 1, R);
    return ans;
}

int main() {
    scanf("%d", &n);
    scanf("%s", str);
    gao.n = n;
    for (int i = 0; i < n; i++) {
        if (str[i] == '(') gao.s[i] = 1;
        else gao.s[i] = 2;
    }
    gao.build_sa(3);
    gao.getHeight();
    build(1, n, rt[n]);
    long long ans = 0;
    for (int i = n - 1; i >= 0; i--) {
        if (str[i] == ')') {
            rt[i] = rt[n + 1];
            S.push(i);
        }
        else {
            if (S.empty()) rt[i] = rt[n];
            else {
                int v = S.top(); S.pop();
                add(rt[v + 1], rt[i], v);
            }
        }
        int sa = gao.rank[i];
        //printf("%d %d %d %d\n", i, i + gao.height[sa], n, get(rt[i], i + gao.height[sa], n));
        ans += get(rt[i], i + gao.height[sa], n);
    }
    printf("%lld\n", ans);
    return 0;
}
