#include <cstdio>
#include <cstring>
#include <bits/stdc++.h>
#define lowbit(x) (x&-x)
using namespace std;
const int N=2e6,MAX=1e9;
pair<int,int> xv[N];
set<int> have;
int nn,sa[N],rank[N],nsa[N],nrank[N],js[N],low[N],cou[2*N];
inline void da(){
    int n=1,i,j;
    while(n<nn<<1) n<<=1;
    memset(js,0,n*sizeof(int));
    for(i=0;i<n-1;i++) js[rank[i]+1]++;
    for(i=1;i<max(n,10);i++) js[i]+=js[i-1];
    for(i=0;i<n-1;i++) sa[js[rank[i]]++]=i;
    for(i=1,nrank[sa[0]]=0;i<n-1;i++) nrank[sa[i]]=rank[sa[i]]==rank[sa[i-1]]?nrank[sa[i-1]]:i;
    for(j=2;j<n;j<<=1){
        memset(js,0,n*sizeof(int));
        for(i=0;i<n-j;i++) js[rank[i]+1]++;
        for(i=1;i<max(n,10);i++) js[i]+=js[i-1];
        for(i=0;i<n-(j>>1);i++) if(sa[i]>=j>>1) nsa[js[rank[sa[i]-(j>>1)]]++]=sa[i]-(j>>1);
        memcpy(sa,nsa,n*sizeof(int));
        for(i=1,nrank[sa[0]]=0;i<n-j;i++) nrank[sa[i]]=(rank[sa[i]]==rank[sa[i-1]]&&rank[sa[i]+(j>>1)]==rank[sa[i-1]+(j>>1)])?nrank[sa[i-1]]:i;
        memcpy(rank,nrank,n*sizeof(int));
    }
}
char yuan[N];
inline void add(int p,int v){
    p+=N;
    while(p<=nn+N) cou[p]+=v,p+=lowbit(p);
}
inline int query(int p){
    p+=N;
    int re=0;
    while(p>0) re+=cou[p],p-=lowbit(p);
    return re;
}
inline void hei(){
    int ch=0;
    for(int i=1;i<=nn;i++){
        if(rank[i-1]==0){ch=0,low[i]=i;continue;}
        if(ch) ch--;
        while(yuan[i+ch]==yuan[sa[rank[i-1]-1]+ch+1]) ch++;
        low[i]=ch+i;
    }
}
int main(){
    long long ans=0;
    scanf("%d%s",&nn,yuan+1);
    if(nn<2){
        printf("0\n");
        return 0;
    }
    for(int i=1;i<=nn;i++)
        xv[i].first=xv[i-1].first+(yuan[i]=='('?1:-1),xv[i].second=i;
    for(int i=0;i<nn;i++) rank[i]=yuan[i+1]=='('?2:1;
    da(),hei(),have.insert(nn+1);
    sort(xv+1,xv+nn+1);
    for(pair<int,int> *s=xv+1,*t,*c,*ls=s;s<=xv+nn;ls=s,s=t){
        for(t=s+1;s->first==t->first&&t<=xv+nn;t++);
        for(c=s;c<t;c++) if(yuan[c->second]=='('&&(*have.upper_bound(c->second))>low[c->second])
            ans+=query((*have.upper_bound(c->second))-1)-
            query(low[c->second]-1);
        for(c=ls;c<s;c++) add(c->second,-1),have.insert(c->second);
        for(c=s;c<t;c++) add(c->second,1);
    }
    printf("%I64d\n",ans);
    return 0;
}
