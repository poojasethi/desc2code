#include <iostream>
#include <map>
#include <set>
#include <queue>
#include <cmath>
#include <vector>
#include <cstring>
#include <cstdio>
#include <algorithm>
#define x first
#define y second
using namespace std;

const int N = 500100;
int sa[N];
int rk[N];
int s[N];
int height[N];

int wx[N], wy[N], w[N];
int cmp(int *arr, int a, int b, int l) {
    return arr[a] == arr[b] && arr[a + l] == arr[b + l];
}

void hz(int *r, int n, int m) {
    int i, j, p, *t, *x = wx, *y = wy, k;
    for (i = 0; i < m; i++) w[i] = 0;
    for (i = 0; i < n; i++) w[x[i] = r[i]]++;
    for (i = 1; i < m; i++) w[i] += w[i - 1];
    for (i = n - 1; i >= 0; i--) sa[--w[x[i]]] = i;
    for (j = 1, p = 1; p < n; j *= 2, m = p) {
        for (i = 0; i < m; i++) w[i] = 0;
        for (p = 0, i = n - j; i < n; i++) y[p++] = i;
        for (i = 0; i < n; i++) if (sa[i] >= j) y[p++] = sa[i] - j;
        for (i = 0; i < n; i++) w[x[i]]++;
        for (i = 1; i < m; i++) w[i] += w[i - 1];
        for (i = n - 1; i >= 0; i--) sa[--w[x[y[i]]]] = y[i];
        for (i = 1, p = 1, t = x, x = y, y = t, x[sa[0]] = 0; i < n; i++) {
            x[sa[i]] = cmp(y, sa[i], sa[i - 1], j) ? p - 1 : p++;
        }
    }
    for (i = 0; i < n; i++) rk[i] = x[i];
    for (i = 0, k = 0; i < n - 1; i++) {
        for (k ? k-- : 0, j = sa[rk[i] - 1]; r[i + k] == r[j + k]; k++) ;
        height[rk[i]] = k;
    }
    return ;
}

char str[N];
int st[N][20], a[N], len;
vector<int> v[N + N];

void init_st() {
    for (int i = 1; i < 20; i++) {
        for (int j = 0; j < len; j++) {
            if (j + (1 << (i - 1)) >= len) st[j][i] = st[j][i - 1];
            else if (a[st[j][i - 1]] > a[st[j + (1 << (i - 1))][i - 1]]) {
                st[j][i] = st[j + (1 << (i - 1))][i - 1];
            } else {
                st[j][i] = st[j][i - 1];
            }
        }
    }
}

int get_st(int id, int num) {
    for (int i = 19; i >= 1; i--) {
        if (a[st[id][i]] >= num) return len;
        if (a[st[id][i - 1]] >= num) id += 1 << (i - 1);
    }
    return id;
}

int get_num(int id, int l, int r) {
    if (l >= r) return 0;
    return upper_bound(v[id + N].begin(), v[id + N].end(), r) - lower_bound(v[id + N].begin(), v[id + N].end(), l);
}

int main() {
    scanf("%d", &len);
    scanf("%s", str);
    for (int i = 0; i < len; i++) {
        if (str[i] == '(') {
            s[i] = 1;
            a[i] = a[i - 1] + 1;
        }
        else {
            s[i] = 2;
            a[i] = a[i - 1] - 1;
        }
        st[i][0] = i;
        v[a[i] + N].push_back(i);
    }
    init_st();
    s[len++] = 0;
    hz(s, len, 3);
    long long ans = 0;
    for (int i = 1; i < len; i++) {
        int num = 0, l = sa[i];
        if (sa[i] > 0) num = a[sa[i] - 1];
        int r = get_st(sa[i], num);
        if (a[r] >= num) r = len;
        ans += get_num(num, l + height[i], r);
    }
    printf("%I64d\n", ans);
}
