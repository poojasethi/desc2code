#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<vector>
#define N 1000005
#define LL long long
#define oo (1<<30)
using namespace std;
vector<int> G[N],E[2*N]; LL ans;
char st[N]; int rg[N],S[N];
int n,m,next[N][2],f[N],len[N], last;
int W(char c){ return c=='(' ? 0 : 1;}
void add(int ch)
{
	int i,x,p; len[++m]=len[last]+1;
	for(i=last;i&&!next[i][ch];i=f[i]) next[i][ch]=m;
	last=m,x=i,p=next[i][ch];
	if(!i){ f[m]=1; return ;}
	if(len[p]==len[x]+1){ f[m]=p; return ;}
	len[++m]=len[x]+1,f[m]=f[p],f[m-1]=f[p]=m;
	for(i=0;i<2;i++) next[m][i]=next[p][i];
	for(i=x;i&&next[i][ch]==p;i=f[i]) next[i][ch]=m;
}
void dfs(int t)
{
	int i;
	for(i=0;i<G[t].size();i++)
		dfs(G[t][i]),rg[t]=max(rg[t],rg[G[t][i]]);
}
int Fdn(int t,int x)
{
	return lower_bound(E[t].begin(),E[t].end(),x)-E[t].begin();
}
int Fup(int t,int x)
{
	return upper_bound(E[t].begin(),E[t].end(),x)-E[t].begin();
}
void DFS(int t)
{
	int i,l,r,p,q;
	for(i=0;i<G[t].size();i++){
		l=rg[G[t][i]]+len[t]; //length is len[t]+1
		r=rg[G[t][i]]+len[G[t][i]]-1; //length is len[G[t][i]]
		p=Fdn(S[rg[G[t][i]]-1]-1+n,l);
		q=Fup(S[rg[G[t][i]]-1]-1+n,r);
		if(p==q){
			p=Fdn(S[rg[G[t][i]]-1]+n,l);
			q=Fup(S[rg[G[t][i]]-1]+n,r);
			ans+=q-p,DFS(G[t][i]);
		  }
		else{
			q=Fup(S[rg[G[t][i]]-1]+n,E[S[rg[G[t][i]]-1]+n-1][p]);
			p=Fdn(S[rg[G[t][i]]-1]+n,l);
			ans+=q-p;
		  }
	  }
}
int main()
{
	int i,p=1; last=m=1;
	scanf("%d\n",&n);
	scanf("%s",st+1);
	for(i=n;i>=1;i--)
		add(W(st[i]));
	for(i=n;i>=1;i--){
		p=next[p][W(st[i])];
		rg[p]=i;
	  }
	for(i=1;i<=m;i++)
		G[f[i]].push_back(i);
	dfs(1);
	for(i=1;i<=n;i++){
		S[i]=S[i-1]+(st[i]=='(' ? 1 : -1);
		E[S[i]+n].push_back(i);
	  }
	for(i=0;i<=2*n;i++)
		E[i].push_back(n+1);
	DFS(1);
	cout<<ans;
	return 0;
}
