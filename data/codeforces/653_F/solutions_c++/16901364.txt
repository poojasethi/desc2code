#include <set>
#include <map>
#include <cmath>
#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

#define pb push_back
#define mp make_pair
#define x first
#define y second

typedef long long ll;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;

template <class T>
void read(T &x)
{
	char ch;
	for (ch=getchar();(ch<'0'||ch>'9')&&ch!='-';) ch=getchar();
	x=0;int t=1;if (ch=='-') {ch=getchar();t=-1;}
	for (;ch>='0'&&ch<='9';ch=getchar()) x=x*10+ch-'0';
	x*=t;
}

const int N=500010;

char a[N];
int n,b[N],rank[N],rank1[N],rank2[N],rankcnt[N],sa[N],tmpsa[N],now[N],height[N],last[N];
pii c[N];

int query(int x,int y)
{
	pii z=mp(x,y);
	int l=1,r=n;
	while (l<=r)
	{
		int mid=(l+r)>>1;
		if (c[mid]<=z) l=mid+1; else r=mid-1;
	}
	return l;
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("input.txt","r",stdin);
		freopen("output.txt","w",stdout);
	#endif
	read(n);
	if (n==1) {puts("0");return 0;}
	scanf("%s",a+1);
	int s=n;b[0]=s;
	for (int i=1;i<=n;i++)
	{
		 if (a[i]=='(') s++; else s--;
		 b[i]=s;
	}
	for (int i=1;i<=n;i++) c[i]=mp(b[i],i);
	sort(c+1,c+n+1);
	for (int i=1;i<=n;i++) if (a[i]=='(') rank[i]=1; else rank[i]=2;
	for (int l=1;l<n;l<<=1)
	{
		for (int i=1;i<=n;i++)
		{
			rank1[i]=rank[i];
			if (i+l<=n) rank2[i]=rank[i+l]; else rank2[i]=0;
		}
		memset(rankcnt+1,0,n*sizeof(int));
		for (int i=1;i<=n;i++) rankcnt[rank2[i]]++;
		for (int i=1;i<=n;i++) rankcnt[i]+=rankcnt[i-1];
		for (int i=n;i;i--)	tmpsa[rankcnt[rank2[i]]--]=i;
		memset(rankcnt+1,0,n*sizeof(int));
		for (int i=1;i<=n;i++) rankcnt[rank1[i]]++;
		for (int i=1;i<=n;i++) rankcnt[i]+=rankcnt[i-1];
		for (int i=n;i;i--)	sa[rankcnt[rank1[tmpsa[i]]]--]=tmpsa[i];
		rank[sa[1]]=1;
		for (int i=2;i<=n;i++)
		{
			rank[sa[i]]=rank[sa[i-1]];
			if (rank1[sa[i]]!=rank1[sa[i-1]]||rank2[sa[i]]!=rank2[sa[i-1]]) rank[sa[i]]++;
		}
	}
	int l=0;
	for (int i=1;i<=n;i++)
		if (rank[i]>1)
		{
			int j=sa[rank[i]-1];
			while (i+l<=n&&j+l<=n&&a[i+l]==a[j+l]) l++;
			height[i]=l;
			if (l) l--;
		}
		else
			height[i]=0;
	for (int i=0;i<=2*n;i++) now[i]=n;
	for (int i=n;i;i--)
	{
		now[b[i]]=i;
		last[i]=now[b[i-1]-1];
	}
	ll ans=0;
	for (int i=1;i<=n;i++) ans+=query(b[i-1],last[i])-query(b[i-1],min(last[i],i+height[i]-1));
	cout<<ans<<endl;
	return 0;
}
