#include<bits/stdc++.h>

using namespace std;

#define foreach(i, x)  for(type(x) i=x.begin() ; i != x.end() ; i++)
#define FOR(ii, aa, bb) for(int ii = aa ; ii <= bb ; ii++)
#define ROF(ii, aa, bb) for(int ii = aa ; ii >= bb ; ii--)

#define type(x) __typeof(x.begin())

#define sag (k + k + 1)
#define sol (k + k)

#define pb push_back
#define mp make_pair

#define nd second
#define st first

#define endl '\n'

typedef pair< int, int > pii;

typedef long long ll;
 
const int mod  = 1e9+7;
const ll  linf = 1e18;
const int inf  = 1e9;
const int N = 5e5+5;
const int logN = 18;

int n, x, y, z, suff[N], sorted[N], go[N], dp[N], lca[N][logN + 1];
pair< pii , int > C[N];
char s[N];

int add(int x, int y) {
	lca[x][0] = y;
	FOR(i, 1, logN)
		lca[x][i] = lca[lca[x][i-1]][i-1];
}

int get(int x, int y) {
	if(x > y) return x;
	ROF(i, logN, 0) 
		if(lca[x][i] && lca[x][i] <= y)
			x = lca[x][i];
	if(x == 0) return 0;
	return x;
}

int main(){

	scanf("%d %s", &n, s + 1);
	
	FOR(i, 1, n) suff[i] = s[i];

	FOR(i, 1, logN) {
		FOR(j, 1, n)
			C[j] = mp(mp(suff[j], suff[min(n, j + (1 << i - 1))]), j);
		sort(C + 1, C + n + 1);
		FOR(j, 1, n)
			suff[C[j].nd] = suff[C[j-1].nd] + (C[j].st != C[j-1].st);
	}

	FOR(i, 1, n) 
		sorted[suff[i]] = i;

	int j = 0;

	FOR(i, 1, n) {
		if(suff[i] == 1) continue;	
		while(i + j <= n && sorted[suff[i] - 1] + j <= n && s[i + j] == s[sorted[suff[i] - 1] + j]) j++;
		go[i] = i + j;
		if(j) j--;
	}

	stack< int > S;

	ll ans = 0;

	ROF(i, n, 1) {
		if(s[i] == ')') S.push(i);
		else {
			int go = 0;
			if(S.size()) { go = S.top() + 1;  S.pop(); }
			if(go) {
				dp[i] = 1 + dp[go]; 
				add(i, go);
				if(::go[i] == 0) ans += dp[i];
				else ans += dp[get(i, ::go[i])];
			}
		}
	}

	cout << ans << endl;

    return 0;
}
