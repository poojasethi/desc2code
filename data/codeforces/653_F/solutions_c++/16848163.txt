#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long int ll;

const int limite=1000000;

int n;
int s[limite];
int sa[limite];
int pos[limite];
int tmp[limite];
int comun[limite];
int gap=1;

bool compara(int i1,int i2)
{
  if (pos[i1]<pos[i2]) return true;
  if (pos[i1]>pos[i2]) return false;
  i1+=gap;
  i2+=gap;
  if (i1<n and i2<n) return pos[i1]<pos[i2];
  return i2<i1;
}

void suffixarray()
{
  for (int i=0;i<n;i++) {
    sa[i]=i;
    pos[i]=s[i];
  }
  do {
    sort(sa,sa+n,compara);
    tmp[0]=0;
    for (int i=1;i<n;i++) tmp[i]=tmp[i-1]+compara(sa[i-1],sa[i]);
    for (int i=0;i<n;i++) pos[sa[i]]=tmp[i];
    gap*=2;
  } while (pos[sa[n-1]]!=n-1);
}

void computacomun()
{
  int k=0;
  for (int i=0;i<n;i++) {
    if (pos[i]!=n-1) {
      while (i+k<n and sa[pos[i]+1]+k<n and s[i+k]==s[sa[pos[i]+1]+k]) k++;
      comun[i]=k;
    }
    if (k) k--;
  }
}

char buff[limite];
int h[limite];
int veces[limite];
int ultima[limite];
int vecessup[limite];
vector<int> pendiente[limite];
ll sol=0;

int main()
{
  cin>>n;
  scanf("%s",buff);
  for (int i=0;i<n;i++)
    if (buff[i]=='(') s[i]=1;
    else s[i]=-1;
  suffixarray();
  computacomun();
  /*
  cout<<"pos:"<<endl;
  for (int i=0;i<n;i++)
    cout<<pos[i]<<",";
  cout<<endl;
  cout<<"comun:"<<endl;
  for (int i=0;i<n;i++)
    cout<<comun[i]<<",";
  cout<<endl;
  */
  int hmin=0;
  for (int i=1;i<n;i++) {
    h[i]=h[i-1]+s[i];
    hmin=min(hmin,h[i]);
  }
  hmin-=2;
  for (int i=0;i<n;i++)
    h[i]-=hmin;
  for (int i=n-1;i>=0;i--) {
    int j=i+comun[i];
    if (s[i]==1 and (ultima[h[i]-2]==0 or j<ultima[h[i]-2]))
      pendiente[j].push_back(h[i]-1);
    ultima[h[i]]=i;
  }
  for (int i=0;i<limite;i++)
    ultima[i]=0;
  for (int i=n-1;i>=0;i--) {
    veces[h[i]]++;
    ultima[h[i]]=i;
    vecessup[i]=veces[h[i]+1];
    vector<int> &p=pendiente[i];
    for (int j=0;j<int(p.size());j++) {
      int hh=p[j];
      //cout<<"pendiente "<<i<<" "<<hh<<endl;
      if (ultima[hh-1]) {
	//cout<<veces[hh]<<" "<<vecessup[ultima[hh-1]]<<" "<<ultima[hh-1]<<endl;
	sol+=veces[hh]-vecessup[ultima[hh-1]];
      } else {
	//cout<<veces[hh]<<endl;
	sol+=veces[hh];
      }
    }
  }
  cout<<sol<<endl;
}
