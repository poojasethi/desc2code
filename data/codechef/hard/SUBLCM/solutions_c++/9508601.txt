#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <cstdio>
#define MAX 1000001
using namespace std;

vector<int> prime_factors[MAX];
vector<int> prime;
int nonCoprime[MAX];
int dp[100001];

void gen_primeFactors()
{
    int a[MAX];
    for(int i=1 ; i<MAX ; i++)
    {
        a[i] = i;
    }

    for(int i=2 ; i<=sqrt(MAX) ; i++)
    {
        if(a[i]==i)
        {
            prime.push_back(i);
            for(int j=i ; i*j<MAX ; j++)
            {
                prime_factors[i*j].push_back(i);
                while(a[i*j]%i==0)
                {
                    a[i*j]/=i;
                }
            }
        }
    }
    for(int i=2 ; i<MAX ; i++)
    {
        if(a[i]!=1)
        {
            prime_factors[i].push_back(a[i]);
        }
        if(i>sqrt(MAX) && a[i]==i) prime.push_back(i);
    }
    //cout<<prime.size();
//    int mx=0;
//    for(int i=1;i<MAX;i++) {
//        //cout<<i<<" : ";
//        mx = max(mx,(int)prime_factors[i].size());
//        for(unsigned j=0;j<prime_factors[i].size();j++) {
//            //cout<<prime_factors[i][j]<<" ";
//        }
//        //cout<<endl;
//    }
//    cout<<mx;
}

int latestNonCoprime(int *nonCoprime, int a, int index)
{
    int maxIndex=0;
    for(unsigned i=0 ; i<prime_factors[a].size() ; i++)
    {
        maxIndex = max(maxIndex, nonCoprime[prime_factors[a][i]]);
        nonCoprime[prime_factors[a][i]] = index;
    }
    return maxIndex;
}

int SUBLCM(int *a, int n)
{
    for(unsigned i=0 ; i<prime.size();i++)
    {
        nonCoprime[prime[i]] = 0;
    }
    for(int i=1 ; i<=n ; i++)
    {
        int x = latestNonCoprime(nonCoprime, a[i], i);

        if(i==1)
        {
            dp[i] = 1;
        }
        else
        {
            if( x<(i-dp[i-1]) )
            {
                dp[i] = dp[i-1]+1;
            }
            else
            {
                dp[i] = i-x;
            }
        }
    }
    int mx=0;
    for(int i=1 ; i<=n ; i++)
    {
        //cout<<dp[i] << " ";
        mx = max(mx, dp[i]);
    }
    //cout<<endl;
    mx = mx==1 ? -1 : mx;
    return mx;
}

int main()
{
    int t,n,a[MAX];
    gen_primeFactors();

    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        for(int i=1 ; i<=n ; i++)
        {
            scanf("%d",&a[i]);
        }
        printf("%d\n",SUBLCM(a,n));
    }
    return 0;
}
