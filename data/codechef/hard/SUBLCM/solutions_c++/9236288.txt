#include <bits/stdc++.h>
 
using namespace std;
 
#define N 100005
#define PB push_back
#define MAX 1000005
 
int dp[N];
int a[N];
int last_occurence[MAX];

vector<int> prime_factors[MAX];
bool isPrime[MAX];
 
void precompute()
{
	memset(isPrime, true, sizeof isPrime);
	int i, j;
	for(i = 2; i <= MAX; i++)
	{
		if(isPrime[i])
			for(j = i; j <= 1000000; j += i)
			{
				prime_factors[j].PB(i);
				isPrime[j] = false;
			}
	}
}

int calc(int i)
{
	int cur = a[i];
	int j, cur_fac, ret = 0;
	for(j = 0; j < prime_factors[cur].size(); j++)
	{
		cur_fac = prime_factors[cur][j]; // jth prime factor of cur
		ret = max(ret, last_occurence[cur_fac]);
		last_occurence[cur_fac] = i;
	}
	return ret;
}
 
int main()
{
	precompute();
	int t, n, i;
	scanf("%d", &t);
	while(t--)
	{
		scanf("%d", &n);
 		for(i = 1; i <= n; i++)
 			scanf("%d", &a[i]);
 		memset(dp, 0, sizeof dp);
 		memset(last_occurence, 0, sizeof last_occurence);
 		for(i = 1; i <= n; i++)
 		{
 			dp[i] = min(dp[i - 1] + 1, i - calc(i));
 		}
 		int ans = 0;
 		for(i = 1; i <= n; i++)
 		{
 			ans = max(ans, dp[i]);
 		}
 		if(ans != 1)
 			printf("%d\n", ans);
 		else
 			puts("-1");
	}
	return 0;
}