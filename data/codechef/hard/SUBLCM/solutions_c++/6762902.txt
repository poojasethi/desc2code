#include<bits/stdc++.h>
#define gc getchar_unlocked
#define pc putchar_unlocked
#define sz(a) int((a).size())
#define pb push_back
#define pob pop_back
#define mp make_pair
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define f_in(st) freopen(st,"r",stdin);
#define f_out(st) freopen(st,"w",stdout);
#define SWAP(x,y) x^=y^=x^=y
#define MOD 1000000009
#define ll long long
//memset(bit1,0,sizeof bit1);
using namespace std;
inline long long readInt(){
long long n = 0, c = gc(), f = 1;
while(c != '-' && (c < '0' || c > '9')) c = gc();
if(c == '-') f = -1, c = gc();
while(c >= '0' && c <= '9')
n = (n<<3) + (n<<1) + c - '0', c = gc();
return n * f;
}

inline void writeInt(long long a){
	if(a<0){
		pc('-');
		a = a * -1;
	}
    char snum[20];
    int i=0;
    do  {
        snum[i++]=a%10+48;
        a=a/10;
    }while(a!=0);
    i=i-1;
    while(i>=0)
    pc(snum[i--]);
    pc('\n');
}

int prime[1000001];
vector<vector<int> >pr(1000001);
int p[1000001],dp[100001];
void sieve(){
	prime[0] = 1;
	prime[1] = 1;
	
	for(int i=2;i<=1000;i++){
		if(prime[i]==0){						
			
			for(int j = i * 2 ; j<=1000000;j+=i){			
				prime[j] = i;
			}			
		}
	}
	
	for(int i=2;i<1000001;i++){
		set<int> fact;
		int num = i;
		while(num>1){
			if(prime[num]==0){
				fact.insert(num);
				num = 1;
				continue;
			}
			fact.insert(prime[num]);
			num /= prime[num];
		}
		set<int>::iterator it = fact.begin();
		for(;it!=fact.end();it++){
			pr[i].pb(*it);
		}
	}
	
}

int cal(int num,int idx){
	int ret_val=0;
	for(int i=0;i<pr[num].size();i++){
		ret_val = max(p[pr[num][i]],ret_val);
		p[pr[num][i]] = idx;
	}
	return ret_val;
}

int min(int a , int b){
	if(a<b) return a;
	else return b;
}

int main(){	
	sieve();	
	int t = readInt();
	while(t--){		
		int n = readInt();		
		vector<int> v;
		v.pb(0);
		
		for(int i=0;i<n;i++) v.pb(readInt());
		int len = 1;
		for(int i=1;i<=n;i++){
			int z = cal(v[i],i);
			dp[i] = min(dp[i-1]+1,i-z);
			len = dp[i]>len ? dp[i] : len;
		}														
		if(len==1)	len = -1;
		writeInt(len);
		memset(p,0,sizeof p);
	}
	return 0;
}
