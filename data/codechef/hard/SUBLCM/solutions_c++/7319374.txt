#include <bits/stdc++.h>

using namespace std;

bool vis[1000005];
vector <int> v[1000005];
int cnt[1000005];
int A[100005];

void pre()
{
    for ( int i = 2; i <= 1000000; i++ ) {
        if ( vis[i] ) continue;
        for ( int j = i; j <= 1000000; j += i ) v[j].push_back(i), vis[j] = true;
    }
    return;
}

//Code for FAST INPUT :)
template <typename T>
inline void fi(T *a)
{
    register char c=0;
    while (c<33) c=getchar_unlocked();
    *a=0;
    int tmp = 0;
    while (c>33)
    {
        if ( c == 45 ) tmp = 1;
        else *a=*a*10+c-'0';
        c=getchar_unlocked();
    }
    if ( tmp == 1 ) *a = 0-(*a);
}

int main()
{
    pre();
    int t,n;
    fi(&t);
    while ( t-- ) {
        fi(&n);
        for ( int i = 0; i < n; i++ ) {
            fi(&A[i]);
            for ( int j = 0; j < v[A[i]].size(); j++ ) cnt[v[A[i]][j]] = 0;
        }
        int ans = 0;
        int idx1 = 0, idx2 = 0;
        while ( idx1 < n ) {
            while ( idx2 < n ) {
                for ( int j = 0; j < v[A[idx2]].size(); j++ ) {
                    if ( cnt[v[A[idx2]][j]] ) goto p1;
                }
                for ( int j = 0; j < v[A[idx2]].size(); j++ ) cnt[v[A[idx2]][j]]++;
                idx2++;
                ans = max(ans, idx2-idx1);
            }
            p1:{ }
            for ( int j = 0; j < v[A[idx1]].size(); j++ ) cnt[v[A[idx1]][j]]--;
            idx1++;
        }
        if ( ans <= 1 ) ans = -1;
        printf("%d\n", ans);
    }
    return 0;
}
