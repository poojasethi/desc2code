#include<bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;
 
#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
#define fordn(i,a,b) for(int i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define pb push_back
 
#define debug if(printf("GD "))
#define mod 1000000007
#define getchar getchar_unlocked
 
    #define MAX 1000000
    #define set(i) (arr[i>>5]|=(1<<(i&31)))
    #define is_composite(i) (arr[i>>5]&(1<<(i&31)))
    
int inline scan()
{
    int N = 0;
    char C;
    C=getchar();
    while (C < '0' || C>'9') C=getchar();
    while (C >= '0' && C <= '9')
    {
        N = (N<<3) + (N<<1) + C - '0';
        C=getchar();
    }
 
    return N;
}
 
    vector<int> arr((MAX>>5)+5),primes;
    vvi factors(1000005);
 
    void sieve_of_erath()
    {
      int cnt=1;      
      int i,j,sq=sqrt(MAX);
      for(i=3;i<=sq;i+=2)
      {
        if(is_composite(i)==0)
        {
          int k=2*i;          
          for(j=(3*i);j<=MAX;j+=k)
          {            
            set(j);
            factors[j].pb(i);
          }          
        }
      }
            
      /*primes.push_back(2);
      for(i=3;i<=MAX;i+=2)
      {
        if(is_composite(i)==0)
        {
            primes.push_back(i);
            //cout<<i<<" ";
        }
       }*/
      //cout<<endl;
    }
 
int main()
{
    int t, n, in[100005], mark[1000005];
    sieve_of_erath();
    //cout<<factors[1009].size()<<endl;;
    //scanf("%d",&t);
    t = scan();
    while(t--)
    {
        fill(mark, mark+1000005, -1);
//        scanf("%d",&n);
//        scanf("%d",&in[0]);
		n = scan();
		in[0] = scan();
        int ans = -1, start = 0, end;
        
        if((in[0]&1)==0 && in[0]!=2)
        {
            mark[2] = 0;
            while((in[0]&1)==0) in[0]>>=1;
        }
        if(/*in[0]==2 || (is_composite(in[0])==0 && in[0]&1)*/factors[in[0]].size()==0 && in[0]!=1)
        {
            mark[in[0]] = 0;
        }        
        else
        {
            //for(int i=0;primes[i]<in[0];i++)
            rep(i,factors[in[0]].size())
            {
                //if(in[0]%primes[i]==0)
                {
                    //debug cout<<"Here";
                    mark[factors[in[0]][i]] = 0;
                    //mark[in[0]/primes[i]] = 0;
                }
            }
        }
 
        for(int i=1;i<n;i++)
        { 
            //scanf("%d",&in[i]);
            in[i] = scan();
            if(in[i]==1) continue;
            
            if((in[i]&1)==0 && in[i]!=2)
            {
                if(mark[2]>-1)
                {
                    int len = i - start;
                    ans = max(ans, len);
                    start = max(mark[2]+1, start);
                }
                mark[2] = i;
                while((in[i]&1)==0) in[i]>>=1;
            }    
            if(/*in[i]==2 || (is_composite(in[i])==0 && in[i]&1)*/factors[in[i]].size()==0 && in[i]!=1)
            {
                if(mark[in[i]]>-1)
                {
                    int len = i - start;
                    ans = max(len, ans);
                    start = max(mark[in[i]]+1, start);
                    //debug cout<<"Here "<<i<<" "<<len<<" "<<start<<"\n";
                }
                mark[in[i]] = i;
            }
            else
            {
                //for(int j=0;primes[j]<in[i];j++)
                for(int j=0;j<factors[in[i]].size();j++)
                {
                    //if(in[i]%primes[j]==0)
                    {
                        if(mark[factors[in[i]][j]]>-1)
                        {
                            int len = i - start;
                            ans = max(ans, len);
                            start = max(mark[factors[in[i]][j]]+1, start);
                    //debug cout<<"Here "<<i<<" "<<len<<" "<<start<<"\n";
                            //debug cout<<"Here1 "<<mark[primes[j]]<<" "<<start<<"\n";
                        }
                        /*int q = in[i]/primes[j];
                        if(mark[q]>-1 && q!=primes[j]) 
                        {
                            int len = i - start;
                            ans = max(ans, len);
                            start = max(mark[q]+1, start);
                        }*/
                        mark[factors[in[i]][j]] = i;
                        //mark[in[i]/primes[j]] = i;
                    }
                }
            }
        }
        int len = n - start;
        ans = max(len, ans);
        if(ans<=1)
            printf("%d\n",-1);
        else
            printf("%d\n",ans);
    }
    return 0;
} 