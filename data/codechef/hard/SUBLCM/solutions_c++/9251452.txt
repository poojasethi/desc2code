#include <iostream>
#include <cstdio>
#include <vector>
#include <cassert>
using namespace std;

vector<bool> isprime;
vector<vector<int> > factors;
void sieve(int n) {
	isprime.resize(n+1);
	factors.resize(n+1);
	for (int i = 0; i <= n; i++) {
		isprime[i] = 1;
	}
	isprime[1] = 0;
	isprime[2] = 1;
	for (int i = 2; i <= n; i++) {
		if (isprime[i]) {
			for (int j = 2; i*j <= n; j++) {
                isprime[i*j] = 0;
                factors[i*j].push_back(i);
			}
			factors[i].push_back(i);
		}
    }
	return;
}


int main() {
    sieve(1000005);
    int t;
    scanf("%d", &t);
    while (t--) {
        int n;
        scanf("%d", &n);
        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            scanf("%d", &a[i]);
        }
        vector<int> answer(n);
        vector<int> lastPos(1000005, -1);
        for (int i = 0; i < n; i++) {
            int maxPos = -1;
            int v = a[i];
            for (int j = 0; j < factors[v].size(); j++) {
                int f = factors[v][j];
                maxPos = max(maxPos, lastPos[f]);
                lastPos[f]=i;
            }
            maxPos++;

            if (i > 0) {
                answer[i] = min(answer[i-1]+1, i-maxPos+1);
            } else {
                answer[i] = 1;
            }
        }

        //for (int i = 0; i < n; i++) cerr << answer[i] << " "; cerr << endl;

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans,answer[i]);
        }

        if (ans == 1) {
            printf("%d\n", -1);
        } else {
            printf("%d\n", ans);
        }
    }
}
