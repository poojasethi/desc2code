//---------------------------JUGNU: LET YOUR LIGHT SHINE---------------------------//
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define pf push_front
#define sz size
#define mk make_pair
#define ln length
#define vt(a) vector <ll> a
#define st(a) set <ll> a
#define sti(a) set <ll>::iterator a
#define fr(i,a,b) for(i=a;i<b;i++)
#define fre(i,a,b) for(i=a;i<=b;i++)
#define frr(i,a,b) for(i=a;i>=b;i--)
#define sc(a) scanf("%d",&a)
#define sm(a,b) scanf("%d%d", &a, &b)
#define pr(a) printf("%d\n", a)
#define pm(a,b) printf("%d %d\n", a, b)
#define cn(a) cin >> a
#define ct(a) cout << a << endl
#define isset(x,i) ((x>>i)&1)
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
using namespace std;
vector<int> prime_factor[1000005];
int prime[1000005], latest_pos[1000005], dp[100005], nums[100005];
void sieve()
{
	int i, j;
	fr(i, 2, 1000005)
	{
		if(prime[i]==0)
		{
			for(j = 2*i; j<1000005; j+=i)
			{
				prime[j] = 1;
				prime_factor[j].pb(i);
			}
			prime_factor[i].pb(i);
		}
	}
	return;
}
int main()
{
	int i, j, t, n, m, k, l, r, mini,cnt, maxi, temp, flag, result, min_idx;
	sieve();
	sc(t);
	while(t--)
	{
		fr(i, 0, 1000005)
			latest_pos[i] = -1;
		sc(n);
		fr(i, 0, n)
		{
			sc(nums[i]);
			dp[i] = 0;
		}
		dp[0] = 1;
		result = 1;
		fr(i, 0, prime_factor[nums[0]].sz())
			latest_pos[prime_factor[nums[0]][i]] = 0;
		fr(i, 1, n)
		{
			min_idx = n+10;
			fr(j, 0, prime_factor[nums[i]].sz())
			{
				min_idx = min(min_idx, i - latest_pos[prime_factor[nums[i]][j]]);
				latest_pos[prime_factor[nums[i]][j]] = i;
			}
			dp[i] = min(dp[i-1]+1, min_idx);
			result = max(result, dp[i]);
		}
		if(result==1)
			result = -1;
		pr(result);
	}
return 0;
}
