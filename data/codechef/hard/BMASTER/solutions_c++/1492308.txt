#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
int dx[] = {-1,0,1,0},dy[] = {0,1,0,-1};
LL where[34][34][6],cross[34][34];
int bitcount[1<<17],p[6][2];
int half = (1<<17) - 1;
LL summa[(int)1e7];
int dir[6][2] = 
{
	{0,2},
	{3,1},
	{0,1},
	{1,2},
	{2,3},
	{3,0}
};
int bitcnt(LL x)
{
	return bitcount[x & half] + bitcount[x >> 17];
}
int main()
{
	#ifndef ONLINE_JUDGE
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
	#endif
	int n,m,q,sx,sy;
	cin>>n>>m>>q>>sx>>sy;
	--sx;
	--sy;
	map<LL, int> d;
	for(int i = 0; i < 6; i++)
		for(int j = 0; j < 2; j++)
			cin>>p[i][j];
	for(int mask = 0; mask < (1<<17); mask++)
		bitcount[mask] = bit(mask);
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
		{
			cross[i][j] = 0;
			for(int k = 0; k < n; k++)
				cross[i][j] |= 1LL<<(k * m + j);
			for(int k = 0; k < m; k++)
				cross[i][j] |= 1LL<<(i * m + k);
		}
	for(int i = 0; i < n; i++)
		for(int j = 0; j < m; j++)
			for(int k = 0; k < 6; k++)
			{
				LL curmask = 1LL<<(i * m + j);
				for(int t = 0; t < 2; t++)
				{
					int x = i;
					int y = j;
					int what = dir[k][t];
					int val = p[k][t];
					x += dx[what] * val;
					y += dy[what] * val;
					while(0 <= x && x < n && 0 <= y && y < m)
					{
						curmask |= 1LL<<(x * m + y);
						x += dx[what] * val;
						y += dy[what] * val;
					}
				}
				where[i][j][k] = curmask;
			}
	LL cur = 1LL<<(sx * m + sy);
	d[cur] = 0;
	summa[0] = 1;
	LL total = 1;
	int idx = 1;
	int pre,per;
	LL persum;
	while(true)
	{
		LL next = 0;
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				if (cur & (1LL<<(i * m + j)))
					next ^= where[i][j][bitcnt(cur & cross[i][j]) % 6];
		total += bitcnt(next);
		if (d.count(next) != 0)
		{
			pre = d[next];
			per = idx - d[next];
			persum = total - summa[d[next]];
			break;
		}
		summa[idx] = total;
		d[next] = idx++;
		cur = next;
	}
	LL v;
	for(int qq = 0; qq < q; qq++)
	{
		scanf("%lld",&v);
		LL res = 0;
		if (v < idx) res = summa[v]; else
		{
			v -= pre;
			res = res + persum * (v / per);
			v %= per;
			res = res + summa[pre + v];
		}
		printf("%lld\n",res);
	}
	return 0;	
}
