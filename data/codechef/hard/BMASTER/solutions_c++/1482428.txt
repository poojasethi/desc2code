#include <cstdio>
#include <vector>
#include <cstring>
#include <iostream>
#include <map>
#include <bitset>

#define REP(i,x) for(int i=0 ; i<(int)(x) ; i++)
#define LL long long

using namespace std;

typedef unsigned long long Hash;

int mask[1<<18];
Hash maskX[34],maskY[34];

int GetSum(Hash h){
	Hash m = (1<<18)-1;
	return mask[(h&m)]+mask[((h>>18)&m)];
}

int GetX(int cx,int cy,Hash grid){ 
	int res = 0;
	res += GetSum(grid&maskX[cx]);
	res += GetSum(grid&maskY[cy]);
	res -= 1;
	return res;
}

bool IsValid(int x,int y,const int W,const int H){
	return x>=0 && y>=0 && x<W && y<H;
}

void write(Hash h,int N,int M){
	REP(y,M){
		REP(x,N)cout << ((h>>(y*N+x))&1);
		cout << endl;
	}
	cout << endl;
}

int main(){
	for(Hash i=0 ; i<(1<<18) ; i++){
		mask[i] = 0;
		REP(j,18)if(i>>j&1)mask[i]++;
	}
	for(int N,M,Q ; cin>>M>>N>>Q ; ){
		REP(y,M){
			REP(x,N){
				maskX[x] |= 1LL<<(y*N+x);
				maskY[y] |= 1LL<<(y*N+x);
			}
			//write(maskY[y],N,M);
		}
		int Sx,Sy;
		cin >> Sy >> Sx;
		Sy--;Sx--;
		int P[6][2];
		REP(i,6){
			REP(j,2)cin >> P[i][j];
		}
		Hash prev = 0;
		vector<LL> sum;
		map<Hash,int> gridNumber;
		sum.push_back(0);
		prev |= 1LL<<(Sy*N+Sx);
		int freq = 0;
		int from = 0;
		REP(_i,1000000000){
			
			Hash h = prev;
			if(gridNumber.count(h)>0){
				from = gridNumber[h];
				freq = _i-gridNumber[h];
				break;
			}
			gridNumber[h] = _i;
			long long s = sum[_i]+GetSum(prev);
			sum.push_back(s);

			Hash next = 0;
			//write(prev,N,M);
			REP(y,M)REP(x,N)if((prev>>(y*N+x))&1){
				int X = GetX(x,y,prev)%6;
				//cout << X << endl;
				const int DY[2][6] = {{-1,0,-1,0,1,0},{1,0,0,1,0,-1}};
				const int DX[2][6] = {{0,-1,0,1,0,-1},{0,1,1,0,-1,0}};
				REP(k,2){
					for(int c=1 ;; c++){
						int nx = x+P[X][k]*DX[k][X]*c;
						int ny = y+P[X][k]*DY[k][X]*c;//cout << nx << " " << ny << endl;
						if(!IsValid(nx,ny,N,M))break; 
						next ^= 1LL<<(ny*N+nx);
					}
				}
				next ^= 1LL<<(y*N+x);
			}

			swap(prev,next);
		}
		long long rangeSum = sum[from+freq]-sum[from];
		REP(q,Q){
			long long T;cin >> T;
			T++;
			if(T<sum.size())cout << sum[T] << endl;
			else{
				T--;
				long long S = T-from+1;
				long long d = S/freq;
				long long m = S%freq;
				cout << d*rangeSum+sum[m+from] << endl;

			}
		}
		break;
	}
	return 0;
}
	