#include <cstdio>

typedef long long LL;

void swap(int &A, int &B) {
	int C = A;
	A = B;
	B = C;
}

//U=0, D=1, L=2, R=3
int dx[4] = {-1, 1, 0, 0};
int dy[4] = {0, 0, -1, 1};

int dir[6][2] = {
	{0, 1},
	{2, 3},
	{0, 3},
	{3, 1},
	{1, 2},
	{2, 0}
};

int N,M,Q;
int Sx,Sy;
int p[6][2];

void read() {
	scanf("%d %d %d %d %d", &N, &M, &Q, &Sx, &Sy);
	--Sx; --Sy;
	for (int k = 0; k < 6; ++k)	{
		scanf("%d %d", &p[k][0], &p[k][1]);
	}
}

const int maxNM = 34;
LL move[maxNM][6];
const int H = maxNM / 2;
const int HALF = (1 << H) - 1;
int bitcnt[1 << H];
LL col[maxNM];
int r6[maxNM];

void precalc()
{
	for (int i = 0; i < M + N; ++i) {
		r6[i] = i % 6;
	}

	int flip=0;
	if (M > N) {
		swap(N, M);
		swap(Sx, Sy);
		flip = 2;
	}

	for (int i = 0; i < N; ++i) {
		for (int j = 0; j < M; ++j) {
			for (int k = 0; k < 6; ++k) {
				LL grid = 1LL << (M * i + j);
				for (int h = 0; h < 2; ++h) {
					int x = i, y = j;
					while (true) {
						x += dx[dir[k][h] ^ flip] * p[k][h];
						y += dy[dir[k][h] ^ flip] * p[k][h];
						if (!(0 <= x && x < N && 0 <= y && y < M)) {
							break;
						}
						grid |= 1LL << (M * x + y);
					}
				}
				move[M * i + j][k] = grid;
			}
		}
	}

	bitcnt[0] = 0;
	for (int i = 1; i < (1 << H); ++i) {
		bitcnt[i] = bitcnt[i / 2] + i % 2;
	}

	for (int j = 0; j < M; ++j) {
		col[j] = 0;
		for (int i = 0; i < N; ++i) {
			col[j] += 1LL << (M * i + j);
		}
	}
}

int BITCNT(LL grid) {
	return bitcnt[grid & HALF] + bitcnt[grid >> H & HALF];
}


// some upper bound on the index of the first repetition
const int PER = 350000;
// the next prime after 2 * PER
const int SIZE = 700001;
LL grid;
int len;
LL board[PER];
int ind[SIZE];
int sum[PER];

void init() {
	for (int i = 0; i < SIZE; ++i) {
		ind[i] = -1;
	}
	grid = 1LL << (M * Sx + Sy);

	len = 1;
	ind[grid % SIZE] = 0;
	board[0] = grid;
	sum[0] = 1;
}

int main() {
	read();
	precalc();
	init();

	int r[maxNM], c[maxNM];
	int q = 0, p = 0;
	while (p == 0) {
		for (int i = 0; i < N; ++i) {
			// we use bitcnt instead of BITCNT since M <= N
			// after possible flip we made in precalc
			r[i] = bitcnt[(grid >> (M * i)) & ((1 << M) - 1)];
		}
		for (int j = 0; j < M; ++j) {
			c[j] = BITCNT(grid & col[j]);
		}

		// the only O(N * M) part of the calculation of f(grid)
		LL new_grid=0;
		for (int i = 0; i < N; ++i) {
			for (int j = 0; j < M; ++j) {
				if (grid & 1LL << (M * i + j)) {
					new_grid ^= move[M * i + j][r6[r[i] + c[j] - 1]];
				}
			}
		}

		board[len] = new_grid;
		sum[len] = sum[len - 1] + BITCNT(new_grid);

		int pos = new_grid % SIZE;
		for(;;)
		{
			if (ind[pos] < 0) {
				ind[pos] = len;
				++len;
				break;
			} else {
				if (board[ind[pos]] == board[len]) {
					q = ind[pos];
					p = len;
					break;
				} else {
					++pos;
					if (pos == SIZE) {
						pos = 0;
					}
				}
			}
		}
		grid = new_grid;
	}

	int w = p - q; // period
	LL period_sum = sum[p] - sum[q];
	for (int i = 0; i < Q; ++i) {
		LL T;
		scanf("%lld", &T);
		LL ans;
		if (T <= p) {
			ans=sum[T]; 
		} else {
			LL L = (T - q) / w;
			int r = T - L * w;
			ans = sum[r] + L * period_sum;
		}
		printf("%lld\n", ans);
	}
	return 0;
}
