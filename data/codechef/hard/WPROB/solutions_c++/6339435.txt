#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <cstdlib>
using namespace std;
typedef long long ll;
const int INF = 0x3f3f3f3f;
const int N = 1e5 + 10;
char s[N];
ll dp[N][3];
int color[3], hash[256];
int len;
void init() {
	for(int i = 0; i < 3; i++)
		color[i] = i;
}
ll solve() {
	ll cnt = 0;
	for(int i = 1; i <= len; i++) {
		if(color[0] == hash[s[i]]) {
			cnt += (dp[i][color[1]] + dp[i][color[2]]);
		}
	}
	for(int i = 1; i <= len; i++) {
		if(color[1] == hash[s[i]]) {
			cnt += dp[i][color[2]];
		}
	}
	return cnt;
}
int main() {
	hash['r'] = 0; hash['g'] = 1; hash['b'] = 2;

	int T;
	scanf("%d", &T);
	while(T--) {
		init();

		scanf("%s", s+1);
		len = strlen(s+1);

		for(int j = 0; j < 3; j++) dp[0][j] = 0;
		for(int i = 1; i <= len; i++) {
			for(int j = 0; j < 3; j++)
				dp[i][j] = dp[i-1][j];
			if(s[i] == 'r') dp[i][0]++;
			else if(s[i] == 'g') dp[i][1]++;
			else if(s[i] == 'b') dp[i][2]++;
		}
		ll MIN = solve();
		while(next_permutation(color, color + 3)) {
			MIN = min(MIN, solve());
		}
		printf("%lld\n", MIN);
	}
	return 0;
}