#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define mod 1000000007
#define fi first
#define se second
#define si(x)   scanf("%d",&x)
#define sl(x)   scanf("%I64d",&x)
#define CLR(x)  memset(x,0,sizeof(x))
#define RESET(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define pb push_back
#define mp make_pair
#define debug(x) cerr<<">value ("<<#x<<") : "<<x<<endl;

pii course[123456];
bool activ[123456],la[123456];
vector<pii > crse;
bool comp(pii A,pii B)
{
    if(A.se!=B.se)
    return A.se<B.se;
    else return A.fi>B.fi;
    
}
vector<int > roots;
int anc[17][123456];
vector<int> adj[123456];
void dfs(int node,int par)
{
    anc[0][node]=par;
    for(int i=0;i<adj[node].size();i++)
    {
        dfs(adj[node][i],node);
    }
}

int bs(int x,int hi)
{
    int lo=0;
    int mid=(lo+hi)/2;
    int cnt=0;
    while(lo<hi){
        cnt++;
        if(cnt>=20) exit(1);
        mid=(lo+hi)/2;
    if(crse[mid].fi>=x)
        hi=mid;
    else
        lo=mid+1;
    }
    if(crse[hi].fi>=x) return hi;
    return -1;
    
}
int solve(int sti,int end)
{
    int ans=0;
    if(crse[sti].se>end) return 0;
    for(int i=16;i>=0;i--)
    {
        if(anc[i][sti]!=-1&&crse[anc[i][sti]].se<=end)
        {
            sti=anc[i][sti];
            ans+=1<<i;
        }
    }
    return ans+1;
}
int bs2(int index,int hi)
{
    int lo=index+1;
    while(lo<hi)
    {
        int mid=(lo+hi)/2;
        if(crse[mid].fi>crse[index].se)
        {
            hi=mid;
        }
        else lo=mid+1;
    }
    if(crse[hi].fi>crse[index].se)
        return hi;
    else return -1;
}
int main()
{
    int n,q,i,j;scanf("%d%d",&n,&q);
    for (i=1; i<=n; i++) {
    scanf("%d%d",&course[i].fi,&course[i].se);
    }
    sort(course+1,course +n +1,comp);
    
    // remove containing courses
    memset(activ,1,sizeof(activ));
    int curr=1;
    for(i=2;i<=n;i++)
    {
        if(course[i].fi<=course[curr].fi)
        {
            activ[i]=0;
        }
        else
        {
            curr=i;
        }
    }
    for(i=1;i<=n;i++)
    {
        if(activ[i]) crse.pb(course[i]);
    }
    n=(int)crse.size();
   // cout<<n<<endl;
    memset(la,0,sizeof(la));
    for(i=0;i<=n-1;i++)
    {
        /*j=i-1;
        while(j>=0&&la[j]==0)
        {
            if(crse[j].se<crse[i].fi)
            {
                adj[i].push_back(j);
                la[j]=1;
            }
            j--;
        }*/
        int ind=bs2(i,n-1);
        if(ind==-1)
        {
            roots.push_back(i);
            
        }
        else adj[ind].push_back(i);
    }
 
   // for(i=0;i<=n-1;i++)
       // if(la[i]==0)
     //       roots.push_back(i);
    
    memset(anc,-1,sizeof(anc));

    for(i=0;i<roots.size();i++)
        dfs(roots[i],-1);
    for(i=1;i<=16;i++)
    {
        for(j=0;j<n;j++)
        {
            if(anc[i-1][j]!=-1)
            {
                anc[i][j]=anc[i-1][anc[i-1][j]];
            }
        }
    }
    for(i=1;i<=q;i++)
    {
        //cout<<roots.size();
        int x,y;scanf("%d%d",&x,&y);
        int st=bs(x,n-1);
     //   cout<<" "<<st<<endl;
        if(st==-1)
        {
            printf("0\n");
        }
        else
        printf("%d\n",solve(st,y));
    }
}