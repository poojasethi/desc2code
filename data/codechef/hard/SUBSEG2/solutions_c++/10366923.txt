/*
        SUPTO
        UNIVERSITY OF DHAKA
*/
#include <bits/stdc++.h>
using namespace std;
#define D(x) cerr<<#x " = "<<(x)<<endl
#define pb push_back
#define ff first
#define ss second
#define mem(a) memset(a,0,sizeof(a))
#define _set(a) memset(a,-1,sizeof(a))
typedef long long int ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef pair<int,ll> pil;
#define eps 1e-11
#define MAX 100000
#define MAXL 20
#define MAXE 100000
//ll mod = 1000000000+7;
//int dx[] = {0,0,1,-1};
//int dy[] = {1,-1,0,0};
//int dx[] = {-1,-1,-1,0,0,1,1,1};
//int dy[] = {-1,0,1,-1,1,-1,0,1};
pii plan[MAX+5];
vector < pii > v;
vector < int > tmp;
int par[MAX+5], P[MAX+5][20], stp;
bool cmp(pii a, pii b)
{
    if(a.ss == b.ss) return a.ff > b.ff;
    return a.ss < b.ss;
}
void preProcess(int n)
{
    int i, j;
    for(i = 0; i < n; i++) P[i][0] = par[i];
    for(j = 1; (1<<j) < n; j++)
    {
        for(i = 0; i < n; i++)
        {
            if(P[i][j-1] != -1) P[i][j] = P[P[i][j-1]][j-1];
            else P[i][j] = -1;
        }
    }
    stp = j-1;
}
int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    //ios_base::sync_with_stdio(false);
    int n, q, i, s, e, j;
    scanf("%d %d", &n, &q);
    for(i = 0; i < n; i++) scanf("%d %d", &plan[i].ff, &plan[i].ss);
    sort(plan, plan+n, cmp);
    v.pb(plan[0]);
    tmp.pb(plan[0].ff);
    int last = 0;
    for(i = 1; i < n; i++)
    {
        if(plan[last].ff < plan[i].ff)
        {
            v.pb(plan[i]);
            tmp.pb(plan[i].ff);
            //printf("%d %d\n", plan[i].ff, plan[i].ss);
            last = i;
        }
    }
    v.pb(make_pair(10000000, 10000000));
    tmp.pb(10000000);
    n = v.size()-1;
    for(i = 0; i < n; i++)
    {
        int id = lower_bound(tmp.begin(), tmp.end(), v[i].ss+1)-tmp.begin();
        par[i] = id;
    }
    par[n] = -1;
    n++;
    preProcess(n);
    while(q--)
    {
        scanf("%d %d", &s, &e);
        int id = lower_bound(tmp.begin(), tmp.end(), s)-tmp.begin();
        int ans = 0;
        if(v[id].ss <= e) ans++;
        for(j = stp; j >= 0; j--)
        {
            if(P[id][j] != -1 && v[P[id][j]].ss <= e)
            {
                ans += (1<<j);
                id = P[id][j];
            }
        }
        printf("%d\n", ans);
    }
    return 0;
}
