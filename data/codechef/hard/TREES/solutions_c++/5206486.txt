#include<iostream>
#include<stdio.h>
#include<string.h>
#include<vector>
#include<algorithm>
#define ll long long 
using namespace std;

ll dp1[101][101], dp2[101][101];
vector<int> adj[101];
int parent[101], n, k;
ll doit1(int, int);
ll doit2(int, int);
ll doit2(int node,int maxlen)
{
	if(maxlen <= 0)return 1;

	ll &ret = dp2[node][maxlen];

	if(ret != -1)return ret;

	ret = 0;

	for(int i=0;i<(int)adj[node].size();i++)
	{
		if(adj[node][i] == parent[node])continue;
		
		ll tmp = 1;

		for(int j=0;j<i;j++)
		{
			if(adj[node][j] == parent[node])continue;

			int len = min(maxlen - 1, k - 1 - maxlen);

			if(len >= 0)
				tmp *= (1 + doit1(adj[node][j], len));
		}

		tmp *= doit2(adj[node][i], maxlen - 1);

		for(int j=i+1;j<(int)adj[node].size();j++)
		{
			if(adj[node][j] == parent[node])continue;

			int len = min(maxlen - 2, k - 1 - maxlen);

			if(len >= 0)
				tmp *= (1 + doit1(adj[node][j], len));
		}
	
		ret += tmp;
		
	}

	return ret;
}
ll doit1(int node, int maxlen)
{
	if(maxlen == 0)return 1;

	ll &ret = dp1[node][maxlen];

	if(ret != -1)return ret;
	
	ret = 0;

	ret += doit1(node, maxlen - 1) + doit2(node, maxlen);

	return ret;
}

void doit(int cur, int par)
{
	parent[cur] = par;

	for(int i=0;i<(int)adj[cur].size();i++)
	{
		if(adj[cur][i] == par)continue;
		doit(adj[cur][i], cur);		
	}
	return ;
}
int main()
{
		int t;
		cin>>t;

		while(t--)
		{
				cin>>n>>k;
				for(int i=0;i<n;i++)
					adj[i].clear();
				for(int i=0;i<n-1;i++)
				{
						int x, y;
						cin>>x>>y;
						adj[x].push_back(y);
						adj[y].push_back(x);
				}

				memset(dp1, -1, sizeof dp1);
				memset(dp2, -1, sizeof dp2);

				doit(0, -1);
		
				ll ans = 0;
	
				for(int i=0;i<n;i++)
					ans += doit1(i, k);
		
				cout<<ans<<"\n";
		}
		return 0;
}
