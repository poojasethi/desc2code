using namespace std;
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<set>
#include<ctime>
//#include<conio.h>

#define SZ size()
#define BG begin()
#define ED end()
#define PB push_back
#define MP make_pair
#define ST first
#define ND second
#define TR(c, it) for(typeof(c.BG) it = c.BG; it != c.ED; ++it)
#define ALL(c) a.begin(), a.end()
#define FOR(i, a, b) for(int i=(a), _b=(b); i<_b; ++i)
#define FORD(i, a, b) for(int i=(a), _b=(b); i>=_b; --i)
#define FORE(i, a, b) for(int i=(a), _b=(b); i<=_b; ++i)
#define EXIST(c, x) (c.find(x) != c.ED)
#define endl putchar('\n')
#define ENDL(a) ((a)?'\n':' ')
#define RI ({int n; scanf("%d", &n); n;})

typedef pair<int, int> II;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<II> VII;
typedef vector<VII> VVII;
typedef long long LL;

const int maxn = 65;
const LL oo = 1000000000000000000ll;

int n, k;
LL res;
bool c[maxn];
vector<int> ds[maxn];

void input() {
	int u, v;
	scanf("%d%d", &n, &k);
	FOR(i, 0, n) ds[i].clear();
	FOR(i, 1, n) {
		scanf("%d%d", &u, &v);
		ds[u].PB(v);
		ds[v].PB(u);
	}
	memset(c, false, sizeof(c));
}

void visit(int u, LL *ua, LL *ub) {
	c[u] = true;
	FORE(i, 0, k+1) {
		ua[i] = 0;
		ub[i] = 1;
	}
	ub[0] = 0;
	ua[1] = 1;  ub[1] = 1;
	LL va[maxn]={0}, vb[maxn]={0};
	FOR(i, 0, ds[u].size()) {
		int v = ds[u][i];   
		if (c[v]) continue;
		visit(v, va, vb);
		FORE(j, 2, k+1) {
			int t=j-1;
			if (t > k + 1 - j) t = k + 1 - j;
			ua[j] += ua[j]*vb[t];
			if (t < j-1) t++;
			ua[j] += va[j-1]*ub[t];
		}
		
		FORE(j, 2, k+1) ub[j] = ua[j] + ub[j-1];
	}
	res += ub[k+1];
}

main(){
//    freopen(".inp", "r", stdin);
//    freopen(".out", "w", stdout);
	
	int t;
	scanf("%d", &t);
	
	while (t--) {
		input();
		res = 0;
		LL ua[maxn]={0}; LL ub[maxn]={0};
		visit(0, ua, ub);
		printf("%lld\n", res);
	}
 //   getch();
}