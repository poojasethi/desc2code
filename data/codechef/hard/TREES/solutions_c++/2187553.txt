#include<stdio.h>
#include<string.h>
#include<vector>
#include <algorithm>    // std::max
#define ff(pp) for(i=0;i<pp;i++)
#define print(a) for(i=0;i<n;i++){for(j=0;j<a[i].size();j++)printf("%d ",a[i][j]); printf("\n");}
#define memset(a,v) memset(a,v,sizeof(a))
#define pb push_back
#define sz size

using namespace std;
typedef long long ll;

vector < vector<int> > a(65,vector <int> ());
int p[65],fl[65];
ll wy1[65][65],wy2[65][65],ans;
int n,k;

void dfs_parentfind(int v,int par){//parent
    p[v]=par;
    fl[v]=1;
    int i,l=a[v].sz();
    for(i=0;i<l;i++){
        if(!fl[a[v][i]])dfs_parentfind(a[v][i],v);
    }
}

void dfs(int v){
    //printf("v:: %d\n",v);
    int i,j,l=a[v].sz(),p;
    ll s,t;
    for(i=0;i<l;i++){
        dfs(a[v][i]);
    }
    for(p=2;p<=k;p++){//p:pathlength
        s=0;
        for(j=0;j<l;j++){
            i=j-1;
            t=1;
            while(i>=0){
                t*=wy1[a[v][i]][min(k-1-p+1,p-2)];
                i--;
            }
            i=j+1;
            while(i<l){
                t*=wy1[a[v][i]][min(k-1-p+1,p-1)];
                i++;
            }
            t*=wy2[a[v][j]][p-1];
            s+=t;
        }
        wy2[v][p]=s;
        wy1[v][p]=wy1[v][p-1]+wy2[v][p];
    }
    ans+=wy1[v][k]-1;
}

int main(){
   // fill(a.begin(), a.end(), 0);
    vector< vector<int> >::iterator row=a.begin();
    int i,j,l,t;
    scanf("%d",&t);
    while(t--){
        row=a.begin();
        while(row!=a.end()){row->clear();row++;}
        memset(p,0);
        memset(wy1,0);
        memset(wy2,0);
        memset(fl,0);
        scanf("%d%d",&n,&k);
        k++;
        for(i=0;i<n-1;i++){
            scanf("%d%d",&j,&l);
            a[j].pb(l);
            a[l].pb(j);
        }
        dfs_parentfind(0,-1);
        row=a.begin();
        while(row!=a.end()){row->clear();row++;}
        //creating rooted tree
        for(i=1;i<n;i++){
            a[p[i]].pb(i);
        }
        //a[0].pb(-1);
      //  print(a);
        //return 0;
       for(i=0;i<n;i++)for(j=0;j<2;j++)wy2[i][j]=1;
        for(i=0;i<n;i++)wy1[i][1]=2,wy1[i][0]=1;
        ans=0;
        dfs(0);
     //   printf("way1:\n\n");for(i=0;i<n;i++){printf("%d: ",i); for(j=0;j<=k;j++)printf("%lld ",wy1[i][j]); printf("\n");}printf("\n\n way2:\n");
      //  for(i=0;i<n;i++){printf("%d: ",i); for(j=0;j<=k;j++)printf("%lld ",wy2[i][j]); printf("\n");}
        printf("%lld\n",ans);
    }
    return 0;
}
