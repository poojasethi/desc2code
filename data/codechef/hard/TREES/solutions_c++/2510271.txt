#include<stdio.h>
#include<string.h>
#include<vector>
#define minimum(a,b) (a <= b) ? a : b
#include<algorithm>
using namespace std;
typedef long long int ll;
ll ways1[65][65],ways2[65][65],visited[65],prod1[65],prod2[65];
vector<vector<int> > ed,child;
int k;
void dfs(int u){
    int v,i,l = ed[u].size(),p,j;
    visited[u] = 1;
    for(v=0;v<l;v++)
        if(visited[ed[u].at(v)] == 0){
            child[u].push_back(ed[u].at(v));
            dfs(ed[u].at(v));
        }
    //printf("Hello %d %d\n",u,child[u].size());
    /*if(child[u].size() == 0) ways1[u][0] = ways2[u][0] = 1 ;
    else {*/
    l = child[u].size() ;
    prod1[0] = prod2[l+1] = 1 ;
    for(p = 2;p<= k;p++){
        for(j=0;j<l;j++)
            if((k-1-p+1) < 0 || p < 2)
                prod1[j+1] = 1;
            else prod1[j+1] = prod1[j]*ways1[child[u].at(j)][min(p-2,k-1-p+1)];
        for(j=l-1;j>=0;j--)
            if((k-1-p+1) < 0 || p < 1)
                prod2[j+1] = 1 ;
            else
                prod2[j+1] = prod2[j+2]*ways1[child[u].at(j)][min(p-1,k-1-p+1)];
        for(i=0;i<l;i++){
            ways2[u][p] += prod1[i]*ways2[child[u].at(i)][p-1]*prod2[i+2];
	    //if(u == 2)printf("\n%d %lld %lld %lld %lld",p,prod1[i],prod2[i+1],ways2[child[u].at(i)][p-1],ways2[u][p]);
        }
        ways1[u][p] = ways1[u][p-1] + ways2[u][p];
        //printf("\n%d %d %lld",u,p,ways2[u][p]);
    }
}
int main(){
    int t,n,u,v,i;
    ll ans ;
    scanf("%d",&t);
    while(t--){
        memset(ways1,0,sizeof(ways1));
        memset(prod1,0,sizeof(prod1));
        memset(prod2,0,sizeof(prod2));
        memset(visited,0,sizeof(visited));
        memset(ways2,0,sizeof(ways2));
        scanf("%d%d",&n,&k);
        k++;
        ed.clear(); child.clear();
        ed.resize(n+1);
        child.resize(n+1);
        for(i=1;i<n;i++){
            scanf("%d%d",&u,&v);
            ed[u].push_back(v); //printf("%d \n",ed[u].size());
            ed[v].push_back(u); //printf("%d \n",ed[v].size());
        }
        //for(i=0;i<n;i++) ways1[i][0] = ways2[i][0] = 1;
        for(i=0;i<n;i++)for(int j=0;j<2;j++)ways2[i][j]=1;
        for(i=0;i<n;i++)ways1[i][1]=2,ways1[i][0]=1;
        dfs(0);
        ans = 0 ;
        for(i=0;i<n;i++)
            ans += ways1[i][k]-1 ;
        printf("%lld\n",ans);
    }
    return 0;
}
