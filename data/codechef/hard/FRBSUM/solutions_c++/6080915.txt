#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <cctype>
#include <utility>
#include <queue>
#include <cmath>
using namespace std;

#define MX 100005
#define X first
#define Y second

typedef pair<int, int> pii;

pii p[MX];
int x[MX], q[MX], qn;
vector<int> query[MX];
int tree[MX], ans[MX], prv[MX], cur[MX], pos[MX];

void add(int u, int val) {
	for (; u <= qn; u += u & -u) tree[u] += val;
}

int get(int u) {
	int sum(0);
	for (; u; u -= u & -u) sum += tree[u];
	return sum;
}

int n, m;

int main() {
	#ifndef ONLINE_JUDGE
		freopen("in.txt", "r", stdin);
		freopen("out.txt", "w", stdout);
	#endif
	
	int i, j, id, a, L, R, times;
	scanf("%d", &n);
	for (i = 1; i <= n; i++) {
		scanf("%d", &a);
		p[i] = pii(a, i);
	}
	sort(p + 1, p + n + 1);
	for (i = 1; i <= n; i++) {
		q[++qn] = p[i].X;
		for (j = i; j <= n && p[j].X == p[i].X; j++) x[p[j].Y] = qn;
		i = j - 1;
	}
	for (scanf("%d", &m), i = 1; i <= m; i++) {
		scanf("%d%d", &L, &R);
		query[R].push_back(i);
		if (L == 1) continue;
		query[L - 1].push_back(-i);
	}
	int tot = m;
	memset(prv, -1, sizeof prv);
	for (times = 1; times <= 32 && tot; times++) {
		for (i = 1; i <= m; i++) if (!ans[i]) {
			if (prv[i] == cur[i]) ans[i] = cur[i] + 1, tot--;
			else pos[i] = upper_bound(q, q + qn + 1, cur[i] + 1) - q - 1;
			prv[i] = cur[i], cur[i] = 0;
		}
		for (i = 1; i <= n; i++) {
			add(x[i], q[x[i]]);
			for (j = query[i].size() - 1; j >= 0; j--) {
				id = query[i][j];
				if (id < 0 && !ans[-id]) cur[-id] -= get(pos[-id]);
				else if (id > 0 && !ans[id]) cur[id] += get(pos[id]);
			}
		}
		for (i = 1; i <= qn; i++) tree[i] = 0;
	}
	for (i = 1; i <= m; i++) printf("%d\n", ans[i]);
	return 0;
}