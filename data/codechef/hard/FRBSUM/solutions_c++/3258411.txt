#include <iostream>
#include <cstdio>
#include <vector>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <set>
#include <climits>
using namespace std;
#define N 100005
#define M 2000005
int id(int l , int r) {return l + r | l != r;}
#define MID int mid = (l + r) >> 1;
#define ID id(l , r)
#define Left l , mid
#define Right mid + 1 , r
#define LL child[p][0]
#define RR child[p][1]
#define QL child[q][0]
#define QR child[q][1]
int n , a[N] , d[N] , m , Q;
struct Functional_stree
{
  int nodecnt;
  int root[N];
  int child[M][2] , sum[M];
  void clear()
  {
    nodecnt = 0;
    root[0] = child[0][0] = child[0][1] = sum[0] = 0;
  }
  int newnode()
  {
    child[++ nodecnt][0] = child[nodecnt][1] = 0;
    sum[nodecnt] = 0;
    return nodecnt;
  }
  void insert(int p , int q , int l , int r , int x)
  {
    if (l == r) {sum[p] += d[l];return;} MID;
    if (x <= mid)
    {
      LL = newnode() , RR = QR , sum[LL] = sum[QL];
      insert(LL , QL , Left , x);
    }
    if (x > mid)
    {
      RR = newnode() , LL = QL , sum[RR] = sum[QR];
      insert(RR , QR , Right , x);
    }
    sum[p] = sum[LL] + sum[RR];
  }
  int Query(int p , int q , int l , int r , int x)
  {
    if (!x) return 0;
    if (r <= x) return sum[p] - sum[q]; MID; int res = Query(LL , QL , Left , x);
    if (x > mid) res += Query(RR , QR , Right , x);
    return res;
  }
};

Functional_stree t;

void work()
{
  int i , x , y , k , S;
  t.clear();
  for (i = 1 ; i <= m ; ++ i)
    scanf("%d",&a[i]) , d[i] = a[i];
  sort(d + 1 , d + m + 1);
  n = unique(d + 1 , d + m + 1) - d - 1;
  for (i = 1 ; i <= m ; ++ i)
    a[i] = lower_bound(d + 1 , d + n + 1 , a[i]) - d;
  for (i = 1 ; i <= m ; ++ i)
  {
    t.root[i] = t.newnode();
    t.insert(t.root[i] , t.root[i - 1] , 1 , n , a[i]);
  }
  scanf("%d",&Q);
  while (Q --)
  {
    scanf("%d%d",&x,&y);
    S = 0;
    while (1)
    {
        i = upper_bound(d + 1 , d + n + 1 , S + 1) - d - 1;
        k = t.Query(t.root[y] , t.root[x - 1] , 1 , n , i);
        if (k == S) break; S = k;
    }
    printf("%d\n" , S + 1);
  }
}

int main()
{
  //srand((unsigned int)time(0));
  while (~scanf("%d",&m))
  //int _; cin >> _;while (_--)
    work();
  return 0;
}
