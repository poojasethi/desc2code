#include <vector>
#include <cstdio>
#include <algorithm>
#define MAX 100000
#define FOR(i,a,b) for(i=a;i<=b;i++)

using namespace std;

long int A[MAX+10];

struct data
{long int number,prefix_sum;};

struct node
{ vector <data> info; };

bool comp(data a,data b)
{return a.number<b.number;}

node segment_tree[3*MAX];

// builds segment tree with current node as parent &  beg and last marking ends of array which is converted into segment tree

void build_segment_tree(long int current_node,long int beg,long int last)
{
    long int left_child=2*current_node+1,right_child,i,mid; data temp;

    right_child=left_child+1;

    mid=(beg+last)/2;

    FOR(i,beg,last)
       {temp.number=temp.prefix_sum=A[i];segment_tree[current_node].info.push_back(temp);}

    sort(segment_tree[current_node].info.begin(),segment_tree[current_node].info.end(),comp);

    FOR(i,1,segment_tree[current_node].info.size()-1)
        segment_tree[current_node].info[i].prefix_sum+=segment_tree[current_node].info[i-1].prefix_sum;

    if(beg!=last)
    {
        build_segment_tree(left_child,beg,mid);
        build_segment_tree(right_child,mid+1,last);
    }
}

// query uses binary search(in segment tree) to get elements <= sum in the given range and returns the sum of those numbers

long int query(long int current_node,long int beg,long int last,long int left,long int right,long int sum)
{
  if(left>last || right<beg) return 0;

  long int left_child,right_child,mid,index;  data temp={sum,sum};

  left_child=2*current_node+1;     right_child=left_child+1;   mid=(beg+last)/2;

  if(left==beg && right==last)
  {
      index=upper_bound(segment_tree[current_node].info.begin(),segment_tree[current_node].info.end(),temp,comp)
            -segment_tree[current_node].info.begin();

      if(index==0) return 0;

      return segment_tree[current_node].info[index-1].prefix_sum;
  }

  return query(left_child,beg,mid,left,min(mid,right),sum)+query(right_child,mid+1,last,max(mid+1,left),right,sum);

}

int main()
{
    long int i,j,left,right,n,m,sum,new_sum,forbid_sum;

    scanf("%ld",&n);

    FOR(i,0,n-1)
        scanf("%ld",&A[i]);

    build_segment_tree(0,0,n-1);

    scanf("%ld",&m);

    FOR(j,1,m)
    {
        scanf("%ld%ld",&left,&right);
        left--;right--;
        sum=0;

        while(true)
        {
            new_sum=query(0,0,n-1,left,right,sum+1);
            if(sum==new_sum) break;
            sum=new_sum;
        }

        forbid_sum=sum+1;
        printf("%ld\n",forbid_sum);
    }

    return 0;
}

