#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<queue>
#include<vector>
#include<string>
using namespace std;

#define ll long long
#define llu unsigned long long int
#define N 100010
#define all(x) x.begin(),x.end()
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define inf 0x3f3f3f3f
int a[N],b[N],root[N],size;
struct node
{
	int l,r,ls,rs,sum;
}t[N*20];
int build(int l,int r)
{
	int now=size++;
	t[now].l=l,t[now].r=r,t[now].sum=0;
	if(l==r)return now;
	int m=(l+r)>>1;
	t[now].ls=build(l,m);
	t[now].rs=build(m+1,r);
	return now;
}
int insert(int x,int p)
{
	int now=size++;
	t[now]=t[x];t[now].sum+=b[p];
	int l=t[now].l,r=t[now].r;
	if(l==r)return now;
	int m=(l+r)>>1;
	if(p<=m)t[now].ls=insert(t[x].ls,p);
	else t[now].rs=insert(t[x].rs,p);
	return now;
}
int query(int l,int r,int s)
{
	if(b[t[r].l]>s)return 0;
	if(b[t[r].r]<=s)return t[r].sum-t[l].sum;
	return query(t[l].ls,t[r].ls,s)+query(t[l].rs,t[r].rs,s);
}
int get(int l,int r)
{
	int s=0,ns;
	while(1)
	{
		ns=query(root[l-1],root[r],s+1);
		if(ns==s)break;
		s=ns;
	}
	return s+1;
}
int main()
{
	int n,m,i,j,k,T;
	while(~scanf("%d",&n))
	{
		for(i=0;i<n;i++)scanf("%d",&a[i]),b[i]=a[i];
		sort(b,b+n);
		int tot=unique(b,b+n)-b;
		for(i=0;i<n;i++)
		a[i]=lower_bound(b,b+tot,a[i])-b;
		size=0;
		root[0]=build(0,tot-1);
		for(i=0;i<n;i++)
		root[i+1]=insert(root[i],a[i]);
		scanf("%d",&m);
		while(m--)
		{
			scanf("%d%d",&i,&j);
			printf("%d\n",get(i,j));
		}
	}
}