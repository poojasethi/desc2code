#include <iostream>
#include<cstdio>
#include<algorithm>
using namespace std;

struct tree
{
    long long int *ar;
    int sz;
    long long int *s;
}t[4*100005];

long long int a[100005];

void build(int node,int i,int j)
{
    int mid,lsz,rsz,x,y,l;
    if(i==j)
    {
        t[node].ar=new long long int[1];
        t[node].s=new long long int[1];
        t[node].ar[0]=a[i];
        t[node].sz=1;
        t[node].s[0]=a[i];
        return;
    }
    mid=(i+j)/2;
    build(2*node,i,mid);
    build(2*node+1,mid+1,j);
    lsz=t[2*node].sz;
    rsz=t[2*node+1].sz;
    t[node].sz=lsz+rsz;
    t[node].ar=new long long int[lsz+rsz];
    t[node].s=new long long int[lsz+rsz];
    x=0;y=0;l=0;
    while(x<t[2*node].sz&&y<t[2*node+1].sz)
    {
        if(t[2*node].ar[x]<t[2*node+1].ar[y])
        {
            t[node].ar[l]=t[2*node].ar[x];
            if(l==0)
            t[node].s[l]=t[2*node].ar[x];
            else
            t[node].s[l]=t[node].s[l-1]+t[2*node].ar[x];
            l++;x++;
        }
        else
        {
            t[node].ar[l]=t[2*node+1].ar[y];
            if(l==0)
            t[node].s[l]=t[2*node+1].ar[y];
            else
            t[node].s[l]=t[node].s[l-1]+t[2*node+1].ar[y];
            l++;y++;
        }
    }
    if(x!=t[2*node].sz)
    {
        while(x<lsz)
        {
            t[node].ar[l]=t[2*node].ar[x];
            if(l==0)
            t[node].s[l]=t[2*node].ar[x];
            else
            t[node].s[l]=t[node].s[l-1]+t[2*node].ar[x];
            l++;x++;
        }
    }
    if(y!=rsz)
    {
        while(y<rsz)
        {
            t[node].ar[l]=t[2*node+1].ar[y];
            if(l==0)
            t[node].s[l]=t[2*node+1].ar[y];
            else
            t[node].s[l]=t[node].s[l-1]+t[2*node+1].ar[y];
            l++;y++;
        }
    }
    return;
}

long long int query(int node,int i,int j,int x,int y,long long int sum)
{
    int low,hi,m,mid;
    if(i>=x&&j<=y)
    {
        low=0;hi=t[node].sz-1;
        while(low<hi)
        {
            m=(low+hi+1)/2;
            if(t[node].ar[m]<=sum)
            low=m;
            else
            hi=m-1;
        }
        if(t[node].ar[low]<=sum)
        return t[node].s[low];
        else
        return 0;
    }
    mid=(i+j)/2;
    if(y<=mid)
    return query(2*node,i,mid,x,y,sum);
    else if(x>mid)
    return query(2*node+1,mid+1,j,x,y,sum);
    else
    return query(2*node,i,mid,x,y,sum)+query(2*node+1,mid+1,j,x,y,sum);
}

int main()
{
    int n,m,i,x,y,k;
    long long int sum,nsum;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    scanf("%lld",&a[i]);
    build(1,0,n-1);
    scanf("%d",&m);
    while(m--)
    {
        scanf("%d%d",&x,&y);
        sum=0;
        while(1)
        {
            nsum=query(1,0,n-1,x-1,y-1,sum+1);
            if(nsum==sum)
            break;
            sum=nsum;
        }
        printf("%lld\n",sum+1);
    }
    return 0;
}
