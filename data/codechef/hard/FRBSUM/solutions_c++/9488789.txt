#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;

const int maxn = 1e5 + 10;

#define all(a) a.begin(), a.end()

int n, a[maxn], m, c[maxn];

typedef struct item * pitem;
pitem root[maxn], nilt;
struct item {
    int sum;
    pitem l, r;
    item() { sum = 0; l = r = nilt; }
};

void update(pitem &t, int l, int r, int i, int v) {
    if (i<l || i>r) return;
    pitem old = t;
    t = new item();
    *t = *old;
    if (l == r) {
        t->sum += v; return;
    }
    int mid = (l+r) / 2;
    update(t->l,l,mid,i,v);
    update(t->r,mid+1,r,i,v);
    t->sum = t->l->sum + t->r->sum;
}

void enter() {
    cin >> n;
    for(int i = 1; i <= n; ++i) {
        cin >> a[i]; c[i] = a[i];
    }
    sort(c+1, c+n+1);
    m = unique(c+1, c+n+1) - c - 1;
    nilt = new item(); nilt->l = nilt->r = nilt;
    root[0] = nilt;

    for(int i = 1; i <= n; ++i) {
        root[i] = root[i-1];
        int j = lower_bound(c+1, c+m+1, a[i]) - c;
        update(root[i], 1, m, j, a[i]);
    }
}

int get(pitem t1, pitem t2, int l, int r, int i) {
    if (l > i) return 0;
    if (r <= i) {
        return t1->sum - t2->sum;
    }
    int mid = (l+r) / 2;
    return get(t1->l, t2->l, l, mid, i) + get(t1->r,t2->r,mid+1,r,i);
}

void solve() {
    int test;
    cin >> test;
    for(; test; --test) {
        int l, r;
        cin >> l >> r;
        int ans = 0;
        while (1) {
            int i = upper_bound(c+1, c+m+1, ans+1) - c - 1;
            int old = ans;
            ans = get(root[r], root[l-1], 1, m, i);
            if (old == ans) break;
        }

        printf("%d\n", ans+1);
    }
}

int main() {
    ios_base :: sync_with_stdio(0);
   // freopen("frbsum.inp", "r", stdin);
    //freopen("fbrsum.out", "w", stdout);

    enter();
    solve();
}
