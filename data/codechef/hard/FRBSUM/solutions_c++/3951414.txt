#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;
 
const int MAX_N = 111111;
struct node{
       node *c[2]; int s;
}tn[MAX_N * 17], *rt[MAX_N], *nul; int tot;
int n, N;
int a[MAX_N], b[MAX_N], aa[MAX_N], sa[MAX_N];
 
void build(node* &x, node *y, int l, int r, int v){
     x = tn + (++tot);
     x->c[0] = y->c[0], x->c[1] = y->c[1]; x->s = y->s;
     x->s += b[v];
     if (l == r) return;
     int mid = (l + r) >> 1;
     if (v <= mid) build(x->c[0], y->c[0], l, mid, v);
        else build(x->c[1], y->c[1], mid + 1, r, v);
}
 
int query(node *x, node *y, int l, int r, int v){
    if (l == r) return x->s - y->s;
    int mid = (l + r) >> 1;
    if (v <= mid) return query(x->c[0], y->c[0], l, mid, v);
          else return query(x->c[1], y->c[1], mid + 1, r, v) + x->c[0]->s - y->c[0]->s;
}
 
int ask(int l, int r, int v){
    if (v < 1) return 0;
    int av;
    if (v >= b[N]) av = N;
    else{
         int v2 = lower_bound(b + 1, b + 1 + N, v + 1) - b;
         av = v2 - 1;
    }
    return query(rt[r], rt[l - 1], 1, N, av);
}
 
int main(){
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i){
        scanf("%d", &a[i]), b[i] = a[i];
        sa[i] = a[i] == 1;
    }
    for (int i = 1; i <= n; ++i)
        sa[i] += sa[i - 1];
    b[N = n + 1] = 1;
    sort(b + 1, b + 1 + N);
    N = unique(b + 1, b + 1 + N) - b - 1;
    for (int i = 1; i <= n; ++i)
        aa[i] = lower_bound(b + 1, b + 1 + N, a[i]) - b;
    
    nul = tn; nul->c[0] = nul->c[1] = tn; rt[0] = nul;
    for (int i = 1; i <= n; ++i)
        build(rt[i], rt[i - 1], 1, N, aa[i]);
        
    int m;
    scanf("%d", &m);
    for (int i = 1; i <= m; ++i){
        int l, r, now = 1;
        scanf("%d%d", &l, &r);
        for (now = 1; ; now++){
            int s = ask(l, r, now);
            int s2 = ask(l, r, now - 1);
            bool t = s - s2;
            if (t)
               now = s;
            else if (s == now - 1)
                    break;
                 else now = s;
        }
        printf("%d\n", now);
    }
}
/*
5
1 2 4 9 10
10
1 1
1 2
1 3
1 4
1 5
*/