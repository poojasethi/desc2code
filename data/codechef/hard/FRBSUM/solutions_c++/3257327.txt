#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <numeric>

using namespace std;

struct need {
    vector<int> v;
    vector<int> cum;
};
int a[100005];
need tree[300005];

vector<int> mergeseg(vector<int> l, vector<int> r)
{
    int cc1, cc2;
    cc1 = cc2 = 0;
    vector<int> res;
    for(int i = 0; i < l.size() + r.size(); i++) {
        if(cc1 < l.size() && cc2 < r.size()) {
            if(l[cc1] < r[cc2]) {
                res.push_back(l[cc1++]);
            }
            else {
                res.push_back(r[cc2++]);
            }
        }
        else if(cc1 < l.size()) {
            res.push_back(l[cc1++]);
        }
        else {
            res.push_back(r[cc2++]);
        }
    }
    //cout << endl;
    return res;
}

void initialise(int pos, int s, int e)
{
        if(s == e) {
            tree[pos].v.push_back(a[s]);
            tree[pos].cum.push_back(a[s]);
            return;
        }
        initialise(pos*2 + 1, s, (s+e)/2);
        initialise(pos*2 + 2, (s+e)/2 + 1, e);
        tree[pos].v =  mergeseg(tree[pos*2 + 1].v, tree[pos*2 + 2].v);
        for(int i = 0; i < tree[pos].v.size(); i++) {
            tree[pos].cum.push_back(tree[pos].v[i]+((i > 0)?(tree[pos].cum[i-1]) : 0));
        }
}

int query(int pos, int s, int e, int x, int y, int sum)
{
    if(x > e || y < s) return 0;
    if(s >= x && y >= e) {
        int x = upper_bound(tree[pos].v.begin(), tree[pos].v.end(), sum) - tree[pos].v.begin();
        x--;
        if(x < 0) return 0;
        else {
            return tree[pos].cum[x];
        }
    }
    int v1 = query(pos*2 + 1, s, (s+e)/2, x, y, sum);
    int v2 = query(pos*2 + 2, (s+e)/2 + 1, e, x, y, sum);
    return v1 + v2;
}


int main()
{
    int n;

    cin >> n;

    for(int i = 0; i < n; i++) {
       scanf("%d", &a[i]);
    }

    initialise(0, 0, n-1);

    int m;

    cin >> m;
    int x, y;
    for(int i = 0; i < m; i++) {
        scanf("%d%d", &x, &y);
        x--;
        y--;
        int sum = 0;
        int newsum;
        while(1) {
            newsum = query(0, 0, n-1, x, y, sum+1);
            if(sum == newsum) break;
            sum = newsum;
        }
        cout << newsum+1 << endl;
    }
}
