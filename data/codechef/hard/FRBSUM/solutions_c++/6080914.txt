#include <cstring>
#include <cstdio>
#include <algorithm>
#define MX 100005
#define MS 250
#define MC 405
using namespace std;

int A[MX];
int totsum[MS][MX], parsum[MS][MC][MC], totarr[MS][MX], par[MS][MC][MC];

int sum(int id, int x) {
	if (id < 0) return 0;
	int ret = 0, k, q = id / MC, r = id % MC;
	if (q) {
		k = upper_bound(totarr[q - 1], totarr[q - 1] + id / MC * MC, x) - totarr[q - 1] - 1;
		if (k >= 0) ret = totsum[q - 1][k];
	}
	k = upper_bound(par[q][r], par[q][r] + r + 1, x) - par[q][r] - 1;
	if (k >= 0) ret += parsum[q][r][k];
	return ret;
}

int main() {	
	int i, j, k, s, N;
	scanf("%d", &N);
	for (i = 0; i < N; i++) scanf("%d", A + i);
	for (i = 0; i < N; i++) {
		int st = i * MC, en = min(st + MC, N);
		par[i][0][0] = parsum[i][0][0] = A[st];
		for (j = st + 1; j < en; j++) {
			merge(par[i][j - st - 1], par[i][j - st - 1] + j - st, A + j, A + j + 1, par[i][j - st]);
			for (k = s = 0; k <= j - st; k++) parsum[i][j - st][k] = s += par[i][j - st][k];
		}
		if (i) merge(totarr[i - 1], totarr[i - 1] + st, par[i][en - st - 1], par[i][en - st - 1] + en - st, totarr[i]);
		else for (j = 0; j < en; j++) totarr[i][j] = par[i][en - st - 1][j];
		for (j = s = 0; j < en; j++) totsum[i][j] = s += totarr[i][j];
		if (en == N) break;
	}
	int Q;
	for (scanf("%d", &Q); Q--; ) {
		int l, r;
		scanf("%d%d", &l, &r);
		l--, r--;
		int x = 1;
		while (true) {
			int t = sum(r, x) - sum(l - 1, x);
			if (t >= x) x = t + 1;
			else break;
		}
		printf("%d\n", x);
	}
	return 0;
}