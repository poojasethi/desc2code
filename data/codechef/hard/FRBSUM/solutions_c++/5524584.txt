#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <iostream>
#include <complex>

using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
#define all(c) (c).begin(), (c).end()
#define sz(a) int((a).size())
#define pb push_back
#define mp make_pair
#define traverse(c,it, cond) for(it = c.begin(); it != c.end() && cond; it++)
#define ll long long
#define INF 0x7FFFFFFF
#define N 131072

class node
{
    public:
    node* left;
    node* right;
    int sum;
    node(int sum) : sum(sum), left(NULL), right(NULL)
    {}
    node(int sum,node* left,node* right) : sum(sum),left(left),right(right)
    {}
    node* update(int beg,int end,int i)
    {
        if(i<beg || i>end)
            return this;
        else
        {
            if(beg==end)
            {
                return new node(this->sum+i,NULL,NULL);
            }
            int mid = (beg+end)>>1;
            if(this->left == NULL)
                this->left = new node(0);
            if(this->right == NULL)
                this->right = new node(0);
            return new node(this->sum+i, this->left->update(beg,mid,i), this->right->update(mid+1,end,i));
        }
    }
};

node* root[N];
vi arr;

int query(node *a, node *b, int beg, int end, int maxele)
{
    int sum = (b==NULL)?a->sum:(a->sum - b->sum);
    if(maxele>=end)
        return sum;
    if(maxele<beg)
        return 0;
    int mid = (beg+end)>>1;
    return query(a->left,(b==NULL)?NULL:b->left,beg,mid,maxele) + query(a->right,(b==NULL)?NULL:b->right,mid+1,end,maxele);
}

int main()
{
    int n,i,x,m,mx=0,li,ri;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%d",&x);
        mx = max(x,mx);
        arr.pb(x);
    }
    //printf("mx:%d\n",mx);
    node* null = new node(0);
    null->left = null->right = null;
    for(i=0;i<n;i++)
    {
        root[i] = (i==0)?null->update(1,mx,arr[i]):root[i-1]->update(1,mx,arr[i]);
    }
    scanf("%d",&m);
    for(i=0;i<m;i++)
    {
        scanf("%d%d",&li,&ri);
        li--;
        ri--;
        int ans,S=0,nextS=1;
        while(true)
        {
            nextS = query(root[ri],(li==0)?NULL:root[li-1],1,mx,S+1);
            //printf("nextS:%d\n",nextS);
            if(S==nextS)
                break;
            S=nextS;
        }
        printf("%d\n",S+1);
    }
    return 0;
}
