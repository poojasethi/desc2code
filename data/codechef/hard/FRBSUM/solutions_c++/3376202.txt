//#pragma comment(linker,"/STACK:102400000,102400000")
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <climits>
#include <ctime>
#include <numeric>
#include <vector>
#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <complex>
#include <deque>
#include <functional>
#include <list>
#include <map>
#include <string>
#include <sstream>
#include <set>
#include <stack>
#include <queue>
using namespace std;
template<class T> inline T sqr(T x) { return x * x; }
typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<PII, int> PIII;
typedef pair<LL, LL> PLL;
typedef pair<LL, int> PLI;
typedef pair<LD, LD> PDD;
#define MP make_pair
#define PB push_back
#define sz(x) ((int)(x).size())
#define clr(ar,val) memset(ar, val, sizeof(ar))
#define istr stringstream
#define FOR(i,n) for(int i=0;i<(n);++i)
#define forIt(mp,it) for(__typeof(mp.begin()) it = mp.begin();it!=mp.end();it++)
const double EPS = 1e-6;
const int INF = 0x3fffffff;
const LL LINF = INF * 1ll * INF;
const double PI = acos(-1.0);

#define lson l,mid,rt<<1
#define rson mid+1,r,rt<<1|1
#define lowbit(u) (u&(-u))

using namespace std;


#define MAXN 100005
#define MAXNODE 2000005

int a[MAXN],x[MAXN];

struct Node{
	Node *l,*r;
	LL sum;
	void init(){
		l = r = NULL;
		sum = 0;
	}
} nd[MAXNODE],*root[MAXN];

class Per_SegTree{
public:
	int tot,m;//tot是结点数，m是离散化后值的个数
	Per_SegTree(int n):tot(0){
		m = disconcrete(n);
		root[0] = build(1,m);
		for(int i = 1;i<=n;i++)
			root[i] = insert(root[i-1],1,m,a[i],x[a[i]-1]);
	}

	Node* newNode(){
		nd[tot].init();
		return &nd[tot++];
	}

	Node* build(int l,int r){
		Node *rt = newNode();
		if(l==r) return rt;
		int mid = (l+r)>>1;
		rt->l = build(l,mid);
		rt->r = build(mid+1,r);
		return rt;
	}

	Node *insert(Node *last,int l,int r,int val,int add){
		Node *rt = newNode();
		*rt = *last;
		rt->sum+=add;
		if(l==r) return rt;
		int mid = (l+r)>>1;
		if(val<=mid) rt->l = insert(last->l,l,mid,val,add);
		else rt->r = insert(last->r,mid+1,r,val,add);
		return rt;
	}

	int disconcrete(int n){
		for(int i = 1;i<=n;i++) x[i-1] = a[i];
		sort(x,x+n);
		int m = unique(x,x+n)-x;
		for(int i = 1;i<=n;i++)
			a[i] = lower_bound(x,x+m,a[i])-x+1;
		return m;
	}

	LL query(Node *ld,Node *rd,int l,int r,int ql,int qr){
		if(ql<=l&&r<=qr) return rd->sum-ld->sum;
		int mid = (l+r)>>1;
		LL ans = 0;
		if(ql<=mid) ans+=query(ld->l,rd->l,l,mid,ql,qr);
		if(mid<qr) ans+=query(ld->r,rd->r,mid+1,r,ql,qr);
		return ans;
	}
};

int main(void){
#ifndef ONLINE_JUDGE
	//freopen("/Users/mac/Desktop/data.in","r",stdin);
#endif
	int n;
	scanf("%d",&n);
	for(int i = 1;i<=n;i++) scanf("%d",&a[i]);
	Per_SegTree pseg(n);
	int m;
	scanf("%d",&m);
	while(m--){
		int l,r;
		scanf("%d %d",&l,&r);
		LL s = 0;
		while(true){
			LL pos = upper_bound(x,x+pseg.m,s+1)-x+1;
			pos--;
			if(pos>0){
				LL ret = pseg.query(root[l-1],root[r],1,pseg.m,1,pos);
				if(ret==s) break;
				s = ret;
			}else break;
		}
		printf("%lld\n",s+1);
	}
	return 0;
}
