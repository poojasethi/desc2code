#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
const int N = 100005;
const int LN = 29;
struct trie{
    int size;
    int sum;
    trie *left;
    trie *right;
    trie(int v ,int s , trie *l , trie *r){
        size = v;
        sum = s;
        left = l;
        right = r;
    }
    trie *insert(int val,int level);
};
trie *null = new trie(0,0,NULL,NULL);
trie* trie::insert(int val,int level){
    if(level<0){
        return new trie(size+1,sum+val,null,null);
    }
    if((val>>level)&1){
        return new trie(size+1,sum+val,left,right->insert(val,level-1));
    }
    else{
        return new trie(size+1,sum+val,left->insert(val,level-1),right);
    }
}
trie *root[N];
int kquery(int ll,int rr ,int k){
    int ret = 0;
    trie *l = root[ll-1];
    trie *r = root[rr];
    ++k;
    for(int level = LN ; level >=0 ; --level ){
        bool kbit = (k>>level)&1;
        if(kbit){
            ret+=r->left->sum - l->left->sum;
            l = l->right;
            r = r->right;
        }
        else{
            l = l->left;
            r = r->left;
        }
    }
    return ret;
}
int n , q;
int main(){
    null->left = null->right = null;
    root[0] = null;
    n = scan();
    for(int i = 1 ; i <= n ; ++i){
        root[i] = root[i-1]->insert(scan(),LN);
    }
    q = scan();
    while(q--){
        int l = scan() , r = scan();
        int s = 0;
        while(1){
            int temp = kquery(l,r,s+1);
            if(temp<=s){
                printf("%d\n",s+1);
                break;
            }
            s = temp;
        }
    }
} 