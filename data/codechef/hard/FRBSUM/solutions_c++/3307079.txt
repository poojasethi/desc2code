// -*- C++ -*-
// File: a.cpp
// Copyright (C) 2013
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */

struct node {
	
    int sum, lson, rson;

	node() {
		sum = 0;
		lson = rson = -1;
	}
};


const int maxn = 100100;
const int maxlogd = 18;

pii P[maxn];
int Root[maxn], nnode = 1, n;

node Tree[ maxn * maxlogd ];


int make_version( int v, int l, int r, int pos, int pls )
{
	int newid = nnode++;
	if ( v != -1 ) Tree[ newid ] = Tree[v];
	Tree[ newid ].sum += pls;
	if ( l == r ) return newid;
	int x = (l + r) / 2;
	if ( pos <= x )
		Tree[ newid ].lson = make_version( Tree[ newid ].lson, l, x, pos, pls );
	else
		Tree[ newid ].rson = make_version( Tree[ newid ].rson, x + 1, r, pos, pls );
	return newid;
}


int fsum( int v, int l, int r, int ll, int rr )
{
	if ( v == -1 ) return 0;
	if ( l == ll && rr == r ) return Tree[v].sum;
	int xx = (ll + rr) / 2, res = 0;
	if ( l <= xx )
		res += fsum( Tree[v].lson, l, min( r, xx ), ll, xx );
	if ( xx + 1 <= r )
		res += fsum( Tree[v].rson, max( xx + 1, l ), r, xx + 1, rr );
	return res;
}

int rect( int l, int r, int x )
{
	int ll = 1, rr = n, res = 0;
	while ( ll <= rr )
	{
		int xx = (ll + rr) / 2;
		if ( P[xx].first <= x )
		{
			res = max( res, xx );
			ll = xx + 1;
		} else rr = xx - 1;
	}
	return fsum( Root[res], l, r, 1, n );
}

int query( int l, int r )
{
	int k = 0;
	while ( true )
	{
		int cur = rect( l, r, k + 1 );
		if ( cur > k )
		{
			k = cur;
			continue;
		}
		return k + 1;
	}
}


int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);
	
    cin >> n;
    
    rep(i,n) {
        cin >> P[i+1].X;
        P[i+1].Y = i+1;
    }
    
    sort(P+1, P+n+1);

    Root[0] = 0;
    FOR(i,1,n+1) Root[i] = make_version(Root[i-1], 1, n, P[i].Y, P[i].X);

    int m;
    cin >> m;
    rep(it,m) {
        int l,r;
        cin >> l >> r;
        cout << query(l, r) << endl;
    }
    

#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
