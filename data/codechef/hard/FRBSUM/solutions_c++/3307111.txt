// -*- C++ -*-
// File: a.cpp
// Copyright (C) 2013
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */

int n,a[100001],one[100001];

struct node
{
    VI s,ps;
} T[300010];


int merge(int seg)
{
    int c1=2*seg,c2=2*seg+1;
    
    int l1=T[c1].s.size(),l2=T[c2].s.size();
    int i=0,j=0;
    
    while(i<l1 && j<l2)
    {
        if(T[c1].s[i]<=T[c2].s[j])
            T[seg].s.push_back(T[c1].s[i++]);
        else
            T[seg].s.push_back(T[c2].s[j++]);
    }
    while(i<l1)
        T[seg].s.push_back(T[c1].s[i++]);
    while(j<l2)
        T[seg].s.push_back(T[c2].s[j++]);
	
    for(i=0;i<T[seg].s.size();i++)
    {
        if(i==0)
            T[seg].ps.push_back(T[seg].s[0]);
        else
            T[seg].ps.push_back(T[seg].s[i]+T[seg].ps[i-1]);
    }
    return 0;
}


int mergesort(int seg,int x,int y)
{
    int mid=(x+y)/2;
    
    if(y<x)
        return 0;
    if(y==x)
    {
        T[seg].s.push_back(a[y]), T[seg].ps.push_back(a[y]);
        return 0;
    }
    
    mergesort(2*seg,x,mid);
    mergesort(2*seg+1,mid+1,y);
    
    merge(seg);
    return 0;
}

int query(int seg,int l,int r,int x,int y,int sum)
{
    if(y<l || x>r)
        return 0;
    if(x>=l && y<=r)
    {
        int lo=0,hi=(int)T[seg].s.size()-1;
        int mid=(hi+lo)/2;
        while(lo!=mid)
        {
            if(sum+1>=T[seg].s[mid])
                lo=mid;
            else
                hi=mid;
        
            mid=(lo+hi)/2;
        }
        
        if(sum+1>=T[seg].s[hi])
            return T[seg].ps[hi];
        if(sum+1>=T[seg].s[lo])
            return T[seg].ps[lo];
        return 0;
    }
    
    int mid=(x+y)/2;
    int s1=query(2*seg,l,r,x,mid,sum);
    int s2=query(2*seg+1,l,r,mid+1,y,sum);
    
    return s1+s2;
}

int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);
	
    cin >> n;
    for(int i=1;i<=n;i++) cin >> a[i];
    one[0]=0;
    for(int i=1;i<=n;i++)
    {
        if(a[i]==1)
            one[i]=one[i-1]+1;
        else
            one[i]=one[i-1];
    }
    
    mergesort(1,1,n);
    
    int m;
    cin >> m;
    while(m--)
    {
        int l,r;
        
        cin >> l >> r;
        
        if(one[r]-one[l-1]==0)
            printf("1\n");
        else if(l==r)
            printf("2\n");
        else
        {
            int sum=0;
            while(1)
            {
                int news=query(1,l,r,1,n,sum);

                if(sum==news)
                    break;
                sum=news;
            }
            printf("%d\n",sum+1);
        }
    }
    

#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
