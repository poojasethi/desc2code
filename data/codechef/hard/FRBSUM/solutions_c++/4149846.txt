// adijimmy
// Implementation : 2D segment tree :)
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <iostream>
#define MAX 100001
#define MOD 1000000007
#define pb push_back
using namespace std;
vector<int> v[4*MAX],cum[4*MAX];
vector<int> q;
int arr[MAX];
int gcd(int a,int b){
return (b==0)?a:gcd(b,a%b);
}
int power(int a,int b){
int ans = 1;
while(b){
    if(b&1)
        ans =(ans*a)%MOD;
    b>>=1;
        a=(a*a)%MOD;
}
return ans;
}
void init_tree(int indx,int l,int r){
if(l==r){
    v[indx].clear();
    cum[indx].clear();
    v[indx].pb(arr[l]);
    cum[indx].pb(arr[l]);
    return;
}
int mid=(l+r)/2;
init_tree(2*indx,l,mid);
init_tree(2*indx+1,mid+1,r);
int i=0,j=0;
v[indx].clear();
cum[indx].clear();
while(i<v[2*indx].size() && j<v[2*indx+1].size()){
    if(v[2*indx][i]<v[2*indx+1][j])
      v[indx].pb(v[2*indx][i++]);
    else
      v[indx].pb(v[2*indx+1][j++]);

}
while(i<v[2*indx].size())
v[indx].pb(v[2*indx][i++]);
while(j<v[2*indx+1].size())
v[indx].pb(v[2*indx+1][j++]);
for(int k=0;k<v[indx].size();k++){
    if(cum[indx].size()==0)
     cum[indx].pb(v[indx][k]);
    else
     cum[indx].pb(cum[indx][k-1]+v[indx][k]);
}
//end
}
void query_tree(int indx,int s,int e,int l,int r){
    if(s==l && e==r){
       q.pb(indx);
       return;
    }
    int mid = (s+e)/2;
    if(l>mid)
        return query_tree(2*indx+1,mid+1,e,l,r);
    if(r<=mid)
        return query_tree(2*indx,s,mid,l,r);
    query_tree(2*indx,s,mid,l,mid);
    query_tree(2*indx+1,mid+1,e,mid+1,r);
}
// main logic of the code :)
int solve(){
    int ans = 1;
    while(1){
        int total = 0;
        for(int i=0;i<q.size();i++){
            int pos = upper_bound(v[q[i]].begin(),v[q[i]].end(),ans)-v[q[i]].begin();
            if(pos != 0)
            total += cum[q[i]][pos-1];
        }
        if(total+1 != ans)
            ans = total+1;
        else
            break;
    }
    return ans;
}
// logic ends here ;)
void prinnt(){
for(int i=0;i<10;i++){
    for(int j=0;j<v[i].size();j++){
        printf("%d ",v[i][j]);
    }
    printf("\n");
}
printf("\n\n--------\n\n");
for(int i=0;i<10;i++){
    for(int j=0;j<cum[i].size();j++){
        printf("%d ",cum[i][j]);
    }
    printf("\n");
}
}
int main(){
int n,m,l,r;
scanf("%d",&n);
for(int i=0;i<n;i++)
    scanf("%d",&arr[i]);
init_tree(1,0,n-1);
scanf("%d",&m);
//prinnt();
while(m--){
    q.clear();
    scanf("%d %d",&l,&r);
    l--;r--;
    query_tree(1,0,n-1,l,r);
    //for(int i=0;i<q.size();i++)
      //  printf("%d ",q[i]);
    int ans = solve();
    printf("%d\n",ans);
}
return 0;
}
