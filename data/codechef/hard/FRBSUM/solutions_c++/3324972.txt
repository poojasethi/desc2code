#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<cstdio>
#include<ctime>
#include<cctype>
#include<cassert>
#include<climits>
#include<cerrno>
#include<cfloat>
#include<ciso646>
#include<clocale>
#include<csetjmp>
#include<csignal>
#include<cstdarg>
#include<cstddef>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<cwchar>
#include<cwctype>

//containers
#include<vector>
#include<list>
#include<map>
#include<queue>
#include<deque>
#include<set>
#include<complex>
#include<string>
#include<stack>
#include<bitset>
#include<istream>
#include<valarray>

//IOs
#include<iostream>
#include<sstream>
#include<iomanip>
#include<fstream>
#include<exception>
#include<ios>
#include<iosfwd>
#include<ostream>
#include<iterator>
#include<stdexcept>
#include<streambuf>


//algorithm & miscellaneous
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<limits>
#include<locale>
#include<memory>
#include<new>

#define ll long long
#define ull unsigned long long
#define ld long double
#define mp make_pair
#define pb push_back
#define inf (ll)1e18
#define iinf (int)1e9
#define triple(a,b,c) make_pair(a,make_pair(b,c))
#define two(a,b) make_pair(a,b)
#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<long long,long long>
#define psi pair<string,int>
#define pis pair<int,string>
#define pss pair<string,string>
#define vi vector<int>
#define vl vector<long long>
#define vs vector<string>
#define vc vector<char>
#define vpii vector<pii>
#define GI ({int t;scanf("%d",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define GF ({float t;scanf("%f",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GLD ({long double t;scanf("%Lf",&t);t;})
#define _(c,v) memset(c,v,sizeof(c))

int dx[] = {-1,0,0,1,-1,-1,1,1};
int dy[] = {0,-1,1,0,-1,1,-1,1};

const double eps = 1e-9;

using namespace std;

ll a[100010];
typedef struct segtree
{

            vector<ll> data, psum;
}segtree;

segtree tree[300010];

void build_tree(int lo, int hi,int node)
{
            int mid = (lo + hi)>>1, lc = 2*node + 1, rc = 2*node + 2;

            for(int i=lo;i<=hi;i++)
            {
                    tree[node].data.pb(a[i]);
                    tree[node].psum.pb(a[i]);
            }

            sort(tree[node].data.begin(), tree[node].data.end());

            sort(tree[node].psum.begin(), tree[node].psum.end());


            for(int i=1;i<(int)tree[node].psum.size();i++)
                    tree[node].psum[i] += tree[node].psum[i-1];

            if(lo != hi)
            {
                    build_tree(lo, mid, lc);
                    build_tree(mid + 1, hi, rc);
            }

            return ;
}

int query_tree(int lo,int hi,int node,int x,int y,int sum)
{

                int lc = 2*node + 1, rc = 2*node + 2;

                int mid = (lo + hi)>>1;

                if(lo > y or hi < x)return 0;

                if(lo >= x and hi <= y)
                {
                        int it = upper_bound(tree[node].data.begin(), tree[node].data.end(), sum) - tree[node].data.begin();

                        if(it == 0)return 0;

                        return tree[node].psum[it - 1];
                }

                return query_tree(lo, mid, lc, x, y, sum) + query_tree(mid + 1, hi, rc, x, y, sum);

}
int main()
{

            int n = GI;

            for(int i=0;i<n;i++)
                    a[i] = GL;

            build_tree(0,n-1,0);

            int m = GI;

            while(m--)
            {
                    int l = GI, r = GI;

                    l--,r--;

                    ll sum = 0;

                    while(1)
                    {
                            ll tsum = query_tree(0,n-1,0,l,r,sum + 1);

                            if(tsum == sum)
                            {
                                cout<<tsum + 1<<"\n";
                                break;
                            }

                            sum = tsum;
                    }


            }

            return 0;
}
