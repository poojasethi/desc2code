
#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi  vector<int>
#define pb  push_back
#define mp  make_pair
#define M(a,x) memset(a,x,sizeof(a))
#define sci(x) scanf("%d",&x);
#define scl(x) scanf("%lld",&x);
#define scs(x) scanf("%s",x);
#define print(x) printf("%d",x);
#define nl printf("\n")
#define printl(x) printf("%lld",x)
#define F(i,a,n) for(int i=a;i<n;i++)
#define INF 100000000000000000LL
#define LL long long
vector<int> v[412345];
vector<int> cum[412345];
int a[112345];
inline void build(int idx,int rs,int re) 
{
    if(rs>re)
    {
	v[idx].clear();
	cum[idx].clear();
	return ;
    }
    if(rs==re) {
	v[idx].clear();
	cum[idx].clear();
	v[idx].pb(a[rs]);
	cum[idx].pb(a[rs]);
	return ;
    }
    int mid=(rs+re)>>1;
    int l=(idx<<1);
    int r=l+1;
    build(l,rs,mid);
    build(r,mid+1,re);
    v[idx].clear();cum[idx].clear();
    int i = 0 ; int j=0;
    while(i<v[l].size() && j<v[r].size()) {
	if(v[l][i]<v[r][j]) {
	    v[idx].pb(v[l][i++]);
	}
	else {
	    v[idx].pb(v[r][j++]);
	}
    }
    while(i<v[l].size()) {
	v[idx].pb(v[l][i++]);
    }
    while(j<v[r].size()) {
	v[idx].pb(v[r][j++]);
    }
    F(i,0,v[idx].size()) {
	if(!i) {
	    cum[idx].pb(v[idx][i]);
	}
	else {
	    cum[idx].pb(cum[idx][i-1]+v[idx][i]);
	}
    }
}
vector<int> temp;

void query(int idx,int rs,int re,int qs,int qe) {
    if(rs>re) return;
    if(rs==qs && re==qe) {
	temp.pb(idx);
	return;
    }
    int mid = (rs+re)>>1;
    int l = idx<<1;
    int r = l+1;
    if(qs>mid) return query(r,mid+1,re,qs,qe);
    if(qe<=mid) return query(l,rs,mid,qs,qe);
    query(l,rs,mid,qs,mid);
    query(r,mid+1,re,mid+1,qe);
}
int solve() {
    int ret = 1;
    while(true) {
	int sum = 0;
    F(i,0,temp.size()) {
	    int pos = temp[i];
	    int loc = upper_bound(v[pos].begin(),v[pos].end(),ret)-v[pos].begin();
	    if(!loc) continue;
	    sum+=cum[pos][loc-1];
	}
	if(sum+1 == ret) break;
	ret=sum+1;
    }
    return ret;
}
int main() {
    int n;sci(n);
    F(i,0,n) sci(a[i]);
    build(1,0,n-1);
    int q;sci(q);
    F(i,0,q) {
	int x,y;sci(x);sci(y);
	x--;y--;
	temp.clear();
	query(1,0,n-1,x,y);
	int ans = solve();
	printf("%d\n",ans);
    }
}
