#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!=13 and s[n]!=0; ++n);s[n]=0

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=1000000000;
const int minv=-inv;

const int max_n=100010;

int n,m;
int a[max_n];

// Segment Tree Codechunk

int slr[4*max_n+10];
int srr[4*max_n+10];
vector<int> sa[4*max_n+10];
vector<int> sp[4*max_n+10];

struct ST
{
	int sn; //sn>0
	
	ST(){ sn=0; }
	ST(int sn_){ sn=sn_; init(0,0,sn); }
	
	void init(int ix, int l, int r)
	{
		slr[ix]=l; srr[ix]=r;

		sa[ix].resize(0);
		forup(i,l,r)
			sa[ix].pb(a[i]);
		sort(sa[ix].begin(),sa[ix].end());

		sp[ix].resize(0); sp[ix].pb(0);
		rep(i,r-l)
			sp[ix].pb(sp[ix].back()+sa[ix][i]);

		if(l+1<r)
		{
			int mid=(l+r)/2;
			init(2*ix+1,l,mid);
			init(2*ix+2,mid,r);
		}
	}

	int iquery(int ix, int l, int r, int s)
	{
		int lc=2*ix+1;
		int rc=2*ix+2;
		
		if(l==slr[ix] and r==srr[ix])
		{
			if(sa[ix][0]>s) return 0;

			int bl=0,br=r-l;
			while(bl+1<br) //[l,r)
			{
				int bm=(bl+br)/2;

				if(sa[ix][bm]<=s) bl=bm;
				else br=bm;
			}

			return sp[ix][bl+1];
		}
		else if(r<=srr[lc])
			return iquery(lc,l,r,s);
		else if(l>=slr[rc])
			return iquery(rc,l,r,s);
		else
			return iquery(lc,l,srr[lc],s)+iquery(rc,slr[rc],r,s);
	}

	int query(int l, int r, int s)
	{
		return iquery(0,l,r+1,s);
	}
};
ST st;

// End of Codechunk

int main()
{
	gi(n);
	rep(i,n)
		gi(a[i]);
	st=ST(n);

	gi(m);
	rep(i,m)
	{
		int l,r;
		gi(l); gi(r);
		--l; --r;

		int s=0;
		while(true)
		{
			int snew=st.query(l,r,s+1);

			if(snew==s) break;
			else s=snew;
		}

		pin(s+1);
	}
	
	return 0;
}