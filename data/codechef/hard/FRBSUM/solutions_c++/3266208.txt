//Solution by Daniyar Maminov                                                                                                                                                                     
#include<iostream>
#include<fstream>
#include<string>
#include<algorithm>
#include<math.h>
#include<vector>
#include<cstring>
#include<queue>
#include<map>
#include<set>
#define mp make_pair
#define f first
#define pb push_back
#define s second
#define ub upper_bound
#define lb lower_bound
#define inf 1000*1000*1000
using namespace std;

const int N = (1<<17);

vector <int> a[N+N], d[N+N];

int n, m, i, j, x, t, s, new_s;

void build(int id)
{
	int i=0, j=0;
	a[id].clear();
	d[id].clear();
	while (i<a[id+id].size() || j<a[id+id+1].size())
	{
		if (i<a[id+id].size() && j<a[id+id+1].size())
		{
			if (a[id+id][i]<a[id+id+1][j])
			{
				a[id].pb(a[id+id][i]);
				if (d[id].size()==0)
					d[id].pb(a[id+id][i]);
				else
					d[id].pb(d[id][(int)d[id].size()-1]+a[id+id][i]);
				i++;
			}
			else
			{
				a[id].pb(a[id+id+1][j]);
				if (d[id].size()==0)
					d[id].pb(a[id+id+1][j]);
				else
					d[id].pb(d[id][(int)d[id].size()-1]+a[id+id+1][j]);
				j++;
			}
		}
		else if (i<a[id+id].size())
		{
			a[id].pb(a[id+id][i]);
			if (d[id].size()==0)
				d[id].pb(a[id+id][i]);
			else
				d[id].pb(d[id][(int)d[id].size()-1]+a[id+id][i]);
			i++;
		}
		else
		{
			a[id].pb(a[id+id+1][j]);
			if (d[id].size()==0)
				d[id].pb(a[id+id+1][j]);
			else
				d[id].pb(d[id][(int)d[id].size()-1]+a[id+id+1][j]);
			j++;
		}
	}
}

int ll, rr, mid, l, r;

int cnt(int id, int x)
{
	int l=0, r=(int)a[id].size()-1;
	int mid;
	if (a[id][l]>x) return 0;
	if (a[id][r]<=x) return d[id][r];
	while (r-l>1)
	{
		mid=(l+r)>>1;
		if (a[id][mid]>x)
			r=mid;
		else
			l=mid;
	}
	if (a[id][r]<=x) return d[id][r];
	return d[id][l];
}

int sum(int l, int r, int x, int v=1, int tl=0, int tr=N-1)
{
    if (tl>r || l>tr) return 0;
    if (l<=tl && tr<=r)
    {
    	return cnt(v, x);
    }
    int tm=(tl+tr)>>1;
    return sum(l, r, x, v+v, tl, tm)+sum(l, r, x, v+v+1, tm+1, tr);
}
					
int main()
{
	#ifndef ONLINE_JUDGE
	freopen (".in","r",stdin);
	freopen (".out","w",stdout);
	#endif
	cin>>n;
	for (i=1; i<=n; i++)
	{
		scanf("%d", &x);
		a[N+i-1].pb(x);
		d[N+i-1].pb(x);
	}
	for (i=N-1; i>=1; i--)
	{
		build(i);
	}		 
	cin>>m;
	for (i=1; i<=m; i++)
	{
		scanf("%d%d", &l, &r);
		l--, r--;
		s=0;
		while (1)
		{
			new_s=sum(l, r, s+1);
			if (s==new_s) break;
			s=new_s;
		}
		printf("%d\n", s+1);
	}						
	return 0;
}