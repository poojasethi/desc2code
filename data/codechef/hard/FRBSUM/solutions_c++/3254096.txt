#include <cstdio>
#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <functional>
#include <limits>
#include <cassert>
#include <sstream>
#include <cmath>
#include <string>
#include <fstream>

using namespace std;
typedef long long ll;

const int max_n=100005;

int n,m;
int a[max_n];

vector<int> B[4*max_n],P[4*max_n];

vector<int> merge(vector<int> x, vector<int> y)
{
	int nx=x.size(),ny=y.size();
	int i=0,j=0;
	vector<int> ret;
	for(int z=0; z<nx+ny; z++)
	{
		if(i<nx and (j==ny or x[i]<=y[j]))
			ret.push_back(x[i++]);
		else
			ret.push_back(y[j++]);
	}

	return ret;
}

void initST(int r, int s, int e)
{
	if(s==e)
	{
		B[r].push_back(a[s]);
		P[r].push_back(a[s]);
	}
	else
	{
		int mid=(s+e)/2;
		initST(2*r,s,mid);
		initST(2*r+1,mid+1,e);
		B[r]=merge(B[2*r],B[2*r+1]);
		for(int i=0; i<(int)B[r].size(); i++)
			P[r].push_back((i>0?P[r][i-1]:0)+B[r][i]);
	}
	// cout<<"list: "<<r<<" "<<s<<" "<<e<<"\n";
	// for(int i=0; i<B[r].size(); i++)
	// 	cout<<B[r][i]<<" ";
	// cout<<"\n";
}

int queryST(int r, int b, int e, int i, int j, int s)
{
	int p1, p2;
	//cout<<r<<" "<<b<<" "<<e<<" "<<i<<" "<<j<<" "<<ST[r]<<" "<<I[r]<<endl;

	if (i > e || j < b)
	  return 0;

	if (b >= i && e <= j)
	{
		int x=upper_bound(B[r].begin(),B[r].end(),s)-B[r].begin();
		x--;
		return x<0?0:P[r][x];
	}

	int mid=(b+e)/2;
	p1 = queryST(2 * r, b, mid, i, j, s);
	p2 = queryST(2 * r + 1, mid+1, e, i, j, s);
	
	return p1+p2;
}

int main()
{
    scanf("%d",&n);
	for(int i=0; i<n; i++)
		scanf("%d",&a[i]);
    
    initST(1,0,n-1);
    int l,r;
	scanf("%d",&m);
	for(int i=0; i<m; i++)
	{
		scanf("%d%d",&l,&r);
		l--;r--;

		int sum=0;
		while(1)
		{
			int nsum=queryST(1,0,n-1,l,r,sum+1);
			if(sum==nsum)
				break;
			sum=nsum;
		}
		printf("%d\n",sum+1);
	}

    return 0;
}
