#include<bits/stdc++.h>

using namespace std;

int get_int(){
int x=0;char c;int t=0;
for (c=getchar();(c<'0'||c>'9')&&c!='-';c=getchar());
if (c=='-'){t=1;c=getchar();}
for (;c>='0'&&c<='9';c=getchar()){x*=10;x+=c-48;}
if (t) x=-x;return x;
}

long long a[100010];

typedef struct stree
{
    vector<long long> data,psum;
}stree;

stree tree[300001];


void buildTree(int l,int h,int node )
{
    int mid=(l+h)>>1;
     int left=2*node+1;
     int right=2*node+2;

     for(int i=l; i<=h;i++)
     {

         tree[node].data.push_back(a[i]);
         tree[node].psum.push_back(a[i]);

     }

     sort(tree[node].data.begin(),tree[node].data.end());
     sort(tree[node].psum.begin(),tree[node].psum.end());

     for(int i=1;i<(int)tree[node].psum.size();i++)
       tree[node].psum[i]+=tree[node].psum[i-1];

     if(l!=h)
     {
          buildTree(l,mid,left);
          buildTree(mid+1,h,right);
     }
    return;
}
int query(int l,int h,int node, int x,int y,int sum)
{
    int left=2*node+1;
    int right=2*node+2;

    int mid=(l+h)>>1;

    if(l>y || h<x) return 0;
    if(l>=x && h<=y)
    {
        int it= upper_bound(tree[node].data.begin(),tree[node].data.end(),sum)-tree[node].data.begin();

    if(it==0)  return 0;

    return tree[node].psum[it-1];


    }
        return query(l,mid,left,x,y,sum)+query(mid+1,h, right,x,y,sum);
}



int main()
{
int n=get_int();
//    int n; cin>>n;

    for(int i=0;i<n;i++)    //cin>>a[i];
        a[i]=get_int();

    buildTree(0,n-1,0);

int m=get_int();
//   int m; cin>>m;
    while(m--)
    {
        int l=get_int();
    int r=get_int( );
  //  int l,r; cin>>l>>r;

    l--; r--;

     long long sum=0;

     while(1)
     {
         long long tsum=query(0,n-1,0,l,r,sum+1);

         if(tsum==sum)
         {
             cout<<tsum+1<<endl;
             break;
         }
         sum=tsum;
     }

    }

    return 0;
}

