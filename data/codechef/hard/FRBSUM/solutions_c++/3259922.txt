#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<string.h>
#include<queue>
#include<vector>
#include<string>
using namespace std;

#define ll long long
#define llu unsigned long long int
#define N 100010
#define all(x) x.begin(),x.end()
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define inf 0x3f3f3f3f
struct node
{
	vector<int>v,sum;
}t[N<<2];
void build(int p,int l,int r)
{
	if(l==r)
	{
		int i;scanf("%d",&i);
		t[p].v.pb(i);t[p].sum.pb(i);
		return;
	}
	int m=(l+r)>>1;
	build(p<<1,l,m);
	build(p<<1|1,m+1,r);
	for(int i=0;i<t[p<<1].v.size();i++)t[p].v.pb(t[p<<1].v[i]);
	for(int i=0;i<t[p<<1|1].v.size();i++)t[p].v.pb(t[p<<1|1].v[i]);
	sort(all(t[p].v));
	int s=0;
	for(int i=0;i<t[p].v.size();i++)
	{
		s+=t[p].v[i];
		t[p].sum.pb(s);
	}
}
int query(int p,int l,int r,int x,int y,int s)
{
	if(x<=l&&y>=r)
	{
		int pos=lower_bound(all(t[p].v),s+1)-t[p].v.begin()-1;
		if(pos<0)return 0;
		return t[p].sum[pos];
	}
	int m=(l+r)>>1,ans=0;
	if(x<=m)ans+=query(p<<1,l,m,x,y,s);
	if(y>m)ans+=query(p<<1|1,m+1,r,x,y,s);
	return ans;
}
int main()
{
	int n,m,i,j,k;
	while(~scanf("%d",&n))
	{
		build(1,1,n);
		scanf("%d",&m);
		while(m--)
		{
			scanf("%d%d",&i,&j);
			int s=0;
			while(1)
			{
				int ns=query(1,1,n,i,j,s+1);
				if(ns==s)break;
				s=ns;
				//printf("%d ",s);
			}
			//puts("");
			printf("%d\n",s+1);
		}
	}
}