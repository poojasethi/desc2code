#include<iostream>
#include<stack>
#include<vector>
#include<cstring>
#include<algorithm>
using namespace std ;
long long  tree[262200 * 3 ] ;
//int tree[262144 * 4 ] ;
void update ( int id , int i , int j , int u , int k )
{
    if ( ( u < i) || ( j < u ) || ( i  > j ) )
    return ;
 
    if ( ( u == i ) && ( u == j ) )
    {
     tree[id]++ ;
     return ;
    }
 
   if ( ( i <= u ) && ( u <= j ) )
   {
       int mid = ( i + j ) / 2 ;
    update( 2*id , i , mid  , u , k   );
    update(( 2*id + 1 ) , ( mid  + 1 ) , j , u , k  );
    tree[id] = tree[2*id] + tree[(2*id)+ 1] ;
    return ;
   }
 
}
 
long long  query ( int id , int i , int j , int l ,  int r )
{
    if ( ( r < i) || (  l >  j ) )
    return 0  ;
    if ( ( i >= l ) && ( j <= r ) )
        return tree[id] ;
 
 
       int mid = ( i + j ) / 2 ;
    long long   h1 =  query( (2*id) , i ,  mid  , l , r   );
    long long    h2 =  query(( 2*id + 1 ) , ( mid  + 1 ) , j , l , r  ) ;
    return ( h1 + h2 ) ;
 
 
}
 
int main()
{
    int te , n , t ;
    string s ;
    cin >> te ;
    stack < int > st ;
    while(te--)
    {
  while ( !st.empty())
  st.pop() ;
        cin >> n ;
        cin >> s ;
        int a[n+1] ;
        memset ( a , 0 , sizeof(a));
        for ( int i = 0 ; i < n ; i++)
          {
              if ( s[i] == '4')
              {
                  st.push(i);
              }
              else
              {
                  if ( !st.empty())
                  {
                       t = st.top();
                      st.pop();
                      a[t]++ ;
                      if ( !st.empty())
                      {
 
                        a[st.top()] = max ( a[st.top()] , a[t] );
                      }
                  }
              }
          }
        while ( !st.empty())
        {
            int t = st.top() ;
            a[t] = 0 ;
            st.pop() ;
 
        }
        for ( int i = 0  ; i <= ( n * 4 )   ; i++)
        {
        if ( i > 786600 )
        break ; 
        tree[i] = 0 ;
        } 
        long long  ans = 0 ;
 
        for ( int i = 0 ; i < n ; i++)
        {
            if ( a[i] != 0 )
            {
                if ( a[i] == 1 )
                {
                    ans = ans + i + 1 ;
                }
                else
                {
                    ans = ans + i + 1 - ( 2 * query ( 1 , 1 , n  , 1 ,( a[i] - 1 )  ) )  ;
                }
                update ( 1 , 1 , n , a[i] , 1 ) ;
            }
            
        }
 
        cout << ans << endl ;
    }
    return 0 ;
}  