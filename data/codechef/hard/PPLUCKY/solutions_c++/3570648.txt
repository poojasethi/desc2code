// ROH.cpp : Defines the entry point for the console application.
//



#include<iostream>
#include<vector>
#include<stdio.h>
#include<cstdio>
#include<stdlib.h>
#include<algorithm>
#include<queue>
#include<bitset>
#include<fstream>
#include<stack>
#include<set>
#include<utility>
#include<string>
#include<cstring>
#include<math.h>
using namespace std;

#define scan scanf
#define sscan sscanf_s
#define get gets_s
#define print printf 
#define mod 1000000007
#define ll  long long
#define init int i,j,k,l,m,n,test
#define pause system("pause")
#define inf 1000000009
//class BIT
//{
//	int a[100009];
//	// 10^5
//	int size;
//public:
//
//	BIT(int n)
//	{
//		int i;
//		for(i=0;i<=n;i++)
//		{
//			a[i]=0;
//
//		}
//		size=n+1;
//
//	}
//
//	void assign(int index,int val)
//	{
//		while(index<size)
//		{
//			a[index]+=val;
//			index+=(index&-index);
//
//		}
//		return;
//
//		
//
//
//	}
//	int read(int index)
//	{
//		int temp=0;
//		while(index>0)
//		{
//			temp+=a[index];
//			index-=(index&-index);
//
//
//		}
//		return temp;
//
//	}
//
//	
//
//
//};
template<class T>
class BIT
{
      T *tree;
      int maxVal;
      public:
      BIT(int N)
      {
              tree = new T[N+1];
              memset(tree,0,sizeof(T)*(N+1));
              maxVal = N;
      }
      void update(int idx, T val)
      {
           while (idx <= maxVal)
           {
                 tree[idx] += val;
                 idx += (idx & -idx);
           }
      }
      //Returns the cumulative frequency of index idx
      T read(int idx)
      {
        T sum=0;
        while (idx>0)
        {
              sum += tree[idx];
              idx -= (idx & -idx);
        }
        return sum;
      }
};
 
//int main()
//{
//    int a[100],cur=1,mul=2,add=19,MAX=65536,x,i;
//    //Initialize the size by the
//    //maximum value the tree can have
//    BIT<int> B(MAX);
//    for (i=0;i<50;i++)
//    {
//        a[i] = cur;
//        B.update(a[i],1);
//        cur = ((cur * mul + add) % MAX);
//    }
//    while (cin>>x)
//    {
//          cout<<B.read(x)<<endl;
//    }
// 
//}
struct node
{
	int degree,val,index;

};
vector<int> a[100009];
int main()
{
	init;
	scan("%d",&test);
	
	while(test--)
	{
		char s[100009];
		scan("%d",&n);
		
		//scan("%s",s);
		m=0;
		cin>>s;
		for(i=0;i<=n;i++)
			a[i].clear();
		
		int map[100009];
		
		stack<struct node> t;
		BIT<int> b(n);
		for(i=0;i<n;i++)
		{
			struct node g;
			if(s[i]=='4')
			{
				g.val=4;
				g.index=i;
				g.degree=1;
				t.push(g);

			}
			else
			{
				//no need to insert if a 4 exists pop it else take no action
				if(t.size()>0)
				{
					g=t.top();
					t.pop();
					
					map[g.index]=i;
					m=max(m,g.degree);   // m contains the max degree acheived
					a[g.degree].push_back(g.index);
					struct node f;
					if(t.size()>0)
					{
						struct node f;
						t.top().degree=max(t.top().degree,g.degree+1);
					}


				}
			}
			
			

		}
		ll ans=0;
		for(i=1;i<=m;i++)
		{
			//first add to ans
			for(j=a[i].size()-1;j>=0;j--)
			{
				k=a[i][j];
				//get cumulative count
				int temp=2*b.read(k+1);
				ans=ans+(k+1-temp);
				b.update(k+1,1);
				//b.update(map[k]+1,1);

			}

			

		}
		printf("%lld\n",ans);


	}

}
