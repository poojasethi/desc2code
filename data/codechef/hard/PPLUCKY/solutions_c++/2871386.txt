#pragma comment(linker, "/STACK:256000000")
#include <iostream>
#include <string>
#include <string.h>
#include <algorithm>
#include <vector>
#include <queue>
#include <ctime>
#include <cmath>
#include <stdio.h>
#include <cassert>
#include <set>
#include <map>
#include <stack>
#include <deque>
#include <list>

#define SZ(x) (int((x).size()))
#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i, a, b) for(int (i) = (a); (i) >= (b); --(i))
#define REP(i, n) for (int (i) = 0; (i) < (n); ++(i))
#define REPD(i, n) for (int (i) = (n); (i)--; )
#define FE(i, a) for (int (i) = 0; (i) < (int((a).size())); ++(i))
#define MEM(a, val) memset((a), val, sizeof(a))
#define INF 1000000000
#define LLINF 1000000000000000000LL
#define PB push_back
#define PPB pop_back
#define ALL(c) (c).begin(), (c).end()
#define SQR(a) ((a)*(a))
#define MP(a,b) make_pair((a), (b))
#define XX first
#define YY second

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef long double dbl;
typedef pair<int, int> pii ;
typedef vector<int> vint;
typedef vector<LL> vLL;

const int nmax = 100009;

int a[nmax];
int next[nmax];
int prev[nmax];

vint q[2];

int get_next(int v) {
  if (next[v] == v)
    return v;
  else
    return next[v] = get_next(next[v]);
}

int get_prev(int v) {
  if (prev[v] == v)
    return v;
  else
    return prev[v] = get_prev(prev[v]);
}

int n;
int F[nmax];

void upd(int i, int val) {
  while (i <= n) {
    F[i] += val;
    i = 2 * i - (i & (i - 1));
  }
}

int get(int i) {
  int ans = 0;
  while (i > 0) {
    ans += F[i];
    i = i & (i - 1);
  }
  return ans;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin); //freopen("output.txt", "w", stdout);
#else
	//freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
#endif
  int T;
  cin >> T;
  REP(II, T) {
    q[0].clear();
    q[1].clear();
    string s;
    fill(F, F + n + 1, 0);
    cin >> n;
    cin >> s;

    FE(i, s) {
      a[i + 1] = s[i] - '0';
      next[i + 1] = i + 1;
      prev[i + 1] = i + 1;
      upd(i + 1, 1);
    }
    next[n + 1] = n + 1;
    prev[0] = 0;
    a[n + 1]  = -1;
    a[0] = -1;

    int pr = 0;
    int nx = 1;

    FOR(i, 1, n - 1) {
      if (a[i] == 4 && a[i + 1] == 7)
        q[pr].PB(i);
    }

    LL ans = 0;
    while (!q[pr].empty()) {
      q[nx].clear();
      FE(i, q[pr]) {
        int v = q[pr][i];

        int nv = get_next(v + 1);
        ans += get(v);
       // cout << v << " " << get(v) << endl;
        next[v] = v + 1;
        next[nv] = nv + 1;
        prev[v] = v - 1;
        prev[nv] = nv - 1;
        v = get_prev(v);
        nv = get_next(nv);
        if (a[v] == 4 && a[nv] == 7) {
          q[nx].PB(v);
        }
      }
      FE(i, q[pr]) {
        int v = q[pr][i];
        upd(v, -2);
      }
      //cout << endl;
      swap(nx, pr);
    }

    cout << ans << endl;
  }
	return 0;
}
