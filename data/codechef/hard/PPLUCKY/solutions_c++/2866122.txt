#include<iostream>
#include<sstream>
#include<cstdio>
#include<stdlib.h>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<stack>
#include<queue>
#include<vector>
#include<utility>
#include<set>
#include<map>
 
using namespace std;
 
typedef long long LL;
typedef unsigned long long ull;
typedef pair<int,int> pa;
typedef vector<int> ve;
 
#define REP(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
#define pb push_back
#define inf 1000000000000000000LL
#define mp make_pair
#define tolerance 1e-9
#define mod 1000000007LL
#define all(vec) (vec).begin(),(vec).end()

int tree[100005];

int read(int idx){
    int sum = 0;
    while (idx > 0){
        sum += tree[idx];
        idx -= (idx & -idx);
    }
    return sum;
}

void update(int idx ,int val){
    while (idx <= 100000){
        tree[idx] += val;
        idx += (idx & -idx);
    }
}

int A[100005];

int main()
{
    // freopen("input.txt","r",stdin);
    
    int T;
    scanf("%d",&T);
    while(T--)
    {
        int N;
        scanf("%d",&N);
        string S;
        cin>>S;

        stack<int> fourStack;
        stack<int> levels;

        rep(i,100005)   A[i] = 0;

        for(int i=0;i<N;i++)
        {
            if( S[i] == '4' )
            {
                fourStack.push(i);
                levels.push(1);
            }
            else if( S[i] == '7' && fourStack.size()>0 )
            {
                int temp = fourStack.top();
                int level1 = levels.top();
                fourStack.pop();
                levels.pop();

                A[temp] = level1;

                if( fourStack.size()>0 )
                {
                    int te1 = levels.top();
                    levels.pop();
                    levels.push(max(te1,level1+1));
                }

            }
        }

        // int ans = 0;
        // for(int i=0;i<N;i++)
        // {
        //     if( A[i] == 0 )
        //         continue;
        //     int cnt = 0;
        //     for(int j=0;j<i;j++)
        //         if( A[j]!=0 && A[j]<A[i] )
        //             cnt++;
        //     ans += (i+1)-2*cnt;
        // }

        // cout<<ans<<endl;

        long long ans2 = 0;
        rep(i,100005)   tree[i] = 0;
        for(int i=0;i<N;i++)
        {
            if( A[i] == 0 )
                continue;
            int cnt = read(A[i]-1);
            update(A[i],1);
            ans2 += (long long)(i+1)-2LL*(long long)cnt;
        }

        printf("%lld\n",ans2);

    }

    return 0;
}       
