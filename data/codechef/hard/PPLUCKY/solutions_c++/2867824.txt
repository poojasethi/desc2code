#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <vector>
using namespace std;
#define p(x) cout<<#x<<":"<<x<<"\n"
#define ll long long
#define lim 100001
ll cs,n,s,i,j;
char str[lim];
ll tree[lim],M[lim],S[lim],C[lim],A[lim];
vector <pair<ll,ll> > V;
ll solve(ll i)
{
  ll &res=M[i],j,mx;
  if(res==-1)
  {
    for(j=i+1,mx=0;j<C[i];j=C[j]+1)
    {
      if(!solve(j) || !C[j])
        break;
      mx=max(mx,solve(j));
    }
    if(j==C[i])
    {
      res=mx+1;
      V.push_back(make_pair(res,-i));
    }
    else
      res=0;
  }
  return res;
}
ll read(ll idx){
    ll sum = 0;
    while (idx > 0){
        sum += tree[idx];
        idx -= (idx & -idx);
    }
    return sum;
}
void update(ll idx){
    ll val=1;
    while (idx <= n){
        tree[idx] += val;
        idx += (idx & -idx);
    }
}
int main()
{
  cin>>cs;
  while(cs--)
  {
    cin>>n>>str;
    for(i=0;i<n;i++)
      A[i]=str[i]=='7';
    for(i=0;i<=n;i++)
    {
      M[i]=-1;
      C[i]=tree[i]=0;
    }
    for(i=s=0;i<n;i++)
      if(A[i])
      {
        s--;
        if(s>=0)
          C[S[s]]=i;
        s=max(s,0ll);
      }
      else
        S[s++]=i;
    V.clear();
    for(i=0;i<n;i++)
      if(!A[i] && M[i]==-1)
        solve(i);
    sort(V.begin(),V.end());
    for(i=s=0;i<V.size();i++)
    {
      j=-V[i].second+1;
      s+=j-2*read(j);
      update(j);
    }
    cout<<s<<"\n";
  }
	return 0;
}
