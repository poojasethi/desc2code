#include<iostream>
#include<stack>
using namespace std;
int seg_tree[300000];

void update(int i,int x,int y,int a,int b)
{
	int j;
	if(x>=a && y<=b)
	 seg_tree[i]++;
	else
	{
		if(x>=y || a>y || b<x)
		    return;
		update(2*i+1,x,(x+y)/2,a,b); 
		update(2*i+2,(x+y)/2+1,y,a,b);
	} 
}


int getval(int i,int n)
{
	int j,k=0;
	j=n+i-2;
	while(j>0)
	{
	 k=k+seg_tree[j];
	 j=(j-1)/2;
    }
	return 2*k; 
}


int main()
{
	int i,j,k,n,t,level[100005],n1;
	long long r=0;
	string s;
	cin>>t;
	while(t--)
	{
	cin>>n>>s;
	stack<char>st;
	stack<int>id,m_lev;
	st.push('-'),id.push(-1),m_lev.push(-1);
	i=0,r=0,n1=n;
	while(i<n)
	{
		level[i]=-1;
		if(st.top()=='4' && s[i]=='7')
		{
			level[id.top()]=k=m_lev.top();
			st.pop(),id.pop(),m_lev.pop();
			m_lev.top()=max(m_lev.top(),k+1);
		}	
		else
		{
			id.push(i);
			m_lev.push(1);
			st.push(s[i]);
		}
		i++;
	}
	while(id.size()>1)
	{
		level[id.top()]=-1;
		id.pop();
	}
	for(i=1;i<n;i=(i<<1));
	n=i;
	for(i=0;i<=2*n;i++)
	 seg_tree[i]=0; 
	for(i=0;i<n1;i++)
	{
		if(level[i]>0)
		{
    		r=r+i+1-getval(level[i],n);
			update(0,1,n,level[i]+1,n1);
		}
	}
	cout<<r<<endl;
    }
	return 0;
}
