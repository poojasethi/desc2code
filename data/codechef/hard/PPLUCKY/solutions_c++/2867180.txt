/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.

* File Name : lucky.cpp

* Purpose : SPOJ

* Creation Date : 21-10-2013

* Last Modified : Mon 21 Oct 2013 08:50:07 PM IST

* Created By : npsabari

_._._._._._._._._._._._._._._._._._._._._.*/

#include <iterator>
#include <cctype>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <ctime>
#include <cassert>
#include <climits>
#include <limits>
#include <string>
using namespace std;

//Macros
#define dbl double
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair< int, int >
#define psi pair< string, int >
#define vi vector<int>
#define vll vector<ll>

#define abs(x) ((x)<0?-(x):(x))
#define sqr(x) ((x)*(x))

#define MOD 1000000007
#define MAXN 110000
#define MAXBUF 5000000
#define EPS 1e-9
#define NIL 0
#define INF (INT_MAX/2)
#define LLINF (LONG_LONG_MAX/2LL)
#define NEWLINE '\n'

#define SET(A) memset(A, 1,sizeof(A));                     //NOTE: Works only for x = 0 and -1. Only for integers.
#define CLR(A) memset(A, 0,sizeof(A));
#define MEM(A,x) memset(A,x,sizeof(A));
#define CPY(A,B) memcpy(A,B,sizeof(A));

#define SIZE(A) ((int)(A.size()))
#define ALL(x)  x.begin(),x.end()
#define FILL(A,x) fill(ALL(A),x)
#define REP(i,N) for(int i=0;i<(int)(N); ++i)
#define FORab(i,a,b) for(int i=(int)(a);i<=(int)(b); ++i)
#define RFORab(i,a,b) for(int i=(int)(a);i>=(int)(b); --i)
#define FOR1(i,n) FORab(i,1,(n))
#define RFOR1(i,n) RFORab(i,(n),1)
#define FOR(i,n) FORab(i,0,(n)-1)
#define RFOR(i,n) RFORab(i,(n)-1,0)
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define SORTV(x) sort(ALL(x))
#define REVV(x) reverse(ALL(x))

#define mp make_pair
#define pb push_back
#define ff first
#define ss second

#define nbits(n) __builtin_popcount(n)                  //NOTE: Works only for int. Write your own function for long long :-/
#define atbit(x,i) (((x)>>(i))&1)
#define FIXMOD(a) (((a)%MOD+MOD)%MOD)

#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)

int n;
int lst[MAXN];
int matchindex[MAXN];

class BIT{
  public:
    int N;
    //Index always starts from 1
    ll tree[MAXN];

    BIT(int a){
      N = a;
    }

    void initialize(bool initialValuePresent = true){
      if(!initialValuePresent){
        memset(tree, 0, sizeof(ll)*(N+1));
        return ;
      }
    }

    ll cumulativeQuery(int idx){
      ll sum = 0;
      while(idx > 0){
        sum += tree[idx];
        idx -= (idx & -idx);
      }
      return sum;
    }

    void update(int idx, ll val){
      while(idx <= N){
        tree[idx] += val;
        idx += (idx & -idx);
      }
    }
};

char inp[MAXN];
int numpops[MAXN];

int main() {
  int c;
  BIT bt(1);
  scanf("%d", &c);
  while(c--) {
    scanf("%d", &n);
    scanf("%s", inp);
    REP(i, n) {
      lst[i] = inp[i] - '0';
    }
    stack<int> store;

    memset(matchindex, -1, sizeof(int)*(n+1));
    bool iflag = false;
    memset(numpops, 0, sizeof(int)*(n+1));
    for(int i = 0; i < n; ++i) {
      if(lst[i] == 4) {
        store.push(i);
        numpops[i] = 1;
      } else {
        if(!store.empty()) {
          int t = store.top();
          matchindex[i] = t+1;
          matchindex[t] = i+1;
          store.pop();
          if(!store.empty())
            numpops[store.top()] = max(numpops[store.top()], numpops[t]+1);
          iflag = true;
        }
      }
    }
    
    if(!iflag) {
      printf("0\n");
      continue;
    }

    int maxsteps = -1;
    for(int i = 0; i < n; ++i) {
      if(lst[i] == 4 && matchindex[i] != -1)
        maxsteps = max(maxsteps, numpops[i]);
    }

    bt.N = maxsteps+1;
    bt.initialize(false);

    ll sol = 0;
    for(int i = 0; i < n; ++i) {
      if(lst[i] == 4 && matchindex[i] != -1) {
        //cout<<"I "<<(i+1)<<" matchindex "<<matchindex[i];
        //cout<<" Bit query "<<bt.cumulativeQuery(numpops[i]-1);
        //cout<<" num steps "<<numpops[i];
        ll t = 2*bt.cumulativeQuery(numpops[i]-1);
        sol += i+1 - t; 
        assert(i+1 - t > 0);
        bt.update(numpops[i], 1);
        //cout<<" sol "<<sol<<endl;
      }
    }
    printf("%lld\n", sol);
  }
	return 0;
}
