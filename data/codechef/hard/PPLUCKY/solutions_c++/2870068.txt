#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

struct Four
{
    int index_;
    int layer_;
    Four(const Four & right) : index_(right.index_), layer_(right.layer_) {}
    Four(int index, int layer) : index_(index), layer_(layer) {}
};

int Sum(const int * arbero, int ndx)
{
    int tot=0;
    while(ndx>0)
    {
        tot+=arbero[ndx-1];
        ndx-=ndx&-ndx;
    }
    return tot;
}

void Update(int * arbero, int ndx, int N)
{
    while(ndx<=N)
    {
        arbero[ndx-1]++;
        ndx+=ndx&-ndx;
    }
}

int main()
{
    char s[100004];
    int marker[100000];
    int arbero[100000];
    int T;
    cin>>T;
    for(int t=0; t<T; t++)
    {
        int N;
        cin>>N;
        cin>>s;
        memset(marker, 0, sizeof(marker));
        memset(arbero, 0, sizeof(arbero));

        vector<Four> vf;
        for(int i=0; i<N; i++)
        {
            if(s[i]=='4')
            {
                vf.push_back(Four(i,0));
            }
            else
            {
                if(vf.size()&&vf.back().index_>=0)
                {
                    Four fback=vf.back();
                    vf.pop_back();
                    marker[fback.index_]=fback.layer_+1;
                    if(vf.size()&&vf.back().index_>=0)
                    {
                        vf.back().layer_=max(vf.back().layer_,fback.layer_+1);
                    }
                }
                else
                {
                    vf.push_back(Four(-1,0));
                }
            }
        }

        long long result=0;
        for(int i=0; i<N; i++)
        {
            if(marker[i])
            {
                result+=i+1-2*Sum(arbero,marker[i]-1);
                Update(arbero,marker[i],N);
            }
        }
        cout<<result<<endl;
    }
    return 0;
}
