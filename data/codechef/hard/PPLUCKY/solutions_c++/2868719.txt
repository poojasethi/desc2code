#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>
#include<sstream>

#include<algorithm>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<bitset>

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef vector<string> vs; 
typedef pair<int,int> ii;
typedef long long int LLI;
typedef unsigned long long int ULLI;

#define sz(a)                        int((a).size()) 
#define pb                           push_back 
#define mp                           make_pair
#define F                            first
#define S                            second
#define present(c,x)                 ((c).find(x) != (c).end()) 
#define cpresent(c,x)                (find(all(c),x) != (c).end())
#define tr(c,i)                      for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define all(c)                       (c).begin(),(c).end()
#define si(n)                        scanf("%d",&n)
#define sl(n)                        scanf("%lld",&n)
#define sf(n)                        scanf("%f",&n)
#define sd(n)                        scanf("%lf",&n)
#define ss(n)                        scanf("%s",n)

#define abs(x)                       ((x)<0?-(x):(x))
#define fill(a,v)                    memset((a),(v),sizeof (a))
#define INF                          INT_MAX
#define LINF                         (long long)1e18
#define EPS                          1e-9
#define MAX

int query(int *removed, int idx)
{
	int sum = 0;
	while(idx > 0)
	{
		sum += removed[idx];
		idx -= (idx & -idx);
	}
	return sum;
}

int update(int *removed, int n, int idx, int x)
{
	while(idx <= n)
	{
		removed[idx] += x;
		idx += (idx & -idx);
	}
}

int main()
{
	char s[100002];
	int t, n;

	for(si(t); t--; )
	{
		si(n); ss(s+1);
		stack<int> st;
		int removal_time[n+1], removed[n+1];

		fill(removal_time, 0);
		fill(removed, 0);

		for(int i=1; i<=n; ++i)
		{
			if(s[i] == '4')
				st.push(i);
			else if(st.size())
			{
				int j = st.top();
				st.pop();
				++removal_time[j];
				if(st.size())
					removal_time[st.top()] = max(removal_time[st.top()], removal_time[j]);
			}
		}

		while(st.size())
		{
			removal_time[st.top()] = 0;
			st.pop();
		}

		LLI ans = 0;
		for(int i=1; i<=n; ++i)
		{
			if(removal_time[i] == 0)
				continue;
			ans += i - 2*query(removed, removal_time[i]-1);
			update(removed, n, removal_time[i], 1);
		}
		printf("%lld\n", ans);
	}
	return 0;
}
