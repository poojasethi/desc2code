#include <iostream>
#include <map>
#include <set>
#include <queue>
#include <list>
#include <vector>
#include <string>
#include <deque>
#include <bitset>
#include <algorithm>
#include <utility>
#include <functional>
#include <limits>
#include <numeric>
#include <complex>
#include <cassert>
#include <cmath>
#include <memory.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <climits>

// #define ONLINE_JUDGE 1

using namespace std;

template<typename X> inline X abs(const X& a) { return (a < 0 ? -a : a); }
template<typename X> inline X sqr(const X& a) { return (a * a); }
template<typename X> inline void print(const X& a,int N) {cout<<endl;for(int i=0;i<N;i++)cout<<a[i]<<" ";cout<<endl;}
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pp;
typedef pair<ld, ld> ppld;
typedef unsigned long long ull;

#define FOR(i, n) for(int i = 0; i < int(n); i++)
#define FORD(i, n) for(int i = int(n-1); i >= 0; i--)
#define FORAB(i, a, b) for(int i = int(a); i < int(b); i++)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define pb push_back
#define mp make_pair
#define mset(a, val) memset(a, val, sizeof (a))
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define getcx getchar_unlocked
#define getmid(a,b) (a+(b-a)/2)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)

const int INF = int(1e9);
const ll INF64 = ll(INF) * ll(INF);
const ld EPS = 1e-9;
const ld PI = ld(3.1415926535897932384626433832795);


template<typename X> inline void inp(X &n ) {
     int ch=getcx();int sign=1;n=0;
     while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
     while(  ch >= '0' && ch <= '9' ) n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
     n=n*sign;
}
template<typename X> inline void out(X a) {
    char snum[20]; int i=0;
    do {snum[i++]=a%10+48; a=a/10; }while(a!=0);
    i=i-1;
    while(i>=0) putchar_unlocked(snum[i--]);
    putchar_unlocked('\n');
}
// Globals /////////////////////////////////////////////////////////////////
int stack[100001] = {0};
int array[100001] = {0};
int partner_mapping[100001] = {0};
int marked[100001] = {0};

// Segment tree ////////////////////////////////////////////////////////////
int getMid(int s, int e) {  return s + (e -s)/2;  }
int getSumUtil(int *st, int ss, int se, int qs, int qe, int index)
{
    if (qs <= ss && qe >= se)
        return st[index];
    if (se < qs || ss > qe)
        return 0;
    int mid = getMid(ss, se);
    return max(getSumUtil(st, ss, mid, qs, qe, 2*index+1)
           ,getSumUtil(st, mid+1, se, qs, qe, 2*index+2));
}
void updateValueUtil(int *st, int ss, int se, int i, int newval, int index)
{
    if (i < ss || i > se)
        return;
    st[index] = max(st[index], newval);
    if (se != ss)
    {
        int mid = getMid(ss, se);
        updateValueUtil(st, ss, mid, i, newval, 2*index + 1);
        updateValueUtil(st, mid+1, se, i, newval, 2*index + 2);
    }
}
void updateValue(int arr[], int *st, int n, int i, int newval)
{
    arr[i] = newval;
    updateValueUtil(st, 0, n-1, i, newval, 0);
}
int getSum(int *st, int n, int qs, int qe)
{
    if (qs < 0 || qe > n-1 || qs > qe)
    {
        return -1;
    }
    return getSumUtil(st, 0, n-1, qs, qe, 0);
}
int constructSTUtil(int arr[], int ss, int se, int *st, int si)
{
    if (ss == se)
    {
        st[si] = arr[ss];
        return arr[ss];
    }
    int mid = getMid(ss, se);
    st[si] =  max(constructSTUtil(arr, ss, mid, st, si*2+1)
              ,constructSTUtil(arr, mid+1, se, st, si*2+2));
    return st[si];
}
int *constructST(int arr[], int n)
{
    int x = (int)(ceil(log2(n))); //Height of segment tree
    int max_size = 2*(int)pow(2, x) - 1; //Maximum size of segment tree
    int *st = new int[max_size];
    constructSTUtil(arr, 0, n-1, st, 0);
    return st;
}

// Binary index tree
int* create_bit(int arr[], int n){
    int *bit = new int[n+1]();
    return bit;
}
ll read(int* bit, int n, int idx){
    ll answer = 0;
    while(idx > 0){
        answer += bit[idx];
        idx -= (idx & -idx);
    }
    return answer;
}
void update(int* bit, int n, int idx, int val){
    //printf("Update(bit,n,%d,%d)\n",idx,val);
    if(idx <= 0) 
        return;
    while(idx <= n){
        bit[idx] += val;
        idx += (idx & -idx);
    }
    return;
}
int main(){
    //Code
    int T,N;
    inp(T);
    while(T--){
        string S;
        int string_length;
        inp(string_length);
        cin>>S;
        
        for(int i=0;i<string_length;i++){
            stack[i] = 0;
            array[i] = 0;
            marked[i] = 0;
            partner_mapping[i] = 0;
        }
        int* segment_tree = constructST(array, string_length);

        int i = 0;
        int top = -1;
        while(i < string_length){
            //Initialize
            if(S[i]=='4'){
                stack[++top] = i;
            }
            else{
                if(top==-1){
                    i++;
                    continue;
                }
                int pos = stack[top];
                //Segment tree to get and set max value in range (4)pos-(7)top
                int maxval = getSum(segment_tree, string_length, pos, i);
                updateValue(array, segment_tree, string_length, pos, maxval+1);
                updateValue(array, segment_tree, string_length, i, maxval+1);
                //Set mapping
                partner_mapping[pos] = i;
                partner_mapping[i] = pos;
                //Decrement top
                top--;
            }
            i++;
        }

        // BIT to get number of indexes such that for j<=i array[j]<=k for kth iteration
        i = 0;
        ll answer = 0;
        int *bit = create_bit(array, string_length);
        while(i < string_length){
            if(array[i] == 0 or marked[i]==1){
                update(bit, string_length, array[i], 1);
                i++;
                continue;
            }
            answer += (i+1)-read(bit, string_length, array[i]-1);
            update(bit, string_length, array[i], 1);
            //Set mapping to 0 to NOT count the 7's
            marked[partner_mapping[i]] = 1;
            marked[i] = 1;
            i++;
        }
        out(answer);

        delete[] segment_tree;
        delete[] bit;
    }
    return 0;
}
