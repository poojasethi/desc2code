#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
 
using namespace std;
 
typedef vector<int> VI;
typedef pair<int, int> PI;
typedef vector<PI> VPI;
 
#define FOR(i,a,n) for (int i = (a); i < (n); ++i)
#define FORE(i,a,n) for (int i = (a); i <= (n); ++i)
#define FORD(i,a,b) for (int i = (a); i >= (b); --i)
#define REP(i,n) FOR(i,0,n)
#define REPE(i,n) FORE(i,0,n)
#define LL long long
#define FIR(n) REP(i,n)
#define FJR(n) REP(j,n)
#define ALL(v) v.begin(), v.end()
 
#define FI FIR(n)
#define FJ FJR(n)
#define FR(i,a) FOR(i,a,n)
#define REPN(i) REP(i,n)
 
#define GI(n) scanf("%d", &n)
#define GI2(n,m) scanf("%d %d", &n, &m)
 
int n;
int q[100500];
 
void add(int p){for (;p<=n;p+=p&-p) ++q[p];}
int sum(int e){int r=0;for(;e;e&=e-1) r+=q[e];return r;}
 
struct Node {
int prev, next;
char v;
};
 
Node nodes[100500];
char buf[100500];
 
 
 
LL solve() {
LL res = 0;
GI(n);
scanf("%s", buf);
FORE(i, 1, n) {
nodes[i].prev = i-1;
nodes[i].next = i+1;
nodes[i].v = buf[i-1];
}
nodes[0].next = 1;
nodes[0].v = '0';
nodes[n+1].prev = n;
nodes[n+1].v = '0';
FORE(i, 1, n) q[i] = 0;
 
VI active;
VI active2;
FORE(i, 1, n) if (nodes[i].v == '4' && nodes[i+1].v == '7') active.push_back(i);
 
while (active.size()) {
FIR(active.size()) {
int pos = active[i];
int before = sum(pos);
res += pos - 2*before;
}
 
FIR(active.size()) {
int pos = active[i];
add(pos);
int prev = nodes[pos].prev;
int next = nodes[nodes[pos].next].next;
nodes[prev].next = next;
nodes[next].prev = prev;
if (nodes[prev].v == '4' && nodes[next].v == '7')
active2.push_back(prev);
}
 
active.clear();
swap(active2, active);
}
 
 
return res;
}
 
int main() {
#ifdef LOCALF
freopen("input.txt", "rt", stdin);
#endif
 
int tc; GI(tc);
while (tc--) {
LL res = solve();
printf("%lld\n", res);
}
 
}