#include <iostream>
#include <stack>
#include <vector>
#include <stdio.h>
#include <cstdlib>

using namespace std;

int crap()
{
    int arr[]={4,7,4,4,4,7,4,7,7,7,4,7};
    for(int i=0;i<12;i++)
    {
        if(arr[i]==4&&arr[i+1]==7)
        {
            arr[i]=0;
            arr[i+1]=0;

        }
    }
    return 0;
}
int depth_table(int depth,int pos)
{

    cout<<depth<<","<<pos<<endl;
}



int main2()
{
    //make depth table;

    vector<vector<int> > table (100005,vector<int>(0));


    int arr[]={4,7,4,4,4,7,4,7,7,7,4,7};
    int length=12;
    long long depth=0;
    stack<int> stack7;
    for(int i=0;i<12;i++)
    {
        if(arr[i]==4)
        {
            stack7.push(i+1);//warning :position from 1
            depth=0;
        }
        if(arr[i]==7)
        {
            if(!stack7.empty())
            {
                depth++;
                int pos=stack7.top();
                stack7.pop();
                depth_table(depth,pos);
                table.at(depth).push_back(pos);

            }
        }
    }
    //check depth table and compute
    int i=1;
    while(table.at(i).size()!=0)
    {
        for(int j=0;j<table.at(i).size();j++)
        {
            //cout<<table.at(i).at(j);

        }
        i++;
    }
}
int main3(int n,int arr[])
{
    int length=n;
    //int arr[]={4,7,4,4,4,7,4,7,7,7,4,7};
    //int arr[]={4,4,4,7,4,7,7,7,4,7};
    //find depth of each 4 in depth array
    int depth[100005]={0};
    stack<int> stack4;
    for(int i=0;i<length;i++)
    {
        if(arr[i]==4)
        {
            stack4.push(i);
            depth[i]=1;
        }
        else if(arr[i]==7)
        {
            if(!stack4.empty())
            {
                int temp_dep=depth[stack4.top()];
                stack4.pop();
                if(!stack4.empty())
                {if(depth[stack4.top()]<=temp_dep)
                {
                    depth[stack4.top()]=temp_dep+1;
                }
                }
            }
        }
    }
    for(int i=0;i<length;i++)
    {
        //cout<<depth[i]<<endl;
    }
    int table[100005]={0};
    int ans=0;
    for(int i=0;i<length;i++)
    {
        if(arr[i]==4)
        {
            int dep=depth[i];
            table[dep]++;
            int shift=0;
            while(--dep)
            {
                shift=shift+table[dep];
            }
            ans=ans-shift*2+i+1;
        }
    }
    cout<<ans<<endl;

    /*
    while(!stack4.empty())
    {
        stack4.pop();
    }

    int popped[12]={0};
    for(int i=0;i<12;i++)
    {
        if(arr[i]==4)
        {
            stack4.push(i);
        }
        else if(arr[i]==7)
        {
            int d=depth[stack4.top()];
            popped[d]++;
            stack4.pop();

        }
    }*/

}

int main()
{
    //main2();
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n;
        int arr[100005]={0};
        scanf("%d",&n);
        char temp;
        scanf("%c",&temp);
        for(int i=0;i<n;i++)
        {
            char c;
            scanf("%c",&c);
            arr[i]=c-48;
        }
        int length=n;
    //int arr[]={4,7,4,4,4,7,4,7,7,7,4,7};
    //int arr[]={4,4,4,7,4,7,7,7,4,7};
    //find depth of each 4 in depth array
    int depth[100005]={0};
    stack<int> stack4;
    for(int i=0;i<length;i++)
    {
        if(arr[i]==4)
        {
            stack4.push(i);
            depth[i]=1;
        }
        else if(arr[i]==7)
        {
            if(!stack4.empty())
            {
                int temp_dep=depth[stack4.top()];
                stack4.pop();
                if(!stack4.empty())
                {if(depth[stack4.top()]<=temp_dep)
                {
                    depth[stack4.top()]=temp_dep+1;
                }
                }
            }
        }
    }
    while(!stack4.empty())
    {
        depth[stack4.top()]=0;
        stack4.pop();
    }
    for(int i=0;i<length;i++)
    {
        //cout<<depth[i]<<endl;

    }
    int table[100005]={0};
    long long ans=0;
    for(int i=0;i<length;i++)
    {
        if(arr[i]==4)
        {
            int dep=depth[i];
            table[dep]++;
            int shift=0;
            if(dep){
            while(--dep)
            {
                shift=shift+table[dep];
            }
            ans=ans+1-shift*2+i;
            }
        }
    }
    cout<<ans<<endl;


    }



return 0;
}
int brute(int length,int arr[])
{
    if(length==0)
        return 0;
    int counter=0;
    int ans=0;
    for(int i=0;i<length;i++)
    {
        if(arr[i]==4&&arr[i+1]==7)
        {
            length-=2;
            ans=ans+i;
            counter+=2;

        }
        else
        {
            arr[i]=arr[i-counter];
        }
    }
    if(ans==0)
        return 0;
    ans=ans+brute(length,arr);
    return ans;
}
int mainx()
{
    int arr[100005],arr2[100005];

    int n=10;
    for(int i=0;i<n;i++)
    {
        arr[i]=rand()%2==0?4:7;
        arr2[i]=arr[i];
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<endl;
    }
    cout<<brute(n,arr);
    main3(n,arr2);

}
