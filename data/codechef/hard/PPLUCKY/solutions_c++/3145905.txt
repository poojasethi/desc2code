#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
#include<queue>
#include<utility>
#include<map>
#include<bitset>
#include<stack>
using namespace std;

typedef vector<int> VI;
typedef long long LL;
typedef unsigned long long uLL;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
#define pb push_back
#define fi first
#define se second
#define mp make_pair
#pragma comment(linker, "/STACK:266777216")

const int inf=1000000000;
const LL INF=LL(inf)*inf;
const double eps=1e-9;
const double PI=2*acos(0.0);

#define MAXN 100011

int N;
char S[MAXN]; //the lucky string
int stp[MAXN];//the stp number when it is removed
int f[MAXN]; //to indicate whether removed or not

stack<int>A; //To find the stp numbers

int max(int a, int b){return a>b?a:b;}
//Fenwick Tree
int tree[MAXN];
class FenwickTree
{
    public:
        int MaxVal;
        FenwickTree()
        {
            MaxVal = N+5;
        }
        //Read cumulative frequency at index idx
        int read(int idx)
        {
            int sum = 0;
            while(idx>0)
            {
                sum+= tree[idx];
                idx -= (idx & -idx);
            }
            return sum;
        }

        //Update frequency at index idx by value val
        void update(int idx, int val)
        {
            while(idx <= MaxVal)
            {
                tree[idx] += val;
                idx += (idx & -idx);
            }
        }
};
FenwickTree ft;

void solve()
{
    scanf("%d", &N);
    scanf("%s", S);

    //Initialize
    memset(f, 0, 4*(N+5));
    memset(stp, 0, 4*(N+5));

    while(!A.empty())
    {
        A.pop();
    }

    //First pass to determine stp
    int j, k;
    for(int i=1; i<=N; i++)
    {
        if(S[i-1] == '4')
        {
            stp[i] = 1;
            A.push(i);
        }
        else //means its a 7
        {
            if(!A.empty())
            {

                j = A.top();
                A.pop();
                f[j] = 1;
                f[i] = 1;
                stp[i] = stp[j];
                if(!A.empty())
                {
                    k = A.top();
                    stp[k] = max(stp[k], 1+ stp[j]);
                }
            }
        }
    }

    //Second pass to find the sum
    memset(tree, 0, 4*(N+5));
    ft.MaxVal = N+5;

    LL ans = 0;
    LL diff;
    for(int i=1; i<=N; i++)
    {
        if(S[i-1] == '4' && f[i] == 1)
        {
            diff = (LL)ft.read(stp[i]-1);
            ans += (LL)i - 2*diff;

        }
        if(S[i-1] == '7' && f[i] == 1)
        {
            ft.update(stp[i], 1);
        }
    }
    printf("%lld\n", ans);
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int t;
    scanf("%d", &t);
    while(t--)
    {
        solve();
    }
}
