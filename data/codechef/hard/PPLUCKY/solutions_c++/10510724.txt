#include <iostream>
#include <cstdio>
#include <string>
#include <stack>
#include <cmath>
#define ll long long
using namespace std;
 
string ch;
ll t,n;
ll arr[2000005];
ll tree[2000005];
ll num[2000005];
ll BIT[2000005];
 
void update(ll node, ll start, ll end, ll idx, ll val)
{
    if(start == end)
    {
    	
        arr[idx] = val;
        tree[node] = val;
        //cout << node<<"sx"<<tree[node]<<endl;
    }
    else
    {
        ll mid = (start + end) / 2;
        if(start <= idx and idx <= mid)
        {
            // If idx is in the left child, recurse on the left child
            update(2*node, start, mid, idx, val);
        }
        else
        {
            // if idx is in the right child, recurse on the right child
            update(2*node+1, mid+1, end, idx, val);
        }
        // Internal node will have the sum of both of its children
        
        ll k1 = tree[2*node];
        ll k2 = tree[2*node+1];
        tree[node] = k1>k2 ? k1 : k2;
    }
}
 
 
ll query(ll node, ll start, ll end, ll l, ll r)
{
	if(node>4*n)
		cout <<"dca"<<node<<endl;
		
	//cout << node<<" "<<start<<" "<<end<<" "<<l<<" "<<r<<endl;
    if(r < start || end < l)
    {
        // range represented by a node is completely outside the given range
        return -1;
    }
    if(l <= start && end <= r)
    {
        // range represented by a node is completely inside the given range
        return tree[node];
    }
    // range represented by a node is partially inside and partially outside the given range
    ll mid = (start + end) / 2;
    ll p1 = query(2*node, start, mid, l, r);
    ll p2 = query(2*node+1, mid+1, end, l, r);
    //cout << p1<<" " << p2<<" " << node<<"="<<start<<" "<<end<<"="<<l<<" "<<r<<endl;
    return p1>p2 ? p1 : p2;
}
 
void update(ll x, ll val)
{
      for(; x <= n; x += x&-x)
        BIT[x] += val;
}
ll query(ll x)
{
     ll sum = 0;
     for(; x > 0; x -= x&-x)
        sum += BIT[x];
     return sum;
}
 
int main() {
	// your code goes here
	
	scanf("%lld",&t);
	
	while(t--){
		
		stack<ll> mystack;
		scanf("%lld",&n);
		
		cin >> ch;
		//n = ch.length();
		for(ll i=0;i<n;i++){
			num[i+1] = ch.at(i)-'0';
		}
	
		
		for(ll i=0;i<=4*n+3;i++){
			tree[i] = -1;
			BIT[i] = 0;
			arr[i] = -1;
		}
		
		for(ll i=1;i<=n;i++){
			if(num[i]==4)
				mystack.push(i);
			else if(!mystack.empty()){
				ll indx = mystack.top();
				mystack.pop();
				ll mincnt = query(1,1,n,indx,i);

				if(mincnt==-1){
				
					update(1,1,n,indx,1);
					update(1,1,n,i,1);
				} else {
				
					update(1,1,n,indx,mincnt+1);
					update(1,1,n,i,mincnt+1);
				}
			}

		}
		
		ll ans = 0;
		for(ll i=1;i<=n;i++){
	
			if(arr[i]==-1)
				continue;
			update(arr[i]+1,1);
			ll temp = query(arr[i]);
			temp = i-temp;
			if(num[i]==4)
				ans += temp;
		
		}

		printf("%lld\n",ans);
		
	}
	
	return 0;
} 