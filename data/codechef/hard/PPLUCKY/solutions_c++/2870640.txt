#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <utility>
#include <functional>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;

#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
#define fordn(i,a,b) for(int i=a;i>=b;i--)
#define drep(i,n) for(i=0;i<n;i++)
#define dforup(i,a,b) for(i=a;i<=b;i++)
#define dfordn(i,a,b) for(i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define ri(x) scanf("%d",&x)
#define rl(x) scanf("%lld",&x)
#define rd(x) scanf("%.lf",&x);
#define rs(x) scanf(" %s",x);
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
#define modref 1000000007

struct BIT
{
	int bn; //bn>0
	vector<int> bA;
	BIT(){ bn=0; }
	BIT(int bn_){ bn=bn_; bA.resize(bn+1); fill(bA.begin(),bA.end(),0); }
	
	int prefix(int bposn)
	{
		if(bposn<=0) return 0;
		if(bposn>bn) bposn=bn;
		
		int ret=0;
		for(int i=bposn; i>0; i-=((i)&(-i)))
			ret+=bA[i];
		return ret;
	}
	
	void update(int bposn, int bincr)
	{
		if(bposn<=0) return;
		if(bposn>bn) return;
		
		for(int i=bposn; i<=bn; i+=((i)&(-i)))
			bA[i]+=bincr;
	}
};

string inp;

int main() {
	int t,n;
	ri(t);
	while(t--) {
		ri(n);
		cin>>inp;
		stack<int> S;
		vi dual(n,-1);
		rep(i,n) {
			if(inp[i]=='4')
				S.push(i);
			else if(!S.empty()) {
				int j=S.top();
				dual[i]=j;
				dual[j]=i;
				S.pop();
			}
		}
		vi turn(n,-1);
		rep(i,n-1)
			if(inp[i]=='4' and inp[i+1]=='7') turn[i]=turn[i+1]=1;
		rep(i,n) {
			if(inp[i]=='7' and turn[i]==-1) {
				int mxt=-1,cur=i-1;
				while(cur!=-1 and turn[cur]!=-1) {
					mxt=max(mxt,turn[cur]);
					cur=dual[cur]-1;
				}
				if(cur!=-1 and cur==dual[i])
					turn[i]=turn[cur]=mxt+1;
			}
		}
		BIT b(n);
		ll ans=0;
		rep(i,n) {
			if(turn[i]==-1) continue;
			if(inp[i]=='4') {
				int rem=b.prefix(turn[i]-1);
				ans+=i+1-rem;
			}
			b.update(turn[i],1);
		}
		printf("%lld\n",ans);
	}
	return 0;
}
