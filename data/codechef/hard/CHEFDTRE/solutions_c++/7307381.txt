    #include "bits/stdc++.h"
    using namespace std;
    const int N = 3e5 + 5;
    struct node{
    node* left;
    node* right;
    int cnt;
    node(){
    left = NULL;
    right = NULL;
    cnt = 0;
    }
    node* insert(int l , int r , int val){
    ++cnt;
    if(l < r){
    int mid = l + r >> 1;
    if(val <= mid){
    if(left == NULL){
    left = new node();
    }
    left = left -> insert(l , mid , val);
    }
    else{
    if(right == NULL){
    right = new node();
    }
    right = right -> insert(mid + 1 , r , val);
    }
    }
    return this;
    }
    int kth(int l , int r , int k){
    if(l == r){
    return l;
    }
    int mid = l + r >> 1;
    int count = (left == NULL) ? 0 : left -> cnt;
    if(count >= k){
    return left -> kth(l , mid , k);
    }
    return right -> kth(mid + 1 , r , k - count);
    }
    node* merge(node* other){
    cnt += other -> cnt;
    if(other -> left != NULL){
    if(left == NULL){
    left = other -> left;
    }
    else{
    left = left -> merge(other -> left);
    }
    }
    if(other -> right != NULL){
    if(right == NULL){
    right = other -> right;
    }
    else{
    right = right -> merge(other -> right);
    }
    }
    return this;
    }
    };
    node* rdtree[N];
    int n , q;
    int idx1 , idx2 , cur , k;
    char arr[6];
    int main(){
    scanf("%d %d" , &n , &q);
    for(int i = 1 ; i <= n ; ++i){
    rdtree[i] = new node();
    rdtree[i] = rdtree[i] -> insert(1 , n , i);
    }
    cur = n;
    while(q--){
    scanf("%s" , arr);
    if(arr[0] == 'U'){
    scanf("%d %d" , &idx1 , &idx2);
    rdtree[++cur] = rdtree[idx1];
    rdtree[cur] = rdtree[cur] -> merge(rdtree[idx2]);
    }
    else{
    scanf("%d %d" , &idx1 , &k);
    printf("%d\n" , rdtree[idx1] -> kth(1 , n , k));
    }
    }
    }