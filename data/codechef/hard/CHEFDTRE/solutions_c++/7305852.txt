#include <bits/stdc++.h>

using namespace std;

const int maxn = 1000000;

struct node{
	node* left;
	node* right;
	int priority, key, cnt;
	node(){
		left = right = NULL;
		priority = -1;
		cnt = key = 0;
	}
	node(int val){
		left = right = NULL;
		cnt = 1;
		priority = rand();
		key = val;
	}
	int get_size(node* &cur){
		if(cur==NULL)
			return 0;
		return (cur->cnt);
	}
	void update_size(node* &cur){
		if(cur==NULL)
			return;
		cur->cnt = get_size(cur->left) + get_size(cur->right) + 1;
	}
	void split(node* cur, node* &l, node* &r, int val){
		if(cur==NULL){
			l = r = NULL;
			return;
		}
		if((cur->key)>=val){
			/*if(r==NULL)
				r = new node();
			if(l==NULL)
				l = new node();*/
			split(cur->left, l, cur->left, val);
			r = cur;
		}
		else{
			/*if(l==NULL)
				l = new node();
			if(r==NULL)
				r = new node();*/
			split(cur->right, cur->right, r, val);
			l = cur;
		}
		update_size(cur);
	}
	void merge(node* &cur, node* &t1, node* &t2){
		if(t1==NULL && t2==NULL){
			cur = NULL;
			return;
		}
		if(t1==NULL){
			cur = t2;
			return;
		}
		if(t2==NULL){
			cur = t1;
			return;
		}
		if(t1->priority > t2->priority){
			merge(cur->right, t1->right, t2);
			cur = t1;
		}
		else{
			merge(cur->left, t1, t2->left);
			cur = t2;
		}
		update_size(cur);
	}
	void insert(node* &cur, node* &val){
		if(cur==NULL){
			cur = new node();
			*cur = *val;
			free(val);
		}
		else if((cur->priority) < (val->priority)){
			split(cur, val->left, val->right, val->key);
			cur = val;
		}
		else if(cur->key > val->key)
			insert(cur->left, val);
		else
			insert(cur->right, val);
		update_size(cur);
	}	
	void insert(node* &cur, int v){
		node* x = new node(v);
		insert(cur, x);
	}
	void delete_node(node* &cur, int val){
		if(cur==NULL)
			return;
		if(cur->key > val)
			delete_node(cur->left, val);
		else if(cur->key < val)
			delete_node(cur->right, val);
		else
			merge(cur, cur->left, cur->right);
		update_size(cur);
	}
	int getkth(node* &cur, int k){
		int c;
		if(cur->left==NULL)
			c = 0;
		else
			c = cur->left->cnt;
		if(k==(c+1))
			return (cur->key);
		if(k<=c)
			return getkth(cur->left, k);
		else
			return getkth(cur->right, k-c-1);
	}
	void inorder_traversal(node* &cur){
		if(cur==NULL)
			return;
		inorder_traversal(cur->left);
		cout << cur->key << " ";
		inorder_traversal(cur->right);
	}
};

node* treap[maxn];
char str[15];
vector<int> v[maxn];
int p[maxn];

int main()
{
	//freopen("input.txt", "r", stdin);
	int n, m, q, a, b, i, j, k, sa, sb;
	scanf("%d%d", &n, &q);
	for(i=1; i<=n; i++){
		treap[i] = NULL;
		treap[i]->insert(treap[i], i);
		v[i].clear();
		p[i] = i;
		v[i].push_back(i);
	}
	/*for(i=2; i<=n; i++)
		treap[1]->insert(treap[1], i);
	for(i=1; i<=n; i++){
		cout << treap[1]->getkth(treap[1], i) << "\n";
	}*/
	m = n;
	while(q--){
		scanf("%s", str);
		if(str[0]=='U'){
			scanf("%d%d", &a, &b);
			a = p[a], b = p[b];
			if(treap[a])
				sa = treap[a]->cnt;
			else
				sa = 0;
			if(treap[b])
				sb = treap[b]->cnt;
			else
				sb = 0;
			if(sb>sa)
				swap(a, b);
			for(i=0; i<v[b].size(); i++){
				v[a].push_back(v[b][i]);
				treap[a]->insert(treap[a], v[b][i]);
			}
			v[b].clear();
			p[++m] = a;
		}
		else{
			scanf("%d%d", &a, &b);
			a = p[a];
			printf("%d\n", treap[a]->getkth(treap[a], b));	
		}
	}
	return 0;
}