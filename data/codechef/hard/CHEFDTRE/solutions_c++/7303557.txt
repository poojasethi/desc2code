#include <bits/stdc++.h>

using namespace std;

const int maxn = 1000000;

struct node{
	int key, height, cnt;
	node* left;
	node* right;
	node(){
		left = right = NULL;
		height = cnt = 0;
	}
	node(int val){
		left = right = NULL;
		height = cnt = 1;
		key = val;
	}
	int get_height(node* &cur){
		if(cur==NULL)
			return 0;
		return cur->height;
	}
	int get_count(node* &cur){
		if(cur==NULL)
			return 0;
		return cur->cnt;
	}
	node* left_rotate(node* &cur){
		node* x = cur->right;
		node* y = x->left;

		x->left = cur;
		cur->right = y;

		cur->height = max(get_height(cur->left), get_height(cur->right))+1;
		x->height = max(get_height(x->left), get_height(x->right))+1;

		cur->cnt = get_count(cur->left) + get_count(cur->right) + 1;
		x->cnt = get_count(x->left) + get_count(x->right) + 1;

		return x;
	}
	node* right_rotate(node* &cur){
		node* x = cur->left;
		node* y = x->right;

		x->right = cur;
		cur->left = y;

		cur->height = max(get_height(cur->left), get_height(cur->right))+1;
		x->height = max(get_height(x->left), get_height(x->right))+1;

		cur->cnt = get_count(cur->left) + get_count(cur->right) + 1;
		x->cnt = get_count(x->left) + get_count(x->right) + 1;

		return x;
	}
	void insert(node* &cur, int val){
		if(cur==NULL){
			cur = new node(val);
			return;
		}
		cur->cnt++;
		if((cur->key)>val)
			insert(cur->left, val);
		else
			insert(cur->right, val);
		cur->height = max(get_height(cur->left), get_height(cur->right))+1;
		int bal = get_height(cur->left) - get_height(cur->right);
		if(bal>1 && val<(cur->left->key)){												//Left Left
			cur = right_rotate(cur);
		}
		else if(bal>1 && val>(cur->left->key)){											//Left Right
			cur->left = left_rotate(cur->left);
			cur = right_rotate(cur);
		}
		else if(bal<-1 && val<(cur->right->key)){										//Right Left
			cur->right = right_rotate(cur->right);
			cur = left_rotate(cur);
		}
		else if(bal<-1 && val>(cur->right->key)){										//Right Right
			cur = left_rotate(cur);
		}
		return;
	}
	int getkth(node* &cur, int k){
		int c;
		if(cur->left==NULL)
			c = 0;
		else
			c = cur->left->cnt;
		if(k==c+1)
			return (cur->key);
		if(k<=c)
			return getkth(cur->left, k);
		else
			return getkth(cur->right, k-c-1);
	}
};

node* root[maxn];
char str[15];
vector<int> v[maxn];
int p[maxn];

int main()
{
	//freopen("input.txt", "r", stdin);
	int i, j, n, q, m, a, b, sa, sb;
	scanf("%d%d", &n, &q);
	for(i=1; i<=n; i++){
		root[i] = NULL;
		root[i]->insert(root[i], i);
		v[i].clear();
		v[i].push_back(i);
		p[i] = i;
	}
	/*for(i=2; i<=10; i++){
		root[1]->insert(root[1], i);
		cout << root[1]->key << " " << root[1]->cnt << " " << root[1]->height << endl;
 	}*/
	m = n;
	while(q--){
		scanf("%s", str);
		if(str[0]=='U'){
			scanf("%d%d", &a, &b);
			a = p[a], b = p[b];
			if(root[a]==NULL)
				sa = 0;
			else
				sa = root[a]->cnt;
			if(root[b]==NULL)
				sb = 0;
			else
				sb = root[b]->cnt;
			if(sb>sa)
				swap(a, b);
			for(i=0; i<v[b].size(); i++){
				v[a].push_back(v[b][i]);
				root[a]->insert(root[a], v[b][i]);
			}
			v[b].clear();
			p[++m] = a;	
		}
		else{
			scanf("%d%d", &a, &b);
			a = p[a];
			printf("%d\n", root[a]->getkth(root[a], b));
		}
	}
	return 0;
}