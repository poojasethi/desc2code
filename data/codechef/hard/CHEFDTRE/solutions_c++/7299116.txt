#include <bits/stdc++.h>
using namespace std;

#define sd(x) scanf("%d", &x)

#define M 1123456

struct item{
	int l, r;
	int key, priority;
	int cnt;
} a[M];

void upd_cnt(int t){
	if(t > 0){
		a[t].cnt = 1 + a[a[t].l].cnt + a[a[t].r].cnt;
	}
}

void split (int t, int key, int &l, int &r) {
	if (t == 0)
		l = r = 0;
	else if (key < a[t].key)
		split (a[t].l, key, l, a[t].l), r = t;
	else
		split (a[t].r, key, a[t].r, r), l = t;
	upd_cnt(r);
	upd_cnt(l);
}

int unite (int l, int r) {
	//cout<<l<<" "<<r<<endl;
	if (!l || !r) return l ? l : r;
 	if (a[l].priority < a[r].priority) swap (l, r);
 	int lt, rt;
 	split (r, a[l].key, lt, rt);
 	a[l].l = unite (a[l].l, lt);
 	a[l].r = unite (a[l].r, rt);
 	upd_cnt(l);
 	return l;
}

int query(int t, int k){
	//cout<<t<<" "<<k<<endl;
	if(a[a[t].l].cnt >= k){
		return query(a[t].l, k);
	}
	else if(a[a[t].l].cnt + 1 == k){
		return a[t].key;
	}
	else{
		return query(a[t].r, k - a[a[t].l].cnt - 1);
	}
}

int id[M];
int ra[M];

int main() {
	int i, j, n, q;
	string s;
	sd(n); sd(q);
	for(i = 0; i < n; i++){
		ra[i] = i;
	}
	random_shuffle(ra, ra + n);
	for(i = 1; i <= n; i++){
		a[i].key = i;
		a[i].priority = ra[i - 1] + 1;
		a[i].cnt = 1;
		a[i].l = 0;
		a[i].r = 0;
		id[i] = i;
	}
	while(q--){
		cin>>s;
		sd(i); sd(j);
		//cout<<": "<<q<<endl;
		if(s == "UNION"){
			n++;
			id[n] = unite(id[i], id[j]);
			//cout<<"  "<<n<<" "<<id[n]<<endl;
		}
		else{
			printf("%d\n", query(id[i], j));
		}
	}
	return 0;
}