#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  const int MOD = 1e9 + 7;
  int T, N, B, K, newmask;
  scanf("%d", &T);
  assert(T > 0 && T <= 5);
  int dp[32][32][1 << 7];
  while (T--) {
    scanf("%d %d %d", &N, &K, &B);
    assert(N >= 0 && N <= 1e9);
    assert(K <= 7 && K >= 0);
    assert(B <= 32 && B >= 0);
    CL(dp, 0);
    dp[0][0][0] = 1;
    // 1) current pos,2) used bits from B,3) mask how many number is ok
    // 3) more detail:
    // 1 bit is 1 number is strictly less than N
    // 2 bit is 1st number is strictly greater than than the 2nd
    // 3 bit is 2nd number is strictly greater than than the 3rd etc
    int KK = 1 << K;
    rep(i, 31) {
      int currBitOfN = (N >> (30 - i)) & 1;
      rep(used, B + 1) rep(mask, KK) if (dp[i][used][mask]) {
        rep(pred, KK) {
          newmask = mask;
          if (!(mask & 1)) {  // 1st number is equal N yet
            if (currBitOfN < (pred & 1))
              continue;
            else if (currBitOfN > (pred & 1)) {
              newmask |= 1;
            }
          }
          bool ok = true;
          FOR(j, 1, K) {
            if (!(mask & (1 << j))) {
              int tmp = ((pred >> (j - 1)) & 3);
              if (tmp == 2) {
                pred |= ((1 << (j - 1)) - 1);
                ok = false;
                break;
              } else if (tmp == 1) {
                newmask |= 1 << j;
              }
            }
          }
          if (ok) {
            int& act =
                dp[i + 1][used + (__builtin_popcount(pred) & 1)][newmask];
            act += dp[i][used][mask];
            if (act >= MOD) act -= MOD;
          }
        }
      }
    }
    ll ans = 0;
    ans += dp[31][B][KK - 1];
    if (ans >= MOD) ans -= MOD;
    ans += dp[31][B][KK - 2];
    if (ans >= MOD) ans -= MOD;
    printf("%lld\n", ans);
  }
#ifdef LOCAL_HOST
  printf("TIME: %.3lf\n", double(clock()) / CLOCKS_PER_SEC);
#endif

  return 0;
}
