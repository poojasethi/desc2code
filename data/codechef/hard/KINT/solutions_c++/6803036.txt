// Author: thecodekaiser
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
#define MOD 1000000007
int N, K, B;
int dp[35][265][35];		// dp[i][mask][no of bits in XORSUM]
int arr[35], tarr[10];

int func(int rem, int mask, int btcnt)
{
	if(rem == -1)
	{
		if((mask == (1 << K)-1) and btcnt == B)	return 1;
		return 0;
	}
	
	if(dp[rem][mask][btcnt] != -1)
		return dp[rem][mask][btcnt];
		
	int ret = 0;
	for(int i = 0; i < (1 << K); i++)
	{
		int curr = 0;
		
		for(int j = 0; j < K; j++)
		{
			if(i & (1 << j)) { tarr[j] = 1; curr++;	}	// No of bits is increased
			else			   tarr[j] = 0;
		}
		
		tarr[K] = arr[rem];
		
		bool flag = true;
		int nmask = mask;
		
		for(int j = 0; j < K; j++)
		{
			if(!(mask & (1 << j)))
			{
				if(tarr[j] > tarr[j+1]) { flag = false; break; }	// Earlier it used to equal than number at j+1 th position now it has 
																	// become bigger and this is invalid
																	
				if(tarr[j] < tarr[j+1]) nmask = nmask | (1 << j);	// Now it has become smaller which is acceptable
			}
		}
		
		if(!flag) continue;
		
		else ret += func(rem-1, nmask, btcnt+(curr%2));
		
		if(ret >= MOD)
			ret -= MOD;
	}
	
	return dp[rem][mask][btcnt] = ret;
}
		 

void solve()
{
	memset(dp, -1, sizeof(dp));
	cin >> N >> K >> B;
	
	N++;
	int start = -1;
	
	while(N > 0)
	{
		start++;
		arr[start] = N % 2;
//		cout << arr[start] << "";
		N /= 2;
	}
//	cout << endl;
//	cout << start << endl;
	cout << func(start, 0, 0) << "\n";
	
	return;
}

int main()
{
	int t;
	cin >> t;
	
	while(t--)
		solve();
		
	return 0;
}