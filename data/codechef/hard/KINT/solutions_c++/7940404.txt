#pragma comment(linker, "/STACK:1024000000,1024000000") 
#include <iostream> 
#include <stdlib.h> 
#include <ctime> 
#include <cmath> 
#include <stdio.h> 
#include <vector> 
#include <algorithm> 
#include <queue> 
#include <string.h> 
#include <map> 
#include <set> 
#include <assert.h>
#define x first 
#define y second 
#define pb push_back 
#define mp make_pair 
#define vi vector<int> 
#define pii pair<int,int> 
#define ll long long 
#define inf 1000000007 
#define mod 1000000007
#define all(x) x.begin(),x.end() 
#define N 1500010
#define pi acos(-1.)
#define DBG(x) cerr<<#x<<"="<<x<<"\n"; 
#define FOREACH(it,x) for(__typeof(x.begin()) it=x.begin();it!=x.end();it++) 
using namespace std; 
 
 
int K,b[31];
int dp[31][31][1<<7],f[1<<7][1<<7][2][2];
int dfs(int x,int y,int q)
{
    if(x==-1)return y==0&&q==(1<<K)-1;
    int &ret=dp[x][y][q];
    if(ret+1)return ret;
    ret=0;
        for(int i=0;i<1<<K;i++){
            if(f[q][i][b[x]][0]){
                ret+=1LL*f[q][i][b[x]][0]*dfs(x-1,y,i)%mod;
                if(ret>=mod)ret-=mod;
            }
            if(y&&f[q][i][b[x]][1]){
                ret+=1LL*f[q][i][b[x]][1]*dfs(x-1,y-1,i)%mod;
                if(ret>=mod)ret-=mod;
            }
        }
    return ret;
}
int s,it;
void cal(int x,int last,int y,int ns)
{
    if(x==-1){
        f[s][ns][it][y&1]++;return;
    }
        int i=s>>x&1;
        if(i)cal(x-1,0,y,ns<<1|1),cal(x-1,1,y+1,ns<<1|1);
        else{
            if(last==1){
                cal(x-1,0,y,ns<<1|1),cal(x-1,1,y+1,ns<<1);
            }
            else{
                cal(x-1,0,y,ns<<1);
            }
        }
}
int main()
{
    int T,i,j,k,ca=0,n,m;
    scanf("%d",&T);
    while(T--){
        int B;
        scanf("%d%d%d",&n,&K,&B);n++;
        memset(f,0,sizeof(f));
        for(it=0;it<2;it++)
        for(i=0;i<1<<K;i++){
                s=i;cal(K-1,it,0,0);
            }
        for(i=29;i>=0;i--)if(n>>i&1)b[i]=1;else b[i]=0;
        for(i=29;i>=0;i--)if(b[i])break;
        k=i;
        memset(dp,-1,sizeof(dp));
        int ans=dfs(k,B,0);
        printf("%d\n",ans);
    }
}  