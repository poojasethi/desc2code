//Template

//By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end()
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

#define MOD 1000000007

int dp[35][34][1<<7];
int main() {
    int t;
    scanf("%d", &t);
    while(t--) {
        int N, K, B;
        scanf("%d%d%d", &N, &K, &B);
        N++;
        memset(dp, 0, sizeof dp);
        for(int i=0; i<=32; i++)
                        for(int k=0; k<(1<<K); k++) {
                            for(int mask=0; mask<(1<<K); mask++) {
                                bool valid = true;
                                int cb = __builtin_popcount(mask)&1;
                                int nk = k;
                                for(int j=0; j<K-1; j++) {
                                    //validate j with j+1
                                    if((k >> j) & 1) continue;
                                    if(((mask>>j)&1) > ((mask>>(j+1))&1)) { valid = false; break; }
                                    if(((mask>>j)&1) < ((mask>>(j+1))&1)) { nk += (1<<j); }
                                }
                                if(((k >> (K-1)) & 1) == 0) {
                                    if(((mask>>(K-1))&1) > ((N>>(i-1))&1)) { valid = false; }
                                    if(((mask>>(K-1))&1) < ((N>>(i-1))&1)) { nk += (1<<(K-1)); }
                                }
                                if(valid) {
                                    for(int b=0; b<=30; b++) {
                                        if(i == 0) {
                                                dp[i][b][k] = 0;
                                                dp[i][B][(1<<K)-1] = 1;
                                                continue;
                                        }
                                        dp[i][b][k] += dp[i-1][b+cb][nk];
                                        if(dp[i][b][k] >= MOD) dp[i][b][k] -= MOD;
                                    }
                                }
                            }
                        }
        printf("%d\n", dp[32][0][0]);
    }
}