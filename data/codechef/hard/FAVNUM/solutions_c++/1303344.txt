//
//  main.cpp
//  FAVNUM
//
//  Created by Sokol Kostya's MacBook on 02.09.11.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <cstring>
#include <algorithm>
#include <iomanip>
#include <queue>
#include <cstdlib>
#include <ctime>
#include <stack>
#include <fstream>

typedef unsigned long long ull;
#define mp make_pair
#define pb push_back

const long double eps = 1e-9;
const double pi = acos(-1.0);
const long long inf = 1e18;

using namespace std;

struct tv
{
    int next[ 10 ];
    int link, num, f, prev, ch;
    int go[ 10 ];
    tv()
    {
        for ( int i = 0; i < 10; i++ ) next[i] = go[i] = -1;
        link = -1;
        num = 0;
        f = -1;
        prev = 0;
        ch = 0;
    }
};

long long ff[ 21 ][ 1200 ][ 2 ][ 2 ];
tv tree[ 1200 ];
int h = 1, n;
long long l, r, k, fun_l, fun_r, x;
string st;

void add( int v, int pos )
{
    if ( pos == st.size() )
    {
        tree[v].num++;
        return;
    }
    int ch = st[pos] - '0';
    if ( tree[v].next[ch] == -1 )
    {
        tree[v].next[ch] = h;
        tree[h].prev = v;
        tree[h].ch = ch;
        h++;
    }
    add( tree[v].next[ch], pos + 1 );
}

int go( int v, int c );

int getlink( int v )
{
    if ( tree[v].link != -1 ) return tree[v].link;
    if ( v == 0 || tree[v].prev == 0 )
    {
        tree[v].link = 0;
        return 0;
    }
    tree[v].link = go( getlink( tree[v].prev ), tree[v].ch );
    return tree[v].link;
}

int go( int v, int c )
{
    if ( tree[v].go[c] != -1 ) return tree[v].go[c];  
    if ( tree[v].next[c] != -1 )
    {
        tree[v].go[c] = tree[v].next[c];
        return tree[v].go[c];
    }
    if ( v == 0 )
    {
        tree[v].go[c] = 0;
        return 0;
    }
    tree[v].go[c] = go( getlink( v ), c );
    return tree[v].go[ c ];
}

int func( int v )
{
    if ( tree[v].f != -1 ) return tree[v].f;
    if ( v == 0 )
    {
        tree[v].f = 0;
        return 0;
    }
    tree[v].f = func( getlink( v ) ) + tree[v].num;
    return tree[v].f;
}

void fill()
{
    for ( int i = 0; i < 21; i++ )
        for ( int j = 0; j < h; j++ )
            for ( int k = 0; k < 2; k++ )
                for ( int l = 0; l < 2; l++ )
                    ff[i][j][k][l] = 0;
}

long long fun( long long num )
{
    if ( num == 0 ) return 0;
    fill();
    vector< int > digits;
    for ( int i = 0; i < 20; i++ ) digits.pb( int( num % 10 ) ), num /= 10;
    reverse( digits.begin(), digits.end() );
    ff[0][0][0][0] = 1;
    for ( int i = 0; i < 20; i++ )
        for ( int j = 0; j < h; j++ )
            for ( int k = 0; k < 2; k++ )
                for ( int l = 0; l < 2; l++ )
                {
                    if ( ff[i][j][k][l] == 0 ) continue;
                    int ii = i + 1;
                    for ( int next = 0; next < 10; next++ )
                    {
                        if ( k == 0 && next > digits[ i ] ) continue;
                        int jj = go( j, next );
                        int kk = k;
                        if ( next < digits[i] ) kk = 1;
                        int ll = l;
                        if ( func( jj ) != 0 ) ll = 1;
                        ff[ii][jj][kk][ll] += ff[i][j][k][l];
                    }
                }
    long long res = 0;
    for ( int i = 0; i < h; i++ )
        res += ff[20][i][0][1] + ff[20][i][1][1];
    return res;
}

int main (int argc, const char * argv[])
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    cin >> l >> r >> k >> n;
    for ( int i = 0; i < n; i++ )
    {
        cin >> st;
        add( 0, 0 );
    }
    fun_l = fun( l - 1 );
    fun_r = fun( r );
    if ( fun_r - fun_l < k)
    {
        cout << "no such number";
        return 0;
    }
    x = r;
    while ( l <= r )
    {
        long long cur = (l + r) / 2;
        if ( fun( cur ) - fun_l >= k )
        {
            x = min(x, cur);
            r = cur - 1;
        } else l = cur + 1;
    }
    cout << x;
    return 0;
}
