#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>   
#include <map>
#include <string>  
#include <climits> 
#include <set>
#include <string>    
#include <sstream>
#include <utility>   
#include <ctime>

using std::priority_queue;
using std::vector;
using std::swap;
using std::stack;
using std::sort;
using std::max;
using std::min;
using std::pair;
using std::map;
using std::string;
using std::cin;
using std::cout;
using std::set;
using std::queue;
using std::string;
using std::istringstream;
using std::make_pair;
using std::getline;
using std::greater;
using std::endl;
using std::multimap;
using std::deque;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> PAIR;
typedef multimap<int, int> MMAP;

const int MAXN(1410);
const int SIGMA_SIZE(10);
const int MAXM(110);
const int MAXE(300010);
const int MAXH(18);
const int INFI((INT_MAX-1) >> 1);
const int MOD(2520);
const ULL LIM(1000000000000000ull);

struct AC
{
	int ch[MAXN][SIGMA_SIZE], f[MAXN];
	int val[MAXN];
	int size;
	inline int idx(char temp)
	{
		return temp-'0';
	}
	void init()
	{
		memset(ch[0], 0, sizeof(ch[0]));
		val[0] = 0;
		size = 1;
	}

	void insert(char *S)
	{
		int u = 0, id;
		for(; *S; ++S)
		{
			id = idx(*S);
			if(!ch[u][id])
			{
				memset(ch[size], 0, sizeof(ch[size]));
				val[size] = false;
				ch[u][id] = size++;
			}
			u = ch[u][id];
		}
		val[u] = 1;
	}

	int que[MAXN];
	int front, back;
	void construct()
	{
		int cur, u;
		front = back = 0;
		for(int i = 0; i < SIGMA_SIZE; ++i)
			if(ch[0][i])
			{
				u = ch[0][i];
				f[u] = 0;
				que[back++] = u;
			}
		while(front < back)
		{
			cur = que[front++];
			for(int i = 0; i < SIGMA_SIZE; ++i)
			{
				u = ch[cur][i];
				if(u)
				{
					f[u] = ch[f[cur]][i];
					val[u] |= val[f[u]];
					que[back++] = u;
				}
				else
					ch[cur][i] = ch[f[cur]][i];
			}
		}
	}
};

AC ac;

LL table[20][MAXN][2];
int digit1[20], digit2[20];

LL dfs(int len, int u, int flag, bool lowbound, bool upbound, bool zero)
{
	if(len == 0)
		return flag? 1: 0;
	if(!lowbound && !upbound && !zero && table[len][u][flag] != -1)
		return table[len][u][flag];
	int low = lowbound? digit1[len]: 0, up = upbound? digit2[len]: 9;
	LL ret = 0;
	for(int i = low; i <= up; ++i)
		if(zero && i == 0 && len > 1)
			ret += dfs(len-1, 0, flag, lowbound && i == low, upbound && i == up, true);
		else
			ret += dfs(len-1, ac.ch[u][i], flag|(ac.val[ac.ch[u][i]]), lowbound && i == low, upbound && i == up, zero && i == 0);
	if(!lowbound && !upbound && !zero)
		table[len][u][flag] = ret;
	return ret;
}

LL fun(LL num1, LL num2)
{
	int len1 = 1;
	while(true)
	{
		digit1[len1] = num1%10;
		num1 /= 10;
		if(num1 == 0)
			break;
		++len1;
	}
	int len2 = 1;
	while(true)
	{
		digit2[len2] = num2%10;
		num2 /= 10;
		if(num2 == 0)
			break;
		++len2;
	}
	for(int i = len1+1; i <= len2; ++i)
		digit1[i] = 0;
	return dfs(len2, 0, 0, true, true, true);
}

char str[20];

int main()
{
	LL a, b, K;
	int n;
	while(cin >> a >> b >> K >> n)
	{
		ac.init();
		for(int i = 0; i < n; ++i)
		{
			cin >> str;
			ac.insert(str);
		}
		ac.construct();
		memset(table, -1, sizeof(table));
		LL l = a, r = b+1;
		while(l < r)
		{
			LL m = l+(r-l)/2;
			if(fun(a, m) < K)
				l = m+1;
			else
				r = m;
		}
		if(l == b+1)
			cout << "no such number\n";
		else
			cout << l << "\n";
	}	
	return 0;
}
