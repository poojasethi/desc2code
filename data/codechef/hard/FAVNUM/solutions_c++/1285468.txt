#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<iostream>
using namespace std;
typedef long long LL;
struct node
{
    int c[10],fail,times;
    void init()
    {
        memset(c,0,sizeof(c));
        fail=-1;times=0;
    }
}t[1501];
int tot,root,que[1501];
int a[25],head,tail;
LL ans[1501][25],f[25][1501];
char str[25];
void init()
{
    root=tot=0;
    t[0].init();
}
void insert(char*s)
{
    int p=root,index;
    while(*s)
    {
        index=*s-'0';
        if (t[p].c[index]==0)
        {
            t[++tot].init();
            t[p].c[index]=tot;
        }
        p=t[p].c[index];
        s++;
    }
    t[p].times++;
}
void build_ac_auto()
{
    head=tail=1;
    que[tail]=root;
    int i;
    while(head<=tail)
    {
        int u=que[head];
        for (i=0;i<=9;i++)
        {
            if (t[u].c[i])
            {
                int son=t[u].c[i];
                int p=t[u].fail;
                if (u==root)t[son].fail=root;
                else t[son].fail=t[p].c[i];
                t[son].times|=t[t[p].c[i]].times;
                que[++tail]=son;
            }
            else
            {
                int p=t[u].fail;
                if (u==root)
                t[u].c[i]=root;
                else t[u].c[i]=t[p].c[i];
            }
        }
        head++;
    }
}
LL dp(int now,int step)
{
    int i,j,k;
    if (ans[now][step]!=-1)return ans[now][step];
    memset(f,0,sizeof(f));
    f[0][now]=1;
    for (i=0;i<=step;i++)
    {
		ans[now][i]=0;
		for(j=0;j<=tot;j++)
        {
			if (t[j].times)
            {
				f[i][j]=0;
				continue;
			}
			ans[now][i]+=f[i][j];
			for (k=0;k<=9;k++)
				f[i+1][t[j].c[k]]+=f[i][j];
		}
	}
	
	return ans[now][step];
}
LL solve(LL n)
{
    if (n==0)return 0;
    LL ret=-1;
    int p=0,len=0,i,j;
    while(n>0)
    {
        a[++len]=n%10;
        n/=10;
    }
    for (i=len;i>=1;i--)
    {
		for(j=0;j<=a[i]-1;j++)
			ret+=dp(t[p].c[j],i-1);
		p=t[p].c[a[i]];
		if (t[p].times)
			break;
	}
	if (!t[p].times)
		ret++;
	return ret;
}
int main()
{
    int i,j,n;
    LL l,r,k;
    //freopen("number.in","r",stdin);
    //freopen("number.out","w",stdout);
    cin>>l>>r>>k>>n;
    //getchar();
    for (i=1;i<=n;i++)
    {
        cin>>str;
        insert(str);
    }
    build_ac_auto();
    memset(ans,0xff,sizeof(ans));
    LL num_of_l=l-1-solve(l-1),ret=-1;
    while(l<=r)
    {
        LL mid=(l+r)/2;
        if (mid-solve(mid)-num_of_l>=k)
        {
            ret=mid;
            r=mid-1;
        }
        else l=mid+1;
    }
    if (ret==-1)printf("no such number\n");
    else cout<<ret<<endl;
    return 0;
}