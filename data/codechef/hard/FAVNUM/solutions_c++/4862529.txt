#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i, a, b) for (int _n(b), i(a); i < _n; i++)
#define rep(i, n) FOR(i, 0, n)
#define CL(a, v) memset((a), (v), sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int, int> pii;

/*** TEMPLATE CODE ENDS HERE */

const int MAXLEN = 1200;
const int MAXM = 10;
int suf[MAXLEN], pc[MAXLEN], p[MAXLEN], q[MAXLEN];
int num[MAXLEN], F[MAXLEN];
int a[MAXLEN][MAXM];
int size;

void Init() {
  size = 1;
  CL(F, -1);
  CL(suf, 0);
  CL(pc, 0);
  CL(p, -1);
  CL(num, 0);
}

void Add2Trie(const string &s) {
  int n = (int)s.size();
  int at = 0;
  rep(i, n) {
    int d = s[i] - '0';
    if (!a[at][d]) {
      a[at][d] = size;
      pc[size] = d;
      p[size] = at;
      ++size;
    }
    at = a[at][d];
  }
  ++num[at];
}

void BuildAchoKorasik() {
  int h = 0, t = 0;
  q[t++] = 0;
  while (h < t) {
    int at = q[h++];
    suf[at] = a[suf[p[at]]][pc[at]];
    if (!p[at]) suf[at] = 0;
    rep(i, 10) {
      if (!a[at][i]) {
        a[at][i] = a[suf[at]][i];
      } else {
        q[t++] = a[at][i];
      }
    }
  }
}

int Num(int at) {
  if (F[at] != -1) return F[at];
  if (at == 0) {
    return F[at] = 0;
  } else {
    return F[at] = Num(suf[at]) + num[at];
  }
}

long long dp[21][1200][2][2];

ll calc(ll x) {
  if (x == 0) return 0;

  VI digits;
  for (int i = 0; i < 20; i++) digits.pb(int(x % 10)), x /= 10;
  reverse(all(digits));

  CL(dp, 0);
  dp[0][0][0][0] = 1;

  rep(i, 20) {
    rep(at, size) {
      rep(k, 2) {
        rep(l, 2) {
          if (dp[i][at][k][l] == 0) continue;
          int i_nxt = i + 1;
          rep(d, 10) {
            if (k == 0 && d > digits[i]) continue;
            int nxt = a[at][d];
            int k_nxt = k;
            if (d < digits[i]) k_nxt = 1;
            int l_nxt = l;
            if (Num(nxt) != 0) l_nxt = 1;
            dp[i_nxt][nxt][k_nxt][l_nxt] += dp[i][at][k][l];
          }
        }
      }
    }
  }

  ll ans = 0;
  rep(i, size) ans += dp[20][i][0][1] + dp[20][i][1][1];
  return ans;
}

int main() {
#ifdef LOCAL_HOST
  freopen("input.txt", "r", stdin);
// freopen("output.txt","w",stdout);
#endif

  ios_base::sync_with_stdio(false);

  ll L, R, K;
  int N;
  cin >> L >> R >> K >> N;
  string S[63];
  rep(i, N) cin >> S[i];

  Init();
  rep(i, N) Add2Trie(S[i]);
  BuildAchoKorasik();

  ll cnt_l = calc(L - 1);
  ll cnt_r = calc(R);
  if (cnt_r - cnt_l < K) {
    cout << "no such number";
    return 0;
  }
  ll x = R;
  while (L <= R) {
    long long m = (L + R) / 2;
    if (calc(m) - cnt_l >= K) {
      x = min(x, m);
      R = m - 1;
    } else
      L = m + 1;
  }
  cout << x;

  return 0;
}
