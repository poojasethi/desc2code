#include <map>
#include <set>
#include <ctime>
#include <cmath>
#include <queue>
#include <stack>
#include <bitset>
#include <vector>
#include <cstdio>
#include <string>
#include <cassert>
#include <cstring>
#include <numeric>
#include <sstream>
#include <iterator>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long LL;
#define MM(a,x) memset(a,x,sizeof(a));
#define P(x) cerr<<#x<<" = "<<x<<endl;
#define P2(x,y) cerr<<#x<<" = "<<x<<", "<<#y<<" = "<<y<<endl;
#define TM(a,b) cerr<<#a<<"->"<<#b<<": "<<1.*(b-a)/CLOCKS_PER_SEC<<"s\n";
template<class T>void PV(T a, T b) {for(T i = a; i < b; ++i)cout << *i << " "; cout << endl;}
template<class T>void chmin(T &t, T f) {if(t > f) t = f;}
template<class T>void chmax(T &t, T f) {if(t < f) t = f;}


struct AhoCorasick {
	static const int UNDEF = 0;
	static const int MAXN = 1500;
	static const int CHARSET = 10;
	int end;
	int tag[MAXN];
	int fail[MAXN];
	int trie[MAXN][CHARSET];
	int Q[MAXN];

	AhoCorasick() {init();}
	void init() {
		tag[0] = UNDEF;
		fill(trie[0], trie[0] + CHARSET, -1);
		end = 1;
	}
	void add(int m, const int* s, int t) {
		int p = 0;
		for(int i = 0; i < m; ++i) {
			if(trie[p][*s] == -1) {
				tag[end] = UNDEF;
				fill(trie[end], trie[end] + CHARSET, -1);
				trie[p][*s] = end++;
			}
			p = trie[p][*s];
			++s;
		}
		tag[p] = t;
	}
	void build() {
		int head = 0, tail = 0;
		fail[0] = 0;
		for(int i = 0; i < CHARSET; ++i) {
			if(trie[0][i] != -1) {
				fail[trie[0][i]] = 0;
				Q[tail++] = trie[0][i];
			} else {
				trie[0][i] = 0;
			}
		}
		while(head < tail) {
			int p = Q[head++];
			tag[p] |= tag[fail[p]];
			for(int i = 0; i < CHARSET; ++i) {
				if(trie[p][i] != -1) {
					fail[trie[p][i]] = trie[fail[p]][i];
					Q[tail++] = trie[p][i];
				} else {
					trie[p][i] = trie[fail[p]][i];
				}
			}
		}
	}
} ac;


LL L, R, K, N;

LL d[100];

string todigit(LL x) {
	stringstream ss;
	string r;
	ss << x;
	ss >> r;
	return r;
}


LL dp[21][1201][2];
LL F(LL x) {
	string s = todigit(x);
	s = string(20 - s.length(), '0') + s;
	int v[20];
	for(int i = 0; i < 20; i++) v[i] = s[i] - '0';
	MM(dp, 0);
	dp[0][0][1] = 1;
	for(int i = 0; i < 20; i++)
		for(int j = 0; j < ac.end; j++) {
			// equal
			LL equal = dp[i][j][1];
			LL inequal = dp[i][j][0];
			if(equal > 0) {
				for(int k = 0; k <= v[i]; k++) {
					int next = ac.trie[j][k];
					if(!ac.tag[next]) dp[i + 1][next][k == v[i]] += equal;
				}
			}
			if(inequal > 0) {
				for(int k = 0; k < 10; k++) {
					int next = ac.trie[j][k];
					if(!ac.tag[next]) dp[i + 1][next][0] += inequal;
				}
			}
		}
	LL tot = 0;
	for(int i = 0; i < ac.end; i++)
		tot += dp[20][i][0] + dp[20][i][1];
	LL r = x + 1 - tot;
	return r;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> L >> R >> K >> N;
	ac.init();
	for(int i = 0; i < N; i++) {
		cin >> d[i];
		string v = todigit(d[i]);
		int a[20];
		for(int j = 0; j < 20; j++) a[j] = v[j] - '0';
		ac.add(v.length(), a, 1);
	}
	ac.build();
	LL l = L, r = R;
	LL base = F(L - 1);
	while(l < r) {
		LL m = (l + r) / 2;
		if(F(m) - base >= K) {
			r = m;
		} else {
			l = m + 1;
		}
	}
	if(F(l) - base != K) cout << "no such number" << endl;
	else cout << l << endl;
	return 0;
}
