#include <iostream>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <cmath>
using namespace std;

typedef long long int64;

int64 gcd(int64 a, int64 b){
	if (b==0){
		return a; 
	}
	else{
		return gcd(b,a%b);
	}
}


int64 new_min(int64 x, int64 y){
	if(x<y){
		return x;
	}
	else{
		return y;
	}

}

int64 get_sqf(int64 n){
	int64 i=1,p,q;
	for (i=1;i*i*i<=n;i++){
		if (n%(i*i)==0 and i!=1){
			return i;
		}
		else if(n%i==0){
			p=n/i;
			q=(int64) sqrt(p);
			if (q*q==p and q!=1){
				return q;
			}
		}
	}
	return 0;
}


int main(){
	int64 t,i=0,n,i1,i2,temp,ans,x,y;
	int64 inp[110];
	bool done=false;
	//generate_primes();
	scanf("%lli",&t);
	while(i<t){
		ans=0;
		scanf("%lli",&n);
		for(int j=0;j<n;j++){
			scanf("%lli",&inp[j]);
		}
		done=false;
		i1=0;
		while (i1<n && !done){
			i2=0;
			while (i2<i1 && !done){
				temp=gcd(inp[i1],inp[i2]);
				if (temp!=1){
					ans=temp;
					done=true;
				}
				i2++;
			}
			i1++;
		}

		if (!done){
			x=0;
			y=0;
			while(x<n && !done){
				y=get_sqf(inp[x]);
				if (y!=0){
					ans=y;
					done=true;
				}
			x++;
			}
		}
		printf("%lli\n",ans);
		i++;
	}


}