#include <iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
#define ll long long
#define gc getchar_unlocked
using namespace std;

void scanll(ll &x)
{
    register ll c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

struct Node
{
    ll start,end;
};

bool comp(Node n1,Node n2)
{
    return n1.end <= n2.end;
}
Node nodes[100001];

void mergeArrays(Node nodes[],ll left,ll mid,ll right)
{
    Node leftHalf[mid-left+1];
    Node rightHalf[right-mid];
    for(ll i=0; i<mid-left+1; i++)
        leftHalf[i] = nodes[left+i];
    for(ll i=0; i<right-mid; i++)
        rightHalf[i] = nodes[mid+1+i];
    ll i=0,j=0,index=0;
    while(i<mid-left+1 && j<right-mid)
    {
        if(leftHalf[i].end <= rightHalf[j].end)
        {
            nodes[left+index] = leftHalf[i];
            i++;
            index++;
        }
        else if(leftHalf[i].end > rightHalf[j].end)
        {
            nodes[left+index] = rightHalf[j];
            j++;
            index++;
        }
    }
    while(i<mid-left+1)
    {
        nodes[left+index] = leftHalf[i];
        i++;
        index++;
    }
    while(j<right-mid)
    {
        nodes[left+index] = rightHalf[j];
        j++;
        index++;
    }
}

void mergeSort(Node nodes[],ll left,ll right)
{
    if(left < right)
    {
        ll mid = (left + right)/2;
        mergeSort(nodes,left,mid);
        mergeSort(nodes,mid+1,right);
        mergeArrays(nodes,left,mid,right);
    }
}


int main() {
	// your code goes here
	ll t;
	scanll(t);//scanf("%lld",&t);
	
	while(t--)
	{
	    ll n;
	    scanf("%lld",&n);
	    ll N = n;
	    ll index = 0;
	    while(n--)
	    {
	        ll a,b;
	        scanll(a); scanll(b);//scanf("%lld %lld",&a,&b);
	        nodes[index].start = a;
	        nodes[index].end = b;
	        index++;
	    }
	    mergeSort(nodes,0,N-1);
	    
	    ll ans = 0;
	    
	    ll curEnd;
	    for(ll i=0; i<N; i++)
	    {
	        ans++;
	        curEnd = nodes[i].end;
	        while(nodes[i].start <= curEnd && i < N)
	            i++;
	       if(i == N)
	        break;
	       i--;
	    }
	    
	    
	    printf("%lld\n",ans);
	    
	}
	return 0;
}
