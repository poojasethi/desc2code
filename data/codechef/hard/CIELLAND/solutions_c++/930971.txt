
#include <cstdio>
#include <algorithm>
#include <cmath>
using namespace std;
typedef long long i8;

int tst, k, n, x[22], y[22];
double re[1<<13][14];

double mabs(double x) {
	return x<0?-x:x;
}

double dist(int a, int b, int p) {
	double dy=y[a]-y[b], dx=x[b]-x[a];
	return (dy*x[p]+dx*y[p]+x[a]*y[b]-x[b]*y[a])/sqrt(dx*dx+dy*dy);
}

double solve() {
	if ((n+1)/2<=k) return 0.0;
	
	for (int m=1; m<(1<<n); m++) {
		int pc=0;
		for (int p=0; p<n; p++) {
			if (m & (1<<p)) pc++;
		}
		
		for (int w=1; w<=k; w++) {
			if ((pc+1)/2<=w) {
				re[m][w]=0.0;
			} else if (w<2) { // pc>2
				re[m][w]=555;
				for (int a=0; a<n; a++) if (m&(1<<a)) {
					for (int b=a+1; b<n; b++) if (m&(1<<b)) {
						double ma=0, mi=0, x;
						for (int c=0; c<n; c++) if ( c-a && c-b && (m&(1<<c)) ) {
							x=dist(a,b,c);
							ma=max(ma,x); mi=min(mi,x);
						}
						if (ma<0.03 || mi>-0.03)
							re[m][w]=min(re[m][w], (ma-mi)/2);
					}
				}
			} else {
				re[m][w]=555;
				for (int x=(m-1)&m; x>0; x=(x-1)&m) {
					re[m][w]=min(re[m][w], max(re[x][1],re[m^x][w-1]));
				}
			}
		}
	}
	
	return re[(1<<n)-1][k];
}

main() {
	scanf("%d", &tst);
	while (tst--) {
		scanf("%d%d", &n,&k);
		for (int i=0; i<n; i++) 
			scanf("%d%d", x+i, y+i);
			
		printf("%.7lf\n", solve());
	}
}
