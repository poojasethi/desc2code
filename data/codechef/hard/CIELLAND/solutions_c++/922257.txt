#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
#define sqr(x) ((x)*(x))
using namespace std;
const double pi=acos(-1.0);
const double eps=1e-7;

int n,k,f[1<<13];
double x[13],y[13];

void line(double &a,double &b,double &c,double x,double y,double alpha,double xx,double yy,double beta,double r)
{
	double x1=x+r*cos(alpha),y1=y+r*sin(alpha);
	double x2=xx+r*cos(beta),y2=yy+r*sin(beta);
	a=y2-y1; b=x1-x2; c=-a*x1-b*y1;
}

int getMask(double a,double b,double c,double r)
{
	int mask=0;
	for (int i=0;i<n;i++)
		if (fabs(a*x[i]+b*y[i]+c)/sqrt(a*a+b*b)<r+eps)
			mask|=1<<i;
	return mask;
}

int ok(double r)
{
	int m[13*12*2],M=0;
	
	for (int i=0;i<n;i++)
		for (int j=i+1;j<n;j++)
		{
			double d=sqrt(sqr(x[i]-x[j])+sqr(y[i]-y[j]));
			double alpha=acos((x[j]-x[i])/d)*(y[i]>y[j]?-1:1),a,b,c;
			
			line(a,b,c,x[i],y[i],alpha+pi/2,x[j],y[j],alpha+pi/2,r);
			m[M++]=getMask(a,b,c,r);
			
			line(a,b,c,x[i],y[i],alpha-pi/2,x[j],y[j],alpha-pi/2,r);
			m[M++]=getMask(a,b,c,r);
			
			if (r*2+eps>=d) continue;
			
			double beta=acos(r*2/d);
			
			line(a,b,c,x[i],y[i],alpha+beta,x[j],y[j],alpha+pi+beta,r);
			m[M++]=getMask(a,b,c,r);
			
			line(a,b,c,x[i],y[i],alpha-beta,x[j],y[j],alpha+pi-beta,r);
			m[M++]=getMask(a,b,c,r);
		}
	
	for (int mask=1;mask<1<<n;mask++) f[mask]=k+1;
	for (int mask=0;mask<1<<n;mask++)
		for (int i=0;i<M;i++)
			f[mask|m[i]]=min(f[mask|m[i]],f[mask]+1);
			
	return f[(1<<n)-1]<=k || n==1;	
}

int main()
{
	int test;
	cin >> test;
	while (test--)
	{
		cin >> n >> k;
		for (int i=0;i<n;i++) cin >> x[i] >> y[i];

		double low=0,high=300;
		for (int it=0;it<40;it++)
		{
			double mid=(low+high)/2;
			if (ok(mid)) high=mid;
			else low=mid;
		}
	
		printf("%.9lf\n",low);
	}
}
