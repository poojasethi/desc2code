
#include <cstdio>
#include <algorithm>
#include <cmath>
using namespace std;
typedef long long i8;

int tst, k, n, x[22], y[22];
double re[1<<13][14], d2[14][14][14];

double mabs(double x) {
	return x<0?-x:x;
}

double dist(int a, int b, int p) {
	double dy=y[a]-y[b], dx=x[b]-x[a];
	return (dy*x[p]+dx*y[p]+x[a]*y[b]-x[b]*y[a])/sqrt(dx*dx+dy*dy);
}

double optOne(int m) {
	re[m][1]=555;
	for (int a=0,am=1; am<m; a++,am<<=1) if (m&am) {
		for (int b=a+1,bm=1<<b; bm<=m; b++,bm<<=1) if (m&bm) {
			double ma=0.0, mi=0.0;
			for (int c=0,cm=1; cm<=m; c++,cm<<=1) if (m&cm) {
				ma=max(ma,d2[a][b][c]); 
				mi=min(mi,d2[a][b][c]);
			}
			if (ma<0.03 || mi>-0.03)
				re[m][1]=min(re[m][1], (ma-mi)/2);
		}
	}
}

double solve() {
	if ((n+1)/2<=k) return 0.0;
	
	for (int m=1; m<(1<<n)-1; m++) {
		int pc=0, tm=m;
		while (tm) {
			pc += tm & 1;
			tm >>= 1;
		}
		
		for (int w=1; w<k; w++) {
			if ((pc+1)/2<=w) {
				re[m][w]=0.0;
			} else if (w<2) { // pc>2
				optOne(m);
			} else {
				re[m][w]=555;
				for (int x=(m-1)&m; x>0; x=(x-1)&m) {
					re[m][w]=min(re[m][w], max(re[x][1],re[m^x][w-1]));
				}
			}
		}
	}
	
	{ 
		int m=(1<<n)-1;
		int pc=n, w=k;
		
		if ((pc+1)/2<=w) {
			re[m][w]=0.0;
		} else if (w<2) { // pc>2
			optOne(m);
		} else {
			re[m][w]=555;
			for (int x=(m-1)&m; x>0; x=(x-1)&m) {
				re[m][w]=min(re[m][w], max(re[x][1],re[m^x][w-1]));
			}
		}
	}

	return re[(1<<n)-1][k];
}

main() {
	scanf("%d", &tst);
	while (tst--) {
		scanf("%d%d", &n,&k);
		for (int i=0; i<n; i++) 
			scanf("%d%d", x+i, y+i);
			
		for (int a=0; a<n; a++)
			for (int b=a+1; b<n; b++)
				for (int c=0; c<n; c++) {
					if (c==a || c==b) d2[a][b][c]=0.0;
					else d2[a][b][c]=dist(a,b,c);
				}
				
		printf("%.7lf\n", solve());
	}
}
