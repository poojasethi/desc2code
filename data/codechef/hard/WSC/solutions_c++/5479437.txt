//#include<iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#define maxn 11

using namespace std;

//////////////////////////////////////

vector <int> adjl[maxn];
int n,m,edge_count,c_count; //c_count is counting number of connected vertices
bool connected[maxn];

void solve()
{
    //cout << "Edge count is " << edge_count << endl;
    if(edge_count>2)
    {
        printf("NO\n");
        return;
    }
    else if(edge_count<2)
    {
        printf("YES\n");
        return;
    }
    c_count = 0;
    for(int i=1; i<=n; i++) if(connected[i]) c_count++;
    //cout << "C_count is " << c_count << endl;
    if(c_count>3) printf("NO\n");
    else printf("YES\n");
    return;
}

void take_input()
{
    int T,v1,v2;
    scanf("%d", &T);
    while(T--)
    {
        scanf("%d%d", &n, &m);
        //Resetting of variables here:
        for(int i=1; i<=n; i++)
        {
            connected[i] = false;
        }
        edge_count=0;
        //New test case scanning here:
        while(m--)
        {
            scanf("%d%d", &v1,&v2);
            adjl[v1].push_back(v2);
            adjl[v2].push_back(v1);
            connected[v1] = true; connected[v2] = true;
            edge_count++;
        }
        solve();
    }
}

int main()
{
    take_input();
    return 0;
}
