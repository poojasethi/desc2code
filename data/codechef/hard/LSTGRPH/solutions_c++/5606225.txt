#include<cstdio>
#include<iostream>
#include<vector>
#include<string>
#include<cstring>
#include<queue>

using namespace std;


int dfs(int visit[],vector< int >  graph[],vector< int > value[],int node,int val[])
{
	visit[node]=1;
	queue < int > line;
	line.push(node);
	while(!line.empty())
	{
		int node=line.front();
		line.pop();
		for(int i=0;i<graph[node].size();i++)
		{
			int va=val[node]^value[node][i];
			if(!visit[graph[node][i]])
			{
				visit[graph[node][i]]=1;
				val[graph[node][i]]=va;
				line.push(graph[node][i]);
			}
			else if(va!=val[graph[node][i]])
				return 0;
		}
	}
	return 1;
}

int main()
{
	int n,m,k;
	cin>>n>>m>>k;
	int i;
	vector < int > * graph;
	graph = new vector < int > [n+1];
	vector < int > * value;
	value = new vector < int > [n+1];
	int u,v,w;
	for(i=0;i<m;i++)
	{
		cin>>u>>v>>w;
		graph[u].push_back(v);
		graph[v].push_back(u);
		value[u].push_back(w);
		value[v].push_back(w);
	}
	int comp;
	int visit[n+1];
	memset(visit,0,sizeof(visit));
	int val[n+1];
	memset(val,-1,sizeof(val));
	for(i=1;i<=n;i++)
	{
		if(!visit[i])
		{
			val[i]=0;
			comp=i;
			if(!dfs(visit,graph,value,i,val)) break;
		}
	}
	if(i!=n+1) { cout<<"-1\n"; return 0; }
	memset(visit,0,sizeof(visit));
	val[comp]=val[comp]^(k-1);
	dfs(visit,graph,value,comp,val);
	for(i=1;i<=n;i++)
		cout<<val[i]<<" ";
	cout<<endl;
	return 0;
}
