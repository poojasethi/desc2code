#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include<queue>

#define pb push_back
#define f  first
#define s second
#define MAX 300000

using namespace std;


typedef long long ll;
typedef pair<ll,ll> pr;

vector<pr> edge[MAX];
ll mark[MAX],arr[MAX];
queue<ll> q;
ll ans = 0;
void bfs(ll idx,ll k)
{
	ll i,a,sz;

	
	arr[idx] = k-1;
	q.push(idx);
	mark[idx] = 1;
	while(!q.empty())
	{
		a = q.front();
		sz = edge[a].size();
		for(i = 0;i < sz;i++)
		{
			if(!mark[edge[a][i].f])
			{
				mark[edge[a][i].f] = 1;
				arr[edge[a][i].f] = (edge[a][i].s)^(arr[a]);
				q.push(edge[a][i].f);   
			}
			else
			{
				if( arr[edge[a][i].f] != ((edge[a][i].s)^(arr[a])) )
				{	
					ans = -1;
					printf("-1\n");
					return;
				}
			
			}
		}
		q.pop();	
	}
	
}


int main()
{
	ll n,m,k,i,x,y,v,z;
	
	scanf("%lld %lld %lld",&n,&m,&k);
	
	for(i = 0;i < m;i++)
	{
		scanf("%lld %lld %lld",&x,&y,&v);
		edge[x].pb(pr(y,v));
		edge[y].pb(pr(x,v));
	}
	

	for(i = 1;i <= n;i++)
	{
		if(!mark[i])
		{
			bfs(i,k);
			if(ans == -1)
				return 0;
			z = i;
		}
		
	}
	memset(mark,0,sizeof(mark));
	if(z != 1)
	{
		for(i = 1;i <= (z-1);i++)
		{
			if(!mark[i])
				bfs(i,1);
		}
	}
	
	for(i = 1;i <= n;i++)
	{
		printf("%lld ",arr[i]); 	
	}
	printf("\n");

	return 0;
}
	
	
		
