#include<bits/stdc++.h>
#define F first
#define S second
using namespace std;
int n,m,k;
vector<pair<unsigned int,unsigned int> >g[500001];
unsigned int ans[500001]={0};
bool flag=true;
bool visited[500001]={0},visited2[500001]={0};
void bfs(int vertex){
    visited[vertex]=true;
    int siz=g[vertex].size();
    for(int i=0;i<siz;i++){
        if(visited[g[vertex][i].F]==true){
            if((ans[vertex]^ans[g[vertex][i].F])!=g[vertex][i].S){
                //cout<<vertex<<" "<<ans[vertex]<<" "<<ans[g[vertex][i].F]<<" "<<g[vertex][i].S<<endl;
                flag=false;
                return;
            }
        }
        else{
            ans[g[vertex][i].F]=ans[vertex]^g[vertex][i].S;
            bfs(g[vertex][i].F);
        }
    }
}
void bfs2(int vertex){
    visited2[vertex]=true;
    ans[vertex]=(ans[vertex]^(k-1));
    int siz=g[vertex].size();
    for(int i=0,v;i<siz;i++){
        v=g[vertex][i].F;
        if(visited2[v]==false){
            bfs2(v);
        }
    }
    return;
}
int main(){
    ios::sync_with_stdio(false);
    cin>>n>>m>>k;
    int u,v,w;
    for(int i=0;i<m;i++){
        cin>>u>>v>>w;
        g[u].push_back(make_pair(v,w));
        g[v].push_back(make_pair(u,w));
    }
    int last=n+1;
    for(int i=1;i<=n;i++){
        if(visited[i]==false){
            ans[i]=0;
            last=i;
            bfs(i);
        }
        if(flag==false)
            break;
    }
    if(flag){
        bfs2(last);
        for(int i=1;i<=n;i++){
            cout<<ans[i]<<" ";
        }
        cout<<"\n";
    }
    else{
            cout<<"-1\n";

    }
}
