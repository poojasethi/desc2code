#include <cstdio>
#include <queue>
 
#define maxN 200000
#define maxM 300000
 
using namespace std;
 
int n,m,k;
 
int elso[maxN];
int kov[maxM*2];
int hova[maxM*2];
int y[maxM];
 
bool eler[maxN];
bool eler2[maxN];
 
int x[maxN];
 
/*
void bejar(int kezd) {
    if(kezd > n) throw 101;
    eler[kezd] = 1;
    for(int i=elso[kezd]; i>=0; i=kov[i]) {
        if(!eler[hova[i]]) bejar(hova[i]);
    }
}
 
bool beir(int kezd, int sz) {
    if(kezd > n) throw 101;
    x[kezd] = sz;
    eler2[kezd] = 1;
    for(int i=elso[kezd]; i>=0; i=kov[i]) {
        if(eler2[hova[i]]) {
            if((x[kezd] ^ x[hova[i]]) != y[i%maxM]) return 0;
        } else {
            if(!beir(hova[i],(x[kezd] ^ y[i%maxM]))) return 0;
        }
    }
    return 1;
}*/
 
queue<int> jarsor;
queue<pair<int,int> > irsor;
 
int main()
{
    scanf("%d%d%d",&n,&m,&k);
 
    for(int i=0; i<n; i++) {
        elso[i] = -1;
    }
 
    for(int i=0; i<m; i++) {
        scanf("%d%d%d",&hova[i],&hova[i+maxM],&y[i]);
        hova[i]--; hova[i+maxM]--;
        kov[i] = elso[hova[i+maxM]];
        elso[hova[i+maxM]] = i;
        kov[i+maxM] = elso[hova[i]];
        elso[hova[i]] = i+maxM;
    }
 
    int resz = 0;
    for(int i=0; i<n; i++) {
        if(!eler[i]) {
            resz++;
            jarsor.push(i);
            while(!jarsor.empty()) {
                int kezd = jarsor.front();
                jarsor.pop();
                eler[kezd] = 1;
                for(int i=elso[kezd]; i>=0; i=kov[i]) {
                    if(!eler[hova[i]]) jarsor.push(hova[i]);
                }
 
            }
            //bejar(i);
        }
    }
 
 
    for(int i=0; i<n; i++) {
        if(!eler2[i]) {
            if(--resz) {
                irsor.push(make_pair(i,0));
                while(!irsor.empty()) {
                    int kezd = irsor.front().first;
                    int sz = irsor.front().second;
                    irsor.pop();
                    x[kezd] = sz;
                    eler2[kezd] = 1;
                    for(int i=elso[kezd]; i>=0; i=kov[i]) {
                        if(eler2[hova[i]]) {
                            if((x[kezd] ^ x[hova[i]]) != y[i%maxM]) {
                                printf("-1\n");
                                return 0;
                            }
                        } else {
                            irsor.push(make_pair(hova[i],(x[kezd] ^ y[i%maxM])));
                        }
                    }
                }
                /*if(!beir(i,0)) {
                    printf("-1\n");
                    return 0;
                }*/
            } else {
                irsor.push(make_pair(i,k-1));
                /*if(!beir(i,k-1)) {
                    printf("-1\n");
                    return 0;
                }*/
            }
            while(!irsor.empty()) {
                int kezd = irsor.front().first;
                int sz = irsor.front().second;
                irsor.pop();
                x[kezd] = sz;
                eler2[kezd] = 1;
                for(int i=elso[kezd]; i>=0; i=kov[i]) {
                    if(eler2[hova[i]]) {
                        if((x[kezd] ^ x[hova[i]]) != y[i%maxM]) {
                            printf("-1\n");
                            return 0;
                        }
                    } else {
                        irsor.push(make_pair(hova[i],(x[kezd] ^ y[i%maxM])));
                    }
                }
            }
        }
    }
 
    for(int i=0; i<n; i++) {
        printf("%d ",x[i]);
    }
    printf("\n");
 
    return 0;
}