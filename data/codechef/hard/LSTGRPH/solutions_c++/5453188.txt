/*
 lostgraph.cpp
 Author: shashwat001
 Created on: 2014-11-23 23:13
 */

#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <utility>
#include <cassert>

using namespace std;

typedef long long int lli;
typedef pair<int,int> pii;
typedef vector<int> vi;

#define mod7 1000000007
#define mod9 1000000009
#define pb push_back
#define mp make_pair

void dfs(int idx,int n,vector<pii> g[],int label[],int labelval)
{
	label[idx]	= labelval;
	vector<pii>::iterator it;
	for(it = g[idx].begin();it!=g[idx].end();it++)
	{
		if(label[it->first]==0)
		{
			dfs(it->first,n,g,label,labelval);
		}
	}
}

void assign(int idx,vector<pii> g[],bool visited[],int value[])
{
	visited[idx] = true;
	vector<pii>::iterator it;
	for(it = g[idx].begin();it!=g[idx].end();it++)
	{
		if(!visited[it->first])
		{
			value[it->first] = (value[idx]^it->second);
			assign(it->first,g,visited,value);
		}
	}

}

int main()
{
	int t=1;
	int i;
	while(t--)
	{
		int n,m,k,u,v,y;
		cin>>n>>m>>k;
		vector<pii> g[n];
		int label[n];
		fill(label,label+n,0);
		for(i = 0;i < m;i++)
		{
			cin>>u>>v>>y;
			u--,v--;
			g[u].pb(mp(v,y));
			g[v].pb(mp(u,y));
		}
		int labelval = 0;
		for(i = 0;i < n;i++)
		{
			if(label[i]==0)
			{
				labelval++;
				stack<int> st;
				st.push(i);
				while(!st.empty())
				{
					int idx = st.top();
					st.pop();
					label[idx]	= labelval;
					vector<pii>::iterator it;
					for(it = g[idx].begin();it!=g[idx].end();it++)
					{
						if(label[it->first]==0)
						{
							//dfs(it->first,n,g,label,labelval);
							st.push(it->first);
						}
					}

				}
				//dfs(i,n,g,label,labelval);
			}
		}
		//cout<<labelval<<endl;
		int labelmin[labelval];
		fill(labelmin,labelmin+labelval,10000000);
		for(i = 0;i < n;i++)
		{
			if(i < labelmin[label[i]-1])
			{
				labelmin[label[i]-1] = i;
			}
		}
		sort(labelmin,labelmin+labelval);
		bool visited[n];
		fill(visited,visited+n,false);
		int value[n];
		for(i = 0;i < labelval;i++)
		{
			if(i!= labelval-1)
			{
				value[labelmin[i]] = 0;
			}
			else
			{
				value[labelmin[i]] = k-1;
			}
			/*assign(labelmin[i],g,visited,value);*/
			stack<int> st;
			st.push(labelmin[i]);
			while(!st.empty())
			{
				int idx = st.top();
				st.pop();
	
				visited[idx] = true;
				vector<pii>::iterator it;
				for(it = g[idx].begin();it!=g[idx].end();it++)
				{
					if(!visited[it->first])
					{
						value[it->first] = (value[idx]^it->second);
						//assign(it->first,g,visited,value);
						st.push(it->first);
					}
				}


			}

		}
		bool flag = true;
		for(i = 0;i < n;i++)
		{
			vector<pii>::iterator it;
			for(it = g[i].begin();it!=g[i].end();it++)
			{
				
				if((value[i]^value[it->first])!=it->second)
					flag = false;
			}
		}
		if(flag==false)
			cout<<-1;
		else
		{
			for(i = 0;i < n;i++)
				cout<<value[i]<<" ";
		}
		cout<<endl;

	}
	return 0;
}


