#include <bits/stdc++.h>

using namespace std;

int inline scan()
{
    int N = 0;
    char C;
    C=getchar();
    while (C < '0' || C>'9') C=getchar();
    while (C >= '0' && C <= '9')
    {
        N = (N<<3) + (N<<1) + C - '0';
        C=getchar();
    }

    return N;
}

vector<pair<int,int> > graph[200001];
bool visited[200001];
int label[200001];
int main()
{
    int n,m,k,u,v,y;
    n=scan();
    m=scan();
    k=scan();
    for(int i=0;i<m;++i)
    {
        u=scan();v=scan();y=scan();
        graph[u].push_back(make_pair(v,y));
        graph[v].push_back(make_pair(u,y));
    }

    int prev=-1;

    for(int i=1;i<=n;++i)
    {
        if(visited[i]==0)
        {
            prev=i;
            queue<int> q;
            q.push(i);
            visited[i]=1;
            label[i]=0;
            while(!q.empty())
            {
                int p=q.front();
                q.pop();

                for(int j=0;j<graph[p].size();++j)
                {
                    v=graph[p][j].first;
                    y=graph[p][j].second;
                    if(visited[v]==0)
                    {
                        visited[v]=1;
                        q.push(v);
                        label[v]=label[p]^y;
                    }
                    else
                    {
                        if(label[v]!=(label[p]^y))
                        {
                            cout<<-1<<endl;
                            return 0;
                        }
                    }
                }
            }
        }
    }
    memset(visited,0,sizeof(visited));

    queue<int> q;
    q.push(prev);
    visited[prev]=1;
    label[prev]=k-1;
    while(!q.empty())
    {
        int p=q.front();
        q.pop();
        for(int j=0;j<graph[p].size();++j)
                {
                    v=graph[p][j].first;
                    y=graph[p][j].second;
                    if(visited[v]==0)
                    {
                        visited[v]=1;
                        q.push(v);
                        label[v]=label[p]^y;
                    }
                    else
                    {
                        if(label[v]!=(label[p]^y))
                        {
                            cout<<-1<<endl;
                            return 0;
                        }
                    }
                }
    }

    for(int i=1;i<=n;++i)
    {
        printf("%d ",label[i]);
    }
    printf("\n");
    return 0;
}
