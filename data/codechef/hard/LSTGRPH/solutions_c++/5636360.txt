#include<bits/stdc++.h>
using namespace std;
int inline scan()
{
    int N = 0;
    char C;
    C=getchar();
    while (C < '0' || C>'9') C=getchar();
    while (C >= '0' && C <= '9')
    {
        N = (N<<3) + (N<<1) + C - '0';
        C=getchar();
    }
 
    return N;
}
vector<pair<int,int> > adj[200005];

int x[200005];
bool visited[200005];
int main(void)
{
    int i,n,m,k,u,v,j,s,max;
   
    n=scan(); m=scan(); k=scan();
    for(i=1;i<=m;++i)
    {
        u=scan(); v=scan(); j=scan();
        adj[u].push_back(make_pair(v,j)); 
        adj[v].push_back(make_pair(u,j));
        
    }
     //memset(visit,0,(n+5)*sizeof(int));
   
   memset(visited,0,sizeof(visited)); //cout<<visited[7]<<endl;
    for(j=1;j<=n;++j)
    {
        if(visited[j]==0)
    	{
    max=j;
    x[j]=0;
    s=j; 
    queue <int> q;
    q.push(s);
    visited[s]=1; 
    while(!q.empty())
    {
        u=q.front();
        q.pop();
        for(i=0;i<adj[u].size();++i)
        {
            v=x[u]^adj[u][i].second;
            if(visited[adj[u][i].first]==0)
            {
                
                visited[adj[u][i].first]=1; //cout<<u<<endl;
                q.push(adj[u][i].first); 
                x[adj[u][i].first]=v;
            }
            else
                {
                	if(v!=x[adj[u][i].first])
                	{puts("-1"); return 0;}
                }
        }
    }
    	}
    }
   memset(visited,0,sizeof(visited));
    x[max]=k-1;
    s=max; 
    queue <int> q;
    q.push(s);
    visited[s]=1; 
    while(!q.empty())
    {
        u=q.front();
        q.pop();
        for(i=0;i<adj[u].size();++i)
        {
            v=x[u]^adj[u][i].second;
            if(visited[adj[u][i].first]==0)
            {
                
                visited[adj[u][i].first]=1; //cout<<u<<endl;
                q.push(adj[u][i].first); 
                x[adj[u][i].first]=v;
            }
            else
                {
                	if(v!=x[adj[u][i].first])
                	{puts("-1"); return 0;}
                }
        }
    }
    for(i=1;i<=n;++i)
    {
        printf("%d ",x[i]);
    }
    printf("\n");
    return 0;
}   