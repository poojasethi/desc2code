import sys
x = lambda : [int(n) for n in sys.stdin.readline().rstrip().split()]
def bfs(i, mode):
    stack = [i+1]
    while len(stack)!=0:
        current = stack.pop()
        if graph.has_key(current):
            for node in graph[current]:
                val = graph[current][node]^answer[current-1]
                if visit[node-1] == mode:
                    visit[node-1] = not visit[node-1]
                    answer[node-1] = val
                    stack.append(node)
                elif val != answer[node-1]:
                    return 0
    return 1
(n,m,k) = x()
k-=1
answer = [0]*n
visit = [False]*n
graph = {}
while m:
    (a,b,w) = x()
    if not graph.has_key(a):
        graph[a] = {}
    if not graph.has_key(b):
        graph[b] = {}
    graph[a][b] = w
    graph[b][a] = w
    m-=1
exists = True
lastGraph = 0
for i in range(n):
    if not visit[i]:
        visit[i] = not visit[i]
        lastGraph = i
        if not bfs(i, False):
            exists = False
            break
if not exists:
    print -1
else:
    answer[lastGraph] ^= k
    bfs(lastGraph, True)
    print ' '.join(str(n) for n in answer)
