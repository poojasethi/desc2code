/*************************************************************
 ********                    Vikash Gupta             ********
 ********                     IIT2009088              ********
 ********                   IIIT Allahabad            ********
 ***************************************************************/


/************Header Files****************/
#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<cstdlib>
#include<climits>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<cstring>
#include<string>
#include<algorithm>

using namespace std;

/*************** Prototypes ****************/
#define MAX 1e9
#define MIN 1e-9
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define REP(i,n) FOR(i,0,n)
#define FORR(i,a,b) for(int i=b-1;i>=a;i--) 
#define REPR(i,n) FORR(i,0,n)
#define sz size()
#define all(c) c.begin(),c.end()
#define mp make_pair
#define fill(ar,val) memset(ar,val,sizeof ar)
#define FORE(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long ll;
typedef vector<int> VI;
typedef vector<string> VS;
typedef map<int,int> MII;
typedef map<int,string> MIS;
typedef map<string,int> MSI;
typedef pair<int,int> PII;
typedef pair<string,string> PSS;
typedef pair<int,string> PIS;
typedef pair<string,int> PSI;

/**************** execution function main is being begin *********************/

int rnk[64],par[64];

int find(int n)
{
	if(par[n] == n) return n;
	else return find(par[n]);
}

void join(int a,int b)
{
	a = find(a);
	b = find(b);

	if(rnk[a] > rnk[b]) par[b] = a;
	else {
		par[a] = b;
		if(par[a] == par[b]) rnk[b]++;
	}
}

int enc(char c)
{
	if(c>='A' && c<='Z') return c-'A';
	else return c-'a'+26;
}

int n,m;
string a[1024],b[1024];

int deg[64],ovc[64];

int main()
{
	int t;
	scanf("%d",&t);

	while( t-- ) {
		scanf("%d",&n);
		REP(i,n) cin >> a[i];

		scanf("%d",&m);
		REP(i,m) cin >> b[i];

		fill(deg,0);
		REP(i,n) deg[enc(a[i][0])]++,deg[enc(a[i][1])]++;

		REP(i,52) {
			rnk[i] = 0;
			par[i] = i;
		}

		REP(i,m) join(enc(b[i][0]),enc(b[i][1]));

		fill(ovc,0);
		REP(i,52) if(deg[i]%2) ovc[find(i)]++;

		int f = 1;
		REP(i,52) 
			if(ovc[i]%2) {
				f = 0;
				break;
			}

		cout << (f ? "YES" : "NO") << endl;

	}
}
