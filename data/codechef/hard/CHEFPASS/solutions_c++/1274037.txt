#include <stdio.h>

#include <iostream>

#include <algorithm>

#include <vector>

#include <string>

#include <queue>

#include <map>

#include <set>

#include <cmath>

#include <sstream>

#include <cstring>

 

#define pb push_back

#define mp make_pair

#define PI 3.14159265358979

#define sqr(x) (x)*(x)

#define forn(i, n) for(int i = 0; i < n; ++i)

#define ALL(x) x.begin(), x.end()

#define sz(x) int((x).size())

#define X first

#define Y second

typedef long long ll;


typedef unsigned long long ull;

typedef long double ld;

using namespace std;

typedef pair<int,int> pii;

const int INF = 2147483647;

const ll LLINF = 9223372036854775807LL;

ull a[60][60] = {};

int sum[60] = {};

 

int deg[60] = {};

int conv(char c) {

	if (c>='a'&&c<='z') return c-'a';

	else return c-'A'+26;

}

inline int get(int i, int j) {

	return (a[i][j>>6]>>(j&63))&1;

}

inline void setval(int i, int j) {

	a[i][j>>6]|=1LL<<(j&63);

}

int main()

{

#ifndef ONLINE_JUDGE

	freopen("input.txt", "r", stdin);

	//freopen("output.txt", "w", stdout);

#endif

	int T; scanf("%d", &T); while (T--) {

		memset(deg,0,sizeof(deg));

		memset(a,0,sizeof(a));

		int n; scanf("%d", &n);

		for (int i = 0; i < n; ++i) {

			string cur; cin >> cur;

			int fr = conv(cur[0]);

			int to = conv(cur[1]);

			deg[fr]^=1;

			deg[to]^=1;

		}

		int m; scanf("%d", &m);

		set<pii> has;

		int KK = 0;

		for (int i = 0; i < m; ++i) {

			string cur; cin >> cur;

			int fr = conv(cur[0]);

			int to = conv(cur[1]);

			if (fr>to) swap(fr,to);

			if (fr!=to && has.count(mp(fr,to))==0) {

				setval(fr,KK);

				setval(to,KK);

				KK++;

				has.insert(mp(fr,to));

			}

		}

		int all = KK>>6;

		for (int i = 0; i < 52; ++i) if (deg[i]) setval(i,KK);

		int ci = 0;

		for (int j = 0; j < KK; ++j) {

			int t = ci;

			while (t<52 && get(t,j)==0) ++t;

			if (t < 52) {

				for (int k = 0; k <= all; ++k) swap(a[t][k],a[ci][k]);

				for (int k = ci+1; k < 52; ++k) {

					if (get(k,j))

						for (int p = 0; p <= all; ++p) a[k][p]^=a[ci][p];

				}

				ci++;

			}

		}

		bool bad = false;

		for (int i = ci; i < 52; ++i) if (get(i,KK)) bad = true;

		/*memset(sum,0,sizeof(sum));

		bool bad = false;

		for (int i = 0; i < 52; ++i) {

			for (int j = 0; j < KK; ++j) sum[i] += get(i,j);

			if (sum[i] == 0 && get(i,KK)) {

				bad = true;

				break;

			}

		}*/

		if (bad) printf("NO\n");

		else printf("YES\n");

	}

	return 0;

} 