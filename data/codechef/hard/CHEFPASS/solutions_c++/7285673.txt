#include<bits/stdc++.h>
using namespace std;
#define MAXN 1001
#define vi vector<int>
string A[MAXN],B[MAXN];
int deg[55],Aincc[55];	//Aincc[i]->no. of vertices of A in connected component i
class UF
{
	private:vi id,sz;
	public:
	UF(int n)
	{
		id=vi(n+1);
		sz=vi(n+1,1);
		for(int i=0;i<=n;i++)
		{
			id[i]=i;
		}
	}
	int root(int i)
	{
		while(i!=id[i])
		{
			id[i]=id[id[i]]; // make each node point to it's grandparent to flatten the tree
			i=id[i];
		}
		return i;
	}
	bool Connected(int p,int q)
	{
		return root(p)==root(q);
	}
	void Union(int p,int q)
	{
		int proot=root(p);
		int qroot=root(q);
		if(sz[proot]>sz[qroot]) { id[qroot]=id[proot]; sz[proot]+=sz[qroot]; }
		else { id[proot]=id[qroot]; sz[qroot]+=sz[proot]; }
	}
};
int encode(char c)
{
	if(c>='A' && c<='Z')	return c-'A';
	else	return c-'a'+26 ;
}
int main()
{
	ios_base::sync_with_stdio(0);
	int t,n,m;
	cin>>t;
	while(t--)
	{
		cin>>n;
		memset(deg,0,sizeof(deg));
		memset(Aincc,0,sizeof(Aincc));
		UF uf(52);
		for(int i=0;i<n;i++)
		{
			cin>>A[i];
			deg[encode(A[i][0])]++;
			deg[encode(A[i][1])]++;
		}
		cin>>m;
		for(int i=0;i<m;i++)
		{
			cin>>B[i];
			uf.Union(encode(B[i][0]),encode(B[i][1]));
		}
		for(int i=0;i<52;i++)	if(deg[i]%2) Aincc[uf.root(i)]++;
		
		int ans=1;
		for(int i =0;i<52;i++)
		if(Aincc[i]%2)	ans=0;
		
		cout<<(ans? "YES":"NO")<<"\n";
	}
}