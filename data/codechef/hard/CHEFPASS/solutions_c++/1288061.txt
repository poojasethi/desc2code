#include<cctype>
#include<cstdio>
#include<vector>

#define rep(i,n) for(int i=0;i<(n);i++)

using namespace std;

#define id(c) (isupper(c)?(c)-'A':(c)-'a'+26)

vector<int> G[52];
bool vis[52];

int dfs(int u){
	vis[u]=true;
	int res=1;
	rep(i,G[u].size()){
		int v=G[u][i];
		if(!vis[v]) res+=dfs(v);
	}
	return res;
}

int main(){
	int T; scanf("%d",&T);
	while(T--){
		int n; scanf("%d",&n);
		bool parity[52]={};
		rep(i,n){
			char s[3]; scanf("%s",s);
			parity[id(s[0])]^=true;
			parity[id(s[1])]^=true;
		}

		int m; scanf("%d",&m);
		bool A[52][52]={}; // 隣接行列
		rep(i,m){
			char s[3]; scanf("%s",s);
			int u=id(s[0]),v=id(s[1]);
			A[u][v]=A[v][u]=true;
		}
		// 推移閉包
		rep(u,52) rep(v,52) rep(w,52) A[u][v]|=A[u][w]&A[w][v];

		rep(u,52) G[u].clear();
		rep(u,52) if(parity[u]) rep(v,52) if(u!=v && parity[v] && A[u][v]) G[u].push_back(v);

		bool ok=true;
		rep(u,52) vis[u]=false;
		rep(u,52) if(parity[u] && !vis[u]) {
			int c=dfs(u);
			if(c%2==1){ ok=false; break; }
		}
		puts(ok?"YES":"NO");
	}

	return 0;
}
