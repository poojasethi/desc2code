#include <stdio.h>
 
using namespace std;
 
struct UnionFind{
	int p, r;
};
 
UnionFind sets[128];
 
int getParent(int a){
	if(sets[a].p == -1)
		return a;
	sets[a].p=getParent(sets[a].p);
	return sets[a].p;
}
 
bool sameSet(int a, int b){
	return (getParent(a) == getParent(b));
}
 
void join(int a, int b){
	int pa=getParent(a), pb=getParent(b);
	if(pa == pb)
		return;
	if(sets[pa].r < sets[pb].r)
		sets[pa].p=pb;
	else if(sets[pa].r > sets[pb].r)
		sets[pb].p=pa;
	else{
		sets[pb].p=pa;
		++sets[pa].r;
	}
}
 
bool x[100], y[100];

int main()
{
	int T;
	scanf("%d", &T);
	for(int i=0; i < T; ++i){
		for(int j=0; j < 128; ++j){
			x[j]=0;
			sets[j].p=-1;
			sets[j].r=0;
			y[j]=0;
		}
		int AN, BN;
		scanf("%d", &AN);
		for(int j=0; j < AN; ++j){
			char input[3];
			scanf("%s", input);
			x[input[0]]^=1;
			x[input[1]]^=1;
		}
		scanf("%d", &BN);
		for(int j=0; j < BN; ++j){
			char input[3];
			scanf("%s", input);
			join(input[0], input[1]);
		}
		for(int j=0; j < 128; ++j)
			if(x[j])
				y[getParent(j)]^=1;
		bool ok=1;
		for(int j=0; j < 128; ++j){
			if(y[j]){
				ok=0;
				break;
			}
		}
		if(ok)
			printf("YES\n");
		else
			printf("NO\n");
	}
	return 0;
}
