#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_v) (int)(_v).size()
#define all(_v) (_v).begin(),(_v).end()
#define Geti(_v) (scanf("%d",&(_v)));
#define pii pair<int,int>
typedef long long ll;
const int INF = 100000000;
const ll mod = 1e9 + 7;

const int maxn = 100010;
vector < int > v[maxn];
int arr[maxn],freq[maxn];
ll cnt[maxn];

void calc() {
	for (int i = 1; i <= maxn - 10; i ++) {
		for (int j = i; j <= maxn - 10; j += i)
			v[j].pb(i);
	}
}

ll fast_expo(ll a,ll b,ll mmod) {
	// a ^ b % mod;
	if(b == 0) return 1ll;
	ll p;
	if(b % 2 == 0) {
		p = fast_expo(a,b / 2,mmod);
		p = (p * p) % mmod;
	}
	else p = (a * fast_expo(a,b - 1,mmod)) % mmod;

	return p;
}

ll solve() {
	ll ans = 1LL;
	for (int i = maxn - 10; i >= 1; i --) {
		ll remove = 0;
		int j = i + i;
		while (j <= maxn - 10) {
			remove += cnt[j];
			remove = (remove) % (mod - 1);
			j += i;
		}
		ll total = fast_expo(2ll,freq[i],mod - 1) - 1;
		cnt[i] = total - remove;
		if(cnt[i] < 0) cnt[i] += mod - 1;

		ans = (ans * fast_expo(1ll * i,cnt[i],mod) + mod) % mod;
	}
	return ans;
}

int main() {
	calc();
	int t; scanf("%d",&t);

	while (t --) {
		int n; Geti(n);
	    for (int i = 0; i < n; i ++) Geti(arr[i]);
		sort(arr,arr + n);

		memset(freq,0,sizeof freq);
		memset(cnt,0,sizeof cnt);
		
		for (int i = 0; i < n; i ++) {
			int num = arr[i];
			//freq[num] ++;
			for (int j = 0; j < sz(v[num]); j ++) {
				freq[v[num][j]] ++;
			}
		}

		ll ans = solve();

		printf("%lld\n",ans);
	}
	
	return 0;
}
