#include<iostream>
using namespace std ;
#define MAXN 1002
int dx[] = {-1,-1,-1,0,0,1,1,1} ;
int dy[] = {-1,0,1,-1,1,-1,0,1} ;
 
int n,x,y,monsters[MAXN*MAXN][2] ;
int start[2],finish[2] ;
int nearest_monster[MAXN][MAXN],distances[MAXN][MAXN] ;
 
int q[2100002] ;
void bfs1()
{
 int i,j,k,p = 0 ;
 
 for(i=0;i<x;i++)
  for(j=0;j<y;j++)
   nearest_monster[i][j] = -1 ;
 for(i=0;i<n;i++)
 {
  nearest_monster[monsters[i][0]][monsters[i][1]] = 0 ;
  q[p++] = monsters[i][0] ;
  q[p++] = monsters[i][1] ;
 }
 for(k=0;k<p;k+=2)
 {
  int cur_x = q[k],cur_y = q[k+1] ;
  for(i=0;i<8;i++)
  {
   int nx = cur_x + dx[i],ny = cur_y + dy[i] ;
   if(nx < 0 || ny < 0 || nx >= x || ny >= y || nearest_monster[nx][ny] != -1) continue ;
   nearest_monster[nx][ny] = nearest_monster[cur_x][cur_y] + 1 ;
   q[p++] = nx ; q[p++] = ny ;
  }
 }
}
 
int bfs2(int upper)
{
 int i,j,k,p = 0 ;
 
 for(i=0;i<x;i++)
  for(j=0;j<y;j++)
   distances[i][j] = -1 ;
 
 if(nearest_monster[start[0]][start[1]] < upper) return -1 ;
 distances[start[0]][start[1]] = 0 ;
 q[p++] = start[0] ; q[p++] = start[1] ;
 for(k=0;k<p;k+=2)
 {
  int cur_x = q[k] ;
  int cur_y = q[k+1] ;
  
  if(cur_x == finish[0] && cur_y == finish[1]) return distances[cur_x][cur_y] ;
  
  for(i=0;i<8;i++)
  {
   int nx = cur_x + dx[i],ny = cur_y + dy[i] ;
   if(nx < 0 || ny < 0 || nx >= x || ny >= y || nearest_monster[nx][ny] < upper) continue ;
   if(distances[nx][ny] != -1) continue ;
   distances[nx][ny] = distances[cur_x][cur_y] + 1 ;
   q[p++] = nx ; q[p++] = ny ;
  }
 }
 return -1 ;
}
 
 
char buff[MAXN] ;
main()
{
 int i,j,k ;
 
 scanf("%d%d",&x,&y) ;
 for(i=0;i<x;i++)
 {
  scanf("%s",buff) ;
  for(j=0;j<y;j++)
   if(buff[j] == '@')
    start[0] = i,start[1] = j ;
   else if(buff[j] == '$')
    finish[0] = i,finish[1] = j ;
   else if(buff[j] == 'D')
   {
    monsters[n][0] = i ;
    monsters[n++][1] = j ;
   }
 }
 bfs1() ;
 int low = -1,high = 10000 ;
 while(low + 1 < high)
 {
  int mid = low + (high - low)/2 ;
  if(bfs2(mid) != -1) low = mid ;
  else high = mid ;
 }
 printf("%d\n",low) ;
}