/**
* He who forgives and acknowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (multiset<uint>::iterator i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

const int MAX = 1005;
const int MOD = 1000000007;
const int INF = 1000000000;

struct Point{
    int x, y, d;
    Point(){
    }

    Point(int x, int y, int d) {
        this->x = x;
        this->y = y;
        this->d = 0;
    }

    friend std::ostream& operator <<(ostream &o, Point &p) {
        o << "{" << p.x << ", " << p.y << ", " << p.d << "}";
    }
};

int n, m;
char s[MAX][MAX];
int dp[MAX][MAX];

bool isVisited[MAX][MAX];
int dist[MAX][MAX];

bool isRechable(Point source, Point dest, int minDist) {
    memset(isVisited, 0, sizeof(isVisited));
    int ds[8][2] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
    queue<Point> Q;
    Q.push(source);
    while (!Q.empty()) {
        Point p = Q.front();
        Q.pop();
        if (p.x == dest.x and p.y == dest.y) return true;
        if (isVisited[p.x][p.y]) continue;
        else {
            isVisited[p.x][p.y] = true;
            for (int i = 0; i < 8; i++) {
                Point q;
                q.x = p.x + ds[i][0];
                q.y = p.y + ds[i][1];
                if (q.x >= 0 and q.x <= n-1) {
                    if (q.y >= 0 and q.y <= m-1) {
                        if (!isVisited[q.x][q.y]) {
                            if (dist[q.x][q.y] >= minDist) {
                                Q.push(q);
                            }
                        }
                    }
                }
            }
        }
    }
    return false;
}

int main() {
    queue<Point> Q;
    scanf("%d%d", &n, &m);
    Point dest, source;
    for (int i = 0; i < n; i++) {
        scanf("%s", s[i]);
        for (int j = 0; j < m; j++) {
            if (s[i][j] == 'D') {
                Q.push(Point(i, j, 0));
            } else if (s[i][j] == '$') {
                dest = Point(i, j, 0);
            } else if (s[i][j] == '@'){
                source = Point(i, j, 0);
            }
        }
    }
    int ds[8][2] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
    while (!Q.empty()) {
        Point p = Q.front();
        Q.pop();
        if (isVisited[p.x][p.y]) continue;
        else {
            isVisited[p.x][p.y] = true;
            dist[p.x][p.y] = p.d;
            for (int i = 0; i < 8; i++) {
                Point q;
                q.x = p.x + ds[i][0];
                q.y = p.y + ds[i][1];
                q.d = p.d + 1;
                if (q.x >= 0 and q.x <= n-1) {
                    if (q.y >= 0 and q.y <= m-1) {
                        if (!isVisited[q.x][q.y]) {
                            Q.push(q);
                        }
                    }
                }
            }
        }
    }

    int low = 0, high = INF, answer = INF;
    while (low <= high) {
        int mid = (low+high)/2;
        if (isRechable(source, dest, mid)) {
            low = mid+1;
            answer = mid;
        } else {
            high = mid-1;
        }
    }
    printf("%d\n", answer);
}
