#include <cstdio>
#include <list>
#include <queue>
#include <memory.h>
#include <algorithm>
using namespace std;

#define MX 1002

class Position
{
public:
	int x;
	int y;
	int val;

	Position(int x, int y, int val)
	{
		this->x = x;
		this->y = y;
		this->val = val;
	}

	bool operator < (const Position &rhs) const
	{
		if(this->val < rhs.val)
			return true;
		return false;
	}
};

int m,n,sx,sy,ex,ey;
list<Position> q;
int dx[]={-1,0,1};
bool v[MX][MX];
int D[MX][MX];

void input()
{
	memset(v, 0, sizeof(v));
	scanf("%d %d", &m, &n);
	char in[MX];
	for(int i=0;i<m; i++)
	{
		scanf("%s", in);
		for(int j=0; j<n; j++)
		{
			if(in[j]=='@')
				sx=i, sy=j;
			else if(in[j]=='$')
				ex=i, ey=j;
			else if(in[j]=='D')
			{
				q.push_back(Position(i,j,0));
				D[i][j]=0;
				v[i][j]=true;
			}
		}
	}
}

bool check(int x, int y)
{
	if(x>=0 && y>=0 && x<m && y<n && !v[x][y])
		return true;
	return false;
}

void markDistance()
{
	while(!q.empty())
	{
		Position &p = q.front();
		for(int i=0;i<3; i++)
		{
			for(int j=0; j<3; j++)
			{
				if(check(p.x+dx[i], p.y+dx[j])) 
				{
					q.push_back(Position(p.x+dx[i], p.y+dx[j], p.val+1));
					D[p.x+dx[i]][p.y+dx[j]] = p.val+1;
					v[p.x+dx[i]][p.y+dx[j]] = true;
				}
			}
		}
		q.pop_front();
	}
}

int calc()
{
	int ret = 10000;
	priority_queue<Position> pq;
	pq.push(Position(sx, sy, ret));
	memset(v, 0, sizeof(v));
	v[sx][sy]=true;
	while(!pq.empty())
	{
		Position p=pq.top();
		pq.pop();
		ret = min(ret, p.val);
		if(p.x==ex && p.y==ey)
			break;

		for(int i=0; i<3; i++)
		{
			for(int j=0; j<3; j++)
			{
				if(check(p.x+dx[i], p.y+dx[j]))
				{
					pq.push(Position(p.x+dx[i], p.y+dx[j], D[p.x+dx[i]][p.y+dx[j]]));
					v[p.x+dx[i]][p.y+dx[j]] = true;
				}
			}
		}
	}
	return ret;
}

int main()
{
	input();
	markDistance();	
	printf("%d\n",calc());	
	return 0;
}