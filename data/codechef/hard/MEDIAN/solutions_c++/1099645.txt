#include <iostream>
#include <cstdio>
#include <vector>
#include <stack>
#include <queue>
#include <string>
#include <cstring>
#include <map>
#include <cstdlib>
#include <algorithm>
#include <list>
#include <deque>
#include <bitset>
#include <cmath>
#include <functional>
#include <set>
 
using namespace std;
 
#define uint unsigned int
#define MAX(a,b)   (((a)>(b))?(a):(b))
#define MIN(a,b)   (((a)<(b))?(a):(b))
#define CMAX(a,b)  if((a)<(b)) a=b
#define CMIN(a,b)  if((a)>(b)) a=b
#define FOR(i,a,b)   for(i=a; i<b; i++)
#define REVI(i,a,b)  for(int i= a ; i >= b ; --i)
#define LET(x,a)     __typeof(a) x(a)
#define IFOR(i,a,b)  for(LET(i,a);i!=(b);++i)
#define EACH(it,v)   IFOR(it,v.begin(),v.end())
#define SWAP(a,b,t)  t=a,a=b,b=t
#define REP(i,n)     for(int i=0; i<n; i++)
#define ll           long long int
#define ull          unsigned long long int
#define gint(t)      scanf("%d", &t);
#define gint2(a,b)   scanf("%d%d", &a, &b);
#define gint3(a,b,c) scanf("%d%d%d", &a, &b, &c);
#define pint(t)      printf("%d\n", t);
#define pint2(a,b)   printf("%d %d\n", a, b);
#define pint3(a,b,c) printf("%d %d %d\n", a, b, c);
#define PAIR          pair<int, int>
#define pb           push_back

 
int T,arr[33],N;
map<int,int> m;
int sol(int mask)
{
    
 int i,j,k;
 int ans = (1<<22),to;
 int c1=0,c0=0,m2=0;
 for(i=0;i<N;i++)
                 if(mask & (1 << i))c1++;
                 else c0++;
 
 if (c0 == 0)return 0;
 if (c1 >= c0)return 1;
 
 
 if(m.find(mask)!=m.end())return m[mask];
 for(i=0;i<N;i++)
 {
   c1 = c0 = m2 = 0,to=-1;
   for(j=i;j<N;j++)
   { 
      if(mask&(1<<j))c1++;
      else c0++; 
      m2|=(1<<j);
      if(c1>=c0&&(mask|m2)!=mask)to=m2;
   }
   if(to!=-1)
   ans = min(ans,sol(mask|to));
 }
 return m[mask]=ans+1;  
} 
 

int main()
{
 cin>>T;
 while(T--)
 {
  m.clear();
  cin>>N;
  int i;
  for(i=0;i<N;i++)cin>>arr[i];
  int mask = 0,maxm=-(1<<30);
  for(i=0;i<N;i++)maxm = max(maxm,arr[i]);
  for(i=0;i<N;i++)if(arr[i]==maxm)mask|=(1<<i);
  cout<<sol(mask)<<endl;          
           
 }   
    
    
}
