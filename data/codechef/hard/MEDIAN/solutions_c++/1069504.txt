	#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <cstring>
#include <memory.h>
#include <cassert>

using namespace std;

#define ford(i, a, b, c) for(int i=(a); i<(b); i+=(c))
#define fori(i, a, b) ford(i,a,b,1)
#define rep(i, n) fori(i,0,n)
#define ifor(i, a, b) for(int i=(a); i>=(b); i--)
#define iter(i, a) for(typeof((a).begin()) i=(a).begin(); i!=(a).end(); i++)
#define si(x) ((int)x.size())
//	#define SS ({int x;scanf("%d",&x);x;})
#define pb push_back
#define mp make_pair
#define all(a) a.begin(),a.end()
#define fill(a, v) memset(a, v, sizeof(a))
#define inf (int)1e9
#define linf (long long)1e18
#define V vector
#define S string
#define SI(x) scanf("%d",&x)
#define ODD(n) if(n%2 == 1 )
	

typedef V<int> vi;
typedef V<S> vs;
typedef long long ll;
typedef pair<int,int> pii;

	//Main program starts here
    
	
	map<int, int> state;
	//int mask;
	int n;
	
	
	int solve(int mask)
	{
	    //now mask has that bit set whose array value is max
		// n is the number of states

		//checking if value has already been calculated
		//if( state.find(mask) != state.end()) return state[mask];

		int c0=0, c1=0;
		rep(i,n) (mask & (1<<i))?c1++:c0++;
		
		if(c0 == 0) return 0;
		if(c1 >= c0) return 1;

		
		int sum[30];
		
		sum[0]= mask & (1);
		fori(i,1,n) sum[i]= sum[i-1] + ((mask & (1<<i)) != 0);
		//now sum contains the running sum of max values
		//print1( sum , n);
		int l=0;
		vector<int> indexes;
		rep(i,n)
		{
			fori(j,i+1,n)
			{
				 int c= sum[j] -  ((i==0)? 0:sum[i-1]);

				 if( c >= ((j-i+2)/2))
				 {
				      if((j-i+1) > l)
					  {
						  l= j-i+1;
						  indexes.clear();
						  indexes.pb(i);
					  
					  }
					  else if ( (j-i+1) == l)
						  indexes.pb(i);
				      
				 }

			
			}
		}

		int ans = 10000;
		// here l represents the optimal length value
		rep(i, (int)indexes.size())
		{

		    int temp = mask;
			//now mask the bits 
			for( int k= indexes[i]; k< indexes[i]+l;k++) temp |= (1<<k);
		    //print(temp,n);
		    ans = min( ans , solve(temp)+1);
		}

		state[mask]= ans;
		return ans;

	}//end of solve

	

	int main(){
	
	
    //freopen("input.txt","r", stdin);
   // freopen("output.txt","w",stdout);
	int t;
	
	SI(t);
	

	 while(t--)
	 {
		 int arr[30];
	     SI(n);
	     int maximum=0;
	     int mask=0;
		 rep(i,n)
		 {
			 SI(arr[i]);
			 maximum= max( arr[i], maximum);
		 }

		 rep(i,n)if(arr[i] == maximum ) mask |= (1<<i);
	   
		 printf("%d\n",solve(mask));
	 
	 }
	 
	 //system("pause");

	}//end of main

	/*1 <= T <= 100
1 <= n <= 30
1 <= A[i] <= 10^9
Example

Input:
2
3
1 2 3
4
2 1 1 2

Output:
2
1
	*/