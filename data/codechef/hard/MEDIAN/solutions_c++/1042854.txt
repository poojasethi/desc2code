#include <iostream>
#include<stdio.h>
#include<stdlib.h>
#include<map>

using namespace std;

int solve(long mask, long maxMask, int n);

map<int, int> R;

int main()
{
    int T;
    scanf("%d", &T);

    while(T--)
    {
        int n;
        scanf("%d", &n);
        long A[n];
        int i=0;
        long max=0;
        for(i=0;i<n;i++)
        {
            scanf("%ld", &A[i]);
            if(max<A[i])
            {
                max=A[i];
            }
        }
        long mask = 0;
        long maxMask = 0;
        for(i=0;i<n;i++)
        {
            if(A[i]==max)
            {
                mask = mask | (1<<i);
            }
            maxMask = maxMask | (1<<i);
        }
        R.clear();
        printf("%d\n", solve(mask, maxMask, n));
    }
    return 0;
}

int solve(long mask, long maxMask, int n)
{
    int c0 = 0, c1 = 0,i,j;
	for(i=0;i<n;i++)
		if (mask & (1 << i))
			c1++;
		else
			c0++;

	if (c0 == 0)
		return 0;
	if (c1 >= c0)
		return 1;

    if(R.find(mask)!=R.end())
    {
        return R[mask];
    }
    else
    {
        int res=1000;
        for (i=0;i<n;i++)
        {
            c0 = 0, c1 = 0;
            int go = mask;
            int to = -1;

            for(j=i;j<n;j++)
            {
                if ((mask & (1 << j)) != 0)
                    c1++;
                else
                {
                    go += (1 << j);
                    c0++;
                }

                if (c1 >= c0 && go != mask)
                    to = go;
            }
            if (to != -1)
            {
                int p = solve(to, maxMask, n);
                if(p<res)
                {
                    res=p;
                }
            }
        }

        R[mask]= res+1;
        return res+1;
    }

}
