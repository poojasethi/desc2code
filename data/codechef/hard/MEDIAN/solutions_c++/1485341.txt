#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <cstring>
#include <string>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <bitset>
#include <vector>
#include <stack>
#include <list>
#include <utility>
#include <queue>
#include <set>
#include <map>
using namespace std;
 
typedef long long ll;
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<PII> VP;
typedef vector<string> VS;
 
#define FOR(i,a,b) for(i=(a);i<(b);i++)
#define FORE(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();it++)
#define ALL(x) x.begin(),x.end()
#define CLR(x, v) memset((x),v,sizeof (x))
#define gcd(a, b) __gcd(a, b)
#define PB push_back
#define MP make_pair
#define INF 2000000007
 
int toInt(string s){ istringstream sin(s); int t; sin>>t; return t; }
template<class T> string toString(T x){ ostringstream sout; sout<<x; return sout.str(); }
template<class T> void chmin(T &t, T f) { if (t > f) t = f; }
template<class T> void chmax(T &t, T f) { if (t < f) t = f; }
 
int mask[31][31];
struct state
{
int cnt, d, arr;
state();
state(int a, int b, int c) : cnt(a), d(b), arr(c) {};
bool operator<(const state &s) const { return cnt>s.cnt; }
};
inline bool ok(int x, int n)
{
return __builtin_popcount(x) >= (n+1)/2;
}
inline int f(int x, int i, int j)
{
return __builtin_popcount(x&mask[i][j]);
}
int main()
{
int T;
int i, j;
scanf("%d", &T);
FOR(i,0,31) FOR(j,i+1,31) mask[i][j] = (1<<j)-(1<<i);
while(T--) {
int n, a[31];
scanf("%d", &n);
int mx = 0;
FOR(i,0,n) {
scanf("%d", a+i);
chmax(mx, a[i]);
}
int st = 0;
priority_queue<state> q;
FOR(i,0,n) if(a[i]==mx) st |= (1<<i);
if(__builtin_popcount(st) == n) {
printf("0\n");
continue;
}
if(ok(st,n)) {
printf("1\n");
continue;
}
int ans = 5;
q.push(state(__builtin_popcount(st), 0, st));
while(!q.empty()) {
state s = q.top();
q.pop();
int d = s.d, arr = s.arr;
if(d+2>=ans) continue;
int lo = 0;
FOR(i,0,n) {
for(j=n;j>lo;j--) if(f(arr,i,j)>=(j-i+1)/2) break;
if(j > lo) {
lo = j;
int ns = arr | mask[i][j];
if(ok(ns, n)) {
chmin(ans, d+2);
break;
}
if(d<2) q.push(state(__builtin_popcount(ns), d+1, ns));
}
}
}
printf("%d\n", ans);
}
return 0;
}
