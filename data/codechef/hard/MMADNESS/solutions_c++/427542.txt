#include <iostream>
#include <vector>
using namespace std;

const int Maxn = 26;

int t, n, best, contby[Maxn], lst[Maxn];
vector <int> cancont[Maxn], con;

void Search(int lvl, int cost)
{
     if (lvl == con.size()) {
             if (cost < best) best = cost;
             return;
     }
     int v = con[lvl];
     bool ntotake = true, totake = false;
     for (int i = 0; i < cancont[v].size(); i++)
        if (!contby[cancont[v][i]]) {
                                    ntotake = false;
                                    if (lst[cancont[v][i]] == v) totake = true;
        }
     if (!totake) Search(lvl + 1, cost);
     if (!ntotake) {
                   for (int i = 0; i < cancont[v].size(); i++)
                      contby[cancont[v][i]]++;
                   Search(lvl + 1, cost + 1);
                   for (int i = 0; i < cancont[v].size(); i++)
                      contby[cancont[v][i]]--;
     }
}

int main()
{
    cin >> t;
    
    while (t--) {
          
          for (int i = 0; i < Maxn; i++) {
              cancont[i].clear();
              lst[i] = i;
          }
          con.clear();
          best = Maxn;
          
          cin >> n;
          while (n--) {
                char a, b;
                int ca, cb;
                cin >> a >> b;
                ca = a - 'A'; cb = b - 'A';
                cancont[ca].push_back(cb); cancont[cb].push_back(ca);
                if (cb > lst[ca]) lst[ca] = cb;
                if (ca > lst[cb]) lst[cb] = ca;
          }
          
          for (int i = 0; i < Maxn; i++)
             if (cancont[i].size()) {
                                    con.push_back(i);
                                    cancont[i].push_back(i);
             }
             
          Search(0, 0);
          
          cout << 100 * best << endl;
          
    }
    
    return 0;
}
