def sieve(m, n, pool, d):
    pool.difference_update(range((m // d) * d, n+1, d))
 
def primegen(m, n):
    sqrt_n = n**0.5
    pool = set(range(m, n+1))
    pool.discard(1)
    sieve(m, n, pool, 2)
    if m <= 2 <= n: yield 2
    sieve(m, n, pool, 3)
    if m <= 3 <= n: yield 3
    for d in range(6, int(sqrt_n), 6):
        if (d-1) in pool: yield d-1
        sieve(m, n, pool, d-1)
        if (d+1) in pool: yield d+1
        sieve(m, n, pool, d+1)
    for p in sorted(pool):
        yield p
 
 
for _ in range(int(raw_input())):
    m, n = raw_input().split()
    m, n = int(m), int(n)
    for prime in primegen(m, n):
        print prime
    print