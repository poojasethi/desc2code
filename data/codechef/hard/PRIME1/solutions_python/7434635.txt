def sieve(m, n, solSet, d):
	solSet.difference_update(xrange((m/d) * d, n+1, d))
	
def getPrimes(m, n):
	solutionSet = set(xrange(m, n+1))
	sqrt = int(n ** 0.5)
	solutionSet.discard(1)
	sieve(m, n, solutionSet, 2)
	if m <= 2 <= n:	yield 2
	sieve(m, n, solutionSet, 3)
	if m <= 3 <= n: yield 3
	
	for i in xrange(6, sqrt, 6):
		if ((i - 1) in solutionSet): yield i-1
		sieve(m , n, solutionSet, i-1)
		if ((i + 1) in solutionSet): yield i+1
		sieve(m, n, solutionSet, i+1)
		
	for prime in sorted(solutionSet):
		yield prime
		
for t in xrange(int(raw_input())):
	m,n = map(int, raw_input().split())
	
	for p in getPrimes(m,n):
		print p
	print ""