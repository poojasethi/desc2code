#Segmented Sieve

import math
MAX=32000 #~sqrt(10**9)
sieve=[True]*MAX
sieve[0]=sieve[1]=False
for i in xrange(2,MAX):
	if sieve[i]==True:
		for j in xrange(i*i,MAX,i):
			sieve[j]=False
'''			
def Segmented_Sieve_Test(x):
	if x==1:
		return False
	if x==2 or x==3 or x==5:
		return True
	if x%2==0 or x%3==0 or x%5==0:
		return False
	for i in xrange(2,int(math.sqrt(x))+1):
		if sieve[i]:
			if x%i==0:
				return False
	return True	
def Prime_Generator(a,b):
	for i in xrange(a,b+1,2):
			if Segmented_Sieve_Test(i):
				print i
'''
def Sieve_Test(a,b):
	not_prime={}
	for i in xrange(1,int(math.sqrt(b))+1):
		if sieve[i]:
			x=a/i;
			x*=i
			if x<a:
				x+=i
			#print "x=",x	
			for j in xrange(x,b+1,i):
				not_prime[j]=1
	#print not_prime				
	for i in xrange(a,b+1):
		if not_prime.has_key(i) ==False:#if i not in not_prime{} dictionary
			print i				
t=input()
while t >0:
	t-=1
	a,b=map(int,raw_input().split())
	if a<MAX:
		for i in xrange(a,min(b+1,MAX)):
			if sieve[i]:
				print i	
		Sieve_Test(i,b+1)
					
	else:
		Sieve_Test(a,b)
					
