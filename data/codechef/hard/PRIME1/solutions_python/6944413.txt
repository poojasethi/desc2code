import os,sys
from bisect import bisect_left
from math import sqrt

prime = [2,3,5]
for i in range(7,32000,2):
    indi = True
    for j in prime:
        #print j
        if( i % j == 0):
            #print i,j
            indi = False
            break
    if(indi == True):
        prime.append(i)
#print prime

def find_lt(a, x):
    #'Find rightmost value less than x'
    i = bisect_left(a, x)
    return i + 3
    



##def isaprime(n,prime):
##    b = int(sqrt(n))
##    r = find_lt(prime,b)
##    for e in range(0,r):
##        if(n % prime[e] == 0):
##            return False
##    return True

    
_ = int(sys.stdin.readline())
for i in range(0,_):
    m,n = map(int,sys.stdin.readline().split(' '))
    if m <= 1:
        m = 2
##    if m <= 2 and n >= 2:
##        print '2'
##    if m <= 3 and n >= 3:
##        print '3'
##    m = 4
##    if (m % 2 == 0):
##        m = m + 1
    p = {}
    for i in range(m,n+1):
        p[i] = True
        
    w = find_lt(prime,int(sqrt(n)))
    #print 'w', w
    for j in range(0, w):
        r = m % prime[j]
        #print 'prime', prime[j]
        #print 'r',r
        if(r == 0 and m != prime[j]):
            p[m] = False
        #print prime[j]
        t = prime[j] - r
        u = m + t
        #print 'u',u
        #print 'quo', m/prime[j]
        if (m / prime[j] < 1):
            u = u + prime[j]
        #print 'u',u
        while u <= n:
            #print 'p[u]',p[u]
            p[u] = False
            u = u + prime[j]
    #j = 0
    for k in range(m,n+1):
        if p[k] == True:
            #j = j + 1
            print k
    #print j
    print ''




    
    
    
