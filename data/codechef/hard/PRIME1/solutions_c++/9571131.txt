#include <bits/stdc++.h>

using namespace std;

#define MAX 1000000000

vector<int> primes;		// primes upto sqrt(MAX) - they'll be the ones that'll sieve
void findPrimes() {
	int lim = ceil(sqrt(MAX));
	vector<char> isprime(lim, 1);

	for(int i = 2; i <= lim; i++) {
		if(isprime[i]) {
			primes.push_back(i);
			for(int j = i*i; j <= lim; j += i) 
				isprime[j] = 0;
		}
	}
}

int main() {
	findPrimes();
	int t;
	cin >> t;
	int m, n;

	while(t--) {
		cin >> n >> m;

		vector<char> interval(m-n+1, 1);
		if(n == 1) interval[0] = 0;
		for(int i = 0; i < primes.size(); i++) {
			int p = primes[i];
			int q = n/p;
			if(q < 2) q = 2;
			while(true) {
				if(p*q > m) break;
				if(p*q >= n) {
					interval[p*q - n] = 0;
				}
				q++;
			}
		}

		for(int i = 0; i < interval.size(); i++)
			if(interval[i]) cout << i+n << "\n";
		
		cout << "\n";
	}
	return 0;
}
