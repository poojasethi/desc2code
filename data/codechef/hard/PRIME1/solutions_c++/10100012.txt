// #include<abhi.944>

#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;

#ifndef ONLINE_JUDGE
	#define TRACE
#endif

const long double PI=3.1415926535897932384626;
const ll MAX=1000000000+7;
const int INF = 0x3f3f3f3f;

#define ps printf(" ")
#define pn printf("\n")
#define sc(n) scanf("%d",&n)
#define pf(n) printf("%d",n)
#define forall(it, x) for(__typeof((x).begin()) it=(x).begin();it!=(x).end();it++)
#define sz size()
#define ff first
#define ss second
#define pb push_back //pop_back
#define mp make_pair
#define fill(a,val) memset(a,val,sizeof(a))
//#define pii pair <int ,int>

#ifdef TRACE
    #define trace(x)            cerr<<__FUNCTION__<<":"<<__LINE__<<": ERROR---->"<<x<<endl;
    #define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
    #define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
    #define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
    #define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
#else
    #define trace(x)
    #define trace1(x)
    #define trace2(x,y)
    #define trace3(x,y,z)
    #define trace4(a,b,c,d)
#endif

#define N 31650      //31650 with 3404 primes
#define DI 100005

bool isPrime[N+2];
std::vector<int> prime;
bool ok[DI+1];

void sieve() {
    fill(isPrime, true);
    int p = sqrt(N);
    for (int i = 3; i <= p; i += 2)
        if (isPrime[i])
            for (int j = i + i; j <= N; j += i)
                isPrime[j] = false;
    prime.pb(2);
    for (int i = 3; i <= N; i += 2)
        if (isPrime[i]) prime.pb(i);
}

int main(int argc, char const *argv[])
{
    sieve();
    int t;
    sc(t);
    while(t--) {
        int n,m;
        sc(n); sc(m);

        int k = prime.sz;
        fill(ok,1);

        for(int i=0;i<k;i++) {
            if(prime[i]*2 > m) break;
            int st = n/prime[i];
            if(st==0 or st==1) st = 2*prime[i];
            else { st*=prime[i]; if(st < n) st+=prime[i]; }
            for(int j=st;j<=m;j+=prime[i]) {
                ok[j-n] = 0;
            }     
        }

        if(n==1) {
            ok[0] = 0;
        }

        for(int i=n;i<=m;i++) {
            if(ok[i-n]) {
                pf(i); pn;
            }
        }pn;
    }
    return 0;
}