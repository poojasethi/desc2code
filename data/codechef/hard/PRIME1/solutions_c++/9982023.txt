/********   All Required Header Files ********/
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>

using namespace std;
typedef int  ll;
typedef vector<int> vi;
int _sieve_size;
bitset<40010> bs;   // 10^7 should be enough for most cases
vi primes;

void sieve(ll upperbound) {          // create list of primes in [0..upperbound]
  _sieve_size = upperbound + 1;                   // add 1 to include upperbound
  bs.set();                                                 // set all bits to 1
  bs[0] = bs[1] = 0;                                     // except index 0 and 1
  for (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {
      for (ll j = i * i; j <= _sieve_size; j += i) {
	bs[j] = 0;
      }
      primes.push_back((int)i);  // also add this vector containing list of primes
} }                                           // call this method in main method

bool isPrime(ll N) {                 // a good enough deterministic prime tester
  if (N <= _sieve_size) return bs[N];                   // O(1) for small primes
  for (int i = 0; i < (int)primes.size(); i++)
    if (N % primes[i] == 0) return false;
  return true;                    // it takes longer time if N is a large prime!
}                      // note: only work for N <= (last prime in vi "primes")^2
   
void loop(int start, int end) {
  for(int i=start; i<=end; i++) {
    if(isPrime(i)) {
      printf("%d\n", i);
    }
  }
}

int test()
{
  assert(isPrime(13) == true);
}

int main() {
  sieve(40000);
  //test();

  int n;
  scanf("%d", &n);
  for(int i=1;i<=n;i++) {
    int a, b;
    scanf("%d %d", &a, &b);

    loop(a, b);
    if (i != n) { 
      printf("\n");
    }
  }
}
