#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
#define rep(i, n) for(int i=0; i<n; i++)
#define all(n) n.begin(), n.end()
typedef vector <int> vi;
int hash(vi &a) {
    int val = 0;
    rep(i, a.size()) val = val*109+a[i];
    return val;
}
int _main() {
    int n; scanf("%d", &n);
    vector < vi > p(n);
    vi ones, hashp(n), hashq(n), q(n-1);
    rep(i, n) {
        p[i].resize(n-1);
        rep(j, n-1) {
            scanf("%d", &p[i][j]);
            if(p[i][j] == 1) ones.push_back(j);
        }
        hashp[i] = hash(p[i]);
    }
    sort(all(hashp));
    sort(all(ones)); ones.push_back(n-1);
    ones.erase(unique(all(ones)), ones.end());
    vi s(n);
    rep(i, n) {
        // we want to check if ith permutation makes the answer ie it do not have 1 in it. Let us try all 1s make a new permutation, check if its valid
        rep(j, ones.size()) {
            rep(k, n) {
                if(k == ones[j]) s[k] = 1;
                else if(k < ones[j]) s[k] = p[i][k]+1;
                else s[k] = p[i][k-1]+1;
            }
            for(int k=1;k<=n;k++) {
                int ptr = 0;
                rep(l, n) if(s[l]!=k) q[ptr++] = s[l]-(s[l]>k?1:0);
                hashq[k-1] = hash(q);
            }
            sort(all(hashq));
            if(hashp == hashq) {
                rep(i, n) printf("%d ", s[i]);
                return 0;
            }
        }
    }
}

int main() {
 	int testCnt;
 	scanf("%d", &testCnt);

 	for(int test = 0; test < testCnt; test++) {
 	 	_main();
 	}
}