#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <cassert>

using namespace std;

#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define S(x) 			scanf("%d",&x)
#define all(c) 			(c).begin(),(c).end() 
#define sz(c) 			int((c).size())
#define pb 				push_back
#define present(c,x) 	((c).find(x) != (c).end()) 
#define rep(i,x,y) 		for(int i = x; i < y; i++)
#define REV(i,x,y) 		for(int i = x; i >= y; i--)
#define foreach(c,itr)	for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define FILL(a,v) 		memset(a,v,sizeof(a))
#define DB(x)			cerr<<#x<<" = "<<x<<endl
#define debugarr(A,a,b) cerr<<#A<<" : ";rep(itr,a,b) cerr<<A[itr]<<" ";cerr<<endl;
//#define R(x) 			((rand()%x) + 1)

typedef long long int LL;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;

/* ------------------------Main Code----------------------- */
const int MAX = 302;

int A[MAX][MAX], cnt[MAX][MAX];
int BIT[MAX];

void update(int idx, int val)
{
	while(idx < MAX){
		BIT[idx] += val;
		idx += idx & -idx;
	}
}

int query(int idx)
{
	int res = 0;
	while(idx > 0){
		res += BIT[idx];
		idx -= idx & -idx;
	}
	return res;
}

//int x_cnt[MAX] = 0;
int main()
{
	int t;
	S(t);
	while(t--){
		int n;
		S(n);
		FILL(cnt,0);
		rep(i,1,n+1) rep(j,1,n){
			S(A[i][j]);
			//if(i != 1) 
				cnt[A[i][j]][j]++;
		}
		int x[MAX], flag = 0;
		// rep(i,1,n+1){
		// 	rep(j,1,n) printf("%d ",cnt[i][j]);
		// 	printf("\n");
		// }
		rep(i,1,n+1){
			rep(j,1,n+1){
				x[j] = i;
				int y = 1;
				rep(k,1,n){
					if(k == j) x[y++] = i;
					x[y++] = A[1][k] >= i ? A[1][k]+1 : A[1][k];
				}
				FILL(BIT,0);
				//FILL(s_cnt,0);
				flag = 1;
				// rep(k,1,n+1) printf("%d ",x[k]);
				// printf("\n");
				rep(k,1,n){
					update(x[k]+1,1);
					int fs;

					fs = query(x[k+1]);
					if(cnt[x[k+1]-1][k] < fs || cnt[x[k+1]][k] < (k-fs)){flag = 0;break;}
					//DB(fs);
					fs = query(x[k]);
					//DB(fs);
					if(cnt[x[k]-1][k] < x[k]-fs-1 || cnt[x[k]][k] < n-x[k]-(k-fs-1)){flag = 0; break;}
				}
				if(flag) break;
			}
			if(flag) break;
		}
		rep(i,1,n+1) printf("%d ",x[i]);
		printf("\n");
	}
}