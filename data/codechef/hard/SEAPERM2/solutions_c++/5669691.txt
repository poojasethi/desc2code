#include <cstdio>
#include <cstring>
#include <utility>
#include <vector>
#include <map>

using namespace std;
long t, n;
int m[305][305], q[305], brrazq, raspodela[305], nm1[305];
vector<int> v;
map <vector<int>, int> zadato;

bool trythisone() {
      for (int p=1; p<=n; p++) {
        int x=0;
        for (int j=0; j<n; j++)
            if (q[j]<p) v[x++]=q[j];
            else if (q[j]>p) v[x++]=q[j]-1;
        if (zadato.count(v)) {
            zadato[v]--;
            if (zadato[v]<0) {
                int k=0;
                for (map <vector<int>, int>::iterator it=zadato.begin(); it!=zadato.end(); ++it)
                    it->second=raspodela[++k];
                return false;
            }
        }
        else {
            int k=0;
            for (map <vector<int>, int>::iterator it=zadato.begin(); it!=zadato.end(); ++it)
                it->second=raspodela[++k];
            return false;
        }
      }
      int k=0;
      for (map <vector<int>, int>::iterator it=zadato.begin(); it!=zadato.end(); ++it)
          it->second=raspodela[++k];
      return true;
}

void check(){
    for (int i=1; i<=n; i++)   // za svaku permutaciju q[i]
      for (int k=0; k<n; k++)
      if (nm1[k] or nm1[k+1] or nm1[k-1]) {  // ubaci n-ti clan na k-to mesto q[i] skracene permutacije
          for (int j=0; j<k; j++) q[j]=m[i][j];
          q[k]=n;
          for (int j=k; j<n-1; j++) q[j+1]=m[i][j];  // ovo je pretpostavljena permutacija
          if (trythisone()) {
            for (int j=0; j<n; j++) printf("%d ",q[j]);
            printf("\n");
            return;
      }
     }
}

int main(){
// freopen("hex.in", "r", stdin);
//  freopen("dule.out", "w", stdout);
  scanf("%d",&t);
  while (t--) {
    scanf("%d",&n);
    zadato.clear();
    memset(nm1, 0, sizeof(nm1));
    for (int i=0; i<n-1; i++) v.push_back(i);
    for (int i=1; i<=n; i++) {
      for (int j=0; j<n-1; j++) {scanf("%d",&m[i][j]); v[j]=m[i][j]; if (m[i][j]==n-1) nm1[j]++;}
      zadato[v]++;
    }
    brrazq=zadato.size();
    int k=0;
    for (map <vector<int>, int>::iterator it=zadato.begin(); it!=zadato.end(); ++it) {
        raspodela[++k]=it->second;
    }
    check();
  }
  return 0;
}
