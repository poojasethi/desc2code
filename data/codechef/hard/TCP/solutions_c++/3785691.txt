#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <cstring>
#include <string>
using namespace std;

#define pairii pair<int, int>
#define llong long long
#define pb push_back
#define sortall(x) sort((x).begin(), (x).end())
#define INFI  numeric_limits<int>::max()
#define INFLL numeric_limits<llong>::max()
#define INFD  numeric_limits<double>::max()
#define FOR(i,s,n) for (int (i) = (s); (i) < (n); (i)++)
#define FORZ(i,n) FOR((i),0,(n))

#define EQN_EPS 1e-15

double det(double m[4][4]) {
    return
    m[0][3] * m[1][2] * m[2][1] * m[3][0] - m[0][2] * m[1][3] * m[2][1] * m[3][0] -
    m[0][3] * m[1][1] * m[2][2] * m[3][0] + m[0][1] * m[1][3] * m[2][2] * m[3][0] +
    m[0][2] * m[1][1] * m[2][3] * m[3][0] - m[0][1] * m[1][2] * m[2][3] * m[3][0] -
    m[0][3] * m[1][2] * m[2][0] * m[3][1] + m[0][2] * m[1][3] * m[2][0] * m[3][1] +
    m[0][3] * m[1][0] * m[2][2] * m[3][1] - m[0][0] * m[1][3] * m[2][2] * m[3][1] -
    m[0][2] * m[1][0] * m[2][3] * m[3][1] + m[0][0] * m[1][2] * m[2][3] * m[3][1] +
    m[0][3] * m[1][1] * m[2][0] * m[3][2] - m[0][1] * m[1][3] * m[2][0] * m[3][2] -
    m[0][3] * m[1][0] * m[2][1] * m[3][2] + m[0][0] * m[1][3] * m[2][1] * m[3][2] +
    m[0][1] * m[1][0] * m[2][3] * m[3][2] - m[0][0] * m[1][1] * m[2][3] * m[3][2] -
    m[0][2] * m[1][1] * m[2][0] * m[3][3] + m[0][1] * m[1][2] * m[2][0] * m[3][3] +
    m[0][2] * m[1][0] * m[2][1] * m[3][3] - m[0][0] * m[1][2] * m[2][1] * m[3][3] -
    m[0][1] * m[1][0] * m[2][2] * m[3][3] + m[0][0] * m[1][1] * m[2][2] * m[3][3];
}

static int isZero(double x)
{
    return x > -EQN_EPS && x < EQN_EPS;
}

int solveCubic(double c[4], double s[3])
{
    int	i, num;
    double	sub,
	A, B, C,
	sq_A, p, q,
	cb_p, D;
    
    A = c[1] / c[0];
    B = c[2] / c[0];
    C = c[3] / c[0];
    
    sq_A = A * A;
    p = 1.0/3.0 * (-1.0/3.0 * sq_A + B);
    q = 1.0/2.0 * (2.0/27.0 * A *sq_A - 1.0/3.0 * A * B + C);
    
    cb_p = p * p * p;
    D = q * q + cb_p;
    
    if (isZero(D))
    {
        if (isZero(q))
        {
            s[0] = 0.0;
            num = 1;
        }
        else
        {
            double u = cbrt(-q);
            s[0] = 2.0 * u;
            s[1] = - u;
            num = 2;
        }
    }
    else
        if (D < 0.0)
        {
            double phi = 1.0/3.0 * acos(-q / sqrt(-cb_p));
            double t = 2.0 * sqrt(-p);
            s[0] = t * cos(phi);
            s[1] = -t * cos(phi + M_PI / 3.0);
            s[2] = -t * cos(phi - M_PI / 3.0);
            num = 3;
        }
        else
        {
            double sqrt_D = sqrt(D);
            double u = cbrt(sqrt_D + fabs(q));
            if (q > 0.0)
                s[0] = - u + p / u ;
            else
                s[0] = u - p / u;
            num = 1;
        }
    
    sub = 1.0 / 3.0 * A;
    for (i = 0; i < num; i++)
        s[i] -= sub;
    return num;
}

double vel(double x[4], double t) {
    return x[0]*t*t*t + x[1]*t*t + x[2]*t + x[3];
}

double dist(double x[4], double t) {
    return x[0]*t*t*t*t/4.0 + x[1]*t*t*t/3.0 + x[2]*t*t/2.0 + x[3]*t;
}

void solve() {
    double t; scanf("%lf", &t);
    double A[4][4];
    double b[4];
    FORZ(i,4) {
        double ct, cv; scanf("%lf %lf", &ct, &cv);
        A[i][0] = ct*ct*ct;
        A[i][1] = ct*ct;
        A[i][2] = ct;
        A[i][3] = 1.0;
        b[i] = cv;
    }
    double x[4];
    double detA = det(A);
    FORZ(i,4) {
        double Ai[4][4];
        FORZ(j,4) FORZ(k,4) {
            if (k == i) Ai[j][k] = b[j];
            else Ai[j][k] = A[j][k];
        }
        x[i] = det(Ai) / detA;
    }
    double s[3];
    solveCubic(x, s);
    sort(s, s+3);
    vector<double> ss;
    ss.pb(0.0);
    FORZ(i,3) {
        if (0 < s[i] && s[i] < t) ss.pb(s[i]);
    }
    ss.pb(t);
    double res = 0.0;
    FORZ(i,ss.size()-1) {
        double mid = (ss[i+1] + ss[i]) / 2.0;
        double d = dist(x, ss[i+1]) - dist(x, ss[i]);
        if (vel(x,mid) >= 0) res += d;
        else res -= d;
    }
    
    printf("%.10f\n", res);
}


int main() {
#ifdef DEBUG
    freopen("in.txt", "r", stdin);
    freopen("out.txt", "w", stdout);
#endif
    
    int t; scanf("%d", &t);
    FORZ(i,t) solve();

    return 0;
}
