#include <iostream>
#include <cstdio>
#include <cassert>
#include <ctime>
#include <cstring>
#include <cmath>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <map>
#include <set>

using namespace std;

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0? -x : x; }
template <typename T> T gcd(T a, T b) { return b? gcd(b, a % b) : a; }
#define foreach(a, b) for(typeof((b).begin()) a = (b).begin(); a != (b).end(); ++a)

typedef long double ld;
typedef long long ll;
typedef unsigned long long ull;

const ld EPS = 1e-9;

ld get(const ld x, const vector <ld> &v)
{
    ld res = 0;
    ld X = 1;
    for (size_t i = 0; i < v.size(); ++i) {
        res += v[i] * X;
        X *= x;
    }
    return res;
}

ld GET(const ld x, const vector <ld> &v)
{
    ld res = 0;
    ld X = x;
    for (size_t i = 0; i < v.size(); ++i) {
        res += v[i] * X / (i + 1);
        X *= x;
    }
    return res;
}

int main(int argc, char **argv)
{
    ios_base::sync_with_stdio(false);
    #ifdef LOCAL
    assert(freopen("inp", "r", stdin));
    assert(freopen("out", "w", stdout));
    #endif

    int t;
    cin >> t;
    cout.precision(12);
    while (t--) {
        int T;
        cin >> T;
        vector < vector <ld > > v;
        const int n = 4;
        v.resize(n);
        for (int i = 0; i < n; ++i) {
            ld ct, cv;
            cin >> ct >> cv;
            v[i].resize(n + 1);
            ld x = 1;
            for (int j = 0; j < n; ++j) {
                v[i][j] = x;
                x *= ct;
            }
            v[i][n] = cv;
        }

        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (abs(v[j][i]) > abs(v[i][i])) {
                    swap(v[i], v[j]);
                }
            }
 //           cerr << v[i][i] << endl;
            for (int j = i + 1; j < n; ++j) {
                for (int k = n; k >= i; --k) {
                    v[j][k] -= v[i][k] / v[i][i] * v[j][i];
                }
            }
        }
        /*
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j <= n; ++j) {
                cout << v[i][j] << " ";
            }
            cout << endl;
        }
        //*/

        vector <ld> ans;
        ans.resize(n);
        for (int i = n - 1; i >= 0; --i) {
            ld s = v[i][n];
            for (int j = i + 1; j < n; ++j) {
                s += -v[i][j] * ans[j];
            }
            ans[i] = s / v[i][i];
        }
        /*
        for (int i = 0; i < n; ++i) {
            cout << ans[i] << " ";
        }
        cout << endl;
        //*/
        vector <ld> p;

        ld A = 3 * ans[3], B = 2 * ans[2], C = 1 * ans[1];
        ld D = sqr(B) - 4 * A * C;

        p.push_back(0);
        p.push_back(T);
        if (D > EPS) {
            p.push_back((-B - sqrt(D)) / (2 * A));
            p.push_back((-B + sqrt(D)) / (2 * A));
        }

        sort(p.begin(), p.end());
        for (size_t i = 0; i + 1 < p.size(); ++i)  {
            ld l = p[i];
            ld r = p[i + 1];
            for (int iter = 0; iter < 200; ++iter) {
                ld c = (l + r) / 2;
                if (get(p[i], ans) * get(c, ans) < -EPS) {
                    r = c;
                } else {
                    l = c;
                }
            }
            p[i] = (l + r) / 2;
            //cerr << (l + r) / 2 << endl;
        }
        p.pop_back();
        p.push_back(0);
        p.push_back(T);
        sort(p.begin(), p.end());
        for (size_t i = 0; i < p.size(); ++i) {
            p[i] = max(p[i], (ld)0);
            p[i] = min(p[i], (ld)T);
        }
        /*
        for (size_t i = 0; i < p.size(); ++i) {
            cerr << p[i] << " ";
        }
        cerr << endl;
        //*/

        //cerr << D << endl;
        ld answer = 0;
        for (size_t i = 0; i + 1 < p.size(); ++i) {

            answer += abs(GET(p[i + 1], ans) - GET(p[i], ans));
        }

        cout << fixed << answer << endl;


    }

    fprintf(stderr, "Time execute: %.3lf sec\n", clock() / (double)CLOCKS_PER_SEC);
    return 0;
}
