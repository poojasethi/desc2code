#include <bits/stdc++.h>
#define snd(a) scanf("%d",&(a))
#define snlld(a) scanf("%lld",&(a))
#define rep(i,n) for((i)=0;(i)<(n);(i)+=1)
#define reps(i,s,n) for((i)=(s);(i)<(n);(i)+=1)
#define tr(container,it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pb push_back
#define pf push_front
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
//#define fill(a,v) memset((a),(v),sizeof(a))
#define sz size()
#define mp make_pair
#define mod  1000000007
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
template<class T> inline T poww(T b,T p){ll a=1;while(p){if(p&1){a=(a*b);}p>>=1;b=(b*b);}return a;}
template<class T> inline T modpoww(T b,T p,T mmod){ll a=1;while(p){if(p&1){a=(a*b)%mmod;}p>>=1;b=(b*b)%mmod;}return a%mmod;}
template<class T>  inline T gcd(T a,T b){ if(b>a)return gcd(b,a);return ((b==0)?a:gcd(b,a%b));}
template<class T> inline void scan(vector<T>& a,int n){T b;int i; rep(i,n){cin>>b;a.pb(b);}}
inline void scand(vector<int>& a,int n){int b;int i; rep(i,n){snd(b);a.pb(b);}}
#define modd  20071027
#define pii pair<int,int>
#define vpii vector<pii >
#define vi vector<int>
#define vvi vector<vi >
#define vl vector<long long>
#define fr first
#define sd second
class Trie{
    int count;
    Trie * child[2];//0 or 1 edge
    public:
    Trie(){
        count=0;
        child[0]=NULL;
        child[1]=NULL;
    }
    void insert(int number,int bit=30){
        //cout<<"inserting n="<<number<<" bit="<<bit<<"\n";

       /* ++count;
        if(bit<0)return;
        int b=((number&(1<<bit))>0);//0 or 1
        if(!child[b])child[b]=new Trie();
        child[b]->insert(number,bit-1);*/

        Trie *temp=this;
        while(bit>=0){
            temp->count++;
            int b=((number&(1<<bit))>0);//0 or 1
            if(!temp->child[b])temp->child[b]=new Trie();
            temp=temp->child[b];
            bit--;
        }
        temp->count++;
    }
    void remove(int number,int bit=30){
        //cout<<"removing n="<<number<<" bit="<<bit<<"\n";
        /*--count;
        if(bit<0)return;
        int b=((number&(1<<bit))>0);//0 or 1
        child[b]->remove(number,bit-1);*/

        Trie *temp=this;
        while(bit>=0){
            temp->count--;
            int b=((number&(1<<bit))>0);//0 or 1
            temp=temp->child[b];
            bit--;
        }
        temp->count--;
    }
    int searchmax(int number,int bit=30){
        //cout<<"searching n="<<number<<" bit="<<bit<<"\n";

        /*if(bit<0)return 0;
        int b=((number&(1<<bit))>0);//0 or 1
       // cout<<"b="<<b<<" "<<(child[!b]&&child[!b]->count>0)<<":\n";
        if(child[!b]&&child[!b]->count>0)return ((1<<bit)|child[!b]->searchmax(number,bit-1));
        else return (child[b]?child[b]->searchmax(number,bit-1):0);*/

        int ans=0;
        Trie* temp=this;
        while(bit>=0&&temp&&temp->count){
            int b=((number&(1<<bit))>0);//0 or 1
            if(temp->child[!b]&&temp->child[!b]->count>0){
                ans|=(1<<bit);
                temp=temp->child[!b];
            }
            else temp=temp->child[b];
            bit--;
        }
        return ans;
    }
    ~Trie(){
        if(child[0])delete child[0];
        if(child[1])delete child[1];
    }

};

int n,a[2010];

void trie_soln(){
    int i,j,k;
     int ans=0;
     Trie tr;
     //rep(i,n)tr.insert(a[i]);
     tr.insert(a[0]);
     reps(i,1,n){
       // tr.remove(a[i]);
        reps(j,i+1,n){
           // tr.remove(a[j]);
            ans=max(ans,tr.searchmax(a[i]^a[j]));
            //tr.insert(a[j]);
        }
        tr.insert(a[i]);

     }
     printf("%d\n",ans);
}
void brute_soln(){
    int i,j,k;
    int ans=0;
    rep(i,n)reps(j,i+1,n)reps(k,j+1,n)ans=max(ans,a[i]^a[j]^a[k]);
    printf("%d\n",ans);
}
int main(){
    int i,j,k,t;
    snd(t);
    while(t--){
     snd(n);
     rep(i,n)snd(a[i]);
     (n>200?trie_soln():brute_soln());

    }
}
