/**
* He who forgives and acknowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

typedef unsigned int ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ll> vll;
typedef pair<int,int> ii;
typedef vector<pair<int,int> > vii;

const int MAX = 4000005;
const int MOD = 1000000007;
const int INF = 1000000005;

struct node {
    node *left, *right;
    node(){
        left = right = NULL;
    }
};

class Trie {
    #define MAXB 31
    node *root;
    public:
    Trie() {
        root = new node();
    }

    node* create_new_node(char x){
        node *t = new node();
        return t;
    }

    void tostring(char *s, unsigned int x){
        int i;
        unsigned int j;
        for (j = 1LL<<MAXB, i = 0; j > 0; j >>= 1, i++) {
            s[i] = ((x & j) != 0) + '0';
        }
        s[i] = '\0';
    }

    void insert_trie(char *s){
        node *t = root;
        for (int i = 0; s[i]; i++) {
            if (s[i] == '0') {
                if (t->left == NULL) {
                    t->left = create_new_node('0');
                }
                t = t->left;
            } else {
                if (t->right == NULL) {
                    t->right = create_new_node('1');
                }
                t = t->right;
            }
        }
    }

    unsigned int maximize(unsigned int x){
        char s[105];
        tostring(s, x);
        unsigned int answer = 0;
        node *t = root;
        for (int i = 0; s[i]; i++) {
            answer <<= 1;
            if (s[i] == '0') {
                if (t->right == NULL) {
                    t = t->left;
                } else {
                    t = t->right;
                    answer |= 1;
                }
            } else {
                if (t->left == NULL) {
                    t = t->right;
                } else {
                    t = t->left;
                    answer |= 1;
                }
            }
        }
        return answer;
    }

    void insert(unsigned int x){
        char s[105];
        tostring(s, x);
        insert_trie(s);
    }
};

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        int n;
        scanf("%d", &n);
        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            scanf("%d", &a[i]);
        }
        unsigned int answer = 0;
        Trie T;
        T.insert(a[0]);
        for (int i = 1; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                answer = max(answer, T.maximize(a[i]^a[j]));
            }
            T.insert(a[i]);
        }
         cout << answer << endl;
    }
}
