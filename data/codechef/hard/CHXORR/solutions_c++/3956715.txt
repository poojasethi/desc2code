#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<string>
#include<string.h>
#include<cstring>
#include<stack>
#include<queue>
#include<cassert>
#include<cmath>
using namespace std;

#define LL long long int
#define PII pair<int,int>
#define PB push_back
#define MP make_pair
#define INF 1000000000
#define debug(args...) do {cerr << #args << ": "; dbg,args; cerr << endl;} while(0)

int a[20000];
struct node{
    node *c[2];
    node(){
        c[0] = c[1] = NULL;
    }
    void clear(){
        c[0] = c[1] = NULL;
    }
};
class trie{
    node *top;
    int used;
    void __insert(node *cnode,int cnum){
        int bnum = 30;
        while(bnum > -1){
            int cbit = ((cnum >> bnum)&1);
            if(cnode->c[cbit] == NULL){
                cnode->c[cbit] = new node();
                cnode->c[cbit]->clear();
            }
            cnode = cnode->c[cbit];
            bnum --;
        }
    }
    int  __query(node *cnode, int cnum){
        int tnow = 0, bnum = 30;
        while(bnum > -1){
            int cbit = 1-((cnum>> bnum)&1);
            if(cnode->c[cbit] == NULL)
                cbit = 1 - cbit;
            tnow |= (cbit<<bnum);
            cnode = cnode->c[cbit];
            bnum --;
        }
        return tnow;
    }
    public: 
    trie(){
        top = new node();
        used = 0;
    }
    void clear(){
        top = new node();
        used = 0;
    }
    void insert(int num){
        __insert(top, num);
    }
    int query(int num){
        return (num^__query(top,num));
    }
};
trie tr;
int main(){
    int i,n,t,j,cans;
    scanf("%d",&t);
    while(t--){
        cans = 0;
        tr.clear();
        scanf("%d",&n);
        for(i=0;i<n;i++)
            scanf("%d",&a[i]);
        tr.insert(a[0]);

        for(i=1;i<n;i++){
            for(j=i+1;j<n;j++)
                cans = max(cans,tr.query(a[i]^a[j]));
            tr.insert(a[i]);
        } 
        cout<<cans<<endl;
    }
    return 0;
}
