#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<vector>
#include<string.h>
using namespace std;
long long int dp[(1<<16)+1];
const long long inf = 1E18;
int getIndex(vector<int>& v,int n,int d)
{
	int i;
	int ret=0;
	for(i=0;i<n;i++)
	ret = ret*d + v[i];
	return ret;
}
long long getCost(vector<int>& v,int n)
{
	int i;
	long long a=0,b=0;
	for(i=0;i<n;i++)
	{
		a = a^v[i];
		b = b+v[i];
	}
	return a*b;
}
long long fun2(vector<int>& v,int n,int d)
{
	int ind = getIndex(v,n,d),i;
	
	if(dp[ind]!=-1)
	return dp[ind];
 	
	if(ind==0)
	return dp[ind]=0;
	
	dp[ind] = inf;
	vector<int> v1=v;
	long long mint=inf;
	
	for(i=0;i<n;i++)
	{
		if(v[i]>0)		
		{
			v1[i]--;
			mint = min(mint,fun2(v1,n,d));
			v1[i]++;
		}
	}
	dp[ind] = mint + getCost(v,n);
	return dp[ind];
}
long long fun(int n,int d)
{
	vector<int> v;
	int i;
	memset(dp,-1,sizeof(dp));
	for(i=0;i<n;i++)
	v.push_back(d-1);
	
	return fun2(v,n,d);
}
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int n,d;
		scanf("%d %d",&n,&d);
		printf("%lld\n",fun(n,d));
	}
	return 0;
} 