// BestSums.cpp : Defines the entry point for the console application.
//

#include <stdio.h>
#include <algorithm>

class BUFFER
{
	static const int BUFSIZE = 1<<16;
	char *buffer;
	char *bufpos;
	char *bufend;
public:
	BUFFER() { bufpos = buffer = new char[BUFSIZE]; }
	~BUFFER() { delete[] buffer; }
protected:
	void grabBuffer()
	{
		bufpos = buffer;
		bufend = buffer + fread(buffer, sizeof(char), BUFSIZE, stdin);
	}
	void flushBuffer()
	{
		fwrite(buffer, sizeof(char), bufpos - buffer, stdout);
		bufpos = buffer;
	}
	inline char getChar()
	{
		if (bufpos==bufend) grabBuffer();
		return *bufpos++;
	}
	inline void putChar(char c)
	{
		*bufpos++ = c;
		if (bufpos >= buffer+BUFSIZE) flushBuffer();
	}
};

class IN : BUFFER
{
public:
	IN() { grabBuffer(); }
	int readInt()
	{
		int result = 0, c;
		do { c = getChar(); } while (c <= ' ');
		while (('0' <= c) && (c <= '9'))
		{
			result *= 10;
			result += c - '0';
			c = getChar();
		}
		return result;
	}
};

class OUT : BUFFER
{
public:
	~OUT() { flushBuffer(); }
	inline void write(char c)
	{
		putChar(c);
	}
	inline void write(int x)
	{
		if (x == 0) { putChar('0'); return; }
		char tmp[10];
		int tp = 0;
		while (x) { tmp[tp++] = x%10; x /= 10; }
		while (tp--) putChar(tmp[tp] + '0');
	}
	inline void write(const char*s)
	{
		while(*s) write(*s++);
	}
};

IN input;
OUT output;
int sum[100000];

struct val_t
{
	int sum;
	int pos;
	inline bool operator < (const val_t& rhs) const
	{
		return sum < rhs.sum;
	}
};

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif

	int N = input.readInt();
	int K = input.readInt();
	int P = input.readInt();
	int result = 2147483647;

	int s = 0;
	for (int i = 0; i < N; ++i)
	{
		int num = input.readInt() % P;
		s = (s + num) % P;
		sum[i] = s;
		if (num < result && num >= K)
			result = num;
	}

	if (result == K)
	{
		output.write(result);
		output.write('\n');
		return 0;
	}
	
	val_t* values = new val_t[2*N+1];
	values[N].sum = 0;
	values[N].pos = -1;
	for (int i = 0; i < N-1; ++i)
	{
		values[i].sum = sum[i] - P;
		values[i].pos = i;
		values[i + N+1].sum = sum[i];
		values[i + N+1].pos = i;
	}

	std::sort(values, values + 2*N+1);

	int l = 0, j = 0, diff = 0;
	while ( l < 2*N+1 && j < 2*N+1)
	{
		if (diff > K)
		{
			l++;
		}
		else
			j++;
		
		diff = values[j].sum - values[l].sum;
		if (l != j && values[j].pos > values[l].pos)
		{
			if (diff < result && diff >= K) result = diff;
		}
	}

	delete[] values;
	output.write(result);
	output.write('\n');
	return 0;
}
