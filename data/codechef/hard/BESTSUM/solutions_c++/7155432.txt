#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <algorithm>
#define forn(i, n) for (i = 0; i < n;i++)
#define pr(x) printf("%d",x)
#define endl printf("\n")
#define sc(x) scanf("%d",&x)
#define mod(a,b) (int)a%b
int sum[100000];
int trr[100000];
char visit[100000];
int main(void){
	int p, q, r,a,low,high,mid,test;
	int j;
	sc(p); sc(q); sc(r);
	int num = 0;
	int result = r;
	memset(visit, 1, sizeof(visit));
	forn(j, p)
	{
		sc(a);
		num = (num + a) % r;
		
		sum[j] = num;
		trr[j] = num;
		if (num < result && num >= q)
		{
			result = num;
		}
		a %= r;
		if (a < result && a >= q){
			result = a;
		}
	}
	if (result == q){
		pr(result); 
		endl;
		return 0;
	}
    int	i = 0;
	std::sort(trr, trr + p);
	while (i < p)
	{
		num = sum[i]; 
		low = 0; high = p - 1;
		while (low <= high){
			mid = (low + high) / 2;
			if (trr[mid] == num)
			{
				visit[mid] = 0;
				break;
			}
			else if (trr[mid] < num)
				low = mid + 1;
			else
				high = mid - 1;
		}
		for (j = mid + 1; j < p; j++)
		{
			if (trr[j] - num<result && trr[j] - num >= q){
				if (visit[j]){
					result = trr[j] - num;
					break;
				}
			}
			if (trr[j] - num >=q )
			{
				break;
			}
		}
		for (j = 0; j < mid; j++)
		{
			if (visit[j]){
				if (r - num + trr[j] < result && r - num + trr[j] >= q){
					result = r - num + trr[j];
				}
				break;
			}
		}
		if (result == q){
			pr(result); endl;
			return 0;
		}
		i++;
	}
	pr(result); endl;
	return 0;
} 