#include<stdio.h>
#include<iostream>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<stack>
#include<algorithm>

#define MOD 1000000007
#define INF 2000000000

using namespace std;

struct node
{
       vector<long long> v;
       int sz;
}tree[300000];

void insert(int idx,int l,int r,int i,long long val)
{
     tree[idx].v.push_back(val);
     
     if(l>=r)
      return;
     
     int mid=(l+r)/2;
     
     if(i<=mid)
      insert(2*idx,l,mid,i,val);
     else
      insert(2*idx+1,mid+1,r,i,val);
     
}

void sort_tree(int idx,int l,int r)
{
     
     sort(tree[idx].v.begin(),tree[idx].v.end());
     tree[idx].sz=tree[idx].v.size();
     
     if(l>=r)
      return;
     
     int mid=(l+r)/2;
     
     sort_tree(2*idx,l,mid);
     sort_tree(2*idx+1,mid+1,r);
}

long long query(int idx,int l,int r,int i,int j,long long val)
{
     if(i<=l && j>=r)
     {
             int x=upper_bound(tree[idx].v.begin(),tree[idx].v.end(),val)-tree[idx].v.begin();
             
             if(x==tree[idx].sz)
              return INF;
             
             return tree[idx].v[x];
     }
     
     int mid=(l+r)/2;
     
     if(j<=mid)
      return query(2*idx,l,mid,i,j,val);
     else if(i<=mid)
      return min(query(2*idx,l,mid,i,j,val),query(2*idx+1,mid+1,r,i,j,val));
     else
      return query(2*idx+1,mid+1,r,i,j,val);
     
}

int sum[100005],r_sum[100005];


int main()
{
    int i;
    
    int k,p,x,n;
    
    
    scanf("%d %d %d",&n,&k,&p);
    
    
    //if(p>INF)
     //return -1;
    
    r_sum[0]=0;
    
    for(i=0;i<n;i++)
    {
                    scanf("%d",&x);
                    
                    
                    if(i==0)
                     sum[i]=x%p;
                    else
                     sum[i]=(sum[i-1]+x)%p;
                    
                    r_sum[i+1]=(p-sum[i])%p;
                    
                    
                    //insert(1,1,n,i+1,sum[i]);
    }
    
    //sort_tree(1,1,n);
    
    int ans=p;
    //query(1,1,n,2,n,0);
    //cout<<endl<<endl;
    /*for(i=0;i<n;i++)
    {
                    
                    if(r_sum[i]<=k)
                    {
                                 val=query(1,1,n,i+1,n,k-r_sum[i]-1ll);
                                 
                                 if(val!=INF && (val+r_sum[i])%p>=k)
                                  ans=min((val+r_sum[i])%p,ans);
                                             
                    }
                    else
                    {
                        val=query(1,1,n,i+1,n,p-(r_sum[i]-k)-1ll);
                        
                        if(val==INF)
                         val=query(1,1,n,i+1,n,-1ll);
                        
                        if((val+r_sum[i])%p>=k)
                         ans=min((val+r_sum[i])%p,ans);
                         
                    }
                    //printf("%lld %lld\n",r_sum[i],val);
                    
                    
    }*/
    
    set<int> st;
    st.insert(0);
    for(i=0;i<n;i++)
    {
                    st.insert(r_sum[i]);
                    
                    if(sum[i]<=k)
                    {
                                 set<int>::iterator it=st.lower_bound(k-sum[i]);
                                 
                                 if(it!=st.end())
                                 {
                                                 if(*it<p-sum[i])
                                                 {
                                                                      ans=min(sum[i]+*it,ans);
                                                 }
                                 }
                                 //printf("%d\n",(sum[i]+*it)%p);
                    }
                    else
                    {
                        set<int>::iterator it=st.lower_bound(p-(sum[i]-k));
                        
                        if(it!=st.end())
                        {
                                        int y=p-*it;
                                        
                                        if(sum[i]-y>=k)
                                         ans=min(sum[i]-y,ans);
                                        //printf("%d\n",(sum[i]+*it)%p);
                        }
                        else
                        {
                            ans=min(sum[i]%p,ans);
                            //printf("%d\n",sum[i]%p);
                        }
                        
                    }
                    /*
                    if(sum[i]<k)
                    {
                                 set<long long>::iterator it=st.upper_bound(p-(k-sum[i]));
                    
                                 
                                 it--;
                                                 
                                 if(*it>sum[i] && sum[i]-*it+p>=k)
                                  ans=min(sum[i]-*it+p,ans);
                                 
                    }
                    else
                    {
                        set<long long>::iterator it=st.upper_bound(sum[i]-k);
                        
                        
                        it--;
                        
                        if(sum[i]-*it>=k)
                         ans=min(ans,sum[i]-*it);
                        
                    }
                    //printf("%lld\n",ans);             
                                 
                    st.insert(sum[i]);*/
    }
    //int ret=ans;
    
    printf("%d\n",ans);
    
    //system("pause");
    return 0;
}
