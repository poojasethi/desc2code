#include<bits/stdc++.h>
using namespace std;

#define MAXN 100006

int N,x,y,Q,i;
long long f[4][MAXN],imax;
pair<long long , long long > M[4][270000],temp1,temp2,res;
char ch;

void preprocess(int node, int b,int e)
{
    if(b==e)
        {
            for(int i=0;i<4;i++)
            M[i][node].first=M[i][node].second=f[i][b];
            return;
        }


    preprocess(2*node,b,(b+e)/2);preprocess(2*node+1,(b+e)/2+1,e);

    for(int i=0;i<4;i++)
    {
        if(M[i][2*node].first<M[i][2*node+1].first)M[i][node].first=M[i][2*node].first;else M[i][node].first=M[i][2*node+1].first;
        if(M[i][2*node].second>M[i][2*node+1].second)M[i][node].second=M[i][2*node].second;else M[i][node].second=M[i][2*node+1].second;
    }
}

void update(int node,int b,int e,int idx)
{
    if(b==e&&e==idx)
        {
            for(int i=0;i<4;i++)
            M[i][node].first=M[i][node].second=f[i][b];
            return;
        }
    if(idx<=(b+e)/2)
        update(2*node,b,(b+e)/2,idx);
    else
        update(2*node+1,(b+e)/2+1,e,idx);

    for(int i=0;i<4;i++)
    {
        if(M[i][2*node].first<M[i][2*node+1].first)M[i][node].first=M[i][2*node].first;else M[i][node].first=M[i][2*node+1].first;
        if(M[i][2*node].second>M[i][2*node+1].second)M[i][node].second=M[i][2*node].second;else M[i][node].second=M[i][2*node+1].second;
    }
}

pair<long long,long long> query(int node, int b, int e, int j, int k, int st)
{
    if(j<=b&&k>=e)return make_pair(M[st][node].first,M[st][node].second);
    if(j>e||k<b)return make_pair((long long)INT_MAX*100,(long long)INT_MIN*100);
    pair<long long ,long long > res,temp1,temp2;
    temp1=query(2*node,b,(b+e)/2,j,k,st);
    temp2=query(2*node+1,(b+e)/2+1,e,j,k,st);


    res.first=min(temp1.first,temp2.first);
    res.second=max(temp1.second,temp2.second);

    return make_pair(res.first,res.second);

}

int main()
{
//    ios_base::sync_with_stdio(false);cin.tie(NULL);
    cin>>N;
    for(int i=0;i<N;i++)
    {
        cin>>x>>y;
        f[0][i]=x+y;f[1][i]=-x+y;f[2][i]=x-y;f[3][i]=-x-y;
    }
    preprocess(1,0,N-1);

    cin>>Q;
    while(Q--)
    {
        cin>>ch;
        if(ch=='U')
        {
            cin>>i>>x>>y;
            f[0][i]=x+y;f[1][i]=-x+y;f[2][i]=x-y;f[3][i]=-x-y;
            update(1,0,N-1,i);
        }
        else
        {
            cin>>x>>y;
            imax=-1;
            for(int i=0;i<4;i++)
            {
                temp1=query(1,0,N-1,x,y,i);
                imax=max(temp1.second-temp1.first,imax);
            }
            cout<<imax<<endl;
        }
    }
}
