//Intended for practice purpose only//

#include <bits/stdc++.h>

using namespace std;

const int INF = 2000000007;

long long int mxsum[300001];
long long int mxdif[300001];
long long int mnsum[300001];
long long int mndif[300001];

pair<long long int,long long int> a[100001];

void build(int v,int l,int r)
{
	if(l == r)
	{
		long long int x = a[l].first;
		long long int y = a[l].second;
		mxsum[v] = x+y;
		mxdif[v] = x-y;
		mnsum[v] = x+y;
		mndif[v] = x-y;
	}
	else
	{
		int mid = (l+r)/2;
		build(2*v,l,mid);
		build(2*v+1,mid+1,r);
		mxsum[v] = max(mxsum[2*v+1], mxsum[2*v]);
		mxdif[v] = max(mxdif[2*v+1], mxdif[2*v]);
		mnsum[v] = min(mnsum[2*v+1], mnsum[2*v]);
		mndif[v] = min(mndif[2*v+1], mndif[2*v]);
	}
}

void update(int v,int l,int r,int pos,long long int x,long long int y)
{
	if(l == r)
	{
		a[l] = make_pair(x,y);
		mxsum[v] = x+y;
		mxdif[v] = x-y;
		mnsum[v] = x+y;
		mndif[v] = x-y;
	}
	else
	{
		int mid = (l+r)/2;
		if(pos <= mid)
		{
			update(2*v,l,mid,pos,x,y);
		}
		else
		{
			update(2*v+1,mid+1,r,pos,x,y);
		}
		
		mxsum[v] = max(mxsum[2*v],mxsum[2*v+1]);
		mxdif[v] = max(mxdif[2*v],mxdif[2*v+1]);
		mnsum[v] = min(mnsum[2*v],mnsum[2*v+1]);
		mndif[v] = min(mndif[2*v],mndif[2*v+1]);
	}
}

pair<long long int,long long int> get_max(int v,int ll,int rr,int l,int r)
{
	if(l > rr || r < ll)
	{
		return make_pair(-INF,-INF);
	}
	
	if(l <= ll && rr <= r)
	{
		return make_pair(mxsum[v],mxdif[v]);
	}
	
	int mid = (ll+rr)/2;
	
	pair<long long int,long long int> L = get_max(2*v,ll,mid,l,r);
	pair<long long int,long long int> R = get_max(2*v+1,mid+1,rr,l,r);
	
	return make_pair(max(L.first,R.first),max(L.second,R.second));
}

pair<long long int,long long int> get_min(int v,int ll,int rr,int l,int r)
{
	if(l > rr || r < ll)
	{
		return make_pair(INF,INF);
	}
	
	if(l <= ll && rr <= r)
	{
		return make_pair(mnsum[v],mndif[v]);
	}
	
	int mid = (ll+rr)/2;
	
	pair<long long int,long long int> L = get_min(2*v,ll,mid,l,r);
	pair<long long int,long long int> R = get_min(2*v+1,mid+1,rr,l,r);
	
	return make_pair(min(L.first,R.first),min(L.second,R.second));
}


int main()
{
	int n;
	int m;
	cin >> n;
	
	for(int i = 1;i <= n;i++)
	{
		scanf("%lld%lld",&a[i].first,&a[i].second);
	}
	
	build(1,1,n);
	
	cin >> m;
	
	for(int i = 0;i < m;i++)
	{
		char c;
		
		scanf("\n%c",&c);
		if(c == 'U')
		{
			int i;
			long long int nx;
			long long int ny;
			scanf("%d%lld%lld",&i,&nx,&ny);
			++i;
			update(1,1,n,i,nx,ny);
		}
		else
		{
			int l;
			int r;
			scanf("%d%d",&l,&r);
			++l;
			++r;
			pair<int,int> mx = get_max(1,1,n,l,r);
			pair<int,int>mn = get_min(1,1,n,l,r);
			
			long long ans = max((1ll*mx.first-1ll*mn.first),(1ll*mx.second-1ll*mn.second));
			printf("%lld\n",ans);
		}
	}
	return 0;
}