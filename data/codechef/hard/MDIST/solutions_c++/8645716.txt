#include <stdio.h>
#include <string.h>
#define SET(p) memset(p, -1, sizeof(p))
#define READ freopen("input.cpp", "r", stdin);
#define WRITE(f) freopen(f, "w", stdout)
#define getcx getchar_unlocked
#define INF 2000000009
using namespace std;

inline int fi (){//fast input function
    register int c = getcx();
    int x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = getcx());
    if(c=='-') {neg=1;c=getcx();}
    for(;c>47 && c<58;c = getcx()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
    return x;
}


template< class T > T _max(T a, T b) { return (!(a < b) ? a : b); }
template< class T > T _min(T a, T b) { return ((a < b) ? a : b); }

const int MX = 1e5;
long long int a[4][2*MX][2];
// 0:x+y  = W
// 1:-x+y  = W
// 2:x-y = W
// 3:-x-y = W
int n;

void build(int j){
	for (int s = n-1; s>0; --s)
	{
		a[j][s][0]  = _min( a[j][2*s][0]  , a[j][(2*s)+1][0] ); //min node	
		a[j][s][1]  = _max( a[j][2*s][1]  , a[j][(2*s)+1][1] ); // max node
	}
}



void modify(int j,int p,int x,int y){
	p+=n;
	int sx,sy;
	if(j<2) sy=1; else sy = -1;
	if(j&1) sx=-1; else sx = 1;
	a[j][p][0] = sx*x + sy*y; 
	a[j][p][1] = sx*x + sy*y; 
	// printf("(%d),(%d) \n",sx,sy);
	
	for (; p>1; p>>=1)
	{
		a[j][p>>1][0]  = _min(a[j][p][0],a[j][p^1][0]); //min node	
		a[j][p>>1][1]  = _max(a[j][p][1],a[j][p^1][1]); // max node
	}
}

long long int query(int i,int l,int r){
	long long int minz= INF,maxz=-INF;

	for (l+=n,r+=n; l<r; l>>=1,r>>=1)
	{
		if (l&1)
		{
			minz = _min(minz,a[i][l][0]);
			maxz = _max(maxz,a[i][l][1]);
			// diff += a[i][l][1]-a[i][l][0];
			l++;

		}
		if (r&1)
		{
			r--;
			minz = _min(minz,a[i][r][0]);
			maxz = _max(maxz,a[i][r][1]);

		}

	}
	// printf("%d %d ",maxz,minz);
	return maxz-minz;
}





int main() {
	// READ
	int sx,sy,x,y,p;
	scanf("%d",&n);
	
	for (p = 0; p < n; ++p)
	{
		scanf("%d",&x);
		scanf("%d",&y);
		for (int i = 0; i < 4; ++i)
		{
			if(i<2) sy=1; else sy = -1;
			if(i&1) sx=-1; else sx = 1;
			a[i][p+n][0] = sx*x + sy*y; 
			a[i][p+n][1] = sx*x + sy*y;
			// printf(" %d,%d ",a[i][p+n][0],a[i][p+n][1] ); 
		}
		// printf("\n");
	}

	build(0);
	build(1);
	build(2);
	build(3);
	// printf("\n");

	
	// for (int p = 0; p < 2*n; ++p)
	// {
	// 	for (int i = 0; i < 4; ++i)
	// 	{
	// 		if(i<2) sy=1; else sy = -1;
	// 		if(i&1) sx=-1; else sx = 1;
	// 		// a[i][p][0] = sx*x + sy*y; 
	// 		// a[i][p][1] = sx*x + sy*y;
	// 		printf("%d,%d \t",a[i][p][0],a[i][p][1] ); 
	// 	}
	// 	printf("\n");
	// }

	// printf("\n");

	int q;
	scanf("%d\n",&q);
	// printf("%d\n",q);
	char c;
	while(q--){
		scanf("%c",&c);
		// printf("%c ",c);
		if (c=='U')
		{
			scanf("%d",&p);
			scanf("%d",&x);
			scanf("%d\n",&y);
			for (int i = 0; i < 4; ++i)
			{
				modify(i,p,x,y);
			}
			// printf("%d %d %d\n",p,x,y );
		}else{
			scanf("%d",&x);
			scanf("%d\n",&y);
			// printf("%d %d\n",x,y );
			long long int bogie=-INF;
			for (int i = 0; i < 4; ++i)
			{
				bogie = _max(bogie,query(i,x,y+1));
				// printf("\n");
			}
			printf("%lld\n",bogie);
		}

	}

	return 0;
}
