#include <iostream>
#include <cstdio>
#include <vector>
using namespace std;

typedef long long ll;

const int MAX = 100005;

struct Point{
    int x, y;
    Point(){
    }

    Point(int x, int y) {
        this->x = x;
        this->y = y;
    }

    friend std::ostream& operator <<(ostream &o, Point &p) {
        o << "{" << p.x << ", " << p.y << "}";
    }
};

struct node {
    ll maxD ;
    ll maxP[4], minP[4];
    node() {
        maxD = 0;
    }

    node (Point p) {
        maxD = 0;
        ll x = p.x, y = p.y;
        maxP[0] = minP[0] = x+y;
        maxP[1] = minP[1] = -x+y;
        maxP[2] = minP[2] = x-y;
        maxP[3] = minP[3] = -x-y;
    }

    friend std::ostream& operator <<(ostream &o, node &p) {
        o << "{";
        for (int i = 0; i < 4; i++) {
            o << "{" << p.maxP[i] << "," << p.minP[i]  << "}, " ;
        }
        o << p.maxD;
        o << "}" << endl;
        return o;
    }
};

node merge(node l, node r) {
    node m;
    for (int i = 0; i < 4; i++) {
        m.maxP[i] = max(l.maxP[i], r.maxP[i]);
        m.minP[i] = min(l.minP[i], r.minP[i]);
    }
    m.maxD = 0;
    for (int i = 0; i < 4; i++) {
        m.maxD = max(m.maxD, m.maxP[i]-m.minP[i]);
    }
    return m;
}

node st[4*MAX];

node query(int n, int ll, int rl, int ql, int qr) {
    if (ql <= ll && qr >= rl) {
        return st[n];
    } else {
        int mid = (ll+rl)/2;
        if (qr <= mid) {
            return query(2*n+1, ll, mid, ql, qr);
        } else if (ql > mid) {
            return query(2*n+2, mid+1, rl , ql, qr);
        } else {
            node l = query(2*n+1, ll, mid , ql, qr);
            node r = query(2*n+2, mid+1, rl , ql, qr);
            node m = merge(l, r);
            return m;
        }
    }
}

node update(int n, int ll, int rl, int p, Point q) {
    if (p == ll && ll == rl) {
        st[n] = node(q);
        return st[n];
    } else if (p > rl or p < ll) {
        return st[n];
    } else {
        int mid = (ll+rl)/2;
        node l = update(2*n+1, ll, mid, p, q);
        node r = update(2*n+2, mid+1, rl , p, q);
        st[n] = merge(l, r);
        return st[n];
    }
}

int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        ll x, y;
        scanf("%lld%lld", &x, &y);
        update(0, 0, n-1, i, Point(x, y));
    }

    int q;
    scanf("%d", &q);
    while (q--) {
        char ch[2];
        scanf("%s", ch);
        if (ch[0] == 'U') {
            int idx;
            scanf("%d", &idx);
            ll x, y;
            scanf("%lld%lld", &x, &y);
            update(0, 0, n-1, idx, Point(x, y));
        } else {
            int l, r;
            scanf("%d%d", &l, &r);
            node x = query(0, 0, n-1, l, r);
            printf("%lld\n", x.maxD);
        }
    }
}
