#include<bits/stdc++.h>

#define fr first
#define se second
using namespace std;

pair<long long,long long> p[1000005];
long long  segtree1mx[1000005+1];
long long segtree2mx[1000005+1];
long long segtree1mn[1000005+1];
long long segtree2mn[1000005+1];
int n;
inline void show() {
 for(int i=0;i<n;i++) {
        cout<<p[i].fr+p[i].se<<" ";
        //cout<<segtree1mx[i]<<" " ;
    }
        cout<<endl;
     for(int i=0;i<2*n;i++) {
        //cout<<p[i].fr+p[i].se<<" ";
        cout<<segtree1mx[i]<<" " ;
    }

        cout<<endl;
    for(int i=0;i<n;i++) {
        cout<<p[i].fr-p[i].se<<" ";
        //cout<<segtree1mx[i]<<" " ;
    }
        cout<<endl;
    for(int i=0;i<2*n;i++) {
        cout<<segtree2mx[i]<<" " ;
    }
        cout<<endl;
        for(int i=0;i<n;i++) {
        cout<<p[i].fr+p[i].se<<" ";
        //cout<<segtree1mx[i]<<" " ;
    }cout<<endl;
    for(int i=0;i<2*n;i++) {
        cout<<segtree1mn[i]<<" " ;
    }
    cout<<endl;
     for(int i=0;i<n;i++) {
        cout<<p[i].fr-p[i].se<<" ";
        //cout<<segtree1mx[i]<<" " ;
    }
        cout<<endl;
    for(int i=0;i<2*n;i++) {
        cout<<segtree2mn[i]<<" " ;
    }
    cout<<endl;
}
inline void build(int node,int rs,int re) {

    if(rs>re)
	return ;
    if(rs==re) {
	segtree1mx[node]=p[rs].fr+p[rs].se;
	segtree1mn[node]=p[rs].fr+p[rs].se;
	segtree2mx[node]=p[rs].fr-p[rs].se;
        segtree2mn[node]=p[rs].fr-p[rs].se;
	return ;
    }
    build(2*node,rs,(rs+re)/2);
    build(2*node+1,(rs+re)/2+1,re);
    segtree1mx[node]=max(segtree1mx[2*node],segtree1mx[2*node+1]);
    segtree1mn[node]=min(segtree1mn[2*node],segtree1mn[2*node+1]);
    segtree2mx[node]=max(segtree2mx[2*node],segtree2mx[2*node+1]);
    segtree2mn[node]=min(segtree2mn[2*node],segtree2mn[2*node+1]);
}
inline long long querymx1(int node,int rs,int re,int qs,int qe) {

    if(qs<=rs && re<=qe) {
	return segtree1mx[node];
    }
    if(re<qs || rs>qe) {
	return INT_MIN;
    }
    long long temp1,temp2;
    temp1=querymx1(2*node,rs,(rs+re)/2,qs,qe);
    temp2=querymx1(2*node+1,(rs+re)/2+1,re,qs,qe);
    return max(temp1,temp2);
}
inline long long querymx2(int node,int rs,int re,int qs,int qe) {

    if(qs<=rs && re<=qe) {
        return segtree2mx[node];
    }
    if(re<qs || rs>qe) {
        return INT_MIN;
    }
    long long  temp1,temp2;
    temp1=querymx2(2*node,rs,(rs+re)/2,qs,qe);
    temp2=querymx2(2*node+1,(rs+re)/2+1,re,qs,qe);
    return max(temp1,temp2);
}
inline long long  querymn1(int node,int rs,int re,int qs,int qe) {

    if(qs<=rs && re<=qe) {
        return segtree1mn[node];
    }
    if(re<qs || rs>qe) {
        return INT_MAX;
    }
    long long temp1,temp2;
    temp1=querymn1(2*node,rs,(rs+re)/2,qs,qe);
    temp2=querymn1(2*node+1,(rs+re)/2+1,re,qs,qe);
    return min(temp1,temp2);
}
inline long long querymn2(int node,int rs,int re,int qs,int qe) {
    if(qs<=rs && re<=qe) {
        return segtree2mn[node];
    }
    if(re<qs || rs>qe) {
        return INT_MAX;
    }
    long long temp1,temp2;
    temp1=querymn2(2*node,rs,(rs+re)/2,qs,qe);
    temp2=querymn2(2*node+1,(rs+re)/2+1,re,qs,qe);
    return min(temp1,temp2);
}
inline void update(int node,int rs,int re,int idx){
    if(rs==re) {
	segtree1mx[node]=p[rs].fr+p[rs].se;
        segtree1mn[node]=p[rs].fr+p[rs].se;
        segtree2mx[node]=p[rs].fr-p[rs].se;
        segtree2mn[node]=p[rs].fr-p[rs].se;
        return ;
    }
    int mid=(rs+re)/2;
    if(idx<=mid) {
	update(2*node,rs,mid,idx);
    }
    else {
	update(2*node+1,mid+1,re,idx);
    }
    segtree1mx[node]=max(segtree1mx[2*node],segtree1mx[2*node+1]);
    segtree1mn[node]=min(segtree1mn[2*node],segtree1mn[2*node+1]);
    segtree2mx[node]=max(segtree2mx[2*node],segtree2mx[2*node+1]);
    segtree2mn[node]=min(segtree2mn[2*node],segtree2mn[2*node+1]);
}
int main() {
    scanf("%d",&n);
    for(int i=0;i<n;i++) {
	scanf("%lld%lld",&p[i].fr,&p[i].se);
    }
    build(1,0,n-1);
	//show();
    int q;scanf("%d",&q);
    char cs[2];
    while(q--) {
	scanf("%s",cs);
	if(cs[0]=='U') {
	    int x,y,z;
	    scanf("%d%d%d",&x,&y,&z);
	    p[x].fr=y;p[x].se=z;
	    update(1,0,n-1,x);
	}
	else {
	    int l,r;scanf("%d%d",&l,&r);
	    long long ans1,ans2,ans3,ans4;
	    //show();
	   // cout<<querymx1(1,0,n-1,l,r)<<endl;
	   // cout<<querymn1(1,0,n-1,l,r)<<endl;
	   // cout<<querymx2(1,0,n-1,l,r)<<endl;
	   // cout<<querymn2(1,0,n-1,l,r)<<endl;
	    ans1=(querymx1(1,0,n-1,l,r)-querymn1(1,0,n-1,l,r));
	    ans2=(querymx2(1,0,n-1,l,r)-querymn2(1,0,n-1,l,r));
	//ans3=(querymx1(1,0,n-1,l,r)-querymn2(1,0,n-1,l,r));
        //ans4=(querymx2(1,0,n-1,l,r)-querymn1(1,0,n-1,l,r));
	    printf("%lld\n",max(ans1,ans2));
	}
    }
}
