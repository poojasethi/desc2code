#include<bits/stdc++.h>

using namespace std;

#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))

#define REP(i,a,b) for(LL i=a;i<b;i++)
#define rep(i,b) for(LL i=0;i<b;i++)
#define rep1(i,b) for(LL i=1;i<=b;i++)

#define pdn(n) printf("%d\n",n)
#define pln(n) printf("%ld\n",n)
#define plln(n) printf("%lld\n",n)
#define pn(n) printf("\n")
#define psn(n) printf("%s\n",n)

#define s2ll(n1,n2) scanf("%lld%lld",&n1,&n2)
#define sll(n) scanf("%lld",&n)
#define sl(n) scanf("%ld",&n)
#define sd(n) scanf("%d",&n)
#define ss(n) scanf("%s",n)

#define ass(n,a,b) assert(n>=a&&n<=b)

typedef long long LL;

#define MOD 1000000007
#define mx 1600005
#define INF 2000000009
LL mpow(LL a, LL n)
{LL ret=1;LL b=a;while(n) {if(n&1)
ret=(ret*b)%MOD;b=(b*b)%MOD;n>>=1;}
return (LL)ret;}

LL gcd(LL a,LL b)
{
    if(b==0) return a;
    else return(gcd(b,a%b));
}

pair<LL,LL> s[4][mx];
LL a[4][mx];

void buildST(LL node, LL low , LL high)
{
    LL mid=(low+high)/2, l=((2*node) + 1) , r= ((2*node) + 2 ),i;

    if(low==high)
    {
        for(i=0;i<4;i++)
        {
            s[i][node].first = s[i][node].second = a[i][low];
        }
        return;
    }
    buildST(l, low, mid);
    buildST(r, mid+1 , high);

    for(i=0;i<4;i++)
    {
        s[i][node].first = max(s[i][l].first, s[i][r].first);
        s[i][node].second = min(s[i][l].second, s[i][r].second);
    }
}

void updateST(LL node, LL low , LL high, LL pos)
{
    LL mid=(low+high)/2, l = 2*node + 1 , r = 2*node + 2,i;

    if(low==high)
    {
        for(i=0;i<4;i++)
        {
            s[i][node].first = s[i][node].second = a[i][low];
        }
        return;
    }
    else if(pos<=mid)
    {
        updateST(l,low,mid,pos);
    }
    else
        updateST(r,mid+1,high,pos);

    for(i=0;i<4;i++)
    {
        s[i][node].first=max(s[i][l].first, s[i][r].first);
        s[i][node].second=min(s[i][l].second, s[i][r].second);
    }
}

pair<LL, LL> query(LL node, LL low, LL high, LL i , LL j, LL quad)
{
    LL mid=(low+high)/2, l= 2*node + 1 , r= 2*node + 2;
    pair<LL , LL> r1, r2;
    if(i>high || j<low)
        return make_pair(-INF, INF);
    if(i<=low && j>=high)
        return s[quad][node];

    r1=query(l,low,mid,i,j,quad);
    r2=query(r,mid+1,high,i,j,quad);

    return make_pair(max(r1.first, r2.first) , min(r1.second, r2.second));
}
int main()
{

    LL t,n,i,x,y,sign[4][2]={{1,1},{1,-1},{-1,1},{-1,-1}},q,ans=0,j;
    char c;
    sll(n);

    rep(i,n)
    {
        s2ll(x,y);
        for(j=0;j<4;j++)
        a[j][i]=(sign[j][0]*x) + (sign[j][1]*y);
    }
    buildST(0,0,n-1);
    sll(q);
    pair<LL , LL> temp;
    while(q--)
    {
        scanf(" %c ",&c);
        if(c == 'U')
        {
            sll(i);
            s2ll(x,y);

            for(j=0;j<4;j++)
            a[j][i]=sign[j][0]*x + sign[j][1]*y;

            updateST(0,0,n-1,i);

        }
        else
        {
            s2ll(x,y);
            ans=-INF;
            for(i=0;i<4;i++)
            {
             temp = query(0,0,n-1,x,y,i);
             ans = max((temp.first-temp.second), ans);
            }
            cout<<ans<<"\n";
        }
    }

    return 0;
}
