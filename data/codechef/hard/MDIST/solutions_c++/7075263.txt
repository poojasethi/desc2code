#include<iostream>
#include<limits.h>
using namespace std;

long long tree[300000][2][2],Ar[100005][2];

void buildtree(int node,int st,int ed)
{
    if(st>ed) return;
    if(st==ed)
    {
        tree[node][0][0]=Ar[st][0]+Ar[st][1];
        tree[node][0][1]=Ar[st][0]+Ar[st][1];
        tree[node][1][0]=Ar[st][0]-Ar[st][1];
        tree[node][1][1]=Ar[st][0]-Ar[st][1];
        return;
    }

    buildtree(2*node,st,(st+ed)/2);
    buildtree(2*node+1,(st+ed)/2+1,ed);

    tree[node][0][0]=max(tree[2*node][0][0],tree[2*node+1][0][0]);
    tree[node][0][1]=min(tree[2*node][0][1],tree[2*node+1][0][1]);
    tree[node][1][0]=max(tree[2*node][1][0],tree[2*node+1][1][0]);
    tree[node][1][1]=min(tree[2*node][1][1],tree[2*node+1][1][1]);

}


void update(int node,int st,int ed,int ind,long long x,long long y)
{
    if(st>ed||st>ind||ed<ind) return;

    if(st==ind&&ind==ed)
    {
        tree[node][0][0]=x+y;
        tree[node][0][1]=x+y;
        tree[node][1][0]=x-y;
        tree[node][1][1]=x-y;
        return;
    }

    update(2*node,st,(st+ed)/2,ind,x,y);
    update(2*node+1,(st+ed)/2+1,ed,ind,x,y);

    tree[node][0][0]=max(tree[2*node][0][0],tree[2*node+1][0][0]);
    tree[node][0][1]=min(tree[2*node][0][1],tree[2*node+1][0][1]);
    tree[node][1][0]=max(tree[2*node][1][0],tree[2*node+1][1][0]);
    tree[node][1][1]=min(tree[2*node][1][1],tree[2*node+1][1][1]);
}

long long temp[100000][2][2],cnt;

void query(int node,int st,int ed,int l,int r)
{
    if(st>ed||st>r||ed<l) return;
    if(l<=st&&ed<=r)
    {
        temp[cnt][0][0]=tree[node][0][0];
        temp[cnt][0][1]=tree[node][0][1];
        temp[cnt][1][0]=tree[node][1][0];
        temp[cnt][1][1]=tree[node][1][1];
        cnt++;
        return;
    }

    query(2*node,st,(st+ed)/2,l,r);
    query(2*node+1,(st+ed)/2+1,ed,l,r);
}
int main()
{
    int N;
    cin>>N;
    //cout<<INT_MAX<<"\n";
    for(int i=1;i<=N;i++)
        cin>>Ar[i][0]>>Ar[i][1];

    buildtree(1,1,N);

    int Q;
    cin>>Q;
    while(Q--)
    {
        char ch;
        cin>>ch;
        if(ch=='U')
        {
            int ind;
            long long x,y;
            cin>>ind>>x>>y;
            ind++;
            update(1,1,N,ind,x,y);
        }
        else
        {
            int l,r;
            cin>>l>>r;
            l++,r++;
            cnt=0;
            query(1,1,N,l,r);
            long long f1,f2,f3,f4;
            f1=temp[0][0][0];
            f2=temp[0][0][1];
            f3=temp[0][1][0];
            f4=temp[0][1][1];
            for(int i=1;i<cnt;i++)
            {
                f1=max(f1,temp[i][0][0]);
                f2=min(f2,temp[i][0][1]);
                f3=max(f3,temp[i][1][0]);
                f4=min(f4,temp[i][1][1]);
            }
            cout<<max(f1-f2,f3-f4)<<"\n";
        }
    }
    return 0;
}
