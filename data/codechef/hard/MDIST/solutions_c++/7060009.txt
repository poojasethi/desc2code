#include<bits/stdc++.h>
using namespace std;
#define S(x) scanf("%d",&x)
#define P(x) printf("%d",x)
#define all(c) c.begin(), c.end()
#define MOD 1000000007
#define MAX  (ll)1223372036;
#define MIN -(ll)1223372036; 
#define MAX1 800080
#define ll long long
#define mp make_pair
#define pb push_back
typedef pair<int,int> pp;
typedef pair<ll,ll> ppl;
ll a[MAX1];
ll b[MAX1];
ll tmax1[MAX1] , tmax2[MAX1] ,tmin1[MAX1] ,tmin2[MAX1];
void update(int ss, int se, int pos, int index)
{
	if(pos<ss || pos>se)
		return ;
	if(ss==se && ss==pos)
	{
		tmax1[index] = a[ss] + b[ss];
		tmax2[index] =	a[ss] - b[ss];
		tmin1[index] = a[ss] + b[ss];
		tmin2[index]= a[ss] - b[ss];
		return ;
	}
	int mid= (ss+se)/2;
	update(ss,mid, pos,2*index+1);
	update(mid+1 ,se,pos,2*index+2);
	tmax1[index]= max(tmax1[2*index+1] , tmax1[2*index+2]);
	tmax2[index] = max(tmax2[2*index+1] , tmax2[2*index+2]);
	tmin1[index] = min(tmin1[2*index+1] , tmin1[2*index+2]);
	tmin2[index] = min(tmin2[2*index+1] , tmin2[2*index+2]);	
}
ll query1(int qs, int qe, int ss, int se, int index) 
{
	if(qe<ss || qs>se)
		return (ll)MIN;
	if(ss>=qs && se<=qe)
		return tmax1[index];
	int mid = ss + (se-ss)/2;
	ll q1 = query1(qs, qe, ss,mid, 2*index+1);
	ll q2 = query1(qs,qe, mid+1, se,2*index+2);
	return max(q1,q2);
}
ll query2(int qs, int qe, int ss, int se, int index) 
{
	if(qe<ss || qs>se)
		return (ll)MIN;
	if(ss>=qs && se<=qe)
		return tmax2[index];
	int mid = ss+(se-ss)/2;
	ll q1 = query2(qs, qe, ss,mid, 2*index+1);
	ll q2 = query2(qs,qe ,mid+1, se,2*index+2);
	return max(q1,q2);
}
ll query3(int qs, int qe, int ss, int se, int index) 
{
	if(qe<ss || qs>se)
		return (ll)MAX;
	if(ss>=qs && se<=qe)
		return tmin1[index];
	int mid = ss + (se-ss)/2;
	ll q1 = query3(qs, qe, ss,mid, 2*index+1);
	ll q2 = query3(qs,qe, mid+1, se,2*index+2);
	return min(q1,q2);
}
ll query4(int qs, int qe, int ss, int se, int index) 
{
	if(qe<ss || qs>se)
		return (ll)MAX;
	if(ss>=qs && se<=qe)
		return tmin2[index];
	int mid = ss + (se-ss)/2;
	ll q1 = query4(qs, qe, ss,mid, 2*index+1);
	ll q2 = query4(qs,qe,  mid+1, se,2*index+2);
	return min(q1,q2);
}
void constseg(int ss, int se,int index)
{
	if(ss==se)
	{
		tmax1[index] = a[ss] + b[ss];
		tmax2[index] =	a[ss] - b[ss];
		tmin1[index] = a[ss] + b[ss];
		tmin2[index]= a[ss] - b[ss];
		return ;
	}
	int mid = (ss+se)/2;
	constseg(ss, mid,2*index+1);
	constseg(mid+1 ,se,2*index+2);
	tmax1[index]= max(tmax1[2*index+1] , tmax1[2*index+2]);
	tmax2[index] = max(tmax2[2*index+1] , tmax2[2*index+2]);
	tmin1[index] = min(tmin1[2*index+1] , tmin1[2*index+2]);
	tmin2[index] = min(tmin2[2*index+1] , tmin2[2*index+2]);
	return ;
}
int main()
{
	int n,q;
	int l , r,pos;
	ll x,y;
	ll finalans ;
	char ch;
	cin>>n;
	for (int i = 0; i < n; ++i)
		cin>>a[i]>>b[i];
	constseg( 0 , n -1, 0);
	cin>>q;
	while(q--)
	{
		cin>>ch;
		if(ch=='U')
		{
			S(pos);cin>>x>>y;
			a[pos] = x;
			b[pos]= y;
			update(0,  n-1, pos, 0);		
		}
		else
		{
			S(l);S(r);
			ll ans1 = query1(l , r, 0, n -1,0);
			ll ans2 = query2(l ,r,0,n-1,0);
			ll min1 = query3(l , r, 0, n -1,0);
			ll min2 = query4(l , r, 0,n-1, 0 );
			finalans = max(abs(ans1 - min1) , abs(ans2 - min2));
			printf("%lld\n",finalans );
		}
	}
	return 0;
}