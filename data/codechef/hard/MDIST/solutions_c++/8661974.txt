#include <bits/stdc++.h>
#define getcx getchar_unlocked

#ifdef WIN32
    inline char getchar_unlocked(){return getchar();}
    inline void putchar_unlocked(char x){putchar(x);}
#endif // WINDOWS
using namespace std;

typedef pair<int,int> ii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ii> vii;
#define sz(a) int((a).size())
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define _(x) memset(x,0,sizeof(x))
#define all(c) (c).begin(),(c).end()
#define foreach(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define forall(i,a,b) for(int i=a;i<(b);i++)
#define forb(i,a,b) for(int i=a;i>=(b);i--)
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define PI 3.1415926535897932384626
inline void pisz(int n) { printf("%d\n",n); }
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define printA(a,L,R) forall(i,L,R) cout << a[i] << (i==R?'\n':' ')
#define printV(a) printA(a,0,a.size()-1)
#define mn(a,b) (a>b:b?a)
#define mx(a,b) (a>b:a?b)

inline int fi (){//fast input function
    register int c = getcx();
    int x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = getcx());
    if(c=='-') {neg=1;c=getcx();}
    for(;c>47 && c<58;c = getcx()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
    return x;
}

inline void fo(int a) {
	char snum[20];
	int i=0;
    int c =a;
	do{
		snum[i++]=a%10+48;
		a=a/10;
	}
	while(a!=0);
	i=i-1;
    if(c<0)
        putchar_unlocked('-');
	while(i>=0)
	putchar_unlocked(snum[i--]);
	putchar_unlocked('\n');
}

void init(){
    freopen("MDIST.in","r",stdin);
    //freopen("out.txt","w",stdout);
}

#define SIZE 100005
int d1[2][2*SIZE]={0};
int d2[2][2*SIZE]={0};
int n;

void build_trees(){
    forb(i,n-1,1)
        d1[0][i] = min(d1[0][i<<1], d1[0][i<<1|1]);
    forb(i,n-1,1)
        d1[1][i] = max(d1[1][i<<1], d1[1][i<<1|1]);
    forb(i,n-1,1)
        d2[0][i] = min(d2[0][i<<1], d2[0][i<<1|1]);
    forb(i,n-1,1)
        d2[1][i] = max(d2[1][i<<1], d2[1][i<<1|1]);
}

void update_trees(int pos, int x, int y){
    int p = pos;
    for (d1[0][p += n] = x+y; p > 1; p >>= 1)
        d1[0][p>>1] = min(d1[0][p], d1[0][p^1]);
    p = pos;
    for (d1[1][p += n] = x+y; p > 1; p >>= 1)
        d1[1][p>>1] = max(d1[1][p], d1[1][p^1]);
    p = pos;
    for (d2[0][p += n] = x-y; p > 1; p >>= 1)
        d2[0][p>>1] = min(d2[0][p], d2[0][p^1]);
    p = pos;
    for (d2[1][p += n] = x-y; p > 1; p >>= 1)
        d2[1][p>>1] = max(d2[1][p], d2[1][p^1]);
}

int q1_min(int l, int r) {
  int res = INT_MAX,*t=d1[0];
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = min(res,t[l++]);
    if (r&1) res = min(res,t[--r]);
  }
  return res;
}
int q1_max(int l, int r) {
  int res = INT_MIN,*t=d1[1];
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = max(res,t[l++]);
    if (r&1) res = max(res,t[--r]);
  }
  return res;
}
int q2_min(int l, int r) {
  int res = INT_MAX,*t=d2[0];
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = min(res,t[l++]);
    if (r&1) res = min(res,t[--r]);
  }
  return res;
}
int q2_max(int l, int r) {
  int res = INT_MIN,*t=d2[1];
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) res = max(res,t[l++]);
    if (r&1) res = max(res,t[--r]);
  }
  return res;
}

int main()
{
    int x,y;
    char u;
    n = fi();
    forall(i,n,2*n){
        x=fi(); y=fi();
        d1[0][i] = x+y;
        d2[0][i] = x-y;
        d1[1][i] = x+y;
        d2[1][i] = x-y;
    }

    build_trees();

    int q = fi();

    forall(i,0,q){
        scanf("%c", &u);

        if(u=='U'){
            int loc = fi();
            x=fi();y =fi();
            update_trees(loc,x,y);
        } else if(u=='Q'){
            x=fi(); y=fi();
            y++;
            printf("%lld\n", max((ll)q1_max(x,y)-q1_min(x,y),
                               (ll)q2_max(x,y)-q2_min(x,y)));
        }
    }


    return 0;
}
