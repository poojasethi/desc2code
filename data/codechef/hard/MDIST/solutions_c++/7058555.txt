#include<iostream>
#include<stdio.h>
#include<vector>
#include<cmath>
#include<stack>
#include<queue>
#include<cstdlib>
#include<limits.h>
#include<cstring>
#define ll long long 
using namespace std;
struct SegmentTree
{
	ll minp;//min(x+y)
	ll maxp;//max(x+y)
	ll mins;//min(x-y)
	ll maxs;//max(x-y)
};
ll a[100010],b[100010];
SegmentTree st[300001];
int getMid(int s,int e)
{
	return s+(e-s)/2;
}
inline ll max(ll x,ll y)
{
	if(x>y)
	return x;
	return y;
}
inline ll min(ll x,ll y)
{
	if(x<y)
	return x;
	return y;
}
SegmentTree merge_node(SegmentTree l,SegmentTree r)
{
	SegmentTree temp;
	temp.minp=min(l.minp,r.minp);
	temp.maxp=max(l.maxp,r.maxp);
	temp.mins=min(l.mins,r.mins);
	temp.maxs=max(l.maxs,r.maxs);
	return temp;
}
void build_tree(int ss,int se,int i)
{
	if(ss==se)
	{
		st[i].minp=a[ss];
		st[i].maxp=a[ss];
		st[i].mins=b[ss];
		st[i].maxs=b[ss];
		return;
	}
	int mid=getMid(ss,se);
	build_tree(ss,mid,2*i+1);
	build_tree(mid+1,se,2*i+2);
	st[i]=merge_node(st[2*i+1],st[2*i+2]);
}
void update_tree(int ss,int se,int i,int ci)
{
	if(i<ss||i>se)
	return;
	if(ss==se&&ss==i)
	{
		st[ci].minp=a[i];
		st[ci].maxp=a[i];
		st[ci].mins=b[i];
		st[ci].maxs=b[i];
		return;
	}
	int mid=getMid(ss,se);
	update_tree(ss,mid,i,2*ci+1);
	update_tree(mid+1,se,i,2*ci+2);
	st[ci]=merge_node(st[2*ci+1],st[2*ci+2]);
}
SegmentTree query_tree(int ss,int se,int qs,int qe,int i)
{
	if(qs<=ss && qe>=se)
	return st[i]; 
	if(se<qs||ss>qe)
	return st[300000];
	int mid=getMid(ss,se);
	return merge_node(query_tree(ss,mid,qs,qe,2*i+1),query_tree(mid+1,se,qs,qe,2*i+2));
}
int main()
{
	ll t,n,i,l,r,x,y,q;
	char ch;SegmentTree ans;
	scanf("%lld",&n);t=n;i=0;
	while(t--)
	{
		scanf("%lld %lld",&x,&y);
		a[i]=x+y;
		b[i]=x-y;
		i++;
	}
	build_tree(0,n-1,0);
	st[300000].minp=INT_MAX;
	st[300000].maxp=INT_MIN;
	st[300000].mins=INT_MAX;
	st[300000].maxs=INT_MIN;
	scanf("%lld",&q);
	while(q--)
	{
		cin>>ch;
		if(ch=='U')
		{
			scanf("%lld %lld %lld",&i,&x,&y);
			a[i]=x+y;
			b[i]=x-y;
			update_tree(0,n-1,i,0);
		}
		else
		{
			scanf("%lld %lld",&l,&r);
			if(l==r)
			{
				cout<<"0\n";
			}
			else
			{
				ans=query_tree(0,n-1,l,r,0);
				cout<<max(((ans.maxp)-(ans.minp)),((ans.maxs)-(ans.mins)))<<"\n";
			}
		}
	}
	return 0;
}
