Chef likes to play with trees a lot. This time, he has a rooted tree T consisting of N nodes labelled uniquely with the integers from {1, … N}. The node labelled 1 is the root of the tree. Each node in the given tree T stores a non-negative integer, initially all of which are zeros. Chef wants to perform 2 types of operations over the tree accurately and efficiently.

U X K: Update the subtree rooted at node X such that the the root X will have FK (the K^th Fibonacci number) added to it, all its children will have Fk+1 (the (K+1)^th Fibonacci number) added to them, and so on. More formally, any node in the subtree rooted at X will have (K+D)^th fibonacci number added to them, where D is the distance of the node from X.
Q X: Report the value stored at the node X.

Since the answer to each query can be very large, output it modulo 10^9 + 7.
NOTE:
FK denotes the K^th Fibonacci number, and the series is generated as follows:

FK = 1, if K ≤ 2 .
FK = FK-1 + FK-2, otherwise.


To know more about Fibonacci numbers, click here.


Input:
First line of input contains two integer N and M denoting the number of nodes in the tree T, and the number of queries to be processed, respectively. Next N-1 lines of input contain an integer each, where the integer in the i^th line denotes the parent of the (i+1)^th node. Each of the next M lines contains one of the 2 types of queries mentioned above.

Output:
For each operation of type Q, output the required answer modulo 10^9 + 7.

Constraints:

1 ≤ N, M, K ≤ 10^5
1 ≤ U, V, X ≤ N


Example
Input

5 10
1
1
3
3
Q 3
U 1 2
Q 2
Q 3
Q 4
Q 5
U 3 1
Q 3
Q 4
Q 5

Output

0
2
2
3
3
3
4
4

Explanation



