#include<bits/stdc++.h>
#define f first
#define s second

using namespace std;
typedef pair < int , int > ii;
typedef pair < int , ii > iii;

vector < int > Adj[100001];
vector < int > out;
vector < ii > arr;
vector <iii>updates;

int fib[2*100000+1];
int level[2*100000+1];
int val[2*100000+1];
int up1[2*100000+1];
int up2[2*100000+1];
int start_time[2*100000+1];
int end_time[2*100000+1];

int tame = -1;
const int mod = (int)1e9+7;

void ini()
{int i;fib[1]=1;for(i=2;i<=200000;++i)fib[i]=(fib[i-1]+fib[i-2])%mod;}

void dfs(int s)
{
    ++tame;
    start_time[s]=tame;
    for(vector < int >::iterator it =Adj[s].begin();it!=Adj[s].end();++it)
    {
        level[*it]=level[s]+1;
        dfs(*it);
    }
    ++tame;
    end_time[s]=tame;
}

void update(int u , int f2 , int f1)
{
    val[u] = ((val[u] + f2)%mod + up2[u])%mod;
    int temp = (f2 + f1)%mod;
    for( vector < int >::iterator it = Adj[u].begin() ; it!=Adj[u].end() ; ++it )
        update( *it, ( temp + (up1[u]+up2[u])%mod )%mod , (f2+up2[u])%mod  );
}

inline bool isin(int child , int par){return start_time[par]<=start_time[child] && end_time[child]<=end_time[par];}

void freeupdates(int n)
{
    memset(up1,0,sizeof(up1));
    memset(up2,0,sizeof(up2));

    for(int i=0;i<(int)updates.size();++i)
    {
        up2[updates[i].s.f]+=fib[updates[i].s.s];
        up2[updates[i].s.f]%=mod;
        up1[updates[i].s.f]+=fib[updates[i].s.s-1];
        up1[updates[i].s.f]%=mod;
    }

    update(1,0,0);//!CHECK HERE!!

    for(int i=0;i<(int)arr.size();++i)
    {
        int ans = val[arr[i].s];
        for(int j=0;j<(int)updates.size();++j)
        {
            if(  arr[i].f < updates[j].f &&  isin( arr[i].s , updates[j].s.f )    )
            {
                ans-=fib[ updates[j].s.s + level[arr[i].s] -level[updates[j].s.f]];
                ans%=mod;
            }
        }
        printf("%d\n",(ans+mod)%mod);
    }
}

int main()
{
//    ios::sync_with_stdio(0);
//    cin.tie(0);
    ini();

    int N , M , K , i , j , p ,l;
    char a;
    scanf("%d%d",&N,&M);
    for(i=2;i<=N;++i)
    {
        scanf("%d",&p);
        Adj[p].push_back(i);
    }
    dfs(1);
    int sze = sqrt(N);
    int x , k;

    for(i=0;i<M;++i)
    {
        scanf(" %c",&a);
        if(a=='U')
        {
            scanf("%d%d",&x,&k);
            updates.push_back(iii(i,make_pair(x,k)));
            if(updates.size()==sze)
            {
                freeupdates(N);
                updates.clear();
                arr.clear();
            }
        }
        else
        {
            scanf("%d",&x);
            arr.push_back(make_pair(i,x));
        }
    }
    freeupdates(N);
    
    return 0;
}
