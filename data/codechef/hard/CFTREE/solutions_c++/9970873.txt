#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 200005
#define NN 1025
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 1000000007
#define ln 2e9+1
#define cs 1331
#define Line pair < pair <ll, ll>, ll >
#define Pi pair < Pa , Pa >
#define Pa pair < ll, ll >

using namespace std;

int n, m, F[N], In[N], Out[N], cnt, __, H[N], Res[N], T[N], Tp[N], sq;
Pa Que[N];
vector < int > a[N];

void Plus(int &x, int y)
{
    x += y;
    if(x >= oo) x -= oo;
}

void DFS(int u)
{
    In[u] = ++__;
    for(int i=0; i<a[u].size(); i++)
    {
        int v = a[u][i];
        H[v] = H[u] + 1;
        DFS(v);
    }
    Out[u] = __;
}

void REBUILD(int u)
{
    Plus(Res[u], T[u]);
    for(int i=0; i<a[u].size(); i++)
    {
        int v = a[u][i];
        Plus(T[v], T[u]);
        Plus(T[v], Tp[u]);
        Plus(Tp[v], T[u]);
        REBUILD(v);
    }
}

bool CHECK_PAR(int u, int v)
{
    return In[v] >= In[u] && Out[v] <= Out[u];
}

int main()
{
    ios_base::sync_with_stdio(0);
   // filein("CFTREE.inp");   fileout("CFTREE.out");
    int u, k, v;
    char type;
    cin >> n >> m;
    F[1] = F[2] = 1;
    for(int i=3; i<N; i++)
        F[i] = (F[i-1] + F[i-2]) % oo;
    for(int i=2; i<=n; i++)
    {
        cin >> u;
        a[u].push_back(i);
    }
    sq = sqrt(m);
    DFS(1);

    for(int i=1; i<=m; i++)
    {
        cin >> type;
        if(type == 'U')
        {
            cin >> u >> k;
            Que[++cnt] = mp(u, k);
            Plus(T[u] , F[k]);
            Plus(Tp[u] , F[k-1]);
        }
        else
        {
            cin >> v;
            if(cnt >= sq)
            {
                REBUILD(1);
                for(int i=1; i<=n; i++)
                    T[i] = Tp[i] = 0;
                cnt = 0;
            }
            int ans = Res[v];
            for(int i=1; i<=cnt; i++)
            {
                int u = Que[i].f;
                int k = Que[i].s;
                if(CHECK_PAR(u, v))
                    Plus(ans , F[H[v]-H[u]+k]);
            }
            cout << ans << endl;
        }
    }
}
