#include<bits/stdc++.h>
#define ll long long
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
using namespace std;
#define N (int)(1e5+5)
ll MOD=1e9+7;
ll fibo[3*N];
struct node{
    ll x,y;
}tree[8*N];
vector<int> G[N];
int timer=1,off=N;
int st[N],ed[N],dep[N];
void dfs(int x,int p,int d){
    st[x]=timer;
    timer++;
    dep[x]=d;
    for(int i=0;i<G[x].size();i++){
        int to=G[x][i];
        if(to!=p)
        dfs(to,x,d+1);
    }
    ed[x]=timer-1;
}

void update(int i,int l,int r,int ql,int qr,int d,int kth){
    if(qr<l||ql>r)
        return;
    if(ql<=l&&r<=qr){
        tree[i].x+=fibo[off-d+kth];
        tree[i].y+=fibo[off-d+kth-1];
        tree[i].x%=MOD;
        tree[i].y%=MOD;
        return;
    }
    int mid=(l+r)>>1;
    update(2*i,l,mid,ql,qr,d,kth);
    update(2*i+1,mid+1,r,ql,qr,d,kth);
}
ll query(int i,int l,int r,int x,int d){
    if(x<l||x>r)
        return 0;
    if(l==x&&r==x){
        return (tree[i].x*fibo[off+d+1]+tree[i].y*fibo[off+d])%MOD;
    }
    int mid=(l+r)>>1;
    ll ans=query(2*i,l,mid,x,d)+query(2*i+1,mid+1,r,x,d)+(tree[i].x*fibo[d+off+1]+tree[i].y*fibo[d+off])%MOD;
    ans%=MOD;
    return ans;
}
int main(){
    ios_base::sync_with_stdio(false);
    fibo[N]=0;
    fibo[N+1]=1;
    for(int i=off-1;i>=0;i--){
        fibo[i]=(fibo[i+2]-fibo[i+1]);
        if(fibo[i]<0)
            fibo[i]+=MOD;
    }
    for(int i=off+2;i<3*N;i++){
        fibo[i]=(fibo[i-1]+fibo[i-2])%MOD;
    }
    int n,q;
    cin>>n>>q;
    for(int i=2;i<=n;i++){
        int x;
        cin>>x;
        G[i].pb(x);
        G[x].pb(i);
    }
    for(int i=0;i<8*N;i++){
        tree[i].x=0;
        tree[i].y=0;
    }
    dfs(1,1,0);
    while(q--){
        char t;
        int x,y;
        cin>>t;
        if(t=='U'){
            cin>>x>>y;
            update(1,1,timer-1,st[x],ed[x],dep[x],y);
        }
        else{
            cin>>x;
            cout<<query(1,1,timer-1,st[x],dep[x])<<endl;
        }
    }
    return 0;
}
