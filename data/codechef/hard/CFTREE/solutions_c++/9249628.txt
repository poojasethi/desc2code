#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<int> vll;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
typedef vector<pii > vii;
typedef vector<pair<int, pair<int, int> > > viii;
typedef pair<int,int> pll;
typedef vector<string> vs;
typedef vector<vii> vvii;
 
#define pb push_back
#define mp make_pair
#define mk make_pair
#define X first
#define Y second
#define MEM(a,b) memset(a,(b),sizeof(a))
#define all(a) a.begin(),a.end()
#define loop(x,a,b) for(int (x) = (a);(x)<(b);(x)++)
#define rep(x,n)   for(int (x)=0;(x)<(n);(x)++)
#define tr(c,it) for(typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define ain(a,n) int ((a)[(n)]); for(int i=0; i<(n); i++) cin>>((a)[i])  
#define mod 1000000007
#define MAXN 200005
 
inline void normal(int& a) {
    a %= mod;
    (a < 0) && (a += mod);
}
 
inline int mul(int a, int b) {
    a %= mod, b %= mod;
    normal(a), normal(b);
    return (a * b) % mod;
}
 
inline int add(int a, int b) {
    a %= mod, b %= mod;
    normal(a), normal(b);
    return (a + b) % mod;
}
 
inline int sub(int a, int b) {
    a %= mod, b %= mod;
    normal(a), normal(b);
    a -= b;
    normal(a);
    return a;
}
 
const int N = 100100;
vector<int> G[N];
vector<int> updates[N];
 
int dis[N],DIS[N],fibo[2*N+10],t=0;
 
pair<int,int> Time[N];
 
void dfs(int idx,int par,int d)
{
	Time[idx].X=t;
	DIS[idx]=d+1;
	int i,n=G[idx].size();
	for(i=0;i<n;i++) 
	{
		if(G[idx][i]!=par) t++,dfs(G[idx][i],idx,d+1);
	}
	Time[idx].Y=t;
	return;
}
 
void init(int idx,int par,int d1,int d2)
{
	// cout<<idx<<" "<<par<<" "<<d1<<" "<<d2<<endl;
	int i,n=G[idx].size(),m=updates[idx].size(),x=0;
	for(i=0;i<m;i++)
	{
		x=add(x,fibo[updates[idx][i]-1]);
		d2=add(d2,fibo[updates[idx][i]]);
	}
	dis[idx]=add(dis[idx],d2);
	int tmp=d2;
	d2=add(d1,add(d2,x));
	d1=tmp;
	for(i=0;i<n;i++) if(par!=G[idx][i]) init(G[idx][i],idx,d1,d2);
	return;
 
}
 
bool inrange(int x,int y)
{
	if(Time[x].X<=Time[y].X && Time[x].Y>=Time[y].Y) return true;
	return false;
}
 
int main()
{
	ios::sync_with_stdio(false);
	int i,j,k,Q,n,m,x,y;
	char ch[2];
	fibo[0]=0;
	fibo[1]=1;
	for(i=2;i<(2*N+10);i++) fibo[i]=add(fibo[i-1],fibo[i-2]);
	scanf("%d%d",&n,&m);
	for(i=1;i<n;i++)
	{
		scanf("%d",&k);
		k--;
		G[k].pb(i);
		G[i].pb(k);
	}
	
	dfs(0,-1,-1);
	// for(i=0;i<n;i++) cout<<Time[i].X<<" "<<Time[i].Y<<endl;
	// cout<<endl;
	int maxx=400,ans=0;
	vector< pair<int,int> > V;
	for(i=0;i<m;i++)
	{
		// cout<<"NN\n";
		scanf("%s",ch);
		if(ch[0]=='Q')
		{
			scanf("%d",&k);
			k--;
			x=V.size();
			ans=dis[k];
			for(j=x-1;j>=0;j--)
			{
				if(inrange(V[j].X,k))
				{
					int val=(V[j].Y+DIS[k]-DIS[V[j].X]);
					ans=add(ans,fibo[val]);
				}
			}
			printf("%d\n",ans);
		}
		else
		{
			scanf("%d%d",&j,&k);
			j--;
			updates[j].pb(k);
			V.pb(mk(j,k));
		}
		maxx--;
		if(maxx==0)
		{
			// cout<<"KK\n"; 
			init(0,-1,0,0);
			// for(i=0;i<n;i++) cout<<dis[i]<<" ";
			// cout<<endl;
			for(j=0;j<n;j++) updates[j].clear();
			V.clear();
			maxx=400;
		}
	}
	return 0;
} 