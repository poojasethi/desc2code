#include <bits/stdc++.h>
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

typedef long long ll;

using namespace std;

const int MAXN = 300000 + 100;
vector<int>v[MAXN];
int n, m;

int up[MAXN][25], tin[MAXN], tout[MAXN];
int tim;
void dfs(int x, int anc) {
    tin[x] = tim;
    tim++;
    up[x][0] = anc;
    for (int i = 1; i < 23; i++) {
        up[x][i] = up[ up[x][i -1] ][i - 1];
    }

    for (int i = 0; i < v[x].size(); i++) {
        int to = v[x][i];
        if (to == anc) {
            continue;
        }
        dfs(to, x);
    }
    tout[x] = tim;
    tim++;
}


int isAnc(int x, int y) {
    return (tin[x] <= tin[y] && tout[y] <= tout[x]);
}

int lca(int x, int y) {
    if (x == y) {
        return x;
    }
    if (isAnc(x, y) ) {
        return x;
    }
    if (isAnc(y, x) ) {
        return y;
    }
    for (int i = 22; i >= 0; i--) {
        if (!isAnc(up[x][i], y) ) {
            x = up[x][i];
        }
    }
    return up[x][0];
}

struct Fenwick {
    static const int MAXM = 4*MAXN;
    int r[MAXM];
    void modify(int x, int y) {
        for (; x < MAXM; x = (x|(x + 1) ) ) {
            r[x] += y;
        }
    }
    int sum(int x) {
        int res = 0;
        for (;x >= 0; x = ( (x & (x + 1) )- 1 )) {
            res += r[x];
        }
        return res;
    }
};

Fenwick on, under;
int in[MAXN];

int main() {
    scanf("%d", &n);
    for (int i = 2; i <= n; i++) {
        int aa, bb;
        scanf("%d%d", &aa, &bb);
        
        v[aa].push_back(bb);
        v[bb].push_back(aa);
    }
    tin[0] = -1; tout[0] = (1<<25);
    dfs(1, 0);

    int q;
    scanf("%d", &q);
    for (int it = 0; it < q; it++) {
        
        int a, b;
        scanf("%d%d", &a, &b);

        int l = lca(a, b);
        
        int res = on.sum(tin[a]) + on.sum(tin[b]) - 2*on.sum(tin[l]);
        res += under.sum(tout[l]) - under.sum(tin[l] - 1);
        res += in[l];
        
        
        printf("%d\n", res);
       
        on.modify(tin[l], 1);
        on.modify(tout[l], -1);

        under.modify(tin[a], 1);
        under.modify(tin[b], 1);
        under.modify(tin[l], -2);

        in[l]++;
    }
    return 0;
}
/*
5
1 2
1 3
3 4
3 5
4
4 5
4 2
1 3
1 2
*/