#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define pil pair<int,long long>
#define pli pair<long long,int>
#define pll pair<long long,long long>
#define pb push_back
#define mk make_pair
#define sd(x) scanf("%d", &x)
#define pd(x) printf("%d\n",x)
#define pdl(x) printf("%lld\n",x)
#define sdl(x) scanf("%lld", &x)
#define eps 1e-12
#define maxn 200009
using namespace std;
vector<int> g[maxn];
int depth[maxn],strt[maxn],en[maxn],par[maxn][21],ctr=1,tree[maxn],nree[maxn];
int n;
inline void dfs(int pos,int prev)
{
	depth[pos]=depth[prev]+1;
	par[pos][0]=prev;
	strt[pos]=ctr;
	for(int i=0;i<g[pos].size();i++)
	{
		if(g[pos][i]!=prev)
		{
			ctr++;
			dfs(g[pos][i],pos);
		}
	}
	en[pos]=ctr;
}
inline int lca(int x,int y)
{
	if(depth[x]<depth[y])
	{
		swap(x,y);
	}
	int diff=depth[x]-depth[y];
	for(int i=0;i<=20;i++)
	{
		if(diff&(1<<i))
		{
			x=par[x][i];
		}
	}
	if(x==y)
	{
		return x;
	}
	for(int i=20;i>=0;i--)
	{
		if(par[x][i]!=par[y][i])
		{
			x=par[x][i];
			y=par[y][i];
		}
	}
	return par[x][0];
}
inline void update1(int x,int val)
{
	if(!x)
	{
		return;
	}
	while(x<=n)
	{
		tree[x]=tree[x]+val;
		x=x+(x&(-x));
	}
}
inline void update2(int x,int val)
{
	if(!x)
	{
		return;	
	}
	while(x<=n)
	{
		nree[x]=nree[x]+val;
		x=x+(x&(-x));
	}
}
inline int query1(int x)
{
	int sum=0;
	while(x>0)
	{
		sum=sum+tree[x];
		x=x-(x&(-x));
	}
	return sum;
}
inline int query2(int x)
{
	int sum=0;
	while(x>0)
	{
		sum=sum+nree[x];
		x=x-(x&(-x));
	}
	return sum;
}
int main()
{
	int q;
	sd(n);
	for(int i=0;i<n-1;i++)
	{
		int x,y;
		sd(x);
		sd(y);
		g[x].pb(y);
		g[y].pb(x);
	}
	dfs(1,0);
	for(int j=1;j<=20;j++)
	{
		for(int i=1;i<=n;i++)
		{
			par[i][j]=par[par[i][j-1]][j-1];
		}
	}
	sd(q);
	while(q--)
	{
		int x,y;
		sd(x);
		sd(y);
		int l=lca(x,y);
		// cout<<l<<"lca\n";
		// cout<<strt[x]<<" "<<en[x]<<" "<<strt[y]<<" "<<en[y]<<" "<<strt[l]<<" "<<en[l]<<"\n";
		int ans1=query1(en[l])-query1(strt[l]-1);
		update1(strt[x],1);
		update1(strt[y],1);
		update1(strt[l],-2);
		int ans2=query2(strt[x])-query2(strt[l])+query2(strt[y])-query2(strt[par[l][0]]);
		ans1+=ans2;
		update2(strt[l],1);
		update2(en[l]+1,-1);
		printf("%d\n",ans1);
	}
}