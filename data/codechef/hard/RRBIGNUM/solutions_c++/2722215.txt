// http://www.codechef.com/COOK38/problems/RRBIGNUM
// medium difficulty
#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string.h>

using namespace std;

#define MAXN 1000009
#define MOD 1000000007

char s[MAXN];
int N,Q,modulo[MAXN];
bool last_bit;

typedef long long ll;

struct st{
	ll total;
	ll cur;
	bool lazy;
	int one;
}T[4*MAXN];

void Init(int node,int sr,int e) {
	int mid=(sr+e)/2;
	
	if (sr==e) {
		T[node].total=modulo[sr];
		if (s[sr-1]=='1') {
			T[node].cur=modulo[sr];
			T[node].one=1;
		}
		return;
	}
	
	Init(2*node,sr,mid);
	Init(2*node+1,mid+1,e);
	
	T[node].total=(T[2*node].total+T[2*node+1].total)%MOD;
	T[node].cur=(T[2*node].cur+T[2*node+1].cur)%MOD;
	T[node].one=T[2*node].one+T[2*node+1].one;
}

void Update(int node,int s,int e,int i,int j) {
	int mid=(s+e)/2;
	
	if (s==i && j==e) {
		T[node].cur=(T[node].total-T[node].cur + MOD)%MOD;
		T[node].one=(e-s+1)-T[node].one;
		if (T[node].lazy)
			T[node].lazy=false;
		else
			T[node].lazy=true;
		return;
	}
	
	if (T[node].lazy) {
		Update(2*node,s,mid,s,mid);
		Update(2*node+1,mid+1,e,mid+1,e);
		T[node].lazy=false;
	}
	
	if (j<=mid)
		Update(2*node,s,mid,i,j);
	else
	if (i>mid)
		Update(2*node+1,mid+1,e,i,j);
	else {
		Update(2*node,s,mid,i,mid);
		Update(2*node+1,mid+1,e,mid+1,j);
	}
	
	T[node].total=(T[2*node].total+T[2*node+1].total)%MOD;
	T[node].cur=(T[2*node].cur+T[2*node+1].cur)%MOD;
	T[node].one=T[2*node].one+T[2*node+1].one;
}

void Read() {
	scanf("%s",s);
	N=strlen(s);
	if (s[N-1]=='1')
		last_bit=true;
	
	modulo[N]=1;
	for (int i=N-1;i>=1;i--) {
		modulo[i]=modulo[i+1]*2;
		modulo[i]%=MOD;
	}
	Init(1,1,N);
}

void Solve() {
	scanf("%d",&Q);
	
	for (int i=0;i<=Q;i++) {
		if (i!=0) {
			int s,e;
			scanf("%d %d",&s,&e);
			Update(1,1,N,s,e);
			if (e==N) {
				if (last_bit)
					last_bit=false;
				else
					last_bit=true;
			}
		}
		ll v = T[1].cur;

		if (last_bit == 1) {
			ll uphalfv = (v+1) * ((MOD+1)/2) % MOD;
			printf("%d\n", (int)uphalfv);
		} else {
			ll uphalfvp1 = (v+2) * ((MOD+1)/2) % MOD;
			ll ret = uphalfvp1;

			if (T[1].one%2 == 1)
				ret = (ret - 1 + MOD)%MOD;

			printf("%d\n", (int)ret);
		}

	}
}

int main () {
	//freopen("in.in","r",stdin);
	Read();
	Solve();
	return 0;
}
