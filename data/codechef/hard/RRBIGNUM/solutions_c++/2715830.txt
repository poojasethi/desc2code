#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <cassert>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int modref=1000000007;
const int max_n=1000010;

char num[max_n+5]; int n;
int m;
int p2[max_n+1], q[max_n], pq[max_n+1];

// Segment Tree Codechunk

int slr[4*max_n+10];
int srr[4*max_n+10];
bool sfl[4*max_n+10];
int sval[4*max_n+10];
int sn1[4*max_n+10];
bool lastb;

struct ST
{
	int sn; //sn>0
	
	ST(){ sn=0; }
	ST(int sn_){ sn=sn_; init(0,0,sn); lastb=(num[sn-1]=='1');}

	void compute(int ix)
	{
		if(slr[ix]+1==srr[ix])
		{
			sval[ix]=((num[slr[ix]]=='1')?q[slr[ix]]:0);
			sn1[ix]=((num[slr[ix]]=='1')?1:0);
		}
		else
		{
			int lc=2*ix+1, rc=2*ix+2;
			sval[ix]=(sval[lc]+sval[rc])%modref;
			sn1[ix]=sn1[lc]+sn1[rc];
		}

		if(sfl[ix])
		{
			sval[ix]=(pq[srr[ix]]-sval[ix]+modref)%modref;
			sval[ix]=(sval[ix]-pq[slr[ix]]+modref)%modref;
			//sval[ix]=(pq[srr[ix]]-pq[slr[ix]])-sval[ix];
			sn1[ix]=(srr[ix]-slr[ix])-sn1[ix];
		}
	}
	
	void init(int ix, int l, int r)
	{
		slr[ix]=l;
		srr[ix]=r;
		sfl[ix]=false;

		if(l+1<r)
		{
			int mid=(l+r)/2;
			init(2*ix+1,l,mid);
			init(2*ix+2,mid,r);
		}

		compute(ix);
		//cout<<ix<<" "<<slr[ix]<<" "<<srr[ix]<<" "<<sval[ix]<<"\n";
	}
	
	void iupdate(int ix, int l, int r)
	{
		int lc=2*ix+1, rc=2*ix+2;
		
		if(l==slr[ix] and r==srr[ix])
			sfl[ix]=(not sfl[ix]);
		else if(r<=srr[lc])
			iupdate(lc,l,r);
		else if(l>=slr[rc])
			iupdate(rc,l,r);
		else
		{
			iupdate(lc,l,srr[lc]);
			iupdate(rc,slr[rc],r);
		}
		
		compute(ix);
	}
	
	void update(int l, int r)
	{
		iupdate(0,l,r+1);
		if(r+1==n) lastb=(not lastb);
	}

	int query()
	{
		int ret;
		if(lastb or sn1[0]%2==0) ret=1;
		else ret=0;

		//cout<<"@ "<<lastb<<" "<<sval[0]<<"\n";

		ret+=sval[0]; ret%=modref;
		return ret;
	}
};

// End of Codechunk

int main()
{
	gs(num); slenn(num,n);

	p2[0]=1;
	forup(i,1,n+1)
		p2[i]=(2*p2[i-1])%modref;

	pq[0]=0;
	for(int i=0; i<=n-1; ++i)
	{
		if(i==n-1) q[i]=0;
		else q[i]=p2[n-i-2];
		pq[i+1]=(pq[i]+q[i])%modref;
	}	

	ST st(n);
	pin(st.query());

	gi(m);
	rep(i,m)
	{
		int l,r;
		gi(l); --l;
		gi(r); --r;

		st.update(l,r);
		pin(st.query());
	}
	
	return 0;
}