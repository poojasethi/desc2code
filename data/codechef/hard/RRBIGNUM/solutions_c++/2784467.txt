#pragma comment (linker, "/STACK:1073741824")
#define _USE_MATH_DEFINES
#include <math.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <deque>
#include <vector>
#include <string>
#include <bitset>
#include <complex>

using namespace std;

#define SZ(x) (int((x).size()))
#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))
#define ROF(i, a, b) for(int (i) = (a); (i) >= (b); --(i))
#define REP(i, n) for (int (i) = 0; (i) < (n); ++(i))
#define REPD(i, n) for (int (i) = (n); (i)--; )
#define FE(i, a) for (int (i) = 0; (i) < (int((a).size())); ++(i))
#define MEM(a, val) memset((a), val, sizeof(a))
#define INF 1000000000
#define LLINF 1000000000000000000LL
#define PB push_back
#define PPB pop_back
#define ALL(c) (c).begin(), (c).end()
#define SQR(a) ((a)*(a))
#define MP(a,b) make_pair((a), (b))
#define XX first
#define YY second
#define GET_RUNTIME_ERROR *(int*)(NULL) = 1

typedef vector<int> vint;
typedef vector<long long> vLL;
typedef double dbl;
typedef long double ldbl;
typedef vector<pair<int, int> > vpii;
typedef long long LL;
typedef pair<int, int> pii;

struct node {
  int sm, all;
  int inverted;
};

const int nmax = 1000100;

char s[nmax];
int len;
node tree[4*nmax];
int p[nmax];

const int mod = 1000000007;

void build(int t, int l, int r) {
  if (l == r) {
    if (r == len) {
      tree[t].sm = tree[t].all = 0;
    } else {
      tree[t].all = p[len - r - 1];
      tree[t].sm = s[r - 1] == '1' ? tree[t].all : 0;
    }
  } else {
    int mid = (l + r) >> 1;
    build(t+t+1, l, mid);
    build(t+t+2, mid + 1, r);
    tree[t].all = (tree[t+t+1].all + tree[t+t+2].all) % mod;
    tree[t].sm = (tree[t+t+1].sm + tree[t+t+2].sm) % mod;
  }
}

inline void invert(int t) {
  tree[t].inverted ^= 1;
  tree[t].sm = tree[t].all - tree[t].sm;
  if (tree[t].sm < 0) tree[t].sm += mod;
}

inline void push(int t, int l, int r) {
  if (l != r) {
    invert(t+t+1);
    invert(t+t+2);
  }
  tree[t].inverted = false;
}

inline void upd(int t, int tl, int tr, int l, int r) {
  if (tree[t].inverted) push(t, tl, tr);
  if (tl == l && tr == r) {
    invert(t);
  } else {
    int mid = (tl + tr) >> 1;
    if (r <= mid) {
      upd(t+t+1, tl, mid, l, r);
    } else if (mid < l) {
      upd(t+t+2, mid + 1, tr, l, r);
    } else {
      upd(t+t+1, tl, mid, l, mid);
      upd(t+t+2, mid + 1, tr, mid + 1, r);
    }
    tree[t].all = (tree[t+t+1].all + tree[t+t+2].all) % mod;
    tree[t].sm = (tree[t+t+1].sm + tree[t+t+2].sm) % mod;
  }
}

int last, k;

int getAns() {
  int res = tree[0].sm;
  if (last == 1) {
    ++res;
  } else if (!(k & 1)) {
    ++res;
  }
  if (res == mod) return 0;
  return res;
}

int main() {
#ifdef    CENADAR_DEBUG
  freopen("input.txt", "r", stdin);
//  freopen("output.txt", "w", stdout);
//  freopen("errput.txt", "w", stderr);
#else  // CENADAR_DEBUG
//  freopen("input.txt", "r", stdin);
//  freopen("output.txt", "w", stdout);
#endif // CENADAR_DEBUG

  scanf("%s", s);
  len = strlen(s);
  p[0] = 1;
  for(int i = 1; i <= len; ++i) {
    p[i] = p[i - 1] << 1;
    if (p[i] >= mod) p[i] -= mod;
  }
  REP(i, len) k += s[i] - '0';
  build(0, 1, len);

  int n;
  scanf("%d", &n);
  printf("%d\n", getAns());
  last = s[len - 1] == '1';
  while(n--) {
    int l, r;
    scanf("%d%d", &l, &r);
    k ^= (r - l + 1) & 1;
    if (r == len) {
      --r;
      last ^= 1;
    }
    if (l <= r) upd(0, 1, len, l, r);
    printf("%d\n", getAns());
  }

  return 0;
}
