#include <iostream>
#include <cstdio>
#include <cassert>
#include <cstring>

#define ll long long
#define mod 1000000007
#define siz 1000005

using namespace std;

char inp[siz];
ll ones[siz * 4] = { 0 }, s1[siz * 4] = { 0 }, s0[siz * 4] = { 0 };
int sz, mess[siz * 4] = { 0 };

ll power(ll a, ll b)
{
	if (b < 0) return 0;
	ll ans = 1;
	while (b)
	{
		if (b & 1)
		{
			ans = (ans * a)%mod;
		}
		a = (a*a)%mod;
		b >>= 1;
	}
	return ans;
}

void build(int s, int e, int in)
{
	if (s > e) return;

	if (s == e)
	{
		if (inp[s] == '1')
		{
			s0[in] = 0;
			s1[in] = power(2, sz - 2 - s);
			ones[in] = 1;
		}
		else
		{
			s1[in] = 0;
			s0[in] = power(2, sz - 2 - s);
			ones[in] = 0;
		}
		return;
	}
	build(s, (s + e) / 2, in * 2 + 1);
	build((s + e) / 2 + 1, e, in * 2 + 2);

	s1[in] = (s1[in * 2 + 1] + s1[in * 2 + 2])%mod;
	s0[in] = (s0[in * 2 + 1] + s0[in * 2 + 2])%mod;
	ones[in] = ones[in * 2 + 1] + ones[in * 2 + 2];
}

void update(int l, int r, int s, int e, int in)
{
	if (s > e) return;

	if (mess[in])
	{
		ones[in]  = e - s + 1 - ones[in];
		ll temp = s1[in];
		s1[in] = s0[in];
		s0[in] = temp;
		mess[in] = 0;

		if (s != e)
		{
			mess[in * 2 + 1] ^= 1;
			mess[in * 2 + 2] ^= 1;
		}
	}

	if (l > e || r < s) return;

	if (s >= l && e <= r)
	{
		ones[in] = e - s + 1 - ones[in];
		ll temp = s1[in];
		s1[in] = s0[in];
		s0[in] = temp;
		if (s != e)
		{
			mess[in * 2 + 1] ^= 1;
			mess[in * 2 + 2] ^= 1;
		}
		return;
	}

	update(l, r, s, (s + e) / 2, in * 2 + 1);
	update(l, r, (s + e) / 2 + 1, e, in * 2 + 2);

	s1[in] = (s1[in * 2 + 1] + s1[in * 2 + 2])%mod;
	s0[in] = (s0[in * 2 + 1] + s0[in * 2 + 2])%mod;
	ones[in] = ones[in * 2 + 1] + ones[in * 2 + 2];
}

int main()
{
	scanf("%s",inp);
	sz = strlen(inp);
	int i, j, k, m;

	int lastbit = inp[sz - 1] - '0';
	build(0, sz - 1, 0);
	ll ans;
	ans = ones[0] & 1 ? s1[0] : s1[0] + 1;
	if ((ones[0] & 1) && lastbit == 1) ans++;
	printf("%lld\n", ans);

	scanf("%d",&m);
	while (m--)
	{
		scanf("%d%d",&j,&k);
		update(j - 1, k - 1, 0, sz - 1, 0);
		if (k == sz) lastbit ^= 1;
		ans = ones[0] & 1 ? s1[0] : s1[0] + 1;
		if ((ones[0] & 1) && lastbit == 1) ans++;
		printf("%lld\n", ans);
	}
}
