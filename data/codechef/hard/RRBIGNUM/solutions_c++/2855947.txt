/*
Codechef September Cook-off 2013
Big Number
*/

#include<cstdio>
#include<cstring>

const int MAXN=1000001;
const int MODULO=1000000007;
int ODD=0;
using namespace std;

int MOD(int num){
    if(num>=MODULO) num=num-MODULO;
    else if(num<0) num=MODULO+num;
    return num;
}

struct node{
    int bitSet, bitScan, placeSum, actualSum;
    bool flip;
    inline void merge(node& a, node& b){
        bitSet=a.bitSet+b.bitSet;
        bitScan=a.bitScan+b.bitScan;
        placeSum=MOD(a.placeSum+b.placeSum);
        actualSum=MOD(a.actualSum+b.actualSum);
        flip=0;
    }
    inline void invert(node &a){
            a.bitSet=MOD(a.bitScan-a.bitSet);
            a.actualSum=MOD(a.placeSum-a.actualSum);
            a.flip^=1;
    }
};

typedef struct node node;

node idt={0,0,0,0,0};

struct SegTree{
    node *T;
    int hgt, lftmst, rgtmst;
    SegTree(char *binary, int n){
        for(hgt=0; (1<<hgt)<n; hgt+=1);
        lftmst=(1<<hgt);
        rgtmst=lftmst<<1;
        T=new node[rgtmst];
        int base=1;
        T[0]=idt;
        for(int i=n-1; i>=0; i-=1){
            int val=binary[i]-'0';
            if(i==n-1 && val==1) ODD=1;
            T[i+lftmst].bitSet=val;
            T[i+lftmst].bitScan=1;
            T[i+lftmst].placeSum=base;
            T[i+lftmst].actualSum=(val)?(T[i+lftmst].placeSum):0;
            T[i+lftmst].flip=0;
            base=MOD(base<<1);
        }
        for(int i=n+lftmst ; i<rgtmst; i+=1) T[i]=idt;
        for(int i=lftmst-1; i; i-=1) T[i].merge(T[(i<<1)], T[((i<<1)|1)]);
        return;
    }
    void update(int u, int i, int j, int p, int q){
        int mid=(i+j)>>1, lt=u<<1, rt=lt|1;
        if(T[u].flip){
            if(i!=j){
                T[u].invert(T[lt]);
                T[u].invert(T[rt]);
            }
            T[u].flip=0;
        }
        if(i>=p && j<=q){
            T[u].invert(T[u]);
            return;
        }
        if(q<=mid) update(lt, i, mid, p, q);
        else if(p>mid) update(rt, mid+1, j, p, q);
        else{
            update(lt, i, mid, p, mid);
            update(rt, mid+1, j, mid+1, q);
        }
        T[u].merge(T[lt], T[rt]);
        return;
    }
    ~SegTree(){ if(T) delete[] T;}
};

int input(){
    int in=0;
    char c=getchar();
    while(c<48) c=getchar();
    while(c>47){
        in=(in<<3)+(in<<1)+c-'0';
        c=getchar();
    }
    return in;
}

int inputChar(char N[]){
    int i=0;
    char c=getchar();
    while(c<48) c=getchar();
    while(c>47) {N[i++]=c; c=getchar();}
    N[i]='\0';
    return i;
}

void output(int n){
    char out[11];
    out[10]='\n';
    int i=10;
    if(n==0) out[--i]='1';
    while(n){ out[--i]=n%10+'0', n/=10;}
    while(i<11){ putchar(out[i++]);}
}

int main()
{
    char N[MAXN];
    int length, M, L, R;
    node res;
    scanf("%s", &N);
    length=strlen(N);
    M=input();
    SegTree tree(N, length);
    res=tree.T[1];
    int inc=ODD?1: ((res.bitSet&1)?0:2);
    output(((long long int)(res.actualSum+inc)*((MODULO+1)/2))%MODULO);
    while(M){
        L=input();
        R=input();
        if(R==length) ODD^=1;
        tree.update(1, 0, tree.lftmst-1, L-1, R-1);
        res=tree.T[1];
        int inc=ODD?1: ((res.bitSet&1)?0:2);
        output(((long long int)(res.actualSum+inc)*((MODULO+1)/2))%MODULO);
        M-=1;
    }
}
