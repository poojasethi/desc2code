#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;

#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define MAX_M 2100000
#define MAX_N 1100000
#define MOD 1000000007

inline int ADD(int x, int y)
{ x += y; if (x >= MOD) x -= MOD; else if (x < 0) x += MOD; return x; }
typedef struct Segnode* Stp;
Stp rt, ta;
struct Segnode
{
       Stp lc, rc; int l, r, mid, len, sum, num, rev, one;
       #define G(_) _ = ADD(lc->_, rc->_)
       #define F(_) _->num = ADD(_->sum, -_->num)
       #define O(_) _->one = _->len - _->one
       inline void upd(void) { G(num), one = lc->one + rc->one; }
       void init(int x, int y, char *b, int *a)
       {
            l = x, r = y, mid = x + y >> 1, len = r - l + 1;
            if (l == r) { sum = a[l], num = (one = b[l]) * sum, rev = 0; return ; }
            lc = ++ta, rc = ++ta, lc->init(x, mid, b, a), rc->init(mid + 1, y, b, a);
            G(sum), upd();
       }
       void push(void)
       { if (rev) F(lc), F(rc), O(lc), O(rc), lc->rev ^= 1, rc->rev ^= 1, rev = 0;}
       void flip(int x, int y)
       {
            if (x <= l && r <= y)
            {
               rev ^= 1, num = ADD(sum, -num), one = len - one;
               return ;
            }
            push();
            if (x <= mid) lc->flip(x, y);
            if (y > mid) rc->flip(x, y);
            upd();
       }
} ua[MAX_M];
int p2[MAX_N];
char str[MAX_N];
int n, m;

int solve(bool sign, int x, int y)
{
    if (!sign) y = !(y & 1), x--; else y = 0;
    return ((x + 1) * 1LL * (MOD + 1) / 2 + y) % MOD;
}

int main(void)
{
    scanf("%s%d", str + 1, &m), n = strlen(str + 1), p2[1] = 1, str[1] -= '0';
    REP(i, 2, n) p2[i] = (p2[i - 1] << 1) % MOD, str[i] -= '0';
    reverse(p2 + 1, p2 + n + 1), rt = ta = ua, rt->init(1, n, str, p2);
    printf ("%d\n", solve(str[n], rt->num, rt->one));
    REP1(i, m)
    {
        int x, y; scanf("%d%d", &x, &y), rt->flip(x, y);
        if (y == n) str[n] ^= 1;
        printf ("%d\n", solve(str[n], rt->num, rt->one));
    }
    return 0;
}
