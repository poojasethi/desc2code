//Program: bignum
//Author: gary
//Date: 22/09/2013
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <limits>
#include <string>
#include <iostream>
#include <sstream>
#include <functional>
#include <algorithm>
#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
using namespace std;

#define ALL(c) (c).begin(), (c).end()
#define CNT(c,x) ((c).find(x) != (c).end())
#define FOR(i, a, n) for(int i=(a);i<=(n);i++)
#define REP(i, n) for(int i=0;i<(n);i++)
#define REP1(i, n) for(int i=0;i<=(n);i++)
#define DBG(VAR) cerr<<#VAR<<" = "<<(VAR)<<endl;
#define CLR(x, v) memset(x, v, sizeof(x))
#define SZ(x) ( (int) (x).size() )
#define MP(x, y) make_pair( (x), (y) )
#define MP3(x, y, z) MP( (x), MP( (y), (z) ) )
#define MP4(x1, y1, x2, y2) MP( MP(x1, y1), MP(x2, y2) )
#define foreach(it, C) for(typeof((C).begin())it=(C).begin();it!=(C).end();++it)
#define pb push_back
typedef long long LL;
typedef pair<int, int> PII;
template<class T> bool checkMin(T& a, T b) { if(a > b){ a = b;return 1;}return 0;}
template<class T> bool checkMax(T& a, T b) { if(a < b){ a = b;return 1;}return 0;}
//int dx[]={-1,0,1,0},  dy[]={0,1,0,-1};
//int dx[]={-1,-1,0,1,1,1,0,-1},dy[]={0,1,1,1,0,-1,-1,-1};
const int INF = 1e9;
const int MN = 1e6 + 100;
const int mod = 1e9 + 7;

int bpow(int a, int n){
  int r = 1;
  while(n > 0){
    if(n & 1) r = ((LL) r * a) % mod;
    n >>= 1;
    a = ( (LL) a * a ) % mod;
  }
  return r;
}

inline int add(int a, int b){
  int c = a + b;
  if(c >= mod)
    c -= mod;
  if(c < 0)
    c += mod;
  return c;
}
int S[MN];
int bsum(int l, int r){
  if(l == 0) return S[r];
  return add(S[r], -S[l-1]);
}

int st[MN*4];
int bits[MN*4];
int lz[MN*4];
int q;
int F;
int g[MN];
int n;
char I[MN];
int lsb;

void update(int u, int L, int R,int i, int j){
  //  printf("u=%d L=%d R=%d i=%d j=%d\n", u,L,R,i,j);
  if(lz[u]){
    st[u] = add(bsum(L, R), -st[u]);
    bits[u] = (R-L+1) - bits[u];
    if(L != R){
      lz[u*2]   ^= 1;
      lz[u*2+1] ^= 1;
    }
    lz[u] = 0;
  }
  if(j < L || i > R || L > R)
    return;
  if(i <= L && R <= j){
    //    printf("L = %d R = %d bsum = %d\n", L, R, bsum(L, R));
    st[u] = add(bsum(L, R), -st[u]);
    bits[u] = (R-L+1) - bits[u];
    if(L != R){
      lz[u*2]   ^= 1;
      lz[u*2+1] ^= 1;
    }
  }else{
    update(u*2, L, (L+R)/2, i, j);
    update(u*2+1, (L+R)/2+1, R, i, j);
    st[u] = add(st[u*2], st[u*2+1]);
    bits[u] = bits[u*2] + bits[u*2+1];
  }
}

void update(int i, int j){
  update(1, 1, n, i, j);
}

int query(){
  //  printf("query, st[1] = %d bits[1] = %d lsb = %d\n", st[1], bits[1], lsb);
  int inc = lsb ? 1 : ((bits[1] & 1) ? 0 : 2);
  return ( (LL) (st[1] + inc) * F) % mod;
}

int main(){
  F = bpow(2, mod-2);
  S[1] = g[1] = 1;
  for(int i = 2; i < MN; i++){
    g[i] = (g[i-1] << 1) % mod;
    S[i] = add(g[i], S[i-1]);
  }
  scanf("%s", I);
  n = strlen(I);
  for(int i = 0; i < n; i++)
    if(I[i] == '1')
      update(n-i, n-i);
  lsb = I[n-1]-'0';

  scanf("%d", &q);
  printf("%d\n", query());
  while(q--){
    int i, j;
    scanf("%d%d",&i,&j);
    i=n-i+1;
    j=n-j+1;
    swap(i,j);
    if(i == 1)
      lsb ^= 1;

    update(i,j);
    printf("%d\n", query());
  }
  return 0;
}
