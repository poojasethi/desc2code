#include <iostream>
#include <stdio.h>
#include <string.h>

using namespace std;
typedef long long ll;

const int maxn = 6e6;
int n,m,last_bit;
char num[maxn];
ll mod = 1e9 + 7;
ll power[maxn];

struct node 
{
	ll sum;
	ll size;
	ll lenght;
	ll unos;
	bool flip;

	node()
	{}

	void merge(node a, node b)
	{
		sum = (a.sum + b.sum) % mod;
		size = (a.size + b.size)%mod;
		unos = a.unos + b.unos;
		lenght = a.lenght + b.lenght;
		flip = 0;
	}

	void split(node& a, node& b)
	{
		if(flip)
		{
			a.sum = (a.size - a.sum + mod)%mod;
			a.unos = a.lenght - a.unos;
			b.sum = (b.size - b.sum + mod)%mod;
			b.unos = b.lenght - b.unos;

			a.flip ^= 1;
			b.flip ^= 1;
			flip = false;
		}
	}
}tree[maxn];

void update(int root, int l, int r, int i, int j)
{
	if(i <= l && r <= j)
	{
		tree[root].sum = (tree[root].size - tree[root].sum + mod)%mod;
		tree[root].unos = tree[root].lenght - tree[root].unos;
		tree[root].flip ^= 1;
		return;
	}

	tree[root].split(tree[2*root],tree[2*root + 1]);
	int m = (l + r) >> 1;

	if(j <= m)
		update(2*root,l,m,i,j);
	else if(i > m)
		update(2*root + 1,m + 1,r,i,j);
	else
	{
		update(2*root,l,m,i,m);
		update(2*root + 1, m + 1, r, m + 1,j);
	}
	tree[root].merge(tree[2*root],tree[2*root + 1]);
}

node query(int root, int l, int r, int i, int j)
{
	if(l == i && r == j)
		return tree[root];

	int m = (l + r) >> 1;
	tree[root].split(tree[2*root],tree[2*root + 1]);

	if(j <= m)
		return query(2*root,l,m,i,j);
	else if(i > m)
		return query(2*root + 1, m + 1,r,i,j);
	else
	{
		node a = query(2*root,l,m,i,m);
		node b  = query(2*root + 1,m + 1,r, m + 1,j);
		node res = node();
		res.merge(a,b);
		return res;
	}
}

void init(int root, int l, int r)
{
	if(l == r)
	{
		ll res = power[n - l - 1];
		tree[root].unos = (num[l] - '0');
		tree[root].size = res;
		tree[root].lenght = 1;
		tree[root].sum = res*tree[root].unos;
		tree[root].flip = false;
		return;
	}

	int m = (l + r) >> 1;

	init(2*root,l,m);
	init(2*root + 1,m + 1,r);
	tree[root].merge(tree[2*root],tree[2*root + 1]);
}

ll answer(node res)
{
	ll total = 0;
	if(last_bit == 1)
	{
		total = ((res.sum + 1)*((mod + 1)/2))%mod;
	}
	else
	{
		total = ((res.sum + 2)*((mod + 1)/2))%mod;
		if(res.unos % 2 == 1)
			total = (total - 1 + mod)%mod;
	}
	return total;
}

int main()
{
	power[0] = 1;
	for(int i = 1; i < maxn; i++)
	{
		power[i] = power[i - 1]*2;
		power[i] %= mod;
	}

	scanf("%s", &num);
	n = strlen(num);
	scanf("%d",&m);

	init(1,0, n - 1);
	last_bit = (num[n - 1] - '0');

	node res = tree[1];
	ll value = answer(res);
	printf("%lld\n",value);

	while(m--)
	{
		int l,r;
		scanf("%d %d", &l, &r);
		if(r == n)
			last_bit ^= 1;

		update(1,0,n - 1,l - 1,r - 1);

		value = answer(tree[1]);
		printf("%lld\n",value);
	}
	return 0;
}