#include <cstring>
#include <stdio.h>
#include <cstdlib>
#include <cctype>
#include <algorithm>
#include <map>
#include <vector>
#include <list>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <cmath>
using namespace std;
#define pb push_back
#define mod 1000000007
#define N 1000010
#define MAX 1000010
#define get getchar//_unlocked
inline long long inp()
{
    long long n=0,s=1;
    char p=get();
    if(p=='-')
    s=-1;
    while((p<'0'||p>'9')&&p!=EOF)
    p=get();
    while(p>='0'&&p<='9')
    {
    n = (n<< 3) + (n<< 1) + (p - '0');
    p=get();
    };
    return n*s;
}
long long n;
long long onbit[3*N+3],value[3*N+3],flip[3*N+3],totalvalue[3*N+3];
char s[MAX];
long long a[MAX],power[MAX];
void build(long long node,long long b,long long e)
{
    if(b==e)
    {
        value[node]=(a[b]*(power[n-b-1]))%mod;
        flip[node]=0;
        onbit[node]=a[b];
        totalvalue[node]=power[n-b-1];
        return;
    }
    build(2*node,b,(b+e)/2);
    build(2*node+1,(b+e)/2+1,e);
    onbit[node]=onbit[2*node]+onbit[2*node+1];
    value[node]=(value[2*node]+value[2*node+1])%mod;
    totalvalue[node]=(totalvalue[2*node]+totalvalue[2*node+1])%mod;
}
void update(long long node,long long b,long long e,long long i,long long j)
{
    if(flip[node]==1)
    {
        onbit[node]=e-b+1-onbit[node];
        value[node]=(totalvalue[node]-value[node]+mod)%mod;
        if(b!=e)
        {
            flip[2*node]^=1;
            flip[2*node+1]^=1;
        }
        flip[node]=0;
    }
    if(b>j||e<i||b>e)return;
    if(i<=b&&e<=j)
    {
        onbit[node]=e-b+1-onbit[node];
        value[node]=(totalvalue[node]-value[node]+mod)%mod;
        if(b!=e)
        {
            flip[2*node]^=1;
            flip[2*node+1]^=1;
        }
        flip[node]=0;
        return;
    }
    update(2*node,b,(b+e)/2,i,j);
    update(2*node+1,(b+e)/2+1,e,i,j);
    onbit[node]=onbit[2*node]+onbit[2*node+1];
    value[node]=(value[2*node]+value[2*node+1])%mod;
}


long long query(long long node,long long b,long long e,long long i,long long j,long long flag)
{
    if(b>j||e<i)return 0;
    if(i<=b&&e<=j)
    {
      if(flag==1)
      return ((power[n-b]-power[n-e-1])-value[node])%mod;
      else return value[node]%mod;
    }
    long long f=flag+flip[node];
    if(f>1)f-=2;
    long long q1=query(2*node,b,(b+e)/2,i,j,f);
    long long q2=query(2*node+1,(b+e)/2+1,e,i,j,f);
    return (q1+q2)%mod;
}

long long countbits(long long n)
{
    long long c=0;
    while(n)
    {
        n=n&(n-1);
        c++;
    }
    return c;
}

long long powerfind(long long a,long long b)
{
    long long r=1,x=a;
    if(a==0&&b==0)return 1;
    if(a==0&&b!=0)return 1;
    while(b)
    {
        if(b&1)r=(r*x)%mod;
        x=(x*x)%mod;
        b>>=1;
    }
    return r;
}

int main()
{
     long long i,j,k,l,m,t,ans,c=0;
     scanf("%s",s);
     n=strlen(s);t=0;
     power[0]=1;
     for(i=1;i<MAX;i++)power[i]=(power[i-1]*2)%mod;
     int even;
     for(i=0;i<n;i++)
     {
        a[i]=s[i]-'0';
        if(a[i]==1)c++;
        t=(t+a[i]*power[n-i-1])%mod;
     }
     if(a[n-1]==1)
        even=0;
        else even=1;
        long long inv2=powerfind(2,mod-2)%mod;
     if(!even)
     ans=(((t+1))*inv2)%mod;
     else  ans=((t)*inv2)%mod+((c&1)?0:1);
     printf("%lld\n",ans%mod);
     scanf("%lld",&m);
     build(1,0,n-1);
     while(m--)
     {
         scanf("%lld%lld",&i,&j);
         update(1,0,n-1,i-1,j-1);
         if(j==n)
            even^=1;
         t=value[1]%mod;//printf("%lld\n",onbit[5]);
         if(!even)
          ans=((t+1)*inv2)%mod;
         else ans=(t*inv2)%mod+((onbit[1]&1)?0:1);
         printf("%lld\n",ans%mod);
     }
     return 0;
}
