#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <utility>
#include <math.h>
#include <cstdlib>
#include <memory.h>
#include <queue>
#include <assert.h>

#define pb push_back
#define LL long long
#define uLL unsigned long long
#define mp make_pair
#define pii pair <int,int>
#define sz(A) ((int)(A).size())
#define y1 qwertyuiopasdfghjklzxcvbnm
#define y0 ehfoiuvhefroerferjhfjkehfjke

const double EPS = 1e-9;
const double PI = acos(-1.0);
const int MAXN = 2 * (int) 1e5 + 10;
const int MOD = (int) 1e9 + 7;

using namespace std;

int mul(int a, int b) {
  if  (a < 0) a += MOD;
  if  (b < 0) b += MOD;
  LL M = 1LL * a * b;
  M %= (LL)MOD;
  return (int)M;
}

int mpow(int a, int p) {
  int res = 1;
  while (p > 0) {
    if  (p & 1) res = mul(res, a);
    a = mul(a, a);
    p /= 2;
  }
  return res;
}

int add(int a, int b) {
  if  (a < 0) a += MOD;
  if  (b < 0) b += MOD;
  a += b;
  if  (a > MOD) a -= MOD;
  return a;
}

int cnt[MAXN];

int cnt_divs(int l, int r, int d) {
  l = (l + d - 1) / d;
  r = r / d;
  if  (l > r) return 0;
  return r - l + 1;
}

int main() {
  int T; scanf("%d", &T);
  while (T--) {
    memset(cnt, 0, sizeof cnt);

    int k; int a[5], b[5];
    scanf("%d", &k);
    for (int i = 0; i < k; i++)
      scanf("%d%d", &a[i], &b[i]);

    for (int d = 1; d < MAXN; d++) {
      cnt[d] = 1;
      for (int i = 0; i < k; i++)
        cnt[d] = mul(cnt[d], cnt_divs(a[i], b[i], d));
    }

    int P = 0;
    for (int d = MAXN - 1; d >= 1; d--) {
      int res = cnt[d];
      for (int j = d + d; j < MAXN; j += d)
        res = add(res, - cnt[j]);
      
      cnt[d] = res;
      P = add(P, mul(d, res));
    }

    int Q = 1;
    for (int i = 0; i < k; i++)
      Q = mul(Q, b[i] - a[i] + 1);

    printf("%d\n", mul(-P, mpow(Q, MOD-2)));
  }

  return 0;
}
