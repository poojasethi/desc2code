#include <cstdio>
#include <algorithm>
using namespace std;

typedef long long ll;

const ll mod = 1000000007ll;
const int Maxk = 10;
const int Maxb = 200005;

int t;
int k;
int a[Maxk], b[Maxk];
int f[Maxb];
int p, q;

void gcd(int a, int &x, int b, int &y, int &g)
{
	if (!a) { x = 0; y = 1; g = b; }
	else {
		int xx, yy;
		gcd(b % a, xx, a, yy, g);
		x = yy - b / a * xx;
		y = xx;
	}
}

int main()
{
	scanf("%d", &t);
	while (t--) {
		scanf("%d", &k);
		int mx = Maxb;
		for (int i = 0; i < k; i++) {
			scanf("%d %d", &a[i], &b[i]);
			mx = min(mx, b[i]);
		}
		p = q = 0;
		for (int i = 1; i <= mx; i++) {
			f[i] = 1;
			for (int j = 0; j < k; j++) {
				int tims = b[j] / i - (a[j] - 1) / i;
				f[i] = ll(f[i]) * ll(tims) % mod;
			}
		}
		for (int i = mx; i >= 1; i--) {
			for (int j = 2 * i; j <= mx; j += i) {
				f[i] -= f[j];
				if (f[i] < 0) f[i] += mod;
			}		
			p = (p + ll(i) * ll(f[i]) % mod) % mod;
			q = (q + f[i]) % mod;
		}
		if (p == 0) printf("0\n");
		else if (q == 0) printf("-1\n");
		else {
			int need = mod - p;
			int x, y, g;
			gcd(q, x, mod, y, g);
			if (need % g) printf("-1\n");
			else {
				if (x < 0) x += mod;
				x = ll(x) * ll(need / g) % mod;
				printf("%d\n", x);
			}
		}
	}
	return 0;
}