#pragma comment(linker, "/stack:100000000")

#include <cstdio>
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <cassert>
#include <queue>
#include <sstream>

using namespace std;

#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()

const int MOD = (int)1e9 + 7;

int a[5], b[5], ph[200200];

int phi(int n) {
	int res = n;
	for (int i = 2; i * i <= n; i++) {
		if (n % i == 0) {
			while (n % i == 0) n /= i;
			res -= res / i;
		}
	}
	if (n > 1) res -= res / n;
	return res;
}

long long mypow(long long a, int b) {
	if (b == 0) return 1;
	if (b % 2 == 0) {
		long long t = mypow(a, b / 2);
		return t * t % MOD;
	} else {
		long long t = mypow(a, b - 1);
		return a * t % MOD;
	}
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	REP(i, 200200) ph[i] = phi(i);
	int tst;
	cin >> tst;
	REP(_, tst) {
		int k;
		cin >> k;
		REP(i, k) cin >> a[i] >> b[i];
		long long p = 0, q = 1;
		REP(i, k) {
			q *= (b[i] - a[i] + 1);
			q %= MOD;
		}
		for (int i = 1; i <= 200000; i++) {
			long long t = 1;
			REP(j, k) {
				t *= ((b[j] / i) - (a[j] - 1) / i);
				t %= MOD;
			}
			p += t * ph[i];
			p %= MOD;
		}
		long long res = (MOD - p) * mypow(q, MOD - 2) % MOD;
		cout << res << "\n";
	}
	return 0;
}