#include <iostream>
#include <stdio.h>
#include <cstring>
#include <stdlib.h>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <ctime>
#include <math.h>
#include <algorithm>
#include <iomanip>
#include <assert.h>
#include <map>
#include <queue>
#include <set>
using namespace std;

typedef unsigned long long int ullint;
typedef long long int ll;
#define vi vector<int>
#define vvi vector< vector<int> >
#define vd vector<double>
#define vb vector<bool>
#define vs vector<string>
#define pi pair<int,int>
#define pb push_back
#define out(a) printf("%d\n",a)
#define pout(a,b) cout<<(a)<<' '<<(b)<<endl
#define sz(c) (int)(c).size()
#define foreach(n,i) for(int (i)=0;(i)<(n);(i)++)
#define range(s,e,i) for(int (i)=(s);(i)<=(e);(i)++)
#define all(c) (c).begin(),(c).end()
template<typename typ> void vout(vector<typ>& v){for(int vint=0;vint<sz(v);vint++)cout<<(v)[vint]<<' ';cout<<endl;}
template<typename typ> void arrout(typ* arr,int l){for(int i=0;i<l;i++)cout<<arr[i]<<' ';cout<<endl;}

#define debug
#ifdef debug
#define dbg(a) cout << #a << ' ' << a << endl
#endif
#ifndef debug
#define dbg(a)
#endif

int mod = 1000000007;
ll pow_mod(ll n,ll p)
{
	ll ans = 1;
	while( p )
	{
		if( p & 1 )
			ans = (ans * n) % mod;
		p /= 2;
		n = (n * n) % mod;
	}
	return ans;
}

ll gcd(ll a,ll b)
{
	while(b)
	{
		a = a % b;
		swap(a,b);
	}
	return a;
}

int expec[200001];
int a[5],b[5];
int main()
{
	int T;
	cin >> T;
	while(T--)
	{
		int k,n = 0;
		scanf("%d",&k);
		for( int i = 0 ; i < k ; ++i )
		{
			scanf("%d %d",&a[i],&b[i]);
			n = max(b[i],n);
		}

		memset(expec,0,n+1);
		ll ans = 0, total = 0;
		for(int p = n ; p >= 1 ; --p)
		{
			ll prod = 1;
			for(int i = 0 ; i < k ; ++i)
				prod = ( prod * (b[i]/p - (a[i] - 1)/p) ) % mod;
			expec[p] = (int)prod;
			for(int j = 2 ; p * j <= n ; ++j)
				expec[p] = (expec[p] - expec[p * j] + mod) % mod;
			total = (total + expec[p]) % mod;
			ans = (ans + (ll)p * expec[p]) % mod;
		}
		// ll g = gcd(ans,total);
		// ans /= g;
		// total /= g;
		if( !total )
			printf("-1\n");
		else
			printf("%lld\n",( (-ans + mod)%mod * pow_mod(total,mod - 2) ) % mod);
	}
}