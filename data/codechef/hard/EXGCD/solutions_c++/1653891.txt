/*
Author: Mabraygas @ BUPT
*/
#include"iostream"
#include"vector"
#include"string"
#include"cstdio"
#include"cstdlib"
#include"cmath"
#include"algorithm"
#include"queue"
#include"cstring"
#include"map"
#include"set"
#include"fstream"
#include"sstream"
#include"numeric"
#include"stack"
#include"iomanip"
#include"bitset"
#include"list"
#include"functional"
#include"utility"
#include"ctime"
#include"cctype"

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int,int> pii;
typedef vector<pii> vpi;
const double eps=1e-5;
const int inf=(1<<31)-1;
const int hinf=0x3f3f3f3f;
const ll mod=1000000007;

#define sz(a) sizeof(a)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define ms(a,i) memset((a),(i),sz(a))
#define clr(x) memset(x,0,sz(x))
#define cdp(x) memset((x),-1,sizeof(x))
#define infi(x) memset(x,0x3f,sz(x))
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)

int phi[200020];

ll pow(ll a,ll p,ll mod)
{
    if(p==0) return 1;
    ll ans=pow(a,p/2,mod);
    ans=ans*ans%mod;
    if(p&1) ans=ans*a%mod;
    return ans;
}

ll inv(ll a,ll n)
{
    return pow(a,n-2,n);
}

void phi_table(int n)
{
    for(int i=2;i<=n;i++) phi[i]=0;
    phi[1]=1;
    for(int i=2;i<=n;i++) if(!phi[i])
    {
        for(int j=i;j<=n;j+=i)
        {
            if(!phi[j]) phi[j]=j;
            phi[j]=phi[j]/i*(i-1);
        }
    }
}

int t,k,a[10],b[10];
ll p,q; int n;
int bmin;

int main()
{
	//std::ios::sync_with_stdio(false);
	phi_table(200005);
	scanf("%d",&t);
	while(t--)
	{
	    p=0ll; q=1ll; bmin=inf;
	    scanf("%d",&n);
	    for(int i=1;i<=n;i++) {scanf("%d%d",&a[i],&b[i]); bmin=min(bmin,b[i]);}
	    for(int i=1;i<=n;i++) q=q*(ll)(b[i]-a[i]+1)%mod;
	    for(int i=1;i<=bmin;i++)
	    {
	        ll tt=(ll)phi[i];
	        for(int j=1;j<=n;j++)
                tt=(1ll*tt*((b[j]/i)-(a[j]-1)/i))%mod;
            p=(p+tt)%mod;
	    }
	    ll nn=(-p*inv(q,mod)+mod)%mod;
	    while(nn<0) nn+=mod;
	    cout<<nn<<endl;
	}
}
