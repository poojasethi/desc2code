#pragma comment(linker, "/STACK:128777216")

#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <iostream>
#include <functional>
#include <numeric>
#include <sstream>
#include <exception>
#include <cassert>

typedef long long i64;
typedef unsigned int u32;
const int null = 0;
using namespace std;
template<class T> int size(const T &a) {
	return int(a.size());
}
template<class T> T abs(const T &a) {
	return (a < 0? -a: a);
}

#ifdef pperm
const int max_n = 200000;
#else
const int max_n = 200010;
#endif
const int mod = int(1e9 + 7.1);

int dp[max_n];

struct Seg {
	int a, b;
	void scan() {
		scanf("%d %d", &a, &b);
	}
	int cnt(int d) {
		return (b / d - (a - 1) / d);
	}
	int len() {
		return (b - a + 1);
	}
} a[5];

i64 inv(i64 a) {
	int b = mod - 2;
	i64 r = 1;
	while (b) {
		if (b & 1) {
			r = (r * a) % mod;
		}
		b >>= 1;
		a = (a * a) % mod;
	}
	return r;
}

int main() {
#ifdef pperm
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	int T;
	scanf("%d", &T);
	while (T--) {
		int n;
		scanf("%d", &n);
		i64 q = 1;
		for (int i = 0; i < n; i++) {
			a[i].scan();
			q = (q * a[i].len()) % mod;
		}
		for (int i = 1; i < max_n; i++) {
			i64 cur = 1;
			for (int j = 0; j < n; j++) {
				cur = cur * a[j].cnt(i) % mod;
			}
			dp[i] = cur;
		}
		i64 p = 0;
		for (int i = max_n - 1; i >= 1; i--) {
			int &c = dp[i];
			for (int j = i + i; j < max_n; j += i) {
				c -= dp[j];
				if (c < 0) {
					c += mod;
				}
			}
			p = (p + c * i64(i)) % mod;
		}
		if (q == 0 && p != 0) {
			printf("-1\n");
		} else {
			cout << (inv(q) * (mod - p) % mod) << endl;
		}
	}
#ifdef pperm
	fprintf(stderr, "\n%.3lf\n", clock() / double(CLOCKS_PER_SEC));
#endif
	return 0;
}
