#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;
const int kMaxN = 5, kMaxV = 200000, kMod = 1000000007;
int n, a[kMaxN], b[kMaxN];
int dp[kMaxV + 1];

int ExGcd(int a, int b, ll &x, ll &y) {
	if (!b) {
		x = 1, y = 0;
		return a;
	}
	else {
		int g = ExGcd(b, a % b, x, y);
		ll t = x;
		x = y, y = t - x * (a / b);
		return g;
	}
}

int main() {
	int t;
	for (scanf("%d", &t); t --; ) {
		scanf("%d", &n);
		int v = kMaxV;
		for (int i = 0; i < n; ++ i) {
			scanf("%d%d", &a[i], &b[i]);
			v = min(v, b[i]);
		}
		int P = 0, Q = 0;
		for (int j = v; j >= 1; -- j) {
			dp[j] = 1;
			for (int i = 0; i < n; ++ i) dp[j] = (ll)dp[j] * (b[i] / j - (a[i] - 1) / j) % kMod;
			for (int k = j + j; k <= v; k += j) {
				dp[j] -= dp[k];
				if (dp[j] < 0) dp[j] += kMod;
			}
			P += (ll)dp[j] * j % kMod;
			if (P >= kMod) P -= kMod;
		}
		Q = 1;
		for (int i = 0; i < n; ++ i) Q = (ll)Q * (b[i] - a[i] + 1) % kMod;
		ll x, y;
		ExGcd(Q, kMod, x, y);
		x = (x % kMod + kMod) % kMod;
		x = x * (kMod - P) % kMod;
		printf("%d\n", (int)x);
	}
	return 0;
}