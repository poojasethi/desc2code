#include <cstdio>

using namespace std;

const int MOD = (int) (1e9 + 7);
const int MAXN = 200001;
const int SQRT = 500;

int phi[MAXN];
int K;
int A[5], B[5];

int pow(long long base, int n)
{
    long long res = 1;
    while (n) {
        if (n % 2 == 1)
            res = (res * base) % MOD;
        base = (base * base) % MOD;
        n /= 2;
    }
    return res;
}

long long inv(int n)
{
    return pow(n, MOD - 2);
}

int solve()
{
    int Q = 1;
    int lo = MAXN;
    for (int i = 0; i < K; ++i) {
        Q = (1LL * Q * (B[i] - A[i] + 1)) % MOD;
        if (B[i] < lo)
            lo = B[i];
    }
    int sum = 0;
    for (int i = 1; i <= lo; ++i) {
        int prod = phi[i];
        for (int j = 0; j < K; ++j) {
            prod = (1LL * prod * (B[j] / i - (A[j] - 1) / i)) % MOD;
        }
        sum = (sum + prod) % MOD;
    }
    return (1LL * sum * inv(MOD - Q)) % MOD;
}

int main()
{
    phi[1] = 1;
    for (int i = 2; i < MAXN; ++i) {
        if (phi[i] == 0) {
            phi[i] = i - 1;
            if (i < SQRT) 
                for (int j = i * i; j < MAXN; j += i) 
                    phi[j] = i;
        } else {
            int d = phi[i];
            int j = i / d;
            phi[i] = (j % d == 0 ? d : d - 1) * phi[j];
        }
    }

    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d", &K);
        for (int i = 0; i < K; ++i)
            scanf("%d %d", &A[i], &B[i]);
        printf("%d\n", solve());
    }

    return 0;
}
