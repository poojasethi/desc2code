#include <cstdio>
#include <map>
#include <string>

#define sz size()
#define pb push_back
#define LET(x,a) typeof(a) x(a)
#define FOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define REP(i,n) FOR(i,0,n)
#define EACH(i,v) FOR(i,(v).begin(),(v).end())
#define LL long long

using namespace std;

struct node {
	int val;
	node * left;
	node * right;
	node(int a) {
		val = a;
		left = right = NULL;
	}
} root(0);

int child[1010][2], atleast[1010];

void updTree(int from, node * nn, int level) {
	node &n=*nn;
	n.val++;
	if(atleast[n.val]<level) atleast[n.val]=level;
	if(child[from][0]!=-1) {
		if(n.left==NULL) n.left = new node(0);
		updTree(child[from][0],n.left,level+1);
	}
	if(child[from][1]!=-1) {
		if(n.right==NULL) n.right = new node(0);
		updTree(child[from][1],n.right,level+1);
	}
	return;
}

int main (int argc, char const* argv[]) {
	
	int t, m, n;
	scanf("%d",&t);
	while(t--) {
		root.val = 0;
		root.left = root.right = NULL;
		REP(i,1010) atleast[i] = 0;
		scanf("%d",&m);
		REP(i,m) {
			scanf("%d",&n);
			REP(i,n) child[i+1][0] = child[i+1][1] = -1;
			REP(i,n-1) {
				int l; char ch[5];
				scanf("%d%s",&l,ch);
				bool rr = ch[0]=='R';
				scanf("%d",&child[l][rr]);
			}
			updTree(1,&root,0);
		}
		int till=0;
//		REP(i,2500) if(tree[i]) till=i+1;
	//	REP(i,till) printf("%d ",tree[i]); printf("\n");
		REP(i,m) printf("%d ",atleast[i+1]); printf("\n");
	}
	
	return 0;
}
