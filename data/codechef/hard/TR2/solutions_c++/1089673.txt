#include <stdio.h>
#include <iostream>
#include <map>
#include <bitset>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <set>
#include <ctime>

# define f(i,a,b) for(typeof( b ) i=a;i<b;i++)
# define TT "\t"
# define Clear(x) memset(x,0,sizeof(x))
# define fill(x,a) memset(x,a,sizeof(x))
# define pb push_back

typedef unsigned long long ull;
typedef long long ll;

using namespace std;

template <class T>
inline void ri(T &i){
    char c;for(c=getchar();c<'0'||c>'9';c=getchar());
        for(i=0;c>='0'&&c<='9';c=getchar())
        i=(i<<3)+(i<<1) + (c-48);
}

struct swnode{
	int wt;
	swnode *left;swnode *right;
};

swnode wnode;
int ans[104];
int m,n[104];
int input[1004][2];

swnode* create2(){
	swnode* temp;
	temp=new swnode;
	temp->left=temp->right=0;temp->wt=0;
	return temp;
}

swnode** root;

void rec(swnode** node,int a){
	//cout<<a<<endl;
	if(*node==0){
		*node=create2();
	}
	(*node)->wt++;
	if(input[a][0]){
		rec(&((*node)->left),input[a][0]);
	}
	if(input[a][1]){
		rec(&((*node)->right),input[a][1]);
	}
}
void updatethemaintree(){
	
	rec(root,1);
}
void fin(){
	int to,from,a,b;
	char c,x,v;
	ri(m);
	f(i,0,m){
		ri(n[i]);
		Clear(input);
		f(j,0,n[i]-1){
		ri(a);c=getchar();ri(b);
		if(c=='L'){
			input[a][0]=b;
		}
		else{
			input[a][1]=b;
		}
		}
		updatethemaintree();
	}
	
}
void rec2(swnode* node,int depth){
	if(node==0)return;
	int w=(node)->wt;
	ans[w]=max(ans[w],depth);
	rec2((node)->left,depth+1);
	rec2((node)->right,depth+1);
}

void getansfromroot(){
	rec2(*root,0);
	for(int i=m-1;i>0;i--){
		ans[i]=max(ans[i],ans[i+1]);
	}
}
int main(){
	int test;ri(test);
	while(test--){
		//reset
		root= new swnode*;
		*root = 0;
		Clear(ans);
		fin();
	//	cout<<"fin"<<endl;
		//all the trees should have been build by now
		getansfromroot();
	//	cout<<"getansformroot"<<endl;
		f(i,1,m){
			printf("%d ",ans[i]);
		}
		printf("%d\n",ans[m]);
	}
}










