#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <cmath>
#include <sstream>
#include <set>
#include <utility>
#include <queue>
#include <cassert>
#include <ctime>
using namespace std;

#define PB push_back
#define SZ size()
#define all(v) v.begin(), v.end()
#define REP(i, n) for(int i = 0; i < (int)n; i++)
#define ITR(i, j, n) for(int i = j; i < (int)n; i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Pii pair <int, int>
#define Fr first
#define Sc second
#define Long long long

#define MAX 100005
int ara[MAX], n, m;
struct node {
  int prefix, suffix, beg, end, best, element;

  void merge(node l, node r)
  {
    if((l.element == l.prefix) && ((l.end+1) == r.beg))
      prefix = l.element + r.prefix;
    else
      prefix = l.prefix;
    if((r.element == r.suffix) && ((l.end+1) == r.beg))
      suffix = r.element + l.suffix;
    else
      suffix = r.suffix;

    beg = l.beg;
    end = r.end;
    element = l.element + r.element;
    best = max(l.best, r.best);
    best = max(best, max(prefix, suffix));

    if((l.end+1) == r.beg)
      best = max(best, l.suffix + r.prefix);
  }
} tree[MAX + MAX + MAX + MAX];

void update_single_node(int id, int indx)
{
  tree[id].prefix = tree[id].suffix = tree[id].best = tree[id].element = 1;
  tree[id].beg = tree[id].end = ara[indx];
}

void create(int id, int l, int r)
{
  if(l == r) {
    update_single_node(id, l);
    return;
  }

  int mid = (l+r) / 2;
  create(2*id, l, mid);
  create(2*id+1, mid+1, r);
  tree[id].merge(tree[2*id], tree[2*id+1]);
}

void update(int id, int l, int r, int indx)
{
  if(l == indx && r == indx) {
    update_single_node(id, indx);
    return;
  }

  int mid = (l+r) / 2;
  if(indx <= mid)
    update(2*id, l, mid, indx);
  else
    update(2*id+1, mid+1, r, indx);

  tree[id].merge(tree[2*id], tree[2*id+1]);
}

int main()
{
  scanf("%d %d", &n, &m);
  ITR(i, 1, n+1)
    scanf("%d", &ara[i]);

  create(1, 1, n);
  printf("%d\n", tree[1].best);
  while(m--) {
    int x, y;
    scanf("%d %d", &x, &y);
    ara[x] = y;
    update(1, 1, n, x);
    printf("%d\n", tree[1].best);
  }
  return 0;
}
