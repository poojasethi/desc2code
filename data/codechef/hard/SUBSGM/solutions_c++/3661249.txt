/*
 	C++ Template
	Gaurav Babbar
*/

#include<bits/stdc++.h>
#define MOD 1000000007
#define MAX 100005
#define mp make_pair
#define pb push_back
#define gc getchar
#define pc putchar
#define ll long long
#define llu unsigned long long
#define fill(a, val) memset(a, val, sizeof(a))
#define all(x) x.begin(), x.end()

ll ABS(ll a){if(a>0) return a; else return (-1*a);}
int gcd(int a,int b){if (b==0) return a;else return gcd(b,a%b);}
llu power(llu b,llu exp,llu m) {llu ans=1; b%=m; while(exp){if(exp&1) ans=(ans*b)%m; exp>>=1; b=(b*b)%m; } return ans; }
using namespace std;

#define debug(args...) {dbg,args; cerr<<endl;}
struct debugger
{template<typename T> debugger& operator,(const T& v)
 {cerr<< v <<" ";
  return *this;
 }
}dbg;

inline void inp(llu &n)
{
  n = 0;
  int ch = gc();
  int sign = 1;
  while(ch < '0' || ch > '9') {
    if (ch == '-') sign = -1;
    ch = gc();
  }
  while(ch >= '0' && ch <= '9')
    n = (n<<3) + (n<<1) + ch - '0', ch = gc();
  n = n*sign;
}

inline void outp(llu a)
{
  char snum[25];
  int i=0;
  do
  {
    snum[i++]=a%10+48;
    a=a/10;
  } while(a!=0);
  i=i-1;
  while(i>=0)
    pc(snum[i--]);
  pc('\n');
}

/* Main Code sarts here */

llu n,m;
llu arr[MAX];
struct node
{
    int best,longestSuffix,longestPrefix,firstElement,lastElement,length;
}tree[MAX<<2];

void reset()
{
}

void input()
{
    inp(n);inp(m);
    for(int i=1;i<=n;++i)
    {
        inp(arr[i]);
    }
}

void combine(int node)
{
    tree[node].longestPrefix = tree[2*node].longestPrefix;
    tree[node].longestSuffix = tree[2*node+1].longestSuffix;
    tree[node].firstElement = tree[2*node].firstElement;
    tree[node].lastElement = tree[2*node+1].lastElement;
    tree[node].length = tree[2*node].length + tree[2*node+1].length;
    tree[node].best = (max(tree[2*node].best,tree[2*node+1].best));
    if(tree[2*node].lastElement + 1 == tree[2*node+1].firstElement)
    {
        tree[node].best = max(tree[node].best,(tree[2*node].longestSuffix + tree[2*node+1].longestPrefix));
        if(tree[2*node].length == tree[2*node].longestPrefix)
        {
            tree[node].longestPrefix = tree[2*node].longestPrefix + tree[2*node+1].longestPrefix;
        }
        if(tree[2*node+1].length == tree[2*node+1].longestSuffix)
        {
            tree[node].longestSuffix = tree[2*node+1].longestSuffix + tree[2*node].longestSuffix;
        }
    }
}

void initialize(int node,int b, int e)
{
      if (b == e)
      {
          tree[node].firstElement = tree[node].lastElement = arr[b];
          tree[node].best = tree[node].longestPrefix = tree[node].longestSuffix = tree[node].length = 1;
      }
      else
     {
          int mid = (b+e)>>1;
          initialize(2*node, b, mid);
          initialize(2*node+1, mid+1, e);
          combine(node);
      }
}

void update(int node, int b, int e, int i, int j, int value)
{
	if(b > e || b > j || e < i) return;

  	if(b==e)
    {
        tree[node].firstElement = tree[node].lastElement = value;
        tree[node].best = tree[node].longestPrefix = tree[node].longestSuffix = tree[node].length = 1;
        return;
	}
	int mid = (b+e)>>1;
	update(node*2, b, mid , i, j, value);
	update(1+node*2, mid+1, e, i, j, value);
	combine(node);
}

void preprocess()
{
    initialize(1,1,n);
}

void solve()
{
    //puts("firstElement,lastElement,longestPrefix,longestSuffix,length,best");
    //for(int i=1;i<=2*n+2;++i){debug(i,tree[i].firstElement,tree[i].lastElement,tree[i].longestPrefix,tree[i].longestSuffix,tree[i].length,tree[i].best);}
    cout<<tree[1].best<<endl;
    for(int i=1;i<=m;++i)
    {
        int x,y;
        cin>>x>>y;
        arr[x]=y;
        update(1,1,n,x,x,y);
        //for(int i=1;i<=2*n+2;++i){debug(i,tree[i].firstElement,tree[i].lastElement,tree[i].longestPrefix,tree[i].longestSuffix,tree[i].length,tree[i].best);}
        cout<<tree[1].best<<endl;
    }
}

int main()
{
   llu t=1;
   //inp(t);
   while(t--)
   {
	   reset();
	   input();
	   preprocess();
	   solve();
   }
   return 0;
}
