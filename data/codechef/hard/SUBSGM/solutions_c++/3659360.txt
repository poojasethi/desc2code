#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
using namespace std;

const int N = 100100;
const int INF = -( 1 << 30 );

int off = 1;
int n;
int m;

struct node {
    int pref, suff, wh_pref, wh_suff, full, val;
    node( ) {
        pref = suff = 0;
        wh_pref = wh_suff = -INF;
        full = 0;
        val = 0;
    }
}T[ ( 1 << 20 ) + 10 ];

inline node merge( const node &A, const node &B ) {
    node C;
    if( A.full && A.wh_suff == B.wh_pref - 1 ) {
        C.pref = A.pref + B.pref;
        C.val = max( C.val, A.pref + B.pref );
    }
    else C.pref = max( C.pref, A.pref );
   // printf( "B.wh_preff == %d, A.wh_suff == %d\n", B.wh_pref, A.wh_suff );
   // printf( "B.full == %d\n", B.full );
    if( B.full && B.wh_pref == A.wh_suff + 1 ) {
      //  printf( "UDJI SLOBODNO\n" );
        C.suff = B.suff + A.suff;
        C.val = max( C.val, B.suff + A.suff );
    }
    else C.suff = max( C.suff, B.suff );
    C.wh_suff = B.wh_suff;
    C.wh_pref = A.wh_pref;
    if( A.full && B.full && A.wh_suff == B.wh_pref - 1 ) C.full = 1;
    C.val = max( max( A.val, B.val ), C.val );
    if( A.wh_suff == B.wh_pref - 1 ) C.val = max( C.val, A.suff + B.pref );
    return C;
}

inline void load( ) {
    scanf( "%d %d", &n, &m );
    while( off < n ) off <<= 1;
    for( int i = 0; i < n; i++ ) {
        scanf( "%d", &T[ i + off ].wh_pref );
        T[ i + off ].wh_suff = T[ i + off ].wh_pref;
        T[ i + off ].full = 1;
        T[ i + off ].val = 1;
        T[ i + off ].pref = T[ i + off ].suff = 1;
    }
}

inline void solve( ) {
    for( int i = off - 1; i >= 1; i-- ) {
        T[ i ] = merge( T[ i * 2 ], T[ i * 2 + 1 ] );
       /* printf( "i == %d\n", i );
        printf( "suff, pref == %d %d\n", T[ i ].suff, T[ i ].pref );
        printf( "wh_suff, wh_pref == %d %d\n", T[ i ].wh_suff, T[ i ].wh_pref );
        printf( "ans, ful %d %d\n", T[ i ].val, T[ i ].full );
        system( "pause" )*/
    }
    printf( "%d\n", T[ 1 ].val );
    for( int i = 0; i < m; i++ ) {
        int pos, val;
        scanf( "%d %d", &pos, &val );
        pos--;
        pos += off;
        T[ pos ].wh_pref = T[ pos ].wh_suff = val;
        for( pos >>= 1; pos >= 1; pos >>= 1 ) {
            T[ pos ] = merge( T[ pos * 2 ], T[ pos * 2 + 1 ] );
            /*printf( "pos == %d\n", pos );
            printf( "values::\n" );
            printf( "pref, suff %d %d\n", T[ pos ].pref, T[ pos ].suff );*/
        }
        printf( "%d\n", T[ 1 ].val );
        //system( "pause" );
    }
}

int main( void ) {
    load( );
    solve( );
    //system( "pause" );
    return 0;
}
        
