#include <iostream>
#include<stdio.h>
using namespace std;
int a[100005];
struct tre
{
    int s;
    int m;
    int e;
    int sz;
}T[4*100005];
void build(int node,int i,int j)
{
    if(i==j)
    {
        T[node].s=1;
        T[node].e=1;
        T[node].m=1;
        T[node].sz=1;
        return;
    }
    int mid=(i+j)/2,lt=node*2,rt=node*2+1;
    build(lt,i,mid);
    build(rt,mid+1,j);
    T[node].s=T[lt].s;
    T[node].e=T[rt].e;
    T[node].sz=T[lt].sz+T[rt].sz;
    T[node].m=max(T[lt].m,T[rt].m);
    if(a[mid]+1==a[mid+1])
    {T[node].m=max(T[node].m,T[lt].e+T[rt].s);
    if(T[lt].s==T[lt].sz)
    T[node].s=T[rt].s+T[lt].sz;
    if(T[rt].e==T[rt].sz)
    T[node].e=T[lt].e+T[rt].sz;
    }
}
void update(int node,int i,int j,int idx,int val)
{
    if(i==j)
    {
       T[node].s=1;
        T[node].e=1;
        T[node].m=1;
        T[node].sz=1;
        return;
    }
    int mid=(i+j)/2,lt=node*2,rt=lt+1;
    if(mid>=idx)
    update(node*2,i,mid,idx,val);
    else
    update(node*2+1,mid+1,j,idx,val);
    T[node].s=T[lt].s;
    T[node].e=T[rt].e;
    T[node].sz=T[lt].sz+T[rt].sz;
    T[node].m=max(T[lt].m,T[rt].m);
    if(a[mid]+1==a[mid+1])
    {T[node].m=max(T[node].m,T[lt].e+T[rt].s);
    if(T[lt].s==T[lt].sz)
    T[node].s=T[lt].sz+T[rt].s;
    if(T[rt].e==T[rt].sz)
    T[node].e=T[rt].sz+T[lt].e;
    }
}
int main()
{
    //freopen("inp.txt","r",stdin);
    //freopen("out1.txt","w",stdout);
    int i,n,m,x,y;
    cin>>n>>m;
    for(i=0;i<n;i++)
    cin>>a[i];
    build(1,0,n-1);
    //for(i=1;i<=2*n;i++)
    //cout<<T[i].s[2]<<" "<<T[i].m[2]<<" "<<T[i].e[2]<<endl;
    cout<<max(max(T[1].s,T[1].m),T[1].e)<<endl;
    //for(i=0;i<n;i++)
    //cout<<i<<" "<<a[i]<<endl;
    while(m--)
    {
       cin>>x>>y;
       a[x-1]=y;
       update(1,0,n-1,x-1,y);
    //for(i=1;i<=2*n;i++)
    //cout<<T[i].s<<" "<<T[i].m<<" "<<T[i].e<<endl;
       cout<<max(max(T[1].s,T[1].m),T[1].e)<<endl;
    }
    return 0;
}
