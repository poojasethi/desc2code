//TC

#include <algorithm>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>
#include <queue>
#include <stack>
#include <cmath>
#include <list>
#include <set>
#include <map>

#define forn(a,b,c) for(int (a)=(b);(a)<=(c);(a)++)
#define forr(a,b,c) for(int (a)=(b);(a)>=(c);(a)--)
#define foreach(a,b) for( typeof( (b).begin() ) a=(b).begin(); (a)!=(b).end() ; (a)++ )
#define foreachr(a,b) for( typeof( (b).rbegin() ) a=(b).rbegin(); (a)!=(b).rend() ; (a)++ )
#define dg(x)  cerr <<#x<<':'<<x<<" "
#define dbg(x)  cerr <<#x<<':'<<x<<endl
#define SET(A,b) memset(A,b,sizeof (A) )
#define SIZE(A) ((int)(A).size())
#define ALL(A) (A).begin(),(A).end()
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define num(a) (1LL<<(a))
using namespace std;

typedef double dbl;
typedef long long Lint;
typedef pair<int,int> ii;
typedef pair<Lint,Lint> Lii;

const Lint mod = 1e9;

const int MAXN = 100010;

struct node{
	
	int Max,L,Ls,R,Rs,Sz;
	
	void init(){
		Max=Sz=Rs=Ls=0;
		L=R=-1;
	}
	
	node(int x=0){
		Max=1;Ls=1;Rs=1;Sz=1;
		L=R=x;
	}
	
	friend node operator + (const node &a,const node &b){
		
		node ret;
		
		ret.L=a.L;
		ret.Ls=a.Ls;
		ret.R=b.R;
		ret.Rs=b.Rs;
		ret.Max=max(a.Max,b.Max);
		ret.Sz=a.Sz+b.Sz;
		if( a.R+1==b.L )
		{
			ret.Max=max( ret.Max,a.Rs+b.Ls );
			if( b.Ls==b.Sz )
				ret.Rs=b.Sz+a.Rs;
			if( a.Rs==a.Sz )
				ret.Ls=a.Sz+b.Ls;
		}
		return ret;
	}
	
	void print(){
		printf("%d %d   %d %d   %d %d\n",Max,Sz,L,Ls,R,Rs);
		puts("");
	}
	
}kd[MAXN*5];

node upd(int k,int b,int e,int x,int y){
	if(e<x || b>x)	return kd[k];
	if(b==e)	return kd[k]=node(y);
	kd[k]=upd(k*2,b,(b+e)/2,x,y)+upd(k*2+1,(b+e)/2+1,e,x,y);
	//~ printf("---------------%d--------------\n",k);
	//~ kd[k].print();
	return kd[k];
}

int main(){
	
	int a,b,n,m;
	
	scanf("%d %d",&n,&m);
	
	forn(i,1,n*5)
		kd[i].init();
	
	forn(i,1,n)
	{
		scanf(" %d",&a);
		upd(1,1,n,i,a);
		//~ puts("");
	}
	
	cout << kd[1].Max << endl;
	
	forn(i,1,m)
	{
		scanf("%d %d",&a,&b);
		upd(1,1,n,a,b);
		cout << kd[1].Max << endl;
	}
	
	return 0;
	
}
