#include <iostream>

using namespace std;

int maxval[400005], lval[400005], rval[400005], lef[400005], rig[400005], a[400005];

void initialise(int pos, int s, int e)
{
        if(s == e) {
            lef[pos] = 1;
            rig[pos] = 1;
            lval[pos] = a[s];
            rval[pos] = a[s];
            //len[pos] = 1;
            maxval[pos] = 1;
            return ;
        }
        initialise(pos*2+1, s, (s+e)/2);
        initialise(pos*2+2, (s+e)/2 + 1, e);
        lval[pos] = lval[pos*2+1];
        rval[pos] = rval[pos*2+2];
        if(rig[pos*2+1] == (s+e)/2-s+1 && rval[pos*2+1]-lval[pos*2+2] == -1) {
            lef[pos] = lef[pos*2+1] + lef[pos*2+2];
        }
        else {
            lef[pos] = lef[pos*2+1];
        }
        if(lef[pos*2+2] == e-(s+e)/2 && rval[pos*2+1]-lval[pos*2+2] == -1) {
            rig[pos] = rig[pos*2+2] + rig[pos*2+1];
        }
        else {
            rig[pos] = rig[pos*2+2];
        }
        maxval[pos] = max(maxval[pos*2+1], maxval[pos*2+2]);
        maxval[pos] = max(lef[pos], max(rig[pos], maxval[pos]));
        if(rval[pos*2+1]-lval[pos*2+2] == -1) {
            maxval[pos] = max(maxval[pos], rig[pos*2+1]+lef[pos*2+2]);
        }
        return;
}

void update(int pos, int s, int e, int p, int val)
{
        if(s > e || s > p || p > e) return;
        if(s == p && s == e) {
            lef[pos] = 1;
            rig[pos] = 1;
            lval[pos] = val;
            rval[pos] = val;
            maxval[pos] = 1;
            return ;
        }
        if(p <= (s+e)/2) update(pos*2+1, s, (s+e)/2, p, val);
        else update(pos*2+2, (s+e)/2 + 1, e, p, val);
        lval[pos] = lval[pos*2+1];
        rval[pos] = rval[pos*2+2];
        if(rig[pos*2+1] == (s+e)/2-s+1 && rval[pos*2+1]-lval[pos*2+2] == -1) {
            lef[pos] = lef[pos*2+1] + lef[pos*2+2];
        }
        else {
            lef[pos] = lef[pos*2+1];
        }
        if(lef[pos*2+2] == e-(s+e)/2 && rval[pos*2+1]-lval[pos*2+2] == -1) {
            rig[pos] = rig[pos*2+2] + rig[pos*2+1];
        }
        else {
            rig[pos] = rig[pos*2+2];
        }
        maxval[pos] = max(maxval[pos*2+1], maxval[pos*2+2]);
        maxval[pos] = max(lef[pos], max(rig[pos], maxval[pos]));
        if(rval[pos*2+1]-lval[pos*2+2] == -1) {
            maxval[pos] = max(maxval[pos], rig[pos*2+1]+lef[pos*2+2]);
        }
        return;
}

int main()
{
    int n, m;

    cin >> n >> m;
   // a[0] = a[n+1] = 99999999;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }

    initialise(0, 0, n-1);
    cout << maxval[0] << endl;
    int x, y;
    for(int i = 0; i < m; i++) {
        cin >> x >> y;
        x--;
        a[x] = y;
        update(0, 0, n-1, x, y);
        cout << maxval[0] << endl;
        //cout << maxval[0] << " " << lval[0] << " " << rval[0] << " " << lef[0] << " " << rig[0] << endl;
    }

}
