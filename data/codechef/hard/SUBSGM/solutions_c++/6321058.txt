#include <bits/stdc++.h>
#define MAX 100005

using namespace std;

struct node {
    int ans;
    int left_ans;
    int right_ans;
    int left_val;
    int right_val;
}tree[4*MAX];

int A[MAX];

node combine(node p1, node p2, int left, int right)
{
    node ret;
    int len1 = (left+right)/2 - left + 1;
    int len2 = right-left+1 - len1;
    ret.left_val = p1.left_val;
    ret.right_val = p2.right_val;
    if ( p1.left_ans == len1 && p1.right_val+1 == p2.left_val ) ret.left_ans = len1 + p2.left_ans;
    else ret.left_ans = p1.left_ans;
    if ( p2.right_ans == len2 && p1.right_val+1 == p2.left_val ) ret.right_ans = len2 + p1.right_ans;
    else ret.right_ans = p2.right_ans;
    ret.ans = max(p1.ans, p2.ans);
    if ( p1.right_val+1 == p2.left_val ) ret.ans = max(ret.ans, p1.right_ans + p2.left_ans);
    return ret;
}

void build(int where, int left, int right)
{
    if ( left > right ) return;
    if ( left == right ) {
        tree[where].ans = tree[where].left_ans = tree[where].right_ans = 1;
        tree[where].left_val = tree[where].right_val = A[left];
        return;
    }
    int mid = (left+right)/2;
    build(where*2, left, mid);
    build(where*2+1, mid+1, right);
    tree[where] = combine(tree[where*2], tree[where*2+1], left, right);
}

void update(int where, int left, int right, int idx, int val)
{
    if ( left > right || left > idx || right < idx ) return;
    if ( left == right ) {
        tree[where].ans = tree[where].left_ans = tree[where].right_ans = 1;
        tree[where].left_val = tree[where].right_val = val;
        return;
    }
    int mid = (left+right)/2;
    update(where*2, left, mid, idx, val);
    update(where*2+1, mid+1, right, idx, val);
    tree[where] = combine(tree[where*2], tree[where*2+1], left, right);
}

int main()
{
    int n,q,x,y;
    cin >> n >> q;
    for ( int i = 0; i < n; i++ ) cin >> A[i];
    build(1,0,n-1);
    cout << tree[1].ans << endl;
    while ( q-- ) {
        cin >> x >> y;
        update(1,0,n-1,x-1,y);
        cout << tree[1].ans << endl;
    }
    return 0;
}
