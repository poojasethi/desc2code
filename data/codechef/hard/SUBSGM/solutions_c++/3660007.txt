/***********************************************
* Author - LUONG VAN DO                        *
* Problem 
* Algorithm
* Time Limit
* *********************************************/
#include <iostream>
#include <stdio.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <math.h>
#include <cstring>
#include <string.h>
#include <stdlib.h>
#include <algorithm>

#define FileIn(file) freopen(file".inp", "r", stdin)
#define FileOut(file) freopen(file".out", "w", stdout)
#define fr(i, a, b) for (int i=a;i<=b;i++)
#define frr(i, a, b) for (int i = b;i >= a;i--)
#define rep(i, n) for (int i=0; i<n; i++)
#define repr(i, n) for (int i = n - 1;i >= 0;i--)
#define fill(ar, val) memset(ar, val, sizeof(ar))
#define pb push_back
#define ff first
#define ss second
#define PI 3.1415926535897932385
#define uint64 unsigned long long
#define int64 long long
#define INF 500000000
#define N 100111

using namespace std;

inline int max(int a, int b) { return a > b ? a : b; }
inline int min(int a, int b) { return a < b ? a : b; }
inline int gcd(int a, int b) { if (a % b) return gcd(b, a % b); else return b; }
inline int lcm(int a, int b) { return (a * (b / gcd(a, b) )); }

inline int And(int mask, int bit) { return mask & (1 << bit); }
inline int Or(int mask, int bit) { return mask | (1 << bit); }
inline int Xor(int mask, int bit) { return mask & (~(1 << bit)); }

typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
struct node{
    int maxpar, maxleft, maxright, val;
    node(){}
    node(int _m1, int _m2, int _m3, int _m4){
        maxpar = _m1; maxleft = _m2; maxright = _m3; val = _m4;
    }
};
int n, m, x, y;
int a[N];
node tree[8 * N];
void build(int pos, int l, int r) {
    if (l == r) {
        tree[pos] = node(1, 1, 1, r);
        return;
    }
    int mid = (l + r) >> 1, c = 2 * pos;
    build(c, l, mid); build(c + 1, mid + 1, r);
    tree[pos].maxleft = tree[c].maxleft;
    tree[pos].maxright = tree[c + 1].maxright;
    tree[pos].maxpar = max(tree[c].maxpar, tree[c + 1].maxpar);
    if (a[mid] + 1 == a[mid + 1]) {
        tree[pos].maxpar = max(tree[pos].maxpar, tree[c + 1].maxleft + tree[c].maxright);
        if (tree[c].maxleft == (mid - l + 1))
        tree[pos].maxleft = tree[c].maxleft + tree[c + 1].maxleft;
    else
        tree[pos].maxleft = tree[c].maxleft;
    if (tree[c + 1].maxright == (r - mid))
        tree[pos].maxright = tree[c].maxright + tree[c + 1].maxright;
    else
        tree[pos].maxright = tree[c + 1].maxright;
    }
    //tree[pos].maxpar = max(tree[pos].maxpar, tree[c + 1].maxleft + tree[c].maxright);
}
void update(int pos, int u, int v, int l, int r) {
    if (r < u || l > v) return;
    if (u <= l && r <= v) {
        //tree[pos].maxleft = max(tree[2 * pos].maxleft, tree[2 * pos + 1].maxleft);
        //tree[pos].maxright = max(tree[2 * pos].maxright, tree[2 * pos + 1].maxright);
        //tree[pos].maxpar = max(tree[2 * pos].maxpar, tree[2 * pos + 1].maxpar);
        return;
    }
    int mid = (l + r) >> 1, c = 2 * pos;
    update(c, u, v, l, mid); update(c + 1, u, v, mid + 1, r);
    tree[pos].maxleft = tree[c].maxleft;
    tree[pos].maxright = tree[c + 1].maxright;
    tree[pos].maxpar = max(tree[c].maxpar, tree[c + 1].maxpar);
    if (a[mid] + 1 == a[mid + 1]) {
        tree[pos].maxpar = max(tree[pos].maxpar, tree[c + 1].maxleft + tree[c].maxright);
        if (tree[c].maxleft == (mid - l + 1))
        tree[pos].maxleft = tree[c].maxleft + tree[c + 1].maxleft;
    else
        tree[pos].maxleft = tree[c].maxleft;
    if (tree[c + 1].maxright == (r - mid))
        tree[pos].maxright = tree[c].maxright + tree[c + 1].maxright;
    else
        tree[pos].maxright = tree[c + 1].maxright;
    }
    //tree[pos].maxpar = max(tree[pos].maxpar, tree[c + 1].maxleft + tree[c].maxright);
}
int main() {
	//freopen("exam.inp","r", stdin); freopen("exam.out","w", stdout);
	scanf("%d %d", &n, &m);
	fr(i, 1, n) scanf("%d", &a[i]);
	build(1, 1, n);
	printf("%d\n", tree[1].maxpar);
	fr(i, 1, m) {
	    scanf("%d %d", &x, &y);
	    a[x] = y;
	    update(1, x, x, 1, n);
	    printf("%d\n", tree[1].maxpar);
	}
	return 0;
}
