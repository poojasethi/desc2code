#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 200005
#define NN 1025
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 1000000007
#define ln 2e9+1
#define cs 1331
#define Line pair < pair <ll, ll>, ll >
#define Pi pair < Pa , Pa >
#define Pa pair < ll, ll >

using namespace std;

int C[4*N], n, a[N], Pre[4*N], Suf[4*N], m;

void UPDATE(int node, int l, int r, int pos, int Val)
{
    if(l > pos || r < pos)  return;
    if(l == r)
    {
        Pre[node] = Suf[node] = 1;
        C[node] = 1;
        return;
    }
    int g = (l + r) / 2;
    UPDATE(node*2, l, g, pos, Val);
    UPDATE(node*2+1, g+1, r, pos, Val);
    if(Pre[2*node] == (g - l + 1) && a[l] == a[g+1])    Pre[node] = Pre[2*node] + Pre[2*node+1];
    else Pre[node] = Pre[2*node];
    if(Suf[2*node+1] == (r - g) && a[r] == a[g])    Suf[node] = Suf[2*node+1] + Suf[2*node];
    else    Suf[node] = Suf[2*node+1];
    C[node] = max(C[2*node], C[2*node+1]);
    if(a[g] == a[g+1])  C[node] = max(C[node], Suf[2*node] + Pre[2*node+1]);
}

int main()
{
   // filein("SUBSGM.inp");   fileout("SUBSGM.out");
    int u, x, y;
    cin >> n >> m;
    for(int i=1; i<=n; i++)
        a[i] = -ln;
    for(int i=1; i<=n; i++)
    {
        scanf("%d", &u);
        a[i] = u - i;
        UPDATE(1, 1, n, i, u-i);
    }
    cout << C[1] << endl;
    for(int i=1; i<=m; i++)
    {
        scanf("%d%d", &x, &y);
        a[x] = y - x;
        UPDATE(1, 1, n, x, y-x);
        printf("%d\n", C[1]);
    }
}
