#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdio>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 101010;

struct data{
    int G, L, R, Lval, Rval, sz;
    data(){
        G = L = R = sz = 0;
        Lval = Rval = -1;
    }
};

data tree[N * 5];

void update(int k,int b,int e,int x,int by){
    if(b > x || e < x) return;
    if(b == e){
        tree[k].sz = tree[k].G = tree[k].L = tree[k].R = 1;
        tree[k].Lval = tree[k].Rval = by;
        return;
    }
    update(k + k, b, (b + e) / 2, x, by);
    update(k + k + 1, (b + e) / 2 + 1, e, x, by);
    tree[k].sz = tree[k + k].sz + tree[k + k + 1].sz;
    tree[k].Lval = tree[k + k].Lval;
    tree[k].Rval = tree[k + k + 1].Rval;
    tree[k].G = max(tree[k + k].G, tree[k + k + 1].G);
    tree[k].L = tree[k + k].L;
    tree[k].R = tree[k + k + 1].R;
    if(tree[k + k].Rval + 1 == tree[k + k + 1].Lval){
        umax(tree[k].G, tree[k + k].R + tree[k + k + 1].L);
        if(tree[k + k].G == tree[k + k].sz)
            umax(tree[k].L, tree[k + k].sz + tree[k + k + 1].L);
        if(tree[k + k + 1].G == tree[k + k + 1].sz)
            umax(tree[k].R, tree[k + k + 1].sz + tree[k + k].R);
    }
}

int main(){

#ifdef KAZAR
	freopen("f.input","r",stdin);
	freopen("f.output","w",stdout);
	freopen("error","w",stderr);
#endif

    int n = read();
    int m = read();

    for(int i = 1; i <= n; i++){
        int x = read();
        update(1, 1, n, i, x);
    }

    printf("%d\n",tree[1].G);
    for(int i = 1; i <= m; i++){
        int x = read(), by = read();
        update(1, 1, n, x, by);
        printf("%d\n",tree[1].G);
    }

    return 0;
}
