#include <bits/stdc++.h>
using namespace std;

const int N = 100010;
struct tree
{
    int lt,rt,lval,rval,lmax,rmax,mx;
    int dis() {
        return rt - lt + 1;
    }
}a[N * 4];

int c[N];

void update(tree &p,tree q,tree r)
{
    p.lt = q.lt;
    p.rt = r.rt;
    p.lval = q.lval;
    p.rval = r.rval;
    p.lmax = q.lmax;
    if(p.lmax == q.dis() && q.rval == r.lval) p.lmax += r.lmax;
    p.rmax = r.rmax;
    if(p.rmax == r.dis() && q.rval == r.lval) p.rmax += q.rmax;
    p.mx = max(q.mx,r.mx);
    if(q.rval == r.lval) p.mx = max(p.mx,q.rmax + r.lmax);
}
    
void init(int lt,int rt,int step)
{
    a[step].lt = lt;
    a[step].rt = rt;
    if(lt == rt) {
        a[step].lmax = a[step].rmax = a[step].mx = 1;
        a[step].lval = a[step].rval = c[lt];
        return;
    }
    int mid = (lt + rt) >> 1;
    init(lt,mid,2 * step);
    init(mid + 1,rt,2 * step + 1);
    update(a[step],a[2 * step],a[2 * step + 1]);
}

void update(int pos,int step,int val)
{
    if(a[step].lt == a[step].rt) {
        a[step].lval = a[step].rval = val;
        return;
    }
    if(pos <= a[2 * step].rt) update(pos,2 * step,val);
    else update(pos,2 * step + 1,val);
    update(a[step],a[2 * step],a[2 * step + 1]);
}

int main()
{
    int n,m,x,y;
    scanf("%d%d",&n,&m);
    for(int i = 1; i <= n; i ++) {
        scanf("%d",&c[i]);
        c[i] -= i;
    }
    init(1,n,1);
    cout << a[1].mx << endl;
    while(m --) {
        scanf("%d%d",&x,&y);
        c[x] = y - x;
        update(x,1,c[x]);
        printf("%d\n",a[1].mx);
    }
    return 0;
}
