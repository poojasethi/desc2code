/*
	AC SAMO ZA PUNOLJETNU KAJU :)
	SRETAN RODJENDAN :D */




#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;


struct node {
	int left,right,start,end,mx,len;
	
	node(){}
	
	node(int a,int b,int c,int d,int e,int l) {
		left = a;
		right = b;
		start = c;
		end = d;
		mx = e;
		len = l;}};

struct tournament {
	node p[700100];
	
	void init() {
		for (int i = 1;i < 300100; i++)
			p[i] = node(0,0,0,0,0,0);}
	
	void merge(int cvor) {
		p[cvor].start = p[cvor * 2].start;
		p[cvor].end = p[cvor * 2 + 1].end;
		
		p[cvor].len = p[cvor * 2].len + p[cvor * 2 + 1].len;
		
		p[cvor].left = p[cvor * 2].left;
		
		if (p[cvor * 2].end + 1 == p[cvor * 2 + 1].start && p[cvor * 2].len == p[cvor * 2].left) 
			p[cvor].left += p[cvor * 2 + 1].left;
		
		p[cvor].right = p[cvor * 2 + 1].right;
		
		if (p[cvor * 2].end + 1 == p[cvor * 2 + 1].start && p[cvor * 2 + 1].right == p[cvor * 2 + 1].len)
			p[cvor].right += p[cvor * 2].right;
		
		p[cvor].mx = max(max(p[cvor].left, p[cvor].right), max(p[cvor * 2].mx,p[cvor * 2 + 1].mx));
		
		if (p[cvor * 2].end + 1 == p[cvor * 2 + 1].start)
			p[cvor].mx = max(p[cvor].mx, p[cvor * 2].right + p[cvor * 2 + 1].left);}
	
	void update(int x,int y) {
		p[x] = node(1,1,y,y,1,1);
		x /= 2;
		
		for (x; x > 0; x /= 2)
			merge(x);}
	
	int get() {
		return p[1].mx;}}T;

int n,m,x,y;

int main() {
	scanf("%d %d",&n,&m);
	
	for (int i = 0;i < n; i++) {
		scanf("%d",&x);
		T.update(i + (1 << 19), x);}
	
	printf("%d\n",T.get());
	
	while (m--) {
		scanf("%d %d",&x,&y);
		x--;
		T.update(x + (1 << 19), y);
		printf("%d\n",T.get());}
	
	return 0;}
