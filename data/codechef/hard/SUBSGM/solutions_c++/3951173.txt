//In the name of Allah
 
#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <algorithm>
#include <bitset>
#include <math.h>
#include <queue>
#include <map>
#include <set>
#include <limits.h>
#include <limits>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <assert.h>
using namespace std;

const int MAXN = 100005;

int tree_left[4 * MAXN], tree_right[4 * MAXN], tree_max[4 * MAXN];
void update(int i, int L, int R, int u){
    if(u < L || R < u)return;
    if(L == R){
        tree_left[i] ^= 1;
        tree_right[i] ^= 1;
        tree_max[i] ^= 1;
    
        return;
    }
    
    int mid = (L + R) / 2;
    update(2 * i, L, mid, u);
    update(2 * i + 1, mid + 1, R, u);
    
    if(tree_left[2 * i] == (mid - L + 1)){
        tree_left[i] = (mid - L + 1) + tree_left[2 * i + 1];
    }else tree_left[i] = tree_left[2 * i];
    
    if(tree_right[2 * i + 1] == (R - (mid + 1) + 1)){
        tree_right[i] = (R - (mid + 1) + 1) + tree_right[2 * i];
    }else tree_right[i] = tree_right[2 * i + 1];
    
    tree_max[i] = max(tree_max[2 * i], tree_max[2 * i + 1]);
    tree_max[i] = max(tree_max[i], tree_right[2 * i] + tree_left[2 * i + 1]);
    
    return;
}
int find_answer(){
    return tree_max[1];
}

int N, M, xi, yi, a[MAXN];
int main(){
    scanf("%d %d", &N, &M);
    for(int i = 0; i < N; i++)
        scanf("%d", &a[i]);
    for(int i = 0; i < N - 1; i++){
        if(a[i + 1] - a[i] == 1)update(1, 0, N - 1, i);
    }
    
    printf("%d\n", find_answer() + 1);
    while(M--){
        scanf("%d %d", &xi, &yi);
        xi--;
        
        if(xi + 1 < N){
            if(a[xi + 1] - a[xi] == 1)update(1, 0, N - 1, xi);
            if(a[xi + 1] - yi == 1)update(1, 0, N - 1, xi);
        }
        if(xi - 1 >= 0){
            if(a[xi] - a[xi - 1] == 1)update(1, 0, N - 1, xi - 1);
            if(yi - a[xi - 1] == 1)update(1, 0, N - 1, xi - 1);
        }
        a[xi] = yi;
    
        printf("%d\n", find_answer() + 1);
    }
    
    return 0;
}