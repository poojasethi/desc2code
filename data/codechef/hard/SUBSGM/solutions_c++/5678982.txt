#include <bits/stdc++.h>
using namespace std;

#define sd(x) scanf("%d", &x)
#define N 112345

int a[N], m[3*N], s[3*N], e[3*N];

inline void Construct(int node, int l, int r){
    if(l > r) {
        s[node] = -1;
        return;
    }
    if(l == r){
        s[node] = e[node] = m[node] = 1;
        return;
    }
    int mid = l + (r - l) / 2;
    Construct(2 * node, l, mid);
    Construct(2 * node + 1, mid + 1, r);
    m[node] = max(m[2 * node], m[2 * node + 1]);
    s[node] = s[2 * node];
    e[node] = e[2 * node + 1];
    if(a[mid + 1] == a[mid] + 1){
        if(s[2 * node] == mid - l + 1){
            s[node] += s[2 * node + 1];
        }
        if(e[2 * node + 1] == r - mid){
            e[node] += e[2 * node];
        }
        m[node] = max(m[node], e[2 * node] + s[2 * node + 1]);
    }
    return;
}

inline void Update(int node, int pos, int l, int r){
    if(pos < l or pos > r){
        return;
    }
    if(l == r){
        s[node] = e[node] = m[node] = 1;
        return;
    }
    int mid = l + (r - l) / 2;
    Update(2 * node, pos, l, mid);
    Update(2 * node + 1, pos, mid + 1, r);

    m[node] = max(m[2 * node], m[2 * node + 1]);
    s[node] = s[2 * node];
    e[node] = e[2 * node + 1];
    if(a[mid + 1] == a[mid] + 1){
        if(s[2 * node] == mid - l + 1){
            s[node] += s[2 * node + 1];
        }
        if(e[2 * node + 1] == r - mid){
            e[node] += e[2 * node];
        }
        m[node] = max(m[node], e[2 * node] + s[2 * node + 1]);
    }
    return;
}

int main(){
    //freopen("input.txt", "r", stdin);
    int n, q, i, pos, val;
    sd(n); sd(q);
    for(i = 1; i <= n; i++){
        sd( a[i] );
    }
    Construct(1, 1, n);
    printf("%d\n", m[1]);
    while(q--){
        sd(pos); sd(val);
        a[pos] = val;
        Update(1, pos, 1, n);
        printf("%d\n", m[1]);
    }
    return 0;
}
