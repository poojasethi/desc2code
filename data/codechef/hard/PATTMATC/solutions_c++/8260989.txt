
#include<bits/stdc++.h>
#define all(x) x.begin(), x.end()
#define pb(x) push_back(x)
#define cout2(x, y) cout << x << " " << y << endl
#define N 100005
#define INF (1<<20)

using namespace std;


int B[N], len[505], memo[505][N];
bool vis[505][N];

void process(string &pat){
	
	B[0] = -1;
	for(int i = 1, j = -1; i <= pat.size(); i++){
		
		while(j != -1 && pat[i - 1] != pat[j])j = B[j];
		B[i] = ++j;
	}
	
}

char text[N], T[N];

void search(int id, string &pat){
	
	int n = strlen(text), m = pat.size();
	
	for(int i = 1, j = 0; i <= n; i++){
		
		while(j != -1 && text[i - 1] != pat[j])j = B[j];
		j++;
		
		if(j == m)vis[id][i - m] = true, j = B[j];
	}
}



int main(){

	int tc = 0;
	scanf("%d", &tc);
	
	while(tc--){
		
		scanf("%s%s", T, text);
		int n = strlen(text), lenT = strlen(T);
		
		vector<string>v;
		string aux = "";
			
		for(int i = 0; i < lenT; i++){
				
			if(T[i] == '*'){
				
				if(aux != "")v.pb(aux);
				aux = "";	
			}
			else aux += T[i];
		}
		
		if(aux != "")v.pb(aux);
		int m = v.size();
		
		if(m == 0){
			
			for(int i = 0; i < n; i++){
		
				if(i)printf(" ");
				printf("%d", i + 1);
			}
			
		}
		else{
			
			for(int j = 0; j <= m; j++){
				for(int i = 0; i <= n; i++){
					
					vis[j][i] = false;
					memo[j][i] = INF;
				}
			}
					
			for(int i = 0; i < m; i++){
				
				process(v[i]);
				len[i] = v[i].size();	
				search(i, v[i]);
			}
	
				for(int j = 0; j < m; j++)memo[j][n] = INF;
				for(int i = n - 1; i >= 0; i--){
				
					if(vis[m - 1][i])memo[m - 1][i] = i + len[m - 1];
					else memo[m - 1][i] = memo[m - 1][i + 1];
					
				}
				//cout2("MIRA :", m);
				for(int j = m - 2; j >= 0; j--){
					for(int i = n - 1; i >= 0; i--){
						
						memo[j][i] = memo[j][i + 1];
						if(vis[j][i])memo[j][i] = min(memo[j][i], memo[j + 1][i + len[j]]);	
						//printf("%d %d %d\n", j, i, memo[j][i]);
					}	
				}
			

			for(int i = 0; i < n; i++){
		
				if(memo[0][i] >= INF)memo[0][i] = -1;
	
				if(i)printf(" ");
				printf("%d", memo[0][i]);
			}
		}
			
		puts("");
	}


}
