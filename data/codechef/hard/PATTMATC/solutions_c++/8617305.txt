#include<iostream>
#include<string>
#include<vector>
#include<stdio.h>
#include<algorithm>
using namespace std;
 vector<int> KMP(string text, string pattern){
    int lps[pattern.length()];               //lps formation
    lps[0]=0;
    int i=1,index=0;
    for(;i<pattern.length();){
        if(pattern[i]==pattern[index]){
            lps[i]=index+1;
            i++;
            index++;
        }
        else if(index==0){
            lps[i]=0;
            i++;
        }
        else
            index=lps[index-1];
    }
    vector<int> V;              //search start
    i=0; index=0;
    while(i<text.length()){
        if(index==pattern.length()){
            V.push_back(i-index);
            index=lps[index-1];
        }
        else if(text[i]==pattern[index]){
            i++;
            index++;
        }
        else if(index==0)
            i++;
        else
            index=lps[index-1];
    }
    if(index==pattern.length()){
        V.push_back(i-index);
    }
    return V;
}
//main function
int main(){
    int Tn;
    string S,T;
    scanf("%d",&Tn);
    while(Tn--){
    	int i,j;
        cin>>T>>S;
        string str="";
        int k;
        vector<string> Vstr;
        for(i=0;i<T.length();i++){
            if(T[i]=='*'){
                if(str!=""){
                    Vstr.push_back(str);
                    str = "";
                }
            }
            else
                str+=T[i];
        }
        if(str!="")
            Vstr.push_back(str);
        if(Vstr.size()==0){
            for(i=0;i<S.length();i++)
                printf("%d ",i+1);
        }
        else{
            vector<int> Vtemp;
            for(i=0;i<S.length();i++)
                Vtemp.push_back(i-1);

            for(j=0;j<Vstr.size();j++){
                vector<int> V=KMP(S,Vstr[j]);
                k=0;
                for(i=0;i<S.length() && Vtemp[i]!=-2;i++){
                    if (k == V.size())
                        Vtemp[i] = -2;
                    else if (Vtemp[i] >= V[k]) {
                        k++;
                        i--;
                    }
                    else
                        Vtemp[i] = V[k] + Vstr[j].length() - 1;
                }
            }

            for(i=0;i<Vtemp.size();i++)
                printf("%d ",Vtemp[i]+1);
        }
        printf("\n");
    }
    return 0;
}