#include<iostream>
#include<string>
#include<vector>

using namespace std;

void computeLPSArray(string pat, int M, int *lps)
{
    int len = 0;
    int i;

    lps[0] = 0;
    i = 1;

    while (i < M)
    {
        if (pat[i] == pat[len])
        {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            if (len != 0)
            {
                len = lps[len-1];
            }
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}

vector<int> kmp(string pat, string txt)
{
    vector<int> v;

    int M = pat.length();
    int N = txt.length();

    int lps[M];
    int j  = 0;

    computeLPSArray(pat, M, lps);

    int i = 0;
    while (i < N)
    {
        if (pat[j] == txt[i])
        {
            j++;
            i++;
        }

        if (j == M)
        {
            v.push_back(i-j);
            j = lps[j-1];
        }
        else if (i < N && pat[j] != txt[i])
        {
            if (j != 0)
                j = lps[j-1];
            else
                i = i+1;
        }
    }

    return v;
}

int main()
{
    int Tn,i,j,k;
    string S,T;
    cin>>Tn;
    while(Tn--)
    {
        cin>>T>>S;

        string p="";
        vector<string> v;
        for(i=0;i<T.size();i++)
        {
            if(T[i]=='*')
            {
                if(p!="")
                {
                    v.push_back(p);
                    p = "";
                }
            }
            else
                p+=T[i];
        }
        if(p!="")
            v.push_back(p);

        if(v.size()==0)
        {
            for(i=0;i<S.size();i++)
                cout<<i+1<<" ";
        }
        else
        {
            vector<int> w;
            for(i=0;i<S.size();i++)
                w.push_back(i-1);

            for(j=0;j<v.size();j++)
            {
                vector<int> u=kmp(v[j],S);
                k=0;
                for(i=0;i<S.size() && w[i]!=-2;i++)
                {
                    if (k == u.size())
                        w[i] = -2;
                    else if (w[i] >= u[k]) {
                        k++;
                        i--;
                    }
                    else
                        w[i] = u[k] + v[j].size() - 1;
                }
            }

            for(i=0;i<w.size();i++)
                cout<<w[i]+1<<" ";
        }
        cout<<endl;
    }
    return 0;
}