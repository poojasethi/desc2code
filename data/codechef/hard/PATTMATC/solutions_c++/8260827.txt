#include<bits/stdc++.h>
using namespace std;
 
#define sd(mark) scanf("%d",&mark)
#define slld(mark) scanf("%lld",&mark)
#define clr(mark) memset(mark,0,sizeof(mark))
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define pii pair<int,int>
#define ll long long
vector<int> v[1000];
int len[1000];
char s[100010],t[100010];
char temp[100010];
int lps[100010];

void computeLPSArray(char *pat, int M, int *lps);
void KMPSearch(char *pat, char *txt,int pos,int M)
{
    int N = strlen(txt);
 
    int j  = 0;  // index for pat[]
 
    computeLPSArray(pat, M, lps);
 
    int i = 0;  // index for txt[]
    while (i < N)
    {
      if (pat[j] == txt[i])
      {
        j++;
        i++;
      }
 
      if (j == M)
      {
        v[pos].PB(i-j);
        j = lps[j-1];
      }
 
      else if (i < N && pat[j] != txt[i])
      {
        if (j != 0)
         j = lps[j-1];
        else
         i = i+1;
      }
    }
}
 
void computeLPSArray(char *pat, int M, int *lps)
{
    int len = 0;
    int i;
 
    lps[0] = 0; 
    i = 1;
 
    
    while (i < M)
    {
       if (pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else
       {
         if (len != 0)
         {
           len = lps[len-1];
 
          }
         else
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}
int main()
{
	int tn,ls,lt,i,j;
	sd(tn);
	while(tn--)
	{
		int cnt=0;
		for(i=0;i<1000;++i)
			v[i].clear();
		scanf("%s",&s);
		scanf("%s",&t);
		ls=strlen(s);
		lt=strlen(t);
		int c=0;
		for(i=0;i<ls;++i)
		{
			if(s[i]=='*')
			{
				if(c)
				{
					temp[c]='\0';
					len[cnt]=c;
					KMPSearch(temp,t,cnt,c);
					cnt++;
				}
				c=0;
			}
			else
				temp[c++]=s[i];
		}
		if(c)
		{
			temp[c]='\0';
			len[cnt]=c;
			KMPSearch(temp,t,cnt,c);
			cnt++;
		}
		c=0;
		//cout<<cnt<<'\n';
		if(cnt==0)
		{
			for(i=0;i<lt;++i)
				printf("%d ",i+1);
			printf("\n");
			continue;
		}
		for(i=0;i<lt;++i)
		{
			int st=i;
			bool f=0;
			for(j=0;j<cnt;++j)
			{
				int val=lower_bound(v[j].begin(),v[j].end(),st)-v[j].begin();
				if(val==v[j].size())
				{
					f=1;
					break;
				}
				st=v[j][val]+len[j];
			}
			if(f)
				st=-1;
			printf("%d ",st);
		}
		printf("\n");
	}
}