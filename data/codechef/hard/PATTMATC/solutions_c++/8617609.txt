#include<bits/stdc++.h>
#define S(n) scanf("%d", &(n))
#define P(n) printf("%d", (n))
#define SL(n) scanf("%lld", &(n))
#define PL(n) printf("%lld", (n))
#define pb push_back
#define mp make_pair
#define ll long long
#define DEBUG cout<<"HELLO"
#define SP printf(" ")
#define NL printf("\n")
#define N 200006
#define M 1000000007
using namespace std;
vector<int> buildKMP(const string &needle)
{
    int m = needle.size();
    vector<int> kmp(m+1);
    int i = 0,j = -1;
    kmp[0] = -1;
    while(i<m)
    {
        while(j!=-1 && needle[j]!=needle[i])
            j = kmp[j];

        i++;
        j++;

        kmp[i] = j;

    }
    return kmp;
}

char wildcard[111111], tmp[111111];
int dp[111111][555];
int mark[111111];
int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	int tc=1;
	S(tc);getchar();
	for(int t=1;t<=tc; t++)
	{
	    cin>>wildcard;
	    string haystack;
	    cin>>haystack;
	    
        vector<string>arr;
        int i = 0;
        while(wildcard[i]!=0)
        {
            while(wildcard[i]=='*')i++;
            int l=0;
            while(wildcard[i]!='*' && wildcard[i]!=0)tmp[l++] = wildcard[i++];
            tmp[l] = 0;
            if(l>0)
            {
                string tmpstr(tmp);arr.pb(tmpstr);
            }
        }
        memset(dp, 0, sizeof(dp));
        for(int x=0;x<arr.size();x++)
        {
            string needle = arr[x];
            vector<int> kmp = buildKMP(needle);
            int j = 0;
            int i  = 0;

            int n = haystack.size();
            int m = needle.size();
            memset(mark, 0, sizeof(mark));
            while(i<n)
            {
                while(j!=-1 && haystack[i]!=needle[j])
                    j = kmp[j];

                i++;
                j++;

                if(j == m)
                {
                    mark[i-j+1] = 1;
                    //return i-j; //For all matches push_back over here
                    j = kmp[j];
                }
            }
            for(int j=n;j>=1;j--)
            {
                if(j!=n)dp[j][x] = dp[j+1][x];
                if(mark[j]==1)
                {
                    dp[j][x] = j;
                }
            }
        }
    
        for(int i=1; i<=haystack.size();i++)
        {
            
            int idx = i, next = i;if(arr.size()==0)next=i+1;
            for(int j=0;j<arr.size();j++)
            {
                if(next>haystack.size() || idx==0)
                {
                    idx = 0;
                    continue;
                }
                idx = dp[next][j];
                next = idx + arr[j].size();
            }
            if(idx==0)next = 0;
            P(next-1);SP;
        }
        NL;
	}

}