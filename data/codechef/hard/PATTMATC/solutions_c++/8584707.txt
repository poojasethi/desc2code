#include<cstdio>
#include<iostream>
#include<list>
#include<vector>
#include<queue>
#include<stdarg.h>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<string>
#include<cstring>
#include<set>
#include<map>
 
using namespace std;
 
#define lli long long int
#define DEBUG 1
 
#define SPACE(a) #a << " " << a << " " <<
#define print1(a) cout << SPACE(a) endl;
#define print2(a, b) cout << SPACE(a) SPACE(b) endl;
#define print3(a, b, c) cout << SPACE(a) SPACE(b) SPACE(c) endl;
#define print4(a, b, c, d) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) endl;
#define print5(a, b, c, d, e) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) endl;
#define print6(a, b, c, d, e, f) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) SPACE(f) endl;
#define print7(a, b, c, d, e, f, g) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) SPACE(f) SPACE(g) endl;
#define print8(a, b, c, d, e, f, g, h) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) SPACE(f) SPACE(g) SPACE(h) endl;
#define print9(a, b, c, d, e, f, g, h, i) cout << SPACE(a) SPACE(b) SPACE(c) SPACE(d) SPACE(e) SPACE(f) SPACE(g) SPACE(h) SPACE(i) endl;
 
#define GET_MACRO(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, NAME, ...) NAME
#if defined DEBUG
#define print(...) GET_MACRO(_0, ##__VA_ARGS__, print9, print8, print7, print6, print5, print4, print3, print2, print1, print0)(__VA_ARGS__)
#else
#define print(...) ;
#endif
 
#define gc getchar_unlocked
inline void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}
 
string pat[501];
 
void dump(int index)
{
    for (int i=0; i<index; i++) print(i, pat[i]);
}
 
#define MAX_SIZE 100005
int F[501][MAX_SIZE];
char text[MAX_SIZE];
 
inline void failure_function(int index)
{
    int j;
    F[index][0] = F[index][1] = 0;
    for (int i=2; i<=pat[index].length(); i++) {
        F[index][i] = 0;
        j = F[index][i-1];
        while (true) {
            if (pat[index][i-1] == pat[index][j]) {
                F[index][i] = j+1;
                break;
            }
            if (j == 0) break;
            j = F[index][j];
        }
    }
}
 
inline int process_kmp(int index, int start, int end)
{
    int i=start,j=0;
    while (i <= end) {
        if (text[i] == pat[index][j]) {
            i++; j++;
            if (j == pat[index].length()) return i;
        } else if (j == 0) {
            i++;
        } else {
            j = F[index][j];
        }
    }
    return -1;
}
 
int main()
{
    int T;
    scanf("%d", &T);
    int pindex=0;
    char ch=getchar_unlocked();
    bool last, first;
    int sz, m, temp;
    bool skip;
 
    while (T--) {
        //for (int i=0; i<pindex; i++) pat[i].clear();
        pat[0].clear();
        pindex = 0;
        last = false;
        first = true;
        skip = false;
        while (true) {
            ch = getchar_unlocked();
            if (ch == '\n') { 
                if (pat[pindex].length()) pindex++;
                break;
            }
            if (ch == '*') {
                if (first) {last = true; first=false; continue;}
                if (last) continue;
                last = true;
                pindex++;
                pat[pindex].clear();
                continue;
            }
            last = false;
            first = false;
            pat[pindex].push_back(ch);
        }
 
        //pre processing
        for (int i=0; i<pindex; i++) {
           failure_function(i); 
        }
        int index = 0;
        ch = getchar_unlocked();
        while (ch != '\n') {
            text[index++] = ch;
            ch = getchar_unlocked();
        }
        sz = index - 1;
        for (int i=0; i<=sz; i++) {
            if (skip) {
                if (i != sz) {
                    printf("-1 ");
                } else {
                    printf("-1\n");
                }
                continue;
            }

            if (pindex == 0) {
                m = i + 1;
            } else {
                m = i;
            }
 
            for (int j=0; j<pindex; j++) {
                m = process_kmp(j, m, sz);
                if (m == -1) {
                    skip = true;
                    break;
                }
            }
            if (i != sz) {
                printf("%d ", m);
            } else {
                printf("%d\n", m);
            }
        }
    }
 
}
