#include <bits/stdc++.h>
using namespace std;

#define PB push_back
#define MP make_pair
#define SZ size()
#define all(v) v.begin(), v.end()
#define REP(i, n) for(int i = 0; i < (int)n; i++)
#define ITR(i, j, n) for(int i = j; i < (int)n; i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Pii pair <int, int>
#define Fr first
#define Sc second
#define Long long long
#define si(a) scanf("%d", &a)
#define sl(a) scanf("%I64d", &a)
#define sd(a) scanf("%lf", &a)
#define sii(a, b) scanf("%d%d", &a, &b)
#define sll(a, b) scanf("%I64d%I64d", &a, &b)
#define sdd(a, b) scanf("%lf%lf", &a, &b)
#define Fast_IO ios_base::sync_with_stdio(0);cin.tie(0)
#define debug(x) cout << #x << ": " << x << endl;

#define MAX 100005
string text, P;
// O[i] keeps longest prefix of pattern that is also a suffix of text[0...i]
int fail[MAX], tot;
vector <int> vec[505], sz;

void kmp(string &pattern, vector <int> &O)
{
  // calculating fail
  fail[0] = 0;
  int j = 0;
  ITR(i, 1, pattern.SZ) {
    fail[i] = j;
    while(j > 0 && pattern[j] != pattern[i]) j = fail[j];
    if(pattern[j] == pattern[i]) j++;
  }
  fail[(int)pattern.SZ] = j;

  // calculating occurance
  j = 0;
  REP(i, text.SZ) {
    while(j > 0 && pattern[j] != text[i]) j = fail[j];
    if(pattern[j] == text[i]) j++;
    if(j == (int)pattern.SZ) O.PB(i - (int)pattern.SZ + 1), j = fail[j];
  }
  sz.PB(pattern.SZ);
}

int parse()
{
   tot = 0;
   string pattern = "";
   REP(i, P.SZ) {
      if(P[i] == '*') {
         if(pattern.SZ > 0) kmp(pattern, vec[tot++]);
         pattern = "";
      }
      else pattern += P[i];
   }
   if(pattern.SZ > 0) kmp(pattern, vec[tot++]);
   return tot;
}

int solve(int pos)
{
   if(!tot) return pos+1;
   int ret = pos;
   REP(i, tot) {
      vector <int>::iterator it = lower_bound(all(vec[i]), ret);
      if(it == vec[i].end()) return -1;
      ret = (*it) + sz[i];
   }
   return ret;
}

int main()
{
   int t;
   cin >> t;
   while(t--) {
      cin >> P >> text;
      parse();
      REP(i, text.SZ) {
         if(i) cout << ' ';
         int pi = solve(i);
         cout << pi;
      }
      cout << '\n';
      sz.clear();
      REP(i, tot) vec[i].clear();
   }

   return 0;
}
