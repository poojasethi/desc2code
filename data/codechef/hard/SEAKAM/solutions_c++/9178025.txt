#include <bits/stdc++.h>
using namespace std;
#define MAXN 100004
const int mod = (1e9)+7;

typedef long long ll;

ll fact[MAXN];
ll pw2[11];
ll ans ;

map<int, int> parent;
pair<int,int>  bad[8];

int n, m;

int find(int x) {
    return (x == parent[x]) ? x : find(parent[x]);
}
int check(int a, int b) {
    
    return find(a) == find(b);
}

void join(int a, int b) {
    parent[find(a)] = find(b);
}


void precompute( ) {
    fact[0] = fact[1] =1;
    
    for(int i = 2; i < MAXN ; i++) {
        fact[i] = i * fact[i-1];
        
        if(fact[i] >= mod) {
            fact[i] %= mod;
        }
    }
    
    pw2[0] = 1;
    
    for(int i =1; i <= 10; i++) {
        pw2[i] = 2 * pw2[i-1];
    }
}

void solvepwSet(vector<int> a, int index) {
    parent.clear();

    for(int i = 0; i < a.size(); i++) {
        pair<int, int> p = bad[a[i]];
        
        int x = p.first;
        int y = p.second;
        
        parent[x] = x;
        parent[y] = y;
    }
    
    int q = parent.size();
    int p = parent.size();
    
    bool isCycle = false;
    
    
    for(int i = 0 ; i< a.size(); i++) {
        
        pair<int ,int> p = bad[a[i]];
        
        int x = p.first;
        int y = p.second;
        
        isCycle = check(x, y);
        
        if(isCycle) {
            break;
        }
        
        join(x, y);
        q--;
    }
    
    map<int, int> temp;
    
    for(int i = 0; i < a.size() ; i++) {
        pair<int, int> p = bad[a[i]];
        
        int x = p.first;
        int y = p.second;
        
        temp[x] += 1;
        temp[y] += 1;
        
        if(temp[x] > 2 || temp[y] > 2) {
            isCycle = true;
            break;
        }
    }
    
    ll k;
    
    if(!isCycle) {
        
        k = fact[ n - p + q ] * pw2[q];
        
        if(k >= mod) {
            k%=mod;
        }
        
        if(a.size()%2 == 1) {
            ans = ans + mod - k;
            ans %= mod;
        } else {
            ans += k;
            ans %= mod;
        }
        
    }
    
    for(int i = index+1; i<m; i++) {
        vector<int> b = a;
        b.push_back(i);
        
        solvepwSet(b, i);
    }
}
void solve() {
    cin>>n>>m;

    ans = fact[n];
    
    for(int i = 0; i < m; i++) {
        cin>>bad[i].first>>bad[i].second;
    }
    
    for(int i = 0; i < m; i++) {
        vector<int> a;
        a.push_back(i);
        
        solvepwSet(a, i);
    }
    cout<<ans<<endl;
}
int main() {
    int t;
    scanf("%d", &t);
    precompute();
    
    while(t--) {
        
        solve();
    }
    
	return 0;
}
