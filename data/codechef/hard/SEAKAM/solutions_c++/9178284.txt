#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> PII;
typedef long long ll;

const int MOD = 1000000007;
const int MAXN = 100005;

map<int, int> mp;
map<int, int> :: iterator it_mp;

set<int> st;
set<int> :: iterator it_st;

queue<int>myq;

int edges[10][2];
ll fact[MAXN];
int N, M;


void Preprocess()
{
	int i;

	fact[0] = fact[1] = 1LL;

	for(i = 2 ; i < MAXN ; i++)
	{
		fact[i] = fact[i-1]*(ll)i;
		fact[i] %= MOD;
	}
	return ;
}

ll Get_Ans(int mask)
{
	int i, src, j;

	if(!mask)
		return fact[N];

	mp.clear();
	st.clear();

	for(i = 0 ; i < M ; i++)
	{
		if(mask&(1 << i))
		{
			for(j = 0 ; j < 2 ;j++)
			{
				it_mp = mp.find(edges[i][j]);
				if(it_mp != mp.end())
				{
					it_mp->second++;
					if(it_mp->second >2)
						return 0;
				}
				else
					mp[edges[i][j]] = 1;
			}
		}
	}

	int tot_ed = 0, components = 0 , pow_c = 1LL;

	for(it_mp = mp.begin(); it_mp != mp.end() ; it_mp++)
	{
		if(st.find(it_mp->first) != st.end())
			continue;

		bool cycle = true;
		st.insert(it_mp->first);

		myq.push(it_mp->first);

		while(!myq.empty())
		{
			src = myq.front();
			myq.pop();
			tot_ed++;
			if(mp.find(src)->second == 1)
				cycle = false;
			
			for(i = 0 ; i < M ; i++)
			{
				if((mask&(1<<i)) && edges[i][0] == src)
					if(st.find(edges[i][1]) == st.end())
						myq.push(edges[i][1]), st.insert(edges[i][1]);
				if((mask&(1<<i)) && edges[i][1] == src)
					if(st.find(edges[i][0]) == st.end())
						myq.push(edges[i][0]), st.insert(edges[i][0]);
			}
		}
		if(cycle == true)
			return 0;
		components++;
		pow_c *= 2;
	}

	ll ret = (fact[N - tot_ed + components]*pow_c)%MOD;

	return ret;
}

void solve()
{
	int i , mx, cnt_ones;
	ll ans = 0;

	scanf("%d%d", &N, &M);

	for(i = 0 ; i < M ;i++)
	{
		scanf("%d%d", &edges[i][0], &edges[i][1]);
	}

	mx = (1 << M);
	for(i = 0 ; i < mx ; i++)
	{
		cnt_ones = __builtin_popcount(i);

		ll temp_ans = Get_Ans(i);

		if(cnt_ones&1)
			ans = (ans + MOD - temp_ans)%MOD;
		else
			ans = (ans + temp_ans)%MOD;
	}

	printf("%lld\n",ans);
	return;
}


int main()
{
	int t;

	scanf("%d", &t);

	Preprocess();

	while(t--)
		solve();
	return 0;
}