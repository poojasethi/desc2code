#include <bits/stdc++.h>
#define mod 1000000007
#define ll long long
#define mp make_pair
using namespace std;
ll fact[100005];
ll n,m;
vector<pair <ll,ll> > v;
ll ans2;
class disjoint_set
{
    map<int,int> parent;
    public:
    void add(int i)
    {
        parent[i]=i;
    }
    int find(int i)
    {
        return i==parent[i]?i:parent[i]=find(parent[i]);
    }
    void merge(int x,int y)
    {
        int fx=find(x),fy=find(y);
        if(fx!=fy){
            parent[fx]=fy;
        }
    }
    int length()
    {
        return parent.size();
    }
};
void calc(ll i,ll k)
{
    ll f=0,j;
    disjoint_set ds;
    map<ll,ll> mp;
    for(j=0;j<k;j++){
        if(i&(1<<j)){
            f++;
            ll u1=v[j].first,v1=v[j].second;
            //<<"( "<<u1<<" , "<<v1<<" ) \n";
            ds.add(u1);
            ds.add(v1);
            mp[u1]++;
            mp[v1]++;
        }
    }
    ll x=ds.length(),y=ds.length();
    map<ll ,ll >::iterator it;
    for(it=mp.begin();it!=mp.end();++it){
        if(it->second>2)
            return ;
    }
    for(j=0;j<k;j++){
        if(i&(1<<j)){
            int u1=v[j].first,v1=v[j].second;
            //<<"( "<<u1<<" , "<<v1<<" ) \n";
            int a=ds.find(u1),b=ds.find(v1);
            if(a==b)
                return ;
            ds.merge(a,b);
            x--;
 
        }
    }
    //cout<<" hnvj "<<i<<"  "<<k<<" --1's = "<<x<<" --vertices = "<<y<<"  --edges = "<<f<<endl;
    ll ans,rem=n-y+x,z=1;
    ans=(fact[rem]*((z<<(x))%mod))%mod;
    //cout<<"int method "<<i<<"  "<<k<<"  "<<ans<<" \n";
    if(f%2!=0)
        ans2=(ans2+ans)%mod;
    else{
        ans2-=ans;
        if(ans2<0)
            ans2+=mod;
    }
}
int main()
{
    int t;
    ll i;
    fact[0]=1;
    for(i=1;i<=100004;i++)
        fact[i]=(i*fact[i-1])%mod;
    scanf("%d",&t);
    while(t--){
        v.clear();
        set<pair <ll ,ll > > st;
        scanf("%lld%lld",&n,&m);
        for(i=0;i<m;i++){
            ll u,v1;
            scanf("%lld%lld",&u,&v1);
            if(u>n || v1>n)
                continue;
            if(u!=v1 && st.find(mp(u,v1))==st.end()){
                st.insert(mp(u,v1));
                st.insert(mp(v1,u));
                v.push_back(mp(u,v1));
            }
        }
        ll ans1=fact[n];
        ans2=0;
        ll k=v.size(),j;
        for(i=1;i<(1<<k);i++)
            calc(i,k);
        ans1-=ans2;
        if(ans1<0)
            ans1+=mod;
        printf("%lld\n",ans1);
 
    }
    return 0;
} 