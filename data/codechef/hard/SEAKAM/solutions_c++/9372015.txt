#include<bits/stdc++.h>
using namespace std;
vector< pair < int , int > > edge;
vector < int > graph[100010];
int nodes,end,middle;
bool marked[100010];
void dfs(int vertex)
{
	if(graph[vertex].size()==1)end++;
	else if(graph[vertex].size()==2) middle++;
    marked[vertex]=1;
    nodes++;
	for(int i=0;i<graph[vertex].size();i++)
    {
        int j=graph[vertex][i];
		if(!marked[j])
             	dfs(j);
    }
}
int main()
{
	long long fac[100001];
	fac[0]=1;
	for(int i=1;i<100001;i++)
		fac[i]=(fac[i-1]*i)%1000000007;
	
	int pow2[100];
	pow2[0]=1;
	for(int i=1;i<100;i++)
		pow2[i]=pow2[i-1]*2;
	
	int t;
	cin>>t;
	
	while(t--)
	{
		long long ans=0;
		int n,m;
		cin>>n>>m;
		for(int i=0;i<m;i++)
				{
					int x,y;
					cin>>x>>y;
					edge.push_back(make_pair(x,y));
				}
 
		for(int z=0;z<(1<<m);z++)
		{
			int x=z;
			int setbit=0;
			int c=0;
			while(x)
			{
				if(x&1)
				{
					setbit++;
					graph[edge[c].second].push_back(edge[c].first);
					graph[edge[c].first].push_back(edge[c].second);
				}
				x=x>>1;
				c++;
			}
			
			for(int i=0;i<=n;i++)
				marked[i]=false;
			
			int connection=0;
			nodes=0;
			end=0;
			middle=0;
			for(int i=0;i<c;i++)
			{
				if(!marked[edge[i].first] && (z>>i)&1)
				{
					dfs(edge[i].first);
					connection++;
				}
			
			}
			if(end==connection*2 && middle==nodes-2*connection)
			{
				if(setbit%2==1)
					ans-=(pow2[connection]*fac[n-nodes+connection])%1000000007;
				else 
					ans+=(pow2[connection]*fac[n-nodes+connection])%1000000007;
			}
			for(int i=0;i<=n;i++)
			graph[i].erase(graph[i].begin(),graph[i].end());
		}
		cout<<(ans%1000000007+1000000007)%1000000007<<endl;
		edge.erase(edge.begin(),edge.end());
	}
}