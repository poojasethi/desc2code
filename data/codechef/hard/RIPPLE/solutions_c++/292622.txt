#include <iostream>
#include <cstdio>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <memory.h>
#include <cassert>

using namespace std;

#define fo(a,b,c) for (a = (b); a < (c); a++)
#define fr(a,b) fo(a, 0, (b))
#define fi(n) fr(i, (n))
#define fj(n) fr(j, (n))
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define _(a,b) memset((a), (b), sizeof(a))
#define __(a) memset((a), 0, sizeof(a))
#define sz(a) (int)(a).size()
#define mp make_pair
#define pb push_back

typedef long long lint;
typedef vector<int> VI;
typedef vector<string> VS;
typedef pair<int, int> PII;

void prepare()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
#endif
}

const int MAXN = 100005;
char ssa[MAXN], ssb[MAXN];
int a[MAXN], b[MAXN], kbb[MAXN], kaa[MAXN];
int n;

void solve()
{
	scanf("%d\n", &n);
	gets(ssa);
	gets(ssb);
	int ka = 0, kb = 0;
	a[0] = 0;
	b[0] = 0;
	for (int i = 1; i <= n; i++)
	{
		a[i] = ssa[n - i] - '0';
		b[i] = ssb[n - i] - '0';
		ka += a[i];
		kb += b[i];
	}
	int sa = 0, sb = 0;
	while (ka)
	{
		kaa[sa++] = ka & 1;
		ka >>= 1;
	}
	while (kb)
	{
		kbb[sb++] = kb & 1;
		kb >>= 1;
	}
	for (int i = 0; i <= n; i++)
	{
		a[i] -= kaa[i];
		while (a[i] < 0)
		{
			a[i] += 2;
			a[i + 1]--;
		}
	}
	for (int i = 0; i <= n; i++)
	{
		b[i] -= kbb[i];
		while (b[i] < 0)
		{
			b[i] += 2;
			b[i + 1]--;
		}
	}
	for (int i = 0; i <= n; i++)
	{
		b[i] -= a[i];
		while (b[i] < 0)
		{
			b[i] += 2;
			b[i + 1]--;
		}
	}
	for (int i = 0; i < sa; i++)
		kaa[i] = 0;
	for (int i = 0; i < sb; i++)
		kbb[i] = 0;
	int i;
	for (i = n; i > 0; i--)
		if (b[i])
			break;
	n = 0;
	for (; i >= 0; i--)
		ssa[n++] = '0' + b[i];
	ssa[n] = 0;
	printf("%s\n", ssa);
	//printf("\n");
}

int main()
{
	prepare();
	int i, k;
	scanf("%d\n", &k);
	for (i = 0; i < k; i++)
	solve();
	return 0;
}