#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>

#define pb push_back
#define mp make_pair
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define tr(c, i) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define rtr(c, i) for (typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); --i)
#define contains(c, x) ((c).find(x) != (c).end())
#define Contains(c, x) (find(all(c), x) != (c).end())
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, (n))
#define To_String to_string< char,std::char_traits<char>,std::allocator<char> >

typedef long long ll;
typedef unsigned long long ull;
using namespace std;

const int MAXN = 200000;
int A[MAXN], B[MAXN], C[MAXN];
void func(int* a, int* b, int& p)
{
	rep(i, MAXN) {
		a[i] = a[i] + p;
		if (a[i] > 1) {
			int x = a[i] / 2;
			int k = 1;
			while (x > 0) { if (x & 1) a[i+k]++; x >>= 1; k++; }
			a[i] %= 2;
		}
		if (b[i]) { b[i] = 0; p--; }
	}
}
void sub(int* a, int* b)
{
	rep(i, MAXN) {
		a[i] = a[i] - b[i];
		if (a[i] < 0) { a[i] += 2; a[i+1]--; }
	}
}
void print(int* a)
{
	int k = MAXN; while (k > 0 && a[k] == 0) k--;
	for (int i=k; i>=0; --i) cout << a[i];
	cout << endl;
}

int main()
{
	ios_base::sync_with_stdio(0);
	int T; cin >> T;
	while (T--) {
		int n; string a, b;
		cin >> n >> a >> b;
		int p;
		memset(A, 0, sizeof(A));
		memset(B, 0, sizeof(B));
		memset(C, 0, sizeof(C)); p = 0;
		rep(i, n) if (a[n-1-i] == '1') { C[i] = 1; p++; } func(A, C, p);
//cout<<"A: ";print(A);
		rep(i, n) if (b[n-1-i] == '1') { C[i] = 1; p++; } func(B, C, p);
//cout<<"B: ";print(B);
		sub(B, A);
		print(B);
	}
	return 0;
}
