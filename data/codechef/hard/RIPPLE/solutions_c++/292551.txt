#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <algorithm>
#include <cstdio>
#include "memory.h"
#include <bitset>
#include <iostream>
using namespace std;
#define FR(i,a,b)	for(int ( i)=(a); ( i)<(b); ++( i))
#define FRE(i,a,b)	for(int ( i)=(a); ( i)<=(b); ++( i))
#define MAX(a,b)	((a)>(b))?(a):(b)
#define MIN(a,b)	((a)<(b))?(a):(b)
#define I long long
#define VI vector<int>
#define VS vector<string>
#define MMS(a) memset(a,0,sizeof(a))

int main()
{
	int T;
	scanf("%d",&T);
	FR(testcnt,0,T)
	{
		int bits=0;
		scanf("%d", &bits);
		char a[100001],b[100001];
		scanf("%s %s", a, b);
		int ca=0, cb=0;
		FR(i,0,bits)
		{
			if(a[i]=='1')
				ca++;
			if(b[i]=='1')
				cb++;
		}
		int cra=0, crb=0;
		char sa[100001],sb[100001];
		int ja=0, jb=0;
		for(int i=bits-1; i>=0 ;i--,ja++, jb++)
		{
			sa[ja]=(ca+cra)%2+'0';
			cra = (ca+cra)/2;
			if(a[i]=='1')
				ca--;
			sb[jb]=(cb+crb)%2+'0';
			crb = (cb+crb)/2;
			if(b[i]=='1')
				cb--;
		}
		while(cra)
		{
			sa[ja++] = cra%2+'0';
			cra = cra/2;
		}
		while(crb)
		{
			sb[jb++] = crb%2+'0';
			crb = crb/2;
		}
		string res;
		int borrow=0;
		for(int i=0;i<jb;i++)
		{
			if(i>=ja)
				sa[i]='0';
			if((sb[i]-borrow)<sa[i])
			{
				res += sb[i]+2-borrow-sa[i]+'0';
				borrow = 1;
			}
			else
			{
				res += sb[i]-borrow-sa[i]+'0';
				borrow = 0;
			}
		}
		int sz=res.size();
		while(res[sz-1]=='0')
			sz--;
		string res1=res.substr(0,sz);
		reverse(res1.begin(), res1.end());
		printf("%s\n",res1.c_str());
	}
	return 0;
}