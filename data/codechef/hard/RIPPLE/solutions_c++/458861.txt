//	Filename:  RIPPLE.cpp 
//	Author:  pankaj kumar, pankaj4u4m@gmail.com
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

/* Only for Debugging */
#define out(_x) cout << #_x<< "=" <<_x << endl;
#define outC(A) cout<<#A<<"={";for(__typeof(A.begin()) _it=A.begin();_it!=A.end();++_it)cout<<*_it<< " ";cout<<"}"<<endl;
template<class T>inline void outA(T A[], int n) {cout<<"{";for(int i=0;i<n;i++)cout<<A[i]<<" ";cout<<"}"<<endl;}

/* Input Output Function */
//#define GET
#ifdef GET
#define BUFSIZE (1<<26)
char DIP[20];
char IBUF[BUFSIZE+1], *inputptr=IBUF;
#define INPUT fread(IBUF, 1, BUFSIZE, stdin);
#define DIG(a) (((a)>='0')&&((a)<='9'))
#define getChar(t) {t=*inputptr++;}
template<class T>inline bool getInt(T &j){j=0;int _t;getChar(_t);if(_t==0)return false;char sign;while(!DIG(_t)&&_t!=0){sign=_t;getChar(_t);}while(DIG(_t)){j=10*j+(_t-'0');getChar(_t);}if(sign == '-') j = -j;*inputptr--;return j==0&&_t==0?false:true;}//::getInt(
inline bool getString(char *s, char n = 32){char _c;getChar(_c);if(_c==0)return false;while(_c==10||_c==n)getChar(_c);while(_c != 10&&_c != n&&_c!=0){*s++=_c;getChar(_c)}*s=0;inputptr--;return s[0]==0&&_c==0?false:true;}
inline bool getLine(char *s){return getString(s, 10);}
#endif
/**************** Main program *******************/

char a[100005];
char b[100005];
int main(){
//	freopen("in.txt","r",stdin);
	int t;scanf("%d", &t);
	while(t--){
		int n;scanf("%d", &n);
		scanf("%s%s", a, b);
		int cnta = 0;
		int cntb = 0;
		for(int i = n-1; i>= 0; i--){
			if(a[i] == '1')cnta++;
			if(b[i] == '1')cntb++;
		}
		for(int i = n-1;i>=0;i--){
			if(b[i] == a[i])b[i] = '0';
			else if(b[i] < a[i]) {
				b[i] = '1';
				int j = i-1;
				while(j>=0&&b[j] != '1'){
					b[j] = '1';
					j--;
				}
				b[j] = '0';
			}
		}
		int cnt = cntb-cnta;
		bool one = 0;
		if(cnt>0){
			int l = n-1;
			if(cnt&1){one = true;
						int j = l;
						while(j>=0 && b[j] != '1'){
							b[j] = '1';
							j--;
						}
						b[j] = '0';
			}
			cnt>>=1;
			while(cnt){
				if(cnt&1){
					if(b[l] == '1')b[l] = '0';
					else{
						b[l] = '1';
						int j = l-1;
						while(j>=0 && b[j] != '1'){
							b[j] = '1';
							j--;
						}
						b[j] = '0';
					}
				}
				cnt>>=1;
				l--;
			}
		}else if (cnt<0){
			cnt*=-1;
			if(cnt&1){
				one = true;
			}cnt>>=1;
			int l = n-1;
			while(cnt){
				if(cnt&1){
					int j = l;
					while(b[j] == '1'){
						b[j] = '0';
						j--;
					}
					b[j] = '1';
				}
				cnt>>=1;
				l--;
			}
		}
		bool f = false;
		for(int i = 0; i< n; i++){
			if(b[i] == '1'){f = true;printf("%s", b+i);break;}
		}if(one)puts("1");
		else if(f)puts("0");
		else puts("");
	}
	return 0;
}



