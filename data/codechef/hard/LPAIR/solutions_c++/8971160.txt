#include <iostream>
#include <algorithm>
#include <vector>
#include <utility>
using namespace std;
vector<pair<int,int> > line;
long long int f[100005],counter=0;
void Merge(long long int[],long long int[],long long int[],int,int);
void Mergesort(long long int[],int);

void Mergesort(long long int a[],int n)
{
    if(n<2)
        return;
    int mid=n/2;
    long long int left[mid],right[n-mid];
    for(int i=0; i<mid; i++)
        left[i]=a[i];
    for(int i=mid; i<n; i++)
        right[i-mid]=a[i];
    Mergesort(left,mid);
    Mergesort(right,n-mid);
    Merge(left,right,a,mid,n-mid);
}

void Merge(long long int l[],long long int r[],long long int a[],int nl,int nr)
{
    int i,j,k;
    long long int ct=0;
    i=j=k=0;
    while(i<nl && j<nr)
    {
        if(l[i]<=r[j])
        {
            a[k]=l[i];
            k++;
            i++;
            if(i!=nl)
                counter+=ct;
        }
        else
        {
            counter++;
            ct++;
            a[k]=r[j];
            k++;
            j++;

        }
    }
    while(i<nl)
    {
        a[k]=l[i];
        k++;
        i++;
        if(i!=nl)
            counter+=ct;
    }
    while(j<nr)
    {
        a[k]=r[j];
        k++;
        j++;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    int n;
    cin>>n;
    for(int i=0; i<n; i++)
    {
        long long int a,b;
        cin>>a>>b;
        line.push_back(make_pair(a,b));
    }
    sort(line.begin(),line.end());
    for(int i=0; i<n; i++)
    {
        f[i]=line[i].second;
    }
    Mergesort(f,n);
    cout<<counter;
}
