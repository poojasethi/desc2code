#include<iostream>
using namespace std;
int mapping,N,*BIT;
void merg(long long int *arr,long long int *brr,int first,int last)
{
   int mid=(first+last)/2;
   int i,j,k;
   j=first;
   k=mid+1;
   long long int B[last-first+1];
   long long int B1[last-first+1];
   for(i=0;j<mid+1&&k<last+1;i++)
   {
      if(arr[j]>arr[k])
      {
         B1[i]=arr[k];
         B[i]=brr[k++];
      }
      else
      {
         B1[i]=arr[j];
         B[i]=brr[j++];
      }
   }
   for(;j!=mid+1;)
   {
      B1[i]=arr[j];
      B[i++]=brr[j++];
   }
   for(;k!=last+1;)
   {
      B1[i]=arr[k];
      B[i++]=brr[k++];
   }
   for(i=0;i<last-first+1;i++)
   {
      brr[first+i]=B[i];
      arr[first+i]=B1[i];
   }
}
void mergesort(long long int *arr,long long int *brr,int first,int last)
{
   if(first>=last)
      return ;
   mergesort(arr,brr,first,(first+last)/2);
   mergesort(arr,brr,(first+last)/2+1,last);
   merg(arr,brr,first,last);
}
int result(int idx)
{
   idx++;
   int sum;
   for(sum=0;idx;idx=idx-(idx&-idx))
      sum+=BIT[idx-1];
   return sum;
}
void Update(long long int idx)
{
   idx++;
   for(;idx<=N;idx=idx+(idx&-idx))
      BIT[idx-1]+=1;
}
int main()
{
   int T;
   long long int *M,*F,ans,i;
   cin>>N;
   M=new long long int[N];
   F=new long long int[N];
   BIT=new int[N];
   for(i=0;i<N;BIT[i]=0,i++)
      cin>>M[i]>>F[i];
   mergesort(M,F,0,N-1);
   for(i=0;i<N;i++)
      M[i]=i;
   mergesort(F,M,0,N-1);
   for(i=0;i<N;i++)
      F[i]=i;
   ans=result(M[N-1]);
   Update(M[N-1]);
   for(i=N-2;i+1;i--)
   {
      ans+=result(M[i]);
      Update(M[i]);
   }
   cout<<ans<<endl;
return 0;
}
