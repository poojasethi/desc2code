#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>
#include <stdlib.h>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000007
#define ll long long int
// #define inp(x) scanf("%d",&x)
#define inchar getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=inchar();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=inchar();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=inchar();
n=n*sign;
}


typedef pair<int,int> ii;


int a[100010],aux1[100010], aux2[100010],male[100010];
ll noi;
ii mat[100010];

void merge(int p,int q,int r)
 {
    int n1 = q-p+1;
    int n2 = r-q;
    FOR(i,1,n1)
     aux1[i] = a[p+i-1];
    FOR(i,1,n2)
      aux2[i] = a[q+i];
    aux1[n1+1] = INF;
    aux2[n2+1] = INF;
    int i=1,j = 1;
    FOR(k,p,r)
     {
       if(aux1[i]<=aux2[j])
       {
         a[k] = aux1[i]; i++;
       }
       else
        {
         a[k] = aux2[j]; j++;     
         noi += n1-i+1;
        }         
     }
          
 }
 
 void mergesort(int p,int r)
  {
     if(p<r)
      {
        int q = (p+r)/2;
        mergesort(p,q);
        mergesort(q+1,r);
        merge(p,q,r);      
      } 
  }
 
 bool comp(ii a,ii b)
  {
    return a.second < b.second;    
  }

int main() {

    int n;
    inp(n);
    FOR(i,1,n)
     {
       int m,f;
       inp(m);inp(f);
       male[i] = m;
       mat[i] = ii(m,f);         
     }
    sort(mat+1,mat+n+1,comp);
    sort(male+1,male+n+1);
    FOR(i,1,n)
     {
       a[i] = lower_bound(male+1,male+n+1,mat[i].first)-male;         
     }
    noi = 0; 
    mergesort(1,n);  
    printf("%lld\n",noi);
    
    
    //getchar();
    //getchar();
	return 0;
} 
