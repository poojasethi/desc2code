#include <cstdio>
#include <algorithm>
#define ll long long int
using namespace std;
struct P{
    ll x, y;
};
ll merge(P arr[],P temp[], int left, int mid, int right)
{
  ll i, j, k;
  ll inv_count = 0;
  i = left;
    j = mid;
  k = left;
  while ((i <= mid - 1) && (j <= right))
  {
    if (arr[i].y <= arr[j].y)
    {
        temp[k].x=arr[i].x;
      temp[k++].y = arr[i++].y;
    }
    else
    {
        temp[k].x=arr[j].x;
      temp[k++] = arr[j++];
      inv_count = inv_count + (mid - i);
    }
  }
  while (i <= mid - 1)
    temp[k++] = arr[i++];
  while (j <= right)
    temp[k++] = arr[j++];
  for (i=left; i <= right; i++)
    arr[i] = temp[i];
  return inv_count;
}

ll _mergeSort(P arr[], P temp[], int left, int right)
{
  int mid;
  ll inv_count = 0;
  if (right > left)
  {
    mid = (right + left)/2;
  inv_count  = _mergeSort(arr, temp, left, mid);
    inv_count += _mergeSort(arr, temp, mid+1, right);
    inv_count += merge(arr, temp, left, mid+1, right);
  }
  return inv_count;
}
ll mergeSort(P arr[], int size1)
{
    P temp[size1];
    return _mergeSort(arr, temp, 0, size1 - 1);
}
bool comp(P a1,P a2)
{
    if(a1.x<a2.x)
        return true;
    else
        return false;
}
P A[100010];
int main()
{
    int n,i;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%lld %lld",&A[i].x,&A[i].y);
    }
    sort(A,A+n,comp);
  printf("%lld\n",mergeSort(A,n));
  return 0;
}
