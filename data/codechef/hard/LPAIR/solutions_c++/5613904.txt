#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class node{
public:
	unsigned long long int a;
	unsigned long long int b;
};

bool compare(node x,node y){
	return x.a<y.a;
}

void merge(std::vector<node>& v,int low ,int high,long long int& count){
	int mid=(low+high)/2;
	std::vector<int> b(mid-low+1);
	std::vector<int> c(high-mid);
	int i,j=low;
	for (i = 0; i < mid-low+1; ++i)
	{
		b[i]=v[j++].b;
	}
	for (i = 0; i < high-mid; ++i)
	{
		c[i]=v[j++].b;
	}
	i=0;
	j=0;
	int k=low;
	while(i<mid-low+1&&j<high-mid){
		if (b[i]<=c[j])
		{
			v[k++].b=b[i++];
		}
		else{
			v[k++].b=c[j++];
			count+=mid-low+1-i;
		}
	}
	while(i<mid-low+1){
		v[k++].b=b[i++];
	}
	while(j<high-mid){
		v[k++].b=c[j++];
	}
}

void count_inversion(std::vector<node>& v,int low ,int high,long long int& count){
	if (low<high)
	{
		int mid=(low+high)/2;
		count_inversion(v,low,mid,count);
		count_inversion(v,mid+1,high,count);
		merge(v,low,high,count);
	}
}

int main(){
	unsigned long long int n;
	cin>>n;
	std::vector<node> v(n);
	for (int i = 0; i < n; ++i)
	{
		cin>>v[i].a>>v[i].b;
	}
	sort(v.begin(),v.end(),compare);
	long long int count=0;
	count_inversion(v,0,n-1,count);	
	cout<<count;
}