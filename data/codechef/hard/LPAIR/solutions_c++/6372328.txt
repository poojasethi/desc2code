#include<bits/stdc++.h>

using namespace std;

 long long int merge(int arr[], int temp[], int left, int mid, int right)
{
  int i, j, k;
  long long int inv_count = 0;
  
  i = left; 
  j = mid;  
  k = left; 
  while ((i <= mid - 1) && (j <= right))
  {
    if (arr[i] <= arr[j])
    {
      temp[k++] = arr[i++];
    }
    else
    {
      temp[k++] = arr[j++];
  
    
      inv_count = inv_count + (mid - i);
    }
  }
  
 
  while (i <= mid - 1)
    temp[k++] = arr[i++];
  
  
  while (j <= right)
    temp[k++] = arr[j++];
  
 
  for (i=left; i <= right; i++)
    arr[i] = temp[i];
  
  return inv_count;
}
 



  

long long mergeSort(int arr[], int temp[], int left, int right)
{
  long long mid, inv_count = 0;
  if (right > left)
  {
   
    mid = (right + left)/2;
  
    
    inv_count  = mergeSort(arr, temp, left, mid);
    inv_count += mergeSort(arr, temp, mid+1, right);
  
    
    inv_count += merge(arr, temp, left, mid+1, right);
  }
  return inv_count;
}
  


int main()
{
	int n,a,b,l=0,i;
	int arr[100004];
	int temp[100004];
	map<int , int> m;
	map<int , int>::iterator it;
	
	cin>>n;
	for(i=0;i<n;i++)
	{
		cin>>a>>b;
		m[a]=b;
	}
	
	for(it=m.begin();it!=m.end();it++)
	{
		arr[l++]=(*it).second;
	}
	
	cout<<mergeSort(arr,temp,0,l-1);
	
	return 0;
}
