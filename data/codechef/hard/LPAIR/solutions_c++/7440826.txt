#include <cstdlib>
#include <iostream>
#include <algorithm>

using namespace std;

int bit[100001] = {0};
struct collect
{
       int index;
       int value;
};
int func(collect A, collect B)
{
    if(A.index < B.index) return 1;
    return 0;
}

long long int sum(int index)
{
     long long int ans = 0;
     while(index > 0){
           ans+=bit[index-1];
           index= index- (index & -index);
     }
     return ans;      
 }
 
void update(int index, int value, int size)
{
     while(index <= size){
           bit[index-1]+=value;
           index = index+(index&-index);
     }      
 }
int main()
{
    int N;
    long long int count = 0;
    scanf("%d",&N);
    
    
    collect A[N];
    for(int i = 0;i<N;++i){
        scanf("%d%d",&(A[i].index),&(A[i].value));
       // cout << A[i].index << ' ' << A[i].value << '\n';
    }
    sort(A,A+N,func);
    for(int i = 0;i<N;++i){
       // cout << A[i].index << ' ' << A[i].value << '\n';
    }   
    int B[N], C[N];
    for(int i = 0;i<N;++i){
        B[i] = A[i].value;
       // cout << B[i] << '\n';
    }
    sort(B,B+N);
    for(int i = 0;i<N;++i){
        C[i] = int(lower_bound(B,B+N,A[i].value)-B)+1;
       // cout << C[i] << '\n';
    }
    for(int i = N-1;i>=0;--i){
        count+=sum(C[i]-1);
        update(C[i],1,N);
    }            
    printf("%lld\n",count);
    return 0;
}
