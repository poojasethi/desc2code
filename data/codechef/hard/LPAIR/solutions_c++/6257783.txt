#include <iostream>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <algorithm>
#include <vector>
using namespace std;
#define getcx getchar_unlocked
inline void inp( int &n )//fast input function
{
   n=0;
   int ch=getcx();int sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   n=n*sign;
}

struct couple 
{
    int a , b;
} couples[100009];

bool comp_function(struct couple aa, struct couple bb){
    return (aa.a < bb.a);
}




long long  m_mergeSort(struct couple* arr, int temp[], int left, int right);
long long merge(struct couple* arr, int temp[], int left, int mid, int right);


long long mergeSort(struct couple* arr, int array_size)
{
    int *temp = (int *)malloc(sizeof(int)*array_size);
    return m_mergeSort(arr, temp, 0, array_size - 1);
}

long long m_mergeSort(struct couple* arr, int temp[], int left, int right)
{
  int mid;
  long long inv_count = 0;
  if (right > left)
  {
    mid = (right + left)/2;

    inv_count  = m_mergeSort(arr, temp, left, mid);
    inv_count += m_mergeSort(arr, temp, mid+1, right);
    inv_count += merge(arr, temp, left, mid+1, right);
  }
  return inv_count;
}

long long merge(struct couple* arr, int temp[], int left, int mid, int right)
{
  int i, j, k;
  long long inv_count = 0;

  i = left;
  j = mid;
  k = left;
  while ((i <= mid - 1) && (j <= right))
  {
    if (arr[i].b <= arr[j].b)
    {
      temp[k++] = arr[i++].b;
    }
    else
    {
      temp[k++] = arr[j++].b;
      inv_count += (mid - i);
    }
  }

  while (i <= mid - 1)
    temp[k++] = arr[i++].b;

  while (j <= right)
    temp[k++] = arr[j++].b;

  for (i=left; i <= right; i++)
    arr[i].b = temp[i];

  return inv_count;
}


int main()
{
    //vector<struct couple> couples;
    int n;
    inp(n);
    for(int i=0; i<n; i++) {
        inp(couples[i].a);
        inp(couples[i].b);
    }

    sort(couples, couples+n, &comp_function);
    cout<<mergeSort(couples, n)<<endl;

    return 0;
}