//akartik80

#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>

#define get getchar_unlocked
#define put putchar//_unlocked
#define li long int
#define ll long long int
#define pb push_back
#define mp make_pair
#define pd(x) printf("%d", x)
#define pdn(x) printf("%d\n", x)
#define pld(x) printf("%ld", x)
#define pldn(x) printf("%ld\n", x)
#define plld(x) printf("%lld", x)
#define plldn(x) printf("%lld\n", x)
#define sd(x) scanf("%d", &x)
#define sld(x) scanf("%ld", &x)
#define slld(x) scanf("%lld", &x)
#define ss(x) scanf("%s", x)
#define ps(x) printf("%s", x)
#define psn(x) printf("%s\n", x)

using namespace std;

int bit[1000001] = {0};

inline int scan()
{
	int n = 0, sign = 1, ch = get();

	while (ch < 48 || ch > 57) {
		if (ch == '-') {
			sign = -1;
		}

		ch = get();
	}

	while (ch >= 48 && ch <= 57) {
		n = (n << 3) + (n << 1) + ch - 48;
		ch = get();
	}

	return n * sign;
}

ll read(int i)
{
    ll sum = 0;

    while (i > 0) {
        sum += bit[i];
        i -= (i & -i);
    }

    return sum;
}

void update(int i, int n)
{
    while(i <= n) {
        bit[i]++;
        i += (i & -i);
    }
}

bool comp(pair<int, int> a, pair<int, int> b)
{
    return a.second < b.second;
}

int main()
{
	int n, m, f, i;
	ll ans = 0;
	vector<pair<int, int> > v;

	n = scan();

	for (i = 0; i < n; i++) {
        m = scan();
        f = scan();

        v.pb(mp(m, f));
	}

	sort(v.begin(), v.end(), comp);

	for (i = 0; i < n; i++) {
        v[i].second = i + 1;
    }

    sort(v.rbegin(), v.rend());

	for (i = 0; i < n; i++) {
        ans += read(v[i].second);
        update(v[i].second, n);
    }

    plldn(ans);
}
