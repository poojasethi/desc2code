/* Jai Gupta */
#include <iostream>
#include <cstdio>
#include <vector>
#include <stack>
#include <queue>
#include <string>
#include <cstring>
#include <map>
#include <cstdlib>
#include <algorithm>
#include <list>
#include <deque>
#include <bitset>
#include <cmath>
#include <functional>
#include <set>

using namespace std;

#define INT_MAX 2147483647
#define INT_MIN -2147483648
#define uint unsigned int
#define MAX(a,b) (((a)>(b))?(a):(b))
#define MIN(a,b) (((a)<(b))?(a):(b))
#define CMAX(a,b) if((a)<(b)) a=b
#define CMIN(a,b) if((a)>(b)) a=b
#define FOR(i,a,b) for(i=a; i<b; i++)
#define REVI(i,a,b) for(int i= a ; i >= b ; --i)
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())
#define SWAP(a,b,t) t=a,a=b,b=t
#define REP(i,n) for(int i=0; i<n; i++)
#define ll long long
#define gint(t)scanf("%d", &t);
#define gint2(a,b)scanf("%d%d", &a, &b);
#define gint3(a,b,c)scanf("%d%d%d", &a, &b, &c);
#define pint(t)printf("%d\n", t);
#define pint2(a,b)printf("%d %d\n", a, b);
#define pint3(a,b,c)printf("%d %d %d\n", a, b, c);
#define pii pair<int, int>
#define debug(args...) {dbg,args; cerr<<endl;}
#define dline cerr<<endl
struct debugger
{
    template<typename T> debugger& operator , (const T& v)
	{
	    cerr<<v<<" ";
	    return *this;
	}
} dbg;


#define BUF 409600
char ibuf[BUF];
int ipt = BUF;
 
int readInt() {
    while (ipt < BUF && ibuf[ipt] < '0') ipt++;
    if (ipt == BUF) {
	fread(ibuf, 1, BUF, stdin);
	ipt = 0;
	while (ipt < BUF && ibuf[ipt] < '0') ipt++;
    }
    int n = 0;
    while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
    if (ipt == BUF) {
	fread(ibuf, 1, BUF, stdin);
	ipt = 0;
	while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
    }
    return n;
}


/* memset(start*, byteVal, numBytes);
 *  memcpy(dst*, src*, numBytes);
 */
#define MAXN 1005
int r[MAXN];
int c[MAXN];
int initial[MAXN][MAXN];
int final[MAXN][MAXN];
int main()
{
    int t = readInt();
    while(t--) {
	int n = readInt();
	int rcount= 0, ccount=0;
	r[0] = 0;
	c[0] = 0;
	//debug("next");
	REP(ni, n)
	{
	    REP(mi, n)
	    {
		initial[ni][mi] = readInt();
	    }
	}
	REP(ni, n) {
	    REP(mi, n) {
		final[ni][mi] = readInt();
	    }
	}
	if(initial[0][0]!=final[0][0])
	{
	    //debug("flipping column ", 0);
	    c[0] = 1;
	    ccount++;
	}

	IFOR(ni, 1, n)
	{
	    //debug("rcount ", rcount);
	    //debug("ccount ", ccount);
	
	    ccount+= (c[ni] = initial[0][ni]^final[0][ni]);
	    rcount+= (r[ni] = c[0]^initial[ni][0]^final[ni][0]);
	    //if(c[ni]) debug("flipping column ", ni, rcount, ccount);
	    //if(r[ni]) debug("flipping row ", ni, rcount, ccount);
	}
	int flag = 0, flag2=0;
	//debug("rcount ", rcount);
	//debug("ccount ", ccount);
	if(rcount+ccount>n)
	{
	    rcount = n - rcount;
	    ccount = n - ccount;
	    flag=1;
	}
	IFOR(ni, 1, n)
	{
	    IFOR(mi, 1, n)
	    {
		if(r[ni]^c[mi]^initial[ni][mi]^final[ni][mi])
		{
		    ni=n-1;
		    flag2 = 1;
		    break;
		}
	    }
	}
	if(!flag2)
	{
	    if(rcount+ccount==0)
	    {
		printf("0\n");
	    }
	    else {
		pint(rcount);
		REP(ri, n)
		{
		    if(r[ri]^flag)
			pint(ri);
		}
		pint(ccount);
		REP(ri, n)
		{
		    if(c[ri]^flag)
			pint(ri);
		}
	    }
	    
	}else{
	    printf("-1\n");
	}
    }
    return 0;
}
