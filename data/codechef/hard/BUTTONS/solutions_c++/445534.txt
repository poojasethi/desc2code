# include <iostream>
# include <vector>
# include <cmath>
# include <cstdio>

# define LOOP(i, a, b) for(register int i=a ; i<b ; ++i)
# define LOOPTHRU(v, i) LOOP(i, 0, v.size())

# define PUKE(v, i) LOOP(i, 0, v.size()) cout << v[i] << " "
# define PUKE2(v, i, j) LOOP(i, 0, v.size()) { PUKE(v[i], j) ; cout << endl ; }

using namespace std ;

int count(int rowb[], int n)
{
	int counter = 0 ;
	LOOP(i, 0, n)
	{
		counter += rowb[i] ;
	}
	return counter ;
}

void printresult(int rowb[], int colb[], int grid[][1000], int n)
{
	LOOP(i, 0, n)
		LOOP(j, 0, n)
		{
			if(grid[i][j]^rowb[i]^colb[j])
			{
				cout << "-1" << endl ; return ;
			}
		}

		cout << count(rowb, n) << endl ;
		LOOP(i, 0, n) if(rowb[i]) cout << i << endl ;
		cout << count(colb, n) << endl ;
		LOOP(i, 0, n) if(colb[i]) cout << i << endl ;
//		cout << endl ;
}

int main()
{
	int T ; scanf("%d",&T) ;//cin >> T ;
	while(T--)
	{
		int n ; scanf("%d",&n) ;//cin >> n ;
		int grid[1000][1000] ;
		
		LOOP(i, 0, n)
			LOOP(j, 0, n)
			{
				int m ; scanf("%d",&m) ;//cin >> m ;
				grid[i][j] = m ;
			}
			
		LOOP(i, 0, n)
			LOOP(j, 0, n)
			{
				int m ; scanf("%d",&m) ;//cin >> m ;
				grid[i][j] ^= m ;
			}
			
		int count1s=0 ;
		LOOP(i, 0, n)
			LOOP(j, 0, n)
			{
				if(grid[i][j]) count1s ++ ;
			}
		if(!count1s)
		{
		cout << "0" << endl ;
		continue ;
		}
		
		int colb[1000] ;
		LOOP(i, 0, n) colb[i] = grid[0][i] ;
		int rowb[1000] ;

		LOOP(i, 0, n) rowb[i] = colb[0] ^ grid[i][0] ;

		if(count(rowb, n) + count(colb, n) > n)
		{
			LOOP(i, 0, n)
			{
				if(rowb[i]) rowb[i] = 0 ;
				else rowb[i] = 1 ;
				if(colb[i]) colb[i] = 0 ;
				else colb[i] = 1 ;
			}
		}

		printresult(rowb, colb, grid, n) ;
	}
	return 0 ;
}