#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <stack>
#include <queue>
#include <map>
#include <iostream>
#include <cstring>
#define F first
#define S second
#define mp make_pair
#define isok(x,y) (x>=0 && x<R && y>=0 && y<C)
#define MAX (int)1e6
#define INF INF

using namespace std;

typedef pair<int,int> PII;

typedef vector<int> VI;
typedef vector< VI > VII;

typedef long long LL;

///Fast IO

const int BUFFSIZE = 10240;

char BUFF[BUFFSIZE + 1], *p = BUFF;

int CHAR, SIGN, BYTES = 0;

#define GETCHAR(c) { \
if(p-BUFF==BYTES && (BYTES==0 || BYTES==BUFFSIZE)){BYTES=fread(BUFF,1,BUFFSIZE,stdin);p=BUFF;} \
if(p-BUFF==BYTES && (BYTES>0 && BYTES<BUFFSIZE)){BUFF[0]=0;p=BUFF;} \
c = *p++; \
}

#define DIGIT(c) (((c) >= '0') && ((c) <= '9'))

#define LETTER(c)(((c) >= 'a' && (c) <= 'z') || ((c) >= 'A' && (c) <= 'Z'))

#define MINUS(c) ((c)== '-')

#define GETNUM(n) { \
n = 0;SIGN = 1; do{GETCHAR(CHAR);}while(!(DIGIT(CHAR)|| MINUS(CHAR))); \
if(MINUS(CHAR)){SIGN = -1; GETCHAR(CHAR);} \
while(DIGIT(CHAR)){n = 10*n + CHAR-'0'; GETCHAR(CHAR);}if(SIGN == -1){n = -n;}\
}

#define GETWORD(s,i) { \
i = 0;do{GETCHAR(s[i]);}while(!LETTER(s[i])); \
do{GETCHAR(s[++i]);}while(LETTER(s[i])); \
s[i]=0; \
}



///Fast IO ends

int A[1001][1001]={0},B[1001][1001]={0},C[1001][1001]={0},rowPressed[1001]={0},colPressed[1001]={0},colLength,rowLength;
void print(int n)
{
    cout<<"ANSWER\n";
    for (int i=0;i<n;i++)
    {
        for (int j=0;j<n;j++)
            cout<<C[i][j]<<" ";
        cout<<"\n";
    }
}
void initialize(int n)
{
    for (int i=0;i<n;i++)
        rowPressed[i]=colPressed[i]=0;
}
void  solve(int n)
{
    int sum=0;
    for (int i=0;i<n;i++)
    {
        if(C[i][0])
        {
            colPressed[i]=1;
            colLength++;
            for(int j=0;j<n;j++)
            {
                if(C[i][j])
                C[i][j]=0;
                else C[i][j]=1;
            }
        }
    }


    for (int i=1;i<n;i++)
    {
        sum=0;
        for (int j=0;j<n;j++)
            sum+=C[j][i];
        if (sum==0||sum==n)
        {
            if (sum==n)
            {
                rowPressed[i]=1;
                rowLength++;
            }
        }
        else
        {
            cout<<"-1\n";
            return ;
        }
    }

    if ((rowLength+colLength)<(2*n)-(rowLength+colLength))
    {

        cout<<colLength<<endl;
        for (int i=0;i<n;i++)
            if (colPressed[i])
                cout<<i<<endl;
        cout<<rowLength<<endl;
        for (int i=0;i<n;i++)
            if (rowPressed[i])
                cout<<i<<endl;
    }
    else
    {
        rowLength=n-rowLength;
        colLength=n-colLength;
        cout<<colLength<<endl;

        for (int i=0;i<n;i++)
            if (!colPressed[i])
                cout<<i<<endl;

        cout<<rowLength<<endl;
        for (int i=0;i<n;i++)
            if (!rowPressed[i])
                cout<<i<<endl;

    }
}
int main()
{
    int test,n,isSame;
    GETNUM(test);
     //cin>>test;

    while (test-->0)
    {
        colLength=rowLength=0;
        isSame=1;
       // cin>>n;

       GETNUM(n);
        initialize(n);
        for (int i=0;i<n;i++)
            for (int j=0;j<n;j++)
           // cin>>A[i][j];
                GETNUM(A[i][j]);
        for (int i=0;i<n;i++)
            for (int j=0;j<n;j++)
            //cin>>B[i][j];
                GETNUM(B[i][j]);
        for (int i=0;i<n;i++)
            for (int j=0;j<n;j++)
            {
                C[i][j]=(A[i][j]^B[i][j]);
                if (C[i][j])
                {
                    isSame=0;
                }
            }
        if (isSame)
            printf("0\n");
        else
            solve(n);
    }
    return 0;
}
