#include<stdio.h>
#include <queue>

using namespace std;
//Case one .. row one flipped
queue<int> row1; //row flips 
queue<int> col1; //col flips
//Case two .. row one not flipped
queue<int> row2; //row flips 
queue<int> col2; //col flips

int t,N,impossible1,impossible2;
int I[1000] [1000],O[1000] [1000]; // initial and final condition
int IC[1000] [1000],OC[1000] [1000];// copy of i

void emptyallqueue()
{
     while(!row1.empty())
     {
         row1.pop();
     }
     while(!col1.empty())
     {
         col1.pop();
     }
     while(!row2.empty())
     {
         row2.pop();
     }
     while(!col2.empty())
     {
         col2.pop();
     }
     
     
}


void read_grid(int (*A)[1000],int (*AC)[1000])
{
     for (int i=0;i<N;i++)
         for (int j=0;j<N;j++)
         {
             scanf("%d",&A[i][j]);
             AC[i][j]=A[i][j];
         }
     
}

void flip_row(int p,int (*A)[1000]) // flip pth row
{
     for(int i=0;i<N;i++)
             if(A[p][i])
             {
                A[p][i]=0;
             }
             else
             {
                A[p][i]=1;
             }

}

void flip_col(int p,int (*A)[1000]) //flip pth col
{
     for(int i=0;i<N;i++)
             if(A[i][p])
             {
                A[i][p]=0;
             }
             else
             {
                A[i][p]=1;
             }

}

int compare_row1(int p)
{
     int allsame=1;
     for(int i=0;i<N;i++)
     {
             if(I[p][i]!=O[p][i])
             {
                allsame=0;
                break;
             }
     }
     
     if(allsame)
                return 0;
     
     for(int i=0;i<N;i++)
     {
             if(I[p][i]==O[p][i])
             {return 1;}
     }
     row1.push(p);
     return 0;
}
     

void calculate_case1()
{
     flip_row(0,I);
     row1.push(0);
     for(int i=0;i<N;i++)
     {
             if(I[0][i]!=O[0][i])
             {
                    flip_col(i,I);
                    col1.push(i);
             }
     }
     for (int i=1;i<N;i++)
     {
         if(compare_row1(i))
         {
          impossible1=1;
          while(!row1.empty())
                row1.pop();
          return;
         }
     }
}



int compare_row2(int p)
{
     int allsame=1;
     for(int i=0;i<N;i++)
     {
             if(IC[p][i]!=OC[p][i])
             {
                allsame=0;
                break;
             }
     }
     
     if(allsame)
                return 0;
     
     for(int i=0;i<N;i++)
     {
             if(IC[p][i]==OC[p][i])
             {return 1;}
     }
     row2.push(p);
     return 0;
}
     

void calculate_case2()
{
     for(int i=0;i<N;i++)
     {
             if(IC[0][i]!=OC[0][i])
             {
                    flip_col(i,IC);
                    col2.push(i);
             }
     }
     for (int i=1;i<N;i++)
     {
         if(compare_row2(i))
         {
          impossible2=1;
          while(!row2.empty())
                row2.pop();
          return;
         }
     }
}


void print_sol1()
{
     printf("%d\n",row1.size());
     while(!row1.empty())
     {
         printf("%d\n",row1.front());
         row1.pop();
     }
     printf("%d\n",col1.size());
     while(!col1.empty())
     {
         printf("%d\n",col1.front());
         col1.pop();
     }
}

void print_sol2()
{
     printf("%d\n",row2.size());
     while(!row2.empty())
     {
         printf("%d\n",row2.front());
         row2.pop();
     }
     printf("%d\n",col2.size());
     while(!col2.empty())
     {
         printf("%d\n",col2.front());
         col2.pop();
     }
}


void result()
{
     
     if(impossible1&&impossible2)
     {
         printf("%d\n",-1);
         return;
     }
     
     if(impossible1)
     {
        print_sol2();
        return;
     }
     if(impossible2)
     {
        print_sol1();
        return;
     }
     if((row1.size()+col1.size())==0||(row2.size()+col2.size())==0)
     {
        printf("%d\n",0);
        return;
     }
     
     (row1.size()+col1.size())<(row2.size()+col2.size())?print_sol1():print_sol2();
        
     return;
}

int main()
{
    scanf("%d",&t);
    while(t--)
    {
              emptyallqueue();
              impossible1=0;
              impossible2=0;
              scanf("%d",&N);
              read_grid(I,IC);
              read_grid(O,OC);
              calculate_case1();
              calculate_case2();
              result();
    }
    return 0;
}
