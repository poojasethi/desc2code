#include <cstdio>
#include <cassert>

int init[1001][1001], final[1001][1001], A[1001][1001], copy[1001][1001];
int N;

inline int min(int a, int b) { return (a<b)?a:b; }

void debug_A() {
  int i, j;
  for(i=0;i<N;i++) {
    for(j=0;j<N;j++) {
      printf("%d ", A[i][j]);
    }
    printf("\n");
  }
}

inline void change(int i, int j) {
  A[i][j] = (A[i][j]==0)?1:0;
}

bool done() {
  int i, j;
  for(i=0;i<N;i++) {
    for(j=0;j<N;j++) {
      if(A[i][j] == 1) return false;
    }
  }

  return true;
}

void colb(int x) {
  for(int i=0;i<N;i++) change(i, x);
}

void rowb(int x) {
  for(int i=0;i<N;i++) change(x, i);
}

inline char b(bool x) {
  return x?'T':'F';
}

bool r_used[1001], c_used[1001];
int solve(int x) {
  int ans = 0, i, j;

  for(i=0;i<N;i++) {
    for(j=0;j<N;j++) {
      A[i][j] = copy[i][j];
    }
  }

  //printf("Solving type %d:\n", x); 
  for(i=0;i<N;i++) {
    r_used[i] = false;
    c_used[i] = false;
  }

  /*
  if(x==1) {
    r_used[0] = true;
    rowb(0);
  }
  else {
    c_used[0] = true;
    colb(0);
  }
  */

  //debug_A();

  //printf("Starting...\n");
  bool first = true;
  do {
    for(i=0;i<N;i++) {
      for(j=0;j<N;j++) {
        if(A[i][j] == 0) continue;
        //printf("Fixing (%d, %d)\n", i, j);
        //printf("c_used: %c, r_used: %c\n", b(c_used[j]), b(r_used[i]));
        
        if(first) {
          if(x==0) {
            //printf("FIRST: 0, column!\n");
            c_used[j] = true;
            colb(j);
          } else {
            //printf("FIRST: 1, row!\n");
            r_used[i] = true;
            rowb(i);
          }
        } else {

          if((!c_used[j]) && (!r_used[i])) {
            //printf("Undecideable, moving on\n");
            continue;
          }

          assert(!((!c_used[j]) && (!r_used[i])));
          if(c_used[j] && r_used[i]) {
            //printf("IMPOSSIBLE!\n");
            return -1;
          }
          if(c_used[j]) {
            //printf("\tRow!\n");
            r_used[i] = true;
            rowb(i);
          } else if(r_used[i]) {
            //printf("\tColumn!\n");
            c_used[j] = true;
            colb(j);
          }
        }

        ans++;
        //debug_A();
        first = false;

        //printf("\n");
      }
    }
  } while(!done());
  
  return ans;
}

int main() {
  int T, i, j;
  scanf("%d", &T);
  for(;T>0;T--) {
    scanf("%d", &N);
    for(i=0;i<N;i++) for(j=0;j<N;j++) scanf("%d", &init[i][j]);
    for(i=0;i<N;i++) for(j=0;j<N;j++) scanf("%d", &final[i][j]);
    bool zero = true;
    
    for(i=0;i<N;i++) for(j=0;j<N;j++) {
      if(init[i][j] == final[i][j]) A[i][j] = 0;
      else {
        A[i][j] = 1;
        zero = false;
      }
      copy[i][j] = A[i][j];
    }

    //printf("\nStarting TC...\n");

    //debug_A();
    
    if(zero) {
      printf("0\n");
      continue;
    }
    //else...

    int ans = solve(1);
    //printf("Initial answer is %d\n", ans);
    if(ans==-1) { printf("-1\n"); continue; }
    if(ans>=N) {
      for(i=0;i<N;i++) {
        if(c_used[i]) c_used[i] = false;
        else c_used[i] = true;
        if(r_used[i]) r_used[i] = false;
        else r_used[i] = true;
      }
      ans = (2*N)-ans;
    }

    int cans = 0, rans = 0;
    for(i=0;i<N;i++)  {
      if(c_used[i]) cans++;
      if(r_used[i]) rans++;
    }
    printf("%d\n", rans);
    for(i=0;i<N;i++) if(r_used[i]) printf("%d\n", i);
    printf("%d\n", cans);
    for(i=0;i<N;i++) if(c_used[i]) printf("%d\n", i);
  }
  
  return 0;
}
