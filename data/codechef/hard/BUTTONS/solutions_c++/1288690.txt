#include<iostream>
#include<stdio.h>
#include<algorithm>
using namespace std;
const int MAXN = 1200;
int n,S[MAXN][MAXN],F[MAXN][MAXN];
int R1[MAXN], C1[MAXN], R2[MAXN], C2[MAXN];
bool calcSols(int rows[MAXN], int cols[MAXN]){
    for(int i=0;i<n;i++) if(cols[i]==-1){//infering cols
        if(S[0][i]!=F[0][i]) cols[i]=1-rows[0];
        else cols[i] = rows[0];
    }
    for(int i=0;i<n;i++) if(rows[i]==-1){//infering rows
        if(S[i][0]!=F[i][0]) rows[i] = 1-cols[0];
        else rows[i] = cols[0];
    }
    bool is = true;
    int r,c;
    for(int i=0;i<n && is;i++) for(int j=0;j<n&&is;j++){
        r = rows[i]==1?1:0; c = cols[j]==1?1:0;
        int iv = (r + c)%2;
        int val = iv==1?1-S[i][j]:S[i][j];
        if(val!=F[i][j]) is = false;
    }
    return is;
}
void solve(){
    if(S[0][0]!=F[0][0]) R1[0] = 0, C1[0] = 1, R2[0] = 1, C2[0] = 0;
    else                 R1[0] = 0, C1[0] = 0, R2[0] = 1, C2[0] = 1;
    bool is1 = calcSols(R1,C1), is2 = calcSols(R2,C2);
    int np1 = 0,nr1 = 0,nc1 = 0,np2 = 0,nr2 = 0,nc2 = 0;
    for(int i=0;i<n;i++){
        if(R1[i]==1) np1++,nr1++;
        if(C1[i]==1) np1++,nc1++;

        if(R2[i]==1) np2++,nr2++;
        if(C2[i]==1) np2++,nc2++;
    }
    if(is1 || is2){
        if(!is1)np1=1000000;
        if(!is2)np2=1000000;

        int nr,nc,*r,*c;
        if(np1<=np2) nr = nr1, nc = nc1, r = R1, c = C1;
        else nr = nr2, nc = nc2, r = R2, c = C2;
        if(nr==0 && nc==0) printf("%d\n",0);
        else{
            printf("%d\n",nr);
            for(int i=0;i<n;i++) if(r[i]==1) printf("%d\n",i);
            printf("%d\n",nc);
            for(int i=0;i<n;i++) if(c[i]==1) printf("%d\n",i);
        }
    }
    else printf("%d\n",-1);
}
int main(){
    int T;
    scanf("%d",&T);
    for(int i=0;i<T;i++){
        scanf("%d",&n);
        for(int j=0;j<n;j++) for(int k=0;k<n;k++) scanf("%d",&S[j][k]);
        for(int j=0;j<n;j++) for(int k=0;k<n;k++) scanf("%d",&F[j][k]);
        fill(R1,R1+n,-1);fill(C1,C1+n,-1);
        fill(R2,R2+n,-1);fill(C2,C2+n,-1);
        solve();
    }
    return 0;
}
