#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cmath>
#include <vector>
#include <algorithm>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <sstream>
#include <fstream>
#include <ctime>
#include <cassert>
#include <string.h>
using namespace std;
#define GI ({int t;scanf("%d",&t);t;})
#define GL ({LL t;scanf("%lld",&t);t;})
#define GD ({double t;scanf("%lf",&t);t;})
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define REP(i,n) FOR(i,0,n)
#define ROF(i,a,b) for(int i=a;i>b;i--)
#define SET(x,a) memset(x,a,sizeof(x))
#define all(a) a.begin(),a.end()
#define rall(a) a.rbegin(),a.rend()
#define tr(i,a) for( __typeof(a.begin()) i=a.begin();i!=a.end();i++)
#define pb push_back
#define sz(a) (int)(a.size())
#define INF (int)1e9
#define EPS (double)1e-9
#define is istringstream
#define os ostringstream
#define lb lower_bound
#define ub upper_bound
#define bs binary_search
typedef unsigned long long ULL;
typedef long long LL;
typedef set <int> si;
typedef pair< int,int > ii;
typedef pair< int, ii > pi;
typedef vector< ii > vii;
typedef vector < vii > vvii;
typedef vector< int > vi;
typedef vector< vi > vvi;
#define MAXN 1000+5
 
bool src[MAXN][MAXN];
bool des[MAXN][MAXN];
bool tmp[MAXN][MAXN];
int row1[MAXN];
int row2[MAXN];
int col1[MAXN];
int col2[MAXN];
int r1,r2,c1,c2;
bool v1,v2;
 
int main(){
	int t=GI;
	while(t--){
		int n=GI;
		r1=0,r2=0,c1=0,c2=0;
		v1=true,v2=true;
		REP(i,n)	REP(j,n)	src[i][j]=GI;
		REP(i,n)	REP(j,n)	des[i][j]=GI;
		//case 1 - row '0' is flipped
		row1[r1++]=0;
		REP(i,n)	REP(j,n)	tmp[i][j]=src[i][j];
		REP(j,n)	tmp[0][j]^=1;
		REP(j,n){
			if(tmp[0][j]==des[0][j])	continue;
			REP(i,n)	tmp[i][j]^=1;
			col1[c1++]=j;
		}
		FOR(i,1,n){
			if(tmp[i][0]==des[i][0])	continue;
			REP(j,n)	tmp[i][j]^=1;
			row1[r1++]=i;			
		}
		REP(i,n)	REP(j,n)	if(tmp[i][j]!=des[i][j])	{v1=false;break;}
		//case 2 - row '0' is not flipped
		REP(i,n)	REP(j,n)	tmp[i][j]=src[i][j];
		REP(j,n){
			if(tmp[0][j]==des[0][j])	continue;
			REP(i,n)	tmp[i][j]^=1;
			col2[c2++]=j;
		}
		REP(i,n){
			if(tmp[i][0]==des[i][0])	continue;
			REP(j,n)	tmp[i][j]^=1;
			row2[r2++]=i;
		}
		REP(i,n)	REP(j,n)	if(tmp[i][j]!=des[i][j])	{v2=false;break;}
		sort(row1,row1+r1);
		sort(row2,row2+r2);
		sort(col1,col1+c1);
		sort(col2,col2+c2);
		if(v1&&v2){
			if((r1+c1)<(r2+c2)){
				if(!(r1+c1))	printf("0\n");
				else{
					printf("%d\n",r1);
					REP(i,r1)	printf("%d\n",row1[i]);
					printf("%d\n",c1);
					REP(i,c1)	printf("%d\n",col1[i]);
				}
			}
			else{
				if(!(r2+c2))	printf("0\n");
				else{
					printf("%d\n",r2);
					REP(i,r2)	printf("%d\n",row2[i]);
					printf("%d\n",c2);
					REP(i,c2)	printf("%d\n",col2[i]);
				}
			}
		}
		else if(v1){
				if(!(r1+c1))	printf("0\n");
				else{
					printf("%d\n",r1);
					REP(i,r1)	printf("%d\n",row1[i]);
					printf("%d\n",c1);
					REP(i,c1)	printf("%d\n",col1[i]);
				}
		}
		else if(v2){
				if(!(r2+c2))	printf("0\n");
				else{
					printf("%d\n",r2);
					REP(i,r2)	printf("%d\n",row2[i]);
					printf("%d\n",c2);
					REP(i,c2)	printf("%d\n",col2[i]);
				}
		}
		else printf("-1\n");
	}
	return 0;
} 