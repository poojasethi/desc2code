#include <iostream>
#include <string.h>
using namespace std;

#define MAXN 1000

struct Sol {
       int rowc, colc;
       int row[MAXN], col[MAXN];
};

int arr[MAXN][MAXN];
int brr[MAXN][MAXN];
int crr[MAXN][MAXN];
int drr[MAXN][MAXN];

void Solve(struct Sol *sol, int src[][MAXN], int des[][MAXN], int n) {
     if(src[0][0] != des[0][0]){
                  sol->rowc++;
                  sol->row[0] = 1;
                  
                  for(int j = 0; j < n; j++)
                          src[0][j] = src[0][j] ^ 1;
     }
     
     for(int j = 1; j < n; j++) {
             if (src[0][j] != des[0][j]) {
                           sol->colc++;
                           sol->col[j] = 1;
                           //cout << j << endl;
                           //getch();
                           
                           for(int i = 0; i < n; i++)
                                   src[i][j] = src[i][j] ^ 1;
             }
     }
     
     for(int i = 1; i < n; i++) {
             if (src[i][0] != des[i][0]) {
                           sol->rowc++;
                           sol->row[i] = 1;
                           
                           for(int j = 0; j < n; j++)
                                   src[i][j] = src[i][j] ^ 1;
             }
     }
}

bool check(int src[][MAXN], int des[][MAXN], int n) {
     for (int i = 0; i < n; i++){
         for (int j = 0; j < n; j++){
             if (src[i][j] != des[i][j])
                  return false;
         }
     }
     return true;
}

void Print (struct Sol sol, int n){
     printf("%d\n", sol.rowc);
     
     for(int i = 0; i < n; i++)
             if (sol.row[i])
                printf("%d\n", i);
        
     printf("%d\n", sol.colc);           
     for(int j = 0; j < n; j++)
             if (sol.col[j])
                printf("%d\n", j);
}

void Reset(struct Sol *sol){
     sol->rowc = sol->colc = 0;
     memset(sol->row, 0, sizeof(sol->row));
     memset(sol->col, 0, sizeof(sol->col));
}

int main(){
    int T, n;
    
    scanf("%d", &T);
    while(T--) {
               Sol a, b;
               Reset(&a);
               Reset(&b);
               
               scanf("%d", &n);
               
               for (int i = 0; i < n; i++){
                   for (int j = 0; j < n; j++){
                       scanf("%d", &arr[i][j]);
                       crr[i][j] = arr[i][j];
                   }
               }
                       
               for (int i = 0; i < n; i++){
                   for (int j = 0; j < n; j++){
                       scanf("%d", &brr[i][j]);
                       drr[i][j] = brr[i][j];
                   }
               }
               
               if(check(arr, brr, n)) {
                             printf("0\n");
                             continue;
               }
               //a.col[0] = a.col[1] = a.col[2] = 0;
               Solve(&a, arr, brr, n);
               //cout << "a " << endl;
               
               //Print(a, n);
               b.colc = 1;
               b.col[0] = 1;
               for (int i = 0; i < n; i++)
                   crr[i][0] = crr[i][0] ^ 1;
                   
               Solve(&b, crr, drr, n);
               
               if(check(arr, brr, n) && check(crr, drr, n)) {
                      if((a.rowc + a.colc) < (b.rowc + b.colc))       
                                Print(a, n);
                      else 
                           Print(b, n);  
               }
               else
                   printf("-1\n");    
    }
    
    return 0;
}
