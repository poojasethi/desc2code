#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
using namespace std;

#define MOD 747474747LL
#define ONLINE_JUDGE

long long distance(vector<vector<long long> > &P, int x, int y, int d)
{
	long long dist = 0;
	for (int i = 0; i < d; i++) 
		dist += (P[x][i] - P[y][i]) * (P[x][i] - P[y][i]);
	return dist;
}

typedef long long int64;
int64 multiply(int64 A, int64 B, int64 C)
{
	int64 a = A/1000000000LL;
	int64 b = A%1000000000LL;
	int64 c = B/1000000000LL;
	int64 d = B%1000000000LL;
	int64 ac = a * c;  
	int64 ad = a * d;
	int64 bc = b * c;
	int64 bd = b * d	;
	for (int i = 1; i<=18; i++){
		ac = ac * 10;
		ac %= C;
	}
	for (int i = 1; i<=9; i++){
		ad = ad * 10;
		ad %= C;
	}
	for (int i = 1; i<=9; i++){
		bc = bc * 10;
		bc %= C;
	}
	return (((((ac + ad) % C) + bc) % C) + bd) % C;
}

int main()
{
	int t;
	scanf("%d", &t);
	while (t--) {
		int n, d;
		scanf("%d%d", &n, &d);
		set<vector<long long> > S; 
		vector<vector<long long> > P(n);
		
		for (int i = 0; i < n; i++) {
			P[i].resize(d);
			for (int j = 0; j < d; j++) 
				scanf("%lld", &P[i][j]);
		}
		#ifndef ONLINE_JUDGE
			cerr << n << endl;
		#endif
		vector<long long> dist(n, 1LL);
		vector<bool> isvisited(n);
		long long cost = 1LL;
		for (int i = 0; i < n; i++) {
			long long max = 0, max_vertex = 0;
			for (int j = 0; j < n; j++) 
				if (!isvisited[j] && dist[j] >= max) {
					max = dist[j];
					max_vertex = j;
				}
			isvisited[max_vertex] = 1;
			#ifndef ONLINE_JUDGE
				cerr << max_vertex << endl;
			#endif
			for (int j = 0; j < n; j++) {
				long long dist_ij;
				if (!isvisited[j] && (dist_ij = distance(P, max_vertex, j, d)) > dist[j]) 
					dist[j] = dist_ij;
			}
		}
		for (int i = 0; i < n; i++) {
			#ifndef ONLINE_JUDGE
				cerr << dist[i] << " ";
			#endif
			cost = multiply(cost, dist[i], MOD);
		}
		printf("%lld\n", cost);
	}
}
