#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<string>
#define mod 747474747

using namespace std;
typedef long long int  LLD;
 
LLD gcd(LLD a, LLD b)
{
   if (b==0) return a;
   return gcd(b,a%b);
}
 
LLD path[6666],visit[6666],n,d,cord[6666][5],dist=0,ans=1;

void dijkstra(LLD v)
{
	LLD prev = -1,i,j;
	visit[v] = 1;
 
	for(i=0;i<n;i++)
	{
		if(!visit[i])
		{
			for(j=0;j<d;j++)
			{
				dist += (cord[i][j] - cord[v][j])*(cord[i][j] - cord[v][j]);
			}
					if(dist > path[i])
					path[i] = dist;
					dist=0;
					}
	}
 
	for(i=0;i<n;i++)
	{
		if(!visit[i])
		{
			if(prev < path[i])
			{
				prev = path[i];
				v = i;
			}
		}
	}
 
	if(prev == -1)
	return;
	else
	{
		if(path[v] > 0)
		ans *= (path[v] % mod);
		if(ans >= mod)
		ans = ans%mod;
		dijkstra(v);
	}
}
 
 
int main()
{ 
	LLD i,j,t;
 
 	scanf("%lld",&t);
 	
 	while(t--)
 	{
	
		scanf("%lld %lld",&n,&d);
		
		for(i=0;i<n;i++)
		{
			for(j=0;j<d;j++)
			{
				scanf("%lld",&cord[i][j]);
			}
		}
		
 
	
	for(i=0;i<n;i++)
	{
		path[i] = -1;
		visit[i] = 0;
	}
	
	path[0]=0;
	dijkstra(0);
 
 
	cout<<ans<<endl;
 	ans=1;
 	}
return 0;
}