
#include<iostream>
#include<cstdio>
#include<vector>
#include<queue>
#include<climits>
#include<cstdlib>
#define pp pair<int,long long>
#define LL long long
#define MOD 747474747
using namespace std;
 long long a[7000][7];
class Prioritize
{
public:
    int operator() ( const pair<int, LL>& p1, const pair<int, LL>& p2 )
    {
        return p1.second < p2.second;
    }
};
int main()
{

    int n,t,e,u,v,i,j,k;
    long long dis,w;
    cin>>t;
    while(t--)
    {priority_queue< pp, vector< pp > , Prioritize > Q;
     cin>>n>>e;
     vector< pp > G[n+1];

    for(i=0;i<n;i++)
   for(j=0;j<e;j++)
   scanf("%lld",&a[i][j]);

   for(i=0;i<n;i++)
  {for(j=0;j<n;j++)
      {dis=0LL;
      for(k=0;k<e;k++)
      {dis+=1LL*(a[i][k]-a[j][k])*(a[i][k]-a[j][k]);}
      G[i].push_back(pp(j,dis));
      G[j].push_back(pp(i,dis));}}

        long long d[n+1];

  int parent[n+1];
int visited[n+1];
    for(int i=1;i<=n;i++)
    {
        d[i] = 0;
        visited[i]=0;
    }
    long long product;
    d[0] = 1LL;
    Q.push(pp(0,d[0]));
    visited[0]=0;
    product=1LL;
    while(!Q.empty())
    {
        u = Q.top().first;
        if(visited[u])
        {
            Q.pop();
            continue;
        }
        product=product*(((Q.top().second))%MOD)%MOD;
        Q.pop();
        visited[u]=1;


        int size = G[u].size();
        for(int i = 0 ; i < size ; i++)
        {
            v = G[u][i].first;
            w = G[u][i].second;
            if((d[v] < w ) && visited [v]==0)
            {

                d[v] = w;
                Q.push(pp(v,d[v]));

            }
        }
    }
    printf("%lld\n",product);
    }
    return 0;
}



