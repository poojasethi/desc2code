#include <bits/stdc++.h>
		
using namespace std;
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef long double ld;
#define var(a,b)  __typeof(b) a = b
#define rep(i,n)  for(int i = 0; (i) < (n); ++i)
#define rept(i,a,b) for(var(i,a); i < (b); ++i)
#define tr(v,it)  for(var(it,v.begin());it!=v.end();++it)
#define fill(a,val) memset(a,val,sizeof(a))
#define gi(n) scanf("%d",&n)
#define all(v) v.begin(),v.end()
#define llu long long unsigned
#define lld long long
#define ld long
 
//end of definitions
//fast input
inline int scan_d()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
inline ld scan_ld()    {int ip=getchar_unlocked(),flag=1;ld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
inline lld scan_lld()    {int ip=getchar_unlocked(),flag=1;lld ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
inline llu scan_llu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
inline void scan_str(char *str){register char c = 0;register int i = 0;while (c < 33)c = getchar_unlocked();while (c != '\n'){str[i] = c;c = getchar_unlocked();i = i + 1;}str[i] = '\0';}
//end of fast input

//fast output 
//no line break
inline void print_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
inline void print_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
inline void print_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
inline void print_llu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
inline void print_str(char *str){char* temp=str;while((*temp)!='\0'){putchar_unlocked(*temp);temp++;}}
//new line
inline void println_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
inline void println_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[12];output_buffer[11]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<12);}
inline void println_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[22];output_buffer[21]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
inline void println_llu(llu n)     {int i=21;char output_buffer[22];output_buffer[21]='\n';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
//special char
char sp;
inline void printsp_d(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[11];output_buffer[10]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
inline void printsp_ld(ld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[12];output_buffer[11]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<12);}
inline void printsp_lld(lld n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[22];output_buffer[21]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
inline void printsp_llu(llu n)     {int i=21;char output_buffer[22];output_buffer[21]=sp;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
//end of fast output

#define MAXN 6666
#define MAXD 5
#define MOD 747474747

inline long long int mod(long long int x)
{
	if(x < MOD)
		return x;
	else if(x < 2*MOD)
		return x-MOD;
	else
		return x%MOD;
}

long long int points[MAXN][MAXD];
long long int maxes[MAXN];
bool visited[MAXN];
inline long long int calculate_dist(long long int point1[MAXD],long long int point2[MAXD],int d)
{
	switch(d)
	{
		case 1:
			return (point1[0]-point2[0])*(point1[0]-point2[0]);
		case 2:
			return (point1[0]-point2[0])*(point1[0]-point2[0])+(point1[1]-point2[1])*(point1[1]-point2[1]);
		case 3:
			return (point1[0]-point2[0])*(point1[0]-point2[0])+(point1[1]-point2[1])*(point1[1]-point2[1])+(point1[2]-point2[2])*(point1[2]-point2[2]);
		case 4:
			return (point1[0]-point2[0])*(point1[0]-point2[0])+(point1[1]-point2[1])*(point1[1]-point2[1])+(point1[2]-point2[2])*(point1[2]-point2[2])+(point1[3]-point2[3])*(point1[3]-point2[3]);
		case 5:
			return (point1[0]-point2[0])*(point1[0]-point2[0])+(point1[1]-point2[1])*(point1[1]-point2[1])+(point1[2]-point2[2])*(point1[2]-point2[2])+(point1[3]-point2[3])*(point1[3]-point2[3])+(point1[4]-point2[4])*(point1[4]-point2[4]);
	}
}

int main()
{
	int t,n,d;
	int i,j;
	int pos=0,curr;
	long long int Max;
	long long int ans,dist;
	t = scan_d();
	while(t--)
	{
		n = scan_d();
		d = scan_d();
		//Take the points as input
		for(i=0;i<n;i++)
		{
			visited[i] = false;
			maxes[i] = 0;
			for(j=0;j<d;j++)
				points[i][j] = scan_d();
		}
		if(n==1)
		{
			println_d(1);
			continue;
		}
		//Calculate ans
		curr = 0;
		ans = 1;

		/*while(!visited[curr])
		{	
			visited[curr]=true;
			Max=0;
			if(curr)
				ans = (ans*( maxes[curr] % MOD)) % MOD;
			for(j=0;j<n;j++)
			{
				if(!visited[j])
				{
					dist=calculate_dist(points[curr],points[j],d);
					if(dist > maxes[j])
						maxes[j]=dist;
					if(maxes[j]>Max)
					{
						Max=maxes[j];
						pos=j;
					}
				}
			}
			curr=pos;
		}*/
		while(!visited[curr])
		{
			visited[curr] = true;
			Max = 0;
			if(curr)
				ans = mod(ans * mod(maxes[curr]));
			for(j=0;j<n;j++)
			{
				if(curr==j)
					continue;
				if(!visited[j])
				{
					dist = calculate_dist(points[curr],points[j],d);
					if(dist > maxes[j])
						maxes[j] = dist;
					if(maxes[j] > Max)
					{
						Max = maxes[j];
						pos = j;
					}
				}
			}
			//println_d(curr);
			curr = pos;
		}
		println_lld(ans);
	}
	//println_lld(mod(20000000000000000L));
	return 0;
}