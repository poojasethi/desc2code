//TEST SUBMISSION
#include<iostream>
#include<stdio.h>
#include<algorithm>
#define LL long long
#define mod 747474747
using namespace std;
 
LL point[6670][5];
LL graph[6670][6670];
 
LL distance(int i,int j,int d)
{
    LL ans=0,temp;
    int x;
    for(x=0;x<d;x++)
    {
        temp=(point[i][x]-point[j][x]);
        temp=(temp * temp);
        ans=(ans + temp);
    }
    return(ans);
}
 
 
void solve(int n)
{
    LL ans=1,label[6670]={-1},max;
    int visited[6670]={0},i,j,node,localnode;
 
    visited[0]=1;
    max=-1;
    for(i=0;i<n;i++)
    {
        if(label[i] < graph[0][i])
        {
            label[i]=graph[0][i];
        }
 
        if(label[i] > max)
        {
            max=label[i];
            node=i;
        }
    }
 
    j=1;
    while(j<n)
    {
        visited[node]=1;
 
        max=-1;
        for(i=0;i<n;i++)
        {
            if(visited[i]) continue;
 
           // printf("Looking at edge from %d to %d with weight %lld\n",node,i,graph[i][node]);
            if(label[i] < graph[i][node])
            {
                //printf("%d has relabelled %d from %lld to %lld\n",node,i,label[i],graph[i][node]);
                label[i]=graph[i][node];
            }
 
            if(label[i] > max)
            {
                max=label[i];
                localnode=i;
            }
        }
 
        node=localnode;
 
        j++;
    }
 
    for(i=0;i<n;i++)
    {
        //printf("Label of %d is %lld\n",i,label[i]);
        if(label[i] > 0)
        {
            ans = (ans * (label[i]%mod)) % mod;
        }
    }
 
    cout<<ans<<endl;
}
 
int main()
{
    int t,n,d,i,j;
    cin>>t;
    while(t--)
    {
        cin>>n>>d;
        for(i=0;i<n;i++)
        {
            for(j=0;j<d;j++)
            {
                cin>>point[i][j];
            }
        }
 
        for(i=0;i<n;i++)
        {
            graph[i][i]=0;
            for(j=i+1;j<n;j++)
            {
                graph[i][j]=graph[j][i]=distance(i,j,d);
            }
        }
 
        solve(n);
    }
 
    return 0;
}
