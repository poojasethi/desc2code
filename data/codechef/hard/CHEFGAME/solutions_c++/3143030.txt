#include<stdio.h>
#include<bitset>
#include<algorithm>

#define x getchar_unlocked()
#define y putchar_unlocked

using namespace std;

//fast input function

inline void inp( int &n )
{
	n=0;
	int ch=x,sign=1;
	while( ch < '0' || ch > '9' )
	{
		if(ch=='-')
			sign=-1;
		ch=x;
	}
	while( ch >= '0' && ch <= '9' )
 		n=(n<<3)+(n<<1)+ ch-'0', ch=x;
	n=n*sign;
}

#define mod 747474747

int input[6667][5];

int d, n;

long long int dis, ans, max_dist, temp;
bool is_visit[6667];

void cal_distance(int p1,int p2)
{
    dis=0;

    for(int i=0;i<d;i++)
    {
        temp=input[p1][i]-input[p2][i];
        dis=dis+temp*temp;
    }
    if(dis==0)
        dis = 1;

}


void solve()
{
    long long int dist_out[6667];
    int i, j, node;
    for(i=0;i<6667;++i)
    {
        dist_out[i]=0;
        is_visit[i]=0;
    }
    i=0;
    ans=1;

    while(is_visit[i]==0)
    {
        is_visit[i]=1;
        max_dist=0;
        if(i)
            ans = (ans*( dist_out[i] % mod)) % mod;
        for(j=0;j<n;j++)
        {
            if(!is_visit[j])
            {
                cal_distance(i,j);
                if(dis > dist_out[j])
                    dist_out[j]=dis;
                if(dist_out[j]>max_dist)
                {
                    max_dist=dist_out[j];
                    node=j;
                }
            }
        }
    i=node;
    }
    printf("%lld\n",ans);
}

int main()
{
    int t, i, j;
    inp(t);
    while(t--)
    {
        inp(n);
        inp(d);
        for(i=0; i<n; i++)
            for(j=0; j<d; j++)
                inp(input[i][j]);
        solve();
    }
    return 0;
}
