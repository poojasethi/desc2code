#include <cstdio>
#include <cstring>

using namespace std;

const int N = 6675, MOD = 747474747;
int n, d, a [N][6];
bool used [N];
long long dist [N], ans = 1;

void read () {
    int i, j;

    scanf ("%d%d", &n, &d);
    for (i = 1; i <= n; i ++) {
        dist [i] = 0;
        used [i] = 0;
        for (j = 1; j <= d; j ++)
            scanf ("%d", &a [i][j]);
    }
}

long long distance (const int &u, const int &v) {
    int i;
    long long D = 0;
    for (i = 1; i <= d; i ++)
        D = D + ((long long)a [u][i] - a [v][i])*(a [u][i] - a [v][i]);
    return D;
}

void apm (int node) {
    int i, newnode = 0;
    long long newdist, maxdist = -1;

    dist [node] = -1;
    used [node] = 1;
    for (i = 1; i <= n; i ++)
        if (!used [i]) {
            newdist = distance (node, i);
            if (newdist > dist [i])
                dist [i] = newdist;
        }
    while (1) {
        newnode = 0;
        maxdist = -1;
        for (i = 1; i <= n; i ++)
            if (!used [i] && dist [i] > maxdist) {
                maxdist = dist [i];
                newnode = i;
            }
        if (newnode == 0)
            break;
        if (maxdist) {
            maxdist = maxdist % MOD;
            ans = ans * maxdist % MOD;
        }
        apm (newnode);
    }
}

void solve () {
    if (n == 1)
        printf ("1\n");
    else {
        apm (1);
        printf ("%lld\n", ans);
    }
}

int main () {
    int T, t;

    /*freopen ("chef.in", "r", stdin);
    freopen ("chef.out", "w", stdout);*/

    scanf ("%d", &T);
    for (t = 0; t < T; t ++) {
        ans = 1;
        read ();
        solve ();
    }
    return 0;
}
