#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define MOD 747474747 // 2 billion

int n,d,ch[6669];
ll a[6669][6],mxdis[6669];

ll dist(int i,int j)
{
    ll dis = 0;
    REP(k,0,d - 1)
        dis += ( a[i][k] - a[j][k] ) * ( a[i][k] - a[j][k] );
    return dis;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    int t;s(t);
    while( t-- )
    {
        s(n);s(d);
        REP(i,0,n - 1)
            REP(j,0,d - 1)
                sll(a[i][j]);
        REP(i,0,n - 1)
            ch[i] = -1;
        REP(i,0,n - 1)
            mxdis[i] = 0;
        REP(i,0,n - 1)
            mxdis[i] = max(mxdis[i] , dist(0,i));
        ch[0] = 1;
        ll res = 1;
        while( 1 == 1 )
        {
            ll mx = 0;
            int ind = -1;
            REP(i,0,n - 1)
            {
                if( ch[i] == -1 && mxdis[i] > mx )
                {
                    ind = i;
                    mx = mxdis[i];
                }
            }
            if( mx == 0 )
                break;
            ch[ind] = 1;
            res = ( res * (mx % MOD) ) % MOD;
            REP(i,0,n - 1)
            {
                if( ch[i] == -1 )
                    mxdis[i] = max(mxdis[i] , dist(ind,i) );
            }
        }
        printf("%lld\n",res);
    }
    return 0;
}
