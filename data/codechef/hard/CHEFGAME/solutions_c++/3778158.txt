#include<iostream>
#include<cstdio>
#include<climits>
#include<algorithm>
#include<string>

#define MOD 747474747

using namespace std;

int graph[6666][5];
	
int ROW,COL;

inline int readint()
{
	int i=0;
	char c = getchar_unlocked();
	while(isspace(c)) 
		c=getchar_unlocked();
	bool neg = false;
	if (c == '-') 
	{
		neg=true; 
		c=getchar_unlocked();
	}
	while(isdigit(c))
	{ 
		i=i*10+c-'0';
		c=getchar_unlocked();
	}
	if(neg)
		i = -i;
	return i;
}

inline long long find_dist(int start, int end)
{
	register long long dist=0,diff;
	for(int i=0;i<COL;i++)
	{
		diff=graph[start][i]-graph[end][i];
		dist+=(diff*diff);
	}
	return dist;
}

void prim()
{
			
	ROW = readint();
	COL = readint();
	
	int i,j;
	long long dist[ROW+1];
	
	for(i=0;i<ROW;i++)
		for(j=0;j<COL;j++)
			graph[i][j]=readint();
	
	bool visit[ROW];
	int current=0,temp;
	
	for(i=0;i<ROW;i++)
		visit[i]=false;
	
	long long score=1;
	dist[0]=0;
	
	visit[0]=true;
	
	for(i=1;i<ROW;i++)
	{
		dist[i]=find_dist(0,i);
		if(dist[i] > dist[current])
			current=i;
	}
	
	//cout<<"dist[current]="<<dist[current]<<endl;
	
	while(dist[current]>0)
	{
		visit[current]=true;
		score=(score*(dist[current]%MOD))%MOD;
		dist[ROW]=-1;
		temp=ROW;
		for(i=0;i<ROW;i++)
		{
			if(!visit[i])
			{
				dist[i]=max(dist[i],find_dist(i,current));
				if(dist[i]>dist[temp])
					temp=i;
			}
		}
		current=temp;
	}
	printf("%lld\n",score);
}

int main()
{
	int t=readint();
	while(t--)
	{
		prim();
	}
	return 0;
}			
