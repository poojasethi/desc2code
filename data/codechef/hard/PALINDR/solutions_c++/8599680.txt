
#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi  vector<int>
#define pb  push_back
#define mp  make_pair
#define M(a,x) memset(a,x,sizeof(a))
#define sci(x) scanf("%d",&x);
#define scl(x) scanf("%lld",&x);
#define scs(x) scanf("%s",x);
#define print(x) printf("%d",x);
#define nl printf("\n")
#define printl(x) printf("%lld",x)
#define F(i,a,n) for(int i=a;i<n;i++)
#define INF 100000000000000000LL
#define LL long long

// Sunday Morning Love You Wednesday Morning Love You I Wanna Love U Everyday;

const int N = 1e5+5;

struct node {
    int p,cnt,val[10],sum[10];
    bool f;
    node *l,*r;
};
node *t;
int n,m;
string s;
node a[N];
LL fact[N],inv[N];

LL pwr(LL a,LL b) {
    if(!b) return a;
    LL ans=1;
    while(b) {
	if(b&1) ans=(ans*a)%MOD;
	b/=2;a=(a*a)%MOD;
    }
    return ans;
}
inline void pre() {
    fact[0]=1;inv[0]=1;
    for(int i=1;i<=N-2;i++) {
	fact[i]=(fact[i-1]*i);
	fact[i]%=MOD;
	inv[i]=pwr(fact[i],MOD-2);
    }
}
LL C(int n,int r) {
    return (fact[n]*((inv[n-r]*inv[r])%MOD))%MOD;
}
int cnt(node *t) {
    return t ? t->cnt:0;
}
int sum(node* t,int i) {
    return t ? t->sum[i]:0;
}
inline void push(node *t) {
    if(t) {
	if(t->f && t->l) {
	    t->l->f^=1;
	}
	if(t->f && t->r) {
	    t->r->f^=1;
	}
	if(t->f) swap(t->l,t->r);
	t->f=0;
	t->cnt=cnt(t->l)+1+cnt(t->r);
	for(int i=0;i<10;i++) {
	    t->sum[i]=t->val[i]+sum(t->l,i)+sum(t->r,i);
	}
    }
}
inline void split(node* t,node* &l, node* &r,int key) {
    push(t);
    if(!t) {
	return void(l=r=0);
    }
    if(key <= cnt(t->l)) {
	split(t->l,l,t->l,key);
	r=t;
    }
    else {
	split(t->r,t->r,r,key-cnt(t->l)-1);
	l=t;
    }
    push(l);push(r);
}
inline void merge(node* &t, node* l, node* r) {
    push(l);push(r);
    if(!l || !r) {
	t=l?l:r;
    }
    else if(l->p > r->p) {
	merge(l->r,l->r,r);
	t=l;
    }
    else {
	merge(r->l,l,r->l);
	t=r;
    }
    push(t);
}
int main() {
    pre();
    scanf("%d%d",&n,&m);
    cin>>s;
    for(int i=0;i<n;i++) {
	a[i+1].sum[s[i]-97]=1;
	a[i+1].val[s[i]-97]=1;
	a[i+1].p=rand();
	merge(t,t,&a[i+1]);
    }
    int cnt[10];
    for(int i=1;i<=m;i++) {
	int tp,l,r;
	sci(tp);sci(l);sci(r);
	l--;r--;
	if(tp==1) {
	    node *t1,*t2,*t3;
	    split(t,t1,t2,l);
	    split(t2,t2,t3,r-l+1);
	    t2->f^=1;
	    merge(t,t1,t2);
	    merge(t,t,t3);
	}
	else {
	    int odd=0;
	    node *t1,*t2,*t3;
	    split(t,t1,t2,l);
	    split(t2,t2,t3,r-l+1);
	    for(int j=0;j<10;j++) {
		cnt[j]=sum(t2,j);
		if(cnt[j]&1) odd++;
	    }
	    merge(t,t1,t2);
	    merge(t,t,t3);
	    if(odd>1) {
		puts("0");
		continue;
	    }
	    for(int j=0;j<10;j++) {
		if(cnt[j]&1) cnt[j]--;
	    }
	    int w=0;
	    for(int j=0;j<10;j++) {
		w+=(cnt[j]/2);
	    }
	    LL ans = fact[w];
	    for(int j=0;j<10;j++) {
		ans=(ans*inv[cnt[j]/2])%MOD;
	    }
	    printf("%lld\n",ans);
	}
    }
    return 0;
}
