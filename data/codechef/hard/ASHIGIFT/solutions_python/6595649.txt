
def solve(v):
	global x
	global b
	global c
	global merged
	
	
	for i in merged:
		if len(i) == 2:
			v -= i[1]
		elif v >= i[1]:
			v += i[2]
		
		if v <= 0:
			return False
	
	return True
	
	

def bin_search(mx):	
	low, high = 1, mx
	while low <= high:
		v = (low+high)/2
		rvc, rvp = solve(v), solve(v-1)
		if rvc and not rvp:
			return v
		
		if rvc:
			high = v-1
		else:
			low = v+1
		
def merge():
	global b
	global c
	global dish
	global clan
	
	tmp = []
	i,j = 0, 0
	while i < b and j < c:
		if dish[i][0] < clan[j][0]:
			tmp.append(dish[i])
			i += 1
		else:
			tmp.append(clan[j])
			j += 1
	
	while i < b:
		tmp.append(dish[i])
		i += 1
	
	#~ while j < c:
		#~ tmp.append(clan[j])
		#~ j += 1
	
	return tmp
	

x,b,c = 0,0,0
dish = []
clan = []
merged = []
t = int(raw_input())
for i in range(t):
	x = int(raw_input())
	b = [int(j) for j in raw_input().split()]
	dish = [[b[j],b[j+1]] for j in range(1, len(b[1:]), 2)]
	b = b[0]
	
	c = [int(j) for j in raw_input().split()]
	clan = [[c[j],c[j+1],c[j+2]] for j in range(1, len(c[1:]), 3)]
	c = c[0]
	
	mx = sum([j[1] for j in dish]) + 1
	
	merged = merge()
	#~ print merged
	print bin_search(mx)
