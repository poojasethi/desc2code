/*
Author - Shubham Shukla (shuklas664)
*/
#include <bits/stdc++.h>

//datatypes
typedef long long       ll;

//macros
#define MOD         1000000007
#define scll(t)     scanf("%lld",&t)
#define sc(t)       scanf("%d",&t)
#define max(a,b)    (a>=b?a:b)
#define min(a,b)    (a<b?a:b)
#define gc          getchar_unlocked
#define mp          make_pair
#define pb          push_back
#define F           first
#define S           second
#define lc          printf("\n")

//print array and matrix
#define printAr(a,n)    {for(int i=0;i<n;i++){cout<<a[i]<<" ";}lc;}
#define printMat(a,n,m) {for(int i=0;i<n;i++){for(int j=0;j<m;j++){cout<<a[i][j]<<" ";}lc;}lc}


using namespace std;



/*
void scanint(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

void scanint(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}

*/

struct node
{
    ll pos,req,added;
};

struct node2
{
    ll pos,val;
};

struct cmp
{
    bool operator()(const node &a,const node &b)
    {
        return (a.pos<b.pos );
    }
};
struct cmp2
{
    bool operator()(const node2 &a,const node2 &b)
    {
        return (a.pos<b.pos );
    }
};

struct node clan[10009];
struct node2 dish[10009];
int dsize,csize;// size of clan and dish arrays

bool possible(ll mem)
{
    int i=0,j=0;
    while(i<dsize && j<csize)
    {
        if(clan[j].pos > dish[i].pos)
        {
            mem-=dish[i].val;
            i++;
            if(mem<0)
                return false;
        }

        else
        {
            if(clan[j].req<=mem)
                {
                    mem+=clan[j].added;

                }
            j++;
        }

    }
    while(i<dsize)
    {
        mem-=dish[i].val;
        i++;
        if(mem<0)
            return false;
    }
    return (mem>=1);
}



int main()
{


	int t,i,b,c;
	ll n,x,xi,yi,range=1;
	sc(t);
	while(t--)
    {
        dsize = csize = 0;
        range=1;
        scll(x);
		sc(b);

		for(i=0;i<b;i++)
        {
            scll(xi);
            scll(yi);
            range+=yi;
            dish[dsize].pos = xi;
            dish[dsize].val = yi;
            dsize++;
        }
        sc(c);
        for(i=0;i<c;i++)
        {
            scll(clan[csize].pos);
            scll(clan[csize].req);
            scll(clan[csize].added);
            csize++;
        }
        sort(clan,clan+csize,cmp());
        sort(dish,dish+dsize,cmp2());

        ll r=range;
        ll ans = r;
        ll l = 0;

        while(l<=r)
        {
            ll m = l+(r-l)/2;
            if(possible(m))
            {
                ans = min(ans,m);
                r = m-1;
            }
            else l = m+1;
        }

        cout<<ans<<endl;
    }

}

