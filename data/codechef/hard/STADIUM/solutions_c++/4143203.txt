#include <vector>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <queue>
#include <algorithm>
#include <ctime>
//for min heap use : std::priority_queue<int, std::vector<int>, std::greater<int> > my_min_heap;
using namespace std;

struct node{
int stime,ftime;
};


struct compare
{
  bool operator()(const node& l, const node& r)
  {
      return l.ftime > r.ftime;
  }
};

typedef struct node node;
int main()
{
   // srand(time(0));
    priority_queue<node,vector<node>,compare> Q; //it has 3 parameters type of object,
                            // which container will be used here vector of nodes, 3rd comparator
    int N,s,d,cnt=0;
    node curjob;
  cin>>N;
  //  N = 100000;
    for(int i = 0 ; i<N;i++)
    {
        node n;
       scanf("%d%d",&s,&d);
    //    s = rand()%1000000 + 1;
      //  d = rand()%1000 + 1;
        n.stime =s ;
        n.ftime = s+d;
        Q.push(n);
    }
    while(!Q.empty())
    {
        curjob = Q.top();
        Q.pop();
        cnt++;
        while(!Q.empty())
        {
            if( curjob.ftime >= Q.top().stime)
                Q.pop();
            else
                break;
        }
    }
    cout<<cnt<<endl;
    return 0;
}
