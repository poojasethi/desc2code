#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>

inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }

  return false;
}

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }

  if(neg)
	  *a = -*a;
}

int N, K, M;
int T = 1;
struct Event
{
	int	s;
	int	d;
};
Event E[100000 + 2];
int Answer[100000 + 2] = {0};

struct lessEvent : public std::binary_function<Event, Event, bool>
{
  bool operator()(const Event& l, const Event& r) const
  {
    return (l.s < r.s);
  }
};



int main()
{
#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif

  while(T--)
  {
    fastread(&N);

    for(int i = 0; i < N; ++i)
    {
		fastread(&E[i].s);
		fastread(&E[i].d);
    }

	// Sort first
	std::sort(E, E + N, lessEvent());

	// Start from the end and form the array of the largest number of events possible if event i is accepted
	Answer[N - 1] = 1;
	for(int i = N - 2; i >= 0; --i)
	{
		const Event &e = E[i];
		const int endDate = e.s + e.d;

		int resultIncluding = 1;
		for(int k = i + 1; k < N; ++k)
		{
			if(E[k].s > endDate)
			{
				resultIncluding += Answer[k];
				break;
			}
		}
		const int resultExcluding = Answer[i + 1];

		Answer[i] = (resultIncluding > resultExcluding) ? resultIncluding : resultExcluding;
	}

	printf("%lld\n", Answer[0]);
  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
