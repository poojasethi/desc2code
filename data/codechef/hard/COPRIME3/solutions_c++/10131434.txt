// #include<abhi.944>

#include<bits/stdc++.h>
using namespace std;

typedef long long int ll;
typedef double ld;

#ifndef ONLINE_JUDGE
	#define TRACE
#endif

const long double PI=3.1415926535897932384626;
const ll MAX=1000000000+7;
const int INF = 0x3f3f3f3f;

#define ps printf(" ")
#define pn printf("\n")
#define sc(n) scanf("%d",&n)
#define pf(n) printf("%lld",n)
#define forall(it, x) for(__typeof((x).begin()) it=(x).begin();it!=(x).end();it++)
#define sz size()
#define ff first
#define ss second
#define pb push_back //pop_back
#define mp make_pair
#define fill(a,val) memset(a,val,sizeof(a))
//#define pii pair <int ,int>

inline ll div_(ld A,ld B,bool ud){if(B){ld ret=(ld)(A)/(ld)(B);if(ud)return ceil(ret);return floor(ret);}return INF;}
inline ll mul_(ll A,ll B){ll ret = (ll)((ll)(A)*(ll)(B));return ret;}
inline ll sub_(ll A,ll B){ll ret = (ll)((ll)(A)-(ll)(B));return ret;}
inline ll add_(ll A,ll B){ll ret = (ll)((ll)(A)+(ll)(B));return ret;}
inline ll power_(ll A, ll p){ll ret=1;while(p){if(p&1) {ret=(ret*A);}A=(A*A);p>>=1;}return ret;}

#ifdef TRACE
    #define trace(x)            cerr<<__FUNCTION__<<":"<<__LINE__<<": ERROR---->"<<x<<endl;
    #define trace1(x)           cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<endl;
    #define trace2(x,y)         cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<endl;
    #define trace3(x,y,z)       cerr<<__FUNCTION__<<":"<<__LINE__<<": "#x" = "<<x<<" | "#y" = "<<y<<" | "#z" = "<<z<<endl;
    #define trace4(a,b,c,d)     cerr<<__FUNCTION__<<":"<<__LINE__<<": "#a" = "<<a<<" | "#b" = "<<b<<" | "#c" = "<<c<<" | "#d" = "<<d<<endl;
#else
    #define trace(x)
    #define trace1(x)
    #define trace2(x,y)
    #define trace3(x,y,z)
    #define trace4(a,b,c,d)
#endif

#define N 1000006

int a[N+1];
int multipliers[N+1];
ll subsets[N+1];

ll nc(ll A) {
    ll by = mul_(A,mul_(A-1,A-2));
    by = div_(by,6,0);
    return by;
}

int main(int argc, char const *argv[])
{
    int n;
    sc(n);

    int max1 = -1;
    for(int i=0;i<n;i++) {
        sc(a[i]);
        multipliers[a[i]]++;
        if(max1 < a[i]) max1 = a[i];
    }

    for(int i=max1;i>=1;i--) {
        int j = i;
        ll tot = multipliers[j];
        j += i;
        ll sum = 0;
        while(j <= max1) {
            sum = add_(sum,subsets[j]);
            tot = add_(tot,multipliers[j]);
            j += i;
        }
        subsets[i] = sub_(nc(tot) ,sum);
    }

    pf(subsets[1]); pn;
    return 0;
}