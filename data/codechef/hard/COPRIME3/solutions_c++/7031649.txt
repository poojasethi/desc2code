/* Pranet Verma */
/* Yeh mera template hai. Apna khud banao =_= */
#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define pb push_back
#define mp make_pair
#define s(n) scanf("%d",&n)
#define s2(n,m) scanf("%d%d",&n,&m)
#define s3(n,m,l) scanf("%d%d%d",&n,&m,&l)
#define rep(i,n) for(int i=0;i<n;++i)
ll pwr(ll a,ll b,ll mod) {a%=mod;if(a<0)a+=mod;ll ans=1; while(b) {if(b&1) ans=(ans*a)%mod; a=(a*a)%mod; b/=2; } return ans; }
ll pwr(ll a,ll b) {ll ans=1; while(b) {if(b&1) ans*=a; a*=a; b/=2; } return ans; }
ll gcd(ll a,ll b) {while(b) {ll temp=a; a=b; b=temp%b; } return a; }
ll lcm(ll a,ll b) {return (a/gcd(a,b))*b; }
ll modularInverse(ll a,ll m) {/*reminder: make sure m is prime*/ assert(false); return pwr(a,m-2,m); }
const int mod=1000000007;

int g[1000001];
int lpf[1000001];
int n;
int primes[21];

#define C(x) ((ll)x*(x-1)*(x-2)/6)
int main()
{
    for(int i=2;i<=1000000;++i)
    {
        if(lpf[i]==0)
            for(int j=i;j<=1000000;j+=i)
                lpf[j]=i;
    }   
    int N;
    s(N);
    ll ans=0;
    for(int i=0;i<N;++i)
        {
            int x;
            s(x);
            n=0;
            while(x!=1)
                {
                    if(n==0 || primes[n-1]!=lpf[x])
                        primes[n++]=lpf[x];
                    x/=lpf[x];
                }
            n=unique(primes,primes+n)-primes;
            
            for(int mask=0;mask<(1<<n);++mask)
            {
                int prod=1;
                int nFac=0;
                for(int i=0;i<n;++i)
                    if(mask&(1<<i))
                        prod*=primes[i],++nFac;
                int u=0;
                
                if(nFac&1)
                    u=-1;
                else
                    u=1;

                ans-=u*C(g[prod]);
                g[prod]+=1;
                ans+=u*C(g[prod]);
            }
        }

    cout<<ans;


}