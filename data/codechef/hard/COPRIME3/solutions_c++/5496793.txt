    #include <iostream>
    #include <cstdio>
    #include <vector>
    #include <climits>
    using namespace std;
     
    vector<int> mobeius;
    vector<int> no_prime_factors;
    #define INVALID INT_MAX
    void initmobeius(int n)
    {
    mobeius.resize(n + 1, INVALID);
    no_prime_factors.resize(n + 1);
    mobeius[1] = 0;
    mobeius[2] = 1, no_prime_factors[2] = 0;
    for (int i = 2; i <= n; i++) {
    if (mobeius[i]) {
    if (no_prime_factors[i] == 0) {
    mobeius[i] = 1;
    for (int j = 1; i * j <= n; j++)
    no_prime_factors[i * j] += 1;
    }
    else if (no_prime_factors[i] == 1) {
    mobeius[i] = 0;
    for (int j = 1; i * j <= n; j++)
    mobeius[i * j] = 0;
    }
    else if (no_prime_factors[i] & 1)
    mobeius[i] = 1;
    else
    mobeius[i] = -1;
    }
    }
    }
     
    vector<int> cnt(1000001);
     
    long long D(long long x) {
    long long d = 0;
    for (int i = 1; x * i <= 1000000; i++)
    d += cnt[x*i];
    return d;
    }
     
    int main()
    {
    initmobeius(1000001);
    long long n;
    scanf("%lld", &n);
    for (int i = 0; i < n; i++) {
    int tmp;
    scanf("%d", &tmp);
    cnt[tmp]++;
    }
    long long answer = 0;
    for (int x = 2; x <= 1000000; x++) {
    long long d = D(x);
    answer += (d*(d-1)*(d-2))/6 *mobeius[x];
    }
    cout << (n*(n-1)*(n-2))/6 - answer << endl;
    }
