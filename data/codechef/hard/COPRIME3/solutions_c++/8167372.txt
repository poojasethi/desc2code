#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<algorithm>
#include<set>
#include<map>
#include<utility>
#include<vector>
#include<string>
#include<stack>
#include<queue>
using namespace std;
#define RANGE 1000006
bool sieve[RANGE];
int fprime[RANGE];
vector < int > ppf;
vector < pair < int , int > > divset;
void primeTable()
{
    int i,j;
    int lim = sqrt((double) RANGE)+6;
    memset(fprime, -1, sizeof(fprime));
    fprime[2] = 2;
    for (i=4; i<RANGE; i+=2) sieve[i] = true, fprime[i] = 2;
    for (i=3; i<lim; i+=2)
    {
        if (!sieve[i])
        {
            fprime[i] = i;
            for (j=i*i; j<RANGE; j += (i<<1))
            {
                sieve[j] = true;
                if (fprime[j] == -1) fprime[j] = i;
            }
        }
    }
    for (; i<RANGE; i+=2)
    {
        if (!sieve[i]) fprime[i] = i;
    }
}
int factor(int N)
{
    ppf.clear();
    int p = fprime[N], n = 1;
    while(N != 1)
    {
        p = fprime[N], n *= p;
        while(fprime[N] == p) N /= p;
        ppf.push_back(p);
    }
    return n;
}
int divisor(int N)
{
    int n = factor(N);
    divset.clear();
    divset.push_back(make_pair(1,0));
    int i,j,f,p,m,exs,c;
    for (i=0; i<ppf.size(); ++i)
    {
        p = ppf[i];
        m = p, exs = divset.size();
        for (j=0; j<exs; ++j) divset.push_back(make_pair(divset[j].first*m,divset[j].second+1));
    }
    sort(divset.begin(), divset.end());
    //for (i=0; i<divset.size(); ++i) printf("%d %d\n", divset[i].first,divset[i].second); puts("");
    return n;
}
#define MAXN 100006
#define MAXV 1000006
int cnt[MAXV];
long long calc()
{
    long long ret = 0;
    int i,d;
    for (i=1; i<divset.size(); ++i)
    {
        d = divset[i].first;
        ret += (((long long) cnt[d] * (cnt[d]-1))/2) * (divset[i].second%2 ? 1:-1);
        //printf("for %d exp = %lld\n", d, ((long long) cnt[d] * (cnt[d]-1)) * (divset[i].second%2 ? 1:-1));
    }
    return ret;
}
void update()
{
    int i;
    for (i=0; i<divset.size(); ++i) ++cnt[divset[i].first];
}
int main()
{
    primeTable();
    int N,i,x;
    long long tot, ans;
    while (scanf("%d", &N) != EOF)
    {
        memset(cnt, 0, sizeof(cnt));
        ans = tot = 0;
        for (i=1; i<=N; ++i)
        {
            scanf("%d", &x);
            x = divisor(x);
            ans += tot - calc();
            //printf("\t\t\t%d : %lld (%lld) - (%lld)\n", i, ans, tot, calc());
            update();
            tot += i-1;
        }
        printf("%lld\n", ans);
    }
    return 0;
}
 