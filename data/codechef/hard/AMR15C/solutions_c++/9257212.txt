#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=1e9+7,maxn=100005,ln=18;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
//#define S(x) scanf("%d",&x)
//#define getcx getchar_unlocked
#define getcx getchar
inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(i,0,n) cout<<i<<". "<<x[i]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(i,0,m) {F(j,0,n) cout<<x[i][j]<<" "; cout<<endl;} cout<<endl
#define pii pair<int,int>
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
const int inf= int(1e9),shift=30,etf=mod-1;

int ans[maxn];

int main()
{
    int t;
    S(t);
    while(t--)
    {
        int n,k;
        S(n);
        S(k);
        if(n/2<k)
        {
            printf("-1\n");
            continue;
        }
        if(!k)
        {
            F(i,1,n+1)
            Ps(i);
            printf("\n");
            continue;
        }
        int div=2*k;
        int r=n%div,m=n/div;
        if(r)
        {
            m--;
            r+=2*k;
        }
        F(i,1,m+1)
        {
            int l=div*(i-1)+1,r=div*i;
            F(j,l,r+1)
            {
                ans[j]=(j+k>r)?j-k:j+k;
            }
        }
        if(r)
        {
            int temp[r+1];
            int rem[r+1];
            F(i,0,r+1)
                rem[i]=0;
            F(i,1,k+1)
            {
                temp[i]=i+k;
                rem[i+k]++;
            }
            if(r<=3*k)
            {
                F(i,1,k+1)
                {
                    temp[r-k+i]=i;
                }
                F(i,k+1,r+1-k)
                {
                    temp[i]=i+k;
                }
            }
            else
            {

                int idx=k+1;
                F(i,1,r-3*k+1)
                {
                    temp[idx++]=i;
                    rem[i]++;
                }
                F(i,r-k+1,r+1)
                {
                    temp[idx++]=i;
                    rem[i]++;
                }
                /*F(i,r-3*k+1,k+1)
                {
                    temp[idx++]=i;
                }
                F(i,2*k+1,r-k+1)
                {
                    temp[idx++]=i;

                }*/
                F(i,1,r+1)
                {
                    if(!rem[i])
                        temp[idx++]=i;
                }
            }
            F(i,1,r+1)
            {
                ans[m*div+i]=temp[i]+m*div;
            }
        }
        F(i,1,n+1)
            Ps(ans[i]);
        printf("\n");
    }
    return 0;
}
