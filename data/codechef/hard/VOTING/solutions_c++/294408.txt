// credit to Stephen Merriman

#include <cstdio>
#include <iostream>
#include <vector>
#include <string.h>

using namespace std;

int voters;
int candidates;

int count[15][15];
int memo[1<<15];
int choosen[1<<15];

int temp[15];

int solve (int state, int upto) {
	if (memo[state]!=-1) return memo[state];
	if (upto == candidates) return memo[state] = 0;
	
	for (int i=0; i<candidates; i++)
		if ((state & (1<<i)) == 0) { // doing the bit-masking, only 0-bit
			int cost = 0;
			for (int j=0; j<candidates; j++)
				if (state & (1<<j))
					cost += count[i][j];
					
			int cur = cost + solve((1<<i)|state, upto+1); // upto+1
			
			if (memo[state]==-1 || cur < memo[state]) {
				memo[state] = cur;
				choosen[state] = i;
			}
		}
	
	return memo[state];
}

int main(int argc, char** argv) {
	int tc; 
	scanf("%d", &tc);
	
	int i, j, k;
	vector<int> list;
	while (tc--) {
		memset(count,0,sizeof(count));
		memset(memo,-1,sizeof(memo));
		
		scanf("%d %d", &voters, &candidates);
		
		for (k=0; k<voters; k++) {
			for (i=0; i<candidates; i++) {
				scanf("%d", &temp[i]);
			}
			
			for (i=candidates-1; i>0; i--) 
				for (j=i-1; j>=0; j--)
					count[temp[i]-1][temp[j]-1]++;
		}
		
		printf("%d:", solve(0,0));	
		i = j = 0;
		list.clear();
		while (i < candidates) {
			k = choosen[j];
			list.push_back(k);
			j |= 1<<k;
			i++;
		}
		for (i=list.size()-1; i>=0; i--)
			printf(" %d", list[i]+1);
		printf("\n");
	}
			
	return 0;
}
