#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;
const int MOD = 1000000007;
const int MAXN = 205;

int n, K;
int dp[MAXN][MAXN][MAXN];
int cnt[MAXN][MAXN][MAXN];
int p[MAXN];
int pre[MAXN];

int calc(int l, int r, int j, int k) {
    if (r < l) return 0;
    int ret = cnt[r][j][k] - cnt[l-1][j][k];
    if (ret < 0) ret += MOD;
    return ret;
}

int main() {
    int T;
    scanf("%d", &T);
    for (int cas = 1; cas <= T; cas++) {
        scanf("%d%d", &n, &K);
        for (int i = 1; i <= n; i++) scanf("%d", &p[i]);
        sort(p + 1, p + 1 + n);
        for (int i = n; i >= 1; i--) {
            int j = i;
            while (j >= 1 && p[j] == p[i]) -- j;
            pre[i] = j + 1;
        }
        memset(dp, 0, sizeof(dp));
        memset(cnt, 0, sizeof(cnt));
        for (int i = 1; i <= n; i++) {
            dp[i][1][1] = 1;
            cnt[i][1][1] = (cnt[i - 1][1][1] + 1) % MOD;
            for (int j = 2; j <= i; j++) {
                for (int k = 1; k <= j; k++) {
                    int ret = 0;
                    ret = (ret + calc(pre[i], i-1, j-1, k)) % MOD;
                    if (pre[i] > 1) {
                        ret = (ret + calc(1, pre[i]-1, j-1, k-1)) % MOD;
                    }
                    ret = (ret + (long long)dp[i][j-1][k] * (i - j + 1) % MOD) % MOD;
                    dp[i][j][k] = ret;
                    cnt[i][j][k] = (cnt[i-1][j][k] + ret) % MOD;
                }
            }
        }
        int sum = 0;
        for (int i = 1; i <= K; i++) {
            sum = (sum + dp[n][n][i]) % MOD;
        }
        printf("%d\n", sum);
    }
    return 0;
}

