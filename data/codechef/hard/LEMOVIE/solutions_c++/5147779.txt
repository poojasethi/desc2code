#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int P = 1e9 + 7;

typedef long long LL;
int a[205], b[205], num[205];
int dp[205][205], sum[205];
int pp[205], C[205][205];

void updata(int &x, int y) {
    x += y;
    if (x >= P) x -= P;
}

int main() {
    //freopen("1.txt", "r", stdin);
    int T;
    scanf("%d", &T);
    pp[0] = 1;
    for (int i = 1; i < 205; ++i) pp[i] = (LL)pp[i - 1] * i % P;
    for (int i = 0; i < 205; ++i)
	for (int j = 0; j <= i; ++j)
	    C[i][j] = (j == 0) ? 1 : (C[i - 1][j] + C[i - 1][j - 1]) % P;
    while (T--) { 
	int n, K;
	scanf("%d%d", &n, &K);
	memset(num, 0, sizeof(num));
	for (int i = 1; i <= n; ++i) {
	    scanf("%d", &a[i]);
	    b[i] = a[i];
	}
	sort(b + 1, b + 1 + n);
	int m = unique(b + 1, b + 1 + n) - b - 1;
	for (int i = 1; i <= n; ++i) {
	    a[i] = lower_bound(b + 1, b + 1 + m, a[i]) - b;
	    ++num[a[i]];
	}
	sum[0] = 0;
	for (int i = 1; i <= m; ++i)
	    sum[i] = sum[i - 1] + num[i];
	memset(dp, 0, sizeof(dp));
	dp[0][0] = 1;
	for (int i = 0; i < m; ++i)
	    for (int j = 0; j <= n; ++j)
		if (dp[i][j]) {
		    int tot = n - sum[i];
		    //   printf("%d %d %d\n", i, j, dp[i][j]);
		    for (int k = i + 1; k <= m; ++k) {
			int res = num[k];
			int ref = sum[k] - sum[i] - 1;
			int ret = (LL)C[tot - 1][ref] * pp[ref] % P; 
			dp[k][j + 1] += (LL) res * dp[i][j] % P * ret % P;
			dp[k][j + 1] %= P;
		    }
		}
	int ans = 0;
	for (int i = 1; i <= K; ++i)
	    ans = (ans + dp[m][i]) % P;
	printf("%d\n", ans);
    }
    return 0;
}

