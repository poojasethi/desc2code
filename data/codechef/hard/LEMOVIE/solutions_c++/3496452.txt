#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <bitset>
#include <algorithm>
#include <set>
#include <string>
#include <vector>
#include <map>
#include <list>
#include <stack>
#include <queue>
#include <deque>
#define dou double
#define mem(a) memset(a, 0, sizeof(a))
#define memm(a) memset(a, -1, sizeof(a))
#define LL long long
#define PB push_back
#define MP make_pair
#define PII pair<int, int>
#define FI first
#define SE second
#define RI(a) scanf("%d", &(a))
#define RII(a, b) scanf("%d%d", &(a), &(b))
#define RIII(a, b, c) scanf("%d%d%d", &(a), &(b), &(c))
#define RL(a) scanf("%I64d", &(a))
#define RLL(a, b) scanf("%I64d%I64d", &(a), &(b))
#define RLLL(a, b, c) scanf("%I64d%I64d%I64d", &(a), &(b), &(c))
#define PI(r) printf("%d\n", (r))
#define PL(r) printf("%I64d\n", (r))
#define RS(s) scanf("%s", (s))
#define SL(a) strlen(a)
#define REP(i, n) for (int i = 0; i < (int) (n); ++i)
#define REPP(i, a, b) for (int i = (int) (a); i <= (int) (b); ++i)
#define FOR(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
//Segment tree
#define LC (x << 1)
#define RC ((x << 1) | 1)
#define MID ((l + r) >> 1)
#define LB(x) ((x) & (-(x)))
#define M (N - 1000)
#pragma warning (disable : 4996)
//#pragma comment(linker, "/STACK:102400000,102400000")
#define EPS 1e-8
#define INF 2000000000
#define LIM (1ll << 60)
#define MOD 1000000007
#define N 111111

using namespace std;

int n, m;
LL dp[N];
int a[N], cnt[N];

int main(){
	int t, x, y, z, ca = 1;
	//freopen("in.txt", "r", stdin);
	//freopen("out.txt", "w", stdout);
	//ios :: sync_with_stdio(false);
	RI(t);
	while (t--){
		RII(n, m);
		REPP(i, 1, n) RI(a[i]);
		sort(a + 1, a + n + 1);
		REPP(i, 1, n) cnt[a[i]]++;
		int tot = unique(a + 1, a + n + 1) - a - 1, now = cnt[a[tot]];
		dp[1] = 1;
		REPP(i, 1, cnt[a[tot]]) dp[1] = (dp[1] * i) % MOD;
		//cout << dp[1] << ' ' << now << endl;
		for (int i = tot - 1; i > 0; --i) {
			LL t = 1;
			REPP(j, now + 1, now + cnt[a[i]] - 1) t = (t * j) % MOD;
			//cout << t << endl;
			for (int k = m; k >= 1; --k) {
				dp[k] = (dp[k] * t % MOD * now % MOD + dp[k - 1] * cnt[a[i]] % MOD * t % MOD) % MOD;
			}
			now += cnt[a[i]];
			//REPP(i, 1, m) cout << dp[i] << ' ';
			//cout << endl;
		}
		LL ans = 0;
		REPP(i, 1, m) ans = (ans + dp[i]) % MOD;
		PL(ans);
		mem(dp), mem(cnt);
	}


	return 0;
}
