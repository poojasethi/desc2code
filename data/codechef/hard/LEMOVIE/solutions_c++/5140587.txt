#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <functional>

typedef long long LL;
const int MOD = (int)1e9+7;
const int N = 200 + 5;
int n,m,A[N],B[N];
int dp[N][N];
int C[N][N];
int F[N];

void init() {
	for (int i = 0; i < N; ++ i) {
		C[i][0] = C[i][i] = 1;
		for (int j = 1; j < i; ++ j) {
			C[i][j] = C[i-1][j] + C[i-1][j-1];
			if (C[i][j] >= MOD)
				C[i][j] -= MOD;
		}
	}
	F[0] = 1;
	for (int i = 1; i < N; ++ i) {
		F[i] = (LL) F[i-1] * i % MOD;
	}
}

inline void add(int &a,int b) {
	a += b; if (a >= MOD) a -= MOD;
}

int work() {
	std::sort(A,A+n,std::greater<int>());
	B[0] = 1;
	int t = 1;
	for (int i = 1; i < n; ++ i) {
		if (A[i] == A[i-1]) {
			B[t-1] ++;
		} else {
			A[t++] = A[i];
			B[t-1] = 1;
		}
	}
	n = t;
	memset(dp,0,sizeof(dp));
	dp[0][0] = 1;
	int pre = 0;
	for (int i = 0; i < n; ++ i) {
		for (int j = 0; j <= i; ++ j) {
			if (dp[i][j] == 0) continue;
			if (pre) {
				add(dp[i+1][j],(LL) dp[i][j] * C[pre-1+B[i]][B[i]] % MOD * F[B[i]] % MOD);
			}
			add(dp[i+1][j+1],(LL) dp[i][j] * C[pre+B[i]-1][B[i]-1] % MOD * F[B[i]] % MOD);
		}
		pre += B[i];
	}
	int answer = 0;
	for (int i = 0; i <= m; ++ i)
		add(answer,dp[n][i]);
	return answer;
}

int main() {
	init();
	int cas;
	scanf("%d",&cas);
	while (cas--) {
		scanf("%d%d",&n,&m);
		for (int i = 0; i < n; ++ i) {
			scanf("%d",A+i);
		}
		printf("%d\n",work());
	}
	return 0;
}

