#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

typedef long long LL;
#define CLR(a,b) memset(a,b,sizeof(a))
const int N = 205, MOD = 1000000007;

int n,k;
int cnt[N];
LL fac[N],inv[N];
int dp[N][N];
LL fpow(int n,int k){
    LL ans = 1, base = n;
    while(k){
        if(k & 1) ans = ans * base % MOD;
        base = base * base % MOD;
        k >>= 1;
    }
    return ans;
}
LL C(int n,int k){
    if(k > n || n < 0)return 0;
    return fac[n] * inv[n-k] % MOD * inv[k] % MOD;
}

void solve()
{
    CLR(dp, 0);
    dp[0][0] = 1;
    int sum = 0;
    for(int i = 0 ; i <= 200 ; i ++){
        for(int j = 0 ; j <= k ; j ++){
            if(cnt[i] == 0){
                (dp[i+1][j] += dp[i][j]) %= MOD;
                continue;
            }
            (dp[i+1][j+1] += (LL)dp[i][j] * fac[cnt[i]] % MOD * C(n-sum-1 , cnt[i]-1) % MOD) %= MOD;
            (dp[i+1][j] += (LL)dp[i][j] * fac[cnt[i]] % MOD * C(n-sum-1 , cnt[i]) % MOD) %= MOD;
        }
        sum += cnt[i];
    }
    int ans = 0;
    for(int i = 0 ; i <= k ; i ++){
        (ans += dp[201][i]) %= MOD;
    }
    printf("%d\n",ans);
}

int main()
{
    fac[0] = 1;
    inv[0] = 1;
    for(int i = 1 ; i < N ; i ++){
        fac[i] = fac[i-1] * i % MOD;
        inv[i] = fpow(fac[i],MOD-2);
    }
    
    int T;
    scanf("%d",&T);
    while(T--){
        scanf("%d%d",&n,&k);
        CLR(cnt ,0);
        for(int i = 1; i <= n ; i++){
            int x;
            scanf("%d",&x);
            cnt[x] ++;
        }
        solve();
    }
    return 0;
}
