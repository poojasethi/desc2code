#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cstdlib>
#include <map>
using namespace std;
const int nmax = 200 + 18, mmax = 400 + 18, mo = 1000000000 + 7;

map<int, int> V;
int T, N, K;
int C[mmax][mmax], P[nmax], n, f[nmax][nmax], S[nmax], fac[nmax];

void add(int &a, int b)
{
	a = ((long long) a + b) % mo;
}

int main()
{
	for (int i = 0; i <= 400; ++i) C[i][0] = 1;
	fac[0] = 1;
	for (int i = 1; i <= 200; ++i) fac[i] = fac[i - 1] *1LL* i % mo;
	for (int i = 1; i <= 400; ++i)
		for (int j = 1; j <= i; ++j) {
			C[i][j] = ((long long)C[i - 1][j - 1] + C[i - 1][j]) % mo;
//			if (i <= 5 && j <= 5) printf("(%d, %d) %d\n", i, j, C[i][j]);
		}
	scanf("%d", &T);
	while (T--) {
		scanf("%d%d", &N, &K);
		n = 0;
		V.clear();
		for (int i = 1; i <= N; ++i) {
			int c;
			scanf("%d", &c);
			++V[c];
		}
		for (map<int, int>::iterator it = V.begin(); it != V.end(); ++it) 
			P[++n] = it->second;//, 
		reverse(P + 1, P + n + 1);
		for (int i = 1; i <= n; ++i)
			S[i] = S[i - 1] + P[i];
		memset(f, 0, sizeof(f));
		f[0][0] = 1;
		for (int i = 0; i < n; ++i)
			for (int j = 0; j <= K; ++j) if (f[i][j]) {
//				printf("(%d %d) %d\n", i, j, f[i][j]);
				if (j < K) add(f[i + 1][j + 1], f[i][j] *1LL* C[S[i] + P[i + 1] - 1][P[i + 1] - 1] % mo * fac[P[i + 1]] % mo);
				add(f[i + 1][j], f[i][j] *1LL* C[S[i] - 1 + P[i + 1]][P[i + 1]] % mo * fac[P[i + 1]] % mo);
/*				if (j < K) add(f[i + 1][j + 1], f[i][j] *1LL* C[S[i] + P[i + 1] - 1][P[i + 1] - 1] % mo);
				add(f[i + 1][j], f[i][j] *1LL* C[S[i] - 1 + P[i + 1]][P[i + 1]] % mo);*/
			}
		int ans = 0;
		for (int i = 0; i <= K; ++i) {
//			printf("(%d %d) %d\n", n, i, f[n][i]);
			add(ans, f[n][i]);
		}
		printf("%d\n", ans);
	}
	return 0;
}
