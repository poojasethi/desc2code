#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

const int N = 205, MOD = 1000000007;
int n, k, p[N], cnt[N];

int f[N][N];

int cb[N][N];

int fac[N];

int main() {
    fac[0] = 1;
    for (int i = 1; i < N; ++i) {
        fac[i] = (long long)fac[i - 1] * i % MOD;
    }
    for (int i = 0; i < N; ++i) {
        cb[i][0] = cb[i][i] = 1;
        for (int j = 1; j < i; ++j) {
            cb[i][j] = (cb[i - 1][j] + cb[i - 1][j - 1]) % MOD;
        }
    }
    int t;
    scanf("%d", &t);
    while (t--) {
        scanf("%d%d", &n, &k);
        memset(cnt, 0, sizeof(cnt));
        for (int i = 0; i < n; ++i) {
            int p;
            scanf("%d", &p);
            ++cnt[p];
        }
        memset(f, 0, sizeof(f));
        f[1][0] = 1;
        int sum = 0;
        for (int i = 1; i <= 200; ++i) {
            for (int j = 0; j <= k; ++j) {
                if (cnt[i] == 0) {
                    (f[i + 1][j] += f[i][j]) %= MOD;
                    continue;
                }
                (f[i + 1][j + 1] += (long long)f[i][j] * fac[cnt[i]] % MOD * cb[n - sum - 1][cnt[i] - 1] % MOD) %= MOD;
                (f[i + 1][j] += (long long)f[i][j] * fac[cnt[i]] % MOD * cb[n - sum - 1][cnt[i]] % MOD) %= MOD;
            }
            sum += cnt[i];
        }
        int ans = 0;
        for (int i = 0; i <= k; ++i) {
            (ans += f[201][i]) %= MOD;
        }
        printf("%d\n", ans);
    }
    return 0;
}

