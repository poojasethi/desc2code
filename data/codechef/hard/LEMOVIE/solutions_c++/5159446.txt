#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long ll;

const int N = 200+5;
const int MOD = (int)1e9+7;

int C[N][N], A[N][N], fac[N], cnt[N], dp[2][N];

inline void Add(int &x, int y) {
    x += y;
    if(x >= MOD)    x -= MOD;
}

void init(int n) {
    C[0][0] = 1;
    for(int i = 1;i <= n; i++) {
        C[i][0] = 1;
        for(int j = 1;j <= n; j++)
            C[i][j] = (C[i-1][j-1] + C[i-1][j])%MOD;
    }
    fac[0] = 1;
    for(int i = 1;i <= n; i++)  fac[i] = 1LL*fac[i-1]*i%MOD;
    A[0][0] = 1;
    for(int i = 1;i <= n; i++) {
        A[i][0] = 1;
        for(int j = 1;j <= i; j++)
            A[i][j] = 1LL*C[i][j]*fac[j]%MOD;
    }
}

int main() {
    init(200);
    int t, n, K;
    scanf("%d", &t);
    while(t--) {
        scanf("%d%d", &n, &K);
        int mx = 0;
        memset(cnt, 0, sizeof(cnt));
        for(int i = 1;i <= n; i++) {
            int x;
            scanf("%d", &x);
            cnt[x]++;
            mx = max(mx, x);
        }
        int sum = 0, cr = 0, nxt = 1;
        memset(dp[cr], 0, sizeof(dp[cr]));
        dp[cr][0] = 1;
        for(int i = mx;i >= 1;i --) if(cnt[i]) {
            memset(dp[nxt], 0, sizeof(dp[nxt]));
            for(int j = 0;j <= K; j++) if(dp[cr][j]){
                if(sum > 0)
                    Add(dp[nxt][j], 1LL*dp[cr][j]*A[sum-1+cnt[i]][cnt[i]]%MOD);
                Add(dp[nxt][j+1], 1LL*dp[cr][j]*cnt[i]%MOD*A[sum+cnt[i]-1][cnt[i]-1]%MOD);
            }
            sum += cnt[i];
            swap(cr, nxt);
        }
        int ans = 0;
        for(int i = 0;i <= K; i++)  Add(ans, dp[cr][i]);
        printf("%d\n", ans);
    }
    return 0;
}

