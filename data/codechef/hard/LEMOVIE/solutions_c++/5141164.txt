#include <map>
#include <set>
#include <cmath>
#include <queue>
#include <cstdio>
#include <string>
#include <vector>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

#define PB push_back
#define MP make_pair

typedef double DB;
typedef long long LL;
typedef pair<int, int> PI;

const DB eps = 1e-8;
const int N = 222 + 7;
const int INF = 1e9 + 7;
const int MOD = 1e9 + 7;



LL dp[N][N], C[N][N], F[N];
int a[N];

int main(){
    int cas, n, m;
    F[0] = 1;
    for (int i = 1; i <= 200; i++) F[i] = F[i - 1] * i % MOD;
    for (int i = 0; i <= 200; i++) C[i][0] = 1;
    for (int i = 1; i <= 200; i++)
    for (int j = 1; j <= i; j++)
        C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % MOD;
    scanf("%d", &cas);
    while (cas--){
        scanf("%d%d", &n, &m);
        for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
        sort(a + 1, a + n + 1);
        a[0] = 0;
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++)
        for (int j = 0; j < i; j++)
        for (int k = 0; k <= j; k++){
            if (a[i] > a[j]) dp[i][k + 1] = (dp[i][k + 1] + C[n - j - 1][i - j - 1] * F[i - j - 1] % MOD * dp[j][k]) % MOD;
            else dp[i][k] = (dp[i][k] + C[n - j - 1][i - j - 1] * F[i - j - 1] % MOD * dp[j][k]) % MOD;
        }

        LL ans = 0;
        for (int i = 1; i <= m; i++) ans = (ans + dp[n][i]) % MOD;
        printf("%d\n", (int)ans);


    }
}

