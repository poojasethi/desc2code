#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;
const int MOD = (int)1e9+7;
const int N = 200+5;

int dp[N][N][N], dp2[N][N][N], cnt[N], a[N];
int n, m;

inline void Add(int &x, int y) {
    x += y;
    if(x >= MOD)    x -= MOD;
}

int main() {
    int t;
    scanf("%d", &t);
    while(t--) {
        scanf("%d%d", &n, &m);
        memset(cnt, 0, sizeof(cnt));
        int mx = 0;
        for(int i = 1;i <= n; i++) {
            scanf("%d", &a[i]);
            mx = max(a[i], mx);
            cnt[a[i]]++;
        }
        memset(dp, 0, sizeof(dp));
        memset(dp2, 0, sizeof(dp2));
        dp[0][0][0] = 1;
        for(int i = 0;i <= mx; i++)
            dp2[0][i][0] = 1;
        for(int i = 1;i <= mx; i++)
            cnt[i] += cnt[i-1];
        for(int i = 1;i <= n; i++) {
            for(int j = 0;j <= mx; j++) {
                for(int k = 0;k <= m; k++) {
                    int sum = cnt[j]-(i-1);
                    if(k > 0 && j > 0) {
                        Add(dp[i][j][k], (ll)dp2[i-1][j-1][k-1]*(cnt[j]-cnt[j-1])%MOD);
                    }
                    if(sum > 0)
                        Add(dp[i][j][k], (ll)dp[i-1][j][k]*sum%MOD);
                }
            }
            for(int k = 0;k <= m; k++) {
                dp2[i][0][k] = dp[i][0][k];
                for(int j = 1;j <= mx; j++)
                    Add(dp2[i][j][k], (dp2[i][j-1][k]+dp[i][j][k])%MOD);
            }
        }
        int ans = 0;
        for(int i = 0;i <= mx; i++) {
            for(int j = 0;j <= m; j++)
                Add(ans, dp[n][i][j]);
        }
        printf("%d\n", ans);
    }
    return 0;
}

