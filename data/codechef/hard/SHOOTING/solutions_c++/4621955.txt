// asdasdasda as dasd 
#include <bits/stdc++.h>
using namespace std;
#define REP(a,b,c) for(int a=b;a<c;a++)
#define asd(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define asdf(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
typedef pair<int,int> ii;
typedef long long LL;

int N,M;
vector<ii> L;
char s[52][52];
int cnt[52][52], store[52];

void solve(){
    scanf("%d %d\n", &N, &M);
    L.clear();
    REP(i, 0, N){
        scanf("%s\n", s[i]);
        REP(j, 0, M) if(s[i][j] == 'L') 
            L.push_back(ii(i, j)), cnt[i][j] = L.size() - 1;
    }

    int t = L.size();
    REP(mask, 0, 1 << t){
        memset(store, 0, sizeof store);
        bool sahihaiboss = true;
        for(int row = N-1; row >=0; row--){
            int before = 0, after = 0, lc = 0;
            REP(col, 0, M){
                if(s[row][col] == '.') continue;
                if(s[row][col] == 'L'){
                    if((mask & (1 << cnt[row][col]))) store[col] = 1;
                    else lc++;
                }
                else if(not store[col])
                    if(lc) after++;
                    else before++;
            }
            if(before + after == 0 or lc >= 2) continue;
            if(not lc or (before and after)) { sahihaiboss = false; break; }
        }

        if(sahihaiboss){ printf("Possible\n"); return; }
    }
    printf("Impossible\n");
}

int main(){
    int test;
    scanf("%d\n", &test);
    while(test--){
        solve();
    }

    return 0;
}
