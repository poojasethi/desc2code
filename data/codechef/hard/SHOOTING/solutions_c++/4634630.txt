#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define P(x) printf("%d\n",x)

typedef long long int LL;
typedef pair<int, int > pii;

int n,m;
string s[55];
vector<pii > lasers;
vector<int > AN[55];
int X[55];
vector<int> avl[55];

bool solve(int mask) {

	rep(i,0,m) X[i] = -1;

	rep(i,0,n) avl[i].clear();

	rep(i,0,lasers.size()) {

		int jj = lasers[i].second;
		int ii = lasers[i].first;
		if((mask>>i)&1) X[jj] = max(X[jj], ii);
		else {
			avl[ii].push_back(jj);
		}
	}

	
	rep(i,0,n) {
		int first = -1, last = -1;
		int la = avl[i].size();
		if(la >= 2) continue;
		rep(j,0,AN[i].size()) if(X[AN[i][j]] < i) {
			first = AN[i][j];
			break;
		}
		if(first == -1) continue;
		if(avl[i].size() && avl[i][0] < first)
			continue;


		for(int j = (int)AN[i].size()-1; j >= 0; j--) if(X[AN[i][j]] < i) {
			last = AN[i][j];
			break;
		}
		if(last == -1) continue;
		if(avl[i].size() && avl[i].back() > last)	
			continue;
		
		return false;
	}

	return true;

}

int main() {
	int t;
	S(t);
	while(t--) {
		scanf("%d%d",&n,&m);
		rep(i,0,n) {
			cin >> s[i];
		}

		lasers.clear();
		rep(i,0,n) AN[i].clear();
		rep(i,0,n) rep(j,0,m) if(s[i][j] != '.') {
			if(s[i][j] == 'L') lasers.push_back(make_pair(i,j));
			else AN[i].push_back(j);
		}
		int sz = lasers.size();
		bool flag = false;
		rep(i,0,(1<<sz)) if(solve(i)) {
			flag = true;
			break;
		}

		if(flag) printf("Possible\n");
		else printf("Impossible\n");
	}
	
	return 0;

}