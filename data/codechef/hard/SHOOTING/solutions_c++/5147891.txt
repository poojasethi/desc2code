#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

typedef unsigned long long ULL;
int n, m, r;
ULL enemy[55];
pair<int, int> position[55];

int check(int mask) {
    int j = 0;
    ULL q = 0;
    ULL S = (1ULL << m) - 1;
    for (int i = n; i >= 1; --i) {
	ULL p = 0;
	while (j < r && position[j].first == i) {
	    if (mask >> j & 1) q |= 1ULL << position[j].second - 1;
	    else p |= 1ULL << position[j].second - 1;
	    ++j;
	}
	ULL e = enemy[i] & (S ^ q);
	if (__builtin_popcountll(e) == 0) continue;	
	if (__builtin_popcountll(p) == 0) return 0;
	if (__builtin_popcountll(p) > 1) continue;
	if (((p - 1) & e) == 0) continue;
	if (((p - 1) & e) == e) continue;
	return 0;
    }
    return 1;
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
	memset(enemy, 0, sizeof(enemy));
	scanf("%d%d", &n, &m);
	r = 0;
	for (int i = 1; i <= n; ++i)
	    for (int j = 1; j <= m; ++j) {
		int ch;
		while (ch = getchar(), ch != 'L' && ch != 'E' && ch != '.');
		if (ch == 'E') enemy[i] |= 1ULL << j - 1;
		else if (ch == 'L') 
		    position[r++] = make_pair(i, j);
	    }
	sort(position, position + r);
	reverse(position, position + r);
	int flag = 0;
	for (int mask = 0; mask < 1 << r && !flag; ++mask)
	    if (check(mask)) flag = 1;
	if (flag) puts("Possible");
	else puts("Impossible");
    }
    return 0;
}

