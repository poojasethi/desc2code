#include <iostream>

#include <cstring>
#include <vector>
#include <algorithm>

#include <cassert>

using namespace std;

#define SZ(a) int((a).size())

#define REP(i,n) for(int i=0,_n=(n);i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FOREACH(it,c) for(__typeof__((c).begin()) it=(c).begin();it!=(c).end();++it)

typedef unsigned long long llong;

#define BITCOUNT(mask) ( __builtin_popcountll((mask)) )
#define LOWESTSETBIT(mask) ( __builtin_ctzll((mask)) )
#define HIGHESTSETBIT(mask) ( sizeof(long long)*8-1-__builtin_clzll((mask)) )

void print_bits(llong m, int nbits = 32) {
   for (int i = 0; i < nbits; ++i)
      cerr << ((m & (1LL << i)) ? '1' : '0');
}

struct Pos {
   int row, col;
   Pos(int _r, int _c) : row(_r), col(_c) {}
   bool operator<(const Pos& p) const {
      if (row != p.row) return row < p.row;
      return col < p.col;
   }
};

int R, C;
char B[52][52];

vector<Pos> lasers_pos;
llong lasers[52];
llong orig_lasers[52];

llong enemies[52];
llong orig_enemies[52];

int main(int argc, char* argv[]) {
   ios_base::sync_with_stdio(false); 
   cin.tie(NULL);

   int TC;
   cin >> TC;
   for (int tc = 1; tc <= TC; ++tc) {
      lasers_pos.clear();

      cin >> R >> C;
      REP(r, R) {
         cin >> B[r];
         enemies[r] = 0;
         lasers[r] = 0;
         REP(c, C) {
            if (B[r][c] == 'E')
               enemies[r] |= (1LL << c);
            else if (B[r][c] == 'L') {
               lasers_pos.push_back( Pos(r, c) );
               lasers[ r ] |= (1LL << c);
            }
         }
      }
      memcpy(orig_enemies, enemies, sizeof(enemies[0])*R);
      memcpy(orig_lasers, lasers, sizeof(lasers[0])*R);

      sort( lasers_pos.begin(), lasers_pos.end() );
      reverse( lasers_pos.begin(), lasers_pos.end() );

      int N = SZ(lasers_pos);

      bool res = false;
      REP(mask, 1<<N) {
         llong mm = 0;
         int cur_row = R-1;
         REP(j, N) {
            if (!(mask & (1LL << j))) continue;
            int r = lasers_pos[j].row,
                c = lasers_pos[j].col;
            lasers[r] ^= (1LL << c);
            for (; cur_row > r; --cur_row) {
               enemies[cur_row] &= ~mm;
            }
            cur_row = r;
            mm |= (1LL << c);
         }
         for (; cur_row >= 0; --cur_row) {
            enemies[cur_row] &= ~mm;
         }         

         bool ok = true;
         for (int r = R-1; r >= 0; --r) {
            llong emask = enemies[r];
            llong lmask = lasers[r];
            if (BITCOUNT(emask) == 0) continue;
            if (BITCOUNT(lmask) == 0) {
               ok = false;
               break;
            }
            if (BITCOUNT(lmask) > 1) continue;
            if (!(LOWESTSETBIT(lmask) <= LOWESTSETBIT(emask) ||
                  HIGHESTSETBIT(lmask) >= HIGHESTSETBIT(emask))) {
               ok = false;
               break;
            }
         }

         if (ok) {
            res = true;
            break;
         }

         memcpy(enemies, orig_enemies, sizeof(enemies[0])*R);
         memcpy(lasers, orig_lasers, sizeof(lasers[0])*R);
      }

      cout << (res ? "Possible" : "Impossible") << "\n";

   }

   return 0;
}
