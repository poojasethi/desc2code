#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <cctype>
using namespace std;
typedef long long LL;

const int N = 55;
int n , m , K;
char g[N][N];
int id[N][N];
vector<int> laser;
LL R[N];
void work() {
    int i , j , k;
    scanf("%d%d",&n,&m);
    for (i = 0 ; i < n ; ++ i)
        scanf("%s" , g[i]);
    K = 0;
    memset(id , -1 , sizeof(id));
    for (i = 0 ; i < n ; ++ i) {
        R[i] = 0;
        for (j = 0 ; j < m ; ++ j) {
            if (g[i][j] == 'L') {
                id[i][j] = K ++;
            }
            if (g[i][j] == 'E') {
                R[i] |= 1LL << j;
            }
        }
    }
    for (k = 0 ; k < 1 << K ; ++ k) {

        LL up = 0;
        for (i = n - 1 ; i >= 0 ; -- i) {
            LL Q = R[i] & ~up ;
            int tot = 0 , pos;
            for (j = 0 ; j < m ; ++ j)
                if (~id[i][j] && (k >> id[i][j] & 1))
                    up |= 1LL << j;
                else if (~id[i][j])
                    ++ tot , pos = j;
            if (tot > 1) continue;
            if (!Q) continue;
            if (Q && !tot) break;
            assert(tot == 1);
            bool f[2] = {};
            for (j = pos - 1 ; j >= 0 ; -- j)
                if (Q >> j & 1)
                    f[0] = 1;
            for (j = pos + 1 ; j < m ; ++ j)
                if (Q >> j & 1)
                    f[1] = 1;
            if (f[0] && f[1]) break;
        }
        if (i < 0)
            break;
    }
    puts(k < 1 << K ? "Possible" : "Impossible");
}

int main() {
    int _; scanf("%d",&_); while (_ --)
        work();
    return 0;
}

