#include<bits/stdc++.h>
using namespace std;
#define vi vector<int>
#define pb push_back
#define L(m) for (int i=0; i<m; i++)
#define LI(m) for (int i=m; i>=0; i--)
#define P(q, m) for (int j=q; j<m; j++)
#define B(m) for(int k=0; k<m; k++)
char s[55][55];int n,m;
bool dfs(int r, vi c)
{
	if(r == -1) return 1;
	bool ps=1;
	L(m) ps &= c[i];
	if(ps) return 1;
	vi q,p;
	L(m)
	if(s[r][i] == 'E' && c[i] == 0)
		q.pb(i);
	else if(s[r][i] == 'L')
		p.pb(i);
	if(q.size() == 0)
	{
		L(p.size()) c[p[i]] = 1;
		return dfs(r - 1, c);
	}
	if(p.size() == 0)
		return 0;
	if(p.size() == 1)
	{
		if(q.size() == 1) return dfs(r - 1, c);
		if(p[0] > q[0] && p[0] < q[q.size() - 1]) return 0;
		return dfs(r - 1, c);
	}
	L(p.size())
	P(i + 1, p.size())
	{
		vi cc=c;
		B(p.size())
		if(k != i && k != j) cc[p[k]] = 1;
		if(dfs(r - 1, cc)) return 1;
	}
	L(p.size())
	{
		if(p[i] > q[0])break;
		vi cc = c;
		B(p.size())
		if(k != i) cc[p[k]] = 1;
		if(dfs(r - 1, cc)) return 1;
	}
	LI(p.size() - 1)
	{
		if(p[i] < q[q.size() - 1]) break;
		vi cc=c;
		B(p.size())
		if(k != i) cc[p[k]] = 1;
		if(dfs(r - 1, cc)) return 1;
	}
	return 0;
}
int main()
{
	int T;
	scanf("%d",&T);
	L(T)
	{
		scanf("%d%d",&n,&m);
		L(n)
		 scanf("%s",s[i]);
		vi c(m,0);
		if(dfs(n-1,c))puts("Possible");
		else puts("Impossible");
	}
}