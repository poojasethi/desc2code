#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstdlib>
#include <vector>
#include <set>
#include <map>
#include <cassert>
#include <ctime> 
#include <cmath>
#include <string>
#include <cstring>
#include <queue>
using namespace std;

#define f first
#define s second
#define mp make_pair
#define pb push_back
#define pii pair<int, int>
#define vi vector<int>
#define all(v) (v).begin(), (v).end()
#define forit(it,v) for (__typeof(v.begin()) it = v.begin(); it != v.end(); ++it)
#define f0(a) memset(a, 0, sizeof(a))
#define ll long long
char s[100][100];
int n, m;
int col[100000], coln;
int pos[1000], la[1000];
int nval[1000], emask[1000];
int dp[55][1 << 17];

void upd(int mask, int i, int emask, int lmask) {
	mask = mask - lmask;
	mask = mask | emask;
	dp[i + 1][mask] = true;
} 
int emas(int l, int r) {
	return (emask[r] ^ emask[l]);
}
int lmas(int mask, int i, int j = -1) {
	if (mask & (1 << i)) mask -= (1 << i);
	if (j != -1 && (mask & (1 << j))) mask -= (1 << j);
	return mask;
}

void Solve() {
	scanf("%d%d", &n, &m);
	coln = 0;
	for (int i = 0; i < n; ++i) {
		scanf("\n");
		for (int j = 0; j < m; ++j) {
			scanf("%c", &s[i][j]);
			if (s[i][j] == 'L') col[coln++] = j;
		}
	}

	sort(col, col + coln);
	coln = unique(col, col + coln) - col;

	for (int i = 0; i <= m; ++i)
		pos[i] = -1;

	for (int i = 0; i < coln; ++i)
		pos[col[i]] = i;

	for (int i = 0; i <= n; ++i)
		for (int mask = 0; mask < (1 << coln); ++mask)
			dp[i][mask] = 0;

	dp[0][0] = 1;

	for (int i = 0; i < n; ++i)
		for (int mask = 0; mask < (1 << coln); ++mask) if (dp[i][mask]) {

			int lan = 0, lmask = 0;

			for (int j = 0; j < m; ++j) {
				if (j == 0) {
					emask[j] = 0;
					nval[j] = 0;
				} else {
					emask[j] = emask[j - 1];
					nval[j] = nval[j - 1];
				}

				if (s[i][j] == 'E') {
					if (pos[j] == -1) {
						nval[j]++;
					} else {
						emask[j] |= (1 << pos[j]);
					}
				} else if (s[i][j] == 'L') {
					la[lan++] = j;
					if (mask & (1 << pos[j]))
						lmask |= (1 << pos[j]);	
				}
			}

			if (nval[m - 1] == 0)
				upd(mask, i, emask[m - 1], lmask);

			for (int j = 0; j < lan; ++j) {
				int le = la[j];

				if (nval[le] == nval[m - 1]) 
					upd(mask, i, emas(le, m - 1), lmas(lmask, pos[le]));
				
				if (nval[le] == 0) 
					upd(mask, i, emask[le], lmas(lmask, pos[le]));

				for (int k = 0; k < lan; ++k) if (j != k){
					int ri = la[k];

					if (ri > le &&nval[ri] - nval[le]  == 0)
						upd(mask, i, emas(le, ri), lmas(lmask, pos[le], pos[ri]));
					
					if (le > ri) {
						upd(mask, i, 0, lmas(lmask, pos[le], pos[ri]));
					}
				}
			}	

		}

	if (dp[n][0]) {
		puts("Possible");
	} else {
		puts("Impossible");
			
	}
}
int main() {
	int tests;
	scanf("%d", &tests);
	while (tests--)
		Solve();
	return 0;
}
