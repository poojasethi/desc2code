#include <iostream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <string>
#include <deque>
#include <bitset>
#include <algorithm>
#include <utility>
#include <functional>
#include <limits>
#include <numeric>
#include <complex>
#include <cassert>
#include <cmath>
#include <memory.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <climits>

using namespace std;

template<typename X> inline X abs(const X& a) { return (a < 0 ? -a : a); }
template<typename X> inline X sqr(const X& a) { return (a * a); }
template<typename X> inline void print(const X& a,int N) {cout<<endl;for(int i=0;i<N;i++)cout<<a[i]<<" ";cout<<endl;}
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pp;
typedef pair<ld, ld> ppld;
typedef unsigned long long ull;
#define FOR(i, n) for(int i = 0; i < int(n); i++)
#define FOR1(i, n) for(int i = 1; i <= int(n); i++)
#define FORD(i, n) for(int i = int(n-1); i >= 0; i--)
#define FORAB(i, a, b) for(int i = int(a); i < int(b); i++)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define pb push_back
#define mp make_pair
#define mset(a, val) memset(a, val, sizeof (a))
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define getcx getchar_unlocked
#define getmid(a,b) (a+(b-a)/2)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
const int MAXINT = numeric_limits<int>::max();
const int MININT = numeric_limits<int>::min();
const ll MAXINT_64 = numeric_limits<ll>::max();
const ll MININT_64 = numeric_limits<ll>::min();
const ld PI = ld(3.1415926535897932384626433832795);
template<typename X> inline void inp(X &n ) {
     int ch=getcx();int sign=1;n=0;
     while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
     while(  ch >= '0' && ch <= '9' ) n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
     n=n*sign;
}template<typename X> inline void out(X a) {
    char snum[20]; int i=0;
    do {snum[i++]=a%10+48; a=a/10; }while(a!=0);
    i=i-1;
    while(i>=0) putchar_unlocked(snum[i--]);
    putchar_unlocked('\n');
}

char grid[51][51];
pair<int,int> ij_of_laser[17];

bool solve(int N, int M, int nlasers, int nenemies, int mask){
    int marked[51];
    int used_laser[51][51] = {0};
    fill(marked, marked+M, -1);
    for(int i=0;i<nlasers;i++){
        if(mask & 1){
            int i1 = ij_of_laser[i].first;
            int j1 = ij_of_laser[i].second;
            marked[j1] = max(marked[j1], i1);
            used_laser[i1][j1] = 1;
        }
        mask = mask>>1;
    }
    for(int i=0;i<N;i++){
        int nlasers_in_row = 0;
        int laser_j = 0;
        int left_most_enemy_j = M;
        int right_most_enemy_j = -1;
        int enemies_left_in_row = 0;
        for(int j=0;j<M;j++){
            if(grid[i][j] == 'L' and !used_laser[i][j]){
                laser_j = j;
                nlasers_in_row++;
            }
            else if(grid[i][j] == 'E' and i>marked[j]){
                enemies_left_in_row++;
                left_most_enemy_j = min(left_most_enemy_j, j);
                right_most_enemy_j = max(right_most_enemy_j, j);
            }
        }
        if(enemies_left_in_row == 0)
            continue;
        else if(nlasers_in_row == 0)
            return false;
        else if(nlasers_in_row == 1){
            if(right_most_enemy_j < laser_j or left_most_enemy_j > laser_j)
                continue;
            else
                return false;
        }
    }
    return true;
}

int main(){
    int T; inp(T);
    // float t1 = clock();
    while(T--){
        int N,M; inp(N); inp(M);
        int nlasers = 0, nenemies = 0;
        FOR(i,N){
            FOR(j,M){
                grid[i][j] = getchar_unlocked();
                if(grid[i][j] == 'L')
                    ij_of_laser[nlasers++] = mp(i,j);
                else if(grid[i][j] == 'E')
                    nenemies++;
            }
            getchar_unlocked();
        }
        bool answer = false;
        if(nenemies == 0)
            answer = true;
        else if(nlasers == 0)
            answer = false;
        else{
            int maxl = 1<<nlasers;
            FOR(i,maxl){
                if(solve(N, M, nlasers, nenemies, i)){
                    answer = true;
                    break;
                }
            }
        }
        if(answer)
            printf("Possible\n");
        else
            printf("Impossible\n");
    }
    // float t2 = clock();
    // printf("Time taken = %f", (t2-t1)/CLOCKS_PER_SEC);
    return 0;
}