#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <cstring>

using namespace std;

#define pb push_back
#define len length()
#define clr clear()

#define eps 0.0000001
#define PI  3.14159265359
#define inf 1999888777

int e[55][55],levi[25][5555],desni[25][5555],gornji[25][5555];
int bre,brl,brunistenih,xe[5555],ye[5555],xl[5555],yl[5555],unisten[5555];
bool res;

void idar(int x) {

    int i,t;

    if (x == brl) {
        return;
    }

    if (res) return;

    //gore
    if (gornji[x][0] > 0) {
        for(i=1; i<=gornji[x][0]; i++) {
            t = gornji[x][i];
            if (!unisten[t]) {
                brunistenih++;
            }
            unisten[t]++;
        }

        if (brunistenih == bre) {
            res = true;
            return;
        }

        idar(x+1);
        if (res) return;

        for(i=1; i<=gornji[x][0]; i++) {
            t = gornji[x][i];
            unisten[t]--;
            if (unisten[t] == 0) {
                brunistenih--;
            }
        }
    }

    //levo
    if (levi[x][0] > 0) {
        for(i=1; i<=levi[x][0]; i++) {
            t = levi[x][i];
            if (!unisten[t]) {
                brunistenih++;
            }
            unisten[t]++;
        }

        if (brunistenih == bre) {
            res = true;
            return;
        }

        idar(x+1);
        if (res) return;

        for(i=1; i<=levi[x][0]; i++) {
            t = levi[x][i];
            unisten[t]--;
            if (unisten[t] == 0) {
                brunistenih--;
            }
        }
    }

    //desno
    if (desni[x][0] > 0) {
        for(i=1; i<=desni[x][0]; i++) {
            t = desni[x][i];
            if (!unisten[t]) {
                brunistenih++;
            }
            unisten[t]++;
        }

        if (brunistenih == bre) {
            res = true;
            return;
        }

        idar(x+1);
        if (res) return;

        for(i=1; i<=desni[x][0]; i++) {
            t = desni[x][i];
            unisten[t]--;
            if (unisten[t] == 0) {
                brunistenih--;
            }
        }
    }

    if (gornji[x][0] + levi[x][0] + desni[x][0] == 0) idar(x+1);

    return;
}

char s[55][55];

int main() {

    int tt,n,m,i,j,p;

    scanf("%d", &tt);

    while(tt--) {

        scanf("%d%d", &n, &m);

        for(i=0; i<n; i++){
            scanf("%s", &s[i]);
        }

        bre = 0;
        brl = 0;
        for(i=0; i<n; i++) {
            for(j=0; j<m; j++) {
                //printf("%d %d %c\n", i, j, s[i][j]);
                if (s[i][j] == 'E') {
                    e[i][j] = bre;
                    xe[bre] = i;
                    ye[bre] = j;
                    bre++;
                }
                if (s[i][j] == 'L') {
                    xl[brl] = i;
                    yl[brl] = j;
                    brl++;
                }
            }
        }

        //shuffle
        for(i=1; i<brl; i++) {
            j = rand() % i;
            p = xl[i]; xl[i] = xl[j]; xl[j] = p;
            p = yl[i]; yl[i] = yl[j]; yl[j] = p;
        }

        for(i=0; i<brl; i++) {
            levi[i][0] = 0;
            desni[i][0] = 0;
            gornji[i][0] = 0;
        }

        for(i=0; i<brl; i++) {
            for(j=0; j<bre; j++) {
                if (xl[i] == xe[j]) {
                    if (yl[i] > ye[j]) {
                        levi[i][ ++levi[i][0] ] = j;
                    } else {
                        desni[i][ ++desni[i][0] ] = j;
                    }
                }
                if (yl[i] == ye[j]) {
                    if (xl[i] > xe[j]) {
                        gornji[i][ ++gornji[i][0] ] = j;
                    }
                }
            }
        }

        /*for(i=0; i<brl; i++) {
            printf("-> %d %d\n", xl[i], yl[i]);
        }

        for(i=0; i<bre; i++) {
            printf("---> %d %d\n", xe[i], ye[i]);
        }*/

        /*for(i=0; i<brl; i++) {
            printf("%d %d %d\n", levi[i][0], levi[i][1], levi[i][2]);
        }*/

        for(i=0; i<bre; i++) {
            unisten[i] = 0;
        }

        brunistenih = 0;
        res = false;

        idar(0);

        if (!res) {
            printf("Impossible\n");
        } else {
            printf("Possible\n");
        }

    }

    return 0;
}
