#include <stdio.h>
#include <string>
#include <string.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <limits.h>
#include <assert.h>
#include <math.h>
#include <iomanip>
using namespace std;

#pragma comment(linker, "/STACK:102400000,102400000")

typedef long long LL;
typedef pair<int ,int > pii;

#define CLR(x,y) memset(x,y,sizeof(x));
#define PB push_back
#define MP make_pair
#define FOR(i,x,y) for(int i = (x) ; i < (y) ; ++i)
#define ROF(i,x,y) for(int i = (y)-1 ; i >= (x); --i)
#define FORG(i,x,g) for(int i = g.head[(x)] ; ~i ; i = g.next[i])
#define INF 1000000000000LL

const int N = 51;
int n,m;
char M[N][N];
int G[N][N];
pair<int,int> pos[N];
int E[N],L[N];
int tot;
void gao(int i){
    int x = pos[i].first,y = pos[i].second;
    G[x][y] = -1;
    L[x] --;
    while(x >= 1){
        if(M[x][y] == 'E'){
            G[x][y] --;
            if(G[x][y] == 0){
                E[x] --;
            }
        }
        x--;
    }
}

void revgao(int i){
    int x = pos[i].first,y = pos[i].second;
    G[x][y] = 0;
    L[x] ++;
    while(x >= 1){
        if(M[x][y] == 'E'){
            G[x][y] ++;
            if(G[x][y] == 1){
                E[x] ++;
            }
        }
        x--;
    }
}

void solve()
{
    for(int s = 0 ; s < (1<<tot) ; s ++){
        for(int j = 0 ; j < tot ; j ++){
            if(s & (1<<j))gao(j);
        }
        bool ok = 1;
        for(int i = 1; i <= n; i ++){
            if(L[i] >= 2)continue;
            if(E[i] == 0)continue;
            if(L[i] == 0 && E[i] > 0){
                ok = 0;break;
            }
            bool flag1 = 0,flag2 = 0,fid = 0;
            for(int j = 0 ;j < m ; j++){
                if(G[i][j] != -1 && M[i][j] == 'L'){
                    fid = 1;
                }
                if(G[i][j] >= 1){
                    if(fid)flag1 = 1;
                    else flag2 = 1;
                }
            }
            if(flag1 && flag2){
                ok = 0;
                break;
            }
        }
        if(ok){
            puts("Possible");
            return;
        }
        for(int j = 0 ; j < tot ; j ++){
            if(s & (1<<j))revgao(j);
        }
    }
    puts("Impossible");
}
int main()
{
    int T;
    scanf("%d",&T);
    while(T--){
        CLR(E, 0);
        CLR(L, 0);
        tot = 0;
        scanf("%d%d",&n,&m);
        for(int i = 1; i <= n ; i++){
            for(int j = 0 ; j < m ; j ++){
                G[i][j] = 0;
                scanf(" %c",&M[i][j]);
                if(M[i][j] == 'L'){
                    pos[tot++] = MP(i,j);
                    L[i] ++;
                }else if(M[i][j] == 'E'){
                    E[i]++;
                    G[i][j] = 1;
                }
            }
        }
        solve();
    }
    return 0;
}
