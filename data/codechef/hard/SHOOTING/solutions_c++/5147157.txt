#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<ctime>
#include<map>
#include<string>
#include<vector>
#include<set>

using namespace std;
#define For(i,l,r) for (int i = l; i <= r; ++i)
#define Cor(i,l,r) for (int i = l; i >= r; --i)
#define Fill(a,b) memset(a,b,sizeof(a))
#define FI first
#define SE second
#define MP make_pair
#define PII pair<int,int>
#define flt double
#define INF (0x3f3f3f3f)
#define MaxN 1020304
#define MaxNode 1020304
#define MD 1000000007

long long getLL() {
	long long ret = 0;
	char c;
	while (1) {
		c = getchar();
		if (c >= '0' && c <= '9') break ;
	}
	while (1) {
		ret = ret * 10 + c - '0';
		c = getchar();
		if (c < '0' || c > '9') break ;
	}
	return ret;
}

int getInt() {
	int ret = 0;
	char c;
	while (1) {
		c = getchar();
		if (c >= '0' && c <= '9') break ;
	}
	while (1) {
		ret = ret * 10 + c - '0';
		c = getchar();
		if (c < '0' || c > '9') break ;
	}
	return ret;
}

char A[55][55];
int pos[55], tmp[55], idx[55], Mask[55];
bool f[55][131072];
vector<int> v[55];
int main() {
	//freopen("input.txt","r",stdin); //freopen("output.txt","w",stdout);
	int T = getInt();
	For(TTT,1,T) {
		int n = getInt(), m = getInt();
		Cor(i,n,1) scanf("%s", A[i] + 1);
		int numpos = 0;
		For(i,1,n) For(j,1,m) if (A[i][j] == 'L') {
			pos[++numpos] = j;
		}
		sort(pos + 1, pos + numpos + 1);
		numpos = unique(pos + 1, pos + numpos + 1) - pos - 1;

		memset(idx, -1, sizeof(idx));
		For(i,1,numpos) idx[pos[i]] = i;

		For(i,1,n) {
			Mask[i] = 0;
			For(j,1,m) if (A[i][j] == 'L') Mask[i] |= 1 << idx[j] - 1;
		}

		For(i,1,n) {
			v[i].clear();
			For(j,1,m) if (A[i][j] == 'E') v[i].push_back(j);
		}

		Fill(f, 0);
		f[0][0] = 1;
		For(i,0,n - 1) For(j,0,(1 << numpos) - 1) if (f[i][j]) {
			int Left = -1, Right = -1;
			For(kk,1,v[i + 1].size()) {
				int k = v[i + 1][kk - 1];
				if (idx[k] == -1 || !((j >> (idx[k] - 1)) & 1)) {
					Left = k; break ;
				}
			}
			Cor(kk,v[i + 1].size(),1) {
				int k = v[i + 1][kk - 1];
				if (idx[k] == -1 || !((j >> (idx[k] - 1)) & 1)) {
					Right = k; break ;
				}
			}
			if (Left == -1) {
				int nj = j | Mask[i + 1];
				f[i + 1][nj] = true;
				continue ;
			}
			int num = 0;
			For(k,1,m) if (A[i + 1][k] == 'L') tmp[++num] = k;

			For(k,1,num) if (tmp[k] <= Left || tmp[k] >= Right) {
				int nj = j | (Mask[i + 1] - (1 << idx[tmp[k]] - 1));
				f[i + 1][nj] = true;
			}

			For(k1,1,num) For(k2,k1 + 1,num) {
				int nj = j | (Mask[i + 1] - (1 << idx[tmp[k1]] - 1) - (1 << idx[tmp[k2]] - 1));
				f[i + 1][nj] = true;
			}

		}

		int ans = false ;

		For(i,0,(1 << numpos) - 1) if (f[n][i]) ans = true;

		if (ans) puts("Possible"); else puts("Impossible");
	}
	return 0;
}

