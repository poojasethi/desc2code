#include <vector>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
using namespace std;

int n, m;

const int N = 55;
char map[N][N];

bool x[N], y[N];

bool row[17][17], col[17][17];

bool dp[2][1 << 16][2][2];

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        memset(x, 0, sizeof(x));
        memset(y, 0, sizeof(y));
        scanf("%d%d", &n, &m);
        for (int i = 0; i < n; ++i) {
            scanf("%s", map[i]);
            for (int j = 0; j < m; ++j) {
                if (map[i][j] == 'L') {
                    x[i] = true;
                    y[j] = true;
                }
            }
        }
        memset(row, 0, sizeof(row));
        memset(col, 0, sizeof(col));
        bool flag = false;
        int cntx = 0, cnty = 0;
        for (int i = 0; i < n; ++i) {
            int cnty = 0;
            for (int j = 0; j < m; ++j) {
                if (x[i] && y[j]) {
                    map[cntx][cnty] = map[i][j];
                } else if (map[i][j] == 'E') {
                    if (!x[i] && !y[j]) {
                        flag = true;
                    } else if (x[i]) {
                        row[cntx][cnty] = true;
                    } else {
                        col[cnty][cntx] = true;
                    }
                }
                if (y[j]) {
                    ++cnty;
                }
            }
            if (x[i]) {
                ++cntx;
            }
        }
        for (int j = 0; j < m; ++j) {
            cnty += y[j];
        }
        for (int i = 0; i < cnty; ++i) {
            if (col[i][cntx]) {
                flag = true;
            }
        }
        if (flag) {
            printf("Impossible\n");
            continue;
        }
        n = cntx, m = cnty;
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 1 << m; ++j) {
                memset(dp[i][j], 0, sizeof(dp[i][j]));
            }
        }
        int now = 0;
        dp[now][0][row[n - 1][cnty]][0] = true;
        for (int i = n - 1; i >= 0; --i) {
            for (int j = m - 1; j >= 0; --j) {
                int next = now ^ 1;
                for (int st = 0; st < 1 << m; ++st) {
                    memset(dp[next][st], 0, sizeof(dp[next][st]));
                }  
                for (int st = 0; st < 1 << m; ++st) {
                    for (int nd = 0; nd < 2; ++nd) {
                        for (int hs = 0; hs < 2; ++hs) {
                            if (dp[now][st][nd][hs]) {
                                if (map[i][j] == 'E') {
                                    if ((st >> j & 1) || hs) {
                                        if (!row[i][j] || hs) {
                                            dp[next][st][nd][hs] = true;
                                        }
                                    }
                                    dp[next][st][1][hs] = true;
                                } else if (map[i][j] == 'L') {
                                    if (!row[i][j] || hs) {
                                        dp[next][st | 1 << j][nd][hs] = true;
                                    } else {
                                        dp[next][st | 1 << j][1][hs] = true;
                                    }
                                    if (!row[i][j] || hs) {
                                        dp[next][st][0][hs] = true;
                                    } else {
                                        dp[next][st][1][hs] = true;
                                    }
                                    dp[next][st][nd][1] = true;
                                } else {
                                    if (!row[i][j] || hs) {
                                        dp[next][st][nd][hs] = true;
                                    } else {
                                        dp[next][st][1][hs] = true;
                                    }
                                }
                            }
                        }
                    }
                }
                now = next;
            }
            int next = now ^ 1;
            for (int st = 0; st < 1 << m; ++st) {
                memset(dp[next][st], 0, sizeof(dp[next][st]));
            }  
            for (int st = 0; st < 1 << m; ++st) {
                for (int nd = 0; nd < 1; ++nd) {
                    for (int hs = 0; hs < 2; ++hs) {
                        if (dp[now][st][nd][hs]) {
                            bool tmp = true;
                            for (int j = 0; j < cnty; ++j) {
                                if (col[j][i] && (~st >> j & 1)) {
                                    tmp = false;
                                }
                            }
                            int nnd = i && row[i - 1][cnty];
                            dp[next][st][nnd][0] = tmp;
                        }
                    }
                }
            }
            now = next;
        }     
        flag = false; 
        for (int st = 0; st < 1 << m; ++st) {
            flag |= dp[now][st][0][0];
        }
        puts(flag ? "Possible" : "Impossible");
    }
    return 0;
}

