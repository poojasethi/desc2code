#include <cstdio>
#include <cstring>
#include <cassert>
#include <algorithm>

using namespace std;
typedef long long lld;
const int MAXN = 55;
char mp[MAXN][MAXN];
int id[MAXN][MAXN];
int n, m;

int work() {
    scanf("%d%d", &n, &m);
    int K = 0;
    memset(id, -1, sizeof(id));
    for (int i = 0; i < n; i++) {
        scanf("%s", mp[i]);
        for (int j = 0; j < m; j++) {
            if (mp[i][j] == 'L') {
                id[i][j] = K ++;
            }
        }
    }
    for (int st = 0; st < 1 << K; st++) {
        lld up = 0;
        int ok = 1;
        for (int i = n - 1; i >= 0; i--) {
            lld state = 0;
            int cnt = 0, pos = 0;
            for (int j = 0; j < m; j++) {
                if (id[i][j] != -1) {
                    if (st >> id[i][j] & 1) {
                        up |= 1LL << j;
                    }else {
                        ++ cnt; pos = j;
                    }
                }else if (mp[i][j] == 'E') {
                    if (up >> j & 1) continue;
                    else state |= 1LL << j;
                }
            }
            if (cnt >= 2) continue;
            if (!state) continue;
            if (cnt == 0) {
                ok = 0; break;
            }
            assert(cnt == 1);
            int t = 0;
            for (int j = pos - 1; j >= 0; j--) {
                if (state >> j & 1) {t ++ ; break;}
            }
            for (int j = pos + 1; j < m; j++) {
                if (state >> j & 1) {t ++; break;}
            }
            if (t >= 2) {ok = 0; break;}
        }
        if (ok) return 1;
    }
    return 0;
}

int main() {
    int T;
    scanf("%d", &T);
    for (int cas = 1; cas <= T; cas++) {
        printf("%s\n", work() ? "Possible" : "Impossible");
    }
    return 0;
}

