#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
typedef long long ll;

const int MOD = 10007;
int tot, n, m;
int is[MOD], cnt[55], be[55], x[22], y[22];
ll row[1<<16][51];
char s[55][55];

bool solve() {
    int full = (1<<tot)-1;
    for(int i = 0;i <= full; i++) {
        if(i == 0) {
            for(int j = 0;j < n; j++) {
                row[i][j] = 0;
                for(int k = 0;k < m; k++) if(s[j][k] == 'E')
                    row[i][j] |= 1LL<<k;
            }
        }
        else {
            int lowbit = i&-i, pos = is[lowbit%MOD];
            for(int j = 0;j < n; j++)   row[i][j] = row[i-lowbit][j];
            for(int j = 0;j < x[pos]; j++) if(row[i][j]>>y[pos]&1){
                row[i][j] ^= 1LL<<y[pos];
            }
        }
        for(int j = 0;j < n; j++) cnt[j] = 0;
        for(int j = 0;j < tot; j++) if(!(i>>j&1)) {
            cnt[x[j]]++;
            be[x[j]] = y[j]; 
        }
        bool flag = true;
        for(int j = 0;j < n; j++) if(row[i][j]) {
            if(cnt[j] > 1)  continue;
            if(cnt[j] == 0) {
                flag = false;
                break;
            }
            ll lowbit = row[i][j]&-row[i][j];
            if(is[lowbit%MOD] > be[j])  continue;
            if((1LL<<be[j]) > row[i][j])  continue;
            flag = false;
            break;
        }
        if(flag)    return true;
    }
    return false;
}

bool is_prime(int n) {
    for(int i = 2;i*i <= n; i++) if(n%i == 0)
        return false;
    return true;
}

void init() {
    int cur = 1;
    is[1] = 0;
    for(int i = 1;i < 50; i++) {
        cur = cur*2%MOD;
        is[cur] = i;
    }
}

int main() {
    init();

    int t;
    scanf("%d", &t);
    while(t--) {
        scanf("%d%d", &n, &m);
        for(int i = 0;i < n; i++)
            scanf("%s", s[i]);
        tot = 0;
        for(int i = 0;i < n; i++) {
            for(int j = 0;j < m; j++) {
                if(s[i][j] == 'L') {
                    x[tot] = i; y[tot] = j;
                    tot++;
                }
            }
        }
        puts(solve() ? "Possible" : "Impossible");
    }
    return 0;
}

