/*
    Marko Bakovic
    CHEFGIFT
*/

#include <cstdio>
#include <algorithm>

using namespace std;

const int limit = 1000000000;

int d, n, m, t, toll[ 105 ][ 105 ], move[ 105 ][ 105 ], dp[ 105 ][ 105 ];

void solve()
{
    for ( int i = 1; i <= m; i++ )
        for ( int j = 1; j <= n; j++ ) dp[ j ][ i ] = limit;
    for ( int i = 1; i <= m; i++ ) dp[ 1 ][ i ] = toll[ i ][ 1 ];
    for ( int i = 2; i <= n; i++ )
        for ( int j = 1; j <= m; j++ )
            for ( int k = 1; k <= m; k++ ) dp[ i ][ j ] = min( dp[ i ][ j ], dp[ i - 1 ][ k ] + toll[ j ][ i ] + move[ k ][ j ] );
    int sol = limit;
    for ( int i = 1; i <= m; i++ ) sol = min( sol, dp[ n ][ i ] );
    sol = d - sol;
    if ( sol < 0 ) printf( "-1\n" );
    else printf( "%d\n", sol );
}

int main()
{
    scanf( "%d", &t );

    while ( t )
    {
        t--;
        scanf( "%d %d %d", &d, &n, &m );
        for ( int i = 1; i <= m; i++ )
            for ( int j = 1; j <= n; j++ ) scanf( "%d", &toll[ i ][ j ] );
        for ( int i = 1; i <= m; i++ )
            for ( int j = 1; j <= m; j++ ) scanf( "%d", &move[ i ][ j ] );
        for ( int k = 1; k <= m; k++ )
            for ( int i = 1; i <= m; i++ )
                for ( int j = 1; j <= m; j++ ) move[ i ][ j ] = min( move[ i ][ j ], move[ i ][ k ] + move[ k ][ j ] );
        solve();
    }

    return 0;
}
