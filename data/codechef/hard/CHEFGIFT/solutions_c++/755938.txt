
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stdint.h>

int DEBUG = 0;

#define INFTY 0x0FFFFFFF

int code(int dist) {
  return dist >= INFTY ? -1 : dist;
}


int Min(int a, int b) {
  return (a < b ? a : b);
}
int Max(int a, int b) {
  return (a > b ? a : b);
}
int Abs(int a) {
  return (a >= 0 ? a : -a);
}

main(int argc, char **argv) {
  DEBUG = (argc>=2) ? atoi(argv[1]) : 0;

  int toll[101][101];
  int C[101][101];
  int minCost[2][101];

  int T;
  scanf("%d", &T);
  for(int t=1; t<=T; t++) {
    int amt, ntoll, nroad; // D, n, m;
    scanf("%d%d%d", &amt, &ntoll, &nroad);
    for(int i=1; i<=nroad; i++) {
      for(int j=1; j<=ntoll; j++) {
	scanf("%d", &toll[i][j]);
      }
    } 
    for(int i=1; i<=nroad; i++) {
      for(int j=1; j<=nroad; j++) {
	scanf("%d", &C[i][j]);
	if(i==j) {
	  C[i][j] = 0;
	}
      }
    }

    //=========================================================
    // find shortest path of all pairs (Floyd-Warshall)
    // O(V^3)
    //=========================================================
    for(int k=1; k<=nroad; k++) {
      for(int i=1; i<=nroad; i++) {
	for(int j=1; j<=nroad; j++) {
	  C[i][j] = Min(C[i][j], C[i][k] + C[k][j]);
	}
      }
    }
    //=========================================================
    // End of Floyd-Warshall
    //=========================================================
    
    // actual work
    int *pre = minCost[0];
    int *cur = minCost[1];
    int *tmp;
    for(int i=1; i<=nroad; i++) {
      cur[i] = toll[i][1];
    }
    for(int j=2; j<=ntoll; j++) {
      tmp = cur;
      cur = pre; pre = tmp;
      for(int i=1; i<=nroad; i++) {
	cur[i] = 0x0FFFFFFF;
	for(int k=1; k<=nroad; k++) {
	  cur[i] = Min(cur[i], pre[k]+C[k][i]+toll[i][j]);
	}
      }
    }
    int curMinCost = 0x0FFFFFFF;
    for(int i=1; i<=nroad; i++) {
      curMinCost = Min(cur[i], curMinCost);
    }

    printf("%d\n", curMinCost <= amt ? (amt - curMinCost) : -1);

  } // end of T
  
  exit(0);
  }

// g++ CHEFGIFT.cpp; cat CHEFGIFT.in | ./a.out


