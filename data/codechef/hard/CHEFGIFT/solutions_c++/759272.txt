#include<iostream>
#include<stdio.h>
#include<cstring>
#include<cmath>

using namespace std;

const int INF = 0x3f3f3f3f;
int C[100][100];
int M[100][100];
int dist[100][100];
int D,n,m;

int search() {
    int min = D + 1;
    for(int i=0;i<m;i++)
        dist[i][0] = C[i][0];

    for(int i = 1; i < n; i++) {
        for(int j = 0; j < m; j++) {
            for(int k = 0;k < m; k++) {
                if(dist[k][i-1] + M[k][j] + C[j][i] < dist[j][i])
                     dist[j][i] = dist[k][i-1] + M[k][j] + C[j][i];
            }
        }
    }
    for(int i = 0; i < m ; i++){
        if(dist[i][n-1] < min)
                min = dist[i][n-1];
    }
    return D - min;
}

void floyd() {
    for(int k = 0; k < m; k++) {
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < m ; j++) {
                if(M[i][j] > M[i][k] + M[k][j])
                      M[i][j] = M[i][k] + M[k][j];
            }
        }
    }
}

int main() {
    int t;
    int cost;
    scanf("%d",&t);
    while(t--) {
        scanf("%d %d %d",&D,&n,&m);
        for(int i = 0;i < m; i++){
            for(int j = 0; j < n; j++) {
                scanf("%d",&cost);
                C[i][j] = cost;
            }
        }
        for(int i = 0; i < m; i++) {
                for(int j = 0;j < m; j++) {
                    scanf("%d",&cost);
                    M[i][j] = cost;
                }
        }
        memset(dist,INF,sizeof(dist));
        floyd();
        int tmp = search();
        printf("%d\n", tmp);
    }
    return 0;
}
