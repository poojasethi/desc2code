#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>

using namespace std;

const int INF = 0x3f3f3f3f;

int T, D, n, m;
int w[100][100], c[100][100], dp[100][100];

int main() {
	scanf("%d", &T);
	for (int caseNum = 1; caseNum <= T; ++caseNum) {
		scanf("%d%d%d", &D, &n, &m);
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				scanf("%d", &w[i][j]);
			}
		}
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < m; ++j) {
				scanf("%d", &c[i][j]);
			}
		}
		for (int k = 0; k < m; ++k) {
			for (int i = 0; i < m; ++i) {
				for (int j = 0; j < m; ++j) {
					c[i][j] = min(c[i][j], c[i][k] + c[k][j]);
				}
			}
		}
		for (int i = 0; i < m; ++i) {
			dp[i][0] = w[i][0];
		}
		for (int i = 1; i < n; ++i) {
			for (int j = 0; j < m; ++j) {
				dp[j][i] = INF;
				for (int k = 0; k < m; ++k) {
					dp[j][i] = min(dp[j][i], dp[k][i - 1] + c[k][j]);
				}
				dp[j][i] += w[j][i];
			}
		}
		int res = INF;
		for (int i = 0; i < m; ++i) {
			res = min(res, dp[i][n - 1]);
		}
		printf("%d\n", res > D ? -1 : D - res);
	}
	return 0;
}
