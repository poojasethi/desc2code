//Crease Painting
#include <string>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <cstring>
#include <queue>
#include <cassert>
using namespace std;
typedef long long ll;

bool cmp(pair<pair<ll, ll>, bool> p1, pair<pair<ll, ll>, bool> p2)
{
    if(p1.first.first==p2.first.first)
    {
        if(p1.first.second==p2.first.second)
            return p1.second>p2.second;
        else return (p1.first.second<p2.first.second);
    }
    else return (p1.first.first<p2.first.first);
}
void reorder(ll &x1, ll &y1, ll &x2, ll &y2)
{
    ll tx, ty;
    if(x2<x1 || y2<y1)
    {
        tx=x2, ty=y2;
        x2=x1, y2=y1;
        x1=tx, y1=ty;
    }
}
class linesegment
{
public:
    ll x1, x2, y1, y2;
    linesegment(ll xx1, ll yy1, ll xx2, ll yy2)
    {
        x1=xx1, y1=yy1, x2=xx2, y2=yy2;
    }
    linesegment()
    {
        x1=x2=y1=y2=0;
    }

    bool anyvalidintersection(linesegment &seg)
    {
        //neccessary condition
        reorder(seg.x1, seg.y1, seg.x2, seg.y2);
        if(seg.x1>x2 || seg.x2<x1 || seg.y1>y2 || seg.y2<y1)return false;
        return true;
    }
    void findIntersection(linesegment &seg1, linesegment &seg)
    {
        bool t1, t2;
        if(seg.x1==seg.x2)t1=true;
        else t1 = false;
        if(seg1.x1==seg1.x2)t2=true;
        else t2 = false;
        reorder(seg.x1, seg.y1, seg.x2, seg.y2);
        if(t1==t2)
        {
            x1 = max(seg1.x1, seg.x1);
            x2 = min(seg1.x2, seg.x2);
            y1 = max(seg1.y1, seg.y1);
            y2 = min(seg1.y2, seg.y2);
        }
        else
        {
            if(t1)x1=seg.x1;
            else y1=seg.y1;
            if(t2)x1=seg1.x1;
            else y1=seg1.y1;
            x2=x1;
            y2=y1;
        }
    }

};
vector<linesegment> lines;
vector<pair<pair<ll, ll>, bool> > v;
int solve(linesegment &seg)
{
    int n = lines.size();
    lines.push_back(seg);
    v.clear();
    reorder(seg.x1, seg.y1, seg.x2, seg.y2);
    for(int i=0; i<n; i++)
    {
        if(seg.anyvalidintersection(lines[i]))
        {
            linesegment intseg;
            intseg.findIntersection(seg, lines[i]);
            v.push_back(make_pair(make_pair(intseg.x1, intseg.y1), true));
            v.push_back(make_pair(make_pair(intseg.x2, intseg.y2), false));
        }
    }
    if(v.empty()==true)return (seg.y2-seg.y1+seg.x2-seg.x1+1);
    sort(v.begin(), v.end(), cmp);
    int res, st=0;
    res = v[0].first.second-seg.y1+v[0].first.first-seg.x1;
    int l = v.size();
    for(int i=0; i<(l-1); i++)
    {
        pair<int, int> p1 = v[i].first;
        pair<int, int> p2 = v[i+1].first;
        if(v[i].second==true)st++;
        else st--;

        if(st==0)
        {
            int t = p2.first+p2.second-p1.first-p1.second-1;
            if(t>0)res+=t;
        }
    }

    res += seg.x2+seg.y2-v[l-1].first.second-v[l-1].first.first;
    return res;
}
int main()
{

    int testcases;
    scanf("%d", &testcases);
    ll curx, cury;
    curx=cury=0;
    linesegment s(0, 0, 0, 0);
    lines.push_back(s);
    for(int caseno=1; caseno<=testcases; caseno++)
    {
        char dir;
        int dist;
        scanf(" %c%d", &dir, &dist);
        linesegment seg;
        seg.x1 = curx, seg.y1=cury;
        switch(dir)
        {
        case 'U':
            seg.x2=seg.x1, seg.y2=seg.y1-dist, seg.y1-=1;
            break;
        case 'D':
            seg.x2=seg.x1, seg.y2=seg.y1+dist, seg.y1+=1;
            break;
        case 'L':
            seg.x2=seg.x1-dist, seg.y2=seg.y1, seg.x1-=1;
            break;
        case 'R':
            seg.x2=seg.x1+dist, seg.y2=seg.y1, seg.x1+=1;
            break;
        default:
            assert(0);
        }
        curx=seg.x2, cury=seg.y2;
        printf("%d\n", solve(seg));
    }
    return 0;
}


