#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

using namespace std;

#define MXN 1010

typedef long long LL;

int dx[] = {0,1,0,-1}, dy[]={1,0,-1,0};
LL X[MXN], Y[MXN];
int n, inpDir[MXN], inpDis[MXN], dirId[255];
bool vis[MXN][MXN][5];

void solve(int px,int py,int k)
{
	if(k==n) return;
	int ans = 0, disLeft = inpDis[k], dir = inpDir[k], qx, qy, disCur;
	for(;disLeft>0;px=qx,py=qy,disLeft-=disCur)
	{
		qx = px + dx[dir], qy = py + dy[dir], disCur = abs(X[px]-X[qx]) + abs(Y[py]-Y[qy]);		
		if(!vis[px][py][dir]) ans += disCur-1;
		if(!vis[qx][qy][4]) ans++;
		vis[px][py][dir] = vis[qx][qy][dir^2] =  vis[qx][qy][4] = true;
	}
	printf("%d\n",ans);
	solve(px,py,k+1);
}

int main()
{
	dirId['U'] = 0; dirId['R'] = 1; dirId['D'] = 2; dirId['L'] = 3;
	scanf("%d",&n);
	vector<LL> vx, vy;
	vx.push_back(0); vy.push_back(0);
	LL x = 0, y = 0;
	for(int i = 0;i < n; i++)
	{
		char ch;
		scanf(" %c %d",&ch,&inpDis[i]);
		inpDir[i] = dirId[ch];
		vx.push_back(x += dx[inpDir[i]] * inpDis[i]);
		vy.push_back(y += dy[inpDir[i]] * inpDis[i]);
	}
	sort(vx.begin(),vx.end());
	sort(vy.begin(),vy.end());
	int px = -1, py = -1;
	for(int i=0,k=0;i<vx.size();i++)
	{
		if(i==0 || vx[i]!=vx[i-1]) X[k++] = vx[i];
		if(vx[i]==0 && px==-1) px = k-1;
	}
	for(int i=0,k=0;i<vy.size();i++)
	{
		if(i==0 || vy[i]!=vy[i-1]) Y[k++] = vy[i];
		if(vy[i]==0 && py==-1) py = k-1;
	}
	vis[px][py][4] = true;
	solve(px,py,0);
	return 0;
}