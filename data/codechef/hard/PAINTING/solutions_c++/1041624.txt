#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

vector<pair<long long int,pair<long long int,long long int> > > amoodi;
vector<pair<long long int,pair<long long int,long long int> > > ofoghi;

pair<long long int,long long int> sort(pair<long long int,long long int> a)
{
    return make_pair(min(a.first,a.second),max(a.first,a.second));
}

bool have_intersect(pair<long long int,long long int> a,pair<long long int,long long int> b)
{
    a = sort(a);
    b = sort(b);
    
    long long int x = max(a.first,b.first);
    long long int y = min(a.second,b.second);
    
    return x <= y;
}   

pair<long long int,long long int> get_union(pair<long long int,long long int> a,pair<long long int,long long int> b)
{
    a = sort(a);
    b = sort(b);
    
    long long int x = min(a.first,b.first);
    long long int y = max(a.second,b.second);
    
    return make_pair(x,y);
}   

pair<long long int,long long int> get_intersect(pair<long long int,long long int> a,pair<long long int,long long int> b)
{
    a = sort(a);
    b = sort(b);
    
    long long int x = max(a.first,b.first);
    long long int y = min(a.second,b.second);
    
    return make_pair(x,y);
}   


vector<pair<long long int,long long int> > do_union(vector<pair<long long int,long long int> > v)
{
    vector<pair<long long int,long long int> > res;
    for (long long int i=0;i<v.size();i++)
    {
        bool found = false;
        for (long long int j=i+1;j<v.size() && !found;j++)
        {
            if (have_intersect(v[i],v[j]))
            {
                v[j] = get_union(v[i],v[j]);
                found = true; 
            }
        }
        if (!found)
            res.push_back(v[i]);
    }
    
    return res;
}

long long int get_length(vector<pair<long long int,long long int> > v)
{
    long long int res = 0;
    for (long long int i=0;i<v.size();i++)
        res += abs(v[i].second - v[i].first) + 1;

    return res;
}

void print(vector<pair<long long int,long long int> > v)
{
    for (int i=0;i<v.size();i++)
        cout<<"( "<<v[i].first<<", "<<v[i].second<<" ) ,";
    cout<<endl;
    return;
}

int main()
{
    vector<pair<long long int,long long int> > v;

    amoodi.push_back(make_pair(0,make_pair(0,0)));
    ofoghi.push_back(make_pair(0,make_pair(0,0)));
    long long int x = 0,y = 0;
    long long int nx,ny;
    long long int n,d;
    char c;
    cin>>n;
    for (long long int i=0;i<n;i++)
    {
        cin>>c>>d;

        if (c == 'R' || c == 'L')
        {
            v.clear();
            nx = x + (c == 'R' ? 1 : -1) * d;
            ny = y;
           
            for (long long int j=0;j<ofoghi.size();j++)
                if (ofoghi[j].first == y && have_intersect(ofoghi[j].second,make_pair(x,nx)))
                    v.push_back(get_intersect(make_pair(x,nx),ofoghi[j].second));
            for (long long int j=0;j<amoodi.size();j++)
                if (have_intersect(amoodi[j].second,make_pair(y,y)) && have_intersect(make_pair(amoodi[j].first,amoodi[j].first),make_pair(x,nx)))
                    v.push_back(make_pair(amoodi[j].first,amoodi[j].first));
            v = do_union(v);
            
            cout<<abs(nx-x)+1-get_length(v)<<endl;
            ofoghi.push_back(make_pair(y,make_pair(x,nx)));
        }  
        else
        {
            v.clear();
            nx = x;
            ny = y + (c == 'U' ? 1 : -1) * d;
           
            for (long long int j=0;j<amoodi.size();j++)
                if (amoodi[j].first == x && have_intersect(make_pair(y,ny),amoodi[j].second))
                    v.push_back(get_intersect(make_pair(y,ny),amoodi[j].second));
            for (long long int j=0;j<ofoghi.size();j++)
                if (have_intersect(ofoghi[j].second,make_pair(x,x)) && have_intersect(make_pair(ofoghi[j].first,ofoghi[j].first),make_pair(y,ny)) )
                    v.push_back(make_pair(ofoghi[j].first,ofoghi[j].first));
            v = do_union(v);
            cout<<abs(ny-y)+1-get_length(v)<<endl;
            amoodi.push_back(make_pair(x,make_pair(y,ny)));
        } 
        x = nx;
        y = ny; 
    }
    return 0;
}