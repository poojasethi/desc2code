#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

typedef long long i64;
typedef pair<i64,i64> pii;
typedef pair<pii,i64> piii;

bool intersect(piii a, piii b,i64& x) 
{
	if (b.first.first<=a.second && a.second<=b.first.second && a.first.first<=b.second && b.second<=a.first.second)
	{
		x=b.second;
		return true;
	}
	return false;
}

int main()
{
	int n;
	cin >> n;
	vector<piii> vert(n);
	vector<piii> hor(n);
	int v_kol=0;
	int h_kol=0;
	vector<pii> point(2*n+50);
	i64 pred;
	int kol_p,cnt=-1;
	i64 x=0,y=0;
	char ch,tmp;
	int d;
	i64 temp;
	while (n--)
	{
		scanf("%c%c%d",&tmp,&ch,&d);
		if (ch=='U'){
			vert[v_kol++]=make_pair(make_pair(x,x+d),y);
			x+=d;
		}
		if (ch=='D'){
			vert[v_kol++]=make_pair(make_pair(x-d,x),y);
			x-=d;
		}
		if (ch=='R'){
			hor[h_kol++]=make_pair(make_pair(y,y+d),x);
			y+=d;
		}
		if (ch=='L'){
			hor[h_kol++]=make_pair(make_pair(y-d,y),x);
			y-=d;
		}
		kol_p=1;
		if (ch=='U' || ch=='D')
		{
			pred=vert[v_kol-1].first.first;
			point[0]=make_pair(vert[v_kol-1].first.second+1,0);
			for (int i=0;i<h_kol;i++)
				if (intersect(vert[v_kol-1],hor[i],temp))
				{
					point[kol_p++]=make_pair(temp,1);
					point[kol_p++]=make_pair(temp+1,-1);
				}
			for (int i=0;i<v_kol-1;i++)
				if (vert[i].second==vert[v_kol-1].second)
				{
					point[kol_p++]=make_pair(vert[i].first.first,1);
					point[kol_p++]=make_pair(vert[i].first.second+1,-1);
				}
		}
		else
		{
			pred=hor[h_kol-1].first.first;
			point[0]=make_pair(hor[h_kol-1].first.second+1,0);
			for (int i=0;i<v_kol;i++)
				if (intersect(hor[h_kol-1],vert[i],temp))
				{				
					point[kol_p++]=make_pair(temp,1);
					point[kol_p++]=make_pair(temp+1,-1);
				}
			for (int i=0;i<h_kol-1;i++)
				if (hor[i].second==hor[h_kol-1].second)
				{
					point[kol_p++]=make_pair(hor[i].first.first,1);
					point[kol_p++]=make_pair(hor[i].first.second+1,-1);
				}
		}
		sort(point.begin(),point.begin()+kol_p);
		int s=0;
		i64 res=0;
		for (int i=0;i<kol_p;i++)
		{
			if (s==0 && point[i].first>pred) res+=point[i].first-pred;
			for(;i<kol_p-1 && point[i].first==point[i+1].first;i++) s+=point[i].second;
			s+=point[i].second;
			pred=point[i].first;
		}
		cout << res+cnt<< endl;
		cnt=0;
	}
	return 0;
}