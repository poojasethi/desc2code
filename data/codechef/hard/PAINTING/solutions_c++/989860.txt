
#include <map>
#include <vector>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <cstdio>
#include <cstring>
#define REP(i, n) for(int i = 0; i < (int)(n); ++i)
#define FOR(i,c) for(__typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)

using namespace std;
typedef long long ll;

ll xs[1010];
ll ys[1010];

bool field[3010][3010];
ll id2x[3010];
ll id2y[3010];

int main(void) {
  int nInsts;
  scanf("%d", &nInsts);

  map<ll, int> x2id;
  map<ll, int> y2id;
  x2id[0] = 1;
  y2id[0] = 1;
  x2id[1] = 1;
  y2id[1] = 1;
  x2id[-1] = 1;
  y2id[-1] = 1;

  REP(i, nInsts){
    char buf[8];
    int dist;
    scanf("%s %d", buf, &dist);
    switch(*buf) {
    case 'U': xs[i+1] = xs[i]; ys[i+1] = ys[i] + dist; break;
    case 'D': xs[i+1] = xs[i]; ys[i+1] = ys[i] - dist; break;
    case 'L': xs[i+1] = xs[i] - dist; ys[i+1] = ys[i]; break;
    case 'R': xs[i+1] = xs[i] + dist; ys[i+1] = ys[i]; break;
    }
    x2id[xs[i+1]] = 1;
    x2id[xs[i+1]-1] = 1;
    x2id[xs[i+1]+1] = 1;
    y2id[ys[i+1]] = 1;
    y2id[ys[i+1]-1] = 1;
    y2id[ys[i+1]+1] = 1;
  }
  
  int xi = 0;
  FOR(it, x2id){
    id2x[xi] = it->first;
    it->second = xi++;
//     cerr << "x[" << xi-1 << "]=" << it->first << endl;
  }
  int yi = 0;
  FOR(it, y2id){
    id2y[yi] = it->first;
    it->second = yi++;
//     cerr << "y[" << yi-1 << "]=" << it->first << endl;
  }

  field[y2id[0]][x2id[0]] = true;
  REP(i, nInsts){
    int res = 0;
    int cx = x2id[xs[i]];
    int cy = y2id[ys[i]];
    int dx = xs[i] != xs[i+1] ? (xs[i+1] - xs[i]) / llabs(xs[i+1] - xs[i]) : 0; 
    int dy = ys[i] != ys[i+1] ? (ys[i+1] - ys[i]) / llabs(ys[i+1] - ys[i]) : 0;
    int nx = x2id[xs[i+1]];
    int ny = y2id[ys[i+1]];
    do{
      cx += dx;
      cy += dy;
//       cerr << cx << "," << cy << " " << field[cy][cx] << endl;
      if(field[cy][cx] == false){
	field[cy][cx] = true;
	res += max(llabs(id2x[cx]-id2x[cx-dx]), llabs(id2y[cy]-id2y[cy-dy]));
      }
    }while(!(cx == nx && cy == ny));
   
    printf("%d\n", res);
  }
  
  return 0;
}
