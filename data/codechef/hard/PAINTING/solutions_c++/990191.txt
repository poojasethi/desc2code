#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>


using namespace std;

#ifdef _MSC_VER
#define __typeof__ decltype
template <class T> int popcount(T n) { return n ? 1 + popcount(n & (n - 1)) : 0; }
#endif
#ifdef __GNUC__
template <class T> int popcount(T n);
template <> int popcount(unsigned int n) { return n ? __builtin_popcount(n) : 0; }
template <> int popcount(int n) { return n ? __builtin_popcount(n) : 0; }
template <> int popcount(unsigned long long n) { return n ? __builtin_popcountll(n) : 0; }
template <> int popcount(long long n) { return n ? __builtin_popcountll(n) : 0; }
#endif

#define foreach(it, c) for (__typeof__((c).begin()) it=(c).begin(); it != (c).end(); ++it)
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define CL(arr, val) memset(arr, val, sizeof(arr))

#define rep(i, n) for (int i = 0; i < n; ++i)

template <class T> void max_swap(T& a, const T& b) { a = max(a, b); }
template <class T> void min_swap(T& a, const T& b) { a = min(a, b); }

typedef long long ll;
typedef pair<int, int> pint;

const double EPS = 1e-8;
const double PI = acos(-1.0);
const int dx[] = { 0, 1, 0, -1 };
const int dy[] = { 1, 0, -1, 0 };
bool valid_pos(int x, int y, int w, int h) { return 0 <= x && x < w && 0 <= y && y < h; }

template <class T> void print(T a, int n, int br = 1, const string& deli = ", ") { cout << "{ "; for (int i = 0; i < n; ++i) { cout << a[i]; if (i + 1 != n) cout << deli; } cout << " }"; while (br--) cout << endl; }
template <class T> void print(const vector<T>& v, int br = 1, const string& deli = ", ") { print(v, v.size(), br, deli); }


vector<ll> convert(const vector<ll>& v)
{
	vector<ll> res;
	for (int i = 0; i < v.size(); ++i)
		for (int d = -1; d <= 1; ++d)
			res.push_back(v[i] + d);
	sort(all(res));
	res.erase(unique(all(res)), res.end());
	return res;
}
int main()
{
	ios::sync_with_stdio(false);

	int n;
	cin >> n;
	vector<ll> px(n + 1), py(n + 1);
	char ope[1024];
	for (int i = 0; i < n; ++i)
	{
		int dis = 0;
		px[i + 1] = px[i], py[i + 1] = py[i];

		cin >> ope[i] >> dis;
		if (ope[i] == 'U')
			py[i + 1] += dis;
		else if (ope[i] == 'D')
			py[i + 1] -= dis;
		else if (ope[i] == 'R')
			px[i + 1] += dis;
		else
			px[i + 1] -= dis;
	}

	vector<ll> cx = convert(px), cy = convert(py);

	static bool visit[3333][3333];
	CL(visit, 0);
	int x = lower_bound(all(cx), 0) - cx.begin();
	int y = lower_bound(all(cy), 0) - cy.begin();
	visit[y][x] = true;
	for (int i = 0; i < n; ++i)
	{
		int dx = 0, dy = 0;
		if (ope[i] == 'U')
			dy = 1;
		else if (ope[i] == 'D')
			dy = -1;
		else if (ope[i] == 'R')
			dx = 1;
		else
			dx = -1;

		ll res = 0;
		for (; cx[x] != px[i + 1] || cy[y] != py[i + 1]; x += dx, y += dy)
		{
			if (!visit[y + dy][x + dx])
			{
				visit[y + dy][x + dx] = true;
				res += abs(cx[x + dx] - cx[x]) + abs(cy[y + dy] - cy[y]);
			}
		}
		cout << res << endl;
	}
}