#include <cstdio>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

const int Maxn = 4015;

typedef long long ll;
typedef pair <ll, ll> ii;

map <ll, vector <ii> > H, V;
int n;
ll x, y;
ii tmp[Maxn];
int len;

int getRes(ll y, ll x1, ll x2, map <ll, vector <ii> > &H, map <ll, vector <ii> > &V)
{
	len = 0;
	tmp[len++] = ii(x1, 1); tmp[len++] = ii(x2 + 1, -1);
	for (map <ll, vector <ii> >::iterator it = V.begin(); it != V.end(); it++)
		if (x1 <= it->first && it->first <= x2)
			for (int i = 0; i < it->second.size(); i++)
				if (it->second[i].first <= y && y <= it->second[i].second) { tmp[len++] = ii(it->first, 1); tmp[len++] = ii(it->first + 1, -1); }
	map <ll, vector <ii> >::iterator it = H.find(y);
	if (it != H.end())
		for (int i = 0; i < it->second.size(); i++) { tmp[len++] = ii(it->second[i].first, 1); tmp[len++] = ii(it->second[i].second + 1, -1); }
	sort(tmp, tmp + len);
	int res = 0;
	int i = 0, st = 0;
	while (tmp[i].first < x1) st += tmp[i++].second;
	while (tmp[i].first <= x2) {
		int j = i;
		while (tmp[i].first == tmp[j].first) st += tmp[j++].second;
		if (st == 1) res += tmp[j].first - tmp[j - 1].first;
		i = j;
	}
	H[y].push_back(ii(x1, x2));
	return res;
}

int main()
{
	H[0].push_back(ii(0, 0)); V[0].push_back(ii(0, 0));
	scanf("%d", &n);
	while (n--) {
		char c; int d; scanf(" %c %d", &c, &d);
		switch (c) {
			case 'R': printf("%d\n", getRes(y, x, x + d, H, V)); x += d; break;
			case 'L': printf("%d\n", getRes(y, x - d, x, H, V)); x -= d; break;
			case 'U': printf("%d\n", getRes(x, y, y + d, V, H)); y += d; break;
			case 'D': printf("%d\n", getRes(x, y - d, y, V, H)); y -= d; break; 
		}
	}
	return 0;
}