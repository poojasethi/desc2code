#include<algorithm>
#include<iostream>
#include<cstdio>
#include<vector>
#include<fstream>
#include<iomanip>
#include<bitset>
#include<deque>
#include<queue>
#include<string>
#include<map>
#include<cstring>
#include<sstream>
#include<cmath>
using namespace std;

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
int dirId[255];
long long visited[1001][1001][5];
long long X[1001];
long long Y[1001];
int N, M;

vector<int> inpDist;
vector<int> inpDir;

int main()
{
	memset(visited, false, sizeof(visited));
	dirId['L'] = 0; dirId['U'] = 1; dirId['R'] = 2; dirId['D'] = 3; 
	int T;
	scanf("%d", &T);
	vector<long long> vx;
	vector<long long> vy;
	char ch;
	long long dist;
	long long cx = 0, cy = 0;
	vx.push_back(0);
	vy.push_back(0);
	for (int i = 0; i < T; i++)
	{
		scanf(" %c %lld", &ch, &dist);
		inpDir.push_back(dirId[ch]);
		inpDist.push_back(dist);
		cx += dx[dirId[ch]]*dist;
		cy += dy[dirId[ch]]*dist;
		vx.push_back(cx);
		vy.push_back(cy);
	}
	sort(vx.begin(), vx.end());
	sort(vy.begin(), vy.end());
	N = vx.size();
	M = vy.size();
	int cxi, cyi, nxi, nyi;
	int k = 0;
	for (int i = 0; i < N; i++)
	{
		if (i == 0 || vx[i] != vx[i-1])
			X[k++] = vx[i];
		if (X[k-1] == 0)
			cxi = k-1;
	}
	k = 0;
	for (int j = 0; j < M; j++)
	{
		if (j == 0 || vy[j] != vy[j-1])
			Y[k++] = vy[j];
		if (Y[k-1] == 0)
			cyi = k-1;
	}
	visited[cxi][cyi][4] = true;
	for (int i = 0; i < T; i++)
	{
		int ans = 0, distLeft = inpDist[i], dir = inpDir[i], distMoved;
		for (; distLeft > 0; distLeft -= distMoved)
		{
			nxi = cxi + dx[dir]; 
			nyi = cyi + dy[dir];
			distMoved = abs(X[nxi]-X[cxi])+abs(Y[nyi]-Y[cyi]);
			if (!visited[nxi][nyi][4])
				ans++;
			if (!visited[cxi][cyi][dir])
				ans += distMoved-1;
			visited[cxi][cyi][dir] = visited[nxi][nyi][(dir+2)%4] = visited[nxi][nyi][4] = true;
			cxi = nxi;
			cyi = nyi;
		}
		printf("%d\n", ans);
	}
	return 0;
}
