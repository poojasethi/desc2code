#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include <math.h>
#include <string>
#include <algorithm>
#include <sstream>
#include <fstream>
#include <map>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <utility>
#include <iomanip>





#define LL long long
#define rep(i,a,n) for(LL i = a;i<n;i++)
#define S(a) scanf("%d",&a)
#define P(a) printf("%d\n",a)
#define PS(s) printf(s)
#define SLL(a) scanf("%lld",&a)
#define PLL(a) printf("%lld\n",a)


#define II int


#define MOD 1000000007      
#define MAT_SIZE 4

void copy_mat(II A[][MAT_SIZE],II B[][MAT_SIZE])
{
	rep(i,0,MAT_SIZE)
	{
		rep(j,0,MAT_SIZE)
		{
			A[i][j] = B[i][j];
		}
	}
}
void copy_matd(II **A,II **B)
{
	rep(i,0,MAT_SIZE)
	{
		rep(j,0,MAT_SIZE)
		{
			A[i][j] = B[i][j];
		}
	}
}
void print_mat(II A[][MAT_SIZE])
{
	rep(i,0,MAT_SIZE)
	{
		rep(j,0,MAT_SIZE)
		{
			printf("%lld\t",(LL)(A[i][j]));
		}
		printf("\n");
	}
	printf("\n");
}
II temp[MAT_SIZE][MAT_SIZE];

void mat_mult(II A[][MAT_SIZE],II B[][MAT_SIZE])
{
	
	//for each coulumn in B 
	rep(i,0,MAT_SIZE)
	{
		//in B[][i]
		//for each row in A
		
		rep(j,0,MAT_SIZE)
		{
			//in A[j][]
			LL sum = 0;
			rep(k,0,MAT_SIZE)
			{
				sum = (sum + (LL)A[j][k]*B[k][i]);
				if(sum>=MOD) sum %= MOD;
			}
			temp[j][i] = sum;
		}
	}
	copy_mat(A,temp);

}
II stored[51][MAT_SIZE][MAT_SIZE];
using namespace std;
void mat_pow(II powered[][MAT_SIZE],II n)
{
	copy_mat(powered,stored[n]);
}

void build_pow(II A[][MAT_SIZE])
{
	II temp[MAT_SIZE][MAT_SIZE];
	copy_mat(temp,A);
	rep(i,0,51)
	{
		copy_mat(stored[i],temp);
		mat_mult(temp,temp);
	}
}

II ans(LL n,II starter[][MAT_SIZE])
{

	if(n==1||n==0) return 0;
	if(n==2) return 5;
	n -= 2;
	II formula[MAT_SIZE][MAT_SIZE] = 
    {
    	{1,1,1,0},
    	{1,0,0,0},
    	{0,0,1,1},
    	{0,0,1,0}
    };
	II ones[MAT_SIZE][MAT_SIZE] = 
    {
    	{1,0,0,0},
    	{0,1,0,0},
    	{0,0,1,0},
    	{0,0,0,1}
    };
    II counter=0;
	while(n)
	{
		if(n&1) mat_mult(ones,formula);
		n=(n >> 1);
		counter++;
		mat_pow(formula,counter);
		//mat_mult(formula,formula);
		//PS("formula sqd is\n");
		//print_mat(formula);
	}
	//PS("the final matrix is\n");
	//print_mat(ones);
	mat_mult(ones,starter);
	//PS("the ans matrix is\n");
	//print_mat(ones);
	return ones[0][0];
}
int main()
{
	II formula[MAT_SIZE][MAT_SIZE] = 
    {
    	{1,1,1,0},
    	{1,0,0,0},
    	{0,0,1,1},
    	{0,0,1,0}
    };
	build_pow(formula);
	
    II starter[MAT_SIZE][MAT_SIZE] = 
    {
    	{5,1,1,0},
    	{0,0,0,0},
    	{13,0,1,1},
    	{8,0,1,0}
    };
 
    II test;
    S(test);

    while(test--)
    {
    	LL n;
    	SLL(n);
    	P(ans(n,starter));    	
    }
    
    
    
	return 0;
}



