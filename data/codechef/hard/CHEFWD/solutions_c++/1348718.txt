#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
using namespace std;
#define MOD 1000000007
#define ll long long

#define MAXBUF 1500000

char *fstart;
char buf[MAXBUF];
char outbuf[MAXBUF];
int outat;
const int sz = sizeof(int)*16;

struct node{
    int a[16];
};

typedef struct node Node;

Node* store[55];

template <class T> inline void GETNUM(T& n){
     /* for skipping whitespaces - code */
    while (*fstart != 0 && !('0' <= *fstart && *fstart <= '9'))
        fstart++;
    n=0;
    while ('0' <= *fstart && *fstart <= '9')
        n = n*10 + *fstart-'0', ++fstart;
}

void take_input() { // Take input using fast I/O
    int sz=fread(buf, sizeof(char), MAXBUF, stdin);
    buf[sz]=0;
    fstart=buf;
    outat=0;
}

inline void outc(char c){
    outbuf[outat++] = c;
}

template <class T> inline void outnum(T x) {
    char s[100];
    int at = 0;
    do{
        s[at++] = x%10;
        x/=10;
    }
    while(x>0);
    for (int i = at-1;i>=0;--i)
        outbuf[outat++] = s[i]+'0';
}

void flushoutbuf() {
    fwrite(outbuf,sizeof(char),outat, stdout);
    outat = 0;
}

int calc(ll n){
    int an[16] = {1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1};
    int *T, K[16];
    ll tmp;
    int i, j, k, t, count = 0;
    int a[4] = {96,44,18,5};
    --n;
    ll temp = 1, test;
    while(n){
        if( temp & n){
            n -= temp;
            T = store[count]->a;            //using precomputed matrices
            for( i = 0; i < 4; ++i){
                t = i<<2;
                for( j = 0; j < 4; ++j){
                    test = 0;
                    for( k = 0; k < 4; ++k){
                        tmp = an[t+k];
                        test += tmp*T[4*k+j];
                    }
                    K[t+j] = test%MOD;
                }
            }
            memcpy(an, K, sz);
        }
        temp <<= 1;
        ++count;
    }
    int ans = 0;
    for( int i = 0; i < 4; ++i){
        tmp = an[i];
        ans = (ans + (ll)(tmp*a[i])%MOD)%MOD;
    }
    return (ans+MOD)%MOD;
}

void pre_compute(){
    int n = 55;
    int F[16] = {2,1,-2,-1,1,0,0,0,0,1,0,0,0,0,1,0};
    int K[16];
    int i, j, k, t;
    ll e, test;
    for( int l = 0; l < n; ++l){
        Node* tmp = (Node*)malloc(sizeof(Node));
        memcpy(tmp->a, F, sz);
        store[l] = tmp;
        for( i = 0; i < 4; ++i){
            t = i<<2;
            for( j = 0; j < 4; ++j){
                test = 0;
                for( k = 0; k < 4; ++k){
                    e = F[t+k];
                    test += e*F[4*k+j];
                }
                K[t+j] = test%MOD;
            }
        }
        memcpy(F, K, sz);
    }
}

int main(){
    pre_compute();
    take_input();
    int c;
    ll n;
    GETNUM(c);
    while(c--){
        GETNUM(n);
        if(n < 6){
            switch(n){
                case 1: outnum(0); break;
                case 2: outnum(5); break;
                case 3: outnum(18); break;
                case 4: outnum(44); break;
                case 5: outnum(96); break;
            }
        }
        else
            outnum(calc(n-4));
        outc('\n');
    }
    flushoutbuf();
    return 0;
}
