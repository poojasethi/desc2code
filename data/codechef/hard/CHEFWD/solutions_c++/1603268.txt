    #include <cstdlib>
    #include <cctype>
    #include <cstdio>
    #include <cassert>
    #include <ctime>
    #include <cstring>
    #define int64 long long
    const int M = (int) 1e9 + 7;
    const int64 MAXN = (int64) 1e15;
    const int64 K = (int64) 1e12;
    int64 tmp_c[4][4];
    void mult(int ** a, int ** b, int ** c) {
    memset(tmp_c, 0, sizeof(tmp_c));
    for (int k = 0; k < 4; ++k)
    for (int i = 0; i < 4; ++i) {
    const int * curb = b[k];
    int64 * curc = tmp_c[i];
    int64 tmp = a[i][k];
    if (tmp == 0) continue;
    for (int j = 0; j < 4; ++j)
    (*(curc++)) += tmp * (*(curb++));
    }
    for (int i = 0; i < 4; ++i)
    for (int j = 0; j < 4; ++j)
    c[i][j] = tmp_c[i][j] % M;
    }
    int ** p, ** q, ** res, ** cur, ** tmp[MAXN / K + 1];
     
    void id(int ** a) {
    for (int i = 0; i < 4; ++i)
    for (int j = 0; j < 4; ++j)
    a[i][j] = (int) (i == j);
    }
     
    void cpy(int ** a, int ** b) {
    for (int i = 0; i < 4; ++i)
    for (int j = 0; j < 4; ++j)
    a[i][j] = b[i][j];
    }
    void power(int64 e) {
    static bool first = false;
    int64 ie = e % K;
    if (!first)
    ie = K;
    id(res);
    for (int i = 40; i >= 0; --i) {
    mult(res, res, res);
    if ((ie >> i) & 1)
    mult(res, p, res);
    }
    if (first)
    mult(res, tmp[e / K], res);
    first = true;
    }
    int t;
    int64 n;
    char s[20], str[100000];
     
    int64 read() {
    char * cur = s;
    gets(cur);
    int64 res = 0;
    while (*cur)
    res = res * 10 + (*(cur++) - '0');
    return res;
    }
     
    int** matrix() {
    int** a = (int**) malloc(4 * sizeof(int*));
    for (int i = 0; i < 4; ++i) {
    a[i] = (int*) malloc(4 * sizeof(int));
    for (int j = 0; j < 4; ++j)
    a[i][j] = 0;
    }
    return a;
    }
    int main() {
    double start = clock();
    p = matrix();
    q = matrix();
    res = matrix();
    cur = matrix();
    q[0][0] = 1, q[1][0] = 2, q[3][0] = 5;
    p[0][1] = p[1][0] = p[1][1] = p[2][3] = p[3][2] = p[3][3] = 1, p[3][0] = 3, p[3][1] = 5;
    id(cur);
    power(K);
    for (int i = 0; i * K <= MAXN; ++i) {
    tmp[i] = matrix();
    cpy(tmp[i], cur);
    mult(cur, res, cur);
    }
    scanf("%d\n", &t);
    char * cur = str;
    for (int it = 0; it < t; ++it) {
    n = read();
    power(n - 2);
    mult(res, q, res);
    cur += sprintf(cur, "%d\n", (n < 2) ? 0 : res[3][0]);
    }
    printf("%s", str);
    fprintf(stderr, "%.2lf\n", (clock() - start) / CLOCKS_PER_SEC);
    return 0;
    } 
