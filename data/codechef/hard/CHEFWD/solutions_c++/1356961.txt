using namespace std;

#include <iostream>
#include <cstring>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <set>
const int MOD = 1000000007;
// BruteForce1.
long long F(int i) {
	if (i==0) return 1;
	if (i<=0) return 0;
	return F(i-1) + F(i-2);
}
// BruteForce2.
int calc1(int n) {
	int ret = 0;
	for (int i=1;i<n;i++) {
		ret = (ret + F(i) * F(n+3-i))%MOD;
	}
	return ret;
}
// BruteForce3.
int calc2(int n) {
	int ret = 0;
	for (int i=1;i<n;i++) {
		ret = (ret + F(i) * F(n-i)) % MOD;
	}
	return ret;
}
unsigned long long A[4][4] = {{2, 1, MOD-2, MOD-1}, {1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}};
unsigned long long B[70][4][4];
unsigned long long T[4][4];
unsigned long long I[4][4];
unsigned long long S[4] = {10, 4, 1, 0};
unsigned long long L[4];
unsigned long long tC;
void mul(int t) {
	for (int i=0;i<4;i++) {
		for (int j=0;j<4;j++) {
			tC = 0;
			for (int k=0;k<4;k++) {
				tC = (tC + B[t-1][i][k] * B[t-1][k][j]);
			}
			B[t][i][j] = (tC)%MOD;
		}
	}
}
void mul2(int J) {
	for (int i=0;i<4;i++) {
		for (int j=0;j<4;j++) {
			tC = 0;
			for (int k=0;k<4;k++) {
				tC = (tC + I[i][k] * B[J][k][j]);
			}
			T[i][j] = (tC)%MOD;
		}
	}
	memcpy(I, T, sizeof(T));
}
void initB() {
	for (int i=0;i<4;i++) {
		for (int j=0;j<4;j++) {
			B[0][i][j] = A[i][j];
		}
	}
}
void init() {
	initB();
	for (int i=1;i<70;i++) {
		mul(i);
	}
}
void initI() {
	memset(I, 0, sizeof(I));
	for (int i=0;i<4;i++) {
		I[i][i] = 1;
	}
}
int main () {
	init();
	int tc;
	scanf("%d", &tc);
	while(tc--) {
		long long n;
		scanf("%lld", &n);
		// cout << calc1(n) << endl;
		int ret = 0;
		if (n==1) {
			ret = 0;
		} else if(n==2) {
			ret = 5;
		} else if(n==3) {
			ret = 18;
		} else if(n==4) {
			ret = 44;
		} else {
			initI();
			n-=4;
			int J = 0;
			while(n) {
				if (n&1) mul2(J);
				n>>=1;
				J++;
			}/*
			for (int i=0;i<4;i++) {
				unsigned long long p = 0;
				for (int j=0;j<4;j++) {
					p = (p + I[i][j] * S[j]);
				}
				L[i] = p%MOD;
			}
			unsigned long long vN = L[0];
			unsigned long long vN1 = 2 * L[0] + L[1] + (MOD- 2) * L[2] + (MOD-1) * L[3];
			vN1%=MOD;
			unsigned long long fN1 = L[0] + (MOD-1) * L[1] + (MOD-1) * L[2];
			fN1%=MOD;
			unsigned long long sum = vN + 2 * vN1 + (MOD- 2) * fN1;
			sum = (sum)%MOD;
			ret = sum;*/
			ret = ((I[0][0]*44)%MOD + (I[0][1]*18)%MOD + (I[0][2]*5)%MOD)%MOD;
		}
		printf("%d\n", ret);
	}
	return 0;
}