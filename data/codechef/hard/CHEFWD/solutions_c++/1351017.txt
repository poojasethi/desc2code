#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <map>
#include <ctime>
#include <utility>
#include <climits>
#include <cfloat>
#include <cassert>

using namespace std;
#define readint(n) scanf("%d",&n);
#define readll(n) scanf("%lld",&n);
#define readchar(n) scanf("%c",&n);
#define readf(n) scanf("%f",&n);
#define readd(n) scanf("%lf",&n);
#define readstr(s) scanf("%s",&s);
#define init(mem) memset(mem,0,sizeof(mem));
int pabs(int n){return (n>0?n:-n);}
int hcf(int a,int b){if(b==0){return a;} else{return hcf(b,a%b);}}

#define db
#define ull unsigned long long int
#define mod 1000000007

class mat{
public:
	mat(){}
	ull m[2][2];

	mat mult(mat m1){
		mat ret;
		for(int i=0;i<2;i++){
			for(int j=0;j<2;j++){
				ull s=0;
				for(int k=0;k<2;k++){
					s=(s+(m[i][k]*m1.m[k][j]))%mod;
				}
				ret.m[i][j]=s;
			}
		}
		return ret;
	}
};


mat ppow(mat m1,ull p){
	if(p<=1){
		return m1;
	}
	else{
		if(p%2==0){
			mat r=ppow(m1,p/2);
			return r.mult(r);
		}
		else{
			return m1.mult(ppow(m1,p-1));
		}
	}
}

mat base;
ull fib(ull n){
    if(n<=2){
        return n;
    }

    mat ret=ppow(base,n-1);
    return (ret.m[0][0]+ret.m[0][1])%mod;
}


int main(){
	base.m[0][0]=1;
	base.m[0][1]=1;
	base.m[1][0]=1;
	base.m[1][1]=0;
    int t;

	ull fibmem[11],n,val,fac=400000003;
    readint(t);

    while(t--){
        scanf("%llu",&n);
        if(n<=5){
            if(n<=1)printf("0\n");
            else if(n==2)printf("5\n");
            else if(n==3)printf("18\n");
            else if(n==4)printf("44\n");
            else if(n==5)printf("96\n");
            continue;
        }

		fibmem[0]=fib(n-5);
		fibmem[1]=fib(n-4);
		for(int i=2;i<=10;i++){
			fibmem[i]=(fibmem[i-1]+fibmem[i-2])%mod;
		}
        val=(fibmem[8]+fibmem[10])%mod;
        val=(((n-1)%mod)*val)%mod;
		val=(val+fibmem[0]);
        val=(val>fibmem[6])?(val-fibmem[6]):(mod+val-fibmem[6]);
        val=(val*fac)%mod;

        printf("%llu\n",val);

    }
    return 0;
}
