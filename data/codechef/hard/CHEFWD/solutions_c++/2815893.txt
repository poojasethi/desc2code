/*
author :  R Anirudh 
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;
#define SIZE(A) ((int)(A.size()))
#define MSET(A,x) memset(A,x,sizeof(A));
#define FILL(A,x) fill(A.begin(),A.end(),x)
#define REP(i,N) for(int i=0;i<(int)(N);i++)
#define FOR(i,a,b) for(int i=(int)(a);i<(int)(b);i++)
#define REV(i,a,b) for(int i=(int)(a);i>=(int)(b);i--)
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define ALL(x) x.begin(),x.end()
#define INF (INT_MAX/2)
#define LLINF (LONG_LONG_MAX/2LL)
#define EPS 1e-12
#define GI ({int t;scanf("%d",&t);t;})
#define GL ({long long t;scanf("%lld",&t);t;})
#define GF ({double t;scanf("%lf",&t);t;})
#define bitCount(n) __builtin_popcount(n)
#define MOD 1000000007
#define MAX 1000005
#define FIX(a) (((a)%MOD+MOD)%MOD)
typedef long long LL;
typedef unsigned long long ULL;
#define pb push_back
typedef pair< LL, LL > pLL; // pair of long long 
typedef pair< LL, pLL > edge;
 
 
unsigned long long a[4][4] = {{1,1,0,0}, {1,0,0,0}, {1,0,1,1},{1,0,1,0}};
 
void print(unsigned long long arr[4][4])
{
for (int i = 0; i < 4; i++)
{
for (int j = 0; j < 4; j++)
printf("%llu ", arr[i][j]);
printf("\n");
}
}
 
void powarr(unsigned long long b, unsigned long long x[4][4])
{
x[0][0] = x[1][1] = x[2][2] = x[3][3] = 1;
x[0][1] = x[0][2] = x[0][3] = x[1][0] = x[1][2] = x[1][3] = x[2][0] = x[2][1] = x[2][3] = x[3][0] = x[3][1] = x[3][2] = 0;
unsigned long long y[4][4], t[4][4];
memcpy(y, a, sizeof(y));
while (b > 0)
{
if (b%2 == 1)
{
memcpy(t, x, sizeof(t));
x[0][0] = ((t[0][0]*y[0][0])%MOD + (t[0][1]*y[1][0])%MOD) % MOD;
x[0][1] = ((t[0][0]*y[0][1])%MOD + (t[0][1]*y[1][1])%MOD) % MOD;
x[1][0] = x[0][1];
x[1][1] = ((t[1][0]*y[0][1])%MOD + (t[1][1]*y[1][1])%MOD) % MOD;
x[2][0] = ((t[2][0]*y[0][0])%MOD + (t[2][1]*y[1][0])%MOD + (t[2][2]*y[2][0])%MOD + (t[2][3]*y[3][0])%MOD) % MOD;
x[2][1] = ((t[2][0]*y[0][1])%MOD + (t[2][1]*y[1][1])%MOD + (t[2][2]*y[2][1])%MOD + (t[2][3]*y[3][1])%MOD) % MOD;
x[2][2] = x[0][0];
x[2][3] = x[0][1];
x[3][0] = ((t[3][0]*y[0][0])%MOD + (t[3][1]*y[1][0])%MOD + (t[3][2]*y[2][0])%MOD + (t[3][3]*y[3][0])%MOD) % MOD;
x[3][1] = ((t[3][0]*y[0][1])%MOD + (t[3][1]*y[1][1])%MOD + (t[3][2]*y[2][1])%MOD + (t[3][3]*y[3][1])%MOD) % MOD;
x[3][2] = x[0][1];
x[3][3] = x[1][1];
}
memcpy(t, y, sizeof(t));
y[0][0] = ((t[0][0]*t[0][0])%MOD + (t[0][1]*t[1][0])%MOD) % MOD;
y[0][1] = ((t[0][0]*t[0][1])%MOD + (t[0][1]*t[1][1])%MOD) % MOD;
y[1][0] = y[0][1];
y[1][1] = ((t[1][0]*t[0][1])%MOD + (t[1][1]*t[1][1])%MOD) % MOD;
y[2][0] = ((t[2][0]*t[0][0])%MOD + (t[2][1]*t[1][0])%MOD + (t[2][2]*t[2][0])%MOD + (t[2][3]*t[3][0])%MOD) % MOD;
y[2][1] = ((t[2][0]*t[0][1])%MOD + (t[2][1]*t[1][1])%MOD + (t[2][2]*t[2][1])%MOD + (t[2][3]*t[3][1])%MOD) % MOD;
y[2][2] = y[0][0];
y[2][3] = y[0][1];
y[3][0] = ((t[3][0]*t[0][0])%MOD + (t[3][1]*t[1][0])%MOD + (t[3][2]*t[2][0])%MOD + (t[3][3]*t[3][0])%MOD) % MOD;
y[3][1] = ((t[3][0]*t[0][1])%MOD + (t[3][1]*t[1][1])%MOD + (t[3][2]*t[2][1])%MOD + (t[3][3]*t[3][1])%MOD) % MOD;
y[3][2] = y[0][1];
y[3][3] = y[1][1];
b = b >> 1;
}
}
 
int main()
{
int T;
scanf("%d", &T);
unsigned long long arr[4][4], N, res;
for (int t = 0; t < T; t++)
{
scanf("%llu", &N);
if (N == 1)
res = 0;
else if (N == 2)
res = 5;
else
{
powarr(N-2, arr);
res = (5*arr[0][0] + 8*arr[2][0] + 5*arr[3][0]) % MOD;

}
printf("%llu\n", res);
}
return 0;
}
