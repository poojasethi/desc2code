#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cstring>
#include <string>
#include <map>
#include <queue>
#include <sstream>
#include <numeric>
#include <functional>
#include <set>
#include <cmath>
#include <stack>
#include <fstream>
#include <cassert>
#ifdef HOME_PC
#include <ctime>
#endif
using namespace std;
 
#pragma comment(linker,"/stack:16000000")
#pragma warning (disable : 4996)
 
#define ALL(v) v.begin(),v.end()
#define SZ(v) (int)v.size()
#define mset(A,x) memset((A),(x),sizeof(A))
#define FOR(i,start,N) for(int i=(start);i<(N);++i)
#define FORSZ(i,start,v) FOR(i,start,SZ(v))
#define REPSZ(i,v) FORSZ(i,0,v)
#define FORE(i,start,N) FOR(i,start,N+1)
#define make_unique(v) v.resize(unique(ALL(v))-v.begin())
#define debug(x) cout<<#x<<" = "<<x<<endl;
#define adebug(A,N) FOR(i,0,N) cout<<#A<<"["<<i<<"] = "<<A[i]<<endl;
#define adebug2d(a,n,m) FOR(i,0,n) { FOR(j,0,m) { cout<<a[i][j]<<" ";} cout<<endl;}
#define vdebug(v) REPSZ(i,v) cout<<#v<<"["<<i<<"] = "<<v[i]<<endl;
#define selfx(x,f,a) x = f(x,a)
#define sqr(x) ((x)*(x))
 
 
typedef pair<int,int> pii;
typedef long long i64;
typedef vector<int> VI; typedef vector< vector<int> > VVI;
typedef vector<string> VS;
 
const int inf = 1<<25;
const double eps = 1e-9;
 
const int MAXN = 101000;
int prime[MAXN];
 
 
 
int main()
{
#ifdef HOME_PC
	//freopen ("input.txt","r",stdin);
	//freopen ("in.txt","r",stdin);
	//freopen ("output.txt","w",stdout);
#else
	//freopen ("input.txt","r",stdin);
	//freopen ("output.txt","w",stdout);
#endif
 
	FOR(i,0,MAXN)
		prime[i] = i;
 
	VI primes;
 
	FOR(i,2,MAXN)
		if(prime[i] == i)
		{
			for(int j = i+i; j < MAXN; j+=i)
				prime[j] = i;
			primes.push_back(i);
		}
 
	vector< vector<pii> >partitions(primes.size()); // partitions of all p-1
	
	
	REPSZ(i,primes)
	{
		int n = primes[i] - 1;
 
		while(n > 1)
		{
			int p = prime[n];
			int deg = 0;
			while(n%p == 0)
				++deg, n/=p;
			partitions[i].push_back(make_pair(lower_bound(ALL(primes),p)-primes.begin(),deg));			
		}
	}
 
 
	int tt;
	scanf("%d",&tt);
	for(int cas = 1;cas<=tt;++cas)
	{
		int m;
		scanf("%d",&m);
		i64 stepsPassed = 0;
		vector<i64> degrees(primes.size(),0);
		VI birth(primes.size(),0);
		FOR(i,0,m)
		{
			int p,k;
			scanf("%d %d",&p,&k);
			degrees[lower_bound(ALL(primes),p)-primes.begin()] = k;
		}
		//degrees.assign(primes.size(),1000000000);
		for(int i = degrees.size() - 1; i >= 0; --i)
		{
			if(degrees[i])
			{
				REPSZ(j,partitions[i])
				{
					int pid = partitions[i][j].first;
					if(!degrees[pid])
						birth[pid] = birth[i] + 1;
					degrees[pid] += degrees[i] * partitions[i][j].second;
				}
				if(degrees[i] + birth[i] > stepsPassed)
					stepsPassed = degrees[i] + birth[i];
			}
		}
		printf("%lld\n",stepsPassed);
	}
#ifdef HOME_PC
	cerr<<endl<<"Execution time = "<<clock()<<" ms"<<endl;
#endif
	return 0;
}
 
 
