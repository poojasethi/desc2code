/*
 * =====================================================================================
 *
 *       Filename:  CAREFUL.cpp
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  2012??02??20?? 18Ê±10??24??
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Terence (), thang@c2micro.com
 *        Company:  
 *
 * =====================================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

#define N 100000

int fac[N], totient[N], step[N];
void precompute()
{
  memset(fac, 0, sizeof(fac));
  fac[1] = 1; totient[1] = 1; step[1] = 0;
  for(int i = 2; i < N; i++) {
    if(fac[i]) {
      int j = i/fac[i];
      if(fac[j] == fac[i]) totient[i] = totient[j] * fac[i];
      else totient[i] = totient[j] * (fac[i]-1);
      step[i] = step[totient[i]]+1;
    } else {
      fac[i] = i; totient[i] = i-1; step[i] = step[i-1]+1;
      if(i < 32768)
        for(int j = i*i; j < N; j+=i)
          if(!fac[j]) fac[j] = i;
    }
  }
}

long long EulerStep(int n, int p[], int r[])
{
  if(!n) return 0;
  long long c = 0;
  bool even = false;
  for(int i = 0; i < n; i++) {
    if(p[i] == 2) {
      c += (long long)step[p[i]] * (long long)r[i];
      even = true;
    } else {
      c += (long long)(step[p[i]]-1) * (long long)r[i];
    }
  }
  if(!even) ++c;
  return c;
}

int n, p[N], r[N];
#if 0
void selftest()
{
  int err = 0;
  for(int k = 1; k < N; k++) {
    int i = k;
    n = 0;
    while(i > 1) {
      p[n] = fac[i]; r[n] = 0;
      while(fac[i] == p[n]) {
        i /= p[n]; ++r[n];
      }
      ++n;
    }
    long long c = EulerStep(n, p, r);
    if(c != step[k]) {
      printf("%d: expected %d got %lld\n", k, step[k], c);
      err++;
    }
  }
  if(err) printf("%d/%d failed\n", err, N-1);
  else printf("self test pass\n");
}
#endif

int main()
{
  int t;
  precompute();
  //selftest();
  scanf("%d", &t);
  while(t--) {
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
      scanf("%d%d", &p[i], &r[i]);
    printf("%lld\n", EulerStep(n, p, r));
  }
  return 0;
}

