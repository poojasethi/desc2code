#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <complex>

#define pb push_back
#define mp make_pair
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define tr(c, i) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define rtr(c, i) for (typeof((c).rbegin()) i = (c).rbegin(); i != (c).rend(); --i)
#define contains(c, x) ((c).find(x) != (c).end())
#define Contains(c, x) (find(all(c), x) != (c).end())
#define REP(i, a, b) for (int i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, (n))
#define To_String to_string< char,std::char_traits<char>,std::allocator<char> >

typedef long long ll;
typedef unsigned long long ull;
using namespace std;

const int N = 100010;
int C[N];
vector<int> primes;
map<int, int> f[N];
ll a[N];
int main()
{
	ios_base::sync_with_stdio(0);

	for (int i=2; i*i<N; ++i) if(!C[i])
		for (int j=i+i; j<N; j+=i) C[j]=1;
	REP(i, 2, N) if (!C[i]) primes.pb(i);
	rep(i, primes.size()) {
		int n = primes[i]-1;
		map<int, int> t;
		for (int j=2; j*j<=n; ++j) {
			int c = 0;
			while (n % j == 0) { c++; n /= j; }
			if (c) t[j] = c;
		}
		if (n > 1) t[n] = 1;
		f[primes[i]-1] = t;
	}

	int T;
	cin >> T;
	while (T--) {
		memset(a, 0, sizeof(a));
		int two = 0;
		int m; cin >> m;
		rep(i, m) {
			int p, k;
			cin >> p >> k;
			a[p] = k;
			if (p == 2) two = 1;
		}
		for (int i=primes.size()-1; i>0; --i) {
			if (a[primes[i]]) {
				int n = primes[i]-1;
				tr(f[n], j) a[j->first] += j->second * a[primes[i]];
			}
		}
		cout << a[2] + !two << endl;
	}
	return 0;
}
