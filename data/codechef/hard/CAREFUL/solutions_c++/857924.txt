#include<stdio.h>
#include<string.h>
#include<math.h>
#include<ctype.h>
#include<stdlib.h>
#include<time.h>
#include<assert.h>

#include<vector>
#include<queue>
#include<stack>
#include<map>
#include<set>
#include<iostream>
#include<algorithm>
#include<string>

using namespace std;

#define FOR(i,n) for(int i=0;i<(n);++i)
#define REP(i,a,b) for(int i=(a);i<=(b);++i)
#define CLR(a,x) memset(a,(x),sizeof(a))

int GET_INT(){int ret; scanf("%d",&ret); return ret;}

#define INT GET_INT()

typedef long long LL;
typedef pair<int,int> pii;

const int MAX = 100000;

int S[MAX+2],R[MAX+2];
int is[MAX+2];

int main()
{
    is[0]=is[1]=1;

    for(int i=2;i*i<=MAX;++i) if(!is[i])
        for(int j=i*i;j<=MAX;j+=i)
            is[j] = 1;

    S[2] = 0; R[2] = 1;

    REP(i,3,MAX) if(!is[i])
    {

        int x=i-1;
        S[i] = 0;
        R[i] = 0;

        for(int j=2;j*j<=x;++j)
        {
            if(x%j==0)
            {
                int cnt=0;
                while(x%j==0)
                {
                    x/=j;
                    ++cnt;
                }

                S[i] = max(S[i],S[j]+(cnt-1));
                R[i] += R[j]*cnt;
            }
        }

        if(x>1)
        {
            S[i] = max(S[i], S[x]);
            R[i] += R[x];
        }

        ++S[i];
    }

    int T=INT;
    while(T--)
    {
        int m=INT;

        int maxS=0;
        LL totR=0;
        int has2=0;

        while(m--)
        {
            int p,k; p=INT;k=INT;

            if(p==2&&k>0)
                has2=1;

            maxS = max(maxS,S[p]+k-1);
            totR += LL(R[p])*LL(k);
        }

        totR -= (maxS-1);

        cout<<maxS+totR-has2<<"\n";
    }

    return 0;
}
