//---------------------------JUGNU: LET YOUR LIGHT SHINE---------------------------//
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define pf push_front
#define sz size
#define mk make_pair
#define ln length
#define vt(a) vector <ll> a
#define st(a) set <ll> a
#define sti(a) set <ll>::iterator a
#define fr(i,a,b) for(i=a;i<b;i++)
#define fre(i,a,b) for(i=a;i<=b;i++)
#define frr(i,a,b) for(i=a;i>=b;i--)
#define sc(a) scanf("%d",&a)
#define sm(a,b) scanf("%d%d", &a, &b)
#define pr(a) printf("%d\n", a)
#define pm(a,b) printf("%d %d\n", a, b)
#define cn(a) cin >> a
#define ct(a) cout << a << endl
#define isset(x,i) ((x>>i)&1)
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
using namespace std;
int cumulative[100005];
vector<int> cnt[100005];
int main()
{
	int i, j, t, n, m, k, l, r, mini, maxi, temp, flag, result;
	sc(t);
	while(t--)
	{
		flag = 0;
		sc(n);
		fr(i, 0, n)
			cnt[i].clear();
		sc(k);
		cumulative[0] = k%n;
		cnt[k%n].pb(0);
		fr(i, 1, n)
		{
			sc(k);
			cumulative[i] = (cumulative[i-1] + k%n)%n;
			cnt[cumulative[i]].pb(i);
			if(cnt[cumulative[i]].sz()>=2 && flag==0)
			{
				flag = 1;
				result = cumulative[i];
			}
		}
		if(cnt[0].sz()>0)
		{
			pr(cnt[0][0]+1);
			fre(i, 0, cnt[0][0])
				printf("%d ", i+1);
			printf("\n");
		}
		else
		{
			pr(cnt[result][1] - cnt[result][0]);
			fre(i, cnt[result][0]+1, cnt[result][1])
				printf("%d ", i+1);
			printf("\n");
		}
	}
return 0;
}
