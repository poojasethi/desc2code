#include<bits/stdc++.h>
using namespace std;
#define ull long long int
#define  in(a) scanf("%lld",&a)
#define  out(a) printf("%lld ",a)
#define  loop(i,n) for(int i=0;i<n;i++)
#define  br printf("\n");
#define max(a,b)  ((a>b)?a:b)
#define min(a,b)  ((a<b)?a:b)



ull arr[100005];
ull ans[100005];
ull n,len,a,b;

//Recursive implimentation
bool ispsbl(ull m,ull sums)
{   
   
   if(m==0)
    {//printf("0 -- %lld\n",sums);
     return 0;}

   ull this_sums=sums+arr[m];
   //printf("%lld-- %lld\n",m,this_sums);
   //getchar();
   if((this_sums%n)==0)
   {//printf("divisible %lld %lld\n",this_sums,m);
   ans[len++]=m;return 1;}
    
   else
   {    //printf("else\n");
        ull f=len;
        ans[len++]=m;
        if(ispsbl(m-1,this_sums))
          return 1;
        len=f;
        if(ispsbl(m-1,this_sums-arr[m]))
        return 1;
  
         
   }

   return 0;
}

//using pigeonhole principle
bool pigeonhole()
{
  ull d[n+2];
  ull rem[100005]={0};
  d[0]=0;
  loop(i,n)
  {d[i+1]=d[i]+arr[i+1]; rem[i+1]=-1; }

  loop(i,n)
  { //
     ull r=(d[i+1])%n;
    //  printf("%lld\n",r);      
    if(rem[r]!=-1)
     {a=rem[r];b=i+1;return 1;}
    else
     rem[r]=i+1;
  }
  
  return 0;
}


int main()
{
  ull t;
  in(t);
  while(t--)
  {
    in(n);
   loop(i,n)
    in(arr[i+1]);
   len=0;
   if( pigeonhole())
   {
     out(b-a); br;
     for(ull i=a+1;i<=b;i++)
     out(i); 
      
   }  
  else
    printf("%d",-1);
    
   br;
  }
  return 0;
}





