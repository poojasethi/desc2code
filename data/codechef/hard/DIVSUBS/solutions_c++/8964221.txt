#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>
#include <map>

inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }

  return false;
}

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadll(long long* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }

  if(neg)
	  *a = -*a;
}

inline void readString(char *s)
{
  *s = getchar();
  while(*s == '\r' || *s == '\n' || *s == -1)
    *s = getchar();

  while(*s != '\r' && *s != '\n' && *s != -1)
  {
    ++s;
    *s = getchar();
  }
  *s = '\0';
}

int N, K, M, Q, O, X, Y;
int T = 1;
int A[100000 + 1];
int P[100000 + 1]; // mapping of the remainder to the position, which indicates sum of elements from 1 to position (zero means no elements)

int main()
{

#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif

  fastread(&T);

  while(T--)
  {
    fastread(&N);

    for(int i = 1; i <= N; ++i)
    {
      fastread(A + i);
    }

    memset(P, 0xFF, sizeof(int) * N);
    int l = -1;
    int r = -1;

    int sum = 0;
    P[sum] = 0;
    for(int i = 1; i <= N; ++i)
    {
      sum = (A[i] + sum) % N;
      if(P[sum] != -1)
      {
        l = P[sum] + 1;
        r = i;
        break;
      }

      P[sum] = i;
    }
    printf("%d\n", r - l + 1);
    printf("%d", l);
    for(int k = (l + 1); k <= r; ++k)
      printf(" %d", k);
    printf("\n");
  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
