#include <iostream>
#include <fstream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cstring>
#include <string>
#include <cmath>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <functional>
#include <limits>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef pair<int,int> pii;
typedef vector<vector<int> > graph;

const double pi = acos(-1.0);

#define oned(a, x1, x2) { cout << #a << ":"; for(int _i = (x1); _i < (x2); _i++){ cout << " " << a[_i]; } cout << endl; }
#define twod(a, x1, x2, y1, y2) { cout << #a << ":" << endl; for(int _i = (x1); _i < (x2); _i++){ for(int _j = (y1); _j < (y2); _j++){ cout << (_j > y1 ? " " : "") << a[_i][_j]; } cout << endl; } }

#define mp make_pair
#define pb push_back
#define fst first
#define snd second

#define MAXN 2005

int n, a[MAXN], b[MAXN], mod = 1000000007, L[MAXN][MAXN], C[MAXN][MAXN], vis[MAXN], cyc[MAXN], ptr;
ll f[MAXN], t[MAXN], fact[MAXN], F[MAXN], B[MAXN][MAXN];

void solve() {
	ptr = 0;
	memset(vis,0,sizeof(vis));
	for(int i = 0; i < n; i++) {
		if(!vis[i]) {
			int u = i;
			int cnt = 0;
			do {
				cnt++;
				vis[u] = true;
				u = b[u];
			} while(u != i);
			cyc[ptr++] = 2*cnt;
		}
	}
	
	memset(f,0,sizeof(f));
	f[0] = 1;
	int s = 0;
	for(int i = 0; i < ptr; i++) {
		memset(t,0,sizeof(t));
		for(int p = 0; p <= cyc[i]; p++) {
			for(int q = 0; q <= s; q++) {
				t[p+q] = (t[p+q] + C[cyc[i]][p]*f[q]) % mod;
			}
		}
		s += cyc[i];
		memcpy(f,t,sizeof(t));
	}
	
	memset(F,0,sizeof(F));
	for(int i = 2*n; i >= 0; i--) {
		F[i] = (f[i] * fact[n-i]) % mod;
		for(int j = i+1; j <= 2*n; j++) {
			F[i] = (F[i] - F[j]*B[j][i]) % mod;
		}
		if(F[i] < 0) {
			F[i] += mod;
		}
	}
	
	printf("%d\n", (int)F[0]);
}

int main() {
	L[0][0] = L[1][0] = 1;
	C[0][0] = C[1][0] = 1;
	for(n = 2; n < MAXN; n++) {
		for(int k = 0; k < MAXN; k++) {
			L[n][k] = ((k?L[n-2][k-1]:0) + L[n-1][k]) % mod;
			C[n][k] = ((k?L[n-2][k-1]:0) + L[n][k]) % mod;
		}
	}
	
	fact[0] = 1;
	for(int i = 1; i < MAXN; i++) {
		fact[i] = (fact[i-1]*i) % mod;
	}
	
	B[0][0] = 1;
	for(int i = 1; i < MAXN; i++) {
		for(int j = 0; j < MAXN; j++) {
			B[i][j] = ((j?B[i-1][j-1]:0) + B[i-1][j]) % mod;
		}
	}
	
//	freopen("input.in", "r", stdin);
	int t; scanf("%d", &t);
	for(int i = 0; i < t; i++) {
		scanf("%d", &n);
		for(int j = 0; j < n; j++) {
			scanf("%d", a+j);
			a[j]--;
		}
		for(int j = 0; j < n; j++) {
			scanf("%d", &b[a[j]]);
			b[a[j]]--;
		}
		solve();
	}
}
