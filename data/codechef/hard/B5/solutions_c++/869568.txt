#include <cstdio>
#include <list>
#include <queue>
#include <memory.h>
#include <algorithm>
#include <cmath>

using namespace std;

#define MX 1001

int N, K, A[MX][MX], B[MX][MX];
int H[MX], from[MX], to[MX];
int n;

void input()
{
	scanf("%d%d", &N, &K);
	for(int i=0; i<N; i++)
		for(int j=0; j<N; j++)
			scanf("%d",&A[i][j]);
}

// Heap Sift Up
void siftUp(int heapIn)
{
	for(int i=heapIn; i && H[(i-1)/2] > H[i]; )
	{
		int t;
		int c=(i-1)/2;
		t=H[c], H[c]=H[i], H[i]=t;
		t=from[c], from[c]=from[i], from[i]=t;
		to[from[c]]=c, to[from[i]]=i;
		i=c;
	}
}

// Heap Sift Down
void siftDown(int heapIn)
{
	for(int i=heapIn; i<n/2; )
	{
		int c=i;
		if(H[i*2+1] < H[i])
			c=i*2+1;
		if(H[i*2+2] < H[c])
			c=i*2+2;
		if(c==i)
			break;

		int t;
		t=H[c], H[c]=H[i], H[i]=t;
		t=from[c], from[c]=from[i], from[i]=t;
		to[from[c]]=c, to[from[i]]=i;
		i=c;
	}
}

// Heap Insert
int insert(int element, int posIn)
{
	H[n] = element;
	from[n] = posIn;
	to[posIn] = n;
	siftUp(n);
	n++;
	return n;
}


// Heap delete
void remove(int posIn)
{
	if(to[posIn]<0 || to[posIn]>=K)
		return;
	n--;
	H[to[posIn]]=H[n];
	from[to[posIn]] = from[n];
	to[from[n]] = to[posIn];
	siftUp(to[posIn]);
	siftDown(to[posIn]);
}

int top()
{
	return H[0];
}

void clear()
{
	n=0;
}

void output()
{
	for(int i=0; i<N-K+1; i++)
	{
		for(int j=0; j<N-K+1; j++)
			printf("%d ", A[i][j]);
		printf("\n");
	}
}

void process()
{
	// Row Wise
	for(int i=0; i<N; i++)
	{
		clear();
		for(int j=0; j<K-1; j++)
			insert(A[i][j], j);

		for(int j=K-1; j<N; j++)
		{
			insert(A[i][j], j);
			B[i][j-K+1] = top();
			remove(j-K+1);
		}
	}

	// Column wise
	for(int j=0; j<N-K+1; j++)
	{
		clear();
		for(int i=0; i<K-1; i++)
			insert(B[i][j], i);

		for(int i=K-1; i<N; i++)
		{
			insert(B[i][j], i);
			A[i-K+1][j] = top();
			remove(i-K+1);
		}
	}
}

int main()
{
	input();
	process();
	output();
	return 0;
}
