///Brute force cost me 2 TLE's
//After refering :http://www.geeksforgeeks.org/maximum-of-all-subarrays-of-size-k/
// i was able to solve this 
#include<map>
#include<vector>
#include<cmath>
#include<stack>
#include<cstdio>
#include<queue>	
#include<deque>
#include<cstring>
#include<cstdlib>
#include<utility>
#include<iostream>
#include<algorithm>
using namespace std;
#define MOD 10000
#define pi(x) printf("%d",x)
#define pl(x) printf("%lld",x)
#define pn    printf("\n");
//#define si(x) scanf("%d",&x)
//#define sl(x) scanf("%lld",&x)
#define max(a,b) a>b?a:b
#define min(a,b) a>b?b:a
#define PII pair<long long,long long>
#define PI2 pair<PII,long long>
#define x first
#define y second
#define gc getchar_unlocked
 
void si(int &x)
{
    register int c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc())   
        {x = (x<<1) + (x<<3) + c - 48;}
}
#define pc(x) putchar_unlocked(x);
inline void put (int n)
{
    int N = n, rev, count = 0;
    rev = N;
    if (N == 0) { pc('0');pc(' '); return ;}
    while ((rev % 10) == 0) { count++; rev /= 10;}
    rev = 0;
    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}
    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
    while (count--) pc('0');
    pc(' ');
    return ;
}
int main()
{
	int n,k;
	si(n),si(k);
 
	int G[n+1][n+1];
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		si(G[i][j]);
	}
	for(int i=0;i<n;i++)
	{
		deque<int>Q;
		for(int j=0;j<k;j++)
		{
			while(!Q.empty() and G[i][j]<=G[i][Q.back()])
			Q.pop_back();
			Q.push_back(j);
		}
		int j;
		for(j=k;j<n;j++)
		{
			G[i][j-k]=G[i][Q.front()];
			while(!Q.empty() and G[i][j]<=G[i][Q.back()])
			Q.pop_back();
			while(!Q.empty() and Q.front()<=j-k)
			Q.pop_front();
				
			
			Q.push_back(j);
			
		}
		G[i][n-k]=G[i][Q.front()];
	}
	for(int i=0;i<n;i++)
	{
		deque<int>Q;
		for(int j=0;j<k;j++)
		{
			while(!Q.empty() and G[j][i]<=G[Q.back()][i])
			Q.pop_back();
			Q.push_back(j);
		}
		int j;
		for(j=k;j<n;j++)
		{
			G[j-k][i]=G[Q.front()][i];
			while(!Q.empty() and G[j][i]<=G[Q.back()][i])
			Q.pop_back();
			while(!Q.empty() and Q.front()<=j-k)
			Q.pop_front();
				
			
			Q.push_back(j);
			
		}
		G[n-k][i]=G[Q.front()][i];
	}
	for(int i=0;i<n-k+1;i++)
	{
		for(int j=0;j<n-k+1;j++){
		put(G[i][j]);
		}
		printf("\n");
	}
} 
