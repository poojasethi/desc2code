/**
* He who forgives and acknowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (multiset<uint>::iterator i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

const int MAX = 1005;
const int MOD = 1000000007;
const int INF = 1000000000;

typedef unsigned int uint;

uint a[MAX][MAX];
uint minCol[MAX][MAX];
uint minRowCol[MAX][MAX];

int main() {
    int n, k;
    scanf("%d%d", &n, &k);

    const int MAX = 1005;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%u", &a[i][j]);
        }
    }


    for (int j = 0; j < n; j++) {
        multiset<uint> p;
        for (int i = 0; i < k; i++) p.insert(a[i][j]);
        minCol[0][j] = *p.begin();
        for (int i = k; i < n; i++) {
            p.erase(p.find(a[i-k][j]));
            p.insert(a[i][j]);
            minCol[i-k+1][j] = *p.begin();
        }
    }

    for (int i = 0; i < n-k+1; i++) {
        multiset<uint> p;
        for (int j = 0; j < k; j++) p.insert(minCol[i][j]);
        printf("%u ", *p.begin());
        for (int j = k; j < n; j++) {
            p.erase(p.find(minCol[i][j-k]));
            p.insert(minCol[i][j]);
            printf("%u ", *p.begin());
        }
        printf("\n");
    }
}
