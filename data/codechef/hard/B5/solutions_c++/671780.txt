#include <cstdlib>
//#include <iostream>
#include <cstdio>

int     a[1000][1000];
int strip[1000][1000];
int  bugs[1000][1000];

using namespace std;

int lowestRow(int grid[1000][1000], int x, int y0, int y1)
{
    int best = grid[x][y0];
    for (int y=y0+1; y<=y1; y++) {
        if (grid[x][y]<best) best = grid[x][y];
    }
    return best;
}

int lowestCol(int grid[1000][1000], int x0, int x1, int y)
{
    int best = grid[x0][y];
    for (int x=x0+1; x<=x1; x++) {
        if (grid[x][y]<best) best = grid[x][y];
    }
    return best;
}

int main(int argc, char *argv[])
{
    int n,k;
      
    scanf("%d%d", &n, &k);
    for (int i=0; i<n; i++) {
        for (int j=0; j<n; j++) {
            scanf("%d", &a[i][j]);
        }
    }
    
    // find value of all k-length horizontal strips
    
    for (int i=0; i<n; i++) {   // row
        strip[i][0] = lowestRow(a, i, 0, k-1);
        for (int j=1; j<n-k+1; j++) {   // column
            int best = strip[i][j-1];
            if (best<a[i][j-1]) {
               // low score wasn't on edge, so we can just add new square
               if (a[i][j+k-1] < best)  best = a[i][j+k-1];
            } else {
               // oops- edge had low score, need to reevaluate
               best = lowestRow(a, i, j, j+k-1);
            }
            strip[i][j] = best;
        }
    }
    
    // really should separate lowest searches since 
    //   I am only doing rows/cols not whole squares
    
    // now use same method on strip array to get trap squares
    for (int j=0; j<n-k+1; j++) {  // cols
        bugs[0][j] = lowestCol(strip, 0, k-1, j);
        for (int i=1; i<n-k+1; i++) {  // rows
            int best = bugs[i-1][j];
            if (best<strip[i-1][j]) {
               // low score wasn't on edge, so we can just add new square
               if (strip[i+k-1][j] < best)  best = strip[i+k-1][j];
            } else {
               // oops- edge had low score, need to reevaluate
               best = lowestCol(strip, i, i+k-1, j);
            }
            bugs[i][j] = best;
        }
    }                                       
            
    
    for (int i=0; i<n-k+1; i++) {
        for (int j=0; j<n-k+1; j++) {
            printf("%d ", bugs[i][j]);
        }
        printf("\n");
    }
    //system("PAUSE");
    return 0;
}
