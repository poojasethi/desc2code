
/* Author :: Yash */
#include <vector>
#include <list>
#include <cassert>
#include <sstream>
#include <map>
#include <set>
#include <climits>
#include <deque>
#include <fstream>
#include <stack>
#include <bitset>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstring>
#include <utility>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

template<class A, class B> A cvt(B x) {stringstream s;s<<x;A r;s>>r;return r;}

#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i) 
#define REV(i,a,b) for(int i= (int )a ; i >= (int)b ; --i)
#define REP(i,n) FOR(i,0,n)
#define DEP(i,n) REV(i,n,0)
#define PB push_back
#define PP pop()
#define EM empty()
#define INF 1000000000
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x)        cout << #x << " " << x << endl
#define LET(x,a) 	    __typeof(a) x(a)
#define IFOR(i,a,b) 	for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  	IFOR(it,v.begin(),v.end())
#define PRESENT(c,x) 	((c).find(x) != (c).end())
#define SZ(x) 		x.size()
#define CPRESENT(c,x) 	(find(c.begin(),c.end(),x) != (c).end())
#define CLR(a,v)        memset((a),(v),sizeof(a))
#define D(N) 		int N
#define S(N)		scanf("%d",&N)
#define FASTIO          1

typedef pair<int,int>   PI;
typedef pair<int,PI>    TRI;
typedef V( int )        VI;
typedef V( PI  )        VII;
typedef V( string )     VS;
typedef long long       LL;
typedef long double     LD;

/* FastIO, generally required these days ;) */

#ifndef FASTIO
char *ipos, *opos, InpFile[20000000], OutFile[20000000], DIP[20];
inline int input(int flag=0) {

	while(*ipos <= 32) ++ipos;
	if ( flag  ) return (*ipos++ - '0'); /* For getting Boolean Characters */
	int x=0, neg = 0;char c;
	while( true ) {
		c=*ipos++; if(c == '-') neg = 1;
		else {
			if (c<=32) return neg?-x:x;
			x=(x<<1)+(x<<3)+c-'0';
		}
	}
}
inline void output(int x,int flag) {
	int y,dig=0;
	while (x||!dig) { y=x/10;DIP[dig++]=x-((y << 3) + (y << 1))+'0';x=y;}
	while (dig--) *opos++=DIP[dig];
	*opos++= flag ? '\n' : ' ';
}
inline void InitFASTIO() {
	ipos = InpFile; opos = OutFile;
	fread_unlocked(InpFile,20000000,1,stdin);
}
inline void FlushFASTIO() {
	fwrite_unlocked(OutFile,opos-OutFile,1,stdout);	
}
#endif

/* Main Code Starts from here */

#define Max 1010
int n, m, c1, c2, Inp[Max];


int main() {

   //freopen("input.txt", "rt", stdin);
   //freopen("output.txt", "wt", stdout);

   int kases; scanf("%d",&kases);
   while(kases--) {
      scanf("%d%d%d%d",&n,&m,&c1,&c2);
      REP(i,n) scanf("%d",&Inp[i]); 
      if(c1 > c2) swap(c1,c2);

      Inp[n++] = c1; Inp[n++] = c2;
      sort(Inp,Inp+n);

      int start = lower_bound(Inp,Inp+n,c1) - Inp;
      int end   = upper_bound(Inp,Inp+n,c2) - Inp;

      int total = end - start, ans = 0;
	 
      if(total <= (m+2)) {
	 // We can greedily fill the values.
         for(int i = start + 1 ; i < end ; ++i) ans = max(ans, Inp[i] - Inp[i-1]);
	 while(total < (m+2)) {
	    if(start == 0) {
	       ans = max(ans, Inp[end] - Inp[end-1]); ++end;
	    }
	    else if(end != n && (Inp[end] - Inp[end-1]) < (Inp[start] - Inp[start-1])) {
	       ans = max(ans, Inp[end] - Inp[end-1]); ++end;
	    }
	    else {
	       ans = max(ans, Inp[start] - Inp[start-1]); --start;
	    }
	    total = end - start;
	 }
	 printf("%d\n",ans);
      }
      else {
	 // We need to choose a subset which will work fine for this.
	 ans = c2 - c1;
	 int low = 0, high = c2 - c1;

	 --end;
	 REP(i,25) {
	    int mid = (low + high)/2;
	    // Can we get mid ?
	    int prev = start, present = start + 1, taken = 0;
	    while(taken < m) {
	       if(present >= end) break;
	       while(present < end && (Inp[present] - Inp[prev]) <= mid) ++present;
	       --present; if(Inp[present] - Inp[prev] <= mid) {
		  ++taken; prev = present; present++;
	       }
	       else break;
	    }
	    if((Inp[end] - Inp[prev]) <= mid) {
	       high = mid;
	    }
	    else low = mid;
	 }
	 printf("%d\n",high);
      }
   } 
   return 0;
}

