#include <cstdio>

#include <algorithm>

using namespace std;

#define INF 1000000000

int N;
int P[1004];

bool ok(int L, int R, int M, int max_gap) {
   int prev = P[L];
   for (int i = L+1; i <= R; ++i) {
      if (P[i] - prev > max_gap) {
         --M;
         prev = P[i-1];
      }
   }
   return M >= 0;
}

int main(int argc, char* argv[]) {
   int TC;
   scanf("%d", &TC);
   while (TC-- > 0) {
      int M, C1, C2;
      scanf("%d %d %d %d", &N, &M, &C1, &C2);
   // printf("M: %d\n", M);
      if (C1 > C2)
         swap(C1, C2);
      for (int i = 0; i < N; ++i)
         scanf("%d", P+i);
      P[N++] = C1;
      P[N++] = C2;
      sort(P, P+N);
   /*
      for (int i = 0; i < N; ++i)
         printf("%d ", P[i]);
      putchar('\n');
   */
      int L = lower_bound(P, P+N, C1) - P;
      int R = upper_bound(P, P+N, C2) - P - 1;
   // printf("L: %d   R: %d\n", L, R);

      int max_gap = 0;
      for (int i = L+1; i <= R; ++i)
         max_gap = max(max_gap, P[i] - P[i-1]);

      if (R-L-1 <= M) {
      // puts("Greedy");
         M -= R-L-1;
         // greedily search for gap
         for (int i = L-1, j = R+1; M > 0; --M) {
            int gap_left  = i >= 0 ? P[i+1]-P[i] : INF;
            int gap_right = j < N ? P[j]-P[j-1] : INF;
            if (gap_left <= gap_right) {
               max_gap = max(max_gap, gap_left);
               --i;
            }
            else {
               max_gap = max(max_gap, gap_right);
               ++j;
            }
         }
         printf("%d\n", max_gap);
      }
      else {
      // puts("Binary Search");
         // binary search
         int lo = max_gap, hi = C2-C1;
         while (lo < hi) {
            int mid = lo + (hi-lo)/2;
            if (ok(L, R, M, mid))
               hi = mid;
            else
               lo = mid+1;
         }
         printf("%d\n", lo);
      }
   // putchar('\n');
   }
   return 0;
}
