/*
	problem: http://www.spoj.com/problems/INVCNT/
*/

#include <bits/stdc++.h>
using namespace std;

#define LOCAL 0
#define PB push_back
#define LB lower_bound
#define UB upper_bound
#define ALL(c) c.begin(), c.end()
#define FOR(i, s, e) for(int i = s; i < e; i++)
#define DBG(e) {if(LOCAL) cerr << setw(10) << #e << " = " << setw(5) << e << "\n";}
#define FOR_EACH(e, c) for(typeof(c.begin()) c##it = c.begin();(e = *c##it ,c##it != c.end()); c##it++)

typedef long long int LL;
typedef vector<int> VI;
typedef vector<LL> VL;
typedef pair<int, int> PII;

const int MOD = 1E9+9;
const int INF = 1E5+1;

#define idx(d) (d+x)

int solve(string& s, string& w, int a, int b, int k)
{
	int l1 = s.length(), l2 = w.length();
	if(a == 0){
		return a;
	}
	int x = k/a;
	if(abs(l1-l2) > x){
		return -1;
	}
	if(b == 0){
		return abs(l1-l2)*a;
	}
	
	// DBG("aravind");
	vector<vector<int> > dp(l1+1, vector<int>(2*x+1, INF));
	FOR(i, 0, min(l1, x+1)){
		dp[0][idx(i)] = i*a;
		dp[i][idx(-i)] = i*a;
	}

	FOR(i, 1, l1+1){
		FOR(d, -x, x+1){
			int j = i+d;
			if(j <= 0 || j > l2)	continue;

			if(s[i-1] == w[j-1]){
				dp[i][idx(d)] = dp[i-1][idx(d)];
			}
			else {
				dp[i][idx(d)] = min(dp[i-1][idx(d)+1]+a, 
					min(dp[i][idx(d)-1]+a, dp[i-1][idx(d)]+b));
			}
		}
	}
	
	if(dp[l1][idx(l2-l1)] <= k)
		return dp[l1][idx(l2-l1)];
	else 
		return -1;
}
int main()
{
	ios_base::sync_with_stdio(false);
	// code starts here
    #if LOCAL
        ifstream fin;fin.open("in.txt");
        if(fin.fail())  exit(1);
        #define cin fin
        // ofstream fout("out.txt");
        // #define cout fout
    #endif

	int t;
	cin >> t;
	while(t--){
		int a, b, k;
		string s, w;
		cin >> s >> w;
		cin >> a >> b >> k;
		cout << solve(s, w, a, b, k) << "\n";
	}
}
