#include <bits/stdc++.h>
#define sz 100009
using namespace std;

int a, b, k;
char s[sz], w[sz];
int len1, len2;
int dp[sz][209];
const int offset = 102;
/*
int _solve(int l, int r) {
	if(abs(l-r) > k) return INT_MAX-200;
	if(l == 0) return r*a;
	if(r == 0) return l*a;
	if(l < 0 || r < 0) return 0;
	int diff = offset + r-l;
	if(dp[l][diff] != -1) {
		return dp[l][diff];
	} else {
		int &ret = dp[l][diff];
		ret = solve(l, r-1) + a;
		ret = min(ret, solve(l-1, r) + a);
		if(s[l-1] == w[r-1]) {
			ret = min(ret, solve(l-1, r-1));
		} else {
			ret = min(ret, solve(l-1, r-1) + b);
		}
		//cout<<"for "<<l<<" "<<r<<" "<<ret<<endl;
		return ret;
	}
}*/

int solve() {
	for(int i=0;i<=len1;i++) {
		int l = max(0, i-k), r = min(len2, i+k);
		while(l <= r) {
			//cout<<"for "<<i<<" "<<l<<" ";
			int diff = offset + l-i;
			int &ret = dp[i][diff];
			ret = INT_MAX;
			if(l == 0) ret = min(ret, i*a);
			else if(i == 0) ret = min(ret, l*a);
			else {
				ret = min(ret, abs(l-1-i) <= k ? dp[i][l-1-i+offset]+a : INT_MAX);
				ret = min(ret, abs(l-i+1) <= k ? dp[i-1][l-i+1+offset]+a : INT_MAX);
				if(s[i-1] == w[l-1]) {
					ret = min(ret, abs(l-i) <= k ? dp[i-1][diff] : INT_MAX);
				} else {
					ret = min(ret, abs(l-i) <= k ? dp[i-1][diff]+b : INT_MAX);
				}
			}
			//cout<<ret<<endl;
			l++;
		}
	}
	return dp[len1][offset+len2-len1];
}

int main() {
	int t;
	scanf("%d", &t);
	while(t--) {
		scanf("%s %s", s, w);
		scanf("%d%d%d", &a, &b, &k);
		len1 = strlen(s); len2 = strlen(w);
		if(a == 0) {
			printf("0\n");
		} else if(abs(len1-len2) > k) {
			printf("-1\n");
		} else {
			int ans = solve();
			if(ans > k) {
				printf("-1\n");
			} else {
				printf("%d\n", ans);
			}
		}
	}
	return 0;
}