#include <cstdio>
#include <vector>
#include <cstring>
#define MAX 1000
using namespace std;

int abs(int a)
{
    if(a<0)
	a*=-1;
    return a;
}
main()
{
    vector < vector <int> >editdist;
    int t;
    scanf("%d",&t);
    while(t--)
    {
	char s[100001],w[100001];
	editdist.clear();
	scanf("%s",s);
	scanf("%s",w);
	//printf("%s\n",s);
	//printf("%s\n",w);
	
	int a,b,k;
	scanf("%d %d %d",&a,&b,&k);
	int ns=strlen(s);
	int nw=strlen(w);
	for(int i=0;i<=nw;i++)
	{
	    editdist.push_back(vector<int>());
	}
	int possible=1;

	if( a && abs(ns-nw)<=k)
	{
	    
	    //the first element
	    editdist[0].push_back(0);
	    
	    //initialising the first row
	    for(int i=1;i<=min(ns,k);i++)
	    {
		if(i*a<=k)
		    editdist[0].push_back(i*a);
		else
		{
		    editdist[0].push_back(MAX);
		    break;
		}
		
	    }
	    /*
	    //initialising the first column
	    for(int i=1;i<=nw;i++)
	    {
		
		if(i*a<=k)
		{
		    editdist[i].push_back(i*a);
		}
		else
		{
		    editdist[i].push_back(MAX);
		}
	    }
	    */

	    //initialising the whole adjacency list
	    for(int i=1;i<=nw;i++)
	    {
		int low,up;
		low=max(0,i-k);
		up=min(ns,i+k);
		int diff=up-low+1;
		for(int j=0;j<diff;j++)
		{
		    
		    int jj=low+j;
		    
		    int low_ = max(i-1-k,0);
		    //int jjbefore = lowjbefore+j;
		    int j_ = jj - low_;

		    if (jj==0)
		    {
			editdist[i].push_back(i*a);
		    }
		    else if(s[jj-1]==w[i-1])
		    {
			if(j_>=1 && j_-1<editdist[i-1].size())
			    editdist[i].push_back(editdist[i-1][j_-1]);
			else
			    editdist[i].push_back(MAX);
		    }
		    else 
		    {
			int ans1=MAX,ans2=MAX,ans3=MAX;
			
			if( j_>=0 && j_<editdist[i-1].size()  && editdist[i-1][j_]+a<=k )
			    ans1=editdist[i-1][j_]+a;

			if( j_>=1 && j_-1<editdist[i-1].size()  && editdist[i-1][j_-1]+b<=k )
			    ans2=editdist[i-1][j_-1]+b;

			if( j>=1 && editdist[i][j-1]+a<=k)
			    ans3=editdist[i][j-1]+a;
			editdist[i].push_back(min(min(ans1,ans2),ans3));
		    }
		}
	    }
	    /*
	    for(int i=0;i<=nw;i++)
	    {
		for(int j=0;j<editdist[i].size();j++)
		    printf("%d ",editdist[i][j]);
		printf("\n");
	    }*/
	    int last=editdist[nw].size();
	    if (editdist[nw][last-1]>k)
		printf("-1\n");
	    else
		printf("%d\n",editdist[nw][last-1]);
	}
	else
	{
	    if(a==0)
		printf("0\n");
	    else 
	    {
		printf("-1\n");
	    }
	}
    }
    
    return 0;
}