#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>

#include <iostream>
#include <string>
using namespace std;

const int MAX_LEN = 100000+2;
const int MAX_K = 101;
const int INF = 0x3f3f3f3f;
int a,b,k;

char s1[MAX_LEN]="0";
char s2[MAX_LEN]="0";
char tmp[MAX_LEN];
int len1,len2;
int P[MAX_LEN][2*MAX_K+1];

inline bool isDelta(int d)
{
		return abs(d)<=k;
}

int min3(const int& a,const int& b,const int& c)
{
		return min(min(a,b),c);
}


int main()
{
		int test;
		scanf("%d",&test);
		int tt=0;
		while(tt++<test)
		{
				scanf("%s",tmp);
				strcat(s1,tmp);
				scanf("%s",tmp);
				strcat(s2,tmp);
				scanf("%d %d %d",&a,&b,&k);
				len1=strlen(s1)-1;
				len2=strlen(s2)-1;
#ifdef DEBUG
				printf("%s %s,%d %d %d\n",s1,s2,a,b,k);
#endif

				if(a==0){printf("0\n");}

				else if(abs(len1-len2)>k){printf("-1\n");}

				else
				{
				int offset = k;
				for(int i=0;i<=len1;i++)
						for(int d=-k;d<=k;d++)
								P[i][d+offset]=INF;

				for(int d=0;d<=k;d++)
				{
						P[0][offset+d] =d*a;
				}
				for(int i=0;i<=k;i++)
				{
						P[i][offset-i]=i*a;
				}

				
				for(int i=1;i<=len1;i++)
				{
						for(int delta = -k;delta<=k;delta++)
						{
								if(i+delta>=1&&i+delta<=len2)
								{
								
										if(s1[i]==s2[i+delta])
												P[i][delta+offset] = P[i-1][delta+offset];
										else 
										{
												P[i][delta+offset] = min3(
																		isDelta(delta+1)?P[i-1][delta+1+offset]+a:INF,
																		isDelta(delta-1)?P[i][delta-1+offset]+a:INF,
																		P[i-1][delta+offset]+b
																		);
										}
								}
						}
				}

				if(P[len1][len2-len1+offset]<=k)
						printf("%d\n",P[len1][len2-len1+offset]);
				else printf("-1\n");
				}
				s1[0]='0';
				s1[1]='\0';
				s2[0]='0';
				s2[1]='\0';
		}
}






