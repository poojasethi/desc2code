    #include <stdio.h>		/*  ry_7   */
    #include <string.h>
    int dp[2][1000005];
    char str1[100005],str2[100005];
    #define gc getchar_unlocked
void scanint(int &x)
{
register int c = gc();
x = 0;
int neg = 0;
for(;((c<48 || c>57) && c != '-');c = gc());
if(c=='-') {neg=1;c=gc();}
for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
if(neg) x=-x;
}
     
    void testDistance(int,int,int,int,int,char*,char*);
    int absolute(int);
     
    int main()
    {
    int testCases;
    scanint(testCases);
    while(testCases--)
    {
    scanf("%s",str1+1);
    scanf("%s",str2+1);
    int l1 = strlen(str1+1);
    int l2 = strlen(str2+1);
    int a,b,k;
     scanint(a);scanint(b);scanint(k);
        if(l1 > l2)
    {
    testDistance(a,b,k,l1,l2,str1,str2);
    }
     
    else
    {
    testDistance(a,b,k,l2,l1,str2,str1);
    }
     
    }
    return 0;
    }
     
    void testDistance(int a,int b,int t,int n,int m,char* s1,char* s2)
    {
    if(t < a*(n-m))
    {
    printf("-1\n");
    return;
    }
     
    if(a == 0)
    {
    printf("0\n");
    return ;
    }
     
    if(b == 0)
    {
    printf("%d\n",a*(n-m));
    return;
    }
    int p = (t - a*(n-m))/(2*a);
    
    int i,j;
    int *last = dp[1],*current = dp[0],*temp;
     
    for(i = 0 ; i <= n ; i++)
    {
    current[i] = last[i] = 10000000;
    }
     
    for(i = 0; i <= m; i++)
    {
    int init,end;
    init = (i - p) > 0 ? i-p : 0;
    end = n < i + n-m + p ? n : i + n-m + p;
    current[0] = i;
    if(init != 0 )
    {
    current[init] = (last[init-1] + (s1[init] == s2[i] ? 0:b)) < (last[init] + a) ? (last[init-1] + (s1[init] == s2[i] ? 0:b)) : (last[init] + a);
    }
   
    for(j = init + 1; j <= end ; j++)
    {
    int p1 = last[j-1] + (s1[j] == s2[i] ? 0:b);
    int p2 = last[j] + a;
    int min = p1<p2 ? p1 : p2;
    min = min < (current[j-1] + a) ? min : current[j-1] + a;
    current[j] = min;
    
    }
    if( end != n)
    {
    current[end] = (last[end-1] + (s1[end] == s2[i] ? 0:b)) < (current[end-1] + a) ? (last[end-1] + (s1[end] == s2[i] ? 0:b)) : (current[end-1] + a);
   
    }
    
    temp = current;
    current = last;
    last = temp;
    }
     
    if(last[n] <= t)
    printf("%d\n", last[n]);
    else printf("-1\n");
    }
     
    int absolute(int a)
    {
    if(a < 0) return (-1)*a;
    else return a;
    } 