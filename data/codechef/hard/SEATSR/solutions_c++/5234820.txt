#include <bits/stdc++.h>

using namespace std;

#define    INF     1000000000
#define    OFFSET  100

char s[100001], w[100001];
int a, b, k, n1, n2, steps;
int DP[100001][201];

int dp(int i, int j){
	j += i;
	if(i < 0 || i > n1) return INF;
	if(j < 0 || j > n2) return INF;

	if(j-i < -steps || j-i > steps) return INF;

	return DP[i][j - i + OFFSET];
}

int solve()
{
	steps = (k+a-1) / a;
    
    /*  DP[i][delta] = dp[i][i + delta]  , delta=steps
        DP[i][- i] = i * a, for i <= k
        DP[0][i] = i * a, for i <= k
        DP[i][delta] = DP[i - 1][delta], if s[i] == w[i - delta]
        DP[i][delta] = min(DP[i - 1][delta + 1] + a, DP[i][delta - 1] + a, DP[i - 1][delta] + b), otherwise*/
        
	for(int i=0;i<=n1;++i) for(int j = -steps; j <= steps; ++j) DP[i][j + OFFSET] = INF;

	for(int i=0;i<=n1;++i){
		for(int kk = -steps; kk <= steps; ++kk){
			int j = i + kk;
			int &curr = DP[i][kk + OFFSET];

			if(j < 0 || j > n2) continue;

			if(i == 0 || j == 0){
				curr = abs(j-i) * a;
				continue;
			}

			curr = min(curr, dp(i-1, kk) + (s[i-1] == w[j-1] ? 0 : b));	// Replace
			curr = min(curr, dp(i-1, kk+1) + a);	// Delete
			curr = min(curr, dp(i, kk-1) + a); // Insert
		}
	}
	int ans = DP[n1][n2 - n1 + OFFSET];
	if(ans > k) ans  = -1;
	return  ans;
}

int main()
{
	int T;
	scanf("%d",&T);
	while(T--){
		scanf("%s", s);
		scanf("%s", w);
		scanf("%d %d %d", &a, &b, &k);
		n1 = strlen(s);
		n2 = strlen(w);

		if(a == 0) puts("0");
		else if(abs(n1 - n2) * a > k) puts("-1");
		else if(b == 0) printf("%d\n", abs(n1 - n2) * a);
		else printf("%d\n",solve());
	}
}
