#include <iostream>
#include <algorithm>
#include <cstdio>
#include <vector>
#include <cstring>
#include <string>
#include <cmath>
#include <utility>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <sstream>
#define fr(a,b,c) for (int a=b;a<=c;a++)
#define frr(a,b,c) for (int a=b;a>=c;a--)
#define rep(a,b) for (int a=0;a<b;a++)
#define repp(a,b) for (int a=b-1;a>=0;a--)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz(a) int(a.size())
#define all(a) a.begin(),a.end()
#define pii pair<int,int>
#define oo 1000111222
#define maxN 1
#define base 100000
#define digit 5
using namespace std;
 
int n;
 
struct bignum
{
int a[300],l;
void load(int x)
{
for (int i=0;i<300;i++) a[i]=0;
a[l=1]=x;
}
void mul(int x)
{
int mem=0;
for (int i=1;i<=l;i++)
{
a[i]=a[i]*x+mem;
mem=a[i]/base;
a[i]%=base;
}
if (mem) a[++l]=mem;
}
void divide(int x)
{
int mem=0;
for (int i=l;i;i--)
{
int t=a[i]+mem*base;
a[i]=t/x;
mem=t%x;
}
while (l>1 && !a[l]) l--;
}
void read()
{
load(0);
string s;
cin >> s;
l=(sz(s)+digit-1)/digit;
reverse(s.begin(),s.end());
fr(i,1,l)
frr(j,i*digit-1,(i-1)*digit)
if (j<sz(s))
a[i]=a[i]*10+s[j]-'0';
}
int cmp(bignum t)
{
if (t.l!=l) return l<t.l?-1:1;
frr(i,l,1)
if (a[i]!=t.a[i])
return a[i]<t.a[i]?-1:1;
return 0;
}
} num[4000];
 
 
int main()
{
int maxn;
for (int n=1;;n+=2)
{
int N=n/2+1;
if (n==1) num[1].load(2);
else
{
num[n]=num[n-1];
num[n].mul(2*N-1);
num[n].divide(N);
}
num[n+1]=num[n];
num[n+1].mul(2);
if (num[n+1].l>200)
{
maxn=n+1; break;
}
}
int test;
cin >> test;
while (test--)
{
bignum t;
t.read();
int ok=0,low=1,high=maxn;
while (low<=high)
{
int mid=(low+high)/2;
int x=num[mid].cmp(t);
if (!x)
{
ok=1; break;
}
if (x<0) low=mid+1;
else high=mid-1;
}
puts(ok?"YES":"NO");
}
}