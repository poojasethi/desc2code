#include <stdio.h>
#include <list>
#include <string.h>
#include <stdlib.h>

using namespace std;

class Graph
{
	int V;
	list<int> *adj;

public:
	Graph(int V)
	{
		this->V = V;
		adj = new list<int>[V];
	}
	void addEdge(int v,int w)
	{
		adj[v].push_back(w);
	}
	void printgraph()
	{
		for(int i=0;i<=V-1;i++)
		{
			if(adj[i].size()!=0)
			{
				printf("%d\t",i);
				for(list<int>::iterator j = adj[i].begin();j!=adj[i].end();j++)
					printf("%d\t",*j);
				printf("\n");
			}				
			
		}
		
	}
	void BFS(int s,bool visited[])
	{
		//Create a queue
		list<int> queue;

		visited[s] = true;
		queue.push_back(s);


		while(!queue.empty())
		{
			int temp = queue.front();
			queue.pop_front();
			
			for(list<int>::iterator i = adj[temp].begin();i!=adj[temp].end();i++)
			{
				if(!visited[*i])
				{
					visited[*i] = true;
					queue.push_back(*i);
				}					
			}
		}
	}

	bool isConnected(int start)
	{
		bool *visited = new bool[V];
		for(int i=0;i<=V-1;i++)
		{
			visited[i] = false;
		}
		BFS(start,visited);

		for(int i=0;i<=V-1;i++)
		{
			if(visited[i] == false && adj[i].size()>0)
			{
				return false;
			}
		}
		return true;
	}

};


int main(void)
{
	int n,t,onescount,startvertex;
	char word[1000];
	char first,last;
	int indegree[26];
	int outdegree[26];
	int diff[26];
	bool canopen,connected;

	scanf("%d",&t);

	while(t--)
	{
		canopen = true;
		Graph g(26);
		scanf("%d",&n);
		onescount = 0;
		connected = false;
		for(int i=0;i<=25;i++)
		{
			indegree[i] = 0;
			outdegree[i] = 0;
		}

		while(n--)
		{
			
			scanf("%s",word);
			first = word[0];
			last = word[strlen(word)-1];
			g.addEdge(first-97,last-97);
			outdegree[first-97]++;
			indegree[last-97]++;
		}
		for(int j = 0;j<=25;j++)
		{
			diff[j] = abs(indegree[j] - outdegree[j]);
			if(diff[j]>1)
			{
				canopen = false;
				break;
			}
			if(diff[j]==1)
			{
				onescount++;
			}
		}

		if(onescount>2)
			canopen = false;
		for(int k=0;k<=25;k++)
		{
			if(outdegree[k]>0)
			{
				startvertex = k;
				break;
			}
				

		}
		for(int temp=0;temp<=25;temp++)
		{
			if(outdegree[temp]!=0)
			{
				if(g.isConnected(temp))
				{
					connected = true;
					break;
				}
			}
		}
		if(canopen && connected)
			printf("Ordering is possible.\n");
		else
			printf("The door cannot be opened.\n");
	}
	return 0;
}