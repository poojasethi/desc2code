#include <bits/stdc++.h>

#define ALL(c)        c.begin(), c.end()
#define TR(c, it)     for(typeof(c.begin()) it = c.begin(); it != c.end(); it++)
#define FOR(i, j, n)  for(int (i) = (j); i < n; i++)
#define REP(i, j, lo) for(int (i) = (j); i >= (lo); i--)
#define MAX(a, b)     ((a) > (b) ? (a) : (b))
#define MIN(a, b)     ((a) < (b) ? (a) : (b))
#define gc            getchar_unlocked

#ifndef ONLINE_JUDGE
    #define gc getchar
#endif

#define pu            putchar_unlocked
#define ll            long long int
#define ull           unsigned long long int
#define inf           INT_MAX
#define mininf        INT_MIN
#define pb            push_back
#define pob           pop_back
#define pf            push_front
#define pof           pop_front
#define mp            make_pair
#define PI            3.14159265358979323846264338327950288
#define endl          '\n'
#define SET(arr, val) memset(arr, val, sizeof arr)
#define SI            ( { int x; scanf("%d", &x); x; } )
#define IOSFAST       ( ios::sync_with_stdio(false); )
#define sysp          ( system("pause") )
inline void MAXR(int &a, int b){ if(a < b)   a = b; }

using namespace std;

inline void sfast(string &str)
{
    register char c = 0;
    register int i = 0;
    while (c < 33)
        c = gc();

    str = "";
    while(c != '\n' && c != ' ')
    {
        str += c;
        c = gc();
    }
}

bool adj[30][30], visited[30];
int indeg[30], outdeg[30];

void dfs(int pos)
{
    visited[pos] = true;
    FOR(i, 0, 26)
        if(adj[pos][i] && !visited[i])
            dfs(i);
}

bool isConnected()
{
    FOR(i, 0, 26)
    {
        if(indeg[i] || outdeg[i])
            visited[i] = false;
        else
            visited[i] = true;
    }
    FOR(i, 0, 26)
        if(!visited[i])
        {
            dfs(i);
            break;
        }
    FOR(i, 0, 26)
        if(!visited[i])
            return false;
    return true;
}

int main()
{
    int t = SI;
    while(t--)
    {
        int n = SI;
        SET(adj, false);
        SET(indeg, 0);
        SET(outdeg, 0);

        string str;
        FOR(i, 0, n)
        {
            sfast(str);
            int x = *str.begin() - 'a', y = *(--str.end()) - 'a';
            indeg[x]++;
            outdeg[y]++;
            adj[x][y] = adj[y][x] = true;
        }
        int num = 0, i = -1, f = 1;
        while(++i < 26)
        {
            if(indeg[i] != outdeg[i])
            {
                if(num == 2 || abs(indeg[i] - outdeg[i]) != 1)
                {
                    f = false;
                    break;
                }
                num++;
            }
        }
        if(f && isConnected())
            printf("Ordering is possible.\n");
        else
            printf("The door cannot be opened.\n");
    }
    return 0;
}
