#include<stdio.h>
#include<math.h>
#include<iostream>
#include<stdlib.h>
#include<vector>
#include<stack>
#include<map>
#include<set>
#include<cstring>
#include<algorithm>
#define LL long long
#define N 23
#define M 121
#define INF (int)1e9
#define LINF (long long)1e18
#define pb push_back
#define pln() printf("\n")
#define s(t) scanf("%d",&t)
#define sl(t) scanf("%lld",&t)
#define ss(t) scanf("%s",&t)
#define p(t) printf("%d",t)
#define pl(t) printf("%lld",t)
#define ps(t) printf("%s",t)

/*Start where you are. Use what you have. Do what you can..*/
using namespace std;
template<class type>
void swap(type &a,type &b)
{
type c=a;
a=b;
b=c;     
}

/*
template<class type>
type fastread()
{
char ch;type num=0;
while((ch=getchar_unlocked())<'0');
while(ch>='0')
{
num=(num)*10+ch-'0';
ch=getchar_unlocked();              
}             
return num;            
             
}
*/

int sc[26],ec[26],connect[26][26],isnode[26];

bool check()//checking necessary condition
{int diff;
bool f1=false,f2=false;
for(int i=0;i<26;++i)
{
diff=sc[i]-ec[i];
if(diff==0)continue;

else if(diff==1)
{
if(f1)return false;
f1==true;
}
                
else if(diff==-1)
{
if(f2)return false;
f2=true;     
     
}                        
else
return false;        
        
}    
return true;    
}

int countnode()
{
int total=0;
for(int i=0;i<26;++i)
{
if(isnode[i])
total++;        
        
}    
return total;    
    
}


int dfs(int root,bool *visited)
{int total=1;
visited[root]=true;
for(int i=0;i<26;++i)
{
if((connect[i][root])||(connect[root][i]))
{
if(!visited[i])
{
               
total+=(dfs(i,visited));               
               
}                                          
                                          
}        
        
}//for ends
    
  return total;  
    
}



void solve()
{
bool codn=check();bool flag=false;

if(!codn){ps("The door cannot be opened.");pln();return;}//fail in necessary condition..     

int nodecount=countnode();
bool visited[26];
int visitednode;
for(int i=0;i<26;++i)
{
if(isnode[i])
{
for(int j=0;j<26;++j)
visited[j]=false;    
             
visitednode=dfs(i,visited);
//p(visitednode);ps("   ");p(nodecount);pln();        
if(visitednode==nodecount)
{flag=true;break;}



}       
}//for ends

if(flag)
ps("Ordering is possible.");
else
ps("The door cannot be opened.");
pln();


     
     
     
}



int main()
{   
#ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin);
freopen("re.txt","w",stdout);
#endif

int test,n,len;char str[1010],start,last;
s(test);
while(test--)
{
s(n);
memset(sc,0,sizeof(sc));
memset(ec,0,sizeof(ec));
memset(isnode,0,sizeof(isnode));
memset(connect,0,sizeof(connect));
while(n--)
{
ss(str);
len=strlen(str);
start=str[0]-'a';
last=str[len-1]-'a';
sc[start]++;
ec[last]++;          
isnode[start]=1;
isnode[last]=1;
connect[start][last]=1;          
          
}             
             
solve();
             
             
}


return 0;    
}
