#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <iterator>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <limits>
#include <string>
using namespace std;

#define ll long long
#define GI(n) scanf("%d",&n)
#define GLL(n) scanf("%lld", &n)
#define GLD(n) scanf("%lf", &n)
#define FORab(i,a,b) for(i=(int)(a); i<=(int)(b); ++i)
#define RFORab(i,a,b) for(i=(int)a; i>=(int)b; --i)
#define FOR(i,n) FORab(i,0,(n)-1)
#define RFOR(i,n) RFORab(i,(n)-1,0)
#define nC2(n) (n*(n-1))/2

#define SET(A) memset(A, 1, sizeof(A))
#define CLR(A) memset(A, 0, sizeof(A))
#define MEM(A,x) memset(A, x, sizeof(A))
#define CPY(A,B) memcpy(A, B, sizeof(A))

#define SIZE(A) ((int)(A.size()))
#define ALL(A) (A).begin(), (A).end()
#define FILL(A,x) fill(ALL(A), x)
#define TR(A,i) for(typeof((A).begin()) i = (A).begin(); i != (A).end(); ++i)
#define SORTV(x) sort(ALL(x))
#define REVV(x) reverse(ALL(x))

#define MOD % 1000000007
#define MAXN 50000
#define true 1
#define false 0
#define INF (INT_MAX/2)
#define LINF (LONG_LONG_MAX/2)

#define debugi(x) if(!SUBMIT) { printf(#x "is %d\n", x); }
#define debugll(x) if(!SUBMIT) { printf(#x "is %lld\n", x); }
#define debugld(x) if(!SUBMIT) { printf(#x "is %lf\n", x); }

#define SUBMIT false        // NOTE: Change to true before submitting

bool checkConnected(bool graph[][26], int sch, bool included[]) {
    int i, j;
    bool visited[26];
    FOR(i,26) visited[i] = false;

    queue<int> q;
    q.push(sch-'a');

    while(!q.empty()) {
        int vert = q.front();
        q.pop();
        visited[vert] = true;
        FOR(j, 26) {
            if(graph[vert][j] && !visited[j])
                q.push(j);
        }
    }

    FOR(i,26) {
        if(included[i] && !visited[i]) {
            return false;
        }
    }

    return true;
}

int main() {

    int i, j, T, N;
    GI(T);
    char** strings = (char **) malloc(100000 * sizeof(char*));
    FOR(i,100000) strings[i] = (char *) malloc(26 * sizeof(char));

    while(T--) {
        GI(N);
        FOR(i,N) scanf("%s", strings[i]);

        int start[26], end[26];
        bool graph[26][26];
        bool included[26];
        FOR(i,26) {
            start[i] = end[i] = 0;
            FOR(j,26) graph[i][j] = false;
            included[i] = false;
        }

        FOR(i,N) {
            start[strings[i][0]-'a']++;
            end[strings[i][strlen(strings[i])-1]-'a']++;
            graph[strings[i][0]-'a'][strings[i][strlen(strings[i])-1]-'a'] = true;
            included[strings[i][0]-'a'] = true;
            included[strings[i][strlen(strings[i])-1]-'a'] = true;
        }

        int count = 0;
        char startChar = '0';
        FOR(i,26) {
            int temp = abs(start[i]-end[i]);
            if(temp > 1) count = 100;
            else if(temp == 1) {
                count++;
                if(start[i]-end[i] == 1) startChar = i + 'a';
            }
        }

        if(count > 2) {
            printf("The door cannot be opened.\n");
        } else {
            if(count == 2) {
                // Particular starting word
                if(checkConnected(graph, startChar, included))
                    printf("Ordering is possible.\n");
                else
                    printf("The door cannot be opened.\n");
            } else {
                // No particular starting word
                if(checkConnected(graph, strings[0][0], included))
                    printf("Ordering is possible.\n");
                else
                    printf("The door cannot be opened.\n");
            }
        }
    }


    return 0;
}

