#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

char s[1001];
// Note that 122 is 'z'
int B[123]; // beginnings
int E[123]; // endings
char L[123][123]; // Links
char Q[27]; // 'Queue' of chars to visit
char V[123]; // Visited chars
char P[123]; // Characters that are present

int main()
{

  int T; // ~500
  scanf("%d\n", &T);

  while(T--)
  {
    int N; // [1, 100000]
    scanf("%d\n", &N);

    memset(B, 0, sizeof(B));
    memset(E, 0, sizeof(E));
    memset(L, 0, sizeof(L));
    memset(P, 0, sizeof(P));

    for(int ii = 0; ii < N; ++ii)
    {
      gets(s);
      char *pb = s;
      while(*pb < 'a' || *pb > 'z') ++pb;
      char *pe = pb;
      while(pe[1] >= 'a' && pb[1] <= 'z') ++pe;
      
      char b = *pb;
      char e = *pe;

      L[e][b] = 1;
      L[b][e] = 1;
      ++B[b];
      ++E[e];
    }

    bool has1 = false;
    bool hasm1 = false;
    char i = 'a';
    int difChars = 0;
    for(; i <= 'z'; ++i)
    {
      const int &b = B[i];
      const int &e = E[i];

      if(b != 0 || e != 0)
      {
        P[i] = 1;
        ++difChars;
      }

      const int diff = b - e;

      if(diff == 1) // 1 more starting characters than ending ones
      {
        if(has1) // one lonely starting character is allowed
          break;
        has1 = true;
      }
      else if(diff == -1) // 1 more ending characters than starting ones
      {
        if(hasm1) // one lonely ending character is allowed
          break;
        hasm1 = true;
      }
      else if(diff != 0) // Red light - the difference between ending and starting characters i is more than 1!
      {
        break;
      }
    }

    if(i > 'z')
    {
      // Find first character to start from
      i = 'a';
      while(P[i] == 0) ++i;

      memset(Q, 0, sizeof(Q));
      memset(V, 0, sizeof(V));
      char *q = Q;
      *q = i;
      V[i] = 1;
      --difChars;
      char *qq = q + 1;

      while(*q != 0)
      {
        char *l = L[*q];
        for(char j = 'a'; j <= 'z'; ++j)
        {
          if(l[j] == 1) // There is a link
          {
            if(V[j] == 0) // Not visited
            {
              V[j] = 1; // Visit
              --difChars;
              // Put into the queue
              *qq = j;
              ++qq;
            }
          }
        }
        ++q;
      }


      if(difChars == 0)
        printf("Ordering is possible.\n");
      else
        printf("The door cannot be opened.\n");
    }
    else
    {
      printf("The door cannot be opened.\n");
    }

  }

  return 0;
}
