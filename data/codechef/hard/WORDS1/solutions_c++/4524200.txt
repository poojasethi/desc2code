#include <iostream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
using namespace std;
# define size 26
int visited[size];
int present[size];
struct  graph
{
   int edge[size][size];
   int out[size];
   int in[size];
};
void create_graph(graph* g)
{
	int i,j;
	for(i=0;i<size;i++)
	{
		for(j=0;j<size;j++)
		{
			g->edge[i][j]=0;
		}
	}
	for(i=0;i<size;i++)
	{
		g->out[i]=0;
		g->in[i]=0;
		present[i]=0;
		visited[i]=0;
	}
}
void edge_connect(graph* g,int start,int end)
{
	g->edge[start][end]++;
	g->in[end]++;
	g->out[start]++;
	present[start]=1;
	present[end]=1;

}
void connection(graph* g,int index)
{
	int i;
	for(i=0;i<size;i++)
	{
		if((g->edge[i][index]>0 || g->edge[index][i]>0) && visited[i]!=1)
		{
			visited[i]=1;
			connection(g,i);
		}
	}
}
int path(graph* g)
{
	int i,flag=0;
	for(i=0;i<size;i++)
	{
		if(present[i]==1)
		{
			visited[i]=1;
			connection(g,i);
			break;
		}
	}
	for(i=0;i<size;i++)
	{
		if(visited[i]!=present[i])
			return 0;
	}
	for(i=0;i<size;i++)
	{
		if(visited[i]==1)
		{
			if(g->in[i]-g->out[i]==1 || g->out[i]-g->in[i]==1)
				flag++;
			else if(g->in[i]-g->out[i]!=0)
				return 0;
		}
	}
		if(flag>2)
			return 0;
		
			return 1;
	
}
int main()
{
	int i,j,test,lines;
	graph* g=(graph*)malloc(sizeof(graph));
	char c,d,s;
	cin>>test;
	getchar();
	for(i=0;i<test;i++)
	{
		create_graph(g);
		cin>>lines;
		getchar();
		for(j=0;j<lines;j++)
		{
			c=getchar();
			while((d=getchar())!='\n')
				s=d;
			edge_connect(g,c-'a',s-'a');
		}
		if(path(g)==1)
			cout<<"Ordering is possible.";
		else
			cout<<"The door cannot be opened.";
		cout<<"\n";
	}
	return 0;
}