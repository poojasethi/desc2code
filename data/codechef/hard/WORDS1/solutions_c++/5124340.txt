#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <iterator>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <algorithm>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <limits>
#include <string>
using namespace std;

#define MIN(a,b) ((a)<(b)? (a):(b)) 
#define MAX(a,b) ((a)<(b)? (b):(a))
#define ll long long
#define gi(n) scanf("%d",&n)
#define gll(n) scanf("%lld", &n)
#define gld(n) scanf("%lf", &n)
#define forab(i,a,b) for(i=(int)(a); i<(int)(b); i++)
#define FOR(i,n) forab(i,0,n)

#define MOD % 1000000007
#define true 1
#define false 0
#define INF (INT_MAX/2)
#define LINF (LONG_LONG_MAX/2)

#define pi(n) printf("%d\n",n);
#define pll(n) printf("%lld\n",n);
#define pld(n) printf("%lf\n",n);

#define debugi(x) if(!SUBMIT) { printf(#x "is %d\n", x); }
#define debugll(x) if(!SUBMIT) { printf(#x "is %lld\n", x); }
#define debugld(x) if(!SUBMIT) { printf(#x "is %lf\n", x); }

#define SUBMIT false        // NOTE: Change to true before submitting

void poss(int st, int arr[][26],bool vis[] ){
	vis[st]=true;
	for(int i=0;i<26;i++){
		if(arr[st][i]!=0 && !vis[i]){
			poss(i,arr,vis);
		}
	}
	return ;
}



int main(){
	ll t;gll(t);
	while(t--){
		int n;
		gi(n);
		int startSeen[26];
    	int endSeen[26];
    	bool seen[26];
    	int node[26][26];
    	bool visited[26];
    	for(int i=0;i<26;i++){
    		startSeen[i]=0;
    		endSeen[i]=0;
    		seen[i]=false;
    		for(int j=0;j<26;j++){
    			node[i][j]=0;
    		}
    		visited[i]=false;
    	}

    	char* str= (char*)malloc(10000*sizeof(char));
    	for(int i=0;i<n;i++){
    		scanf("%s",str);
    		int s=str[0]-'a';
    		int e=str[strlen(str)-1]-'a';
    		startSeen[s]++;
    		endSeen[e]++;
    		node[s][e]=1;
    		seen[s]=true;
    		seen[e]=true;

    	}
    	bool err=false;
    	bool countOne=0;
    	int st=0;
    	for(int i=0;i<26;i++){
    		if(startSeen[i]){
    			st=i;
    			break;
    		}
    	}
    	for(int i=0;i<26;i++){
    		if(abs(startSeen[i]-endSeen[i]) > 1){
    			err=true;
    			break;
    		}
    		if(abs(startSeen[i]-endSeen[i])==1){
    			if(startSeen[i]-endSeen[i]==1){
    					st=i;
    			}
    			countOne++;
    		}

    	}


    	if(err ||  (countOne > 2)){
    		printf("The door cannot be opened.\n");            
    	}
    	else{
    	poss(st,node,visited);
    	bool ans=true;
    	for(int i=0;i<26;i++){
    		if(seen[i] && !visited[i]){
    			ans=false;
    			break;
    		}
    	}
    	if(ans){
    	    printf("Ordering is possible.\n");
        }
        else{
			printf("The door cannot be opened.\n");            
        }
    	}

	}
	return 0;
            
}