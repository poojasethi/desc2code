#include<stdio.h>
#include <list>
#include<string.h>
using namespace std;
 
class Graph
{
    int V;    
    list<int> *adj;
    int in[27];
    int out[27];
public:
    
    Graph(int V)   {this->V = V; adj = new list<int>[V];
    			for(int i=0;i<V;i++) in[i]=0;
    			for(int i=0;i<V;i++) out[i]=0;
    			 }
    ~Graph() { delete [] adj;  }
 
     
    void addEdge(int v, int w);
 
    
    int isEulerian();
 
    bool isConnected();
 
    
    void DFSUtil(int v, bool visited[]);
};
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
    adj[w].push_back(v);
    in[w]++;
    out[v]++;
    
}
 
void Graph::DFSUtil(int v, bool visited[])
{
    
    visited[v] = true;
 
    
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[*i])
            DFSUtil(*i, visited);
}
 
bool Graph::isConnected()
{
    bool *visited=new bool[V];
    int i;
    for (i = 0; i < V; i++)
        visited[i] = false;
    for (i = 0; i < V; i++)
        if (adj[i].size() != 0)
            break;
 
    if (i == V)
     {
        delete visited;	
        return true;
    }   
 
    DFSUtil(i, visited);
 
    for (i = 0; i < V; i++)
       if (visited[i] == false && adj[i].size() > 0)
           {delete visited; return false;}
 	delete visited;	
    return true;
}
 
int Graph::isEulerian()
{
    if (isConnected() == false)
        return 0;
 
    int odd = 0,x=0,y=0;
    for (int i = 0; i < V; i++)
    {   
        if (in[i]-out[i]==0)
         {;}  
        else if(in[i]-out[i]==1){
        	x++;
        }else if(in[i]-out[i]==-1){
        	y++;
        }
        else{
        	return 0;
        }
    }       
    if (x > 1|| y>1 )
        return 0;
    return 1;
}
int main()
{
    int T,N;
    char s[1234];
    scanf("%d",&T);
    for(int i=0;i<T;i++){
    	scanf("%d",&N);
    	Graph * g= new Graph(27);
    	for(int j=0;j<N;j++){
    		scanf("%s",s);
    		g->addEdge(s[0]-'a',s[strlen(s)-1]-'a');
    	}
    	if(g->isEulerian()){
    		printf("Ordering is possible.\n");
    	}else{
    		printf("The door cannot be opened.\n");
    	}
    	delete g;
    }
    
 
    
    return 0;
}