#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cstring>
#include <algorithm>

using namespace std;


char ss[1005];
int in[26], out[26], tmp[27];
int p[26];

int find(int u) {
        if (p[u] != u)
                p[u] = find(p[u]);
        return p[u];
}

bool connect() {
        for (int i = 0; i < 26; i++) {
                if (in[i] + out[i] == 0) continue;
                for (int j = i + 1; j < 26; j++) {
                        if (in[j] + out[j] == 0) continue;
                        if (find(i) != find(j)) return 0;
                }
        }
        return 1;        
}

bool ok(int l, int r) {
        for (int i = l; i <= r; i++)
                if (tmp[i])
                        return 0;
        return 1;
}

int main() {
        int test, n, len;
        scanf("%d", &test);
        while (test--) {
                scanf("%d", &n);
                memset(in, 0, sizeof(in));
                memset(out, 0, sizeof(out));
                for (int i = 0; i < 26; i++) p[i] = i;
                for (int i = 0; i < n; i++) {
                        scanf("%s", ss);
                        len = strlen(ss);
                        int a = ss[0] - 'a', b = ss[len - 1] - 'a';
                        out[a]++;
                        in[b]++;
                        int fa = find(a), fb = find(b);
                        if (fa != fb)
                                p[fa] = fb;
                }
                if (!connect()) {
                        puts("The door cannot be opened.");
                        continue;
                }

                for (int i = 0; i < 26; i++)
                        tmp[i] = in[i] - out[i];
                sort(tmp, tmp + 26);
                if (ok(0, 25) || (ok(1, 24) && tmp[0] == -1 && tmp[25] == 1)) {
                        puts("Ordering is possible.");
                }
                else
                        puts("The door cannot be opened.");
        }
        return 0;
}