#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

int g[30][30],inc[30],out[30],vis[30];

void dfs(int u)
{
    vis[u] = 1;
    REP(i,0,25)
    {
        if(g[u][i] == 1 && vis[i] == -1 )
            dfs(i);
    }
}

bool check()
{
    memset(vis,-1,sizeof(vis));
    REP(i,0,25)
    {
        REP(j,0,25)
        {
            if( g[i][j] == 1 )
            {
                dfs(i);
                REP(p,0,25)
                {
                    REP(q,0,25)
                    {
                        if( g[p][q] == 1 && ( vis[p] == -1 || vis[q] == -1 ) )
                            return false;
                    }
                }
                return true;
            }
        }
    }
    return true;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","r",stdout);
    int t;s(t);
    while( t-- )
    {
        bool ans = true;
        int n;s(n);
        char a[1009];
        memset(inc,0,sizeof(inc));
        memset(out,0,sizeof(out));
        memset(g,0,sizeof(g));
        REP(i,0,n - 1)
        {
            scanf("%s",a);
            inc[a[0] - 'a']++;
            int len = strlen(a);
            out[a[len - 1] - 'a']++;
            g[a[0] - 'a'][a[len - 1] - 'a'] = 1;
            g[a[len - 1] - 'a'][a[0] - 'a'] = 1;
        }
        int cnt1 = 0 , cnt2 = 0 ;
        REP(i,0,25)
        {
            if( out[i] - inc[i] == 1 )
                cnt1++;
            else if( inc[i] - out[i] == 1 )
                cnt2++;
            else if( inc[i] != out[i] )
            {
                cnt1 += 20;
                break;
            }
        }
        if( check() && cnt1 <= 1 && cnt2 <= 1 )
            printf("Ordering is possible.\n");
        else
            printf("The door cannot be opened.\n");
    }
    return 0;
}
