//
//  PLAY ON WORDS.cpp
//  Created by UJJWAL CHHIBBER on 14/5/14.
//  Copyright (c) 2014 UJJWAL CHHIBBER. All rights reserved.
//
#include <iostream>
#include <cstring>
#include <list>
#include <algorithm>
using namespace std;
#define gc getchar_unlocked
#define rd readInt()
char ip[105];
class Graph{
    int V;
    list<int> *adj;
    int in[26];
    int out[26];
    int found[26];
public:
    Graph() {
        V = 26; adj = new list<int>[V];
        int i;
        for(i=0;i<26;++i) { in[i] = out[i] = 0; found[i] = -1; }
    }
    void push(int u,int v) {  adj[u].push_back(v); adj[v].push_back(u); out[u]++; in[v]++; found[u] = found[v] = 1; }
    int foo();
    int dfs(int i,bool visited[]);
    void dfs_recur(int i,bool visited[]);
    
    
};
void Graph::dfs_recur(int i, bool visited[]){
    
    visited[i] = true;
    
    list<int> :: iterator k;
    
    for(k = adj[i].begin();k != adj[i].end();++k)
        if(!visited[(*k)])
            dfs_recur((*k), visited);
}
int Graph::dfs(int i,bool visited[]){
    
    visited[i] = true;
    list<int> :: iterator k;
    
    for(k = adj[i].begin();k != adj[i].end();++k)
        if(!visited[(*k)])
            dfs_recur((*k), visited);
}
int Graph:: foo(){
    
    int i;
    bool visited[26];
    int j;
    
    for(j=0;j<26;++j) visited[j] = false;
    
    for(i=0;i<26;++i)
    {
        if(found[i] != -1)
            break;
    }
    dfs(i,visited);
    int count = 0;
    for(i=0;i<26;++i)
    {
        
        if(visited[i] == false && found[i] == 1)  return 0;
        
        if(abs(in[i] - out[i]) == 1)
            count++;
        if(count > 2) return 0;
        
        if(abs(in[i] - out[i]) >= 2)
            return 0;
    }
    return (count == 0 || count == 2);
    
}
int main()
{
    int n,t;
    char p,q;
    scanf("%d",&t);
  int  i;
    while(t--)
    {
        scanf("%d\n",&n);
        Graph g;
        i=0;
        while(n--){
        scanf("%s",ip);
        p = ip[0]; q = ip[(int)strlen(ip)-1];
            g.push(p-'a', q-'a');
        }
        if(g.foo())
            printf("Ordering is possible.\n");
        else
            printf("The door cannot be opened.\n");
        
    }
    return 0;
}