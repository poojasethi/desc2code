// In the name of GOD
#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define ll long long
#define ull unsigned long long
#define pii pair<int,int>
#define pll pair<ll,ll>
#define piii pair < int,pair <int,int> >
#define f first
#define s second
#define MOD 1000000007
#define IOS ios_base::sync_with_stdio(0)
#define PI 3.1415926535897932384626
int dx[4]={-1,1,0,0};
int dy[4]={0,0,-1,1};
bool  isone(ll,int);
int count(ll);
ll exp(ll,ll,ll);
ll GCD(ll,ll);
int d[30][2];
int vis[30];
int a[30][30];
int main()
{
	IOS;
	#ifndef ONLINE_JUDGE
    freopen("WORDS1in.txt", "r", stdin);
	#endif
	int tc;cin>>tc;
	int n;
	while(tc--)
	{
		cin>>n;
		for(int i=0;i<27;i++)
			d[i][0]=d[i][1]=0;
		for(int i=0;i<30;i++)
			for(int j=0;j<30;j++)
				a[i][j]=0;
		for(int i=0;i<n;i++)
		{
			string s;cin>>s;
			d[s[0]-'a'][1]++;
			d[s[s.length()-1]-'a'][0]++;
			a[s[0]-'a'][s[s.length()-1]-'a']=1;
			a[s[s.length()-1]-'a'][s[0]-'a']=1;
		}
		for(int i=0;i<26;i++)
			vis[i]=0;
		int f1=0,f2=0;
		for(int i=0;i<26;i++)
		{
			if((d[i][1]-d[i][0])==1)
				f1++;
			else if((d[i][0]-d[i][1])==1)
				f2++;
			else if(d[i][0]!=d[i][1])
			{
				f1=1000;
				break;
			}
		}
		int c=0;
		for(int i=0;i<26;i++)
		{
			if(!vis[i])
			{
				if(!d[i][1])
					continue;
				stack<int> b;
				b.push(i);
				vis[i]=1;
				++c;
				while(!b.empty())
				{
					int t=b.top();
					b.pop();
					for(int j=0;j<26;j++)
					{
						if(!vis[j] && a[t][j])
						{
							vis[j]=1;
							b.push(j);
						}
					}
				}
			}
		}
		if((c==1) && (f1==f2) && f1<=1)
			cout<<"Ordering is possible.\n";
		else	
			cout<<"The door cannot be opened.\n";
	}
	return 0;
}

ll GCD(ll a,ll b)
{
   if(!b) return a;
   else   return GCD(b,a%b);
}
ll exp(ll a,ll b,ll c)
{
	ll ret=1;
	ll mult=a;
	while(b)
	{
		if(b&1)	ret=(ret*mult)%c;
		mult=(mult*mult)%c;
		b>>=1;
	}
	return ret;
}
int count(ll x)
{
   int ret=0;
   while(x)
   {
		   if(x&1)  ret++;
		   x>>=1LL;
   }
   return ret;
}

bool isone(ll x,int pos)
{
	 return x&(1<<pos);
}



