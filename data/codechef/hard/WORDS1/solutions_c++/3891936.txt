#include<iostream>
using namespace std;
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<math.h>
class node
{
    public:
    int v;
    int visited;
    node *link;
    node()
    {
        visited=0;
        link=NULL;
        v=0;
    }
};
class adj
{
    public:
    node *head;
    adj()
    {
        head=NULL;
    }
    void push(int x)
    {
        node *newnode;
        newnode=new node;
        newnode->v=x;
        if(head==NULL)
        {
            head=newnode;
        }
        else
        {
            newnode->link=head->link;
            head->link=newnode;
        }
    }
};
int dfs(int r,adj *vlist)
{
    /*visited[r]=1;
    for(int i=0;i<26;i++)
    {
        if(adj[r][i]!=0 && visited[i]!=1)
        {
            dfs(i);
        }
    }*/
    int count=0,i=0;
    node *ptr;
    int z[26]={0};
    int flag;
    while(1)
    {
        i++;
    while(1)
    {
        count++;
        //printf("\n%d %d\n",r,count);
        ptr=(vlist[r].head);
        if(ptr==NULL)
        break;
        vlist[r].head=vlist[r].head->link; // deleting the node
        if((vlist[r].head)==NULL)
        z[r]=1;
        else
        z[r]=2;
        r=ptr->v;
        //printf("\ncount=%d\n",count);
    }
    flag=1;
    for(int j=0;j<26;j++)
    {
        if(z[j]==2)
        {
        r=j;
        flag=0;
        break;
        }
    }
    if(flag==1)
    break;
    }
    //printf("\ncount=%d\n",count);
    return count-i;
}
int main()
{
    int t,n,flag,i,r,c,num;
    char a[1003];
    scanf("%d",&t);
    while(t--)
    {
        r=-1;
        flag=1;
        int start[26]={0},end[26]={0},len,count1=0,count2=0;
        scanf("%d ",&n);
        adj vlist[26];
        for(i=0;i<n;i++)
        {
            scanf("%s",a);
            len=strlen(a);
            start[a[0]-97]++;
            end[a[len-1]-97]++;
        //if(adj[a[0]-97][a[len-1]-97]==0)
            vlist[a[0]-97].push(a[len-1]-97);
        }
        for(i=0;i<26;i++)
        {
            if(fabs(start[i]-end[i])>=2)
            {
            flag=0;
            break;
            }
            else if((start[i]-end[i])==1)
            {
                count1++;
                if(count1==2)
                {
                    flag=0;
                    break;
                }
                r=i;
            }
            else if((start[i]-end[i])==(-1))
            {
                count2++;
                if(count2==2)
                {
                    flag=0;
                    break;
                }
            }
        }
        if(flag==0)
        cout<<"The door cannot be opened.\n";
        else
        {
            //cout<<"r="<<r<<"\n";
            if(r==-1)
            r=a[0]-97;
        flag=dfs(r,vlist);
        if(flag!=n)
        cout<<"The door cannot be opened.\n";
        else
        cout<<"Ordering is possible.\n";
        }
    }
    return 0;
}
