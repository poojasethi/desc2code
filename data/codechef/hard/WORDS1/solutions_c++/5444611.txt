#include <stdio.h>
using namespace std;
int n, s[26][26],sss[26];
#define MAX_BUFFER (512*1024)
char inBuffer[MAX_BUFFER];
int inBuffFilled=0,inBuffCurrent=0;
inline void fillInBuffer()
{
inBuffFilled = fread(inBuffer,1,MAX_BUFFER,stdin);
inBuffCurrent = 0;
}
inline char getNextChar()
{
if(inBuffCurrent>=inBuffFilled){fillInBuffer();}
return inBuffer[inBuffCurrent++];
}
inline void skipSpaces(){while(inBuffer[inBuffCurrent] == ' ' || inBuffer[inBuffCurrent] == '\n')inBuffCurrent++;}
unsigned long inReadNum()
{
long num = 0;
skipSpaces();
char ch;
while(1){
ch = getNextChar();
if(ch >= '0' && ch <= '9')
{
num = (num*10)+(ch-'0');
}else{
return num;
}
}
}
unsigned int inFirstLetter()
{
skipSpaces();
char ch = getNextChar();
return (ch-'a');
}
unsigned int inLastLetter()
{
char prev = getNextChar();
char curr=prev;
do{
prev=curr;
curr=getNextChar();
}while(curr >= 'a' && curr <='z');
return (prev-'a');
}
void find_connected(int ch){
sss[ch]=0;
for(int i=0;i<26;i++){
if(s[ch][i]!=0 || s[i][ch]!=0) {s[ch][i]=0;s[i][ch]=0; find_connected(i);}
}
}
int main(){
int t,ss[26],chk,i,j;
t = inReadNum();
while (t--){
for(n=0;n<26;n++){ ss[n]=0; sss[n]=0;
for(chk=0;chk<26;chk++) s[n][chk]=0;}
n = inReadNum();
while(n--){
i = inFirstLetter();
j = inLastLetter();
ss[i]++;
sss[i]=1;
sss[j]=1;
ss[j]--;
s[i][j] ++;
}
chk =0;
for(n=0;n<26;n++) {
if(ss[n]==0) chk ++;
else if(ss[n]!=-1 && ss[n]!=1) {
chk = -1; break;
}
}
if(chk<24) printf("The door cannot be opened.\n");
else {
find_connected (i);
for(n=0;n<26;n++) if(sss[n]!=0){chk=-1;break;}
if(chk==-1) printf("The door cannot be opened.\n");
else printf("Ordering is possible.\n");
}
}
 
return 0;
}