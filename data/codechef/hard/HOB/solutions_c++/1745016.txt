#include<cstdio>
#include<cstring>
using namespace std;

int num[505][505];

#define LIM 350000
#define INF 2000000007
int A[LIM+5];//series
int S[LIM+5];//sum
int period[505];

int freetime[505];//free time of rooms
bool room[505];//whether available or not
unsigned long long int powalpha[15];//pow of 33

void pre()
{
	//generate all posssible shifts for all number of rooms and attemts for it
	for(int r=0;r<=500;r++)
		for(int j=0;j<=500;j++)
			num[r][j]=INF;
	for(int r=1;r<=500;r++)
	{
		for(int k=0;;k++)
		{
		  A[k] = (k < 3 ? k : A[k - 1] + A[k - 2] + A[k - 3]) % r;
		  S[k] = A[k];
				if (k > 0) {
					S[k] = (S[k] + S[k - 1]) % r;
				}
				if(num[r][S[k]]==INF)
				num[r][S[k]]=k;
				if (k >= 3 && S[k - 3] == 0 && A[k - 2] == 0 && A[k - 1] == 1 % r && A[k] == 2 % r) {
					period[r]=k;break;
				}
		}
	}
	powalpha[0]=1;
	for(int i=1;i<10;i++)
		powalpha[i]=(powalpha[i-1]*33);
}

int main()
{
	int T,N,R,H,M,G;
	char name[20];
	pre();
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d%d",&N,&R);
		for(int i=0;i<=500;i++)
			room[i]=true;
		unsigned long long int previncv=0;
		int nd=0;
		int prevT=0;
		for(int i=0;i<N;i++)
		{
			scanf("%d%d%d%s",&H,&M,&G,name);
			//monitor day change
			if((H*60+M)<prevT)
				nd++;
			prevT=H*60+M;
			int len=strlen(name);
			unsigned long long int rng=0;
			for(int i=0;i<len;i++)
			{
				if(name[i]>=65&&name[i]<=90)
					rng=(rng+(name[i]-64)*(powalpha[len-1-i]));
				else
					rng=(rng+(name[i]-96)*(powalpha[len-1-i]));
			}
			rng=(rng+previncv)%R;
			int time=nd*24*60+H*60+M;//convert all in minutes
			for(int i=0;i<R;i++)
			{
				if(room[i]==false)
					if(freetime[i]<=time) {
						freetime[i]=0;
						room[i]=true;
					}
			}

			if(room[rng]==true) {
				room[rng]=false;
				freetime[rng]=time+G*60;
				printf("0\n");
				continue;
			}

			int attempts=INF;
			int occupy=-1;
			int minfreetime=INF;
			for(int i=1;i<R;i++)
			{
				int rr=rng+i;
				if(rr>=R) rr-=R;
				if(room[rr]==true)
					if(num[R][i]<attempts) {
						attempts=num[R][i];
						occupy=rr;
					}
				if(minfreetime>freetime[rr] && num[R][i]<INF)
					minfreetime=freetime[rr];
			}
			if(attempts!=INF)
			{
				freetime[occupy]=time+G*60;
				room[occupy]=false;
				printf("%d\n",attempts);
				previncv+=attempts;
			}
			else
			{
				if(minfreetime>freetime[rng])
					minfreetime=freetime[rng];
				printf("-%d\n",minfreetime-time);
				previncv+=(minfreetime-time);
			}
		}
	}
	return 0;
}
