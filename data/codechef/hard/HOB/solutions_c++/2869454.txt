#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cassert>
#define ll long long
using namespace std;

#define get(x) { \
  char c;\
  while((c=getchar_unlocked())<=' ');\
  x=c-'0';\
  while((c=getchar_unlocked())>='0')\
    x+=x+(x<<3)+c-'0';\
  }
  
char ww[32], *kw;
#define put(x_) { \
    int m= x_<0 ? -1 : 1; kw=ww+29;\ 
    int x= m<0 ? -x_ : x_;\ 
    *kw=x%10+'0';\
    while (x/=10) {--kw; *kw=x%10+'0';}\
    if (m<0) {--kw; *kw='-';}\
    while (*kw) putchar_unlocked(*kw++);\
  }

int tpp[501] = {0, 1, 4, 13, 8, 31, 52, 48, 16, 39, 124, 110, 104, 168, 48, 403, 32, 96, 156, 360, 248, 624, 220, 553, 208, 155, 168, 117, 48, 140, 1612, 331, 64, 1430, 96, 1488, 312, 469, 360, 2184, 496, 560, 624, 308, 440, 1209, 2212, 46, 416, 336, 620, 1248, 168, 52, 468, 3410, 48, 4680, 140, 3541, 3224, 1860, 1324, 624, 128, 5208, 2860, 1519, 96, 7189, 1488, 5113, 624, 5328, 1876, 2015, 360, 2640, 2184, 3120, 992, 351, 560, 287, 624, 2976, 308, 1820, 880, 8011, 4836, 336, 4424, 4303, 92, 11160, 832, 3169, 336, 4290, 1240, 680, 1248, 51, 336, 19344, 52, 1272, 936, 990, 6820, 6097, 96, 12883, 4680, 17143, 280, 2184, 14164, 96, 6448, 1210, 1860, 7280, 2648, 775, 624, 5376, 256, 4004, 5208, 5720, 5720, 720, 6076, 3627, 96, 18907, 28756, 3864, 1488, 598, 20452, 9240, 1248, 4340, 5328, 4368, 3752, 7400, 8060, 2850, 720, 1248, 2640, 10261, 2184, 8269, 3120, 52, 1984, 26544, 1404, 162, 560, 44330, 1148, 9296, 624, 2184, 2976, 4680, 616, 2494, 1820, 7440, 1760, 46033, 32044, 32221, 9672, 10981, 336, 24180, 8848, 14539, 17212, 5280, 184, 1872, 11160, 36673, 1664, 4656, 12676, 67704, 336, 3234, 8580, 198, 2480, 19747, 680, 1680, 1248, 17360, 204, 21567, 672, 3960, 19344, 5565, 104, 66469, 1272, 9548, 1872, 15888, 1980, 69264, 13640, 672, 24388, 16651, 192, 6045, 51532, 17176, 4680, 17557, 68572, 34320, 560, 9048, 2184, 1426, 28328, 3120, 96, 4760, 12896, 29040, 2420, 1053, 3720, 10416, 7280, 2520, 5296, 3731, 3100, 63253, 624, 60830, 5376, 38688, 512, 256, 4004, 22512, 5208, 5460, 5720, 23056, 11440, 1612, 720, 104143, 12152, 268, 14508, 73440, 96, 4368, 75628, 3410, 57512, 12788, 3864, 12909, 1488, 13160, 1196, 13348, 40904, 145080, 9240, 1680, 2496, 1632, 4340, 41197, 5328, 28616, 4368, 109771, 7504, 12870, 7400, 13272, 16120, 3696, 5700, 8840, 1440, 1860, 1248, 31416, 2640, 663, 41044, 310, 4368, 32761, 33076, 19344, 3120, 100807, 52, 1540, 3968, 16536, 26544, 1440, 2808, 26040, 324, 12870, 560, 1104, 88660, 36631, 2296, 18291, 9296, 1519, 1248, 16224, 2184, 12883, 2976, 36410, 4680, 2352, 1232, 222859, 4988, 40136, 3640, 17400, 7440, 6552, 3520, 124963, 184132, 158503, 64088, 1248, 128884, 42960, 19344, 6840, 43924, 15730, 336, 165168, 24180, 45019, 17696, 21840, 58156, 624, 34424, 139128, 5280, 10075, 368, 840, 1872, 48007, 11160, 69888, 146692, 147073, 3328, 81840, 4656, 12012, 25352, 151711, 67704, 53088, 336, 5720, 6468, 96720, 17160, 132, 396, 9360, 4960, 400, 78988, 55608, 680, 10881, 1680, 51590, 1248, 41820, 17360, 245791, 408, 169968, 86268, 8897, 1344, 50232, 3960, 418, 19344, 420, 22260, 1794, 208, 14880, 265876, 7440, 1272, 120120, 9548, 61920, 3744, 62641, 15888, 56420, 3960, 199080, 69264, 6424, 27280, 4368, 672, 196693, 48776, 248341, 66604, 96200, 384, 202051, 24180, 6160, 103064, 37050, 17176, 10416, 9360, 34808, 70228, 3744, 137144, 35420, 34320, 71611, 1120, 133393, 9048, 218557, 2184, 72912, 2852, 107497, 56656, 1540, 3120, 11160, 96, 156, 4760, 76480, 25792, 11256, 29040, 345072, 4840, 98239, 4212, 79219, 7440, 2106, 10416, 10045, 7280, 3360, 2520, 132990, 10592, 245424, 14924, 166, 6200};

vector<pair<int,int> > rseq[501];
vector<int> rooms;

struct guest{int tim,room;
    guest(){}
    guest(int t,int r):tim(t), room(r) {}
    bool operator()(const guest &a, const guest &b) const {
        if (a.tim==b.tim) return a.room<b.room;
        return a.tim<b.tim;
    }
};

multiset<guest,guest> mg;
multiset<guest>::iterator git;

char name[20];

int tt,N,R,h,m,g,vt,ovt,day;
int allinconv;

int mm=0;
void prep(int n) {
    mg.clear();
    rooms.clear();
    rooms.resize(n);
    if (!rseq[n].empty()) return;
    //printf("n=%d: ",n);
    int cr=0,r=0;
    int a=0,b=1,c=0;
    for (int i=0;cr<n && i<tpp[n];i++) {
        //printf("%d,",r);
        if (rooms[r]==0) {
            rooms[r]=1;
            rseq[n].push_back(pair<int,int>(r,i));
            //if (i>mm) mm=i;
            cr++;
        }
        int p=(a+b+c)%n;
        r=(r+p)%n;
        a=b;b=c;c=p;
    };
    //printf("cr=%d/%d: r=%d:",cr,n,r);
    //for(int i=0;i<rseq.size();i++) printf("%d(%d),",rseq[i].first,rseq[i].second);
    //printf("\n");
    for (int i=0;i<n;i++) rooms[i]=0;
}

void getname(char *s) {
    while ((s[0]=getchar_unlocked())<=' ');
    int i=1;
    while ((s[i]=getchar_unlocked())>='A') i++;
    s[i]=0;
}

int RNG(char *s) {
    int w=0;
    for(int i=0;s[i];i++) {
        char c=s[i];
        if (c<'a') c+=32;
        w=(w*33+c-96)%R;
    }
    return w;
}



int check_guest(int r0,int vt,int g60) {
    //printf("RNG=%d, vt=%d, g=%d\n",r0,vt,g60);
    while (!mg.empty() && mg.begin()->tim<=vt) {rooms[mg.begin()->room]=0; mg.erase(mg.begin());} 
    //for (int i=0;i<R;i++) printf("%d,",rooms[i]); printf("\n");
    int r=r0,inc=0,m=rooms[r0];
    bool fr=false;
    for (int i=0;!fr && i<rseq[R].size();i++) {
        r=(r0+rseq[R][i].first)%R;
        //printf("%d->",r);
        if (rooms[r]==0) {fr=true; inc=rseq[R][i].second;}
        else 
            if (rooms[r]<m) m=rooms[r];
    }
    if (fr) {
        if (g60>0) {
            mg.insert(guest(vt+g60,r)); 
            rooms[r]=vt+g60;
        }
    //for (int i=0;i<R;i++) printf("%d,",rooms[i]); printf("\n");  
        return inc;
    }
    else return vt-m;

}

int main() {
ww[30]='\n';
get(tt);
while(tt--) {
    get(N);get(R);
    prep(R); ovt=0; day=0; allinconv=0;
    for (int i=0;i<N;i++) {
        get(h);get(m);get(g);
        getname(name);
        vt=h*60+m; 
        if (vt<ovt) day+=1440;
        ovt=vt;
        int inc=check_guest((int)((RNG(name)+allinconv)%R),vt+day,g*60);
        //printf("%s\t%d\n",name,(RNG(name)+allinconv)%R);
        put(inc);
        allinconv=(allinconv+abs(inc))%R;
    }
    //for(git=mg.begin();git!=mg.end();git++)        printf("%d %d\n",git->time,git->room);
}    
return 0;
}