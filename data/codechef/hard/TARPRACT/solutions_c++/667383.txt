#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <sstream>
#include <cstring>

using namespace std;

#define REP(i,a,b) for(i=(int)a;i<(int)b;i++)
#define rep(i,n) REP(i,0,n)

typedef long long ll;

int N,l,s,r;
int done[1<<18];
double memo[1<<20];

int t;

double rec(int hash, int left, int right);

inline double next(int hash, int i, int left, int right) {
  //printf("%d %d: %d %d\n", hash, i, hash&~((1<<(i+1))-1), hash&((1<<i)-1));
  return rec(hash&~(1<<i),left,right);
  //return rec(hash&~((1<<(i+1))-1)) + rec(hash&((1<<i)-1));
}

double rec(int hash, int left, int right) {
  if(0 == hash) return 0;
  if(done[hash] == t) return memo[hash];
  int i;

  REP(i,left,right-1) if((hash&3<<i) == 0) {
    int m = (1<<i)-1;
    return memo[hash] = rec(hash&~m,i+1,right) + rec(hash&m,left,i+1);
  }

  done[hash] = t;
  double res = 1e300;

  REP(i,left,right) {
    double v = 0;
    int rp = 100;

    if(i > 0 && (hash>>(i-1)&1) == 1) {
      v += l*(next(hash,i-1,left,right)+1)/100.0;
      rp -= l;
    }

    if(i < N-1 && (hash>>(i+1)&1) == 1) {
      v += r*(next(hash,i+1,left,right)+1)/100.0;
      rp -= r;
    }

    if((hash>>i&1) == 1) {
      v += s*(next(hash,i,left,right)+1)/100.0;
      rp -= s;
    }

    if(rp == 100) {
      continue;
    }

    v = (rp/100.0+v)/(1-rp/100.0);
    res = min(res,v);
  }
  return memo[hash] = res;
}

int main() {
  int T; scanf("%d",&T);
  for(t = 1; t <= T; t++) {
    scanf("%d%d%d%d",&N,&l,&s,&r);
    //memset(done,0,sizeof(done));
    printf("%.6f\n", rec((1<<N)-1,0,N));
  }

  return 0;
}
