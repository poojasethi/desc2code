#include <stdio.h>

double dp[1<<18];

int n;
double v[3];

double DFS(int l, int r, int mask){
	double ret, pstay, moves;
	int i, j;
	
	if (dp[mask] > -.5){
		return dp[mask];
	}
	if (!mask || l > r){
		return 0;
	}
	for (i=l; i<r-1; i++){
		if (!(mask & (3<<i))){
			int m1 = mask & ((1 << (i + 1)) - 1);
			return dp[mask] = DFS(i+1, r, mask ^ m1) + DFS(l, i, m1);
		}
	}
	ret = 1e10;
	for (i=0; i<n; i++){
		pstay = 0;
		moves = 0;
		for (j=-1; j<=1; j++){
			if (i + j < 0 || i + j >= n || !((1 << (i+j)) & mask)){
				pstay += v[j+1];
			} else {
				moves += v[j+1] * DFS(l, r, mask ^ (1 << (i+j)));
			}
		}
		moves++;
		pstay = 1.0 - pstay;
		if (pstay < 1e-8){
			continue;
		}
		moves /= pstay;
		ret = ret >= moves? moves : ret;
	}
	return dp[mask] = ret;
}

int main(){
	int T, i, j;
	scanf("%d", &T);
	for (i=0; i<T; i++){
		scanf("%d%lf%lf%lf", &n, &v[0], &v[1], &v[2]);
		v[0] /= 100;
		v[1] /= 100;
		v[2] /= 100;
		for (j=0; j<(1<<n); j++){
			dp[j] = -1.0;
		}
		printf("%.6lf\n", DFS(0, n, (1<<n)-1));
	}
	return 0;
}
