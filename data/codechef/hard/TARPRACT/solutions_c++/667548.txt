//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

using namespace std;

#define FOR(i,a,b)					for(int i=a;i<b;i++)
#define REP(i,n)					FOR(i,0,n)
#define pb						 	push_back
#define mp						 	make_pair
#define s(n)						scanf("%d",&n)
#define sl(n) 						scanf("%lld",&n)
#define sf(n) 						scanf("%lf",&n)
#define ss(n) 						scanf("%s",n)
#define fill(a,v) 					memset(a, v, sizeof a)
#define sz							size()
#define INF							(int)1e9
#define EPS							1e-9
#define bitcount					__builtin_popcount
#define all(x)						x.begin(), x.end()
#define gcd							__gcd
#define maX(a,b)					(a>b?a:b)
#define miN(a,b)					(a<b?a:b)
#define DREP(a)						sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind)				lower_bound(all(arr),ind)-arr.begin()

typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef long long LL;
typedef vector<long long > VLL;
typedef pair<int, int > PII;

/*Main code begins now */
int testnum;
int n;
double L,C,R;
double dp[1<<18];


void preprocess()
{

}

void doit(int n,int len)
{
	for(int i=0;i<len;i++)
	{
		printf("%d",n&1);
		n>>=1;
	}
	printf("\n");
}

void solve()
{
	int cnt1=0,cnt2=0;
	int z,lmask,rmask;
	for(int i=(1<<n)-1;i>=0;i--)
	{
		if(i==(1<<n)-1)
		{
			dp[i]=0;
			continue;
		}
		
		z=i&(i<<1);
		bool ok=true;
		if(z)
		{
			//cnt1++;
			ok=false;
			z=(z&-z);
			rmask = ((z>>1)-1);
			lmask = ((1<<n)-1) -z - (z>>1) - rmask;
			
			if((i|rmask)==i || (i|lmask)==i)
				ok=true;
			else
				dp[i] = dp[i|rmask] + dp[i|lmask];
		}
		
		if(ok)
		{
			//cnt2++;
			double best=INF;
			for(int j=0;j<n;j++)
			{
				double rec=0;
				double oth=0;
				
				if(j>0 && (i&(1<<(j-1)))==0)
					oth += L*dp[i+(1<<(j-1))];
				else
					rec += L;
					
				if((i&(1<<j))==0)
					oth += C*dp[i+(1<<j)];
				else
					rec += C;
					
				if(j+1<n && (i&(1<<(j+1)))==0)
					oth += R*dp[i+(1<<(j+1))];
				else
					rec += R;
					
				if(rec+EPS>=1) continue;
				double cur = (1+oth)/(1-rec);
				best=min(best,cur);
			}
			dp[i]=best;
		}
	}
	
	printf("%.6f\n",dp[0]);
	//printf("%d %d\n",cnt1,cnt2);

}

bool input()
{
	s(n);
	int a,b,c;
	s(a); s(b); s(c);
	L=a/100.0;
	C=b/100.0;
	R=c/100.0;
	return true;
}


int main()
{
	preprocess();
	int T; s(T);
	for(testnum=1;testnum<=T;testnum++)
	{
		if(!input()) break;
		solve();
	}
}
