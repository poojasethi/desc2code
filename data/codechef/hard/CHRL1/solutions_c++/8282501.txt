#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

int N, K; // N in [1, 10], k in [1, 100000000]
int T = 1;
struct Orange
{
  int c;
  int w;
};
Orange O[10+1];

struct greaterCost : public std::binary_function<Orange, Orange, bool>
{
  bool operator()(const Orange& l, const Orange& r) const
  {
    return (l.c > r.c);
  }
};


int solve(int index, int rubles)
{
  if(index >= N)
    return 0;

  const Orange &o = O[index];
  const int nextRubles = rubles - o.c;
  int wBuy = (nextRubles >= 0) ? (o.w + solve(index + 1, nextRubles)) : 0;
  int wNoBuy = solve(index + 1, rubles);

  return (wBuy > wNoBuy) ? wBuy : wNoBuy;
}

int main()
{
  fastread(&T); // [1, 250]

  while(T--)
  {
    fastread(&N);
    fastread(&K);

    for(int i = 0; i < N; ++i)
    {
      fastread(&O[i].c);
      fastread(&O[i].w);
    }

    std::sort(O, O + N, greaterCost());
    int result = solve(0, K);

    printf("%d\n", result);
  }

  return 0;
}
