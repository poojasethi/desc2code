#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;

map<pair<int, int>, int> pairs;
int n, k;
int weight[11];
int cost[11];

int max_weight(int i, int allowance){
	map<pair<int, int>, int> :: iterator it = pairs.find(make_pair(i, allowance));
	if(it != pairs.end()){
		return it->second;
	}

	if(i >= n){
		return 0;
	}

	if(allowance == 0){
		return 0;
	}

	int opt1 = max_weight(i+1, allowance), opt2 = 0;
	if(allowance >= cost[i])
		opt2 = max_weight(i+1, allowance - cost[i]) + weight[i];

	// cout << i << " " << allowance << " " << opt1 << " " << opt2 << endl;
	pairs.insert(make_pair(make_pair(i, allowance), max(opt2, opt1)));
	
	return max(opt2, opt1);
}

int main(){
	int t;
	cin >> t;
	while(t--){
		scanf("%d %d", &n, &k);

		for (int i = 0; i < n; ++i)
		{
			int c, w;
			scanf("%d %d", &c, &w);
			cost[i] = c;
			weight[i] = w;
		}

		printf("%d\n", max_weight(0, k));
		pairs.clear();
	}
}