#include <bits/stdc++.h>
#define ll long long int
#define MAX 1000000
#define MOD 1000000007
#define vint vector <int>
#define vpint vector <pair<int,int> >
#define pb push_back
#define ms(x,v) memset(x,v,sizeof x)
#define pr_arr(i,x,size) for(i=0;i<size;i++) cout<<x[i]<<" "
#define ff(i,a,b) for(i=a;i<=b;i++)
#define fb(i,a,b) for(i=a;i>=b;i--)
#define gprint(i) cout<<"Case #"<<i<<": "
using namespace std;

int n,u,v;
int lca;
vint uvect;
vint vvect;

vint :: reverse_iterator rit;
int upow=1,vpow=1,uadd=0,vadd=0;

void calculate()
{
	uvect.clear();
	vvect.clear();
	uadd=0;
	upow=1;
	vpow=1;
	vadd=0;
	while(u!=v)								//go up till lca is found
	{
		if(u>v)
		{
			uvect.pb(u%2);					//add 1 if u is odd && 0 if u is even
			u=u/2;
		}
		if(u<v)
		{
			vvect.pb(v%2);					//add 1 if v is odd && 0 if v is even
			v=v/2;
		}	
	}
	int i;
	if(uvect.empty())						//if u is its lca with v
	{
		upow=1;
		uadd=0;
	}
	if(vvect.empty())						//if v is its lca with u
	{
		vpow=1;
		vadd=0;
	}
	for(rit=uvect.rbegin(),i=1;rit!=uvect.rend();rit++,i++)			//calc upow and uadd such that-
	{
		upow=pow(2,i);												//lca*upow+uadd=u(originally)
		uadd*=2;
		if((*rit))
			uadd++;
	}
	for(rit=vvect.rbegin(),i=1;rit!=vvect.rend();rit++,i++)			//vpow same as upow && vadd same as uadd
	{
		vpow=pow(2,i);
		vadd*=2;
		if((*rit))
			vadd++;
	}
}

int main()
{
	ios::sync_with_stdio(false);
	int q;
	cin>>q;
	while(q--)
	{
		cin>>n>>u>>v;
		calculate();
		int a1,a2;
		a1=(n-uadd)/upow;								//find min node which is lca of u
		a2=(n-vadd)/vpow;								//find min node which is lca of v
		int ans=min(a1,a2);
		printf("%d \n",ans);
	}
	return 0;
}