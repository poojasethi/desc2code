// :)
#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

vector<int> Vu, Vv;

ll bin_search(vector<int>& V, ll n) {
  if (V.empty())
    return n;
  ll l = 1, r = n, m, p;
  while (l < r) {
    m = (l + r + 1) >> 1;
    p = m;
    for (int j = (int)V.size() - 1; j >= 0; j--)
      p = (p << 1) + V[j];
    if (p <= n)
      l = m;
    else
      r = m - 1;
  }
  p = l;
  for (int j = (int)V.size() - 1; j >= 0; j--)
    p = (p << 1) + V[j];
  assert(l >= 1 && p <= n);
  return l;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  ll u, v, n, p, q, r, i;
  cin >> t;
  while (t--) {
    cin >> n >> u >> v;
    if (u == v) {
      cout << n << '\n';
      continue;
    }
    p = u, q = v;
    Vu.clear();
    Vv.clear();
    while (p != q) {
      if (p > q) {
        if (p & 1)
          Vu.push_back(1);
        else
          Vu.push_back(0);
        p = (p >> 1);
      } else {
        if (q & 1)
          Vv.push_back(1);
        else
          Vv.push_back(0);
        q = (q >> 1);
      }
    }
    r = p;
    for (i = (int)Vu.size() - 1; i >= 0; i--)
      r = (r << 1) + Vu[i];
    assert(r == u);
    r = p;
    for (i = (int)Vv.size() - 1; i >= 0; i--)
      r = (r << 1) + Vv[i];
    assert(r == v);
    p = bin_search(Vu, n);
    q = bin_search(Vv, n);
    assert(p >= 1);
    assert(q >= 1);
    cout << min(p, q) << '\n';
  }
  return 0;
}