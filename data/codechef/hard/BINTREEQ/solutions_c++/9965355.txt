//
//  main.cpp
//  ROH
//
//  Created by Akashdeep Saluja on 20/03/16.
//  Copyright (c) 2016 Akashdeep Saluja. All rights reserved.
//

#include <iostream>
#include<math.h>
using namespace std;

#define mod 1000000007

int main() {
    // insert code here...
    int test, i, j,k, l, m, n;
    int u, v;
    scanf("%d", &test);
    while(test--){
        scanf("%d %d %d", &n, &u, &v);
        
        
        //swap u, v to make v larger than u
        if(u>v){
            k = u;
            u = v;
            v = k;
        }
        
        // now v is larger than u
        
        //compute the path for LCA of u, v
        i = u, j = v;
        string s = "", p = "";
        while(true){
            if(i==j){
                break;
            }
            if(i>j){
                if(i%2){
                    //right son
                    i = (i-1)/2;
                    s+="R";
                } else{
                    //left son
                    i = i/2;
                    s+="L";
                }
            } else{
                if(j%2){
                    j = (j-1)/2;
                    p+="R";
                } else{
                    j = j/2;
                    p+="L";
                }
            }
        }
        if(s.size() == 0 and p. size() == 0){
            //node is the same n is the answer
            printf("%d\n", n);
            continue;
        }
        //analyze the upward path
        int ans = 0;
        int one_in = pow(2, p.length());
        i = 1;
        while(true){
            ans += (i/one_in);
            i*=2;
            if((2*i-1)>n)
                break;
        }
        i = i/2;
        n = n - (2*i-1) ;
        if(n!= 0){
            //analyze the sequence of required no. in one_in
            ans += n/(one_in);
            k = 1; l= one_in;
            int unit =  pow(2, p.size()-1);
            for(j = p.size()-1; j>=0;j--){
                if(p[j] == 'L'){
                    l-=unit;
                } else{
                    k+=unit;
                }
                unit/=2;
            }
            //l should be equal to k now
            if(n%one_in >=l)
                ans++;
        }
        cout<<ans<<endl;
        
        
        
        
    }
    return 0;
}
