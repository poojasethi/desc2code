#include <bits/stdc++.h>

using namespace std;

bool check(int med, const vector<int> &A, const vector<int> &B, int pos1, int pos2, int n) {
    long long cur = med;
    for (int i = pos1; i > 0; i--) {
        cur *= 2;
        cur += (A[i - 1] != A[i] * 2);
    }
    //cerr << cur << endl;
    if (cur > n) {
        return false;
    }

    cur = med;
    for (int i = pos2; i > 0; i--) {
        cur *= 2;
        cur += (B[i - 1] != B[i] * 2);
    }
    //cerr << cur << endl;
    if (cur > n) {
        return false;
    }

    return true;
}

void solve() {
    int n, u, v;
    cin >> n >> u >> v;
    assert(1 <= n && n <= 1E9);
    assert(1 <= u && u <= n);
    assert(1 <= v && v <= n);
    vector<int> A, B;
    int uu = u, vv = v;

    do {
        A.push_back(uu);
        uu /= 2;
    }
    while (uu > 0);

    do {
        B.push_back(vv);
        vv /= 2;
    }
    while (vv > 0);

    int pos1, pos2;
    for (int i = 0; i < A.size(); i++) {
        pos1 = i;
        bool ok = false;
        for (int j = 0; j < B.size(); j++) {
            if ( A[i] == B[j] ) {
                pos2 = j;
                ok = true;
            }
        }
        if (ok) {
            break;
        }
    }
    //cerr << pos1 << " " << pos2 << " " << A[pos1] << " " << B[pos2] << endl;
    check(2, A, B, pos1, pos2, n);
    int l = 1, r = n;
    while (l != r) {
        int med = (l + r + 1) / 2;
        if ( check(med, A, B, pos1, pos2, n) ) {
            l = med;
        }
        else {
            r = med - 1;
        }
    }
    cout << l << endl;
}

int main() {
    int test;
    cin >> test;
    assert(1 <= test && test <= 20000);
    for (int i = 0; i < test; i++) {
        solve();
    }
    return 0;
}