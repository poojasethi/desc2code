#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <cassert>

using namespace std;

#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define S(x) 			scanf("%d",&x)
#define SS(x,y)         scanf("%d%d",&x,&y)
#define all(c) 			(c).begin(),(c).end() 
#define sz(c) 			int((c).size())
#define pb 				push_back
#define present(c,x) 	((c).find(x) != (c).end()) 
#define rep(i,x,y) 		for(int i = x; i <= y; i++)
#define REV(i,x,y) 		for(int i = x; i >= y; i--)
#define foreach(c,itr)	for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
#define FILL(a,v) 		memset(a,v,sizeof(a))
#define DB(x)			cerr<<#x<<" = "<<x<<endl
#define debugarr(A,a,b) cerr<<#A<<" : ";rep(i,a,b) cerr<<A[i]<<" ";cerr<<endl;
//#define R(x) 			((rand()%x) + 1)

typedef long long int LL;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;

/* ------------------------Main Code----------------------- */
const int MAX = 100001;

vi ls, rs;
bool check(int x, int y, int n)
{
	int tr = x, tmp = y;
	REV(i,sz(rs)-1,0){
		int l = tmp<<1, r = l | 1;
		if(rs[i] == l){
			tr <<= 1; 
		}else{
			tr <<= 1;
			tr |= 1;
		}
		tmp = rs[i];
		if(tr > n) return false;
	}	
	tmp = y; tr = x;
	REV(i,sz(ls)-1,0){
		int l = tmp<<1, r = l | 1;
		if(ls[i] == l){
			tr <<= 1; 
		}else{
			tr <<= 1;
			tr |= 1;
		}
		tmp = ls[i];
		if(tr > n) return false;
	}
	return true;
}

int BS(int n, int v)
{
	int lo = 1, hi = n;
	while(lo < hi){
		int mid = lo + ((hi-lo+1)>>1);
		if(check(mid,v,n)) lo = mid;
		else hi = mid - 1;
	}
	return lo;
}

int lca(int l, int r)
{
	while(l != r){
		if(l > r) l >>= 1;
		else r >>= 1;
	}
	return l;
}

int main()
{
	int q;
	S(q);
	while(q--){
		int n, l, r;
		S(n); SS(l,r);
		int parent = lca(l,r);
		int tl = l, tr = r;
		ls.clear(); rs.clear();
		while(tl != parent){
			ls.pb(tl);
			tl >>= 1;
		}
		while(tr != parent){
			rs.pb(tr);
			tr >>= 1;
		}
		printf("%d\n",BS(n,parent));
	}
	return 0;
}