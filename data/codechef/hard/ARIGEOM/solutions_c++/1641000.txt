#include<stdio.h>
#include<cstring>
#include<cmath>
//#define getchar_unlocked getchar
//#define putchar_unlocked putchar
 
int res[100][2][10050];
int rcnt[100][2];
int nray[10000];
int pos[100001];
int prevg[10000];
int preva[10000];
int tests;
int size;
 
int fin()
{
char ch;
int num=0;
ch=getchar();
while(ch<'0'||ch>'9')
ch=getchar();
while(ch>='0'&&ch<='9')
{
num=(num<<3)+(num<<1)+(ch-'0');
ch=getchar();
}
return num;
}
void print(register int N)
{
register int rev=N, count = 0;
while ((rev % 10) == 0)
{
count++;
rev /= 10;
}
rev = 0;
while (N != 0)
{
rev = (rev<<3) + (rev<<1) + N % 10;
N /= 10;
}
while (rev != 0)
{
putchar(rev%10 + '0');
rev /= 10;
}
while (count--)
putchar('0');
putchar(' ');
return ;
}
bool checkap(int prevap,int cd,long long num,long long den,int prevgp)
{
if(prevap>=100000&&prevgp>=100000)
return false;
for(int i=pos[prevap]+1;i<size;++i)
{
if(prevgp<=100000&&i<=pos[prevgp])
{
if(prevap+cd==nray[i])
{
prevap=prevap+cd;
}
continue;
}
else
{
if(((prevgp*num)%den==0)&&((prevgp*num)==nray[i]*den)&&prevap+cd==nray[i])
{
prevgp=(prevgp*num)/den;
prevap=prevap+cd;
continue;
}
if(((prevgp*num)%den==0)&&((prevgp*num)==nray[i]*den))
{
prevgp=(prevgp*num)/den;
continue;
}
if(prevap+cd==nray[i])
{
prevap=prevap+cd;
continue;
}
}
return false;
}
return true;
}
 
bool checkgp(int prevgp,long long num,long long den,int prevap,int cd)
{
if(prevap>=100000&&prevgp>=100000)
return false;
for(int i=pos[prevgp]+1;i<size;++i)
{
if(prevap<=100000&&i<=pos[prevap])
{
if(((prevgp*num)%den==0)&&((prevgp*num)==nray[i]*den))
{
prevgp=(prevgp*num)/den;
}
continue;
}
else
{
if(((prevgp*num)%den==0)&&((prevgp*num)==nray[i]*den)&&prevap+cd==nray[i])
{
prevgp=(prevgp*num)/den;
prevap=prevap+cd;
continue;
}
if(((prevgp*num)%den==0)&&((prevgp*num)==nray[i]*den))
{
prevgp=(prevgp*num)/den;
continue;
}
if(prevap+cd==nray[i])
{
prevap=prevap+cd;
continue;
}
}
return false;
}
return true;
}
void print(int t,int bap,int bgp,int bgp2,int cd) //t first ap firstgp nextgp cd
{
long long num=bgp2;
long long den=bgp;
int acnt=0;
int gcnt=0;
for(int i=0;i<size;++i)
{
if(nray[i]==bap)
{
res[t][0][acnt++]=bap;
bap=bap+cd;
}
if(nray[i]==bgp)
{
res[t][1][gcnt++]=bgp;
if((bgp*num)%den==0)
bgp=(bgp*num)/den;
}
}
rcnt[t][0]=acnt;
rcnt[t][1]=gcnt;
 
 
}
 
int main()
{
tests=fin();
for(int t=0;t<tests;++t)
{
size=fin();
memset(pos,-1,sizeof(pos));
for(int s=0;s<size;++s)
{
nray[s]=fin();
pos[nray[s]]=s;
}
if(size==2)
{
res[t][0][0]=nray[0];
res[t][0][1]=nray[1];
res[t][1][0]=nray[0];
res[t][1][1]=nray[1];
rcnt[t][0]=2;
rcnt[t][1]=2;
}
else if(size==3)
{
res[t][0][0]=nray[0];
res[t][0][1]=nray[1];
res[t][1][0]=nray[1];
res[t][1][1]=nray[2];
rcnt[t][0]=2;
rcnt[t][1]=2;
}
else if(size==4)
{
res[t][0][0]=nray[0];
res[t][0][1]=nray[1];
res[t][1][0]=nray[2];
res[t][1][1]=nray[3];
rcnt[t][0]=2;
rcnt[t][1]=2;
}
else
{
int prevcnt=0;
int prevgp=0;
int prevap=0;
for(int init=0;init<3;++init)
{
if(init>0&&prevcnt<10000)
{
preva[prevcnt++]=nray[init-1];
}
int tprev1=prevcnt;
for(int i=init+1;(prevcnt+i-init-1)<=2&&i<size;++i)
{
if(i-init-1>0&&prevcnt<10000)
preva[prevcnt++]=nray[i-1];
 
long long num=nray[i];
long long den=nray[init];
 
int tprev2=prevcnt;
prevgp=nray[i];
for(int j=i+1;j<size;++j)
{
if(prevcnt==2)
{
int d=preva[1]-preva[0];
for(int k=pos[preva[0]]+1;k<=pos[preva[1]]&&k<10000;++k)
{
int nd=nray[k]-preva[0];
if(d%nd==0)
{
if(checkap(preva[0],nd,num,den,prevgp)) //IsInteger 0.04 sec error NUM , DEN
{
print(t,preva[0],nray[init],nray[i],nd);
goto end;
}
}
}
goto end2;
}
if(prevgp*num!=nray[j]*den&&prevcnt<10000)
{
preva[prevcnt++]=nray[j];
continue;
}
prevgp=nray[j];
}
if(prevcnt==0)
{
print(t,nray[0],nray[init],nray[i],nray[size-1]-nray[0]);
goto end;
}
if(prevcnt==1)
{
if(preva[0]<=100000&&pos[preva[0]]==0)
print(t,preva[0],nray[init],nray[i],nray[size-1]-preva[0]);
else
print(t,nray[0],nray[init],nray[i],preva[0]-nray[0]);
goto end;
}
if(prevcnt==2)
{
print(t,preva[0],nray[init],nray[i],preva[1]-preva[0]);
goto end;
}
end2:;
prevcnt=tprev2;
}
prevcnt=tprev1;
}
prevcnt=0;
for(int init=0;init<3;init++)
{
if(init>0&&prevcnt<10000)
prevg[prevcnt++]=nray[init-1];
int tprev1=prevcnt;
 
for(int i=init+1;(prevcnt+i-init-1)<=2&&i<size;++i)
{
if(i-init-1>0&&prevcnt<10000)
prevg[prevcnt++]=nray[i-1];
int d=nray[i]-nray[init];
prevap=nray[i];
int tprev2=prevcnt;
for(int j=i+1;j<size;++j)
{
if(prevcnt==2&&prevg[1]<=100000&&prevg[0]<=100000)
{
for(int k=pos[prevg[0]]+1;k<=pos[prevg[1]]&&k<size;++k)
{
long long num=nray[k];
long long den=prevg[0];
if(k<pos[prevg[1]]&&(nray[k]*num)%den!=0)
{
continue;
}
if(checkgp(nray[k],num,den,prevap,d))
{
print(t,nray[init],prevg[0],nray[k],d);
goto end;
}
}
goto end3;
}
if(prevap+d!=nray[j]&&prevcnt<10000)
{
prevg[prevcnt++]=nray[j];
continue;
}
prevap=nray[j];
}
if(prevcnt==0)
{
print(t,nray[init],nray[0],nray[size-1],d);
goto end;
}
if(prevcnt==1)
{
if(prevg[0]<=100000&&pos[prevg[0]]==0)
print(t,nray[init],prevg[0],nray[size-1],d);
else
print(t,nray[init],nray[0],prevg[0],d);
goto end;
}
if(prevcnt==2)
{
print(t,nray[init],prevg[0],prevg[1],d);
goto end;
}
end3:;
prevcnt=tprev2;
}
prevcnt=tprev1;
}
return -1;
}
end:;
}
for(int t=0;t<tests;++t)
{
for(int a=0;a<rcnt[t][0];a++)
print(res[t][0][a]);
printf("\n");
//putchar_unlocked('\n');
for(int g=0;g<rcnt[t][1];++g)
print(res[t][1][g]);
printf("\n");
//putchar_unlocked('\n');
}
}