#include <iostream>
#include <cstdio>
#include <vector>
#include <list>
#include <cmath>
#include <fstream>
#include <algorithm>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <complex>
#include <iterator>
#include <cstdlib>
#include <cstring>
#include <sstream>
#include <stack>
#include <climits>
#include <deque>
#include <bitset>
#include <cassert>
#include <ctime>
using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
const int dy[]={-1,0,1,0},dx[]={0,1,0,-1};
// adjust problem by problem
const double EPS=1e-8;
const double PI=acos(-1.0);
#ifdef __GNUC__
int popcount(int n){return __builtin_popcount(n);}
int popcount(ll n){return __builtin_popcountll(n);}
#endif
#ifndef __GNUC__
template<class T> int popcount(T n){int cnt=0;while(n){if(n%2)cnt++;n/=2;}return cnt;}
#endif
template<class T>int SIZE(T a){return a.size();}
template<class T>string IntToString(T num){string res;stringstream ss;ss<<num;return ss.str();}
template<class T>T StringToInt(string str){T res=0;for(int i=0;i<SIZE(str);i++)res=(res*10+str[i]-'0');return res;}
template<class T>T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template<class T>T lcm(T a,T b){return a/gcd(a,b)*b;}
template<class T> void PrintSeq(T &a,int sz){for(int i=0;i<sz;i++){cout<<a[i];if(sz==i+1)cout<<endl;else cout<<' ';}}
bool EQ(double a,double b){return abs(a-b)<EPS;}
void fastStream(){cin.tie(0);std::ios_base::sync_with_stdio(0);}
vector<string> split(string str,char del){
  vector<string> res;
  for(int i=0,s=0;i<SIZE(str);i++){
    if(str[i]==del){if(i-s!=0)res.push_back(str.substr(s,i-s));s=i+1;}
    else if(i==SIZE(str)-1){res.push_back(str.substr(s));}
  }
  return res;
}


int T,N;
int FS[100001];
bool exists[100001];
int used[100001];
int res1[100001];
int res2[100001];
int len1,len2;

void solve(){
  const int lim=20;
  /* 
     ???????񂩂猈?߂Ă???
     ????????̏?????20?𒴂?????A????????????????????Ƃ͕s?\
  */
  memset(exists,0,sizeof(exists));
  for(int i=0;i<N;i++)exists[FS[i]]=true;
  for(int i=0;i<min(lim,N);i++){
    for(int j=i+1;j<N&&j-i<lim;j++){
      // ????
      int a=FS[i];
      // ????
      int d=FS[j]-FS[i];
      int now=a;
      int cnt1=0;
      memset(used,0,sizeof(used));
      while(now<100001&&exists[now])used[now]=1,now+=d,cnt1++;
      if(N-cnt1>lim)continue;
      cnt1=N-cnt1;
      int st=-1;
      for(int k=0;k<N;k++){
        if(!used[FS[k]]){
          st=k;
          break;
        }
      }
      // ???łɊm??
      if(st==-1){
        for(int k=0;k<N;k++){
          printf("%d",FS[k]);
          if(k==N-1)puts("");
          else printf(" ");
        }
        printf("%d %d\n",FS[0],FS[1]);
        return;
      }
      else{
        /*
          ?c??̗v?f?????ׂĖ??߂邱?Ƃ??\?ȓ??䐔?񂪑??݂??邩?𒲂ׂ?
          ???̃??[?v?ő?񍀂????ɂȂ邩?????߂?
        */
        for(int k=st+1;k<N;k++){
          int cnt=cnt1;
          // ????
          // FS[st]???珉?߂Ė??߂Ă???
          // ????now??integer?łȂ??Ȃ????炻?̎??_?ŏI??
          int now=FS[st];
          while(now<100001&&exists[now]){
            if(used[now]==1)used[now]=3;
            else cnt--,used[now]=2;
            ll nxt=(ll)now*FS[k];
            now=nxt/FS[st];
            if((ll)now*FS[st]!=nxt)break;
          }
          if(cnt==0){
            len1=len2=0;
            for(int l=0;l<N;l++)
              if(used[FS[l]]==1)res1[len1++]=FS[l];
              else if(used[FS[l]]==3)res1[len1++]=FS[l],res2[len2++]=FS[l];
              else res2[len2++]=FS[l];
            for(int l=0;l<len1;l++){
              printf("%d",res1[l]);
              if(l==len1-1)puts("");
              else printf(" ");
            }
            for(int l=0;l<len2;l++){
              printf("%d",res2[l]);
              if(l==len2-1)puts("");
              else printf(" ");
            }
            return;
          }
          else{
            cnt=cnt1;
            now=FS[st];
            while(now<100001&&exists[now]){
              if(used[now]==3)used[now]=1;
              else used[now]=0;
              ll nxt=(ll)now*FS[k];
              now=nxt/FS[st];
              if((ll)now*FS[st]!=nxt)break;
            }
            if(used[FS[k]]==0)break;
          }
        }
      }
    }
  }
}

int main(){
  scanf("%d",&T);
  while(T--){
    scanf("%d",&N);
    for(int i=0;i<N;i++)scanf("%d",FS+i);
    solve();
  }
  return 0;
}

