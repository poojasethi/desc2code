//program ARIGEOM

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
#include<vector>

using namespace std;

int Get()
{
  char c;
  while(c=getchar(),c<'0'||c>'9');
  int X=0;
  while(c>='0'&&c<='9')
    {
      X=X*10+c-48;
      c=getchar();
    }
  return X;
}

void Output(int X)
{
  int Len=0,Data[10];
  while(X)
    {
      Data[Len++]=X%10;
      X/=10;
    }
  while(Len--)
    putchar(Data[Len]+48);
}

int GCD(int A,int B)
{
  return B?GCD(B,A%B):A;
}

int N;
int A[10000];
bool Flag[10000],Appear[100001];
vector<int> Ans_AP,Ans_GP;

int Calc_AP(int X,int Y)
{
  return Y*2-X;
}

int Calc_GP(int X,int Y)
{
  long long T=(long long)Y*Y;
  if(T%X)
    return -1;
  if(T/X>100000)
    return -1;
  return T/X;
}

void Mark_AP(int P,int Q)
{
  memset(Flag,0,sizeof(Flag));
  Flag[P]=Flag[Q]=true;
  for(int i=Q+1,X=A[P],Y=A[Q],Z=Calc_AP(X,Y);i<N;i++)
    if(A[i]>Z)
      break;
    else if(A[i]==Z)
      {
        Flag[i]=true;
        X=Y;
        Y=Z;
        Z=Calc_AP(X,Y);
      }
  Ans_AP.clear();
  for(int i=0;i<N;i++)
    if(Flag[i])
      Ans_AP.push_back(A[i]);
}

void Mark_GP(int P,int Q)
{
  memset(Flag,0,sizeof(Flag));
  Flag[P]=Flag[Q]=true;
  for(int i=Q+1,X=A[P],Y=A[Q],Z=Calc_GP(X,Y);i<N;i++)
    if(A[i]>Z)
      break;
    else if(A[i]==Z)
      {
        Flag[i]=true;
        X=Y;
        Y=Z;
        Z=Calc_GP(X,Y);
      }
  Ans_GP.clear();
  for(int i=0;i<N;i++)
    if(Flag[i])
      Ans_GP.push_back(A[i]);
}

bool Check_AP()
{
  static int X[10000];
  int M=0;
  for(int i=0;i<N;i++)
    if(!Flag[i])
      X[M++]=A[i];
  Ans_AP.clear();
  if(!M)
    {
      Ans_AP.push_back(A[0]);
      Ans_AP.push_back(A[N-1]);
      return true;
    }
  if(M==1)
    {
      if(X[0]==A[0])
        {
          Ans_AP.push_back(A[0]);
          Ans_AP.push_back(A[N-1]);
        }
      else
        {
          Ans_AP.push_back(A[0]);
          Ans_AP.push_back(X[0]);
        }
      return true;
    }
  int Step=X[1]-X[0];
  for(int i=2;i<M;i++)
    Step=GCD(Step,X[i]-X[i-1]);
  for(int i=X[0]+Step;i<X[M-1];i+=Step)
    if(!Appear[i])
      return false;
  for(int i=X[0];i<=X[M-1];i+=Step)
    Ans_AP.push_back(i);
  return true;
}

bool Check_GP()
{
  static int X[10000];
  int M=0;
  for(int i=0;i<N;i++)
    if(!Flag[i])
      X[M++]=A[i];
  Ans_GP.clear();
  if(!M)
    {
      Ans_GP.push_back(A[0]);
      Ans_GP.push_back(A[N-1]);
      return true;
    }
  if(M==1)
    {
      if(X[0]==A[0])
        {
          Ans_GP.push_back(A[0]);
          Ans_GP.push_back(A[N-1]);
        }
      else
        {
          Ans_GP.push_back(A[0]);
          Ans_GP.push_back(X[0]);
        }
      return true;
    }
  if(M>17)
    return false;
  int Next=X[0]+1;
  while(Next<=X[1])
    {
      bool OK=Appear[Next];
      for(int i=0,P=X[0],Q=Next;OK&&i<M;i++)
        {
          OK=false;
          while(P!=-1&&P<=X[i]&&Appear[P])
            {
              OK=(P==X[i]);
              int R=Calc_GP(P,Q);
              P=Q;
              Q=R;
            }
        }
      if(OK)
        break;
      Next++;
    }
  if(Next>X[1])
    return false;
  for(int P=X[0],Q=Next,R=Calc_GP(P,Q);P!=-1&&P<=X[M-1];P=Q,Q=R,R=Calc_GP(P,Q))
    Ans_GP.push_back(P);
  return true;
}

void Output_Ans()
{
  for(int i=0;i<Ans_AP.size();i++)
    {
      Output(Ans_AP[i]);
      putchar((i+1==Ans_AP.size())?'\n':' ');
    }
  for(int i=0;i<Ans_GP.size();i++)
    {
      Output(Ans_GP[i]);
      putchar((i+1==Ans_GP.size())?'\n':' ');
    }
}

bool Solve_0()
{
  Mark_AP(0,1);
  if(!Check_GP())
    return false;
  Output_Ans();
  return true;
}

bool Solve_1()
{
  Mark_AP(0,2);
  if(!Check_GP())
    return false;
  Output_Ans();
  return true;
}

bool Solve_2()
{
  Mark_AP(1,2);
  if(!Check_GP())
    return false;
  Output_Ans();
  return true;
}

bool Solve_3()
{
  Mark_GP(0,1);
  if(!Check_AP())
    return false;
  Output_Ans();
  return true;
}

bool Solve_4()
{
  Mark_GP(0,2);
  if(!Check_AP())
    return false;
  Output_Ans();
  return true;
}

bool Solve_5()
{
  Mark_GP(1,2);
  if(!Check_AP())
    return false;
  Output_Ans();
  return true;
}

int main()
{
  int Test=Get();
  while(Test--)
    {
      N=Get();
      memset(Appear,0,sizeof(Appear));
      for(int i=0;i<N;i++)
        Appear[A[i]=Get()]=true;
      if(!Solve_0())
        if(!Solve_1())
          if(!Solve_2())
            if(!Solve_3())
              if(!Solve_4())
                Solve_5();
    }
  return 0;
}
