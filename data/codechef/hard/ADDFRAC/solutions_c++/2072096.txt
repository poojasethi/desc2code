#define LOG_FILE 0
#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <math.h>
using namespace std;
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <map>
#include <assert.h>
#define TR(c,i) for ( typeof((c).begin()) i = (c).begin(); i != (c).end(); i++ )
#define SWAP(a,b) {typeof(a) T; T=a; a=b; b=T;}
#define FOR(i,a,b) for ( i = a; i <= b; i++ )
#define ROF(i,a,b) for ( i = a; i >= b; i-- )
#define MEM(t,n) ( t * )malloc( (n)*sizeof( t ) )
#define ALL(v) (v).begin(), (v).end()
#define SORT(v) sort( ALL(v) )
#define SORTN(v,n) sort( (v).begin(), (v).begin()+n )
#define MAX(a,b) ((a) >= (b) ? (a) : (b))
#define MIN(a,b) ((a) <= (b) ? (a) : (b))
#define ABS(a) ((a) < (0) ? (a)*(-1) : (a))
#define SET(x,a) memset(x,a,sizeof(x))
#define IN(x,a) x.find(a) != x.end()
#define SQ(x) (x)*(x)
#define DIST(x1,y1,x2,y2) SQ(x1-x2)+SQ(y1-y2)
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define DEB(x) cout << #x << " = " << x << endl;
#define DEBA(x,n) { int i; cout << "{\n"; FOR(i,0,n-1)cout << i << " " << x[i] << endl; cout << "}\n"; }
#define DEBT(x) { cout << "{\n"; TR( x,it ) cout << *it << "\n" ; cout << "}\n"; }
#define DEBM(x) { cout << "{\n"; TR( x,it ) cout << it->F << " : " << it->S << "\n"; cout << "}\n"; }
#define SYNC ios_base::sync_with_stdio(false);
#define C(format,n) scanf( "%"#format, &n )
#define P(format,n) printf( "%"#format, n )
#define ll long long
#define limit (ll)1e6
#define MODV 1000000007
void init()
{
#if LOG_FILE
    freopen ("C:\\Raina\\Raina\\Input.txt","r",stdin);
    freopen ("C:\\Raina\\Raina\\Output.txt","w",stdout);
#endif
}
ll gcd(ll A , ll B)
{
    if(A * B == 0)
          return A + B;
     return gcd(B , A % B);	
}

typedef struct _fract
{
	ll Num;
	ll Den;
	
	//member functions
   void fix()
   {
		ll g = gcd(Num , Den);
		Num/= g , Den /= g;
   }
   _fract operator +(const _fract &ref)
   {
			_fract ret;
			ret.Num = Num + ref.Num;
			ret.Den = Den + ref.Den;
			return ret;
   }
   bool operator > (const _fract &ref)
   {
		return (Num * ref.Den > Den * ref.Num);
   }
   bool operator < (const _fract &ref)
   {
		return (Num * ref.Den < Den * ref.Num);
   }       
}fract;

fract input[100000+2],temp[100000+2];
int main()
 {
	init();
	int T,i,rev,N;
	assert( (C(d,T) == 1 ) && (T <= 5));
	while(T--)
	{
		scanf("%d",&N);
		FOR(i,1,N)
		{
			scanf("%lld/%lld",&input[i].Num, &input[i].Den);
		}
		rev = 0;
		//We start from last to do in linear time.
		temp[++rev] = input[N];
		ROF(i,N-1,1)
		{
			//Every time we find that there is entry which can increase the fraction we add it
			while (rev > 0  && input[i] + temp[rev] > input[i])
				input[i] = input[i] + temp[rev], rev--;
			//keep the updated sum in the lookup temp
			temp[++rev] = input[i];
						
		}
		FOR(i,1,N)
		{
			input[i].fix();
			printf("%lld/%lld\n",input[i].Num, input[i].Den);
		}
		printf("\n");
	}
	return 0;
 }
 