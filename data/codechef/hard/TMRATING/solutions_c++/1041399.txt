#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;
typedef pair <int,int> pii;
const int N=100010;
int st[5];
pii gen(pii a,pii b)
{
    st[0]=a.first;
    st[1]=a.second;
    st[2]=b.first;
    st[3]=b.second;
    sort(st,st+4);
    return make_pair(st[3],st[2]);
}
struct node
{
    pii val;
    node *l,*r;
    node(int x)
    {
        val=make_pair(x,-1);
        l=r=0;
    }
    node(node *_l,node *_r)
    {
        l=_l;
        r=_r;
        val=gen(l->val,r->val);
    }
};
typedef node* pnode;
vector <pnode> v;
int mas[N];
pnode build(int tl,int tr)
{
    if (tl==tr)
        return new node(mas[tl]);
    else
    {
        int tm=(tl+tr)>>1;
        return new node(build(tl,tm),build(tm+1,tr));
    }
}
pii get(pnode t,int tl,int tr,int l,int r)
{
    if (l>r)
        return make_pair(-1,-1);
    if (tl==l && tr==r)
        return t->val;
    int tm=(tl+tr)>>1;
    return gen(get(t->l,tl,tm,l,min(tm,r)),get(t->r,tm+1,tr,max(tm+1,l),r));
}
pnode update(pnode t,int tl,int tr,int pos,int val)
{
    if (tl==tr)
        return new node(val);
    else
    {
        int tm=(tl+tr)>>1;
        if (pos<=tm)
            return new node(update(t->l,tl,tm,pos,val),t->r);
        else
            return new node(t->l,update(t->r,tm+1,tr,pos,val));
    }
}
int main()
{
    int n,a,b,m,c,d,r1=0,r2;
    scanf("%d%d%d%d%d%d",&n,&m,&a,&b,&c,&d);
    for(int i=0;i<n;i++)
        scanf("%d",&mas[i]);
    v.push_back(build(0,n-1));
    int cnt;
    scanf("%d",&cnt);
    int l,r;
    for(int k=1;k<=cnt;k++)
    {
        scanf("%d%d",&l,&r);
        int t=(a*1ll*r1+d)%k;
        pii ans=get(v[t],0,n-1,l,r);
        r1=ans.first,r2=ans.second;
        printf("%d %d\n",r1,r2);
        v.push_back(update(v.back(),0,n-1,(b*1ll*r1+d)%n,(c*1ll*r2+d)%m));
    }
    return 0;
}
