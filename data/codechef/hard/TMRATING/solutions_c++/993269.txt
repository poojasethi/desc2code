
#include<iostream>
#include<sstream>
#include<cstdio>
#include<memory.h>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<string>
#include<map>
#include<cstring>
#include<vector>
#include<queue>
#include<stack>
#include<assert.h>
#include<set>
#include<deque>
#include<climits>
#include<utility>

using namespace std;

#define SI ({int _x; scanf("%d",&_x); _x;})
#define SLL ({long long _x; scanf("%lld",&_x); _x;})
#define SLF ({double _x; scanf("%lld",&_x); _x;})
#define SC ({char _x; scanf("%c",&_x); _x;})
#define sscan(n) scanf("%s",n)
#define lc(i) (i<<1)
#define rc(i) ((i<<1)+1)
#define MP make_pair
#define PB push_back
#define LL long long
#define FILL(a,x) memset(a,x,sizeof a)
#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REPD(i,b) for(int i=(b)-1;i>=0;--i)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)>(b)?(b):(a))
#define ABS(a) ((a)<0?-(a):(a))

typedef vector<int> VI; 
typedef pair<int,int> PI; 
#define SZ(a) int((a).size()) 
#define ALL(c) (c).begin(),(c).end() 
#define SORT(a) sort(ALL(a))
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define dbg(x) cout<<#x<<" = "<<x<<endl
#define RAND(x) ((int)(((rand()*1.0)/RAND_MAX)*(x)))

struct max2 { int m1,m2; };

max2 merge(max2 a, max2 b)
{
	int t[] = {a.m1,a.m2,b.m1,b.m2};
	sort(t,t+4);
	return (max2){t[3],t[2]};
}

struct node
{
	max2 data;
	node *left, *right;
};

node *root[112345];
int initial[112345];

node* build_seg_tree(node* rut, int s, int e)
{
	rut = new node;
	if(s == e)
	{
		rut->left = rut->right = NULL;
		rut->data = (max2){initial[s],-1};
		return rut;
	}
	int mid = (s+e)/2;
	rut->left = build_seg_tree(rut->left, s,mid);
	rut->right = build_seg_tree(rut->right,mid+1,e);
	rut->data = merge((rut->left)->data,(rut->right)->data);
	return rut;
}

max2 query(node* rut, int s,int e, int p, int q)
{
	if(s == p && e == q) return rut->data;
	int mid = (s+e)/2;
	if(q<=mid) return query(rut->left, s,mid,p,q);
	if(p>mid) return query(rut->right, mid+1,e,p,q);
	return merge( query(rut->left, s,mid,p,mid), query(rut->right, mid+1,e,mid+1,q) );
}

node* update(node* cur, node* prev, int s, int e, int id, int val)
{
	if(s == e)
	{
		cur = new node;
		cur->left = cur->right = NULL;
		cur->data = (max2){val, -1};
		return cur;
	}
	int mid = (s+e)/2;
	cur = new node;
	if(id<=mid)
	{
		cur->right = prev->right;
		cur->left  = update(cur->left,prev->left,s,mid,id,val);
	}
	else
	{
		cur->left = prev->left;
		cur->right = update(cur->right,prev->right,mid+1,e,id,val);
	}
	cur->data = merge(cur->left->data, cur->right->data);
	return cur;
}

int main()
{
	int n = SI, m = SI, a = SI, b = SI, c = SI, d = SI;
	REP(i,n) initial[i] = SI;
	root[0] = build_seg_tree(root[0],0,n-1);
	int q = SI;
	int r1 = 0, r2 = 0;
	FOR(k,1,q+1)
	{
		int i = SI, j = SI;
		int t = (1ll * a * r1 + d)%k;
		max2 ans = query(root[t],0,n-1,i,j);
		printf("%d %d\n",ans.m1,ans.m2);
		r1 = ans.m1; r2 = ans.m2;
		int id = (1ll*b*r1 + d)%n;
		int val = (1ll* c * r2 + d) % m;
		root[k] = update(root[k],root[k-1],0,n-1,id,val);
	}
	return 0;
}
