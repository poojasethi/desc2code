#include <string>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <cstring>
#include <queue>
#define maxn 100005
#define mp make_pair
using namespace std;
typedef pair<int, int> pii;
int ini[maxn], a, b, c, d, n, m;
struct node
{
    pii mx;
    node *left;
    node *right;
    node(){mx=mp(-1,-1), left=NULL, right=NULL;}
};
node *root[maxn];
pii maxp(pii a, pii b)
{
    if(a.first>=b.first)return mp(a.first, max(b.first, a.second));
    else return mp(b.first, max(a.first, b.second));
}
node *build(int l, int r)
{
    node *tmp = new node();
    if(l==r){tmp->mx=mp(ini[l],-1); return tmp;}
    tmp->left = build(l, (l+r)/2);
    tmp->right=build((l+r)/2+1, r);
    tmp->mx = maxp(tmp->left->mx, tmp->right->mx);
    return tmp;
}
 
pii query(node * cur, int l, int r, int a, int b)
{
    if(a>r || b<l)return mp(-1,-1);
    if(a<=l && b>=r)return cur->mx;
    return maxp(query(cur->left, l, (l+r)/2, a, b), query(cur->right, (l+r)/2+1, r, a, b));
}
 
node * update(node *cur, int l, int r, int id, int val)
{
    node *tmp = new node();
    if(l==r){tmp->mx=mp(val,-1); return tmp;}
    int m = (l+r)/2;
 
    if(id>m)
    {
        tmp->left = cur->left;
        tmp->right = update(cur->right, m+1, r, id, val);
    }
    else
    {
        tmp->right = cur->right;
        tmp->left = update(cur->left, l, m, id, val);
    }
    tmp->mx = maxp(tmp->left->mx, tmp->right->mx);
    return tmp;
}
 
int main()
{
    scanf("%d%d%d%d%d%d", &n, &m, &a, &b, &c, &d);
    for(int i=0; i<n; i++)
        scanf("%d", &ini[i]);
    root[0] = build(0, n-1);
    int q;
    scanf("%d", &q);
    pii p;
    p.first=0, p.second=-1;
    for(int i=1; i<=q; i++)
    {
        int l, r;
        scanf("%d%d", &l, &r);
        int id = (a*1LL*p.first+d)%i;
        p = query(root[id], 0, n-1, l, r);
        int indx = (b*1LL*p.first+d)%n;
        int val = (c*1LL*p.second+d)%m;
        root[i] = update(root[i-1], 0, n-1, indx, val);
        printf("%d %d\n", p.first, p.second);
    }
    return 0;
}
 