#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1000000000
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define SZ(x) ((int)(x.size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define IN(x,y) ((y).find((x))!=(y).end())
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define IOS ios_base::sync_with_stdio(0);

struct TwoMax {
   int m1,m2;
   TwoMax(int n1 = -INF, int n2 = -INF) : m1(n1), m2(n2) {}
   inline TwoMax operator + (const TwoMax &s) const {
      int temp[4] = {m2,m1,s.m2,s.m1};
      sort(temp,temp+4);
      return TwoMax(temp[3],temp[2]);
   }
   inline bool operator != (const TwoMax &s) const {
      return m1 != s.m1 || m2 != s.m2;
   }
};

int fromWhen, n, now;
struct History {
   vector<pair<int,TwoMax> > v;
   void updateAtomic (int ileTeraz) {
      v.pb(mp(now, TwoMax(ileTeraz,-INF)));
   }
   void update (History &h1, History &h2) {
      TwoMax a1 = h1.v.empty() ? TwoMax() : h1.v.back().se;
      TwoMax a2 = h2.v.empty() ? TwoMax() : h2.v.back().se;
      TwoMax maxNow = a1+a2;
      if (v.empty() || maxNow != v.back().se) v.pb(mp(now, maxNow));
   }
   TwoMax getFromTime () {
      int a = 1, b = SZ(v)-1, best = 0;
      while (a <= b) {
         int mid = (a+b)/2;
         if (v[mid].fi <= fromWhen) {
            best = mid;
            a = mid+1;
         } else {
            b = mid-1;
         }
      }
      return v[best].se;
   }
};

History state[(1<<19)];

void set_aux (int x, int ile, int v, int from, int to) {
   //DBG(v)
   if (from==to) {
      state[v].updateAtomic(ile);
      return;
   }
   int mid = (from+to)/2;
   if (x <= mid) set_aux(x,ile,2*v+1,from,mid);
   else set_aux(x,ile,2*v+2,mid+1,to);
   state[v].update(state[2*v+1],state[2*v+2]);
}

void set (int x, int ile) {
   set_aux(x,ile,0,0,n-1);
}

TwoMax sumofaugsoverkeyssmallerorequal_aux (int x, int v, int from, int to) {
   if (x < from) return TwoMax();
   if (from==to) return state[v].getFromTime();
   int mid = (from+to)/2;
   if (x >= mid+1) return state[2*v+1].getFromTime() + sumofaugsoverkeyssmallerorequal_aux(x,2*v+2,mid+1,to);
   return sumofaugsoverkeyssmallerorequal_aux(x,2*v+1,from,mid);
}

TwoMax sumofaugsoverkeysbiggerorequal_aux (int x, int v, int from, int to) {
   if (x > to) return TwoMax();
   if (from==to) return state[v].getFromTime();
   int mid = (from+to)/2;
   if (x <= mid) return sumofaugsoverkeysbiggerorequal_aux(x,2*v+1,from,mid) + state[2*v+2].getFromTime();
   return sumofaugsoverkeysbiggerorequal_aux(x,2*v+2,mid+1,to);
}

TwoMax sumofaugsoverkeyssmallerorequal (int x) {
   return sumofaugsoverkeyssmallerorequal_aux(x,0,0,n-1);
}

TwoMax sumofaugsoverkeysbiggerorequal (int x) {
   return sumofaugsoverkeysbiggerorequal_aux(x,0,0,n-1);
}

TwoMax sumofaugsoverkeysbetween_aux(int x, int y, int v, int from, int to) {
   if (y < from) return TwoMax();
   if (x > to) return TwoMax();
   if (from==to) return state[v].getFromTime();
   int mid = (from+to)/2;
   if (y < mid+1) return sumofaugsoverkeysbetween_aux(x,y,2*v+1,from,mid);
   if (x > mid) return sumofaugsoverkeysbetween_aux(x,y,2*v+2,mid+1,to);
   return sumofaugsoverkeysbiggerorequal_aux(x,2*v+1,from,mid) + sumofaugsoverkeyssmallerorequal_aux(y,2*v+2,mid+1,to);
}

TwoMax sumofaugsoverkeysbetween (int x, int y) {
   if (x > y) return TwoMax(); // przedzial pusty
   return sumofaugsoverkeysbetween_aux(x,y,0,0,n-1);
}


int main () {
   scanf("%d", &n);
   wez2(m,aa)
   wez3(bb,cc,dd)
   ll a=aa,b=bb,c=cc,d=dd;
   now = 0;
   FOR(i,n) {
      wez(x)
      set(i,x);
   }
   int r1 = 0, r2;
   TESTS {
      now++;
      fromWhen = (a * r1 + d) % now;
      wez2(qi,qj)
      TwoMax res = sumofaugsoverkeysbetween(qi,qj);
      r1 = res.m1;
      r2 = res.m2;
      printf("%d %d\n", r1, r2);
      set((b * r1 + d) % n, (c * r2 + d) % m);
   }
}
