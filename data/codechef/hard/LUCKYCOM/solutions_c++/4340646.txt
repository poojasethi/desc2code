//codedevloper

#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cctype>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stdio.h>
#include <stack>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <assert.h>
#define REP(i,n) for(int i=0;i<n;i++)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))

using namespace std;

const double eps = 1e-8;

#define PB push_back
#define MP make_pair

typedef map<int,int> MII;
typedef map<string,int> MSI;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long double> VD;
typedef pair<int,int> PII;
typedef long long int64;
typedef long long ll;
typedef unsigned int UI;
typedef long double LD;
typedef unsigned long long ULL;

string s[7474];
VI v4[7474], b7[7474];
VI s4[7474], s7[7474];
int beg[7474];
int L, R;
int n, k, val[100000*16], MINUS[100000*16];

void build(int left, int right, int p)
{
    if (left == right)
        val[p] = MINUS[left];
    else
    {
        int mid = (left + right) >> 1;
        build(left, mid, p*2);
        build(mid+1, right, p*2+1);
        val[p] = max(val[p*2], val[p*2+1]);
    }
}

int intmax(int left, int right, int l, int r, int p)
{
   
    if (l <= left && r >= right)
        return val[p];
    int mid = (left + right) >> 1, ret = -0x7f7f7f7f;
    if (l <= mid) ret = intmax(left, mid, l, r, p*2);
    if (r > mid) ret = max(ret, intmax(mid+1, right, l, r, p*2+1));
    return ret;
}

bool go(int l4, int l7)
{
    int cnt = 0;
    REP(i, n)
    {
        int l = 0, r = s[i].size()-1;
        while (l < r)
        {
            int mid = (l + r) >> 1;
            if (v4[i][mid] >= l4)
                r = mid;
            else l = mid+1;
        }

        int L4 = l;
    
        if (v4[i][L4] < l4) return false;
   

        l = 0, r = s[i].size()-1;
        while (l < r)
        {
            int mid = ((l + r) >> 1)+1;
            if (b7[i][mid] >= l7)
                l = mid;
            else r = mid-1;
        }

        int R7 = l;
        if (b7[i][R7] < l7) return false;

        if (v4[i][L4] > l4 || !l4) --L4;
        if (b7[i][R7] > l7 || !l7) ++R7;
        L4 += 1;

    
        if (L4 > R7) return false;

        l = 0, r = s[i].size()-1;
        while (l < r)
        {
            int mid = ((l + r) >> 1);
            if (s4[i][mid] >= l4)
                r = mid;
            else l = mid+1;
        }

        int R4 = l;
        l = 0, r = s[i].size()-1;
        while (l < r)
        {
            int mid = (((l + r) >> 1))+1;
            if (s7[i][mid] >= l7)
                l = mid;
            else r = mid-1;
        }
        int L7 = l;

        if (s4[i][R4] > l4 || !l4) --R4;
        if (s7[i][L7] > l7 || !l7) ++L7;
        R4 += 1;

    

        if (R4 < L7) continue;
       R4 = min(R4,R7);
        L7 = max(L7,L4);
        int delta = l4+l7-intmax(L, R, beg[i]+L7, beg[i]+R4, 1);
     
        cnt += delta;
   
    }
  
    return cnt <= k;
}

int main()
{
    ios::sync_with_stdio(false);
    cin >> n >> k;
    beg[0] = 0;
    int maxlen = 0x7f7f7f7f;
    REP(i, n)
    {
        cin >> s[i];
        maxlen = min(maxlen, (int)s[i].size());
        v4[i].resize(s[i].size());
        b7[i].resize(s[i].size());
        s4[i].resize(s[i].size());
        s7[i].resize(s[i].size());
        REP(j, s[i].size())
        {
            if (s[i][j] == '4' || s[i][j] == '?')
                v4[i][j] = 1;
            else v4[i][j] = 0;
            if (j) v4[i][j] += v4[i][j-1];
        }
        REP(j, s[i].size())
        {
            if (s[i][j] == '4')
                s4[i][j] = 1;
            else s4[i][j] = 0;
            if (j) s4[i][j] += s4[i][j-1];
        }
        for (int j = (int)s[i].size()-1; j >= 0; --j)
        {
            if (s[i][j] == '7' || s[i][j] == '?')
                b7[i][j] = 1;
            else b7[i][j] = 0;
            if (j != (int)s[i].size()-1) b7[i][j] += b7[i][j+1];
        }
        for (int j = (int)s[i].size()-1; j >= 0; --j)
        {
            if (s[i][j] == '7')
                s7[i][j] = 1;
            else s7[i][j] = 0;
            if (j != (int)s[i].size()-1) s7[i][j] += s7[i][j+1];
        }
        if (i) beg[i] = beg[i-1] + s[i-1].size() + 1;
    }
    beg[n] = beg[n-1] + s[n-1].size() + 1;

    for (int i = 0; i < n; ++i)
    {
        int s4, s7;
        s4 = s7 = 0;
        for (int j = 0; j < s[i].size(); ++j)
            if (s[i][j] == '7')
                ++s7;
        for (int j = 0; j <= s[i].size(); ++j)
        {
            MINUS[beg[i]+j] = s4+s7;
            if (j == s[i].size()) break;
            if (s[i][j] == '4') ++s4;
            if (s[i][j] == '7') --s7;
        }
    }

    long long ans = 0;
    L = 0, R = beg[n] - 1;
    build(L, R, 1);
 
    int prev = maxlen;
    for (int i = 0; i <= maxlen; ++i)
    {
        int c4 = i;
        int l = min(prev, maxlen - i);
        while (l && !go(c4, l)) --l;
        if (go(c4, l))
        {
            ans += l + 1;
            if (!i) --ans;
   
        }
        prev = l;
    }
    cout << ans << endl;
	return 0;
}