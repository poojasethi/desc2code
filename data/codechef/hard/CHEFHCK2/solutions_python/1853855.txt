/*
 * 1.cpp
 *
 *  Created on: 2013-2-19
 *      Author: ***
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <climits>
#include <cassert>
#include <string>
#include <cmath>
#include <bitset>
#include <vector>
#include <list>
#include <deque>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <utility>
#include <algorithm>
using namespace std;

#define INF 1000000000
#define LL_INF 4000000000000000000ll
#define EPS (1e-9)

#define Lowbit(x) ((x) & (-(x)))
#define Lc(x) ((x) << 1)
#define Rc(x) (Lc(x) + 1)
#define Pow2(x) (1 << (x))
#define Contain(a, x) ((bool)(a & Pow2(x)))

#define Rep(i, a, b) for(int i = (a); i <= (b); ++i)
#define Til(i, a, b) for(int i = (a); i >= (b); --i)
#define Foru(i, a, b) for(int i = (a); i < (b); ++i)
#define Ford(i, a, b) for(int i = (a); i > (b); --i)

#define It iterator
#define For(i, x) for(__typeof(x.begin()) i = x.begin(); i != x.end(); ++i)

#define Debug(x) (cerr << #x << " = " << (x) << endl)
#define Debug2(x, y) (cerr << #x << " = " << (x) << ", " << #y << " = " << (y) << endl)

typedef long long LL;
typedef unsigned long long ULL;
typedef long double LD;
typedef pair<int, int> pii;

template <class T> inline bool Up(T &a, const T &b) { if(a < b) {a = b; return true;} return false; }
template <class T> inline bool Down(T &a, const T &b) { if(a > b) {a = b; return true;} return false; }

inline int getus() { int tmp, c; while(tmp = fgetc(stdin), tmp < '0' || tmp > '9'); tmp -= '0'; while(c = fgetc(stdin), '0' <= c && c <= '9') tmp = tmp * 10 + c - '0'; return tmp; }
inline int getint() { int tmp, c, flag; while(flag = fgetc(stdin), flag != '-' && (flag < '0' || flag > '9')); if(flag == '-') tmp = 0; else tmp = flag - '0'; while(c = fgetc(stdin), '0' <= c && c <= '9') tmp = tmp * 10 + c - '0'; return flag == '-' ? -tmp : tmp; }

int PScnt = 0;
LL PSs[6764130];
LL Uplimit = 305731144433251701LL;

LL root2(LL N) {
	LL ans = LL(pow(N, 0.5));
	while (ans * ans > N) --ans;
	while ((ans + 1) * (ans + 1) <= N) ++ans;
	return ans;
}

inline LL countPSNumber(LL N) { // count PSs in [2, N]
	if (N < 4) return 0ll;
	LL ans = LL(sqrt(N));
	while (ans * ans > N) --ans;
	while ((ans + 1) * (ans + 1) <= N) ++ans;
	ans += upper_bound(PSs, PSs + PScnt, N) - PSs;
	return ans - 1;
}

inline bool isPSNum(LL x) {
	if (x < 4) return false;
	LL r = root2(x);
	if (r * r == x) return true;
	return *lower_bound(PSs, PSs + PScnt, x) == x;
}

inline void getAnsForNonPSNum(LL pwd) {
	LL order = pwd + 1 - countPSNumber(pwd); // order in [0, +oo]
	LL k = 1, L, R;
	int ans = 0;
	for ( ; ; ) {
		LL next = (k << 1);
		++ans;
		if (next == order) {
			printf("%d", ans);
			return;
		}
		if (next > order) {
			L = k;
			R = next;
			break;
		}
		k = next;
	}
	while (1) {
		LL M = (L + R) >> 1;
		++ans;
		if (M == order) break;
		if (M < order) L = M;
		else R = M;
	}
	printf("%d", ans);
}

int main() {
//	freopen("1.in", "r", stdin);
//	freopen("1.out", "w", stdout);
	
	int N;
	LL pwd;
	
	for (int a = 2; a <= 673668; ++a) {
		int sqra = root2(a);
		if (sqra * sqra == a) continue;
		LL res = LL(a) * a;
		Rep(b, 3, 60) {
			if (double(res) * a > 1e18) break;
			res *= a;
			if (b & 1)
				PSs[PScnt++] = res;
		}
	}
//	Debug(clock());
//	Debug(clock() / (double)CLOCKS_PER_SEC);
	sort(PSs, PSs + PScnt);
	PScnt = unique(PSs, PSs + PScnt) - PSs;
	
	scanf("%d", &N);
	Rep(__itr__, 1, N) {
		scanf("%lld", &pwd);
		if (isPSNum(pwd))
			printf("%lld", countPSNumber(pwd));
		else
			getAnsForNonPSNum(pwd);
		putchar((__itr__ == N) ? '\n' : ' ');
//		Debug(__itr__);
	}
//	Debug(clock());
//	Debug(clock() / (double)CLOCKS_PER_SEC);
	return 0;
}
