#include <cassert>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <climits>
#include <cstddef>
#include <cctype>
#include <cmath>
#include <cstring>
#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <iterator>
#include <numeric>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <bitset>
#include <list>
#include <string>
#include <functional>
#include <utility>
using namespace std;
typedef long long llint;
#ifdef __MY_PC
#define LLF "%I64d"
#else
#define LLF "%lld"
#endif
int const MAX_V = 3141;
llint const MAX_X = 305731144433251701LL;
vector <llint> pw3, pw5, pws;
llint i_sqrt(llint x)
{
	static llint const U = 552929602;
	llint down = 2, up = U;
	llint mid;
	while (down < up)
	{
		mid = (down + up) >> 1;
		if (mid * mid < x)
		{
			down = mid + 1;
		}
		else
		{
			up = mid;
		}
	}
	return down;
}
bool is_square(llint x)
{
	llint v = i_sqrt(x);
	return v * v == x;
}
void preprocess()
{
	pw3.clear();
	for (int v = 2; ; ++v)
	{
		llint x = llint(v) * v * v;
		if (x > MAX_X)
		{
			break;
		}
		if (is_square(x))
		{
			continue;
		}
		pw3.push_back(x);
	}
	pw5.clear();
	for (int v = 2; v <= MAX_V; ++v)
	{
		llint x = llint(v) * v * v * v * v;
		if (is_square(x))
		{
			continue;
		}
		pw5.push_back(x);
		while (x <= MAX_X / (v * v))
		{
			x *= v * v;
			pw5.push_back(x);
		}
	}
	sort(pw5.begin(), pw5.end());
	pws.clear();
	pws.resize(pw3.size() + pw5.size());
	merge(pw3.begin(), pw3.end(), pw5.begin(), pw5.end(), pws.begin());
	pws.erase(unique(pws.begin(), pws.end()), pws.end());
}
llint bis(llint x)
{
	llint ret = 0;
	llint v = 2;
	while (v <= x)
	{
		++ret;
		if (v == x)
		{
			return ret;
		}
		v <<= 1;
	}
	++ret;
	llint u = v >> 1;
	while (u < v)
	{
		++ret;
		llint m = (u + v) >> 1;
		if (m == x)
		{
			return ret;
		}
		(m < x ? u : v) = m;
	}
	return ret;
}
llint work(llint x)
{
	if (x < 2)
	{
		return x == 0 ? 2 : 1;
	}
	llint v2 = i_sqrt(x);
	int v3 = lower_bound(pws.begin(), pws.end(), x) - pws.begin();
	if (v2 * v2 == x || v3 < int(pws.size()) && pws[v3] == x)
	{
		return (v2 - 1) + v3;
	}
	return bis((x + 1) - (v2 - 2) - v3);
}
int main()
{
	preprocess();
	int n;
	llint passwd;
	scanf("%d", &n);
	while (n--)
	{
		scanf(LLF, &passwd);
		printf(LLF, work(passwd));
		putchar(n != 0 ? ' ' : '\n');
	}
	return 0;
}
