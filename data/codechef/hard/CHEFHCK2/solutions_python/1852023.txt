#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
typedef pair<ll, int> pli;


const int MAXD = 674000;
// const int MAXD = 500;
const ll MAXN = 305731144433251710LL;

pli pw[1500010];
bool isq[MAXD + 5];
int kp;
int ssq[1500010];

void gen() {
	for (int i = 2; i * i <= MAXD; i++)
		isq[i * i] = 1;
	for (ll i = 2; i <= MAXD; i++) {
		int cp = 2;
		for (ll v = i * i; v <= MAXN;) {
			pw[kp++] = mp(v, isq[i] || cp % 2 == 0);
			if (ld(v) * i > MAXN) break;
			v *= i;
			cp++;
		}
	}
	sort(pw, pw+kp);
	kp = unique(pw, pw+kp) - pw;
	ssq[0] = pw[0].second;
	for (int i = 1; i < kp; i++) ssq[i] = ssq[i-1] + pw[i].second;
	ssq[kp] = ssq[kp-1];

	// forn(q, kp) printf("%lld %d\n", pw[q].first, pw[q].second);
	//printf("%d\n", kp);
}

int naive(int x) {
	int k = 1, ans = 0;
	x++;
	while (k < x) {
		ans++;
		k <<= 1;
	}
	if (x == 1) return 2;
	if (k == x) return ans;
	int l = k / 2, r = k;
	while (r - l > 1) {
		int m = (l + r) >> 1;
		ans++;
		if (m == x) return ans;
		if (m < x) l = m;
		else r = m;
	}
	return -1;
}

int getsq(ll x, bool& flag) {
	/*ll x2 = ll(pow(ld(x), (ld)0.5) + (ld)1e-6);
	if (x2 * x2 == x) flag = true;
	ll res = max(0LL, x2 - MAXD);
	int j = 0;
	while (j < 1) {
		ll xp = ll(pow(ld(x), (ld)0.5 / pp[j]) + (ld)1e-6);
		ll xp2 = ll(pow(ld(MAXD), (ld)0.5 / pp[j]) + (ld)1e-6);
		if (xp2 < xp) res -= xp - xp2;
		else break;
		j++;
	}
	return res;*/
	ll x2 = ll(pow(ld(x), (ld)0.5));
	while (x2 * x2 > x) x2--;
	while ((x2+1)*(x2+1) <= x) x2++;
	if (x2 * x2 == x) flag = true;
	// printf("getsq %lld = %d\n", x, int(x2) - 1);
	return x2 - 1;
}

ll solve(ll x) {
	if (x < 2) return 2 - x;
	int i = lower_bound(pw, pw+kp, pli(x, -1)) - pw;
	bool flag = false;
	int cc = getsq(x, flag) - ssq[i-1] - flag;
	// forn(q, 10) printf("%lld %d\n", pw[q].first, pw[q].second);
	// printf("cc = %d ", cc);
	// printf("i = %d\n", i);
	if ((i < kp && pw[i].first == x) || flag) return i + cc + 1;
	x -= i + cc;
	if (x < 2) return 2 - x;
	// printf("%d is non-power ", int(x));
	//return naive(x);
	x++;
	// printf("get for %d: ", (int)x);
	int j = 0;
	for (ll xx = x; xx > 1; xx >>= 1) j++;
	if ((1LL << j) == x) return j;
	j <<= 1;
	//printf("j = %d\n", j);
	while ((x & 1) == 0) j--, x >>= 1;
	return j + 1;
}

int main() {
	// for (int i = 0; i <= 100; i++) printf("%d - %d\n", i, naive(i));
	// return 0;
	gen();
	int tc;
	ll x;
	scanf("%d", &tc);
	while (tc--) {
		scanf("%lld", &x);
		if (tc == 0) printf("%lld\n", solve(x));
		else printf("%lld ", solve(x));
	}
	return 0;
}