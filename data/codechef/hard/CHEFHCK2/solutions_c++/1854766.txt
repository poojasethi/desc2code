#include <cstdio>
#include <cmath>
#include <cfloat>
#include <vector>
#include <set>
#include <algorithm>
#include <iterator>

using namespace std;

const long long up_long_limit = 0x7FFFFFFFFFFFFFFFLL;

inline long long pf(long long x, int y) {
   long long res = 1;
   while(y) {
      if(y&1) res *= x;
      if(res <= 0) return up_long_limit;
      y >>= 1;
      x *= x;
   }
   return res;
}

inline long long nth_root(int n, long long a) {
   long long ans = 1;
   long long res = 1;
   while(res < a) {
      ans <<= 1;
      res = pf(ans, n);
   }

   if(res == a) return ans;

   long long lo = ans >> 1, hi = ans;
   while(hi-lo > 1) {
      long long mi = (lo+hi) >> 1;
      res = pf(mi, n);
      if(res <= a) lo = mi;
      else hi = mi;
   }
   return lo;
}

vector<long long> fill() {

   set<long long> temp;
   int primes[] = {5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,0};
   long long up = pf(3141, 5);
   for(int* p = primes; *p; ++p) {
      long long hig = nth_root(*p, up);
      for(long long i = 2; i <= hig; ++i) {
         long long sqi = nth_root(2, i);
         long long cbi = nth_root(3, i);
         if(sqi*sqi < i && cbi*cbi*cbi < i)
            temp.insert(pf(i, *p));
      }
   }
   return vector<long long>(temp.begin(), temp.end());
}

int main() {
   vector<long long> power_numbers = fill();
   int n; scanf("%d", &n);
   while(n--) {
      long long pass; scanf("%lld", &pass);
      long long power_count = 0; bool is_power = false;
      if(pass > 3) {
         long long sqp = nth_root(2, pass), cbp = nth_root(3, pass), hep = nth_root(6, pass);
         power_count = sqp + cbp - hep;
         power_count += distance(power_numbers.begin(), upper_bound(power_numbers.begin(), power_numbers.end(), pass)) - 1;
         is_power = sqp*sqp == pass || cbp*cbp*cbp == pass || binary_search(power_numbers.begin(), power_numbers.end(), pass);
      }
      if(is_power) printf("%lld ", power_count);
      else {
         long long search_space = pass - power_count + 1;

         int comp_count = 0;

         long long p = 2;
         for(comp_count = 1; p < search_space; p <<= 1) comp_count++;
         if(p == search_space) printf("%d ", comp_count);
         else {
            long long lo = p/2, hi = p;
            while(true) {
               long long mi = (lo+hi) >> 1;
               comp_count++;
               if(mi == search_space) {
                  printf("%d ", comp_count);
                  break;
               } else if(mi < search_space) lo = mi;
               else hi = mi;
            }
         }
      }
   }
   puts("");
}
