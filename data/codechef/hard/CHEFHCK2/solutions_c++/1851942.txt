#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>
#include <cmath>

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PI;
typedef vector<PI> VPI;

#define FOR(i,a,n) for (int i = (a); i < (n); ++i)
#define FORE(i,a,n) for (int i = (a); i <= (n); ++i)
#define FORD(i,a,b) for (int i = (a); i >= (b); --i)
#define REP(i,n) FOR(i,0,n)
#define REPE(i,n) FORE(i,0,n)
#define LL long long
#define FIR(n) REP(i,n)
#define FJR(n) REP(j,n)
#define ALL(v) v.begin(), v.end()

#define FI FIR(n)
#define FJ FJR(n)
#define FR(i,a) FOR(i,a,n)
#define REPN(i) REP(i,n)

#define GI(n) scanf("%d", &n)
#define GI2(n,m) scanf("%d %d", &n, &m)

int primes[17] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59};
int odd	[19] = {2,3,5,7,11,13,17,19,23,29,30,31,37,41,42,43,47,53,59};
int even[17] = {6,10,14,15,21,22,26,33,34,35,38,39,46,51,55,57,58};



inline LL fpow(LL a, int p) {
	LL res = 1;
	while (p) {
		if (p & 1)
			res *= a;
		a*=a;
		p >>= 1;
	}
	return res;
}

bool isps;

LL le(LL a, int p) {
	LL res = pow(a,((long double)1)/p)+1e-9;
	LL x = fpow(res, p);
	if (x == a && a != 1) isps = true;
	else if (x>a)--res;
	return res-1;
}

LL solve(LL n) {
	if (n == 0)
		return 2;

	isps = 0;
	LL spec = 0;
	FIR(19)
		spec += le(n, odd[i]);
	FIR(17)
		spec -= le(n, even[i]);

	if (isps)
		return spec;

	LL index = n+1 - spec;

	int res = 1;
	LL R = 2;
	while (R < index) {
		R*=2;
		++res;
	}

	if (R == index)
		return res;


	LL L = R/2;
	while (true) {
		++res;
		LL m = (L+R)/2;
		if (m == index)
			return res;
		if (m < index)
			L = m;
		else
			R = m;
	}
}


int main() {
#ifndef ONLINE_JUDGE
freopen("input.txt", "rt", stdin);
#endif

	
	LL l;

	int tc; GI(tc);
	while(tc--) {
		scanf("%lld", &l);
		printf("%lld ", solve(l));
	}
	puts("");
}
