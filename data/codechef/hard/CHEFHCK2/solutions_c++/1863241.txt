#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long LL;
const LL maxK = 305731144433251701LL; // 3141^5
int my_sqrt(LL x) {
	LL y = sqrt(double(x));
	while (y * y > x) {
		--y;
	}
	while ((y + 1) * (y + 1) <= x) {
		++y;
	}
	return y;
}
vector<LL> pws;
void precalc() {
	vector<LL> pw3;
	pw3.reserve(700000);
	for (int x = 2; ; ++x) {
		int y = my_sqrt(x);
		if (y * y == x) {
			continue;
		}
		LL pw = LL(x) * x * x;
		if (pw > maxK) {
			break;
		}
		pw3.push_back(pw);
	}
	vector<LL> pw5;
	pw5.reserve(30000);
	for (int x = 2; x <= 3141; ++x) {
		int y = my_sqrt(x);
		if (y * y == x) {
			continue;
		}
		LL pw = LL(x) * x * x * x * x; // x^5
		while (true) {
			pw5.push_back(pw);
			if (pw > maxK / x / x) {
				break;
			}
			pw *= x * x;
		}
	}
	sort(pw5.begin(), pw5.end());
	pws.resize(pw3.size() + pw5.size());
	merge(pw3.begin(), pw3.end(), pw5.begin(), pw5.end(), pws.begin());
	pws.erase(unique(pws.begin(), pws.end()), pws.end());
}
int binary_search(unsigned long long P)
{
    unsigned long long R=2,L,M;
    int ans=0;
    while(1)
    {
        ans++;
        if(R==P)
            return ans;
        else if(R>P)
            break;
        R=R*2;
    }
    L=R/2;
    while(L<R)
    {
        ans++;
        M=(L+R)/2;
        if(M==P)
            return ans;
        else if(M<P)
            L=M;
        else
            R=M;
    }
    return ans;
}
int calc(LL x) {
	if (x <= 1) {
		return 2 - x;
	}
	LL y = my_sqrt(x);
	bool is_square = (LL(y) * y == x);
	int j = lower_bound(pws.begin(), pws.end(), x) - pws.begin();
	if (is_square || (j < pws.size() && pws[j] == x)) {
		return y + j - is_square;
	}
	return binary_search(x + 1 - (y - 1) - j);
}

int main() {
	precalc();

	int N;
	scanf("%d", &N);
	for (int n = 1; n <= N; ++n) {
		LL password;
		scanf("%lld", &password);
		int tries = calc(password);
		printf("%d%c", tries, n < N ? ' ' : '\n');
	}
	return 0;
}
