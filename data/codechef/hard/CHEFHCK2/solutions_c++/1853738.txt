#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
#include <assert.h>
using namespace std;
#define pb push_back
#define mp make_pair
typedef long long ll;
typedef long double ld;
const int INF = 1000000000;
const int prime = 9241;
const ld pi = acos(-1.);

ll all0[200005], cube[1000005], all[2000005];
int cnt;

ll msqrt(ll a)                                    
{
   return (ll)sqrt((ld)a + 0.5);
}

ll before(ll a)
{
   return (ll)(lower_bound(all, all + cnt, a) - all + (binary_search(all, all + cnt, a)?1:0)) + max(0ll, msqrt(a) - 1ll); 
}

ll bs(ll n)
{
   ll lb = -1, rb = -1;
   ll ans = 0ll;
   ll i;
  // ans = 1;
  //   cout<< "bs(" << n << ")" << endl;

   for (i = 1ll; ; )
   {
    //  cout << i << ' ' << n << endl;
      i *= 2ll;
      ans++;
      if (i > n) break;
      if (i == n) return ans;
   }
//   cout << "ans=" << ans << endl;
//   cout << "i=" << i << endl;  
 //  if (i == n) {return ans;}
   lb = i/2ll; rb = i;
//   cerr << lb << ".." << rb << endl;
   while (1)
   {
      ll m = (lb + rb) >> 1;
  //    cout <<"m=" <<m << endl;                
      ans++;
      if (m == n) return ans;
      if (m < n) lb = m;
      else rb = m;
   }
   assert(false);
}

ll solve(ll a)
{
   
   ll n = before(a);
   ll n2 = 0;
  // cout << endl;
  // cout << "n = " << n << endl << " a= " << a <<endl;

  // for (int i = 0; i <= a; i++)
  //    if ((msqrt(i)*msqrt(i) == i && msqrt(i) >= 2) || binary_search(all, all+cnt, i)) n2++;
  // assert(n2 == n);
 //  cout << "a = " << a << endl;
 //  cout << "n = " << n << endl;
   if ((msqrt(a)*msqrt(a) == a && msqrt(a) >= 2ll) || binary_search(all, all + cnt, a))
   {
      return n;
   }
   else
   {  return bs(a+1ll-n);
   }
}

int main()
{
    ll bound = 3141LL * 3141LL * 3141LL * 3141LL * 3141LL;
    cnt = 0;
    int cnt0 = 0;
    for (ll a = 2; ; a++)
    {
       if ((ld)a*(ld)a*(ld)a > (ld)bound*5.) break;
       ll cur = a*a*a;
       if (msqrt(cur) * msqrt(cur) != cur) all[cnt++] = cur;
     //  if (a % 500 == 0ll) cerr << "cnt=" << cnt << "(" << a <<")" << endl;
       for (;;)
       {
          
       //  if (a % 500ll == 0) cerr << cur << endl;
         if ((ld)cur * (ld)a > (ld)bound * 5.) break;
         cur *= a;             
         if (msqrt(cur)*msqrt(cur) != cur) all[cnt++] = cur; 
      //   if ((ld)cur * (ld)a > (ld)bound * 2.) break;
       //  if (cnt % 500 == 0) cerr << cnt << endl;
       }
   //    if ((ld)a*(ld)a*(ld)a > (ld)bound*5.) break;
     //  if (cnt % 500 == 0) cerr << cnt << endl;

    }

    sort(all, all + cnt);
   // merge(all0, all0 + cnt, cube, cube + cnt0, all); 
    cnt = unique(all, all + cnt) - all;
  //  cout << all[0] << ' ' << all[1] << endl;
  //  cerr << "cnt=" << cnt << endl;
    int n;

    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
       ll u;               
       cin >> u;
       cout << solve(u) << " ";
    }
    cout << endl;
    return 0;
}