#include<iostream>

using namespace std;

long long l1[600],l2[600];

void quickSort(long long A[], long long l, long long h);
long long partition (long long arr[], long long l, long long h);

void swap ( long long* a, long long* b )
{
    long long t = *a;
    *a = *b;
    *b = t;
}

int main()
{
    long long t;
    l1[0]=1;
    l2[0]=1;
    cin>>t;

    while(t--)
    {
        long long n,k,p,i,x,flag=0,j;
        cin>>n>>k>>p;

        for(i=1;i<=k;i++)
        {
            cin>>l1[i]>>x;
        }

        quickSort(l1,1,k);

        for(i=1;i<=p;i++)
        {
            cin>>l2[i]>>x;
            j=1;
            while(l2[i]>l1[j])
            {
                j++;
            }

            if(l2[i]<l1[j])
            {
                flag=1;
            }
        }

        if(flag==1)
            cout<<"No"<<endl;
        else
            cout<<"Yes"<<endl;

    }
return 0;
}

long long partition (long long arr[], long long l, long long h)
{
    long long x = arr[h];
    long long i = (l - 1);

    for (long long j = l; j <= h- 1; j++)
    {
        if (arr[j] <= x)
        {
            i++;
            swap (&arr[i], &arr[j]);
        }
    }
    swap (&arr[i + 1], &arr[h]);
    return (i + 1);
}

/* A[] --> Array to be sorted, l  --> Starting index, h  --> Ending index */
void quickSort(long long A[], long long l, long long h)
{
    if (l < h)
    {
        long long p = partition(A, l, h); /* Partitioning index */
        quickSort(A, l, p - 1);
        quickSort(A, p + 1, h);
    }
}
