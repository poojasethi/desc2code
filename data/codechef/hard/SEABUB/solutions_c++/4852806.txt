#include <stdio.h>
#include <algorithm>
#include <math.h>

using namespace std;

double prob[111][111 * 111];
double sum[111][111 * 111], sum2[111][111 * 111];
int perm[111];

double myMin(double A, double B) {
    if (A < B)
        return A;
    return B;
}

int main() {
    int MAGIC = 100;

    prob[0][0] = 1;
    for (int i = 1; i <= MAGIC; i++)
        for (int j = 0; j <= (i - 1) * (i - 2) / 2; j++)
            for (int k = 0; k < i; k++)
                prob[i][j + k] += prob[i - 1][j] / (i + 0.0);

    for (int i = 1; i <= MAGIC; ++i)
        for (int j = 0; j <= i * (i - 1) / 2; ++j) {
            if (j)
                sum[i][j] = sum[i][j - 1] + prob[i][j];
            else
                sum[i][j] = prob[i][j];
            if (j)
                sum2[i][j] = sum2[i][j - 1] + j * prob[i][j];
            else
                sum2[i][j] = j * prob[i][j];
        }

    int testCases;
    scanf("%d", &testCases);
    while (testCases--) {
        int n;
        long long k;
        scanf("%d%lld", &n, &k);
        for (int i = 1; i <= n; ++i)
            scanf("%d", &perm[i]);

        int myInv = 0;
        for (int i = 1; i <= n; ++i)
            for (int j = i + 1; j <= n; ++j)
                if (perm[i] > perm[j])
                    ++myInv;

        if (k >= myInv) {
            printf("0\n");
            continue;
        }
        if (k == 0) {
            printf("%d\n", myInv);
            continue;
        }

        double prevE = 1.0 * n * (n - 1) / 4;
        double E;

        for (int steps = 1; steps < k; ++steps) {
            E = 0;
            int lim = (int) (steps + floor(prevE));
            if (lim >= steps + 1)
                E += sum2[n][lim] - sum2[n][steps] - steps * (sum[n][lim] - sum[n][steps]);
            if (lim + 1 <= n * (n - 1) / 2)
                E += prevE * (sum[n][n * (n - 1) / 2] - sum[n][lim]);
            prevE = E;
        }

        printf("%.7f\n", myMin(prevE, (double) myInv - k));
    }

    return 0;
}
