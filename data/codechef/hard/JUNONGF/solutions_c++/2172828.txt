//program JUNONGF

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>

using namespace std;

long long Get()
{
  char c;
  while(c=getchar(),(c<'0'||c>'9')&&(c!='-'));
  bool Flag=(c=='-');
  if(Flag)
    c=getchar();
  long long X=0;
  while(c>='0'&&c<='9')
    {
      X=X*10+c-48;
      c=getchar();
    }
  return Flag?-X:X;
}

void Output(long long X)
{
  if(X<0)
    {
      putchar('-');
      X=-X;
    }
  int Len=0,Data[20];
  while(X)
    {
      Data[Len++]=X%10;
      X/=10;
    }
  if(!Len)
    Data[Len++]=0;
  while(Len--)
    putchar(Data[Len]+48);
  putchar('\n');
}

const int Mod=1000000007;

long long Pow(long long A,long long B)
{
  if(!B)
    return 1;
  long long T=Pow(A*A%Mod,B/2);
  if(B&1)
    T=T*A%Mod;
  return T;
}

int main()
{
  int Test=Get();
  while(Test--)
    {
      long long V=Get()%Mod,A0,B0,C0,M0,A1,B1,C1,M1;
      int N=Get();
      static long long P[100],Q[100];
      P[0]=Get();P[1]=Get();A0=Get();B0=Get();C0=Get();M0=Get();
      Q[0]=Get();Q[1]=Get();A1=Get();B1=Get();C1=Get();M1=Get();
      for(int i=2;i<N;i++)
        {
          P[i]=(A0*A0%M0*P[i-1]+B0*P[i-2]+C0)%M0;
          Q[i]=(A1*A1%M1*Q[i-1]+B1*Q[i-2]+C1)%M1;
        }
      long long S=1;
      bool Zero=false;
      for(int i=0;i<N;i++)
        {
          S=(P[i]*M1+Q[i])%(Mod-1)*S%(Mod-1);
          if(!P[i]&&!Q[i])
            Zero=true;
        }
      if(!Zero&&!V)
        Output(0);
      else
        Output(Pow(V,S));
    }
  return 0;
}
