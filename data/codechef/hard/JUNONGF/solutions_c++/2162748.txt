#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>
#include<cmath>
#include<ctime>
 
#define FO(i,s,e,p) for(int i=(s);i<int(e);i+=p)
#define FOD(i,s,e,p) for(int i=(s);i>int(e);i-=p)
 
 
#define FOR(i,s,e) FO(i,s,e,1)
#define FORE(i,s,e) FOR(i,s,e+1)
#define FORD(i,s,e) FOD(i,s,e,1)
#define FORDE(i,s,e) FORD(i,s,e-1)
 
#define ALL(i,s) for(__typeof((s).begin()) i=(s).begin();i!=(s).end();i++)
 
#define MEM(tab,fill) memset(tab,fill,sizeof(tab))
 
#include<iostream>
#include<set>
#include<vector>
#include<string>
#include<sstream>
#include<stack>
#include<queue>
#include<algorithm>
#include<utility>
#include<bitset>
#include<map>
#include<cassert>
#define pb push_back
#define ll long long
using namespace std;
 
#define EPS 0.0000001
#define MOD 1000000007
#define mp make_pair
#define fi first
#define se second
#define inf ((1<<29)-1)
#define deb(a) cout<<#a<<' '<<a<<endl;
#define PI pair<ll,ll>
#define llu unsigned ll
 
#define AL(a) (a).begin(),(a).end()
#define PII pair<PI,PI>
 
 
 
 
 
inline llu fastpo(llu a,int n){
if(a==0) return 0;
    assert(n>=0);
    llu ret=1;
    for(;n;n>>=1){
        if(n&1) ret*=a,ret%=MOD;
        a*=a;a%=MOD;
    }
    return ret;
}
 
llu A0,B0,C0,M0;
llu A1,B1,C1,M1;
 
llu P[110],Q[110];
 
inline void solve(){
    llu v;int n;
    scanf("%llu%d",&v,&n);
    scanf("%llu%llu%llu%llu%llu%llu",P,P+1,&A0,&B0,&C0,&M0);
    scanf("%llu%llu%llu%llu%llu%llu",Q,Q+1,&A1,&B1,&C1,&M1);
 
    A0*=A0;A0%=M0;
    A1*=A1;A1%=M1;
 
    llu po=1;
 
    FOR(i,2,n){
        P[i]=(((A0*P[i-1])%M0+(B0*P[i-2])%M0)%M0+C0)%M0;
        Q[i]=(((A1*Q[i-1])%M1+(B1*Q[i-2])%M1)%M1+C1)%M1;
 
 
    }
    bool iyo=0;
    bool sul=1;
 
    FOR(i,0,n){
        ll x=P[i]*M1+Q[i];
        iyo|=(x==0);
        sul&=(x==0);
        x=max(x,1LL);
 
        x%=(MOD-1);
        po*=x;
        po%=MOD-1;
    }
    if(iyo){
        printf("1\n");
        return;
    }
 
 
 
    v%=MOD;
    printf("%llu\n",fastpo(v,po));
 
 
 
 
}
 
int main(){
   //freopen("C:\\a","r",stdin);
 
    int t;scanf("%d",&t);
    while(t--) solve();
 
 
    return 0;
}