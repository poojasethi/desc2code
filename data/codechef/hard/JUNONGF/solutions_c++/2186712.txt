#include"iostream"
#include"vector"
#include"string"
#include"cstdio"
#include"cstdlib"
#include"cmath"
#include"algorithm"
#include"queue"
#include"cstring"
#include"map"
#include"set"
#include"fstream"
#include"sstream"
#include"numeric"
#include"stack"
#include"iomanip"
#include"bitset"
#include"list"
#include"functional"
#include"utility"
#include"ctime"
#include"cctype"
#include"cassert"

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int,int> pii;
typedef vector<pii> vpi;
const double eps=1e-7;
const int inf=0x3f3f3f3f;
const int hinf=0x3f3f3f3f;
const ll m=1000000007;

#define out(x) cout<<x<<'\n';
#define fio freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define fino freopen("input.txt","r",stdin);
#define sz(a) sizeof(a)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define ms(a,i) memset((a),(i),sz(a))
#define clr(x) memset(x,0,sz(x))
#define cdp(x) memset((x),-1,sizeof(x))
#define infi(x) memset(x,0x3f,sz(x))
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)

ll modulo(ll a , ll b , ll md)
{
    if(b == 0) return 1;
    ll ans = modulo(a , b / 2ll,md);
    ans = (ans * ans) % md;
    if(b & 1ll) ans = (ans * a) % md;
    return ans;
}

long long pp[101],qq[101];

int main()
{
    int t;
    long long dim,v,power,a0,a1,b0,b1,c0,c1,m0,m1;
    int n;
	cin>>t;
	while(t--)
	{
		cin>>v>>n;
		cin>>pp[0]>>pp[1]>>a0>>b0>>c0>>m0;
        cin>>qq[0]>>qq[1]>>a1>>b1>>c1>>m1;
		power=1;
		a0=(a0*a0)%m0;
		a1=(a1*a1)%m1;
		b0%=m0;
		b1%=m1;
		c0%=m0;
		c1%=m1;
		for(int i=0;i<n;i++)
		{
            if(i>1)
            {
                pp[i]=(((a0*pp[i-1])%m0+(b0*pp[i-2])%m0)%m0+c0)%m0;
                qq[i]=(((a1*qq[i-1])%m1+(b1*qq[i-2])%m1)%m1+c1)%m1;
            }
            //calculating the ith dimension
            dim=pp[i]*m1+qq[i];
            //we can apply fermat-euler theorem only when v and m are co-primes
            if(v%m)
            {
                dim%=(m-1);
                power=(power*dim)%(m-1);
            }
            //if one of the dimensions is of unit length there's only one way of opening restaurants in this city as v^0=1
            //this is inspite of v being a multiple of m
            else if(dim==0) power=0;
		}
		if(power==0) printf("1\n");
		else if(v%m==0) printf("0\n");
		else printf("%lld\n",modulo(v%m,power,m));
	}
	return 0;
}
