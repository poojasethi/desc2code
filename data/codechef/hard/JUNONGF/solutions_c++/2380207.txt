#include <stdio.h>
#define mod 1000000007

int p[111], q[111];
long long l[111];

int power(int n, int k)
{	if (k == 0)
		return 1;
	int res = power(n, k >>1 );
	res = (long long int)((long long int)res * res) % mod;
	if (k % 2)
		res = (long long int)((long long int)res * n) % mod;
	return res;
}

int main()
{	
	//#ifdef ONLINE_JUDGE
	//	freopen("in.txt","r",stdin);
	//#endif
	int t;
	scanf("%d", &t);
	while (t--)
	{	long long v;
		int n, a0, b0, c0, m0, a1, b1, c1, m1;
		scanf("%lld %d", &v, &n);
		scanf("%d %d %d %d %d %d", p+0, p+1, &a0, &b0, &c0, &m0);
		scanf("%d %d %d %d %d %d", q+0, q+1, &a1, &b1, &c1, &m1);
		a0 = (long long)a0 * a0 % m0;
		a1 = (long long)a1 * a1 % m1;
		for (int i=2;i<n;i++)
		{	p[i] = ((long long)a0 * p[i-1] + (long long)b0 * p[i-2] + c0) % m0;
			q[i] = ((long long)a1 * q[i-1] + (long long)b1 * q[i-2] + c1) % m1;
		}
		for (int i=0;i<n;i++)
			l[i] = (long long)p[i] * m1 + q[i] + 1;
		bool ones = 1;
		for (int i=0;i<n;i++)
			if (l[i] > 1)					// all 1's is the corner case
				ones = 0;
		if (ones)						// if ones true. 1 single cell case!! This is the special case
			printf("%d\n", 1);
/*
The special case is formed when v % mod == 0 and ones = true. If we wouldn't have used this condition then the answer we would have got would be 0 but the answer is 1. Explanation of this special case. If only 1 solid cube, let N=3, L[0]=L[1]=L[2]=1 V=3 (lets say). Now this single cell can have value from 0-> V-1 =(0,1,2), and the only way when the sum == 0 ius whne there are no restaurant in the cell i.e. entry is 0 -> the only way = answer = 1
*/
		else
			if ( (v %= mod) == 0)				// 0^b = 0
				printf("%d\n", 0);
			else
			{	int p = 1;
				for (int i=0;i<n;i++)
				{	l[i] = (l[i]-1) % (mod-1);
					if (l[i] < 0)			// another thing to be taken care of! -ve during modulo
						l[i] += mod-1;
					p = ((long long)p * l[i]) % (mod-1);
				}
				/*int x = 1, step = 1 << 30;
				while (step > 0)
				{	x = (long long)x * x % md;
					if (step & p)
						x = (long long)x * v % md;
					step >>= 1;
				}
				printf("%d\n", x);*/
				printf("%d\n",power(v,p));				
			}
	}
	return 0;
}
