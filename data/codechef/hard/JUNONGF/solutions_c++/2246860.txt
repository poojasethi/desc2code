#include"iostream"
#include"vector"
#include"string"
#include"cstdio"
#include"cstdlib"
#include"cmath"
#include"algorithm"
#include"queue"
#include"cstring"
#include"map"
#include"set"
#include"fstream"
#include"sstream"
#include"numeric"
#include"stack"
#include"iomanip"
#include"bitset"
#include"list"
#include"functional"
#include"utility"
#include"ctime"
#include"cctype"
 
using namespace std;
 
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int,int> pii;
typedef vector<pii> vpi;
const double eps=1e-7;
const int inf=0x3f3f3f3f;
const int hinf=0x3f3f3f3f;
const ll mod=1000000007;
 
#define out(x) cout<<x<<'\n';
#define fio freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define fino freopen("input.txt","r",stdin);
#define sz(a) sizeof(a)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define ms(a,i) memset((a),(i),sz(a))
#define clr(x) memset(x,0,sz(x))
#define cdp(x) memset((x),-1,sizeof(x))
#define infi(x) memset(x,0x3f,sz(x))
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)
 
ll mul(ll a , ll b , ll md)
{
    return (a * b) % md;
}
 
ll pow_mod(ll a , ll b , ll md)
{
    if(b == 0) return 1;
    ll ans = pow_mod(a , b / 2ll , md);
    ans = (ans * ans) % md;
    if(b & 1ll) ans = (ans * a) % md;
    return ans;
}
 
int t , n;
ll p[220] , q[220] , a0 , b0 , c0 , a1 , b1 , c1 , m0 , m1;
ll v;
ll l[220];
 
int main()
{
    //fino
    cin>>t;
    while(t--)
    {
        cin>>v>>n;
        cin>>p[0]>>p[1]>>a0>>b0>>c0>>m0;
        cin>>q[0]>>q[1]>>a1>>b1>>c1>>m1;
        a0 = (a0 * a0) % m0; a1 = (a1 * a1) % m1;
        b0 %= m0;
		b1 %= m1;
		c0 %= m0;
		c1 %= m1;
		ll exp = 1ll; //v = v % mod;
		for(int i = 0 ; i < n ; i ++ )
		{
		    if(i > 1)
		    {
                p[i]=(((a0*p[i-1])%m0+(b0*p[i-2])%m0)%m0+c0)%m0;
                q[i]=(((a1*q[i-1])%m1+(b1*q[i-2])%m1)%m1+c1)%m1;
		    }
		    l[i] = p[i] * m1 + q[i];
		    if(v % mod)
            {
                l[i] %= (mod -1ll);
                exp = (exp * l[i]) % (mod - 1ll);
            }
            else if(l[i] == 0) exp = 0;
		}
        if(exp == 0)    printf("1\n");
        else if(v % mod == 0) printf("0\n");
        else printf("%lld\n",pow_mod(v % mod , exp , mod));
    }
    return 0;
}