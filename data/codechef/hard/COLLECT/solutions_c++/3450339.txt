#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <climits>
#include <sstream>
#include <functional>
#include <complex>

using namespace std;

#define len(array)  (sizeof (array) / sizeof *(array))
#define rep(i, s, e) for(int i = s;i < e;i++)
#define Rep(i, e) for(int i = 0;i < e;i++)
#define rrep(i, e, s) for(int i = e;s <= i;i--)
#define Rrep(i, e) for(int i = e;0 <= i;i--)
#define vrange(v) v.begin(), v.end()
#define vrrange(v) v.rbegin(), v.rend()
#define vsort(v) sort(vrange(v))
#define vrsort(v) sort(vrrange(v))
#define arange(a) a, a + len(a)
#define asort(a) sort(arange(a))
#define arsort(a, t) sort(arange(a), greater<t>())
#define afill(a, v) fill(arange(a), v)
#define afill2(a, v, t) fill((t *)a, (t *)(a + len(a)), v)
#define fmax(a, b) (a < b? b : a)
#define fmin(a, b) (a > b? b : a)
#define fabs(a) (a < 0? -a : a)
#define pb push_back
#define rg(i, s, t) s <= i && i < t
//#define X real()
//#define Y imag()
//typedef unsigned int ui;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> P;
//typedef complex<double> p;
const int INF = (int)2e9;
const int MOD = 3046201;
const double EPS = 1e-10;
//const int dx[] = {1, -1, 0, 0, 1, -1, -1, 1};
//const int dy[] = {0, 0, 1, -1, -1, -1, 1, 1};
//const int weight[] = {0,1,10,100,1000,10000,100000,1000000,10000000};
//priority_queue< int, vector<int>, greater<int> > q;

#define MAX_N 100000 + 2
ll bit[MAX_N + 1];
void add(int idx, ll val, ll* ary){
  int p = idx+1;
  while(p < MAX_N){
	ary[p] += val;
	p += p & -p;
  }
}
ll sum(int idx, ll *ary){
  ll res = 0;
  int p = idx+1;
  while(0 < p){
	res += ary[p];
	p -= p & -p;
  }
  return res;
}
void change(int idx, ll val, ll* ary){
  ll s = sum(idx, ary) - sum(idx-1, ary);
  add(idx, val - s, ary);
}

// a x + b y = gcd(a, b)
int extgcd(int a, int b, int &x, int &y) {
  int g = a; x = 1; y = 0;
  if (b != 0) g = extgcd(b, a % b, y, x), y -= (a / b) * x;
  return g;
}

// 1/a mod m
int mod_inverse(int a){
  int x, y;
  extgcd(a, MOD, x, y);
  return (MOD + x % MOD) % MOD;
}

//n**p % m
int powMod(int n, int p){
  ll ans = 1, ln = n;
  if(p <= 0) return 1;
  while(p != 0){
	if((p & 1) == 1) ans = (ans*ln) % MOD;
	ln = (ln * ln) % MOD;
	p = p >> 1;
  }
  return (int)ans;
}

ll facts[MOD + 1], inv[MOD + 1];


int fcomb(int n, int k){
  ll l = 1, c = 1, ans;
  if(n < k) return 0;
  if(n - k < k) k = n - k;
  ans = facts[n];
  ans = ans * inv[facts[k]] % MOD;
  ans = ans * inv[facts[n - k]] % MOD;
  return (int)ans;
}


void doIt(){
  int n, q, e, l, r, nums, p, np, qq, nq;
  ll berry, ans;
  char s[10];
  // string s;
  facts[0] = 1;
  rep(i, 1, MOD + 1){
    facts[i] = i * facts[i-1] % MOD;
  }
  rep(i, 1, MOD + 1){
    inv[i] = mod_inverse(i);
  }
  scanf("%d", &n);
  Rep(i, n){
    scanf("%d", &e);
    add(i, e, bit);
  }
  scanf("%d", &q);
  Rep(i, q){
    // cin >> s;
    scanf("%s%d%d", s, &l, &r);
    if(s[0] == 'c'){
      change(l-1, r, bit);
    }
    else{
      berry = sum(r-1, bit) - sum(l-2, bit);
      // printf("sum(r-1) = %lld, sum(l-1) = %lld\n", sum(r-1, bit), sum(l-2, bit));
      nums = r - l + 1;
      p = berry % nums, np = berry / nums + 1;
      qq = nums - p, nq = berry / nums;
      //berry!:;
      ans = facts[berry];
      // printf("berry = %lld, ans = %lld\n", berry, ans);
      // printf("C(%d, %d) = %d\n", nums, p, fcomb(nums, p));
      ans = ans * fcomb(nums, p) % MOD;
      ans = ans * inv[powMod(facts[np], p)] % MOD;
      ans = ans * inv[powMod(facts[nq], qq)] % MOD;
      printf("%lld\n", ans);
    }
  }
}

int main() {
  doIt();
  return 0;
}
