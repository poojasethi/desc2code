#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>

using namespace std;

typedef unsigned long long ULL;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef map<int, int> MI;
typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<vector<int> > VVI;
typedef vector<vector<LL> > VVL;
const double pi=acos(-1.0);
const double eps=1e-11;
const int mod = 3046201;
const int oo = (1 << 31) - 1;

#define two(X) (1<<(X))
#define twoL(X) ((1LL)<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)

#define rep(i, n) rb(i, 0, n)
#define rb(i, b, n) rbc(i, b, n, <)
#define rbe(i, b, n) rbc(i, b, n, <=)
#define rbc(i, b, n, c) for(int i = ((int)(b)); i c ((int)(n)); i++)

#define p(x) cout << x;
#define ps(x) cout << x << " "
#define pl cout << endl
#define pn(x) cout << x << endl

#define s(v) ((int) v.size())
#define all(v) v.begin(), v.end()
#define MP make_pair
#define PB push_back
#define X first
#define Y second
#define debug(vari) cerr<<(vari)<<" ";
#define getcx getchar
//_unlocked

const int maxn = 100005;

int n, q, L, R, B;
int berry[maxn], psum[maxn], ft[maxn];
LL fact[3000005];

void update(int x, int v) {
    for(;x <= n;x += (x & -x)) ft[x] += v;
}

int getsum(int x) {
    int sum = 0;
    for(;x > 0;x -= (x & -x)) sum += ft[x];
    return sum;
}

int getsum(int x, int y) {
    return getsum(y) - getsum(x - 1);
}

LL expmod(LL x, int n) {
    LL res = 1;
    while(n) {
        if(n & 1) res *= x, res %= mod;
        x *= x; x %= mod;
        n >>= 1;
    }
    return res;
}

LL getways(LL B, LL K) {
    int y = B % K;
    int x = B / K;

    LL res = fact[K] * expmod(fact[y], mod - 2); res %= mod;
    res *= expmod(fact[K - y], mod - 2); res %= mod;
    res *= fact[B]; res %= mod;

    LL x1 = expmod(fact[x + 1], y);
    LL x2 = expmod(fact[x], K - y);

    x1 *= x2; x1 %= mod;

    res *= expmod(x1, mod - 2); res %= mod;

    return res;
}



int main()  {

    //freopen("test.in","r",stdin);
    //freopen("test.out","w",stdout);

    char op[15];
    LL ways;

    fact[0] = 1;
    rbe(i, 1, 3000000) fact[i] = fact[i - 1] * i, fact[i] %= mod;

    memset(ft, 0, (n + 1) * sizeof(int));

    scanf("%d", &n);
    rbe(i, 1, n) scanf("%d", &berry[i]);

    psum[0] = 0;
    rbe(i, 1, n) psum[i] = psum[i - 1] + berry[i];
    scanf("%d", &q);

    rep(i, q) {
        scanf("%s%d%d", op, &L, &R);

        if(op[0] == 'c') {
            update(L, R - berry[L]);
            berry[L] = R;
            //rep(i, n + 1) ps(ft[i]);
        }
        else {
            B = psum[R] - psum[L - 1] + getsum(L, R);

            //pn(B);

            ways = getways(B, R - L + 1);
            printf("%lld\n", ways);
        }
    }



    return 0;
}

