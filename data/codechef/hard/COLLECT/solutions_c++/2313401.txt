#include<stdio.h>
#include<algorithm>
#define MAX 1000004
#define MOD 3046201

using namespace std;

struct node
{
	int sum;
	int pre;
	int suf;
	int maxsum;
};

node st[3*MAX];
int a[MAX];
long long int fact[3*MAX];

void precompute()
{
	fact[0]=1;

	for(int i=1;i<3*MAX;i++)
    fact[i]=(fact[i-1]*(i%MOD))%MOD;

}
node makenode(struct node l,struct node r)
{
	struct node c;
	c.sum=l.sum+r.sum;
	c.pre=max(l.pre,l.sum+r.pre);
	c.suf=max(r.suf,l.suf+r.sum);
	c.maxsum=max(max(l.maxsum,r.maxsum),l.suf+r.pre);

	return c;
}

void buildtree(int l,int r,int index)
{
	if(l==r)
    {
	   	st[index].sum=a[l];
		st[index].pre=a[l];
		st[index].suf=a[l];
	 	st[index].maxsum=a[l];
		return;
	}

	int mid=(l+r)/2;

	buildtree(mid+1,r,2*index+2);
    buildtree(l,mid,2*index+1);

    st[index]=makenode(st[2*index+1],st[2*index+2]);
    return ;

}

void update(int p,int value,int l,int r,int index)
{
	if(p>r||p<l)
	return;


	if(l==p&&r==p)
	{
		st[index].sum=value;
		st[index].pre=value;
		st[index].suf=value;
		st[index].maxsum=value;
		return;
	}

	int mid=(l+r)/2;

	if(p>mid)
	update(p,value,mid+1,r,2*index+2);

	else
	update(p,value,l,mid,2*index+1);

	st[index]=makenode(st[2*index+1],st[2*index+2]);
}

node query(int p,int q,int l,int r,int index)
{
	if(p==l&&q==r)
	return st[index];

	int mid=(l+r)/2;

	if(p>mid)
	return query(p,q,mid+1,r,2*index+2);

	else if (q<=mid)
	return query(p,q,l,mid,2*index+1);

	else
	return (makenode(query(p,mid,l,mid,2*index+1),query(mid+1,q,mid+1,r,2*index+2)));
}

// calcluate a^b mod MOD

long long pow(long long int a,long long int b)
{
	long long int x=1,y=a;

	if(b==0)
	return 1;

	while(b>0)
	{
		if(b%2==1)
		{
			x=x*y;
			x=x%MOD;
		}

		b/=2;

		y=y*y;
		y=y%MOD;
	}

return x;
}

long long int IEuler (long long int a)
{
	return (pow(a,MOD-2)%MOD);
}

int main()
{
	  int t,n,l,r,m,c,sum,q,flag;
	  char str[10];
	  long long ans;
			precompute();
			scanf("%d",&n);
			for(int i=0;i<n;i++)
			scanf("%d",&a[i]);
			buildtree(0,n-1,0);

		    scanf("%d",&q);

			while(q--)
			{
				flag=0;
				 ans=1;
				scanf("%s%d%d",str,&l,&r);
				char c=str[0];

				switch(c)
				{
					case 'c' : update(l-1,r,0,n-1,0);
							   break;

					case 'q' : sum=query(l-1,r-1,0,n-1,0).maxsum;
							   flag=1;
							   break;
				}

				 if(flag)
				 {int k=r-l+1;

				 int i=sum%k;
				 int x=sum/k;


				 ans=(ans*fact[k])%MOD;
				 ans=(ans*fact[sum])%MOD;
				 ans=(ans*IEuler(pow(fact[x+1],i)))%MOD;
				 ans=(ans*IEuler(pow(fact[x],k-i)))%MOD;
				 ans=(ans*IEuler(fact[k-i]))%MOD;
				 ans=(ans*IEuler(fact[i]))%MOD;

                                 ans=(ans+MOD)%MOD;
				 printf("\n%lld",ans);
				}
			 }

//	getch();
	return 0;
}
