// refer to editorial
#include <assert.h>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <algorithm>

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define DOWN(i,a,b) for (int i = int(a); i >= b; i--)

#define mod 3046201

using namespace std;

int node[122222 * 4], a[122222], n;

void make_tree(int s, int l, int r)
{	if (l == r)
	{	node[s] = a[l];
		return;
	}
	int mid = (l + r) >> 1;
	int s1 = s << 1, s2 = s1 | 1;
	make_tree(s1, l, mid);
	make_tree(s2, mid + 1, r);
	node[s] = node[s1] + node[s2];
}

int get(int s, int l, int r, int u, int v)
{	if (v < l || r < u)
		return 0;
 	if (u <= l && r <= v)
		return node[s];
	int mid = (l + r) >> 1;
	int s1 = s << 1, s2 = s1 | 1;
	return get(s1, l, mid, u, v) + get(s2, mid + 1, r, u, v);
}

void update(int s, int l, int r, int u, int v)
{	if (u < l || r < u)
		return;
	if (l == r)
	{	node[s] = v;
		return;
	}
	int mid = (l + r) >> 1;
	int s1 = s << 1, s2 = s1 | 1;				// s1+1 = s1 | 1
	update(s1, l, mid, u, v);
	update(s2, mid + 1, r, u, v);
	node[s] = node[s1] + node[s2];
}


int power(int n, int k)
{	if (k == 0)
		return 1;
	int res = power(n, k >>1 );
	res = (long long int)((long long int)res * res) % mod;
	if (k % 2)
		res = (long long int)((long long int)res * n) % mod;
	return res;
}

int fact[3000005], inv[100005];

void init()
{	//frac[n] = n! modulo 3046201
	fact[0] = 1;
	// max value of b=10^5 * 30 = 3*10^6
	FOR (i, 1, 3000000)
		fact[i] = (long long int)((long long int) fact[i - 1] * i) % mod;
	FOR (i, 0, 100005)
	        inv[i] = power(fact[i], mod-2);
}

int main()
{	int n,q;
	init();
	scanf("%d",&n);
	FOR (i, 1, n)
		scanf("%d", a+i);
	make_tree(1, 1, n);
	scanf("%d",&q);
	string s;
	while (q-- > 0)
	{	cin>>s;
		int l, r;
		if (s ==  "query") 
		{	int b,k,x,i,ans;
			scanf("%d %d", &l, &r);
			b = get(1, 1, n, l, r);
			k = r-l+1;
			x = b/k;			// x = floor(b/k)
			i = b%k;
			//printf("b: %d k:%d x:%d i:%d\n",b,k,x,i);
			ans = ((long long int)fact[k]*fact[b])%mod;
			ans = ((long long int)ans*power(inv[x], k-i))%mod;		// x == floor(b/k)
			ans = ( (long long int)ans*power(inv[x+1], i))%mod;		// i == b%k
			ans = ( ( (long long int)( (long long int)ans*inv[i])%mod)*inv[k-i])%mod;
			printf("%d\n", ans);
		}
		else if (s == "change")
		{	scanf("%d %d", &l, &r);
			update(1, 1, n, l, r);
			a[l] = r;
		}
	}
	return 0;
}