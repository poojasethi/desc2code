#include<stdio.h>
#include<algorithm>
#define MAX 1000004
#define MOD 3046201

using namespace std;

struct node
{
	int sum;
	int flag;
};

node st[3*MAX];
int a[MAX];
int atost[MAX];
long long int fact[3*MAX];


void precompute()
{
	fact[0]=1;
	
	for(int i=1;i<3*MAX;i++)
    fact[i]=(fact[i-1]*(i%MOD))%MOD;

}


void buildtree(int index,int l,int r)
{
	if(l==r)
    {
	   	st[index].sum=a[l];
	   	st[index].flag=1;
	   	atost[l]=index;
	   	return;
	}
	
	int mid=(l+r)/2;
	
	buildtree(2*index,l,mid);
    buildtree(2*index+1,mid+1,r);
    
    st[index].sum=st[2*index].sum+st[2*index+1].sum;
    st[index].flag=1;
	return;
}

 void update(int pos, int val)
{
    pos=atost[pos];
    st[pos].sum=val;
    pos>>=1;
    while(pos>0)
    {
        if(st[pos*2].flag==1&&st[pos*2+1].flag==1)
        {
            st[pos].sum=st[pos*2].sum+st[pos*2+1].sum;
        }
        else if(st[pos*2].flag==1)
        {
            st[pos]=st[pos*2];
        }
        else st[pos]=st[pos*2+1];
        pos>>=1;
    }

    }
node query(int n, int b, int e, int i, int j)
{
   struct node node1,node2,node3;

 if (b>=i && e<=j)
 {
     return st[n];
 }
 int mid = (e+b)/2;
 if(j<=mid){
                return query(2*n, b, mid, i, j);
        }
        else if(i>mid){
                return query(2*n+1, mid+1, e, i, j);
        }

 node1=query(n*2,b,mid,i,j);
 node2=query(n*2+1,mid+1,e,i,j);

 node3.sum=node1.sum+node2.sum;

 return node3;
 }
// calcluate a^b mod MOD

long long pow(long long int a,long long int b)
{
	long long int x=1,y=a;

	if(b==0)
	return 1;
	
	while(b>0)
	{
		if(b%2==1)
		{
			x=x*y;
			x=x%MOD;
		}

		b/=2;

		y=y*y;
		y=y%MOD;
	}

return x;
}

long long int IEuler (long long int a)
{
	return (pow(a,MOD-2)%MOD);
}

int main()
{
	  int t,n,l,r,m,c,sum,q,flag;
	  char str[10];
	  long long ans;
			precompute();
			scanf("%d",&n);
			for(int i=0;i<n;i++)
			scanf("%d",&a[i]);
			buildtree(1,0,n-1);

		    scanf("%d",&q);

			while(q--)
			{
				flag=0;
				 ans=1;
				scanf("%s%d%d",str,&l,&r);
				char c=str[0];
				
				switch(c)
				{
					case 'c' : update(l-1,r);
							   break;

					case 'q' : sum=query(1,0,n-1,l-1,r-1).sum;
							   flag=1;
							   break;
				}

				 if(flag)
				 {int k=r-l+1;

				 int i=sum%k;
				 int x=sum/k;
				 
				 
				 ans=(ans*fact[k])%MOD;
				 ans=(ans*fact[sum])%MOD;
				 ans=(ans*IEuler(pow(fact[x+1],i)))%MOD;
				 ans=(ans*IEuler(pow(fact[x],k-i)))%MOD;
				 ans=(ans*IEuler(fact[k-i]))%MOD;
				 ans=(ans*IEuler(fact[i]))%MOD;

 					ans=(ans+MOD)%MOD;
				 printf("\n%lld",ans);
				}
			 }

//	getch();
	return 0;
}
