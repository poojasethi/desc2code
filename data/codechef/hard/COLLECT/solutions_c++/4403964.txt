#include <cstdio>
#include <vector>
#include <iostream>
#include <string>
#include <cmath>
#include <algorithm>
#include <cstdlib>
#include <sstream>
#include<string.h>
#include <set>
#include <cassert>
#include <map>
#include <set>
#include<limits.h>
#include <queue>
#include <stack>
using namespace std;
typedef long long ll;
//#define in(a) scanf("%lld",&a)
#define F(i,a,b) for(ll i=a;i<=b;i++)
#define mp make_pair
#define pb push_back 
#define X first
#define Y second
#define MOD (ll)3046201
 
#define gc getchar_unlocked
 
void in(ll &x)
{
    register ll c = gc();
    x = 0;
    for(;(c<48 || c>57);c = gc());
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

ll n,f[100010],c[100010],t[100010],q,fact[3000001],ifact[100010];
char querys[10];

//ok
void change(ll idx,ll val){	
	
	val=val-f[idx];
	
	while(idx<=n){
		t[idx]+=val;
		idx+=idx&-idx;
	}
	
}

//ok
ll query(ll idx){
	
	ll sum=0;
	
	while(idx>0){
		sum+=t[idx];
		idx-=idx&-idx;
	}
	
	return sum;
}

//ok
ll exp(ll a ,ll b){
	if(b==0)
	return 1;
	if(b&1)
	return (a*exp(a,b-1))%MOD;
	else
	{
		ll ans=exp(a,b/2)%MOD;
		return (ans*ans)%MOD;
	}
}

/*long long ans(int sum, int k)
{
    long long Ans;
    Ans = ( fact[sum]*modPow(ifact[sum/k + 1], sum%k) )%moD;
    Ans = ( Ans*modPow(ifact[sum/k], k-sum%k) )%moD;
    Ans = ( Ans*fact[k] )%moD;
    Ans = ( Ans*ifact[sum%k] )%moD;
    Ans = ( Ans*ifact[k-sum%k] )%moD;
    return Ans;
}*/

ll ans(ll num,ll k){
	ll c=(fact[k]*ifact[num%k])%MOD;
	c=(c*ifact[k-num%k])%MOD;
	c=(c*fact[num])%MOD;
	c=(c*exp( ifact[num/k+1] , num%k ))%MOD;
	c=(c*exp(ifact[num/k],k-num%k))%MOD;
	return c;
}

//ok
ll query2(ll a,ll b){
	
	return ans(query(b)-query(a-1),b-a+1)%MOD; // number of berries and number of tourists

}
	
int main(){	 
 
 in(n);
 
 c[0]=0;
 f[0]=0;
 t[0]=0;
 
 fact[0]=1;
 fact[1]=1;
 
 //ok

F(i,1,3000000)
{
fact[i]=(i*fact[i-1])%MOD;
}
ifact[100001] = exp(fact[100001],MOD-2);
 
for(ll i=100000;i>=0;i--)	
ifact[i]=(ifact[i+1]*(i+1))%MOD;
 
 //ok
 F(i,1,n){
 	in(f[i]);
 	c[i]+=f[i]+c[i-1];
 	t[i]=c[i]-c[i-(i&-i)];
 	}
 
 in(q);
 
 while(q--){
 	ll x,y;

 	scanf("%s",querys);
 	in(x); in(y);
	
	if( querys[0]=='c' )
	{change(x,y);
	 f[x]=y;
	 }
	else if( querys[0]=='q' )
	printf("%lld\n",query2(x,y));
}

return 0;
}