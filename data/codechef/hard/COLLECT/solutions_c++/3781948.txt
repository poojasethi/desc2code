#include<iostream>
#include<stdio.h>
typedef long long ll;
#define MOD 3046201
using namespace std;

ll fact[3000005], rfact[3000005], tree[100005];
ll n,q;

ll mod_pow(ll a, ll p)
{
    if(a==0)
        return 0;
    if(p==0)
        return 1;

    ll tmp = mod_pow(a,p/2);
    tmp = tmp*tmp;
    tmp %= MOD;
    if(p%2)
        tmp = a*tmp;
return (tmp%MOD);
}

void update(ll ind, ll u)
{
    while(ind<=n)
    {
        tree[ind] += u;
        ind += (ind)&(-ind);
    }
}

ll total(ll ind)
{
    ll sum = 0;
    while(ind>0)
    {
        sum += tree[ind];
        ind -= (ind)&(-ind);
    }
return sum;
}

int main()
{
    
    scanf("%lld",&n);
    ll arr[n+1];
    ll N = 3000005;
    for(ll i=1;i<=n;i++)
    {
        scanf("%lld",&arr[i]);
    }
    
    fact[0] = 1;

    for(ll i=1;i<=N;i++)
        fact[i] = ((i)*(fact[i-1]))%MOD;
    
    rfact[N] = mod_pow(fact[N],MOD-2);

    for(ll i=N-1;i>=0;i--)
        rfact[i] = ((i+1)*(rfact[i+1]))%MOD;

    for(int i=1;i<=n;i++)
        update(i,arr[i]);
    
    cin >> q;
    while(q--)
    {
        char s[20];
        scanf("%s",s);
        if(s[0]=='q')
        {
        ll l,r;
        scanf("%lld %lld",&l,&r);
        ll sum = 0;
//        for(ll i=l;i<=r;i++)
//            sum += arr[i];
        sum = total(r) - total(l-1);
        ll num = r-l+1;
        ll eq = sum/num;
        ll rem = sum%num;
        ll ans = 1, ans1 = 1,sum1=sum;
//        cout << "sum " << sum << " " << "rem " << rem << endl;
/*       for(ll i=0;i<rem;i++)
        {
            ll tmp = ((fact[sum1]*rfact[sum1-eq-1])%MOD*rfact[eq+1])%MOD;
            ans1 *= tmp;
            sum1 -= (eq+1);
        }
*/        
        if(rem>0)
            ans = ((fact[sum]*mod_pow(rfact[eq+1],rem))%MOD*rfact[sum-rem*(eq+1)])%MOD;
        ans %= MOD;
//        cout << ans1%MOD << " " << ans << endl;
/*        for(ll i=rem;i<num;i++)
        {
            ans1 *= ((fact[sum1]*rfact[sum1-eq])%MOD*rfact[eq])%MOD;
            sum1 -= eq;
        }

*/
        sum -= (rem*(eq+1));
        if(num-rem > 0)
            ans *= ((fact[sum]*mod_pow(rfact[eq],num-rem))%MOD*rfact[sum-(num-rem)*eq])%MOD;
        ans %= MOD;
        ll oth = ((fact[num]*rfact[rem])%MOD*rfact[num-rem])%MOD;
//        ans1 = (ans1*oth)%MOD;
        ans = (ans*oth)%MOD;
        printf("%lld\n",ans);
        }
        else
        {
            ll ind,u;
            scanf("%lld %lld",&ind,&u);
            int diff = u-arr[ind];
            arr[ind] = u;
            update(ind,diff);
        }
    }
return 0;
}
