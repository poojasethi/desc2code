#include<bits/stdc++.h>
#define MOD 3046201
#define MAX 3000005
#define mp make_pair
#define llu unsigned long long
using namespace std;

llu fact[MAX];
int MaxVal;
int *tree;

void preprocess()
{
    fact[0]=1;
    for(int i=1;i<MAX;i++)
        fact[i]=(fact[i-1]*i)% MOD;
}

int read(int idx)
{
	int sum = 0;
	while (idx > 0)
	{
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}

void update(int idx ,int val)
{
	while (idx <= MaxVal)
    {
		tree[idx] += val;
		idx += (idx & -idx);
	}
}

llu power(llu a, llu b)
{
    llu x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}

llu InverseEuler(llu n)
{
    return power(n,MOD-2);
}

void calcAns(int sum,int k)
{
    int i=sum%k,x=sum/k;
    llu ans1,ans2,denom1,denom2,res;
    ans1 = (((fact[k] * InverseEuler(fact[i]))%MOD)*InverseEuler(fact[k-i]))%MOD;
    denom1 = power(fact[x+1],i);
    denom2 = power(fact[x],k-i);
    ans2 = (((fact[sum] * InverseEuler(denom1))%MOD)*InverseEuler(denom2))%MOD;
    res = (ans1*ans2)%MOD;
    res = (res+MOD)%MOD;
    cout<<endl<<res;

}

inline void inp(int &n)
{
  n = 0;
  int ch = getchar_unlocked();
  int sign = 1;
  while(ch < '0' || ch > '9') {
    if (ch == '-') sign = -1;
    ch = getchar_unlocked();
  }
  while(ch >= '0' && ch <= '9')
    n = (n<<3) + (n<<1) + ch - '0', ch = getchar_unlocked();
  n = n*sign;
}

int main()
{
   preprocess();
   int n,q;
   inp(n);
   MaxVal=n+1;
   int berries[n+1];
   tree = new int[MaxVal];
   memset(tree,0,sizeof(tree)*MaxVal);
   for(int i=1;i<=n;i++)
   {
       inp(berries[i]);
       update(i,berries[i]);
   }
   inp(q);
   while(q--)
   {
       string str;
       int u,v;
       cin>>str;
       if(str=="change")
       {
           inp(u);inp(v);
           update(u,v-berries[u]);
           berries[u]=v;
       }
       else if(str=="query")
       {
           inp(u);inp(v);
           int sum = read(v) - read(u-1);
           int k = v-u+1;
           calcAns(sum,k);
       }
   }
   return 0;
}
