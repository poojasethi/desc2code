#include <bits/stdc++.h>
using namespace std;
//fast input
#define get getchar_unlocked
template<class T>
inline T scan_int() {int ip=get(),flag=1;T ret=0;for(;ip<'0'||ip>'9';ip=get())if(ip=='-'){flag=-1;ip=get();break;}for(;ip>='0'&&ip<='9';ip=get())ret=(ret<<3)+(ret<<1)+ip-'0';return flag*ret;}
#define scan_d scan_int<int>
#define scan_ld scan_int<long int>
#define scan_lld scan_int<long long int>
template <class T>
inline T scan_decimal(){char c;c = get();T flag=1.0;long long int t = 0;for(;c<'0'||c>'9';c=get())if(c=='-'){flag=-1.0;c=get();break;}while(c<='9' && c>='0'){t=(t<<3)+(t<<1)+c-'0';c = get();}long long int d=0,i=1;if(c=='.'){c = get();while(c<='9' && c>='0'){i=(i<<3)+(i<<1);d=(d<<3)+(d<<1)+c-'0';c = get();}}return ((T)t + ((T)d)/i)*flag;}
#define scan_f scan_decimal<float>
#define scan_lf scan_decimal<double>
inline void scan_str(char *str){register char c = 0;register int i = 0;while (c < 33)c = get();while (c != '\n' && c != EOF){str[i] = c;c = get();i = i + 1;}str[i] = '\0';}
//end of fast input
//fast output
#define put putchar_unlocked
char output_buffer[21];
template <class T>
inline void print_int(T n) {if(n<0){n=-n;put('-');}int i=21;do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{put(output_buffer[i]);}while(++i<21);}
#define print_d print_int<int>
#define print_ld print_int<long int>
#define print_lld print_int<long long int>
template <class T>
inline void println_int(T n) {print_int(n);put('\n');}
#define println_d println_int<int>
#define println_ld println_int<long int>
#define println_lld println_int<long long int>
template <class T>
inline void printsp_int(T n,char ch) {print_int(n);put(ch);}
#define printsp_d printsp_int<int>
#define printsp_ld printsp_int<long int>
#define printsp_lld printsp_int<long long int>
inline void print_str(char *str){char* temp=str;while((*temp)!='\0'){put(*temp);temp++;}}
//end of fast output

long long int mod;
inline long long int multiply(long long int a,long long int b) // O(1) for (a*b)%m
{
	a %= mod;
	b %= mod;
	long double res = a;
	res *= b;
	long long int c = (long long int)(res / mod);
	a *= b;
	a -= c * mod;
	a %= mod;
	if (a < 0) a += mod;
		return a;
}
 
inline long long int power(long long int a,long long int b)
{
	long long int ans=1;
	if(a==1 || b==0)
		return 1;
	if(a==0)
		return 0;
	while(b)
	{
		if(b&1)
		{
			ans=multiply(ans,a);
		}
		a=multiply(a,a);
		b>>=1;
	}
	return ans;
}
inline long long int mod_inverse(long long int a)
{
	return power(a,mod-2);
}
inline long long int divide(long long int a,long long int b)
{
	return (a*mod_inverse(b))%mod;
}

#define MAXN 100000
int N;
int a[MAXN+1];
int BIT[MAXN+1];
void update(int a, int c)
{
	for(int i=a;i<=N;i+=(i&-i))BIT[i]+=c;
}
int query(int a)
{
	int ret = 0;
	for(int i=a;i>0;i-=(i&-i))ret+=BIT[i];
	return ret;
}

//Computiation of factorials
long long int fact[30*MAXN+1];
void calc_factorials()
{
	long long int i;
	fact[0] = fact[1] = 1;
	for(i=2;i<=3000000;i++)
		fact[i] = (i*fact[i-1])%mod;
}
int main()
{
	int Q;
	int i;
	int l,r;
	long long int ans;
	int berries,bin,nbins;
	char c;
	mod = 3046201;
	calc_factorials();
	N = scan_d();
	for(i=1;i<=N;i++)
	{
		a[i] = scan_d();
		update(i,a[i]);
	}
	Q = scan_d();
	while(Q--)
	{
		while((c = get()) <= ' ');
		if(c == 'c')
		{
			l = scan_d();
			r = scan_d();
			update(l,r-a[l]);
			a[l] = r;
		}
		else if(c == 'q')
		{
			l = scan_d();
			r = scan_d();
			berries = query(r) - query(l-1);
			nbins = r-l+1;
			if(nbins == 1)
			{
				println_lld(1);
				continue;
			}
			bin = berries/nbins;
			// num = (fact[berries]*fact[nbins])%mod;
			// den = (power(fact[bin+1],berries%nbins) * power(fact[bin],nbins-(berries%nbins)))%mod;
			// den = (den * (fact[berries%nbins]*fact[nbins-(berries%nbins)])%mod)%mod;
			ans = (divide(fact[berries],multiply(power(fact[bin+1],berries%nbins),power(fact[bin],nbins-(berries%nbins))))*divide(fact[nbins],multiply(fact[berries%nbins],fact[nbins-(berries%nbins)])))%mod;
			println_lld(ans);
		}
	}
	return 0;
}