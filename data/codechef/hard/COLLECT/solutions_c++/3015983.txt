#include<sstream>
#include<iostream>
#include<cmath>
#include<map>
#include<algorithm>
#include<cstdio>
using namespace std;
#include<cstdlib>
#define LL unsigned long long
#define P 3046201
 
int FLIMIT=3000005;
int prefact[3000020];
 
int modulo(int a,int b=P-2,int c=P){
    LL x=1,y=a%c; 
    while(b > 0){
        if(b%2 == 1){
            x=(x*y)%c;
        }
        y = (y*y)%c; // squaring the base
        b /= 2;
    }
    return x%c;
}
inline int fact(int n){
    return prefact[n];
}
 
void update(int idx ,int val,int *tree,int MaxVal){
	while (idx <= MaxVal){
		tree[idx] += val;
		idx += (idx & -idx);
	}
}
 
int read(int idx,int *tree){
	int sum = 0;
	while (idx > 0){
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}
 
pair<int,int> solve(string s){
    istringstream iss(s);
    string sub[3];
    int i=0;
    do
    {
        iss >> sub[i++];
    } while (iss);
    return make_pair(atoi(sub[1].c_str()),atoi(sub[2].c_str()));
    
}       
int main(){
    prefact[0]=prefact[1]=1;
    for(int i=2;i<=FLIMIT;i++)
        prefact[i]=(LL)i*prefact[i-1]%P;
 
    int n,q,arr[100009];
    char temp[100];
    LL a,b,c,d,e,f,g,h,ans;
    scanf("%d",&n);
    for(int i=0;i<n;i++)    scanf("%d",&arr[i]);
 
    int tt[100009];
    for(int i=n;i>0;i--) update(i,arr[i-1],tt,n);
 
    scanf("%d",&q);
    cin.ignore();
    while(q--){
        gets(temp);
        pair<int,int> pp = solve(temp);
 
        if(temp[0]=='c'){
            update(pp.first,pp.second - arr[pp.first-1],tt,n);
            arr[pp.first-1]=pp.second;
        }
        
        else{
           
            int total_berries=read(pp.second,tt) - read(pp.first-1,tt);
            int total_users=pp.second-pp.first+1;
 
 
            int each_receives = total_berries/total_users;
            int virtual_users = total_users * each_receives;
            int extra_berries = total_berries % total_users;
 
            a = fact(total_berries);
            b = fact(total_users);
            
            c = fact(extra_berries);
            d = fact(total_users-extra_berries);
 
            e = modulo(fact(each_receives),total_users-extra_berries);
            f = modulo(fact(each_receives+1),extra_berries);
 
            LL I = a*b%P;
            LL h1 = c*d%P;
            LL h2 = e*f%P;
            LL h = h1*h2%P;
 
            g = I*modulo(h)%P;
            
        // cout<<a<<" "<<b<<" "<<d<<" "<<e<<endl;
            printf("%d\n",int(g));
        }
 
    }
 
}