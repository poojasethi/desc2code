#include <iostream>
#include <cassert>
#include <algorithm>
#include <cstdio>
using namespace std;
#define mod 3046201
#define maxn 111111
long long ret,one,two,fact[mod],divs,mods;
int b[maxn],a[maxn],n,i,j,m,x,y,sum,len;
char ch;
long long pow(long long a,int b){ // fast exponentation
	if(!b)return 1;else
	if(b==1)return a;else{
		long long tmp=pow(a,b/2);
		tmp=(tmp*tmp)%mod;
		if(b&1)return(tmp*a)%mod;else return tmp;
	}
}
long long divide(long long a,long long b){return (a*pow(b,mod-2))%mod;} // division modulo prime number
int main (int argc, char * const argv[]) {
	scanf("%d",&n); // n is the number of the bushes
	for(i=1;i<=n;i++){
		scanf("%d",&b[i]); // the amount of berries on the i-th bush
		for(j=i;j<=n;j=(j|(j-1))+1)a[j]+=b[i]; // fenwick tree modification
	}
	fact[0]=1; 
	for(i=1;i<mod;i++)fact[i]=(fact[i-1]*1LL*i)%mod; // precalculating factorials modulo 3046201
	scanf("%d",&m); // m is the number of queries
	for(i=1;i<=m;i++){
		ch=getchar();
		while(ch!='q'&&ch!='c')ch=getchar();
		for(j=0;j<4;j++)getchar();
		if(ch=='c')getchar();
		scanf("%d %d",&x,&y);
		if(ch=='c'){ // changing
			assert(1<=x&&x<=n);
			for(j=x;j<=n;j=(j|(j-1))+1)a[j]+=y-b[x]; // fenwick tree modification
			b[x]=y;
		}else{ // query
			assert(1<=x&&x<=y&&y<=n);
			sum=0;len=y-x+1;
			for(j=y;j;j&=(j-1))sum+=a[j]; // query to the fenwick tree
			for(j=x-1;j;j&=(j-1))sum-=a[j]; // query to the fenwick tree
			// answer calculation by the formula
			one=divide(fact[sum],(pow(sum/len+1,sum%len)*pow(fact[sum/len],len))%mod); 
			two=divide(fact[len],(fact[sum%len]*fact[len-sum%len])%mod);
			ret=(divide(fact[sum],(pow(sum/len+1,sum%len)*pow(fact[sum/len],len))%mod)*divide(fact[len],(fact[sum%len]*fact[len-sum%len])%mod))%mod;
			printf("%d\n",(int)ret);
		}
	}
    return 0;
}