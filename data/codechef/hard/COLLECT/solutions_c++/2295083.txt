#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<string>
#include<map>
#include<set>
#include<stack>
#include<list>
#include<vector>
#include<queue>
#include<deque>
#include<ctype.h>
using namespace std;
#define MOD 3046201LL
#define PI acos(-1)
#define MP make_pair
#define PB push_back
#define VI vector<int>
#define PII pair<int,int>
#define LL long long
#define SI(x) scanf("%d",&x)
#define PRI(x) printf("%d\n",x)
#define PRLL(x) printf("%lld\n",x)
#define SLL(x) scanf("%lld",&x)
#define MEM(v,i) memset(v,i,sizeof(v))
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for (int i=(a);i<=(b);i++)
#define DEBUG(x) cout<<#x<<"="<<x<<endl
LL max1;
LL tree[100001];
LL dp[3000001];
inline LL inp(){
    char c=getchar_unlocked();
    LL n=0;
    while(!(c>='0' && c<='9'))
    c=getchar_unlocked();
    while(c>='0' && c<='9'){
    n=n*10 + (c-'0');
    c=getchar_unlocked();
    }
    return n;
    }
LL powmod_(LL Vals, LL P,LL MODVal)
{
    LL Data;
        for(Data = 1; P; P >>= 1)
        {
                if (P & 1)
                        Data = (Data * Vals) % MODVal;
                Vals = (Vals * Vals) % MODVal;
        }
 
        return Data;
}
 
 
void fact()
 {
   LL i;
   dp[0]=1;
   dp[1]=1;
   for(i=2;i<=3000000;i++)
     dp[i]=(dp[i-1]%MOD*i)%MOD;
}
 
 
void addpos(LL idx,LL val)
 {
 
  while(idx<max1)
    {  
        
        tree[idx]+=val;
        idx+=(idx & -idx);
    }
 }
 
LL sum(LL idx)
{
LL  sum=0;
  while(idx>0)
    {
       sum+=tree[idx];
        idx-=(idx&-idx);
   }
return sum;
}
int main()
{
 
fact();
LL N,ARR[100005],Q,i,a,b,c;
string str;
SLL(N);
max1=N+2;
for(i=1;i<=N;i++)
  {
  ARR[i]=inp();
  addpos(i,ARR[i]);
  }
//for(i=0;i<N;i++)
      //  DEBUG(tree[i]);
 
SLL(Q);
  while(Q--)
    {
       cin>>str;
       if(str=="change")
        {
        a=inp();b=inp();
        addpos(a,(b-ARR[a]));
            ARR[a] =b;
     
  
 
       }
       else if(str=="query")
         {
         a=inp();b=inp();
         LL N=b-a+1;
         LL S=sum(b)-sum(a-1);
         	//DEBUG(S);
         LL F1=S/N;
         //DEBUG(F1);
         LL F2=F1+1;
         LL C2=S-N*F1;
         LL C1=N-C2;
         LL ans1=dp[S];
         //DEBUG(ans1);
         LL ans2=powmod_(dp[F1],C1,MOD);
      
         LL ans3=powmod_(dp[F2],C2,MOD);
     
         ans2=(ans2*ans3)%MOD;
         //DEBUG(ans2);
         ans3=dp[N] ;
         //DEBUG(ans3);
         LL ans4=dp[C1];
         LL ans5=dp[C2];
         ans4=(ans4*ans5)%MOD;
         //DEBUG(ans4);
         ans1=ans1*powmod_(ans2,MOD-2,MOD)%MOD;
         //DEBUG(ans1);
         ans3=ans3*powmod_(ans4,MOD-2,MOD)%MOD;
         ans1=(ans1*ans3)%MOD;
         printf("%lld\n",ans1);
        }
    }
return 0;
}
