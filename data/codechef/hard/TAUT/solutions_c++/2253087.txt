#include <cstdio>
#include <stack>
#include <cstdlib>
#include <set>
#include <map>
using namespace std;

bool evaluate(char* expression,int len,set<char> variables)
{
	stack<bool> s;
	bool errorFlag=0;
	int val=(1<<variables.size())-1;
	bool A,B;
	while(val>=0)
	{
		int valcopy=val;
		map<char,bool> values;
		set<char>::iterator it=variables.begin();
		while(it!=variables.end())
		{
			values[*it]=((valcopy&1)>0);
			valcopy>>=1;
			it++;
		}
		int x=len;
		while(x>=0)
		{
			switch(expression[x])
			{
				case 'C':
					A = s.top();s.pop();
					B = s.top();s.pop();
					s.push(A&B);
					break;
				case 'D':
					A = s.top();s.pop();
					B = s.top();s.pop();
					s.push(A|B);
					break;
				case 'I':
					A = s.top();s.pop();
					B = s.top();s.pop();
					s.push((!A)|B);
					break;
				case 'E':
					A = s.top();s.pop();
					B = s.top();s.pop();
					s.push(A==B);
					break;
				case 'N':
					A = s.top();s.pop();
					s.push(!A);
					break;
				default:
					char c=expression[x];
					s.push(values[c]);
			}
			x--;
		}
		if(!s.top())
			return 0;
		val--;
	}
	return 1;
}

int main ()
{
	int T;
	scanf("%d",&T);
	char ch;
	scanf("%c",&ch);
	while(T--)
	{
		char str[121];
		set<char> set;
		int i=0;
		scanf("%s",str);
		for(ch=str[0]; ch != 0;ch=str[++i])
		{
			if(ch>='a' && set.find(ch)==set.end())set.insert(ch);
		}
		str[i]=0;
		if(evaluate(str,i-1,set))
			printf("YES\n");
		else
			printf("NO\n");
	}
	return 0;
} 