#include<iostream> 
#include<cstring>
#include<string>
#include<vector>
#include<set>

using namespace std;

struct node {
  char val; 
   node *right, *left; };
bool isInsert = false;
node *root ;
vector<bool> isval(26,false);
 vector<char> value;
  bool ans = true;

bool toLower(char c) {
  if( c>= 'a' && c<='z') return true;
  return false;
}

node * inSert( node *  head, char c) {
 
  if(isInsert) {
    return head;
  }
   
  if( head == NULL ) {
    //cout << "inserting" << endl;
    head = new node;
    head->val = c;
    head->right= NULL;
    head -> left = NULL;
    isInsert = true;
   if(root == NULL)
   root = head;
    return head;
  }

 if( toLower(head->val)  )   {
   return head;
  }

  if( head->val == 'N') {
     head->left = inSert( head->left, c);

  }
  else {
    //scout << head->val; 
   head->left = inSert(head->left, c) ;
   head->right =  inSert(head->right, c);
  }
  return head;
}


bool eval( node * head) {
  
   if( toLower(head->val)) {
    return isval[head->val - 'a'];
  
  }
 
   char op = head-> val;
  bool tr1, tr2;
     tr1 = eval(head->left) ;
    if( op != 'N') 
      tr2 = eval(head->right);
    switch (op) {
    case 'C': return tr1 && tr2;
    case 'D': return tr1 || tr2;
    case 'I': return !tr1 || tr2;
    case 'E': return !(tr1 ^ tr2);
    case 'N': return !tr1;
    }
}

void inorder( node *head) {
     if( head == NULL) return;
     inorder(head->left);
     cout << head->val << endl;
     inorder(head->right);
     }
      
void search(int pos, int len) {
  if(!ans) {
    return;
  }
  if( pos == len) {
    node * head = root;
    if( !eval( head)) {
      ans = false;
      
    }
      return;
  }
    search(pos+1, len);
    isval[value[pos] - 'a'] = false;
    search(pos+1, len);
    isval[value[pos] -'a'] = true;
}



int main() {
  int testcases;
  bool flag;
  cin >> testcases;
  while(testcases--) {
    root = NULL;
    
    fill(isval.begin(), isval.end(), false);
    
    ans = true;
   
    string temp;
    node * head = NULL;
    cin >> temp;
    
    int tempLen = temp.length();
    //cout << tempLen << endl;
    for( int i=0; i< tempLen; i++) {
      if(toLower(temp[i]) && !isval[temp[i] - 'a']) {
	    isval[temp[i] -'a'] = true;
	    value.push_back(temp[i]);
	 //   cout << temp[i] << endl;
	  }   
	head =  inSert(head, temp[i]);
  
	isInsert = false;    
      }
     //inorder(root);
     //cout << value.size() << endl;
    search(0, value.size()); 
    if( ans) cout << "YES" << endl;
    else 
      cout << "NO" << endl;
    
    value.clear();  
}
 
  return 0;
}
