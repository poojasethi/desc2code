#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <string>
#include <string.h>
#include <cstring>
#include <map>
#include <time.h>
#include <cmath>
#include <math.h>
#include <vector>
#include <stack>
#include <algorithm>
#include <set>
using namespace std;


inline bool evaluate(char array[], map<char, bool> mymap, int explen){

	bool answer = false;
	int count = 0, countcopy, times = 1;
	stack<bool> mystack;
	map<char, bool>::iterator it;
	for(it = mymap.begin(); it != mymap.end(); ++it) count++;
	countcopy = count;
	while(countcopy--)
		times *= 2;
	times -= 1;
	bool A = false, B = false;

	int val;
	for(; times >= 0; times--){  // this times corresponds to the number of different cases for each values of operands
		
		val = times;
		for(map<char, bool>::iterator it = mymap.begin(); it != mymap.end(); ++it){
			mymap[(*it).first] = ((val&1)>0);
			val>>=1;		
		}

		int length = explen-1; // according to the array indices
		while(length >= 0){		// this is the length of the expression for parsing each character of it
			switch(array[length]){
				case 'C':
					A = mystack.top(); mystack.pop();
					B = mystack.top(); mystack.pop();
					mystack.push(A&B);
					break;
				case 'D':
					A = mystack.top(); mystack.pop();
					B = mystack.top(); mystack.pop();
					mystack.push(A|B);
					break;
				case 'I':
					A = mystack.top(); mystack.pop();
					B = mystack.top(); mystack.pop();
					mystack.push((!A)|B);
					break;
				case 'E':
					A = mystack.top(); mystack.pop();
					B = mystack.top(); mystack.pop();
					mystack.push(A==B);
					break;
				case 'N':
					A = mystack.top();
					mystack.pop();
					mystack.push(!A);
					break;
				default:
					mystack.push(mymap[array[length]]);
			}
			length--;
		}
		if(mystack.top()){
			answer = true;
		}
		else{
			answer = false;
			return answer;
		}
	///////////////////////////////////////////////////////////////

	}
	if(answer)
		return true;
	else
		return false;
}


int main (){
	int t;
	for(scanf("%d\n", &t); t; t--){
		map<char, bool> mymap;
		char array[150];
		gets(array);
		int explen = strlen(array);  // getting the length of the expression
		for(int i=0; i<explen; ++i){
			if(array[i] >= 'a')
				mymap[array[i]] = true;
		}

		if(evaluate(array, mymap, explen))
			printf("YES\n");
		else 
			printf("NO\n");
		
	}

}