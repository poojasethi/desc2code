#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
using namespace std;
 
#define pb push_back
#define mp make_pair
#define F first
#define S second
 
bool dfs1(int* color,bool* visited,vector<int>* v,int st,int c){
    visited[st]=true;
    color[st]=c;
    for(int i=0;i<v[st].size();i++){
        if(!visited[v[st][i]]){
            if(!dfs1(color,visited,v,v[st][i],1-c))
                return false;
        }else{
            if(color[st]!=1-color[v[st][i]])
                return false;
        }
    }
    return true;
}
 
void dfs2(int* color,bool* visited,vector<int>* v,vector<int>* arr,int st,int in,int c){
    visited[st]=true;
    color[st]=c;
    if(c==0)
        arr[in].pb(st);
    else
        arr[in+1].pb(st);
    for(int i=0;i<v[st].size();i++){
        if(!visited[v[st][i]])
            dfs2(color,visited,v,arr,v[st][i],in,1-c);
    }
}
 
int main(){
    int t;
    scanf("%d",&t);
    while(t--){
        int n,temp,c=0,comp=0;
        scanf("%d",&n);
        vector<int> v[n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                scanf("%d",&temp);
                if(temp==1)
                    v[i].pb(j);
            }
        }
        int color[n];
        bool g=true;
        bool visited[n];
        memset(visited,false,sizeof(visited));
        for(int i=0;i<n;i++){
            if(!visited[i]){
                if(!dfs1(color,visited,v,i,0)){
                    g=false;
                    break;
                }else
                    comp++;
            }
        }
        if(g){
            bool dp[comp][(n/2)+1];
            memset(dp,false,sizeof(dp));
            vector<int> arr[2*comp];
            vector< pair<int,int> > arr2;
            for(int i=0;i<n;i++)
                visited[i]=false;
            for(int i=0;i<n;i++){
                if(!visited[i]){
                    dfs2(color,visited,v,arr,i,c,0);
                    arr2.pb(mp(arr[c].size(),arr[c+1].size()));
                    c+=2;
                }
            }
            c-=2;
            for(int i=0;i<=n/2;i++){
                if(i==arr2[0].F||i==arr2[0].S)
                    dp[0][i]=true;
                else
                    dp[0][i]=false;
            }
            for(int i=1;i<comp;i++){
                for(int j=0;j<=n/2;j++){
                    if(j>=arr2[i].F&&j>=arr2[i].S)
                        dp[i][j]=dp[i-1][j-arr2[i].F]||dp[i-1][j-arr2[i].S];
                    else if(j>=arr2[i].F)
                        dp[i][j]=dp[i-1][j-arr2[i].F];
                    else if(j>=arr2[i].S)
                        dp[i][j]=dp[i-1][j-arr2[i].S];
                    else
                        dp[i][j]=false;
                }
            }
            for(int j=n/2;j>=0;j--){
                if(dp[comp-1][j]){
                    for(int i=comp-1;i>0;i--){
                        if(j>=arr2[i].F&&j>=arr2[i].S){
                            if(dp[i-1][j-arr2[i].F]){
                                for(int k=0;k<arr[c].size();k++)
                                    color[arr[c][k]]=0;
                                for(int k=0;k<arr[c+1].size();k++)
                                    color[arr[c+1][k]]=1;
                                j-=arr2[i].F;
                            }else{
                                for(int k=0;k<arr[c+1].size();k++)
                                    color[arr[c+1][k]]=0;
                                for(int k=0;k<arr[c].size();k++)
                                    color[arr[c][k]]=1;
                                j-=arr2[i].S;
                            }
                        }else if(j>=arr2[i].F){
                                for(int k=0;k<arr[c].size();k++)
                                    color[arr[c][k]]=0;
                                for(int k=0;k<arr[c+1].size();k++)
                                    color[arr[c+1][k]]=1;
                                j-=arr2[i].F;
                        }else if(j>=arr2[i].S){
                                for(int k=0;k<arr[c+1].size();k++)
                                    color[arr[c+1][k]]=0;
                                for(int k=0;k<arr[c].size();k++)
                                    color[arr[c][k]]=1;
                                j-=arr2[i].S;
                        }
                        c-=2;
                    }
                    if(j==arr2[0].F){
                        for(int k=0;k<arr[c].size();k++)
                            color[arr[c][k]]=0;
                        for(int k=0;k<arr[c+1].size();k++)
                            color[arr[c+1][k]]=1;
                    }else{
                        for(int k=0;k<arr[c+1].size();k++)
                            color[arr[c+1][k]]=0;
                        for(int k=0;k<arr[c].size();k++)
                            color[arr[c][k]]=1;
                    }
                    break;
                }
            }
            for(int i=0;i<n;i++)
                printf("%d ",color[i]);
            printf("\n");
        }else
            printf("-1\n");
    }
}