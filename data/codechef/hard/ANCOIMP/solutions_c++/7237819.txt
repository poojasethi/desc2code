#include<bits/stdc++.h>
using namespace std;
int adj[1005][1005];
int queue1[2005];
int state[2005];
int ans[1005];
int status[2005];
#define initial 1
#define waiting 2
#define visited 3
int front=-1;
int rear=-1;
int n;
int ones=0;
int zeroes=0;
int cnt;
void insert_queue(int vertex)
{
    if(front==-1)
    front=0;
    rear=rear+1;
    queue1[rear]=vertex;
}
int isEmpty_queue()
{
    if(front==-1||front>rear)
    return 1;
    else
    return 0;
}
int delete_queue()
{
    int del_item;
    del_item=queue1[front];
    front=front+1;
    return del_item;
}
int BFS(int v)
{
    int i;
    insert_queue(v);
    state[v]=waiting;
    while(!isEmpty_queue())
    {
        v=delete_queue();
        status[v] = cnt;
        state[v]=visited;
        for(i=0;i<n;i++)
        {
            if(adj[v][i]==1&&state[i]==initial)
            {
                insert_queue(i);
                state[i]=waiting;
                ans[i]=1-ans[v];
            }
            else if(adj[v][i]==1&&state[i]!=initial)
            {
                if(ans[i]!=(1-ans[v]))
                {
                    printf("-1\n");
                    return 0;
                }
            }
        }
    }
    return 1;
}
int main()
{
    int t, on, zer;
    pair<int,int>e[2005];
    scanf("%d",&t);
    while(t--)
    {
        cnt = 1;
        front=-1;
        rear=-1;
        scanf("%d",&n);
        memset(status, 0, sizeof(status));
        int a[n][n];
        int i,j;
        for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
            {
                scanf("%d",&a[i][j]);
            }
        }
        int co=0;
        int freq[2005];
        memset(freq, 0, sizeof(freq));
        for(i=0;i<n;i++)
        {
            if(a[i][i]==1)
            {
                co=1;
                break;
            }
        }
        if(co==1)
        printf("-1\n");
        else
        {
            zeroes=0;
            ones=0;
            memset(adj,0,sizeof(adj));
            memset(ans,-1,sizeof(ans));
            for(i=0;i<n;i++)
            {
                for(j=i+1;j<n;j++)
                {
                    if(a[i][j]==1)
                    {
                        freq[i]++;
                        freq[j]++;
                        adj[i][j]=1;
                        adj[j][i]=1;
                    }
                }
            }
            for(i=0;i<n;i++)
                state[i]=initial;
            for(i=0;i<n;i++)
            {
                e[i]=make_pair(freq[i],i);
            }
            //sort(e,e+n);
            //printf("freq\n");
            //for(i=0;i<n;i++)
            //{
            //	printf("%d %d\n",e[i].first,e[i].second);
            //}
 
            for(i=0;i<n;i++)
            {
                int f=e[i].second;
                if(e[i].first!=0)
                {
                    if(state[f]==initial)
                    {
                        if(zeroes>=ones)
                        {
                            ans[f]=1;
                            //ones++;
                        }
                        else
                        {
                            ans[f]=0;
                            //zeroes++;
                        }
                        int c=BFS(f);
                        if(c==0)
                        goto labe;
                        on = zer = 0;
                        for (int j = 0; j < n; j++) {
                            if (status[j] == cnt) {
                                on += (ans[j] == 1);
                                zer += (ans[j] == 0);
                            }
                        }
                        if (zeroes > ones) {
                            if (zer > on) {
                                for (int j = 0; j < n; j++) {
                                    if (status[j] == cnt)
                                        ans[j] = 1-ans[j];
                                }
                                ones += zer;
                                zeroes += on;
                            }
                            else {
                                ones += on;
                                zeroes += zer;
                            }
                        }
                        else {
                            if (zer < on) {
                                for (int j = 0; j < n; j++) {
                                    if (status[j] == cnt)
                                        ans[j] = 1-ans[j];
                                }
                                ones += zer;
                                zeroes += on;
                            }
                            else {
                                ones += on;
                                zeroes += zer;
                            }
                        }
                        cnt++;
                    }
                }
            }
            /*for(i=0;i<n;i++)
            printf("%d ",ans[i]);
            printf("\n");*/
            /*for(i=0;i<n;i++)
            {
                if(ans[i]==0)
                {
                    zeroes++;
                }
                else if(ans[i]==1)
                ones++;
            }*/
            for(i=0;i<n;i++)
            {
                if(state[i]==initial)
                {
 
                    if(zeroes>=ones)
                    {
                        ans[i]=1;
                        ones++;
                        state[i]=visited;
                    }
                    else
                    {
                        ans[i]=0;
                        zeroes++;
                        state[i]=visited;
                    }
                }
            }
            int x[n][n];
            for(i=0;i<n;i++)
            {
                for(j=0;j<n;j++)
                {
                    x[i][j]=ans[i]^ans[j];
                }
            }
            for(i=0;i<n;i++)
            {
                for(j=0;j<n;j++)
                {
                    int d=1-a[i][j];
                    if(d==0&&x[i][j]==0)
                    {
                        printf("-1\n");
                        goto labe;
                    }
                }
            }
            for(i=0;i<n;i++)
            printf("%d ",ans[i]);
            printf("\n");
        labe:
            ;
        }
    }
    return 0;
} 