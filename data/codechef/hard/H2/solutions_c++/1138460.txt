#include <cstdio>
#include <algorithm>
using namespace std;
const int MAXN = 100005, MAXK = 2605, ITER = 25;
const int KAYAK = 20;
int N, K = 0, occur [101][101];
double speed;
pair <short, short> person [MAXN], uniq [MAXK];
inline bool comp (pair <short, short> a, pair <short, short> b)
{
return a.second - speed * a.first < b.second - speed * b.first;
}
inline bool works (double x)
{
speed = x;
sort (uniq, uniq + K, comp);
N = 0;
for (int i = 0; i < K; i++)
for (int j = 0; j < occur [uniq [i].first][uniq [i].second]; j++)
person [N++] = uniq [i];
for (int i = 0, j = N - 1; i < j; i++, j--)
if (person [i].second + person [j].second < speed * (person [i].first + person [j].first + KAYAK))
return false;
return true;
}
int main ()
{
scanf ("%d", &N);
for (int i = 0; i < N; i++)
{
scanf ("%hd %hd", &person [i].first, &person [i].second);
occur [person [i].first][person [i].second]++;
}
for (int a = 50; a <= 100; a++)
for (int b = 50; b <= 100; b++)
if (occur [a][b] > 0)
uniq [K++] = make_pair (a, b);
double lo = 0, hi = 5.0 / 3.0;
for (int it = 0; it < ITER; it++)
{
double mid = (lo + hi) / 2;
if (works (mid))
lo = mid;
else
hi = mid;
}
printf ("%lf\n", lo);
return 0;
}
