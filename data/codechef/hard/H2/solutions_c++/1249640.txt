#include <stdio.h>
#include <math.h>
#include <iostream>
#include <algorithm>

using namespace std;

char *fstart; 
const int BUF = 5000000;
char buf [BUF];   
int outat; 
 
void get_int ( int* n)	{ 
	while ( *fstart != 0 && !( '0' <= *fstart && *fstart <= '9')) 
		fstart++; 
	*n = 0; 
	while ( '0' <= *fstart && *fstart <= '9')	{ 
		*n = ( ( *n) << 3) + ( ( *n) << 1) + *fstart-'0', ++fstart; 
	} 
} 
 
void take_input()	{ 
	int sz = fread ( buf, sizeof ( char), BUF, stdin); 
	buf [sz] = 0; 
	fstart = buf;  
	outat = 0;
}

void merge(double* a, double* b, int size1, int size2, double* result)	{
	double temp[size1 + size2];
	int i = 0, j = 0;
	while(i + j < size1 + size2)	{
		if(i < size1 && j < size2)	{
			if(a[i] < b[j])	{
				temp[i++ + j] = a[i];
			}	else	{
				temp[i + j++] = b[j];
			}
		}	else if(i == size1)	{
			while(j < size2)	{
				temp[i + j++] = b[j];
			}
			break;
		}	else	{
			while(i < size1)	{
				temp[i++ + j] = a[i];
			}
			break;
		}
	}
	for(i = 0; i < size1 + size2; i++)	{
		result[i]= temp[i];
	}
}

void mergesort(double* a, int size)	{
	if(size == 1)
		return;
	int size1=size/2;
    int size2=size-size1; 
    mergesort(a,size1);
    mergesort(a+size1,size2);
    merge(a,a+size1,size1,size2,a);
}

int STRENGTH [100000];
int WEIGHT [100000];
double DISTANCE [100000];

int is_possible_ ( double m, int n)	{
	double f = sqrt ( m * m + 1.0);
	int i;
	for ( i = 0; i < n; i++)	
		DISTANCE [i] = ( ( STRENGTH [i] - m * WEIGHT [i]) / f);
	sort ( DISTANCE, DISTANCE + n);
	for ( i = 0; ( i << 1) < n; i++)	
		if ( DISTANCE [i] + DISTANCE [n - i - 1] < 0)	return 0;
	return 1;	
}

main ()	{
	take_input ();
	int n, ctr = 0;
	for ( get_int ( & n); n--; )	{
		get_int ( WEIGHT + ctr);
		get_int ( STRENGTH + ctr);
		WEIGHT [ctr++] += 10;
	}
	double lo = 0.4;
	double hi = 1.7;
	while ( hi - lo > 0.00000001)	{
		double mid = ( hi + lo) / 2;
		if ( is_possible_ ( mid, ctr))	lo = mid;
		else hi = mid;
	}
	printf ( "%f\n", ( lo + hi) / 2); 
	return 0;
}