#include <vector>
#include <list>
#include <cassert>
#include <sstream>
#include <map>
#include <set>
#include <climits>
#include <deque>
#include <fstream>
#include <stack>
#include <bitset>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

template<class A, class B> A cvt(B x) {stringstream s;s<<x;A r;s>>r;return r;}

#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i) 
#define REV(i,a,b) for(int i= (int )a ; i > (int )b ; --i) 
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define PP pop()
#define EM empty()
#define INF 1000000000
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x)        cout << #x << " " << x << endl
#define LET(x,a) 	    __typeof(a) x(a)
#define IFOR(i,a,b) 	for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  	IFOR(it,v.begin(),v.end())
#define PRESENT(c,x) 	((c).find(x) != (c).end())
#define SZ(x) 		x.size();
#define CPRESENT(c,x) 	(find(c.begin(),c.end(),x) != (c).end())
#define D(N) 		int N
#define S(N)		scanf("%d",&N)

typedef pair<int,int>  PI;
typedef pair<int,PI>   TRI;
typedef V( int )       VI;
typedef V( PI  )       VII;
typedef V( string )    VS;
typedef long long      LL;

int W [100005], P [100005];
double dist [100005];
int n;

inline void contriToSpeed (double speed) {
	FOR (i, 0, n) 
	dist [i] = P [i] - speed * W [i];
}

inline bool pairUp (double speed) {
	contriToSpeed (speed);
	sort (dist, dist+n);
	FOR (i, 0, n/2) {
		if (dist [i] + dist [n-i-1] < 0)
			return false;
	}
	return true;
}

/**
(p1+p2)/(w1+w2) = sp

(p1 - sp * w1) + (p2 - sp * w2) = 0

vary "sp" to find optimum.

Sort people in increasing order of their contribution to speeds and then pair up
1st with last
2nd with 2nd last
and so on...
*/

int main () {
	cin >> n;
	FOR (i, 0, n) {
		cin >> W [i] >> P [i];
		W [i] += 10;
	}
	
	double low = (50.0+50.0)/(110.0+110.0);
	double high = (100.0+100.0)/(60.0+60.0);
	double mid = 0.0;
	
	while ((high-low) >= 1e-8) {
		mid = (low+high)/2.0;
		if (pairUp (mid)) low = mid;
		else high = mid;
	}
	printf ("%.6f\n", mid);
	return 0;
}
	
	
	
	
	
