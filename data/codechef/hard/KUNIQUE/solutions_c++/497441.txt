    #include <cstdio>
    #include <map>
    #include <set>
    #include <vector>
    #include <algorithm>
     
    using namespace std;
     
    map<int, int> cnt;
    set<int> unq;
    set<int> occur[50010];
     
    void solve(){
    cnt.clear();
    unq.clear();
    for(int i = 0; i < 50010; i++) occur[i].clear();
     
    int N, K;
    scanf("%d %d", &N, &K);
     
    for(int i = 0, x; i < N; i++){
    scanf("%d", &x);
    unq.insert(x);
    cnt[x]++;
    }
     
    for(set<int>::iterator it = unq.begin(); it != unq.end(); it++){
    if(cnt[*it] > N / K){
    printf("-1\n");
    return;
    }
    occur[cnt[*it]].insert(*it);
    }
     
    for(int i = N; i > 0; i -= K){
    int k = K;
    vector<int> res, used;
    while(!occur[i / K].empty()){
    int x = *(occur[i / K].begin());
    res.push_back(x);
    unq.erase(x);
    occur[cnt[x]].erase(x);
     
    if(cnt[x] > 1){
    cnt[x]--;
    used.push_back(x);
    occur[cnt[x]].insert(x);
    }
    k--;
    }
     
    while(k > 0){
    int x = *(unq.begin());
    res.push_back(x);
    unq.erase(x);
    occur[cnt[x]].erase(x);
     
    if(cnt[x] > 1){
    cnt[x]--;
    used.push_back(x);
    occur[cnt[x]].insert(x);
    }
    k--;
    }
     
    for(int i = 0; i < used.size(); i++)
    unq.insert(used[i]);
    sort(res.begin(), res.end());
    for(int i = 0; i < res.size(); i++)
    printf("%d ", res[i]);
    }
    printf("\n");
    }
     
    int main(){
    int T;
    scanf("%d", &T);
    while(T--)
    solve();
    return 0;
    }
