#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>
#include <set>

using namespace std;

int main(){
    int T,N,K,a[50000];
    map<int, int> cont;
    
    scanf("%d",&T);
    
    while(T--){
        scanf("%d %d",&N,&K);
        int M = N / K;
        
        for(int i = 0;i < N;++i)
            scanf("%d",&a[i]);
        
        sort(a,a + N);
        
        bool ok = true;
        
        for(int i = 0;i < N;){
            int e = i;
            
            while(e < N && a[e] == a[i]) ++e;
            
            if(e - i > M) ok = false;
            i = e;
        }
        
        if(!ok) printf("-1\n");
        else{
            cont.clear();
            
            priority_queue<int, vector<int>, greater<int> > Q1;
            priority_queue< pair<int, int> > Q2;
            set<int> aux;
            vector<int> ans;
            
            for(int i = 0;i < N;++i)
                ++cont[ a[i] ];
            
            for(int i = 0;i < N;++i){
                if(aux.find(a[i]) == aux.end()){
                    aux.insert(a[i]);
                    Q1.push(a[i]);
                    Q2.push(make_pair(cont[ a[i] ],a[i]));
                }
            }
            
            for(int i = 0,cur = M;i < M;++i,--cur){
                int sz = 0;
                aux.clear();
                
                while(!Q2.empty() && Q2.top().first == cur){
                    int x = Q2.top().second;
                    
                    if(cont[x] == cur){
                        aux.insert(x); --cont[x];
                        ++sz;
                        Q2.pop();
                        
                        if(cur > 1)
                            Q2.push(make_pair(cur - 1,x));
                    }else Q2.pop();
                }
                
                while(sz < K && !Q1.empty()){
                    int x = Q1.top();
                    Q1.pop();
                    
                    if(cont[x] && aux.find(x) == aux.end()){
                        aux.insert(x);
                        --cont[x]; ++sz;
                        Q2.push(make_pair(cont[x],x));
                    }
                }
                
                for(set<int>::iterator it = aux.begin();it != aux.end();++it){
                    ans.push_back(*it);
                    if(cont[*it]) Q1.push(*it);
                }
            }
            
            for(int i = 0;i < N;++i){
                if(i) printf(" ");
                printf("%d",ans[i]);
            }
            
            printf("\n");
        }
    }
    
    return 0;
}