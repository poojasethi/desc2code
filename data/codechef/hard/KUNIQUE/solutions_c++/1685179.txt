#include<iostream>
#include<vector>
#include<set>
#include<map>
#include<utility>
#include<algorithm>


using namespace std;

set <int> data;
map<int,int> cnt;
set <int> occlist[50000];
vector<int>ans,used;

int main(){
	int n,k,i,j,t,a[50000],k1;
	cin>>t;
	while(t--)
	{
		cin>>n>>k;
		
		cnt.clear();
		data.clear();
		ans.clear();
		for (i = 0; i < n; i++)
			occlist[i].clear();

		for(i=0;i<n;i++)
		{
			cin>>a[i];
			data.insert(a[i]);
			cnt[a[i]]= cnt.count(a[i])==0 ? 1:cnt[a[i]]+1;
		}
		
		set<int>:: iterator it;
		for(it=data.begin();it!=data.end();it++)
			if(cnt[*it]> n/k)
				break;

		if(it!=data.end())
		{
			cout<<"-1\n";
			continue;
		}

		for(it=data.begin();it!=data.end();it++)
			occlist[cnt[*it]].insert(*it);

		for(i=n/k;i>0;i--)
		{	
			k1=0;
			while(!occlist[i].empty())
			{
				ans.push_back(*occlist[i].begin());
				cnt[*occlist[i].begin()]--;
				data.erase(*occlist[i].begin());
				
				if(cnt[*occlist[i].begin()]>0)
				{
					occlist[i-1].insert(*occlist[i].begin());
					used.push_back(*occlist[i].begin());
				}
				occlist[i].erase(*occlist[i].begin());
				k1++;
			}

			while(k1<k)
			{
				ans.push_back(*data.begin());
				occlist[cnt[*data.begin()]].erase(*data.begin());
				cnt[*data.begin()]--;
				
				if(cnt[*data.begin()]>0)
				{
					occlist[cnt[*data.begin()]].insert(*data.begin());
					used.push_back(*data.begin());
				}
				data.erase(*data.begin());
				k1++;
			}
			
			sort(ans.begin(),ans.end());
			for(j=0;j<used.size();j++)
				data.insert(used[j]);

			for(j=0;j<k;j++)
				cout<< ans[j]<<" ";

			ans.clear();
			used.clear();
		}
		cout<<"\n";

	}

	
	return 0;
}