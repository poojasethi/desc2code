#include<cstdio>
#include<map>
#include<set>
#include<vector>
#include<algorithm>
#define MAX 50001
using  namespace std;
int main()
{
#ifdef _TEST
	freopen("input.txt","r",stdin);
#endif

int T,N,K,in;
scanf("%d",&T);
vector< int > output;
set< int > input;
set< int > pos[MAX];
map< int , int > count;
set< int >::iterator it;
while(T--)
{
	scanf("%d %d",&N,&K);
	count.clear(); input.clear(); 
	output.clear();
	vector< int > used;
	bool ended=false;
	for(int i=0; i < N; i++)
		{
			scanf("%d",&in);
			pos[i].clear();
			input.insert(in);
			count[in]++;
			
		}
	
	for(it=input.begin(); it != input.end(); it++)
	{
			pos[count[*it]].insert(*it);
			
			if(count[*it] > N/K ) { printf("-1\n"); goto get_new; }
			
	}
	//printf("\n");
	for(int j=N; j > 0 ; j-=K)
	{
		int G=K;
		used.clear();
		output.clear();
		while(!pos[j/K].empty()){
			G--;
			int topush=*pos[j/K].begin();
			output.push_back(topush);
			pos[j/K].erase(topush);
			input.erase(topush);
			if(j/K > 1){
				used.push_back(topush);
				pos[j/K-1].insert(topush);
				count[topush]--;
			}
		}
		//printf("\n ");
		while(G>0){
			//printf("Culprit\n");
			int topush=*input.begin();
			output.push_back(topush);
			//printf("%d ", topush);;
			input.erase(topush);
			pos[count[topush]].erase(topush);
			if(count[topush] > 1){
				used.push_back(topush);
				count[topush]--;
				pos[count[topush]].insert(topush);
			}
			G--;
		}
		//printf("\n ");
		sort(output.begin(),output.end());
		for(int i=0; i < used.size(); i++) 
			input.insert(used[i]);
		if(input.size()==0) ended=true;
		for(int i=0; i < K; i++)
			printf("%d%c",output[i], ended && (i==K-1)?'\n':' ');
		}
		get_new: ;
		
	
}
return 0;
}