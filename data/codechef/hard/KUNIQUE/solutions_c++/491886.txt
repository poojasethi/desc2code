#include <cstdio>
#include <iostream> 
#include <cstdlib>
#include <list>
#include <algorithm>
#include <cstring>
#include <map>
#include <set>
#include <vector>
using namespace std;
#define VAR(a,b) __typeof(b) a=(b)
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)
typedef long long LL; typedef unsigned long long ULL;
typedef long double LD;
const int INF = 1000000001; const LL INFLL = LL(INF) * LL(INF);
template<class T> inline int size(const T&c) { return c.size(); }

set<int> d;
map<int, int> reps;
set<int> kreps[50001];

int main(){
  int T;
  scanf("%d", &T);
  while(T--){
    int N, K;
    scanf("%d %d", &N, &K);
    d.clear();
    reps.clear();
    REP(i, N) kreps[i].clear();
    int m = N/K;
    REP(i, N){
      int a;
      scanf("%d", &a);
      d.insert(a);
      reps[a]++;
    }
    FOREACH(it, d){
      if(reps[*it] > m){
        puts("-1");
        goto endloop;
      }
    }
    FOREACH(it, d) kreps[reps[*it]].insert(*it);
    for(int i = N; i > 0; i -= K){
      vector<int> u, res;
      int k = K;
      while(!kreps[i/K].empty()){
        int x = *kreps[i/K].begin();
        res.push_back(x);
        d.erase(x);
        kreps[i/K].erase(x);
        if(i/K > 1){
          u.push_back(x);
          kreps[i/K-1].insert(x);
          reps[x]--;
        }
        --k;
      }
      while(k){
        int x = *d.begin();
        res.push_back(x);
        d.erase(x);
        int r = reps[x]--;
        kreps[r].erase(x);
        if(r > 1){
          u.push_back(x);
          kreps[r-1].insert(x);
        }
        --k;
      }
      sort(res.begin(), res.end());
      FOREACH(it, res) printf("%d ", *it);
      FOREACH(it, u) d.insert(*it);
    }
    putchar('\n');
endloop:;
  }
  return 0;
}

