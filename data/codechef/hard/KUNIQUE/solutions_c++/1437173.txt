    #include <cstdio>
    #include <vector>
    #include <set>
    #include <map>
    #include <cstdio>
    #include <algorithm>
    using namespace std;
     
    const int MAXN = 100005;
    int T, N, K;
    map<int, int> occur;
    set<int> data;
    set<int> value[MAXN];
     
    int main()
    {
    scanf("%d", &T);
    while (T--)
    {
    scanf("%d%d", &N, &K);
    occur.clear();
    data.clear();
    for (int i = 0; i <= N; i++)
    value[i].clear();
    for (int i = 0, x; i < N; i++)
    {
    scanf("%d", &x);
    data.insert(x);
    occur[x]++;
    }
    bool any = false;
    for (set<int>::iterator i = data.begin(); i != data.end(); ++i)
    if (occur[*i] > N/K)
    {
    puts("-1");
    goto end_loop;
    }
    for (set<int>::iterator i = data.begin(); i != data.end(); ++i)
    value[occur[*i]].insert(*i);
    for (int i = N; i > 0; i -= K)
    {
    int k = K;
    vector<int> res, used;
    while (!value[i/K].empty())
    {
    int x = *value[i/K].begin();
    res.push_back(x);
    value[i/K].erase(x);
    data.erase(x);
    if (i/K > 1)
    {
    occur[x]--;
    value[i/K-1].insert(x);
    used.push_back(x);
    }
    k--;
    }
    while (k)
    {
    int x = *data.begin();
    data.erase(data.begin());
    res.push_back(x);
    int occ = occur[x];
    value[occ].erase(x);
    if (occ > 1)
    {
    occur[x]--;
    used.push_back(x);
    value[occ-1].insert(x);
    }
    k--;
    }
    for (unsigned j = 0; j < used.size(); j++)
    data.insert(used[j]);
    sort(res.begin(), res.end());
    for (int j = 0; j < K; j++)
    {
    if (any) printf(" ");
    any = true;
    printf("%d", res[j]);
    }
    }
    printf("\n");
    end_loop:;
    }
    } 
