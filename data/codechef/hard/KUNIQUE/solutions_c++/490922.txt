#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdio>
#include <string>
#include <bitset>
#include <cmath>
#include <list>
#include <cstdlib>
#include <map>
#include <cstring>
#include <set>
#include <stack>
#include <sstream>
#include <queue>
#include <deque>
#include <ctime>

using namespace std;

#define debug(x) cout<<#x<<" = "<<x<<"\n"
#define FOR(t,a,n) for(int t=(a);(t)<(n);(t)++)
#define REP(I,N) FOR(I,0,N)
#define PB(X) push_back(X)
#define MP(X,Y) make_pair(X,Y)
#define SZ(X) (int)X.size()
#define INF int(1e9)
#define ALL(x) (x).begin(), (x).end()
#define SET(A,v) memset(A,v,sizeof A)
#define sp system("PAUSE")
#define FORE(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)
typedef long long LL;
typedef long double LD;
typedef vector<int> VI;
typedef list<int> LI;
typedef vector<string> VS;
typedef pair<int,int> PII;

const int MAXN=50005;
int n,k;
map<int,int> m;
set<int> s;
set<int> ar[MAXN];

void solve()
{
    FORE(s,itr){
        if(m[*itr]>n/k){printf("-1");return;}
        else ar[m[*itr]].insert(*itr);
    }
    int seq=n/k;
    vector<int>res,temp;
    for(int i=seq;i>=1;i--){
        int cnt=k;
        while(!ar[i].empty()){
            int elt=*ar[i].begin();
            res.PB(elt),cnt--;
            ar[i].erase(elt);
            s.erase(elt);
            if(i>1)ar[i-1].insert(elt),temp.PB(elt),m[elt]--;
           
        }
        while(cnt){
            int elt=*s.begin();
            res.PB(elt),cnt--;
            s.erase(elt);
            ar[m[elt]].erase(elt);
            if(m[elt]>1)temp.PB(elt),ar[m[elt]-1].insert(elt),m[elt]--;
        }
        sort(ALL(res));
        REP(j,SZ(res))printf("%d ",res[j]);
        REP(j,SZ(temp))s.insert(temp[j]);
        res.clear();
        temp.clear();
    }
}
                    
int main()
{
    int T;
    scanf("%d",&T);
    while(T--)
    {      
        s.clear();
        m.clear();
        REP(i,MAXN)ar[i].clear();
        scanf("%d%d",&n,&k);
        int x;
        REP(i,n){scanf("%d",&x); m[x]++; s.insert(x);}
        solve();
        printf("\n");
    }
    return 0;
}
        
        

