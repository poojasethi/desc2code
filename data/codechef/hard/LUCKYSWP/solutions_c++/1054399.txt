#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cctype>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stdio.h>
#include <stack>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <assert.h>
#define REP(i,n) for(int i=0;i<n;i++)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))

using namespace std;

const double eps = 1e-8;

#define PB push_back
#define MP make_pair

typedef map<int,int> MII;
typedef map<string,int> MSI;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long double> VD;
typedef pair<int,int> PII;
typedef long long int64;
typedef long long ll;
typedef unsigned int UI;
typedef long double LD;
typedef unsigned long long ULL;

string s;

const int MAXN = 100009;

int L4[MAXN], L7[MAXN], L47[MAXN],
    R4[MAXN], R7[MAXN], R47[MAXN];

int main()
{
    ios::sync_with_stdio(false);
    int T;
    cin >> T;
    while (T--)
    {
        cin >> s;
        int n = s.size();
        L4[0] = L47[0] = L7[0] = 0;
        R4[n+1] = R47[n+1] = R7[n+1] = 0;

        for (int i = 1; i <= n; ++i)
        {
            L4[i] = L4[i-1] + (s[i-1] == '4');
            L7[i] = L7[i-1] + (s[i-1] == '7');
            L47[i] = max(L47[i-1]+(s[i-1] == '7'), L4[i]);
        }

        for (int i = n; i > 0; --i)
        {
            R4[i] = R4[i+1] + (s[i-1] == '4');
            R7[i] = R7[i+1] + (s[i-1] == '7');
            R47[i] = max(R47[i+1]+(s[i-1] == '4'), R7[i]);
        }
        R4[0] = R4[1];
        R7[0] = R7[1];
        R47[0] = R47[1];

        int ans = L47[n];
        int part = -0x3f3f3f3f;

        for (int i = 0; i <= n; ++i)
        {
            ans = max(ans, L7[i]+R47[i+1]+part);
            part = max(part, -L7[i]+L4[i]);
        }

        part = -0x3f3f3f3f;
        for (int i = 0; i <= n; ++i)
        {
            ans = max(ans, L4[i]+R7[i+1]+part);
            part = max(part, L47[i]-L4[i]);
        }

        cout << ans << endl;
    }
	return 0;
}
