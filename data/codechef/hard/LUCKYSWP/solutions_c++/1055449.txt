#include <iostream>
#include <cstdlib>

using namespace std;

int find(int, int, char);
int compute_diffs(int*);
inline int max(int a, int b) {
  return a>b ? a: b;
}

string S;

int main() {
  int T;
  scanf("%d", &T);
  for (int i = 0; i < T; i++) {
    cin >> S;
    int len = S.length();
    int num_seven_from_end[100100];
    int num_four_from_begin[100100];
    int diff_array[100100];

    if (S[0] == '4') num_four_from_begin[0] = 1;
    else num_four_from_begin[0] = 0;
    if (S[len-1] == '7') num_seven_from_end[len-1] = 1;
    else num_seven_from_end[len-1] = 0;
    
    for (int j = 1; j<len; j++) {
      if (S[j] == '4') num_four_from_begin[j] = num_four_from_begin[j-1]+1;
      else num_four_from_begin[j] = num_four_from_begin[j-1];
    }
    
    for (int j = len-2; j>=0; j--) {
      if (S[j] == '7') num_seven_from_end[j] = num_seven_from_end[j+1]+1;
      else num_seven_from_end[j] = num_seven_from_end[j+1];
    }

    int max_len = num_seven_from_end[0] + compute_diffs(diff_array);
    int len1;

    for(int j = 0; j < len-1; j++) {
      len1 = num_four_from_begin[j] + num_seven_from_end[j+1];
      len1 = len1+diff_array[j];
      if (len1 > max_len) max_len = len1;
    }
    len1 = num_four_from_begin[len-1] + diff_array[len-1];
    if(len1 > max_len) max_len = len1;

    cout << max_len << "\n";
  }
}

int compute_diffs( int* diff_array ) {
  int max_seven_end_at_index[100100];
  int max_seven_in_subarray_end_at_index[100100];
  int max_four_begin_at_index[100100];
  int max_four_in_subarray_begin_at_index[100100];

  int len = S.length();

  // fill the seven array
  int prev_seven_pos = -1;
  if(S[0] == '7') {
    max_seven_end_at_index[0] = 1;
    max_seven_in_subarray_end_at_index[0] = 1;
    prev_seven_pos = 0;
  } else {
    max_seven_end_at_index[0] = 0;
    max_seven_in_subarray_end_at_index[0] = 0;
  }
  for(int i = 1; i<len; i++) {
    if (S[i] == '7') {
      if (prev_seven_pos == -1) {
        max_seven_end_at_index[i] = 1;
        max_seven_in_subarray_end_at_index[i] = 1;
      } else {
        max_seven_end_at_index[i] = max(1, max_seven_end_at_index[prev_seven_pos] - (i-prev_seven_pos-1) + 1);
        max_seven_in_subarray_end_at_index[i] = max(max_seven_in_subarray_end_at_index[i-1], max_seven_end_at_index[i]);
      }
      prev_seven_pos = i;
    } else {
      max_seven_end_at_index[i] = 0;
      max_seven_in_subarray_end_at_index[i] = max_seven_in_subarray_end_at_index[i-1];
    }
  }

  // fill the four array
  int prev_four_pos = len;
  if(S[len-1] == '4') {
    max_four_begin_at_index[len-1] = 1;
    max_four_in_subarray_begin_at_index[len-1] = 1;
    prev_four_pos = len-1;
  } else {
    max_four_begin_at_index[len-1]= 0;
    max_four_in_subarray_begin_at_index[len-1] = 0;
  }
  for(int i = len-2; i>=0; i--) {
    if (S[i] == '4') {
      if (prev_four_pos == len) {
        max_four_begin_at_index[i] = 1;
        max_four_in_subarray_begin_at_index[i] = 1;
      } else {
        max_four_begin_at_index[i] = max(1, max_four_begin_at_index[prev_four_pos] - (prev_four_pos - i - 1) + 1);
        max_four_in_subarray_begin_at_index[i] = max(max_four_in_subarray_begin_at_index[i+1], max_four_begin_at_index[i]);
      }
      prev_four_pos = i;
    } else {
      max_four_begin_at_index[i] = 0;
      max_four_in_subarray_begin_at_index[i] = max_four_in_subarray_begin_at_index[i+1];
    }
  }

  // Finally fill the diff array
  for(int i = 0; i < len-1; i++) {
    diff_array[i] = max(max_four_in_subarray_begin_at_index[i+1], max_seven_in_subarray_end_at_index[i]);
  }
  diff_array[len-1] = max_seven_in_subarray_end_at_index[len-1];
  return max_four_in_subarray_begin_at_index[0];
}