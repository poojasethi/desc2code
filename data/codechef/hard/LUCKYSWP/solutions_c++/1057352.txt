#define _CRT_SECURE_NO_WARNINGS

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <fstream>

using namespace std;

int four[100010];
int seven[100010];
int bal[100010];
int best[100010];

class Comparator {
public:
	inline bool operator() (const pair<int, int>& a, const pair<int, int>& b) const {
		if (a.first != b.first)
			return a.first < b.first;
		return a.second > b.second;
	}
};
 
char str[100010];
 
set<pair<int, int>, Comparator>::iterator its[100010];

pair<int, int> tmp[1000010];

int main() {
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int t; scanf("%d", &t);
	for (int e=0; e<t; e++) {
		scanf("%s", str);
		int len = strlen(str);
		four[0] = 0;
		for (int i=1; i<=len; i++) {
			four[i] = four[i-1] + (str[i-1] == '4');
		}
		std::reverse(str, str + len);
		seven[0] = 0;
		for (int i=1; i<=len; i++) {
			seven[i] = seven[i-1] + (str[i-1] == '7');
		}
		reverse(seven, seven + len + 1);
		std::reverse(str, str + len);

		for (int i=1; i<=len; i++) {
			best[i] = four[i];
			if (best[i-1] > best[i])
				best[i] = best[i-1];
			if (str[i-1] == '7')
				++best[i];
		}

		int mx = 0;
		bal[0] = 0;
		for (int i=1; i<=len; i++) {
			if (str[i-1] == '4')
				bal[i] = bal[i-1] + 1;
			else bal[i] = bal[i-1] - 1;
		}

		//set<pair<int, int >, Comparator> s;
		for (int i=0; i<=len; i++) {
			tmp[i] = make_pair(bal[i], i);
			//pp.push(make_pair(bal[i], i));
			//its[i] = s.insert(make_pair(bal[i], i)).first;
		}
		priority_queue<pair<int, int>, std::vector<pair<int,int> >, Comparator> pp(tmp, tmp + len + 1);

		for (int i=0; i<=len; i++) {
			while (!pp.empty() && pp.top().second <= i) {
				pp.pop();
			}
			int cur = best[i];
			cur += seven[i];

			if (i < len) {
				const pair<int, int>& top = pp.top();
				int len = top.second - i;
				int balDiff = top.first - bal[i];
				int sevens = (len - balDiff) / 2;
				int fours = len - sevens;
				cur += fours;
				cur -= sevens;
			}
 
			mx = max(mx, cur);
		}
		printf("%d\n", mx);
	}

	//cout << clock() << endl;

	return 0;

} 