#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define eps 1e-9
#define FOR(x, s, e) for(int x = (s); x < (e); ++x)
#define FORc(x, s, e, c) for(int x = (s); x < (e) && (c); ++x)
#define STEP(x, s, e, d) for(int x = (s); x < (e); x+=(d))
#define ROF(x, s, e) for(int x = (s); x >= (e); --x)
#define ROFc(x, s, e, c) for(int x = (s); x >= (e) && (c); --x)
#define vb vector<bool>
#define vi vector<int>
#define vii vector<pair<int, int> >
#define vs vector<string>
#define pb push_back
#define mp make_pair
#define ALL(X) X.begin(), X.end()
#define LL long long
#define pii pair<int, int>
#define x first
#define y second
#define gcd(x, y) __gcd((x), (y))
#define countbit(x) __builtin_popcount(x)
#define SET(X) memset(X, 0, sizeof(X))

using namespace std;

int main(int argc, char **argv){
    int T;
    cin >> T;
    FOR(ca, 0, T){
        string s;
        cin >> s;
        int L4 = -1, R4 = -1, C4=0, M4=0;
        int L7 = -1, R7 = -1, C7=0, M7=0;
        int N = s.length();
        int C4L[N+10], C4R[N+10], C7L[N+10], C7R[N+10];
        SET(C4L), SET(C4R), SET(C7L), SET(C7R);
        FOR(i, 0, N){
            C4L[i+1] = C4L[i] + (s[i] == '4');
            C7L[i+1] = C7L[i] + (s[i] == '7');
        }
        ROF(i, N-1, 0){
            C4R[i+1] = C4R[i+2] + (s[i] == '4');
            C7R[i+1] = C7R[i+2] + (s[i] == '7');
        }
        if (!C7R[1]) printf("%d\n", C4L[N]);
        else if (!C4R[1]) printf("%d\n", C7L[N]);
        else{
            int res = 0;
            int F = 0, G = 0;
            FOR(i, 0, N) if (s[i] == '4'){
                /* Max C7L[i] - C4L[i] + C4L[j] - C7L[j] for all j < i*/
                /* = Max C4L[j] - C7L[j] for all j < i */
                F = max(F, C7L[i] - C4L[i] + G);
                res = max(res, C4L[i+1] + C7R[i+1] + F);
                G = max(G, C4L[i+1] - C7L[i+1]);
            }
            printf("%d\n", res);
        }
    }
    return 0;
}
