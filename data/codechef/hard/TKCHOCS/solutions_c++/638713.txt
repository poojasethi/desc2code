// topcoder.cpp : ?R???\?[?? ?A?v???P?[?V?????̃G???g?? ?|?C???g???`???܂??B
//

#include <stdio.h>
#include <string.h>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <climits>
#include <cfloat>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <assert.h>
#include <iomanip>
#include <bitset>
#include <time.h>
#include <math.h>

using namespace std;
typedef long long ll;

static const double EPS = 1e-9;
int ROUND(double x) { return (int)(x+0.5); }
bool ISINT(double x) { return fabs(ROUND(x)-x)<=EPS; }
bool ISEQUAL(double x,double y) { return fabs(x-y)<=EPS*max(1.0,max(fabs(x),fabs(y))); }
double SQSUM(double x,double y) { return x*x+y*y; }	
#define PI	(2.0*acos(0.0))
template<class T> bool INRANGE(T x,T a,T b) { return a	<=x&&x<=b; }
#define NG (-1)
#define SZ(a) ((int)a.size()) 

#define BIG (987654321)

#if 1

bool inFieldPo(int y, int x, int N)
{
	return x<=y && x+y<=N-1 && x>=0 && y>=0 && x<=N-1 && y<=N-1;
}


void calcSum(vector < vector <ll> >& sum_choco, const vector < vector <ll> >& choco, int N )
{
	for(int y=0;y<=N-1;y++)
	{
		for(int x=0;inFieldPo(y,x,N);x++)
		{
			ll ret = 0;
			for(int d=-1;d<=1;d++)
			{
				if(inFieldPo(y-1,x+d,N))
				{
					ret = max(ret,sum_choco[y-1][x+d]);
				}
			}
			sum_choco[y][x] = choco[y][x]+ret;
		}
	}
}

int main()
{
	int T;
	scanf("%d",&T);
	for(int tloop=0;tloop<T;tloop++)
	{
		int N;
		scanf("%d",&N);
		vector < vector <ll> > choco(N, vector <ll> (N,0));
		vector < vector <ll> > choco_flip(N, vector <ll> (N,0));
		vector < vector <ll> > choco_d0(N, vector <ll> (N,0));
		vector < vector <ll> > choco_flip_d0(N, vector <ll> (N,0));

		for(int y=0;y<N;y++)
		{
			for(int x=0;x<=y;x++)
			{
				char str[100000];
				int tmp;
				scanf("%d",&tmp);
				choco[y][x]	=
				choco_d0[y][x]= tmp;
				choco_flip[N-1-x][N-1-y]=
				choco_flip_d0[N-1-x][N-1-y]=tmp;

				if(y+x==N-1)
				{
					choco_d0[y][x]=
					choco_flip_d0[N-1-x][N-1-y]=0;
				}
			}
		}

		vector < vector <ll> > sum_choco(N, vector <ll> (N,0));
		vector < vector <ll> > sum_choco_flip(N, vector <ll> (N,0));
		vector < vector <ll> > sum_choco_d0(N, vector <ll> (N,0));
		vector < vector <ll> > sum_choco_flip_d0(N, vector <ll> (N,0));

		calcSum(sum_choco, choco, N);
		calcSum(sum_choco_flip, choco_flip, N);
		calcSum(sum_choco_d0, choco_d0, N);
		calcSum(sum_choco_flip_d0, choco_flip_d0, N);

		ll best1 = sum_choco[N-1][0]+sum_choco_flip_d0[N-1][0];
		ll best2 = sum_choco_flip[N-1][0]+sum_choco_d0[N-1][0];
		ll best = max(best1,best2);

		cout << best << endl;
	}
}




#elif 1
void make_factors(int value, vector<int>& factors)
{
	vector<int> big_factors;

	for(int i=1;i*i<=value;i++)
	{
		if(value%i==0)
		{
			factors.push_back(i);
			if(i*i!=value)
			{
				big_factors.push_back(value/i);
			}
		}
	}
	reverse(big_factors.begin(),big_factors.end());
	factors.insert(factors.end(),big_factors.begin(),big_factors.end());
}

bool check(const char* str, int len, int sublen)
{
	if(len%sublen!=0)
	{
		return false;
	}

	const int num_chunks = len/sublen;

	for(int s=1;s<num_chunks;s++)
	{
		const int start = s*sublen;
		for(int t=0;t<sublen;t++)
		{
			if(str[t]!=str[start+t])
			{
				return false;
			}
		}
	}

	return true;
}

int *buildFail(char *p) {
	int m = strlen(p);
	int *fail = new int[m+1];
	int j = fail[0] = -1;
	for (int i = 1; i <= m; ++i) {
		while (j >= 0 && p[j] != p[i-1]) j = fail[j];
		fail[i] = ++j;
	}
	return fail;
}
int match(char *t, char *p, int *fail) {
	int n = strlen(t), m = strlen(p);
	int count = 0;
	for (int i = 0, k = 0; i < n; ++i) {
		while (k >= 0 && p[k] != t[i]) k = fail[k];
		if (++k >= m) {
			++count; // match at t[i-m+1 .. i]
			k = fail[k];
		}
	}
	return count;
}
int main()
{








	// ???I ??o?O?ɏ????I
//	freopen("input.txt","r",stdin);

	int N;
	scanf("%d",&N);
	for(int i=0;i<N;i++)
	{
		static char str[1000000];
		int M,P;
		scanf("%s %d %d ",str,&M,&P);
		int len = strlen(str);

		vector <int> factors;
		make_factors(len, factors);

		ll syuki = BIG;
		for(int k=0;k<SZ(factors);k++)
		{
			if(check(str,len,factors[k]))
			{
				syuki = factors[k];
				break;
			}
		}

		ll now = 0;
		int count = 0;
		for(int k=0;k<=len;k++)
		{
			now += M;
			count++;
			if(now%syuki==0)
			{
				break;
			}

			now += P;
			count++;
			if(now%syuki==0LL)
			{
				break;
			}
		}

		if(count>=2*len)
		{
			count = -1;
		}
		printf("%d\n",count);
	}
}

#elif 1
int main()
{
	// ???I ??o?O?ɏ????I
	freopen("input.txt","r",stdin);

	while(1)
	{
		int N;
		scanf("%d",&N);
		if(N==0)
		{
			break;
		}

		ll now = 0;
		for(int i=0;i<N;i++)
		{
			char str[10000];
			int d;
			scanf("%s %d ",str,&d);

			if(str[0]=='P')
			{
				d--;
			}
			else
			{
				d++;
			}

			d = abs(d);

			if(now<d)
			{
				now = d;
			}
			else if ((now&1)!=(d&1))
			{
				now++;
			}
		}
		cout << now << endl;
	}


}

#else
int main()
{
	// ???I ??o?O?ɏ????I
//	freopen("input.txt","r",stdin);

	int T;
	scanf("%d ",&T);
	for(int i=0;i<T;i++)
	{
		int N,A,B;
		scanf("%d %d %d ",&N,&A,&B);
		{
			int A1=0;
			while(A)
			{
				A &= A-1;
				A1++;
			}

			int B1=0;
			while(B)
			{
				B &= B-1;
				B1++;
			}

			int bit1;
			if(A1+B1<=N)
			{
				bit1=A1+B1;
			}
			else
			{
				bit1=2*N-(A1+B1);
			}

			int ret = 0;
			for(int n=0;n<N;n++)
			{
				ret *= 2;
				if(n<bit1)
				{
					ret += 1;
				}
			}
			printf("%d\n",ret);
		}
	}


}
#endif