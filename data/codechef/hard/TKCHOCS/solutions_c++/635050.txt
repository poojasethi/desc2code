
#include <cstdio>
#include <iostream>
#include <cassert>
#include <cstring>
#include <cstdlib>

using namespace std;

#define REP(i, n) for(int i = 0; i < (int)(n); ++i)
#define FOR(i, c) for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)


int n;
int field[567][567];
int memo[2][2][567][567];

int solve(int dir, int greed, int ci, int cj) {
  int& res = memo[dir][greed][ci][cj];
  if(res < 0){
    int border = n+1;
    if(dir == 0){
      if(ci + cj > border || !greed && ci + cj == border){
	res = 0;
      }else{
	res = solve(dir, greed, ci+1, cj-1);
	res = max(res, solve(dir, greed, ci+1, cj));
	res = max(res, solve(dir, greed, ci+1, cj+1));
	if(greed || ci + cj < border)
	  res += field[ci][cj];
      }
    }else{
      if(ci + cj < border || !greed && ci + cj == border){
	res = 0;
      }else{
	res = solve(dir, greed, ci+1, cj-1);
	res = max(res, solve(dir, greed, ci, cj-1));
	res = max(res, solve(dir, greed, ci-1, cj-1));
	if(greed || ci + cj > border)
	  res += field[ci][cj];
      }
    }
  }
  return res;
}

int main(void) {
  
  int nCases;
  scanf("%d", &nCases);
  REP(iCase, nCases){
    
    scanf("%d", &n);
    
    memset(memo, 0, sizeof(memo));
    memset(field, 0, sizeof(field));
    REP(i, n) REP(j, i+1){
      scanf("%d", &field[i+1][j+1]);
      REP(d, 2) REP(k, 2)
	memo[d][k][i+1][j+1] = -1;
    }
    
    int res1 = solve(0, 0, 1, 1) + solve(1, 1, n, n);
    int res2 = solve(0, 1, 1, 1) + solve(1, 0, n, n);
    printf("%d\n", max(res1, res2));
  }
  
  return 0;
}
