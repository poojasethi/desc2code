#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
using namespace std;
#define pb push_back
#define INF 2147483647
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define sz size()
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,t.size())s<<t[i]<<" ";return s; }
#define IN(x,y) ((y).find((x))!=(y).end()) 
#define DBG(vari) cout<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));

#define N 507
int val[N][N], dpc[N][N], dpd[N][N], c[N], d[N], sumapoprz[N], mc[N], md[N];

int main () {
   TESTS {
      wez(n)
      FORI(i,n) FORI(j,i) scanf("%d",&val[i][j]);
      
      sumapoprz[0] = 0;
      FORI(i,(n+1)/2) {
         sumapoprz[i] = sumapoprz[i-1] + val[n+1-i][i];
         val[n+1-i][i] = 0;
      }
      
      // border
      REP(i,0,n+1) dpc[i][0]=dpc[i][n+1]=dpd[i][0]=dpd[i][n+1]=dpc[0][i]=dpc[n+1][i]=dpd[0][i]=dpd[n+1][i]=0;
      
      // Po
      FORI(i,n) {
         FORI(j,i) dpc[i][j] = max(max(dpc[i-1][j-1],dpc[i-1][j]),dpc[i-1][j+1]) + val[i][j];
         REP(j,i+1,n) dpc[i][j] = 0;
      }
      
      // Mantis
      REPD(j,n,1) {
         REPD(i,n,j) dpd[i][j] = max(max(dpd[i-1][j+1],dpd[i][j+1]),dpd[i+1][j+1]) + val[i][j];
         REP(i,1,j-1) dpd[i][j] = 0;
      }
      
      FORI(i,(n+1)/2) {
         c[i] = dpc[n+1-i][i] - val[n+1-i][i];
         d[i] = dpd[n+1-i][i] - val[n+1-i][i];
      }
      mc[1] = c[1];
      md[1] = d[1];
      REP(i,2,(n+1)/2) {
         mc[i] = max(mc[i-1],c[i]);
         md[i] = max(md[i-1],d[i]);
      }
      
      int res = 0;
      FORI(i,(n+1)/2) {
         REMAX(res, mc[i] + d[i] + sumapoprz[i])
         REMAX(res, c[i] + md[i] + sumapoprz[i])
      }
      
      pisz(res);
   }
}
