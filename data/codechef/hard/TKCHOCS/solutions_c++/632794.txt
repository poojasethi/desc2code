#include<iostream>
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<sstream>
using namespace std;
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR1(i,n) for(i=1;i<=n;i++)
#define FORab(i,a,b) for(i=a;i<=b;i++)
long long  dp1[550][550];
long long  dp2[550][550];
int  num[550][550];
int  arr[550][550];
int main()
{
	int n,i,j,t;
	cin>>t;
	while(t--)
	{
        cin>>n;
        FOR1(i,n)FOR1(j,i)scanf("%ld",&arr[i][j]);
        FOR1(i,n)FOR1(j,i)
        {
            num[i][j]=arr[i][j];
        }
        vector<int>vx;
        vector<int>vy;
        vector<int>vs;
        int x=n,y=1,sum=0;
        memset(dp1,0,sizeof(dp1));
        memset(dp2,0,sizeof(dp2));
        while(x>=y)
        {
            num[x][y]=0;
            sum+=arr[x][y];
            vx.push_back(x);
            vy.push_back(y);
            vs.push_back(sum);
            x--;
            y++;

        }
        dp1[1][1]=num[1][1];
        FOR1(i,n)
        {
            FOR1(j,i)
            {
                //if(i-1>0)
                {
                  //  if(j-1>0)
                    {
                        dp1[i][j]=max(dp1[i][j],dp1[i-1][j-1]+num[i][j]);
                    }
                    //if(j<=i-1)
                    {
                        dp1[i][j]=max(dp1[i][j],dp1[i-1][j]+num[i][j]);
                    }
                    //if(j+1<=i-1)
                    {
                        dp1[i][j]=max(dp1[i][j],dp1[i-1][j+1]+num[i][j]);
                    }
                }
            }
        }
        dp2[n][n]=num[n][n];
        for(j=n;j>=1;j--)
        {
            for(i=n;i>=j;i--)
            {
                //if(j+1<=n)
                {
                  //  if(i+1<=n)
                    {
                        dp2[i][j]=max(dp2[i][j],dp2[i+1][j+1]+num[i][j]);
                    }
                    //if(j+1<=i)
                    {
                        dp2[i][j]=max(dp2[i][j],dp2[i][j+1]+num[i][j]);
                    }
                    //if(j+1<=i-1)
                    {
                        dp2[i][j]=max(dp2[i][j],dp2[i-1][j+1]+num[i][j]);
                    }
                }
            }
        }
        long long ans=0;
        FOR(i,vx.size())
        {
            FOR(j,vx.size())
            {
                ans=max(dp1[vx[i]][vy[i]]+dp2[vx[j]][vy[j]]+vs[max(i,j)],ans);
            }
        }
        cout<<ans<<endl;
	}


	return 0;
}
