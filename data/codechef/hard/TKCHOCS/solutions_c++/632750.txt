#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>

using namespace std;
int N;
int x [ 505 ][ 505 ];

int p1 [ 505 ][ 505 ];
int p2 [ 505 ][ 505 ];

int fp1 ( int i , int j )
{
    if ( i >= 0 && j >= 0 )
       return p1[i][j];
    
    return -1000000000;
}
int fp2 ( int i , int j )
{
    if ( i < N && j < N && i >= 0 && j >= 0 )
       return p2[i][j];
    
    return -1000000000;
}

void solve()
{
     int n, A, B , C , D;
     
     cin >> n;
     N = n;
     
     memset ( x , 0 , sizeof x );
     
     for ( int i = 0; i < n; i++ )
         for ( int j = 0; j <= i; j++ )
             scanf ( "%d" , &x[i][j] );
         
     for ( int i = 0; i < n; i++ )
         for ( int j = 0; j < n; j++ )
             p1[i][j] = x[i][j];
     
     for ( int i = 0; i < n; i++ )
         for ( int j = 0; j < n; j++ )
             if ( i != 0 )
                p1[i][j] += max ( fp1 ( i - 1 , j-1 ) , max ( fp1 ( i-1,j) , fp1(i-1,j+1 ) ) );
         
     A = p1[n-1][0];

     for ( int i = 0; i < n; i++ )
         for ( int j = 0; j < n; j++ )
             p1[i][j] = x[i][j];
     
     for ( int i = 0; i < n; i++ )
     if ( i != n-1 )
         p1[i][n-i-1] = -1000000000;

     for ( int i = 0; i < n; i++ )
         for ( int j = 0; j < n; j++ )
         if ( i != 0 )
             p1[i][j] += max ( fp1 ( i - 1 , j-1 ) , max ( fp1 ( i-1,j) , fp1(i-1,j+1 ) ) );
     
     B = p1[n-1][0];

     for ( int j = n-1; j >= 0; j-- )
         for ( int i = n-1; i >= 0; i-- )
             p2[i][j] = x[i][j];
     
     for ( int j = n-1; j >= 0; j-- )
         for ( int i = n-1; i >= 0; i-- )
             if ( j != n-1 )
                p2[i][j] += max ( fp2 ( i - 1 , j+1 ) , max ( fp2 ( i,j+1) , fp2(i+1,j+1 ) ) );
         
     C = p2[n-1][0];

     for ( int j = n-1; j >= 0; j-- )
         for ( int i = n-1; i >= 0; i-- )
             p2[i][j] = x[i][j];
     
     for ( int i = 0; i < n; i++ )
     if ( i != n-1 )
         p2[i][n-i-1] = -1000000000;

     for ( int j = n-1; j >= 0; j-- )
         for ( int i = n-1; i >= 0; i-- )
             if ( j != n-1 )
                p2[i][j] += max ( fp2 ( i - 1 , j+1 ) , max ( fp2 ( i,j+1) , fp2(i+1,j+1 ) ) );
     
     D = p2[n-1][0];
     
     int ret = max ( A + D , B + C ); ret -= x[n-1][0];
     
     cout << ret << endl;
     
}

int main()
{
    int n;
    
    cin >> n;
    
    for ( int i = 0; i< n; i++ )
        solve();
    
    return 0;
}
