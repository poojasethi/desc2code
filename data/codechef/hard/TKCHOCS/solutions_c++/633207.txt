#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;

#define f(i, a, b) for(int i = a; i < b; i++)
#define rep(i, n)  f(i, 0, n)

typedef long long ll;

const int N = 500;
int x[N][N];
int dp1[N][N / 2], dp2[N][N / 2];
int lim[N];

int main() {
  int T; scanf("%d", &T);
  while(T--) {

    int n;
    scanf("%d", &n);

    rep(i, n) for(int j = 0; j <= i; j++)
      scanf("%d", &x[i][j]);

    rep(i, n) lim[i] = (i < (n + 1) / 2) ? i + 1 : n - i;

    dp1[0][0] = x[0][0];
    for(int i = 1; i < n; i++)
      for(int j = 0; j < lim[i]; j++) {
	dp1[i][j] = 0;
	int u = j + 1;
	if(i > n / 2) u = min(u, lim[i - 1] - 2);
	else u = min(u, lim[i - 1] - 1);
	for(int nj = max(0, j - 1); nj <= u; nj++)
	  dp1[i][j] = max(dp1[i][j], dp1[i - 1][nj] + x[i][j]);
      }

    dp2[0][0] = x[n - 1][n - 1];
    for(int i = 1; i < n; i++)
      for(int j = 0; j < lim[i]; j++) {
	dp2[i][j] = 0;
	int u = j + 1;
	if(i > n / 2) u = min(u, lim[i - 1] - 2);
	else u = min(u, lim[i - 1] - 1);
	for(int nj = max(0, j - 1); nj <= u; nj++)
	  dp2[i][j] = max(dp2[i][j], dp2[i - 1][nj] + x[n - j - 1][n - i - 1]);
      }

    int res = 0;
    for(int i = n / 2; i < n; i++) {
      int sum = dp1[i][lim[i] - 1] + dp2[n - 1][0];
      for(int j = i + 1; j < n; j++)
	sum += x[j][lim[j] - 1];
      sum -= x[n - 1][0];
      res = max(res, sum);
    }

    for(int i = n / 2; i < n; i++) {
      int sum = dp2[i][lim[i] - 1] + dp1[n - 1][0];
      for(int j = i + 1; j < n; j++)
	sum += x[j][lim[j] - 1];
      sum -= x[n - 1][0];
      res = max(res, sum);
    }

    printf("%d\n", res);
  }
}
