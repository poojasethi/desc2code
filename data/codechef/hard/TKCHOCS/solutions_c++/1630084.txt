#include<iostream>
#include<cstdio>
#include<cstring>
#include<string>
#include<cstdlib>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cmath>
#include<cctype>
#include<algorithm>
using namespace std;
#define pb push_back
#define mp make_pair
#define cin(n) scanint(n)
#define gc getchar_unlocked
void scanint(int &x){register int c = gc();x = 0;for(;(c<48 || c>57);c = gc());for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}}
vector<vector<int> > arr;
vector<vector<vector<int> > > dp;
int DFSP(int x,int y,int n)
{
//   cout<<x<<" "<<y<<" "<<n<<endl;
  if(y<0||x<y)return (int)(-1e9);
  if(x==y&&x==0)return 0;
  if(dp[x][y][n]>-1)return dp[x][y][n];
  return dp[x][y][n]=(arr[x][y]+max(max(DFSP(x-1,y-1,n),DFSP(x-1,y,n)),DFSP(x-1,y+1,n)) );
}
int DFSM(int x,int y,int n)
{
  if(x<0||x>y)return (int)(-1e9);
  if(x==y&&x==0)return 0;
  if(dp[x][y][n]>-1)return dp[x][y][n];
  return dp[x][y][n]=(arr[x][y]+max(max(DFSM(x-1,y-1,n),DFSM(x,y-1,n)),DFSM(x+1,y-1,n)) );
}
int dfsp(int x,int y,int n)
{
  if(y<0||x<y||(x==y&&x>0))return (int)(-1e9);
  if(x==0&&y==0)return 0;
  if(dp[x][y][n]>-1)return dp[x][y][n];
  return dp[x][y][n]=(arr[x][y]+max(max(dfsp(x-1,y-1,n),dfsp(x-1,y,n)),dfsp(x-1,y+1,n)) );
}
int dfsm(int x,int y,int n)
{
  if(x<0||x>y||(x==y&&y>0))return (int)(-1e9);
  if(x==0&&y==0)return 0;
  if(dp[x][y][n]>-1)return dp[x][y][n];
  return dp[x][y][n]=(arr[x][y]+max(max(dfsm(x-1,y-1,n),dfsm(x,y-1,n)),dfsm(x+1,y-1,n)) );
}
int main()
{
  int t,n;cin(t);while(t--){
    cin(n);
    arr.resize(n);
    dp.resize(n);
    for(int i=0;i<n;i++){
      dp[n-1-i].resize(i+1),arr[n-1-i].resize(i+1);
      for(int j=0;j<=i;j++){
	dp[n-1-i][j].resize(2);
	for(int k=0;k<2;k++)dp[n-1-i][j][k]=-1;
	cin(arr[n-i-1][j]);
      }
    }
    dfsp(n-1,0,0),dfsm(0,n-1,0);
    DFSP(n-1,0,1),DFSM(0,n-1,1);
//     cout<<dp[n-1][0][0]<<" "<<dp[n-1][0][1]<<" "<<dp[0][n-1][0]<<" "<<dp[0][n-1][1]<<endl;
    int ans=arr[0][0];
    ans+=max(dp[n-1][0][0]+dp[0][n-1][1],dp[n-1][0][1]+dp[0][n-1][0]);
    printf("%d\n",ans);
  }
}