#include <cstdio>

#include <algorithm>

using namespace std;

typedef long long llong;

int N;
int A[504][504];

#define CHECK(i, j) ((i) > 0 && (i) <= N && (j) > 0 && (j) <= N && (i) >= (j))
#define CHECK2(i, j) ((i)+(j) != N+1)

llong DP1[504][504];
llong DP2[504][504];

llong sum_diag[504];

int main(int argc, char* argv[]) {
   int TC;
   scanf("%d", &TC);
   while (TC-- > 0) {
      scanf("%d", &N);
      for (int i = 1; i <= N; ++i)
         for (int j = 1; j <= i; ++j)
            scanf("%d", &A[i][j]);
      DP1[1][1] = A[1][1];
      for (int i = 2; i <= N; ++i) {
         for (int j = 1; j <= i; ++j) {
            llong c = 0;
            if (CHECK(i-1, j-1) && CHECK2(i-1, j-1))
               c = max(c, DP1[i-1][j-1]);
            if (CHECK(i-1, j  ) && CHECK2(i-1, j  ))
               c = max(c, DP1[i-1][j  ]);
            if (CHECK(i-1, j+1) && CHECK2(i-1, j+1))
               c = max(c, DP1[i-1][j+1]);
            DP1[i][j] = A[i][j] + c;
         }
      }
      DP2[N][N] = A[N][N];
      for (int j = N-1; j > 0; --j) {
         for (int i = N; i >= j; --i) {
            llong c = 0;
            if (CHECK(i-1, j+1) && CHECK2(i-1, j+1))
               c = max(c, DP2[i-1][j+1]);
            if (CHECK(i  , j+1) && CHECK2(i  , j+1))
               c = max(c, DP2[i  ][j+1]);
            if (CHECK(i+1, j+1) && CHECK2(i+1, j+1))
               c = max(c, DP2[i+1][j+1]);
            DP2[i][j] = A[i][j] + c;
         }
      }

      sum_diag[0] = 0;
      for (int i = N, j = 1; i > 0; --i, ++j)
         sum_diag[j] = sum_diag[j-1] + A[i][j];

      llong res = 0;
      for (int k1 = 1; k1 <= N; ++k1)
         for (int k2 = 1; k2 <= N; ++k2) {
            int i1 = N+1-k1, j1 = k1;
            int i2 = N+1-k2, j2 = k2;
            /*
            fprintf(stderr, "(%d,%d) %lld %lld  (%d,%d) %lld %lld\n",
                    i1, j1, DP1[i1][j1], sum_diag[k1-1],
                    i2, j2, DP2[i2][j2], sum_diag[k2-1]);
            */
            if (k1 >= k2)
               res = max(res, DP1[i1][j1] + DP2[i2][j2] + sum_diag[k1-1] - sum_diag[k2]);
            else
               res = max(res, DP1[i1][j1] + DP2[i2][j2] + sum_diag[k2-1] - sum_diag[k1]);
         }
      printf("%lld\n", res);
   }
   return 0;
}
