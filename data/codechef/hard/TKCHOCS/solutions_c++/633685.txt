#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>

#define ABS(a) ((a>0)?a:-(a))
#define MIN(a,b) ((a<b)?(a):(b))
#define MAX(a,b) ((a<b)?(b):(a))
#define FOR(i,a,n) for (int i=(a);i<(n);++i)
#define FI(i,n) for (int i=0; i<(n); ++i)
#define pnt pair <int, int>
#define mp make_pair
#define PI 3.14159265358979
#define MEMS(a,b) memset(a,b,sizeof(a))
#define LL long long
#define U unsigned
using namespace std;
int a[510][510];
int dp1[510][510];
int dp2[510][510];
int it;
int n;
int main()
{
	int t;
	scanf("%d",&t);
	for (it=1; it<=t; ++it)
	{
		scanf("%d",&n);
		FOR(i,0,n)
			FOR(j,0,i+1)
				scanf("%d",&a[i][j]);
		int res=0;
		MEMS(dp1,0);
		MEMS(dp2,0);
		dp1[0][0]=a[0][0];
		FOR(i,0,n-1)
			FOR(j,0,i+1)
			{
				if (i>n-j-1)
					continue;
				FOR(dy,-1,2)
				{
					int nx=i+1;
					int ny=j+dy;
					if ((ny>=0) && ((nx<=n-ny-1) || ((nx==n-1) && (ny==0))))
						dp1[nx][ny]=MAX(dp1[nx][ny],dp1[i][j]+a[nx][ny]);
				}
			}
		dp2[n-1][n-1]=a[n-1][n-1];
		for (int j=n-1; j>0; --j)
			for (int i=n-1; i>=j; --i)
			{
				if (i<=n-j-1)
					continue;
				FOR(dx,-1,2)
				{
					int ny=j-1;
					int nx=i+dx;
					if ((nx<=n-1) && ((nx>n-ny-1) || ((nx==n-1) && (ny==0))))
						dp2[nx][ny]=MAX(dp2[nx][ny],dp2[i][j]+a[nx][ny]);
				}
			}
		res=dp1[n-1][0]+dp2[n-1][0]-a[n-1][0];
		MEMS(dp1,0);
		MEMS(dp2,0);
		dp1[0][0]=a[0][0];
		FOR(i,0,n-1)
			FOR(j,0,i+1)
			{
				if (i>=n-j-1)
					continue;
				FOR(dy,-1,2)
				{
					int nx=i+1;
					int ny=j+dy;
					if ((ny>=0) && ((nx<n-ny-1) || ((nx==n-1) && (ny==0))))
						dp1[nx][ny]=MAX(dp1[nx][ny],dp1[i][j]+a[nx][ny]);
				}
			}
		dp2[n-1][n-1]=a[n-1][n-1];
		for (int j=n-1; j>0; --j)
			for (int i=n-1; i>=j; --i)
			{
				if (i<n-j-1)
					continue;
				FOR(dx,-1,2)
				{
					int ny=j-1;
					int nx=i+dx;
					if ((nx<=n-1) && ((nx>=n-ny-1) || ((nx==n-1) && (ny==0))))
						dp2[nx][ny]=MAX(dp2[nx][ny],dp2[i][j]+a[nx][ny]);
				}
			}
		res=MAX(res,dp1[n-1][0]+dp2[n-1][0]-a[n-1][0]);
		cout<<res<<endl;
	}
	return 0;
}