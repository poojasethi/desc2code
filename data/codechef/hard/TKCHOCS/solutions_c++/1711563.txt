#include<cstdio>
#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<set>
#include<cmath>
#include<bitset>
#include<map>
#include<queue>
#include<stack>
#define test(t) while(t--)
#define cin(n) scanf("%lld",&n)
#define cout(n) printf("%lld\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define rrep(i,a,n) for(i=a;i>=n;i--)
#define vi vector<long long>
#define vii vector< vector<long long> >
#define vpii vector< pair<long long,long long> >
#define mii map<long long,long long>
#define pb push_back
#define mp make_pair
#define imax (long long) 1000000007
#define ill long long
#define gc getchar_unlocked
void fcin(long long &x){register long long c = gc();x = 0;for(;(c<48 || c>57);c = gc());for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}}
using namespace std;
int main()
{
	long long t,n,i,j,z;vii a,b,c;
	cin(t);
	test(t)
	{
		cin(n);
		//cout<<"fasd";
		a.clear();b.clear();c.clear();
		//cout<<a.size();
		a.resize(n+2);
		b.resize(n+2);
		c.resize(n+2);
		rep(i,0,n+1)
		{
			a[i].resize(n+2,0);
			b[i].resize(n+2,0);
			c[i].resize(n+2,0);
			/*rep(j,0,i+1)
			{
				cout<<a[i][j]<<b[i][j]<<c[i][j]<<" ";
			}
			cout<<"\n";*/
		}
		rep(i,1,n)
		{
			rep(j,1,i)
			{
				cin(a[i][j]);
			}
		}
		b[1][1]=a[1][1];c[n][n]=a[n][n];
		rep(i,2,n)
		{
			rep(j,1,min(i,n-i+1))
			{
				//cout<<a[i][j]<<"*"<<b[i-1][j+1]<<"*"<<b[i][j+1]<<"*"<<b[i+1][j+1]<<"*";
				b[i][j] = a[i][j] + max(b[i-1][j-1],max(b[i-1][j],b[i-1][j+1]));//cout<<b[i][j]<<" ";
			}
			//cout<<"\n";
		}
		//cout<<c[n][n]<<"\n";
		rrep(j,n-1,1)
		{
			rep(i,max(j,n-j+1),n)
			{
				//cout<<a[i][j]<<"*"<<c[i-1][j+1]<<"*"<<c[i][j+1]<<"*"<<c[i+1][j+1]<<"*";
				c[i][j] = a[i][j] + max(c[i-1][j+1],max(c[i][j+1],c[i+1][j+1]));//cout<<c[i][j]<<" ";
			}
			//cout<<"\n";
		}
		i=(n+1)/2;
		z = b[n+1-i][i] + c[n+1-i][i]-a[n+1-i][i];
		rrep(i,(n+1)/2 - 1,1)
		{
			z=max(z+a[n+1-i][i],max(b[n+1-i][i]+max(c[n+1-i][i+1],c[n+2-i][i+1]),c[n+1-i][i]+max(b[n-i][i],b[n-i][i-1])));//cout<<z<<" ";
		}
		cout(z);
		//cout<<"done\n";
	}
	return 0;
} 