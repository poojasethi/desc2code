#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
int N;
int tablero[501][501];

int dp[500][500];

#define REP(i,N) for(int i=0; i<N; i++)
#define printMat(m,N) REP(i,N) { REP(j,N) printf("%d ",m[i][j]); printf("\n"); }

int solveUp() {
	memset(dp, 0, sizeof(dp));
	dp[N-1][0]=tablero[N-1][0];
	int i, k=1;
	for(i=N-2; k<(N+1)/2; i--, k++) {
		for(int j=0; j<=k; j++) {
			dp[i][j] = tablero[i][j]+max(j==0?0:dp[i+1][j-1], max(dp[i+1][j], dp[i+1][j+1]));
		}
	}
	for(; i>=0; i--) {
		for(int j=0; j<=i; j++) {
			dp[i][j] = tablero[i][j]+max(j==0?0:dp[i+1][j-1], max(dp[i+1][j], dp[i+1][j+1]));
		}
	}
	
	return dp[0][0];
}

int solveRight() {
	memset(dp, 0, sizeof(dp));
	dp[N-1][0]=tablero[N-1][0];
	int j;
	for(j=1; j<(N+1)/2; j++) {
		for(int k=0, i=N-1; k<=j; k++, i--) {
			dp[i][j]=tablero[i][j]+max(i==N-1?0:dp[i+1][j-1], max(dp[i][j-1], dp[i-1][j-1]));
		}
	}
	
	for(; j<N; j++)
		for(int i=N-1; i>=j; i--) {
			dp[i][j]=tablero[i][j]+max(i==N-1?0:dp[i+1][j-1], max(dp[i][j-1], dp[i-1][j-1]));
		}
	
	return dp[N-1][N-1];
}

int solve()
{
	int conUp = solveUp();
	int conRight = solveRight();
	
	for(int i=N-2, j=1; i>0; i--, j++)
		tablero[i][j]=0;
		
	int sinUp = solveUp();
	int sinRight = solveRight();

	//printf("conUp=%d conRight=%d sinUp=%d sinRight=%d\n", conUp,conRight, sinUp,sinRight);
	
	return max( conUp + sinRight, sinUp+conRight ) - tablero[N-1][0]; 
	//printMat(dp,N);
	
//	return 0;
}

int main()
{
	int T;
	scanf("%d",&T);
	while(T--) {
		scanf("%d",&N);
		for(int i=0; i<N; i++)
			for(int j=0; j<=i; j++)
				scanf("%d",&tablero[i][j]);
				
		printf("%d\n",solve());
	}
}