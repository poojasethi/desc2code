#include <string>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <iostream>
#include <sstream>
#include <cstring>
#include <queue>
#include <cassert>
#include <cctype>
#include <deque>
#define MP make_pair
using namespace std;
typedef pair<int, int> PII;
typedef unsigned long long ULL;
typedef long long LL;

#define MOD
#define INF
#define MAXN 500000

const int M = (1<<30);
int N, A, B, D, C, Q, arr[MAXN+1], prv[MAXN+1], team[MAXN+1], query[MAXN+1];
deque<int> mindq, maxdq;
void solve()
{
    for(int i=0; i<Q; i++)
    {
        int m;
        scanf("%d", &m);
        assert(m <= N && m>0);
        printf("%d %d\n", query[m], team[query[m]]);
    }
}
void preprocess()
{
    mindq.clear();
    maxdq.clear();
    for(int i=1; i<=N; i++)team[i] = 0;
    prv[0] = 0;
    int pv = 0;
    mindq.push_front(0);
    maxdq.push_front(0);
    team[1] ++;
    for(int i=1; i<N; i++)
    {
        while(mindq.empty()==false && arr[mindq.front()] > arr[i])
            mindq.pop_front();
        mindq.push_front(i);
        while(maxdq.empty()==false && arr[maxdq.front()] < arr[i])
            maxdq.pop_front();
        maxdq.push_front(i);
        while(pv < i)
        {
            int diff = arr[maxdq.back()] - arr[mindq.back()];
            if(diff <= C)break;
            if(maxdq.back() == pv)maxdq.pop_back();
            if(mindq.back() == pv)mindq.pop_back();
            pv ++;
        }
        team[i-pv+1]++;
    }
    for(int i=N-1; i>0; i--)team[i] += team[i+1];
    int j = N;
    for(int i=1; i<=N; i++)
    {
        while(j>0 && team[j]<=i)j--;
        j++;
        query[i] = j;
    }
}

void readInput()
{
    scanf("%d%d%d%d%d%d", &N, &C, &Q, &A, &B, &D);
    int X = min(10000, N);
    for(int i=0; i<X; i++)
        scanf("%d", &arr[i]);
    for(int i=X; i<N; i++)
    {
        arr[i] = ((LL)arr[i-1]*A + (LL)arr[i-2]*B + D)%M;
    }
}

int main()
{
    int testcases;
    scanf("%d", &testcases);
    for(int caseno=1; caseno<=testcases; caseno++)
    {
        readInput();
        preprocess();
        solve();
    }
    return 0;
}


