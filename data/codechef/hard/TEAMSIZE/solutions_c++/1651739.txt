// cc - TEAMSIZE
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <queue>
#include <cstdio>
#include <set>
#include <map>
#include <cstdlib>
#include <cstring>
#include <stack>
#include <cassert>

typedef unsigned long long ULL;
typedef long long LL;

#define MIN(a,b) (a<b?a:b)
#define MAX(a,b) (a>b?a:b)
#define ABS(a) ((a>0)?a:-a))

#define SZ(a) ((int)a.size())
#define PB(a) push_back(a)
#define FOR(i,a,b) for(int i=(a);i<=(b);i++)
#define REP(i,n) FOR(i,0,(int)(n-1))
#define printv(v) REP(i,SZ(v))printf("%d ",v[i]);
#define mp(a,b) make_pair(a,b)
#define PII pair<int,int>
#define MOD 1073741824

using namespace std;

int cand[500001];
int a[500001];

bool cmp(int i,int j) {return (i>j);}

int main()
{
 //freopen("inp.in","r",stdin);
 int t;
 scanf("%d",&t);
 while(t--)
 {
    int n,c,q,A,b,d;
    scanf("%d %d %d %d %d %d",&n,&c,&q,&A,&b,&d);

    int N = min(10000,n);
    REP(i,N) scanf("%d",&a[i]);
    FOR(i,N,n-1) a[i] = (int)(((LL)A*a[i-1] + (LL)b*a[i-2] + (LL)d) % MOD);

    FOR(i,1,n) cand[i] = 0;

    deque <int> minqueue;
    deque <int> maxqueue;

    minqueue.push_back(0);
    maxqueue.push_back(0);
    int sz = 1;
    cand[sz]++;

    FOR(i,1,n-1)
    {
        int x = a[i];
        while(!minqueue.empty() && a[minqueue.back()]>=x)
            minqueue.pop_back();
        minqueue.push_back(i);

        while(!maxqueue.empty() && a[maxqueue.back()]<=x)
            maxqueue.pop_back();
        maxqueue.push_back(i);
        sz++;

        int lmax = a[maxqueue.front()];
        int lmin = a[minqueue.front()];

        //cout<<"lmax and lmin = "<<lmax<<' '<<lmin<<endl;

        if (lmax-lmin>c)
        {
            int prev;
            if (x==lmin)
            {
                while(a[maxqueue.front()]-lmin>c){
                    prev = maxqueue.front();
                    maxqueue.pop_front();
                }
            }
            else
            {
                while(lmax - a[minqueue.front()]>c){
                    prev = minqueue.front();
                    minqueue.pop_front();
                }
            }
        
            sz = i - prev;  //prev = beg[i]
        }

        cand[sz]++;

    }

    int buffer = 0;
    for (int i=n;i>0;i--) {
        int temp = buffer;
        buffer += cand[i];
        cand[i] += temp;
    }

    //FOR(i,1,n) cout<<i<<' '<<cand[i]<<endl;
    while(q--)
    {
        int m;
        scanf("%d",&m);
        //lower_bound(cand+1,cand+n,m,cmp);
        int k = (int)(lower_bound(cand+1,cand+n,m,cmp) - cand);
        printf("%d %d\n",k,cand[k]);
    }
 }

return 0;
}