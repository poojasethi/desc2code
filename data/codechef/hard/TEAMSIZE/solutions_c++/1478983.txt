#include<algorithm>
#include<bitset>
#include<cassert>
#include<cctype>
#include<climits>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<ctime>
#include<deque> 
#include<ext/numeric>
#include<fstream>
#include<functional>
#include<iomanip>
#include<iostream>
#include<limits>
#include<list>
#include<map>
#include<numeric>
#include<queue>
#include<set>
#include<sstream>
#include<stack>
#include<tr1/unordered_map>
#include<tr1/unordered_set>
#include<utility>
#include<vector>
using namespace std;

typedef long long int i64;

#define ForEach(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it) 

#define MAX 19

int A,B,C,D,N,Q;

int V[1<<MAX];
int Y[1<<MAX];
int M=0;

void init_case(){
	tr1::unordered_map<int,int> Map;
	//map<int,int> Map;
	multiset<int> Set;
	memset(Y,0,sizeof (Y));
	int s=0;
	for (int i=0;i<N;++i){
		while(s<N){
			if (!Set.size())Set.insert(V[s++]);
			else{
				int mn=*Set.begin(),mx=*Set.rbegin();
				if(V[s]>=mn&&V[s]-mn<=C || V[s]<=mx&&mx-V[s]<=C){
					Set.insert(V[s++]);
				}else break;
			}
		}		
		int w=Set.size();
		++Y[w];
		Set.erase(Set.find(V[i]));
	}
	for (int i=N-1;i>0;--i) Y[i]+=Y[1+i];
}	

int main(){
	int ncases;
	scanf("%d",&ncases);

	for(int kase=0;kase<ncases;++kase){
		scanf("%d %d %d %d %d %d",&N,&C,&Q,&A,&B,&D);
		{
			int m=0,n=min(N,10000);
			while(m<n){
				scanf("%d",V+m);++m;
			}
			while(m<N){
				V[m]=(1LL*A*V[m-1]+1LL*B*V[m-2]+D)&(1<<30)-1;
				++m;
			}
		}
		
		init_case();
						
		while(Q--){
			int q;
			scanf("%d",&q);
			
			int f=-1,fv;
			int lo=1,hi=N;
			while(lo<=hi){
				int m=lo+hi>>1;
				int x=Y[m];
				if (x<=q){
					f=m,fv=Y[m];
					hi=m-1;
				}else lo=1+m;
			}
			if (f>-1){
				printf("%d %d\n",f,fv);
			}
			else{
				printf("%d %d\n",2,0);
			}
		}
	}
	return 0;
}