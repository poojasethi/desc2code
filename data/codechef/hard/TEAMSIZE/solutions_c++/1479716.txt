#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cmath>
#include <vector>
#include <stack>
#include <set>
#include <map>
#include <deque>
#include <string>

#define all(i,n) for(i = 0; i < (n); i++)
#define SET(p) memset(p,-1,sizeof(p))
#define CLR(p) memset(p,0,sizeof(p))
#define maX(a,b)	((a)>(b)?(a):(b))
#define miN(a,b)	((a)<(b)?(a):(b))
#define S(n)	scanf("%d",&n)
#define P(n)	printf("%d\n",n)
#define Sl(n)	scanf("%lld",&n)
#define Pl(n)	printf("%lld\n",n)
#define Sf(n)   scanf("%lf",&n)
#define Ss(n)   scanf("%s",n)
#define LL long long
#define ULL unsigned long long
#define pb push_back
#define mod 1073741824
using namespace std;
LL skill[500005];
int cand[500005];
int n,c;
deque<LL> dqmax,dqmin;
void solve()
{
    int i,j=1;
    dqmax.push_front(1);
    dqmin.push_front(1);
    cand[1]++;
    for(i=2;i<=n;i++)
    {
        while(skill[i]>skill[dqmax.back()] && !dqmax.empty())
        {
            dqmax.pop_back();
        }
        dqmax.push_back(i);
        while(skill[i]<skill[dqmin.back()] && !dqmin.empty())
        {
            dqmin.pop_back();
        }
        dqmin.push_back(i);
        while(skill[dqmax.front()]-skill[dqmin.front()]>c)
        {
            if(skill[j]==skill[dqmax.front()])
                dqmax.pop_front();
            if(skill[j]==skill[dqmin.front()])
                dqmin.pop_front();
            j++;
        }
        cand[i+1-j]++;
    }
    while(!dqmax.empty())
        dqmax.pop_back();
    while(!dqmin.empty())
        dqmin.pop_back();
    for(i=n-1;i>0;i--)
        cand[i]+=cand[i+1];
}
int calculate(int m)
{
    int l=1,r=n,mid,ans,j;
    while(l<=r)
    {
        mid=(l+r)>>1;
        if(cand[mid]<=m)
        {
            ans=mid;
            r=mid-1;
        }
        else
        {
            l=mid+1;
        }
    }
    return ans;
}
int main()
{
int t,m,q,i,j;
LL a,b,d;
S(t);
while(t--)
{
    CLR(cand);
    S(n);S(c);S(q);Sl(a);Sl(b);Sl(d);
    for(i=1;i<=n && i<=10000;i++)
    {
        Sl(skill[i]);
    }
    for(;i<=n;i++)
    {
        skill[i]=((a*skill[i-1])%mod + (b*skill[i-2])%mod +d)%mod;
    }
    solve();
    for(i=0;i<q;i++)
    {
        S(m);
        j=calculate(m);
        printf("%d %d\n",j,cand[j]);
    }
}
return 0;
}
