#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

const int MOD = (1<<30);

int T, N, n, C, Q, A, B, D, a[500005], c[500005], cand[500005], ans[500005], x;

int madp[500005], mar, maw, midp[500005], mir, miw;

void add(int x) {
    for (int i=x; i<=N+2; i+=i&(-i)) c[i]++;
}
int sum(int x) {
    int ret = 0;
    for (int i=x; i>0; i-=i&(-i)) ret += c[i];
    return ret;
}

int main() {
    scanf("%d", &T);
    while (T--) {
        scanf("%d%d%d%d%d%d", &N, &C, &Q, &A, &B, &D);
        n = min(N, 10000);      //////////////////////////////////////////////////////
        for (int i=0; i<n; ++i) {
            scanf("%d", &a[i]);
        }
        for (int i=n; i<N; ++i) {
            a[i] = (int)((A * (long long)a[i-1] + B * (long long)a[i-2] + D) % MOD);
        }
        mar = mir = maw = miw = 0;
        memset(c, 0, sizeof(c));
        for (int i=0, j=0; i<N; ++i) {
            while (mar < maw && a[madp[maw-1]] <= a[i]) maw--;
            madp[maw++] = i;
            while (mir < miw && a[midp[miw-1]] >= a[i]) miw--;
            midp[miw++] = i;
            while (1) {
                while (mar < maw && madp[mar] < j) mar++;
                while (mir < miw && midp[mir] < j) mir++;
                if (a[madp[mar]] - a[midp[mir]] <= C) break;
                ++j;
            }
            add(i-j+1);
        }
        for (int i=1; i<=N; ++i) {
            cand[i] = N - sum(i-1);
        }
        cand[N+1] = 0;
        memset(ans, -1, sizeof(ans));
        ans[0] = N+1;
        for (int i=N; i>=1; --i) {
            ans[cand[i]] = i;
        }
        for (int i=1; i<=N; ++i) {
            if (ans[i] == -1) ans[i] = ans[i-1];
        }
        while (Q--) {
            scanf("%d", &x);
            printf("%d %d\n", ans[x], cand[ans[x]]);
        }
    }
    return 0;
}
