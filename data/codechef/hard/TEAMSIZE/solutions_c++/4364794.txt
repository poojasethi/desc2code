#include <bits/stdc++.h>
using namespace std;

// Uzumaki Naruto :)

#define DEBUG
#ifdef DEBUG
	#define dbg(a) cerr << __LINE__ << ": " << #a << " = " << (a) << endl
	#define dbg_all(a,sz) cerr << "_____ " << #a << " = "; for(int i = 0; i < sz; ++i) cerr << a[i] << " "; cerr << "\n"
	#define pause() cin.get();cin.get();
#else
	#define dbg(a)
	#define dbg_all(a,sz)
	#define pause()
#endif

typedef long long LL;
typedef pair<LL,int> pii;
typedef vector<int> vi;

const int NN = 512345;
const LL Mod = (1 << 30);

LL S[NN],cnt[NN],rnk[NN];
int N,C,Q,A,B,D;

inline LL sum(LL a,LL b) { return (a+b)%Mod; }
inline LL pro(LL a,LL b) { return (a*b)%Mod; }
void solve(){
    memset(cnt,0,sizeof(cnt));
    memset(rnk,0,sizeof(rnk));
    cin >> N >> C >> Q >> A >> B >> D;

    for(int i = 0; i < N; ++i){
        if (i < 10000) cin >> S[i];
        else S[i] = sum(sum(pro(A,S[i-1]),pro(B,S[i-2])),D);
    }

    int i = 0, j = 0;
    deque<pii> min_dq,max_dq;
    while(i < N){
        while(j < N){
            if (min_dq.empty() and max_dq.empty())
                min_dq.push_back(make_pair(S[j],j)), max_dq.push_back(make_pair(S[j],j));
            else {
                int mn = min(min_dq.front().first,S[j]);
                int mx = max(max_dq.front().first,S[j]);
                if (mx-mn > C) break;

                // Less than Threshold :)
                while(!min_dq.empty() and min_dq.back().first >= S[j]) min_dq.pop_back();
                while(!max_dq.empty() and max_dq.back().first <= S[j]) max_dq.pop_back();

                min_dq.push_back(make_pair(S[j],j));
                max_dq.push_back(make_pair(S[j],j));
            }
            ++j;
        }

        int rng = j-i;
        ++cnt[rng];

        while(!min_dq.empty() and min_dq.front().second <= i) min_dq.pop_front();
        while(!max_dq.empty() and max_dq.front().second <= i) max_dq.pop_front();
        ++i;
    }

    for(int i = N; i > 0; --i) cnt[i] += cnt[i+1];
    for(int i = N; i > 0; --i) rnk[cnt[i]] = i;

    for(int i = 1; i <= N; ++i) if (!rnk[i])
        rnk[i] = rnk[i-1];

    while(Q--){
        int M; cin >> M;
        cout << rnk[M] << " " << cnt[rnk[M]] << endl;
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    int t; cin >> t;
    while(t--) solve();
    return 0;
}
