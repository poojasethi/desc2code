/*===============*\
|  ID: TMANDZU    |
|    LANG: C++    |
\*===============*/
//Tornike Mandzulashvili
//#pragma comment(linker, "/STACK:50000000")
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <stack>
#include <math.h>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <iostream>
#include <set>
#define PI 3.14159265
#define hash1 1000003
#define hash2 1000033
#define INF 1000000000
#define mp make_pair

using namespace std;

deque <long long> minQ,maxQ;
long long g[500005],skill[500005];
long long M,md,t,r,l,middle,N,X,i,C,Q,A,B,D;


void updateall()
{
    while (minQ.size() && skill[r]<=skill[minQ.back()])
    minQ.pop_back();
    minQ.push_back(r);

    while (maxQ.size() && skill[r]>=skill[maxQ.back()])
    maxQ.pop_back();
    maxQ.push_back(r);

    return;
}

main()
{
 //   freopen("text.in","r",stdin);freopen("text.out","w",stdout);
    scanf("%lld",&t);
    md=1<<30;
    while (t--)
    {
        maxQ.clear();minQ.clear();
        for (i=0;i<=N;i++)
        g[i]=0;
        //ganuleba
        scanf("%lld%lld%lld%lld%lld%lld",&N,&C,&Q,&A,&B,&D);
        X=min(N,10000LL);
        for (i=1;i<=X;i++)
        scanf("%lld",&skill[i]);
        for (i=X+1;i<=N;i++)
        skill[i]=(A*skill[i-1]+B*skill[i-2]+D)%md;

        l=1;r=1;
        maxQ.push_front(1);
        minQ.push_front(1);

        while (l<=N)
        {
                 while (r<=N && skill[maxQ.front()]-skill[minQ.front()]<=C){
                 r++;
                 updateall();
             }

             g[r-l]++;
             if (minQ.front()==l) minQ.pop_front();
             if (maxQ.front()==l) maxQ.pop_front();

             l++;
        }
        for (i=N-1;i>=1;i--)
        g[i]+=g[i+1];

        while (Q--)
        {
            scanf("%lld",&M);
            l=1;r=N;
            while (l<r)
            {
                middle=(l+r)>>1;
                if (g[middle]>M) l=middle+1;else r=middle;

                if (r==l+1)
                if (g[l]<=M) r--;else l++;
            }

            printf("%lld %lld\n",l,g[l]);
        }
    }
}

