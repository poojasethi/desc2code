#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<queue>
#include<deque>
using namespace std;
const int MAX_N = 5e5+7;
const int mod = 1<<30;
class Queue
{
  deque<int> minm, maxm;
  queue<int> Q;
public:
  void push(int x)
  {
    while (!minm.empty() && minm.back() > x) minm.pop_back();
    while (!maxm.empty() && maxm.back() < x) maxm.pop_back();
    minm.push_back(x);
    maxm.push_back(x);
    Q.push(x);
  }
  int pop()
  {
    int ret = Q.front(); Q.pop();
    if (ret == minm.front()) minm.pop_front();
    if (ret == maxm.front()) maxm.pop_front();
    return ret;
  }
  int min()
  {
    return minm.front();
  }
  int max()
  {
    return maxm.front();
  }
  bool empty()
  {
    return Q.empty();
  }
};
int n, c, q, a, b, d;
int skill[MAX_N];
int cand[MAX_N];
int main()
{
  int tests;
  scanf ("%d", &tests);
  while (tests--) {
    scanf ("%d %d %d %d %d %d", &n, &c, &q, &a, &b, &d);
    for (int i = 1; i <= min(n,10000); i++) scanf ("%d", &skill[i]);
    for (int i = min(n,10000)+1; i <= n; i++) skill[i] = ((long long)a*skill[i-1] + (long long)b*skill[i-2] + d)%mod;
    for (int i = 1; i <= n+1; i++) cand[i] = 0;
    int l = 1;
    Queue Q;
    for (int i = 1; i <= n; i++) {
      Q.push(skill[i]);
      while (Q.max()-Q.min() > c) Q.pop(), ++l;
      cand[i-l+1]++;
    }
    for (int i = n-1; i > 1; i--) cand[i] += cand[i+1];
    cand[1] = n;
    for (int query = 1; query <= q; query++) {
      int M;
      scanf ("%d", &M);
      int lo = 1, hi = n, ans = 1;
      while (lo <= hi) {
	int mi = (lo+hi)/2;
	if (cand[mi] > M) lo = mi+1;
	else ans = mi, hi = mi-1;
      }
      printf ("%d %d\n", ans, cand[ans]);
    }
  }
  return 0;
}
