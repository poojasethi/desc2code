#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;
int in(){int r=0,c;for(c=getchar_unlocked();c<=32;c=getchar_unlocked());if(c=='-') return -in();for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());return r;}
typedef pair<int,int> pii;
typedef long long ll;

#define MAXN 1123456

int deg[MAXN];
int preord[MAXN];
int pstord[MAXN];
int rem[MAXN];
ll mod = 1000000007;

int last[MAXN];
int vec[MAXN<<1];
int nxt[MAXN<<1];
int E;

ll fact[MAXN];

void addedge(int u,int v){
  deg[u]++;
  nxt[E] = last[u]; vec[E] = v; last[u]= E++;
}

ll inv(ll b){
  if(b==1) return 1;
  
  int e = mod-2;
  ll ans = 1;
  
  while(e){
    if(e&1) ans=(ans*b)%mod;
    b=(b*b)%mod;
    e>>=1;
  }
  return ans%mod;
}

ll choose(int n, int k){
  return (((fact[n] * inv(fact[k]))%mod) * inv(fact[n-k]))%mod;
}

int K;
void dfs(int u,ll &ans){
  ///cerr << "Entra " << u << endl;
  if(deg[u]) ans = (ans*choose(K,deg[u]))%mod;
  for(int ptr=last[u];~ptr;ptr=nxt[ptr]) dfs(vec[ptr],ans);
}

int build(int start,int end,int s2,int e2){
  ///cerr << " B " << start << ' ' << end << ' ' << s2 << ' ' << e2 << endl;
  
  if(end<start) return 0;
  
  if(preord[start]!=pstord[e2]) return 0;
  
  if(start==end) return 1;
  
  int parent = preord[start];
  
  start++;
  while(start<=end){
    
    int child = preord[start];
    int rng = rem[child];
    if(rng<s2 || rng>e2) return 0;
    
    addedge(parent,child);
    
    int wid = rng-s2;
    
    int stat=build(start,start+wid,s2,s2+wid);
    if(stat==0) return 0;
    
    start+=wid+1;
    s2+=wid+1;
    
  }
  return 1;
}

void solve(){
  E = 0;
  
  int N =in();
  K = in();
  int i;
  memset(last,-1,sizeof last);
  memset(deg,0,sizeof deg);
  
  for(i=0;i<N;i++) preord[i] = in()-1;
  for(i=0;i<N;i++) pstord[i] = in()-1;
  for(i=0;i<N;i++) rem[pstord[i]] = i;
  
  int stat = build(0,N-1,0,N-1);
  if(stat==0){
    puts("0");
    return;
  }
  
  ll ans = 1;
  dfs(preord[0],ans);
  
  cout << ans << endl;
}

int main(){
  fact[0] = 1;
  for(int i=1;i<MAXN;i++) fact[i] = (fact[i-1]*i)%mod;
  
  for(int i=0,T=in();i<T;i++)
      solve();
}
