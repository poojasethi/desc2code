#pragma comment(linker, "/STACK:256777216")
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <vector>
#include <memory.h>
#include <map>
#include <set>
#include <algorithm>
#include <cmath>
#include <stack>
#include <string>
#include <cstring>
#include <string.h>
#include <cmath>
#include <math.h>
#include <queue>
#include <cassert>
#include <time.h>

#define forn(i,n) for (int i = 0; i < (int)n; i++)
#define fornd(i, n) for (int i = (int)n - 1; i >= 0; i--)
#define forab(i,a,b) for (int i = (int)a; i <= (int)b; i++)
#define forabd(i, b, a) for (int i = (int)(b); i >= (int)(a); i--)
#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)
#define zero(a) memset (a, 0, sizeof (a))
#define last(v) (int)v.size() - 1
#define _(a, val) memset (a, val, sizeof (a))
#define pb push_back
#define mp make_pair
#define all(v) (v).begin(), (v).end()
typedef long long ll;
typedef unsigned long long ull;
typedef double ld;

const ll LINF = 1000000000000000000LL;
const int INF = 1000000000;
const long double eps = 1e-9;
const long double PI = 3.1415926535897932384626433832795l;

using namespace std;

void prepare (string s)
{
#ifdef _DEBUG
	freopen ("input.txt", "r", stdin);
	//freopen ("output.txt", "w", stdout);
#else
	if (s.length() != 0)
	{
		freopen ((s + ".in").c_str(), "r", stdin);
		freopen ((s + ".out").c_str(), "w", stdout);
	}
#endif
}

#define NMAX 200100
#define MOD 1000000007

int fact[NMAX];
int n, k;
int a[NMAX], b[NMAX];
int ra[NMAX], rb[NMAX];

void readdata ()
{
	scanf ("%d %d", &n, &k);
	forn(i, n)
	{
		scanf ("%d", &a[i + 1]);
		ra[a[i + 1]] = i + 1;
	}
	forn(i, n)
	{
		scanf ("%d", &b[i + 1]);
		rb[b[i + 1]] = i + 1;
	}
}

int binpow(int a, int n)
{
	a %= MOD;
	int res = 1;
	for(; n > 0; n >>= 1)
	{
		if (n & 1)
			res = ((ll)res*(ll)a ) % MOD;
		a = ((ll)a*(ll)a) % MOD;
	}
	return res;
}

int cnk(int n, int k)
{
	if (k > n || k < 0)
		return 0;
	int res = fact[n];
	res = ((ll)res * (ll)binpow(fact[k], MOD - 2)) % MOD;
	res = ((ll)res * (ll)binpow(fact[n - k], MOD - 2)) % MOD;
	return res;
}

int rec(int i1, int j1, int i2, int j2)
{
	if (i1 > j1 || i2 > j2 || j1 - i1 != j2 - i2 || i1 < 1 || j1 > n || i2 < 1 || j2 > n || a[i1] != b[j2])
		return 0;
	if (i1 == j1 && i2 == j2)
		return 1;

	int ans = 1;
	int prev = i2;
	int child = 0;
	for(int i = i1 + 1; i <= j1; )
	{
		if (a[i] < 1 || a[i] > n || !(prev <= rb[a[i]] && rb[a[i]] <= j2))
			return 0;
		int cnt = rb[a[i]] - prev + 1;
		int res = rec(i, i + cnt - 1, prev, rb[a[i]]);
		prev = rb[a[i]] + 1;
		ans = ((ll)ans * (ll)res) % MOD;
		i += cnt;
		child ++;
	}

	if (prev != j2)
		return 0;

	return ((ll)ans * (ll)cnk(k, child)) % MOD;
}

void solve ()
{
	int ans = rec(1, n, 1, n);
	printf ("%d\n", ans);
}

void writedata ()
{

}

void printtest()
{
	n = 100000;
	k = 100000;
	printf ("%d %d\n", n, k);
	int a[NMAX], b[NMAX];
	forn(i, n)
		a[i] = b[i] = i + 1;
	random_shuffle(a, a + n);
	random_shuffle(b, b + n);
	forn(i, n)
	{
		printf ("%d ", a[i]);
	}
	printf ("\n");
	forn(i, n)
		printf ("%d ", b[i]);
}

void gen()
{
	freopen("input.txt", "w", stdout);
	srand( 0x212 );
	int tests = 5;
	printf ("%d\n", tests);
	forn(i, tests)
		printtest();
}


int main ()
{
	/*gen();
	return 0;*/
	prepare ("");

	fact[0] = 1;
	for(int i = 1; i < NMAX; i++)
		fact[i] = ((ll)fact[i - 1]*(ll)i) % MOD;

	int t;
	scanf ("%d", &t);
	forn(i, t)
	{
		readdata ();
		solve ();
		writedata ();
	}


	return 0;
}
