/*
    Nimesh Ghelani (nims11)
         こんいちわ
*/
#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<map>
#include<string>
#include<vector>
#include<queue>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<set>
#include<utility>
#define in_T int t;for(scanf("%d",&t);t--;)
#define in_I(a) scanf("%d",&a)
#define in_F(a) scanf("%lf",&a)
#define in_L(a) scanf("%lld",&a)
#define in_S(a) scanf("%s",a)
#define newline printf("\n")
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a<b?a:b
#define SWAP(a,b) {int tmp=a;a=b;b=tmp;}
#define P_I(a) printf("%d",a)

using namespace std;
int n, PRE[100001], POST[100001], k;
const int mod = 1000000007;
vector<int> kids[100001];
int root;
int loc[100001];
bool make(int i1, int j1, int i2, int j2)
{
    if(PRE[i1] != POST[j2])
        return false;
    if(root == -1)
        root = PRE[i1];

    int cur_root = PRE[i1];
    if(i1 == j1)
        return true;
    while(1)
    {
        int x = loc[PRE[i1+1]];
        if(x<i2 || x>j2)
            return false;
        kids[cur_root].push_back(PRE[i1+1]);
        bool flag = make(i1+1, i1+1+x-i2, i2, x);
        if(!flag)
            return false;
        i1 = i1+1+x-i2;
        i2 = x+1;
        if(i2 == j2 || i1 == j1)
            break;
    }
    return true;
}
int POW(long long r, long long n)
{
    int ans = 1;
    while(n>0)
    {
        if(n&1)
            ans = (ans*r)%mod;
        n >>= 1;
        r = (r*r)%mod;
    }
    return ans;
}
int fact[100001];
int inv[100001];
int combi(int n, int k)
{
    return ((1LL * fact[n] * inv[k])%mod * inv[n-k])%mod;
}
int getans(int node)
{
    if(kids[node].size()>k)
        return 0;
    int ret = combi(k, kids[node].size());
    for(int i=0;i<kids[node].size();i++)
        ret = (1LL * ret * getans(kids[node][i]))%mod;
    return ret;
}
int main()
{
    fact[0] = 1;
    for(int i=1;i<=100000;i++)
        fact[i] = (1LL*i*fact[i-1])%mod;
    for(int i=0;i<=100000;i++)
        inv[i] = POW(fact[i], mod-2);
    in_T
    {
        root = -1;
        scanf("%d%d", &n, &k);
        for(int i=1;i<=n;i++)
            kids[i].clear();
        for(int i=1;i<=n;i++)
            in_I(PRE[i]);
        for(int i=1;i<=n;i++)
        {
            in_I(POST[i]);
            loc[POST[i]] = i;
        }
        bool flag = make(1, n, 1, n);
        if(!flag)
            printf("0\n");
        else
        {
            printf("%d\n", getans(root));
        }
//        for(int i=1;i<=n;i++)
//        {
//            cout<<i<<":"<<endl;
//            for(int j=0;j<kids[i].size();j++)
//                cout<<kids[i][j]<<" ";
//            newline;
//        }
    }
}
