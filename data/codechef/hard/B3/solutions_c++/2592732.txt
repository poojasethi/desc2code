#include <iostream>
#include <cmath>
 
#define SIEVESIZE (2000)
using namespace std;
 
long long divisors[SIEVESIZE], numberOfDivisors;
int numberOfFactors[SIEVESIZE];
long long primeFactors[15], numberOfPrimeFactors;
 
inline long long myllabs(long long num) {
return (num < 0) ? -num : num;
}
 
inline int getNumberOfFactors(long long num) {
int sum = 0;
for (int i=0; i < numberOfPrimeFactors; i++) {
if ((num % primeFactors[i]) == 0) {
sum++;
}
}
return sum;
}
 
long long numberOfCoprimes(long long X) {
 
long long sum = X, temp;
for (int i=0; i<numberOfDivisors; i++) {
temp = floor(X/double(divisors[i]));
if ((numberOfFactors[i] % 2) == 1) {
sum -= temp;
} else {
sum += temp;
}
}
return sum;
 
}
 
int main() {
 
int t;
int i;
long long xx, result = 0;
long long Y, X1, X2;
long long x1, x2;
long long temp, temp2;
 
long long sqrty;
 
cin >> t;
 
for (i=0; i<t; i++) {
cin >> Y >> X1 >> X2;
Y = myllabs(Y);
 
if (Y==1) {
cout << X2-X1+1 << endl;
continue;
}
if (Y==0) {
result = 0;
if ((X1 <=-1) && (X2>=-1)) result++;
if ((X1 <=0) && (X2>=0)) result++;
if ((X1 <=1) && (X2>=1)) result++;
cout << result << endl;
continue;
}
sqrty = (long long)floor(sqrt(double(Y)));
// remove duplicate divisors..
temp2 = 1; temp = Y; numberOfPrimeFactors = 0;
for (xx=2; xx <= sqrty; xx++) {
if ((temp % xx) == 0) {
primeFactors[numberOfPrimeFactors] = xx;
numberOfPrimeFactors++;
temp2 = temp2 * xx;
while ((temp % xx) == 0) temp = temp / xx;
}
}
if (temp != 1) { primeFactors[numberOfPrimeFactors] = temp; numberOfPrimeFactors++; }
temp2 = temp2 * temp;
 
numberOfDivisors = 0;
sqrty = (long long)floor(sqrt(double(temp2)));
for (xx = 2; xx <=sqrty; xx++) {
if ((temp2 % xx) == 0) {
divisors[numberOfDivisors] = xx;
numberOfFactors[numberOfDivisors] = getNumberOfFactors(xx);
numberOfDivisors++;
 
temp = temp2/xx;
divisors[numberOfDivisors] = temp;
numberOfFactors[numberOfDivisors] = getNumberOfFactors(temp);
numberOfDivisors++;
}
}
divisors[numberOfDivisors] = temp2;
numberOfFactors[numberOfDivisors] = getNumberOfFactors(temp2);
numberOfDivisors++;
 
if (X2<=0) {
xx = myllabs(X1);
X1 = myllabs(X2);
X2 = xx;
}
 
result = 0;
if (X1 <= 0) {
result = numberOfCoprimes(myllabs(X1));
X1 = 1;
}
 
result += numberOfCoprimes(X2);
result -= numberOfCoprimes(X1-1);
cout << result << endl;
}
 
return 0;
}