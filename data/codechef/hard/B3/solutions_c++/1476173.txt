#include <iostream>
#include <cassert>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long LL;
int f( int x , int y ) 
{
  // returns # of +ve numbers <=x coprime with y
  if ( y == 0 ) return 1;
  if ( x < 0 ) return 0;
  vector < int > pf;
  int ty = y;
  for ( int i=2;i*i<=ty;i++ )
    if ( ty % i == 0 )
      {
	pf.push_back ( i );
	while ( ty % i == 0 ) ty/=i;
      }
  if ( ty != 1 )
    pf.push_back ( ty );
 
  int ans=0,n=pf.size();
  for ( int set = 0;set < (1<<n);set ++ )
    {
      int oc = 0;
      LL div=1;
      for ( int i=0;i<n;i++ )
	if ( ( set >> i ) & 1 ) 
	  {
	    div *= pf[i];
	    oc ++;
	  }
      if ( oc & 1 ) // odd
	ans -= x/div;
      else ans += x/div;
    }
  return ans;
}

int main() {
  int x1,x2,y,t;
  for ( scanf("%d",&t);t;t-- ) 
    {
      scanf("%d %d %d",&y,&x1,&x2 );
      y = abs ( y );
      int ans;
      if ( y == 0 ) 
	{
	  assert(0);
	}
      else if ( y == 1 ) 
	{
	  ans = x2 - x1 + 1;
	} 
      else if ( x1 >= 0 && x2 >= 0 ) 
	{
	  ans = f ( x2 , y ) - f( x1-1 , y );
	} 
      else if ( x1 <= 0 && x2 >= 0 )
	{
	  ans = f ( x2 , y ) + f ( -x1 , y );
	} 
      else if ( x1 <= 0 && x2 <= 0 )
	{
	  ans = f ( -x1 , y ) - f ( -x2-1 , y );
	} 
      else ans = 0;
      cout << ans << endl;
    }
  return 0;
}
