#include"stdio.h"
#include"vector"
#include"assert.h"
#include"algorithm"
using namespace std;
typedef unsigned int ui;
typedef const int& ci;
typedef const unsigned int& cui;
typedef unsigned long long ull;
#define REP(i,n) for(unsigned int i=0;i<n;i++)
#define LOOP(i,x,n) for(int i=x;i<n;i++)
#define i(x) scanf("%d",&x)
#define u(x) scanf("%u",&x)
struct subArray{	ui start,len;	};
ui ans[250000],inp[100001],k;
void print(const vector<subArray>& a,const vector<subArray>& b,cui sofar){
	bool same=(sofar==0)?1:0;
	for(typeof(a.begin()) it1=a.begin(),it2=b.begin();it1 != a.end();it1++,it2++)
		for(ui first=it1->start,upper=it1->len+first,upper2=it2->len+it2->start;first<upper;first++)
			for(ui second=same?(first+1):it2->start;second<upper2;second++)
				ans[--k]=inp[first]^inp[second] 				/*,printf("%u^%u = %u \n",first,second,ans[k])*/;
}
ui search(const subArray& a,ci pos){
	ui upper=a.start+a.len,lower=a.start;
	while(upper>lower){
		const ui mid= (upper+lower)>>1;
		if((inp[mid]>>pos)&1)upper=mid; else lower=mid+1;
	}
	return lower;
}
void solve(ci pos,const vector<subArray>& a,const vector<subArray>& b,cui sofar){
	if(pos<0){
		while(k)ans[--k]=sofar;
		return;
	}
	vector<subArray> _0a,_0b,_1a,_1b;
	ull ct=0;
	for(typeof(a.begin()) it1=a.begin(),it2=b.begin();it1!=a.end();it1++,it2++){
		int i=search(*it1,pos),j=i;
		if(sofar)j=search(*it2,pos);
//  		printf("partition [%u,%u) = [%u,%d) U [%d,%u)\n",it1->start,it1->len+it1->start,it1->start,i,i,it1->len+it1->start);
//  		printf("partition [%u,%u) = [%u,%d) U [%d,%u)\n",it2->start,it2->len+it2->start,it2->start,j,j,it2->len+it2->start);
		subArray __0,__1,_1_,_0_;
		_0_.start=it1->start,	_0_.len=i-         _0_.start;
		_1_.start=i,			_1_.len=it1->len-  _0_.len;
		__0.start=it2->start,	__0.len=j-         __0.start,
		__1.start=j,			__1.len=it2->len-  __0.len;
		if(_0_.len&&__0.len)				_0a.push_back(_0_),		_0b.push_back(__0);
		if(_1_.len&&__1.len)				_0a.push_back(_1_),		_0b.push_back(__1);
		if(_0_.len&&__1.len)				_1a.push_back(_0_),		_1b.push_back(__1);
		if(sofar){
			if(_1_.len&&__0.len)			_1a.push_back(_1_),		_1b.push_back(__0);
			ct+=_0_.len*(ull)(__0.len)+_1_.len*(ull)(__1.len);
		}
		else ct+=(_0_.len*(_0_.len-1ULL)+_1_.len*(_1_.len-1ULL))>>1;
	}
//  	printf("pos=%d sofar=%u ct=%Lu k=%u\n",pos,sofar,ct,k);
	if(ct<=k){
		print(_0a,_0b,sofar);
		if(k)	solve(pos-1,_1a,_1b,sofar|(1<<pos));
	}
	else 		solve(pos-1,_0a,_0b,sofar);
}
int main(){
	ui n,k0;
	u(n),u(k);
	k0=k;
	REP(i,n)u(inp[i]);
	sort(inp,inp+n);
	inp[n]=-1;
	vector<subArray> a,b;
	subArray x;
	x.start=0,x.len=n;
	a.push_back(x),b.push_back(x);
	solve(31,a,b,0);
	sort(ans,ans+k0);
	REP(i,k0)printf("%u ",ans[i]);
}