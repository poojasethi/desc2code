#include <cstdio>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

const int MAXN = 1123;
map <int,int> mx, my;
set <int> sx, sy;
int v[2][MAXN], A, B, match_A[MAXN], match_B[MAXN];
vector <int> grafo[MAXN];
bool mrk[MAXN];

bool DFS(int v) {
    int tam = grafo[v].size();
    for (int i=0; i<tam; i++) {
        int w = grafo[v][i];
        if (mrk[w]) continue;
        mrk[w] = true;
        if (match_B[w] == 0 || DFS(match_B[w])) {
            match_B[w] = v;
            match_A[v] = w;
            return true;
        }
    }
    return false;
}

int MaxMatching() {
    int resp = 0;
    for (int i=1; i<=A; i++) match_A[i] = 0;
    for (int k=1; k<=B; k++) match_B[k] = 0;
    for (int i=1; i<=A; i++) {
        for (int k=1; k<=B; k++) mrk[k] = false;
        if (DFS(i)) resp++;
    }
    return resp;
}

int main() {
    int T;
    scanf("%d",&T);
    while (T--) {
        mx.clear(); sx.clear();
        my.clear(); sy.clear();
        int N;
        scanf("%d",&N);
        for (int i=1; i<=N; i++) {
            scanf("%d %d",&v[0][i],&v[1][i]);
            sx.insert(v[0][i]);
            sy.insert(v[1][i]);
        }
        A = 0; B = 0;
        for (set<int>::iterator it=sx.begin(); it!=sx.end(); it++) {
            mx[*it] = ++A;
            grafo[A].clear();
        }
        for (set<int>::iterator it=sy.begin(); it!=sy.end(); it++) {
            my[*it] = ++B;
            grafo[B].clear();
        }
        for (int i=1; i<=N; i++) {
            v[0][i] = mx[v[0][i]];
            v[1][i] = my[v[1][i]];
            grafo[v[0][i]].push_back(v[1][i]);
        }
        printf("%d\n",MaxMatching());
    }
    return 0;
}
