#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define pip pair<int,pii>
#define ll long long

const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool* isPrime;
void generatePrimeSieve(const int lim)
{
  isPrime=(bool *)malloc(lim+1);
  memset(isPrime,true,lim+1);
  isPrime[0]=false;
  isPrime[1]=false;
  for(int i=2;i<=lim;++i)
    if(isPrime[i])
      for(int j=i+i;j<=lim;j+=i)
        isPrime[j]=false;
}
#define matrix vector<vector<int> >
matrix identityMatrix;
matrix mul(const matrix &a,const matrix &b)
{
  int n=a.size();
  matrix ans(n,vector<int> (n) );
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j < n; ++j)
    {
      for (int k = 0; k < n; ++k)
      {
        ans[i][j]+= ((long long)a[i][k]*b[k][j])%mod;
        ans[i][j]%=mod;
      }
    }
  }
  return ans;
} 
matrix pwr(const matrix &a,long long n)
{
    if(n==0)
    {
      /*define identity */
      assert(false);
      return identityMatrix;
    }
    if(n==1)
     return a;
    matrix tmp=pwr(a,n/2);
    tmp=mul(tmp,tmp);
    if(n&1)
      tmp=mul(a,tmp);
    return tmp;
}

vector<int> nbrs[10000];
int match[10000];
bool visited[10000];
bool dfs(int u)
{
  for (int i = 0; i < nbrs[u].size(); ++i)
  {

      int v=nbrs[u][i];
      if(visited[v])
        continue;

      visited[v]=true;
      if(match[v]==-1 || dfs(match[v]))
      {
        match[v]=u;
        return true;
      }  
  }


  return false;
}
int main()
{
  std::ios::sync_with_stdio(false);
  
  int t;
  cin>>t;
  while(t--)
  {
    int  n;
    cin>>n;
    map<int,int> xM,yM;

    while(n--)
    {

      int x,y;
      cin>>x>>y;

      if(xM.find(x)==xM.end())
      {
        int ID=xM.size();
        nbrs[ID].clear();
        xM[x]=ID;

      }
      if(yM.find(y)==yM.end())
      {
        int ID=yM.size();

        yM[y]=yM.size();
      }
      
      x=xM[x];
      y=yM[y];
      nbrs[x].push_back(y);
    }
    int ans=0;

    n=xM.size();
    
    memset(visited,false,sizeof visited);
    memset(match,-1,sizeof match);
    
    for(int i=0;i<n;++i)
    {

      if(dfs(i))
          {
            ++ans;
            memset(visited,false,sizeof visited);
          }
    }

    cout<<ans<<endl;

  }
  





  
}