#include <cstdio>
#include <cmath>
#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
#include <map>
#include <cassert>
#include <string>
#include <cstring>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define S(x) scanf("%d",&x)
#define P(x) printf("%d\n",x)

typedef long long int LL;

struct node {int val,idx,new_val;};

bool _val(node a,node b) {
	return a.val < b.val;
}

bool _idx(node a,node b) {
	return a.idx < b.idx;
}

node X[1000];
node Y[1000];
vector<int > g[1001];
int matchedWith[1001];
int N;
int vis[1001];

bool match(int n) {

	rep(i,0,g[n].size()) if(!vis[g[n][i]]) {
		int x = g[n][i];
		vis[x] = 1;
		if(!matchedWith[x] ||  match(matchedWith[x])) {
			matchedWith[x] = n;
			return true;
		}
	}
	return false;
}

int maxMatch() {
	memset(matchedWith, 0, sizeof(matchedWith));
	int res = 0;
	rep(i,1,N+1) {
		memset(vis,0,sizeof(vis));
		if(match(i)) res++;
	}
	return res;
}


int G[1001][1001];
int Used[1001];

bool BPM(int u) {
	rep(i,0,N) if(G[u][i] && !vis[i]) {
		if(Used[i] == -1) {
			Used[i] = u;
			vis[i] = 1;
			return true;
		} else if(!vis[i] ){
			vis[i] = 1;
			if(BPM(Used[i])) {
				Used[i] = u;
				return true;
			}
		}
	}
	return false;
}

int BMM() {
	int res = 0;
	memset(Used, -1, sizeof(Used));

	rep(i,0,N) {
		memset(vis, 0, sizeof(vis));
		if(BPM(i)) res++;
	}
	return res;
}


int main() {
	int tc;
	S(tc);
	while(tc--) {
		int n;
		scanf("%d",&n);
		rep(i,0,n) {
			int x,y;
			scanf("%d%d",&x,&y);
			X[i].val = x;
			X[i].idx = i;
			Y[i].val = y;
			Y[i].idx = i;
		}

		sort(X,X+n,_val);
		int cnt = 0;
		X[0].new_val = 0;
		rep(i,1,n) {
			if(X[i].val != X[i-1].val ) cnt++;
			X[i].new_val = cnt;
		}
		sort(X,X+n,_idx);

		sort(Y,Y+n,_val);
		cnt = 0;
		Y[0].new_val = 0;
		rep(i,1,n) {
			if(Y[i].val != Y[i-1].val ) cnt++;
			Y[i].new_val = cnt;
		}
		sort(Y,Y+n,_idx);
		rep(i,0,n+1) g[i].clear();
		rep(i,0,n) rep(j,0,n) G[i][j] = 0;
		rep(i,0,n) {
			g[X[i].new_val].push_back(Y[i].new_val);
			G[X[i].new_val][Y[i].new_val] = 1;
		}

		N = n;
		printf("%d\n",BMM());
	}
	return 0;
}