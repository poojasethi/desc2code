// Author : Abhisar Singhal
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>   
#include <map>
#include <string>  
#include <climits> 
#include <set>
#include <string>    
#include <sstream>
#include <utility>   
#include <ctime>
#include <cassert>
#include <fstream>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef pair<int, int> II;
typedef vector<long long> VLL;
typedef vector<bool> VB;

#define SZ(A) ((int)A.size())
#define LEN(A) ((int)A.length())
#define MS(A) memset(A, 0, sizeof(A))
#define MSV(A,a) memset(A, a, sizeof(A))
#define MAX(a,b) ((a >= b) ? (a) : (b))
#define MIN(a,b) ((a >= b) ? (b) : (a))
#define ABS(a) (((a) > 0) ? (a) : (-a))
#define MP make_pair
#define X first
#define Y second
#define PB push_back
#define FOUND(A, x) (A.find(x) != A.end())
#define getcx getchar_unlocked
#define INF (int(1e9))
#define INFL (LL(1e18))
#define EPS 1e-12

#define chkbit(s, b) (s & (1<<b))
#define setbit(s, b) (s |= (1<<b))
#define clrbit(s, b) (s &= ~(1<<b))

#define REP(i, n) for(int i = 0; i < (n); i++)
#define FOR(i, a, n) for(int i = a; i < n; i++)
#define REV(i, a, n) for(int i = a; i > n; i--)
#define FORALL(itr, c) for(itr = (c).begin(); itr != (c).end(); itr++)
#define ALL(A) A.begin(), A.end()
#define LLA(A) A.rbegin(), A.rend()
//int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
//int dx[] = {1, 1, 1, 0, 0, -1, -1, -1}, dy[] = {1, 0, -1, 1, -1, 1, 0, -1};
inline void inp( int &n ) {
        n=0; int ch = getcx(); int sign = 1;
        while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
        while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
		n = n * sign;
}

/*
const int MAXN = 5009; 

struct Edge {
	int a, b, cap, flow;
};

int V, source, target, p[MAXN];
bool visited[MAXN];
vector<Edge> edges;
vector<int> G[MAXN];

void init(int x) {
	edges.clear();
	for(int i=0; i<x; i++) G[i].clear();
}

void addEdge (int a, int b, int cap) {
	Edge e1 = { a, b, cap, 0 };
	Edge e2 = { b, a, 0, 0 };
	G[a].push_back((int) edges.size());
	edges.push_back(e1);
	G[b].push_back((int) edges.size());
	edges.push_back(e2);
}

bool bfs() {
	queue<int> Q;
	memset(visited, 0, V * sizeof(bool));
	p[source] = -1;
	visited[source] = 1;
	Q.push(0);
	while (!Q.empty() && !visited[target]) {
		int v = Q.front(); Q.pop();
		for (int i=0; i<SZ(G[v]); i++) {
			int id = G[v][i],
				to = edges[id].b;
			if (!visited[to]  && edges[id].flow < edges[id].cap) {
				Q.push(to);
				p[to] = id;
				visited[to] = 1;
			}
		}
	}
	if(!visited[target]) return 0;
	int mn = INF, cn = target;
	while(cn != source){
		mn = min(mn, edges[p[cn]].cap - edges[p[cn]].flow);
		cn = edges[p[cn]].a;
	}
	cn = target;
	while(cn != source){
		edges[p[cn]].flow += mn;
		edges[p[cn]^1].flow -= mn;
		cn = edges[p[cn]].a;
	}
	return mn;
}

LL get_max_flow() {
	LL flow = 0, c;
	for (;;) {
		if (!(c = bfs()))  break;
		flow += c;
	}
	return flow;
}

*/


const int MAXN = 5009; 

struct Edge {
	int a, b, cap, flow;
};

int V, source, target, d[MAXN], ptr[MAXN], q[MAXN];
vector<Edge> edges;
vector<int> G[MAXN];

void init(int v) {
	edges.clear();
	V = v;
	for(int i=0; i<V; i++) G[i].clear();
}

void addEdge (int a, int b, int cap) {
	Edge e1 = { a, b, cap, 0 };
	Edge e2 = { b, a, 0, 0 };
	G[a].push_back((int) edges.size());
	edges.push_back(e1);
	G[b].push_back((int) edges.size());
	edges.push_back(e2);
}

bool bfs() {
	queue<int> Q;
	memset (d, -1, V * sizeof d[0]);
	d[source] = 0;
	Q.push(0);
	while (!Q.empty() && d[target] == -1) {
		int v = Q.front(); Q.pop();
		for (int i=0; i<SZ(G[v]); i++) {
			int id = G[v][i],
				to = edges[id].b;
			if (d[to] == -1 && edges[id].flow < edges[id].cap) {
				Q.push(to);
				d[to] = d[v] + 1;
			}
		}
	}
	return d[target] != -1;
}

int dfs (int v, int flow) {
	if (!flow)  return 0;
	if (v == target)  return flow;
	for (; ptr[v]<SZ(G[v]); ptr[v]++) {
		int id = G[v][ptr[v]],
			to = edges[id].b;
		if (d[to] != d[v] + 1)  continue;
		int pushed = dfs (to, min (flow, edges[id].cap - edges[id].flow));
		if (pushed) {
			edges[id].flow += pushed;
			edges[id^1].flow -= pushed;
			return pushed;
		}
	}
	return 0;
}

// take INF to be greater than edge capacities for this to work

LL get_max_flow() {
	LL flow = 0;
	for (;;) {
		if (!bfs())  break;
		memset (ptr, 0, V * sizeof ptr[0]);
		while (LL pushed = dfs (source, INF))
			flow += pushed;
	}
	return flow;
}


int X[1009];
int Y[1009];

int main() {
	int tc;
	inp(tc);
	while(tc--){
		int n; inp(n);
		set<int> s1, s2;
		REP(i,n){
			inp(X[i]), inp(Y[i]);
			s1.insert(X[i]);
			s2.insert(Y[i]);
		}
		vector<int> S1(s1.begin(), s1.end());
		vector<int> S2(s2.begin(), s2.end());
		int maxx = 0, maxy = 0;
		REP(i,n){
			X[i] = lower_bound(S1.begin(), S1.end(), X[i]) - S1.begin();
			Y[i] = lower_bound(S2.begin(), S2.end(), Y[i]) - S2.begin();
			maxx = MAX(maxx, X[i]);
			maxy = MAX(maxy, Y[i]);
		}
		maxx++, maxy++;
	//	assert(maxx < 2000 && maxy < 2000);
		init(2 + maxx + maxy);
		FOR(i, 1, maxx+1) addEdge(0, i, 1);
		FOR(i, 1, maxy+1) addEdge(maxx+i, maxx + maxy + 1, 1);
	//	cout << maxx << " " << maxy << " " << endl;
		REP(i,n){
			addEdge(X[i]+1, Y[i]+1+maxx, 1);
		//	cout << X[i]+1 << " " << Y[i]+maxx+1 << " " << endl;
		}
		source = 0, target = maxx + maxy + 1;
		int ans = get_max_flow();
		printf("%d\n",ans);
	}
	return 0;
}


