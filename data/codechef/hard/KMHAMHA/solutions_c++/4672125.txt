//
// time complexity -> O(ne) e -> no of edges

#include<iostream>
#include<vector>
#include<algorithm>
#include<cstring>
#include<set>
using namespace std ;
int g[1005][1005] , n  , m  , assjob[1005] ,  nr[1005] , nc[1005];
long long r[1005] , c[1005] , cr[1005] , cc[1005] ;
int asign( int  s , int mar[] )
{
    for ( int i = 0 ; i < m ; i++)
    {
        if ( ( g[s][i] == 1 ) && ( mar[i] == 0 ) )
        {
          mar[i] = 1 ;
          if ( ( assjob[i] < 0 ) || ( asign(assjob[i] , mar ) ) )
            {
                assjob[i] = s ;
                return 1 ;
            }
        }
    }
    return 0 ;

}

int fima()
{
    int y = 0 ;
    int mar[m] ;
for ( int  i = 0 ; i < n ; i++ )
{
    memset ( mar , 0 , sizeof(mar)) ;
    if ( asign (i , mar ) ==  1 )
    {
        y++ ;
    }


}
    return y ;
}

int main()
{
    int t , q , u , v  , ans ;
    cin >> t ;
    while ( t-- )
    {

        set< long long  > a1 , b1 ;
        cin >> q ;
        for ( int i = 0 ; i < q ; i++)
        {
            cin >> u >> v ;
            u-- ;
            v-- ;
            r[i] = u ;
            c[i] = v ;
            a1.insert(u);
            b1.insert(v) ;
            //cc[i] = v ;
          //  g[u][v] = 1 ;

        }
        int i = 0 ;
        int s1 = 0 ;
        int s2 = 0 ;
        set<long long >::iterator it = a1.begin() ;
for ( ;  it != a1.end() ; it++)
{
    cr[i++] = *it ;
}
s1 = i ;
i = 0 ;
for ( set < long long > :: iterator it1= b1.begin() ; it1 != b1.end() ; it1++)
{
    cc[i++] = *it1 ;
}
s2 = i ;
       // sort( cr , cr + q ) ;
        //sort( cc , cc + q ) ;
        //cin >> n >> m ;
        for ( int i = 0 ;  i < q ; i++)
        {
            long long  *p = lower_bound(cr , cr + s1 , r[i]) ;
            nr[i] = p - cr  ;
           // cout << " nr is " << nr[i] << endl ;
        }
        for ( int i = 0 ;  i < q ; i++)
        {
            long long  *hj = lower_bound(cc , cc + s2 , c[i]) ;
            nc[i] = hj - cc ;
            //cout << " nc is " << nc[i] << endl ;
        }

        ans = 0 ;
        n = q ;
        m = q ;
        memset ( assjob , -1 , sizeof(assjob)) ;
        for ( int i = 0 ; i <= 1000 ; i++)
        {
            for ( int j = 0 ; j <= 1000 ; j++)
                g[i][j] = 0 ;
        }
        for ( int i = 0 ; i < q ; i++)
        {
         g[nr[i]][nc[i]] = 1 ;
        }

            ans = fima ();
            cout << ans << endl ;

    }
   return 0 ;
}

