#include<iostream>
#include<map>
#include<algorithm>
#include<vector>
#include<list>
#include<queue>
using namespace std;

#define inf 1000000000
int mark1[10007],mark2[10007];
bool func2(int n,vector<int>*adj)
{
queue<int>q;
for(int i=1;i<=n;i++)
if(!mark1[i])
{
mark2[i]=0;
q.push(i);
}
else
mark2[i]=inf;
mark2[0]=inf;
while(!q.empty())
{
int temp=q.front();
q.pop();
if(temp)
for(int i=0;i<adj[temp].size();i++)
if(mark2[mark1[adj[temp][i]]]==inf)
{
mark2[mark1[adj[temp][i]]]=mark2[temp]+1;
q.push(mark1[adj[temp][i]]);
}
}
return (mark2[0]!=inf);
}

bool func1(int temp,int n,vector<int>*adj)
{
if(temp)
{
for(int i=0;i<adj[temp].size();i++)
if(mark2[mark1[adj[temp][i]]]==mark2[temp]+1)
if(func1(mark1[adj[temp][i]],n,adj))
{
mark1[adj[temp][i]]=temp;
mark1[temp]=adj[temp][i];
return true;
}
mark2[temp]=inf;
return false;
}
return true;
}

int func(vector<int>*adj,int n,int m)
{
int ans=0;
while(func2(n,adj))
for(int i=1;i<=n;i++)
if(mark1[i]==0&&func1(i,n,adj))
ans++;
return ans;
}

int main()
{
ios_base::sync_with_stdio(false);
int t;
cin>>t;
while(t--)
{
int n;
cin>>n;
fill(mark1,mark1+10005,0);
fill(mark2,mark2+10005,0);
int c=0,d=0;
map<int,int>x,y;
vector<int>adj1[n+2],adj2[n+2];
for(int i=1;i<=n;i++)
{
int xx,yy;
cin>>xx>>yy;
if(x.find(xx)==x.end())
x[xx]=c++;
if(y.find(yy)==y.end())
y[yy]=d++;
adj1[x[xx]+1].push_back(y[yy]+1);
}
for(int i=1;i<=c;i++)
for(int j=0;j<adj1[i].size();j++)
adj2[i].push_back(adj1[i][j]+c);
cout<<func(adj2,c,d)<<endl;
}
return 0;
}
