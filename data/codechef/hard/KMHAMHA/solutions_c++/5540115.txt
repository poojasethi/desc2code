#include<map>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;

int n1;
int n2;
vector<int> mc,mr;
vector<bool> seen;
vector< vector<int> > graph;
vector<int> lev;
bool bpm(int i)
{
	for(int j=0;j<(int)graph[i].size();++j)
	if(!seen[graph[i][j]])
	{
		seen[graph[i][j]]=1;
		if(mc[graph[i][j]]<0||bpm(mc[graph[i][j]]))
		{
			mr[i]=graph[i][j];
			mc[graph[i][j]]=i;
			return 1;
		}
	}
	return 0;
}
int match()
{
	mc.resize(n2);
	mr.resize(n1);
	for(int i=0;i<n1;++i)
		mr[i]=-1;
	for(int j=0;j<n2;++j)
		mc[j]=-1;
	int ans=0;
	vector<bool> myseen(n2,0);
	for(int i=0;i<n1;++i)
	{
		::seen=myseen;
		if(bpm(i))ans++;
	}
	return ans;
}



void doit()
{
	int n;
	map<int,int> x,y;
	int r=0,c=0;
	scanf("%d",&n);
	vector<vector<int> > arr(n,vector<int> (2,0));
	for(int i=0;i<n;++i)
	{
		int a,b;
		scanf("%d%d",&a,&b);
		arr[i][0]=a;
		arr[i][1]=b;

		if(x.find(a)==x.end())
		{
			x[a]=r++;
		}
		if(y.find(b)==y.end())
		{
			y[b]=c++;
		}
	}
	n1=r;
	n2=c;
	graph.clear();
	graph.resize(n1);
	for(int i=0;i<n;++i)
	{
		graph[x[arr[i][0]]].push_back(y[arr[i][1]]);
	}
	printf("%d\n",match());
}

int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		doit();
	}
	return 0;
}
