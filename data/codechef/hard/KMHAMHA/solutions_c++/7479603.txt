#include <bits/stdc++.h>

using namespace std;

const int maxn = 10000, NIL = 0, INF = 1000000000;

vector<int> graph[maxn];
int n, x[maxn], y[maxn], match[maxn], dist[maxn];

bool bfs() 
{
    int i, u, v, len;
    queue<int> Q;
    for(i=1; i<=n; i++){
        if(match[i]==NIL){
            dist[i] = 0;
            Q.push(i);
        }
        else dist[i] = INF;
    }
    dist[NIL] = INF;
    while(!Q.empty()) {
        u = Q.front(); Q.pop();
        if(u!=NIL) {
            len = graph[u].size();
            for(i=0; i<len; i++) {
                v = graph[u][i];
                if(dist[match[v]]==INF) {
                    dist[match[v]] = dist[u] + 1;
                    Q.push(match[v]);
                }
            }
        }
    }
    return (dist[NIL]!=INF);
}

bool dfs(int u) 
{
    int i, v, len;
    if(u!=NIL){
        len = graph[u].size();
        for(i=0; i<len; i++){
            v = graph[u][i];
            if(dist[match[v]]==dist[u]+1){
                if(dfs(match[v])){
                    match[v] = u;
                    match[u] = v;
                    return true;
                }
            }
        }
        dist[u] = INF;
        return false;
    }
    return true;
}

int hopcroft_karp()
{
	int matching = 0, i;
	for(i=0; i<=4*n; i++)
		match[i] = dist[i] = NIL;
    while(bfs())
        for(i=1; i<=n; i++)
            if(match[i]==NIL && dfs(i))
                matching++;
    return matching;
}

map<int, int> r, c;
map<int, int> :: iterator iter;

int main()
{
	//freopen("input.txt", "r", stdin);
	int t, i, j, k;
	scanf("%d", &t);
	while(t--){
		scanf("%d", &n);
		r.clear(), c.clear();
		for(i=1; i<=n; i++){
			scanf("%d%d", &x[i], &y[i]);
			graph[i].clear();
			r[x[i]] = 1;
			c[y[i]] = 1;
		}
		k = 1;
		for(iter=r.begin(); iter!=r.end(); ++iter)
			(iter->second) = k++;
		k = 1;
		for(iter=c.begin(); iter!=c.end(); ++iter)
			(iter->second) = k++;
		for(i=1; i<=n; i++)
			graph[r[x[i]]].push_back(n+c[y[i]]);
		/*for(i=0; i<=n; i++){
			for(j=0; j<graph[i].size(); j++)
				cout << graph[i][j] << " ";
			cout << "\n";
		}*/
		printf("%d\n", hopcroft_karp());
	}
	return 0;
}