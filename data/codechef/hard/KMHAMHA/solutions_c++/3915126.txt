#include <cstdlib>
#include <algorithm>
#include <vector> 
#include <iostream>
#include <fstream>
#include <malloc.h>
#include <string>
#include <string.h>
#include <cstdlib>
#include <cstdio>
#include <stdio.h>
#include <unistd.h>
#include <map>

using namespace std;

map<int,int> R, C;
vector<int> ad[1010];
int match[1010], vis[1010], stamp;

bool dfs_augment_path_exists(int u)
{
    for(int i=0; i<ad[u].size(); i++) {
        int v = ad[u][i];
        if(vis[v]==stamp)
            continue;
        vis[v] = stamp;
        if(match[v]==-1 || dfs_augment_path_exists(match[v])) {
            match[v]=u;
            return true;
        }
    }
    return false;
}


int max_matching()
{
    memset(match, -1, sizeof(match));
    memset(vis, -1, sizeof(vis));
    int max_match=0;
    for(int i=0; i<R.size(); i++) {
        stamp++;
        if(dfs_augment_path_exists(i))
            max_match++;
    }
    return max_match;
}

int main(int argc, char** argv) {
    int T;
    cin >> T;
    while(T!=0) {
        int n, x, y;
        cin >> n;
        R.clear();
        C.clear();
        stamp = 0;
        for(int i=0; i<n; i++) {
            cin >> x;
            cin >> y;
            int id;
            if(!R.count(x)) {
                id = R.size();
                R[x] = id;
                ad[R[x]].clear();
            }
            if(!C.count(y)) {
                id = C.size();
                C[y] = id;
            }
            ad[R[x]].push_back(C[y]);
        }
        cout << max_matching() << endl; 
        T--;
    }
    return 0;
}
