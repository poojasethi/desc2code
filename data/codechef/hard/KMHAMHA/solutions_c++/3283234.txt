#include <iostream>
#include <vector>
#include <map>
#include <cstring>
using namespace std;
#define MAXX 1002
#define pb push_back
vector<int>lst[MAXX];
int col_match[MAXX];
bool visited[MAXX];
bool find_match(int where)
{
        if(where==-1)
                return true;
        else {
                for(int i=0; i<lst[where].size(); ++i) {
                        int match=lst[where][i];
                        if(visited[match]==false) {
                                visited[match]=true;
                                if(find_match(col_match[match])) {
                                        col_match[match]=where;
                                        return true;
                                }
                        }
                }
        }
        return false;
}
int maxBPM(int rows,int cols)
{
        memset(col_match,-1,sizeof(col_match));
        int result=0;
        for(int i=0; i<rows; i++) {
                memset(visited,0,sizeof(visited));
                result+=find_match(i);
        }
        return result;
}
int main()
{
        int tst;
        cin>>tst;
        while(tst--) {
                int pts,row=-1,col=-1;
                cin>>pts;
                map<int,int>X,Y;
                for(int i=0; i<MAXX; i++)lst[i].clear();
                for(int i=0; i<pts; i++) {
                        int x,y;
                        cin>>x>>y;
                        if(X.find(x)==X.end())X[x]=++row;
                        if(Y.find(y)==Y.end())Y[y]=++col;
                        lst[X[x]].pb(Y[y]);
                }
                cout<<maxBPM(X.size(),Y.size())<<endl;
        }
        return 0;
}
