#include <iostream>
#include <map>
#include <vector>
#include <cstring>
#include <queue>
#include <cstdio>
using namespace std;
#define pb push_back
#define mp make_pair
#define NIL 0
#define INF 1<<28
#define MAX 30001
#define pii pair<int,int>
vector<int>G[MAX];
int match[MAX],dist[MAX],n;
bool bfs()
{
        queue<int>Q;
        for(int i=1; i<=n; i++) {
                if(match[i]==NIL) {
                        dist[i]=0;
                        Q.push(i);
                } else dist[i]=INF;
        }
        dist[NIL]=INF;
        while(!Q.empty()) {
                int u=Q.front();
                Q.pop();
                if(dist[u]<dist[NIL]){
                        for(int i=0; i<G[u].size(); i++) {
                                int v=G[u][i];
                                if(dist[match[v]]==INF) {
                                        dist[match[v]]=dist[u]+1;
                                        Q.push(match[v]);
                                }
                        }
                }
        }
        return (dist[NIL]!=INF);
}
bool dfs(int u)
{
        if(u!=NIL) {
                for(int i=0;i<G[u].size();i++) {
                        int v=G[u][i];
                        if(dist[match[v]]==dist[u]+1) {
                                if(dfs(match[v])) {
                                        match[v]=u;
                                        match[u]=v;
                                        return true;
                                }
                        }
                }
                dist[u]=INF;
                return false;
        }
        return true;
}
int hopcroft_karp()
{
        int matching=0;
        while(bfs())
                for(int i=1; i<=n; i++)
                        if(match[i]==NIL&&dfs(i))
                                matching++;
        return matching;
}
int main()
{
        int tst;
        scanf("%d",&tst);
        while(tst--) {
                memset(match,0,sizeof(match));
                memset(dist,0,sizeof(dist));
                for(int i=0; i<MAX; i++)G[i].clear();
                int p,row=0,col=0,maxi=0;
                scanf("%d",&p);
                vector<pii >vecc;
                map<int,int>X,Y;
                for(int i=0; i<p; i++) {
                        int a,b;
				scanf("%d%d",&a,&b);
                        if(X.find(a)==X.end())X[a]=++row;
                        if(Y.find(b)==Y.end())Y[b]=++col;
                        vecc.pb(mp(X[a],Y[b]));
                        maxi=max(maxi,X[a]);
                }
                n=row;
                for(int i=0; i<p; i++) {
                        pii A=vecc[i];
                        G[A.first].pb(A.second+maxi);
                }
                printf("%d\n",hopcroft_karp());
        }
        return 0;
}
