#include <bits/stdc++.h>
using namespace std;
const int N=2050;
int n,sii,dii,cap[N][N];
vector<pair<int,int> > P;
vector<int> G[N];
map<int,int> Mx,My;
int augment() {
	queue<int> Q;
	int pi[N];
	bool visit[N];
	for(int i=0;i<N;++i) pi[i]=-1,visit[i]=false;
	Q.push(sii);
	visit[sii]=true;
	bool ok=false;
	while(Q.size()) {
		int ii=Q.front();
		Q.pop();
		for(int i=0;i<G[ii].size();++i) {
			if(!visit[G[ii][i]] && cap[ii][G[ii][i]]>0) {
				Q.push(G[ii][i]);
				pi[G[ii][i]]=ii;
				visit[G[ii][i]]=true;
				if(G[ii][i]==dii) {
					ok=true;
					break;
				}
			}
		}
		if(ok) break;
	}
	if(ok) {
		int cur=dii;
		while(pi[cur]!=-1) {
			cap[pi[cur]][cur]-=1;
			cap[cur][pi[cur]]+=1;
			cur=pi[cur];
		}
		return 1;
	}
	return 0;
}
int max_flow() {
	int ret=0;
	while(true) {
		int delta=augment();
		if(!delta) break;
		ret+=delta;
	}
	return ret;
}
int main() {
	int t;
	scanf("%d",&t);
	while(t--) {
		for(int i=0;i<N;++i) {
			for(int j=0;j<N;++j) {
				cap[i][j]=0;
			}
		}
		scanf("%d",&n);
		for(int i=0;i<n;++i) {
			int ii,jj;
			scanf("%d%d",&ii,&jj);
			P.push_back(make_pair(ii,jj));
		}
		int cnt=0;
		for(int i=0;i<n;++i) {
			int ii=P[i].first;
			if(Mx.find(ii)==Mx.end()) Mx[ii]=cnt++;
		}
		for(int i=0;i<P.size();++i) {
			int jj=P[i].second;
			if(My.find(jj)==My.end()) My[jj]=cnt++;
		}
		for(int i=0;i<n;++i) {
			int ii=P[i].first;
			int jj=P[i].second;
			G[Mx[ii]].push_back(My[jj]);
			G[My[jj]].push_back(Mx[ii]);
			cap[Mx[ii]][My[jj]]=1;
		}
		sii=cnt++;
		dii=cnt++;
		for(int i=0;i<n;++i) {
			G[sii].push_back(Mx[P[i].first]);
			G[Mx[P[i].first]].push_back(sii);
			cap[sii][Mx[P[i].first]]=1;
			G[My[P[i].second]].push_back(dii);
			G[dii].push_back(My[P[i].second]);
			cap[My[P[i].second]][dii]=1;
		}
		printf("%d\n",max_flow());
		for(int i=0;i<cnt;++i) G[i].clear();
		Mx.clear(),My.clear();
		P.clear();
	}
	return 0;
}

