//ALOK SHARMA

#include <bits/stdc++.h>
using namespace std;

#define gx getchar
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define i64 long long
#define mod 1000000007
#define DBG(vari) cerr<<#vari<<" ==> "<<(vari)<<endl
#define inf 2000000000

typedef pair<i64,i64> pll;
typedef pair<int,int> PII;
void scan(int &x)
{
    register int c = gx();
    x = 0;
    for(;(c<48 || c>57);c = gx());
    for(;c>47 && c<58;c = gx())
    {
        x = (x<<1) + (x<<3) + c - 48;
    }
}
int c[2005][2005],vis[2005],dad[2005];
vector<int>r[2005];

bool bfs(int s,int t){
	memset(vis,0,sizeof vis);
	dad[0]=0;
	vis[0]=1;
	queue<int>q;
	q.push(s);
	int u,v;
	while(!q.empty()){
		u=q.front();
		if(u==t)
		return 1;
		q.pop();
		for(int i=0;i<(int)r[u].size();i++){
			v=r[u][i];
			if(vis[v]==0 && c[u][v]>0){
				vis[v]=1;
				q.push(v);
				dad[v]=u;
			}
		}
	}
	return 0;
}

int fulkerson(int s,int t){
	int f,p,max_flow=0;
	while(bfs(s,t)){
		f=INT_MAX;
		p=t;
		while(dad[p]!=p){
			f=min(f,c[dad[p]][p]);
			p=dad[p];
		}
		p=t;
		while(dad[p]!=p){
			c[dad[p]][p]-=f;
			c[p][dad[p]]+=f;
			p=dad[p];
		}
		max_flow+=f;
	}
	return max_flow;
}

int main()
{
    //freopen("aain.txt","r",stdin);
    //freopen("aaout.txt","w",stdout);
    ios_base::sync_with_stdio(0);
    int n,t,x[1005],y[1005];
    map<int,int>mx,my;
    vector<int>xx,yy;
    cin>>t;
    while(t--){
		memset(c,0,sizeof c);
		for(int i=0;i<2005;i++)
		r[i].clear();
		mx.clear();
		my.clear();
		xx.clear();
		yy.clear();
		
		cin>>n;
		for(int i=0;i<n;i++){
			cin>>x[i]>>y[i];
			xx.pb(x[i]);
			yy.pb(y[i]);
		}
		int a,b;
		for(int i=0;i<(int)xx.size();i++){
			mx.insert(mp(xx[i],i+1));
		}
		for(int i=0;i<(int)yy.size();i++){
			my.insert(mp(yy[i],i+1));
		}
		a=n;b=n;
		
		for(int i=0;i<n;i++){
			int u=mx[x[i]],v=my[y[i]]+a;
			//cout<<u<<" "<<v<<endl<<endl;
			r[u].pb(v);
			r[v].pb(u);
			c[u][v]=1;
		}
		
		for(int i=1;i<=a;i++){
			r[0].pb(i);
			r[i].pb(0);
			c[0][i]=1;
		}
		
		for(int i=1;i<=b;i++){
			int u=i+a,v=a+b+1;
			r[u].pb(v);
			r[v].pb(u);
			c[u][v]=1;
		}		
		cout<<fulkerson(0,a+b+1)<<endl;
	}  
}
