#include<iostream>
#include<vector>
#include<map>
#include<cstring> 
using namespace std;
 
bool find_aug_path(map<int,vector<int> > & graph,map<int,bool> & used,map<int,int> & matchy,int u){
	//cout<<u<<endl;
	if(used[u])
		return false;
	used[u]=true;
	for(int i=0;i<graph[u].size();i++){
		int v=graph[u][i];
		if(!matchy[v] || find_aug_path(graph,used,matchy,matchy[v])){
			matchy[v]=u; //reverse the augmenting path
			return true;
		}
	}
	return false;
}
 
 
int kuhn(map<int,vector<int> > & graph,int n2){
	int n1=graph.size();
	
	map<int,int> matchy;//matching vertex in left side for vertices in right side
	map<int,bool> used;//whether vertex in left side is part of current augmenting path or not
 
	int count=0;
	//matchy.clear();
	for(map<int,vector<int> > ::iterator it=graph.begin();it!=graph.end();it++){
		int u=it->first;
		used.clear();
		if(find_aug_path(graph,used,matchy,u))
			count++;	
			
	}
	return count;
	
}
		 
int main(){
	int t,n,u,v;
	cin>>t;
	map<int,vector<int> > graph;
	while(t--){
		cin>>n;
		graph.clear(); 
		for(int i=0;i<n;i++){
			cin>>u>>v;
			graph[u].push_back(v);
		}
		cout<<kuhn(graph,n)<<endl;
	}
	return 0;
 
}
 

