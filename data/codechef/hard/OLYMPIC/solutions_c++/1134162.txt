#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <complex>
#pragma comment(linker, "/STACK:266777216")
using namespace std;
 
#define assert(f) { if(!(f)) { fprintf(stderr,"Assertion failed: "); fprintf(stderr,#f); fprintf(stderr,"\n"); exit(1); } }
 
typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<double> VD;
typedef pair<double,double> PDD;
 
const int inf=1000000000;
const LL INF=LL(inf)*inf;
const double eps=1e-9;
const double PI=2*acos(0.0);
#define bit(n) (1<<(n))
#define bit64(n) ((LL(1))<<(n))
#define pb push_back
#define sz size()
#define mp make_pair
#define cl clear()
#define all(a) (a).begin(),(a).end()
#define fill(ar,val) memset((ar),(val),sizeof (ar))
#define MIN(a,b) {if((a)>(b)) (a)=(b);}
#define MAX(a,b) {if((a)<(b)) (a)=(b);}
#define sqr(x) ((x)*(x))
#define X first
#define Y second
 
//clock_t start=clock();
//fprintf(stderr,"time=%.3lfsec\n",0.001*(clock()-start));
 
#define MOD 1000000007
 
#define N 101010
int cnt[N];
PII a[N];
 
int fct[N];
int inv[N];
int invfct[N];
 
int powmod(int a,int n)
{
int p=1;
for(;n;)
{
if(n%2) p=LL(p)*a%MOD;
if(n/=2) a=LL(a)*a%MOD;
}
return p;
}
 
int main()
{
#ifndef ONLINE_JUDGE
freopen("4.in","r",stdin);
#endif
int n,i;
scanf("%d",&n);
for(i=0;i<n;i++)
{
int x;
scanf("%d",&x);
cnt[x]++;
}
int len=0;
for(i=1;i<N;i++)
if(cnt[i]) a[len++]=mp(i,cnt[i]);
fct[0]=fct[1]=1;
inv[1]=1;
invfct[0]=invfct[1]=1;
for(i=2;i<N;i++)
{
fct[i]=LL(i)*fct[i-1]%MOD;
inv[i]=LL(MOD-inv[MOD%i])*(MOD/i)%MOD;
invfct[i]=LL(inv[i])*invfct[i-1]%MOD;
}
map<int,int> save;
int q;
for(scanf("%d",&q);q--;)
{
int s;
scanf("%d",&s);
s=min(s,100000);
int ans=0;
if(save.count(s)) ans=save[s]; else
{
int sum=0;
int tot=1;
int half=1;
int odd=0;
for(i=0;i<len;i++)
{
int cur=(a[i].X+s-1)/s;
sum+=cur*a[i].Y;
if(cur%2) odd+=a[i].Y;
if(odd>1) half=0; else
half=LL(half)*powmod(invfct[cur/2],a[i].Y)%MOD;
tot=LL(tot)*powmod(invfct[cur],a[i].Y)%MOD;
}
tot=LL(tot)*fct[sum]%MOD;
if(half) half=LL(half)*fct[sum/2]%MOD;
ans=LL(tot+half)*inv[2]%MOD;
save[s]=ans;
}
printf("%d\n",ans);
}
return 0;
}