#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
 
const long long mod = 1000000007LL;
const long long N = 100010;
 
long long fac[N],inv[N];
 
long long pow(long long a,long long b)
{
	long long ans = 1;
	while(b) {
		if(b % 2LL) ans = ans * a % mod;
		a = a * a % mod;
		b /= 2LL;
	}
	return ans;
}
 
void init()
{
	inv[1] = fac[1] = inv[0] = fac[0] = 1LL;
	for(long long i = 2; i < N; i ++) {
		fac[i] = fac[i - 1] * i % mod;
		inv[i] = inv[i - 1] * pow(i,mod - 2) % mod;
	}
}
 
int a[N],sum[N],odd[N];
long long b[N],c[N];
 
void init(int n)
{
	memset(odd,0,sizeof(odd));
	memset(sum,0,sizeof(sum));
	fill(b,b + N,1);
	fill(c,c + N,1);
	for(int k = 1; k <= n; k ++) {
		int tmp = 1;
		for(int i = a[k]; i > 1;) {
			int j = i;
			int x = (a[k] + i - 2) / (i - 1);
			i = (a[k] + x - 1) / x;
			sum[j] += (tmp - x);
			odd[j] += ((tmp & 1) - (x & 1));
			b[j] = b[j] * fac[x] % mod * inv[tmp] % mod;
			c[j] = c[j] * fac[x / 2] % mod * inv[tmp /2] % mod;
			tmp = x;
		}
		sum[1] += a[k];
		odd[1] += a[k] % 2;
		b[1] = b[1] * inv[tmp] % mod;
		c[1] = c[1] * inv[tmp / 2] % mod;
 
	}
	for(int i = 2; i < N; i ++) {
		b[i] = b[i - 1] * b[i] % mod;
		c[i] = c[i - 1] * c[i] % mod;
		sum[i] += sum[i - 1];
		odd[i] += odd[i - 1];
	}
}
 
long long solve(int n)
{
	long long ans = fac[sum[n]] * b[n] % mod;
	long long tmp = 0;
	if(odd[n] <= 1) tmp = fac[sum[n]/2] * c[n] % mod;
        return (ans + tmp) * inv[2] % mod;
}
 
int main()
{
	init();
	int n,x,maxn;
	while(scanf("%d",&n) != EOF) {
		maxn = 1;
		for(int i = 1; i <= n; i ++) {
			scanf("%d",&a[i]);
			maxn = max(maxn,a[i]);
		}
		init(n);
		scanf("%d",&n);
		while(n --) {
			scanf("%d",&x);
			printf("%lld\n",solve(min(x,maxn)));
		}
	}
	return 0;
}