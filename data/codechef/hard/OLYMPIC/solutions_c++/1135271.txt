#include <stdio.h>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <cmath>
#include <sstream>
#include <cstring>

#define pb push_back
#define mp make_pair
#define PI 3.14159265358979
#define sqr(x) (x)*(x)
#define forn(i, n) for(int i = 0; i < n; ++i)
#define ALL(x) x.begin(), x.end()
#define sz(x) int((x).size())
#define X first
#define Y second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
using namespace std;
typedef pair<int,int> pii;
const int INF = 2147483647;
const ll LLINF = 9223372036854775807LL;
const int maxn = 100010;
int a[maxn] = {};
int val[maxn] = {};
int cnt[maxn] = {};
int rev[maxn] = {};
int fact[maxn] = {};
const int MAXPOW = 2;
int rfact[MAXPOW][maxn] = {};
int pw[maxn] = {};
int b[maxn];
int KK = 0;
const int mod = 1000000007;
int pow(int x, int n) {
	int res = 1;
	while (n) {
		if (n&1) res = res*ll(x)%mod;
		x = x*ll(x)%mod;
		n>>=1;
	}
	return res;
}
/*int pow(int x, int n) {
	if (n == 0) return 1;
	if (n&1) return ll(x)*pow(x,n-1)%mod;
	else {
		ll t = ll(pow(x,n>>1));
		return t*t%mod;
	}
}*/
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif
	int n; scanf("%d", &n);
	for (int i = 0; i < n; ++i) scanf("%d", &a[i]);
	sort(a,a+n);
	int cc = 0;
	for (int i = 0; i < n; ++i) {
		cc++;
		if (i == n-1 || a[i] != a[i+1]) {
			val[KK] = a[i];
			cnt[KK++] = cc;
			cc = 0;
		}
	}
	for (int i = 1; i < maxn; ++i) rev[i] = pow(i,mod-2);
	fact[0] = 1;
	rfact[1][0] = 1;
	for (int i = 1; i < maxn; ++i) fact[i] = fact[i-1]*ll(i)%mod;
	for (int i = 1; i < maxn; ++i) rfact[1][i] = rfact[1][i-1]*ll(rev[i])%mod;
	for (int pw = 2; pw < MAXPOW; ++pw) {
		for (int i = 0; i < maxn; ++i) 
			rfact[pw][i] = ll(rfact[pw-1][i])*rfact[1][i]%mod;
	}
	map<int,int> cache;
	int T; scanf("%d", &T);
	while (T--) {
		int s; scanf("%d", &s);
		int ans;
		if (cache.count(s)) ans = cache[s];
		else {
			for (int i = 0; i < KK; ++i) b[i] = (val[i]+s-1)/s;
			int full = 0;
			int badcnt = 0;
			for (int i = 0; i < KK; ++i) {
				full += b[i]*cnt[i];
				if (b[i]&1) badcnt += cnt[i];
			}
			int tt = 0;
			if (badcnt <= 1) {
				tt = fact[full>>1];
				for (int i = 0; i < KK; ++i) {

					int v;
					if (cnt[i] >= MAXPOW) v = pow(rfact[1][b[i]>>1],cnt[i]);
					else v = rfact[cnt[i]][b[i]>>1];
					tt = ll(tt)*v%mod;
				}
			}
			ans = fact[full];
			for (int i = 0; i < KK; ++i) {
				int v;
				if (cnt[i] >= MAXPOW) v = pow(rfact[1][b[i]],cnt[i]);
				else v = rfact[cnt[i]][b[i]];
				ans = ll(ans)*v%mod;
			}
			
			ans = (ans+tt)%mod;
			ans = ll(ans)*rev[2]%mod;
			cache[s] = ans;
		}
		printf("%d\n", ans);
	}
	return 0;
}