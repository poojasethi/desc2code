//Coder: Balajiganapathi
#define TRACE
#define DEBUG

#include <algorithm>
#include <bitset>
#include <deque>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pi;
typedef vector<string> vs;

// Basic macros
#define st          first
#define se          second
#define all(x)      (x).begin(), (x).end()
#define ini(a, v)   memset(a, v, sizeof(a))
#define re(i,s,n)  	for(int i=s;i<(n);++i)
#define rep(i,s,n)  for(int i=s;i<=(n);++i)
#define fr(i,n)     re(i,0,n)
#define repv(i,f,t) for(int i = f; i >= t; --i)
#define rev(i,f,t)  repv(i,f - 1,t)
#define frv(i,n)    rev(i,n,0)
#define pu          push_back
#define mp          make_pair
#define sz(x)       (int)(x.size())

const int oo = 2000000009;
const double eps = 1e-9;

#ifdef TRACE
    #define trace1(x)                cerr << #x << ": " << x << endl;
    #define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
    #define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
    #define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
    #define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
    #define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

    #define trace1(x)
    #define trace2(x, y)
    #define trace3(x, y, z)
    #define trace4(a, b, c, d)
    #define trace5(a, b, c, d, e)
    #define trace6(a, b, c, d, e, f)

#endif

const int mx = 100005, log_mx = 20;
int n, m;
int rmq[mx][log_mx], a[mx], len[mx];
int b[mx];

void build_rmq() {
    fr(i, n) rmq[i][0] = b[i];
    re(k, 1, log_mx) fr(i, n) {
        rmq[i][k] = rmq[i][k - 1];
        if(i + (1 << (k - 1)) < n) rmq[i][k] = max(rmq[i][k], rmq[i + (1 << (k - 1))][k - 1]);
    }

    len[0] = 0;
    re(i, 1, mx) {
        len[i] = len[i - 1];
        if((1 << (len[i] + 1)) <= i) ++len[i];
    }
}

int get_max(int i, int j) {
    int k = (j - i + 1);
    k = len[k];
    return max(rmq[i][k], rmq[j - (1 << k) + 1][k]);
}

int get(int i, int j) {
    if(i == j) return 0;
    return get_max(i + 1, j);
}

int main() {
    scanf("%d", &n);
    fr(i, n) scanf("%d", a + i);
    fr(i, n - 1) b[i + 1] = a[i + 1] - a[i];
    build_rmq();

    scanf("%d", &m);
    while(m--) {
        int t, d;
        scanf("%d %d", &t, &d);
        int r = upper_bound(a, a + n, t) - a - 1;
        int lo = 0, hi = r;
        while(lo < hi) {
            int m = (lo + hi) / 2;
            if(get(m, r) <= d) hi = m;
            else lo = m + 1;
        }
        printf("%d\n", lo + 1);
    }
    
	return 0;
}
