#include <bits/stdc++.h>
using namespace std;

const int N = 100010;
int c[N];

struct tree
{
    int lt,rt,mx,mix;
}a[N * 4];

void init(int lt,int rt,int step)
{
    a[step].lt = lt;
    a[step].rt = rt;
    if(lt == rt) {
        a[step].mx = a[step].mix = c[lt];
        return;
    }
    int mid = (lt + rt) >> 1;
    init(lt,mid,2 * step);
    init(mid + 1,rt,2 * step + 1);
    a[step].mx = max(a[2 * step].mx,a[2 * step + 1].mx);
    a[step].mix = min(a[2 * step].mix,a[2 * step + 1].mix);
}

int query(int pos,int step,int val)
{
    if(a[step].mix > val) return -1;
    if(a[step].mx <= val) return a[step].lt;
    if(a[step].lt == a[step].rt) {
        if(a[step].mx > val) return -1;
        return pos;
    }
    if(pos <= a[2 * step].rt) return query(pos,2 * step,val);
    int x = query(pos,2 * step + 1,val);
    if(x != a[2 * step + 1].lt) return x;
    int y = query(a[2 * step].rt,2 * step,val);
    if(y != -1) return y;
    return x;
}

int b[N];

int main()
{
    int n,m,x,y;
while(scanf("%d",&n) != EOF) {
    for(int i = 1; i <= n; i ++) scanf("%d",&b[i]);
    for(int i = 1; i + 1 <= n; i ++) c[i] = b[i + 1] - b[i];
    if(n > 1) init(1,n - 1,1);
    scanf("%d",&m);
    while(m --) {
        scanf("%d%d",&x,&y);
        int lt = 1,rt = n,mid,pos = -1;
        while(lt <= rt) {
            mid = (lt + rt) >> 1;
            if(b[mid] <= x) pos = mid,lt = mid + 1;
            else rt = mid - 1;
        }
        int ans = pos;
        if(pos > 1) {
            x = query(pos - 1,1,y);
            if(x != -1) ans = x;
        }
        printf("%d\n",ans);
    }
}
    return 0;
}
    
    
    
