#include <bits/stdc++.h>
#define MAX 100005
using namespace std;

int A[MAX];
int D[MAX];
pair <int,int> tree[4*MAX];

pair <int,int> combine(pair <int,int> p1, pair <int,int> p2)
{
    if ( p1.first >= p2.first ) return p1;
    return p2;
}

void build(int where, int left, int right)
{
    if ( left > right ) return;
    if ( left == right ) {
        tree[where].first = D[left];
        tree[where].second = left;
        return;
    }
    int mid = (left+right)/2;
    build(where*2, left, mid);
    build(where*2+1, mid+1, right);
    tree[where] = combine(tree[where*2], tree[where*2+1]);
}

pair <int,int> query(int where, int left, int right, int i, int j)
{
    if ( left > right || left > j || right < i ) return make_pair(-1,-1);
    if ( left >= i && right <= j ) return tree[where];
    int mid = (left+right)/2;
    return combine(query(where*2, left, mid, i, j), query(where*2+1, mid+1, right, i, j));
}

int main()
{
    int n,m,t,d;
    cin >> n;
    for ( int i = 1; i <= n; i++ ) cin >> A[i];
    for ( int i = 1; i <= n-1; i++ ) D[i] = A[i+1] - A[i];
    build(1,1,n-1);
    cin >> m;
    while ( m-- ) {
        cin >> t >> d;
        int idx = upper_bound(A+1, A+n+1, t) - A;
        idx -= 2;
        int ans = 1;
        while ( ans <= idx ) {
            pair <int,int> val = query(1,1,n-1,ans,idx);
            if ( val.first <= d ) break;
            ans = val.second+1;
        }
        cout << ans << endl;
    }
    return 0;
}
