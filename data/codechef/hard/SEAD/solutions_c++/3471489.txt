#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <set>
#include <map>
#include <cmath>
#include <vector>
#include <cstring>
#include <utility>
#include <stack>
#include <cstdio>
#include <string>
#include <numeric>
#include <functional>
#include <cfloat>
#include <cassert>


#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define ll long long
#define ull unsigned long long

ll mod = (ll)1e9+7;
using namespace std;

ll modp(ll a,ll b)
{
	if(b==0) return 1;
	if(b==1) return a%mod;
	ll c= modp(a,b/2);
	c*=c;
	c%=mod;
	if(b%2) c*=a;
	c%=mod;
	
	return c;
}
int N,M;
const int MAXN = 100500;
int a[MAXN];
int diff[MAXN];
const int MAXLG = 21;
int sparse[MAXN][MAXLG];
void init()
{
	memset(sparse,0,sizeof(sparse));
	memset(diff,0,sizeof(diff));
	for(int i=1;i<N;i++)  diff[i-1]= a[i]-a[i-1];
	for(int i = 0; i < N;i++)
	{
		sparse[i][0]=diff[i];
	}
//	cout << endl ;
	for(int i = 0;i< N;i++)
	{
	//	cout << sparse[i][0]<< " ";
	}
//	cout << endl ;
	
	for(int j=1; (1<<j)<=N;j++)
	{
		for(int i=0;i+(1<<j)-1<N;i++)
		{
			sparse[i][j] = sparse[i][j-1];
			int start = i + (1<<(j-1));
			
		    sparse[i][j] = max(sparse[i][j],sparse[start][j-1]);
			
	
			//cout << sparse[i][j] <<" ";
		}
		//cout << endl;
	}
}
int max_interval(int L,int R)
{
	
    
    int loglim = log2(R-L+1);
    
    int left =  sparse[L][loglim] ;
    
    int right = sparse[R-(1<<loglim ) +1 ][loglim];
    
    return max(left,right);	
}

int find_R(int t)
{
	int idx= lower_bound(a,a+N,t) -a;
	if(a[idx]>t) idx--;
	return idx;
	int 
	hi = N-1;
	int lo = 0;
	while(lo<=hi)
	{
		int mid= (lo+hi)/2;
//		cout << a[mid] << endl;
		if(a[mid] > t)
		{
			hi = mid - 1;
		}
		else 
		{
			if(mid  + 1 == N || a[mid + 1] > t)
			return mid;
			else
			lo = mid + 1;
		}
	}
	return -1;
}
int check(int L,int R, int d)
{ 
	if(L==R) return 1;
	//cout << L <<" left "<< R;
	//cout << max_interval(L,R-1) << endl;
	return (max_interval(L,R-1)<=d);
}
int find_L(int R,int d)
{
	int hi = R;
	int lo = 0;
	while(lo<=hi)
	{
		int mid = lo+(hi-lo)/2;
		//cout << mid << endl;
		if(!check(mid,R,d))
		{
			lo = mid + 1;
		}
		else
		{
			
			if(mid == 0 || !check(mid-1,R,d))
			{
			    return mid;
			}
			else
			{
				hi = mid -1;
			}
		}
	}
	
	return -1;
}
int main()
{
   ios_base::sync_with_stdio(0);
   
  // freopen("in1.in","r",stdin);
  cin >> N ;
  for(int i=0;i<N;i++) cin>> a[i];
  init();
  cin >> M;
  
  while(M--)
  {
	  int t,d;
	  cin >> t >> d;
	  int R = find_R(t);
	  assert(R!=-1);
	  int L = find_L(R,d);
	  //assert(L!=-1);
	  cout << L + 1 <<endl; 
  }
  
  
   return 0;
}
