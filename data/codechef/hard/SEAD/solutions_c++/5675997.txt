#include <bits/stdc++.h>
using namespace std;

#define sd(x) scanf("%d", &x)
#define N 112345

int dp[N][20], n, a[N], b[N];

inline void Pre(){
    int i, j;
    for(i = 1; i <= n; i++){
        dp[i][0] = i;
    }
    for(j = 1; (1 << j) <= n; j++){
        for(i = 1; i + (1 << j) - 1 <= n; i++){
            if(a[ dp[i][j - 1] ] > a[ dp[i + (1 << (j - 1))][j - 1] ]){
                dp[i][j] = dp[i][j - 1];
            }
            else{
                dp[i][j] = dp[i + (1 << (j - 1))][j - 1];
            }
        }
    }
    return;
}

inline int getMax(int l, int r){
    int k = (int)(log2(r - l + 1)), ans;
    if( a[ dp[l][k] ] > a[ dp[r - (1 << k) + 1][k] ] ){
        ans = a[ dp[l][k] ];
    }
    else{
        ans = a[ dp[r - (1 << k) + 1][k] ];
    }
    return ans;
}

inline int getIndex(int t){
    int l = 1, r = n, mid, ret = 0;
    while(l <= r){
        mid = l + (r - l) / 2;
        if(b[mid] <= t){
            ret = mid;
            l = mid + 1;
        }
        else{
            r = mid - 1;
        }
    }
    return ret;
}

inline int searchIndex(int l, int r, int d){
    int mid, ret = r + 1, val, y = r;
    while(l <= r){
        mid = l + (r - l) / 2;
        val = getMax(mid, y);
        if(val <= d){
            r = mid - 1;
            ret = mid;
        }
        else{
            l = mid + 1;
        }
    }
    return ret;
}

int main(){
    //freopen("input.txt", "r", stdin);
    int q, k, l, r, i, ans, d, t;
    sd(n);
    for(i = 1; i <= n; i++){
        sd( b[i] );
    }
    for(i = 1; i <= n - 1; i++){
        a[i] = b[i + 1] - b[i];
    }
    Pre();
    sd(q);
    while(q--){
        sd(t); sd(d);
        k = getIndex(t);
        ans = searchIndex(1, k - 1, d);
        printf("%d\n", ans);
    }
    return 0;
}
