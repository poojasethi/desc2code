#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <utility>
#include <functional>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;

#define rep(i,n) for(int i=0;i<n;i++)
#define forup(i,a,b) for(int i=a;i<=b;i++)
#define fordn(i,a,b) for(int i=a;i>=b;i--)
#define drep(i,n) for(i=0;i<n;i++)
#define dforup(i,a,b) for(i=a;i<=b;i++)
#define dfordn(i,a,b) for(i=a;i>=b;i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define gi(x) scanf("%d",&x)
#define pb push_back
#define mp make_pair
#define fi first
#define sc second

const int max_n = 100010;
const int logn = 18;

int n,m,t,d;
int a[max_n]; 
int b[max_n],mx[max_n][logn];
 
void init() {
	rep(i,n)
		mx[i][0]=b[i];
	for(int j=1;(1<<j)<=n;j++)
		for(int i=0;i+(1<<j)-1<n;i++)
			mx[i][j]=max(mx[i][j-1],mx[i+(1<<(j-1))][j-1]);
}
 
int rmax(int l,int r) {		//[l,r]
	if(l>r) return 0;
	int k,ne=r-l+1;
	for(k=0;(1<<k)<=ne;k++);
	k--;
	return max(mx[l][k],mx[r-(1<<k)+1][k]);
}

int main() {
	gi(n);
	rep(i,n) gi(a[i]);
	a[n]=int(1e9);
	b[0]=-1;
	forup(i,1,n)
		b[i]=a[i]-a[i-1];
	init();
	gi(m);
	rep(i,m) {
		gi(t); gi(d);
		int p=int(upper_bound(a,a+n+1,t)-a);
		int l=0,r=p;
		while((l+1)<r) {
			int mid=(l+r)/2;
			if(rmax(mid,p-1)>d) l=mid;
			else r=mid;
		}
		printf("%d\n",l+1);
	}
	return 0;
}
