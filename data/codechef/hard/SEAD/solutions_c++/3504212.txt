#include <algorithm>
#include <cstdio>
#include <iostream>

#define MAXT (1<<18)
#define INF 10000000
#define MAXN 100010

using namespace std;

class segment_tree{
private:
	int T[MAXT];
	int N;

	inline int left(int p){ return (p+1)*2-1; }
	inline int right(int p){ return (p+1)*2; }
	inline int parent(int x){ return (x+1)/2-1; }

	void tree_init(int node, int s, int e, int *A){
		if(s == e){
			T[node] = A[s];
			return;
		}

		int l,r;

		l = left(node);
		r = right(node);

		tree_init(l,s,(s+e)/2,A);
		tree_init(r,(s+e)/2+1,e,A);

		T[node] = max(T[l],T[r]);
	}

	int tree_query(int node, int s, int e, int i, int j){
		if(s > j || e < i) return -INF;
		if(s >= i && e <= j){
			return T[node];
		}

		int l,r;
		l = tree_query(left(node),s,(s+e)/2,i,j);
		r = tree_query(right(node),(s+e)/2+1,e,i,j);
		return max(l,r);
	}

public:

	void init(int *A, int n){
		N = n;
		if(n) tree_init(0,0,N-1,A);
	}

	int query(int i, int j){
		return tree_query(0,0,N-1,i,j);
	}
};

int A[MAXN];
int diff[MAXN];
int N;

segment_tree tree_arr,tree_diff;

void init(){
	int i;

	A[N+1] = INF;
	for(i = 0; i < N-1; ++i){
		diff[i] = A[i+1]-A[i];
	}

	tree_arr.init(A,N+1);
	tree_diff.init(diff,N-1);
}

int search_t(int t){
	int high,low,mid;

	low = 0, high = N;

	while(low < high){
		mid = low+(high-low)/2;

		if(tree_arr.query(low,mid) > t){
			high = mid;
		}else{
			low = mid+1;
		}
	}

	return low-1;
}

int search_d(int d, int k){
	if(!k) return k;

	int high,low,mid;

	high = k;
	low = 0;

	while(low < high){
		mid = low+(high-low)/2;
		if(tree_diff.query(mid,k-1) <= d){
			high = mid;
		}else{
			low = mid+1;
		}
	}

	return low;
}

int main(){
	int i,m,d,t,k;

	scanf("%d",&N);

	for(i = 0; i < N; ++i) scanf("%d",&A[i]);

	init();

	scanf("%d",&m);

	while(m--){
		scanf("%d%d",&t,&d);
		k = search_t(t);
		printf("%d\n",search_d(d,k)+1);
	}

	return 0;
}
