#include <bits/stdc++.h>

#define st first
#define nd second
#define mp make_pair
#define pb push_back
#define lli long long int
#define all( gg )	gg.begin(),gg.end()
#define foreach( gg,itit )	for( typeof(gg.begin()) itit=gg.begin();itit!=gg.end();itit++ )
#define FP( ii,aa,bb ) for( int ii=aa;ii<=bb;ii++ )
#define FM( ii,aa,bb ) for( int ii=aa;ii>=bb;ii-- )

#define orta (bas+son)/2
#define sol root*2,bas,orta
#define sag	root*2+1,orta+1,son

using namespace std;

int n,m,arr[200000],fark[200000],kd[800000];

int init( int root,int bas,int son ){
	if( bas==son )	return kd[root] = fark[bas];
	return kd[root] = max( init(sol),init(sag) );
}
int query( int root,int bas,int son,int x,int y ){
	if( y<bas or son<x )	return 0;
	if( x<=bas and son<=y )	return kd[root];
	return max( query( sol,x,y ),query( sag,x,y ) );
}

int main(){

	scanf("%d",&n);
	FP( i,1,n )
		scanf("%d",arr+i);
	FP( i,1,n-1 )
		fark[i] = arr[i+1]-arr[i];
	init( 1,1,n );
	scanf("%d",&m);
	int t,d,ind;
	while( m-- ){
		scanf("%d %d",&t,&d);
		ind = upper_bound( arr+1,arr+n+1,t )-arr-1;
		int bas=1,son=ind-1,ort;
		bas = min( bas,son );
		while( bas<son ){
			ort = (bas+son)/2+1;
			if( query( 1,1,n,ind-ort,ind-1 )<=d )	bas = ort;
			else	son = ort-1;
		}
		if( bas and query( 1,1,n,ind-bas,ind-1 )>d )	bas = 0;
		printf("%d\n",ind-bas);
	}

}

