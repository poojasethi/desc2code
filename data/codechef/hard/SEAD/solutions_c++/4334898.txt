#include <stdio.h>
#include <math.h>

const int N=100000;
int a[N];
int b[N];
int ti[N];
int di[N];
int segmax[N];

int findmax(int* aa, int size, int n)
{
    int high=size-1;
    int low=0;
    while(low<high)
    {
        int mid=(high+low+1)>>1;
        if(n<aa[mid])
        {
            high=mid-1;
        }
        else
        {
            low=mid;
        }
    }
    return (n<a[low]) ? -1 : low;
}

int main(int argc, char* argv[])
{
	int i,j,n,q;
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	scanf("%d",&q);
	for(i=0;i<q;i++)
	{
		scanf("%d %d",&ti[i],&di[i]);
	}
	for(i=0;i<n-1;i++)
	{
		b[i]=a[i+1]-a[i];
	}
	if(n==1)
	{
		int ans=1;
		for(i=0;i<q;i++)
		{
			printf("%d\n", ans);
		}
		return 0;
	}
	int sqrtn=sqrt(n-1);
	int seg=(n-2)/sqrtn;
	for(i=0;i<=seg;i++)
	{
		int head=i*sqrtn;
		int tail=(i==seg) ? n-1 : (i+1)*sqrtn;
		int max=0;
		for(j=head;j<tail;j++)
		{
			if(b[j]>max)
			{
				max=b[j];
			}
		}
		segmax[i]=max;
	}
	for(i=0;i<q;i++)
	{
		int t=ti[i];
		int d=di[i];
		int idx=findmax(a,n,t);
		int bpos=idx-1;
		int ans=1;
		int startseg=bpos/sqrtn;
		bool inlastseg=(startseg) ? false : true;
		for(j=bpos;j>=startseg*sqrtn;j--)
		{
			if(b[j]>d)
			{
				inlastseg=true;
				ans=j+2;
				break;
			}
		}
		if(!inlastseg)
		{
			bool inmiddleseg=false;
			int midseg=0;
			for(j=startseg-1;j>0;j--)
			{
				if(segmax[j]>d)
				{
					midseg=j;
					inmiddleseg=true;
					break;
				}
			}
			if(inmiddleseg)
			{
				int head=midseg*sqrtn;
				int tail=(midseg+1)*sqrtn-1;
				for(j=tail;j>=head;j--)
				{
					if(b[j]>d)
					{
						ans=j+2;
						break;
					}
				}
			}
			else
			{
				for(j=sqrtn-1;j>=0;j--)
				{
					if(b[j]>d)
					{
						ans=j+2;
						break;
					}
				}
			}
		}
		printf("%d\n", ans);
	}
	return 0;
}
