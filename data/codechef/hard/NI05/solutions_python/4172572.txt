

import java.io.*;
import java.util.*;

public class Main {
	static String parse = "55	60	4	25	18	10	12	8	11	50 60	45	75	23	27	20	24	7	33	12 4	75	78	32	36	30	36	6	12	65 25	23	32	15	45	40	48	5	14	23 18	27	36	45	54	50	60	4	15	12 10	20	30	40	50	60	72	3	32	34 12	24	36	48	60	72	84	2	23	34 8	7	6	5	4	3	2	1	34	123 11	33	12	14	15	32	23	34	65	48 50	12	65	23	12	34	34	123	48	71";
	static int mat[][];
	static int answers[];
	
	static int best_two(int a, int b, int c){
		if (a<=b && a<=c)
			return b+c;
		
		if (b<=a && b<=c)
			return a+c;
		
		return a+b;
	}
	
	static class permGen {
		public int A[];

		public permGen(int n) {
			A = new int[n];
			for (int i = 0; i < n; i++)
				A[i] = i;
		}

		public int[] nextPerm() {
			//Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation.
			int N = A.length;
			int k = -1;
			for (int i = 0; i < N - 1; i++) {
				if (A[i] < A[i + 1])
					k = i;
			}
			if (k == -1)
				return null;
			//Find the largest index l such that a[k] < a[l]. Since k + 1 is such an index, l is well defined and satisfies k < l
			int l = -1;
			for (int i = k + 1; i < N; i++) {
				if (A[k] < A[i])
					l = i;
			}
			//Swap a[k] with a[l].
			swap(A, k, l);

			//Reverse the sequence from a[k + 1] up to and including the final element a[n]
			int i = k + 1;
			int j = N - 1;
			while (i <= j) {
				swap(A, i, j);
				i++;
				j--;
			}
			return A;
		}

		private void swap(int A[], int i, int j) {
			int t = A[i];
			A[i] = A[j];
			A[j] = t;
		}
	}
	
	static void init(){
		mat = new int[10][10];
		StringTokenizer st = new StringTokenizer(parse);
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				mat[i][j] = Integer.parseInt(st.nextToken());
				//System.out.print(mat[i][j] + " ");
			}
			//System.out.println("");
		}
		
		answers = new int[1024];
		int temp[][] = new int[10][10];	//wastage of resource :P
		for (int i = 1; i < 1024; i++) {
			//make the appropriate matrix...
			String num = Integer.toBinaryString(i);
			int l = num.replaceAll("0", "").length();
			//System.out.println(i + " " + Integer.toBinaryString(i) +" "+ l);
			
			if (l>7)
				continue;
			
			int arr[] = new int[l];
			int p = 0;
			while (num.length() < 10){
				num = "0"+num;
			}
			
			for (int j=0; j<num.length(); j++){
				if (num.charAt(j) == '1')
					arr[p++] = j;
			}
			
			//fill the array...
			for (int j = 0; j < l; j++) {
				for (int j2 = 0; j2 < l; j2++) {
					temp[j][j2] = mat[arr[j]][arr[j2]];
					//System.out.print(temp[j][j2] +" ");
				}
				//System.out.println("");
			}
			
			//we have the array temp[][], which essentially represents weights... and we have l
			int best = -1;
			permGen perm = new permGen(l);
			do {
				//use perm.A
				int temp_sum = 0;
				for (int j = 0; j < l; j++) {
					temp_sum += temp[j][perm.A[j]];
				}
				if (temp_sum>best){
					best = temp_sum;
				}
			}while(perm.nextPerm() != null);
			
			answers[i] = best;
			
			//System.out.println(i + " " + num + " " + best);
			//System.out.println(i + " " + answers[i]);
			
		}
	}
	
	

	public static void main(String[] args) throws IOException {
		//long start = System.currentTimeMillis();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		init();
		
		int T = Integer.parseInt(br.readLine());
		while(T-->0){
			br.readLine();
			String s = br.readLine();
			//System.out.println(s);
			s = s.replaceAll(" ", "");
			int x = Integer.parseInt(s, 2);
//			if (x == 0){
//				System.out.println(0);
//				continue;
//			}
//			
//			while (x%2 == 0){
//				x/=2;
//			}
			System.out.println(answers[x]);
			
			
		}
		
		//System.out.println(System.currentTimeMillis()-start);
	}

}