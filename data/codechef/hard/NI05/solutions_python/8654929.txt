#include <stdio.h>
#include <vector>
#include <queue>
#include <assert.h>
#define MAXN 11
#define INF 0x3fffffff
using namespace std;

const int n = 10;
int nrt, uz[MAXN], cap[2 * MAXN][2 * MAXN], fx[2 * MAXN][2 * MAXN], cost[2 * MAXN][2 * MAXN];
int bk[2 * MAXN], dist[2 * MAXN], start, fin;
int costm[MAXN][MAXN] = {
    0, 0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0  , 0 ,  0 ,
    0, 55,  60,  4 ,  25,  18,  10,  12,  8  , 11,  50,
    0, 60,  45,  75,  23,  27,  20,  24,  7  , 33,  12,
    0, 4 ,  75,  78,  32,  36,  30,  36,  6  , 12,  65,
    0, 25,  23,  32,  15,  45,  40,  48,  5  , 14,  23,
    0, 18,  27,  36,  45,  54,  50,  60,  4  , 15,  12,
    0, 10,  20,  30,  40,  50,  60,  72,  3  , 32,  34,
    0, 12,  24,  36,  48,  60,  72,  84,  2  , 23,  34,
    0, 8 ,  7 ,  6 ,  5 ,  4 ,  3 ,  2 ,  1  , 34,  123,
    0, 11,  33,  12,  14,  15,  32,  23,  34 , 65,  48,
    0, 50,  12,  65,  23,  12,  34,  34,  123, 48,  71,
};
vector<int> G[2 * MAXN];

void clearThings() {
    for(int i = 0; i < 2 * MAXN; i++) G[i].clear();

    for(int i = 0; i < 2 * MAXN; i++)
        for(int j = 0; j < 2 * MAXN; j++)
            cap[i][j] = fx[i][j] = cost[i][j] = 0;
}

inline void addEdge(int x, int y, int c) {
    G[x].push_back(y);
    G[y].push_back(x);
    cap[x][y] = 1;
    cost[x][y] = c;
    cost[y][x] = -c;
}

bool BelmanFord() {
    bool uzq[2 * MAXN];

    for(int i = 0; i < 2 * MAXN; i++) {
        dist[i] = -INF;
        uzq[i] = 0;
    }

    dist[start] = 0;

    queue<int> q;
    q.push(start);
    uzq[start] = 1;

    while(!q.empty()) {
        int x = q.front();
        q.pop();
        uzq[x] = 0;

        for(auto y: G[x]) {
            if(fx[x][y] < cap[x][y] && dist[x] + cost[x][y] > dist[y]) {
                dist[y] = dist[x] + cost[x][y];
                bk[y] = x;
                if(!uzq[y]) {
                    q.push(y);
                    uzq[y] = 1;
                }
            }
        }
    }

    return dist[fin] > -INF;
}

int main() {

    scanf("%d", &nrt);

    while(nrt--) {
        clearThings();

        for(int i = 1; i <= n; i++)
            scanf("%d", &uz[i]);
        for(int i = 1; i <= n; i++)
            scanf("%d", &uz[i]);

        for(int i = 1; i <= n; i++)
            for(int j = 1; j <= n; j++)
                if(uz[i] && uz[j])
                    addEdge(i, j + n, costm[i][j]);

        start = fin = 0;
        for(int i = 1; i < MAXN; i++)
            if(!uz[i]) {
                if(start) {
                    fin = i;
                    break;
                }
                else start = i;
            }

        assert(start && fin);

        for(int i = 1; i <= n; i++)
            if(uz[i]) {
                addEdge(start, i, 0);
                addEdge(i + n, fin, 0);
            }

        while(BelmanFord()) {
            int x = fin;
            while(x != start) {
                ++fx[bk[x]][x];
                --fx[x][bk[x]];

                x = bk[x]; 
            }
        }

        int sol = 0;
        for(int i = 1; i <= n; i++)
            for(int j = 1; j <= n; j++)
                if(uz[i] && uz[j] && fx[i][j + n]) {
                    //printf("%d %d %d\n", i, j, cost[i][j + n]);
                    sol += cost[i][j + n];
                }

        printf("%d\n", sol);
    }


    return 0;
}