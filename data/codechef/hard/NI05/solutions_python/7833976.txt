//Tanuj Khattar
#include<bits/stdc++.h>

using namespace std;

typedef pair<int,int>   II;
typedef vector< II >      VII;
typedef vector<int>     VI;
typedef vector< VI > 	VVI;
typedef long long int 	LL;
typedef unsigned long long int ULL;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))
#define LET(x,a) __typeof(a) x(a)

#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
//Works for forward as well as backward iteration

#define gu getchar
#define pu putchar
#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)

#define DRT() int t; si(t); while(t--)

#define PlUSWRAP(index,n) index = (index+1)%n		//index++; if(index>=n) index=0
#define MINUSWRAP(index,n) index = (index + n -1)%n 	//index--; if(index<0) index=n-1
#define ROUNDOFFINT(d) d = (int)((double)d + 0.5)	//Round off d to nearest integer

#define FLUSHN while(gu()!='\n')
#define FLUSHS while(gu()!=' ')

#define TRACE

#ifdef TRACE
#define trace1(x)                cerr << #x << ": " << x << endl;
#define trace2(x, y)             cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z)          cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)       cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << endl;
#define trace5(a, b, c, d, e)    cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " << #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

#else

#define trace1(x)
#define trace2(x, y)
#define trace3(x, y, z)
#define trace4(a, b, c, d)
#define trace5(a, b, c, d, e)
#define trace6(a, b, c, d, e, f)

#endif

//FILE *fin = freopen("in","r",stdin);
//FILE *fout = freopen("out","w",stdout);
int P[7],Q[7];
int main()
{
	int A[10][10]={
		55 ,	60 ,	4, 	25 	,18, 	10, 	12 ,	8 ,	11, 	50,
			60, 	45 ,	75 ,	23, 	27, 	20 ,	24 ,	7 ,	33 ,	12
		,	4 ,	75 ,	78 ,	32 ,	36 ,	30 ,	36 ,	6 ,	12 ,	65
		,	25 ,	23 ,	32 ,	15 ,	45 ,	40 ,	48 ,	5 ,	14 ,	23
		,	18 ,	27 ,	36 ,	45 ,	54 ,	50 ,	60 ,	4 ,	15 ,	12
		,	10 ,	20 ,	30 ,	40 ,	50 ,	60 ,	72 ,	3 ,	32 ,	34
		,	12 ,	24 ,	36 ,	48 ,	60 ,	72 ,	84 ,	2 ,	23 ,	34
		,	8 ,	7 ,	6 ,	5 ,	4 ,	3 ,	2 ,	1 ,	34 ,	123
		,	11 ,	33 ,	12 ,	14 ,	15 ,	32 ,	23 ,	34 ,	65 ,	48
		,	50 ,	12 ,	65 ,	23 ,	12 ,	34 ,	34 ,	123, 	48 ,	71
	};
	DRT()
	{
		int len=0;
		for(int i=0;i<10;i++)
		{
			int x;
			si(x);
		}
		for(int i=0;i<10;i++)
		{
			int x;si(x);
			if(x)P[len]=Q[len]=i,len++;
		}
		int ans=0;
		do{
			int cost=0;
			for(int i=0;i<len;i++)
				cost+=A[P[i]][Q[i]];
			ans = max(ans,cost);
		}while(next_permutation(Q,Q+len));
		dout(ans);
	}
	return 0;
}
