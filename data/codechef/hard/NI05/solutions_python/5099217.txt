#include <iostream>
#include <fstream>
#include <cstdio>
#include <math.h>
#include <vector>
#include <string.h>
#include <algorithm>
#include <climits>
#include <stack>
#include <queue>
#include <set>
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a>b?b:a
#define SWAP(a,b) {int tmp=a;a=b;b=tmp;}
#define GCD(a,b)  { return (b==0)?a:GCD(b,a%b); }
#define LCM(a,b)  { return a*b/GCD(a,b);  }
#define FOR(i,n) for(i=0;i<n;i++)
#define FOR_X(i,n,x) for(i=x;i<n;i++)
#define FORN(i,n) for(i=n;i>=0;i--)
#define FORN_X(i,n,x) for(i=n;i>=x;i--)

typedef long long int lld;
using namespace std;
lld dp[1025][1025];
int main()
{
	ios_base::sync_with_stdio(0);
	lld i,j,k,l,bmap[20],n,count,t,ct[20],tmp,min;
	lld fix[][10]={ {55,60,4,25,18,10,12,8,11,50} ,
			  {60,45,75,23,27,20,24,7,33,12} ,
			  {4,75,78,32,36,30,36,6,12,65} ,
			  {25,23,32,15,45,40,48,5,14,23} , 
			  {18,27,36,45,54,50,60,4,15,12} ,
			  {10,20,30,40,50,60,72,3,32,34} ,
			  {12,24,36,48,60,72,84,2,23,34} ,
			  {8,7,6,5,4,3,2,1,34,123} ,
			  {11,33,12,14,15,32,23,34,65,48} ,
			  {50,12,65,23,12,34,34,123,48,71}	  };

	cin>>t;
	while(t--)
	{
		FOR(i,10)
		cin>>ct[i];
		count=0;
		FOR(i,10)
		{
			cin>>tmp;
			if(ct[i]>=2 && tmp==1)
			{
				bmap[count]=i;
				count++;
			}
		}
		n= (1<<count)-1;
		
		dp[0][0]=0;
		for(i=0;i<=n;i++)
		{
			for(j=0;j<=n;j++)
			{
				min=LLONG_MIN;
				if(i==0 && j==0)
				continue;
				for(k=0;k<count;k++)
				{
					if( (i & (1<<k) ) != 0)
					{
						for(l=0;l<count;l++)
						{
							if( (i & (1<<l) )!=0 && l!=k)
							{
								tmp= i & (~(1<<k));
								tmp= tmp & (~(1<<l));
								min=MAX(min,dp[tmp][j]+fix[bmap[k]][bmap[l]]);
								
							}
							if( ( j & (1<<l) )!=0)
							{
								lld tmp1= i & (~(1<<k));
								lld tmp2= j & (~(1<<l));
								min=MAX(min,dp[tmp1][tmp2]+fix[bmap[k]][bmap[l]]);
								
							}
						}
					}
					if( (j & (1<<k) )!= 0)
					{
						for(l=0;l<count;l++)
						{
							if( (j & (1<<l)) !=0 && l!=k)
							{
								tmp= j & (~(1<<k));
								tmp= tmp & (~(1<<l));
								min=MAX(min,dp[i][tmp]+fix[bmap[l]][bmap[k]]);
								
							}
							if( ( i & (1<<l)) !=0)
							{
								lld tmp1= i & (~(1<<l));
								lld tmp2= j & (~(1<<k));
								min=MAX(min,dp[tmp1][tmp2]+fix[bmap[l]][bmap[k]]);
							
							}
						}
					}
				}
				dp[i][j]=min;
			}
		}
		
		cout<<dp[n][n]<<endl;
	}
	return 0;
}
			  