#include <iostream>
#include <algorithm>
using namespace std;

int rewards[10][10] = {
	{55, 60,  4, 25, 18, 10, 12,  8, 11, 50},
	{60, 45, 75, 23, 27, 20, 24,  7, 33, 12},
	{ 4, 75, 78, 32, 36, 30, 36,  6, 12, 65},
	{25, 23, 32, 15, 45, 40, 48,  5, 14, 23},
	{18, 27, 36, 45, 54, 50, 60, 	4, 15, 12},
	{10, 20,	30, 40, 50,	60, 72, 	3,	32, 34},
	{12, 24,	36, 48, 60,	72, 84, 	2,	23, 34},
	{ 8,  7,	 6,  5,  4,  3,  2, 	1,	34,123},
	{11, 33,	12, 14, 15, 32, 23, 34,	65, 48},
	{50, 12,	65, 23, 12, 34, 34,123,	48, 71}
};

int memo[1<<10][1<<10], arr[10], start;
int dp(int first, int second) {
	if(first == 0)
		return 0;
	if(memo[first][second] != -1)
		return memo[first][second];

	int ret = 0;
	for(int i = 0; i < 10; i++) {
		if(!(first&(1<<i)))
			continue;
		for(int j = 0; j < 10; j++) {
			if(!(second&(1<<j)))
				continue;
			ret = max(ret, rewards[i][j] + dp(first^(1<<i), second^(1<<j)));
		}
	}
	return memo[first][second] = ret;
}

void solve() {
	for(int i = 0; i < 10; i++)
		cin >> arr[i];
	start = 0;
	for(int i = 0; i < 10; i++) {
		int bit; cin >> bit;
		start |= (bit<<i);
	}

	cout << dp(start, start) << endl;
}

int t;
int main() {
	for(int i = 0; i < (1<<10); i++)
		for(int j = 0; j < (1<<10); j++)
			memo[i][j] = -1;

	cin >> t;
	while(t-->0)
		solve();
	return 0;
}

