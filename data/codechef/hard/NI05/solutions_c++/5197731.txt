//9 : 50
#include <iostream>
#include <vector>

#define INFI 100000000
using namespace std;



#define NPAIRS 10

inline int getbit(int i, int bit){
	return (i>>bit)%2;
}	

int reward[10][10] = {
						{55, 60, 4 , 25, 18, 10, 12, 8 	, 11, 50 },
						{60, 45, 75, 23, 27, 20, 24, 7 	, 33, 12 },
						{4 , 75, 78, 32, 36, 30, 36, 6 	, 12, 65 },
						{25, 23, 32, 15, 45, 40, 48, 5 	, 14, 23 },
						{18, 27, 36, 45, 54, 50, 60, 4 	, 15, 12 },
						{10, 20, 30, 40, 50, 60, 72, 3 	, 32, 34 },
						{12, 24, 36, 48, 60, 72, 84, 2 	, 23, 34 },
						{8 , 7 ,  6, 5 ,  4,  3,  2, 1 	, 34, 123},
						{11, 33, 12, 14, 15, 32, 23, 34 , 65, 48 },
						{50, 12, 65, 23, 12, 34, 34, 123, 48,  71 }
					};

vector<int> stocks;
int results[257];//not required
int total;

int getDP(int remaining){
	
	if(remaining == 0) return 0;
	
	if(results[remaining] != -1) return results[remaining];
	int count = 0;
	for(int bit = 0; bit<total; bit++)
		count += getbit(remaining, bit);
	
	int index = total - count;
	int maxVal = -INFI;
	
	for(int bit = 0; bit<total; bit++){
		if(getbit(remaining, bit) == 1){
			maxVal = max(maxVal, reward[stocks[index]][stocks[bit]] + getDP(remaining ^ (1<<bit)));
		}
	}
	results[remaining] = maxVal;
	return maxVal;
}


int main(){	
	int M;
	cin>>M;
	while(M-->0){
		stocks.clear();
		int elm;
		for(int i=0;i<NPAIRS;i++)
			cin>>elm;
		for(int i=0;i<NPAIRS;i++){
			cin>>elm;
			if(elm==1)
				stocks.push_back(i);
		}
		total = stocks.size();
		for(int j=0;j<200;j++)
			results[j] = -1;
		cout<<getDP((1<<total)-1)<<endl;
	}
	return 0;
}
