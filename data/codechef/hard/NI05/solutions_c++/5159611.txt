// Standard includes
    //#include<cstdio>
    #include<iostream>
    #include<cstdlib>
    #include<cmath>
    #include<cstring>
    #include<limits.h>
    #include<string.h>
    #include<stdio.h>
    //Data Structures
    #include<algorithm>
    #include<vector>
    #include<string>
    #include<set>
    #include<map>
    #include<utility>
    #include<stack>
    #include<queue>
    using namespace std;

int main()
{
    int g[][10]={ {55,60,4,25,18,10,12,8,11,50},
    {60,45,75,23,27,20,24,7,33,12},
    {4,75,78,32,36,30,36,6,12,65},
    {25,23,32,15,45,40,48,5,14,23},
    {18,27,36,45,54,50,60,4,15,12},
    {10,20,30,40,50,60,72,3,32,34},
    {12,24,36,48,60,72,84,2,23,34},
    {8,7,6,5,4,3,2,1,34,123},
    {11,33,12,14,15,32,23,34,65,48},
    {50,12,65,23,12,34,34,123,48,71} };
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int pp[10],copy[10],c=0,a;
        for(int i=0;i<10;i++)   scanf("%d",&a);
        for(int i=0;i<10;i++)
        {
            scanf("%d",&a);
            if(a==1)
            {
                copy[c]=i;pp[c++]=i;
            }
        }
        int sum=0,max=0,ttt[c];
        do
        {
            sum=0;
            for(int i=0;i<c;i++)
            {
                sum+=g[pp[i]][copy[i]];
            }
            if(sum>max)
            {
                for(int i=0;i<c;i++)
                    ttt[i]=copy[i];
                    max=sum;
            }
        }while(next_permutation(copy,copy+c));

        /*for(int i=0;i<c;i++)    used[i]=false;
        int sum=0;
        for(int i=0;i<c;i++)
        {
            if(!used[i])
            {
                int max=0;
                int pos=0;
                for(int j=0;j<c;j++)
                {
                    if(g[pp[i]][pp[j]]>max && !used[j])
                    {
                        max=g[pp[i]][pp[j]];
                        pos=j;
                    }
                }
                used[i]=true;
                used[pos]=true;
                //printf("::%d::\n",pos);
                if((g[pp[i]][pp[pos]]+g[pp[pos]][pp[i]])>(g[pp[pos]][pp[pos]]+g[pp[i]][pp[i]]))
                    sum+=(g[pp[i]][pp[pos]]+g[pp[pos]][pp[i]]);

                else
                {
                    if(pos!=i)
                        sum+=(g[pp[pos]][pp[pos]]+g[pp[i]][pp[i]]);
                    else
                        sum+=g[pp[pos]][pp[pos]];
                }

            }
        }*/
        //for(int i=0;i<c;i++)
            //printf("%d  ",ttt[i]);
        printf("%d\n",max);
    }
    return 0;
}
