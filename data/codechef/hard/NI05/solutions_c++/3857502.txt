#include <iostream>
#include <algorithm>
#include <cstdio>

using namespace std;

inline int readInt(){
	int number = 0;
	char c = getchar_unlocked();
	while(c<'0')
		c = getchar_unlocked();
	while(c>='0' && c<='9'){
		number = (number<<3)+(number<<1)+c-'0';
		c = getchar_unlocked();
	}
	return number;
}


int cost[10][10]={{55,60,4,25,18,10,12,8,11,50},
    {60,45,75,23,27,20,24,7,33,12},
    {4,75,78,32,36,30,36,6,12,65},
    {25,23,32,15,45,40,48,5,14,23},
    {18,27,36,45,54,50,60,4,15,12},
    {10,20,30,40,50,60,72,3,32,34},
    {12,24,36,48,60,72,84,2,23,34},
    {8,7,6,5,4,3,2,1,34,123},
    {11,33,12,14,15,32,23,34,65,48},
    {50,12,65,23,12,34,34,123,48,71}};

int main()
{
	int cases = readInt();

	int purchase[10], consider1[10], consider2[10], totalConsideredProducts;

	while(cases--)
	{
		for (int i = 0; i < 10; ++i)
		{
			purchase[i] = readInt();
		}

		totalConsideredProducts = 0;

		for (int i = 0; i < 10; ++i)
		{
			int bit = readInt();

			if(bit == 1)
			{
				// ith product is being considered.
				consider1[totalConsideredProducts] = consider2[totalConsideredProducts] = i;
				totalConsideredProducts++;
			}
		}

		int maxPoints = 0, sum = 0;

		int alreadyConsidered[10] = {0};

		do
		{
			sum = 0;

			for (int i = 0; i < totalConsideredProducts; ++i)
			{
				/*
				// If same product... see if we have at least 2
				if(consider1[i] == consider2[i])
				{
					if(purchase[consider1[i]] < 2 || alreadyConsidered[consider1[i]] >= 2)
						break;
				}
				else
				{
					if(purchase[consider1[i]] <= 0 || purchase[consider2[i]] <= 0 || alreadyConsidered[consider1[i]] >= 2 || alreadyConsidered[consider2[i]] >= 2)
						break;
				}

				*/

				sum += cost[consider1[i]][consider2[i]];

				purchase[consider1[i]]--;
				purchase[consider2[i]]--;
				
				alreadyConsidered[consider1[i]]++;
				alreadyConsidered[consider2[i]]++;

			}

			if(sum > maxPoints)
				maxPoints = sum;

		}while(next_permutation(consider2, consider2 + totalConsideredProducts));

		printf("%d\n", maxPoints);
	}

	return 0;
}