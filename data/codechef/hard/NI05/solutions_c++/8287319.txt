#include <bits/stdc++.h>

using namespace std;

int A[10][10] = { {55,60,4,25,18,10,12,8,11,50},
                  {60,45,75,23,27,20,24,7,33,12},
                  {4,75,78,32,36,30,36,6,12,65},
                  {25,23,32,15,45,40,48,5,14,23},
                  {18,27,36,45,54,50,60,4,15,12},
                  {10,20,30,40,50,60,72,3,32,34},
                  {12,24,36,48,60,72,84,2,23,34},
                  {8,7,6,5,4,3,2,1,34,123},
                  {11,33,12,14,15,32,23,34,65,48},
                  {50,12,65,23,12,34,34,123,48,71} };

int dp[1024][1024];
int arr[10];
int brr[10];

int main()
{
    for(int i=0;i<1024;i++)
        dp[0][i] = 0;
    for(int i=1;i<1024;i++)
    {
        for(int j=i;j>=0;j--)
        {
            memset(arr,0,sizeof(arr));
            int n = i;
            int val = 1;

            while(n!=0)
            {
                if(n%2)
                {
                    arr[10-val] = 1;
                }
                n = n/2;
                val++;
            }

            memset(brr,0,sizeof(brr));
            int p = j;
            int val2 = 1;
            while(p!=0)
            {
                if(p%2)
                {
                    brr[10-val2] = 1;
                }
                p = p/2;
                val2++;
            }


            int flag=0;
            for(int k=9;k>=0;k--)
            {
                if(brr[k] && !arr[k])
                {
                    flag=1;
                    break;
                }
            }
            if(flag)
                continue;

            int k = 9;
            for(;k>=0;k--)
            {
                if(!brr[k] && !arr[k])
                    continue;
                if(brr[k] && arr[k])
                {
                    flag=k+1;
                    break;
                }
                else
                    break;
            }
            int ans = 0;
            if(flag)
            {
                arr[k] = 0;
                brr[k] = 0;
                int ne = i - (1<<(10-k-1));
                int me = j - (1<<(10-k-1));
                assert(ne>=0);
                int nn, mm;
                for(int v=0;v<10;v++)
                {
                    if(arr[v] && brr[v])
                    {
                        nn = ne - (1<<(10-v-1));
                        mm = me - (1<<(10-v-1));
                        ans = max(ans, dp[nn][mm] + A[v][k]);
                    }
                    else if(arr[v] && !brr[v])
                    {
                        nn = ne;
                        mm = me + (1<<(10-v-1));
                        ans = max(ans, dp[nn][mm] + A[v][k]);
                    }
                }
            }
            else
            {
                int ne = i - (1<<(10-k-1));
                ans = max(ans, A[k][k] + dp[ne][j]);
                brr[k] = 1;
                int nn, mm;
                int me = j + (1<<(10-k-1));
                for(int v=0;v<10;v++)
                {
                    if(arr[v] && brr[v])
                    {
                        nn = i - (1<<(10-v-1));
                        mm = me - (1<<(10-v-1));
                        assert(nn>=0);
                        ans = max(ans, dp[nn][mm] + A[v][k]);
                    }
                    else if(arr[v] && !brr[v])
                    {
                        nn = i;
                        mm = me + (1<<(10-v-1));
                        ans = max(ans, dp[nn][mm] + A[v][k]);
                    }
                }
            }
            dp[i][j] = ans;
        }
    }
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int val;
        for(int i=0;i<10;i++)
        {
            scanf("%d",&val);
        }
        val = 0;
        for(int i=0;i<10;i++)
        {
            int b;
            scanf("%d",&b);
            val = val*2 + b;
        }
        printf("%d\n",dp[val][0]);
    }
    return 0;
}