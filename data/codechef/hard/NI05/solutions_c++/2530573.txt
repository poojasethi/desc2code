/*
 *Kartik Singal @ ka4tik
 */
#include<bits/stdc++.h>
using namespace std;
#define s(n) scanf("%d",&n);
int a[][10]={
    55,	60,	4,	25,	18,	10,	12,	8,	11,	50,
    60,	45,	75,	23,	27,	20,	24,	7,	33,	12,
    4,	75,	78,	32,	36,	30,	36,	6,	12,	65,
    25,	23,	32,	15,	45,	40,	48,	5,	14,	23,
    18,	27,	36,	45,	54,	50,	60,	4,	15,	12,
    10,	20,	30,	40,	50,	60,	72,	3,	32,	34,
    12,	24,	36,	48,	60,	72,	84,	2,	23,	34,
    8,	7,	6,	5,	4,	3,	2,	1,	34,	123,
    11,	33,	12,	14,	15,	32,	23,	34,	65,48,
    50,	12,	65,	23,	12,	34,	34,	123,	48,	71
};
int dp[1<<15][15];
int done[1<<15][15];
vector<int> idx;
int rec(int mask,int prev)
{
    if(done[mask][prev])
        return dp[mask][prev];

    if(__builtin_popcount(mask)==idx.size())
    {
        return 0;
    }


    int ans=0;
    for(int i=0;i<idx.size();i++)
    {
        int cmask=mask;
        int cans=0;
        if(!(mask&(1<<i)))
        {
            cmask|=(1<<i);
            if(__builtin_popcount(cmask)&1)
            {

            }
            else
            {
                cans=max(a[idx[prev]][idx[i]],a[idx[i]][idx[prev]]);
                //cans=a[prev][idx[i]];
                //cans=a[idx[i]][prev];
            }
            cans+=rec(cmask,i);
            ans=max(ans,cans);

        }

    }
    done[mask][prev]=1;
    return dp[mask][prev]=ans;

}
int main()
{
    //freopen("in","r",stdin);
    //freopen("out","w",stdout);
    int test;s(test);
    while(test--)
    {

        int N;
        N=10;
        vector<int> v(N),t(N);
        for(int i=0;i<N;i++)
        {
            s(v[i]);
        }
        idx.clear();
        for(int i=0;i<N;i++)
        {
            s(t[i]);
            if(t[i])
                idx.push_back(i),idx.push_back(i);
        }
      
        for(int i=0;i<(1<<(15));i++)
        {
            for(int j=0;j<15;j++)
            {
                done[i][j]=0;
                dp[i][j]=0;
            }
        }
        int ans=rec(0,-1);
        printf("%d\n",ans);
    }

    return 0;

}


