#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstdio>
#include<stack>
#include<vector>
#include<cstring>
#include<set>
#include<map>
#include<queue>
#include<string>
typedef long long int LL;
typedef unsigned long long int ULL;
#define sf(a) scanf("%d",&a);
#define pf(a) printf("%d",a);
#define sl(a) scanf("%lld",&a);
#define pl(a) printf("%lld",a);
#define tr(container,it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define sz(a) int((a).size())
#define all(c) c.begin(),c.end() //all elements of a container
#define rall(c) c.rbegin(),c.rend() 
using namespace std;
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(x) ((x) > 0 ? (x) : -(x))
#define REP(i, n) for (int i = 0 ; i < (n) ; i ++)
#define FOR(i, s, n) for (int i = (s) ; i < (n) ; i ++)
#define SET(v, val) memset(v, val, sizeof(v))
#define mp(a,b)    make_pair(a,b)
#define pb(n)      push_back(n)
#define PI 3.14159265
#define F first
#define S second
typedef vector <int> vi;
int power(int a,int b,int c){   //a^b % c
	long long x=1,y=a; // long long is taken to avoid overflow of intermediate results
	while(b > 0){
		if(b%2 == 1){
			x=(x*y)%c;
		}
		y = (y*y)%c; // squaring the base
		b /= 2;
	}
	return x%c;
}
int gcd(int a, int b){if(b == 0)return a;else return gcd(b,a % b);}
int g[][10]={ {55,60,4,25,18,10,12,8,11,50},
		{60,45,75,23,27,20,24,7,33,12},
		{4,75,78,32,36,30,36,6,12,65},
		{25,23,32,15,45,40,48,5,14,23},
		{18,27,36,45,54,50,60,4,15,12},
		{10,20,30,40,50,60,72,3,32,34},
		{12,24,36,48,60,72,84,2,23,34},
		{8,7,6,5,4,3,2,1,34,123},
		{11,33,12,14,15,32,23,34,65,48},
		{50,12,65,23,12,34,34,123,48,71} };
 
int main()
{
	int i,j,n,t;
	cin>>t;
	while(t--)
	{
		REP(i,10)
		{
			sf(j);
		}
		int a[11],c=0;
		REP(i,10)
		{
			sf(j);
			if(j==1)
				a[c++]=i;
		}
		int p[c+1];
		REP(i,c)
			p[i]=i;
		int sum=0,ans=0;
		do
		{
			sum=0;
			REP(i,c)
				sum+=g[a[i]][a[p[i]]];
			if(sum>ans)
				ans=sum;
		}while(next_permutation(p,p+c));
		cout<<ans<<endl;
	}
	return 0;
}
