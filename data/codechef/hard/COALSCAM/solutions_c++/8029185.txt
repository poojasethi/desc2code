#include <iostream>
#include <algorithm>
using namespace std;
#define MAX_INT  99999

struct Edge1
{
	int U;
	int V;
	int nCost;

	bool operator < (const struct Edge1& S1)const
	{
		return nCost < S1.nCost;
	}
};

struct Edge2
{
	int U;
	int V;
	int nCost;

	bool operator < (const struct Edge2& S2)const
	{
		return nCost > S2.nCost;
	}
};

int nParentARR[5001];
struct Edge1 stFirstEdge[20001];
struct Edge2 stSecEdge[20001];
int nNoOfCities;

int Find(int nParent)
{
	if(nParentARR[nParent] == -1)
		return nParent;
	Find(nParentARR[nParent]);
}

bool MakeSet(int U,int V)
{
	int nX = Find(U);
	int nY = Find(V);

	if(nX == nY)
		return 0;
	nParentARR[nX] = nY;
	return 1;
}

void ResetMatrix()
{
   for(int l = 0; l < nNoOfCities; l++)
   {
	   nParentARR[l] = -1;
	   stFirstEdge[l].nCost = 0;
	   stFirstEdge[l].U = 0;
	   stFirstEdge[l].V = 0;

	   stSecEdge[l].nCost = 0;
	   stSecEdge[l].U = 0;
	   stSecEdge[l].V = 0;
   }
}


int main()
{
	int nNoOftestCases = 0;
	cin >> nNoOftestCases;

	int M1;
	int M2;
	int nStartPoint;
	int nEndPoint;

	unsigned long long nCost = 0;
	unsigned long long ntotalProfit = 0;
	for(int ntest = 0; ntest < nNoOftestCases; ntest++)
	{
		cin >> nNoOfCities;
		cin >> M1;
		cin >> M2;

		ResetMatrix();

		for(int i = 0; i < M1; i++)
		{
			cin >> stFirstEdge[i].U;
			cin >> stFirstEdge[i].V;
			cin >> stFirstEdge[i].nCost;
		}

		sort(stFirstEdge,stFirstEdge+M1);

		for(int i = 0; i < M2; i++)
		{
		    cin >> stSecEdge[i].U;
			cin >> stSecEdge[i].V;
			cin >> stSecEdge[i].nCost;
		}

		//sort(stFirstEdge,stFirstEdge+M1);
		sort(stSecEdge,stSecEdge+M2);

		unsigned long long nCost = 0;
		unsigned long long nProfit = 0;
		int nCount = 0;
		for(int k = 0; k < M2; k++)
		{
			if(MakeSet(stSecEdge[k].U,stSecEdge[k].V))
			{
			    nCost += stSecEdge[k].nCost;
				nProfit += stSecEdge[k].nCost;
			    nCount++;
			}
		}

		for(int i = 0; i < M1; i++)
		{
			if(MakeSet(stFirstEdge[i].U,stFirstEdge[i].V))
			{
			    nCost += stFirstEdge[i].nCost;
			    nCount++;
			}			
		}

		if(nNoOfCities-1 != nCount)
			cout << "Impossible";
		else
		    std::cout << nProfit << " " << nCost;
		cout << endl;
	}	
}