#include<bits/stdc++.h>
using namespace std;

vector<pair<long long ,pair<int,int> > >GRAPH,CHEFG;
int parent[5005],rank[5005],m1,m2,u,v,d,visited[5005];
long long total,total2;

void reset()
{
	int i;
	for(i=0;i<5005;i++)
	{
	parent[i]=i;
	rank[i]=0;
	visited[i]=0;
	}
	total=0;
	total2=0;
	return;
}

int find(int x)
{
	if(parent[x]==x)
	return parent[x];
	else
	{
		int t=find(parent[x]);
		parent[x]=t;
		return t;
	}
}

void kruskal1()
{
	sort(GRAPH.begin(),GRAPH.end());
	int s=GRAPH.size();
	int i;
		for(i=0;i<s;i++)
		{
			int px=find(GRAPH[i].second.first);
			int py=find(GRAPH[i].second.second);
			if(px!=py)
			{
				if(rank[px]>rank[py])
				parent[py]=px;
				else if(rank[py]>rank[px])
				parent[px]=py;
				else
				{
					parent[py]=px;
					rank[px]++;
				}
				total2+=(long long)GRAPH[i].first;
			}
		}
		return;
}

void kruskal2()
{
	int i;
	sort(CHEFG.rbegin(),CHEFG.rend());
	int sg=CHEFG.size();
		for(i=0;i<sg;i++)
		{
			int pxx=find(CHEFG[i].second.first);
			int pyy=find(CHEFG[i].second.second);
			if(pxx!=pyy)
			{
				if(rank[pxx]>rank[pyy])
				parent[pyy]=pxx;
				else if(rank[pyy]>rank[pxx])
				parent[pxx]=pyy;
				else
				{
					parent[pyy]=pxx;
					rank[pxx]++;
				}
				total+=(long long)CHEFG[i].first;
				total2+=(long long)CHEFG[i].first;
			}
		}
		return;
}

int main()
{
	int t,i;
	scanf("%d",&t);
	while(t--)
	{	GRAPH.clear();
		CHEFG.clear();
		reset();
		int n;
		scanf("%d %d %d",&n,&m1,&m2);
		while(m1--)
		{
			scanf("%d %d %d",&u,&v,&d);
			GRAPH.push_back(make_pair(d,make_pair(u,v)));
	visited[u]=1;
	visited[v]=1;
		}
		while(m2--)
		{
			scanf("%d %d %d",&u,&v,&d);
			CHEFG.push_back(make_pair(d,make_pair(u,v)));
	visited[u]=1;
	visited[v]=1;
		}
		kruskal2();
		kruskal1();
		int flag=0;
		for(i=0;i<n;i++)
		{
			if(visited[i]==0)
			flag=1;
		}
		if(flag==0)
		printf("%lld %lld\n",total,total2);
		else
		printf("Impossible\n");
	}	
	
	return 0;
}