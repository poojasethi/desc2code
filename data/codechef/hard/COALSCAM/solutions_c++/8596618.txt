#include<iostream>
#include<algorithm>
using namespace std;
struct edge{
	long long int u,v,weight;
}e1[100010],e2[20200];
int p[100001];
long long int n,m,m1,m2,res,mi;

int compare2(edge e1,edge e2)
{
	if(e1.weight>e2.weight) 
	return 1;
	else 
	return 0;
}



int compare1(edge e1,edge e2)
{
	if(e1.weight<e2.weight) 
	return 1;
	else 
	return 0;
}
int parent(int y)
{
	if(p[y]==y)
	return y;
	else
	return p[y]=parent(p[y]); 
}

void union1(int u,int v)
{
	int px =parent (u);
	int py=parent(v);
	p[px]=py;	
}

void mst()
{
	res=0;
	sort(e1,e1+m1,compare1);
	sort(e2,e2+m2,compare2);
	for(long long int i=0; i<m2; i++ )
	{
		if(parent(e2[i].u)!=parent(e2[i].v))
		{
			union1(e2[i].u,e2[i].v);
			res=res+e2[i].weight;	
		}
	}
	mi=res;
	for(long long int i=0; i<m1; i++ )
	{
		if(parent(e1[i].u)!=parent(e1[i].v))
		{
			union1(e1[i].u,e1[i].v);
			mi=mi+e1[i].weight;	
		}
	}
	
	
	for(int i=0; i<n-1; i++)
	{
		if(parent(i)!=parent(i+1))
		{
			cout<<"Impossible";
			return;
		}
	}
	cout<<res<<" "<<mi;
		
}

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	
		cin>>n>>m1>>m2;
		for(long long int i=0; i<n; i++)
			p[i]=i;
		                                       //parent initialize
	for(long long int i=0; i<m1; i++)
	{
		cin>>e1[i].u>>e1[i].v>>e1[i].weight;
	}
	
	for(long long int i=0; i<m2; i++)
	{
		cin>>e2[i].u>>e2[i].v>>e2[i].weight;
	}	
			
		mst();
		if(t!=0)
		cout<<"\n";
	
	}
	return 0;
}

