
//~        Author : Sarvesh Mahajan                             
//               IIIT,Hyderabad                                   
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef ONLINE_JUDGE
#define DEBUG
#endif

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define clr(x) x.clear()
#define For(i,a,b) for(i=a;i<b;i++)
#define loop(i,b) for(i=0;i<b;i++)
#define Loop(i,b) for(i=1;i<=b;i++)
#define pi(n) printf("%d ",n)
#define si(n) scanf("%d",&n)
const int MOD=1e9+7;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
typedef vector<int> VI;
typedef long long LL;
#define F first
#define S second
#define sz size
#define pLL(x) cout<<x<<' '
#define fill(x,c) memset(x,c,sizeof(x))
#define LET(x,a) __typeof(a) x(a)
#define IFOR(i,a,b) for(LET(i,a);i!=(b);++i)
#define EACH(it,v) IFOR(it,v.begin(),v.end())
#ifdef DEBUG
#define DB(x)              cout<<__LINE__<<" :: "<<#x<< ": "<<x<<endl;
#define DB2(x, y)          cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<endl;
#define DB3(x, y, z)       cout<<__LINE__<<" :: "<<#x<< ": "<<x<<" | "<<#y<< ": "<<y<<" | "<<#z<<": "<<z<<endl;
#else
#define DB(x)
#define DB2(x,y)
#define DB3(x,y,z)
#endif

bool cmp(pair<int,PII> x,pair <int,PII> y)
{
	return x.F>y.F;
}

int par[100005];
int find(int x)
{
	if(par[x] == x)
		return x;
	return (par[x]=find(par[x]));
}



bool unite(int x,int y)
{
	int xx=find(x),yy=find(y);
	if(xx != yy)
	{
	        par[xx]=yy;
		return 1;
	}
	return 0;
}



int main()
{
vector<pair<int,PII> > edges[2];
//ios_base::sync_with_stdio(false);
int n,t,m,l,k,ans,i,j,res=0,fl;
t=1;
si(t);
int x,y,m1,m2,c;
while(t--)
{
	clr(edges[0]);
	clr(edges[1]);
	LL re=0;
	si(n);si(m1);si(m2);
	loop(i,n)
		par[i]=i;
	loop(i,m1)
	{
		si(x);
		si(y);
		si(c);
		edges[0].pb(mp(c,mp(x,y)));
	}
	sort(edges[0].begin(),edges[0].end());

	int ct=0;
	loop(i,m2)
	{
		si(x);
		si(y);
		si(c);
		edges[1].pb(mp(c,mp(x,y)));
	}

	sort(edges[1].begin(),edges[1].end(),cmp);
	loop(i,m2)
	{
		int x=edges[1][i].S.F;
		int y=edges[1][i].S.S;
		if(unite(x,y))
		{
			ct++;
			re+=edges[1][i].F;
		}
	}

	LL RE=re;
	//DB(ct)
	loop(i,m1)
	{
		int x=edges[0][i].S.F;
		int y=edges[0][i].S.S;
		if(unite(x,y)) 
		{
			ct++;
			re+=edges[0][i].F;
		}
	}
	//DB(ct)



	if(ct!=n-1)
		puts("Impossible");
	else
		cout<<RE<<' '<<re<<'\n';





}
return 0;
}
