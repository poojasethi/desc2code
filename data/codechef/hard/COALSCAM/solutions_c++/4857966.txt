#include<stdio.h>
#include<map>
#include<set>

using namespace std;

int find1(int n,int par[])
{
    int x=n;
    while(par[x]!=x)
        x=par[x];
    int parent = x;
    x=n;
    while(par[x]!=parent)
    {
        int y=par[x];
        par[x]=parent;
        x=y;
    }
    return parent;
}

void union1(int u,int v,int par[])
{
    int parent1=find1(u,par);
    int parent2=find1(v,par);
    par[parent1]=parent2;
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,m1,m2;
        scanf("%d%d%d",&n,&m1,&m2);
        multimap<int,pair<int,int> > multimap1;
        for(int i=0;i<m1;i++)
        {
            int u,v,cost;
            scanf("%d%d%d",&u,&v,&cost);
            multimap1.insert(make_pair(cost,make_pair(u,v)));
        }
        for(int i=0;i<m2;i++)
        {
            int u,v,cost;
            scanf("%d%d%d",&u,&v,&cost);
            multimap1.insert(make_pair(-cost,make_pair(u,v)));
        }
        int par[n];
        for(int i=0;i<n;i++)
            par[i]=i;
        long long int total_cost=(long long)0,profit=(long long)0,edge=0;;
        for(multimap<int,pair<int,int> >::iterator it=multimap1.begin();it!=multimap1.end();it++)
        {
            int u=(it->second).first;
            int v=(it->second).second;
            if(find1(u,par) != find1(v,par))
            {
                union1(u,v,par);
                if(it->first < 0 )
                {
                    profit=profit - (it->first);
                    total_cost=total_cost- (it->first);
                }
                else
                    total_cost=total_cost+ it->first;
                edge++;
                if(edge==n-1)
                    break;
            }
        }
        if(edge!= n-1)
            printf("Impossible\n");
        else
            printf("%lld %lld\n",profit,total_cost);
    }

    return 0;
}
