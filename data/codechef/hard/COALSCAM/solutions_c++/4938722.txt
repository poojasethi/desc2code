//Shakim :D
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <utility>
#include <map>
#include <set>
#include <string>
using namespace std;
typedef long long LL;
#define IT iterator
#define getcx getchar
#define INF (int(1e9))
#define INFL (LL(1e18))
#define pii pair< int,int >
#define ppi pair< pii , int >
#define pip pair< int , pii >
#define temp 0
#define wait 1
#define perm 2
struct cmp
{
    bool operator()(const pii &a,const pii &b)
    {
        return a.first>b.first;
    }
};
struct myclass {
  bool operator() (const pii &a,const pii &b)
  {
        return a.first>b.first;
  }
} myobject;
#define in2(n,m) scanf("%d %d",&n,&m);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define mod 1000000007
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
int par[5005];
int find(int u)
{
    if(par[u]==u)
        return u;

    int x=find(par[u]);
    par[u]=x;

    return x;
}
int main()
{
    int t,n,m1,m2,i,u,v,c,parOfu,parOfv;
    LL ans,ans2;
    in(t);
    while(t--)
    {
        vector<pip> X,Y;
        int cnt=0;

        ans=0;
        ans2=0;

        in(n);
        in(m1);
        in(m2);

        for(i=1; i<=n; i++)
        {
            par[i]=i;
        }
        for(i=1; i<=m1; i++)
        {
            in(u);
            in(v);
            in(c);
            u++;
            v++;
            X.push_back(pip(c,pii(u,v)));
        }
        for(i=1; i<=m2; i++)
        {
            in(u);
            in(v);
            in(c);
            u++;
            v++;
            Y.push_back(pip(c,pii(u,v)));
        }

        sort(X.begin(),X.end());
        sort(Y.rbegin(),Y.rend());

        for(i=0; i<Y.size(); i++)
        {
            u=Y[i].second.first;
            v=Y[i].second.second;
            c=Y[i].first;

            parOfu=find(u);
            parOfv=find(v);

            if(parOfu!=parOfv)//both belong to different group
            {
                ans=ans+c;
                cnt++;
                par[parOfu]=parOfv;
            }
        }
        for(i=0; i<X.size(); i++)
        {
            u=X[i].second.first;
            v=X[i].second.second;
            c=X[i].first;

            parOfu=find(u);
            parOfv=find(v);

            if(parOfu!=parOfv)//both belong to different group
            {
                ans2=ans2+c;
                cnt++;
                par[parOfu]=parOfv;
            }
        }
        if(cnt==n-1)
        {
            printf("%lld %lld\n",ans,ans+ans2);
        }
        else
        {
            printf("Impossible\n");
        }
    }
    return 0;
}
