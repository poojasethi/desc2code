#include<iostream>
#include<algorithm>
using namespace std;
#include<stdio.h>
#define ppi pair<pair<int,int>,int>
bool compchef(ppi one,ppi two)
{
    return one.second>two.second;
}
bool compcom(ppi one,ppi two)
{
    return one.second<two.second;
}
int findparent(int *parent,int x)
{
    if(parent[x]==-1)
    return x;
    else
    return findparent(parent,parent[x]);
}
void unite(int x,int y,int *parent,int *rank)
{
    if(rank[x]>rank[y])
    {
        parent[y]=x;
    }
    else if(rank[y]>rank[x])
    {
        parent[x]=y;
    }
    else
    {
    parent[x]=y;
    rank[y]++;
    }
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,a,b,x,y,i,j,count=0;
        long long cp=0,total;
        scanf("%d %d %d",&n,&a,&b);
        ppi com[a];
        ppi chef[b];
        long long sum=0;
        for(i=0;i<a;i++)
        {
            scanf("%d %d %d",&com[i].first.first,&com[i].first.second,&com[i].second);
        }
        for(i=0;i<b;i++)
        {
             scanf("%d %d %d",&chef[i].first.first,&chef[i].first.second,&chef[i].second);
        }
        sort(chef,chef+b,compchef);
        sort(com,com+a,compcom);
        int parent[n],rank[n];
        for(i=0;i<n;i++)
        {
            rank[i]=0;
            parent[i]=-1;
        }
        for(i=0;i<b;i++)
        {
            x=findparent(parent,chef[i].first.first);
            y=findparent(parent,chef[i].first.second);
            if(x!=y)
            {
              count++;
            cp=cp+chef[i].second;
            unite(x,y,parent,rank);
            }
        }
        total=cp;
        for(i=0;i<a;i++)
        {
            x=findparent(parent,com[i].first.first);
            y=findparent(parent,com[i].first.second);
            if(x!=y)
            {
                count++;
                total=total+com[i].second;
            unite(x,y,parent,rank);
            }
        }
            if(count!=(n-1))
            {
                printf("Impossible\n");

            }
            else
            printf("%lld %lld\n",cp,total);
    }
        return 0;
}
