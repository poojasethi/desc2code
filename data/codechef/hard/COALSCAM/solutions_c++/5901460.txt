/*
Author: Zubin Sharma
Algo: Kruskal MST
*/
#include<bits/stdc++.h>
using namespace std;
#ifdef ONLINE_JUDGE
	#define gc getchar_unlocked
#else
	#define gc getchar
#endif
#define mp(a,b) make_pair((a),(b))
typedef long long int lli;
#define max 5003
int size[max],parent[max];

int find_parent(int u)//path compression
{
	if(parent[u]==u)
		return u;
	int par=find_parent(parent[u]);
	parent[u]=par;
	return par;
}

void union_set(int u, int v)//union by rank
{
	int par1=find_parent(u);
	int par2=find_parent(v);
	if(size[par1] < size[par2])
	{
		parent[par1]=par2;
		size[par2]+=size[par1];
	}
	else
	{
		parent[par2]=par1;
		size[par1]+=size[par2];
	}
}

void make_set(int n)
{
	for(int i=0;i<n;i++)
	{
		parent[i]=i;
		size[i]=1;
	}
}

int read_int()
{
	int ans=0;
	char c=gc();
	while(c<'0' || c>'9')
		c=gc();
	while(c>='0' && c<='9')
	{
		ans=ans*10+(c-'0');
		c=gc();
	}
	return ans;
}
bool compare(pair<int, pair<int,int> >a, pair<int, pair<int,int> > b )
{
    return a.first> b.first;
}
int main()
{
	int n,i,m1,m2,u,v,c,count=0,t;
	lli chef_profit=0,other_profit=0;
	vector<pair<int, pair<int,int> > >chef,others;

	t=read_int();

	while(t--)
	{
		//cin>>n>>m1>>m2;
		n=read_int();
		m1=read_int();
		m2=read_int();

		chef.clear();
		others.clear();
		count=0;
		chef_profit=0,other_profit=0;

		for(i=0;i<m1;i++)
		{
			//cin>>u>>v>>c;
			u=read_int();v=read_int();c=read_int();
			others.push_back(mp(c,mp(u,v)));
		}
		for(i=0;i<m2;i++)
		{
			//cin>>u>>v>>c;
			u=read_int();v=read_int();c=read_int();
			chef.push_back(mp(c,mp(u,v)));
		}
		sort(chef.begin(),chef.end(),compare);
		sort(others.begin(),others.end());

		make_set(n);

		for(i=0;i<m2;i++)
		{
			int u=chef[i].second.first;
			int v=chef[i].second.second;
			if(find_parent(u)!=find_parent(v))
			{
				chef_profit+= chef[i].first;
				count++;
				union_set(u,v);
			}
		}
		for(i=0;i<m1;i++)
		{
			int u=others[i].second.first;
			int v=others[i].second.second;
			if(find_parent(u)!=find_parent(v))
			{
				other_profit+=others[i].first;
				count++;
				union_set(u,v);
			}
		}
		if(count<n-1)
			printf("Impossible\n");
		else
			printf("%lld %lld\n",chef_profit,chef_profit+other_profit);

	}

	return 0;
}
