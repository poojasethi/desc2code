    #include <cstdio>
    #include <cstring>
    #include <algorithm>
    
    using namespace std;
#define gc getchar_unlocked
void scanint(int &x)
{
register int c = gc();
x = 0;
int neg = 0;
for(;((c<48 || c>57) && c != '-');c = gc());
if(c=='-') {neg=1;c=gc();}
for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
if(neg) x=-x;
}
#define pc putchar_unlocked
void printint(int n)
{
char op[41];
int size = 40;
while(n)
{
op[size--] = n%10+'0';
n/=10;
}
for(int i=size+1;i<41;i++)
pc(op[i]);
 
}
    const int N=5500,M=20500,S=1024*1024;
    char IN[S],*iptr,stk[20];
    struct fastIO
    {
    fastIO()
    {
    fread(IN,1,S,stdin);
    iptr=IN;
    }
    void check()
    {
    int size=IN+S-iptr;
    if(size<200)
    {
    memcpy(IN,iptr,size);
    fread(IN+size,1,S-size,stdin);
    iptr=IN;
    }
    }
    int sc()
    {
    check();
    while(*iptr<=32) iptr++;
    int x=0;
    while(*iptr>32) x= x*10 + *iptr++ -'0';
    return x;
    }
    
    };
     
    struct node {
    int f,t,c; node() { } bool operator <(const node &o) const { return c>o.c; }
    };
    node x[M],y[M];
    int pa[N],ra[N];
     
    int find(int n)
    { if(pa[n]!=n) 
    pa[n]=find(pa[n]); 
    return pa[n]; }
    
    void uni(int x,int y)
    {
    int px=find(x),py=find(y);
    if(px!=py)
    {
    if(ra[px]>ra[py])
    pa[py]=px;
    else pa[px]=py;
    if(ra[px]==ra[py])
    ra[py]++;
    }
    
    }
     
    int main()
    {
    int t,n,i,m1,m2,nn;
    long long ca,aa;
    fastIO io;
    t=io.sc();
    
    while(t--)
    {
    n=io.sc();
    m1=io.sc();
    m2=io.sc();
    ca=aa=0;
    
    for(nn=n-1,i=0;i<n;i++) pa[i]=i,ra[i]=0;
    for(i=0;i<m1;i++) 
    { x[i].f=io.sc(); x[i].t=io.sc(); x[i].c=io.sc(); }
    for(i=0;i<m2;i++) 
    { y[i].f=io.sc(); y[i].t=io.sc(); y[i].c=io.sc(); }
    sort(x,x+m1); 
    sort(y,y+m2);
    for(i=0;i<m2 && nn;i++)
    
    if(find(y[i].f)!=find(y[i].t))
    {
    ca+=y[i].c;
    nn--;
    uni(y[i].f,y[i].t);
    }
    for(i=m1-1;i>=0 && nn;i--)
    if(find(x[i].f)!=find(x[i].t))
    {
    aa+=x[i].c;
    nn--;
    uni(x[i].f,x[i].t);
    }
    if(nn)
    printf("Impossible\n");
    else 
    printf("%lld %lld\n",ca,ca+aa);
    }
    return 0;
    } 