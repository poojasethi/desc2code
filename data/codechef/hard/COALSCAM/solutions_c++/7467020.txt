#include<iostream>
#include<stdio.h>
#include<vector>
#include<algorithm>
using namespace std;
typedef long long int lli;
lli rank[1000100];
lli par[1000100];
#include<bits/stdc++.h>
lli  find(lli a)
  {
    if(par[a]!=par[par[a]])
     {
      par[a]=find(par[a]);
     }

     return par[a];
 }
lli merge(lli a, lli  b)
{
  lli x=find(a);
  lli y=find(b);
  if(rank[x]>rank[y])
  {
      par[y]=x;
   
  }
  else
  {
      par[x]=y;
   if(rank[x]==rank[y])
   rank[y]++;
  }
}

int main()
{
	int t;
	 cin>>t;
	  while(t--)
	   {
	   	 
	   	   lli n,m1,m2;
	   	   list<lli> li[10000+100];
	   	    cin>>n>>m1>>m2;
	   	     int visited[100000];
	   	     for(lli i=0;i<=n+10000;i++)
              {
                   par[i]=i;
                   visited[i]=0;
                   rank[i]=0;
                  }
	   	 
	   	         lli c , a,b;
	   	    
	   	        
	   	         vector<pair<pair<lli,lli>, lli > > v;
	   	         
	   	      for(lli i=0;i<m1;i++)
	   	       {
	   	       	   cin>>a>>b>>c;
	   	       	   v.push_back(make_pair(make_pair(c,a),b));
	   	       }
	   	       
	   	        sort(v.begin(),v .end());
	   	        lli cc= 0,pub=0;
	   	         //cout<<"reading chef "<<endl;
	   	        
	   	        vector<pair<pair<lli,lli>, lli > > v2;
	   	       for(lli i=0;i<m2;i++)
	   	       {
	   	       	  cin>>a>>b>>c;
	   	       	   v2.push_back(make_pair(make_pair(c,a),b));
	   	       }
	   	       
	   	        sort(v2.begin(),v2.end());
	   	        reverse(v2.begin(),v2.end());
	   	    for(lli i=0;i<m2;i++)
	   	     {
	   	     	
	   	     	  a=v2[i].first.second;
	   	     	  b=v2[i].second;
	   	     	  c=v2[i].first.first;
	   	     	  if(find(a)!=find(b))
	   	     	   {
	   	     	   	   cc+=c;
	   	     	   	   merge(a,b);
	   	     	   	   li[a].push_back(b);
	   	     	   	   li[b].push_back(a);
	   	     	   	   
	   	     	   }
	   	     	  
	   	     	
	   	     }
	   	      
	   	       for(int i=0;i<m1;i++)
	   	     {
	   	     	
	   	     	  a=v[i].first.second;
	   	     	  b=v[i].second;
	   	     	  c=v[i].first.first;
	   	     	  if(find(a)!=find(b))
	   	     	   {
	   	     	   	   pub+=c;
	   	     	   	   merge(a,b);
	   	     	   	   li[a].push_back(b);
	   	     	   	   li[b].push_back(a);
	   	     	   	   
	   	     	   }
	   	     	  
	   	     	
	   	     }
	   	      
	   	        
	   	           lli count=0;
	   	           
	   	            stack<lli>s;
	   	             s.push(0);
	   	               visited[0]=1;
	   	             while(!s.empty())
	   	              {
	   	              	 lli start=s.top();
	   	              	 s.pop();
	   	              	 
	   	              	    count++;
	   	              	      list<lli> :: iterator it;
	   	              	       for(it=li[start].begin();it!=li[start].end();it++)
	   	              	        {
	   	              	        	 if(!visited[*it])
	   	              	        	  {
	   	              	        	  	 visited[*it]=1;
	   	              	        	  	  s.push(*it);
	   	              	        	  }
	   	              	        }
	   	              }
	   	      //    cout<<" count is "<<count<<endl;
	   	           if(count==n)
	   	           cout<<cc<<" "<<cc+pub<<endl;
	   	           else
	   	              cout<<"Impossible"<<endl;
	   	             // for(int i=0;i<n;i++) cout<<par[i]<<" "<<i<<endl;*/
	   }
 
 return 0;
}