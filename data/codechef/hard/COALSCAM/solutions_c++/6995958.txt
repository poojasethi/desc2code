# include<stdio.h>
# include<queue>
# include<vector>
# include<string.h>
# include<iostream>
# include<algorithm>
# include<math.h>
using namespace std;
int uni(int x, int y);
int find( int x);
int f=0,rank[10000000],par[10000000],e=0;
int find( int x)
{
   while(par[x]!=x)
   x=par[x];
   return x;
}
/*int uni(int u,int v)
{
	int upar=find(u);
	int vpar=find(v);
	if(upar==vpar)
	return -1;
	else
	{
		e++;
		printf("e%d\n\n",e);
		if(rank[upar]>rank[vpar])
		{
			par[vpar]=upar;
		}
		else if(rank[upar]<rank[vpar])
		{
			par[upar]=vpar;
		}
		else
		{
			par[upar]=vpar;
			rank[vpar]++;
		}
		return 1;
	}
}
*/
int uni(int x, int y)
{
     int px=find(x);
     int py=find(y);
     if(px==py)
     return -1;
     else
     {
    		e++;
    		
    		if(rank[py]>rank[px])
    		par[px]=py;
    		else if(rank[py]<rank[px])
    		par[py]=px;
    		else
    		{
    			par[py]=px;
    			rank[px]+=1;
    		}
    		return 1;
    }
}
main()
{
	
	int t,u,v,i,m1,m2,n,wt;
	long long int chefprof=0,cost=0;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d%d",&n,&m1,&m2);
		vector<vector<int> > comp(m1,vector<int>(3,-1));
		vector<vector<int> > chef(m2,vector<int>(3,-1));
		for(i=0;i<n;i++)
		{
			par[i]=i;
			rank[i]=1;
		}
		for(i=0;i<m1;i++)
		{
			scanf("%d%d%d",&u,&v,&wt);
			comp[i][0]=wt;
			comp[i][1]=u;
			comp[i][2]=v;
		}
		for(i=0;i<m2;i++)
		{
			scanf("%d%d%d",&u,&v,&wt);
			chef[i][0]=wt;
			chef[i][1]=u;
			chef[i][2]=v;
		}
		sort(comp.begin(),comp.end());
		sort(chef.rbegin(),chef.rend());
		for(i=0;i<m2;i++)
		{
			if(e<n-1)
			{
				f=uni(chef[i][1],chef[i][2]);
				if(f!=-1)
				chefprof=chefprof+chef[i][0];
				f=0;
			}
			else if(e>=n-1)
			break;
		}
		
		if(e<n-1)
		{
			
			for(i=0;i<m1;i++)
			{	
				if(e<n-1)
				{	
					f=uni(comp[i][1],comp[i][2]);
					if(f!=-1)
					cost=cost+comp[i][0];
					f=0;
				}
				else if(e>=n-1)
				break;
			}
		}
		if(e<n-1)
		printf("Impossible\n");
		else
		printf("%lld %lld\n",chefprof,chefprof+cost);
		chefprof=0;
		cost=0;
		e=0;
	}
return 0;
}