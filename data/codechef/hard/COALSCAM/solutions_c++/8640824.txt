#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
using namespace std;
#define pb push_back
#define mp make_pair
#define ll long long
int n=5000;
vector<int> p (n);
 vector < pair <int,pair<int,int> > >edge1;
vector <pair <int,pair<int,int> > > edge2;


int dsu_get (int v) {
	return (v == p[v]) ? v : (p[v] = dsu_get (p[v]));
}

void dsu_unite (int a, int b) {
	a = dsu_get (a);
	b = dsu_get (b);
	if (rand() & 1)
		swap (a, b);
	if (a != b)
		p[a] = b;
}


int main()
{
    int t;
    scanf("%d",&t);

    while(t--){
            edge1.clear();
            edge2.clear();


        int n,m1,m2;
        scanf("%d %d %d",&n,&m1,&m2);
        for(int i=0;i<m1;i++){
         int u,v,w;
         scanf("%d %d %d",&u,&v,&w);
          edge1.push_back(make_pair(w,make_pair(u,v))) ; // weight source destination type edge created

        }
        for(int i=0;i<m2;i++){
            int u,v,w;
             scanf("%d %d %d",&u,&v,&w);
             edge2.push_back(make_pair(w,make_pair(u,v))) ;

        }

       ll cost1 = 0;
        int count=0;
        vector <pair <int,int> >res2;// chef
	sort (edge2.begin(), edge2.end());
reverse(edge2.begin(), edge2.end());
for (int i=0; i<5000; ++i)
	p[i] = i;
p.resize (n);
for (int i=0; i<m2; ++i) {
	int a = edge2[i].second.first,  b = edge2[i].second.second,  l = edge2[i].first;
	if (dsu_get(a) != dsu_get(b)) {
		cost1 += l;
		res2.push_back (edge2[i].second);
		dsu_unite (a, b);
		count++;
	}
}
ll cost2=0;
vector <pair <int,int> >res1;// for other than chef
sort (edge1.begin(), edge1.end());
for (int i=0; i<m1; ++i) {
	int a = edge1[i].second.first,  b = edge1[i].second.second,  l = edge1[i].first;
	if (dsu_get(a) != dsu_get(b)) {
		cost2 += l;
		res1.push_back (edge1[i].second);
		dsu_unite (a, b);
		count++;
	}
}
    if(count<n-1)
        printf("Impossible\n");
    else
        printf("%lld %lld\n",cost1,cost2+cost1);


}
    return 0;
}
