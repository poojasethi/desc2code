#include<bits/stdc++.h>
#define iii pair<ll, pair<ll, ll> >
#define ll long long
using namespace std;

main() {
    ll t;
    scanf("%lld", &t);
    while (t--) {

        vector <pair<ll, ll> > adj[10000];
        priority_queue <iii, vector<iii >, greater<iii > > edges;
        bool visited[10000]={false};
        ll tot=0, tot2=0;
        ll n, m1, m2;

        scanf("%lld %lld %lld", &n, &m1, &m2);

        for (ll i=1; i<=m1; i++) {
            ll t1, t2, t3;
            scanf("%lld %lld %lld", &t1, &t2, &t3);
            adj[t1].push_back(make_pair(t2, t3));
            adj[t2].push_back(make_pair(t1, t3));
        }

        for (ll i=1; i<=m2; i++) {
            ll t1, t2, t3;
            scanf("%lld %lld %lld", &t1, &t2, &t3);
            adj[t1].push_back(make_pair(t2, -t3));
            adj[t2].push_back(make_pair(t1, -t3));
        }

//----------------PRIMS ALGORITHM------------------------------------
        visited[0]=1;
        for (ll i=0; i<adj[0].size(); i++) {
            edges.push(make_pair(adj[0][i].second, make_pair(0, adj[0][i].first)));
        }
        while(!edges.empty()) {
            iii top=edges.top();
            edges.pop();
            ll a=top.second.first;
            ll b=top.second.second;
            ll weight=top.first;

            if (visited[a] && visited[b]) continue;

            else if (visited[a] && !visited[b]) {
                if (weight<0) {
                    tot-=weight;
                    tot2-=weight;
                }
                else tot2+=weight;
                visited[b]=1;
                for (ll i=0; i<adj[b].size(); i++) {
                    edges.push(make_pair(adj[b][i].second, make_pair(b, adj[b][i].first)));
                }
            }

            else if (!visited[a] && visited[b]) {
                if (weight<0) {
                    tot-=weight;
                    tot2-=weight;
                }
                else tot2+=weight;
                visited[a]=1;
                for (ll i=0; i<adj[a].size(); i++) {
                    edges.push(make_pair(adj[a][i].second, make_pair(a, adj[a][i].first)));
                }
            }
        }

//------------Check for disjoint sets--------------------------
        for (int i=0; i<n; i++) {
            if (!visited[i]) {
                cout<<"Impossible"<<endl;
                goto last;
            }
        }

        cout<<tot<<" "<<tot2<<endl;
        last:;
    }
}
