//
#include<cstdio>
#include<vector>
#include<queue>
using namespace std;
typedef pair<int ,int> pi;
priority_queue<pair<int ,pi> >pq1,pq2;
vector<int> edges[5005],pset;
bool visit[5005];
int findset(int a)
{
    return pset[a]==a?a:pset[a]=findset(pset[a]);//path compression now every node directly pts to the head of the set
}
bool isset(int a,int b)
{
    return findset(a)==findset(b);
}
void join(int a,int b)
{
    pset[findset(a)]=findset(b);
}
void dfs(int node)
{
    visit[node]=true;
    int i;
    for(i=0;i<edges[node].size();i++)
    {
        if(!visit[edges[node][i]])
            dfs(edges[node][i]);
    }

}
int main()
{
    //pq1---uncorrupt
    //pq2----corrupt
    int t,n,m1,m2,i,j,k,l,cc;
    long long mstunc,mstc;
    scanf("%d",&t);
    bool flag;
    while(t--)
    {
        //flag=true;
        scanf("%d%d%d",&n,&m1,&m2);
        cc=0;
        pset.clear();
        pset.resize(n);
        for(i=0;i<n;i++)
            {
                edges[i].clear();
                pset[i]=i;
                visit[i]=false;
            }
        for(i=0;i<m1;i++)
        {
            scanf("%d%d%d",&j,&k,&l);
            pq1.push(make_pair(-l,make_pair(j,k)));
            edges[j].push_back(k);
            edges[k].push_back(j);

        }
        for(i=0;i<m2;i++)
        {
            scanf("%d%d%d",&j,&k,&l);
            pq2.push(make_pair(l,make_pair(j,k)));
            edges[j].push_back(k);
            edges[k].push_back(j);

        }
        for(i=0;i<n&&cc<2;i++)
        {
            if(!visit[i])
            {
                dfs(i);
                cc++;
            }
            /*if(cc>1)
                {
                    //flag=false;
                    break;
                }*/
        }
        //if(cc>1)
          //  flag=false;
           pair<int ,pi> p;
            int a,b;
          mstc=mstunc=0;
          while(!pq2.empty())
          {
              p=pq2.top();
              a=p.second.first;
              b=p.second.second;
              pq2.pop();
              if(!isset(a,b))
              {
                  mstc+=(long long)p.first;
                  join(a,b);
              }
          }
          while(!pq1.empty())
          {
              p=pq1.top();
              a=p.second.first;
              b=p.second.second;
              pq1.pop();
              if(!isset(a,b))
              {
                  mstunc-=(long long)p.first;
                  join(a,b);
              }
          }
         //printf("%lld %lld\n",mstc,mstunc+mstc);

        /*
        if(flag)
        printf("1\n");
        else printf("0\n");*/
        if(cc>1)
             printf("Impossible\n");

            else printf("%lld %lld\n",mstc,mstunc+mstc);
        //if(!flag) printf("Impossible\n");
    }
return 0;
}
