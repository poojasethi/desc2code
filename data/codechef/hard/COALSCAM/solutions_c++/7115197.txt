#include<bits/stdc++.h>
using namespace std;
int parent[5005],rank[5005];
long long total_max,total_min;
int find(int x)
{
	if(parent[x]==x)
	return x;
	else
	return find(parent[x]);
}
void reset(int n)
{
	total_min=0;
	total_max=0;
	int i;
	for(i=0;i<=n;i++)
	{
	parent[i]=i;
	rank[i]=1;
	}
}
void kruskal(vector< pair< long long,pair< int,int > > >adj,int k)
{
	int i;
	if(k==0)
	sort(adj.rbegin(),adj.rend());
	if(k==1)
	sort(adj.begin(),adj.end());
	for(i=0;i<adj.size();i++)
	{
		int px=find(adj[i].second.first);
		int py=find(adj[i].second.second);
		if(px!=py)
		{
			if(rank[px]>rank[py])
			parent[py]=px;
			else if(rank[py]>rank[px])
			parent[px]=py;
			else
			{
				parent[px]=py;
				rank[py]++;
			}
			if(k==0)
			total_max+=(long long)adj[i].first;
			total_min+=(long long)adj[i].first;
		}
	}
}
int main()
{
	int t,i,j,u,v,c,m1,m2,n;
	int visited[5005];
	scanf("%d",&t);
	while(t--)
	{
		vector< pair< long long,pair< int,int > > >adj1,adj2;
		adj1.clear();
		adj2.clear();
		scanf("%d%d%d",&n,&m1,&m2);
		memset(visited,0,sizeof(visited));
		reset(n);
		for(i=0;i<m1;i++)
		{
			scanf("%d%d%d",&u,&v,&c);
			adj1.push_back(make_pair(c,make_pair(u,v)));
			visited[u]=1;
			visited[v]=1;
		}
		for(i=0;i<m2;i++)
		{
			scanf("%d%d%d",&u,&v,&c);
			adj2.push_back(make_pair(c,make_pair(u,v)));
			visited[u]=1;
			visited[v]=1;
		}
		int flag=0;
		for(i=0;i<n;i++)
		if(visited[i]==0)
		flag=1;
		if(flag==1)
		printf("Impossible\n");
		else
		{
		kruskal(adj2,0);
		kruskal(adj1,1);
		printf("%lld %lld\n",total_max,total_min);
		}
	}
	return 0;
}