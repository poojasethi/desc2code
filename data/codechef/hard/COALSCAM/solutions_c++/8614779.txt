#include<iostream>
#include<stdio.h>
#include<algorithm>
using namespace std;

struct edge{
    int src,dest;
    long int wt;
};

bool compare1(edge a,edge b){
    return a.wt < b.wt;
}
bool compare2(edge a,edge b){
    return a.wt > b.wt;
}
int parent(int  par[],int i){
    if(i == par[i])
        return i;
    par[i] = parent(par,par[i]);
    return par[i];
}
long long int  MST(int par[],edge edges[],int edg_no,int n,int &freq){
    long long int sum = 0;
    for(int i=0;i<edg_no;i++){
        if(freq == n-1)
            return sum;
        if(parent(par,edges[i].src) != parent(par,edges[i].dest)){
            par[parent(par,edges[i].dest)] = parent(par,edges[i].src);
            sum += edges[i].wt;
            freq++;
        }
    }
    return sum;
}
int main(){
    int tc,n,m1,m2,i,freq,par[5001];
    long long int ans1,ans2;
    edge edges1[20000],edges2[20000];

    scanf("%d",&tc);
    while(tc--){
        scanf("%d%d%d",&n,&m1,&m2);
        for(i=0;i<m1;i++)
            scanf("%d%d%ld",&edges1[i].src,&edges1[i].dest,&edges1[i].wt);
        for(i=0;i<m2;i++)
            scanf("%d%d%ld",&edges2[i].src,&edges2[i].dest,&edges2[i].wt);

        for(i=0;i<n;i++)
            par[i] = i;
        sort(edges1,edges1+m1,compare1);
        sort(edges2,edges2+m2,compare2);
        freq = 0;
        ans1 = MST(par,edges2,m2,n,freq);
        ans2 = MST(par,edges1,m1,n,freq);
        if(freq < n-1)
            printf("Impossible\n");
        else
            printf("%lld %lld\n",ans1,ans1+ans2);
    }
    return 0;
}
