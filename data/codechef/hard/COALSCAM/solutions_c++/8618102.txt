#include<stdio.h>
long long int arr[1000000],w[1000000],wp[1000000],p[1000000],w2[1000000],wp2[1000000],p2[1000000];
void merge(long long int l1,long long int r)
{
    
    long long int i, j, k1,m=(l1+r)/2;
    long long int n1 = m - l1 + 1;
    long long int n2 =  r - m;
 
    
    long long int L[n1], R[n2],e[n1],f[n1],Le[n1],Rf[n2];
 
    
    for(i = 0; i < n1; i++)
        {L[i] = w[l1 + i];
        e[i]=p[i+l1];
        Le[i]=wp[i+l1];
        }
    for(j = 0; j < n2; j++)
      {       R[j] = w[m + 1+ j];
        f[j]=p[m+1+j];
        Rf[j]=wp[m+1+j];
       }
 
    i = 0;
    j = 0;
    k1 = l1;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            w[k1] = L[i];
            p[k1]=e[i];
            wp[k1]=Le[i];
            i++;
        }
        else
        {
            w[k1] = R[j];
            p[k1]=f[j];
            wp[k1]=Rf[j];
            j++;
        }
        k1++;
    }
 
    
    while (i < n1)
    {
        w[k1] = L[i];
        p[k1]=e[i];
        wp[k1]=Le[i];
        i++;
        k1++;
    }
 
    
    while (j < n2)
    {
        w[k1] = R[j];
        p[k1]=f[j];
        wp[k1]=Rf[j];
        j++;
        k1++;
    }
   
}
void mergesort(long long int low,long long int high)
{
    long long int mid=(low+high)/2;
    if(low>=high)
    return;
    mergesort(low,mid);
    mergesort(mid+1,high);
    merge(low,high);
}
 int find(int i)
{
      if(arr[i]<0)
      return i;
      return find(arr[i]);
}
void unin(int i,int j)
{
      int root1=find(i),root2=find(j);
      if(root1==root2)
      return;
      if(arr[root2]<arr[root1])
      arr[root1]=root2;
      else 
      {
            if(arr[root1]==arr[root2])
            {
                  arr[root1]--;}
                   arr[root2]=root1;
                  
            
      }
      
}
int main()
{long long int profit,cost;
      int t,n,m1,m2;
      scanf("%d",&t);
      while(t--)
      {profit=cost=0;
            scanf("%d%d%d",&n,&m1,&m2);
            for(int i=0;i<=n;i++)
            arr[i]=-1;
           
                        for(int i=0;i<m1;i++)
            {
                  scanf("%lld%lld%lld",&p[i],&wp[i],&w[i]);
                  p[i]++;wp[i]++;
            }
            
             for(int i=0;i<m1;i++)
            {
                p2[i]= p[i],wp2[i]=wp[i],w2[i]=w[i];
                  
            }
            
             for(int i=0;i<m2;i++)
            {
                  scanf("%lld%lld%lld",&p[i],&wp[i],&w[i]);
                  p[i]++;wp[i]++;
            }
            mergesort(0,m2-1);
            for(int i=m2-1;i>=0;i--)
            {
                  if(find(p[i])!=find(wp[i])&&find(p[i])!=-1)
                  {
                        unin(p[i],wp[i]);
                        cost+=w[i];//printf("hh%lldhh",w[i]);
                  }
            }
             for(int i=0;i<m1;i++)
            {
                p[i]= p2[i],wp[i]=wp2[i],w[i]=w2[i];
                  
            }
            mergesort(0,m1-1);
            for(int i=0;i<m1;i++)
            {
                  if(find(p[i])!=find(wp[i])&&find(p[i])!=-1)
                  {
                        unin(p[i],wp[i]);
                        profit+=w[i];
                  }
            }
            int flg=0;
            for(int i=1;i<=n;i++)
            {
                  if(find(i)!=find(1))
                  {//printf("%d",i);
                        flg++;
                        break;
                  }
            }
            if(flg==0)
            printf("%lld %lld\n",cost,profit+cost);
            else
            printf("Impossible\n");
      }return 0;
}