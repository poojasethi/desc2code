#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
using namespace std;
typedef long long int LL;
std::vector< pair< LL ,  pair<int , int > > > edges1 , edges2;

int par[100010] , in[100010];

void init(){
	for(int i=0;i<100004;i++)
		par[i] = i , in[i] = 0;
}


int find_set(int u){
	if(par[u]==u)
		return u;
	par[u] = find_set(par[u]);
	return par[u];
}

void union_set(int u , int v){
	if(find_set(u)==find_set(v))
		return;
	par[find_set(u)] = find_set(v);
}


int main(){
	int N , M1 , M2  , u , v , flag , test;
	LL c;
	LL ans , ans2;
	scanf("%d",&test);
	while(test--)
	{
	init();
	scanf("%d %d %d",&N,&M1 , &M2);
	for(int i=1;i<=M1;i++){
		scanf("%d %d %lld",&u,&v,&c);	
		u++;
		v++;
		edges1.push_back(make_pair(c , make_pair(u , v) ));
	}
	for(int i=1;i<=M2;i++){
		scanf("%d %d %lld",&u,&v,&c);	
		u++;
		v++;
		edges2.push_back(make_pair(-1LL*c , make_pair(u , v)));
	}
	sort(edges1.begin() , edges1.end());
	sort(edges2.begin() , edges2.end());
	ans  = 0;
	ans2 = 0;
	LL t = -1;
	for(int i=0;i<M2;i++){
		if(find_set(edges2[i].second.first)!=find_set(edges2[i].second.second)){
			// cout << "#" << i << endl;
			union_set(edges2[i].second.first , edges2[i].second.second);
			in[edges2[i].second.first] = 1;
			in[edges2[i].second.second] = 1;
			ans = ans + (t*edges2[i].first);
		}
	}
	for(int i=0;i<M1;i++){
		if(find_set(edges1[i].second.first)!=find_set(edges1[i].second.second)){
			// cout << "$" << i << endl;
			union_set(edges1[i].second.first , edges1[i].second.second);
			in[edges1[i].second.first] = 1;
			in[edges1[i].second.second] = 1;
			ans2 = ans2 + (edges1[i].first);
		}
	}
	flag = 0;
	for(int i=1;i<=N && flag==0;i++){
		if(in[i]!=1)
			flag = 1;
	}
	if(flag==1)
		printf("Impossible\n");
	else
		printf("%lld %lld\n",ans , ans + ans2);
	edges1.clear();
	edges2.clear();
	}
return 0;
}








