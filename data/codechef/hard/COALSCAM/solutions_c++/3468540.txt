#include <cstdio>
#include <algorithm>
#include <map>
#include <vector>
#include <queue>
#define MIN(a,b)    a<b?a:b
using namespace std;

typedef long long LL;

typedef struct edge
{
    int u,v,w;
} edge;

bool compare(edge a,edge b)
{
    return (a.w < b.w);
}

int parent[5001],rank[5001];

void init()
{
    int i;
    for(i = 0; i < 5001; i++)
    {
        parent[i] = i;
        rank[i] = 0;
    }
}

int find(int n)
{
    if(parent[n] != n)
        return parent[n] = find(parent[n]);
    else return n;
}

void join(int a,int b)
{
    a = find(a);
    b = find(b);
    if(rank[a] < rank[b])
        parent[a] = b;
    else
    {
        parent[b] = a;
        if(rank[a] == rank[b])
            rank[a]++;
    }
}



int main()
{
    int t;
    scanf("%d", &t);
    while(t--)
    {
        int n,m1,m2,i,c = 0;
        LL profit = 0,cost = 0;
        edge e;
        vector<edge> edgeList;
        init();
        scanf("%d %d %d", &n, &m1, &m2);
        for(i = 0; i < m1; i++)
        {
            scanf("%d %d %d",&e.u, &e.v, &e.w);
            edgeList.push_back(e);
        }
        for(i = 0; i < m2; i++)
        {
            scanf("%d %d %d",&e.u, &e.v, &e.w);
            e.w = -e.w;
            edgeList.push_back(e);
        }
        sort(edgeList.begin(),edgeList.end(),compare);
        for(i = 0; i < edgeList.size(); i++)
        {
            e = edgeList[i];
            int a = find(e.u);
            int b = find(e.v);
            if(a != b)
            {
                if(e.w < 0)
                    profit -= e.w;
                else    cost += e.w;
                join(e.u,e.v);
                c++;
            }
        }
        if(c < n-1)
            printf("Impossible\n");
        else
            printf("%lld %lld\n",profit,profit+cost);

    }
    return 0;
}
