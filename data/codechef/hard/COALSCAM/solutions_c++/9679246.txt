#include <iostream>
#include<algorithm>
//#include<stdio.h>
using namespace std;

struct edge
{
    int src, dest;
    long long int  weight;
}a[20005],b[20005];
int myComp(const void* a, const void* b)
{
    struct edge* a1 = (struct edge*)a;
    struct edge* b1 = (struct edge*)b;
    return a1->weight > b1->weight;
}
int myComp1(const void* a, const void* b)
{
    struct edge* a1 = (struct edge*)a;
    struct edge* b1 = (struct edge*)b;
    return a1->weight < b1->weight;
}

int parent[5005];
int find(int x)
{
    while(parent[x]!=-1)
        x=parent[x];
    return x;
}
int uni(int x,int y)
{
    if(x!=y)
    {
        parent[y]=x;
        return 1;
    }
    return 0;
}
int main()
{
  //  freopen("input.txt","r",stdin);
    int n,m1,m2,u,v,test;
    cin>>test;
for(int t=0;t<test;t++)
{
        cin>>n>>m1>>m2;
    for(int i=0;i<m1;i++)
    {
        cin>>b[i].src>>b[i].dest>>b[i].weight;
    }
    for(int i=0;i<m2;i++)
    {
        cin>>a[i].src>>a[i].dest>>a[i].weight;
    }

    for(int i=0;i<n;i++)
        parent[i]=-1;
    qsort(a, m2, sizeof(a[0]), myComp1);
//cout<<a[0].weight;
    int cnt =1;int i=0;long long int minwt=0,min=0;
    while(cnt<n && i<m2)
    {
        u=a[i].src;
        v=a[i].dest;
        u=find(u);
        v=find(v);
        if(uni(u,v))
        {
            cnt++;
            minwt+=a[i].weight;
        }
        i++;
    }
    min=minwt;
   //     cout<<minwt<<" "<<cnt;
    if( cnt<n)
    {
       // cout<<"yo";
        int j=0;
             // cout<<b[0].src<<" "<<b[0].dest;
            qsort(b, m1, sizeof(b[0]), myComp);
          while(cnt<n && j<m1)
          {
              u=b[j].src;
              v=b[j].dest;
//              cout<<u<<" "<<v;
              u=find(u);
              v=find(v);
              if(uni(u,v))
              {
             //  cout<<"yo";
                  cnt++;
                  minwt+=b[j].weight;
              }
              j++;
          }
    }if(cnt<n)
    cout<<"Impossible\n";
    else
    cout<<min<<" "<<minwt<<endl;
//    cout << "Hello world!" << endl;
}
    return 0;
}
