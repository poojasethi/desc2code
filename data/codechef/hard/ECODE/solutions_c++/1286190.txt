#include<cstdio>
#include<cstring>
#include<map>
#define ll long long

using namespace std;

ll Ans,Mult10[20],MultA[20],A,B,G,GetB;

int n;

ll Mult(ll fA,ll fB)
{	ll fC(0);
	for(;fB;fB>>=1,fA=(fA*2)%B)fC=(fC+(fB&1)*fA)%B;
	return fC;
}

struct Seq
{	
	map <ll,int> F;

	void Dfs(int l,int n,ll m,int Fun)
	{	if(l==n)
		{	if(!F.count(m))F[m]=10000000;
			if(F[m]>Fun)F[m]=Fun;
			return;
		}
		for(int i=0;i<10;i++)Dfs(l+1,n,(m+i*MultA[n-l-1])%B,Fun+i*Mult10[n-l-1]);
	}

}	fA,fB;

int main()
{	int i;
	scanf("%d%lld%lld%lld",&n,&A,&B,&G);
	MultA[0]=Mult10[0]=1;
	for(i=1;i<20;i++)MultA[i]=Mult(MultA[i-1],A);
	for(i=1;i<20;i++)Mult10[i]=Mult10[i-1]*10;
	if(n<=6)
	{	fA.Dfs(0,n,0,0);
		Ans=fA.F[G];
		for(i=0;i<n;i++)printf("%d",(Ans/Mult10[n-i-1])%10);
	}
	else
	{	fA.Dfs(0,n-6,0,0);
		fB.Dfs(0,6,0,0);
		Ans=1000000000000000ll;
		map<ll,int>::iterator I;
		for(I=fA.F.begin();I!=fA.F.end();I++)
		{	GetB=(G-Mult(I->first,MultA[6])+B)%B;
			if(fB.F.count(GetB))
			{	if(Ans>1ll*fB.F[GetB]+1ll*(I->second)*Mult10[6])
					Ans=1ll*fB.F[GetB]+1ll*(I->second)*Mult10[6];
			}
		}
		for(i=0;i<n;i++)printf("%d",(Ans/Mult10[n-i-1])%10);
	}
	return 0;
}
