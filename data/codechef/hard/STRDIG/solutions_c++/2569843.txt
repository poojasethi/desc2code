#include <bits/stdc++.h>
#define rep(x,n) for(int x=0;x<int(n);++x)
#define print(x) cout<<x<<endl
#define dbg(x) cerr<<#x<<" = "<<x<<endl
#define pv(x,y) {for(typeof(y) z=(x);z!=(y);z++)cerr<<*z<<" ";cerr<<endl;}
#define _ <<" , "<<
#define mp make_pair
#define x first
#define y second
using namespace std;
typedef pair<int,int> pt;

const int maxn = 1e5 + 47;
char Q[maxn];
int n;

template<class T,class U> T cast(U x) {
  stringstream ss; ss << x;
  T y; ss >> y;
  return y;
}

int large() {
  for(int begin=0;begin<10;begin++) {
    // [begin,...,begin+length-1]
    for(int length=1;length<=10;length++) if(begin+length<=n and Q[begin]!='0') {
      long long x = cast<long long>(string(Q+begin,Q+begin+length));
      int flag = (x >= 0 and x <= 1000000000);
      // check the previous number
      if(begin > 0) {
        if(x == 0) flag = false;
        string prev_x = cast<string>(x - 1);
        while(prev_x.size() > begin) prev_x.erase(prev_x.begin());
        if(string(Q,Q+begin) != prev_x) flag = false;
      }
      // check the following numbers
      for(int i=begin+length; i<n and flag;) {
        if(++x > 1000000000) flag = false;
        string nxt_x = cast<string>(x);
        rep(j,nxt_x.size()) if(i<n) {
          if(Q[i]!=nxt_x[j]) flag = false; else ++i;
        }
      }
      // is valid?
      if(flag) return 1;
    }
  }
  return 0;
}

string inc(string s) {
  long long x = cast<long long>(s);
  string t = cast<string>(x + 1);
  while(t.size() < s.size()) {
    t = "0" + t;
  }
  if(t.size() > s.size())  {
    t.erase(t.begin());
    t = "?" + t;
  }
  return t;
}

int solve() {
  if(n<=9) return 1;
  if(string(Q)==string("1000000000")) return 1;
  // small
  if(n<=18) {
    // A, (B=A+1)
    for(int begin=1;begin<n;begin++) if(Q[begin]!='0') {
      string A = inc(string(Q,Q+begin));
      string B = string(Q+begin,Q+n);
      rep(i,9) rep(j,9) {
        string AA = A; rep(k,i) AA = "?" + AA;
        string BB = B; rep(k,j) BB = BB + "?";
        if(AA.size() <= 10 and BB.size() <= 10 and AA.size() == BB.size()) {
          int flag = 1;
          rep(k,AA.size()) {
            if(AA[k]!='?' and BB[k]!='?' and AA[k]!=BB[k]) flag = 0;
            if(AA[k] == '?' and BB[k] == '?') AA[k] = BB[k] = '0';
            else if(AA[k] != '?') BB[k] = AA[k];
            else if(BB[k] != '?') AA[k] = BB[k];
            else assert(0);
          }
          long long bb = cast<long long>(BB);
          if(bb > 1000000000) flag = 0;
          if(flag) {
            dbg(A _ B);
            dbg(AA _ BB);
            return 1;
          }
        }
      }
    }
  }
  // large
  return large();
}

int main() {
  if(true) cin.sync_with_stdio(false);
  int T;
  for(cin>>T;T;T--){
    cin>>Q;
    n = strlen(Q);
    puts(solve()?"YES":"NO");
  }
  return 0;
}
