#include <iostream>
#include <fstream>
#include <cstdio>
#include <iomanip>
#include <sstream>
#include <cstring>
#include <string>
#include <cmath>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <functional>
#include <limits>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int ui;
typedef pair<int,int> pii;
typedef vector<vector<int> > graph;

const double pi = acos(-1.0);

#define oned(a, x1, x2) { cout << #a << ":"; for(int _i = (x1); _i < (x2); _i++){ cout << " " << a[_i]; } cout << endl; }
#define twod(a, x1, x2, y1, y2) { cout << #a << ":" << endl; for(int _i = (x1); _i < (x2); _i++){ for(int _j = (y1); _j < (y2); _j++){ cout << (_j > y1 ? " " : "") << a[_i][_j]; } cout << endl; } }

#define mp make_pair
#define pb push_back
#define fst first
#define snd second

string s;

int parseInt(string t) {
	int x = 0;
	int n = t.size();
	for(int i = 0; i < n; i++) {
		x = 10*x + (t[i]-'0');
	}
	return x;
}

string parseStr(int x) {
	string t;
	while(x > 0) {
		t += '0'+x%10;
		x /= 10;
	}
	reverse(t.begin(), t.end());
	return t;
}

void solve() {	
	int n = s.size();
	if(n < 10) {
		cout << "YES" << endl;
		return;
	}
	
	bool cool = false;
	for(int l = 1; l < 10 && !cool; l++) {
		for(int i = 0; i < l && !cool; i++) {
			if(i+l <= n) {
				if(s[i] != '0') {
					int curr = parseInt(s.substr(i,l));
					if(curr>1 || (curr==1 && i==0)) {
						string prev = parseStr(curr-1);
						int prevLen = prev.size();
						string currStr = prev.substr(prevLen-i, i);
						cool = true;
						int si = 0;
						while(si < n && cool) {
							int len = currStr.size();
							for(int j = 0; j < len && si < n; j++, si++) {
								if(s[si] != currStr[j]) {
									cool = false;
									break;
								}
							}
							currStr = parseStr(curr++);
						}
						curr-=2;
						if(curr > 1000000000) {
							cool = false;
						}
//						if(cool) {
//							cout << prev << endl;
//						}
					}
				}
			} else {
				int prev = parseInt(s.substr(0,i));
				string last = parseStr(prev+1);
				if((int)last.size() > i) {
					last = last.substr(1,i);
				}
				while((int)last.size() < i) {
					last = '0'+last;
				}
				string curr = s.substr(i,n-i);
				if(curr[0] != '0') {
					cool = true;
					for(int p = 0, q = l-i; p < i && q < n-i; p++, q++) {
						if(last[p]!=curr[q]) {
							cool = false;
							break;
						}
					}
//					if(cool) {
//						cout << last << ' ' << curr << endl;
//					}
				}
			}
		}
	}
	
	if(string("9999999991000000000").find(s) != string::npos) {
		cool = true;
	}
	
	cout << (cool ? "YES" : "NO") << endl;
}

int main() {
//	freopen("input.in", "w", stdout);
//	cout << 10 << endl;
//	for(int i = 0; i < 10; i++) {
//		for(int j = 0; j < 100000; j++) {
//			printf("1");
//		}
//		printf("\n");
//	}
//	return 0;
	
//	freopen("input.in", "r", stdin);
	int t; cin >> t;
	for(int i = 0; i < t; i++) {
		cin >> s;
		solve();
	}
}
