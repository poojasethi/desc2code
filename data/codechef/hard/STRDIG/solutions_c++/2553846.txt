#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
string base;
char buf[100010];
int L;
string substr(int lo , int hi){
  string ret = "";
  for(int i=lo;i<=hi;++i)
   ret += buf[i];
  return ret;
}
string toStr(ll w , int lo = 0){
  string ret = "";
  while(w > 0)
   ret += w%10 + '0',
   w /= 10;
  while(sz(ret) < lo)
   ret += '0';
  reverse(all(ret));
  return ret;
}
ll fromStr(const string& w){
  ll ret = 0;
  for(int i=0;i<sz(w);++i)
   ret = ret*10 + w[i] - '0';
  return ret;
}
bool OK(ll w){
  return w>0 && w<=1000000000;
}
bool can_get(ll num , int beg){
  ll cur = num;
  int pos = beg;
  for(;;){
   string put = toStr(cur);
   if(pos + sz(put) - 1 >= L)break;
   if(!OK(cur))return false;
   if(substr(pos , pos+sz(put)-1) != put)
    return false;
   pos += sz(put);
   ++cur;
         }
  if(pos < L){
   if(!OK(cur))return false;
   string put = toStr(cur);
   if(sz(put) < L-pos)return false;
   if(substr(pos , L-1) != put.substr(0 , L-pos))
    return false;
             }
  if(beg){
   --num;
   if(!OK(num))return false;
   string put = toStr(num);
   if(sz(put) < beg)return false;
   if(substr(0 , beg-1) != put.substr(sz(put) - beg , beg))
    return false;
         }
  return true;
}
bool two_wrds(int mid , int len){
  string beg = substr(0 , mid-1),
         end = substr(mid , L-1);
  if(beg.empty() || end.empty())
   return false;
  string buf(len , '?');
  if(sz(buf) < sz(beg) ||
     sz(buf) < sz(end)   )return false;
  for(int i=0;i<sz(end);++i)
   buf[i] = end[i];
  ll l_beg = fromStr(beg);
  ++l_beg;
  int begl = sz(beg);
  beg = toStr(l_beg , begl);
  for(int i=0;i<begl;++i)
   buf[sz(buf)-1-i] = beg[sz(beg)-1-i];
  if(sz(beg) == begl+1)
   if(buf[sz(buf)-1-begl] == '?')
    buf[sz(buf)-1-begl] = '1';
  for(int i=0;i<sz(buf);++i)
   if(buf[i] == '?')
    buf[i] = '0';
  if(buf[0] == '0')return false;
  ll val = fromStr(buf);
  return can_get(val , mid);
}
int lo , hi;
bool doit(){
  scanf("%s" , &buf);
  //lo = rand()%sz(base);
  //hi = rand()%sz(base);
  //if(lo > hi)swap(lo , hi);
  //for(int i=lo;i<=hi;++i)
  // buf[i-lo] = base[i];
  //buf[hi-lo+1] = 0;
  //strcpy(buf , "023123502");
  L = strlen(buf);
  // only one
  if(L < 12){
   string tmp(buf);
   if(tmp[0] == '0')
    tmp.insert(tmp.begin() , '1');
   if(OK(fromStr(tmp)))return true;
            }
  // two
  //cout<<two_wrds(6 , 7);
  //system("pause");
  for(int beg=1;beg<10;++beg)
   for(int len=1;len<=10;++len)
    if(beg + len - 1 > L)
     if(two_wrds(beg , len))
      return true;
  // more
  for(int beg=0;beg<10;++beg)
   for(int len=1;len<=10;++len)
    if(beg + len - 1 < L && buf[beg] != '0')
     if(can_get(fromStr(substr(beg , beg+len-1)) , beg))
      return true;
  // none
  return false;
}
int main(){
  //for(int i=1234567;i<1234567+1000;++i)
  // base += toStr(i);
  int Q;
  scanf("%d" , &Q);
  while(Q-- > 0)
   puts(doit() ? "YES" : "NO");
  //lo = 3196 , hi = 3204;
  //cout<<doit()<<endl;
  /*
  for(int i=0;i<100000;++i)
   if(doit() == false){
    cout<<lo<<' '<<hi<<endl;
    cout<<"BAD\n";
                      }
  */
  return 0;
}
