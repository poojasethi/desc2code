//---------------------------JUGNU: LET YOUR LIGHT SHINE---------------------------//
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define pf push_front
#define sz size
#define mk make_pair
#define ln length
#define vt(a) vector <ll> a
#define st(a) set <ll> a
#define sti(a) set <ll>::iterator a
#define fr(i,a,b) for(i=a;i<b;i++)
#define fre(i,a,b) for(i=a;i<=b;i++)
#define frr(i,a,b) for(i=a;i>=b;i--)
#define sc(a) scanf("%lld",&a)
#define sm(a,b) scanf("%lld%lld", &a, &b)
#define pr(a) printf("%lld\n", a)
#define pm(a,b) printf("%lld %lld\n", a, b)
#define cn(a) cin >> a
#define ct(a) cout << a << endl
#define isset(x,i) ((x>>i)&1)
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
using namespace std;
int prime[1000005];
ll  total_divisors = 1LL;
vector<int> prime_list;
void sieve()
{
	int i,j;
	fre(i ,2, 1001)
	{
		if(prime[i]==0)
		{
			for(j = i*i; j<1000004; j+=i)
				prime[j] = 1;
		}
	}
	fr(i, 2, 1000005)
		if(prime[i]==0)
			prime_list.pb(i);
	return ;
}
vector<pair<ll, int> > divisors, partial;
void highest_powers(ll n)
{
	int i, cnt;
	for(i = 0; i< prime_list.sz() && n!=1; i++ )
	{
		if(n%prime_list[i]==0)
		{
			cnt=0;
			while(n!=1 && n%prime_list[i]==0)
			{
				cnt++;
				n/= prime_list[i];
			}
			divisors.pb(mk((ll)prime_list[i], cnt));
			total_divisors = total_divisors * (cnt+1);
		}
	}
	if(n!=1)
	{
		divisors.pb(mk(n, 1));
		total_divisors = total_divisors*2;
	}
	return;
}
int main()
{
	ll i, j, t, n, m, k, type, l, r, mini,cnt, maxi, temp, result;
	int flag;
	sieve();
	sm(n, m);
	highest_powers(n);
	while(m--)
	{
		flag = 0;
		sm(type, k);
		partial.clear();
		fr(i, 0, divisors.sz())
		{
			int high_power = 0;
			fre(j, 1, divisors[i].second)
			{
				if(k!=1 && k%divisors[i].first==0)
				{
					high_power++;
					k/= divisors[i].first;
				}
				else
					break;
			}
			partial.pb(mk(divisors[i].first, high_power));
		}
		if(k!=1)
			flag = 1;
		if(type==1)
		{
			result = 1;
			fr(i, 0, divisors.sz())
				result = result * (partial[i].second+1);
			pr(result);
		}
		else
		{
			if(flag==1)
			{
				if(type==2)
					printf("0\n");
				else
					pr(total_divisors);
			}
			else
			{
				result = 1;
				fr(i, 0, divisors.sz())
					result = result*(divisors[i].second - partial[i].second + 1);
				if(type==2)
					pr(result);
				else
					pr(total_divisors - result);
			}
		}
	}
return 0;
}
