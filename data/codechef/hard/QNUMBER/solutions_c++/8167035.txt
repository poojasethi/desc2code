#include <cstdio>
#include <string>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cmath>
#include <stack>
#include <queue>
#include <map>
#include <bitset>
#include <list>
#include <set>
#include <cassert>
#include <iostream>
#include <sstream>
#include <algorithm>
 
using namespace std;
 
#define fill(a,val) memset(a,val,sizeof(a))
#ifdef LOCAL
#define debug(format,args...) {cerr << #args << " -> "; fprintf(stderr,format,args); cerr << endl;}
#else
#define debug(args...);
#endif
 
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
 
const int N = 1000100;
bool isPrime[N];
ll prime[N],nPrimes=0;
ll factors[N];
 
map <ll,ll> FACTSUM;
inline ll inp(){
	ll n = 0;
	char c = getchar_unlocked();
	while(c <'0' || c > '9') c = getchar_unlocked();
	while(c >= '0' && c <= '9') n = (n<<3) + (n<<1) + c - '0',c = getchar_unlocked();
	return n;
}
 
ll GCD(ll a,ll b){
	ll c = a % b;
	while(c != 0){
		a = b;
		b = c;
		c = a % b;
	}
	return b;
}
 
ll _nFactors(ll n){
	if(FACTSUM.count(n) > 0) return FACTSUM[n];
	ll ret = 1;
	ll ff = n;
	for(int i=0;prime[i] * prime[i] <= n;i++){
		if(n % prime[i]) continue;
		int count = 0;
		while(n > 1 && n % prime[i] == 0){
			count++;
			n /= prime[i];
		}
		ret = ret * (count + 1);
		if(n == 1) break;
	}
	if(n != 1) ret = ret * 2;
	//cerr << "Returning " << ret << endl;
	FACTSUM[ff] = ret;
	return ret;
}
 
ll nFactors(ll n){
	ll ret = 1;
	if(n < (N/100)){
		ret = ret * (factors[n]);
		return ret;
	}	
	for(int i=0;prime[i] * prime[i] <= n;i++){
		if(n % prime[i]) continue;
		int count = 0;
		while(n > 1 && n % prime[i] == 0){
			count++;
			n /= prime[i];
		}
		ret = ret * (count + 1);
		if(n < (N/100)){
			//cerr << "Returning " << ret << " * " ;
			ret = ret * (factors[n]);
			//cerr << (factors[n]) << " = " << ret << " n = " << n << "\n";
			return ret;
		}	
		if(n == 1) break;
	}
	if(n != 1) ret = ret * 2;
	return ret;
}
 
void preProcess(){
	FACTSUM.clear();
	fill(isPrime,true);
	isPrime[0] = isPrime[1] = false;
	for(int i=2;i<N;i++){
		if(!isPrime[i]) continue;
		prime[nPrimes++] = i;
		for(int j=i+i;j<N;j += i) isPrime[j] = false;
	}
	//fill(factors,0);
	//for(int i=1;i< N/100;i++) factors[i] = _nFactors(i);
}
 
 
ll one(ll n,ll k){
	ll gcd = GCD(n,k);
	ll ret = _nFactors(gcd);
	return ret;
}
 
ll two(ll n,ll k){
	if(n % k != 0) return 0;
	return _nFactors(n/k);
}
 
ll three(ll n,ll k,ll facsum){
	if(n < k) return facsum;
	else return facsum - two(n,k);
}
 
int main(){
	#ifdef LOCAL
	freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	#endif
	preProcess();
	ll n,q;
	n = inp();
	q = inp();
	ll facsum = _nFactors(n);
	while(q--){
		ll t,k;
		t = inp();
		k = inp();
		if(t == 1) printf("%lld\n",one(n,k));
		else if(t == 2) printf("%lld\n",two(n,k));
		if(t == 3) printf("%lld\n",three(n,k,facsum));
	}
	return 0;
} 