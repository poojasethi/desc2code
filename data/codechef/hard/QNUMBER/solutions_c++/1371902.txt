#include<iostream>
#include<cstdio>
#include<utility>
#include<set>
#include<cmath>
#include<queue>
#include<map>
#include<vector>
#include<algorithm>
using namespace std;

typedef long long LL;

long long int scan()
{
long long int t=0;
char c;
c=getchar_unlocked();
while(c<'0' || c>'9')
c=getchar_unlocked();
while(c>='0' && c<='9')
{
t=(t<<3)+(t<<1)+c-'0';
c=getchar_unlocked();
}
return t;
}

long long int a[50],u;
long long int b[50],v;

long long int getPrimeFactor (long long int n);
void display();
long long int count_factors(long long int * p ,long long int u);


long long int n,q;
long long int t,k;

int main()
{

long long int count;

long long int i,j,m,c;

n=scan();
q=scan();


u=0;
getPrimeFactor(n);
count=count_factors(a,u);
//display();
while(q--)
{
//scanf("%lld %lld",&t,&k);
t=scan();
k=scan();
if(t==1)
{
m=k;
v=0;

for(i=0;i<u;i++)
if(m%a[i]==0)
{
b[v++]=a[i];
m=m/a[i];
}

c=count_factors(b,v);
printf("%lld\n",c);
continue;
}
if(t==2)
{
if(n%k!=0)
{
printf("0\n");
continue;
}

m=k;
v=0;

for(i=0;i<u;i++)
{
if(m%a[i]==0)
m=m/a[i];
else
b[v++]=a[i];

}

c=count_factors(b,v);
printf("%lld\n",c);
continue;
}
if(t==3)
{
if(n%k!=0)
{
printf("%lld\n",count);
continue;
}

m=k;
v=0;

for(i=0;i<u;i++)
{
if(m%a[i]==0)
m=m/a[i];
else
b[v++]=a[i];

}

c=count_factors(b,v);
//cout<<"poop"<<count<<" "<<c<<" ";
printf("%lld\n",count-c);

continue;
}
}
return 0;
}


long long int count_factors(long long int * p ,long long int u)
{
long long int temp,i,j,x,y;
long long int count;
temp=p[0];
count=1;
x=0;
for(j=0;j<u;j++)
{
if(p[j]==temp)
x++;
else
{
temp=p[j];
count=count*(x+1);
x=1;

}
}
count=count*(x+1);
//cout<<count;
return count;
}
long long int getPrimeFactor (long long int n)
{


// For n < 2; it is just n
if (n < 2)
return 0;

// otherwise, for an even number it is 2
if (n % 2 == 0)
{
a[u++]=2;
getPrimeFactor(n/2);
return 0;
}
// for other odd numbers, search for a divisor
// until SQRT (n) [conceptual] n / div >= div is
// equivalent to SQRT (n) >= div
for (long long int div = 3; n / div >= div; div += 2)
{

if (n % div == 0)
{
a[u++]=div;
getPrimeFactor(n/div);
return 0;
}

}
// There is no divisor (n is prime), return it.
a[u++]=n;
return 0;
}

void display()
{
int t;
cout<<"\nIts prime factrs are : \n";
for(t=0;t<u;t++)
{
cout<<a[t]<<" ";
}
cout<<"\n";
}

