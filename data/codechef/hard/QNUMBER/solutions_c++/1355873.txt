#include<cstdio>
#include<iostream>
#include<vector>
#include<utility>
using namespace std;

typedef long long LL;
#define MXM 1000000
bool P[MXM];
vector<int> prime;
vector<pair<LL, int> > nf, kf;
int num=1;

int readInt() {
	int ret=0, c;
	for(;;) {
		c=getchar()-'0';
		if(c>=0 && c<=9) { ret=c; break; }
	}
	for(;;) {
		c=getchar()-'0';
		if(c>=0 && c<=9) ret=10*ret+c;
		else break;
	}
	return ret;
}

LL readLong() {
	LL ret=0;
	int c;
	for(;;) {
		c=getchar()-'0';
		if(c>=0 && c<=9) { ret=c; break; }
	}
	for(;;) {
		c=getchar()-'0';
		if(c>=0 && c<=9) ret=10*ret+c;
		else break;
	}
	return ret;
}

void init() {
     for(int i=2; i<MXM/2; i++)
     for(int j=2; j<=i; j++) {
           if(i*j>=MXM) break;
           else P[i*j]=true;
     }
     for(int i=2; i<MXM; i++)
     if(!P[i]) prime.push_back(i);
}

void factorize_n(LL n) {
     for(int i=0; i<prime.size(); i++) {
           int cnt=0;
           while(n%prime[i]==0) {
                cnt++;
                n/=prime[i];
           }
           if(cnt) nf.push_back(make_pair(prime[i], cnt));
     }
     if(n>1) nf.push_back(make_pair(n, 1));
     for(int i=0; i<nf.size(); i++)
           num*=(nf[i].second+1);
}

void factorize_k(LL k) {
     kf.clear();
     for(int i=0; i<nf.size(); i++) {
           int cnt=0;
           while(k%nf[i].first==0) {
                cnt++;
                k/=nf[i].first;
           }
           kf.push_back(make_pair(nf[i].first, cnt));
     }
     if(k>1) kf.push_back(make_pair(k, 1));
}

void solve1(LL k) {
     int ans=1;
     for(int i=0; i<nf.size(); i++)
             ans*=(min(nf[i].second, kf[i].second)+1);
     printf("%d\n", ans);
}

int solve2(LL k) {
     if(kf.size()>nf.size()) return 0;
     int ans=1;
     for(int i=0; i<nf.size(); i++)
             if(kf[i].second>nf[i].second) return 0;
             else ans*=(nf[i].second-kf[i].second+1);
     return ans;
}

void solve3(LL k) {
     printf("%d\n", num-solve2(k));
}

int main() {
    init();
    LL n; int q;
    n=readLong(); q=readInt();
    factorize_n(n);
    while(q--) {
         int t;
         LL k;
         t=readInt(); k=readLong();
         factorize_k(k);
         if(t==1) solve1(k);
         else if(t==2) printf("%d\n", solve2(k));
         else solve3(k);
    }
}
