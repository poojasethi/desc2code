// just testing this solution
#include<iostream>
#include<cstdio>
#include<cmath>
#include<vector>
#include<queue>
#include<map>
#include<set>
#include<algorithm>
#include<cstring>
#include<numeric>
 
using namespace std;
 
#define ll long long int 
#define ss1(a) scanf("%d",&a)
#define ss2(a,b) scanf("%d %d",&a,&b)
#define ss3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define loop(i,a,b) for(int i=a;i<b;i++)
#define loope(i,a,b) for(int i=a;i<=b;i++)
#define loopd(i,a,b) for(int i=a;i>=b;i--)
 
 
typedef vector<int> vi; 
typedef vector< vi > vvi; 
typedef pair<int,int> ii; 
#define setzero(a) fill(a,a+sizeof(a),0);
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
#define mp(a,b) make_pair(a,b)
#define F first
#define S second
 
ll powr(int s,int p)
{
	if(p==0)
		return 1;	
 
	if(p%2==1)
	{
		ll q=powr(s,p/2);
		ll a=q;
		q=(a*a);
		q=(q*s);	
		return ( q );
	}
 
	else
	{
		ll q=powr(s,p/2);
		ll a=q;
		q=(a*a);	
		return (q);
	}
}
 
/*******************************MAIN CODE STARTS*******************************/
vector <ll> pfn;
vector <int> cn;
vector <int> ck;
ll N,K;
ll nf;
int flag=0;
void factorise(ll x)
{
	ll i=2,k=-1;
	ll n=x;
	nf=1;
	if(n%2==0)
	{
		pfn.pb(2);
		cn.pb(0);
 		k++;
		while(n%2==0)
		{
			n/=2;cn[0]++;
		}
		nf=nf*(cn[0]+1);
		//printf("%lld*\n",n);
	}	
	
	i=3;
	for(i=3;(i*i)<=n+2;i+=2)
	{	
		if(n%i==0)
		{
			//printf("%lld ",i);		
			pfn.pb(i);
			cn.pb(0);
		
			//k=sz(pfn)-1;	
			k++;
			while(n%i==0)
			{
				n/=i;cn[k]++;
			}		 
			nf*=(cn[k]+1);
		}	
	}
	if(n>1)
	{
		pfn.pb(n);
		cn.pb(1);
		nf*=2;
	}		
	return;
}
 
void factorisek(ll k)
{
	flag=1;
	ll x=k;
	ck.clear();
	int s=sz(pfn);
	for(int i=0;i<s;i++)
	{
		ck.pb(0);			
		while(x%pfn[i]==0)
		{
			x/=pfn[i];ck[i]++;
		}		 
	}
	if(x!=1)
		flag=0;
	return;
}		
		
ll t1()
{
	int s=sz(pfn);
	ll ret=1;
	for(int i=0;i<s;i++)
	{
		ret*=min(cn[i]+1,ck[i]+1);
	}
	return ret;		
}
 
ll t2()
{
	
	if(K==1)
		return nf;
	if(flag==0) 
		return 0;
	if(K>N)
		return 0;
	if(K==N)
		return 1;
			
	//int f=0;
	int s=sz(pfn);
	ll ret=1;
	for(int i=0;i<s;i++)
	{
		//if(ck[i]>0) f=1;
		if(ck[i]>cn[i]) return 0;
		
		ret*=(cn[i]-ck[i]+1);
	}
	//if(f==0)
		//return 0;
	return ret;
}
 
ll t3()
{		
	return (nf-t2());
}	
			
int main()
{
	
	int q;
	scanf("%lld %d",&N,&q);
	factorise(N);
	//printf("%lld\n",nf);
	while(q--)
	{
		int t;
		scanf("%d %lld",&t,&K);
		factorisek(K);
		int s=sz(pfn);
		/*loop(i,0,s)
		{
			printf("%d->%d %d\n",pfn[i],cn[i],ck[i]);
		}*/
		if(t==1)
			printf("%lld\n",t1());	
		if(t==2)
			printf("%lld\n",t2());
		if(t==3)
			printf("%lld\n",t3());		
	}
	return 0;
}		