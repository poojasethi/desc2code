#include<iostream>
    #include<cstdlib>
    #include<cstdio>
    #include<cassert>
    #include<bitset>
    #include<algorithm>
    #include<vector>
    #include<stack>
    #include<queue>
    #include<deque>
    #include<cmath>
    #include<list>
    #include<cstring>
    #include<map>
    #include<set>
    #include <functional>
    #define ll long long
   
  
     
    int primes[1000000], check[1000010]={0}, arr[]={2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009};
     
    long long int gcd(long long int a,long long int b)
    {
    return (b==0?a:gcd(b,a%b));
    }
    void gen_sieve_primes(long long int n)
    {
    ll r=sqrt(n);
    int i, j, k = 0;
    for(i = 0; i < 169; i++)
    {
    for(j = 2; arr[i]*j <= r+1; j++)
    {
    check[arr[i]*j] = 1;
    }
    }
    for(i = 2; i < r+1; i++)
    if(check[i] == 0 && n%i == 0)
    primes[k++] = i;
    }
     
    long long int numfac(long long int n)
    {
    if(n==0)return 0;
    if(n==1)return 1;
    int i, j;
    long long int count=0,ret=1;
    j = sqrt(n);
    for(i=0; primes[i] != 0 && n>1; i++)
    {
    count=0;
    while(n%primes[i]==0)
    {
    count++;
    n/=primes[i];
    }
    ret*=count+1;
    }
    if(n!=1)ret*=2;
    return ret;
    }
    int main()
    {
    int q, t,p;
    long long int n, k, temp1, temp2, temp3;
    scanf("%lld %d", &n, &q);
    gen_sieve_primes(n);
    temp3 = numfac(n);
    while(q--)
    {
    scanf("%d %lld", &t, &k);
    if(t == 1)
    {
    printf("%lld\n", numfac(gcd(n,k)));
    }
    else if(t == 2)
    {
    if(k==n)temp2=1;
    else if(k>n)temp2=0;
    else if(n%k==0)temp2=numfac(n/k);
    else temp2=0;
    printf("%lld\n", temp2);
    }
    else
    {
    if(k==n)temp2=1;
    else if(k>n)temp2=0;
    else if(n%k==0)temp2=numfac(n/k);
    else temp2=0;
    printf("%lld\n",temp3-temp2);
    }
    }
    return 0;
    } 
