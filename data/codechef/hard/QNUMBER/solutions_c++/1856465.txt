#include<stdio.h>
#include<assert.h>
#define int64 long long

int factors[20];
int64 primes[20];
int composite[20];
int size;
int64 divisors;

void ComputeFactors(int64 N)
{
	size = -1;
	for(int i=0; i<20; ++i) factors[i] = 0;

	int64 prev = 1;
	int64 p = 2;

	while(p*p <= N)
	{
		while(N%p == 0)
		{
			if(prev != p)
			{
				size++;
				primes[size] = p;
				prev = p;
			}
			factors[size]++;
			N /= p;
		}
		p += (p != 2)?2:1;
	}

	if(N != 1)
	{
		size++;
		primes[size] = N;
		factors[size]++;
	}

	size++;

	divisors = 1;
	for(int i=0; i<size; ++i)
	{
		divisors *= factors[i]+1;
	}
}

bool ComputeK(int64 K)
{
	int count;
	for(int i=0; i<size; ++i)
	{
		count = 0;
		while(K%primes[i] == 0 && count < factors[i])
		{
			count++;
			K /= primes[i];
		}
		composite[i] = count;
	}
	return (K == 1);
}

int64 Type1(int64 K)
{
	ComputeK(K);
	int64 ans = 1;
	for(int i=0; i<size; ++i)
	{
		ans *= composite[i]+1;
	}
	return ans;
}

int64 Type2(int64 K)
{
	if(!ComputeK(K)) return 0;
	int64 ans = 1;
	for(int i=0; i<size; ++i)
	{
		ans *= factors[i]-composite[i]+1;
	}
	return ans;
}

void PrintFactors()
{
	for(int i=0; i<size; ++i)
	{
		printf("%lld %d\n",primes[i],factors[i]);
	}
}

int main()
{
	//freopen("qnumber.in","r",stdin);

	int64 N,K;
	int Q,T;
	scanf("%lld%d",&N,&Q);

	ComputeFactors(N);

	while(Q--)
	{
		scanf("%d%lld",&T,&K);
		if(T == 1) printf("%lld\n",Type1(K));
		else if(T == 2) printf("%lld\n",Type2(K));
		else printf("%lld\n",divisors-Type2(K));
	}

	return 0;
}
