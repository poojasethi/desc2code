#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool dfs(int v, vector<vector<int> >& e, vector<int>& color) {
    for (vector<int>::iterator it = e[v].begin(); it != e[v].end(); ++it) {
        if (!color[*it]) {
            color[*it] = 3 - color[v];
            if (!dfs(*it, e, color)) {
                return false;
            }
        } else if (color[*it] == color[v]) {
            return false;
        }
    }
    return true;
}

bool alg() {
    int n, m;
    cin >> n >> m;
    vector<pair<int, int> > edges(m);
    for (int i = 0; i < m; ++i) {
        cin >> edges[i].first >> edges[i].second;
        --edges[i].first;
        --edges[i].second;
    }
    vector<bool> use(m, true);
    int n_unused;
    cin >> n_unused;
    for (int i = 0; i < n_unused; ++i) {
        int a;
        cin >> a;
        use[a - 1] = false;
    }
    vector<vector<int> > e(n);
    for (int i = 0; i < m; ++i) {
        if (use[i]) {
            e[edges[i].first].push_back(edges[i].second);
            e[edges[i].second].push_back(edges[i].first);
        }
    }
    vector<int> color(n, 0);
    for (int i = 0; i < n; ++i) {
        if (!color[i]) {
            color[i] = 1;
            if (!dfs(i, e, color)) {
                return false;
            }
        }
    }
    return true;
}

int main() {
    int d;
    cin >> d;
    while (d--) {
        cout << (alg() ? "YES\n" : "NO\n");
    }
}
