#include<stdio.h>
#include<iostream>
using namespace std ;
int visited[51],partition[51],g[51][51];
int dfs(int v,int n){
	int i;
	visited[v] = 1 ;
	for(i=0;i<n;i++)
		if(g[v][i] == 1){
			if(visited[i] == 0){
				partition[i] =  1 - partition[v];
				if( dfs(i,n) == 0)
					return 0;
			}
			else{
				if(partition[i] == partition[v])
					return 0;
			}
		}
	return 1 ;
}
int is_bipartite(int n){
    int i,j,k;
    for(i=0;i<n;i++) {visited[i] = 0 ; partition[i] = -1 ;}
    for(i=0;i<n;i++)
        if(visited[i]== 0){
			partition[i] = 1 ;
			if (dfs(i,n) == 0)
				return 0;
		}
	return 1;
}

int main(){
    int t,n,m,w,i,j,t1,t2,k ;
    pair<int,int> edges[201] ;
    scanf("%d",&t);
    for(i=0;i<t;i++){
        scanf("%d %d",&n,&m);
        for(j=0;j< n ; j++ )    for(k=0;k< n ; k++ )    g[j][k] = 0 ;
        for(j=0;j<m;j++){
            scanf("%d %d",&t1,&t2);
            g[t1-1][t2-1] = g[t2-1][t1-1] = 1 ;
            edges[j] = make_pair(t1,t2);
        }
        scanf("%d",&w);
        for(j=0;j<w;j++){
            scanf("%d",&t1);
            g[edges[t1-1].first-1][edges[t1-1].second-1]
            = g[edges[t1-1].second-1][edges[t1-1].first-1] = 0 ;
        }
        if(is_bipartite(n)== 1) printf("YES\n");
        else printf("NO\n");
    }
return 0;
}
