/*
ID: abhishe38
PROG:
LANG: C++
*/

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

#define PB push_back
#define MP make_pair
#define MAXIMUM 18446744073709551615ULL
#define MAX 1010

using namespace std;

typedef long long int LL;
typedef unsigned long long int ULL;
typedef unsigned int UI;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector< pair<int,int> > VPI;

bool mat[200][200];
VPI roads;

bool solve(int n)
{
     stack< PII > q;
     PII v;
     bool found;
     int color[200];
     for (int i=0; i<100; i++) color[i] = -1;
     
     for (int vc=0; vc<n; vc++)
     {
         if (color[vc] == -1)
         {
            q.push(MP(vc,0));
            color[vc] = 0;
         }
         while (!q.empty())
         {
           v = q.top();
           q.pop();
            for (int i=0; i<n; i++)
             {
                  if (mat[v.first][i])
                  {
                     if (color[i] == v.second)
                     {
                        return false;         
                     }                
                     if (color[i] == -1)
                     {
                        if (v.second == 0)
                        color[i] = 1;
                        else         
                        color[i] = 0; 
                        q.push(MP(i,color[i]));
                     }    
                  }
               }      
           }
     }          
     return true;
}

int main()
{
    int t,v1,v2,w;
    scanf("%d",&t);
    while (t--)
    {
          roads.clear();
          int n,m,v1,v2,num;
          scanf("%d%d",&n,&m);
          for (int i=0; i<n; i++)
          {
              for (int j=0; j<n; j++)
              mat[i][j] = false;    
          }
          
          for (int i=0; i<m; i++)
          {
              scanf("%d%d",&v1,&v2); 
              --v1; --v2;   
              mat[v1][v2] = true;
              mat[v2][v1] = true;
              roads.PB(MP(v1,v2));
          }      
          scanf("%d",&w);
          for (int i=0; i<w; i++)
          {
              scanf("%d",&num);    
              mat[roads[num-1].first][roads[num-1].second] = false;
              mat[roads[num-1].second][roads[num-1].first] = false;
          }
          if(solve(n))
          {
             cout<<"YES\n";
          }
          else
             cout<<"NO\n";
          
    }
   //system("pause");
   return 0;
}
