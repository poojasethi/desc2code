#include<stdio.h>
#include<stdlib.h>
#include<iostream>
#include<queue>
using namespace std ;
int g[51][51];
int is_bipartite(int n){
    int visited[51],partition[51],i,j,k;
    queue<int> q ;
    for(i=0;i<n;i++) {visited[i] = 0 ; partition[i] = -1 ;}
    for(i=0;i<n;i++){
        if(visited[i]== 0){
            q.push(i);
            partition[i] = 1 ;
            while(!q.empty()){
                j = q.front();
                q.pop();
                for(k=0;k<n;k++){
                    if(g[j][k]== 1){
                        if(visited[k] == 1){
                            if (partition[j] == partition[k])return 0 ;
                        }
                        else {
                            q.push(k);
                            partition[k] = 1- partition[j] ;
                        }
                    }
                }
                visited[j] = 1 ;
            }
        }
    }
return 1;
}
int main(){
    int t,n,m,w,i,j,t1,t2,k ;
    pair<int,int> edges[201] ;
    scanf("%d",&t);
    for(i=0;i<t;i++){
        scanf("%d %d",&n,&m);
        for(j=0;j< n ; j++ )    for(k=0;k< n ; k++ )    g[j][k] = 0 ;
        for(j=0;j<m;j++){
            scanf("%d %d",&t1,&t2);
            g[t1-1][t2-1] = g[t2-1][t1-1] = 1 ;
            edges[j] = make_pair(t1,t2);
        }
        scanf("%d",&w);
        for(j=0;j<w;j++){
            scanf("%d",&t1);
            g[edges[t1-1].first-1][edges[t1-1].second-1]
            = g[edges[t1-1].second-1][edges[t1-1].first-1] = 0 ;
        }
        if(is_bipartite(n)== 1) printf("YES\n");
        else printf("NO\n");
    }
return 0;
}
