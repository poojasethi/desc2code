#include <iostream>
#include <iomanip>
#include <queue>
#include <set>
#include <string>

using namespace std;

void testCase()
{    
    string line;
    int N, M;
    cin >> N >> M;
    getline(cin, line);

    int board[N+2][M+2];

    for (int i = 1; i <= N; ++i)
    {
        board[i][0] = 0;
        board[i][M+1] = 0;
    }
    for (int i = 1; i <= M; ++i)
    {
        board[0][i] = 0;
        board[N+1][i] = 0;
    }

    queue<pair<int, int> > Q;

    // read the board
    for (int i = 1; i <= N; ++i)
    {
        getline(cin, line);
//        cout << "LINE: " << line << endl;
        for (int j = 1; j <= M; ++j)
        {
            if (line[j-1] == 'B')
            {
                board[i][j] = 0;
            }
            if (line[j-1] == 'W')
            {
                if ((i == 1) || (i == N) || (j == 1) || (j == M))
                {
                    board[i][j] = 3;
                    Q.push(pair<int, int>(i, j));
                }
                else
                {
                    board[i][j] = 1;
                }
            }
        }
    }

    while(!Q.empty())
    {
        pair<int, int> p = Q.front();
        Q.pop();
        int X = p.first;
        int Y = p.second;
        if (board[X-1][Y] == 1)
        {
          board[X-1][Y] = 3;
          Q.push(pair<int, int>(X-1, Y));
        }
        if (board[X+1][Y] == 1)
        {
          board[X+1][Y] = 3;
          Q.push(pair<int, int>(X+1, Y));
        }
        if (board[X][Y-1] == 1)
        {
          board[X][Y-1] = 3;
          Q.push(pair<int, int>(X, Y-1));
        }
        if (board[X][Y+1] == 1)
        {
          board[X][Y+1] = 3;
          Q.push(pair<int, int>(X, Y+1));
        }
    }

    for (int i = 1; i <= N; ++i)
    {
        board[i][0] = 3;
        board[i][M+1] = 3;
    }
    for (int i = 1; i <= M; ++i)
    {
        board[0][i] = 3;
        board[N+1][i] = 3;
    }

    int color = 10;
    for (int i = 1; i <= N; ++i)
    {
        for (int j = 1; j <= M; ++j)
        {
            if (board[i][j] != 1)
            {
                continue;
            }
            board[i][j] = color;
            Q.push(pair<int, int>(i, j));
            while(!Q.empty())
            {
                pair<int, int> p = Q.front();
                Q.pop();
                int X = p.first;
                int Y = p.second;
                if (board[X-1][Y] == 1)
                {
                    board[X-1][Y] = color;
                    Q.push(pair<int, int>(X-1, Y));
                }
                if (board[X+1][Y] == 1)
                {
                    board[X+1][Y] = color;
                    Q.push(pair<int, int>(X+1, Y));
                }
                if (board[X][Y-1] == 1)
                {
                    board[X][Y-1] = color;
                    Q.push(pair<int, int>(X, Y-1));
                }
                if (board[X][Y+1] == 1)
                {
                    board[X][Y+1] = color;
                    Q.push(pair<int, int>(X, Y+1));
                }
            }
            color++;
        }
    }

    set<int> rowColors[N+1];
    set<int> colColors[M+1];
    int c;
    for (int i = 1; i <= N; ++i)
    {
//        cout << "ROW: " << setw(2) << i << " ";
        for (int j = 1; j <= M; ++j)
        {
//            cout << setw(2) << board[i][j] << " ";
            c = board[i][j];
            if (c >= 10)
            {
                rowColors[i].insert(c-10);
                colColors[j].insert(c-10);
            }
            c = board[i-1][j];
            if (c >= 10)
            {
                rowColors[i].insert(c-10);
                colColors[j].insert(c-10);
            }
            c = board[i+1][j];
            if (c >= 10)
            {
                rowColors[i].insert(c-10);
                colColors[j].insert(c-10);
            }
            c = board[i][j-1];
            if (c >= 10)
            {
                rowColors[i].insert(c-10);
                colColors[j].insert(c-10);
            }
            c = board[i][j+1];
            if (c >= 10)
            {
                rowColors[i].insert(c-10);
                colColors[j].insert(c-10);
            }
        }
//        cout << endl;
    }

    for (int i = 1; i <= N; ++i)
    {
        for (int j = 1; j <= M; ++j)
        {
            int all = true;
            for (int k = 10; k < color; ++k)
            {
/*
                cout << "ROW: " << i << " COL: " << j << " COLOR: " << k << " ";
                cout << ((rowColors[i].find(k-10) == rowColors[i].end())?"T":"F") << " ";
                cout << ((colColors[j].find(k-10) == colColors[j].end())?"T":"F") << endl;
*/
                if ((rowColors[i].find(k-10) == rowColors[i].end()) &&
                    (colColors[j].find(k-10) == colColors[j].end()))
                {
                    all = false;
                    break;
                }
            }
            if (all)
            {
                cout << "YES" << endl;
                return;
            }
        }
    }
    cout << ((color == 10) ? "YES" : "NO") << endl;
}

int main()
{
    int T;
    cin >> T;
    for (int i = 0; i < T; ++i)
    {
        testCase();
    }
}
