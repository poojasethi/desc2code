#include <cstdio>
#include <algorithm>
#define fitl(x) (x >= k ? x - k : x)
#define fitr(x) (x < 0 ? x + k : x)
using namespace std;
typedef long long ll;

const int N = 200005;
int n, k, top = 0, a[N], s[N], l[N], r[N];
pair<int, int> b[N];
ll ans = 0;

inline void R(int &x) {
	char ch = getchar(); x = 0;
	for (; ch<'0' || ch>'9'; ch = getchar());
	for (; ch<='9' && ch>='0'; ch=getchar()) x = x*10 + ch-'0';
}
inline int cnt(int l, int r, int key) {
	return upper_bound(b, b+n+2, make_pair(key, r))
		 - lower_bound(b, b+n+2, make_pair(key, l));
}
void solve(int l, int r, int w) {
	if (w - l <= r - w)
		for (int i=l; i<=w; ++i) ans += cnt(w, r, fitl(a[w]+s[i-1])); else
		for (int i=w; i<=r; ++i) ans += cnt(l-1, w-1, fitr(s[i]-a[w]));
	--ans;
}
int main() {
	R(n); R(k);
	for (int i=1; i<=n; ++i) {R(a[i]); r[i] = n+1;}
	int w;
	for (int i=1; i<=n; ++i) {
		for (w=i-1; a[w]>a[i]; w=l[w]) r[w] = i;
		l[i] = w;
	}
	s[0] = 0;
	for (int i=1; i<=n; ++i) {
		a[i] %= k;
		s[i] = (s[i-1] + a[i]) % k;
		b[i] = make_pair(s[i], i);
	}
	sort(b+1, b+n+1);
	b[0] = make_pair(0, 0), b[n+1] = make_pair(k, 0);
	for (int i=1; i<=n; ++i)
		solve(l[i]+1, r[i]-1, i);
	printf("%lld\n", ans);
	return 0;
}