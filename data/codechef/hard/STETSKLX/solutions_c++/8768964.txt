#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>  
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <ctime> 
 
#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash
 
#define eps 1e-9
#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 512
 
using namespace std;
 
int tests,n,l,r;
vector<pair<int, int> > g[1<<20];
int dp[1<<19][105];
int mid;
int L,R;
 
int thold;
int found;
 
int used[1<<20];
 
void UPD(int v)
{
	used[v]=1;
	
	if (found)
		return;
		
	for (int i=0;i<=R;i++)
		dp[v][i]=-1;
	dp[v][0]=0;
	
	for (int i=0;i<g[v].size();i++)
	{
		int to=g[v][i].first;
		int tc=g[v][i].second;
		if (tc<=thold)
			tc=1;
		else
			tc=0;
		if (used[to]==0)
			continue;
		for (int j=0;j<=R;j++)
		{
			if (dp[to][j]<0)
				break;
			
			for (int q=L-j-1;q<R-j;q++)
			{
				if (q<0)
					continue;
				if (dp[v][q]<0)
					break;
				
				int tlen=j+q+1;
				int ttl=dp[to][j]+tc+dp[v][q];
				if (ttl>0&&ttl*2>tlen&&tlen>=L)
					found=1;
				
			}
		}	
		if (found)break;
		
		for (int j=0;j<=50;j++)
		{
			if (dp[to][j]<0)
				break;
			dp[v][j+1]=max(dp[v][j+1],dp[to][j]+tc);
		}
	}
	
}
 
vector<int> O;
 
void T(int v)
{
	used[v]=1;
	for (int i=0;i<g[v].size();i++)
	{
		int to=g[v][i].first;
		if (used[to])
			continue;
		T(to);
	}
	O.push_back(v);
}
 
bool check(int val)
{
	thold=val;
	found=0;
	for (int i=1;i<=n;i++)
		used[i]=0;
	
	for (int i=0;i<O.size();i++)
	{
		UPD(O[i]);
	}
	
	return found;
}
 
int dist[1<<20];
 
void trace(int v)
{
	for (int i=0;i<g[v].size();i++)
	{
		int to=g[v][i].first;
		if (dist[to])
			continue;
		dist[to]=dist[v]+1;
		trace(to);
	}
}
 
int find_longest()
{
	for (int i=1;i<=n;i++)
		dist[i]=0;
	dist[1]=1;
	trace(1);
	int bp=1;
	for (int i=1;i<=n;i++)
		if (dist[i]>dist[bp])
			bp=i;
	
	for (int i=1;i<=n;i++)
		dist[i]=0;
	dist[bp]=1;
	trace(bp);
	for (int i=1;i<=n;i++)
		if (dist[i]>dist[bp])
			bp=i;
	return dist[bp]-1;
}
 
vector<int> costs;
 
int main(){
//freopen("blind.in","r",stdin);
//freopen("blind.out","w",stdout);
//freopen("F:/in.txt","r",stdin);
//freopen("F:/output.txt","w",stdout);
ios_base::sync_with_stdio(0);
//cin.tie(0);
 
cin>>tests;
for (;tests;--tests)
{
	cin>>n>>L>>R;
	for (int i=1;i<=n;i++)
		g[i].clear();
	
	costs.clear();
	
	for (int i=1;i<n;i++)
	{
		int a,b,c;
		cin>>a>>b>>c;
		costs.push_back(c);
		g[a].push_back(make_pair(b,c));
		g[b].push_back(make_pair(a,c));
	}
	
	int Q=find_longest();
	if (Q<L)
	{
		cout<<-1<<endl;
		continue;
	}
	
	int l,r;
	sort(costs.begin(),costs.end());
	l=0;;
	
	for (int i=1;i<=n;i++)
		used[i]=0;
	O.clear();
	T(1);
	
	r=costs.size()-1;
	while (l<r)
	{
		mid=l+r;
		mid/=2;
		if (check(costs[mid]))
			r=mid;
		else
			l=mid+1;
	}
	cout<<costs[l]<<endl;
}
//cin.get();cin.get();
return 0;}