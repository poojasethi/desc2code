#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>

using namespace std;

#define MAXN 210
#define MAXM 200100
#define INF 10000000

int m, k, n;

int trans[MAXN][MAXN];
int dp[MAXM][MAXN];
int in[MAXM];

void init()
{
	for (int i = 1; i <= m; ++i)
	{
		for (int j = 1; j <= m; ++j)
		{
			for (int k = 1; k <= m; ++k)
			{
				if(trans[j][i] && trans[i][k])
					trans[j][k] = 1;
			}
		}
	}
}

int main()
{
	int T;
	int a, b;
	//freopen("in.txt", "r", stdin);
	scanf("%d", &T);
	//printf("%d\n", T);
	while(T--)
	{
		scanf("%d%d%d", &m, &k, &n);
		memset(trans, 0, sizeof(trans));
		for (int i = 1; i <= m; ++i)
		{
			trans[i][i] = 1;
		}
		for (int i = 0; i < k; ++i)
		{
			scanf("%d%d", &a, &b);
			trans[a][b] = 1;
			trans[b][a] = 1;
		}
		for (int i = 1; i <= n; ++i)
		{
			scanf("%d", &in[i]);
		}
		init();

		memset(dp, 0, sizeof(dp));

		for (int i = 1; i <= n; ++i)
		{
			dp[i][0] = INF;
			for (int j = 1; j <= m; ++j)
			{
				dp[i][j] = dp[i][j - 1];
				if(trans[in[i]][j])
					dp[i][j] = min(dp[i][j], dp[i - 1][j] + (in[i] == j ? 0 : 1));
			}
		}

		/*for (int i = 1; i <= m; ++i)
		{
			dp[0][i] = INF;
		}
		dp[0][1] = 0;

		for (int i = 1; i <= n; ++i)
		{
			int y = INF;
			for (int j = 1; j <= m; ++j)
			{
				y = min(y, dp[i - 1][j]);
				//printf("%d %d %d\n", i, j, y);
				if(trans[in[i]][j])
					dp[i][j] = y + (in[i] != j);
				else
					dp[i][j] = INF;
			}
		}

		int res = INF;
		for (int i = 1; i <= m; ++i)
		{
			res = min(dp[n][i], res);
		}
		if(res >= INF)
			res = -1;

		printf("%d\n", res);
		continue;*/


		if(dp[n][m] >= INF)
			dp[n][m] = -1;

		/*for (int i = 1; i <= n; ++i)
		{
			for (int j = 1; j <= m; ++j)
			{
				printf("%d ", dp[i][j]);
			}
			printf("\n");
		}*/

		printf("%d\n", dp[n][m]);
	}
	return 0;
}