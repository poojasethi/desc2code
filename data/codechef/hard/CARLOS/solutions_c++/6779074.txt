
#include<set>
#include<map>
#include<cmath>
#include<queue>
#include<cstdio>
#include<vector>
#include<string>
#include<cstdlib>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

#define mem(a, b) (memset(a, b, sizeof(a)))
#define pb push_back
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define rep(i, m) for (int i = 0; i < (int)(m); i++)
#define rep2(i, n, m) for (int i = n; i < (int)(m); i++)
typedef long long LL;
typedef pair<int, int> pii;

const int oo = (int) 1e9;
const double PI = 2 * acos(0);
const double eps = 1e-9;

const int MAX_M = 210;
const int MAX_N = 200010;
bool can[MAX_M][MAX_M];

void floyd(int n) {
    for (int k = 1; k <= n; ++k)
        for (int i = 1; i <= n; ++i)
            for (int j = 1; j <= n; ++j)
                if (can[i][k] && can[k][j])
                    can[i][j] = true;
}

void read(int &res) {
    res = 0;
    char c = ' ';
    while (c < '0' || c > '9') c = getchar();
    while (c >= '0' && c <= '9') res = (res<<3) + (res<<1) + c - '0', c = getchar();
}

int dp[MAX_N][MAX_M];
int a[MAX_N];

int main(void) {
    int T;
    read(T);
    while (T--) {
        int M, K, N;
        read(M); read(K); read(N);
        mem(can, false);
        for (int i = 1; i <= M; ++i) can[i][i] = true;
        for (int i = 0; i < K; ++i) {
            int x, y;
            read(x); read(y);
            can[x][y] = can[y][x] = true;
        }
        for (int i = 1; i <= N; ++i) read(a[i]);

        floyd(M);

        //mem(dp, 0);
        for (int i = 2; i <= M; ++i) dp[0][i] = oo;
        dp[0][1] = 0;
        for (int i = 1; i <= N; ++i) {
            int tmp = oo;
            for (int j = 1; j <= M; ++j) {
                tmp = min(tmp, dp[i-1][j]);
                if (can[a[i]][j])
                    dp[i][j] = tmp + (a[i] != j);
                else
                    dp[i][j] = oo;
            }
        }
        int res = oo;
        for (int i = 1; i <= M; ++i) res = min(res, dp[N][i]);

        if (res >= oo)
            printf("-1\n");
        else
            printf("%d\n", res);
    }

    return 0;
}
