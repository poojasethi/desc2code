#include <bits/stdc++.h>
using namespace std;
#define inf 10000000
int dp[200001][201];
bool path[201][201];
int arr[200001];
 
void bfs(vector<int>* adj,int n,int ver,int v,bool* comp){
    int arr[n+1];int cnt=0;
    queue<int>q;
    q.push(ver);
    comp[ver]=true;
    while(!q.empty()){
        int temp=q.front();
        q.pop();
        arr[++cnt]=temp;
        for(int i=0;i<adj[temp].size();i++){
            if(!comp[adj[temp][i]]){
                q.push(adj[temp][i]);
                comp[adj[temp][i]]=true;
            }
        }
    }
    for(int i=1;i<=cnt;i++){
        for(int j=i+1;j<=cnt;j++){
            path[arr[i]][arr[j]]=path[arr[j]][arr[i]]=true;
        }
    }
}
 
void findpaths(vector<int>* adj,int n){
    bool comp[n+1];int v=0;
    memset(comp,false,n+1);
    for(int i=1;i<=n;i++){
        if(comp[i]==false){
            v++;
            bfs(adj,n,i,v,comp);
        }
    }
}
 
int main(){
    int t;
    scanf("%d",&t);
    while(t--){
        int m,k,n,a,b;
        scanf("%d%d%d",&m,&k,&n);
        vector<int>adj[m+1];
        for(int i=1;i<=k;i++){
            scanf("%d%d",&a,&b);
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=m;j++)
                path[i][j]=false;
        }
        findpaths(adj,m);
        for(int i=1;i<=n;i++)
            scanf("%d",&arr[i]);
        for(int i=1;i<=m;i++){
            if(arr[1]==i)
                dp[1][i]=0;
            else if(path[arr[1]][i])
                dp[1][i]=1;
            else
                dp[1][i]=inf;
        }
        for(int j=2;j<=n;j++){
            int cost=dp[j-1][1];
            for(int i=1;i<=m;i++){
                cost=min(cost,dp[j-1][i]);
                if(arr[j]==i)
                    dp[j][i]=cost;
                else if(path[arr[j]][i])
                    dp[j][i]=cost+1;
                else
                    dp[j][i]=inf;
            }
        }
        int ans=dp[n][1];
        for(int i=2;i<=m;i++)
            ans=min(ans,dp[n][i]);
        if(ans>=inf)
            printf("-1\n");
        else
            printf("%d\n",ans);
    }
}