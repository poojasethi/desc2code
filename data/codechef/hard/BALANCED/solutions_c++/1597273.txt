/* CPP Tempelate
 * @author Devashish Tyagi
 */

#include <algorithm>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <vector>
#include <list>
#include <bitset>

#define sf(a) scanf("%d",&a)
#define ssf(a,b) scanf("%d %d",&a,&b)
#define pf(a) printf("%d\n",a)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pi pair<int,int>
#define vi vector<int>
#define all(v) v.begin(),v.end()

#define PB push_back
#define MP make_pair
#define sz(a) (int)(a).size()

#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))  
#define CLEAR(a) memset((a),0,sizeof(a))

#define INF 1000000000
#define MAXN 20001
#define PI 2*acos(0.0)

using namespace std;
typedef long long ll;

string convertInt(int number)
{
   stringstream ss;//create a stringstream
   ss << number;//add number to the stream
   return ss.str();//return a string with the contents of the stream
}

int convertString(string s){
    int num;
    stringstream sstr(s); // create a stringstream
    sstr>>num; // push the stream into the num
    return num;
}

int modulo (int m, int n) { return m >= 0 ? m % n : ( n - abs ( m%n ) ) % n; }

int graph[2][MAXN];
int color[MAXN];

void dfs(int n, int c){
    if (n == -1 || color[n] != -1) return;
    
    color[n] = c;
    int next = (c+1)%2;
    dfs(graph[0][n], next);
    dfs(graph[1][n], next);
    
    return;
}

int main(void){
    int t;
    sf(t);
    while(t--){
	int n;
	vector<int> perm[2];
	sf(n);
	
	for(int i=0; i<n; i++){
	    int x;
	    sf(x);
	    perm[0].PB(x);
	    graph[0][i] = -1;
	}
	for(int i=0; i<n; i++){
	    int x;
	    sf(x);
	    perm[1].PB(x);
	    graph[1][i] = -1;
	}
	
	for(int i=0; i+1<n; i=i+2){
	    graph[0][perm[0][i]]=perm[0][i+1];
	    graph[0][perm[0][i+1]]=perm[0][i];
	    graph[1][perm[1][i]]=perm[1][i+1];
	    graph[1][perm[1][i+1]]=perm[1][i];
	}
	
	memset(color, -1, sizeof color);

	// BFS coloring
	queue< pair<int,int> > Q;
	for(int i=0;i<n; i++){
	    if (color[i] == -1){
		Q.push(MP(i,0));
		color[i] = 0;
		while(!Q.empty()){
		    int v = Q.front().first;
		    int c = Q.front().second;
		    Q.pop();
		    int next = (c+1)%2;
		    for(int i=0; i<2; i++){
			int to = graph[i][v];
			if (to != -1 && color[to] == -1){
			    color[to] = next;
			    Q.push(MP(to,next));
			} 
		    }
		}
	    }
	}
	
	//DFS coloring
	/*
	for(int i=0; i<n; i++){
	    if (color[i] == -1)
		dfs(i, 0);
	}*/
	
	for(int i=0; i<n; i++){
	    if (color[i] == 0)
		printf("%c",'A');
	    else
		printf("%c",'B');
	}
	printf("\n");
    }
    return 0;
}

