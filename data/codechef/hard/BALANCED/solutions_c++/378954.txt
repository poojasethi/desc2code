#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <climits>
#include <queue>
#include <set>

using namespace std;

//FASTIO
char *ipos, *opos, InpFile[20000000], OutFile[20000000], DIP[20];
inline int input(int flag=0) {

	while(*ipos <= 32) ++ipos;
	if ( flag  ) return (*ipos++ - '0'); /* For getting Boolean Characters */
	int x=0, neg = 0;char c;
	while( true ) {
		c=*ipos++; if(c == '-') neg = 1;
		else {
			if (c<=32) return neg?-x:x;
			x=(x<<1)+(x<<3)+c-'0';
		}
	}
}
inline void output(int x,int flag = 1) {
        if(x<0)
        {
          *opos++='-';
          x *= -1;
        }
	int y,dig=0;
	while (x||!dig) { y=x/10;DIP[dig++]=x-((y << 3) + (y << 1))+'0';x=y;}
	while (dig--) *opos++=DIP[dig];
	*opos++= flag ? '\n' : ' ';
}
inline void InitFASTIO() {
	ipos = InpFile; opos = OutFile;
	fread_unlocked(InpFile,20000000,1,stdin);
}
inline void FlushFASTIO() {
	fwrite_unlocked(OutFile,opos-OutFile,1,stdout);	
}
//FASTIO FINISHED


int n;
int a[20010];
int b[20010];
int ar[20010];
int br[20010];
int ca[20010], cb[20010];
set<int> unfilled;

void solve_constraints(int u)
{
  bool resolved1 = true, resolved2 = true;
  int inca = ar[u]%2==0?1:-1;
  int incb = br[u]%2==0?1:-1;
  int val1, val2;
  val1 = a[ar[u]+inca]; 
  val2 = b[br[u]+incb];

  if((ar[u]+inca)!=n && ca[ar[u]+inca] == 'C')
  {
    if(ca[ar[u]] == 'A')
      ca[ar[u]+inca] = 'B';
    else
      ca[ar[u]+inca] = 'A';
    cb[br[val1]] = ca[ar[u]+inca];
    resolved1 = false;
  }
   
  if((br[u]+incb)!=n && cb[br[u]+incb] == 'C')
  {
    if(cb[br[u]] == 'A')
      cb[br[u]+incb] = 'B';
    else
      cb[br[u]+incb] = 'A';
    ca[ar[val2]] = cb[br[u]+incb];
    resolved2 = false; 
  }
  
  
  if(!resolved1)
  {
    if(unfilled.find(val1) != unfilled.end())
      unfilled.erase(unfilled.find(val1));
    solve_constraints(val1);
  }  
  if(!resolved2)
  { 
    if(unfilled.find(val2) != unfilled.end())
      unfilled.erase(unfilled.find(val2)); 
    solve_constraints(val2);
  }
}

void solve()
{
  ca[n] = 'C';
  cb[n] = 'C';
  ca[n+1]=cb[n+1]=0;
  while(!unfilled.empty())
  {
    int u = *(unfilled.begin());
    unfilled.erase(u);
    ca[ar[u]] = 'A';
    cb[br[u]] = 'A';
    solve_constraints(u);
  }
}



int main()
{
  InitFASTIO();
  int t;
  t=input();
  while(t--)
  {
    n=input();
    unfilled.clear();
    for(int i = 0; i < n; i++)
    {
      a[i]=input();
      ar[a[i]] = i;
      ca[i]='C';
    }
    for(int i = 0; i < n; i++)
    { 
      b[i]=input();
      br[b[i]] = i;
      cb[i]='C';
    }
    
    for(int i = 0; i < n; i++)
      unfilled.insert(i);
    
    solve();
    for(int i = 0; i < n; i++)
     *opos++=ca[ar[i]];
    *opos++='\n';
  }
  FlushFASTIO();
}
