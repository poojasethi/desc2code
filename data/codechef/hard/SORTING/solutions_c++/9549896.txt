#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<queue>
using namespace std;

struct node
{
int count;
node *left,*right;
node(int count,node *left,node *right):count(count),left(left),right(right){}
node* insert(int beg,int last,int w);
};

node *null=new node(0,NULL,NULL);
long long int ans;
int n;
int mapped[1000007];
node *node::insert(int beg,int last,int w)
{
if(beg>w||last<w)
return this;
if(beg==last)
return new node(this->count+1,null,null);
int mid=(beg+last)>>1;
return new node(this->count+1,this->left->insert(beg,mid,w),this->right->insert(mid+1,last,w));
}

node *root[511111];

int query(node *a,node *b,int beg,int last,int k)
{
if(beg==last)
return beg;
int count=a->left->count-b->left->count;;
int mid=(beg+last)>>1;
if(count>=k)
return query(a->left,b->left,beg,mid,k);
return query(a->right,b->right,mid+1,last,k-count);
}

void gen(int beg,int last,int *a)
{
queue<pair<int,int> >q;
q.push(make_pair(1,n));
while(!q.empty())
{
pair<int,int>temp=q.front();
q.pop();
last=temp.second;
beg=temp.first;
ans+=(last-beg+1);
int pivot=a[query(root[last],beg-1>=1?root[beg-1]:null,0,n,(last-beg+2)/2)];
if(pivot-1>beg)
q.push(make_pair(beg,pivot-1));
if(last>pivot+1)
q.push(make_pair(pivot+1,last));
}
}

long long int func(int *a)
{
null->left=null->right=null;
root[0]=null;
for(int i=1;i<=n;i++)
root[i]=root[i-1]->insert(0,n,mapped[i]);
gen(1,n,a);
}

int main()
{
scanf("%d",&n);
int a[n];
for(int i=1;i<=n;i++)
{
scanf("%d",&a[i]);
mapped[a[i]]=i;
}
func(a);
cout<<ans<<endl;
return 0;
}
