#include <algorithm>
#include <iostream>
#include <sstream>
#include <memory>
#include <vector>
#include <string>
#include <bitset>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <climits>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>
#define FILL(a, v) (memset(a, v, sizeof(a)))
#define foreach(i, Type, v) for(Type::iterator i=v.begin(); i!=v.end(); i++)
using namespace std;
typedef long long llong;
typedef pair<int, int> Item;
 
const int Maxn = 100005+10;
const int INF = 0x7f7f7f7f;
const int MOD = 1000000009;
const double eps = 1e-10;
const double pi = acos(-1.0);
 
inline void AddMod(int &x, int det) { x += det; if( x >= MOD ) x -= MOD; }
inline int CompareTo(double a, double b) { return (a>b+eps) ? 1 : ((a+eps<b)?-1:0); }
template<typename T> int sz(const T &a) { return a.size(); }
template<typename T> T str2num(string s) { istringstream i(s); T x; i>>x; return x; }
template<typename T> string x2str(T x) { ostringstream o; o<<x; return o.str(); }
 
struct bignum
{
	int x[4000],n;
	bignum(){n=0;memset(x,0,sizeof(x));}
	bignum(int a)
	{
		n=0;
		memset(x,0,sizeof(x));
		while(a>0)x[n++]=a%10,a/=10;
	}
	bignum operator +(const bignum&a)const
	{
		bignum c=*this;int i,r;
		for(i=0,r=0;i<max(a.n,c.n)||r>0;i++)
		{
			c.x[i]+=(i<a.n?a.x[i]:0)+r;
			r=c.x[i]>=10;
			if(r)
			{
				r=c.x[i]/10;c.x[i]%=10;
			}	
		}
		c.n=i;
		return c;
	}
	bignum operator *(const bignum&a)const
	{
		bignum c;
		memset(c.x,0,sizeof(c.x));
		for(int i=0;i<a.n;i++)
		for(int j=0;j<n;j++)
		{
			c.x[i+j]+=a.x[i]*x[j];
		}
		c.n=a.n+n-1;
		c.trim();
		return c;
	}
	void operator =(const bignum&a)
	{
		n=a.n;
		for(int i=0;i<n;i++)x[i]=a.x[i];
	}
	void operator=(int a)
	{
		n=0;
		memset(x,0,sizeof(x));
		while(a)x[n++]=a%10,a/=10;
	}
	bignum operator /(int v)const
	{
		bignum c=*this;
		for(int i=n-1,r=0;i>=0;i--)
		{
			int z=c.x[i]+r*10;
			r=z%v;c.x[i]=z/v;
		}
		c.trim();
		return c;
	}
	void trim()
	{
		int i,c;
		for(i=0,c=0;i<n||c;i++)
		{
			x[i]+=c;
			c=x[i]>=10;
			if(c)c=x[i]/10,x[i]%=10;
		}
		n=i;
		while(n&&x[n-1]==0)n--;
	}
	void print()
	{
		for(int i=n-1;i>=0;i--)printf("%d",x[i]);
		puts("");
	}
};
 
 
 
 
typedef unsigned long long ullong;
int n;
string str;
 
const int seed1=59, seed2=13799, MOD1=1299709, MOD2=1000000009;
int h1[Maxn], b1[Maxn];
ullong h2[Maxn], b2[Maxn];
int hash_head[MOD1], hash_next[Maxn], hash_index;
ullong hash_body[Maxn];
 
void hash_init()
{
    hash_index = 0;
    FILL(hash_head, -1);
    h1[0] = h2[0] = 0;
    for(int i=0; i<n; i++)
    {
    	h1[i+1] = (h1[i]*seed1+str[i]-'a'+1)%MOD1;
    	h2[i+1] = (h2[i]*seed2+str[i]-'a'+1)%MOD2;
    }
    b1[0] = b2[0] = 1;
    for(int i=1; i<Maxn; i++)
    {
        b1[i] = b1[i-1]*seed1%MOD1;
        b2[i] = b2[i-1]*seed2%MOD2;
    }
}
bool insert(int t1, ullong t2)
{
    int p = hash_head[t1];
    while( p != -1 )
    {
        if( hash_body[p] == t2 )
            return false;
        p = hash_next[p];
    }
    hash_body[hash_index] = t2;
    hash_next[hash_index] = hash_head[t1];
    hash_head[t1] = hash_index++;
    return true;
}
 
int d[Maxn*2],a[Maxn*2];
int manlache()
{
	int i,j,k=0,id,len=1,n=str.size();
	a[0]=-1;
	for(i=0;i<n;i++)
	{
		a[len++]=str[i]-'a'+1;
		a[len++]=0;
	}
	a[len-1]=-2;
	for(i=1;i<len;i++)
	{
		j=1;
		if(i<k)j=min(k-i,d[id+id-i]);
		while(a[i-j]==a[i+j])j++;
		d[i]=j;
		if(i+j>k)k=i+j,id=i;
	}
	return len;
}
int solve(int len)
{
	int ans=0;
	int i,s,e;
	for(i=1;i<len-1;i++)
	{
		if(i&1)s=(i-1)/2-(d[i]-1)/2,e=(i-1)/2+(d[i]-1)/2;
		else s=(i-1)/2-d[i]/2+1,e=(i+1)/2+d[i]/2-1;
		s++,e++;
		//printf("%d %d\n",s,e);
		while(s<=e)
		{
			int t1=(h1[e]-1LL*h1[s-1]*b1[e-s+1]%MOD1+MOD1)%MOD1;
			ullong t2=(h2[e]-h2[s-1]*b2[e-s+1]%MOD2+MOD2)%MOD2;
			if(insert(t1,t2)==0)break;
			else ans++,s++,e--;
		}
	}
	return ans;
}
 
bignum power[610];
int polya(int c, int len)
{
	power[0] = 1;
	for(int i=1; i<=len; i++)
		power[i] = power[i-1]*bignum(c);
 
	bignum ans1=0, ans2=0;
	for(int i=1; i<=len; i++)
		ans1 = ans1+power[__gcd(len, i)];
	if( len&1 )
		ans2 = power[(len+1)/2]*bignum(len);
	else
		ans2 = (power[len/2]+power[len/2+1])*bignum(len/2);
	bignum ans = (ans1+ans2);
	ans = (ans1+ans2)/(2*len);
	ans.print();
	return 0;
}
int main()
{
	int N;
	ios::sync_with_stdio(0);
 
	cin>>str>>N;
	n = sz(str);
 
	hash_init();
	manlache();
	int cnt = solve(2*n+1);
	if( polya(cnt, N) > 0 )
		return 1;
 
    return 0;
} 