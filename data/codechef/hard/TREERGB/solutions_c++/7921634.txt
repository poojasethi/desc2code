#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>
#include <cassert>
 
using namespace std;
 
#define a HELLO_VECTOR
 
#define FILENAME ""
#define INPUT_FILE FILENAME "in"
#define OUTPUT_FILE FILENAME "out"
 
const int md = 1000000007;
 
inline void add(int &a, int b) {
  a += b;
  if (a >= md) {
    a -= md;
  }
}
 
inline int mul(int a, int b) {
  return (long long)a * b % md;
}
 
const int N = 310;
 
vector <int> g[N];
int n;
int lim[3];
bool was[N];
int size[N];
int f[N][N];
int prec[3][N][N];
int nf[N];
 
void precalc(int v, int col) {
  was[v] = true;
  size[v] = 1;
  for (int j = 0; j <= n; j++) {
    f[v][j] = 0;
  }
  f[v][0] = 1;
  int sz = g[v].size();
  for (int jj = 0; jj < sz; jj++) {
    int u = g[v][jj];
    if (was[u]) {
      continue;
    }
    precalc(u, col);
    for (int j = 0; j <= size[u] + size[v]; j++) {
      nf[j] = 0;
    }
    for (int j = 0; j <= size[v]; j++) {
      for (int k = 0; k <= size[u]; k++) {
        int p = j + k;
        add(nf[p], mul(f[v][j], f[u][k]));
      }
    }
    size[v] += size[u];
    for (int j = 0; j <= size[v]; j++) {
      f[v][j] = nf[j];
    }
  }
  for (int j = 0; j <= n; j++) {
    prec[col][v][j] = f[v][j];
  }
  for (int j = lim[col] - 1; j >= 0; j--) {
    add(f[v][j + 1], f[v][j]);
  }
}
 
int c[N][N];
int h[N][N];
int nh[N];
int ans;
 
void solve(int v, int col) {
  was[v] = true;
  size[v] = 1;
  for (int j = 0; j <= n; j++) {
    h[v][j] = 0;
  }
  h[v][0] = 1;
  int sz = g[v].size();
  for (int jj = 0; jj < sz; jj++) {
    int u = g[v][jj];
    if (was[u]) {
      continue;
    }
    solve(u, col);
    for (int j = 0; j <= size[u] + size[v]; j++) {
      nh[j] = 0;
    }
    for (int j = 0; j <= size[v]; j++) {
      for (int k = 0; k <= size[u]; k++) {
        int p = j + k;
        add(nh[p], mul(h[v][j], h[u][k]));
      }
    }
    size[v] += size[u];
    for (int j = 0; j <= size[v]; j++) {
      h[v][j] = nh[j];
    }
  }
  if (v == 1) {
    for (int j = 0; j < lim[col]; j++) {
      add(ans, h[v][j]);
    }
    return;
  }
//  for (int j = 0; j <= size[v]; j++) {
//    cerr << "pre:  " << v << " " << j << " " << h[v][j] << endl;
//  }
  nh[0] = 0;
  for (int j = 0; j <= size[v]; j++) {
    nh[j + 1] = h[v][j];
  }
  for (int other = 0; other < 3; other++) {
    if (other == col) {
      continue;
    }
    int real = 0 + 1 + 2 - col - other;
    for (int jj = 0; jj < size[v]; jj++) {
      int mult = prec[real][v][jj];
      if (mult == 0) {
        continue;
      }
      int c_or_o = size[v] - jj - 1;
//      cerr << "other " << other << " " << real << " " << jj << " " << c_or_o << " mult " << mult << endl;
      for (int cnt_c = 0; cnt_c <= c_or_o; cnt_c++) {
        int cnt_o = c_or_o - cnt_c;
        if (cnt_o + 1 > lim[other]) {
          continue;
        }
        add(nh[cnt_c], mul(mult, c[c_or_o][cnt_c]));
      }
    }
  }
  for (int j = 0; j <= size[v]; j++) {
    h[v][j] = nh[j];
//    cerr << "post: " << v << " " << j << " " << h[v][j] << endl;
  }
}
 
int main() {
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      if (j == 0) c[i][j] = 1; else
      if (i == 0) c[i][j] = 0; else {
        c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % md;
      }
    }
  }
  scanf("%d %d %d %d", &n, lim + 0, lim + 1, lim + 2);
  for (int j = 0; j < 3; j++) {
    if (lim[j] > n) {
      lim[j] = n;
    }
  }
  for (int i = 1; i <= n; i++) {
    g[i].clear();
  }
  for (int i = 1; i <= n - 1; i++) {
    int foo, bar;
    scanf("%d %d", &foo, &bar);
    g[foo].push_back(bar);
    g[bar].push_back(foo);
  }
  for (int col = 0; col < 3; col++) {
    for (int i = 1; i <= n; i++) {
      was[i] = false;
    }
    precalc(1, col);
  }
  ans = 0;
  for (int col = 0; col < 3; col++) {
    for (int i = 1; i <= n; i++) {
      was[i] = false;
    }
    solve(1, col);
//    for (int j = 0; j <= lim[col]; j++) {
//      add(ans, h[1][j]);
//    }
  }
  printf("%d\n", ans);
  return 0;
}
 