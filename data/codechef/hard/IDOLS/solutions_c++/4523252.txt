#include<cstdio>
#include<algorithm>
#include<stack>
#include<queue>
#include<vector>
#include<string>
#include<string.h>
#include<cstdlib>
#include<ctime>
#include<cmath>
#include<map>
#include<set>
#include<iostream>
#include<sstream>
#include<cctype>
#define fi first
#define se second
#define rep(i,n) for(int i = 0; i < n; i++)
#define rrep(i,n) for(int i = 1; i <= n; i++)
#define drep(i,n) for(int i = n-1; i >= 0; i--)
#define gep(i,g,j) for(int i = g.head[j]; i != -1; i = g.e[i].next)
#define each(it,c) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define rng(a) a.begin(),a.end()
#define maxs(x,y) x = max(x,y)
#define mins(x,y) x = min(x,y)
#define pb push_back
#define sz(x) (int)(x).size()
#define pcnt __builtin_popcount
#define snuke srand((unsigned)clock()+(unsigned)time(NULL))
using namespace std;
typedef long long int ll;
typedef pair<int,int> P;
typedef vector<int> vi;
 
const int MX = 100005, INF = 1000010000;
const ll LINF = 1000000000000000000ll;
const double eps = 1e-10;
const int dx[] = {-1,0,1,0}, dy[] = {0,-1,0,1}; //<^>v
 
int a[MX];
int dep[MX];
 
// Segment tree (RMQ type)
struct seg{
	vector<P> d; int sz;
	seg(){}
	seg(int mx){
		sz = 1; while(sz < mx) sz <<= 1;
		d.resize(sz<<1,P(-INF,0));
	}
	inline P f(P a, P b) {
		if (a.fi > b.fi) return a;
		else if (a.fi < b.fi) return b;
		return P(a.fi,a.se+b.se);
	}
	void add(int i, int x=0){
		for(i+=sz,d[i]=P(x,1),i>>=1;i>0;i>>=1) {
			d[i] = f(d[i<<1],d[i<<1|1]);
		}
	}
	P qu(int a, int b, int i=1, int l=0, int r=-1){
		if(r == -1) r = sz;
		if(a <= l && r <= b) return d[i];
		int c = l+r>>1; P res = P(-INF,0);
		if(a < c) res = f(res,qu(a,b,i<<1,l,c));
		if(c < b) res = f(res,qu(a,b,i<<1|1,c,r));
		return res;
	}
};
//
 
// HL-decomposition
struct hl {
	vector<vi> to, d;
	vi he, vd, vp, pv;
	vector<seg> t;
	int root;
	hl() {}
	hl(int mx):to(mx),d(1),he(mx),vd(mx),vp(mx),pv(1,-1) {}
	void addEdge(int a, int b) {
		to[a].pb(b);
		to[b].pb(a);
	}
	int dfs(int v, int de=0, int p=-1) {
		dep[v] = de;
		int res = 1;
		P me = P(0,-1);
		rep(i,sz(to[v])) {
			int u = to[v][i];
			if (u == p) continue;
			int r = dfs(u, de+1, v);
			res += r;
			me = max(me, P(r, i));
		}
		he[v] = me.se;
		return res;
	}
	void cons(int v, int di, int p=-1) {
		vd[v] = di; vp[v] = sz(d[di]);
		d[di].pb(v);
		rep(i,sz(to[v])) {
			int u = to[v][i];
			if (u == p) continue;
			if (he[v] == i) cons(u, di, v);
			else {
				int ni = sz(d);
				d.pb(vi()); pv.pb(v);
				cons(u, ni, v);
			}
		}
	}
	void init(int v=0) {
		root = v;
		dfs(root);
		cons(root, 0);
		rep(i,sz(d)) t.pb(seg(sz(d[i])));
	}
	int lca(int a, int b) {
		vi ap, bp;
		int p = vd[a];
		while (1) {
			ap.pb(p);
			if (pv[p] == -1) break;
			p = vd[pv[p]];
		}
		p = vd[b];
		while (1) {
			bp.pb(p);
			if (pv[p] == -1) break;
			p = vd[pv[p]];
		}
		reverse(rng(ap)); ap.pb(-2);
		reverse(rng(bp)); bp.pb(-3);
		int pi = 1;
		while (ap[pi] == bp[pi]) ++pi;
		p = ap[pi-1];
		int ai, bi;
		if (vd[a] == p) ai = vp[a];
		else ai = vp[pv[ap[pi]]];
		if (vd[b] == p) bi = vp[b];
		else bi = vp[pv[bp[pi]]];
		return d[p][min(ai,bi)];
	}
	void set(int v, int x) {
		t[vd[v]].add(vp[v],x-dep[v]);	
	}
	P get(int v) {
		P res = P(-INF,0);
		int x = dep[v];
		while (v != -1) {
			int nd = vd[v], np = vp[v];
			res = t[nd].f(res,t[nd].qu(0,np+1));
			v = pv[nd];
		}
		res.fi += x;
		return res;
	}
};
//
 
int main(){
	int n, q;
	scanf("%d%d",&n,&q);
	rrep(i,n) {
		scanf("%d",&a[i]);
	}
	hl d(n+1);
	rrep(i,n-1){
		int p;
		scanf("%d",&p);
		d.addEdge(i+1,p);
	}
	d.init(1);
	rrep(i,n) d.set(i,a[i]);
	rep(qi,q) {
		int ty, x;
		scanf("%d%d",&ty,&x);
		if (ty == 0) {
			int y;
			scanf("%d",&y);
			d.set(x,y);
		} else {
			P res = d.get(x);
			printf("%d %d\n", res.fi, res.se);
		}
	}
	
	return 0;
}
 
 
 
 
 