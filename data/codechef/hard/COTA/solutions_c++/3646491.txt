#include <cstdio>
#include <iostream>
#include <fstream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <string>
#include <ctime>
#include <cassert>
#include <utility>

using namespace std;

#define INF 1000000000
#define MAXN 19

int T, N, M, a, b, c;
int D[2 * MAXN][2 * MAXN];
int dp[1 << MAXN];

int convert(int x) {
    if(x % 2 == 0)
        return x / 2;
    return N + x / 2;
}

int solve(int t) {
    for(int i = 0; i < (1 << N); i++)
        dp[i] = INF;
    dp[0] = 0;
    
    for(int mask = 0; mask < (1 << N); mask++)
        if(dp[mask] < INF) {
            for(int i = 0; i < N; i++)
                if((mask & (1 << i)) == 0) {
                    for(int j = i + 1; j < N; j++)
                        if((mask & (1 << j)) == 0) {
                            int nmask = mask | (1 << i) | (1 << j);
                            int a = i + t * N;
                            int b = j + t * N;
                            dp[nmask] = min(dp[nmask], dp[mask] + D[a][b]);
                        }
                    break;
                }
        }
    
    return dp[(1 << N) - 1];
}

int main() {
//	freopen("date.in", "r", stdin);
//	freopen("date.out","w", stdout);
	
	scanf("%d", &T);
	while(T--) {
        scanf("%d %d", &N, &M);
        for(int i = 0; i < 2 * N; i++)
            for(int j = 0; j < 2 * N; j++)
                D[i][j] = INF;
        for(int i = 0; i < M; i++) {
            scanf("%d %d %d", &a, &b, &c);
            a = convert(a);
            b = convert(b);
            D[a][b] = D[b][a] = c;
        }
        
        for(int k = 0; k < 2 * N; k++)
            for(int i = 0; i < 2 * N; i++)
                for(int j = 0; j < 2 * N; j++)
                    D[i][j] = min(D[i][j], D[i][k] + D[k][j]);
        
        int ans = solve(0);
        ans = min(ans, solve(1));
        
        printf("%d\n", ans);
	}
	
	return 0;
}
