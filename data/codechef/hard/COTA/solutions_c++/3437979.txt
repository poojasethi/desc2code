#include <cstdio>
#include <iostream>
#include <vector>
#include <list>
#include <queue>
#include <map>
#include <set>
#include <utility>
#include <functional>
#include <string>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;
typedef map<int,int> mii;
typedef vector<int> vi;
typedef vector< vector<int> > vvi;
typedef vector<char> vc;
typedef vector<bool> vb;
typedef vector<string> vs;

#define rep(i,n) for(int i=0;i<(n);i++)
#define forup(i,a,b) for(int i=(a);i<=(b);i++)
#define fordn(i,a,b) for(int i=(a);i>=(b);i--)
#define drep(i,n) for(i=0;i<(n);i++)
#define dforup(i,a,b) for(i=(a);i<=(b);i++)
#define dfordn(i,a,b) for(i=(a);i>=(b);i--)
#define all(x) x.begin(),x.end()
#define permute(x) next_permutation(all(x))
#define pb push_back
#define mp make_pair
#define fi first
#define sc second
#define gi(x) scanf("%d",&x)

const int inv=int(1e9);
const int max_n=20;
int t,n,m;
int adjm[2*max_n][2*max_n];
int dp[1<<max_n];

int solve(int mask,int odd) {
	if(mask==((1<<n)-1)) return 0;
	int& ret=dp[mask];
	if(ret==-1) {
		ret=inv;
		int b=0;
		while(b<n and (1<<b)&mask) b++;
		forup(i,b+1,n-1)
			if(((1<<i)&mask)==0)
				ret=min(ret,adjm[2*b+odd][2*i+odd]+solve(mask|(1<<b)|(1<<i),odd));
	}
	return ret;
}

int main() {
	gi(t);
	while(t--) {
		gi(n); gi(m);
		rep(i,2*n)
			rep(j,2*n) if(i==j) adjm[i][j]=0; else adjm[i][j]=inv;
		rep(i,m) {
			int u,v,p;
			gi(u); gi(v); gi(p);
			adjm[u][v]=adjm[v][u]=p;
		}
		rep(k,2*n)
			rep(i,2*n)
				rep(j,2*n)
					adjm[i][j]=min(adjm[i][j],adjm[i][k]+adjm[k][j]);
		memset(dp,-1,sizeof(dp));
		int ans=solve(0,0);
		memset(dp,-1,sizeof(dp));
		ans=min(ans,solve(0,1));
		printf("%d\n",ans);
	}
	return 0;
}
