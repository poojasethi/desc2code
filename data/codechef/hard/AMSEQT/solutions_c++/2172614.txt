// -*- C++ -*-
// File: sequencetransmission.cpp
// Copyright (C) 2013
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */

int MOD = 1000000009;

void add(int &x, int y) {
    x += y;
    if(x>=MOD) x -= MOD;
    if(x<0) x += MOD;
}

struct BIT {

    static const int maxn = (1<<18)+10;
    int tree[maxn];
    int n;

    void init(int n) {CL(tree,0); this->n=n;}

    int sum(int i) {
        int s = 0;
        for(i++; i>0; i -= -i&i) ::add(s, tree[i]);
        return s;
    }

    int sum(int i, int j) {return (sum(j) - sum(i-1) + MOD)%MOD;}

    void add(int i, int x) {
        for(i++; i<=n; i += -i&i) ::add(tree[i], x);
    }
};

int a[200010];
int dp[200010];
int pref[200010];


void solve() {
    int N, M;
    cin >> N >> M;
    rep(i,N) cin >> a[i];

    const int total = 1<<M;

    static BIT bit;

    pref[0] = a[0]%total;
    FOR(i,1,N) pref[i] = (pref[i-1] + a[i])%total;

    CL(dp,0);
    bit.init(total);
    bit.add(0,1);

    int res = 0;
    int S = 1;

    rep(i,N) {

        if(pref[i]<total/2) {
            int last = (pref[i] - total/2 + 1 + total) % total;
            //res = (bit.sum(0,pref[i]) + bit.sum(last,total-1))%MOD;
            res = (S - bit.sum(pref[i]+1, (last-1+total)%total) + MOD)%MOD;
        }
        else {
            res = bit.sum(pref[i]-total/2+1, pref[i]);
        }

        bit.add(pref[i],res);
        add(S,res);
    }
    cout << res << endl;
}

int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);

    int T;
    cin >> T;

    while(T--) solve();


#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
