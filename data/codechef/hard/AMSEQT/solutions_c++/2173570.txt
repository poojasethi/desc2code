#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <cctype>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <iostream>
#include <ctime>
#include <cassert>
#include <sstream>

using namespace std;

#define INF 0x3f3f3f3f
#define ll long long
#define MAXVAL ((1<<18) + 1)

const int mod = 1000000009;
int tree[4*MAXVAL];

int build(int v, int b, int e) {
    if (b == e)
        return tree[v] = (b == 0);
    int m = (b+e)/2;
    return tree[v] = build(2*v+1,b,m) + build(2*v+2,m+1,e);
}

int query(int v, int b, int e, int i, int j) {
    if (e<i || b>j) return 0;
    
    if (i<=b && e<=j) return tree[v];
    
    int m = (b+e)/2;
    return (query(2*v+1,b,m,i,j) + query(2*v+2,m+1,e,i,j))%mod;
}

int update(int v, int b, int e, int pos, int val) {
    if (e<pos || b>pos) return tree[v];
    
    if (b == e && b == pos) {
        tree[v] = (tree[v] + val) % mod;
        return tree[v];
    }   
    
    int m = (b+e)/2;
    return tree[v] = (update(2*v+1,b,m,pos,val) + update(2*v+2,m+1,e,pos,val))%mod;
}

int main() {
    int nt,n,m,M,MM,d,ans,v,sum;
    scanf("%d",&nt);
    while (nt--) {
        scanf("%d%d",&n,&m);
        M = 1<<m;
        MM = M/2 - 1;
        
        build(0,0,M-1);
        
        sum = 0;
        for (int i=0; i<n; i++) {
            scanf("%d",&v);
            sum = (sum + v) % M;
            if (sum >= MM) {
                d = sum - MM;
                ans = query(0,0,M-1,d,sum);
            }
            else {
                d = MM - sum;
                ans = (query(0,0,M-1,0,sum) + query(0,0,M-1,M-d,M-1)) % mod;
            }
            update(0,0,M-1,sum,ans);
        }
        printf("%d\n",ans);
    }
    
	return 0;
}
