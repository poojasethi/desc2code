#include <iostream>
#include <cstring>
using namespace std;

typedef long long LL;

const int MAXN = 530000;

int T;
int N, M;
int A[MAXN];
int dp[MAXN];
int pref[MAXN];
const int MD = 1000000009;

long long cum(int st) {
	int ret = 0;
	for (int i = 0; i <= st; ++i) {
		ret = ret + dp[i];
		ret %= MD;
	}
	return ret;

}

struct BIT {
	int sum[MAXN];
	int n;

	void init(int _n) {
		n = _n;
		memset(sum, 0, sizeof(sum));
	}

	void add(int pos, int x) {
		while (pos <= n) {
			sum[pos] = (sum[pos] + x) % MD;
			pos += pos & -pos;
		}
	}

	LL get(int pos) {
		LL ret = 0;
		while (pos > 0) {
			ret += sum[pos];
			pos -= pos & -pos;
		}
		return ret % MD;
	}
};

BIT bit;

int main() {
	scanf("%d", &T);

	while (T--) {
		scanf("%d%d", &N, &M);
		pref[0] = 0;
		int tot = (1 << M);
		for (int i = 1; i <= N; ++i) {
			scanf("%d", &A[i]);
			pref[i] = (pref[i - 1] + A[i]) % tot;
		}
		memset(dp, 0, sizeof(dp));
		int limit = 1 << (M - 1);
		bit.init(tot);
		bit.add(1, 1);
		long long res = 0;
		long long tot1 = 1;
		for (int i = 1; i <= N; ++i) {
			if (pref[i] < limit) {
				res = (tot1 - bit.get(pref[i] + limit + 1)
						+ bit.get(pref[i] + 1) + MD) % MD;
			} else {
				res = (bit.get(pref[i] + 1) - bit.get(pref[i] - limit + 1) + MD)
						% MD;
			}
			bit.add(pref[i] + 1, res);
			tot1 += res;
			tot1 %= MD;
		}
		cout << res << endl;
	}
	return 0;
}
