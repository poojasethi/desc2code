/* CPP Tempelate
 * @author Devashish Tyagi
 */

#include <algorithm>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <fstream>
#include <stack>
#include <string>
#include <vector>
#include <list>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>

#define sf(a) scanf("%d",&a)
#define ssf(a,b) scanf("%d %d",&a,&b)
#define pf(a) printf("%d\n",a)
#define foreach(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define pi pair<int,int>
#define vi vector<int>
#define all(v) v.begin(),v.end()

#define PB push_back
#define MP make_pair
#define sz(a) (int)(a).size()

#define FOR(i,a,b) for(int (i) = (a); (i) < (b); ++(i))  
#define RFOR(i,a,b) for(int (i) = (a)-1; (i) >= (b); --(i))  
#define CLEAR(a) memset((a),0,sizeof(a))

#define INF 1000000000
#define MOD 1000000009
#define PI 3.1415926535897932

using namespace std;
typedef long long LL;

class BIT {
private:
	vector<LL> tree;
	int N;
public:
	BIT(int n): tree(n), N(n) {}

	void update(int index, int v) {
		while(index < N) {
			tree[index] += v;
			tree[index] %= MOD;
			index += (index & -index);
		}
	}

	LL read(int index) {
		LL sum = 0;
		while(index > 0) {
			sum += tree[index];
			sum %= MOD;
			index -= (index & -index);
		}
		return sum;
	}

	LL readRange(int l, int r) {
		if (l == 1)
			return read(r) % MOD;
		else
			return (read(r) - read(l-1) + MOD)%MOD;
	}
};

int main()
{
	int t;
	cin>>t;
	while(t--) {
		int n, m;
		cin>>n>>m;
		int a[n];
		FOR(i, 0, n)
			cin>>a[i];

		int MAXN = (1<<m);
		int limit = (1<<(m-1));
		BIT bit(MAXN+1);
		bit.update(1, 1);
		int prefix = 0;
		LL ans = 0;

		FOR(i, 0, n) {
			prefix += a[i];
			prefix %= MAXN;
			ans = 0;
			if (prefix >= limit -1 ) {
				ans += bit.readRange(prefix - limit + 1 + 1, prefix + 1);
				ans %= MOD;
			}
			else {
				ans += bit.readRange(0 + 1, prefix + 1);
				//cout<<ans<<" "<<prefix<<endl;
				ans %= MOD;
				ans += bit.readRange(limit + prefix + 1 + 1, MAXN - 1 + 1);
				ans %= MOD;
			}
			bit.update(prefix + 1, ans);
		}
		cout<<ans<<endl;
	}
	return 0;
}