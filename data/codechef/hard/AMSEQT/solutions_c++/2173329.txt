#include"iostream"
#include"vector"
#include"string"
#include"cstdio"
#include"cstdlib"
#include"cmath"
#include"algorithm"
#include"queue"
#include"cstring"
#include"map"
#include"set"
#include"fstream"
#include"sstream"
#include"numeric"
#include"stack"
#include"iomanip"
#include"bitset"
#include"list"
#include"functional"
#include"utility"
#include"ctime"
#include"cctype"

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int,int> pii;
typedef vector<pii> vpi;
const double eps=1e-7;
const int inf=0x3f3f3f3f;
const int hinf=0x3f3f3f3f;
const int mod=1000000009;

#define out(x) cout<<x<<'\n';
#define fio freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define fino freopen("input.txt","r",stdin);
#define sz(a) sizeof(a)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define ms(a,i) memset((a),(i),sz(a))
#define clr(x) memset(x,0,sz(x))
#define cdp(x) memset((x),-1,sizeof(x))
#define infi(x) memset(x,0x3f,sz(x))
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)

const int maxn = 555555;
int t , n , m;
int pref[555555];
int cnt[555555];


struct BIT
{
    int sum[maxn];
    int n;

    void init(int n)
    {
        this->n = n;
        clr(sum);
    }

    void add(int pos , int x)
    {
        while(pos <= n)
        {
            sum[pos] = (sum[pos] + x) % mod;
            pos += pos & -pos;
        }
    }

    ll get(int pos)
    {
        ll ret = 0;
        while(pos > 0)
        {
            ret += sum[pos];
            pos -= pos & -pos;
        }
        return ret % (1ll * mod);
    }
}bit;

int main()
{
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d%d",&n,&m);
        for(int i = 1 ; i <= n ; i ++ ) scanf("%d",&cnt[i]);
        pref[0] = 0;
        int tot = (1 << m);
        int limit = 1 << (m - 1);
        for(int i = 1 ; i <= n ; i ++ ) pref[i] = (pref[i - 1] + cnt[i]) % tot;
        bit.init(tot);
        bit.add(1,1);
        ll res = 0;
        ll ttt = 1;
        for(int i = 1 ; i <= n ; i ++ )
        {
            if(pref[i] >= limit)
            {
                res = (bit.get(pref[i] + 1) - bit.get(pref[i] - limit + 1) + mod) % mod;
            }
            else
            {
                //res = bit.get(pref[i] + 1) + bit.get(tot - 1 + 1) - bit.get(pref[i] + limit + 1);
                res = (ttt - bit.get(pref[i] + limit + 1) + bit.get(pref[i] + 1) + mod) % mod;
            }
            bit.add(pref[i] + 1, res);
            ttt += res;
            if(ttt >= mod) ttt %= mod;
        }
        cout<<res<<'\n';
    }
}
