#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
// Dekartovoe derevo
#define INF 1000000000
#define MOD 1000000009
int sum_mod = (1<<3);
inline int fix(const int& w){
  return w & (sum_mod-1);
}
#define MAX 263000
int BIT[MAX];
int used[MAX] , ust;
vi aff;
int to_add;
void init(){
  for(int i=0;i<sz(aff);++i)
   BIT[aff[i]] = 0;
  ++ust;
  aff.clear();
  to_add = 0;
}
void bit_add(int pos , int how){
  ++pos;
  for(;pos<MAX;pos += (pos&(-pos))){
   if(used[pos] != ust)
    used[pos] = ust,
    aff.pb(pos);
   BIT[pos] += how;
   if(BIT[pos] >= MOD)
    BIT[pos] -= MOD;
                               }
}
int _get_sum(int up){
  int ret = 0;
  ++up;
  for(;up>0;up -= (up&(-up))){
   ret += BIT[up];
   if(ret >= MOD)ret -= MOD;
                             }
  return ret;
}
int bit_get_sum(int lo , int hi){
  int ret = (_get_sum(hi) - _get_sum(lo-1))%MOD;
  if(ret < 0)ret += MOD;
  return ret;
}
void insert(int pos , int how){
  pos = (pos - to_add) % sum_mod;
  if(pos < 0)pos += sum_mod;
  bit_add(pos , how);
}
void add_val(int how){
  to_add = (to_add + how) % sum_mod;
}
int get_sum(int up_to){
  int lo = -to_add , hi = (up_to - to_add) % sum_mod;
  if(lo < 0)lo += sum_mod;
  if(hi < 0)hi += sum_mod;
  if(lo <= hi)return bit_get_sum(lo , hi);
  return (bit_get_sum(0 , hi) +
          bit_get_sum(lo , sum_mod-1))%MOD;
}
void doit(){
  int N , M;
  //N = 200000;
  //M = 16;
  scanf("%d%d" , &N , &M);
  vi in(N) , dp(N+1 , 0);
  sum_mod = (1<<M);
  for(int i=0;i<N;++i){
   //in[i] = rand();
   scanf("%d" , &in[i]);
   fix(in[i]);
                      }
  init();
  //node* root = null;
  insert(0 , 1);
  //root = insert(root , 0 , 1);
  for(int i=N-1;i>=0;--i){
   //if(i % 1000 == 0)cout<<i<<":"<<Last - buffer<<endl;
   add_val(in[i]);
   //root = add_val(root , in[i]);
   dp[i] = get_sum((sum_mod>>1)-1);
   insert(0 , dp[i]);
                         }
  printf("%d\n" , (int)dp[0]);
}
int main(){
  int Q;
  scanf("%d" , &Q);
  while(Q-- > 0)
   doit();
  return 0;
}
