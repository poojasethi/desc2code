#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define MOD 1000000009
#define ll long long int

using namespace std;

int A[300005];
ll DP[300005],tree[1000006];

void init(int n,int l,int r) {
	if(l==r) {
		tree[n]=0;
		return;
	}
	int m=(l+r)>>1,left=(n<<1);
	init(left,l,m);
	init(left+1,m+1,r);
	tree[n]=0;
}

void update(int n,int l,int r,int q) {
	if(l==r) {
		tree[n]=DP[q];
		return;
	}
	int m=(l+r)>>1,left=(n<<1);
	if(q>m)
		update(left+1,m+1,r,q);
	else
		update(left,l,m,q);
	tree[n]=(tree[left]+tree[left+1])%MOD;
}

ll query(int n,int nl,int nr,int ql,int qr) {
	if(ql>qr)	return 0;
	if(nl>qr || nr<ql)	return 0;
	if(nl>=ql && nr<=qr)	return tree[n];
	int m=(nl+nr)>>1,left=(n<<1);
	ll ans=query(left,nl,m,ql,qr)+query(left+1,m+1,nr,ql,qr);
	return ans%MOD;

}

void solve(void) {
	ll i,m,n,offset,l,r,ql,qr,x,M,q;
	scanf("%lld%lld",&n,&m);
	for(i=1;i<=n;i++)
		scanf("%d",&A[i]);
	for(i=0;i<(1<<m);i++)
		DP[i]=0;
	DP[A[1]]=1;
	offset=0;
	M=(1<<m);
	l=1<<(m-1);
	r=M-1;
	init(1,0,M-1);
	update(1,0,M-1,A[1]);
	for(i=2;i<=n;i++) {
		ql=(l-offset);
		while(ql<0)
			ql+=M;
		ql%=M;
		qr=(r-offset);
		while(qr<0)
			qr+=M;
		qr%=M;
		//cout<<ql<<" "<<qr<<" ";
		if(ql<=qr)
			q=query(1,0,M-1,0,ql-1)+query(1,0,M-1,qr+1,M-1);
		else
			q=query(1,0,M-1,qr+1,ql-1);
		q%=MOD;
		//cout<<q<<" ";
		offset+=A[i];
		offset%=M;
		x=(A[i]-offset);
		while(x<0)
			x+=M;
		x%=M;
		//cout<<x<<" ";
		DP[x]=(DP[x]+q)%MOD;
		//cout<<DP[x]<<endl;
		update(1,0,M-1,x);
	}
	ql=(l-offset);
	while(ql<0)
		ql+=M;
	ql%=M;
	qr=(r-offset);
	while(qr<0)
		qr+=M;
	qr%=M;
	if(ql<=qr)
		q=query(1,0,M-1,0,ql-1)+query(1,0,M-1,qr+1,M-1);
	else
		q=query(1,0,M-1,qr+1,ql-1);
	q%=MOD;
	printf("%lld\n",q);
}

int main () {
	int test;
	scanf("%d",&test);
	while(test--) {
		solve();
	}
	return 0;
}