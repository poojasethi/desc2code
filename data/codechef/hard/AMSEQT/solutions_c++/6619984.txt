#include<bits/stdtr1c++.h>
using namespace std;
typedef long long LL;

const LL MOD=1000000009;
LL dp[(int)2e5 +10];
int n,m;
vector<int> v;
int nm;

const int MX=(int)(1<<18) + 109;
LL Bit[MX];
void update(int x,LL k)
{
	x++;
	while(x<MX)
	{
		Bit[x]+=k;
		Bit[x]%=MOD;
		x+=(x&-x);
	}
}

LL query(int x)
{
	x++;
	LL ret=0;
	while(x>0)
	{
		ret+=Bit[x];
		ret%=MOD;
		x-=(x&-x);
	}
	return ret;
}

LL query(int s,int e)
{
	return (query(e)-query(s-1)+MOD)%MOD;
}
int main()
{
    #ifndef ONLINE_JUDGE
        freopen("2.in","r",stdin);
		//freopen("2.out","w",stdout);
    #endif // ONLINE_JUDGE
    
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    cin>>t;
    while(t--)
    {
    	LL a;
    	cin>>n>>m;
    	v.clear();
    	for(int i=0;i<n;i++)
    	{
    		cin>>a;
    		v.push_back(a%MOD);
    	}
    	memset(Bit,0,sizeof Bit);
    	update(0,1);
    	dp[0]=1;
    	LL sum=0;
    	int hv=1<<(m-1);
    	int md=1<<m;
    	for(int i=1;i<=n;i++)
    	{
    		sum+=v[i-1];
    		sum%=md;
    		if(sum>=hv)
    			dp[i]=query(sum-hv+1,sum);
    		else
    			dp[i]=query(0,sum)+query(sum+hv+1,md-1);
    		dp[i]%=MOD;
    		dp[i]=(dp[i]+MOD)%MOD;
    		update(sum,dp[i]);
    	}
    	cout<<dp[n]<<endl;
    }
    return 0;
    
}
