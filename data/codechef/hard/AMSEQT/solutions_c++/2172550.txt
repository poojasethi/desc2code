#include <iostream>
#include <string>
#include <string.h>
#include <math.h>
#include <time.h>
#include <stdio.h>
#include <utility>
#include <algorithm>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <list>

#define FORST(X,S,T) for(int X=(S); X<=(T); X++)  
#define RFORST(X,S,T) for(int X=(S); X>=(T); X--)  
#define FOR(X,XB) for(int X=0; X<(XB); X++)
#define RFOR(X,XB) for(int X=(XB)-1; X>=0; X--)
#define FORSTL(X,C) for(X=C.begin();X!=C.end();X++)
#define SQR(X) ((X)*(X))
#define MID(X,Y) (((X)+(Y))/2)
#define FILL(X,V) memset(X,V,sizeof(X))
#define FILE_R(X) freopen(X, "r", stdin)  
#define FILE_W(X) freopen(X, "w", stdout)  
#define ERREQ(X,Y) (fabs((X)-(Y))<EPS)
#define DBGL cout << "here" << endl;
#define MIN(X,Y) ((X)<(Y)?(X):(Y))
#define MAX(X,Y) ((X)>(Y)?(X):(Y))
#define INITLISTS {L=0; FILL(adj,-1);}
#define SZ(X) sizeof(X)
const double PI = acos(-1.0);
const double EPS = 1E-9;
const int INF = (int)1E9;
typedef long long LINT;
using namespace std;

#define MAXN 200005
#define MOD 1000000009

#define MAXV 300000

int N, M;
LINT a[MAXN];
LINT sum[MAXV];
LINT sa[MAXN];
LINT pow2[30];


void insert(int k, int v){
	for(;k<MAXV; k+=(-k)&k){
		sum[k] += v;
		sum[k] %= MOD;
	}
}

LINT getsum(int k){
	LINT t = 0;
	for(;k>=1;k-=(-k)&k){ 
		t += sum[k];
		t %= MOD;
	}
	return t;
}

int main(){
	int cs;

	pow2[0] = 1;
	FORST(i, 1, 20) pow2[i] = pow2[i-1]*2;

	cin>>cs;

	for(int csn=1;csn<=cs;csn++){
		cin >> N >> M;
		sa[0] = 0;
		FORST(i, 1, N){
			scanf("%I64d", &a[i]);
			sa[i] = (a[i]+sa[i-1])%pow2[M];
		}

		FILL(sum, 0);
		insert(1, 1);
		LINT ans = 0;
		FORST(i, 1, N){
			if(sa[i]>=pow2[M-1]){
				ans = MOD + getsum(sa[i]+1) - getsum(sa[i]-pow2[M-1] +1);
				ans %= MOD;
			}else{
				ans = MOD + getsum(sa[i] +1) + getsum(pow2[M]-1 +1) - getsum(sa[i]+pow2[M-1] +1);
				ans %= MOD;
			}
			insert(sa[i]+1, ans);
		}
		cout << ans << endl;



	}
	return 0;
}