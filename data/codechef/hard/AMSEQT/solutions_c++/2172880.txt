#include<cstdio>
#include<cmath>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<utility>
#include<vector>
#include<string>
#include<functional>
#include<queue>

#define FOR(i, a, n) for(int i = (a); i < (n); i++)
#define FORN(i, a, n) for(int i = (a); i <= (n);i++)
#define REP(i, n) FOR(i, 0, n)
#define REPN(i, n) FORN(i, 1, n)
#define ABS(x) (x) > 0 ? (x) : -(x)
#define SIZE(vec) (int)vec.size()

using namespace std;

typedef long long ll;
typedef pair<int, int> P;

const int MAX_N = 200100;
const int MAX_M = 18;
const int MAX_T = (1 << MAX_M) + 1;
const int MOD = 1000000009;
const int INF = 1 << 28;
const double EPS = 1e-9;
const double PI = 3.14159265358979;

struct BIT{
  int n;
  int bit[MAX_T];
  void init(int n_){
	n = n_;
	memset(bit, 0, sizeof(bit));
  }
  void add(int k, int v){
	k++;
	while(k <= n){
	  bit[k] = ((ll)bit[k] + v) % MOD;
	  k += k & -k;
	}
  }
  int sum(int k){
	int s = 0;
	while(k > 0){
	  s = ((ll)s + bit[k]) % MOD;
	  k -= k & -k;
	}
	return s;
  }
  int sum(int a, int b){
	return ((ll)sum(b) - sum(a) + MOD) % MOD;
  }
};

int n, m;
int a[MAX_N];
BIT bit;

int solve(){
  int m1 = 1 << m, m2 = 1 << (m - 1);
  bit.init(m1);
  bit.add(0, 1);
  int v = 0, r = 0;
  REP(i, n){
	v = (v + a[i]) % m1;
	if(v >= m2){
	  r = bit.sum(v - m2 + 1, v + 1);
	}else{
	  r = ((ll)bit.sum(0, v + 1) + bit.sum(v + m2 + 1, m1)) % MOD;
	}
	bit.add(v, r);
  }
  return r;
}

int main(){
  int T;
  cin >> T;
  while(T--){
	cin >> n >> m;
	REP(i, n) cin >> a[i];
	cout << solve() << endl;
  }
  return 0;
}
