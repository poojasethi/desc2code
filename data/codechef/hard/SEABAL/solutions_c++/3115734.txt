
/*************** Author: sambit1993 ******************/
/* 	Category: Ad Hoc          */
#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <utility>
#include <map>
#include <vector>
#include <list>
#include <string>
#include <set>
#include <queue>
#include <ctime>
#include <fstream>
#include <sstream>
#include <cmath>
#include <limits>
#include <climits>
#include <bitset>
#include <iomanip>
#include <functional>
#include <cassert>

#ifndef ONLINE_JUDGE
	#define gc getchar
#else
	#define gc getchar_unlocked
#endif

#define s(x) scanf("%d",&x)
#define sil(x) scanf("%llu",&x)
#define sd(x) scanf("%ld",&x)

#define ri(x) x=read<int>()
#define rl(x) x=read<ll>()
#define ru(x) x=read<ull>() 

#define FOR(i,a,b) for( typeof(a) i=(a); i<(b); ++i)               // exclusive for
#define FORR(i,a,b) for( typeof(a) i=(a-1) ; i>=(b); --i)
#define REP(k,a,b) for(typeof(a) k=(a); k <= (b); ++k)			// inclusive for
#define REPR(i,a,b) for( typeof(a) i=(a) ; i>=(b); --i)
#define ALL(c) (c).begin(), (c).end()  
#define PB push_back 
#define MP make_pair 
#define SZ(x) ((int)((x).size()))
#define SRT(v) std::sort(ALL(v))
#define CTN(x) std::cout<<x<<'\n'								//cout with newline
#define CTS(x) std::cout<<x<<" "                                //cout with space
#define CLR(x) std::memset(x,0,sizeof(x))
#define FILL(x,n) std::fill_n(x,sizeof(x),n)
#define T(t) int t; ri(t); while(t--) 
#define DBGA(x,n) {for(int i=0;i<n;i++) cerr<<x[i]<<" "; cerr<<"\n";}
#define REC(x) clock_t x=clock()
#define CPS CLOCKS_PER_SEC 
#define TM(x,y) CTN(((double)(y-x)/CPS))
#define abs(x) ((x)>0?(x):(-(x)))
#define PD(x,y) printf("%0.xld\n",y)

//#define NL printf("\n")

typedef std::vector<int> VI;
typedef std::vector<long long int> VL;
typedef std::vector<std::string> VS;
typedef std::map<int,int> MI;
typedef std::pair<int,int> PII;
typedef unsigned long long ull;
typedef long long ll;

template <typename T>
inline T read()
{
	register T x=0;
	register char c;
	int sign=1;
	while((c=gc())<48 || c>'9') if(c=='-') sign=-1;
	x=c-'0';
	while((c=gc())>='0' && c<='9')
		x=(x<<3)+(x<<1)+c-'0';
	return x*sign;
}

//############################## GLOBAL DATA #################################//
int balloons[100002],rght[100005];
VI query[100002];
//############################## GLOBAL DATA #################################//

using namespace std;

bool comp(int a,int b)
{
	return a>b;
}

int main()
{
	//std::ios_base::sync_with_stdio(false);
	#ifndef ONLINE_JUDGE
		freopen("a.txt","r",stdin);
	#endif
	int ans=0;
	int n,m;
	ri(n);ri(m);
	REP(i,1,n)
		{
			ri(balloons[i]);
			assert( balloons[i]>=0);
		}
	rght[n+1]=n+1;
	REPR(i,n,1)
		rght[i]=(balloons[i]==0?rght[i+1]:i);
	/*REP(i,1,n+1)
		cout<<rght[i]<<" ";
	CTN("");*/
	REP(i,1,m)
	{
		int l,r;ri(l);ri(r);
		query[l].PB(r);
	}
	REP(i,1,n)
		sort(ALL(query[i]),comp);
	T(k)
	{
		int x;ri(x);
		x+=ans;
		balloons[x]--;
		if(!balloons[x])
		{
			int r=rght[x+1];
			for(int i=x;rght[i]==x;i--)
			{
				while(query[i].size() && query[i].back()<r)
				{
					query[i].pop_back();
					ans++;
				}
				rght[i]=r;
			}
		}
		CTN(ans);
	}

}
	