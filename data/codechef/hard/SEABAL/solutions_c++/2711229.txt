/*
 * in the name of god
 *
 *
 *
 *
 *
 *
 *
 *
 */

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <algorithm>
#include <vector>
#include <queue>
#include <deque>
#include <stack>
#include <set>
#include <map>
#include <complex>
#include <bitset>
#include <iomanip>
#include <utility>

using namespace std;

typedef long long LL;
typedef complex<double> point;
typedef long double ldb;
typedef pair<int,int> pii;

const int MAXN = 100000  + 10;
const int MAXT = (1<<18) + 10;

int n,m,que;
int a[MAXN],lef[MAXN],rig[MAXN];
vector <int> Q[MAXT];

inline void addRange(int root, int L, int R, int lo, int hi){	
	Q[root].push_back(hi);
	if (L == R)
		return;
	int mid = (L + R) / 2;
	if (lo<=mid)
		addRange(root*2, L, mid, lo, hi);
	else
		addRange(root*2+1, mid+1, R, lo, hi);
}

inline int get (int root, int L, int R, int lo, int hi){
	if (lo>R)
		return 0;
	if (lo<=L)
		return upper_bound(Q[root].begin(), Q[root].end(), hi) - Q[root].begin();
	int mid = (L + R) / 2;
	return get(root*2,L,mid,lo,hi) + get(root*2+1,mid+1,R,lo,hi);
}

int main(){
	scanf("%d%d", &n, &m);
	for (int i=0; i<n; i++)
		scanf("%d", &a[i]);
	for (int i=0; i<m; i++){
		int lo,hi; scanf("%d%d", &lo, &hi);
		lo--; hi--;
		addRange(1, 0, n-1, lo, hi);
	}
	for (int i=0; i<MAXT; i++) if (!Q[i].empty())
		sort(Q[i].begin(), Q[i].end());
	scanf("%d", &que);
	int last = 0;
	for (int o=0; o<que; o++){
		int pos; scanf("%d", &pos);
		pos+= last; pos--;
		a[pos]--;
		if (a[pos]==0){
			int L = (pos==0 || a[pos-1]!=0) ? (pos) : (lef[pos-1]);
			int R = (pos==n-1 || a[pos+1]!=0) ? (pos) : (rig[pos+1]);
			rig[L] = R, lef[R] = L;
			if (L!=pos)
				last-= get(1, 0, n-1, L, pos-1);
			if (R!=pos)
				last-= get(1, 0, n-1, pos+1, R);
			last+= get(1, 0, n-1, L, R);
		}
		printf("%d\n", last);
	}
	return 0;
}
