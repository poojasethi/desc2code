#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;
struct seg {
    int left,right,val;
};
seg findval[100005];
int a[100005];
vector<int> v[100005];
int find(int pos){
    if(findval[pos].val == pos) return pos;
    else return find(findval[pos].val);
}
int main(){
    int n, m, x, y, q;
    scanf("%d%d", &n, &m);
    for(int i = 0; i < n; i++)findval[i].left = findval[i].right = findval[i].val = i;
    for(int i = 0; i < n; i++) scanf("%d", &a[i]);
    for(int i = 0; i < m; i++) scanf("%d%d", &x, &y),x--,y--,v[x].push_back(y);
    scanf("%d", &q);
    int ans = 0;
    while(q--) {
        int p;
        scanf("%d", &p),--p;
        p += ans;
        if(!a[p]) {
            cout << ans << endl;
            continue;
        }else a[p]--;
        if(!a[p]) {
            int flag1 = 0, flag2 = 0;
            if(p+1 < n && !a[p+1])flag2++;
            if(p-1 >= 0 && !a[p-1])flag1++;
            if(flag1 && flag2) {
                int set1, set2;
                set1 = find(p-1);
                set2 = find(p+1);
                findval[set1].right = findval[set2].right;
                findval[set2].val = set1;
                findval[p].val = set1;
            }
            else if(flag1) {
                int set1 = find(p-1);
                findval[p].val = set1;
                findval[set1].right = p;
            }
            else if(flag2) {
                int set1 = find(p+1);
                findval[p].val = set1;
                findval[set1].left = p;
            }
            int set1 = findval[p].val;
            int start = findval[set1].left;
            while(start <= p) {
                for(int i = 0; i < v[start].size(); i++) {
                    if(p <= v[start][i] && v[start][i] <= findval[set1].right)ans++;
                }
                start++;
            }
        }
        printf("%d\n", ans);
    }
}
