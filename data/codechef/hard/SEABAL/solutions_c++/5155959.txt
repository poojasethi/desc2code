#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>

using namespace std;
typedef pair<int,int> pii;
typedef pair<pii,int> piii;

int ballons[111111];
int ufs[111111];
bool done[111111];
vector<piii> oppairs[111111]; // opposite pairs, or oppai RS if you like.

int ufs_find(int x) { return x == ufs[x] ? x : ufs[x] = ufs_find(ufs[x]); }

int main(void)
{
	int n = 0;
	int m = 0;
	scanf("%d %d",&n,&m);
	for(int i = 1;i <= n;i++) scanf("%d",&ballons[i]);
	for(int i = 0;i <= n;i++) ufs[i] = i;

	for(int i = 0;i < m;i++)
	{
		int l = 0;
		int r = 0;
		scanf("%d %d",&l,&r);
		oppairs[l-1].push_back(piii(pii(l,r),i));
		oppairs[r].push_back(piii(pii(l,r),i));
	}

	int Q = 0;
	scanf("%d",&Q);
	int lastAns = 0;
	while(Q--)
	{
		int x = 0;
		scanf("%d",&x);
		x += lastAns;

		if(!--ballons[x]) // "!--"
		{
			int fx = ufs_find(x);
			int fy = ufs_find(x-1);

			if(oppairs[fx].size() > oppairs[fy].size()) swap(fx,fy);
			ufs[fx] = fy;
			// ...
			for(vector<piii>::iterator it = oppairs[fx].begin();it != oppairs[fx].end();++it)
			{
				if(done[it->second]) continue;
				int a = ufs_find(it->first.first);
				int b = ufs_find(it->first.second);
				if(a == b && !ballons[it->first.first])
				{
					lastAns++;
					done[it->second] = true;
				}
				else oppairs[fy].push_back(*it);
			}
		}
		printf("%d\n",lastAns);
	}
	while(getchar() != EOF);
	return 0;
}

