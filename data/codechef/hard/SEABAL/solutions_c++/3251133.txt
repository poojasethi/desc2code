#include <stdio.h>
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
#define inf 1000000000
#define Max 100005

using namespace std;

int a[Max],n,m,pos[Max];
pair <int,int> tree[4*Max];
vector <int> v[Max];
set <int> s;

void build(int node,int l,int r)
{
    if(l==r)
    {
        pos[l]=node;
        tree[node].second=l;
        tree[node].first=inf;
        return;
    }

    build(2*node,l,(l+r)/2);
    build(2*node+1,(l+r)/2+1,r);

    tree[node]=min(tree[2*node],tree[2*node+1]);
}

void update(int p,int v)
{
    tree[p].first=v;

    p/=2;

    while(p)
    {
        tree[p]=min(tree[2*p],tree[2*p+1]);
        p/=2;
    }
}

pair<int,int> query(int node,int l,int r,int ql,int qr)
{
    if(qr<l || ql>r) return make_pair(inf,inf);
    if(l>=ql && r<=qr) return tree[node];

    return min( query(2*node,l,(l+r)/2,ql,qr)  ,  query(2*node+1,(l+r)/2+1,r,ql,qr) );
}


int main()
{
    int i,j,k,l,r,ans=0,q,x;
    pair <int,int> pp,qq;

    //freopen("in.txt","r",stdin);
    scanf("%d %d",&n,&m);

    for(i=1;i<=n;i++) scanf("%d",&a[i]);

    for(i=0;i<=n+1;i++) s.insert(i);

    build(1,1,n);

    for(i=1;i<=m;i++)
    {
        scanf("%d %d",&l,&r);

        v[l].push_back(r);

    }

    //cout<<"H"<<endl;

    for(i=1;i<=n;i++)
    {
        //cout<<i<<endl;
        if(v[i].size())
        {
            sort(v[i].begin(),v[i].end());
            reverse(v[i].begin(),v[i].end());
            update(pos[i],v[i].back());
            v[i].pop_back();
        }

        else update(pos[i],inf);

    }



    scanf("%d",&q);

    for(int it=0;it<q;it++)
    {
        scanf("%d",&x);

        x+=ans;

        if(a[x]==0) ;

        else if(a[x]>1) a[x]--;

        else
        {
            r=*(++s.find(x))-1;
            l=*(--s.find(x))+1;




            //cout<<l<<" "<<r<<endl;
            s.erase(x);

            while(1)
            {
                pp=query(1,1,n,l,n);

                k=pp.first;

                if(k>r) break;

                ans++;
               // cout<<k<<" "<<j<<endl;
                j=pp.second;

                if(v[j].size()==0)
                {
                   // cout<<"H"<<endl;
                    update(pos[j],inf);
                }

                else
                {
                    update(pos[j],v[j].back());
                    v[j].pop_back();
                }

            }
        }

        printf("%d\n",ans);
    }

    return 0;


}
