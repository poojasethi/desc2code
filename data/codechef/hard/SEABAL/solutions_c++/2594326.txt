#include<iostream>
#include<map>
#include<vector>
#include<algorithm>
using namespace std;
#define MaxVal 100004
vector <pair<int,vector<int> > > pairs;
vector<int> firsts;
map <int,vector<int> > m;
int tree[100001];
int a[100001];
void update(int idx ,int val){
	while (idx <= MaxVal){
		tree[idx] += val;
		idx += (idx & -idx);
	}
}
long long read(int index){
  long long sum=0;
  while(index>0){
    sum+=tree[index];
    index-=(index&-index);
    }
  return sum;
 }
int binarysearchfirst(int val,int low,int high){
  int mid;
  while(low<high){
    mid=(low+high)/2;
    if(read(mid)>=val)
      high=mid;
    else
        low=mid+1;
  }
 return low;
}
int binarysearchlast(int c, int low, int high) {
    while(low < high) {
        int mid = (low + high + 1)/2;
        if(read(mid) > c) {
            high = mid-1;
        } else {
            low = mid;
        }
    }
    return low;
}


 int minindexof(vector<int>& keys, int c, int low, int high) {
    if(keys[high] < c) {
        return -1;
    }
    while(low < high) {
        int mid = (low + high)/2;
        if(keys[mid] >= c) {
            high = mid;
        } else {
            low = mid+1;
        }
    }
    return low;
}
int maxindexof(const vector<int>& keys, int c, int low, int high) {
    if(low == -1 || high == -1)
        return -1;
    if(keys[low] > c) {
        return -1;
    }
    while(low < high) {
        int mid = (low + high + 1)/2;
        if(keys[mid] > c) {
            high = mid-1;
        } else {
            low = mid;
        }
    }
    return low;
}
int findintervalcount(int minindex,int maxindex,int x){
    int i,minin,maxin;
   int sizeo=firsts.size();
    minin=minindexof(firsts,minindex,0,sizeo-1);
    maxin=maxindexof(firsts,x,minin,sizeo-1);
   if(minindex==-1 || maxin==-1){
    return 0;
   }

   int answer=0;
   for(i=minin;i<=maxin;i++){

    int mini= minindexof(pairs[i].second, x, 0, pairs[i].second.size()-1);
        int maxi= maxindexof(pairs[i].second,maxindex,mini, pairs[i].second.size()-1);
        if(mini != -1 && maxi!= -1)
            answer += maxi- mini+1;
   }
  return answer;

}
 int main(){
   int i,n,mi,p,q,sizeo;
   cin>>n>>mi;
   for(i=1;i<=n;i++){
     cin>>a[i];
     update(i,a[i]);
  }
 for(i=1;i<=mi;i++){
    cin>>p>>q;
    m[p].push_back(q);

 }
   pairs.assign(m.begin(),m.end());
   sort(pairs.begin(),pairs.end());
   sizeo=pairs.size();
   for(i=0;i<sizeo;i++){
    sort(pairs[i].second.begin(),pairs[i].second.end());
     firsts.push_back(pairs[i].first);
   }
   sort(firsts.begin(),firsts.end());

   int k,t=0,rem=0;
   cin>>k;
   for(i=1;i<=k;i++){
      cin>>t;
      t+=rem;
      a[t]--;
      update(t,-1);
      int indexmin,indexmax;
      if(!a[t]){
        int searchvar=read(t);
         indexmin=binarysearchfirst(searchvar,1,t);

         indexmax=binarysearchlast(searchvar,t,n);
        // cout<<indexmin<<indexmax;
         if(a[indexmin] != 0)
                indexmin++;
      }
      rem+=findintervalcount(indexmin,indexmax,t);
    cout<<rem<<endl;
   }
    return 0;
 }
