
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<fstream>
#include<sstream>
#include<cmath>
#include<stack>
#include<assert.h>
using namespace std;

#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define S(X) ( (X) * (X) )
#define SZ(V) (int )V.size()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define ALL(V) V.begin(), V.end()
#define floop1  for(i = 1; i <= n; i++)
#define floop2  for(i = 0; i <n; i++)

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef vector<int> VI;


vector<PII> V;
int a[100005];
int counts[100005], lefts[100005], rights[100005];
int info[400005];
int n, m, ans;

int Left(int at) { if(at == lefts[at]) return at; return lefts[at] = Left(lefts[at]); }
int Right(int at) { if(at == rights[at]) return at; return rights[at] = Right(rights[at]); }
// make segment tree at wich every node contain minimum value of Y in that segment...
void segment(int at, int idl, int idr)
{
	if(idl == idr)
	{
		info[at] = V[idl].second;
		return;
	}

	int mid = (idl + idr)/2;
	segment(at*2, idl, mid);
	segment(at*2 + 1, mid + 1, idr);

	info[at] = MIN(info[at*2], info[at*2 + 1]);
}
//qwery function return true if a pair meet which  Y value  is less than r
//else false
//and also make that pair uneffective
// and also update min value of Y for every node.....
int query(int at, int idl, int idr, int Xlow, int Xhigh, int l, int r)
{
	if(Xhigh < idl || Xlow > idr) return 0;
	if(Xlow <= idl && idr <= Xhigh && info[at] > r) return 0;

	if(idl == idr)
	{
		V[idl].second = 1000000000;
		info[at] = 1000000000;
		return 1;
	}

	int mid = (idl + idr)/2;

	if(query(at*2, idl, mid, Xlow, Xhigh, l, r))
	{
		info[at] = MIN(info[at*2], info[at*2 + 1]);
		return 1;
	}

	if(query(at*2 + 1, mid + 1, idr, Xlow, Xhigh, l, r))
	{
		info[at] = MIN(info[at*2], info[at*2 + 1]);
		return 1;
	}

	return 0;
}
// function that update value of left and right of an box....position .
//calculate l,r intervel in wich all box is empty
//respect to l,r calculate respective Xlow and Xhigh value of X(orL)  wich only effected
// call qwery such time so that all pair  are cover which is effected and delete also in term of make them uneffective by increas value of R
void process(int at)
{
	if(at && a[at-1]==0) lefts[at] = at - 1;
	if(at && a[at - 1]==0) rights[at - 1] = at;
	if(at + 1 < n && a[at + 1]==0) lefts[at + 1] = at;
    if(at + 1 < n && a[at + 1]==0) rights[at] = at + 1;

	int l, r;

	l = Left(at);
	r = Right(at);

	int Xlow, Xhigh;

	Xlow = (l == 0 ? 0 : counts[l - 1]);
	Xhigh  = counts[r] - 1;
//this loop is until all paires which are affected this time only cover not count before...
	while( query(1, 0, m - 1, Xlow, Xhigh, l, r) )
		ans++;
}

int main()
{
	int i, l, r, k, x;
//input for nand m........
	scanf("%d %d", &n, &m);

//input all box with non zero postive value in array a[i].......
	for(i = 0; i < n; i++)
	{
		scanf("%d", &a[i]);

	}
//input all paires l,r with non zero postive value in array a[i].......
//counts no of time l reapeted....
//and push pair in vector ....
	for(i = 1; i <= m; i++)
	{
		scanf("%d %d", &l, &r);
		l--;r--;
		counts[l]++;

		V.push_back( PII(l, r) );
	}
//  sort the vector of pairs with respect to l value and second when values of l is same with respect to r......
	sort(V.begin(), V.end());
//counts  all paires started with <=i in vecor V......
	    floop1 counts[i] += counts[i - 1];
//init left and right like set ......root connection..
	    floop2 lefts[i] = rights[i] = i;
//build segment tree from paires ....in wich every node contain value R less than below paires.
	segment(1, 0, m - 1);
	ans = 0;

//input for step...
	scanf("%d", &k);
	while(k--)
	{
//input for position ....
		scanf("%d", &x);
		x--;
		x += ans;
		a[x]--;
//if box is not empt ...
		if(a[x])
		{
			printf("%d\n", ans);
			continue;
		}
// if box becomes empty......
		process(x);
		printf("%d\n", ans);
	}

	return 0;
}
