#include <iostream>
#include <vector>
using namespace std;
const int M = 1e5 + 2, N = 5, Inf = 101;
int dp[M][N];
vector<int> ans;

// push_backs the permutation in ans
void solve(int n, int k, int st) {
    if (k == 1) {
        for (int i = st + n - 1; i >= st; i--)
            ans.push_back(i);
        return;
    }
    if (n > 1 && dp[n][k] == dp[1][k] + dp[n - 1][k]) {
        solve(n - 1, k, st + dp[1][k]);
        solve(1, k, st);
        return;
    }
    for (int j = 1; j < k; j ++)
        for (int u = 1; u*u <= n; u ++)
            if (!(n % u))
                if (dp[n][k] == dp[u][j] + dp[n/u][k-j]) {
                    solve(u, j, st);
                    solve(n/u, k-j, st + dp[u][j]);
                    return;
                }

}

int main() {
    ios::sync_with_stdio(0);
    for (int n = 1; n < M; n++) {
        dp[n][1] = n;

        for (int k = 2; k < N; k++) {
            if (n > 1)
                dp[n][k] = dp[1][k] + dp[n - 1][k];
            else dp[n][k] = Inf;

            for (int j = 1; j < k; j ++)
                for (int u = 1; u*u <= n; u ++)
                    if (!(n % u))
                        dp[n][k] = min(dp[n][k], dp[u][j] + dp[n/u][k-j]);

        }
    }
    int T;
    cin >> T;
    for (int t = 0; t < T; t++) {
        int n;
        cin >> n;
        solve(n, N - 1, 1);
        cout << ans.size() << endl;
        for (int i = 0; i < ans.size(); i ++)
            cout << ans[i] << " ";
        cout << endl;
        ans.clear();
    }
    return 0;
}
