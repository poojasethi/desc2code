#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

int A[101];
int cache[10100]; // [a, b]: a + 100*b, where a,b in [0, 99]
unsigned char cacheC[10100];

// returned total smoke, in c returns the color of the final potion for the range [l, r]
int Mix(int l, int r, int &c)
{
  if(l == r) // simple case of single potion
  {
    c = A[l];
    return 0; // No smoke from a single potion
  }

  if(l == (r - 1)) // simple case of two potions
  {
    c = (A[l] + A[r]) % 100;
    return A[l] * A[r];
  }

  const int cacheIndex = l + 100 * r;
  int &cacheSmoke = cache[cacheIndex];
  unsigned char &cacheColor = cacheC[cacheIndex];
  if(cacheSmoke != -1)
  {
    c = cacheColor;
    return cacheSmoke;
  }

  int minSmoke = 0x7FFFFFFF;
  c = 0;
  int cl, cr;
  int smoke;
  for(int a = l; a < r; ++a)
  {
    smoke = Mix(l, a, cl) + Mix(a + 1, r, cr);
    smoke += cl * cr;
    if(minSmoke > smoke)
    {
      minSmoke = smoke;
      c = (cl + cr) % 100;
    }
  }

  cacheSmoke = minSmoke;
  cacheColor = (unsigned char)c;
  return minSmoke;
}

int main()
{
  int N; // [1, 100]
  int c;
  while(scanf("%d\n", &N) == 1)
  {
    memset(cache, 0xFF, sizeof(cache));

    for(int i = 0; i < N; ++i)
      scanf("%d\n", A + i); // Initial colors [0, 99]

    int smoke = Mix(0, N - 1, c);

    printf("%d\n", smoke);
  }

  return 0;
}







