#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz(x) (int)(x.size())
#define all(a) a.begin(), a.end()
#define INF numeric_limits<long long>::max()
#define oo  numeric_limits<int> :: max()
#define CLR(s) memset(s, false, sizeof(s))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define DBG(s) cerr << #s << "  == > " << s << endl
typedef long long lld;
typedef vector <int> vi;
typedef pair< int, int > pii;
typedef vector <pii> vpii;

const int MAX =100+10;
int smoke[MAX][MAX];
int color[MAX][MAX];
int a[MAX]; 

/*int solve(int i, int j)
{
	if(i == j)
	 return 0; // smoke is zero
	int &ret = smoke[i][j];
	if(ret != oo)
	 return ret;
	ret = oo;
    for(int k = i; k <j; k++)
    {
		int g = solve(i,k);
		int h = solve(k+1,j);
		int Q = g+h+ color[i][k]*color[k+1][j];
		if(Q < ret)
		{
			ret = Q;
			color[i][j] =  (color[i][k] + color[k+1][j]) % 100;
		}
	}
	return ret;
}
*/
int main()
{
	//ios_base::sync_with_stdio(0);
	int n; 
	while(cin >> n)
	{
		for(int i = 0; i < MAX; i++)
		{
			for(int j = 0; j < MAX; j++)
			{
				smoke[i][j] = 0;
				color[i][j] = 0;	
			}
		}
		
		for(int i = 0; i < n; i++)
		{
			cin >> a[i];
			color[i][i] = a[i];
		}
		for(int d = 1;d < n; d++)
		{
			//int i, j; i = 0; j = d;
			for(int i = 0,j = d; i < n-d; i++,j++)
			{
				int min = oo;
				for(int k = i; k < j; k++)
				{
					int Q = smoke[i][k] + smoke[k+1][j] + color[i][k]*color[k+1][j];
					if( Q < min)
					{
						min = Q;
						color[i][j] = (color[i][k] + color[k+1][j]) % 100;
					}
					smoke[i][j] = min;
					
				}
				//i++; j++;
			}
		}
		
				
		int ans = smoke[0][n-1];
		cout << ans << endl;
	}
	return 0;
}

