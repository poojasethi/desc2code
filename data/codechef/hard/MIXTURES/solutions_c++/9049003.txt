#include<bits/stdc++.h>
using namespace std;

#define SIZE 101

int dp[SIZE][SIZE];
int color(int a, int b, vector<int>&A)
{
    int ans = 0;
    for(int i = a; i <= b; i++)
        ans = (ans + A[i])%100;
    return ans;
}
int find_ans(vector <int>&A, int i, int j)
{
    // No smoke
    if(i == j)
    {
        dp[i][j] = 0;
        return 0;
    }
    // Only 2 matrices
    if(j == i + 1)
    {
        dp[i][j] = A[i] * A[j];
        return dp[i][j];
    }

    // If already there
    if(dp[i][j] != -1)
        return dp[i][j];

    // Else compute and memoise
    int min_ans = 1000000;
    int curr = 0;
    for(int k = i; k < j; k++)
    {
        curr = find_ans(A, i, k) + find_ans(A, k + 1, j);
        curr += color(i, k, A) * color(k + 1, j, A);
        if(curr < min_ans)
            min_ans = curr;
    }

    return dp[i][j] = min_ans;
}

int main()
{
    int n;

    while(scanf("%d", &n) !=EOF)
    {
        vector <int> A(n,0);
        memset(dp, -1, sizeof(dp));
        for(int i = 0; i < n; i++)
            cin >> A[i];

        cout << find_ans(A, 0, n - 1) << "\n";
    }
    return 0;
}
