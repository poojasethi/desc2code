#include<bits/stdc++.h>
using namespace std;
#define Rep(i,n) for(int i=0;i<(n);i++)
#define For(i,a,b) for(int i=(a);i<=(b);i++)
#define ForD(i,a,b) for(auto i=(b);i>=a;i--)
#define DEBUG(x) cout << '>' << #x << ':' << x << endl;
#define DEBUGP(x,y) cout<<#x<<': '<<x<<' '<<#y<<': '<<y<<endl;
#define pi pair<int,int>
#define pll pair<long long int, long long int>
#define mp make_pair
#define pb push_back
#define vi vector<int>
#define vl vector<long long int>
#define ll long long int
#define ull unsigned long long int
#define vp vector<pi>
#define inp(a) cin>>(a)
#define inpp(a,b) cin>>(a)>>(b)
#define op(ans) cout<<(ans)<<"\n"
#define max(a,b) (a)>(b)?(a):(b)
#define min(a,b) (a)<(b)?(a):(b)
#define MOD 1e9 + 7
#define MAXN 65536
#define MAXLG 17
#define INF 1e18

//<---- Solution ---->
struct Dp{
	ll sum,prod;
}dp[105][105];
void solve(){
	int n;
	while(inp(n)){
		int arr[n+5];
		For(i,1,n){
			inp(arr[i]);
		}
		For(i,1,n){
			dp[i][i].sum = dp[i][i].prod = arr[i];
		}
		For(i,1,n){
			dp[i][i+1].sum = (arr[i] + arr[i+1])%100;
			dp[i][i+1].prod = arr[i]*arr[i+1];
		}
		For(l,3,n){
			For(i,1,n-l+1){
				ll cans , ans=-1,csum,fsum;
				int j = i+l-1;
				For(k,1,l-1){
					cans = dp[i][i+k-1].sum*dp[i+k][j].sum;
					csum = (dp[i][i+k-1].sum + dp[i+k][j].sum)%100;
					if(i!= i+k-1)
						cans += dp[i][i+k-1].prod;
					if(i+k != j )
						cans += dp[i+k][j].prod;
					if(ans<0 || cans < ans){
						ans = cans;
						fsum = csum;
					}
				}
				dp[i][j].prod = ans;
				dp[i][j].sum = fsum;
			}
		}
		if(n>1)
		op(dp[1][n].prod);
		else
			op(0);
	}
}

int main(){
	int tc;
	solve();
	return 0;
}
