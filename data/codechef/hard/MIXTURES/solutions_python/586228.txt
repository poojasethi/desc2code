#!/usr/bin/env python

D = {}
MC = []

def cache(F = {}):
	def wrap(f):
		def wrapped(*args):
			if args not in F:
				F[args] = f(*args)
			return F[args]
		return wrapped
	return wrap

def mix((s1, c1), (s2, c2)):
	return s1 + s2 + c1 * c2, (c1 + c2) % 100

@cache(D)
def f(a, b):
	"""returns (min smoke, color) after mixing all mixtures in [a, b]"""
	if a > b:
		return None
	elif a == b:
		return 0, MC[a]
	else:
		return min([mix(f(a, i), f(i + 1, b)) for i in range(a, b)])

try:
	while True:
		n = int(raw_input())
		MC[:] = [int(x) for x in raw_input().split()]
		D.clear()
		print f(0, n - 1)[0]
except EOFError:
	pass
