
def create_mod_matrix(colors):
	if (colors):
		mod_mat = [[0] * len(colors) for i in range(len(colors))]
		for i in range(len(colors)):
			for j in range(i, len(colors)):
				if (i == j):
					mod_mat[i][i] = colors[i]
				else:
					mod_mat[i][j] = (mod_mat[i][j-1] + colors[j] ) % 100
		return mod_mat

def create_smoke_mat(no_of_colors):

	smoke_mat = [[0] * no_of_colors for _ in range(no_of_colors)]
	return smoke_mat

def compute_min_smoke(colors= [40, 60, 20]):
	mod_mat = create_mod_matrix(colors)

	no_of_colors = len(colors)
	smoke_mat = create_smoke_mat(no_of_colors)

	for size in range(1,no_of_colors+1):
		for i in range (no_of_colors - size):
			values = []
			for k in range(i, i+size):
				x = smoke_mat[k-i][i] + smoke_mat[i+size-k-1][k+1] + mod_mat[i][k] * mod_mat[k+1][i+size]
				values.append(x)
			smoke_mat[size][i] = min(values)

	return smoke_mat[no_of_colors-1][0]

def launch():
    try:
        while(True):

            no_of_colors = int(raw_input())
            colors = [int(x) for x in  raw_input().split()]
            assert (no_of_colors == len(colors))
            answer = compute_min_smoke(colors)
            print answer
    except:
        pass

launch()