# import cPickle
#global variables
store={}

cache = {}
# def cached(function):
#     global cache
#     def wrapper(*args):
#         if args in cache:
#             return cache[args]
#         else:
#             result = function(*args)
#             cache[args] = result 
#             return result

#     return wrapper

def color_mix((s1, c1), (s2, c2)):
    return s1+s2+c1*c2, (c1+c2)%100

# @cached
def get_smoke(a, b):
    global inp
    store=[]

    if(a>b):
        # print "here"
        return None

    elif(a==b):       
        return (0, inp[a])
    for i in range(a,b):
        if((a,i) not in cache):
            cache[(a,i)]=get_smoke(a,i)
        if((i+1,b) not in cache):     
            cache[(i+1,b)]=get_smoke(i+1,b)
        store.append(color_mix( cache[(a,i)],cache[(i+1,b)])) 

    return min(store)
            
inp=tuple()
while(True):
    try:
      n = raw_input()
    except EOFError:
      break
    n=n.strip()
    n=int(n)
    inp=raw_input()
    inp=inp.strip()
    inp=inp.split()
    inp=tuple([int(i) for i in inp])
    smoke=get_smoke(0, len(inp)-1)
    print smoke[0]
    cache.clear()



