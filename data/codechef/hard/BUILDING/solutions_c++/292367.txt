   
      #include <iostream>
  
      #include <fstream>

       
 
      using namespace std;
  
       
 
      int cost1[1000][1000], cost2[1000][1000]; // main diag, other diag
 
      int dp[1000][1000];
 
      int R, C;
 
 
      int ab(int x)
  
      {

      return x > 0 ? x : -x;
 
      }
 
       

      
 
      int calc(int a1, int b1, int a2, int b2)

      {

      
  
      if(b1 < b2) 
  
      return cost1[a2][b2] - (a1 > 0 && b1 > 0 ? cost1[a1 - 1][b1 - 1] : 0);
  
      else
  
      return cost2[a2][b2] - (a1 > 0 && b1 < C - 1 ? cost2[a1 - 1][b1 + 1] : 0);

      }

       

      int main()

      {
 
      int d, N;

      scanf("%d%d%d%d", &C, &R, &d, &N);
 
      R++;C++;

      int startval = 0;
 
      for(int i = 0; i < N; i++)
 
      {
 
      int a, b, c;

      scanf("%d%d%d", &a, &b, &c);

      cost1[b][a] = c;
 
      cost2[b][a] = c;

      
       if(ab(d - a) + ab(d - b) <= d)

      startval += c;

      }

      for(int i = 1; i < R; i++)

      for(int j = 0; j < C; j++) 

      {

      if(j > 0)

      cost1[i][j] += cost1[i - 1][j - 1];

      if(j < C - 1)
 
      cost2[i][j] += cost2[i - 1][j + 1];

      

      }
 
      int min = 1000000999;

      int cur = 1;

      for(int r = d; r < R - d; r++)
 
      for(int c = d; c < C - d; c++)
 
      {
  
      if(c == d)
 
      {

      if(r == d)

      dp[r][c] = startval;
 
      else // from above

      dp[r][c] = dp[r - 1][c] - (calc(r - 1 - d, c, r - 1, c - d) + calc(r - 1 - d, c, r - 1, c + d) - calc(r - 1 - d, c, r - 1 - d, c)) + (calc(r, c - d, r + d, c) + calc(r, c + d, r + d, c) - calc(r + d, c, r + d, c));
 
      }
 
      else // from left

      dp[r][c] = dp[r][c - 1] - (calc(r - d, c - 1, r, c - 1 - d) + calc(r, c - 1 - d, r + d, c - 1) - calc(r, c - 1 - d, r, c - 1 - d)) + (calc(r - d, c, r, c + d) + calc(r, c + d, r + d, c) - calc(r, c + d, r, c + d));
  
      if(dp[r][c] < min)
 
      min = dp[r][c];

     

      }
  
      printf("%d\n", min);
 
      return 0;
  
      } 