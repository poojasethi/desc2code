/* http://www.codechef.com/problems/UNPAIR */

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>

using namespace std;

#define fl(i, b, e)		for (int i=(int)(b); i<(int)(e); i++)
#define fld(i, b, e)		for (int i=(int)(b)-1; i>=(int)(e); i--)
#define flo(i, e)		fl(i, 0, e)
#define fi(b, e)	fl(i, b, e)
#define fio(e)	fi(0, e)
#define fj(b, e)	fl(j, b, e)
#define fjo(e)	fj(0, e)
#define fk(b, e)	fl(k, b, e)
#define fko(e)	fk(0, e)
#define fvi(i, v)	fl(i, 0, v.size())
#define fvd(i, v)	fld(i, v.size(), 0)
#define pb	push_back
#define sz	size()
#define mp	make_pair
#define fs	first
#define sd	second
#define all(x)	(x).begin(), (x).end()
#define sqr(x)	((x)*(x))
#define newline		printf("\n")

typedef long long ll;
typedef unsigned int ui;
typedef unsigned long long ull;
typedef vector <int> vi;
typedef vector <ll> vl;
typedef vector <vi> vvi;
typedef vector <vl> vvl;
typedef pair <int, int> pii;
typedef vector <pii> vp;
typedef vector <vp> vvp;

inline bool cbound(int x, int b, int e)
{
	return ((x >= b) && (x <= e));
}

inline int getint()
{
	int a;
	cin >> a;
	return a;
}

inline ll getll()
{
	ll a;
	cin >> a;
	return a;
}

inline double getdouble()
{
	double a;
	cin >> a;
	return a;
}

vvp MatrixToWeightedList(vvi matrix)
{
	vvp adjlist;

	adjlist.resize(matrix.sz);

	fio(matrix.sz)
	{
		fjo(matrix[i].sz)
		{
			if (matrix[i][j] > 0)
			{
				int w = matrix[i][j];
				adjlist[i].pb(mp(j, w));
			}
		}
	}

	return adjlist;
}

vp PrimList(vvp adjlist, int r = 0)
{
	const int inf = 2e31-1;
	set <pii> q;
	vi intree;
	vi key;
	vi parent;
	ll wsum = 0;
	vp ret;

	intree.resize(adjlist.sz);
	key.resize(adjlist.sz);
	parent.resize(adjlist.sz);

	fio(adjlist.sz)
	{
		if (i == r)
		{
			key[i] = 0;
			q.insert(mp(0, i));
		}
		else
		{
			key[i] = inf;
			q.insert(mp(inf, i));
		}
		parent[i] = -1;
	}

	while (!q.empty())
	{
		pii top = *q.begin();
		int u;
		int p;
		q.erase(q.begin());

		u = top.sd;

		intree[u] = 1;

		p = parent[u];

		if (p != -1)
		{
			ret.pb(mp(p, u));
			wsum += top.fs;
		}
		else if (u != r)
		{
			/* Not connected */
			vp empty;

			wsum = 0;

			cout << -1 << endl;
			return empty;
		}

		fio(adjlist[u].sz)
		{
			int v = adjlist[u][i].fs;
			int d = adjlist[u][i].sd;

			if (intree[v] == 0 && d < key[v])
			{
				parent[v] = u;

				q.erase(q.find(mp(key[v], v)));

				key[v] = d;
				q.insert(mp(key[v], v));
			}
		}
	}

	if (wsum > 0)
		cout << 2*wsum << endl;
	else
		cout << -1 << endl;

	return ret;
}

int main(void)
{
	int t;

	cin >> t;

	while (t--)
	{
		int n;
		vvi matrix;
		vvp adjlist;

		cin >> n;

		if (n == 1)
		{
			int a = getint();

			if (a > 0)
				cout << a << endl;
			else
				cout << -1 << endl;
			continue;
		}

		matrix.resize(n);

		fio(matrix.sz)
			matrix[i].resize(n);

		fio(n)
			fjo(n)
				matrix[i][j] = getint();

		adjlist = MatrixToWeightedList(matrix);

		PrimList(adjlist);

	}

	return 0;
}

