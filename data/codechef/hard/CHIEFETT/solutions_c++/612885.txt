#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>

using namespace std;

vector < int > v;
vector < int > p;

double dp [ 1050 ][ 1050 ];
double hm [ 1050 ][ 1050 ];

void SOLVE()
{
     int n , k;
     
     cin >> n >> k;
     
     v.clear();
     v.resize ( n );

     p.clear();
     p.resize ( k );
     
     for ( int i = 0; i < n; i++ )
         cin >> v[i];
     
     sort ( v.begin() , v.end() );
     reverse ( v.begin() , v.end() );

     for ( int i = 0; i < k; i++ )
         cin >> p[i];

     sort ( p.begin() , p.end() );
     reverse ( p.begin() , p.end() );
     
     dp[0][0] = 1.0;
     
     double ret = 0.0;
     
     for ( int i = 1; i <= n; i++)
         for ( int j = 0; j < k && j <= i; j++ )
         {
             dp[i][j] = dp[i-1][j] * hm[n-i+1][k-j];
             
             if ( j != 0 )
                dp[i][j] += dp[i-1][j-1] * ( 1.0 - hm[n-i+1][k-j+1] );
             
             ret += dp[i][j] * ( 1.0 - hm[n-i][k-j] ) * double ( v[i] ) * ( double ( p[j] ) / 100.0 );
         }
     
     ret += dp[0][0] * ( 1.0 - hm[n][k] ) * double ( v[0] ) * ( double ( p[0] ) / 100.0 );
     
     printf ( "%.3lf\n" , ret );
     
}
     

int main()
{
    hm[0][0] = 1.0;
    for ( int i = 1; i < 1020; i++ )
        hm[i][0] = 1.0;

    
    for ( int i = 1; i < 1020; i++ )
        for ( int j = 1; j <= i; j++ )
            hm[i][j] = hm[i][j-1] * ( double ( i - j ) / ( double ( i - j + 1 ) ) ); 
    
    int n;
    
    cin >> n;
    
    for ( int i = 0; i < n; i++ )
        SOLVE ( );
    
    return 0;
}
