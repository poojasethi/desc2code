#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<bitset>
#include<complex>
 
#include<sstream>
#include<fstream>
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#include<climits>
 
#define oo            (int)13e7
#define s(n)          scanf("%d",&n)
#define sl(n)         scanf("%lld",&n)
#define sf(n)         scanf("%lf",&n)
#define fill(a,v)     memset(a, v, sizeof a)
#define ull           unsigned long long
#define ll            long long
#define bitcount      __builtin_popcount
#define all(x)        x.begin(), x.end()
#define pb( z )       push_back( z )
#define gcd           __gcd
using namespace std;

const int mxn = 1024;

double dp[2][mxn];
int n, k;
int a[mxn];
int d[mxn];
int main(int argc, char** argv) {
	int runs;
  s(runs);
  
  
  while (runs-- > 0) {
    s(n); s(k);
    for (int i=0; i < n; i++) {
      s(a[i]);
    }
    for (int i=0; i < k; i++) {
      s(d[i]);
    }
    sort(a, a+n); sort(d, d+k);
    
    for (int item=0; item <= n; item++)
    for (int disc=0; disc <= k && disc <= item; disc++) {
      int I1 = item&1;
      int I2 = I1 ^ 1;
      double &ret = dp[I1][disc];
      if (item == 0) {
        if (disc == 0) {
          ret = 0;
        } else {
          ret = 1e100;
        }
        continue;
      }
      ret = 0;
      double p = disc / (item + 0.);
      if (disc > 0)
        ret +=  p * ( a[item-1]*d[disc-1]*.01 + dp[I2][disc-1] );
      ret += (1 - p) * dp[I2][disc];
    }
    printf("%.3lf\n", dp[n&1][k]);
  }
	return 0;
}
