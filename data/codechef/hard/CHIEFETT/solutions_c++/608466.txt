#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<map>
#include<set>
#include<queue>
#include<string>
using namespace std;
#define MAX 1005
int _n, _k;
double k, n;
int discount[MAX], cost[MAX];
double expectedDiscount[MAX][MAX];
bool isValid[MAX][MAX];

inline void getExpectedDiscount(int i, int j) {

	if(isValid[i][j]) {
		return;
	}
	isValid[i][j] = true;
	if(i == _n || j == _k) {
		expectedDiscount[i][j] = 0;
		return;
	}
	if(_n - i == _k - j) {
		getExpectedDiscount(i + 1, j + 1);
		expectedDiscount[i][j] = discount[j] / 100.0 * cost[i] + expectedDiscount[i + 1][j + 1];
		return;
	}
	getExpectedDiscount(i + 1, j + 1);
	getExpectedDiscount(i + 1, j);
	double p = (k - j) / (n - i);
	double q = 1 - p;
	expectedDiscount[i][j] = p * (discount[j] / 100.0 * cost[i] + expectedDiscount[i + 1][j + 1]) + q * expectedDiscount[i + 1][j];
}

int main() {
	int t;
	int _cost, _discount;
	scanf("%d", &t);
	while(t--) {
		scanf("%d%d", &_n, &_k);
		for(int i = 0; i < _n ;i++) {
			scanf("%d", &cost[i]);
		}
		for(int i = 0; i < _k ;i++) {
			scanf("%d", &discount[i]);
		}
		
		memset(isValid, 0, sizeof isValid);
		sort(cost, cost + _n);
		reverse(cost, cost + _n);
		
		sort(discount, discount + _k);
		reverse(discount, discount + _k);
		n = _n;
		k = _k;

		getExpectedDiscount(0, 0);
		printf("%.3lf\n", expectedDiscount[0][0]);
	}
	return 0;
}