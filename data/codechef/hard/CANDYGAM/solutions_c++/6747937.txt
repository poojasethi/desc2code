/*God is greater than any problem that
u have and u have to not worry because
when u pray and then worry,
the worry nullify your prayer
He is right here, right now !!
*/

#include <bits/stdc++.h>
using namespace std;
#define bitcnt __builtin_popcount
#define ln length()
#define rep(i, n) for(int i = 0; i < n; i++)
#define rrep(i, n) for(int i = n - 1; i >= 0; i--)
#define all(a)  a.begin(),a.end()
#define LL long long
#define limit 1000006
#define sl(n) scanf("%lld", &n)
#define s(n)  scanf("%d", &n)
#define pl(n) printf("%lld", n)
#define pi(n)  printf("%d", n)
#define pb push_back
#define pn printf("\n")
#define mod 1000000007
typedef vector<LL> row;
typedef vector<row> matrix;

void print(LL *arr, LL n)
{
	rep(i, n) cout << arr[i] << " ";
	cout << endl;
}

LL n, m, sum;
LL dp[55][55][55][55];
LL rSum[55][55];
LL cSum[55][55];
LL a[55][55];

LL rec(LL row1, LL row2, LL col1, LL col2)
{
	if(row1 > n || row2 <= 0 || col1 > m || col2 <= 0 || row1 > row2 || col1 > col2) {
		return 0LL;
	}
	if(dp[row1][row2][col1][col2] != -1) {
		return dp[row1][row2][col1][col2];
	}
	//Alice predefined move
	LL A, B, C, D;
	A = row1; B = row2; C = col1; D = col2;
	LL r1, r2, c1, c2;
	r1 = rSum[row1][col2] - rSum[row1][col1 - 1];
	r2 = rSum[row2][col2] - rSum[row2][col1 - 1];
	c1 = cSum[col1][row2] - cSum[col1][row1 - 1];
	c2 = cSum[col2][row2] - cSum[col2][row1 - 1];
	//checking minimum
	LL minim = r1;
	minim = min(minim, r2);
	minim = min(minim, c1);
	minim = min(minim, c2);
	
	if(minim == r1) row1++;
	else if(minim == r2) row2--;
	else if(minim == c1) col1++;
	else if(minim == c2) col2--;
	if(row1 > n || row2 <= 0 || col1 > m || col2 <= 0 || row1 > row2 || col1 > col2) {
		return 0;
	}
	//Bob Move
	LL ans = 0, temp, val;
	temp = rec(row1 + 1, row2, col1, col2);	//If Bob picks First Row
	val = rSum[row1][col2] - rSum[row1][col1 - 1];
	if(ans < temp + val) {
		ans = temp + val;
	}
	temp = rec(row1, row2 - 1, col1, col2);	//If Bob picks Last Row
	val = rSum[row2][col2] - rSum[row2][col1 - 1];
	if(ans < temp + val) {
		ans = temp + val;
	}
	temp = rec(row1, row2, col1 + 1, col2);	//If Bob picks First Column
	val = cSum[col1][row2] - cSum[col1][row1 - 1];
	if(ans < temp + val) {
		ans = temp + val;
	}
	temp = rec(row1, row2, col1, col2 - 1);
	val = cSum[col2][row2] - cSum[col2][row1 - 1];
	if(ans < temp + val) {
		ans = temp + val;
	}
	return dp[A][B][C][D] = ans;
}

void solve()
{
	memset(dp, -1, sizeof(dp));
	memset(rSum, 0, sizeof(rSum));
	memset(cSum, 0, sizeof(cSum));
	sl(n); sl(m);
	sum = 0;
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			sl(a[i][j]);
			sum += a[i][j];
		}
	}
	for(int i = 1; i <= n; i++) {
		for(int j = 1; j <= m; j++) {
			rSum[i][j] = rSum[i][j - 1] + a[i][j];
		}
	}
	for(int i = 1; i <= m; i++) {
		for(int j = 1; j <= n; j++) {
			cSum[i][j] = cSum[i][j - 1] + a[j][i];
		}
	}
	//row1, row2, col1, col2
	LL ans = rec(1, n, 1, m);
	if(ans == (sum - ans)) {
		pl(sum); pn;
	}
	else {
		pl(max(ans, sum - ans)); pn;
	}
}

int main()
{
	int t;
	scanf("%d", &t);
	while(t--) {
		solve();
	}
	return 0;
}
