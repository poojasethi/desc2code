#include <cstdio>
#include <cstring>

#define min(a,b) (a<b? a:b)
#define max(a,b) (a>b? a:b)

int grid[51][51];
long long rSum[51][51], cSum[51][51];
long long bob[51][51][51][51];
int n, m;

long long collectBob(int a, int b, int c, int d)
{
    if(a<=0 || c<=0 || b>n || d>m || a>b || c>d) return 0;
    if(bob[a][b][c][d]!=-1) return bob[a][b][c][d];

    int A=a, B=b, C=c, D=d;
    
    //alice moves
    long long r0, r1, c0, c1;
    long long mn = r0 = rSum[a][d]-rSum[a][c-1];
    mn = min(r1=rSum[b][d]-rSum[b][c-1], mn);
    mn = min(c0=cSum[c][b]-cSum[c][a-1], mn);
    mn = min(c1=cSum[d][b]-cSum[d][a-1], mn);

    if(mn==r0) a++;
    else if(mn==r1) b--;
    else if(mn==c0) c++;
    else if(mn==c1) d--;
    
    if(a<=0 || c<=0 || b>n || d>m || a>b || c>d) return 0;

    //Bob Moves
    long long mx = rSum[a][d]-rSum[a][c-1] + collectBob(a+1,b,c,d);
    mx = max(mx, rSum[b][d]-rSum[b][c-1] + collectBob(a,b-1,c,d));
    mx = max(mx, cSum[c][b]-cSum[c][a-1] + collectBob(a,b,c+1,d));
    mx = max(mx, cSum[d][b]-cSum[d][a-1] + collectBob(a,b,c,d-1));
    
    return bob[A][B][C][D] = mx;

}

int main()
{
    int t;
    scanf("%d", &t);
    while(t--) {
        scanf("%d %d", &n, &m);

        memset(bob, -1, sizeof bob);

        long long total = 0;

        for(int i=1; i<=n; i++) for(int j=1; j<=m; j++) {
            scanf("%d", &grid[i][j]);
            rSum[i][j] = rSum[i][j-1] + grid[i][j];
            cSum[j][i] = cSum[j][i-1] + grid[i][j];
            total +=grid[i][j];
        }

        long long b = collectBob(1, n, 1, m);
        long long a = total-b;

        if(b==a)
            printf("%lld\n", a+b);
        else
            printf("%lld\n", max(a,b));
    }
}
