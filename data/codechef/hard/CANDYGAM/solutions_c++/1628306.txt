#include <cstring>
#include<stdio.h>
#include <cstdlib>
#include <cctype>
#include <algorithm>
#include <map>
#include <vector>
#include <list>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <cmath>
using namespace std;
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define pb push_back
#define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)
#define mod 1000000007
#define ll long long
#define inf 100000000000000000LL
#define get getchar_unlocked
inline ll inp()
{
    ll n=0,s=1;
    char p=get();
    if(p=='-')
    s=-1;
    while((p<'0'||p>'9')&&p!=EOF)
    p=get();
    while(p>='0'&&p<='9')
    {
    n = (n<< 3) + (n<< 1) + (p - '0');
    p=get();
    };
    return n*s;
}
long long row[52][52][52],col[52][52][52],a[52][52],d[4],dp[52][52][52][52];
ll r1,c1,rn,cn,n,m;
ll bob(ll,ll,ll,ll);
ll rec(ll r1,ll rn,ll c1,ll cn)
{
    if(r1>rn||c1>cn||r1>n||c1>m||rn<1||cn<1)return 0;
    if(dp[r1][rn][c1][cn]!=-1)
    return dp[r1][rn][c1][cn];
    ll mint=inf,y;
    ll A=r1,B=rn,C=c1,D=cn;
    if(row[r1][c1][cn]<mint)
    {
        mint=row[r1][c1][cn];
        y=1;
    }
    if(row[rn][c1][cn]<mint)
    {
        mint=row[rn][c1][cn];
        y=2;
    }
    if(col[c1][r1][rn]<mint)
    {
        mint=col[c1][r1][rn];
        y=3;
    }
    if(col[cn][r1][rn]<mint)
    {
        mint=col[cn][r1][rn];
        y=4;
    }
    if(y==1)r1++;
    else if(y==2)rn--;
    else if(y==3)c1++;
    else if(y==4)cn--;
    if(r1>rn||c1>cn||r1>n||c1>m||rn<1||cn<1)return 0;
    ll maxt=-1,temp=0;
    temp=rec(r1+1,rn,c1,cn);
    if((temp+row[r1][c1][cn])>maxt)
    maxt=temp+row[r1][c1][cn];
    temp=rec(r1,rn-1,c1,cn);
    if((temp+row[rn][c1][cn])>maxt)
    maxt=temp+row[rn][c1][cn];
    temp=rec(r1,rn,c1+1,cn);
    if((temp+col[c1][r1][rn])>maxt)
    maxt=temp+col[c1][r1][rn];
    temp=rec(r1,rn,c1,cn-1);
    if((temp+col[cn][r1][rn])>maxt)
    maxt=temp+col[cn][r1][rn];
    return dp[A][B][C][D]=maxt;
}
int main()
{
    ll i,j,k,l,t,ans,s,c;
    t=inp();
    while(t--)
    {
     n=inp();m=inp();s=0;c=0;
     memset(dp,-1,sizeof(dp));
     for(i=1;i<=n;i++)
     {
         for(j=1;j<=m;j++)
         {
            a[i][j]=inp();
            s+=a[i][j];
         }
     }
     for(i=1;i<=n;i++)
     {
         for(j=1;j<=m;j++)
         {
             row[i][j][j]=a[i][j];
             for(k=j+1;k<=m;k++)
             row[i][j][k]=row[i][j][k-1]+a[i][k];
         }
     }

     for(j=1;j<=m;j++)
     {
        for(i=1;i<=n;i++)
        {
            col[j][i][i]=a[i][j];
            for(k=i+1;k<=n;k++)
            col[j][i][k]=col[j][i][k-1]+a[k][j];
        }
     }
     ans=rec(1,n,1,m);
     if((ans==s-ans))
     printf("%lld\n",s);
     else
     printf("%lld\n",max(ans,s-ans));
    }
    return 0;
}
