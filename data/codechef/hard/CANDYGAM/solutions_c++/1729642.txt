/*
    anick saha
*/
 
#include <sstream>
#include <iostream>
#include <fstream>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cassert>
#include<functional>
#include<numeric>
#include<bitset>
#include<utility>
#include<algorithm>
#include<vector>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<map>
#include<set>
#include<iterator>
#include<ctime>
 
 
using namespace std;
 
 
#define max(A,B) (A)>(B)?(A):(B)
#define min(A,B) (A)<(B)?(A):(B)
#define lcm(a,b) { return a*b/gcd(a,b); }
 
 
typedef long long ll;
typedef long double ld;
typedef long long unsigned int llu;
 
 
#define SL(x) scanf("%lld",&x)
#define SLL(x) scanf("%llu",&x)
#define S(x) scanf("%d",&x)
#define SS(x) scanf("%s",s)
#define P(x) printf("%d",x)
#define PL(x) printf("%lld",x)
#define PLL(x) printf("%llu",x)
#define PS(x) printf("%s",x)
#define FOR(x) for(int i=1;i<=x;i++)
#define f_FOR(p,q,r) for(int p=q;p<=r;p++)
#define REV(x) for(int i=x;i>0;i--)
#define r_REV(p,q,r) for(int p=q;p<=r;p--)
#define W(x) while(x--)
#define TC int t;for(scanf("%d",&t);t>0;t--)
#define NL printf("\n")
 
 
#define mod 1000000007
#define M 999999999
 
int gcd(int a,int b)
{
    return ( a%b != 0 ? gcd(b,a%b) : b );
}
 
 
ll me(ll a,ll b,ll c)
{
    ll x=1,y=a;
    while(b)
    {
        if(b&1)
            x=(x*y)%c;
        y = (y*y)%c;
        b /= 2;
    }
    return x%c;
}

ll a[52][52];
ll dp[52][52][52][52];
ll rSum[52][52];
ll cSum[52][52];
ll n,m;


ll collect(int a,int b,int x, int y)
{
 
    if(a<1||b<1||x>n||y>m||x<a||y<b)
        return 0LL;
 

    if(dp[a][b][x][y]!=-1)
        return dp[a][b][x][y];
 
 
    // Alice makes the first move
    
    int A=a,B=b,C=x,D=y;
 
    ll r1,r2,c1,c2;
    
    ll minimum;
    
    minimum = r1=rSum[a][y]-rSum[a][b-1];
    minimum = min(r2=rSum[x][y]-rSum[x][b-1],minimum);
    minimum = min(c1=cSum[b][x]-cSum[b][a-1],minimum);
    minimum = min(c2=cSum[y][x]-cSum[y][a-1],minimum);
 
    
    if(r1==minimum) a++;
    else if(r2==minimum) x--;
    else if(c1==minimum) b++;
    else if(c2==minimum) y--;
    
    
    
    if(a<1||b<1||x>n||y>m||x<a||y<b)
        return 0LL;
        
        
 
    ll foo,temp,val;
 
    temp=collect(a+1,b,x,y);  // first row
        
        val=rSum[a][y]-rSum[a][b-1];
        
        if(foo<temp+val)
            foo=temp+val;
 
 
    temp=collect(a,b,x-1,y);  // last row
        
        val=rSum[x][y]-rSum[x][b-1];

        if(foo<temp+val)
            foo=temp+val;
            
            
    temp=collect(a,b+1,x,y);  // first col
    
        val=cSum[b][x]-cSum[b][a-1];

        if(foo<temp+val)
            foo=temp+val;
 

    temp=collect(a,b,x,y-1);  // last col
        
        val=cSum[y][x]-cSum[y][a-1];

        if(foo<temp+val)
            foo=temp+val;
 


    return dp[A][B][C][D]=foo;
    
}


int main()
{
    TC
    {
        SL(n);
        SL(m);
 
        memset(rSum,0,sizeof(rSum));
        memset(cSum,0,sizeof(cSum)); 
        memset(dp, -1, sizeof(dp));
        
        ll total=0;
        
        f_FOR(i,1,n)
            f_FOR(j,1,m)
            {
                scanf("%lld",&a[i][j]);
                total+=a[i][j];
            }
 
        
        f_FOR(i,1,n)
            f_FOR(j,1,m)
                rSum[i][j]=rSum[i][j-1]+a[i][j];
 
        f_FOR(i,1,m+1)
            f_FOR(j,1,n+1)
                cSum[i][j]=cSum[i][j-1]+a[j][i];
 
        
        ll ans=collect(1,1,n,m);
        
        
        if(ans==total-ans)
        {
            PL(total);
        }
        
        else
        {
            printf("%lld",max(total-ans,ans));   
        }
        
        NL;
        
    } // TC ending loop
            
return 0;

} 