#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>
#include<sstream>

#include<algorithm>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<bitset>

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef vector<string> vs; 
typedef pair<int,int> ii;
typedef long long int LLI;
typedef unsigned long long int ULLI;

#define sz(a)                        int((a).size()) 
#define pb                           push_back 
#define mp                           make_pair
#define F                            first
#define S                            second
#define present(c,x)                 ((c).find(x) != (c).end()) 
#define cpresent(c,x)                (find(all(c),x) != (c).end())
#define tr(c,i)                      for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define all(c)                       (c).begin(),(c).end()
#define si(n)                        scanf("%d",&n)
#define sl(n)                        scanf("%lld",&n)
#define sf(n)                        scanf("%f",&n)
#define sd(n)                        scanf("%lf",&n)
#define ss(n)                        scanf("%s",n)

#define abs(x)                       ((x)<0?-(x):(x))
#define fill(a,v)                    memset((a),(v),sizeof (a))
#define INF                          INT_MAX
#define LINF                         (long long)1e18
#define EPS                          1e-9
#define MAX 52

LLI cumr[MAX][MAX],cumc[MAX][MAX],dp[MAX][MAX][MAX][MAX];
int n,m;

LLI solve(int r1,int r2,int c1,int c2)
{
	if(r1>r2 || c1>c2)
		return 0;

	LLI &curr = dp[r1][r2][c1][c2];
	if(curr != -1)
		return curr;

	LLI b[] = {cumr[r1][c2]-cumr[r1][c1-1], cumr[r2][c2]-cumr[r2][c1-1],
		   cumc[r2][c1]-cumc[r1-1][c1], cumc[r2][c2]-cumc[r1-1][c2]};
	LLI minn = min(min(b[0],b[1]), min(b[2],b[3]));
	if(minn == b[0]) r1++;
	else if(minn == b[1]) r2--;
	else if(minn == b[2]) c1++;
	else if(minn == b[3]) c2--;

	if(r1>r2 || c1>c2)
		return 0;

	b[0] = solve(r1+1,r2,c1,c2) + cumr[r1][c2]-cumr[r1][c1-1];
	b[1] = solve(r1,r2-1,c1,c2) + cumr[r2][c2]-cumr[r2][c1-1];
	b[2] = solve(r1,r2,c1+1,c2) + cumc[r2][c1]-cumc[r1-1][c1];
	b[3] = solve(r1,r2,c1,c2-1) + cumc[r2][c2]-cumc[r1-1][c2];

	return curr = max(max(b[0],b[1]),max(b[2],b[3]));
}

int main()
{
	int t,a;
	for(si(t); t--; )
	{
		fill(cumr,0);
		fill(cumc,0);
		fill(dp,-1);
		LLI all = 0,bob,alice;
		
		si(n); si(m);
		for(int i=1; i<=n; i++)
		{
			for(int j=1; j<=m; j++)
			{
				si(a);
				cumr[i][j] = cumr[i][j-1] + a;
				cumc[i][j] = cumc[i-1][j] + a;
				all += a;
			}
		}

		bob = solve(1,n,1,m);
		alice = all - bob;
		if(alice != bob)
			all = max(alice,bob);
		printf("%lld\n",all);
	}
	return 0;
}
