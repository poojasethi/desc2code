#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <string>
#include <cstring>
#include <cctype>
#include <vector>
#include <set>
#include <bitset>
#include <map>
#include <queue>
#include <stack>
#include <cmath>
#include <complex>
#include <algorithm>

using namespace std;

const int LIMIT = 52;

long long A[LIMIT][LIMIT];
long long R[LIMIT][LIMIT];
long long C[LIMIT][LIMIT];
long long sum, maxwiner;
long long dp[52][52][52][52];


long long solve(int sr, int er, int sc, int ec)
{
  if (sr > er || sc > ec) {
    return 0ll;
  }

  int SR = sr;
  int ER = er;
  int SC = sc;
  int EC = ec;
  
  if (dp[sr][er][sc][ec] != -1) return dp[sr][er][sc][ec];

  long long fr, lr, fc, lc, minn;
  fr = R[sr][ec] - R[sr][sc-1];
  lr = R[er][ec] - R[er][sc-1];
  fc = C[sc][er] - C[sc][sr-1];
  lc = C[ec][er] - C[ec][sr-1];

  minn = min(min(min(fr, lr), lc), fc);

  if (minn == fr)      sr++;
  else if (minn == lr) er--;
  else if (minn == fc) sc++;
  else                 ec--;

  if (sr > er || sc > ec)
    return 0ll;

  fr = R[sr][ec] - R[sr][sc-1];
  lr = R[er][ec] - R[er][sc-1];
  fc = C[sc][er] - C[sc][sr-1];
  lc = C[ec][er] - C[ec][sr-1];

  long long maxx = 0;
  maxx = max(maxx, solve(sr + 1, er, sc, ec) + fr);
  maxx = max(maxx, solve(sr, er - 1, sc, ec) + lr);
  maxx = max(maxx, solve(sr, er, sc + 1, ec) + fc);
  maxx = max(maxx, solve(sr, er, sc, ec - 1) + lc);


  return dp[SR][ER][SC][EC] = maxx;
}


int main(int argc, char *argv[])
{
  int T, N, M, i, j;

  scanf("%d", &T);

  while (T--) {
    scanf("%d %d", &N, &M);

    sum = 0;
    for (i = 1; i <= N; i++) {
      for (j = 1; j <= M; j++) {
        scanf("%lld", &A[i][j]);
        sum += A[i][j];
      }
    }

    memset(R, 0, sizeof R);
    memset(C, 0, sizeof C);
    memset(dp, -1, sizeof dp);

    for (i = 1; i <= N; i++) {
      R[i][1] = A[i][1];
      for (j = 2; j <= M; j++)
        R[i][j] = R[i][j-1] + A[i][j];
    }

    for (j = 1; j <= M; j++) {
      C[j][1] = A[1][j];
      for (i = 2; i <= N; i++)
        C[j][i] = C[j][i-1] + A[i][j];
    }

    long long ans = solve(1, N, 1, M);
    if (ans + ans == sum)
      cout << sum << endl;
    else
      cout << max(sum - ans, ans) << endl;
  }

  return EXIT_SUCCESS;
}

