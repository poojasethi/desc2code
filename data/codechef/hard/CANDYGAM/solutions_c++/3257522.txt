#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<iostream>
#include<algorithm>
#include<vector>
#include<cstring>
#include<map>
#include<set>
#include<stack>
#include<queue>
#include<string>
#include<iterator>
#include<string>
#include<sstream>

using namespace std;
typedef long long int ll;

ll mat[50 + 5][50 + 5];
ll row[50 + 5][50 + 5];
ll col[50 + 5][50 + 5];
ll dp[50 + 5][50 + 5][50 + 5][50 + 5];
int n,m;
ll cons;
int isrect(int a,int b,int c,int d)
{
    if(a>0 && b>0 && c>0 && d>0)
    {
        if(a<=n && b<=m && c<=n && d<=m)
        {
            if(a<=c && b<=d)
            {
                return 1;
            }
            return 0;
        }
        return 0;
    }
    return 0;
}
ll memo(int,int,int,int);
ll func(int,int,int,int);
int main()
{
    int tc;
    scanf("%d",&tc);
    cons = pow(2,60);
    for(int t = 1 ; t<= tc ; t++)
    {
        scanf("%d %d",&n,&m);
        int i,j,b,l;
        ll sum = 0;
        for(i = 1 ; i<=n ; i++)
        {
            for(j = 1 ; j<=m ; j++)
            {
                scanf("%lld",&mat[i][j]);
                sum = sum + mat[i][j];
            }
        }
        for(i = 1 ; i<=n ; i++)
        {
            for(j = 1 ; j<=m ; j++)
            row[i][j] = row[i][j - 1] + mat[i][j];
        }

        for(j = 1 ; j<=m ; j++)
        {
            for(i = 1 ; i<=n ; i++)
            {
                col[j][i] = col[j][i - 1] + mat[i][j];
            }
        }

        memset(dp,-1,sizeof(dp));

        for(i = 1 ; i<=n ; i++)
        for(j = 1 ; j<=m ; j++)
        for(int k = j ; k<=m ; k++)
        dp[i][j][i][k] = row[i][k] - row[i][j - 1];

        for(i = 1 ; i<=m ; i++)
        for(j = 1 ; j<=n ; j++)
        for(int k = j ; k<=n ; k++)
        dp[j][i][k][i] = col[i][k] - col[i][j - 1];

        ll ans = 0;
        ans = func(1,1,n,m);
        if(ans == sum - ans)
        {
            ans = sum;
        }
        else
        {
            if(ans < (sum - ans))
            ans = sum - ans;
        }
        printf("%lld\n",ans);
    }
    return 0;
}
ll func(int a,int b,int c,int d)
{
    ll v1 = 0,v2 = 0,v3 = 0,v4 = 0;
    ll mn = cons,val = 0;
    int cas = 0;;

        v1 = row[a][d] - row[a][b - 1];
        if(mn > v1)
        {
            mn = v1;
            cas = 1;//val = (isrect(a + 1,b,c,d) == 1)? : 0;
        }

        v3 = row[c][d] - row[c][b - 1];
        if(mn > v3)
        {
            mn = v3;
            cas = 3;//val = (isrect(a,b,c - 1,d) == 1)?memo(a,b,c - 1,d):0;
        }


        v2 = col[b][c] - col[b][a - 1];
        if(mn > v2)
        {
            mn = v2;
            cas = 2;//val = (isrect(a,b + 1,c,d) == 1)? memo(a,b + 1,c,d):0;
        }

        v4 = col[d][c] - col[d][a - 1];
        if(mn > v4)
        {
            mn = v4;
            cas = 4;//val = (isrect(a,b,c,d - 1) == 1)?memo(a,b,c,d - 1):0;
        }
        switch(cas)
        {
            case 1 : return memo(a + 1,b,c,d);
            case 2 : return memo(a,b + 1,c,d);
            case 3 : return memo(a,b,c - 1,d);
            case 4 : return memo(a,b,c,d - 1);
        }
}
ll memo(int i,int j,int k,int l)
{
    if(i > k || j > l) return 0;
    if(dp[i][j][k][l] != -1) return dp[i][j][k][l];

    ll v1 = row[i][l] - row[i][j - 1] + func(i + 1,j,k,l);
    ll v2 = col[j][k] - col[j][i - 1] + func(i,j + 1,k,l);
    ll v3 = row[k][l] - row[k][j - 1] + func(i,j,k - 1,l);
    ll v4 = col[l][k] - col[l][i - 1] + func(i,j,k,l - 1);

    dp[i][j][k][l] = max(v1,max(v2,max(v3,v4)));

    return dp[i][j][k][l];
}
