#include <iostream>
#include <cstring>
#include <algorithm>
#include <cstdio>
#include <climits>

using namespace std;

long long row[52][52],col[52][52];
long long dp[52][52][52][52][2];

long long f(int i, int j, int k, int l, int turn)
{
    if ( i > k || j > l ) return 0;
    long long &ans = dp[i][j][k][l][turn];
    if ( ans != -1 ) return ans;
    ans = 0;
    if ( turn == 0 ) {
       long long a[4] = {row[i][l] - row[i][j-1],  row[k][l] - row[k][j-1], col[j][k] - col[j][i-1], col[l][k] - col[l][i-1]};
       int idx;
       long long mn = LLONG_MAX;
       for ( int p = 0; p < 4; p++ ) {
           if ( a[p] < mn ) {
                mn = a[p];
                idx = p;
           }
       }
       if ( idx == 0 )  ans = f(i+1,j,k,l,1);
       else if ( idx == 1 ) ans = f(i,j,k-1,l,1); 
       else if ( idx == 2 ) ans = f(i,j+1,k,l,1); 
       else if ( idx == 3 ) ans = f(i,j,k,l-1,1); 
    }
    else {
         ans = max(ans, row[i][l] - row[i][j-1] + f(i+1,j,k,l,0));
         ans = max(ans, row[k][l] - row[k][j-1] + f(i,j,k-1,l,0));
         ans = max(ans, col[j][k] - col[j][i-1] + f(i,j+1,k,l,0));
         ans = max(ans, col[l][k] - col[l][i-1] + f(i,j,k,l-1,0));
    }
    return ans;
}
 
int main()
{
    int t,i,j,n,m;
    long long sum,x,ans1,ans2,ans3;
    cin >> t;
    while ( t-- ) {
          cin >> n >> m;
          sum = 0;
          row[0][0] = col[0][0] = 0;
          for ( i = 1; i <= n; i++ ) {
              row[i][0] = 0;
              for ( j = 1; j <= m; j++ ) {
                  col[j][0] = 0;
                  cin >> x;
                  sum += x;
                  row[i][j] = row[i][j-1] + x;
                  col[j][i] = col[j][i-1] + x;
              }
          }
          memset(dp, -1, sizeof(dp));
          ans1 = f(1,1,n,m,0);
          ans2 = sum-ans1;
          if ( ans1 == ans2 ) ans3 = ans1+ans2;
          else ans3 = max(ans1,ans2);
          cout << ans3 << endl;
    }
    return 0;
}
