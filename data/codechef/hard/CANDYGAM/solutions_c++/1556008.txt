#include <iostream>
#include <algorithm>
#include <string>
#include <set>
#include <vector>
#include <queue>
#include <fstream>
#include <sstream>
#include <map>
#include <list>
#include <cmath>
#include <bitset>
#include <stack>
#include <stdio.h>
#include <cstring>
#include <ctime>
#include <ctype.h>
#include <utility>
#include <stdlib.h>
using namespace std;

#define ll long long

ll rowsum[50][50][50];
ll colsum[50][50][50];
ll best[50][50][50][50];
bool found[50][50][50][50];
ll A[50][50];
int N, M;

ll find (int r0, int r1, int c0, int c1)
{	
	if (r0 > r1 || c0 > c1)
		return 0;

	if (found[r0][r1][c0][c1])
		return best[r0][r1][c0][c1];

	found[r0][r1][c0][c1] = true;

	int r0i = r0, r1i = r1, c0i = c0, c1i = c1;

	ll maz = min(min(rowsum[r0][c0][c1], rowsum[r1][c0][c1]), min(colsum[c0][r0][r1], colsum[c1][r0][r1]));
	if (maz == rowsum[r0][c0][c1])
		r0++;
	else if (maz == rowsum[r1][c0][c1])
		r1--;
	else if (maz == colsum[c0][r0][r1])
		c0++;
	else
		c1--;

	if (r0 > r1 || c0 > c1)
		return 0;

	best[r0i][r1i][c0i][c1i] = max(max(rowsum[r0][c0][c1] + find(r0 + 1, r1, c0, c1), rowsum[r1][c0][c1] + find(r0, r1 - 1, c0, c1))
		, max(colsum[c0][r0][r1] + find(r0, r1, c0 + 1, c1), colsum[c1][r0][r1] + find(r0, r1, c0, c1 - 1)));

	return best[r0i][r1i][c0i][c1i];
}


int main (void)
{
	int T;
	//ifstream cin ("in.txt");
	cin >> T;
	for (int i = 0; i < T; i++)
	{
		cin >> N >> M;
		ll totsum = 0;
		for (int j = 0; j < N; j++)
		{
			for (int k = 0; k < M; k++)
			{
				scanf("%d", &(A[j][k]));
				totsum += A[j][k];
			}
		}

		memset(rowsum, -1, sizeof(rowsum));
		memset(colsum, -1, sizeof(colsum));

		for (int j = 0; j < N; j++)
			for (int k = 0; k < M; k++)
				rowsum[j][k][k] = A[j][k];

		for (int j = 0; j < N; j++)
			for (int k = 0; k < M; k++)
				for (int l = k + 1; l < M; l++)
					rowsum[j][k][l] = rowsum[j][k][l-1] + A[j][l];

		for (int j = 0; j < M; j++)
			for (int k = 0; k < N; k++)
				colsum[j][k][k] = A[k][j];

		for (int j = 0; j < M; j++)
			for (int k = 0; k < N; k++)
				for (int l = k + 1; l < N; l++)
					colsum[j][k][l] = colsum[j][k][l-1] + A[l][j];

		memset(found, 0, sizeof(found));
		memset(best, 0, sizeof(best));

		find(0, N-1, 0, M-1);

		if (totsum - best[0][N-1][0][M-1] == best[0][N-1][0][M-1])
			cout << totsum << endl;
		else
			cout << max(totsum - best[0][N-1][0][M-1], best[0][N-1][0][M-1]) << endl;
	}
	//while (true) {}
}
