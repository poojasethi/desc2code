#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll dp[51][51][51][51],a[51][51];
ll row_sum[51][51][51], col_sum[51][51][51];
void cal_rc_sum(int n, int m)
{
	for(int i=0;i<n;i++)
	 for(int j=0;j<m;j++)
	 {
	 	row_sum[i][j][i] = a[i][j];
	 	col_sum[i][j][j]= a[i][j];
	 	for(int k=i+1;k<n;k++)
	 	{
	 		row_sum[i][j][k] += row_sum[i][j][k-1] + a[k][j];
		}
		for(int k=j+1;k<m;k++)
		 col_sum[i][j][k] += col_sum[i][j][k-1] +a[i][k];
	 	
	 }
}
ll alice_move(int x1, int x2,int y1, int y2, int *dx1, int *dx2, int *dy1, int *dy2 )
{
	ll min_move = min(row_sum[x1][y1][x2],min(row_sum[x1][y2][x2],min(col_sum[x1][y1][y2],col_sum[x2][y1][y2])));
	if(min_move==col_sum[x1][y1][y2])
	 *dx1= 1;
	else if(min_move==col_sum[x2][y1][y2])
	 *dx2 = -1;
	else if(min_move==row_sum[x1][y1][x2])
	*dy1= 1;
	else if(min_move==row_sum[x1][y2][x2])
	*dy2 = -1;
	return min_move;
}
ll bob_moves(int r0, int r1, int c0, int c1 )
{
  if(r0>r1 || c0>c1)return 0;
  if(dp[r0][r1][c0][c1]>=0)return dp[r0][r1][c0][c1];
  int dx1,dx2,dy1,dy2;
  dx1=0,dx2=0,dy1=0,dy2=0;
  alice_move(r0,r1,c0,c1,&dx1,&dx2,&dy1,&dy2);
  r0 +=dx1,r1+=dx2 ,c0+=dy1,c1+=dy2;
  if(r0>r1 || c0>c1)
  {
  	r0 -=dx1,r1-=dx2 ,c0-=dy1,c1-=dy2;
     return 0;	
  }
  ll max_candies =0;
  //ll tmp = bob_moves(r0+1,r1,c0,c1)+col_sum[r0][c0][c1];
  //if(tmp>max_candies)
   //tmp= max_candies; 
  //tmp = bob_moves(r0,r1-1,c0,c1)+col_sum[r1][c0][c1]
   max_candies = max(bob_moves(r0+1,r1,c0,c1)+col_sum[r0][c0][c1],max(bob_moves(r0,r1-1,c0,c1)+col_sum[r1][c0][c1],max(bob_moves(r0,r1,c0+1,c1)+row_sum[r0][c0][r1],bob_moves(r0,r1,c0,c1-1)+row_sum[r0][c1][r1])));
  r0 -=dx1,r1-=dx2 ,c0-=dy1,c1-=dy2;
  //cout<<r0<<" "<<r1<<" "<<c0<<" "<<c1<<dp[r0][r1][c0][c1]<<endl;
  return dp[r0][r1][c0][c1]=max_candies;
  
  	
}
void initialize_array(int n, int m)
{
	for(int i=0;i<n;i++)
		  for(int j=0;j<m;j++)
		   for(int k=0;k<n;k++)
		   {
		    row_sum[i][j][k]=0;	
		   
		    for(int l=0;l<m;l++)
		     {
		       dp[i][j][k][l]=-1;
		       col_sum[i][j][l]=0;
		   	 }
		   }
}

int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		int n,m;ll all_sum=0;
		scanf("%d%d",&n,&m);
		for(int i=0;i<n;i++)
		 for(int j=0;j<m;j++)
		 {
		 	scanf("%lld",&a[i][j]);
		 	all_sum += a[i][j];
		 }
		 //initialize_array(n,m);
		 memset(row_sum,0,sizeof(row_sum));
		 memset(col_sum,0,sizeof(col_sum));
		 memset(dp, -1,sizeof(dp));
		 cal_rc_sum(n,m);
		 
		     ll bob_cal=0;
		     ll alice_cal=0;
		  bob_cal = bob_moves(0,n-1,0, m-1);
		  alice_cal = all_sum - bob_cal;
		 ll winner=0;
		 if(bob_cal==alice_cal)
		  winner = all_sum;
		 else if(bob_cal>alice_cal)
		  winner = bob_cal;
		else
		 winner = alice_cal;
		 
		cout<<winner<<endl;
	}
}