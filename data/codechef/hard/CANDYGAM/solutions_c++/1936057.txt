#include<cstdio>
#include<iostream>
#define oo 1000000007;
#define NN 52
#include<memory.h>
using namespace std;
typedef long long ll;


ll candy[NN][NN];
ll dp[NN][NN][NN][NN];
bool mark[NN][NN][NN][NN];
ll rowsum[NN][NN][NN];
ll colsum[NN][NN][NN];
int N, M;


/* a = sum of first row if min ret 0
   b = sum of last row if min ret 1
   c = sum of first col if min ret 2
   d = sum of last col if min ret 3
*/
int min(ll a, ll b, ll c, ll d)
{
   int a1, a2;
   ll tmp1, tmp2;
   if(a<=b)
   {
       tmp1 = a;
       a1 = 0;
   }
   else
   {
       tmp1 = b;
       a1 =1;
   }

   if(c<=d)
   {
       tmp2 = c;
       a2 = 2;
   }
   else
   {
       tmp2 = d;
       a2 =3;
   }
   if(tmp1<=tmp2)return a1;
   else return a2;
}

ll max(ll a, ll b)
{
    return a>b?a:b;
}

ll max(ll a, ll b, ll c, ll d)
{
    return max(max(a,b), max(c,d));
}

void printgame(int a, int b, int x, int y)
{
    cout<<"a "<<a<<" b "<<b<<endl;
    for(int i=a; i<a+x; i++)
    {
        for(int j=b; j<b+y; j++)
            cout<<candy[i][j]<<" ";
        cout<<endl;
    }
    cout<<endl;
}


/*a = row number of top left corner
  b = col number of top left corner
  x = number of rows
  y = number of cols
*/
void Alice_move(int *p, int *q, int *r, int *s)
{
    int a=*p, b= *q, x = *r, y = *s;

   ll s1, s2, s3, s4;

   s1 = rowsum[a][b][b+y-1];
   s2 = rowsum[a+x-1][b][b+y-1];
   s3 = colsum[b][a][a+x-1];
   s4 = colsum[b+y-1][a][a+x-1];

  // cout<<s1<<" "<<s2<<" "<<s3<<" "<<s4<<endl;
   int ind = min(s1, s2, s3, s4);
   if(ind == 0)
   {
       *p = a+1;
       *r = x-1;
   }
   else if(ind == 1)
   {
       *r = x-1;
   }
   else if(ind == 2)
   {
       *q = b+1;
       *s = y-1;
   }
   else
   {
       *s = y-1;
   }
}


ll Bob(int a, int b, int x, int y)
{
    //cout<<a<<" "<<b<<" "<<x<<" "<<y<<endl;
    int p=a, q=b, r=x, s=y;
    ll s1, s2, s3, s4, res;
    if(mark[a][b][x][y] == 1)return dp[a][b][x][y];
    else
    {
       Alice_move(&a, &b, &x, &y);
       if(x == 0 || y == 0)res = 0;

       else if(x == 1)
       {
          res = rowsum[a][b][b+y-1];

       }
       else if(y == 1)
       {
           res = colsum[b][a][a+x-1];
       }
       else
       {
       s1 = rowsum[a][b][b+y-1] + Bob(a+1, b, x-1, y);
       //cout<<s1<<" "<<s2<<" "<<s3<<" "<<s4<<endl;
       s2 = rowsum[a+x-1][b][b+y-1] + Bob(a, b, x-1, y);
       s3 = colsum[b][a][a+x-1] + Bob(a, b+1, x, y-1);
       s4 = colsum[b+y-1][a][a+x-1] + Bob(a, b, x, y-1);
       res = max(s1, s2, s3, s4);
       }
       dp[p][q][r][s] = res;
       mark[p][q][r][s] = 1;
       return res;
    }
}

void precompute()
{
    memset(mark, 0, sizeof(mark));
    /* store all row and col sums*/
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<M; j++)
        {
            for(int k=j; k<M; k++)
            {
               rowsum[i][j][k] = 0;
               for(int p=j; p<=k; p++)
               {
                   rowsum[i][j][k]+= candy[i][p];
               }
            }
        }
    }

    for(int j=0; j<M; j++)
    {
        for(int i=0; i<N; i++)
        {
            for(int k=i; k<N; k++)
            {
               colsum[j][i][k] = 0;
               for(int p=i; p<=k; p++)
               {
                   colsum[j][i][k]+= candy[p][j];
               }
            }
        }
    }

}



void solve()
{
    ll sum=0, ans;
    scanf("%d%d", &N, &M);

    for(int i=0; i<N; i++)
    {
        for(int j=0; j<M; j++)
        {
          scanf("%lld", &candy[i][j]);
            sum+=  candy[i][j];
        }
    }

     precompute();

     ans = Bob(0,0, N, M);
     if(ans == sum - ans)ans= sum;
     else if(ans<sum-ans)ans = sum-ans;

     printf("%lld\n", ans);


}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("in.txt","r",stdin);
    freopen("output.txt","w",stdout);

    #endif
    int t;
    scanf("%d", &t);
    while(t--)
    {
      solve();
    }
}
