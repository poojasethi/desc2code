/*
written by- Piyush Golani
language- c++
country- India
College- N.I.T Jamshedpur
*/
#include <cmath>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>
#include<cstdio>
#include<sstream>
#include<algorithm>
#include<cstdlib>
#include<cstring>
#include<map>
#include<cctype>
#include<queue>
using namespace std;
#define pb push_back
#define all(s) s.begin(),s.end()
#define f(i,a,b) for(int i=a;i<b;i++)
#define F(i,a,b) for(int i=a;i>=b;i--)
#define PI 3.1415926535897932384626433832795
#define INF 1000000005
#define BIG_INF 9000000000000000000LL
#define mp make_pair
#define eps 1e-9
#define LL long long
#define si(n) scanf("%d",&n)
#define sll(n) scanf("%lld",&n)
#define mod 1000000007
#define vv pair<LL,int>

int A[55][55];
int n,m;
LL sumrow[55][55][55],sumcol[55][55][55],Al,Bo;
LL DP[55][55][55][55];
LL Do(int r1,int r2,int c1,int c2)
{
    LL &res=DP[r1][r2][c1][c2];
    if(res!=-1) return res;
    //Alice
    if(r1>r2 || c1>c2 || r1>=n || r2<0 || c1<0 || c2>=m) return res=0;
    char e;
    int y;
    LL p=BIG_INF;
    //cout<<r1<<" "<<r2<<" "<<c1<<" "<<c2<<"\n";
    if(sumrow[r1][c1][c2]<p)
    {
        p=sumrow[r1][c1][c2];
        e='r';
        y=1;
    }
    if(sumrow[r2][c1][c2]<p)
    {
        p=sumrow[r2][c1][c2];
        e='r';
        y=2;
    }
    if(sumcol[c1][r1][r2]<p)
    {
        p=sumcol[c1][r1][r2];
        e='c';
        y=1;
    }
    if(sumcol[c2][r1][r2]<p)
    {
        p=sumcol[c2][r1][r2];
        e='c';
        y=2;
    }
    //see which one is chosen
    if(e=='r')
    {
        if(y==1)
        {
            //Al+=sumrow[r1][c1][c2];
            r1++;
        }
        else
        {
            //Al+=sumrow[r2][c1][c2];
            r2--;
        }
    }
    else
    {
        if(y==1)
        {
            //Al+=sumcol[c1][r1][r2];
            c1++;
        }
        else
        {
            //Al+=sumcol[c2][r1][r2];
            c2--;
        }
    }
    LL a=0;
    if(r1<=r2 && c1<=c2 && c1<m && c2>=0 && r1<n && r2>=0)
    {
        a=max(max(sumrow[r1][c1][c2]+Do(r1+1,r2,c1,c2),sumrow[r2][c1][c2]+Do(r1,r2-1,c1,c2)),max(sumcol[c1][r1][r2]+Do(r1,r2,c1+1,c2),sumcol[c2][r1][r2]+Do(r1,r2,c1,c2-1)));

    }

    return res=a;
}

int main()
{
    int t;
    si(t);
    while(t--)
    {
        si(n); si(m);
        LL sum=0;
        f(i,0,n)
        {
            f(j,0,m)
            {
                si(A[i][j]);
                sum+=A[i][j];
            }
        }

        f(i,0,n)
        {
            f(j,0,m)
            {
                f(k,0,m)
                {
                    if(j==k)
                    {
                        sumrow[i][j][k]=A[i][j];
                        continue;
                    }
                    sumrow[i][j][k]=sumrow[i][j][k-1]+A[i][k];
                }
            }
        }
        f(i,0,m)
        {
            f(j,0,n)
            {
                f(k,0,n)
                {
                    if(j==k)
                    {
                        sumcol[i][j][k]=A[j][i];
                        continue;
                    }
                    sumcol[i][j][k]=sumcol[i][j][k-1]+A[k][i];
                }
            }
        }
        //Al=0,Bo=0;
        memset(DP,-1,sizeof(DP));
        Bo=Do(0,n-1,0,m-1);
        Al=sum-Bo;
        //cout<<Al<<" "<<Bo<<"\n";
        if(Al==Bo) Bo+=Al;
        printf("%lld\n",max(Al,Bo));
    }
    return 0;
}
