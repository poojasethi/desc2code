#include <cstdio>
#include <algorithm>

using namespace std;

int N, M;
int A[50][50];
long long d[50][50][50][50];
bool v[50][50][50][50];
long long cl[50][50];
long long cc[50][50];

inline long long s(char a, char b, char c, bool o)
{
    return o ? cc[a][c] - (b ? cc[a][b-1] : 0) : cl[a][c] - (b ? cl[a][b-1] : 0);
}

long long f(bool p, char l1, char c1, char l2, char c2)
{
    if(l1 > l2 || c1 > c2)
        return 0;
    long long t[4] = {s(l1, c1, c2, 0), s(l2, c1, c2, 0), s(c1, l1, l2, 1), s(c2, l1, l2, 1)};
    if(p)
    {
        if(v[l1][c1][l2][c2])
            return d[l1][c1][l2][c2];
        v[l1][c1][l2][c2] = true;
        return d[l1][c1][l2][c2] = max( max(f(0, l1+1, c1, l2, c2) + t[0], f(0, l1, c1, l2-1, c2) + t[1]),
                                        max(f(0, l1, c1+1, l2, c2) + t[2], f(0, l1, c1, l2, c2-1) + t[3]) );
    }
    else
    {
        char r = 0;
        for(char i=1; i<4; i++)
            if(t[i] < t[r])
                r = i;
        if(r == 0)
            return f(1, l1+1, c1, l2, c2);
        if(r == 1)
            return f(1, l1, c1, l2-1, c2);
        if(r == 2)
            return f(1, l1, c1+1, l2, c2);
        return f(1, l1, c1, l2, c2-1);
    }
}

int main()
{
    int T;
    scanf("%d", &T);
    while(T--)
    {
        scanf("%d %d", &N, &M);
        for(int i=0; i<N; i++)
            for(int j=0; j<M; j++)
                scanf("%d", &A[i][j]);
        for(int i=0; i<N; i++)
            for(int j=0; j<M; j++)
                cl[i][j] = A[i][j] + (j ? cl[i][j-1] : 0);
        for(int j=0; j<M; j++)
            for(int i=0; i<N; i++)
                cc[j][i] = A[i][j] + (i ? cc[j][i-1] : 0);
        long long r = f(0, 0, 0, N-1, M-1);
        long long s = -r;
        for(int i=0; i<N; i++)
            for(int j=0; j<M; j++)
                s += A[i][j];
        printf("%lld\n", s == r ? s + r : max(r, s));
        for(int i=0; i<N; i++)
            for(int j=0; j<M; j++)
                for(int k=0; k<N; k++)
                    for(int l=0; l<M; l++)
                        v[i][j][k][l] = false;
    }
    return 0;
}