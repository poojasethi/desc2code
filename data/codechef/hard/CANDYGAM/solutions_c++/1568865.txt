#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>
#include <utility>
#include <string>
#include <cstring>
#include <cassert>
#include <queue>
#include <set>
#include <map>
#include <numeric>
#include <stack>
using namespace std;
#define mp make_pair
#define INF (int)1e9
#define X first
#define Y second
#define REP(i, n) for(int i=0; i < n; i++)
#define FOR(i, a, b) for(int i=a; i < b; i++)
#define fill(a, x) memset(a, x, sizeof(a))
#define all(c) c.begin(), c.end()
#define sz(x)    ((int) x.size())
#define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
#define pb push_back 
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef long long ll;
int A[50][50];
long long D[51][51][51][51];
pair<ii,ii> aliceM[51][51][51][51];
bool aliceF[51][51][51][51];
long long MAXC=10000000000000LL;
long long sumr[51][51];
long long sumc[51][51];
long long csumr(int r,int s,int e){
	return sumr[r][e]-sumr[r][s]+A[r][s];
}
long long csumc(int c,int s,int e){
	return sumc[e][c]-sumc[s][c]+A[s][c];
}
pair<ii,ii> alice(int si,int sj,int ei,int ej){
	if(si>ei || sj>ej)
		return pair<ii,ii>(ii(0,0),ii(-1,-1));
	if(aliceF[si][sj][ei][ej])
		return aliceM[si][sj][ei][ej];
	long long minc=MAXC;
	pair<ii,ii> res;
	long long candy1=0,candy2=0;
	/*for(int i=sj-1;i<ej;i++){
		candy1+=A[si-1][i];
		candy2+=A[ei-1][i];
	}*/
	candy1=csumr(si-1,sj-1,ej-1);
	candy2=csumr(ei-1,sj-1,ej-1);
	if(minc>candy1){
		minc=candy1;
		res=pair<ii,ii>(ii(si+1,sj),ii(ei,ej));
	}
	if(minc>candy2){
		minc=candy2;
		res=pair<ii,ii>(ii(si,sj),ii(ei-1,ej));		
	}
	/*candy1=candy2=0;
	for(int i=si-1;i<ei;i++){
		candy1+=A[i][sj-1];
		candy2+=A[i][ej-1];
	}*/
	candy1=csumc(sj-1,si-1,ei-1);
	candy2=csumc(ej-1,si-1,ei-1);
	if(minc>candy1){
		minc=candy1;
		res=pair<ii,ii>(ii(si,sj+1),ii(ei,ej));
	}
	if(minc>candy2){
		minc=candy2;
		res=pair<ii,ii>(ii(si,sj),ii(ei,ej-1));
	}
	
	aliceF[si][sj][ei][ej]=true;
//	cout<<"Alice : "<<si<<" "<<sj<<" "<<ei<<" "<<ej<<" "<<minc<<" ("<<res.X.X<<" "<<res.X.Y<<" "<<res.Y.X<<" "<<res.Y.Y<<")"<<endl;
	return aliceM[si][sj][ei][ej]=res;
}
long long dynamic(int si,int sj,int ei,int ej){
	if(si>ei || sj>ej)
		return 0;
	if(D[si][sj][ei][ej]!=-1)
		return D[si][sj][ei][ej];
	long long res=0;
	long long candy1=0,candy2=0;
	/*for(int i=sj-1;i<ej;i++){
		candy1+=A[si-1][i];
		candy2+=A[ei-1][i];
	}*/
	candy1=csumr(si-1,sj-1,ej-1);
	candy2=csumr(ei-1,sj-1,ej-1);
	pair<ii,ii> state=alice(si+1,sj,ei,ej);
//	cout<<"bob : "<<state.X.X<<" "<<state.X.Y<<" "<<state.Y.X<<" "<<state.Y.Y<<endl;
	res=candy1+dynamic(state.X.X,state.X.Y,state.Y.X,state.Y.Y);

	state=alice(si,sj,ei-1,ej);
	res=max(res,candy2+dynamic(state.X.X,state.X.Y,state.Y.X,state.Y.Y));
	/*candy1=candy2=0;
	for(int i=si-1;i<ei;i++){
		candy1+=A[i][sj-1];
		candy2+=A[i][ej-1];
	}*/
	candy1=csumc(sj-1,si-1,ei-1);
	candy2=csumc(ej-1,si-1,ei-1);

	state=alice(si,sj+1,ei,ej);
	res=max(res,candy1+dynamic(state.X.X,state.X.Y,state.Y.X,state.Y.Y));
	state=alice(si,sj,ei,ej-1);
	res=max(res,candy2+dynamic(state.X.X,state.X.Y,state.Y.X,state.Y.Y));
//	cout<<"BOB : "<<si<<" "<<sj<<" "<<ei<<" "<<ej<<" "<<res<<endl;
	return D[si][sj][ei][ej]=res;

}
int main(){
	int testCases;
	cin>>testCases;
	while(testCases--){
		int n,m;
		cin>>n>>m;
		long long totalc=0;
		for(int i=0;i<n;i++){
			for(int j=0;j<m;j++){
				cin>>A[i][j];
				totalc+=A[i][j];
			}
		}
		for(int i=0;i<n;i++)sumr[i][0]=A[i][0];
		for(int i=0;i<m;i++)sumc[0][i]=A[0][i];
		for(int i=0;i<n;i++){
			for(int j=1;j<m;j++)
				sumr[i][j]=sumr[i][j-1]+A[i][j];
		}
		for(int i=0;i<m;i++){
			for(int j=1;j<n;j++)
				sumc[j][i]=sumc[j-1][i]+A[j][i];
		}

	

		memset(D,-1,51*51*51*51*sizeof(long long));
		memset(aliceF,0,51*51*51*51*sizeof(bool));
		pair<ii,ii> state=alice(1,1,n,m);
		long long bobc=dynamic(state.X.X,state.X.Y,state.Y.X,state.Y.Y);
		if(totalc-bobc==bobc)
			cout<<totalc<<endl;
		else
			cout<<max(totalc-bobc,bobc)<<endl;
		
	}
	return 0;
}