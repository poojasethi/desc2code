#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>

using namespace std;

typedef long long ll;
const int kMaxN = 50, kMaxM = 50;
int n, m, v[kMaxN + 1][kMaxM + 1];
ll row[kMaxN + 1][kMaxM + 1], col[kMaxN + 1][kMaxM + 1];
ll memo[kMaxN + 1][kMaxM + 1][kMaxN + 1][kMaxM + 1];
bool done[kMaxN + 1][kMaxM + 1][kMaxN + 1][kMaxM + 1];

ll Solve(int x1, int y1, int x2, int y2) {
	if (x1 > x2 || y1 > y2) return 0;
	if (done[x1][y1][x2][y2]) return memo[x1][y1][x2][y2];
	done[x1][y1][x2][y2] = true;
	ll &res = memo[x1][y1][x2][y2];
	res = 0;
	ll tmp = min(row[x1][y2] - row[x1][y1 - 1], min(row[x2][y2] - row[x2][y1 - 1], min(col[x2][y1] - col[x1 - 1][y1], col[x2][y2] - col[x1 - 1][y2])));
	if (row[x1][y2] - row[x1][y1 - 1] == tmp) ++ x1;
	else if (row[x2][y2] - row[x2][y1 - 1] == tmp) -- x2;
	else if (col[x2][y1] - col[x1 - 1][y1] == tmp) ++ y1;
	else -- y2;
	if (x1 > x2 || y1 > y2) return res;
	res = max(res, row[x1][y2] - row[x1][y1 - 1] + Solve(x1 + 1, y1, x2, y2));
	res = max(res, row[x2][y2] - row[x2][y1 - 1] + Solve(x1, y1, x2 - 1, y2));
	res = max(res, col[x2][y1] - col[x1 - 1][y1] + Solve(x1, y1 + 1, x2, y2));
	res = max(res, col[x2][y2] - col[x1 - 1][y2] + Solve(x1, y1, x2, y2 - 1));
	return res;
}

int main() {
	int t;
	for (scanf("%d", &t); t --; ){
		scanf("%d%d", &n, &m);
		ll sum = 0;
		for (int i = 1; i <= n; ++ i)
			for (int j = 1; j <= m; ++ j) {
				scanf("%d", &v[i][j]);
				row[i][j] = row[i][j - 1] + v[i][j];
				col[i][j] = col[i - 1][j] + v[i][j];
				sum += v[i][j];
			}
		memset(done, false, sizeof(done));
		ll ans = Solve(1, 1, n, m);
		if (ans == sum - ans) ans = sum;
		else if (ans < sum - ans) ans = sum - ans;
		printf("%lld\n", ans);
	}
	return 0;
}