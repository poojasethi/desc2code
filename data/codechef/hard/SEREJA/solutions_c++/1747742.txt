#include<stdio.h>
#include<iostream>
#include<math.h>
#include<map>
using namespace std;
typedef long long ll;
#define MOD 1000000007
int M[100009][18];
int M2[100009][18];
int A[100009];
map<pair<int,int>,ll> memo;
int power(ll a,ll n)
{
     ll r =1;
    for(;n>0;n>>=1)
   {
         if(n&1) r = (r*a)%MOD;
          a = (a*a)%MOD;
   }
      return r;
 }

ll solve(int a,int b)
{
// printf("%d %d\n",a,b);    
   ll i,j,ind_mn,ind_mx,minn,maxx,mi,Mi,res;
   res=0;
     i=a; j=b;
   
   if( i>= j) return 1;

   pair<int,int> p = make_pair(a,b);
   if(memo.count(p)) return memo[p];

   int k = log2(j-i+1);
    if(A[M[i][k]] <= A[M[j-(1<<k)+1][k]])
      { minn =A[M[i][k]];mi = M[i][k];}
       else
         { minn =   A[M[j-(1<<k)+1][k]]; mi = M[j-(1<<k)+1][k]; }


   if(A[M2[i][k]] >= A[M2[j-(1<<k)+1][k]])
       { maxx =A[M2[i][k]];Mi = M2[i][k];}
            else
         { maxx =   A[M2[j-(1<<k)+1][k]]; Mi = M2[j-(1<<k)+1][k]; }
   
   ind_mn = min(mi,Mi);
   ind_mx = max(mi,Mi);
//   if(a==0 && b==2) {maxx=4;ind_mx=2;} 
  res = power(maxx-minn,(ind_mn-a+1)*(b-ind_mx+1));
  res = (res * solve(a, ind_mx-1))%MOD;
  res = (res * solve(ind_mn+1, b))%MOD;
  res = (res * power(solve(ind_mn+1, ind_mx-1),MOD-2))%MOD; // res = res / solve(ind_mn+1,ind_mx-

   return memo[p] = res;
}

int main()
{
    int size;
    cin >> size;
    
    for(int i=0;i<size;i++)
     scanf("%d", A+i);

//    for(int i=0;i<size;i++) 
//      printf("%d ",A[i]);
//    printf("\n");
    
    for(int i=0; i<size; ++i)
        {M[i][0] = i;M2[i][0]=i;}
   
    for(int j=1; (1<<j) <= size; ++j)
        for(int i=0; i+(1<<j)-1 < size; ++i)
        {
            if(A[M[i][j-1]] <= A[M[i+(1<<(j-1))][j-1]])
                M[i][j] = M[i][j-1];
            else
                M[i][j] = M[i+(1<<(j-1))][j-1];
       
            if(A[M2[i][j-1]] >= A[M2[i+(1<<(j-1))][j-1]])
                M2[i][j] = M2[i][j-1];
            else
                M2[i][j] = M2[i+(1<<(j-1))][j-1];
           
              }
       

int res = solve(0,size-1);
printf("%d\n",res);
/////////////////
/*
int i,j,minn,maxx,mi,Mi;
 for(int i=0;i<size;i++)
  for(int j=i;j<size;j++)
{
 if(i==j) {maxx = minn = A[i]; printf("%d %d minn = %d maxx  = %d\n",i,j,minn,maxx); continue;}
//int minn,maxx,mi,Mi;
 int k = log2(j-i+1);
    if(A[M[i][k]] <= A[M[j-(1<<k)+1][k]])
      { minn =A[M[i][k]];mi = M[i][k];}
       else
         { minn =   A[M[j-(1<<k)+1][k]]; mi = M[j-(1<<k)+1][k]; }


   if(A[M2[i][k]] >= A[M2[j-(1<<k)+1][k]])
       { maxx =A[M2[i][k]];Mi = M2[i][k];}
            else
         { maxx =   A[M2[j-(1<<k)+1][k]]; Mi = M2[j-(1<<k)+1][k]; }

 printf("%d %d minn = %d maxx = %d \n",i,j,minn,maxx); 
 }
*/
 return 0;
}
