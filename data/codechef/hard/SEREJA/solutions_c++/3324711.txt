#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cmath>
#include <algorithm>
#include <map>
#include <vector>

#define REP(a,b) for (int a = 0; a < b; a++)
#define FOR(a,b,c) for (int a = b; a <= c; a++)
#define RESET(a,b) memset(a,b,sizeof a)

#define PII pair<int,int>
#define MP make_pair
#define PB push_back
#define F first
#define S second

#define EPS 1e-8
#define MAXN 132002
#define MOD 1000000007
#define LL long long
using namespace std;

int N;
int ar[MAXN];
int sta[18][MAXN], sti[18][MAXN];
int lg[MAXN];

inline int query(int a, int b){
   int d = lg[b - a + 1];
   
//   printf("%d %d = %d : %d [%d %d %d]\n", a, b, max(sta[d][a], sta[d][b - (1<<d) + 1]) , min(sti[d][a], sti[d][b - (1<<d) + 1]), d, a, b-(1<<d)+1);
   return max(sta[d][a], sta[d][b - (1<<d) + 1]) - 
          min(sti[d][a], sti[d][b - (1<<d) + 1]);
}

inline LL pouw(LL a, int b){
   LL ret = 1;
   LL v = a % MOD;
   while (b){
      if (b & 1){
         ret = (ret * v) % MOD;
      }
      v = (v * v) % MOD;
      
      b >>= 1;
   }   
   return ret;
}

int main(){
   RESET(lg,-1);
   FOR(i,0,17){
      lg[1<<i] = i;
   }	
   lg[0] = 0;
   REP(i,MAXN){
      if (lg[i] == -1){
         lg[i] = lg[i-1];
      }
   }
   
   RESET(sta,-1);
   RESET(sti,-1);
   
   scanf("%d", &N);
   REP(i,N){
      scanf("%d", &ar[i]);
   
      sta[0][i] = ar[i];
      sti[0][i] = ar[i];
   }
   
   FOR(i,1,17){
      int p = 0;
      int b = 1<<(i-1);
      while (sta[i-1][p+b] != -1){
         sta[i][p] = max(sta[i-1][p], sta[i-1][p+b]);
         sti[i][p] = min(sti[i-1][p], sti[i-1][p+b]);
         
//         printf("%d %d = %d %d\n",i,p, sta[i][p], sti[i][p]); 
         
         p++;
      }
   }
   
   LL ans = 1;
   REP(i,N){
      int p = i+1;
      
      while (p < N){
         int ki = p;
         int ka = N-1;
         int las = p;
         
         int sampel = query(i,p);
         
         while (ki <= ka){
            int tgh = (ki + ka) >> 1;
            
//            printf("%d ~ %d = %d\n", i, tgh, query(i,tgh));
            int h = query(i,tgh);
            if (h == sampel){
               las = tgh;
               ki = tgh + 1;
            }else{
               ka = tgh - 1;
            }
         }
         
//         printf("%d %d %d +%d\n", i, p, las, query(i,las)); 
         ans = (ans * pouw(sampel, las - p + 1)) % MOD;
         p = las+1;
      }
   }
   
   printf("%lld\n", ans);
		
	return 0;
}