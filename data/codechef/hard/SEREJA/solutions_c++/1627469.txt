#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<deque>
#include<iostream>
#include<string.h>
#include<math.h>
#include<set>
#include<map>
#include<vector>
#include<algorithm>
#include<bitset>
#include<stack>
#include<queue>
#include<list>
#define MODM 1000000007
#define MAXM 2147483647
#define mp make_pair
#define ff first
#define ss second
#define Pi 3.14159265358979323846264
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define Sort(x) sort(x.begin(),x.end())
#define P pair<int,int>
#define S(x) scanf("%d",&x);
using namespace std;
typedef long long int lli;
typedef unsigned long long int llu;

int scan()
{
 int t=0,m=1;char c;c=getchar();while((c<'0' || c>'9') and c!='-') c=getchar();if(c=='-'){c=getchar();m=-1;}
 while(c>='0' && c<='9'){t=(t<<3)+(t<<1)+c-'0';c=getchar();}
return(t*m);
}
lli prod[100000+5],ans=1;
lli big[100000+5],small[100000+5],a[100000+5];
int main()
{
	int n,ind,k;
	prod[0]=1;
	S(n);
	for(int i=0;i<n;i++)
	scanf("%lld",&a[i]);
	
	if(a[0]>=a[1])
	big[1]=0;
	else big[1]=1;
	
	small[1]=(a[0]<=a[1])?0:1;
	ind=1;
	for(int i=1;i<=ind;i++)
	prod[i]=(prod[i-1]*(a[big[i]]-a[small[i]]))%MODM;
	ans=prod[1];
	for(int i=2;i<n;i++)
	{	
		k=ind;
		while(k>0 and a[i]<a[small[k]])
		{
			small[k]=i;
			k--;
		}
		while(k>0 and a[i]>a[big[k]])
		{
			big[k]=i;
			k--;
		}
		ind++;
		small[ind]=(a[ind-1]<=a[ind])?ind-1:ind;
		big[ind]=(a[ind-1]>=a[ind])?ind-1:ind;
		
		for(int j=k+1;j<=ind;j++)
		prod[j]=(prod[j-1]*(a[big[j]]-a[small[j]]))%MODM;
		ans=(ans*prod[ind])%MODM;
	}
	printf("%lld\n",ans);
	return(0);
}
		
