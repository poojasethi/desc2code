#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <cmath>
#include <stdio.h>
#include <list>
#include <vector>
#define get getchar_unlocked
#define mod 1000000007
#define ll long long int

using namespace std;
 
 
inline long long int inp()
{
    long long int n=0,s=1;
    char p=get();
    if(p=='-')  s=-1;
    while((p<'0'||p>'9')&&p!=EOF&&p!='-') p=get();
    if(p=='-') s=-1,p=get();
    while(p>='0'&&p<='9')
    {
        n = (n<< 3) + (n<< 1) + (p - '0');
        p=get();
    }
    return n*s;
}


struct seg{ll first;
            ll second;
              }segment[500010];
 
ll a[100010];
seg yo[100010];


void build(int node,int l,int r)
{
    
    
    if(l==r)
    {segment[node].first=l;segment[node].second=l;return;}
    
    int mid=(l+r)>>1;
    build((node<<1),l,mid);
    build((node<<1)+1,mid+1,r);

    if(a[segment[node<<1].first]>=a[segment[(node<<1)+1].first])
    segment[node].first=segment[node<<1].first;
    else
    segment[node].first=segment[(node<<1)+1].first;
    
    if(a[segment[node<<1].second]<=a[segment[(node<<1)+1].second])
    segment[node].second=segment[node<<1].second;
    else
    segment[node].second=segment[(node<<1)+1].second;
   
    
    
    }
    
seg query(int node,int l,int r,int i,int j)
{
   seg ans;
    
    if(i>r || j<l)
    {ans.first=-1;return ans;}
    
    if(l>=i && r<=j)
    {ans.first=segment[node].first;ans.second=segment[node].second;
      return ans;}
    
    
    
    int mid=(l+r)>>1;
   seg p= query((node<<1),l,mid,i,j);
   seg q=query((node<<1)+1,mid+1,r,i,j);
   
   if(p.first==-1)return q;
   else if(q.first==-1)return p;
   
   else
   {
        if(a[p.first]>=a[q.first])
          ans.first=p.first;
        else
          ans.first=q.first;
    
        if(a[p.second]<=a[q.second])
           ans.second=p.second;
         else
             ans.second=q.second;
             
        return ans;
    
       }
  
    
    }
    
ll exp(ll base,ll power)
{
    ll ans=1;ll sum=base;
    while(power>0)
    {
        if(power%2==1)
          ans=(ans*sum)%mod;
        
        sum=(sum*sum)%mod;
        power>>=1;
        
        }
    return ans%mod;
    
    }

int main()
{
    
   //  freopen("C:\\Users\\jack\\Desktop\\in.txt","r",stdin);
   // freopen("C:\\Users\\jack\\Desktop\\out.txt","w",stdout);
    int test,n;
     n=inp();
    bool flag=false;
    
     for(int i=0;i<n;i++)
     {a[i]=inp();yo[i].first=-1;yo[i].second=-1;}
     ll product=1;
    seg ans;
    ll next,idx,temp;
     build(1,0,n-1);
     
      for(int i=0;i<n;i++)
     { 
         idx=n-1;
          while(1)
           {
              if(i==idx)
              break;
               
              if(yo[idx].first>=i && yo[idx].second>=i)
                ans=yo[idx];
              
              else
              
              ans= query(1,0,n-1,i,idx);
                  
              next =max(ans.first,ans.second);
              
                temp=(a[ans.first]-a[ans.second]);
                
                yo[idx]=ans;
              
                
                temp=exp(temp,idx-next+1);
              
                   
                product=(product*temp)%mod;
               
                idx=next-1;
                
                if(product==0){flag=true;break;}
                
               
            }    
 
      if(flag==true)break;
      }
      
      printf("%lld",product);    
              
    }
