#include <iostream>
#include <cstdio>
#define MOD 1000000007
using namespace::std;

void buildRmq(int *rmq, int n, int *A, int N)
{
	int i,j,wid;
	for(i=0;i<N;++i)
		rmq[n*i] = i;
	//cout << n << " -> n " << N << " <- N " <<  endl;	
	for(j=1;(1<<j) <= N;++j)
	{
		for(i=0;i+(1<<(j)) <= N;++i)	
		{
			//cout << n*i+j-1 << " " << n*(i+(1<<(j-1)))+j-1 <<" * " << endl;
			if(A[rmq[n*i+j-1]] < A[rmq[n*(i+(1<<(j-1)))+j-1]])
				rmq[n*i+j] = rmq[n*i+j-1];
			else
				rmq[n*i+j] = rmq[n*(i+(1<<(j-1)))+j-1];  
			//cout << rmq[n*i+j] << " <- " << i << " " << j << " " << n*i+j << endl;
		}
	}
}

long long powerMod(long long a, long long b, long long mod)
{
	long long res=1, pow=a;
	while(b)
	{
		if(b&1)
			res = (res * pow)%mod;
		pow = (pow * pow) %mod;
		b >>= 1;
	}
	return res;
} 
int queryRmq(int s, int e, int *rmq, int *A, int n, int N)
{
	if(s==e)
		return s;
	int dep, wid = e-s+1;
	for(dep=0;1<<(dep+1) < wid; ++dep);
	if(A[rmq[n*s+dep]] < A[rmq[n*(e-(1<<dep)+1)+dep]])
		return rmq[n*s+dep];
	return rmq[n*(e-(1<<dep)+1)+dep];
}

long long Result = 1;
int minrmq[2000001], A[100001],maxrmq[2000001], B[100001], S, E,len,N;

void evaluate(int i, int j)
{
	if(i>=j)
		return;
	int maxIdx = queryRmq(i,j,maxrmq,B,len,N), minI, maxI, minIdx;
	evaluate(i,maxIdx-1);
	evaluate(maxIdx+1,j);
	while(j>i)
	{
		minIdx = queryRmq(i,j,minrmq,A,len,N);
		minI = min(minIdx, maxIdx);
		maxI = max(maxIdx, minIdx);
		Result = (Result * 
			powerMod(A[maxIdx] - A[minIdx], ((long long)(minI-i+1))*(j-maxI+1), MOD)) % MOD;
		
		if(minIdx > maxIdx)
			j = minIdx-1;
		else
			i = minIdx + 1;
	}
}
	
int main()
{
	//clock_t start,end;
	//start = clock();
	//cout << "Hello";	
	//memset(minrmq, 0, sizeof(minrmq));
	//memset(maxrmq, 0, sizeof(maxrmq));
	//memset(A,0,sizeof(A));
	
	int n;
	scanf("%d", &n);
	for(int i=0;i<n;++i)
	{
		scanf("%d", &A[i]);
		B[i] = -A[i];
	}
	for(len=0;1<<len < n; ++len);
	//++len;
	//cout << "\n"<<len << endl;
	buildRmq(minrmq, len, A, n);
	buildRmq(maxrmq, len, B, n);
	
	S = 0, E = n-1;
	N = n;
	evaluate(0,n-1);
	printf("%lld\n", Result);
	//end = clock();
	//cout << "\n"<< end-start << endl;

	return 0;	
}
