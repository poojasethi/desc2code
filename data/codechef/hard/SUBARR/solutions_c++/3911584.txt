#include <iostream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <vector>
#include <string>
#include <deque>
#include <bitset>
#include <algorithm>
#include <utility>
#include <functional>
#include <limits>
#include <numeric>
#include <complex>
#include <cassert>
#include <cmath>
#include <memory.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <climits>

using namespace std;

template<typename X> inline X abs(const X& a) { return (a < 0 ? -a : a); }
template<typename X> inline X sqr(const X& a) { return (a * a); }
template<typename X> inline void print(const X& a,int N) {cout<<endl;for(int i=0;i<N;i++)cout<<a[i]<<" ";cout<<endl;}
typedef long long ll;
typedef long double ld;
typedef pair<int,int> pp;
typedef pair<ld, ld> ppld;
typedef unsigned long long ull;

#define FOR(i, n) for(int i = 0; i < int(n); i++)
#define FORD(i, n) for(int i = int(n-1); i >= 0; i--)
#define FORAB(i, a, b) for(int i = int(a); i < int(b); i++)
#define foreach(it, a) for(__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define pb push_back
#define mp make_pair
#define mset(a, val) memset(a, val, sizeof (a))
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define getcx getchar_unlocked
#define getmid(a,b) (a+(b-a)/2)
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)

const int INF = int(1e9);
const ll INF64 = ll(INF) * ll(INF);
const ld EPS = 1e-9;
const ld PI = ld(3.1415926535897932384626433832795);

template<typename X> inline void inp(X &n ) {
     int ch=getcx();int sign=1;n=0;
     while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
     while(  ch >= '0' && ch <= '9' ) n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
     n=n*sign;
}
template<typename X> inline void out(X a) {
    char snum[20]; int i=0;
    do {snum[i++]=a%10+48; a=a/10; }while(a!=0);
    i=i-1;
    while(i>=0) putchar_unlocked(snum[i--]);
    putchar_unlocked('\n');
}

ll arr[1000001] = {0};
ll sum[1000001] = {0};
pair<ll,ll> p[1000001];

ll* create(int n){
    ll* bit = new ll[n+1]();
    return bit;
}
int read(ll* bit, int n, int idx){
    // printf("read(bit,%d,%d) = ",n,idx);
    int answer = 0;
    while(idx>0){
        answer += bit[idx];
        idx -= (idx & -idx);
    }
    // printf("%d\n",answer);
    return answer;
}
int update(ll *bit, int n, int idx, int diff){
    // printf("update(bit,%d,%d,%d)\n",n,idx,diff);
    while(idx <= n){
        bit[idx] += diff;
        idx += (idx & -idx);
    }
    return 0;
}
int main(){
    int N,K,minval=INT_MAX;
    map<int,int> m;
    ll answer = 0;
    inp(N); inp(K);

    ll *bit = create(N);

    arr[0] = 0;
    sum[0] = 0;
    for(int i=1;i<=N;i++){
        inp(arr[i]);
        arr[i] -= K;
        sum[i] = sum[i-1] + arr[i];
        // printf("[%d %d] ",sum[i],i);
        p[i] = mp(sum[i],i);
    }
    // cout<<endl;
    sort(p+1, p+N+1);

    //DEBUG
    for(int i=1;i<=N;i++){
        m[p[i].second] = i;
        // cout<<"["<<p[i].first<<","<<p[i].second<<"] ";
    }
    // cout<<endl;
    //

    for(int i=1;i<=N;i++){
        // printf("Returned = %d\n", read(bit,N,m[i]));
        // cout<<m[i]<<endl;
        answer += read(bit,N,m[i]) + ((sum[i]>=0)?1:0);
        update(bit,N,m[i],1);
    }
    // cout<<endl;
    out(answer);

    return 0;
}