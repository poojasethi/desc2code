// SUBARR
#include<iostream>
#include<vector>
#include<algorithm>
#include<bits/stdc++.h>
using namespace std;
class BIT{
 int n;
 vector<long long > tree;

 public:
		BIT(int N)
		{
			n=N;
			tree.resize(n+1);
		}

		void increase(int idx,int val=1)
            {

		     while(idx<=n)
		     {
				tree[idx]+=val;
				idx+=(idx&(-idx));
		     }
            }

            long long sum(int idx)
            {
			long long sum=0;
			while(idx>0)
			{
				sum+=tree[idx];
				idx-=(idx&(-idx));
			}
			return sum;
            }

		long long query(int l,int r)
		{
			return sum(r)-sum(l-1);
		}
};
bool compare(const pair<long long ,int >&a,const pair<long long ,int >&b)
{
	return a.first<b.first;
}
int main()
{
 int n;
 long long k;
 cin >> n >> k;
 vector<pair< long long ,int> > arr(n);
 long long x;
 for(int i=0;i<n;i++)
 {
	     cin >> x;
	     x-=k;
	     
	     if(!i)
		arr[i]=make_pair(x,i+1);
		else
		arr[i]=make_pair(arr[i-1].first+x,i+1);
	     
 }
 sort(arr.begin(),arr.end());
 long long count=0;
 BIT bit(arr.size());
 for(int i=0;i<n;i++)
 {
		if(arr[i].first>=0)
		 count++;
		 count+=bit.sum(arr[i].second);
		 bit.increase(arr[i].second);
 }

 cout<<count<<endl;
return 0;
}
