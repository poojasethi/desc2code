/**
* He who forgives and acknowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <stack>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ll> vll;
typedef pair<int,int> ii;
typedef vector<pair<int,int> > vii;

const int MAX = 100005;
const int MOD = 1000000000+7;
const int INF = 1000000000;


#define MAX 1000005
long long bit[MAX];

long long query(int indx)
{
    long long sum = 0;
    while (indx) {
        sum += bit[indx];
        indx -= (indx & -indx);
    }
    return sum;
}

void update(int indx, int x)
{
    while (indx < MAX) {
        bit[indx] += x;
        indx += (indx & -indx);
    }
}

int main() {
    int n;
    ll k;
    scanf("%d%lld", &n, &k);
    vector<ll> a(n+1);
    vector<ll> prefix(n+1);
    for (int i = 1; i <= n; i++) {
        scanf("%lld", &a[i]);
        prefix[i]=prefix[i-1]+a[i];
    }

    //track(prefix);

    map<ll, int> h;
    h[0]=0;
    for (int i = 1; i <= n; i++) {
        h[prefix[i]-k*i]=0;
    }

    int cnt = 1;
    for (map<ll,int>::iterator i = h.begin(); i != h.end(); i++) {
        i->second = cnt++;
    }

    /*for (map<ll,int>::iterator i = h.begin(); i != h.end(); i++) {
        cerr << i->first << " " << i->second << endl;
    }*/

    ll count = 0;
    update(h[0], +1);
    for (int i = 1; i <= n; i++) {
        ll v = h[prefix[i]-k*i];
        int cnt = query(v);
        count += cnt;
        update(v, +1);
    }

    printf("%lld", count);
}
