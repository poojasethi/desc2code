//---------------------------JUGNU: LET YOUR LIGHT SHINE---------------------------//
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define pf push_front
#define sz size
#define mk make_pair
#define ln length
#define vt(a) vector <ll> a
#define st(a) set <ll> a
#define sti(a) set <ll>::iterator a
#define fr(i,a,b) for(i=a;i<b;i++)
#define fre(i,a,b) for(i=a;i<=b;i++)
#define frr(i,a,b) for(i=a;i>=b;i--)
#define sc(a) scanf("%lld",&a)
#define sm(a,b) scanf("%lld%lld", &a, &b)
#define pr(a) printf("%lld\n", a)
#define pm(a,b) printf("%lld %lld\n", a, b)
#define cn(a) cin >> a
#define ct(a) cout << a << endl
#define isset(x,i) ((x>>i)&1)
#define MAXN 1000005
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
using namespace std;
ll cumulative[MAXN];
ll BIT[MAXN];
vector<ll> Coordinate_compress;
void updateBIT(ll idx, ll val)
{
	while(idx<=MAXN)
	{
		BIT[idx] += val;
		idx += (idx & -idx);
	}
	return;
}
ll getSUM(ll idx)
{
	ll sum = 0;
	while(idx>0)
	{
		sum += BIT[idx];
		idx -= (idx & -idx);
	}
	return sum;
}
int main()
{
	ll i, j, t, n, m, k, l, r, mini,cnt, maxi, temp, flag, result;
	ll ans = 0LL;
	sm(n, k);
	fre(i, 1, n)
	{
		sc(m);
		cumulative[i] = cumulative[i-1] + (ll)(m - k);
		Coordinate_compress.pb(cumulative[i]);
	}
	sort(Coordinate_compress.begin(), Coordinate_compress.end());
	fre(i, 1, n)
	{
		if(cumulative[i]>=0)
			ans++;
		temp = lower_bound(Coordinate_compress.begin(), Coordinate_compress.end(), cumulative[i]) - Coordinate_compress.begin();
		ans = ans + (ll)getSUM(temp+1LL);
		updateBIT(temp+1, 1LL);
	}
	pr(ans);
return 0;
}
