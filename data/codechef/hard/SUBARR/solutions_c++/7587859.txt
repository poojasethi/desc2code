#include<iostream>
#include<algorithm>
using namespace std;
#define ll long long
#define MAX  1000005

ll pfsum[MAX], pfsumOriginalIndex[MAX], fw[MAX];
pair<ll, ll> sortedpfSumWithIndexes[MAX];


void print(ll fw[], int n)
{
    for(int i=0;i<=n;i++)
    {
        cout << i << ":"<< fw[i] <<" ";
    }
    cout << endl;
}

void print(pair<ll,ll> fw[], int n)
{
    for(int i=0;i<=n;i++)
    {
        cout << i << ":"<< fw[i].second+1 <<" ";
    }
    cout << endl;
}

ll query(ll idx)
{
    ll sum = 0;
    while(idx>0)
    {
        sum += fw[idx];
        idx -= idx & -idx;
    }
    return sum;
}

void insert(ll idx, ll x)
{
    while(idx<MAX)
    {
        fw[idx] += 1;
        idx += idx & -idx;
    }
}

int main()
{

    ll n, k;
    cin >> n >> k;

    for(ll i=0;i<n;i++)
        fw[i] = 0;

    cin >> pfsum[0];
    pfsum[0] -=k;
    pfsumOriginalIndex[0] = 0;
    sortedpfSumWithIndexes[0] = make_pair(pfsum[0], 0);
    //cout << pfsum[0];
    for(ll i=1;i<n;i++)
    {
        cin >> pfsum[i];
        pfsum[i] += pfsum[i-1] - k;
  //      cout << ", "<< pfsum[i];
        pfsumOriginalIndex[i] = i;
        sortedpfSumWithIndexes[i] = make_pair(pfsum[i], pfsumOriginalIndex[i]);
    }
//cout << endl;
/*    for(ll i=0;i<n;i++)
        cout << sortedpfSumWithIndexes[i].first << ", ";
    cout << endl;
*/

sort(sortedpfSumWithIndexes, sortedpfSumWithIndexes+n);
//print(sortedpfSumWithIndexes, n+1);
   /* for(ll i=0;i<n;i++)
        cout << sortedpfSumWithIndexes[i].first << ":" << sortedpfSumWithIndexes[i].second << ", ";
    cout << endl;
*/

    ll answer = 0;
    for(int i=0;i<n;i++)
    {
        answer += query( (sortedpfSumWithIndexes[i].second)+1 );
        insert((sortedpfSumWithIndexes[i].second)+1, 1);
        //cout << "\nIteration#"<<i<<endl;
        //print(fw, n+1);

    }
    for(int i=0;i<n;i++)
        if(sortedpfSumWithIndexes[i].first>=0)
            answer++;


    cout << answer;

    return 0;
}
