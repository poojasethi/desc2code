#include <bits/stdc++.h>
#define lli long long
#define MAX 1000005

using namespace std;

lli A[MAX];
int cnt;
int tree[MAX];

// fast input
template<typename T>
inline void fi(T *a)
{
 register char c=0;
 while (c<33) c=getchar_unlocked();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar_unlocked();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}

void update(int idx)
{
    while ( idx <= cnt+1 ) {
        tree[idx] += 1;
        idx += (idx & (-idx));
    }
    return;
}

int query(int idx)
{
    int ans = 0;
    while ( idx > 0 ) {
        ans += tree[idx];
        idx -= (idx & (-idx));
    }
    return ans;
}

int main()
{
    int n;
    lli k,ans=0;
    cnt = 1;

    map <lli, int> mp;
    map <lli, int> :: iterator it;
    fi(&n), fi(&k);
    for ( int i = 2; i <= n+1; i++ ) fi(&A[i]), A[i] += A[i-1];
    for ( int i = 1; i <= n+1; i++ ) {
        A[i] = A[i] -= (long long)i*k;
        mp[A[i]] = 1;
    }
    for ( it = mp.begin(); it != mp.end(); it++ ) it->second = cnt++;
    for ( int i = 1; i <= n+1; i++ ) {
        ans += (long long)query(mp[A[i]]);
        update(mp[A[i]]);
    }
    printf("%lld\n", ans);
    return 0;
}
