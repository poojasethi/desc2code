#include<bits/stdc++.h>
using namespace std;
#define Rep(i,n) for(int i=0;i<(n);i++)
#define For(i,a,b) for(int i=(a);i<=(b);i++)
#define ForD(i,a,b) for(auto i=(b);i>=a;i--)
#define DEBUG(x) cout<< #x << ':' << x << endl;
#define DEBUGP(x,y) cout<<#x<<': '<<x<<' '<<#y<<': '<<y<<endl;
#define pi pair<int,int>
#define pll pair<long long int, long long int>
#define mp make_pair
#define pb push_back
#define vi vector<int>
#define vl vector<long long int>
#define ll long long int
#define ull unsigned long long int
#define vp vector<pi>
#define matrix vector<vl>
#define inp(a) cin>>(a)
#define inpp(a,b) cin>>(a)>>(b)
#define op(ans) cout<<(ans)<<"\n"
#define max(a,b) (a)>(b)?(a):(b)
#define min(a,b) (a)<(b)?(a):(b)
#define abs(a)   (a)<0 ? -(a) : (a)
#define MOD 1e9 + 7
#define MAXN 65536
#define MAXLG 17
#define INF 1e18
#define Char_To_Ind(a,b) (int)(a) - (int)(b)
#define sll(a) scanf("%lld",&a)
#define sllp(a,b) scanf("%lld %lld",&a,&b)
template<class T> void DEBUGA(T arr[] , T n){ Rep(i,n) cout<<arr[i]<<" "; cout<<"\n";}
//<---- Solution ---->
const ll size = 100001;
struct node{
	ll high,low;
}seg[4*size];
int lazy[4*size];
void merge(ll ind){
	seg[ind].high = seg[2*ind].high + seg[2*ind+1].high;
	seg[ind].low = seg[2*ind].low + seg[2*ind+1].low;
}
void build(ll ind,ll b,ll e){
//	DEBUG(b);
//	DEBUG(e);
	if(b>e)
		return;
	if(b==e){
		seg[ind].high = 1,seg[ind].low = 0;
		return;
	}
	ll mid = b+ (e-b)/2;
	build(2*ind,b,mid);
	build(2*ind+1,mid+1,e);
	merge(ind);
}
void update(ll ind,ll b,ll e,ll qs,ll qe){
	if(lazy[ind]){
		swap(seg[ind].high,seg[ind].low);
		if(b!=e){
			lazy[2*ind]=!lazy[2*ind];
			lazy[2*ind+1]=!lazy[2*ind+1];
		}
		lazy[ind]=0;
	}
	if(b>qe || e<qs || b>e)
		return;
	if(qs<=b && e<=qe){
		swap(seg[ind].high,seg[ind].low);
		if(b!=e){
			lazy[2*ind]=!lazy[2*ind];
			lazy[2*ind+1]=!lazy[2*ind+1];
		}
		return;
	}
	ll mid = (b+e)/2;
	update(2*ind,b,mid,qs,qe);
	update(2*ind+1,mid+1,e,qs,qe);
	merge(ind);
}
ll query(ll ind,ll b,ll e,ll qs,ll qe){
	if(lazy[ind]){
		swap(seg[ind].high,seg[ind].low);
		if(b!=e){
			lazy[2*ind]=!lazy[2*ind];
			lazy[2*ind+1]=!lazy[2*ind+1];
		}
		lazy[ind]=0;
	}
	if(b>qe || e<qs || b>e)
		return 0;
	if(qs<=b && e<=qe){
		return seg[ind].low;
	}
	ll mid = (b+e)/2;
	return query(2*ind,b,mid,qs,qe) + query(2*ind+1,mid+1,e,qs,qe);
}
void solve(){
	ll n,q;
	scanf("%lld %lld",&n,&q);
//	DEBUG(n);
//	DEBUG(q);
	memset(seg,0,sizeof(seg));
	build(1,0,n-1);
	memset(lazy,0,sizeof(lazy));
	while(q--){
		int c;
		ll l,r;
		scanf("%d %lld %lld",&c,&l,&r);
//		Rep(i,4*n){
//			cout<<seg[i].high<<" "<<seg[i].low<<"\n";
//		}
		if(c){
			printf("%lld\n",query(1,0,n-1,l,r));
		}
		else{
			update(1,0,n-1,l,r);
		}
	}
}

int main(){
	solve();
	return 0;
}
