#include<iostream>
#include<cstdio>
#include<vector>
#include<map>
#include<set>
#include<algorithm>
#include<list>
#include<cstring>
using namespace std;
#define ll long long
#define vi vector<int>
#define vii vector<vi >
#define pp pair<int,int>
#define pb push_back
#define mp make_pair
#define ppl pair<ll,ll>
#define vl vector<ll>
#define vll vector<vl >
#define llu unsigned ll
#define all(c) c.begin(),c.end()
#define mod 1000000007
ll power(ll a,ll b)
{
	if(!b)
		return 1;
	if(b==1)
		return a;
	ll temp=power(a,b/2);
	temp=(temp*temp);
	if(b&1)
		temp=(temp*a);
	return temp;
}
void update(int node,int a,int b,int l,int r,vi& tree,vi& lazy)
{
	if(lazy[node]!=0)
	{
		tree[node]=(b-a+1)-tree[node];
		if(a!=b)
		{
			lazy[node*2]^=1;
			lazy[node*2+1]^=1;
		}
		lazy[node]=0;
	}
	if((a>b)||(a>r)||(l>b))
		return;
	if((a>=l)&&(b<=r))
	{
		tree[node]=(b-a+1)-tree[node];
		if(a!=b)
		{
			lazy[node*2]^=1;
			lazy[node*2+1]^=1;
		}
		return;
	}
	int mid=(a+b)/2;
	update(2*node,a,mid,l,r,tree,lazy);
	update(2*node+1,mid+1,b,l,r,tree,lazy);
	tree[node]=tree[node*2]+tree[node*2+1];
}
int query(int node,int a,int b,int l,int r,vi& tree,vi& lazy)
{
	if(lazy[node]!=0)
	{
		tree[node]=(b-a+1)-tree[node];
		if(a!=b)
		{
			lazy[node*2]^=1;
			lazy[node*2+1]^=1;
		}
		lazy[node]=0;
	}
	if((a>b)||(a>r)||(l>b))
		return 0;
	if((a>=l)&&(b<=r))
		return tree[node];
	int mid=(a+b)/2;
	int q1=query(node*2,a,mid,l,r,tree,lazy);
	int q2=query(node*2+1,mid+1,b,l,r,tree,lazy);
	return(q1+q2);
}
int main()
{
	int i,n,q,a,b,op;
	scanf("%d%d",&n,&q);
	vi tree(4*n),lazy(4*n);
	while(q--)
	{
		scanf("%d%d%d",&op,&a,&b);
		if(!op)
		{
			update(1,0,n-1,a,b,tree,lazy);
		}
		else
		{
			printf("%d\n",query(1,0,n-1,a,b,tree,lazy));
		}
	}
	return 0;
}
