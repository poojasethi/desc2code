#include<bits/stdc++.h>
using namespace std ;
int n , q ;
struct seg {
    int total , zero ;
}tree[400002];
int lazy[400002] ;
void build_tree ( int pos , int l , int r ) {
    if ( l == r ) {
        tree[pos].total = 0 ;
        tree[pos].zero = 1 ;
        return ;
    }
    int mid = (l+r)/2 ;
    build_tree ( 2*pos , l , mid ) ;
    build_tree ( 2*pos+1 , mid+1 , r ) ;
    tree[pos].total = tree[2*pos].total + tree[2*pos+1].total ;
    tree[pos].zero = tree[2*pos].zero + tree[2*pos+1].zero ;
}
void update ( int pos , int l , int r , int x , int y ) {
    if ( lazy[pos] != 0 ) {
        if ( lazy[pos]%2 != 0 ) {
            int temp = tree[pos].total ;
            tree[pos].total = tree[pos].zero ;
            tree[pos].zero = temp ;
        }
        if ( l != r ) {
            lazy[2*pos] += lazy[pos] ;
            lazy[2*pos+1] += lazy[pos] ;
        }
        lazy[pos] = 0 ;
    }
    if ( x > r || y < l )
        return ;
    if ( l >= x && r <= y ) {
        int temp = tree[pos].total ;
        tree[pos].total = tree[pos].zero ;
        tree[pos].zero = temp ;
        if ( l != r )
        {
            lazy[2*pos] += 1 ;
            lazy[2*pos+1] += 1 ;
        }
        return ;
    }
    int mid = (l+r)/2 ;
    update ( 2*pos , l , mid , x , y ) ;
    update ( 2*pos+1 , mid+1 , r , x , y ) ;
    tree[pos].total = tree[2*pos].total + tree[2*pos+1].total ;
    tree[pos].zero = tree[2*pos].zero + tree[2*pos+1].zero ;
}

int query ( int pos , int l , int r , int x , int y ) {
    if ( lazy[pos] != 0 ) {
        if ( lazy[pos]%2 != 0 ) {
            int temp = tree[pos].total ;
            tree[pos].total = tree[pos].zero ;
            tree[pos].zero = temp ;
        }
        if ( l != r ) {
            lazy[2*pos] += lazy[pos] ;
            lazy[2*pos+1] += lazy[pos] ;
        }
        lazy[pos] = 0 ;
    }
    if ( x > r || y < l )
        return 0 ;
    if ( l >= x && r <= y ) {
        return tree[pos].total ;
    }
    int mid = ( l+r )/2 ;
    return query ( 2*pos , l , mid , x , y ) + query ( 2*pos+1 , mid+1 , r , x , y ) ;
}
int main () {
    scanf ( "%d %d" , &n , &q ) ;
    build_tree ( 1 , 0 , n-1 ) ;
    while ( q-- ) {
        int type , x , y ;
        scanf ( "%d %d %d" , &type , &x , &y ) ;
        if ( type == 0 ) {
            update ( 1 , 0 , n-1 , x , y ) ;
        }
        else if ( type == 1 ) {
            printf ( "%d\n" , query ( 1 , 0, n-1 , x , y ) ) ;
        }
    }
    return 0 ;
}
