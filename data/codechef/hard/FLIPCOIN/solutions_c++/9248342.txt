#include<bits/stdc++.h>
using namespace std;
int tree[1000000]={0},lazy[1000000]={0};

void update(int low,int high,int l,int r,int pos)
{
	if(lazy[pos]!=0)
	{
		tree[pos]=high-low+1-tree[pos];
		if(low!=high)
		{
			lazy[2*pos+1]+=1;
			lazy[2*pos+1]%=2;
			lazy[2*pos+2]+=1;
			lazy[2*pos+2]%=2;
		}
		lazy[pos]=0;
	}
	
	if(high<l||low>r)
	return;
	
	if(low>=l && high<=r)
	{
		tree[pos]=high-low+1-tree[pos];
		if(low!=high)
		{
			lazy[2*pos+1]+=1;
			lazy[2*pos+1]%=2;
			lazy[2*pos+2]+=1;
			lazy[2*pos+2]%=2;
		}
		return ;
	}
	
	int mid=(low+high)/2;
	update(low,mid,l,r,2*pos+1);
	update(mid+1,high,l,r,2*pos+2);
	
	tree[pos]=tree[2*pos+1]+tree[2*pos+2];
}

int query(int low,int high,int l,int r,int pos)
{
	if(lazy[pos]!=0)
	{
		tree[pos]=high-low+1-tree[pos];
		if(low!=high)
		{
			lazy[2*pos+1]+=1;
			lazy[2*pos+1]%=2;
			lazy[2*pos+2]+=1;
			lazy[2*pos+2]%=2;
		}
		lazy[pos]=0;
	}
	
	if(high<l||low>r)
	return 0;
	
	if(low>=l && high<=r)
	{
		return tree[pos];
	}
	
	int mid=(low+high)/2;
	return query(low,mid,l,r,2*pos+1)+query(mid+1,high,l,r,2*pos+2);
	
	//tree[pos]=tree[2*pos+1]+tree[2*pos+2]
	}


int main()
{
	int n,q;
	scanf("%d",&n);
	scanf("%d",&q);
	while(q--)
	{
		int flag,l,r;
		scanf("%d",&flag);
		scanf("%d",&l);
		scanf("%d",&r);
		if(flag==0)
		{
			update(0,n-1,l,r,0);;
		}
		else
		{
			printf("%d\n",query(0,n-1,l,r,0));
		}
	}
	
return 0;	
}
