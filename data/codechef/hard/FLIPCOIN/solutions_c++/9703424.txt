#include <map>
#include <set>
#include <queue>
#include <vector>
#include <cstdio>
#include <cmath>
#include <bitset>
#include <climits>
#include <cstring>
#include <utility>
#include <iterator>
#include <iostream>
#include <algorithm>
using namespace std;
#define MX 2000100
#define INF (1<<20)
#define ff first
#define ss second
#define LL long long
#define gc getchar_unlocked
#define MOD 1000000007
#define pii pair<int,int>
#define pi2 pair<pii,int>
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
int tree[100004*4],lazy[1000004*4];
void rl(int &x)
{
    register int c = gc();
    x = 0;
    int neg = 0;
    for(;((c<48 || c>57) && c != '-');c = gc());
    if(c=='-') {neg=1;c=gc();}
    for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
    if(neg) x=-x;
}
void update_tree(int node,int st,int end,int l,int r)
{
	if(lazy[node])
	{
		tree[node]=(end-st+1)-tree[node];
		if(st!=end)
		{
			lazy[node<<1]=!lazy[node<<1];
			lazy[(node<<1)+1]=!lazy[(node<<1)+1];
		}
		lazy[node]=0;
	}
	if(st>end or l>end or r<st)return;
	if(st>=l and end<=r)
	{
		tree[node]=(end-st+1)-tree[node];
		if(st!=end)
		{
			lazy[node<<1]=!lazy[node<<1];
			lazy[(node<<1)+1]=!lazy[(node<<1)+1];
		}
		return;
	}
	int mid=(st+end)>>1;
	int left=node<<1,right=left+1;
	update_tree(left,st,mid,l,r);
	update_tree(right,mid+1,end,l,r);
	tree[node]=tree[left]+tree[right];
}
int query_tree(int node,int st,int end,int l,int r)
{
	if(st>end or l>end or r<st)return 0;
	if(lazy[node])
	{
		tree[node]=(end-st+1)-tree[node];
		if(st!=end)
		{
			lazy[node<<1]=!lazy[node<<1];
			lazy[(node<<1)+1]=!lazy[(node<<1)+1];
		}
		lazy[node]=0;
	}
	if(st>=l and end<=r)
	{
		return tree[node];
	}
	int mid=(st+end)>>1;
	int left=node<<1,right=left+1;
	return query_tree(left,st,mid,l,r)+query_tree(right,mid+1,end,l,r);
	
}
int main()
{
	int t;
	//cin>>t;
	//while(t--)
	{
	 	int n,q;
	 	rl(n),rl(q);
		memset(tree,0,sizeof tree);
		memset(lazy,0,sizeof lazy);
		while(q--)
		{
			int f,l,r;
			rl(f),rl(l),rl(r);
			if(f)
			{
				cout<<query_tree(1,1,n,l+1,r+1)<<endl;
			}
			else
			{
				update_tree(1,1,n,l+1,r+1);
				//for(int i=1;i<=3*n;i++)
				//	cout<<tree[i]<<" ";
				//cout<<endl;
			}
		}	

	}
}
