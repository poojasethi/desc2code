#include<iostream>
//Segment tree
using namespace std;
int n,q,seg[400000]={0},lazy[400000]={0};
int right(int node){
    return (2*node) + 2;
}
int left(int node){
    return (2*node) + 1;
}
void flip(int node,int a,int b,int l,int r){
    if(lazy[node]){
        seg[node]=r-l+1-seg[node];
        if(l!=r){
            lazy[left(node)]=!lazy[left(node)];
            lazy[right(node)]=!lazy[right(node)];
        }
        lazy[node]=!lazy[node];
    }
    if(b<l || a>r){
        return;
    }
    if(a<=l && b>=r){
        lazy[node]=!lazy[node];
        if(lazy[node]){
        seg[node]=r-l+1-seg[node];
        if(l!=r){
            lazy[left(node)]=!lazy[left(node)];
            lazy[right(node)]=!lazy[right(node)];
        }
        lazy[node]=!lazy[node];
        }
        return;
    }
    int mid=l+((r-l)/2);
    int lc=left(node);
    int rc=right(node);
    flip(lc,a,b,l,mid);
    flip(rc,a,b,mid+1,r);
    seg[node]=seg[lc]+seg[rc];
}

int query(int node,int a,int b,int  l,int r){
    if(lazy[node]){
        seg[node]=r-l+1-seg[node];
        if(l!=r){
            lazy[left(node)]=!lazy[left(node)];
            lazy[right(node)]=!lazy[right(node)];
        }
        lazy[node]=!lazy[node];
    }
    if(b<l || a>r){
        return 0;
    }
    if(a<=l && b>=r){
        return seg[node];
    }
    int mid=(l+r)/2;
    int lc=left(node);
    int rc=right(node);
    int ans=query(lc,a,b,l,mid)+query(rc,a,b,mid+1,r);
    return ans;
}

int main(){
    cin>>n>>q;
    bool type;
    int a,b;
    while(q--){
        cin>>type>>a>>b;
        //cout<<type<<" "<<a<<" "<<b<<endl;
        if(type){
            cout<<query(0,a,b,0,n-1)<<endl;
        }else{
            flip(0,a,b,0,n-1);
        }
    }
    return 0;
}
