#include <bits/stdc++.h>
using namespace std;
 
int n, q, d, A, B;
int tree[400007], lazy[400007];
static struct IO {
    char tmp[1 << 10];
 
	// fast input routines
	char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }
 
	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
	inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }
 
	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }
 
	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
 
#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
	// fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cin __io__
} __io__;
void update(int node, int a, int b, int i, int j)
{
	if(lazy[node] != 0)
	{
		tree[node] = (b - a + 1) - tree[node];
 
		if(a != b)
		{
			lazy[2*node] = 1 - lazy[2*node];
			lazy[2*node + 1] = 1 - lazy[2*node + 1];
		}
 
		lazy[node] = 0;
	}
 
	if(a > b || a > j || b < i)
		return ;
 
	if(a >= i && b <= j)
	{
		tree[node] = (b - a + 1) - tree[node];
 
		if(a != b)
		{
			lazy[2*node] = 1 - lazy[2*node];
			lazy[2*node + 1] = 1 - lazy[2*node + 1];
		}
 
		return ;
	}
 
	int mid = (a + b)/2;
 
	update(2*node, a, mid, i, j);
	update(2*node + 1, mid + 1, b, i, j);
 
	tree[node] = tree[2*node] + tree[2*node + 1];
}
 
int query(int node, int a, int b, int i, int j)
{
	if(a > b || a > j || b < i)
		return 0;
 
	if(lazy[node] != 0)
	{
		tree[node] = (b - a + 1) - tree[node];
 
		if(a != b)
		{
			lazy[2*node] = 1 - lazy[2*node];
			lazy[2*node + 1] = 1 - lazy[2*node + 1];
		}
 
		lazy[node] = 0;
	}
 
	if(a >= i && b <= j)
		return tree[node];
 
	int mid = (a + b)/2;
	
	int q1 = query(2*node, a, mid, i, j);
	int q2 = query(2*node + 1, mid + 1, b, i, j);
 
	return (q1 + q2);
}
 
int main()
{
	scanf("%d%d",&n,&q);
 
	memset(tree, 0, sizeof(tree));
	memset(lazy, 0, sizeof(lazy));
 
	while(q--)
	{
		scanf("%d%d%d",&d,&A,&B);
 
		if(d == 0)
			update(1, 0, n-1, A, B);
		else if(d == 1)
			printf("%d\n",query(1, 0, n-1, A, B));
	}
	return 0;
} 