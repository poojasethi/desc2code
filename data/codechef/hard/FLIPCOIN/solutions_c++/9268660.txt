#include<bits/stdc++.h>
using namespace std;

struct nodes
{
    int head;
    int tail;
}tree[400005];

int lazy[400005];
void build(int node,int l,int r)
{
    if(l==r)
    {
        tree[node].head=0;
        tree[node].tail=1;
        return ;
    }
    build(node*2,l,(l+r)/2);
    build(node*2+1,(l+r)/2+1,r);
    tree[node].head=tree[node*2].head+tree[node*2+1].head;
    tree[node].tail=tree[node*2].tail+tree[node*2+1].tail;
}

void update(int node,int l,int r,int i,int j)
{
    if(lazy[node]!=0)
    {
        int temp;
       temp=tree[node].head;
       tree[node].head=tree[node].tail;
       tree[node].tail=temp;
       //tree[node].head+=lazy[node];
       if(l!=r)
       { if(lazy[node*2]==0)
           lazy[node*2]=1;
          else
            lazy[node*2]=0;
          if(lazy[node*2+1]==0)
           lazy[node*2+1]=1;
          else
            lazy[node*2+1]=0;
       }
       lazy[node]=0;
    }
   if(j<l||i>r) return;
   if(i<=l&&j>=r)
   {
       int temp;
       temp=tree[node].head;
       tree[node].head=tree[node].tail;
       tree[node].tail=temp;
       if(l!=r)
       { if(lazy[node*2]==0)
           lazy[node*2]=1;
          else
            lazy[node*2]=0;
          if(lazy[node*2+1]==0)
           lazy[node*2+1]=1;
          else
            lazy[node*2+1]=0;
       }
       return ;
   }
   update(node*2,l,(l+r)/2,i,j);
   update(node*2+1,(l+r)/2+1,r,i,j);
   tree[node].head=tree[node*2].head+tree[node*2+1].head;
    tree[node].tail=tree[node*2].tail+tree[node*2+1].tail;
}

int query(int node,int l,int r,int i,int j)
{
    if(i>r||j<l) return 0;
    if(lazy[node]!=0)
    {
       int temp;
       temp=tree[node].head;
       tree[node].head=tree[node].tail;
       tree[node].tail=temp;
       if(l!=r)
       { if(lazy[node*2]==0)
           lazy[node*2]=1;
          else
            lazy[node*2]=0;
          if(lazy[node*2+1]==0)
           lazy[node*2+1]=1;
          else
            lazy[node*2+1]=0;
       }
       lazy[node]=0;
    }
    if(i<=l&&j>=r)
        return tree[node].head;
    int q1,q2;
    q1=query(node*2,l,(l+r)/2,i,j);
    q2=query(node*2+1,(l+r)/2+1,r,i,j);
    return q1+q2;
}
int main()
{
    int n,q,i;
    scanf("%d%d",&n,&q);
    build(1,0,n-1);
   // for(i=1;i<=7;i++)
    //    printf("%d %d %d\n",i,tree[i].head,tree[i].tail);
    for(i=0;i<=400003;i++)
        lazy[i]=0;
    int c,x,y;
    while(q--)
    {
        scanf("%d%d%d",&c,&x,&y);
        if(c==0)
        {
            update(1,0,n-1,x,y);
            // for(i=1;i<=7;i++)
            //   printf("%d %d %d\n",i,tree[i].head,tree[i].tail);
        }
        else
            printf("%d\n",query(1,0,n-1,x,y));
    }
    return 0;
}
