#include<stdio.h>
#define max 262144
using namespace std;
int tree[max];
bool lazy[max];
void update(int node,int ss,int se,int qs,int qe)
{
	if(lazy[node])
	{
		tree[node]=(se-ss+1)-tree[node];
		if(ss!=se)
		{
			lazy[node*2]=!lazy[2*node];
			lazy[node*2+1]=!lazy[2*node+1];
		}
		lazy[node]=false;
	}
	if(qe<ss || se<qs || ss>se)return;
	if(qs<=ss && se<=qe)
	{
		tree[node]=(se-ss+1)-tree[node];
		if(ss!=se)
		{
			lazy[2*node]=!lazy[2*node];
			lazy[2*node+1]=!lazy[2*node+1];
		}
		return;
	}
	int mid= ss+(se-ss)/2;

	update(2*node,ss,mid,qs,qe);
	update(2*node+1,mid+1,se,qs,qe);
	tree[node]=tree[2*node]+tree[2*node+1];
	return;
}
int query(int node,int ss,int se, int qs, int qe)
{
	if(qe<ss || se<qs || ss>se)return 0;
	if(lazy[node])
	{
		tree[node]=(se-ss+1)-tree[node];
		if(ss!=se)
		{
			lazy[2*node]=!lazy[2*node];
			lazy[2*node+1]=!lazy[2*node+1];
		}
		lazy[node]=false;
	}
	if(qs<=ss && se<=qe)return tree[node];

	int mid= ss+(se-ss)/2;
	//printf("%d %d %d\n", ss,se,mid);
	int q1= query(2*node,ss,mid,qs,qe);
	int q2= query(2*node+1,mid+1,se,qs,qe);
	int ret=q1+q2;
	return ret;
}
int main()
{
    int n,q;
    scanf("%d%d",&n,&q);
    while(q--)
    {
        int x,y,z;
        scanf("%d%d%d",&x,&y,&z);
        if(x==0)
        {
            update(1,0,n-1,y,z);
        }
        else
        {
            printf("%d\n",query(1,0,n-1,y,z));
        }
    }
    return 0;
}
