#include <iostream>
using namespace std;

const int MAXN = 1<<18;

int flips[MAXN<<1], heads_up[MAXN<<1];

void update(int i, int l, int r, int a, int b){ if(b<l || r<a) return; if(a<=l and r<=b) { flips[i] ^= 1; return; }
	int mid = (l+r)>>1; update((i<<1), l, mid, a, b); update((i<<1)+1, mid+1, r, a, b);
	int sum = 0; if(flips[(i<<1)] == 0) sum += heads_up[(i<<1)]; else sum += (r-l+1)/2 - heads_up[(i<<1)];
	if(flips[(i<<1)+1] == 0) sum += heads_up[(i<<1)+1]; else sum += (r-l+1)/2 - heads_up[(i<<1)+1]; heads_up[i] = sum; }

int query(int i, int l, int r, int a, int b, int xsum) { if(b<l || r<a) return 0; if(a<=l && r<=b){
if(xsum^flips[i] == 0) return heads_up[i]; else return (r-l+1) - heads_up[i]; }
int mid = (l+r)>>1; int sum = 0; sum += query((i<<1), l, mid, a, b, xsum^flips[i]);
sum += query((i<<1)+1, mid+1, r, a, b, xsum^flips[i]); return sum; }

int main() {
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	int n, q, t, a, b; cin>>n>>q;
	while(q--) { cin>>t>>a>>b; if(t==0) update(1, 0, MAXN-1, a, b); else if(t==1) cout<< query(1, 0, MAXN-1, a, b, 0) << "\n"; }
	return 0;
}
