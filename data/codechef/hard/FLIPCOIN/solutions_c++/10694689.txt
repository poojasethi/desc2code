#include<bits/stdc++.h>
using namespace std;
#define ll long long int
ll tree[400015] = {0};
ll n;
ll lazy[400015] = {0};
void lazy_update(ll node, ll p, ll q, ll i, ll j) {
    if(lazy[node]==1) {
        tree[node]=(q-p+1)- tree[node];
        if(p!=q) {
            lazy[2*node] = 1-lazy[2*node];
            lazy[(2*node)+1] = 1- lazy[(2*node)+1] ;
        }
        lazy[node] = 0;
    }
    //cout<<tree[node]<<" node "<<node<<" p "<< p <<" q "<<q<<endl;
    if(q<i || p>j || p>q)
        return;
    if(p>=i&&q<=j) {
        tree[node]=(q-p+1)-tree[node];
        if(p!=q) {
            lazy[2*node]=1-lazy[2*node];
            lazy[(2*node)+1]=1-lazy[(2*node)+1];
        }
        //cout<<tree[node]<<" la1 "<<node<<" p "<< p <<" q "<<q<<endl;
        return;
    }
    lazy_update(2*node,p,(p+q)/2,i,j);
    lazy_update((2*node)+1,((p+q)/2)+1,q,i,j);
    tree[node]=tree[node*2] + tree[(node*2)+1];
    //cout<<tree[node]<<" la2 "<<node<<" p "<< p <<" q "<<q<<endl;
}
ll lazy_query(ll node, ll p, ll q, ll i, ll j) {
    if(i>q || j<p || p>q)
        return 0;
    if(lazy[node]==1) {
        tree[node] = (q-p+1)-tree[node];
        if(p!=q) {
            lazy[2*node] = 1 - lazy[2*node];
            lazy[(2*node)+1] = 1 - lazy[(2*node)+1];
        }
        lazy[node]=0;
    }
    if(p>=i&&q<=j) {
        return tree[node];
    }
    ll a = lazy_query(2*node,p,((p+q)/2),i,j);
    ll b = lazy_query((2*node)+1,((p+q)/2)+1,q,i,j);
    ll total = a+b;
    return total;
}
int main() {
    ios_base::sync_with_stdio(0);
    ll n,v,o,i,j,t;
    cin>>n>>v;
    for(int k=0;k<v;k++) {
        cin>>o>>i>>j;
        if(o==0) {
            lazy_update(1, 0, n-1, i, j);
        }
        else {
            t=lazy_query(1, 0, n-1, i, j);
            cout<<t<<endl;
        }
    }
    return 0;
}
