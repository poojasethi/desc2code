
#include<bits/stdc++.h>
using namespace std;


#define MEM(a,N,b) fill(a,(a+N),b)
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define FORR(i,n) for(i=n-1;i>=0;--i)
#define elif else if
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define sd(x) scanf("%lf",&x);
#define sll(x) scanf("%lld",&x)
#define sl(x)  scanf("%ld",&x)
#define si(x)  scanf("%d",&x)
#define pi(x)  printf("%d",x)
#define pl(x)  printf("%ld",x)
#define pd(x)  printf("%lf",x)
#define pll(x) printf("%lld",x)
#define nl     printf("\n")
#define sp     printf(" ")

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef pair<int,long> PIL;
typedef pair<long,int> PLI;
typedef pair<int,long long> PILL;
typedef pair<long long,int> PLLI;
typedef pair<long,long> PLL;
typedef pair<long long,long long> PLLLL;
typedef pair<double,PIL> PDPIL;
typedef vector<int> VI;
typedef vector<long> VL;
typedef vector<double> VD;
typedef vector<long double> VLD;
typedef vector<long long> VLL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;
typedef vector<VLL> VVLL;
typedef vector<PII > VPII;
typedef vector<PLL > VPLL;
typedef vector<PIL> VPIL;
typedef vector<PLI > VPLI;
typedef vector<PILL> VPILL;
typedef vector<PLLI> VPLLI;
typedef vector<PLLLL> VPLLLL;
typedef vector<VPLL> VVPLL;
typedef vector<PDPIL> VPDPIL;

#define ll long long
#define l long
#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define ABS(x)   ((x) < 0 ? (-1)*(x) : (x))
#define Pi 3.1415926535897
#define MOD 1000000007
#define coolreshab ios::sync_with_stdio(false);//cin.tie(NULL)


/*freopen("test.txt","r",stdin);
  freopen("out.txt","w",stdout);
  cout << clock() / (double) CLOCKS_PER_SEC << "\n";*/
l tree[400005],lazy[400005];
void update(l index,l low,l high,l L,l H)
{
    if(lazy[index]%2)
        {
            tree[index]=(high-low+1)-tree[index];
            if(low!=high)
            {
                lazy[(2*index)+1]++;
                lazy[(2*index)+2]++;
            }
            lazy[index]=0;
        }
    if(low>high or L>high or H<low)//Out of range
        return;

    if(low>=L and high<=H)
    {
        tree[index]=(high-low+1)-tree[index];
        if(low!=high)
        {
            lazy[(2*index)+1]++;
            lazy[(2*index)+2]++;
        }
        return;
    }

    l mid=low+(high-low)/2;
    update((2*index)+1,low,mid,L,H);
    update((2*index)+2,mid+1,high,L,H);
    tree[index]=tree[(2*index)+1]+tree[(2*index)+2];

}
ll get(l index,l low,l high,l L,l H)
{
    if(lazy[index]%2)
        {
            tree[index]=(high-low+1)-tree[index];
            if(low!=high)
            {
                lazy[(2*index)+1]++;
                lazy[(2*index)+2]++;
            }
            lazy[index]=0;
        }
    if(low>high or L>high or H<low)//Out of range
        return 0;

    if(low>=L and high<=H)
    {
       return tree[index];
    }

    l mid=low+(high-low)/2;
    l p1=get((2*index)+1,low,mid,L,H);
    l p2=get((2*index)+2,mid+1,high,L,H);

    return (p1+p2);

}

main()
 { l N,Q,A,B,ans;
   int x;
   //coolreshab;
   sl(N);
   sl(Q);
   while(Q--)

      {
          si(x);
          sl(A);
          sl(B);
          if(x==0)
          {

            update(0,0,N-1,A,B);
          }
         else
         {
             ans=get(0,0,N-1,A,B);
             pl(ans);
             nl;
         }
      }
 }
