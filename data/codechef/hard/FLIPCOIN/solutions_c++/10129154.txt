#include<bits/stdc++.h>
#define gc getchar_unlocked
using namespace std;
inline void fastread(long long* a)
{
    register char c = 0;
    while (c < 33)
        c = gc();
    *a = 0;
    while (c > 33)
    {
        *a = *a * 10 + c - '0';
        c = gc();
    }
}
long long size,segmenttree[10000000]={0};
long long lazy[10000000]={0};
void SegmentTreeUpdate(long start,long end,long ustart,long uend,long pos){
	if(start>end)
		return;
		 	
	if(lazy[pos]&1){
		//printf("I 2 %lld %ld %ld %ld\n",segmenttree[pos],start,end,pos);
		segmenttree[pos]=end-start+1-segmenttree[pos];
		//printf("I 2 %lld %ld %ld %ld\n",segmenttree[pos],start,end,pos);
		if(start!=end){
			lazy[2*pos+1]++;
			lazy[2*pos+2]++;
		}
		lazy[pos]=0;
	}
	
		
	if(start>uend || end<ustart)
		return;
		
	if(ustart<=start && uend>=end){
		//printf("I 3 %lld %ld %ld %ld\n",segmenttree[pos],start,end,pos);
		segmenttree[pos]=end-start+1-segmenttree[pos];
		//printf("I 3 %lld %ld %ld %ld\n",segmenttree[pos],start,end,pos);
		if(start!=end){
			lazy[2*pos+1]++;
			lazy[2*pos+2]++;
		}
		return;
	}
	
	long mid=(start+end)/2;
	SegmentTreeUpdate(start,mid,ustart,uend,2*pos+1);
	SegmentTreeUpdate(mid+1,end,ustart,uend,2*pos+2);
	if(start!=end){
	segmenttree[pos]=segmenttree[2*pos+1]+segmenttree[2*pos+2];	
	//printf("I 4 %lld %lld %lld \n",segmenttree[pos],segmenttree[2*pos+1],segmenttree[2*pos+2]);
	}
	
}

long long SegmentTreeQuery(long start,long end,long qstart,long qend,long pos){
	
	if(start>end)
		return 0;
	
	if(lazy[pos]&1){
		segmenttree[pos]=end-start+1-segmenttree[pos];
		if(start!=end){
			lazy[2*pos+1]++;
			lazy[2*pos+2]++;
		}
		lazy[pos]=0;
	}
	
	if(start>qend || end<qstart)
		return 0;
	
	if(qstart<=start && qend>=end){
		return segmenttree[pos];
	}
	
	long mid=(start+end)/2;
	return SegmentTreeQuery(start,mid,qstart,qend,2*pos+1)+SegmentTreeQuery(mid+1,end,qstart,qend,2*pos+2);		

}


int main(){
	long long query;
	fastread(&size);fastread(&query);
	while(query--){
		long long a,b,c;
		fastread(&c);fastread(&a);fastread(&b);
		if(c&1){
			printf("%lld\n",SegmentTreeQuery(0,size-1,a,b,0));
			//for(int i=0;i<7;i++)
			//printf("%lld ",segmenttree[i]);
			//printf("\n");
		}else{
			SegmentTreeUpdate(0,size-1,a,b,0);
		}
	}
}