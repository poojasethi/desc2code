#include <bits/stdc++.h>

using namespace std;


class coin
{
public:
	int l,r,up;
	bool lazy;
	coin *left,*right;
	coin()
	{
		up=0;
		lazy=false;
		left=NULL;
		right=NULL;
	}
};

void construct(coin* r, int a, int b);
int query(coin* r, int a, int b);
void update(coin* r, int a, int b);

int main()
{
	std::cout.sync_with_stdio(false);
	int n,q,type,start,end;
	cin>>n>>q;
	coin* table = new coin();
	construct(table,0,n-1);
	while(q--)
	{
		cin>>type>>start>>end;
		if(type)
			cout<<query(table,start,end)<<endl;
		else
			update(table,start,end);
	}
	return 0;
}

void construct(coin* r, int a, int b)
{
	int mid;
	r->l=a;
	r->r=b;
	
	if(a==b)
		return;

	mid = (a+b)/2;
	coin* temp1 = new coin();
	coin* temp2 = new coin(); 
	r->left = temp1;
	construct(r->left,a,mid);
	r->right = temp2;
	construct(r->right,mid+1,b);
	return;
}

int query(coin* r, int a, int b)
{
	//Total number of heads in this range
	//cout<<"@@@@@@@@@@@@  "<<r->l<<" "<<r->r<<endl;
	int temp1, temp2;
	
	if(r->l > b or r->r < a or a>b)
		return 0;

	if(r->lazy)
	{
		r->up = (r->r-r->l+1) - r->up;
		if(r->left!=NULL)
			r->left->lazy = !r->left->lazy;
		if(r->right!=NULL)
			r->right->lazy = !r->right->lazy;
		r->lazy = false;
	}

	if(a<=(r->l) and b>=(r->r))
		//segment completely inside the range
		return r->up;

	temp1 = query(r->left, a, b);
	temp2 = query(r->right, a, b);
	//cout<<"@@@@@@@@@@@@  "<<r->l<<" "<<r->r<<" "<<temp1+temp2<<endl;
	return (temp1 + temp2);


}

void update(coin* r, int a, int b)
{

	//cout<<"@@@@@@@@@@@@  "<<r->l<<" "<<r->r<<" "<<r->up<<endl;
	//reverse all coins within this range
	if(r->lazy)
	{
		r->up = (r->r-r->l+1) - r->up;
		if(r->left!=NULL)
			r->left->lazy = !r->left->lazy;
		if(r->right!=NULL)
			r->right->lazy = !r->right->lazy;
		r->lazy = false;
	}

	if(r->l > b or r->r < a or a>b)
		return;

	if(r->l>=a and r->r<=b)
	{
		//cout<<"INSIDE"<<endl;
		r->up = (r->r-r->l+1) - r->up;
		if(r->left!=NULL)
			r->left->lazy = !r->left->lazy;
		if(r->right!=NULL)
			r->right->lazy = !r->right->lazy;
		return;
	}

	update(r->left,a,b);
	update(r->right,a,b);
	r->up = r->left->up + r->right->up;
	//cout<<"!!!!!!!!!!!!!!!1  "<<r->l<<" "<<r->r<<" "<<r->up<<endl;	
	return;
}