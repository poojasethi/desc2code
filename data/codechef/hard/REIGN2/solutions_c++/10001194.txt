#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);
using namespace std;
typedef long long int LL;

pair<LL , LL > ppp[5040];
int N , K;
LL dp[5008][5008];
//dp[i][j] choose a subset of j castles from the first i castles

LL lmax(LL a , LL b){
	if(a>b)
		return a;
	return b;
}

LL func(int i , int j)
{		
	if(i<j)
		return INF_MIN;
	if(dp[i][j]!=-1)
		return dp[i][j];	
	LL R1 , R2;
	R1 = func(i-1 , j);//choose j not to be in
	R2 = func(i-1 , j-1) + ppp[i].second + ((j - 1)*ppp[i].first*1LL);//choose j to be in
	dp[i][j] = lmax(R1 , R2);
	return dp[i][j];
}




int main()
{
int test;
si(test);
while(test--)
{
si(N);
memset(dp , -1 , sizeof(dp));
dp[0][0] = 0;
for(int i=1;i<=N;i++){
	dp[i][0] = 0;
	cin >> ppp[i].second;
}
for(int i=1;i<=N;i++)
	cin >> ppp[i].first;
sort(ppp+1 , ppp + N + 1);
reverse(ppp+1 , ppp + N + 1);
// for(int i=1;i<=N;i++)
	// cout << ppp[i].first << "$" << ppp[i].second << endl;
for(int i=1;i<=N;i++)
	cout << func(N , i) << " ";
cout << endl;
}
return 0;
}
