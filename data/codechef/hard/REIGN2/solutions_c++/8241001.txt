//amazing takes time, legendary requires patience
#include "bits/stdc++.h"
#define sd(n) scanf("%d", &(n))
#define rep(i, x, n) for (int i = x, _n = (n); i < _n; ++i)
#define repi(i, a) for(typeof((a).begin()) i = (a).begin(), _##i = (a).end(); i != _##i; ++i)
#define SZ(c) (int)(c).size()
#define pra(v, n) rep(i, 0, n) cout << v[i] << " "; cout << endl;
#define lcm(a,b) (a*(b/__gcd(a,b)))
#define VI vector<int>
#define all(c) (c).begin(), (c).end()
#define pb push_back
#define mii map<int, int>
#define pii pair<int, int>
#define pip pair<int, pii>
#define F first
#define S second
#define mp make_pair
#define lli long long int
#define llu unsigned long long
#define CLR(p) memset(p, 0, sizeof(p))
#define SET(p) memset(p, -1, sizeof(p))
#define INF 0x3f3f3f3f
#define pi 3.14159265358979
#define debug 0
using namespace std;

const int MOD = 1e9+7;
const int eps = -1e6;
const int MAX = 5010;


bool cmp(pii a, pii b)
{
	return a.S == b.S ? a.F > b.F : a.S > b.S;
}

pii p[MAX];
lli dp[MAX][MAX];
int a[MAX], b[MAX], n;

int main()
{
	ios_base::sync_with_stdio(0);
	int t;
	sd(t);
	while(t--)
	{
		sd(n);
		rep(i, 1, n+1)
			sd(p[i].F);
		rep(i, 1, n+1)
			sd(p[i].S);
			
		sort(p+1, p+n+1, cmp);
		
		memset(dp, 0, sizeof dp);
		
		//dp[i][j] is maximum number of knights required for king to conquer a subset of j castles from first i castles
		rep(i, 1, n+1)	//given first i castles
		{
			rep(j, 1, i+1)	//find a subset of j castles from given i castles
			{
				dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + p[i].F + (j-1)*1ll*p[i].S);
			}
		}
		rep(k, 1, n+1)
		{
			printf("%lld ", dp[n][k]);	//given all the n castles, max number of knights to conquer subset of k castles
		}
		printf("\n");
	}
    return 0;
}    