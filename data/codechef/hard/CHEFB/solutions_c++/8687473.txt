//---------------------------JUGNU: LET YOUR LIGHT SHINE---------------------------//
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define pf push_front
#define sz size
#define mk make_pair
#define ln length
#define vt(a) vector <ll> a
#define st(a) set <ll> a
#define sti(a) set <ll>::iterator a
#define fr(i,a,b) for(i=a;i<b;i++)
#define fre(i,a,b) for(i=a;i<=b;i++)
#define frr(i,a,b) for(i=a;i>=b;i--)
#define sc(a) scanf("%d",&a)
#define sm(a,b) scanf("%d%d", &a, &b)
#define pr(a) printf("%d\n", a)
#define pm(a,b) printf("%d %d\n", a, b)
#define cn(a) cin >> a
#define ct(a) cout << a << endl
#define isset(x,i) ((x>>i)&1)
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
using namespace std;
int primes[1000005], primes_highest_power[1000005];
vector<int> primes_list;
void sieve()
{
	int i, j;
	fr(i, 2, 1005)
	{
		if(primes[i]==0)
		{
			for(j = i*i; j<1000005; j+=i)
				primes[j] = 1;
		}
	}
	fr(i, 2, 1000005)
		if(primes[i]==0)
			primes_list.pb(i);
}
int main()
{
	int i, j, t, n, m, k, l, r, mini,cnt, maxi, temp, flag, result;
	sieve();
	sc(t);
	while(t--)
	{
		sc(n);
		fr(i, 0, 1000005)
			primes_highest_power[i] = 0;
		result = 0;
		fr(i, 0, n)
		{
			sc(k);
			for(j = 0; j<primes_list.sz() && k!=1; j++)
			{
				if(primes[k]==0)
				{
					primes_highest_power[k] = max(primes_highest_power[k], 1);
					k = 1;
				}
				if(k%primes_list[j]==0)
				{
					cnt = 0;
					while(k%primes_list[j]==0)
					{
						cnt++;
						k/= primes_list[j];
					}
					primes_highest_power[primes_list[j]] = max(primes_highest_power[primes_list[j]], cnt);
				}
			}
		}
		fr(i, 0, 1000005)
			result = result + primes_highest_power[i];
		pr(result);
	}
return 0;
}
