#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define F(i,a,b) for(int i = (int)(a); i <= (int)(b); i++)
#define RF(i,a,b) for(int i = (int)(a); i >= (int)(b); i--)
#define gc getchar_unlocked

int read_int(){
    register int x = 0, c = gc();
    int sign = 1;
    while(c!='-' && (c<48 || c>57) ) c = gc();
    if(c=='-')
        sign = -1, c = gc();
    while(c>=48 && c<=57) 
        x = (x<<1) + (x<<3) + c - 48, c = gc();
    return sign*x;
}
int main()
{
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
    #endif
    int T,N,C,K,L,R;
    T = read_int();
    while(T--)
    {
        N = read_int();
        C = read_int();
        K = read_int();
        double dp[K+1][N+1][C+1]; //dp[i][j][k]: probability of jth index being colored by k in ith turn
        F(i,0,K) F(j,0,N) F(k,0,C) dp[i][j][k] = 0;
        F(j,1,N) dp[0][j][1] = 1; //initially all are colored 1
        F(i,1,K)
        {
            L = read_int();
            R = read_int(); //input value of L and R
            F(j,1,N) //indices from 1 to N
            {
                F(k,0,C-1)
                {
                    if(j >= L && j <= R) //index lies within subset
                    {
                        //if you don't choose the jth index in the subset
                        //either you take it or don't take it ==> P = 0.5
                        dp[i][j][k] += dp[i-1][j][k]*0.5;

                        //suppose you take it in the subset
                        //now you can paint it with any color c
                        //so its new color becomes (c*k)%C
                        //==>probability of getting color (c*k)%C through k
                        //increases
                        //it increases by dp[i-1][j][k]/2C
                        F(c,0,C-1) dp[i][j][(c*k)%C] += dp[i-1][j][k]/(2*C);
                    }
                    else
                        dp[i][j][k] += dp[i-1][j][k];
                }
            }
        }
        //Now,expected sum of all colors = sum of all expected colors (linearity of expectation)
        //==> iterate over all objects being painted in each color from 0 to C-1
        //expected value = value*probability of its occurence
        double ans = 0;
        F(i,1,N)
        {
            F(c,0,C-1)
            {
                ans += c*dp[K][i][c];
            }
        }
        printf("%0.6lf\n",ans);
    }
    return 0;
}

