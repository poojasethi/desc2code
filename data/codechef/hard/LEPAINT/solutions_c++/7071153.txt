/*-----DP: bottom up iterative-----*/
#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=1e9+7,maxn=105;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
//#define S(x) scanf("%d",&x)
#define getcx getchar
inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define Bug(x) cout << #x << "=" << x << endl
#define Bugarr(x,m,n) cout<<"array "<<#x<<":"<<endl; F(i,0,m) {F(j,0,n) cout<<x[i][j]<<" "; cout<<endl;} cout<<endl
#define pii pair<int,int>
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit

int n,c,k,l,r;
int c_prob[maxn][maxn];

double dp[maxn][maxn],temp[maxn][maxn];

void reset()
{
    F(i,l,r+1)
    {
        F(j,0,c)
            dp[i][j]=temp[i][j];
    }

    F(i,l,r+1)
    {
        F(j,0,c)
            temp[i][j]=0;
    }
}

void init()
{
    F(i,0,n+1)
    {
        F(j,0,c)
            dp[i][j]=0;
    }
    F(i,1,n+1)
    {
        dp[i][1]=1;
    }
    F(i,0,n+1)
    {
        F(j,0,c)
            temp[i][j]=0;
    }
    F(i,0,c)
    {
        F(j,0,c)
            c_prob[i][j]=0;
    }
    F(i,0,c)
    {
        F(j,0,c)
        c_prob[i][(i*j)%c]++;
    }
    //Bugarr(c_prob,c,c);
}

void _solve()
{
    //Bugarr(dp,n+1,c);
    while(k--)
    {
        S(l);
        S(r);
        F(i,l,r+1)
        {
            F(j,0,c)
            {
                temp[i][j]=dp[i][j]/2.0;
                F(r,0,c)
                {
                    temp[i][j]+=(dp[i][r]*c_prob[r][j])/(2.0*c);
                }
            }
        }
        reset();
        //Bugarr(dp,n+1,c);
    }
    double ans=0;
    F(i,0,c)
    {
        double sum=0;
        F(j,1,n+1)
        sum+=dp[j][i];
        ans+=i*sum;
    }
    printf("%.10lf\n",ans);
}

int main()
{
    int t;
    S(t);
    while(t--)
    {
        S(n);
        S(c);
        S(k);

        init();
        _solve();
    }
    return 0;
}
