#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <iomanip>
#include <cstdio>

using namespace std;

int n, c;
double prob[105][105];
double object_color_prob[55][105][55];

void initialize_prob_matrix() {

  double d = double (c);

  for(int i = 0 ; i < c ; i++) {
    for(int j = 0 ; j < c ; j++) {
      prob[i][j] = 0.000000;
    }
  }

  for(int i = 0 ; i < c ; i++) {
    for(int j = 0 ; j < c ; j++) {
      prob[i][(i*j)%c] += 1/d;
    }
  }
}

void print_obj_prob_matrix(int k) {

  for(int r = 0 ; r < k+1 ; r++) {
    for(int p = 0 ; p < n ; p++) {
      for(int q = 0 ; q < c ; q++) {
        cout<<object_color_prob[p][q][r]<<" ";
      }
      cout<<"     ";
    }
    cout<<endl<<endl;
  }

}

void initialize_object_prob_matrix(int k) {

  for(int p = 0 ; p < n ; p++) {
    for(int q = 0 ; q < c ; q++) {
      for(int r = 0 ; r < k + 1 ; r++) {
        if(r == 0  && q == 1) {
          object_color_prob[p][q][r] = 1.000000;
        } else {
          object_color_prob[p][q][r] = 0.000000;
        }
      }
    }
  }

}

void fill_object_prob_matrix(int a, int b, int level) {

  double prev_prob;

  for(int i = 0 ; i < n ; i++) {
    if(i >= a &&  i <= b) {
      for(int j = 0 ; j < c ; j++) {
        prev_prob = object_color_prob[i][j][level-1];
        prev_prob /= 2;
        object_color_prob[i][j][level] += prev_prob;

        for(int k = 0 ; k < c ; k++) {
          object_color_prob[i][k][level] += (prev_prob * prob[j][k]);
        }
       }
    } else {
      for(int j = 0 ; j < c ; j++) {
        object_color_prob[i][j][level] = object_color_prob[i][j][level-1];
      }
    }
  }

}

double expected_color_sum(int k) {
 double expected_value = 0.00000000;

 for(int i = 0 ; i < n ; i++) {
  for(int j = 0 ; j < c ; j++) {
    expected_value += (j * object_color_prob[i][j][k]);
  }
 }

 return expected_value;

}

int main() {
  int t, a, b, k;
  cin >> t;
  while(t--) {
    cin >> n >> c >> k;

    initialize_prob_matrix();
    initialize_object_prob_matrix(k);
    //print_obj_prob_matrix(k);

    for(int i = 1 ; i <= k ; i++) {
      cin >> a >> b;
      fill_object_prob_matrix(a-1, b-1, i);
//      print_obj_prob_matrix(k);
    }
    cout << fixed << expected_color_sum(k) << endl;
  }
  return 0;
}
