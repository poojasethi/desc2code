#include <iostream>
#include <memory.h>
#include <iomanip>
using namespace std;
int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        int N,K,C;
        cin >> N >> C >> K;
        double DP[K+1][N+1][C+1]; // probability of color c at index n in every turn k
        memset(DP, 0, sizeof(DP));
        
        /*  base case
         The probabilty of getting color 1 at each index is 1
        */
        for(int i = 1; i <= N ;i++)
          DP[0][i][1] = 1;
        
        for(int i = 1 ; i <= K ; i++) // Iterating for K turns
        {
            int l,r;
            cin >> l >> r;
            for(int j = 1 ; j <= N ; j++) // Iterating for N objects
            {
                for(int k = 0 ; k < C ; k++) // Iterating for C colors
                {
                    if(j >= l && j <= r) // The index for coloring
                    {
                        for(int m = 0 ; m < C ; m++) // Currently choosing Mth color
                        {
                            DP[i][j][(m*k) % C] += DP[i-1][j][k]/(2.0*C);  // If the index is choosen for coloring
                          //  cout << "YYY ::: " << DP[i][j][(m*k) % C] << endl;
                        }
                        DP[i][j][k] += DP[i-1][j][k] * 0.5;  // If the index is not choosen for coloring
                    }
                    else
                        DP[i][j][k] += DP[i-1][j][k];
                }
            }
        }
        long double ans = 0.0;
        for(int i = 1 ; i <= N ; i++)
        {
            for(int j = 0 ; j < C ; j++)
            {
               // cout << "hh" << DP[K][i][j] << endl;
                ans += DP[K][i][j] * j;
               // cout << "jjj :: " << ans << endl;
            }
        }
        cout << setprecision(6) << fixed << ans << endl;
    }
 return 0;
}
