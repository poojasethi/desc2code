#include<bits/stdc++.h>
using namespace std;
typedef long long int lli;

std::vector<pair<lli,lli> >Uhull;

int pointer;

bool irrelevant(pair<lli,lli>a,pair<lli,lli>b,pair<lli,lli>c)
{
    return ((c.second-a.second)/(double)(a.first-c.first))<((b.second-a.second)/(double)(a.first-b.first));
}

void add(lli m,lli b)
{
    int n=Uhull.size();
    pair<lli,lli>curr=make_pair(m,b);
    int i=Uhull.size();
    while(i>1 && irrelevant(Uhull[i-2],Uhull[i-1],curr))
        {
            Uhull.pop_back();
            i--;
        }
    Uhull.push_back(curr);
}

lli query(int x)
{
    int n=Uhull.size();
    if(pointer>=Uhull.size())
        pointer=Uhull.size()-1;

    while(pointer<n-1 && (Uhull[pointer].first*x+Uhull[pointer].second)<(Uhull[pointer+1].first*x+Uhull[pointer+1].second))
        pointer++;

    return (Uhull[pointer].first*x+Uhull[pointer].second);
}

lli slope[100005],inter[100005],s,m,b;
int t,c,ch,n,q;
std::vector<pair<lli,lli> >lines;
std::vector<int>qry;

int main()
{
    scanf("%d %d",&n,&q);
    while(q--)
    {
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: scanf("%d %d %lld",&t,&c,&s);
                    m=slope[c];
                    b=inter[c];
                    slope[c]=s;
                    inter[c]=b+(m-s)*t;
                    lines.push_back(make_pair(slope[c],inter[c]));
                    break;
            case 2: scanf("%d",&t);
                    qry.push_back(t);
                    break;
        }
    }

    sort(lines.begin(),lines.end());

    for(int i=0;i<lines.size();i++)
        add(lines[i].first,lines[i].second);

    for(int i=0;i<qry.size();i++)
        printf("%lld\n",query(qry[i]));
return 0;
}
