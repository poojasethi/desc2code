#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=1e9+7,maxn=50005,ln=17;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
//#define getcx getchar_unlocked
#define getcx getchar
/*inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}*/
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define modulo(x,y,z) (x+y)<0?x+y+z:((x+y>=z)?x+y-z:x+y)
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(i,0,n) cout<<i<<". "<<x[i]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(i,0,m) {F(j,0,n) cout<<x[i][j]<<" "; cout<<endl;} cout<<endl
#define pii pair<LL,LL>
#define Fi first
#define Se second
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
const int shift=30,etf=mod-1;

const LL inf=(LL)1e15;

const double PI=(double)3.141592653589793238;


vector<pii> lines,res;

vector< pair<double,int> > mystack;

vector<LL> query;

vector<LL> pos[maxn],tim[maxn],velo[maxn];

bool func(pii x,pii y)
{
    if(x.Fi==y.Fi)
        return x.Se>y.Se;
    return x.Fi<y.Fi;
}

int main()
{
    int n,q;
    cin>>n>>q;
    F(i,1,n+1)
    {
        pos[i].push_back(0);
        tim[i].push_back(0);
        velo[i].push_back(0);
    }

    lines.push_back(pii (0,0));

    F(i,0,q)
    {
        int tp,cid;
        LL tm,speed;
        S(tp);

        if(tp==1)
        {
            cin>>tm>>cid>>speed;
            pos[cid][0]+=(tm-tim[cid][0])*velo[cid][0];
            lines.push_back(pii (speed,pos[cid][0]-speed*tm));
            velo[cid][0]=speed;
            tim[cid][0]=tm;
        }
        else
        {
            cin>>tm;
            query.push_back(tm);
        }
    }

    sort(lines.begin(),lines.end(),func);

    res.push_back(pii (0,0));

    F(i,1,lines.size())
    {
        if(res.back().Fi!=lines[i].Fi)
        {
            res.push_back(lines[i]);
        }
    }

    /*F(i,0,res.size())
    {
        cout<<res[i].Fi<<" "<<res[i].Se<<endl;
    }*/



    mystack.push_back(pair<double,int> (0.0,0));
    double intersect=(1.0*(res[1].Se-res[0].Se))/(res[0].Fi-res[1].Fi);
    mystack.push_back(pair<double,int> (intersect,1));

    //cout<<intersect<<endl;

    F(i,2,res.size())
    {
        int sz;
        while((sz=mystack.size())>1)
        {
            intersect=(1.0*(res[mystack[sz-2].Se].Se-res[i].Se))/(res[i].Fi-res[mystack[sz-2].Se].Fi);
            //cout<<intersect<<endl;
            if(intersect<=mystack[sz-1].Fi)
            {
                mystack.pop_back();
            }
            else break;
        }
        sz=mystack.size();
        intersect=(1.0*(res[mystack[sz-1].Se].Se-res[i].Se))/(res[i].Fi-res[mystack[sz-1].Se].Fi);

        //cout<<intersect<<endl;
        mystack.push_back(pair<double,int> (intersect,i));
    }
    //printf("here\n");

    F(i,0,query.size())
    {
        int p=0,q=mystack.size();
        while(p!=q)
        {
            int m=(p+q)/2;
            if(mystack[m].Fi<=query[i])
                p=m+1;
            else
                q=m;
        }

        p--;

        int idx=mystack[p].Se;

        cout<<res[idx].Fi*query[i]+res[idx].Se<<endl;
    }

    return 0;
}
