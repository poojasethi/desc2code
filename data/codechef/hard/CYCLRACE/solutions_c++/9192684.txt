#include <bits/stdc++.h>
using namespace std;

#define all(x) x.begin(), x.end()
#define ll long long
#define vi vector<int>
#define pii pair<int ,int>
#define pll pair<ll, ll>

#define vii vector<pii>
#define vpll vector<pll>

#define allSort(x) sort(all(x))

#define MAXN 50003

ll slopes[MAXN], intercept[MAXN];
vpll Uhull;
int pointer;

int isbad(pll L1, pll L2, pll L3) {
    return ((L3.second - L1.second) / (double)(L1.first - L3.first) ) < ( (L2.second - L1.second) / (double)(L1.first - L2.first) );
}
void add(ll m, ll c) {
    int sz = Uhull.size();
    pll cur = pll(m, c);
    
    while(sz > 1 && isbad(Uhull[sz-2], Uhull[sz-1] , cur) ) {
        Uhull.pop_back();
        sz--;
    }
    
    Uhull.push_back(cur);
}

ll query(ll x, int sz) {
    if(pointer >= sz ) {
        pointer = sz-1;
    }
    
    while( pointer < sz-1 &&  (
        (Uhull[pointer+1].first * x) + Uhull[pointer+1].second > (Uhull[pointer].first * x) + Uhull[pointer].second ) ) {
        pointer++;
    }
    
    return  ( (Uhull[pointer].first * x) + Uhull[pointer].second );
}

int main() {
    int n, q;
    scanf("%d %d" , &n, &q);
    vpll lines;
    
    memset(slopes, -1, sizeof(slopes));
    vi queries;
    
    while(q--) {
        int type, time;
        scanf("%d %d", &type, &time);
        
        if(type == 1) {
            int cyclist, newspeed;
            scanf("%d %d ", &cyclist, &newspeed);
            
            ll c1 = 0;
            ll m1 = 0;
            
            if(slopes[cyclist] != -1) {
                c1 = intercept[cyclist];
                m1 = slopes[cyclist];
            }
            
            
            lines.push_back( pll(newspeed, c1 + time*(m1-newspeed ))) ;
            
            slopes[cyclist] = newspeed;
            intercept[cyclist] =  c1 + time*(m1-newspeed );
        } else if (type == 2) {
            queries.push_back(time);
        }
    }
    
    allSort(lines);

    for(int i = 0; i < lines.size() ;i++) {
        add(lines[i].first, lines[i].second);
    }
    
    int sz = Uhull.size();
    for(int i = 0; i < queries.size(); i++) {
        cout<<query(queries[i], sz)<<"\n";
    }
    
	return 0;
}
