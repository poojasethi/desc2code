#include<bits/stdc++.h>
using namespace std;
#define pc putchar_unlocked
#define gc getchar_unlocked
typedef long long ll;
ll fs()
{
	ll x=0;
	char c;
	c=getchar_unlocked();
	while (c<'0'||c>'9')
		c=getchar_unlocked();
	while ('0'<=c&&c<='9')
	{
		x=(x<<3)+(x<<1)+c-'0';
		c=getchar_unlocked();
	}
	return x; 
}
void _ppd(ll a)
{
	if (a==0)
		return ;
	_ppd(a/10);
	putchar_unlocked(a%10+'0');
}
void ppd(ll a) // Printing integer using utchar unlocked!
{
	if (a==0)
		pc('0');
	else
	_ppd(a);
}
struct lnes{
	ll a,b,c,speed;
	int tt;
	double insp;
};
lnes llns[50010];
lnes stk[50010];
ll tim[50010]={0};
ll dist[50010]={0};
ll spd[50010]={0};
int pl=0;
void insertt(ll ti,ll dd,ll newsp)
{
	llns[pl].a = newsp;
	llns[pl].b = -1;
	llns[pl].c = dd - newsp*ti;
	llns[pl].speed = newsp;
	pl++;
}

double intpoint(lnes x,lnes y)
{
	return (double)(x.c - y.c)/(y.a - x.a);
}

bool cmpp(lnes xx,lnes yy)
{
	return (xx.speed < yy.speed);
}
int main()
{
	ll n,q;
	//scanf("%d %d",&n,&q);
	n=fs();
	q=fs();
	int qq=0;
	stk[qq].b=-1;
	stk[qq].a=0;
	stk[qq].c=0;
	stk[qq].insp=-1000;
	stk[qq].speed=0;
	qq++;
	for(int ii=0;ii<q;ii++)
	{
		ll typ;
		//scanf("%d",&typ);
		typ=fs();
		if(typ&1)
		{
			ll ti,cyc,newsp;
			//scanf("%d %d %d",&ti,&cyc,&newsp);
			ti=fs();
			cyc=fs();
			newsp=fs();
			dist[cyc] = dist[cyc] + ((ll)ti - tim[cyc])*spd[cyc];
			tim[cyc] = ti;
			spd[cyc] = newsp;
			insertt(ti,dist[cyc],newsp);
		}
		else 
		{
			ll ti;
			//scanf("%d",&ti);
			ti=fs();
			if(pl!=0)
			{
				sort(llns,llns+pl,cmpp);
				for(int i=0;i<pl;i++)
				{
					if(llns[i].speed == stk[qq-1].speed)
					{
						if(llns[i].c > stk[qq-1].c)
						{
							stk[qq-1] = llns[i];
							stk[qq-1].insp = intpoint(stk[qq-1],stk[qq-2]);
						}
					}
					else if(llns[i].speed > stk[qq-1].speed)
					{
						double newpoint;
						while(1)
						{
							newpoint = intpoint(llns[i],stk[qq-1]);
							if(newpoint < stk[qq-1].insp)
							{
								qq--;
							}
							else
								break;
						}
						stk[qq] = llns[i];
						stk[qq].insp = newpoint;
						qq++;
					}
				}
			}
			int st = 0,ed = qq;
			while(st < ed)
			{
				int mid = (st+ed)>>1;
				if(ti < stk[mid].insp)
					ed = mid;
				else
					st = mid+1;
			}
			st--;
			ll ans = stk[st].a*ti + stk[st].c;
			//printf("%lld\n",ans);
			ppd(ans);
			pc('\n');
			pl=0;
		}
	}
	return 0;
}