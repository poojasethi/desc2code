#include <cstdio>
#include <vector>
#include <set>
#pragma comment(linker, "/STACK:16777216")
using namespace std;

const int Maxn = 50005;
const int Maxm = 20;

int t;
int n, m;
vector <int> neigh[Maxn];
int L[Maxn], P[Maxn][Maxm];

void Traverse(int v)
{
	for (int i = 0; i < neigh[v].size(); i++) {
		int u = neigh[v][i];
		if (P[v][0] != u) { L[u] = L[v] + 1; P[u][0] = v; Traverse(u); }
	}
}

int LCA(int a, int b)
{
	if (L[a] < L[b]) swap(a, b);
	for (int i = Maxm - 1; i >= 0; i--)
		if (L[a] - (1 << i) >= L[b]) a = P[a][i];
	if (a == b) return a;
	for (int i = Maxm - 1; i >= 0; i--)
		if (P[a][i] != P[b][i]) a = P[a][i], b = P[b][i];
	return P[a][0];
}

int justBef(int a, int b)
{
	for (int i = Maxm - 1; i >= 0; i--)
		if (L[a] - (1 << i) >= L[b] + 1) a = P[a][i];
	return a;
}

int getSt(int v, vector <int> &tmp)
{
	int above = 0;
	set <int> beyond;
	bool twobey = false;
	for (int i = 0; i < tmp.size(); i++) {
		if (tmp[i] == v) { above++; twobey = true; continue; }
		int b = justBef(tmp[i], v);
		if (P[b][0] != v) above++;
		else if (beyond.count(b)) twobey = true;
			 else beyond.insert(b);
	}
	if (above <= 1 && !twobey) return 0;
	if (above > 1 && twobey) return 2;
	if (above > 1) return 1;
	return -1;
}

bool canGet(int v, vector <int> &tmp)
{
	for (int i = Maxm - 1; i >= 0; i--) if (P[v][i]) {
		int st = getSt(P[v][i], tmp);
		if (st == 0) return true;
		if (st == 2) return false;
		if (st == 1) v = P[v][i];
	}
	return false;
}

int main()
{
	scanf("%d", &t);
	while (t--) {
		scanf("%d %d", &n, &m);
		for (int i = 1; i <= n; i++) neigh[i].clear();
		for (int i = 0; i < n - 1; i++) {
			int x, y; scanf("%d %d", &x, &y);
			neigh[x].push_back(y); neigh[y].push_back(x);
		}
		Traverse(1);
		for (int j = 1; j < Maxm; j++)
			for (int i = 1; i <= n; i++)
				P[i][j] = P[P[i][j - 1]][j - 1];
		while (m--) {
			int k; scanf("%d", &k);
			if (k == 2) {
				int a, b; scanf("%d %d", &a, &b);
				int l = LCA(a, b);
				printf("%d\n", L[a] + L[b] - 2 * L[l] - 1);
			} else {
				vector <int> tmp(k);
				scanf("%d", &tmp[0]); int l = tmp[0];
				for (int i = 1; i < k; i++) scanf("%d", &tmp[i]);
				printf("%d\n", canGet(tmp[0], tmp) || canGet(tmp[1], tmp));
			}
		}
	}
	return 0;
}