#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#include <cmath>
using namespace std;

typedef long long LL;
typedef pair<int,int> pii;
struct edge
{
	int r,next;
	edge(){}
	edge(int rr,int nextt)
	{
		r = rr;
		next = nextt;
	}
}ln[111111];
const int top = 17;
int tot;
int x[55555],d[55555];
int go[55555][top];
int v[55555];
int q[55555];

void add(int l,int r)
{
	ln[tot] = edge(r,x[l]);
	x[l] = tot++;
	ln[tot] = edge(l,x[r]);
	x[r] = tot++;
}

void make_tree(int p,int depth,int fa)
{
	d[p] = depth;
	go[p][0] = fa;
	for (int i = x[p];i;i = ln[i].next)
		if (ln[i].r != fa)
			make_tree(ln[i].r,depth+1,p);
}

inline bool cmp(const int &x,const int &y)
{
	return d[x] < d[y];
}

int lca(int a,int b)
{
	int t = d[b] - d[a];
	for (int i = top - 1;i >= 0;--i)
	{
		if (t & (1 << i))
		{
			b = go[b][i];
		}
	}
	if (a != b)
	{
		for (int i = top - 1;i >= 0;--i)
		{
			if (go[a][i] != go[b][i])
			{
				a = go[a][i];
				b = go[b][i];
			}
		}
		a = go[a][0];
		b = go[b][0];
	}
	return a;
}

bool check(int a,int b,int times)
{
	if (a == b) return 0;
	int t = d[b] - d[a];
	if (t <= 0)
	{
		if (v[0] == times)
			return 0;
		v[0] = times;
		return 1;
	}
	t--;
	for (int i = top-1;i >= 0;--i)
		if (t & (1 << i))
			b = go[b][i];
	if (go[b][0] != a)
	{
		if (v[0] == times)
			return 0;
		v[0] = times;
		return 1;
	}
	if (v[b] == times) return 0;
	v[b] = times;
	return 1;
}


void work()
{
	int n,m;
	scanf("%d%d",&n,&m);
	tot = 2;
	memset(x,0,sizeof(x));
	memset(v,0,sizeof(v));
	for (int i = 1;i < n;++i)
	{
		int l,r;
		scanf("%d%d",&l,&r);
		add(l,r);
	}
	make_tree(1,0,-1);
	for (int j = 1;j < top;++j)
		for (int i = 1;i <= n;++i)
			go[i][j] = go[go[i][j-1]][j-1];
	for (int i = 1;i <= m;++i)
	{
		int k;
		scanf("%d",&k);
		for (int j = 0;j < k;++j)
			scanf("%d",q+j);
		sort(q,q+k,cmp);
		if (k == 2) printf("%d\n",d[q[0]] + d[q[1]] - 2 * d[lca(q[0],q[1])] - 1);
		else
		{
			int t = lca(q[0],q[1]);
			int tt = lca(q[1],q[2]);
			if (d[tt] > d[t]) t = tt;
			tt = lca(q[0],q[2]);
			if (d[tt] > d[t]) t = tt;
			int st = 0;
			bool flag =  true;
			for (int j = st;j < k;++j)
			{
				if (!check(t,q[j],i))
				{
					puts("0");
					flag = false;
					break;
				}
			}
			if (flag) puts("1");
		}
	}
}

int main()
{
	int times;
	scanf("%d",&times);
	while (times--) work();
	return 0;
}
