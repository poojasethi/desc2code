import java.io.*;
import java.util.*;
 
public class Main implements Runnable {
	
	BufferedReader in;
	PrintWriter out;
	StringTokenizer st;
	
	String nextToken() throws Exception {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}
	
	int nextInt() throws Exception {
		return Integer.parseInt(nextToken());
	}
	
	long nextLong() throws Exception {
		return Long.parseLong(nextToken());
	}
	
	double nextDouble() throws Exception {
		return Double.parseDouble(nextToken());
	}
	
	class Edge {
		int b, e;
		Edge next;
		Edge(int q, int w, Edge n) {
			b = q; e = w; next = n;
		}
	}
	
	Edge[] v = new Edge[50050];
	int[] h = new int[50050];
	final int C = 1 << 18;
	int[] rm = new int[2 * C];
	int rl;
	ArrayList<Integer>[] al = new ArrayList[50050];
	int[][] a = new int[50050][];
	int[] qq = new int[50050];
	int[] ww = new int[50050];
	
	class DState {
		int q, w;
		Edge r;
		DState(int qq, int ww, Edge rr) {
			q = qq; w = ww; r = rr;
		}
	}
	
	DState[] ds = new DState[50050];
	int dsl;
	
	void dfs(int q) {
		dsl = 0;
		ds[dsl++] = new DState(q, -1, null);
		while (dsl > 0) {
			q = ds[dsl - 1].q;
			if (ds[dsl - 1].r == null) {
				al[q] = new ArrayList<Integer>();
				al[q].add(rl);
				rm[rl++] = q;
				ds[dsl - 1].r = v[q];
			} else {
				al[q].add(rl);
				rm[rl++] = q;
				ds[dsl - 1].r = ds[dsl - 1].r.next;
			}
			if (ds[dsl - 1].r != null && ds[dsl - 1].r.e == ds[dsl - 1].w) ds[dsl - 1].r = ds[dsl - 1].r.next;
			if (ds[dsl - 1].r == null) {
				dsl--;
			} else {
				h[ds[dsl - 1].r.e] = h[ds[dsl - 1].r.b] + 1;
				ds[dsl] = new DState(ds[dsl - 1].r.e, ds[dsl - 1].r.b, null);
				dsl++;
			}
		}
	}
	
	void dfs(int q, int w) {
		al[q] = new ArrayList<Integer>();
		al[q].add(rl);
		rm[rl++] = q;
		for (Edge r = v[q]; r != null; r = r.next) {
			if (r.e == w) continue;
			h[r.e] = h[r.b] + 1;
			dfs(r.e, r.b);
			al[q].add(rl);
			rm[rl++] = q;
		}
	}
	
	int rmq(int x, int y) {
		if (x == y) return rm[x];
		if (x + 1 == y) {
			if (h[rm[x]] < h[rm[y]]) return rm[x]; else return rm[y]; 
		}
		int res = rmq((x + 1) / 2, (y - 1) / 2);
		if (h[rm[x]] < h[res]) res = rm[x];
		if (h[rm[y]] < h[res]) res = rm[y];
		return res;
	}
	
	int lca(int x, int y) {
		x = a[x][0]; y = a[y][0];
		return rmq(Math.min(x, y), Math.max(x, y));
	}
	
	int pathlen(int x, int y) {
		int z = lca(x, y);
		return h[x] + h[y] - 2 * h[z];
	}
	
	int rnum(int q, int x) {
		int res = -Arrays.binarySearch(a[q], a[x][0]) - 1;
		if (res < 0) for(;;);
		if (res == a[q].length) res = 0;
		return res;
	}
	
	void solve() throws Exception {
		int n = nextInt();
		int m = nextInt();
		Arrays.fill(v, null);
		for (int i = 0; i < n - 1; i++) {
			int b = nextInt() - 1;
			int e = nextInt() - 1;
			v[b] = new Edge(b, e, v[b]);
			v[e] = new Edge(e, b, v[e]);
		}
		rl = C; h[0] = 0;
		dfs(0);
		for (int i = 0; i < n; i++) {
			a[i] = new int[al[i].size()];
			for (int j = 0; j < a[i].length; j++) a[i][j] = al[i].get(j);
		}
		for (int i = C - 1; i >= 1; i--) {
			if (h[rm[2 * i]] < h[rm[2 * i + 1]]) rm[i] = rm[2 * i]; else rm[i] = rm[2 * i + 1];
		}
		for (int i = 0; i < m; i++) {
			int k = nextInt();
			if (k == 2) {
				int x = nextInt() - 1;
				int y = nextInt() - 1;
				out.println(pathlen(x, y) - 1);
			} else {
				int x = qq[0] = nextInt() - 1;
				int y = qq[1] = nextInt() - 1;
				int z = qq[2] = nextInt() - 1;
				for (int j = 3; j < k; j++) qq[j] = nextInt() - 1;
				int l1 = lca(x, y);
				int l2 = lca(x, z);
				int l3 = lca(y, z);
				int r = l1;
				if (h[l2] > h[r]) r = l2;
				if (h[l3] > h[r]) r = l3;
				int f = 1;
				for (int j = 0; j < k; j++) {
					if (qq[j] == r) {
						f = 0;
						break;
					}
					ww[j] = rnum(r, qq[j]);
				}
				if (f == 1) {
					Arrays.sort(ww, 0, k);
					for (int j = 0; j < k - 1; j++) {
						if (ww[j] == ww[j + 1]) {
							f = 0;
							break;
						}
					}
				}
				out.println(f);
			}
		}
	}
	
	void init() {
		out.println(2);
		for (int i = 1; i <= 2; i++) {
			out.println("50000 1");
			for (int j = 1; j <= 50000; j++) if (j != i) {
				out.println(i + " " + j);
			}
			out.print("49999 ");
			for (int j = 1; j <= 50000; j++) if (j != i) {
				out.print(j + " ");
			}
			out.println();
		}
		out.close();
		System.exit(0);
	}
	
	public void run() {
		try {
			Locale.setDefault(Locale.US);
			in = new BufferedReader(new InputStreamReader(System.in));
//			in = new BufferedReader(new FileReader("inp"));
			out = new PrintWriter(System.out);
//			out = new PrintWriter("inp");
//			init();
			for (int t = nextInt(); t > 0; t--) 
				solve();
//			while (solve());
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		} finally {
			out.close();
		}
	}
 
	public static void main(String[] args) {
		new Main().run();
		//new Thread(null, new Main(), "1", 1 << 28).start();
	}
 
} 