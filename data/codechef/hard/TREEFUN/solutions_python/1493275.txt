#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <string>
#include <cmath>
#include <ctime>
#include <utility>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <sstream>
#define FOR(a,b,c) for (int a=b,_c=c;a<=_c;a++)
#define FORD(a,b,c) for (int a=b;a>=c;a--)
#define REP(i,a) for(int i=0,_a=(a); i<_a; ++i)
#define REPD(i,a) for(int i=(a)-1; i>=0; --i)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define sz(a) int(a.size())
#define reset(a,b) memset(a,b,sizeof(a))
#define oo 1000000007

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int maxn = 50007;

vector<int> a[maxn],list;
int n,m,T,f[maxn][16],d[maxn],k;
bool free1[maxn];
set<int> myset;

void DFS(int u){
	free1[u]=0;
	int v;
	REP(i,sz(a[u])){
		v=a[u][i];
		if(!free1[v]) continue;
		f[v][0]=u;
		d[v]=d[u]+1;
		DFS(v);
	}
}

int lca(int u, int v){
	if(d[u]>d[v]) swap(u,v);
	REPD(i,16) if(((d[v]-d[u])>>i)&1) v=f[v][i];
	if(u==v) return u;
	REPD(i,16) if(f[u][i]!=f[v][i]){
		u=f[u][i]; 
		v=f[v][i];
	}
	return f[u][0];
}

int getdis(int u, int v){
	int root=lca(u,v);
	return d[u]+d[v]-d[root]*2;
}

int getaccencor(int u, int d){
	REP(i,16) if((d>>i)&1) u=f[u][i];
	return u;
}

bool check(int x){
	REP(i,k) if(list[i]==x) return 0;
	myset.clear();
	int u,v;
	REP(i,k){
		u=list[i];
		if(d[u]>d[x]) u=getaccencor(u,d[u]-d[x]-1);
		if(f[u][0]==x) myset.insert(u); else myset.insert(f[x][0]);
	}
	return (sz(myset)==k);
}

int main(){
//	freopen("test.txt","r",stdin);
	scanf("%d",&T);
	REP(index,T){
		scanf("%d%d",&n,&m);
		FOR(i,1,n) a[i].clear();
		int u,v,t;
		REP(i,n-1){
			scanf("%d%d",&u,&v);
			a[u].pb(v);
			a[v].pb(u);
		}
		
		reset(free1,1); f[1][0]=0; d[1]=0; 
		DFS(1);
		FOR(i,1,15) FOR(u,1,n) f[u][i]=f[f[u][i-1]][i-1];
						
		REP(index2,m){
			scanf("%d",&k); 
			if(k==2){
				scanf("%d%d",&u,&v);
				printf("%d\n",getdis(u,v)-1);
			}else{
				list.clear();
				REP(i,k) scanf("%d",&v), list.pb(v);
				bool ok=0;
				REP(i,2) if(!ok) FOR(j,i+1,2){
					u=lca(list[i],list[j]);
					if(check(u)){
						ok=1;
						break;
					}
				}
				printf("%d\n",ok);
			}
		}
	}
	return 0;
}