#ifdef ONLINE_JUDGE
#include <bits/stdc++.h>
using namespace std;
#else
#include "header.h"
#include "debug.h"
#endif
#define sz(s) int((s).size())
#define all(x) (x).begin(),(x).end()
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
typedef long long LL; typedef vector <int> vi; typedef pair<int,int> pii; typedef map <int,int> mii; template <class T> inline T sqr(T x) {return x*x;} inline int ins(int x,int y,int m,int n){return (x>=1&&x<=m&&y>=1&&y<=n);} template <class T> inline T gcd(T a,T b){return (!b? a : gcd(b,a%b));} template <class T> inline T ABS(T x){return ((x)>0?(x):(-(x)));}
const int N = 50000 + 10;

vector <int> g[N];
int anc[N][24], dis[N], bb[N], ee[N], tim, logn;
int par[N];

void dfs (int u, int p) {
  bb[u] = tim++;
  anc[u][0] = p;
  for (int i = 1; i <= logn; ++i)
    if(anc[u][i-1] == -1) break;
    else anc[u][i] = anc[anc[u][i-1]][i-1];
  for (int v: g[u]) if(v != p) {
    par[v] = u;
    dis[v] = dis[u] + 1;
    dfs(v,u);
  }
  ee[u] = tim-1;
}

inline bool upper (int p, int q) {
  return bb[q] >= bb[p] && ee[q] <= ee[p];
}

inline int lca (int a, int b) {
  if (upper (a,b)) return a;
  if (upper (b,a)) return b;
  for (int i = logn; i >= 0; --i) if (anc[a][i] > 0)
    if (!upper(anc[a][i],b))
      a = anc[a][i];
  return anc[a][0];
}

int getCentre (int a, int b, int c) {
  int l1 = lca (a,b);
  int l2 = lca (a,c);
  int l3 = lca (b,c);
  int Temp = l1;
  if (dis[l2] > dis[Temp]) Temp = l2;
  if (dis[l3] > dis[Temp]) Temp = l3;
  int centre;
  if (Temp != a && Temp != b && Temp != c) centre = Temp;
  else centre = -1;
  return centre;
}

inline int search (int u, int len) {
  int klev = dis[u] - len;
  int stp=1;
  while (1<<stp <= dis[u]) ++stp; --stp;
  for (int i=stp; i>=0; i--)
    if (dis[u] - (1<<i) >= klev)
      u = anc[u][i];
  return u;
}

inline int getNeigh (int centre, int k) {
  if (k == centre) return centre;
  else if (upper (centre,k)) return search (k, dis[k] - dis[centre] - 1);
  else return par[centre];
}

int chk[N], Tchk;
inline int solve (vector <int> nodes) {
  if (sz (nodes) == 2) {
    int a = nodes[0], b = nodes[1];
    return (dis[a] + dis[b] - 2*dis[lca(a,b)] - 2 + 1);
  }
  int a = nodes[0], b = nodes[1];
  int c = nodes[2];
  int centre = getCentre (a,b,c);
  if (centre == -1) return 0;
  chk [centre] = Tchk;
  chk [getNeigh (centre, a)] = Tchk;
  chk [getNeigh (centre, b)] = Tchk;
  chk [getNeigh (centre, c)] = Tchk;
  for (int i = 3; i < sz(nodes); ++i) {
    int x = getNeigh (centre, nodes[i]);
    if (chk[x] == Tchk) return 0;
    else chk[x] = Tchk;
  }
  return 1;
}

int main() {
  #ifndef ONLINE_JUDGE
    freopen ("in2.txt","r",stdin);
  #endif
  cin.sync_with_stdio(0); cin.tie(0);
  int t;
  cin >> t;
  for (int tc = 0; tc < t; ++tc) {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; ++i) {
      g[i+1].clear();
    }
    for (int i = 0; i < n-1; ++i) {
      int u, v;
      cin >> u >> v;
      g[u].pb(v);
      g[v].pb(u);
    }
    int root = 1;
    logn = 1; while ((1 << logn) <= n) ++logn;
    memset(anc,-1,sizeof(anc));
    tim = dis[root] = 0, dfs(root,-1);
    for (int i = 0; i < m; ++i) {
      int nn;
      cin >> nn;
      vector <int> nodes;
      for (int j = 0; j < nn; ++j) {
        int node;
        cin >> node;
        nodes.pb (node);
      }
      ++Tchk;
      cout << solve (nodes) << '\n';
    }
  }
}
