import java.io.*;
import java.util.*;

public class Main implements Runnable{
	
	public static void main(String[] args) {
		new Thread(null, new Main(), "", 1 << 26).start();
	}
	
	public void run(){
		TreeFun solver = new TreeFun();
		try {
			solver.entry();
		} catch (IOException e) {
		}
	}

	class TreeFun {
		BufferedReader br;
		PrintWriter out;
		StringTokenizer st;
		boolean eof;

		static final int LOG = 16;

		ArrayList<Integer>[] g;
		int[][] up;

		int[] depth;
		int[] timeIn, timeOut;
		int time;

		void dfs(int v, int curD, int p) {
			timeIn[v] = time++;
			depth[v] = curD;
			up[0][v] = p;
			for (int i = 1; i < LOG; i++)
				if (up[i - 1][v] == -1)
					up[i][v] = -1;
				else
					up[i][v] = up[i - 1][up[i - 1][v]];
			for (int i = 0; i < g[v].size(); i++) {
				int to = g[v].get(i);
				if (to != p)
					dfs(to, curD + 1, v);
			}
			timeOut[v] = time++;
		}

		boolean isAnc(int v1, int v2) {
			return timeIn[v1] <= timeIn[v2] && timeOut[v2] <= timeOut[v1];
		}

		int go(int v1, int v2) {
			if (isAnc(v1, v2) || isAnc(v2, v1))
				return Math.abs(depth[v1] - depth[v2]) - 1;
			int lca = lca(v1, v2);
			// System.err.println(v1 + " " + v2 + " " + lca);
			return depth[v1] + depth[v2] - 2 * (depth[lca]) - 1;
		}

		int lca(int v1, int v2) {
			if (isAnc(v1, v2))
				return v1;
			if (isAnc(v2, v1))
				return v2;
			for (int i = LOG - 1; i >= 0; i--) {
				int to = up[i][v1];
				if (to != -1 && !isAnc(to, v2))
					v1 = to;
			}
			return up[0][v1];
		}

		int useVer;
		int[] use = new int[50000];

		int up(int v, int d) {
			for (int i = 0; d > 0; i++, d >>= 1) {
				if ((d & 1) == 1)
					v = up[i][v];
			}
			return v;
		}

		boolean good(int root, int[] vs) {
			useVer++;
			boolean hadUp = false;
			for (int i = 0; i < vs.length; i++) {
				int v = vs[i];
				if (v == root)
					return false;
				if (!isAnc(root, v)) {
					if (!hadUp)
						hadUp = true;
					else
						return false;
				}

				int to = up(v, depth[v] - depth[root] - 1);
				if (use[to] == useVer)
					return false;
				else
					use[to] = useVer;
			}
			return true;
		}

		void solve() throws IOException {
			int n = nextInt();
			int q = nextInt();
			g = new ArrayList[n];
			for (int i = 0; i < n; i++)
				g[i] = new ArrayList<Integer>();
			for (int i = 0; i < n - 1; i++) {
				int v1 = nextInt() - 1;
				int v2 = nextInt() - 1;
				g[v1].add(v2);
				g[v2].add(v1);
			}

			up = new int[LOG][n];
			depth = new int[n];
			timeIn = new int[n];
			timeOut = new int[n];
			time = 0;
			dfs(0, 0, -1);

			while (q-- > 0) {
				int k = nextInt();
				int[] vs = new int[k];
				for (int i = 0; i < k; i++)
					vs[i] = nextInt() - 1;
				if (k == 2) {
					out.println(go(vs[0], vs[1]));
				} else {

					int cand = lca(vs[0], vs[1]) ^ lca(vs[1], vs[2])
							^ lca(vs[2], vs[0]);
					out.println(good(cand, vs) ? 1 : 0);
				}
			}
		}

		void entry() throws IOException {
			br = new BufferedReader(new InputStreamReader(System.in));
			out = new PrintWriter(System.out);
			int t = nextInt();
			while (t-- > 0)
				solve();
			out.close();
		}

		String nextToken() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (Exception e) {
					eof = true;
					return null;
				}
			}
			return st.nextToken();
		}

		String nextString() {
			try {
				return br.readLine();
			} catch (IOException e) {
				eof = true;
				return null;
			}
		}

		int nextInt() throws IOException {
			return Integer.parseInt(nextToken());
		}

		long nextLong() throws IOException {
			return Long.parseLong(nextToken());
		}

		double nextDouble() throws IOException {
			return Double.parseDouble(nextToken());
		}
	}
}