#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1001001001
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define SZ(x) ((int)((x).size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define IN(x,y) ((y).find((x))!=(y).end())
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define IOS ios_base::sync_with_stdio(0);

#define N 100007
#define LOGN 17
int n, ojc[N], // input
pos[N], anc[LOGN+1][N]; // temp

int getPos(int u) {
   if (pos[u] == -1) pos[u] = getPos(ojc[u])+1;
   return pos[u];
}

void init(int root) {
   FORI(i,n) anc[0][i] = ojc[i];
   FORI(i,n) pos[i] = -1;
   pos[root] = 0;
   FORI(i,n) if (pos[i] == -1) getPos(i);
   FORI(i,LOGN) FORI(j,n) anc[i][j] = anc[i-1][anc[i-1][j]];
}

int lca (int u, int v) {
   if (pos[u] < pos[v]) swap(u,v);
   int diff = pos[u] - pos[v];
   REPD(k,LOGN,0) if ((1<<k) <= diff) {
      diff -= 1<<k;
      u = anc[k][u];
   }
   // teraz sa w tej samej odleglosci od roota
   if (u==v) return u;
   REPD(k,LOGN,0) if (anc[k][u] != anc[k][v]) {
      u = anc[k][u];
      v = anc[k][v];
   }
   return ojc[u];
}

int lastnum, largestnuminsubtree[N], newnum[N], oldnum[N], depth[N];
vi adj[N], children[N];

void dfs (int v, int p, int d) {
   newnum[v] = ++lastnum;
   oldnum[newnum[v]] = v;
   largestnuminsubtree[newnum[v]] = newnum[v];
   FOREACH(x,adj[v]) if (*x != p) {
      dfs(*x,v,d+1);
      REMAX(largestnuminsubtree[newnum[v]], largestnuminsubtree[newnum[*x]]);
      children[newnum[v]].pb(largestnuminsubtree[newnum[*x]]);
   }
   ojc[newnum[v]] = p==-1 ? -1 : newnum[p];
   depth[newnum[v]] = d;
}
#define dist(a,b) (depth[a] + depth[b] - 2*depth[lca(a,b)])

int main () {
   TESTS {
      scanf("%d", &n);
      FORI(i,n) adj[i].clear(), children[i].clear();
      wez(queries)
      lastnum = 0;
      FOR(i,n-1) {
         wez2(a,b)
         adj[a].pb(b);
         adj[b].pb(a);
      }
      
      dfs(1,-1,0);
      init(1);
      
      while (queries--) {
         wez(ki)
         vi vertices;
         while (ki--) {
            wez(x)
            vertices.pb(newnum[x]);
         }
         if (SZ(vertices) == 2) {
            pisz(dist(vertices[0], vertices[1]) - 1);
         } else {
            int v = vertices[0], w = vertices[1], x = vertices[2];
            int distvw = dist(v,w), distvx = dist(v,x), distwx = dist(w,x);
            if (distvw == distvx + distwx ||
                distwx == distvw + distvx ||
                distvx == distvw + distwx) {
               pisz(0); // wspolliniowe
            } else {
               // pisz 1 lub 0
               int lcavw = lca(v,w), lcavx = lca(v,x), lcawx = lca(w,x);
               vector<pii> vec;
               vec.pb(mp(depth[lcavw],lcavw));
               vec.pb(mp(depth[lcavx],lcavx));
               vec.pb(mp(depth[lcawx],lcawx));
               int lc = max_element(ALL(vec))->se;
               vector<int> komponenty;
               bool fail = 0;
               FOREACH(it,vertices) {
                  int u = *it;
                  if (u == lc) {
                     fail = 1;
                     break;
                  }
                  int next = lower_bound(ALL(children[lc]), u) - children[lc].begin();
                  if (next == SZ(children[lc]) || u < lc) {
                     komponenty.pb(-1);
                  } else {
                     komponenty.pb(children[lc][next]);
                  }
               }
               if (!fail && SZ(set<int>(ALL(komponenty))) == SZ(komponenty)) {
                  pisz(1);
               } else {
                  pisz(0);
               }
            }
         }
      }
   }
}
