#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool find(int n, vector<int> x)
{
	int digit; int count = 0; bool found = false;
	while (n > 0)
	{
		digit = n % 10;
		n = n - digit;
		n /= 10;

		found = false;
		for (int k = 0; k < x.size(); k++)
		{
			if (x[k] == digit)
			{
				found = true; break;
			}

		}

		if (found == false) return false;
	}

	return true;
}


int main()
{
	int c = 0;
	std::vector<int> dig;
	int three;
	int two;
	int r1; int r2; int r3;


	cin >> c;
	int t;
	for (int i = 0; i < c; i++)
	{
		cin >> t;
		dig.push_back(t);
	}
	std::sort(dig.begin(), dig.end());

	int counter = 0;
	
	for (int j = 0; j < dig.size(); j++)
	{
		for (int k = 0; k < dig.size(); k++)
		{

			for (int l = 0; l < dig.size(); l++)
			{
				three = 100 * dig[j] + 10 * dig[k] + dig[l];

				for (int m = 0; m < dig.size(); m++)
				{
					for (int n = 0; n < dig.size(); n++)
					{
						two = 10 * dig[m]  + dig[n];
						r1 = three*dig[n];
						r2 = three*dig[m];
						r3 = three*two;


						if (r1<1000 && r2<1000 && r3<10000 && find(r1, dig) && find(r2, dig) && find(r3, dig))
						{
							counter++;
							//cout << "3 " << three << endl;
							//cout << "2 " << two << endl;
						}

					}
				}

			}
		}
	}

	cout << counter << endl;
	//system("pause");
	return 0;

}