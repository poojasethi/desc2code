#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

//      * * * 0
//   x    * * 1
//    -------
//      * * * 2
//    * * *   3
//    -------
//    * * * * 4

int nums[2];
vector<int> digits;
int Solutions = 0;

inline bool NumIsGood(int num, int length)
{
    switch(length)
    {
        case 0:
           break;
        case 3:
           if(num > 99 && num < 1000)
                break;
           return false;
        case 4:
           if(num > 999 && num < 10000)
                break;
           return false;
    }

    int dig;
    while(num)
    {
        dig = num % 10;
        if(find(digits.begin(), digits.end(), dig) == digits.end())
            return false;
        num /= 10;
    }
    return true;
}

inline bool ResultIsGood()
{
    return (NumIsGood(nums[0]*nums[1], 4) &&
       NumIsGood(nums[0]*(nums[1]/10), 3) &&
       NumIsGood(nums[0]*(nums[1]%10), 3));

}

inline void Solve()
{
    for(nums[0] = 100; nums[0] < 1000; nums[0]++)
    {
        if(!NumIsGood(nums[0], 0))
            continue;
        for(nums[1] = 10; nums[1] < 100; nums[1]++)
        {
            if(!NumIsGood(nums[1], 0))
                continue;
            if(ResultIsGood())
                Solutions++;
        }

    }
}

int main()
{
    int N, tmp;
    cin>>N;
    for(int i = 0; i < N; i++)
    {
        cin>>tmp;
        digits.push_back(tmp);
    }

    Solve();
    cout<<Solutions;

    return 0;
}
