#include <cstdio>
#include <string>
#include <cmath>
#include <algorithm>
#include <memory.h>
#include <vector>
#include <map>
#include <set>
#include <stack>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<double, double> pdd;
typedef pair<pii, int> p3i;
typedef vector<int> vi;
typedef vector<pii> vii;
typedef vector<p3i> v3i;
typedef vector<vii> vvii;
typedef vector<p3i> vp3i;
typedef long double ld;
typedef vector<ld> vld;

#define pb push_back
#define mp make_pair
#define REP(i, n) for (int (i) = 0; (i) < (n); (i)++)
#define REPD(i, n) for (int (i) = (n) - 1; (i) >= 0; (i)--)
#define FOR(i, a, b) for (int (i) = (a); (i) < (b); (i)++)
#define FORD(i,a, b) for (int (i) = (a); (i) >= (b); (i)--)
#define sz(v) (int)(v).size()
#define all(v) (v).begin(), (v).end()
#define rv(v) reverse(all(v))
#define CL(v, val) memset((v), (val), sizeof((v)))
#define SORT(a) sort(all(a))
#define un(v) sort(v), (v).resize(unique(all(v)) - (v).begin())
#define eps 1.0e-11
#define X first
#define Y second
#define bit(n) (1 << (n))
#define bit64(n) (ll(1) << (n))
#define sqr(x) ((x) * (x)
#define N 5000005
#define MOD 1000000007

ll dp[N];
bool prime[N];
int primes[N];

bool sleve()
{
  for (int i = 2; i * i < N; i++)
  {
    if (prime[i])
    {
      for (int j = i * i; j < N; j += i)
      {
        prime[j] = 0;
      }
    }
  }
}

int main(void)
{
  CL(prime, 1);
  int t;
  scanf("%d", &t);
  prime[1] = 0;
  sleve();
  primes[0] = primes[1] = 0;
  FOR(i, 2, N)
  {
    primes[i] = primes[i-1] + (prime[i] ? 1 : 0);
  }
  dp[1] = 1;
  FOR(i, 2, N)
  {
    dp[i] = (dp[i-1] * (primes[i] + 1)) % MOD;
  }

  while (t--)
  {
    int n;
    scanf("%d", &n);
    printf("%lld\n", dp[n]);
  }

  return 0;
}
