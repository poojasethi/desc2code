#include <bits/stdc++.h>
using namespace std;
#define infinity (1000000007)
#define pii pair<int,int>
#define ppi pair<pii,int>
#define ppp pair<pii,pii>
#define ll long long
const int mod=1000000007;
long long pwr(long long a,long long b,long long mod)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2,mod);
  temp=(temp*temp)%mod;
  if(b&1)
    temp=(temp*a)%mod;
  return temp;
}
long long pwr(long long a,long long b)
{
  if(b==0)
    return 1;
  long long temp=pwr(a,b/2);
  temp=(temp*temp);
  if(b&1)
    temp=(temp*a);
  return temp;
}
long long gcd(long long a,long long b)
{
  return b==0?a:gcd(b,a%b);
}
long long lcm(long long a,long long b)
{  
  return (a/gcd(a,b))*b;
}
long long modularInverse(long long a,long long m)
{
      return pwr(a,m-2,m);
}
bool isPrime[5000001];

long long f[5000001];
int primesUpto[5000001];
int main(void)
{
  f[1]=1;
  primesUpto[1]=1;
  memset(isPrime,true,sizeof(isPrime));
  isPrime[0]=isPrime[1]=false;
  for(int i=2;i<=5000000;++i)
  { 
    primesUpto[i]=primesUpto[i-1];
    if(isPrime[i])
    { 
      ++primesUpto[i];
      for(int j=i+i;j<=5000000;j+=i)
        isPrime[j]=false;
    }
  } 
  for(int i=2;i<=5000000;++i)
  {
    // f[i]=f[i-1];
    // if(isPrime[i])
      f[i]=(f[i-1]*primesUpto[i])%mod;
    // else
    //   f[i]=(f[i-1]*(i-1))%mod;
  } 

  int t;
  cin>>t;
  while(t--)
  {
    int n;
    scanf("%d",&n);
    printf("%lld\n",f[n]);
    // cin>>n;
    // cout<<f[n]<<endl;
  }
}