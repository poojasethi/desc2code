//Shakim :D
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <utility>
#include <map>
#include <set>
#include <string>
using namespace std;
typedef long long LL;
#define IT iterator
#define getcx getchar
#define INF (int(1e9))
#define INFL (LL(1e18))
#define pii pair< int,int >
#define piii pair< pii , int >
#define temp 0
#define wait 1
#define perm 2
struct comp
{
    bool operator()(const pii &a,const pii &b)
    {
        return a.second>b.second;
    }
};
struct myclass {
  bool operator() (const pii &a,const pii &b)
  {
        return a.first>b.first;
  }
} myobject;
#define in2(n,m) scanf("%d %d",&n,&m);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define mod 1000000007
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define lim 5000000
int a[lim+5];
vector<int> prime;
void pre()
{
    int i,j,t;
    t=2;
    prime.push_back(2);
    prime.push_back(3);
    for(i=5; i*i<=lim; )
    {
        if(a[i]==0)
        {
            for(j=i*i; j<=lim; j=j+i+i)
            {
                a[j]=1;
            }
        }
        i=i+t;
        t=6-t;
    }
    t=2;
    for(i=5; i<=lim; )
    {
        if(a[i]==0)
        {
            prime.push_back(i);
        }
        i=i+t;
        t=6-t;
    }
}
LL ans[5000006];
int p[5000006];
int main()
{
    int t,i,n,curr,cnt;
    pre();
    curr=0;
    cnt=0;
    p[0]=0;
    p[1]=0;
    for(i=2; i<=lim; i++)
    {
        if(prime[curr]==i)
        {
            cnt++;
            curr++;
        }
        p[i]=cnt;
    }
    ans[1]=1;
    for(i=2; i<=lim; i++)
    {
        ans[i]=ans[i-1]*(LL(1+p[i]));
        if(ans[i]>=mod)
            ans[i]%=mod;
    }
    in(t);
    while(t--)
    {
        in(n);
        printf("%lld\n",ans[n]);
    }
    return 0;
}
