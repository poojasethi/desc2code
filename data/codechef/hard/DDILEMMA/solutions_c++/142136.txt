//TODO: Add digit support.
//TODO: Fix adj thingy

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
//#include <iostream>
//using namespace std;

#define RULED_OUT 3
#define SAME 5
#define INITIAL_PHASE 0
#define PHASE1 1
#define MAX_LENGTH 32
//#define DEBUG 
//#define EXCEPTION

void Print(const char **registered,const char **requested,int m,int n);
int Maximum_surcharge(const char **registered,const char *requested,int m);
int Surcharge(const int point);
int Point(const char *registereed,const char *requested);
int Point1(const char *registered,const char *requested);
int Point2(const char *registered,const char *requested);
int Point3(const char *registered,const char *requested);
void Print_Map();
void Fill_Map();

//Use hash map.

int pos[150];

class Base
{
public:
const char *first;
const char *second;
int i,j;
int point;
int len1,len2;
Base()
{

}
Base(const char *registered,const char *requested)
{
int tmp;
i=0;j=0;point=0;
len1=strlen(registered);
len2=strlen(requested);
if(len1>len2)
{
first=requested;
second=registered;
tmp=len1;
len1=len2;
len2=tmp;

}
else
{
first=registered;
second=requested;
}
}

~Base()
{
}

int Move_Till_Insert();
int Move_Till_Delete();
int Move_Till_Replacement();
int Move_Till_Adj_Replacement();
int getPoint();
void Reset();
bool isEnd();
};

bool Base::isEnd()
{
if(i==len1 && j==len2)
return true;
else return false;

}
void Base::Reset()
{
i=0;j=0;
point=0;
//should i reset point here?
}

int Base::getPoint()
{
return point;
}

int Base::Move_Till_Insert()
{
bool done=false;
while(j<len2)
{
if(i==len1)
{
if(!done)
{
j++;
point++;
}
return 1;
}
if(first[i]==second[j])
{
j++;i++;
}
else
{
if(done)
return 1;
j++;
point++;
done=true;
}
}
return point;

}

int Base::Move_Till_Delete()
{
bool done=false;
while(i<len1)
{
if(i==len1)
{
return 1;
}
if(first[i]==second[j])
{
j++;i++;
}
else
{
if(done)
return 1;
i++;
point++;
done=true;
}
}
return point;

}

int Base::Move_Till_Replacement()
{
bool done=false;
while(j<len2)
{
if(i==len1)
{
return 1;
}
if(first[i]==second[j])
{
j++;i++;
}
else
{
if(done)
return 1;
if(abs(pos[first[i]]-pos[second[j]])==1)
point++;
else point=point+2;
j++;i++;
done=true;
}
}
return point;

}

int Base::Move_Till_Adj_Replacement()
{
bool done=false;
while(j<len2)
{
if(i==len1)
{
return 1;
}
if(first[i]==second[j])
{
j++;i++;
}
else
{
if(done)
return 1;
if(abs(pos[first[i]]-pos[second[j]])!=1)
return 1;
j++;i++;
point++;
done=true;
}
}
return point;

}

int main()
{
const char **registered;
const char **requested;
int m,n,i,j;
scanf("%d %d",&m,&n);

Fill_Map();

#ifdef DEBUG
Print_Map();
#endif

registered=(const char **)malloc(sizeof(char *)*m);
requested=(const char **)malloc(sizeof(char *)*n);

for(i=0;i<m;i++)
{
registered[i]=(char *)malloc(sizeof(char)*MAX_LENGTH);
scanf("%s",registered[i]);

}

for(j=0;j<n;j++)
{

requested[j]=(char *)malloc(sizeof(char)*MAX_LENGTH);
scanf("%s",requested[j]);
}

#ifdef DEBUG
Print(registered,requested,m,n);
#endif

for(i=0;i<n;i++)
{
printf("%d\n",Maximum_surcharge(registered,requested[i],m));
}

return 0;
}

void Print(const char **registered,const char **requested,int m,int n)
{
int i,j;
for(i=0;i<m;i++)
printf("%s\n",registered[i]);
printf("\n");
for(j=0;j<n;j++)
printf("%s\n",requested[j]);

}

int Maximum_surcharge(const char **registered,const char *requested,int m)
{
int maxsurcharge=0;
int surcharge;
int i;
int point=3;
int count_domain_names=0;
for(i=0;i<m;i++)
{
point=Point(registered[i],requested);
#ifdef DEBUG
printf("pair: %s %s %d\n",registered[i],requested,point);
#endif
if(point == 1 || point == 2)
count_domain_names++;
if(point == SAME)
{
return -1;
}
surcharge=Surcharge(point);
if(surcharge > maxsurcharge)
maxsurcharge=surcharge;
}
//printf("count domain names %d\n",count_domain_names);
if(count_domain_names!=0)
return (maxsurcharge+int(log10(count_domain_names)));
else return maxsurcharge;
}

int Surcharge(const int point)
{
if(point == 1)
return 50;
if(point == 2)
return 25;
if(point == RULED_OUT)
return 0;
if(point == SAME)
return -1;
}

int Point(const char *registered,const char *requested)
{
int len1,len2;
len1=strlen(registered);
len2=strlen(requested);
int len_smaller;
int point;
if(abs(len1-len2) >2)
return RULED_OUT;

if(strcmp(registered,requested)==0)
return SAME;

if(len1==len2)
{
point=Point1(registered,requested);
}
else if (abs(len1-len2)==1)
point=Point2(registered,requested);
else  if (abs(len1-len2)==2)
point=Point3(registered,requested);
else point = RULED_OUT;
return point;
}

//same length
int Point1(const char *registered,const char *requested)
{
Base Machine(registered,requested);
Machine.Move_Till_Adj_Replacement();
if(Machine.getPoint() <= 2 && Machine.isEnd()) return Machine.getPoint();
Machine.Reset();
Machine.Move_Till_Adj_Replacement();
Machine.Move_Till_Adj_Replacement();

if(Machine.getPoint()<=2 && Machine.isEnd()) return Machine.getPoint();

Machine.Reset();
Machine.Move_Till_Replacement();
if(Machine.getPoint()<=2 && Machine.isEnd()) return Machine.getPoint();
Machine.Reset();
Machine.Move_Till_Insert();
Machine.Move_Till_Delete();
if(Machine.getPoint()<=2 && Machine.isEnd()) return Machine.getPoint();
Machine.Reset();
Machine.Move_Till_Delete();
Machine.Move_Till_Insert();
if(Machine.getPoint()<=2 && Machine.isEnd()) return Machine.getPoint();
else return RULED_OUT;
}

//2
int Point3(const char *registered,const char *requested)
{
Base Machine(registered,requested);
Machine.Reset();
Machine.Move_Till_Insert();
Machine.Move_Till_Insert();
if(Machine.getPoint()<=2 && Machine.isEnd()) return Machine.getPoint();
else return RULED_OUT;
}

//1
int Point2(const char *registered,const char *requested)
{
Base Machine(registered,requested);
Machine.Reset();
Machine.Move_Till_Insert();
Machine.Move_Till_Adj_Replacement();
if(Machine.getPoint()<=2 && Machine.isEnd()) return Machine.getPoint();
Machine.Reset();
Machine.Move_Till_Adj_Replacement();
Machine.Move_Till_Insert();
if(Machine.getPoint()<=2 && Machine.isEnd()) return Machine.getPoint();
else return RULED_OUT;
}

void Print_Map()
{
int i;
for(i='a';i<='z';i++)
printf("%d ",pos[i]);
printf("\n");

for(i='0';i<='9';i++)
printf("%d ",pos[i]);
printf("\n");


}
void Fill_Map()
{
pos['a']=1;pos['s']=2;pos['d']=3;pos['f']=4;pos['g']=5;pos['h']=6;pos['j']=7;pos['k']=8;pos['l']=9;

pos['q']=11;pos['w']=12;pos['e']=13;pos['r']=14;pos['t']=15;pos['y']=16;pos['u']=17;pos['i']=18;pos['o']=19;pos['p']=20;

pos['z']=22;pos['x']=23;pos['c']=24;pos['v']=25;pos['b']=26;pos['n']=27;pos['m']=28;

pos['1']=30;pos['2']=31;pos['3']=32;pos['4']=33;pos['5']=34;pos['6']=35;pos['7']=36;pos['8']=37;pos['9']=38;pos['0']=39;
}

