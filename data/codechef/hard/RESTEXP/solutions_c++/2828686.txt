#include<iostream>
#include<stdio.h>
#include<string.h>
#include<algorithm>
#include<sstream>
#include<vector>
#include<queue>
#include<set>
#include<cmath>
using namespace std;
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define all(x) x.begin(),x.end()
#define ll long long
#define inf 1000000007
#define eps 1e-7
#define pi acos(-1)
#define N 35
#define mod 19871118
int a[N],dp[N][N][N],son[N],s[N];
vector<int>g[N];
void root(int u,int fa)
{
    son[u]=0;
    for(int i=0;i<(int)g[u].size();i++)
    {
        int j=g[u][i];
        if(j==fa)continue;
        s[j]=son[u];son[u]=j;
        root(j,u);
    }
}
int dfs(int u,int c,int d,int fa)
{
    if(u==0)
    {
        if(c&&d)return max(0,a[fa]);
        return 0;
    }
    int &ret=dp[u][c][d];
    if(ret+1)return ret;
    ret=dfs(s[u],c,d,fa);
    for(int i=0;i<=c;i++)
    for(int j=0;j<d;j++)
    {
        ret=max(ret,dfs(son[u],i,j,u)+dfs(s[u],c-i,d-1-j,fa));
    }
    return ret;
}
int out;
void trace(int u,int c,int d,int fa)
{
    if(u==0)
    {
        if(c&&d&&a[fa]>0)
        {
            printf("build %d\n",fa);out++;
        }
        return;
    }
    int ret=dp[u][c][d];
    if(ret==dfs(s[u],c,d,fa))
    {
        trace(s[u],c,d,fa);return;
    }
    for(int i=0;i<=c;i++)
    for(int j=0;j<d;j++)
    {
        if(ret==dfs(son[u],i,j,u)+dfs(s[u],c-i,d-1-j,fa))
        {
            printf("transfer %d %d %d\n",fa,u,i);out++;
            trace(son[u],i,j,u);
            trace(s[u],c-i,d-1-j,fa);
            return;
        }
    }
}
int main()
{
   // freopen("in.txt","r",stdin);
    int i,j,ca=0,T,n,m,k,c,d;
    while(~scanf("%d%d%d",&n,&c,&d))
    {
        for(i=1;i<=n;i++)g[i].clear(),scanf("%d",&a[i]);
        for(i=1;i<n;i++)
        {
            scanf("%d%d",&j,&k);
            g[j].pb(k);g[k].pb(j);
        }
        memset(dp,-1,sizeof(dp));
        root(1,0);s[1]=0;
        int ans=dfs(son[1],c,d,1);
        printf("%d\n",ans);
        out=0;
        trace(son[1],c,d,1);
        for(;out<d;out++)puts("nothing");
    }
	return 0;
}
