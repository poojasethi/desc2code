#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <cstring>
#define oo (int)1e9
#define fill( a , v ) memset( a , v , sizeof (a) )
#define bits( x ) __builtin_popcount( x )
#define gcd( a , b ) __gcd( a, b )
#define lcm( a , b ) (a/gcd( a, b ) ) * b
#define s(n)scanf( "%d" , &n )
#define add push_back
const int mxn = 3000000;
const int mod  = 100000007;
typedef long long ll;
#define pii pair<int,int>
using namespace std;
#include <cassert>
#define sf(n) scanf( "%lf" , &n )

int child[32];
int first[32],rights[32];
int adj[32][32];
int val[32];
int n;

void dfs( int c , int baap )
{
    int ret = 0;
     int prev = -1;
     for(int i=1;i<=n;i++)
     if( adj[c][i] && i != baap )
     {
         if( first[c] == -1 )first[c] = i;
         if( prev != -1 )rights[prev] = i;
         prev = i;
         dfs( i , c );
     }     
}

int dp[32][32][32];
int distribute( int p , int chefs , int days );
int solve( int p , int chefs , int days )
{
    if( chefs <= 0 || days <= 0 )return 0;
    
    //if( first[p] == -1 )return max( val[p] , 0 );
    
    return max( distribute( first[p] , chefs , days ) , val[p] + distribute( first[p] , chefs-1 , days-1 ) );
}



int distribute( int p , int chefs , int days )
{
    if( chefs <= 0 || days <= 0 || p == -1 )return 0;
    
    int &d = dp[p][chefs][days];
    if( ~d )return d;
    
    d = 0;
    
    for( int i = 0 ; i <= chefs ;i++ )
    {
         for( int j = 0 ; j <= days ; j++ )
         d = max( d , solve( p , i , j - ( i > 0 )  ) + distribute( rights[p] , chefs - i , days - j ) );
    }
    
    return d;
}

bool take[32];
int req[32];
void rec2( int p , int chefs , int days );
void rec( int p , int chefs , int days )
{
     if( chefs <= 0 || days <= 0 )return ;
     
     int t = solve( p , chefs , days );
     
     if( t == (val[p] + distribute( first[p] , chefs-1 , days-1 )) ) 
     {
          take[p] = req[p] = 1;
          rec2( first[p] , chefs-1 , days-1 );
     }
     else rec2( first[p] , chefs , days );
     
}
void rec2( int p , int chefs , int days )
{
     if( chefs <= 0 || days <= 0 || p == -1 )return;
     
    int t = distribute( p , chefs , days );
    if( t == 0 ) return ;
    for( int i = 0 ; i <= chefs ;i++ )
    {
         for( int j = 0 ; j <= days ; j++ )
         {
              int d = solve( p , i , j - ( i > 0 )  ) + distribute( rights[p] , chefs - i , days - j ) ;
              if( t == d )
              {                
                  rec( p , i , j - (i>0) );
                  rec2( rights[p] , chefs - i , days - j );                    
                  return;
              }
         }
    }     
}

void dfs2( int c , int baap )
{
     for(int i=1;i<=n;i++)
     if( adj[c][i] && i != baap )
     {
         dfs2( i , c );
         req[c] += req[i];
     }
}
int printed;
void transfer( int c , int baap )
{
     if( req[c] == 0 )return;
     
     for(int i=1;i<=n;i++)
     if( adj[c][i] && i != baap && req[i] > 0 )
     {
         if( take[c] )
         {
             printf( "transfer %d %d %d\n" , c , i , req[i] );
             printed++;
             transfer( i , c ) ;
         }
         else
         {
             printf( "transfer %d %d %d\n" , c , i , req[i] );
             printed++;
             transfer( i , c ) ;             
         }
     }
}
int C,D;


int main()
{
    fill( first , -1 );
    printed = 0;
    int A,B;
    s(n);s(C);s(D);
    for(int i=1;i<=n;i++)s( val[i] );
    for(int i=0;i<n-1;i++)
    {
      s(A);s(B);
      adj[A][B] = adj[B][A] = 1;
    }
    dfs( 1 , -1 );
    fill( dp , -1 );
    cout << solve( 1 , C , D ) << endl;
    rec( 1 , C , D );
    dfs2(  1 , -1 );
    transfer( 1 , -1 );
    for(int i=1;i<=n;i++)
    if( take[i] )
    {
        printf( "build %d\n" , i );
        printed++;
    }
    D -= printed;
    while( D-- > 0 ) puts( "nothing" );
    //system( "pause" );
}
