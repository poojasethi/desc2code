/*codedevloper*/
#include<set>
#include<queue>
#include<cstdio>
#include<algorithm>
#define	mp make_pair
#define	pb push_back
#define	rep(i,n)for(int i=0;i<n;i++)
using namespace std;
typedef	vector<int>	vi;
typedef	vector<vi>	vvi;
typedef	pair<int,int>	pii;
int n,n_chef,profit[30];
pii f[30][30];		
pii finv[30][30];	
pii calcMaxProfit(int stat,int remday){
	vector<pii> a;
	rep(i,n) if(stat&(1<<i)) a.pb(mp(profit[i],i));
	sort(a.begin(),a.end(),greater<pii>());
	int n_bld=min(min(n_chef,remday),(int)a.size());
	int pres=0,sres=0;
	rep(i,n_bld)if(a[i].first>0){
		pres+=a[i].first;
		sres|=(1<<a[i].second);
	}
	return mp(pres,sres);
}
void reasm(int u,vvi &connect){
	int csz=connect[u].size();
	rep(i,csz){
		int v=connect[u][i];
		reasm(v,connect);
	}
	vector<pii> sub;
	rep(i,csz){
		int v=connect[u][i];
		if(connect[v].size()==0)	sub.pb(mp(-profit[v],v));
		else	return;
	}
	sort(sub.begin(),sub.end());
	int o=u;
	rep(i,sub.size()){
		int v=sub[i].second;
		connect[u].clear();
		connect[u].pb(v);
		f[o][v]=mp(u,v);
		u=v;
	}
}
int main(){
	int n_day;
	scanf("%d%d%d",&n,&n_chef,&n_day);
	rep(i,n)	scanf("%d",profit+i);
	vi toporder;
	vvi connect(n);
	{
		bool adj[30][30]={};
		rep(i,n-1){
			int u,v;	scanf("%d%d",&u,&v);
			u--,v--;
			adj[u][v]=adj[v][u]=true;
		}
		toporder.pb(0);
		bool visited[30]={};	visited[0]=true;
		queue<int> qu;	qu.push(0);
		while(!qu.empty()){
			int u=qu.front();	qu.pop();
			rep(v,n)if(adj[u][v] && !visited[v]){
				toporder.pb(v);
				connect[u].pb(v);
				visited[v]=true;
				qu.push(v);
			}
		}
	}
	vvi xconnect=connect;
	reasm(0,xconnect);
	rep(u,n)rep(v,n){
		pii a=f[u][v];
		finv[a.first][a.second]=mp(u,v);
	}
	set<int> movable[30];
	movable[0].insert(1);	
	for(int d=1;d<n_day;d++){
		set<int>::iterator it;
		for(it=movable[d-1].begin();it!=movable[d-1].end();++it){
			int stat=*it;
			rep(u,n)if(stat&(1<<u)){
				rep(i,xconnect[u].size())if((stat&(1<<xconnect[u][i]))==0){
					movable[d].insert(stat|(1<<xconnect[u][i]));
				}
			}
		}
	}
	int pmax=0,smax=0,dmax=0;
	rep(d,n_day){
		set<int>::iterator it;
		for(it=movable[d].begin();it!=movable[d].end();++it){
			int stat=*it;
			pii a=calcMaxProfit(stat,n_day-d);
			if(pmax<a.first){
				pmax=a.first;
				smax=a.second;
				dmax=d;
			}
		}
	}
	printf("%d\n",pmax);
	int chef[30]={};
	for(int i=toporder.size()-1;i>=0;i--){
		int u=toporder[i];
		if(smax&(1<<u))	chef[u]++;
		rep(i,connect[u].size()){
			int v=connect[u][i];
			chef[u]+=chef[v];
		}
	}
	rep(i,toporder.size()){
		int u=toporder[i];
		rep(i,connect[u].size()){
			int v=connect[u][i];
			if(chef[v]>0)	printf("transfer %d %d %d\n",u+1,v+1,chef[v]);
		}
	}
	vi bld;
	rep(u,n) if(smax&(1<<u)) bld.pb(u);
	for(int d=dmax,i=0;d<n_day;d++){
		if(i<bld.size())	printf("build %d\n",bld[i++]+1);
		else			puts("nothing");
	}
	return 0;
}