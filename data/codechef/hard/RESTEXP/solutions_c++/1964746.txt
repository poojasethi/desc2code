#include <iostream>
#include <algorithm>
#include<string.h>
#include <list>
#include<queue>
#include<vector>
#include <cmath>
#define mp make_pair
using namespace std;
#define pii pair<int,int>
#define x first
#define y second
#define inf 100000000
#define N 35
int n,c,d,out,sabil[N],child[N],g[N][N],s[N],dp[N][N][N];
void root(int u,int fa)
{
 	for(int i=1;i<=n;i++)
 	if(g[u][i]&&i!=fa)
 	{
 	 sabil[i]=child[u];
 	 child[u]=i;
 	 root(i,u);
	}
}
int DP(int node,int pa,int c,int d)
{
 if(node==0)
 {
  if(c&&d)return max(0,s[pa]);
  else return 0;
 }
 int &ret=dp[node][c][d];
 if(ret!=-1)return ret;
 ret=DP(sabil[node],pa,c,d);
 for(int i=1;i<=c;i++)
 for(int j=0;j<d;j++)
 ret=max(ret,DP(child[node],node,i,j)+DP(sabil[node],pa,c-i,d-1-j));
 return ret;
}
void trace(int node,int pa,int c,int d)
{
 if(node==0)
 {
  if(c&&d&&s[pa]>=0)
  {printf("build %d\n",pa);out++;}
 }
 else
 {
  int ret=DP(node,pa,c,d);
  if(ret==DP(sabil[node],pa,c,d))
  {trace(sabil[node],pa,c,d);return;}
  for(int i=1;i<=c;i++)
  for(int j=0;j<d;j++)
  if(ret==DP(child[node],node,i,j)+DP(sabil[node],pa,c-i,d-1-j))
  {
  	out++;
  	printf("transfer %d %d %d\n", pa,node,i);
  	trace(child[node],node,i,j);
  	trace(sabil[node],pa,c-i,d-1-j);
  	return;
  }
 }
}
int main()
{
  //freopen("in.txt","r",stdin);
  int i,u,v;
  while(~scanf("%d%d%d",&n,&c,&d))
  {
   for(i=1;i<=n;i++)scanf("%d",&s[i]);
   memset(g,0,sizeof(g));
   for(i=1;i<n;i++)
   {
    scanf("%d%d",&u,&v);
    g[u][v]=g[v][u]=1;
   }
   memset(child,0,sizeof(child));
   root(1,0);
   memset(dp,-1,sizeof(dp));
   printf("%d\n",DP(child[1],1,c,d));
   out=0;
   trace(child[1],1,c,d);
   for(;out<d;out++)printf("nothing\n");
  }
  return 0;
}
