#include<iostream>
#include<cmath>
#include<algorithm>
#include<limits>
#include<vector>
#include<bitset>
#include<cstdlib>
#include<cstdio>
#include<cstring>

using namespace std;

#define S scanf
#define P printf
#define REP(i,n) for(int i=0;i<n;i++)
#define FOR(i,FROM,n) for(int i=FROM;i<n;i++)
#define FORR(i,n) for(int i=n;i>=0;i--)
#define ll long long int
#define llu long long unsigned int


int t,n,c,d;

int ni()
{
    int temp;
    scanf("%d",&temp);
    return temp;
}

ll nl()
{
    ll temp;
    scanf("%lld",&temp);
    return temp;
}

llu nlu()
{
    llu temp;
    scanf("%llu",&temp);
    return temp;
}

float nf()
{
    float temp;
    scanf("%f",&temp);
    return temp;
}
/*
bool myfunction( const node& i, const node& j )    //use it to sort vectors
{
    if( i.x < j.x ) return false;
    if( j.x < i.x ) return true;
    return j.c < i.c;
}
*/
int a[100],map[100][100],parent[100],child[100][100],ci[100],info[100][100],est[100],flag=0;
int dp[31][31][31],build[100];

int maxi(int x,int y)
{
    if(x>y)
    return x;
    return y;
}

int solve(int at,int rc,int rd,int cn,int p)
{

    if(at==-1 || ci[p]+1==cn)
    {
        if(rc<1 || rd<1 || a[p]<0)
        return 0;
        else
        return a[p];
    }
    int &ref=dp[at][rc][rd];
    if(at!=-1 && ref!=-1)
    return ref;

    while(flag);

    ref=solve(child[p][cn],rc,rd,cn+1,p);
    //cout<<at<<" "<<p<<" "<<dp[at][rc][rd]<<endl;

    FOR(i,1,rc+1)
    {
        FOR(j,0,rd)
        ref=maxi(solve(child[at][0],i,j,1,at)+solve(child[p][cn],rc-i,rd-1-j,cn+1,p),ref);
    }
    return ref;
}


void print(int ans,int at,int rc,int rd,int cn,int p)
{
    if(at==-1 || ci[p]+1==cn)
    {
        if(ans==a[p] && ans>0)
        {
            build[p]=1;
            d--;
        }
        return;
    }

    if(ans==solve(child[p][cn],rc,rd,cn+1,p))
    {
        print(ans,child[p][cn],rc,rd,cn+1,p);
        return;
    }


    FOR(i,1,rc+1)
    {
        FOR(j,0,rd)
        {
            int ansc=solve(child[at][0],i,j,1,at);
            int anss=solve(child[p][cn],rc-i,rd-1-j,cn+1,p);
            if(dp[at][rc][rd]==ansc+anss)
            {
                printf("transfer %d %d %d\n",p+1,at+1,i);
                d--;
                print(anss,child[p][cn],rc-i,rd-1-j,cn+1,p);
                print(ansc,child[at][0],i,j,1,at);

                return;
            }
        }
    }
}



int main()
{
   //freopen("input.txt","r",stdin);
   //freopen("output.txt","w",stdout);

   n=ni();
   c=ni();
   d=ni();
   REP(i,n)
   a[i]=ni();

   REP(i,n)
   REP(j,n)
   map[i][j]=0;
   REP(i,n-1)
   {
       int to=ni()-1;
       int from=ni()-1;
       map[to][from]=1;
       map[from][to]=1;
   }

   int queue[100],qi=0,ti=1,reached[100];
   parent[0]=-1;
   queue[0]=0;
   REP(i,n)
   reached[i]=0;
   reached[0]=1;
   REP(i,n)
   ci[i]=0;
   while(qi!=ti)
   {
       int at=queue[qi];
       qi++;
       REP(i,n)
       {
           if(reached[i]==0 && map[at][i]==1)
           {
               parent[i]=at;
               child[at][ci[at]++]=i;
               reached[i]=1;
               queue[ti++]=i;
           }
       }
   }
   //REP(i,n)
   //cout<<i<<" "<<parent[i]<<" "<<ci[i]<<endl;

   REP(i,n+1)
   REP(j,c+1)
   REP(k,d+1)
   dp[i][j][k]=-1;

   REP(i,n)
   {
       if(ci[i]==0)
       {
           ci[i]=1;
           child[i][0]=-1;
       }
   }

   REP(i,n)
   est[i]=0;

   int ans=solve(child[0][0],c,d,1,0);
   printf("%d\n",ans);
   flag=1;

   REP(i,n)
   build[i]=0;
   print(ans,child[0][0],c,d,1,0);
   REP(i,n)
   if(build[i]==1)
   printf("build %d\n",i+1);
   while(d--)
   printf("nothing\n");

   /*
   REP(i,n)
   {
       REP(j,c)
       {
           REP(k,d)
           cout<<dp[i][j][k]<<" ";
           cout<<endl;
       }
       cout<<endl;
   }
   */

   //system("pause");
   return 0;

}
