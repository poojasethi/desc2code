#include <bits/stdc++.h>
#define sc(a) scanf("%d",&a)
#define pn(a) printf("%d\n",a)
using namespace std;
struct segTree
{
	int countOnes,countTwos,rem;
}Tree[100001<<2];
void RangeUpdate(int node,int start,int end,int updateStart,int updateEnd)
{
	if(updateStart>end or updateEnd<start)
		return ;
	int temp;
	if(updateStart<=start and updateEnd>=end)
	{
		temp=Tree[node].countOnes;
		Tree[node].countOnes=(end-start+1)-Tree[node].countTwos-Tree[node].countOnes;
		Tree[node].countTwos=temp;
		Tree[node].rem=(Tree[node].rem+1)%3;
		return ;
	}
	int mid=(start+end)>>1,child=node<<1;
	RangeUpdate(child,start,mid,updateStart,updateEnd);
	RangeUpdate(child|1,mid+1,end,updateStart,updateEnd);
	Tree[node].countOnes=Tree[node*2].countOnes+Tree[node*2+1].countOnes;
	Tree[node].countTwos=Tree[node*2].countTwos+Tree[node*2+1].countTwos;
	if(Tree[node].rem==1)
	{
		temp=Tree[node].countOnes;
		Tree[node].countOnes=(end-start+1)-Tree[node].countTwos-Tree[node].countOnes;
		Tree[node].countTwos=temp;
	}
	else if(Tree[node].rem==2)
	{
		temp=Tree[node].countTwos;
		Tree[node].countTwos=(end-start+1)-Tree[node].countOnes-Tree[node].countTwos;
		Tree[node].countOnes=temp;
	}
	
}
int RangeQuery(int node,int start,int end,int queryStart,int queryEnd,int valFromTop)
{
	if(queryEnd<start or queryStart>end)
		return 0;
	if(queryStart<=start and queryEnd>=end)
	{
		if(valFromTop==1)
		{
			return Tree[node].countTwos;
		}
		else if(valFromTop==2)
		{
			return Tree[node].countOnes;
		}
		else
		{
			return (end-start+1)-Tree[node].countOnes-Tree[node].countTwos;
		}
	}
	valFromTop=(valFromTop+Tree[node].rem)%3;
	int mid=(start+end)>>1,child=node<<1;;
	return (RangeQuery(child,start,mid,queryStart,queryEnd,valFromTop)+RangeQuery(child|1,mid+1,end,queryStart,queryEnd,valFromTop));
}
int main() {
	int n,q;
	sc(n);
	sc(q);
	while(q--)
	{
		int ch,ql,qr;
		sc(ch);
		sc(ql);
		sc(qr);
		++ql,++qr;
		if(ch)
		{
			pn(RangeQuery(1,1,n,ql,qr,0));
		}
		else
		{
			RangeUpdate(1,1,n,ql,qr);
		}
	}
	return 0;
} 