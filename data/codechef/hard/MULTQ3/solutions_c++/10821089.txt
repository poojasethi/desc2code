#include <bits/stdc++.h>
#define max 100005

using namespace std;

int A[max],lazy[3*max];

struct tre
{
    int level1,level2,level3;

}tree[3*max];

void build(int node,int start,int end)
{
    if(start==end)
    {
           tree[node].level3=1;
           tree[node].level2=0;
           tree[node].level1=0;
    }
    else
    {
        int mid=start+end;
        mid/=2;

        build(2*node,start,mid);
        build(2*node+1,mid+1,end);

         tree[node].level2 = tree[node*2].level2 + tree[node*2+1].level2;        // Updating root with max value
    tree[node].level1 = tree[node*2].level1 + tree[node*2+1].level1;        // Updating root with max value
        tree[node].level3 = tree[node*2].level3 + tree[node*2+1].level3;        // Updating root with max value

    }
}



void updateRange(int node, int start, int end, int l, int r)
{
    if(lazy[node]!=0)
    {

        if(lazy[node]%3==1)
        {
              int val=tree[node].level1;
        int val2=tree[node].level2;
        int val3=tree[node].level3;
        tree[node].level2=val;
        tree[node].level3=val2;
        tree[node].level1=val3;
        }
        else if(lazy[node]%3==2)
        {

              int val=tree[node].level1;
        int val2=tree[node].level2;
        int val3=tree[node].level3;
        tree[node].level2=val3;
        tree[node].level3=val;
        tree[node].level1=val2;

        }
        // This node needs to be updated

        if(start != end)
        {
             lazy[node*2]+=lazy[node];
            lazy[node*2+1]+=lazy[node];// Mark child as lazy
        }
        lazy[node] = 0;                               // Reset it
    }
    if(start > end or start > r or end < l)              // Current segment is not within range [l, r]
        return;

    if(start >= l and end <= r)
    {
        // Segment is fully within range
        int val=tree[node].level1;
        int val2=tree[node].level2;
        int val3=tree[node].level3;
        tree[node].level2=val;
        tree[node].level3=val2;
        tree[node].level1=val3;

        if(start != end)
        {
            // Not leaf node
             lazy[node*2]++;
            lazy[node*2+1]++;
        }
        return;
    }
    int mid = (start + end) / 2;
    updateRange(node*2, start, mid, l, r);        // Updating left child
    updateRange(node*2 + 1, mid + 1, end, l, r);   // Updating right child


        tree[node].level2 = tree[node*2].level2 + tree[node*2+1].level2;        // Updating root with max value
    tree[node].level1 = tree[node*2].level1 + tree[node*2+1].level1;        // Updating root with max value
        tree[node].level3 = tree[node*2].level3 + tree[node*2+1].level3;        // Updating root with max value

}

int queryRange(int node, int start, int end, int l, int r)
{
    if(start > end or start > r or end < l)
        return 0;         // Out of range
     if(lazy[node]!=0)
    {

        if(lazy[node]%3==1)
        {
              int val=tree[node].level1;
        int val2=tree[node].level2;
        int val3=tree[node].level3;
        tree[node].level2=val;
        tree[node].level3=val2;
        tree[node].level1=val3;
        }
        else if(lazy[node]%3==2)
        {

              int val=tree[node].level1;
        int val2=tree[node].level2;
        int val3=tree[node].level3;
        tree[node].level2=val3;
        tree[node].level3=val;
        tree[node].level1=val2;

        }
        // This node needs to be updated

        if(start != end)
        {
             lazy[node*2]+=lazy[node];
            lazy[node*2+1]+=lazy[node];// Mark child as lazy
        }
        lazy[node] = 0;                               // Reset it
    }
    if(start >= l and end <= r)             // Current segment is totally within range [l, r]
        return tree[node].level3;
    int mid = (start + end) / 2;
    int p1 = queryRange(node*2, start, mid, l, r);         // Query left child
    int p2 = queryRange(node*2 + 1, mid + 1, end, l, r); // Query right child
    return (p1 + p2);
}


int main() {

	int c,n;

   int p,q,v,x;

	scanf("%d %d",&n,&c);

	build(1,0,n-1);

       while(c--)
       {
           scanf("%d",&x);

           if(x==0)
           {

              scanf("%d %d",&p,&q);
               updateRange(1,0,n-1,p,q);

           }
           else
           {
               scanf("%d %d",&p,&q);
            int ans2=queryRange(1,0,n-1,p,q);

                printf("%d\n",ans2);

           }
       }

	return 0;
}
