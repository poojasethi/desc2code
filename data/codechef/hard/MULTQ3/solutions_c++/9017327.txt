#include <iostream>
#include <cstdio>
using namespace std;

#define MAX 100005

struct {
	int one;
	int two;
	int rem;
} t[MAX << 2];
int three;

void update(int v, int l, int r, int ql, int qr)
{
	if(l > r || l > qr || r < ql) 
		return;

	if(l >= ql && r <= qr) {
		three = (r - l + 1) - t[v].one - t[v].two;
		t[v].two = t[v].one;
		t[v].one = three;
		t[v].rem += 1;
		return;
	}

	int m = l + (r - l) / 2;
	update(v << 1, l, m, ql, qr);
	update(v << 1 | 1, m + 1, r, ql, qr);

	t[v].one = t[v << 1].one + t[v << 1 | 1].one;
	t[v].two = t[v << 1].two + t[v << 1 | 1].two;

	if(t[v].rem % 3 == 1) {
		three = (r - l + 1) - t[v].one - t[v].two;
		t[v].two = t[v].one;
		t[v].one = three;
	} else if(t[v].rem % 3 == 2) {
		three = (r - l + 1) - t[v].one - t[v].two;
		t[v].one = t[v].two;
		t[v].two = three;
	}
}

int query(int v, int l, int r, int ql, int qr, int rem)
{
	if(l > r || l > qr || r < ql)
		return 0;

	if(l >= ql && r <= qr) {
		if(rem % 3 == 1)
			return t[v].two;
		else if(rem % 3 == 2)
			return t[v].one;
		else
			return (r - l + 1) - t[v].one - t[v].two;
	}

	int m = l + (r - l) / 2;
	rem += t[v].rem;
	return query(v << 1, l, m, ql, qr, rem) + query(v << 1 | 1, m + 1, r, ql, qr, rem);
}

int main(int argc, char const *argv[])
{
	int n, q;
	int a, b, c;

	scanf("%d %d", &n, &q);
	while(q--) {
		scanf("%d %d %d", &c, &a, &b);
		if(c)
			printf("%d\n", query(1, 0, n - 1, a, b, 0));
		else
			update(1, 0, n - 1, a, b);
	}
	return 0;
}