#include<bits/stdc++.h>
#define max 600000
#define x (a+b)/2
#define left 2*n
#define right left+1
int lazy[max];
int mod1[max];
int mod2[max];
int mod3[max];
using namespace std;
void build(int a,int b,int n)
{
    if(a>b)
        return;
    if(a==b)
    {
        mod3[n]=1;
        return;
    }
    build(a,x,left);
    build(x+1,b,right);
    mod3[n]=mod3[left]+mod3[right];

}
void update(int a,int b,int i,int j,int n)
{

    if(lazy[n]>0)
    {
        if(lazy[n]%3==1)
        {
            int y=mod3[n];
            mod3[n]=mod2[n];
            mod2[n]=mod1[n];
            mod1[n]=y;
        }
        else if(lazy[n]%3==2)
        {
            int y=mod2[n];
            mod2[n]=mod3[n];
            mod3[n]=mod1[n];
            mod1[n]=y;
        }
        if(a!=b)
        {

            lazy[left]=lazy[n]+lazy[left];
            lazy[right]=lazy[n]+lazy[right];








        }
        lazy[n]=0;




    }
    if((a>b)||(b<i)||(a>j))
        return;
    if((a>=i)&&(b<=j))
       {
           int u=mod3[n];
           mod3[n]=mod2[n];
           mod2[n]=mod1[n];
           mod1[n]=u;

           if(a!=b)
            {
                lazy[left]=lazy[left]+1;
                lazy[right]=lazy[right]+1;



            }
            return;
       }
    update(a,x,i,j,left);
    update(x+1,b,i,j,right);
    mod3[n]=mod3[left]+mod3[right];
    mod2[n]=mod2[left]+mod2[right];
    mod1[n]=mod1[left]+mod1[right];







}
int query(int a,int b,int i,int j,int n)
{

       if(lazy[n]>0)
    {
        if(lazy[n]%3==1)
        {
            int y=mod3[n];
            mod3[n]=mod2[n];
            mod2[n]=mod1[n];
            mod1[n]=y;
        }
        else if(lazy[n]%3==2)
        {
            int y=mod2[n];
            mod2[n]=mod3[n];
            mod3[n]=mod1[n];
            mod1[n]=y;
        }
        if(a!=b)
        {

            lazy[left]=lazy[n]+lazy[left];
            lazy[right]=lazy[n]+lazy[right];






        }
        lazy[n]=0;




    }
    if((a>b)||(b<i)||(a>j))
        return 0;

    if((a>=i)&&(b<=j))
       return mod3[n];

    return (query(a,x,i,j,left)+query(x+1,b,i,j,right));





}



int main()
{
    int n,q;
scanf("%d %d",&n,&q);
    int i;
        memset(mod1,0,max);
         memset(mod2,0,max);
             memset(lazy,0,sizeof lazy);
    build(0,n-1,1);
    while(q--)
    {

        int a,b,c;
        scanf("%d %d %d",&a,&b,&c);
        if(a==0)
            update(0,n-1,b,c,1);
        else
printf("%d\n",query(0,n-1,b,c,1));




    }
}
