#include<bits/stdc++.h>
using namespace std;
typedef int ll;
ll arr[100010];
ll tree[100010*4][3];
ll lazy[100010*4];

void build(ll node,ll a,ll b)
{
	if(a>b)
	return;
	if(a==b)
	{
		tree[node][0]=1;
		tree[node][1]=0;
		tree[node][2]=0;
		return;
	}
	build(node*2,a,(a+b)/2);
	build(node*2+1,(a+b)/2+1,b);
	tree[node][0]=tree[node*2][0]+tree[node*2+1][0];
	tree[node][1]=tree[node*2][1]+tree[node*2+1][1];
	tree[node][2]=tree[node*2][2]+tree[node*2+1][2];
}
void update(ll node,ll a,ll b,ll i,ll j)
{
	if(lazy[node]>0)
	{
		ll xx=lazy[node];
		
		if(xx%3==1)
		{
			ll x=tree[node][0];
			ll y=tree[node][1];
			ll z=tree[node][2];
			tree[node][0]=z;
			tree[node][1]=x;
			tree[node][2]=y;
		}
		else if(xx%3==2)
		{
			ll x=tree[node][0];
			ll y=tree[node][1];
			ll z=tree[node][2];
			tree[node][0]=y;
			tree[node][1]=z;
			tree[node][2]=x;
		}
		if(a!=b)
		lazy[node*2]+=lazy[node],lazy[node*2+1]+=lazy[node];
		lazy[node]=0;
	}
	if(a>b || a>j || b<i)
	return;
	if(a>=i && b<=j)
	{
			ll x=tree[node][0];
			ll y=tree[node][1];
			ll z=tree[node][2];
			tree[node][0]=z;
			tree[node][1]=x;
			tree[node][2]=y;
			if(a!=b)
			lazy[node*2]+=1,lazy[node*2+1]+=1;
			return;
	}
	update(node*2,a,(a+b)/2,i,j);
	update(node*2+1,(a+b)/2+1,b,i,j);
	tree[node][0]=tree[node*2][0]+tree[node*2+1][0];
	tree[node][1]=tree[node*2][1]+tree[node*2+1][1];
	tree[node][2]=tree[node*2][2]+tree[node*2+1][2];
	
}
ll query(ll node,ll a,ll b,ll i,ll j)
{
	if(lazy[node]>0)
	{
		ll xx=lazy[node];
		if(xx%3==0)
		{
			ll x=tree[node][0];
			ll y=tree[node][1];
			ll z=tree[node][2];
			tree[node][0]=x;
			tree[node][1]=y;
			tree[node][2]=z;
		}
		else if(xx%3==1)
		{
			ll x=tree[node][0];
			ll y=tree[node][1];
			ll z=tree[node][2];
			tree[node][0]=z;
			tree[node][1]=x;
			tree[node][2]=y;
		}
		else
		{
			ll x=tree[node][0];
			ll y=tree[node][1];
			ll z=tree[node][2];
			tree[node][0]=y;
			tree[node][1]=z;
			tree[node][2]=x;
		}
		if(a!=b)
		lazy[node*2]+=lazy[node],lazy[node*2+1]+=lazy[node];
		lazy[node]=0;
	}
	if(a>b || a>j || b<i)
	return 0;
	if(a>=i && b<=j)
	return tree[node][0];
	return query(node*2,a,(a+b)/2,i,j)+query(node*2+1,(a+b)/2+1,b,i,j);
}
int main()
{
	ll n,q,i,a,b,c;
	scanf("%d%d",&n,&q);
	build(1,0,n-1);
	for(ll i=0;i<q;i++)
	{
		scanf("%d%d%d",&a,&b,&c);
		if(a==0)
		{
			update(1,0,n-1,b,c);
		}
		else
		{
			printf("%d\n",query(1,0,n-1,b,c));
		}
	}
	
}