#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<string>
#include<fstream>
#include<queue>
#include<map>

#define MOD 1000000007
#define MAX 100000
#define ll long long
#define slld(t) scanf("%lld",&t)
#define sd(t) scanf("%d",&t)
#define pd(t) printf("%d\n",t)
#define DBUG(x) cout<<x<<endl;
#define pcc pair<char,char>
#define pii pair<int,int>
#define pll pair<ll,ll>
#define tr(container,it) for(typeof(container.begin()) it=container.begin();it!=container.end();it++)
#define mp(a,b) make_pair(a,b)

using namespace std;

//FAST_IO
// SOURCE : http://discuss.codechef.com/questions/6677/cool-fast-io-implementation

using std::string;
 
static struct IO {
	char tmp[1 << 10];
 
	// fast input routines
	char cur;
 
//#define nextChar() (cur = getc_unlocked(stdin))
//#define peekChar() (cur)
	inline char nextChar() { return cur = getc_unlocked(stdin); }
	inline char peekChar() { return cur; }
 
	inline operator bool() { return peekChar(); }
	inline static bool isBlank(char c) { return (c < '-' && c); }
	inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
 
	inline IO& operator >> (char & c) { c = nextChar(); return *this; }
 
	inline IO& operator >> (char * buf) {
		if (skipBlanks()) {
			if (peekChar()) {
				*(buf++) = peekChar();
				while (!isBlank(nextChar())) *(buf++) = peekChar();
			} *(buf++) = 0; } return *this; }
 
	inline IO& operator >> (string & s) {
		if (skipBlanks()) {	s.clear(); s += peekChar();
			while (!isBlank(nextChar())) s += peekChar(); }
		return *this; }
 
	inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this;	}
 
#define defineInFor(intType) \
	inline IO& operator >>(intType & n) { \
		if (skipBlanks()) { \
			int sign = +1; \
			if (peekChar() == '-') { \
				sign = -1; \
				n = nextChar() - '0'; \
			} else \
				n = peekChar() - '0'; \
			while (!isBlank(nextChar())) { \
				n += n + (n << 3) + peekChar() - 48; \
			} \
			n *= sign; \
		} \
		return *this; \
	}
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
 
	// fast output routines
 
//#define putChar(c) putc_unlocked((c), stdout)
	inline void putChar(char c) { putc_unlocked(c, stdout); }
	inline IO& operator << (char c) { putChar(c); return *this; }
	inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
 
	inline IO& operator << (const string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
 
	char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
	inline IO& operator << (double d) { return (*this) << toString(d); }
 
 
#define defineOutFor(intType) \
	inline char * toString(intType n) { \
		char * p = (tmp + 30); \
		if (n) { \
			bool isNeg = 0; \
			if (n < 0) isNeg = 1, n = -n; \
			while (n) \
				*--p = (n % 10) + '0', n /= 10; \
			if (isNeg) *--p = '-'; \
		} else *--p = '0'; \
		return p; \
	} \
	inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(long long)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;

struct node
{
	int update;
	int cnt[3];

	node() {update=0; cnt[0]=0; cnt[1]=0; cnt[2]=0;}
	
	void merge(node &a,node &b)
	{ 
		for(int i=0;i<3;i++)
			cnt[i]=a.cnt[i]+b.cnt[i];
	}
};

node segtree[MAX<<2];

int ri,rj;

int query(int t,int i,int j)
{
	int left = t<<1,right=left|1,mid=(i+j)>>1;
	
	if(segtree[t].update%3)
	{
		segtree[t].update%=3;
		
		int tmp[6]={segtree[t].cnt[0],segtree[t].cnt[1],segtree[t].cnt[2],segtree[t].cnt[0],segtree[t].cnt[1],segtree[t].cnt[2]};
		
		for(int k=0;k<3;k++)
			segtree[t].cnt[k]=tmp[k+segtree[t].update];
		
		if(i!=j)
		{
			segtree[left].update+=segtree[t].update;
			segtree[right].update+=segtree[t].update;
		}
		
		segtree[t].update=0;
	}
	
	if(i > j || i > rj || j < ri) return 0; 
	
	if(ri<=i && j<=rj)
		return segtree[t].cnt[0];
		
	int x1,x2;
	
	x1=query(left,i,mid);
	x2=query(right,mid+1,j);
	
	segtree[t].merge(segtree[left],segtree[right]);
	
	return (x1+x2);
}

void update(int t,int i,int j)
{	
	int left = t<<1,right=left|1,mid=(i+j)>>1;
	
	if(segtree[t].update%3)
	{
		segtree[t].update%=3;
		
		int tmp[6]={segtree[t].cnt[0],segtree[t].cnt[1],segtree[t].cnt[2],segtree[t].cnt[0],segtree[t].cnt[1],segtree[t].cnt[2]};
		
		for(int k=0;k<3;k++)
			segtree[t].cnt[k]=tmp[k+segtree[t].update];
		
		if(i!=j)
		{
			segtree[left].update+=segtree[t].update;
			segtree[right].update+=segtree[t].update;
		}
		
		segtree[t].update=0;
	}
	
	if(i > j || i > rj || j < ri) return;
	
	if(ri<=i && j<=rj)
	{
		int tmp[4]={segtree[t].cnt[0],segtree[t].cnt[1],segtree[t].cnt[2],segtree[t].cnt[0]};
		
		for(int k=0;k<3;k++)
			segtree[t].cnt[k]=tmp[k+1];
		
		if(i!=j)
		{
			segtree[left].update+=1;
			segtree[right].update+=1;
		}
		
		return;
	}
	
	update(left,i,mid);
	update(right,mid+1,j);
	
	segtree[t].merge(segtree[left],segtree[right]);
	
	return ;
}

void build(int t,int i,int j)
{
	if(i==j)
	{
		segtree[t].cnt[0] += 1;
		return;
	}
	
	int left = t<<1,right=left|1,mid=(i+j)>>1;
	
	build(left,i,mid);
	
	build(right,mid+1,j);
	
	segtree[t].cnt[0]=segtree[left].cnt[0]+segtree[right].cnt[0];
}

int main()
{	
	int n,q;
	//sd(n);sd(q);
	cin>>n>>q;
	build(1,1,n);
	
	while(q--)
	{
		int stat,a,b;
		//sd(stat);sd(a);sd(b);
		cin>>stat>>a>>b;
		
		ri=a+1; rj=b+1;
		
		if(stat)
			cout<<(query(1,1,n))<<'\n';
		else
			update(1,1,n);
	}
}