#include<algorithm>
#include<iostream>
#include<string>
#include<map>
#include<queue>
#include<sstream>
#include<vector>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<cstdio>
#include<stack>
using namespace std;
#define MAX 300000
int cont[MAX][3],aux[3];
int db[MAX],n,S[3]={1,2,0};
inline void update(int node,int from,int to,int L,int R){
if(from!=to){
    db[L]+=db[node];
    db[R]+=db[node];
    if(db[L]>=3)db[L]-=3;
    if(db[R]>=3)db[R]-=3;
}int x=db[node];
aux[x]=cont[node][0];x=S[x];
aux[x]=cont[node][1];x=S[x];
aux[x]=cont[node][2];
cont[node][0]=aux[0];cont[node][1]=aux[1];cont[node][2]=aux[2];
db[node]=0;
}
void add(int from,int to,int node=0,int le=0,int ri=n-1){
int L=node*2+1,R=node*2+2;
if(db[node])update(node,le,ri,L,R);
if(from>to)return;
if(from==le&&to==ri){db[node]=S[db[node]];
update(node,from,to,L,R);}else{int mid=(le+ri)/2;
add(from,min(to,mid),L,le,mid);
add(max(from,mid+1),to,R,mid+1,ri);
cont[node][0]=cont[L][0]+cont[R][0];
cont[node][1]=cont[L][1]+cont[R][1];
cont[node][2]=cont[L][2]+cont[R][2];
}
}
int cuenta(int from,int to,int node=0,int le=0,int ri=n-1){
if(from>to)return 0;
int L=node*2+1,R=node*2+2;
if(db[node])update(node,le,ri,L,R);
if(from==le&&to==ri)return cont[node][0];
else{
    int mid=(le+ri)/2;return cuenta(from,min(to,mid),L,le,mid)+cuenta(max(from,mid+1),to,R,mid+1,ri);
}
}
void create(int node=0,int le=0,int ri=n-1){
if(le==ri)cont[node][0]=1;
else{
 int mid=(le+ri)/2,L=node*2+1,R=node*2+2;create(L,le,mid);
 create(R,mid+1,ri);cont[node][0]=cont[L][0]+cont[R][0];
}
}
int main(){
int q;scanf("%d%d",&n,&q);memset(cont,0,sizeof cont);create();
memset(db,0,sizeof db);while(q--){int o,a,b;scanf("%d%d%d",&o,&a,&b);
if(o==0){add(a,b);}else{printf("%d\n",cuenta(a,b));}
}}
