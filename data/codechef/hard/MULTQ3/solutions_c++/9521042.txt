#include <cstdio>
#include <iostream>
#include <algorithm>

int tree1[400002];
int lazy1[400002];
int tree2[400002];


void add(int node,int a,int l)
{
    int f=0;
    if(a%3==1)
    {
        f=1;
        int x = tree1[node];
        tree1[node]=l-x-tree2[node];
        tree2[node]=x;
    }
    else if(a%3==2)
    {
        f=1;
        int y = tree2[node];
        tree2[node]=l-y-tree1[node];
        tree1[node]=y;
    }
    if((l>1)&&(f==1))
    {
        lazy1[2*node+1]+=a;
        lazy1[2*node+2]+=a;
    }
}
int query1(int node,int s,int e,int l,int r)
{


    add(node,lazy1[node],e-s+1);
    lazy1[node]=0;

    int mid = s+(e-s)/2;
    if(s>e||l>e||r<s)
        return 0;
    if(s>=l&&e<=r)
    {
        return ((tree1[node]+tree2[node]));
    }

    int p1 = query1(2*node+1,s,mid,l,r);
    int p2 = query1(2*node+2,mid+1,e,l,r);

    return (p1+p2);
}

void update1(int node,int s,int e,int l,int r)
{
        int mid = s+(e-s)/2;
        add(node,lazy1[node],e-s+1);
        lazy1[node]=0;
        if(s>e||l>e||r<s)
        {
            return ;
        }

        if(s>=l&&e<=r)
        {
            add(node,1,e-s+1);
            return;
        }
        update1(2*node+1,s,mid,l,r);
        update1(2*node+2,mid+1,e,l,r);
        tree1[node]=tree1[2*node+1]+tree1[2*node+2];
        tree2[node]=tree2[2*node+1]+tree2[2*node+2];
}



int main()
{
    //freopen("inp.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int q,i,n;
    scanf("%d%d",&n,&q);
    int x,y,z;
    int a,b;
    for(i=0;i<q;i++)
    {
        scanf("%d%d%d",&x,&y,&z);
        if(x==1)
        {
            a = query1(0,0,n-1,y,z);
            b=z-y+1;
            printf("%d\n",b-a);
        }
        else
        {
            update1(0,0,n-1,y,z);

        }
    }

    return 0;
}
