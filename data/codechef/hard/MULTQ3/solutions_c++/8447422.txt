#include <bits/stdc++.h>
#define FOR(i,a,b) for(int i=a; i<=b; i++)
#define FRO(i,a,b) for(int i=a; i>=b; i--)
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define ll long long
#define mp make_pair
#define f first
#define s second
#define N 100005
#define maxn 300007
#define BIT(i, n) ( (n >> i) & 1 )
#define ln
#define oo 300003

using namespace std;

int n, q, T[4*N], C[3][4*N];

void Plus(int node, int B)
{
    if(B % 3 == 0)    return;
    if(B % 3 == 1)
    {
        int x = C[0][node];
        C[0][node] = C[1][node];
        C[1][node] = C[2][node];
        C[2][node] = x;
    }
    if(B % 3 == 2)
    {
        int x = C[0][node];
        C[0][node] = C[2][node];
        C[2][node] = C[1][node];
        C[1][node] = x;
    }
}

void Add(int node)
{
    Plus(2*node, T[node]);
    Plus(2*node+1, T[node]);
    T[2*node] += T[node];
    T[2*node+1] += T[node];
    T[node] = 0;
}

void Build(int node, int l, int r)
{
    if(l == r)
    {
        C[0][node] = 1;
        return;
    }
    int g = (l + r) / 2;
    Build(node*2, l, g);
    Build(node*2+1, g+1, r);
    C[0][node] = C[0][2*node] + C[0][2*node+1];
}

void Update(int node, int l, int r, int d, int c)
{
    if(d > r || l > c)  return;
    if(d <= l && r <= c)
    {
        T[node]++;
        int x = C[0][node];
        C[0][node] = C[1][node];
        C[1][node] = C[2][node];
        C[2][node] = x;
        return;
    }
    Add(node);
    int g = (l + r) / 2;
    Update(node*2, l, g, d, c);
    Update(node*2+1, g+1, r, d, c);
    for(int i=0; i<=2; i++)
        C[i][node] = C[i][2*node] + C[i][2*node+1];
}

int Get(int node, int l, int r, int d, int c)
{
    if(d > r || l > c)  return 0;
    if(d <= l && r <= c)    return C[0][node];
    Add(node);
    int g = (l + r) / 2;
    int u = Get(node*2, l, g, d, c);
    int v = Get(node*2+1, g+1, r, d, c);
    return u + v;
}

int main()
{
    //filein("inp.txt");  fileout("out.txt");
    int type, l, r;
    cin >> n >> q;
    Build(1, 1, n);
    for(int i=1; i<=q; i++)
    {
        scanf("%d%d%d", &type, &l, &r);
        if(type == 0)
            Update(1, 1, n, l+1, r+1);
        else
            printf("%d\n", Get(1, 1, n, l+1, r+1));
    }
}
