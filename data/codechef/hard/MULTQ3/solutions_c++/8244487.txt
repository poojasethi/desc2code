#include <iostream>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <algorithm>
#define lli long long int
#define pb push_back
#define mod 1000000007
#define pii pair<int,int>

using namespace std;
int arr[100009];
int lazy[510009];
int seg[510009][3];

void build(int n,int b,int e)
{
    if(b==e)
    {
        arr[n]=0;
        seg[n][0]=1;
        return ;
    }
    build(2*n,b,(b+e)/2);
    build(2*n +1,(b+e)/2 +1,e);

    seg[n][0]=seg[2*n][0] + seg[2*n+1][0];
}

void update(int n,int b,int e,int i,int j)
{
    if(lazy[n]!=0)
    {
        if(lazy[n]%3 == 1)
        {
            int temp1=seg[n][1],temp2=seg[n][2];
            seg[n][1]=seg[n][0];
            seg[n][2]=temp1;
            seg[n][0]=temp2;
        }
        else if(lazy[n]%3==2)
        {
            int temp1=seg[n][1],temp2=seg[n][2];
            seg[n][2]=seg[n][0];
            seg[n][1]=temp2;
            seg[n][0]=temp1;
        }

        if(b!=e)
        {
            lazy[n*2]+=lazy[n];
            lazy[2*n +1]+=lazy[n];
        }
        lazy[n]=0;
    }
    if(b>j || e<i)return ;
    if(b>=i && e<=j)
    {
        int temp1=seg[n][1],temp2=seg[n][2];
        seg[n][1]=seg[n][0];
        seg[n][2]=temp1;
        seg[n][0]=temp2;

        if(b!=e)
        {
            lazy[2*n]+=1;
            lazy[2*n+1]+=1;
        }
        return ;
    }

    update(2*n,b,(b+e)/2,i,j);
    update(2*n+1,(b+e)/2 +1,e,i,j);

    seg[n][0]=seg[2*n][0] + seg[2*n+1][0];
    seg[n][1]=seg[2*n][1] + seg[2*n+1][1];
    seg[n][2]=seg[2*n][2] + seg[2*n+1][2];
}

int query(int n,int b,int e,int i,int j)
{
    if(b>j || e<i)return 0;
    if(lazy[n]!=0)
    {
        if(lazy[n]%3 == 1)
        {
            int temp1=seg[n][1],temp2=seg[n][2];
            seg[n][1]=seg[n][0];
            seg[n][2]=temp1;
            seg[n][0]=temp2;
        }
        else if(lazy[n]%3==2)
        {
            int temp1=seg[n][1],temp2=seg[n][2];
            seg[n][2]=seg[n][0];
            seg[n][1]=temp2;
            seg[n][0]=temp1;
        }

        if(b!=e)
        {
            lazy[n*2]+=lazy[n];
            lazy[2*n +1]+=lazy[n];
        }
        lazy[n]=0;
    }

    if(b>=i && e<=j)return seg[n][0];
    int mid=(b+e)/2;
    int p=query(2*n,b,mid,i,j);
    int q=query(2*n+1,mid+1,e,i,j);

    return (p+q);

}
int main()
{
    int m,q,n,a,b,c,i,j,k;
    memset(seg,0,sizeof(seg));
    memset(lazy,0,sizeof(lazy));

    scanf("%d%d",&n,&q);
    build(1,1,n);
    while(q--)
    {
        scanf("%d%d%d",&a,&b,&c);
        b++;
        c++;
        if(a==0)
        {
            update(1,1,n,b,c);
        }
        else
        {
            int ans= query(1,1,n,b,c);
            printf("%d\n",ans);
        }
    }

    return 0;
}