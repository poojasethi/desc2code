//#include<iostream>
#include<cstdio>
#include<algorithm>
using namespace std;

int segmentTree[1000001][3]={0};
int lazy[1000001]={0};
void buildSegmentTree(int low,int high,int node);
void task0(int low,int high,int node,int start,int end);
int task1(int low,int high,int node,int start,int end);
void swap(int *a,int *b,int *c);

int main(){

    //ios_base::sync_with_stdio(false);
    //cin.tie(NULL);

    int n,q,i;
    //cin>>n>>q;
    scanf("%d%d",&n,&q);

    //int size=2*pow(2,(ceil)(log2(n)))-1;

//    cout<<n<<' '<<q<<' '<<size<<endl;

    buildSegmentTree(0,n-1,0);

  //  for(i=0;i<size;i++)
    //    cout<<segmentTree[i][0]<<' ';
    //cout<<endl;

    int task,a,b;
    for(i=0;i<q;i++){
        //cin>>task>>a>>b;
        scanf("%d%d%d",&task,&a,&b);

        if(task==0)
            task0(0,n-1,0,a,b);
        else
            //cout<<task1(0,n-1,0,a,b)<<endl;
            printf("%d\n",task1(0,n-1,0,a,b));
    }
    return 0;
}

void buildSegmentTree(int low,int high,int node){

    if(low==high){
        segmentTree[node][0]=1;
        return ;
    }

    buildSegmentTree(low,(low+high)/2,2*node+1);
    buildSegmentTree(1+(low+high)/2,high,2*node+2);

    segmentTree[node][0]=segmentTree[2*node+1][0]+segmentTree[2*node+2][0];

}

void task0(int low,int high,int node,int start,int end){

    if(lazy[node]!=0){

        if(lazy[node]%3==1)
            swap(&segmentTree[node][0],&segmentTree[node][1],&segmentTree[node][2]);
        if(lazy[node]%3==2){
            swap(&segmentTree[node][0],&segmentTree[node][1],&segmentTree[node][2]);
            swap(&segmentTree[node][0],&segmentTree[node][1],&segmentTree[node][2]);
         }
        if(low!=high){
                lazy[2*node+1]=(lazy[2*node+1]+lazy[node]);
                lazy[2*node+2]=(lazy[2*node+2]+lazy[node]);

        }
        lazy[node]=0;
    }

    if(low>end||high<start)
        return;
    if(low>=start&&high<=end){
        swap(&segmentTree[node][0],&segmentTree[node][1],&segmentTree[node][2]);
        if(low!=high){
            lazy[2*node+1]=(1+lazy[2*node+1]);
            lazy[2*node+2]=(1+lazy[2*node+2]);
        }
        return;
    }

    task0(low,(low+high)/2,2*node+1,start,end);
    task0(1+(low+high)/2,high,2*node+2,start,end);

    segmentTree[node][0]=segmentTree[2*node+1][0]+segmentTree[2*node+2][0];
    segmentTree[node][1]=segmentTree[2*node+1][1]+segmentTree[2*node+2][1];
    segmentTree[node][2]=segmentTree[2*node+1][2]+segmentTree[2*node+2][2];


    return;

}

int task1(int low,int high,int node,int start,int end){

    if(lazy[node]!=0){

        if(lazy[node]%3==1)
            swap(&segmentTree[node][0],&segmentTree[node][1],&segmentTree[node][2]);
        if(lazy[node]%3==2){
            swap(&segmentTree[node][0],&segmentTree[node][1],&segmentTree[node][2]);
            swap(&segmentTree[node][0],&segmentTree[node][1],&segmentTree[node][2]);
         }
        if(low!=high){
                lazy[2*node+1]=(lazy[2*node+1]+lazy[node])%3;
                lazy[2*node+2]=(lazy[2*node+2]+lazy[node])%3;

        }
        lazy[node]=0;
    }

    if(low>end||high<start)
        return 0;

    if(low>=start&&high<=end){
        return segmentTree[node][0];

    }

     return task1(low,(low+high)/2,2*node+1,start,end)+task1(1+(low+high)/2,high,2*node+2,start,end);


}

void swap(int *a,int *b,int *c){

    int temp=*a,temp2=*b;
    *a=*c;
    *b=temp;
    *c=temp2;

}
