#include<bits/stdc++.h>
#define ll long long
#define MOD 1000000007
using namespace std;

struct node
{
    int a,b,c;
};

node seg[400009];
int lazy[400009];
void build(int idx,int left,int right)
{
    int lchild=2*idx+1;
    int rchild=2*idx+2;
    if(left==right)
    {
        seg[idx].a=1;
        seg[idx].b=seg[idx].c=0;
        return ;
    }
    int mid=(left+right)/2;
    build(lchild,left,mid);
    build(rchild,mid+1,right);
    seg[idx].a=seg[lchild].a+seg[rchild].a;
    seg[idx].b=seg[lchild].b+seg[rchild].b;
    seg[idx].c=seg[lchild].c+seg[rchild].c;
    return ;
}

void update(int idx,int left,int right,int l,int r)
{
    int lchild=2*idx+1;
    int rchild=2*idx+2;
    if(lazy[idx])
    {
        int z=lazy[idx]%3;
        if(z==1){
        int temp=seg[idx].a;
        seg[idx].a=seg[idx].c;
        seg[idx].c=seg[idx].b;
        seg[idx].b=temp;
        }
        else if(z==2){
        int temp=seg[idx].a;
        seg[idx].a=seg[idx].b;
        seg[idx].b=seg[idx].c;
        seg[idx].c=temp;
        }
        if(left!=right)
        {
            lazy[lchild]+=z;
            lazy[rchild]+=z;
        }
        lazy[idx]=0;
    }
    if(l==-1 && r==-1)
        return ;
    if(left==l && right==r)
    {
        int temp=seg[idx].a;
        seg[idx].a=seg[idx].c;
        seg[idx].c=seg[idx].b;
        seg[idx].b=temp;
        if(left!=right)
        {
            lazy[lchild]+=1;
            lazy[rchild]+=1;
        }
        return ;
    }
    int mid=(left+right)/2;
    if(r<=mid){
        update(lchild,left,mid,l,r);
        update(rchild,mid+1,right,-1,-1);
    }
    else if(l>mid){
        update(lchild,left,mid,-1,-1);
        update(rchild,mid+1,right,l,r);
    }
    else
    {
        update(lchild,left,mid,l,mid);
        update(rchild,mid+1,right,mid+1,r);
    }
    seg[idx].a=seg[lchild].a+seg[rchild].a;
    seg[idx].b=seg[lchild].b+seg[rchild].b;
    seg[idx].c=seg[lchild].c+seg[rchild].c;
    return ;
}

node query(int idx,int left,int right,int l,int r)
{
    int lchild=2*idx+1;
    int rchild=2*idx+2;
    if(lazy[idx])
    {
        int z=lazy[idx]%3;
        if(z==1){
        int temp=seg[idx].a;
        seg[idx].a=seg[idx].c;
        seg[idx].c=seg[idx].b;
        seg[idx].b=temp;
        }
        else if(z==2){
        int temp=seg[idx].a;
        seg[idx].a=seg[idx].b;
        seg[idx].b=seg[idx].c;
        seg[idx].c=temp;
        }
        if(left!=right)
        {
            lazy[lchild]+=z;
            lazy[rchild]+=z;
        }
        lazy[idx]=0;
    }
    if(left==l && right==r)
        return seg[idx];
    int mid=(left+right)/2;
    if(r<=mid)
        return query(lchild,left,mid,l,r);
    else if(l>mid)
        return query(rchild,mid+1,right,l,r);
    else
    {
        node lans ,rans ,ans;
        lans=query(lchild,left,mid,l,mid);
        rans=query(rchild,mid+1,right,mid+1,r);
        ans.a=lans.a+rans.a;
        ans.b=lans.b+rans.b;
        ans.c=lans.c+rans.c;
        return ans;
    }
}

int main()
{
    int n,q,x,y,z;
    node ans;
    scanf("%d%d",&n,&q);
    build(0,0,n-1);
    while(q--)
    {
        x,y,z;
        scanf("%d%d%d",&z,&x,&y);
        if(z==0)
            update(0,0,n-1,x,y);
        else{
            ans=query(0,0,n-1,x,y);
            printf("%d\n",ans.a);
        }
    }
    return 0;
}
