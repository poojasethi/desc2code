#include<bits/stdc++.h>
using namespace std;
struct node
{
    int a,b,c;
};
       node seg[1000001];
       int lazy[1000001];
inline int read()
{
	int ret = 0;
	int c = getchar();
 
	while(c<'0' || c>'9')
		c = getchar();
	while(c>='0' && c<='9')
	{
		ret = (ret<<3) + (ret<<1) + c - '0';
		c = getchar();
	}
    return ret;
}
void build(int low,int high,int pos)
{
    if(low==high)
    {
        seg[pos].a=1;
        return;
    }
    int mid=(low+high)/2;
    build(low,mid,2*pos+1);
    build(mid+1,high,2*pos+2);
    seg[pos].a=seg[2*pos+1].a+seg[2*pos+2].a;
}
int query(int low,int high,int ind1,int ind2,int pos)
{
    //cout<<"qury "<<low<<" "<<high<<ind1<<" "<<ind2<<endl;
    if(lazy[pos]!=0)
    {
        if(lazy[pos]%3==1)
        {
            long long r=seg[pos].a;
            seg[pos].a=seg[pos].c;
            long long k=seg[pos].b;
            seg[pos].b=r;
            seg[pos].c=k;
        }
        else if(lazy[pos]%3==2)
        {
            long long r=seg[pos].a;
            seg[pos].a=seg[pos].b;
            long long k=seg[pos].c;
            seg[pos].c=r;
            seg[pos].b=k;
        }
        if(low!=high)
        {
            lazy[2*pos+1]+=lazy[pos];
            lazy[2*pos+2]+=lazy[pos];
        }
        lazy[pos]=0;
    }
    if(high<ind1||ind2<low)
    {
       // cout<<5;
        return 0;
    }
   /* if(lazy[pos]!=0)
    {
        if(lazy[pos]%3==1)
        {
            int r=seg[pos].a;
            seg[pos].a=seg[pos].c;
            int k=seg[pos].b;
            seg[pos].b=r;
            seg[pos].c=k;
        }
        else if(lazy[pos]%3==2)
        {
            int r=seg[pos].a;
            seg[pos].a=seg[pos].b;
            int k=seg[pos].c;
            seg[pos].c=r;
            seg[pos].b=k;
        }
        if(low!=high)
        {
            lazy[2*pos+1]+=lazy[pos];
            lazy[2*pos+2]+=lazy[pos];
        }
        lazy[pos]=0;
    }*/
    if(low>=ind1 && high<=ind2)
    {
       // cout<<"qury "<<low<<" "<<high<<endl;
       // cout<<"seg->"<<seg[pos].a<<endl;
        return seg[pos].a;
    }
    else
    {
        int mid=(low+high)/2;
        int ans =  query(low,mid,ind1,ind2,2*pos+1)+query(mid+1,high,ind1,ind2,2*pos+2);
        //cout<<"qury "<<low<<" "<<high<<endl;
        //cout<<"seg2->"<<ans<<endl;
        return ans;
    }
 
}
void update(int low,int high,int ind1,int ind2,int pos)
{
     if(lazy[pos]!=0)
        {
            if(lazy[pos]%3==1)
            {
                int r=seg[pos].a;
                seg[pos].a=seg[pos].c;
                int k=seg[pos].b;
                seg[pos].b=r;
                seg[pos].c=k;
            }
            else if(lazy[pos]%3==2)
            {
                int r=seg[pos].a;
                seg[pos].a=seg[pos].b;
                long long k=seg[pos].c;
                seg[pos].c=r;
                seg[pos].b=k;
            }
            if(low!=high)
            {
                lazy[2*pos+1] = (lazy[2*pos+1]+lazy[pos]);
                lazy[2*pos+2] = (lazy[2*pos+2]+lazy[pos]);
                //lazy[2*pos+1]%=3;
                //lazy[2*pos+2]%=3;
            }
            lazy[pos]=0;
        }
        if(high<ind1||ind2<low)
        return ;
      /*  if(lazy[pos]!=0)
        {
            if(lazy[pos]%3==1)
            {
                int r=seg[pos].a;
                seg[pos].a=seg[pos].c;
                int k=seg[pos].b;
                seg[pos].b=r;
                seg[pos].c=k;
            }
            else if(lazy[pos]%3==2)
            {
                int r=seg[pos].a;
                seg[pos].a=seg[pos].b;
                long long k=seg[pos].c;
                seg[pos].c=r;
                seg[pos].b=k;
            }
            if(low!=high)
            {
                lazy[2*pos+1] = (lazy[2*pos+1]+lazy[pos])%3;
                lazy[2*pos+2] = (lazy[2*pos+2]+lazy[pos])%3;
                //lazy[2*pos+1]%=3;
                //lazy[2*pos+2]%=3;
            }
            lazy[pos]=0;
        }*/
         if(low>=ind1&&high<=ind2)
        {
        int r=seg[pos].a;
            seg[pos].a=seg[pos].c;
            int k=seg[pos].b;
            seg[pos].b=r;
            seg[pos].c=k;
            if(low!=high)
            {
                lazy[2*pos+1]=(lazy[2*pos+1]+1);
                lazy[2*pos+2]=(lazy[2*pos+2]+1);
             //   lazy[2*pos+1]%=3;
                //lazy[2*pos+2]%=3;
            }
            return;
        }
          else
    {
        int mid=(low+high)/2;
         update(low,mid,ind1,ind2,2*pos+1);
         update(mid+1,high,ind1,ind2,2*pos+2);
           seg[pos].a=seg[2*pos+1].a+seg[2*pos+2].a;
             seg[pos].b=seg[2*pos+1].b+seg[2*pos+2].b;
               seg[pos].c=seg[2*pos+1].c+seg[2*pos+2].c;
    }
 
}
int main()
{
    int n,q,i,j,x,y,z,m;
    n=read();
    q=read();
       int co=0;
       m=n;
       while(m>1)
       {
           m=ceil(m/2.0);
           co++;
       }
       int p=pow(2,co);
       for(i=0;i<2*p-1;i++)
       {
           seg[i].b=0;
           seg[i].c=0;
           lazy[i]=0;
       }
        build(0,n-1,0);
 /*       for(i=0;i<2*p-1;i++)
        cout<<seg[i].a<<" "<<seg[i].b<<" "<<seg[i].c<<endl;
        cout<<"\n";*/
       while(q--)
       {
         x=read();
         if(x==1)
         {
             y=read();
             z=read();
             cout<<query(0,n-1,y,z,0)<<"\n";
         }
         else
         {
             y=read();
             z=read();
            update(0,n-1,y,z,0);
            /*for(i=0;i<2*p-1;i++)
            cout<<seg[i].a<<" "<<seg[i].b<<" "<<seg[i].c<<endl;
            cout<<"\n";*/
         }
       }
}

