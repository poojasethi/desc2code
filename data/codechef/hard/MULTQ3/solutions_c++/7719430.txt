using namespace std;
#include<bits/stdc++.h>

#define BG begin()
#define ED end()
#define st first
#define nd second
#define PB push_back
#define PF push_front
#define FOR(i,a,b) for (int i=a;i<b;i++)
#define FORE(i,a,b) for (int i=a;i<=b;i++)
#define FORD(i,a,b) for (int i=a;i>=b; i--)
#define ri(n)({\
    int neg=0;\
    n=0;\
    char ch;\
    for(ch=getchar(); ch<'0' || ch>'9'; ch=getchar()) if (ch=='-') neg=1-neg;\
    n=ch-48;\
    for(ch=getchar(); ch>='0' && ch<='9'; ch=getchar()) n=(n<<3)+(n<<1)+ch-48;\
    if (neg) n=-n;\
})

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> II;
typedef pair<ll,ll> LL;
const ll INF=1000000000+7;
const double esp=1e-13;
const double pi=3.141592653589;

ll canhai(ll n)
{
    ll fi,la,mid;
    fi=0;
    la=n+1;
    while (fi+1<la)
    {
        mid=fi/2+la/2;
        if (fi%2 && la%2) mid++;
        if (mid>n/mid) la=mid;
        else fi=mid;
    }
    return fi;
}

ll power(ll a, ll n, ll m)
{
    if (n==0) return 1;
    ll tmp,c;
    tmp=c=a;
    n--;
    while (n)
    {
        if (n%2) tmp=tmp*c%m;
        c=c*c%m;
        n/=2;
    }
    return tmp;
}

struct node
{
    int d1,d2,them;
};

node t[800000+10];
int n,q,a,b,d,ans;

void build_tree(int k, int l, int r, int i, int j)
{
    if (i>r || j<l) return ;
    if (i<=l && r<=j)
    {
        int tg=t[k].d1;
        t[k].d1=(r-l+1)-t[k].d1-t[k].d2;
        t[k].d2=tg;
        t[k].them=(t[k].them+1)%3;
        return ;
    }
    int m=(l+r)/2;
    build_tree(k*2,l,m,i,j);
    build_tree(k*2+1,m+1,r,i,j);
    t[k].d1=t[k*2].d1+t[k*2+1].d1;
    t[k].d2=t[k*2].d2+t[k*2+1].d2;
    if (t[k].them==1)
    {
        int tg=t[k].d1;
        t[k].d1=(r-l+1)-t[k].d1-t[k].d2;
        t[k].d2=tg;
    }
    else if (t[k].them==2)
    {
        int tg=t[k].d2;
        t[k].d2=(r-l+1)-t[k].d1-t[k].d2;
        t[k].d1=tg;
    }
}

void get(int k, int l, int r, int i, int j, int luu)
{
    if (l>j || i>r) return ;
    if (i<=l && r<=j)
    {
        if (luu==1) ans+=t[k].d2;
        else if (luu==2) ans+=t[k].d1;
        else ans+=(r-l+1)-t[k].d1-t[k].d2;
        return ;
    }
    int m=(l+r)/2;
    luu=(luu+t[k].them)%3;
    get(k*2,l,m,i,j,luu);
    get(k*2+1,m+1,r,i,j,luu);
}

int main()
{
 //   freopen("MULTQ3.inp", "r", stdin);
 //   freopen("MULTQ3.out", "w", stdout);
    ri(n); ri(q);
    while (q--)
    {
        ri(d); ri(a); ri(b);
        ans=0;
        if (d==0) build_tree(1,1,n,a+1,b+1);
        else
        {
            get(1,1,n,a+1,b+1,0);
            printf("%d\n", ans);
        }
    }
}
