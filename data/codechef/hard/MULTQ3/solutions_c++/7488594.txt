#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define maxi 100000

struct node
{
	ll zero,one,two;
	int flag;
}tree[maxi*4+1];

void build(int v,int tl,int tr)
{
	if(tl==tr)
	{
		tree[v].flag=0;
		tree[v].one=0;
		tree[v].two=0;
		tree[v].zero=1;
	}
	else
	{
		int m=(tl+tr)/2;
		build(v*2,tl,m);
		build(v*2+1,m+1,tr);
		tree[v].zero=tree[v*2].zero+tree[v*2+1].zero;
		tree[v].one=0;
		tree[v].two=0;
		tree[v].flag=0;
	}
}

void refresh(int v,int tl,int tr)
{
	if(tree[v].flag)
	{
		tree[v].flag%=3;
		if(tl!=tr)
		{
			tree[v*2].flag+=tree[v].flag;
			tree[v*2+1].flag+=tree[v].flag;
			//tree[v*2].flag=true;
			//tree[v*2+1].flag=true;
		}
		while(tree[v].flag>0)
		{
			tree[v].flag=tree[v].flag-1;
			int k=tree[v].two;
			tree[v].two=tree[v].one;
			tree[v].one=tree[v].zero;
			tree[v].zero=k;
		}
	}
}

void update(int v,int tl,int tr,int l,int r)
{
	if(tl>tr || tl>r || tr<l)
	{
		refresh(v,tl,tr);
		return ;
	}
	if(tl>=l && tr<=r)
	{
		tree[v].flag+=1;
		//tree[v].flag=true;
		refresh(v,tl,tr);
		return ;
	}
	refresh(v,tl,tr);
	int m=(tl+tr)/2;
	update(v*2,tl,m,l,r);update(v*2+1,m+1,tr,l,r);
	if(tl!=tr)
	{
		tree[v].one=tree[v*2].one+tree[v*2+1].one;
		tree[v].zero=tree[v*2].zero+tree[v*2+1].zero;
		tree[v].two=tree[v*2].two+tree[v*2+1].two;
	}
}

ll query(int v,int tl,int tr,int l,int r)
{
	if(tl>tr || tl>r || tr<l)
	{
		return 0;
	}
	refresh(v,tl,tr);
	if(tl>=l && tr<=r)
	{
		return tree[v].zero;
	}
	int m=(tl+tr)/2;
	return (query(v*2,tl,m,l,r)+query(v*2+1,m+1,tr,l,r));
}

int readint() {
    int n = 0;
    char c = getchar_unlocked();
    while ( !( '0' <= c && c <= '9' ) ) {
        c = getchar_unlocked();
    }
    while ( '0' <= c && c <= '9' ) {
        n = n * 10 + c - '0';
        c = getchar_unlocked();
    }
    return n;
}


int main()
{
	int n,m;
	n=readint();
	m=readint();
	build(1,0,n-1);
	for(int i=0;i<m;i++)
	{
		int q,l,r;
		q=readint();
		l=readint();
		r=readint();
		if(q==1)
		{
			printf("%lld\n",query(1,0,n-1,l,r));
		}
		else
		{
			update(1,0,n-1,l,r);
		}
	}
	return 0;
}