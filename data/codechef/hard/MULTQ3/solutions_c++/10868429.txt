#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <set>

using namespace std;

#define MAXN 100005
#define MAXLEN 3*MAXN

int m0[MAXLEN], m1[MAXLEN], lazy[MAXLEN];
int N, Q;

int buildseg(int ss, int se, int si)
{
	if (ss == se)
	{
		m0[si] = 1;
		return 1;
	}

	int mid = (ss + se) / 2;
	m0[si] = buildseg(ss, mid, 2 * si + 1) + buildseg(mid + 1, se, 2 * si + 2);
	return m0[si];
}

void update(int ss, int se, int qs, int qe, int si)
{
	if (lazy[si] != 0)
	{
		int mod = lazy[si] % 3;
		int m2 = (se - ss + 1) - m0[si] - m1[si];
		if (mod == 1)
		{
			m1[si] = m0[si];
			m0[si] = m2;
		}
		if (mod == 2)
		{
			m0[si] = m1[si];
			m1[si] = m2;
		}
		if (ss != se)
		{
			lazy[2 * si + 1] += lazy[si];
			lazy[2 * si + 2] += lazy[si];
		}
		lazy[si] = 0;
	}
	if (ss > qe || se < qs)
		return;
	if (ss >= qs && se <= qe)
	{
		int m2 = (se - ss + 1) - m0[si] - m1[si];
		m1[si] = m0[si];
		m0[si] = m2;
		if (ss != se)
		{
			lazy[2 * si + 1] += 1;
			lazy[2 * si + 2] += 1;
		}
		return;
	}
	int mid = (ss + se) / 2;
	update(ss, mid, qs, qe, 2 * si + 1);
	update(mid + 1, se, qs, qe, 2 * si + 2);
	m0[si] = m0[2 * si + 1] + m0[2 * si + 2];
	m1[si] = m1[2 * si + 1] + m1[2 * si + 2];
}

int query(int ss, int se, int qs, int qe, int si)
{
	if (lazy[si] != 0)
	{
		int mod = lazy[si] % 3;
		int m2 = (se - ss + 1) - m0[si] - m1[si];
		if (mod == 1)
		{
			m1[si] = m0[si];
			m0[si] = m2;
		}
		if (mod == 2)
		{
			m0[si] = m1[si];
			m1[si] = m2;
		}
		if (ss != se)
		{
			lazy[2 * si + 1] += lazy[si];
			lazy[2 * si + 2] += lazy[si];
		}
		lazy[si] = 0;
	}
	if (ss > qe || se < qs)
		return 0;
	if (ss >= qs && se <= qe)
		return m0[si];

	int mid = (ss + se) / 2;
	return query(ss, mid, qs, qe, 2 * si + 1) + query(mid + 1, se, qs, qe, 2 * si + 2);
}


int main()
{
	scanf("%d%d", &N, &Q);
	int d, A, B;
	buildseg(0, N - 1, 0);
	for (int i = 0; i < Q; i++)
	{
		scanf("%d%d%d", &d, &A, &B);
		//cout << endl;
		if (d == 0)
			update(0, N - 1, A, B, 0);
		else
			printf("%d\n", query(0, N - 1, A, B, 0));
		/*
		for (int i = 0; i < 7; i++) cout << m0[i] << " ";
		cout << endl;
		for (int i = 0; i < 7; i++) cout << m1[i] << " ";
		cout << endl;
		for (int i = 0; i < 7; i++) cout << lazy[i] << " ";
		cout << endl;
		*/
	}
	return 0;
}