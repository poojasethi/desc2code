#include <iostream>
using namespace std;


const int MAX = (1<<18);

struct NODE { int d[3], flips; } Tree[MAX];

void init(int Node, int s, int e){
	if(s == e){
		Tree[Node].d[0] = 1;
		return;
	}
	int L, R, M;
    L = Node << 1; R = L + 1; M = (s + e) >> 1;
	init(L, s, M);
    init(R, M+1, e);
    Tree[Node].d[0] = Tree[L].d[0] + Tree[R].d[0];
}


int read(int Node, int s, int e, int a, int b, int flips){
	if(s == a && e == b) {
    switch(flips % 3){
    case 0: return Tree[Node].d[0];
    case 1: return Tree[Node].d[2];
    case 2: return Tree[Node].d[1];
    }
    return 0;
    }

    int L, R, M;
    L = Node << 1; R = L + 1; M = (s + e) >> 1;
    flips += Tree[Node].flips;
    
    if(b <= M) return read(L, s, M, a, b, flips);
    else if(a > M) return read(R, M+1, e, a, b, flips);
    else return read(L, s, M, a, M, flips) + read(R, M+1, e, M+1, b, flips);
    
}


void update(int node, int s, int e, int a, int b){
 
    if(s==a && e==b){
        Tree[node].flips++;
        swap(Tree[node].d[0],Tree[node].d[1]);     
        swap(Tree[node].d[0],Tree[node].d[2]);     
        return;
        }

    int R,L,M;
    L = node << 1;
    R = L+1;
    M = (s+e)>>1;

    if(b<=M){
        update(L,s,M,a,b);
    }else if(a>M){
        update(R,M+1,e,a,b);
    }else{
        update(L,s,M,a,M);
        update(R,M+1,e,M+1,b);
    }

    Tree[node].d[0] = Tree[L].d[0]+ Tree[R].d[0];
    Tree[node].d[1] = Tree[L].d[1]+ Tree[R].d[1];
    Tree[node].d[2] = Tree[L].d[2]+ Tree[R].d[2];

    switch(Tree[node].flips%3){
        case 1:
        swap(Tree[node].d[0],Tree[node].d[1]);      
        swap(Tree[node].d[0],Tree[node].d[2]);      
        break;
        case 2:
        swap(Tree[node].d[0],Tree[node].d[1]);      
        swap(Tree[node].d[1],Tree[node].d[2]);      
        break;
    }

}


int main(){
int n,q,p,a,b;
scanf("%d",&n);
scanf("%d",&q);
init(1,0,n-1);

while(q--){
scanf("%d %d %d",&p,&a,&b);
switch(p) {
    case 0: update(1,0,n-1,a,b); break;
    case 1: printf("%d\n", read(1,0,n-1,a,b,0)); break;
    }
}

return 0;
}