#include <iostream>
#include <stdio.h>
#define inchar getchar_unlocked

using namespace std;

inline int scan(){
    int n = 0;
    register int c = inchar();
    while(c < '0' || c > '9'){
        c = inchar();
    } 
    while(c >= '0' && c <= '9'){
        n = (n<<1) + (n<<3) + c-'0';
        c = inchar();
    }
    return n;
} 
struct node{
    int zeros;
    int ones;
    int twos;
    int flips;
};

typedef struct node node;

node tree[300010];

void build(int index,int tl,int tr){
    if(tl > tr)
        return;
    if(tr == tl){
        tree[index].zeros = 1;
        return;
    }
    int mid = (tl + tr)>>1;
    int left = index<<1;
    int right = left|1;
    build(left,tl,mid);
    build(right,mid+1,tr);
    tree[index].zeros = tree[left].zeros + tree[right].zeros;
}

/*void show(){
    for(int i = 1;i <= 7;i++){
        cout<<tree[i].zeros<<"  "<<tree[i].ones<<"  "<<tree[i].twos<<"\n";
    }
}*/

inline void modify(int index,int tl,int tr,int l,int r){
    int temp;
    if(tr == r && tl == l){
        tree[index].flips++;
        temp = tree[index].ones;
        tree[index].ones = tree[index].zeros;
        tree[index].zeros = tree[index].twos;
        tree[index].twos = temp;
        //cout<<"modify "<<tree[index].zeros<<"  "<<tree[index].ones<<"  "<<tree[index].twos<< " index "<<index-1<<"\n";
        return ;
    }
    int mid = (tr + tl)>>1;
    int left = index<<1;
    int right = left|1;
    if(r <= mid){
        modify(left,tl,mid,l,r);
    }else if(l > mid){
        modify(right,mid+1,tr,l,r);
    }else{
        modify(left,tl,mid,l,mid);
        modify(right,mid+1,tr,mid+1,r);
    }
    tree[index].ones = tree[left].ones + tree[right].ones;
    tree[index].zeros = tree[left].zeros + tree[right].zeros;
    tree[index].twos = tree[left].twos + tree[right].twos;
    for(int i = 0;i < ((tree[index].flips)%3);i++){
        temp = tree[index].ones;
        tree[index].ones = tree[index].zeros;
        tree[index].zeros = tree[index].twos;
        tree[index].twos = temp;
    }
}

inline int query(int index,int tl,int tr,int l,int r,int flips){
    int t1,t2,t3,t4;
    if(tr == r && tl == l){
        t1 = tree[index].zeros;
        t2 = tree[index].ones;
        t3 = tree[index].twos;
        //cout<<"in1 "<<flips<<"\n";
        if(flips%3 == 0){
            return t1;
        }else if(flips%3 == 1){
            return t3;
        }else{
            return t2;
        }
    }
    //cout<<"inc"<<flips<<"ind"<<index-1<<"\n";
    flips += tree[index].flips;
    int mid = (tr + tl)>>1;
    int left = index<<1;
    int right = left|1;
    if(r <= mid){
        return query(left,tl,mid,l,r,flips);
    }else if(l > mid){
        return query(right,mid+1,tr,l,r,flips);
    }
    return query(left,tl,mid,l,mid,flips) + query(right,mid+1,tr,mid+1,r,flips);
}

int main(){
    ios_base::sync_with_stdio(false);
    
    int n, q, type, a, b;
    n = scan();
    q = scan();
    //cin>>n>>q;
    build(1,0,n-1);
   // show();
   // cout<<"afasdf\n";
    while(q--){
        type = scan();
        a = scan();
        b = scan(); 
        //cin>>type>>a>>b;
        if(type == 0){
            modify(1,0,n-1,a,b);
            //show();cout<<"asdfasdf\n";
        }else{
            cout<<query(1,0,n-1,a,b,0)<<"\n";
        }
    }
    return 0;
}