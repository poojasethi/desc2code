#include <bits/stdc++.h>
#define forn(i, a, n) for (int i = a; i < n; ++i)
#define forr(i, a, n) for (int i = (n) - 1; i >= a; --i)
#define pb push_back
#define pf push_front
#define lag long long

using namespace std;
const int M = 1e9 + 7;
const int N = 1e5 + 7;

int t, n, p[N], e[N], pr[N], size;
bool is[N];
lag fact[N] = {1};
lag mp(lag b, lag e, lag m) {
	lag a = 1;
	b %= m;
	while (e) {
		if (e & 1) a = a * b % m;
		e >>= 1;
		b = b * b % m;
	}
	return a;
}
lag inv(lag x) {
	return mp(x, M - 2, M);
}
lag choose(int n, int k) {
	return fact[n] * inv(fact[k]) % M * inv(fact[n-k]) % M;
}
int get(int n, int p) {
	int k = 0;
	while (n / p > 0) {
		k += n / p;
		n /= p;
	}
	return k;
}
lag choosem(int n, int k) {
	// modulo (M - 1)
	lag a = 1;
	forn (i, 0, size) {
		if (pr[i] > n)
			break;
		int e = get(n, pr[i]) - get(k, pr[i]) - get(n - k, pr[i]);
		a = a * mp(pr[i], e, M-1) % (M-1);
	}
	return a;
}
int main() {
	forn (i, 1, N)
		fact[i] = fact[i-1] * i % M;
	forn (i, 2, N)
		is[i] = true;
	for (int i = 2; i*i < N; ++i)
		if (is[i])
			for (int j = i*i; j < N; j += i)
				is[j] = false;
	forn (i, 2, N)
		if (is[i])
			pr[size++] = i;
	scanf("%d", &t);
	while (t--) {
		scanf("%d", &n);
		lag P = 1;
		forn (i, 0, n) {
			scanf("%d%d", p+i, e+i);
			P = P * e[i] % M;
		}
		if (n == 1) {
			printf("1 %lld\n", (P + 1) % M);
			continue;
		}
		lag antichains = choose(n, n / 2);
		lag same;
		if (n & 1) {
			same = mp(P, choosem(n - 1, n/2 - 1), M) + mp(P, choosem(n - 1, (n + 1) / 2 - 1), M);
		} else {
			same = mp(P, choosem(n - 1, n/2 - 1), M);
		}
		printf("%lld %lld\n", (antichains%M+M)%M, (same%M+M)%M);
	}
}