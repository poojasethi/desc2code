
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cfloat>
#include <climits>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;
typedef long long ll;

#define gc getchar
int getint() { unsigned int c; int x = 0; while (((c = gc()) - '0') >= 10) { if (c == '-') return -getint(); if (!~c) exit(0); } do { x = (x << 3) + (x << 1) + (c - '0'); } while (((c = gc()) - '0') < 10); return x; }
ll getll() { unsigned int c; ll x = 0; while (((c = gc()) - '0') >= 10) { if (c == '-') return -getll(); if (!~c) exit(0); } do { x = (x << 3) + (x << 1) + (c - '0'); } while (((c = gc()) - '0') < 10); return x; }

const int N = 66000;
const int M = 200111;
const ll unf = 1LL << 50;
int n, m;
ll sum[N];
bool done[N], ok = 1;

struct edge {
    int to;
    ll cost;
    edge(int to, ll cost) : to(to), cost(cost) {}
};
vector<edge> graph[N];
void add_edge(int fr, int to, ll cost) {
    graph[fr].push_back(edge(to, cost));
    graph[to].push_back(edge(fr, -cost));
}

bool dfs(int u) {
    // cout << u << endl;
    int i;
    done[u] = 1;
    for (i = 0; i < graph[u].size(); i++) {
        int v = graph[u][i].to;
        ll cost = graph[u][i].cost;
        if (done[v]) {
            if (sum[v] != cost + sum[u]) {
                // for (i = 0; i <= n; i++) cout << sum[i] << ' '; puts("");
                // for (i = 0; i <= n; i++) cout << done[i] << ' '; puts("");
                // cout << u << ' ' << sum[u] << ", " << v << ' ' << sum[v] << " : " << cost << endl;
                return 0;
            }
            continue;
        }
        done[v] = 1, sum[v] = sum[u] + cost;
        dfs(v);
    }
    return 1;
}

int main () {
    int i, j, k, x, y;
    ll z;
    n = getint(), m = getint();
    for (i = 0; i < m; i++) x = getint() - 1, y = getint(), z = getll(), add_edge(x, y, z);
    sum[0] = 0, done[0] = 1;
    bool ok = 1;
    for (i = 0; i <= n; i++) {
        if (ok = dfs(i)) continue;
        puts("-1"); return 0;
    }
    for (i = 1; i <= n; i++) {
        if (i != 1) putchar(' ');
        printf("%lld", sum[i] - sum[i - 1]);
    }
    puts("");
    return 0;
}
