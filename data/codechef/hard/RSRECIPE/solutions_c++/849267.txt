#include <iostream>
using namespace std;
typedef long long int64;
#define MAXN 65540
#define MAXM 400010
struct Edge
{
	int v;
	int64 w;
	Edge *next,*op;
};
Edge *adj[MAXN],temp[MAXM];
int n,m,cnt;
int64 ans[MAXN],res[MAXN];
bool visit[MAXN],flag;
void addedge(int u,int v,int64 w)
{
	temp[cnt++].next=adj[u],adj[u]=temp+cnt-1,adj[u]->v=v,adj[u]->w=w;
	temp[cnt++].next=adj[v],adj[v]=temp+cnt-1,adj[v]->v=u,adj[v]->w=-w;
	adj[u]->op=adj[v],adj[v]->op=adj[u];
}
bool dfs(int u)
{
	visit[u]=1;
	for(Edge *e=adj[u];e;e=e->next)
	{
		if(!visit[e->v])
		{
			ans[e->v]=ans[u]+e->w;
			if(!dfs(e->v))return false;
		}
		else
		{
			if(ans[e->v]!=ans[u]+e->w){flag=false;return false;}
		}
	}
	return true;
}
int main()
{
	//freopen("in.txt","r",stdin);
	//freopen("out.txt","w",stdout);
	scanf("%d%d",&n,&m);
	int x,y;
	int64 z;
	for(int i=1;i<=m;i++)
	{
		scanf("%d%d%lld",&x,&y,&z);
		addedge(x-1,y,z);
	}
	flag=true;
	for(int i=0;i<=n;i++)
		if(!visit[i] && flag)dfs(i);
// 	for(int i=1;i<=n;i++)
// 	{
// 		res[i]=ans[i]-ans[i-1];
// 		if(res[i]>10000 || res[i]<-10000){flag=false;break;}
// 	}
	if(!flag)printf("-1\n");
	else
	{
		for(int i=1;i<=n;i++){
			printf("%lld%c",ans[i]-ans[i-1],(i<n)?' ':'\n');
		}
		printf("\n");
	}
	return 0;
}