#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<string>

using namespace std;

const int maxn = (1<<16)+10;
const int maxm = 2000*1000+5;


vector<pair<int,long long> > g[maxn];
long long s[maxn]={0};
bool visit[maxn]={false},ok;

void dfs(int node,long long cost){
	int i,j;
	long long tmp;
	visit[node]=true;
	s[node]=cost;
	for(i=0;i<g[node].size();i++){
		j= g[node][i].first;
		tmp = g[node][i].second;
		if(!visit[j]){
			dfs(j,cost+tmp);
		}else{
			if(s[j]!=cost+tmp)
				ok=false;
		}
	}
}


int main(){
	int i,n,m;
	int x,y;
	long long z;
	ok = true;
	scanf("%d%d",&n,&m);
	//construct graph
	for(i=0;i<m;i++){
		scanf("%d%d%lld",&x,&y,&z);//s[y]-s[x-1]==z
		g[x-1].push_back(make_pair(y,z));
		g[y].push_back(make_pair(x-1,-z));
	}
	for(i=0;i<n;i++)if(!visit[i]){
		dfs(i,0);
	}
	if(!ok){
		cout<<-1<<endl;
		return 0;
	}
	for(i=1;i<=n;i++){
		if(i!=1)
			printf(" ");
		printf("%lld",s[i]-s[i-1]);
	}
	printf("\n");
	return 0;
}
