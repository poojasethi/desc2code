#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#include <queue>
#include <bitset>		//UWAGA - w czasie kompilacji musi byc znany rozmiar wektora - nie mozna go zmienic
#include <cassert>
#include <iomanip>		//do setprecision
#include <ctime>
#include <complex>
using namespace std;

#define FOR(i,b,e) for(int i=(b);i<(e);++i)
#define FORQ(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b)-1;i>=(e);--i)
#define REP(x, n) for(int x = 0; x < (n); ++x)

#define ST first
#define ND second
#define PB push_back
#define MP make_pair
#define LL long long
#define ULL unsigned LL
#define LD long double

const double pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342;

#define MR 66000

vector < pair < int, int > > g[MR];	//graf dla wyliczenia sum prefiksowych

LL S[MR];	//sumy prefiksowe

bool done[MR];

bool dfs(int nr)
{	
	done[nr] = 1;
	REP(i,(int)g[nr].size())
		if(!done[g[nr][i].ST])
		{
			S[g[nr][i].ST] = S[nr] + g[nr][i].ND;
			if(!dfs(g[nr][i].ST))
				return 0;
		}
		else if(S[g[nr][i].ST] != S[nr] + g[nr][i].ND)
			return 0;
	return 1;
}//dfs

int main()
{
	int N, M;
	scanf("%d%d", &N, &M);
	REP(i,M)
	{
		int a, b, c;
		scanf("%d%d%d", &a, &b, &c);a--;
		g[a].PB(MP(b,c));
		g[b].PB(MP(a,-c));
	}
	FORQ(i,0,N)	//na poczatku wszystkie sumy prefiksowe = 0
		if(!done[i])
			if(!dfs(i))
			{
				printf("-1\n");
				return 0;
			}
	REP(i,N)
		printf("%lld ", S[i+1]-S[i]); printf("\n");
	return 0;
}