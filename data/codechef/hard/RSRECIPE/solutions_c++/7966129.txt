#include<iostream>
#include<algorithm>
#include<cstdio>
#include<list>
#include<vector>
using namespace std;
bool flag;
void dfs(int i,bool *visited,vector<pair<long long int,int> >*adj,long long int *ans)
{
visited[i]=true;
for(int j=0;j<adj[i].size();j++)
if(!visited[adj[i][j].second])
{
ans[adj[i][j].second]=ans[i]+adj[i][j].first;
dfs(adj[i][j].second,visited,adj,ans);
}
else if(ans[adj[i][j].second]!=ans[i]+adj[i][j].first)
flag=false;
}

void func(vector<pair<long long int,int> >*adj,int n)
{
bool visited[n+2];
long long int ans[n+5];
flag=true;
fill(ans,ans+n+5,0);
fill(visited,visited+n+2,false);
for(int i=0;i<=n;i++)
if(!visited[i])
{
dfs(i,visited,adj,ans);
if(!flag)
{
cout<<-1<<endl;
return;
}
}
for(int i=1;i<=n;i++)
cout<<ans[i]-ans[i-1]<<" ";
cout<<endl;
}

int main()
{
ios_base::sync_with_stdio(false);
int n,m;
cin>>n>>m;
vector<pair<long long int,int> >adj[n+2];
while(m--)
{
int u,v,z;
cin>>u>>v>>z;
adj[u-1].push_back(make_pair(z,v));
adj[v].push_back(make_pair(-z,u-1));
}
func(adj,n);
return 0;
}
