/* Codechef feb problem Restore the recipe
 * Restore the original array given m sum[x...y] = z
 * make a graph with edges sum[x-1] -> sum[y] with weight z and
 * sum[y] -> sum[x-1] with weight -z
 */

#include<iostream>
#include<cstdio>
#include<vector>
using namespace std;
#define MAXN 65537
#define PII pair<int, int>
#define mp make_pair

vector< PII > G[MAXN];
bool visited[MAXN], bad;
long long res[MAXN];
void dfs (int node)
{
  visited[node] = true;

  for (int i = 0; i < G[node].size(); i++) {
    int u = G[node][i].first, c = G[node][i].second;
    if (!visited[u]) {
      res[u] = res[node] + c;
      dfs (u);
    } else {
      if (res[u] != res[node] + c)
	bad = true;
    }
  }
}

int main ()
{
  int n, m, x, y, z;
  cin>>n>>m;
  for (int i = 0; i < m; i++) {
    cin>>x>>y>>z;
    x--;
    G[x].push_back(mp(y, z));
    G[y].push_back(mp(x, -1*z));
  }

  for (int i = 1; i <= n; i++) if (!visited[i]) {
      res[i] = 0;
      dfs (i);
    }
  if (bad)
    cout<<"-1"<<endl;
  else {
    cout<<res[1] - res[1 - 1];
    for (int i = 2; i <= n; i++)
      cout<<" "<<res[i] -res[i - 1];
    cout<<endl;
  }
  return 0;
}
				 
    
