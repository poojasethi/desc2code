#include <stdio.h>
#define MAXNUMS 444444
#define MAXPAIRS 444444
int i;
int A[MAXNUMS+2];
int x[MAXPAIRS+2];
int y[MAXPAIRS+2];
int link[MAXPAIRS+2];
long long int S[MAXNUMS+2];
int V[MAXPAIRS+2];
bool visited[MAXNUMS+2];
int a[MAXPAIRS+2];
int b[MAXPAIRS+2];
int Z[MAXPAIRS+2];
int pairs;
inline int read(){
	char ch;int res=0,fla=0,mu=1;
	while(1){
		ch=getchar();
		if(ch==10||ch==13||ch==32)if(fla)return res*mu;else continue;
		if(ch=='-')mu=-1;else res=res*10+ch-'0';
		fla=1;
	}
}

void dfs(int node){
	visited[node]=true;
	int i=x[node]; 
	int Y=y[i];
	
	while(i){
		if(!visited[Y]){
			S[Y]=S[node]+V[i];
			dfs(Y);
		}
		i = link[i];
		Y = y[i];
	}
}

void addEdge(int X, int Y, int Z){
	y[++pairs]=Y;
	link[pairs]=x[X];
	x[X]=pairs;
	V[pairs]=Z; 
}

int main(){	
	int N;
	int M;
	scanf("%d %d", &N, &M);
	for(int i=1;i<=M;i++){
		//scanf("%d %d %d", &a[i], &b[i], &Z[i]);
		a[i]=read();
		b[i]=read();
		Z[i]=read();
		addEdge(a[i]-1, b[i], Z[i]);
		addEdge(b[i], a[i]-1, -Z[i]);
	}
	for(int i=0;i<=N;i++){
		if(!visited[i])
			dfs(i);
	}
	for(int i=1;i<=M;i++){
		if((S[b[i]]-S[a[i]-1])!=Z[i]){
			printf("-1\n");
			return 0;
		}
	}
	for(int i=1;i<=N;i++)
		printf("%d ", S[i]-S[i-1]);
	return 0;
}

