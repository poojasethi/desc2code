//Template
//Template copied from Anudeep2011, Thanks

#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <string> vs;
typedef pair< int ,int > pii;
typedef vector <ll> vll;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)
#define clear(freq) memset(freq,0,sizeof(freq))

#define S 1024*1024*4
char IN[S],OUT[S],*iptr,*optr,stk[20];

struct fastIO
{
    fastIO()
    {
		fread(IN,1,S,stdin);
		iptr=IN;
		optr=OUT;
	}
	void check()
	{
		int size=IN+S-iptr;
		if(size<200)
		{
			memcpy(IN,iptr,size);
			fread(IN+size,1,S-size,stdin);
			iptr=IN;
		}
	}
	void check2()
	{
		int size=OUT+S-optr;
		if(size<200)
		{
			fwrite(OUT,optr-OUT,1,stdout);
			optr=OUT;
		}
	}
	
	int sc()
	{
		check();
		while(*iptr<=32) iptr++;
		int x=0,sign;
		if(*iptr=='-') { sign=1; iptr++; }
		else sign=0;
		while(*iptr>32) x= x*10 + *iptr++ -'0';
		return sign?-x:x;
	}
	
	void ssc(char *s) {
		check();
		while(*iptr<=32) iptr++;
		int i=0;
		while(*iptr>32) *(s+i) = *iptr++, i++;
		*(s+i) = '\0';
	}
	
	void pr(int x)
	{
		check2();
		if(x==0)
			*optr++='0';
		else
		{
			int y;
			int top=-1;
			while(x>0)
			{
				y=x/10;
				stk[++top]=x-y*10+'0';
				x=y;
			}
			while(top>=0) *optr++=stk[top--];
		}
		*optr++='\n';
	}
}io;

#define N 65636
#define M 200002

struct edge {
	int v,c;
	edge() { }
	edge(int v,int c) : v(v), c(c) { }
};
vector <edge> adj[N];
int s[N],V[N];

int dfs(int i,long long c) {
	// printf("%d %lld %d\n",i,c,V[i]);
	if(V[i]) return s[i]==c;
	V[i] = 1;
	s[i] = c;
	rep(j,adj[i].sz) if(dfs(adj[i][j].v,c+adj[i][j].c)==0) return 0;
	return 1;
}
	
int main() {
	int n = io.sc(), m = io.sc(),u,v,c;
	rep(i,m) {
		u = io.sc(); v = io.sc(); c = io.sc();
		adj[u-1].pb(edge(v,c));
		adj[v].pb(edge(u-1,-c));
	}
	rep(i,n+1) if(V[i]==0)
		if(dfs(i,0)==0) {
			printf("-1");
			return 0;
		}
	rep(i,n) printf("%d ",s[i+1]-s[i]);
	return 0;
}