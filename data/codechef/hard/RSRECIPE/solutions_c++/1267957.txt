#include<iostream>
#include<cstdlib>
#include<vector>
#include<climits>
#include<cctype>
#include<map>
#include<list>
#include<cstdio>
#include<algorithm>
#include<memory.h>
#include<cmath>
#include<queue>
#include<fstream>
#include<sstream>
#include<set>
#include<iomanip>
#define L long long int
#define LD long double
#define pi 3.141592653589793238462643383
#define M 1000000007

using namespace std;

#define BUFSIZE (100000)
char inputbuffer[BUFSIZE];
char *ioptr=inputbuffer+BUFSIZE,*ioend=inputbuffer+BUFSIZE;
int input_eof=0;
 
#define getchar() ({if (ioptr >= ioend) init_input(); *ioptr++;})
#define eof() (ioptr>=ioend && input_eof)
#define eoln() ({if(ioptr >= ioend) init_input(); *ioptr == '\n';})
 
void init_input()
{
	if (input_eof)
		return;
	int existing = BUFSIZE - (ioend - inputbuffer);
	memcpy(inputbuffer, ioend, existing);
	int wanted = ioend - inputbuffer;
	int count=fread(inputbuffer + existing, 1, wanted, stdin);
	if (count < wanted)
		input_eof = 1;
	ioend = inputbuffer + BUFSIZE - (wanted - count);
	while (*--ioend > ' ');
	ioend++;
	ioptr=inputbuffer;
}
 
inline void non_whitespace()
{
	for(;;)
	{
		if(ioptr>=ioend)
			init_input();
		if(*ioptr>' ')
			return;
		ioptr++;
	}
}
 
inline int getint()
{
	non_whitespace();
	int neg=0;
	if(*ioptr=='-')
	{
		ioptr++;
		neg=1;
	}
	int n=0;
	while(*ioptr>' ')
		n=(n<<3)+(n<<1)+*ioptr++-'0';
	ioptr++;
	if(neg)
		n=-n;
	return n;
}

struct node
{
       int v;
       int w;
};

int vis[65537];
L s[65537];
vector<struct node> g[65537];

void dfs(int i,int c)
{
     s[i]=c;
     for(int j=0;j<g[i].size();j++)
     {
                               if(s[g[i][j].v]==LONG_LONG_MIN)
                               dfs(g[i][j].v,c+g[i][j].w);
     }
}

int main()
{
    int n,m,x,y,z,i,j;
    n=getint();
    m=getint();
    struct node temp;
    for(i=0;i<m;i++)
    {
                    x=getint();
                    y=getint();
                    z=getint();
                    temp.v=y;
                    temp.w=z;
                    g[x-1].push_back(temp);
                    temp.v=x-1;
                    temp.w=-z;
                    g[y].push_back(temp);
    }
    for(i=0;i<=n;i++)
    s[i]=LONG_LONG_MIN;
    
    for(i=0;i<=n;i++)
    {
                    if(s[i]==LONG_LONG_MIN)
                    {
                                dfs(i,0);
                    }
    }
    
    for(i=0;i<=n;i++)
    {
                     for(j=0;j<g[i].size();j++)
                     {
                                               if(s[g[i][j].v]!=s[i]+g[i][j].w)
                                               {
                                                                               printf("-1\n");
                                                                               return 0;
                                               }
                     }
    }
    for(i=0;i<n;i++)
    {
                    printf("%lld ",s[i+1]-s[i]);
    }
    
    printf("\n");
    //system("pause");           
    return 0;
}
