	#include <vector>
	#include <string>
	#include <map>
	#include <set>
	#include <queue>
	#include <algorithm>
	#include <iostream>
	#include <cstdio>
	#include <cmath>
	#include <cstdlib>
	#include <ctime>
	#include <cctype>
	#include <cstring>
	#include <memory.h>
	#include <cassert>

	using namespace std;

	#define ford(i, a, b, c) for(int i=(a); i<(b); i+=(c))
	#define fori(i, a, b) ford(i,a,b,1)
	#define rep(i, n) fori(i,0,n)
	#define ifor(i, a, b) for(int i=(a); i>=(b); i--)
	#define iter(i, a) for(typeof((a).begin()) i=(a).begin(); i!=(a).end(); i++)
	#define si(x) ((int)x.size())
	#define SS ({int x;scanf("%d",&x);x;})
	#define pb push_back
	#define mp make_pair
	#define all(a) a.begin(),a.end()
	#define fill(a, v) memset(a, v, sizeof(a))
	#define inf (int)1e9
	#define linf (long long)1e18
	#define V vector
	#define S string
	

	typedef V<int> vi;
	typedef V<S> vs;
	typedef long long ll;
	typedef pair<int,int> pii;



	#define NMAX 65540
	/* Program Body starts here */

	vector< pair<int, int> > arr[ NMAX];
	bool visited [NMAX];
	int n,m;
	bool canSolve;
	ll value[NMAX];


	void dfs( int node, ll val){

		if( canSolve==false) return;

		if ( visited[node]==true){
			if( value[node]!=val)
				 canSolve=false; 
			return;
		}
		value[node]=val;
		visited[node]=true;

		rep(i, (int)arr[node].size())
		{
	
			dfs( arr[node][i].first, val+arr[node][i].second);
		
		}

		return;
	}

	int main(){
      
     
	  scanf("%d",&n);
	  scanf("%d",&m);

	  int a ,b,z;
	  rep(i,m){
  
		  scanf("%d",&a);
		  scanf("%d",&b);
		  scanf("%d",&z);

		  a--;
		  arr[a].pb(mp(b,z));
		  arr[b].pb(mp(a,-z));
		   }

	  rep(i,n+1)visited[i]=false;

	  canSolve=true;
	  rep(i,n+1){
  
		  if( canSolve == true && visited[i]==false)
			  dfs( i,0);
			}

		  if( canSolve==false)
			  puts("-1");
		  else {
	    
			  rep(i,n)
				  printf("%lld ",value[i+1]-value[i]);	  
		  }
	  
	}