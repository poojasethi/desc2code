#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
 
using namespace std;
 
typedef unsigned uint;
typedef long long Int;
typedef vector<int> vint;
typedef pair<int,int> pint;
#define mp make_pair
 
template<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template<class T> void chmin(T &t, T f) { if (t > f) t = f; }
template<class T> void chmax(T &t, T f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }
 
const Int INF = 1001001001001001001LL;
 
int N, M, K;
Int A[50010];
 
int cnt[110];
Int dp[110][110];
 
int main() {
int i;
int u;
int x, y;
for (int TC = in(); TC--; ) {
N = in();
M = in();
K = in();
for (i = 0; i < N; ++i) {
A[i] = in();
}
sort(A, A + N);
Int ASum = accumulate(A, A + M, 0LL);
int lim = K * 2;
memset(dp, 0x3f, sizeof(dp));
dp[0][(int)(ASum % K)] = ASum;
// minus
memset(cnt, 0, K << 2);
for (i = M; i--; ) {
u = (int)((-A[i] % K + K) % K);
if (++cnt[u] <= lim) {
for (x = lim - 1; x >= 0; --x) for (y = 0; y < K; ++y) {
chmin(dp[x + 1][(y + u) % K], dp[x][y] - A[i]);
}
}
}
// plus
memset(cnt, 0, K << 2);
for (i = M; i < N; ++i) {
u = (int)((+A[i] % K + K) % K);
if (++cnt[u] <= lim) {
for (x = 1; x <= lim; ++x) for (y = 0; y < K; ++y) {
chmin(dp[x - 1][(y + u) % K], dp[x][y] + A[i]);
}
}
}
Int ans = dp[0][0];
if (ans >= INF) ans = -1;
printf("%lld\n", ans);
}
return 0;
}