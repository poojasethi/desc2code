//BEGIN_CUT
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <cstdlib>
#include <numeric>
#include <bitset>
#include <cstring>
#include <sstream>
#include <utility>
#include <queue>
#include <cassert>
using namespace std;

#define X first
#define Y second
#define FI first
#define SE second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back
typedef long long LL;
typedef double D;
typedef long double LD;
typedef vector<int> VI;
typedef pair<int,int> PII;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(VAR(i,a);i<=(b);++i)
#define FORD(i,a,b) for(VAR(i,a);i>=(b);--i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define SIZE(a) ((int)((a).size()))
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))
int cond = 1;
#define db(x) {if(cond){cerr << __LINE__ << " " << #x << " " << x << endl; } }
#define dbv(x) {if(cond){cerr << __LINE__ << " " << #x << ": "; FORE(__i,x) cerr << *__i << " "; cerr << endl;} }
//END_CUT


const LL LINF = LL(1e9) * LL(1e9);

inline int md(int a, int k) {
	return a >= k ? a - k : a;
}

void alg() {
	int n, m, k;
	scanf("%d %d %d", &n, &m, &k);
	int taken = 0;
	vector<int> A(n);
	for (int i = 0; i < n; ++i) {
		scanf("%d", &A[i]);
	}
	sort(ALL(A));
	vector<int> num(n);
	vector<int> got(k, 0);
	for (int i = 0; i < m; ++i) {
		num[i] = got[A[i] % k]++;
	}
	vector<int> options;
	LL result = 0;
	for (int i = 0; i < m; ++i) {
		if (num[i] < got[A[i] % k] - k) {
			++taken;
			result += A[i];
		} else {
			options.PB(A[i]);
		}
	}
	got = vector<int>(k, 0);
	for (int i = m; i < n; ++i) {
		if (got[A[i] % k]++ <= k) {
			options.PB(A[i]);
		}
	}
	int needed = m - taken;
	vector<LL> minCost[needed + 1];
	for (int i = 0; i <= needed; ++i) {
		minCost[i].resize(k, LINF);
	}
	minCost[0][result % k] = result;
	FORE (it, options) {
		int cur = *it % k;
		for (int prev = needed - 1; prev >= 0; --prev) {
			for (int rem = 0; rem < k; ++rem) {
				minCost[prev + 1][md(rem + cur, k)] = min(minCost[prev + 1][md(rem + cur, k)],
															 minCost[prev][rem] + *it);
			}
		}
	}
	if (minCost[needed][0] == LINF) {
		printf("-1\n");
	} else {
		printf("%lld\n", minCost[needed][0]);
	}
}

int main() {
	int d;
	scanf("%d", &d);
	while (d--) {
		alg();
	}

    return 0;
}
