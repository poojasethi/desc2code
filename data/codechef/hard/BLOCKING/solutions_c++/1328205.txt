#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <time.h>
#include <vector>

using namespace std;

#define mp make_pair
#define pb push_back
#define fi(n) fo(i,n)
#define fj(n) fo(j,n)
#define fk(n) fo(k,n)
#define fd(i,n) for(int i=(int)(n)-1; i>=0; --i)
#define fo(i,n) fr(i,0,n)
#define fr(i,a,b) for(int i=(int)a; i<(int)b; ++i)
#define sz(x) ((int) (x).size())
#define all(x) (x).begin(), (x).end()
#define sqr(x) ((x)*(x))
#define srt(x) sort(all(x))
#define foreach(it,a) for(typeof((a).begin()) it=(a).begin(); it!=(a).end(); ++it)
#define x first
#define y second
#define me (*this)
#define PQ(t) priority_queue< t, vector< t >, greater< t > >
#define CLR(a,v) memset(a, v, sizeof(a))
#define UNIQUE(a) srt(a); a.resize(unique(all(a))-a.begin())
#define RAND (((double)rand()/RAND_MAX) + ((double)rand()/RAND_MAX/RAND_MAX))

typedef long long ll;

typedef pair< int,int > ii;
typedef vector< ii > vii;
typedef vector< vii > vvii;
typedef vector< int > vi;
typedef vector< vi > vvi;

typedef vector< double > vd;
typedef vector< vd > vvd;

typedef vector< ll > vll;
typedef vector< vll > vvll;

typedef vector< string > vs;

typedef vector< bool > vb;

const int INF = 1000*1000*1000+7;
const double EPS = 1e-9;
const double PI = 2*acos(0.0);
template<class T> void chmin(T &t, T f){ if(t>f) t=f; }
template<class T> void chmax(T &t, T f){ if(t<f) t=f; }

int nextComb(int x) {
  int smallest = x&-x;
  int ripple = x + smallest;
  int ones = x^ripple;
  ones = (ones >> 2) / smallest;
  return ripple|ones;
}

int bit_count(int x) { return x == 0 ? 0 : 1+bit_count(x&(x-1)); }
inline int low_bit(int x) { return x&-x; }
inline int sign (double x) { return x < -EPS ? -1 : x > EPS ? 1 :  0; }
inline int sign (int x) { return (x>0) - (x< 0); }
int gcd(int a, int b) { while (b) { int r = a %b; a = b; b = r; } return a;}
int lcm (int a, int b) { return a/gcd(a,b)*b; }

inline int getint(){
  int a;
  return scanf("%d", &a) ? a : (fprintf(stderr, "trying to read\n"),-1);
}

inline double getdouble(){
  double a;
  return scanf("%lf", &a) ? a : (fprintf(stderr, "trying to read\n"),-1);
}








vvi prefToRank(vvi &pref){
  int n=sz(pref);
  vvi rank(n, vi(n));
  fi(n)
    fj(n)
      // suppose j=2, pref[i][j]=5
      // so my 2th preference is person 5
      // therefore my ranking of 5 is 2nd
      rank[i][pref[i][j]] = j;
  return rank;
}

vvi rankToPref(vvi &rank){
  int n=sz(rank);
  vvi pref(n, vi(n));
  fi(n)
    fj(n)
      // suppose j=2, rank[i][j]=5
      // then my 5th preference is person 2
      pref[i][rank[i][j]] = j;
  return pref;
}


struct stableMP{
  int n;
  vi partner; // woman j, married man 'partner[j]'
  vi ret; // man i, married woman 'ret[i]'
  vi upto; // the next woman man i should propose to, is 'upto[i]'

  stableMP(vvi &manPrefs, vvi &womanPrefs): n(sz(manPrefs)), partner(n, -1), ret(n, 0), upto(n, 0){
    // every man starts off unmarried
    vi bachelors;
    fi(n)
      bachelors.pb(i);
    vvi womanRank = prefToRank(womanPrefs);
    // and starts proposing to women
    while(!bachelors.empty()){
      int i = bachelors.back(); bachelors.pop_back();
      for(;;){
        int j = manPrefs[i][upto[i]++];
        // if she is not married, or prefers you, you are in
        if(partner[j]==-1 || womanRank[j][i] < womanRank[j][partner[j]]){
          if(partner[j] != -1)
            bachelors.pb(partner[j]);
          partner[j] = i;
          ret[i] = j;
          break;
        }
      }
    }
  }
};


void myCode(){

  int n=getint();
  vvi board(n, vi(n));
  fi(n)
    fj(n)
      board[i][j] = getint();

  vvi manPrefs(n, vi(n)), womanPrefs(n, vi(n));
  // make person prefer early house
  fi(n){
    vii a;
    fj(n)
      a.pb(ii(board[i][j], j));
    srt(a);
    fj(n)
      manPrefs[i][j] = a[j].y;
  }
  // make house prefer late people
  fj(n){
    vii a;
    fi(n)
      a.pb(ii(-board[i][j], i));
    srt(a);
    fi(n)
      womanPrefs[j][i] = a[i].y;
  }
  // solve SMP
  stableMP smp(manPrefs, womanPrefs);
  // print answer
  fi(sz(smp.ret))
    printf("%d%c", smp.ret[i]+1, i==sz(smp.ret)-1?'\n':' ');

}

int main(){
  srand(time(NULL));
  myCode();
  return 0;
}
