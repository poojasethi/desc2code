//#pragma comment(linker,"/STACK:16777216") /*16Mb*/
//#pragma comment(linker,"/STACK:33554432") /*32Mb*/
#define _CRT_SECURE_NO_DEPRECATE
#include<sstream>
#include<iostream>
#include<numeric>
#include<sstream>
#include<cstdio>
#include<cstdlib>
#include<cmath>
#include<memory>
#include<string>
#include<vector>
#include<cctype>
#include<list>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<set>
#include<algorithm>
using namespace std;

typedef unsigned long long      ui64;
typedef long long               i64;
typedef	vector<int>             VI;
typedef	vector<bool>            VB;
typedef	vector<VI>              VVI;
typedef	vector<string>          VS;
typedef	pair<int,int>           PII;
typedef map<string,int>         MSI;
typedef set<int>                SI;
typedef set<string>             SS;
typedef map<int,int>            MII;
typedef	pair<double,double>     PDD;

#define PB                      push_back
#define MP                      make_pair
#define X                       first
#define Y                       second
#define FOR(i, a, b)            for(int i = (a); i < (b); ++i)
#define RFOR(i, a, b)           for(int i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b)             memset(a, b, sizeof(a))
#define SZ(a)                   int((a).size())
#define ALL(a)                  (a).begin(), (a).end()
#define RALL(a)                 (a).rbegin(), (a).rend()
#define INF                     (2000000000)

#ifdef _DEBUG
#define eprintf(...) fprintf (stderr, __VA_ARGS__)
#else
#define eprintf(...) assert (true)
#endif

int main()
{
	//while(true) {
		int n;
		cin >> n;
		vector< pair<int,pair<int,int> > > R;
		FOR(i,0,n) {
			FOR(j,0,n) {
				int t;
				scanf("%d",&t);
				R.PB( MP(t,MP(i,j)) );
			}
		}
		sort(ALL(R));
		VI points(n,n);
		VVI r(n,VI(n,0));
		vector< queue<int> > g(n);
		
		FOR(i,0,SZ(R)) {
			int v = R[i].Y.X;
			int to = R[i].Y.Y;
			g[v].push(to);
			r[to][v] = points[to]--;
		}
		//data parsed

		set<int> un;
		FOR(i,0,n)
			un.insert(i);
		VI engaged(n,-1);
		while(!un.empty()) {
			int v = *un.begin();
			un.erase(v);
			int to = g[v].front(); g[v].pop();
			if(engaged[to]!=-1) {
				if( r[to][engaged[to]] > r[to][v] ) {
					//new engagement
					un.insert(engaged[to]);
					engaged[to] = v;
				}
				else
					un.insert(v);
			}
			else {
				engaged[to] = v;
			}
		}
		vector<PII> ans;
		FOR(i,0,n)
			ans.PB( MP(engaged[i],i));
		sort(ALL(ans));
		FOR(i,0,n) {
			printf("%d%c",ans[i].Y+1,i==n-1?'\n':' ');
		}
	//}
    return 0;
}