#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

bool cmp(const int &a,const int &b)
{
	return b>a;
}

int propcnt[120];
pair <int,int> rnk[2][120][120];
int weng[120],meng[120];
queue <int> Q;

int main()
{
	int n,i,j,cur,tmp;
	while(cin>>n)
	{
		for(i=0;i<n;i++)
		{
			propcnt[i]=0;
			Q.push(i);
			weng[i]=meng[i]=(-1);
			for(j=0;j<n;j++)
			{
				cin>>rnk[0][i][j].first;
				rnk[0][i][j].second=j;
				rnk[1][i][j].first=rnk[0][i][j].first;
				rnk[1][i][j].second=i;
			}
		}
		for(i=0;i<n;i++)
			sort(rnk[0][i],rnk[0][i]+n);
		
		int singlecnt=n;

		while(!Q.empty())
		{
			cur=Q.front();
			Q.pop();
			if(propcnt[cur]==n)
				continue;
			tmp=rnk[0][cur][propcnt[cur]].second;
			if(weng[tmp]==(-1))
			{
				weng[tmp]=cur;
				meng[cur]=tmp;
				singlecnt--;
			}
			else if(rnk[1][cur][tmp]>rnk[1][weng[tmp]][tmp])
			{
				Q.push(weng[tmp]);
				meng[weng[tmp]]=-1;
				meng[cur]=tmp;
				weng[tmp]=cur;
			}
			else
				Q.push(cur);
			propcnt[cur]++;
		}
		if(singlecnt)
			cout<<-1;
		else
			for(i=0;i<n;i++)
				cout<<(i?" ":"")<<meng[i]+1;
		cout<<endl;

	}
}
