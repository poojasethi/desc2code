#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
#include<queue>
#include<map>
using namespace std;


#define NN 105
#define mp make_pair
#define fi first
#define se second



typedef pair<int, int> PII;

priority_queue<PII>f[NN];
priority_queue<PII>h[NN];


int fp[NN][NN], hp[NN][NN], fs[NN], hs[NN], fn[NN];
int N;


void in()
{
    int x;
    scanf("%d", &N);
    for(int i=1; i<=N; i++)
    {
       for(int j=1; j<=N; j++)
       {
         scanf("%d", &x);
         f[i].push(mp(-x, j));
         h[j].push(mp(x, i));
       }

    }
    for(int i=1; i<=N; i++)
    {
        for(int j=1; j<=N; j++)
        {
            fp[i][j] = f[i].top().se;
            f[i].pop();
        }
    }
    for(int i=1; i<=N; i++)
    {
        for(int j=1; j<=N; j++)
        {
            hp[i][h[i].top().se]= -j;
            h[i].pop();
        }
    }
}
bool isstable()
{
    for(int i=1; i<=N; i++)
    {
        if(fs[i] == -1)return 0;
    }
    return 1;
}

void propose(int a, int b)
{
    if(hs[b] == -1)
    {
        fs[a] = b;
        hs[b] = a;
    }
    else if(hp[b][a]> hp[b][hs[b]])
    {
        fs[hs[b]] = -1;
        fn[hs[b]]++;
        fs[a] = b;
        hs[b] =a;
    }
    else
    {
        fn[a]++;
    }
}

void solve()
{
    in();
    fill(fs, fs+N+1, -1);
    fill(hs, hs+N+1, -1);
    fill(fn, fn+N+1, 1);
    while(!isstable())
    {
        for(int i=1; i<=N; i++)
        {
            if(fs[i] == -1)
            {
                propose(i, fp[i][fn[i]]);
            }
        }
    }
    for(int i=1; i<=N; i++)
    {
        printf("%d ", fs[i]);
    }
}

int main()
{
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin);
// freopen("output.txt","w",stdout);
   #endif

    solve();

}
