
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
  
using namespace std;
  

#define rep(i, n) for (int i = 0; i < (int)n; ++i)
#define foreach(it, c) for (__typeof__((c).begin()) it=(c).begin(); it != (c).end(); ++it)
#define rforeach(it, c) for (__typeof__((c).rbegin()) it=(c).rbegin(); it != (c).rend(); ++it)
#define all(c) (c).begin(), (c).end()
#define rall(c) (c).rbegin(), (c).rend()
#define CL(arr, val) memset(arr, val, sizeof(arr))
#define COPY(dest, src) memcpy(dest, src, sizeof(dest))
  
template <class T> void max_swap(T& a, const T& b) { a = max(a, b); }
template <class T> void min_swap(T& a, const T& b) { a = min(a, b); }
  
typedef long long ll;
typedef pair<int, int> pint;
  
template <class T, class U> ostream& operator<<(ostream& os, pair<T, U>& p) { os << "( " << p.first << ", " << p.second << " )"; return os;  }
 
template <class T> string to_s(const T& a) { ostringstream os; os << a; return os.str(); }
template <class T> T to_t(const string& s) { istringstream is(s); T res; is >> res; return res; }
 
bool valid_pos(int x, int y, int w, int h) { return 0 <= x && x < w && 0 <= y && y < h; }
  
template <class T> void print(T a, int n, int br = 1, const string& deli = " ") { for (int i = 0; i < n; ++i) { cout << a[i]; if (i + 1 != n) cout << deli; } while (br--) cout << endl; }
template <class T> void print(const vector<T>& v, int br = 1, const string& deli = " ") { print(v, v.size(), br, deli); }
template <class T> void print2d(T a, int w, int h, int width = -1, int br = 1) { for (int i = 0; i < h; ++i) { for (int j = 0; j < w; ++j) {    if (width != -1) cout.width(width); cout << a[i][j] << ' '; } cout << endl; } while (br--) cout << endl; }
  
template <class T> void input(T& a, int n) { for (int i = 0; i < n; ++i) cin >> a[i]; }
template <class T, class U> void input(T& a, U& b, int n) { for (int i = 0; i < n; ++i) cin >> a[i] >> b[i]; }
 
const int dx[] = { 0, 1, 0, -1 };
const int dy[] = { 1, 0, -1, 0 };
 
const int mod = 1000000007;
const double PI = acos(-1.0);



pair<vector<int>, vector<int> > stable_matching(const vector< vector<int> >& a_order, const vector< vector<int> >& b_order)
{
    assert(a_order.size() == b_order.size());

    const int n = a_order.size();
    vector<vector<int> > b_prefer(n, vector<int>(n + 1, n));
    vector<int> b_match(n, n), a_proposed(n);
    for (int b = 0; b < n; ++b)
        for (int i = 0; i < n; ++i)
            b_prefer[b][b_order[b][i]] = i;

    for (int a_ = 0; a_ < n; ++a_)
    {
        for (int a = a_; a < n; )
        {
            int b = a_order[a][a_proposed[a]++];
            if (b_prefer[b][a] < b_prefer[b][b_match[b]])
                swap(a, b_match[b]);
        }
    }

    vector<int> a_match(n);
    for (int i = 0; i < n; ++i)
        a_match[b_match[i]] = i;
    return make_pair(a_match, b_match);
}
int main()
{
    int n, a[128][128];
    scanf("%d", &n);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            scanf("%d", &a[i][j]);

    vector<vector<int> > f(n, vector<int>(n));
    for (int i = 0; i < n; ++i)
    {
        vector<pint> v;
        for (int j = 0; j < n; ++j)
            v.push_back(pint(a[i][j], j));
        sort(all(v));
        for (int j = 0; j < n; ++j)
            f[i][j] = v[j].second;
    }
    vector<vector<int> > home(n, vector<int>(n));
    for (int i = 0; i < n; ++i)
    {
        vector<pint> v;
        for (int j = 0; j < n; ++j)
            v.push_back(pint(a[j][i], j));
        sort(all(v), greater<pint>());
        for (int j = 0; j < n; ++j)
            home[i][j] = v[j].second;
    }

    vector<int> block = stable_matching(f, home).first;
    for (int i = 0; i < n; ++i)
        printf("%d%c", block[i] + 1, i + 1 < n ? ' ' : '\n');
}
