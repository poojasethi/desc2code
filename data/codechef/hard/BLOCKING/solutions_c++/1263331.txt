// Similar to Stable marriage problem - using gale shapley algorithm

#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
#include <utility>

using namespace std;

#define REP(i, n) for(int i = 0; i < (n); ++i)
#define FOR(i, st, nd) for(int i = (st); i < (nd); ++i)

typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
typedef vector<VPII> VVPII;

int main (int argc, char *argv[]) {
	int N, val;

	VVPII cranesPref(100, VPII(100));
	VVI housesPref(100, VI(100));

	VI prefIndex(101);
	VI blocked(101);

	scanf("%d", &N);

	VI houseMapping(101, -1);

	queue<int> Q;

	// Store both crane's and house's preference
	REP(i, N) {
		REP(j, N) {
			scanf("%d", &val); 
			cranesPref[i][j] = make_pair(val, j);
			housesPref[j][i] = val;
		}
		sort(cranesPref[i].begin(), cranesPref[i].begin()+N);
		prefIndex[i] = 0;
		Q.push(i);
	}

	// Read up the algorithm for stable marriage problem
	while(!Q.empty()) {
		int crane = Q.front(); Q.pop();
		int curPref = cranesPref[crane][prefIndex[crane]++].second;
			
		if(houseMapping[curPref] == -1)
			houseMapping[curPref] = crane, blocked[crane] = curPref;
		else if(housesPref[curPref][crane] > 
				housesPref[curPref][houseMapping[curPref]])
			Q.push(houseMapping[curPref]), 
				houseMapping[curPref] = crane,
				blocked[crane] = curPref;
		else
			Q.push(crane);
	}

	REP(i, N-1) printf("%d ",blocked[i]+1);
	printf("%d\n", blocked[N-1]+1);
		
	return 0;
}