#include<stdio.h>
#include<iostream>
#include<stack>
#include<algorithm>
#include<cstring>
using namespace std;
#define MAX 105
struct data
{
    int pos,D;
};
int MATRIX[200][200];
data MAN[200][200];
int WET[200],MET[200];
int NEXT[200];
bool cmp(data a,data b)
{
    if(a.D<b.D)return true;
    else return false;
}
int n;
int kase;
void done()
{
    stack<int>F;
    int M,MMM,GIRL,W;
    for(int i=n; i>=1; i--)
    {
        F.push(i);
        WET[i]=0;
        NEXT[i]=1;
    }
    while(!F.empty())
    {
        M=F.top();//any boy
        W=NEXT[M];//he will propose according to rank
        NEXT[M]=NEXT[M]+1;//next he will propose
        GIRL=MAN[M][W].pos;//house no actually
        if(WET[GIRL]==0)//if no one is there
        {
           // cout<<GIRL<<" is empty so she goes wid <<M<<endl;
            WET[GIRL]=M;//house is filled with the boy
            MET[M]=GIRL;//that boy is in that house
            F.pop();
        }
        else
        {
            MMM=WET[GIRL];//whoever in that house
            if(MATRIX[MMM][GIRL]<MATRIX[M][GIRL])//As that friend visits that house, he'll be locked in that house
            {
              //  cout<<"got kicked "<<MMM<<" uski tym "<<MATRIX[MMM][GIRL]<<" kicker tym "<<MATRIX[M][GIRL]<<" kicker "<<M<<" girl "<<GIRL<<endl;
                F.pop();
                WET[GIRL]=M;
                MET[M]=GIRL;
                F.push(MMM);
            }
        }
    }
    for(int i=1; i<=n; i++)
    {
        printf("%d ",MET[i]);
        // if(i!=n)printf(" ");
    }
    printf("\n");
}
void input()
{
    memset(NEXT,0,sizeof NEXT);
    scanf("%d",&n);
    for(int i=1; i<=n; i++)
    {
        for(int j=1; j<=n; j++)
        {
            int kochu;
            scanf("%d",&MATRIX[i][j]);
            MAN[i][j].D=MATRIX[i][j];
            MAN[i][j].pos=j;
        }
        sort(MAN[i]+1,MAN[i]+n+1,cmp);
    }
    /*for(int i=1;i<=n;i++)
    {
    cout<<"BOY "<<i<<" ";
    for(int j=1;j<=n;j++)cout<<MAN[i][j].pos<<" ";
    cout<<endl;
    }*/

}
int main()
{
    input();
    done();
}
/*
8
3 4 56 78 9 34 23 45
12 4 5 67 54 32 123 32
1 23 34 35 3 6 37 89
4 3 23 45 67 78 9 90
34 32 31 312 324 34 34 34
34 23 5 6 78 65 543 63
3 4 52 32 12 13 16 19
30 5 4 3 21 2 50 5
*/
