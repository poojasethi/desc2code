#include <bits/stdc++.h>

using namespace std;

#define mp make_pair
typedef pair<int, int> pii;

const int MAXN = (int)1e3 + 10;

pii child[MAXN][MAXN];
pii house[MAXN][MAXN];
int _pref[MAXN][MAXN];
int _next[MAXN];
int __ans[MAXN], _ans_[MAXN];

void solve(int n){
	queue<int> Q;
	for (int i = 0; i < n; ++i) Q.push(i), __ans[i] = -1;
	while (!Q.empty()){
		int cur = Q.front(); Q.pop();
		int hs = child[cur][ _next[cur]++ ].second;
		if (__ans[hs] == -1){
			__ans[hs] = cur;
		}
		else{
			if (_pref[hs][cur] < _pref[hs][ __ans[hs] ]){
				Q.push( __ans[hs] );
				__ans[hs] = cur;
			}
			else{
				Q.push(cur);
			}
		}
	}
}

int main()
{
	int n; cin >> n;
	for (int i = 0; i < n; ++i){
		for (int j = 0; j < n; ++j){
			int v; cin >> v;
			child[i][j].first = v, child[i][j].second = j;
			house[j][i].first = -v, house[j][i].second = i;
		}
	}

	for (int i = 0; i < n; ++i){
		sort(child[i], child[i] + n);
		sort(house[i], house[i] + n);
		for (int j = 0; j < n; ++j)
			_pref[i][ house[i][j].second ] = j;
	}

	solve(n);

//	for (int i = 0; i < n; ++i) cout << __ans[i] + 1 << " \n"[i == n - 1];
	for (int i = 0; i < n; ++i) _ans_[ __ans[i] ] = i + 1;
	for (int i = 0; i < n; ++i) cout << _ans_[i] << " \n"[i == n - 1];

	return 0;
}
