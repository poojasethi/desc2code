#include<iostream>
#include<stdio.h>
#include<algorithm>
#include<vector>
using namespace std;

int const maxn = 300000;

struct thorse{
	int u, v, s, t;
};

thorse horse[maxn];
vector <int> event[maxn];
int n, m, T;

bool cmp(thorse a, thorse b) {
	return a.t < b.t;
}

bool check (int time) {
	for(int i = 1 ; i <= n ; i++)
		event[i].clear();

	event[1].push_back(0);

	
	for(int i = 1 ; i <= m ; i++){
		int u = horse[i].u;
		int v = horse[i].v;
		int s = horse[i].s;
		int t = horse[i].t;

		if (event[u].empty()) continue;
		if (event[u][0] > s) continue;

		int z = event[u].size();
		z--;
		if (event[u][z] > s) {
			z = (lower_bound(event[u].begin(), event[u].end(), s) - event[u].begin());
			if (event[u][z] > s) z--;
		}

		if (s - event[u][z] <= time) event[v].push_back(t);
	}
	
	return (!event[n].empty() && event[n][0] <= T);
}
int main()
{
	scanf("%d %d %d", &n, &T, &m);
	for(int i = 1;i <= m;i++)
		scanf("%d %d %d %d", &horse[i].u, &horse[i].v, &horse[i].s, &horse[i].t);
	sort(horse+1, horse+m+1, cmp);
	int l, r;
	l = 0; r = 1000000000;
	int res = -1;
	while (l <= r) {
		int mid = (l + r) / 2;
		if (check(mid)) {
			res = mid;
			r = mid - 1;
		}
		else l = mid + 1;
	}
	printf("%d\n", res);
	return 0;
}