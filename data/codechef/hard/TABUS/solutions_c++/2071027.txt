//
// 
//
// COPIED from ping128 to test
// //

#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <algorithm>
#include <map>
#include <ctype.h>

#define MAXN 50005
#define MAXB 100005

using namespace std;

int buses[MAXB][4]; // start, end, start time, end time
int N, T, B;

vector<int> consideringBuses;
vector<int> stations[MAXN];

bool cmp1(int a, int b){
	if(buses[a][3] != buses[b][3])
		return buses[a][3] < buses[b][3];
	return buses[a][2] < buses[b][2];
}

int sz;
vector<int>::iterator it;

bool possible(int waitTime){

	for(int i = 1; i <= N; i++ ){
		stations[i].clear();
	}

	stations[1].push_back(0);
	for(int i = 0; i < sz; i++ ){
		int bus = consideringBuses[i];
		int startStation = buses[bus][0];
		int endStation = buses[bus][1];
		int startTime = buses[bus][2];
		int endTime = buses[bus][3];
		it = lower_bound(stations[startStation].begin(), stations[startStation].end(), startTime - waitTime);
		if(it != stations[startStation].end() && *it <= startTime){
			stations[endStation].push_back(endTime);
			if(endStation == N)
				return true;
		}
	}

	return false;
}


int main()
{
//	freopen("1.in", "r", stdin);
	scanf("%d %d %d", &N, &T, &B);
	for(int i = 1; i <= B; i++ ){
		for(int j = 0; j < 4; j++ )
			scanf("%d", &buses[i][j]);
		if(buses[i][2] > T || buses[i][3] > T) continue;
		consideringBuses.push_back(i);
	}

	sz = consideringBuses.size();
	sort(consideringBuses.begin(), consideringBuses.end(), cmp1);


	int ans = -1;
	int left = 0, right = T;
	while(left <= right){
		int waitTime = (left + right) / 2;
		if(possible(waitTime)){
			ans = waitTime;
			right = waitTime - 1;
		} else {
			left = waitTime + 1;
		}
	}

	printf("%d\n", ans);

	return 0;	
}

