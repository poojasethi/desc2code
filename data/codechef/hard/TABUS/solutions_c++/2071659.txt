#include <iostream>
#include <functional>
#include <vector>
#include <algorithm>
#include <set>

#define MAXSTATIONS 50005

typedef struct Bus 
{
	int startStation, endStation, startTime, endTime;
	Bus(int a,int b, int c, int d)
	{
		 startStation = a;
		 endStation = b;
		 startTime = c;
		 endTime = d;
	}
	
	
} Bus;

bool BusCompare(const Bus* lhs, const Bus* rhs)
{

		if (lhs->endTime != rhs->endTime)
			return lhs->endTime < rhs->endTime;
		return lhs->startTime < rhs->startTime;
	
}
typedef struct Station
{
	int stationNumber;
	Station(int a) 
	{
		stationNumber = a;
	}

	int minTimeToreach;
} Station;

std::vector<Bus*> buses;
int NStation, timeLimit, numBuses;
std::vector<int> stations[MAXSTATIONS];
std::vector<int>::iterator it;

bool PathExists(int waitforTime)
{
	for (int i =0; i <= NStation; ++i)
		stations[i].clear();
	stations[1].push_back(0);

	for(int i = 0; i < numBuses; ++i)
	{
		Bus* b = buses[i];
		it = std::lower_bound(stations[b->startStation].begin(),
			stations[b->startStation].end(),
			b->startTime - waitforTime) ;

		if (it != stations[b->startStation].end() && *it <= b->startTime)
		{
			stations[b->endStation].push_back(b->endTime);
			if(b->endStation == NStation)
				return true;
		}
			
	}
	return false;
}

int main()
{
	
	std::cin >> NStation >> timeLimit >> numBuses;
	
	for(int i = 0 ; i < numBuses; ++i)
	{
		int startStation, endStation, startTime, endTime;
		std::cin >> startStation >> endStation >> startTime >> endTime;		
		if (startTime > timeLimit || endTime > timeLimit) continue;
		buses.push_back(new Bus(startStation,endStation,startTime,endTime));
	}
	std::sort(buses.begin(), buses.end(),BusCompare);
	numBuses = buses.size();
	int LeastTime = 0;
	int MostTime = timeLimit;
	
	int op = -1;
	while(LeastTime<=MostTime)
	{
		int midTime = (MostTime + LeastTime)/2;
		if(PathExists(midTime))
		{
			op = midTime;
			MostTime = midTime - 1;
			
		}
		else
		{
			LeastTime = midTime + 1;
		}
	}

	std::cout << op;
}
