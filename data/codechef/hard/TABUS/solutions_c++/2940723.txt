#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <utility>
#include <climits>
#include <cfloat>
#include <cassert>
using namespace std;
 
#define init(mem)       memset(mem,0,sizeof(mem))
#define ull             unsigned long long int
#define ll              long long int
#define vi              vector<int>
#define vs              vector<string>
 
using std::string;
struct IO {
    char buf[1 << 20], * ptr; // 1 MB output buffer
    char tmp[1 << 10];
    // fast input routines
    char cur;
    inline char nextChar() { return cur = getc_unlocked(stdin); }
    inline char peekChar() { return cur; }
    inline operator bool() { return (peekChar() != 0); }
    inline static bool isBlank(char c) { return (c < '.' && c); }
    inline bool skipBlanks() { while (isBlank(nextChar())); return peekChar() != 0; }
    inline IO& operator >> (char & c) { c = nextChar(); return *this; }
    inline IO& operator >> (char * buf) {
        if (skipBlanks()) {
            if (peekChar()) {
                *(buf++) = peekChar();
                while (!isBlank(nextChar())) *(buf++) = peekChar();
            } *(buf++) = 0; } return *this; }
    inline IO& operator >> (string & s) {
        if (skipBlanks()) { s.clear(); s += peekChar();
            while (!isBlank(nextChar())) s += peekChar(); }
        return *this; }
    inline IO& operator >> (double & d) { if ((*this) >> tmp) sscanf(tmp, "%lf", &d); return *this; }
 
#define defineInFor(intType) \
    inline IO& operator >>(intType & n) { \
        if (skipBlanks()) { \
            int sign = +1; \
            if (peekChar() == '-') { \
                sign = -1; \
                n = nextChar() - '0'; \
            } else \
                n = peekChar() - '0'; \
            while (!isBlank(nextChar())) { \
                n *= 10; \
                n += peekChar() - '0'; \
            } \
            n *= sign; \
        } \
        return *this; \
    }
 
defineInFor(int)
defineInFor(unsigned int)
defineInFor(long long)
defineInFor(unsigned long long)
defineInFor(short)
defineInFor(unsigned short)
 
    // fast output routines
    IO() { cur = 0; ptr = buf; }
    void flush() { fwrite(buf, 1, ptr - buf, stdout); ptr = buf; }
    ~IO() { flush(); }
    inline void putChar(char c) {
        if (ptr >= buf + sizeof(buf))
            flush();
        *ptr++ = c;
        #ifndef ONLINE_JUDGE
            flush(); // always flush when local
        #endif
    }
    inline IO& operator << (char c) { putChar(c); return *this; }
    inline IO& operator << (char * s) { while (*s) putChar(*s++); return *this; }
    inline IO& operator << (const char * s) { while (*s) putChar(*s++); return *this; }
    inline IO& operator << (string & s) { for (int i = 0; i < (int)s.size(); ++i) putChar(s[i]); return *this; }
    char * toString(double d) { sprintf(tmp, "%lf%c", d, '\0'); return tmp; }
    inline IO& operator << (double d) { return (*this) << toString(d); }
 
#define defineOutFor(intType) \
    inline char * toString(intType n) { \
        char * p = (tmp + 30); \
        *p-- = 0; \
        if (n == 0) *p-- = '0'; \
        else { \
            bool isNeg = 0; \
            if (n < 0) isNeg = 1, n = -n; \
            while (n > 0) *p-- = (n % 10) + '0', n /= 10; \
            if (isNeg) *p-- = '-'; \
        } \
            return p + 1; \
    } \
    inline IO& operator << (intType n) { return (*this) << toString(n); }
 
defineOutFor(int)
defineOutFor(unsigned int)
defineOutFor(long long)
defineOutFor(unsigned long long)
defineOutFor(short)
defineOutFor(unsigned short)
 
#define endl ('\n')
#define cout __io__
#define cin __io__
} __io__;
 
int getline(IO & io, string & s) {
    s.clear(); char c;
    while ((io >> c) && (c != '\n' && c != '\r')) s += c;
    if (c == '\r') io >> c; // CR LF found -> skip \n
    return (int)s.size();
}
 
/////////////////////////////////////////////////////////////////////////
 
struct road{
    int start;
    int end;
    int dest;
    bool taken;
    road(){}
    road(int s,int e,int d){
        start=s;
        end=e;
        dest=d;
    }
    road* operator=(road r2){
        start=r2.start;
        end=r2.end;
        dest=r2.dest;
        return this;
    }
    bool operator>(road r2)const{return start>r2.start;}
    bool operator<(road r2)const{return start<r2.start;}
    bool operator==(road r2)const{return start==r2.start;}
};
 
vector<road> *neigh;
int n,m,t;
 
bool dfs1(int v,int tm,int window){
    if(tm>t) return false;
    if(v==n-1 and tm<=t) return true;
 
    vector<road>::iterator start,end,i;
    // binary search for start and end of search
 
 
    start=lower_bound(neigh[v].begin(),neigh[v].end(),road(tm,0,0));
    end=upper_bound(neigh[v].begin(),neigh[v].end(),road(tm+window,0,0));
    for(i=start;i!=end;i++){
        if((*i).taken) continue;
        (*i).taken=true;
        if(dfs1((*i).dest,(*i).end,window)) return true;
    }
    return false;
}
 
bool dfs(int v,int tm,int window){
    for(int i=0;i<n;i++){
        for(int j=0;j<neigh[i].size();j++){
            neigh[i][j].taken=false;
        }
    }
    return dfs1(v,tm,window);
}
 
int main(){
    cin>>n>>t>>m;
    neigh=new vector<road>[n];
    int u,v,s,e;
    for(int i=0;i<m;i++){
        cin>>u>>v>>s>>e;
        u--;v--;
        neigh[u].push_back(road(s,e,v));
    }
    for(int i=0;i<n;i++){
        sort(neigh[i].begin(),neigh[i].end());
    }
 
    int l=0;
    int h=t;
    if(!dfs(0,0,t)){
        cout<<"-1\n";
    }
    else if(dfs(0,0,0)){
        cout<<"0\n";
    }
    else{
        while(1){
            if(h-l<=1){
                cout<<h<<endl;
                return 0;
            }
            int m=(h+l)/2;
            if(dfs(0,0,m)){
                h=m;
            }
            else{
                l=m;
            }
        }
    }
    return 0;
} 