#include <iostream>
#include<algorithm>
#include<vector>
using namespace std;
struct node
{
    long long int u,v,s,e;
    bool operator<(const node &b) const {
		return e < b.e;
	}
}b[100000];

int get(long long mid1,long long t,long long n,long long m)
{
    long long low2,high2,mid2;
    vector<vector<long long> >d(n+1);
        d[1].push_back(0);
        for(long long i=0;i<m;i++)
        {
            long long u=b[i].u,v=b[i].v,s=b[i].s,e=b[i].e;
            if(!d[u].size())continue;
            low2=0;high2=d[u].size()-1;
            while(low2<high2)
            {
                mid2=(low2+high2+1)/2;
                if(s-d[u][mid2]<0)high2=mid2-1;
                else
                    low2=mid2;
            }
            if(s-d[u][low2]>=0&&s-d[u][low2]<=mid1)
                d[v].push_back(e);
        }
        if(d[n].size()>0&&d[n][0]<=t)
            return 1;
        return 0;
}
int main()
{
    long long n,m,t,low1,high1,mid1;
    cin>>n>>t>>m;
    for(long long i=0;i<m;i++)
        cin>>b[i].u>>b[i].v>>b[i].s>>b[i].e;
    sort(b,b+m);
    low1=0;high1=t+1;
    while(low1<high1)
    {
        mid1=(low1+high1)/2;
        //cout<<"mid1="<<mid1<<endl;
        if(get(mid1,t,n,m))
            high1=mid1;
        else
            low1=mid1+1;
    }
    if(high1!=t+1)
    cout<<low1<<endl;
    else cout<<"-1"<<endl;
    return 0;
}
