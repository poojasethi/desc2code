
#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>
#include<cmath>


#define FO(i,s,e,p) for(int i=(s);i<int(e);i+=p)
#define FOD(i,s,e,p) for(int i=(s);i>int(e);i-=p)


#define FOR(i,s,e) FO(i,s,e,1)
#define FORE(i,s,e) FOR(i,s,e+1)
#define FORD(i,s,e) FOD(i,s,e,1)
#define FORDE(i,s,e) FORD(i,s,e-1)

#define ALL(i,s) for(__typeof((s).begin()) i=(s).begin();i!=(s).end();i++)

#define MEM(tab,fill) memset(tab,fill,sizeof(tab))

#include<iostream>
#include<set>
#include<vector>
#include<string>
#include<sstream>
#include<stack>
#include<queue>
#include<algorithm>
#include<utility>
#include<bitset>
#include<map>
#include<cassert>
#define pb push_back
#define ll long long
using namespace std;

#define EPS 0.0000001
#define MOD 1000000007
#define mp make_pair
#define fi first
#define se second
#define inf ((1<<29)-1)
#define deb(a) cout<<#a<<' '<<a<<endl;
#define PI pair<ll,ll>

int st[100010 ],et[100010];
int so[100010],de[100010];

struct cmp{
    bool operator()(int a,int b){
        if(st[a]==st[b]) return a<b;
        return st[a]<st[b];
    }
};
bool cm(int a,int b){
        if(st[a]==st[b]) return a<b;
        return st[a]<st[b];
};




int dest;
int dif;
vector<set<int> > g;
vector<int> in;


bool cheeck(){
    g[0].insert(0);
    FOR(i,0,in.size()){
        int oi=in[i];
        int a=so[oi];
        int b=de[oi];


        set<int>::iterator it=g[a].lower_bound(st[oi]-dif);
        if(it==g[a].end() || *it>st[oi]) continue;
        g[b].insert(et[oi]);
    }
    return g[dest].size()!=0;
}








int main()
{
    //freopen("C:\\a","r",stdin);
    int n,m,t;
    scanf("%d%d%d",&n,&t,&m);
    g.resize(n);
    FOR(i,0,m){
        scanf("%d%d%d%d",so+i,de+i,st+i,et+i);so[i]--;de[i]--;
        if(et[i]>t){i--;m--;}
    }
    FOR(i,0,m) in.pb(i);
    sort(in.begin(),in.end(),cm);



    ll s=0,e=t+5,mid;
    ll lst=-1;

    dest=n-1;
    while(s<=e){
        mid=(s+e)/2LL;

        dif=mid;
        g.clear();g.resize(n);
        if(cheeck()) lst=mid,e=mid-1;
        else s=mid+1;


    }

cout<<lst<<endl;



  return 0;
}
