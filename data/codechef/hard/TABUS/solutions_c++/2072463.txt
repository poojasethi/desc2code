#include <cstdio>
#include <vector>
#include <algorithm>

int bus[100005][4];
std::vector<int> busp;
std::vector<int> stations[50005];
std::vector<int>::iterator it;

int N, T, B;

bool comp(int l, int r)
{
  if (bus[l][3] != bus[r][3])
    return bus[l][3] < bus[r][3];
  return bus[l][2] < bus[r][2];
}

bool pos(int w)
{
  for(int i = 0; i<=N; i++) stations[i].clear();

  stations[1].push_back(0);

  for (int i =0; i < B; ++i)
    {
      int b = busp[i];
      int ss = bus[b][0];
      int es = bus[b][1];
      int st = bus[b][2];
      int et = bus[b][3];
      it = std::lower_bound(stations[ss].begin(), 
			    stations[ss].end(),
			    st - w);
      if (it != stations[ss].end() && *it<= st)
	{
	  stations[es].push_back(et);
	  if( es == N) return true;
	}
    }

  return false;
}

int main()
{

  //std::cin >> N >> T >> B;
  scanf("%d%d%d",&N,&T,&B);
  while(B--)
    {
      // std::cin >> bus[B][0] >> bus[B][1] >> bus[B][2] >> bus[B][3];
      scanf("%d%d%d%d",&bus[B][0],&bus[B][1],&bus[B][2], &bus[B][3]);
      if(bus[B][3] > T) continue;
      busp.push_back(B);

    }
  B = busp.size();
  std::sort(busp.begin(), busp.end(), comp);
  int l = 0; int r = T;
  int m,ans=-1;
  while(l<=r)
    {
      m = (l+r)/2;
      if(pos(m))
	{
	  ans = m ;
	  r = m - 1;
	}
      else
	l = m + 1;

    }
  printf("%d\n", ans);
  return 0;
}
