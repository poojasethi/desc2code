#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

#define X first
#define Y second

#define MP make_pair

#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


typedef pair<int,int> pint;
typedef map<int,int> mint;

#define SIZE 101000

struct tt{
    int u,v,s,t;
}edge[SIZE];

int n,des,m;

vector<int> vis[50100];

bool check( int lim ){

    for (int i=1;i<=n;++i){
        vis[i].clear();
    }

    vis[1].PB( 0 );
    for (int i=0;i<m;++i){
        int u= edge[i].u;
        int v= edge[i].v;
        int s= edge[i].s;
        int t= edge[i].t;

        if ( vis[u].empty() )continue;
        else if ( vis[u][0] > s )continue;

        int ind = lower_bound( vis[u].begin(),vis[u].end() , s )-vis[u].begin();

        if ( ind>= vis[u].size() )
            ind--;
        if ( vis[u][ind] > s ){
            ind--;
        }

        if ( s-vis[u][ind] <= lim ){
            vis[v].PB( t );
        }
    }
    return vis[n].size()>0 && vis[n][0]<=des;
}

bool cmp( const tt&a,const tt&b ){
    return a.t<b.t;
}
int main(){


    scanf("%d %d %d",&n,&des,&m);
    for (int i=0;i<m;++i){
        scanf("%d %d %d %d",&edge[i].u,&edge[i].v,&edge[i].s,&edge[i].t);
    }
    sort( edge,edge+m ,cmp );

    int ans = -1;
    int low = 0,high=des;
    while ( low<=high ){
        int mid = (low+high)/2;
        if ( check( mid ) ){
            ans = mid;
            high= mid-1;
        }else{
            low = mid+1;
        }
    }

    printf("%d\n",ans);

    return 0;
}
