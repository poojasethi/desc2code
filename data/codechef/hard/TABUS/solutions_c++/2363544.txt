#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <string>
#include <map>
#include <set>
#include <stack>
#include <list>
#include <vector>
#include <queue>
#include <deque>
#include <ctype.h>

using namespace std;

#define PI acos(-1)
#define MP make_pair
#define PB push_back
#define VI vector <int>
#define PII pair <int, int>
#define LL long long
#define SET(v,i) memset(v, i, sizeof(v))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORD(i,a,b) for (int i = (a); i >= (b); i--)
#define FORN(i,a,b) for (int i = (a); i < (b); i++)
#define DOWN(i,b) for (int i = 0; i > (b); i--)
#define FIT(it,v) for (typeof(v.begin()) it = v.begin(); it != v.end(); it++)
#define FITD(it,v) for (typeof(v.rbegin()) it = v.rbegin(); it != v.rend(); it++)
#define FREOPEN freopen("a.in", "r", stdin); freopen("a.out", "w", stdout)

int const maxn = 300111;

struct tbus{
	int u, v, s, t;
};

tbus bus[maxn];
vector <int> event[maxn];
int n, m, T;

bool cmp(tbus a, tbus b) {
	return a.t < b.t;
}

bool check (int time) {
	FOR (i, 1, n) event[i].clear();

	event[1].push_back(0);
	//event[i] stores the posible time that the Chef can be at the bus station i 
	//right after his alight some bus.
	
	FOR (i, 1, m) {
		//with the bus i, we look at the event[u] to see wether we can take this bus
		//with out waiting for it more than 'time' time units.
		int u = bus[i].u;
		int v = bus[i].v;
		int s = bus[i].s;
		int t = bus[i].t;

		if (event[u].empty()) continue;
		if (event[u][0] > s) continue;

		int z = event[u].size();
		z--;
		if (event[u][z] > s) {
			z = (lower_bound(event[u].begin(), event[u].end(), s) - event[u].begin());
			if (event[u][z] >= s) z--;
		}

		if (s - event[u][z] <= time) event[v].push_back(t);
	}
	
	//finally, use the vector <int> event[n] to find the answer
	return (!event[n].empty() && event[n][0] <= T);
}

int main() {
	scanf("%d%d%d", &n, &T, &m);
	FOR (i, 1, m)
		scanf("%d%d%d%d", &bus[i].u, &bus[i].v, &bus[i].s, &bus[i].t);

	sort(bus + 1, bus + m + 1, cmp);

	//binary search the result
	int l, r;
	l = 0; r = 1000000000;
	int res = -1;
	while (l <= r) {
		int mid = (l + r) / 2;
		if (check(mid)) {
			res = mid;
			r = mid - 1;
		}
		else l = mid + 1;
	}

	printf("%d\n", res);
	return 0;
}