import numpy as np
import math
def inv_2(A):
    M=A.size
    N=int(math.sqrt(M))
    bakra=np.copy(A)
    inv=np.identity(N,int)
    for i in xrange(0,N):
        if bakra[i,i] == 0:
            loc=np.where(bakra[i:N,i]==1)
            p=len(loc[0])
            if p >= 1:
                loc = loc[0][0]
                loc=loc + i
                bakra[i,:]= (bakra[i,:] + bakra[loc,:])%2
                inv[i,:]= (inv[i,:] + inv[loc,:])%2
            else:
                continue
        if bakra[i,i] == 1:
            for j in xrange(i + 1,N):
                if bakra[j,i] == 1:
                    bakra[j,:]=(bakra[i,:] + bakra[j,:])%2
                    inv[j,:]=(inv[i,:] + inv[j,:])%2
    for i in xrange(N-1,-1,- 1):
        for j in xrange(i - 1,-1,- 1):
            if bakra[j,i] == 1:
                bakra[j,:]=(bakra[i,:] + bakra[j,:])%2
                inv[j,:]=(inv[i,:] + inv[j,:])%2
    return inv
  
def playMatrix(siz):
    v=None
    I=np.identity(siz,int)
    Z=I * 0
    C=np.identity(siz,int)
    for pp in range(siz):
        for qq in range(siz):
            diff = abs(pp-qq)
            if diff <=1:
                C[pp,qq]=1

			
    for pp in range(siz):
        c = None
        for qq in range(siz):
            diff = abs(pp-qq)
            if diff == 0:
                TMP = C
            elif diff ==1:
                TMP = I
            else:
                TMP = Z
            if qq ==0 :
                c = TMP
            else:
                c = np.hstack((c,TMP))
        if pp ==0 :
            v=c
        else:
            v = np.vstack((v,c))
    return v
for gg in range(0,int((raw_input()))):
    siz = int(raw_input())
    A = playMatrix(siz)
    iA= inv_2(A)
    B=[]
    for xx in range(siz):
        B = B+ map(int,(list(raw_input().strip())))
    B = np.array(B,int)
    ans = np.dot(B,iA)%2
    i=0  
    print int(sum(ans))

    for k in ans:
        if int(k)==1:
            print str(i/siz+1) +' '+str(i%siz + 1)
        i+=1