#include <bits/stdc++.h>

using namespace std;

int A[100005];

//Code for FAST INPUT :)
template <typename T>
inline void fi(T *a)
{
    register char c=0;
    while (c<33) c=getchar_unlocked();
    *a=0;
    int tmp = 0;
    while (c>33)
    {
        if ( c == 45 ) tmp = 1;
        else *a=*a*10+c-'0';
        c=getchar_unlocked();
    }
    if ( tmp == 1 ) *a = 0-(*a);
}

int main()
{
	int n,m,type,x,y,z;
	set <int> two,three,five;
	set <int> :: iterator it;
	vector < set <int> :: iterator > v;
	fi(&n);
	for ( int i = 0; i < n; i++ ) {
		fi(&A[i]);
		if ( A[i]%2 == 0 ) two.insert(i);
		if ( A[i]%3 == 0 ) three.insert(i);
		if ( A[i]%5 == 0 ) five.insert(i);
	}
	fi(&m);
	while ( m-- ) {
		fi(&type);
		if ( type == 2 ) {
			fi(&x), fi(&y);
			x--;
			if ( A[x]%2 == 0 ) two.erase(x);
			if ( A[x]%3 == 0 ) three.erase(x);
			if ( A[x]%5 == 0 ) five.erase(x);
			A[x] = y;
			if ( A[x]%2 == 0 ) two.insert(x);
			if ( A[x]%3 == 0 ) three.insert(x);
			if ( A[x]%5 == 0 ) five.insert(x);
		}
		else {
			fi(&x), fi(&y), fi(&z);
			x--, y--;
			
			if ( z == 2 ) {
				it = two.lower_bound(x);
				while ( it != two.end() && (*it) <= y ) {
					A[*it] /= 2;
					v.push_back(it);
					it++;
				}
				while ( !v.empty() ) {
					if ( A[*(v.back())]%2 != 0 ) two.erase(v.back());
					v.pop_back();
				}
			}
			
			else if ( z == 3 ) {
				it = three.lower_bound(x);
				while ( it != three.end() && (*it) <= y ) {
					A[*it] /= 3;
					v.push_back(it);
					it++;
				}
				while ( !v.empty() ) {
					if ( A[*(v.back())]%3 != 0 ) three.erase(v.back());
					v.pop_back();
				}
			}
			else {
				it = five.lower_bound(x);
				while ( it != five.end() && (*it) <= y ) {
					A[*it] /= 5;
					v.push_back(it);
					it++;
				}
				while ( !v.empty() ) {
					if ( A[*(v.back())]%5 != 0 ) five.erase(v.back());
					v.pop_back();
				}
			}
		}
	}
	for ( int i = 0; i < n; i++ ) printf("%d ", A[i]);
	return 0;
}
