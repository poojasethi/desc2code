#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n+1];
    set<int> myset[6];

    for(int i=1;i<=n;i++)
    {
        cin>>arr[i];
        if(arr[i]%2 == 0 ) myset[ 2 ].insert(i);
        if( arr[i]%3 == 0 ) myset[ 3 ].insert(i);
        if(arr[i]%5  == 0 ) myset[ 5 ].insert(i);
    }
    int m;
    cin>>m;
    while(m--)
    {
    int ch;
    cin>>ch;
    if(ch==1)
    {
    int l, r, p;
    scanf("%d%d%d",&l,&r,&p);
    set<int>::iterator a = lower_bound(myset[p].begin(),myset[p].end(),l);//finding the first index
    vector<int> del;    //to store the index which are needed to be deleted
    for(set<int>::iterator it = a;it!=myset[p].end();it++)
    {//iterating the set from the found index
        if(*it>r)
        break;
        int index = *it;//breaking the loop when you encounter index greater than r
        arr[index]/=p;            //dividing the number by p
        if (arr[index]%p)
            del.push_back(*it);
            }//if number is no more divisible by p, then we need to remove this from the set
    for(vector<int>::iterator it = del.begin();it!=del.end();it++)
        myset[p].erase(*it);        //deleting the numbers
    }

    else{
            int l ,d;
    //Update Query
    scanf("%d%d",&l,&d);
    //Delete them if already in set.
    if( arr[l] %2 == 0 )    myset[ 2 ].erase(l);
    if( arr[l] %3 == 0 )    myset[ 3 ].erase(l);
    if( arr[l] %5 == 0 )    myset[ 5 ].erase(l);
    //Add them
    if ( d%2 == 0 ) myset[ 2 ].insert(l);
    if ( d%3 == 0 ) myset[ 3 ].insert(l);
    if ( d%5 == 0 ) myset[ 5 ].insert(l);
    arr[l] = d;
    }

}
 for(int i=1;i<=n;i++)
        cout<<arr[i]<<" ";
}
