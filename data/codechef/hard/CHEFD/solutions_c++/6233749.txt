#include<bits/stdc++.h>
using namespace std;
typedef struct 
{
	vector<long long> tree;
	vector<long long> cumFre;
	int n;
	void create(int x)
	{
		n=x;
		cumFre.resize(n+1);
		tree.resize(n+1);
	}
	long long  query(int idx)
	{
		long long  sum=0;
		while(idx>0)
		{
			sum+=tree[idx];
			idx-=(idx&(-idx));
		}
		return sum;
	}
	void increase(long long idx,long long  val)
	{
		while(idx<=n)
		{
			tree[idx]+=val;
			idx+=(idx&(-idx));
		}
	}
	void calcCumFree()
	{
		
		for(int i=1;i<=n;++i)
		{
			cumFre[i]=tree[i]+cumFre[i-(i&(-i))];
		}
	}

}BIT;
BIT bit2;
BIT bit3;
BIT bit5;
int main()
{
	int n;
	scanf("%d",&n);
	int arr[n+5];
	for(int i=1;i<=n;++i)
		scanf("%d",&arr[i]);
	int l,r,d,x,p,t;
	scanf("%d",&t);
	bit2.create(n);
	bit3.create(n);
	bit5.create(n);
	while(t--)
	{
		scanf("%d",&x);
		if(x==1)
		{
			scanf("%d%d%d",&l,&r,&p);
			if(p==2)
			{
				bit2.increase(l,1);
				bit2.increase(r+1,-1);
			}
			else if(p==3)
			{
				bit3.increase(l,1);
				bit3.increase(r+1,-1);
			}
			else
			{
				bit5.increase(l,1);
				bit5.increase(r+1,-1);
			}
		}
		else 
		{
			scanf("%d%d",&l,&d);
			long long x=bit2.query(l);
			bit2.increase(l,-x);
			bit2.increase(l+1,x);
			x=bit3.query(l);
			bit3.increase(l,-x);
			bit3.increase(l+1,x);
			x=bit5.query(l);
			bit5.increase(l,-x);
			bit5.increase(l+1,x);
			arr[l]=d;
		}
	}
	bit2.calcCumFree();
	bit3.calcCumFree();
	bit5.calcCumFree();
	for(int i=1;i<=n;++i)
	{
		long long x=bit2.cumFre[i];
		while(x>0&&arr[i]%2==0)
		{
			arr[i]/=2;
			x--;
		}
		x=bit3.cumFre[i];
		while(x>0&&arr[i]%3==0)
		{
			arr[i]/=3;
			x--;
		}
		x=bit5.cumFre[i];
		while(x>0&&arr[i]%5==0)
		{
			arr[i]/=5;
			x--;
		}
		printf("%d ",arr[i] );
	}
	
	return 0;
}
