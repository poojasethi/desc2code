#include<bits/stdc++.h>
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c<'0'||c>'9'){
        c=getchar_unlocked();
    }
    while(c>='0'&&c<='9'){
        x=(x<<1)+(x<<3)+c-'0';
        c=getchar_unlocked();
    }
    return x;
}
int **bit1;
int n,m;
int *arr;
void update(int *bit,int idx,int val){
    while(idx<=n){
        bit[idx]+=val;
        idx+=idx&-idx;
    }
}
int query(int *bit,int idx){
    int res=0;
    while(idx){
        res+=bit[idx];
        idx&=idx-1;
    }
    return res;
}
int mapping[6];
int main(){
    n=scan();
    arr = new int [n+1];
    bit1 = new int*[3];
    bit1[0] = new int[n+1];
    bit1[1] = new int[n+1];
    bit1[2] = new int[n+1];
    mapping[5]=2;
    mapping[3]=1;
    mapping[2]=0;
    for(int i=1;i<=n;++i){
        arr[i]=scan();
    }
    m=scan();
    while(m--){
        int type=scan();
        if(type&1){
            int l=scan(),r=scan(),p=scan();
            update(bit1[mapping[p]],l,1);
            update(bit1[mapping[p]],r+1,-1);
        }
        else{
            int pos=scan(),val=scan();
            arr[pos]=val;
            int temp[3];
            for(int i=0;i<3;++i){
                temp[i]=query(bit1[i],pos);
            }
            for(int i=0;i<3;++i){
                update(bit1[i],pos,-temp[i]);
                update(bit1[i],pos+1,temp[i]);
            }
        }
    }
    for(int i=1;i<=n;++i){
        int temp[3];
        for(int j=0;j<3;++j){
            temp[j]=query(bit1[j],i);
        }
        while(!(arr[i]&1)&&temp[0]){
            arr[i]>>=1;
            temp[0]--;
        }
        while((arr[i]%3)==0&&temp[1]){
            arr[i]/=3;
            temp[1]--;
        }
        while((arr[i]%5)==0&&temp[2]){
            arr[i]/=5;
            temp[2]--;
        }
        printf("%d ",arr[i]);
    }
}