#include <cstdio>
#include <iostream>

using namespace std;
typedef long long LL;
LL tree[400001][3];
LL lazy[400001][3];
LL mp[6];
void setm()
{
    mp[2]=0;
    mp[3]=1;
    mp[5]=2;

}
void updater(LL node,LL s,LL e,LL l,LL r,LL p)
{
    LL lc = 2*node+1;
    LL rc = 2*node+2;
    LL mid = s+(e-s)/2;
    if(lazy[node][p]!=0)
    {
        tree[node][p]+=(e-s+1)*lazy[node][p];
        if(s!=e)
        {
            lazy[lc][p]+=lazy[node][p];
            lazy[rc][p]+=lazy[node][p];
        }
        lazy[node][p]=0;
    }
    if(s>e||l>e||r<s)
        return;
    if(l<=s&&r>=e)
    {
        tree[node][p]+=(e-s+1);
        if(s!=e)
        {
            lazy[lc][p]++;
            lazy[rc][p]++;
        }
        return;
    }
    updater(lc,s,mid,l,r,p);
    updater(rc,mid+1,e,l,r,p);
    tree[node][p]=tree[lc][p]+tree[rc][p];
}
void update(LL node,LL s,LL e,LL idx,LL val,LL p)
{
    if(s>e)
        return;
    LL lc = 2*node+1;
    LL rc = 2*node+2;
    if(lazy[node][p]!=0)
    {
        tree[node][p]+=(e-s+1)*lazy[node][p];
        if(s!=e)
        {
            lazy[lc][p]+=lazy[node][p];
            lazy[rc][p]+=lazy[node][p];
        }
        lazy[node][p]=0;
    }
    if(s==e)
    {
        tree[node][p]=0;
        return;
    }
    LL mid = s+(e-s)/2;
    if(s<=idx&&mid>=idx)
    {
        update(lc,s,mid,idx,val,p);
    }
    else
    {
        update(rc,mid+1,e,idx,val,p);
    }
    tree[node][p]=tree[lc][p]+tree[rc][p];

}
LL query(LL node,LL s,LL e,LL idx,LL p)
{
    LL lc = 2*node+1;
    LL rc = 2*node+2;
    LL mid = s+(e-s)/2;
    if(lazy[node][p]!=0)
    {
        tree[node][p]+=(e-s+1)*lazy[node][p];
        if(s!=e)
        {
            lazy[lc][p]+=lazy[node][p];
            lazy[rc][p]+=lazy[node][p];
        }
        lazy[node][p]=0;
    }
    if(s>e)
        return 0;
    if(s==e)
    {
        return tree[node][p];
    }
    if(s<=idx&&mid>=idx)
    {
      return  query(lc,s,mid,idx,p);
    }
    else
    {
        return query(rc,mid+1,e,idx,p);
    }
}
LL A[100001];
int main()
{
    LL n,i,x,a,b,c,d;
    scanf("%lld",&n);
    setm();
    for(i=0;i<n;i++)
    {
        scanf("%lld",&A[i]);
    }
    LL m;
    scanf("%lld",&m);
    while(m--)
    {
        scanf("%lld",&a);
        if(a==1)
        {
            scanf("%lld%lld%lld",&b,&c,&d);
            b--;
            c--;
            updater(0,0,n-1,b,c,mp[d]);

        }
        if(a==2)
        {
            scanf("%lld%lld",&b,&c);
            b--;
            A[b]=c;
            update(0,0,n-1,b,c,0);
            update(0,0,n-1,b,c,1);
            update(0,0,n-1,b,c,2);

        }
    }
    for(i=0;i<n;i++)
    {
        a=query(0,0,n-1,i,0);
        b=query(0,0,n-1,i,1);
        c=query(0,0,n-1,i,2);
        while(a--)
        {
            if(A[i]%2)
            {
                break;
            }
            else
            {
                A[i]=A[i]/2;
            }
        }
        while(b--)
        {
            if(A[i]%3)
                break;
            else
            {
                A[i]=A[i]/3;
            }

        }
        while(c--)
        {
            if(A[i]%5)
                break;
            else
            {
                A[i]=A[i]/5;
            }
        }
    }
    for(i=0;i<n;i++)
    {
        printf("%d ",A[i]);
    }
    return 0;

}
