#include<bits/stdc++.h>
using namespace std;

#define mx 100005

int inp[mx];

struct Info{
    int two,three,five;
}seg[4*mx];

void Init(int at,int st,int ed){
    if(st == ed){
        seg[at].two = seg[at].three = seg[at].five = 0;
        return ;
    }
    Init(at*2,st,(st+ed)/2);
    Init(at*2+1,(st+ed)/2+1,ed);
    seg[at].three = seg[at].two = seg[at].five = 0;
}

void Update_1(int at,int st,int ed,int i,int j,int div){
    if(st > j || ed < i) return ;
    if(st >= i && ed <= j){
        if(div == 2) seg[at].two++;
        else if(div == 3) seg[at].three++;
        else if(div == 5) seg[at].five++;
        return ;
    }
    Update_1(at*2,st,(st+ed)/2,i,j,div);
    Update_1(at*2+1,(st+ed)/2+1,ed,i,j,div);
}

void lazy(int at,int x,int y){
    seg[x].two += seg[at].two;
    seg[x].three += seg[at].three;
    seg[x].five += seg[at].five;

    seg[y].two += seg[at].two;
    seg[y].three += seg[at].three;
    seg[y].five += seg[at].five;

    seg[at].two = 0;
    seg[at].three = 0;
    seg[at].five = 0;
}

void Update_2(int at,int st,int ed,int i,int j){
    if(st > j || ed < i) return ;
    if(st >= i && ed <= j){
        seg[at].two = 0;
        seg[at].three = 0;
        seg[at].five = 0;
        return ;
    }
    lazy(at,at*2,at*2+1);
    Update_2(at*2,st,(st+ed)/2,i,j);
    Update_2(at*2+1,(st+ed)/2+1,ed,i,j);
}

void Query(int at,int st,int ed){
    if(st == ed){
        int a = inp[st];
        int b = seg[at].two;
        while(a%2 == 0 && b > 0){
            a /= 2; b--;
        }
        b = seg[at].three;
        while(a%3 == 0 && b > 0){
            a /= 3; b--;
        }
        b = seg[at].five;
        while(a%5 == 0 && b > 0){
            a /= 5; b--;
        }
        inp[st] = a;
        return ;
    }
    lazy(at,at*2,at*2+1);
    Query(at*2,st,(st+ed)/2);
    Query(at*2+1,(st+ed)/2+1,ed);
}

int main(){
    int n;
    while(scanf("%d",&n) == 1){
        for(int i=1;i<=n;i++) scanf("%d",&inp[i]);
        Init(1,1,n);
        int k; scanf("%d",&k);
        while(k--){
            int op; scanf("%d",&op);
            if(op == 1){
                int l,r,div; scanf("%d %d %d",&l,&r,&div);
                Update_1(1,1,n,l,r,div);
            }else if(op == 2){
                int id,d; scanf("%d %d",&id,&d);
                inp[id] = d;
                Update_2(1,1,n,id,id);
            }
        }
        Query(1,1,n);
        for(int i=1;i<=n;i++){
            if(i == n) printf("%d\n",inp[i]);
            else if(i < n) printf("%d ",inp[i]);
        }
    }
    return 0;
}
