#include<bits/stdc++.h>

using namespace std;

#define ll long long int
#define ull unsigned long long int
#define maxN 100005
#define maxK 500
#define maxW 1005
#define pb push_back
#define mp make_pair
#define INF (((ll)1000000000) * ((ll)1000000000))
#define e 2.7182818284590452353602874
#define maxT 1000000
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define MOD 1000000007
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i=0;i<N;i++)
#define pii pair<int,int>
#define fill(A,v) memset(A,v,sizeof A)
#define setbits(x) __builtin_popcount(x)
#define SQRT 350

int two[SQRT],five[SQRT],three[SQRT];
int start[SQRT],end[SQRT];
int block[maxN],A[maxN];
int current;

void decompose(int n) {
	int sz=sqrt(n),j;
	//cout<<sz<<"\n";
	current=-1;
	for(int i=0;i<n;) {
		start[++current]=i;
		for(j=i;j<min(i+sz,n);j++) {
			block[j]=current;
		}
		end[current]=j-1;
		i=j;
	}
}

int divide(int val,int two,int three,int five) {
	//cout<<"initial "<<val<<" "<<two<<" "<<three<<" "<<five<<"\n";
	while(val>1 && two>0 && val%2==0) {
		val/=2;
		two--;
	}
	while(val>1 && three>0 && val%3==0) {
		val/=3;
		three--;
	}
	while(val>1 && five>0 && val%5==0) {
		val/=5;
		five--;
	}
	//cout<<"final "<<val<<"\n";
	return val;
}

void query(int l,int r,int value) {
	for(int i=block[l];i<=block[r];i++) {
		if(start[i]>=l && end[i]<=r) {
			if(value==2)
				two[i]++;
			if(value==3)
				three[i]++;
			if(value==5)
				five[i]++;
			//cout<<"updating block "<<i<<"\n";
		}
		else {
			int a=0,b=0,c=0;
			if(value==2)
				a=1;
			else if(value==3)
				b=1;
			else if(value==5)
				c=1;
			for(int j=start[i];j<=end[i];j++)  {
				if(j>=l && j<=r)
					A[j]=divide(A[j],two[i]+a,three[i]+b,five[i]+c);
				else
					A[j]=divide(A[j],two[i],three[i],five[i]);
			}
			two[i]=three[i]=five[i]=0;		//reset entire block
		}
	}
}

void update(int l,int val) {
	int i=block[l];
	//cout<<"blcok of l is "<<i<<"\n";
	//cout<<"begin "<<start[i]<<" end "<<end[i]<<"\n";

	for(int j=start[i];j<=end[i];j++) {
		//cout<<"updating element "<<j<<"\n";
		//cout<<two[i]<<" "<<three[i]<<" "<<five[i]<<"\n";
		A[j]=divide(A[j],two[i],three[i],five[i]);
	}
	two[i]=three[i]=five[i]=0;		//reset entire block

	//for(int j=start[i];j<=end[i];j++)
	//	cout<<A[j]<<" ";
	//cout<<"\n";
	A[l]=val;
}

int main(int argc, char const *argv[])
{
	fast;

	int n;
	cin>>n;

	rep(i,n)
		cin>>A[i];

	decompose(n);

	int q;
	cin>>q;

	int l,r,type,d,p;
	while(q--) {
		cin>>type;
		if(type==1) {
			cin>>l>>r>>p;
			query(l-1,r-1,p);
		}
		else {
			cin>>l>>d;
			update(l-1,d);
		}
	}

	for(int j=0;j<n;j++) {
		int i=block[j];
		A[j]=divide(A[j],two[i],three[i],five[i]);
	}

	rep(i,n)
		cout<<A[i]<<" ";
	cout<<"\n";

	return 0;
}