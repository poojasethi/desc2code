#include <functional>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <sstream>
#include <fstream>
#include <numeric>
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cctype>
#include <vector>
#include <string>
#include <bitset>
#include <cmath>
#include <queue>
#include <stdio.h>
#include <stack>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <assert.h>
#define REP(i,n) for(int i=0;i<n;i++)
#define TR(i,x) for(typeof(x.begin()) i=x.begin();i!=x.end();i++)
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define CLEAR(x) memset(x,0,sizeof(x))
#define FILL(x,c) memset(x,c,sizeof(x))
 
using namespace std;
 
const double eps = 1e-8;
const double pi = acos(-1.0);
 
#define PB push_back
#define MP make_pair
 
typedef map<int,int> MII;
typedef map<string,int> MSI;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<long double> VD;
typedef pair<int,int> PII;
typedef long long int64;
typedef long long ll;
typedef unsigned int UI;
typedef long double LD;
typedef unsigned long long ULL;
 
int main() {
	int T;
	cin >> T;
	while (T--) {
		double w, h;
		scanf("%lf%lf", &w, &h);
		double ans = 0;
		{
			double low;
			double d = w / (1 + pi);
			if (2 * d <= h) {
				low = d;
			} else if (2 * h + pi * h <= w) {
				low = h;
			} else {
				double k = 0.5 / h;
				double a = k + k * pi;
				double c = k * pi * h * h + k * h * h - w;
				double root = (-1.0 + sqrt(1.0 - 4 * a * c)) / (2 * a);
				root *= root;
				low = (root + h * h) / (2.0 * h);
			}
 
			double volume = pi * low * low * 0.25 * h;
			ans = max(ans, volume);
 
			low = h / pi;
			volume = pi * low * low * 0.25 * (w - low);
			ans = max(ans, volume);
		}
 
		swap(w, h);
		{
			double low;
			double d = w / (1 + pi);
			if (2 * d <= h) {
				low = d;
			} else if (2 * h + pi * h <= w) {
				low = h;
			} else {
				double k = 0.5 / h;
				double a = k + k * pi;
				double c = k * pi * h * h + k * h * h - w;
				double root = (-1.0 + sqrt(1.0 - 4 * a * c)) / (2 * a);
				root *= root;
				low = (root + h * h) / (2.0 * h);
			}
 			// printf("low = %.10f\n", low);
 
			double volume = pi * low * low * 0.25 * h;
			ans = max(ans, volume);
 
			low = h / pi;
			volume = pi * low * low * 0.25 * (w - low);
			ans = max(ans, volume);
		}
 
		printf("%.12f\n", ans);
	}
	return 0;
} 