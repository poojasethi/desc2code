// Author: Nishant R. Krishan
#include <iostream>
#include <sstream>
#include <cstdio>
#include <climits>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <string>
#include <map>
#include <vector>

using namespace std;

#define LL long long
#define LD double
#define SI ({int x;scanf("%d",&x);x;})
#define SLL ({LL x;scanf("%lld",&x);x;})
#define PI 3.14159265358979323846
#define EPS (1e-15)
#define EPS2 (1e-5)
#define getVal(X) ((1+sin(X))/(1+cos(X)))
#define getVal2(X) ((PI+1+cos(X))/(1+sin(X))) 
#define GETCHAR getchar_unlocked
/*****************************************/

int N;
char ch;
int InReader() 
{
	N = 0;
	ch = GETCHAR();
	while ((ch != '\n') && (ch != ' ')) 
	{
		N = N * 10 + ch - '0';
		ch = GETCHAR();
	}
	return N;
}

int main(int argc, char** argv)
{
	int T=SI;
	int A, B;
	LD W, H, X, Wp, Hp, D1;
	LD finalAns, angle;
	ch = GETCHAR();
	while( T-- )
	{
		A = InReader();
		B = InReader();
		W = A;
		H = B;
		finalAns = 0.0;

		X = min( H/PI, (2*W)/3 );
		finalAns = max( finalAns, (W-X)*(X/2)*(X/2)*PI );
		if( H>=(2*W)/(PI+1) )
			finalAns = max( finalAns, H*((W/(PI+1))/2)*((W/(PI+1))/2)*PI );
		if( (W-2*H)>=(PI*H) )
			finalAns = max( finalAns, H*((H*H)/4)*PI );
		if( W>(H*((PI+1)/2)) && W<(H*(2+PI)))
		{
			Wp = W/(PI+1);
			Hp = H/((PI+1)*(PI+1));
			D1 = min(H, Wp + Hp - sqrt(Hp * (Hp + 2 * Wp - H)));
			finalAns = max(finalAns, PI/4*D1*D1*H);
	 	}
		
		W = B;
		H = A;
		X = min( H/PI, (2*W)/3 );
		finalAns = max( finalAns, (W-X)*(X/2)*(X/2)*PI );
		if( H>=(2*W)/(PI+1) )
			finalAns = max( finalAns, H*((W/(PI+1))/2)*((W/(PI+1))/2)*PI );
		if( (W-2*H)>=(PI*H) )
			finalAns = max( finalAns, H*((H*H)/4)*PI );
		if( W>(H*((PI+1)/2)) && W<(H*(2+PI)))
		{
			Wp = W/(PI+1);
			Hp = H/((PI+1)*(PI+1));
			D1 = min(H, Wp + Hp - sqrt(Hp * (Hp + 2 * Wp - H)));
			finalAns = max(finalAns, PI/4*D1*D1*H);
	 	}
		printf("%.15lf\n", finalAns);
	}
	return 0;
}
