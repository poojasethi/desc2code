#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>
#include <map>

inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }

  return false;
}

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadll(long long* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }

  if(neg)
	  *a = -*a;
}

inline void readString(char *s)
{
  *s = getchar();
  while(*s == '\r' || *s == '\n' || *s == -1)
    *s = getchar();

  while(*s != '\r' && *s != '\n' && *s != -1)
  {
    ++s;
    *s = getchar();
  }
  *s = '\0';
}

int N, K, M, Q;
int T = 1;
int A[1000000 + 1];
long long X;
int F, S;

int main()
{

#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif


  //fastread(&T);

  while(T--)
  {
    fastread(&N);
    fastreadll(&X);

    for(int i = 0; i < N; ++i)
    {
      fastread(A + i);
    }

    F = N;

    // Start from the smallest bundles
    std::sort(A, A + N);

    // Do halves first
    for(F = 0; F < N; ++F)
    {
      const int half = (A[F] >> 1) + ((A[F] & 1) ? 1 : 0);
      X -= half;
      if(X < 0)
      {
        X += half;
        break;
      }
    }
    F = N - F;

    for(S = 0; S < N; ++S)
    {
      const int half = (A[S] >> 1);
      X -= half;
      if(X < 0)
        break;
    }

		printf("%d %d\n", F, S);
  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
