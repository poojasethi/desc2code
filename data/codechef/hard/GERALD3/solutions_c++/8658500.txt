#include <bits/stdc++.h>
using namespace std;
#define md int(1e5+100)
#define modul int(1e9+7)
#define FOR(i,a,b) for( int i=(a),_b=(b);i<=_b;i++)
#define DOW(i,b,a) for( int i=(b),_a=(a);i>=_a;i--)
int xx[4]={0,0,1,-1};
int yy[4]={1,-1,0,0};
typedef long long ll;
int n;
set<int> myset;

struct suffix{
    pair<int,int> p;
    int i;
};

struct que{
    int l,r,i;
};
int len;

bool cmp2(que a, que b)
{
    if (a.l/len<b.l/len || (a.l/len==b.l/len && a.r<b.r)) return true;
    return false;
}

que c[md];
suffix a[md];

int r[md][17],p[md],q[md];
int ans[md];

int get(int x, int y)
{
    int res=0;
    DOW(i,16,0)
    if (x+(1<<i)-1<=n && y+(1<<i)-1<=n && r[x][i]==r[y][i])
    {
        x+=(1<<i);
        y+=(1<<i);
        res+=(1<<i);
    }
    return res;
}

int add(int x)
{
    int lcp=0;
    pair< set<int>::iterator,bool > ret;
    ret= myset.insert(p[x]);
    set<int>::iterator it=ret.first;
    if (it!=myset.begin())
    {
        it--;
        lcp=max(lcp,get(x,q[*it]));
        it++;
    }
    it++;
    if (it!=myset.end())
    {
        lcp=max(lcp,get(x,q[*it]));
    }
    return n-x+1-lcp;
}

int sub(int x)
{
    int lcp=0;
    set<int>::iterator it=myset.find(p[x]);
    if (it!=myset.begin())
    {
        it--;
        lcp=max(lcp,get(x,q[*it]));
        it++;
    }
    it++;
    if (it!=myset.end())
    {
        lcp=max(lcp,get(x,q[*it]));
    }
    it--;
    myset.erase(it);
    return n-x+1-lcp;
}
char s[md];
bool cmp(suffix a, suffix b)
{
    return a.p<b.p;
}
int main()
{
    //freopen("inp.txt","r",stdin);
    int tcase;
    scanf("%d",&tcase);
    FOR(o,1,tcase)
    {
        scanf("%s",s+1);
        n=strlen(s+1);
        FOR(i,1,n)
        {
            r[i][0]=s[i];
        }
        FOR(j,1,16)
        {
            FOR(i,1,n)
            {
                if (i+(1<<(j-1))<=n)
                {
                    a[i].p=make_pair(r[i][j-1],r[i+(1<<(j-1))][j-1]);
                }
                else a[i].p=make_pair(r[i][j-1],-1);
                a[i].i=i;
            }
            sort(a+1,a+1+n,cmp);
            int d=0;
            FOR(i,1,n)
            {
                if (i==1 || a[i].p!=a[i-1].p) d++;
                r[a[i].i][j]=d;
                p[a[i].i]=i;
                q[i]=a[i].i;
            }
        }
        int m;
        len=int(sqrt(n))+1;
        scanf("%d",&m);
        FOR(i,1,m)
        {
            scanf("%d%d",&c[i].l,&c[i].r);
            c[i].i=i;
        }
        sort(c+1,c+1+m,cmp2);
        myset.clear();
        int l=1,r=1,res=add(1);
        FOR(i,1,m)
        {
            while (r<c[i].r)
            {
                r++;
                res+=add(r);
            }
            while (l>c[i].l)
            {
                l--;
                res+=add(l);
            }
            while (r>c[i].r)
            {
                res-=sub(r);
                r--;
            }
            while (l<c[i].l)
            {
                res-=sub(l);
                l++;
            }
            ans[c[i].i]=res;
        }
        FOR(i,1,m)
        printf("%d\n",ans[i]);
    }
}
