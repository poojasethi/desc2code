#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<stdint.h>
using namespace std;
#define IMAX 314200
int room[IMAX];
int stay_time[IMAX],time2[IMAX];
class FastInput {
	public:
		FastInput() {
			m_dataOffset = 0;
			m_dataSize = 0;
			m_v = 0x80000000;
		}
		uint32_t ReadNext() {
			if (m_dataOffset == m_dataSize) {
				int r = read(0, m_buffer, sizeof(m_buffer));
				if (r <= 0) return m_v;
				m_dataOffset = 0;
				m_dataSize = 0;
				int i = 0;
				if (m_buffer[0] < '0') {
					if (m_v != 0x80000000) {
						m_data[m_dataSize++] = m_v;
						m_v = 0x80000000;
					}
					for (; (i < r) && (m_buffer[i] < '0'); ++i);
				}
				for (; i < r;) {
					if (m_buffer[i] >= '0') {
						m_v = m_v * 10 + m_buffer[i] - 48;
						++i;
					} else {
						m_data[m_dataSize++] = m_v;
						m_v = 0x80000000;
						for (i = i + 1; (i < r) && (m_buffer[i] < '0'); ++i);
					}
				}
			}
			return m_data[m_dataOffset++];
		}
	public:
		uint8_t m_buffer[32768];
		uint32_t m_data[16384];
		size_t m_dataOffset, m_dataSize;
		uint32_t m_v;
};
 
FastInput fi;

int main()
{
	int t,r,n,inconvenience,vacant,i;
	t=fi.ReadNext();
	while(t--)
	{
	//	memset(room,0,IMAX*4);
	//	memset(stay_time,0,IMAX*4);
		//memset(allocation,0,IMAX*4);
		//scanf("%d%d",&r,&n);
		r=fi.ReadNext();
		n=fi.ReadNext();
		int last=r-1;
		for(i=0;i<n;i++)
		{
			//scanf("%d%d",&time,&inconvenience);
			time2[i]=fi.ReadNext();
			inconvenience=fi.ReadNext();
			room[i]=0;
			stay_time[i]=31415926;
			if(inconvenience<r)
			{
				room[i]=min(i,r-1)-inconvenience;
				if(i>=r)
				{
					stay_time[last]=time2[i]-time2[last];
					last=i;
				}
			}
		}
		for (int k = 0; k < n; ++k) {
			printf("%d %d\n", room[k], stay_time[k]);
		}
	}
	return 0;
}