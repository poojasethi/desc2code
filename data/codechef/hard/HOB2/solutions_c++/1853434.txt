#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<stdint.h>
#include <cstdio>
#include <algorithm>
using namespace std;
class FastInput {
	public:
		FastInput() {
			m_dataOffset = 0;
			m_dataSize = 0;
			m_v = 0x80000000;
		}
		uint32_t ReadNext() {
			if (m_dataOffset == m_dataSize) {
				int r = read(0, m_buffer, sizeof(m_buffer));
				if (r <= 0) return m_v;
				m_dataOffset = 0;
				m_dataSize = 0;
				int i = 0;
				if (m_buffer[0] < '0') {
					if (m_v != 0x80000000) {
						m_data[m_dataSize++] = m_v;
						m_v = 0x80000000;
					}
					for (; (i < r) && (m_buffer[i] < '0'); ++i);
				}
				for (; i < r;) {
					if (m_buffer[i] >= '0') {
						m_v = m_v * 10 + m_buffer[i] - 48;
						++i;
					} else {
						m_data[m_dataSize++] = m_v;
						m_v = 0x80000000;
						for (i = i + 1; (i < r) && (m_buffer[i] < '0'); ++i);
					}
				}
			}
			return m_data[m_dataOffset++];
		}
	public:
		uint8_t m_buffer[32768];
		uint32_t m_data[16384];
		size_t m_dataOffset, m_dataSize;
		uint32_t m_v;
};
 
FastInput fi;

const int maxN = 314159;
int time2[maxN], room[maxN], stay_time[maxN];

int main() {
	int T;
	T=fi.ReadNext();
	//scanf("%d", &T);
	for (int t = 0; t < T; ++t) {
		int R, N;
		//scanf("%d%d", &R, &N);
		// index of last guest who lives in room R-1
		R=fi.ReadNext();
		N=fi.ReadNext();
		int last = R - 1;
		for (int k = 0; k < N; ++k) {
			int inconv;
			//scanf("%d%d", &time[k], &inconv);
			// for each guest we init room by 0 and stay_time by maximal possible
			time2[k]=fi.ReadNext();
			inconv=fi.ReadNext();
			room[k] = 0;
			stay_time[k] = 31415926;
			if(inconv < R) {
				// we settle this guest at room k if k<R and at room R-1 otherwise
				// hence the formula for prefered room
				room[k] = min(k, R - 1) - inconv;
				if (k >= R) {
					// The guest @last has occupied the room R-1 at time[last].
					// In order to free it at time[k] his stay time should be at most 
					// the difference time[k] - time[last].
					// But any lower value could ruin some previous records in logbook
					// by allowing some guest with inconv = R to occupy this room.
					stay_time[last] = time2[k] - time2[last];
					last = k;
				}
			}
		}
		for (int k = 0; k < N; ++k) {
			printf("%d %d\n", room[k], stay_time[k]);
		}
	}
	return 0;
}