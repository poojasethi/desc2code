// ConsoleApplication3.cpp : Defines the entry point for the console application.
//


#include<iostream>
#include<vector>
#include<stdio.h>
#include<cstdio>
#include<stdlib.h>
#include<algorithm>
#include<queue>
#include<bitset>
#include<fstream>
#include<stack>
#include<utility>
#include<string>
#include<cstring>
#include<math.h>
#include<cmath>
using namespace std;

#define scan scanf
#define sscan sscanf_s
#define get gets_s
#define strcpy strcpy_s
#define print printf 
#define mod 1000000007
#define ll long long
#define init int i,j,k,l,m,n,test
#define pause system("pause")
#define inf 1000000000



struct input
{
	int time,incov;

};
struct out
{
	int room,stay_time;

};
struct input input_arr[314160];
int allocation_scheme[314160];
		struct out out_arr[314160];
int main()
{
	init;
	
	cin>>test;
	
	while(test--)
	{
		
		int r;
		scan("%d %d",&r,&n);
		
		queue<int> free_rooms,allocated_rooms;
		for(i=0;i<n;i++)
			out_arr[i].stay_time=-1;
		//r is the no of rooms
		//fill the queue
		for(i=0;i<r;i++)
			free_rooms.push(i);
		for(i=0;i<n;i++)
		{
			scan("%d %d",&input_arr[i].time,&input_arr[i].incov);
			//if incov<r room is allocated
			if(input_arr[i].incov==r)
			{
				//room not allocated
				out_arr[i].room=0;
				out_arr[i].stay_time=1;
				continue;
			}
			//room allocation

			//free rooms available or not available
			
			//free rooms avaliable
			if(free_rooms.size()>0)
			{
				out_arr[i].room=(free_rooms.front()-input_arr[i].incov+r)%r;
				k=free_rooms.front();
				free_rooms.pop();
				allocated_rooms.push(k);
				allocation_scheme[k]=i;
			}
			//room not available in general
			else
			{
				//make arrangements to free the room
				k=allocated_rooms.front();
				j=allocation_scheme[k];
				//j has to vacate by now
				l=input_arr[j].time;
				out_arr[j].stay_time=input_arr[i].time-l;
				allocated_rooms.pop();
				free_rooms.push(k);
				out_arr[i].room=(free_rooms.front()-input_arr[i].incov+r)%r;
				k=free_rooms.front();
				free_rooms.pop();
				allocated_rooms.push(k);
				allocation_scheme[k]=i;
				



			}


			


		}
		for(i=0;i<n;i++)
		{
			if(out_arr[i].stay_time==-1)
				out_arr[i].stay_time=31415926;
			print("%d %d\n",out_arr[i].room,out_arr[i].stay_time);

		}






	}
	//pause;

	


}







