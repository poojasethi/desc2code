//Shubham Vijayvargiya

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

#define pb push_back
#define mp make_pair
#define eb emplace_back
#define F first
#define S second
#define sz(a) (int)(a.size())
#define set(a,b) memset(a,b,sizeof(a))
#define let(x,a) __typeof(a) x(a)
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define all(v) (v).begin(),(v).end()
#define sll(x) { scanf("%lld",&x); }
#define si(x) { scanf("%d",&x); }
#define slf(x) { scanf("%lf",&x); }
#define tcases() long long testcases; cin>>testcases ; while(testcases--)

#define trace(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); cout<<endl;}

vector<string> split(const string& s, char c)
{
	vector<string> v;
	stringstream ss(s);
	string x;
	while (getline(ss, x, c))
		v.emplace_back(x);
	return move(v);
}
void err(vector<string>::iterator it) {}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) 
{
	cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a <<" | ";
	err(++it, args...);
}

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long ll;
typedef pair<long long,long long> pll;
typedef vector<long long> vll;
typedef vector<pll> vpll;
typedef vector<vll> vvll;

//-----------------------------------------------------------------------------------------------------------------------------------------------//
pll out[350000],gu[350000];
int room[350000];
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	tcases()
	{	int r,n;
		cin>>r>>n;
		rep(i,0,r)room[i]=-1;
		rep(i,0,n)
			cin>>gu[i].F>>gu[i].S;
//		sort(gu,gu+n);
		rep(i,0,n)
		{	if(gu[i].S==r)
			{	out[i].F=i%r;
				out[i].S=1;
				continue;
			}
			out[i].F=(i-gu[i].S+r)%r;
			if(room[i%r]>-1)
				out[room[i%r]].S=gu[i].F-gu[room[i%r]].F;
			room[i%r]=i;
			out[i].S=31415926;
		}
		rep(i,0,n)
			cout<<out[i].F<<" "<<out[i].S<<endl;
	}
	return 0;
}

