import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.StringTokenizer;

class Main {

    int K;
    char input[][];

    long power[] = {
            1L,
            10L,
            100L,
            1000L,
            10000L,
            100000L,
            1000000L,
            10000000L,
            100000000L,
            1000000000L,
            10000000000L,
            100000000000L,
            1000000000000L,
            10000000000000L,
            100000000000000L,
            1000000000000000L};

    //solution contains current value of all the pointers in 16 d array
    // if solution is 0 then answer

    //queue is used for BFS
    LinkedList<Long> queue = new LinkedList<>();
    HashMap<Long, String> map = new HashMap<>();

    void input(Reader sc) throws Exception {
        K = sc.nextInt();
        input = new char[K][];
        long solution = 0;
        for (int i = 0; i < K; i++) {
            String str = sc.next();
            input[i] = str.toCharArray();
            solution += power[i] * input[i].length;
        }
        queue.offer(solution);
        map.put(solution, "");
    }

    String solve() {
        //last char is B
        long solution;
        while ((solution = queue.poll()) != 0) {
            long newsolB = solution;
            long newsolG = solution;
            for (int i = 0; i < K; i++) {
                int curPointer = (int) ((solution / power[i]) % 10);
                if (curPointer != 0) {
                    if (input[i][curPointer - 1] == 'B')
                        newsolB -= power[i];
                    else
                        newsolG -= power[i];
                }
            }
            String oldStr = map.get(solution);
            if (!map.containsKey(newsolB)) {
                map.put(newsolB, "B".concat(oldStr));
                queue.offer(newsolB);
            }
            if (!map.containsKey(newsolG)) {
                map.put(newsolG, "G".concat(oldStr));
                queue.offer(newsolG);
            }
        }
        return map.get(0L);
    }

    public static void main(String[] args) throws Exception {
        Reader sc = new Reader(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i++) {
            Main m = new Main();
            m.input(sc);
            System.out.println(m.solve());
        }
        //sc.close();
    }

    static class Reader {
        BufferedReader br;
        StringTokenizer st;

        Reader(InputStream in) throws Exception {
            br = new BufferedReader(new InputStreamReader(in));
            st = new StringTokenizer("");
        }

        String next() throws Exception {
            while (!st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            return st.nextToken();
        }

        int nextInt() throws Exception {
            return Integer.parseInt(next());
        }
    }
}
