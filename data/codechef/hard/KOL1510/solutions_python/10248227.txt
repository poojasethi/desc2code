import java.util.HashMap;
import java.util.LinkedList;
import java.util.Scanner;

class Main {

    int K;
    char input[][];

    long power[] = {
            1L,
            10L,
            100L,
            1000L,
            10000L,
            100000L,
            1000000L,
            10000000L,
            100000000L,
            1000000000L,
            10000000000L,
            100000000000L,
            1000000000000L,
            10000000000000L,
            100000000000000L,
            1000000000000000L};

    //solution contains current value of all the pointers in 16 d array
    // if solution is 0 then answer

    //queue is used for BFS
    LinkedList<Long> queue = new LinkedList<>();
    HashMap<Long, String> map = new HashMap<>();

    void input(Scanner sc) {
        K = sc.nextInt();
        input = new char[K][];
        long solution = 0;
        for (int i = 0; i < K; i++) {
            String str = sc.next();
            input[i] = str.toCharArray();
            solution += power[i] * input[i].length;
        }
        queue.offer(solution);
        map.put(solution, "");
    }

    String solve() {
        //last char is B
        while (!queue.isEmpty()) {
            long solution = queue.poll();
            if (solution == 0)
                return map.get(0L);
            long newsolB = 0;
            long newsolG = 0;
            for (int i = 0; i < K; i++) {
                int curpointerB = (int) ((solution / power[i]) % 10);
                int curpointerG = curpointerB;
                if (curpointerB != 0) {
                    if (input[i][curpointerB - 1] == 'B')
                        curpointerB--;
                    else
                        curpointerG--;
                }
                newsolB += power[i] * curpointerB;
                newsolG += power[i] * curpointerG;
            }
            String oldStr = map.get(solution);
            if (!map.containsKey(newsolB)) {
                map.put(newsolB, "B".concat(oldStr));
                queue.offer(newsolB);
            }
            if (!map.containsKey(newsolG)) {
                map.put(newsolG, "G".concat(oldStr));
                queue.offer(newsolG);
            }
        }
        return null;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i++) {
            Main m = new Main();
            m.input(sc);
            System.out.println(m.solve());
        }
        sc.close();
    }


}
