#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>

#include <cassert>
#include <limits>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#define each(it,o) for(auto it= (o).begin(); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
#define inrep int t;cin>>t; while(t--)
using namespace std;

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef vector<pii > vpii;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll,ll> pll;
typedef vector<pll > vpll;
typedef vector<string> vs;
typedef long double ld;

template<typename T> ostream& operator<< ( ostream &o,vector<T> v ) {
    if ( v.size() >0 )
        o<<v[0];
    for ( unsigned   i=1; i<v.size(); i++ )
        o<<" "<<v[i];
    return o<<endl;
}
template<typename U,typename V> ostream& operator<< ( ostream &o,pair<U,V> p ) {
    return o<<"("<<p.first<<", "<<p.second<<") ";
}
template<typename T> istream& operator>> ( istream &in,vector<T> &v ) {

    for ( unsigned   i=0; i<v.size(); i++ )
        in>>v[i];
    return in;
}
inline bool checkNeckLace ( int complete,int maxc, int part, int psize ) {
    int cnt=0;
    rep ( i,maxc ) {
        if ( ( complete&1 ) == ( part&1 ) ) {
            cnt++;
            part>>=1;
        }
        complete>>=1;
    }
    return cnt>=psize;
}
void necklout(int n, int s){
    
}
int main() {
    ios_base::sync_with_stdio ( false );
    inrep {
        int k;
        cin>>k;
        vi neckl;
        vi sizes;
        int maxg=0,maxb=0;
        rep ( i,k ) {
            string s;
            cin>>s;
            int part=0;
            int g=0,b=0;
            int cnt=0;
            for ( char c:s ) {
                if ( c=='G' ) {
                    g++;
                    part+=1<<cnt;
                } else b++;
                cnt++;
//                 part<<=1;

            }
           
            neckl.push_back ( part );
            sizes.push_back ( s.size() );
            maxg=max ( maxg,g );
            maxb=max ( maxb,b );


        }
//          cout<<maxg<<" "<<maxb<<endl;
        int j=maxg+maxb;

        int fneckl=0;
        while ( 1 ) {
            bool fn=0;
            rep ( i,1<<j ) {
                int cg=__builtin_popcount ( i );
                if ( cg<maxg || j-cg<maxb ) continue;
                bool f=1;
                rep ( nk,k ) {
                    bool f2=checkNeckLace ( i,j,neckl[nk],sizes[nk] );
                    if ( !f2 ) {
                        f=0;
                        break;
                    }
                }
                if ( f ) {
                    fneckl=i;
                    fn=1;
                    break;
                }
            }
            if ( fn ) break;
            j++;
        }
        rep ( i,j ) {
            if ( fneckl& ( 1<<i ) ) cout<<'G';
            else cout<<'B';


        }
        cout<<'\n';
    }
}
