/*
ID: abhishe38
PROG:
LANG: C++
*/

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

#define PB push_back
#define MP make_pair
#define MAXIMUM 18446744073709551615ULL
#define MAX 1000009
#define MOD 1000000007

using namespace std;

typedef long long int LL;
typedef unsigned long long int ULL;
typedef unsigned int UI;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector< pair<int,int> > VPI;

VI Fact;
int dp[1010][1010];

void pre()
{
    Fact.PB(1);
    LL tmp;
    for (int i=1; i<MAX; i++)
    {
        tmp = Fact[i-1];
        tmp *= i;
        tmp %= MOD;
        Fact.PB(tmp);
    }

    for (int i=0; i<1010; i++)
    {
        for (int j=0; j<1010; j++)
        dp[i][j] = 0;
    }

    for (int i=1; i<1010; i++)
    {
        dp[i][1] = 1;
    }

    for (int i=2; i<=1001; i++)
    {
        for (int j=2; j<=i; j++)
        {
            dp[i][j] += (((1LL*(j))*dp[i-1][j])%MOD);
            dp[i][j] += dp[i-1][j-1];
            if (dp[i][j]>MOD) dp[i+1][j+1] -= MOD;
        }
    }


}

int powmod(LL a, LL b)
{
   LL x=1,y=a;
   while (b>0)
   {
       if (b&1)
       x = (x*y)%MOD;

       y = (y*y)%MOD;
       b >>= 1;
   }
   return x;
}

int inverse_mod(LL a)
{
    return powmod(a,MOD-2);
}

LL Perm(int m, int k)
{
    return ((1LL*Fact[m])*inverse_mod(Fact[m-k]))%MOD;
}

LL solve(int n, int m, int k)
{
    k = min(m,k);
    LL res = 0;
    for (int j=1; j<=k; j++)
    {
            res += (1LL*Perm(m,j))*dp[n][j];
            if (res>MOD) res %= MOD;
    }

return res;
}

int main()
{
    pre();
//    for (int i=0; i<10; i++)
//    {
//        for (int j=0; j<10; j++)
//        cout<<"dp["<<i<<"]"<<"["<<j<<"]: "<<dp[i][j]<<"\n";
//        cout<<"\n";
//    }
    int t,n,m,k;
    scanf("%d",&t);
    LL ans;
    while (t--)
    {
        scanf("%d%d%d",&n,&m,&k);
        ans = solve(n,m,k);
        printf("%lld\n",(ans%MOD));
    }
   //system("pause");
   return 0;
}
