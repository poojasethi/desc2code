#include <iostream>
#include <memory.h>

using namespace std;

typedef long long ll;
ll MOD = (ll) (1e9 + 7);

ll f[1 << 20];

ll
pow (ll x, ll p)
{
  if (!p)
    return 1;
  ll y = pow (x, p / 2);
  y = y * y % MOD;
  if (p & 1)
    y = y * x % MOD;
  return y;
}

ll
inv (ll x)
{
  return pow (x, MOD - 2);
}

inline ll
F (int N)
{
  return f[N];
}

ll
C (int N, int M)
{
  if (M > N)
    return 0;
  return F (N) * inv (F (M)) % MOD * inv (F (N - M)) % MOD;
}

ll cnt[1 << 10][1 << 10];

ll
COUNT (int N, int K)
{
  if (N == K)
    return 1;
  if (K > N || N == 0 || K <= 0)
    return 0;
  if (cnt[N][K] >= 0)
    return cnt[N][K];
  ll & res = cnt[N][K];
  res = 0;
  res = (K * COUNT (N - 1, K) + COUNT (N - 1, K - 1)) % MOD;
  return res;
}

void
solve ()
{
  int N, M, K;
  cin >> N >> M >> K;
  ll res = 0;
  for (int k = 1; k <= K; k++)
    {
      res += C (M, k) * F (k) % MOD * COUNT (N, k) % MOD;
    }
  cout << (res % MOD) << endl;
}

int
main ()
{
  memset (cnt, -1, sizeof cnt);
  f[0] = 1;
  for (int i = 1; i < (1 << 20); i++)
    f[i] = i * f[i - 1] % MOD;
  int t;
  cin >> t;
  while (t--)
    solve ();
  return 0;
}