#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
#include <map>
#include <vector>
#include <list>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <string>
#include <queue>
#include <bitset>		//UWAGA - w czasie kompilacji musi byc znany rozmiar wektora - nie mozna go zmienic
#include <cassert>
#include <iomanip>		//do setprecision
#include <ctime>
#include <complex>
using namespace std;

#define FOR(i,b,e) for(int i=(b);i<(e);++i)
#define FORQ(i,b,e) for(int i=(b);i<=(e);++i)
#define FORD(i,b,e) for(int i=(b)-1;i>=(e);--i)
#define REP(x, n) for(int x = 0; x < (n); ++x)

#define ST first
#define ND second
#define PB push_back
#define MP make_pair
#define LL long long
#define ULL unsigned LL
#define LD long double

const double pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342;

//za wolne
#define MR 1010
#define MS 1000010
#define MOD 1000000007

int stirling[MR][MR], sil[MS];

int newton[MR];	//newton[i] = M po i

int Extend_NWD(int n, int m, LL& xn, LL& xm, LL& yn, LL& ym)
{
	if(n < m)
		swap(n, m);
	xn = 1; yn = 0; xm = 0; ym = 1;			//ustaw poczatkowa kombinacje calkowitoliczbowa
	int p;
	LL xp, yp;
	while(m)
	{
		p = n % m;							//ustaw wszystkie zmienne pomocnicze
		xp = xn - xm*(n/m);
		yp = yn - ym*(n/m);
		xn = xm;
		yn = ym;
		n = m;
		m = p;
		xm = xp;
		ym = yp;
	}
	return n;
}//Extend_NWD

int mles(int a, int b, int n)
{	
	LL xa, xn, ya, yn;	
	int d = Extend_NWD(a, n, xa, xn, ya, yn);	
	if(b % d)	
		return -1;
	a /= d; b /= d; n /= d;			 		//sprowadz do rownania z elementem odwrotnym
	Extend_NWD(a, n, xa, xn, ya, yn);
	if(xa * a + ya * n == 1)				//moglismy zamienic a i n, wiec trza sprawdzic
		xa = (xa + n) % n;
	else
		xa = (ya + n) % n;
	return (xa * b) % n;	
}


int main()
{
	sil[0] = 1;
	FOR(i,1,MS)
		sil[i] = (sil[i-1]*(LL)i) % MOD;	
	stirling[0][0] = 1;
	FOR(i,1,MR)
	{
		stirling[i][1] = stirling[i][i] = 1;
		FOR(j,2,i)
			stirling[i][j] = (stirling[i-1][j-1] + j*(LL)stirling[i-1][j]) % MOD;
	}
	int T;
	scanf("%d", &T);
	REP(c,T)
	{
		int N, M, K;
		scanf("%d%d%d", &N, &M, &K);
		K = min(K, M);
		newton[1] = M;
		//wylicz kolejne wyrazy newtona
		FORQ(i,2,K)
			newton[i] = ((sil[M]*(LL)mles(sil[i],1,MOD))%MOD*(LL)mles(sil[M-i],1,MOD))%MOD;
		int res = 0;		
		REP(i,K)
			res = (res + (newton[i+1]*(LL)sil[i+1])%MOD*(LL)stirling[N][i+1]) % MOD;			
		printf("%d\n", res);
	}
	return 0;
}