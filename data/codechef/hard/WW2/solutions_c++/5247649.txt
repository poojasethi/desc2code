//Shakim :D
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <utility>
#include <map>
#include <set>
#include <string>
using namespace std;
typedef long long LL;
#define IT iterator
#define getcx getchar
#define INF (int(1e9))
#define INFL (LL(1e18))
#define pii pair< int,int >
#define piii pair< pii , int >
#define temp 0
#define wait 1
#define perm 2
struct cmp
{
    bool operator()(const pii &a,const pii &b)
    {
        return a.first>b.first;
    }
};
struct myclass {
  bool operator() (const pii &a,const pii &b)
  {
        return a.first>b.first;
  }
} myobject;
#define in2(n,m) scanf("%d %d",&n,&m);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define in4(p,q,r,s) scanf("%d %d %d %d",&p,&q,&r,&s);
#define mod 1000000007
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
int func(int x,int y,int m)
{
    if(x>=1 && x<=m && x==y)
        return 1;
    return 0;
}
int main()
{
    int t,i,j,k,n,m,cnt,diff,a,b,c;
    long long int x[35][35],y[35][35],tmp[35][35],sum[35],ans;
    bool fnd;
    in(t);
    while(t--)
    {
        in2(n,m);

        if(n==1)
        {
            printf("%d\n",m);
            continue;
        }
        if(m==1)
        {
            printf("0\n");
            continue;
        }
        //so m>=2
        if(n==2)
        {
            ans=2;
            for(i=2; i<=m-1; i++)
                ans+=2;
            printf("%lld\n",ans);

            continue;
        }
        //so n>2

        cnt=n/2;

        fnd=false;
        if(n%2==0)
        {
            fnd=true;
            cnt--;
        }

        for(i=1; i<=m; i++)
        {
            for(j=1; j<=m; j++)
            {
                if(i==j)
                {
                    x[i][j]=1;
                }
                else
                {
                    x[i][j]=0;
                }

                y[i][j]=0;

                diff=abs(i-j);

                if(diff>2)
                    continue;

                //diff<=2

                int ja=j-1;
                int jb=j+1;

                int ia=i-1;
                int ib=i+1;
                int ic=i;

                y[i][j]+=func(ia,ja,m);
                y[i][j]+=func(ia,jb,m);
                y[i][j]+=func(ib,ja,m);
                y[i][j]+=func(ib,jb,m);
                y[i][j]+=func(ic,ja,m);
                y[i][j]+=func(ic,jb,m);
            }
        }

        //matrix exponentiation
        while(cnt>0)
        {
            if(cnt&1)
            {
                //x=x*y;
                for(i=1; i<=m; i++)
                {
                    for(j=1; j<=m; j++)
                    {
                        tmp[i][j]=0;
                        for(k=1; k<=m; k++)
                        {
                            tmp[i][j]+=x[i][k]*y[k][j];
                            tmp[i][j]%=mod;
                        }
                    }
                }

                for(i=1; i<=m; i++)
                {
                    for(j=1; j<=m; j++)
                    {
                        x[i][j]=tmp[i][j];
                    }
                }
            }
            //y=y*y;
            for(i=1; i<=m; i++)
            {
                for(j=1; j<=m; j++)
                {
                    tmp[i][j]=0;
                    for(k=1; k<=m; k++)
                    {
                        tmp[i][j]+=y[i][k]*y[k][j];
                        tmp[i][j]%=mod;
                    }
                }
            }

            for(i=1; i<=m; i++)
            {
                for(j=1; j<=m; j++)
                {
                    y[i][j]=tmp[i][j];
                }
            }
            cnt/=2;
        }

        ans=0;
        if(fnd==true)
        {
            for(i=1; i<=m; i++)
            {
                sum[i]=0;
                for(j=1; j<=m; j++)
                {
                    sum[i]+=x[i][j];
                }
            }
            for(i=1; i<=m; i++)
            {
                if(i>1)
                    ans+=sum[i-1];
                if(i<m)
                    ans+=sum[i+1];
                ans%=mod;
            }
        }
        else//odd
        {
            for(i=1; i<=m; i++)
            {
                for(j=1; j<=m; j++)
                {
                    ans=ans+x[i][j];
                    ans%=mod;
                }
            }
        }
        printf("%lld\n",ans);
    }

    return 0;
}
