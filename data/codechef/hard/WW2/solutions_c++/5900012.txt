#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007

typedef long long int LL;
typedef vector< vector<LL> > matrix;

matrix I;

matrix multiply(matrix A, matrix B){
	int K=(int)A.size();
    matrix C(K, vector<LL>(K));
    for(int i=0;i<K;i++)
    for(int j=0;j<K;j++)
    for(int k=0;k<K;k++)
    {
        C[i][j] = C[i][j] + (A[i][k] * B[k][j]) % MOD;
        if(C[i][j]>=MOD)
            C[i][j]-=MOD;
    }
    return C;
}

matrix power(matrix P, int n){
	if(n==0)
		return I;
    if(n==1)
		return P;
    matrix ret=power(P,n/2);
    matrix ret1=multiply(ret,ret);
    if(n%2==0)
		return ret1;
    else 
		return multiply(ret1,P);
}

int main(){
	int tc, n, m;
	scanf("%d", &tc);
	while(tc--){
		scanf("%d%d", &n, &m);
		
		matrix odd(m, vector<LL>(m));
		matrix even(m, vector<LL>(m));
		I.resize(m);
		for(int i=0; i<m; i++)
        {
            I[i].resize(m);
            I[i][i]=1;
        }
        
		for(int i=0; i<m; i++)
        {
            odd[i][i]=1;
            if(i-1>=0)
                even[i][i-1]=odd[i][i-1]=1;
            if(i+1<m)
                even[i][i+1]=odd[i][i+1]=1;
        }
		n-=1;
		matrix mul= multiply(even, odd);
		matrix pow= power(mul, n/2);
		LL ans= 0;
		if(n%2){
			 pow=multiply(pow,even);
		}
		
		for(int i=0;i<m;i++)
		for(int j=0;j<m;j++){
			ans+= pow[i][j];
			if(ans>=MOD) 
				ans-=MOD;
		}
		
		cout<< ans<<"\n";
	}
}
