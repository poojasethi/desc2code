#include <bits/stdc++.h>
# define MOD 1000000007
 
using namespace std;
 
typedef long long LL;
typedef vector<LL> VL;
typedef vector <VL> VLL;
 
VLL I;
 
VLL multiply (VLL a, VLL b) {
//assert (arsz == acsz && bcsz == acsz);
LL wq = a.size();
 
assert (a.size() == b.size());
VLL mult (wq, vector<LL>(wq));
 
for (LL i = 0; i < wq; i++)
for (LL j = 0; j < wq; j++)
for (LL k = 0; k < wq; k++ ){
mult[i][j] = mult[i][j] + ((a[i][k] % MOD) * (b[k][j] % MOD)) % MOD;
mult[i][j] %= MOD;
}
 
return mult;
}
 
VLL expo (VLL A, LL n) {
if (n == 0)
return I;
else if (n == 1)
return A;
VLL T = expo (A, n/2);
VLL T1 = multiply (T,T);
if (n % 2 == 0 )
return T1;
else
return multiply (T1,A);
}
 
int main () {
LL test;
cin >> test;
while (test--) {
LL n, m;
cin >> n >> m;
 
I.resize (m);
for (LL i = 0; i < m; i++) {
I[i].resize(m);
I[i][i] = 1;
}
 
VLL odd (m, VL(m, 0));
VLL even (m, VL(m, 0));
 
for (int i = 0; i <m; i++) {
odd[i][i] = 1;
if (i -1 >= 0)
odd[i][i-1] = even[i][i-1] = 1;
if (i + 1 < m)
odd[i][i+1] = even[i][i+1] = 1;
 
}
n-= 1;
VLL t = multiply (even,odd);
VLL ans = expo (t, n/2);
 
if (n % 2)
ans = multiply (ans, even);
LL finalans = 0;
 
for (LL i = 0; i < m; i++)
for (LL j = 0; j < m; j++){
finalans = (finalans + ans[i][j]) ;
finalans %= MOD;
}
 
 
cout <<finalans <<"\n";
}
return 0;
}
 
