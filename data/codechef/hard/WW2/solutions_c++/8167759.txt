#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);
 
using namespace std;
 
 
#define ll long long
#define ff first
#define ss second
#define mpa make_pair
#define MOD 1000000007
#define pb push_back
#define lld I64d
#define MXN 1000000
 
int bitcnt(int mask){return __builtin_popcount(mask);}
int SET(int N,int pos){ return N=N | (1<<pos);}
int RESET(int N,int pos){   return N= N & ~(1<<pos);}
int check(int N,int pos){   return (N & (1<<pos));}
int toggle(int N,int pos){if(check(N,pos))return N=RESET(N,pos);return N=SET(N,pos);}
void PRINTBIT(int N){   printf("("); for(int i=6;i>=1;i--)  {bool x=check(N,i);cout<<x;}    puts(")");}
int mod(int a, int b) { return a - a/b * b;}
 
typedef vector<ll> row;
typedef vector<row> matrix;
typedef vector<bool> bool_row;
 
int N;
int M;
 
matrix mul(matrix a, matrix b)
{
	matrix c = matrix(M + 2, row(M + 2, 0));
	
	for(int i = 1; i <= M; ++i) {
		for(int j = 1; j <= M; ++j) {
			for(int k = 1; k <= M; ++k) {
				c[i][j] += (a[i][k] * b[k][j]);
				if(c[i][j] >= MOD)
					c[i][j] %= MOD;
			}
		}
	}
	
	return c;
}
 
matrix Pow_(matrix mat, int p)
{
	if(p == 1)
		return mat;
	matrix c = Pow_(mat, p >> 1);
	c = mul(c, c);
	if(p & 1)
		c = mul(c, mat);
	return c;
}
 
int main()
{
	int T;
	scanf("%d", &T);
	
	while(T--) {
		
		scanf("%d%d", &N, &M);
		
		bool_row Odd_Mine = bool_row(M + 2, false);
		matrix Odd_Mat = matrix(M + 2, row(M + 2, 0));
		matrix Eve_Mat = matrix(M + 2, row(M + 2, 0));
		
		for(int i = 1; i <= M; ++i) {
			 if(i & 1)
			 	Odd_Mine[i] = true;
		}
		
		for(int i = 1; i <= M; ++i) {
			if(Odd_Mine[i]) {
				
			//	cout<<"kha be\n";
				
				if(i - 1 >= 1)
					Odd_Mat[i][i - 1]++;
				if(i + 1 <= M)
					Odd_Mat[i][i + 1]++;
			} else {
				if(i - 1 >= 1)
					Odd_Mat[i][i - 1]++;
				if(i + 1 <= M)
					Odd_Mat[i][i + 1]++;
			}
		}
		
		for(int i = 1; i <= M; ++i) {
			Eve_Mat[i][i]++;
			if(i - 1 >= 1)
				Eve_Mat[i][i - 1]++;
			if(i + 1 <= M)
				Eve_Mat[i][i + 1]++;
		}
		if(N == 1) {
			printf("%d\n", M);
			
		} else {
			N--;
			
			if(N == 1) {
				ll ans = 0;
				for(int i = 1; i <= M; ++i) {
					for(int j = 1; j <= M; ++j) {
						ans += Odd_Mat[i][j];
						if(ans >= MOD)
							ans %= MOD;
			//			cout<<Odd_Mat[i][j] << " ";
					}
			//		cout<< "\n";
				}
				printf("%lld\n", ans);
				
				continue;
			}
			
			matrix mat = mul(Odd_Mat, Eve_Mat);
			
			/*
			puts("Power se pehle");
			for(int i = 1; i <= M; ++i) {
				for(int j = 1; j <= M; ++j) {
					cout<< mat[i][j] << " ";
				}
				puts("");
			}
			*/
			
			if(N&1) {
				mat = Pow_(mat, N >> 1);
				mat = mul(mat, Odd_Mat);
			} else {
				mat = Pow_(mat, N >> 1);
			}
			
			/*
			cout<<"power ke baad\n";
			for(int i = 1; i <= M; ++i) {
				for(int j = 1; j <= M; ++j) {
					cout<< mat[i][j] << " ";
				}
				puts("");
			}
			*/
			
			ll ans = 0;
			for(int i = 1; i <= M; ++i) {
				for(int j = 1; j <= M; ++j) {
					ans += mat[i][j];
					if(ans >= MOD)
						ans %= MOD;
				}
			}
			printf("%lld\n", ans);
		}
	}
	
	return 0;
} 