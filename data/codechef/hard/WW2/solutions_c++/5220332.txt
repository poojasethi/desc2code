#include<vector>
#include<cstring>
#include<algorithm>
#include<stdio.h>
#include<climits>
#include<set>
#include<cmath>
#include<bitset>
#include<map>
#include<iostream>
#include<queue>
#define test(t) while(t--)
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%llu",&n)

#define p(n) printf("%llu\n",n)
#define rep(i,a,n) for(i=a;i<=n;i++)
#define vi vector<int>
#define vii vector< vector<int> >
#define vpii vector< pair<int,int> >
#define mii map<int,int>
#define pb push_back
#define inf 1000000000LL
#define mp make_pair
#define mod 1000000007LL
//#define inf 100000000
#define ll unsigned long long
#define gc getchar_unlocked
//long long m[2000005],n[2000005];
//ll dp[2005][2005];
using namespace std;
int row,col;
void copymatrix(ll a[31][31],ll b[31][31])
{
 int i,j;
 for(i=0;i<row;++i)
 for(j=0;j<col;++j)
 a[i][j]=b[i][j];
}
void multiply(ll a[31][31],ll b[31][31])
{
    ll c[31][31];
    int i,j,k;
    for(i=0;i<=30;i++)
       for(j=0;j<=30;++j)
         c[i][j]=0;

    for(i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
        {
            c[i][j]=0;
            for(k=0;k<col;k++)
            {
                c[i][j]=(c[i][j]+a[i][k]*1LL*b[k][j]%mod)%mod;
            }
        }
    }
    copymatrix(a,c);
}

void matpow(ll a[31][31],ll b)
{
     ll c[31][31];
    int i,j;
    for(i=0;i<=30;i++)
        for(j=0;j<=30;++j)
         c[i][j]=0;
    for(i=0;i<col;i++)
        c[i][i]=1;

    while(b)
    {
        if(b&1)
            multiply(c,a);
        multiply(a,a);
        b/=2;
    }
    copymatrix(a,c);
}
int main()
{
 int t,n,m,i,j;
 ll ev[31][31],od[31][31];
 ll dp[31][31];
 ll ans;
 s(t);
 while(t--)
 {
 ans=0;
  s(n);s(m);
  row=col=m;
  for(i=0;i<=30;++i)
  for(j=0;j<=30;++j)
  ev[i][j]=od[i][j]=dp[i][j]=0;
  for(i=0;i<row;++i)
  {
   if(i>0)
   ev[i][i-1]=od[i][i-1]=1;
   if(i<m-1)
   ev[i][i+1]=od[i][i+1]=1;
   ev[i][i]=1;
  }
  for(i=0;i<row;++i)
  dp[i][i]=1;
  if(n==1)
  printf("%d\n",m);
  else if(n==2)
  {
   for(i=0;i<row;++i)
   for(j=0;j<col;++j)
   {
    ans=ans+od[i][j];
    ans%=mod;
   }
   printf("%lld\n",ans);
  }
  else
  {
   multiply(dp,ev);
   multiply(dp,od);
   matpow(dp,(n-1)/2);
   if(n%2==0)
   multiply(dp,od);
   for(i=0;i<row;++i)
   for(j=0;j<col;++j)
   {
    ans=ans+dp[i][j];
    ans%=mod;
   }
   printf("%lld\n",ans);
  }
 }

}
