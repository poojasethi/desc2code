#include<bits/stdc++.h>

using namespace std;

#define mod 1000000007
#define pinf 2147483647
#define ninf -2147483648
#define s(a) scanf("%d",&a)
#define lls(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a);
#define p(a) printf("%d",a)
#define llp(a) printf("%lld",a)
#define ps(a) printf("%s",a);
#define nline printf("\n")
#define ll long long
#define MAX(a,b,c) ((a>b)?(a>c?a:c):(b>c?b:c))
#define MIN(a,b,c) ((a<b)?(a<c?a:c):(b<c?b:c))
#define gcd __gcd

string tostr(long long x) { stringstream ss; ss << x; return ss.str(); }
long long toint(const string &s) { stringstream ss; ss << s; long long x; ss >> x; return x; }

typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string,int> msi;
#define pb(x) push_back(x)
#define mp(x,y) make_pair(x,y)


int m;
void mult(long long dp[35][35],long long int dp2[35][35]);
void update(long long dp1[35][35],long long dp[35][35],int n)
{
int i,j;
if(n==0)
	return;
if(n==1)
	{
		for(i=0;i<m;i++)
			for(j=0;j<m;j++)
				dp1[i][j]=dp[i][j];
	}
else if(n%2)
	{
		update(dp1,dp,n-1);
	/*		for(i=0;i<m;i++)
{
	for(j=0;j<m;j++)
	{
		cout<<dp1[i][j]<<" ";
	}
	cout<<"\n";
}
cout<<"aaaaaa\n";*/
		mult(dp1,dp);
			/*for(i=0;i<m;i++)
{
	for(j=0;j<m;j++)
	{
		cout<<dp1[i][j]<<" ";
	}
	cout<<"\n";
}
cout<<"bbbbbbbbbb\n";*/
	}
else
	{
		update(dp1,dp,n/2);
		mult(dp1,dp1);
	/*		for(i=0;i<m;i++)
{
	for(j=0;j<m;j++)
	{
		cout<<dp1[i][j]<<" ";
	}
	cout<<"\n";
}
cout<<"square\n";*/
	}
}

void mult(long long int dp1[35][35],long long int dp2[35][35])
{
int i,j,k;
long long dp3[35][35]={0};
	for(i=0;i<m;i++)
		for(j=0;j<m;j++)
			for(k=0;k<m;k++)
				{
				dp3[i][j] += (dp1[i][k]*dp2[k][j])%mod;
				dp3[i][j] %= mod;
				}
	for(i=0;i<m;i++)
		for(j=0;j<m;j++)
			dp1[i][j]=dp3[i][j];	
}

void multiply_final(long long int initial[35],long long int dp[35][35])
{
int i,j,k;
long long temp[35] = {0};

	for(j=0;j<m;j++)
		for(k=0;k<m;k++)
			{
				temp[j] += (initial[k]*dp[j][k])%mod;
				temp[j] %= mod;
			}
	for(i=0;i<m;i++)
		initial[i]=temp[i];
}
int main()
{
//freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
int i,n,j,t;
s(t);
while(t--)
{
s(n);
s(m);
long long int dp[35][35],eo[35][35],oe[35][35],initial[35],dp1[35][35];

//construct even to odd matrix
//dp[i][j] denotes a matrix in which jth column represents ways of reaching jth block from jth block of (i-1)th row 
for(j=0;j<m;j++)
	{
		for(i=0;i<m;i++)
			{
			if(i==j||i==j-1||i==j+1)
				eo[i][j]=1;			
			else
				eo[i][j]=0;			
			}	
	}

//construct odd to even matrix
//dp[i][j] denotes a matrix in which jth column represents ways of reaching jth block from jth block of (i-1)th row 
for(j=0;j<m;j++)
	{
		for(i=0;i<m;i++)
			{
			if(i==j-1||i==j+1)
				oe[i][j]=1;			
			else
				oe[i][j]=0;			
			}	
	}
	
/*for(i=0;i<n;i++)
{
	for(j=0;j<m;j++)
	{
		cout<<eo[i][j]<<" ";
	}
	cout<<"\n";
}

for(i=0;i<n;i++)
{
	for(j=0;j<m;j++)
	{
		cout<<oe[i][j]<<" ";
	}
	cout<<"\n";
}*/

for(i=0;i<m;i++)
	initial[i]=1;


for(i=0;i<m;i++)
	for(j=0;j<m;j++)
		dp1[i][j]=0;
if((n-1)%2)
	{
	if(n-1 != 1)
		{
			mult(eo,oe);
			update(dp1,eo,(n-1)/2);
			mult(dp1,oe);
		}
	else
		{
			for(i=0;i<m;i++)
				for(j=0;j<m;j++)
					dp1[i][j]=oe[i][j];
		}
	}
else
	{
		if(n-1 != 0)
		{
			mult(eo,oe);
/*					for(i=0;i<m;i++)
{
	for(j=0;j<m;j++)
	{
		cout<<eo[i][j]<<" ";
	}
	cout<<"\n";
}

cout<<"hellooo\n";*/
			update(dp1,eo,(n-1)/2);
		}
/*		for(i=0;i<m;i++)
{
	for(j=0;j<m;j++)
	{
		cout<<dp1[i][j]<<" ";
	}
	cout<<"\n";
}

cout<<"hellooo\n";*/
	}
multiply_final(initial,dp1);
/*for(i=0;i<m;i++)
{
	for(j=0;j<m;j++)
	{
		cout<<dp1[i][j]<<" ";
	}
	cout<<"\n";
}*/
long long ans=0;
for(i=0;i<m;i++)
	{
		ans = (ans + initial[i])%mod;
	}
if(n==1)
	cout<<m<<endl;
else
	cout<<ans<<endl;
}
return 0;
}