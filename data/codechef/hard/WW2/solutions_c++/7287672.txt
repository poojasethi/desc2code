#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

const LL MOD = 1e9 + 7;

int tc,N,M;

struct matrix {
	LL A[33][33];

	matrix(int val){
	   memset(A,0,sizeof(A));
	   if(val)
	   	for(int i = 0;i < M;++i)
	   		A[i][i] = val;
	}

	matrix operator * (matrix B){
		matrix res(0);
		for(int i = 0;i < M;++i){
			for(int j = 0;j < M;++j){
				for(int k = 0;k < M;++k){
					res.A[i][j] += A[i][k] * B.A[k][j];
					if(res.A[i][j] >= MOD) res.A[i][j] %= MOD;
				}
			}
		}

		return res;
	}

	matrix POW(LL exp){
		matrix cur = *this;
		matrix res(1);
		while(exp){
			if(exp & 1) res = res * cur;
			cur = cur * cur;
			exp = exp >> 1;
		}
		return res;
	}
};

int main (){
	scanf("%d",&tc);
	while(tc--){
		scanf("%d %d",&N,&M);
		matrix odd(0),even(0);
		for(int i = 0;i < M;++i){
			odd.A[i][i] = 1;
			if(i - 1 >= 0) odd.A[i][i - 1] = even.A[i][i - 1] = 1;
			if(i + 1 < M)  odd.A[i][i + 1] = even.A[i][i + 1] = 1;
		}
		LL steps = N - 1;
		matrix res(0);
		res = odd * even;
		res = res.POW(steps / 2LL);
		if(steps & 1) res = res * even;
		LL ans = 0;
		for(int i = 0;i < M;++i){
			for(int j = 0;j < M;++j){
				ans += res.A[i][j];
				if(ans >= MOD) ans -= MOD;
			}
		}
		printf("%lld\n",ans);
	}
	return 0;
}
