#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define MOD 1000000007 // 2 billion

int MAX_N ;
struct Matrix{ int mat[31][31];  };

Matrix matMul( Matrix a , Matrix b )
{
    Matrix ans;int i , j , k;
    for( i = 0 ; i < MAX_N ; i++ )
        for( j = 0 ; j < MAX_N ; j++ )
            for( ans.mat[i][j] = k = 0 ; k < MAX_N ; k++ )
            {
                ans.mat[i][j] += ( a.mat[i][k] *1ll* b.mat[k][j] ) % MOD;
                ans.mat[i][j] %= MOD;
            }
    return ans;
}

Matrix matPow( Matrix base , int  p )
{
    Matrix ans; int i , j ;
    for( i = 0 ; i < MAX_N ; i++ )
        for( j = 0 ; j < MAX_N ; j++ )
            ans.mat[i][j] = ( i == j );
    while( p ){
        if( p & 1 )
            ans = matMul( ans , base );
        base = matMul( base , base );
        p >>= 1;
    }
    return ans;
}
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int t;s(t);
    while( t-- )
    {
        int n , m ;s(n);s(MAX_N);
        Matrix odd , even , ans ;
        REP( i , 0 , MAX_N - 1 )
        {
            REP( j , 0 , MAX_N - 1 )
            {
                odd.mat[i][j] = 0;
                even.mat[i][j] = 0;
                ans.mat[i][j] = 0;
            }
        }
        REP( i , 0 , MAX_N - 1 )
        {
            if( i - 1 >= 0 )
                odd.mat[i][i - 1] = 1;
            if( i + 1 < MAX_N )
                odd.mat[i][i + 1] = 1;
            if( i - 1 >= 0 )
                even.mat[i][i - 1] = 1;
            even.mat[i][i] = 1;
            if( i + 1 < MAX_N )
                even.mat[i][i + 1] = 1;
        }
        Matrix p = matMul( odd , even );
        n--;
        p = matPow( p , n / 2 );
        if( n % 2 )
            p = matMul( p , odd );
        REP( i , 0 , MAX_N - 1 )
            ans.mat[i][0] = 1;
        ans = matMul( p , ans );
        int val = 0;
        REP( i , 0 , MAX_N - 1 )
        {
            val += ans.mat[i][0];
            val %= MOD;
        }
        printf("%d\n",val);
    }
    return 0;
}
