#include <cstdio>
#include <vector>
#include <cmath>
using namespace std;

typedef vector < vector < long long > >  matrix;
matrix I;
int MOD=1000000007;
void initI(int n){
	I.resize(n);
    for(int i=0; i<n; i++)
    {
        I[i].resize(n);
        I[i][i]=1;
    }
}
matrix multiply(matrix A, matrix B)
{
    int K=(int)A.size();
    matrix C(K, vector<long long>(K));
    for(int i=0;i<K;i++) for(int j=0;j<K;j++) for(int k=0;k<K;k++)
    {
        C[i][j] = C[i][j] + (A[i][k] * B[k][j]) % MOD;
        if(C[i][j]>=MOD)
            C[i][j]-=MOD;
    }
    return C;
}
matrix matrix_pow(matrix T, long long N)
{
    if(N==0)return I;
    if(N==1)return T;
    matrix ret=matrix_pow(T,N/2);
    matrix ret1=multiply(ret,ret);
    if(N%2==0)return ret1;
    else return multiply(ret1,T);
}
void print_matrix(matrix m){
	for(int i=0;i<m.size();i++){
		for(int j=0;j<m[0].size();j++){
			printf("%lld ", m[i][j]);
		}
		printf("\n");
	}
}
long long getsum(int n,int m){
	matrix even(m,vector <long long >(m));
	matrix odd(m,vector < long long >(m));
	for(int i=0; i<m; i++)
    {
        odd[i][i]=1;
        if(i-1>=0)
            even[i][i-1]=odd[i][i-1]=1;
        if(i+1<m)
            even[i][i+1]=odd[i][i+1]=1;
    }
	matrix eo=multiply(even,odd);
	matrix res=matrix_pow(eo,n/2);
	if(n%2==1) res=multiply(res,even);
	long long sum=0;
	for(int i=0;i<m;i++){
		for(int j=0;j<m;j++){
			sum+=res[i][j];
			sum%=MOD;
		}
	}
	//print_matrix(res);
	return sum;
}
int main() {
	int t;
	scanf("%d",&t);
	while(t-->0){
		int n,m;
		scanf("%d %d",&n,&m);
		n--;
		initI(m);
		printf("%lld\n", getsum(n,m)%MOD);
	}
	return 0;
}
