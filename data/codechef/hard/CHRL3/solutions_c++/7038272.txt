#include <bits/stdc++.h>
using namespace std;
#define pb push_back
//#define mp make_pair
#define line() printf("\n")
#define space() printf(" ")
typedef long long int lli;
void sc(int& a){scanf("%d",&a);}
void sc(lli& a){scanf("%lld",&a);}
void sc(int& a, int& b){sc(a);sc(b);}
void sc(int& a,int& b,int& c){sc(a);sc(b);sc(c);}
void sc(lli& a,lli& b){sc(a);sc(b);}
void sc(lli& a,lli& b,lli& c){sc(a,b);sc(c);}
void write(int a){printf("%d",a);}
void write(lli a){printf("%lld",a);}
lli mod =1000000007;
lli modpow(lli a, lli b, lli mod){lli res=1;while(b>0){if(b&1)res=(res*a)%mod;a=(a*a)%mod;b=b/2;}return res%mod;} 
int segtree[400005];
int a[100005];
int ans[100005];
void update(int low, int high, int index, int node, int val)
{
    //if(index==2) cout<<low<<" "<<high<<" "<<node<<endl;
    if(low==high)
    {
        segtree[node]=val;
        int parent=node/2;
        while(parent>0)
        {
            segtree[parent]=max(segtree[2*parent],segtree[2*parent+1]);
            parent/=2;
        }
        return ;
    }
    int mid=(low+high)/2;
    if(index<=mid) update(low,mid,index,2*node,val);
    else update(mid+1,high,index,2*node+1,val);
}

int query(int low, int high, int left, int right, int node)
{
    if(left>right) return 0;
    if(low==left and high==right) return segtree[node];
    int mid=(low+high)/2;
    int x=query(low,mid,left,min(right,mid),2*node);
    int y=query(mid+1,high,max(mid+1,left),right,2*node+1);
    return max(x,y);
}

int main()
{
    int n;
    cin>>n;
    int i,maxx=0;
    for(i=1;i<=n;i++)
        cin>>a[i],maxx=max(maxx,a[i]);
    reverse(a+1,a+n+1);
    for(i=1;i<=n;i++)
    {
        ans[a[i]]=query(1,maxx,1,a[i]-1,1)+1;
        update(1,maxx,a[i],1,ans[a[i]]);
        //cout<<segtree[1]<<" "; 
        //    for(int j=1;j<=25;j++)
          //      cout<<segtree[j]<<" ";
            //line();
    }
    cout<<segtree[1]<<endl;
}