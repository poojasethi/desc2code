#include<bits/stdc++.h>

#define MAXN 100005
using namespace std;

string str;
int L,H,N;
int SA[MAXN],RANK[MAXN],gap,temp[MAXN],LCP[MAXN];

bool suffixComp(int i, int j)
{
    if(RANK[i]!=RANK[j])return RANK[i]<RANK[j];
    i+=gap;j+=gap;
    return (i<N&&j<N)?RANK[i]<RANK[j]:i>j;
}

void buildSuffixArray()
{
    N=str.length();
    for(int i=0;i<N;i++)SA[i]=i,RANK[i]=str[i];
    for(gap=1;;gap<<=1)
    {
        sort(SA,SA+N,suffixComp);
        for(int i=0;i<N-1;i++)temp[i+1]=temp[i]+suffixComp(SA[i],SA[i+1]);
        for(int i=0;i<N;i++)RANK[SA[i]]=temp[i];
        if(temp[N-1]==N-1)break;
    }
}

void buildLCP()
{
    for(int i=0, k=0;i<N;i++)
        if(RANK[i]!=N-1)
        {
            for(int j= SA[RANK[i]+1];str[i+k]==str[j+k];)++k;
            LCP[RANK[i]]=k;
            if(k)k--;
        }
}

int main()
{

    while(1)
    {
        scanf("%d %d",&L,&H);
        if(!L)break;
        cin>>str;

        buildSuffixArray();
        buildLCP();
//        for(int i=0;i<N;i++)cout<<SA[i]<<"  "<<LCP[i]<<endl;
        int imaxf=0,imaxl=N,tempMaxL=INT_MAX;
        for(int i=0;i<N-1;i++)
        {
            int k=0;tempMaxL=INT_MAX;
            for(;i<N-1&&LCP[i]>=L;i++)
            {
                tempMaxL=min(tempMaxL,LCP[i]);
                k++;
            }

                if(k&&(k+1>imaxf))
                {
                    imaxf=k+1;
                    imaxl=tempMaxL;
                }
                else if (k&&(k+1==imaxf))
                {
                    imaxl=max(imaxl,tempMaxL);
                }
        }
        if(!imaxf)printf("1 %d\n",H);
        else
        printf("%d %d\n",imaxf,min(imaxl,H));

    }

    return 0;
}
