/* Author :  Jay Pandya */

// Standard includes
#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<cstring>
#include<limits.h>
#include<string.h>

//Data Structures
#include<algorithm>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>

//Macros
#define all(c) c.begin(),c.end() //all element in container c

#define tr(container, it) \
   for(typeof(container.begin()) it = container.begin(); it != container.end(); it++) //to iterate in container

#define stringswap(swstingA, swstringB) \
   swstringA.swap(swstringB) //to swap string

#define present(container, element) (container.find(element) != container.end()) //to check whether a element is in a set or a map
#define cpresent(container, element) (find(all(container),element) != container.end()) //to check whether  a element is in container like vector

#define print(x) cout<<#x<<" is "<<x<<endl;//for printing
#define sz(a) int((a).size()) 
#define pb push_back 
#define vi vector<int>; 
#define vvi  vector<vi>; //2D string 
#define ii pair<int,int>; 
#define mp(typeA,typeB)  make_pair<typeA,typeB> //maing pair

//macros for limits

#define MAX 1123456
#define LLI long long int
#define ULLI unsigned long long int

using namespace std;

int L,H,N;
char s[MAX];
map<int,int> m;
int Q=1009;
int hash;

int get(int K)
{
   int res=1,q=1,i;
   m.clear();
   hash=0;
   for(int i=0;i<K;i++)
   { 
      hash=Q*hash+s[i]; q*=Q; 
   }
   m[hash]++;
   for(int i=0;i<N-K;i++)
   {
      hash=Q*hash+s[i+K]-q*s[i];
      res=max(res,++m[hash]);
   }
   return res;
}

int main()
{
   int ans,l,r,m;
   while(1)
   {
      scanf("%d%d ",&L,&H);
      if(L+H==0)
	 break;
      scanf("%s",s);
      for(N=0;s[N]!='\0';N++);
      l=L; r=H;
      ans=get(L);
      while(l!=r)
      {
	 m=(l+r+1)/2;
	 if(get(m)==ans) l=m;
	 else r=m-1;
      }
      printf("%d %d\n",ans,l);
   }
   return 0;
}


