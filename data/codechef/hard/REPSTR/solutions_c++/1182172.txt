#include <algorithm>
#include <cstdio>
#include <vector>
#include <cstring>
#include <map>

using namespace std;

#define MOD 10000007
#define BASE 26
#define MAX 100010
#define LL long long 
char type[MAX];
LL h=1;
map<int,int>dictionary;
void preprocess(int L)
{
	LL local_base=BASE;
	for(int i=0;i<MAX;i++) type[i]=' ';  
}
int is_found(int len)
{
	dictionary.clear();
	LL hash_value=0,pow=1;
	int max_occurence=1;
	for(int i=0;i<len;i++)
	{
		hash_value = hash_value * BASE + type[i] - 'a';
		pow *= BASE;
		if(pow >= MOD) pow %= MOD;
		if(hash_value >= MOD) hash_value %= MOD;
	}
	dictionary[hash_value]++;
	for(int i=len ; type[i] != ' ' ; i++)
	{
		hash_value = (hash_value * BASE + type[i]-'a')-(type[i-len]-'a')*pow;
		while(hash_value < 0) hash_value += MOD;
		if(hash_value > MOD) hash_value %= MOD;
		dictionary[hash_value]++;
		if(max_occurence < dictionary[hash_value]) max_occurence = dictionary[hash_value];
	}
	return max_occurence;
}
int main()
{
	int L,H,len,no_of_chars;
	while(scanf("%d%d",&L,&H))
	{
		if(L==0 && H==0) break;
		preprocess(L);
		scanf("%s",type);
		len=strlen(type);
		for(int i=0;type[i] != ' ';i++) no_of_chars++;
		if(no_of_chars < L) 
		{
			printf("0 0\n");
			continue;
		}
		if(no_of_chars < H) H=no_of_chars;
		int occurence=is_found(L);
		int low = L;
		int high = H;
		int answer = -1;
		while(low <= high)
		{
			int mid = (low + high) >> 1;
			if(is_found(mid) == occurence)
			{
				answer = mid;
				low = mid + 1;
			}		
			else high = mid - 1;
		}
		printf("%d %d\n",occurence,answer);
	}
	return 0;
}
