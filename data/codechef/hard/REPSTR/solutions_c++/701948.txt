#include <iostream>
#include <stdio.h>
#include <vector>
#include <complex>
#include <math.h>
#include <algorithm>
#include <queue>
#include <stack>
#include <string.h>
#include <map>
using namespace std;
const int MAX=100001;
char s[MAX];
int SA[MAX],wa[MAX], wb[MAX], we[MAX], wv[MAX];

void Sufix_Array(char *cad,int *SA,int N){
	N++;
	int i, j, p, *x = wa, *y = wb, range = 256;
	memset(we, 0, range * sizeof(int));
	for (i = 0; i < N; i++)        we[ x[i] = cad[i] ]++;
	for (i = 1; i < range; i++)    we[i] += we[ i-1 ];
	for (i = N - 1; i >= 0; i--)   SA[ --we[ x[i] ] ] = i;
	for (j = p = 1; p < N; j <<= 1, range = p){
		for (p = 0, i = N - j; i < N; y[p++] = i , i++) ;
		for (i = 0; i < N; i++)
			if (SA[i] >= j) y[p++] = SA[i] - j;
		for (i = 0; i < N; i++)     wv[i] = x[ y[i] ];
		memset(we, 0, range * sizeof(int));
		for (i = 0; i< N; i++)      we[ wv[i] ]++;
		for (i = 1; i < range; i++) we[i] += we[i-1];
		for (i = N-1; i >= 0; i--)  SA[--we[wv[i]]] = y[i];
		swap(x, y);	x[SA[0]] = 0;
		for (p = i = 1; i < N; i++)
			if(y[SA[i]] == y[SA[i-1]] && y[SA[i]+j] == y[SA[i-1]+j])
			   x[SA[i]] = p - 1; else x[SA[i]] = p++;
	}
	N--;
}
int rank[MAX], LCP [MAX];
void findLCP(char *cad, int *SA, int N){
	int i, j, k;
	for (i = 1; i <= N; i++)
		rank[ SA[i] ] = i;
	for (k = i = 0; i < N; LCP [rank[i++]] = k)
		for (k ? k-- : 0,j =SA[rank[i]-1]; cad[i +k] ==cad[j +k]; k++);
}
int DP[2][MAX];
int main(){
	int h, l, n, may, cont, lon;
	while(scanf("%d %d", &h, &l), h || l){
		memset(DP, 0, sizeof(DP));
		/*if(l<h)
			swap(l, h);*/
		scanf("%s", s);
		n=strlen(s);
		Sufix_Array(s, SA, n);
		findLCP(s, SA, n);
		DP[0][1]=1;
		DP[1][1]=n-SA[1];
		if(DP[1][1]>l)
			DP[1][1]=l;
		if(DP[1][1]<h){
			DP[0][1]=DP[1][1]=0;
		}
		cont=DP[0][1];
		may=DP[1][1];
		for(int i=2;i<=n;i++){
			lon=n-SA[i];
			if(lon>l)
				lon=l;
			DP[0][i]=1;
			DP[1][i]=lon;
			if(LCP[i]>=h){
				DP[0][i]=DP[0][i-1]+1;
				DP[1][i]=min(LCP[i], DP[1][i-1]);
				if(DP[1][i]>l)
					DP[1][i]=l;
				if((DP[0][i]==cont && DP[1][i]>may) || DP[0][i]>cont){
					may=DP[1][i];
					cont=DP[0][i];
				}
			}
		}
		printf("%d %d\n", cont, may);
	}
	return 0;
}