#include <iostream>
#include <cstring>
#include <string>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <cmath>
#include <queue>
using namespace std;
#define N 500005
#define ll long long
#define ull unsigned long long

int wa[N], wb[N], we[N], wv[N];
int P[N], Num[N];
int rank[N], lcp[N];
inline int cmp(int *r, int a, int b, int l){
     return r[a]==r[b] && r[a+l] == r[b+l];
}
void suffix(int n, int range){
	int i, j, p, *x=wa, *y=wb;
	memset(we, 0, range*sizeof(int));
	for (i=0; i<n; i++)
		we[x[i]=Num[i]]++;
	for (i=1; i<range; i++)
		we[i]+=we[i-1];
	for (i=n-1; i>=0; i--)
		P[--we[x[i]]]=i;
	for (j=p=1; p<n; j<<=1, range=p) {
		for (p=0, i=n-j; i<n; i++)
			y[p++]=i;
		for (i=0; i<n; i++)
			if (P[i]>=j) y[p++]=P[i]-j;
		for (i=0; i<n; i++)
			wv[i]=x[y[i]];
		memset(we, 0, range*sizeof(int));
		for (i=0; i<n; i++)
			we[wv[i]]++;
		for (i=1; i<range; i++)
		    we[i]+=we[i-1];
		for (i=n-1; i>=0; i--)
		    P[--we[wv[i]]]=y[i];
		swap(x, y);
		x[P[0]]=0;
		for (p=i=1; i<n; i++)
		    x[P[i]]=cmp(y, P[i],P[i-1], j) ? p-1 : p++;
	}
}
void LCP(int n){
    int i, j, k=0;
    for (i=1; i<=n; i++)
        rank[P[i]]=i;
    for (i=0; i<n; lcp[rank[i++]]=k)
        for (k ? k--:0, j=P[rank[i]-1]; Num[i+k]==Num[j+k]; k++);
}

char cad[N];

struct item{
	int h,p;
	item(int hh,int pp){
		h = hh;p = pp;
	}
};

int l,r,m;
int main(){
	while(1){
		scanf("%d%d",&l,&r);

		if(l == 0 && r == 0)
			break;
		scanf("%s",cad);
		m = strlen(cad);
		for(int i = 0;i<m;i++)
			Num[i] = cad[i];
		Num[m] = 0;
		suffix(m  + 1,150);
		LCP(m);
		lcp[m + 1] = -1;
		int cant = 1;
		int len = r;
		stack<item> S;
		for(int i = 1;i<=m + 1;i++){
			item ne = item( lcp[i],i);
			while(!S.empty()){
				item top = S.top();
				if(top.h < ne.h)
					break;
				ne.p = top.p;
				if(top.h != ne.h){
					if(top.h >= l){
						int cc = i - ne.p + 1;
						int auxl = min(r,top.h);
						if(cc > cant){
							cant = cc;
							len = auxl;
						}
						else if(cc == cant)
							len = max(len,auxl);
					}
				}
				S.pop();
			}
			S.push(ne);
		}
		printf("%d %d\n",cant,len);
	}
	return 0;
}


