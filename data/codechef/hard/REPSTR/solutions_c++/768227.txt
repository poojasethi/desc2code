#include<stdio.h>
#include<malloc.h>
#include<cmath>
#include<string>
#include<iostream>
#include<stdlib.h>
#include<algorithm>
#include<string.h>
#include<map>
using namespace std;
int rem=10000007;
char str[200001];
int mod[100003];
int len;
int store[10000007];
int index1[200000];
int ctr;
int hashval[200001];
void hash(void){
	long long int sum=0;
	int idx=0;
	while(idx!=len){
		sum*=256;
		if(sum>=rem)
			sum=sum%rem;
		sum+=(str[idx]);
		if(sum>=rem)
			sum=sum%rem;
		idx++;
		hashval[idx]=sum;
	}
}
void print(int i,int j){
int k;
for(k=i;k<=j;k++)
	cout<<str[k];
}
int main(){
	int L,H,i,j,k,low,high,mid;
	long long int tmp;
	mod[0]=1;
	long long int value,modval,prev;
	int threshold;
	int current;
	int answer=-1;
	for(i=1;i<=100001;i++){
		tmp=(long long int)mod[i-1]*256LL;
		if(tmp>=rem)
			tmp%=rem;
	mod[i]=tmp;
	}
	while(true){
	scanf("%d%d",&L,&H);
	scanf(" %s",str);
	if(L==0&&H==0)
			break;
	len=strlen(str);
	hash();
	answer=0;
	threshold=0;
	current=0;
	prev=0;
	ctr=0;	
	/*for(i=0;i<L;i++){
	prev=prev+(str[i]-97)*(long long int)mod[L-i-1];
	if(prev>=rem)
		prev%=rem;
	}*/
	prev=(long long int)hashval[L];
	store[prev]++;
	threshold=max(threshold,store[prev]);
	index1[ctr++]=prev;
	//	
	//modval=mod[L];
/*	cout<<"string = ";
	print(0,L-1);
	cout<<" value = "<<value<<endl;*/
	for(i=L;i<=len-1;i++)
	{
		/*prev=(prev*29)+(str[i]-97);*/
		prev=prev*256+str[i];
		if(prev>=rem)
			prev%=rem;
		prev=prev-((str[i-L])*(long long int)mod[L])%rem;
		//prev=(prev+rem)%rem;
		if(prev<0)
			prev+=rem;
		store[prev]++;
		threshold=max(store[prev],threshold);
/*	cout<<"string = ";
	print(i-L+1,i);
	cout<<" value = "<<prev<<endl;*/
		index1[ctr++]=prev;
	}	
	answer=L;
	for(i=0;i<ctr;i++)
		store[index1[i]]=0;
	low=L;
	high=H;
	while(low<=high){
	ctr=0;
	mid=(low+high)/2;
	current=0;
	prev=0;
	/*for(i=0;i<mid;i++){
	prev=prev+(str[i]-97)*(long long int)mod[mid-i-1];
	if(prev>=(long long int)rem)
		prev%=rem;
	}*/
	prev=hashval[mid];
	store[prev]++;
	current=max(store[prev],current);
	index1[ctr++]=prev;
	for(i=mid;i<=len-1;i++){
		prev=prev*256+(str[i]);
		if(prev>=rem)
			prev%=rem;
		prev=prev-((str[i-mid])*(long long int)mod[mid])%rem;
	if(prev<0)
		prev+=rem;
		store[prev]++;
	index1[ctr++]=prev;
	current=max(store[prev],current);
	}
	if(current>=threshold){
	answer=max(answer,mid);
	low=mid+1;
	}
	else 
		high=mid-1;
	for(i=0;i<ctr;i++)
		store[index1[i]]=0;
	}
	printf("%d %d\n",threshold,answer);
	}
	return 0;
}
