#include<bits/stdc++.h>
using namespace std;
 
template <class T> string toStr(const T &x){ stringstream s; s << x; return s.str(); }
template <class T> int toInt(const T &x){ stringstream s; s << x; int r; s >> r; return r; }
 
#define For(i, a, b) for (int i=(a); i<(b); ++i)
#define foreach(x, v) for (typeof (v).begin() x = (v).begin(); x != (v).end(); ++x)
#define D(x) cout << #x " = " << (x) << endl
 
const int N = 200005;

int str[N]; 
int rank[N], pos[N];
int cnt[N], next[N]; 
bool bh[N], b2h[N];
 
bool smaller_first_char(int a, int b){
  return str[a] < str[b];
}
 
inline void SuffixSort(int n){
  
  for (int i=0; i<n; ++i){
    pos[i] = i;
  }
  sort(pos, pos + n, smaller_first_char);
  
 
  for (int i=0; i<n; ++i){
    bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
    b2h[i] = false;
  }
 
  for (int h = 1; h < n; h <<= 1){
   
    int buckets = 0;
    for (int i=0, j; i < n; i = j){
      j = i + 1;
      while (j < n && !bh[j]) j++;
      next[i] = j;
      buckets++;
    }
    if (buckets == n) break; 
    
 
    for (int i = 0; i < n; i = next[i]){
      cnt[i] = 0;
      for (int j = i; j < next[i]; ++j){
        rank[pos[j]] = i;
      }
    }
 
    cnt[rank[n - h]]++;
    b2h[rank[n - h]] = true;
    for (int i = 0; i < n; i = next[i]){
      for (int j = i; j < next[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0){
          int head = rank[s];
          rank[s] = head + cnt[head]++;
          b2h[rank[s]] = true;
        }
      }
      for (int j = i; j < next[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0 && b2h[rank[s]]){
          for (int k = rank[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
        }
      }
    }
    for (int i=0; i<n; ++i){
      pos[rank[i]] = i;
      bh[i] |= b2h[i];
    }
  }
  for (int i=0; i<n; ++i){
    rank[pos[i]] = i;
  }
}

int height[N];

inline void getHeight(int n){
  for (int i=0; i<n; ++i) rank[pos[i]] = i;
  height[0] = 0;
  for (int i=0, h=0; i<n; ++i){
    if (rank[i] > 0){
      int j = pos[rank[i]-1];
      while (i + h < n && j + h < n && str[i+h] == str[j+h]) h++;
      height[rank[i]] = h;
      if (h > 0) h--;
    }
  }
}
 
 
string s;
int L,R;
inline void solve(){
  int n = s.size();
  for (int i=0; i<n; ++i) str[i] = s[i];
  SuffixSort(n);
  getHeight(n);
  long long ans1 = -1,ans2=-1;
  int i=0;
  while(i<n)
  {
	int cnt=0;int temp=10000001;
	while(height[i]>=L && i<n){
		if(height[i]<temp)
			temp=height[i];
		cnt++;
		i++;
	}
	if(cnt>ans1){
		ans1=cnt;
		ans2=temp;
	}
	else if(cnt==ans1 && cnt!=0){
		if(temp>ans2)
			ans2=temp;
	}
	i++;
  }
  if(ans2>R)
  ans2=R;
  printf("%lld %lld\n",ans1+1,ans2);
}
 
 
int main(){
  
    while(1)
    {
    	scanf("%d %d",&L,&R);
    	if(L==0&&R==0)
    	break;
		cin>>s;
		solve();	
	}

  return 0;
}
