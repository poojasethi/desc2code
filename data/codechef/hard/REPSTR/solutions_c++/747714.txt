#include<limits.h>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
#include <queue>

using namespace std;


#define rep(i,a,b) for(typeof(a) i=(a);i<(b);i++)
#define ll long long int
#define ii pair<int,int>
#define Clear(x,val) memset(x,val,sizeof(x))
#define SZ(v) (v).size()
#define MAXN 100009
#define MAXLG 25

char A[MAXN];
int P[MAXLG][MAXN] , n , stp , cnt;

typedef struct  entry {
	int nr[2];int p;
}entry;
entry L[MAXN*2];

int lcp( int x , int y ) {
	int k , ret = 0;
	if( x==y ) return n-x;
	for( k = stp-1; k>=0 && x<n && y<n; k-- ) {
		if(P[k][x] == P[k][y])
			ret += (1<<k) , x +=(1<<k) , y+=(1<<k); 
	}
	return ret;
}

int RANK[2*MAXN]; int pos[2*MAXN]; int height[2*MAXN];int cnnt[MAXN];entry aux[MAXN];
int main()
{

	int  low , High;vector<int> v;int count[MAXN*2];
	while( (scanf("%d%d",&low,&High)==2) && !((low==0)&&(High==0) ) ) {
	
		scanf("%s",&A[0]);
		n = strlen(A);
		rep( i , 0 , n ) P[0][i] = A[i]-'a';

		
		for( stp  = 1 , cnt = 1; (cnt>>1)<n; stp++,(cnt<<=1) ) {
		
			rep( i , 0 , n ) {		
				L[i].nr[0] = P[stp-1][i];
				L[i].nr[1] = (i+cnt) < n ?P[stp-1][i+cnt] : -1;
				L[i].p = i;
			}			
			
			Clear(cnnt,0);
			for( int i = 0; i < n ; i++ ) {cnnt[L[i].nr[1]+2]++;}
			for( int i = 1; i <= n; i++ ) cnnt[i] += cnnt[i-1];
			for( int i = 0; i < n; i++ ) aux[cnnt[L[i].nr[1]+1]++] = L[i];
			Clear(cnnt,0);
			for( int i = 0; i < n; i++   ) { cnnt[aux[i].nr[0]+2]++;}
			for( int i = 1; i <= n; i++   ) { cnnt[i] += cnnt[i-1];}
			for( int i = 0; i < n; i++   ) L[cnnt[aux[i].nr[0]+1]++] = aux[i];	

			
			rep( i , 0 , n ) {
				P[stp][L[i].p] = i > 0 && L[i].nr[0] == L[i - 1].nr[0] && L[i].nr[1] == L[i - 1].nr[1] ? P[stp][L[i - 1].p] : i;
			}	
		}
	
	
		
		for( int i = 0; i < n ; i++ ) pos[P[stp-1][i]] = i;
		for( int i = 0; i < n ; i++ ) RANK[i] = P[stp-1][i];
			
  		height[0] = 0;
  		for (int i=0, h=0; i<n; ++i)
  		{
	  		if (RANK[i] > 0)
			{
				int j = pos[RANK[i]-1];
				while (i + h < n && j + h < n && A[i+h] == A[j+h]) h++;
				height[RANK[i]] = h;
				if (h > 0) h--;
			}
		}		

		int maxc = -1 , maxl = 0 , curc = 0 , curl = INT_MAX;if( n-pos[0] >= low ) { curc = 1;curl=min( High , n-pos[0] ); }
		for( int i = 1; i < n; i++ ) {
 
			if( height[i] >= low ) {
				curl = min( curl , height[i] );
				curc++;
			}
			else {
			
				if( maxc < curc || ( maxc==curc && maxl<curl) ) {
					maxc = curc;
					maxl = curl;
				}
				curc = 0;curl = INT_MAX;
				if( n-pos[i] >= low ) { curc = 1;curl=min( High , n-pos[i] ); }
			}
		}
		if( curc > maxc || ( curc==maxc && maxl<curl ))  { maxl = curl , maxc = curc ; }
		printf("%d %d\n" , maxc , maxl );		

	}
	return 0;
}