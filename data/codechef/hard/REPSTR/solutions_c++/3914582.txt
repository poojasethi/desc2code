/*
Suffix array O(n lg^2 n)
LCP table O(n)
*/
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

#define REP(i, n) for (int i = 0; i < (int)(n); ++i)

namespace SuffixArray
{
const int MAXN = 100007;
char * S;
int N, gap;
int sa[MAXN], pos[MAXN], tmp[MAXN], lcp[MAXN];

bool sufCmp(int i, int j)
{
    if (pos[i] != pos[j])
        return pos[i] < pos[j];
    i += gap;
    j += gap;
    return (i < N && j < N) ? pos[i] < pos[j] : i > j;
}

void buildSA()
{
    N = strlen(S);
    REP(i, N) sa[i] = i, pos[i] = S[i];
    for (gap = 1;; gap *= 2)
    {
        sort(sa, sa + N, sufCmp);
        REP(i, N - 1) tmp[i + 1] = tmp[i] + sufCmp(sa[i], sa[i + 1]);
        REP(i, N) pos[sa[i]] = tmp[i];
        if (tmp[N - 1] == N - 1) break;
    }
}

void buildLCP()
{
    for (int i = 0, k = 0; i < N; ++i) if (pos[i] != N - 1)
        {
            for (int j = sa[pos[i] + 1]; S[i + k] == S[j + k];)
                ++k;
            lcp[pos[i]] = k;
            if (k)--k;
        }
}
} // end namespace SuffixArray


using namespace SuffixArray;



int main()
{

    //string str;




    char* str = new char[100007];
    int L,H;
    cin>>L>>H;

    while( L !=0 || H != 0)
    {
        int rescnt = -10000; int reslen = -10000;

        gets(str);
        S = str;

        scanf("%s", str);
       // cout<<"String is: "<<str<<endl;
        buildSA();
        buildLCP();
        int cnt = 1; int len = 1000000;
        for(int i=0; i<N-1; i++)
        {
            int val = lcp[i];
            len = min(len,val);
            if(len >= L && len <= H )
            {
                cnt++;
                if(cnt > rescnt)
                {
                    reslen = len;
                    rescnt = cnt;
                }
                else if( cnt == rescnt)
                {
                    if(len > reslen)
                        reslen = len;
                }

            }
            else
            {
                cnt=1;
                len = 10000000;
            }

        }


        if(rescnt > 0)
            printf("%d %d\n",rescnt, reslen);
        else
            printf("1 %d\n",H);
        //exit(0);
    /*
        for(int i=0; i<N-1; i++)
        {
            int minv = -100;
            int j=i;
            int cnt =1; int len=10000000;
            for(int j=i; j<N-1; j++)
            {
                int val = lcp[j];

                if(val == 0)
                    break;
                cnt++;
                len = min(val, len);


                //cout<<"N is: "<<N<<endl;
                //cout<<"i, j is "<<i<<" "<<j<<" lcp is: "<<lcp[j]<<endl;
                //cout<<"len is: "<<len<<endl;
                if(len >= L && len <= H)
                {
                    //pair<int, int> p = make_pair(cnt, len);
                    //res.push_back(p);

                    if(cnt > rescnt)
                    {
                        rescnt = cnt;
                        reslen = len;
                    }
                    else if( cnt == rescnt )
                    {
                        if( len > reslen)
                        {
                            reslen = len;
                        }

                    }
                    //cout<<"rescnt is: "<<rescnt<<endl;

                }
            }
        }


        //sort(res.begin(), res.end(), cmpf);

        if(rescnt > 0)
            printf("%d %d\n",rescnt, reslen);
        else
            printf("1 %d\n",H);

*/
        scanf("%d %d",&L,&H);

    }



}





