//score 100
#include<bits/stdc++.h>
using namespace std;
#define N 100100
#define lgn 17
char txt[N];
int n;
int suff_ar[N],rank[N];
int cnt[N],next[N];
bool bh[N],b2h[N];
int height[N];
bool small_first_char(int a,int b)
{
	return txt[a]<txt[b];
}
void suffix_sort()
{
	for(int i=0;i<n;++i)
		suff_ar[i]=i;
	sort(suff_ar,suff_ar+n,small_first_char);

	for(int i=0;i<n;++i)
	{
		bh[i]= (i==0||txt[suff_ar[i]]!=txt[suff_ar[i-1]]);
		b2h[i]=false;
	}
	int q;
	for(int h=1;h<n;h<<=1)
	{
		q=0;
		int i,b=0;
		for(i=0;i<n;++i)
		{
			b2h[i]=false;
			if(bh[i])
			{
				++b;
				next[q]=i;
				q=i;
				cnt[i]=0;
			}
			rank[suff_ar[i]]=q;
		}
		next[q]=i;
		if(b==n)
			break;

		++cnt[rank[n-h]];
		b2h[rank[n-h]]=true;
		for(int i=0;i<n;i=next[i])
		{
			for (int j=i;j<next[i];++j)
			{
				int s=suff_ar[j]-h;
				if(s>=0)
				{
					rank[s]=rank[s]+cnt[rank[s]]++;
					b2h[rank[s]]=true;
				}
			}
			for (int j=i;j<next[i];++j)
			{
				int s=suff_ar[j]-h;
				if(s>=0&&b2h[rank[s]])
				{
					for(int k=rank[s]+1;k<n&&b2h[k]&&(!bh[k]);++k)
						b2h[k]=false;
				}
			}
		}
		for(int i=0;i<n;++i)
		{
			suff_ar[rank[i]]=i;
			bh[i] |= b2h[i];
		}
	}
	for(int i=0;i<n;++i)
			rank[suff_ar[i]]=i;
	int h=0;
	height[0]=0;
	for(int i=0;i<n;++i)
	{
		if(rank[i])
		{
			int k=suff_ar[rank[i]-1];
			while(i+h<n&&k+h<n&&txt[i+h]==txt[k+h])
				++h;
			height[rank[i]]=h;
			h-=h>0;
		}
	}
}

int M[lgn][N];
void preprocess()
{
	for(int i=0;i<n;++i)
		M[0][i]=height[i];
	for(int j=1,k=2;k<=n;++j,k<<=1)
	{
		for(int i=0;i<(n-k+1);++i)
		{
			M[j][i]=min(M[j-1][i],M[j-1][i+(k>>1)]);
		}
	}
}
inline int RMQ_lcp(int x,int y)
{
	if(x==y)
	{
		return n- suff_ar[x];
	}
	if(x>y)
	{
		int t=x;
		x=y;
		y=t;
	}
	++x;
	int len=0;
	int dis=y-x+1;
	while(dis)
	{
		++len;
		dis>>=1;
	}
	--len;
	return min( M[len][x], M[len][y-(1<<len)+1]);
}
int main()
{
	int L,H;
	while(scanf("%d%d",&L,&H)!=EOF&&(L!=0||H!=0))
	{
		scanf(" %s",txt);
		n=strlen(txt);
		suffix_sort();
		preprocess();
		int l=0,r=1;
		int rep=0,len=0;
		while(l<n&&r<=n)
		{
			
			if(r!=n&&height[r]>=L)
			{
				++r;
			}
			else
			{
				if(r-l>rep)
				{
					rep=r-l;
					len=min(RMQ_lcp(l,r-1),H);
				}
				else if(r-l==rep)
				{
					len=max(len,min(H,RMQ_lcp(l,r-1)));
				}

				if(l==r-1)
				{
					++r;
				}
				++l;
			}
		}
		printf("%d %d\n",rep,len);
	}
	return 0;
}