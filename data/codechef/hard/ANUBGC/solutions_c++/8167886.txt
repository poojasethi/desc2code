#include<stdio.h>
 
#define MAXDIGIT 18
 
 
long long Pow9[MAXDIGIT+1], Pow10[MAXDIGIT+1], NonZero[MAXDIGIT];
 
 
void Init(void) {
 
	int i;
 
	for(Pow9[0] = Pow10[0] = 1, i = 1; i<=MAXDIGIT; i++) Pow9[i] = 9*Pow9[i-1], Pow10[i] = 10*Pow10[i-1];
 
	for(i = 1; i<MAXDIGIT; i++) NonZero[i] = 10*(Pow10[i]-Pow9[i]);
}
 
 
int DigitIn(int digitmask, int lim) {
 
	int i, val;
 
	for(val = i = 0; i<lim; i++) if(digitmask & 1<<i) val++;
 
	return val;
} 
 
 
long long GCD(long long a,  long long b) {
 
	long long temp;
 
	while((temp = a%b)) a = b, b = temp;
 
	return b;
}
 
 
int main(void) {
 
	int T, i, digit, digitmask, digitnum, digit_in;
	long long N, sum, gcd;
 
	Init();
 
	for(scanf("%d", &T); T>0; T--) {
 
		scanf("%lld", &N);
		for(i = 0; Pow10[i+1]<=N; i++);
 
		sum = -(Pow9[i+1]-1)/8;
 
		for(digitmask = digitnum = 0; 0<i; i--) {
			digit = (int)(N%Pow10[i+1]/Pow10[i]);
			digit_in = DigitIn(digitmask, digit);
			sum += digit*NonZero[i] + (digit*(digitnum+1) - digit_in)*Pow9[i];
			if(!(digitmask & 1<<digit)) digitmask |= 1<<digit, digitnum++;
		}
 
		digit = (int)(N%10);
		digit_in = DigitIn(digitmask, digit+1);
		sum += (digitnum+1)*(digit+1) - digit_in;
 
		gcd = GCD(10*N, sum);
		printf("%lld/%lld\n", sum/gcd, 10*N/gcd);
	}
 
	return 0;
} 