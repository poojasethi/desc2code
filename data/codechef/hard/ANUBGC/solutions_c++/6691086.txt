 //Naveen Sangtani
#include<bits/stdc++.h>
using namespace std;

typedef long long int          LL;
typedef unsigned long long     ULL;
typedef long double            LD;


#define pb                   push_back
#define ppb                  pop_back
#define mp                   make_pair
#define ff                   first
#define ss                   second


#define PI                   acos(-1.0)
#define e                    exp(1.0)
#define EPS                  1e-9


#define count_1(n)           __builtin_popcountll(n)


#define fr(i,a,b)            for(int i=a;i<=b;++i)
#define rev(i,b,a)           for(int i=b;i>=a;--i)
#define foreach(v,c)         for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)
#define CLR(A)               memset(A,false,sizeof(A))
#define FILL(A,n,val)        for(int i=0;i<n;++i) A[i]=val
#define all(x)               x.begin(),x.end()
#define TT()                 int tc;cin>>tc;while(tc--)


#define dbg(vari)            cout<<#vari<<" = "<<(vari)<<endl;
#define dbgA(A,n)            cout<<endl;fr(i,0,n-1) cout<<i<<" -- > "<<A[i]<<endl;
#define dbgV(V)              cout<<endl;fr(i,0,V.size()-1){cout<<i<<" --> "<<V[i].ff<<" "<<V[i].ss<<endl;}
#define dbgG(G,n)            cout<<endl;fr(i,1,n){cout<<i<<" --> ";fr(j,0,(G[i].size())-1) cout<<"("<<G[i][j].ff<<" , "<<G[i][j].ss<<")"<<"  ";cout<<endl;}
#define ns                  cout<<endl<<" ----- entered -----"<<endl;
#define SP                    system("pause");

#define maX(a,b)                ((a)>(b)?(a):(b))
#define miN(a,b)                ((a)<(b)?(a):(b))
#define abS(x)                  ((x)<0?-(x):(x))


typedef vector<int>           VL;



LL gcd(LL x, LL y) {return y == 0 ? x : gcd(y, x % y);}
bool isPalin(string x) {LL len = x.length();fr(i,0,(len/2)-1) {if (x[i] != x[len - 1 - i])return false;}return true;}
string tolowerStr(string x){string ret = "";fr(i,0,(LL)x.length()-1) {ret.pb(tolower(x[i]));}return ret;}
string toupperStr(string x) {string ret = "";fr(i,0,(LL)x.length()-1) {ret.pb(toupper(x[i]));}return ret;}
bool double_equals(double a, double b, double epsilon = 0.1){return std::abs(a - b) < epsilon;}




LL dp[20][2][2][2];

int dig,lim;

VL v;

LL occur[10];

LL solve(int idx , int tight , int started , int found)
{
	 
	if(idx == lim)
	{
		if(started)
		return found;
		else
		return 0;
	}
	
	
	LL &res = dp[idx][tight][started][found];
	int n_found , n_start ;
	if(res != -1)   //use of memoized part
	return res;
	
	res = 0;
	
	if(tight == 1)
	{
		fr(i,0,v[idx])
		{
			n_start = started | (i!=0) ; 
			n_found = ( found | (i == dig) ) & n_start ;
			
			if(i == v[idx])
			{
				res += solve(idx + 1, 1 , n_start , n_found);
			}
			else
			{
				res += solve(idx + 1, 0 , n_start , n_found);
			}
		}
		
	}
	
	else if (tight == 0)
	{
		fr(i,0,9)
		{
			n_start = started | (i!=0) ; 
			n_found = ( found | (i == dig) ) & n_start ;
			
			res += solve(idx + 1, 0 , n_start , n_found);
		}
	}
	
	return res;
	
}
void convert(LL m)
{
	v.clear();
	while( m != 0)
	{
		int g = m % 10;
		v.pb(g);
		m = m / 10;
	}
	reverse(all(v));
	lim = (int)v.size();
}


int main()
{
    //freopen("inp.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    ios_base::sync_with_stdio(false);
    
	
	LL n,num,den,g;
	
	TT()
	{
		memset(occur,0,sizeof occur);
		cin>>n;
		
		convert(n);
		
		fr(i,0,9)
		{
			memset(dp,-1,sizeof dp);
			dig = i;
			
			occur[i] = solve(0,1,0,0);
			
		}
		
		num = 0;
		
		fr(i,0,9)
		num += occur[i];
		
		den = 10*n;
		
		g = gcd(num,den);
		
		
		LL num_f , den_f;
		num_f = num/g;
		den_f = den/g;
		cout<<num_f<<"/"<<den_f<<endl;
		
		
	}
    
    
   
return 0;
}
