/* Author -> Meghraj Sharma */
/* Lang -> C++ */

#include<bits/stdc++.h>
using namespace std;
#define gc getchar_unlocked
#define pc putchar_unlocked
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define MAXN 100005
#define MOD 1000000007
#define mod MOD
#define ll long long
#define pii pair< ll,ll >
using namespace std;

inline void inp(ll *n )
{
*n=0; ll ch=gc(); int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=gc();}
while( ch >= '0' && ch <= '9' ) *n = (*n<<3)+(*n<<1) + ch-'0', ch=gc();
*n=*n*sign;
}

inline void fastp(ll a)
{
    register char c; char snum[20]; int i=0;
    do { snum[i++]=a%10+48; a=a/10; }while(a!=0);
    i=i-1; while(i>=0) pc(snum[i--]);
    pc('\n');
}

ll ans[10];
ll precount[20];
ll power[19];
ll nines[19];
ll gcd(ll u,ll v){return v?gcd(v,u%v):u;}

ll solve(ll n,ll check)
{
    ll x[20],i=0;
    while(n)
    {
        x[i++]=n%10;
        n/=10;
    }
    ll res=0;
    if(!check)  // Count no numbers which contain 0
    {
        res-=(nines[i]-1)/8;
        for(ll j=i-1;j>=0;j--)
        {
            if(x[j]) res+=x[j]*(power[j]-nines[j]) + nines[j];
            else
            {
                while(j--) res+=x[j]*power[j];
                res++;
                break;
            }
        }
        return res;
    }
    while(i--) // Count the numbers which contain 1-9
    {
        if(check<x[i]) res+=(x[i]-1)*precount[i] + power[i];
        else res+=x[i]*precount[i];
        if(x[i]==check)
        {
            while(i--) res+=x[i]*power[i];
            res++;
            break;
        }
    }
  return res;
}
int main()
{
    ll t,n,i,j,l,r,m,k;

    //freopen("x.txt","r",stdin);
    precount[0]=0; precount[1]=1;
    power[0]=1; power[1]=10;
    nines[0]=1; nines[1]=9;

    for(i=2;i<19;i++)
    {
        power[i]=10*power[i-1];
        nines[i]=9*nines[i-1];
        precount[i]=precount[i-1]*9 + power[i-1];
    }

    inp(&t);
    while(t--)
    {
        inp(&n); l=0;
        memset(ans,0,sizeof(ans));
        for(i=0;i<=9;i++)
        {
            ans[i]=solve(n,i);
            l+=ans[i];
        }
        r=10*n;
        m=gcd(l,r);
        l/=m;
        r/=m;
        printf("%lld/%lld\n",l,r);
    }
  return 0;
}
