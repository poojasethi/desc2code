#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <string.h>

using namespace std;

long long n,m,dp[18][2][2][2];
int t;
int global_digit;

vector<int> v;

long long go(int position, bool less_than, bool started, bool found)
{
	if(position == v.size()) return found;
	long long &ret = dp[position][less_than][started][found];
	if(ret != -1) return ret;
	ret = 0;
	bool new_less_than, new_started, new_found;
	for(int digit = 0; digit <= 9; digit++)
	{
		if(!less_than and digit > v[position]) break;
		new_started = started or digit;
		new_less_than = less_than or digit < v[position];
		new_found = new_started and (found or digit == global_digit);
		ret += go(position+1, new_less_than, new_started, new_found);
	}
	return ret;
}

int main()
{
	#ifndef ONLINE_JUDGE
		freopen("I.in","r",stdin);
	#endif
	cin>>t;
	while(t--)
	{
		scanf("%lld",&n);m = n;
		v.clear();
		while(m)
		{
			v.push_back(m%10);
			m/=10;
		}
		reverse(v.begin(),v.end());
		long long num = 0, den = 0;
		for(int dig = 0; dig <= 9; dig++)
		{
			global_digit = dig;
			memset(dp,-1,sizeof(dp));
			num += go(0,0,0,0);
		}
		den = 10*n;
		long long x = num, y = den;
		while(x and y)
		{
			if(x > y) x = x % y;
			else y = y % x;
		}
		num /= x+y;
		den /= x+y;
		printf("%lld/%lld\n",num,den);
	}
	return 0;
}