#include <stdio.h>
#include <algorithm>

using namespace std;

typedef long long ll;
int T;
const int MAXD = 22;
ll dp[10][MAXD][2][2][2];
ll pow10[MAXD];
ll N, n;
ll operations = 0;

int digit(ll a, int k) {
    return a%pow10[k]/pow10[k - 1];
}

ll gcd(ll a, ll b) {
    while(a && b)
        if (a > b) a %= b;
        else b %= a;
    return a + b;
}

ll calc(int i, int d, bool lo, bool contains_d, bool zeros) {
    if (i == n + 1) {
        return dp[d][i][lo][contains_d][zeros] = (contains_d && zeros);
    }

    if (dp[d][i][lo][contains_d][zeros] != -1) {
        return dp[d][i][lo][contains_d][zeros];
    }

    ll res = 0;
    for (int m = 0;m <= (lo ? 9 : digit(N, n - i + 1));m++) {
        res += calc(i + 1, d, lo || m < digit(N, n - i + 1), (contains_d || (m == d && d != 0) || (m == d && d == 0 && zeros)), zeros || m != 0);
    }

    return dp[d][i][lo][contains_d][zeros] = res;
}

int main() {
    scanf("%d", &T);

    pow10[0] = 1;
    for (int i = 1;i < MAXD;i++)
        pow10[i] = pow10[i - 1] * 10ll;

    while(T--) {
        scanf("%lld", &N);

        ll m = N;
        n = 0;
        while (m > 0) {
            m /= 10;
            n++;
        }

        ll p = 0, q = 10 * N;

        fill( (ll*)dp, (ll*)dp + 80 * MAXD, -1);

        for (int i = 0;i < 10;i++) {
            p += calc(1, i, false, false, false);
        }

        ll g = gcd(p, q);
        p /= g;
        q /= g;

        printf("%lld/%lld\n", p, q);
    }
    return 0;
}
