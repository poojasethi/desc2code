#include<stdio.h>
#include<string.h>


#define MAXINDEX 17
#define DIGITS 10


long long ResNonStarted[MAXINDEX+1], ResStarted[DIGITS+1][MAXINDEX+1];


void Init(void) {

	memset(ResStarted, 0xFF, sizeof ResStarted);
	memset(ResNonStarted, 0xFF, sizeof ResNonStarted);
}


long long GetDigits(int digits[], int &maxindex) {

	int i = 0, c;
	long long res = 0;

	while((c = getchar())<'0' || c>'9');

	do digits[i++] = c-'0', res = res*10 + c-'0';
	while((c = getchar())>='0' && c<='9'); 

	maxindex = i-1;

	return res;
}


long long GCD(long long a, long long b) {

	long long temp;

	while((temp = a%b)) a = b, b = temp;

	return b;
}


int DiffDigits(int digits[], int startindex, int maxindex) {

	int i, mask = 0, count = 0;

	for(i = startindex; i<=maxindex; i++) if((mask&(1<<digits[i]))==0) mask |= 1<<digits[i], count++;

	return count;
}


long long Calc(int limdigits[], int digits[], int startindex, int maxindex, int index, bool foolint) {

	if(maxindex<index) return startindex==-1 ? 0 : DiffDigits(digits, startindex, maxindex);

	int d, maxd, newstartindex, diffdigits;
	long long res;
	bool newfullint;

	maxd = foolint ? 9 : limdigits[index];
	
	for(res = d = 0; d<=maxd; d++) {
		digits[index] = d;
		newstartindex = startindex==-1 && d ? index : startindex;
		newfullint = foolint || d<maxd;

		if(newstartindex==-1) {
			if(ResNonStarted[maxindex-index]<0)
				ResNonStarted[maxindex-index] = Calc(limdigits, digits, -1, maxindex, index+1, true);
			res += ResNonStarted[maxindex-index];
		}

		else if(newfullint) {
			diffdigits = DiffDigits(digits, newstartindex, index);
			if(ResStarted[diffdigits][maxindex-index]<0)
				ResStarted[diffdigits][maxindex-index] = Calc(limdigits, digits, newstartindex, maxindex, index+1, true);
			res += ResStarted[diffdigits][maxindex-index];
		}
		else res += Calc(limdigits, digits, newstartindex, maxindex, index+1, false);
	}
	return res;
}


int main(void) {

	int T, maxindex, digits[MAXINDEX+1], limdigits[MAXINDEX+1];
	long long res, gcd, N;

	Init();

	for(scanf("%d", &T); T>0; T--) {
		N = GetDigits(limdigits, maxindex);
		res = Calc(limdigits, digits, -1, maxindex, 0, false);

		gcd = GCD(10*N, res);
		printf("%lld/%lld\n", res/gcd, 10*N/gcd);
	}

	return 0;
}