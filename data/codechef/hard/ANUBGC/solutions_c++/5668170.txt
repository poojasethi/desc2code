#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define fr first
#define se second

/* Relevant code begins here */

#define MOD 1000000007

int n;
int arr[25];
ill dp[20][5][5][5];

ill GCD (ill a, ill b) 
{
	if (b == 0) return a;
	return GCD(b, a % b);
}

ill fnc(int idx, int lo, int flag, int started, int dig)
{
	if (dp[idx][lo][flag][started] != -1) return dp[idx][lo][flag][started];
	if (idx == n+1) {
		return flag && started;
	}
	
	int i;
	ill ret = 0LL;
	F(i, 0, (!lo ? 10 : (arr[idx] + 1))) {	
		int nstarted = 0;
		if (started) nstarted = 1;
		if (!started && i) nstarted = 1;
		ret += fnc(idx + 1, lo && (i == arr[idx]), flag || (nstarted && i == dig), nstarted, dig);
	}
	return dp[idx][lo][flag][started] = ret;
}

int main()
{
	int t, i;
	ill p, q, g, m;
	
	S(t);
	while (t--) {
		Sl(m);
		n = 0;
		g = m;
		while (m != 0) {
			n++;
			m /= 10;
		}
		m = g;
		i = 0;
		while (m != 0) {
			arr[n-i] = m%10;
			i++;
			m /= 10;
		}
		arr[0] = 0;
		m = g;
		q = 10LL * m;
		p = 0LL;
		F(i, 0, 10) {
			M(dp, -1);
			p += fnc(0, 1, 0, 0, i);
			
		}
		g = GCD(p, q);
		p /= g;
		q /= g;
		printf("%lld/%lld\n", p, q);
	}
	
	return 0;
}