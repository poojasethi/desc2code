#include<bits/stdc++.h>
#include <algorithm>

using namespace std;

#define ll long long int
#define ull unsigned long long int
#define maxN 5000006
#define maxK 500
#define maxW 1005
#define pb push_back
#define mp make_pair
#define INF (((ll)1000000000) * ((ll)1000000000))
#define e 2.7182818284590452353602874
#define maxT 1000000
#define inf 0x7fffffff
#define inff 100000
#define ff first
#define ss second
#define MOD 1000000007
#define fast cin.sync_with_stdio(0);cin.tie(0)
#define rep(i,N) for(int i=0;i<N;i++)
#define pii pair<int,int>
#define fill(A,v) memset(A,v,sizeof A)
#define setbits(x) __builtin_popcount(x)

// Book Game with Chef(ANUBGC)
//First attempt at digit DP problem

//dp[i][tight][found][started] denote all possible i digit numbers containing digit d 
//first i digits of the number
//tight is false if first i digits are less than first i digits of N
//tight is true if first i digits of constructed number and i are equal
//found denotes if some number is found or not
//started denotes if constructed number is greater than 0

string s;
char d;
ll dp[30][3][3][3];

ll count(int i,int tight,int found,int started) {

	if(i==s.size())
		return found;
	ll v=dp[i][tight][found][started];
	if(v!=-1) {
		return v; 
	}
	v=0;

	int next_tight,next_found,next_started;

	for(char next='0';next<='9';next++) {	//add i+1th digit
		if(next>s[i] && tight==true)		//constructed number is greater than n
			break;
		if(i==0 && s[i]==next)
			tight=true;
		next_started=started;
		next_found=found;
		next_tight=tight;
		if(next>'0')
			next_started=1;
		if(next==d && next_started==true)
			next_found=1;
		
		if(tight==true && next<s[i])
			next_tight=false;

		v+=count(i+1,next_tight,next_found,next_started);
	}

	dp[i][tight][found][started]=v;
	return v;
}

string decimal(ll n) {
	string a;
	a.clear();
	while(n) {
		a.pb(n%10+'0');
		n/=10;
	}
	reverse(a.begin(),a.end());
	return a;
}

int main(int argc, char const *argv[])
{
	fast;

	int T;
	cin>>T;

	while(T--) {
		ll n;
		cin>>n;
		s=decimal(n);
		//cout<<s<<"\n";
		ll denominator=n*10,numerator=0;
		for(char digit='0';digit<='9';digit++) {
			fill(dp,-1);
			d=digit;
			numerator+=count(0,0,0,0);
		}

		ll g=__gcd(numerator,denominator);
		numerator/=g;
		denominator/=g;
		cout<<numerator<<"/"<<denominator<<"\n";
	}

	return 0;
}