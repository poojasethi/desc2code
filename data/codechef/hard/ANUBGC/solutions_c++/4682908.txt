#include<stdio.h>
#include<string.h>

#define MAXINDEX 17
#define DIGITS 10

long long ResNonStarted[MAXINDEX+1], ResStarted[DIGITS+1][MAXINDEX];


void Init(void) {

	memset(ResStarted, 0xFF, sizeof ResStarted);
	memset(ResNonStarted, 0xFF, sizeof ResNonStarted);
}


long long GetDigits(int dig[], int &maxind) {

	int c, i = 0;
	long long res = 0;

	while((c = getchar())<'0' || c>'9');

	do dig[i] = c-'0', res = res*10+dig[i++];
	while((c = getchar())>='0' && c<='9');

	maxind = i-1;
	return res;
}


long long GCD(long long a,  long long b) {

	long long temp;

	while((temp = a%b)) a = b, b = temp;

	return b;
}


int TestDigits(int dig[], int startind, int maxind) {

	int mask = 0, count = 0, i;

	for(i = startind; i<=maxind; i++)
		if(!(mask&(1<<dig[i]))) mask |= 1<<dig[i], count++;

	return count;
}


long long Calc(int limdig[], int dig[], int startind, int maxind, int ind, bool fullint) {

	if(maxind<ind) return startind==-1 ? 0 : TestDigits(dig, startind, maxind);

	int d, maxd, newstartind, count;
	long long res;
	bool newfullint;

	maxd = fullint ? 9 : limdig[ind];
	for(res = d = 0; d<=maxd; d++) {
		dig[ind] = d;
		newstartind = startind==-1 && d ? ind : startind;
		newfullint = fullint || d<maxd;

		if(newstartind==-1) {
			if(ResNonStarted[maxind-ind]==-1) ResNonStarted[maxind-ind] = Calc(limdig, dig, -1, maxind, ind+1, true);
			res += ResNonStarted[maxind-ind];
		}
		else if(newfullint) {
			count = TestDigits(dig, newstartind, ind);
			if(ResStarted[count][maxind-ind]==-1) ResStarted[count][maxind-ind] = Calc(limdig, dig, newstartind, maxind, ind+1, true);
			res += ResStarted[count][maxind-ind];
		}
		else res += Calc(limdig, dig, newstartind, maxind, ind+1, false);
	}

	return res;
}


int main(void) {

	int T, limdig[MAXINDEX+1], dig[MAXINDEX+1], maxind;
	long long N, sum, gcd;

	Init();

	for(scanf("%d", &T); T>0; T--) {
		N = GetDigits(limdig, maxind);
		sum = Calc(limdig, dig, -1, maxind, 0, false);
		gcd = GCD(N*10, sum);

		printf("%lld/%lld\n", sum/gcd, N*10/gcd); 
	}

	return 0;
}