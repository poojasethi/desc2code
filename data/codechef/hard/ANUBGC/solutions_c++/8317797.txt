#include <bits/stdc++.h>
using namespace std;
typedef long long LL;

LL p10[19];
LL dp[18][2];

LL my_d10(int d)
{
    if (d == 0)
        return 0;
    return p10[d] - p10[d - 1];
}

LL my_f(int n, int d)
{
    if (n == 0)
        return 0;

    d = (d == 0)? 0 : 1;
	if (n == 1)
		return (d == 0)? (dp[1][d] = 0) : (dp[1][d] = 1);

	if (dp[n][d])
		return dp[n][d];

	return (dp[n][d] = my_d10(n - 1) + my_f(n - 1, d) * 10 - my_f(n - 2, d) * 9);
}

LL num_count(LL num, int d)
{
    char num_arr[20];
    LL ans = 0;
    int len, dig;

    sprintf(num_arr, "%lld", num);
    len = strlen(num_arr);

    for (int i = 0; i < len; i++)
    {
        dig = num_arr[i] - '0';

        for (int j = 0; j < dig; j++)
        {
            if (i == 0 && j == 0 && d == 0)
                ans += my_f(len - 1- i, 0);
            else if (j == d)
                ans += p10[len - 1 - i];
            else
                ans += my_f(len - 1 - i, 1);
        }

        if (d == dig && i < len - 1)
        {
            sscanf(num_arr + i + 1, "%lld", &num);
            ans += num;
            break;
        }
    }

    return ans;
}

LL gcd(LL a, LL b)
{
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

int main()
{
	LL T, N, P, Q;

	p10[0] = 1;
	for (int i = 1; i < 19; i++)
		p10[i] = p10[i - 1] * 10LL;

	for (int i = 0; i < 18; i++)
		for (int j = 0; j < 10; j++)
			dp[i][j] = 0;

	scanf("%lld", &T);
	while (T--)
	{
		scanf("%lld", &N);
		P = 0;
		Q = N * 10;
		for (int i = 0; i < 10; i++)
            P += num_count(N + 1, i);
        // printf("%lld %lld\n", P, Q);
        N = gcd(P, Q);
        P /= N;
        Q /= N;
        printf("%lld/%lld\n", P, Q);
	}

	return 0;
}
