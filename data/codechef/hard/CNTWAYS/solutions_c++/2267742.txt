#include<cstdio>
#define mod 1000000007
#define ll long long
#define limit 800002
ll inverseEuler[limit],factorial[limit];
long long powermod(ll a,ll b,ll MOD)
{
    long long x=1,y=a;
    while(b > 0)
    {
        if(b%2 == 1)
        {
            x=(x*y);
            if(x>MOD) x%=MOD;
        }
        y = (y*y);
        if(y>MOD) y%=MOD;
        b /= 2;
    }
    return x;
}

void precompute()
{
    ll i;
    factorial[0]=factorial[1]=1;
    for(i=2;i<=limit;i++)
        factorial[i]=(i*factorial[i-1]%mod);

    inverseEuler[limit]=powermod(factorial[limit],mod-2,mod);
    for(i=limit-1;i>=0;i--)
        inverseEuler[i]=(inverseEuler[i+1]*(i+1))%mod;
}
long long nCr(ll i, ll j)
{
    return (((factorial[i]*inverseEuler[i-j])%mod)*inverseEuler[j])%mod ;
}

using namespace std;
int main()
{
    precompute();
    int t;
    ll n,m,a,b,i;
    ll ans;
    scanf("%d",&t);
    while(t--)
    {
        ans=0;
        scanf("%lld %lld %lld %lld",&n,&m,&a,&b);
        for(i=0;i<=n-a;i++)
        {
            ans=ans+(nCr(b+i-1,i)*nCr(n-i+m-b,m-b));
            ans=ans%mod;
        }
        printf("%lld\n",ans);
    }
}
