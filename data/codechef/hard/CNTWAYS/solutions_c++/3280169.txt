#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#define M 1000000007

using namespace std;

unsigned long long fact[800005];
unsigned long long invfact[800005];

unsigned long long modpow(unsigned long long a, unsigned long long b) 
{
    unsigned long long ans = 1;
    while(b > 0){
        if(b & 1){
            ans = (ans * a) % M;
        }
        a = (a * a) % M;
        b >>= 1;
    }
    return ans;
}

void pre() {
    invfact[0] = fact[0] = 1;
    for ( int i = 1; i <= 800002; i++ ) {
        fact[i] = (fact[i-1]*i)%M;
        fact[i] %= M;
        invfact[i] = modpow(fact[i],M-2);
    }
    return;
}    

inline void fi(int *a)

{
 register char c=0;
 while (c<33) c=getchar();
 *a=0;
 int tmp = 0;
 while (c>33)
 {
     if ( c == 45 ) tmp = 1;
     else *a=*a*10+c-'0';
     c=getchar();
 }
 if ( tmp == 1 ) *a = 0-(*a);
}


int main()
{
    int t,n,m,a,b;
    unsigned long long ans1,ans2,final_ans,p1,p2,pro;
    pre();
    fi(&t);
    while ( t-- ) {
          fi(&n);
          fi(&m);
          fi(&a);
          fi(&b);
          n += 1;
          m += 1;
          swap(n,m);
          swap(a,b);
          ans1 = fact[n+m-2];
          ans2 = (invfact[n-1]*invfact[m-1])%M;
          ans1 = (ans1*ans2)%M;
          p1 = ans1;
          p2 = 0;
          for ( int i = 1; i <= a; i++ ) {
              
              int rows = i;
              int cols = m-b;
              ans1 = fact[rows+cols-2];
              ans2 = (invfact[rows-1]*invfact[cols-1])%M;
              ans1 = (ans1*ans2)%M;
              pro = ans1;
              
              rows = n-i+1;
              cols = b;
              ans1 = fact[rows+cols-2];
              ans2 = (invfact[rows-1]*invfact[cols-1])%M;
              ans1 = (ans1*ans2)%M;
              pro = (pro*ans1)%M;
              
              p2 += pro%M;
              p2 %= M;
          }
          final_ans = (p1+M-p2)%M;
          cout << final_ans << endl;
    }
    return 0;
}
