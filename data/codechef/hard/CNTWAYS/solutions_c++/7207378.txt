#include <cstdio>
#include <algorithm>
using namespace std;
#define p 1000000007
#define ll long long
#define MM 400000

ll powmodp(ll a, ll b) {
    ll w=1;  ll x=a;
    while (b) {if (b&1) w=w*x%p; x=x*x%p; b>>=1;    }
    return w;
}
ll sil[2*MM]={1},silinv[2*MM]={1};

void prep() {
	for (int i=1;i<2*MM;i++) 
		sil[i]=sil[i-1]*i%p;
//	for (int i=1;i<=MM;i++) {
//		silinv[i]=powmodp(sil[i],p-2);
//	}
}

ll odwmodp(ll a) {
  ll u = 1; ll w = a;
  ll x = 0; ll z = p;
  ll q;
  while(w) {
    if(w < z) {
      q = u; u = x; x = q;
      q = w; w = z; z = q;
    }
    q = w / z;
    u -= q * x;
    w -= q * z;
  }
  if(x < 0) x += p;
  return x;    
}

ll divmodp(ll a, ll b) {
    return a*odwmodp(b)%p;
}

ll binom(ll n, ll k) {
    if (k>n/2) k=n-k;
    ll g=1; for(int i=n-k+1;i<=n;++i) g=g*i%p;
    ll d=1; for(int i=2;i<=k;++i) d=d*i%p;
    return divmodp(g,d);
}

void binom2(ll n, ll k,ll &g, ll &d) {
    if (k>n/2) k=n-k;
    for(int i=n-k+1;i<=n;++i) g=g*i%p;
    for(int i=2;i<=k;++i) d=d*i%p;
}

ll binomfast(ll n, ll k) {
	ll d=silinv[k]*silinv[n-k]%p;
	return sil[n]*d%p;
}
ll binomfast2(ll n, ll k) {
	ll d=sil[k]*sil[n-k]%p;
	return divmodp(sil[n],d);
}
ll g1[400001],g2[400001];
ll calc(int N, int M, int A, int B) {
	//printf("N=%d M=%d A=%d B=%d\n",N,M,A,B);
    ll n1=M-B+A;    ll k1=M-B;    
    ll n2=N-A+B;    ll k2=N-A;    
    //ll gora=1,dol=1;
    //binom2(n1,k1,gora,dol);
    //binom2(n2,k2,gora,dol);
    ll wynik=binomfast2(n1,k1)*binomfast2(n2,k2)%p;
    //printf("n1=%lld, k1=%lld, n2=%lld, k2=%lld\n",n1,k1,n2,k2);
    //printf("%lld %lld\n",w1,w2);
    ll k=min(k1,k2);
    g1[1]=k1*k2%p;
    for (int j=2;j<=k;++j) {ll g=(k1-(j-1))*(k2-(j-1))%p; g1[j]=g1[j-1]*g%p;}
    g2[k]=1;
    for (int j=k-1;j>=0;--j) {ll g=(n1-k1+j+1)*(n2-k2+j+1)%p; g2[j]=g2[j+1]*g%p;}
    ll s=0;
    for (int i=1;i<=k;++i) {
        //ll g=1;
        //for (int j=0;j<=i;++j) {g=g*(k1-j)%p; g=g*(k2-j)%p;}
        //for (int j=i+2;j<=k;++j) {g=g*(n1-k1+j)%p; g=g*(n2-k2+j)%p;}
        ll g=g1[i]*g2[i];
        s=(s+g)%p;
    }
    ll d=g2[0];
    s=(s+d)%p;
    //gora=gora*s%p;
    //dol=dol*d%p;
    wynik=wynik*s%p;
    wynik=divmodp(wynik,d);
    //printf("s=%lld d=%lld s/d=%lld\n",s,d,divmodp(s,d));
	//return gora*powmodp(dol,p-2)%p;
	return wynik;
}


int R,N,M,A,B;

int main() {
prep();
//for (int i=1; i<10;i++) printf("%d %lld %lld\n",i,powmodp(i,p-2),odwmodp(i));
scanf("%d",&R);
//R=1;
while(R--) {
    scanf("%d%d%d%d",&N,&M,&A,&B);
    //N=M=400000; A=B=1;
    printf("%lld\n",calc(N,M,A,B));
}
return 0;
}