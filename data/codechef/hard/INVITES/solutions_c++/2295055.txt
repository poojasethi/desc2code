#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>

using namespace std;
typedef long long LL;
typedef pair<int,int> pii;

#define forup(i,a,b) for(int i=a; i<b; ++i)
#define fordn(i,a,b) for(int i=a; i>b; --i)
#define rep(i,a) for(int i=0; i<a; ++i)

#define dforup(i,a,b) for(i=a; i<b; ++i)
#define dfordn(i,a,b) for(i=a; i>b; --i)
#define drep(i,a) for(i=0; i<a; ++i)

#define slenn(s,n) for(n=0; s[n]!='\0'; ++n)

#define gi(x) scanf("%d",&x)
#define gl(x) cin>>x
#define gd(x) scanf("%lf",&x)
#define gs(x) scanf("%s",x)

#define pis(x) printf("%d ",x)
#define pin(x) printf("%d\n",x)
#define pls(x) cout<<x<<" "
#define pln(x) cout<<x<<"\n"
#define pds(x) printf("%.12f ",x)
#define pdn(x) printf("%.12f\n",x)
#define pnl() printf("\n")

#define fs first
#define sc second

#define pb push_back

const int inv=numeric_limits<int>::max();
const int minv=numeric_limits<int>::min();

const int max_n=100010;
const LL modref=1000000007ll;

int T;
int n;
vector<int> adjl[max_n];
//vector<int> tadjl[max_n];
int par[max_n];

bool visited[max_n];
bool incycle[max_n];
vector<int> cycles[max_n];
int ncycles;
int depth[max_n];

void makecycle(int vt, int an)
{
	//cerr<<vt<<" "<<an<<"\n";
	if(vt!=an)
		makecycle(par[vt],an);
	cycles[ncycles].pb(vt);
	incycle[vt]=true;
}

void DFS(int vt)
{
	//cout<<"## "<<vt<<" "<<par[vt]<<"\n";
	visited[vt]=true;
	
	int nb;
	bool parseen=false;
	//int tnb;
	for(int i=0; i<adjl[vt].size(); ++i)
	{
		nb=adjl[vt][i];
		//tnb=tadjl[vt][i];
		if(not visited[nb])
		{
			depth[nb]=depth[vt]+1;
			par[nb]=vt;
			DFS(nb);
		}
		else if(depth[nb]<depth[vt])
		{
			if(nb!=par[vt])
				makecycle(vt,nb);
			else if(not parseen)
				parseen=true;
			else
				makecycle(vt,nb);
		}
	}
}

void msDFS()
{
	fill(visited,visited+n,false);
	fill(incycle,incycle+n,false);
	ncycles=0;
	
	for(int i=0; i<n; ++i)
		if(not visited[i])
		{
			//cerr<<"@"<<i<<"\n";
			cycles[ncycles].resize(0);
			par[i]=i;
			depth[i]=0;
			DFS(i);
			++ncycles;
		}
}

const int max_m=max_n;
LL a[max_n], b[max_n];

void DFS2(int vt)
{
	visited[vt]=true;
	a[vt]=1ll;
	b[vt]=1ll;
	
	int nb;
	for(int i=0; i<adjl[vt].size(); ++i)
	{
		nb=adjl[vt][i];
		if(not visited[nb])
		{
			DFS2(nb);
			
			a[vt]*=b[nb]; a[vt]%=modref;
			b[vt]*=(a[nb]+b[nb]); b[vt]%=modref;
		}
	}
}

LL A[max_m], B[max_m];
LL dp[max_m][4];
LL res;

void processcycle(int ix)
{
	int m=cycles[ix].size();
	
	rep(i,m)
	{
		DFS2(cycles[ix][i]);
		A[i]=a[cycles[ix][i]]; B[i]=b[cycles[ix][i]];
		
		//cout<<ix<<" :: "<<cycles[ix][i]<<" : "<<A[i]<<" "<<B[i]<<"\n";
	}
	
	dp[1][0]=(B[1]*B[0])%modref;
	dp[1][1]=(A[1]*B[0])%modref;
	dp[1][2]=(B[1]*A[0])%modref;
	dp[1][3]=0ll;
	
	forup(i,2,m)
	{
		dp[i][0]=B[i]*(dp[i-1][0]+dp[i-1][1]); dp[i][0]%=modref;
		dp[i][1]=A[i]*(dp[i-1][0]); dp[i][1]%=modref;
		
		dp[i][2]=B[i]*(dp[i-1][2]+dp[i-1][3]); dp[i][2]%=modref;
		dp[i][3]=A[i]*(dp[i-1][2]); dp[i][3]%=modref;
	}
	
	res*=((dp[m-1][0]+dp[m-1][1]+dp[m-1][2])%modref); res%=modref;
}

int main()
{
	gi(T);
	
	rep(z,T)
	{
		//cerr<<"@ "<<z<<"\n";
		gi(n);
		
		rep(i,n)
		{
			adjl[i].resize(0);
			//tadjl[i].resize(0);
		}
		
		//cerr<<"Here A\n";
		int e;
		rep(i,n)
		{
			gi(e); --e;
			adjl[i].pb(e); //tadjl[i].pb(0);
			adjl[e].pb(i); //tadjl[e].pb(1);
		}
		
		//cerr<<"Here B\n";
		msDFS();
		
		//cerr<<"Here C\n";
		res=1ll;
		rep(i,n)
			visited[i]=incycle[i];
		rep(i,ncycles)
			processcycle(i);
		
		//cerr<<"Here D\n";
		pin(((int)(res)));
	}
	
	return 0;
}