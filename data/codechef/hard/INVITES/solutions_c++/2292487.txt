#include <cstdio>
#include <iostream>
#include <cstring>
#include <cctype>
#include <cmath>
#include <stack>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
using namespace std;
#define INF 0x3f3f3f3f
#define REP(i,n) for(int64 i=0; i<n; i++)
typedef long long int64;
#define MAXN 200100

int64 ti,tc;
vector<int64> cyc;
int64 us[MAXN],g[MAXN];

void dfs(int x, int t) {
    if (us[x]!=-1) {
        ti=us[x];
        tc=t-ti;
        cyc.clear();
    }
    else {
        us[x]=t;
        dfs(g[x],t+1);
        if (us[x]>=ti)
            cyc.push_back(x);
    }
}

#define M 1000000007

int64 pdcc[MAXN][2][2], rp[MAXN][2];

vector<int64> gi[MAXN];
int64 pd[MAXN][2];

int calc(int x, char u) {
    us[x]=1;
    if (pd[x][u]!=-1) return pd[x][u];
    pd[x][u]=0;

    int64 r0=1, r1=!u;
    REP(i,gi[x].size()) {
        int64 v=gi[x][i];
        r0=(r0*calc(v,0))%M;
        r1=(r1*calc(v,1))%M;
    }
    return (pd[x][u]=(r0+r1)%M);
}

int main() {
    int64 nt,n;

    scanf("%lld",&nt);
    
    while (nt--) {
        scanf("%lld",&n);
        REP(i,n)
            gi[i].clear();
            
        REP(i,n) {
            rp[i][0]=rp[i][1]=1;
            scanf("%lld",&g[i]);
            g[i]--;
            gi[g[i]].push_back(i);
        }

        memset(us,-1,sizeof(us));
        memset(pd,-1,sizeof(pd));
        memset(pdcc,-1,sizeof(pdcc));

        int64 res=1;
        REP(i,n)
            if (us[i]==-1) {
                dfs(i,0);
                REP(j,cyc.size()) {
                    int64 v=cyc[j];
                    REP(k,gi[v].size()) {
                        int64 u=gi[v][k];
                        if (u!=cyc[(j+1)%cyc.size()]) {
                            rp[v][0] = (rp[v][0] * calc(u,0))%M;
                            rp[v][1] = (rp[v][1] * calc(u,1))%M;
                        }
                    }
                }

                for (int ix=cyc.size();ix>=0;ix--) {
                    int64 val;
                    REP(u,2) REP(f,2) {
                        if (ix>=cyc.size()) val=(!f || u!=f);
                        else {
                            int x=cyc[ix];

                            val=((1-u)*(pdcc[ix+1][1][ix?f:1]*rp[x][1])%M+
                                (pdcc[ix+1][0][ix?f:0]*rp[x][0])%M);
                        }
                        pdcc[ix][u][f]=val;
                    }
                }
                res=(res*pdcc[0][0][0])%M;
            }

        printf("%lld\n",res);
    }
    return 0;
}
