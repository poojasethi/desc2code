#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <cctype>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <iostream>
#include <ctime>
#include <cassert>
#include <sstream>

using namespace std;

#define INF 0x3f3f3f3f
#define ll long long
#define MAXN 100010

const ll mod = 1000000007LL;

int next[MAXN],vis[MAXN],in[MAXN];
int vet[MAXN],pai[MAXN],t,oncycle[MAXN];
vector<int> adj[MAXN];
ll one[MAXN],zero[MAXN];

void dfs(int u) {
    ll a,b;
    a = b = 1LL;
    vis[u] = 1;
    for (int i=0; i<int(adj[u].size()); i++) {
        int v = adj[u][i];
        if (oncycle[v]) continue;
        dfs(v);
        a = (a * zero[v]) % mod;
        b = (b * (one[v]+zero[v])) % mod;
    }
    
    one[u] = a;
    zero[u] = b;
    return;
}

ll solve(int s) {
    int u = s;
    pai[u] = -1;
    
    while (1) {
        vis[u] = 1;
        int v = next[u];
        if (vis[v]) {
            int p = u;
            t = 0;
            while (p != v) {
                vet[t++] = p;
                oncycle[p] = 1;
                p = pai[p];
            }
            vet[t++] = v;
            oncycle[v] = 1;
            break;
        }
        pai[v] = u;
        u = v;
    }
    
    for (int i=0; i<t; i++) {
        dfs(vet[i]);
    }
    
    ll ans1,ans2,inv,ninv,aux;
    inv = one[vet[0]]; ninv = 0LL;
    for (int i=1; i<t; i++) {
        aux = ninv;
        ninv = (zero[vet[i]] * (inv + ninv)) % mod;
        if (i == t-1) inv = 0LL;
        else inv = (one[vet[i]] * aux) % mod;
    }
    ans1 = (inv + ninv) % mod;
    
    inv = 0LL; ninv = zero[vet[0]];
    for (int i=1; i<t; i++) {
        aux = ninv;
        ninv = (zero[vet[i]] * (inv + ninv)) % mod;
        inv = (one[vet[i]] * aux) % mod;
    }
    ans2 = (inv + ninv) % mod;
    
    return (ans1 + ans2) % mod;
}

int main() {
    int nt,n;
    ll ans;
    scanf("%d",&nt);
    
    while (nt--) {
        scanf("%d",&n);
        for (int i=0; i<n; i++) {
            adj[i].clear();
            vis[i] = in[i] = oncycle[i] = 0;
        }
        
        for (int i=0; i<n; i++) {
            int v;
            scanf("%d",&v);
            v--;
            next[i] = v;
            adj[v].push_back(i);
            in[v] = 1;
        }
        
        ans = 1LL;
        for (int i=0; i<n; i++)
            if (!in[i] && !vis[i]) ans = (ans * solve(i)) % mod;
        
        for (int i=0; i<n; i++)
            if (!vis[i]) ans = (ans * solve(i)) % mod;
            
        printf("%lld\n",ans);
    }
    
	return 0;
}
