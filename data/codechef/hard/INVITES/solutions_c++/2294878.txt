/*
    Nimesh Ghelani (nims11)
         こんいちわ
*/
#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<map>
#include<string>
#include<vector>
#include<queue>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<set>
#include<utility>
#define in_T int t;for(scanf("%d",&t);t--;)
#define in_I(a) scanf("%d",&a)
#define in_F(a) scanf("%lf",&a)
#define in_L(a) scanf("%lld",&a)
#define in_S(a) scanf("%s",a)
#define newline printf("\n")
#define MAX(a,b) a>b?a:b
#define MIN(a,b) a<b?a:b
#define SWAP(a,b) {int tmp=a;a=b;b=tmp;}
#define P_I(a) printf("%d",a)

using namespace std;
const long long mod = 1000000007;
set<int> adj[100001];
int n, c;

int visited[100001];    // 0->not 1->yes 2->part of cycle
bool visited2[100001];
int dfs(int idx, int par = -1)
{
    visited[idx] = 1;
    int ret = -1, x;
    for(set<int>::iterator it=adj[idx].begin();it != adj[idx].end();it++)
    {
        if(!visited[*it])
        {
            x = dfs(*it, idx);
            if(x != -1)
                ret = x;
        }else if(*it != par && visited[*it] == 1)
            ret = *it;
    }
    if(ret != -1)
    {
//        cout<<idx<<endl;
        visited[idx] = 2;
        c = idx;
    }
    if(ret == idx)
        ret = -1;
    return ret;
}
pair<long long, long long> solve_tree(int idx)
{
    pair<long long, long long> ret = make_pair(1, 1);
    visited2[idx] = true;
    for(set<int>::iterator it = adj[idx].begin(); it != adj[idx].end(); it++)
    {
        if(!visited2[*it] && visited[*it] == 1)
        {
            pair<long long, long long> x = solve_tree(*it);
            ret.first = (1LL*x.second*ret.first)%mod;
            ret.second = (1LL*(x.first+x.second)*ret.second)%mod;
        }
    }
    return ret;
}
long long solve(int idx)
{
    c = -1;
    dfs(idx);
    if(c == -1)
    {
        pair<long long, long long> res = solve_tree(idx);
        return (res.first + res.second)%mod;
    }
    vector<pair<long long, long long> > res;
    res.push_back(solve_tree(c));
    visited[c] = 1;

    while(1)
    {
        int x = -1;
        for(set<int>::iterator it = adj[c].begin(); it != adj[c].end(); it++)
        {
            if(visited[*it] == 2)
            {
                res.push_back(solve_tree(*it));
                visited[*it] = 1;
                x = *it;
                break;
            }
        }
        if(x == -1)
            break;
        c = x;
    }
    long long ret = 0;
    long long a = res[0].first, b = 0;
    for(int i=1;i<res.size();i++)
    {
        if(i + 1 == res.size())
        {
            b = (res[i].second*1LL*(a+b))%mod;
            a = 0;
        }else
        {
            long long tmp = b;
            b = (res[i].second*1LL*(a+b))%mod;
            a = (1LL*res[i].first*tmp)%mod;
        }
    }
    ret = b;

    a = 0, b = res[0].second;
    for(int i=1;i<res.size();i++)
    {
        long long tmp = b;
        b = (res[i].second*1LL*(a+b))%mod;
        a = (1LL*res[i].first*tmp)%mod;
    }
    ret = (ret + (a+b)%mod)%mod;
    return ret;
}
int main()
{
    in_T
    {
        in_I(n);
        for(int i=1;i<=n;i++)
            adj[i].clear();
        int x;
        for(int i=1;i<=n;i++)
        {
            in_I(x);
            adj[i].insert(x);
            adj[x].insert(i);
            visited[i] = 0;
            visited2[i] = false;
        }
        long long ans = 1;
        for(int i=1;i<=n;i++)
        {
            if(!visited[i])
            {
                ans = (ans*solve(i))%mod;
            }
        }
        printf("%lld\n", ans);
    }
}
