#include <iostream>
#include <algorithm>
#include <cassert>
int MOD=1000000007;
long long int pow(long long int a,int ex,int k)
{
	long long int re=1;
	while (ex>0)
	{
		if (ex%2==1)
		{
			re=re*a;
			re=re%k;
		}
		a=a*a;
		a=a%k;
		ex=ex/2;
	}
	return re;
}
class myclass
{
public:
	int i;
	int j;
	long long int d;
};
bool myf(const myclass &a,const myclass &b)
{
	return a.d>b.d;
}

class mypart
{
public:
	int i;
	int j;
	int comp;
	int val;
};
using namespace std;
int main()
{
	int t,fi,si,i,n,j,count1,count2,tid,ta,tb,comp,set,count,divide[1001];
	long long int a[1001],m,tm,c1,c2,ans,part1[1001],part2[1001];
	static myclass dist[1000001];

	mypart part[1001];
	cin>>t;
	while (t--)
	{
		cin>>n;
		assert(n>=3);
		for (i=0;i<n;i++)
		{
			cin>>a[i];
			assert(a[i]>=1);
		}
		ans=0;
		m=-1;
		count=0;
		for (i=0;i<n;i++)
		{
			for (j=i+1;j<n;j++)
			{
				dist[count].d=min( pow(a[i],a[j],MOD) , pow(a[j],a[i],MOD));
				dist[count].i=i;
				dist[count].j=j;
				count++;

//				cout<<i<<" "<<j<<" "<<dist[count-1].d<<endl;
			}
		}

		sort(dist,dist+count,myf);
//		cout<<endl;
//		for (i=0;i<count;i++) cout<<dist[i].i<<" "<<dist[i].j<<" "<<dist[i].d<<endl;
		set=1;
		comp=0;
		for (i=0;i<n;i++) divide[i]=0;
		for (i=0;i<count;i++)
		{
			ta=dist[i].i;
			tb=dist[i].j;

//			cout<<ta<<" "<<tb<<" "<<divide[ta]<<" "<<divide[tb]<<endl;
//if (ta==1&&tb==4&&divide[ta]==1&&divide[tb]==1)
//{
//
///			for (int k=0;k<n;k++)
	//		{
	//			cout<<part[k].i<<" "<<part[k].j<<" "<<part[k].comp<<endl;
	//		}
	//		cout<<endl;
//}
			if (divide[ta]==0 && divide[tb]==0)
			{//cout<<"O.o"<<endl;
				divide[ta]=1;
				divide[tb]=1;
				part[ta].i=set;
				part[ta].j=set+1;
				part[ta].comp=comp;
				part[tb].i=set+1;
				part[tb].j=set;
				part[tb].comp=comp;
				set=set+2;
				comp++;
			}
			else if (divide[ta]!=0&&divide[tb]!=0)
			{
				if (part[ta].comp==part[tb].comp)
				{
				//	cout<<"LOL"<<endl;
					continue;
				}
				else
				{
					tid=part[tb].i;
					int loltemp=part[tb].j;
					for (j=0;j<n;j++)
					{
						if (divide[j]!=0 && part[j].i==tid)
						{
							part[j].i=part[ta].j;
							part[j].j=part[ta].i;
							part[j].comp=part[ta].comp;
						}
					}

					tid=loltemp;

					for (j=0;j<n;j++)
					{
						if (divide[j]!=0 && part[j].i==tid)
						{
							part[j].i=part[ta].i;
							part[j].j=part[ta].j;
							part[j].comp=part[ta].comp;
						}
					}


				}
			}
			else if (divide[ta]!=0)
			{
				part[tb].i=part[ta].j;
				part[tb].j=part[ta].i;
				part[tb].comp=part[ta].comp;
				divide[tb]=1;
			}
			else if (divide[tb]!=0)
			{
				part[ta].i=part[tb].j;
				part[ta].j=part[tb].i;
				part[ta].comp=part[tb].comp;				
				divide[ta]=1;
			}
		}
	//	part[0].i=4;
		fi=part[0].i;
		for (i=1;i<n;i++)
		{
//			cout<<part[i].i<<" "<<fi<<endl;
			if (part[i].i!=fi) si=part[i].i;
		}

		count1=0;
		count2=0;
		for (i=0;i<n;i++)
		{

			if (part[i].i==fi)
			{
		//		cout<<fi<<" "<<i<<endl;
				part1[count1]=a[i];
				count1++;
			}
			else
			{
		//		cout<<si<<" "<<i<<" "<<a[part[i].i]<<" "<<a[si]<<" "<<a[i]<<endl;
				part2[count2]=a[i];
				count2++;
			}
		}
//		cout<<"       "<<count1<<" "<<count2<<endl;
		for (i=0;i<count1;i++)
		{
			for (j=i+1;j<count1;j++)
			{
//				cout<<part1[i]<<" "<<part1[j]<<endl;
				tm=min( pow(part1[i],part1[j],MOD) , pow(part1[j],part1[i],MOD));
				ans=max(ans,tm);
			}
		}

		for (i=0;i<count2;i++)
		{
			for (j=i+1;j<count2;j++)
			{

				tm=min( pow(part2[i],part2[j],MOD) , pow(part2[j],part2[i],MOD));
				ans=max(ans,tm);
			}
		}
		cout<<ans<<endl;
	/*	for (i=0;i<count1;i++)
		{
			cout<<part1[i]<<" ";
		}
		cout<<endl;
		for (i=0;i<count2;i++)
		{
			cout<<part2[i]<<" ";
		}
		cout<<endl;*/
	}
	return 0;
}