#include<iostream>
#include<queue>
#include<algorithm>
using namespace std;

#define mod 1000000007
int temp[1003][1003];
long long int expo(long long int a,long long int b)
{
long long int x=1,y=a;
while(b>0)
{
if(b%2==1)
{
x=(x*y);
if(x>mod)
x=x%mod;
}
y=(y*y);
if(y>mod)
y=y%mod;
b=b/2;
}
return x;
}

bool compare(int mid,int *a,int n)
{
vector<int>adj[1001];
int color[1003]={0};
for(int i=0;i<n;i++)
for(int j=i+1;j<n;j++)
if(temp[i][j]>mid)
{
//cout<<i<<" "<<j<<" "<<temp[i][j]<<endl;
adj[i].push_back(j);
adj[j].push_back(i);
}
bool visited[n+2];
fill(visited,visited+n+2,false);
for(int i=0;i<n;i++)
if(!visited[i]&&adj[i].size()>0)
{
queue<pair<int,int > >q;
q.push(make_pair(i,0));
color[i]=0;
visited[i]=true;
while(!q.empty())
{
pair<int,int>r=q.front();
q.pop();
for(int j=0;j<adj[r.first].size();j++)
if(!visited[adj[r.first][j]])
{
visited[adj[r.first][j]]=true;
color[adj[r.first][j]]=(r.second+1)%2;
q.push(make_pair(adj[r.first][j],color[adj[r.first][j]]));
}
}
}
/*for(int i=0;i<n;i++)
cout<<color[i]<<" ";
cout<<endl;*/
for(int i=0;i<n;i++)
for(int j=0;j<adj[i].size();j++)
if(color[i]==color[adj[i][j]])
return false;
return true;
}

int func(int *a,int n)
{
int maxi=-1;
for(int i=0;i<n;i++)
for(int j=i+1;j<n;j++)
{
temp[i][j]=min(expo(a[i],a[j]),expo(a[j],a[i]));
temp[j][i]=temp[i][j];
maxi=max(maxi,temp[i][j]);
}
//cout<<compare(1048576-1,a,n)<<endl<<endl;
//cout<<compare(1048575,a,n)<<endl;

int beg=1,last=mod,mid;
while(beg<=last)
{
mid=(beg+last)/2;
bool flag=compare(mid,a,n);
if(flag)
{
if(mid==1||!compare(mid-1,a,n))
return mid;
last=mid-1;
}
else
beg=mid+1;
}
}

int main()
{
ios_base::sync_with_stdio(false);
int t;
cin>>t;
while(t--)
{
int n;
cin>>n;
int a[n];
for(int i=0;i<n;i++)
cin>>a[i];
cout<<func(a,n)<<endl;
}
return 0;
}
