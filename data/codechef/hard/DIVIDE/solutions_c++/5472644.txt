#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int,int> pii;

ll mp = 1000000007;
ll c[1001];
ll b[1001][1001];

ll po(ll x,ll y)
{
	if(y==0)
		return 1;
	if(y==1)
		return x;
	ll w = po(x,y/2);
	if( (y&1)==0)
	{
		return (w*w)%mp;
	}
	return (((w*w)%mp)*x)%mp;
}

ll val(ll p,ll q)
{
	return min(po(p,q),po(q,p));
}
class node 
{
	public :
		vi near;
};
node a[1001];
int clr[1001];
bool df[1001];
int n;
vector< pair<ll,pii> >edges;

bool dfs(int j)
{
	df[j]=1;
	vi v = a[j].near;
	bool ret =1;
	for(int i=0;i<v.size();i++)
	{
		if(df[v[i]])
		{
			if(clr[j]+clr[v[i]] !=3)
				return false;
			continue;
		}
		clr[v[i]]=3-clr[j];
		ret&=dfs(v[i]);
	}
	return ret;
}

bool psbl(ll lmt)
{
	for(int i=1;i<=n;i++)
		{a[i].near.clear();clr[i]=0;df[i]=0;}
	for(int i=edges.size()-1;i>=0;i--)
	{
		ll siz = edges[i].first;
		int x=edges[i].second.first,y=edges[i].second.second;
		if(siz <= lmt)break;
		a[x].near.push_back(y);
		a[y].near.push_back(x);
	}
	bool ret=1;
	for(int i=1;i<=n;i++)
	{
		if(!df[i])ret&=dfs(i);
	}
	return ret;
}

int main()
{
	int test;
	cin>>test;
	for(int z=1;z<=test;z++)
	{
		cin>>n;
		for(int i=1;i<=n;i++)
			cin>>c[i];
		edges.clear();
		for(int i=1;i<=n;i++)
		{
			for(int j=i+1;j<=n;j++)
			{
				b[i][j]=b[j][i]=val(c[i],c[j]);
				edges.push_back( make_pair(b[i][j], make_pair(i,j)) );
			}
		}
		sort(edges.begin(),edges.end());
		ll l=0,r=1000000008;
		while(l<r)
		{
			ll mid = (l+r)>>1;
			if(psbl(mid))
				r=mid;
			else l=mid+1;
		}
		cout<<l<<endl;
	}
}


