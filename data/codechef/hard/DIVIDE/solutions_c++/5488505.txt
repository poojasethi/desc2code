#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <stack>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <cstdio>


#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sz(a) int(a.size())
#define reset(a, x) memset(a, x, sizeof(a))

#define FOR(i, a, b)   for(int i = a; i <= b; ++i)
#define FORD(i, a, b)  for(int i = a; i >= b; --i)
#define REP(i, n)      for(int i = 0, _n = n; i < _n; ++i)
#define REPD(i, n)     for(int i = n - 1; i >= 0; --i)
#define FORSZ(i, x)    for(int i = 0; i < sz(x); ++i)
#define inf 1e9
using namespace std;
typedef long long ll;
typedef unsigned long long qword;
const int MAXN = 1005;
const ll BASE = 1e9 + 7;

int n;
int a[MAXN], fr[MAXN];
bool ok;
int c[MAXN][MAXN];

/*
ll power(ll x, int sm){
    if (sm == 0) return 1;
    if (sm == 1) return (x % BASE);
    ll tmp = power(x, sm / 2);
    ll tmp2 = (tmp % BASE * tmp % BASE) % BASE;
    if (sm & 1) tmp2 = (tmp2 % BASE * x % BASE) % BASE;
    return tmp2;
}*/

int power(ll x, int sm){
    ll res = 1;
    while (sm){
        if (sm & 1) res = (res * x) % BASE;
        x = (x * x) % BASE;
        sm /= 2;
    }
    return (int)(res % BASE);
}

int cost(int x, int y){
    int d = power((ll)a[x], a[y]);
    int e = power((ll)a[y], a[x]);
    return min((int)d, (int)e);
}

void dfs(int u, int x){
    FOR(j, 1, n)
        if (c[u][j] > x){
            if (fr[j] == -1){
                fr[j] = !fr[u];
                dfs(j, x);
            } else
            if (fr[j] == fr[u]){
                ok = false;
            }
        }
}

bool check(int x){
    FOR(i, 1, n) fr[i] = -1;

    ok = true;
    FOR(i, 1, n)
        if (fr[i] == -1){
            ok = true;
            fr[i] = 0;
            dfs(i, x);
            if (ok == false) return false;
        }

    return true;
}
int main(){
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE
    int ntest;
    scanf("%d", &ntest);
    while (ntest--){
        scanf("%d", &n);
        FOR(i, 1, n)
            scanf("%d", &a[i]);

        FOR(i, 1, n)
            FOR(j, i + 1, n)
                c[i][j] = c[j][i] = cost(i, j);


        int lo, hi, ans;
        lo = 0;hi = 1e9 + 7;

        while (lo <= hi){
            int mid = (lo + hi) >> 1;
            if (check(mid)){
                ans = mid;
                hi = mid - 1;
            } else
                lo = mid + 1;
        }
        printf("%d\n", ans);
    }
    return 0;
}
