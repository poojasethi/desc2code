#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef pair<int,int> pii;
ll c[1001];
ll b[1001][1001];
ll mp = 1000000007;
ll po(ll x, ll y)
{
	if(y==0)
		return 1;
	if(y ==1)
		return x;
	ll w = po(x,y/2);
	if(!(y&1))
		return (w*w)%mp;
	return (((w*w)%mp)*x)%mp;
}

ll val(ll x,ll y)
{
	return min( po(x,y), po(y,x) );
}
class dsuU
{
	int * parent;
	int * siz;
	int * distance;
	public :
	dsuU(int n)
	{
		parent = new int[n+1]; siz = new int[n+1]; distance = new int[n+1]; 
		for(int i=1;i<=n;i++)
		{
			parent[i]=i; siz[i]=1; distance[i]=0;
		}
	}
	int prnt(int x)
	{
		if(parent[x]==x)
			return x;
		return prnt(parent[x]);
	}
	int dist(int x)
	{
		if(parent[x]==x)
			return 0;
		return distance[x]+dist(parent[x]);
	}
	void add(int x,int y)
	{
		int px = prnt(x), py = prnt(y);
		if( siz[px] >= siz[py] )
		{
			parent[py]=x;
			distance[py]=1+dist(x)+dist(y);
			distance[py]%=2;
			siz[px]+=siz[py];
		}
		else 
		{
			parent[px]=y;
			distance[px]=1+dist(x)+dist(y);
			distance[px]%=2;
			siz[py]+=siz[px];
		}
	}
};

int main()
{
	int test;
	cin>>test;
	for(int z=1;z<=test;z++)
	{
		int n;
		cin>>n;
		for(int i=1;i<=n;i++)
			cin>>c[i];
		vector < pair<ll,pii> > edges;
		for(int i=1;i<=n;i++)
		{
			for(int j=i+1;j<=n;j++)
			{
				edges.push_back( make_pair ( val(c[i],c[j]) , make_pair(i,j) ) );
			}
		}
		sort(edges.begin(),edges.end());
		dsuU d(n);
		for(int i=edges.size()-1;i>=0;i--)
		{
			ll len = edges[i].first;
			int x = edges[i].second.first,y=edges[i].second.second;
			
			//cout<<len<<" "<<x<<" "<<y<<" "<<d.prnt(x)<<" "<<d.prnt(y)<<" "<<d.distance(x)<<" "<<d.distance(y)<<endl;
			
			if(d.prnt(x) != d.prnt(y))
			{
				d.add(x,y);continue;
			}
			if (  (d.dist(x) + d.dist(y))%2 ==0 )
			{
				cout<<len<<endl;
				break;
			}
			
			//cout<<len<<" "<<x<<" "<<y<<" "<<d.prnt(x)<<" "<<d.prnt(y)<<" "<<d.distance(x)<<" "<<d.distance(y)<<endl;
		}
	}
}








