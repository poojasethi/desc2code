// In the name of God

#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <map>
#include <queue>
#include <iomanip>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <fstream>
#include <string>
#include <stdio.h>

#define fir first
#define sec second

#define FOR(i,l,h) for(int i=(l);i<=(h);++i)
#define SORT(a) sort(a.begin(),a.end())
#define CLR(a,n) memset(a,n,sizeof a)
#define MP(a,b) make_pair(a,b)
#define PI 3.14159265359

using namespace std;

typedef long long ll;
typedef pair<ll,ll> pii;

const int maxn = 1001 ;
const ll MOD = 1e9+7 ;

ll arr[maxn][maxn] ;
vector<ll> v ;
map<ll, ll> mp ;
map<ll, bool> vis ;

ll calc(ll a , ll b)
{
	if(vis[b]==1)
		return mp[b] ;
	if(b==0)
	{
		mp[b] = 1; 
		vis[b] = 1 ;
		return mp[b] ;
	}
	if(b==1)
	{
		mp[b] = a ;
		vis[b] = 1 ;
		return mp[b] ;
	}
	vis[b] = 1;
	ll p, q ;
	p = calc(a,b/2) ;
	mp[b/2] = p ;
	vis[b/2] = 1;
	q = p ;
	if(b&1)
	{
		q*=a ;
		q%=MOD ;
		mp[(b+1)/2] = q ;
		vis[(b+1)/2] = 1; 
	}
	mp[b] = (p*q)%MOD ;
	return mp[b] ;
}

ll calc2(ll a, ll b)
{
	if(b==0)
	{
		return 1;
	}
	if(b==1)
	{
		return a;
	}
	ll p, q ;
	p = calc2(a,b/2) ;
	q = p ;
	if(b&1)
	{
		q*=a ;
		q%=MOD ;
	}
	return (p*q)%MOD;
}

void init()
{
	for(int i = 0 ; i<v.size() ; i++)
	{
		for(int j = i+1 ; j<v.size() ; j++ )
		{
			//mp.clear() ;
			//vis.clear() ;
			ll c1 = calc2(v[i],v[j]) ;
			//mp.clear() ;
			//vis.clear() ;
			ll c2 = calc2(v[j],v[i]) ;
			arr[i][j] = arr[j][i] = min(c1,c2) ;
		}
	}
}

bool graph[maxn][maxn] ;

bool bfs()
{
	ll vid[maxn]={0};
	for(int i = 0 ; i<v.size() ; i++)
	{
		if(vid[i]!=0)
			continue ;
		queue<ll>q;
		q.push(i);
		vid[i]=1;
		while(q.size()){
			ll cur=q.front();
			q.pop();
			for(int j=0; j<v.size(); j++){
				if(graph[cur][j] && vid[j]){
					if(vid[cur]%2==vid[j]%2)
						return 0;

				}
				if(graph[cur][j] && !vid[j]){
					q.push(j);
					vid[j]=vid[cur]+1;
				}
			}
		}
	}
	return true ;
}

bool checkOk(ll X)
{
	//memset(graph,0,sizeof graph) ;
	for(int i = 0; i<v.size() ; i++)
	{
		for(int j = 0 ; j<v.size() ; j++)
			graph[i][j] = 0 ;
	}
	for(int i = 0 ; i<v.size()-1 ; i++)
	{
		for(int j = i+1 ; j<v.size() ; j++)
		{
			if(arr[i][j]>=X)
				graph[i][j] = graph[j][i] = 1 ;
		}
	}
	
	return bfs() ;	
}

int main(){
	//freopen("in.txt" , "r" , stdin ) ;
	ios_base::sync_with_stdio(false);
	int t ;
	cin >> t ;
	while(t--)
	{	
		int n ;
		cin >> n;
		v.clear() ;
		for(int i = 0 ; i<n ; i++)
		{
			ll a ;
			cin >> a ;
			v.push_back(a) ;
		}
		for(int i = 0 ; i<v.size() ; i++)
			for(int j = 0 ; j<v.size() ; j++)
				arr[i][j] = 0 ;
		
		init() ;
		
		ll l=0, r=MOD ;
		while(l<=r)
		{
			ll mid = (l+r)/2 ;
			if(checkOk(mid))
			{
				r = mid-1 ;
			}
			else
				l = mid+1 ;
		}
		cout << l-1 << endl ;
	}
}
