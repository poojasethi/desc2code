#include<bits/stdc++.h>
#include<algorithm>

using namespace std;

// similarity = min( A[i]^A[j] ,A[j]^A[i] );
#define maxAi 1000000000
#define maxN 1005
#define M 1000000007
#define ll long long int


queue<int> Q;
int vis[maxN],color[maxN],A[maxN];
bool check;
vector< pair < long long int , pair<int, int>  >  > E;
vector<int> V[maxN];


//bfs function to check if given graph is bipartite
//graph is bipartite if its chromatic number is 2
void bfs(int node)
{
vis[node]=1;

for(int i=0;i< V[node].size(); i++ )
{

if(color[node]== color[ V[node][i] ] )	//two adjacent vertices have the same color
{
//cout<<"not bp"<<endl;
check=false;	//graph is not bi-partite
return;
}

if(color[node]==1 )
color[ V[node][i] ]=0;
else
color[ V[node][i] ]= 1;

if( vis[ V[node][i] ]==0 )
{
vis[ V[node][i] ]=1;
Q.push( V[node][i] );
}

}

if(Q.empty()== false)
Q.pop();

if(Q.empty() == false)
bfs( Q.front() );

}


ll min(ll a, ll b)
{
if(a<b)
return a;
else
return b;
}

ll pw(ll a, ll e, ll mod) {
if(e <= 0) return 1;
ll x =pw(a,e/2,mod);
x =(x*x)%mod;
if(x < 0) x +=mod;
if(e%2 != 0) x =(x*a)%mod;
if(x < 0) x +=mod;
return x;}



int main()
{
cin.sync_with_stdio(0);
cin.tie(0);

int T,N,i,j;
scanf("%d",&T);


while(T--)
{
scanf("%d",&N);


for(i=0;i<N;i++)
scanf("%d",&A[i]);

E.clear();

for(i=0;i<N;i++)
for(j=i+1;j<N;j++)
E.push_back ( make_pair( min( pw(A[i],A[j],M) , pw(A[j],A[i],M) )  , make_pair(i,j) ) );


int e=  ( N*(N-1) )/2;
int l =-1, r =e-1;

sort( E.begin() , E.end() );


vector< pair < long long int , pair<int, int>  >  >:: iterator it;

ll ans=0;
while(r > l+1)	//continue binary search
{
int mid= (l+r)/2;

for(i=0;i<N;i++)
{
color[i]=-1;
vis[i]=0;
V[i].clear();
}

for(int x =e-1; x>mid ; x--) //edge is greater than expected answer 
{
V[E[x].second.first].push_back( E[x].second.second );
V[E[x].second.second].push_back( E[x].second.first);
}  

check=true;	//assume graph is bipartite

while(Q.empty()==false)
Q.pop();

for(i=0;i<N&&check==true;i++)
if(vis[i]==0)
{
Q.push(i);
if(color[i]==-1)
color[i]=0;

bfs(i);	//check if graph formed from vector v is bipartite
}


if(check)
r=mid;
else
l=mid;

}

printf("%lld\n",E[r].first);


}

return 0;
}

