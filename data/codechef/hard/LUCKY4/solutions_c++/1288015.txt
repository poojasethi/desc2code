    #include <iostream>
    #include <stdio.h>
    using namespace std;
     
    class LuckyNumber
    {
    long iCj[11][11];
    long fTable[11][11];
    inline int getLCnt(int n){
    int in=0;if(n>=4) in++;if(n>=7) in++;
    return in;
    }
    inline long getF(int r,int i){
    return iCj[r][i]<<((r<<1)+r-(i<<1));
    }
    void calculateFTable(){
    int lcnt;
    lcnt=getLCnt(m[1]);
    fTable[1][0]=m[1]-lcnt+1;fTable[1][1]=lcnt;
    for(int d=2;d<=length;d++){
    lcnt=getLCnt(m[d]-1);
    fTable[d][0]=(m[d]-lcnt)*getF(d-1,0)+((m[d]==4||m[d]==7)?0:fTable[d-1][0]);
    for(int f=1;f<d;f++){
    fTable[d][f]=(m[d]-lcnt)*getF(d-1,f)+lcnt*getF(d-1,f-1)+((m[d]==4||m[d]==7)?fTable[d-1][f-1]:fTable[d-1][f]);
    }
    fTable[d][d]=lcnt*getF(d-1,d-1)+((m[d]==4||m[d]==7)?fTable[d-1][d-1]:0);
    }
    fTable[length][0]--;
    }
    public:
    short length;
    short tmp[12],*m;
    LuckyNumber(){
    //initialize iCj
    iCj[1][0]=iCj[1][1]=1;
    for(int i=2;i<=10;i++)
    {
    iCj[i][0]=iCj[i][i]=1;
    for(int j=1;j<=i/2;j++){
    iCj[i][j]=iCj[i][i-j]=iCj[i][j-1]*(i-j+1)/j;
    }
    }
    }
    inline void getM()
    {
    int i=11;
    while(((tmp[i]=getchar())<'0' || tmp[i]>'9') && tmp[i]!=EOF);
    length=0;
    do{
    tmp[i]-='0';
    length++;i--;
    }while((tmp[i]=getchar())>='0' && tmp[i]<='9');
    m=&tmp[i];
    calculateFTable();
    return;
    }
    long getCount(int len,int fval,bool respectMax=true){
    return respectMax ? fTable[len][fval] : getF(len,fval);
    }
    long getCount(int fval){
    return fTable[length][fval];
    }
    void printTable(){
    cout<<"\n=========F Table======m=";
    for(int i=length; i>0;i--)cout<<m[i];
    cout<<endl;
    for(int i=1;i<=length;i++){
    cout<<endl<<"d"<<i<<"::";
    for(int j=0;j<=i;j++)cout<<"F("<<j<<")="<<fTable[i][j]<<" ";
    }
    }
    };
     
    class LuckyArray
    {
    public:
    LuckyNumber ln;
    long long CF[51][11],k;
    int C[50];
    int n;
    inline void calculateCFTable(){
    for(int i=0;i<=ln.length;i++)CF[n][i]=1;
    for(int i=n-1;i>=1;i--){
    for(int j=0;j<=ln.length;j++){
    if(C[i]){
    if(CF[i+1][j]==-1)CF[i][j]=-1;
    else CF[i][j]=CF[i+1][j]*ln.getCount(j);
    }
    else{
    CF[i][j]=0;
    for(int k=0;k<=ln.length;k++){
    if(k==j) continue;
    if(CF[i+1][k]==-1){CF[i][j]=-1;break;}
    else CF[i][j]+=CF[i+1][k]*ln.getCount(k);
    }
    }
    if(CF[i][j]>k)CF[i][j]=-1;
    }
    }
    }
    void printCFTable(){
    cout<<"\n=========CCCF Table======c=";
    for(int i=1; i<n;i++)cout<<C[i];
    cout<<endl;
    for(int i=1;i<=n;i++){
    cout<<endl<<"n="<<i<<"::";
    for(int j=0;j<=ln.length;j++)cout<<"CF("<<j<<")="<<CF[i][j]<<" ";
    }
    cout<< endl;
    }
    void getSequece(){
    calculateCFTable();
    //check here for impossibility
    //printCFTable();
    int count=0;
    for(int i=0;i<=ln.length;i++){
    if(CF[1][i]==-1){count=-1;break;}
    count+=ln.getCount(i)*CF[1][i];
    if(count>k)break;
    }
    if(count!=-1 && count<k){printf("-1\n");return;}
    getRth(1,-1);
    printf("\n");
    }
    void getRth(int r,int prevFval){
    if(r>n) return;
    int end;
    bool respMax=true,iterComplete,gotZerosOnly=true;
    long tmp;
    short currResult[11];
    long long count,curr,cnt1,cnt2,lucky_cnt;
    lucky_cnt=0;
    //printf("\n============%dth Number=============\n",r);
    for(int p=ln.length;p>=1;p--){
    end=respMax ? ln.m[p]-1 : 9;
    count=0;iterComplete=false;cnt2=cnt1=-2;
    for(int i=((p==1&&gotZerosOnly)? 1: 0);i<=end;i++){
    if(i==0){
    curr=countSequences(r,p-1,lucky_cnt,false,prevFval,gotZerosOnly);
    }
    else if(i==4 || i==7){
    if(cnt2<-1)cnt2=countSequences(r,p-1,lucky_cnt+1,false,prevFval,false);
    curr=cnt2;
    }else{
    if(cnt1<-1)cnt1=countSequences(r,p-1,lucky_cnt,false,prevFval,false);//for except 4,7;
    curr=cnt1;
    }
    if(curr==-1 || count+curr >= k){
    k-=count;
    respMax=false;
    currResult[p]=i;
    if(i==4 || i==7)lucky_cnt+=1;
    if(gotZerosOnly && currResult[p]!=0)gotZerosOnly=false;
    iterComplete=true;
    break;
    }else count+=curr;
    }
    if(!iterComplete){
    k-=count;
    currResult[p]=ln.m[p];
    if(gotZerosOnly && currResult[p]!=0)gotZerosOnly=false;
    if(ln.m[p]==4 || ln.m[p]==7)lucky_cnt+=1;
    }
    //printContext(currResult,p,curr);
    }
    end=ln.length;
    for(end=ln.length;currResult[end]==0;end--);
    while(end>0){printf("%d",currResult[end]);end--;}
    printf(" ");
    getRth(r+1,lucky_cnt);
    }
    void printContext(short currResult[],int p,long long curr)
    {
    for(int end=ln.length;end>=p;end--){printf("%d",currResult[end]);}
    for(int i=p-1;i>=1;i--){
    printf("-");
    }
    printf("(k=%lld,curr=%lld)\n",k,curr);
    }
    inline long long countSequences(int r,int p,int lcnt,bool respMax,int prevFval,bool gotZerosOnly){
    if(p==0){
    if(r==1 || (C[r-1] && prevFval==lcnt) || (!C[r-1] && prevFval!=lcnt)) return CF[r][lcnt];
    else return 0;
    }
    long long count=0;
    int excl=-1,st,end;
    if(r==1){st=0;end=p;}
    else if(C[r-1]){
    st=end=prevFval-lcnt;
    if(st<0 || st>p)return 0;
    }
    else{st=0;end=p;excl=prevFval-lcnt;}
    for(int i=st;i<=end;i++){
    if(i==excl)continue;
    if(CF[r][i+lcnt]==-1)return -1;
    count+=ln.getCount(p,i,respMax)*CF[r][i+lcnt];
    if(gotZerosOnly && (i==0))count-=CF[r][i+lcnt];
    if(count>k)return -1;
    }
    return count;
    }
    };
     
     
    int main(){
    LuckyArray la;
    int T;
    scanf("%d",&T);
    for(int i=0;i<T;i++){
    scanf("%d",&la.n);
    la.ln.getM();
    //la.ln.printTable();
    scanf("%lld",&la.k);
    for(int i=1;i<=la.n-1;i++)scanf("%d",&la.C[i]);
    la.getSequece();
    }
    } 