#include<bits/stdc++.h>
using namespace std;
int num[100010],pre[1001][1001];
vector<int> indx[100010];
main()
{
	int n,maxi,m,l,r,next_block,prev_block;
	scanf("%d %d %d",&n,&maxi,&m);
	int sum[100010],i,j;
	//memset(sum,0,sizeof(sum));//sum[0]=50002;//maxi=-1e9;
	for(i=0;i<n;i++)
	scanf("%d",&sum[i]);//sum[i]+=sum[i-1];//maxi=max(maxi,sum[i]);//printf("%d\n",sum[i]);
	int block_sz=100;//printf("block_sz-->%d\n",block_sz);
	for(i=0;i<n;i+=block_sz)
	{
		for(j=0;j<=maxi;j++)num[j]=-1;
		int temp=0;
		for(j=i;j<n;j++)
		{
			if(num[sum[j]]==-1)num[sum[j]]=j;
			else temp=max(temp,j-num[sum[j]]);
			if((j+1)%block_sz==0){
			pre[i/block_sz][j/block_sz]=temp;}//printf("%d %d -->%d\n",i/block_sz,j/block_sz,temp);}
		}
		{
		pre[i/block_sz][(n-1)/block_sz]=temp;}//printf("%d %d -->%d\n",i/block_sz,j/block_sz,temp);}
	}
	for(i=0;i<n;i++)
	indx[sum[i]].push_back(i);int res;
	while(m--)
	{
		res=0;
		scanf("%d %d",&l,&r);
		l--;r--;
		if(l/block_sz!=r/block_sz)
		{
		next_block=(l/block_sz)*block_sz+block_sz;prev_block=(r/block_sz)*block_sz;
		if(prev_block!=next_block)
		res=pre[next_block/block_sz][(prev_block-1)/block_sz];else res=0;
		//printf("%d %d %d\n",next_block,prev_block,res);
		//printf("error1\n");
		for(i=l;i<next_block;i++)
		{
			j=lower_bound(indx[sum[i]].begin(),indx[sum[i]].end(),r+1)-indx[sum[i]].begin()-1;
			if(j<0)continue;
			res=max(res,indx[sum[i]][j]-i);
		}
		//printf("%d\n",res);
		for(i=prev_block;i<=r;i++)
		{
			j=lower_bound(indx[sum[i]].begin(),indx[sum[i]].end(),l)-indx[sum[i]].begin();
			if(j==indx[sum[i]].size())continue;
			res=max(res,i-indx[sum[i]][j]);
		}
		printf("%d\n",res);
		}
		else
		{
			for(i=l;i<=r;i++)
		{
			j=lower_bound(indx[sum[i]].begin(),indx[sum[i]].end(),r+1)-indx[sum[i]].begin()-1;
			if(j>=0)
			res=max(res,indx[sum[i]][j]-i);
		}
		printf("%d\n",res);	
		}
	}
}