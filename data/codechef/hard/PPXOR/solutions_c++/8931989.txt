#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>
#include <map>

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadll(long long* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

int N, K, M;
int T = 1;
int A[100000 + 1];
int X[100000 + 1];
int C[100000 + 1][32];

long long SolveSmartest()
{
	long long result = 0;

	X[0] = 0;
	for(int l = 1; l <= N; ++l)
	{
		int x = X[l] = A[l] ^ X[l - 1];
	}

	int x = X[N];
	for(int i = 0; i < 32; ++i)
	{
		C[N][i] = x & 1;
		x >>= 1;
	}
	for(int l = N - 1; l >= 1; --l)
	{
		int x = X[l];
		for(int i = 0; i < 32; ++i)
		{
			C[l][i] = C[l + 1][i] + (x & 1);
			x >>= 1;
		}
	}


	for(int l = 1; l <= N; ++l)
	{
		const int r = N - l + 1;
		int x = X[l-1];
		int two = 1;
		for(int i = 0; i < 32; ++i, two <<= 1)
		{
			if(x & 1)
			{
				result += (r - C[l][i]) * two;
			}
			else
			{
				result += C[l][i] * two;
			}
			x >>= 1;
		}
	}

	return result;
}

struct LR
{
  int l;
  int r;
  bool operator <(const LR &rh) const
  {
    if(l == rh.l)
      return r < rh.r;

    return l < rh.l;
  }

  LR(int _l, int _r) : l(_l), r(_r) {}
  LR() : l(0), r(0) {}
};

std::map<LR, long long> mapDP;

int main()
{

#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif


  fastread(&T);

  while(T--)
  {
    fastread(&N);

    for(int i = 1; i <= N; ++i)
    {
      fastread(A + i);
    }

    printf("%lld\n", SolveSmartest());
  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
