/**
* He who forgives and acknowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (set<long long>::iterator i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

const int MAX = 3000005;
const int MOD = 1000000007;
const int INF = 1000000000;

typedef long long ll;

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        int n;
        scanf("%d", &n);
        vector<ll> a(n+1), pref(n+1);
        for (int i = 1; i <= n; i++) {
            scanf("%lld", &a[i]);
            pref[i] = pref[i-1]^a[i];
        }
        /*for (int i = 0; i <= n; i++) {
            cout << pref[i] << " ";
        }
        cout << endl;*/
        long long answer = 0;
        for (int j = 0; j <= 31; j++) {
            ll c1 = 0, c0 = 0;
            for (int i = 0; i <= n; i++) {
                if (pref[i]&(1LL<<j)) {
                    c1++;
                } else {
                    c0++;
                }
            }
            answer += c0*c1*(1LL<<j);
        }
        printf("%lld\n", answer);
    }
}
