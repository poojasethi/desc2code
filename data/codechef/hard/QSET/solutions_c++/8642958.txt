#include <bits/stdc++.h>

using namespace std;
#define MAX 100005
struct node
{
    int left[3],right[3];
    int total;
    long long int ans;
    node()
    {
        memset(left,0,sizeof(left));
        memset(right,0,sizeof(right));
        ans=0;
    }
};
string arr;
node tree[6*MAX];

node merge(node a,node b)
{
    node c;
    c.ans=a.ans+b.ans;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if((i+j)%3==0)
            {
                c.ans+=((long long int)(a.right[i]))*((long long int)(b.left[j]));
            }
        }
    }
    for(int i=0;i<3;i++)
    {
        c.left[i]=a.left[i]+b.left[(6-a.total+i)%3];
        c.right[i]=b.right[i]+a.right[(6-b.total+i)%3];
    }
    c.total=(a.total+b.total)%3;
    return c;
}
void build_tree(int pos,int a,int b)
{
    if(a>b)
    return;
    if(a==b)
    {
        int p=(arr[a]-'0')%3;
        tree[pos]=node();
        tree[pos].left[p]=1;
        tree[pos].right[p]=1;
        tree[pos].total=p;
        if(p==0)
        tree[pos].ans=1;
        return;
    }
    build_tree(pos*2,a,(a+b)/2);
    build_tree(pos*2+1,(a+b)/2+1,b);
    tree[pos]=merge(tree[pos*2],tree[pos*2+1]);
}
void update_tree(int pos,int a,int b,int i,int val)
{
    if(a>b||a>i||b<i)
    return;
    if(a==b)
    {
        int p=(val)%3;
        tree[pos]=node();
        tree[pos].left[p]=1;
        tree[pos].right[p]=1;
        tree[pos].total=p;
        if(p==0)
        tree[pos].ans=1;
        return;
    }
    update_tree(pos*2,a,(a+b)/2,i,val);
    update_tree(pos*2+1,(a+b)/2+1,b,i,val);
    tree[pos]=merge(tree[pos*2],tree[pos*2+1]);
}
node query_tree(int pos,int a,int b,int i,int j)
{
    if(a>b||a>j||b<i)
    {
        node n;
        return n;
    }
    if(i<=a&&b<=j)
    return tree[pos];
    node q1=query_tree(pos*2,a,(a+b)/2,i,j);
    node q2=query_tree(pos*2+1,(a+b)/2+1,b,i,j);
    node res=merge(q1,q2);
    return res;
}
int main()
{
    int n,m,i,type,l,r;
    cin>>n>>m;
    cin>>arr;
    build_tree(1,0,n-1);
    
    while(m--)
    {
        cin>>type;
        if(type==1)
        {
            cin>>l>>r;
            update_tree(1,0,n-1,l-1,r);
        }
        else
        {
            cin>>l>>r;
            cout<<query_tree(1,0,n-1,l-1,r-1).ans<<endl;
        }
    }
    return 0;
}
