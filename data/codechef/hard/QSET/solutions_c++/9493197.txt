#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

const int maxn = 1e5 + 10;

struct node {
    int cnt[3]; int add;
    node() { add = 0; memset(cnt, 0, sizeof(cnt)); }
} t[maxn*4];

int n, m, a[maxn], s[maxn];

long long c2n(int n) { return 1LL * n * (n-1) / 2; }

void combine(node & t, node & l, node & r) {
    for(int i = 0; i < 3; ++i)
        t.cnt[i] = l.cnt[i] + r.cnt[i];
}

void build(int k, int l, int r) {
    if (l == r) return void ( ++t[k].cnt[s[l]] );
    int m = (l+r) / 2;
    build(k*2,l,m); build(k*2+1,m+1,r);
    combine(t[k], t[k*2], t[k*2+1]);
}

void push_down(int k, int l, int r) {
    if (t[k].add == 0) return;
    if (l != r) {
        t[k*2].add = (t[k*2].add + t[k].add) % 3;
        t[k*2+1].add = (t[k*2+1].add + t[k].add) % 3;
    }
    int v = t[k].add;
    node x;
    for(int i = 0; i < 3; ++i)
        x.cnt[(i+v)%3] = t[k].cnt[i];
    t[k] = x;
}

void update(int k, int l, int r, int i, int v) {
    if (i <= l) {
        t[k].add = (t[k].add + v) % 3;
        push_down(k, l, r);
        return;
    }
    push_down(k, l, r);
    if (r < i) return;
    int m = (l+r) / 2;
    update(k*2, l, m, i, v);
    update(k*2+1, m+1, r, i, v);
    combine(t[k], t[k*2], t[k*2+1]);
}

node get(int k, int l, int r, int i, int j) {
    push_down(k,l,r);
    if (j<l || i>r) return node();
    if (i <= l && r <= j) return t[k];
    int m = (l+r) / 2;
    node u = get(k*2,l,m,i,j), v = get(k*2+1,m+1,r,i,j);
    for(int i = 0; i < 3; ++i)
        u.cnt[i] += v.cnt[i];
    combine(t[k], t[k*2], t[k*2+1]);
    return u;
}

int main() {
    //freopen("input.txt", "r", stdin);

    scanf("%d%d\n", &n, &m);
    for(int i = 1; i <= n; ++i) {
        char x;
        scanf("%c", &x); a[i] = x - '0';
        s[i] = (s[i-1] + a[i]) % 3;
    }
    build(1,0,n);

    for(int i = 1; i <= m; ++i) {
        int k, x, y;
        scanf("%d %d %d", &k, &x, &y);
        if (k == 2) {
            node ret = get(1,0,n,x-1,y);
            long long ans = c2n(ret.cnt[0]) + c2n(ret.cnt[1]) + c2n(ret.cnt[2]);
            printf("%lld\n", ans);
        }
        else {
            int v = (y-a[x]) % 3; if (v<0) v += 3;
            update(1,0,n,x,v);
            a[x] = y;
        }
    }
}
