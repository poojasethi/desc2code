#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
struct segtree {
ll left[3],right[3],cnt,total;
segtree()
{
memset(left,0,sizeof(left));
memset(right,0,sizeof(right));
cnt=0;
}
};


segtree tree[600000];
string arr;


void assign(ll node,ll value)
{
	tree[node]=segtree();
	value%=3;
	tree[node].left[value]=1;
		tree[node].right[value]=1;
		tree[node].total=value;
	if(value==0)
	tree[node].cnt=1;
}
segtree merge(segtree a,segtree b)
{
	segtree ret;
	ret.cnt=a.cnt+b.cnt;
	long long i,j;
	for(i=0;i<3;i++)
	for(j=0;j<3;j++)
	{if((i+j)%3==0)
	ret.cnt+=(a.right[i]*b.left[j]);
	}
			
			for(i=0;i<3;i++)
			{
				ret.left[i]=a.left[i]+b.left[(i-a.total+6)%3];
								ret.right[i]=b.right[i]+a.right[(i-b.total+6)%3];
							}
							
							ret.total=(a.total+b.total)%3;
							return ret;
						}
						


void build_tree(ll node,ll  i,ll j)
{if(i>j)
return ;
	
	 else if(i==j)
	{assign(node,arr[i]-'0');
	return;}
else{
	build_tree(node*2,i,(i+j)/2);
			build_tree(node*2+1,(i+j)/2+1,j);
			tree[node]=merge(tree[node*2],tree[node*2+1]);
}	
		
	}
	
	segtree query_tree(ll node ,ll i ,ll j,ll l, ll r)
	{if(j<l||i>r||i>j)
		{
			segtree ret;
			return ret;}
			
			
			else if(i>=l&&j<=r)
				return tree[node];
				
				
				
				else
				{
					segtree ret1=query_tree(node*2,i,(i+j)/2,l,r);
										segtree ret2=query_tree(node*2+1,(i+j)/2+1,j,l,r);
 return merge(ret1,ret2);
					
				}}
				
				void update_tree(ll node ,ll i,ll j,ll index,ll value)
				{
					if(j<index||i>index||i>j)
					return ;
					 if(i==j)
			assign(node,value);
			else
			{
				update_tree(node*2,i,(i+j)/2,index,value);
								update_tree(node*2+1,(i+j)/2+1,j,index,value);
								tree[node]=merge(tree[node*2],tree[node*2+1]);
							}
						}

				
				
				int main()
				{
					
					ll n,m,d,l,r,i;
					scanf("%lld%lld",&n,&m);
					cin>>arr;
					build_tree(1,0,n-1);
					for(i=0;i<m;i++)
					{
						scanf("%lld%lld%lld",&d,&l,&r);
						
						if(d==2)
						printf("%lld\n",query_tree(1,0,n-1,l-1,r-1).cnt);
						else
						update_tree(1,0,n-1,l-1,r);
					}
					return 0;
					
				}
						
					
					
					
				
				
				
				
		
		
		

		
	
	 


	
	



















