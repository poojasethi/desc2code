#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector< II > VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int ll;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
/*template <typename Arg1>
void __f(const char * name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1,',');cerr.write(names,comma - names) << " : " << arg1<<" | ";__f(comma+1,args...);
}*/
#else
#define trace(...)
#endif
int max(int p,int q)
{
    return (p>q)?p:q;
}
int min(int p,int q)
{
    return (p<q)?p:q;
}

ll b[400005][4],a[100005];
void buildsegtree(ll i,ll l,ll r)
{
    if(l>r)
    {
        return;
    }
    else if(l==r)
    {
        b[i][a[l]%3]++;
        b[i][3]=a[l];
    }
    else
    {
        ll m=(l+r)/2;
        buildsegtree(2*i,l,m);
        buildsegtree(2*i+1,m+1,r);
        b[i][3]= b[2*i][3] + b[2*i+1][3];
        if(b[2*i][3]%3==1)
        {
            b[i][0]=b[2*i][0]+b[2*i+1][2];
            b[i][1]=b[2*i][1]+b[2*i+1][0];
            b[i][2]=b[2*i][2]+b[2*i+1][1];
        }
        else if(b[2*i][3]%3==2)
        {
            b[i][0]=b[2*i][0]+b[2*i+1][1];
            b[i][1]=b[2*i][1]+b[2*i+1][2];
            b[i][2]=b[2*i][2]+b[2*i+1][0];
        }
        else if(b[2*i][3]%3==0)
        {
            b[i][0]=b[2*i][0]+b[2*i+1][0];
            b[i][1]=b[2*i][1]+b[2*i+1][1];
            b[i][2]=b[2*i][2]+b[2*i+1][2];
        }
    }
}

void update(ll i,ll l,ll r,ll pos,ll val)
{
    if(pos<l || pos>r)
    {
        return;
    }
    if(l>r)
    {
        return;
    }
    else if(l==r && l==pos)
    {
        b[i][0]=0;
        b[i][1]=0;
        b[i][2]=0;
        b[i][val%3]=1;
        b[i][3]=val;
    }
    else
    {
        ll m=(l+r)/2;
        update(2*i,l,m,pos,val);
        update(2*i+1,m+1,r,pos,val);
        b[i][3]= b[2*i][3] + b[2*i+1][3];
        if(b[2*i][3]%3==1)
        {
            b[i][0]=b[2*i][0]+b[2*i+1][2];
            b[i][1]=b[2*i][1]+b[2*i+1][0];
            b[i][2]=b[2*i][2]+b[2*i+1][1];
        }
        else if(b[2*i][3]%3==2)
        {
            b[i][0]=b[2*i][0]+b[2*i+1][1];
            b[i][1]=b[2*i][1]+b[2*i+1][2];
            b[i][2]=b[2*i][2]+b[2*i+1][0];
        }
        else if(b[2*i][3]%3==0)
        {
            b[i][0]=b[2*i][0]+b[2*i+1][0];
            b[i][1]=b[2*i][1]+b[2*i+1][1];
            b[i][2]=b[2*i][2]+b[2*i+1][2];
        }
    }
}

ll rem1,rem2,rem0,sum;
void giveans(ll i,ll l,ll r,ll reql,ll reqr)
{
    if(reql>reqr)
    {
        rem0=0;
        rem1=0;
        rem2=0;
        sum=0;
        return;
    }
    else if(l==reql && r==reqr)
    {
        sum=b[i][3];
        rem0=b[i][0];
        rem1=b[i][1];
        rem2=b[i][2];
    }
    else
    {
        ll m=(l+r)/2,rem10,rem11,rem12,sum1,rem20,rem21,rem22,sum2;
        giveans(2*i,l,m,reql,min(m,reqr));
        rem10=rem0;
        rem11=rem1;
        rem12=rem2;
        sum1=sum;
        giveans(2*i+1,m+1,r,max(m+1,reql),reqr);
        rem20=rem0;
        rem21=rem1;
        rem22=rem2;
        sum2=sum;
        if(sum1%3==0)
        {
            sum+=sum1;
            rem0+=rem10;
            rem1+=rem11;
            rem2+=rem12;
        }
        else if(sum1%3==1)
        {
            sum+=sum1;
            rem0=rem10+rem22;
            rem1=rem11+rem20;
            rem2=rem12+rem21;
        }
        else if(sum1%3==2)
        {
            sum+=sum1;
            rem0=rem10+rem21;
            rem1=rem11+rem22;
            rem2=rem12+rem20;
        }
    }
    //printf("%lld %lld %lld %lld %lld\n",l,r,rem0,rem1,rem2);
}

int main()
{
    ll n,q,i,ans,temp1,x,y,l,r;
    char str[100005];
    sll(n);
    sll(q);
    cin >> str;
    for(i=0;i<n;i++)
    {
        a[i]=str[i]-'0';
    }
    buildsegtree(1,0,n-1);
    while(q--)
    {
        sll(temp1);
        if(temp1==1)
        {
            sll(x);
            sll(y);
            update(1,0,n-1,x-1,y);
        }
        else
        {
            sll(l);
            sll(r);
            giveans(1,0,n-1,l-1,r-1);
            ans=((rem0+1)*rem0)/2;
            ans+=((rem1-1)*rem1)/2;
            ans+=((rem2-1)*rem2)/2;
            lldout(ans);
        }
    }
    return 0;
}
