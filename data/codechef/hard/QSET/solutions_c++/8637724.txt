#include<stdio.h>
#include<iostream>
#include<string.h>

#define MAX 100005
#define gcul getchar_unlocked

using namespace std;

char A[MAX];
int N,M,T,C,D;

struct node
{
    int sum;
    int rem[3];
}tree[3*MAX];

inline int ip(){
    int n = 0;
    register int ch = gcul();
    while(ch<'0' || ch>'9'){
        ch = gcul();
    }
    while(ch>='0' && ch<='9'){
        n = (n<<3) + (n<<1) + (ch-'0');
        ch = gcul();
    }
    return n;
}

inline void init(struct node &x)
{
    x.sum = 0;
    x.rem[0] = x.rem[1] = x.rem[2] = 0;
}

inline void merge(struct node &res, struct node &left, struct node &right)
{
    init(res);
    res.sum = (left.sum + right.sum)%3;
    
    for(int i = 0;i < 3;++i)
    {
        res.rem[i] += left.rem[i];
        res.rem[(i+left.sum)%3] += right.rem[i];
    }
}

inline void buildTree(int si, int ss, int se)
{
    if(ss > se)
        return;
    
    if(ss == se)
    {
        init(tree[si]);
        tree[si].sum = (A[ss]-'0')%3;
        tree[si].rem[tree[si].sum] = 1;
        
        return;
    }
    
    int mid = (ss+se)>>1;
    buildTree((si<<1)+1,ss,mid);
    buildTree((si<<1)+2,mid+1,se);
    merge(tree[si],tree[(si<<1)+1],tree[(si<<1)+2]);
}

inline void update(int si, int ss, int se, int pos, int val)
{
    if(ss > se)
        return;
        
    if(ss == se)
    {
        init(tree[si]);
        tree[si].sum = val%3;
        tree[si].rem[tree[si].sum] = 1;
        
        return;
    }
    
    int mid = (ss+se)>>1;
    if(pos <= mid)
        update((si<<1)+1,ss,mid,pos,val);
    else
        update((si<<1)+2,mid+1,se,pos,val);
    merge(tree[si],tree[(si<<1)+1],tree[(si<<1)+2]);
}

inline struct node query(int si, int ss, int se, int a, int b)
{
    struct node res = {0,{0,0,0}};
    
    if(ss > se || b < ss || a > se)
        return res;
    
    if(ss >= a && se <= b)
        return tree[si];
    
    int mid = (ss+se)>>1;
    struct node left = query((si<<1)+1,ss,mid,a,b);
    struct node right = query((si<<1)+2,mid+1,se,a,b);
    merge(res,left,right);
    
    return res;
}

int main() {
    N = ip();
    M = ip();
    gets(A);
    buildTree(0,0,N-1);
    while(M--)
    {
        T = ip();
        C = ip();
        D = ip();
        if(T == 1)
            update(0,0,N-1,C-1,D);
        else
        {
            struct node ans = query(0,0,N-1,C-1,D-1);
            long long ans1 = 0;
            ans.rem[0]++;
            for(int i = 0;i < 3;++i)
                ans1 += (ans.rem[i]*1LL*(ans.rem[i]-1))>>1;
            printf("%lld\n",ans1);
        }
    }
	
	return 0;
}
