#include<iostream>
#define SIZE 100002
#include<cstring>
typedef long long LL;
using namespace std;

string arr;

struct segtree
{
	LL prefix[3];
	LL suffix[3];
	LL cnt;
	LL total;
	
	segtree()
	{
		memset(prefix,0,sizeof(prefix));
		memset(suffix,0,sizeof(suffix));
		cnt=0;
	}
}tree[4*SIZE];


segtree merge(segtree a,segtree b)
{
	segtree ret;
	ret.cnt=a.cnt+b.cnt;
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			if((i+j)%3==0)
			{
				ret.cnt+=a.suffix[i]*b.prefix[j];
			}
		}
	}
	
	for(int i=0;i<3;i++)
	{
		ret.prefix[i]=a.prefix[i]+b.prefix[(3-a.total+i)%3];
		ret.suffix[i]=b.suffix[i]+a.suffix[(3-b.total+i)%3];
	}
	
	ret.total=(a.total+b.total)%3;
	
	return ret;
	
}

void assign(int node,int p)
{
	tree[node]=segtree();
	tree[node].prefix[p]=1;
	tree[node].suffix[p]=1;
	tree[node].total=p;
	if(p==0)
	{
		tree[node].cnt=1;
	}
}

void build_tree(int node,int a,int b)
{
	if(a>b)
	{
		return;
	}
	if(a==b)
	{
		assign(node,(arr[a]-'0')%3);
		return;
	}
	build_tree(2*node,a,(a+b)/2);
	build_tree(2*node+1,1+(a+b)/2,b);
	tree[node]=merge(tree[2*node],tree[2*node+1]);
}

segtree query_tree(int node,int a,int b,int i,int j)
{
	if(a>b||a>j||b<i)
	{
		segtree ret;
		return ret;
	}
	if(a>=i && b<=j)
	{
		return tree[node];
	}
	
	segtree q1=query_tree(2*node,a,(a+b)/2,i,j);
	segtree q2=query_tree(2*node+1,1+(a+b)/2,b,i,j);
	
	return merge(q1,q2);
}

void update_tree(int node,int a,int b,int i,int value)
{
	if(a>b||a>i||b<i)
	{
		return;
	}
	if(a==b)
	{
		assign(node,value%3);
		return;
	}
	update_tree(2*node,a,(a+b)/2,i,value);
	update_tree(2*node+1,1+(a+b)/2,b,i,value);
	tree[node]=merge(tree[2*node],tree[2*node+1]);
}

int main()
{
	LL n,q,flag,l,r;
	cin>>n>>q;
	
	cin>>arr;
	
	build_tree(1,0,n-1);
	
	while(q>0)
	{
		cin>>flag>>l>>r;
		
		if(flag==1)
		{
			update_tree(1,0,n-1,l-1,r);
		}
		else
		{
			LL ans=query_tree(1,0,n-1,l-1,r-1).cnt;
			cout<<ans<<endl;
		}
		
		q--;
	}
	
	return 0;
}
