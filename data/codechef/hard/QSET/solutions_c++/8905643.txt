#include <bits/stdc++.h>

using namespace std;
#define MOD 1000000007
#define ll long long

using namespace std;
struct tree{
    ll ans;
    ll prefix[3];
    ll suffix[3];
    int sum;
}st[500005];
string s;
int get_mid(int u,int v)
{
    return u+(v-u)/2;
}

void init(int ci,int v)
{
    st[ci].sum=v;
    st[ci].ans=(v==0)?1:0;
    for(int i=0;i<3;i++)
    {
        st[ci].prefix[i]=(v==i)?1:0;
        st[ci].suffix[i]=(v==i)?1:0;
    }
}

void merge_nodes(int ci)
{
    st[ci].ans=st[2*ci+1].ans+st[2*ci+2].ans;
    st[ci].sum=(st[2*ci+1].sum+st[2*ci+2].sum)%3;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if((i+j)%3==0)
                st[ci].ans+=st[2*ci+1].suffix[i]*st[2*ci+2].prefix[j];
        }
    }

    for(int i=0;i<3;i++)
    {
        st[ci].prefix[i]=st[2*ci+1].prefix[i]+st[2*ci+2].prefix[(i-st[2*ci+1].sum+3)%3];
        st[ci].suffix[i]=st[2*ci+2].suffix[i]+st[2*ci+1].suffix[(i-st[2*ci+2].sum+3)%3];
    }
}

void build_tree(int ss,int se,int ci)
{
    if(ss==se)
    {
        init(ci,(s[ss]-'0')%3);
        return;
    }
    int mid=get_mid(ss,se);
    build_tree(ss,mid,2*ci+1);
    build_tree(mid+1,se,2*ci+2);
    merge_nodes(ci);
}

void update(int ss,int se,int pos,int ci,int v)
{
    if(pos>se||pos<ss)
        return;
    if(ss==se)
    {
        init(ci,v);
        return;
    }
    int mid=get_mid(ss,se);
    update(ss,mid,pos,2*ci+1,v);
    update(mid+1,se,pos,2*ci+2,v);
    merge_nodes(ci);
}

tree query(int ss,int se,int qs,int qe,int ci)
{
    if(ss>qe||se<qs){
        tree temp;
        memset(temp.prefix,0,sizeof(temp.prefix));
        memset(temp.suffix,0,sizeof(temp.suffix));
        temp.ans=0;
        temp.sum=0;
        return temp;
    }
    if(ss>=qs&&se<=qe)
    {
        //cout<<ci<<endl;
        //cout<<st[ci].ans<<" "<<st[ci].sum<<endl;
        return st[ci];
    }
    int mid=get_mid(ss,se);
    tree l=query(ss,mid,qs,qe,2*ci+1);
    tree r=query(mid+1,se,qs,qe,2*ci+2);
    tree ret;
    ret.ans=l.ans+r.ans;
    ret.sum=(l.sum+r.sum)%3;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if((i+j)%3==0)
                ret.ans+=l.suffix[i]*r.prefix[j];
        }
    }
    for(int i=0;i<3;i++)
    {
        ret.prefix[i]=l.prefix[i]+r.prefix[(i-l.sum+3)%3];
        ret.suffix[i]=r.suffix[i]+l.suffix[(i-r.sum+3)%3];
    }
    return ret;
}

int main()
{
    int n,q;
    scanf("%d%d",&n,&q);
    cin>>s;
    build_tree(0,n-1,0);
    while(q--)
    {
        int type,x,y;
        scanf("%d%d%d",&type,&x,&y);
        if(type==1)
        {
            update(0,n-1,x-1,0,y%3);
        }
        else
        {
            printf("%lld\n",query(0,n-1,x-1,y-1,0).ans);
        }
    }
    return 0;
}
