#include <cstdio>
#include <algorithm>
using namespace std;
const int MAXN = 10005;
int n, m, k;
int T[MAXN], P[MAXN];
int fall[MAXN];

bool canGet(int t) {
	int i = 0;
	long long got = 0;
	for (i = 0; i<m; i++) {
		if (t>=T[i]) {
			fall[i] = 1 + (t-T[i])/P[i];
		} else fall[i] = 0;
	}
	sort(fall, fall+m);
	for (int i=0; i<n; i++) {
		got += fall[m-1-i];
	}
	return got>=k;
}

int main() {
	int t;
	scanf("%d", &t);
	while (t--) {
		scanf("%d %d %d", &m, &n, &k);
		for (int i=0; i<m; i++) {
			scanf("%d", &T[i]);
		}
		for (int i=0; i<m; i++) {
			scanf("%d", &P[i]);
		}
		int l = 1; 
		int r = 1000000000;
		while (l<r) {
			int m = (l+r)/2;
			if (canGet(m)) {
				r = m;
			} else {
				l = m+1;
			}
		}
		printf("%d\n", r);
	}
}