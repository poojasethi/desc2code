#include<stdio.h>
#include<cmath>
#include<algorithm>
using namespace std;
#define MAX 10005
int nuts[MAX],T[MAX],P[MAX];
int m,k,n;
long long int tot_nuts;
inline bool compare(int t)
{
int i;
for(i=0;i<m;i++)
if(t>=T[i])
nuts[i]=(t-T[i])/P[i]+1;
else
nuts[i]=0;
 
nth_element(nuts,nuts+m-n,nuts+m);
 
tot_nuts=0;
for(i=m-n;i<m;i++)
tot_nuts+=nuts[i];
 
return tot_nuts>=k;
}
inline int binary_search(int low,int high)
{
int mid;
while(low<high)
{
mid=(low+high)>>1;
if(compare(mid))
high=mid;
else
low=mid+1;
}
return low;
}
int main()
{
int t,i,min;
scanf("%d",&t);
 
while(t--)
{
scanf("%d%d%d",&m,&n,&k);
if(n>m)
n=m;
for(i=0;i<m;i++)
scanf("%d",&T[i]);
for(i=0;i<m;i++)
scanf("%d",&P[i]);
 
min=k*P[0]+T[0];
for(i=1;i<m;i++)
if(min>k*P[i]+T[i])
min=k*P[i]+T[i];
printf("%d\n",binary_search(0,min));
}
return 0;
}