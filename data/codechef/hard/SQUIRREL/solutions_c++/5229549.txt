#include<iostream>
#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<string>
#include<algorithm>
#include<stack>
#include<cmath>

#define max(x, y) ((x) > (y) ? (x) : (y))

#define min(x, y) ((x) < (y) ? (x) : (y))

#define FOR(i, n) for(int i=0; (i) < (int)(n); ++i)


using namespace std;

inline void readint(int &x)
{
	register int c = getchar_unlocked();
	x = 0;
	for(;(c<48 || c>57);c = getchar_unlocked());
	for(;c>47 && c<58;c = getchar_unlocked()) {x = (x<<1) + (x<<3) + c - 48;}
}

inline void writeint(int x, char endchar)
{
	if(x == 0)
		putchar_unlocked('0');
	else
	{
		int cnt = 0;
		char ch[20];
		while(x != 0)
		{
			ch[cnt++] = x%10 + '0';
			x /= 10;
		}
		for(int i=cnt - 1; i>=0; --i)
			putchar_unlocked(ch[i]);
	}
	putchar_unlocked(endchar);
}

inline void writestring(const char* ch)
{
	while(*ch != '\0')
		putchar_unlocked(*(ch++));
	putchar_unlocked('\n');
}

int t[10001];
int p[10001];
int temp[10001];

long long int time(long long int val, int n, int m)
{
	FOR(i, m)temp[i] = val < t[i] ? 0 : 1 + (val - t[i])/p[i];
	sort(temp, temp + m);
	long long int vv = 0;
	FOR(i, min(m, n))vv += temp[m-1-i];
	return vv;
}


long long int search(long long int st, long long int en, long long int k, int n, int m)
{
	long long int mid;
	while(en > st + 1)
	{
		mid = (st + en)/2;
		if(time(mid, n, m) >= k)
			en = mid;
		else
			st = mid;
	}
	return en;
}

int main()
{
	int tt;
	int m, n, k;
	readint(tt);
	while(tt--)
	{
		readint(m);
		readint(n);
		readint(k);
		FOR(i, m)readint(t[i]);
		FOR(i, m)readint(p[i]);
		long long int mi = 1000000000L;
		FOR(i, m)
		{
			if(mi > t[i] + (k-1) * p[i])
				mi = t[i] + (k-1) * p[i];
		}
		writeint(search(0, mi, k, n, m), '\n');
	}
	return 0;
}

