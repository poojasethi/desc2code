//
//AUTHOR: KISLAY
//DATE: Tue Feb 8 19:28:51 IST 2011
#include <vector>
#include <cassert>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <fstream>
#include <sstream>
#include<ctype.h>
 
#define PI 3.1415926535897932384626433832795028841971693993751058209749Lf
#define INF 2000000000
#define INFI 1e37
#define pb push_back
#define PRINT(x)           cout << #x << "  " << x << endl
#define BUF 4096
int t[10000+10];
int p[10000+10];
int nuts[10000+10];
char ibuf[BUF];
int ipt = BUF;
 
int readInt() {
	while (ipt < BUF && ibuf[ipt] < '0') ipt++;
	if (ipt == BUF) {
		fread(ibuf, 1, BUF, stdin);
		ipt = 0;
		while (ipt < BUF && ibuf[ipt] < '0') ipt++;
	}
	int n = 0;
	while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
	if (ipt == BUF) {
		fread(ibuf, 1, BUF, stdin);
		ipt = 0;
		while (ipt < BUF && ibuf[ipt] >= '0') n = (n*10)+(ibuf[ipt++]-'0');
	}
	return n;
}
 
using namespace std;
int m,n,k;
int min_max;
long long total;
bool comp(int tt)
{
	total=0;
	for(int i=0;i<m;i++)
	{
		if(t[i]<=tt)	
		{
			nuts[i]=(tt-t[i])/p[i]+1;
		}
		else
			nuts[i]=0;
	}
	nth_element(nuts,nuts+m-n,nuts+m);
	for(int i=m-n;i<m;i++)
	{
		total+=nuts[i];
	}
	return total>=k;
 
}
 
int bbsearch(int low, int high)
{
	int mid;
	mid=(low+high)>>1;
	while(low<high)
	{
		mid=(low+high)>>1;
		if(comp(mid))
			high=mid;
		else
			low=mid+1;
	}
	return low;
}
int main()
{
	int tt;
	
	tt=readInt();
	while(tt--)
	{
		m=readInt();
	//	PRINT(n);
	//	PRINT(m);
	//	PRINT(k);
		n=readInt();
		k=readInt();
		n=min(n,m);
		for(int i=0;i<m;i++)
			t[i]=readInt();
		for(int i=0;i<m;i++)
			p[i]=readInt();
		min_max=k*p[0]+t[0];
		for(int i=1;i<m;i++)
			min_max=min(min_max,(k*(p[i])+t[i]));
		printf("%d\n",bbsearch(0,min_max));
		
	}
	
 
	return 0;
} 
