/*
 * http://www.codechef.com/problems/SQUIRREL
 */

#include <cstdio>
#include <cstdlib>
#include <algorithm>

#define M 10010
#define min(a,b) (a>b?b:a)

int T[M];
int P[M];
int nuts[M]; // chestnuts of a chestnut tree 
int t, m, n, k;
int min_of_max;
long long int sum;
int i;

using namespace std;
/*
void nth_element(int s, int e, int term) {
  if (s >= e) return;
  int k = s, j = e;
  int pivot = nuts[k];
  while (j>=s && nuts[j]>pivot) j--;
  if (j>=s) nuts[k] = nuts[j];
  while (k<=m && nuts[k]<pivot) k++;
  if (k<=m) nuts[j] = nuts[k];
  nuts[k] = pivot;
  if ((term-1)<k) nth_element(s, k, term);
  else if ((term-1)>k)nth_element(k, e, term-k);
}
*/

int compare(int time){
  sum = 0;
  for(i=0; i<m; i++) {
    if (time >= T[i])
      nuts[i] = (time-T[i])/P[i] + 1;
    else 
      nuts[i] = 0;
  }
  nth_element(nuts,nuts+m-n,nuts+m);
  //if ((m-n)!=0) nth_element(0, m-1, m-n);
  for(i=m-n; i<m; i++)
    sum += nuts[i];
  if (sum >= k) return 1;
  else return 0;
}

int binary_search(int s, int e){
  int lower = s;
  int higher = e;
  while(lower < higher){
    int mid = (higher+lower)>>1;
    if(compare(mid)) higher = mid;
    else lower = mid+1;
  }  
  return lower;
}

int main() {
  scanf("%d", &t);
  while((t--)>0) {
    scanf("%d %d %d", &m, &n, &k);
    n = min(n, m);
    for (i=0; i<m; i++) {
      scanf("%d", T+i);
    }
    for (i=0; i<m; i++) {
      scanf("%d", P+i);
    }
    
    min_of_max = T[0] + k * P[0];
    for(i=1; i<m; i++){
      if (min_of_max > (T[i]+k*P[i]))
        min_of_max = T[i] + k*P[i];
    }
    printf("%d\n", binary_search(0, min_of_max));
  }
  return 0;
}
