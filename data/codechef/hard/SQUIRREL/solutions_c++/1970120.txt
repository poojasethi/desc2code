#include<stdio.h>
#include<algorithm>
#define int64 long long

//FastIO begin

#define BUFFERSIZE 2000000

char *ipos, *opos, InpFile[BUFFERSIZE], OutFile[BUFFERSIZE], DIP[20];

inline int ni(int flag=0)
{
    while(*ipos <= 32) ++ipos;
    if(flag) return (*ipos++ - '0');
    int x=0, neg=0;
    char c;
    while(true)
    {
        c=*ipos++;
        if(c == '-') neg = 1;
        else
        {
            if(c<=32) return neg?-x:x;
            x=(x<<1)+(x<<3)+c-'0';
        }
    }
}

inline int ni64(int flag=0)
{
    while(*ipos <= 32) ++ipos;
    if(flag) return (*ipos++ - '0');
    int64 x=0, neg=0;
    char c;
    while(true)
    {
        c=*ipos++;
        if(c == '-') neg = 1;
        else
        {
            if(c<=32) return neg?-x:x;
            x=(x<<1)+(x<<3)+c-'0';
        }
    }
}

inline void pi(int64 x,int flag = 0)
{
    int64 y,dig=0;
    while (x||!dig)
    {
        y=x/10;
        DIP[dig++]=x-((y << 3) + (y << 1))+'0';
        x=y;
    }
    while (dig--) *opos++=DIP[dig];
    *opos++= flag ? '\n' : ' ';
}

inline void InitFASTIO()
{
    ipos = InpFile; opos = OutFile;
    fread(InpFile,2000000,1,stdin);
}

inline void FlushFASTIO()
{
    fwrite(OutFile,opos-OutFile,1,stdout);
}

//FastIO end

const int MaxN = 10005;
int m,n;
int64 T[MaxN];
int64 P[MaxN];
int64 temp[MaxN];

int64 MaxCollect2(int64 t)
{
    for(int i=0; i<m; ++i)
    {
        if(t >= T[i])
        {
            temp[i] = ((t-T[i])/P[i]) + 1;
        }
        else
        {
            temp[i] = 0;
        }
    }
    std::sort(temp,temp+m);
    int64 ans = 0;
    for(int i=m-1; i>=m-n; i--)
    {
        ans += temp[i];
    }
    return ans;
}

int64 FirstOccurence(int64 key, int64 size)
{
    int64 left = 0;
    int64 right = size-1;
    int64 mid;
    int64 L;
    
    while(left < right)
    {
        mid = (left + right)/2;
        L = MaxCollect2(mid);
        if(L >= key)
        {
            right = mid;            
        }
        else if(L < key)
        {
            left = mid+1;
        }
    }
    return right;
}

int main()
{
    InitFASTIO();
	int t;
    int64 k;
    
    t = ni();
    
    while(t--)
    {
        m = ni();
        n = ni();
        k = ni64();
        
        if(n>m)
        {
            n = m;
        }
        
        for(int i=0; i<m; ++i)
        {
            T[i] = ni64();
        }
        for(int i=0; i<m; ++i)
        {
            P[i] = ni64();
        }
        
        pi(FirstOccurence(k,T[0]+k*P[0]+1),1);    
    }
    
    FlushFASTIO();
	return 0;
}
