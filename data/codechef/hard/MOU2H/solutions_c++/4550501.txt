#include <cstdio>
#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>

using namespace std;

#define _ ios_base::sync_with_stdio(0);cin.tie(0);
#define S(x) scanf("%d",&x)
#define all(c) (c).begin(),(c).end() 
#define sz(c) int((c).size())
#define pb push_back
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end())
#define rep(i,x,y) for(int i = x; i < y; i++)
#define foreach(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

typedef long long int LL;
typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii;
typedef vector<ii> vii;

const int MAX = 1000001, INF = 1<<29, mod = 1000000009;

int arr[MAX], H[MAX];
LL dp[MAX], sum[MAX];
int last[10*MAX];
int main()
{
	int t;
	S(t);
	memset(last,-1,sizeof(last));
	while(t--){
		int n, mn = INF;
		S(n);
		rep(i,0,n) S(H[i]);
		rep(i,1,n){
			arr[i] = H[i] - H[i-1];
			mn = min(mn,arr[i]);
		}
		rep(i,1,n) arr[i] += abs(mn);
		// memset(dp,0,sizeof(dp));
		// memset(sum,0,sizeof(sum));
		// rep(i,0,n) printf("%d ",arr[i]);
		// printf("\n");
		dp[0] = 1; sum[0] = 1;
		rep(i,1,n){
			dp[i] = (sum[i-1] - (last[arr[i]] == -1 ? 0 : sum[last[arr[i]]-1]) + mod) % mod;
			last[arr[i]] = i;
			sum[i] = (sum[i-1] + dp[i]) % mod;
		}
		// rep(i,0,n) printf("%lld ",sum[i]);
		// printf("\n");
		printf("%lld\n",sum[n-1]-1);
		rep(i,1,n){
			last[arr[i]] = -1; dp[i] = 0; sum[i] = 0;
		}
	}
	return 0;
}