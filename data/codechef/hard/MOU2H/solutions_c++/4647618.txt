#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define pb push_back
#define mp make_pair

#define ALL(x) (x).begin(),(x).end()
#define CLR(a,b) memset(a,b,sizeof(a))
#define REPN(x,a,b) for (int x=a; x<b;++x)
#define REP(x,b) REPN(x, 0, b)

#define dbg(x) cout << #x << " = " << x << endl;
#define dbg2(x, y) cout << #x << " = " << x << "  " << #y << " = " << y << endl;
#define dbg3(x, y, z) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << endl;
#define dbg4(x, y, z, w) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << "  " << #w << " = " << w <<  endl;

#define FORS(it,A) for(set<long long>::iterator it = A.begin(); it!= A.end(); it++)

typedef long long ll;

const int MAX = 1000010;
const int D = MAX*4;
const int MOD = 1000000009;

int A[MAX], B[MAX], last[MAX*8], dp[MAX], sum[MAX];

int main() {
    int T, n;
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &n);
        REP(i, n) scanf("%d", &A[i]);
        REP(i, n-1) {
            B[i+1] = A[i+1] - A[i] + D;
            last[B[i+1]] = 0;
        }
        dp[0] = 1;
        REPN(i, 1, n) {
            dp[i] = dp[i-1] * 2;
            if (dp[i] >= MOD) dp[i] -= MOD;
            if (last[B[i]]) {
                dp[i] -= dp[last[B[i]]-1];
                if (dp[i] < 0) dp[i] += MOD;
            }
            last[B[i]] = i;
        }
        printf("%d\n", dp[n-1]-1);

    }
    return 0;
}
