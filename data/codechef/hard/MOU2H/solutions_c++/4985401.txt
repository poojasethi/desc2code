#include <iostream>
#include <algorithm>
#include <cstdio>
#include <map>
#include <cmath>
#include <stdio.h>
#include <memory.h>
#include <string.h>
#include <string>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <bitset>

using namespace std;

#define FOR(i,a,b) for (int i = int(a); i <= b; i++)
#define INF 1000000000
#define mod 1000000009
#define ll long long int

#define getcx getchar_unlocked
 
inline void inp( int &n )
{
n=0;
int ch=getcx();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
n=n*sign;
}


typedef pair<int,int> ii;
int n,a[1000010],dp[1000010],sum[1000010],last[8000010];


int main() {

    
    int test;
    cin>>test;
    while(test--)
     {
         
         inp(n);
       //  memset(last,0,sizeof last);
         a[0] = 0;
    
         int x;
         FOR(i,1,n)
          {
             inp(x);
             a[i] = x;         
             
          }
         for(int i=n;i>1;i--)
         {
           x = a[i] - a[i-1];      
           a[i] = x; 
           last[x+4000000] = 0;
         } // index 2 to n stores the info
          
         dp[1] = 1;
         sum[1] = 1;
         int g;
         FOR(i,2,n)
          {
            if(last[a[i] + 4000000] == 0)
             {
               g = 0;
               last[a[i]+4000000] = i;                    
             }
             else
             {
               
               g = last[a[i]+4000000];
               last[a[i]+4000000] = i;   
               g = sum[g-1]%mod;    
             }       
            dp[i] = (sum[i-1] - g)%mod; 
            sum[i] = (sum[i-1] + dp[i])%mod;
                     
          }
          printf("%d\n",(sum[n]-1+mod)%mod);                    
                 
     }

    //getchar();
    //getchar();
	return 0;
} 
