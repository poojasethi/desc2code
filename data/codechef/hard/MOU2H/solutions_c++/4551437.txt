#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>
#include<sstream>
 
#include<algorithm>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<bitset>

#define m 1000000009
#define ADD 4000010
#define getcx getchar_unlocked

inline void inp( int &n )
{
n=0;
int ch=getcx();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
n=n*sign;
}
 
const int MAX = 1001000;
int last[8*MAX];
int sum[MAX];
int a[MAX];

int main()
{

int t,n,i,len,no;
inp(t);
int diff;
int prev;
int ko;

    while(t--)
    {
        
        inp(n);
        prev = INT_MIN;
        sum[0] = 1;
        for(i=0;i<n;i++)
        {
            inp(no);
            a[i] = no;
            if( prev == INT_MIN )
            {
                prev = a[i];
                continue;
            }
            diff = a[i]-prev+ADD;
            prev = a[i];
            last[diff] = -1;
        }
        prev = INT_MIN;
        for(i=0;i<n;i++)
        {
            if( prev == INT_MIN )
            {
                prev = a[i];
                continue;
            }
            else
            {
                no = a[i]-prev+ADD;
                if( last[no] != -1 )
                    sum[i] = (((2*sum[i-1] - sum[last[no]-1])%m)+m)%m;
                else
                    sum[i] = (((2*sum[i-1])%m)+m)%m;
                last[no] = i;
                prev = a[i];
            }
        }
        printf("%d\n",sum[n-1]-1);
    }
return 0;
}
