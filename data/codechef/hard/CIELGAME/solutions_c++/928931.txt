#ifdef NALP_PROJECT
#pragma hdrstop
#endif

#define _CRT_SECURE_NO_DEPRECATE
#pragma comment(linker, "/STACK:64000000")

#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cctype>
#include <cmath>
#include <algorithm>
#include <utility>

#include <set>
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <memory.h>

#include <iostream>
#include <sstream>

using namespace std;

typedef long long int64;

#define forn(i, n) for(int i = 0; i < (int)(n); i++)
#define ford(i, n) for(int i = (int)(n) - 1; i >= 0; i--)
#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define y1 YYYYYYYYYYYY1
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define Abs(x) (((x) >= 0) ? (x) : (-(x)))

const int INF = (int)1E9;
const int64 INF64 = (int64)1E18;
const long double EPS = 1E-9;
const long double PI = 3.1415926535897932384626433832795;

const int64 MOD = INF + 9;
const int MAXN = 210;

int64 g[MAXN], c[MAXN][MAXN], fact[MAXN], rfact[MAXN];

int64 C(int k, int n) {
	if (k == n || k == 0) return 1;
	int64 &ans = c[k][n];
	if (ans != -1) return ans;
	return ans = (C(k - 1, n - 1) + C(k, n - 1)) % MOD;
}

int64 bpow(int64 a, int64 b) {
	int64 ans = 1;
	while (b > 0)
		if (b % 2 == 0) {
			a = (a * a) % MOD;
			b /= 2;
		} else {
			ans = (ans * a) % MOD;
			b--;
		}

	return ans;
}

int64 rev(int64 a) {
	return bpow(a, MOD - 2);
}

int64 getF(int n, int m, int k) {
	if (n < min(m, k)) return 0;
	int64 ans = fact[n];
	ans = (ans * rfact[n - min(k, m)]) % MOD;
	ans = (ans * bpow(n - min(k, m), max(0, m - k))) % MOD;
	return ans;
}

void solve() {
	int n, m, k;
	cin >> n >> m >> k;

	int64 ans = 0;
	for(int i = 1; i <= n; i++) {
		g[i] = getF(i, m, k);
		for(int j = 1; j < i; j++)
			g[i] = ((g[i] - g[j]*C(j, i)) % MOD + MOD) % MOD;

		ans = (ans + g[i]*rfact[i]) % MOD;
	}

	cout << ans << endl;
}

int main() {
#ifdef NALP_PROJECT
	freopen("input.txt", "rt", stdin);
	freopen("output.txt", "wt", stdout);
#else
#endif

	rfact[0] = fact[0] = 1;
	for(int i = 1; i < MAXN; i++) {
		fact[i] = (fact[i - 1] * i) % MOD;
		rfact[i] = rev(fact[i]);
	}

	int tests;
	cin >> tests;
	memset(c, 255, sizeof c);
	forn(test, tests)
		solve();
	
	return 0;
}
