# include <cstdio>
# include <iostream>
# include <algorithm>
# include <vector>
# include <cstring>
# include <cctype>
# include <set>
# include <map>
# include <cmath>
# include <queue>
# include <string>

using namespace std;

const long long MOD=1000000009ll;

long long ext_gcd(long long a,long long b)
{
	long long x=0,y=1,lastx=1,lasty=0,c,t;
	while(b!=0)
	{
		c=a/b;
		a%=b;
		swap(a,b);
		t=lastx-c*x;
		lastx=x;x=t;
		t=lasty-c*y;
		lasty=y;y=t;
	}
	while(lastx<0)lastx+=MOD;
	while(lastx>=MOD)lastx-=MOD;
	return lastx;
}

long long eigenmatrix[200][200];
long long inverse[200];
long long coeff[200];

long long modpow(long long N,long long P)
{
	if(P==0)return 1;
	if(P==1)return N;
	long long X=modpow(N,P>>1);
	X=(X*X)%MOD;
	if(P&1)X=(X*N)%MOD;
	return X;
}

int main()
{
	for(int i=1;i<200;i++)
		inverse[i]=ext_gcd(i,MOD);
	
	for(int i=0;i<200;i++)
	{
		eigenmatrix[i][i]=1;
		for(int j=i+1;j<200;j++)
			eigenmatrix[i][j]=MOD-(eigenmatrix[i][j-1]*inverse[j-i])%MOD;
	}
	
	coeff[0]=1;
	for(int i=1;i<200;i++)
		coeff[i]=(coeff[i-1]*inverse[i])%MOD;
	
	int T;
	scanf("%d",&T);
	for(int t=1;t<=T;t++)
	{
		int N,M,K;
		scanf("%d%d%d",&N,&M,&K);
		
		K=min(M-1,K);
		if(N<=K)
		{
			printf("0\n");
			continue;
		}
		
		long long ret=0ll;
		for(int i=0;i<=N-K-1;i++)
		{
			long long eigenpow=modpow(i+1,M-K-1);
			for(int j=i;j<=N-K-1;j++)
				ret=(ret+eigenpow*((coeff[i]*eigenmatrix[i][j])%MOD))%MOD;
		}
		printf("%Ld\n",ret);
	}
	return 0;
}