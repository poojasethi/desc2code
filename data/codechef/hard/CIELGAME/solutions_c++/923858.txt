#include <cstdio>
#include <cstring>

const int mod = 1000000009;
long long f[256];
long long c[256][256];

long long gc( int n, int k )
{
	if ( k == 0 ) return 1;
	if ( n < k ) return 0;
	if ( n == k ) return 1;
	if ( c[n][k] != -1 ) return c[n][k];
	
	c[n][k] = gc( n-1, k ) + gc( n-1, k-1 );
	if ( c[n][k] >= mod ) c[n][k] = c[n][k] - mod;
	return c[n][k];
}

long long qpow( long long v, long long st )
{
	if ( st < 0 ) return 1;
	if ( v >= mod ) v = v % mod;
	long long r = 1;
	
	while ( st )
	{
		if ( st&1 )
		{
			r = r * v;
			if ( r >= mod ) r = r % mod;
		}
		v = v * v;
		if ( v >= mod ) v = v % mod;
		st = st / 2;
	}
	return r;
}

long long all( int n, int m, int k )
{
	if ( k >= n )
	{
		return 0;
	}
	long long ret = 1;
	ret = f[n]*qpow( f[n-k], mod-2 );
	if ( ret >= mod ) ret = ret % mod;
	ret = ret*qpow( n-k, m-k );
	if ( ret >= mod ) ret = ret % mod;
//	printf( "ALL %d %d %d -> %lld\n", n, m, k, ret );
	return ret;
}

int n, m, k;
long long sol[256];

int main()
{
	int t, T;
	int i, j;
	long long ans, ch;
	f[0] = 1;
	for ( i = 1; i <= 220; i++ )
	{
		f[i] = f[i-1]*i;
		//printf( "FFF %d %lld\n", i, f[i] );
		if ( f[i] >= mod ) f[i] = f[i] % mod;
	}
	memset( c, -1, sizeof( c ) );
	
	scanf( "%d", &T );
	for ( t = 0; t < T; t++ )
	{
		scanf( "%d %d %d", &n, &m, &k );
		ans = 0;
		if ( n > m ) n = m;
		if ( k > m-1 ) k = m-1;
		if ( k >= n )
		{
			printf( "0\n" );
			continue;
		}
		
		if ( k == 0 || m == 1 )
			sol[1] = 1;
		else sol[1] = 0;
		ans = sol[1];
		//printf( "%d %d %d\n", n, m, k );
		//printf( "%d %lld\n", 1, sol[1] );
		for ( i = 2; i <= n; i++ )
		{
			sol[i] = all( i, m, k );
			for ( j = 1; j < i; j++ )
			{
				ch = gc(i,j)*sol[j];
				if ( ch >= mod ) ch = ch % mod;
				sol[i] = sol[i] - ch + mod;
				if ( sol[i] >= mod ) sol[i] = sol[i] % mod;
			}
			ans = ans + sol[i]*qpow( f[i], mod-2 );
			if ( ans >= mod ) ans = ans % mod;
			//printf( "%d %lld %lld %lld\n", i, sol[i], ans, f[i] );
		}
		printf( "%lld\n", ans );
	}
	return 0;
}
