//BEGIN_CUT
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <cstdlib>
#include <numeric>
#include <bitset>
#include <cstring>
#include <sstream>
#include <utility>
#include <queue>
#include <cassert>
using namespace std;

#define X first
#define Y second
#define FI first
#define SE second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back
typedef long long LL;
typedef double D;
typedef long double LD;
typedef vector<int> VI;
typedef pair<int,int> PII;
#define REP(i,n) for(int i=0;i<(n);i++)
#define FOR(i,a,b) for(VAR(i,a);i<=(b);++i)
#define FORD(i,a,b) for(VAR(i,a);i>=(b);--i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define SIZE(a) ((int)((a).size()))
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))
int cond = 1;
#define db(x) {if(cond){cerr << __LINE__ << " " << #x << " " << x << endl; } }
#define dbv(x) {if(cond){cerr << __LINE__ << " " << #x << ": "; FORE(__i,x) cerr << *__i << " "; cerr << endl;} }
//END_CUT


bool e[20][20];
int n, m;

int score[1 << 20];

int chMask[1 << 20];
int dp[1 << 20];

void alg() {
	scanf("%d %d", &n, &m);
	CLR(e, 0);
	for (int i = 0; i < m; ++i) {
		int a, b;
		scanf("%d %d", &a, &b);
		--a;
		--b;
		e[a][b] = e[b][a] = true;
	}
	score[0] = 0;
	for (int i = 1; i < (1 << n); ++i) {
		for (int j = 0; j < n; ++j) {
			if ((i >> j) & 1) {
				score[i] = score[i ^ (1 << j)];
				for (int k = j + 1; k < n; ++k) {
					if ((i >> k) & 1) {
						score[i] += e[j][k];
					}
				}
				break;
			}
		}
	}
	for (int i = 0; i < (1 << n); ++i) {
		if (__builtin_popcount(i) == n / 2) {
			int cres = -1;
			for (int mask = i; ; mask = (mask - 1) & i) {
				if (__builtin_popcount(mask) == n / 4) {
					int cur = score[mask] + score[i ^ mask];
					if (cur > cres) {
						cres = cur;
						chMask[i] = mask;
					}
				}
				if (mask == 0) {
					break;
				}
			}
			dp[i] = score[i] - cres;
		}
	}
	int bestI = -1;
	int bestRes = int(1e9);
	for (int i = 0; i < (1 << n); ++i) {
		if (__builtin_popcount(i) == n / 2) {
			int cur = score[(1 << n) - 1] - score[i] - score[(1 << n) - 1 - i] + dp[i] + dp[(1 << n) - 1 - i];
			if (cur < bestRes) {
				bestI = i;
				bestRes = cur;
			}
		}
	}
	printf("%d\n", bestRes);
	int dy[] = {-1, -1, 1, 1};
	int dx[] = {1, -1, 1, -1};
	int last[4];
	CLR(last, 0);
	for (int i = 0; i < n; ++i) {
		int qua = 0;
		int ci;
		if ((bestI >> i) & 1) {
			ci = bestI;
		} else {
			ci = (1 << n) - 1 - bestI;
			qua += 2;
		}
		if (!((chMask[ci] >> i) & 1)) {
			++qua;
		}
		++last[qua];
		printf("%d %d\n", dx[qua] * last[qua], dy[qua] * last[qua]);
	}
}

int main() {

	int d;
	scanf("%d", &d);
	while (d--) {
		alg();
		if (d > 0) {
			printf("\n");
		}
	}

    return 0;
}
