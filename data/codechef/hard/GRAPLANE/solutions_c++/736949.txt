#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <utility>
#include <string>
#include <fstream>
#include <map>
#include <set>
#include <queue>
#include <memory.h>

using namespace std;

typedef vector<int> VI;
typedef pair<int, int> PI;
typedef vector<PI> VPI;

#define FOR(i,a,n) for (int i = (a); i < (n); ++i)
#define FORE(i,a,n) for (int i = (a); i <= (n); ++i)
#define FORD(i,a,b) for (int i = (a); i >= (b); --i)
#define REP(i,n) FOR(i,0,n)
#define REPE(i,n) FORE(i,0,n)
#define LL long long
#define FIR(n) REP(i,n)
#define FJR(n) REP(j,n)
#define ALL(v) v.begin(), v.end()

#define FI FIR(n)
#define FJ FJR(n)
#define FR(i,a) FOR(i,a,n)
#define REPN(i) REP(i,n)

#define GI(n) scanf("%d", &n)
#define GI2(n,m) scanf("%d %d", &n, &m)


int g[20][20];
int n, i;
int cnt[1 << 18];
int bc[1<<18];
int f[1<<18];
int best[1<<18];

void solve(int mask) {
	if (n == 2) {
		f[mask] = 0;
		return;
	}

	int nn = n/4;
	int all = cnt[mask];
	f[mask] = all+1;

	for (int q = mask; q; q = (q-1) & mask) if (bc[q] == nn) {
		int s= all - cnt[q] -  cnt[q ^ mask];
		if (s < f[mask]) {
			f[mask] =s;
			best[mask] = q;
		}
	}
}

VI mask2v(int mask) {
	VI v;
	FI if (mask & (1 << i)) v.push_back(i);
	return v;
}

void solve() {
	memset(g, 0, sizeof g);
	int m, a, b;
	GI2(n, m);

	FIR(m) { GI2(a, b); --a; --b;g[a][b]=g[b][a]= 1; }
	int mm = 1 << n, m2;
	FOR(mask, 1, mm) if (mask & (mask-1)) {
		int j = 0;
		while (!(mask & (1 << j))) ++j;
		m2 = mask ^ (1 << j);
		cnt[mask] = cnt[m2];
		FI if (m2 & (1 << i)) if (g[j][i]) ++cnt[mask];
	} else 
		cnt[i] = 0;

	int nn = n/2;

	REP(mask, mm) if (bc[mask] == nn) 
		solve(mask);

	int res = 100000;
	int b1, b2;
	int all = cnt[mm-1];
	int ma = mm-1;
	REP(mask, mm) if (bc[mask] == nn) {
		int s = f[mask] + f[ma ^ mask] + all - cnt[mask] - cnt[ma ^ mask];
		if(s < res) {
			res = s;
			b1 = mask;
			b2 = ma ^ mask;
		}
	}

	int posx[20];
	int posy[20];

	int ml1[] = {1, 1, -1, -1};
	int ml2[] = {-1, 1, 1, -1};
	int q[4] = {best[b1], b1 ^ best[b1], best[b2], b2 ^ best[b2]};

	FIR(4) {
		VI v = mask2v(q[i]);
		FJR(v.size())
			posx[v[j]]=  (j+1)*ml1[i],
			posy[v[j]]=  (j+1)*ml2[i];
	}


	printf("%d\n", res);
	FI printf("%d %d\n", posx[i], posy[i]);

}

int main() {
#ifndef ONLINE_JUDGE
freopen("input.txt", "rt", stdin);
#endif

	bc[0] = 0;
	FOR(i, 1, 1<<18) bc[i] = 1+bc[i & (i-1)];

	int tc; GI(tc);
	FJR(tc) {
		if (j)
			puts("");
		solve();
	}
	

}
