#include <cstdio>
#include <cmath>
#include <algorithm>
using namespace std;

#define bit(n) (1<<(n))

const int N = 18;

int n;
int Ecnt[1<<N];

int dp[1<<N];
int dp_mask1[1<<N];

int x[N],y[N];

void process(int mask,int sx,int sy)
{
	int mask1=dp_mask1[mask];
	int mask2=mask-mask1;
	int i;
	for(i=0;i<n;i++)
		if(mask1 & bit(i)) x[i]=sx*(i+1),y[i]=sy*(i+1);
	for(i=0;i<n;i++)
		if(mask2 & bit(i)) x[i]=-sx*(i+1),y[i]=-sy*(i+1);
}

int tot=0;
void calc(int mask)
{
	int x[N];
	int len=0;
	int i;
	for(i=0;i<n;i++)
		if(mask & bit(i))
			x[len++]=i;
	int p[N/2]={0};
	for(i=0;i<len/2;i++) p[len-1-i]=1;
	dp[mask]=-1;
	do
	{
		int mask1=0;
		for(i=0;i<len;i++)
			if(p[i]) mask1^=bit(x[i]);
		tot++;
		int cur=Ecnt[mask1]+Ecnt[mask-mask1];
		if(dp[mask]<cur)
		{
			dp[mask]=cur;
			dp_mask1[mask]=mask1;
		}
	}
	while(next_permutation(p,p+len));
}

int bitcnt(int x)
{
	int s=0;
	for(;x;x/=2)
		s+=x%2;
	return s;
}

int main()
{
	int TST;
	scanf("%d",&TST);
	for(int tst=0;tst<TST;tst++)
	{
		int m,i,j,mask;
		scanf("%d%d",&n,&m);
		int a[N][N]={0};
		for(int k=0;k<m;k++)
		{
			scanf("%d%d",&i,&j);
			i--;j--;
			a[i][j]=1;
			a[j][i]=1;
		}
		for(mask=0;mask<bit(n);mask++)
		{
			int cnt=bitcnt(mask);
			if(cnt<n/4 || cnt>n/2-n/4) continue;
			int e=0;
			for(i=0;i<n;i++) if(mask & bit(i))
				for(j=0;j<i;j++) if(mask & bit(j))
					if(a[i][j]) e++;
			Ecnt[mask]=e;
		}
		int ans=m+1;
		int ansmask=0;
		for(mask=0;mask<bit(n-1);mask++) if(bitcnt(mask)==n/2)
		{
			calc(mask);
			calc(bit(n)-1-mask);
			int cur=m-dp[mask]-dp[bit(n)-1-mask];
			if(ans>cur)
			{
				ans=cur;
				ansmask=mask;
			}
		}
		printf("%d\n",ans);
		process(ansmask,1,1);
		process(bit(n)-1-ansmask,1,-1);
		for(i=0;i<n;i++)
			printf("%d %d\n",x[i],y[i]);
	}
	return 0;
}