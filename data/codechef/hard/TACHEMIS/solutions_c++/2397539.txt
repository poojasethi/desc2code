#include<cstdio>
#include<cmath>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<utility>
#include<vector>
#include<string>
#include<functional>
#include<queue>
#include<map>
#include<set>
#include<numeric>
#include<sstream>

#define FOR(i, a, n) for(int i = (a); i < (n); i++)
#define REP(i, n) FOR(i, 0, n)
#define RFOR(i, a, n) for(int i = (n) - 1; i >= (a); i--)
#define RREP(i, n) RFOR(i, 0, n)
#define SIZE(vec) (int)vec.size()
#define ALL(vec) (vec).begin(), (vec).end()
#define fst first
#define snd second

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

const int INF = 1 << 28;
const double EPS = 1e-9;
const double PI = 3.14159265358979;

const int MAX_N = 110000 * 2;

int K;
pair<char, int> a[MAX_N];
ll b[MAX_N];

ll solve(){
  vector<ll> s;
  REP(i, K){
	s.push_back(a[i].snd * 26LL + a[i].fst - 'A');
  }
  int n = s.size();
  vector<int> rad(s.size());
  for(int i = 0, j = 0; i < n;){
	while(0 <= i - j && i + j < n && s[i - j] == s[i + j]) j++;
	rad[i] = j;
	int k;
	for(k = 1; i - k >= 0 && rad[i - k] < rad[i] - k; k++){
	  rad[i + k] = rad[i - k];
	}
	i += k;
	j = max(j - k, 0);
  }
  ll r = 0;
  b[0] = 0;
  REP(i, K){
	ll x = a[i].snd;
	b[i + 1] = b[i] + x;
	r += x * (x + 1) / 2;
  }
  REP(i, K){
	int l = rad[i];
	if(i - l < 0 || n <= i + l){
	  r += b[i + l] - b[i + 1];
	}else{
	  ll x;
	  if(s[i + l] % 26 == s[i - l] % 26){
		x = min(s[i + l] / 26, s[i - l] / 26);
	  }else{
		x = 0;
	  }
	  r += b[i + l] - b[i + 1] + x;
	}
  }
  return r;
}

int main(){
  int T;
  scanf("%d", &T);
  REP(t, T){
	scanf("%d", &K);
	REP(i, K){
	  scanf(" %c%d", &a[i].fst, &a[i].snd);
	}
	printf("%lld\n", solve());
  }
  return 0;
}
