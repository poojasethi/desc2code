#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <cassert>
#include <set>
#include <map>
#include <list>
#include <bitset>
#include <deque>
#include <numeric>
#include <iterator>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <climits>
 
using namespace std;
 
#define SZ(a) int(a.size())
vector<long long> manachers(const vector<long long> &A)
{
	vector<long long> S;
	for(int i = 0; i < SZ(A); ++i)
	{
		S.push_back(2000000000);
		S.push_back(A[i]);
	}
	S.push_back(2000000000);
	vector<long long> P(S.size());
	long long ma = 0;
	P[0] = 0;
	for(int i = 1; i < SZ(P) ; ++i)
	{
		if( P[ma]+ma >= i)
			P[i] = min( P[2*ma-i] , 2*ma-i-(ma-P[ma]));
		long long lo = i - P[i]-1, hi = i + P[i]+1;
		while(lo >= 0 && hi < SZ(P) && S[lo]==S[hi])
			P[i]++, lo--, hi++;
		if( P[ma]+ma < P[i]+i )
			ma = i;
	}
	return P;
}
 
int main() 
{
	int TC;
	scanf("%d",&TC);
	while(TC-->0)
	{
		int N = rand()%10+1;
		scanf("%d",&N);
		vector<long long> A(N);
		vector<long long> B(N);
		vector<long long> ACU(N);
		for (int i = 0; i < N; ++i) {
			char c[2];
			scanf("%s%lld",c,&B[i]);
//			cin >> c >> B[i];
//			B[i] = rand()%10+1;
//			do
//			{
//				c[0] = rand()%26 + 'A';
//			}while(i>0 && A[i-1] == c[0]);
			A[i] = c[0];
//			cout << char(A[i]) << " " << B[i] << endl;
			if(i>0)ACU[i] = ACU[i-1] + B[i];
			else ACU[i] = B[i];
		}
//		string OR;
//		for (int i = 0; i < N; ++i) {
//			OR += string(B[i],A[i]);
//		}
//		cout << OR << endl;
		vector<long long> PA = manachers(A);
		vector<long long> PB = manachers(B);
		vector<long long> PC(PA.size());
		for (int i = 0; i < PB.size(); ++i) {
			PC[i] = min(PA[i],PB[i]);
//			cout << PA[i] << " " << PB[i] << " " << ((i&1) ? char(A[i/2]) : '#')<< endl;
		}
		
		long long tot = 0;
		for (int i = 1; i < PC.size()-1; ++i) {
			if(i&1)
			{
				long long b = (B[i/2] * (B[i/2]+1))/2 - (B[i/2]+1)/2;
//				cout << b << endl;
				long long lo = i/2 - PC[i]/2 , hi = i/2 + PC[i]/2;
				long long t = ACU[hi];
				if(lo > 0)t -= ACU[lo-1];
				
				if(lo > 0 && hi < N-1)
				{
					if( A[lo-1] == A[hi+1] )
						t += 2*min(B[lo-1],B[hi+1]);
				}
//				cout << (t) << endl;
				long long p = tot;
				tot += (t+1)/2 + b;
				
				if(tot < p)
					assert(false);
			}
		}
		cout << tot << endl;
//		int cnt = 0;
//		for(int i = 0; i < OR.size(); ++i)
//			for(int j = i; j < OR.size(); ++j)
//			{
//				int ok = 1;
//				for(int k = 0; k <= (j-i); ++k)
//					if(OR[i+k]!=OR[j-k])
//						ok = 0;
//				cnt += ok;
//			}
//		cout << cnt << endl;
//		if(cnt != tot)
//		{
//			cout << "ERROR" << endl;
//			cout << OR << endl;
//		}
//		printf("%lld\n",tot);
	}
	
	
}
 
/*
7
E 5
K 4
F 1
K 4
E 2
C 6
H 10
 
 
EEEEEKKKKFKKKKEECCCCCCHHHHHHHHHH
 
*/
