//
// d.cpp -- D
//
// Siwakorn Sriakaokul - ping128
// Written on Sunday, 21 July 2013.
//

#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstdlib>
#include <string>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <cmath>
#include <algorithm>
#include <map>
#include <ctype.h>
#include <string.h>

#define MAXK 100005

using namespace std;

typedef long long LL;
typedef pair<char, int> PII;
typedef pair<PII, int> PII2;


int K;
PII in[MAXK];
LL sum[MAXK];

LL counting(){
    in[0] = PII('#', 0);
    in[K + 1] = PII('$', 0);
    K += 2;
    int *P = new int[K];
    int C = 0, R = 0;
    for(int i = 1; i < K - 1; i++ ){
        int i_mirror = 2 * C - i; // equals to i' = C - (i-C)
    
        P[i] = (R > i) ? min(R - i, P[i_mirror]) : 0;
    
        // Attempt to expand palindrome centered at i
        while (in[i + 1 + P[i]] == in[i - 1 - P[i]])
            P[i]++;
 
        // If palindrome centered at i expand past R,
        // adjust center based on expanded palindrome.
        if (i + P[i] > R){
            C = i;
            R = i + P[i];
        }
    }
/*
    for(int i = 0; i < K; i++ ){
        printf("%d ", P[i]);
    }
    printf("\n");
*/
    LL res = 0;
    for(int i = 1; i < K - 1; i++ ){
        res += (LL)in[i].second * (in[i].second + 1) / 2;
        if(P[i] == 0){
            if(in[i - 1].first == in[i + 1].first)
                res += min(in[i - 1].second, in[i + 1].second);
        } else {
            res += sum[i - 1] - sum[i - P[i] - 1];
            if(in[i - P[i] - 1].first == in[i + P[i] + 1].first)
                res += min(in[i - P[i] - 1].second, in[i + P[i] + 1].second);
        }
    }

    delete[] P;
    return res;

}

int main(){
    int test;
    scanf("%d", &test);
    for(int tt = 0; tt < test; tt++ ){
        scanf("%d", &K);
        for(int i = 1; i <= K; i++ ){
            cin >> in[i].first >> in[i].second;
            sum[i] = in[i].second + sum[i - 1];
        }
        cout << counting() << endl;
    }
    return 0;
}
