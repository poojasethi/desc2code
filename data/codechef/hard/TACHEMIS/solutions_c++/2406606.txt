#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<ctime>
#include<assert.h>

#include<cmath>
#include<iostream>
#include<fstream>

#include<string>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>

using namespace std;

#define MAX(a,b) ((a)>(b) ? (a) : (b))
#define min(a,b) ((a)<(b) ? (a) : (b))
#define EPS 1e-9
#define asdf exit(0);


typedef long long LL;


#define maxn 1000100


LL odd[maxn];
LL sum[maxn];





vector< pair<int,int> > s;


LL com(LL a)
{
    LL ret=a*(a+1);
    ret/=2;
    return ret;
}







void ini()
{
    s.clear();
}


char in[12];

int main()
{
    int T,j,I;
    LL val;



    //freopen("in.txt","r",stdin);


    pair<int,LL> pr,pr1;
    scanf("%d",&T);

    while(T--)
    {
        int n,i,k;


        ini();

        scanf("%d", &n);



        LL ans=0;


        for(i=0;i<n;i++)
        {
            scanf("%s %lld",in,&val);

            pr1.first=in[0];
            pr1.second=val;

            s.push_back(pr1);
            ans+=com(s[i].second);
        }




        n=s.size();
        LL l=0, r=-1;
        for (i = 0; i < n; ++i)
        {
            k = (i>r ? 0 : min(odd[l+r-i], r-i)) + 1;
            while (i + k - 1 < n && i-k+1 >= 0 && s[i+k-1] == s[i-k+1])  ++k;
            odd[i] = --k;
            if (i+k > r)    l = i-k,  r = i+k;


          //  cout<<odd[i];
        }
        //asdf



        sum[0]=s[0].second;
        for(i=1;i<n;i++)
        {
            sum[i]=sum[i-1]+s[i].second;
        }






        for(i=0; i<n; i++)
        {
            j=i+odd[i]-1;
			ans+=(sum[j]-sum[i]);

			int d=j-i;
			int j1=i-d-1;
			int j2=j+1;



			if(j1>=0 && j2<n && s[j1].first==s[j2].first)
			{
				ans+=min(s[j1].second,s[j2].second);
			}
		}





        printf("%lld\n",ans);



    }



    return 0;
}


