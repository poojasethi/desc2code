#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_v) (int)(_v).size()
#define all(_v) (_v).begin(),(_v).end()
#define pii pair<int,int>
typedef long long ll;
const int INF = 1000000000;
const ll MOD = 1e9 + 7;

const int maxn = 1000010;
pair < char,int > arr[maxn];
ll p[maxn],sum[maxn];

int main() {
    int t; scanf("%d",&t);
	while (t --) {
		int n; scanf("%d",&n);
		
		for (int i = 1; i <= n; i ++) {
			char c; cin >> c;
			int x; scanf("%d",&x);
			arr[i] = mp(c,x);
		}

		arr[0] = mp('#',0);
		arr[n + 1] = mp('@',0);
		
		// manacher's algorithm
		
		ll c = 0,r = 0;
		
		for (int i = 1; i <= n; i ++) {
			int i_mirror = c + c - i;
			p[i] = (r > i) ? min(r - i,p[i_mirror]) : 0;
			
			while ((i - p[i] - 1) >= 0 and (i + p[i] + 1) <= n + 1 and arr[i - p[i] - 1] == arr[i + p[i] + 1]) p[i] ++;

			if(i + p[i] > r) {
				c = i;
				r = i + p[i];
			}
		}

		sum[0] = 0;
		for (int i = 1; i <= n; i ++) sum[i] = sum[i - 1] + arr[i].second;
		
		ll ans = 0;
		for (int i = 1; i <= n; i ++) {
			ans += (1ll * (arr[i].second + 1) * (arr[i].second)) / 2ll;
			ans += sum[i + p[i]] - sum[i];
			if(i - p[i] - 1 == 0 or i + p[i] + 1 == n + 1) continue;
			if(arr[i + p[i] + 1].first != arr[i - p[i] - 1].first) continue;
			ans += min(arr[i + p[i] + 1].second,arr[i - p[i] - 1].second);
		}

		printf("%lld\n",ans);
	}
	return 0;
}
