#include <set>
#include <map>
#include <ctime>
#include <cstdio>
#include <vector>
#include <string>
#include <climits>
#include <cstdlib>
#include <cstddef>
#include <sstream>
#include <string.h>
#include <iostream>
#include <algorithm>

using namespace std;

#define LL long long

template <typename T> T sqr(T x) { return x * x; }
template <typename T> T abs(T x) { return x < 0 ? -x : x; }

#define N 1000111

int t, n;
char a[N];
int b[N], d[N], sum[N];

int get_sum(int l, int r)
{
	if (l > r)
		return 0;

	if (l == 0)
		return sum[r];

	return sum[r] - sum[l - 1];
}

int main()
{
	// freopen("input.txt", "r", stdin);
	// freopen("output.txt", "w", stdout);
	scanf("%d", &t);
	while (t--)
	{
		scanf("%d\n", &n);
		for (int i = 0; i < n; i++)
		{
			sum[i] = d[i] = 0;
			scanf("%c %d\n", &a[i], &b[i]);
		}

		sum[0] = b[0];
		for (int i = 1; i < n; i++)
			sum[i] = sum[i - 1] + b[i];

		int l = 0, r = -1;
		for (int i = 0; i < n; i++)
		{
			int k = (i > r ? 1 : min(d[l + r - i], r - i));
			while (i + k < n && i - k >= 0 && a[i + k] == a[i - k] && b[i + k] == b[i - k]) ++k;
			d[i] = k--;
			if (i + k > r)
			{
				l = i - k;
				r = i + k;
			}
		}
		long long ans = 0;
		for (int i = 0; i < n; i++)
		{
			ans += (long long) (b[i] * 1ll * (b[i] - 1ll) / 2ll) + b[i];
			int k = d[i];
			ans += get_sum(i + 1, i + k - 1);
			if (i + k < n && i - k >= 0 && a[i + k] == a[i - k])
				ans += min(b[i - k], b[i + k]);
		}
		cout << ans << endl;
	}
    return 0;
}
