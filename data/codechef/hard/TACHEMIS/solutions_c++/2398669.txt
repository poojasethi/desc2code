#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAX_N = int(1e5);

int best[MAX_N * 2 + 100];
long long Sum[MAX_N * 2 + 100];
pair<char,int> s[MAX_N * 2 + 100];

int cnt,n;

inline long long formula(const int & sz)
{

    const long long x = sz/2;
    long long ret = 2 * x * (x+1);

    if(sz % 2 == 1)
        ret += (sz + 1) / 2;
     else
        ret -= sz/2;
    return ret;
}

void solve()
{
    long long tot = 0;
    cnt = 0;
    scanf("%d",&n);
    int i;
    for(i = 1 ; i <= n ; ++ i){
        ++cnt;
        scanf(" %c %d ",&s[cnt].first,&s[cnt].second);
        tot += formula(s[cnt].second);
        Sum[cnt] = Sum[cnt-1] + s[cnt].second;

        ++ cnt;
        s[cnt] = make_pair(0,0);
        Sum[cnt] = Sum[cnt-1];
    }
    --cnt;
    int left,right;
    int j,k;
    bool found;
    left = right = 1;
    for(i = 1 ; i <= cnt ;){
        while(left >= 1 && right <= cnt && s[left] == s[right])
            --left,++right;
        ++left,--right;
        best[i] = right - left + 1;
        found = false;
        for(j = i - 1 ; j >= left ; -- j){
            k = (best[j] - 1 )/ 2;
            const int mirror = 2 * i - j;
            if(j - k == left){
                found = true;
                i = mirror;
                left = i - k;
                break;
            } else if(j - k > left){
                best[mirror] = best[j];
            } else {
                best[mirror] = (j - left) * 2 + 1;
            }
        }
        if(found == false){
            i = right + 1;
            left = right = i;
        }
    }

    long long C;
    for(i = 1 ; i <= cnt ; ++ i){
        k = (best[i] - 1)/2;
        right = i + k;
        left = i - k;
        C = Sum[right] - Sum[i];
        if(left > 1 && right < cnt && s[left-1].first == s[right+1].first)
            C += min(s[left-1].second,s[right+1].second);

        tot += C;
    }

    printf("%lld\n",tot);
}

int main()
{
    //freopen("input", "r", stdin);
    int T;
    scanf("%d",&T);
    while(T--)
        solve();
}
