#ifdef _WIN32
#  define LL "%I64d"
#else
#  define LL "%Ld"
#endif

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <ctime>
#include <vector>
#include <deque>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <bitset>
#include <string>
#include <algorithm>
#include <complex>
#include <utility>
using namespace std;
#define null NULL
#define mp make_pair
#define pb(a) push_back(a)
#define sz(a) ((int)(a).size())
#define all(a) a.begin() , a.end()
#define fi first
#define se second
#define relaxMin(a , b) (a) = min((a),(b))
#define relaxMax(a , b) (a) = max((a),(b))
#define SQR(a) ((a)*(a))
typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;
typedef pair<char , int> pci;
int N;
vector<pci> in;
char buf[5];
void doit(){
  ll ans = 0;
  scanf("%d" , &N);
  in.resize(N);
  for(int i=0;i<N;++i){
   scanf("%s%d" , &buf , &in[i].se);
   in[i].fi = buf[0];
                      }
  int bc = -1 , br = -1;
  vi len(N) , sum(N);
  sum[0] = in[0].se;
  for(int i=1;i<N;++i)
   sum[i] = sum[i-1] +  in[i].se;
  for(int i=0;i<N;++i){
   int lo = 1;
   if(br >= i){
    int lpos = 2*bc - i;
    lo = min(len[lpos] , br-i+1);
              }
   while(i-lo>=0 && i+lo<N && in[i-lo] == in[i+lo])
    ++lo;
   len[i] = lo;
   if(i+lo-1 > br)
    br = i+lo-1,
    bc = i;
                      }
  for(int i=0;i<N;++i){
   int lo = i - len[i] + 1,
       hi = i + len[i] - 1;
   bool spanned = (lo < hi);
   ll br = sum[hi] - (lo==0 ? 0 : sum[lo-1]);
   if(lo-1 >= 0 && hi+1 < N && in[lo-1].fi == in[hi+1].fi)
    br += 2*min(in[lo-1].se , in[hi+1].se),
    spanned = true;
   ll cur_br = in[i].se;
   if(spanned)
    ans += (br+1) / 2 - (cur_br+1)/2;
   ans += cur_br * (cur_br+1) / 2;
                      }
  cout<<ans<<'\n';
}
int main(){
  int Q;
  scanf("%d" , &Q);
  while(Q-- > 0)
   doit();
  return 0;
}
