#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
#include<queue>
#include<utility>
#include<map>
#include<bitset>
using namespace std;

typedef vector<int> VI;
typedef long long LL;
typedef unsigned long long uLL;
typedef pair<int, int> PII;
typedef vector<PII> VPII;
#define pb push_back
#define fi first
#define se second
#define mp make_pair
#pragma comment(linker, "/STACK:266777216")

const int inf=1000000000;
const LL INF=LL(inf)*inf;
const double eps=1e-9;
const double PI=2*acos(0.0);

#define NN 100005

char str[NN][2];
LL num[NN], Q[NN], sum[NN];
int P[NN];
int K;

int min(int a, int b){return a<b?a:b;}
LL min(LL a, LL b){return a<b?a:b;}

void solve()
{
    sum[0] = 0;
    scanf("%d", &K);
    for(int i=0; i<K; i++)
    {
        scanf("%s%lld", str[i+1], &num[i+1]);
        sum[i+1] = sum[i] + num[i+1];
    }
    int id=0, mx = 0, j, lim;
    LL a, b, ans = 0;
    for(int i=1; i<=K; i++)
    {
        j = 2*id - i;
        if(mx>i)
        {
            lim = min(mx-i, P[j]);
            P[i] = lim;
            Q[i] = ((num[i]+1)*(num[i]))/2 + sum[i+lim] - sum[i];
        }
        else
        {
            P[i] = 0;
            Q[i] = ((num[i]+1)*(num[i]))/2;
        }
        while(str[i+P[i]+1][0] == str[i-P[i]-1][0] && i+P[i]+1<=K && i-P[i]-1>0 )
        {
           a = num[i+P[i]+1];
           b = num[i-P[i]-1];
           Q[i]+= min(a,b);
           if(a != b)
           {
               break;
           }
           else
           {
               P[i]++;
           }
        }
        if(i+P[i]>mx)
        {
            id = i;
            mx = i+P[i];
        }
        ans+= Q[i];
    }
    printf("%lld\n", ans);
}

int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int t;
    scanf("%d", &t);
    while(t--)
    {
        solve();
    }
}
