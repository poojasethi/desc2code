#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef long long ll;
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

#define all(x) x.begin(), x.end()
#define f(i,a,b) for(int i = (a); i <= (b); i++)
#define fd(i,a,b) for(int i = (a); i >= (b); i--)
#define mp make_pair
#define faster_io() ios_base::sync_with_stdio(false)
#define pb push_back
#define pii pair<int,int>
#define SZ(x) ((int)x.size())
#define vii vector<pair<int,int>>

const int INF = 1000000005;
const ll INFLL = 100000000000000002ll;
const ll MOD = 10000000;

// ----------------------------------------------------------------------------------------------------------

int D[100005], B[100005][19], B2[100005][19], L[100005][19], N, Q, S[100005][19], T, V[100005];
vector<int> E[100005];

void dfs(int n, int p, int d, int b)
{
    B[n][0] = B2[n][0] = S[n][0] = V[n];
    D[n] = d;
    L[n][0] = p;
    for(int v : E[n]) if(v != p) dfs(v,n,d+1,b);
}

int lca(int u, int v)
{
    if(D[u] < D[v]) return lca(v,u);
    int diff = D[u] - D[v];
    f(i,0,17) if(diff&(1<<i)) u = L[u][i];
    if(u == v) return u;
    fd(i,17,0) if(L[u][i] != L[v][i]) u = L[u][i], v = L[v][i];
    return L[u][0];
}

int getmin(int u, int v)
{
    int diff = D[u] - D[v] + 1;
    int bal = 0;
    int ret = INF;
    f(i,0,17) if(diff&(1<<i))
    {
        ret = min(ret, bal + B[u][i]);
        bal += S[u][i];
        u = L[u][i];
    }
    return min(ret,bal);
}

int getsum(int u, int v)
{
    int diff = D[u] - D[v] + 1;
    int ret = 0;
    f(i,0,17) if(diff&(1<<i))
    {
        ret += S[u][i];
        u = L[u][i];
    }
    return ret;
}

int getmin2(int u, int v)
{
    int diff = D[u] - D[v];
    vii vec;
    f(i,0,17) if(diff&(1<<i))
    {
        vec.pb({S[u][i], B2[u][i]});
        //cout << "Min going down " << u << " " << i << " is " << B2[u][i] << "\n";
        u = L[u][i];
    }
    reverse(all(vec));
    int bal = 0, ret = INF;
    for(pii p : vec)
    {
        ret = min(ret, bal + p.second);
        bal += p.first;
        //cout << "Now bal is " << bal << " and ret is " << ret << "\n";
    }
    return ret;
}

int main()
{
    cin >> T;

    f(tt,1,T)
    {
        cin >> N >> Q;
        f(i,1,N) E[i].clear();
        f(i,1,N-1)
        {
            int a,b;
            scanf("%d %d", &a, &b);
            E[a].pb(b), E[b].pb(a);
        }
        f(i,1,N)
        {
            string s;
            cin >> s;
            if(s == "(") V[i] = 1;
            else V[i] = -1;
        }

        dfs(1,0,1,0);
        f(j,1,17) f(i,1,N)
        {
            L[i][j] = L[L[i][j-1]][j-1];
            B[i][j] = min(B[i][j-1], S[i][j-1] + B[L[i][j-1]][j-1]);
            B2[i][j] = min(B2[L[i][j-1]][j-1], S[L[i][j-1]][j-1] + B2[i][j-1]);
            S[i][j] = S[i][j-1] + S[L[i][j-1]][j-1];
        }

        while(Q--)
        {
            int u,v;
            scanf("%d %d", &u, &v);
            if(V[u] < 1)
            {
                printf("No\n");
                continue;
            }
            int l = lca(u,v);
            int m1 = getmin(u,l);
            if(m1 < 0)
            {
                printf("No\n");
                continue;
            }
            int s = getsum(u,l);
            int m2 = getmin2(v,l);
            //cout << "For " << u << "->" << v << "\n";
            //cout << "Min left is " << m1 << " - sum left is " << s << " min right is " << m2 << " and total is " << s + getsum(v,l) - V[l] << "\n";
            if(m2 < -s)
            {
                printf("No\n");
                continue;
            }
            if(s + getsum(v,l) - V[l] == 0) printf("Yes\n");
            else printf("No\n");
        }
    }
}
