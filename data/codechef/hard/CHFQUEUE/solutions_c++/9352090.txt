/**
* He who forgives and acknowledges himself... that is what it truly means to be strong!
*/
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <queue>
#include <set>
#include <climits>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <stack>
using namespace std;

#define trace(x) {cerr << #x << "=" << x <<endl;}
#define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
#define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
#define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
#define trackcr(x) {cerr << #x << ":" << endl; for (auto i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

typedef unsigned int ll;
typedef vector<int> vi;
typedef vector<vector<int> > vvi;
typedef vector<ll> vll;
typedef pair<int,int> ii;
typedef vector<pair<int,int> > vii;

const int MAX = 5005;
const int INF = 1e9;

int main() {
    int n, k;
    scanf("%d%d", &n, &k);

    vector<int> a(n), after(n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    stack<pair<int,int> > T;
    for (int i = n-1; i >= 0; i--) {
        while (!T.empty() && (T.top().first >= a[i])) T.pop();
        if (T.empty()) {
            after[i] = n;
        } else {
            after[i] = T.top().second;
        }
        T.push(make_pair(a[i], i));
    }

    const int MOD = 1000000007;

    long long answer = 1;
    for (int i = 0; i < n; i++) {
        if (after[i]==n) continue;
        else {
            answer *= after[i]-i+1;
            answer %= MOD;
        }
    }

    //track(after);

    printf("%lld\n", answer);
}
