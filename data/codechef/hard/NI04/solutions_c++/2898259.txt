#include <functional>
#include <iostream>
#include <cstdio>
#include <cctype>
#include <ctime>
#include <vector>
#include <map>
#include <iterator>
#include <set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <functional>
#include <numeric>
#include <utility>
#include <list>
#include <cassert>
#include <sstream>

using namespace std;

//#define SWAP(a,b) do{ll k=a; a=b; b=k;}while(0)
#define inf 987654321
#define infl 10000000000000000000ll
#define rep(k,a,b) for(ll k=(a); k < (b); ++k)
#define per(k,a,b) for(ll k=(a-1); k >= (b); k--)
#define SUM(v) accumulate(v.begin(), v.end(), 0)
#define PROD(v) accumulate(v.begin(), v.end(), 1, multiplies<long long>())
#define MAX(v) max_element(v.begin(), v.end())
#define MIN(v) min_element(v.begin(), v.end())
typedef long long ll;
typedef vector<long long> VI;
typedef vector<vector<ll> >VV;
typedef vector<string> VS;
typedef vector<list<ll> > VL;

ll POS(ll x) { if(x>0)  return x ; else return 0; }

struct ele {
	long double z,y,x;
	ele() {}
	ele(long double z, long double y, long double x) : z(z), y(y), x(x) {}
	ele operator + (const ele &p) const { return ele(z+p.z, y+p.y, x+p.x); }
	ele operator - (const ele &p)  const { return ele(z-p.z, y-p.y, x-p.x); }
	ele operator * (long double con)     const { return ele(z*con, y*con, x*con  ); }
	ele operator / (long double con)     const { return ele(z/con, y/con, x/con  ); }
	bool operator<(const ele &rhs) const { return make_pair(z,make_pair(y,x)) < make_pair(rhs.z,make_pair(rhs.y,rhs.x)); }
	bool operator==(const ele &rhs) const { return make_pair(z,make_pair(y,x)) == make_pair(rhs.z,make_pair(rhs.y,rhs.x)); }
};

int main()
{
	ll t;
	cin>>t;
	while(t--){
		long long n,m,p,q,k,time = 0,wait = 0;
		ll landed = 0,takenof = 0;
		cin>>p>>q>>n>>m>>k;
		vector<bool>v(100500,false);
		while(time <= k){
			if(p > 0){
				p--;
				v[time+m] =  true;
				wait++;
				landed++;
			}
			else if(p <= 0){
				if(q > 0){
					q--;
					takenof++;
				}
			}
			time++;
			if(time%n == 0){
				p++;
			}
			if(v[time] == true){
				v[time] = false;
				wait--;
				q++;
			}
		}
		cout<<landed<<" "<<takenof<<" "<<p<<" "<<q+wait<<endl;
	}
	return 0;
}