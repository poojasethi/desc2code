#include <iostream>
#include <cstring>

using namespace std;

const int MAXN = 1000;
const int MAXD = 1000;

int x[MAXN], y[MAXN], n;
bool a[MAXD+1];
/*

k = 4
tot=0
i=0 to 7
tot = S = 7

l=3 --> 0
a
x | y
10  1
10  2
10  1
10  2
10  1
3   1
3   1

a[4] = 1 ; l=3
a[3] = 1;

i = 4; 7-i <=4; i--
4
3

dry run solve(int k=3)
{
	i=0 --> 7
		i=0
		l = 3 - 1 --> 0
			a[2+1]=a[3] | a[2] 
			a[1+1]=a[2] | a[1]
			a[1]=a[1] | a[0]
		i=1
		l = 3 - 2 --> 0
			a[2] = 1;
			a[1] = 1;
		i = 2
		l = 3 - 1 --> 0
			a[3]=1
			a[2]=1
			a[1]=1
		.
		.
		.
		i=6
			x[6] <= 3
	i = 3 ; i-- as long as 7 - i <= 3
	
}

*/
bool solve(int k) {
	//cout<<"CASE: "<<k<<endl;
	memset(a, false, sizeof(a));
	a[0] = true;
	int tot = 0;
	for (int i = 0; i < n; ++i) 
	{
		//cout<<"i: "<<i<<endl;
		if (x[i] <= k) 
			continue;
		else 
			tot += y[i];
			
		for (int l = k-y[i]; l >= 0; --l)
		{
			a[l+y[i]] = a[l+y[i]] | a[l];
		}
		//cout<<"a[]"<<endl;
		
		//cout<<endl;
		
	}
	//cout<<endl<<endl;
	for (int i = k; tot-i <= k; --i)
	{
		//cout<<"this case is valid"<<endl;
		if (a[i]) return true;
	}
	// int i=k;
	// if(tot - i <= k)
		// if(a[i])
			// return true;
	return false;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    cin >> n;
    for (int i = 0; i < n; ++i) cin >> x[i] >> y[i];
    int lo = 0, hi = 1000;
    while (lo+1 < hi) {
      int mid = (lo+hi)/2;
      if (solve(mid)) 
	  {
		// if value returned is true, this means 'mid' is a valid Time in which dishes can be made
		// however we look to reduce this time further, now looking in the range of 'lo' to 'mid'
		// hence we set 'hi' as 'mid'
		////cout<<"Valide time: "<<mid<<endl;
		hi = mid;
	  }
      else 
	  {
		// if value returned is false, it means that 'mid' was too low a time to prepare the dishes
		// so we look to increase this time further, now looking in the range of 'mid' to 'hi'
		// hence we set 'lo' as 'mid'
		lo = mid;
	  }
    }
    cout << hi << endl;
  }
}
