#include<iostream>
#include<cmath>
#include<algorithm>
#include<limits>
#include<vector>
#include<bitset>


using namespace std;

int t,n;

#define S scanf
#define P printf
#define REP(i,n) for(int i=0;i<n;i++)
#define FOR(i,FROM,n) for(int i=FROM;i<n;i++)
#define FORR(i,n) for(int i=n;i>=0;i--)
#define ll long long int
#define llu long long unsigned int

int ni()
{
    int temp;
    scanf("%d",&temp);
    return temp;
}

ll nl()
{
    ll temp;
    scanf("%ld",&temp);
    return temp;
}
/*
bool myfunction( const node& i, const node& j )    //use it to sort vectors
{
    if( i.x < j.x ) return false;
    if( j.x < i.x ) return true;
    return j.c < i.c;
}
*/
int a[1000][2];
int maxi;

int solve(int from,int to)
{
    int mid=(from+to)/2;
    int see[1001];
    for(int i=0;i<=mid;i++)
    see[i]=-1;
    int visit[1000];
    REP(i,n)
    if(mid<a[i][0])
    visit[i]=0;
    else
    visit[i]=1;
    
    int sum=0;
    REP(i,n)
    if(visit[i]==0)
    sum+=a[i][1];
    
    REP(i,n)
    {
            if(visit[i]==0)
            REP(j,mid+1)
            {
                 if(see[j]!=-1 && see[j]!=i && a[i][1]+j<=mid && see[a[i][1]+j]==-1)
                 see[a[i][1]+j]=i;
            }
            if(visit[i]==0)
            see[a[i][1]]=1;
    }
    int found=0;
    REP(i,mid+1)
    {
         if(see[i]!=-1 && i<=mid && sum-i<=mid)
         {
              found=1;
              break;
         }
    }
    if(sum==0)
    found=1;
    
    if(from==to)
    return from;
    if(found)
    return solve(from,mid);
    return solve(mid+1,to);
}
    


int main()
{
   //freopen("input.txt","r",stdin);
   //freopen("output.txt","w",stdout);

   scanf("%d",&t);
   for(int prob=0;prob<t;prob++)
   {
           n=ni();
           maxi=-1;
           REP(i,n)
           {
                   a[i][0]=ni();
                   a[i][1]=ni();
                   if(a[i][0]>maxi)
                   maxi=a[i][0];
           }
           
           printf("%d\n",solve(1,maxi));
   }


   //system("pause");
   return 0;

}
