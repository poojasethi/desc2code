#include <iostream>
#include <cstring>

using namespace std;

const int MAXN = 1000;
const int MAXD = 1000;

int x[MAXN], y[MAXN], n;
bool a[MAXD+1];

bool solve(int k) {
	//cout<<"CASE: "<<k<<endl;
	memset(a, false, sizeof(a));
	a[0] = true;
	int tot = 0;
	for (int i = 0; i < n; ++i) 
	{
		//cout<<"i: "<<i<<endl;
		if (x[i] <= k) 
			continue;
		else 
			tot += y[i];
			
		// we start l with a value which is y[i] less than k
		// if(a[l] == true) this means that 
		
		for (int l = k-y[i]; l >= 0; --l)
		{
			a[l+y[i]] = a[l+y[i]] | a[l];
		}
		// for(int i=0;i<8;i++)
		// {
			// cout<<a[i]<<" ";
		// }
		//cout<<endl;
		
		
	}
	
	
	
	//cout<<endl<<endl;
	// tot is the total time required to cook the remaining dishes, which will be used by cook and his assistant
	// when we iterate over i downwards starting from k
	// i denotes time the chef will have to cook some dishes
	// tot - i will denote the time chef's assistant will have to cook other dishes
	// For them to be able to cook the dishes in time <= 'k', both i and tot-i should be <=k

	//cout<<endl<<endl;
	
	
	// if(tot == 0)
	// {
		// return true;
	// }
	// else
	// {
		// if(tot - k <=k)
		// {
			// return a[k];
		// }	
		// else
			// return false;
	// }
	
	
	for (int i = k; tot-i <= k; --i)
	{
		//cout<<"this case is valid"<<endl;
		
		if (a[i]) 
		{
			//cout<<"returning true for i="<<i<<endl;
			return true;	
		}
	}
	
	return false;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    cin >> n;
    for (int i = 0; i < n; ++i) cin >> x[i] >> y[i];
    int lo = 0, hi = 1000;
    while (lo+1 < hi) {
      int mid = (lo+hi)/2;
      if (solve(mid)) 
	  {
		// if value returned is true, this means 'mid' is a valid Time in which dishes can be made
		// however we look to reduce this time further, now looking in the range of 'lo' to 'mid'
		// hence we set 'hi' as 'mid'
		////cout<<"Valide time: "<<mid<<endl;
		//cout<<"true"<<endl<<endl;
		hi = mid;
	  }
      else 
	  {
		// if value returned is false, it means that 'mid' was too low a time to prepare the dishes
		// so we look to increase this time further, now looking in the range of 'mid' to 'hi'
		// hence we set 'lo' as 'mid'
		//cout<<"false"<<endl<<endl;
		lo = mid;
	  }
    }
    cout << hi << endl;
  }
}
