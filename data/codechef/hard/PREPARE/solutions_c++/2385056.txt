#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = 1005;
pii p[maxn];
bool can[maxn][maxn];
int sum[maxn];
bool cmp(pii a, pii b) {
	return a.first < b.first;
}
void solve() {
	int n; cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> p[i].first >> p[i].second;
	}
	sort(p,p + n,cmp);
	memset(can[n],false,sizeof(can[n]));
	can[n][0] = true;
	sum[n] = 0;
	for (int i = n - 1; i >= 0; i--) {
		sum[i] = sum[i + 1] + p[i].second;
		memcpy(can[i],can[i + 1],sizeof(can[i]));
		for (int j = 1000; j >= p[i].second; j--) {
			can[i][j] |= can[i + 1][j - p[i].second];
		}
	}
	int l = 0;
	int r = 1000;
	while(l < r - 1) {
		int m = (l + r) >> 1;
		int i = 0;
		while(i < n && p[i].first <= m) i++;
		bool ok = false;
		for (int j = 0; j <= m; j++) if (can[i][j]) {
			if (sum[i] - j <= m) {
				ok = true;
				break;
			}			
		}
		if (ok) {
			r = m;
		} else {
			l = m;
		}
	}
	cout << r << endl;
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int T; cin >> T;
	while(T--) solve();
	return 0;
}
