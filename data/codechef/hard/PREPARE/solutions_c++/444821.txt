//logic as stated in editorial
#include<iostream>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>
#include<malloc.h>
#include<vector>
#include<algorithm>
#include<stack>
#include<queue>
#include<list>
#include<string>
#include<map>
#define min(a,b) (a>b?b:a)
#define max(a,b) (a>b?a:b)
#define PB(x) push_back(x)
#define MP(x,y) make_pair(x,y)
#define F first
#define S second
using namespace std;
typedef long long LL;
typedef pair<int,int> PII;
typedef vector<int> VI;

int chk(vector<PII> v,int T)
{
    int sum=0;
    int dp[1000]={1};    //this stores if a subset of chef/assis times is possible. dp[i]=1 if i=possible subset sum
    for(int i=0;i<v.size();i++){
        if(v[i].F<=T)
            continue;
        else
            sum+=v[i].S;
        for(int j=0;j<=T-v[i].S;j++){
            if(dp[j]){
                dp[j+v[i].S]=1;
            }
        }
    }
    for(int i=T;sum-i<=T;i--){  //find an i such that sum-i<=T && i<=T and the value i is a possible subset
        if(dp[i])
            return 1;
    }
    return 0;
}


int main()
{
    //freopen("input.txt","r",stdin);
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<PII> v;
        for(int i=0;i<n;i++){
            int a,b;
            cin>>a>>b;
            v.PB(MP(a,b));
        }
        int lb=0,ub=1000,mid;
        while(lb+1<ub){
            mid=(lb+ub)/2;
            if(chk(v,mid))
                ub=mid;
            else
                lb=mid;
        }
        cout<<ub<<endl;
    }
}
