#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
vector<int> V;
int Sum = 0;
bool Dyn[2100][2];
struct Node{
       int a, b;
};
bool operator<(Node a, Node b){
     if (a.a != b.a)     
          return a.a < b.a;
     return a.b > b.b;     
}
int ghadr(int e){
	if (e < 0)
		e *= -1;
	return e;
}
int Set(){
	if ((double)(Sum / 2) > 1000)
	    return 1001;
	for (int j = 0; j < 2100; j++)
	    Dyn[j][1] = false;
	for (int j = 0; j < 2100; j++)
	    if (Dyn[j][0]){
		Dyn[j+V[V.size()-1]][1] = true;
		Dyn[ghadr(j-V[V.size()-1])][1] = true;
	    }
	int a = 0, b = 0;
	for (int i = 0; i < 2100; i++){
	    if (Dyn[i][1]){
		a = i;
		break;
	    }
	}
	for (int i = 0; i < 2100; i++){
	    Dyn[i][0] = Dyn[i][1];
	}
	b = Sum;
	b -= a;
	b /= 2;
	b += a;
	return b;
}
int main(){
    Node My;
    vector<Node> List;
    int t, n;
    cin >> t;
    for (int i = 0; i < t; i++){
	for (int i = 0; i < 2100; i++)
	    Dyn[i][0] = false;
	Dyn[0][0] = true;
	cin >> n;
	List.clear();
	My.a = 0;
	My.b = 0;
	List.push_back(My);     
	V.clear();   
	Sum = 0;
	for (int i = 0; i < n; i++){
	    cin >> My.a >> My.b;
	    List.push_back(My);
	}
	sort(List.begin(), List.end());
	int Min = List[n].a;
	for (int i = n; i > 0; i--){
	    V.push_back(List[i].b);
	    Sum += List[i].b;
	    Min = min(Min, max(List[i-1].a, Set()));
	}
	cout << Min << endl;
    }
    return 0;
}
