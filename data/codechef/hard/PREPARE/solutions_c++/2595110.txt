#include <cstdio>
#include <iostream>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <climits>
#include <cctype>
#include <cassert>
#define ill long long
#define s(n)     scanf("%d",&n)
#define sc(n)    scanf("%c",&n)
#define sl(n)    scanf("%lld",&n)
#define sf(n)    scanf("%lf",&n)
#define ss(n)    scanf("%s",n)
#define INF      0xBADC0DE
#define EPS      1e-9
#define bitcount __builtin_popcount
#define gcd      __gcd
#define forall(i,a,b) for(int i=a; i<b; i++)
#define foreach(v, c) for( typeof( (c).begin()) v = (c).begin();   v != (c).end();  ++v)
#define all(a) a.begin(), a.end()
#define in(a,b) ( (b).find(a) != (b).end())
#define pb  push_back
#define fill(a,v) memset(a, v, sizeof a)
#define sz(a) ((int)(a.size()))
#define mp  make_pair
#define maX(a,b) ( (a) > (b) ? (a) : (b))
#define miN(a,b) ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)  ( (n >> b) & 1)
#define DREP(a) sort(all(a));  a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind) (lower_bound(all(arr),ind)-arr.begin())
#define pii pair<int, int>
#define x first
#define y second
#define MAX 1100
#define rep while
#define mod (int)(1e9+7)

using namespace std;
void input();
int n;
int chef[MAX], oth[MAX];
vector<int> v;
int dp[MAX][MAX];
int knap(int i, int che) {
    if(i <= -1) {
        return 0;
    }
    int &res = dp[i][che];
    if(res != -1)
        return res;
    int ans = 0;

    if(che -v[i] >= 0) {
        ans = knap(i-1, che - v[i])+v[i];
    }
    ans = max(ans, knap(i-1, che));
    return res = ans;
}
bool possible(int tim) {
    v.clear();
    int sum = 0;
    forall(i, 0, n) {
        if(oth[i] <= tim) continue;
        v.pb(chef[i]);
        sum += chef[i];
    }
    forall(i, 0, v.size()) {
        forall(j, 0, sum+5) {
            dp[i][j] = -1;
        }
    }

    int ans = 0;
    if(v.size() > 0)
        ans = knap(v.size()-1, tim);
    // cout << tim <<"  " << ans <<" " << sum <<endl;
    return sum - ans <= tim;
}
void solve() {
    int low = 0, high = 1000; 
    int ans = INF;
    while(low < high) {
        int mid = (low+high)/2;
        if(high -low < 1) {
            if(possible(low)) {
                ans = min(low, ans);
            } else if(possible(high)) {
                ans = min(high, ans);
            } else {
                ans = -1;
            }
        }
        if(possible(mid)) {
            high = mid;
            ans = min(ans, mid);
        } else {
            low = mid+1;
        }
    }
    printf("%d\n", ans);
}

void input() {
    int a; int b; int c;
    int t,     m;
    #ifndef ONLINE_JUDGE
        freopen("test", "r", stdin);
    #endif
    s(t);
    forall(tt, 0, t) {
        s(n);
        forall(i, 0, n) {
            s(oth[i]); s(chef[i]);
            // cout << oth[i] <<" " << chef[i] <<endl;
        }
        solve();
    }
}
int main() {
    input();
    return 0;
}