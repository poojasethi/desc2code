/*
ID: abhishe38
PROG:
LANG: C++
*/

//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

#define PB push_back
#define MP make_pair
#define MAXIMUM 18446744073709551615ULL
#define MAX 1010

using namespace std;

typedef long long int LL;
typedef unsigned long long int ULL;
typedef unsigned int UI;
typedef pair<int,int> PII;
typedef vector<int> VI;
typedef vector< pair<int,int> > VPI;

VPI prepare;
VI jobs;

bool possible(int t)
{
    //cout<<"time: "<<t<<"\n";
    jobs.clear();
    int n = prepare.size();
    int total = 0;
    for (int i=0; i<n; i++)
    {
        //cout<<"checking: "<<prepare[i].first<<" "<<prepare[i].second<<"\n";
        if (prepare[i].first<=t)
        continue;

        if (prepare[i].second>t)
        return false;

        jobs.PB(prepare[i].second);
        total += prepare[i].second;
    }
    //cout<<"total: "<<total<<"\n";

    if (jobs.size()==0) return true;
    if (total > 2*t) return false;

//    cout<<"\nCur Jobs: ";
//    for (int i=0; i<jobs.size(); i++)
//    cout<<jobs[i]<<" ";
//    cout<<"\n\n";

    vector<bool> d(2001,false);
    d[0] = true;
    for(int i=0; i<jobs.size(); i++)
    {
        for (int j = 1000 - jobs[i]; j>=0; j--)
        {
            if (d[j]) d[j+jobs[i]] = true;
        }
    }

    for (int i=1; i<=t; i++)
    {
        if(d[i] && (total-i)<=t)
        return true;
    }
    return false;
}


int solve()
{
    int l=1,r=1000,mid;
    while(l<r)
    {
        mid = (l+r)/2;
        if (possible(mid))
        {
            r = mid;
        }
        else
        {
            l = mid+1;
        }
    }
    return l;

}

int main()
{
    int t,chef,other;
    scanf("%d",&t);
    while (t--)
    {
        int n;
        prepare.clear();
        scanf("%d",&n);
        for (int i=0; i<n; i++)
        {
            scanf("%d%d",&other,&chef);
            prepare.PB(MP(other,chef));
        }
    cout<<solve()<<"\n";
    }
   //system("pause");
   return 0;
}
