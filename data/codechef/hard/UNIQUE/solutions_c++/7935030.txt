#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
#include <ctime>
using namespace std;
#define pb push_back
#define INF 1001001001
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define SZ(x) ((int)((x).size()))
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,SZ(t))s<<t[i]<<" ";return s; }
#define DBG(vari) cerr<<#vari<<" = "<<(vari)<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));
#define IOS ios_base::sync_with_stdio(0);
 
#define MAXN 300007
int temp[MAXN], s0[MAXN], s12[MAXN], rank[MAXN], recOut[MAXN], c[MAXN], sa[MAXN], arr[MAXN], lcp[MAXN], n, *_s;
void countSort(int* in, int* out, int* key, int N, int M) {
   fill_n(c, M, 0);
   FOR(i,N) ++c[key[in[i]]];
   REP(i,1,M-1) c[i] += c[i-1];
   REPD(i,N-1,0) out[--c[key[in[i]]]] = in[i];
}
 
inline bool cmp(int u, int v) {
   while(1) {
      if (_s[u] != _s[v]) return _s[u] < _s[v];
      if ((u%3) && (v%3)) return rank[u] < rank[v];
      ++u; ++v;
   }
}
 
void suffixArray(int* s, int N, int* out, int K) {
   int n0 = (N+2)/3, n1 = (N+1)/3, n12 = 0; 
   FOR(i,N) if (i%3) temp[n12++] = i;
 
   countSort(temp, s12, s+2, n12, K);
   countSort(s12, temp, s+1, n12, K);
   countSort(temp, s12, s,   n12, K);    
 
   int cnt = 2, *recIn = new int[n12 + 5];
   FOR(i,n12) {
      if (i>0 && !equal(s+s12[i-1], s+s12[i-1]+3, s+s12[i])) ++cnt;
      recIn[s12[i]%3==1 ? s12[i]/3 : s12[i]/3+n1+1] = cnt;  
   }  
 
   if (cnt != n12+1) {
      FOR(i,3) recIn[n12+1+i] = 0;  
      recIn[n1] = 1;
      suffixArray(recIn, n12+1, recOut, cnt+1);
      FORI(i,n12) s12[i-1] = recOut[i]<n1? 3*recOut[i]+1 : 3*(recOut[i]-n1)-1;
   }  
   delete [] recIn;
 
   FOR(i,n12) rank[s12[i]] = i+1;  
   rank[N] = 0;
 
   FOR(i,n0) s0[i] = 3*i;
   countSort(s0,temp,rank+1,n0,n12+2);   
   countSort(temp,s0,s,n0,K);  
 
   _s = s;
   merge(s12, s12+n12, s0, s0+n0, out, cmp);  
}
 
void init (const string &t) {
   n = SZ(t);
   if (n <= 1) sa[0] = 0; else {
      FOR(i,n) arr[i] = t[i];
      arr[n] = arr[n+1] = arr[n+2] = 0;
      suffixArray(arr, n, sa, *max_element(arr,arr+n)+1);
   }
   FOR(i,n) rank[sa[i]] = i; // "rank" changes meaning now
   // Kasai
   for (int i = 0, k = 0; i < n; i++) {
      if (k > 0) k--;
      if (rank[i] == n-1) { lcp[n-1] = -1; k = 0; continue; }
      int j = sa[rank[i]+1];
      while (t[i+k] == t[j+k]) k++;
      lcp[rank[i]] = k;
   }
}
 
vector<pii> ins[MAXN], del[MAXN];
pii res[MAXN];
 
int main () {
   string t;
   cin >> t;
   init(t);
   if (n == 1) {
      printf("1 1");
      return 0;
   }
   FOR(r,n) {
      //DBG(r)
      int l = max(r == 0 ? 0 : lcp[r-1], r == n-1 ? 0 : lcp[r]);
      int s = sa[r];
      //DBG(l)
      //DBG(s)
      if (s + l < n) {
         pii p(l+1,r); // len, pos in SA
         ins[s].pb(p);
         del[s+l+1].pb(p);
         //DBG(p)
      }
      //cerr<<endl;
   }
   set<pii> cur;
   FOR(i,n) {
      FOREACH(it,del[i]) cur.erase(*it);
      FOREACH(it,ins[i]) cur.insert(*it);
      res[i] = cur.empty() ? mp(INF,INF) : *cur.begin();
      if (i > 0) REMIN(res[i], mp(res[i-1].fi + 1, res[i-1].se));
   }
   
   FOR(i,n) {
      //DBG(res[i])
      int j = sa[res[i].se] + 1;
      printf("%d %d\n", j, res[i].fi);
   }
}