#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <set>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cassert>
#include <complex>
using namespace std;
typedef long long ll;
typedef long double ld;

#define REP(i,n) for (int i=0; i<(int)(n); ++i)
#define FOR(i,k,n) for (int i=(k); i<(int)(n); ++i)
#define FOREQ(i,k,n) for (int i=(k); i<=(int)(n); ++i)
#define FORIT(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define SZ(v) (int)((v).size())
#define MEMSET(v,h) memset((v),(h),sizeof(v))

typedef vector<pair<ld,int> > V;

void outp(V v) {
    int n=SZ(v);
    int u[n];
    REP(i, n) u[i] = v[i].second;
    sort(u, u+n);
    REP(i, n) {
        if (i) printf(" ");
        printf("%d", u[i]+1);
    }
    puts("");
}

ld f(V v) {
    int n=SZ(v);
    ld res = 0;
    REP(i, n) {
        ld cur = 1.0;
        REP(j, n) if (j!=i) cur*=v[j].first;
        res += (1.0-v[i].first)*cur;
    }
    return res;
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        int N, K; scanf("%d%d", &N, &K);
        V vp(N);
        REP(i, N) {
            int x; scanf("%d", &x);
            vp[i] = make_pair(x / 100.0, i);
        }
        sort(vp.begin(), vp.end());

        // which one?
        V rbest;
        ld opt = -1;
        REP(k, K+1) {
            V r1;
            REP(i, k) {
                r1.push_back(vp[i]);
            }
            FOR(i, N-K+k, N) {
                r1.push_back(vp[i]);
            }
            if (f(r1) > opt) {
                opt = f(r1);
                rbest = r1;
            }
        }

        outp(rbest);
    }
}
