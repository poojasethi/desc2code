#define DEBUG 0

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <algorithm>
using namespace std;

typedef struct {
  int p;
  int pos;
} node;

int comp(const void *a, const void *b) {
  node *n1=(node *)a;
  node *n2=(node *)b;
  if(n1->p==n2->p)
    return (n1->pos - n2->pos);
  return (n1->p - n2->p);
}
  
long double c_p(node p[36], int test[36], int k) {
  int i, j;
  long double ans=0.0, r;
  for(i=0;i<k;i++) {
    for(r=1.0,j=0;j<k;j++)
      if(i==j)
        r*=1-p[test[j]].p/100.0;
      else
        r*=p[test[j]].p/100.0;
    ans+=r;
  }
  if(DEBUG) {
    for(i=0;i<k;i++)
      printf("%d:%d ", test[i]+1, p[test[i]].p);
    printf("ans=%Lf\n", ans);
  }
  return ans;
}

//brute force tle
void next(int test[36], int n, int k) {
  int i, j;
  if(test[k-1]<n-1) {
    test[k-1]++;
    return;
  }
  for(i=2;i<=k;i++)
    if(test[k-i]<n-i) {
      test[k-i]++;
      for(j=k-i+1;j<k;j++)
        test[j]=test[j-1]+1;
      return;
    }
  test[0]=n;
}

int main(void) {
  int t, k, n, i, j, best[36], test[36];
  node p[36];
  long double best_p, this_p;

  scanf("%d", &t);

  while(t--) {  
    scanf("%d %d", &n, &k);

    for(i=0;i<n;i++) {
      scanf("%d", &p[i].p);
      p[i].pos=i+1;
    }

    if(k==n) { //print all
      printf("1");
      for(i=2;i<=n;i++)
        printf(" %d", i);
      printf("\n");
    } else if(k==1) { //print min
      for(i=1,best[0]=0;i<n;i++)
        if(p[i].p<p[best[0]].p)
          best[0]=i;
      printf("%d\n", best[0]+1);
    } else {
      qsort(p, n, sizeof(p[0]), comp);
      best_p=-1.0;
      for(j=0;j<=k;j++) {
        for(i=0;i<j;i++)
          test[i]=i;
        for(i=0;i<k-j;i++)
          test[j+i]=n-1-i;

        this_p=c_p(p, test, k);
        if(this_p>best_p) {
          best_p=this_p;
          for(i=0;i<k;i++)
            best[i]=test[i];
        }
      }
      
      printf("%d", p[best[0]].pos);
      for(i=1;i<k;i++)
        printf(" %d", p[best[i]].pos);
      printf("\n");
/* wrong logic
      if(p[0].p<=50) {
        printf("%d", p[0].pos);
        for(i=1;i<k;i++)
          printf(" %d", p[n-i].pos);
        printf("\n");
      } else {
	
        printf("%d", p[n-1].pos);
        for(i=0;i<k-1;i++)
          printf(" %d", p[i].pos);
        printf("\n");
      }
*/
    }
  }
}
