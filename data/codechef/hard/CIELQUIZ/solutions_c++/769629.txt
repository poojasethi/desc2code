#pragma comment(linker, "/stack:64000000")
#define _CRT_SECURE_NO_DEPRECATE

#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <climits>
#include <cstring>
#include <ctime>
#include <cmath>
#include <cassert>
#include <vector>
#include <queue>
#include <stack>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <algorithm>
#include <utility>

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define forl(i, n) for (int i = 1; i <= int(n); i++)
#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)
#define fore(i, l, r) for (int i = int(l); i <= int(r); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define all(a) (a).begin(), (a).end()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(x, y) make_pair((x), (y))
#define ft first
#define sc second
#define X first
#define Y second

using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;

const int N = 36 + 3;

int n, k;
pt p[N];

inline bool read()
{
	if (scanf("%d%d", &n, &k) != 2)
		return false;
		
	forn(i, n)
	{
		assert(scanf("%d", &p[i].ft) == 1);
		p[i].sc = i;
	}
		
	return true;
}

inline void solve()
{
	sort(p, p + n);
	
	ld ansVal = -1.0;
	int ansLf = -1, ansRg = -1;
	
	forn(lf, k + 1)
	{
		int rg = k - lf;
		
		vector<int> idx;
		
		forn(i, lf)
			idx.pb(i);
			
		forn(i, rg)
			idx.pb(n - 1 - i);
			
		ld curVal = 0.0;
		
		forn(i, sz(idx))
		{
			ld cur = 1.0;
			
			forn(j, sz(idx))
				if (j == i)
					cur *= 1.0 - ld(p[idx[j]].ft) / 100.0;
				else
					cur *= ld(p[idx[j]].ft) / 100.0;
					
			curVal += cur;
		}
		
		if (ansVal + EPS < curVal)
		{
			ansVal = curVal;
			ansLf = lf;
			ansRg = rg;
		}
	}
	
	assert(ansVal > -EPS && ansLf != -1 && ansRg != -1);
	
	forn(i, ansLf)
		printf("%d ", p[i].sc + 1);
		
	forn(i, ansRg)
		printf("%d ", p[n - 1 - i].sc + 1);
		
	puts("");
}

int main()
{
    //freopen("input.txt", "rt", stdin);
    //freopen("output.txt", "wt", stdout);
    
    int testCount;
    cin >> testCount;
    
    forn(test, testCount)
    {
        assert(read());
        solve();
    }
    
    return 0;
}
