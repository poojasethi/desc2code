#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <ctime>
using namespace std;
 
#define maxn 40
 
struct node
{
	int st;
	double x,y;
	node(){}
	node(int a,double p,double q){st=a;x=p;y=q;}
};
 
vector<node> Left[maxn],Right[maxn];
 
const double eps	=	1e-8;
 
inline bool cmp(const node &a,const node &b)
{
	return a.x+eps<b.x || fabs(a.x-b.x)<eps && a.y+eps<b.y;
}
 
double bestValue,p[maxn];
long long ans;
int n,m,id[maxn];
 
inline double dot(const node &a,const node &b)
{
	return a.x*b.x+a.y*b.y;
}
 
int half;
 
inline void solve(vector<node> &a,vector<node> &b)
{
	for (int i=0;i<a.size();++i){
		for (int j=0;j<b.size();++j){
			double cur=a[i].x*b[j].x+a[i].y*b[j].y;
			if (cur>bestValue+eps){
				bestValue=cur;
				ans=a[i].st|((long long)b[j].st<<half);
			}
		}
	}
}
 
inline node operator -(const node &a,const node &b)
{
	return node(-1,a.x-b.x,a.y-b.y);
}
 
inline double det(const node &a,const node &b)
{
	return a.x*b.y-a.y*b.x;
}
 
inline void rerange(vector<node> &a)
{
	sort(a.begin(),a.end(),cmp);
	int n=0;
	for (int i=0;i<a.size();++i){
		while (n>=2 && det(a[n-1]-a[n-2],a[i]-a[n-1])>=0) --n;
		a[n++]=a[i];
	}
	a.resize(n);
}
 
int main()
{
	int T;
	for (scanf("%d",&T);T--;){
		scanf("%d%d",&n,&m);
		double bak[n];
		for (int i=0;i<n;++i){
			int x;
			scanf("%d",&x);
			p[i]=x/100.0;
			bak[i]=p[i];
		}
		
//		sort(p,p+n);
		
		half=n/2;
		for (int i=0;i<=m;++i)
			Left[i].clear();
		Left[0].push_back(node(0,1,0));
		for (int i=0;i<half;++i){
			for (int j=m;j>=1;--j){
				for (int k=0;k<Left[j-1].size();++k){
					node cur=Left[j-1][k];
					cur.st|=1<<i;
					cur.y=cur.y*p[i]+cur.x*(1-p[i]);
					cur.x*=p[i];
					Left[j].push_back(cur);
				}
				rerange(Left[j]);
			}
		}
		
		for (int i=0;i<=m;++i)
			Right[i].clear();
		Right[0].push_back(node(0,0,1));
		for (int i=half;i<n;++i){
			for (int j=m;j>=1;--j){
				for (int k=0;k<Right[j-1].size();++k){
					node cur=Right[j-1][k];
					cur.st|=1<<i-half;
					cur.x=cur.x*p[i]+cur.y*(1-p[i]);
					cur.y*=p[i];
					Right[j].push_back(cur);
				}
				rerange(Right[j]);
			}
		}
		
		ans=0;
		bestValue=-1;
		for (int i=0;i<=m;++i){
			solve(Left[i],Right[m-i]);
			//printf("bestValue = %lf\n",bestValue);
		}
		
		bool first=true;
		for (int i=0;i<n;++i)
		if ((ans>>i)&1LL){
			if (!first) printf(" ");
			else first=false;
			for (int j=0;j<n;++j)
			if (fabs(bak[j]-p[i])<eps){
				printf("%d",j+1);
				bak[j]=-1000;
				break;
			}
		}
		puts("");
		//printf("bestValue = %lf\n",bestValue);
	}
	//printf("%lf\n",(double)clock()/CLOCKS_PER_SEC);
	return 0;
}