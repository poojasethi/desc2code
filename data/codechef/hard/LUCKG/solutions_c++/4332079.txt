#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */

int ans[1001][1001];
const int p12[]={0,2,9,10,1,6,7,8,3,4,5,11};

void solve() {
    int N, m;
    cin >> N >> m;
    VI p(N);
    rep(i,N) { cin >> p[i]; }
    
    if(N<=2 || m<=2) {
        cout << "No Solution" << endl;
        return;
    }
    
    VI used(N,0);
    int counter = 1;
    
    rep(i,N) if(used[i]==0) {
        VI cycle;
        for(int x = i; used[x]==0; x=p[x]) {
            used[x] = 1;
            cycle.pb(x);
        }
        
        int n = (int)cycle.size();
        
        if(n <= 2) {
            cout << "No Solution" << endl;
            return;
        }
        if(n==3 && m==4) {
            rep(k,n) rep(j,m) ans[cycle[k]][j]=counter + p12[k*m+j];
        }
        else {
            rep(k,m) {
                int len = (int)cycle.size();
                rep(j,len) {
                    ans[cycle[j]][k] = counter + k*n+(k%n-j+n)%n;
                }
            }
        }
        counter += cycle.size() * m;
    }
//    //check
//    rep(i,N) {
//        int i2 = p[i];
//        int cnt = 0;
//        rep(j,m) rep(k,m) cnt += ans[i][j] > ans[i2][k];
//        int a = m*m;
//        a = (a+1)/2;
//        if(cnt<a) {
//            cout << "No Solution" << endl;
//            return;
//        }
//    }
//    
    rep(i,N) {
        rep(j,m) {
            cout << ans[i][j];
            if(j+1<m) cout << " "; else cout << endl;
        }
    }
}

int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);
    
    int T;
    cin >> T;
    
    while (T--) {
        solve();
    }

#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
