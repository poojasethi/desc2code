#include <cstdio>
#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <stack>
#include <numeric>
#include <map>
using namespace std;

int arr[1000][1000];
int ans[1000][1000];
int per[1000];
int bond[3][4] = {1,7,8,9,2,3,10,12,4 ,5,6,11};

int main()
{
    int sumcycle,t,n,index,m,temp,trop,newpos,cycle;
    bool breaked;
    vector <pair<int , int > > lcmarr;
    map<int , int> visit;
    cin>>t;
    while(t--)
    {
        sumcycle = 0;
        scanf("%d%d",&n,&m);
        for(int i = 0 ; i< n ;i++)
        {
            visit[i] = i;
            scanf("%d",per + i);
        }
        if(n == 1 || n == 2 || m ==1 || m == 2 ) //|| (n==3 && m ==4)
        {
            printf("No Solution\n");
            continue;
        }
    newpos =0;
     breaked = false;
    while(true)
    {
        cycle = 0;
        while(visit.find(newpos)!= visit.end())
        {
            visit.erase(newpos);
          newpos = per[newpos];
          cycle++;
        }
        if(cycle == 1 || cycle == 2 ) //|| (cycle == 3 && m ==4)
        {
            breaked = true;
            break;
        }
        lcmarr.push_back(make_pair(cycle,newpos));
        if(visit.empty())
            break;
        else
            newpos = visit.begin()->first;
    }
    if(breaked)
    {
        lcmarr.clear();
        visit.clear();
        printf("No Solution\n");
        continue;
    }
    //game starts

    for(int iii = 0 ; iii<lcmarr.size(); iii++) //for every cycle of permutation
    {

        if(lcmarr[iii].first == 3 && m == 4)
        {
            for(int i3 = 0 ;i3 <3 ; i3++)
            {
                for(int j4 = 0 ; j4 <4 ; j4++)
                {
                    arr[i3][j4] = bond[i3][j4];
                }
            }
        }
        else
        {
            for(int i = 1; i<= lcmarr[iii].first ; i++) //calculate arr
            {
                temp = i;
                arr[i-1][0] = temp;
                for(int j = 1 ; j<m ;j++)
                {
                    if(temp%lcmarr[iii].first==0)
                        temp++;
                    else
                        temp = temp+lcmarr[iii].first+1;
                    arr[i-1][j] = temp;
                }
            } //lse
        }



            index= sumcycle*m;
            for(int pp = 0 ; pp< m ; pp++)
                {
                    ans[lcmarr[iii].second][pp] = arr[0][pp] + index;
                    ans[per[lcmarr[iii].second]][pp] = arr[lcmarr[iii].first-1][pp] + index;
                }
            trop = per[lcmarr[iii].second];
            for(int ea = 2 ; ea<lcmarr[iii].first ; ea++) //for each permutation
            {
                trop = per[trop];
                for(int pp = 0 ; pp < m ; pp++)
                {
                    ans[trop][pp] = arr[lcmarr[iii].first-ea][pp] + index;
                }
            }

            sumcycle += lcmarr[iii].first;
    }

    for(int i = 0 ; i <n ; i++)
    {
        for(int j = 0 ; j<m ; j++)
        {
            printf("%d",ans[i][j]);
            if(j != m-1)
                printf(" ");
        }
        printf("\n");
    }
    lcmarr.clear();
    visit.clear();
    } // for every test case
    return 0;
}
