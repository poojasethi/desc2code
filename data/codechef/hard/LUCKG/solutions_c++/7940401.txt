#include<bits/stdc++.h>
 
#define gc getchar_unlocked
#define pc putchar_unlocked
 
using namespace std; 
 
typedef vector<int> vi;
int sol[1001][1001];
 
inline int inp()
{
    int n = 0, c = gc(), f = 1;
    while(c != '-' && (c < '0' || c > '9')) c = gc();
        if(c == '-')
        {
            f = -1;
            c = gc();
        }
    while(c >= '0' && c <= '9')
        n = (n<<3) + (n<<1) + c - '0', c = gc();
    return n * f;
}
 
void op(int n)
{
	if(n<0)
	{  n=-n;
	   pc('-');
	}
	int i=10;char output_buffer[11];
	output_buffer[10]='\n';
	do{output_buffer[--i]=(n%10)+'0';n/=10;}
	while(n);
	do{pc(output_buffer[i]);}
    while(++i<10);
}
 
 
inline void dfs(vector<vi>&adj,vector<int>&path,bool visited[],int current)
{
    visited[current]=true;
    path.push_back(current);
    vi temp=adj[current];
    for(vi::iterator p=temp.begin();p!=temp.end();p++)
    {
        if(!visited[*p])
            dfs(adj,path,visited,*p);
    }
}
 
inline void build(vi&path,int m,int no)
{
    int i,j,k,l,n;
    n=path.size();
    no+=n*m-1;
    l=0;
    k=path[l];
    for(i=m-1;i>=0;i--)
    {
        for(j=0;j<=n-1;j++)
        {
            sol[k][i]=no;
            no--;
            if(j==n-1)
                continue;
            l++;
            if(l==path.size())
                l=0;
            k=path[l];
        }
    }
}
 
inline void special(vector<int>&path,int no)
{
    int i,j,k;
    i=path[0];
    j=path[1];
    k=path[2];
    no--;
    sol[i][0]=no+3;
    sol[i][1]=no+5;
    sol[i][2]=no+6;
    sol[i][3]=no+12;
    sol[j][0]=no+2;
    sol[j][1]=no+4;
    sol[j][2]=no+9;
    sol[j][3]=no+11;
    sol[k][0]=no+1;
    sol[k][1]=no+7;
    sol[k][2]=no+8;
    sol[k][3]=no+10;
}
int main()
{
    int i,j,k,l,tc,n,m;
    tc = inp();
    while(tc--)
    {
        n = inp(); m = inp();
        int arr[n];
        for(i=0;i<=n-1;i++)
            arr[i] = inp();
        if(m==1||m==2)
           { pc('N'); pc('o'); pc(' '); pc('S'); pc('o'); pc('l'); pc('u'); pc('t');
             pc('i'); pc('o'); pc('n'); pc('\n');
           }
        else
        {
            vector<vi>adj;
            adj.clear();
            vi *temp;
            for(i=0;i<=n-1;i++)
            {
                temp=new vi;
                adj.push_back(*temp);
            }
            for(i=0;i<=n-1;i++)
            {
                adj[i].push_back(arr[i]);
                adj[arr[i]].push_back(i);
            }
            bool visited[n];
            for(i=0;i<=n-1;i++)
                visited[i]=false;
            vector<int>path;
            int flag=0;
            int no=0;
            for(i=0;i<=n-1;i++)
            {
                if(!visited[i])
                {
                    path.clear();
                    dfs(adj,path,visited,i);
                    if(path.size()==1||path.size()==2)
                    {
                        flag=1;
                        break;
                    }
                    else if(m==4&&path.size()==3)
                        special(path,no+1);
                    else
                        build(path,m,no+1);
                    no+=path.size()*m;
                }
            }
           if(flag==1)
           { pc('N'); pc('o'); pc(' '); pc('S'); pc('o'); pc('l'); pc('u'); pc('t');
             pc('i'); pc('o'); pc('n'); pc('\n');
           }
            else
            {
                for(i=0;i<=n-1;i++)
                {
                    for(j=0;j<=m-2;j++)
                    {
                       op(sol[i][j]);
                       pc(' ');
                    }
                    op(sol[i][m-1]);
                    pc('\n');
                }
            }
        }
    }
    return 0;
} 