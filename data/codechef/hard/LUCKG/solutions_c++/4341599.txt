#include<bits/stdc++.h>
using namespace std;
int dp[1001][1001];
bool v[1001];
int p[1001];
vector<int>rows[1001];
int special[][4] = {{1, 3, 10, 11}, {2, 7, 8, 9}, {4, 5, 6, 12}};
int main()
{
	int t;
	scanf("%d",&t);
	while(t--)
	{
		memset(v,false, sizeof(v));
		int n,m;
		bool flag=true;
		scanf("%d%d",&n,&m);
		for(int i=0;i<n;i++)
		 {scanf("%d",&p[i]);
		  rows[i].clear();
	     }
		if(n<3 || m<3)
		 flag=false;
		else
		{
			memset(v, false,sizeof(v));
			int connected_graphs = 0;
			int size=0;
			int count=0;
			for(int i=0;i<n;i++)
			{
			  int temp_size=0;
			  if(!v[i])
			  {
			    connected_graphs++;
			    int te = p[i];
			    while(!v[te])
			    {
			    	v[te]=true;
			    	rows[size].push_back(te);
					te = p[te];
			    	temp_size++;
			    	
			    	
			    }
			    if(0)
			    for(int j=0;j<temp_size;j++)
			    {
			    	cout<<rows[size][j]<<endl;
			    }
			    if(temp_size<3)
			     {
			     	flag=false;
			     	break;
			     }
			     int t_size =temp_size;
			    int c_t=0;
			    int maX= count;
			    if(temp_size==3 && m==4)
			    {
			    	for(int k=0;k<3;k++)
			    	 {
			    	 	for(int j=0;j<4;j++)
			    	 	{
			    	 		//cout<<special[k][j]<<endl;
			    	 		//cout<<k<<" "<<rows[size][k]<<" "<<j<<endl;
			    	 		dp[rows[size][k]][j]=  special[k][j]+ maX;
			    	 	}
			    	 }
			    	 count += 12;
			    }
			    else
			    {
			    for(int k=0;k<t_size;k++)
			    {
			    	int no = t_size-k;
			    	for(int j=0;j<m;j++)
			    	{
			    		dp[rows[size][k]][j]= no + maX;
			    		if((no)%t_size==0)
			    		 no = no+1;
			    		else
			    		 no = no + t_size +1;
			    	}
			    }
			    count += t_size*m;
			  }
			    size++;
		      }
		     }
		 }
		    
		if(!flag)
		 cout<<"No Solution\n";
		else
		for(int i=0;i<n;i++)
		{
		 for(int j=0;j<m;j++)
		  {
		  	printf("%d ",dp[i][j]);
		  }
		  printf("\n");
		}
		
	}
}