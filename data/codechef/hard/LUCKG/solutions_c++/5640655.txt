#include <bits/stdc++.h>
using namespace std;
int a[1000 + 10];
vector <int> vec[1000 + 10];
int mark[1000 + 10];
int ans[1000 + 10][1000 + 10];

int GetCycles(int);
bool Check(int,int);

int main()
{
    int bcase[4][3] = {{1,2,4},{3,7,5},{10,8,6},{11,9,12}};
    int tc,t;
    scanf("%d",&tc);
    for(t = 1 ; t<=tc ; t++)
    {
        int n,m;
        scanf("%d %d",&n,&m);
        for(int i = 1 ; i<=n ; i++)
        {
            scanf("%d",&a[i]);
            a[i] = a[i] + 1;
            mark[i] = 0;
        }

        int cycs = GetCycles(n);
        //printf("%d\n",cycs);
        bool res = Check(cycs,m);
        if(res == false)
        {
            printf("No Solution\n");
            //if(t < tc) printf("\n");
        }
        else
        {
            //printf("here0\n");
            int filled = 0;
            for(int i = 1 ; i<=cycs ; i++)
            {
                int l = vec[i].size();
                int tot = m*l;
                int temp = tot;
                int pivot = 0;

                if(l == 3 && m == 4)
                {
                    //printf("here\n");
                    for(int k = 0 ; k<m ; k++)
                    {
                        for(int j = 0 ; j<l; j++)
                        {
                            int u = vec[i][j];
                            ans[u][k+1] = filled + bcase[k][j];
                        }
                    }
                    filled += tot;
                    continue;
                }

                for(int k = m ; k>0 ; k--)
                {
                    //if(pivot == 0) pivot = l - 1;
                    //else pivot--;
                    for(int j = pivot ; j<l ; j++)
                    {
                        int u = vec[i][j];
                        ans[u][k] = filled + temp;
                        temp--;
                    }
                    for(int j = 0 ; j<pivot ; j++)
                    {
                        int u = vec[i][j];
                        ans[u][k] = filled + temp;
                        temp--;
                    }
                    pivot--;
                    if(pivot < 0) pivot = l - 1;
                }
                filled = filled + m*l;
            }
            //for()
            for(int i = 1 ; i<=n ;i++)
            {
                for(int j = 1 ; j<m ; j++)
                printf("%d ",ans[i][j]);

                printf("%d\n",ans[i][m]);
                //printf("%d",ans[i][m]);
                //printf("\n");
                //printf("\n");
            }

        }
        //printf("uttam\n");
        for(int i = 1 ; i<=n ; i++)
        vec[i].clear();
    }
}
int GetCycles(int n)
{
    int cnt = 0;
    for(int i = 1 ; i<=n ; i++)
    {

        if(mark[i] == 0)
        {
            mark[i] = 1;
            cnt++;
            int u = a[i];
            vec[cnt].push_back(i);
            while(u != i)
            {
                mark[u] = 1;
                vec[cnt].push_back(u);
                u = a[u];
            }
        }
    }
    return cnt;
}

bool Check(int cycs,int m)
{
    if(m < 3) return false;
    for(int i = 1 ; i<=cycs ; i++)
    {
        int l = vec[i].size();
        if(l < 3) return false;
    }
    return true;
}

