def SortCount(A):
   l = len(A)
   if l > 1:
      n = l//2
      C = A[:n]
      D = A[n:]
      C, c = SortCount(A[:n])
      D, d = SortCount(A[n:])
      B, b = MergeCount(C,D)
      return B, b+c+d
   else:
      return A, 0


def MergeCount(A,B):
   count = 0
   M = []
   i=0
   j=0
   while i<len(A) and j<len(B):
      if A[i]<B[j]:
         M.append(A[i])
         i+=1
      else:
         count += len(A)-i
         M.append(B[j])
         j+=1   
   while i<len(A):
      M.append(A[i])
      i+=1
   while j<len(B):
      M.append(B[j])
      j+=1
   return M, count 

n,q=map(int,raw_input().split())
a=map(int,raw_input().split())
ccc=SortCount(a)[1]%2
for i in range(q):
   x,y = map(int,raw_input().split())
   a[x-1],a[y-1] = a[y-1],a[x-1]
   if ccc==1:
      print 0
      ccc=0
   elif ccc==0:
      print 1
      ccc=1