#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;
#define llu long long unsigned int
#define lli long long int
#define li long int
#define fi first
#define se second
#define pb push_back
#define vi vector<int>
#define mod 1000000007
int scan()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
li scanli()    {int ip=getchar_unlocked(),flag=1;li ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
lli scanlli()    {int ip=getchar_unlocked(),flag=1;lli ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
llu scanllu()    {int ip=getchar_unlocked();llu ret=0;for(;ip<'0'||ip>'9';ip=getchar_unlocked());for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return ret;}
void print(int n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=10;char output_buffer[10];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<10);}
void printli(li n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=11;char output_buffer[11];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<11);}
void printlli(lli n)     {if(n<0){n=-n;putchar_unlocked('-');}int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}
void printllu(llu n)     {int i=21;char output_buffer[21];do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<21);}

lli inversions=0;
lli a[100001];

lli mergeSort(lli left,lli mid,lli right)
{
	lli n1=mid-left+1,n2=right-mid;
	lli temp1[n1],temp2[n2],i,j,k;
	k=left;
	lli inv=0;
	for(i=0;i<n1;i++)
	{
		temp1[i]=a[k];
		k++;
	}
	for(i=0;i<n2;i++)
	{
		temp2[i]=a[k];
		k++;
	}
	i=0;
	j=0;
	k=left;
	//inv+=(inv1+inv2);
	while(i<n1 and j<n2)
	{
		if(temp1[i]<temp2[j])
		{
			a[k]=temp1[i];
			i++;
		}
		else if(temp1[i]>temp2[j])
		{
			inv=inv+(n1-i);
			a[k]=temp2[j];
			j++;
		}
		else
		{
			if(i<n1)
			{
				a[k]=temp1[i];
				i++;
			}
			else if(j<n2)
			{
				a[k]=temp2[j];
				j++;
			}
		}
		k++;
	}
	while(i<n1)
	{
		a[k]=temp1[i];
		i++;
		k++;
	}
	while(j<n2)
	{
		a[k]=temp2[j];
		j++;
		k++;
	}
	//cout<<"inv : "<<inv<<endl;
	return inv;
}

void divide(lli left,lli right)
{
	lli mid=left+(right-left)/2;
	if(left<right)
	{
		divide(left,mid);
		divide(mid+1,right);
		inversions+=(mergeSort(left,mid,right));
	}
}

int main()
{
	lli n=scanlli(),q=scanlli(),i;
	for(i=0;i<n;i++)
	{
		a[i]=scanlli();
	}
	divide(0,n-1);
	int flag;
	if(inversions%2==0)
		flag=0;
	else
		flag=1;
	while(q--)
	{
		lli j,k,x=scanlli(),y=scanlli();
		if(flag==1)
			flag=0;
		else
			flag=1;
		cout<<flag<<endl;
	}
	return 0;
}