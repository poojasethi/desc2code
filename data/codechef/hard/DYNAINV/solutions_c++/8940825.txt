#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <functional>
#include <math.h>
#include <map>

inline bool fastreadIsEndOfLine(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
    if(c == '\r' || c == '\n')
      return true;
  }

  return false;
}

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadll(long long* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

inline void fastreadNeg(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  bool neg = false;
  if(c == '-')
  {
	  c = getchar();
	  neg = true;
  }
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }

  if(neg)
	  *a = -*a;
}

inline void readString(char *s)
{
  *s = getchar();
  while(*s == '\r' || *s == '\n' || *s == -1)
    *s = getchar();

  while(*s != '\r' && *s != '\n' && *s != -1)
  {
    ++s;
    *s = getchar();
  }
  *s = '\0';
}

int N, K, M, Q;
int T = 1;
int A[100000 + 1];

int mergeBuf[100000 + 1];
long long mergeSort(int b, int e)
{
  if(e == (b + 1))
    return 0;

  const int m = (e + b) / 2;

  long long swaps = mergeSort(b, m) + mergeSort(m, e);

  int l = b; int r = m;
  int ibuf = 0;
  for(; (l < m) && (r < e); ++ibuf)
  {
    const int lF = A[l];
    const int rF = A[r];
    if(lF < rF) // left is less, so use it this iteration
    {
      mergeBuf[ibuf] = lF;
      ++l;
    }
    else // right is less, so use it this iteration
    {
      mergeBuf[ibuf] = rF;
      swaps += m - l;
      ++r;
    }
  }

  // Now copy the rest of the left to the merge buffer
  const int leftRemaining = m - l;
  memcpy(mergeBuf + ibuf, A + l, sizeof(int) * leftRemaining);
  ibuf += leftRemaining;

  // Now from the merge buffer to our array (don't have to bother with the remaining right items - they are on their places!)
  memcpy(A + b, mergeBuf, sizeof(int) * ibuf);

  return swaps;
}


int main()
{

#ifdef USE_DATA_TXT
  freopen_s(&stream, "C:\\Projects\\TaskTemplate\\data.txt", "r", stdin);
#endif
#ifdef PRINT_PERF
  auto start = std::chrono::high_resolution_clock::now();
#endif


  //fastread(&T);

  while(T--)
  {
    fastread(&N);
    fastread(&Q);

    for(int i = 0; i < N; ++i)
    {
      fastread(A + i);
    }

	long long inv = mergeSort(0, N) % 2;

	for(int i = 0; i < Q; ++i)
	{
		int X, Y;
		fastread(&X);
		fastread(&Y);

		inv ^= 1;
		printf("%lld\n", inv);
	}

  }

#ifdef PRINT_PERF
  PrintResultPerf(start);
#endif
#ifdef USE_DATA_TXT
  if(stream)
  {
    fclose(stream);
    stream = NULL;
  }
#endif

  return 0;
}
