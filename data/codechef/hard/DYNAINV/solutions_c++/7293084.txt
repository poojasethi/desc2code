#include <stdio.h>
#include <stdlib.h>
#include<bits/stdc++.h>
#define ll long long
int get_int(){
int x=0;char c;int t=0;
for (c=getchar();(c<'0'||c>'9')&&c!='-';c=getchar());
if (c=='-'){t=1;c=getchar();}
for (;c>='0'&&c<='9';c=getchar()){x*=10;x+=c-48;}
if (t) x=-x;return x;
}

ll int  _mergeSort(int arr[], int temp[], int left, int right);
ll int merge(int arr[], int temp[], int left, int mid, int right);


ll int mergeSort(int arr[], int array_size)
{
    int *temp = (int *)malloc(sizeof(int)*array_size);
    return _mergeSort(arr, temp, 0, array_size - 1);
}


ll int _mergeSort(int arr[], int temp[], int left, int right)
{
  int mid; ll int inv_count = 0;
  if (right > left)
  {

    mid = (right + left)>>1;


    inv_count  = _mergeSort(arr, temp, left, mid);
    inv_count += _mergeSort(arr, temp, mid+1, right);


    inv_count += merge(arr, temp, left, mid+1, right);
  }
  return inv_count;
}


ll int merge(int arr[], int temp[], int left, int mid, int right)
{
  int i, j, k;
 ll int inv_count = 0;

  i = left; /* i is index for left subarray*/
  j = mid;  /* i is index for right subarray*/
  k = left; /* i is index for resultant merged subarray*/
  while ((i <= mid - 1) && (j <= right))
  {
    if (arr[i] <= arr[j])
    {
      temp[k++] = arr[i++];
    }
    else
    {
      temp[k++] = arr[j++];


      inv_count = inv_count + (mid - i);
    }
  }


  while (i <= mid - 1)
    temp[k++] = arr[i++];


  while (j <= right)
    temp[k++] = arr[j++];


  for (i=left; i <= right; i++)
    arr[i] = temp[i];

  return inv_count;
}


int main()
{
  int arr[100001]={0};
  int n,q,x,y,temp2;
  ll int temp;
  n=get_int(); q=get_int();

  for(int i=0;i<n;i++)
     arr[i]=get_int();

  for(int i=1;i<=q;i++)
  {  x=get_int()  ;  y=get_int();
 if(i==1){
      temp2=arr[x-1];
      arr[x-1]=arr[y-1];
      arr[y-1]=temp2;
      temp=mergeSort(arr,n);
      temp=temp%2;
      printf("%lld\n",temp);
        }

   else
   {if(temp==0){
        temp=1;
        printf("%lld\n",temp); }
    else {  temp=0;  printf("%lld\n",temp); }

   }




  }



  return 0;
}
