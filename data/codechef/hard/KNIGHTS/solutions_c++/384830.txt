#include <iostream>
#include <vector>
#include <string.h>
using namespace std;

int in[50][50];
int dy[] = {-2,-1,1,2,-2,-1,1,2};
int dx[] = {-1,-2,-2,-1,1,2,2,1};

int V;
vector<int> G[1500];
int match[1500], used[1500];

int dfs(int v){
	used[v] = 1;
	for(int i=0;i<G[v].size();i++){
		int u = G[v][i], w = match[u];
		if(w<0 || !used[w] && dfs(w)){
			match[v] = u;
			match[u] = v;
			return 1;
		}
	}
	return 0;
}

int bipartiteMatching(){
	int ret = 0;
	memset(match, -1, sizeof(match));
	for(int v=0;v<V;v++){
		if(match[v] < 0){
			memset(used, 0, sizeof(used));
			if(dfs(v))++ret;
		}
	}
	return ret;
}

int solve(int h, int w){
	for(int i=0;i<V;i++)G[i].clear();
	for(int i=0;i<h;i++)for(int j=0;j<w;j++){
		if(in[i][j] == -1)continue;
		int no = in[i][j];
		for(int k=0;k<8;k++){
			int y = i + dy[k];
			int x = j + dx[k];
			if(y<0||y>=h||x<0||x>=w||in[y][x]==-1)continue;
			G[no].push_back(in[y][x]);
		}
	}
	int stable = V - bipartiteMatching();
	return stable;
}

int main(){
	int T;
	cin >> T;
	
	while(T--){
		int h, w;
		char c;
		
		cin >> h >> w;
		
		V = 0;
		for(int i=0;i<h;i++)for(int j=0;j<w;j++){
			cin >> c;
			if(c == '.')in[i][j] = V++; else in[i][j] = -1;	
		}
		
		cout << solve(h, w) << endl;
	}
	
	return 0;
}