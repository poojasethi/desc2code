#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <map>
#include <numeric>
#include <algorithm>
using namespace std;

typedef vector<int> VI;
typedef vector<VI> VVI;

map<int, int> mp;
int dx[] = {-1, 1, -2, 2, -2, 2, -1, 1};
int dy[] = {2, 2, 1, 1, -1, -1, -2, -2};

bool FindMatch(int i, const VVI &w, VI &mr, VI &mc, VI &seen) {
	for (int j = 0; j < w[i].size(); j++) {
		if (w[i][j] && !seen[j]) {
			seen[j] = true;
			if (mc[j] < 0 || FindMatch(mc[j], w, mr, mc, seen)) {
				mr[i] = j;
				mc[j] = i;
				return true;
			}
		}
	}
	return false;
}

int BipartiteMatching(const VVI &w, VI &mr, VI &mc) {
	mr = VI(w.size(), -1);
	mc = VI(w[0].size(), -1);
	
	int ct = 0;
	for (int i = 0; i < w.size(); i++) {
		VI seen(w[0].size());
		if (FindMatch(i, w, mr, mc, seen)) ct++;
	}
	return ct;
}

int main(){
	int cases;
	cin >> cases;
	for (int cs =0; cs<cases; cs++){
		mp.clear();
		VVI w;
		int rows, cols;
		cin >> rows >> cols;
		vector<string> b;
		string temp;
		for (int i=0; i<rows; i++){
			cin>>temp;
			b.push_back(temp);
		}
		int blackIndex=0;
		for (int i=0; i<rows; i++){
			for (int j=0; j<cols; j++){
				if ( (i+j)%2==0) continue;
				if (b[i][j]=='#') continue;
				mp[1000*i+j]=blackIndex;
				blackIndex++;
			}
		}
		
		for (int i=0; i<rows; i++){
			for (int j=0; j<cols; j++){
				if ( (i+j)%2==1) continue;
				if (b[i][j]=='#') continue;
				vector<int> tmp(blackIndex, 0);
				for (int k=0; k<8; k++){
					if (!mp.count((i+dx[k])*1000+j+dy[k])) continue;
					tmp[ mp[(i+dx[k])*1000+j+dy[k]]] = 1;
				}
				w.push_back(tmp);
			}
		}
		if (w.size()==0) cout << blackIndex << endl;
		else { vector<int> mr, mc;
			cout << w[0].size()+w.size()-BipartiteMatching(w, mr, mc) << endl; }
	
	}
}
