#include <iostream>
#include <cstring>

using namespace std;

const int MAXN = 35;

bool seen[MAXN][MAXN];
char g[MAXN][MAXN];
int r, c, match[MAXN][MAXN];
int dc[] = {-2, -1, 1, 2, 2, 1, -1, -2}, dr[] = {1, 2, 2, 1, -1, -2, -2, -1};

bool valid(int i, int j) {
  return 0 <= i && 0 <= j && i < r && j < c && g[i][j] != '#';
}

bool dfs(int i, int j) {
  if (seen[i][j]) return false;
  seen[i][j] = true;
  for (int k = 0; k < 8; ++k) {
    int ni = i+dr[k], nj = j+dc[k];
    if (!valid(ni,nj)) continue;
    if (match[ni][nj] == -1 || dfs(match[ni][nj]/c, match[ni][nj]%c)) {
      match[ni][nj] = i*c+j;
      match[i][j] = ni*c+nj;
      return true;
    }
  }
  return false;
}

bool augment() {
  memset(seen, false, sizeof(seen));
  for (int i = 0; i < r; ++i)
    for (int j = 0; j < c; ++j)
      if (((i+j)&1) && valid(i,j) && match[i][j] == -1 && dfs(i,j))
	return true;
  return false;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    cin >> r >> c;
    int b = 0;
    for (int i = 0; i < r; ++i) {
      cin >> g[i];
      for (int j = 0; j < c; ++j)
	if (g[i][j] == '#') ++b;
    }
    memset(match, -1, sizeof(match));
    int tot = 0;
    while (augment()) ++tot;
	
    cout << r*c-b-tot << endl;
  }
}