#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cctype>
#include <cmath>
#include <string>
#include <iostream>
#include <list>
#include <vector>
#include <stack>
#include <queue>
#include <map>

#define R 32
#define MAX 905
typedef long long int LL;
const int INF = 1<<30;
using namespace std;

int r,c,m,match[MAX],dis[MAX];
char s[R][R];
vector<int> g[MAX];
int dx[] = {1, 1, 2, 2,-1,-1,-2,-2};
int dy[] = {2,-2, 1,-1, 2,-2, 1,-1};
#define NIL -1


inline bool valid(int i,int j)
{
	return i>=0 && i<r && j>=0 && j<c && s[i][j] != '#';
}

inline int id(int x,int y)
{
	return x*c + y;
}

bool bfs(void)
{
	int i,j,k;
	list<int> Q;
	for(i=0;i<m;i++)
		if(match[i] == -1 && g[i].size())
		{
			Q.push_back(i);
			dis[i]=0;
		}
		else	dis[i]=INF;

	dis[NIL]=INF;
	while(!Q.empty())
	{
		i=Q.front();
		Q.pop_front();	
		if(i == NIL)	continue;
		for(j=0;j < g[i].size();j++)
		{
			k=g[i][j];
			if(dis[match[k]] == INF)
			{
				dis[match[k]] = dis[i] + 1;
				Q.push_back(match[k]);
			}
		}
	}
	return dis[NIL] != INF;
}

bool dfs(int i)
{
	if(i == NIL)	return true;
	int j,k;
	for(j=0;j < g[i].size();j++)
	{
		k=g[i][j];	
		if(dis[i]+1 == dis[match[k]]  &&  dfs(match[k]))
		{
			match[i]=k;
			match[k]=i;
			return true;
		}
	}
	dis[i]=INF;
	return false;
}		

int main()
{
	int t,i,j,k,b,ni,nj,tot;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d",&r,&c);		
		b=0,m=r*c;
		for(i=0;i<r;i++)
		{
			scanf("%s",s[i]);
			for(j=0;j<c;j++)
				if(s[i][j] == '#')	b++;			
		}
		
		for(i=0;i<m;i++)
			g[i].clear();
		for(i=0;i<r;i++)	for(j=0;j<c;j++)
		{
			if(s[i][j] == '#' || (i+j)&1)	continue;
			for(k=0;k<8;k++)
			{
				ni=i+dx[k],nj=j+dy[k];
				if(!((i+j)&1) && valid(ni,nj))
					g[id(i,j)].push_back(id(ni,nj));
			}
		}
	
		tot=0;
		memset(match,-1,sizeof(match));
		while(bfs())
		{
			for(i=0;i<r;i++)	for(j=0;j<c;j++)	
			{
				if((i+j)&1)	continue;
				k=id(i,j);
				if(!g[k].size())	continue;
				if(match[k] == -1 && dfs(k))	tot++;
			}			
		}	
		printf("%d\n",r*c - b -tot);
	}	
	return 0;
}