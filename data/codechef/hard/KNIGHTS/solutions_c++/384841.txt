#include <cstdio>

#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

class BipartiteMatching {
   vector<bool> seen;
   bool bpm(int u) {
      for (int j = 0; j < adj[u].size(); ++j) {
         int v = adj[u][j];
         if (seen[v]) continue;
         seen[v] = true;
         if (matchR[v] < 0 || bpm(matchR[v])) {
            matchL[u] = v;
            matchR[v] = u;
            return true;
         }
      }
      return false;
   }
public:
   size_t nL, nR;
   vector< vector<int> > adj; // adjacency lists

   vector<int> matchL, matchR;
   BipartiteMatching(size_t _nL, size_t _nR) : nL(_nL), nR(_nR), adj(_nL) {}

   int process() {
      matchL.assign( nL, -1 ),
      matchR.assign( nR, -1 );
      int cnt = 0;
      for (int i = 0; i < nL; ++i) {
         seen = vector<bool>(nR, false);
         if (bpm(i))
            cnt++;
      }
      return cnt;
   }
};

int R, C;
char B[32][32];

int dr[] = {-2, -2, -1, -1, +1, +1, +2, +2};
int dc[] = {-1, +1, -2, +2, -2, +2, -1, +1};

int main(int argc, char* argv[]) {
   int TC;
   scanf("%d", &TC);
   while (TC-- > 0) {
      scanf("%d %d", &R, &C);
      for (int r = 0; r < R; ++r)
         scanf("%s", B[r]);
      int noccupied = 0;
      for (int r = 0; r < R; ++r)
         for (int c = 0; c < C; ++c)
            if (B[r][c] != '.')
               ++noccupied;
      BipartiteMatching bpm((R*C+1)/2, (R*C)/2);
      for (int r = 0; r < R; ++r) {
         for (int c = 0; c < C; ++c) {
            if (B[r][c] != '.') continue;
            if ((r+c) & 1) continue;
            int i = (r*C + c)/2;
            for (int k = 0; k < 8; ++k) {
               int nr = r + dr[k], nc = c + dc[k];
               if (nr < 0 || nr >= R || nc < 0 || nc >= C) continue;
               if (B[nr][nc] != '.') continue;
               int j = (nr*C + nc)/2;
            // printf("(%d,%d):%d -> (%d,%d):%d\n", r, c, i, nr, nc, j);
               bpm.adj[i].push_back(j);
            }
         }
      }
      int res = bpm.process();
      printf("%d\n", R*C - noccupied - res);
   }
   return 0;
}
