#include <iostream>
#include <vector>
#include <stdio.h>
#include <algorithm>
#include <map>
#include <stdlib.h>
#include <set>
#include <string.h>

using namespace std;

typedef long long ll;

#define read(x) scanf("%d",&x)
const int maxn = 22;
int n,m;
char grid[maxn][maxn];
char line[maxn];
int monster[maxn][maxn];
int dp[maxn][maxn][maxn][maxn];
int g[100*maxn];
int fila[4] = {-1,0,1,0};
int col[4] = {0,1,0,-1};

void construct()
{
	memset(monster,0,sizeof(monster));
	memset(dp,-1,sizeof(dp));
	for(int i = 2; i < n - 2; i++)
	{
		for(int j = 2; j < m - 2; j++)
		{
			if(grid[i][j] == '#')continue;
			int total = 0;
			for(int k = 0; k < 4; k++)
			{
				for(int l = 1; l <= 2; l++)
				{
					int f = i + fila[k]*l;
					int c = j + col[k]*l;
					if(grid[f][c] != '^')break;
					if(l == 2)
						total++;
				}
			}
			if(total == 4)
				monster[i][j] = 1;
		}
	}
}

int mex(set<int>&s)
{
	if(s.empty())return 0;
	int i = 0;
	while(1)
	{
		if(s.find(i) == s.end())return i;
		i++;
	}
	return 0;
}

int grundy(int f1, int c1, int f2, int c2)
{
	if(dp[f1][c1][f2][c2] != -1)return dp[f1][c1][f2][c2];
	set<int>s;
	for(int i = f1; i <= f2; i++)
	{
		for(int j = c1; j <= c2; j++)
		{
			if(monster[i][j] == 0)continue;
			s.insert(grundy(f1,c1,i - 1, j -1) ^ grundy(f1,j + 1,i - 1, c2) ^ grundy(i + 1, j + 1,f2,c2) ^ grundy(i + 1, c1,f2, j - 1));
		}
	}
	return dp[f1][c1][f2][c2] = mex(s);
}

int main()
{
	int t;
	read(t);

	while(t--)
	{
		read(n),read(m);

		for(int i = 0; i < n; i++)
		{
			cin >> line;
			for(int j = 0; j < m; j++)
				grid[i][j] = line[j];
		}
		construct();
		if(grundy(0,0, n - 1,m - 1))
			cout << "Asuna" << endl;
		else
			cout << "Kirito" << endl;

	}

	return 0;
}

