#include<bits/stdc++.h>

using namespace std;

const int MAXR = 25;

int R,C;

int dx[] = {1,0,-1,0};
int dy[] = {0,1,0,-1};

bool M[MAXR][MAXR];
char A[MAXR][MAXR];

bool valid(int x,int y){
	if(x>=0&&y>=0&&x<R&&y<C&&A[x][y] != '#')return 1;
	return 0;
}

bool isMonster(int x,int y){
	for(int i=0;i<4;++i){
		int count = 0;
		int u = x + dx[i] , v = y + dy[i];
		if(!valid(u,v))return 0;
		do{
			count++;
			u += dx[i];
			v += dy[i];
			if(count >= 2)break;
		}while( valid(u,v));			
		
		if(count < 2)return 0;
	}
	return 1;
}

bool base(int x1,int y1,int x2,int y2){
	for(int i=x1;i<=x2;++i)
		for(int j=y1;j<=y2;++j)
			if(M[i][j] == 1)
				return 0;
	return 1;
}

int dp[MAXR][MAXR][MAXR][MAXR];

int grundy(int x1,int y1,int x2,int y2){
	if(base(x1,y1,x2,y2) == true)
		return 0;
	if(dp[x1][y1][x2][y2] != -1)return dp[x1][y1][x2][y2]; 
	set<int>s;
	for(int i=x1;i<=x2;++i){
		for(int j=y1;j<=y2;++j){
			if(M[i][j] == 1){
				s.insert(grundy(x1,y1,i-1,j-1) xor grundy(x1,j+1,i-1,y2) xor grundy(i+1,y1,x2,j-1) xor grundy(i+1,j+1,x2,y2) );
			}
		}
	}
	int ans = 0;
	while(s.count(ans) != 0)ans++;
	return dp[x1][y1][x2][y2] = ans;
}

void fill(){
	memset(M,0,sizeof(M));
	for(int i=0;i<R;++i)
		for(int j=0;j<C;++j)
			if(A[i][j] == '^' && isMonster(i,j))
				M[i][j] = true;
}

int main(){
	int T;
	scanf("%d",&T);
	
	while( T-- ){
	    scanf("%d%d",&R,&C);
	    for(int i=0;i<R;++i){
	        for(int j=0;j<C;++j){
	            cin>>A[i][j];
	        }
	    }
	    fill();
	    memset(dp,-1,sizeof(dp));
		bool ans = grundy(0,0,R-1,C-1);
		if(ans == 0)puts("Kirito");
		else puts("Asuna");
	}

}