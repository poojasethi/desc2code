						/*////////////////////////////////////////////////*/
						/* 				 code by d@rk$(@!e   			  */
						/*////////////////////////////////////////////////*/
#include <algorithm>
#include <assert.h>
#include <fstream>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <cctype>
#include <climits>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <cstring>

using namespace std;
#define CLR(a) memset(a, 0, sizeof(a))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define SZ(V) (int )V.size()
#define ALL(V) V.begin(), V.end()
#define RALL(V) V.rbegin(), V.rend()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define si(n) scanf("%d",&n)
#define ss(s) scanf("%s",s)
#define prin(n) printf("%d\n",n)
#define pll pair < long long int, long long int >
#define pii pair < int, int >
#define psi pair < string, int >
#define PB push_back  
#define MP make_pair
#define F first
#define S second
#define MOD 1000000007LL

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef long long LL;
LL r,c,grundy[25][25][25][25];
char graph[20][20];
bool valid[20][20];
bool check(int x,int y){
	if(x>=0 && x<r && y>=0 && y<c && graph[x][y]=='^')
		return true;
	return false;
}
LL get_grundy(LL xl,LL yl, LL xh,LL yh){
	if(xl>xh || yl>yh )
		return 0;
	if(grundy[xl][yl][xh][yh]!=-1)
		return grundy[xl][yl][xh][yh];
	LL x,y,g;
	bool has[1000];
	memset(has,false,sizeof(has));
	FORAB(x,xl,xh){
		FORAB(y,yl,yh){
			if(valid[x][y]){
				g=0;
				g^=get_grundy(xl,yl,x-1,y-1);
				g^=get_grundy(x+1,yl,xh,y-1);
				g^=get_grundy(xl,y+1,x-1,yh);
				g^=get_grundy(x+1,y+1,xh,yh);
				has[g]=true;
			}
		}
	}
	LL i;
	FORN(i,1000)
		if(!has[i])
			return grundy[xl][yl][xh][yh]=i;
}

int main()
{
	LL i,j,k,l,test;
	cin >> test;
	while(test--){
		cin >> r >> c;
		string s;
		FORN(i,r){
			cin >> s;
			FORN(j,c)
				graph[i][j]=s[j];
		}
		memset(valid,true,sizeof(valid));
		memset(grundy,0,sizeof(grundy));
		FORN(i,25)
			FORN(j,25)
				FORN(k,25)
					FORN(l,25)
						grundy[i][j][k][l]=-1;
		FORN(i,r)
			FORN(j,c)
				FORAB(k,1,2)
					if(!check(i,j-k) || !check(i,j+k) || !check(i-k,j) || !check(i+k,j) || graph[i][j]=='#')
						valid[i][j]=false;
		FORN(i,r)
			FORN(j,c)
				grundy[i][j][i][j]= (valid[i][j] ? 1 : 0);
		if(get_grundy(0,0,r-1,c-1))
			cout << "Asuna" << endl;
		else
			cout << "Kirito" << endl;
	}
	return 0;
}