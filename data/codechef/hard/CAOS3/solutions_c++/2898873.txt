#include <iostream>
#include <fstream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <algorithm>
#include <map>
#include <vector>
#include <list>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <sstream>
#include <cmath>

using namespace std;

typedef pair<int,int>   PI;
typedef vector<int> VI;
typedef vector<string> VS;
typedef long long int LL;
typedef unsigned long long int ull;
typedef pair<ull,ull> PU;

#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORE(i,a,b) for(ull i=a;i<=b;i++)
#define FORD(i,a,b) for(ull i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define ITER(i,a) for( auto i=a.begin();i!=a.end();i++)

#define mod 1000000007
#define MAXN 1000010
#define MP make_pair
#define INF mod

VS grid;
int r,c;

bool isValidRow(int i)
{
    return (i>=0&&i<r);
}

bool isValidColumn(int j)
{
    return (j>=0&&j<c);
}

bool isPrime(int i)
{
    if(i<2)return false;
    bool flag=true;
    FOR(j,2,int(sqrt(i)))
    {
        if(i%j==0)
        {
            flag=false;
            break;
        }
    }
return flag;
}

int isMonsterPresent(int i,int j)
{
    int l=0,r=0,t=0,b=0,tmp,tmp1,tmp2,ans=0;
    if (grid[i][j]=='#')return 0;
    tmp=i-1;
    while(isValidRow(tmp)&&grid[tmp][j]=='^'){t++;tmp--;}
    tmp=i+1;
    while(isValidRow(tmp)&&grid[tmp][j]=='^'){b++;tmp++;}
    tmp=j-1;
    while(isValidColumn(tmp)&&grid[i][tmp]=='^'){l++;tmp--;}
    tmp=j+1;
    while(isValidColumn(tmp)&&grid[i][tmp]=='^'){r++;tmp++;}
    tmp1=t<b?t:b;
    tmp2=l<r?l:r;
    tmp=tmp1<tmp2?tmp1:tmp2;
    if(tmp<2)return 0;
    while(ans==0||tmp>1){ans=isPrime(tmp);tmp--;}
return ans;
}

int main()
{
    std::ios_base::sync_with_stdio (false);
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
    #endif
    int t,ans,flag;
    cin>>t;
    while(t--)
    {
        cin>>r>>c;
        grid.resize(r);
        REP(i,r) cin>>grid[i];
        int mp[r][c];
        REP(i,r)REP(j,c)mp[i][j]=isMonsterPresent(i,j);
        int sg[r][c][r][c];
        REP(w,r){
            REP(x1,r-w){
                REP(h,c){
                    REP(y1,c-h){
                        vector<int>seen;
                        FOR(x2,x1,x1+w+1){
                            FOR(y2,y1,y1+h+1){
                                if(mp[x2][y2]){
                                    ans=0;
                                    if(x2-1>=x1&&y2-1>=y1)ans^=sg[x1][y1][x2-1][y2-1];
                                    if(x2-1>=x1&&y1+h>=y2+1)ans^=sg[x1][y2+1][x2-1][y1+h];
                                    if(x1+w>=x2+1&&y2-1>=y1)ans^=sg[x2+1][y1][x1+w][y2-1];
                                    if(x1+w>=x2+1&&y1+h>=y2+1)ans^=sg[x2+1][y2+1][x1+w][y1+h];
                                    seen.push_back(ans);
                                }
                            }
                        }
                        flag=0;
                        while(find(seen.begin(),seen.end(),flag)!=seen.end())flag++;
                        sg[x1][y1][x1+w][y1+h]=flag;
                    }
                }
            }
        }
        ans=sg[0][0][r-1][c-1];
        if(ans)cout<<"Asuna"<<endl;
        else cout<<"Kirito"<<endl;
    }
return 0;
}
