#include <iostream>
#include <string>
#include <sstream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <list>
#include <map>
#include <set>
#include <fstream>
#include <cstring>
#include <iomanip>
#include <math.h>
#include <cmath>

#define PB push_back
#define MP make_pair
#pragma comment(linker, "/STACK:16777216")

typedef long long int64;
typedef unsigned long long uint64;

using namespace std;

/*
inline int read_int()
{
    register char c;
    while ((c=getchar_unlocked()) < 48 || c > 57);
    int p = c-48;
    while ((c=getchar_unlocked()) >= 48 && c <= 57) p=p*10+c-48;
    return p;
}
*/

/*
struct matrix
{
    int64 a[2][2];
};

matrix mul(matrix A,matrix B)
{
    matrix C;
    memset(C.a,0,sizeof(C.a));
    for (int i = 0; i <= 1;i ++)
        for (int j = 0; j <= 1; j++)
            for (int k = 0; k <= 1; k++)
                C.a[i][j] = (C.a[i][j] + A.a[i][k] * B.a[k][j]) % md;
    return C;
}

matrix pow(matrix A, int64 p)
{
    if (p == 1) return A;
    if (p & 1) return mul(A,pow(A,p-1));
    matrix X = pow(A,p >> 1);
    return mul(X,X);
}

*/

int64 pow(int64 x, int64 y, int64 z)
{
    if (y == 0) return 1%z;
    if (y == 1) return x%z;
    if (y & 1) return (x*pow(x,y-1,z))%z;
    int64 temp = pow(x,y>>1,z);
    return (temp*temp)%z;
}
int a[22][22];
int l[22][22],r[22][22],t[22][22],b[22][22];
int m[22][22][22][22];

int monster[22][22];
int rr,cc;

int g(int top, int left, int down, int right)
{
    if (top > down || left > right || top <= 0 || top > rr || left <= 0 || left > cc || down <= 0 || down > rr || right <= 0 || right > cc)
    {
        return 0;
    }

    if (m[top][down][left][right] != -1) return m[top][down][left][right];

    set<int> s;
    int cnt = 0;
    for (int i = top; i <= down; i++)
        for (int j = left; j <= right; j++)
            if (monster[i][j])
            {
                cnt++;
                int q = g(top,left,i-1,j-1)^g(top,j+1,i-1,right)^g(i+1,left,down,j-1)^g(i+1,j+1,down,right);
                s.insert(q);
            }

    if (cnt == 0)
    {
        m[top][down][left][right] = 0;
        return 0;
    }
    set<int>::iterator ii;

    int res = 0;

    for (ii = s.begin(); ii != s.end(); ii++)
        if ((*ii) == res) res++;
        else break;

    m[top][down][left][right] = res;
    return res;
}

int main()
{

    int tt;
    scanf("%d",&tt);

    for (; tt > 0; tt--)
    {
        scanf("%d%d",&rr,&cc);
        memset(a,0,sizeof(a));
        memset(l,0,sizeof(l));
        memset(r,0,sizeof(r));
        memset(t,0,sizeof(t));
        memset(b,0,sizeof(b));

        memset(m,-1,sizeof(m));

        for (int i = 1; i <= rr; i++)
        {
            string s;
            cin>>s;
            for (int j = 0; j < s.length(); j++)
                if (s[j] == '^') a[i][j+1] = 1; else a[i][j+1] = 0;
        }

        for (int i = 1; i <= rr; i++)
            for (int j = 1; j <= cc; j++)
            {
                if (a[i][j] == 1)
                {
                    if (a[i][j] == 1 && a[i-1][j] == 1) t[i][j] = t[i-1][j]+1;
                    if (a[i][j] == 1 && a[i][j-1] == 1)l[i][j] = l[i][j-1]+1;
                }

            }

        for (int i = rr; i >= 1; i--)
            for (int j = cc; j >= 1; j--)
            {
                if (a[i][j] == 1)
                {
                    if (a[i][j] == 1 && a[i+1][j] == 1) b[i][j] = b[i+1][j]+1;
                    if (a[i][j] == 1 && a[i][j+1] == 1) r[i][j] = r[i][j+1]+1;
                }
            }

        memset(monster,0,sizeof(monster));
        for (int i = 1; i <= rr; i++)
            for (int j = 1; j <= cc; j++)
            {
                int pp = min(min(r[i][j],l[i][j]),min(t[i][j],b[i][j]));

                if (pp > 1)
                {
                    monster[i][j] = 1;
                    //cout<<i<<" "<<j<<endl;
                }
            }

        int res = g(1,1,rr,cc);
        if (res != 0) cout<<"Asuna"<<endl;
        else cout<<"Kirito"<<endl;


    }
	return 0;
}
