/** author : ayush sharma **/
#include<iostream>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<algorithm>
#include<string>
#include<sstream>
#include<vector>
#include<queue>
#include<set>
#include<map>
#include<stack>
#define FOR(i,a,b) for(int i=a; i<b; i++)
#define FORr(i,a,b) for(int i=a ; i>=b; i--)
#define pb push_back
#define mp make_pair
#define ub upper_bound
#define lb lower_bound
#define si1(n) scanf("%d",&n)
#define si2(n1, n2) scanf("%d%d",&n1,&n2)
#define si3(n1,n2,n3) scanf("%d%d%d",&n1, &n2, &n3)
#define si4(n1,n2,n3,n4) scanf("%d%d%d%d",&n1, &n2, &n3, &n4)
#define FF first
#define SS second
#define READ(x) freopen(x,"r",stdin)
#define WRITE(x) freopen(x,"w",stdout)
#define show1(a) cout<<a<<"\n"
#define show2(a, b) cout<<a<<"   "<<b<<"\n"
#define show3(a, b, c) cout<<a<<"   "<<b<<"    "<<c<<"\n"
#define show4(a, b, c,d) cout<<a<<"   "<<b<<"    "<<c<<"   "<<d<<"\n"

using namespace std;
typedef long long LL;
typedef pair <int,int> pii;
typedef pair<string,int> psi;
typedef vector<int> vi;



#define sz 21
int P[sz][sz][sz][sz];
int mat[sz][sz];
char grid[sz][sz];

bool isWinning(int pl1, int pl2, int pl3, int pl4){
    return (pl1+pl2+pl3+pl4==1) || (pl1+pl2+pl3+pl4==3);
}

int split(int x1, int y1, int x2, int y2){
    if(x2<x1 || y2<y1) {return 0;}
    if(P[x1][y1][x2][y2]!=-1) { return P[x1][y1][x2][y2]; }
    int &res=P[x1][y1][x2][y2];
    set <int> mex;
    FOR(x,x1,x2+1){
        FOR(y,y1,y2+1){
            if(mat[x][y]==1){                           // x,y is the position of the monster and splits the board in 4 games
                int L1=split(x1,y1,x-1,y-1);
                int L2=split(x+1,y1,x2,y-1);
                int L3=split(x+1,y+1,x2,y2);
                int L4=split(x1,y+1,x-1,y2);
                int x=(L1^L2^L3^L4);
                mex.insert(x);
            }
        }
    }
    if(mex.empty()){ res=0; return res;}
    int id=*mex.begin();
    if((id)!=0){ res=0; return res;}
    mex.erase(mex.begin());
    while(!mex.empty()){
        if(id+1 !=(*mex.begin())) break;
        id=*mex.begin();
        mex.erase(mex.begin());
    }
    res=id+1;
    return res;
}

void init(int x,int y){
    FOR(i,0,x) FOR(j,0,y) mat[i][j]=0;
    FOR(i,0,x+1) FOR(j,0,y+1) FOR(i1,0,x+1) FOR(j1,0,y+1) P[i][j][i1][j1]=-1;
}
int R,C;
int dx[]={1,2,0,0, 0,0,-1,-2};
int dy[]={0,0, 1, 2, -1, -2, 0, 0};
bool valid(int x,int y){
    return x>=0 && x<R && y>=0 && y<C && grid[x][y]=='^';
}

int main(){
    int test; si1(test);
    while(test--){
        si2(R,C);
        init(R,C);
        FOR(i,0,R) cin>>grid[i];
        FOR(i,0,R){
            FOR(j,0,C){
                if(grid[i][j]=='#')continue;
                int localCtr=0;
                FOR(k,0,8){
                    if(valid(i+dx[k],j+dy[k])) localCtr++;
                }
                if(localCtr==8)mat[i][j]=1;
            }
        }
        if(R<5 || C<5) {printf("Kirito\n"); continue;}
        int winner=split(0,0,R-1,C-1);
        if (winner>0) printf("Asuna\n");
        else printf("Kirito\n");
    }
    return 0;
}
/*
1
7 7
^#^#^^^
^#^^^#^
^#^^#^^
^^^##^^
^^#^^^^
^^^^^^^
^^^^^^^

1
4 4
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 1


1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
*/
