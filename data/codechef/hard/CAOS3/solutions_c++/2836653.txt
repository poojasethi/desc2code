#include <iostream>
#include <cstdio>
#include <cstring>
#include <limits.h>
#include <assert.h>
 
using namespace std;
 
#define MAXN 22
 
int grundy[MAXN][MAXN][MAXN][MAXN]; 
char grid[MAXN][MAXN];
int monster[MAXN][MAXN];
int countMon[MAXN][MAXN];
int N,M;
 
void preprocess(){
	scanf("%d%d",&N,&M);
	for(int i =0 ; i < N ; ++i)
		scanf("%s",grid[i]);
	for(int i = 0;i<N+1;++i) for(int j = 0 ; j < M+1;++j) monster[i][j]=countMon[i][j]=0;
	for(int i = 0 ; i < N ; ++i){
		for(int j = 0 ; j < M ; ++j){
			if(grid[i][j]=='#') continue;
			int t=0,d=0,r=0,l=0;
			int st = i-1;
			while(st>=0 && grid[st][j]=='^') ++t,--st;
			st=j-1;
			while(st>=0 && grid[i][st]=='^') ++l,--st;
			st=j+1;
			while(st<M && grid[i][st]=='^') ++r,++st;
			st=i+1;
			while(st<N && grid[st][j]=='^') ++d,++st;
 
			if(min(t,min(d,min(l,r)))>=2) monster[i+1][j+1] = 1;
		}
	}
	/*for(int i = 1 ;i<=N ;++i){
		for(int j =1 ;j<=M ; ++j){
			countMon[i][j] = countMon[i-1][j] + countMon[i][j-1] - countMon[i-1][j-1];
			countMon[i][j] += monster[i-1][j-1];
		}
	}*/
}
 
bool checkBounds(int r1,int c1,int r2,int c2){
	
	if(r1>r2 || c1>c2) return false;
	if(r1<=0 || r1>N || r2<=0 || r2>N) return false;
	if(c1<=0 || c1>M || c2<=0 || c2>M) return false;
	return true;
}
 
int solve(int r1,int c1,int r2,int c2){
	
	if(!checkBounds(r1,c1,r2,c2)) return 0;
	
	if(r1==r2 && c1==c2){
		if(monster[r1][c1]==1) return 1;
		return 0;
	}
	//cout << r1 << " " << c1 << " " << r2 << " " << c2 << endl;
	int &res = grundy[r1][c1][r2][c2];
	
	if(res!=-1) return res;
	int set[100];
	// find Monsters in this place
	bool found = false;
	for(int i = 0 ;i < 100 ; ++i) set[i] = 0;
	for(int i = r1; i <= r2; ++i)
		for(int j = c1;j<=c2;++j){
			if(monster[i][j]){
				set[solve(r1,c1,i-1,j-1)^
				    solve(r1,j+1,i-1,c2)^
					solve(i+1,c1,r2,j-1)^
					solve(i+1,j+1,r2,c2)]=1;
			}
		}
	int go=0;
	while(set[go]==1)go++;
	res=go;
	
	return res;
}

int main(){
	int t;
	scanf("%d",&t);
	while(t--){
		preprocess();
		for(int i=0;i<N+1;++i) for(int j=0;j<M+1;++j)
		for(int k=0;k<N+1;++k) for(int l=0;l<M+1;++l) grundy[i][j][k][l]=-1;
		if(solve(1,1,N,M)>0) puts("Asuna");
		else puts("Kirito");
 
	}
}
 
