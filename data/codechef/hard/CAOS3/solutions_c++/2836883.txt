#include <functional>
#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <iterator>
#include <set>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <functional>
#include <numeric>
#include <utility>
#include <list>
#include <cassert>
#include <sstream>

using namespace std;

#define SWAP(a,b) do{auto k=a; a=b; b=k;}while(0)
#define inf 987654321
#define infl 10000000000000000000ll
#define REP(k,a,b) for(auto k=(a); k < (b); ++k)
#define PER(k,a,b) for(auto k=(b-1); k >= (a); k--)
#define SUM(v) accumulate(v.begin(), v.end(), 0)
#define PROD(v) accumulate(v.begin(), v.end(), 1, multiplies<long long>())
#define MAX(v) max_element(v.begin(), v.end())
#define MIN(v) min_element(v.begin(), v.end())
typedef long long LL;
typedef vector<long long> VI;

LL POS(LL x) { if(x>0)  return x ; else return 0; }

struct ele {
	long double z,y,x;
	ele() {}
	ele(long double z, long double y, long double x) : z(z), y(y), x(x) {}
	ele operator + (const ele &p) const { return ele(z+p.z, y+p.y, x+p.x); }
	ele operator - (const ele &p)  const { return ele(z-p.z, y-p.y, x-p.x); }
	ele operator * (long double con)     const { return ele(z*con, y*con, x*con  ); }
	ele operator / (long double con)     const { return ele(z/con, y/con, x/con  ); }
	bool operator<(const ele &rhs) const { return make_pair(z,make_pair(y,x)) < make_pair(rhs.z,make_pair(rhs.y,rhs.x)); }
	bool operator==(const ele &rhs) const { return make_pair(z,make_pair(y,x)) == make_pair(rhs.z,make_pair(rhs.y,rhs.x)); }
};

inline void inp(int &n) {
	n = 0;
	int ch = getchar_unlocked();
	int sign = 1;
	while(ch < '0' || ch > '9') {
		if (ch == '-') sign = -1; 
		ch = getchar_unlocked();
	}
	while(ch >= '0' && ch <= '9')
		n = (n<<3) + (n<<1) + ch - '0', ch = getchar_unlocked();
	n = n*sign;
}

inline double getDouble() {
	double res = 0.0;
	char c;
	while(1) {
		c = getchar_unlocked();
		if(c == ' ' || c == '\n') continue;
		else break;
	}
	res = c - '0';
	while(1) {
		c = getchar_unlocked();
		if(c >= '0' && c <= '9') res = 10 * res + c - '0';
		else break;
	}
	if(c == '.') {
		double decimal = 0.0, divi = 1.0;
		while(1) {
			c = getchar_unlocked();
			if(c >= '0' && c <= '9') decimal += (c - '0') / (divi *= 10.0);
			else break;
		}
		res += decimal;
	}
	return res;
}

inline void putDouble(double N) {
	char buff[24],sz=0;
	int integer = N;
	int decimal = (N - integer) * 10000000;
	int tmp = decimal;

	while(decimal) {
		buff[sz++] = '0' + decimal % 10;
		decimal /= 10;
	}
	for(int decimal2 = 1000000; decimal2 > tmp; decimal2 /= 10) {
		buff[sz++] = '0';
	}
	buff[sz++] = '.';
	if(integer == 0) buff[sz++] = '0';
	while(integer) {
		buff[sz++] = '0' + integer % 10;
		integer /= 10;
	}
	while(--sz>=0)putchar_unlocked(buff[sz]);
	putchar_unlocked(10);
}

inline void outp(int a) {
	char c;
	char snum[20];
	int i=0;
	do {
		snum[i++]=a%10+48;
		a=a/10;
	} while(a!=0);
	i=i-1;
	while(i>=0)
		putchar_unlocked(snum[i--]);
	putchar_unlocked('\n');
}

static inline void dump(int a[], int n) {
	int i = 0;
	fprintf(stderr, "line-dump: ");
	while (i < n) fprintf(stderr, "%d ", a[i++]);
	fprintf(stderr, "\n");
}


#define MAXN 22
 
int grundy[MAXN][MAXN][MAXN][MAXN]; 
char grid[MAXN][MAXN];
int monster[MAXN][MAXN];
int countMon[MAXN][MAXN];
int N,M;
 
void preprocess(){
	//scanf("%d%d",&N,&M);
	inp(N);
	inp(M);
	for(int i =0 ; i < N ; ++i)
		scanf("%s",grid[i]);
	for(int i = 0;i<N+1;++i) for(int j = 0 ; j < M+1;++j) monster[i][j]=countMon[i][j]=0;
	for(int i = 0 ; i < N ; ++i){
		for(int j = 0 ; j < M ; ++j){
			if(grid[i][j]=='#') continue;
			int t=0,d=0,r=0,l=0;
			int st = i-1;
			while(st>=0 && grid[st][j]=='^') ++t,--st;
			st=j-1;
			while(st>=0 && grid[i][st]=='^') ++l,--st;
			st=j+1;
			while(st<M && grid[i][st]=='^') ++r,++st;
			st=i+1;
			while(st<N && grid[st][j]=='^') ++d,++st;
 
			if(min(t,min(d,min(l,r)))>=2) monster[i+1][j+1] = 1;
		}
	}
}
 
bool checkBounds(int r1,int c1,int r2,int c2){
	
	if(r1>r2 || c1>c2) return false;
	if(r1<=0 || r1>N || r2<=0 || r2>N) return false;
	if(c1<=0 || c1>M || c2<=0 || c2>M) return false;
	return true;
}
 
int solve(int r1,int c1,int r2,int c2){
	
	if(!checkBounds(r1,c1,r2,c2)) return 0;
	
	if(r1==r2 && c1==c2){
		if(monster[r1][c1]==1) return 1;
		return 0;
	}
	//cout << r1 << " " << c1 << " " << r2 << " " << c2 << endl;
	int &res = grundy[r1][c1][r2][c2];
	
	if(res!=-1) return res;
	int set[100];
	// find Monsters in this place
	bool found = false;
	for(int i = 0 ;i < 100 ; ++i) set[i] = 0;
	for(int i = r1; i <= r2; ++i)
		for(int j = c1;j<=c2;++j){
			if(monster[i][j]){
				set[solve(r1,c1,i-1,j-1)^
				    solve(r1,j+1,i-1,c2)^
					solve(i+1,c1,r2,j-1)^
					solve(i+1,j+1,r2,c2)]=1;
			}
		}
	int go=0;
	while(set[go]==1)go++;
	res=go;
	
	return res;
}

int main(){
	int t;
	inp(t);
	while(t--){
		preprocess();
		for(int i=0;i<N+1;++i) for(int j=0;j<M+1;++j)
		for(int k=0;k<N+1;++k) for(int l=0;l<M+1;++l) grundy[i][j][k][l]=-1;
		if(solve(1,1,N,M)>0) puts("Asuna");
		else puts("Kirito");
 
	}
}
 
