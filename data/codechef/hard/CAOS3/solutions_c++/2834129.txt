#include<iostream>
#include<sstream>
#include<cstdio>
#include<stdlib.h>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<stack>
#include<queue>
#include<vector>
#include<utility>
#include<set>
#include<map>
 
using namespace std;
 
typedef long long LL;
typedef unsigned long long ull;
typedef pair<int,int> pa;
typedef vector<int> ve;
 
#define REP(i,a,b) for(int i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
#define pb push_back
#define inf 1000000000
#define mp make_pair
#define tolerance 1e-9
#define mod 1000000007
#define maxN 21
#define NIL -1

const int dx[4] = {0, 1, 0, -1};
const int dy[4] = {1, 0, -1, 0};

int stamp;
int N,M;
char board[maxN][maxN]; // an optimization for fast input of character arrays might be required
int leftCount[maxN][maxN], rightCount[maxN][maxN], upCount[maxN][maxN], downCount[maxN][maxN];
bool isMonster[maxN][maxN];
int memo[maxN][maxN][maxN][maxN];
int mark[maxN][maxN][maxN][maxN];

inline int ni()
{
    register int r=0,c;
    for(c=getchar_unlocked();c<=32;c=getchar_unlocked());
    if(c=='-')
        return -ni();
    for(;c>32;r=(r<<1)+(r<<3)+c-'0',c=getchar_unlocked());
    return r;
}

int calc(int topRow,int bottomRow,int leftColumn,int rightColumn)
{
    if( topRow<0 || topRow>N-1 || bottomRow<0 || bottomRow>N-1 || leftColumn<0 || leftColumn>M-1 || rightColumn<0 || rightColumn>M-1 || bottomRow<topRow || rightColumn<leftColumn)
        return 0;

    int &ts = mark[topRow][bottomRow][leftColumn][rightColumn];
    int &sg = memo[topRow][bottomRow][leftColumn][rightColumn];

    if( ts != stamp ) {
        ts = stamp;
    }   else {
        return sg;
    }

    vector<int> occur;
    for(int x=topRow;x<=bottomRow;x++)
        for(int y=leftColumn;y<=rightColumn;y++)
        {
            if( isMonster[x][y] )
            {
                int s = calc(topRow,x-1,leftColumn,y-1) ^ calc(x+1,bottomRow,leftColumn,y-1) ^ calc(topRow,x-1,y+1,rightColumn) ^ calc(x+1,bottomRow,y+1,rightColumn);
                occur.pb(s);   
            }
        }

    sort(occur.begin(),occur.end());
    occur.erase(unique(occur.begin(),occur.end()),occur.end());
    sg = occur.size();
    for(int i=0;i<occur.size();i++)
    {
        if( occur[i]!=i ) {
            return sg = i;
        }
    }

    return sg;

}

int main()
{
    // freopen("input.txt","r",stdin);

    for(int i=0;i<N;i++)    for(int j=0;j<N;j++)    for(int k=0;k<N;k++)    for(int l=0;l<N;l++)    mark[i][j][k][l] = NIL;

    stamp = 0;
    int T;
    T = ni();
    while(T--)
    {
        stamp++;
        N = ni(), M = ni();
        for(int i=0;i<N;i++)
            scanf("%s",board[i]);

        // upDateMonsters();

        for(int i=0;i<N;i++)
        {
            for(int j=0;j<M;j++)
            {
                bool &valid = isMonster[i][j];
                valid = true;
                for(int k=0;k<4;k++) {
                    for(int len = 0;len<=2;len++) {
                        int x = i+dx[k]*len, y = j+dy[k]*len;
                        if( x<0 || y<0 || x>=N || y>=M || board[x][y] != '^' ) {
                            valid = false;
                            break;
                        }
                    }
                }
            }
        }

        int ans = calc(0,N-1,0,M-1);
        if( ans == 0 )
            printf("Kirito\n");
        else
            printf("Asuna\n");

    }

    return 0;
}       