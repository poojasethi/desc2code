#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <cassert>
using namespace std;
const int dx[4] = {0, 1, 0, -1};
const int dy[4] = {1, 0, -1, 0};
const int N = 20;
int memo[N][N][N][N],n,m,lstt[N][N][N][N], nowt;
bool can[N][N];
inline int getSG(int xl, int xr, int yl, int yr){
	if (xl > xr || yl > yr)return 0;
	int &ts = lstt[xl][xr][yl][yr];
	int &sg = memo[xl][xr][yl][yr]; // to see the memo first
	if (ts != nowt)ts = nowt; else return sg;
	vector<int> g;
	for (int x = xl; x <= xr; ++ x) {
		for (int y = yl; y <= yr; ++ y) {
			if (can[x][y]) {
				int s = getSG(xl, x - 1, yl, y - 1)
					^ getSG(x + 1, xr, yl, y - 1)
					^ getSG(xl, x - 1, y + 1, yr)
					^ getSG(x + 1, xr, y + 1, yr);
				g.push_back(s);
			}
		}
	}
	sort(g.begin(), g.end());g.erase(unique(g.begin(), g.end()), g.end());//*** from end
	sg = g.size();//if all occur
	for (int i = 0; i < g.size(); ++ i)if (g[i] != i)return sg = i;return sg;
}
inline void solve(){
	++ nowt;
	scanf("%d%d", &n, &m);
	char map[N][N + 1];
	for (int i = 0; i < n; ++ i)scanf("%s", map[i]);
	for (int i = 0; i < n; ++ i) {
		for (int j = 0; j < m; ++ j) {
			bool &ok = can[i][j];
			ok = true;
			for (int k = 0; k < 4; ++ k) {
				for (int len = 0; len <= 2; ++ len) {
					int x = i + dx[k] * len, y = j + dy[k] * len;
					if (x < 0 || y < 0 || x >= n || y >= m || map[x][y] != '^') {ok = false;break;}
				}
			}
		}
	}
	if (getSG(0, n - 1, 0, m - 1))puts("Asuna");else puts("Kirito");
}
int main(){
	nowt = 0;
	memset(lstt, -1, sizeof(lstt));
	int T;for (scanf("%d", &T);T --;)solve();
	return 0;
}
