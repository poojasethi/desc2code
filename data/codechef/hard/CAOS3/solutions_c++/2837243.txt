// CodeChef - CAOS3
// Game Theory
// Grundy Numbers, Impartial Games.

#include <stdio.h>
#include <string.h>
#include <iostream>

using namespace std;

int n, m, board[25][25];
int dp[25][25][25][25];
char input[25][25];

// Check if the cell C is empty.
int C(int i, int j)
{
  return input[i][j] == '^';
}

// Find the monster positions.
void findMonsters()
{
  for(int i = 2; i < n - 2; i++)
   for(int j = 2; j < m - 2; j++)
    if(C(i, j) && C(i - 1, j) && C(i - 2, j) && C(i + 1, j) && C(i + 2, j) && C(i, j - 2) && C(i, j - 1) && C(i, j + 1) && C(i, j + 2))
     board[i - 2][j - 2] = 1;

  n -= 4;
  m -= 4;
}

int solve(int x1, int y1, int x2, int y2)
{
  int result, number;
  char visited[256] = {0};

  if(dp[x1][y1][x2][y2] != -1) 
   return dp[x1][y1][x2][y2];

  for(int x = x1; x < x2; x++)
   for(int y = y1; y < y2; y++)
    if(board[x][y])
    {
      number = solve(x1, y1, x, y);
      number ^= solve(x1, y + 1, x, y2);
      number ^= solve(x + 1, y1, x2, y);
      number ^= solve(x + 1, y + 1, x2, y2);
      visited[number] = 1;
    }

  for(result = 0; visited[result]; ++result);
  return dp[x1][y1][x2][y2] = result;
}

int main()
{
  int t, ans;

  scanf("%d", &t);
  while(t--)
  {
    scanf("%d %d", &n, &m);
    for(int i = 0; i < n; i++)
     scanf("%s", input[i]);

    // Clear
    memset(board, 0, sizeof board);
    memset(dp, -1, sizeof dp);

    findMonsters();
    if(n <= 0 || m <= 0) { puts("Kirito"); continue; }
    ans = solve(0, 0, n, m);
    puts(ans ? "Asuna" : "Kirito");
  }

  return 0;
}