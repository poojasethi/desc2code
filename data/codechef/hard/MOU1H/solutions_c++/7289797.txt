#include <bits/stdc++.h>
using namespace std;
int s[100006];


struct SuffixArray {
  const int L;
  vector<vector<int> > P;
  vector<pair<pair<int,int>,int> > M;

  SuffixArray(int n) : L(n), P(1, vector<int>(L, 0)), M(L) {
    for (int i = 0; i < L; i++) P[0][i] = s[i];
    for (int skip = 1, level = 1; skip < L; skip *= 2, level++) {
      P.push_back(vector<int>(L, 0));
      for (int i = 0; i < L; i++)
	M[i] = make_pair(make_pair(P[level-1][i], i + skip < L ? P[level-1][i + skip] : -1000), i);
     sort(M.begin(), M.end());
      for (int i = 0; i < L; i++){ 
	P[level][M[i].second] = (i > 0 && M[i].first == M[i-1].first) ? P[level][M[i-1].second] : i;
}
    }
  }

  vector<int> GetSuffixArray() { return P.back(); }
  	vector<pair<pair<int, int>, int> >  GetSortedArray(){ return M; }
  // returns the length of the longest common prefix of s[i...L-1] and s[j...L-1]
  int LongestCommonPrefix(int i, int j) {
    int len = 0;
    if (i == j) return L - i;
    for (int k = P.size() - 1; k >= 0 && i < L && j < L; k--) {
      if (P[k][i] == P[k][j]) {
	i += 1 << k;
	j += 1 << k;
	len += 1 << k;
      }
    }
    return len;
  }
};

int main() {
	 long long t,n,a,i,b;
	 long long sum =0;
	scanf("%lld",&t);
	
	while(t--)
	{
		memset (s,0,sizeof(s));
		 sum = 0 ;
		cin>>n;
		cin>>a;
		
		sum = n*(n-1)/2;
		sum%=1000000009;
		for(i=0;i<n-1;i++)
		{ cin>>b; s[i] =105+ b-a; a =b;}
		if(n==1)
		{
			printf("0\n");
			continue;
		}
		else if(n==2)
		{
			printf("1\n");
			continue;
		}
		SuffixArray si(n-1);
	    vector < pair < pair <int, int>, int> > v = si.GetSortedArray();
	//	for(i=0;i<n-1;i++) cout << v[i] << " ";
		for(i=0;i<n-2;i++){
		  sum-= si.LongestCommonPrefix(v[i].second,v[i+1].second);sum = (sum + 1000000009)%1000000009; }
		cout << (sum + 1000000009)%1000000009<<"\n";
	}
	return 0; // 2 -1 1 -1 2 -3 1 -1
}