/*
Suffix array O(n lg^2 n)
LCP table O(n)
*/

#include <bits/stdc++.h>


using namespace std;



const int MAXN = 100010;
const int MOD = 1e9 + 9;

long long S[MAXN];
int N, gap;
long long sa[MAXN], pos[MAXN], tmp[MAXN], lcp[MAXN];

	bool sufCmp(int i, int j)
	{
		if (pos[i] != pos[j])
			return pos[i] < pos[j];
		i += gap;
		j += gap;
		return (i < N && j < N) ? pos[i] < pos[j] : i > j;
	}

	void buildSA()
	{
		
		for (int i = 0; i < N; ++i) sa[i] = i, pos[i] = S[i];
		for (gap = 1;; gap *= 2)
		{
			sort(sa, sa + N, sufCmp);

			for (int i = 0; i < N-1; ++i)
				tmp[i + 1] = tmp[i] + sufCmp(sa[i], sa[i + 1]);

			for (int i = 0; i <N; ++i)
				pos[sa[i]] = tmp[i];

			if (tmp[N - 1] == N - 1) break;
		}
	}

	void buildLCP()
	{
		for (int i = 0, k = 0; i < N; ++i) if (pos[i] != N - 1)
		{
			for (int j = sa[pos[i] + 1]; S[i + k] == S[j + k];)
			++k;
			lcp[pos[i]] = k;
			if (k)--k;
		}
	}



int main() {

	int test; 
	scanf("%d",&test);

	while(test--) {


		//for(int i=0;i<MAXN;++i)	
		//	sa[i]=pos[i]=tmp[i]=lcp[i]=S[i]=0;


		int nn;
		scanf("%d",&nn);


		int f;

		scanf("%d",&f);
		for(int i=0;i<nn-1;++i) {
			int mmm;
			scanf("%d",&mmm);
			S[i]=mmm-f+101;
			f=mmm;
		}

		N = nn-1;

		if(nn==1) {
			printf("0\n");
			continue;
		}
		else if(nn==2) {

			printf("1\n");
			continue;
		}
		
		
		buildSA();	
		buildLCP();

		long long ans=0;

		ans = (long long)N*(long long)(N+1);
		ans /= 2;


		for(int i=0;i<N;++i) {
			ans -= lcp[i];				
		}

		if(ans>=MOD)
			ans%=MOD;

		while(ans<0)
			ans += MOD;

		printf("%lld\n",ans);

		
	}

return 0;
}