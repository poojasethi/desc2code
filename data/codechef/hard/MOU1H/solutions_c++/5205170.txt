#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
#include <ctime>
#include <cassert>
using namespace std;
typedef long long LL;
#define FOR(k,a,b) for(int k(a); k < (b); ++k)
#define FORD(k,a,b) for(int k(b-1); k >= (a); --k)
#define REP(k,a) for(int k=0; k < (a); ++k)
#define ABS(a) ((a)>0?(a):-(a))

struct SA
{
	int N;
	vector<vector<LL> >  w;
	SA();
	SA(const vector<LL>& in)
	{
		w.clear();
		N=in.size();
		int k=1,t=N;
		while(t)
		{
			++k;
			t/=2;
		}
		w.resize(k,vector<LL> (N));
		vector<pair<LL,LL> > z(N);
		REP(i,N)
		{
			z[i]=make_pair(in[i],i);
		}
		sort(z.begin(),z.end());
		LL val=z[0].first, val2=0;
		REP(i,N)
		{
			if(z[i].first!=val)
			{
				++val2;
				val=z[i].first;
			}
			w[0][z[i].second]=val2;
		}
		FOR(i,1,k)
		{
			REP(j,N)
			{
				int t2= j+(1<<(i-1));
				LL v2 = 0;
				if(t2>=N)
					v2=w[i-1][j]*(N+1)-1;
				else
					v2=w[i-1][j]*(N+1)+w[i-1][t2];
				z[j]=make_pair(v2,j);
			}
			sort(z.begin(),z.end());
			LL val=z[0].first, val2=0;
			REP(j,N)
			{
				if(z[j].first!=val)
				{
					++val2;
					val=z[j].first;
				}
				w[i][z[j].second]=val2;
			}
		}
	}
	int calcLCP(int i, int j)
	{
		int res=0;
		if(i==j) return N-i;
		for(int k=w.size()-2;k>-1;--k)
		{
			if(w[k][i]==w[k][j])
			{
				res+=(1<<k);
				i+=(1<<k);
				j+=(1<<k);
			}
			if(i>=N || j>=N)
				break;
		}
		return res;
	}
	LL calcSubStr()
	{
		vector<pair<LL,LL> > o(N);
		REP(i,N)
		{
			o[i].first=w[w.size()-1][i];
			o[i].second=i;
		}
		sort(o.begin(),o.end());
		LL res=N-o[0].second;
		FOR(i,1,N)
		{
			int prev=o[i-1].second;
			int act=o[i].second;
			int cl = calcLCP(prev,act);
			res+=N-act-cl;
		}
		return res;
	}
};

int main( int argc, char* argv[] ) {
#ifdef HOME
	freopen("in.txt","r",stdin);
	freopen("out.txt","wb",stdout);
#endif	
	int T,N,t1,t2;
	scanf("%d",&T);
	SA* sa;
	while(T--)
	{
		int N;
		vector<LL> w;
		scanf("%d",&N);
		w.reserve(N-1);
		scanf("%d",&t1);
		if(N==1)
		{
			printf("0\n");
			continue;
		}
		while(--N)
		{
			t2=t1;
			scanf("%d",&t1);
			w.push_back(t1-t2+100);
		}
		sa=new SA(w);
		LL res = sa->calcSubStr();
		LL MOD=1e9+9;
		res%=MOD;
		printf("%lld\n",res);
	}
	return 0;
}
// END CUT HERE
