 #include<bits/stdc++.h>
 using namespace std;
 #define N 100005
 #define MOD 1000000009
int st[N]; //input
int rannk[N], pos[N]; //output
int cnt[N], nx[N]; //internal
bool bh[N], b2h[N];
 
bool smaller_first_char(int a, int b){
  return st[a] < st[b];
}
 
void suffixSort(int n){
    for (int i=0; i<n; ++i){
    pos[i] = i;
  }
  sort(pos, pos + n, smaller_first_char);
  
 
  for (int i=0; i<n; ++i){
    bh[i] = i == 0 || st[pos[i]] != st[pos[i-1]];
    b2h[i] = false;
  }
 
  for (int h = 1; h < n; h <<= 1){
  
    int buckets = 0;
    for (int i=0, j; i < n; i = j){
      j = i + 1;
      while (j < n && !bh[j]) j++;
      nx[i] = j;
      buckets++;
    }
    if (buckets == n) break; 
 
    for (int i = 0; i < n; i = nx[i]){
      cnt[i] = 0;
      for (int j = i; j < nx[i]; ++j){
        rannk[pos[j]] = i;
      }
    }
 
    cnt[rannk[n - h]]++;
    b2h[rannk[n - h]] = true;
    for (int i = 0; i < n; i = nx[i]){
      for (int j = i; j < nx[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0){
          int head = rannk[s];
          rannk[s] = head + cnt[head]++;
          b2h[rannk[s]] = true;
        }
      }
      for (int j = i; j < nx[i]; ++j){
        int s = pos[j] - h;
        if (s >= 0 && b2h[rannk[s]]){
          for (int k = rannk[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
        }
      }
    }
    for (int i=0; i<n; ++i){
      pos[rannk[i]] = i;
      bh[i] |= b2h[i];
    }
  }
  for (int i=0; i<n; ++i){
    rannk[pos[i]] = i;
  }
}
// End of suffix array algorithm
 
 
// Begin of the O(n) longest common prefix algorithm
// Refer to "Linear-Time Longest-Common-Prefix Computation in Suffix
// Arrays and Its Applications" by Toru Kasai, Gunho Lee, Hiroki
// Arimura, Setsuo Arikawa, and Kunsoo Park.
int height[N];
// height[i] = length of the longest common prefix of suffix pos[i] and suffix pos[i-1]
// height[0] = 0
void getHeight(int n){
  for (int i=0; i<n; ++i) rannk[pos[i]] = i;
  height[0] = 0;
  for (int i=0, h=0; i<n; ++i){
    if (rannk[i] > 0){
      int j = pos[rannk[i]-1];
      while (i + h < n && j + h < n && st[i+h] == st[j+h]) h++;
      height[rannk[i]] = h;
      if (h > 0) h--;
    }
  }
}
// End of longest common prefixes algorithm
 
int main(){
    int t;
    scanf("%d",&t);
    while(t--){
        int n;
        scanf("%d",&n);
        int arr[n];
        for(int i=0;i<n;i++){
            scanf("%d",&arr[i]);
        }
        for(int i=0;i<(n-1);i++){
            st[i]=(arr[i+1]+100)-arr[i];
        }
        suffixSort(n-1);
        getHeight(n-1);
        long long ans=0,su=0;;
        for(int i=0;i<(n-1);i++){
            ans = (((height[i])%MOD)+ans%MOD)%MOD;
            su=(((i+1)%MOD)+su%MOD)%MOD;
        }
        
        printf("%lld\n",(su-ans+MOD)%MOD);
    }
return 0;    
} 