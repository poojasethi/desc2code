#include <cstdio>
#include <cstring>
#include <algorithm>
#include <climits>

#define S scanf
#define P printf

using namespace std;

int n, d, bucket[100000], bucket_temp[100000], cond, str_len, arr[100000];

class Suffix
{
public:
    int index;
    bool operator< (const Suffix& suffix) const
    {
        if(d==0)
            return (arr[index] < arr[suffix.index]);
        else if(bucket[index] == bucket[suffix.index])
        {
			if((index + d) < n && (suffix.index + d) < n)
				return (bucket[index + d] < bucket[suffix.index + d]);
			else
				return ((index + d) < n);
        }
        else
            return (bucket[index] < bucket[suffix.index]);
    }
    bool operator== (const Suffix& suffix) const
    {
        return (!(suffix < *this) && !(*this < suffix));
    }
} pos[100000];

int update(int temp)
{
    int start=0, id=0, c=0;
    for(int i=0; i<temp; i++)
    {
        if(i!=0 && !(pos[i] == pos[i-1]))
        {
            id++;
            start = i;
        }
        if(start != i)
        {
            c = 1;
        }
        bucket_temp[pos[i].index] = id;
    }
    memcpy(bucket, bucket_temp, 4*n);
    return c;
}

void sort_suffix(int temp)
{
    for(int i=0; i<temp; i++)
    {
        pos[i].index = i;
    }

    sort(pos, pos+temp);
    cond = update(temp);

    for(d=1; cond; d*=2)
    {
        sort(pos, pos+temp);
        cond = update(temp);
    }
}
int lcp(int * arr1, int * arr2)
{
    long long i = 0;
    while(arr1[i] == arr2[i] && (arr1 + i) < (arr + n) && (arr2 + i) < (arr + n))
    {
		i++;
	}
    return i;
}
int main()
{
    int t;
    long long ans;
    S("%d",&t);
    while(t--)
    {
        S("%d", &n);
		for(int i=0;i<n;i++)
		{
			S("%d",&arr[i]);
			if(i>0)
				arr[i-1] -= arr[i];
		}
		n--;
        d=0;
        sort_suffix(n);
        ans=0;
        for(int i=0; i<n; i++)
        {
            ans += n - pos[i].index;
            if(i>0)
            {
				ans -= lcp(arr + pos[i-1].index, arr + pos[i].index);
			}
            ans %= 1000000009;
        }
        P("%lld\n",ans);
    }
	return 0;
}
