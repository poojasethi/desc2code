
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <string.h>
#include <stdlib.h>
#include <iterator>
#include <sstream>
#include <numeric>
#include <fstream>
#include <numeric>
#include <vector>
#include <cctype>
#include <math.h>
#include <deque>
#include <queue>
#include <stack>
#include <iomanip>
#include <set>
#include <map>
//#include <windows.h>
using namespace std;

#define FRE(i,a,b)  for(i = a; i <= b; i++)
#define FRL(i,a,b)  for(i = a; i < b; i++)
#define mem(t, v)   memset ((t) , v, sizeof(t))
#define sqr(x)      (x)*(x)
#define all(x)      x.begin(),x.end()
#define un(x)       x.erase(unique(all(x)), x.end())
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c) scanf("%d %d %d", &a, &b, &c)
#define D(x)        cout<<#x " = "<<(x)<<endl
#define pf          printf
#define VI          vector <int>
#define pii         pair <int, int>
#define pll         pair <LL, LL>
#define pb          push_back
#define mp          make_pair
#define pi          acos(-1.00)
#define DBG         pf("Hi\n")
#define sz          size()
#define ins         insert
#define fi          first
#define se          second
#define xx          first
#define yy          second
#define inf         (1<<29)
#define MOD         1000000009
#define eps         1e-9
#define MAXN        100000
#define MAXLG       15

typedef long long int LL;
typedef double db;

//int dx[] = {+0,+1,+0,-1};
//int dy[] = {+1,+0,-1,+0};
//int dx[] = {-1,-1,-1,+0,+0,+1,+1,+1};
//int dy[] = {-1,+0,+1,-1,+1,-1,+0,+1};
//bool check(int n, int pos) {return (bool) (n & (1<<pos));}
//int on(int n, int pos) {return n | (1<<pos); }
//int off(int n, int pos) {return n & ~(1<<pos); }

int n, str[MAXN+10];

// Suffix_Array O( n * lgn * lgn)
// 0 based indexing

int Plc[MAXLG+5][MAXN+10], stp;
int S[MAXN+10]; //Sorted Suffixes
pair< pii , int> L[MAXN+10];

void Generate_SA()
{
    int i, j, k, len = n, cur;
    for(i = 0; i < len; i++)    Plc[0][i] = str[i];

    for(cur = stp = 1; (cur>>1) < len; cur *= 2, stp++)
    {
        for(i = 0; i < len; i++)
        {
            L[i].fi.fi = Plc[stp-1][i];
            L[i].fi.se = i+cur < len? Plc[stp-1][i+cur]:-inf;
            L[i].se = i;
        }
        sort(L, L+len);
        for(i = 0; i < len; i++)
        {
            if( !i || L[i-1].fi.fi != L[i].fi.fi || L[i-1].fi.se != L[i].fi.se ) Plc[stp][L[i].se] = i;
            else Plc[stp][L[i].se] = Plc[stp][L[i-1].se];
        }
    }
    for(i = 0; i < len; i++)
        S[Plc[stp-1][i]] = i;
    stp--;
}

int lcp(int u, int v, int N) // Here N = length of the string **Call Generate_SA(string)**
{
    int ret = 0, k;
    if(u == v) return N-u;
    for(k = stp; k >= 0 && u < N && v < N; k--)
        if(Plc[k][u] == Plc[k][v])
            ret += 1<<k, u += 1<<k, v += 1<<k;
    return ret;
}



int main()
{
    //freopen("c:\\Users\\User\\Desktop\\in.txt", "r", stdin);
    //freopen("c:\\Users\\User\\Desktop\\out.txt", "w", stdout);
    //ios_base::sync_with_stdio(0); cin.tie(0);

    int i, j, k, t, cs, m, mn, mx, idx;
    LL res;

    sf(t);
    while(t--)
    {
        res = 0;

        sf(n);
        FRE(i,1,n)
        {
            sf(str[i]);
            if(i == 1) continue;
            str[i-2] = str[i]-str[i-1];
        }
        n--;
        Generate_SA();

        FRL(i,0,n)
        {
            idx = S[i];
            res += n-idx;
            if(!i) continue;
            res -= lcp(S[i], S[i-1], n);
        }

        pf("%lld\n", res%MOD);
    }

    return 0;
}

