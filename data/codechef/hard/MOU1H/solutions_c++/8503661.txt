#include <cstdio>
#include <algorithm>
#include <cstring>
#include <iostream>

#define si(a) scanf("%d",&a)

using namespace std;

#define REP(i, n) for (int i = 0; i < (int)(n); ++i)

namespace SuffixArray
{
	const int MAXN = 100005;
	char S[MAXN];
	int N, gap;
	int sa[MAXN], pos[MAXN], tmp[MAXN], lcp[MAXN];

	bool sufCmp(int i, int j)
	{
		if (pos[i] != pos[j])
			return pos[i] < pos[j];
		i += gap;
		j += gap;
		return (i < N && j < N) ? pos[i] < pos[j] : i > j;
	}

	void buildSA()
	{
		REP(i, N) sa[i] = i, pos[i] = S[i];
		for (gap = 1;; gap *= 2)
		{
			sort(sa, sa + N, sufCmp);
			REP(i, N - 1) tmp[i + 1] = tmp[i] + sufCmp(sa[i], sa[i + 1]);
			REP(i, N) pos[sa[i]] = tmp[i];
			if (tmp[N - 1] == N - 1) break;
		}
	}

	void buildLCP()
	{
		for (int i = 0, k = 0; i < N; ++i) if (pos[i] != N - 1)
		{
			for (int j = sa[pos[i] + 1]; S[i + k] == S[j + k];)
			++k;
			lcp[pos[i]] = k;
			if (k)--k;
		}
	}
}

using namespace SuffixArray;

int  ara[MAXN];

long long total_unique_substring()
{
    long long ans=(N-sa[0]);
    int i;
    for(i=1;i<N;i++)
        ans+=(N-sa[i]-lcp[i-1]);
    return ans;
}

int main()
{
    int t,ca;
    si(t);
    for(ca=1;ca<=t;ca++){
        si(N);
        int i;
        for(i=0;i<N;i++)
            si(ara[i]);
        if(N==1){
            printf("0\n");
            continue ;
        }
        for(i=0;i<N-1;i++)
            S[i]=ara[i]-ara[i+1]+105;
        N--;
        buildSA();
        buildLCP();
        printf("%lld\n",total_unique_substring()%1000000009ll);
    }
    return 0;
}
