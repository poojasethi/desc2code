#include<bits/stdc++.h>
#define mod 1000000009
#define ll long long
using namespace std;
ll p[60][100005];
ll n;
 struct data{
 	ll px;
 	ll lp[2];
 }l[600000];
 
ll cnt;
ll stp;
ll suffix_array[100005];
ll lcp[100005];
/*bool cmp(const struct data &a, const struct data &b) {
	if(a.lp[0] == b.lp[0]){
		return a.lp[1] < b.lp[1];
	}
	else return a.lp[0] < b.lp[0];
}*/
 
int cmp(struct data a, struct data b)
{
    return a.lp[0]==b.lp[0] ?(a.lp[1]<b.lp[1] ?1: 0): (a.lp[0]<b.lp[0] ?1: 0);
}
 
ll get_lcp(ll x, ll y) {
	ll ans = 0;
	if(x == y) return n-x;
	for(ll k = stp - 1; k >= 0 && x < n && y < n; k--) {
		if(p[k][x] == p[k][y]) {
			 y += 1<<k, x += 1<<k, ans += 1<<k;
		}
	}
	return ans;
}
 
void suffix(ll *x) {
	for(int i = 1 ; i < n; i++) {
		p[0][i-1] = x[i] - x[i-1] + 101;
	}
	n--;
 
	for(stp = 1, cnt = 1; cnt < n; cnt = cnt<<1, stp++) {
		for(int i = 0; i < n; i++) {
			l[i].lp[0] = p[stp-1][i];
			l[i].lp[1] = (i + cnt < n) ? p[stp-1][i + cnt] : -1;
			l[i].px = i;
		} 
		sort(l, l + n, cmp);
		for(int i = 0; i < n; i++) {
			p[stp][l[i].px] = (i > 0 && l[i].lp[0] == l[i-1].lp[0] && l[i].lp[1] == l[i-1].lp[1]) ? p[stp][l[i-1].px] : i;
		}
	}
	
	//for(int i = 0; i < n; i++) cout<<p[stp-1][i]<<" ";
	//cout<<"\n";
	for(ll i = 0; i < n; i++) {
		suffix_array[p[stp-1][i]] = i;
		//suffix_array[p[stp-1][i]].second = n - i;
	}
	//first contain the suffix array and second contains the length of corresponding suffix
	lcp[0] = 0;
	for(int i = 1; i < n; i++) {
		//cout<<suffix_array[i].first<<" "<<suffix_array[i].second<<"\n";
		lcp[i] = get_lcp(suffix_array[i], suffix_array[i-1]);
		//cout<<lcp[i]<<" ";
	}//cout<<"\n";
	ll ans = 0;
	//calculating disticnt substrings
    for(int i = 0; i < n; i++) {
    	ans += ( n - suffix_array[i] - lcp[i]);
    	if(ans >= mod) {
    		ans = ans%mod;
    	}
    }
    printf("%lld\n",ans);
}
 
int main() {
	int t;
	scanf("%d",&t);
	char a[100000];
	ll x[100005];
	while(t--) {
		cin>>n;
		for(int i = 0 ; i < n; i++) cin>> x[i];
		suffix(x);
	}
	return 0;
}   