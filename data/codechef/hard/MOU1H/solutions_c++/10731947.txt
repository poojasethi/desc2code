#include <iostream>
#include <cstdio>
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <cstring>
#include <cmath>
#include <ctime>
#include <algorithm>
#define msg(x) cout << #x << " = " << x << endl
using namespace std;
 
const int maxN = 100666;
 
struct State {
	int len, link;
	map<int, int> next;
};
 
State st[maxN * 2];
long long dp[maxN * 2];
int sz, last;
int delta[maxN], a[maxN];
int n, t;
 
void saInit() {
	for (int i = 0; i < maxN * 2; i++) {
		st[i].next.clear();
	}
	st[0].len = 0;
	st[0].link = -1;
	sz = last = 0;
	++sz;
}
 
void saExtend(int c) {
	int cur = sz++;
	st[cur].len = st[last].len + 1;
	int p;
	for (p = last; p != -1 && !st[p].next.count(c); p = st[p].link)
		st[p].next[c] = cur;
	if (p == -1)
		st[cur].link = 0;
	else {
		int q = st[p].next[c];
		if (st[p].len + 1 == st[q].len)
			st[cur].link = q;
		else {
			int clone = sz++;
			st[clone].len = st[p].len + 1;
			st[clone].next = st[q].next;
			st[clone].link = st[q].link;
			for (; p != -1 && st[p].next[c] == q; p = st[p].link)
				st[p].next[c] = clone;
			st[q].link = st[cur].link = clone;
		}
	}
	last = cur;
}
 
long long get(int idx) {
	if (dp[idx] != -1) return dp[idx];
	long long res = 1;
	for (map<int, int>::iterator it = st[idx].next.begin(); it != st[idx].next.end(); ++it) {
			res += get(it->second);
	}
	dp[idx] = res;
	return res;
}
 
int main() {
	// freopen("input.txt", "r", stdin);
	cin.sync_with_stdio(0); cin.tie(0);
	cin >> t;
	while (t--) {
		cin >> n;
		for (int i = 0; i < n; i++) {
			cin >> a[i];
		}
		n--;
		for (int i = 0; i < n; i++) {
			delta[i] = a[i + 1] - a[i];
		}
		saInit();
		for (int i = 0; i < n; i++) {
			saExtend(delta[i]);
		}
		memset(dp, -1, sizeof(dp));
		cout << (get(0) - 1) % 1000000009 << "\n";
	}
	return 0;
}
 