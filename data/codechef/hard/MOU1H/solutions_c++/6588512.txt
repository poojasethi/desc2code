//{{{
#include<iostream>
#include<algorithm>
#include<cmath>
#include<climits>
#include<vector>
#include<list>
#include<stack>
#include<queue>
#include<deque>
#include<stack>
#include<bitset>
#include<set>
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<ctime>
#include<map>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<iomanip>
#include<cctype>
//#undef thecodegame
#ifdef thecodegame
    #include<debug.h>
#else
    #define DBG_ARR(a,b,c) {}
    #define DBG_MAT(a,s,b,c) {}
    #define DBG_VECT(a) {}
    #define db(...) {}
    #define dbt(x, ...) {}
#endif

using namespace std;

#define assert(f) {if(!(f)){fprintf(stderr,"Line-->%d  Assertion failed: %s \n",__LINE__,#f);exit(1);}}
#define MOD 	 1000000009LL
#define LL 		 long long
#define ULL      unsigned long long
#define ABS(x)   ((x)<0?-(x):(x))
#define SQR(x) 	 ((x)*(x))
#define CUBE(x)  ((x)*(x)*(x))
#define SD(n)    scanf("%d",&n)
#define SD2(n,m) scanf("%d %d",&n,&m)
#define SLL(n)   scanf("%lld",&n)
#define SLU(n)   scanf("%llu",&n)
#define SS(n)    scanf("%s",n)
#define pnl      printf("\n")
#define REP(i,n)        for(__typeof(n) i=0;i<(n);i++)
#define FOR(i,a,b)      for(__typeof(b) i=(a);i<(b);++i)
#define FORE(i,a,b)     for(__typeof(b) i=(a);i<=(b);++i)
#define FORD(i,a,b,d)   for(__typeof(b) i=(a);i<(b);i+=(d))
#define FORR(i,n,e)     for(__typeof(n) i=(n);i>=(e);--i)
#define FORRD(i,n,e,d)  for(__typeof(n) i=(n);i>=(e);i-=(d))
#define REP_IT(it,m)    for(it=m.begin();it!=m.end();it++)
#define FORI(it,s) 	    for(__typeof((s).begin()) (it)=(s).begin();(it)!=(s).end();(it)++)
#define FOREACH(it, X)  for(__typeof((X).begin()) it = (X).begin(); it != (X).end(); ++it)
#define UNIQUE(v)       sort(aLL(v)),v.erase(unique(aLL(v)),v.end())
#define FILL(a,b)       memset(a,b,sizeof(a))
#define ALL(v)          (v).begin(), (v).end()
#define RALL(v)         (v).rbegin(), (v).rend()
#define checkbit(n,b)    ( ((n) >> (b)) & 1)
#define PB push_back
#define MP make_pair
#define XX first
#define YY second

const double PI=acos(-1.0);
const double EPS=1e-11;
template<typename T>inline T mod(T N,T M){return (N%M+M)%M;}
template<typename T>inline void checkmin(T &a,T b){if(b<a)a=b;}
template<typename T>inline void checkmax(T &a,T b){if(b>a)a=b;}
class minHeap{public:bool operator()(int& c1,int& c2){return c1>c2;}};
class maxHeap{public:bool operator()(int& c1,int& c2){return c1<c2;}};
double start;//time
#ifdef amy
    #define getcx getchar
#else
    #define getcx getchar_unlocked
#endif
template<typename T>inline void inp(T &n){
    n=0;int ch=getcx();int sign=1;
    while(ch<'0'||ch>'9'){if(ch=='-')sign=-1;ch=getcx();}
    while(ch>='0'&&ch<='9'){n=(n<<3)+(n<<1)+ch-'0',ch=getcx();}
    n=n*sign;
}

//}}}
#define SIZE 100011
#define MAXX 100000009

//#define inp(x) SLL(x)
void pre(){}//end precompute

/****************
thanks a lot >>mukel for writing such a nice tutorial on suffix arrays
:D :D

http://codeforces.com/blog/entry/4025

******************/

/*
Suffix array O(n lg^2 n)
LCP table O(n)
*/


//namespace SuffixArray{
	const int MAXN = 111111;
int arr[MAXN];
int N, gap;
int sa[MAXN], pos[MAXN], temp[MAXN], lcp[MAXN];

bool suffixCmp(int i, int j) {
    if (pos[i] != pos[j]) {
        return pos[i] < pos[j];
    }
    i += gap;
    j += gap;
    if (i < N && j < N) {
        return pos[i] < pos[j];
    }
    return i > j;
}
void buildSA() {
	N = N-1;
    for (int i = 0; i < N; i++) {
        sa[i] = i;
        pos[i] = arr[i];
    }
    for (gap = 1;; gap *= 2) {
        sort(sa, sa + N, suffixCmp);
        for (int i = 0; i < N - 1; i++) {
            temp[i + 1] = temp[i] + suffixCmp(sa[i], sa[i + 1]);
        }
        for (int i = 0; i < N; i++) {
            pos[sa[i]] = temp[i];
        }
        if (temp[N - 1] == N - 1) {
            break;
        }
    }
}

void buildLCP() {
    int k = 0, j;
    for (int i = 0; i < N; i++) {
        if (pos[i] != N - 1) {
            j = sa[pos[i] + 1];
            for (; arr[i + k] == arr[j + k];) {
                k++;
            }
            lcp[pos[i]] = k;
            if (k) {
                k--;
            }
        }
    }
}
//} // end namespace SuffixArray
LL ans;
void doThis(int cc){

	/********** always check the MOD value :P :P ***********/


	ans =0; /* silly me :P */
	inp(N);
	//scanf("%lld",&N);
	//assert(N>=1&&N<=100000);
	REP(i,N){
		inp(arr[i]);
		//scanf("%lld",&arr[i]);
		//assert(ABS(arr[i])<=1000000);
		//
	}

	/*** fire in the hole *******/
	/****** bug spotted :D *******/


	if(N==1){
		puts("0");
		return;
	}
	if(N==2){
		puts("1");
		return;
	}


	REP(i,N-1){
		arr[i]=(arr[i+1]+100)-arr[i];
	}

	buildSA();//first sa then lcp
	buildLCP();

	REP(i,N){
		ans=((LL)ans+((N - sa[i]) - lcp[i]))%MOD;
	}
	//ans%=MOD;
	printf("%lld\n",ans);

}//end solve
void gen(){
	int T = 10000;
	printf("%d\n",T);
	int N = 10000;
	REP(i,T){
		printf("%d\n",N);
		REP(j,N){
			printf("%d ",rand()%(1<<11));
		}
		pnl;
	}
}
int main(){
start = clock();
#ifdef amy
	freopen("C:\\A\\in.txt","r",stdin);freopen("C:\\A\\out.txt","w",stdout);freopen("C:\\A\\out.txt","w",stderr);
#endif
int cases;
inp(cases);
FORE(i,1,cases){doThis(i);}
#ifdef amy
	fprintf(stdout,"\nTIME: %.3lf sec\n",(double)(clock()-start)/(CLOCKS_PER_SEC));
#endif
//while((clock()-start)<0.999*CLOCKS_PER_SEC){} // :D :D
return 0;
}//end main