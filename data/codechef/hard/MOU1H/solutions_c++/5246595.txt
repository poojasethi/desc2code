#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>
#include <functional>
#include <utility>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <string>
 
#define LL long long
#define vi vector<int>
#define pb push_back
#define sz size
#define all(x) (x).begin(),(x).end()
#define it iterator
#define REP(i,a,b) for(int i=(a);i<(b);i++)
#define REPX(i,a,b,c) for(int i=(a);i<(b);i+=(c))
#define DEP(i,a,b) for(int i=(a)-1;i>=(b);i--)
#define REX(i,x) for(__typeof((x).begin()) i=(x).begin(); i!=(x).end();i++)
#define pii pair<int,int>
#define pdd pair<double, double>
#define mp make_pair
#define fi first
#define se second
#define st string
#define ffo find_first_of
#define su substr
#define vs vector<st>
#define ub upper_bound
#define lb lower_bound
#define ni next_int
#define gu getchar_unlocked
#define bs binary_search
#define ord(c) (c-'0')
#define MAX 100010
#define MOD 1000000009
#define INF 1000010
using namespace std;
int x[MAX],y[MAX],b[MAX],s[MAX],a[MAX],l[MAX],t[MAX],h;
inline int ni()
{
	int n=0,s=1; char c=gu();
	while(!(c>='0' && c<='9')) 
	{
		if(c=='-') s=-1;
		c=gu();
	}
	while(c>='0' && c<='9')
	{
		n=(n<<3)+(n<<1)+c-'0';
		c=gu();
	}
	return n*s;
}
struct comp
{
	bool operator()(const int &i,const int &j)
	{
		if(!h) return y[i]<y[j];
		return b[i]<b[j] || (b[i]==b[j] && b[i+h]<b[j+h]);
	}
};
int bucketize(int n)
{
	int k=0; t[s[0]]=0;
	comp c;
	REP(i,1,n)
	{
		k+=c(s[i-1],s[i]);
		t[s[i]]=k;
	}
	memcpy(b,t,sizeof(b));
	return k==n-1;
}
void suffix(int n)
{
	REP(i,0,n) s[i]=i;
	comp c; h=0;
	sort(s,s+n,c);
	int f=bucketize(n); h=1;
	while(!f)
	{
		sort(s,s+n,c);
		f=bucketize(n);
		h<<=1;
	}
}
void lcp(int n)
{
	l[0]=0; int k=0;
	REP(i,0,n)
	{
		int j=s[a[i]-1];
		while(y[i+k]!=-INF && y[i+k]==y[j+k]) k++;
		l[a[i]]=k;
		if(k>0) k--;
	}
}
int main()
{
	int tc=ni();
	REP(t,0,tc)
	{
		int n=ni();
		REP(i,0,n) x[i]=ni();
		REP(i,0,n-1) y[i]=x[i+1]-x[i];
		y[n-1]=-INF;
		suffix(n);
		REP(i,0,n) a[s[i]]=i;
		lcp(n-1);
		int v=0;
		REP(i,1,n) v=(v+n-1-s[i]-l[i])%MOD;
		printf("%d\n",v);
	}
	return 0;
}