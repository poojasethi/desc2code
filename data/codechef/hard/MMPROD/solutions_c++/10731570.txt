#include<cstdio>
#include<fstream>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstring>
#include<vector>
#include<cmath>
#include<map>
#include<iostream>
#include<cstdlib>
#include<set>
#include<sstream>
using namespace std;
bool cmp(int a,int b)
{return a<b;
}
typedef long long ll;
typedef pair<long long,long long> lll;
typedef pair<long long,int> lli;
typedef pair<int,int> ii;

#define EL printf("\n")
#define OK printf("OK")
#define pb push_back
#define mp make_pair
#define ep emplace_back
#define X  first
#define Y  second
#define fillchar(a,x) memset(a, x, sizeof(a))
#define FOR(i,l,r) for (int i=l;i<=r;i++)
#define FORD(i,r,l) for (int i=r;i>=l;i--)
#define Get getchar()
int getInt() { int a=0,s=1; char c=0; while(c<33) c=Get; if(c=='-') {s=-1; c=Get;} while(c>33) {a=(a<<3)+(a<<1)+c-'0'; c=Get;} return a*s; }
/*
long long mod(long long a)
{
    return a>=0?a:-a;
}
*/

int main() {
		//freopen("practice.in","r",stdin);
        int t;
        int mod = 1000000007;
        t = getInt();
        //t=1;
        while(t--)
        {
            long long n,k,arr[100002];
            n = getInt();
            k = getInt();
            for(int i=0;i<n;i++)
            {
                arr[i] = getInt();
            }
            sort(arr,arr+n,cmp);
            //for(int i=0;i<n;++i)printf("%lld ",arr[i]);
            long long start = 0,end = n-1,ans = 1,val = 0;
            if(arr[n-1]<0&&k%2)
            {
                for(int i=0;i<k;i++)
                {
                    ans = (ans*arr[n-1-i])%mod;
                }
            }
            else
            {
                while(k)
                {
                    if(k>1)
                    {
                        if(arr[start]*arr[start+1]>arr[end]*arr[end-1])
                        {
                            ans = (((arr[start]*arr[start+1])%mod)*ans)%mod;
                            start+=2;
                            k-=2;
                        }
                        else
                        {
                            ans = (ans*arr[end])%mod;
                            end--;
                            k--;
                        }
                    }
                    else
                    {
                        ans = (ans*arr[end])%mod;
                        end--;
                        k--;
                    }
                }
            }
            ans = (ans+mod)%mod;
            printf("%lld\n",ans);
        }
        return 0;
	}
