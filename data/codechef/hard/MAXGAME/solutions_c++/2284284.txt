#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include<assert.h>
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
 
#define ll long long
#define M 100000000000007LL
 
/* ct[i] = i-th catalan or motzkin number, cts[i] = number of digits of ct[i] in base M */
ll ct[10001][450], cts[10001];
ll res1[10001], res2[10001];
 
int main(){
  int i,j;
  int T, N, K;
  ll r;
 
  /* catalan number c[i] = c[i-1]*(4i-2)/(i+1) */
  ct[0][0] = ct[1][0] = 1;
  cts[0] = cts[1] = 1;
  REP(i,2,10001){
    cts[i] = cts[i-1];
    rep(j,cts[i]) ct[i][j] = ct[i-1][j] * (4*i-2);
    for(j=cts[i]-1;j;j--){
      r = ct[i][j] / (i+1);
      ct[i][j-1] += M*(ct[i][j]-r*(i+1)), ct[i][j]=r;
    }
    ct[i][0] /= (i+1);
    rep(j,cts[i]-1){
      while(ct[i][j] >= M) ct[i][j+1]++, ct[i][j]-=M;
    }
    while(ct[i][cts[i]-1] >= M){
      ct[i][cts[i]] = ct[i][cts[i]-1]/M;
      ct[i][cts[i]-1] %= M;
      cts[i]++;
    }
  }
  rep(i,10001){
    res1[i] = ct[i][0]-1;
    if(res1[i] < 0) res1[i] += M;
  }
 
  /* motzkin number c[i] = (c[i-2]*(3i-3)+c[i-1]*(2i+1))/(i+2) */
  ct[0][0] = ct[1][0] = 1;
  cts[0] = cts[1] = 1;
  REP(i,2,10001){
    cts[i] = cts[i-1];
    rep(j,cts[i]) ct[i][j] = ct[i-1][j] * (2*i+1);
    rep(j,cts[i-2]) ct[i][j] += ct[i-2][j] * (3*i-3);
    for(j=cts[i]-1;j;j--){
      r = ct[i][j] / (i+2);
      ct[i][j-1] += M*(ct[i][j]-r*(i+2)), ct[i][j]=r;
    }
    ct[i][0] /= (i+2);
    rep(j,cts[i]-1){
      while(ct[i][j] >= M) ct[i][j+1]++, ct[i][j]-=M;
    }
    while(ct[i][cts[i]-1] >= M){
      ct[i][cts[i]] = ct[i][cts[i]-1]/M;
      ct[i][cts[i]-1] %= M;
      cts[i]++;
    }
  }
  rep(i,10001){
    res2[i] = ct[i][0]-1;
    if(res2[i] < 0) res2[i] += M;
  }
 
  assert( scanf("%d",&T)==1 );
  assert( 1<=T && T<=10000 );
  while(T--){
    assert( scanf("%d%d",&N,&K)==2 );
    assert( 0<=N && N<=10000 && 0 <= K && K <= N );
    
    if(K==0) puts("0");
    if(K==1) printf("%lld\n",res2[N]);
    if(K>=2) printf("%lld\n",res1[N]);
  }
 
  return 0;
} 