#include <cstdio>
#include <algorithm>
#include <vector>
#define P 1000000009
#define ll long long
using namespace std;

void get2(int &x) { 
  int m_=1;char c_;
  while((c_=getchar_unlocked())<=' ');
  if (c_=='-') {m_=x=0;}
  else x=c_-'0';
  while((c_=getchar_unlocked())>='0')
    x+=x+(x<<3)+c_-'0';
  if (!m_) x=-x;
  }

struct query{int m,i;} tq[30];
bool fc( const query &a, const query &b) {return a.m>b.m;}
bool fd( const query &a, const query &b) {return a.i<b.i;}

ll fact[100001]={1},ifact[100001]={1};

int invmod(int a) {
	ll w=1,p=a,b=P-2;
	while(b) {
		if (b%2) w=w*p%P;
		p=p*p%P;
		b/=2;
	}
	return w;
}

void prep() {
	for (int i=1;i<100001;i++) {
		fact[i]=fact[i-1]*i%P;
		ifact[i]=invmod(fact[i]);
	}
}

int pow2mod(int b) {
	ll w=1,p=2;
	while(b){
		if(b%2) w=w*p%P;
		p=p*p%P;
		b/=2;
	}
	return w;
}

int T,N,tn[100001],Q,ans[30][100];

void solve(int q) {
	int M = tq[q].m;
	int qi = tq[q].i;
	ans[qi][0]=M;
	vector<int> rest; rest.resize(M,0);
	for (int i=0;i<N;i++) {++rest[tn[i]<0 ? (M-(-tn[i]%M))%M : tn[i]%M];}
	vector<int> ilo[2]; ilo[0].resize(M,0); ilo[1].resize(M,0);
	ilo[0][0]=pow2mod(rest[0]);
	int faza=0;
	for (int r=1;r<M;r++) {
		int n=rest[r]; 
		if (n==0) continue;
		//printf("r=%d n=%d\n",r,n);
		vector<ll> komb; komb.resize(M,0);
		for (int k=0;k<(n+1)/2;k++) {
			int w = (ll)fact[n]*ifact[k]%P*ifact[n-k]%P;
			komb[k*r%M]+=w;
			komb[(n-k)*r%M]+=w;
			//printf("k=%d w=%d\n",k,w);
		}
		if (n%2==0) komb[n/2*r%M]=(komb[n/2*r%M]+fact[n]*invmod(fact[n/2]*fact[n/2]%P)%P)%P;
		//for (int i=0;i<M;i++) printf("%d, ",komb[i]); puts("");
		for (int i=0;i<M;i++) ilo[1-faza][i]=0;
		for (int i=0;i<M;i++) {
			komb[i]%=P;
			if (komb[i]==0) continue;
			for(int j=0;j<M;j++) 
				if (ilo[faza][j]>0)
					ilo[1-faza][(i+j)%M]=(ilo[1-faza][(i+j)%M]+komb[i]*ilo[faza][j])%P;
		}
		faza=1-faza;
		//for (int i=0;i<M;i++) printf("%d, ",ilo[faza][i]); puts("");
	} 
	for (int r=0;r<M;r++)
		ans[qi][r]=ilo[faza][r];
}

int main() {
	prep();
	scanf("%d",&T);
	while (T--) {
		scanf("%d%d",&N,&Q);
		for (int i=0;i<N;i++) get2(tn[i]);//scanf("%d",&tn[i]);
		for (int i=0;i<Q;i++) {scanf("%d",&tq[i].m); tq[i].i=i;}
		sort(tq,tq+Q,fc);
		for (int q=0;q<Q;q++)  { //printf("%d %d\n",tq[q].m,tq[q].i);
			solve(q);
		}
		sort(tq,tq+Q,fd);
		for (int q=0;q<Q;q++)
			printf("%d\n",ans[q][0]);
	}
	return 0;
}