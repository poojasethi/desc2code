#include<stdio.h>
#define MOD 1000000009
#define ull unsigned long long int
#define MUL(a, b) (int)((((ull)(a))*((ull)(b)))%MOD)
#define ADD(a, b) (int)((((ull)(a))+((ull)(b)))%MOD)

#ifndef ONLINE_JUDGE
#define gc getchar
#else
#define gc getchar_unlocked
#endif

int read_int() {
    char c = gc();
    while((c < '0' || c > '9') && c != '-') c = gc();
    int ret = 0;
    int neg = 1;
    if (c == '-') {
        neg = -1;
        c = getchar();
    }
    while(c >= '0' && c <= '9') {
        ret = 10 * ret + c - 48;
        c = gc();
    }
    return neg*ret;
}

int pow_mod(int b, int e) {
    if (e == 0)
        return 1;
    if (e == 1)
        return b;
    if (e == 2)
        return MUL(b, b);
    int t = pow_mod(b, e/2);
    if (e%2 == 0)
        return MUL(t, t);
    t = MUL(t, t);
    return MUL(t, b);
}

int inverse(int n) {
    return pow_mod(n, MOD-2);
}

int fact[100001], invfact[100001];

int choose(int k, int n) {
    return MUL(fact[n], MUL(invfact[k], invfact[n-k]));
}

int A[100000], C[100], D[2][100], WAYS[100];

int main() {
    int T, N, Q, M, i, j, k, m;

    //freopen("testcase.in", "r", stdin);

    fact[0] = 1;
    invfact[0] = 1;
    for(i=1; i<=100000; i++) {
        fact[i] = MUL(fact[i-1], i);
        invfact[i] = inverse(fact[i]);
    }

    T = read_int();
    while(T--)
    {
        N = read_int();
        Q = read_int();
        for(i=0; i<N; i++)
            A[i] = read_int();
        while(Q--)
        {
            M = read_int();
            for(i=0; i<M; i++)
            {
                C[i] = 0;
                D[0][i] = 0;
            }
            for(i=0; i<N; i++)
                C[(A[i]%M+M)%M]++;
            m = 0;
            D[0][0] = 1;
            for(i=0; i<M; i++)
            {
                if (C[i] == 0) continue;
                for(j=0; j<M; j++)
                {
                    D[1-m][j] = 0;
                    WAYS[j] = 0;
                }
                WAYS[0] = 1;
                for(j=1; j<=C[i]; j++)
                    WAYS[(j*i)%M] = ADD(WAYS[(j*i)%M], choose(j, C[i]));
                for(j=0; j<M; j++)
                    if (D[m][j])
                        for(k=0; k<M; k++)
                            if (WAYS[k])
                                D[1-m][(k+j)%M] = ADD(D[1-m][(k+j)%M], MUL(WAYS[k], D[m][j]));
                m = 1-m;
            }
            printf("%d\n", D[m][0]);
        }
    }

    return 0;
}
