/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.

* File Name : card.cpp

* Creation Date : 05-04-2014

* Last Modified : Monday 14 April 2014 08:08:23 PM IST

* Created By : npsabari

_._._._._._._._._._._._._._._._._._._._._.*/

#include <iterator>
#include <cctype>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <ctime>
#include <cassert>
#include <climits>
#include <limits>
#include <string>
using namespace std;

//Macros
#define dbl double
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair< int, int >
#define psi pair< string, int >
#define vi vector<int>
#define vll vector<ll>

#define abs(x) ((x)<0?-(x):(x))
#define sqr(x) ((x)*(x))

#define MOD 1000000009
#define MAXN 100001
#define MAXBUF 5000000
#define EPS 1e-9
#define NIL 0
#define INF (INT_MAX/2)
#define LLINF (LONG_LONG_MAX/2LL)
#define NEWLINE '\n'

#define SET(A) memset(A, 1,sizeof(A));                     //NOTE: Works only for x = 0 and -1. Only for integers.
#define CLR(A) memset(A, 0,sizeof(A));
#define MEM(A,x) memset(A,x,sizeof(A));
#define CPY(A,B) memcpy(A,B,sizeof(A));

#define SIZE(A) ((int)(A.size()))
#define ALL(x)  x.begin(),x.end()
#define FILL(A,x) fill(ALL(A),x)
#define REP(i,N) for(int i=0;i<(int)(N); ++i)
#define FORab(i,a,b) for(int i=(int)(a);i<=(int)(b); ++i)
#define RFORab(i,a,b) for(int i=(int)(a);i>=(int)(b); --i)
#define FOR1(i,n) FORab(i,1,(n))
#define RFOR1(i,n) RFORab(i,(n),1)
#define FOR(i,n) FORab(i,0,(n)-1)
#define RFOR(i,n) RFORab(i,(n)-1,0)
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define SORTV(x) sort(ALL(x))
#define REVV(x) reverse(ALL(x))

#define mp make_pair
#define pb push_back
#define ff first
#define ss second

#define nbits(n) __builtin_popcount(n)                  //NOTE: Works only for int. Write your own function for long long :-/
#define atbit(x,i) (((x)>>(i))&1)
#define FIXMOD(a) (((a)%MOD+MOD)%MOD)

#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)

ll store[101][101];
int coun[101];
int n, q, m;
int lst[MAXN];
ll pre_comp[101][101];
int cur;

ll fact[MAXN];
ll invfact[MAXN];

ll powe(ll a, int k) {
    ll res = 1;
    while(k) {
        if(k&1) res = (res*a)%MOD;
        a = (a*a)%MOD;
        k >>= 1;
    }
    return res;
}

void pre_compute(){
    fact[0] = 1;
    for(int i = 1; i < MAXN; ++i) {
        fact[i] = (i*fact[i-1])%MOD;
    }
    invfact[MAXN-1] = powe(fact[MAXN-1], MOD-2);
    for(int i = MAXN-2; i >= 0; --i) {
        invfact[i] = (invfact[i+1]*(i+1))%MOD;
    }
}

ll ncr(ll a, ll b) {
    ll sol = (fact[a]*invfact[b])%MOD;
    sol = (sol*invfact[a-b])%MOD;
    return sol;
}

int main() {
    int c;
    int t;
    pre_compute();
    scanf("%d", &c);
    while(c--) {
        scanf("%d %d", &n, &q);
        REP(i, n) scanf("%d", lst+i);
        REP(l, q) {
            CLR(coun);
            CLR(pre_comp);
            scanf("%d", &m);
            REP(j, n) {
                t = lst[j]%m;
                if(t < 0) t += m;
                coun[t]++;
            }
            REP(i, m) {
                REP(j, coun[i]+1) {
                    pre_comp[i][(j*i)%m] += ncr(coun[i], j);
                    pre_comp[i][(j*i)%m] %= MOD;
                }
            }
            for(int i = 0; i < m; ++i) {
                for (int k = 0; k < m; ++k) {
                    if(i == 0) {
                        if(k != 0) {
                            store[i][k] = 0;
                            continue;
                        }
                        store[i][k] = 0;
                        for(int j = 0; j < m; ++j) {
                            t = k-j;
                            if(t < 0) t += m;
                            store[i][k] += pre_comp[i][t];
                            store[i][k] %= MOD;
                        }
                        continue;
                    }
                    store[i][k] = 0;
                    for(int j = 0; j < m; ++j) {
                        t = k-j;
                        if(t < 0) t += m;
                        store[i][k] += (store[i-1][t] * pre_comp[i][j])%MOD;
                        store[i][k] %= MOD;
                    }
                }
            }
            printf("%lld\n", store[m-1][0]);
        }
    }
	return 0;
}
