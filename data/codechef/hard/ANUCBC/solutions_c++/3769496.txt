#include<stdio.h>
#include<iostream>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<stack>
#include<algorithm>
#include<cstring>

#define MOD 1000000009
#define INF 2000000000

using namespace std;

long long fact[140000];
long long inv[140000];

struct poly
{
       long long c[105];
};


long long powmod(long long b,long long e)
{
     long long ret=1;
     
     while(e)
     {
             if(e&1)
             {
                    ret*=b;
                    ret%=MOD;
             }
             
             b*=b;
             b%=MOD;
             e>>=1;
     }
     
     return ret;
}

void fact_fill()
{
     long long i;
     
     fact[0]=1;
     
     for(i=1;i<=100500;i++)
     {
                           fact[i]=(fact[i-1]*i)%MOD;
     }
     
     return;
}

long long ncr(int n,int r)
{
     long long ret=fact[n];
     ret*=powmod(fact[n-r],MOD-2);
     ret%=MOD;
     ret*=powmod(fact[r],MOD-2);
     ret%=MOD;
     
     return ret;
}

void calc_inv()
{
     long long i;
     
     /*for(i=1;i<=100040;i++)
     {
                           inv[i]=powmod(i,MOD-2);
     }*/
     inv[1]=1;
     
     for(i=2;i<=100040;i++)
     {
                           inv[i]=-(MOD/i)*inv[MOD%i];
                           inv[i]%=MOD;
                           inv[i]+=MOD;
                           inv[i]%=MOD;
     }
     
     return;
}

void mul(poly &a,poly &b,int n)
{
     int i,j;
     poly c;
     
     memset(c.c,0,sizeof(c.c));
     
     for(i=0;i<n;i++)
     {
                     for(j=0;j<n;j++)
                     {
                                     c.c[(i+j)%n]+=(a.c[i]*b.c[j])%MOD;
                                     c.c[(i+j)%n]%=MOD;
                                     
                     }
     }
     
     a=c;
}

void make_poly(poly &a,int n,int m,int mod)
{
     int i;
     
     memset(a.c,0,sizeof(a.c));
     
     long long x=1;
     
     for(i=0;i<=n;i++)
     {
                     int b=(i*m)%mod;
                     
                     a.c[b]+=x;
                     
                     if(a.c[b]>=MOD)
                      a.c[b]-=MOD;
                      
                     x*=(n-i);
                     x%=MOD;
                     x*=inv[i+1];
                     x%=MOD;
     }
     
     return;
}

int inp()
{
    int ch=getchar();
    int ret=0;
    
    while(ch<'0' && ch>'9')
     ch=getchar();
    
    while(ch>='0' && ch<='9')
    {
                  ret*=10;
                  ret+=(ch-'0');
                  ch=getchar();
    }
    
    return ret;
}
 

void print_poly(poly a,int n)
{
     int i;
     
     for(i=0;i<n;i++)
     {
                     printf("%lld ",a.c[i]);
     }
     printf("\n\n");
}

int a[100005];

int main()
{
    int t,n,q,cnt[400],i,m;
    
    fact_fill();
    calc_inv();
    //double st=clock();
    //freopen("in.txt","r",stdin);
    //freopen("out_slow.txt","w",stdout);
    
    
    poly p[200];
    
    
    scanf("%d",&t);
    
    long long ans[104];
    //t=inp();
    
    while(t--)
    {
              scanf("%d %d",&n,&q);
              //n=inp();
              //q=inp();
              memset(ans,-1,sizeof(ans));
              
              
              for(i=0;i<n;i++)
              {
                              scanf("%d",&a[i]);
                              //a[i]=inp();
                              
              }
              
              while(q--)
              {
                        
                        //m=inp();
                        scanf("%d",&m);
                        
                        if(ans[m]!=-1)
                        {
                                      printf("%lld\n",ans[m]);
                                      continue;
                        }
                        
                        
                        
                        memset(cnt,0,sizeof(cnt));
                        
                        for(i=0;i<n;i++)
                        {
                                        cnt[(a[i]%m+m)%m]++;
                                        
                        }
                        
                        
                        for(i=0;i<m;i++)
                        {
                                        make_poly(p[i],cnt[i],i,m);
                                        
                        }
                        
                        for(i=1;i<m;i++)
                        {
                                        mul(p[0],p[i],m);
                                        
                        }
                        
                        
                        
                        
                        printf("%lld\n",p[0].c[0]);
                        ans[m]=p[0].c[0];
              }
                        
              
    }
    
    //printf("%lf\n",double(clock()-st));
    return 0;
}
