/*-----DP: bottom-up iterative-----*/
#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

#define Ss(x) scanf("%s",x)
//#define S(x) scanf("%d",&x)
#define getcx getchar
inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%lld\n",x)
typedef long long int LL;
#define Bug(x) cout << #x << "=" << x << endl
#define pii pair<int,int>
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)

const int mod=1e9+9,maxn=100005;

int cards[maxn],_hash[105];
LL subsets[105][105],ans[105],temp[105];

LL fact[maxn],ifact[maxn];

LL _pow(LL x,LL y)
{
    if(!y)
        return 1;
    if(y==1)
        return x;
    if(y==2)
        return (x*x)%mod;
    if(y&1)
        return (x*_pow(x,y-1))%mod;
    else
        return (_pow(_pow(x,y/2),2))%mod;
}
void pre()
{
    fact[0]=1;
    F(i,1,maxn)
        fact[i]=(i*fact[i-1])%mod;

    ifact[maxn-1]=_pow(fact[maxn-1],mod-2);

    I(i,maxn-2,0)
        ifact[i]=(ifact[i+1]*(i+1))%mod;
}

LL comb(int n,int r)
{
    return (((fact[n]*ifact[r])%mod)*ifact[n-r])%mod;
}

void reset(int m)
{
    F(i,0,m)
    {
        _hash[i]=ans[i]=temp[i]=0;
    }
    F(i,0,m)
    {
        F(j,0,m)
            subsets[i][j]=0;
    }

}

int main()
{
    int t;
    S(t);
    pre();
    while(t--)
    {
        int q,n;
        S(n);
        S(q);
        F(i,0,n)
        {
            S(cards[i]);
        }
        while(q--)
        {
            int m,sz=0;
            S(m);
            F(i,0,n)
            {
                _hash[(cards[i]%m+m)%m]++;
            }
            F(i,0,m)
            {
                int sum=0;
                if(_hash[i])
                {
                    subsets[sz][sum]=(subsets[sz][sum]+comb(_hash[i],0))%mod;
                    sz++;
                }
                F(j,0,_hash[i])
                {
                    sum=(sum+i)%m;
                    subsets[sz-1][sum]=(subsets[sz-1][sum]+comb(_hash[i],j+1))%mod;
                }
            }
            F(i,0,m)
            ans[i]=subsets[0][i];

            F(i,1,sz)
            {


                F(j,0,m)
                {
                    temp[j]=ans[j];
                    ans[j]=0;
                }
                F(j,0,m)
                {
                    F(k,0,m)
                    {
                        if(temp[j]&&subsets[i][k])
                        {
                            int p=(j+k)%m;
                            ans[p]=(ans[p]+temp[j]*subsets[i][k])%mod;
                        }
                    }
                }
            }

            P(ans[0]);

            reset(m);
        }
    }
    return 0;
}
