#include<iostream>
#include<vector>
#include<cstring>
#include<cstdio>
#define MOD 1000000009
#define ll long long

using namespace std;

ll factorial[100005], ifactorial[100005];

ll powmod(ll base, ll exponent, ll mod)
{
  ll ans = 1;
  while(exponent){
    if(exponent & 1)
      ans = (ans * base) % mod;
    base = (base * base) % mod;
    exponent >>= 1;
  }
  return ans;
}

void getFactorials(ll N, ll mod)
{
  factorial[0] = 1;
  for(ll i = 1; i <= N; ++i)
    factorial[i] = (factorial[i-1] * i) % mod;
  ifactorial[N] = powmod(factorial[N],mod-2,mod);
  for(ll i = N-1; i >= 0; i--)
    ifactorial[i] = (ifactorial[i+1] * (i+1)) % mod;
}


ll nCr_(ll N, ll R, ll mod)
{
  return (((factorial[N] * ifactorial[R])%mod) * ifactorial[N-R])%mod;
}

ll cards[100005];

int main()
{
  int T;
  scanf("%d",&T);
  getFactorials(100003,MOD);
  while(T--){
    ll N;
    int Q;
    scanf("%lld %d",&N,&Q);
    for(ll i = 0; i < N; ++i)
      scanf("%lld",&cards[i]);
    ll cache[102]={0};
    while(Q--){
      ll remainder_count[102] = {0};
      int M;
      ll sum[102][102], dp[102][102];
      memset(sum,0,sizeof(sum));
      scanf("%d",&M);
      if(cache[M] > 0){
	printf("%lld\n",cache[M]);
	continue;
      }
      for(ll i = 0; i < N; ++i)
	remainder_count[((cards[i]%M)+M)%M]++;
      sum[0][0] = powmod(2,remainder_count[0],MOD);
      dp[0][0] = sum[0][0];
      for(int i = 1; i < M; ++i){
	for(ll j = 0; j <= remainder_count[i]; ++j){
	  sum[i][(i*j)%M] = (sum[i][(i*j)%M] + nCr_(remainder_count[i],j,MOD)) % MOD;
	}
      }
      
      for(int i = 1; i < M; ++i){
	dp[0][i] = 0;
      }
      for(int i = 1; i < M; ++i){
	for(int j = 0; j < M; ++j){
	  dp[i][j] = 0;
	  for(int k = 0; k < M; ++k){
	    dp[i][j] = (dp[i][j] + (dp[i-1][(j-k+M)%M] * sum[i][k]) % MOD) % MOD;
	  }
	}
      }
      cache[M] = dp[M-1][0];
      printf("%lld\n",cache[M]);
    }
  }
  return 0;
}




