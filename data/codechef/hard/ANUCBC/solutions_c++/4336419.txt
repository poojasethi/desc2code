#include<iostream>
#include<map>
#include<vector>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<cstdio>
#include<fstream>
using namespace std;
#define abs(x) ((x)>0?(x):-(x))
#define M 1000000009
#define MOD 1000000009
#define big 1000000000
#define lld signed long long int
#define pp pop_back()
#define ps(x) push_back(x)
#define tkint(n) scanf("%d",&n)
#define tkchar(ch) scanf("%c",&ch)
#define tklong(n) scanf("%I64d",&n)
lld d[100000+5],fact[100001],inverse[100001],dp[102][102],mem[102];
int fre[102];
lld powmod(lld a)
{
    lld b=MOD-2;
    lld c=MOD;
    lld ret=1LL;

    while(b)
    {
        if(b & 1)
            ret = (ret*a)%c;
        a=(a*a)%c;
        b>>=1;
    }
    return (ret)%c;
}
lld mInverse(lld a)
{
    if(a==0LL)
        return 1LL;
    return powmod(a);
}
void precomputefact()
{
	int i;
	fact[0]=1LL;
	inverse[0]=1LL;
	for(i=1;i<=100000;++i)
	{
		fact[i]=fact[i-1]*i;
		fact[i]=fact[i]%MOD;
		inverse[i]=mInverse(fact[i]);
	}
}
void init(int m)
{
	for(int i=0;i<=m;++i)
	{
		fre[i]=0;
		for(int j=0;j<=m;++j)
		{
			dp[i][j]=0;
		}
	}
}
lld nck(int n,int k)
{
	if(n<k)return 0;
	lld ans=fact[n];
	ans=(ans*inverse[k])%M;
	ans=(ans*inverse[n-k])%M;
	return ans;
}
int main()
{
	precomputefact();
	int t,n,q,m,si;
	cin>>t;
	while(t--)
	{
		cin>>n>>q;
		for(int i=1;i<=n;++i)scanf("%llu",&d[i]);
		while(q--)
		{
			tkint(m);
			init(m);
			dp[0][0]=1;
			for(int i=1;i<=n;i++)fre[(d[i]%m+m)%m]++;
			for(int i=0;i<m;++i)
			{
				for(int tmp=0;tmp<m;++tmp)mem[tmp]=0;
				for(int tmp=0;tmp<=fre[i];++tmp)
				{
					mem[tmp%m]+=nck(fre[i],tmp);
					mem[tmp%m]%=M;
				}
				for(int j=0;j<m;++j)
				{
					for(int k=0;k<m;++k)
					{
						dp[i+1][j]+=mem[k]*dp[i][(j+i*k+m)%m];
						dp[i+1][j]%=M;
					}
				}
			}
			printf("%llu\n",dp[m][0]);
		}
	}
}
