#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <bitset>
#include <deque>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <iostream>
#include <algorithm>
#include <functional>
#include <new>
#include <string>

using namespace std;

typedef unsigned long long ULL;

#define gx getchar_unlocked
#define px putchar_unlocked
#define ps putchar_unlocked(' ')
#define pn putchar_unlocked('\n')

//Scanning functions
inline void iscan( int &n ) {	
    register int sign = 1; n = 0;
    register char c = gx();
    while( c < '0' || c > '9' ) {
        if( c == '-' ) sign = -1;
        c = gx();
    }
    while( c >= '0' && c <= '9' )
        n = (n<<3) + (n<<1) + c - '0', c = gx();
    n = n * sign;
}

inline void sscan(char *a) {
    register char c=gx();
    while(c==' '||c=='\n')
        c=gx();
    while(c!=' '&&c!='\n') {
        *a=c;
        a++;
        c=gx();
    }
    *a='\0';
}

//Printing functions
inline void iprint( int n ){
    if(n<0) {
        n=-n;
        px('-');
    }
    register int i=32;
    register char o[21];
    do {
        o[--i] = (n%10) + '0';
        n/=10;
    }while(n);
    do {
        px(o[i]);
    }while(++i<32);
}

inline void lprint( ULL n ){
    if(n<0) {
        n=-n;
        px('-');
    }
    register int i=64;
    register char o[64];
    do {
        o[--i] = (n%10) + '0';
        n/=10;
    }while(n);
    do {
        px(o[i]);
    }while(++i<64);
}

inline void sprint(const char*a){
    const char*p=a;
    while(*p)
        px(*p++);
}

#define N 100005
#define MOD 1000000009

int num[N],n,m,mrj[N];

ULL modexp(ULL a,ULL b) {
    ULL res=1;
    ULL cp=a%MOD;
    while(b>0) {
        if(b%2==1) {
            res=(res*cp)%MOD;
        }
        cp=(cp*cp)%MOD;
        b=b/2;
    }
    return res%MOD;
}

ULL mod_inv(int a)
{

	return (modexp(a,MOD-2));
}

inline void find_ans() {
    int a[m];
    memset(a,0,sizeof(a));
    for(int i=0;i<n;i++) {
        a[((num[i]%m)+m)%m]++;
    }
    ULL at[m][2];
	ULL h[m];
    memset(at,0,sizeof(at));
    at[0][0]=modexp(2,a[0]);
    int nxt=1;
    for(int i=1;i<m;i++) {
		for(int j=0;j<m;j++) 
			at[j][nxt]=at[j][nxt^1];
		memset(h,0,sizeof(h));
		ULL x=1;
		for(int r=1;r<=a[i];r++) 
		{
			x=(x*(a[i]-r+1))%MOD;
			x=(x*mrj[r])%MOD;
			int rm=(i*r)%m;
			h[rm]=(h[rm]+x)%MOD;
		}
		int as=nxt^1;
		for(int j=0;j<m;j++)
		{
			if(h[j]>0)
			{
				for(int k=0;k<m;k++)
				{
					at[(j+k)%m][nxt]=(at[(j+k)%m][nxt] + (at[k][as]*h[j])%MOD )%MOD;
				}
			}
		}
		nxt=nxt^1;
    }
    
    //printf("%lld\n",(at[0][nxt^1]%MOD));
    lprint(at[0][nxt^1]%MOD);pn;
    
}

int main() {
    //ios_base::sync_with_stdio(false);
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    for(int i=0;i<N;i++)
        mrj[i]=mod_inv(i);
    int t;
    //scanf("%d",&t);
    iscan(t);
    while(t--) {
        int q;iscan(n);iscan(q);
        //scanf("%d %d",&n,&q);
        for(int i=0;i<n;i++)
            iscan(num[i]);
            //scanf("%d",&num[i]);
        while(q--) {
            iscan(m);
            //scanf("%d",&m);
            find_ans();
        }
    }
    return 0;
}
