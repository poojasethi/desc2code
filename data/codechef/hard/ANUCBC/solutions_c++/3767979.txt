//Functions and optimisations used from Anudeep2011's submission of Lucky9 from DEC12
//Here is the link for reference : http://www.codechef.com/viewplaintext/1527371


/* Come on Code on!!!!
    Did not declare large arrays due to time limit
*/

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <queue>
#include <ctime>
#include <cassert>
#include <climits>
#include <limits>
using namespace std;

typedef vector <int> vi;
typedef pair< int ,int > ii;

#define S(a) scanf("%d",&(a))
#define P(a) printf("%d",(a))
#define PS printf(" ")
#define NL printf("\n")
#define SL(a) scanf("%lld",&(a))
#define PL(a) printf("%lld",(a))
#define LL long long int
#define FOR(I,A,B) for(int I= (A); I<(B); ++I)
#define all(c) c.begin(), c.end()
#define stop system("pause")
#define pb push_back
#define mp make_pair
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define INDEX(arr,ind)			(lower_bound(all(arr),ind)-arr.begin())


#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()


const LL MOD=1000000009,MAXN=100005,M = 101;

LL expmod(LL a,LL b,LL MOD){
	LL x=1,y=a;
	while(b>0)
	{
		if(b&1) x=(x*y)%MOD;
		y=(y*y)%MOD;
		b>>=1;
	}
	return x;
}
	
LL inv(LL n)
{
	return expmod(n,MOD-2,MOD);
}
	
LL fact[MAXN],ifact[MAXN],imod[MAXN],two_powers[MAXN]; 
LL store[M][M],ncr[M][M];	

int arr[MAXN];
int hash[M];	// for buckets

int main()
{
	//precomputation to prevent TLE
	fact[0]=fact[1]=1;
	FOR(i,2,MAXN)
		fact[i]=((long long)i*fact[i-1])%MOD;
		
	
	
	two_powers[0]=1;two_powers[1]=2;
	FOR(i,2,MAXN)
	   two_powers[i]=(two_powers[i-1]*2)%MOD;
	
    ifact[0]=ifact[1]=imod[0]=imod[1]=1;

	FOR(i,2,MAXN){ 
		imod[i] = (imod[MOD % ((LL)i)] * ((MOD/(LL)i)*(-1)))%MOD + MOD;
		ifact[i] = (ifact[i-1]*imod[i])%MOD;
    }
	//precomputation ends
    int t;
    S(t);
	
    while(t--){
		int N,q;
		S(N);S(q);
		
        FOR(i,0,N)
			S(arr[i]);
		
        while(q--){
			
            int m;
			S(m);
			
            memset(hash,0,sizeof(hash));        //can be reduced to <=m (not full)
			FOR(i,0,N)		//creating the buckets
				hash[(arr[i]%m + m)%m]++;
				
			memset(store,0,sizeof(store));		// may not be required if TLE
			memset(ncr,0,sizeof(ncr));
			
            int start = hash[0];
			store[0][0] = two_powers[start];
			
            FOR(i,1,m){
				int val = hash[i];
				FOR(j,0,val+1){
					int k = j%m;
					if(k<0)
					   k+= m;
					ncr[i][k] +=  ((ifact[j]*ifact[val-j]%MOD)*(fact[val]%MOD))%MOD;
					if(ncr[i][k]>=MOD)
						ncr[i][k] -= MOD;
				}
				/*
				FOR(j,0,m){
                    cout<<ncr[i][j]<<" ";
                }
                */
                
				FOR(j,0,m){
					LL res=0;
					int faltu = j;
					FOR(k,0,m){
						LL FALTU = store[faltu][i-1] * ncr[i][k]%MOD;
						faltu -= i;
						if(faltu<0)
							faltu+=m;
						res += FALTU;
						if(res>=MOD)
							res -= MOD;
					}
					store[j][i] = res;
				}
				
			}
			/*
			FOR(i,0,m){
                FOR(j,0,m){
                    cout<<dp[i][j]<<" ";
                }
            }
            */
			PL(store[0][m-1]);
			NL;
		}
	}	
	return 0;
}
