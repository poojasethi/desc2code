
#include<bits/stdc++.h>
using namespace std;
typedef long long lli;
#define mod 1000000007
#define rep(i, n) for (int i = (0); i < (n); i++)
#define FOR(i, a, b) for (int i = (a); i <= (b); i++)
lli MAX_N = 100050;
 lli  MAX_M = 101;
lli  MOD = 1e9 + 9;

lli fact[100500], ifact[100500];
 lli  arr[100500], cnt[100500];
lli dp[100500][101], choose[105][105];
 
lli pow_mod(lli a, lli b) {
  	lli res = 1;
	while (b) {
	  	if (b & 1) res = (res * a) % MOD;
		a = (a * a) % MOD;
		b >>= 1;
	}
	return res;
}
 
//fact and ifact
void init() {
  	fact[0] = fact[1] = ifact[0] = ifact[1] = 1;
	for(int i=2; i<=100001;i++) {
	  	fact[i] = (fact[i - 1] * i) % MOD;
		ifact[i] = (ifact[i - 1] * pow_mod(i, MOD - 2)) % MOD;
	}
}
 
int C(int n, int k) {
  	return (fact[n] * ifact[k] % MOD) * ifact[n - k] % MOD;
}
lli power(lli a,lli b)
 {
 	if(b==0) return 1;
 	else 
 	{
 		 lli temp=power(a,b/2);
 		 if(b%2==1) return ((temp*temp)%mod*a)%mod;
 		 else return (temp*temp)%mod;
	 }
 }

int main(void) 
{
	init(); // precomputation 
 
  	ios::sync_with_stdio(false);
  	
  	int T;
	cin >> T;
	while (T--) 
	{
	  	int N, Q, M;
		cin >> N >> Q;
		rep (i, N) cin >> arr[i];
		while (Q--) 
		{
		  	cin >> M;
			memset(cnt, 0, sizeof(cnt));
			
			rep (i, N) cnt[((arr[i]) % M + M) % M]++;
 
			memset(choose, 0, sizeof(choose));
			 // pre computation for the chosing 0 to  cnt[i] elements 
			rep (i, M) FOR (j, 0, cnt[i]) {
				 //chosing j elements of value i  out of cnt[i] elements  it will give summession mod value 
					 	 // it will give summession j * i % M     moded  value 
			  	choose[i][j * i % M] = (choose[i][j * i % M] + C(cnt[i], j)) % MOD;
			  //	cout<<choose[i][j * i % M]<<endl;;
			}
 
			memset(dp, 0, sizeof(dp));
			
			dp[0][0] = choose[0][0];
			
			FOR (i, 1, M-1) 
			rep (j, M) 
			rep (k, M) 
			dp[i][j] = (dp[i][j] + dp[i - 1][(j - k + M) % M] * choose[i][k]) % MOD;
 
			cout << dp[M - 1][0] << endl;
		}
	}
	return 0;
}