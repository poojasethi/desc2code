#include<cstdio>
#include<iostream>
#include<cmath>
#define getcx getchar_unlocked
using namespace std;
long long mod =1000000009;
typedef long long ll;
ll fact[100005];
ll ifact[100005];
long long fr[105],cnt[105][105],dp[105][105];
inline void inp_f( int &n )//fast input function
{
   n=0;
   int ch=getcx();int sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   n=n*sign;
}

long long int power1(long long int a,long long int b)
{
	if(b==0)
	return 1;
	long long int y=power1(a,b/2),k,ans;
	ans=(y*y);
	if(ans>=mod)
    {
		k=ans/mod;
		ans-=k*mod;
	}
	if(b%2){
		ans=(ans*a);
		if(ans>=mod)
        {
			k=ans/mod;
			ans-=k*mod;
		}
	}
	return ans;
}
void precompute()
{
	fact[0]=1;
	ifact[0]=1;
	ll i;
	for(i=1;i<=100000;i++)
	{
		fact[i]=(fact[i-1]*i)%mod;
		ifact[i]=(power1(i,mod-2)*ifact[i-1])%mod;
	}
}
ll ncr(ll a,ll b)
{
    ll ans = (fact[a]*ifact[b])%mod;
    ans = (ans*ifact[a-b])%mod;
    return ans;      
}
main()
{
      int tc;
      inp_f(tc);
      //scanf("%d",&tc);
      precompute();
      while(tc--)
      {
          int q;
          int n;
         // scanf("%d %d ",&n,&q);
          inp_f(n);
          inp_f(q);
          int i,j,k,arr[n];
          for( i=0;i<n;i++)
          {
               //scanf("%d",&arr[i]);
               inp_f(arr[i]);
               
          }
          while(q--)
          {
              for( i=0;i<105;i++)
              {
               for(int j=0;j<105;j++)
               dp[i][j]=cnt[i][j]=0;
              }
              for( i=0;i<105;i++)
              {
                  fr[i]=0;
              }
              int m;
              inp_f(m);
              //scanf("%lld",&m);
              for(i=0;i<n;i++)
              {
                  ll temp=(arr[i]%m+m)%m;
                  fr[temp]++;
              }
              cnt[0][0]=power1(2,fr[0]);
              for(i=1;i<m;i++)
              {
                 for(k=0;k<=fr[i];k++)
                 {
                     ll x = (k*i)%m;
                     cnt[i][x]= cnt[i][x]+ncr(fr[i],k);
                     if(cnt[i][x]>=mod)
                     cnt[i][x]=cnt[i][x]-mod;
                    
                 }
              }
              dp[0][0]=1;
              for(i=0;i<m;i++)
              {
                      for(j=0;j<m;j++)
                      {
                            for(k=0;k<m;k++)
                            {
                                    dp[i+1][j]=dp[i+1][j]+(dp[i][(j-k+m)%m]*cnt[i][k]);
                                    if((dp[i+1][j])>=mod)
                                    {
                                       ll ut = dp[i+1][j]/mod;
                                       dp[i+1][j]=dp[i+1][j]-(ut*mod);
                                    }
                                   
                            }
                      }
              }
              printf("%lld \n",dp[m][0]);
              
          }
      }
      return 0;
}
