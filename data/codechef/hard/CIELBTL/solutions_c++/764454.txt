#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <memory>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

typedef long long Int;
typedef pair<int,int> PII;
typedef vector<int> VInt;

#define FOR(i, a, b) for(i = (a); i < (b); ++i)
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i)
#define CLEAR(a, b) memset(a, b, sizeof(a))
#define SIZE(a) int((a).size()) 
#define ALL(a) (a).begin(),(a).end() 
#define PB push_back
#define MP make_pair

#define MAX 32

double R[8][128][128];
double S[8][128][128];

int main()
{
	int n, m, nn, mm, k;
	scanf("%d%d%d%d%d", &n, &m, &mm, &nn, &k);

	int i, j, l, t;
	CLEAR(R, 0);
	CLEAR(S, 0);

	double Min = 0, Max = 1;
	FOR(t, 0, MAX)
	{
		double Mid = (Max + Min)/2;
		CLEAR(S, 0);
		FOR(l, 0, k + 1)
		{
			FOR(i, 1, n + 1)
			{
				int ii = min(nn, i - 1);
				double *S1 = S[l][i + 1];
				double *S2 = S[l][i - ii];
				double a = (ii + 1 + (nn - ii)*Mid);
				FOR(j, 1, m + 1)
				{
					S[l][i + 1][j + 1] = S[l][i + 1][j] + S[l][i][j + 1] - S[l][i][j];
					int jj = min(mm, j - 1);
					double r = S1[j + 1] + S2[j - jj] - S1[j - jj] - S2[j + 1];
					r += (mm - jj)*a;
					r /= (nn + 1)*(mm + 1) - 1;
					
					int ll;
					int x = i;
					int y = j;
					RFOR(ll, l, 0)
					{
						x = (x + 1) >> 1;
						y = (y + 1) >> 1;
						r = max(r, R[ll][x][y]);
					}

					R[l][i][j] = r;
					S[l][i + 1][j + 1] += r;
				}
			}
		}

		if(R[k][n][m] < Mid)
			Max = Mid;
		else
			Min = Mid;
	}

	printf("%.9lf\n", (Max + Min)/2);

	return 0;
}