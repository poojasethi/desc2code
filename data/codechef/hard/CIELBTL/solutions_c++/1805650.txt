#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
double dp[6][222][222],sum[6][222][222];
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int va,vb,sa,sb,m;
	cin >> va >> vb >> sa >> sb >> m;
	double l = 0.0;
	double r = 1.0;
	while(r - l > 1e-6) {
		double mid = (l + r) / 2.0;
		for (int k = 0; k <= m; k++) {
			for (int i = 111 - sb; i <= 111 + va; i++) {
				for (int j = 111 - sa; j <= 111 + vb; j++) {
					sum[k][i][j] = 0.0;
					if (i > 0) sum[k][i][j] += sum[k][i - 1][j];
					if (j > 0) sum[k][i][j] += sum[k][i][j - 1];
					if (i > 0 && j > 0) sum[k][i][j] -= sum[k][i - 1][j - 1];
					if (i <= 111 && j <= 111) {
						dp[k][i][j] = mid;
					} else if (i <= 111 & j > 111) {
						dp[k][i][j] = 0.0;
					} else if (i > 111 & j <= 111) {
						dp[k][i][j] = 1.0;
					} else {
						dp[k][i][j] = sum[k][i][j] - sum[k][i - sb - 1][j] - sum[k][i][j - sa - 1] + sum[k][i - sb - 1][j - sa - 1];
						dp[k][i][j] /= (sa + 1.0) * (sb + 1.0) - 1.0;
						if (k > 0) {
							dp[k][i][j] = max(dp[k][i][j],dp[k - 1][(i - 111 + 1) / 2 + 111][(j - 111 + 1) / 2 + 111]);
						}
					}
					sum[k][i][j] += dp[k][i][j];
				}
			}
		}
		if (dp[m][va + 111][vb + 111] < mid) r = mid; else l = mid;
	}
	printf("%.9lf\n",(l + r) / 2.0);
	return 0;
}
