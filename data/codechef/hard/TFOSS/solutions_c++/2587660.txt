#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <set>

using namespace std;


typedef long long ll;

#define MAXN 100009


struct st {
	int x,y;
}p[MAXN],hull[MAXN],A;

int N,M;

inline ll CCW(st A,st B,st C) {
	return (ll)((ll)((ll)(B.x-A.x)*(ll)(C.y-A.y))-(ll)((ll)(C.x-A.x)*(ll)(B.y-A.y)));
}

inline ll dist(st A,st B) {
	return (ll)((ll)((ll)(A.x-B.x)*(ll)(A.x-B.x))+(ll)((ll)(A.y-B.y)*(ll)(A.y-B.y)));
}

bool cmp(st B,st C) {
	if (CCW(A,C,B)<0)
		return true;
	if (CCW(A,C,B)>0)
		return false;
	
	return dist(A,B)<dist(A,C);
}

void Convex() {
	int ind=1; // the index with the lowest and most left point

	for (int i=2;i<=N;i++) {
		if (p[ind].y>p[i].y||(p[ind].y==p[i].y && p[i].x<p[ind].x))
			ind=i;
	}
	
	swap(p[1],p[ind]);
	A=p[1];
	sort(p+2,p+N+1,cmp);
	M=1;
	hull[1]=A;
	
	for (int i=2;i<=N;i++) {
		while (M>=2 && CCW(hull[M-1],hull[M],p[i])<=0)
			M--;
		hull[++M]=p[i];
	}
}

void Init() {
	for (int i=1;i<=N;i++) {
		hull[i].x=0;
		hull[i].y=0;
		p[i].x=0;
		p[i].y=0;
	}
	M=0;
}

void Read() {
	scanf("%d",&N);
	for (int i=1;i<=N;i++) {
		scanf("%d %d",&p[i].x,&p[i].y);
	}
}

ll ternary(int k) {	
	int lo=1,hi=M;
	while (hi-lo>=3) {
		
		int mid1=(2*lo+hi)/3;
		int mid2=(lo+2*hi)/3;
		
		if (dist(hull[k],hull[mid1]) > dist(hull[k],hull[mid2])) {
			hi=mid2;
		}
		else
			lo=mid1;
	}
	ll  ans=0;
	for (int i=lo;i<=hi;++i)
		ans=max(ans,dist(hull[k],hull[i]));
	return ans;
}

void Solve() {
	ll ans=0;
	if (M==1) {
		printf("0\n");
		return;
	}
	
	if (M==2) {
		printf("%lld\n",dist(hull[1],hull[2]));
		return;
	}
	
	for (int i=1;i<=M;i++)
		ans=max(ans,ternary(i));
	
	printf("%lld\n",ans);
}

int main () {
	//freopen("in.in","r",stdin);
	
	int t;
	scanf("%d",&t);

	while (t--) {
		Read();
		Convex();
		Solve();
		Init();
	}
	
	return 0;
}
