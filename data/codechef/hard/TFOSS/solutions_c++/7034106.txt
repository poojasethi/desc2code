
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct Point
{
    ll first;
    ll second;
    Point() {};
    Point (ll x, ll y) : first(x), second(y) {};
};


Point points[100002];
Point hull[200005];
size_t hullSize;

ll cross(const Point & A, const Point & B)
{
    return A.first * B.second - A.second*B.first;
}

Point operator - (const Point & A, const Point & B)
{
    return Point(A.first - B.first, A.second - B.second);
}

Point operator + (const Point & A, const Point & B)
{
    return Point(A.first + B.first, A.second + B.second);
}

ll dist(const Point & A, const Point & B)
{
    return (A.first-B.first)*(A.first-B.first) + (A.second-B.second)*(A.second-B.second);
}

bool comp(const Point & A, const Point & B)
{
    ll v1 = cross(A-points[0],B-points[0]);
    if (v1 > 0LL)
    {
        return true;
    }
    else if (v1 < 0LL)
    {
        return false;
    }
    else
    {
        return dist(A,points[0]) < dist(B,points[0]);
    }
}

ll hullSearch(int idx, int to)
{
    int l = idx+1;
    int r = to;
    ll s = 0LL;
    while (l <= r)
    {
        int mid = (l+r)>>1;
        ll l1 = dist(hull[mid-1], hull[idx]);
        ll l2 = dist(hull[mid], hull[idx]);
        ll l3 = dist(hull[mid+1], hull[idx]);
        s = max(l1, max(l2,l3));
        if (l1 < l2 && l2 > l3)
        {
            break;
        }
        else if (l1 <= l2 && l2 <= l3)
        {
            l = mid+1;
        }
        else
        {
            r = mid-1;
        }
    }
    return s;
}

int main()
{
    int t;
    scanf("%d", &t);
    while (t--)
    {
        int n;
        scanf("%d", &n);
        int idx = 0;
        for (int i = 0; i < n; ++i)
        {
            ll a,b;
            scanf("%lld%lld",&a,&b);
            points[i] = Point(a,b);
            if (b < points[0].second)
            {
                idx = i;
            }
            else if (b == points[0].second && a < points[0].first)
            {
                idx=i;
            }
        }
        swap(points[0], points[idx]);
        sort(points+1, points+n, comp);
        for (int i = 0; i < n; ++i)
        {
            while (hullSize > 1 && cross(hull[hullSize-1]-hull[hullSize-2], points[i]-hull[hullSize-2]) <= 0LL)
            {
                hullSize -= 1;
            }
            hull[hullSize++] = points[i];
        }
        for (int i = 0; i < hullSize; ++i)
        {
            hull[hullSize+i] = hull[i];
        }
        ll ans = 0LL;
        if (n == 1) hullSize=0;
        for (int i = 0; i < hullSize; ++i)
        {
            ll tmp = hullSearch(i, i+hullSize - 1 );
            if ( tmp > ans) ans = tmp;
        }
        printf("%lld\n", ans);
        hullSize=0;
    }
    return 0;
}