#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
typedef long long LL;
struct point{
	LL x,y;
	point (LL _x,LL _y){
		x=_x;
		y=_y;
	}
};
bool cmp(point a,point b) {
	return a.x <b.x || a.x == b.x && a.y <b.y;
}
bool cw(point a,point b,point c) {
	return a.x * (b.y-c.y) + b.x * (c.y-a.y) + c.x * (a.y-b.y) <0;
}
bool ccw (point a, point b, point c) {
	return a.x * (b.y-c.y) + b.x * (c.y-a.y) + c.x * (a.y-b.y)> 0;
}
void hull(vector<point>&a){
	if(a.size()==1)return;
	sort(a.begin(),a.end(),cmp);
	vector<point>up,down;
	point p1=a[0],p2=a.back();
	up.push_back(p1);
	down.push_back(p1);
	for(int i=1;i<a.size();i++){
		if(i==a.size()-1||cw(p1,a[i],p2)){
			while(up.size()>=2&&!cw(up[up.size()-2],up[up.size()-1],a[i]))up.pop_back();
			up.push_back(a[i]);
		}
		if(i==a.size()-1||ccw(p1,a[i],p2)){
			while(down.size()>=2&&!ccw(down[down.size()-2],down[down.size()-1],a[i]))down.pop_back();
			down.push_back(a[i]);
		}
	}
	a.clear();
	for(int i=0;i<up.size();i++)a.push_back(up[i]);
	for(int i=down.size()-2;i>0;i--)a.push_back(down[i]);
}
LL Dist(point a,point b){
	return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);
}
LL maxDist(vector<point>a){
	if(a.size()==1)return 0;
	hull(a);
	int i=0,j=0;
	LL ans=0;
	while(i<a.size()){
		LL dist=0,next=0;
		for(int k=j;k<2*a.size();k++){
			int id=k%a.size();
			if(Dist(a[id],a[i])>=dist){
				dist=Dist(a[id],a[i]);
				next=k;	
			}
			else break;
		}
		ans=max(ans,Dist(a[next%a.size()],a[i]));
		i++;
		j=next;
	}
	return ans;
}
int main(){
	int T;
	scanf("%d",&T);
	while(T--){
		int n;
		vector<point>a;
		scanf("%d",&n);
		for(int i=0;i<n;i++){
			LL x,y;
			scanf("%lld%lld",&x,&y);
			a.push_back(point(x,y));
		}
		//LL ans1=minDist(a);
		LL ans2=maxDist(a);
		cout<<ans2<<endl;
	}
	return 0;
	}
