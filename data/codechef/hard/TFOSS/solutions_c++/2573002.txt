#include<stdio.h>
#include<stack>
#include<iostream>
#include<cstring>
#include<algorithm>
#include<cstdlib>

using namespace std;

struct point{
	int x;
	int y;
};

point p0;
point r[100015],l[100015],st[100015];


point nexttotop(stack<point> &s)
{
	point p= s.top();
	s.pop();
	point ret= s.top();
	s.push(p);
	return ret;
}

unsigned long long dist(point p1, point p2)
{
	unsigned long long v= ((long long)(p1.x-p2.x)*(p1.x-p2.x))+((long long)(p1.y-p2.y)*(p1.y-p2.y));
	return v;
}

int orientation(point p, point q, point r)
{
	long long val= (((long long)(q.y-p.y)*(r.x-q.x))-((long long)(q.x-p.x)*(r.y-q.y)));

	if(val==0) return 0;
	return (val>0)?1:2;
}

int tsearch(point p[], int myp,int size)
{
	int i=0;int j=size-1;
	unsigned long long dis=0;
	int idx,k,g;
	while(j-i>=3)
	{
		k=(2*i+j)/3;
		g=(2*j+i)/3;
		if(dist(p[myp],p[k]) < dist(p[myp],p[g]))
			i=k;
		else j=g;
	}
	idx = i;
	dis = dist(p[myp],p[i]);
	for(k=i+1;k<=j;k++)
	{
		if(dist(p[myp],p[k])>dis)
		{
			dis=dist(p[myp],p[k]);
			idx=k;
		}
	}
	return idx;
}		

int compare(const void *vp1, const void *vp2)
{
	point *p1= (point *)vp1;
	point *p2= (point *)vp2;
	
	int o=orientation(p0,*p1,*p2);
	
	if(o==0)
		return (dist(p0,*p1) >= dist(p0,*p2))?-1:2;
	
	return (o==2)?-1:1;
}

void convexhull(point p[], int n)
{
	int ymin=p[0].y;
	int min=0,i,y;
	for(i=1;i<n;i++)
	{
		y=p[i].y;
		if((y<ymin) || ((y==ymin) && (p[i].x<p[min].x)))
		{
			ymin=y; min=i;
		}
	}
	
	point tmp;
	tmp.x=p[min].x;
	tmp.y=ymin;
	p[min].x=p[0].x;
	p[min].y=p[0].y;
	p[0].x=tmp.x;
	p[0].y=tmp.y;
	
	p0=p[0];
	
	qsort(&p[1], n-1, sizeof(point), compare);
	
	st[0]=p[0];
	st[1]=p[1];
	st[2]=p[2];
	int f=3;

	for(i=3; i<n; i++)
	{
		while(f>1 && orientation(st[f-2],st[f-1],p[i]) != 2)
		f--;

		st[f]=p[i];
		f++;
	}
	int ll= f;
	i=0;
	while(i<f)
	{
		l[ll-i-1]=st[i];
		//cout << l[ll-i].x << " " << l[ll-i].y << "\n";
		i++;
	}
	unsigned long long ans=0;
	for(i=0;i<ll;i++)
	{
		ans=max(ans,dist(l[i],l[tsearch(l,i,ll)]));
	}
	printf("%llu\n",ans);
}

int main()
{
	int t,i,j,n;
	unsigned long long ans;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&n);
		for(i=0;i<n;i++)
		{
			scanf("%d %d", &r[i].x, &r[i].y);
		}
		if(n==1) printf("0\n");
		else if (n==2)
		{
			ans=dist(r[0],r[1]);
			printf("%llu\n",ans);
		}
		else
		{
			convexhull(r,n);
		}
	}
	return 0;
}

