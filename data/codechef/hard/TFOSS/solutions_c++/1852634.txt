#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<cassert>
using namespace std;

typedef long long LL;

const int maxN = 100005;
int N;
int t;

struct point
{
  LL x;
  LL y;
  point(){}
  point(LL a , LL b)
  {
     x = a;
     y = b;
  }
  bool operator <(const point &p)const
  {
  return x < p.x || (x == p.x && y < p.y);
  }
   bool operator ==(const point &p)const
  {
  return (x == p.x &&  y == p.y);
  }
};

struct antipair
{
    point p1;
    point p2;
    antipair(){}
    antipair(point a, point b)
    {
        p1 = a;
        p2 = b;
    }
};

vector<point>P;//stores input
vector<point>H;//will store the convex hull (last entry is same as first entry)
vector<antipair>A;//will store antipodal pairs
void print(const point &p)
{
    cout<<p.x<<" "<<p.y<<endl;
}
LL cross(const point &O, const point &A, const point &B)
{
   // print(O);
   // print(A);
   // print(B);
    return (A.x - O.x)*(B.y - O.y) - (A.y - O.y)*(B.x - O.x);
}
void print(const vector<point> &v)
{
    for(int i=0; i<v.size(); i++)
    {
        cout<<v[i].x<<" "<<v[i].y<<endl;
    }
    cout<<endl;
}
void print(const vector<antipair> &v)
{
    for(int i=0; i<v.size(); i++)
    {
        cout<<v[i].p1.x<<" "<<v[i].p1.y<<" "<<v[i].p2.x<<" "<<v[i].p2.y<<endl;
    }
    cout<<endl;
}


void buildconvexhull()
{
        int k = 0;
        H.resize(2*N);
        // Sort points lexicographically
        sort(P.begin(), P.end());
       // print(P);
       // Build lower hull
        for (int i = 0; i < N; i++) {

                //cout<<"cross "<<cross(H[k-2], H[k-1], P[i])<<endl;
                while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0)
                {
                 // cout<<"cross "<<cross(H[k-2], H[k-1], P[i])<<endl;
                  k--;
                }
                H[k++] = P[i];
               // cout<<"i "<<i<<endl;
               // print(H);
        }

        // Build upper hull
        for (int i = N-2, t = k+1; i >= 0; i--) {
                while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;
                H[k++] = P[i];
        }

        H.resize(k);
}
void buildantipodalpairs()
{
   // A.push_back(antipair(H[0], H[H.size()-2]));
    int m = H.size() - 1;
    int k = 2;
    while(cross(H[m-1], H[1-1], H[k+1-1])> cross(H[m-1], H[1-0], H[k-1]))
    {
        k++;
    }
    //cout<<"first point"<<endl;
    //cout<<H[k-1].x<<" "<<H[k-1].y<<endl;
    int i=1, j=k;
    point p0, p1;
    while(i<=m && j<=m)
    {
        A.push_back(antipair(H[i-1], H[j-1]));
        p0  = H[i-1];
        p1 = H[j-1];
       // print(A);
        while(cross(H[i-1], H[i+1-1], H[j+1-1])> cross(H[i-1], H[i+1-1], H[j-1]) && j<m)
        {
           // if(!(H[i-1]== p0 && H[j-1]== p1))
            A.push_back(antipair(H[i-1], H[j-1]));
           // cout<<"i "<<i<<"j "<<j<<endl;
           // print(A);
            j++;
        }
        i++;
    }

}
void buildantipodalpairs2()
{
   // A.push_back(antipair(H[0], H[H.size()-2]));
    int n = H.size() - 1;
    int k = 0;
    int j = 2;

    do
    {
      while(cross( H[(j+1)%n], H[k], H[(k+1)%n])> cross(H[j], H[k], H[(k+1)%n]))
    {
        j = (j+1)%n;
    }
     A.push_back(antipair(H[k], H[j]));
      A.push_back(antipair(H[(k+1)%n], H[j]));
      if(cross( H[(j+1)%n], H[k], H[(k+1)%n])== cross(H[j], H[k], H[(k+1)%n]))
      {
          A.push_back(antipair(H[k], H[(j+1)%n]));
      A.push_back(antipair(H[(k+1)%n], H[(j+1)%n]));
      }
    k = (k+1)%n;
    }
    while(k!=0);
}
LL dist(const point &p1, const point & p2)
{
    return (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y);
}

void findmaxdiameter()
{
    if(H.size()==1)printf("0\n");
    if(H.size()==2)printf("%lld\n", dist(H[0], H[1]));
    if(H.size()>2)
    {
    LL m = -1;
    for(int i=0; i<A.size(); i++)
    {
        LL x = dist(A[i].p1, A[i].p2);
        if(x>m)
        {m = x;

       // cout<<A[i].p1.x<<" "<<A[i].p1.y<<" "<<A[i].p2.x<<" "<<A[i].p2.y<<" "<<m<<endl;

        }
    }
    assert(m!= -1);

    printf("%lld\n", m);
    }
}


void solve()
{

LL xcor, ycor;
P.clear();
H.clear();
A.clear();
scanf("%d", &N);
for(int i =0; i<N; i++)
{
    scanf("%lld%lld", &xcor, &ycor);
    P.push_back(point(xcor, ycor));
}
//print(P);
buildconvexhull();
//print(H);
//cout<<endl;
if(H.size()>2)
buildantipodalpairs2();
//print(A);
findmaxdiameter();
}

int main()
{

    #ifndef ONLINE_JUDGE
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif

    scanf("%d", &t);
    while(t--)
    {
           solve();
    }
}
