#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long ll;

#define MAXN 100009

inline int getint() {
	int c = 'a';
	while (!(c >= '0' && c <= '9') && c != '-') c = getchar_unlocked();
	int c2;
	if (c != '-')
		c2 = c;
	else
		c2 = '0';
	int res = 0;
	while((c2 >= '0' && c2 <= '9'))	{
		res = (res << 3) + (res << 1) + (c2 - '0');
		c2 = getchar_unlocked();
	}
	return res * (c == '-' ? -1 : 1);
}

struct st {
	int x,y;
}p[MAXN],hull[MAXN],A;

int N,M;

inline ll CCW(st A,st B,st C) {
	return (ll)((ll)((ll)(B.x-A.x)*(ll)(C.y-A.y))-(ll)((ll)(C.x-A.x)*(ll)(B.y-A.y)));
}

inline ll dist(st A,st B) {
	return (ll)((ll)((ll)(A.x-B.x)*(ll)(A.x-B.x))+(ll)((ll)(A.y-B.y)*(ll)(A.y-B.y)));
}

inline bool cmp(st B,st C) {
	if (CCW(A,C,B)<0)
		return true;
	if (CCW(A,C,B)>0)
		return false;
	
	return dist(A,B)<dist(A,C);
}

void Read() {
	scanf("%d",&N);
	for (int i=1;i<=N;i++) {
		p[i].x=getint();
		p[i].y=getint();
	}
}

inline void Convex() {
	int ind=1; // the index with the lowest and most left point.


	for (int i=2;i<=N;i++) {
		if (p[ind].y>p[i].y||(p[ind].y==p[i].y && p[i].x<p[ind].x))
			ind=i;
	}
	
	swap(p[1],p[ind]);
	A=p[1];
	sort(p+2,p+N+1,cmp);
	M=1;
	hull[1]=A;
	
	for (int i=2;i<=N;i++) {
		while (M>=2 && CCW(hull[M-1],hull[M],p[i])<=0)
			M--;
		hull[++M]=p[i];
	}
}

inline ll Calliper() {
	
	if (M==1)
		return 0;
	if (M==2) 
		return dist(hull[1],hull[2]);
	
	int k=2;
	ll best=0;
	
	while ( (k<M) && abs(CCW(hull[M],hull[1],hull[k+1])) > abs(CCW(hull[M],hull[1],hull[k])) )
		k++;
	
	int j=k;
	
	for (int i=1;i<=k;i++) {
		if (dist(hull[j],hull[i]) > best)
			best=dist(hull[j],hull[i]);
		
			while ( (j<M) && abs(CCW(hull[i],hull[i+1],hull[j+1])) > abs(CCW(hull[i],hull[i+1],hull[j])))
				j++;
				if (dist(hull[i],hull[j])>best) 
					best=dist(hull[i],hull[j]);
	}
	return best;
}

void Solve() {
	Convex();
	printf("%lld\n",Calliper());
}

inline void Init() {
	for (int i=1;i<=N;i++) {
		hull[i].x=0;
		hull[i].y=0;
		p[i].x=0;
		p[i].y=0;
	}
	M=0;
}

int main () {
	//freopen("in.in","r",stdin);
	
	int t;
	scanf("%d",&t);

	while (t--) {
		Read();
		Solve();
		Init();
	}
	
	return 0;
}
