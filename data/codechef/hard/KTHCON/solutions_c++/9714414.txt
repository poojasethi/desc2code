#include <iostream>
#include <stack>
#include <vector>
#include <set>
#include <queue>
#include <stdio.h>
#include <algorithm>
#include <string>
#include <map>
using namespace std;
 
#define ll long long
#define ii pair<ll,ll>
#define ff first
#define ss second

vector<ii> outerhull;
vector<ii> innerhull;
map<ii,ll> visited;

bool cmp (ii a, ii b) {
     return a.ff < b.ff || a.ff == b.ff && a.ss < b.ss;
}

bool cw (ii a, ii b, ii c) {
     return a.ff*(b.ss-c.ss)+b.ff*(c.ss-a.ss)+c.ff*(a.ss-b.ss) < 0;
}

bool ccw (ii a, ii b, ii c) {
     return a.ff*(b.ss-c.ss)+b.ff*(c.ss-a.ss)+c.ff*(a.ss-b.ss) > 0;
}

void convex_hull (vector<ii> & a) {
     if (a.size() < 3)  return;
     sort (a.begin(), a.end(), &cmp);
     ii p1 = a[0],  p2 = a.back();
     vector<ii> up, down;
     up.push_back (p1);
     down.push_back (p1);
     for (size_t i=1; i<a.size(); ++i) {
          if (i==a.size()-1 || cw (p1, a[i], p2)) {
               while (up.size()>=2 && !cw (up[up.size()-2], up[up.size()-1], a[i]))
                    up.pop_back();
               up.push_back (a[i]);
          }
          if (i==a.size()-1 || ccw (p1, a[i], p2)) {
               while (down.size()>=2 && !ccw (down[down.size()-2], down[down.size()-1], a[i]))
                    down.pop_back();
               down.push_back (a[i]);
          }
     }
     a.clear();
     for (size_t i=0; i<up.size(); ++i){
          visited[up[i]]=1;
          a.push_back (up[i]);
     }
     for (size_t i=down.size()-2; i>0; --i){
          visited[down[i]]=1;
          a.push_back (down[i]);
     }
}

ll triangle_area(ii a, ii b, ii c){
     ll area=a.ff*b.ss-a.ss*b.ff + b.ff*c.ss-b.ss*c.ff + c.ff*a.ss-c.ss*a.ff;
     return abs(area);
}

ll polygon_area(vector<ii> hull){
     ll area=0;
     for(ll i=0;i<hull.size();i++){
          area+=hull[i].ff*hull[(i+1)%hull.size()].ss - hull[i].ss*hull[(i+1)%hull.size()].ff;
     }
     return abs(area);
} 

int main() {
     //freopen ("input3.txt","r",stdin);  
     ll i,j,t,n,m,it,outerhull_pointer,innerhull_pointer;
     scanf("%lld",&t);
     while(t--){
          outerhull.clear();
          innerhull.clear();
          visited.clear();
          scanf("%lld",&n);
          ii points[n];
          for(i=0;i<n;i++){
               scanf("%lld %lld",&points[i].ff,&points[i].ss);
               outerhull.push_back(points[i]);
          }
          convex_hull(outerhull);
          it=0;
          for(i=0;i<n;i++){
               if(visited[points[i]]==0){
                    innerhull.push_back(points[i]);
               }
          }
          if(outerhull.size()==n){
               printf("-1\n");
               continue;
          }
          convex_hull(innerhull);

         // for(i=0;i<outerhull.size();i++)
         //       cout<<outerhull[i].ff<<" "<<outerhull[i].ss<<endl;
         //  cout<<endl;
         // for(i=0;i<innerhull.size();i++)
         //       cout<<innerhull[i].ff<<" "<<innerhull[i].ss<<endl;
          
          ll triangle_area_mini=(ll)1e18;
          innerhull_pointer=0;
          ll curr_area=(ll)1e18;
          for(outerhull_pointer=0;outerhull_pointer<outerhull.size();outerhull_pointer++){
                curr_area=triangle_area(outerhull[outerhull_pointer], outerhull[(outerhull_pointer+1)%outerhull.size()], innerhull[(innerhull_pointer)%innerhull.size()]);
               while(1){
                    ll new_area=triangle_area(outerhull[outerhull_pointer], outerhull[(outerhull_pointer+1)%outerhull.size()], innerhull[(innerhull_pointer+1)%innerhull.size()]);
                    if(new_area<curr_area){
                         curr_area=new_area;
                         innerhull_pointer++;
                    }
                    else 
                         break;
               }
               triangle_area_mini=min(triangle_area_mini,curr_area);
          }
          ll area=polygon_area(outerhull);
          cout<<area-triangle_area_mini<<endl;
     }
    return 0;
}