//---------------------------JUGNU: LET YOUR LIGHT SHINE---------------------------//
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define pf push_front
#define sz size
#define mk make_pair
#define ln length
#define fr(i,a,b) for(i=a;i<b;i++)
#define fre(i,a,b) for(i=a;i<=b;i++)
#define frr(i,a,b) for(i=a;i>=b;i--)
#define sc(a) scanf("%lld",&a)
#define sm(a,b) scanf("%lld%lld", &a, &b)
#define pr(a) printf("%lld\n", a)
#define pm(a,b) printf("%lld %lld\n", a, b)
#define cn(a) cin >> a
#define ct(a) cout << a << endl
#define isset(x,i) ((x>>i)&1)
#define INF 1000000000000000000LL
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);

#define trace1(x)       cerr << #x << " : " << x << endl;
#define trace2(x, y)    cerr << #x << " : " << x << " | "<< #y << " : " << y << endl;
#define trace3(x, y, z) cerr << #x << " : " << x << " | "<< #y << " : " << y << " | "<< #z << " : " << z << endl;
#define cline printf("---------------------------\n");
using namespace std;

#define REMOVE_REDUNDANT
typedef long long int T;
#define  EPS  1e-7
struct PT { 
  T x, y; 
  PT() {} 
  PT(T x, T y) : x(x), y(y) {}
  bool operator<(const PT &rhs) const { return make_pair(y,x) < make_pair(rhs.y,rhs.x); }
  bool operator==(const PT &rhs) const { return make_pair(y,x) == make_pair(rhs.y,rhs.x); }
};

T cross(PT p, PT q) { return p.x*q.y-p.y*q.x; }
T area2(PT a, PT b, PT c) { return cross(a,b) + cross(b,c) + cross(c,a); }

#ifdef REMOVE_REDUNDANT
bool between(const PT &a, const PT &b, const PT &c) {
  return (abs(area2(a,b,c)) < 0 && (a.x-b.x)*(c.x-b.x) <= 0 && (a.y-b.y)*(c.y-b.y) <= 0);
}
#endif

void ConvexHull(vector<PT> &pts) {
  sort(pts.begin(), pts.end());
  pts.erase(unique(pts.begin(), pts.end()), pts.end());
  vector<PT> up, dn;
  for (int i = 0; i < pts.size(); i++) {
    while (up.size() > 1 && area2(up[up.size()-2], up.back(), pts[i]) >= 0) up.pop_back();
    while (dn.size() > 1 && area2(dn[dn.size()-2], dn.back(), pts[i]) <= 0) dn.pop_back();
    up.push_back(pts[i]);
    dn.push_back(pts[i]);
  }
  pts = dn;
  for (int i = (int) up.size() - 2; i >= 1; i--) pts.push_back(up[i]);
  
#ifdef REMOVE_REDUNDANT
  if (pts.size() <= 2) return;
  dn.clear();
  dn.push_back(pts[0]);
  dn.push_back(pts[1]);
  for (int i = 2; i < pts.size(); i++) {
    if (between(dn[dn.size()-2], dn[dn.size()-1], pts[i])) dn.pop_back();
    dn.push_back(pts[i]);
  }
  if (dn.size() >= 3 && between(dn.back(), dn[0], dn[1])) {
    dn[0] = dn.back();
    dn.pop_back();
  }
  pts = dn;
#endif
}

ll ComputeSignedArea(const vector<PT> &p) {
  ll area = 0LL;
  for(int i = 2; i < p.size(); i++) {
    area = area + abs(area2(p[0], p[i], p[i-1]));
  }
  return area;
}

vector<PT> outerConvex, InnerConvex;
set<PT> S; 
set<PT> :: iterator it;
int main()
{
	ll i, j, t, n, m, k, l, r, mini,cnt, maxi, temp, flag, result, idx, curr, start, next;
	sc(t);
	while(t--)
	{
		outerConvex.clear();
		InnerConvex.clear();
		S.clear();
		sc(n);
		fr(i, 0, n)
		{
			sm(l, r);
			PT bar(l, r);
			outerConvex.pb(bar);
			S.insert(bar);
		}
		ConvexHull(outerConvex); 
		fr(i, 0, outerConvex.sz()) S.erase(outerConvex[i]);
		for(it = S.begin(); it != S.end(); ++it) InnerConvex.pb(*it);
		ConvexHull(InnerConvex);
		l = outerConvex.sz();
		r = InnerConvex.sz();
		if(r == 0LL) printf("-1\n");
		else
		{
			mini = INF;
			m = 0;
			fr(i, 0, outerConvex.sz())
			{
				start = m;
				curr = area2(outerConvex[i], outerConvex[(i+1) % l], InnerConvex[m]);
				mini = min(mini, curr);
				while(true)
				{
					next = area2(outerConvex[i], outerConvex[(i+1) % l], InnerConvex[(m+1) % r]);
					if(next<= curr)
					{
						curr = next;
						m = (m + 1) % r;
					}
					else break;
					if(m == start) break;
				}
				mini = min(mini, curr);
			}
			pr(ComputeSignedArea(outerConvex) - mini);
		}	
	}
return 0;
}
