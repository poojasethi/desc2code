#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define p(n) printf("%d\n",n)

#define ll long long
#define pb push_back
#define mp make_pair
#define N 300011
#define LN 21
using namespace std;


vector<pair<ll,ll> >ConvexHull;
vector<pair<ll,ll> >input;
vector<pair<ll,ll> >insideHull;
vector<pair<ll,ll> >inside;
set<pair<ll,ll> >exist;


ll findArea(){
    ll ans = 0;
    int sz = ConvexHull.size();
   for(int i=0;i<ConvexHull.size();++i){
      ll first = ConvexHull[i].first;
      first*=ConvexHull[(i+1)%sz].second;
      ll second = ConvexHull[(i+1)%sz].first;
      second*=ConvexHull[i].second;
      ans = ans + (first-second);
   }
   ans = abs(ans);
   return ans;
}


ll triangle(pair<ll,ll>a,pair<ll,ll>b,pair<ll,ll>c){
   ll area = 0;
   area = a.first*b.second - a.second*b.first + b.first*c.second-c.first*b.second+c.first*a.second-a.first*c.second;
   area = abs(area);
   return area;
}

typedef pair<long long, long long> point;

bool cw(const point &a, const point &b, const point &c) {
    return (b.first - a.first) * (c.second - a.second) - (b.second - a.second) * (c.first - a.first) < 0;
}

vector<point> ConstructHull(vector<point> p) {
    int n = (int)p.size();
    if (n <= 1)
        return p;
    int k = 0;
    sort(p.begin(), p.end());
    vector<point> q(n * 2);
    for (int i = 0; i < n; q[k++] = p[i++])
        for (; k >= 2 && !cw(q[k - 2], q[k - 1], p[i]); --k)
            ;
    for (int i = n - 2, t = k; i >= 0; q[k++] = p[i--])
        for (; k > t && !cw(q[k - 2], q[k - 1], p[i]); --k)
            ;
    q.resize(k - 1 - (q[0] == q[1]));
    return q;
}

int main()
{
    int t,n,i;
    int Outsz , Insz;
    ll x,y;
    cin>>t;
    while(t--){
        s(n);
        input.clear();
        ConvexHull.clear();
        exist.clear();
        insideHull.clear();
        inside.clear();
        for(i=0;i<n;++i){
           sl(x);sl(y);
           input.pb(make_pair(x,y));
        }
        ConvexHull = ConstructHull(input);
        for(i=0;i<ConvexHull.size();++i)
            exist.insert(ConvexHull[i]);
        if(ConvexHull.size()==n)
            printf("-1\n");
        else{
           ll totalarea = findArea();
           for(i=0;i<n;++i)
                if(exist.find(input[i])==exist.end())
                    inside.pb(input[i]);
           insideHull = ConstructHull(inside);
           Outsz = ConvexHull.size();
           Insz  = insideHull.size();
           ll minarea = LONG_LONG_MAX;
           int j = 0;
           for(i=0;i<ConvexHull.size();++i){
              ll curr = LONG_LONG_MAX;
              int start = j;
              while(triangle(ConvexHull[i],ConvexHull[(i+1)%Outsz],insideHull[j])<=curr){
                 curr = triangle(ConvexHull[i],ConvexHull[(i+1)%Outsz],insideHull[j]);
                 j = (j+1)%Insz;
                 if(start==j)
                    break;
              }
              j = (j-1+Insz)%Insz;
              minarea = min(minarea,curr);
           }
           printf("%lld\n",totalarea-minarea);
        }
    }
    return 0;
}
