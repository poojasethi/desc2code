#include <bits/stdc++.h>
using namespace std;

#define DEBUG(x) 	cerr << #x << " = " << x << endl;
#define INPUT		freopen("Data.inp", "r", stdin);
#define OUTPUT		freopen("Data.out", "w", stdout);

typedef long long LL;
typedef pair<int, int> II;

const int N = (int) 2e5 + 10;
const int C = 30;
int n, q, st[N * 5];
char S[N];

bool CompareSuffix(int x, int y) {
	for (int i = 0; i < C; ++i) {
		if (S[x + i] < S[y + i]) return true;
		if (S[x + i] > S[y + i]) return false;
	}
	return false;
}

void Build(int k, int l, int r) {
	if (l == r) { st[k] = l; return; }
	int m = (l + r) >> 1;
	Build(k << 1 | 0, l, m);
	Build(k << 1 | 1, m + 1, r);
	if (CompareSuffix(st[k << 1], st[k << 1 | 1])) 
		st[k] = st[k << 1]; 
	else 
		st[k] = st[k << 1 | 1];
}

void Update(int k, int l, int r, int i, int j) {
	if (l >= r || l > j || r < i) return;
	int m = (l + r) >> 1;
	Update(k << 1, l, m, i, j);
	Update(k << 1 | 1, m + 1, r, i, j);
	if (CompareSuffix(st[k << 1], st[k << 1 | 1])) 
		st[k] = st[k << 1]; 
	else 
		st[k] = st[k << 1 | 1];	
}

int Query(int k, int l, int r, int i, int j) {
	if (i == l && j == r) return st[k];
	int m = (l + r) >> 1;
	if (j <= m) return Query(k << 1, l, m, i, j);
	if (i  > m) return Query(k << 1 | 1, m + 1, r, i, j);
	int x = Query(k << 1, l, m, i, m);
	int y = Query(k << 1 | 1, m + 1, r, m + 1, j);
	if (CompareSuffix(x, y)) return x;
	return y;
}

char CharAt(int l, int r, int x, int p) {
	if (x + p - 1 <= r) return S[x + p - 1];
	return S[x + p - 1 - r + l - 1];
}

bool CompareCycle(int l, int r, int x, int y) {
	for (int i = 1; i <= min(C, r - l + 1); ++i) {
		if (CharAt(l, r, x, i) < CharAt(l, r, y, i)) return true;
		if (CharAt(l, r, x, i) > CharAt(l, r, y, i)) return false;
	}
	return false;
}

int main() {
	scanf("%s", S + 1); n = strlen(S + 1);
	for (int i = 1; i <= C; ++i) S[i + n] = '@';
	scanf("%d", &q); Build(1, 1, n);
	while (q--) {
		int k; scanf("%d", &k);
		if (k == 0) {
			int i; char T[10]; scanf("%d%s", &i, T);
			S[i] = T[0];
			Update(1, 1, n, max(1, i - C + 1), i);
		}
		else {
			int l, r, p; scanf("%d%d%d", &l, &r, &p);
			int x = Query(1, 1, n, l, max(l, r - C));
			for (int i = max(l, r - C + 1); i <= r; ++i)
				if (CompareCycle(l, r, i, x)) x = i;
			printf("%c\n", CharAt(l, r, x, p));
		}
	}
	return 0;
}