def stablemp():
    from sys import stdin
    from cStringIO import StringIO
    readln = iter(StringIO(stdin.read())).next
    matches = StringIO()
    t = int(readln())
    for _ in xrange(t):
        n = int(readln())
        xrn = range(n)
        rankf = [[-1 for _ in xrn] for _ in xrn]
        for _ in xrn:
            lnsplit = map(int, readln().split())
            i, prefs = lnsplit[0] - 1, map(lambda x: x - 1, lnsplit[1:])
            ranks = [-1 for _ in xrn]
            for idx, p in enumerate(prefs):
                ranks[p] = idx
            rankf[i] = ranks
        prefm = [[-1 for _ in xrn] for _ in xrn]
        for _ in xrn:
            lnsplit = map(int, readln().split())
            i, prefs = lnsplit[0] - 1, map(lambda x: x - 1, lnsplit[1:])
            prefm[i] = prefs
        c = [0 for _ in xrn]
        p = [-1 for _ in xrn]
        s = range(n)
        while s:
            i = s.pop()
            k = prefm[i][c[i]]
            if p[k] == -1 or rankf[k][i] < rankf[k][p[k]]:
                if p[k] >= 0:
                    s.append(p[k])
                    c[p[k]] += 1
                p[k] = i
            else:
                s.append(i)
                c[i] += 1
        for w, m in enumerate(p):
            matches.write("{0} {1}\n".format(m + 1, w + 1))
    print matches.getvalue()

stablemp()
#if __name__ == "__main__":
#    stablemp()