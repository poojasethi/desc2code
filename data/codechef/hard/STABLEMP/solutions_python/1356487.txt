import sys
import operator
from collections import defaultdict

def stablemp(gprefs, bprefs):
    final = {}
    freeb = set(gprefs)
    freeg = set(gprefs)
    while freeb:
        m = freeb.pop()
        w = max(bprefs[m].iteritems(), key=operator.itemgetter(1))[0]
        bprefs[m].pop(w)
        if w in freeg:
            final[w] = m
            freeg.remove(w)
        elif w in final:
            #if m==3: print gprefs[w][m], gprefs[w][final[w]]
            if gprefs[w][m] < gprefs[w][final[w]]:
                freeb.add(m)
            else:
                t = final[w]
                final[w] = m
                freeb.add(t)
    ret = {}
    for key, value in final.items(): ret[value] = key
    return ret


def main():
    s = sys.stdin.readline
    t = int(s())
    for i in range(t):
        gprefs = {}
        bprefs = {}
        n = int(s())
        for j in range(1, n+1):
            a = map(int, s().split())[1:]
            b = range(n)[::-1]
            gprefs[j] = dict(zip(a, b))
        for j in range(1, n+1):
            a = map(int, s().split())[1:]
            b = range(n)[::-1]
            bprefs[j] = dict(zip(a, b))
        ans = stablemp(gprefs, bprefs)
        for i in sorted(ans):
            print i, ans[i]
if __name__ == '__main__':
    main()









