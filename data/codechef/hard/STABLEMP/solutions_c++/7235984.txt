//Stable Marriage problem :-
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<utility>
#include<cstring>
#include<cmath>
#define LL long long int
#define mod 1000000007
#define vi vector<int>
#define vvi vector < vi >
#define pii pair<int,int>
#define all(c) c.begin(),c.end()
#define sf(x) scanf("%d",&x);
#define sf2(x,y) scanf("%d%d",&x,&y);
#define mem(a,val) memset(a,val,sizeof(a))
#define nl printf("\n");
#define pb push_back
#define mp make_pair
//#define f first
//#define s second
#define cf I64
using namespace std;
int readint()
{   int t=0;
    char c;
    c=getchar_unlocked();
    while(c<'0' || c>'9')
        c=getchar_unlocked();
    while(c>='0' && c<='9')
    {
        t=(t<<3)+(t<<1)+c-'0';
        c=getchar_unlocked();
    }
    return t;
}
int main()
{	int t,i,j,N,m,x,ans,sum,men,women;
	//sf(t);
	t=readint();
	while(t--)
	{	//sf(N);
		N=readint();
		int prefer[2*N+5][N+5],wprefer[N+5][N+5],count=N,wpartner[N+5];
		bool mfree[N+5];
		mem(wpartner,-1);
		mem(mfree,false);
		//Women preference list :
		for(i=N+1;i<=2*N;i++)
		{	//cin>>x;
			x=readint();
			for(j=1;j<=N;j++)
			{	//cin>>men;
				men=readint();
				prefer[i][j]=men;
				wprefer[i-N][men]=j;
			}
		}
		//Men preference list :
		for(i=1;i<=N;i++)
		{	//cin>>x;
			x=readint();
			for(j=1;j<=N;j++)
			{	//cin>>women;
				women=readint();
				prefer[i][j]=women;
			}
		}
		while(count>0)
		{	//Find free men
			for(m=1;m<=N;m++)
				if(!mfree[m])
					break;
			//printf("free men %d\n",m);		
			//m is free men
			//check for each his prefernc with whom he can be paired
			for(i=1;i<=N;i++)
			{	if(wpartner[prefer[m][i]]==-1)  //women is free
				{	//printf("yes\n");
					wpartner[prefer[m][i]]=m;
					mfree[m]=true;
					count--;
					break;
				}
				else if(wprefer[prefer[m][i]][wpartner[prefer[m][i]]]>wprefer[prefer[m][i]][m])
				{	//printf("no\n");
					mfree[m]=true;
					mfree[wpartner[prefer[m][i]]]=false;
					wpartner[prefer[m][i]]=m;
					break;
				}
			}		
		}
		//sort(wpartner+1,wpartner+N+1);
		for(i=1;i<=N;i++)
			printf("%d %d\n",wpartner[i],i);
	}
 
	return 0;
}
 