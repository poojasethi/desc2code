#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

inline void fastread(int* a)
{
  register char c = 0;
  while (c < 33)
    c = getchar();
  *a = 0;
  while (c > 33)
  {
    *a = (*a <<1)+(*a<<3) + c - '0';
    c = getchar();
  }
}

int womenPref[501][501]; // For each woman we have an array of ratings for each man from [1, N] interval (1 being the better than N)
int menPref[501][501]; // For each man we have an array of women indices in decreasing rating

int womenPartner[501];
int menPartner[501];
int menRating[501]; // Starts from 1, means the man is looking for hhe best woman, failing to find, falls back to 2, then to 3, etc. until N

int N;

int menRatingSrc[501];

int main()
{
  int T;
  fastread(&T);

  for(int i = 1; i <= 500; ++i)
    menRatingSrc[i] = 1;

  int dummy;
  while(T--)
  {
    fastread(&N);

    // Read women preferences
    for(int i = 1; i <= N; ++i)
    {
      fastread(&dummy);
      int *pn = womenPref[i];
      for(int j = 1; j <= N; ++j)
      {
        fastread(&dummy);
        pn[dummy] = j;
      }
    }

    // Read men preferences
    for(int i = 1; i <= N; ++i)
    {
      fastread(&dummy);
      int *pn = menPref[i] + 1;
      int *pnend = pn + N;
      for(; pn != pnend; ++pn)
        fastread(pn);
    }

    // Prepare/reset internal data
    const size_t memSize = sizeof(int) * (N + 1);
    memset(womenPartner, 0, memSize);
    memcpy(menRating, menRatingSrc, memSize);

    for(int i = 1; i <= N; ++i)
    {
      int man = i;

process_man:
      int &rating = menRating[man];
      int w = menPref[man][rating];
      ++rating; // Reduce rating for the next try if required

      if(womenPartner[w] == 0) // No partner yet, become partners
      {
        womenPartner[w] = man;
        menPartner[man] = w;
        continue;
      }
      
      // There is a partner
      const int otherMan = womenPartner[w];
      if(womenPref[w][man] < womenPref[w][otherMan]) // This man's rating is better than the other's
      {
        womenPartner[w] = man;
        menPartner[man] = w;
        man = otherMan;
      }
      goto process_man;
    }

    // Print answer
    for(int i = 1; i <= N; ++i)
      printf("%d %d\n", i, menPartner[i]);
  }

  return 0;
}
