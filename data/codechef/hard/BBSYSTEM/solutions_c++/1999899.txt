
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<stack>
#include<queue>
#include<list>
#include<vector>

using namespace std;

#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n)  REP(i,0,n)
#define MAX 2229283
#define SQRT_MAX 1494
#define MOD 500009

typedef long long int int64;
int p[SQRT_MAX];
int min_div[MAX]={0};
int divis[MAX]={0};
int sum_div[MAX]={0};
int deg[MAX]={0};
int res[MAX]={0};

int getprimes(int n,int p[]){
   int i,j,k,n2=n/2;
   for(i=0;i<n2;i++) p[i]=1;
   for(i=3;i*i<n;i+=2)
   {   if(p[i>>1])
       for(j=(i*i)>>1;j<n2;j+=i)
       p[j]=0;
   }
   j=1;p[0]=2;
   for(i=1;i<SQRT_MAX;i++) if(p[i]) p[j++] = 2*i+1;
   return j;
}
int main() {

 // freopen("intput.txt","r",stdin);
 // freopen("output.txt","w",stdout);
 int64 N,T,i,j,k,ans=1;
 int x,y,z;
     k = getprimes(SQRT_MAX,p);
               for(j=0;j<k;j++){
                 x = p[j];
                 for(y=x;y<MAX;y+=x) if(min_div[y]==0) min_div[y]=x;
               }
               divis[1]=1;
               for(x=2;x<MAX;x++)
               { if(min_div[x]==0) min_div[x]=x;
                 y = x/min_div[x];
                 if(min_div[y]!=min_div[x]) { deg[x]=1; divis[x]=divis[y]*2; }
                 else{  deg[x]=deg[y]+1;
                        divis[x]=(divis[y]*(deg[x]+1))/(deg[y]+1);

                      }

               }
               res[0]=res[1]=1;
               for(j=2;j<MAX;j++)
               {
                   k=++sum_div[divis[j]];
                   res[j]=(res[j-1]*k)%MOD;
               }
 scanf("%lld",&T);
 for(i=1;i<=T;i++)
 {
     scanf("%lld",&N);
     if(N>=MAX) printf("%d\n",MOD-1);
     else {
               printf("%d\n",res[N]-1);
              }

 }


  return 0;
}
