#include <iostream>
#include <sstream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <memory>
#include <cctype>
#include <cstring>
#include <vector>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

#define MAX 2000000000
#define LIM 1498
#define fr(a,b,c) for(a=b; a<c; a++)
#define foor(a,b,c,d) for(a=b; b<c; b+=d)
#define MOD 500009
#define MIL 2229283
#define LIMIT 2229283
#define NUMPRIME 238

//2229283 is the limit

int memFact[MIL]={0};
int memans[MIL];
int prime[NUMPRIME];
int prevnum[MIL]={0};

void primecollector(int *a){
  int i=1,j;
  int n=3;
  while(n<LIM){
	bool isPrime = true;
	fr(j,0,i){
	  if(n%a[j] == 0){
		isPrime = false;
		break;
	  }
	}
	if(isPrime){
	  a[i] = n;
	  i++;
	}
	n++;
  }
//  printf("Total = %d last %d\n", i, a[i-1]);
}

void init(int *a, int n){
  int i;
  fr(i,0,n)
  a[i]=0;
}

int main (void){  
  int i, t, n, noOffact, index, noOfpres, num;
  long long int ans;
  int maxFact;
  int count[500]; //can be less
  
  prime[0] = 2;
  memFact[1] = 1;
  
  primecollector(prime);
  
  fr(i,0,500)
	count[i]=0;

  index = 2;
//  maxFact = 0;
//  ans = 1;

  fr(i,0,NUMPRIME){
	memFact[prime[i]] = 2;
	prevnum[prime[i]] = 1;
	for(index=2*prime[i];index<LIMIT;index=index+prime[i]){
	  if(!prevnum[index]){
		num=index;
		noOfpres = 0;
		while(num%prime[i] == 0){
		  noOfpres++;
		  num=num/prime[i];
		}
		prevnum[index] = num;
		memFact[index] = noOfpres + 1;
//		printf("%d %d %d\n", index, prevnum[index], memFact[index]);
	  }
	}
  }
 /* while(index < MIL){
	num = index;
	noOffact = 1;
	i = 0;
	noOfpres = 0;

	while(prime[i] <= num and i<NUMPRIME){
	  while(num%prime[i] == 0){
		noOfpres++;
		num = num/prime[i];
	  }
	  if(noOfpres){
		noOffact = memFact[num] * (noOfpres+1);
		break;
	  }
	  i++;
	}
	if(i==NUMPRIME){
	  noOffact++;
	}
	memFact[index] = noOffact;
	index++;
	
  }*/

  count[1] = 1;
  count[2] = 2;
  ans = 1;
  memans[1] = 1;
  memans[2] = 1;
  memans[3] = 2;

/*  for(index=4;index<LIMIT;index++){
	count[memFact[index]]++;
	ans = memans[index-1];
	ans = (ans * (count[memFact[index]]%MOD)) % MOD;
	memans[index] = ans;
  }*/

  for(index=4;index<LIMIT;index++){
	if(!memFact[index]){
	  memFact[index] = 2;
	  prevnum[index] = 1;
	}
	
	memFact[index] = memFact[prevnum[index]] * memFact[index];
	count[memFact[index]]++;
	ans = memans[index-1];
//	printf("%d %lld %d\n", index, ans, (count[memFact[index]]%MOD));
	ans = (ans * (count[memFact[index]]%MOD)) % MOD;
	memans[index] = ans;
//	printf("%d %d %d\n", index, memFact[index], memans[index]);
  }
/*  fr(i,0,500)
	printf("%d %d\n",i, count[i]);*/

  scanf("%d", &t);

  while(t--){
	scanf("%d", &n);
	if(n >= LIMIT){
	  printf("500008\n");
	}
	else{
	  printf("%d\n", memans[n]-1);
	}
  }
  
  return 0;
}