#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#define fo(i,a,b) dfo(int,i,a,b)
#define fr(i,n) dfr(int,i,n)
#define fe(i,a,b) dfe(int,i,a,b)
#define fq(i,n) dfq(int,i,n)
#define nfo(i,a,b) dfo(,i,a,b)
#define nfr(i,n) dfr(,i,n)
#define nfe(i,a,b) dfe(,i,a,b)
#define nfq(i,n) dfq(,i,n)
#define dfo(d,i,a,b) for (d i = (a); i < (b); i++)
#define dfr(d,i,n) dfo(d,i,0,n)
#define dfe(d,i,a,b) for (d i = (a); i <= (b); i++)
#define dfq(d,i,n) dfe(d,i,1,n)
#define ffo(i,a,b) dffo(int,i,a,b)
#define ffr(i,n) dffr(int,i,n)
#define ffe(i,a,b) dffe(int,i,a,b)
#define ffq(i,n) dffq(int,i,n)
#define nffo(i,a,b) dffo(,i,a,b)
#define nffr(i,n) dffr(,i,n)
#define nffe(i,a,b) dffe(,i,a,b)
#define nffq(i,n) dffq(,i,n)
#define dffo(d,i,a,b) for (d i = (b)-1; i >= (a); i--)
#define dffr(d,i,n) dffo(d,i,0,n)
#define dffe(d,i,a,b) for (d i = (b); i >= (a); i--)
#define dffq(d,i,n) dffe(d,i,1,n)
#define ll long long
#define alok(n,t) ((t*)malloc((n)*sizeof(t)))
#define pf printf
#define sf scanf
#define pln pf("\n")

#define lim 2300000
#define mod 500009

int main() {
    int *ds = alok(lim, int);
    ll *ct = alok(lim, ll);
    ll *an = alok(lim, ll);
    fr(i,lim) ds[i] = 1, ct[i] = an[i] = 0;
    an[0] = an[1] = 1;
    int i;
    for (i = 2; i * i < lim; i++) {
        if (ds[i] == 1) {
            for (int j = i; j < lim; j += i) {
                ds[j] <<= 1;
            }
            int limi = (lim-1)/i;
            for (int pi = i, ml = 2; pi <= limi; ml++) {
                pi *= i;
                for (int j = pi; j < lim; j += pi) {
                    ds[j] += ds[j] / ml;
                }
            }
        }
        an[i] = an[i - 1] * ++ct[ds[i]] % mod;
    }
    for (;; i++) {
        if (ds[i] == 1) {
            for (int j = i; j < lim; j += i) ds[j] <<= 1;
        }
        if (!(an[i] = an[i - 1] * ++ct[ds[i]] % mod)) break;
    }
    int z;
    sf("%d", &z);
    fq(cas,z) {
        int n;
        sf("%d", &n);
        if (n < i) {
            pf("%lld\n", an[n] - 1);
        } else {
            pf("500008\n");
        }
    }
}
