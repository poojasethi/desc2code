#include <iostream>
#include <fstream>
#include <sstream>
#include <functional>
#include <algorithm>
#include <bitset>
#include <deque>
#include <list>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <cstdio>
#include <cctype>
#include <complex>
#include <cassert>
using namespace std;
#define REP(i,n) for(int i=0;i<(int)(n);i++)
#define EACH(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define FOR(i,k,n) for (int i=(k);i<(int)(n);i++)
#define FEQ(i,k,n) for(int i=(k);i<=(int)(n);i++)
typedef long long ll;
typedef complex<double> P;

#define NMAX 2229283
#define M 500009

short d[NMAX];
unsigned int sum[NMAX];
ll res[NMAX];

int main(int argc, char *argv[])
{ 
  memset(d, 0, sizeof(d));
  for(int i = 1; i * i < NMAX; i++){
    d[i * i]++;
    for(int j = i * i + i; j < NMAX; j += i) d[j] += 2;
  }

  memset(sum, 0, sizeof(sum));
  res[0] = 1;
  for(int k = 1; k < NMAX; k++){
    sum[d[k]]++;
    res[k] = res[k - 1] * sum[d[k]] % M;
  }

  int tc; scanf("%d", &tc);
  while(tc--){
    int n; scanf("%d", &n);
    if (n >= NMAX) printf("%d\n", M - 1);
    else printf("%lld\n", (res[n] - 1) % M);
  }

  return 0;
}
