
// START BOILERPLATE HEADER
// Useful Includes
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>

#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>

#include <stdio.h>

#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
#include <cassert>

using namespace std;

// Useful Constants
#define INF    (int)        2147483646                        //one less than the max
#define LINF   (long long)  9223372036854775806               //one less than the max
#define EPS                 1e-9                              //Arbitrary
#define PI                  3.1428571428571428571428571428571
#define E                   2.7182818284590452353602874713526

//Useful Macros
#define MAX(i,j)            ((i)>(j)?(i):(j))
#define MIN(i,j)            ((i)<(j)?(i):(j))
#define ABS(i)              ((i)<0?-(i):(i))
#define REP(i,a)            for((i)=0;(i)<(a);(i)++)
#define FOR(i,a,b)          for((i)=a;(i)<(b);(i)++)
#define FORE(i,a,b)         for((i)=a;(i)<=(b);(i)++)
#define EACH(it,b)          for(__typeof((b).begin())it=(b).begin();it!=(b).end();it++)
#define CLRI(ptr,n)         memset((ptr),0,(n)*sizeof(int))

//Useful Typedefs
typedef long long ll;
typedef long double ld;
typedef vector <int> vi;
typedef vector <string> vs;
typedef map<char,int> mci;
typedef map<int,int>  mii;

//Fast stdin class (my windows g++ doesn't have getchar_unlocked, so this will have to do)
class FastInput {
    public:
        FastInput();
        inline void getint(int &n);
        inline void getstr(char k[]);
        inline void getlcstr(char k[]);
        inline void getnumstr(char k[]);
    private:
        inline void nextchar(char &c);
        inline void getmore();
        static const int BUFSIZE = 1<<16;
        static char buffer[];
        char *bufpos;
        char *bufend;
};

char FastInput::buffer[FastInput::BUFSIZE];

FastInput::FastInput() { getmore(); }

inline void FastInput::getmore() {
    bufpos = buffer;
#ifdef ONLINE_JUDGE
    bufend = buffer + read(0, buffer, BUFSIZE);
#else
    cin.read(buffer,BUFSIZE);
    bufend = buffer + cin.gcount();
#endif
}

inline void FastInput::nextchar(char &c) {
    c = *bufpos++;
    if (bufpos==bufend) getmore();
}

inline void FastInput::getint(int &n) {
    n = 0;
    register char ch;
    register char lch = ' ';
    nextchar(ch);
    while (ch < '0' || ch > '9') {
        lch = ch;
        nextchar(ch);
    }
    while (ch >= '0' && ch <= '9') {
        n=(n<<3)+(n<<1)+ch-'0';
        nextchar(ch);
    }
    if (lch=='-') n = -n;
}

inline void FastInput::getlcstr (char k[]) {
    register int cnt = 0;
    register char ch;
    nextchar(ch);
    while ( ch < 'a' || ch > 'z' ) nextchar(ch);
    while (ch >= 'a' && ch <= 'z') {
        k[cnt++] = ch;
        nextchar(ch);
    }
    k[cnt] = '\0';
}

inline void FastInput::getstr (char k[]) {
    register int cnt = 0;
    register char ch;
    nextchar(ch);
    while (( ch < 'a' || ch > 'z' ) &&
           ( ch < 'A' || ch > 'Z' )) nextchar(ch);
    while ((ch >= 'a' && ch <= 'z') ||
           (ch >= 'A' && ch <= 'Z')) {
        k[cnt++] = ch;
        nextchar(ch);
    }
    k[cnt] = '\0';
}

inline void FastInput::getnumstr (char k[]) {
    register int cnt = 0;
    register char ch;
    nextchar(ch);
    while ( ch < '0' || ch > '9' ) nextchar(ch);
    while (ch >= '0' && ch <= '9') {
        k[cnt++] = ch;
        nextchar(ch);
    }
    k[cnt] = '\0';
}

void sieve (int n, int primelist[]) {
    int ss[n+1];
    int i, k;
    ss[0] = 0; ss[1] = 0;
    FORE(i,2,n) ss[i] = 1;
    i = 2;
    while (i * i < n) {
        if (ss[i] == 1) {
            for (k = 2*i; k <= n; k += i) ss[k] = 0;
        }
        i += 1;
    }
    k = 0;
    REP(i,n+1) {
        if (ss[i] == 1) { primelist[k] = i; k++; }
    }
}

int divisors (int n, int primelist[], int divlist[], int minprimediv[], int mindegree[]) {
    int i;
    REP(i,2000) {
        int p = primelist[i];
        if (p*p > n) break;
        if (p == n) {
            minprimediv[n] = p;
            mindegree[n] = 1;
            divlist[n] = 2;
            return 2;
        }
        if (n % p == 0) {
            int junkn = n/p;
            
            if (minprimediv[junkn] == p) {
                minprimediv[n] = p;
                mindegree[n] = mindegree[junkn] + 1;
                divlist[n] = divlist[junkn] * (mindegree[n]+1) / (mindegree[n]);
                return divlist[n];
            }
            
            else {
                minprimediv[n] = p;
                mindegree[n] = 1; 
                divlist[n] = divlist[junkn] * 2;
                return divlist[n];
            }
        }
    }
    // n must be prime
    minprimediv[n] = n;
    mindegree[n] = 1;
    divlist[n] = 2;
    return 2;
}

void domore (int lastn, int n, int primelist[], int divlist[], int divcount[], int qlist[], int minprimediv[], int mindegree[]) {
    int k;
    FORE(k,lastn+1,n) {
        int ndiv = divisors(k,primelist,divlist,minprimediv,mindegree);
        divcount[ndiv]++;
        qlist[k] = (int) ((long long) qlist[k-1] * (long long) divcount[ndiv] % (long long) 500009);
    }
}


int main() {
    FastInput fi;
    int i;
    int t;
    int primelist[2001];
    int *divlist;     divlist =     (int*) malloc(2300001 * sizeof(int));
    int *qlist;       qlist   =     (int*) malloc(2300001 * sizeof(int));
    int *minprimediv; minprimediv = (int*) malloc(2300001 * sizeof(int)); 
    int *mindegree;   mindegree =   (int*) malloc(2300001 * sizeof(int));
    int divcount[1000]; // Look up "highly composite numbers" -- 1000 is good to 200M
    CLRI(divcount,1000);
    qlist[1] = 1;
    divcount[1] = 1;
    divlist[1] = 1;
    int donesofar = 1;
    fi.getint(t);
    sieve(2000,primelist);
    while (t--) {
        int n;
        fi.getint(n);
        if (n > 2300000) { printf("500008\n"); continue; }
        if (n > donesofar) {
            domore(donesofar,n,primelist,divlist,divcount,qlist,minprimediv,mindegree);
            donesofar = n;
        }
        printf("%d\n", (qlist[n] == 0 ? 500008 : qlist[n] - 1));
    }
}

//def sieve (n) :
//    ss = [0] * 2 + [1] * (n-1);
//    i = 2;
//    while (i * i < n) :
//        if (ss[i] == 1) :
//            for k in xrange (2*i,n+1,i) : ss[k] = 0
//        i += 1;
//    primelist = [k for k in range (2,n+1) if ss[k] == 1]
//    return primelist
//
//def divisors (n, primelist, divlist) :
//    for p in primelist :
//        if p*p > n:
//            break
//        if (p == n) :
//            divlist[n] = 2
//            return 2
//        if (n % p == 0) :
//            junkn = n
//            junkn /= p
//            count = 1;
//            while (junkn % p == 0) :
//                junkn /=p
//                count += 1
//            divlist[n] = (count+1) * divlist[junkn]
//            return divlist[n]
//    divlist[n] = 2
//    return 2
//    
//def domore (lastn, n, primelist, divlist, divcount, qlist) :
//    for k in xrange (lastn+1, n+1) :
//        ndiv = divisors(k,primelist,divlist)
//        divcount[ndiv] = divcount.get(ndiv,0) + 1
//        qlist[k] = qlist[k-1] * divcount[ndiv] % 500009
// 
//import sys
//filein = sys.stdin
//##filein = open("bbsystem.in",'r')
//filell = filein.readlines()
//f = filell.__iter__()
//outbuf = []
//  
//def main() :
//    primelist = sieve(2000)
//    divlist = [0] * 2300001
//    qlist = [0] * 2300001
//    qlist[1] = 1
//    divcount = { 1 : 1 } 
//    divlist[1] = 1
//    donesofar = 1
//    
//    t = int(f.next())
//    for tt in xrange (t) :
//        n = int(f.next())
//        if n > 2300000 :
//            outbuf.append("500008")
//            continue
//        if n > donesofar :
//            domore(donesofar,n,primelist,divlist,divcount,qlist)
//            donesofar = n
//        outbuf.append("%d" % ((qlist[n] - 1) % 500009))
//            
//    print "\n".join(outbuf)
//main()
