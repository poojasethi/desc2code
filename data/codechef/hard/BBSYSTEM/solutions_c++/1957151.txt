//Template
//Template copied from Anudeep2011, Thanks

#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef vector <vi> vvi;
typedef vector <string> vs;
typedef pair< int ,int > pii;
typedef vector <ll> vll;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)
#define clear(freq) memset(freq,0,sizeof(freq))

#define S 1024*1024*4
char IN[S],OUT[S],*iptr,*optr,stk[20];

struct fastIO
{
    fastIO()
    {
		fread(IN,1,S,stdin);
		iptr=IN;
		optr=OUT;
	}
	void check()
	{
		int size=IN+S-iptr;
		if(size<200)
		{
			memcpy(IN,iptr,size);
			fread(IN+size,1,S-size,stdin);
			iptr=IN;
		}
	}
	void check2()
	{
		int size=OUT+S-optr;
		if(size<200)
		{
			fwrite(OUT,optr-OUT,1,stdout);
			optr=OUT;
		}
	}
	
	int sc()
	{
		check();
		while(*iptr<=32) iptr++;
		int x=0;
		while(*iptr>32) x= x*10 + *iptr++ -'0';
		return x;
	}
	
	void ssc(char *s) {
		check();
		while(*iptr<=32) iptr++;
		int i=0;
		while(*iptr>32) *(s+i) = *iptr++, i++;
		*(s+i) = '\0';
	}
	
	void pr(int x)
	{
		check2();
		if(x==0)
			*optr++='0';
		else
		{
			int y;
			int top=-1;
			while(x>0)
			{
				y=x/10;
				stk[++top]=x-y*10+'0';
				x=y;
			}
			while(top>=0) *optr++=stk[top--];
		}
		*optr++='\n';
	}
}io;

#define M 500009
#define MAXN 3368864

int dp[MAXN],cutoff,divs[1024];
int fact[M+2],fac[MAXN],te[1000];
vi primes;
int twos[MAXN],save[MAXN];

int getdivisors(int n) {
	int nn= n;
	if(n>2 && (n&1)==0) {
		twos[n] = twos[n/2]+1;
		save[n] = save[n/2]/(twos[n/2]+1)*(twos[n]+1);
		return save[n];
	}
	int ptr=0;
	while(n>1) {
		if(fac[n]==2) twos[nn]++;
		else te[ptr++] = fac[n];
		n = n/fac[n];
	}
	// if(nn<10) printf("tw %d\n",twos[nn]);
	sort(te,te+ptr);
	int ans = twos[nn]+1,c=0;
	for(int i=0; i<ptr; i++) {
		if(i>0 && te[i]==te[i-1]) c++;
		else {
			ans *= (c+1);
			c = 1;
		}
	}
	if(c) ans *= (c+1);
	save[nn] = ans;
	return ans;
}
	
void prep() {
	int c,i;
	for(i=1;i<MAXN;i++) fac[i] = i;
	for(i=2; i*i<MAXN;i++) if(fac[i] == i) 
	for(int j=i+i; j<MAXN; j+=i) if(fac[j]==j) fac[j] = i;
	fact[0] = 1;
	for(i=1; i<M+2; i++) fact[i] = (1LL*i*fact[i-1])%M;
	dp[1] = 1;
	ll temp;
	for(i=2; i<MAXN && dp[i-1]; i++) {
		c = getdivisors(i);
		// if(i<10) printf("%d\n",c);
		temp = dp[i-1];
		divs[c]++;
		dp[i] = (temp*divs[c])%M;
	}
	cutoff = i-1;
}
	
int main() {
	prep();
	int t = io.sc(),n;
	while(t--) {
		n = io.sc();
		if(n >= cutoff) io.pr(M-1);
		else io.pr((dp[n]-1+M)%M);
	}
	fwrite(OUT, optr-OUT, 1, stdout);
	return 0;
}