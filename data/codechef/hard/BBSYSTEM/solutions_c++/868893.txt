#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <string>
#include <cstring>
#include <cmath>
#include <climits>
#include <algorithm>
#include <cstdio>
using namespace std;

typedef unsigned long long ULL;
typedef long long LL;

#define REP(i,n)      FOR(i,0,n)
#define FOR(i,a,b)    for(int i = a; i < b; i++)
#define ROF(i,a,b)    for(int i=a;i>b;i--)
#define GI 		      ({int t;scanf("%d",&t);t;})
#define GL 		      ({LL t;scanf("%lld",&t);t;})
#define GD 		      ({double t;scanf("%lf",&t);t;})
#define pb 	          push_back
#define mp 	          make_pair
#define MOD 	      500009
#define INF	          (int)1e9
#define EPS	          1e-9
#define TR(a,it)      for (typeof((a).begin()) it = (a).begin(); it != (a).end(); ++it)

#define NMAX 2229283
int tau[NMAX];
int min_prime[NMAX];
int deg[NMAX];          /// deg[i] is degree of min_prime[i]
int cnt[NMAX] = {0};
LL res[NMAX] = {0};

int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int T, t = 0, n;

    for (int i = 2; i*i < NMAX; i++)
        if (!min_prime[i])                  /// means prime
            for(int j=i*i; j < NMAX; j+=i)
                if (!min_prime[j])          /// means alreadly assigned
                    min_prime[j] = i;

    tau[1] = 1, res[1] = 1;
    for (int i = 2; i < NMAX; i++) {
        int p = min_prime[i];

        if (!p)
            min_prime[i] = i, deg[i] = 1, tau[i] = 2;
        else {
            int prev = i/p;
            if (min_prime[prev] == p) {
                tau[i] = tau[prev] / (deg[prev] + 1) * (deg[prev] + 2);
                deg[i] = deg[prev] + 1;
            } else
                tau[i] = tau[prev] * 2, deg[i] = 1;
        }

        cnt[tau[i]]++;
        res[i] = res[i-1] * cnt[tau[i]];
        if (res[i] >= MOD)
            res[i] %= MOD;

        //printf("i = %d, deg[i] = %d, tau[i] = %d, res[i] = %lld\n", i , deg[i], tau[i], res[i]);
    }

	scanf("%d", &T);
	while (T--) {
        scanf("%d", &n);
        if (n >= NMAX)
            printf("%d\n", MOD - 1);
        else
            printf("%lld\n", (res[n] - 1 + MOD) % MOD);
	}
	return 0;
}
