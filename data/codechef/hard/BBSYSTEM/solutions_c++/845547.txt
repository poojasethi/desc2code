#include <algorithm>
#include <bitset>
#include <cctype>
#include <cfloat>
#include <climits>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <functional>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <valarray>
#include <vector>

using namespace std;
typedef long long ll;

static char rbuf[8192 * 8], *rend = 0, *rpos = 0;
static inline int mgetchar() { if (rpos < rend) return *rpos++; int n = read(0, rbuf, sizeof(rbuf)); if (!n) exit(0); rend = rbuf + n; rpos = rbuf + 1; return *rbuf; }
#define gc mgetchar
int getint() { unsigned int c; int x = 0; while (((c = gc()) - '0') >= 10) { if (c == '-') return -getint(); if (!~c) exit(0); } do { x = (x << 3) + (x << 1) + (c - '0'); } while (((c = gc()) - '0') < 10); return x; }
#define pch putchar
void putll(ll n) { char buf[66]; int i = 64; if (n < 0) pch('-'), n = -n; do { buf[i--] = '0'+ n % 10; n /= 10; } while (n); while (i < 64) pch(buf[++i]); }

const int M = 2229283; //2229245;
const int MOD = 500009;
const int MDIV = 322;
const int MAXP = 100000;
int pr[MAXP], npr;
bool is_pr[MAXP + 1];
int sieve() {
    int i, j, d;
    if (npr) return npr;
    for (i = 3; i <= MAXP; i += 2) is_pr[i] = 1; is_pr[2] = 1;
    for (i = 3; i * i <= MAXP; i += 2) if (is_pr[i]) {
        for (j = i * i, d = i << 1; j <= MAXP; j += d) is_pr[j] = 0;
    }
    for (i = 2; i <= MAXP; i++) if (is_pr[i]) pr[npr++] = i;
    return npr;
}

ll acc[MDIV], res[M + 1];
int divs[M + 1];

const int MAXN = M + 100;
int ndiv[MAXN];
int mfact[MAXN], per[MAXN], deg[MAXN];

// need prime table less than sqrt(MAXN)
void num_divisors(int n) {
    sieve();
    int i, j, p, r;
    memset(mfact, 0, sizeof(mfact));
    for (i = 0; i < npr; i++) {
        p = pr[i];
        for (j = p; j < MAXN; j += p) if (!mfact[j]) mfact[j] = p;
    }
    ndiv[1] = per[1] = 1;
    for (i = 2; i < MAXN; i++) {
        p = mfact[i];
        if (!p) p = i;
        r = i / p;
        if (mfact[r] != p) {
            deg[i] = 2, per[i] = ndiv[r], ndiv[i] = ndiv[r] * 2;
        } else {
            deg[i] = deg[r] + 1, per[i] = per[r], ndiv[i] = per[r] * deg[i];
        }
    }
}

int main () {
    int i, j, tcc, tc = getint();
    int n, ns;
    int mx = 0;
    num_divisors(MAXN);
    res[0] = 1;
    for (n = 1; n < M; n++) ns = ndiv[n], acc[ns]++, res[n] = res[n - 1] * acc[ns] % MOD;
    for (tcc = 0; tcc < tc; tcc++) {
        int n = getint();
        if (n >= M) {
            puts("500008");
        } else {
            putll((res[n] - 1 + MOD) % MOD); puts("");
        }
    }
    return 0;
}
