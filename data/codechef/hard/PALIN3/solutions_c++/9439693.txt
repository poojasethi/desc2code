#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define sz(_v) (int)(_v).size()
#define all(_v) (_v).begin(),(_v).end()
#define pii pair<int,int>
typedef long long ll;
const int INF = 1000000000;
const ll MOD = 1e9 + 7;
 
const int maxn = 1000010;
int p[maxn << 1],arr[maxn << 2];
int has[maxn << 2][3];
string ss,T;
 
void build() {
	T = "";
	for (int i = 0; i < sz(ss); i ++) T += "#" + ss.substr(i,1);
	T += "#";
}
 
void solve() {
	build();
    // manacher's algorithm
 
	int c = 0,r = 0;
	p[0] = arr[0] = 0;
	for (int i = 1; i < sz(T); i ++) {
		int i_mirror = c + c - i;
		p[i] = (r > i) ? min(r - i,p[i_mirror]) : 0;
 
		while ((i - p[i] - 1) >= 0 and (i + p[i] + 1) < sz(T) and T[i - p[i] - 1] == T[i + p[i] + 1])
			p[i] ++;
 
		if(i + p[i] > r) {
			c = i;
			r = i + p[i];
		}
	}
 
    // manacher's over.
 
    // precomputation
	has[0][0] = has[0][1] = has[0][2] = 0;
	for (int i = 1; i < sz(T); i ++) {
		arr[i] = arr[i - 1];
		if(T[i] != '#') arr[i] = (arr[i] + (T[i] - '0')) % 3;
		for (int j = 0; j < 3; j ++) has[i][j] = has[i - 1][j];
		if(T[i] != '#' and T[i] != '0') has[i][arr[i]] ++;
	}
	ll ans = 0;
	for (int i = 1; i < sz(T); i ++) {
		int num = (T[i] - '0');
		if(T[i] == '#') num = 0;
		if(T[i] != '#' and num == 0) ans ++;
		num = (num + arr[i]) % 3;
		ans += has[i + p[i]][num] - has[i - 1][num];
		//cout << i << ' ' << ans << ' ' << num << endl;
	}
	cout << ans << "\n";
}
 
int main() {
	ios_base::sync_with_stdio(false);
	cin >> ss;
	solve();
	return 0;
}
