// -*- C++ -*-
// File: a.cpp
// Copyright (C) 2013
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */

const int MOD = 3;
const int NMAX = 1000001;

int d1[NMAX];
int d2[NMAX];
int sm[NMAX][MOD], pf[NMAX];

int cnt_pf(int lf, int rg, int val){
    if(lf > rg) return 0;
    return sm[rg][val] - (lf == 0 ? 0 : sm[lf - 1][val]);
}

int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);
    
    string s;
    cin >> s;
    int n = (int)s.size();
    
    int l=0, r=-1, k;
    for(int i = 0; i < n; i++){
        if(i > r) k = 1;
        else k = min(d1[l + r - i], r - i);
        
        while(0 <= i-k && i+k < n && s[i - k] == s[i + k]) k++;
        d1[i] = k;
        if(i + k - 1 > r)
            r = i + k - 1, l = i - k + 1;
    }
    
    l=0, r=-1;
    for(int i = 0; i < n; i++){
        if(i > r) k = 0;
        else k = min(d2[l + r - i + 1], r - i + 1);
        
        while(i + k < n && i - k - 1 >= 0 && s[i+k] == s[i - k - 1]) k++;
        d2[i] = k;
        
        if(i + k - 1 > r)
            l = i - k, r = i + k - 1;
    }
    
    /*
    for(int i = 0, l = 0, r = -1; i < n; ++i) {
        int k = (i>r ? 0 : min(r-i, d1[l+r-i])) + 1;
        while(i>=k && i+k < n && s[i-k]==s[i+k]) ++k;
        d1[i] = k--;
        if(i+k>r) {
            l = i-k;
            r = i+k;
        }
    }
    
    for(int i = 0, l = 0, r = -1; i < n; ++i) {
        int k = (i>r ? 0 : min(r-i+1,d2[l+r-i+1])) + 1;
        while(i>=k && i+k-1<n && s[i-k]==s[i+k-1]) ++k;
        d2[i] = --k;
        if(i+k-1>r) {
            l = i-k;
            r = i+k-1;
        }
    }
    //*/
    CL(sm,0);
    rep(i,n) {
        pf[i] = (s[i]-'0') % 3;
        if(i) {
            pf[i] = (pf[i] + pf[i-1])%MOD;
            memcpy(sm[i], sm[i-1], sizeof(int)*3);
        }
        if(!(i+1<n && s[i+1]=='0')) sm[i][pf[i]]++;
    }
    
    ll ans = 0;
    
    rep(i,n) {
        int curd = (s[i]-'0') % MOD;
        int want = ((3-curd)*2 + curd) % MOD;
        int l = i - d1[i] + 1;
        
        ans += cnt_pf(max(0, l-1), i-1, (pf[i]-want+MOD)%MOD);
        if(s[i]=='0') ans ++;
        if(l==0 && s[0] != '0' && pf[i]==want) ans ++;
    }
    
    rep(i,n) if(d2[i]>0) {
        int want = 0;
        int l = i - d2[i];
        
        ans += cnt_pf(max(0, l-1), i-2, (pf[i-1]-want+MOD)%MOD);
        if(l==0 && s[0] != '0' && pf[i-1] == want) ans ++;
    }
    
    cout << ans << endl;

#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
