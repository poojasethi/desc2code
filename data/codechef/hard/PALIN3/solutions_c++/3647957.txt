#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<vector>
#include<map>

#define getcx getchar_unlocked
#define FOR(i,a,b) for(i = (a);i < (b);i++)
#define f first
#define s second
#define pb push_back

using namespace std;

inline int in()
{
	int n=0;
	int ch=getcx();int sign=1;
	while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
	while( ch >= '0' && ch <= '9' )
	n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
	return n*sign;
}

typedef pair<int,int> pr;
typedef long long ll;
char s[1000005],str[2000005];
int p[2000005],tot[2000005],sm[2000005],md[3][2000005];


int main()
{
	int i,j,n,r,l,c,i1,x,y,cnt1,arr[3],t,y1;
	ll ans,cnt;

	scanf("%s",s);
	
	n = strlen(s);
	j = 0;
	FOR(i,0,n)
	{
		str[j++] = '#';
		str[j++] = s[i];
	}
	str[j++] = '#';
	str[j] = '\0';
	n = strlen(str);
	tot[0] = 0;
	
	r = 2;c = 1;l = 0;
	p[0] = 0;
	p[1] = 1;
	for(i = 2;i < n;i++)
	{
		if((r-i) > 0)
		{
			i1 = 2*c - i;
			if(p[i1] >= (r-i))
			{
				x = r+1;
				y = 2*i - (r+1);
				cnt = r-i;
				cnt1 = 0;
				while((x < n)&&(y >= 0))
				{
					if(str[x] == str[y])
					{
						x = x+2;
						y = y-2;
						cnt1++;
					}
					else
						break;
				}
				c = i;
				p[i] = cnt + 2*cnt1;
				r = i + p[i];
				l = i - p[i];
			}
			else
				p[i] = p[i1]; 
		}
		else
		{
			if(str[i] == '#')
			{
				cnt = 0;
				x = i+1;
				y = i-1;
			}
			else
			{
				cnt = 1,x = i+2,y = i-2;
			}
			cnt1 = 0;
			while((x < n) && (y >= 0) && (str[x] == str[y]))
			{
				x = x + 2;
				y = y - 2;
				cnt1++;
			}
			p[i] = cnt + 2*cnt1;
			c = i;
			l = i - p[i];
			r = i + p[i];
		}
	}

	int a,b;
	md[0][0] = md[1][0] = md[2][0] = 0;
	FOR(i,1,n)
	{
		if( (str[i] == '#') || (str[i] == '0') )
		{
			tot[i] = tot[i-1];
			md[0][i] = md[0][i-1];
			md[1][i] = md[1][i-1];
			md[2][i] = md[2][i-1];
		}
		else 
		{
			arr[0] = arr[1] = arr[2] = 0;
			tot[i] = (tot[i-1] + (str[i] - '0'))%3;
			arr[tot[i]] = 1;
			md[0][i] = md[0][i-1] + arr[0];
			md[1][i] = md[1][i-1] + arr[1];
			md[2][i] = md[2][i-1] + arr[2];
				
		}
	}
		

	ans = 0;
	FOR(i,0,n)
	{
		x = p[i];
		if(x)
		{
			if(str[i] == '#')
			{
				y = tot[i];
				cnt = md[y][i+x] - md[y][i];
			}
			else
			{
				y1 = (str[i] - '0')%3;
				t = (y1+tot[i])%3;
				cnt = md[t][i+x] - md[t][i];
				if(y1 == 0)
					cnt++;
			}
			//printf("%d ",cnt);
			ans += cnt;
		}
	}				
	printf("%lld\n",ans);
	return 0;
}
