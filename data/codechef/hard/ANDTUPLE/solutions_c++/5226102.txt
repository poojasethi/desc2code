#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;


#define ll long long
#define ff first
#define ss second
#define mpa make_pair
#define MOD  1000000009
#define pb push_back
#define lld I64d
#define MXN 1000000

int bitcnt(int mask){return __builtin_popcount(mask);}
int SET(int N,int pos){ return N=N | (1<<pos);}
int RESET(int N,int pos){   return N= N & ~(1<<pos);}
int check(int N,int pos){   return (N & (1<<pos));}
int toggle(int N,int pos){if(check(N,pos))return N=RESET(N,pos);return N=SET(N,pos);}
void PRINTBIT(int N){   printf("("); for(int i=6;i>=1;i--)  {bool x=check(N,i);cout<<x;}    puts(")");}
int mod(int a, int b) { return a - a/b * b;}

ll N;
ll K;
vector<int> Arr;
ll dp[1000][100];

void print()
{
	for(int i = 0; i < Arr.size(); ++i)
		cout<< Arr[i] << " ";
	puts("");
}

ll rec(int pos, int carry)
{
	if(pos == -1)
		return carry == 0;
	
	if(dp[pos][carry] != -1)
		return dp[pos][carry];
	
	ll ans = 0;
	
	if(K == 3) {
		for(int i = 0; i <= 1; ++i) {
			for(int j = 0; j <= 1; ++j) {
				for(int k = 0; k <= 1; ++k) {
					if(((i&j) == j && (j & k) == k) && ((i + j + k + carry)%2 == Arr[pos]))
						ans += rec(pos - 1, (i + j + k + carry)/2);
					if(ans >= MOD)
						ans %= MOD;
				}
			}
		}
	} else if(K == 4) {
		for(int i = 0; i <= 1; ++i) {
			for(int j = 0; j <= 1; ++j) {
				for(int k = 0; k <= 1; ++k) {
					for(int l = 0; l<= 1; ++l) {
						if(((i & j) == j && (j & k) == k && (k & l) == l) && ((i + j + k + l + carry)%2 == Arr[pos]))
							ans += rec(pos - 1, (i + j + k + l + carry)/2);
							if(ans >= MOD)
								ans %= MOD;
					}
				}
			}
		}
	}
	
	return dp[pos][carry] = ans;
}

void solve()
{
	Arr.clear();
	while(N) {
		Arr.pb(N%2);
		N >>= 1;
	}
	
	reverse(Arr.begin(), Arr.end());
	memset(dp, -1, sizeof dp);
	
//	print();
	
	N = Arr.size();
	ll ans = rec(N - 1, 0);
	printf("%lld\n", ans);
}

int main()
{
	int T;
	scanf("%d", &T);
	
	while(T--) {
		scanf("%lld%lld", &K, &N);
		solve();
	}
	
	return 0;
}