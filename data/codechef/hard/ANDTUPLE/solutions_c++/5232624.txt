#include <iostream>
#include <cstdio>
#include <algorithm>
#include <map>
#include <cstring>
using namespace std;

#define MOD 1000000009

string tostring(long long n)
{
    string s;
    while (n) {
        s.push_back((char)(n % 2 + '0'));
        n /= 2;
    }
    reverse(s.begin(), s.end());
    return "0" + s;
}

bool exist[101][51];
long long dp[101][51];

string s;

long long solve3(int indx, int carry)
{
    if (indx == 0)  {
        if (carry) return 0;
        else return 1;
    }
    if (!exist[indx][carry]){
        long long ways = 0;
        for (int i = 0; i <= 1; i++)
            for (int j = 0; j <= i; j++)
                for (int k = 0; k <= j; k++) {
                    if (s[indx]-'0' == (i + j + k + carry) % 2) {
                        ways += solve3(indx-1, (i + j + k + carry)/2);
                        ways %= MOD;
                    }
                }
        dp[indx][carry] = ways;
        exist[indx][carry] = true;
    }
    return dp[indx][carry];
}

long long solve4(int indx, int carry)
{
    if (indx == 0)  {
        if (carry) return 0;
        else return 1;
    }
    if (!exist[indx][carry]){
        long long ways = 0;
        for (int i = 0; i <= 1; i++)
            for (int j = 0; j <= i; j++)
                for (int k = 0; k <= j; k++) {
                    for (int h = 0; h <= k; h++) {
                        if (s[indx]-'0' == (i + j + k + h + carry) % 2) {
                            ways += solve4(indx-1, (i + j + k + h +carry)/2);
                            ways %= MOD;
                        }
                    }
                }
        dp[indx][carry] = ways;
        exist[indx][carry] = true;
    }
    return dp[indx][carry];
}

int main()
{
    int t;
    scanf("%d", &t);
    while (t--) {
        memset(dp, 0, sizeof(dp));
        memset(exist, 0, sizeof(exist));
        long long n, k;
        scanf("%lld%lld", &k, &n);
        s = tostring(n);
        //cout << s << endl;
        if (k == 3) printf("%lld\n", solve3((int)s.size()-1, 0));
        else printf("%lld\n", solve4((int)s.size()-1, 0));
    }
}
