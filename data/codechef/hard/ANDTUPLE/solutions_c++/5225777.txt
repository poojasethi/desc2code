#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <cassert>
#include <vector>

using namespace std;

#define rep(i,a,b) for(int i = a; i < b; i++)
#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
#define S(x) scanf("%lld",&x)
#define P(x) prLLf("%d\n",x)

typedef long long LL;
typedef vector<int> VI;

const int MAXN = 1000005;
const int mod = 1000000009;
LL n;
LL mem[65][5];

LL solve(int bitno, int carry) {
    if((1LL<<bitno) > n) {
        if(carry==0) return 1; // a valid combination
        return 0;
    }

    if(mem[bitno][carry]!=-1) return mem[bitno][carry];
    LL ans = 0;
    int d = (n>>bitno) & 1;
    rep(i,0,2) rep(j,0,i+1) rep(k,0,j+1) {
        int s=i+j+k+carry;
        if(s%2!=d) continue;

        ans += solve(bitno+1, s/2);
        ans %= mod;
    }

    mem[bitno][carry] = ans;
    return ans;
}

LL solve1(int bitno, int carry) {
    if((1LL<<bitno) > n) {
        if(carry==0) return 1; // a valid combination
        return 0;
    }

    if(mem[bitno][carry]!=-1) return mem[bitno][carry];
    LL ans = 0;
    int d = (n>>bitno) & 1;
    rep(i,0,2) rep(j,0,i+1) rep(k,0,j+1) rep(l,0,k+1) {
        int s=i+j+k+l+carry;
        if(s%2!=d) continue;

        ans += solve1(bitno+1, s/2);
        ans %= mod;
    }

    mem[bitno][carry] = ans;
    return ans;
}

int main()
{
    #ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
    #endif
    LL t;
    S(t);

    while(t--) {
        memset(mem,-1,sizeof(mem));
        LL k;
        S(k); S(n);
        if(k==3) {
            printf("%lld\n", solve(0,0));
        }
        else printf("%lld\n",solve1(0,0));
    }
    return 0;
}
