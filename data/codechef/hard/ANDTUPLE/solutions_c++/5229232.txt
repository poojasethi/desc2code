#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<algorithm>
#include<set>
#include<map>
#include<utility>
#include<vector>
#include<string>
#include<stack>
#include<queue>
#include<iostream>
#include<assert.h>
using namespace std;
#define MOD 1000000009
int K, num[66], dp[66][16];
int rec(int pos, int c)
{
    if (pos < 0) return (c == 0);
    if (c+num[pos] > 10) return 0;
    int &ret = dp[pos][c];
    if (ret != -1) return ret;
    int t = c + num[pos];
    int k;
    ret = 0;
    for (k=0; k<=min(K,t); ++k) ret = (ret + rec(pos-1, (t-k)*2)) % MOD;
    //printf("%d %d : %d\n", pos, c, ret);
    return ret;
}
void prep(long long n)
{
    int i = 0;
    while (n)
    {
        num[i++] = ((n&1LL)!=0);
        n >>= 1LL;
    }
    for (; i<=63; ++i) num[i] = 0;
}
int main()
{
    /*int X=22,a,b,c,d,r=0;
    for (a=0; a<=X; ++a)
    {
        for (b=a; b<=X; ++b)
        {
            if (a != (a&b)) continue;
            for (c=b; c<=X; ++c)
            {
                if (b != (b&c)) continue;
                for (d=c; d<=X; ++d)
                {
                    if (c != (c&d)) continue;
                    if (a+b+c+d == X) ++r;
                }
            }
        }
    }
    printf("%d\n", r);*/
    int T;
    long long N;
    scanf("%d", &T);
    while (T--)
    {
        scanf("%d %lld", &K, &N);
        prep(N);
        memset(dp, -1, sizeof(dp));
        printf("%d\n", rec(63,0));
    }
    return 0;
}
