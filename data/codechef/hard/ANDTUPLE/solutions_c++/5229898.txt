#include <cstdio>
#include <algorithm>
#include <cstring>

#define MAXN 64
#define MAXK 5
#define MOD 1000000009LLU;

using namespace std;

typedef long long ll;
typedef unsigned long long llu;

int K;
llu N;
llu memo[ MAXN + 1 ][ MAXN + 1 ];
llu powers[ MAXN + 1 ];

void precompute() {
    powers[ 0 ] = 1LLU;
    for( int i = 1; i <= MAXN; i++ ) {
        powers[ i ] = 2LLU * powers[ i - 1 ];
    }
}

ll dp( int n, int carry ) {
    llu& ret = memo[ n ][ carry ];
    if( ret != -1 ) return ret;
    llu power = powers[ n ];
    if( power > N ) return ret = ( llu )( carry == 0 );
    ret = 0LLU;
    for( int i = 0; i < ( 1 << K ); i++ ) {
        int and_val = 1, sum = 0;
        for( int j = 0; j < K; j++ ) {
            if( i & ( 1 << j ) ) sum++;
            if( j == K - 1 ) continue;
            int b1 = ( i & ( 1 << j ) ) ? 1 : 0;
            int b2 = ( i & ( 1 << ( j + 1 ) ) ) ? 1 : 0;
            if( ( b1 & b2 ) != b2 ) and_val = false;
        }
        if( !and_val ) continue;
        sum += ( carry & 1 ) ? 1 : 0;
        if( ( N & power )  && ( sum % 2 ) ) {
            sum /= 2;
            ret = ( llu )( ret + dp( n + 1, carry / 2 + sum ) ) % MOD;
        }
        if( !( N & power ) && sum % 2 == 0 ) {
            sum /= 2;
            ret = ( llu )( ret + dp( n + 1, carry / 2 + sum ) ) % MOD;
        }
    }
    return ret;
}

int main() {
    int T;
    precompute();
    scanf("%d", &T );
    while( T-- ) {
        scanf("%d%llu", &K, &N );
        memset( memo, -1LL, sizeof( memo ) );
        llu ans = dp( 0, 0 ) % MOD;
        printf("%llu\n", ans );
    }
    return 0;
}
