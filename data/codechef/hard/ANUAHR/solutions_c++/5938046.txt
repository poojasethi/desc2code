/*Author :rednivrug15 */
#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair

#define rep(i,n) for(int i=0; i<n ; i++)
using namespace std;
//#define long double double

#define REP(i,n) for (int i = 1; i <= n; i++)
#define ll long long
#define mod 1000000007
const int base = 1000100000;
const int base_digits = 9;

long long power(ll a,ll b,ll m)
{
    ll ret=1;
    while(b)
    {
        if(b%2==1)
           ret=(ret*a)%m;
        a=(a*a)%m;
        b/=2;
    }
    return ret;
}

long long gcd(long long a,long long b)
{
    return b==0?a:gcd(b,a%b);
}

struct lists
{
    int l,b,counts;
}arr[100005];

bool comp(const lists &lhs,const lists &rhs)
{
    return lhs.b>rhs.b;
}

bool camp(const lists &lhs,const lists &rhs)
{
    return lhs.l<rhs.l;
}


int tree[400005];

void update(int node,int i,int j,int x)
{
    if(i>x || j<x)
     return;

    if(i==x && j==x)
    {
        //printf("Updated %d\n",node);
        tree[node]++;
        return;
    }
    update(2*node,i,(i+j)/2,x);
    update(2*node+1,(i+j)/2+1,j,x);

    tree[node]=tree[2*node]+tree[2*node+1];
}

int query(int node,int i,int j,int x)
{
    if(i==j)
        return i;

    if(tree[2*node]>=x)
        return query(2*node,i,(i+j)/2,x);
    return query(2*node+1,(i+j)/2+1,j,x-tree[2*node]);
}

int reverses[100005];

int main()
{
    int t;
    cin>>t;

    while(t--)
    {
        int n,m;
        cin>>n>>m;

        for(int i=1; i<=n; i++)
            scanf("%d%d",&arr[i].l,&arr[i].b);

        for(int i=0; i<=4*n; i++) tree[i]=0;

         sort(arr+1,arr+n+1,camp);

         int assigns=1;

         for(int i=1; i<=n; i++)
         {
             if(i==1 || arr[i].l==arr[i-1].l)
             {
                 arr[i].counts=assigns;
             }
             else
             {
                 ++assigns;
                 arr[i].counts=assigns;
             }
             reverses[assigns]=arr[i].l;
         }
         sort(arr+1,arr+n+1,comp);
         m=n-m;

         //printf("m is %d\n",m);
         long long ans=LONG_LONG_MIN;

         for(int i=1;  i<=n; i++)
         {
            if(i>=m)
            {
                int longlength;
                longlength=min(query(1,1,n,i-m+1),arr[i].counts);
                ans=max(ans,(long long)arr[i].b*(long long)reverses[longlength]);
            }
            update(1,1,n,arr[i].counts);
        }
        printf("%lld\n",ans);
    }

    return 0;
}
