#include <bits/stdc++.h>

using namespace std;

#define PB push_back
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define LL long long
#define sd(x) scanf("%d", &x)
#define sld(x) scanf("%lld", &x)
#define MOD 1000000007
#define SQ 1000
#define N 101000

int n, m;

vector<int> ax, ay;
int a[N][2], no = 0;
int tree[N];
vector<int> v[N];

int update(int x, int vi){
    while(x < N){
        tree[x] += vi;
        x += (x & -x);
    }
}

int query(int x){
    int ans = 0;
    while(x > 0){
        ans += tree[x];
        x -= (x & -x);
    }
    return ans;
}



int poss(int id){
    id = query(id - 1);
    if( (no - id) >= (n - m) ) return 1;
    return 0;
}

int get(){
    int l = 1, r = ay.size(), mid;
    if(no < (n - m) ){
        return -1;
    }
    while(l <= r){
        if(r == l){
            return l;
        }
        if(r == l + 1){
            if(poss(r) ) return r;
            return l;
        }
        mid = (l + r) / 2;
        if(poss(mid)){
            l = mid;
        }
        else{
            r = mid - 1;
        }
    }
    cout<<1/0;
}

int solve(){
    no = 0;
    int i, idx, j, idy;
    LL ans = 0, tp1, tp2;
    cin>>n>>m;
    for(i = 0; i < n; i++){
        sd(a[i][0]);
        sd(a[i][1]);
        ax.PB(a[i][0]);
        ay.PB(a[i][1]);
    }
    if(n == m){
    	for(i = 0; i < n; i++) {
    	    tp1 = a[i][0];
	    tp2 = a[i][1];
	    ans = max(ans, tp1 * tp2);
	}
    	printf("%lld\n", ans);
    }
    else{
    sort(ax.begin(), ax.end());
    sort(ay.begin(), ay.end());
    ax.erase(unique(ax.begin(), ax.end()), ax.end());
    ay.erase(unique(ay.begin(), ay.end()), ay.end());

    for(i = 0; i < n; i++){
        idx = int(lower_bound(ax.begin(), ax.end(), a[i][0]) - ax.begin());
        v[idx].PB( (int)(lower_bound(ay.begin(), ay.end(), a[i][1]) - ay.begin()) + 1);
    }

    for(i = ax.size() - 1; i >= 0; i--){
        //cout<<i<<" ";
        for(j = 0; j < v[i].size(); j++){
            update(v[i][j], 1);
        }
        no += v[i].size();
        idy = get();
        //cout<<idy<<" ";
        if(idy != -1){
            tp1 = ay[idy - 1];
            tp2 = ax[i];
            ans = max(ans, tp1 * tp2);
        }
        v[i].clear();
        //cout<<ans<<" "<<endl;;
    }
    /*cout<<poss(0)<<endl;
    cout<<"YES";
    */
    printf("%lld\n", ans);}
    memset(tree, 0, sizeof(tree));
    ax.clear();
    ay.clear();
    no = 0;
    return 0;

}

int main(){
    //freopen("in.txt", "r", stdin);
    //freopen("out.txt", "w", stdout);
    LL t = 1, o = 1;
    cin>>t;
    while(t--){
    //    cout<<"Case #"<<o<<": ";
        solve();
    //    o++;
    }
    return 0;
}