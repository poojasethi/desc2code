#include <bits/stdc++.h>
using namespace std;
#define N 100000
typedef long long int ll;
typedef pair<pair <ll,ll>,int> iii;
iii pts[N + 1];
int remp[N + 1],mp[N + 1],remp2[N + 1];
int segs[4*N + 10];
void Build(int nod,int b,int e)
{
    if(b == e)
    {
        segs[nod] = 1;
    }
    else
    {
        int mid = (b + e)/2;
        Build(2*nod+1,b,mid);
        Build(2*nod+2,mid+1,e);
        segs[nod] = segs[2*nod+1] + segs[2*nod+2];
    }
}
void Update(int nod,int b,int e,int pt)
{
    if(b == e)
    {
        segs[nod] = 0;
    }
    else
    {
        int mid = (b + e)/2;
        if(pt <= mid) Update(2*nod+1,b,mid,pt);
        else Update(2*nod+2,mid+1,e,pt);
        segs[nod] = segs[2*nod+1] + segs[2*nod+2];
    }
}
int GetId(int nod,int b,int e,int v)
{
    //printf("%d %d %d %d\n",nod,b,e,segs[nod]);
    if(b == e) return b;
    int mid = (b + e)/2;
    if(segs[2*nod+1] >= v) return GetId(2*nod+1,b,mid,v);
    else return GetId(2*nod+2,mid+1,e,v - segs[2*nod+1]);
}
ll Compute(int n,int m)
{
    for(int i = 1 ; i<=n ; i++)
    {
        ll temp = pts[i].first.first;
        pts[i].first.first = pts[i].first.second;
        pts[i].first.second = temp;
    }
    sort(pts+1,pts+n+1);
    for(int i = 1 ; i<=n ; i++)
    {
        remp[pts[i].second] = i;
        mp[i] = pts[i].second;
    }
    for(int i = 1 ; i<=n ; i++)
    {
        ll temp = pts[i].first.first;
        pts[i].first.first = pts[i].first.second;
        pts[i].first.second = temp;
    }
    sort(pts+1,pts+n+1);
    for(int i = 1 ; i<=n ; i++)
    {
        remp2[pts[i].second] = i;
    }
    ll ans = 0;
    int cur = n;
    Build(0,1,n);
    ll INF = pow(10,9) + 5;;
    for(int i = 1 ; i<=n ; i++)
    {
        ll l = pts[i].first.first;
        ll b = INF;
        int v = min(cur,m-i+2);
        if(v > 0)
        {
            int idx = GetId(0,1,n,v);
            int id = mp[idx];
            int idx2 = remp2[id];
            b = pts[idx2].first.second;
        }
        b = min(pts[i].first.second,b);
        ll cand = l*b;
        ans = max(ans,cand);
        if(i == m + 1)break;
        cur--;
        Update(0,1,n,remp[pts[i].second]);
    }
    return ans;
}
int main()
{
    int tc,t;
    scanf("%d",&tc);
    for(t = 1 ; t<=tc ; t++)
    {
        int n,i,m;
        scanf("%d %d",&n,&m);
        for(i = 1 ; i<=n ; i++)
        {
            scanf("%lld %lld",&pts[i].first.first,&pts[i].first.second);
            pts[i].second = i;
        }
        ll v1 = Compute(n,m);
        for(i = 1 ; i<=n ; i++)
        {
            ll temp = pts[i].first.first;
            pts[i].first.first = pts[i].first.second;
            pts[i].first.second = temp;
        }
        ll v2 = Compute(n,m);
        ll ans = max(v1,v2);
        printf("%lld\n",ans);
    }
    return 0;
}
