#include <iostream>
#include <algorithm>
#include <cstdio>
#include <set>
using namespace std;
#define NLIMIT 100005

pair<int, int> dimen[NLIMIT];
int main()
{
	int t;
	cin >> t;
	while (t--) {
		int n, m;
		cin >> n >> m;
		multiset<int>sec;
		for (int i = 0; i < n; i++) {
			cin >> dimen[i].first >> dimen[i].second;
			sec.insert(dimen[i].second);
		}
		sort(dimen, dimen + n);
		if (m == n) {
			m = n - 1;
		}
		//our purpose is to increase the minimum length
		//So, removing all rectangles
		for (int i = 0; i < m; i++) {
			sec.erase(sec.find(dimen[i].second));
		}
		//then one by one adding rectangles and compute area and finding maximum
		long long ans = 0;
		for (int i = m - 1; ; i--) {
			ans = max(ans, (long long)dimen[i + 1].first * (*(sec.begin())));
			if (i == -1) {
				break;
			}
			sec.insert(dimen[i].second);
			sec.erase(sec.begin());
		}
		cout << ans << endl;
	}
	return 0;
}