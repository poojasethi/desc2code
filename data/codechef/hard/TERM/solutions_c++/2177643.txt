#include <iostream>
#include <stdlib.h>
#include <memory.h>
using namespace std;

#define Mod 1000003
#define Mx 1000005

typedef long long ll;

ll N, K, Rlt;
ll Rev[Mx], val[Mx], sum[200], t[200];

int P, T;
int p[100], Np;

ll pow( int a, int n ){
	if( !n ) return 1;
	if( a == 1 ) return 1;
	ll res;
	res = pow( a, n>>1 );
	res = res*res%Mod;
	if( n & 1 ) res = res*a%Mod;
	return res;
}

int init(){
	val[0] = 1;
	for( int i = 1 ; i < Mod ; i ++ ){
		Rev[i] = pow( i, Mod - 2 );
		val[i] = val[i - 1]*i;
		val[i] %= Mod;
	} 	
}

int Conv_P(){
	Np = 0;
	while( N ){
		p[Np ++] = N%P;
		N /= P;
	}
}

ll H( int k, int n ){
	if( !n ) return 1;
	if( k == 1 ) return 1;
	if( n + k - 1 >= Mod ) return 0;
	ll res;
	res = val[n + k - 1];
	res = res*Rev[val[n]]%Mod;
	res = res*Rev[val[k-1]]%Mod;
	return res;
}

int Sum_(){
	sum[0] = 1, t[0] = 1;
	for( int i = 1 ; i < P ; i ++ ){
		t[i] = H( K, i );
		sum[i] = sum[i - 1] + t[i];
		sum[i] %= Mod;
	}
}

ll find(){
	
	ll res[100], cur;
	if( !Np ) return 1;
	for( int i = 0; i < Np ; i ++ ){
		if( !i ) {
			res[i] = sum[p[i]];
			cur = 1;
			continue;
		}
		if( !p[i] ) {
			cur = cur*sum[P - 1];
			cur %= Mod;
			res[i] = res[i - 1];
		}
		else{
			cur = cur*sum[P - 1];
			cur %= Mod;
			res[i] = t[p[i]]*res[i - 1]%Mod;
			res[i] = ( res[i] + cur*sum[p[i] - 1]%Mod ) % Mod;
		}
	}
	return res[Np -1];
}	
		 
int main(){
	
		
	scanf( "%d", &T );
	
	init();
	
	while( T -- ){
		
		cin >> N >> K >> P;
		
		Conv_P();
		
		K %= Mod;
		
		Sum_();
		
		Rlt = find();
		
		cout << Rlt << endl;
	}
	
	return 0;
}	
			
			
