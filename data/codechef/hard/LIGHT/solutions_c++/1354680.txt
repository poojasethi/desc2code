// Codechef LIGHTS
#include <cstdio>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;
#define PI M_PI
#define ON 0
#define OFF 1
#define SPECIAL 2

struct light {
	double x, y, z;
	light(double x, double y, double z):x(x),y(y),z(z*PI/180){}
};	

vector<light> lights;

void collate_intersections(vector<pair<double, char> > &ints,
					   	   double height) {
	for(int i=0; i<lights.size(); i++) {
		double distance=(lights[i].y-height)*tan(lights[i].z);
        if(distance>=0) {
		    ints.push_back(make_pair(lights[i].x-distance, ON));
		    ints.push_back(make_pair(lights[i].x+distance, OFF));
        }
	}
}

bool check_range_covered(vector<pair<double, char> > &things,
						 double start, double end) {
	int count=0;
	bool bad=false;
						 
	for(int i=0; i<things.size(); i++) {
		if(things[i].second==OFF) count--; // this thing is an end
		else if(things[i].second==ON) count++; // this thing is a start
		if(count<=0 && things[i].first>=start && things[i].first<=end) {
			bad=true;
		}
	}
	return !bad;
}

int main() {
	int n; scanf("%d", &n);
	double l, r; scanf("%lf %lf", &l, &r);
	for(int i=0; i<n; i++) {
		double x, y, z; scanf("%lf %lf %lf", &x, &y, &z);
		lights.push_back(light(x, y, z));
	}
	double min=0, max=1000;
	while(max-min>1e-6) {
		// Test if flight is possible at this height
		double mid = (min+max)/2;
		vector<pair<double, char> > intersections;
		// Find all intersections at this height
		collate_intersections(intersections, mid);
		intersections.push_back(make_pair(l, SPECIAL));
		intersections.push_back(make_pair(r, SPECIAL));

		sort(intersections.begin(), intersections.end());

		bool covered = check_range_covered(intersections, l, r);
		if(covered==false) max=mid;
		else min=mid;
	}
	printf("%.7lf\n", min);
}


