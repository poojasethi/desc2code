/* Divanshu Garg */

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <climits>
#include <cctype>
#include <cassert>

using namespace std;

#define ull unsigned long long
#define ill long long int
#define pii pair<int,int>
#define pb(x) push_back(x)
#define F(i,a,n) for(int i=(a);i<(n);++i)
#define FD(i,a,n) for(int i=(a);i>=(n);--i)
#define FE(it,x) for(it=x.begin();it!=x.end();++it)
#define V(x) vector<x>
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%llu",&x)
#define M(x,i) memset(x,i,sizeof(x))
#define debug(i,sz,x) F(i,0,sz){cout<<x[i]<<" ";}cout<<endl
#define MAX(a,b) ((a)>(b)?(a):(b))
int ABS(int a) { if ( a < 0 ) return (-a); return a; }
#define fr first
#define se second

/* Relevant code begins here */

/* Input from file or online */

void input() {
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
#endif
}

/* Input opener ends */

struct light {
    double x,y,z;
    double theta,x1,x2;
    light(double _x,double _y,double _z,double _t,double _x1,double _x2) {
        x = _x; y = _y; z = _z;
        theta = _t;
        x1 = _x1; x2 = _x2;
    }
};

bool operator<(light a,light b) {
    if ( a.x1 == b.x1 ) return a.x<b.x;
    return a.x1<b.x1;
}

#define EPS 0.00000001

V(light) event;

int main() {
    input();
    int n; S(n);
    double l,r; scanf("%lf %lf",&l,&r);
    F(i,0,n) {
        double x,y,z;
        scanf("%lf %lf %lf",&x,&y,&z);
        double t = (tan((z*2.0*acos(0.0))/180.0));
        double x1 = x - y*t;
        double x2 = x + y*t;
        event.pb(light(x,y,z,t,x1,x2));
    }
    // cout << event[0].x << " " << event[1].x << endl;

    double low = 0.0, high = 1005.0;
    while ( abs(high-low) > 1e-8 ) {
        double mid = high+low; mid /= 2.0;
        // cout << mid << endl;
        F(i,0,event.size()) {
            if ( mid > event[i].y ) {
                event[i].x1 = 10000000.0;
                event[i].x2 = 10000000.0;
            }
            event[i].x1 = event[i].x - (event[i].y-mid)*event[i].theta;
            event[i].x2 = event[i].x + (event[i].y-mid)*event[i].theta;
        }
        sort(event.begin(),event.end());
        double end = l;
        F(i,0,event.size()) {
            if ( mid > event[i].y ) continue;
            if ( event[i].x1-EPS < end ) end = max(end,event[i].x2);
        }
        if ( end+EPS > r ) low = mid;
        else high = mid;
    }
    printf("%.10lf\n", high);
    return 0;
}