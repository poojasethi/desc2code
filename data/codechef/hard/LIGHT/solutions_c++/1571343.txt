#include <algorithm>
#include <iostream>
#include <cstring>
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <string>
#include <cmath>
#include <set>
#include <map>

using namespace std;

typedef long long LL;
typedef long double LD;

#define pb push_back
#define mp make_pair
#define sz(A) (int)(A).size()

const int N = int(5e4 + 5), I = 100;
const LD eps = (1e-8);

LD x[N], y[N], z[N], l, r;
pair<LD, int> p[2 * N];
int t;

LD norm(LD a) {
	return min(r, max(l, a));
}

int main() {
	int n;
	cin >> n >> l >> r;	
	
	for (int i = 0; i < n; i++) 
		cin >> x[i] >> y[i] >> z[i];

	LD L = 0, R = 1001;

	for (int i = 0; i < I; i++) {
		bool ok = 1;

		LD mid = (L + R) / 2;

		t = 0;
		for (int j = 0; j < n; j++) {
			if (y[j] > mid) {
				LD dx = (y[j] - mid) * tan(z[j] / 180 * M_PI);				
				p[t++] = mp(norm(x[j] - dx), -1);
				p[t++] = mp(norm(x[j] + dx),  1);
			}
		}		

		sort(p, p + t);
		int bal = 0;

		if (!t || p[0].first > l + eps || p[t - 1].first < r - eps) {
			ok = 0;
		}

		LD sum = 0;

		for (int j = 0; j < t; j++) {
			if (bal < 0)
				sum += p[j].first - p[j - 1].first;
			bal += p[j].second;
		}	

		if (abs(sum - (r - l)) > eps)
			ok = 0;

		if (ok)
			L = mid;
		else
			R = mid;
	}

	cout.precision(6);
	cout << fixed << L << endl;

	return 0;
}
