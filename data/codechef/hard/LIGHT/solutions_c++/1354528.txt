#include <cstdio>
#define _USE_MATH_DEFINES 
#include <math.h>
#include <algorithm>
#include <vector>


#define mp make_pair
#define f first
#define s second

using namespace std;

class tLight {
public:
	double x, y, z;
	tLight() { }
	tLight(double _x, double _y, double _z) : x(_x), y(_y), z(_z) { }
}light[55555];

vector<pair<double, double> > c;

double deltax(double dy, double angle) {
	double ret = tan((angle/180.0f)*M_PI) * (dy);
	if (ret < 0) {
		ret = -ret;
	}
	return ret;
}

bool test(double l, double r) {
	int at = 0;
	while (at < c.size() && c[at].s < l) {
		at++;
	}
	if (at >= c.size() || c[at].f > l) {
		return false;
	}
	double end = c[at].s;
	while (at < c.size()) {
		if (c[at].f > end) {
			return false;
		}
		end = max(end, c[at].s);
		if (end >= r) {
			return true;
		}
		at++;
	}
	return false;
}

int main() {
	int n;
	double l, r;
	scanf("%d%lf%lf", &n, &l, &r);
	for (int i=0; i<n; i++) {
		double a, b, c;
		scanf("%lf%lf%lf", &a, &b, &c);
		light[i] = tLight(a, b, c);
	}

	double low = 0, high = 9999;
	for (int t=0; t<128; t++) {
		double mid = (high+low)/2.0f;
		c.clear();
		for (int i=0; i<n; i++) {
			if (light[i].y > mid) {
				double dx = deltax(light[i].y-mid, light[i].z);
				c.push_back(mp(light[i].x-dx, light[i].x+dx));
			}
		}
		sort(c.begin(), c.end());
		bool result = test(l, r);
		if (result) low = mid;
		else high = mid;
	}
	printf("%.9lf\n", low);
	return 0;
}