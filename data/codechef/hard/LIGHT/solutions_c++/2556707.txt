#include <cstdio>
#include <iostream>
#include <stack>
#include <queue>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <climits>
#include <cctype>
 #define ill long long
#define s(n)     scanf("%d",&n)
#define sc(n)    scanf("%c",&n)
#define sl(n)    scanf("%lld",&n)
#define sf(n)    scanf("%lf",&n)
#define ss(n)    scanf("%s",n)
#define INF      (int)1e9
#define EPS      1e-8
#define bitcount __builtin_popcount
#define gcd      __gcd
#define forall(i,a,b) for(int i=a; i<b; i++)
#define foreach(v, c) for( typeof( (c).begin()) v = (c).begin();   v != (c).end();  ++v)
#define all(a) a.begin(), a.end()
#define in(a,b) ( (b).find(a) != (b).end())
#define pb  push_back
#define fill(a,v) memset(a, v, sizeof a)
#define sz(a) ((int)(a.size()))
#define mp  make_pair
#define maX(a,b) ( (a) > (b) ? (a) : (b))
#define miN(a,b) ( (a) < (b) ? (a) : (b))
#define checkbit(n,b)  ( (n >> b) & 1)
#define DREP(a) sort(all(a));  a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind) (lower_bound(all(arr),ind)-arr.begin())
#define pii pair<int, int>
#define fr first
#define sec second
#define MAX 51000
#define rep while
#define pi  (2*acos(0.0))
#define sq(a) ((a)*(a))
#define mod (int)((1e9)+7)
using namespace std;
double x[MAX], y[MAX], z[MAX];
struct state {
    double x;
    int ends;
    state(double a, int ends) {
        x = a;
        this->ends = ends;
    }
};
bool operator<(state a, state b) {
    if(a.x == b.x) 
        return a.ends >b.ends;
    return a.x < b.x;
}
int n;
double l, r;
vector<state> v;
bool safe(double h) {
    v.clear();
    forall(i, 0, n) {
        if(y[i] < h) continue;
        double h1 = y[i] - h;
        double base = h1*tan((z[i]*pi)/180.00);
        v.pb(state(x[i] - base, 1));
        v.pb(state(x[i]+base, -1));
    }
    v.pb(state(l, 0));
    v.pb(state(r, 0));
    sort(v.begin(), v.end());
    double x = -INF;
    int cnt = 0;
    forall(i, 0, v.size()) {
        if(v[i].x >= l && v[i].x <= r) {
            if(cnt == 0)
                return false;
        }
        x = v[i].x;
        cnt += v[i].ends;
    }

    return true;
}
int main() {
    
    s(n);
    sf(l);  sf(r);
    forall(i, 0, n) {
        sf(x[i]);   sf(y[i]);   sf(z[i]);
    }

    double low = 0, high = 1000;
    double ans = -1;

    while(high - low > EPS) {
        double mid = (high + low)/2;
        if(safe(mid)) {
            ans = max(mid, ans);
            low = mid;
        } else {
            high = mid;
        }
    }

    printf("%0.8lf\n", ans);

}