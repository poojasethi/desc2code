#include <cstdio>
#include <string>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <cstring>
#include <utility>
#include <cmath>
#include <stack>
#include <queue>
#include <map>
#include <bitset>
#include <list>
#include <set>
#include <cassert>
#include <iostream>
#include <sstream>
#include <algorithm>

using namespace std;

#define fill(a,val) memset(a,val,sizeof(a))
#ifdef LOCAL
#define debug(format,args...) {cerr << #args << " -> "; fprintf(stderr,format,args); cerr << endl;}
#else
#define debug(args...);
#endif

typedef vector<int> vi;
typedef pair<int,int> pii;
typedef long long ll;

struct Source{
	double x,y,theta;

	bool operator < (const Source& b) const{
		return x < b.x;
	}
};

const int N = 555555;
const double PI = acos(-1.0);
Source Light[N];
int nLights;
double L,R;

struct LightedRegion{
	double left,right;
	bool operator < (const LightedRegion& b) const{
		if(left != b.left) return left < b.left;
		else return right < b.right;
	}
};

LightedRegion Regions[N];

inline double toRadian(double theta){
	return theta * PI / 180.0;
}

void find(double& left,double& right){
	sort(Regions,Regions+nLights);
	if(Regions[0].left-L > (double)1e-7) return; 
	for(int i=0;i<nLights;i++){
		//cerr << Regions[i].left << endl;
		if(right > Regions[i].right) continue;
		if(right - Regions[i].left > (double)1e-7) right = max(right,Regions[i].right);
		else return;
		if(right > R){
			right = R;
			return;
		}
	}
}

double solve(double low,double high){
	//cerr << low << " " << high << "\n";
	if(high - low < (double)1e-7) return low;
	bool ok = true;
	double minX = L,maxX = L;
	double mid = (low + high) / 2.0;
	for(int i=0;i<nLights;i++){
		double delta = (Light[i].y-mid) * tan(toRadian(Light[i].theta));
		Regions[i].left = Light[i].x - delta;
		Regions[i].right = Light[i].x + delta;
	}
	find(minX,maxX);
	//cerr << "Min Max : " << minX << " " << maxX << "\n";
	if(fabs(minX - L) < (double)1e-7 && fabs(maxX - R) < (double)1e-7) ok = true;
	else ok = false;
	if(ok) return solve(mid,high);
	else return solve(low,mid);
}

int main(){
	#ifdef LOCAL
	freopen("in.txt","r",stdin);
	#endif
	scanf("%d %lf %lf",&nLights,&L,&R);
	double maxY = -1.00;
	for(int i=0;i<nLights;i++){
		scanf("%lf %lf %lf",&Light[i].x,&Light[i].y,&Light[i].theta);
		maxY = max(maxY,Light[i].y);
	}
	double ans = solve(0.0,maxY);
	printf("%.7lf\n",ans);
	return 0;
}