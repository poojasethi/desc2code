#include <stdio.h>
#include <algorithm>
#include <math.h>
#include <vector>

using namespace std;
#define eps 1e-7
#define all(v) (v).begin(), (v).end()
const double Pi = acos(-1.0);

inline int cmp(double x, double y = 0, double tol = eps) {
	return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1;
}

struct point {
	double x, y, z;
	point(double x = 0, double y = 0): x(x), y(y) {}
	point operator +(point q) { return point(x + q.x, y + q.y); }
	point operator -(point q) { return point(x - q.x, y - q.y); }
	point operator *(double t) { return point(x * t, y * t); }
	point operator /(double t) { return point(x / t, y / t); }
	double operator *(point q) { return x * q.x + y * q.y; } //produto escalar
	double operator %(point q) { return x * q.y - y * q.x; } //produto cruzado
	double polar() { return ((y > -eps) ? atan2(y,x) : 2*Pi + atan2(y,x)); } //nao trocar comparacao por cmp(y)>=0
	double mod() { return sqrt(x * x + y * y); }

	int cmp(point q) const {
		if (int t = ::cmp(x, q.x)) return t;
		return ::cmp(y, q.y);
	}
	bool operator ==(point q) const { return cmp(q) == 0; }
	bool operator !=(point q) const { return cmp(q) != 0; }
	bool operator < (point q) const { return cmp(q) < 0; }
	static point pivot;
};
int n;
double r, l;
point p[51000];
struct no {
	double a, b;
	bool operator<(const no &e) const {
		return a < e.a-eps;
	}
};
no q[51000];
int top;

bool possivel(double h) {
	top = 0;
	double d;
	for (int i = 0; i < n; i++) if (cmp(h, p[i].y) < 0) {
		d = tan(p[i].z) * (p[i].y-h);
		//printf("r=%lf   l=%lf  d=%lf\n", r, l, d);  
		if (!(cmp(p[i].x+d, r) <  0 || cmp(p[i].x-d, l) > 0)) {
			q[top].a = p[i].x-d;
			q[top].b = p[i].x+d;
			top++;
		}
	}
	//printf("top=%d\n", top);
	sort(q, q+top);
	if (top==0 || cmp(q[0].a, r) > 0) return false;
	double fim = q[0].b;
	for (int i = 1; i < top; i++) {
		if (cmp(fim, q[i].b) >= 0) continue;
		if (cmp(fim, q[i].a) < 0) return false;
		
		fim = q[i].b;
	}
	return cmp(fim, l) >= 0;
}

double busca(double ini, double fim) {
	double mid;
	for (int i = 0; i < 50; i++) {
		mid = 0.5*(ini+fim);
		if (possivel(mid)) ini = mid;
		else fim = mid;
	}
	return ini;
}

int main() {
	double maxx=-1;
	scanf("%d %lf %lf", &n, &r, &l);
	for (int i = 0; i < n; i++) {
		scanf("%lf %lf %lf", &p[i].x, &p[i].y, &p[i].z);
		p[i].z = Pi*p[i].z / 180;
		if (cmp(maxx, p[i].y) < 0) maxx = p[i].y;
	}
	//printf("%d\n",	possivel(3.4));
	printf("%.8lf\n", busca(0, maxx));
	return 0;
}
