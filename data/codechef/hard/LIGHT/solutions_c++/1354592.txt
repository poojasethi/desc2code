#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;

#define ld double

const int MAX = 50000;
const ld PI = 4 * atan((ld)1);

int n;
ld start, stop;

ld t[MAX];
ld y[MAX];
ld x[MAX];
pair<ld, int> points[MAX * 2 + 4];

inline ld width(int i, ld h)
{
        if (y[i] < h) return 0;
        return (y[i] - h) * t[i];
}

inline bool possible(ld h)
{
        points[0].first = start; points[0].second = -1;
        points[1].first = start; points[1].second = 1;
        points[2].first = stop; points[2].second = -1;
        points[3].first = stop; points[3].second = 1;

        int pos = 4;
        int end = n * 2 + 4;
        for (int i = 0; i < n; i++, pos += 2)
        {
                ld w = width(i, h);
                points[pos].first = x[i] - w; points[pos].second = -1;
                points[pos+1].first = x[i] + w; points[pos+1].second = 1;
        }
        sort(points, points + end);

        int count = 0;
        for (int i = 0; i < end; i++)
        {
                count -= points[i].second;
                if (count == 0 && points[i].first >= start &&
                        points[i].first <= stop)
                {
                        return false;
                }
        }
        return true;
}

inline ld search(ld low, ld high)
{
        ld mid;
        while (high - low >= 1e-6)
        {
                mid = (low + high) / 2;
                if (possible(mid))
                {
                        low = mid;
                }
                else
                {
                        high = mid;
                }
        }
        return mid;
}

int main()
{
        scanf("%d %lf %lf", &n, &start, &stop);

        for (int i = 0; i < n; i++)
        {
                ld angle;
                scanf("%lf %lf %lf", x + i, y + i, &angle);
                t[i] = tan(angle / 180 * PI);
        }

        printf("%.7lf\n", search(0, 10000));
}