#include<iostream>
#include<cstdio>
#include<vector>
#include<algorithm>
#include<cmath>
using namespace std;
const int MAX_N = int(5e4)+7;
const double PI = 3.14159265;
int n;
double L, R, x[MAX_N], y[MAX_N], z[MAX_N];
bool check(double h)
{
  vector< pair<double, int> > inval;
  inval.push_back(make_pair(L, 0));
  inval.push_back(make_pair(R, 0));
  for (int i = 0; i < n; i++) {
    if (h > y[i]) continue;
    double x1 = x[i] - (y[i]-h)*tan(z[i]*PI/180.0), x2 = x[i] + (y[i]-h)*tan(z[i]*PI/180.0);
    inval.push_back(make_pair(x1,1));
    inval.push_back(make_pair(x2,-1));
  }
  sort(inval.begin(), inval.end());
  int cnt = 0;
  bool in = false, out = false;
  for (int i = 0; i < inval.size(); i++) {
    cnt += inval[i].second;
    if (inval[i].second == 0) in?out = true:in = true;
    if (in && cnt <= 0) return false;
    if (out) break;
  }
  return true;
}
double solve()
{
  double lo = 0, hi = 2000, mi;
  for (int i = 0; i < 100; i++) {
    mi = (lo + hi)/2;
    if (check(mi)) lo = mi;
    else hi = mi;
  }
  return hi;
}
int main()
{
  scanf ("%d %lf %lf", &n, &L, &R);
  for (int i = 0; i < n; i++) scanf ("%lf %lf %lf", &x[i], &y[i], &z[i]);
  printf ("%0.12lf\n", solve());
  return 0;
}
