/*
    	Author - Shubham Shukla (shuklas664)
*/

#include <bits/stdc++.h>

typedef long long 	ll;

#define	MOD			1000000007
#define scll(t)		scanf("%lld",&t)
#define sc(t)		scanf("%d",&t)
#define max(a,b)	(a>=b?a:b)
#define min(a,b)	(a<b?a:b)
#define gc			getchar_unlocked
#define mp			make_pair
#define pb			push_back
#define freinp		freopen("in.txt","r",stdin)
#define freout		freopen("out.txt","w",stdout)
#define Size(a)		int((a).size())
#define F			first
#define S			second
#define pii         pair<int,int>

using namespace std;


/* This is for Fast Input

void scanint(int &x)
{
	register int c = gc();
	x = 0;
	for(;(c<48 || c>57);c = gc());
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
}

void scanint(int &x)
{
	register int c = gc();
	x = 0;
	int neg = 0;
	for(;((c<48 || c>57) && c != '-');c = gc());
	if(c=='-') {neg=1;c=gc();}
	for(;c>47 && c<58;c = gc()) {x = (x<<1) + (x<<3) + c - 48;}
	if(neg) x=-x;
}

*/
int N, K, twiceN;

ll oddCount[2000010],evenCount[2000010];
int rightD[2000010], leftD[2000010];


int main()
{
	//freinp;
	//ios_base::sync_with_stdio(false);
	int t,i,x,y, A, B;
	ll total, totalOverlappedCats, ans, intersect;
	sc(t);
	while(t--)
	{

		sc(N);
		sc(K);

		twiceN = 2*N;
		totalOverlappedCats = 0LL;
		total = (ll)N*(ll)N;//total points
		for(i=0;i<2000010;i++)
		{
            oddCount[i] = 0LL;
            evenCount[i] = 0LL;
            leftD[i] = 0;
            rightD[i] = 0;
		}
		for(i=0;i<K;i++)
		{
            sc(x);
            sc(y);
            leftD[x-y+N] = 1;
            rightD[x+y-1] = 1;
        }

		//Counting total cats on leftD and rightD diagonal (with overlaps)
		for(i=1;i<=twiceN-1;i++)
		{
            //leftD diagonal
            if(leftD[i] == 1)
            {
                if(i<=N)
                    totalOverlappedCats += (ll)i;
                else totalOverlappedCats += (ll)(twiceN - i);
            }
            //rightD diagonal
            if(rightD[i] == 1)
            {
                if(i<=N)
                    totalOverlappedCats += (ll)i;
                else totalOverlappedCats += (ll)(twiceN - i);
            }
		}

		//Creating even/odd count for rightD diagonal
		for(i=1;i<=twiceN-1;i++)
		{
            oddCount[i]  = oddCount[i-1];
            evenCount[i] = evenCount[i-1];
            if(rightD[i]==1)
            {
                if(i%2==1)
                    oddCount[i]++;
                else
                    evenCount[i]++;
            }

		}

		//Now removing Intersections
		intersect = 0LL;
		
		if(N%2==1)//If N is odd then even left diagonal will get affected by even right diagonal and odd leftD by odd rightD
		{
            for(i=1;i<=twiceN-1;i++)
            {
                if(leftD[i] == 1)
                {
                    if(i<=N)
                    {
                        A = N-i+1;
                        B = N+i-1;
                    }
                    else
                    {
                        x = twiceN - i;
                        A = N-x+1;
                        B = N+x-1;
                    }
                    if(i%2==0)
                        intersect += (evenCount[B] - evenCount[A-1]);
                    else
                        intersect += (oddCount[B] - oddCount[A-1]);

                }
            }
		}
		else //If N is even then even left diagonal will be affected by odd right diagonal and vice versa
		{
            for(i=1;i<=twiceN-1;i++)
            {
                if(leftD[i] == 1)
                {
                    if(i<=N)
                    {
                        A = N-i+1;
                        B = N+i-1;
                    }
                    else
                    {
                        x = twiceN - i;
                        A = N-x+1;
                        B = N+x-1;
                    }
                    if(i%2==1)
                        intersect += (evenCount[B] - evenCount[A-1]);
                    else
                        intersect += (oddCount[B] - oddCount[A-1]);

                }
            }
		}



		//No cats = total - cats
		ans = total - (totalOverlappedCats - intersect);
		printf("%lld\n",ans);

	}
}


