#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<utility>
#include<cstring>
#include<cmath>
#define LL long long int
#define mod 1000000007
#define vi vector<int>
#define vvi vector < vi >
#define pii pair<int,int>
#define all(c) c.begin(),c.end()
#define sf(x) scanf("%lld",&x);
#define sf2(x,y) scanf("%d%d",&x,&y);
#define mem(a,val) memset(a,val,sizeof(a))
#define nl printf("\n");
#define pb push_back
#define mp make_pair
//#define f first
//#define s second
#define cf I64
using namespace std;
LL l[1000005],r[1000005],dp1[3000006],dp2[3000005],even[3000006],odd[3000005];
int main()
{	LL t,i,j,n,m,k,sum1,sum2,sum3,x;
	sf(t);
	while(t--)
	{	sf(n);sf(k);
		for(i=0;i<k;i++)
			scanf("%lld%lld",&l[i],&r[i]);
		mem(dp1,0);
		mem(dp2,0);
		mem(even,0);
		mem(odd,0);
		sum1=sum2=sum3=0;
		//sum of main diagnol elements :
		for(i=0;i<k;i++) dp1[l[i]+r[i]]++;
		for(i=2;i<=2*n;i++) 
		{	if(dp1[i])
			{	sum1+=( (i<=n+1) ? (i-1) : (2*n-i+1) );
			}
		}
		//sum of sec diagnol elements :
		for(i=0;i<k;i++) dp2[n-1-(l[i]-r[i])]++;
		for(i=0;i<=2*(n-1);i++)
		{	if(dp2[i])
			{	sum2+=( (i<n) ? (i+1) : (2*n-1-i) ) ;
			}
		}
		//removing sum of common elements :
		if(n%2==1)
		{	for(i=0;i<=2*(n-1);i++)
			{	if(i%2==0)
				{	even[i]=( (dp2[i]>0) ? 1 : 0 );
					odd[i]=0;
				}
				else
				{	even[i]=0;
					odd[i]=( (dp2[i]>0) ? 1 : 0 );;
				}
			}
		}
		else if(n%2==0)
		{	for(i=0;i<=2*(n-1);i++)
			{	if(i%2==0)
				{	odd[i]=( (dp2[i]>0) ? 1 : 0 );
					even[i]=0;
				}
				else
				{	odd[i]=0;
					even[i]=( (dp2[i]>0) ? 1 : 0 );;
				}
			}
		}
		for(i=1;i<=2*(n-1);i++)
		{	even[i]+=even[i-1];
			odd[i]+=odd[i-1];
		}
		for(i=2;i<=2*n;i++)
		{	if(i%2==0&&dp1[i])
			{	if(i<=n+1) x=i-2;
				else x=2*n-i;
				sum3+=even[(n-1)+x];
				if((n-1)-x-1>=0)
					sum3-=even[(n-1)-x-1];
			}
			else if(i%2==1&&dp1[i])
			{	if(i<=n) x=i-2;
				else x=2*n-i;
				sum3+=odd[(n-1)+x];
				if((n-1)-x-1>=0)
					sum3-=odd[(n-1)-x-1];
			}
		}
		//printf("%d %d %d\n",sum1,sum2,sum3);
		printf("%lld\n",n*n-(sum1+sum2-sum3));
	}
	return 0;
}
/*
2
5 3
2 2
4 2
2 4

*/
