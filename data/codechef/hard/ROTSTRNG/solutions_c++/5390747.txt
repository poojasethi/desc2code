#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
 
using namespace std;
 
int b[ 1000005 ] , n , m, len, X;
char p[ 1000005 ], t[ 1000005 ];
int g[1000005 ];
 
void kmp1()
{
    int i=0, j=-1;
    b[i]=j;
    while (i<m)
    {
        while (j>=0 && p[i]!=p[j]) j=b[j];
        i++; j++;
        b[i]=j;
    }
}
 

 
void kmp2()
{
    int i=0, j=0;
for ( int i = 0 ; i < n ; i++)
g[i] = 0 ; 
    while (i<n)
    {
        while (j>=0 && t[i]!=p[j]) j=b[j];
        i++; j++;
        if (j==m)
        {
            if ( ( i - j ) < m  )
            {
             g[i-j] = 1 ;
            } 
            j=b[j];
        }
    }
}
 
void solve()
{
     
 
     scanf ( "%s" , p );
     
     len = strlen ( p );
     m = len;
     n = 2 * len;
     int a , b;
     
     for ( int i = 0; i < len; i++ )
         t[i] = t[i+len] = p[i];
     
     p[len+len] = '\0';
     
     kmp1(); 
     kmp2();
 
     scanf ( "%d%d" , &a , &b );
 
     int pos = 0, ret = 0;
     
     for ( int i = 0; i < 500001; i++ )
     {
         pos += len - a;
         pos %= len;
         
         ret++;
         
         if ( g[pos] == 1 )
         {
              printf ( "%d\n" , ret );
              return;
         }
         
         pos += len - b;
         pos %= len;
         
         ret++;
         
         if ( g[pos] == 1 )
         {
              printf ( "%d\n" , ret );
              return;
         }
     }
     
     printf ( "-1\n" );
 
}
 
int main()
{
    int n;
    
    cin >> n;
    
    for ( int i = 0; i < n; i++ )
        solve();
    
    return 0;
}
 