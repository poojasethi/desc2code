#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<math.h>
#include<algorithm>
#include<set>
#include<map>
#include<utility>
#include<vector>
#include<string>
#include<stack>
#include<queue>
using namespace std;
#define MAXN 500006
char str[2*MAXN];
bool mark[MAXN];
int failure[2*MAXN];
bool check(int N, int d)
{
    int i;
    for (i=d; i<N; ++i)
    {
        if (str[i] != str[i-d]) return false;
    }
    return true;
}
void dmark(int N, int d)
{
    int i;
    for (i=d-1; i<N; i+=d) mark[i] = true;
}
void prep(int N)
{
    int i,j,d,n=N,f;
    for (i=N; i<2*N; ++i) str[i] = str[i-N];
    N *= 2;
    for (i=0; i<N; ++i) mark[i] = 0;
    f = failure[0] = -1;
    for (i=1; i<N; ++i)
    {
        while (f != -1 && str[i] != str[f+1]) f = failure[f];
        if (str[i] == str[f+1]) ++f;
        if (f == n-1) mark[i-n] = true, f = failure[f];
        failure[i] = f;
    }
    mark[n-1] = 1;
    N /= 2;
    ///for (i=0; i<N; ++i) printf("%d", mark[i]); puts("");
}
int find(int N, int m1, int m2)
{
    int ans, cur, temp;
    if (mark[(m1-1+N)%N]) return 1;
    for (ans = 1; ans <= N; ++ans)
    {
        cur = ((long long) (m1+m2) * ans)%N;
        if (cur == 0) temp = N-1;
        else temp = cur-1;
        if (mark[temp]) return ans*2;
        cur = (cur+m1) % N;
        if (cur == 0) temp = N-1;
        else temp = cur-1;
        if (mark[temp]) return ans*2+1;
    }
    return -1;
}
int main()
{
    int T,N,m1,m2;
    scanf("%d", &T);
    while (T--)
    {
        scanf("%s", str);
        N = strlen(str);
        prep(N);
        scanf("%d %d", &m1, &m2);
        printf("%d\n", find(N,N-m1,N-m2));
    }
    return 0;
}
