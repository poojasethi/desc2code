#include<iostream>
#include<string.h>
using namespace std;
#define N 1000005
#define K 500005
int can[N],failure[K];
char str[N],pattern[K];
void KMP_Fill_can(int n,int k)
{
     int i,len=0,j;
     for(i=0;i<=n-k;i++)
        can[i]=0;
     failure[0]=0;
     i=1;
     while(i<k)
     {
        if(pattern[i]==pattern[len])
        { len++; failure[i]=len; i++; }
        else
        {
            if(len!=0)
            { len=failure[len-1]; }
            else
            {  failure[i]=0; i++; }
        }
     }
     i=0; j=0;
     while(i<n)
     {
        if(pattern[j]==str[i])
        { j++; i++; }
        if(j==k)
        { can[i-j]=1;  j=failure[j-1]; }
        else if(pattern[j]!=str[i])
        {
             if(j!=0)   j=failure[j-1];
             else    i++;
        }
     }
}   
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
       int i,j,n,m,p;
       scanf("%s",pattern);
       scanf("%d%d",&m,&p);
       n=strlen(pattern);
       strcpy(str,pattern);
       strcat(str,pattern);
       KMP_Fill_can(2*n,n);
       int ans=0,pos=0;
       for(i=0;i<n;i++)
       {
           pos=pos-m;  ans++;
           if(pos<0) pos+=n;
           if(can[pos]==1)  break;
           pos=pos-p;  ans++;
           if(pos<0) pos+=n;
           if(can[pos]==1)  break;
       }
       printf("%d\n",ans);
    }
    return 0;
}
       
