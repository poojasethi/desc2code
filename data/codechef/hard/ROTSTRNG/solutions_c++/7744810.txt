#include <bits/stdc++.h>

#define rep(i,n) for(i=1;i<=n;i++)
#define Rep(i,n) for(i=0;i<n;i++)
#define For(i,a,b) for(i=a;i<=b;i++)

#define pb(x) push_back(x)
#define sz(x) x.size()

#define mem(ara,val) memset(ara,val,sizeof(ara))
#define eps 1e-9

#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define sl(x) scanf("%lld",&x)
#define sll(x,y) scanf("%lld %lld",&x,&y)
#define slll(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define ss(ch) scanf("%s",ch)
#define pi(x) printf("%d",x)
#define pii(x,y) printf("%d %d",x,y)
#define piii(x,y,z) printf("%d %d %d",x,y,z)
#define pl(x) printf("%lld",x)
#define pll(x,y) printf("%lld %lld",x,y)
#define plll(x,y,z) printf("%lld %lld %lld",x,y,z)
#define ps(ch) printf("%s",ch)
#define Afridi 0
#define NL printf("\n")
#define debug(x) printf("wow  %d !!\n",x)
#define Max 500005
#define INF INT_MAX

typedef long long LL;
typedef unsigned long long ULL;

using namespace std;

LL z[Max],n,a,b;
char str[Max];
bool oka[Max];

void zalgo()
{
    LL i,l,r;
    l = r = 0;
    mem(z,0);
    z[0] = n;
    for(i=1; i<n; i++)
    {
        if(i > r)
        {
            l = r = i;
            while(r < n && str[r] == str[r-l])r++;
            z[i] = r - l;
            r--;
        }
        else
        {
            LL k = i - l;
            if(z[k] < r-i+1)
            {
                z[i] = z[k];
            }
            else
            {
                l = i;
                while(r < n && str[r] == str[r-l])r++;
                z[i] = r - l;
                r--;
            }
        }
    }
    mem(oka,0);
    for(i=0; i<n; i++)
    {
        if(z[i] + i == n)oka[i] = 1;
    }
}

struct node
{
    LL g,x,y;
    void make(LL a,LL b,LL c)
    {
        g = a;
        x = b;
        y = c;
    }
};

node xgcd(LL a,LL b)
{
    if(b == 0)
    {
        node ans;
        ans.make(a,1,0);
        return ans;
    }
    node ans,tmp;
    tmp = xgcd(b,a%b);
    ans.make(tmp.g,tmp.y,(tmp.g - a*tmp.y)/b);
    return ans;
}

LL fun()
{
    LL cnt = n*n,f = 0,tot = 0,cur = 0;
    while(cnt--)
    {
        tot++;
        if(f == 0)
        {
            cur -= a;
        }
        else
        {
            cur -= b;
        }
        f = 1 - f;
        if(cur < 0)cur += n;
        LL baki = n - cur;
        if(z[baki] == cur && z[cur] + cur == n)
        {
            return tot;
            printf("hehe asole %lld\n",tot);
            break;
        }
    }
    return -1;

    LL mn = 1000000000000000ll,i;
    for(i=0; i<n; i++)
    {
        if(oka[i])
        {
            LL d = n - i;
            LL A = a+b;
            LL B = -n;
            node my = xgcd(A,B);
            //LL G = my.g;
            //printf("A %lld B %lld d %lld(%lld)\n",A,B,d,d+b);
            //printf("%lld %lld %lld\n",my.x,my.y,my.g);
            if(d % my.g == 0)
            {
                //printf("lol\n");
                LL X = my.x * (d/my.g);
                LL Y = my.y * (d/my.g);
                LL G = abs(B);
                G/=my.g;
                G=abs(G);
                //printf("X %lld\n",X);
                if(X < 0)
                {
                    LL p = -X/G;
                    X += (G*p);
                    if(X < 0)X+=G;
                    if(X == 0)X+=G;
                }
                else
                {
                    LL p = X/G;
                    X -= (p*G);
                    if(X == 0)X+=G;
                }
                LL ans = 2*X;
                mn = min(ans,mn);
            }
            //printf("A %lld B %lld d %lld\n",A,B,d+b);
            //printf("%lld %lld %lld\n",my.x,my.y,my.g);
            if((d+b) % my.g == 0)
            {
                //puts("hi");
                LL X = my.x * ((d+b)/my.g);
                LL Y = my.y * ((d+b)/my.g);
                LL G = abs(B);
                G/=my.g;
                G = abs(G);
                //printf("%lld %lld\n",X,Y);
                //printf("X' %lld\n",X);
                if(X < 0)
                {
                    LL p = -X/G;
                    X += (G*p);
                    if(X < 0)X+=G;
                    if(X == 0)X+=G;
                }
                else
                {
                    LL p = X/G;
                    X -= (p*G);
                    if(X == 0)X+=G;
                }
                LL ans = 2*X - 1;
                mn = min(ans,mn);
            }

        }
    }
    return mn;
}
int main()
{
    LL t,T;
    sl(T);
    rep(t,T)
    {
        ss(str);
        n = strlen(str);
        zalgo();
        sll(a,b);
        LL ans = fun();
        if(ans < 1000000000000ll)pl(ans);
        else printf("-1");
        NL;
    }
    return 0;
}
