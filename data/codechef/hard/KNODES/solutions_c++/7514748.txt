#include <bits/stdc++.h>
using namespace std;
#define pb   push_back
#define maxn    100010
#define lgmaxn  100

vector<int> graph[maxn];
int N,visited[maxn]={0},P[maxn][lgmaxn],T[maxn],L[maxn],log2_[maxn],start[maxn],finish[maxn],TIME=0;//,chq[maxn];
int place[maxn],B[maxn];
/*
void init()
{
	log2_[0]=0;log2_[1]=0;log2_[2]=1;
	int cmp=4;
	for(int i=3;i<=100000;i++){
		if(cmp>i) log2_[i]=log2_[i-1];
		else{
			log2_[i]=log2_[i-1]+1;
			cmp<<=1;
		}
	}
}*/
/*
void bfs(int node)
{
    visited[node]=1;
    int temp,i;
    queue<int> Q;
    Q.push(node);
    T[node]=node;
    L[node]=0;

    while(!Q.empty())
    {
        temp=Q.front();
        Q.pop();

        for(i=0;i<graph[temp].size();i++)
        {
            if(!visited[graph[temp][i]])
            {
                visited[graph[temp][i]]=1;
                Q.push(graph[temp][i]);
                T[graph[temp][i]]=temp;
                L[graph[temp][i]]=L[temp]+1;
            }
        }
    }
}*/

void dfs(int v,int parent,int level)
{
    visited[v]=1;
    L[v]=level;
    T[v]=parent;
    TIME+=1;
    start[v]=TIME;
    for(int i=0;i<graph[v].size();i++)
    {
        if(!visited[graph[v][i]])
        {
            dfs(graph[v][i],v,level+1);
        }
    }
    finish[v]=TIME;
}

void make_P()
{
    int i,j;
    // initialise by -1 all
    for(i=0;i<=N;i++)
        for(j=0;1<<j<=N;j++)
            P[i][j]=-1;
    // all the 2^0 i.e first ancestor will be itself
    for(i=1;i<=N;i++)
        P[i][0]=T[i];

    // bottom up dp
    for(j=1;1<<j<=N;j++)
        for(i=1;i<=N;i++)
            if(P[i][j-1]!=-1)
                P[i][j]=P[P[i][j-1]][j-1];

    /*for(j=0;1<<j<=N;j++)
    {
        cout<<j<<" : ";
        for(i=1;i<=N;i++)
        {
            cout<<P[i][j]<<" ";
        }
        cout<<"\n";
    }*/
}

int query(int p,int q)
{
    int log,i,tmp;

    // without any loss in generality we always take p at higher level
    // if its not so just swap them
    if(L[p]<L[q])
        tmp=p,p=q,q=tmp;

    // finding [log[L[p]]] ie ceil of it

    //for(log=1;(1<<log)<=L[p];log++)
      //  log--;
    //log=log2_[L[p]];
    log=12;
    // now ie if not in same level then we have to find ancestor of p
    // at the same level as that of q from P[][lgmaxn]
    for(i=log;i>=0;i--)
    {
        if(L[p]-(1<<i) >= L[q])
            p=P[p][i];
    }

    // we have find ancestor
    if(p==q)
        return q;


        for(i=log;i>=0;i--)
        {
            if(P[p][i]!=-1 && P[p][i]!=P[q][i])
            {
                p=P[p][i];
                q=P[q][i];
            }
        }
        return T[p];
}


int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
    int tt;
  //  init();
    cin>>tt;
    while(tt--){
    TIME=0;
    int root,K,edges,i,u,v,temp,n,D,S,RD,lca_drd,zz=0;
    bool ans=true;
    cin>>N;
   // edges=N;

    for(i=0;i<=N;i++)
    {
        graph[i].clear();
        start[i]=0;
        finish[i]=0;
        visited[i]=0;
        T[i]=0;
        L[i]=0;
    }
    for(i=1;i<=N-1;i++)
    {
        cin>>u>>v;
        graph[u].pb(v);
        graph[v].pb(u);
    }
    root=1;
    dfs(1,1,0);
    //bfs(1);
    make_P();
    start[0]=L[0]=finish[0]=visited[0]=0,T[0]=0;

/*
    cout<<"Start - ";
    for(i=1;i<=N;i++)
        cout<<start[i]<<" ";
    cout<<"\n";
    cout<<"Finish - ";
    for(i=1;i<=N;i++)
        cout<<finish[i]<<" ";
    cout<<"\n";
    cout<<"Parent - ";
    for(i=1;i<=N;i++)
        cout<<T[i]<<" ";
    cout<<"\n";
    cout<<"Depth - ";
    for(i=1;i<=N;i++)
        cout<<L[i]<<" ";
    cout<<"\n";
*/

    cin>>K;
    while(K--)
    {
      //  memset(chq,0,sizeof chq);
        zz=0;
        ans=true;
        D=0,S=N+1,RD=0;
        L[N+1]=maxn;
        int lol=0;
        cin>>n;

        for(i=0;i<n;i++)
        {
            cin>>temp;
            if(L[temp]>=L[D])   D=temp;
            if(L[temp]<=L[S])   S=temp;
            place[i]=temp;
         //chq[L[temp]]+=1;
        //    if(chq[L[temp]]>2)
          //      ans=false;
        }
        if(ans==false)    cout<<"No\n";
        else
        {
        int remp=0;
        for(i=0;i<n;i++)
        {
            if(!(start[place[i]]<=start[D] && finish[place[i]]>=finish[D]))
            {
                   B[lol++]=place[i];

                remp=1;
                if(L[RD]<=L[place[i]])
                {
                    RD=place[i];
                }
            }
        }

        if(remp==1)
        {
            for(i=0;i<lol;i++)
            {
                if(!(start[B[i]]<=start[RD] && finish[B[i]]>=finish[RD]))
                {
                    ans=false;
                    break;
                }
            }

            if(ans==true)
            {
                lca_drd=query(D,RD);

                if(!(start[S]>=start[lca_drd] && finish[S]<=finish[lca_drd]))
                    ans=false;

            }
        }

        if(ans) cout<<"Yes\n";
        else    cout<<"No\n";
        }
    }
    }
    return 0;
}
