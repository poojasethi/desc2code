#include<bits/stdc++.h>
#define ll long long
#define fi first
#define se second
ll mpow(ll a, ll n,ll mod)
{ll ret=1;ll b=a;while(n) {if(n&1)
    ret=(ret*b)%mod;b=(b*b)%mod;n>>=1;}
return (ll)ret;
}
using namespace std;
#define mem(x,a) memset(x,a,sizeof(x))
#define pii pair<int,int>
#define mp make_pair
#define pb push_back
#define all(v) v.begin(),v.end()
#define N (int)1e5+4
using namespace std;
int anc[N][20],depth[N],timer=0,dfs_timer[N];
vector<int> G[N];
void dfs(int x,int p){
    depth[x]=depth[p]+1;
    anc[x][0]=p;
    dfs_timer[x]=++timer;
    for(int i=0;i<G[x].size();i++){
        int to=G[x][i];
        if(to!=p){
            dfs(to,x);
        }
    }
}
int lca(int x,int y){
    if(depth[x]>depth[y])
        swap(x,y);
    int diff=depth[y]-depth[x];
    for(int i=19;i>=0;i--){
        if(diff&(1<<i))
           y=anc[y][i];
    }
    if(y==x)
        return y;
    for(int i=19;i>=0;i--){
        if(anc[x][i]!=anc[y][i]){
            x=anc[x][i];
            y=anc[y][i];
        }
    }
    return anc[y][0];
}
void allc(){
    for(int i=0;i<N;i++)
        G[i].clear();
    timer=0;
    mem(depth,0);
    mem(anc,0);
    mem(dfs_timer,0);
}
void solve(){
    allc();
    int n;
    scanf("%d",&n);
    for(int i=0;i<n-1;i++){
        int x,y;
        scanf("%d%d",&x,&y);
        G[x].pb(y);
        G[y].pb(x);
    }
    dfs(1,0);
    for(int j=1;j<=19;j++){
        for(int i=1;i<=n;i++){
            anc[i][j]=anc[anc[i][j-1]][j-1];
        }
    }
    int q;
    scanf("%d",&q);
    while(q--){
        int k,f=1;
        scanf("%d",&k);
        vector<int> rem;
        int st,ed,mx=-11;
        for(int i=0;i<k;i++){
            int x;
            scanf("%d",&x);
            rem.pb(x);
            if(mx<dfs_timer[x]){
               ed=x;
               mx=dfs_timer[x];
            }
        }
        st=rem[0];
        for(int i=1;i<rem.size();i++){
            int lc=lca(rem[i],st);
            if(lc==st||lc==rem[i]){
               if(depth[rem[i]]>depth[st]){
                  st=rem[i];
               }
            }
            else{
                if(dfs_timer[rem[i]]<dfs_timer[st]){
                    st=rem[i];
                }
            }
        }
        int fin=lca(st,ed);
        for(int i=0;i<k;i++){
            if(st==ed){
                if(lca(st,rem[i])!=rem[i]){
                    printf("No\n");
                    f=0;
                    break;
                }
            }
            else if((lca(st,rem[i])==rem[i]||lca(ed,rem[i])==rem[i])&&lca(rem[i],fin)==fin){
            }
            else{
                printf("No\n");
                f=0;
                break;
            }
        }
        if(f){
            printf("Yes\n");
        }
    }
}
int main(){
   //ios_base::sync_with_stdio(false);
   int t=1;
   scanf("%d",&t);
   for(int i=1;i<=t;i++){
       //printf("Case #%d: ",i);
       solve();
   }
   return 0;
}
