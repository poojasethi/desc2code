#include <iostream>
#include <iomanip>
#include <cstdio>
#include <vector>
#include <queue>
#include <set>
#include <algorithm>
#include <climits>
#include <map>
#include <cmath>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;

vector<int> g[100005];
int p[100005], l[100005][32], h[100005], s[100005], e[100005], curTime=0;

void dfs(int v, int pv, int height){
	s[v]=curTime++;
	p[v] = pv;
	h[v] = height;

	for(int i=0 ; i<g[v].size() ; i++)
		if(g[v][i]!=pv)
			dfs(g[v][i],v,height+1);
	e[v] = curTime++;
}

int end2, end1;

int main(){
	int t, n, k, q;
	scanf("%d",&t);
	while(t--){
		curTime=0;
		scanf("%d",&n);
		for(int i=1 ; i<=n ; i++)
			g[i].clear();
		for(int i=0 ; i<n-1 ; i++){
			int a,b;
			scanf("%d %d", &a, &b);
			g[a].push_back(b);
			g[b].push_back(a);
		}

		dfs(1,-1,0);

		for(int i=1 ; i<=n ; i++)
			for(int j=1 ; (1<<j)<=n ; j++)
				l[i][j]=-1;

		for(int i=1 ; i<=n ; i++)
			l[i][0]=p[i];

		for(int j=1 ; (1<<j)<=n ; j++)
			for(int i=1 ; i<=n ; i++)
				if(l[i][j-1]!=-1)
					l[i][j] = l[l[i][j-1]][j-1];

		scanf("%d", &q);
		while(q--){
			scanf("%d", &k);
			vector<int> knodes;
			int maxH=INT_MIN, minH=INT_MAX, minHNode;
			for(int i=0 ; i<k ; i++){
				int num;
				scanf("%d",&num);
				knodes.push_back(num);
				if(h[num]>maxH)
					end1 = num,maxH=h[num];
				if(h[num]<minH)
					minH = h[num], minHNode = num;
			}

			maxH=INT_MIN;
			for(int j=0 ; j<k ; j++){
				int i = knodes[j];
				if (i!=end1 && !(s[i]<s[end1]&&e[i]>e[end1]) )
				 	if(h[i]>maxH)
						end2=i,maxH=h[i];
			}
			if(maxH == INT_MIN){
				printf("Yes\n");
				continue;
			}

			int cnt=0;
			for(int j=0 ; j<k ; j++){
				int i = knodes[j];
				if(i!=end1 && i!=end2 && ( s[i]<s[end2]&&e[i]>e[end2] || s[i]<s[end1]&&e[i]>e[end1] ) )
					cnt++;
			}

			if(cnt+2<k){
				printf("No\n");
				continue;
			}

			int lca, a=end1, b=end2;
			if(h[a]<h[b])
				lca=a, a=b, b=lca;

			int logg=log2(h[a]);
			for(int i=logg ; i>=0 ; i--)
				if(l[a][i]!=-1 && h[l[a][i]]>=h[b])
					a = l[a][i];
			
			if(a==b)
				lca=a;
			else{
				for(int i=logg ; i>=0 ; i--)
					if(l[a][i]!=-1 && l[a][i]!=l[b][i])
						a=l[a][i], b=l[b][i];
				lca=p[a];
			}

			if(s[minHNode]<s[lca] && e[minHNode]>e[lca])
				printf("No\n");
			else
				printf("Yes\n");
		}

	}

	
	return 0;
}