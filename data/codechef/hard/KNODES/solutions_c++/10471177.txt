#include<iostream>
#include<vector>
#include<algorithm>
#define maxn 200000
#define maxl 20
using namespace std;

struct node
{
    int disc;
    int fin;
    int stat;
    int pos;
};

node info[maxn];
vector<int> graph[maxn];
vector<int> distime;

int searc(int a,int b)
{
    for(int i=0;i<graph[a].size();i++)
    {
        if(graph[a][i]==b)
            return 1;
    }
    return 0;
}

int tim;

void dfs(int s)
{
    info[s].disc=tim++;
    distime.push_back(s);
    info[s].pos=distime.size()-1;
    int a;
    for(int i=0;i<graph[s].size();i++)
    {
        a=graph[s][i];
        if(info[a].stat==1)
         continue;
        info[a].stat=1;
        dfs(a);

    }
    info[s].fin=tim++;

}

vector<int> arr;


bool comp(int a,int b)
{
    if(info[a].disc<info[b].disc)
        return 1;
    return 0;
}


int bin_searc(int i,int j,int ele)
{
    if(info[distime[i]].fin<ele)
        return -1;
    if(i==j)
        return i;
    int mid=(i+j)/2;
    if(info[distime[mid+1]].fin>ele)
        return bin_searc(mid+1,j,ele);
    return bin_searc(i,mid,ele);
}

int lca2(int a,int b)
{
    if(info[a].disc>info[b].disc)
        swap(a,b);
    if(info[a].fin>info[b].disc)
        return a;

    /*int i=0;
    int j=info[a].pos-1;
    int ans=bin_searc(i,j,info[b].disc);
    //if(ans==-1)
      //  return -1;
    return distime[ans];*/

    int j=info[a].pos-1;
    int ele=info[b].disc;
    for(;j>=0;j--)
    {
        if(info[distime[j]].fin>ele)
            return distime[j];
    }
    return -1;
}

int P[maxn][maxl];     //P[i][j] : 2^j th ancestor of i
int par[maxn];         //parent
int lev[maxn];         //level of vertex lev[root]=1
int visit[maxn];

void dfs11(int s)
{
    visit[s]=1;
    for(int i=0;i<graph[s].size();i++)
    {
        int a=graph[s][i];

        if(visit[a]==1)
        {
            continue;
        }
        par[a]=s;
        lev[a]=lev[s]+1;
        dfs11(a);
    }
}

void fill_ancstr(int n)
{
    for(int i=0;i<=n;i++)
    {
        visit[i]=0;
    }
    lev[1]=1;
    par[1]=-1;
    dfs11(1);

    for(int i=1;i<=n;i++)
    {
        for(int j=0;j<maxl;j++)
            P[i][j]=-1;
    }

    for(int i=1;i<=n;i++)
    {
        P[i][0]=par[i];
    }

    for(int j=1;j<maxl;j++)
    {
        for(int i=1;i<=n;i++)
        {
            if(P[i][j-1]!=-1)
                P[i][j]=P[P[i][j-1]][j-1];
        }
    }
    /*for(int i=1;i<=n;i++)
    {
        for(int j=0;j<maxl;j++)
            cout<<P[i][j]<<" ";
        cout<<endl;
    }*/

}

int lca11(int p,int q)
{
    if(lev[p]<lev[q])
        swap(p,q);

    for(int j=maxl-1;j>=0;j--)
    {
        if(P[p][j]!=-1&&lev[P[p][j]]>=lev[q])
            p=P[p][j];
    }
    //cout<<p<<" "<<q<<"**"<<endl;
    if(p==q)
        return p;
    for(int j=maxl-1;j>=0;j--)
    {
        //cout<<j<<" "<<p<<" "<<q<<endl;
        if(P[p][j]!=-1&&P[p][j]!=P[q][j])
        {
            p=P[p][j];
            q=P[q][j];
        }
    }
    return par[p];
}


int main()
{
    std::ios::sync_with_stdio(false);
    int t,n,a,b;

    cin>>t;

    while(t--)
    {
        cin>>n;

        distime.clear();

        for(int i=0;i<n-1;i++)
        {
            cin>>a>>b;
            graph[a].push_back(b);
            graph[b].push_back(a);
        }

        tim=0;
        for(int i=0;i<=n;i++)
            info[i].stat=0;

        info[1].stat=1;
        dfs(1);
      /* for(int i=1;i<=n;i++)
            cout<<info[i].disc<<" "<<info[i].fin<<endl;
        cout<<endl;

        for(int i=0;i<7;i++)
        {
            cin>>a>>b;
            cout<<lca(a,b)<<endl;
        }*/
        fill_ancstr(n);
        int q,k;
        cin>>q;

        while(q--)
        {
            arr.clear();
            cin>>k;
            while(k--)
            {
                cin>>a;
                arr.push_back(a);
            }
            sort(arr.begin(),arr.end(),comp);

            int lead1,lead2=-1;
            int cmp=-1;
            int head=arr[0];
            lead1=arr[0];
            int flag=0;
            for(int i=1;i<arr.size();i++)
            {
                a=arr[i];
               // cout<<a<<" "<<lead1<<" "<<lead2<<endl;
                if(info[a].disc>info[lead1].disc&&info[a].disc<info[lead1].fin)
                {
                    if(cmp==-1)
                        cmp=a;
                    lead1=a;
                    continue;
                }
                if(lead2==-1)
                {
                    if((info[a].disc<info[head].fin)&&lca11(a,cmp)!=head)
                    {

                    flag=1;
                    break;
                    }
                   lead2=a;
                   continue;

                }
                if(info[a].disc>info[lead2].disc&&info[a].disc<info[lead2].fin)
                {
                    lead2=a;
                    continue;
                }

                flag=1;
                break;
            }

            if(flag==1)
                    cout<<"No"<<endl;
            else
                    cout<<"Yes"<<endl;




        }


        for(int i=0;i<=n;i++)
            graph[i].clear();




    }




    return 0;
}
