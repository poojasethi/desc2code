#include <bits/stdc++.h>

using namespace std;

const int N = 400010;

int tin[N], tout[N], pv[N], depth[N], TIME;
vector<int> g[N];

void dfs(int v, int parent) {
    tin[v] = ++TIME;
    int sz = g[v].size();
    for (int j = 0; j < sz; j++) {
        int u = g[v][j];
        if (u == parent) {
            continue;
        }
        depth[u] = depth[v] + 1;
        pv[u] = v;
        dfs(u, v);
    }
    tout[v] = ++TIME;
}

const int LOG = 20;
int pr[N][LOG];

inline bool anc(int x, int y) {
    return (tin[x] <= tin[y] && tout[y] <= tout[x]);
}

inline int lca(int x, int y) {
    if (anc(x, y)) {
        return x;
    }
    for (int j = LOG - 1; j >= 0; j--) {
        if (!anc(pr[x][j], y)) {
            x = pr[x][j];
        }
    }
    return pr[x][0];
}

int main() {
    int tt;
    scanf("%d", &tt);
    while (tt--) {
        int n;
        scanf("%d", &n);
        for (int i = 0; i < n; i++) {
            g[i].clear();
        }
        for (int i = 0; i < n - 1; i++) {
            int foo, bar;
            scanf("%d %d", &foo, &bar);
            foo--;
            bar--;
            g[foo].push_back(bar);
            g[bar].push_back(foo);
        }
        TIME = 0;
        depth[0] = 0;
        pv[0] = 0;
        dfs(0, -1);
        for (int i = 0; i < n; i++) {
            pr[i][0] = pv[i];
        }
        for (int j = 1; j < LOG; j++) {
            for (int i = 0; i < n; i++) {
                pr[i][j] = pr[pr[i][j - 1]][j - 1];
            }
        }
        int ttt;
        scanf("%d", &ttt);
        while (ttt--) {
            int cnt;
            scanf("%d", &cnt);
            vector <int> a(cnt);
            for (int i = 0; i < cnt; i++) {
                scanf("%d", &a[i]);
                a[i]--;
            }
            int root = a[0];
            for (int i = 1; i < cnt; i++) {
                root = lca(root, a[i]);
            }
            int deepest = a[0];
            for (int i = 1; i < cnt; i++) {
                if (depth[a[i]] > depth[deepest]) {
                    deepest = a[i];
                }
            }
            int nxt = deepest;
            for (int j = LOG - 1; j >= 0; j--) {
                if (!anc(pr[nxt][j], root)) {
                    nxt = pr[nxt][j];
                }
            }
            //cout<<root+1<<" "<<deepest+1<<" "<<nxt+1<<endl;
            vector <int> b;
            bool ok = true;
            for (int i = 0; i < cnt; i++) {
                if (!anc(root, a[i]) || !anc(a[i], deepest)) {
                    if (anc(nxt, a[i])) {
                        ok = false;
                        break;
                    }
                    b.push_back(a[i]);
                }
            }
            if (ok) {
                deepest = root;
                for (int i = 0; i < (int)b.size(); i++) {
                    if (depth[b[i]] > depth[deepest]) {
                        deepest = b[i];
                    }
                }
                for (int i = 0; i < (int)b.size(); i++) {
                    if (!anc(root, b[i]) || !anc(b[i], deepest)) {
                        ok = false;
                        break;
                    }
                }
            }
            puts(ok ? "Yes" : "No");
        }
    }
    return 0;
}
