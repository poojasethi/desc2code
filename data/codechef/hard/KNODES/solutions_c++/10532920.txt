#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

#define maxn 100005
#define logN 20

int f[maxn][logN];
int t,n,q,a,b,k,maxin,minin,maxin1,x,cnt;
int arr[maxn];
vector<int> adj[maxn];
vector<int> v1,v2,v3,v4;
int start[maxn];
int end[maxn];
bool visited[maxn];
int dist[maxn];

void init(){
	for(int i=1;i<=n;i++){
		adj[i].clear();
		start[i] = 0;
		end[i] = 0;
		dist[i] = 0;
		visited[i] = false;
	}
	cnt = 0;
}


void dfsOrder(int u,int parent){

    for (int i = 1; i < logN; i++)
        f[u][i] = f[f[u][i - 1]][i - 1];
	
	dist[u] = dist[parent] + 1;
    visited[u]=true;
    start[u]=++cnt;    
    for(int i=0;i<adj[u].size();i++){
    
        if(!visited[adj[u][i]]){
        	f[adj[u][i]][0] = u;
            dfsOrder(adj[u][i],u);
        }
    }
    end[u]=cnt; 
}

int lca (int u, int v) {
    if (dist[u] < dist[v]) swap(u, v);
 
    for (int i = logN - 1; i >= 0; i--)
        if (dist[f[u][i]] >= dist[v]) {
            u = f[u][i];
        }
 
    if (u == v) return u;
 
    for (int i = logN - 1; i >= 0; i--)
        if (f[u][i] != f[v][i]) {
            u = f[u][i];
            v = f[v][i];
        }
 
    return f[u][0];
}

int main() {
	
	scanf("%d",&t);
	
	while(t--){
	
		scanf("%d",&n);
		init();
		
		for(int i=1;i<n;i++){
			scanf("%d %d",&a,&b);
			adj[a].push_back(b);
			adj[b].push_back(a);
		}
		
		dist[1] = 0;
		dist[100002] = -1;
		dfsOrder(1,1);
		
		scanf("%d",&q);
		
		while(q--){
			scanf("%d",&k);
			scanf("%d",arr);
			maxin = arr[0];
			minin = arr[0];
			
			for(int i=1;i<k;i++){
				scanf("%d",arr+i);
				if(dist[arr[i]]>dist[maxin])
					maxin = arr[i];
				if(dist[arr[i]]<dist[minin])
					minin = arr[i];
			}
			
			v1.clear();
			v2.clear();
			v3.clear();
			v4.clear();
			
			for(int i=0;i<k;i++){
				if(start[arr[i]]<=start[maxin] && end[arr[i]]>=end[maxin])
					v1.push_back(arr[i]);
				else
					v2.push_back(arr[i]);
			}
			if(v2.size()==0){
				printf("Yes\n");
				continue;
			}
			
			maxin1 = 100002;
			
			for(int i=0;i<v2.size();i++){
				if(dist[v2[i]]>dist[maxin1])
					maxin1 = v2[i];
			}
			for(int i=0;i<v2.size();i++){
				if(start[v2[i]]<=start[maxin1] && end[v2[i]]>=end[maxin1])
					v3.push_back(v2[i]);
				else
					v4.push_back(v2[i]);
			}
			
			if(v4.size()){
				printf("No\n");
				continue;
			}
			x = lca(maxin,maxin1);
			
			if(start[x]<=start[minin] && end[x]>=end[minin])
				printf("Yes\n");
			else
				printf("No\n");
			
		}
		
	}
	
	return 0;
}