#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 100005
#define ln 1e10+1
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 1000000007
#define ln 1e13

using namespace std;

vector <int> a[N];
int H[N], n, k, P[20][N], T, d[N], use[N];

void DFS(int u, int pre)
{
    for(int i=0; i<a[u].size(); i++)
    {
        int v = a[u][i];
        if(v == pre)    continue;
        H[v] = H[u] + 1;
        P[0][v] = u;
        DFS(v, u);
    }
}

void Build()
{
    for(int j=1; j<20; j++)
        for(int i=1; i<=n; i++)
            P[j][i] = P[j-1][P[j-1][i]];
}

int Up(int u, int h)
{
    int hi = H[u] - h;
    for(int i=0; i<20; i++)
        if(BIT(i, hi))
         u = P[i][u];
    return u;
}

bool cmp(int x, int y)
{
    return H[x] < H[y];
}

int LCA(int u, int v)
{
    if(H[u] < H[v]) swap(u, v);
    u = Up(u, H[v]);
    if(u == v) return u;
    for(int i=19; i>=0; i--)
        if(P[i][u] != P[i][v])
        {
            u = P[i][u];
            v = P[i][v];
        }
    return P[0][u];
}

int main()
{
    //filein("inp.txt");  fileout("out.txt");
    cin >> T;
    int u, v, q;
   // T = 1;
    while(T--)
    {
        cin >> n;
      //  n = 100000;
        for(int i=1; i<=n; i++)
            a[i].clear();
        for(int i=1; i<n; i++)
        {
            scanf("%d%d", &u, &v);
         //   u = i+1;
         //   v = rand() % (i) + 1;
            a[u].push_back(v);
            a[v].push_back(u);
        }
        DFS(1, 0);
        Build();
        cin >> q;
       // q = 10;
        while(q--)
        {
            int p = 0;
            scanf("%d", &k);
          //  k = rand() % n + 1;
            for(int i=1; i<=k; i++)
            {
                scanf("%d", &d[i]);
                //d[i] = rand() * rand() % n + 1;
                if(cmp(d[1], d[i]) == 0)    swap(d[1], d[i]);
            }
            d[k+1] = d[1];
            for(int i=2; i<=k; i++)
                d[k+1] = LCA(d[k+1], d[i]);
            if(d[k+1] != d[1])  k++;
            sort(d+1, d+k+1, cmp);
            int pre = 1, num = 0;
            for(int i=1; i<=k; i++) use[i] = 0;
            for(int i=2; i<=k; i++)
                if(Up(d[i], H[d[pre]]) == d[pre])
                {
                    num++;
                    pre = i;
                    use[i] = 1;
                }
            pre = 1;
            for(int i=2; i<=k; i++)
            {
                if(use[i])  continue;
                if(Up(d[i], H[d[pre]]) == d[pre] && LCA(d[i], d[2]) == d[1])
                {
                    num++;
                    pre = i;
                    use[i] = 1;
                }
            }
            if(num == k-1)
                printf("Yes\n");
            else
                printf("No\n");
        }
    }
}
