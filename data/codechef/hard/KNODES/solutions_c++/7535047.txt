/*
*/
 
//#pragma comment(linker, "/STACK:16777216")
#include <fstream>
#include <iostream>
#include <string>
#include <complex>
#include <math.h>
#include <set>
#include <vector>
#include <map>	
#include <queue>
#include <stdio.h>
#include <stack>
#include <algorithm>
#include <list>
#include <ctime>
#include <memory.h>
#include <complex>

#define y0 sdkfaslhagaklsldk
#define y1 aasdfasdfasdf
#define yn askfhwqriuperikldjk
#define j1 assdgsdgasghsf
#define tm sdfjahlfasfh
#define lr asgasgash

#define eps 1e-9
#define M_PI 3.141592653589793
#define bs 1000000007
#define bsize 512

using namespace std;

int tests;
int n;
vector<int> g[1<<20];
int timer,tin[1<<20],tout[1<<20];
int Q,bp;
int up[1<<19][19];
int start;
int finish;
int dep[1<<20];

void dfs(int v,int p)
{
	tin[v]=timer;
	timer++;
	up[v][0]=p;
	for (int i=1;i<19;i++)
		up[v][i]=up[up[v][i-1]][i-1];
	for (int i=0;i<g[v].size();i++)
	{
		int to=g[v][i];
		if (to==p)
			continue;
		dep[to]=dep[v]+1;
		dfs(to,v);
	}
	tout[v]=timer;
	++timer;
}

bool upper(int a,int b)
{
	return (tin[a]<=tin[b]&&tout[a]>=tout[b]);
}

int lca(int a,int b)
{
	if (upper(a,b))
		return a;
	if (upper(b,a))
		return b;
	for (int i=18;i>=0;--i)
		if (!upper(up[a][i],b))
			a=up[a][i];
	return up[a][0];
}

int get_dist(int a,int b)
{
	int q=lca(a,b);
	return dep[a]+dep[b]-dep[q]*2;
}

int dist[1<<20];
queue<int> qu;

void trace(int v)
{
	for (int i=1;i<=n;i++)
		dist[i]=1e9;
	dist[v]=0;
	qu.push(v);
	while (qu.size())
	{
		int v=qu.front();
		qu.pop();
		for (int i=0;i<g[v].size();i++)
		{
			int to=g[v][i];
			if (dist[to]>dist[v]+1)
			{
				dist[to]=dist[v]+1;
				qu.push(to);
			}
		}
	}
	/*
	for (int i=1;i<=n;i++)
		cout<<dist[i]<<"^^";
	cout<<endl;
	*/
}

int main(){
//freopen("blind.in","r",stdin);
//freopen("blind.out","w",stdout);
//freopen("F:/in.txt","r",stdin);
//freopen("F:/output.txt","w",stdout);
ios_base::sync_with_stdio(0);
//cin.tie(0);

cin>>tests;
for (;tests;--tests)
{
	cin>>n;
	for (int i=1;i<=n;i++)
		g[i].clear();
	for (int i=1;i<n;i++)
	{
		int a,b;
		cin>>a>>b;
		g[a].push_back(b);
		g[b].push_back(a);
	}
	timer=0;
	dfs(1,1);
	cin>>Q;
	for (;Q;--Q)
	{
		int sz;
		cin>>sz;
		vector<int> v;
		for (;sz;--sz)
		{
			int x;
			cin>>x;
			v.push_back(x);
		}
		
		int bst=1e9;
		bp=0;
		for (int i=0;i<v.size();i++)
			if (tout[v[i]]<bst)
				bst=tout[v[i]],
				bp=v[i];
		
		start=bp;
		/*trace(start);
		
		bst=-1;
		for (int i=0;i<v.size();i++)
		{
			if (dist[v[i]]>bst)
				bst=dist[v[i]],
				bp=v[i];
		}
		finish=bp;
		*/
		
		bst=-1e9;
		bp=0;
		for (int i=0;i<v.size();i++)
			if (upper(v[i],start)==0)
			{
				if (tin[v[i]]>bst)
				{
					bst=tin[v[i]];
					bp=v[i];
				}	
			}
			
		if (bst<0)
		{
			bst=1e9;
			bp=0;
			for (int i=0;i<v.size();i++)
				if (tin[v[i]]<bst)
					bst=tin[v[i]],
					bp=v[i];
		}
		finish=bp;
		//cout<<start<<" %"<<finish<<endl;
		
		
		int er=0;
		int N=get_dist(start,finish);
		
/*		for (int i=1;i<=n;i++)
			cout<<tin[i]<<" "<<tout[i]<<endl;
*/			
//		cout<<start<<" * "<<finish<<" "<<get_dist(start,finish)<<endl;
		for (int i=0;i<v.size();i++)
		{
			int id=v[i];
			if (get_dist(start,id)+get_dist(id,finish)!=N)
				er=1;
			
		}
		if (er==0)
			cout<<"Yes"<<endl;
		else
			cout<<"No"<<endl;
	}
	
}

//cin.get();cin.get();
return 0;}
