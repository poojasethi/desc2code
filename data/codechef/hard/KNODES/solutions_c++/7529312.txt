#include <bits/stdc++.h>

typedef long long ll;
using namespace std;

#define N 100010
vector<int> Adj[N],v1,v2,v3,v4;
int start_time[N],end_time[N],depth[N],parent[N],a[N];
void dfs_util(int x,int d,int *t)
{
    depth[x]=d;
    start_time[x]=(*t);
    for(int i=0;i<(int)Adj[x].size();i++)
    {
        if(depth[Adj[x][i]]==-1)
        {
            (*t)=(*t)+1;
            parent[Adj[x][i]]=x;
            dfs_util(Adj[x][i], d+1, t);
        }
    }
    end_time[x]=(*t);
}
void dfs(int n)
{
    for(int i=1;i<=n;i++)
    {
        depth[i]=-1;
        parent[i]=i;
    }
    int t=0;
    dfs_util(1, 1, &t);
}
int LCA(int u,int v)
{
    while(u!=v)
    {
        if(depth[u]>depth[v]) u=parent[u];
        else v=parent[v];
    }
    return u;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int i,n,k,t,x,y,q,d,s,rd,lca;
    cin>>t;
    while(t--)
    {
        cin>>n;
        for(i=1;i<=n;i++) Adj[i].clear();
        for(i=0;i<n-1;i++)
        {
            cin>>x>>y;
            Adj[x].push_back(y);
            Adj[y].push_back(x);
        }
        dfs(n);
        cin>>q;
        while(q--)
        {
            cin>>k;
            d=0,s=0;
            for(i=0;i<k;i++)
            {
                cin>>a[i];
                if(i==0) { d=s=a[0]; continue; }
                if(depth[a[i]]>depth[d])
                {
                    d=a[i];
                }
                if(depth[a[i]]<depth[s])
                {
                    s=a[i];
                }
            }
            v1.clear();
            v2.clear();
            for(i=0;i<k;i++)
            {
                if(start_time[a[i]]<=start_time[d] && end_time[a[i]]>=end_time[d])
                {
                    v1.push_back(a[i]);
                }
                else
                {
                    v2.push_back(a[i]);
                }
            }
            if((int)v2.size()==0)
            {
                cout<<"Yes\n";
                continue;
            }
            rd=0;
            for(i=0;i<(int)v2.size();i++)
            {
                if(i==0) { rd=v2[0]; continue; }
                if(depth[v2[i]]>depth[rd])
                {
                    rd=v2[i];
                }
            }
            v3.clear();
            v4.clear();
            for(i=0;i<(int)v2.size();i++)
            {
                if(start_time[v2[i]]<=start_time[rd] && end_time[v2[i]]>=end_time[rd])
                {
                    v3.push_back(a[i]);
                }
                else
                {
                    v4.push_back(a[i]);
                }            }
            if((int)v4.size()!=0)
            {
                cout<<"No\n";
                continue;
            }
            lca=LCA(d,rd);
            if(start_time[lca]<=start_time[s] && end_time[lca]>=end_time[s])
            {
                cout<<"Yes\n";
            }
            else
            {
                cout<<"No\n";
            }
        }
        
    }
    return 0;
}