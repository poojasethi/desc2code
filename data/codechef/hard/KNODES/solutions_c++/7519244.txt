#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;

vector<int> adj[N];
int p[25][N], A[N], B[N], preorder[N], postorder[N], h[N];
int precnt, postcnt;

bool cmp(const int &a, const int &b){
	return h[a] > h[b];
}

void dfs_ordering(int u, int prev, int height){
	preorder[u] = ++precnt;
	h[u] = height;
	p[0][u] = prev;
	for(int i = 0; i < adj[u].size(); i++){
		int v = adj[u][i];
		if(v != prev)	dfs_ordering(v, u, height + 1);
	}
	postorder[u] = ++postcnt;
}

bool check(int index, int parent){
	return (preorder[parent] <= preorder[index] and postorder[parent] >= postorder[index]);
}

int lca(int a, int b){
	if(h[b] > h[a])	swap(a, b);
	int diff = h[a] - h[b];
	for(int i = 0; i < 20; i++){
		if((1 << i)&diff)	a = p[i][a];
	}
	if(a == b)	return a;
	for(int i = 19; i >= 0; i--){
		if(p[i][a] != p[i][b])	a = p[i][a], b = p[i][b];
	}
	return p[0][a];
}

void process(){

	int k, id = 0, pos = -1;
	bool ok = true;
	cin>>k;
	for(int i = 0; i < k; i++)	cin>>A[i];
	sort(A, A + k, cmp);
	int D = A[0], S = A[k - 1];
	for(int i = 1; i < k; i++)
		if(!check(D, A[i])){
			B[id++] = A[i];
			if(pos == -1 or h[pos] < h[A[i]])	pos = A[i];
		}
	if(id > 0){
		for(int i = 0; i < id; i++){
			if(B[i] != pos and check(pos, B[i]) == false)	ok = false;
		}
		if(!check(S, lca(D, pos)))	ok = false;
	}
	//cout<<D<<" "<<YO<<" "<<lca(D, YO)<<" "<<S<<endl;
	if(ok)	cout<<"Yes"<<endl;
	else cout<<"No"<<endl;
}

void solve(){

	precnt = postcnt = 0;
	for(int i = 0; i < N; i++)	adj[i].clear();
	memset(p, 0, sizeof(p));

	int n, q, u, v;

	cin>>n;
	for(int i = 1; i < n; i++){
		cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	dfs_ordering(1, 0, 0);

	for(int i = 1; i < 20; i++)
		for(int j = 1; j < N; j++)
			p[i][j] = p[i - 1][p[i - 1][j]];

	cin>>q;
	while(q--)	process();
}

int main(){
	iostream::sync_with_stdio(false);
	cin.tie(NULL);
	int t;
	cin>>t;
	while(t--)	solve();
}