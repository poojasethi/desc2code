#include <bits/stdc++.h>

using namespace std;

#define lld long long
#define mod 1000000007
#define INF (int)1e9
#define s(n) scanf("%d", &n)
#define sc(n) scanf("%c", &n)
#define sl(n) scanf("%lld", &n)
#define sf(n) scanf("%f", &n)
#define ss(n) scanf("%s", n);
#define all(a) a.begin(), a.end()
#define pii pair<int, int>
#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define sq(x) ((x)*(x))
#define mset(x,v) memset(x,v,sizeof(x))
#define PI 3.1415926535897932384626
#define MAX 100005
#define pb push_back
#define MAX 100005

int tin[MAX], tout[MAX], l[MAX], pr[MAX], tim, p[MAX][20];
vector <int> adj[MAX];

void dfs(int u, int lvl)
{
    tin[u] = tim++;
    l[u] = lvl;

    for (int i = 0; i < adj[u].size(); i++) {
        if (!pr[adj[u][i]]) {
            pr[adj[u][i]] = u;
            dfs(adj[u][i], lvl+1);
        }
    }

    tout[u] = tim++;
}

int anc(int x, int y)
{
    if (tin[x] <= tin[y] && tout[y] <= tout[x])
        return 1;

    return 0;
}

int lca(int x, int y)
{
    if (anc(x, y))
        return x;

    for (int j = 19; j >= 0; j--) {
        if (!anc(p[x][j], y))
            x = p[x][j];
    }

    return p[x][0];
}

int main()
{
    int t;
    s(t);

    while (t--) {
        int n, i, j, x, y, qu;

        memset(pr, 0, sizeof(pr));

        s(n);
        for (i = 1; i <= n; i++)
            adj[i].clear();

        for (i = 1; i < n; i++) {
            s(x), s(y);

            adj[x].pb(y);
            adj[y].pb(x);
        }

        tim = 0;
        pr[1] = 1;
        dfs(1, 0);

        for (i = 1; i <= n; i++)
            p[i][0] = pr[i];

        for (j = 1; j < 20; j++) {
            for (i = 1; i <= n; i++)
                p[i][j] = p[p[i][j-1]][j-1];
        }

        s(qu);

        while (qu--) {
            int m, deepest, rdeepest;

            s(m);

            vector <int> a(m);
            vector <int> b;

            for (i = 0; i < m; i++) {
                s(a[i]);
            }

            deepest = a[0];
            for (i = 1; i < m; i++) {
                if (l[a[i]] > l[deepest])
                    deepest = a[i];
            }

            for (i = 0; i < m; i++) {
                if (!anc(a[i], deepest))
                    b.pb(a[i]);
            }


            if (b.empty()) {
                cout << "Yes\n";

                continue ;
            }
            int rem = deepest;
            deepest = b[0];
            for (i = 1; i < b.size(); i++)  {
                if (l[b[i]] > l[deepest])
                    deepest = b[i];
            }


            int flag = 1;
            for (i = 0; i < b.size(); i++) {
                if (!anc(b[i], deepest)) {
                    flag = 0;
                    break;
                }
            }

            //cout << "Over";

            if (!flag) {
                cout << "No\n";

                continue;
            }

            int l = lca(rem, deepest);

            for (i = 0; i < m; i++) {
                if (!anc(l, a[i])) {
                    flag = 0;

                    break;
                }
            }
            if (flag)
                cout << "Yes\n";

            else
                cout << "No\n";
        }


    }

    return 0;
}
