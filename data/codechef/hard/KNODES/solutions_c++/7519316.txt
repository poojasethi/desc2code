#include <bits/stdc++.h>
using namespace std;

vector <int> v[100010];
int tim = 0;
int  node[100010], st[100010],en[100010], p[100010][24];

void dfs(int x, int parent)
{
    int i;
    for (i = 1; i < 21; i++) {
        p[x][0] = parent;
        int next = p[x][i-1];
        if (next == 0) {
            p[x][i] = 0;
            continue;
        }
        p[x][i] = p[next][i-1];
    }

    st[x] = ++tim;

    for (i = 0; i < v[x].size(); i++) {
        if (v[x][i] != parent)
            dfs(v[x][i], x);
    }
    en[x] = tim;
}

bool ances(int x, int y)
{
        /// whether x is ancestor of y
        return (st[x] <= st[y] && en[x] >= en[y]);

}

int lca(int x, int y)
{
    if (ances(x,y))
        return x;
    if (ances(y,x))
        return y;

    for (int i = 20; i >= 0; i--) {
        if (p[x][i]) {
            if (!ances(p[x][i], y))
                x = p[x][i];
        }
    }
    return p[x][0];
}

bool inpath(int x, int y, int z)
{
    return (ances(x,y) && ances(z, x));

}

int main()
{
    int t,n,x,y,q,k,i,lnode,rnode,l,r;

    scanf("%d", &t);

    while (t--) {
        scanf("%d", &n);
        for (i = 1; i <= n; i++)
            v[i].clear();
        for (i = 1; i < n; i++) {
            scanf("%d %d", &x, &y);
            v[x].push_back(y);
            v[y].push_back(x);
        }
        tim = 0;
        dfs(1,0);
        scanf("%d", &q);
        while (q--) {
            scanf("%d", &k);
            for (i = 0; i < k; i++) {
                scanf("%d", &node[i]);
            }
            lnode = node[0];
            l = st[node[0]];
            r = 0;
            for (i = 0; i < k; i++) {
                if (st[node[i]] > r) {
                    r = st[node[i]];
                    rnode = node[i];
                }
                if (ances(lnode, node[i]) || ances(node[i], lnode) ) {
                    if (ances(lnode, node[i])) {
                        lnode = node[i];
                        l = st[lnode];
                    }
                } else {
                    if (st[node[i]] < l) {
                        lnode = node[i];
                        l = st[lnode];
                    }
                }
            }
            int lc  = lca(lnode, rnode);
            bool flag = true;

            for (i = 0; i < k; i++) {
                if (lnode == rnode)
                    flag = (flag && ances(node[i], lnode));
                else {
                    flag = (flag && (inpath(node[i], lnode, lc) || inpath(node[i], rnode, lc)));

                }
            }
            if (flag)
                printf("Yes\n");
            else
                printf("No\n");
        }

    }
    return 0;
}
