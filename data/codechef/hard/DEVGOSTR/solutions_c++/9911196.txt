#include <iostream>
#include<stdio.h>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include <stdlib.h>
#include <time.h>
#define ll long long
#define MOD 1000000007
using namespace std;

string S;
ll K;

vector<string> goodStrings[51];

bool isAPSatisfied(string s,ll right)
{
	if(right <= 1)
		return true;
    ll maxD = (right)/2;
    for(ll d=1; d<=maxD; d++)
    {
        ll i = right;
        if((i-d-d >= 0))
        {
            ll j = i - d;
            ll k = j - d;
            if(s[i] == s[j] && s[j] == s[k])
                return false;
        }
    }
    return true;
}



void valid(ll *count,string s)
{
    /*ll h = 0;
    for(ll i=0,l=s.length(); i<l; i++)
    {
        if(s[i] != S[i])
        {
            h++;
            if(h > K)
                return;
        }
    }*/

    if(isAPSatisfied(s,s.length()-1))
    {
        *count = (*count) + 1;
        if(*count >= MOD)
            *count = (*count)%MOD;
    }
}

void permuteAndCount(ll *count,string s,ll left,ll right,ll a, ll h)
{
    if(left != 0)
    {
    	if(S[left-1] != s[left-1])
    		h++;
    	if(h > K)
    		return;
        if(!isAPSatisfied(s,left-1))
            return;
    }

    if(left == right)
    {
    	ll temp;
        if(1 <= a)
        {
            s[left] = 'a';
            if(S[left] != 'a')
            	temp = 1;
            else temp = 0;
            if(h + temp <= K)
            	valid(count,s);
        }
        if(2 <= a)
        {
            s[left] = 'b';
            if(S[left] != 'b')
            	temp = 1;
            else temp = 0;
            if(h + temp <= K)
            	valid(count,s);

        }
        if(3 <= a)
        {
            s[left] = 'c';
            if(S[left] != 'c')
            	temp = 1;
            else temp = 0;
            if(h + temp <= K)
            	valid(count,s);
        }
    }
    else
    {
        string tempS = s;
        if(1 <= a)
        {
            tempS[left] = 'a';
            permuteAndCount(count,tempS,left+1,right,a,h);
        }
        if(2 <= a)
        {
            tempS[left] = 'b';
            permuteAndCount(count,tempS,left+1,right,a,h);
        }
        if(3 <= a)
        {
            tempS[left] = 'c';
            permuteAndCount(count,tempS,left+1,right,a,h);
        }
    }
}

void findGoodStrings(string s,ll left,ll right,ll a)
{
    if(left != 0)
    {
        if(!isAPSatisfied(s,left-1))
            return;
        goodStrings[left].push_back(s.substr(0,left));
    }

    if(left == right)
    {
    	ll temp;
        if(1 <= a)
        {
            s[left] = 'a';
            if(S[left] != 'a')
            	temp = 1;
            else temp = 0;
            if(isAPSatisfied(s,left))
            	goodStrings[left+1].push_back(s);
        }
        if(2 <= a)
        {
            s[left] = 'b';
            if(S[left] != 'b')
            	temp = 1;
            else temp = 0;
            if(isAPSatisfied(s,left))
            	goodStrings[left+1].push_back(s);

        }
        if(3 <= a)
        {
            s[left] = 'c';
            if(S[left] != 'c')
            	temp = 1;
            else temp = 0;
            if(isAPSatisfied(s,left))
            	goodStrings[left+1].push_back(s);
        }
    }
    else
    {
        string tempS = s;
        if(1 <= a)
        {
            tempS[left] = 'a';
            findGoodStrings(tempS,left+1,right,a);
        }
        if(2 <= a)
        {
            tempS[left] = 'b';
            findGoodStrings(tempS,left+1,right,a);
        }
        if(3 <= a)
        {
            tempS[left] = 'c';
            findGoodStrings(tempS,left+1,right,a);
        }
    }
}


bool isPossibleAtAll(ll a)
{
    ll h = 0;
    string temp = "";
    char c[3] = {'a','b','c'};
    for(ll i=0,l=S.length(); i<l; i++)
    {
        bool check = true;
        for(int j=0; j<a; j++)
            if(S[i] == c[j])
        {
            check = false;
            break;
        }
        if(check)
        {
            h++;
            if(h > K)
                return false;
        }
    }
    return true;
}

bool hammingCheck(string s1,string s2)
{
    ll h = 0;
    for(ll i=0,l=s1.length(); i<l; i++)
    {
        if(s1[i] != s2[i])
            h++;
        if(h>K)
            return false;
    }
    return true;
}

int main()
{
    ll t;
    scanf("%lld",&t);
    findGoodStrings("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",0,49,3);
    string w = "abc";
    while(t--)
    {
        ll a,k;
        scanf("%lld %lld",&a,&K);
        string s;//= "abcbcbcadfcbdfgbcdfebcdbabcbdbfbcbdsabccbbccabcvdc";
        cin>>s;

        ll count = 0;
        S = s;
        //count = 0;
        if(isPossibleAtAll(a))
        {
            if(a != 3)
            {
                permuteAndCount(&count,s,0,s.length()-1,a,0);
                printf("%lld\n",count);
            }
            else
            {
                ll sLen = s.length();

                for(ll i=0,l=goodStrings[sLen].size(); i<l; i++)
                {
                    if(hammingCheck(goodStrings[sLen][i],S))
                    {
                        count = count + 1;
                        if(count >= MOD)
                            count = count%MOD;
                    }

                }
                printf("%lld\n",count);
            }
        }


    }
    return 0;
}
