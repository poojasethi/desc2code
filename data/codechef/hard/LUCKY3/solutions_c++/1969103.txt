#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
#include<queue>
#include<map>
using namespace std;

typedef long long ll;
#define NN 55
#define pb push_back

int n;
vector<string>lucky;
string in[NN];
bool ok[NN];
int mask[NN];
ll dp[NN][(1<<9)];


void gen(string a, int s)
{
    if(s<9)
    {
        a[8-s]  ='4';
        lucky.pb(a);
        gen(a, s+1);
        a[8-s]= '7';
        lucky.pb(a);
        gen(a, s+1);

    }

}

void precompute()
{
    string a = "000000000";
    gen(a, 0);
    sort(lucky.begin(), lucky.end());
}

void input()
{
    scanf("%d", &n);
    for(int i=0; i<n; i++)
    {
        cin>>in[i];
        reverse(in[i].begin(), in[i].end());
        while(in[i].length()!=9)in[i]+='0';
        reverse(in[i].begin(), in[i].end());
    }
}
void solve()
{
    input();
    ll ans = 0;
    int newmask;

    for(int i=0; i<lucky.size(); i++)
    {
        for(int j=0; j<n; j++)
        {
            ok[j] = 1;
            for(int k=0; k<9; k++)
            {
                if( in[j][k]>lucky[i][k])
                {
                    ok[j]=0;
                    break;
                }
            }

            if(ok[j])
            {
                mask[j] = 0;
                for(int k=0; k<9; k++)
                {
                    if(in[j][k] == lucky[i][k])
                    mask[j]+= (1<<k);
                }
            }

        }
        memset(dp, 0, sizeof(dp));
        int c=0, m=0;
        while(c<9 && lucky[i][c] == '0')
        {
            c++;
        }
        for(int k=0; k<c; k++)
        {
            m+= (1<<k);
        }
        dp[0][m] = 1;
        for(int j=0; j<n; j++)
        {
            for(int k=m; k<(1<<9); k++)
            {
                if(dp[j][k] == 0)continue;
                if(ok[j])
                {
                    newmask = mask[j]|k;
                    dp[j+1][newmask]+= dp[j][k];
                }
                dp[j+1][k]+= dp[j][k];

            }
        }
        ans+= dp[n][(1<<9)-1];
    }
    printf("%lld\n", ans);
}

int main()
{
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin);
   freopen("output.txt","w",stdout);
   #endif
   int t;
   precompute();
   scanf("%d", &t);
   while(t--)
   {
       solve();
   }
}
