#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

long long dp[55][515];
char s[55][20];
int n;

int get_state(int y,int m,int state)
{
	if(strlen(s[y]) > m) return -1;
	int new_state = 0;
	for(int i = 0; i < strlen(s[y]); i ++) {
		int p = state & (1 << i);
		if(p == 0 && s[y][i] > '4') return -1;
		if(p && s[y][i] > '7') return -1;
		if((state & (1 << i)) && s[y][i] == '7') new_state |= (1 << i);
	        if(!(state & (1 << i)) && s[y][i] == '4') new_state |= (1 << i);	
	}
	return new_state;
}

long long solve(int m,int state)
{
	for(int i = 0; i <= n; i ++)
		for(int j = 0; j < (1 << m); j ++)
			dp[i][j] = 0;
	dp[0][0] = 1;
	for(int i = 0; i < n; i ++) {
		for(int j = 0; j < (1 << m); j ++)
			dp[i + 1][j] += dp[i][j];
		int new_state = get_state(i + 1,m,state);
		if(new_state == -1) continue;
		for(int j = 0; j < (1 << m); j ++)
			dp[i + 1][j | new_state] += dp[i][j];
	}
	return dp[n][(1 << m) - 1];
}

int main()
{
	int t;
	scanf("%d",&t);
	while(t --) {
		scanf("%d",&n);
		for(int i = 1; i <= n; i ++) {
			scanf("%s",s[i]);
			reverse(s[i],s[i] + strlen(s[i]));
		}
		long long ans = 0;
		for(int i = 1; i < 10; i ++) {
		       for(int j = 0; j < (1 << i); j ++) {
			       ans += solve(i,j);
		       }
		}
		cout << ans << endl;
	}
	return 0;
}

