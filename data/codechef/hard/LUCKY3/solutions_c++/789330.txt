#include<iostream>
#include<vector>
#include<queue>
#include<string>
#include<algorithm>
#include<functional>
#include<iomanip>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<cstdlib>
using namespace std;

/*========================================Templates=============================================*/
#define Testcases(tc)	int tc;	S(tc);	while(tc--)
#define REP(i,n)		for(int i=0;i<(n);++i)
#define FOR(i,a,b)		for(int i=(a);i<=(b);++i)
#define FORN(i,a,b,n)	for(int i=(a);i<=(b);i+=n)
#define FORD(i,a,b)		for(int i=(a);i>=(b);--i)
#define FORDN(i,a,b,n)	for(int i=(a);i>=(b);i-=n)
#define FOREACH(i,c)	for(__typeof((c).begin()) i=(c).begin();i!=(c).end();++i)
#define ALL(x)			(x).begin(),(x).end()
//#define S(n)			scanf("%d",&n)
#define S2(n1,n2)		scanf("%d %d",&n1,&n2)
#define S3(n1,n2,n3)	scanf("%d %d %d",&n1,&n2,&n3)
#define SL(n)			scanf("%lld",&n)
#define SD(n)			scanf("%f",&n)
#define SS(a)			scanf("%s",a)
#define DB(x)			cout<<#x<<" : "<<x<<endl;

typedef long long LL;
typedef unsigned long long ULL;
typedef unsigned int UINT;

/*======================================IO OPTIMISED FUNCTIONS===================================*/
int sign;
int ch;
inline void S( int &x )
{
			x=0;
			while((ch<'0' || ch>'9') && ch!='-' && ch!=EOF)	ch=getchar_unlocked();
			if (ch=='-')
				sign=-1 , ch=getchar_unlocked();
			else
				sign=1;
			
			do
				x=(x<<3)+(x<<1)+ch-'0';
			while((ch=getchar_unlocked())>='0' && ch<='9');
			x*=sign;
}
/*===============================================================================================*/

#define MAX (1<<9)
int A[51][10];
int L[51];
int N;
LL dp[50][MAX];

int visited[50][MAX];
int vid=0;

int mask;

long long memo(int idx, int mask1, int len)
{
	if (idx==N)
	{
		if (mask1+1 == (1<<len))
			return 1;
		else
			return 0;
	}
	
	if ( visited[idx][mask1] == vid )
		return dp[idx][mask1];
		
	LL  & res = dp[idx][mask1];

	if ( L[idx] > len )
		return res = memo(idx+1, mask1, len);

	int newmask = mask1;
	bool flag = false;
	
	REP(j , L[idx])
	{
		flag |= (A[idx][j] > 1) && ! ((mask>>j) & 1);
		if ( ( A[idx][j] == 3 && ((mask>>j) & 1) ) || ( A[idx][j] == 1 && ! ((mask>>j) & 1) ) )
			newmask |= (1<<j);
	}

	if (flag)
		return res = memo(idx+1, mask1, len);
	
	res = memo(idx+1, mask1, len) + memo(idx+1, newmask, len);

	visited[idx][mask1] = vid;
	
	return res;	
}

void solve()
{
	long long ans = 0;
	int t = MAX;

	int len=1;
	REP(i,t)
	{
		if (i>1 && (i & (i-1))==0 )
			len++;
				
		FOR(j,len,9)
		{
			vid++;
			mask = i;
			ans += memo(0, 0, j);
		}
	}
	
	printf("%lld\n", ans);
}



int main()
{
	int tc;
	S(tc);
	while(tc--)
	{		
		S(N);
		
		memset(A,0,sizeof A);
		
		REP(i,N)
		{
			int x,c=0,flag=false;
			S(x);
			
			while(x)
			{
				A[i][c] = x%10;		x/=10;

				if (A[i][c] > 7)
					flag = true;					
				else if (A[i][c]==7)
					A[i][c]=3; 
				else if (A[i][c]>4)
					A[i][c]=2; 
				else if (A[i][c]==4)
					A[i][c]=1; 
				else
					A[i][c]=0;

				c++; 
			}
			
			L[i] = c;
			
			if (flag)
				i-- , N--;
		}
		
		solve();
				
	}
}







