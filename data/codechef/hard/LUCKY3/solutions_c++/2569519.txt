#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

typedef long long LL;
typedef long double LD;
typedef vector <int> VI;
typedef vector <double> VD;
typedef vector <VI> VVI;
typedef pair <int,int> PII;
typedef vector <PII > VPII;
typedef pair <double, double> PDD;
typedef vector <PDD> VPDD;

#define SZ(a) int((a).size())
#define PB push_back
#define ALL(c) (c).begin(),(c).end()
#define PRESENT(c,x) ((c).find(x) != (c).end())
#define NOT_PRESENT(c,x) (find(all(c),x) != (c).end())
#define REP(i,n) for(int _n=n, i=0;i<_n;++i)
#define FOR(i,a,b) for(int i=(a),_b=(b);i<=_b;++i)
#define FOREACH(it,c) for(typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
#define FI first
#define SE second
#define INPUT(a) freopen (a, "r", stdin)
#define OUTPUT(a) freopen (a, "w", stdout)
#define MAXN 100000

/* Main Code Starts Now 
 * Author : Praveen Dhinwa
 * Handle : 	Spoj, praveen123
 * 		Topcoder, praveen123
 * 		Codeforces, MohallaBoy
 * College : IIT Kanpur.
 * Email id : praveendhinwa@gmail.com  
 */

int n;
const int N = 55;
int B [25];
int a [N];
vector <vector <int> > dig (N);

long long memo[N][(1<<10) + 5];
int LEN;

long long dp (int index, int mask)
{
    long long &res = memo[index][mask];
   
    //cout << index << "  " << mask << endl;

    if (res == -1)
    {
        res = 0;
        if (index == n)
        {
            if (mask == (1 << LEN) - 1)
                res = 1;
        }
        else 
        {
            res = 0;
            int newMask = mask;
            int ok = true;

            //cout << "dig " << dig[index].size() << " " << LEN << endl;

            for (int i = 0; i < LEN; i++)
            {
                if (dig[index].size() > LEN)
                {
                    ok = false;
                    break;
                }

                if (mask & (1 << i))
                {
                    int t = dig[index].size() > i ? dig[index][i] : 0;
                    //cout << "hk : " << t << endl;
                    if (t > B[i])
                    {
                        ok = false;
                        break;
                    }
                }
                else 
                {
                    int t = dig[index].size() > i ? dig[index][i]: 0;
                   
                    //cout << "Hi " << LEN << " " << t << endl;
                    
                    //cout << B[0] << B[2] << endl;

                    if (t == B[i])
                    {    
                        //cout << "b :" << B[i] << endl;
                        newMask |= (1 << i);
                    }
                    else if (t > B[i])
                    {
                        ok = false;
                        break;
                    }
                }
            }
          
            //cout << "OK " << ok << endl;
            res += dp (index + 1, mask);

            if (ok)
                res += dp (index + 1, newMask);
        }
    }

    return res;
}

int main()
{
    int T;
    scanf ("%d", &T);

    while (T--)
    {
        scanf ("%d", &n);
        
        int mxLen = 0;

        for (int i = 0; i < n; i++)
        {    
            scanf ("%d", &a[i]);
            
            vector <int> d;
            int temp = a[i];
            while (temp)
            {
                d.push_back (temp % 10);
                temp /= 10;
            }

            mxLen = max (mxLen, (int) d.size());

            //reverse (d.begin(), d.end());

            for (int j = 0; j < d.size(); j++)
                dig[i].push_back (d[j]);
        }

        long long ans = 0;

        for (int len = 1; len <= mxLen; len++)
        {
            for (int mask = 0; mask < (1 << len); mask++)
            {
                
                for (int j = 0; j < len; j++)
                {
                    if (mask & (1 << j))
                    {
                        B[j] = 7;                   
                    }
                    else 
                        B[j] = 4;
                }
                
                memset (memo, -1, sizeof (memo));
                LEN = len;
               
                //cout << "HHHHH :";
                //for (int i = 0; i < len; i++)
                //    cout << B[i];
                //cout << endl;
                
                long long temp = dp (0, 0);
                
                //cout << "answer += " << temp << endl;
                
                ans += temp;
            }
        }

        printf ("%lld\n", ans);
        
        for (int i = 0; i < n; i++)
            dig[i].clear();
    }


    return 0;
}
