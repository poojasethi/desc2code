#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

long long dp[51][1<<9];

int main ()
{
	int T, n, M;
	int W[50];
	scanf ("%d",&T);
	while (T--)
	{
		scanf ("%d",&n);
		M = 0;
		for (int i = 0; i < n; i++)
		{
			scanf ("%d", &W[i]);
			M = max (M, W[i]);
		}
		int d = 0;
		while (M)
		{
			d++;
			M /= 10;
		}
		long long ret = 0;
		for (int len = 1; len <= d; len++)
			for (int mask = 0; mask < (1 << len); mask++)
			{
				memset (dp, 0, sizeof (dp));
				dp[0][0] = 1;
				for (int i = 0; i < n; i++)
					for (int j = 0; j < (1 << len); j++)
						if (dp[i][j])
						{
							dp[i+1][j] += dp[i][j];
							int temp = j;
							int curr = W[i];
							for (int k = 0; k < len; k++)
							{
								int r = curr % 10;
								int t = (mask & (1 << k)) ? 7:4;
								if (r > t)
								{
									temp = -1;
									break;
								}
								else if (r == t)
									temp |= 1 << k;
								curr /= 10;
							}
							if (curr == 0 && temp >= 0)
								dp[i+1][temp] += dp[i][j];
						}
				ret += dp[n][(1 << len) - 1];
			}
		printf ("%lld\n", ret);
	}
	return 0;
}