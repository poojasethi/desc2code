#include<stdio.h>
#define MAXDIGS 9
#define MAXLEN 50
#define LIMIT 511

int W[MAXLEN+2];
int w[MAXLEN+2];
int n;
int N;
long long int dpTable[LIMIT+2][(1<<MAXDIGS)-1+2];


int main()
{
	long long int ans;
	int t;	
	int temp;
	int num;
	bool cont;
	int dig;
	int bit;
	int objective;
	int bitsN;
	int mask;
	bool isPossible;
	scanf("%d", &t);
	while(t--)
	{
		scanf("%d", &N);
		for(int i = 1; i <= N; i++)
			scanf("%d", &W[i]);
		
		ans = 0;
		for(int i = 1; i <= LIMIT; i++)
		{
			for(int k = 0; k <= 1; k++)
			{
				n = 0;
				isPossible = false;
				//setting up the array w
				for(int j = 1; j <= N; j++)
				{
					mask = 0;
					bitsN = 0;
					cont = true;
					temp = i;
					num = W[j];
					dig = num%10;
					bit = temp&1;
					while(cont&&temp&&num)
					{
						if (k)
						{
							if((dig>7)||(dig>4&&!bit))
								cont=false;
							if (((dig==7)&&bit)||((dig==4)&&(!bit)))
								mask|=(1<<bitsN);
						}
						else
						{
							if((dig>7)||(dig>4&&bit))
								cont=false;
							if (((dig==4)&&bit)||((dig==7)&&(!bit)))
								mask|=(1<<bitsN);
						}
						temp>>=1;
						num/=10;
						dig = num%10;
						bit = temp&1;
						bitsN++;
					}
					if (cont&&!num)
						w[++n] = mask;
					if (!num&&!temp)
						isPossible = true;
				}
				while(temp)
				{
					temp>>=1;
					bitsN++;
				}
				//dynamic programming
				if(isPossible)
				{
					objective = (1<<bitsN)-1;
					for(int j = 0; j <= objective; j++)
						dpTable[n][j] = 0;
					for(int I = n-1; I >= 0; I--)
					{
						for(int num = 0; num <= objective; num++)
						{
							mask = num|w[I+1];
							dpTable[I][num] = dpTable[I+1][num]+dpTable[I+1][mask];
							if(mask==objective)
								dpTable[I][num]++;
						}
					}
					ans+=dpTable[0][0];
				}
			}
		}
		printf("%lld\n", ans);
		
	}
	return 0;
}


