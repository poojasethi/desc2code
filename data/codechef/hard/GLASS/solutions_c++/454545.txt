#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue>
using namespace std;
typedef long long  x64;
inline x64 gcd(x64 a, x64 b){
	if(b==0) return a;
	return gcd(b,a%b);
}
int main()
{
x64 T,N,Q,ai[11],a,b,c,S[100010],M,u,v,INF=1;
INF<<=62;
//cout<<INF<<"\n";
scanf("%lld",&T);
//queue< x64 > q;
//bool inqueue[100010];
while(T--)
{
	scanf("%lld",&N);
	x64 w;
	for(int i=1; i <= N; i++) scanf("%lld",&ai[i]);
	scanf("%lld",&Q);
	scanf("%lld",&a);
	scanf("%lld",&b);
	scanf("%lld",&c);
	//sort(ai+1,ai+N+1);
	x64 index=1,mp;
	
	for(int i=2; i <= N; i++){
	if(ai[i] < ai[index]) index=i;
	}
	mp=ai[index];
	ai[index]=ai[1];
	ai[1]=mp;
	for(int i=1; i < ai[1]; i++) S[i]=ai[1];
	if(ai[1]==1) cout<<"-1\n";
	else{
	for(int i=1; i < ai[1]; i++) S[i]=INF;
	S[0]=0;
	for(int i=2; i <= N; i++)
	{
		u=gcd(ai[1],ai[i]);
		for(x64 r=0; r < u ; r++)
		{
			v=INF;
			//x64 k=0;
			for(x64 d=r; d <=r+ai[1]-u ; d+=u)
			{
			//x64 SD=((d)*(u));
			//if(d > ai[1]-u) break;
			//x64 sw=((r)+SD);
			//if(sw > r+ai[1]-u) break;
			if(v > S[d]) v=S[d];
			//k++;
			//if(v > sw) v=sw;
			}
		for(x64 io=0; io < (ai[1]/u); io++)
		{
			
			v=v+ai[i];
			if(v >= INF)  break;
			x64 p=v%ai[1];
			v= (v < S[p])?v:S[p];
			S[p]=v;
		
		}
		}	
	}
	M=0;
	for(int i=0; i < ai[1]; i++) if(S[i] > M) M=S[i];
	M=M-ai[1];
	if(M < 0) M=0;
	cout<<M<<"\n";
	}
	x64 count=0,F,klh=0;
	//cout<<S[0]<<" "<<S[1]<<" "<<S[2]<<" "<<S[3]<<" "<<S[4]<<"\n";
	for(x64 i=1;i <= Q; i++)
	{
	M=((((a%c) * (i%c))%c)+(b%c))%c;
	F=M%ai[1];
	if(M >= S[F] ) count++;
	else klh++;
	}
	cout<<klh<<" "<<count<<"\n";
}
return 0;
}