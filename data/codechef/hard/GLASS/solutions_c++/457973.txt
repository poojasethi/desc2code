#include <iostream>
#include <cstdio>
#include <algorithm>

typedef long long LL;
#define inf 10000000000000LL


using namespace std;

int binary_gcd(int a, int b){
    if(a==0){return b;}
    if(b==0){return a;}
    if(a%2==0&&b%2==0){return binary_gcd(a/2,b/2)*2;}
    if(a%2==0){return binary_gcd(a/2,b);}
    if(b%2==0){return binary_gcd(a,b/2);}
    else return (a>b? binary_gcd(a-b,b): binary_gcd(a, b-a));
}

int arr[11];
long long  frob[100001];


void calc_frob(int n){
    
     for(int i=0; i<arr[0]; i++){frob[i]=inf;}
      frob[0]=0;
     for(int i=1; i<n; i++){
             int d=__gcd(arr[0],arr[i]);
             int rep=arr[0]/d;
             
             for(int r=0; r<d; r++){
             long long N=inf;
                     for(int q=r; q<=r+(arr[0]-d); q+=d){
                             N=min(frob[q],N);
                             }
                     if(N<inf){
                               for(int t=0; t<rep; t++){
                                       N=N+arr[i];
                                       int P=N%arr[0];
                                       N=min(N,frob[P]);
                                       frob[P]=N;
                                       }
                               }
                     }
             }
}
                             
     
int main()
{
    int tc;
    scanf("%d",&tc);
    while(tc--){
                int n;
                scanf("%d",&n);
                for(int i=0; i<n; i++){scanf("%d",&arr[i]);}
                sort(arr,arr+n);
                calc_frob(n);
                long long  M=-1;
                for(int i=0; i<arr[0]; i++){M=max(M,frob[i]);}
                printf("%lld\n",M-arr[0]);
                
                int Q;
                scanf("%d",&Q);
                long long  a,b,c;
                scanf("%lld %lld %lld",&a,&b,&c);
               int ret=0; 
                for(int i=1; i<=Q; i++){
                        long long  val=(a*i + b)%c;
                        int m=val%arr[0];
                        if(val>=frob[m]){
                                           ret++;
                                           }
                        }
                printf("%d %d\n",Q-ret,ret);
                }
return 0;
}
