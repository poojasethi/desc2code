#include <iostream>
#include<cstdio>
#include<algorithm>
using namespace std;
typedef long long LL;
#define MAXV 100001
#define INF 10000000000000LL

using namespace std;

int num[11];
int N;
LL table[MAXV];

inline LL calc_frobenius()
{
	for(int i=0; i<num[0]; i++){table[i]=INF;}
	table[0] = 0;
	
	for(int i=1;i<N;i++)
	{
		LL n;
		int p;
		
		int d = __gcd(num[0],num[i]);
		int t = num[0]/d;
		
		for(int r=0;r<d;r++)
		{
			LL n = INF;
			for(int itr=1,q=r;itr<t;itr++,q+=d)
			n = min(n,table[q]);
			
			if(n < INF)
			{
				for(int steps=0;steps<t;steps++)
				{
					n = n+num[i];
					p = n%num[0];
					n = min(n,table[p]);
					table[p] = n;
				}
			}
		}
	}
	LL m = -1;
	for(int i=0;i<num[0];i++)
	m = max(m,table[i]);
	return m-num[0];
}

inline int query(LL x)
{

}
int main()
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d",&N);
		for(int i=0;i<N;i++){scanf("%d",&num[i]);}
		
		sort(num,num+N);
		LL M = calc_frobenius();
		printf("%lld\n",M);
		
		int Q;
		scanf("%d",&Q);
		LL a,b,c;
		scanf("%lld %lld %lld",&a,&b,&c);
		
		int ret = 0;
		for(int q=1;q<=Q;q++)
		{	
			LL x = (a*q + b)%c;
				int p = x%num[0];
	            if(x>=table[p]){
                                ret++;
                                }
             }
		printf("%d %d\n",Q-ret,ret);
	}
	return 0;
}
