#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<map>
#include<vector>
#include<list>
#include<set>
#include<queue>
#include<cassert>
#include<sstream>
#include<string>
#include<cmath>
#include<algorithm>
using namespace std;

#define LET(x,a) 	__typeof(a) x(a)
#define IFOR(i,a,b) 	for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  	IFOR(it,v.begin(),v.end())
#define FOR(i,a,b)  	for(int i=(int)(a) ; i < (int)(b);++i)
#define REP(i,n) 	FOR(i,0,n)
#define PB		push_back
#define MP 		make_pair
#define EPS		1e-9
#define INF 10000000000000LL

typedef vector<int>	VI;
typedef long long	LL;
typedef pair<LL,int>	PI;

int n;
int val[100],add[100];

LL dist[100001];

void dijkstra() {
	fill(dist, dist + val[0], INF);
	dist[0] = 0;
	set<PI> s; s.insert(MP(0, 0));
	int ver,ver2;
	LL curDist,newDist;
	while (!s.empty()) {
		PI top = *s.begin(); s.erase(s.begin());
		ver = top.second;
		FOR(i,1,n) {
			ver2 = ver + add[i];
			newDist =dist[ver]+ val[i];
			if(ver2 >= val[0])ver2 -= val[0];
			if (dist[ver2] > newDist) {
				if (dist[ver2] != INF) {
					s.erase(s.find(PI(dist[ver2], ver2)));
				}
				dist[ver2] = newDist;
				s.insert(PI(dist[ver2], ver2));
			}
		}
	}
	return;
}

int main(){
	//freopen("in.txt","r",stdin);
	int t;cin>>t;while(t--){
		scanf("%d",&n);
		REP(i,n)scanf("%d",&val[i]);
		sort(val,val+n);
		REP(i,n)add[i]=val[i]%val[0];
		if(val[0]==1){
			puts("-1"); //everything is possible to be constructed.
		}
		else {
			dijkstra();
			LL M = 0;
			FOR(i,1,val[0])M = max(M,dist[i]);
			M -= val[0];
			assert(M>=0);
			printf("%Ld\n",M);
		}

		//queries later.
		int Q;
		LL a,b,c;
		scanf("%d%lld%lld%lld",&Q,&a,&b,&c);
		if(val[0]==1){
			printf("0 %d\n",Q);
		}
		else {
			int A=0,B=0;a%=c,b%=c;LL st=b;
			for(int i=1;i<=Q;i++){
				st=(st+a)%c;
				int x=st%val[0];
				if(st>=dist[x])B++;
				else A++;
				}
			printf("%d %d\n",A,B);
		}
	}
	return 0;
}
