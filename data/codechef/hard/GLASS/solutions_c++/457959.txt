#include <iostream>
#include<cstdio>
#include<algorithm>
using namespace std;
typedef long long LL;
#define MAXV 100001
#define INF 10000000000000LL

using namespace std;

int gcd(int a, int b){ return (b)?(gcd(b,a%b)):(a);}
int num[11];
int N;
LL frob[MAXV];

inline void calc_frobenius()
{
	for(int i=0; i<num[0]; i++){frob[i]=INF;}
	frob[0] = 0;
	
	for(int i=1;i<N;i++)
	{
		LL n;
		int p;
		
		int d =gcd(num[0],num[i]);
		int t = num[0]/d;
		
		for(int r=0;r<d;r++)
		{
			LL n = INF;
			for(int q=r; q<=r+(num[0]-d); q+=d)
			n = min(n,frob[q]);
			
			if(n < INF)
			{
				for(int steps=0;steps<t;steps++)
				{
					n = n+num[i];
					p = n%num[0];
					n = min(n,frob[p]);
					frob[p] = n;
				}}}}
}

int main()
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		scanf("%d",&N);
		for(int i=0;i<N;i++){scanf("%d",&num[i]);}
		
		sort(num,num+N);
	 calc_frobenius();
	 LL M=-1;
	 for(int i=0; i<num[0]; i++){
             M=max(M,frob[i]);
             }
		printf("%lld\n",M-num[0]);
		
		int Q;
		scanf("%d",&Q);
		LL a,b,c;
		scanf("%lld %lld %lld",&a,&b,&c);
		
		int ret = 0;
		for(int q=1;q<=Q;q++)
		{	
			LL x = (a*q + b)%c;
				int p = x%num[0];
	            if(x>=frob[p]){
                                ret++;
                                }
             }
		printf("%d %d\n",Q-ret,ret);
	}
	return 0;
}
