#include <iostream>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <climits>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <numeric>
#include <sstream>
#include <string>
using namespace std;
#define out(X) cerr << #X << ": " << (X) << endl
#define SZ(X) ((int)(X.size()))
#define REP(I,N) for (int I = 0; I < (N); ++I)
#define FOR(I,L,H) for (int I = (L); I < (H); ++I)
#define MP(X,Y) make_pair((X),(Y))
#define PB push_back
#define ALL(X) X.begin(), X.end()
template <typename T> inline bool checkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }
template <typename T> inline bool checkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }
typedef long long lint;

const int MAXN = 1000000000;
const int MAXV = MAXN + 1;

int dp[2][20][100][100][100];
int dpsum[100];

int solve(int first, int len, int wsum, int nsum, int npro) {
    int &ans = dp[first][len][wsum][nsum][npro];
    if (ans != -1) return ans;
    ans = 0;
    if (len == 0) {
        if (wsum == nsum && npro == 0) ++ans;
        return ans;
    }
    if (nsum + 9 * len < wsum) return ans;
    FOR(i, first, 10) {
        ans += solve(0, len - 1, wsum, nsum + i, npro * i % wsum);
        if (ans >= MAXV) break;
    }
    return ans;
}

int main() {
    memset(dp, -1, sizeof(dp));
    for (int len = 1; ; ++len) {
        FOR(wsum, 1, 100) {
            dpsum[len] += solve(1, len, wsum, 0, 1 % wsum);
            if (dpsum[len] >= MAXV) break;
        }
        if (dpsum[len] >= MAXN) break;
    }
    int N;
    while (scanf("%d", &N), N) {
        int len;
        for (len = 1; ; ++len) {
            if (dpsum[len] >= N) break;
            N -= dpsum[len];
        }
        int nsum = 0, npro = 1;
        REP(i, len) {
            REP(num, 10) {
                if (i == 0 && num == 0) continue;
                int tmp = 0;
                FOR(wsum, 1, 100) {
                    tmp += solve(0, len - 1 - i, wsum, nsum + num, (npro * num) % wsum);
                    if (tmp >= N) break; 
                }
                if (tmp >= N) {
                    printf("%c", '0' + num);
                    nsum += num;
                    npro *= num;
                    break;
                } else {
                    N -= tmp;
                }
            }
        }
        puts("");
    }
    return 0;
}
