/*
 * by purple
 * at 12-04-29 19:46:25
 */

#include <cstdio>
#include <algorithm>
#include <cstring>
#include <vector>

using namespace std;

#define sz(x) ((int)((x).size()))
#define out(x) printf(#x" %d\n", x)
#define rep(i,n) for(int i=0;i<(n);++i)
#define repf(i,a,b) for(int i=(a);i<=(b);++i)

const int inf = 1000000010;

int dp[2][12][100][100][100];
int allnum[12];

/* is-first digit-num final-sum now-sum now-mul */

int gao(int is, int d, int fs, int ns, int nm) {
    if (dp[is][d][fs][ns][nm] != -1) {
        return dp[is][d][fs][ns][nm];
    }
    int& res = dp[is][d][fs][ns][nm];
    if (ns > fs || ns + d * 9 < fs) {
        return res = 0;
    }
    if (d == 0) {
        return res = (fs == ns && nm % fs == 0);
    }
    res = 0;
    repf (i, is, 9) {
        res += gao(0, d - 1, fs, ns + i, (nm * i) % fs);
    }
    return res;
}

void pre() {
    memset (dp, -1, sizeof(dp));
    repf (i, 1, 10) {
        allnum[i] = 0;
        repf (j, 1, 100) {
            allnum[i] += gao(1, i, j, 0, 1);
            if (allnum[i] >= inf) {
                allnum[i] = inf;
                break;
            }
        }
    }
}

int main() {
    pre();
    
    int n;
    while (scanf ("%d", &n), n) {
        --n;
        int dnum = 1;
        while (allnum[dnum] <= n) {
            n -= allnum[dnum++];
        }
        int ans = 0;
        int psum = 0, pmul = 1;
        rep (i, dnum) {
            rep (j, 10) {
                if (i == 0 && j == 0) continue;
                int nownum = 0;
                repf (sum, 1, 100) {
                    nownum += gao(0, dnum - i - 1, sum, psum + j, (pmul * j) % sum);
                    if (nownum >= inf) {
                        nownum = inf; 
                        break;
                    }
                }
                if (nownum > n) {
                    ans = ans * 10 + j;
                    psum += j;
                    pmul *= j;
                    break;
                }
                n -= nownum;
            }
        }
        printf ("%d\n", ans);
    }
    return 0;
}
