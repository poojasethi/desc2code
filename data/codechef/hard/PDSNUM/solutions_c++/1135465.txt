#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <sstream>
#include <set>
#include <map>
#include <queue>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <ctime>

#define MAXD 10

using namespace std;

int dp[MAXD + 1][MAXD*9 + 1][MAXD*9 + 1][MAXD * 9 + 1][2];

void go(int n, int L, int cur_S, long long r, int st)
{
	if(n <= 0) return;
	if(L == 0) return;
	
	int cnt = 0, lastcnt = 0;
	for(int d=st; d<=9; d++)
	{
		for(int S=max(1, cur_S+d); S<=9*MAXD; S++)
			cnt += dp[L-1][S-cur_S-d][S][(r*d)%S][0];
		if(n <= cnt)
		{
			printf("%d", d);
			go(n-lastcnt, L-1, cur_S+d, r*d, 0);
			break;
		}
		lastcnt = cnt;
	}
}

int main()
{
	for(int MOD=1; MOD<=9*MAXD; MOD++)
		dp[0][0][MOD][0][0] = 1;
	
	for(int L=1; L<=MAXD; L++)
	{
		for(int S=0; S<=9*L; S++)
		{
			int maxD = min(9, S);
			
			for(int MOD=1; MOD<=9*MAXD; MOD++)
			{
				for(int r=0; r<MOD; r++)
				{
					dp[L][S][MOD][r][0] = dp[L-1][S][MOD][0][0];
					dp[L][S][MOD][r][1] = 0;
					
					for(int d=1; d<=maxD; d++)
						dp[L][S][MOD][r][1] += dp[L-1][S-d][MOD][(r*d)%MOD][0];
					
					dp[L][S][MOD][r][0] += dp[L][S][MOD][r][1];
				}
			}	
		}
	}
	
	int n;
	while(scanf("%d", &n) == 1)
	{
		if(n == 0) break;
		
		for(int L=1; L<=MAXD; L++)
		{
			int cnt = 0;
			for(int S=1; S<=9*L; S++)
				cnt += dp[L][S][S][1%S][1];
			
			if(cnt < n) n -= cnt;
			else
			{
				go(n, L, 0, 1, 1);
				printf("\n");
				break;
			}
		}
	}
	
	return 0;
}