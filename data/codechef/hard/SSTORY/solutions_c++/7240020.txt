#include<bits/stdc++.h>

#define mod 1000000007
#define ll long long

#define debug(args...) {dbg,args; cerr<<endl;}


using namespace std;

struct debugger
{template<typename T> debugger& operator,(const T& v)
{cerr<< v <<" ";
return *this;
}
}dbg;



#define N 500005


string str; //input
int rank[N], pos[N]; //output
int cnt[N], next[N]; //internal
bool bh[N], b2h[N];
//vector<string>suf;
set<string>possible_lcs;
int l1,l2,lcslength;
bool mark[N];
// Compares two suffixes according to their first characters
bool smaller_first_char(int a, int b){
return str[a] < str[b];
}
void suffixSort(int n){
//sort suffixes according to their first characters
for (int i=0; i<n; ++i){
pos[i] = i;
}
sort(pos, pos + n, smaller_first_char);
//{pos contains the list of suffixes sorted by their first character}
for (int i=0; i<n; ++i){
bh[i] = i == 0 || str[pos[i]] != str[pos[i-1]];
b2h[i] = false;
}
for (int h = 1; h < n; h <<= 1){
//{bh[i] == false if the first h characters of pos[i-1] == the first h characters of pos[i]}
int buckets = 0;
for (int i=0, j; i < n; i = j){
j = i + 1;
while (j < n && !bh[j]) j++;
next[i] = j;
buckets++;
}
if (buckets == n) break; // We are done! Lucky bastards!
//{suffixes are separted in buckets containing strings starting with the same h characters}
for (int i = 0; i < n; i = next[i]){
cnt[i] = 0;
for (int j = i; j < next[i]; ++j){
rank[pos[j]] = i;
}
}
cnt[rank[n - h]]++;
b2h[rank[n - h]] = true;
for (int i = 0; i < n; i = next[i]){
for (int j = i; j < next[i]; ++j){
int s = pos[j] - h;
if (s >= 0){
int head = rank[s];
rank[s] = head + cnt[head]++;
b2h[rank[s]] = true;
}
}
for (int j = i; j < next[i]; ++j){
int s = pos[j] - h;
if (s >= 0 && b2h[rank[s]]){
for (int k = rank[s]+1; !bh[k] && b2h[k]; k++) b2h[k] = false;
}
}
}
for (int i=0; i<n; ++i){
pos[rank[i]] = i;
bh[i] |= b2h[i];
}
}
for (int i=0; i<n; ++i){
rank[pos[i]] = i;
}
}
// End of suffix array algorithm
// Begin of the O(n) longest common prefix algorithm
// Refer to "Linear-Time Longest-Common-Prefix Computation in Suffix
// Arrays and Its Applications" by Toru Kasai, Gunho Lee, Hiroki
// Arimura, Setsuo Arikawa, and Kunsoo Park.
int height[N];
// height[i] = length of the longest common prefix of suffix pos[i] and suffix pos[i-1]
// height[0] = 0
void getHeight(int n){
for (int i=0; i<n; ++i) rank[pos[i]] = i;
height[0] = 0;
for (int i=0, h=0; i<n; ++i){
if (rank[i] > 0){
int j = pos[rank[i]-1];
while (i + h < n && j + h < n && str[i+h] == str[j+h])
{
h++;
}
height[rank[i]] = h;
if (h > 0) h--;
}
}
}
// End of longest common prefixes algorithm

void fillLCS(int n)
{
for(int i=1;i<n;i++)
{
if(pos[i]<l1 && pos[i-1]<l1) mark[i]=0;
else if(pos[i]>l1 && pos[i-1]>l1) mark[i]=0;
else mark[i]=1;
}
for(int i=1;i<n;i++)
if(mark[i])
lcslength=max(lcslength,height[i]);
for(int i=1;i<n;i++)
{
if(height[i]==lcslength && mark[i]==1)
{
//debug("yes");
string temp;
int f=pos[i],s=pos[i-1];
while(f<n && s<n && str[f]==str[s])
{
temp+=str[f];
//debug(temp);
s++,f++;
}
int sz=temp.size();
if(sz)
{
//debug("inserting");
possible_lcs.insert(temp);
}
}
}

}

int main()
{
string a,b;
cin>>a>>b;
l1=a.length(),l2=b.length();
str=a+"#"+b;
int l=str.length();

suffixSort(l);
getHeight(l);
fillLCS(l);


int total=possible_lcs.size();
if(total==0)
{
printf("0");
return 0;
}

int j;
string to_find=b.substr(0,lcslength);
if((possible_lcs.find(to_find))!=possible_lcs.end())
{   cout<<to_find<<endl;
    printf("%d",lcslength);


return 0;
}

  for(int i=1;i<=l2-lcslength;i++)
{
to_find.erase(to_find.begin());
to_find = to_find + b[i+lcslength-1];

if((possible_lcs.find(to_find))!=possible_lcs.end())
{  cout<<to_find<<endl; printf("%d",lcslength);

break;
}
}

return 0;
}
