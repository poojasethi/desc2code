#include <bits/stdc++.h>
#define m 32
#define mod 65521
using namespace std;
char s1[250003] , s2[250003];
int l1 , l2 , ans;
long long int modpow( int a , int b )
{
  if( b==0)
    return 1;
  if( b % 2 == 0 )
  {
    long long int x = modpow( a , b /2);
    return ( x *x)%mod;
  }
  else return a*modpow(a,b-1);
}
map<long long int , int >h;

int v[mod]={0};
int ver=0;
vector<int> p[mod];

void add(int key,int pos){
    if (v[key]!=ver){
        v[key]=ver;
        p[key].clear();
        p[key].push_back(pos);
    }else {
        p[key].push_back(pos);
    }
}

bool check(int key,int l,int pos){
    if (v[key]==ver){
        for(int i=0;i<p[key].size();++i){
            int p1=p[key][i];
            int j;
            for(j=0;j<l;++j){
                if (s1[p1+j]!=s2[pos+j])
                    break;
            }
            if (j==l) return true;
        }
    }
    return false;
}


int find( int x )
{
  ver++;
  h.clear();
  int i , j;
  long long int ha = 0;
  long long int z = modpow( m , x-1);
  for( i = 0 ; i < x ; i++)
  {
    ha = ( ha*m + s1[i] )%mod;
  }
  add(ha , 0);
 // h[ha] = 0;
  for( i = 1 ; i < l1 - x + 1 ; i++)
  {
    ha = ( m*(ha - s1[i-1]*z) + s1[ i + x - 1] )%mod;
    if( ha < 0 )
      ha += mod;
    //h[ha] = i;
    add(ha,i);
  }
  ha = 0;

  for( i = 0 ; i < x ; i++)
  {
    ha = ( ha*m + s2[i] )%mod;
  }
   if(check(ha,x,0))
        {ans = 0;
          return 1;
        }
 /* if( h.find(ha) != h.end() )
  {
    ans = 0;
    return 1;
  }*/
  for( i = 1 ; i < l2 - x + 1 ; i++)
  {
    ha = ( m*(ha - s2[i-1]*z) + s2[ i + x - 1] )%mod;
    if( ha < 0 )
      ha += mod;
     if(check(ha,x,i)){
            ans = i;
            return 1;
        }
  }
  return 0;
}
int main(void)
{
  cin >> s1 >> s2;
  l1 = strlen(s1);
  l2 = strlen(s2);
  int i;
  int high = l2 + 1;
  int l = 0;
  int middle = ( high + l)/2;
  int res = 0;
  while( high - l > 1)
  {
    middle = ( high + l)/2;
    if( find(middle) )
    {
      l = middle;
    }
    else high = middle;
  }
  if( l > 0)
  {
    for( i = 0 ; i < l ; i++)
      putchar_unlocked( s2[i+ans] );
    printf("\n%d\n",l );
  }
  else puts("0");
  return 0;
}


