#include <iostream>
#include <string>
#include <vector>
using namespace std;
int B = 26;
int H = 28879;
int modu(int a,int b)
{
	return (((a%b)+b)%b);
}
//adsyufsfdsfdsf
//fdyusgfdfyu


bool RK(int m, string txt,string pat)
{
	//int *arr = new int[1000007]();
	//cout <<"in RK: "<<m<<endl;
	vector<long> v[28879];
	int E=1;
	for(int i = 0 ; i < m-1 ; i++)
		E = modu(E*B,H);
	int lenpat = pat.length();
	int lentxt = txt.length();
	long ht = 0;
	//cout << "here 1"<<endl;
	for(int i = 0 ; i < m ; i++)
	{
		 ht = modu(((ht*B)+txt[i]),H);	
	}
	//arr[ht] = 1;
	v[ht].push_back(1);
//	cout << "here 2"<<endl;
	for(int i = m ; i < lentxt ; i++)
	{
		ht = modu(ht-(modu((E*txt[i-m]),H)),H);
		ht = modu((ht*B),H);
		ht = modu((ht+txt[i]),H);
		//arr[ht] = i-m+2;
		v[ht].push_back(i-m+2);
	}
	ht = 0;
//	cout << "here 3"<<endl;
	for(int i = 0 ; i < m ; i++)
	{
		 ht = modu(((ht*B)+pat[i]),H);	
	}
	for(int i = 0 ; i < v[ht].size() ; i++)
	{
		int j = v[ht][i]-1;
		int t = 0;
		for(int k = 0 ; k < m ; k++)
		{
			if(pat[k] != txt[j+k])
				break;	
			t++;
		}
		if(t == m)
			{
//				cout << "going to return true"<<m <<endl;
				return true;
			}

	}
//	cout << "here 4"<<endl;
	for(int i = m ; i < lenpat ; i++)
	{
		ht = modu(ht-(modu((E*pat[i-m]),H)),H);
		ht = modu((ht*B),H);
		ht = modu((ht+pat[i]),H);
		for(int fu = 0 ; fu < v[ht].size() ; fu++)
		{
			int j = v[ht][fu]-1;
			int t = 0;
			for(int k = 0 ; k < m ; k++)
			{
//				cout <<"yoooo: "<< pat[i-m+1+k]<<" : "<<txt[j+k]<<endl;
				if(pat[i-m+1+k] != txt[j+k])
					break;
				t++;
			}
			if(t == m)
			{
//				cout << "going to return true: "<<m<<endl;
				return true;
			}
		}
	}
//	cout << "going to return false: "<<m<<endl;
	return false;
}

int RKfinal(int m, string txt,string pat)
{
	vector<long> v[28879];

	int E=1;
	for(int i = 0 ; i < m-1 ; i++)
		E = modu(E*B,H);
	int lenpat = pat.length();
	int lentxt = txt.length();
	long ht = 0;
	//cout <<"text :"<<endl;
	for(int i = 0 ; i < m ; i++)
	{
		 ht = modu(((ht*B)+txt[i]),H);	
	//	 cout << txt[i] << " : "<<ht<<endl;
	}
	//arr[ht] = 1;
	v[ht].push_back(1);
	for(int i = m ; i < lentxt ; i++)
	{
		ht = modu(ht-(modu((E*txt[i-m]),H)),H);
		ht = modu((ht*B),H);
		ht = modu((ht+txt[i]),H);
		//arr[ht] = i-m+2;
		v[ht].push_back(i-m+2);
	//	cout << txt[i] << " : "<<ht<<endl;
	}
	ht = 0;
	for(int i = 0 ; i < m ; i++)
	{
		 ht = modu(((ht*B)+pat[i]),H);	
	//	 cout << pat[i] << " : "<<ht<<endl;
	}
	for(int i = 0 ; i < v[ht].size() ; i++)
	{
		int j = v[ht][i]-1;
		int t = 0;
		for(int k = 0 ; k < m ; k++)
		{
			if(pat[k] != txt[j+k])
				break;
			t++;
		}
		if(t == m)
			return 0;
	}
	for(int i = m ; i < lenpat ; i++)
	{
		ht = modu(ht-(modu((E*pat[i-m]),H)),H);
		ht = modu((ht*B),H);
		ht = modu((ht+pat[i]),H);
	//	cout << pat[i] << " : "<<ht<<endl;
		for(int fu = 0 ; fu < v[ht].size() ; fu++)
		{
			int j = v[ht][fu]-1;
			int t = 0;
			for(int k = 0 ; k < m ; k++)
			{
				if(pat[i-m+1+k] != txt[j+k])
					break;
				t++;
			}
			if(t == m)
				return i-m+1;
		}
	}
	//return false;
}


int main()
{
	string s1, s2 ;
	cin >> s1 >> s2;
	
	int n = s1.length();
	int m = s2.length();

	

	int start = 0;
	int end = m+1;
	while(start+1 < end)
	{
		int mid = (start+end)/2;
		if(RK(mid,s1,s2) == true)
		{
		//	cout << "for mid = "<<mid<<"the value returned is true"<<endl;
			start = mid;
		}	
		else{
		//	cout << "for mid = "<<mid<<"the value returned is false"<<endl;
			end = mid;
		}
	}
	if(start == 0)
	{
		cout << start <<endl;
	}
	else{
//		cout <<"ENTERING RKFINAL"<<endl;
	int t = RKfinal(start,s1,s2);
	for(int i = t ; i < t+start ; i++)
		cout<<s2[i];
	cout << endl;
	cout << start<<endl;
}

}
