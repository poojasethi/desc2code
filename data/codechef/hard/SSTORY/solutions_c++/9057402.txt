//OM
#include <cmath>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <list>
#include <stack>
#include <queue>
#include <utility>
#include <sstream>
#include <algorithm>
using  namespace  std;

#define  x first
#define  y second
#define  pb push_back
#define  mp make_pair
#define  PI (acos(-1.0))
#define  mem(a,b) memset(a,b,sizeof(a))
#define  Sort(x) sort(x.begin(),x.end())
#define  FOR(i, b, e) for(int i = b; i <= e; i++)
#define  FORR(i, b, e) for(int i = b; i >= e; i--)
#define  FORI(i, s) for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)
#define  pr(x) cout<<x<<"\n"
#define  prs(x) cout<<x<<" "
#define  pr2(x,y) cout<<x<<" "<<y<<"\n"
#define  pr3(x,y,z) cout<<x<<" "<<y<<" "<<z<<"\n"
#define  ppr(a) cout<<a.x<<" "<<a.y<<"\n"

typedef  long long ll;
typedef  pair <int, int> pii;
typedef  pair <double , double> pdd;
typedef  vector <int> vi;
typedef  vector <pii> vpii;

//int dx[]={1,0,-1,0};int dy[]={0,1,0,-1}; //4 Direction
//int dx[]={1,1,0,-1,-1,-1,0,1};
//int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction

#define  EPS 1e-9
#define  MAX 500007

//Suffix Array (nlog^2 n)
pair<pii , int > arr[MAX];
string text;
int Rank[21][MAX],step,lcp[MAX];
void buildSA(int n)
{
    int k;
    FOR(i,0,n-1)Rank[0][i]=text[i];
    for(step=k=1;k<=n;step++,k<<=1)
    {
        FOR(i,0,n-1)
        {
            arr[i].y=i;
            arr[i].x.x=Rank[step-1][i];
            arr[i].x.y=(i+k)<n?Rank[step-1][i+k]:-1;
        }
        sort(arr,arr+n);
        int cnt=0;
        FOR(i,0,n-1)
            Rank[step][arr[i].y]=(i>0)&&arr[i].x==arr[i-1].x?Rank[step][arr[i-1].y]:cnt++;
        if(cnt==n)break;
    }
}
///Build LCP O(n)
void kasai(int n)
{
    int k=0,r;lcp[0]=0;
    FOR(i,0,n-1)
    {
        r=Rank[step][i];
        if(r==n-1) {k=0; continue;}
        int j=arr[r+1].y;
        while(i+k<n && j+k<n && text[i+k]==text[j+k]) k++;
        lcp[r+1]=k?k--:0;
    }
}

int owner(int pos,int m)
{
    return pos<m?1:2;
}
char s[MAX];
int main()
{
    int T,n;

        scanf("%s",s);
        text=s;
        int m=text.size();
        text+=".";
        scanf("%s",s);
        text+=s;
        text+="$";
        n=text.size();
        buildSA(n);
        kasai(n);
       // buildLCP(n);
        int mx=0,pos=n+5;
        FOR(i,3,n-1)
        {
            if(owner(arr[i].y,m)!=owner(arr[i-1].y,m) )
            {
                mx=max(mx,lcp[i]);
            }
        }
        int st,en;
        if(mx)
        {
            st=2;
            FOR(i,3,n)
            {
                if(i==n||lcp[i]<mx)
                {
                    en=i-1;
                    if(st!=en)
                    {
                        FOR(j,st,en)
                        {
                            if(arr[j].y<m)
                            {
                                FOR(l,st,en)
                                if(arr[l].y>m)pos=min(pos,arr[l].y);
                                break;
                            }
                        }
                    }st=i;
                }
            }
        }

        if(mx!=0){string res=text.substr(pos,mx);
                printf("%s\n",res.c_str());}
        printf("%d\n",mx);
    return 0;
}
