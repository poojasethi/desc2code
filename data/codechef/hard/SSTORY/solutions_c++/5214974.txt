#include<bits/stdc++.h>
using namespace std;

const int K = 30;
struct state
{
	int len, link;
	int next[K];
};

const int MAXLEN = 250005;
state st[MAXLEN*2];
int sz, last;

inline void sa_init()
{
	sz = last = 0;
	st[0].len = 0;
	st[0].link = -1;
	memset(st[0].next,-1,sizeof(st[0].next));
	++sz;
}

inline void sa_extend (char c)
{
	int cur = sz++;
	memset(st[cur].next,-1,sizeof(st[cur].next));
	st[cur].len = st[last].len + 1;
	int p;
	for (p=last; p!=-1 && st[p].next[c]==-1; p=st[p].link)
		st[p].next[c] = cur;
	if (p == -1)
		st[cur].link = 0;
	else
    {
		int q = st[p].next[c];
		if (st[p].len + 1 == st[q].len)
			st[cur].link = q;
		else
		{
			int clone = sz++;
			st[clone].len = st[p].len + 1;
			memcpy(st[clone].next,st[q].next,sizeof(st[q].next));
			st[clone].link = st[q].link;
			for (; p!=-1 && st[p].next[c]==q; p=st[p].link)
				st[p].next[c] = clone;
			st[q].link = st[cur].link = clone;
		}
	}
	last = cur;
}

void sa_display()
{
    for(int i=0;i<sz;++i)
	{
	    cout<<i<<" "<<st[i].len<<" "<<st[i].link<<" ";
        for(int j=0;j<K;++j)
            if(st[i].next[j]!=-1)cout<<(char)(j+'a')<<" "<<st[i].next[j]<<" ";
        cout<<endl;
	}
}

string lcs (string s, string t)
{
    // see suffix_automata_tutorial.cpp for explanation
	sa_init();
	for (int i=0; s[i]; ++i)
		sa_extend (s[i]-'a');
	int v = 0,  l = 0,
		best = 0,  bestpos = 0;
	for (int i=0; t[i]; ++i)
    {
        char c = t[i]-'a';
		while (v && st[v].next[c]==-1)
		{
			v = st[v].link;
			l = st[v].len;
		}
		if(st[v].next[c]!=-1)
		{
			v = st[v].next[c];
			++l;
		}
		if (l > best)
			best = l,  bestpos = i;
	}
	return t.substr(bestpos-best+1,best);
}

int main()
{
	ios_base::sync_with_stdio(false);
	string s1,s2;
	cin>>s1>>s2;
	string ans = lcs(s1,s2);
	cout<<ans<<endl<<ans.length()<<endl;
	return 0;
}
