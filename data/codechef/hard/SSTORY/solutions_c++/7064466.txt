#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
 
#define prime 28879//14081//108557
#define base 26
 
using namespace std;
 
long long h1[250002], h2[250002];
 
long long c_pow(long long a, long long power)
{
	if(power==1)
		return a;
	long long temp = c_pow(a, power >> 1);
	if(power%2==0)
		return ((temp*temp)%prime);
	else
		return (((temp*temp)%prime)*a)%prime;
}
 
long long find(char *s1, char *s2, long long n)
{	if(!n)
		return 0;
	long long len1 = strlen(s1);
	long long len2 = strlen(s2);
	vector<long long> hash_table[prime];
	long long expo = c_pow(base, n);
	//cout << n << endl;
	for(long long i = 0;i<=(len1-n);i++)
	{	long long hash = ( h1[i+n-1] - (((i==0?0:h1[i-1]) * expo) % prime) + prime) % prime;
		//cout << i << " : " << hash << endl;
		hash_table[hash].push_back(i);
	}
	for(long long i = 0;i<=(len2-n);i++)
	{	long long hash = ( h2[i+n-1] - (((i==0?0:h2[i-1]) * expo) % prime) + prime) % prime;
		//cout << "Searching for index " << i << " with hash " << hash << endl;
		for(long long j = 0;j<hash_table[hash].size();j++)
		{	char *ptr1 = s2 + (int)i;
			char *ptr2 = s1 + (int)hash_table[hash][j];
			int k = 0;
			while(*ptr1 == *ptr2 && k<n)
			{	ptr1++;
				ptr2++;
				k++;
			}
			if(k==n)
				return i;
		}
	}
	return -1;
}
 
int main()
{	char s1[250002], s2[250002];
	long long ans, temp;
	scanf("%s%s", s1, s2);
	long long len1 = strlen(s1);
	long long len2 = strlen(s2);
	h1[0] = (s1[0] - 'a') % prime;
	for(long long i = 1;i<len1;i++)
	{
		h1[i] = ((h1[i-1]*base) % prime + (s1[i]-'a')) % prime;
	}
	//debug(h1, len1);
	h2[0] = (s2[0] - 'a') % prime;
	for(long long i = 1;i<len2;i++)
	{
		h2[i] = ((h2[i-1]*base) % prime + (s2[i]-'a')) % prime;
	}
	//debug(h2, len2);
	long long lower = 0;
	long long upper = len2;
	while(lower<=upper)
	{
		long long middle = (lower + upper)/2;
		temp = find(s1, s2, middle);
		if(temp>=0)
		{
			ans = temp;
			lower = middle + 1;
		}
		else
			upper = middle - 1;
	}
	if(upper)
	{	for(long long i = 0;i<upper;i++)
			printf("%c", s2[i+ans]);
		printf("\n");
	}
	printf("%lld\n", upper);	
	return 0;
}