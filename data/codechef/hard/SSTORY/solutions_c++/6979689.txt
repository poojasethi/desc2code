#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <stdlib.h>
#include <math.h>
#include <set>
#include <assert.h>
#include <cstring>
#include <string>
#include <string.h>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <time.h>
#include <climits>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;++i)
#define FORR(i,a,b) for(int i=a;i>=b;--i)
#define FORC(it,container) for(typeof(container.begin()) it=container.begin();it!=container.end();++it)
#define INT(x) scanf("%d",&x)
#define LLD(x) scanf("%lld",&x)
#define STR(x) scanf("%s",x)
#define CHAR(x) scanf("%c",&x)
#define PINT(x) printf("%d\n",x)
#define PLLD(x) printf("%lld\n",x)
#define CLR(x) memset(x,0,sizeof(x));
#define F first
#define S second
#define PB push_back

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef map<int,int> MII;
typedef vector<pair<int,int> > VPII;
typedef vector<int> VI;
typedef vector<char> VC;
typedef vector<LL> VLL;
typedef vector<VI> VVI;
typedef vector<VLL> VVL;
typedef set<int> SI;
typedef set<char> SC;

int power(LL b,int e,int MOD)
{
	LL r=1;
	while(e)
	{
		if(e&1) { r = r*b;  if(r>=MOD)  r %= MOD; }
		e >>= 1; b = b*b;  if(b>=MOD) b %= MOD;
		
	}
return r;
}
const int HASH_SIZE = 1<<14;
const int MAXN = 250000;
const int MOD1 = 5000017;
const int MOD2 = 4000003;
const int Base1 = 26;
const int Base2 = 26;
int ansLen1,ansStartPos1;
char s1[MAXN+5] , s2[MAXN+5];
VPII hashTable[HASH_SIZE];

bool foo(char s1[],char s2[],int len1,int len2,int len) {

	if(len==0)
		return false;

	FOR(i,0,HASH_SIZE)
		hashTable[i].clear();
	
	 LL hp1=0,hp2=0;
         
	 int E1 = power(Base1,len-1,MOD1);
	 int E2 = power(Base2,len-1,MOD2);

	 for(int i = 0; i <len; i++) {
	    hp1 = ((LL)hp1 * Base1 + s1[i])%MOD1;
	    hp2 = ((LL)hp2 * Base2 + s1[i])%MOD2;
	
	   while(hp2<0) hp2 += MOD2;
           while(hp1<0) hp1 += MOD1;
	}

	hashTable[hp1 & (HASH_SIZE - 1)].push_back(make_pair(hp1, hp2));
	
	  for(int i=len;i<len1;i++) {

	    hp1 = hp1 - (LL)s1[i - len] * E1 % MOD1;
	    while(hp1<0) hp1 += MOD1;
	    hp1 = (hp1 * Base1 +s1[i] )% MOD1;
	 
	    hp2 = hp2 - (LL)s1[i - len] * E2 % MOD2;
	    while(hp2<0) hp2 += MOD2;
	    hp2 = (hp2 * Base2 +s1[i] )% MOD2;

             while(hp2<0) hp2 += MOD2;
	     while(hp1<0) hp1 += MOD1;

	    hashTable[hp1 & (HASH_SIZE - 1)].push_back(make_pair(hp1, hp2));
	}

	  LL ht1 = 0 , ht2=0;
	  for(int i = 0; i < len; i++) {
	    ht1 = ((LL)ht1 * Base1 + s2[i]) % MOD1;
	    ht2 = ((LL)ht2 * Base2 + s2[i]) % MOD2;
	    while(ht1<0) ht1 += MOD1;
	    while(ht2<0) ht2 += MOD2;
	}

	 

	   int h = ht1 & (HASH_SIZE - 1);
	   for (vector<PII>::iterator it = hashTable[h].begin(); it != hashTable[h].end();it++) {
	       if (it->first == ht1 && it->second == ht2){ 
		   if(len>ansLen1) {
			ansLen1=len; ansStartPos1=0; 
                        //cout<<"1 ansLen1 = "<<ansLen1<<" ansStartPos = "<<ansStartPos1<<endl;
			return true; 
		   }
	        }
	  }


	  for(int i = len; i < len2; i++) {
	
	    ht1 = ht1 - (LL)s2[i - len] * E1 % MOD1;
	    while(ht1<0) ht1 += MOD1;
	    ht1 = ((LL)ht1 * Base1 +s2[i] )% MOD1;
	 
	    ht2 = ht2 - (LL)s2[i - len] * E2 % MOD2;
	    while(ht2<0) ht2 += MOD2;
	    ht2 = ((LL)ht2 * Base2 +s2[i] )% MOD2;

	      while(ht2<0) ht2 += MOD2;
	      while(ht1<0) ht1 += MOD1;
		
	       int h = ht1 & (HASH_SIZE - 1);
		for (vector<PII>::iterator it = hashTable[h].begin(); it != hashTable[h].end();it++) {
		    if (it->first == ht1 && it->second == ht2){ 
			if(len>ansLen1 || (len==ansLen1 && ansStartPos1>i-len+1)) {
				ansLen1=len; ansStartPos1=i-len+1;
				//cout<<"2  ansLen1 = "<<ansLen1<<" ansStartPos = "<<ansStartPos1<<endl;
				return true; 
			}
		    }
	       }
	  }

	return false;
	
}

int main()
{
	cin>>s1;
        cin>>s2;
	
	int len1 = strlen(s1);
	int len2 = strlen(s2);

	int high=len2,low=1,mid;
     
        ansLen1=0,ansStartPos1=-1;

	while(low<high) {

		mid=high+low; mid/=2;

		if(foo(s1,s2,len1,len2,mid))
			low=mid+1;
		else
			high=mid;


	//cout<<" low = "<<low<<" mid  = "<<mid<<" high = "<<high<<endl;
	//cout<<" ansLen1  = "<<ansLen1<<" ansStartPos1 = "<<ansStartPos1<<endl;

		
	}
    
        bool ff = foo(s1,s2,len1,len2,high);

	if(ansStartPos1==-1) {
		printf("0\n"); return 0;
	}	

	int c=0;
	while(c<ansLen1)
		printf("%c",s2[ansStartPos1 + c++]);
	printf("\n");
	printf("%d\n",ansLen1);

return 0;
}
