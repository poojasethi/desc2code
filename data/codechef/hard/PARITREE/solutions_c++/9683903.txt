#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int, int> ii;

const int maxn = 1e5 + 10, mod = 1e9+7;

int test, n, q, id[maxn], p[maxn];
vector<int> ke[maxn];
vector<ii> e;
bool flag;

int get(int v) {
    return p[v] < 0 ? v: p[v] = get(p[v]);
}
void unite(int u, int v) {
    u = get(u), v = get(v);
    if (u==v) return;
    if (p[u] > p[v]) swap(u,v);
    p[u] += p[v]; p[v] = u;
}

void enter() {
    flag = true;
    cin >> n >> q;
    for(int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
    }
    for(int i = 1; i <= n; ++i) {
        ke[i].clear(); p[i] = -1; id[i] = 0;
    }
    e.clear();
    for(int i = 1; i <= q; ++i) {
        int u, v, x;
        cin >> u >> v >> x;
        if (x == 0) unite(u, v);
        else e.push_back(ii(u,v));
    }

    for(int i = 0; i < e.size(); ++i) {
        int u = get(e[i].first), v = get(e[i].second);
        if (u == v) { flag = false; return; }
        ke[u].push_back(v); ke[v].push_back(u);
    }
}

void solve() {
    if (! flag) { printf("0\n"); return; }
    queue<int> q;
    int cnt = 0;
    for(int r = 1; r <= n && flag; ++r) if (p[r] < 0 && id[r] == 0) {
        ++cnt; id[r] = 1;
        q.push(r);
        while (! q.empty() && flag) {
            int u = q.front(); q.pop();
            for(int i = 0; i < ke[u].size(); ++i) {
                int v = ke[u][i];
                if (id[v] == 0) {
                    id[v] = 3 - id[u]; q.push(v);
                }
                else if (id[v] != 3 - id[u]) {
                    flag = false; break;
                }
            }
        }
    }
    if (! flag) { printf("0\n"); return; }
    int res = 1;
    for(int i = 1; i < cnt; ++i) res = (res * 2) % mod;
    printf("%d\n", res);
}

int main() {
    ios_base :: sync_with_stdio(0);
   // freopen("input.txt", "r", stdin);
    cin >> test;
    while (test --> 0) {
        enter();
        solve();
    }
}
