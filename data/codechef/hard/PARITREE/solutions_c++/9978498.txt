#include <bits/stdc++.h>
#define pb push_back 
#define MAXN 2*(100000+2)

using namespace std;


vector<int> g[MAXN];
int visited[MAXN];
int comp ;

const int MOD = (1e9)+7;

void addEdge(int u, int v) {
   
   g[u].pb(v);
   g[v].pb(u);
   
}

long long mdPw (long long a, long long p) {
   long long res = 1LL;
   
   while (p) {
      if (p&1) {
      res = res * a;
      
      if (res >= MOD) {
         res %= MOD;
      } else if (res <0 ) {
         res+=MOD;
      }
   }
   
   
   a = 1LL * a * a;
   p /= 2;
   
   if ( a >= MOD ) {
      a %= MOD; 
   } else if (a < 0) {
      a += MOD;
   }
   }
   return res;
}

void dfs(int from) {
   visited[from] = comp;
   
   for (int i = 0; i < g[from].size(); i++ ) {
      int to = g[from][i];
      
      if (!visited[to]) {
         dfs(to);
      }
   }
}


int main() {
   int t;
   scanf("%d", &t);
   
   while (t--) {
     
      int n, Q;
      scanf("%d %d", &n , &Q);
      
      for (int i = 0; i < n - 1; i++) {
         int u, v;
         scanf("%d %d", &u, &v);
         
         g[2*i].clear();
         g[2*i+1].clear();
         
      }
      
      while (Q--) {
         int u, v, parity;
         scanf("%d %d %d", &u, &v, &parity);
         
         u--;
         v--;
         
         if ( parity == 0 ) {
            
            addEdge(2*u , 2*v);
            addEdge(1+ 2*u, 1+ (2 * v) ) ;
            
         } else if (parity == 1) {
            
            addEdge(2*u, 1+(2*v));
            addEdge(1+(2*u), (2*v));
            
         }
      }
      
      memset( visited, 0, sizeof(visited ) );
       
       
      comp = 1;
    
      
      for (int i = 0 ; i < 2*n; i++) {
         if (!visited[i]){
            dfs(i);
            comp++;
         }
      }
      
      bool flag = true;
      for (int i = 0; i < n; i++) {
         if (visited[2*i] == visited[2*i+1]) {
            flag = false;
            break;
         }
      }
      
      if (flag) {
         long long ans = mdPw(2, (comp/2-1));
         printf("%lld\n", ans);
      } else {
         printf("0\n");
      }
   }
	return 0;
}
