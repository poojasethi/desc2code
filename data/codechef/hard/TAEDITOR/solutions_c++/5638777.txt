#include<bits/stdc++.h>
using namespace std;
#define lim 510000
#define random rand()
struct treap{
    typedef struct _node{
        int y, sz;
        char x;
        _node *l, *r;

        _node() {l = r = NULL;}
        _node(char val): x(val), y(random), sz(1) {l = r = NULL;}
    } * node;

    node root;

    treap() {root = NULL;}

    int size(node t){
        return !t ? 0 : t->sz;
    }

    void rec(node t){
        if(!t) return;
        t->sz = size(t->l) + size(t->r) + 1;
    }

    void split(node t, int x, node &l, node &r){
        if(!t) return void(l = r = NULL);
        if(x < t->x) split(t->l,x,l,t->l), r = t; else
        split(t->r,x,t->r,r), l = t;
        rec(t); rec(l); rec(r);
    }
    // implicit
    void split(node t, node &l, node &r, int cur, int add){
    if(!t) return void(l = r = NULL);
    int x = add + size(t->l);
    if(cur > x) split(t->r, t->r, r, cur, x + 1),l = t;
    else  split(t->l, l, t->l, cur, add),r = t;
    rec(t);
    }
  
  
    void merge(node &t, node l, node r){
        if(!l || !r) t = l ? l : r; else{
         if(l->y > r->y) merge(l->r,l->r,r),t=l; 
         else
         merge(r->l,l,r->l), t = r;
        }
        rec(t);
    }

    void ins(node& t, node nt){
        if(!t) t = nt; else
        if(nt->y > t->y) split(t,nt->x,nt->l,nt->r), t = nt; else
        ins(nt->x < t->x ? t->l : t->r, nt);
        rec(t);
    }

    void ins(int x){
        ins(root,new _node(x));
    }
    void insimpl(char c,int pos)
    {   
    	node temp=new _node(c);
    	node left,right;
    	split(root,left,right,pos,0);
    	merge(right,temp,right);
    	merge(root,left,right);
    }
    int get(node t, int x){
        if(!t) return 0;
        if(size(t->l) >= x) return get(t->l,x);
        if(size(t->l)+1 == x) return t->x;
        return get(t->r,x-size(t->l)-1);
    }

    int kth(int x){
        return get(root,x);
    }
    
    void print(node t){
        if(!t) return;
        print(t->l);
        cout << t->x;
        print(t->r);
    }
    void printRange (int l, int r) {
	if(l>r) return;
	node t1, t2, t3;
	split (root,t1,t2,r,0);
	split (t1,t1, t3,l-1,0);
	print(t3);
	printf("\n");
	merge (root, t1, t3);
	merge (root, root, t2);
    }
    void show(){
        print(root);
        cout << endl;
    }
} t;
char str[lim];
 
int main()
{
    int i,q;
    cin>>q;
    int in=0;
    for(i=1;i<=q;i++)
    {
        char d;
        scanf(" %c",&d);
        if(d=='+')
        {
            int after;
            scanf("%d",&after);
            scanf("%s",str);
            for(int j=0;str[j]!='\0';j++)
            {
                t.insimpl(str[j],after+j);
            }
        }
 
        else
        {
            int start,len;
            scanf("%d %d",&start,&len);
            t.printRange(start,start+len-1);
        }
    }
 
    return 0;
}