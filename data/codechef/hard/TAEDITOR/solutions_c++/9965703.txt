#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 300005
#define NN 105
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 1000000007
#define ln 1000000001
#define cs 1331
#define Line pair < pair <ll, ll>, ll >
#define Pi pair < int, Pa >
#define Pa pair < int, int >

using namespace std;

struct BIT
{
    int Tree[N];
    void Up(int x)
    {
        while(x < N)
        {
            Tree[x]++;
            x += x & (-x);
        }
    }
    int GET(int x)
    {
        int r = 0;
        while(x)
        {
            r += Tree[x];
            x -= x & (-x);
        }
        return r;
    }
};

BIT T;
int n, pos[N], q, Len[N];
vector < int > res[N];
string P[N];
char Ans[N], type[N];

int GET_POS(int i)
{
    int l = 0;
    int r = n+1;
    while(r - l > 1)
    {
        int x = (l + r) / 2;
        if(x - T.GET(x) >= i)   r = x;
        else l = x;
    }
    return r;
}

int main()
{
    ios_base::sync_with_stdio(0);
    //filein("inp.txt"); fileout("M.out");
    cin >> q;
    for(int i=1; i<=q; i++)
    {
        cin >> type[i];
        if(type[i] == '+')
            cin >> pos[i] >> P[i];
        else
            cin >> pos[i] >> Len[i];
        n += P[i].size();
    }
    for(int i=q; i>=1; i--)
    {
        if(type[i] == '?')
            for(int j=pos[i]; j<pos[i]+Len[i]; j++)
                res[i].push_back(GET_POS(j));
        else
        {
            for(int j=(int)P[i].size()-1; j>=0; j--)
            {
                int id = GET_POS(j+pos[i]+1);
                Ans[id] = P[i][j];
                T.Up(id);
            }
        }
    }
    for(int i=1; i<=q; i++)
    {
        if(type[i] != '?')  continue;
        for(int j=0; j<res[i].size(); j++)
            cout << Ans[res[i][j]];
        cout << endl;
    }
}
