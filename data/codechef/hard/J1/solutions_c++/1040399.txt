/* 
 * File:   SudokuX
 *
 * Problem code :    J1
 *
 * Result :    Correct Answer
 *
 * Created on May 10, 2012
 */

#include <iostream>
#include <stdio.h>
#include <string>
#include <memory.h>

using namespace std;

bool c[9][9];
bool r[9][9];
bool s[9][9];
bool l[9][2];

int T[9][9];

inline void setNumber(int n, int i, int j, int v, bool b) {
    s[n][v] = r[n][i] = c[n][j] = b;
    if (j == i) l[n][0] = b;
    if (i + j == 8) l[n][1] = b;
}

inline void setNumber2(int n, int i, int j, int v, bool b) {
    s[n][v] = r[n][i] = c[n][j] = b;
}

bool fillRest(int i, int j) {
    if (i == 9)
        return true;
    if (j == 9)
        return fillRest(i + 1, 0);
    if (T[i][j])
        return fillRest(i, j + 1);
    int v = i / 3 + 3 * (j / 3);
    bool Finish = false;
    for (int n = 1; n <= 9 && !Finish; n++) {
        if (!s[n - 1][v] && !r[n - 1][i] && !c[n - 1][j]) {
            T[i][j] = n;
            setNumber2(n - 1, i, j, v, true);
            Finish = fillRest(i, j + 1);
            if (!Finish) {
                T[i][j] = 0;
                setNumber2(n - 1, i, j, v, false);
            } else return true;
        }
    }
    return Finish;
}

bool fillSecondDiagonal(int j) {
    if (j == 9)
        return fillRest(0, 0);
    int i = 8 - j;
    if (T[i][j])
        return fillSecondDiagonal(j + 1);
    int v = (i / 3) + 3 * (j / 3);
    bool Finish = false;
    for (int n = 1; n <= 9 && !Finish; n++) {
        if (!l[n - 1][1] && !r[n - 1][i] && !c[n - 1][j] && !s[n - 1][v]
                && (j == 4 ? !l[n - 1][0] : true)) {
            T[i][j] = n;
            setNumber(n - 1, i, j, v, true);
            Finish = fillSecondDiagonal(j + 1);
            if (!Finish) {
                T[i][j] = 0;
                setNumber(n - 1, i, j, v, false);
            } else return true;
        }
    }
    return Finish;
}

bool fillFirstDiagonal(int j) {
    if (j == 9)
        return fillSecondDiagonal(0);
    if (T[j][j])
        return fillFirstDiagonal(j + 1);
    int v = (j / 3) << 2;
    bool Finish = false;
    for (int n = 1; n <= 9 && !Finish; n++) {
        if (!l[n - 1][0] && !r[n - 1][j] && !c[n - 1][j] && !s[n - 1][v]
                && (j == 4 ? !l[n - 1][1] : true)) {
            T[j][j] = n;
            setNumber(n - 1, j, j, v, true);
            Finish = fillFirstDiagonal(j + 1);
            if (!Finish) {
                T[j][j] = 0;
                setNumber(n - 1, j, j, v, false);
            } else return true;
        }
    }
    return Finish;
}

int main() {
    int tc, n, v;
    scanf("%d", &tc);
    
    while (tc--) {
        memset(T, 0, sizeof (T));
        memset(r, 0, sizeof (r));
        memset(c, 0, sizeof (c));
        memset(s, 0, sizeof (s));
        memset(l, 0, sizeof (l));

        char s[11];
        for (int i = 0; i < 9; i++) {
            scanf("%s", s);
            for (int j = 0; j < 9; j++) {
                if (s[j] != '.') {
                    n = s[j] - '0';
                    v = i / 3 + 3 * (j / 3);
                    T[i][j] = n;
                    setNumber(n - 1, i, j, v, true);
                }
            }
        }
        fillFirstDiagonal(0);

        for (int i = 0; i < 9; i++, printf("\n"))
            for (int j = 0; j < 9; j++)
                printf("%c", (T[i][j] + '0'));

        printf("\n");
    }

    return 0;
}
