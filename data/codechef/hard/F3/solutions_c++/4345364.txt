/*
codedevloper
*/
#include<iostream>
#include<vector>
#include<map>
#include<queue>
#include<sstream>
#include<set>
#include<fstream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>
#define oo (int)13e7
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define fill(a,v) memset(a, v, sizeof a)
#define For(i,s,e) for(int i=s; i < e; i++)
#define ull unsigned long long
#define ll long long
#define bitcount __builtin_popcount
#define all(x) x.begin(), x.end()
#define pb( z ) push_back( z )
using namespace std;


int p;
char ax[12][12];
bool vis[12][12];

int getMask( int x, int y )
{
	int ret = 0;
	if( x-1 < 0 ) ret |= 1;
	if( y-1 < 0 ) ret |= 2;
	if( x+1 >= 8 ) ret |= 4; 
	if( y+1 >= 8 ) ret |= 8; 
	return ret;
}

void flood( int x, int y, int& mask )
{
	mask |= getMask( x, y );
	vis[x][y] = 1;
	for(int dx=-1; dx < 2; dx++)
	for(int dy=-1; dy < 2; dy++)
	if( abs(dx)+abs(dy) == 1 )
	{
		int nx = dx + x, ny = dy + y;
		if( nx < 0 || ny < 0 || nx >= 8 || ny >= 8 || !ax[nx][ny] || vis[nx][ny] )
			continue;
		flood( nx, ny, mask );
	}
}
const int mod = 21945;
void addMod( int &to, int what )
{
	to = ( to + what ) % mod;
}

void copy( int src[16][16], int dest[16][16] )
{
	for(int i=0; i < 16; ++i)
	for(int j=0; j < 16; ++j)
		dest[i][j] = src[i][j];
}
int magic[16][16];
int res[16][16], a[16][16], tmp[16][16];

void mult( int a[16][16], int b[16][16], int c[16][16] )
{
	for(int i=0; i <16; ++i)
	for(int j=0; j < 16; j++)
	{
		tmp[i][j] = 0;
		for(int k=0; k < 16; k++)
			tmp[i][j] = ( a[i][k] * b[k][j] + tmp[i][j] ) % mod;
	}
	for(int i=0; i <16; ++i)
	for(int j=0; j < 16; j++)
		c[i][j] = tmp[i][j];
}
int main()
{
	fill( magic, 0 );
	
	magic[0][0] = 4;
	
	magic[2][1] = 2;
	magic[4][1] = 2;
	
	magic[2][2] = 2;
	magic[8][2] = 2;
	
	magic[3][3] = 1;
	magic[6][3] = 1;
	magic[12][3] = 1;
	magic[9][3] = 1;
	
	magic[0][4] = 2; 
	
	magic[5][5] = 2;
	
	magic[2][6] = 1;
	magic[8][6] = 1;
	
	magic[7][7] = 1;
	magic[13][7] = 1;
	
	magic[0][8] = 2;
	
	magic[1][9] = 1;
	magic[4][9] = 1;
	
	magic[10][10] = 2;
	
	magic[11][11] = 1;
	magic[14][11] = 1;
	
	magic[0][12] = 1;
	
	magic[5][13] = 1;
	
	magic[10][14] = 1;
	
	magic[15][15] = 1;
	
	
	
	int runs;
	s( runs );
	
	while( runs-- )
	{
		s( p );
		fill( vis, 0 );
		for(int i=0; i < 8; i++)
		{
			scanf("%s", ax[i] );
			for(int j=0; j < 8; j++)
			{
				assert( ax[i][j] == '0' || ax[i][j] == '1' ); 
				ax[i][j] -= '0';
			}
		}
		
		int ans = 0;
		assert( p >= 3 );
		p -= 3;
		fill( a, 0 );
		copy( magic, a );
		fill( res, 0 ); fill( tmp, 0 );
		for(int i=0; i < 16; ++i)
			res[i][i] = 1;
		while( p > 0 )
		{
			if( p % 2 )
				mult( res, a, res );
			mult( a, a, a );
			p /= 2;
		}
		
		for(int i=0; i < 8; ++i)
		for(int j=0; j < 8; ++j)
		if( !vis[i][j] && ax[i][j])
		{
			int mask = 0;
			flood( i, j, mask );
			
			int sum = 0;
			for(int k=0; k < 16; k++)
			{
				assert( res[k][mask] >= 0 );
				addMod( sum , res[ k ][ mask ] );
			}
			addMod( ans, sum );
		}
		printf("%d\n", ans );
		
	}
}
/*
codedevloper
*/