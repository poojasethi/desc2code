#include<stdio.h>
#include<math.h>
#include<iostream>
#include<stdlib.h>
#include<vector>
#include<stack>
#include<map>
#include<set>
#include<cstring>
#include<algorithm>
#define LL long long
#define N 1000000007
#define M 100001
#define INF (int)1e9
#define LINF (long long)1e18
#define pb push_back
#define pln() printf("\n")
#define s(t) scanf("%d",&t)
#define sl(t) scanf("%lld",&t)
#define ss(t) scanf("%s",t)
#define p(t) printf("%d",t)
#define pl(t) printf("%lld",t)
#define ps(t) printf("%s",t)

/*Start where you are. Use what you have. Do what you can..*/
using namespace std;

typedef vector<int> VI;
typedef pair<int,int> PII;

VI factors[M];
bool flag[M];
VI pAt[M];
vector<PII >st[100001];
int arr[M];
void factorize()
{
for(int i=2;i<M;++i)
{
if(!flag[i])
{
for(int j=i;j<M;j+=i)
{
flag[j]=1;
factors[j].pb(i);        
}            
}        
}     
}


void build(int low,int high,int prm,int j)
{
if(low==high)
{
st[prm][j]=PII(arr[pAt[prm][low]],1);             
return;             
}     
int mid=(low+high)/2;
build(low,mid,prm,2*j+1);
build(mid+1,high,prm,2*j+2);


if(st[prm][2*j+1].first>st[prm][2*j+2].first)
st[prm][j]=st[prm][2*j+1];
     
else if(st[prm][2*j+1].first<st[prm][2*j+2].first)
st[prm][j]=st[prm][2*j+2];

else
st[prm][j]=PII(st[prm][2*j+1].first,st[prm][2*j+1].second+st[prm][2*j+2].second);

}


int findciel(int low,int high,int j,int key)
{
if(low>high)return -1; 
int mid=(low+high)/2;
if(pAt[j][mid]<key)
return findciel(mid+1,high,j,key);
if((pAt[j][mid]==key)||(mid==low)||(pAt[j][mid-1]<key))
return mid;
return findciel(low,mid-1,j,key); 
}


int findfloor(int low,int high,int j,int key)
{
if(low>high)return -1;
int mid=(low+high)/2;
if(pAt[j][mid]>key)
return findfloor(low,mid-1,j,key);
if((pAt[j][mid]==key)||(mid==high)||(pAt[j][mid+1]>key))
return mid;
return findfloor(mid+1,high,j,key); 
    
}

PII query(int low,int high,int j,int x,int y,int stn)
{
    
if((low==x)&&(high==y))
return st[stn][j];
int mid=(low+high)/2;
if(y<=mid)
return query(low,mid,2*j+1,x,y,stn);
if(x>mid)
return query(mid+1,high,2*j+2,x,y,stn);
PII a=query(low,mid,2*j+1,x,mid,stn);
PII b=query(mid+1,high,2*j+2,mid+1,y,stn);
if(a.first>b.first)
return a;
else if(a.first<b.first)
return b;
return PII(a.first,a.second+b.second);    
    
}



int main()
{   
#ifndef ONLINE_JUDGE
freopen("inp.txt","r",stdin);
freopen("re.txt","w",stdout);
#endif
int m,n,g,x,y,low,high;
PII ans(-1,-1),tmp;
factorize();
s(n);s(m);
for(int i=0;i<n;++i)
{
s(arr[i]);
for(int j=0;j<factors[arr[i]].size();++j)
pAt[factors[arr[i]][j]].pb(i);        
}      

for(int i=2;i<M;++i)
{//p(i);pln();
if(pAt[i].size()==0)
continue;
//ps("ll");
st[i]=vector<PII>(pAt[i].size()*4,PII(0,0));
build(0,pAt[i].size()-1,i,0);   
  
}          
//ps("jkjdsk");

while(m--)
{
ans.first=ans.second=-1;          
s(g);s(x);s(y);          
x--;y--;
for(int j=0;j<factors[g].size();++j)
{
//p(factors[g][j]);ps("  "); p(pAt[factors[g][j]].size());pln();       cin.get();
if(pAt[factors[g][j]].size()==0)
continue;
low=findciel(0,pAt[factors[g][j]].size()-1,factors[g][j],x);
//p(low);
high=findfloor(0,pAt[factors[g][j]].size()-1,factors[g][j],y);
//p(low);ps(" ");p(high);ps(" ");p(st[factors[g][j]].size());pln();
if((low<=high)&&(low!=-1)) 
{tmp=query(0,pAt[factors[g][j]].size()-1,0,low,high,factors[g][j]);
if(ans.first<tmp.first)
ans=tmp;
}      
        
}
          
printf("%d %d\n",ans.first,ans.second);         
         
          
          
} 



//cin.get();
return 0;    
}
