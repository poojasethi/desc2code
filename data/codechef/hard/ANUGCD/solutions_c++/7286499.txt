#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>
#include <stack>
#include <utility>
#include <sstream>
#include <map>
#include <set>
using namespace std;

typedef long long LL;
typedef vector<int> VI;
typedef vector<VI > VVI;
typedef pair<int,int> PI;

const int inf=2000000000;
const LL INF=LL(inf)*inf;
const LL mod=1000000007LL;
double eps=1e-8;

#define pb push_back
#define sc(x) scanf("%d",&(x))
#define scl(x) scanf("%lld",&(x))
#define N 100005


struct data
{
	int prime;
	int maxn;
	int freq;
};
struct  querydata
{
	int maxn;
	int freq;
};
vector<data> tree[3*N];
vector<int> factors[N];
int A[N];
void build(int l,int r,int v)
{
	int i,j;
	data d;
	if(l==r)
	{
		int x=A[l];
		d.maxn=x;d.freq=1;
		for(i=0;i<factors[x].size();i++)
		{
			d.prime=factors[x][i];
			tree[v].pb(d);
		}
	}
	else
	{
		int mid=(l+r)/2;
		build(l,mid,2*v);
		build(mid+1,r,2*v+1);
		int x1=2*v;
		int x2=x1+1;
		i=j=0;
		int p1,p2;
		int sz1=tree[x1].size(),sz2=tree[x2].size();
		while(i<sz1 && j<sz2)
		{
			p1=tree[x1][i].prime;
			p2=tree[x2][j].prime;
			if(p1<p2)
			{
				d.prime=p1;
				d.maxn=tree[x1][i].maxn;
				d.freq=tree[x1][i].freq;
				tree[v].pb(d);
				i++;
			}
			else if(p1>p2)
			{
				d.prime=p2;
				d.maxn=tree[x2][j].maxn;
				d.freq=tree[x2][j].freq;
				tree[v].pb(d);
				j++;
			}
			else
			{
				d.prime=p1;
				d.maxn=max(tree[x1][i].maxn,tree[x2][j].maxn);
				if(tree[x1][i].maxn==tree[x2][j].maxn)
					d.freq=tree[x1][i].freq+tree[x2][j].freq;
				else if(d.maxn==tree[x1][i].maxn)
					d.freq=tree[x1][i].freq;
				else
					d.freq=tree[x2][j].freq;
				tree[v].pb(d);
				i++;j++;
			}
		}
		while(i<sz1)
		{
			d.prime=tree[x1][i].prime;
			d.maxn=tree[x1][i].maxn;
			d.freq=tree[x1][i].freq;
			tree[v].pb(d);
			i++;
		}
		while(j<sz2)
		{
			d.prime=tree[x2][j].prime;
			d.maxn=tree[x2][j].maxn;
			d.freq=tree[x2][j].freq;
			tree[v].pb(d);
			j++;
		}
	}
}
int fact;
querydata query(int x,int y,int treei,int treej,int v)
{
	querydata d;
	if(x==treei && y==treej)
	{
		int i,j,mid,p;
		i=0;j=tree[v].size()-1;
		while(i<=j)
		{
			mid=(i+j)/2;
			p=tree[v][mid].prime;
			if(fact==p)
				break;
			else if(fact>p)
				i=mid+1;
			else
				j=mid-1;
		}
		if(fact==p)
		{
			d.maxn=tree[v][mid].maxn;
			d.freq=tree[v][mid].freq;
		}
		else
		{
			d.maxn=-1;
			d.freq=-1;
		}
		return d;
	}
	int mid=(treei+treej)/2;
	if(x>mid)
		return query(x,y,mid+1,treej,2*v+1);
	if(y<=mid)
		return query(x,y,treei,mid,2*v);
	querydata d1=query(x,mid,treei,mid,2*v);
	querydata d2=query(mid+1,y,mid+1,treej,2*v+1);
	d.maxn=max(d1.maxn,d2.maxn);
	if(d1.maxn==d2.maxn)
	{
		if(d.maxn!=-1)
			d.freq=d1.freq+d2.freq;
		else
			d.freq=-1;
	}
	else if(d.maxn==d1.maxn)
		d.freq=d1.freq;
	else
		d.freq=d2.freq;
	return d;
}
int main()
{
	int t,i,j,n,x,m,sz;
	n=100000;
	int p[100001]={0};
	int primes[10000];
	int root=sqrt(n);
	for(i=2;i<=root;i++)
	{
		if(!p[i])
		{
			for(j=i+i;j<=n;j+=i)
			{
				p[j]=1;
			}
		}
	}
	for(i=2;i<=n;i++)
	{
		if(!p[i])
		{
			factors[i].pb(i);
			for(j=i+i;j<=n;j+=i)
			{
				factors[j].pb(i);
			}
		}
	}
	int index=0;
	for(i=2;i<n;i++)
	{
		if(!p[i])
			primes[index++]=i;
	}
	//printf("%d\n", primes[index-1]);
	sc(n);sc(m);
	for(i=1;i<=n;i++)
		sc(A[i]);
	build(1,n,1);
	/*for(i=1;i<20;i++)
	{
		printf("i=%d\n",i);
		for(j=0;j<tree[i].size();j++)
            printf("%d %d %d\n", tree[i][j].prime,tree[i][j].maxn,tree[i][j].freq);
	}*/
    int maxn,freq;
    int g,y;
    querydata d;
    while(m--)
    {
    	sc(g);sc(x);sc(y);
    	maxn=-1;
    	freq=-1;
    	sz=factors[g].size();
    	//printf("sz=%d\n",sz);
    	for(i=0;i<sz;i++)
    	{
    		fact=factors[g][i];
    		d=query(x,y,1,n,1);
    		if(d.maxn>maxn)
    		{
    			maxn=d.maxn;
    			freq=d.freq;
    		}
    	}
    	printf("%d %d\n",maxn,freq);
    }
}