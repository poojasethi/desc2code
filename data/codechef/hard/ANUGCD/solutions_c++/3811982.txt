	#include <bits/stdc++.h>
	#define NMAX 1000010
	#define NLIM 1000000
	#define pb push_back
	#define sz size()
	#define L(x) (x<<1)
	#define R(x) ((x<<1)+1)
	#define ALL(x) ( x.begin(),x.end() )
	using namespace std;
	struct node{
		int val,freq;
		node(){
			val=freq=-1;
		}
		node(int x,int y){
			val=x,freq=y;
		}
	};
	vector<node> trees[NMAX];
	vector<int> primes,primeFactors[NMAX],primesList[NMAX];
	int flag[NMAX],N,Q,input[NMAX];

	void factorise(){
		memset(flag,0,sizeof(flag));
		for(int i=2;i<=NLIM;++i){
			if(flag[i]==0){
				primes.pb(i);
				primeFactors[i].pb(i);
				for(int j=i<<1;j<=NLIM;j+=i) {
					flag[j]=1;
					primeFactors[j].pb(i);
				}
			}
		}
	}

	node merge(node y,node z){
		node x;
		if(y.val>z.val) x=node(y.val,y.freq);
		else if(z.val>y.val) x=node(z.val,z.freq);
		else x=node(y.val,y.freq+z.freq);
		if(x.val==-1) x.freq=-1;
		return x;
	}

	void build(int t,int index,int i,int j){
		if(i==j) {
			trees[t][index]=node(input[primesList[t][i-1]-1],1);
			return;
		}
		int mid=(i+j)>>1;
		build(t,L(index),i,mid);
		build(t,R(index),mid+1,j);
		trees[t][index]=merge(trees[t][L(index)],trees[t][R(index)]);
	}

	node query(int t,int index,int i,int j,int left,int right){
		if(i==left && j==right) return trees[t][index];
		if(left>right || i>right || j<left) return node(-1,-1);

		int mid=(i+j)>>1;
		if(right<=mid) return query(t,L(index),i,mid,left,right);
		else if(left>mid) return query(t,R(index),mid+1,j,left,right);
		else return merge(query(t,L(index),i,mid,left,mid),query(t,R(index),mid+1,j,mid+1,right));
	}

	void printTree(int t,int index,int i,int j){
		if(i==j){
			printf("%d,%d - %d %d\n",i,j,trees[t][index].val,trees[t][index].freq);
			return;
		}
		int mid=(i+j)>>1;
		printTree(t,L(index),i,mid);
		printTree(t,R(index),mid+1,j);
		printf("%d,%d - %d %d\n",i,j,trees[t][index].val,trees[t][index].freq);
	}

void solve1();

	int main(){
		solve1();
		return 0;
	}


void solve1(){

	factorise();

	scanf("%d %d",&N,&Q);
	for(int i=0;i<N;++i){
		scanf("%d",&input[i]);
		for(int j=0;j<primeFactors[input[i]].sz;++j) primesList[primeFactors[input[i]][j]].pb(i+1);
	}
	for(int i=0;i<primes.sz;++i)
		if(primesList[primes[i]].sz>0){
			trees[primes[i]]=vector<node>(primesList[primes[i]].sz<<3);
			build(primes[i],1,1,primesList[primes[i]].sz);
			//printf("%d\n",primes[i]);
			//printTree(primes[i],1,1,primesList[primes[i]].sz);

		}


	for(int i=0;i<Q;++i){
		int g,x,y;
		scanf("%d %d %d",&g,&x,&y);
		node res;

		for(int j=0;j<primeFactors[g].sz;++j){
			int l,r;
			if(primesList[primeFactors[g][j]].sz==0) continue;

			l=lower_bound(primesList[primeFactors[g][j]].begin(),primesList[primeFactors[g][j]].end(),x)-primesList[primeFactors[g][j]].begin();
			r=upper_bound(primesList[primeFactors[g][j]].begin(),primesList[primeFactors[g][j]].end(),y)-primesList[primeFactors[g][j]].begin();
			//printf("-->%d,%d - %d %d\n",x,y,l,r);
			if(l>r-1) continue;
			++l,++r;
			node temp=query(primeFactors[g][j],1,1,primesList[primeFactors[g][j]].sz,l,r-1);
			if(temp.val>res.val) res=temp;
		}
		printf("%d %d\n",res.val,res.freq);
	}

}
