// -*- C++ -*-
// File: a.cpp
// Copyright (C) 2013
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */

typedef vector<pii> VP;

const int maxn = 100001;
const int n_lg_n = 2400005;

int a[maxn];

bool mark[maxn];
VI primes[maxn];
VI prime_pos[maxn];
int first[maxn], last[maxn];
VI positions;
pii st[n_lg_n];


pii build(int at, int l, int r) {
    
    if(l==r) {
        st[at] = mp(a[positions[l]], 1);
        return st[at];
    }
    
    int m = (l+r)/2;
    
    pii a = build(2*at, l, m);
    pii b = build(2*at+1, m+1, r);
    
    if(a.X > b.X)
        st[at] = a;
    else if(b.X > a.X)
        st[at] = b;
    else
        st[at] = mp(a.X, a.Y+b.Y);
    
    return  st[at];
}

pii query(int at, int l, int r, int tl, int tr) {
    
    if(tr < tl) return mp(-1,-1);
    if(l == tl && tr == r) return st[at];
    
    int m = (l+r)/2;
    pii a = query(2*at, l, m, tl, min(tr,m));
    pii b = query(2*at+1, m+1, r, max(m+1,tl), tr);
    
    if(a.X == -1) return b;
    if(b.X == -1) return a;
    
    if(a.X > b.X) return a;
    if(b.X > a.X) return b;
    
    return mp(a.X, a.Y + b.Y);
}

int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);
    
    // precalculate simple numbers
    CL(mark,0);
    for(int i = 2; i <= 100000; i++) if(!mark[i]) {
        for(int j = i; j <= 100000; j += i) {
            mark[j] = true;
            primes[j].pb(i);
        }
    }
    
    int N, M;
    cin >> N >> M;
    rep(i,N) cin >> a[i];
    
    rep(i,N) {
        for(int j = (int)primes[a[i]].size()-1; j>=0; --j) {
            prime_pos[ primes[a[i]][j] ].pb(i);
        }
    }
    
    for(int i = 2; i <= 100000; ++i) {
        
        first[i] = (int)positions.size();
        
        positions.insert(positions.end(), prime_pos[i].begin(), prime_pos[i].end());
        
        last[i] = (int)positions.size()-1;
    }
    
    build(1, 0, (int)positions.size()-1);
    
    rep(i,M) {
        int g,x,y;
        cin >> g >> x >> y;
        --x, --y;
        
        pii ans(-1,-1);
        
        rep(j, (int)primes[g].size()) {
            
            int p = primes[g][j];
            
            if(first[p] > last[p]) continue;
            
            int l = int(lower_bound(prime_pos[p].begin(), prime_pos[p].end(), x) - prime_pos[p].begin());
            int r = int(upper_bound(prime_pos[p].begin(), prime_pos[p].end(), y) - prime_pos[p].begin() - 1);
            
            if(l > r) continue;
            
            l += first[p], r += first[p];
            
            pii cur = query(1, 0, (int)positions.size()-1, l, r);
            
            ans = max(ans, cur);
        }
        
        cout << ans.X << " " << ans.Y << endl;
    }
    

#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
