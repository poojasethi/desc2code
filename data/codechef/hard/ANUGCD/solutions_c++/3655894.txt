#include<stdio.h>
#include<iostream>
#include<vector>
#include<cmath>
#include<algorithm>
typedef long long int lld;
using namespace std;
struct node
{
    node() : number( -1 ), count( -1 ) {}
   int number;
   int count;
};
vector<lld>prr;
vector<lld>num[100100];
vector<lld>pos[100100];
vector<node>tree[100100];
lld b[100100]={0};
lld a[100100];
int prime()
{
    lld i,j;
    for(i=4;i<100100;i=i+2)
    b[i]=1;
    prr.push_back(2);
    for(i=3;i<100100;i+=2)
    {
        if(b[i]==0)
        {
            prr.push_back(i);
            for(j=i*i;j<100100;j+=2*i)
            b[j]=1;
        }
    }
}
node check(node l,node r)
{
    if(l.number==r.number && l.number!=-1)
    l.count+=r.count;
    return l.number>=r.number? l:r;
}
node getmax(lld i,lld ss,lld se,lld l,lld r,lld index)
{
    l = max( l, ss );
   r = min( r, se );
   if( r < ss || l > se )
      return node();
    //if(l<ss && se<r)
    //return node();
    if( l == ss && r == se )
    return tree[ i ][ index ];
    int mid = ( ss + se ) / 2;
    node Lc = getmax( i,ss, mid, l, r,2*index);
    node rc = getmax( i,mid + 1,se, l, r,2*index+1 );
    return check( Lc,rc );
}
node constructutil(lld i,lld ss,lld se,lld index)
{
    if(ss==se)
    {
        tree[i][index].number=num[i][se];
        tree[i][index].count=1;
        return tree[i][index];
    }
    lld mid;
    mid=(ss+se)/2;
    node l=constructutil(i,ss,mid,2*index);
    node r=constructutil(i,mid+1,se,2*index +1);
    return tree[i][index]=check(l,r);
}
int main()
{
    prime();
    lld i,g,j;
    lld n,m;
    cin>>n>>m;
    for(i=0;i<n;i++)
    {
        cin>>a[i];
        g=a[i];
        j=0;
        while(g>1)
        {
            while(g%prr[j]!=0 && prr[ j ] * prr[ j ] <= g)
            j++;
             if( g % prr[ j ] != 0 )
            {
                j = lower_bound( prr.begin(), prr.end(), g ) - prr.begin();
            }
            while(g%prr[j]==0)
            g/=prr[j];
            num[j].push_back(a[i]);
            pos[j].push_back(i+1);
            j++;
        }
    }
    for(i=0;i<prr.size();i++)
    {
        if(num[i].size()==0)
        continue;
        else
        {
            tree[i].resize(num[i].size()*4);
            constructutil(i,0,num[i].size()-1,1);
        }
    }
  /*  for(i=0;i<prr.size();i++)
    {
        if(num[i].size()==0)
        continue;
        else
        {
            cout<<prr[i]<<"-- ";
            for(j=1;j<tree[i].size();j++)
            {
                cout<<tree[i][j].number<<" ";
            }
            cout<<endl;
        }
    }*/
    for(i=0;i<m;i++)
    {
        lld x,y;
        node res;
        cin>>g>>x>>y;
        j=0;
        while(g>1)
        {
            while(g%prr[j]!=0 && prr[ j ] * prr[ j ] <= g)
            j++;
            if( g % prr[ j ] != 0 )
            {
                j = lower_bound( prr.begin(), prr.end(), g ) - prr.begin();
            }
            while(g%prr[j]==0)
            g/=prr[j];
            lld l=lower_bound(pos[j].begin(),pos[j].end(),x)-pos[j].begin();
            lld r=upper_bound(pos[j].begin(),pos[j].end(),y)-pos[j].begin()-1;
            if(num[j].size()>0 && l<=r)
            {
                node tmp=getmax(j,0,num[j].size()-1,l,r,1);
                if(res.number<tmp.number)
                   res=tmp;
            }
            j++;
        }
        cout<<res.number<<" "<<res.count<<endl;
    }
    return 0;
}
