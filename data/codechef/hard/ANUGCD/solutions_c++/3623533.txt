#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
#include<cmath>
#include<climits>

using namespace::std;

typedef vector<int> VI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;
const int maxN = 100000;

int getMid(int s, int e) {  return (e + s)/2;  }

inline int initMaxTree(VPII &a, int ss, int se, VI &tree, int si)
{
    if (ss == se) {
        tree[si] = a[ss].second; return tree[si];
    }
    int mid = getMid(ss, se);
    tree[si] =  max(initMaxTree(a, ss, mid, tree, si*2+1),
                    initMaxTree(a, mid+1, se, tree, si*2+2));
    return tree[si];
}

void buildMaxTree(VPII &a, VI &tree) {
    int n = a.size();
    //printf("\na.size() while building: %d\n",n);
    int x = (int)(ceil(log2(n)));
    int max_size = 2*(int)pow(2, x) - 1;
    tree.resize(max_size);
    initMaxTree(a, 0, n-1, tree, 0);
}

int findMax(VI& tree, int ss, int se, int qs, int qe, int index) {
    if (qs <= ss && qe >= se) return tree[index];
    if (se < qs || ss > qe) return INT_MIN;

    int mid = getMid(ss, se);
    return max(findMax(tree, ss, mid, qs, qe, 2*index+1),
               findMax(tree, mid+1, se, qs, qe, 2*index+2));
}

int findMax(VPII &a, VI &tree, int L, int R) {
    L = lower_bound(a.begin(), a.end(), PII(L, 0)) - a.begin();
    R = upper_bound(a.begin(), a.end(), PII(R, maxN+1)) - a.begin() - 1;
    //printf("\nL and R after converting: %d %d\n",L,R);
    if(L <= R) return findMax(tree, 0, a.size()-1, L, R, 0);
    else return 0;
}
int main()
{
    #ifndef ONLINE_JUDGE
        freopen("in.txt","r",stdin);
    #endif
    VI isPrime(maxN+1,1);
    vector<VI> primes(maxN+1);
    for(int p=2; p<=maxN; p++) if(isPrime[p])
        for(int n=p; n<=maxN; n+=p) {
            if(n>p) isPrime[n] = 0;
            primes[n].push_back(p);
        }

    int n,m;
    scanf("%d%d",&n,&m);
    vector<VI> indexes(maxN+1);
    vector<VPII> primeDivs(maxN+1);
    for(int i=0; i<n; i++) {
        int a;
        scanf("%d",&a);
        indexes[a].push_back(i);
        for(int j=0; j<primes[a].size(); j++)
            primeDivs[primes[a][j]].push_back(PII(i,a));
    }

    vector<VI> maxTree(maxN+1);
    for(int p=2; p<=maxN; p++) {
        if(primeDivs[p].empty()) continue;
        buildMaxTree(primeDivs[p],maxTree[p]);
        //printf("%d :\n",p);
        //for(int i=0; i<maxTree[p].size(); i++)
            //printf("%d ",maxTree[p][i]);
        //printf("\n");
    }

    while(m--) {
        int g,L,R;
        scanf("%d%d%d",&g,&L,&R);
        L--; R--;
        int maxA = 0;
        for(int i=0; i<primes[g].size(); i++) {
            int p = primes[g][i];
            //printf("\n%d prime for which findMax called:\n sizeofTREE: %d\n",p,maxTree[p].size());
            int curMax = findMax(primeDivs[p],maxTree[p],L,R);
            maxA = max(maxA,curMax);
        }
        if(!maxA) printf("-1 -1\n");
        else {
            int cnt = upper_bound(indexes[maxA].begin(),indexes[maxA].end(),R) -
                lower_bound(indexes[maxA].begin(),indexes[maxA].end(),L);
            printf("%d %d\n",maxA,cnt);
        }
    }
    return 0;
}
