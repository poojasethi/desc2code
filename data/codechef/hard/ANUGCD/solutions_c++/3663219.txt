#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>

#include <set>
#include <vector>

using namespace std;

#define eprintf(...) fprintf(stderr, __VA_ARGS__)      	

/************************************
And I can tell just what you want
You don't want to be alone
You don't want to be alone
And I can't say it's what you know
But you've known it the whole time
Yeah, you've known it the whole time
************************************/

const int N = int(1e5 + 10);

int lp[N], pr[N], prN;

int d;

void prime() {
 int cnt = 0;
 lp[1] = 1;
 for (int i = 2; i < N; i++) {
  if (!lp[i]) {
   lp[i] = i;
   pr[prN++] = i;
  }
  for (int j = 0; j < prN && lp[i] >= pr[j] && pr[j] * i < N; ++j)
   lp[pr[j] * i] = pr[j];  
 }
}

int n, m, a[N];

vector<int> v[N]; 
vector<int> mx[N], pos[N];

#define pb push_back

void make(int x,int position) {
 int cur = x;
 while (x > 1) {
  d = lp[x];
  pos[d].pb(position);
  while (x % d == 0) x /= d;
 }
}

#define sz(x) (int)(x).size()

int TreeLen, maxnum;

void rmq(int l, int r, int v = 1, int x = 1, int y = TreeLen) {
 if (l <= x && y <= r) {
  maxnum = max(maxnum, mx[d][v]);
  return;
 }
 if (y < l || x > r) return;
 int mid = (x + y) >> 1, lson = (v << 1);
 rmq(l, r, lson,     x, mid);
 rmq(l, r, lson + 1, mid + 1, y);
}

int ans;

int main() {

 prime();

 scanf ("%d %d", &n, &m);
 for (int i = 1; i <= n; ++i) {
  scanf ("%d", &a[i]);
  make(a[i], i);
  v[a[i]].pb(i);
 }

 
 int len;

 for (int c = 0; c < prN; ++c) {
  d = pr[c];
  int posn = sz(pos[d]);
  if (posn > 0) {
   for (len = 1; len < posn; len <<= 1);
   mx[d].resize(len * 2);
   for (int i = len; i < len + posn; ++i) 
    mx[d][i] = a[pos[d][i-len]];
   for (int i = len + posn; i < len * 2; ++i) 
    mx[d][i] = -1;
   for (int i = len - 1; i >= 1; --i) 
    mx[d][i] = max(mx[d][i*2], mx[d][i*2+1]); 
  }
 }

 int g, x, y;

 while (m--) {
  scanf ("%d %d %d", &g, &x, &y);
  ans = -1;
  while (g > 1) {
   d = lp[g]; 

   if (sz(pos[d]) > 0) {
    int l, r, px, py;

    l = 0; r = sz(pos[d]) - 1;
    while (l < r) {
     int mid = (l + r) >> 1;
     if (pos[d][mid] < x) l = mid + 1;
     else r = mid;  
    }
    
    px = r;

    l = 0; r = sz(pos[d]) - 1;
    while (l < r) {
     int mid = (l + r + 1) >> 1;
     if (pos[d][mid] > y) r = mid - 1;
     else l = mid;
    }
    py = r;          
    if (x <= pos[d][px] && pos[d][px] <= y && x <= pos[d][py] && pos[d][py] <= y) {
     ++px; ++py;
     TreeLen = sz(mx[d]) / 2;
     maxnum = -1;
     rmq(px, py);
     ans = max(ans, maxnum);
    }
   } 
   while (g % d == 0) g /= d;
  }

  if (ans == -1) printf ("-1 -1");
  else {

   int l, r, px, py;
   l = 0; r = sz(v[ans]) - 1;
   while (l < r) {
    int mid = (l + r) >> 1;
    if (v[ans][mid] < x) l = mid + 1;
    else r = mid;  
   }
    
   px = r;

   l = 0; r = sz(v[ans]) - 1;
   while (l < r) {
    int mid = (l + r + 1) >> 1;
    if (v[ans][mid] > y) r = mid - 1;
    else l = mid;
   }
   py = r;

   printf ("%d %d", ans, py - px + 1);
  }
  printf ("\n");


  // lets get out from here!
  //return 0;
 }

 return 0;
}
