#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<vector>
#include<map>

#define FOR(i,a,b) for(i = (a);i < (b);i++)
#define f first
#define s second
#define pb push_back
#define MAX 100006
 
using namespace std;


typedef pair<int,int> pr;
typedef long long ll;
vector<pr> tree(3*MAX);
vector<pr> ans(MAX+10);
pr temp;
bool prime[MAX+10];
int fact[MAX+10],arr[MAX+10],arr1[MAX+10];
vector<int> p[MAX+10];
vector<int> q[MAX+10];
map<int,int> match;
vector<pr> edge;

#define getcx getchar_unlocked

inline int in()
{
int n=0;
int ch=getcx();int sign=1;
while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
while( ch >= '0' && ch <= '9' )
n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
return n*sign;
}

void update(int node,int l,int r,int pos,int val)
{
	int mid;
	pr a,b;
	if((l == r) &&(l == pos))
	{
		tree[node].f = val;
		tree[node].s = 1;
		return;
	}
			
	mid = (l + r)/2;
	
	if(pos <= mid)
		 update(2*node,l,mid,pos,val);

	else
		 update(2*node+1,mid+1,r,pos,val);
	a = tree[2*node];
	b = tree[2*node+1];	
	 
	if(a.f > b.f)
		tree[node] = a;
	else if(a.f == b.f)
	{
		a.s = a.s + b.s;
		tree[node] = a;
	}
	else
		tree[node] = b;
}

pr search_tree(int node,int l,int r,int u,int v)
{
	int mid = (l + r)/2;
	pr a,b;
	if( v < l || u > r)
		return temp;
	if(u <=  l && v >= r)
		return tree[node];

	a = search_tree(2*node,l,mid,u,v);
	b = search_tree(2*node + 1,mid+1,r,u,v);
	if(a.f == -1)
		return b;
	if(b.f == -1)
		return a;
		
	if(a.f > b.f)
		return a;
	
	if(a.f == b.f)
	{
		a.s = a.s + b.s;
		return a;
	}
	else
		return b;
}		
	

int main()
{

	int n,m,i,x,g,y,var,sz,v,z,j;
	temp.f = temp.s  = -1;
	memset(prime,true,sizeof(prime));
	prime[1]  = false;
	
	FOR(i,1,MAX+1)
		fact[i] = i;

	for(i = 2;i*i <= MAX;i++)
	{
		if(prime[i])
		{
			for(j = i*i;j <= MAX;j = j+i)
			{
				prime[j] = false;
				fact[j] = i;
			}
		}
		
	}
	//printf("nishant\n");	
			
	

	n = in();
	m = in();
	FOR(i,0,n)
	{
		x = in();
		arr[i] = x;
		var = -1;
		while(x != 1)
		{
			
			p[fact[x]].pb(i);
			//printf("%d ",fact[x]);
			match[fact[x]] = 1;
			var = fact[x];
			while(var == fact[x])
			{
				x = x/fact[x];
			}		
		}			
	}
	/*std::map<int,int>::iterator it;
	for(it = match.begin();it != match.end();it++)
	{
		//printf("%d ",it->first);
		z = it->first;
		sz = p[z].size();
		FOR(i,0,sz)
			printf("%d ",p[z][i]);

		printf("\n");		
	}*/
	

	FOR(i,0,m)
	{
		g = in();
		x = in();
		y = in();
		edge.pb(pr(x,y));
		var = -1;
		while(g != 1)
		{
			q[fact[g]].pb(i);
			var = fact[g];
			while(var == fact[g])
			{
				g = g/fact[g];
			}
		}
	}

	std::map<int,int>::iterator it;
	
	for(it = match.begin();it != match.end();it++)
	{
		z = it->first;
		if(q[z].empty())
			continue;
		
		sz = p[z].size();
		FOR(i,0,sz)
		{
			update(1,0,n-1,p[z][i],arr[p[z][i]]);
		}
		//create_tree(1,0,n-1);
	//	printf("nishant\n");
		sz = q[z].size();
		FOR(i,0,sz)
		{
			v = q[z][i]; 
			pr query = search_tree(1,0,n-1,edge[v].f-1,edge[v].s-1);
			ans[v] = (ans[v].f > query.f)?ans[v]:query;  
		}
		sz = p[z].size();
		FOR(i,0,sz)
		{
			update(1,0,n-1,p[z][i],0);
		}			
	
	}
	FOR(i,0,m)
	{
		if(ans[i].f == 0)
			printf("-1 -1\n");
		else
			printf("%d %d\n",ans[i].f,ans[i].s);	
	}	
	return 0;
}	
			
			
	
