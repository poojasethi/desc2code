#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 1e5 + 5;
int bo[N], di[N * 10];
int first[N], next[N * 10];
int tot;
vector<int> position[N];
int a[N];

void init() {
    tot = 0;
    for (int i = 2; i < N; ++i)
	if (!bo[i])
	    for (int j = i; j < N; j += i) {
		bo[j] = 1;
		di[++tot] = i;
		next[tot] = first[j];
		first[j] = tot;
	    }
}

vector<pair<int, int> > tree[N];

void build(int k, int m, int n, int i) {
    if (m == n) {
	tree[i][k] = make_pair(a[position[i][m]], 1);
	return ;
    }
    int z1 = k << 1, z2 = z1 + 1, mid = m + n >> 1;
    build(z1, m, mid, i);
    build(z2, mid + 1, n, i);
    if (tree[i][z1].first == tree[i][z2].first) 
	tree[i][k] = make_pair(tree[i][z1].first, tree[i][z1].second + tree[i][z2].second);
    else tree[i][k] = max(tree[i][z1], tree[i][z2]);
}

pair<int, int> find(int k, int m, int n, int l, int r, int i) {
    if (m > r || n < l) return make_pair(0, 0);
    if (m >= l && n <= r) return tree[i][k];
    int z1 = k << 1, z2 = z1 + 1, mid = m + n >> 1;
    pair<int, int> p = find(z1, m, mid, l, r, i);
    pair<int, int> q = find(z2, mid + 1, n, l, r, i);
    if (p.first == q.first) return make_pair(p.first, p.second + q.second);
    else return max(p, q);
}
 
int main() {
    init();
    int n, m;
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; ++i) {
	scanf("%d", &a[i]);
	for (int j = first[a[i]]; j; j = next[j]) {
	    int t = di[j];
	    position[t].push_back(i);
	}
    }
    for (int i = 1; i < N; ++i)
	if (position[i].size()) {
	    tree[i].resize(position[i].size() * 4 + 1, make_pair(0, 0));
	    build(1, 0, (int)position[i].size() - 1, i);
	}
    for (int i = 1; i <= m; ++i) {
	int G, l, r;
	scanf("%d%d%d", &G, &l, &r);
	pair<int, int> ans = make_pair(-1, -1);
	for (int j = first[G]; j; j = next[j]) {
	    int t = di[j];
	    int L = lower_bound(position[t].begin(), position[t].end(), l) - position[t].begin();
	    int R = upper_bound(position[t].begin(), position[t].end(), r) - position[t].begin() - 1;
	    if (R < L) continue;
	    ans = max(ans, find(1, 0, (int)position[t].size() - 1, L, R, t));
	}
	printf("%d %d\n", ans.first, ans.second);
    }
    return 0;
}

