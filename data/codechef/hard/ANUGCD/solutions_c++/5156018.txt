#include<iostream>
#include<cstdio>
#include<queue>
#include<stack>
#include<vector>
#include<map>
#include<cmath>
#include<algorithm>
#include<cstdlib>
#include<string>
#include<cstring>
#include<set>
#include<utility>
#include<deque>
#include<limits.h>
using namespace std;
 
#define mod 1000000007
#define rep(i,k,n) for(i=k;i<n;i++)
#define ip(a) freopen(a,"r",stdin)
#define out(b) freopen("b","w",stdout)
#define MAX 100001
#define SIZE 1000000
struct node
{
    int p,v,count;
};
 
vector<node>  tree[3*MAX];
int A[100001];
bool p[MAX]={0};
 
 
vector<int> primeFactors[MAX];
void sieve()
{
    int i,j;
    rep(i,2,MAX)
    {
        if(!p[i])
        {
            for(j=i;j<=MAX;j+=i)
            {
                primeFactors[j].push_back(i);
                p[j]=1;
            }
        }
    }
}
 
void merges(int idx)
{
    //vector<node>temp;
    node nod;
    int p=0,q=0,cur;
    int n=tree[2*idx+1].size(),m=tree[2*idx+2].size();
    while(p<n&&q<m)
    {
        if(tree[2*idx+1][p].p<tree[2*idx+2][q].p)
        {
            tree[idx].push_back(tree[2*idx+1][p]);
            p++;
        }
        else if(tree[2*idx+1][p].p>tree[2*idx+2][q].p)
        {
            tree[idx].push_back(tree[2*idx+2][q]);
            q++;
        }
        else
        {
            nod.p=tree[2*idx+1][p].p;
            if(tree[2*idx+1][p].v==tree[2*idx+2][q].v)
            {
                nod.v=tree[2*idx+1][p].v;
                nod.count=tree[2*idx+1][p].count+tree[2*idx+2][q].count;
            }
            else
            {
                nod.v=max(tree[2*idx+1][p].v,tree[2*idx+2][q].v);
                nod.count=(tree[2*idx+1][p].v>tree[2*idx+2][q].v)?tree[2*idx+1][p].count:tree[2*idx+2][q].count;
            }
            tree[idx].push_back(nod);
            p++;
            q++;
        }
    }
    while(p<n)
    {
        tree[idx].push_back(tree[2*idx+1][p]);
        p++;
    }
    while(q<m)
    {
        tree[idx].push_back(tree[2*idx+2][q]);
        q++;
    }
//    return temp;
}
void build (int idx, int lo, int hi) {
	int i;
	if (lo==hi){
		vector<int> v = primeFactors[A[lo]];
		for(i=0; i<v.size(); i++)
		{
			node t;
			t.p =v[i]; t.v = A[lo]; t.count = 1;
			tree[idx].push_back(t);
		}
		return;
	}
	else {
		int tm = (lo+hi)/2;
		build (idx*2+1,lo,tm);
		build (idx*2+2,tm+1,hi);
	        merges(idx);
	}
}
 
int binarysearch(int idx,int x)
{
    int lo,hi,mid;
    lo=0;
    hi=tree[idx].size()-1;
    while(lo<=hi)
    {
        mid=(lo+hi)/2;
        if(tree[idx][mid].p==x)
            return mid;
        else if(tree[idx][mid].p<x)
            lo=mid+1;
        else
            hi=mid-1;
    }
    return -1;
}
 
pair<int,int> query (int idx, int i, int j, int lo, int hi,int G)
{
    if(i>hi||j<lo)
            return make_pair(INT_MIN,INT_MIN);
    if(i>=lo&&j<=hi)
    {
        pair<int,int> mx(INT_MIN,INT_MIN);
        pair<int,int> cur;
        vector<int> temp=primeFactors[G];
        int ans_idx;
        for(int k=0;k<temp.size();k++)
        {
	    ans_idx = binarysearch(idx, temp[k]);
            if(ans_idx==-1)
                cur=make_pair(-1,-1);
            else{
                cur=make_pair((tree[idx])[ans_idx].v,(tree[idx])[ans_idx].count);
	   }
            mx=make_pair(max(mx.first,cur.first),mx.first==cur.first?mx.second:mx.first>cur.first?mx.second:cur.second);
        }
        return mx;
    }
    pair<int,int> l,r,ans;
    l=query(2*idx+1,i,(i+j)/2,lo,hi,G);
    r=query(2*idx+2,(i+j)/2+1,j,lo,hi,G);
    if(l.first==-1&&r.first==-1)
    {
        ans=make_pair(-1,-1);
    }
    else
    ans=make_pair(max(l.first,r.first),(l.first==r.first)?l.second+r.second:(l.first>r.first?l.second:r.second));
    return ans;
}
int main()
{
int n,m,i,j,p,q,r;
scanf("%d %d", &n, &m);
rep(i,0,n)
scanf("%d", &A[i]);
sieve();
build(0,0,n-1);
pair<int,int> ans;
rep(i,0,m)
{
        scanf("%d%d%d",&p,&q,&r);
 	if(p==1)
    	printf("-1 -1\n");
	else {
	ans=query(0,0,n-1,q-1,r-1,p);
	printf("%d %d\n",ans.first,ans.second);
       }
}
return 0;
}
