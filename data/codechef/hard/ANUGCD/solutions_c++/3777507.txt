/*MD SHAKIM
B.TECH 2ND YEAR
CSE
MNNIT ALLAHABAD*/
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <cctype>
#include <utility>
#include <map>
#include <string>
#include <climits>
#include <set>
#include <string>
#include <sstream>
#include <utility>
#include <ctime>
using namespace std;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef long long LL;
#define getcx getchar
#define SIZE(A) ((int)A.size())
#define PB push_back
#define ALL(c) c.begin(), c.end()
#define INF (int(1e9))
#define INFL (LL(1e18))
#define F(i, a, n) for(int i = a; i < n; i++)
#define FE(i, a, n) for(int i = a; i <= n; i++)
#define R(i, a, n) for(int i = a; i > n; i--)
#define RE(i, a, n) for(int i = a; i >= n; i--)
#define loop(n) F(i, 0, n)
#define loop1(n) FE(i, 1, n)
#define TR(c,i) for(VI::iterator i = (c).begin(); i != (c).end(); i++)
#define pii pair< int,int >
#define piii pair< pii , int >
#define temp 0
#define wait 1
#define perm 2
inline void in(int &n)
{
n=0; int ch = getcx(); int sign = 1;
while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
n = n * sign;
}
int rmq(int node,int s,int e,int l,int r,int pos);
void init(int node,int s,int e);

int a[100005],p[100005],memo[400005][67];
vector<int> f[100005],cnt[100005],q[100005];
int main()
{
    int i,j,t=2,k;
    for(i=5; i<=317; )
    {
        if(a[i]==0)
        {
            for(j=i*i; j<=100000; j=j+i+i)
                a[j]=1;
        }
        i=i+t;
        t=6-t;
    }
    p[1]=2;
    p[2]=3;
    k=2;
    t=2;
    for(i=5; i<=100000; )
    {
        if(!a[i])
        {
            k++;
            p[k]=i;
        }
        i=i+t;
        t=6-t;
    }
    for(i=1; i<=k; i++)
    {
        for(j=p[i]; j<=100000; j=j+p[i])
            f[j].push_back(i);
    }

    int n,m,val,lim;

    in(n);
    in(m);

    for(i=1; i<=n; i++)
    {
        in(a[i]);

        cnt[a[i]].push_back(i);
    }

    init(1,1,n);

    int g,l,r,start,ans,occ,low,high;
    for(i=1; i<=m; i++)
    {
        in(g);
        in(l);
        in(r);

        lim=f[g].size();
        ans=0;

        for(j=0; j<lim; j++)
        {
            val=f[g][j];

            if(val<=65)
                ans=max(ans,rmq(1,1,n,l,r,val));

            else
            {
                val=p[val];
                for(int x=1; ; x++)
                {
                    val*=x;
                    if(val>100000)
                        break;

                    low=lower_bound(cnt[val].begin(),cnt[val].end(),l)-cnt[val].begin();
                    high=upper_bound(cnt[val].begin(),cnt[val].end(),r)-cnt[val].begin();
                    if(high-low>0)
                        ans=max(ans,val);

                    val/=x;
                }
            }
        }
        if(ans==0)
            printf("-1 -1\n");
        else
        {
            /*occ=0;
            for(int i=0; i<cnt[ans].size(); i++)
            {
                if(cnt[ans][i]>=l && cnt[ans][i]<=r)
                    occ++;
            }*/
            low=lower_bound(cnt[ans].begin(),cnt[ans].end(),l)-cnt[ans].begin();
            high=upper_bound(cnt[ans].begin(),cnt[ans].end(),r)-cnt[ans].begin();
            occ=high-low;
            printf("%d %d\n",ans,occ);
        }
    }
return 0;
}
int rmq(int node,int s,int e,int l,int r,int pos)
{
if(s>r || e<l)
return 0;

if(s>=l && e<=r)
return memo[node][pos];

int mid=(s+e)/2;

return max(rmq(2*node,s,mid,l,r,pos),rmq(2*node+1,mid+1,e,l,r,pos));
}
void init(int node,int s,int e)
{
int i;
if(s==e)
{
for(i=1; i<=65; i++)
{
if(a[s]>=p[i] && a[s]%p[i]==0)
{
memo[node][i]=a[s];
}
else
{
memo[node][i]=0;
}
}
return ;
}
int mid=(s+e)/2;
init(2*node,s,mid);
init(2*node+1,mid+1,e);

for(i=1; i<=65; i++)
{
memo[node][i]=max(memo[2*node][i],memo[2*node+1][i]);
}
}
