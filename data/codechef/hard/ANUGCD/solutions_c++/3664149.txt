// -*- C++ -*-
// File: a.cpp
// Copyright (C) 2013
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */

const int maxn = 100001;
const int BLOCK = 330;
int a[maxn];

VI positions[maxn];

int base[maxn*6];
int start[maxn];


int sqrt_m[maxn];
int sqrt_cnt[maxn];

void build(int n) {
    int i = 0, j = 0, cm = -1, cnt = 0;

    for(; i < n; ++i) {
    
        if(i>0 && i%BLOCK==0) {
            sqrt_m[j] = cm;
            sqrt_cnt[j++] = cnt;
            cm = -1;
            cnt = 0;
        }
        if(a[base[i]] > cm) {
            cm = a[base[i]];
            cnt = 1;
        }
        else if(a[base[i]]==cm)
            cnt ++;
    }
}

pii query(int L, int R) {
    pii ans(-1, -1);
    
    for(; L <= R && L%BLOCK!=0; ++L) {
        if(a[base[L]] > ans.X) ans = mp(a[base[L]], 0);
        if(a[base[L]] == ans.X) ans.Y ++;
    }
    
    for(int block = L/BLOCK; L+BLOCK-1 <= R; ++block, L += BLOCK) {
        if(sqrt_m[block] > ans.X) ans = mp(sqrt_m[block], 0);
        if(sqrt_m[block] == ans.X) ans.Y += sqrt_cnt[block];
    }
    
    for(; L <= R; ++L) {
        if(a[base[L]] > ans.X) ans = mp(a[base[L]], 0);
        if(a[base[L]] == ans.X) ans.Y ++;
    }
    
    return ans;
}

int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);
    
    int n,Q;
    cin >> n >> Q;
    
    rep(i,n) {
        cin >> a[i];

        int x = a[i];
        for(int j = 2; j*j <= x; ++j) if(x%j==0) {
            positions[j].pb(i);
            while(x%j==0) x/=j;
        }
        if(x>1) positions[x].pb(i);
    }
    
    int blocks = 0;
    rep(i,maxn) {
        start[i] = blocks;
        rep(j,(int)positions[i].size()) base[blocks++] = positions[i][j];
    }
    
    build(blocks);
    
    while(Q--) {
        int g,x,y;
        cin >> g >> x >> y;
        --x, --y;
        
        pii ans(-1,-1);
        
        for(int j = 2; j*j <= g; ++j) if(g%j==0) {
            
            while(g%j==0) g/=j;
            
            int l = int( lower_bound(base+start[j], base+start[j+1], x) - base );
            int r = int( upper_bound(base+start[j], base+start[j+1], y) - base ) - 1;
            
            if(l > r) continue;
            
            pii q = query(l, r);
            
            ans = max(ans, q);
        }
        
        if(g>1) {
            int l = int( lower_bound(base+start[g], base+start[g+1], x) - base );
            int r = int( upper_bound(base+start[g], base+start[g+1], y) - base ) - 1;
            
            if(l <= r) {
                pii q = query(l, r);
                ans = max(ans, q);
            }
        }
        
        cout << ans.X << " " << ans.Y << endl;
    }

#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
