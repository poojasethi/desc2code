#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <vector>
//#include <iterator>
using namespace std;

#define REP0(i, n) for (int i = 0; i < n; i++)
#define REP1(i, n) for (int i = 1; i <= n; i++)
#define REP(i, l, r) for (int i = l; i <= r; i++)
#define RP(i, r, l) for (int i = r; i >= l; i--)
#define FORE(i, x) for (int i = fi[x]; i != -1; i = e[i].n)

#define MAX_N 100000
#define MAX_P 10000
#define PB push_back
#define ALL(_) _.begin(), _.end()

int pr[MAX_N], id[MAX_N], mf[MAX_N], a[MAX_N];
bool used[MAX_N];
int n, m, pn;

void GetP(void)
{
	 n = 100000;
	 REP(i, 2, n)
     {
		if (!used[i]) pn++, id[pr[pn] = mf[i] = i] = pn;
		for (int j = 1, t; j <= pn && pr[j] * i <= n; j++)
		{
		    used[t = i * pr[j]] = true, mf[t] = mf[i];
			if (i % pr[j] == 0) break;
		}
	 }
}

typedef vector < int > VI;
VI cnt[MAX_N], idx[MAX_P], v[MAX_P], bit[MAX_P];

void add(VI &s, int x, int y)
{ while (x < s.size()) s[x] = max(s[x], y), x += x & -x; }
int get(VI &a, VI &s, int l, int r)
{
	int ret = 0; l--;
	while (r > l)
	{
		  int n = r - (r & -r);
		  if (n >= l) ret = max(ret, s[r]), r = n;
		  else ret = max(ret, a[r--]);
	}
	return ret;
}
int main(void)
{
    GetP(), scanf ("%d%d", &n, &m);
 //   printf ("%d %d\n", n, m); 
  //  REP1(i, pn) printf ("%d ", pr[i]); puts("");
    REP1(i, n)
	{
 		 scanf ("%d", a + i), cnt[a[i]].PB(i);
 		 for (int j = a[i]; j > 1; )
 		 {
			 int d = mf[j], k = id[d];
			 if (v[k].empty()) idx[k].PB(-1), v[k].PB(-1);
		//	 printf ("-> [%d] %d %d %d\n", d, k, idx[k].size(), a[i]);
			 idx[k].PB(i), v[k].PB(a[i]);
			 while (j % d == 0) j /= d;
		 }
	}
	REP1(i, pn) if (!v[i].empty())
	{
		bit[i].resize(v[i].size(), 0);
        REP1(j, v[i].size() - 1) add(bit[i], j, v[i][j]);
	}
	REP1(i, m)
	{
		int g, x, y; scanf ("%d%d%d", &g, &x, &y);
		int ans = -1, qnt = -1;
		for (int j = g; j > 1; )
		{
			int d = mf[j], k = id[d];
			if (!v[k].empty())
			{
			   int l = lower_bound(ALL(idx[k]), x) - idx[k].begin();
			   int r = upper_bound(ALL(idx[k]), y) - idx[k].begin();
			  // printf ("==> %d %d %d\n", d, l, r - 1);
			//   REP0(kk, r - l) printf ("%d ", idx[k][kk + l]); puts("");
			   if (r - l > 0) ans = max(ans, get(v[k], bit[k], l, r - 1));
			}
			while (j % d == 0) j /= d;
		}
		if (ans != -1)
		   qnt = upper_bound(ALL(cnt[ans]), y) - lower_bound(ALL(cnt[ans]), x);
		printf ("%d %d\n", ans, qnt);
	}
    return 0;
}
