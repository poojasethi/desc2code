#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi  vector<int>
#define pb  push_back
#define mp  make_pair
#define M(a,x) memset(a,x,sizeof(a))
#define sci(x) scanf("%d",&x);
#define scl(x) scanf("%lld",&x);
#define scs(x) scanf("%s",x);
#define print(x) printf("%d",x);
#define nl printf("\n")
#define printl(x) printf("%lld",x)
#define F(i,a,n) for(int i=a;i<n;i++)
#define INF 100000000000000000LL
#define LL long long
 
const int N = 1e5+5;
vector<int> prime[N];
int mx;
void sieve() {
    for(int i=2;i<N;i++) {
	if(!prime[i].size()) {
	    for(int j=i;j<N;j+=i) {
		prime[j].pb(i);
	    }
	}
    }
}
struct node {
    int val;
    node *left,*right;
    node() {
	val=-1;
	left=NULL;
	right=NULL;
    }
    node *insert(int beg,int last,int pos,int num) {
	val=max(val,num);
	if(beg<last) {
	   int mid = (beg+last)/2;
	   if(pos<=mid) {
	       if(left==NULL) {
		   left=new node();
	       }
	       left=left->insert(beg,mid,pos,num);
	   }
	   else {
		   if(right==NULL) {
		       right=new node();
		   }
		   right=right->insert(mid+1,last,pos,num);
	   }
	}
	return this;
    }
    void query(int l,int r,int ql,int qr) {
	if(l>qr || r<ql) return ;
	if(l>=ql && r<=qr) {
	    mx=max(mx,val);
	    return ;
	}
	int mid=(l+r)/2;
	if(left!=NULL) {
	    left->query(l,mid,ql,qr);
	}
	if(right!=NULL) {
	    right->query(mid+1,r,ql,qr);
	}
    }
};
node *root[N];
vector<int> v[N];
int main() {
    sieve();
    int n,q;
    sci(n);sci(q);
    F(i,2,N) root[i]=new node();
    for(int i=1;i<=n;i++) {
	int x;sci(x);
	v[x].pb(i);
	for(int j=0;j<prime[x].size();j++) {
	    root[prime[x][j]]=root[prime[x][j]]->insert(1,n,i,x);
	}
    }
    while(q--) {
	int g,l,r;sci(g);sci(l);sci(r);
	mx=-1;
	for(int i=0;i<prime[g].size();i++) {
	    root[prime[g][i]]->query(1,n,l,r);
	}
	if(mx==-1) {
	    puts("-1 -1");
	}
	else {
	    int ans=upper_bound(v[mx].begin(),v[mx].end(),r)-lower_bound(v[mx].begin(),v[mx].end(),l);
	    printf("%d %d\n",mx,ans);
	}
    }
    return 0;
}