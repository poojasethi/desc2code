#include<iostream>
#include<stdio.h>
#include<math.h>
#include <vector>
#include <algorithm>
using namespace std;
const int maxn = 1e5 + 9;

int n,m;
int num[maxn];
vector<int> dp[maxn];
vector<int>criba[maxn];
bool mk[maxn];

struct node
{
	int v;
	int mx;
	int pos;
	int cant;

	void merge(node a, node b)
	{
		mx = max(a.mx,b.mx);
		if(a.mx == b.mx)
			cant = a.cant + b.cant;
		else if(a.mx > b.mx)
			cant = a.cant;
		else cant = b.cant;
	}

};

struct par
{
	int pos;
	int v;

	par()
	{}

	par(int va, int p)
	{
		v = va;
		pos = p;
	}

	bool operator <(par a)const
	{
		return pos < a.pos;
	}
};

vector<int>primos[maxn];
node tree[maxn*50];

int ini[maxn],fin[maxn];
vector<int>posicion;

void sieve()
{
	for(int i = 2; i < maxn; i++)
	{
		if(mk[i])continue;
		for(int j = i; j < maxn; j+= i)
		{
			mk[j] = 1;
			criba[j].push_back(i);
		}
	}
}

bool valid(int l, int r, int a, int b)
{
	if(l <= a && a <= r && l <= b && b <= r && a <= b)return true;
	return false;
}

node query(int root, int l, int r, int i, int j)
{
	if(l == i && r == j)
		return tree[root];
	int m = (l + r) >> 1;
	int lc = root << 1;
	int rc = lc | 1;

	if(j <= m)
		return query(lc,l,m,i,j);
	else if(i > m)
		return query(rc,m + 1,r,i,j);
	else
	{
		node a = query(lc,l,m,i,m);
		node b = query(rc,m + 1,r,m + 1,j);
		node res = node();
		res.merge(a,b);
		return res;
	}
}

void init(int root, int l, int r)
{
	if(l == r)
	{
		tree[root].mx = tree[root].v = num[posicion[l]];
		tree[root].cant = 1;
		return;
	}

	init(2*root,l, (l + r) >> 1);
	init(2*root + 1,((l + r) >> 1) + 1,r);
	tree[root].merge(tree[2*root],tree[2*root + 1]);
}

int main()
{
	sieve();
	scanf("%d %d",&n,&m);
	for(int i = 0; i < n; i++)
	{
		scanf("%d",&num[i]);
		dp[num[i]].push_back(i);
	}

	for(int i = 0; i < n; i++)
	{
		int size = criba[num[i]].size();
		for(int j = 0; j < size; j++)
		{
			primos[criba[num[i]][j]].push_back(i);
		}
	}

	for(int i = 1; i < maxn; i++)
	{
		ini[i] = posicion.size();
		int size = primos[i].size();
		for(int j = 0; j < size; j++)
			posicion.push_back(primos[i][j]);
		fin[i] = posicion.size() - 1;
	}

	init(1,0,posicion.size() - 1);


	int a,b,c;
	while(m--)
	{
		scanf("%d %d %d",&a,&b,&c);
		b--;
		c--;

		int size = criba[a].size();

		node ans = node();

		for(int i = 0; i < size; i++)
		{
			int p = criba[a][i];
			if(primos[p].empty())continue;

			int l = lower_bound(primos[p].begin(),primos[p].end(),b) - primos[p].begin();
			int r = upper_bound(primos[p].begin(),primos[p].end(),c) - primos[p].begin();
			r--;


			node res = node();

			if(l <= r && valid(b,c,primos[p][l],primos[p][r]) && ini[p] <= fin[p])
			{
				l += ini[p];
				r += ini[p];
				res = query(1,0,posicion.size() - 1,l,r);
			}

			if(res.mx > ans.mx)
				ans = res;
			/*else if(res.mx == ans.mx)
				ans.cant += res.cant;
				*/
		}
		if(ans.mx == 0)
			printf("%d %d\n", -1,-1);
		else
			printf("%d %d\n", ans.mx,ans.cant);
	}
	return 0;
}
