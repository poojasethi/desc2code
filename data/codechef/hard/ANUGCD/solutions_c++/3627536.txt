#include <iostream>
#include <cstdio> 
#include <cstdlib>
#include <string>
#include <cstring> 
#include <sstream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <map>
 
#define mp make_pair
#define pb push_back
 
using namespace std;
 
typedef vector<int> VI;
typedef pair<int, int> PI; 
typedef long long L; 
 
const int maxn = 100001; 
 
int isComposite[maxn >> 6];
int factor[maxn];
int primes[10000];
int pid[maxn]; 
int P;
int A,B;
 
inline bool check(int i)
{
	return ( isComposite[i >> 5] & ( 1 << ( i & 31) ) );
}
 
inline void fix(int i)
{
	isComposite[ i >> 5] |= ( 1 << ( i & 31) );
}
 
void sieve()
{
	int i,j, k;
 
	for(i = 6; i*i <= maxn; i += 6)
	{
		for(k = i -1; k <= i + 1; k += 2)
			if(!check(k >> 1) )
				for(j = k * k; j < maxn; j += k << 1)
					fix( j >> 1);
	}
 
	P = 0;
	primes[P++] = 2;
	primes[P++] = 3;
	pid[2] = 0; 
	pid[3] = 1; 
	for(i = 6; i < maxn ;  i += 6)
	{
		for(j = i -1; j <= i + 1; j +=2)
			if(!check(j >> 1 ) ){
				pid[j] = P; 
				primes[P++] = j;
			}
	}
}
 
int a[maxn]; 
vector<vector<int> > plist; 
 
 
struct seg
{ 
	vector<int> beg, end;
	vector<PI> arr; 
	int id; 
	seg(int idx = 0){
		arr.resize(4 * plist[idx].size()); 
		beg.resize(4 * plist[idx].size()); 
		end.resize(4 * plist[idx].size()); 
		id = idx; 
		if(plist[idx].size())
			init(1, 0, plist[idx].size()); 
	} 
	void init(int pos, int left, int right){
		beg[pos] = left; 
		end[pos] = right; 
		if(right == left + 1){
			arr[pos] = mp(a[plist[id][left]], 1); 
		}
		else {
			init( (pos << 1), left, (left+right) >> 1); 
			init( ((pos << 1) | 1), ((left+right) >> 1), right); 
			if(arr[pos << 1].first == arr[(pos << 1) | 1].first)
				arr[pos] = mp(arr[pos << 1].first, arr[pos << 1].second + arr[(pos << 1) | 1].second);
			else 
				arr[pos] = max(arr[pos << 1], arr[(pos << 1) | 1]);
		}
	}
	PI query(int pos, int left, int right){
		if(beg[pos] >= left && end[pos] <= right)
			return arr[pos]; 
		if (right <= beg[pos] || left >= end[pos])
			return mp(-1,-1); 
		PI A, B; 
		A = query((pos << 1), left, right); 
		B = query(((pos << 1) | 1), left, right); 
		if(A.first == B.first)
			return mp(A.first, A.second + B.second);
		else 
			return max(A, B); 
	}
};
 
vector<seg> tr; 
 
void solve(PI &A, int idx, int left, int right){
	left = lower_bound(plist[idx].begin(), plist[idx].end(), left)-plist[idx].begin(); 
	right = upper_bound(plist[idx].begin(), plist[idx].end(), right)-plist[idx].begin(); 
	if(left >= right)return;
	PI B = tr[idx].query(1, left, right); 
	A = max(A, B); 
}
int main(){
	//ios_base::sync_with_stdio(0);
	sieve();
	int n,m; 
	cin >> n >> m; 
	int left, right, num; 
	plist.resize(P); 
 
	for(int i=0;i<n;i++){
		cin >> a[i]; 
		num = a[i]; 
		for(int j=0; j<P && primes[j] * primes[j] <= num; j++){
			if(num % primes[j] == 0){
				plist[j].push_back(i); 
			}
			while(num % primes[j] == 0)
				num /= primes[j]; 
		}
		if(num > 1){
			plist[pid[num]].push_back(i); 
		}
	}
	
	for(int i=0;i<P; i++){
		tr.push_back(seg(i));  
	}
	
	
	while(m--){
		cin >> num >> left >> right; 
		left --, right --; 
		PI A = mp(-1, -1); 
		for(int i=0; i<P && primes[i] * primes[i] <= num; i++){
			if(num % primes[i] == 0){
				solve(A, i, left, right); 
			}
			while(num % primes[i] == 0)
				num /= primes[i]; 
		}
		if(num > 1){
			solve(A, pid[num], left, right); 
		}
		cout << A.first << " " << A.second << endl;
	}
 
}