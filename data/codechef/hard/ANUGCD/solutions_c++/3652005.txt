//Author: Siddharth Saluja
//Quote: "DIE FOR YOUR AIM"
#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<stack>
#include<queue>
#include<deque>
#include<algorithm>

using namespace std;


#define mod 1000000007
//#define DEBUG
#define inf 2147483647
#define ninf -2147483648
#define FOR(i,a,b) for(i=a;i<b;i++)
#define s(a) scanf("%d",&a)
#define lls(a) scanf("%lld",&a)
#define ss(a) scanf("%s",a)
#define p(a) printf("%d",a)
#define llp(a) printf("%lld",a)
#define sp(a) printf("%s",a)
#define cp(a) printf("%c",a)
#define nline printf("\n")
#define space printf(" ")
#define fs(a) fscanf(fp,"%d",&a)
#define flls(a) fscanf(fp,"%lld",&a)
#define fss(a) fscanf(fp,"%s",a)
#define fp(a) fprintf(fo,"%d",a)
#define fllp(a) fprintf(fo,"%lld",a)
#define fsp(a) fprintf(fo,"%s",a)
#define fcp(a) fprintf(fo,"%c",a)
#define fnline fprintf(fo,"\n")
#define fspace fprintf(fo," ")
#define ll long long


int scan()
{
 int n = 0,flag=0;
char c = getchar_unlocked();
if(c=='-')
flag=1;
if(flag)
c=getchar_unlocked();
 while (!('0' <= c && c <= '9'))
 {
 c = getchar_unlocked();
  }
  while ('0' <= c && c <= '9')
 {
  n = (n<<3)+(n<<1) + c - '0';
  c = getchar_unlocked();
}
if(flag)
n=n*(-1);
 return n;
 }


int a[100002]={0},g;

vector<int>gg;

vector<int> v[100002];

struct store{
int val,count,prime;
};

struct node{
    vector<store> vv;
}segtree[262150];

void initialize(int node,int start,int end)
{
    int i,id,j,k,left,right;
    store u,x,uu;
    if(start==end)
    {
        for(i=0;i<v[start].size();i++){
            u.val=a[start];
            u.prime=v[start][i];
            u.count=1;
        segtree[node].vv.push_back(u);
        }
    }
    else
    {
        left=node<<1;
        right=left+1;
        initialize(left,start,(start+end)/2);
        initialize(right,(start+end)/2+1,end);
        i=0;
        j=0;
        while(i<segtree[left].vv.size() || j<segtree[right].vv.size())
        {
            if(j==segtree[right].vv.size())
            {
                 segtree[node].vv.push_back(segtree[left].vv[i]);
               i++;
            }
            else if(i==segtree[left].vv.size())
                    {
                    segtree[node].vv.push_back(segtree[right].vv[j]);
                    j++;
                    }
            else if(segtree[left].vv[i].prime<segtree[right].vv[j].prime)
            {
               segtree[node].vv.push_back(segtree[left].vv[i]);
               i++;
            }
            else if(segtree[left].vv[i].prime>segtree[right].vv[j].prime)
            {
                segtree[node].vv.push_back(segtree[right].vv[j]);
                j++;
            }
            else if(segtree[left].vv[i].prime==segtree[right].vv[j].prime)
            {
                uu.prime=segtree[left].vv[i].prime;
                if(segtree[left].vv[i].val==segtree[right].vv[j].val)
                {uu.val=segtree[left].vv[i].val;
                uu.count=segtree[left].vv[i].count+segtree[right].vv[j].count;}
                else
                {
                    if(segtree[left].vv[i].val>segtree[right].vv[j].val)
                        {uu.val=segtree[left].vv[i].val;
                uu.count=segtree[left].vv[i].count;}
                else
                {
                    uu.val=segtree[right].vv[j].val;
                uu.count=segtree[right].vv[j].count;
                }
                }
                segtree[node].vv.push_back(uu);
                i++;
                j++;
            }
        }
    }
}

store query(int node,int start,int end,int u,int v)
{
    store h,b;
    int i,prev=0,cnt=0,index,flag=0;
    if(start>=u && end<=v)
    {
        prev=-1;
        cnt=0;
        for(i=0;i<gg.size();i++)
        {
            start=0;
            end=(int)segtree[node].vv.size()-1;
            flag=0;
             while(start<=end)
            {
            index=(start+end)/2;
            if(segtree[node].vv[index].prime==gg[i])
            {flag=1;break;}
            else if(segtree[node].vv[index].prime>gg[i])
            end=index-1;
            else
            start=index+1;
            }
            if(!flag)index=-1;
            if(index==-1)
               {
                continue;
               }
            b=segtree[node].vv[index];
                if(prev<b.val )
                {
                    prev=b.val;
                    cnt=b.count;
                }
        }
        if(prev!=-1)
        {
            h.val=prev;
            h.count=cnt;
            h.prime=g;
            return h;
        }
    }
    else if((u>=start && u<=end)||(v>=start && v<=end))
    {
        store one,two;
        one=query(2*node,start,(start+end)/2,u,v);
        two=query(2*node+1,(start+end)/2+1,end,u,v);
        if(one.val==-1 && two.val!=-1)
            return two;
        else if(one.val!=-1 && two.val==-1)
            return one;
        else if(one.val!=-1 && two.val!=-1)
        {
            if(one.val>two.val)
                return one;
            else if(two.val>one.val)
                return two;
            else
            {
                h.val=one.val;
                h.count=one.count+two.count;
                h.prime=g;
                return h;
            }
        }
    }
    h.val=-1;
    h.count=-1;
   h.prime=-1;
   return h;
}

int smallestprime[100002]={0};


void smallprimediv()
{
     int n=100001;
    int i,j;
    for(i=2;i<n;i++)
    {
        if(smallestprime[i]==0)
        {
            for(j=i;j<n;j=j+i)
            {
                if(smallestprime[j]==0)
                smallestprime[j]=i;
            }
        }
    }
}

clock_t tStart;
long double TL = 1.4699;
int main()
{
tStart = clock();
#ifdef DEBUG
    cout<<"Debugging\n";
#endif
FILE *fp,*fo;
fp=fopen("input.txt","r");
fo=fopen("output.txt","w");

int n,m,d,l,r,i,j,temp,k,prev;

vector<int>primes;

n=scan();
m=scan();


smallprimediv();
for(i=1;i<=n;i++)
    {
        a[i]=scan();
        temp=a[i];
          k=a[i],prev=-1;
    for(;k>1;k=k/smallestprime[k])
    {
        if(prev!=smallestprime[k])
        {v[i].push_back(smallestprime[k]);prev=smallestprime[k];}
    }
    }
initialize(1,1,n);
store ans;

while(m--)
{
    g=scan();
    l=scan();
    r=scan();
    j=0;
    gg.clear();
    k=g;
    prev=-1;
    for(;k>1;k=k/smallestprime[k])
    {
        if(prev!=smallestprime[k])
        {gg.push_back(smallestprime[k]);prev=smallestprime[k];}
    }
       ans=query(1,1,n,l,r);
        if(ans.val==-1)
            printf("-1 -1\n");
        else
            printf("%d %d\n",ans.val,ans.count);
}
 while(((double)(clock()-tStart))/CLOCKS_PER_SEC <= TL);
return 0;
}