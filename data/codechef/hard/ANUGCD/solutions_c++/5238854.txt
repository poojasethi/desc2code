/*
 * Author:  vawait
 * Created Time:  2014/10/30 13:53:33
 * File Name: test.cpp
 */
#include<cstdio>
#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
#include<string>
#include<map>
#include<set>
#include<vector>
#include<queue>
#include<stack>
#include<ctime>
using namespace std;
#define rep(i, a, b) for (int i = (a); i <= (b); ++i)
#define red(i, a, b) for (int i = (a); i >= (b); --i)
#define clr( x , y ) memset(x,y,sizeof(x))
#define mp make_pair
#define pb push_back
#define x first
#define y second
#define sqr(x) ((x) * (x))
typedef long long lint;
const int maxn = 100000;
int n , m , g[maxn+10] , x[maxn+10] , a[maxn+10];
int ans[maxn+10] , sum[maxn+10] , s[maxn+10] , p[maxn+10];
vector < int > b[maxn+10] , q[maxn+10];
vector < pair < int , int > > f[maxn+10];

void init()
{
    int y;
    scanf("%d%d",&n,&m);
    rep(i,1,n) scanf("%d",&a[i]);
    rep(i,1,m) {
        scanf("%d%d%d",&g[i],&x[i],&y);
        q[y].pb( i );
    }
    rep(i,2,maxn) if ( b[i].empty() )
        for ( int j = i; j <= maxn; j += i ) b[j].pb( i );
    clr( s , 255 );
    clr( p , 255 );
    clr( ans , 255 );
    clr( sum , 255 );
}

void work()
{
    int l , r , k , id , v , y , ll;
    rep(i,1,n) {
        red(j,b[a[i]].size()-1,0) {
            k = b[a[i]][j];
            while ( p[k] >= 0 && f[k][p[k]].x < a[i] ) p[k] --;
            p[k] ++;
            if ( p[k] <= s[k] ) f[k][p[k]] = mp( a[i] , i );
            else f[k].pb( mp( a[i] , i ) ) , s[k] ++;
        }
        red(j,q[i].size()-1,0) {
            id = q[i][j];
            red(v,b[g[id]].size()-1,0) {
                y = b[g[id]][v];
                if ( p[y] < 0 || f[y][p[y]].y < x[id] ) continue;
                l = 0 , r = p[y];
                while ( l < r ) {
                    k = ( l + r ) >> 1;
                    if ( f[y][k].y >= x[id] ) r = k; else l = k + 1;
                }
                ll = l - 1;
                if ( f[y][l].x <= ans[id] ) continue;
                ans[id] = f[y][l].x;
                r = p[y];
                while ( l < r ) {
                    k = ( l + r + 1 ) >> 1;
                    if ( f[y][k].x < ans[id] ) r = k - 1; else l = k;
                }
                sum[id] = r - ll;
            }
        }
    }
    rep(i,1,m) printf("%d %d\n",ans[i],sum[i]);
}

int main()
{
    init();
    work();
    return 0;
}

