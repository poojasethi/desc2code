#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 100005
#define NN 10000000
#define ln 1e10+1
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 1000000007
#define ln 1e13
#define Pa pair <int, int>

using namespace std;

int a[N], P[N], n, m;
vector <int> pos[N], L[N];

struct node
{
    int Val;
    node *son[2];
};

typedef node *Node;
Node T[N];

Node Make_node()
{
    Node W = new node;
    W -> son[0] = W -> son[1] = NULL;
    W -> Val = 0;
    return W;
}

void Build(Node cur, int d, int c, int &w)
{
    if(d == c)
    {
        cur -> Val = a[pos[w][d]];
        return;
    }
    cur -> son[0] = Make_node();
    cur -> son[1] = Make_node();
    int g = (d + c) / 2;
    Build(cur -> son[0], d, g, w);
    Build(cur -> son[1], g+1, c, w);
    int u = cur -> son[0] -> Val;
    int v = cur -> son[1] -> Val;
    cur -> Val = max(u, v);
}

int Get(Node cur, int l, int r, int d, int c)
{
    if(d <= l && r <= c)    return  cur -> Val;
    if(d > r || l > c)  return 0;
    int g = (l + r) / 2;
    int u = Get(cur -> son[0], l, g, d, c);
    int v = Get(cur -> son[1], g+1, r, d, c);
    return max(u, v);
}

int main()
{
    //filein("inp.txt");  fileout("out.txt");
    int x, q, G, y;
    for(int i=2; i<N; i++)
    {
        if(P[i])   continue;
        for(int j=i; j<N; j+=i)
            P[j] = i;
    }
    cin >> n >> m;
    for(int i=1; i<=n; i++)
    {
        scanf("%d", &a[i]);  x = a[i];
        L[a[i]].push_back(i);
        while(x > 1)
        {
            int y = P[x];
            while(x % y == 0)   x /= y;
            pos[y].push_back(i);
        }
    }
    for(int i=1; i<N; i++)
    {
        if(P[i] == i)
            T[i] = Make_node();
        L[i].push_back(n+1);
    }
    for(int i=2; i<N; i++)
    {
        if(P[i] != i)   continue;
        pos[i].push_back(n+1);
        Build(T[i], 0, pos[i].size()-1, i);
    }
    while(m--)
    {
        scanf("%d%d%d", &G, &x, &y);
        int ans = 0;
        while(G > 1)
        {
            int u = P[G];
            while(G % u == 0)    G /= u;
            int l = lower_bound(pos[u].begin(), pos[u].end(), x) - pos[u].begin();
            int r = upper_bound(pos[u].begin(), pos[u].end(), y) - pos[u].begin() - 1;
            if(r < l)   continue;
            ans = max(ans, Get(T[u], 0, pos[u].size()-1, l, r));
        }
        if(ans == 0)   {printf("-1 -1\n"); continue;}
        int l = lower_bound(L[ans].begin(), L[ans].end(), x) - L[ans].begin();
        int r = upper_bound(L[ans].begin(), L[ans].end(), y) - L[ans].begin();
        printf("%d %d\n", ans, r - l);
    }
}
