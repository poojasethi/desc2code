/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

//package practice;
import java.io.*;
import java.util.*;

/**
 *
 * @author nikhil
 */
public class Main
{
    public static void main(String[]args) throws Exception
    {
        Parser in=new Parser(System.in);
        int t=in.nextInt();
        while(t-- >0)
        {
            int n=in.nextInt();
            int[]coins=new int[n+1];
            for(int i=1;i<=n;i++)
                coins[i]=in.nextInt();

            int k=(n+1)/2;
            int[]piles=new int[k+1];
            
            int j=n;
            int ans=0;
            for(;k>0;k--,j-=2)
            {
                piles[k]=coins[j]-coins[j-1]-1;
                ans^=piles[k];
            }
            if(ans==0)
                System.out.println("Johnny wins\n");

            else
            {
                System.out.println("Mary wins");
                k=(n+1)/2;
                for(int i=1;i<=k;i++)
                {


                    int remove=piles[i]-(ans^piles[i]);
                    if(remove>0) // we are to remove some coins from this pile
                        j=2*i;
                    else        // we are to add some coins to this pile
                        j=2*i-1;
                    if(n%2==1) j--;
                    remove=(int)Math.abs(remove);
                   // System.out.println("At "+i+" pile and seeing "+j+" coin removed is "+ remove);

                    if(j>0 && (coins[j]-coins[j-1])>remove)
                    {
                        System.out.println("Move "+coins[j]+" to "+(coins[j]-remove)+"\n");
                        break;
                    }

                }
            }

        }

    }

}

class Parser
    {
       final private int BUFFER_SIZE = 1 << 16;

       private DataInputStream din;
       private byte[] buffer;
       private int bufferPointer, bytesRead;

       public Parser(InputStream in)
       {
          din = new DataInputStream(in);
          buffer = new byte[BUFFER_SIZE];
          bufferPointer = bytesRead = 0;
       }

       public int nextInt() throws Exception
       {
          int ret = 0;
          byte c = read();
          while (c <= ' ') c = read();
          boolean neg = c == '-';
          if (neg) c = read();
          do
          {
             ret = ret * 10 + c - '0';
             c = read();
          } while (c > ' ');
          if (neg) return -ret;
          return ret;
       }

       private void fillBuffer() throws Exception
       {
          bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
          if (bytesRead == -1) buffer[0] = -1;
       }

       private byte read() throws Exception
       {
          if (bufferPointer == bytesRead) fillBuffer();
          return buffer[bufferPointer++];
       }
    }

