#include <iomanip>
#include <numeric>
#include <functional>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <cctype>
#include <sstream>
#include <map>
#include <set>
#include <cstdio>
#include <queue>
#define f(i,x,y) for(int i=x;i<y;i++)
#define fd(i,y,x) for(int i=y;i>=x;i--)
#define FOR(it,A) for( typeof A.begin() it = A.begin(); it!=A.end(); it++)
#define impr(A) for( typeof A.begin() chen = A.begin(); chen !=A.end(); chen++ ) cout<<*chen<<" "; cout<<endl
#define ll long long
#define vint vector<int>
#define clr(A,x) memset(A,x,sizeof(A))
#define CLR(v) f(i,0,n) v[i].clear()
#define oo (1<<30)
#define ones(x) __builtin_popcount(x)
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define pb push_back
#define eps (1e-9)
#define cua(x) (x)*(x)
#define MAX 100005
using namespace std;

int T,n;
int x[MAX], y[MAX], r[MAX], bit[MAX], pos[MAX];
int VY[MAX], sz;
int dp[MAX];
bool orden1 (int i, int j){ return y[i] < y[j]; }
bool orden2 (int i, int j){
	if (x[i]!=x[j]) return x[i] > x[j];
	return y[i] < y[j];
}

inline void add (int p, int w){
	for (; p<=sz; p += p&(-p)) bit[p] = max (bit[p], w);
}
inline int get (int p){
	int res = 0;
	for (; p; p -= p&(-p)) res = max (res, bit[p]);
	return res;
}
int rep[MAX];

int main()
{
	cin >> T;
	while (T--){
		cin >> n;
		sz = 1;
		f(i,0,n) rep[i+1] = 0, bit[i+1] = 0;
		f(i,0,n) scanf ("%d%d", x+i, y+i), y[i] = -y[i];
		f(i,0,n) r[i] = i;

		sort (r, r+n, orden1);
		for (int  i = 0, j = 0; i<n; i=j){
			while (j<n && y[r[i]]==y[r[j]]) pos[r[j]] = sz, j++;
			VY[sz++] = y[r[i]];
		}

		sort (r, r+n, orden2);
		int mx = 0;
		f(j,0,n){
			int i = r[j];
			dp[i] = get (pos[i]) + 1;
			add (pos[i], dp[i]);
			rep[dp[i]]++;
			mx = max (mx, dp[i]);
		}
		cout << mx << endl;
		f(i,1,mx+1) printf ("%d%c", rep[i], i==mx? 10:32);
	}
}

