#include<iostream>
#include<queue>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<string>
#include<cstring>
#include<bitset>
#include<map>
#include<numeric>
#include<sstream>
#include<cmath>
using namespace std;
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb push_back
#define f(i,x,y) for(int i = x; i<y; i++)
#define FOR(it,A) for(typeof A.begin() it = A.begin(); it!= A.end(); it++)
#define quad(x) (x) * (x)
#define mp make_pair
#define clr(x, y) memset(x, y, sizeof x)
#define fst first
#define snd second
typedef pair<int, int> pii;
typedef long long ll;
typedef long double ld;
#define inf (1 << 28)
#define N 100000
int n, m;
vector<int> in[N]; int tam[N];
pii decc[10000];
pii maxi[4 * N];
#define l(u) (u * 2 + 1)
#define r(u) (u * 2 + 2)
void make(int u = 0, int le = 0, int ri = n - 1){
  if(le == ri) maxi[u] = pii(in[le].back(), le);
  else{
    int mid = (le + ri) / 2;
    make(l(u), le, mid);
    make(r(u), mid + 1, ri);
    maxi[u] = max(maxi[l(u)], maxi[r(u)]);
  }
}
 
void deco(int from, int u = 0, int le = 0, int ri = n - 1){
 if(ri < from) return;
 if(le >= from) decc[m++] = maxi[u];
 else{
  int mid = (le + ri) / 2;
  deco(from, l(u), le, mid);
  deco(from, r(u), mid + 1, ri);
 }
}
void update(int pos, int u = 0, int le = 0, int ri = n - 1){
  if(le == ri){ 
    tam[le]--;
    maxi[u] = pii(tam[le] == 0 ? -1 : in[le][tam[le] - 1], le);
  }else{
    int mid = (le + ri) / 2;
    if(pos <= mid) update(pos, l(u), le, mid);
    else update(pos, r(u), mid + 1, ri);
    maxi[u] = max(maxi[l(u)], maxi[r(u)]);
  } 
}
    
pii A[N]; int vals;
int main(){
  int t; scanf("%d", &t);
  while(t--){
    scanf("%d", &vals);
    f(i, 0, vals) scanf("%d %d", &A[i].fst, &A[i].snd);
    sort(A, A + vals);
    n = 0;
    f(i, 0, vals) in[i].clear(), tam[i] = 0;
    f(i, 0, vals) 
      if(n == 0 || A[i].fst != A[i - 1].fst)
        in[n].pb(A[i].snd), tam[n]++, n++;
      else
        in[n - 1].pb(A[i].snd), tam[n - 1]++;
    make();
    vector<int> res;
    while(true){
      int le = 0;
      int cnt = 0;
      while(le < n){
        m = 0;
        deco(le);
        pii best = *max_element(decc, decc + m);
        if(best.fst == -1) le = n;
        else{
          int pos = best.snd;
          update(pos);
          le = pos + 1;
          cnt++;
        }
      }
      if(cnt == 0) break;
      res.pb(cnt);
    }
    printf("%d\n", res.size());
    f(i, 0, res.size()){
      if(i) printf(" ");
      printf("%d", res[i]);
    }
    printf("\n");
  }
}
