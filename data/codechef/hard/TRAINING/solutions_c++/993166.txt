
#include<iostream>
#include<sstream>
#include<cstdio>
#include<memory.h>
#include<cstdlib>
#include<algorithm>
#include<cmath>
#include<string>
#include<map>
#include<cstring>
#include<vector>
#include<queue>
#include<stack>
#include<assert.h>
#include<set>
#include<deque>
#include<climits>
#include<utility>

using namespace std;

#define SI ({int _x; scanf("%d",&_x); _x;})
#define SLL ({long long _x; scanf("%lld",&_x); _x;})
#define SLF ({double _x; scanf("%lld",&_x); _x;})
#define SC ({char _x; scanf("%c",&_x); _x;})
#define sscan(n) scanf("%s",n)
#define lc(i) (i<<1)
#define rc(i) ((i<<1)+1)
#define MP make_pair
#define PB push_back
#define LL long long
#define FILL(a,x) memset(a,x,sizeof a)
#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORD(i,a,b) for(int i=(b)-1;i>=(a);--i)
#define REPD(i,b) for(int i=(b)-1;i>=0;--i)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)>(b)?(b):(a))
#define ABS(a) ((a)<0?-(a):(a))

typedef vector<int> VI; 
typedef pair<int,int> PI; 
#define SZ(a) int((a).size()) 
#define ALL(c) (c).begin(),(c).end() 
#define SORT(a) sort(ALL(a))
#define TR(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define dbg(x) cout<<#x<<" = "<<x<<endl
#define RAND(x) ((int)(((rand()*1.0)/RAND_MAX)*(x)))

struct node {int x,y;};

bool operator<(const node& n1, const node& n2)
{
	if(n1.x != n2.x) return n1.x>n2.x;
	return n1.y > n2.y;
}

vector <node> v;
vector <node> ref;

void update(node n)
{
	int sz = SZ(ref);
	if(sz == 0)
	{
		node newn = (node){n.y,1};
		ref.PB(newn);
		return;
	}
	int hi = sz-1, lo = 0;
	if(ref[lo].x < n.y) { ref[lo].x = n.y; ++ref[lo].y; return; }
	if(ref[hi].x >= n.y)
	{
		node newn = (node){n.y,1};
		ref.PB(newn);
		return;
	}
	while(lo + 1 < hi)
	{
		int mid = (lo + hi)/2;
		if(ref[mid].x < n.y) hi = mid;
		else lo = mid;
	}
	ref[hi].x = n.y; ++ref[hi].y;
	return;
}

int main()
{
	int t = SI;
	while(t--)
	{
		int n = SI;
		v.clear();
		REP(i,n) { node nn; nn.x = SI; nn.y = SI; v.PB(nn); }
		sort(ALL(v));
		ref.clear();
		REP(i,n)
		{
		//	dbg(i); cout<<v[i].x<<" "<<v[i].y<<endl;
			update(v[i]);
		}
		printf("%d\n",SZ(ref));
		REP(i,SZ(ref)-1) printf("%d ",ref[i].y); printf("%d\n",ref[SZ(ref)-1].y);
	}
	return 0;
}
