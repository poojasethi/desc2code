#include<bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    struct node*next;
};

struct node *val[2015];
int mark[2015];

int dfs(int x)
{
    if(mark[x])
        return 0;
    mark[x]=1;
    return dfs((val[x]->next)->data)+1;
}

int maximum,t,n,a[2015],b[2015],cnt,dp[2005][2005];

void calculate()
{
    for(int i=2;i<=2000;i++)
        dp[i][i]=i-1;

    for(int i=2; i<=2000; i++)
    {
        for(int j=2; j<i; j++)
        {
            if(i-j-1>=0)
            dp[i][j]=max(j-1+dp[i-j][j],j+ dp[i-j-1][j]);
        }
    }
}

int main()
{
    int i,j;
    calculate();
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);

        for(i=0; i<n; i++)
            scanf("%d",&a[i]);

        for(i=0; i<=n; i++)
        {
            val[i]=(struct node*)malloc(sizeof(struct node));
            val[i]->next=NULL;
        }

        for(i=0; i<n; i++)
            scanf("%d",&b[i]);

        cnt=0;
        for(i=0; i<n; i++)
        {
            val[a[i]]->data=a[i];
            val[a[i]]->next=val[b[i]];
        }

        for(i=0; i<=n+5; i++)
            mark[i]=0;

        maximum=1;
        std::vector<int>vec;
        int len;
        for(i=1; i<=n; i++)
        {
            if(mark[i])
                continue;
            len=dfs(i);
            if(len==1)
                cnt++;
            else
                vec.push_back(len);
        }
        int finalans=1,ans=0;

        for(i=2;i<=n;i++)
        {
            ans=0;
            for(j=0;j<vec.size();j++)
            {
                ans+=dp[vec[j]][i];
            }
            finalans=max(finalans,ans);
        }

    printf("%d\n",max(finalans,cnt));
    }
    return 0;
}
