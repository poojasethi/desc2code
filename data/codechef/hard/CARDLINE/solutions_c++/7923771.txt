#include<bits/stdc++.h>

using namespace std;
#define MAX_VAL 2005

int A[MAX_VAL]={0},B[MAX_VAL]={0};
int DP[MAX_VAL][MAX_VAL]={0};


int _MAX(int a,int b)
{
	return a>b?a:b;
}

void SOLVE_DP()
{
	/*DP(i,j) where i=length of cycle and j=length in which we have to break cycle
	Cycle can be broken into M or M+1
	*/
	for(int i=2;i<MAX_VAL;i++)
	{
		for(int j=1;j<=i;j++)
		{
				if(i-j-2>=0)
				{
					DP[i][j]=_MAX(DP[i-j-1][j]+j,DP[i-j-2][j]+j+1);
				}
				if(i-j-1>=0)
				{
					DP[i][j]=_MAX(DP[i][j],DP[i-j-1][j]+j);
				}
				
			
		}
	}
}

int main(int argc,char **argv)
{
	int T;
	SOLVE_DP();

	/*for(int i=0;i<10;i++)
	{
		for(int j=0;j<10;j++)
		{
			cout<<DP[i][j]<<" ";
		}
		cout<<endl;
	}*/
	cin>>T;
	while(T--)
	{	
		int N;

		cin>>N;
		int INDEX[MAX_VAL]={0};
		for(int i=0;i<N;i++)
		{
			cin>>A[i];
		}
		for(int j=0;j<N;j++)
		{
			cin>>B[j];
			INDEX[A[j]]=B[j];
		}

		//Detecting number of cycle with their lengths
		vector<int> cycles;
		int seen[MAX_VAL]={0};

		int max_=0;

		for(int i=0;i<N;i++)
		{
			if(seen[i+1])
				continue;
			int k=i+1,count=0;
			while(1)
			{
				if(seen[k])
					break;
				seen[k]=1;
				count++;
				k=INDEX[k];
			}
			cycles.push_back(count);
			if(count==1)max_++;
		}
		/*for(int i=0;i<cycles.size();i++)
		{
			cout<<cycles[i]<<" ";
		}
		cout<<endl;*/
		
		for(int l=1;l<=N;l++)
		{
			int tot=0;
			for(int i=0;i<cycles.size();i++)
			{

				tot+=DP[cycles[i]][l];
			}
			max_=tot>max_?tot:max_;
			//cout<<max_<<endl;
		}
		cout<<max_<<endl;

	}

	return 0;
}
