/*	Template by
	Ashwin Kumar
	IIT Delhi */
#include<algorithm>
#include<iostream>
#include<cassert>
#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<sstream>
#include<string>
#include<ctime>
#include<deque>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<vector>	
using namespace std;

#define MOD 1000000007
#define MAX 1000000000000000000LL
typedef long long LL;
typedef pair<int, int> pii;

int A[10000];
LL powers[1000001][60];

int main() {
	for (int j = 1; j < 60; j++)
		powers[1][j] = 1;
	for (int i = 2; i <= 1000000; i++) {
		powers[i][1] = i;
		for (int j = 2; j < 60; j++) {
			if (powers[i][j-1] <= MAX/i)
				powers[i][j] = powers[i][j-1]*i;
			else {
				for (int k = j; k < 60; k++)
					powers[i][k] = -1;
				break;
			}
		}
	}
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++) {
		int N, Q;
		scanf("%d %d", &N, &Q);
		LL add = 0;
		for (int i = 0; i < N; i++) {
			scanf("%d", &A[i]);
			if (A[i] < 0)
				A[i] += MOD;
		}
		for (int i = 60; i <= N; i++)
			add += A[i-1];
		add %= MOD;
		for (int i = 0; i < Q; i++) {
			LL x;
			scanf("%lld", &x);
			LL ans = ((x%MOD)*A[0])%MOD;
			for (int j = 2; j < 60; j++) {
				if (j == 2) {
					LL sqrtSave = (LL)sqrt(x);
					ans += (sqrtSave*A[1])%MOD;
				}
				else {
					LL b = 1, e = 1000000;
					while (b < e) {
						LL mid = (b+e+1)/2;
						if (powers[mid][j] > x || powers[mid][j] == -1)
							e = mid-1;
						else
							b = mid;
					}
					ans += (b*A[j-1])%MOD;
				}
			}
			ans = (ans+add)%MOD;
			printf("%lld ", ans);
		}
		printf("\n");
	}
	return 0;
}
