#include <cstdio>
#include <iostream>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <map>
#include <string>

using namespace std;

typedef long long ll;
typedef pair<int,int> ii;

#define pb push_back
#define fs first
#define sc second
#define openfile {freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);}
#define debug 0

const int MAXN = 10005;
const ll MOD = (ll)1e9 + 7, MAXC = (ll)1e18;
const int NUM = 1;
const double eps = 0.00001;

int cnt[MAXN];
ll a[MAXN], b[MAXN], f[MAXN][70];
int t, n, q;
ll res;

bool _overflow(ll x, ll y) {
	if (!y)
		return false;
	ll z = x * y;
	if (z / x != y || z / y != x) return true;
	return false;
}

ll _pow(ll a, ll b) {
	if (b == 0) return 1;
	ll res = _pow(a, b / 2);
	if (res == -1) return -1;
	if (_overflow(res, res)) return -1;
	res = res * res;
	if (b & 1) {
		if (_overflow(res, a)) return -1;
		return res * a;
	}
	else
		return res;
}

void init() {
	for (int i = 1; i <= 10000; i++) {
		f[i][0] = 1;
		for (int j = 1; j <= 63; j++) {
			if (_overflow(f[i][j-1], i)) {
				cnt[i] = j - 1;
				break;
			}
			else
				f[i][j] = f[i][j-1] * i;
		}
	}
}

// can bac y cua x
ll root(ll x, ll y) {
	if (x == 1) return 1;
	if (y == 1) return x;
	
	ll kq = (ll)(floor(exp(log(x) / y)));
	ll res = -1;
	for (ll z = kq; z <= kq+NUM; z++) {
		ll check;
		if (z <= 0)
			continue;
		else if (z == 1)
			check = 1;
		else if (z <= 10000) {
			if (y > cnt[z])
				check = -1;
			else
				check = f[z][y];
		}
		else
			check = _pow(z, y);
		if (check == -1) break;
		if (check <= x)
			res = z;
	}
	return res;
}

ll solve(ll x) {
	res = 0;
	for (int i = 1; i <= n; i++) {
		ll y = root(x, i);
		if (y == 1) {
			res = (res + b[i]) % MOD;
			if (res < 0) res += MOD;
			return res;
		}
		res = (res + (((y % MOD) * a[i]) % MOD)) % MOD;
	}

	if (res < 0) res += MOD;
	return res;
}

int main()
{
   init();

   scanf("%d", &t);
   while (t--) {
		scanf("%d%d", &n, &q);
		for (int i = 1; i <= n; i++)
			scanf("%lld", &a[i]);
		memset(b, sizeof b, 0);
		b[n] = a[n];
		for (int i = n-1; i >= 1; i--)
			b[i] = (b[i+1] + a[i]) % MOD;
		while (q--) {
			ll x;
			scanf("%lld", &x);
			if (q)
				printf("%lld ", solve(x));
			else
				printf("%lld\n", solve(x));
		}
   }

   //cout << _root(999999999999999LL, 5) << endl;
	//cout << root(1152921504606846976LL, 2) << endl;
	

   return 0;
}