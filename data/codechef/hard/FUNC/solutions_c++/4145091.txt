#include<bits/stdc++.h>

using namespace std;

#define MOD 1000000007
#define M 1000000000000000000ll

vector<long long> calc[66];
long long INF;
void precompute()
{
long long i, j;
	long long val;
	for (i = 3; i < 66; ++i) {
		calc[i].push_back(0);

	}
	for (i = 1LL; i <= 1000000LL; ++i) {
		for (j = 3, val=i*i*i; j < 66; ++j, val=val*i) {
			calc[j].push_back(val);
			if (val >= INF/i) {
				break;
			}
		}
	}


}
/*
for(int i=3;i<=65;i++)
            calc[i].push_back(0ll);

    long long int temp3=1ll;
    while(temp3<=1000000ll)
    {
        long long int sol=temp3*temp3*temp3;
        for(int i=3;i<=65;i++)
        {

            //sol=pow(temp3,i);

            calc[i].push_back(sol);

            sol=sol*temp3;
            if(sol>(INF)/temp3)
                break;

        }
        temp3++;
    }
*/
long long int findroot(int i,long long int find1)
{   int mid,root;
    if(i==1)
        return find1;
    else if(i==2)
        return floor(sqrt(find1));
    else
    {
        int first=1;
        int last=calc[i].size()-1;
        while(first<=last)
        {
            mid=first+(last-first)/2;
            if(calc[i][mid]<=find1)
            {
                root=mid;
                first=mid+1;
            }
            else
            {
                last=mid-1;
            }
//            printf("\nroot=%d mid=%d find=%lld %lld",root,mid,find1,pr_com[i][mid]);
        }

        return root;
    }

}





















int main()
{







	int t;
	int i, n, q, j;
	long long a[10004];
	long long csum[10004];
	long long ans, root, x;
	INF = 1000000001LL;
	INF = INF*INF;
	precompute();
	scanf("%d", &t);
	while (t--) {
		scanf("%d%d", &n, &q);
		for (i = 1; i <= n; i++) {
			scanf("%lld", &a[i]);
			a[i] = (MOD + a[i])%MOD;
		}
		csum[n] = a[n];
		for (i = n-1; i >= 1; --i) {
			csum[i] = (a[i] + csum[i+1])%MOD;
		}
		for (j = 0; j < q; ++j) {
			ans = 0;
			scanf("%lld", &x);
			for (i = 1; i <= n; ++i) {
				root = findroot(i, x);
				//printf("i=%d x=%lld root=%lld\n", i, x, root);
				if (root == 1LL) {
					ans = (ans + csum[i])%MOD;
					break;
				}
				root %= MOD;
				ans = (ans + (root*a[i])%MOD)%MOD;
			}
			printf("%lld ", ans);
		}
		printf("\n");
	}
	return 0;
}
