#include <cstdio>
#include <iostream>
#include<vector>
#include <cmath>
#define SIZE 10002
#define MOD 1000000007
long long int n;
long long int arr[SIZE];
long long int suffix_arr[SIZE];
using namespace std;
vector<long long int> powers[1000005];  //power[i][x] stores the value x^i
long long int MAX ;
long long int scan()
{
    long long int num=0;
    int ch = getchar_unlocked();
    while(ch<'0'||ch>'9')
        ch=getchar_unlocked();
    while(ch>='0'&&ch<='9')
    {
        num=(num<<3)+(num<<1)+ch-'0';
        ch=getchar_unlocked();
    }
    return num;
}
void print(long long int no)
{
    char num[20];
    int i=0;
    do
    {
        num[i++] = no%10 + '0';
        no/=10;
    }while(no);
    i--;
    while(i>=0)
        putchar_unlocked(num[i--]);
}
void init()
{
    long long int i;
    for(i=3;i<=1000000;i++)
    {
        powers[i].push_back(0);
        powers[i].push_back(1);
    }
    for(i=2;i<=1000000;i++)
    {
        long long int x = i*i*i;
        int pos = 3;
        while(1)
        {
            powers[pos].push_back(x);
            if(x>=(MAX/(double)i))
                break;
            pos++;
            x = x*i;
        }
    }
}
long long int root(int i,long long int x)
{
    if(i==1)
        return x;
    if(i==2)
        return (long long int)sqrt(x);
    long long int low = 0,high = powers[i].size() - 1,mid;
    long long int ans = 1;
    while(low<=high)
    {
        mid = (low+high)/2;
        if(powers[i][mid] > x)
        {
            high = mid-1;
        }
        else
        {
            ans = mid;
            low = mid+1;
        }
    }
    return ans;
}
long long int func(long long int x)
{
    long long int ans=0;
    int i;
    for(i=1;i<=n;i++)
    {
        long long int temp = root(i,x);
        if(temp == 1)
        {
            ans += suffix_arr[i];
            ans %= MOD;
            return ans;
        }
        temp = temp%MOD;
        ans = (ans + (temp*arr[i])%MOD)%MOD;
    }
    return ans;
}
int main()
{
    MAX = 1000000001;
    MAX = MAX * MAX;
    init();
    int t;
    scanf("%d",&t);
    while(t--)
    {
        long long int q;
        long long int i;
        n=scan();
        q=scan();
        for(i=1;i<=n;i++)
        {
            scanf("%lld",&arr[i]);
            arr[i] = (arr[i] + MOD)%MOD;    //IMP step as arr[i] can be -ve but moding -ve values requires special handling thus we make them +ve
        }
        suffix_arr[n] = arr[n];
        for(i=n-1;i>=1;i--)
            suffix_arr[i] = (arr[i] + suffix_arr[i+1])%MOD;
        for(i=1;i<=q;i++)
        {
            long long int x;
            x=scan();
            printf("%lld ",func(x));
        }
        printf("\n");
    }
    return 0;
}