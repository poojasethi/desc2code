#include<iostream>
#include<algorithm>
#include<cstdio>
#include<vector>
#include<cstring>
#include<string>
#include<math.h>
using namespace std;
#define L long
#define LL long long
#define ULL unsigned long long
#define D double
#define LD long double
#define MOD 1000000007
LL gcd(LL a,LL b){return (b)?gcd(b,a%b):a;}
D dum;
LL int read_LL () {
	bool minus = false;
	LL result = 0;
	char ch;
	ch = getchar_unlocked();
	while (true) {
		if (ch == '-') break;
		if (ch >= '0' && ch <= '9') break;
		ch = getchar_unlocked();
	}
	if (ch == '-') minus = true; else result = ch-'0';
	while (true) {
		ch = getchar_unlocked();
		if (ch < '0' || ch > '9') break;
		result = result*10 + (ch - '0');
	}
	if (minus)
		return -result;
	else
		return result;
}
//LL root(LL x,LL n){return exp(log(x)/n);}
//D root(LL x,LL n){return (modf(exp(log(x)/n),&dum)>=0.999999999)?dum+1:dum;}
//LL pow(LL n ,LL k){LL ans=1;while(k>0){if(k&1)ans*=n;k>>=1;n*=n;}return ans;}
//int main(){printf("%lld",(LL)(root(8,1)));return 0;}
//int main(){cout<<exp(log(8))<<endl;return 0;}
int main()
{
 ios::sync_with_stdio(false);
 LL T,n,Q,i,r,ans=0,x;
 D R;
 LL A[10005]={};
 T=read_LL();
 while(T--)
 {
  n=read_LL();
  Q=read_LL();
  for(i=1;i<=n;i++)
   A[i]=read_LL(),A[i]+=A[i-1];
  while(Q--)
  {ans=0;
   x=read_LL();
   ans=x%MOD;
   ans*=A[1],ans%=MOD;
   for(i=2;i<=n;i++)
   {
    r=floor(pow(x,1/(double)i));
	if(pow(r+1,i)<=x)
	 r++;
	if(r==1)
	 ans+=(A[n]-A[i-1]),i=n,ans%=MOD;
	else
	 ans+=(r*(A[i]-A[i-1])),ans%=MOD;
	//if(ans<0)ans+=MOD;
   }
   if(ans<0)
    ans+=MOD;
   cout<<ans%MOD<<" ";
  }
  cout<<endl;
 }
 return 0;
}