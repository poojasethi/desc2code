#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <iostream>

using namespace std;
typedef long long ll;

#define openfile freopen("input.txt","r",stdin);
#define debug 0

const ll MOD = 1000000007;

int n, q, t;
ll b[10005], a[10005], f[10005][80], cnt[10005];

bool outflow(ll x, ll y) {
    if (!y) return false;
    ll p = x*y;
    if (p/x != y || p/y != x) return true;
    return false;
}

void init() {
    for (int i = 1; i <= 10000; i++) {
		f[i][0] = 1;
		for (int j = 1; j <= 63; j++) {
			if (outflow(f[i][j-1], i)) {
				cnt[i] = j - 1;
				break;
			}
			else
				f[i][j] = f[i][j-1] * i;
		}
	}
}

ll power(ll a, ll b) {
	if (!b) return 1;
	ll res = power(a,b/2);
	if (res == -1) return -1;
	if (outflow(res, res)) return -1;
	res = res * res;
	if (b&1) {
		if (outflow(res, a)) return -1;
		return res * a;
	}
	return res;
}

ll root(ll x, ll y) {
    if (x == 1) return 1;
    if (y == 1) return x;

	ll kq = (ll)(floor(exp(log(x) / y)));
    ll res = -1;
    for (ll z = kq; z <= kq+1; z++) {
		ll check;
		if (z <= 0) continue;
		if (z == 1) check = 1;
		else if (z <= 10000) {
			if (y > cnt[z]) check = -1;
			else check = f[z][y];
		}
		else check = power(z, y);
		if (check == -1) break;
		if (check <= x)
			res = z;
	}
	return res;
}

ll solve(ll x) {
    ll res = 0;
    for (int i = 1; i <= n; ++i) {
        ll y = root(x,i);
		if (y == 1) {
			res = (res + b[i]) % MOD;
			if (res < 0) res += MOD;
            return res;
		}
		res = (res + (((y % MOD) * a[i]) % MOD)) % MOD;
    }
    if (res < 0) res += MOD;
    return res;
}

int main() {
    if (debug) openfile;
    init();
    scanf("%d",&t);
    while (t--) {
        scanf("%d%d",&n,&q);
        for (int i = 1; i <= n; ++i) scanf("%lld",&a[i]);
        b[n+1] = 0;
        for (int i = n; i >= 1; --i)
            b[i] = (b[i+1]+a[i])%MOD;
        while (q--) {
            ll x;
            scanf("%lld",&x);
            if (q) printf("%lld ",solve(x));
            else printf("%lld\n",solve(x));
        }
    }
    return 0;
}
