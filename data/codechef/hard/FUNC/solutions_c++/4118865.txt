#include <vector>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stack>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <string>
#include <ctime>
using namespace std;
#define LL long long
#define MAX 10001
#define MOD 1000000007
LL A[MAX];
LL csum[MAX];
vector<LL> power[MAX];
LL MAX2;

void genPowers()//genrating pow(a,b)a<=10000 ,b<=1000000 where a^b<=x
{
	for(LL i=3;i<MAX;i++)//genearating power(i,0) or power(i,1) and power(i,2)
	{
		power[i].push_back(0);
		power[i].push_back(1);
	}
	for(LL i=2;i<1000001LL;i++)
	{
		LL p=i*i*i;	//pow(i,3)
		for(int j=3;j<MAX;j++)
		{
			power[j].push_back(p);	//store power(i,j) at power[j][i]
			if(p >= MAX2 / double(i))
				break;
			p=p*i;//pow(i,j+1)
		}
	}

}

LL rooti(int i,LL x)
{
	LL root=0;
	if(i == 1)
		return x;
	else if(i == 2)
		return (LL)sqrt(x);
	else
	{
		LL l,h,mid;
		l=0;h=power[i].size()-1;
		
		while(l <= h)
		{
			mid=(l+h)/2LL;
			if(power[i][mid] > x)
				h=mid-1;
			else
			{
				root=mid;
				l=mid+1;
			}
		}
	}
	return root;
}

LL val(LL x,LL A[],int n)
{
	LL ans=0,root;
	for(int i=1;i<=n;i++)
	{
		root=rooti(i,x);
		if(root == 1)
		{
			ans=(ans+(csum[n]-csum[i-1])%MOD)%MOD;
			break;
		}
		root=root%MOD;
		ans+=(A[i]*root)%MOD;
		//cout<<"root  "<<root<<"  MOD = "<<(A[i]*root)%MOD<<endl;
		ans=ans%MOD;
		
	}
	return ans;
}

int main()
{
	int t,n,q,i;
	LL x;
	MAX2=1000000001;
	MAX2=MAX2*MAX2;
	genPowers();
	/*for(int i=0;i<=10;i++)
	{
		int s=10;
		if(power[i].size() < 10)
			s=power[i].size();
		for(int j=0;j<s;j++)
			cout<<power[i][j]<<"	";
		cout<<endl;
	}*/
	cin>>t;
	while(t--)
	{
		cin>>n>>q;
		csum[0]=0;
		for(i=1;i<=n;i++)
		{
			cin>>A[i];
			A[i] = (A[i]+MOD)%MOD;//make all A[i] +ve
			csum[i]=csum[i-1]+A[i];
		}
		while(q--)
		{
			cin>>x;
			cout<<val(x,A,n)<<" ";
		}
		cout<<endl;
	}
	return 0;
}