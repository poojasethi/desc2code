#include <iostream>
#include <cstdio>
#include <cstring>
#include <set>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

typedef long long LL;
LL A[10005], sum[10005];
int N, Q;
const int MOD = 1000000007;
vector<LL> powtable[64];

inline LL mod(LL x)
{
    return (x % MOD + MOD) % MOD;
}

inline LL nth_root(LL x, int n)
{
    vector<LL> &v = powtable[n];
    vector<LL>::iterator p = lower_bound(v.begin(), v.end(), x);
    if(*p == x)
        return p - v.begin() + 1;
    else
        return p - v.begin();
}

void solve(LL x)
{
    LL root[64] = {0, x , (LL)sqrt(x + 0.5)};
    LL ans = 0;
    int i, j;
    if((root[2]+1)*(root[2]+1) <= x) root[2]++;
    else if((root[2])*(root[2]) > x) root[2]--;
    for(i = 3; i <= N; i++)
    {
        root[i] = nth_root(x, i);
        if(root[i] == 1)
        {
            break;
        }
    }
    //printf("\n#");
    for(j = 1; j <= N; j++)
    {
        //printf("%lld ",root[j]);
        if(root[j] == 1)
        {
            ans = mod(ans + sum[N] - sum[j - 1]);
            break;
        }
        else
            ans = mod(ans + root[j]%MOD * A[j]);
    }
    printf("%d", (int)ans);
}

void pre_calc()
{
    for(LL i = 1; i <= 1000000; i++)
    {
        LL p = i * i ;
        LL j;
        for(j = 3; j < 64 && p <= (LL)1000000000 * 1000000000 / i ; j++)
        {
            p *= i;
            powtable[j].push_back(p);
        }
    }
    for(int i = 3; i < 64; i++)
        powtable[i].push_back((LL)1000000000 * 1000000000 + 1);
    for(int i = 3; i < 64; i++)
        sort(powtable[i].begin(), powtable[i].end());
}

int main()
{
#ifndef ONLINE_JUDGE
    //freopen("d:\\test.txt", "r", stdin);
    //freopen("d:\\a.txt","w",stdout);
#endif
    pre_calc();
    int i, T;
    scanf("%d", &T);
    while(T--)
    {
        scanf("%d%d", &N, &Q);
        for(i = 1; i <= N; i++)
        {
            cin >> A[i];
            sum[i] = sum[i - 1] + A[i];
        }
        for(i = 1; i <= Q; i++)
        {
            LL x;
            cin >> x;
            solve(x);
            putchar(i == Q ? '\n' : ' ');
            //puts("");
        }
    }

    return 0;
}
