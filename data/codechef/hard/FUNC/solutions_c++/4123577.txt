#include<stdio.h>
#include<cstring>
#include<ctype.h>
#include<stdlib.h>
#include<math.h>
#define MAXSIZE 100002
#define MODVALUE 1000000007LL
#define INT_MAX 1000000000000000000LL

#define MAX(a,b) \
({ __typeof__ (a) _a = (a); \
__typeof__ (b) _b = (b); \
_a > _b ? _a : _b; })

#define MIN(a,b) \
({ __typeof__ (a) _a = (a); \
__typeof__ (b) _b = (b); \
_a < _b ? _a : _b; })

inline void fastRead(long long int *a)
{
	register char c=0;
	while (c<33) c=getchar_unlocked();
	*a=0;
	while (c>33)
	{
		*a=*a*10+c-'0';
		c=getchar_unlocked();
	}
}
inline void fastWrite(long long int a)
{
	char snum[20];
	int i=0;
	do
	{
		snum[i++]=a%10+48;
		a=a/10;
	}while(a!=0);
	i=i-1;
	while(i>=0)
		putchar_unlocked(snum[i--]);
	putchar_unlocked('\n');
}

long long int powers[1000001][61]={0};
long long int root(int i,long long int x)
{
	//bsearch impl.
	long long int low=1,high=(x>1000000LL?1000000LL:x),mid=0;
	while(low<=high)
	{
		 mid=(low+high)/2;
		long long int power=powers[mid][i];
		if(power==x)
			return mid;
		if(power>x || power<0)
			high=mid-1;
		else
			low=mid+1;

	}

	return high;


}
void precompute()
{
	for(int base=1;base<=1000000;base++)
	{
		long long int ans=(long long int)base;
		powers[base][0]=1;
		powers[base][1]=base;
		for(int power=2;power<=60;power++)
		{
			if(ans==-1)
				powers[base][power]=-1;
			else
			{
				ans*=base;

	//			if(ans>MODVALUE)
	//				ans-=MODVALUE;

				powers[base][power]=ans;
				if((INT_MAX/ans)<base)
					ans=-1;
			}

		}
	}
}
int main()
{
	precompute();
//	printf("%lld",root(8,10000));
//	return 0;

	int T;
	scanf("%d",&T);
	while(T--)
	{
		int N,Q;
		scanf("%d %d",&N,&Q);
		long long int A[10002];
		long long int cumul[10002]={0};
		for(int i=1;i<=N;i++)
		{
			long long int num;
			//fastRead(&num);
			scanf("%lld",&num);
			if(num<0)
				num+=MODVALUE;

			A[i]=num;
			cumul[i]=cumul[i-1]+num;
			if(cumul[i]>MODVALUE)
				cumul[i]%=MODVALUE;
		}
		for(int i=1;i<=Q;i++)
		{
			long long int X;
			fastRead(&X);
			//scanf("%lld",&X);
			long long int ans=(X%MODVALUE)*A[1];
			if(ans>MODVALUE)
				ans%=MODVALUE;
			int maxlimit=(int)floor(log(X)/log(2));
			if(maxlimit<N)
			{
				ans+=(cumul[N]-cumul[maxlimit]);
				if(ans>MODVALUE)
					ans%=MODVALUE;
			}
			else
				maxlimit=N;

			if(maxlimit>=2)
			{
				ans+=(A[2]*(long long int)sqrt(X));
				if(ans>MODVALUE)
					ans%=MODVALUE;

			}

			for(int j=3;j<=maxlimit;j++)
			{
				long long int value=root(j,X);
				ans+=(value*A[j]);
				if(ans>MODVALUE)
					ans%=MODVALUE;
			}
			if(ans<0)
				ans+=MODVALUE;

			printf("%lld",ans);
			if(i==Q)
				printf("\n");
			else
				printf(" ");
		}

	}
}
