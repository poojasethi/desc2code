#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector< II > VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int ll;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
/*template <typename Arg1>
void __f(const char * name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1,',');cerr.write(names,comma - names) << " : " << arg1<<" | ";__f(comma+1,args...);
}*/
#else
#define trace(...)
#endif
ll max(ll p,ll q)
{
    return (p>q)?p:q;
}
ll min(ll p,ll q)
{
    return (p<q)?p:q;
}

ll x;

ll findpow(ll num,ll p)
{
    if(p==1)
    {
        return num;
    }
    if(p%2==0)
    {
        ll temp=findpow(num,p/2);
        return temp*temp;
    }
    else if(p%2==1)
    {
        ll temp=findpow(num,(p-1)/2);
        return temp*temp*num;
    }
}

ll bs(ll st,ll end,ll p)
{
    ll mid=st+(end-st+1)/2,ans=1,i;
    ans=findpow(mid,p);
    //cout << st << " " << end << " " << mid << " " << ans << endl;
    if(st==end)
    {
        return mid;
    }
    if(ans==x)
    {
        return mid;
    }
    else if(ans>x)
    {
        return bs(st,mid-1,p);
    }
    else if(ans<x)
    {
        return bs(mid,end,p);
    }
}

ll findroot(ll num,ll p)
{
    double tmp=pow(num,1.0/p);
    ll low=tmp;
    ll up=tmp+0.5;
    if(low==up)
    {
        return low;
    }
    else if(pow(up,p)<=x)
    {
        return up;
    }
    else
    {
        return low;
    }
}

ll sum[10005],a[10005],ans1[15005];
int main()
{
    ll t,mod=1e9+7,i,ans,n,temp1,q,temp,j;
    sll(t);
//    lldout(mod);
    while(t--)
    {
        sll(n);
        sll(q);
        sum[0]=0;
        for(i=1;i<=n;i++)
        {
            sll(a[i]);
            sum[i]=(sum[i-1]+a[i]);
            if(sum[i]<=0)
            {
                sum[i]=(sum[i]+1000000000*mod)%mod;
            }
            else if(sum[i]>=mod)
            {
                sum[i]=sum[i]%mod;
            }
        }
        for(j=0;j<q;j++)
        {
            sll(x);
            ans=(x%mod*(a[1]+mod)%mod)%mod;
            temp1=x;
            for(i=2;i<=n;i++)
            {
              //  lldout(ans);
                temp=findroot(x,i);
                temp1=temp;
                ans=( ans + (temp%mod*(a[i]+mod)%mod)%mod + mod)%mod;
                if(temp==1)
                {
                    ans=(ans+( sum[n] - sum[i] )%mod + mod)%mod;
                    break;
                }
            }
            ans=ans%mod;
            ans1[j]=ans;
            cout << ans << " ";
        }
        cout << endl;
    }
    return 0;
}

