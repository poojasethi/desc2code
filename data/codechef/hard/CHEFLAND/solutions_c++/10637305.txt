
#include <bits/stdc++.h>

#define set(p) memset(p,-1,sizeof(p))
#define clr(p) memset(p,0,sizeof(p))
#define ll long long int
#define llu unsigned long long int
#define si(a) scanf("%lld",&a)
#define rep(i,a,n) for(i=(a);i<(n);i++)
#define pii pair<int,int>
#define pb(x) push_back(x)
#define v(x) vector<x>

using namespace std;

ll gcd(ll a,ll b)
{
 ll r, i;
  while(b!=0){
    r = a % b;
    a = b;
    b = r;
  }
  return a;
}

const int MaxN = 5e5 + 10;
const int MOD = 1e9 + 7;
const int INF = 1e9;

int n, m, comp, cnt[MaxN];
int fup[MaxN], tin[MaxN], br[MaxN];
vector < pair < int, int > > graph[MaxN];
vector < int > ngraph[MaxN];
int timer, was[MaxN];

void dfs(int v, int pid)
{
  tin[v] = fup[v] = ++timer;
  for (int i = 0; i < (int)graph[v].size(); ++i) {
    int to = graph[v][i].first, id = graph[v][i].second;
    if (id == pid) {
      continue;
    }
    if (!tin[to]) {
      dfs(to, id);
      fup[v] = min(fup[v], fup[to]);
      if (tin[v] < fup[to]) {
        br[id] = true;
      }
    } else {
      fup[v] = min(fup[v], tin[to]);
    }
  }
}

void go(int v, int val)
{
  was[v] = val;
  cnt[val]++;
  for (int i = 0; i < (int)graph[v].size(); ++i) {
    int to = graph[v][i].first, id = graph[v][i].second;
    if (!br[id] && !was[to]) {
      go(to, val);
    }
  }
}

int main()
{
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= m; ++i)
    {
        int x, y;
        scanf("%d%d", &x, &y);
        graph[x].push_back(make_pair(y, i));
        graph[y].push_back(make_pair(x, i));
    }

    dfs(1, -1);

    for (int i = 1; i <= n; ++i)
    {
        if (!tin[i])
        {
          cout << "NO\n";
          exit(0);
        }
    }

    for (int i = 1; i <= n; ++i)
    {
        if (was[i] != 0)
        {
            continue;
        }
        go(i, ++comp);
    }

    for (int i = 1; i <= n; ++i)
    {
        for (int j = 0; j < (int)graph[i].size(); ++j)
        {
            int v = i, to = graph[i][j].first, id = graph[i][j].second;

            if (br[id] && was[v] != was[to])
            {
                ngraph[was[v]].push_back(was[to]);
            }
        }
    }

    for (int i = 1; i <= comp; ++i)
    {
        sort(ngraph[i].begin(), ngraph[i].end());
        ngraph[i].resize(unique(ngraph[i].begin(), ngraph[i].end()) - ngraph[i].begin());
    }

    int mx = 0;
    for (int i = 1; i <= comp; ++i)
    {
        mx = max(mx, (int)ngraph[i].size());
    }

    cout << (mx <= 2 ? "YES" : "NO") << '\n';
    return 0;
}
