
#include <bits/stdc++.h>

#define set(p) memset(p,-1,sizeof(p))
#define clr(p) memset(p,0,sizeof(p))
#define ll long long int
#define llu unsigned long long int
#define si(a) scanf("%lld",&a)
#define rep(i,a,n) for(i=(a);i<(n);i++)
#define pii pair<int,int>
#define pb(x) push_back(x)
#define v(x) vector<x>

using namespace std;

ll gcd(ll a,ll b)
{
 ll r, i;
  while(b!=0){
    r = a % b;
    a = b;
    b = r;
  }
  return a;
}


vector<int> adj[500500];
vector<int> ind[500500];
vector<int> adj2[500500];
int n,m;
int a,b,cc;
int t;

int ra[500500],r=1;
int lw[500500];
int mn_comp[500500];
int comp[500500],c=1;
bool bri[500500];
bool vis[500500];
set<pair<int,int> > edges;
int deg[500500];
bool vis2[500500];
void reset(){
    r=1;
    c=1;
	edges.clear();
    for(int i=1;i<=n;i++){
        adj[i].clear();
        ind[i].clear();
        adj2[i].clear();
        mn_comp[i]=100000000;
        vis2[i]=false;
        ra[i]=0;
        lw[i]=0;
		deg[i]=0;
        comp[i]=0;
        vis[i]=false;
    }
    for(int i=0;i<=m;i++){
        bri[i]=false;
    }
}

void dfs(int nd,int p){
    ra[nd]=r;
    lw[nd]=r;
    r++;
	int cnt=0;
    for(int i=0;i<adj[nd].size();i++){
        int ch=adj[nd][i];
        int in=ind[nd][i];
        if(ch==p){
			if(cnt==0){
				cnt++;
				continue;
			}
		}
        if(ra[ch]!=0){
            lw[nd]=min(lw[nd],ra[ch]);
        } else {
            dfs(ch,nd);
            if(lw[ch]>ra[nd]){
                bri[in]=true;
            }
            lw[nd]=min(lw[nd],lw[ch]);
        }
    }
}
void dfs2(int nd){
    comp[nd]=c;
    mn_comp[c]=min(mn_comp[c],nd);
    vis[nd]=true;
    for(int i=0;i<adj[nd].size();i++){
        int ch=adj[nd][i];
        int in=ind[nd][i];
        if(vis[ch])continue;
        if(bri[in])continue;
        dfs2(ch);
    }
}


int main(){
	//freopen("input12.txt","r",stdin);
	//freopen("out12.txt","w",stdout);
    //scanf("%d",&t);
	t=1;
    while(t--){
        scanf("%d %d",&n,&m);
        reset();
        for(int i=0;i<m;i++){
            scanf("%d %d",&a,&b);
            adj[a].push_back(b);
            adj[b].push_back(a);
            ind[a].push_back(i);
            ind[b].push_back(i);

        }
        dfs(n,n);
        for(int i=1;i<=n;i++){
            if(!vis[i]){
                dfs2(i);
                c++;
            }
        }
        c--;
        for(int i=1;i<=n;i++){
            for(int j=0;j<adj[i].size();j++){
                int ch=adj[i][j];
                int in=ind[i][j];
                if(!bri[in])continue;
					// note edges might be repeated
				if(!edges.count(make_pair(comp[i],comp[ch]))){
					deg[comp[i]]++;
					deg[comp[ch]]++;
					edges.insert(make_pair(comp[i],comp[ch]));
					edges.insert(make_pair(comp[ch],comp[i]));
				}
                adj2[comp[i]].push_back(comp[ch]);
            }
        }
		bool ok=true;
		for(int i=1;i<=c;i++){
			if(deg[i]>2){
				ok=false;
				break;
			}
		}
		if(ok){
			cout<<"YES"<<endl;
		} else {
			cout<<"NO"<<endl;
		}
    }
}
