#include <stdio.h>
#include <vector>
#include <stack>
#include <algorithm>
using namespace std;

typedef pair <int, int> pii;
const int MAX = 1e5 + 1;
int n, m, u, v, low[MAX], num[MAX], cnt, k, com[MAX], dad[MAX], deg[MAX];
bool fr[MAX << 1];
vector <pii> adj[MAX];
vector <int> bridge;
stack <int> st;

void visit(const int& u, const int& par){
    st.push(u);
    low[u] = num[u] = ++cnt;
    for (int i = 0; i < adj[u].size(); ++i)
    if (!fr[adj[u][i].second]){
        fr[adj[u][i].second] = true;

        if (num[adj[u][i].first])
            low[u] = min(low[u], num[adj[u][i].first]);
        else{
            visit(adj[u][i].first, u);
            low[u] = min(low[u], low[adj[u][i].first]);
        }
    }

    if (low[u] >= num[u]){
        ++k;

        bridge.push_back(u);
        if (u != 1){
            dad[u] = par;
            deg[k] = 1;
        }

        do{
            com[v = st.top()] = k;
            st.pop();
        } while (v != u);
    }
}

int main(){
    //freopen("in.txt", "r", stdin);
    scanf("%d %d", &n, &m);
    for (int i = 1; i <= m; ++i){
        scanf("%d %d", &u, &v);
        adj[u].push_back(pii(v, i));
        adj[v].push_back(pii(u, i));
    }

    visit(1, 0);
    for (int i = 0; i < bridge.size(); ++i)
        ++deg[com[dad[bridge[i]]]];

    bool check = true;
    for (int i = 1; i <= k; ++i)
    if (deg[i] > 2){
        check = false;
        break;
    }

    printf(check ? "YES" : "NO");

    return 0;
}
