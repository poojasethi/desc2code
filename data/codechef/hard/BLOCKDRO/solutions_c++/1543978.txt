#include <stdlib.h>
#include <iostream>

#define IND(x,y) ((x)*m_M+(y))
#define GIND(x,y,z) (((x)*m_M+(y))*8+(z))

using namespace std;

struct IndexParam
{
	int ind;
	int length;
};

class PoolSolver
{
private:
	char m_N;
	char m_M;
	char* m_Islands;
	
	char m_SX , m_SY;
	char m_FX , m_FY;



	char m_NextSteps[16];

	char m_CurrentX;
	char m_CurrentY;




	int* m_Results;

	IndexParam* m_IndexParams;

	int m_NumIndexParams;

	int* m_NodeIndex;


public:
	

	PoolSolver(char n , char m , char* islands , char sx , char sy , char fx , char fy)
	{
		
		//{-2,0 , -1,0 , 1,0 , 2,0 , 0,-2 , 0,-1 , 0,1 , 0,2};
		m_NextSteps[0] = -2;
		m_NextSteps[1] = 0;
		m_NextSteps[2] = -1;
		m_NextSteps[3] = -0;
		m_NextSteps[4] = 1;
		m_NextSteps[5] = 0;
		m_NextSteps[6] = 2;
		m_NextSteps[7] = 0;
		m_NextSteps[8] = 0;
		m_NextSteps[9] = -2;
		m_NextSteps[10] = 0;
		m_NextSteps[11] = -1;
		m_NextSteps[12] = 0;
		m_NextSteps[13] = 1;
		m_NextSteps[14] = 0;
		m_NextSteps[15] = 2;



		m_N = n;
		m_M = m;
		m_SX = sx;
		m_SY = sy;
		m_FX = fx;
		m_FY = fy;

		m_Islands = new char[m_N * m_M];

		for(char i = 0 ; i < m_N * m_M ; i++)
			m_Islands[i] = islands[i];



	}




	unsigned int Solve()
	{



		int NumNonZeroNodes = 0;

		int num_states = 1;

		

		for(int x = 0 ; x < m_N ; x++)
			for(int y = 0 ; y < m_M ; y++)
			{

				num_states = num_states * (this->m_Islands[IND(x,y)] + 1);

				if(this->m_Islands[IND(x,y)] != 0)
					NumNonZeroNodes++;

				
			}

			m_NodeIndex = new int[m_N * m_M];

		int index_index = 0;
		
		m_NumIndexParams = NumNonZeroNodes + 1;
		m_IndexParams = new IndexParam[m_NumIndexParams];

		for(int x = 0 ; x < m_N ; x++)
			for(int y = 0 ; y < m_M ; y++)
			{

				if(this->m_Islands[IND(x,y)] != 0)
				{
					m_IndexParams[index_index].ind = IND(x,y);
					
					if(index_index != 0)
						m_IndexParams[index_index-1].length = this->m_Islands[IND(x,y)] + 1;

					m_NodeIndex[IND(x,y)] = index_index;

					index_index++;
				}

				
			}

		m_IndexParams[index_index-1].length = NumNonZeroNodes;


		num_states = num_states * NumNonZeroNodes;

		m_Results = new int[num_states];

		for(int i = 0 ; i < num_states ; i++)
			m_Results[i] = -1;

		m_CurrentX = m_SX;
		m_CurrentY = m_SY;

		
		unsigned int result = SolveSUB();


		delete[] m_Results;
		
		delete[] m_IndexParams;

		delete[] m_NodeIndex;
		return result;
	}

	int GetIndex()
	{
		int res =  m_Islands[ this->m_IndexParams[0].ind];
		int i = 1;
		for(; i < m_NumIndexParams - 1 ; i++)
		{
			int len = this->m_IndexParams[i-1].length;
			int v = m_Islands[ this->m_IndexParams[i].ind];

			res = res * len + v;
		}

		res = res * this->m_IndexParams[i-1].length  + m_NodeIndex[IND(m_CurrentX , m_CurrentY)];

		return res;
	}
	


	bool IsSolved()
	{
		if(m_CurrentX != m_FX)
			return false;
		if(m_CurrentY != m_FY)
			return false;

		for(int x = 0 ; x < m_N ; x++)
		{
			for(int y = 0 ; y < m_M ; y++)
			{
				if(x == m_FX && y == m_FY)
				{
					if(m_Islands[IND(x,y)] != 1)
						return false;
				}
				else
				{
					if(m_Islands[IND(x,y)] != 0)
						return false;
				}

			}

		}

		return true;
	}

	unsigned int SolveSUB()
	{
		int index = GetIndex();

		if(m_Results[index] != -1)
			return m_Results[index];

		unsigned int possible_paths = 0;

		for(int i = 0 ; i < 8 ; i++)
		{
			char new_x = m_CurrentX + m_NextSteps[2 * i];
			char new_y = m_CurrentY + m_NextSteps[2 * i + 1];

			if(new_x < 0 || new_x >= m_N)
				continue;
			if(new_y < 0 || new_y >= m_M)
				continue;

			
			char* dest_island = &(m_Islands[IND(new_x,new_y)]);
			

			if((*dest_island) == 0)
				continue;

			char ind = IND(m_CurrentX,m_CurrentY);

			char* src_island = &(m_Islands[ind]);

			//jump



			(*src_island)--;
			
			
	

			

			char prevX = m_CurrentX;
			char prevY = m_CurrentY;

			m_CurrentX = new_x;
			m_CurrentY = new_y;




			if(IsSolved())
			{
				possible_paths++;


			}
			else
			{

					possible_paths+= SolveSUB();
					

			}


			m_CurrentX = prevX;
			m_CurrentY = prevY;

			//undo jump
			(*src_island)++;
			
			


		}

		
		m_Results[index] = possible_paths;

		return possible_paths;
	}

	

};


int main()
{

	int i_num_cases;

	char num_cases;

	cin>>i_num_cases;

	
	num_cases = i_num_cases;

	for(int i = 0 ; i < num_cases ; i++)
	{

		char N;
		char M;

		int iN;
		int iM;

		cin>>iN;
		cin>>iM;

		N = iN;
		M = iM;

		int isx , isy , ifx , ify;

		char sx , sy , fx , fy;

		cin>>isx;
		cin>>isy;
		cin>>ifx;
		cin>>ify;

		sx = isx;
		sy = isy;
		fx = ifx;
		fy = ify;


		sx--;
		sy--;
		fx--;
		fy--;

		char* islands = new char[N * M];

		for(int j = 0 ; j < N * M ; j++)
		{
			int island;
			cin>>island;

			islands[j] = island;
		}

		PoolSolver solver(N , M , islands , sx , sy , fx ,fy);


		unsigned int total_ways = solver.Solve();


		delete[] islands;

		cout<<total_ways<<endl;
	}

	

	return 0;
}