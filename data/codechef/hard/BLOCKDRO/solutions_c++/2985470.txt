#include <iostream>
#include <stdlib.h>
#include <string.h>
using namespace std;
 
int xmax, ymax;
int f;
int num_isles; // num above the water.
int jumps, goal_jumps;
 
struct Isle 
{
  int val;    // height
  int oval;   // original height
  int id;     // island unique ID
  Isle* n[8]; // neighbors
  int num_n;
  bool finish;
} map[64]; 
 
 
// Thanks yacoubmassad.
long * results;
Isle* isles[26]; // that started above the water only.
long & getResults(int isle_id)
{
  int result_offset = isles[0]->val;
  for (int i = 1; i < num_isles; i++)
  {
    result_offset = result_offset*(isles[i]->oval+1) + isles[i]->val;
  }
  result_offset = result_offset*(num_isles+1) + isle_id;
  return results[result_offset];
}
 
//
// Print function for debugging.
//
void p( Isle * isle )
{
  cout << jumps << "j " 
       << isle->val << "v "
       << isle->num_n << "n "
       << isle->finish << "f " 
       << (isle - map) << "c "
       << "[";
   for (int i = 0 ; i < isle->num_n; i++ )
       cout << ( isle->n[i] - map ) << " ";
   cout << "]" << endl ; 
}
 
//
// jump!
//
long go( Isle *isle)
{
  if ( jumps == goal_jumps )
  {
    if (isle->finish && isle->val == 1 ) return 1; // Win
    else return 0;
  } 
  if (isle->finish && isle->val == 1) return 0; // Fail.
    
  long &r = getResults(isle->id);
  //cout << "Using results index: " << (&r-results) << endl;
  if (r) return r-1;
 
  --(isle->val); ++jumps;
  long num_wins = 0;
  for (int i = 0 ; i < isle->num_n ; i++)
  {
    if (isle->n[i]->val) num_wins += go(isle->n[i]); 
  }
  ++(isle->val); --jumps; // Reverse jump
  r = num_wins+1; 
  return num_wins;
}
 
#define ADD(Q) if ((Q)->val) isle->n[isle->num_n++] = Q
 
void addNeighbors()
{
  int x = 0, y =0;
  Isle * isle;
  for ( ; x < xmax ; x ++ )
  {
    isle = & map[x * 8];
    for ( y = 0; y < ymax ; y ++)
    {
      isle->num_n = 0;
      if (x - 1 >= 0) 
      { ADD(isle - 8); if (x - 2 >= 0) ADD(isle - 16); }
      if (x + 1 < xmax ) 
      { ADD(isle + 8); if (x + 2 < xmax) ADD(isle + 16); }
      if (y - 1 >= 0) 
      { ADD(isle - 1); if (y - 2 >= 0) ADD(isle - 2); }
      if (y + 1 < ymax ) 
      { ADD(isle + 1); if (y + 2 < ymax) ADD(isle + 2); }
      ++isle;
    }
  }
}
 
 
int main()
{
  int num_pools,i,xi,yi,sx,sy,fx,fy;
  Isle* isle = map;
  results = NULL;
  cin >> num_pools;
 
  for (i = 0 ; i < num_pools; i ++)
  {
    cin >> xmax >> ymax;
    cin >> sx >> sy;
    cin >> fx >> fy;
 
    goal_jumps = -1;
    num_isles = 0;
    unsigned long num_pool_states = 1;
    for ( xi = 0 ; xi < xmax ; xi ++ )
    {
      isle = & map[xi * 8];
      for ( yi = 0 ; yi < ymax ; yi ++)
      {
        isle->finish = false;
        cin >> isle->val; 
        if ( isle->val )
        {
          isle->oval = isle->val;
          goal_jumps += isle->val;
          num_pool_states *= (isle->val+1);
          isles[num_isles] = isle;
          isle->id = num_isles;
          num_isles++;
        }
        isle++;
      }
    }
   num_pool_states *= (num_isles+1);
   results = (long*)realloc(results,num_pool_states*sizeof(long));
   if ( ! results ) {cout << "Fail Fast." << endl; return 1; }
   memset( results, 0, num_pool_states*sizeof(long));
   //cout << "num states: " << num_pool_states << endl;
   --sx; --sy; --fx; --fy;
   map[fx * 8 + fy].finish = true;
   addNeighbors();
 
   int wins = go(map+(sx*8 + sy));
   cout << wins << endl;
  }
 
  free(results);
  return 0;
}
 