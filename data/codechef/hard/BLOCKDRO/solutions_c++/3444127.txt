#include <iostream>
#include <map>
 
using namespace std;
 
const int dx[] = {0, 0, 0, 0, -2, -1, 1, 2, 0};
const int dy[] = {-2, -1, 1, 2, 0, 0, 0, 0, 0};
 
int n, m, h[10][10], E[10][10];
int fx, fy, sx, sy, L;
int mark[8][8], tt;
int X[10][10][10], Y[10][10][10], size[10][10];
 
map<int, long long> T[8][8];
 
bool out(int x, int y) {
	return x < 0 || y < 0 || x >= n || y >= m;	
}
 
bool invalid(int nnx, int nny, int nx, int ny) {
	int i, j, x, y, d, s, dd;
	
	for (dd = 0; dd <= size[nnx][nny]; dd++) {
		i = X[nnx][nny][dd], j = Y[nnx][nny][dd];
		if (!h[i][j]) continue;
		s = (i == nx && j == ny);
		for (d = 0; d < size[i][j]; d++)
			s += h[X[i][j][d]][Y[i][j][d]];
		
		if (i == fx && j == fy) {
			if (s < h[i][j]) return true;
		} else if (s <= h[i][j]) return true;
	}
	return false;
}
 
long long find(int x, int y, int S) {
	if (x == fx && y == fy && S == E[x][y]) return 1LL;
	if (!h[fx][fy]) return 0LL;
	if (T[x][y].count(S)) return T[x][y][S];
	
	int nx, ny, d(0);
	long long rlt = 0LL;
	
	h[x][y]--;
	for (d = 0; d < size[x][y]; d++) {
		nx = X[x][y][d];
		ny = Y[x][y][d];
		
		if (!h[nx][ny] || invalid(x, y, nx, ny)) continue;
		rlt += find(nx, ny, S - E[x][y]);
	}
	h[x][y]++;
	return T[x][y][S] = rlt;
}
 
void makeCon() {
	int i, j, d, x, y;
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++) {
			size[i][j] = 0;
			for (d = 0; d < 8; d++) {
				x = i + dx[d];
				y = j + dy[d];
				if (out(x, y) || !h[x][y]) continue;
				X[i][j][size[i][j]] = x;
				Y[i][j][size[i][j]] = y;
				size[i][j]++;
			}
			X[i][j][size[i][j]] = i;
			Y[i][j][size[i][j]] = j;
		}
}
 
main() {
//	freopen("in.txt", "r", stdin);
//	freopen("out.txt", "w", stdout);
 
	int t, i, j, k, S;
	bool flag;
	
	for (scanf("%d",&t); t--; ) {
		scanf("%d%d", &n, &m);
		scanf("%d%d%d%d", &sx, &sy, &fx, &fy);
		
		sx--, sy--, fx--, fy--;
		k = 1; S = 0; 
		for (i = 0; i < n; i++)
			for (j = 0; j < m; j++) {
				scanf("%d", h[i] + j);
				E[i][j] = k;
				k *= h[i][j] + 1;
				S += E[i][j] * h[i][j];
			}
        
        makeCon();
		 
		cout << find(sx, sy, S) << endl;
		
		for (i = 0; i < n; i++)
			for (j = 0; j < m; j++) T[i][j].clear();
	}
}