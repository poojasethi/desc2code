#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz(a) (int)a.size()
#define all(c) c.begin(), c.end()
#define fill(a, v) memset(a, v, sizeof(a))

#define gl(x) cin >> x
#define gi(x) scanf("%d", &x)
#define pls(x) cout << x << " "
#define pln(x) cout << x << endl
#define pis(x) printf("%d ", x)
#define pin(x) printf("%d\n", x)
#define pnl printf("\n")
#define dbn cerr << endl
#define dbs(x) cerr << x << " "
#define dbg(x) cerr << #x << " : " << x << " "

#define rep(i, n) for(int i = 0; i < (n); ++i)
#define forn(i, a, b) for(int i = (a); i < (b); ++i)
#define ford(i, a, b) for(int i = (a); i >= (b); --i)
#define fore(i, a, b) forn(i, a, b + 1)
#define foreach(c, it) for(__typeof(c.begin()) it = c.begin(); it != c.end(); ++it)

int good[] = {
    1,
    4,
    27, 
    256, 
    3125, 
    46656 
};

const int N = 100100;

int dp[N];

int grundy(int n) {
    if(n == 0) {
        return 0;
    }
    if(dp[n] != -1) return dp[n];

    set <int> s;
    rep(i, 6) if(n >= good[i]) s.insert(grundy(n - good[i]));
    int & ret = dp[n] = 0;
    while(s.count(ret)) ++ret;
    return ret;
}

int main() {
    fill(dp, -1);
    int T; gi(T);
    rep(tt, T) {
        int n; gi(n);
        int canWin = 0;
        rep(i, n) {
            int x; gi(x);
            canWin ^= grundy(x);
        }
        puts(canWin ? "Little Chef" : "Head Chef");
    }
    return 0;
}