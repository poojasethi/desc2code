/*  Template by
    Ashwin Kumar
    IIT Delhi */
#include<algorithm>     //min(), max(), reverse(), sort(), next_permutation(), prev_permutation(), swap()
#include<iostream>
#include<cassert>       //assert()
#include<cmath>         //cos(in radians), sin(), tan(), acos(), asin(), atan(), modf(break into frac and inte parts)
                        //log(), log10(), log2(), pow(), sqrt(), cbrt(), ceil(), floor(), fmod(), abs()  
#include<cstdio>        //fclose(), fopen(), fprintf(), fscanf(), printf(), scanf(), gets(), puts()
#include<cstdlib>       //srand(time(NULL)), rand()
#include<cstring>       //memcpy(), strcpy(), strcat(), strcmp(), memset(), strlen(), strtok(), strrchr()
#include<sstream>
#include<string>        //to_string(any numerical value), stoi(), stoll()
#include<ctime>   
#include<deque>         //iterators: begin(), end(), rbegin(), rend()
                        //access:    operator[], at(), front(), back() 
                        //modifiers: push_back(), push_front(), pop_back(), pop_front(), erase(), clear()
#include<map>           //begin(), end(), rbegin(), rend(), operator[], at(), clear(), find()
                        //priority_queue:  top(), push(), pop()
#include<queue>         //front(), back(), push(), pop()
#include<set>           //begin(), end(), rbegin(), rend(), insert(), erase(), clear(), find()
#include<stack>         //top(), push(), pop()
#include<vector>        //iterators: begin(), end(), rbegin(), rend()
                        //access:    operator[], at(), front(), back()
                        //modifiers: push_back(), pop_back(), erase(), clear() 
using namespace std;

typedef pair<int, int> pii;
typedef long long LL;
#define MOD 1000000007
#define INF 1000000000

int poss[6] = {1, 4, 27, 256, 3125, 46656};
int grundy[100001];

int getGrundy(int num)
{
	if (grundy[num] != -1)
		return grundy[num];
	set<int> mex;
	for (int i = 0; i < 6; i++)
	{
		if (poss[i] <= num)
			mex.insert(getGrundy(num-poss[i]));
		else
			break;
	}
	int i = 0;
	while (mex.find(i) != mex.end())
		i++;
	grundy[num] = i;
	return i;
}

int main()
{
	memset(grundy, -1, sizeof grundy);
	grundy[0] = 0;
	int T;
	scanf("%d", &T);
	for (int t = 0; t < T; t++)
	{
		int N, num;
		scanf("%d", &N);
		int ans = 0;
		for (int i = 0; i < N; i++)
		{
			scanf("%d", &num);
			ans = ans^getGrundy(num);
		}
		if (ans == 0)
			printf("Head Chef\n");
		else
			printf("Little Chef\n");
	}
	return 0;
}
