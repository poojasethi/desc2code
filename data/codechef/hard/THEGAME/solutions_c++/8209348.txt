#include<iostream>
#include<queue>
#include<algorithm>
#include<string>
#include<stdio.h>
using namespace std;

//int inp[50002];
string inp[50002];
typedef pair<int,int> pq;
queue <pq> bfs_q;
int nocmp[12501];
int cmp_i=0;
int cmp_size=0;
int r,c;

int bfs(int i,int j)
{
int cnt=0;
pq e;
inp[i][j]='v';// Mark as visited
cnt++;
bfs_q.push(make_pair(i,j));
while(!bfs_q.empty())
{
e=bfs_q.front();
i=e.first;
j=e.second;
if(i<r-1&&inp[i+1][j]=='o')
{bfs_q.push(make_pair(i+1,j));
inp[i+1][j]='v';
cnt++;
}
if(i>0&&inp[i-1][j]=='o')
{bfs_q.push(make_pair(i-1,j));
inp[i-1][j]='v';
cnt++;
}

if(j<c-1&&inp[i][j+1]=='o')
{bfs_q.push(make_pair(i,j+1));
inp[i][j+1]='v';
cnt++;
}

if(j>0&&inp[i][j-1]=='o')
{bfs_q.push(make_pair(i,j-1));
inp[i][j-1]='v';
cnt++;
}

bfs_q.pop();
}
return cnt;
}

void dfs(int i,int j)
{
inp[i][j]='v'; // Mark as visited
cmp_size++;
if(j<c-1&&inp[i][j+1]=='o') // Forward
dfs(i,j+1);
if(j>0&&inp[i][j-1]=='o') // Backward
dfs(i,j-1);
if(i<r-1&&inp[i+1][j]=='o') // Down 
dfs(i+1,j);
if(i>0&&inp[i-1][j]=='o') // UP
dfs(i-1,j);
}

int main()
{
int t,i,j,k,m;
string sinp;
cin>>t;
while(t--)
{
cin>>r>>c;
//int **inp=new int*[r];
//for(i=0;i<r;i++)
//inp[i]=new int[c];
for(i=0;i<r;i++)
cin>>inp[i];
cmp_i=0;
cmp_size=0;
for(i=0;i<r;i++)
for(j=0;j<c;j++)
if(inp[i][j]=='o')
{//dfs(i,j);
//nocmp[cmp_i++]=cmp_size;
nocmp[cmp_i++]=bfs(i,j);
//cout<<cmp_size<<endl;
//cmp_size=0;
}

//for(i=;i<cmp_i;i++)

long double ans=1.0;
for(i=1;i<cmp_i;i++)
ans+=(nocmp[i]*(long double)1.0)/(nocmp[0]+nocmp[i]);

printf("%.10Lf\n",ans);
//cout<<ans<<endl;

}

return 0;
}