#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <functional>
#include <utility>
#include <vector>
#include <map>
 
using namespace std;
 
const int Maxn = 3000, Maxm = 11000;
 
vector <pair<int, int> > g[Maxn];
vector <int> id[Maxn];
class edge
{
public:
	int x, y, w;
	edge(){}
	edge(int X, int Y, int W){x = X, y = Y, w = W;}
};
vector <edge> e;
bool in[Maxm], inq[Maxn], vis[Maxn];
int tot = 0, n, m, ans = 0, que[Maxm * 10], l, r, dst[Maxn];
 
void spfa(int S)
{
	memset(dst, 0x3f, sizeof dst);
	dst[S] = 0;
	l = r = -1;
	que[++r] = S;
	while(l < r)
	{
		int cur = que[++l];
		inq[cur] = false;
		for(int i = 0; i < g[cur].size(); ++i)
		{
			int y = g[cur][i].second, w = g[cur][i].first;
			if(dst[y] > dst[cur] + w)
			{	
				dst[y] = dst[cur] + w;
				if(!inq[y]) inq[y] = true, que[++r] = y;
			}
			if(l != r && dst[que[l + 1]] > dst[que[r]]) swap(que[l + 1], que[r]);
		}
	}
}
 
void dfs(int cur)
{
	int Min = 0x3f3f3f3f;
	vis[cur] = true;
	ans++;
	for(int i = 0; i < g[cur].size(); ++i)
	{
		if(!vis[g[cur][i].second] && g[cur][i].first < Min) Min = g[cur][i].first;
	}
	for(int i = 0; i < g[cur].size(); ++i)
	{
		if(in[id[cur][i]] && g[cur][i].first == Min && !vis[g[cur][i].second])
			dfs(g[cur][i].second);
	}
}
 
int main()
{
#ifdef Farmer
	freopen("input.txt", "r", stdin);
#endif
	scanf("%d%d", &n, &m);
	for(int i = 0; i < m; ++i)
	{
		int x, y, w;
		scanf("%d%d%d", &x, &y, &w);
		g[x].push_back(make_pair(w, y));
	}
	for(int i = 1; i <= n; ++i)
	{
		sort(g[i].begin(), g[i].end());
		for(int j = 0; j < g[i].size(); ++j)
		{
			id[i].push_back(tot);
			e.push_back(edge(i, g[i][j].second, g[i][j].first));
			tot++;
		}
	}
	for(int i = 1; i <= n; ++i)
	{
		spfa(i);
		memset(in, false, sizeof(bool) * e.size());
		memset(vis, false, sizeof(bool) * (n + 1));
		for(int j = 0; j < e.size(); ++j)
		{
			if(dst[e[j].x] + e[j].w == dst[e[j].y])
				in[j] = true;
		}
		dfs(i);
		for(int i = 1; i <= n; ++i) if(dst[i] == 0x3f3f3f3f) ans++;
	}
	printf("%d\n", ans);
	return 0;
} 