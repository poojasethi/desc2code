
/* Author : Vamsi Kavala */
// Testing By Maggu  

#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <algorithm>
#include <map>
#include <vector>
#include <list>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <cmath>
using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)	
#define mod 1000000007
#define MAXN 1000010
#define MP make_pair
#define INF mod

typedef pair<int,int>   PI;
typedef vector<int> VI;
typedef long long int LL;

int ans;
int vis[100010],d[100010];
vector<PI> v[100010];
void dfs(int x,int w)
{
	if(x==-1)
		return;
	vis[x]=1;
	ans++;
	int minm=INF,next=-1;
	REP(i,v[x].size())
	{
		if(!vis[v[x][i].first] && v[x][i].second<minm)
		{
			minm=v[x][i].second;
			next=v[x][i].first;
		}
	}
	REP(i,v[x].size())
		if(!vis[v[x][i].first] && v[x][i].second==minm)
			if(w+minm==d[v[x][i].first])
				dfs(v[x][i].first,w+minm);
	return;
}

int main(){

	int n,m,x,y,z;
	scanf("%d%d",&n,&m);
	REP(i,m)
	{
		scanf("%d%d%d",&x,&y,&z);
		x--;
		y--;
		v[x].PB(MP(y,z));
	}
	
	ans=0;
	REP(u,n)
	{
		priority_queue<PI,vector<PI>, greater<PI> > pq;

		REP(i,n)
			d[i]=INF;
		memset(vis,0,sizeof(vis));

		d[u]=0;
		pq.push(MP(0,u));

		while(!pq.empty())
		{
			PI top=pq.top();
			while(vis[top.second])
			{
				pq.pop();
				if(pq.empty())
					break;
				top=pq.top();
			}
			if(pq.empty())
				break;

			int s=top.second;
			d[s]=top.first;
			pq.pop();
			vis[s]=1;

			REP(i,v[s].size())
			{
				if(!vis[v[s][i].first])
					pq.push(MP(d[s]+v[s][i].second,v[s][i].first));
			}
		}

		memset(vis,0,sizeof(vis));
		dfs(u,0);

		REP(i,n)
			if(!vis[i] && d[i]>=INF)
				ans++;
	}

	printf("%d\n",ans);

	return 0;
}


/*
#include <iostream>
#include <cstdio>
#include <vector>
#include <utility>
#include <set>
using namespace std;
 
#define mp make_pair
#define pb push_back
 
#define ff first
#define ss second
 
const int maxN = 2005, inf = 1e9;
int n, m;
vector< pair<int,int> > adj[maxN];
int dist[maxN][maxN], sh[maxN][maxN];
long long total;
bool vis[maxN];
 
void shortest(int s) {
   for(int i=0;i<n;++i) sh[s][i] = inf;
   sh[s][s] = 0;
 
   set< pair<int,int> > q;
   q.insert(mp(0,s));
   
   while(!q.empty()) {
      int u = q.begin()->ss;
      q.erase(q.begin());
      
      for(int i=0;i<adj[u].size();++i) {
         int v = adj[u][i].ff;
         int w = adj[u][i].ss;
         
         if(sh[s][v]>sh[s][u]+w) {
            if(sh[s][v]!=inf) q.erase(q.find(mp(sh[s][v],v)));
            sh[s][v] = sh[s][u]+w;
            q.insert(mp(sh[s][v],v));
         }
      }
   }
   
   for(int i=0;i<n;++i) {
      if(dist[s][i]==sh[s][i]) total++;
   }
}
void visit(int u, int s) {
   vis[u] = 1;
   
   int least = inf;
   for(int i=0;i<adj[u].size();++i) {
      int v = adj[u][i].ff;
      if(!vis[v]) least = min(least,adj[u][i].ss);
   }
   for(int i=0;i<adj[u].size();++i) {
      int v = adj[u][i].ff;
      int w = adj[u][i].ss;
      
      if(least==w) {
         if(dist[s][v]>dist[s][u]+w) {
            dist[s][v] = dist[s][u]+w;
            visit(v,s);
         }
      }
   }
   
   vis[u] = 0;
}
int main() {
   scanf("%d %d",&n,&m);
   for(int i=0;i<m;++i) {
      int u, v, w;
      scanf("%d %d %d",&u,&v,&w);
      u--; v--;
      adj[u].pb(mp(v,w));
   }
   
   for(int i=0;i<n;++i) {
      for(int j=0;j<n;++j) dist[i][j] = inf;
      dist[i][i] = 0;
      visit(i,i);
      shortest(i);
   }
   
   printf("%lld\n",total);
} 

*/