#include<stdio.h>
#include<string.h>
#include<iostream>
#include<algorithm>
#include<map>
using namespace std;
typedef long long lld;
#define maxn 2010
#define inf 0x7fffffff
struct Edge
{
	int v,next,s;
}edge[1000010];
int head[maxn];
int pos;
void insert(int x,int y,int s)
{
	edge[pos].v=y;
	edge[pos].s=s;
	edge[pos].next=head[x];
	head[x]=pos++;
}
int n,m;
int dis[maxn];
int queue[maxn];
int rear,front;
bool vis[maxn];
int ddd[maxn];
void spfa(int src)
{
	rear=front=0;
	queue[front++]=src;
	for(int i=1;i<=n;i++)
		dis[i]=inf;
	dis[src]=0;
	memset(vis,false,sizeof(vis));
	vis[src]=true;
	while(rear != front)
	{
		int now=queue[rear++];
		if(rear == maxn)
			rear=0;
		vis[now]=false;
		for(int i=head[now];i;i=edge[i].next)
		{
			int v=edge[i].v;
			if(dis[now]+edge[i].s < dis[v])
			{
				dis[v]=dis[now]+edge[i].s;
				if(!vis[v])
				{
					vis[v]=true;
					queue[front++]=v;
					if(front == maxn)
						front=0;
				}
			}
		}
	}
}
void dfs(int now,int rt)
{
	vis[now]=true;
	int mark=inf;
	for(int i=head[now];i;i=edge[i].next)
		if(!vis[edge[i].v])
			mark=min(mark,edge[i].s);
	for(int i=head[now];i;i=edge[i].next)
		if(edge[i].s == mark)
		{
			int v=edge[i].v;
			if(vis[v])
				continue;
			if(ddd[now]+edge[i].s < ddd[v])
			{
				ddd[v]=ddd[now]+edge[i].s;
				dfs(v,rt);
			}
		}
	vis[now]=false;
}
int main()
{
	scanf("%d %d",&n,&m);
	memset(head,0,sizeof(head));
	pos=1;
	while(m--)
	{
		int x,y,s;
		scanf("%d %d %d",&x,&y,&s);
		insert(x,y,s);
	}
	int ans=0;
	for(int i=1;i<=n;i++)
	{
		spfa(i);
		for(int j=1;j<=n;j++)
			ddd[j]=inf;
		memset(vis,false,sizeof(vis));
		ddd[i]=0;
		dfs(i,i);
		for(int j=1;j<=n;j++)
			if(dis[j] == ddd[j])
				ans++;
	}
	printf("%d\n",ans);
	return 0;
}
