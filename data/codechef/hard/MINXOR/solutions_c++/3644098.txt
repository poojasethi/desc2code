#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<ctype.h>
#include<string.h>
#include<math.h>
#include<string>
#include<deque>
#include<iostream>
#include<set>
#include<map>
#include<vector>
#include<algorithm>
#include<bitset>
#include<stack>
#include<queue>
#include<sstream>

#define MODM 1000000007
#define MAXM 2147483647
#define MAXML 9223372036854775807LL
#define Pi 3.14159265358979323846264338327950288419716939937510582
#define EPS 1e-10

#define ff first
#define ss second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define mp make_pair
#define L(x) x.length()
#define B(x) x.begin()
#define E(x) x.end()
#define F(x) x.front()
#define SZ(x) x.size()
#define CLR(x) x.clear()
#define SORT(x) sort(x.begin(),x.end())
#define REV(x) reverse(x.begin(),x.end())
#define FOR(i,x,y) for(int i=x;i<y;i++)
#define S(x) scanf("%d",&x)
#define SL(x) scanf("%lld",&x)
#define SD(x) scanf("%lf",&x)
#define SC(x) scanf("%1s",&x)
#define SS(x) scanf("%s",x)
#define DUM() scanf("%c",&dum)
#define READ(x) freopen(x,"r",stdin)
#define WRITE(x) freopen(x,"w",stdout)
#define FILL(x,y) memset(x,y,sizeof(x))
#define IT iterator

using namespace std;
typedef long long int lli;
typedef unsigned long long int llu;
typedef pair<int,int> P;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef vector< P > VP;
typedef vector< VP > VVP;
typedef vector<string> VS;
typedef vector< VS> VVS;
typedef map<int,int> MAP;

lli gcd(lli a,lli b){if(a==0)return(b);else return(gcd(b%a,a));}
lli fastpow(lli a,lli n,lli temp){if(n==0) return(1);if(n==1)return((a*temp)%MODM); if(n&1)temp=(temp*a)%MODM;return(fastpow((a*a)%MODM,n/2,temp));}
char dum;

int trie[502][5001][3];
int indTrie[502],var[502],a[250005];
bool toInit[502];
int n,q,rn,ans,cans;

void initTrie(int bno){
	for(int i=0;i<5001;i++){
		trie[bno][i][0]=trie[bno][i][1]=-1;
		trie[bno][i][2]=0;
	}
	indTrie[bno]=0;
}
void addToTrie(int bno,int val){
	int bit,ind=0;
	for(int i=15;i>=0;i--){
		bit=(val&(1<<i))?1:0;
		if(trie[bno][ind][bit]==-1){
			trie[bno][ind][bit]=++indTrie[bno];
			assert(indTrie[bno]<5001);
		}
		ind=trie[bno][ind][bit];
	}
	trie[bno][ind][2]++;
}
void findMin(int l,int r){
	
	int minm=MAXM,aval,cnt=0,beg,end;
	for(int i=0;i<n;i+=rn){
		if(l<=i and i+rn-1<=r){
			int temp=0,bno=i/rn,ind=0,bit;
			
			if(toInit[bno]){
				toInit[bno]=0;
				initTrie(bno);
				for(int j=i;j<i+rn;j++){
					addToTrie(bno,a[j]);
				}
			}
			for(int j=15;j>=0;j--){
				bit=(var[bno]&(1<<j))?1:0;
				if(trie[bno][ind][bit]==-1){
					temp+=(1<<j);
					ind=trie[bno][ind][1-bit];
				}
				else ind=trie[bno][ind][bit];
			}
			if(temp<minm){
				minm=temp,cnt=trie[bno][ind][2];
			}
			else if(temp==minm)
				cnt+=trie[bno][ind][2];
		}
		else{
			beg=max(l,i),end=min(r,i+rn-1);
			for(int j=beg;j<=end;j++){
				aval=a[j]^var[j/rn];
				if(aval<minm){
					minm=aval,cnt=1;
				}
				else if(aval==minm) cnt++;
			}
		}
	}
	ans=minm,cans=cnt;
}
void updateBuckets(int l,int r,int k){
	
	for(int i=0;i<n;i+=rn){
		if(l<=i and i+rn-1<=r){
			var[i/rn]^=k;
		}
		else{
			int beg=max(l,i),end=min(r,i+rn-1);
			if(beg<=end){
				int bno=beg/rn;
				for(int j=beg;j<=end;j++){
						a[j]^=k;
				}
				toInit[bno]=1;
			}
		}
	}
}
int main()
{
	#ifndef ONLINE_JUDGE
	READ("read.txt");
	WRITE("write1.txt");
	#endif
	
	S(n),S(q);
	rn=sqrt(n);
	FOR(i,0,502){
		initTrie(i);
	}
	FILL(var,0);
	for(int i=0;i<n;i++){
		S(a[i]);
		addToTrie(i/rn,a[i]);
	}
	FILL(toInit,0);
	int type,l,r,k;
	while(q--){
		S(type);
		if(type==1){
			S(l),S(r);
			findMin(l-1,r-1);
			printf("%d %d\n",ans,cans);
		}
		else {
			scanf("%d%d%d",&l,&r,&k);
			updateBuckets(l-1,r-1,k);
		}
	}
	return 0;
}

