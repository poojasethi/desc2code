#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define f first
#define s second
#define N 250007
#define cs 1373
#define BIT(i, n) ( (n >> i) & 1 )
#define ln 1000000000
#define oo 1000000007
#define Pa pair <int, int>

using namespace std;

int n, a[N], sq, T[N], q;

struct node
{
    int V;
    node *son[2];
};

typedef node *Node;
Node root[N];

Node Make_node()
{
    Node P = new node();
    P -> son[0] = P -> son[1] = NULL;
    P -> V = 0;
}

void PUSH(int X, Node P)
{
    for(int i=15; i>=0; i--)
    {
        int u = BIT(i, X);
        if(P -> son[u] == NULL) P -> son[u] = Make_node();
        P -> son[u] -> V++;
        P = P -> son[u];
    }
}

void POP(int X, Node P)
{
    for(int i=15; i>=0; i--)
    {
        int u = BIT(i, X);
        Node Q = P -> son[u];
        P -> son[u] -> V--;
        if(P -> son[u] -> V == 0)
            P -> son[u] = NULL;
        P = Q;
    }
}

void Update(int l, int r, int k)
{
    if(l/sq == r/sq)
    {
        for(int i=l; i<=r; i++)
        {
            POP(a[i], root[l/sq]);
            a[i] ^= k;
            PUSH(a[i], root[l/sq]);
        }
        return;
    }
    for(int i=l; i<l/sq*sq+sq; i++)
    {
        POP(a[i], root[l/sq]);
        a[i] ^= k;
        PUSH(a[i], root[l/sq]);
    }
    for(int i=l/sq+1; i<r/sq; i++)
        T[i] ^= k;
    for(int i=r/sq*sq; i<=r; i++)
    {
        POP(a[i], root[r/sq]);
        a[i] ^= k;
        PUSH(a[i], root[r/sq]);
    }
}

Pa Get_Max(int X, Node P)
{
    Pa W = mp(0, 0);
    for(int i=15; i>=0; i--)
    {
        int u = BIT(i, X);
        if(P -> son[u] != NULL)
        {
            P = P -> son[u];
            continue;
        }
        W.f += (1 << i);
        P = P -> son[1-u];
    }
    W.s = P -> V;
    return W;
}

Pa Get(int l, int r)
{
    Pa res = mp(ln, 0);
    if(l/sq == r/sq)
    {
        for(int i=l; i<=r; i++)
        {
            if(res.f == (a[i] ^ T[l/sq]))
                res.s++;
            if(res.f > (a[i] ^ T[l/sq]))
                res = mp(a[i] ^ T[l/sq], 1);
        }
        return res;
    }
    for(int i=l; i<l/sq*sq+sq; i++)
    {
        if(res.f == (a[i] ^ T[l/sq]))
            res.s++;
        if(res.f > (a[i] ^ T[l/sq]))
            res = mp(a[i] ^ T[l/sq], 1);
    }
    for(int i=l/sq+1; i<r/sq; i++)
    {
        Pa cur = Get_Max(T[i], root[i]);
        if(cur.f == res.f)
            res.s += cur.s;
        if(res.f > cur.f)
            res = cur;
    }
    for(int i=r/sq*sq; i<=r; i++)
    {
        if(res.f == (a[i] ^ T[r/sq]))
            res.s++;
        if(res.f > (a[i] ^ T[r/sq]))
            res = mp(a[i] ^ T[r/sq], 1);
    }
    return res;
}

int main()
{
   // filein("inp.txt");   fileout("MINXOR.out");
    int type, l, r, k;
    cin >> n >> q;
    for(int i=0; i<n; i++)
    {
        scanf("%d", &a[i]);
        //a[i] = rand();
    }
    sq = sqrt(n);
    for(int i=0; i<n; i+=sq)
        root[i/sq] = Make_node();
    for(int i=0; i<n; i+=sq)
        for(int j=i; j<min(i+sq, n); j++)
            PUSH(a[j], root[i/sq]);
    while(q--)
    {
        scanf("%d", &type);
        if(type == 1)
        {
            scanf("%d%d", &l, &r);  l--, r--;
            Pa res = Get(l, r);
            cout << res.f << " " << res.s << endl;
        }
        else
        {
            scanf("%d%d%d", &l, &r, &k); l--, r--;
            Update(l, r, k);
        }
    }
}
