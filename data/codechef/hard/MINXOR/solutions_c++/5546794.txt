#include<cstdio>
#include<cstdlib>
#include<algorithm>
#define size 400
#define M 3033333
#define N 500000
#define inf 65535
#define For(i,l,r) for(int i=l;i<=r;i++)
using namespace std;
int tot,key,ret,ans,num,now,n,Q,val;
int data[M],lc[M],rc[M],poor[M],cnt,d;
int lazy[5550],a[N],Root[5550],Ans[5550],Num[5550];
void modify(int &t,int l,int r){
	d>>=1;
	if(!t){
		if(cnt) t=poor[cnt--];
		else t=++tot;
	}
	if(l==r){data[t]+=key; return;}
	int mid=(l+r)>>1;
	if(d&ret) modify(rc[t],mid+1,r);
	else modify(lc[t],l,mid);
	if(lc[t]&&!data[lc[t]]) poor[++cnt]=lc[t],lc[t]=0;
	if(rc[t]&&!data[rc[t]]) poor[++cnt]=rc[t],rc[t]=0;
	
	data[t]=data[lc[t]]+data[rc[t]];
}
void query(int t,int l,int r){
	d>>=1;
	if(l==r){
		int val=l^lazy[now];
		if(val==ans) num+=data[t];
		if(val<ans) ans=val,num=data[t];
		return;
	}
	int mid=(l+r)>>1;
	if(!(lazy[now]&d)){
		if(data[lc[t]]) query(lc[t],l,mid);
		else query(rc[t],mid+1,r);
	}
	else{
		if(data[rc[t]]) query(rc[t],mid+1,r);
		else query(lc[t],l,mid);
	}
}
void find(int ml,int mr){
	For(i,ml,mr){
		int val=a[i]^lazy[i/size];
		if(val==ans) num++;
		if(val<ans) ans=val,num=1;
	}
}
void doit(int ml,int mr){
	For(i,ml,mr){
		ret=a[i]; key=-1; d=inf+1;
		modify(Root[i/size],0,inf);
		a[i]^=val;
		ret=a[i]; key=1; d=inf+1;
		modify(Root[i/size],0,inf);
	}
}
char ch;
int read(){
	int ret=0;
	for(ch=getchar();ch<'0'||ch>'9';ch=getchar());
	for(;ch>='0'&&ch<='9';ch=getchar()) ret=ret*10+ch-'0';
	return ret;
}
void query(int t){
	now=t,d=inf+1;
	ans=inf,num=0;
	query(Root[t],0,inf);
	Ans[t]=ans,Num[t]=num;
}
void upd(int t){
	if(Ans[t]==ans) num+=Num[t];
	if(Ans[t]<ans) ans=Ans[t],num=Num[t];
}
int main(){
	
	scanf("%d%d",&n,&Q);
	For(i,1,n) scanf("%d",&a[i]);
	For(i,1,n){
		ret=a[i]; key=1; d=inf+1;
		modify(Root[i/size],0,inf);
	}
	For(t,1,n/size) query(t);
	
	while(Q--){
		int tp,ll,rr,L,R;
		tp=read(); ll=read(); rr=read();
		L=ll/size; R=rr/size;
		if(tp==1){
			ans=inf; num=0;
			if(L==R) find(ll,rr);
			else{
				find(ll,(L+1)*size-1);
				find(R*size,rr);
			}
			
			For(t,L+1,R-1) upd(t);
			printf("%d %d\n",ans,num);
		}
		if(tp==2){
			val=read();
			if(L==R) doit(ll,rr);
			else{
				doit(ll,(L+1)*size-1);
				doit(R*size,rr);
			}
			For(t,L+1,R-1) lazy[t]^=val;
			For(t,L,R) query(t);
		}
		
	}
	
}
