#include "bits/stdc++.h"
using namespace std;
inline int scan(){
    char c = getchar_unlocked();
    int x = 0;
    while(c < '0' || c > '9'){
        c = getchar_unlocked();
    }
    while(c >= '0' && c <= '9'){
        x = (x<<1) + (x<<3) + c - '0';
        c = getchar_unlocked();
    }
    return x;
}
const int N = 250001;
const int SQN = 705;
const int LN = 15;
struct trie{
    int child[SQN * LN][2];
    int size[SQN * LN];
    int cur;
    trie(){
        cur = 1;
        memset(size , 0 , sizeof(int) * SQN * LN);
        memset(child , 0 , sizeof(int) * SQN * LN * 2);
    }
    inline void clear(){
        cur = 1;
        memset(size , 0 , sizeof(int) * SQN * LN);
        memset(child , 0 , sizeof(int) * SQN * LN * 2);
    }
    inline void insert(int num){
        int node = 1;
        for(int i = LN ; i >= 0 ; --i){
            bool bit = (num >> i) & 1;
            if(!child[node][bit]){
                child[node][bit] = ++cur;
            }
            ++size[node];
            node = child[node][bit];
        }
        ++size[node];
    }
    inline void erase(int num){
        int node = 1;
        for(int i = LN ; i >= 0 ; --i){
            --size[node];
            node = child[node][(num >>i) & 1];
        }
        --size[node];
    }
    inline pair < int , int > query(int num){
        int res = 0;
        int node = 1;
        for(int i = LN ; i >= 0 ; --i){
            bool bit = (num >> i) & 1;
            if(size[child[node][bit]]){
                node = child[node][bit];
            }
            else{
                node = child[node][bit ^ 1];
                res |= 1 << i;
            }
        }
        return make_pair(res , size[node]);
    }
};
static int arr[N];
static int start[N / SQN + 10];
static int finish[N / SQN + 10];
static int block[N];
trie root[N / SQN + 10];
static int lazy[N / SQN + 10] = {0};
int n , q;
int type , l , r , k;
int cur = 0;
int i , j ;
int ans;
int main(){
    n = scan() , q = scan();
    for(i = 1 ; i <= n ; ++i){
        arr[i] = scan();
    }
    i = 1;
    while(i <= n){
        start[++cur] = i;
        for(j = i ; j <= n && j - i < SQN ; ++j){
            root[cur].insert(arr[j]);
            block[j] = cur;
        }
        finish[cur] = j - 1;
        i = j;
    }
    while(q--){
        type = scan() , l = scan() , r = scan();
        if(type & 1){
            ans = INT_MAX;
            int count = 0;
            for(i = l ; i <= min(r , finish[block[l]]) ; ++i){
                arr[i] ^= lazy[block[i]];
                if(arr[i] < ans){
                    ans = arr[i];
                    count = 0;
                }
                count += ans == arr[i];
                arr[i] ^= lazy[block[i]];
            }
            if(block[l] ^ block[r]){
                for(i = start[block[r]] ; i <= r ; ++i){
                    arr[i] ^= lazy[block[i]];
                    if(arr[i] < ans){
                        ans = arr[i];
                        count = 0;
                    }
                    count += ans == arr[i];
                    arr[i] ^= lazy[block[i]];
                }
            }
            for(i = block[l] + 1 ; i <= block[r] - 1 ; ++i){
                pair < int , int > temp = root[i].query(lazy[i]);
                if(temp.first < ans){
                    ans = temp.first;
                    count = 0;
                }
                count += (ans == temp.first) ? temp.second : 0;
            }
            printf("%d %d\n",ans , count);
        }
        else{
            k = scan();
            if(block[r] - block[l] <= 1){
                for(i = l ; i <= r ; ++i){
                    arr[i] ^= k;
                }
                root[block[l]].clear();
                if(block[r] ^ block[l])
                    root[block[r]].clear();
                for(i = start[block[l]] ; i <= finish[block[r]] ; ++i){
                    root[block[i]].insert(arr[i]);
                }
                continue;
            }
            for(i = l ; i <= finish[block[l]] ; ++i){
                arr[i] ^= k;
            }
            for(i = start[block[r]] ; i <= r ; ++i){
                arr[i] ^= k;
            }
            root[block[l]].clear();
            root[block[r]].clear();
            for(i = start[block[l]] ; i <= finish[block[l]] ; ++i){
                root[block[i]].insert(arr[i]);
            }
            for(i = start[block[r]] ; i <= finish[block[r]] ; ++i){
                root[block[i]].insert(arr[i]);
            }
            for(i = block[l] + 1 ; i <= block[r] - 1 ; ++i){
                lazy[i] ^= k;
            }
        }
    }
}