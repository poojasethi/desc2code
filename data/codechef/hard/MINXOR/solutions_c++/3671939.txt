#include <bits/stdc++.h>
using namespace std;

const int SIZE = 510;
const int N = 250010;
struct blocks
{
    struct trie {
        trie *next[2];
        int cnt;
        trie() {
            cnt = 0;
            next[0] = next[1] = NULL;
        }
    }*root,e[SIZE * 17];
    int cnt,add;
    blocks() {
        cnt = add = 0;
    }
    
    void init() {
        root = NULL;
        add = 0;
        for(int i = 0; i < cnt; i ++) {
            e[i].next[0] = e[i].next[1] = NULL;
            e[i].cnt = 0;
        }
        cnt = 0;
        root = &e[cnt ++];
    }
    
    void insert(int x) {
        trie *p = root;
        for(int i = 15; i >= 0; i --) {
            int idx = (x >> i) & 1;
            if(!p->next[idx]) p->next[idx] = &e[cnt ++];
            p = p->next[idx];
        }
        p->cnt ++;
    }
    
    int query(int &mx) {
        int x = add;
        trie *p = root;
        mx = 0;
        for(int i = 15; i >= 0; i --) {
            int idx = (x >> i) & 1;
            if(p->next[idx]) p = p->next[idx];
            else p = p->next[idx ^ 1],mx += (1 << i);
        }
        return p->cnt;
    }
}T[555];

int a[N];
int MAP[N];
int st[SIZE * 2],ed[SIZE * 2];
int main()
{
    int n,m,cd,x,y,z;
    scanf("%d%d",&n,&m);
    for(int i = 1; i <= n; i ++) scanf("%d",&a[i]);
    for(int i = 0; i < 555; i ++) T[i].init();
    for(int i = 1,tot = 1; i <= n; i += SIZE,tot ++) {
        for(int j = 0; j < SIZE && i + j <= n; j ++) {
            T[tot].insert(a[i + j]);
            MAP[i + j] = tot;
            ed[tot] = i + j;
            if(!st[tot]) st[tot] = i + j;
        }
    }
    while(m --) {
        scanf("%d",&cd);
        if(cd == 1) {
            scanf("%d%d",&x,&y);
            int tot = 0,mx = 0x7fffffff;
            if(MAP[x] + 1 >= MAP[y]) {
                for(int i = x; i <= y; i ++)
                    if((a[i] ^ T[MAP[i]].add) < mx) mx = (a[i] ^ T[MAP[i]].add),tot = 1;
                    else if(mx == (a[i] ^ T[MAP[i]].add)) tot ++;
            }
            else {
                for(int i = x; i <= n && MAP[i] == MAP[x]; i ++)
                    if((a[i] ^ T[MAP[i]].add) < mx) {
                        mx = (a[i] ^ T[MAP[i]].add),tot = 1;
                    }
                    else if(mx == (a[i] ^ T[MAP[i]].add)) tot ++;
                for(int i = MAP[x] + 1; i < MAP[y]; i ++) {
                    int cnt = T[i].query(z);
                    if(z == mx) tot += cnt;
                    else if(z < mx) mx = z,tot = cnt;
                }
                for(int i = y; i >= 1 && MAP[i] == MAP[y]; i --) {
                    if((a[i] ^ T[MAP[i]].add) < mx) mx = (a[i] ^ T[MAP[i]].add),tot = 1;
                    else if(mx == (a[i] ^ T[MAP[i]].add)) tot ++;
                }
            }
            printf("%d %d\n",mx,tot);
        }
        else {
            scanf("%d%d%d",&x,&y,&z);
            for(int i = MAP[x] + 1; i < MAP[y]; i ++) {
                T[i].add ^= z;
            }
            if(MAP[x] == MAP[y]) {
                for(int i = st[MAP[x]]; i <= ed[MAP[x]]; i ++) a[i] ^= T[MAP[x]].add;
                for(int i = x; i <= y; i ++) a[i] ^= z;
                T[MAP[x]].init();
                for(int i = st[MAP[x]]; i <= ed[MAP[x]]; i ++) T[MAP[x]].insert(a[i]);
            }
            else {
                for(int i = st[MAP[x]]; i <= ed[MAP[x]]; i ++) a[i] ^= T[MAP[x]].add;
                for(int i = x; i <= n && MAP[i] == MAP[x]; i ++) a[i] ^= z;
                T[MAP[x]].init();
                for(int i = st[MAP[x]]; i <= ed[MAP[x]]; i ++) T[MAP[x]].insert(a[i]);
                for(int i = st[MAP[y]]; i <= ed[MAP[y]]; i ++) a[i] ^= T[MAP[y]].add;
                for(int i = y; i >= 1 && MAP[i] == MAP[y]; i --) a[i] ^= z;
                T[MAP[y]].init();
                for(int i = st[MAP[y]]; i <= ed[MAP[y]]; i ++) T[MAP[y]].insert(a[i]);                
            }                
        }
    }
    return 0;
}

