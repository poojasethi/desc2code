// -*- C++ -*-
// File: a.cpp
// Copyright (C) 2013
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <numeric>
#include <memory.h>
#include <cstdio>
#include <assert.h>

using namespace std;

#define pb push_back
#define INF 1011111111
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++)
#define rep(i,n) FOR(i,0,n)
#define CL(a,v) memset((a),(v),sizeof(a))
#define mp make_pair
#define X first
#define Y second
#define all(c) (c).begin(), (c).end()
#define SORT(c) sort(all(c))

typedef long long ll;
typedef vector<int> VI;
typedef pair<int,int> pii;

/*** TEMPLATE CODE ENDS HERE */


const int LOG = 16;
const int NMAX = 250005;
const int BMAX = 500;

inline int bit(int val, int i) { return (val >> i) & 1; }

struct Trie {
    VI nxt[2], cnt;
    int xored;
    
    Trie() {
        xored = 0;
    }
    
    void rebuild() {
        xored = 0;
        cnt.assign(1, 0);
        nxt[0].assign(1, -1);
        nxt[1].assign(1, -1);
    }
    
    void add(int x) {
        int at = 0;
        for(int i = LOG-1; i >=0 ; --i) {
            int b = bit(x, i);
            if(nxt[b][at] == -1) {
                int sz = (int)nxt[b].size();
                cnt.pb(0);
                nxt[0].pb(-1);
                nxt[1].pb(-1);
                nxt[b][at] = sz;
            }
            at = nxt[b][at];
        }
        cnt[at] ++;
    }
    
    pii get_min() {
        if(cnt.size()==1) return mp(INF, 0);
        int ans = 0, at = 0;
        
        for(int i = LOG-1; i >= 0; --i) {
            int b = bit(xored, i);
            rep(c,2) {
                if(nxt[c^b][at] != -1) {
                    ans |= c << i;
                    at = nxt[c^b][at];
                    break;
                }
            }
        }
        assert(cnt[at]>0);
        return mp(ans, cnt[at]);
    }
};

Trie tr[ (NMAX+BMAX-1) / BMAX ];
int a[NMAX];
int add[ (NMAX+BMAX-1) / BMAX ];
int n, q;

void relax(int id) {
    if(add[id]) {
        for(int i = BMAX*id; i < min(n, BMAX*(id+1)); ++i) a[i] ^= add[id];
        add[id] = 0;
    }
}

void rebuild(int id) {
    tr[id].rebuild();
    add[id] = 0;
    for(int i = BMAX*id; i < min(n, BMAX*(id+1)); ++i) tr[id].add(a[i]);
}

void update(pii &cur, const pii &n) {
    if(n.X <= cur.X) {
        if(n.X < cur.X) {
            cur.X = n.X;
            cur.Y = 0;
        }
        cur.Y += n.Y;
    }
}

int main() {
#ifdef LOCAL_HOST
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif

    ios_base::sync_with_stdio(false);
    
    cin >> n >> q;
    rep(i,n) cin >> a[i];
    
    for(int l = 0, i = 0; l < n; l += BMAX, i ++) rebuild(i);
    
    rep(qi, q) {
        int op;
        cin >> op;
        
        if(op == 1) {
    
            int l, r;
            cin >> l >> r;
            --l ,--r;
            
            relax(l / BMAX);
            relax(r / BMAX);
            
            pii ans(INF, 0);
            for(int i = l; i <= r; ) {
                if(i % BMAX == 0 && i + BMAX - 1 <= r) {
                    pii cur = tr[i / BMAX].get_min();
                    update(ans, cur);
                    i += BMAX;
                }
                else {
                    update(ans, mp(a[i],1));
                    i ++;
                }
            }
            
            cout << ans.X << " " << ans.Y << endl;
        }
        else {
            int l, r, k;
            cin >> l >> r >> k;
            --l, --r;
            
            relax(l / BMAX);
            relax(r / BMAX);
            
            for(int i = l; i <= r;) {
                if(i % BMAX==0 && i+BMAX-1 <= r) {
                    int id = i / BMAX;
                    tr[id].xored ^= k;
                    add[id] ^= k;
                    i += BMAX;
                }
                else {
                    a[i] ^= k;
                    i ++;
                }
            }
            
            relax(l / BMAX);
            relax(r / BMAX);
            
            rebuild(l / BMAX);
            if(l/BMAX != r/BMAX) rebuild(r/BMAX);
        }
    }
    
    

#ifdef LOCAL_HOST
    printf("TIME: %.3lf\n",double(clock())/CLOCKS_PER_SEC);
#endif

    return 0;
}
