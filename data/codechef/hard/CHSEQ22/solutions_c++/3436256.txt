#include<iostream>
#include<vector>
#include<string.h>
#include<stdio.h>
#include<climits>
#include<map>
#include<math.h>
#include<algorithm>
#define LL long long
#define P(N) printf("%d\n",N);
#define S(N) scanf("%d",&N);
#define SL(N) scanf("%lld",&N);
#define pb push_back
#define mod 1000000007
#define mp make_pair
using namespace std;
//Good Editorial
int scan()
{
int t=0;
char c;
c=getchar_unlocked();
while(c<'0' || c>'9')
c=getchar_unlocked();
while(c>='0' && c<='9')
{
t=(t<<3)+(t<<1)+c-'0';
c=getchar_unlocked();
}
return t;
}
void out(int n) {
	if(n<0){
		n=-n;putchar_unlocked('-');
	}
	int i=10;
	char output_buffer[11];
	output_buffer[10]=' ';
	do{
		output_buffer[--i]=(n%10)+'0';n/=10;
	}while(n);
	do{
		putchar_unlocked(output_buffer[i]);
	}
	while(++i<11);
}
LL conn_comp=0,nodes=0;
LL expmod(LL a,LL b)
{
	LL x=1,y=a;
	while(b>0)
	{
		if(b&1) x=(x*y)%mod;
		y=(y*y)%mod;
		b>>=1;
	}
	return (x)%mod;
}

void dfs(int x,int visited[],vector<int> adj[])
{
	nodes++;
    visited[x]=1;
    int siz=adj[x].size();
    for(int i=0;i<siz;i++)
    {
        if(visited[adj[x][i]]==0)
            dfs(adj[x][i],visited,adj);
    }
}



main()
{
   
   
   
      int t=1;
      while(t--)
      {
          int n,m,x,y;
          LL ans=0;
          n=scan();m=scan();
	 	vector<int> adj[n+2];
		int visited[n+2];
          for(int i=0;i<m;i++)
          {
              x=scan();
              y=scan();
              adj[x].pb(y+1);adj[y+1].pb(x);
          }
LL power=0;
          memset(visited,0,sizeof(visited));
          for(int i= 1;i<=n;i++)
          {
          	nodes=0;
              if(visited[i]==0)
              {
              	 conn_comp++;
                  dfs(i,visited,adj);
              }
             if(nodes!=0)
			power+=(nodes-1);
          }
          cout<<expmod(2,power);
      }
return 0;
}