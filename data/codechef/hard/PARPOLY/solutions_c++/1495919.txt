#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cmath>
#include <vector>
#include <stack>
#include <set>
#include <map>
#include <deque>
#include <string>

#define all(i,n) for(i = 0; i < (n); i++)
#define SET(p) memset(p,-1,sizeof(p))
#define CLR(p) memset(p,0,sizeof(p))
#define maX(a,b)	((a)>(b)?(a):(b))
#define miN(a,b)	((a)<(b)?(a):(b))
#define S(n)	scanf("%d",&n)
#define P(n)	printf("%d\n",n)
#define Sl(n)	scanf("%lld",&n)
#define Pl(n)	printf("%lld\n",n)
#define Sf(n)   scanf("%lf",&n)
#define Ss(n)   scanf("%s",n)
#define LL long long
#define ULL unsigned long long
#define pb push_back
#define mod 1000000007
using namespace std;
LL c[15],p[1000];
LL dp[805][405];
void calculateP(LL n,LL d,LL x)
{
    p[0]=c[0];
    for(int i=1;i<=n;i++)
    {
        LL y=1,z=(i*x)%mod;
        p[i]=0;
        for(int j=0;j<=d;j++)
        {
            p[i]+=(c[j]*y)%mod;
            p[i]=p[i]%mod;
            y=(y*z)%mod;
        }
    }
}
LL solve(LL n,LL m)
{
    int i,j;
    if(m==1)
        return p[n];
    if(dp[n][m]!=-1)
        return dp[n][m];
    dp[n][m]=0;
    for(i=0;i<=n;i++)
    {
        dp[n][m]+=(solve(i,m/2)*solve(n-i,m-m/2))%mod;
        if(dp[n][m]>=mod)
            dp[n][m]-=mod;
    }
    //printf("%lld %lld %lld\n",n,m,dp[n][m]);
    return dp[n][m];
}
int main()
{
LL t,m,n,x,d,i;
Sl(t);
while(t--)
{
    SET(dp);
    Sl(m);Sl(n);Sl(x);
    Sl(d);
    for(i=0;i<=d;i++)
        Sl(c[i]);
    calculateP(n,d,x);
    dp[0][0]=1;
    for(i=1;i<=n;i++)
        dp[i][0]=0;
    Pl(solve(n,m));
}
return 0;
}
