#include <iostream>

#include <string>

#include <vector>

#include <algorithm>

#include <queue>

#include <list>

#include <stack>

#include <map>

#include <set>

#include <algorithm>

#include <cstdio>

#include <cstring>

#include <cmath>

using namespace std;



#define DEBUG

#define REP(i,a) for(i=0;i<a;i++)

#define FOR(i,a,b) for(i=a;i<b;i++)

#define VE vector<int>

#define SZ size()

#define PB push_back

#define MOD 1000000007
#define LL long long int

void PA(LL arr[], int n){
	int j;
	FOR(j,0,n){
		cout<<arr[j]<<" ";

	}
	cout<<endl;
}
LL pow(LL a,int b){
	LL i,m=1;
	FOR(i,0,b){
		m=( (a)%MOD * m%MOD )%MOD;
	}
	return m%MOD;
}
int __sign;
int __ch;
inline void S( int &x )
{
        x=0;
        while((__ch<'0' || __ch>'9') && __ch!='-' && __ch!=EOF) __ch=getchar_unlocked();
        if (__ch=='-')
                __sign=-1 , __ch=getchar_unlocked();
        else
                __sign=1;
        
        do
                x=(x<<3)+(x<<1)+__ch-'0';
        while((__ch=getchar_unlocked())>='0' && __ch<='9');
        x*=__sign;
}

int main()

{

   	int tc;

	S(tc);

	while(tc--) {

		int m, n, x, coeffs[100], d, i, j, k;

		S(m);S(n);S(x);S(d);
		FOR(i,0,d+1)

                        cin>>coeffs[i];

		LL dp[n + 10], res[n + 10];

                memset(res, 0, sizeof res);

		memset(dp, 0, sizeof dp);

		for(int i = 0; i <= n; i++) {

                    LL sum=0;

                    FOR(j,0,d+1)

                        sum=( (LL)(sum%MOD) + ( ((LL)coeffs[j])%MOD * pow(((LL)i)*x,j) )%MOD ) %MOD;

			dp[i] = sum%MOD;

		}
		//PA(dp,n+1);

		i=1;

                res[0]=1;

                while(i<=m){

			if(m&i){

			        LL temp[n + 10];

			        memset(temp,0,sizeof temp);

			        FOR(j,0,n+1){

			            FOR(k,0,j+1){

			                temp[j]=( ((LL)temp[j]%MOD) + ( ((LL)res[k]) * dp[j-k] ) %MOD )%MOD;
			                
			            }

			        }

			        FOR(j,0,n+1){

			            res[j]=temp[j];

			        }

	 				

	            	}

		        LL temp[n + 10];

			memset(temp,0,sizeof temp);

		        FOR(j,0,n+1){

				FOR(k,0,j+1){

		                    temp[j]=( ((LL)temp[j]%MOD) + ( ((LL)dp[k]) * dp[j-k] ) %MOD )%MOD;

		                }

		        }

		        FOR(j,0,n+1){

		        	dp[j]=temp[j];

		        }

		        i<<=1;

                }
                //PA(res,n+1);

                printf("%lld\n", res[n]);

	}

	return 0;

}

