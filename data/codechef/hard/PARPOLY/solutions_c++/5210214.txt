#include<iostream>
#define MOD (1000000007)
#define LIMIT (-1+(1<<63)-(MOD*MOD))
#define LL long long
LL M,N,X,D;
LL dp[500][1000];
LL c[2000];
long long power(long long a,long long p)
{
	long long res=1;
	if(a>=MOD)
	a%=MOD;
	
	while(p)
	{
		if(p&1)
		{
			res=res*a;
			
			if(res>=MOD)
			res%=MOD;
			
			
		}
		
		p>>=1;
		
		a=a*a;
		
		if(a>=MOD)
		a%=MOD;
	}
	
	return res;
}
long long row[5000];
long long func(long long x)
{
	long long res=0;
	int i;
	for(i=0;i<=D;i++)
	{
		res=res+c[i]*power(x,i);
		if(res>LIMIT)
		{
			res%=MOD;
		}
	}
	
	return res%MOD;
	
}
long long q[5000];
int P;
int v[1000];
int main()
{
	LL T,i,j,k;
	
	scanf("%lld",&T);
	
	while(T--)
	{
		scanf("%lld%lld%lld",&M,&N,&X);
		
		scanf("%lld",&D);
		
		for(i=0;i<=D;i++)
		{
			scanf("%lld",&c[i]);
			
			
			
			if(c[i]>=MOD)
			{
				c[i]%=MOD;
			}
		}
		
		
		for(i=0;i<=N;i++)
		{
			dp[1][i]=func(i*X);
		}
		int head=0,tail=0;
		
		q[tail++]=M;
		int ctr=0;
		while(head<tail)
		{
			long long x=q[head++];
			
			if(x!=1)
			{
				row[ctr++]=x;
				if(x&1)
				{
			
					q[tail++]=x/2;
				
					q[tail++]=x/2+1;
				
				}
				else
				{
					q[tail++]=x/2;
				}
			
			}
		}
		for(i=1;i<=M;i++)
		{
			v[i]=0;
		}
		v[1]=1;
		
		for(P=ctr-1;P>=0;P--)
		{
			i=row[P];
			if(!v[i])
			{
				v[i]=1;
				
				for(j=0;j<=N;j++)
				{
					dp[i][j]=0;
					if(i&1)
				{
					for(k=0;k<=j;k++)
					{
						dp[i][j]+=(dp[i/2][j-k]*dp[i/2+1][k]);
						if(dp[i][j]>LIMIT)
						dp[i][j]%=MOD;
					}
					dp[i][j]%=MOD;
				}
				else
				{
					for(k=j;k>=j/2+1;k--)
					{
						dp[i][j]+=(dp[i/2][k]*dp[i/2][j-k]);
						if(dp[i][j]>LIMIT)
						dp[i][j]%=MOD;
					}
					dp[i][j]*=2;
					if(dp[i][j]>LIMIT)
					{
						dp[i][j]%=MOD;
					}
					if(!(j&1))
					{
						dp[i][j]+=(dp[i/2][j/2]*dp[i/2][j/2]);
					}
					
					dp[i][j]%=MOD;
					
					
					
				}
			}
		}
		
		
		/*
		
		for(i=2;i<=M;i++)
		{
			for(j=0;j<=N;j++)
			{
				dp[i][j]=0;
				
				if(i&1)
				{
					for(k=0;k<=j;k++)
					{
						dp[i][j]+=(dp[i/2][j-k]*dp[i/2+1][k]);
						if(dp[i][j]>LIMIT)
						dp[i][j]%=MOD;
					}
					dp[i][j]%=MOD;
				}
				else
				{
					for(k=j;k>=j/2+1;k--)
					{
						dp[i][j]+=(dp[i/2][k]*dp[i/2][j-k]);
						if(dp[i][j]>LIMIT)
						dp[i][j]%=MOD;
					}
					dp[i][j]*=2;
					if(dp[i][j]>LIMIT)
					{
						dp[i][j]%=MOD;
					}
					if(!(j&1))
					{
						dp[i][j]+=(dp[i/2][j/2]*dp[i/2][j/2]);
					}
					
					dp[i][j]%=MOD;
					
					
				
				}
			}
		}
		*/
		
		
	}
	printf("%lld\n",dp[M][N]);
}
	return 0;
}