#include <iostream>
#include <string>
#include <cstring>
#include <map>

#define MOD 86837
#define MOG 90239

#define MN 15
#define MX 11000
#define OK 11111

#define mp make_pair
#define F first
#define S second

using namespace std;

int N;

char s[MN][MX];

pair<int, int> P, tp;
map<pair<int, int>, pair<int, int> >Hash;

int min(int a, int b) {
    if (a > b) return b;
    else return a;
}
int can(int L) {
	
	int i, k, t;
	
	int h, g;	
	int am(1), bm(1);
	
	for (i = 1; i < L; i ++) {
		am = 26 * am; am %= MOD;
		bm = 26 * bm; bm %= MOG;
	}
	
	Hash.clear();
	
	for (i = 0; i < N; i ++) {
		
		h = g = 0LL;
		
		for (k = 0; s[i][k]; k ++) {
			
			if (k < L) {
			
				h = h * 26 + (s[i][k] - 'a'); h %= MOD;
				g = g * 26 + (s[i][k] - 'a'); g %= MOG;
				
				if (k == L - 1) {
					P = make_pair(h, g);
					if (i) {
						if (Hash.count(P)) {
							tp = Hash[P];
							if (tp.F == i - 1 && tp.S == OK) Hash[P] = mp(i, k);
							else if (tp.F == i && tp.S <= k - L) Hash[P] = mp(i, OK);
						}
					} else {
						if (Hash.count(P)) {
							int p = Hash[P].S;
							if (p <= k - L)
								Hash[P] = mp(0, OK);
						}
						else Hash[P] = mp(0, k);
					}
				}

			} else {

				h = ((h - am * (s[i][k - L] - 'a')) % MOD) * 26 + (s[i][k] - 'a');
				h = ((h % MOD) + MOD) % MOD;
				
				g = ((g - bm * (s[i][k - L] - 'a')) % MOG) * 26 + (s[i][k] - 'a');
				g = ((g % MOG) + MOG) % MOG;

				P = make_pair(h, g);
	
				if (i) {
					if (Hash.count(P)) {
						tp = Hash[P];
						if (tp.F == i - 1 && tp.S == OK) Hash[P] = mp(i, k);
						else if (tp.F == i && tp.S <= k - L) Hash[P] = mp(i, OK);
					}
				} else {
					if (Hash.count(P)) {
						int p = Hash[P].S;
						if (p <= k - L)
							Hash[P] = mp(0, OK);
					}
					else Hash[P] = mp(0, k);
				}
				if (Hash.count(P)) {
					tp = Hash[P];
					if (tp.F == N - 1 && tp.S == OK) return 1;
				}
			}
		}
	}
	return 0;
}

main() {
	
		
	int tCase;
	cin >> tCase;
	
	int st, en, mid, i;
	
	while (tCase --) {
		
		cin >> N;
		en = MX;
		for (int i = 0; i < N; i ++) {
			scanf("%s", s[i]);
			en = min(en, strlen(s[i]));
		}
		st = 1;
		
		while (st < en) {
			mid = (st + en + 1) >> 1;
			if (can(mid)) st = mid;
			else en = mid - 1;
		}
		if (!can(st)) st = 0;
		cout << st << endl;
	}
}
