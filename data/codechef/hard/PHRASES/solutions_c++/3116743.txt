#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <iostream>
#include <set>
using namespace std;
const int MAX_N = 11;
const int MAX_L = 10010;
const int MAX = MAX_N * MAX_L;
int nAns;
char szStr[MAX_L];
int nNum[MAX];
int nLoc[MAX];
int sa[MAX], rank[MAX], height[MAX];
int wa[MAX], wb[MAX], wv[MAX], wd[MAX];
bool CmpStr(const char* pszOne, const char* pszTwo)
{
	return strcmp(pszOne, pszTwo) < 0;
}
bool EqualStr(const char* pszOne, const char* pszTwo)
{
	return strcmp(pszOne, pszTwo) == 0;
}
int cmp(int* r, int a, int b, int l)
{
	return r[a] == r[b] && r[a + l] == r[b + l];
}
void da(int* r, int n, int m)
{
	int i, j, p, *x = wa, *y = wb;
	for (i = 0; i < m; ++i) wd[i] = 0;
	for (i = 0; i < n; ++i) wd[x[i] = r[i]]++;
	for (i = 1; i < m; ++i) wd[i] += wd[i - 1];
	for (i = n - 1; i >= 0; --i) sa[--wd[x[i]]] = i;
	for (j = 1, p = 1; p < n; j *= 2, m = p)
	{
		for (p = 0, i = n - j; i < n; ++i) y[p++] = i;
		for (i = 0; i < n; ++i) if (sa[i] >= j) y[p++] = sa[i] - j;
		for (i = 0; i < n; ++i) wv[i] = x[y[i]];
		for (i = 0; i < m; ++i) wd[i] = 0;
		for (i = 0; i < n; ++i) wd[wv[i]]++;
		for (i = 1; i < m; ++i) wd[i] += wd[i - 1];
		for (i = n - 1; i >= 0; --i) sa[--wd[wv[i]]] = y[i];
		swap(x, y);
		for (p = 1, x[sa[0]] = 0, i = 1; i < n; ++i)
		{
			x[sa[i]] = cmp(y, sa[i - 1], sa[i], j)? p - 1 : p++;
		}
	}
}
void calHeight(int* r, int n)
{
	int i, j, k = 0;
	for (i = 1; i <= n; ++i) rank[sa[i]] = i;
	for (i = 0; i < n; height[rank[i++]] = k)
	{
		if (k) --k;
		for(j = sa[rank[i] - 1]; r[i + k] == r[j + k]; k++);
	}
}
bool Check(int nMid, int nN, int nK)
{
	int nCnt = 0;
	set<int> st[11];
	if(nLoc[sa[0]] < nK) st[nLoc[sa[0]]].insert(sa[0]);
	for (int i = 1; i <= nN; ++i)
	{
		if (height[i] < nMid)
		{
			for(int j = 0; j < nK; j++)
				st[j].clear();
			if(nLoc[sa[i]] < nK) st[nLoc[sa[i]]].insert(sa[i]);
		}
		else
		{
			if(nLoc[sa[i]] < nK) st[nLoc[sa[i]]].insert(sa[i]);
		}
		nCnt = 0;
		for(int j = 0; j < nK; j++)
			if(st[j].size() && ((*st[j].rbegin()) - (*st[j].begin()) >= nMid)) nCnt++;
		if(nCnt == nK) return true;
	}
	return false;
}
int main()
{
	int nN, ca;
	for(scanf("%d", &ca); ca--; ){
		scanf("%d", &nN);
		int nEnd = 300;
		int nP = 0;
		for (int i = 0; i < nN; ++i)
		{
			scanf("%s", szStr);
			int nLen = strlen(szStr);
			for (int j = 0; j < nLen; ++j)
			{
				nNum[nP] = szStr[j];
				nLoc[nP++] = i;
			}
			nNum[nP] = nEnd;
			nLoc[nP++] = nEnd++;
		}
		nNum[nP] = 0;
		da(nNum, nP + 1, 500);
		calHeight(nNum, nP);
		int nLeft = 1, nRight = strlen(szStr);
		int nTemp = 0, nMid;
		int nK = nN;
		nAns = 0;
		while (nLeft <= nRight)
		{
			nMid = (nLeft + nRight) >> 1;
			if (Check(nMid, nP, nK))
			{
				nTemp = nMid;
				nLeft = nMid + 1;
			}
			else nRight = nMid - 1;
		}
		printf("%d\n", nTemp);
	}
	return 0;
} 