#include <cstdio>
#include <cassert>
#include <vector>
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
 
#define NLIMIT 100000
#define TLIMIT 100
#define MLIMIT 100
#define VLIMIT 1000
#define N NLIMIT+100
#define M MLIMIT+100
 
//Mincost code start
#define MCN MLIMIT*5
#define MCM MCN*MCN
#define rep(i,a) for(int i=0; i<a; i++)
int last[MCN], tlast[MCN], d[MCN], v[MCN];
int ver[MCM*2], next[MCM*2], c[MCM*2], cost[MCM*2];
int S,T,ptr;
 
void addEdge(int from, int to, int cap, int co) {
	ver[ptr] = to; c[ptr] = cap; cost[ptr] = co; next[ptr] = last[from]; last[from] = ptr++;
	ver[ptr] = from; c[ptr] = 0; cost[ptr] = -co; next[ptr] = last[to]; last[to] = ptr++;
}
int opp(int n) { return (n&1)?n+1:n-1; }
bool relable() {
	int add = 0x7fffffff;
	rep(i,T+1) if(v[i]) for(int j=tlast[i]; j; j = next[j]) if(v[ver[j]]==0 && c[j] && (add > (d[ver[j]]+cost[j]-d[i])))
			add = d[ver[j]] + cost[j] - d[i];
	if(add == 0x7fffffff) return false;
	rep(i,T+1) if(v[i]) {
		v[i] = false;
		d[i] += add;
		last[i] = tlast[i];
	} 
	return true;
}
int dfs(int cur, int flow) {
	if(cur == T) return flow;
	v[cur] = 1;
	int t;
	for(int &i=last[cur]; i; i = next[i]) if(c[i] && v[ver[i]]==0 && d[cur] == d[ver[i]]+cost[i] && (t = dfs(ver[i], (flow < c[i]?flow:c[i])))) {
		c[i] -= t;
		c[opp(i)] += t;
		v[cur] = 0;
		return t;
	}
	return 0;
}
int flow, flfl=0;
int MCMF(int _S, int _T) {
	S = _S;
	T = _T;
	int ans = 0;
	rep(i,T+1) d[i] = 0, tlast[i] = last[i], v[i] = 0;
	do {
		int t;
		while(t=dfs(S,0x7fffffff)) {
			ans += t*d[S];
			flow += t;
		}
	} while(relable());
	return ans;
}
//Mincost code end
 
int val[N], siz[N], least;
int val2[M];
vector <int> adj[N];
bool vv[N] = {0};
 
void dfs1(int cur, int prev) {
	vv[cur ] = true;
	siz[cur] = 0;
	for(int i=0; i<adj[cur].size(); i++) if( adj[cur][i] != prev ) {
		siz[cur]++;
		dfs1(adj[cur][i], cur);
	}
}
 
int main() {
	int n;
	scanf("%d", &n);
	assert(1 <= n && n <= NLIMIT);
	least = VLIMIT;
	for(int i=0; i<n; i++) {
		scanf("%d", &val[i]);
		assert(1 <= val[i] && val[i] <= VLIMIT);
		if( val[i] < least ) least = val[i];
	}
	for(int i=1; i<n; i++) {
		int u, v;
		scanf("%d%d", &u, &v);
		assert(1 <= u && u <= n);
		assert(1 <= v && v <= n);
		u--; v--;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	dfs1(0, -1);
	rep(i, n) if(vv[i] == 0) {
		assert(false);
	}
 
	vector < pair <int, int> > ordered(n);
	for(int i=0; i<n; i++) {
		ordered[i] = make_pair(val[i], siz[i]);
	}
	sort( ordered.begin(), ordered.end() );
 
	int testcases;
	scanf("%d", &testcases);
	assert(1 <= testcases && testcases <= TLIMIT);
	while(testcases--) {
		int m, x, y;
		scanf("%d%d%d", &m, &x, &y);
		assert(1 <= m && m <= MLIMIT);
		assert(1 <= x && x <= VLIMIT);
		assert(1 <= y && y <= VLIMIT);
		for(int i=0; i<m; i++) {
			scanf("%d", &val2[i]);
			assert(1 <= val2[i] && val2[i] <= VLIMIT);
		}
		int count = 0;
		ptr = 1;
		S = 0; T = 1 + m + m + m + m + 1;
		memset(last, 0, sizeof last);
		for(int i=0; i<m; i++) {
			addEdge(S, 1+i, 1, 0);
		}
		for(int i=0; i<n; i++) {
			if( ordered[i].second < x ) {
				//addEdge from each on left to it with x-orde.ss
				for(int j=0; j<m; j++) {
					addEdge(1+j, 1+m+count, 1, ordered[i].first*val2[j]);
				}
				addEdge(1+m+count, T, x-ordered[i].second, 0);
				// addEdge(1+m+count, T, m, y);
				count += x-ordered[i].second;
				if(count >= m) {
					break;
				}
			}
		}
		for(int i=0; i<m; i++) {
			for(int j=0; j<i; j++) {
				addEdge(1+i, 1+m+m+j, 1, val2[i]*val2[j]);
				addEdge(1+i, 1+m+m+m+j, 1, val2[i]*val2[j]);
			}
			addEdge(1+m+m+i, T, x, 0);
			addEdge(1+m+m+m+i, T, m, y);
			addEdge(1+i, 1+m+m+m+m, 1, val2[i]*least);
		}
		addEdge(1+m+m+m+m, T, m, y);
		flow = 0;
		int ans = MCMF(S, T);
		assert(flow == m);
		printf("%d\n", ans);
	}
	return 0;
} 