#include<cstdio>
#define mod 1000000007
using namespace std;
 
 
long long int modulo(int a,int b,int c){
    
	if(a==0 && b==0){
		return 1;
	}
	if(a==0){
		return 0;
	}
	long long int x=1,y=a; 
    while(b > 0){
        if(b%2 == 1){
            x=(x*y)%c;
        }
        y = (y*y)%c; 
        b /= 2;
    }
    return x%c;
}
 
 
 
 
 
 
 
long long int modular_pow(int base,int exponent,int modulus){
   if(base==0 && exponent==0){
		return 1;
	}
   int  result = 1;
    while (exponent > 0){
        if (exponent % 2 == 1)
           result = (result * base) % modulus;
        exponent = exponent >> 1;
        base = (base * base) % modulus;
    }
    return result;
}
 
 
 
 
long long int power(int x,int y,int z){
	if(x==0 && y==0){
		return 1;
	}
	if(x==0){
		return 0;
	}
	if(y==1){
		return x; 
	}
	if(y==0){
		return 1;
	}
	long long int res;
	res=power(x,y/2,z);
	res=(res*res)%z;
	if(y%2==1)
	return (x*res)%z;
	return res;
}
int main(){
	int tc;
	long long int u,d,m,n,i,j,k,iemp,kemp,jemp,t1,jcnt,icnt,count;
	scanf("%d",&tc);
	while(tc--){
		scanf("%lld%lld%lld%lld",&u,&d,&m,&n);
		iemp=0;
		for(i=0;i<n && i<=u;i++){
			jemp=0;
			for(j=0;j<n && j<=u;j++){
				kemp=0;
				for(k=0;k<n && k<=u;k++){
						t1=(modular_pow(i,d,n)+modular_pow(j,d,n)+modular_pow(k,d,n))%n;
						if(t1==m)
						kemp=(kemp+(u-k)/n +1)%mod;		
				}
				jcnt=((u-j)/n+1); 
				jemp=(jemp+((jcnt)*kemp)%mod)%mod;
			}
			icnt=((u-i)/n+1);
			iemp=(iemp+(jemp*icnt)%mod)%mod;
		}
		printf("%lld\n",iemp);
	}
	return 0;
} 