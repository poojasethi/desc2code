#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<fstream>
#include<sstream>
#include<cmath>
#include<stack>
#include<assert.h>
#include <stdio.h>
using namespace std;

#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define S(X) ( (X) * (X) )
#define SZ(V) (int )V.size()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define ALL(V) V.begin(), V.end()

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef vector<int> VI;



//typedef int LL;
typedef long long LL;

LL BIGMOD(LL a, LL b, LL m)
{
	if(b == 0) return 1%m;

	LL x = BIGMOD(a, b/2, m);
	x = (x*x)%m;

	if(b&1) x = (x*a)%m;

	return x;
}

LL MOD = 1000000007;

int main()
{
	int T;
	LL cnt[50];
	int upper, d, m, n;
	int now, i, j, k;
	int ans;

	scanf("%d", &T);
	

	while(T--)
	{
		scanf("%d %d %d %d", &upper, &d, &m, &n);

		
		CLR(cnt);

		//count how many i are there so that, i^d % n
		FORN(i, n)
		{
			now = BIGMOD(i, d, n);

			if(i <= upper)
				cnt[now] += (upper - i)/n + 1;
		}

		//You have the counts.. now check if x^d + y^d + z^d = m % n.
		//It can be done in O(n^2) as well.
		ans = 0;
		FORN(i, n)
			FORN(j, n)
			FORN(k, n)
		{
			if( (i + j + k)%n == m%n )
			{
				ans += (cnt[i]*((cnt[j]*cnt[k])%MOD))%MOD;
				ans %= MOD;
			}
		}

		printf("%d\n", ans);
	}

	return 0;
}
