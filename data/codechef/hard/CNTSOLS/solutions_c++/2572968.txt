#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cmath>
#include <queue>
#include <cstdio>
#include <set>
#include <map>
#include <cstdlib>
#include <cstring>
#include <stack>
#include <cassert>
typedef unsigned long long ULL;
typedef long long LL;
#define MOD 1000000007
#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define SZ(V) (int )V.size()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define ALL(V) V.begin(), V.end()p))

#define LL long long int
#define ULL unsigned long long int
#define S(n)	scanf("%d",&n)
#define Sl(n)	scanf("%lld",&n)
#define Sf(n)	scanf("%lf",&n)
#define Ss(n)	scanf("%s",n)
using namespace std;
int powermod(int a,int b,int m){
    int ans=1;
    while(b>0){
        if(b&1)
            ans=(ans*a)%m;
        b=b>>1;
        a=(a*a)%m;
    }
    return ans;
}
LL sol(int i,int upper,int n){
    if(upper%n>=i)
        return (upper/n)+1;
    return (upper/n);
}
int main()
{

    int t,arr[41],upper,n,d,m,i,j,k;
    LL ans,a;
    S(t);
    while(t--){
        ans=0;
        S(upper);S(d);S(m);S(n);
        CLR(arr);
        FORN(i,n)
            arr[i]=powermod(i,d,n);
        FORN(i,n)
            FORN(j,n)
                FORN(k,n){
                    if(((arr[i]+arr[j]+arr[k])%n)==m)
                    {
                        a=sol(i,upper,n);
                        a=(((a*sol(k,upper,n))%MOD)*sol(j,upper,n))%MOD;
                        ans=(ans+a)%MOD;
                    }
                }
        printf("%lld\n",ans);
    }
    return 0;
}
