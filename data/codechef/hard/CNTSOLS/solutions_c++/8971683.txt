#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;

long long int power_2[40];
int pow_mod_result[40];
long long int occ[40];

set<int> get_binary(int d){
	set<int> bin;
	while(d > 0){
		for (int i = 0; i < 40; ++i){
			if(power_2[i]*2 > d){
				d = d - power_2[i];
				bin.insert(i);
				break;
			}
		}
	}
	return bin;
}

int main(){
	int modulo = 1000000007;
	power_2[0] = 1;
	for (int i = 1; i < 40; ++i){
		power_2[i] = 2*power_2[i-1];
	}

	int t;
	cin >> t;
	while(t--){
		int upper, d, m, n;
		scanf("%d %d %d %d", &upper, &d, &m, &n);
		set<int> bin;
		
		if(d == 0){
			for (int i = 0; i < n; ++i){
				pow_mod_result[i] = 1;
			}
		}
		else{
			bin = get_binary(d);
			set<int> :: iterator it = bin.end();
			it--;
			int max_power = (*it);
			int powers[40];
			// cout << "MAX POWER " << max_power << endl;
			for (int i = 0; i < n; ++i){
				powers[0] = i;
				// cout << i << "->";
				for (int j = 1; j <= max_power; ++j){
					powers[j] = (powers[j-1]*powers[j-1])%n;
					// cout << powers[j] << "::"; 
				}
				// cout << endl;
				it = bin.begin();
				int ans = 1;
				while(it != bin.end()){
					ans = (ans * powers[*it])%n;
					it++;
				}
				pow_mod_result[i] = ans;
			}	
		}

		int divisor = upper/n;
		int rem = upper%n;

		for (int i = 0; i < n; ++i){
			occ[i] = divisor;
			if(i <= rem){
				occ[i]++;
			}
		}

		/*for (int i = 0; i < n; ++i){
			cout << i << " " << occ[i] << " " << pow_mod_result[i] << ";";
		}
		cout << endl;
		*/
		long long int ans = 0;
		for (int i = 0; i < n; ++i){
			for (int j = 0; j < n; ++j){
				for (int k = 0; k < n; ++k){
					int mod_sum = (pow_mod_result[i] + pow_mod_result[j] + pow_mod_result[k])%n;
					long long int additional = 0;
					if(mod_sum == m%n){
						additional = (((occ[i] * occ[j]) % modulo) * occ[k]) % modulo;
						// cout << i << " " << j << " " << k << " " << additional << endl;
						ans += additional;
						ans = ans % modulo; 
					} 
				}
			}
		}

		printf("%lld\n", ans);
	}


	/*int d;
	cin >> d;
	set<int> bin = get_binary(d);
	*/
}