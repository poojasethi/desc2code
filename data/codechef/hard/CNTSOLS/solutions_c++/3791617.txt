#include<bits/stdc++.h>

#define ll long long
#define mod 1000000007

ll array[40];
int power_value[40];

int power(int ,ll ,int );

int main()
{
    int t,m,N;    ll upper,d,no_of_solution;

    scanf("%d",&t);

    while(t--)
    {
        scanf("%lld%lld%d%d",&upper,&d,&m,&N);
        no_of_solution=0;
        int counter=upper/N;
        for(int i=0 ; i<40 ; i++)
             power_value[i]=-1;

        for(int i=0 ; i<N ; i++)
            array[i]=counter;

        int i=counter*N;
        int k=0;

        for(;i<=upper;i++,k++)
                  array[k]++;


        int upperBound;
       if(N<=upper)
       {
           upperBound=N-1;
       }

       else upperBound=upper;

       for(int i=0 ; i<=upperBound ; i++)
       {
           for(int j=0 ; j<=upperBound  ; j++)
           {
                    for(int k=0 ; k<=upperBound ; k++)
                    {
                           int  l = power(i,d,N) + power(j,d,N) + power(k,d,N);
                           //int l=pow(i,d) + pow(j,d)+pow(k,d);
                           if ( l % N == m )
                           {
                               //printf("%d %d  %d \n",i,j,k);
                               no_of_solution =(no_of_solution + ( (array[i] * array[j])%mod * array[k] )%mod)%mod;
                           }
                    }
           }

       }

       printf("%lld\n",no_of_solution);




    }

}

int power(int i,ll d , int N)


{
    int l=i;
    if(power_value[i]!=-1) return power_value[i];
    int extra=1;

      while(1)
      {
          if(d==0) {i=1 ; break;}
          if(d==1 )    break;

          if((d%2)!=0)
          {
              extra=(extra*i)%N;
              d--;
          }

          else{

            i=(i*i)%N;
            d =d/2;

          }

      }
      int k=(i*extra)%N ;
      power_value[l]=k;
       return k;


}
