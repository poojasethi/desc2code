/***********Template Starts Here***********/
#pragma comment (linker,"/STACK:16777216")
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <map>
#include <queue>
#include <stack>
#include <vector>
#include <deque>
#include <functional>
#include <string>
#include <iostream>
#include <cctype>

#define pb push_back
#define nl puts ("")
#define sp printf ( " " )
#define phl printf ( "hello\n" )
#define all(c) (c).begin(),(c).end()
#define tr(container, it) for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define sz(a) int((a).size())

using namespace std;

typedef long long vlong;
typedef unsigned long long uvlong;
typedef vector < int > vi;
typedef pair < int, int > ii;
typedef vector < ii > vii;


const vlong inf = 2147383647;
const double pi = 2 * acos ( 0.0 );
const double eps = 1e-9;
const vlong maxint = 2147483647;
const vlong minint = -2147483648;

/***********Template Ends Here***********/
vlong power ( vlong a, vlong p, vlong m ) {
    vlong res = 1, x = a;
    while ( p ) {
        if ( p & 1 ) res = ( res * x ) % m;
        x = ( x * x ) % m;
        p >>= 1;
    }
    return res;
}

int main () {
    //freopen ( "input.txt", "r", stdin );
    //freopen ( "output.txt", "w", stdout );
    int kase;
    scanf ( "%d", &kase );

    while ( kase-- ) {
        int upper, d, m, n;
        scanf ( "%d %d %d %d", &upper, &d, &m, &n );

        int lim = min ( upper + 1, n );
        vlong a, b, c;
        vlong res = 0;
        vlong mod = 1000000007;
        for ( a = 0; a < lim; a++ ) {
            vlong x = power ( a, d, n );
            vlong p = ( upper - a ) / n;
            for ( b = 0; b < lim; b++ ) {
                vlong y = power ( b, d, n );
                vlong q = ( upper - b ) / n;
                for ( c = 0; c < lim; c++ ) {
                    vlong z = power ( c, d, n );
                    vlong r = ( upper - c ) / n;

                    vlong sum = ( x + y + z ) % n;
                    if ( sum == m ) {
                        //printf ( "%lld %lld %lld %lld %lld %lld\n", a, b, c, x, y, z );
                        res += ( ( ( ( ( p + 1 ) % mod ) * ( ( q + 1 ) % mod ) ) % mod ) * ( (r + 1 ) % mod ) ) % mod;
                        res %= mod;
                    }
                }
            }
        }
        printf ( "%lld\n", res );
    }

    return 0;
}
