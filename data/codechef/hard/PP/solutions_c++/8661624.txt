#include<bits/stdc++.h>
using namespace std;
int mark1[1000005],mark2[1000005];
unsigned long long suffix[1000005],prefix[1000005],pw[1000005];
unsigned long long prim=0xabcdef,mod=1000000007;
struct trie{
	trie *p[26];
	int ut,bl;
	trie()
	{
		for(int i=0;i<26;i++)
		p[i]=NULL;
		ut=0,bl=0;
	}
}*pr,*sr;
unsigned long long get(unsigned long long def[],int l,int r)
{
	return (def[r+1]-def[l]*pw[r-l+1]);
}
void suffix_pal(string w,int mark[])
{
	int l=w.size();
    prefix[0]=0;
    suffix[0]=0;
    for(int i=0;i<l;i++)
    {
    	prefix[i+1]=(prefix[i]*prim+w[i]);
    	suffix[i+1]=(suffix[i]*prim+w[l-1-i]);
    }
    for(int i=l-1;i;i--)
    {
    	if(get(prefix,0,i-1)==get(suffix,l-i,l-1))
    	mark[l-i]=1;
    }
    mark[l]=1;
}
long long answer=0;
void ans(trie *cur,string w)
{
	suffix_pal(w,mark1);
	reverse(w.begin(),w.end());
	suffix_pal(w,mark2);
	for(int i=-1;;)
	{
		if(cur->p[w[i+1]-'a']==NULL)
		break;
		cur=cur->p[w[++i]-'a'];
		answer+=mark1[i+1]*cur->ut;
		if(i==w.size()-1)
		{
			answer+=cur->bl;
			break;
		}
	}
		for(int i=0;i<=w.size();i++)
		mark1[i]=0;
}
void insert(trie *cur,string w)
{
	for(int i=-1;;)
	{
		if(cur->p[w[i+1]-'a']==NULL)
		cur->p[w[i+1]-'a']=new trie();
		cur=cur->p[w[++i]-'a'];
		if(i==w.size()-1)
		{
			cur->ut+=1;
			break;
		}
		cur->bl+=mark2[i+1];
	}
	for(int i=0;i<=w.size();i++)
	mark2[i]=0;
}
string st[1000005];
char s[1000005];
int main()
{
	pw[0]=1;
	for(int i=1;i<=1000000;i++)
	pw[i]=(pw[i-1]*prim);
	int t,n;
	scanf("%d",&t);
	while(t--)
	{
		pr=new trie();
		sr=new trie();
		scanf("%d",&n);
		answer=0;
		for(int i=0;i<n;i++)
		{
			scanf("%s",s);
			st[i]=s;
		}
		for(int i=0;i<n;i++)
		{
			ans(pr,st[i]);
			insert(pr,st[i]);
		}
		for(int i=n-1;i>=0;i--)
		{
			ans(sr,st[i]);
			insert(sr,st[i]);
		}
		printf("%lld\n",answer);
	}
}