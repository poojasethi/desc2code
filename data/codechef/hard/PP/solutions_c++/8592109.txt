#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define test int t;scanf("%d", &t);while(t--)
#define pb push_back
#define all(x) x.begin(),x.end() 
#define mp make_pair
#define ll long long int 
#define vi vector<int>
#define vii vector<pair<int,int> >
#define pii pair<int,int>
#define vl vector<ll>
#define vll vector<pair<ll,ll> >
#define pll pair<ll,ll>
#define ub upper_bound
#define lb lower_bound

#define sc(x) scanf("%d",&x)
#define sc2(x,y) scanf("%d%d",&x,&y)    
#define sc3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define sc4(w,x,y,z) scanf("%d%d%d%d",&w,&x,&y,&z)

#define scll(x) scanf("%lld",&x)
#define scll2(x,y) scanf("%lld%lld",&x,&y)
#define scll3(x,y,z) scanf("%lld%lld%lld",&x,&y,&z)
#define scll4(w,x,y,z) scanf("%lld%lld%lld%lld",&w,&x,&y,&z)

#define scs(s) scanf("%s", s);

#define pr(x) printf("%d\n",x)
#define pr2(x,y) printf("%d %d\n",x,y)
#define pr3(x,y,z) printf("%d %d %d\n",x,y,z)

#define prll(x) printf("%lld\n",x)
#define prll2(x,y) printf("%lld %lld\n",x,y)
#define prll3(x,y,z) printf("%lld %lld %lld\n",x,y,z)

#define prs(s) printf("%s\n", s);

#define prn() printf("\n");

#define prvec(v) for(int i=0;i<v.size();i++) cout << v[i] << " "

#define debug(s) cout << "check : " << s << endl

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])
 
// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)
// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
#define maxr 1000005
 
// trie node
typedef struct trie_node trie_node_t;
struct trie_node
{
    int value, str, inv;
    trie_node_t *children[ALPHABET_SIZE];
};
 
// trie ADT
typedef struct trie trie_t;
struct trie
{
    trie_node_t *root;
    int count;
};
 
// Returns new trie node (initialized to NULLs)
trie_node_t *getNode(void)
{
    trie_node_t *pNode = NULL;
 
    pNode = (trie_node_t *)malloc(sizeof(trie_node_t));
 
    if( pNode )
    {
        int i;
 
        pNode->value = 0;
        pNode->str=pNode->inv=0;
 
        for(i = 0; i < ALPHABET_SIZE; i++)
        {
            pNode->children[i] = NULL;
        }
    }
 
    return pNode;
}
 
// Initializes trie (root is dummy node)
void initialize(trie_t *pTrie)
{
    pTrie->root = getNode();
    pTrie->count = 0;
}
 
// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(trie_t *pTrie, string key, int flag)
{
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;
 
    pTrie->count++;
    pCrawl = pTrie->root;
 
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        if( !pCrawl->children[index] )
        {
            pCrawl->children[index] = getNode();
        }
 
        pCrawl = pCrawl->children[index];
    }
 
    // mark last node as leaf
    pCrawl->value = pTrie->count;
    if(flag)pCrawl->str++;
    else pCrawl->inv++;
}
 
ll end[maxr]={0}, pw[maxr]={0}, ans=0;
// Returns non zero, if key presents in trie
void search(trie_t *pTrie, string key, int flag)
{
    int level;
    int length = key.length();
    int index;
    trie_node_t *pCrawl;
 
    pCrawl = pTrie->root;
 
    ll st = 0, base=26;
    pw[0]=1;
    for(int i=0, j=length-1;i<(length+1)/2;i++,j--)
    {
        st=((st*base)%mod+CHAR_TO_INDEX(key[i]))%mod;
        end[j]=((end[j+1]*base)%mod+CHAR_TO_INDEX(key[j]))%mod;
        if(i>0)pw[i]=(pw[i-1]*base)%mod;
    }
    int len=(length+1)/2;
    for( level = 0; level < length; level++ )
    {
        index = CHAR_TO_INDEX(key[level]);
        pCrawl = pCrawl->children[index];
        if((level%2==0&&length%2==0)||(level%2==1&&length%2==1))
        {
            st-=(pw[len-1]*CHAR_TO_INDEX(key[level]))%mod;
            if(st<0)st+=mod;
            st=((st*base)%mod+CHAR_TO_INDEX(key[level+len]))%mod;
        }
        else
        {
            st-=(pw[len-1]*CHAR_TO_INDEX(key[level]))%mod;
            if(st<0)st+=mod;
            len--;
        }
        //if(level==length-1)prll(st);
        if(st==end[length-len])
        {
            if(flag)
            {
                ans+=pCrawl->inv;
                //cout<<key<<" "<<level<<" "<<ans<<endl;
            }
            else if(level!=length-1)
            {
                ans+=pCrawl->str;
                //cout<<key<<" "<<level<<" "<<ans<<endl;
            }
        }
    }
}
int main()
{
    test
    {
        memset(end,0,sizeof(end));
        memset(pw,0,sizeof(pw));
        ans=0;
        vector<string> vec, inv;
        int n;
        sc(n);
        for(int i=0;i<n;i++)
        {
            string str;
            cin>>str;
            vec.pb(str);
            reverse(all(str));
            inv.pb(str);
        }
        //for(int i=0;i<vec.size();i++)cout<<vec[i]<<" ";
        //prn();
        //for(int i=0;i<inv.size();i++)cout<<inv[i]<<" ";
        //prn();
        trie_t trie;
        initialize(&trie);
        for(int i = 0; i < vec.size(); i++)insert(&trie, vec[i], 1);
        for(int i = 0; i < inv.size(); i++)insert(&trie, inv[i], 0);
        for(int i=0;i<vec.size();i++)
        {
            search(&trie,vec[i],1);
            for(int j=0;j<vec[i].size();j++)end[j]=pw[j]=0;
        }
        for(int i=0;i<inv.size();i++)
        {
            search(&trie,inv[i],0);
            for(int j=0;j<inv[i].size();j++)end[j]=pw[j]=0;
        }
        for(int i=0;i<vec.size();i++)
        {
            int st=0, end=vec[i].size()-1;
            int flag=1;
            while(st<end)
            {
                if(vec[i][st]!=vec[i][end]){flag=0;break;}
                st++;end--;
            }
            if(flag)ans--;
        }
        prll(ans);
    }
 
    return 0;
}
