#include<bits/stdc++.h>
using namespace std;
#define mx 1000006
unsigned long long magic = 0xabcdef; string S[mx];
map <long long ,long long > mp;
unsigned long long pw[mx] ,h1[mx],h2[mx]; long long int ans;
unsigned long long getHash(unsigned long long arr[],int l,int r)
{
	return arr[r+1] - arr[l]*pw[r-l+1];
}
void solve(string s)
{
	h1[0] = h2[0] =0; unsigned long long h;
	int l = s.length();
	for(int i=0;i<l;i++)
	{
		h1[i+1] = h1[i]*magic + s[i];
		h2[i+1] = h2[i]*magic + s[l-i-1];
	}
	mp[h1[l]]--;
	for(int i=1;i<l;i++)
	{
		if(getHash(h1,i,l-1) == getHash(h2,0,l-1-i))
		{
			h = getHash(h2,l-i,l-1);
			ans+=mp[h];
		}
	}
	for(int i=0;i<l-1;i++)
	{
		if(getHash(h1,0,i) == getHash(h2,l-1-i,l-1))
		{
			h = getHash(h2,0,l-i-2);
			ans+=mp[h];
		}
	}
	h = h2[l];
	ans+=mp[h];
	mp[h1[l]]++;
}

int main()
{ int t,n; 
	cin>>t;
	pw[0] = 1;
	for(int i=1;i<=mx;i++)
		pw[i] = pw[i-1]*magic;
	while(t--)
	{
		mp.clear();
		ans=0;
		cin>>n;
		
		for(int i=0;i<n;i++)
			{ 
				cin >> S[i];
				int l = S[i].length(); unsigned long long h=0;
				for(int j=0;j<l;j++)
					h = h*magic + S[i][j];
				mp[h]++;
			}
			for(int i=0;i<n;i++)
				solve(S[i]);	
			cout << ans << "\n";
	}
}