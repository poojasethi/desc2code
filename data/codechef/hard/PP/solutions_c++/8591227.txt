#include<bits/stdc++.h>
#define rep(i,x,y) for(i=x;i<y;i++)
#define rrep(i,x,y) for(i=x;i>=y;i--)
#define trv(y,x) for(typeof(x.begin())y=x.begin();y!=x.end();y++)
#define trvr(y,x) for(typeof(x.rbegin())y=x.rbegin();y!=x.rend();y++)
#define pb(f) push_back(f)
#define pi(a) printf("%d\n",a)
#define pil(a) printf("%lld\n",a)
#define pi_ printf("\n")
#define pil(a) printf("%lld\n",a)
#define sc(a) scanf("%d",&a)
#define ll long long
#define scl(a) scanf("%lld",&a)
#define scs(a) scanf("%s",a)
#define mp make_pair
#define fi first
#define se second
#define maxn 300005
#define mod 1000000007
using namespace std;
//#include<windows.h>
//FILE *fin = freopen("nice.in","r",stdin);
//FILE *fout = freopen("nice.out","w",stdout);
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector< pii > vpii;
string A[1000005];
ll hash[1000005];
ll mul =47;
bool comp(string aa,string bb)
{
	return aa.size()<bb.size();
}
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int t,i,j,k;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		rep(i,1,n+1)
		{
			cin>>A[i];
		}
		sort(A+1,A+n+1,comp);
		map<ll,ll> M; // reverse hashes
		ll ans=0;
		rep(i,1,n+1)
		{
			ll prev=0;
			rep(j,0,A[i].size())
			{
				hash[j]=(prev*mul+A[i][j]-'_')%mod;
				prev=hash[j];
			}
			// check for complete string
			if(M.count(hash[A[i].size()-1]))
			ans+=M[hash[A[i].size()-1]];
			
			ll tempmul=1,fromstart=0,fromend=0;
			for(j=A[i].size()-1;j>0;j--)
			{
				fromend=(fromend*mul+A[i][j]-'_')%mod;
				fromstart=((A[i][j]-'_')*tempmul+fromstart)%mod;
				tempmul=(tempmul*mul)%mod;
				if(fromstart==fromend)
				{
					if(M.count(hash[j-1]))
					ans+=M[hash[j-1]];
				}
			}
			//add current reverse hash
			fromend=(fromend*mul+A[i][j]-'_')%mod;
			M[fromend]++;
		}
		M.clear();
		rep(i,1,n+1)
		{
			reverse(A[i].begin(),A[i].end());
			ll prev=0;
			rep(j,0,A[i].size())
			{
				hash[j]=(prev*mul+A[i][j]-'_')%mod;
				prev=hash[j];
			}
			// check for complete string
			if(M.count(hash[A[i].size()-1]))
			ans+=M[hash[A[i].size()-1]];
			
			
			ll tempmul=1,fromstart=0,fromend=0;
			for(j=A[i].size()-1;j>0;j--)
			{
				fromend=(fromend*mul+A[i][j]-'_')%mod;
				fromstart=((A[i][j]-'_')*tempmul+fromstart)%mod;
				tempmul=(tempmul*mul)%mod;
				if(fromstart==fromend)
				{
					if(M.count(hash[j-1]))
					ans+=M[hash[j-1]];
				}
			}
			//add current reverse hash
			fromend=(fromend*mul+A[i][j]-'_')%mod;
			M[fromend]++;
		}
		M.clear();
		cout<<ans<<endl;
	}
}