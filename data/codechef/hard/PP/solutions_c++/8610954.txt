#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <queue>
#include <algorithm>
#include <vector>
#include <cstring>
#include <stack>
#include <utility>
#include <map>
#include <set>
#include <string>
using namespace std;
#define INF (int(1e9))
#define INFL (LL(1e18))
#define in2(n,m) scanf("%d %d",&n,&m);
#define in3(x,y,z) scanf("%d %d %d",&x,&y,&z);
#define in4(p,q,r,s) scanf("%d %d %d %d",&p,&q,&r,&s);
#define getcx getchar
inline void in(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
int PA = 30;
int modA = 1000000007;

int PB = 29;
int modB = 1000000009;

long long int HashFwdA[1000006],HashBwdA[1000006];
long long int HashFwdB[1000006],HashBwdB[1000006];

long long int PPA[1000006];
long long int PPB[1000006];

void pre()
{
    int n=1000000;
    PPA[0]=1;
    for(int i=1; i<=n+5; i++)
    {
        PPA[i]=PPA[i-1]*PA;
        if(PPA[i]>=modA)
        {
            PPA[i]%=modA;
        }
    }
    PPB[0]=1;
    for(int i=1; i<=n+5; i++)
    {
        PPB[i]=PPB[i-1]*PB;
        if(PPB[i]>=modB)
        {
            PPB[i]%=modB;
        }
    }
}
void CreateHash(string &str)
{
    int n=str.size();

    //Fwd
    HashFwdA[n]=0;
    HashFwdB[n]=0;
    for(int i=n-1; i>=0; i--)
    {
        HashFwdA[i]=(str[i]-96)+PA*HashFwdA[i+1];
        HashFwdB[i]=(str[i]-96)+PB*HashFwdB[i+1];
        if(HashFwdA[i]>=modA)
        {
            HashFwdA[i]%=modA;
        }
        if(HashFwdB[i]>=modB)
        {
            HashFwdB[i]%=modB;
        }
    }
    //Done

    //Bwd
    HashBwdA[0]=(str[0]-96);
    HashBwdB[0]=(str[0]-96);
    for(int i=1; i<n; i++)
    {
        HashBwdA[i]=(str[i]-96)+PA*HashBwdA[i-1];
        HashBwdB[i]=(str[i]-96)+PB*HashBwdB[i-1];
        if(HashBwdA[i]>=modA)
        {
            HashBwdA[i]%=modA;
        }
        if(HashBwdB[i]>=modB)
        {
            HashBwdB[i]%=modB;
        }
    }
    //Done

    return;
}
pair< int , int > fwdHash(int i,int j)
{
    long long int ansA=HashFwdA[i]-(HashFwdA[j+1]*PPA[j-i+1]);
    long long int ansB=HashFwdB[i]-(HashFwdB[j+1]*PPB[j-i+1]);

    if(ansA>=modA)
    {
        ansA%=modA;
    }
    if(ansA<0)
    {
        ansA%=modA;
        ansA+=modA;
        ansA%=modA;
    }

    if(ansB>=modB)
    {
        ansB%=modB;
    }
    if(ansB<0)
    {
        ansB%=modB;
        ansB+=modB;
        ansB%=modB;
    }

    return pair< int , int >(ansA,ansB);
}
pair< int , int > bwdHash(int i,int j)
{
    long long int ansA=HashBwdA[j]-(HashBwdA[i-1]*PPA[j-i+1]);
    long long int ansB=HashBwdB[j]-(HashBwdB[i-1]*PPB[j-i+1]);

    if(ansA>=modA)
    {
        ansA%=modA;
    }
    if(ansA<0)
    {
        ansA%=modA;
        ansA+=modA;
        ansA%=modA;
    }

    if(ansB>=modB)
    {
        ansB%=modB;
    }
    if(ansB<0)
    {
        ansB%=modB;
        ansB+=modB;
        ansB%=modB;
    }
    return pair< int , int >(ansA,ansB);
}
string s[1000006];
int main()
{
    pre();
    int t;
    in(t);
    while(t--)
    {
        int n;
        in(n);
        vector< pair< int , string > > v;
        for(int i=1; i<=n; i++)
        {
            cin>>s[i];
            v.push_back(pair<int,string>(s[i].size(),s[i]));
        }
        sort(v.begin(),v.end());
        for(int i=0; i<v.size(); i++)
        {
            s[i+1]=v[i].second;
        }

        long long int ans=0;
        map< pair< int , int > , int > M,H;

        for(int i=1; i<=n; i++)
        {
            CreateHash(s[i]);
            int len=s[i].size();
            for(int j=0; ; j++)
            {
                if(j+1==len)
                {
                    pair< int , int > x;
                    x.first=HashFwdA[0];
                    x.second=HashFwdB[0];
                    ans+=M[x];
                    break;
                }
                pair< int , int > x , y;

                x.first=HashFwdA[j+1];
                x.second=HashFwdB[j+1];

                y=bwdHash(j+1,len-1);

                if(x.first==y.first && x.second==y.second)
                {
                    ans+=M[fwdHash(0,j)];
                }

            }
            for(int j=s[i].size()-1; ; j--)
            {
                if(j==0)
                {
                    pair< int , int > x;
                    x.first=HashBwdA[len-1];
                    x.second=HashBwdB[len-1];
                    ans+=H[x];
                    break;
                }
                pair< int , int > x,y;

                x=fwdHash(0,j-1);

                y.first=HashBwdA[j-1];
                y.second=HashBwdB[j-1];

                if(x.first==y.first && x.second==y.second)
                {
                    ans+=H[bwdHash(j,len-1)];
                }
            }

            pair< int , int > x;
            x.first=HashBwdA[len-1];
            x.second=HashBwdB[len-1];
            M[x]++;

            pair< int , int > y;
            y.first=HashFwdA[0];
            y.second=HashFwdB[0];
            H[y]++;
        }
        printf("%lld\n",ans);
    }
    return 0;
}
