#include<bits/stdc++.h>

using namespace std;

// The codes which I use are taken from the book Competitive Programming 3 written by Steven Halim
// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion

ll expmod(ll base,ll pow,ll M)
{
    if(pow==0)
        return 1;
    if(pow==1)
        return base;
    ll res=expmod(base,pow/2,M);
    res=(res*res)%M;
    if(pow%2==1)
        res=(res*base)%M;
    return res;
}

ll modinverse(ll a,ll M){ return expmod(a,M-2,M); }
ll base1 = 1000003, base2 = 37;
ll mod2 = 1000000007 , mod1 = mod2 + 2;
int pre[1000009][2] , suf[1000009][2] , inv1[1000009] , inv2[1000009] , len ;
string str ;
vector < string > a;

ll hash1pre( int l , int r )
{
    int val = pre[r][0];
    if( l - 1 >= 0 )
        val = ( val - pre[l - 1][0] + mod1 ) % mod1;
    val = ( val * 1ll * inv1[l] ) % mod1;
    return val;
}

ll hash2pre( int l , int r )
{
    int val = pre[r][1];
    if( l - 1 >= 0 )
        val = ( val - pre[l - 1][1] + mod2 ) % mod2;
    val = ( val * 1ll * inv2[l] ) % mod2;
    return val;
}

ll hash1suf( int l , int r )
{
    int val = suf[l][0];
    if( r + 1 < len )
        val = ( val - suf[r + 1][0] + mod1 ) % mod1;
    val = ( val * 1ll * inv1[len - 1 - r] ) % mod1;
    return val;
}

ll hash2suf( int l , int r )
{
    int val = suf[l][1];
    if( r + 1 < len )
        val = ( val - suf[r + 1][1] + mod2 ) % mod2;
    val = ( val * 1ll * inv2[len - 1 - r] ) % mod2;
    return val;
}

void precom0()
{
    inv1[0] = inv2[0] = 1;
    inv1[1] = modinverse( base1 , mod1 );
    inv2[1] = modinverse( base2 , mod2 );
    REP( i , 2 , 1000005 )
    {
        inv1[i] = ( inv1[i - 1] * 1ll * inv1[1] ) % mod1;
        inv2[i] = ( inv2[i - 1] * 1ll * inv2[1] ) % mod2;
    }
}

void precom1()
{
    len = str.length();
    pre[0][0] = str[0];
    pre[0][1] = str[0];
    ll temp1 = base1 , temp2 = base2 ;
    REP( i , 1 , len - 1 )
    {
        pre[i][0] = ( ( str[i] * 1ll * temp1 ) % mod1 + pre[i - 1][0] ) % mod1;
        pre[i][1] = ( ( str[i] * 1ll * temp2 ) % mod2 + pre[i - 1][1] ) % mod2;
        temp1 = ( base1 * 1ll * temp1 ) % mod1 ;
        temp2 = ( base2 * 1ll * temp2 ) % mod2 ;
    }
    suf[len - 1][0] = str[len - 1];
    suf[len - 1][1] = str[len - 1];
    temp1 = base1 , temp2 = base2;
    NREP( i , len - 2 , 0 )
    {
        suf[i][0] = ( ( str[i] * 1ll * temp1 ) % mod1 + suf[i + 1][0] ) % mod1;
        suf[i][1] = ( ( str[i] * 1ll * temp2 ) % mod2 + suf[i + 1][1] ) % mod2;
        temp1 = ( base1 * 1ll * temp1 ) % mod1 ;
        temp2 = ( base2 * 1ll * temp2 ) % mod2 ;
    }
}

struct node
{
	int prefix_count , end_count ;
	struct node *child[26];
    node()
    {
        prefix_count = 0 ;
        end_count = 0 ;
        REP( i , 0 , 25 )
            child[i] = NULL;
    }
}*head;

void init()
{
	head = new node();
	head->prefix_count = 0;
}

void insert(string word)
{
	node *current = head;
	for(int i = 0 ; i < len; ++i)
	{
        if( hash1pre( i , len - 1 ) == hash1suf( i , len - 1 ) && hash2pre( i , len - 1 ) == hash2suf( i , len - 1 ) )
            current -> prefix_count++;
		int letter = (int)word[i] - (int)'a';	//extract first character of word
		if(current->child[letter] == NULL)
			current->child[letter] = new node();
		current = current->child[letter];
	}
	current -> end_count++;
    current -> prefix_count++;
}

ll compute()
{
    node * current = head;
    int i = 0 ;
    ll ans = 0 ;
    for( i = 0 ; i < len ; i++ )
    {
        if( hash1pre( i , len - 1 ) == hash1suf( i , len - 1 ) && hash2pre( i ,len - 1 ) == hash2suf( i , len - 1 ) )
            ans += current -> end_count;
        int let = str[i] - 'a';
        if( current -> child[let] != NULL )
            current = current -> child[let];
        else
            break;
    }
    if( i == len )
        ans += current -> prefix_count;
    return ans;
}

void era( struct node *ptr )
{
    REP( i , 0 , 25 )
    {
        if( ( ptr -> child[i] ) != NULL )
            era( ptr -> child[i] ) ;
    }
    free( ptr );
}


int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int t ; s(t) ;
    precom0();
    while( t-- )
    {
        int n ; s(n) ;
        a.clear();
        a.resize(n);
        init();
        ll ans = 0 ;
        REP( i , 0 , n - 1 )
        {
            cin >> a[i];
            str = a[i];
            precom1();
            insert( a[i] ) ;
            if( hash1pre( 0 , len - 1 ) == hash1suf( 0 , len - 1 ) && hash2pre( 0 , len - 1 ) == hash2suf( 0 , len - 1 ) )
                ans--;
        }
        REP( i , 0  , n - 1 )
        {
            str = a[i];
            reverse( str.begin() , str.end() ) ;
            precom1();
            ans += compute();
        }
        printf("%lld\n",ans);
        free( head );
    }
    return 0;
}
