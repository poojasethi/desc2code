#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_DEPRECATE 
#include <iostream> 
#include <cstdio> 
#include <cstdlib> 
#include <vector> 
#include <sstream> 
#include <string> 
#include <map> 
#include <set> 
#include <algorithm> 
#include <cmath> 
#include <cstring> 
#include <queue>
#include <time.h>
using namespace std; 
#define mp make_pair 
#define pb push_back 
#define all(C) (C).begin(), (C).end() 
#define sz(C) (int)(C).size() 
#define PRIME 123 
#define PRIME1 31415 
typedef long long int64; 
typedef unsigned long long uint64; 
typedef pair<int, int> pii; 
typedef vector<int> vi; 
typedef vector<vector<int> > vvi; 
//------------------------------------------------------------ 
#define y1 asdf
#define y2 asdqwer
const int N = 1000001; 
int n, m;
string st[N];
int tri[N][26], e = 1;
int val[N], val1[N];
int pr[N];
int mod = 1e9 + 7;
int hs[N];
int ohs[N];
inline int mul(int a, int b)
{
	return (a * (int64) b) % mod;
}
inline int sub(int a, int b)
{
	return (a - b + mod) % mod;
}
inline int add(int a, int b)
{
	return (a +  b) % mod; 
}
 
void precalc()
{
	pr[0] = 1;
	for(int i = 1; i < N; ++i)
		pr[i] = mul(pr[i - 1], PRIME);
}
 
inline int check(int pos, int en, int id)
{
	int sz = (en - pos + 1) / 2;
	int h1 = mul(sub(hs[pos + sz], hs[pos]), pr[N  - 1 - pos]);
	pos = st[id].size() - 1 - en;
	int h2 = mul(sub(ohs[pos + sz], ohs[pos]), pr[N  - 1 - pos]);
	if (h1 == h2)
		return 1;
	return 0;
}
 
void solve()
{
	e = 1;
	memset(val, 0, sizeof val);
	memset(val1, 0, sizeof val1);
	memset(tri, 0, sizeof tri);
	cin >> n;
	int r = 0;
 
	for(int i = 0; i < n; ++i)
	{
		cin >> st[i];
		int cur = 0;
		for(int j = 0; j < st[i].size(); ++j)
		{
			hs[j + 1] = hs[j];
			hs[j + 1] = add(hs[j + 1], mul(pr[j], st[i][j]));
			ohs[j + 1] = ohs[j];
			ohs[j + 1] = add(ohs[j + 1], mul(pr[j], st[i][st[i].size() - 1 - j]));
		}
		for(int j = st[i].size() - 1; j >= 0; --j)
		{
			if (tri[cur][st[i][j] - 'a'])
				cur = tri[cur][st[i][j] - 'a'];
			else
				cur = tri[cur][st[i][j] - 'a'] = e++;
			if(j && check(0, j - 1, i)) 
				val1[cur]++;
		}
		val[cur]++;
		cur = 0;
		int flag = 1;
		for(int j = 0; j < st[i].size(); ++j)
			if (st[i][j] != st[i][st[i].size() - 1 - j])
			{
				flag = 0;
				break;
			}
		r += flag;
	}
	int64 ans = 0;
	for(int i = 0; i < n; ++i)
	{
		for(int j = 0; j < st[i].size(); ++j)
		{
			hs[j + 1] = hs[j];
			hs[j + 1] = add(hs[j + 1], mul(pr[j], st[i][j]));
			ohs[j + 1] = ohs[j];
			ohs[j + 1] = add(ohs[j + 1], mul(pr[j], st[i][st[i].size() - 1 - j]));
		}
		int cur = 0;
		for(int j = 0; j < st[i].size(); ++j)
		{
			if (tri[cur][st[i][j] - 'a'])
				cur = tri[cur][st[i][j] - 'a'];
			else
				break;
			if(check(j + 1, st[i].size() - 1, i)) 
			{
				ans += val[cur];
				if (j + 1 == st[i].size())
					ans += val1[cur];
			}
		}
		cur = 0;
	//	cerr << ans << endl;
	}
	ans -= r;
	cout << ans;
}
 
int main()
{
    ios_base::sync_with_stdio(false);cin.tie(0);
    #ifdef WIN32
        freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);
    #endif
	int t;
	precalc();
	cin >> t;
	while(t--)
    {
		solve();
		cout << "\n";
	}
    return 0;
}  