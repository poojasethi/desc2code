#include <bits/stdc++.h>
using namespace std;

const long long smallMod = 41, bigMod = 1e9 + 9;
const int MAXN = 1e6 + 9;

int tc,len,N;
string s;

long long smallPrime[MAXN];
long long fHash[MAXN], rHash[MAXN];

inline void precompute(){
	smallPrime[0] = 1;
	for(int i = 1;i < MAXN;++i){
		smallPrime[i] = (smallPrime[i - 1] * smallMod) % bigMod;
	}
}

inline void HASH(string s){
	fHash[0] = s[0] - 'a' + 1;
	for(int i = 1;i < len;++i){
		fHash[i] = (fHash[i - 1] * smallMod + (s[i] - 'a' + 1)) % bigMod;
	}
	rHash[len - 1] = s[len - 1] - 'a' + 1;
	for(int i = len - 2;i >= 0;--i){
		rHash[i] = (rHash[i + 1] * smallMod + (s[i] - 'a' + 1)) % bigMod;
	}
}

inline long long forwardSubstrHash(int l,int r){
	if(l == 0){
		return fHash[r];
	}
	int sublen = (r - l + 1);
	long long ret = (fHash[r] - ((fHash[l - 1] * smallPrime[sublen])));
	ret %= bigMod; while(ret < 0) ret += bigMod;
	return ret;
}

inline long long backwardSubstrHash(int l,int r){
	if(r == len - 1){
		return rHash[l];
	}
	int sublen = (r - l + 1);
	long long ret = (rHash[l] - ((rHash[r + 1] * smallPrime[sublen])));
	ret %= bigMod; while(ret < 0) ret += bigMod;	
	return ret;
}

inline bool isPalindrome(int l,int r){
	return ((l >= r) || (forwardSubstrHash(l,r) == backwardSubstrHash(l,r)));
}

int main (){
	scanf("%d",&tc);
	precompute();
	while(tc--){
		scanf("%d",&N);
		vector <string> keep;
		map <long long,long long> prefixHash, suffixHash;
		for(int i = 0;i < N;++i){
			cin >> s; len = (int)s.length();
			keep.push_back(s);
			HASH(s);
			prefixHash[forwardSubstrHash(0,len - 1)]++;
			suffixHash[backwardSubstrHash(0,len - 1)]++;
		}
		long long pairs = 0;
		for(int i = 0;i < N;++i){
			string curStr = keep[i];
			len = (int)curStr.length();
			HASH(curStr);
			prefixHash[forwardSubstrHash(0,len - 1)]--;
			suffixHash[backwardSubstrHash(0,len - 1)]--;			
			for(int pos = 0;pos < len - 1;++pos){
				if(isPalindrome(pos + 1,len - 1)){
					pairs += suffixHash[forwardSubstrHash(0,pos)];
				}
			}
			for(int pos = len - 1;pos > 0;--pos){
				if(isPalindrome(0,pos - 1)){
					pairs += prefixHash[backwardSubstrHash(pos,len - 1)];
				}
			}
			pairs += suffixHash[forwardSubstrHash(0,len - 1)];
			prefixHash[forwardSubstrHash(0,len - 1)]++;
			suffixHash[backwardSubstrHash(0,len - 1)]++;						
		}
		printf("%lld\n",pairs);
	}
	return 0;
}
