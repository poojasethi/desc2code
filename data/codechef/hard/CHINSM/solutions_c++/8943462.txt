#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;

int a[100000];
int bad_pair[100000];

int main(){
	int n, k;
	scanf("%d %d", &n, &k);
	for (int j = 0; j < n; ++j){
		int ai;
		scanf("%d", &ai);
		a[j] = ai;
		bad_pair[j] = 0;
	}
	
	set<int> greater_than_k;
	map<int, int> lookout;
	for (int i = n-1; i >= 0; i--){

		if(a[i] == k){
			set<int> :: iterator it = greater_than_k.begin();
			while(it != greater_than_k.end()){
				bad_pair[*it] = max(bad_pair[*it], i+1);
				it++;	
			} 
			greater_than_k.clear();
		}

		if(a[i] > 2*k){
			int temp = a[i] - k;
			for (int j = 1; j <= sqrt(temp); ++j){
				if(temp % j == 0){
					map<int, int> :: iterator lo;
					if(j > k){
						lo =  lookout.find(j);
						if(lo != lookout.end()){
							bad_pair[lo->second] = max(bad_pair[lo->second], i+1);
						}
					}
					if(temp/j > k){
						lo = lookout.find(temp/j);
						if(lo !=  lookout.end()){
							bad_pair[lo->second] = max(bad_pair[lo->second], i+1);
						}
					}
				}	
			}
		}

		if(a[i] > k){
			greater_than_k.insert(i);
		}

		if(lookout.find(a[i]) == lookout.end()){
			lookout.insert(make_pair(a[i], i));
		}
		else{
			map<int, int> :: iterator it = lookout.find(a[i]);
			it->second = i;
		}
	}

	long long int total = 0;
	int cutoff = 0;
	for (int i = 0; i < n; ++i){
		cutoff = max(cutoff, bad_pair[i]);
		total += i - cutoff + 1;
		// cout << total << " " <<  bad_pair[i] << endl;
	}

	//CHECK1
	/*long long int total = 0;
	map<int, int> lookout;
	map<int, int> :: iterator it;
	int cutoff = 0;
	for (int i = 0; i < n; ++i){
		// cout << a[i] << endl;
		it = lookout.find(a[i]);
		if(it != lookout.end()){
			if(it->second >= cutoff){
				cutoff = it->second + 1;
			}
		}

		if(a[i] > k){
			it = lookout.find(k);
			if(it != lookout.end()){
				if(it->second >= cutoff){
					cutoff = it->second + 1;
				}
			}
		}

		total += i - cutoff + 1;
		
		int lookout_ins; 
		if(a[i] == k){
			lookout_ins = k;
			// cout << lookout_ins << " inserted at " << i << endl;
			it = lookout.find(lookout_ins);
			if(it != lookout.end()){
				it->second = i;
			}
			else{
				lookout.insert(make_pair(lookout_ins, i));
			}
		}

		if(a[i] > 2*k){
			int temp = a[i] - k;
			for (int j = 1; j <= sqrt(temp); ++j){
				if(temp % j == 0){
					if(j > k){
						lookout_ins = j;
						it = lookout.find(lookout_ins);
						// cout << lookout_ins << " inserted at " << i << endl;
						if(it != lookout.end()){
							it->second = i;
						}
						else{
							lookout.insert(make_pair(lookout_ins, i));
						}				
					}
					if(temp/j > k){
						lookout_ins = temp/j;						
						it = lookout.find(lookout_ins);
						// cout << lookout_ins << " inserted at " << i << endl;
						if(it != lookout.end()){
							it->second = i;
						}
						else{
							lookout.insert(make_pair(lookout_ins, i));
						}
					}
				}
			}
		}
	}*/
	printf("%lld\n", total);

}