#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=1e9+7,maxn=100005;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
//#define S(x) scanf("%d",&x)
//#define getcx getchar_unlocked
#define getcx getchar
inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(i,0,n) cout<<i<<". "<<x[i]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(i,0,m) {F(j,0,n) cout<<x[i][j]<<" "; cout<<endl;} cout<<endl
#define Debugvec(x,m) cout<<"vector "<<#x<<":"<<endl; F(i,0,m) {printf("%d. ",i); F(j,0,x[i].size()) cout<<x[i][j]<<" "; cout<<endl;} cout<<endl
#define pii pair<int,int>
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
const int inf=1e9;

vector<int> _div[maxn],zero;
int a[maxn],last[maxn];


int main()
{
    F(i,0,maxn)
    last[i]=-1;
    int n,k;
    S(n);
    S(k);
    I(i,n-1,0)
    {
        S(a[i]);
        if(a[i]>k)
            zero.push_back(i);
    }
    sort(zero.begin(),zero.end());
    //Debugarr(zero,zero.size());
    int sq=sqrt(maxn-1);
    F(i,1,sq+1)
    {
        if(i>k)
            _div[i*i].push_back(i);
        int num=i+1;
        for(int j=i*num;j<maxn;j+=i)
        {
            if(i>k)
                _div[j].push_back(i);
            if(num>k)
                _div[j].push_back(num);
            num++;
        }

    }
    //Debugvec(_div,maxn);
    LL ans=0;
    int idx,rt=maxn,lt=maxn;
    last[a[0]]=0;
    F(i,1,n)
    {
        idx=-1;
        if(a[i]>k)
        {
            F(j,0,_div[a[i]-k].size())
            {
                idx=max(idx,last[_div[a[i]-k][j]]);
            }
        }
        else if(a[i]==k)
        {
            idx=(lower_bound(zero.begin(),zero.end(),i)-zero.begin())-1;
            if(idx!=-1)
                idx=zero[idx];
        }
        if(idx!=-1)
        {

            if(rt==maxn)
            {
                lt=idx;
                rt=i;
            }
            else if(idx>lt)
            {
                LL mul=(i-rt);
                mul*=(lt+1);
                ans+=mul;
                lt=idx;
                rt=i;
            }

        }
        last[a[i]]=i;
    }
    if(lt!=maxn)
    {
        LL mul=(n-rt);
        mul*=(lt+1);
        ans+=mul;
    }
    LL tot=n;
    tot*=(n+1);
    tot/=2;
    cout<<tot-ans<<endl;
    return 0;
}
