#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <deque>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <string>
#include <stack>
#include <sstream>
#include <vector>
#include <numeric>

#define FOR(i, a, b) for(int i = a; i <= b; ++i)
#define FRD(i, a, b) for(int i = a; i >= b; --i)
#define FR(i, a) for(int i = 0; i < a; ++i)
#define REP(i, a) for(int i = 0; i <= a; ++i)
#define pb push_back
#define sz(x) (int)x.size()
#define reset(a, b) memset(a, b, sizeof a)
#define bug(x) cout << #x << " = " << x << endl
#define bg(a, m, n) FOR(i, m, n) cout << a[i] << " "; cout << endl
using namespace std;

typedef long long ll;
typedef unsigned long long qword;

typedef vector < vector <double> > Matrix;

int n, k;
string s, w;
set <string> store;

Matrix create(int m, int n) {
    return Matrix(m, vector <double> (n, 0));
}

inline Matrix Nhan(Matrix a, Matrix b) {
    Matrix c = create(26, 26);
    FOR(i, 0, 25)
        FOR(j, 0, 25) {
            c[i][j] = 0;
            FOR(k, 0, 25)
                c[i][j] += a[i][k] * b[k][j];
        }
    return c;
}

inline Matrix Pow(Matrix a, int p) {
    if (p == 1) return a;
    Matrix tmp = Pow(a, p >> 1);
    tmp = Nhan(tmp, tmp);
    if (p & 1) tmp = Nhan(a, tmp);
    return tmp;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("TEST.INP", "r", stdin);
#else
    ios_base::sync_with_stdio(false);
#endif // ONLINE_JUDGE
    int nTests = 0;
    cin >> nTests;
    while (nTests--) {
        cin >> n >> k;
        cin >> s;
        Matrix a = create(26, 26);
        FOR(i, 0, 25)
            FOR(j, 0, 25) cin >> a[i][j];
        a = Pow(a, k);
        store.clear();
        double res = 0;
        FOR(i, 1, n) {
            cin >> w;
            if (sz(w) != sz(s)) continue;
            if (store.find(w) != store.end()) continue;
            store.insert(w);
            double tmp = 1;
            FR(j, sz(s))
                tmp *= a[s[j] - 'a'][w[j] - 'a'];
            res += tmp;
        }
        printf("%.9lf\n", res);
    }
    return 0;
}

