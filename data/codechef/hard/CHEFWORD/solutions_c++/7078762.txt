/* http://stackoverflow.com/questions/12311869/fast-matrix-exponentiation */

// template : rjohari23

#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<stdlib.h>
#include<algorithm>
#include<vector>
#include<set>
#define getcx getchar_unlocked
#define pc(x) putchar_unlocked(x);
#ifndef ONLINE_JUDGE
    #define getcx getchar
#endif
using namespace std;
//#define clear(a) memset((a),0,sizeof(a))
#define pb push_back
#define in insert
#define SIZE(v) v.size()
#define ull unsigned long long int
#define lli long long int
#define li long int
#define ii int
#define mod 1000000007

inline int inp()
{
   int n=0;
   int ch=getcx();int sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   return n*sign;
}

inline long long in()
{
   long long n=0;
   long long ch=getcx();long long sign=1;
   while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}
 
   while(  ch >= '0' && ch <= '9' )
           n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
   return n*sign;
}

inline void write (lli n)
{
    lli N = n, rev, count = 0;
    rev = N;
    if (N == 0) { pc('0');return ;}
    while ((rev % 10) == 0) { count++; rev /= 10;} //obtain the count of the number of 0s
    rev = 0;
    while (N != 0) { rev = (rev<<3) + (rev<<1) + N % 10; N /= 10;}  //store reverse of N in rev
    while (rev != 0) { pc(rev % 10 + '0'); rev /= 10;}
    while (count--) pc('0');
}

/* http://discuss.codechef.com/questions/20106/fast-string-input */
/* fast string input using getchar_unlocked */
inline string ip()
{
    string s = "";
    int temp=getchar_unlocked();
    while ( temp<'a'||temp>'z' )
        temp = getchar_unlocked();
    while ( temp>='a'&&temp<='z' )
    {
        s += (char)temp;
        temp = getchar_unlocked();
    }
    return s;
}

double res[26][26];

void one ( double a[26][26] )
{
    for ( int i=0;i<26;++i )
    {
        for ( int j=0;j<26;++j )
            a[i][j] = (i == j);
    }
}

//Multiply matrix a to matrix b and print result into a
void mul ( double a[26][26], double b[26][26] )
{
    double res[26][26] = {{0.0}};

    for ( int i=0;i<26;++i )
	{
        for ( int j=0;j<26;++j )
		{
            for ( int k=0;k<26;++k )
            {
                res[i][j] += a[i][k]*b[k][j];
            }
		}
	}
    for ( int i=0;i<26;++i )
	{
		for ( int j=0;j<26;++j )
            a[i][j] = res[i][j];
	}
}

//Caluclate a^n and print result into matrix res
void pow ( double a[26][26], lli n )
{
    one(res);

    while ( n ) 
	{
        if ( n%2==1 )
            mul(res,a);
        n /= 2;
        mul(a,a);
    }
}
 
double a[26][26];
set<string>mp;
string S,s;

int main() {
	// your code goes here
	ii t;
	lli n,k,i,j,lS,ls,x,y;
	double prob,ans;

	t = inp();
	while ( t-- )
	{
		mp.clear();
		
		n = in();
		k = in();
		s = ip();
		ls = s.length();
		
		ans = 0.0;
		
		for ( i=0;i<26;++i )
		{
			for ( j=0;j<26;++j )
			cin >> a[i][j];
		}
		
		pow(a,k);
		
		while ( n-- )
		{
			prob = 1.0;
			S = ip();
			lS = S.length();
			
			if ( ls==lS )
				mp.in(S);
		}
		
		set<string>::iterator it;
		
		for ( it=mp.begin();it!=mp.end();++it )
		{
			S = *it;
			if ( ls==1 )
				ans += res[s[0]-97][S[0]-97];
			else if ( ls==2 )
				ans += (res[s[0]-97][S[0]-97])*(res[s[1]-97][S[1]-97]);
			else if ( ls==3 )
				 ans += (res[s[0]-97][S[0]-97])*(res[s[1]-97][S[1]-97])*(res[s[2]-97][S[2]-97]);
		}
		printf("%.6lf\n",ans);
	}
	
	return 0;
}