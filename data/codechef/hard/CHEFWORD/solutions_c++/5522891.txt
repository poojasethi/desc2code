#include<iostream>
#include<cstdio>
#include<set>
using namespace std;



double** mul_matrix(double **a, double **b)
{
    double **ans = new double*[27];
    for(int i = 0; i <= 26; ++i)ans[i] = new double[27];
    for(int i = 1; i <= 26; i++)
    {
        for(int j = 1; j <= 26; j++)
        {
            ans[i][j] = 0;
            for(int ix = 1; ix <= 26; ix++)
            {
                ans[i][j] += (a[i][ix] * b[ix][j]);
            }
        }
    }
    return ans;
}


double** pow_matrix(double **p, int k)
{
    double **ans = new double*[27];
    for(int i = 0; i <= 26; ++i)ans[i] = new double[27];
    for(int i = 1; i <= 26; i++)
    {
        for(int j = 1; j <= 26; j++)
        {
            if(i == j)ans[i][j] = 1;
            else ans[i][j] = 0;
        }
    }
    while(k)
    {
        if(k % 2 == 1)
        {
            ans = mul_matrix(p, ans);
        }
        p = mul_matrix(p, p);
        k = k / 2;
    }
    return ans;
}

int main()
{
    int t;
    scanf("%d", &t);
    double **p = new double*[27];
    for(int i = 0; i <= 26; ++i)p[i] = new double[27];
    while(t--)
    {
        int n, k;
        scanf("%d%d", &n, &k);
        string s;
        cin >> s;

        for(int i = 1; i <= 26; i++)
        {
            for(int j = 1; j <= 26; j++)scanf("%lf", &p[i][j]);
        }

        double **ans = new double*[27];
        for(int i = 0; i <= 26; i++)ans[i] = new double[27];
        ans = pow_matrix(p, k);

        double temp1 = 0.0;
        set<string> word;
        while(n--)
        {
            string x;
            cin >> x;
            if(word.find(x) != word.end())continue;
            word.insert(x);
            int len =  s.length(), len1 = x.length();

            if(len != len1)continue;
            double ans1 = 1.0;
            for(int i = 0; i < len; i++)
            {
                ans1 *= ans[s[i]-96][x[i]-96];
            }
            temp1 += ans1;

        }
        printf("%.8lf\n", temp1);



    }
}
