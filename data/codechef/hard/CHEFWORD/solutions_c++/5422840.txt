#include<stdio.h>
#include<cstring>
#include<map>
#include<iostream>

using namespace std;
 
typedef struct claps
{
	double arr[26][26];
	
}claps;
 
claps fastExpo(claps array,long int K)
{
	int i,j,k;
	claps J,Temp,P;
	
	if(K==1)
	return array;
	
	for(i=0;i<26;i++)
	for(j=0;j<26;j++)
	{
		J.arr[i][j]=0;
			
		for(k=0;k<26;k++)
		J.arr[i][j]+=array.arr[i][k] * array.arr[k][j];
	}
	
	if(K%2==0)
	return fastExpo(J,K/2);
	
	else
	{
		Temp=fastExpo(J,(K-1)/2);
		
		for(i=0;i<26;i++)
		for(j=0;j<26;j++)
		{
			P.arr[i][j]=0;
			
			for(k=0;k<26;k++)
			P.arr[i][j]+=array.arr[i][k] * Temp.arr[k][j];
		}
		
		return P;
	}
}
 
int main()
{
	int t;
	
	scanf("%d",&t);
	
	while(t--)
	{
		int i,l1,l2,j;
		long int N,K;
		double prob=0,temp=0;
		
		scanf("%ld%ld",&N,&K);
		
		map<string,int> hash;
		
		string S,s;
		
		cin>>S;
		l1=S.size();
		
		claps array;
		
		for(i=0;i<26;i++)
		for(j=0;j<26;j++)
		scanf("%lf",&array.arr[i][j]);
		
		array=fastExpo(array,K);
		
		while(N--)
		{
			cin>>s;
			
			l2=s.size();
			
			if(l2 < l1)
			continue;
			
			else if(hash.find(s) == hash.end())
			{
				hash[s]=1;
				
				temp=1;
				
				for(i=0;i<l2;i++)
				temp*=array.arr[S[i]-97][s[i]-97];
				
				prob+=temp;
			}
			
		}
		
		printf("%lf\n",prob);
	}
	
	return 0;
} 