#include <iostream>
#include <fstream>
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <stack>
#include <map>
#include <climits>
#include <cassert>
#include <iomanip>

#define FOR(i,n) for(int i=0,_n=n;i<_n;i++)
#define FORD(i,n) for(int i=n;i>=0;i--)
#define FORR(i,s,n) for(int i=s,_n=n;i<_n;i++)
#define FORRD(i,n,s) for(int i=n,_s=s;i>=_s;i--)
#define mp make_pair
#define pb push_back
#define pii pair<int,int>
#define pli pair<ll,int>
#define vi vector<int>
#define fs first
#define sec second

#define maxn 100000
const int sz = 26;
using namespace std;
typedef long long ll;

string wrd[maxn];
string buff;
double A[sz][sz],C[sz][sz];

void write(double a[sz][sz]){
	FOR(i,sz){
		FOR(j,sz)
			cout<<a[i][j]<<" ";
		cout<<"\n";
	}
}	
void multiply(double a[][sz],double b[sz][sz]){
	double c[sz][sz];
	FOR(i,sz)
		FOR(j,sz)
			c[i][j] = 0.0;
	FOR(i,sz)
		FOR(j,sz)
			FOR(k,sz)
				c[i][j] += a[i][k] * b[k][j];
	FOR(i,sz)
		FOR(j,sz)
			a[i][j] = c[i][j];
}
void mpow(int exp){
	FOR(i,sz)
		FOR(j,sz) 
			C[i][j] = A[i][j];
	while(exp){
		if(exp & 1)
			multiply(C,A);
		exp>>=1;
		multiply(A,A);
	}
}

int main(){
	int t,n,k;
	ios::sync_with_stdio(false);
	cin>>t;
	cout<< setprecision(15);
	cout<<fixed;
	while(t--){
		cin>>n>>k;
		cin>>buff;
		
		FOR(i,sz)
			FOR(j,sz)
				cin>>A[i][j];
		mpow(k - 1);	
		FOR(i,n)
			cin>>wrd[i];
		double ans = 0.0;
		sort(wrd,wrd + n);
		for(int i = 0;i < n;){
			string x = wrd[i];
			for(;i < n && wrd[i]==x;i++);
			
			double tp = 0.0;
			if(x.length() == buff.length()){
				tp = 1.0;
				FOR(j,x.length()){
					tp *= C[buff[j] - 'a'][x[j] - 'a'];
				}
			}	
			ans += tp;
		}
		cout<<ans<<"\n";
	}
	return 0;
}
