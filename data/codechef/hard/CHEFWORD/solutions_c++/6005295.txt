#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
 
#define S(x) scanf("%d", &x)
#define SS(x) scanf("%s", &x)
#define MOD 1000000007
#define N 100007
 
using namespace std;
 
void input() {
	#ifndef ONLINE_JUDGE
	freopen("C:\\Users\\ronish\\OneDrive\\Documents\\in.txt","r",stdin);
	#endif
}
 
double A[26][26];
double result[26][26];
bool check[20000];
double prob[27][27];
 
void printMatrix (double matrix[26][26]) {
	for (int i = 0; i < 20; ++i)
	{
		for (int j = 0; j < 20; ++j)
		{
			cout << matrix[i][j] << " ";
		}
		cout << endl;
	}
}
 
void mat_mult(double M1[27][27], double M2[27][27]) {
     
     double M3[27][27];
     
     int i,j,l,m,n;
     
    for(i=0;i<26;i++) {
       	for(j=0;j<26;j++) {
            M3[i][j] = 0;
            for(l=0;l<26;l++) {
            	M3[i][j] = M3[i][j] + M1[i][l]*M2[l][j];
            }
       	}
    }
     
    for(i=0;i<26;i++)
    for(j=0;j<26;j++)
    M1[i][j] = M3[i][j];
}
 
void mat_exp(double F[27][27], int n) {
    int i,j,l;
     
    while(n>0) {
        if(n%2!=0) {
            mat_mult(F,prob);
    }
        n=n/2;
        mat_mult(prob,prob);
    }
}
 
/*void matrixMul (double matrix[26][26], double matrix2[26][26]) {
	for (int i = 0; i < 26; ++i)
	{
		for (int j = 0; j < 26; ++j)
		{
			int val = 0;
			for (int k = 0; k < 26; ++k)
			{
				val = val + matrix[i][k] * matrix2[k][j];
			}
			result[i][j] = val;
		}
	}
}*/
 
/*void matirxExponentiation(double matrix[26][26], int n) {
	//if (!matrix) cout << "not done" << endl;
	//printMatrix(matrix);
	if (n == 1) return;
	if (n == 2) {
		matrixMul(matrix, matrix);
		return;
	}
 
	double sqmatrix[26][26];
 
	for (int i = 0; i < 26; ++i)
	{
		for (int j = 0; j < 26; ++j)
		{
			int val = 0;
			for (int k = 0; k < 26; ++k)
			{
				val = val + matrix[i][k] * matrix[k][j];
			}
			sqmatrix[i][j] = val;
		}
	}
 
	if (n % 2 == 0) {
		matirxExponentiation(sqmatrix, n / 2);
		return;
	} else {
		matirxExponentiation(sqmatrix, n / 2);
		matrixMul(matrix, result);
		return;
	}
}*/
 
int main(int argc, char const *argv[])
{
	input();
	int t;
	double F[27][27];
	cin >> t;
	while(t--) {
		int n, k;
		cin >> n >> k;
		string s;
		cin >> s;
		for (int i = 0; i < 26; ++i)
		{
			for (int j = 0; j < 26; ++j)
			{
				cin >> prob[i][j];
				F[i][j] = (i==j?1.0:0.0);
			}
		}
		mat_exp(F, k);
		memset(check, 0, sizeof(check));
		double p = 0;
		for (int i = 0; i < n; ++i)
		{
			string b;
			cin >> b;
			//cout << b << endl;
			if (b.size() != s.size()) continue;
			int w = 0;
			for (int j = 0; j < b.size(); ++j)
			{
				w = w * 26 + b[j] - 'a';
			}
			if (check[w]) continue;
			check[w] = 1;
			double x = 1;
			for (int j = 0; j < b.size(); ++j)
			{
				x = x * F[s[j] - 'a'][b[j] - 'a'];
			}
			//cout << x << endl;
			p = p + x;
		}
		printf("%.9lf\n",p);
	}
	return 0;
} 