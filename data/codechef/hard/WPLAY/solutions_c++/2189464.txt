#include <stdio.h>
#include <algorithm>
#include <string.h>
#define L 20

using namespace std;

struct Level {
	Level ();
	Level *Children [26];
	bool Terminate;
};

Level::Level() {
	Terminate = false;
	for (int i = 0; i < 26; i++) Children[i] = NULL;
}

class Trie {
	public:
		Trie ();
		void Insert (char str[]);
		bool IsMember (char str[]);
	private:
		Level *Epsilon;
};

Trie::Trie() {
	Epsilon = new Level();
}

void Trie::Insert (char str[]) {
	Level *Temp = Epsilon;
	for (int i = 0; str[i] != '\0'; i++) {
		if (Temp->Children[str[i]-'A'] == NULL)
			Temp->Children[str[i]-'A'] = new Level();
		Temp = Temp->Children[str[i]-'A'];
	}
	Temp->Terminate = true;
}

bool Trie::IsMember (char str[]) {
	Level *Temp = Epsilon;
	for (int i = 0; str[i] != '\0'; i++) {
		Temp = Temp->Children[str[i]-'A'];
		if (!Temp) return false;
	}
	return Temp->Terminate;
}

void convert (int i, char str[], char s[], int length) {
	int j = __builtin_popcount(i), count = length-1, l = j;
	while (i) {
		if (i&1)
			s[--j] = str[count];
		count--;
		i >>= 1;
	}
	s[l] = '\0';
}

int main () {
	int D, length, r, c, T, temp, iterator;
	char str[L], s[L];
	Trie Dictionary;

	scanf ("%d", &D);
	while (D--) {
		scanf ("%s", str);
		length = strlen (str);
		sort(str, str+length);
		Dictionary.Insert (str);
	}

	scanf ("%d %d", &r, &c);
	length = r*c;
	bool dp[1<<length];
	int InDict[1<<length];

	scanf ("%d", &T);
	while (T--) {
		temp = 0;
		for(int i = 0; i < r; i++) {
			scanf ("%s", str+temp);
			temp += c;
		}
		sort (str, str+length);
		
		int all = 1<<length;
		for(int i = 0; i < all; i++) {
			iterator = i;
			dp[i] = false;
			InDict[i] = -1;
			while (iterator > 0) {
				iterator = (iterator-1)&i;
				if (!dp[iterator]) {
					if (InDict[iterator^i] == -1) {
						convert (iterator^i, str, s, length);
						InDict[iterator^i] = Dictionary.IsMember(s)?1:0;
					}
					if (InDict[iterator^i]) {
						dp[i] = true;
						break;
					}
				}
			}
		}
		printf ("%s\n", dp[all-1]?"Alice":"Bob");
	}
	return 0;
}