#include <iostream>
#include <cstdio>
using namespace std;

#include <bitset>
#include <algorithm>
#include <cmath>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cassert>

# define fr(i, n)           for( int i = 0; i<=n; i++)
# define frm(i, m, n)     for( int i = m; i <=n; i++)
# define pf       printf
# define pfd(x)   printf("%d" , x )
# define pfld(x)   printf("%lld" , x )
# define pfdn(x)   printf("%d\n" , x )
# define pfs pf(" ")
# define pfn	  printf("\n")
# define sf    scanf
# define sfd(x) scanf("%d",&x)
# define sfld(x) scanf("%lld",&x)
# define ll long long

# define pb push_back
# define pii pair<int,int>
# define F first
# define S second
# define mp make_pair

# define NMAX 100
#define MAXELEMENTS 16
const int MAXSTATECNT=(1<<(MAXELEMENTS));
int Maxval;//=(1<<(MAXSTATECNT-1));
string Board;
int BoardLen;
set<string> Dictionary;

void in()
{
     int d; sfd(d); string tmp;
     fr(i,d-1){
          cin>>tmp;
          sort(tmp.begin(),tmp.end());
          Dictionary.insert(tmp);
     }
}
bool Vis[MAXSTATECNT];
bool Win[MAXSTATECNT];
bool WordPresent[MAXSTATECNT];

bool f(int state)
{
     if(Vis[state])return Win[state];
     Vis[state]=1;
     int mask=state,submask; submask=mask; int cur;
     bool winning=false;
     while(submask>0){
          submask=(submask-1)&mask;
          cur=mask^submask;
          if(WordPresent[cur]){
               if(!f(submask)){winning=true; break;}
          }
     }
     Win[state]=winning;
     return winning;
}

void solve()
{
     int state=1<<BoardLen; --state;
     frm(i,0,state){Vis[i]=0; WordPresent[i]=0;}

     string tmp; int marker;
    // cout<<"state maxval "<<state<<" "<<Maxval<<endl;
     for(int mask=1;mask<=state;mask++){//iterate over all subsets of the board
          tmp=""; marker=0;
          for(int j=1<<(BoardLen-1);j>0;j=j>>1){
               if(mask&j)tmp+=Board[marker];
               marker++;
          }
          if(Dictionary.find(tmp)==Dictionary.end())continue;
          WordPresent[mask]=1;
          //cout<<" mask "<<mask<<" found in dixt "<<endl;
     }

     bool ans=f(state);
     if(ans)printf("Alice\n");
     else printf("Bob\n");
     /*for(int i=0;i<=state;i++){
          if(Vis[i]){ cout<<i<<" "<<Win[i]<<endl; }
     }*/
}

int main()
{
    //freopen("input.txt","r",stdin);
    in();
    int r,c; sfd(r); sfd(c); string s; char ch; int t; sfd(t);
    Maxval=r*c; Maxval=1<<(Maxval-1); //1<<(total_elements -1)
    while(t--){
         s="";
         fr(i,r-1){
              fr(j,c-1){
                    cin>>ch; s+=ch;
              }
         }
         sort(s.begin(),s.end());
         Board=s; BoardLen=Board.length();
         //cout<<"BOARD= "<<Board<<endl;
         solve();
    }

    return 0;
}
