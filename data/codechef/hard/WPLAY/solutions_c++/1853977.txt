#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define pb push_back
#define mp make_pair

#define ALL(x) (x).begin(),(x).end()
#define CLR(a,b) memset(a,b,sizeof(a))
#define REPN(x,a,b) for (int x=a; x<b;++x)
#define REP(x,b) REPN(x, 0, b)

#define dbg(x) cout << #x << " = " << x << endl;
#define dbg2(x, y) cout << #x << " = " << x << "  " << #y << " = " << y << endl;
#define dbg3(x, y, z) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << endl;
#define dbg4(x, y, z, w) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << "  " << #w << " = " << w <<  endl;


typedef unsigned long long ull;

bool win[1<<16], good[1<<16];
char buf[111];
ull W[500010];

ull hash(string s) {
    ull res = 0;
    REP(i, s.length()) {
        res = res*1007 + s[i];
    }
    return res;
}

int main() {
    int D, T, r, c;
    scanf("%d", &D);
    REP(i, D) {
        scanf("%s", buf);
        sort(buf, buf + strlen(buf));
        W[i] = hash(buf);
    }
    sort(W, W + D);
    D = unique(W, W+D) - W;
    scanf("%d %d %d", &r, &c, &T);
    int n = r*c;
    REP(tc, T) {
        REP(i, r) scanf("%s", buf + i*c);
        sort(buf, buf + n);

        win[0] = 0; good[0] = 0;
        REPN(i, 1, (1<<n)) {
            string s = "";
            REP(j, n) if (i & (1<<j)) s += buf[j];
            ull ids = hash(s);
            int pos = lower_bound(W, W + D, ids) - W;
            good[i] = (pos != D && W[pos] == ids);

            win[i] = 0;
            for (int u = i; u; u = (u - 1) & i) {
                if (good[u] && !win[u^i]) {
                    win[i] = 1;
                    break;
                }
            }
        }

        if (win[(1<<n)-1]) printf("Alice\n");
        else printf("Bob\n");
    }
    return 0;
}
