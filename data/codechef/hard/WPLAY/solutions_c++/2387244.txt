#include <iostream>
    #include <algorithm>
    #include <stack>
    #include <queue>
    #include <set>
    #include <map>
    #include <vector>
    #include <utility>
    #include <functional>
    #include <bitset>
    #include <cmath>
    #include <cstring>
    #include <cstdio>
    #include <ctime>
    #include <deque>
    using namespace std;
    typedef long long ll;
    typedef pair<int, int> pii;
    typedef vector<int> vi;
    typedef vector<pii> vii;
    #define foru(i, n) for(int i=0; i<(int)n; i++)
    #define ford(i, n) for(int i=(int)n-1; i>=0; i--)
    #define foruu(i, a, b) for(int i=(int)a; i<=(int)b; i++)
    #define fordd(i, a, b) for(int i=(int)a; i>=(int)b; i--)
    #define getmin(a,b) a=min(a,b);
    #define getmax(a,b) a=max(a,b);
    #define pb push_back
    #define mp make_pair
    #define fs first
    #define sc second
    
    const int oo=(int)1e9;
    const ll base=(ll)1e9+7;
    const double eps=1e-9;
    int t, m, n, R, C, used[66777], now, e, maxe;
    bool Game[66777];
    char s[33];
    ll pw[33], a[555666], c;
    

	bool ok(ll e) 
{
  return binary_search(a,a+m,e);
  return 0;
}   

void Hash(int i) {
    	
    		if(i==n) {
    				if(ok(c)) 
								used[e]=now;		// Check whether current word is in Dictionary or not 
    							return;
    				 }
    			Hash(i+1);
				    e+=(1<<i);
				    c+=pw[s[i]-'A'];
    			Hash(i+1);
				    e-=(1<<i);
				    c-=pw[s[i]-'A'];
}
 
    int main() {
    		//	freopen("input.txt","r",stdin);
			    pw[0]=1;
			    foruu(i,1,25) pw[i]=pw[i-1]*base;
			    scanf("%d",&m);
			    foru(i,m) {
			    scanf("%s",s);
			    foru(j,strlen(s)) a[i]+=pw[s[j]-'A'];		// Hashing
			    }
			 //   cout << "rct\n";
			    sort(a,a+m);
			    scanf("%d%d%d",&R,&C,&t);
			    n=R*C;
			    maxe=1<<n;
			    
    while(t--) {
    		//	cout << t << endl;
    			foru(i,R) scanf("%s",s+i*C);
    			c=e=0;
    			now++;
    			Hash(0);
    			
    			for(int curr=1; curr < maxe; curr++)
    			{
    				Game[curr] = 0;
    				for(int i=curr; i > 0; i = (i-1)& curr) 
					if(used[i]==now && (Game[curr]|=!Game[i^curr]))	
					break;	// Game Theory
    			}
    				if(Game[maxe-1]) 
								cout << "Alice\n"; 
							else 
								cout << "Bob\n";
    		}
    return 0;
    }