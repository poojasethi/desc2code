#include <iostream>
#include <cstdio>
#include <algorithm>
#include <string.h>

using namespace std;

int D , Bor[5000000][26] , Nbor = 1 , N , M , T , dp[1 << 16];
bool EndPointer[5000000] , Used[1 << 16];
char S[16];

void add_string(char *s)
{
    int root = 1;
    for (int i = 0 ; i < strlen(s) ; i ++ )
    {
        if ( !Bor[root][s[i] - 'A'] )
            Bor[root][s[i] - 'A'] = ++Nbor;
        root = Bor[root][s[i] - 'A'];
    };
    EndPointer[root] = true;
};

bool Find(int mask)
{
    int str_len = 0;
    char buf[16] = {};
    for (int i = 0 ; i < (N * M) ; i ++ )
        if ( (mask >> i) & 1 )
            buf[str_len ++ ] = S[i];

    sort(buf , buf + str_len);

    int root = 1;
    for (int i = 0 ; i < str_len ; i ++ )
        if ( !Bor[root][buf[i] - 'A'] )
            return false;
        else
            root = Bor[root][buf[i] - 'A'];

    return EndPointer[root];
};

int main()
{
  scanf("%d\n",&D);
  for (int i = 1 ; i <= D ; i ++ )
  {
    char buf[20];
    scanf("%s\n",&buf);
    sort(buf , buf + strlen(buf));
    add_string(buf);
  };
  scanf("%d %d %d\n",&N,&M,&T);
  for ( ; T -- ; )
  {
      for (int i = 0 ; i < N ; i ++ )
      {
        for (int j = 0 ; j < M ; j ++ )
            scanf("%c",&S[i * M + j]);
        scanf("\n");
      };
      for (int i = 1 ; i < (1 << (N * M) ) ; i ++ )
        if ( Find(i) )
            Used[i] = true;
        else
            Used[i] = false;
     dp[0] = 0;
      for (int i = 1 ; i < (1 << (N * M) ) ; i ++ )
      {
          dp[i] = 0;
          for (int j = i ; j > 0 ; j = (j - 1) & i )
            if ( !dp[i ^ j] && Used[j] )
            {
              dp[i] = 1;
              break;
            };
      };
      if ( !dp[(1 << (N * M)) - 1] )
        printf("Bob\n");
      else
        printf("Alice\n");
  };
  return 0;
};
