// main.cpp
/*
ID: tiendao1
LANG: C++
TASK: theme
*/
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
 #include <vector>
// #include <sstream>
 #include <map>
 #include <set>
//#include <deque>
#include <queue>
#include <stack>
// #include <cstdlib>
// #include <climits>
// #include <functional>
// #include <ctime>
// #include <cmath>
 //#include <bitset>
// #include <utility>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
#define inf 1e9 + 1
#define linf 1e18
#define BASE 1000000
#define EPS 1e-10
#define PI acos(-1)
#define pii pair<int,int>
#define fi first
#define se second
#define ALL(x) (x).begin(), (x).end()
#define ms(x,val) memset(x, val, sizeof(x))
#define pb(x) push_back(x)
#define make_unique(x) sort(ALL(x)) ; x.erase( unique(ALL(x)), x.end()) ;
#define dbg(x) do { cout << #x << " = " << x << endl; } while(0)
#define mp(x, y) make_pair(x, y)

/*** IMPLEMENTATION ***/
bool exitInput = false;
int ntest = 1, itest = 1 ;

const int dx[4] =
{
    0, 0, -1, 1
};
const int dy[4] =
{
    1, -1, 0, 0
};
// const int dx[8] = {-2, -1, -1, +0, +0, +1, +1, +2};
// const int dy[8] = {+0, -1, +1, -2, +2, -1, +1, +0};

/** Knight Move **/
// const int dx[8] = {+1, +2, +2, +1, -1, -2, -2, -1};
// const int dy[8] = {+2, +1, -1, -2, -2, -1, +1, +2};

const char * directions[4] =
{
    "NE", "SE", "Sw", "Nw"
};
const ll Mod = 1000000000LL + 7;
const int maxn = 16 + 5;
const int maxv = 2000 + 5;
const int maxe = 400000 + 5;
//const int root = 1;

int n, m, T, R, C;
char s[17], mat[5][5], a[17];
bool inDict[1<<16];
int nimber[1<<16];

struct Trie
{
    Trie* next[26];
    bool isEnd;
    Trie()
    {
        isEnd = false;
        for(int i = 0; i < 26; ++i) next[i] = NULL;
    }
    Trie* link(char c)
    {
        if(next[c] == NULL)
        {
            next[c] = new Trie();
        }
        return next[c];
    }
};
Trie* root;

int go(int mask)
{
    int &ref = nimber[mask];
    if(ref != -1)
        return ref;
    if(mask == 0)
        return ref = 0;

    ref = 0;
    int sub_mask, next_mask;
    int i;
    set<int> si;
    for(sub_mask = mask; sub_mask > 0; sub_mask = (sub_mask - 1) & mask)
    {
        if(inDict[sub_mask])
        {
            next_mask = mask ^ sub_mask;
            i = go(next_mask);
            si.insert(i);
        }
    }
    for(i = 0; si.count(i) > 0; ++i);
    ref = i;
    return ref;
}

int main()
{
#ifdef HOME
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    //time_t t1, t2; t1 = clock();
#else
    //freopen("theme.in","r",stdin) ; freopen("theme.out", "w", stdout);
#endif
    int i, j, k;

    root = new Trie();

    scanf("%d", &n);

    Trie* cur;
    for(i = 0; i < n; ++i)
    {
        scanf("%s", s);
        k = strlen(s);
        sort(s, s + k);

        cur = root;
        for(j = 0; j < k; ++j)
        {
            cur = cur->link(s[j] - 'A');
        }
        cur->isEnd = true;
    }
    scanf("%d %d", &R, &C); m = R * C;
    scanf("%d", &T);
    int res = 0;

    int t, mask;
    for(i = 0; i < T; ++i)
    {
        t = 0;
        for(j = 0; j < R; ++j)
        {
            scanf("%s", mat[j]);
            for(k = 0; k < C; ++k)
            {
                a[t++] = mat[j][k];
            }
        }
        sort(a, a + m);

        for(mask = 1; mask < (1<<m); ++mask)
        {
            cur = root;
            inDict[mask] = false;

            for(j = 0; j < m; ++j)
            {
                if(mask & (1<<j))
                {
                    k = a[j] - 'A';
                    if(cur->next[k] == NULL)
                    {
                        break;
                    }
                    else
                    {
                        cur = cur->next[k];
                    }
                }
            }
            if(j == m && cur->isEnd)
            {
                inDict[mask] = true;
            }
        }

        ms(nimber, -1);
        res = go((1<<m) - 1); // calculate nimber of mask
        if(res == 0)
        {
            puts("Bob");
        }
        else
        {
            puts("Alice");
        }

    }


    return 0;
}
