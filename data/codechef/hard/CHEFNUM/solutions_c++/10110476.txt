#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define pll pair<ll,ll>
#define MOD 1000000007
#define ll long long int
#define MAXINT 1000000000001ll
#define SET(x,y) memset(x,y,sizeof(x));

using namespace std;

ll DP[11][2][1<<16];
int sc[1<<16],ge[11][1<<16];
string s;

int inline score(int mask) {
	if(sc[mask]!=-1)	return sc[mask];
	int ans,i,j,n=0;
	for(i=0;i<=15;i++)
		if(mask&(1<<i))
			for(j=i+1;j<=15;j++)
				if(mask&(1<<j))
					n|=(1<<(i^j));
	ans=0;
	for(i=0;i<=15;i++)	if(n&(1<<i))	ans+=i;
	return sc[mask]=ans;
}

int simple(string s) {
	int i,x=0,mask=1,l=s.size();
	for(i=l-1;i>=0;i--) {
		x=x^(s[i]-'0');
		mask|=(1<<x);
	}
	return score(mask);
}

int inline getIt(int n,int m) {
	if(ge[n][m]!=-1)	return ge[n][m];
	int ans = 1,i;
	for(i=1;i<=15;i++)
		if(m&(1<<i))
			ans |= (1<<(i^n));
	return ge[n][m]=ans;
}

ll inline workOut(int p,int m,int f) {
	ll &ans = DP[p][f][m];
	if(ans!=-1)	return ans;
	if(p==s.size()) {
		if(m==1)	return ans = 1;
		else		return ans = 0;
	}
	int i,x,li,y;
	if(f==0)	li=s[p]-'0';
	else		li=9;
	ans = 0;
	for(i=0;i<=li;i++) {
		if((m&(1<<i)) == 0 )	continue;
		x = getIt(i,m);
		y = x|(1<<i);
		if(f || i<li)	ans = (ans + workOut(p+1,x,1) + ((x!=y)?workOut(p+1,y,1):0));
		else		ans = (ans + workOut(p+1,x,0) + ((x!=y)?workOut(p+1,y,0):0));
	}
	return ans%=MOD;
}

ll work(string s1) {
	ll i,ans=0,c,j;
	SET(DP,-1);
	s=s1;
	for(i=1;i<(1<<16);i+=2)	{
		c=0;
		for(j=1;j<16;j++)	if(i&(1<<j))	c++;
		if(c<=s1.size()) {
			workOut(0,i,0);
			ans = (ans + (DP[0][0][i] * score(i)));
		}
	}
	return ans%MOD;
}

void solve(void) {
	string s1,s2;
	ll ans;
	cin>>s1>>s2;
	ans = (work(s2) + MOD - work(s1) + simple(s1))%MOD;
	cout<<ans<<endl;
}

int main() {
	int i,t;
	SET(ge,-1);SET(sc,-1);
	for(t=0;t<(1<<16);t++)	{
		score(t);
		for(i=0;i<=9;i++)
			getIt(i,t);
	}
	cin>>t;
	while(t--)	solve();
	return 0;
}
