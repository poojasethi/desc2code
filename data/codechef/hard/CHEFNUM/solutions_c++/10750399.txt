#include<bits/stdc++.h>



using namespace std;



#define ss second



#define mp make_pair



#define pb push_back



#define ll int



#define pp pair<int,int> 



#define ve vector



#define mod 1000000007



typedef long long int fl;



#define db 0







int dp[(1<<16)][10][16][2];



short vis[(1<<16)][10][16][2][10][2];



// mask pos lastxor // which one // test case



int low=0;



int tt=0;



char s[11];



ll ahead[12];



ll tla[12];



int n;



int gs;



// precomputation of number form pos+1 to n( used in case of tight bound)  , and power ( used in loos bound)



fl  prehead(char arr[])



{



memset(ahead,0,sizeof(ahead));



fl x=1;



for(int i=n-1;i>=0;i--)



{



ahead[i]=1ll*x*(s[i]-'0')+ahead[i+1];



x=x*10;


       


}



tla[0]=1;



for(int i=1;i<=10;i++)



{



tla[i]=(1ll*10*tla[i-1]);



if(tla[i]>=mod)



tla[i]%=mod;



}





}







int cc=0;







int  solve(int mask,int pos,int lx,int apos,int tight)



{


        


if(pos==n)



return 0;



if(vis[mask][pos][lx][low][tt][tight]==gs)



{



return dp[mask][pos][lx][tight];



}



vis[mask][pos][lx][low][tt][tight]=gs;


    


int  ret=0;



if(tight)



{






for(int i=0;i<=s[pos]-'0';i++)



{



bool f=0;



int nt=0;



if(i==s[pos]-'0')



{



               



nt=1;






}



int now=i^lx;


        


int req=now^gs;


       


if(mask>>(req) &1)



{


          


f=1;



if(i==s[pos]-'0')



ret+=(ahead[pos+1]+1);



else ret+=tla[n-pos-1];






if(ret>=mod)



ret%=mod;    






}



if(f==0)



{


            


ret=ret+solve(mask|((1<<((i^lx)))),pos+1,i^lx,apos+1,nt); 



if(ret>=mod) ret%=mod;



} 



}



}



else



{



for(int i=0;i<=9;i++)



{



bool f=0;



int nt=0;



int now=i^lx;



int req=now^gs;


        


if((mask>>(req) )&1)



{






f=1;



ret+=(1ll*tla[n-pos-1])%mod;






if(ret>=mod)



ret%=mod;    






}



if(f==0)



{



ret+=solve(mask|((1<<((i^lx)))),pos+1,i^lx,apos+1,0);



if(ret>=mod) ret%=mod; 



} 



}



}



dp[mask][pos][lx][tight]=ret;



return ret;



}



int  f(int num)



{



if(num==0)



return 0;



if(num==1)



return 1;



sprintf(s,"%d",num);



n=strlen(s);



prehead(s);



fl  ret=0;



int arr[20];



// calculating for each i   number of times it comes .



for(int i=1;i<=15;i++)



{






gs=i;



int  temp=solve(1,0,0,0,1);



ret+= ((1ll*temp*gs)%mod); 







if(ret>=mod)  ret%=mod;


       


}



return ret;



}



int main()



{



int t;



cin>>t;



tt=0;



while(t--)



{



int l,r;



scanf("%d %d",&l,&r);



low=1;



int  bg=f(r);



low=0;



int  sm=f(l-1);


         


int  ans=(bg-sm+mod)%mod;



printf("%d\n",ans);



tt++;



}


    


return 0;



}