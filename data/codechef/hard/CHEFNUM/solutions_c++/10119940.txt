#include<bits/stdc++.h>
//#define DEBUG
//#ifdef DEBUG
//code to debug
//#endif
//#undef DEBUG
using namespace std;

const int mod=(int)1e9+7,maxn=100005,ln=17;
#define F(i,p,n) for(int i=p;i<n;i++)
#define I(i,p,q) for(int i=p;i>=q;i--)
#define forall(itr,x)	for( __typeof((x).begin()) itr=(x).begin(); itr!=(x).end(); itr++)
#define Ss(x) scanf("%s",x)
#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
//#define getcx getchar_unlocked
#define getcx getchar
/*inline void S(int& n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}*/
#define Ps(x) printf("%d  ",x)
#define P(x) printf("%d\n",x)
typedef long long int LL;
#define modulo(x,y,z) (x+y)<0?x+y+z:((x+y>=z)?x+y-z:x+y)
#define Debug(x) cout << #x << "=" << x << endl
#define Debugarr(x,n) cout<<"array "<<#x<<":"<<endl; F(ij,0,n) cout<<ij<<". "<<x[ij]<<endl; cout<<endl
#define Debugarr2(x,m,n) cout<<"array "<<#x<<":"<<endl; F(ij,0,m) {F(jk,0,n) cout<<x[ij][jk]<<" "; cout<<endl;} cout<<endl
#define pii pair<int,int>
#define Fi first
#define Se second
#define chk(x,n) (x[n>>5]&(1<<(n&31))) //unsigned int
#define set(x,n) (x[n>>5]|=(1<<(n&31)))//32 bit
const int shift=30,etf=mod-1,LIM=(int)1e9;

const LL inf=(LL)1e18+1;

const double PI=(double)3.141592653589793238,EPSILON=1e-10;


int decimal[20];
int dp[1<<16][11];
bool memo[1<<16][11];

int convert(int num)
{
    int pos=0;
    while(num)
    {
        int r=num%10;
        decimal[pos++]=r;
        num/=10;
    }
    return pos;
}

void _clear()
{
    memset(memo,0,sizeof(memo));
}

int func(int consec_mask,int pos)
{
    if(memo[consec_mask][pos])
    {
        return dp[consec_mask][pos];
    }

    int ret=0;

    memo[consec_mask][pos]=true;

    if(pos==0)
    {
        int mask=0;
        int cnt=0,num=consec_mask;
        while(num)
        {
            if(num&1)
            {
                int temp=num,c=cnt;
                while(temp)
                {
                    if(temp&1)
                    {
                        mask|=1<<(c^cnt);
                    }
                    temp>>=1;
                    c++;
                }
            }
            num>>=1;
            cnt++;
        }
        cnt=0;
        while(mask)
        {
            if(mask&1)
            {
                ret+=cnt;
            }
            mask>>=1;
            cnt++;
        }
        dp[consec_mask][pos]=ret;
        return ret;
    }





    F(j,0,10)
    {
        int mask=1;
        int cnt=0,num=consec_mask;
        while(num)
        {
            if(num&1)
            {
                mask|=1<<(cnt^j);
            }
            cnt++;
            num>>=1;
        }
        ret=modulo(ret,func(mask,pos-1),mod);
    }

    dp[consec_mask][pos]=ret;

    return ret;
}

int solve(int num)
{
    if(num==0)
        return 0;
    _clear();
    int len=convert(num);
    int ret=0,consec_mask=1;
    I(i,len,1)
    {
        int d=decimal[i-1];

        F(j,0,d)
        {
            int mask=1;
            int cnt=0,num=consec_mask;
            while(num)
            {
                if(num&1)
                {
                    mask|=1<<(cnt^j);
                }
                cnt++;
                num>>=1;
            }
            ret=modulo(ret,func(mask,i-1),mod);
        }
        int mask=1;
        int cnt=0;
        while(consec_mask)
        {
            if(consec_mask&1)
            {
                mask|=1<<(cnt^d);
            }
            cnt++;
            consec_mask>>=1;
        }
        consec_mask=mask;
    }
    return ret;
}

int main()
{
    int t=10;
    S(t);
    while(t--)
    {
        int l,r;
        cin>>l>>r;
        int ans=solve(r+1);
        //Debug(ans);
        ans-=solve(l);
        cout<<(ans+mod)%mod<<endl;
    }
    return 0;
}

