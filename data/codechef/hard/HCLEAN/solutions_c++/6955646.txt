#include <stdio.h>
#include <unistd.h>
#include <malloc.h>
#include <cmath>

#define BS 64*1024
char ibuffer[BS];
int ibuffer_offset = 0;
int ibuffer_size = 0;

int inline fastread() 
{
	register int r = 0;
	char s = '1';
	int sign = 1;

	while(1) 
	{
		if(ibuffer_offset >= ibuffer_size) 
		{
			ibuffer_size = read(0, ibuffer, BS);
			ibuffer_offset = 0;
		}

		if(ibuffer[ibuffer_offset] < '0' || ibuffer[ibuffer_offset] > '9')
		{ 
			if(s != '0')
			{
				if(ibuffer[ibuffer_offset++] == '-')
					sign = -1;
			}
			else
				return r * sign;
		}
		else 
		{
			s = '0';
			r = (r << 3) + (r << 1) + ibuffer[ibuffer_offset++] - '0';
		}
	}
}

int **generate_gray_code(int N)
{
	if(N <= 0)
	{
		return NULL;
	}
	
	if(N == 1)
	{
		int **res = new int*[2];
		
		res[0] = new int[1];
		res[1] = new int[1];
		
		res[0][0] = -1;
		res[1][0] = 1;
		
		return res;
	}
	
	int left = (int) pow(2, N - 1);
	
	int **res = new int*[left << 1];
	
	int **part = generate_gray_code(N - 1);
	
	for(int i = 0; i < left; i++)
	{
		res[i] = new int[N];
		res[left + i] = new int[N];
		
		res[i][0] = -1;
		res[left + i][0] = 1;
		
		for(int j = 0; j < N - 1; j++)
		{ 
			res[i][j + 1] = part[i][j];
			res[left + i][j + 1] = part[left - i - 1][j];
		}
	}
	
	return res;
}

int findpos(int *code, int **gray_sequence, int N)
{
	int pw = pow(2, N);
	
	for(int i = 0; i < pw; i++)
	{
		int j;
		
		for(j = 0; j < N; j++)
		{
			if(code[j] != gray_sequence[i][j])
			{
				break;
			}
		}
		
		if(j == N)
		{
			return i;
		}
	}
	
	return -1;
}

void display_sequence(int **gray_sequence, int pos, int N)
{
	if(pos == -1)
	{
		printf("-2\n");
		return;
	}
	
	int pw = pow(2, N);
	
	for(int i = pos; i < pw; i++)
	{
		int j;
		
		for(j = 0; j < N - 1; j++)
		{
			printf("%d ", gray_sequence[i][j]);
		}
		
		printf("%d\n", gray_sequence[i][j]);
	}
	
	for(int i = 0; i < pos; i++)
	{
		int j;
		
		for(j = 0; j < N - 1; j++)
		{
			printf("%d ", gray_sequence[i][j]);
		}
		
		printf("%d\n", gray_sequence[i][j]);
	}
}

int main()
{
	int t, n, d;
	
	for(t = fastread(); t--; )
	{
		n = fastread();
		d = fastread();
		
		int *a = new int[n];
		
		for(int i = 0; i < n; i++)
		{
			a[i] = fastread();
		}
		
		if(4 * a[0] * a[0] > d)
		{
			printf("-2\n");
		}
		else
		{
			int **seq = generate_gray_code(n);
			display_sequence(seq, findpos(a, seq, n), n);
		}
	}
	
	return 0;
}