#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(0);cin.tie(0);

using namespace std;


#define ll long long
#define ff first
#define ss second
#define mpa make_pair
#define MOD  23102009
#define pb push_back
#define lld I64d
#define MXN 1000000

int bitcnt(int mask){return __builtin_popcount(mask);}
int SET(int N,int pos){	return N=N | (1<<pos);}
int RESET(int N,int pos){	return N= N & ~(1<<pos);}
int check(int N,int pos){	return (N & (1<<pos));}
int toggle(int N,int pos){if(check(N,pos))return N=RESET(N,pos);return N=SET(N,pos);}
void PRINTBIT(int N){	printf("("); for(int i=6;i>=1;i--)	{bool x=check(N,i);cout<<x;}	puts(")");}
int mod(int a, int b) { return a - a/b * b;}

int M;
int N;
char st1[MXN];
char st2[MXN];


ll memo[1002][1002];
bool vis[1002][1002];

ll memo1[1002][1002];
bool vis1[1002][1002];

ll lcs(int x, int y)
{
	if(x == M + 1 || y == N + 1) {
		return 0;
	}
	
	// memoization part :)
	if(vis[x][y])
		return memo[x][y];
	vis[x][y] = true;
	
	ll ans = 0;
	if(st1[x - 1] == st2[y - 1]) {
		ans = lcs(x + 1, y + 1) + 1;
	} else {	
		ans = max(lcs(x + 1, y), lcs(x, y + 1));
	}
	return memo[x][y] = ans;
}

ll Dist_lcs(int x, int y)
{
	if(x == M + 1 || y == N + 1)
		return 1;
	
	if(vis1[x][y])
		return memo1[x][y];
	vis1[x][y] = true;
	
	ll ans = 0;
	if(st1[x - 1] == st2[y - 1]) {
		ans = Dist_lcs(x + 1, y + 1);
		if(ans >= MOD)
			ans %= MOD;
	} else {
		if(memo[x][y] == memo[x + 1][y]) {
			ans += Dist_lcs(x + 1, y);
			if(ans >= MOD)
				ans %= MOD;
		}
		
		if(memo[x][y] == memo[x][y + 1]) {
			ans += Dist_lcs(x, y + 1);
			if(ans >= MOD)
				ans %= MOD;
		}
		
		if(memo[x][y] == memo[x + 1][y + 1]) {
			ans -= Dist_lcs(x + 1, y + 1);
			if(ans < 0)
				ans += MOD;
		}
	}
	
	return memo1[x][y] = ans;
}

int main()
{
	int T;
	scanf("%d", &T);
	
	while(T--) {
		scanf("%s%s", st1, st2);
		memset(vis, false, sizeof vis);
		memset(vis1, false, sizeof vis1);
		
		M = strlen(st1);
		N = strlen(st2);
		ll Lcs = lcs(1, 1);
	
	/*	
		cout<<"Lcs => " << Lcs <<"\n";
		// Memo Array
		
		for(int i = 1; i <= M + 1; ++i) {
			for(int j = 1; j <= N + 1; ++j) {
				cout<< memo[i][j] << " ";
			}
			puts("");
		}
		*/
		
		printf("%lld %lld\n",Lcs, Dist_lcs(1, 1));
		
	}
	
	return 0;
}
