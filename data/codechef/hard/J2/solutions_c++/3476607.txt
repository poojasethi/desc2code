/*Author: Rishul Aggarwal*/

#include<bits/stdc++.h>

#define mod 1000000007
#define ll long long
#define rep(i,a,b) for(int i=a;i<=b;i++)
#define in(type,x) scanf("%" #type,&x)
#define debug(args...) {dbg,args; cerr<<endl;}
#define test int t;\
			 in(d,t);\
			 while(t--)

using namespace std;

struct debugger
{template<typename T> debugger& operator,(const T& v)
 {cerr<< v <<" ";
  return *this;
 }
}dbg;

ll gcd(ll a,ll b) {if(b==0) return a; return gcd(b,a%b);}

ll power(ll b,ll exp,ll m) {ll ans=1; b%=m; while(exp){if(exp&1) ans=(ans*b)%m; exp>>=1; b=(b*b)%m; } return ans; }


#define MOD 23102009

int l[1005][1005],d[1005][1005],m,n;

void computeLCSLength(string a,string b)
{
    rep(i,0,m)
	{
		rep(j,0,n)
		{
			if(i==0 || j==0)
			 l[i][j]=0;
			
			else if(a[i-1]==b[j-1])
			 l[i][j]=l[i-1][j-1]+1;
			
			else
			 l[i][j]=max(l[i-1][j],l[i][j-1]);
			 
		}
		
	}
	
}

void computeDistinctLCS(string a,string b)
{
	rep(j,0,n)
	{
		rep(i,0,m)
		{
			if(i==0 || j==0)
			 d[i][j]=1;
			
			else
			{
			
				 d[i][j]=0;
				 if(a[i-1]==b[j-1])
				  d[i][j]=d[i-1][j-1]%MOD;
				 
				 else
				 {
				  if(l[i][j]==l[i-1][j])
				   d[i][j] = (d[i][j]%MOD + d[i-1][j]%MOD)%MOD;
				  
				  if(l[i][j]==l[i][j-1])
				   d[i][j] = (d[i][j]%MOD + d[i][j-1]%MOD)%MOD;
				  
				  if(l[i][j]==l[i-1][j-1])
				   d[i][j] = (d[i][j]%MOD - d[i-1][j-1]%MOD + MOD)%MOD;
				 }
			 
		    }
			
		}
	}
	
}

void printarray(int a[][1005])
{rep(i,0,m)
  {rep(j,0,n)
   cout<<a[i][j]<<" ";	
   cout<<endl;
  }
}


int main()
{
 test
  {string a,b;
   cin>>a>>b;
   
   m=a.length(),n=b.length();
   
   memset(l,0,sizeof(l[0][0])*m*n);
   memset(d,0,sizeof(d[0][0])*m*n);
   
   computeLCSLength(a,b);
   computeDistinctLCS(a,b); //check MOD value before this
   
   //printarray(l),printarray(d);
   
   printf("%d %d\n",l[m][n],d[m][n]%MOD);

  }


return 0;
}

