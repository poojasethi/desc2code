#include<iostream>
#include<string>
#include<cstring>
#include<algorithm>
using namespace std;

int lcs[1010][1010];
string s,t;


void findlcs()
{
	for(int i=1;i<=s.length();i++)
	{
		for(int j=1;j<=t.length();j++)
		{
			if(s[i-1]==t[j-1])
			{
				lcs[i][j]=lcs[i-1][j-1]+1;
			}
			else
			{
				lcs[i][j]=max(lcs[i-1][j],lcs[i][j-1]);
			}
		}
	}
	
	
}



//used to debug
void printmat()
{
	for(int i=0;i<s.length();i++)
	{
		for(int j=0;j<t.length();j++)
		{
			cout<<lcs[i][j]<<" ";
		}
		cout<<endl;
	}
}


int d[1010][1010];
long int finddist(int i,int j)
{
	if(i<=0||j<=0)
	{
		return 1;
	}
	
	if(d[i][j]!=-1)
	return d[i][j];
	d[i][j]=0;
	if(s[i-1]==t[j-1])
	{
		d[i][j]= finddist(i-1,j-1);
	}
	else
	{
		if(lcs[i][j]==lcs[i-1][j])
		{
			d[i][j]+=finddist(i-1,j);//for ways from left
		}
		if(lcs[i][j]==lcs[i][j-1])
		{
			d[i][j]+=finddist(i,j-1);//for ways from top
		}
		if(lcs[i][j]==lcs[i-1][j-1])
		{
			d[i][j]-=finddist(i-1,j-1);//for repeting ways
		}
	}
	
	return (d[i][j]+23102009)%23102009;
}

int main()
{
	int tc;
	cin>>tc;
	while(tc--)
	{
		
		cin>>s>>t;
		
		for(int i=0;i<=1000;i++)
		{
			lcs[i][0]=0;
			lcs[0][i]=0;
		}
		memset(d,-1,sizeof(d));
		findlcs();
		
		
		//uncomment to print lcs matrix
		//printmat();
		
		int res=lcs[s.length()][t.length()];
		cout<<res<<" "<<finddist(s.length(),t.length())<<endl;
	}
}