#include<cstdio>
#include<cstdlib>
#include<cstring>
template<class T> inline T max(T x, T y) { return (x > y) ? x : y; }

const int mod (23102009);
inline void norm(int&n){n+=mod;while(n>=mod)n-=mod;}
inline void rr(int&n){scanf("%d",&n);}

char a[1005], b[1005];
int le_a, le_b;

int le[1005][1005]; // max. len
int cnt[1005][1005]; // count
void solve()
{
	scanf("%s%s", a, b);
	le_a = strlen(a), le_b = strlen(b);
	
	le[0][0] = 0; cnt[0][0] = 1;
	
	int i, j;
	for (i = 0; i <= le_a; i ++) le[i][0] = 0, cnt[i][0] = 1;
	for (j = 0; j <= le_b; j ++) le[0][j] = 0, cnt[0][j] = 1;
	
	int mx (0);
	for (i = 1; i <= le_a; i ++) for (j = 1; j <= le_b; j ++)
	{
		if (a[i - 1] == b[j - 1])
		{
			le[i][j] = le[i - 1][j - 1] + 1;
			cnt[i][j] = cnt[i - 1][j - 1];
		}
		else
		{
			le[i][j] = max(le[i - 1][j], le[i][j - 1]);
			cnt[i][j] = 0;
			if (le[i - 1][j    ] == le[i][j]) cnt[i][j] += cnt[i - 1][j];
			if (le[i    ][j - 1] == le[i][j]) cnt[i][j] += cnt[i][j - 1];
			if (le[i - 1][j - 1] == le[i][j]) cnt[i][j] -= cnt[i - 1][j - 1];
		}
		norm(cnt[i][j]);
		mx = max(mx, le[i][j]);
	}
	printf("%d %d\n", le[le_a][le_b], cnt[le_a][le_b]);
}

main()
{
	int tc;rr(tc);while(tc--)solve() ;
}
