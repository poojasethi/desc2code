#include <cstdio>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

#define ll long long

const double PI = 2 * acos(0.0);

long long sqr(int x) {
	return ((long long) x) * x;
}

vector<double> A, B;

void add(double a1,double a2)
{
	if(a1>a2)
		a2+=2*PI;
	// so a1 and a2 has to be in [-PI,PI]
	if(a1<-PI)
	{
		A.push_back(a1+2*PI);
		B.push_back(PI);
		A.push_back(-PI);
		B.push_back(a2);
	}
	else if(a2>PI)
	{
		A.push_back(a1);
		B.push_back(PI);
		A.push_back(-PI);
		B.push_back(a2-2*PI);
	}
	else
	{
		A.push_back(a1);
		B.push_back(a2);
	}
}

int main() {

	int T, N, W, H;
	int Q;
	double total, ang, alpha, curA, curB, visible;
	int covered;
	ll Dij;

	vector<int> X, Y, R;
	int Xi, Yi, Ri;
	double x0, y0, r0;

	// input number of tests
	cin >> T;

	// loop over tests
	for (int t = 0; t < T; ++t) {

		// input W, H, N
		int W, H, N;
		cin >> W >> H >> N;

		// scaling W and H
		W *= 100;
		H *= 100;

		// create arrays for X, Y, R
		vector<int> X(N), Y(N), R(N);

		// loop over circles in input 
		for(int i = 0; i < N; ++i) {

			// input Xi, Yi, Ri as temporary double variables
//			double Xi, Yi ,Ri;
//			cin >> Xi >> Yi >> Ri;
			scanf("%lf %lf %lf",&x0,&y0,&r0);
/*			int Xi=(int)(x0*100+0.5);
			int Yi=(int)(y0*100+0.5);
			int Ri=(int)(r0*100+0.5);
			X.push_back(Xi);
			Y.push_back(Yi);
			R.push_back(Ri);
*/
			// scaling and rounding them to be integers
			X[i] = int(100 * x0 + 0.5);
			Y[i] = int(100 * y0 + 0.5);
			R[i] = int(100 * r0 + 0.5);
		}
/*
		for(int i=0;i<N;i++)
		{
			scanf("%lf %lf %lf",&x0,&y0,&r0);
			Xi=(int)(x0*100+0.5);
			Yi=(int)(y0*100+0.5);
			Ri=(int)(r0*100+0.5);
			X.push_back(Xi);
			Y.push_back(Yi);
			R.push_back(Ri);
		}
*/

		// the answer to the problem, init by zero
		double res = 0;

		// loop over circles
		for (int i = 0; i < N; ++i) {

			// shortcut for parameters of the i-th circle
			int Xi = X[i], Yi = Y[i], Ri = R[i];

			// circle lies outside the rectangle and do not intersect its sides
			// without this check we will count it to the answer :)
			if(Xi>=W+Ri || Yi>=H+Ri)
				continue;

			// init vectors A and B
			A.clear(); B.clear();

			if(Xi>=W+Ri || Yi>=H+Ri)
				continue;
			// left
			if(Xi<Ri)
			{
				ang=acos(-((double)Xi)/Ri);
				add(ang,-ang);
			}
			// right
			if(Xi+Ri>W)
			{
				ang=acos(((double)(W-Xi))/Ri);
				add(-ang,ang);
			}
			// down
			if(Yi<Ri)
			{
				ang=asin(-((double)Yi)/Ri);
				add(-PI-ang,ang);
			}
			// up
			if(Yi+Ri>H)
			{
				ang=asin(((double)(H-Yi))/Ri);
				add(ang,PI-ang);
			}

			// needed to check whether the i-th circle is covered completely by some other circle
			bool covered = false;

			// loop over other circle
			for (int j = 0; j < N; ++j) {

				// we don't need to intersect the circle with itself
				if (i == j) {
					continue;
				}

				// shortcut for parameters of the j-th circle
				int Xj = X[j], Yj = Y[j], Rj = R[j];

				// the square of distance between centers
				long long Dij = sqr(Xj - Xi) + sqr(Yj - Yi);

				if(Rj>Ri && sqr(Ri-Rj)>=Dij)
				{
					covered=1;
					break;
				}

				if(sqr(Ri+Rj)<=Dij || Ri>Rj&&sqr(Ri-Rj)>=Dij)
					continue;
			
				alpha=atan2(1.0*(Yj-Yi),1.0*(Xj-Xi));
				// cosine theorem to find the angle
				ang=acos((Dij+sqr(Ri)-sqr(Rj))/(2*sqrt(1.0*Dij)*Ri));
				add(alpha-ang,alpha+ang);
			}

			// if circle was completely covered we skip it
			// so actually all found arc are useless now
			if (covered) {
				continue;
			}

			sort(A.begin(),A.end());
			sort(B.begin(),B.end());
			visible=2*PI*Ri;
			if(A.size()!=0)
			{
				curA=A[0], curB=B[0];
				for(int j=1;j<A.size();j++)
				{
					if(curB<A[j])
					{
						visible-=Ri*(curB-curA);
						curA=A[j];
					}
					curB=B[j];
				}
				visible-=Ri*(curB-curA);
			}
			res+=visible;
		}

		// output the result
		printf("%.7lf\n", res * 0.01);
	}
	return 0;
}