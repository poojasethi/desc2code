#include <cstdio>
#include <cstring>
#include<iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;
#define REP(i,n) for(int i=0;i<(n);i++)
typedef unsigned long long ll;
const double EPS=1e-8;
 
struct point
{
	double x, y;
	point(double x=0, double y=0):x(x),y(y)
	{}
	point operator+(const point& b) const
	{
		return point(x+b.x,y+b.y);
	}
	point operator-(const point& b) const
	{
		return point(x-b.x,y-b.y);
	}
	double norm() const
	{
		return sqrt(x*x+y*y);
	}
};
 
struct line
{
	double A,B,C;
	line(double a=0, double b=0, double c=0):A(a),B(b),C(c)
	{}
};
 
struct circle
{
	point c;
	double r;
	circle(double x=0, double y=0, double r=0):c(x,y),r(r)
	{}
	bool contains(const circle& b)
	{
		double d=(b.c-c).norm();
		return d+b.r<=r+EPS;
	}
	double getangle(point p)
	{
		p=p-c;
		return atan2(p.y,p.x);
	}
	pair<point,point> intersect(circle b) const
	{
		b.c=b.c-c;
		circle cr(0,0,r);
		if(fabs((b.c).norm())<EPS)
			return make_pair(1e100,1e100);
		pair<point,point> res= cr.intersect(line(-2*b.c.x,
				              -2*b.c.y,
				              b.c.x*b.c.x + b.c.y*b.c.y + r*r-b.r*b.r));
		res.first=res.first+this->c;
		res.second=res.second+this->c;
		return res;
	}
	pair<point,point> intersect(line b) const
	{
		b.C+=b.A*c.x+b.B*c.y;
		double x0 = -b.A*b.C/(b.A*b.A+b.B*b.B),  y0 = -b.B*b.C/(b.A*b.A+b.B*b.B);
		if (b.C*b.C > r*r*(b.A*b.A+b.B*b.B)-EPS)
			return make_pair(1e100,1e100);
		else {
			double d = r*r - b.C*b.C/(b.A*b.A+b.B*b.B);
			double mult = sqrt (d / (b.A*b.A+b.B*b.B));
			double ax,ay,bx,by;
			ax = x0 + b.B * mult;
			bx = x0 - b.B * mult;
			ay = y0 - b.A * mult;
			by = y0 + b.A * mult;
			return make_pair(point(ax+c.x,ay+c.y),point(bx+c.x,by+c.y));
		}
	}
};
 
vector<pair<double, int> >ev;
 
void add_interval(double s, double e)
{
	if(s<-M_PI)
	{
		add_interval(2*M_PI-s,M_PI);
		s=-M_PI;
	}
	if(e>M_PI)
	{
		add_interval(-M_PI,e-2*M_PI);
		e=M_PI;
	}
	ev.push_back(make_pair(s,1));
	ev.push_back(make_pair(e,-1));
}
 
int main()
{
	int T;
	scanf("%d",&T);
	while(T--)
	{
		double W,H;
		int n;
		scanf("%lf%lf%d",&W,&H,&n);
		vector<pair<circle,bool> > c;
		REP(i,n)
		{
			double x,y,r;
			scanf("%lf%lf%lf",&x,&y,&r);
			c.push_back(make_pair(circle(x,y,r),true));
		}
		REP(i,n)
		{
			if(c[i].second)
			{
				circle& cur=c[i].first;
				if(cur.c.x+cur.r<EPS || cur.c.x-cur.r>W-EPS|| cur.c.y+cur.r<EPS || cur.c.y-cur.r>H-EPS)
					c[i].second=false;
				else
					REP(j,n)
					{
						if(i!=j&&c[j].second&&c[j].first.contains(cur))
						{
							c[i].second=false;
							break;
						}
					}
			}
		}
		double res=0;
		REP(i,n)
		{
			if(c[i].second)
			{
				ev.clear();
				pair<point,point> p;
				p=c[i].first.intersect(line(0,1,0));
				if(p.first.x<1e50)
				{
					double sv,ev;
					sv=c[i].first.getangle(p.first);
					ev=c[i].first.getangle(p.second);
					if(sv>ev) swap(sv,ev);
					double mv=(sv+ev)/2;
					point mp=c[i].first.c;
					mp.x+=c[i].first.r*cos(mv);
					mp.y+=c[i].first.r*sin(mv);
					if(mp.y<EPS)
						add_interval(sv,ev);
					else
						add_interval(ev,sv+2*M_PI);
				}
				p=c[i].first.intersect(line(0,1,-H));
				if(p.first.x<1e50)
				{
					double sv,ev;
					sv=c[i].first.getangle(p.first);
					ev=c[i].first.getangle(p.second);
					if(sv>ev) swap(sv,ev);
					double mv=(sv+ev)/2;
					point mp=c[i].first.c;
					mp.x+=c[i].first.r*cos(mv);
					mp.y+=c[i].first.r*sin(mv);
					if(mp.y>H-EPS)
						add_interval(sv,ev);
					else
						add_interval(ev,sv+2*M_PI);
				}
				p=c[i].first.intersect(line(1,0,0));
				if(p.first.x<1e50)
				{
					double sv,ev;
					sv=c[i].first.getangle(p.first);
					ev=c[i].first.getangle(p.second);
					if(sv>ev) swap(sv,ev);
					double mv=(sv+ev)/2;
					point mp=c[i].first.c;
					mp.x+=c[i].first.r*cos(mv);
					mp.y+=c[i].first.r*sin(mv);
					if(mp.x<EPS)
						add_interval(sv,ev);
					else
						add_interval(ev,sv+2*M_PI);
				}
				p=c[i].first.intersect(line(1,0,-W));
				if(p.first.x<1e50)
				{
					double sv,ev;
					sv=c[i].first.getangle(p.first);
					ev=c[i].first.getangle(p.second);
					if(sv>ev) swap(sv,ev);
					double mv=(sv+ev)/2;
					point mp=c[i].first.c;
					mp.x+=c[i].first.r*cos(mv);
					mp.y+=c[i].first.r*sin(mv);
					if(mp.x>W-EPS)
						add_interval(sv,ev);
					else
						add_interval(ev,sv+2*M_PI);
				}
				REP(j,n)
				{
					if(i!=j&&c[j].second)
					{
						p=c[i].first.intersect(c[j].first);
						if(p.first.x<1e50)
						{
							double sv,ev;
							sv=c[i].first.getangle(p.first);
							ev=c[i].first.getangle(p.second);
							if(sv>ev) swap(sv,ev);
							double mv=(sv+ev)/2;
							point mp=c[i].first.c;
							mp.x+=c[i].first.r*cos(mv);
							mp.y+=c[i].first.r*sin(mv);
							if((mp-c[j].first.c).norm()>=c[j].first.r+EPS)
								add_interval(ev,sv+2*M_PI);
							else
								add_interval(sv,ev);
						}
					}
				}
				sort(ev.begin(),ev.end());
				double prev=-M_PI;
				int cnt=0;
				for(int j=0;j<ev.size();j++)
				{
//					fprintf(stderr,"%lf %lf\n",c[i].first.c.x+c[i].first.r*cos(ev[j].first),c[i].first.c.y+c[i].first.r*sin(ev[j].first));
					if(cnt==0)
						res+=c[i].first.r*(ev[j].first-prev);
					cnt+=ev[j].second;
					prev=ev[j].first;
				}
				res+=c[i].first.r*(M_PI-prev);
			}
		}
		printf("%.10lf\n",res);
	}
	return 0;
} 