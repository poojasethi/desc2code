#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<ctype.h>
#include<string.h>
#include<math.h>
#include<string>
#include<deque>
#include<iostream>
#include<set>
#include<map>
#include<vector>
#include<algorithm>
#include<bitset>
#include<stack>
#include<queue>
#include<sstream>

#define MODM 1000000007
#define MAXM 2147483647
#define MAXML 9223372036854775807LL
#define Pi 3.14159265358979323846264338327950288419716939937510582
#define EPS 1e-7

#define ff first
#define ss second
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define mp make_pair
#define L(x) x.length()
#define B(x) x.begin()
#define E(x) x.end()
#define F(x) x.front()
#define SZ(x) x.size()
#define CLR(x) x.clear()
#define SORT(x) sort(x.begin(),x.end())
#define REV(x) reverse(x.begin(),x.end())
#define FOR(i,x,y) for(int i=x;i<y;i++)
#define S(x) scanf("%d",&x)
#define SL(x) scanf("%lld",&x)
#define FILL(x,y) memset(x,y,sizeof(x))
#define IT iterator

using namespace std;
typedef long long int lli;
typedef unsigned long long int llu;
typedef pair<int,int> P;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef vector< P > VP;
typedef vector< VP > VVP;
typedef vector<string> VS;
typedef vector< VS> VVS;
typedef map<int,int> MAP;

lli gcd(lli a,lli b){if(a==0)return(b);else return(gcd(b%a,a));}

lli fastpow(lli a,lli n,lli temp){if(n==0) return(1);if(n==1)return((a*temp)%MODM); if(n&1)temp=(temp*a)%MODM;return(fastpow((a*a)%MODM,n/2,temp));}

int scan()
{
 int t=0,m=1;char c;c=getchar();while((c<'0' || c>'9') and c!='-') c=getchar();if(c=='-')c=getchar(),m=-1;
 while(c>='0' && c<='9') t=(t<<3)+(t<<1)+c-'0',c=getchar();
return(t*m);
}
long double x[5005],y[5005],r[5005];
long double theta,slope,cdist,alpha,beta,angle,prevang,finans,ansang,a,b,c,w,h;
int n;
map<long double,int>point;
map<long double,int>::IT it;

long double sqr(long double a)
{return(a*a);}

long double dist(long double x1,long double x2,long double y1,long double y2)
{
	return(sqr(x1-x2)+sqr(y1-y2));
}
void init()
{
	scanf("%Lf%Lf%d",&w,&h,&n);
	for(int i=0;i<n;i++)
	scanf("%Lf%Lf%Lf",&x[i],&y[i],&r[i]);
}
void linepoints(int i)
{
	long double temp,x1,x2,y1,y2;
	if(sqr(r[i])>sqr(x[i]))
	{
		temp=sqrt(sqr(r[i])-sqr(x[i]));
		y1=y[i]+temp;
		y2=y[i]-temp;
		alpha=atan2l(y1-y[i],-x[i]);
		if(alpha<0) alpha+=2*Pi;
		beta=atan2l(y2-y[i],-x[i]);
		if(beta<0) beta+=2*Pi;
		if(alpha>beta)
		{
			point[0.0]+=1,point[beta]-=1;
			point[alpha]+=1,point[2*Pi]-=1;
		}
		else
		point[alpha]+=1,point[beta]-=1;
	}
	if(sqr(r[i])>sqr(w-x[i]))
	{
		temp=sqrt(sqr(r[i])-sqr(w-x[i]));
		y1=y[i]+temp;
		y2=y[i]-temp;
		beta=atan2l(y1-y[i],w-x[i]);
		alpha=atan2l(y2-y[i],w-x[i]);
		if(alpha<0) alpha+=2*Pi;
		if(beta<0) beta+=2*Pi;
		if(alpha>beta)
		{
			point[0.0]+=1,point[beta]-=1;
			point[alpha]+=1,point[2*Pi]-=1;
		}
		else
		point[alpha]+=1,point[beta]-=1;
	}
	if(sqr(r[i])>sqr(y[i]))
	{
		temp=sqrt(sqr(r[i])-sqr(y[i]));
		x1=x[i]-temp;
		x2=x[i]+temp;
		alpha=atan2l(-y[i],x1-x[i]);
		beta=atan2l(-y[i],x2-x[i]);
		if(alpha<0) alpha+=2*Pi;
		if(beta<0) beta+=2*Pi;
		if(alpha>beta)
		{
			point[0.0]+=1,point[beta]-=1;
			point[alpha]+=1,point[2*Pi]-=1;
		}
		else
		point[alpha]+=1,point[beta]-=1;
	}
	if(sqr(r[i])>sqr(h-y[i]))
	{
		
		temp=sqrt(sqr(r[i])-sqr(h-y[i]));
		x1=x[i]+temp;
		x2=x[i]-temp;
		alpha=atan2l(h-y[i],x1-x[i]);
		beta=atan2l(h-y[i],x2-x[i]);
		if(alpha<0) alpha+=2*Pi;
		if(beta<0) beta+=2*Pi;
		if(alpha>beta)
		{
			point[0.0]+=1,point[beta]-=1;
			point[alpha]+=1,point[2*Pi]-=1;
		}
		else
		point[alpha]+=1,point[beta]-=1;
	}
}
void solve()
{
	finans=0;
	bool inside;
	int temp,val;
	for(int i=0;i<n;i++)
		{	
			//printf("circle %lf %lf\n",x[i],y[i]);
			if(x[i]>w and (r[i]<=(x[i]-w)))
			continue;
			if(y[i]>h and (r[i]<=(y[i]-h)))
			continue;
			 
			inside=false;
			CLR(point);
			for(int j=0;j<n;j++)
			if(i!=j)
			{
				if(sqr(r[j]-r[i])>=dist(x[i],x[j],y[i],y[j]) and r[i]<r[j])
				{inside=true;break;}
			}
			if(inside)
			continue;
			
			for(int j=0;j<n;j++)
			if(i!=j)
			{
				cdist=dist(x[i],x[j],y[i],y[j]);
				if(cdist>=sqr(r[i]+r[j]) or cdist<=sqr(r[i]-r[j]))
				continue;
				a=r[i],b=sqrtl(cdist),c=r[j];
				theta=acos((sqr(a)+sqr(b)-sqr(c))/(2*a*b));
				slope=atan2l(y[j]-y[i],x[j]-x[i]);
				if(slope<0) slope+=2*Pi;
				
				beta=slope+theta;
				if(beta>2*Pi)
				beta-=2*Pi;
				
				alpha=slope-theta;
				if(alpha<0)
				alpha+=2*Pi;
				
				if(alpha>beta)
				{
					point[0.0]+=1,point[beta]-=1;
					point[alpha]+=1,point[2*Pi]-=1;
				}
				else
				{
				point[alpha]+=1;
				point[beta]-=1;
				}
			}
			point[0.0]+=0,point[2*Pi]+=0;
			
			linepoints(i);
			
			ansang=prevang=0,temp=0;
			for(it=B(point);it!=E(point);it++)
			{
				angle=it->ff,val=it->ss;
				//printf("%Lf %d\n",(angle*180)/Pi,val);
				if(temp==0 and angle>0)
				ansang+=(angle-prevang);
				temp+=val;
				prevang=angle;
			}
		finans+=(ansang*r[i]);
	}
		printf("%.7Lf\n",finans);
}
int main()
{
	int t;
	S(t);
	while(t--)
	{
		init();
		solve();
	}
	return(0);
}