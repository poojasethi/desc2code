#include<cstdio>
#include<algorithm>
#include<cassert>
#include<cstring>
#include<iostream>
#include<cstdlib>
#include<cmath>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<bitset>
using namespace std;
typedef long long ll;
typedef long double db;
void gn(int &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
void gn(ll &x){
	int sg=1;char c;while(((c=getchar())<'0'||c>'9')&&c!='-');
	if(c=='-')sg=-1,x=0;else x=c-'0';
	while((c=getchar())>='0'&&c<='9')x=x*10+c-'0';
	x*=sg;
}
const int mo=1000000007;
#define pi (acos(-1.0))
int qp(int a,ll b){int ans=1;do{if(b&1)ans=1ll*ans*a%mo;a=1ll*a*a%mo;}while(b>>=1);return ans;}
int gcd(int a,int b){return b?gcd(b,a%b):a;}

int w,h,n;

struct cir{
	int x,y,r;
}a[1111];

#define sqr(x) (1ll*(x)*(x))
inline ll dissqr(int x1,int y1,int x2,int y2){
	return sqr(x1-x2)+sqr(y1-y2);
}
int operator<=(const cir&a,const cir&b){
	return a.r<=b.r && dissqr(a.x,a.y,b.x,b.y)<=sqr(b.r-a.r);
}
int operator&(const cir&a,const cir&b){
	ll x=dissqr(a.x,a.y,b.x,b.y);
	return x>sqr(b.r-a.r) && x<sqr(b.r+a.r);
}

struct node{
	db th;
	int sg;
}p[5555];int tot;
int cmp(const node&a,const node&b){
	return a.th<b.th;
}
void add(db fr,db to){
	if(fr<to){
		p[++tot]=(node){fr,1};
		p[++tot]=(node){to,-1};
	}else{
		p[++tot]=(node){fr,1};
		p[++tot]=(node){pi,-1};
		p[++tot]=(node){-pi,1};
		p[++tot]=(node){to,-1};
	}
}
db norma(db th){
	while(th>pi)th-=2*pi;
	while(th<-pi)th+=2*pi;
	return th;
}
db doit(int id){
	tot=0;
	if(a[id].x+a[id].r<=0 || a[id].x-a[id].r>=w || a[id].y+a[id].r<=0 || a[id].y-a[id].r>=h)return 0.0;
	for (int j=1;j<=n;j++)if(j!=id){
		if(a[id]<=a[j])return 0.0;
		if(a[j]&a[id]){
			ll dsq=dissqr(a[id].x,a[id].y,a[j].x,a[j].y);
			db d=sqrt(1.0*dsq);
			db costh=(1.0*sqr(a[id].r)+dsq-sqr(a[j].r))/(2*a[id].r*d);
			db th=acos(costh);
			db phi=atan2(1.0*a[j].y-a[id].y,1.0*a[j].x-a[id].x);
			db th1=norma(phi-th),th2=norma(phi+th);
			add(th1,th2);
		}
	}
	if(a[id].x-a[id].r<0){
		db th=acos(1.0*(a[id].x-0)/a[id].r);
		add(norma(pi-th),norma(pi+th));
	}
	if(a[id].x+a[id].r>w){
		db th=acos(1.0*(w-a[id].x)/a[id].r);
		add(norma(-th),norma(th));
	}
	if(a[id].y+a[id].r>h){
		db th=acos(1.0*(h-a[id].y)/a[id].r);
		add(norma(pi/2-th),norma(pi/2+th));
	}
	if(a[id].y-a[id].r<0){
		db th=acos(1.0*(a[id].y-0)/a[id].r);
		add(norma(-pi/2-th),norma(-pi/2+th));
	}
	sort(p+1,p+1+tot,cmp);
	db su=0.0;
	int cur=0;
	db las=-pi;
	for (int i=1;i<=tot;i++){
		if(cur==0)su+=p[i].th-las;
		cur+=p[i].sg;
		las=p[i].th;
	}
	if(cur==0)su+=pi-las;
	return su*a[id].r;
}
int main()
{
	int tes;
	scanf("%d",&tes);
	while(tes--){
		gn(w);gn(h);gn(n);
		w*=100,h*=100;
		for (int i=1;i<=n;i++){
			double x,y,r;
			scanf("%lf%lf%lf",&x,&y,&r);
			a[i].x=(x*100+0.5);
			a[i].y=(y*100+0.5);
			a[i].r=(r*100+0.5);
		}
		db ans=0.0;
		for (int i=1;i<=n;i++)ans+=doit(i);
		ans*=0.01;
		printf("%.8lf\n",double(ans));
	}
	return 0;
}
