#include <bits/stdc++.h>

#define fi first
#define se second
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define MOD 1000000007
#define ll long long int
#define MAXINT 1000000000000LL

using namespace std;

typedef struct xxx {
	int l,lc,r,rc,a;
}node;

node tree[1<<21];
int A[1000006];
int w;

void merge(int n,int nl,int nr) {
	int m=(nl+nr)>>1,left=(n<<1),x;
	tree[n].lc=tree[left].lc;
	tree[n].rc=tree[left+1].rc;
	tree[n].a=tree[left].a+tree[left+1].a;
	if(tree[left].l<(m-nl+1)) 
		tree[n].l=tree[left].l;
	else if(tree[left+1].lc==tree[left].rc)
		tree[n].l=tree[left].l+tree[left+1].l;
	else
		tree[n].l=tree[left].l;
	if(tree[left+1].r<(nr-m))
		tree[n].r=tree[left+1].r;
	else if(tree[left].rc==tree[left+1].lc)
		tree[n].r=tree[left+1].r+tree[left].r;
	else
		tree[n].r=tree[left+1].r;
	if(tree[left].rc==tree[left+1].lc && tree[left].r+tree[left+1].l>=w) {
		x=tree[left].r+tree[left+1].l - w+1;
		x -=max(0,tree[left].r-w+1);
		x -=max(0,tree[left+1].l-w+1);
		tree[n].a+=x;
	}
}


void init(int n,int nl,int nr) {
	if(nl==nr) {
		tree[n].l=tree[n].r=1;
		tree[n].lc=tree[n].rc=A[nl];
		tree[n].a = (w==1);
		return;
	}
	int m=(nl+nr)>>1,left=(n<<1);
	init(left,nl,m);
	init(left+1,m+1,nr);
	merge(n,nl,nr);
}

void update(int n,int nl,int nr,int q,int qc) {
	if(nl==nr) {
		A[nl]=qc;
		tree[n].l=tree[n].r=1;
		tree[n].lc=tree[n].rc=A[nl];
		tree[n].a = (w==1);
		return;
	}
	int m=(nl+nr)>>1,left=(n<<1);
	if(m>=q) 
		update(left,nl,m,q,qc);
	else
		update(left+1,m+1,nr,q,qc);
	merge(n,nl,nr);
}

int query(void) {
	return tree[1].a;
}

void solve(void) {
	int n,i,m,p,c;
	cin>>n>>w;
	for(i=1;i<=n;i++)
		cin>>A[i];
	init(1,1,n);
	cin>>m;
	while(m--) {
		cin>>p>>c;
		update(1,1,n,p,c);
		cout<<query()<<endl;
	}
}


int main () {
	int i,test;
	cin>>test;
	for(i=1;i<=test;i++)
		solve();
	return 0;
}