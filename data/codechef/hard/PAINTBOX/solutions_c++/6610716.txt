#include<iostream>
#include<algorithm>
#include<cstdio>
#include<string.h>
#include<climits>
using namespace std;
#define FOR(i,n) for(i=0;i<n;i++)
#define sint(i) scanf("%d",&i)
#define ss(s) scanf("%s",s)
#define pii pair<int,int>
#define ll long long
#define MAX 1000000000
#define MOD 1000000007
typedef struct st st;
struct st
{
    pii left;
    pii right;
    int ans;
    int len;
};
int w;
st combine(st a,st b)
{
    st c;
    c.ans=a.ans+b.ans;
    c.len=a.len+b.len;
    if(a.right.first!=b.left.first)
    {
        c.right=b.right;
        c.left=a.left;
        return c;
    }
    else
    {
       // cout<<"hey";
        if((a.right.second+b.left.second)>=w)
        {
          //  cout<<"hey2";
             c.ans+= (a.right.second)+(b.left.second)-w+1;
            c.ans -= (a.right.second)>=w ?a.right.second-w+1:0;
            c.ans -= (b.left.second)>=w ?b.left.second-w+1:0;
        }
          if(a.len==a.left.second)
          {
              c.left=a.left;
              c.left.second+=b.left.second;
          }
          else
          {
              c.left=a.left;
          }
          if(b.right.second==b.len)
          {
              c.right=b.left;
              c.right.second+=a.right.second;
          }
          else
          c.right=b.right;
          return c;
    }
}
st makest(st *seg,int *a,int start,int end,int putst)
{
    if(start==end)
    {
        seg[putst].left.first=a[start];
        seg[putst].right.first=a[start];
        seg[putst].left.second=1;
        seg[putst].right.second=1;
        if(w==1)
        seg[putst].ans=1;
        else
        seg[putst].ans=0;
        seg[putst].len=1;
       //cout<<putst<<" "<<seg[putst].ans<<" "<<seg[putst].left.first<<"\n";
        return seg[putst];
    }
    seg[putst]=combine(makest(seg,a,start,(start+end)/2,2*putst),makest(seg,a,(start+end)/2+1,end,2*putst+1));
   // cout<<putst<<" "<<seg[putst].ans<<" "<<seg[putst].right.first<<"\n";
    return seg[putst];
}
st update(st *seg,int start,int end,int pos,int new_value,int putst)
{
    if(pos<start || pos>end)
    {
        return seg[putst];
    }
    else
    {
    if(start!=end)
    {
    seg[putst]=combine(update(seg,start,(start+end)/2,pos,new_value,2*putst),
    update(seg,(start+end)/2+1,end,pos,new_value,2*putst+1));
    }
    else
    {
     seg[putst].left.first=new_value;
     seg[putst].right.first=new_value;
    }
    return seg[putst];
    }
}
int main()
{
    int i;
    int t;
    int n;
    sint(t);
    st *seg;
    while(t--)
    {
        sint(n);
        sint(w);
        seg=(st*)malloc(sizeof(st)*4*n);
        int a[n+1];
        FOR(i,n)
        sint(a[i+1]);
    makest(seg,a,1,n,1);
   // cout<<seg[1].ans;
    int q,pos,col;
    sint(q);
    while(q--)
    {
        sint(pos);
        sint(col);
        update(seg,1,n,pos,col,1);
        cout<<seg[1].ans<<"\n";
    }
    }
    return 0;
}
