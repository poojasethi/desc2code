#include<stdio.h>

int arr[100005];
int countBack(int w,int pos)
{
    int t=1;
    while(arr[pos-1]==arr[pos])
    {
        t++;
        pos--;
        if(pos==1)
            break;
        if(t>=w)
            return w;
    }
    return t;
}

int countFord(int n,int w,int pos)
{
    int t=1;
    while(arr[pos+1]==arr[pos])
    {
        t++;
        pos++;
        if(pos==n)
            break;
        if(t>=w)
            return w;
    }
    return t;
}

int main()
{
    int cases;
    int n,w;
    scanf("%d",&cases);
    while(cases--)
    {
        int q,ways,pos,col;
        scanf("%d %d",&n,&w);
        for(int i=1; i<=n; i++)
            scanf("%d",&arr[i]);
        arr[0]=arr[n+1]=1000000009;
        int t=1;
        ways=0;
        for(int i=2; i<=n+1; i++)
        {
            if(arr[i]==arr[i-1])
                t++;
            else
            {
                if(t >= w)
                    ways=ways + t-w+1;
                t=1;
            }
        }

        scanf("%d",&q);
        while(q--)
        {
            scanf("%d %d",&pos,&col);
            if((arr[pos]!=col)&&(w>1))
            {
                if((arr[pos]==arr[pos-1])&&(arr[pos]==arr[pos+1]))
                {
                    t = countBack(w,pos) + countFord(n,w,pos)-1;
                    if(t>=w)
                        ways = ways-(t-w+1);
                }
                else if(arr[pos]==arr[pos-1])
                {
                    t = countBack(w,pos);
                    if(t>=w)
                        ways--;
                }
                else if(arr[pos]==arr[pos+1])
                {
                    t = countFord(n,w,pos);
                    if(t>=w)
                        ways--;
                }

                arr[pos]=col;
                if((arr[pos]==arr[pos-1])&&(arr[pos]==arr[pos+1]))
                {
                    t = countBack(w,pos) + countFord(n,w,pos)-1;
                    if(t>=w)
                        ways = ways+(t-w+1);
                }
                else if(arr[pos]==arr[pos-1])
                {
                    t = countBack(w,pos);
                    if(t>=w)
                        ways++;
                }
                else if(arr[pos]==arr[pos+1])
                {
                    t = countFord(n,w,pos);
                    if(t>=w)
                        ways++;
                }
            }
            printf("%d\n",ways);
        }
    }
    return 0;
}

