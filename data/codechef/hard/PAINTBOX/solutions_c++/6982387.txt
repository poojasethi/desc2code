#include <bits/stdc++.h>
using namespace std;
#define maxn 100000+3


#define ls (node<<1)
#define rs (node<<1 | 1)
int n, W;
int q, pos;
long long col,arr[maxn];
struct node {
	long long  total ;
	int lcount, rcount;
	long long prefix ;
	long long  suffix;
}s[4*maxn];

long long check() {
	long long pre = arr[0];
	int idx = 0;
	long long cnt = 0;
	long long temp = 0;
	for(int i=1; i<n; i++) {
		if(arr[i] != pre) {
			temp++;
			cnt += (temp-W+1) > 0 ? (temp-W+1) : 0;
			temp = 0;
			pre = arr[i];
			idx = i;
			continue;
		}
		temp++;
	}
	
	if(idx != n) {
		temp++;
		cnt += (temp-W+1) >= 0 ? (temp-W+1) : 0;
	}
	return cnt;
}

void merge(int node, int a, int b) {
	s[node].prefix = s[ls].prefix;
	s[node].suffix = s[rs].suffix;
	s[node].lcount = s[ls].lcount;
	s[node].rcount = s[rs].rcount;
	
	s[node].total = s[ls].total + s[rs].total;
	
	if(s[ls].suffix == s[rs].prefix && s[ls].rcount+s[rs].lcount >= W  ) {
		s[node].total += min ( min(W-1, s[ls].rcount+s[rs].lcount-W+1) , min(s[ls].rcount, s[rs].lcount));
	}
	
	int mid = (a+b)>>1;
	if(s[ls].suffix == s[rs].prefix) {
		if( s[rs].rcount == b - mid ) {
			s[node].rcount += s[ls].rcount;
		}
		if( s[ls].lcount == mid+1 - a ) {
			s[node].lcount += s[rs].lcount;
		}
	}
}
void buildTree(int node, int l, int r) {
	if(l == r) {
		s[node].lcount = 1;
		s[node].rcount = 1;
		s[node].prefix = arr[l];
		s[node].suffix = arr[r];
		if(W == 1) {
			s[node].total = 1;
		} else {
			s[node].total = 0;
		}
		return ;
	}
	
	int mid = l + (r - l)/2;
	buildTree(ls, l, mid);
	buildTree(rs, mid+1, r);
	
	merge(node, l, r);
}

void update(int node, int a, int b, int i ,int j) {
	if( i> b || i < a || a > b) {
		return;
	}
	
	if(a == b) {
		s[node].prefix = j;
		s[node].suffix = j;
		return;
	}
	int mid = (a+b)/2;
	if( i<= mid ) {
		update(ls, a, mid, i, j);
	} else {
		update(rs, mid+1, b, i, j);	
	}
	
	merge(node, a, b);
}
int main() {
	// your code goes here
	int t;
	scanf("%d",&t);
	while(t--) {
		scanf("%d %d",&n, &W);
		for(int i=0; i<n; i++) {
			scanf("%lld",&arr[i]);
		}
		scanf("%d",&q);
		
		buildTree(1, 0, n-1);
		while(q--) {
			scanf("%d %lld",&pos, &col);
			arr[pos-1] = col;
			update(1, 0, n-1, pos-1, col);
			//long long ans = check();
			cout<<s[1].total<<"\n";
		}
		
	}
}