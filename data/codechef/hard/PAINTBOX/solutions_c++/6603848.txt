#include <bits/stdc++.h>

using namespace std;

#define      pii               std::pair<int,int>
#define      vi                std::vector<int>
#define      mp(a,b)           std::make_pair(a,b)
#define      pb(a)             std::push_back(a)
#define      each(it,s)        for(auto it = s.begin(); it != s.end(); ++it)
#define      rep(i, n)         for(int i = 0; i < (n); ++i)
#define      fill(a)           memset(a, 0, sizeof (a))
#define      sortA(v)          sort(v.begin(), v.end())
#define      sortD(v)          sort(v.begin(), v.end(), greater<auto>())
#define      X                 first
#define      Y                 second
#define       auto  set<int>::iterator
typedef long long LL;
LL MOD = 1000000007;
set<int> myset;
int color[100010];
int w;

int getcount(set<int> &myset)
{

    int ans=0,count=0;
    for(auto it=myset.begin(),itt=++myset.begin();itt!=myset.end();it++,itt++)
    {

        ans+=max(0,*itt-*it-w+1);

    }
    return ans;

}

int main()
{
      int t,idx,col;
      cin>>t;
      while(t--)
      {
           int n;
          scanf("%d%d",&n,&w);

          myset.clear();
          myset.insert(0);
          myset.insert(n);


          rep(i,n)
          {

              scanf("%d",color+i);
              if(i>0) if(color[i]!=color[i-1])myset.insert(i);

          }
          int q,ans=getcount(myset);

           //printf("%d\n",ans);
          scanf("%d",&q);

          while(q--)
          {

              scanf("%d %d",&idx,&col);

              idx--;

              auto it=myset.lower_bound(idx);
              if(it!=myset.begin())
              it--;
              set<int> temp;
              int i=4;
              while(i--&&it!=myset.end())
              {
                  temp.insert(*it);
                  ++it;

              }

              ans-=getcount(temp);

                 if(color[idx]==col) 3;
                 else if(idx==0)
                 {
                     if(color[idx+1]==col)myset.erase(idx+1);
                     else
                     myset.insert(idx+1);

                 }
                 else if(idx==n-1)
                 {
                     if(color[idx-1]==col) myset.erase(n-1);
                     else
                     myset.insert(n-1);

                 }
                 else
                 {
                        if(myset.find(idx)!=myset.end())
                        {

                            if(color[idx-1]==col)myset.erase(idx);
                            if(color[idx+1]==col)myset.erase(idx+1);
                            else
                            myset.insert(idx+1);

                        }
                        else
                        {

                            myset.insert(idx);
                            if(col==color[idx+1])myset.erase(idx+1);
                            else
                            myset.insert(idx+1);


                        }




                 }

              set<int> temp1;
              it=myset.lower_bound(idx);
              if(it!=myset.begin())
              it--;
              i=6;
              while(i--&&it!=myset.end())
              {
                  temp1.insert(*it);
                  if(*it==(*(--temp.end())))
                  break;


                  ++it;

              }
              ans+=getcount(temp1);


              printf("%d\n",ans);
              color[idx]=col;
          }




      }



}
