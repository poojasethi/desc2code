#include <set>
#include <map>
#include <list>
#include <stack>
#include <cmath>
#include <queue>
#include <ctime>
#include <cfloat>
#include <vector>
#include <string>
#include <cstdio>
#include <bitset>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <iomanip>
#include <sstream>
#include <utility>
#include <iostream>
#include <algorithm>
  
using namespace std;
  
#define FOR(i, a, b) for(int i = a; i <= b; ++i)
#define RFOR(i, b, a) for(int i = b; i >= a; --i)
#define REP(i, N) for(int i = 0; i < N; ++i)
#define RREP(i, N) for(int i = N-1; i >= 0; --i)
#define FORIT(i, a) for( TI(a) i = a.begin(); i != a.end(); i++ )
#define MAXN 5000603
#define INF 0x3F3F3F3F
#define LINF 0x3F3F3F3FFFFFFFFFLL
#define FILL(X, V) memset( X, V, sizeof(X) )
#define TI(X) __typeof((X).begin())
#define ALL(V) V.begin(), V.end()
#define SIZE(V) int((V).size())
#define pb push_back
#define mp make_pair
  
  
struct tri{
    int atual, custo;
    tri ( int atual = 0, int custo = 0) : atual(atual), custo(custo) { }
};
  
typedef vector < int > vi;
typedef vector < vi > vii;
typedef vector < tri > vtri;
typedef vector < vtri > vvtri;
typedef long long int64;
 
#ifdef _WIN32  
    #define getchar_unlocked getchar 
    #define putchar_unlocked putchar 
#endif 
   
inline void read( int &n ) { 
    n = 0; 
    register bool neg = false; 
    register char c = getchar_unlocked(); 
    if( c == EOF) { n = -1; return; } 
    while (!('0' <= c && c <= '9')) { 
        if( c == '-' ) neg = true; 
        c = getchar_unlocked(); 
    } 
    while ('0' <= c && c <= '9') { 
        n = n * 10 + c - '0'; 
        c = getchar_unlocked(); 
    } 
    n = (neg ? (-n) : (n)); 
} 
   
inline void writeInt(int64 n){ 
    register int idx = 20; 
    if( n < 0 ) putchar_unlocked('-'); 
    n = abs(n); 
    char out[21]; 
    out[20] = ' '; 
    do{ 
        idx--; 
        out[idx] = n % 10 + '0'; 
        n/= 10; 
    }while(n); 
    do{ putchar_unlocked(out[idx++]); } while (out[idx] != ' '); 
}
 
int n;
 
int vet[100000];
 
int main(){
    ios::sync_with_stdio(false);
    int t, n, w, q, idx, val;
    read(t);
    while( t-- ){
      read(n); read(w);
      int64 ans = 0;
      for( int i = 0; i < n; i++ ) read(vet[i]);
      int qt = 0;
      vet[n] = -1;
      for( int i = 0; i < n; i++ ){
        qt++;
        if( vet[i] != vet[i+1] ){
          ans += max(0,(qt-w)+1);
          qt = 0;
        }
      }
      read(q);
      for( int j = 0; j < q; j++ ){
        read(idx); idx--;
        read(val);
        if( vet[idx] == val ){ writeInt(ans); putchar_unlocked('\n'); continue; }
        int lo = 0, hi = 0;
        for( int i = idx+1; i < n && vet[i] == vet[idx]; i++ ) hi++;
        for( int i = idx-1; i >= 0 && vet[i] == vet[idx]; i-- ) lo++;
        ans -= max(0,((lo+hi+1)-w)+1);
        ans += max(0,(lo-w)+1);
        ans += max(0,(hi-w)+1);
         lo = hi = 0;
        vet[idx] = val;
        for( int i = idx+1; i < n && vet[i] == vet[idx]; i++ ) hi++;
        for( int i = idx-1; i >= 0 && vet[i] == vet[idx]; i-- ) lo++;
        if( lo && hi ){
          ans -= max(0,(lo-w)+1);
          ans -= max(0,(hi-w)+1);
          ans +=  max(0,((lo+hi+1)-w)+1);
        }
        else if( lo ){
          ans -= max(0,(lo-w)+1);
          ans += max(0,(lo+1-w)+1);
        }
        else if( hi ){
          ans -= max(0,(hi-w)+1);
          ans += max(0,(hi+1-w)+1);
        }
        else ans += max(0,(1-w)+1);
        writeInt(ans);
        putchar_unlocked('\n');
      }
    }
    return 0;
}   