#include<bits/stdc++.h>
#define md 1000000007
#define ll  int
#define gc getchar//_unlocked
using namespace std;
ll a[100010];
ll parent[100010];
ll size[100010];
inline  ll inp(){
    ll n=0,sign=1;
	char c;
	c=gc();
	while(c<'0' || c>'9'){
		if(c=='-')	sign=-sign;
		c=gc();
	}
	while(c>='0' && c<='9'){
		n=(n<<3)+(n<<1)+c-'0';
		c=gc();
	}
	n=n*sign;
	return n;
}
inline ll getparent(ll i){
	while(parent[i]!=i)
		i=parent[i];
	return i;
}
int main(){
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin); 
    #endif
	ll t,n,q,w;
	t=inp();
	ll ans=0;
	while(t--){
		n=inp();
		w=inp();
		ans=0;
		for(ll i=1;i<=n;i++)
		{	a[i]=inp();size[i]=1;parent[i]=i;}
		a[0]=a[n+1]=-10;
		for(ll i=1;i<=n;i++)
		{
			if(a[i]==a[i+1])
			{
				parent[i]=i+1;
				size[i+1]=size[i]+1;
			}
			else{
				parent[i]=i;
				size[i]=size[i];
			}
		}
		ll t=0;
		while(t<n){
			t=getparent(t+1);
			if(size[t]>=w){
				ans+=size[t]-w+1;
			}
		}
		
		q=inp();
		for(ll i=0;i<q;i++){
			ll pos,col;
			pos=inp();
			col=inp();
			if(col!=a[pos]){
			if(a[pos]==a[pos-1] && a[pos]==a[pos+1]){
				ll pp=getparent(pos);
				ll ss=size[pp];
				if(ss>=w)
					ans-=(ss-w+1);
				size[pp]=pp-pos;
				if(size[pp]>=w)
					ans+=size[pp]-w+1;
				parent[pos-1]=pos-1;
				size[pos-1]=ss-(pp-pos)-1;
				if(size[pos-1]>=w)
					ans+=size[pos-1]-w+1;
				parent[pos]=pos;
				size[pos]=1;
				if(size[pos]>=w)
					ans+=size[pos]-w+1;
			}
			else if(a[pos]==a[pos-1]){
				if(size[pos]>=w)
					ans-=(size[pos]-w+1);
				parent[pos-1]=pos-1;
				size[pos-1]=size[pos]-1;
				if(size[pos-1]>=w)
					ans+=size[pos-1]-w+1;
				parent[pos]=pos;
				size[pos]=1;
				if(size[pos]>=w)
					ans+=size[pos]-w+1;
			}
			else if(a[pos]==a[pos+1]){
				ll pp=getparent(pos);
				ll ss=size[pp];
				if(ss>=w)
					ans-=(ss-w+1);
				size[pp]=ss-1;
				parent[pos]=pos;
				if(size[pp]>=w)
					ans+=size[pp]-w+1;
				size[pos]=1;
				if(size[pos]>=w)
					ans+=size[pos]-w+1;
			}
			
			
			a[pos]=col;
			
			if(a[pos]==a[pos-1] && a[pos]==a[pos+1]){
				ll pp=getparent(pos+1);
				ll ss=size[pp];
				if(ss>=w)
					ans-=(ss-w+1);
				if(size[pos-1]>=w)
					ans-=(size[pos-1]-w+1);
				if(size[pos]>=w)
					ans-=(size[pos]-w+1);
				size[pp]+=size[pos-1]+1;
				parent[pos]=pos+1;parent[pos-1]=pos;
				if(size[pp]>=w)
					ans+=size[pp]-w+1;
				
			}
			else if(a[pos]==a[pos-1]){
				if(size[pos-1]>=w)
					ans-=(size[pos-1]-w+1);
				if(size[pos]>=w)
					ans-=(size[pos]-w+1);
				size[pos]=size[pos-1]+1;
				parent[pos]=pos;parent[pos-1]=pos;
				if(size[pos]>=w)
					ans+=size[pos]-w+1;
			}
			else if(a[pos]==a[pos+1]){
				ll pp=getparent(pos+1);
				if(size[pp]>=w)
					ans-=(size[pp]-w+1);
				if(size[pos]>=w)
					ans-=(size[pos]-w+1);
				size[pp]+=1;
				parent[pos]=pos+1;
				if(size[pp]>=w)
					ans+=size[pp]-w+1;
			}
			}
			
			
			printf("%d\n",ans);
			
		}
		
	}
	
	return 0;
}