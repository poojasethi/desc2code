#include<bits/stdc++.h>

using namespace std;

int w,a[100007];
struct box
{
    int tot;
    int l,r,lval,rval;
}tree[500007];

int calc(int x,int y,int xval,int yval)
{
    if(x+y<w)
        return 0;
    if(xval!=yval)
        return 0;
    if(x>=w)
        return(min(y,w-1));
    else
    {
        return (min(x,x+y-w+1));
    }
}
void construct(int beg,int last,int i)
{
    int mid,x,y,xval,yval,var;
    mid=(beg+last)/2;
    if(beg==last)
    {
        tree[i].lval=tree[i].rval=a[beg];
        tree[i].l=tree[i].r=1;
        if(w==1)
        tree[i].tot=1;
        else tree[i].tot=0;
        return ;
    }
    construct(beg,mid,2*i+1);
    construct(mid+1,last,2*i+2);
    x=tree[2*i+1].r;xval=tree[2*i+1].rval;
    y=tree[2*i+2].l;yval=tree[2*i+2].lval;
    var=calc(x,y,xval,yval);
    tree[i].tot=tree[2*i+1].tot+tree[2*i+2].tot+var;
    tree[i].lval=tree[2*i+1].lval;
    tree[i].rval=tree[2*i+2].rval;
    tree[i].l=tree[2*i+1].l;
    if(x==mid-beg+1 && xval==yval)
    {
        tree[i].l+=(y);
    }
    tree[i].r=tree[2*i+2].r;
    if(y==last-mid && xval==yval)
    {
        tree[i].r+=(x);
    }
}

void update(int beg,int last,int i,int x1,int y1)
{
    int mid,var,x,y,xval,yval;
    if(beg>x1 || last<x1)
        return ;
    mid=(beg+last)/2;
    if(beg==last)
    {
        tree[i].lval=tree[i].rval=y1;
        tree[i].l=tree[i].r=1;
        if(w==1)
        tree[i].tot=1;
        else tree[i].tot=0;
        return ;
    }
    update(beg,mid,2*i+1,x1,y1);
    update(mid+1,last,2*i+2,x1,y1);
    x=tree[2*i+1].r;xval=tree[2*i+1].rval;
    y=tree[2*i+2].l;yval=tree[2*i+2].lval;
    var=calc(x,y,xval,yval);
    tree[i].tot=tree[2*i+1].tot+tree[2*i+2].tot+var;
    tree[i].lval=tree[2*i+1].lval;
    tree[i].rval=tree[2*i+2].rval;
    tree[i].l=tree[2*i+1].l;
    if(x==mid-beg+1 && xval==yval)
    {
        tree[i].l+=(y);
    }
    tree[i].r=tree[2*i+2].r;
    if(y==last-mid && xval==yval)
    {
        tree[i].r+=(x);
    }
}
int main()
{
    int t,n,i,q,x,y;
    cin>>t;
    while(t--)
    {
        cin>>n>>w;
        for(i=0;i<n;i++)
            cin>>a[i];
        construct(0,n-1,0);
        cin>>q;
        while(q--)
        {
            cin>>x>>y;
            x--;
            update(0,n-1,0,x,y);
            cout<<tree[0].tot<<"\n";
        }
    }
    return 0;
}
