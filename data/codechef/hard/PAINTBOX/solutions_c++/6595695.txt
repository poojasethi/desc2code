#include<bits/stdc++.h>
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define p(n) printf("%d\n",n)
#define mod 1000000007LL
#define ll long long
#define pb push_back
#define mp make_pair
#define N 200011
#define LN 21
using namespace std;
int ar[N];
int dis[N];
int L;
int lar[N],rar[N];
int tr[2*N],tt[2*N];
void build(int id,int l,int r)
{
 if(l==r)
 tr[id]=lar[l];
 else
 {
  int mid=(l+r)/2;
  build(2*id+1,l,mid);
  build(2*id+2,mid+1,r);
  tr[id]=tr[2*id+1]+tr[2*id+2];
 }
}
void build2(int id,int l,int r)
{
 if(l==r)
 tt[id]=rar[l];
 else
 {
  int mid=(l+r)/2;
  build2(2*id+1,l,mid);
  build2(2*id+2,mid+1,r);
  tt[id]=tt[2*id+1]+tt[2*id+2];
 }
}
void update(int id,int l,int r,int ql,int qr,int va)
{
 if(ql>qr)
 return;
 else if(qr<l||ql>r||l>r)
 return ;
 else if(l==r)
 tr[id]=tr[id]+(r-l+1)*va;
 else
 {
  int mid=(l+r)/2;
  update(2*id+1,l,mid,ql,qr,va);
  update(2*id+2,mid+1,r,ql,qr,va);
  tr[id]=tr[2*id+1]+tr[2*id+2];
 }
}

void update1(int id,int l,int r,int ql,int qr,int va)
{
 if(ql>qr)
 return;
 else if(qr<l||ql>r||l>r)
 return ;
 else if(l==r)
 tt[id]=tt[id]+(r-l+1)*va;
 else
 {
  int mid=(l+r)/2;
  update1(2*id+1,l,mid,ql,qr,va);
  update1(2*id+2,mid+1,r,ql,qr,va);
  tt[id]=tt[2*id+1]+tt[2*id+2];
 }
}

void update2(int id,int l,int r,int qq,int va)
{

 if(qq<l||qq>r||l>r)
 return ;
 else if(l==r)
 tr[id]=va;
 else
 {
  int mid=(l+r)/2;
  update2(2*id+1,l,mid,qq,va);
  update2(2*id+2,mid+1,r,qq,va);
  tr[id]=tr[2*id+1]+tr[2*id+2];
 }
}

void update3(int id,int l,int r,int qq,int va)
{

 if(qq<l||qq>r||l>r)
 return ;
 else if(l==r)
 tt[id]=va;
 else
 {
  int mid=(l+r)/2;
  update3(2*id+1,l,mid,qq,va);
  update3(2*id+2,mid+1,r,qq,va);
  tt[id]=tt[2*id+1]+tt[2*id+2];
 }
}

int query(int id,int l,int r,int qq)
{
 if(qq<l||qq>r||l>r)
 return 0;
 else if(l==r)
 return tr[id];
 else
 {
  int mid=(l+r)/2;
  return query(2*id+1,l,mid,qq)+query(2*id+2,mid+1,r,qq);
 }
}

int query2(int id,int l,int r,int qq)
{
 if(qq<l||qq>r||l>r)
 return 0;
 else if(l==r)
 return tt[id];
 else
 {
  int mid=(l+r)/2;
  return query2(2*id+1,l,mid,qq)+query2(2*id+2,mid+1,r,qq);
 }
}
int main()
{
    int t,i,j,n,w,q;
    cin>>t;
    while(t--)
    {
     s(n);s(w);
     int ans=0;
     for(i=0;i<n;++i)
     s(ar[i]);
     lar[0]=0;
     for(i=1;i<n;++i)
     {
      if(ar[i]==ar[i-1])
      lar[i]=lar[i-1]+1;
      else
      lar[i]=0;
     }
     build(0,0,n-1);
     rar[n-1]=0;
     for(i=n-2;i>=0;--i)
     {
      if(ar[i]==ar[i+1])
      rar[i]=rar[i+1]+1;
      else
      rar[i]=0;
     }
     build2(0,0,n-1);
     int len=1;
     for(i=1;i<n;++i)
     {
      if(ar[i]==ar[i-1])
      len++;
      else
      {
       if(len>=w)
       ans+=(len-w+1);
       len=1;
      }
     }
     if(len>=w)
     ans+=(len-w+1);
     //cout<<ans<<endl;
     s(q);
     while(q--)
     {
      int id,co;
      s(id);s(co);
      if((w==1)||(n==1))
      {
       printf("%d\n",n);
       continue;
      }
      id--;
      if(ar[id]==co)
      {
       printf("%d\n",ans);
       continue;
      }
      if(id==0)
      {
       ar[id]=co;
       if(ar[id]==ar[id+1])
       {
         int v=query2(0,0,n-1,id+1);
         update3(0,0,n-1,id,v+1);            ///rar[id]=rar[id+1]+1;
         int v1=query2(0,0,n-1,id);
         if(v1>=w-1)
         ans++;
         update(0,0,n-1,id+1,id+v1,1);
       }
       else
       {
        int v1=query2(0,0,n-1,id);
        if(v1>=w-1)
         ans--;
         update(0,0,n-1,id+1,id+v1,-1);
         update3(0,0,n-1,id,0);
       }
      }
      else if(id==n-1)
      {
        ar[id]=co;
        if(ar[id]==ar[id-1])
        {
         int v=query(0,0,n-1,id-1);
         update2(0,0,n-1,id,v+1);
         int v1=query(0,0,n-1,id);
         if(v1>=w-1)
         ans++;
         update1(0,0,n-1,id-v1,id-1,1);
        }
        else
        {
         int v1=query(0,0,n-1,id);
         if(v1>=w-1)
         ans--;
         update1(0,0,n-1,id-v1,id-1,-1);
         update2(0,0,n-1,id,0);
        }
      }
      else
      {
        ar[id]=co;
         if(ar[id]==ar[id-1] && ar[id]==ar[id+1])
         {
            int v=query(0,0,n-1,id);
            int v1=query2(0,0,n-1,id);


           int v3=query2(0,0,n-1,id+1);
           update3(0,0,n-1,id,v3+1);


           int v4=query(0,0,n-1,id-1);
           update2(0,0,n-1,id,v4+1);
           update(0,0,n-1,id+1,id+v3+1,1+v4+1);
           update1(0,0,n-1,id-v4-1,id-1,1+v3+1);
           int co=v3+1+v4+1+1;
           if(co>=w)
           ans+=(co-w+1);
           if(v3+1>=w)
           ans-=(v3+1-w+1);
           if(v4+1>=w)
           ans-=(v4+1-w+1);
         }
         else if(ar[id]==ar[id-1])
         {
           int v1=query2(0,0,n-1,id);
           if(v1>=w-1)
           ans--;
           update3(0,0,n-1,id,0);
           update(0,0,n-1,id+1,id+v1,-1);
           int v4=query(0,0,n-1,id-1);
           update2(0,0,n-1,id,v4+1);
           update1(0,0,n-1,id-v4-1,id-1,1);

           if(v4+1>=w-1)
           ans++;
         }
         else if(ar[id]==ar[id+1])
         {
           int v1=query(0,0,n-1,id);
           if(v1>=w-1)
           ans--;
           update2(0,0,n-1,id,0);
           update1(0,0,n-1,id-v1,id-1,-1);
           int v3=query2(0,0,n-1,id+1);
           update3(0,0,n-1,id,v3+1);
           update(0,0,n-1,id+1,id+v3+1,1);

           if(v3+1>=w-1)
           ans++;
         }
         else
         {

           int v=query(0,0,n-1,id);
            int v1=query2(0,0,n-1,id);

           int co=v+v1+1;
           if(co>=w)
           ans-=(co-w+1);
           if(v>=w)
           ans+=(v-w+1);
           if(v1>=w)
           ans+=(v1-w+1);

           update2(0,0,n-1,id,0);
           update3(0,0,n-1,id,0);
           update1(0,0,n-1,id-v,id-1,-1-v1);
           update(0,0,n-1,id+1,id+v1,-1-v);
         }
      }
      /*for(i=0;i<n;++i)
         cout<<query(0,0,n-1,i)<<" ";
         cout<<endl;

         for(i=0;i<n;++i)
         cout<<query2(0,0,n-1,i)<<" ";
         cout<<endl;*/
      printf("%d\n",ans);
     }
    }
    return 0;
}
