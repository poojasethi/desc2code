#include<stdio.h>
template <int size>
void mul(int dest[size][size], const int op1[size][size], const int op2[size][size], int n)
{
	static long long tmp[size][size];
	for(int i=0; i<n; i++)
		for(int j=0; j<n; j++)
		{
            tmp[i][j]=0;
            for(int k=0; k<n; k++)
                tmp[i][j]+=((long long)op1[i][k]*op2[k][j])%1000000007;
        }
	for(int i=0; i<n; i++)
	for(int j=0; j<n; j++)
		dest[i][j]=tmp[i][j]%1000000007;
}
template <int size>
void pow(int dest[size][size], const int base[size][size], unsigned long long exp, int n)
{
	static int tmp[size][size], sq[size][size];
	for(int i=0; i<n; i++)
		for(int j=0; j<n; j++)
		{
            sq[i][j]=base[i][j];
            tmp[i][j]= i==j ? 1 : 0;
        }
        while(exp)
		{
            if(exp&1)
            	mul(tmp, tmp, sq, n);
            exp>>=1;
            if(exp)
                mul(sq, sq, sq, n);
        }
        for(int i=0; i<n; i++)
        	for(int j=0; j<n; j++)
        		dest[i][j]=tmp[i][j];
}
int mat[22][22], res[22][22];
int solve(int d, int k)
{
 if(k==0)
		return 1;
	if(d==0 || k%3)
		return 0;
	int states[22][2];
	int scnt=0;
	for(int i=0; i<=d; i++)
		for(int j=i; j<=i+d; j++)
		{
            if(!((i+j)%3))
			{
                states[scnt][0]=i;
                states[scnt][1]=j;
                scnt++;
            }
        }
    for(int i=0; i<scnt; i++)
    	for(int j=0; j<scnt; j++)
		{
            int ways=0;
            for(int t=0; t<27; t++)
			{
                int a=states[i][0], b=states[i][1];
                int good=1;
                for(int m=0, tt=t; m<3; m++, tt/=3)
				{
                    switch(tt%3)
					{
                        case 0:b++;
                               if(b-a>d)
                                    good=0;
                            	break;
                        case 1:a++;
                               if(a>d || a>b)
                                    good=0;
                                break;
                        case 2:a--;
                               b--;
                               if(a<0)
                                    good=0;
                    }
                }
                if(good && a==states[j][0] && b==states[j][1])
                	ways++;
            }
            mat[i][j]=ways;
        }
    pow(res, mat, k/3, scnt);
    return res[0][0];
}
int main()
{
	int d,k;
	scanf("%d %d",&d,&k);
	printf("%d\n",solve(d,k));
	return 0;
}