#include <iostream>
using namespace std;

typedef long long ll;

const int Maxd = 8, Maxn = 30, num = 1000000007;

struct Matrix {
       int m[Maxd*Maxd][Maxd*Maxd];
};

int d, k, res;
Matrix st;

Matrix MultM(const Matrix &a, const Matrix &b)
{
       Matrix c;
       for (int i = 0; i < d*d; i++)
          for (int j = 0; j < d*d; j++) {
              c.m[i][j] = 0;
              for (int l = 0; l < d*d; l++) {
                  c.m[i][j] += ll(a.m[i][l]) * ll(b.m[l][j]) % num;
                  c.m[i][j] %= num;
              }
          }
       return c;
}

void Matrix_exp()
{
     int end, pow2[Maxn];
     Matrix tmp[Maxn], ans;
     for (int i = 0; i < d*d; i++)
        for (int j = 0; j < d*d; j++)
           ans.m[i][j] = i == j;
     pow2[0] = 1; tmp[0] = st;
     for (end = 1; end < Maxn && 2*pow2[end-1] <= k; end++) {
         pow2[end] = 2 * pow2[end-1];
         tmp[end] = MultM(tmp[end-1], tmp[end-1]);
     }
     while (--end >= 0)
        if (pow2[end] <= k) {
                      ans = MultM(ans, tmp[end]);
                      k -= pow2[end];
        }
     res = ans.m[0][0];
}

int main()
{
    cin >> d >> k;
    if (d == 0 || k % 3) {
          if (k % 3) cout << "0\n";
          else if (d == 0 && k == 0) cout << "1\n";
               else cout << "0\n"; 
          return 0;
    }
    d++;
    for (int i = 0; i < d; i++)
       for (int j = 0; j < d; j++) {
           if (i) st.m[i*d+j][(i-1)*d+j] = 1;
           if (i+1 < d && j) st.m[i*d+j][(i+1)*d+j-1] = 1;
           if (j+1 < d) st.m[i*d+j][i*d+j+1] = 1;
       }
    Matrix_exp();
    cout << res << endl;
    return 0;
}
