#include<bits/stdc++.h>
using namespace std;
#define no 31623
#define getchar_unlocked getchar
#define ll long long int
#define mb make_pair
#define pb push_back
#define F first
#define S second
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pdd pair<double,double>
#define tr(it,x) for(auto it=x.begin(); it!=x.end(); it++)
#define rep(i,n) for(int i=0;i<n;i++)
#define repp(i,a,b) for(int i=a;i<=b;i++)
#define ref(i,n) for(int i=n;i>1;i--)
#define reff(i,a,b) for(int i=a;i>=b;i--)
#define M 1000000007
#define MAX 10005 
#define fastScan ios_base::sync_with_stdio(0); cin.tie(NULL);
#define sc(x) scanf("%d",&x)
#define scc(x1,x2) scanf("%d%d",&x1,&x2)
#define sccc(x1,x2,x3) scanf("%d%d%d",&x1,&x2,&x3)
#define scl(x) scanf("%lld",&x)
#define sccl(x1,x2) scanf("%lld%lld",&x1,&x2)
#define scccl(x1,x2,x3) scanf("%lld%lld%lld",&x1,&x2,&x3)
#define pr(x) printf("%f\n",x)
#define prl(x) printf("%lld\n",x)
#define prrl(x1,x2) printf("%lld %lld\n",x1,x2)
#define fill(a,x) memset(a,x,sizeof(a))
#define all(x) x.begin(), x.end()
ll gcd(ll a, ll b) { return (b == 0 ? a : gcd(b, a % b)); }
ll lcm(int a, int b) { return (a * (b / gcd(a, b))); }
ll max(ll a,ll b,ll c){return max(a,max(b,c));}
ll power(ll x,ll y)
{
    ll ans=1;
    while(y>0){
        if(y&1)
            ans=(ans*x)%M;
        x=(x*x)%M;
        y/=2;
    }
    return ans;
}
inline int read()
{
	int ret = 0,temp=1;
	int c = getchar_unlocked();
	while(c<'0' || c>'9'){
		c = getchar_unlocked();
	}
	while(c>='0' && c<='9')
	{
		ret = (ret<<3) + (ret<<1) + c - '0';
		c = getchar_unlocked();
	}
        return ret;
}
vector<int>a;
int n;
int lis(int l,int r)
{
	vector<int>v;
	repp(i,l,r)
	{
		int pos=lower_bound(all(v),a[i])-v.begin();
		if(v.size()==pos)
		v.pb(a[i]);
		else
		v[pos]=a[i];
	}
	return v.size();
}
int main()
{
	int t,c;
	scl(t);
	while(t--)
	{
		sc(n);
		rep(i,n)
		{
			sc(c);
			a.pb(c);
		}
		rep(i,n)
		{
			a.pb(a[i]);
		}
		int maxi=0;
       rep(i,n)
       {
       	  maxi=max(maxi,lis(i,i+n));
	   }
	   cout<<maxi<<endl;
	   a.clear();
	}
}
	
