#pragma comment(linker, "/stack:64000000")
#define _CRT_SECURE_NO_DEPRECATE
#define _USE_MATH_DEFINES

#include <algorithm>
#include <iostream>
#include <fstream>
#include <cassert>
#include <iomanip>
#include <utility>
#include <cstring>
#include <complex>
#include <cstdlib>
#include <bitset>
#include <cstdio>
#include <vector>
#include <string>
#include <queue>
#include <cmath>
#include <ctime>
#include <list>
#include <set>
#include <map>

using namespace std;

#define forn(i, n) for (int i = 0; i < int(n); i++)
#define for1(i, n) for (int i = 1; i <= int(n); i++)
#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))
#define debug(x) cerr << #x << " = " << x << endl;
#define all(a) (a).begin(), (a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define sz(a) int((a).size())
#define pb(a) push_back(a)
#define mp(a, b) make_pair((a), (b))
#define X first
#define Y second
#define ft first
#define sc second

template<typename X> inline X abs(const X& a) { return a < 0? -a: a; }
template<typename X> inline X sqr(const X& a) { return a * a; }

typedef long double ld;
typedef pair<ld, ld> ptd;
typedef pair <int, int> pt;
typedef long long li;
typedef unsigned char byte;

const ld PI = 3.1415926535897932384626433832795;
const ld EPS = 1e-9;
const int INF = 1000 * 1000 * 1000;

const int N = 60 + 3;
const int S = 1200 + 3;

int n, k;
int spref[N][N * S], ssuf[N][N * S];
char cpref[N][N * S], csuf[N][N * S], C = 0;
int a[N];

void precalc ()
{
	C++;
	cpref[0][0] = csuf[0][0] = C;
	spref[0][0] = ssuf[0][0] = 1;
	
	int maxs = 0;
	forn(i, n)
	{
		forn(j, maxs + 1)
			if (cpref[i][j] == C)
			{
				if (cpref[i + 1][j] != C)
				{
					cpref[i + 1][j] = C;
					spref[i + 1][j] = 0;
				}

				if (cpref[i + 1][j + a[i]] != C)
				{
					cpref[i + 1][j + a[i]] = C;
					spref[i + 1][j + a[i]] = 0;
				}
				
				spref[i + 1][j + a[i]] = (spref[i + 1][j + a[i]] | (spref[i][j] << 1)) & ((1 << 31) - 1);
				spref[i + 1][j] |= spref[i][j];
			}
			
		maxs += a[i];
	}
	
	maxs = 0;
	forn(i, n)
	{
		forn(j, maxs + 1)
			if (csuf[i][j] == C)
			{
				if (csuf[i + 1][j] != C)
				{
					csuf[i + 1][j] = C;
					ssuf[i + 1][j] = 0;
				}

				if (csuf[i + 1][j + a[n - 1 - i]] != C)
				{
					csuf[i + 1][j + a[n - 1 - i]] = C;
					ssuf[i + 1][j + a[n - 1 - i]] = 0;
				}
				
				ssuf[i + 1][j + a[n - 1 - i]] = (ssuf[i + 1][j + a[n - 1 - i]] | (ssuf[i][j] << 1)) & ((1 << 31) - 1);
				ssuf[i + 1][j] |= ssuf[i][j];
			}
			
		maxs += a[n - 1 - i];
	}
}

ld calc (int idxMed, int mustLf, int mustRg)
{
	int needS = a[idxMed] * k;
	int bestS = INF;
	
	int cntPref = idxMed, cntSuf = n - 1 - idxMed;
	int maxsPref = 1, maxsSuf = 1;
	forn(i, cntPref)
		maxsPref += a[i];
	forn(i, cntSuf)
		maxsSuf += a[n - 1 - i];
		
	int curPref = 0, curSuf = maxsSuf;
	
	while (curPref <= maxsPref)
	{
		if (cpref[cntPref][curPref] != C || (spref[cntPref][curPref] & (1 << mustLf)) == 0)
		{
			curPref++;
			continue;
		}
	
		while (curSuf >= 0)
		{
			if (csuf[cntSuf][curSuf] == C && (ssuf[cntSuf][curSuf] & (1 << mustRg)) != 0)
			{
				int nowS = a[idxMed] + curPref + curSuf;
				if (abs(needS - bestS) > abs(needS - nowS))
					bestS = nowS;
					
				if (nowS <= needS)
					break;
			}
			
			curSuf--;
		}

		curPref++;
	}
	
	assert(bestS != INF);
	
	return abs(ld(a[idxMed]) - ld(bestS) / ld(k));
}

int main()
{
	//freopen("input.txt", "rt", stdin);
	//freopen("output.txt", "wt", stdout);
	
	int testCount;
	cin >> testCount;
	
	forn(test, testCount)
	{
		scanf("%d%d", &n, &k);
		forn(i, n)
			scanf("%d", &a[i]);
		sort(a, a + n);
			
		precalc();
		
		ld ans = 1e18;
		int mustLf = (k + 1) / 2 - 1, mustRg = k - (mustLf + 1);
		assert(mustLf >= 0 && mustRg >= 0);
		
		forn(idxMed, n)
			if (idxMed >= mustLf && n - 1 - idxMed >= mustRg)
				ans = min(ans, calc(idxMed, mustLf, mustRg));
			
		printf("%.3lf\n", double(ans));
	}

	return 0;
}























































