#include <cstdio>
#include <algorithm>
#include <iostream>

using namespace std;

typedef int arr[40000];

int a[61];
int b[61];
arr ad1[61];
arr ad2[61];
int alen1[61];
int alen2[61];
bool can[61][100000];

    static void go(int * a, int n, int k, arr * ret, int * len) {
		int m = 0;
		for (int i = 0; i < n; i++) {
			m = max(m, a[i]);
		}
		int all = m * k;
        for (int i = 0; i <= k; i++) {
            for (int j = 0; j <= all; j++) {
                can[i][j] = false;
            }
        }
		can[0][0] = true;
        len[0] = 1;
        ret[0][0] = 0;
		for (int i = 0; i < n; i++) {
			for (int j = min(i, k - 1); j >= 0; j--) {
				for (int e = m * j; e >= 0; e--) {
					if (e + a[i] <= m * (j + 1) && can[j][e]) {
						can[j + 1][e + a[i]] = true;
					}
				}
			}
            len[i + 1] = 0;
            for (int j = 0; j <= m * k; j++) {
                if (can[k][j]) {
                    ret[i + 1][len[i + 1]++] = j;
                }
            }
		}
	}

    static double solve(int n, int k) {
        sort(a, a + n);
        for (int i = 0; i < n; i++) {
            b[n - i - 1] = a[i];
        }
  		int first = (k - 1) >> 1;
		int second = (k >> 1);
        go(a, n - second + 1, first, ad1, alen1);
        go(b, n - first + 1, second, ad2, alen2);
		double ret = 1e20;
		for (int i = 0; i < n; i++) {
			if (first > i) {
				continue;
			}
			if (n - i - 1 < second) {
				continue;
			}
            int len1 = alen1[i];
            int * d1 = ad1[i];
            int len2 = alen2[n - i - 1];
            int * d2 = ad2[n - i - 1];
			int sum = a[i] * (k - 1);
			for (int j = 0, e = len2 - 1; j < len1; j++) {
				while (e >= 0 && d1[j] + d2[e] > sum) {
					ret = min(ret, 1. * abs(d1[j] + d2[e] - sum) / k);
					e--;
				}
				if (e >= 0) {
					ret = min(ret, 1. * abs(d1[j] + d2[e] - sum) / k);
				}
			}
		}
		return ret;
	}

    void solve() {
        int t;
        scanf("%d", &t);
		for (int i = 0; i < t; i++) {
			int n, k;
            scanf("%d%d", &n, &k);
			for (int j = 0; j < n; j++) {
				scanf("%d", a + j);
			}
			printf("%.3f\n", solve(n, k));
		}
	}

	


    int main() {
        solve();
    }