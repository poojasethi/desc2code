#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <string.h>
#include <stdlib.h>
#include <iterator>
#include <sstream>
#include <numeric>
#include <fstream>
#include <numeric>
#include <vector>
#include <cctype>
#include <math.h>
#include <deque>
#include <queue>
#include <stack>
#include <iomanip>
#include <set>
#include <map>
using namespace std;

#define FRE(i,a,b)  for(i = a; i <= b; i++)
#define FRL(i,a,b)  for(i = a; i < b; i++)
#define mem(t, v)   memset ((t) , v, sizeof(t))
#define sqr(x)      (x)*(x)
#define all(x)      x.begin(),x.end()
#define un(x)       x.erase(unique(all(x)), x.end())
#define sf(n)       scanf("%d", &n)
#define sff(a,b)    scanf("%d %d", &a, &b)
#define sfff(a,b,c) scanf("%d %d %d", &a, &b, &c)
#define D(x)        cout<<#x " = "<<(x)<<endl
#define pf          printf
#define VI          vector <int>
#define pii         pair <int, int>
#define pll         pair <LL, LL>
#define pb          push_back
#define mp          make_pair
#define pi          acos(-1.00)
#define DBG         pf("Hi\n")
#define sz          size()
#define ins         insert
#define fi          first
#define se          second
#define xx          first
#define yy          second
#define inf         (1<<29)
#define MOD         1000000007
#define eps         1e-9
#define MAX         1000000

typedef long long int LL;
typedef double db;
bool sts[MAX+10];

vector<LL>prm, P, abg;
vector<int>cnt, C, ext;
map<LL, int> MP;

LL ip(LL a, LL p)
{
    if(!p) return 1;
    if(a >= MOD) a%=MOD;
    if(p&1) return (a*ip(a,p-1))%MOD;
    LL ret = ip(a,p/2);
    return (ret*ret)%MOD;
}

inline bool ps(LL val)
{
    LL s = sqrt(val);
    return (sqr(s) == val);
}

int main()
{
    //freopen("c:\\Users\\User\\Desktop\\in.txt", "r", stdin);
    //freopen("c:\\Users\\User\\Desktop\\out.txt", "w", stdout);
    //ios_base::sync_with_stdio(0); cin.tie(0);

    int i, j, k, t, cs, s = sqrt(MAX), n, p;
    LL v, ret, nw, g;
    bool fnd;

    sts[0] = sts[1] = 1;
    FRE(i,2,MAX)
        if(!sts[i])
        {
            P.pb(i);
            C.pb(0);

            if(i > s) continue;
            for(j = i*i; j <= MAX;j += i)
                sts[j] = true;
        }

    sf(t);
    FRE(cs,1,t)
    {
        prm = P;
        cnt = C;
        ret = 1;

        sf(n);
        FRE(i,1,n)
        {
            scanf("%lld", &v);
            ret = (ret * (v%MOD)) % MOD;
            FRL(j,0,prm.sz)
            {
                if(v%prm[j]) continue;
                while(v%prm[j] == 0) cnt[j]++, v/=prm[j];
            }

            if(v == 1) continue;
            if(ps(v))
            {
                v = sqrt(v);
                MP[v]+=2;
            }
            else abg.pb(v), ext.pb(1);
        }

        FRL(i,0,abg.sz)
            FRL(j,i+1,abg.sz)
            {
                if(abg[i] == abg[j])
                {
                    ext[i] += ext[j];
                    ext[j] = 0;
                    continue;
                }

                g = __gcd(abg[i], abg[j]);
                if(g == 1) continue;
                MP[g]+= ext[i] + ext[j];
                MP[abg[i]/g] += ext[i];
                MP[abg[j]/g] += ext[j];

                ext[i] = ext[j] = 0;
            }

        map<LL,int>::iterator it;

        fnd = true;
        while(fnd)
        {
            fnd = false;
            for(it = MP.begin(); it!= MP.end(); it++)
            {
                nw = it->fi;
                FRL(i,0,abg.sz)
                    if(!ext[i]) continue;
                    else
                    {
                        v = abg[i];
                        if(v%nw) continue;
                        v = v/nw;
                        MP[nw] += ext[i];
                        MP[v] += ext[i];
                        fnd = true;
                        ext[i] = 0;
                    }
            }
        }

        FRL(i,0,abg.sz)
            if(ext[i] && ext[i]%3)
                ret = (ret * ip((abg[i]%MOD), 3-ext[i]%3))%MOD;


        for(it = MP.begin(); it != MP.end(); it++)
        {
            nw = it->fi;
            nw %= MOD;
            p = it->se;
            if(p%3)ret = (ret * ip(nw, 3-p%3))%MOD;
        }

        FRL(i,0,prm.sz)
            if(cnt[i] && cnt[i]%3)
            {
                cnt[i] %= 3;
                ret = (ret*ip(prm[i], 3-cnt[i]))%MOD;
            }

        pf("%lld\n", ret);
        ext.clear();
        MP.clear();
        abg.clear();
    }
    return 0;
}
