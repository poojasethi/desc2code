#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define MOD 1000000007 // 2 billion

char lhs[59],rhs[59];
int n,m;
ll an[50][2];
ll dp[50][2][2];
vector <char> p;

bool check(vector <char> s)
{
    int len = s.size();
    if( len - m >= 0 )
    {
        int j = len - m;
        char a[59];
        int counter  = 0 ;
        while( j < len )
        {
            a[counter] = s[j];
            j++;
            counter++;
        }
        a[counter] = '\0';
 //       cout << a << endl;
        if( strcmp(a,lhs) >= 0 && strcmp(a,rhs) <= 0 )
            return true;
    }
    return false;
}

void recurse( int i ,int j )
{
    if( p.size() > 0 )
        an[p.size()][j]++;
    if( i == n )
        return;
    p.push_back('A');
    if( j == 0 )
        recurse(i + 1,0);
    else if( check(p) )
        recurse(i + 1,0);
    else
        recurse(i + 1,1);
    p.pop_back();
    p.push_back('B');
    if( j == 0 )
        recurse(i + 1,0);
    else if( check(p) )
        recurse(i + 1,0);
    else
        recurse(i + 1,1);
    p.pop_back();
    return;
}

ll memoize( int i , int j , int p)
{
    //cout << i << " " << j << endl;
    if( i == n && j == 1 )
        return 1;
    if( i >= n )
        return 0;
    if( dp[i][j][p] != -1 )
        return dp[i][j][p];
    ll ans = 0;
    if( p == 0 )
    {
        REP(k,0,n)
        {
            if( k + i > n )
                break;
            ans += memoize(k + i,j,1) * an[k][1];
            ans %= MOD;
            ans += memoize(k + i,1,1) * an[k][0];
            ans %= MOD;
        }
    }
    ans += 24 * memoize(i + 1,j,0);
    ans %= MOD;
    return dp[i][j][p] = ans;
}

int main()
{
    int t;s(t);
    while( t-- )
    {
        memset(dp,-1,sizeof(dp));
        memset(an,0,sizeof(an));
        s(n);s(m);
        scanf("%s%s",lhs,rhs);
        recurse(0,1);
        ll ans = 1;
        REP(i,0,n - 1)
        {
            ans = ans * 26;
            ans %= MOD;
        }
    //    cout << an[1][0] << " " << an[2][0] << " " << an[1][1] << " " << an[2][1] << endl;
        //cout << memoize(0,0,0) << endl;
        ans = (ans - memoize(0,0,0) + MOD) % MOD;
        printf("%lld\n",ans);
    }
    return 0;
}
