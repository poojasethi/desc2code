#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<iostream>
#include<vector>
#include<ctime>
#include<string>
#include<map>
#define rep(i,j,k) for (i=j;i<=k;i++)
#define reps(i,j,k) for (i=j;i>=k;i--)
#define pb push_back
#define mem(a,b) memset(a,b,sizeof(a))
#define inf 0x7fffffff
#define maxn 210000
#define mod 1000000007
using namespace std;
struct node
{
	int son[2],times,fail;
	void init(){son[0]=son[1]=times=fail=0;}
}tree[(1<<20)+10000];
int T,n,m,data[25],l,r,tot,sta[(1<<20)+10000];
int dp[2][(1<<20)+10000];
char A[25],B[25];
void insert(int x)
{
	int i,j,k=m,p=0;
	rep(i,1,m){data[i]=x%2;x/=2;}
	while(k>0)
	{
		int index=data[k];
		if (!tree[p].son[index])
		{
			tree[++tot].init();
			tree[p].son[index]=tot;
		}
		p=tree[p].son[index];k--;
	}
	tree[p].times=1;
}
void build_ac_auto()
{
	int head,tail,i,j,k;
	sta[head=tail=1]=0;
	while(head<=tail)
	{
		int x=sta[head];
		rep(i,0,1)
		if (tree[x].son[i])
		{
			if (x==0)tree[tree[x].son[i]].fail=0;
			else tree[tree[x].son[i]].fail=tree[tree[x].fail].son[i];
			sta[++tail]=tree[x].son[i];
		}
		else
		{
			if (x==0)tree[x].son[i]=0;
			else tree[x].son[i]=tree[tree[x].fail].son[i];
		}
		head++;
	}
}
void update(int &A,int B){A+=B;if (A>mod)A-=mod;}
void DP()
{
	int i,j,k,now=0,last;
	mem(dp[0],0);dp[0][0]=1;
	rep(i,1,n)
	{
		now^=1;mem(dp[now],0);last=now^1;
		rep(j,0,tot)if (!tree[j].times&&dp[last][j])
		{
			rep(k,0,1)if (!tree[tree[j].son[k]].times)
			{
				int sons=tree[j].son[k];
				update(dp[now][sons],dp[last][j]);
			}
			update(dp[now][0],(1LL*24*dp[last][j])%mod);
		}
	}
	int ans=0;
	rep(i,0,tot)update(ans,dp[now][i]);
	printf("%d\n",ans);
}
int main()
{
	int i,j,k;
	//freopen("in.txt","r",stdin);freopen("out.txt","w",stdout);
	scanf("%d",&T);
	while(T--)
	{
		tot=0;tree[0].init();
		scanf("%d%d",&n,&m);
		scanf("%s",A);scanf("%s",B);
		l=0;r=0;
		rep(i,1,m)if (A[i-1]=='A')l=l*2;else l=l*2+1;
		rep(i,1,m)if (B[i-1]=='A')r=r*2;else r=r*2+1;
		rep(i,l,r)insert(i);
		build_ac_auto();
		DP();
	}
	return 0;
}
