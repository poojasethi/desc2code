//Template

// By Anudeep :)
//Includes
#include <vector> 
#include <queue>
#include <map> 
#include <set>
#include <utility> //Pair
#include <algorithm>
#include <sstream> // istringstream>> ostring stream<<
#include <iostream> 
#include <iomanip> 
//setbase - cout << setbase (16); cout << 100 << endl; Prints 64
//setfill -   cout << setfill ('x') << setw (5); cout << 77 << endl; prints xxx77
//setprecision - cout << setprecision (4) << f << endl; Prints x.xxxx
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
using namespace std;

//M lazy ;)
typedef long long ll;
typedef vector <int> vi;
typedef pair< int ,int > pii;
typedef istringstream iss;
typedef ostringstream oss;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz size()
#define ln length()
#define rep(i,n) for(int i=0;i<n;i++)
#define fu(i,a,n) for(int i=a;i<=n;i++)
#define fd(i,n,a) for(int i=n;i>=a;i--)
#define all(a)  a.begin(),a.end() 
#define ESP (1e-9)

#define gi(n) scanf("%d",&n)
#define gl(n) cin >> n
#define pi(n) printf("%d",n)
#define pl(n) cout << n
#define ps printf(" ")
#define pn printf("\n")
#define dg(n,s); printf("%s %d",s,n)
#define imax numeric_limits<int>::max()
#define imin numeric_limits<int>::min()
#define lmax numeric_limits<ll>::max()
#define lmin numeric_limits<ll>::min()

int main() {
	int t;
	gi(t);
	while(t--) {
		int n, m;
		string s1, s2;
		cin >> n >> m >> s1 >> s2;
		int t1, t2;
		t1 = 0; t2 = 0;
		rep(i, s1.ln) t1 = (t1 * 2) + (s1[i] == 'B');
		rep(i, s2.ln) t2 = (t2 * 2) + (s2[i] == 'B');
		int r[30];
		for(int i=0; i<=n; i++) {
			if(i < m) r[i] = (1<<i);
			else {
				r[i] = 0;
				rep(mask, (1<<i)) {
					bool ok = true;
					int temp = mask;
					rep(j, i-m+1) {
						int cur = temp & ((1<<m)-1);
						if(t1 <= cur && cur <= t2) {
							ok = false;
							break;
						}
						temp >>= 1;
					}
					r[i] += ok;
				}
			}
		}
		int ans = 0;
		int MOD = 1000000007;
		rep(mask, (1<<n)) {
			int prev = -1;
			int cnt = 0;
			int cur = 1;
			rep(i, n) if((mask >> i)&1) {
				cur = (cur * 1LL * r[i - prev - 1]) % MOD;
				prev = i;
				cnt++;
			}
			cur = (cur * 1LL * r[n-prev-1]) % MOD;
			while(cnt--) cur = (cur * 24LL) % MOD;
			ans += cur;
			ans %= MOD;
		}
		cout << ans << endl;
	}
}