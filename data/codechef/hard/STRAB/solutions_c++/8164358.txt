#include <iostream>
#include <string>
#include <bits/stdc++.h>
#define MOD 1000000007
#define LL long long
using namespace std;
 
LL allow[20],dp[20];
 
int n,m,x=0,y=0;
void func(int len,int num)
{
    int nn=(num&((1<<m)-1));
    //printf("%d %d %d\n",len,n,m);
    if(len>=m && nn>=x && nn<=y) return;
    allow[len]++;
    if(allow[len]>=MOD) allow[len]-=MOD;
    if(len<n)
    {
        func(len+1,num*2);
        func(len+1,num*2+1);
    }
}
void solve()
{
    x=y=0;
    scanf("%d %d",&n,&m);
    string s;
    cin>>s;
    for(int i=0;i<m;++i)
    {
        x=(x<<1)+s[i]-'A';
    }
    cin>>s;
    for(int i=0;i<m;++i)
    {
        y=(y<<1)+s[i]-'A';
    }
    /*if(m==1)
    {
        LL ways=24,ans=1;
        if(x>0) ways++;
        if(y<1) ways++;
        for(int i=0;i<n;++i)
        {
            ans*=ways;
            ans%=MOD;
        }
        printf("%lld\n",ans);
        return;
    }
    if(m>n)
    {
        LL ways=26,ans=1;
        for(int i=0;i<n;++i)
        {
            ans*=ways;
            ans%=MOD;
        }
        printf("%lld\n",ans);
        return;
    }*/
    memset(dp,0,sizeof(dp));
    memset(allow,0,sizeof(allow));
    func(0,0);
    
    dp[0]=1;
    
    for(int i=1;i<=n;++i)
    {
        //printf("allow: %d\n",allow[i]);
        dp[i]=(allow[i]+dp[i-1]*24)%MOD;
        for(int j=1;j<i;++j)
        {
            LL add=((allow[j]*24)%MOD * dp[i-1-j])%MOD;
            dp[i]+=add;
            if(dp[i]>=MOD) dp[i]-=MOD;
        }
    }
    printf("%lld\n",dp[n]);
}
int main() {
	int t;
	scanf("%d",&t);
	while(t--)
	{
	    solve();
	}
	return 0;
}
 
