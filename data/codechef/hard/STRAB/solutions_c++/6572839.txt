#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

#define pb push_back
#define mp make_pair

#define ALL(x) (x).begin(),(x).end()
#define CLR(a,b) memset(a,b,sizeof(a))
#define REPN(x,a,b) for (int x=a; x<b;++x)
#define REP(x,b) REPN(x, 0, b)

#define dbg(x) cout << #x << " = " << x << endl;
#define dbg2(x, y) cout << #x << " = " << x << "  " << #y << " = " << y << endl;
#define dbg3(x, y, z) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << endl;
#define dbg4(x, y, z, w) cout << #x << " = " << x << "  " << #y << " = " << y << "  " << #z << " = " << z << "  " << #w << " = " << w <<  endl;

typedef long long ll;

char X[30], Y[30];
ll dp[30];
int n, m;

const ll MOD = 1000000007;

bool isHated(char * S) {
    char tmp = S[m];
    S[m] = '\0';
    if (strcmp(X, S) <= 0 && strcmp(S, Y) <= 0) {
        S[m] = tmp;
        return true;
    }
    else {
        S[m] = tmp;
        return false;
    }
}

ll go(char * S, int pos, int sz) { // returns number of different strings that ends in sz, pos is where im gonna put the letter
    if (pos == -1) return 1;
    ll ans = 0;
    if (pos <= sz + 1 - m) {
        ans = (pos == 0) ? 24 : (24*dp[pos-1]) % MOD;
        S[pos] = 'A';
        if (!isHated(S+pos)) ans = (ans + go(S, pos-1, sz)) % MOD;
        S[pos] = 'B';
        if (!isHated(S+pos)) ans = (ans + go(S, pos-1, sz)) % MOD;
 
    }
    else {
        ans = (pos == 0) ? 24 : (24*dp[pos-1]) % MOD;
        S[pos] = 'A';
        ans = (ans + go(S, pos-1, sz)) % MOD;
        S[pos] = 'B';
        ans = (ans + go(S, pos-1, sz)) % MOD;
    }
    return ans;
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        scanf("%d %d %s %s", &n, &m, X, Y);
        char S[30];
        REP(i, m-1) {
            dp[i] = (i == 0) ? 26 : 26*dp[i-1];
            dp[i] %= MOD;
        }
        REPN(i, m-1, n) {
            dp[i] = go(S, i, i);
        }
        printf("%lld\n", dp[n-1]);
    }
    return 0;
}
