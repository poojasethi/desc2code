#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
ll mod = 1e9+7;
int t, n, m;
ll dp[25];
char s1[25],s2[25];
char s[25];
bool bad(char * s ){
	// compare from s+i to s+i+m-1 ,so I am setting s+i+m as the end of the string 
	char t = s[m];
	s[m]='\0';
	if(strcmp(s1,s)<=0 && strcmp(s,s2)<=0){
		s[m]=t;
		return true;
	}
	else{
		s[m]=t;
		return false;
	}
}
ll f(char * s , int n , int i){
	if(i<0)return 1;
	ll ans =0;
	if(i<(n+1)-m +1){
		// you need to check validity of the word 
		ans = (ans + 24*dp[i])%mod;
		s[i]='A';
		if(!bad(s+i))ans = (ans + f(s,n, i-1))%mod;
		s[i]='B';
		if(!bad(s+i)) ans = (ans + f(s,n,i-1))%mod;
	}
	else {
		ans = (ans + 24*dp[i])%mod;
		s[i]='A';
		ans = (ans + f(s,n, i-1))%mod;
		s[i]='B';
		ans = (ans + f(s,n,i-1))%mod;
	}
	return ans;
}
int main(){
	cin>>t;
	while(t--){
		cin>>n>>m;
		scanf("%s",s1);
		scanf("%s",s2);
		dp[0]=1;
		for(int i=1; i<m; i++){
			dp[i]=(26*dp[i-1])%mod;
		}
		for(int i=m; i<=n; i++){
			dp[i]=f(s, i-1, i-1); // f(s, endIdx, idxToBeFilledAt)
		}
		cout<<dp[n]<<endl;
	}
}
