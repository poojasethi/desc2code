#include<bits/stdc++.h>
using namespace std;
// pos we are on , mask m , number of bits of mask i need to take
 
const long long mod = 1e9 + 7 ;
 
long long pp[30];
 
inline long long P(long long a , long long b)
{  
        return pp[b] ; 
}
 
long long int m , n ;
int X[20][(1<<19)+3][20];
long long a , b  , ans;
 
 
long long int solve( long long int index ,long long int mask ,long long int nb)
{    
         if(index>n) return 0;
         if(X[index][mask][nb]!=-1) return X[index][mask][nb] ;
     
             long long aa = 0 ;
 
         if ( nb != m - 1 )
         {  
                aa =  ( 24 * solve(index+1,0,0) + solve(index+1,mask*2,nb+1)  + solve(index+1,mask*2+1,nb+1) ) % mod;
                 X[index][mask][nb] = aa ; // THIS MEMOIZATION IS MOST IMP. AND WORKS FINE
                return aa;
         }
       
       
       
        aa = 24*solve(index+1 , 0 , 0 ) % mod ;
       
        mask = mask * 2 % ( 1<< m );
       
        if(mask>=a&&mask<=b)  aa += P(26,n-index);
        else                  aa += solve(index+1 ,mask , nb ) ;
       
        mask += 1 ;
       
        if(mask>=a&&mask<=b)  aa += P(26,n-index);
        else                  aa += solve(index+1 ,mask , nb ) ;
               
       
        aa = aa % mod ;
                 
 /*              X[index][mask][nb] = aa ;  */ //THIS MEMOIZATION gives WA unexpectedly. Why ?
        return aa ;
}
 
 
int main()
{
        int t , i , j , k;
    char s1[25] , s2[25] ;
       
        pp[0] = 1;
        for(i=1;i<22;i++) pp[i] = pp[i-1] *26 % mod;
 
        cin >> t;
       
        while(t--)
        {
            cin >> n >> m ;
       
           cin >> s1;
           cin >> s2;
           
           a = 0; b = 0; ans = 0 ;
           
           for( i = 0 ; i < m ; i++ )
           {
                     a=a*2; b = b*2;
                     if(s1[i]=='B') a++;
                     if(s2[i]=='B') b++;
           }
       
     memset(X,-1,sizeof(X)) ;
     
        cout <<  (P(26,n) +mod- solve(1 , 0 , 0) ) % mod << endl;
       
    }
       
       
        return 0;
}