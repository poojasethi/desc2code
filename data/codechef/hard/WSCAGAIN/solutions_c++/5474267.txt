#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <utility>
#include <set>
#include <map>
#include <iostream>
#include <queue>
#include <climits>

using namespace std;

typedef long long LL;

#define PB push_back
#define FRO freopen("in.txt","r",stdin);

#define CLR(arr) memset( (arr),0,sizeof(arr) );
#define NEG(arr) memset( (arr),-1,sizeof(arr) );

#define X first
#define Y second

#define MP make_pair

#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)


typedef pair<int,int> pint;
typedef map<int,int> mint;


int dp[1<<14][14][2];
int n,m;

pint eat[100];
const int inf = (1<<29);
int lim;

bool ok(int state,int side){
    for (int i=0;i<m;++i){
        if ( bool(state & (1<<eat[i].X)) == bool(state & (1<<eat[i].Y)) && bool(side) != bool(state & (1<<eat[i].Y)) ){
            return false;
        }
    }
    return true;
}

int dist[1<<14][14][2];

struct tt{
    int state,side,have,move;
};

deque<tt> q;

int bfs(){


    for (int i=0;i<(1<<n);++i){
        for (int j=0;j<=lim;++j){
            dist[i][j][0] = dist[i][j][1] = inf;
        }
    }

    q.clear();

    tt tmp;
    tmp.state= 0;
    tmp.side= 0;
    tmp.have= lim;
    tmp.move= 0;

    dist[tmp.state][tmp.have][tmp.side] = 0;

    q.push_back(tmp);

    while ( !q.empty() ){
        tt ff = q.front();q.pop_front();
        if ( ff.state == (1<<n)-1 && ff.side == 1 ){
            return ff.move;
        }
        dist[ff.state][ff.have][ff.side]= ff.move;

        tt tar;
        tar.state = ff.state;
        tar.side = ff.side^1;
        tar.move = ff.move+1;
        tar.have = lim;

        if ( dist[tar.state][tar.have][tar.side] == inf && ok(tar.state,tar.side) ){
            dist[tar.state][tar.have][tar.side]= tar.move;
            q.push_back( tar );
        }

        for (int i=0;i<n;++i){
            if ( ff.have-1>=0 && bool( ff.state & (1<<i) )== ff.side ){
                tar= ff;
                tar.state ^= (1<<i);
                tar.have--;

                if ( dist[tar.state][tar.have][tar.side] == inf ){
                    q.push_front(tar);
                }
            }
        }
    }
    exit(5);
}

int main(){

    

    int kase;
    scanf("%d",&kase);

    while ( kase-- ){
        scanf("%d %d %d",&n,&m,&lim);
        for (int i=0;i<m;++i){
            scanf("%d %d",&eat[i].X,&eat[i].Y);
            eat[i].X--;
            eat[i].Y--;
        }

        for (int i=0;i<(1<<n);++i){
            for (int j=0;j<=lim;++j){
                dp[i][j][0]= dp[i][j][1] = -1;
            }
        }
        printf("%d\n",bfs());
    }


    return 0;
}
