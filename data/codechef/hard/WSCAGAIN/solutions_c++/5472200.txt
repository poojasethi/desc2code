#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

#define MAXN 13

struct node{
    int mask,pos,dist;
    
    node(){}
    
    node(int _mask, int _pos, int _dist):
        mask(_mask), pos(_pos), dist(_dist){}
};

bool ok[1 << MAXN],visited[1 << MAXN][2];

int solve(int N,int K){
    queue<node> Q;
    Q.push(node((1 << N) - 1,0,0));
    
    while(!Q.empty()){
        node cur = Q.front();
        Q.pop();
        
        if(cur.pos == 0){
            for(int i = cur.mask;i > 0;i = ((i - 1) & cur.mask))
                if(__builtin_popcount(i) <= K && ok[cur.mask ^ i] && !visited[(cur.mask ^ i)][1]){
                    visited[(cur.mask ^ i)][1] = true;
                    Q.push(node((cur.mask ^ i),1,cur.dist + 1));
                }
        }else{
            int mask2 = ((1 << N) - 1) ^ cur.mask;
            if(mask2 == (1 << N) - 1) return cur.dist;
            
            if(ok[mask2] && !visited[cur.mask][0]){
                visited[cur.mask][0] = true;
                Q.push(node(cur.mask,0,cur.dist + 1));
            }
            
            for(int i = mask2;i > 0;i = ((i - 1) & mask2))
                if(__builtin_popcount(i) <= K && ok[mask2 ^ i] && !visited[cur.mask | i][0]){
                    visited[cur.mask | i][0] = true;
                    Q.push(node(cur.mask | i,0,cur.dist + 1));
                }
        }
    }
    
    return -1;
}

int main(){
    int T,M,N,K;
    
    scanf("%d",&T);
    
    while(T--){
        scanf("%d %d %d",&N,&M,&K);
        
        memset(ok,true,sizeof ok);
        
        for(int i = 0,x,y;i < M;++i){
            scanf("%d %d",&x,&y);
            --x; --y;
            ok[(1 << x) | (1 << y)] = false;
        }
        
        for(int mask = 0;mask < (1 << N);++mask){
            if(!ok[mask]){
                for(int i = 0;i < N;++i)
                    ok[mask | (1 << i)] = false;
            }
        }
        
        memset(visited,false,sizeof visited);
        
        printf("%d\n",solve(N,K));
    }
    
    return 0;
}