#include <stdio.h>
#include <algorithm>
#include <vector>
#include <set>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <utility>
#include <queue>
#include <stack>
#include <map>
#include <math.h>
 
using namespace std;
 
#define X first
#define Y second
#define mp make_pair
#define pb push_back
#define piii pair<pair<int,int>,int>
#define pii pair<int,int>
#define pdd pair<double,double>
#define MAXN 200020
 
int N, Q, parent[MAXN], depth[MAXN], sz[MAXN], root[MAXN];
vector<int> a[MAXN];
 
void Read()
{
    int from, to;
    scanf("%d", &N);
 
    for(int i=1; i<N; ++i)
    {
        scanf("%d %d", &from, &to);
        a[from].pb(to);
        a[to].pb(from);
    }
}
 
void Dfs(int now, int par)
{
    parent[now] = par;
    depth[now] = depth[par] +1;
    sz[now] =1;
 
    int s= a[now].size();
 
    for(int i=0; i<s; ++i)
    {
        if(a[now][i] != par)
        {
            Dfs(a[now][i], now);
            sz[now] += sz[a[now][i]];
        }
    }
}
 
void Construct(int now, int start)
{
    root[now] = start;
 
    int mxval = 0, mxpos = -1, s=a[now].size();
 
    for(int i=0; i<s; ++i)
    {
        if(a[now][i] != parent[now] && sz[a[now][i]] > mxval)
        {
            mxval = sz[a[now][i]];
            mxpos = i;
        }
    }
 
    if(mxpos != -1)
        Construct(a[now][mxpos], start);
 
    for(int i=0; i<s; ++i)
        if(a[now][i] != parent[now] && i!=mxpos)
            Construct(a[now][i], a[now][i]);
}
 
int Lca(int from, int to)
{
    if(depth[from] > depth[to])
        return Lca(to, from);
 
    if(root[from] == root[to])
        return from;
    if(depth[root[from]] < depth[root[to]])
        return Lca(from, parent[root[to]]);
    return Lca(to, parent[root[from]]);
}
 
void Solve()
{
    int from, to, newroot;
    Dfs(1, 1);
    Construct(1, 1);
    scanf("%d", &Q);
 
    for(int i=1; i<=Q; ++i)
    {
        scanf("%d %d %d", &newroot, &from, &to);
 
        if(depth[from] > depth[to])
            swap(from, to);
 
        if(Lca(Lca(from, to), newroot) != Lca(from, to))
            printf("%d\n", Lca(from, to));
        else if(Lca(from, to) == from)
            printf("%d\n", Lca(newroot, to));
        else if(Lca(newroot, from) == from)
            printf("%d\n", from);
        else if(Lca(newroot, to) == to)
            printf("%d\n", to);
        else
        {
            if(Lca(newroot, to) == Lca(from, to))
                printf("%d\n", Lca(newroot, from));
            else
                printf("%d\n", Lca(newroot, to));
        }
    }
}
 
int main()
{
    Read();
    Solve();
    return 0;
}
 