#include<bits/stdc++.h>
#define pb push_back
#define PI acos(-1)
#define mp make_pair
#define F first
#define sd(x) scanf("%d",&x)
#define sd2(x,y) scanf("%d%d",&x,&y)
#define sd3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define maxn 201000
#define S second
#define ll long long int
#define inf 1000000014
#define infl (ll)(1e18+1)
#define mod 1000000007
#define sz(x) (int) x.size()
#define pi pair< int,int >
#define pii pair<pi,int>
#define trace1(x)  cerr << #x << ": " << x << endl
#define trace2(x, y)  cerr << #x << ": " << x << " | " << #y << ": " << y << endl
using namespace std;
int t,n,m,val,q,a,b,r,u,vv;
vector < int > v[maxn];
int par[maxn][20];
int papa[maxn];
int dist[maxn];
int mark[maxn];
int vis[maxn];
void bfs(int s)
{
	queue< int > q;
	q.push(s);
	vis[s]=1;
	dist[s]=0;
	while(!q.empty())
	{
		int top = q.front();
		q.pop();
		for(int i=0;i<v[top].size();i++)
		{
			if(!vis[v[top][i]])
			{
				q.push(v[top][i]);
				vis[v[top][i]]=1;
				dist[v[top][i]] = dist[top]+1;
				papa[v[top][i]] = top;
			}
		}
	}

}
void solve()
{
	for(int i=1;i<=n;i++)
		par[i][0] = papa[i];// 2^0th parent
	for(int j=1;(1<<j)<n;j++)// finding 2^ith parent
	{
		for(int i=1;i<=n;i++)//for all nodes
		{
			if(par[i][j-1]!=-1)
				par[i][j] = par[par[i][j-1]][j-1];// woah this does everything!
		}
	}
}
int LCA(int x,int y)
{
	// bringing to same level
	if(dist[y]>dist[x])
		swap(x,y);
	int d = dist[x]-dist[y];
	while(d > 0)
	{
		int raise_by = log2(d);
		x = par[x][raise_by];
		d-=(1<<raise_by);
	}
	if(x==y)
	return x;
	for(int j= 19;j>=0;j--)
	{
		if(par[x][j]!=-1 && par[x][j]!=par[y][j])
		{
			x = par[x][j];
			y = par[y][j];
		}
	}
	return papa[x];	
}
int main(int argc, char const *argv[])
{
	//freopen("input.txt","r",stdin);
	//freopen("output.txt","w",stdout);
		for(int i=0;i<maxn;i++)
		{
			papa[i]=0;
			for(int j=0;j<20;j++)
				par[i][j]=-1;
		}
		sd(n);
		for(int i=1;i<=n-1;i++)
		{
			sd2(a,b);
			v[a].pb(b);
			v[b].pb(a);
		}
		papa[1]=0;
		bfs(1);
		solve();
		sd(q);
		int arr[3],ans;
		while(q--)
		{
			sd3(r,u,vv);
			arr[0]=LCA(r,u);
			arr[1]=LCA(r,vv);
			arr[2]=LCA(u,vv);
			sort(arr,arr+3);
			if(arr[0]==arr[1])
				ans = arr[2];
			else
				ans = arr[0];
			printf("%d\n",ans);
		}
	return 0;
}