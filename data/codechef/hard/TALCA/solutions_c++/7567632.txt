#include<iostream>
#include<vector>
#include<algorithm>
#include<climits>
#include<cmath>
#include<cstring>
using namespace std;

int dp[19][201000],depth[2*100006];
vector<int>adj[2*100004];
int lca(int a,int b)
{
if(depth[a]<depth[b])
swap(a,b);
int temp=log2(depth[a]);
for(int i=temp;i>=0;i--)
if(depth[a]-(1<<i)>=depth[b])
a=dp[i][a];
if(a==b)
return a;
for(int i=temp;i>=0;i--)
if(dp[i][a]!=-1&&dp[i][a]!=dp[i][b])
a=dp[i][a],b=dp[i][b];
return dp[0][a];
}

void dfs(int i,int parent,int temp,bool *visited)
{
dp[0][i]=parent;
visited[i]=true;
depth[i]=temp;
for(int j=0;j<adj[i].size();j++)
if(!visited[adj[i][j]])
dfs(adj[i][j],i,temp+1,visited);
}

void gen(int n)
{
for(int i=1;i<18;i++)
for(int j=0;j<n;j++)
if(dp[i-1][j]!=-1)
dp[i][j]=dp[i-1][dp[i-1][j]];
}

int main()
{
ios_base::sync_with_stdio(false);
int n;
cin>>n;
for(int i=1;i<n;i++)
{
int a,b;
cin>>a>>b;
a--;
b--;
adj[a].push_back(b);
adj[b].push_back(a);
}
bool visited[n+2];
fill(visited,visited+n+2,false);
memset(dp,-1,sizeof(dp));
dfs(0,-1,0,visited);
gen(n);
int q;
cin>>q;
while(q--)
{
int r,u,v;
cin>>r>>u>>v;
r--;u--;v--;
int x=lca(u,v);
int y=lca(u,r);
int z=lca(v,r);
int ans;
if(x==z)
ans=y;
else if(x==y)
ans=z;
else
ans=x;
cout<<ans+1<<endl;
}
return 0;
}
