#include <stdio.h>
#include <vector>
#include <iostream>
#include <algorithm>
#include <assert.h>
using namespace std;
#define MAXN 200001
#define LMAXN 18
int P[MAXN], L[MAXN];
int dp[MAXN][LMAXN] = {{0}};
vector<int> tree[MAXN];
void dfs(int start, int level = 0, int parent = 0) {
    P[start] = parent;
    L[start] = level;
    int num = tree[start].size();
    for(int i = 0; i < num; i++) {
        if(parent != tree[start][i])
            dfs(tree[start][i], level + 1, start);
    }
}
int N;
void pre() {
    for(int i = 1; i <= N; i++) dp[i][0] = P[i];
    for(int j = 1; j < LMAXN; j++) {
        int rng = 1LL << j;
        for(int i = 1; i <= N; i++) {
            if(L[i] >= rng) dp[i][j] = dp[dp[i][j-1]][j-1];
        }
    }
}
int query(int u, int v) {
    if(L[u] > L[v]) swap(u,v);
    int len = L[v] - L[u];
    for(int i = LMAXN - 1; i>= 0; i--) {
        if(len & (1LL << i)) v = dp[v][i];
    }
    assert(L[u] == L[v]);
    if(u == v) return u;
    for(int i = LMAXN - 1; i >= 0; i--) {
        if(dp[u][i] != dp[v][i]) u = dp[u][i], v = dp[v][i];
    }
    return P[u];
}
int main() {
    scanf("%d", &N);
    for(int i = 0; i < N - 1; i++) {
        int x, y;
        scanf("%d %d", &x, &y);
        tree[x].push_back(y);
        tree[y].push_back(x);
    }
    int Q;
    scanf("%d", &Q);
    dfs(1);
    pre();
    while(Q--) {
        int root, x, y;
        scanf("%d %d %d", &root, &x, &y);
        int ans = query(x, y) ^ query(root, x) ^ query(root, y);
        printf("%d\n", ans);
    }
}
