# include <bits/stdc++.h>

# define INF 0x7f7f7f7f
# define EPS 1e-9
# define MOD 1000000007

# define LL long long int
# define ULL unsigned long long int 
# define PL pair <LL,LL>
# define VPL vector < PL >
# define VL vector <LL>
# define VVL vector < VL >
# define pb push_back
# define mp make_pair 
# define tr(c,it) for(typeof(c.begin()) it = c.begin(); it != c.end(); it++) 
# define ff first
# define ss second 
# define pc putchar_unlocked
# define tri pair < LL,PL >
# define TRI(a,b,c) mp(a,mp(b,c))
# define ms(A,val) memset(A,val,sizeof(A))

# define F(i,a,b) for (i=a; i<b; i++)
# define REP(i,n) F(i,0,n)


#define ok if(debug)
#define trace1(x) ok cerr << #x << ": " << x << endl;
#define trace2(x, y) ok cerr << #x << ": " << x << " | " << #y << ": " << y << endl;
#define trace3(x, y, z) ok cerr << #x << ": " << x << " | " << #y << ": " << y << " | " << #z << ": " << z << endl;
#define trace4(a, b, c, d)  ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
								<< #d << ": " << d << endl;
#define trace5(a, b, c, d, e) ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
									 << #d << ": " << d << " | " << #e << ": " << e << endl;
#define trace6(a, b, c, d, e, f) ok cerr << #a << ": " << a << " | " << #b << ": " << b << " | " << #c << ": " << c << " | " \
									<< #d << ": " << d << " | " << #e << ": " << e << " | " << #f << ": " << f << endl;

using namespace std;

int debug=1;
const int N=2e5+3;

/* MAIN PROGRAM STARTS HERE */

VVL W;
static LL used[N];
static LL in[N];
static LL out[N];
static VL L;
static LL H[N];

VL E;


LL k;
void dfs(LL v,LL p)
	{
	used[v]=1;
	E.pb(v);
	L.pb(p);
	H[v]=E.size()-1;
	in[v]=k;
	tr(W[v],it)
		{
		if (!used[*it])
			{
			k=k+1;
			dfs(*it,p+1);
			E.pb(v);
			L.pb(p);
			}
		}
	k=k+1;
	out[v]=k;
	}

static LL tree[10000007];

void build(LL node,LL st,LL en)
	{
	if (st==en) 
		{
		tree[node]=st;
		return;
		}
	LL mid=(st+en)>>1;
	build(2*node+1,st,mid);
	build(2*node+2,mid+1,en);
	tree[node]=(L[tree[2*node+1]]<=L[tree[2*node+2]])?tree[2*node+1]:tree[2*node+2];
	}


LL query(LL node,LL st,LL en,LL a,LL b)
	{
	if (st>b or en<a) return -1;
	LL mid=(st+en)>>1;
	if (st>=a and en<=b) return tree[node];
	LL x=query(2*node+1,st,mid,a,b);
	LL y=query(2*node+2,mid+1,en,a,b);
	if (x==-1) return y;
	if (y==-1) return x;
	return (L[x]<=L[y]?x:y);
	}
	
LL LCA(LL a,LL b)
	{
	if (H[a]>H[b]) swap(a,b);
	LL p=query(0,0,E.size()-1,H[a],H[b]);
	return E[p];
	}

int main()
	{
	//freopen("TC1.txt","r",stdin);
	//freopen("outpaut1","w",stdout);
	ios_base::sync_with_stdio(0);
	//cin.tie(0);
	int T;
	LL i,j,x,y,z,p,r,n,q,a,b;
	
	cin>>n;
	W.resize(n);
	LL root=0;
	REP (i,n-1)
		{
		cin>>x>>y;
		x--; y--;
		W[x].pb(y); W[y].pb(x);
		}
	
	cin>>q;
	k=0;
	ms(used,0);
	dfs(root,0);
	/*
	for (i=0; i<n; i++)
		trace4(i,in[i],out[i],H[i]);
	for (i=0; i<E.size(); i++)
		trace3(i,E[i],L[i]);
	*/
	build(0,0,E.size()-1);

	REP (i,q)
		{
		LL ans;
		cin>>x>>y>>z;
		x--; y--; z--;
		p=LCA(x,y);
		
		if ((in[z]<in[p] and out[z]>out[p])or(out[z]<in[p])or(in[z]>out[p]))
			ans=p;
		else
			{
			a=LCA(x,z);
			b=LCA(y,z);
			if (a==b) ans=a;
			else ans=(a==p)?b:a;
			}
		cout<<ans+1<<"\n";
		}
	
	return 0;
	}