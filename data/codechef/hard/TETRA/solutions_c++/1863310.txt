#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;

double heron(double a, double b, double c){
  double p=(a+b+c)/2;
  return sqrt(p*(p-a)*(p-b)*(p-c));
}

double det(vector< vector<double> >& a){
  double S=0;
  
  vector<int> A;
  for(long long i=0;i<a.size();++i)
    A.push_back(i);
  
  do{
    long long inw=0;
    
    for(long long i=0;i<A.size();++i)
      for(long long j=i+1;j<A.size();++j)
        if(A[i]>A[j])
          ++inw;
        
    long long q= inw%2
         ? -1
         :  1 ;
    for(long long i=0;i<A.size();++i)
      q*=a[i][A[i]];
    S+=q;
  }while(next_permutation(&A[0],&A[0]+a.size()));
  
  return S;
}

int main(){
  
  long long T;
  
  for(scanf("%lld",&T);T;--T){
    
    //WXYZ
    
    double WX, WY, WZ, XY, XZ, YZ;
    
    scanf("%lf%lf%lf%lf%lf%lf",&WX,&WY,&WZ,&XY,&XZ,&YZ);
    
    vector< vector<double> > macierzDelta;
    vector<double> tmp;
    
    macierzDelta.push_back(tmp);
    macierzDelta.back().push_back(0);
    macierzDelta.back().push_back(WX*WX);
    macierzDelta.back().push_back(WY*WY);
    macierzDelta.back().push_back(WZ*WZ);
    macierzDelta.back().push_back(1);
    
    macierzDelta.push_back(tmp);
    macierzDelta.back().push_back(WX*WX);
    macierzDelta.back().push_back(0);
    macierzDelta.back().push_back(XY*XY);
    macierzDelta.back().push_back(XZ*XZ);
    macierzDelta.back().push_back(1);
    
    macierzDelta.push_back(tmp);
    macierzDelta.back().push_back(WY*WY);
    macierzDelta.back().push_back(XY*XY);
    macierzDelta.back().push_back(0);
    macierzDelta.back().push_back(YZ*YZ);
    macierzDelta.back().push_back(1);
    
    macierzDelta.push_back(tmp);
    macierzDelta.back().push_back(WZ*WZ);
    macierzDelta.back().push_back(XZ*XZ);
    macierzDelta.back().push_back(YZ*YZ);
    macierzDelta.back().push_back(0);
    macierzDelta.back().push_back(1);
    
    macierzDelta.push_back(tmp);
    macierzDelta.back().push_back(1);
    macierzDelta.back().push_back(1);
    macierzDelta.back().push_back(1);
    macierzDelta.back().push_back(1);
    macierzDelta.back().push_back(0);
    
//     for(long long i=0;i<5;++i){
//       for(long long j=0;j<5;++j)
//         printf("%.4lf ",macierzDelta[i][j]);
//       printf("\n");
//     }
    
    double V=sqrt(det(macierzDelta)/288);
    double SW=heron(XY,XZ,YZ),
           SX=heron(WY,WZ,YZ),
           SY=heron(WX,WZ,XZ),
           SZ=heron(WX,WY,XY);
//     printf("%d %.4lf %.4lf %.4lf %.4lf %.4lf %.4lf ",macierzDelta.size(),det(macierzDelta),V,SW,SX,SY,SZ);
    printf("%.4lf\n",3*V/(SW+SX+SY+SZ));
  }
  
  return 0;
}