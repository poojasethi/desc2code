#include <iostream>

using namespace std;

long long arr[ 100010 ];
int n;

int mod = 1e9 + 7;

long long getElement(long long pos, int level) {
	//cout << "~~ pos: " << pos << endl;
	
	if( pos == 1 )
		return ( arr[0] % mod );

	if(level == 0)
		return ( ( ( arr[pos-1] % mod ) - ( arr[pos-2] % mod ) + mod ) % mod );
	
	if( pos % 2 == 0 ) {
		long long x = pos / 2;
		long long y = x + 1;
		
		long long topLeftParent = getElement( x, level - 1 );
		long long topRightParent = getElement( y, level - 1 );
		long long ans = ( topLeftParent + topRightParent ) % mod;
		return ans;
	}
	else {
		long long x =  ( ( pos - 1 ) / 2 ) + 1;
		long long ans = getElement( x, level - 1 );
		return ans;
	}
}

long long getSum(long long pos, int level) {
	//cout << "~~ pos: " << pos << endl;
	
	if( n==1 || pos==1 )
		return ( arr[0] % mod );	
	
	if(level==0)
		return ( arr[pos-1] % mod );
	
		
	if(pos % 2 == 0) {
		long long x = pos / 2;
		long long y = x + 1;
		
		long long subsum =  ( ( ( ( getSum( x, level - 1 )*3 ) % mod ) - ( arr[0] % mod ) + mod ) % mod );
		long long lastElement = getElement( y, level - 1 );
		long long ans = ( subsum + lastElement ) % mod;
		return ans;
	}
	else {
		long long y =  ( ( pos - 1 ) / 2 ) + 1;
		long long x = y - 1;
		
		long long subsum = ( ( ( getSum( x, level - 1 )*3 % mod ) - ( arr[ 0 ] % mod ) + mod ) % mod );
		long long lastElement = (getElement( y, level - 1 ) * 2 ) % mod;
		long long ans = ( ( subsum + lastElement ) % mod );
		return ans;
	}
}

int main() {
	
	int t; cin >> t;
	while( t-->0 ) {
		int m; long long x, y;
		cin >> n >> m >> x >> y;
		for( int i=0; i<n; i++ ) {
			long long atPos; cin >> atPos;
			if( i == 0 )
				arr[ 0 ] = atPos;
			else
				arr[ i ] = arr[ i - 1 ] + atPos;
		}
		
		for(int i=n; i<n+10; i++) {
			arr[i] = arr[i-1];
		}
		
		long long ans = getSum(y, m);
		if( x > 1 )
			ans -= getSum(x-1, m);
		ans += mod;
		ans %= mod;
		
		cout << ans << endl;
	}
}
