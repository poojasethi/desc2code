#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cmath>
#include <ctime>
#include <numeric>
#include <cstdio>
#include <memory.h>

using namespace std;   

#define SZ(a) ((int)(a).size())
#define SQR(a) ((a)*(a))
#define FOR(i, a, b) for(int i=(a), _b(b); i<_b; ++i)
#define FORD(i, b, a) for(int i=(b)-1, _a(a); i>=_a; --i)
#define FILL(a, b) memset(a, b, sizeof(a))
#define FHAS(a, b) (find((a).begin(), (a).end(), (b))!=(a).end())
#define HAS(a, b) ((a).find(b) != (a).end())
#define HASB(a, b) ((a & (1 << b))>0)

template<class A, class B> A convert(B x) {stringstream s; s << x; A r; s >> r; return r;}

typedef pair<int, int> PII;
typedef vector<int> VI;
typedef long long LL;

map<int, int> VIL;
int a[100001];
int F[100110];
int n, k;

int getID(int t)
{
	if (!HAS(VIL, t))
	{
		int sz = SZ(VIL);
		VIL[t] = sz;
	}
	return VIL[t];
}

vector<VI> vilPos;

void fAdd(int x, int val)
{
	x+=2;
	for(; x<=100100; x+=x&-x)
		F[x] += val;
}

int fGet(int x)
{
	x+=2;
	int res = 0;
	for(; x; x-=x&-x)
		res += F[x];
	return res;
}

int fGet(int a, int b) { return fGet(b)-fGet(a-1); }

int main() {

#ifdef ALMAG_LOCAL
	freopen("in.txt", "r", stdin);
#else
#endif

	scanf("%d %d", &n, &k);
	FOR(i, 0, n)
	{
		scanf("%d", a+i);
		a[i] = getID(a[i]);
	}

	vector< pair<int, PII> > Q;
	int r; scanf("%d", &r);

	FOR(i, 0, r)
	{
		int ot, ku;
		scanf("%d %d", &ot, &ku);
		Q.push_back(make_pair(ku, PII(ot, i)));
	}

	sort(Q.begin(), Q.end());

	vilPos.resize(SZ(VIL));

	VI res(r, 0);
	int ind=0; k++;
	FOR(i, 0, n)
	{
		vilPos[a[i]].push_back(i);
		if (SZ(vilPos[a[i]])>k)
			fAdd(vilPos[a[i]][SZ(vilPos[a[i]])-k-1], -1);
		if (SZ(vilPos[a[i]])>=k)
			fAdd(vilPos[a[i]][SZ(vilPos[a[i]])-k  ], +1);

		for (; ind<r && Q[ind].first==i; ind++)
			res[Q[ind].second.second] = fGet(Q[ind].second.first, Q[ind].first);
	}

	FOR(i, 0, r)
		printf("%d\n", res[i]);

	return 0;
}