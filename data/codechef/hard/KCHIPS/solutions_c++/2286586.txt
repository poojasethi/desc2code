#include<cstdio>
#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<set>
#include<cmath>
#include<bitset>
#include<map>
#include<queue>
#define test(t) while(t--)
#define cin(n) scanf("%d",&n)
#define cout(n) printf("%d\n",n)
#define rep(i,a,n) for(i=a;i<n;i++)
#define vi vector<int>
#define vii vector< pair<int,int> >
#define mii map<int,int>
#define pb push_back
#define mp make_pair
#define imax 1000000007
using namespace std;

typedef struct struct_fenwick{
  int size, memory;
  int *data;
}FenwickTree;
 
FenwickTree FenwickTreeNew(int memory){
  FenwickTree res;
  res.memory=memory; res.data=(int*)malloc(memory*sizeof(int));
  return res;
}
void FenwickTreeDelete(FenwickTree *t){free(t->data);}
void FenwickTreeInit(FenwickTree *t, int size){int i; t->size=size; for(i=0;i<size;i++) t->data[i]=0;}
void FenwickTreeAdd(FenwickTree *t,int k,int add){while(k<t->size)t->data[k]+=add, k|=k+1;}
int FenwickTreeGet(FenwickTree *t,int k){int res=0; while(k>=0)res+=t->data[k],k=(k&(k+1))-1; return res;}

struct data{int a,b,t;};
bool operator<(const data& a,const data& b) {return a.b < b.b;}

vector<int> num[200000];vector<data > a;
int n,k,i,r,x,y,v[200000],tot;
map<int,int> id;
int main()
{
    data temp;
    cin(n);cin(k);
    FenwickTree bit = FenwickTreeNew(200000);
	tot=0;
    for(i=1;i<=n;i++)
    {
        cin(x);
		if(id.find(x)==id.end()) id[x]=++tot;
        temp.a=id[x],temp.b=i,temp.t=-1;
        a.pb(temp);
    }
    cin(r);
    for(i=1;i<=r;i++)
    {
        cin(x);cin(y);
        x++;y++;
        temp.a=x,temp.b=y,temp.t=i;
        a.pb(temp);
    }
    k++;
    stable_sort(a.begin(),a.end());
    FenwickTreeInit(&bit,200000);
	tot=0;
    for(i=0;i<a.size();i++)
    {
       //cout<<a[i].a<<" "<<a[i].b<<" "<<a[i].t<<"\n";
        if(a[i].t==-1)
        {
            if(num[a[i].a].size()>=k)
            {
                FenwickTreeAdd(&bit,num[a[i].a][num[a[i].a].size()-k],-1);
            }
            num[a[i].a].pb(a[i].b);
			if(num[a[i].a].size()==k) tot++;
            if(num[a[i].a].size()>=k)
            {
                FenwickTreeAdd(&bit,num[a[i].a][num[a[i].a].size()-k],1);
            }
           //cout<<"type-1 "<<num[a[i].a].front()<<"\n";
        }
        else
        {
            v[a[i].t]=tot-FenwickTreeGet(&bit,a[i].a-1);
           //cout<<"type-2 "<<FenwickTreeGet(&bit,a[i].b)<<" "<<FenwickTreeGet(&bit,a[i].a-1)<<"\n";
        }
    }
    for(i=1;i<=r;i++) cout(v[i]);
    return 0;
}