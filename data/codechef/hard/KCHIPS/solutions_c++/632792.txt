#include <cstdio>
#include <cstring>
 
#include <map>
#include <vector>
#include <algorithm>
 
using namespace std;
 
#define BUCK 300
#define MAXN 100005
 
int N, K, R;
 
int V[ MAXN ];
int a[ MAXN ];
int b[ MAXN ];
int f[ MAXN ];
int l[ MAXN ];
int r[ MAXN ];
int cnt[ MAXN ];
int Sol[ MAXN ];
 
bool cmpf( int a, int b ) {
  int da = l[a] >> 8;
  int db = l[b] >> 8;
  if( da!= db ) return ( da < db );
  return ( r[a] < r[b] );
}
 
map< int, int > m;
 
int main( void )
{
  scanf( "%d%d", &N, &K );
 
  for( int i = 0; i < N; ++i ) 
    scanf( "%d", V+i );
 
  scanf( "%d", &R );
 
  for( int i = 0; i < R; ++i ) {
    scanf( "%d%d", l+i, r+i );
    f[i] = i;
  }
 
  sort( f, f + R, cmpf );
 
  int sad = 0;
  m.clear();
 
  for( int i = 0; i < N; ++i ) {
    if( !m.count( V[i] ) ) m[V[i]] = sad++;
    V[i] = m[V[i]];
  }
 
  int now = 0;
 
  int cl = 0, cr = 0;
  if( ( cnt[ V[0] ] = 1 ) > K ) now = 1;
 
  for( int i = 0; i < R; ++i ) {
    while( cr < r[f[i]] ) {
      ++cr; if( ++cnt[ V[cr] ] == K+1 ) ++now;
    }
    while( cl > l[f[i]] ) {
      --cl; if( ++cnt[ V[cl] ] == K+1 ) ++now;
    }
    while( cr > r[f[i]] ) {
      if( --cnt[ V[cr] ] == K ) --now; --cr;
    }
    while( cl < l[f[i]] ) {
      if( --cnt[ V[cl] ] == K ) --now; ++cl;
    }
    Sol[f[i]] = now;
  }
 
  for( int i = 0; i < R; ++i )
    printf( "%d\n", Sol[i] );
 
  return 0;
}
 