#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define mp make_pair
#define f first
#define s second
#define N 100005
#define ln 1e10+1
#define BIT(i, j) ((j >> i) & 1)
#define ll long long
#define oo 1000000007
#define ln 1000000000000000005
#define pii pair < pair <int, int>, int >
#define pi pair < int, pair <int, int> >
#define Pa pair < int ,int >

using namespace std;

int n, k, a[N], q, sq, ans = 0, res[N], b[N], V[N], cnt[N];
pair < Pa, int> que[N];

bool cmp(pair < Pa, int > P, pair < Pa, int > Q)
{
    if(P.f.f / sq != Q.f.f / sq)
        return P.f.f / sq < Q.f.f / sq;
    return P.f.s < Q.f.s;
}

int main()
{
   // filein("KCHIPS.inp");   fileout("KCHIPS.out");
    cin >> n >> k;  k++;
    for(int i=1; i<=n; i++)
    {
        scanf("%d", &a[i]);
        b[i] = a[i];
    }
    sort(b+1, b+n+1);
    cin >> q;
    sq = sqrt(q);
    for(int i=1; i<=q; i++)
    {
        scanf("%d%d", &que[i].f.f, &que[i].f.s), que[i].s = i;
        que[i].f.f++;
        que[i].f.s++;
    }
    sort(que+1, que+q+1, cmp);
    for(int i=1; i<=n; i++)
        V[i] = lower_bound(b+1, b+n+1, a[i]) - b;
    int l = 0, r = 0;
    for(int i=1; i<=q; i++)
    {
        while(l > que[i].f.f)
        {
            cnt[V[l-1]]++;
            if(cnt[V[l-1]] == k)  ans++;
            l--;
        }
        while(l < que[i].f.f)
        {
            cnt[V[l]]--;
            if(cnt[V[l]] == k-1)  ans--;
            l++;
        }
        while(r > que[i].f.s)
        {
            cnt[V[r]]--;
            if(cnt[V[r]] == k-1)  ans--;
            r--;
        }
        while(r < que[i].f.s)
        {
            cnt[V[r+1]]++;
            if(cnt[V[r+1]] == k)    ans++;
            r++;
        }
        res[que[i].s] = ans;
    }
    for(int i=1; i<=q; i++)
        printf("%d\n", res[i]);
}
