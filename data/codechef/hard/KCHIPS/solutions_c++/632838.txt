#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <complex>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <complex>
#include <stack>
#include <cassert>
#include <memory.h>
#ifdef NEV_DEBUG
#include <ctime>
#endif
using namespace std;
const double pi = 3.1415926535897932384626433832795;
double eps=1e-14;

typedef long long LL;
typedef unsigned long long ULL;
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int,int> PII;

#define sz size()
#define mp make_pair
#define pb push_back
#define FOR(i,a,b) for(int i=(a),_b(b); i<_b; ++i)
#define RFOR(i,a,b) for(int i=(a)-1,_b(b); i>=_b; --i)
#define CLR(a,b) memset(a,b,sizeof(a))
#define CPY(a,b) memcpy(a,b,sizeof(a))

char ch[1<<20];
inline string gs() {scanf("%s",ch); return string(ch);}
inline int gi() {int x;scanf("%d",&x); return x;}
void error(){int ttt=0; cout << 7/ttt;}
int gcd(int a, int b) {return (!a)?b:gcd(b%a,a);}

int F[111111];
int fsum(int a) {
	++a;
	int r=0;
	while(a) {
		r+=F[a];
		a-=a&-a;
	}
	return r;
}
int fsum(int a, int b) {
	return fsum(b)-fsum(a-1);
}
void fadd(int x, int v) {
	++x;
	while(x<111111) {
		F[x]+=v;
		x+=x&-x;
	}
}

PII W[111111];
int ID[111111];

vector<PII> X[111111];
int RES[111111];
VI H[111111];

int main() {	
#ifdef NEV_DEBUG
    freopen("in.txt","r",stdin);
	//freopen("in.txt","w",stdout);
	
    clock_t beg = clock();
#else
    //freopen("message.in","r",stdin);
    //freopen("message.out","w",stdout);	
#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	int N=gi();
	int K=gi(); ++K;
	FOR(i,0,N) W[i]=mp(gi(),i);
	sort(W,W+N);
	int pos=0;
	FOR(i,0,N) {
		if (i && W[i].first!=W[i-1].first) ++pos;
		ID[W[i].second]=pos;
	}

	
	int M=gi();
	FOR(i,0,M) {
		int a=gi();
		int b=gi();
		X[b].pb(mp(a,i));
	}

	CLR(F,0);
	FOR(i,0,N) {
		int x=ID[i];
		H[x].pb(i);
		if (H[x].sz>=K) {
			if (H[x].sz>K) fadd(H[x][H[x].sz-K-1],-1);
			fadd(H[x][H[x].sz-K],1);
		}
		FOR(j,0,X[i].sz) {
			RES[X[i][j].second]=fsum(X[i][j].first,i);
		}
	}
	FOR(i,0,M) printf("%d\n",RES[i]);
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef NEV_DEBUG
	fprintf(stderr,"*** Total time: %.3lf ***\n",1.0*(clock()-beg)/CLOCKS_PER_SEC);
#endif
    return 0;
}