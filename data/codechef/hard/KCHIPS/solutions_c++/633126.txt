#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<ctime>
#include<assert.h>

#include<cmath>
#include<iostream>
#include<fstream>

#include<string>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>

using namespace std;


#define N 100010



int first[100100];
int tree[100100];
int last5[100100];
int next[100100];
int ans[100100];


map<int,int> mp;
map<int,int> mp1;
vector<pair<int,int> > adj[100100];
int a[100100];


void ini()
{
    int i;
    mp.clear();
    mp1.clear();
    for(i=0;i<100010;i++)
    {
        next[i]=0;
        last5[i]=0;
        adj[i].clear();
        tree[i]=0;
    }
}





int get(int idx)
{
    int ret=0;
    int i;
    for(i=idx;i;i-=(i&-i))
        ret+=tree[i];
    return ret;
}


void update(int idx,int val)
{
    int i;
    for(i=idx;i<N;i+=(i&-i))
        tree[i]+=val;
}



/*
void brute()
{
    int Q,i,l,k;
     scanf("%d",&Q);


    for(i=1;i<=Q;i++)
    {
        scanf("%d %d",&k,&l);
        printf("%d\n",l-k+1);
    }
}*/

int main()
{
    int i,T,n,j,x,y,now,Q,l,k,ai,tans,lef,rig;

   // freopen("in.txt","r",stdin);
//	freopen("out.txt","w",stdout);

	

//		ini();
	

		scanf("%d %d",&n,&k);
        int id=1;


        for(i=1;i<=n;i++)
        {
            scanf("%d",&x);
            if(!mp[x]) mp[x]=id++;
            a[i]=mp[x];
        }

        /*if(k==0)
        {
            brute();
            return 0;
        }*/

		
		k++;

        scanf("%d",&Q);


        for(i=1;i<=Q;i++)
        {
            scanf("%d %d",&lef,&rig);
            lef++;
            rig++;
            adj[rig].push_back(make_pair(lef,i));
        }



        for(i=1;i<=n;i++)
        {
            now=a[i];
            if(mp1[now])
            {
                next[mp1[now]]=i;
            }
            else
            {
                first[now]=i;
            }
            mp1[now]=i;

            if(last5[now]<=0) last5[now]--;


            if(last5[now]== (-1*k) )
            {
                last5[now]=first[now];
                update(last5[now],1);
            }
            else if(last5[now]>0)
            {
                update(last5[now],-1);
                last5[now]=next[last5[now]];
                update(last5[now],1);
            }


            for(j=0;j<adj[i].size();j++)
            {
                ai=adj[i][j].second;
                tans=get(i)-get(adj[i][j].first-1);
                ans[ai]=tans;
            }

        }




        for(i=1;i<=Q;i++)
        printf("%d\n",ans[i]);


	
	return 0;
}

