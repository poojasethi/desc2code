#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <string>
#include <vector>
#include <queue>
#include <map>
#include <iostream>
#include <algorithm>

#define FOR(i,a,b)  for(int i=a;i<=b;i++)
#define MAX(a,b)    a>b?a:b
#define MIN(a,b)    a<b?a:b

using namespace std;

typedef long long ll;

int n,m,k;
vector<int> xw[100010],cx[100010];
struct Line{
    int a,b,id;
    int val;
};
struct Line line[100010];
int num[100010],hash[100010],p,isgo[100010],key[100010];

int ls[300010],rs[300010],cv[300010];
int s[300010];

void build(int u,int a,int b){
    ls[u] = a, rs[u] = b; //cv[u] = 0;
    if(b > a){
        int mid = (a + b) / 2;
        build(2*u,a,mid);
        build(2*u+1,mid+1,b);
        cv[u] = 0;
    }else{
        cv[u] = key[a];
    }
}
void add(int u,int a,int b,int c){
    if(ls[u] == a && rs[u] == b){
        cv[u] += c;
        return ;
    }
    int mid = (ls[u] + rs[u]) / 2;
    if(b <= mid)    add(2*u,a,b,c);
    else if(a > mid)    add(2*u+1,a,b,c);
    else{
        add(2*u,a,mid,c);
        add(2*u+1,mid+1,b,c);
    }
}
int find(int u,int a){
    if(ls[u] == rs[u])  return cv[u];
    int mid = (ls[u] + rs[u]) / 2;
    if(a <= mid)    return cv[u] + find(2*u,a);
    else            return cv[u] + find(2*u+1,a);
}
int getid(int key){
    int l = 1, r = p;
    while(l <= r){
        int mid = (l + r) / 2;
        if(hash[mid] == key)    return mid;
        else if(hash[mid] > key)    r = mid - 1;
        else                        l = mid + 1;
    }
}
int main(){
    scanf("%d %d",&n,&k);
    k++;
    FOR(i,1,n){
        scanf("%d",&num[i]);
        hash[i] = num[i];
        cx[i].clear(), xw[i].clear();
        isgo[i] = 0;
    }

    sort(hash + 1, hash + 1 + n);
    p = 1;
    FOR(i,2,n)if(hash[i] != hash[i-1])  hash[++p] = hash[i];
    FOR(i,1,n)  num[i] = getid(num[i]);
    FOR(i,1,n)  cx[num[i]].push_back(i);
    /*
    FOR(i,1,p){
        printf("%d: %d -> ",i,cx[i].size());
        FOR(j,0,cx[i].size()-1)
            printf(" %d", cx[i][j]);
        printf("\n");
    }*/
    //FOR(i,1,n)  printf("%d: %d\n",i,num[i]);
    scanf("%d",&m);

    FOR(i,1,m){
        scanf("%d %d",&line[i].a,&line[i].b);
        line[i].a ++, line[i].b++;
        xw[line[i].a].push_back(i);
        line[i].id = i;
    }
    /*
    for(int i=1;i<=n;i++){
        printf("%d: %d %d-> ",i,xw[i].size(),xw[i].size()-1);
        for(int j= 0; j < xw[i].size(); j++){
            printf("(%d %d)",i,j);
            printf(" %d", xw[i][j]);
        }
        printf("\n");
    }
    */
    for(int i=1;i<=n;i++)isgo[i] = 0;
    for(int i=1;i<=n;i++){
        isgo[num[i]]++;
        if(isgo[num[i]] == k)
            key[i] = key[i-1] + 1;
        else
            key[i] = key[i-1];
    }
    /*
    for(int i=1;i<=n;i++)
        printf("%d ",key[i]);
    printf("\n");
    */
    build(1,1,n);
    for(int i=1;i<=n;i++)   isgo[i] = 0;
    FOR(i,1,n){
        //printf("#  %d\n",i);
        isgo[num[i]]++;

        for(int j=0;j<xw[i].size();j++){
            int id = xw[i][j];
            line[id].val = find(1,line[id].b);
        }
        //printf("1111111")
        //printf("@@ %d %d\n",isgo[num[i]] + k,cx[num[i]].size());
        if(isgo[num[i]] + k - 1 <= cx[num[i]].size()){
            //printf("234\n");
            int u = cx[num[i]][isgo[num[i]] + k - 2];
            int v;
            if(isgo[num[i]] + k <= cx[num[i]].size())
                v = cx[num[i]][isgo[num[i]] + k - 1];
            else
                v = n + 1;
            //printf("** %d %d\n",u,v);
            add(1,u,v-1,-1);
        }
        /*
        for(int j=1;j<=n;j++)
            printf("%d ",find(1,j));
        printf("\n");
        */
    }
    for(int i=1;i<=m;i++)
        printf("%d\n",line[i].val);
    return 0;
}
