#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef pair<int,int> ii; 
typedef long long ll;
#define sz(a) int((a).size()) 
#define pb push_back 
#define all(c) (c).begin(),(c).end() 
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
#define present(c,x) ((c).find(x) != (c).end()) 
#define cpresent(c,x) (find(all(c),x) != (c).end()) 
#define mp make_pair
#define go(i,n) for(int i=0;i<n;i++)
#define go3(i,j,n) for(int i=j;i<n;i++)

int a[100005];
int t[100005];
int next[100005];
int last[100005];
int first[100005];
int oc[100005];


int n,m;
int q;

void init(){
 go(i,n) t[i]=0;
}

int sum(int r){
  int result=0;
  for(;r>=0;r=(r&(r+1))-1)
   result+=t[r];
  return result;
}

void inc(int i,int delta){
  for(;i<n;i=(i|(i+1)))
  t[i]+=delta;
}


int sum(int l,int r){
 return sum(r)-sum(l-1);
}


struct query{
 int l, r;
 int id;
 int ans;
 query(){l=0; r=0;}
 query(int x,int y){
  l=x;
  r=y;
 }
};

query Q[100005];

bool les(query x, query y){
  if(x.r<y.r) return true;
  if(x.r>y.r) return false;
  return x.l<y.l;
}

bool les2(query x,query y){
  return x.id<y.id;
}

map<int,int> memo;

void oku(){

 scanf("%d%d",&n,&m);
 int cnt=0;


 go(i,n) 
 {
   scanf("%d",&a[i]);
   if(!memo.count(a[i])) memo[a[i]]=cnt++;
   a[i]=memo[a[i]];
 }


 memset(next,-1,sizeof next);
 memset(last,-1,sizeof last);
 memset(oc,0,sizeof oc);

 for(int i=n-1;i>=0;i--){
   next[i]=last[a[i]];
   last[a[i]]=i;
 }

 memset(last,-1,sizeof last);

 init();
 scanf("%d",&q);

 go(i,q) 
  {
   scanf("%d%d",&Q[i].l,&Q[i].r);
   Q[i].id=i;
  }

 sort(Q,Q+q,les);

 int id1=0;
 int id2=0;
 memset(first,-1,sizeof first);

 while(id1<n && id2<q){

 //printf("id1=%d\n",id1);
  oc[a[id1]]++;
  if(first[a[id1]]==-1)  first[a[id1]]=id1;
  if(oc[a[id1]] > m) 
   {
    if(oc[a[id1]]>=m+2 && next[first[a[id1]]]!=-1)
     {
      inc(first[a[id1]],-1); 
      //printf(" inc(%d,-1)\n",first[a[id1]]);
      first[a[id1]] = next[first[a[id1]]];
     }
    //printf(" inc(%d,%d)\n",first[a[id1]],1);
    inc(first[a[id1]],1);
   }

  //printf("id2=%d\n",id2);

  while(id1==Q[id2].r && id2<q)  
  {
   Q[id2].ans=sum(Q[id2].l,Q[id2].r);
   //printf("query: id2=%d (%d %d) ret=%d \n",id2,Q[id2].l,Q[id2].r,Q[id2].ans);
   id2++;
  }
  id1++;
 }

 sort(Q,Q+q,les2);
 go(i,q)
 printf("%d\n",Q[i].ans);

}


int main(){
//freopen("input.txt","r",stdin);

oku();

return 0;}