#include <bits/stdc++.h>

#define rep(i,n) for(i=1;i<=n;i++)
#define Rep(i,n) for(i=0;i<n;i++)
#define For(i,a,b) for(i=a;i<=b;i++)

#define pb(x) push_back(x)
#define sz(x) x.size()

#define mem(ara,val) memset(ara,val,sizeof(ara))
#define eps 1e-9

#define si(x) scanf("%d",&x)
#define sii(x,y) scanf("%d %d",&x,&y)
#define siii(x,y,z) scanf("%d %d %d",&x,&y,&z)
#define sl(x) scanf("%lld",&x)
#define sll(x,y) scanf("%lld %lld",&x,&y)
#define slll(x,y,z) scanf("%lld %lld %lld",&x,&y,&z)
#define ss(ch) scanf("%s",ch)
#define pi(x) printf("%d",x)
#define pii(x,y) printf("%d %d",x,y)
#define piii(x,y,z) printf("%d %d %d",x,y,z)
#define pl(x) printf("%lld",x)
#define pll(x,y) printf("%lld %lld",x,y)
#define plll(x,y,z) printf("%lld %lld %lld",x,y,z)
#define ps(ch) printf("%s",ch)
#define Afridi 0
#define NL printf("\n")
#define debug(x) printf("wow  %d !!\n",x)
#define Max 100005
#define INF INT_MAX

typedef long long LL;
typedef unsigned long long ULL;

using namespace std;

int tree[Max],ans[Max];
map <int,int> mp;
vector <int> v[Max];
int idx,n,k;

struct node
{
    int val,x,y,pos;
    bool operator < (const node& p) const
    {
        if(y == p.y)
        {
            return val > p.val;
        }
        else return y < p.y;
    }
};
vector <node> q;

int read(int ind)
{
    int sum = 0;
    while(ind > 0)
    {
        sum += tree[ind];
        ind -= (ind & -ind);
    }
    return sum;
}

void update(int ind,int val)
{
    while(ind <= n)
    {
        tree[ind] += val;
        ind += (ind & -ind);
    }
}

void goclear()
{
    int i;
    rep(i,idx)
    {
        v[i].clear();
        tree[i] = 0;
    }
    mp.clear();
    idx = 0;
    q.clear();
}

int main()
{
    int i,j,x,y,qr;
    sii(n,k);
    k++;
    rep(i,n)
    {
        si(x);
        node tmp;
        tmp.val = x;
        tmp.x = i;
        tmp.y = i;
        q.pb(tmp);
    }
    si(qr);
    rep(i,qr)
    {
        sii(x,y);
        x++;y++;
        node tmp;
        tmp.x = x;
        tmp.y = y;
        tmp.val = -1;
        tmp.pos = i;
        q.pb(tmp);
    }
    sort(q.begin(),q.end());
    int len = sz(q);
    goclear();
    Rep(i,len)
    {
        node my = q[i];
        if(my.val == -1)
        {
            int d = read(my.y) - read(my.x - 1);
            ans[my.pos] = d;
        }
        else
        {
            if(mp.find( my.val ) == mp.end())mp[ my.val ] = ++idx;
            int val = mp[my.val];
            v[val].pb(my.y);
            //printf("%d(%d) push %d\n",my.val,val,my.y);
            int s = sz(v[val]);
            if( s > k)
            {
                update(v[val][ s - k - 1],-1);
                update(v[val][ s - k ],1);
                //printf("making %d and dis %d\n",v[val][s-k],v[val][s-k-1]);
            }
            else if(s == k)
            {
                update(v[val][s - k],1);
                //printf("making %d\n",v[val][s-k]);
            }
        }
    }
    rep(i,qr)
    {
        pi(ans[i]);NL;
    }
    return 0;
}

