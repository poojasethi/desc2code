#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <utility>
#include <algorithm>
#include <map>
#include <vector>

using namespace std;

int N, K, Q, village[111111], prev[111111], onum[111111], tree[111111], answer[111111];
pair<int, pair<int, int> > query[111111];
pair<int, int> prevsort[111111];
map<int, int> m;
vector<int> order[111111];

void update(int pos, int val)
{
    while(pos <= N)
    {
        tree[pos] += val;
        pos += pos & -pos;
    }
}

int get(int pos)
{
    int sum = 0;
    while(pos > 0)
    {
        sum += tree[pos];
        pos -= pos & -pos;
    }
    return sum;
}

int main()
{
    //freopen("kchips.in", "r", stdin);

    scanf("%d %d", &N, &K);
    for(int i = 1; i <= N; i++)
        scanf("%d", &village[i]);

    scanf("%d", &Q);
    for(int i = 0; i < Q; i++)
    {
        int a, b;
        scanf("%d %d", &a, &b);
        query[i] = make_pair(a + 1, make_pair(b + 1, i));
    }
    sort(query, query + Q);

    // relabel villages
    int k = 0;
    for(int i = 1; i <= N; i++)
    {
        if(m.find(village[i]) == m.end())
            m[village[i]] = k++;
        village[i] = m[village[i]];
    }

    // preprocess
    for(int i = 1; i <= N; i++)
    {
        order[village[i]].push_back(i);
        onum[i] = order[village[i]].size() - 1;
        if(order[village[i]].size() > K)
            prev[i] = order[village[i]][order[village[i]].size() - K - 1];
        else
            prev[i] = -1;
        prevsort[i] = make_pair(prev[i], i);
    }
    sort(prevsort + 1, prevsort + N + 1);

    // set up binary indexed tree
    for(int i = 1; i <= N; i++)
        if(onum[i] == 0)
            update(i, 1);

    // solve!
    int left = 1;
    for(int i = 0; i < Q; i++)
    {
        while(left <= N && prevsort[left].first < query[i].first)
        {
            int ind = prevsort[left++].second;
            update(ind, -1);
            if(onum[ind] < order[village[ind]].size() - 1)
                update(order[village[ind]][onum[ind] + 1], 1);
        }
        answer[query[i].second.second] = get(query[i].second.first) - get(query[i].first - 1);
        //cout << get(query[i].second.first) << " " << get(query[i].first - 1) << endl;
    }

    for(int i = 0; i < Q; i++)
        printf("%d\n", answer[i]);
}