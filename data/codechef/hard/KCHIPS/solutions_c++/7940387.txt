#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <climits>
#include <numeric>
#include <vector>
#include <cmath>
using namespace std;
#define ll long long
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define rep(i,n) for(int i=0;i<n;i++)
#define all(a)  a.begin(),a.end()
#define ESP (1e-9)
#define BUFSIZE (10000)
char inputbuffer[BUFSIZE];
char *ioptr=inputbuffer+BUFSIZE,*ioend=inputbuffer+BUFSIZE;
int input_eof=0;
#define getchar() ({if (ioptr >= ioend) init_input(); *ioptr++;})
#define eof() (ioptr>=ioend && input_eof)
#define eoln() ({if(ioptr >= ioend) init_input(); *ioptr == '\n';})
void init_input(){
	if (input_eof) return;
	int existing = BUFSIZE - (ioend - inputbuffer);
	memcpy(inputbuffer, ioend, existing);
	int wanted = ioend - inputbuffer;
	int count=fread(inputbuffer + existing, 1, wanted, stdin);
	if (count < wanted)input_eof = 1;
	ioend = inputbuffer + BUFSIZE - (wanted - count);
	while (*--ioend > ' ');
	ioend++;
	ioptr=inputbuffer;
}
inline void non_whitespace(){
	for(;;){
		if(ioptr>=ioend)init_input();
		if(*ioptr>' ')return;
		ioptr++;
	}
}
inline int getint(){
	non_whitespace();
	int neg=0;
	if(*ioptr=='-'){
		ioptr++;
		neg=1;
	}
	int n=0;
	while(*ioptr>' ')
		n=(n<<3)+(n<<1)+*ioptr++-'0';
	ioptr++;
	if(neg)
		n=-n;
	return n;
}
#define N 100010
#define inf 1000000007
pair<int,pair<int,int> >q[N];
pair<int,int>s[N];
vector<int>inv[N];
int sz[N],ans[N],tr[N],v[N],n;
void update(int x,int v)
{
 while(x<=n)
 {
  tr[x]+=v;x+=x&-x;
 }
}
int query(int x)
{
 int ans=0;
 while(x>0)
 {
  ans+=tr[x];x-=x&-x;
 }
 return ans;
}
int main()
{
	//freopen("in.txt","r",stdin);
	int T,i,j,m,l,k,x,y,K,r;
	while(~scanf("%d%d",&n,&K))
	{K++;
	 memset(tr,0,sizeof(tr));
	 for(i=0;i<n;i++)
	 {
	  j=getint();
	  s[i]=mp(j,i+1);
	 }
	 sort(s,s+n);k=0;
	 for(i=0;i<n;i++)
	 {
	  if(i&&s[i].fi!=s[i-1].fi)k++;
	  v[s[i].se]=k;
	 }
	 r=getint();
	 for(i=0;i<r;i++)
	 {
	  x=getint(),y=getint();
	  q[i]=mp(y+1,mp(x+1,i));
	 }
	 sort(q,q+r);int tot=0;j=0;
	 for(i=1;i<=n;i++)
	 {
	  	k=v[i];
	  	int p=sz[k];
	  	if(p>=K)update(inv[k][p-K],-1);
	  	inv[k].pb(i);
	  	p=++sz[k];
	  	if(p==K)tot++;
	  	if(p>=K)update(inv[k][p-K],1);
	  	while(j<r&&q[j].fi==i)
	  	ans[q[j].se.se]=tot-query(q[j++].se.fi-1);
	 }
	 for(i=0;i<r;i++)
	 printf("%d\n",ans[i]);
	}
	return 0;
}
 