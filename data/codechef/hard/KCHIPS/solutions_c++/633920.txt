#include <cmath>
#include <map>
#include <iostream>
#include <algorithm>
using namespace std;

struct query{
	int l, r, id, ans;
	bool operator<(const query &sec) const {
		return r < sec.r;
	}
} arr[100005];

map<int, int> M;
bool was[100005];
int prev[100005];
int prevK[100005];

int sum[100005];

int get_prev(int x){
	return x & (x-1);
}

int next(int x){
	return (x<<1) - get_prev(x);
}

void modify(int x, int val){
	while (x < 100005){
		sum[x] += val;
		x = next(x);
	}
}

int find_sum(int x){
	int ret = 0;
	while (x){
		ret += sum[x];
		x = get_prev(x);
	}
	return ret;
}

int find_sum(int l, int r){
	return find_sum(r) - find_sum(l-1);
}

bool cmp(const query &f, const query &s){
	return f.id < s.id;
}

int main(){
	int n, k;
	scanf("%d%d", &n, &k);
	for (int i=0; i<n; i++){
		int cur;
		scanf("%d", &cur);
		prevK[i] = -1;
		if (M.find(cur) != M.end()){
			prev[i] = M[cur];
		} else {
			prev[i] = -1;
		}
		M[cur] = i;
	}
	for (int i=n-1; i>-1; i--){
		if (!was[i]){
			int cur = i, ck = i;
			for (int j=0; j<k && ck != -1; j++){
				ck = prev[ck];
			}
			while (ck != -1){
				was[cur] = true;
				prevK[cur] = ck;
				cur = prev[cur];
				ck = prev[ck];
			}
			while (cur != -1){
				was[cur] = true;
				cur = prev[cur];
			}
		}
	}
	int m;
	scanf("%d", &m);
	for (int i=0; i<m; i++){
		scanf("%d%d", &arr[i].l, &arr[i].r);
		arr[i].id = i;
	}
	sort(arr, arr+m);
	int cur = 0;
	for (int i=0; i<n; i++){
		if (prevK[i] != -1){
			if (prev[prevK[i]] != -1){
				modify(prev[prevK[i]]+1, -1);
			}
			modify(prevK[i]+1, 1);
		}
		while (cur < m && arr[cur].r == i){
			arr[cur].ans = find_sum(arr[cur].l+1, arr[cur].r+1);
			cur++;
		}
	}
	sort(arr, arr+m, cmp);
	for (int i=0; i<m; i++){
		printf("%d\n", arr[i].ans);
	}
	return 0;
}