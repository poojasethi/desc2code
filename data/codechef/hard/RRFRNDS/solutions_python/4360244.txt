def friends():
	num_users = int(raw_input())

	friendship = []
	num = []
	for i in xrange(num_users):
		# Take input as a list of strings and interpret them
		# in binary
		friendship.append(raw_input().strip())
		num.append(int(friendship[i], 2))

	sugg = 0
	for i in xrange(num_users):
		for j in xrange(i+1, num_users):
			if friendship[i][j] == '0':
				# If there doesn't exist a path already
				# between i and j, check if they have a
				# common ancestor.

				# If value is 0, they don't have a common
				# ancestor, but if they have one, add 2 
				# suggestions, from i to j and j to i.
				if (num[i] & num[j]):
					sugg += 2

	print sugg


if __name__ == "__main__":
	friends()