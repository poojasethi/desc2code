#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

int N;
char s[2001];
struct P
{
  short i;
  short j;
};
P p[1999000]; // store pairs that aren't connected
int pairCount = 0;

long long M[2000][32]; // store connection bitmask

int main()
{
  int N;
  scanf("%d\n", &N);

  memset(M, 0, sizeof(M));

  const long long one = 1;
  int maskCount = N / 64;
  if(maskCount * 64 < N)
    ++maskCount;

  for(int i = 0; i < N; ++i)
  {
    char *pA = s;
    gets(pA);

    int bitIndex = 0;
    long long *pM = M[i];
    for(int j = 0; j < N; ++j, ++bitIndex)
    {
      if(bitIndex == 64)
      {
        bitIndex = 0;
        ++pM;
      }

      if(i == j)
        continue;

      if(pA[j] == '1') // connected
      {
        *pM |= one << bitIndex;
      }
      else if(i < j) // not connected
      {
        p[pairCount].i = (short)i;
        p[pairCount].j = (short)j;
        ++pairCount;
      }
    }
  }

  int res = 0;
  for(int i = 0; i < pairCount; ++i)
  {
    // Find such k that is connected to i and j!
    long long *pMi = M[p[i].i];
    long long *pMj = M[p[i].j];
    for(int k = 0; k < maskCount; ++k)
    {
      if((pMi[k] & pMj[k]) != 0)
      {
        ++res;
        break;
      }
    }
  }

  printf("%d\n", res << 1);

  return 0;
}
