#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);
using namespace std;
typedef long long int LL;

int N ,  curr;
LL bwise[2004][1004];
bool adj[2004][2004];

char grid[2004][2004];

int main()
{
si(N);
getchar();
for(int i=0;i<N;i++)
	ss(grid[i]);

memset(bwise , 0 , sizeof(bwise));
memset(adj , false , sizeof(adj));

for(int i=0;i<N;i++)
{
	for(int j=0;j<N;j++)
	{
		if(grid[i][j] == '1')
			bwise[i][(j/32)] = ( bwise[i][(j/32)] | ( 1 << (31 - j%32) ) );
	}
}

/*
for(int i=0;i<N;i++)
{
	for(int j=0;j<=(N/32);j++)
		cout << bwise[i][j] << " ";
	cout << endl;
}
*/
LL answer = 0 , flag = 0;

for(int i=0;i<N;i++)
{
	for(int j=i+1;j<N;j++)
	{		
		//if i and j are not friends and have a common friend then answer++;
		//for(int k=0;k<N;k++) if(adj[i][k] == true and adj[j][k] == true) then answer++
		if(grid[i][j] == '0')
		{
			flag = 0;
			for(int k=0;k<N;k = (k + 32))
			{
				curr = (k/32);
				if(((bwise[i][curr])&(bwise[j][curr]))!=0)
				{
						flag = 2;
						// cout << i << "$" << j << endl;
				}
			}
			answer = answer + flag;
		}
	}
}


printf("%lld\n", answer);
return 0;
}







