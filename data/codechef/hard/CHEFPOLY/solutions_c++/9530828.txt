#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <iomanip>
#include <string>

using namespace std;

#define lli long long int

double triarea(pair<int,int> a,pair<int,int> b,pair<int,int> c){
	return abs((a.first*b.second+b.first*c.second+c.first*a.second-a.first*c.second-b.first*a.second -c.first*b.second)/2.0);
}
inline lli cross(pair<int,int> a,pair<int,int> b){
	if((double)a.second/a.first > (double)b.second/b.first)
		return 1;
	return -1;
}
int main() {
	ios::sync_with_stdio(false);
	int n,m;
	cin>>n>>m;
	vector<pair<int,int> > red(n+1),black(m+1);
	for(int i=1;i<=n;i++){
		cin>>red[i].first>>red[i].second;
		red[i].first+=1e4+1;
		red[i].second+=1e4+1;
	}
	for(int i=1;i<=m;i++){
		cin>>black[i].first>>black[i].second;
		black[i].first+=1e4+1;
		black[i].second+=1e4+1;
	}
	int arr[n+1][n+1],count;
	double a1,a2,a3,tl,x;
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			count=0;
			tl=triarea(make_pair(0,0),red[i],red[j]);
			//cout<<tl;
			for(int k=1;k<=m;k++){
				a1=triarea(make_pair(0,0),red[j],black[k]);
				a2=triarea(red[j],black[k],red[i]);
				a3=triarea(make_pair(0,0),red[i],black[k]);
				a1=a1+a2+a3;
				if(tl==a1){
					count++;
				}
			}
			arr[i][j]=count;
			//cout<<count;
		}
		//cout<<"\n";
	}
	int q;
	cin>>q;
	while(q--){
		int k,ans=0;
		cin>>k;
		lli poly[k];
		for(int i=0;i<k;i++){
			cin>>poly[i];
		}
		for(int i=0;i<k;i++){
			lli a = poly[i], b = poly[(i+1)%k];
			if(cross(red[a],red[b]) > 0)
				ans += arr[a][b];
			else
				ans -= arr[a][b];
		}	
		cout<<ans<<"\n";
	}
	//cout<<"\n"<<triarea(make_pair(1,2),make_pair(4,3),make_pair(2,5));
	return 0;
}