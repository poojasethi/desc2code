#include<map>
#include<ctime>
#include<cmath>
#include<queue>
#include<vector>
#include<cstdio>
#include<string>
#include<bitset>
#include<cassert>
#include<cstring>
#include<numeric>
#include<sstream>
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long LL;
#define MM(a, x) memset(a, x, sizeof(a))
#define P(x) cout << #x << " = " << x << endl;

vector<int> dL, dR;
int n, r;

void dfs(int depth, int n4, int n7, bool tL, bool tR) {
	if(depth == n) {
		int t = n4 * n7;
		r = max(r, t);
		return;
	}
	if(!tL && !tR) {
		int remain = n - depth;
		for(int i = 0; i <= remain; i++) {
			int t = (n4 + i) * (n7 + remain - i);
			r = max(r, t);
		}
		return;
	}
	int L = 0, R = 9;
	if(tL == 1) L = dL[depth];
	if(tR == 1) R = dR[depth];
	for(int i = L; i <= R; i++) {
		int a4 = i == 4;
		int a7 = i == 7;
		dfs(depth + 1, n4 + a4, n7 + a7, tL && i == dL[depth], tR && i == dR[depth]);
	}
}

int main() {
	LL T, L, R;
	cin >> T;
	while(T--) {
		r = 0;
		cin >> L >> R;
		dL.clear(), dR.clear();
		while(L) dL.push_back(L % 10), L /= 10;
		while(R) dR.push_back(R % 10), R /= 10;
		n = max(dL.size(), dR.size()) + 1;
		dL.resize(n, 0);
		dR.resize(n, 0);
		reverse(dL.begin(), dL.end());
		reverse(dR.begin(), dR.end());
		dfs(0, 0, 0, 1, 1);
		cout << r << endl;
	}

#ifdef LOCAL
	system("pause");
#endif
	return 0;
}