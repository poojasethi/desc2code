#include<iostream>
using namespace std;

int my_max(int a, int b) {
	return a>b?a:b;
}

int calc_max_product(int n4, int n7, int digits) {
	if(digits>0) {
		if(n7>n4) {
			int temp=n7;
			n7=n4;
			n4=temp;
		}

		if(n7==n4) {
			n4+=(digits/2);
			n7+=(digits-digits/2);
			digits=0;
		}

		if(n4>n7) {
			if(digits>(n4-n7)) {
				digits-=(n4-n7);
				n7=n4;
				n7+=(digits/2);
				n4+=(digits-digits/2);
				digits=0;
			} else {
				n7+=digits;
				digits=0;
			}
		}
	}

	return n4*n7;
}

int calc_max_product_all(int l, int r, int n4, int n7, int digits) {
	if(l>r) {
		return 0;
	}

	int output=calc_max_product(n4, n7, digits);

	if(l<=4 && 4<=r) {
		output=my_max(output, calc_max_product(n4+1, n7, digits));
	}

	if(l<=7 && 7<=r) {
		output=my_max(output, calc_max_product(n4, n7+1, digits));
	}

	return output;
}

int main() {
	int T;
	cin >> T;
	while(T) {
		long long L, R;
		cin >> L >> R;
		int aL[19]={0};
		int aR[19]={0};
		int aL_ptr=0, aR_ptr=0;
		while(L>0) {
			aL[aL_ptr++]=L%10;
			L/=10;
		}
		while(R>0) {
			aR[aR_ptr++]=R%10;
			R/=10;
		}

		int digits=my_max(aL_ptr, aR_ptr);

		int i, n4=0, n7=0;
		for(i=digits-1; i>=0 && aL[i]==aR[i]; i--) {
			n4+=(aL[i]==4);
			n7+=(aL[i]==7);
		}

		int j=i;
		int output=0;
		output=my_max(output, calc_max_product_all(aL[j]+1, aR[j]-1, n4, n7, j));

		int c4=n4, c7=n7;
		while(true) {
			c4+=(aL[j]==4);
			c7+=(aL[j]==7);
			if(--j<0) {
				break;
			}
			output=my_max(output, calc_max_product_all(aL[j]+1, 9, c4, c7, j));
		}
		output=my_max(output, c4*c7);

		j=i;
		c4=n4;
		c7=n7;
		while(true) {
			c4+=(aR[j]==4);
			c7+=(aR[j]==7);
			if(--j<0) {
				break;
			}
			output=my_max(output, calc_max_product_all(0, aR[j]-1, c4, c7, j));
		}
		output=my_max(output, c4*c7);
		
		cout << output << endl;
		
		T--;
	}
	return 0;
}
