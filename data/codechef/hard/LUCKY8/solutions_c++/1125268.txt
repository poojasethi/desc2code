//Data Structure includes
#include<vector>
#include<stack>
#include<set>
#include<bitset>
#include<map>
#include<queue>
#include<deque>
#include<string>


//Other Includes
#include<iostream>
#include<fstream>
#include<algorithm>
#include<cstring>
#include<cassert>
#include<cstdlib>
#include<cstdio>
#include<cmath>

using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;i++)
#define REP(i,n) FOR(i,0,n)
#define pb push_back
#define mp make_pair
#define s(n) scanf("%d",&n)
#define sl(n) scanf("%lld",&n)
#define sf(n) scanf("%lf",&n)
#define ss(n) scanf("%s",n)
#define fill(a,v) memset(a, v, sizeof a)
#define sz(a) int((a).size())
#define INF (int)1e9
#define EPS 1e-9
#define bitcount __builtin_popcount
#define all(c) (c).begin(), (c).end()
#define maX(a,b) (a>b?a:b)
#define miN(a,b) (a<b?a:b)
#define DREP(a) sort(all(a)); a.erase(unique(all(a)),a.end())
#define INDEX(arr,ind) lower_bound(all(arr),ind)-arr.begin())
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define present(c,x) ((c).find(x) != (c).end())
#define cpresent(c,x) (find(all(c),x) != (c).end())

typedef vector<int> VI;
typedef vector<vector<int> > VVI;
typedef long long LL;
typedef vector<long long > VLL;
typedef pair<int, int > PII;
typedef vector< PII > VPII;
/*Main Code*/
#define maxN  20

int F(int n4, int n7, int i)
{
	int k=(n7-n4+i)/2;
	if(0<=k && k<=i)return (n4+k)*(n7+i-k);
	++k;
	if(0<=k && k<=i)return (n4+k)*(n7+i-k);
	return maX((n4+i)*n7, n4*(n7+i));
}

int solve(int L, int R, int n4, int n7, int i)
{
	if(L>R)return 0;
	else
	{
		int ans = F(n4,n7,i);
		if(L<=4 && R>=4)ans = maX(ans, F(n4+1,n7,i));
		if(L<=7 && R>=7)ans = maX(ans, F(n4,n7+1,i));
		return ans;
	}
}

// driver

int main()
{
	int t;
	for(s(t);t--;)
	{
		LL l,r;
		int n4,n7;
		n4=n7=0;
		//cin>>l>>r;
		sl(l);sl(r);
		int aL[maxN]={0},aR[maxN]={0};
		LL L=l,R=r;
		int ln,rn;
		ln=rn=0;
		while(L>0)
		{
			aL[ln++]=L%10;
			L/=10;
		}
		while(R>0)
		{
			aR[rn++]=R%10;
			R/=10;
		}
		int n=maX(ln,rn);
		int i=n-1;
		while(i>=0 && aL[i]==aR[i])
		{
			if(aL[i]==4)++n4;
			if(aL[i]==7)++n7;
			--i;
		}
		int ret=0;
		if(i<0)ret=n4*n7;
		else
		{
			ret=maX(ret , solve(aL[i]+1,aR[i]-1,n4,n7,i));
			int j=i;
			int c4=n4,c7=n7;
			while(1)
			{
				if(aL[j]==4)++c4;
				if(aL[j]==7)++c7;
				if(--j<0)break;
				ret=maX(ret,solve(aL[j]+1,9,c4,c7,j));
			}
			ret = maX(ret,c4*c7);
			j=i;
			c4=n4;c7=n7;
			while(1)
			{
				if(aR[j]==4)++c4;
				if(aR[j]==7)++c7;
				if(--j<0)break;
				ret=maX(ret,solve(0,aR[j]-1,c4,c7,j));
			}
			ret = maX(ret,c4*c7);
		}
		printf("%d\n",ret);
	}
	return 0;
}
