#include <cstdio>
#define max(a,b) (a>b?a:b)

int F(int L, int R, int n4, int n7, int n);
int F(int n4, int n7, int n);

int main()
{
    int t;
    scanf("%d", &t);
    while(t--) {
        int aL[20] = {}, aR[20] = {};
        int nl, n;
        nl = n = 0;
        long long L, R;
        scanf("%lld %lld", &L, &R);
        
        while(L) {
            aL[nl++] = L%10;
            L/=10;
        }
        while(R) {
            aR[n++] = R%10;
            R/=10;
        }

        int n4, n7, ans, i;
        n4 = n7 = ans = 0;
        i = n-1;

        while(i>=0 && aL[i]==aR[i]) {
            n4 += (aL[i] == 4);
            n7 += (aL[i] == 7);
            i--;
        }

        if(i<0) {
            printf("%d\n", n4*n7);
            continue;
        }

        //case 1 L[i] < X[i] < R[i]
        ans = max(ans, F(aL[i]+1, aR[i]-1, n4, n7, i));

        //case 2: L[i] == X[i]
        int j=i, c4=n4, c7=n7;
        while(j>=0) {
            c4 += (aL[j] == 4);
            c7 += (aL[j] == 7);
            if(--j >= 0) ans = max(ans, F(aL[j]+1, 9, c4, c7, j));
        }
        ans = max(ans, c4*c7);

        //case 3: X[i] == R[i]
        j=i;c4=n4;c7=n7;
        while(j>=0) {
            c4 += (aR[j] == 4);
            c7 += (aR[j] == 7);
            if(--j >= 0) ans = max(ans, F(0, aR[j]-1, c4, c7, j));
        }
        ans = max(ans, c4*c7);

        printf("%d\n", ans);
    }
}

int F(int L, int R, int n4, int n7, int n) 
{
    if(L>R) return 0;
    int ans=0;
    ans = max(ans, F(n4, n7, n));
    if(L<=4 && 4<=R) ans=max(ans, F(n4+1, n7, n));
    if(L<=7 && 7<=R) ans=max(ans, F(n4, n7+1, n));
    return ans;
}

int F(int n4, int n7, int n)
{
    int k = (n7 + n - n4)/2;
    if(0<=k && k<=n) return (n4+k)*(n7+n-k);
    k++;
    if(0<=k && k<=n) return (n4+k)*(n7+n-k);
    return max(n4*(n7+n), (n4+n)*n7);
}
