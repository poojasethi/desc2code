#include<iostream>
#include<stdio.h>
#include<string.h>
using namespace std;
char left1[1000],right1[1000];    
int len_l,len_r;
int get_max(int count_four,int count_seven,int difference,int answer){
	if(count_four>count_seven){
		if(count_four-count_seven>=difference){
			count_seven+=difference;				
			difference=0;
		}else{
			difference=difference-(count_four-count_seven);
			count_seven=count_four;
		}
	}else if(count_four<count_seven){
		if(count_seven-count_four>=difference){
			count_four+=difference;				  
			difference=0;
		}else{
			difference=difference-(count_seven-count_four);
			count_four=count_seven;
		}
	}
	if(difference%2==0){
		count_four+=difference/2;	   
		count_seven+=difference/2;
	}else{
		count_four+=difference/2;	   
		count_seven+=difference/2+1;
	}
	if(answer<count_four*count_seven){
		answer=count_four*count_seven; 
	}
	return answer;
}
int max_answer_first(int position,int count_four,int count_seven,int answer,int length){
	int num;
	num=left1[position]-48;  
	if(position>=length){
		answer=get_max(count_four,count_seven,0,answer);    
		return answer;
	}
	if(num>=0 && num<=3){
		int answer1,temp_four,temp_seven,difference=length-position-1;
		answer=get_max(count_four+1,count_seven,difference,answer);     
		answer=get_max(count_four,count_seven+1,difference,answer);     
	}else if(num==4){
		int difference=length-position-1;
		answer=max_answer_first(position+1,count_four+1,count_seven,answer,length);
		answer=get_max(count_four,count_seven+1,difference,answer);
	}else if(num==5 || num==6){
		int difference=length-position-1;
		answer=get_max(count_four,count_seven+1,difference,answer);
	}else if(num==7){
		int difference=length-position-1;
		answer=max_answer_first(position+1,count_four,count_seven+1,answer,length);
		answer=get_max(count_four,count_seven,difference,answer);
	}else if(num==8){
		int difference=length-position-1;
		answer=get_max(count_four,count_seven,difference,answer);
	}else{
		answer=max_answer_first(position+1,count_four,count_seven,answer,length);
	}
	return answer;
}
int max_answer_last(int position ,int count_four,int count_seven,int answer,int length){
	int num=right1[position]-48;
	if(position>=length){
		answer=get_max(count_four,count_seven,0,answer);    
		return answer;
	}
	if(num==0){
		answer=max_answer_last(position+1,count_four,count_seven,answer,length);
	}else if(num>=1 && num<=3){
		int difference=length-position-1;
		answer=get_max(count_four,count_seven,difference,answer);
	}else if(num==4){
		answer=max_answer_last(position+1,count_four+1,count_seven,answer,length);
		int difference=length-position-1;
		answer=get_max(count_four,count_seven,difference,answer);
	}else if(num==5 || num==6){
		int difference=length-position-1;
		answer=get_max(count_four+1,count_seven,difference,answer);
	}else if(num==7){
		answer=max_answer_last(position+1,count_four,count_seven+1,answer,length);
		int difference=length-position-1;
		answer=get_max(count_four+1,count_seven,difference,answer);
	}else if(num==8 || num==9){
		int difference=length-position-1;
		answer=get_max(count_four,count_seven+1,difference,answer);
		answer=get_max(count_four+1,count_seven,difference,answer);
	}
	return answer;
}
int main(){
	int n;
	cin >> n;
	char temp_l[100],r[10000],l[100];
	int i,j,k,x,y;
	int count_four,count_seven,count;
	while(n>0){
		count_four=0;    
		count_seven=0;    
		count=0;
		cin >> temp_l;
		cin >> r;
		len_l=strlen(temp_l);
		len_r=strlen(r);
		for(i=0;i<len_r;i++){
			if(i<(len_r-len_l)){
				l[i]='0';   
			}else{
				l[i]=temp_l[i-(len_r-len_l)]; 
			}
		}
		l[i]='\0';
		for(i=0;i<len_r;i++){
			if(l[i]==r[i]){
				if(l[i]=='4'){
					count_four++;       
				}else if(l[i]=='7'){
					count_seven++;     
				}
			}else{
				break; 
			}
			count++;
		}
		for(i=0;i<len_r-count;i++){
			left1[i]=l[i+count];
			right1[i]=r[i+count];
		}
		left1[i]='\0';
		right1[i]='\0';
		int start=left1[0]-48,end=right1[0]-48,answer=0,difference=0;
		int count_four_m=count_four,count_seven_m=count_seven,difference_m;
		for(i=start;i<=end;i++){
			if(i==start){
				if(i==4){
				   answer=max_answer_first(1,count_four+1,count_seven,answer,len_r-count); 
				}else if(i==7){
			 	   answer=max_answer_first(1,count_four,count_seven+1,answer,len_r-count); 
				}else{
				   answer=max_answer_first(1,count_four,count_seven,answer,len_r-count); 
				}
			}else if(i>start && i< end){
				count_four_m=count_four;
				count_seven_m=count_seven;
				difference=len_r-count-1;
				if(i==4){
					count_four_m++;	     
				}else if(i==7){
					count_seven_m++;	    
				}
				difference_m=len_r-count-1;
				answer=get_max(count_four_m,count_seven_m,difference,answer);
			}else{
                                if(i==4){
				      answer=max_answer_last(1,count_four+1,count_seven,answer,len_r-count);
				}else if(i==7){
				      answer=max_answer_last(1,count_four,count_seven+1,answer,len_r-count); 
				}else{
				      answer=max_answer_last(1,count_four,count_seven,answer,len_r-count); 
			        }
			}
		}
		cout<<answer<<"\n";
		n--;
	}
	return 0;
}
