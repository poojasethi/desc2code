#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
char l[25],r[25];
int ar[25][25][25];
int l4,l7,r4,r7;
void con_to_s(ll ln,ll rn)
{
    char s[25];
    int k;
    k = 0;
    ll temp;
    int d;
    while(ln > 0)
    {
        temp = ln%10;
        d = temp;
        s[k] = d + '0';
        ln = ln/10;
        k++;
    }
    int i;
    for(i = 1 ;k-i>=0 ; i++)
    {
        l[i] = s[k - i];
    }
    l[i] = 0;

    k = 0;
    while(rn > 0)
    {
        temp = rn%10;
        d = temp;
        s[k] = d + '0';
        rn = rn/10;
        k++;
    }
    for(i = 1 ;k-i>=0 ; i++)
    {
        r[i] = s[k - i];
    }
    r[i] = 0;
}
int fupper(int,int);
int flower(int,int);

void precompute()
{
    for(int i = 0 ; i<= 20 ; i++)
    {
        for(int j = 0 ; j<=20; j++)
        {
            for(int k = 0 ; k<=20; k++)
            {
                int ans = 0;
                for(int l = 0 ; l<=k ; l++)
                {
                    ans = max(ans,(i+l)*(j + k - l));
                }
                ar[i][j][k] = ans;
            }
        }
    }
}
int solve()
{
    int lx = strlen(l + 1);
    int rx = strlen(r + 1);
    int ans = 0;
    l4 = 0 ; l7 = 0;
    r4 = 0 ; r7 = 0;
    if(lx == rx)
    {
        int i;
        for(i = 1 ; i<= lx ; i++)
        {
            if(l[i] != r[i])
            break;
            switch(l[i])
            {
                case '4': l4++;break;
                case '7': l7++;break;
            }
            switch(r[i])
            {
                case '4': r4++;break;
                case '7': r7++;break;
            }
        }

        // FOR L
        if(l[i] == '4') l4++;
        if(l[i] == '7') l7++;
        ans = max(ans,fupper(i + 1,lx));
        //printf("%d\n",ans);
        if(l[i] == '4') l4--;
        if(l[i] == '7') l7--;

        for(int j = i+1 ; j<= lx ; j++)
        l[j] = '0';

        for(int d = l[i] + 1 ; d < r[i]; d++)
        {
            if(d == '4') l4++;
            if(d == '7') l7++;
            ans = max(ans,fupper(i+1,lx));
            //printf("%d\n",ans);

            if(d == '4') l4--;
            if(d == '7') l7--;
        }

        // FOR R
        if(r[i] == '4') r4++;
        if(r[i] == '7') r7++;
        ans = max(ans,flower(i + 1,rx));
        //printf("%d\n",ans);
        if(r[i] == '4') r4--;
        if(r[i] == '7') r7--;
    }
    else
    {
        // for L
        if(l[1] == '4') l4++;
        if(l[1] == '7') l7++;
        ans = max(ans,fupper(2,lx));
        if(l[1] == '4') l4--;
        if(l[1] == '7') l7--;

        for(int i = 2 ; i<= lx ; i++)
        l[i] = '0';

        for(int d = l[1] + 1;d<='9';d++)
        {
            if(d == '4') l4++;
            if(d == '7') l7++;
            ans = max(ans,fupper(2,lx));
            if(d == '4') l4--;
            if(d == '7') l7--;
        }

        // for R
        if(r[1] == '4') r4++;
        if(r[1] == '7') r7++;
        ans = max(ans,flower(2,rx));
        //printf("%d\n",ans);
        if(r[1] == '4') r4--;
        if(r[1] == '7') r7--;

        for(int i = 2 ; i<= rx ; i++)
        r[i] = '9';

        for(int d = '1'; d<r[1] ; d++)
        {
            if(d == '4') r4++;
            if(d == '7') r7++;
            ans = max(ans,flower(2,rx));
            if(d == '4') r4--;
            if(d == '7') r7--;
        }
        if( rx-1 > lx)
        {
            ans = max(ans,ar[0][0][rx - 1]);
        }
    }
    return ans;
}
int main()
{
    precompute();
    int tc;
    ll ln,rn;
    for(int i = 0 ;i<5 ; i++)
    {
        for(int j = 0 ; j<5 ; j++)
        {
            for(int k = 0 ; k<5; k++)
            {
               // printf("i=%d j=%d k=%d ans=%d\n",i,j,k,ar[i][j][k]);
            }
        }
    }
    scanf("%d",&tc);
    for(int t = 1 ; t<= tc ; t++)
    {
        scanf("%lld %lld",&ln,&rn);
        //printf("%lld %lld\n",ln,rn);
        con_to_s(ln,rn);
        //printf("%s %s\n",l+1,r+1);
        printf("%d\n",solve());
    }
}
int fupper(int i,int len)
{
    //printf("i=%d\n",i);
    if(i > len) return l4*l7;
    else
    {
        int v1,v2;
        switch(l[i])
        {
            case '0':
            case '1':
            case '2':
            case '3':
            return ar[l4][l7][len - i + 1];

            case '4':
            v1 = max(ar[l4][l7][len - i],ar[l4][l7+1][len - i]);
            l4++;
            v2 = fupper(i+1,len);
            l4--;
            return max(v1,v2);

            case '5':
            case '6':
            return max(ar[l4][l7+1][len-i],fupper(i+1,len));

            case '7':
            v1 = ar[l4][l7][len - i];
            l7++;
            v2 = fupper(i+1,len);
            l7--;
            //printf("%d %d\n",v1,v2);
            return max(v1,v2);

            case '8':
            return ar[l4][l7][len - i];

            case '9':
            return fupper(i+1,len);

        }
    }
}
int flower(int i,int len)
{
    if(i > len) return r4*r7;
    else
    {
        int v1,v2;
        switch(r[i])
        {
            case '9':
            case '8':
            return ar[r7][r4][len - i + 1];

            case '7':
            v1 = max(ar[r7][r4][len - i],ar[r7][r4+1][len - i]);
            r7++;
            v2 = flower(i+1,len);
            r7--;
            return max(v1,v2);

            case '6':
            case '5':
            return max(ar[r7][r4+1][len-i],flower(i+1,len));

            case '4':
            v1 = ar[r7][r4][len - i];
            r4++;
            v2 = flower(i+1,len);
            r4--;
            return max(v1,v2);

            case '3':
            case '2':
            case '1':
            return ar[r7][r4][len - i];

            case '0':
            return flower(i+1,len);
        }
    }
}

