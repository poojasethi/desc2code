    //checking tester's soln time
     
    #include <iostream>
    using namespace std;
     
    typedef long long LL;
     
    const int maxN = 19;
     
    int F(int n4,int n7,int n) {
    	int four_count=n4;
    	int seven_count=n7;
    	int digits_left=n;
	int rem=digits_left;
	if(rem>0) {
		if(four_count==seven_count) {
			four_count+=rem/2;
			seven_count+=rem/2;
			if(rem%2) {
				seven_count+=1;
			}
			rem=0;
		} else if(seven_count>four_count) {
			int temp=seven_count;
			seven_count=four_count;
			four_count=temp;
		}
		if(four_count>seven_count) {
			if(rem>four_count-seven_count) {
				rem-=(four_count-seven_count);
				seven_count=four_count;
				if(rem%2) {
					four_count+=rem/2;
					seven_count+=(rem/2+1);
				} else {
					four_count+=rem/2;
					seven_count+=rem/2;
				}
				rem=0;
			} else {
				seven_count+=rem;
				rem=0;
			}
		}
	}
	//cout << " " << four_count*seven_count << endl;
	return four_count*seven_count;
    }
     
    int F(int L, int R, int n4, int n7, int n) {
    if (L > R) {
    return 0;
    }
    int ans = F(n4, n7, n);
    if (L <= 4 && 4 <= R) {
    ans = max(ans, F(n4 + 1, n7, n));
    }
    if (L <= 7 && 7 <= R) {
    ans = max(ans, F(n4, n7 + 1, n));
    }
    return ans;
    }
     
    int main() {
    int T;
    cin >> T;
    for (int t=0;t<T;t++) {
    long long L, R;
    cin >> L >> R;
     
    int aL[maxN] = {0};
    int nL = 0;
    while (L > 0) {
    aL[nL++] = L % 10;
    L /= 10;
    }
     
    int aR[maxN]={0};
    int nR=0;
    while (R > 0) {
    aR[nR++] = R % 10;
    R /= 10;
    }
     
    int n = max(nL, nR);
     
    int n4 = 0, n7 = 0;
    int i, j;
    for (i = n - 1; i >= 0 && aL[i] == aR[i]; --i) {
    n4 += (aL[i] == 4);
    n7 += (aL[i] == 7);
    }
     
    int ans=0;
    if (i < 0) {
    ans = n4 * n7;
    } else {
    ans = max(ans, F(aL[i] + 1, aR[i] - 1, n4, n7, i));
     
    int c4 = n4;
    int c7 = n7;
    int j = i;
    while (true) {
    c4 += (aL[j] == 4);
    c7 += (aL[j] == 7);
    if (--j < 0) {
    break;
    }
    ans = max(ans, F(aL[j] + 1, 9, c4, c7, j));
    }
    ans = max(ans, c4 * c7);
     
    c4 = n4;
    c7 = n7;
    j = i;
    while (true) {
    c4 += (aR[j] == 4);
    c7 += (aR[j] == 7);
    if (--j < 0) {
    break;
    }
    ans = max(ans, F(0, aR[j] - 1, c4, c7, j));
    }
    ans = max(ans, c4 * c7);
    }
    cout << ans << endl;
    }
    return 0;
    } 
