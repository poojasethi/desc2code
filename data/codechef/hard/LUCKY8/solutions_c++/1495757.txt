#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cmath>
#include <vector>
#include <stack>
#include <set>
#include <map>
#include <deque>
#include <string>

#define all(i,n) for(i = 0; i < (n); i++)
#define SET(p) memset(p,-1,sizeof(p))
#define CLR(p) memset(p,0,sizeof(p))
#define maX(a,b)	((a)>(b)?(a):(b))
#define miN(a,b)	((a)<(b)?(a):(b))
#define S(n)	scanf("%d",&n)
#define P(n)	printf("%d\n",n)
#define Sl(n)	scanf("%lld",&n)
#define Pl(n)	printf("%lld\n",n)
#define Sf(n)   scanf("%lf",&n)
#define Ss(n)   scanf("%s",n)
#define LL long long
#define ULL unsigned long long
#define pb push_back
using namespace std;
int ld[25],rd[25];
int maximise(int n4,int n7,int n)
{
	int k = (n7 + n - n4) / 2;
	if (0 <= k && k <= n) {
		return (n4 + k) * (n7 + n - k);
	}
	++k;
	if (0 <= k && k <= n) {
		return (n4 + k) * (n7 + n - k);
	}
	return max((n4 + n) * n7, n4 * (n7 + n));
}
int main()
{
int t,s,i,j,k,c4,c7,n4,n7,mx;
LL l,r;
S(t);
while(t--)
{
    Sl(l);Sl(r);
    s=0;c4=0;c7=0;mx=0;
    while(r)
    {
        s++;
        rd[s]=r%10;
        r=r/10;
    }
    i=1;
    while(i<=s)
    {
        ld[i]=l%10;
        l=l/10;
        i++;
    }
    /*for(i=1;i<=s;i++)
        printf("%d ",ld[i]);
    printf("\n");
    for(i=1;i<=s;i++)
        printf("%d ",rd[i]);
    printf("\n");*/
    while(ld[s]==rd[s] && s>0)
    {
        if(ld[s]==7)
            c7++;
        else if(ld[s]==4)
            c4++;
        s--;
    }
    if(s==0)
    {
        printf("%d\n",c4*c7);
        continue;
    }
    for(i=ld[s]+1;i<rd[s];i++)
    {
        if(i==4)
            k=maximise(c4+1,c7,s-1);
        else if(i==7)
            k=maximise(c4,c7+1,s-1);
        else
            k=maximise(c4,c7,s-1);
        mx=maX(mx,k);
    }
    n4=0;n7=0;
    for(j=s;j>0;j--)
    {
        if(ld[j]==7)
            n7++;
        else if(ld[j]==4)
            n4++;
        if(j==1)
        {
            k=(c4+n4)*(c7+n7);
            mx=maX(mx,k);
            break;
        }
        for(i=ld[j-1]+1;i<=9;i++)
        {
            if(i==4)
                k=maximise(c4+n4+1,c7+n7,j-2);
            else if(i==7)
                k=maximise(c4+n4,c7+n7+1,j-2);
            else
                k=maximise(c4+n4,c7+n7,j-2);
            //printf("%d %d %d\n",j,i,k);
            mx=maX(mx,k);
        }
    }
    n4=0;n7=0;
    for(j=s;j>0;j--)
    {
        if(rd[j]==7)
            n7++;
        else if(rd[j]==4)
            n4++;
        if(j==1)
        {
            k=(c4+n4)*(c7+n7);
            mx=maX(mx,k);
            break;
        }
        for(i=0;i<rd[j-1];i++)
        {
            if(i==4)
                k=maximise(c4+n4+1,c7+n7,j-2);
            else if(i==7)
                k=maximise(c4+n4,c7+n7+1,j-2);
            else
                k=maximise(c4+n4,c7+n7,j-2);
            //printf("%d %d %d\n",j,i,k);
            mx=maX(mx,k);
        }
    }
    printf("%d\n",mx);
}
return 0;
}
