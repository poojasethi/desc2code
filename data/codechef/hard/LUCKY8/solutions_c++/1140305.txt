#include<iostream>
#include<algorithm>
#include<cmath>
#include<string>
#include<cstring>
#include<cctype>
#include<set>
#include<queue>
#include<stack>
#include<list>
#include<map>
#include<sstream>
#include<cstdio>
#include<vector>
using namespace std;

typedef vector<int> vi;
typedef vector< vi > vii;
typedef map<int,int> mii;
typedef map<string,int> msi;
typedef map<int,string> mis;


#define pb push_back
#define MAX 105

//typedef __int64 i64;
typedef long long i64;


int test_case;
i64 a,b;
int n;

vector< int > L ;
vector< int > R ;

int _max( int A, int B ) {
	return ( ( A >= B ) ? A : B ) ;
}

int Calc( int f, int s, int i ) {
	int k = ( s + i - f ) / 2;
	if( k >= 0 && k <= i ) return ( f + k ) * ( s + i - k ) ;
	k ++ ;
	if( k >= 0 && k <= i ) return ( f + k ) * ( s + i - k ) ;

	return _max( ( f + i ) * s , ( s + i ) * f ) ;
}


int findMax( int L, int R, int f, int s, int i ) {
	if( L > R ) return 0 ;
	int ans = Calc( f, s, i ) ;
	if( L <= 4 && R >= 4 ) ans = _max( ans, Calc( f + 1, s, i ) ) ;
	if( L <= 7 && R >= 7 ) ans = _max( ans, Calc( f, s + 1, i ) ) ;
	return ans ;
		
	
}

int main(){
//	freopen("a.txt", "r", stdin);
	int i,j;
	scanf("%d", &test_case);
	for( int caseId = 1; caseId <= test_case; caseId ++ ) {
		scanf("%lld %lld", &a, &b);
		L.clear();
		R.clear();
		while( ( a > 0 ) || ( b > 0) ) {
			L.push_back( a % 10 ) ;
			a /= 10;
			R.push_back( b % 10 ) ;
			b /= 10;
		}
		

		int ind = L.size() - 1;
		int four , seven ;
		four = seven = 0;
		while( ind >= 0 && L[ ind ] == R[ ind ] ){
			if( L[ ind ] == 4 ) four ++ ;
			else if( L[ ind ] == 7 ) seven ++ ;
			ind -- ;
		}
			
		
		if( ind < 0 ) {
			printf("%d\n", four * seven ) ;
			continue;
		}


		int ans = findMax( L[ ind ] + 1, R[ ind ] - 1 , four, seven , ind ) ;
		int temp4 = four;
		int temp7 = seven;
		for( i = ind; i >= 0; i -- ) {
			if( L[ i ] == 4 ) temp4 ++ ;
			else if( L[ i ] == 7 ) temp7 ++ ;

			if( i > 0 ) ans = _max( ans, findMax( L[ i - 1 ] + 1, 9, temp4, temp7, i - 1 ) ) ;
		}
		
		ans = _max( ans, temp4 * temp7 ) ;
		temp4 = four;
		temp7 = seven;
		for( i = ind; i >= 0; i -- ) {
			if( R[ i ] == 4 ) temp4 ++ ;
			else if( R[ i ] == 7 ) temp7  ++ ;

			if( i > 0 ) ans = _max( ans, findMax( 0, R[ i - 1 ] - 1, temp4, temp7, i - 1 ) ) ;
		}

		ans = _max( ans, temp4 * temp7 );
		printf("%d\n", ans );

		
	}
	return 0;
}