#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
#include<queue>
#include<map>
using namespace std;

typedef long long ll;

ll L[19], R[19];

void in()
{
   int m=0;
   ll x, y;
   memset(L, 0, sizeof(L));
   memset(R, 0, sizeof(R));
   scanf("%lld%lld", &x, &y);
   while(x)
   {
       L[18-m] = x%10;
       x/=10;
       m++;
   }
   m = 0;
   while(y)
   {
       R[18-m] = y%10;
       y/=10;
       m++;
   }
}

int max(int a, int b){return a>b?a:b;}

int F(int n4, int n7, int len)
{
    if(len<0)cout<<"WHY?"<<endl;
    int ans;
    if(len==0)ans = n4*n7;
    else
    {
        int r = (n7-n4+len)/2;
        ans = (n4+len)*n7;
        ans = max(ans, (n4*(n7+len)));
        if(r>0 && r<len)ans = max(ans, (n4+r)*(n7+len-r));

    }
    return ans;
}

int F(int l, int r, int n4, int n7, int len)
{

    int ans;
    if(l>r)ans= 0;
    else
    {
        ans = F(n4, n7, len-1);
        if(l<=4 && r>=4)ans = max(ans, F(n4+1, n7, len-1));
        if(l<=7 && r>=7)ans = max(ans, F(n4, n7+1, len-1));
    }
    return ans;
}

void solve()
{
   in();
   int i=0, f4=0, f7=0, len=19, a4, a7, alen, res;
   while(L[i] == R[i] && i<19)
   {
       if(L[i] == 4)f4++;
       if(L[i] == 7)f7++;
       i++, len--;
   }
   if(i==19)res= f4*f7;
   else
   {
       res = F(L[i]+1, R[i]-1, f4, f7, len);

       a4=f4, a7=f7, alen=len;
       for(int j=i; j<19; j++)
       {
            if(L[j] == 4)a4++;
            if(L[j] == 7)a7++;
            alen--;
            if(j==18)break;
            res = max(res, F(L[j+1]+1, 9, a4, a7, alen));
       }
       res = max(res, a4*a7);

       a4=f4, a7=f7, alen=len;
       for(int j=i; j<19; j++)
       {
           if(R[j]==4)a4++;
           if(R[j]==7)a7++;
           alen--;
           if(j==18)break;
           res = max(res, F(0, R[j+1]-1, a4, a7, alen));
       }
       res = max(res, a4*a7);
   }
   printf("%d\n", res);
}

int main()
{
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin);
   //freopen("output1.txt","w",stdout);
   #endif
   int t;
   scanf("%d", &t);
   while(t--)
   {
       solve();
   }
}

