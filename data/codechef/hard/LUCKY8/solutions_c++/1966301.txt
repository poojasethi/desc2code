#include<cstdio>
#include<iostream>
#include<cstring>
#include<vector>
#include<memory.h>
#include<cstdlib>
#include<cmath>
#include<cassert>
#include<memory.h>
#include<algorithm>
#include<queue>
#include<map>
using namespace std;

typedef long long ll;
ll L[19], R[19];

void in()
{
    memset(L, 0, sizeof(L));
    memset(R, 0, sizeof(R));
    ll x, y;
    int m=0;
    scanf("%lld%lld", &x, &y);
    while(x)
    {
        L[18-m]= x%10;
        x/=10;
        m++;
    }
    m=0;
    while(y)
    {
        R[18-m] = y%10;
        y/=10;
        m++;
    }
}

int max(int a, int b){return a>b?a:b;}
int get(int a4, int a7, int el)
{
    int res = 0;
    if(el==0)res = a4*a7;
    else
    {
        res = (a4+el)*a7;
        res = max(res, a4*(a7+el));
        if(a7-a4+el>0 && (a7-a4+el)/2<el)res = max(res, (a4+(a7-a4+el)/2)*(a7+el-(a7-a4+el)/2));
    }
    return res;
}

void solve()
{
    int i=0, f4=0, f7=0, len=19, ans=0, n4, n7, nlen;

    in();

    while(L[i] == R[i] && i<19)
    {
        if(L[i] == 4)f4++;
        else if(L[i] == 7)f7++;
        i++, len--;
    }
    if(i==19)ans = f4*f7;
    else
    {
        if(R[i] - L[i]>1)
        {

            ans = max(ans, get(f4, f7, len-1));
            if(L[i]<4 && R[i]>7)
            {
                ans = max(ans, get(f4+1, f7, len-1));
                ans = max(ans, get(f4, f7+1, len-1));
            }
            else if(L[i]<4 && R[i]>4)
            {
                ans = max(ans, get(f4+1, f7, len-1));
            }
            else if(L[i]<7 && R[i]>7)
            {
                ans = max(ans, get(f4, f7+1, len-1));
            }
        }
        for(int j=i+1; j<20; j++)
        {
            n4 = f4, n7 = f7, nlen = len;
            for(int k=i; k<j; k++)
            {
                if(L[k] == 4)n4++;
                else if(L[k] == 7)n7++;
                nlen--;
            }
            if(nlen==0)ans = max(ans, get(n4, n7, nlen));
            else
            {
                if(L[j]<9)ans = max(ans, get(n4, n7, nlen-1));
                if(L[j]<7)ans = max(ans, get(n4, n7+1, nlen-1));
                if(L[j]<4)ans = max(ans, get(n4+1, n7, nlen-1));
            }

            n4 = f4, n7 = f7, nlen = len;
            for(int k=i; k<j; k++)
            {
                if(R[k] == 4)n4++;
                else if(R[k] == 7)n7++;
                nlen--;
            }
            if(nlen==0)ans = max(ans, get(n4, n7, nlen));
            else
            {
                if(R[j]>0)ans = max(ans, get(n4, n7, nlen-1));
                if(R[j]>4)ans = max(ans, get(n4+1, n7, nlen-1));
                if(R[j]>7)ans = max(ans, get(n4, n7+1, nlen-1));
            }
        }
    }
    printf("%d\n", ans);
}

int main()
{
   #ifndef ONLINE_JUDGE
   freopen("input.txt","r",stdin);
   //freopen("output1.txt","w",stdout);
   #endif
   int t;
   scanf("%d", &t);
   while(t--)
   {
       solve();
   }
}
