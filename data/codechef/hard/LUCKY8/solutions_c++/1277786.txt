#include<map>
#include<ctime>
#include<cmath>
#include<queue>
#include<vector>
#include<cstdio>
#include<string>
#include<bitset>
#include<cassert>
#include<cstring>
#include<numeric>
#include<sstream>
#include<iostream>
#include<algorithm>
using namespace std;
typedef long long LL;
#define MM(a, x) memset(a, x, sizeof(a))
#define P(x) cout << #x << " = " << x << endl;

vector<int> dL, dR;
int n, r;

int g[20][20][20];

void dfs(int depth, int n4, int n7, bool tL, bool tR) {
	if(depth == n) {
		int t = n4 * n7;
		if(r < t) r = t;
		return;
	}
	if(!tL && !tR) {
		int t = g[n4][n7][n - depth];
		if(r < t) r = t;
		return;
	}
	int L = 0, R = 9;
	if(tL) L = dL[depth];
	if(tR) R = dR[depth];
	for(int i = L; i <= R; i++) {
		dfs(depth + 1, n4 + (i == 4), n7 + (i == 7), tL && i == dL[depth], tR && i == dR[depth]);
	}
}

int main() {
	LL T, L, R;
	for(int i = 0; i < 20; i++)
		for(int j = 0; j < 20; j++) {
			for(int k = 0; k < 20; k++) {
				int &t = g[i][j][k];
				for(int l = 0; l <= k; l++) {
					int tt = (i + l) * (j + k - l);
					if(t < tt) t = tt;
				}
			}
		}
		cin >> T;
		while(T--) {
			r = 0;
			scanf("%lld%lld", &L, &R);
			dL.clear(), dR.clear();
			while(L) dL.push_back(L % 10), L /= 10;
			while(R) dR.push_back(R % 10), R /= 10;
			n = max(dL.size(), dR.size()) + 1;
			dL.resize(n, 0);
			dR.resize(n, 0);
			reverse(dL.begin(), dL.end());
			reverse(dR.begin(), dR.end());
			dfs(0, 0, 0, 1, 1);
			printf("%d\n", r);
		}

#ifdef LOCAL
		system("pause");
#endif
		return 0;
}