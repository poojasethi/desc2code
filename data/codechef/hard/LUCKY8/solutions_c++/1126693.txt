#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<climits>
#include<sstream>

#include<algorithm>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<utility>
#include<stack>
#include<queue>
#include<deque>
#include<list>
#include<bitset>

using namespace std;

typedef vector<int> vi; 
typedef vector<vi> vvi; 
typedef vector<string> vs; 
typedef pair<int,int> ii;
typedef long long int LLI;
typedef unsigned long long int ULLI;

#define sz(a)                        int((a).size()) 
#define pb                           push_back 
#define mp                           make_pair
#define F                            first
#define S                            second
#define present(c,x)                 ((c).find(x) != (c).end()) 
#define cpresent(c,x)                (find(all(c),x) != (c).end())
#define tr(c,i)                      for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define all(c)                       (c).begin(),(c).end()
#define si(n)                        scanf("%d",&n)
#define sl(n)                        scanf("%lld",&n)
#define sf(n)                        scanf("%f",&n)
#define sd(n)                        scanf("%lf",&n)
#define ss(n)                        scanf("%s",n)

#define abs(x)                       ((x)<0?-(x):(x))
#define fill(a,v)                    memset((a),(v),sizeof (a))
#define INF                          INT_MAX
#define LINF                         (long long)1e18
#define EPS                          1e-9

int max(int a,int b)
{
	return ((a)>(b)?(a):(b));
}

int min(int a,int b)
{
	return ((a)<(b)?(a):(b));
}


int maxProd(int x,int y,int both)
{
	if(x > y)
	{
		int t = x;
		x = y;
		y = t;
	}

	int give = min(y-x,both);
	x += give;
	both -= give;

	if(both > 0)
	{
		int half = both/2;
		y += half;
		x += half;
		if(both&1) y++;
	}
	return y*x;
}
int lll = 0;
int rrr = 0;
int solve_l(char *s,int c7, int c4,int care)
{
	int len = strlen(s),ans = -1;
	if(len == 0 || care == 0)
		return maxProd(c7,c4,len);
	else if(*s < '4')
	{
		ans = max(ans,solve_l(s+1,c7,c4+1,0));
		ans = max(ans,solve_l(s+1,c7+1,c4,0));
	}
	else if(*s == '4')
	{
		ans = max(ans,solve_l(s+1,c7,c4+1,1));
		ans = max(ans,solve_l(s+1,c7+1,c4,0));
	}
	else if(*s < '7')
		ans = max(ans,solve_l(s+1,c7+1,c4,0));
	else if(*s == '7')
	{
		ans = max(ans,solve_l(s+1,c7+1,c4,1));
		ans = max(ans,solve_l(s+1,c7,c4,0));
	}
	else if(*s == '8')
		ans = max(ans,solve_l(s+1,c7,c4,0));
	else
		ans = max(ans,solve_l(s+1,c7,c4,1));
	return ans;
}

int solve_r(char *s,int c7, int c4,int care)
{
	int len = strlen(s),ans = -1;
	if(len == 0 || care == 0)
		return maxProd(c7,c4,len);
	else if(*s > '7')
	{
		ans = max(ans,solve_r(s+1,c7+1,c4,0));
		ans = max(ans,solve_r(s+1,c7,c4+1,0));
	}
	else if(*s == '7')
	{
		ans = max(ans,solve_r(s+1,c7+1,c4,1));
		ans = max(ans,solve_r(s+1,c7,c4+1,0));
	}
	else if(*s > '4')
		ans = max(ans,solve_r(s+1,c7,c4+1,0));
	else if(*s == '4')
	{
		ans = max(ans,solve_r(s+1,c7,c4+1,1));
		ans = max(ans,solve_r(s+1,c7,c4,0));
	}
	else if(*s > '0')
		ans = max(ans,solve_r(s+1,c7,c4,0));
	else
		ans = max(ans,solve_r(s+1,c7,c4,1));
	return ans;
}

int solve_lr(char *l,char *r,int c7,int c4,int carel, int carer)
{
	int len = strlen(l), ans = -1;
	if(*l == *r)
	{
		if(len == 0)
			return maxProd(c4,c7,0);
		ans = max(ans,solve_lr(l+1,r+1,c7+(*l=='7'),c4+(*l=='4'),1,1));
	}
	else
	{
		ans = max(ans,solve_l(l+1,c7+(*l=='7'),c4+(*l=='4'),1));
		ans = max(ans,solve_r(r+1,c7+(*r=='7'),c4+(*r=='4'),1));
		for(char c=*l+1; c<*r; c++)
			ans = max(ans,maxProd(c4+(c=='4'),c7+(c=='7'),len-1));
	}
	return ans;
}

int main()
{
	int t,ans;
	char l[20],r[20];

	for(si(t); t--; )
	{
		ss(l);ss(r);

		ans = -1;
		int lenl = strlen(l);
		int lenr = strlen(r);
		if(lenl != lenr)
		{
			ans = max(ans,solve_l(l,0,0,1));
			if(*r == '1')
				ans = max(ans,solve_r(r+1,0,0,1));
			else
				ans = max(ans,solve_r(r,0,0,1));
			for(int i=lenl+1; i<lenr; i++)
				ans = max(ans,maxProd(0,0,i));
		}
		else
			ans = max(ans,solve_lr(l,r,0,0,1,1));
		printf("%d\n",ans);
	}
	return 0;
}
