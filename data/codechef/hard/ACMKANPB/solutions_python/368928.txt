import java.util.Arrays;
import java.util.Scanner;

/**
 * Created by IntelliJ IDEA.
 * User: kansal
 * Date: Oct 30, 2010
 * Time: 4:40:20 PM
 * To change this template use File | Settings | File Templates.
 */
class Bonus {

	public int[] maxTotalBonus1(int[][] G, int L) {
		if (nonZeroCycle(G)) return null;

		int n = G.length;

		int[] res = new int[n];
		Arrays.fill(res, L);

		int iter = 0;
		boolean done = false;
		while (!done) {
			++iter;
			if (iter == n)
				throw new RuntimeException();
			done = true;
			for(int i = 0; i < n; ++i)
				for(int j = 0; j < n; ++j)
					if (G[i][j] >= 0) {
						if (res[i] < res[j] + G[i][j]) {
							res[i] = res[j] + G[i][j];
							done = false;
						}
					}
		}

		for(int i = 0; i < n; ++i)
			for(int j = 0; j < n; ++j)
				if (G[i][j] >= 0 && res[i] < res[j] + G[i][j])
					return null;

		return res;
	}

	int[] cache;
	public int[] maxTotalBonus(int[][] G, int L) {
		int n = G.length;

		cache = new int[n];
		Arrays.fill(cache, -1);

		if (nonZeroCycle(G))
			return null;

		int ans = 0;
		for(int i = 0; i < n; ++i) {
			ans += getBonus(i, G, L);
		}
		return cache;
	}

	private int getBonus(int x, int[][] G, int L) {
		if (cache[x] != -1)
			return cache[x];
		int res = L;
		for(int i = 0; i < G.length; ++i)
			if (G[x][i] >= 0) {
				res = Math.max(res, getBonus(i, G, L) + G[x][i]);
			}
		return cache[x] = res;
	}

	private boolean nonZeroCycle(int[][] G) {
		return floyd(G);
	}

	private boolean floyd(int[][] G) {
		int n = G.length;
		int[][] g = G.clone();
		for(int k = 0; k < n; ++k)
			for(int i = 0; i < n; ++i)
				for(int j = 0; j < n; ++j)
					if (G[i][k] >= 0 && G[k][j] >= 0)
						if (g[i][j] < g[i][k] + g[k][j])
							g[i][j] = g[i][k] + g[k][j];
		for(int i = 0; i < n; ++i)
			if (g[i][i] > 0)
				return true;
		return false;
	}

	private boolean check(int[][] G) {
		int n = G.length;
		int[] deg = new int[n];
		for(int i = 0; i < n; ++i)
			for(int j = 0; j < n; ++j)
				if (G[i][j] >= 0)
					++deg[i];
		
		while (true) {
			int k = 0;
			while (k < n && deg[k] != 0) ++k;
			if (k == n) {
				for(int d: deg) if (d > 0) return true;
				return false;
			}
			deg[k] = -1;
			for(int i = 0; i < n; ++i)
				if (G[i][k] >= 0)
					--deg[i];
		}
	}

	public static void main(String[] args) {

		Scanner scn = new Scanner(System.in);
		int T = scn.nextInt();
		while (T-- > 0) {
			int n, m, L;
			n = scn.nextInt();
			m = scn.nextInt();
			L = scn.nextInt();
			int[][] G = new int[n][n];
			for (int i = 0; i < G.length; i++) {
				Arrays.fill(G[i], -1);
			}
			for (int i = 0; i < m; ++i) {
				int u, v, c;
				u = scn.nextInt();
				v = scn.nextInt();
				c = scn.nextInt();
				G[u - 1][v - 1] = Math.max(G[u - 1][v -1], c);
			}
			int[] res = (new Bonus()).maxTotalBonus1(G, L);
			if (res == null) {
				System.out.println("Inconsistent analysis.");
			} else {
				int tot = 0;
				for (int x : res) tot += x;
				System.out.println(tot);
				for (int i = 0; i < n; ++i) {
					System.out.print(res[i]);
					if (i < n-1) System.out.print(" ");
				}
				System.out.println();
			}
		}
	}
}
