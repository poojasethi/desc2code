
/* Author : Vamsi Kavala */
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <algorithm>
#include <map>
#include <vector>
#include <list>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <cmath>
using namespace std;

#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define PB push_back
#define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)	
#define mod 1000000007
#define MAXN 1000010
#define MP make_pair

typedef pair<int,int>   PI;
typedef vector<int> VI;
typedef long long int LL;

vector<vector<PI> > a;
int k,done[1000],w[128][128],w0[128][128];
int main(){
	int cnt,t,m,n,l,x,y,z,i,j,tmp,fl;
	scanf("%d",&t);
	while(t--){
		scanf("%d %d %d",&n,&m,&l);
		a.clear();
		a.resize(1000);
		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
					w[i][j]=w0[i][j]=-1;
		memset(done,-1,sizeof(done));
		while(m--){
			scanf("%d %d %d",&x,&y,&z);
//			a[x].PB(MP(y,z));
			x--;y--;
			w[x][y]=z;
			w0[x][y]=z;
		}
		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
				for(k=0;k<n;k++)
				{
					if(w[j][i]<0||w[i][k]<0)
						continue;
					w[j][k]=max(w[j][k],w[j][i]+w[i][k]);
				}

		fl=0;
/*		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
				for(k=0;k<n;k++)
					if(w[j][k]<w[j][i]+w[i][k])
						fl=1;
*/		
		for(i=0;i<n;i++)
		{
			for(j=i+1;j<n;j++)
			{
				if(w[i][j]==0&&w[j][i]==0)
				{
					w0[i][j]=-1;
					w0[j][i]=-1;
					for(k=0;k<n;k++)
						w0[i][k]=max(w0[i][k],w0[j][k]);
					for(k=0;k<n;k++)
						w0[j][k]=max(w0[j][k],w0[i][k]);
				}
				else if(w[j][i]>=0&&w[i][j]>=0)
				{
					fl=1;
				}
			}
		}
		if(fl){

			printf("Inconsistent analysis.\n");
			continue;
		}
		
		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
				if(w0[i][j]!=-1)
					a[i+1].PB(MP(j+1,w0[i][j]));
		fl=1;
		cnt=0;
		int sum=0;
		while(fl){
			fl=0;
			for(i=1;i<=n;i++){
				if(done[i]!=-1)continue;
				tmp=l;
				for(j=0;j<a[i].size();j++){
					if(done[a[i][j].first]==-1)
						break;
					tmp=max(tmp,done[a[i][j].first]+a[i][j].second);
				}
				if(j==a[i].size()){
					done[i]=tmp;
					sum+=tmp;
					cnt++;
					fl=1;
				}
			}
			if(cnt==n)
				break;
			if(fl==0){
				n=0;
				printf("Inconsistent analysis.");
				break;
			}
		}
		if(n!=0)
		printf("%d\n",sum);
		for(i=1;i<=n;i++)
			printf("%d ",done[i]);
		printf("\n");
	}

	return 0;
}
