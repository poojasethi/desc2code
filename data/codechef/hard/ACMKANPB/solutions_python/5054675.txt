#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <stack>
#include <queue>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <utility>
#include <fstream>

using namespace std;

#define PB push_back
#define MP make_pair
#define S second
#define F first
#define MOD 1000000007
#define INF 1000000007
#define MAXN 1000000
#define LL long long

vector<pair<pair<LL, LL>, LL> > edges;
LL w[102];

inline void Solve(){
    edges.clear();
    LL i, j, x, y, m, n, minbonus, d;
    cin>>n>>m>>minbonus;
    for(i = 0; i < m; i++){
        cin>>x>>y>>d;
        edges.PB(MP(MP(x, y), d));
    }
    for(i = 1; i <= n; i++){
        w[i] = minbonus;
    }
    for(i = 1; i <= n - 1; i++){
        for(j = 0; j < edges.size(); j++){
            x = edges[j].F.F, y = edges[j].F.S, d = edges[j].S;
            if(w[y] + d > w[x]){
                w[x] = w[y] + d;
            }
        }
    }
    bool flag = 0;
    for(j = 0; j < edges.size(); j++){
        x = edges[j].F.F, y = edges[j].F.S, d = edges[j].S;
        if(w[y] + d > w[x]){
            flag = 1;
            break;
        }
    }
    if(flag) {
        cout<<"Inconsistent analysis."<<endl;
        return;
    }
    LL ans = 0;
    for(i = 1; i <= n; i++){
        ans += w[i];
    }
    cout<<ans<<endl;
    for(i = 1; i <= n; i++){
        cout<<w[i]<<endl;
    }
    return;
}

int main(){
    //freopen("input.txt", "r", stdin);
    LL t = 1;
    cin>>t;
    while(t--){
        Solve();
    }
    return 0;
}

