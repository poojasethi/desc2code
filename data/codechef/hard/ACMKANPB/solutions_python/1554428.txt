
//Author : Deepan
#include <vector>
#include <list>
#include <cassert>
#include <sstream>
#include <map>
#include <set>
#include <climits>
#include <deque>
#include <fstream>
#include <stack>
#include <bitset>
#include <stack>
#include <queue>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cstring>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

template<class A, class B> A cvt(B x) {stringstream s;s<<x;A r;s>>r;return r;}

#define FOR(i,a,b) for(int i= (int )a ; i < (int )b ; ++i) 
#define REV(i,a,b) for(int i= (int )a ; i >= (int)b ; --i)
#define REP(i,n) FOR(i,0,n)
#define DEP(i,n) REV(i,n,0)
#define PB push_back
#define PP pop()
#define EM empty()
#define INF 1000000000
#define PF push_front
#define ALL(x) x.begin(),x.end()
#define SORT(x) sort(ALL(x))
#define V(x) vector< x >
#define Debug false
#define PRINT(x)        cout << #x << " " << x << endl
#define LET(x,a) 	    __typeof(a) x(a)
#define IFOR(i,a,b) 	for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  	IFOR(it,v.begin(),v.end())
#define PRESENT(c,x) 	((c).find(x) != (c).end())
#define SZ(x) 		x.size()
#define CPRESENT(c,x) 	(find(c.begin(),c.end(),x) != (c).end())
#define D(N) 		int N
#define S(N)		scanf("%d",&N)
#define T(t) int t;scanf("%d",&t);while(t--)
#define Pln(N)		printf("%d\n",N);
#define P(N)		printf("%d ",N);
#define FASTIO          1

typedef pair<int,int>   PI;
typedef pair<int,PI>    TRI;
typedef V( int )        VI;
typedef V( PI  )        VII;
typedef V( string )     VS;
typedef long long       LL;
typedef long double     LD;

/* FastIO, generally required these days ;) */

#ifndef FASTIO
char *ipos, *opos, InpFile[20000000], OutFile[20000000], DIP[20];
inline int input(int flag=0) {

   while(*ipos <= 32) ++ipos;
   if ( flag  ) return (*ipos++ - '0'); /* For getting Boolean Characters */
   int x=0, neg = 0;char c;
   while( true ) {
      c=*ipos++; if(c == '-') neg = 1;
      else {
	 if (c<=32) return neg?-x:x;
	 x=(x<<1)+(x<<3)+c-'0';
      }
   }
}
inline void output(int x,int flag) {
   int y,dig=0;
   while (x||!dig) { y=x/10;DIP[dig++]=x-((y << 3) + (y << 1))+'0';x=y;}
   while (dig--) *opos++=DIP[dig];
   *opos++= flag ? '\n' : ' ';
}
inline void InitFASTIO() {
   ipos = InpFile; opos = OutFile;
   fread_unlocked(InpFile,20000000,1,stdin);
}
inline void FlushFASTIO(vi ) {
   fwrite_unlocked(OutFile,opos-OutFile,1,stdout);	
}
#endif
long long  edge[110][110],A[110];
int n,m,x,y;
long long c,L,ans;
int timeE ;
bool visited[110],vedge[110][110];
vector< pair<int,int> > F,St;
bool dfs(int u)
{
	visited[u] = true;
	St[u].first = timeE++;
	FOR(i,0,n){
		if(edge[u][i]!=0)
		{
			if(visited[i]==false){
				if(dfs(i)==false)
					return false;
			}
			else if (F[i].first==-1 && St[i].first < St[u].first ){
				return false;
			}
		}
	}
	F[u].first = timeE++;
	return true;
}
void mbfs(int u){
	A[u] = L;
	queue< int > Q;
	Q.push(u);
	while(!Q.empty()){
		u = Q.front();
		Q.pop();
		FOR(i,0,n){
			if(vedge[u][i] && A[i] < A[u]+edge[u][i])
			{
				A[i] = A[u] + edge[u][i];
				Q.push(i);
			}	
		}
	}
	return ;
}
int main()
{

	T(t){	
		S(n);S(m);
		cin>>L;
		F.clear();
		St.clear();
		FOR(i,0,n)
		{
			F.push_back(make_pair(-1,i));
			St.push_back(make_pair(-1,i));
			A[i] = L;
			FOR(j,0,n)
			{
				edge[i][j] = 0;
				vedge[i][j] = false;
			}
		}
		memset(edge,0,sizeof(edge));
		memset(visited,false,sizeof(visited));
		FOR(i,0,m){
			scanf("%d%d%lld",&x,&y,&c);
			x--;y--;
				edge[x][y] = c;
				vedge[x][y] = true;
		}
		FOR(k,0,n)
		{
			FOR(i,0,n)
			{
				FOR(j,0,n)
				{
					if(vedge[i][j])
					{
						A[i] = max(A[i],A[j] + edge[i][j]);
					}
				}
			}
		}

		bool result = true;
		FOR(i,0,n)
		{
			FOR(j,0,n)
			{
				if(vedge[i][j])
				{
					if(A[i] < A[j] + edge[i][j])
						result = false;
				}
			}
		}
		if(!result)
		{
			cout<<"Inconsistent analysis.\n";
			continue;
		}

/*		bool result = true;
		FOR(i,0,n){
			if(!visited[i])
			{
				if(!dfs(i))
				{
					result = false;
					break;
				}
			}
		}
		
		if(!result)
		{
			cout<<"Inconsistent analysis.\n";
			continue;
		}
		sort(F.begin(),F.end());
		reverse(F.begin(),F.end());
		FOR(i,0,n)
		{
			visited[i] = false;
			A[i] = 0;
		}
		FOR(i,0,n)
		{
			if(visited[i]==false)
			{
				mbfs(i);
			}
		}*/
		ans = 0;
		FOR(i,0,n)
			ans+=A[i];
		cout<<ans<<endl;
		cout<<A[0];
		FOR(i,1,n)
			cout<<" "<<A[i];
		cout<<endl;
	}
	return 0;
}

