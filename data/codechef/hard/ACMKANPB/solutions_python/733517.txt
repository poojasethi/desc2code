#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <sstream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
using namespace std;
#define pb push_back
#define mp make_pair
typedef long long lint;typedef vector<int> vi;typedef vector<vi> vii;typedef pair<int, int> p;
class node{public :    int x;    int y;    int cost;};
bool operator < ( const node & first, const node & second){    return first.cost<second.cost;}
int mat[100][100];
int ans[100];
int main()
{
    int t;scanf("%d",&t);
    while(t--)
    {
        int n,m,c;scanf("%d%d%d",&n,&m,&c);
        for(int x=0;x<n;x++){ans[x]=c;for(int y=0;y<n;y++)mat[x][y]=-1;}
        for(int x=0;x<m;x++)
        {
            int a,b,z;scanf("%d%d%d",&a,&b,&z);
            mat[a-1][b-1]=max(mat[a-1][b-1],z);
        }
        for(int x=0;x<n;x++)
        for(int y=0;y<n;y++)
        for(int z=0;z<n;z++)
        if(mat[y][z]!=-1&&ans[y]-ans[z]<mat[y][z])ans[y]=ans[z]+mat[y][z];
        int fl=0;
        for(int y=0;y<n&&fl==0;y++)
        for(int z=0;z<n;z++)
        if(mat[y][z]!=-1&&ans[y]-ans[z]<mat[y][z]){fl=1;break;}
        if(fl==1)
        printf("Inconsistent analysis.\n");

        else
        {
            int ret=0;
            for(int x=0;x<n;x++)ret+=ans[x];
            cout<<ret<<"\n";
            cout<<ans[0];
            for(int x=1;x<n;x++)cout<<" "<<ans[x];cout<<"\n";
        }

    }
    return 0;
}
