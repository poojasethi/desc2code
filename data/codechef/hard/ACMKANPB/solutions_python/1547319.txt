/* Graph structure Template for ICPC */

//Included Libraries
#include <iostream>
#include <cstdio>
#include <cstring>
#include <limits>
#include <vector>
#include <stack>
#include <queue>
#include <utility>
#include <algorithm>

//General Macros
#define S(a) 		scanf("%d", &a)
#define S_LL(a) 	scanf("%lld", &a)
#define S_DOUBLE(a) 	scanf("%lf", &a)
#define S_STRING(a) 	scanf("%s", a)
#define FOR(i,m,n) 	for((i) = (m); (i) <= (n); (i)++)

//Graph Macros
#define AD_NODE   	pair< int, cost_type >
#define MP(a,b)   	make_pair((a), (b))
#define MAX_VERT  	1001			//Maximum number of verticies
#define MAX_EDGE  	1001			//Maximum number of edge
#define MAX_COST_TYPE	numeric_limits<cost_type>::max() 

using namespace std;

//data type of the cost in pair
typedef int	cost_type;

struct edge_node
{
	int v1;
	int v2;
	cost_type cost;
};



class Graph
{
	//Data Structures (general)
	int 			V;			//The number of vertices
	int 			E;			//The number of edges
	vector< edge_node > 	edge_list;		//Edge _list

	public :

	//for algorithms
	cost_type 		dist[MAX_VERT];		//Distance from the source (in bfs, dijkstra)    / cost of lightest edge (in prim)
	//int 			parent[MAX_VERT];	//The parent of the vertex in traversal (in all) / parent in set hierarchy (in kruskal)



	//constructor and destructors
	Graph(int V, int E);


	//getters and setters
	int getV(){
		return V;
	}

	void setV(int V){
		this->V = V;
	}

	int getE(){
		return E;
	}

	void setE(int E){
		this->E = E;
	}

	void setVE(int V, int E){
		this->V = V;
		this->E = E;
	}

	int getdist(int index){
		return dist[index];
	}

	//Edge _list
	//input
	void edge_list_from_edges();
	//print
	void print_edge_list();

	//Input all List from edges
	template<class T>
		void print_array(T *arr);


	//Single-source shortest path
	bool bellman_ford(int L);
};



int main()
{
	int T, V, E, L;

	S(T);
	while(T--)
	{
		S(V);
		S(E);
		S(L);

		Graph graph(V, E);

		graph.edge_list_from_edges();
		//graph.print_edge_list();

		if (graph.bellman_ford(L))
		{
			int i;
			int sum = 0;
			FOR(i,1,V)
				sum += graph.dist[i];

			printf("%d\n", sum);
			FOR(i,1,V)
				printf("%d ", graph.dist[i]);

			printf("\n");
		}
		else
			printf("Inconsistent analysis.\n");
	}

	return 0;
}


Graph::Graph(int V, int E){
	this -> V = V;
	this -> E = E;
}


/* Input structure assumed (Edges given):

 * T
 * V E
 * vi vj cij
 *   .
 *   .
 * E times
 *   .
 *   .

where :
 * cik - edge weight between i and j
 */
void Graph::edge_list_from_edges()
{
	int i;
	int vertex1;
	int vertex2;
	cost_type cost;

	edge_list.clear();

	FOR(i, 1, E)
	{
		S(vertex1);
		S(vertex2);
		S(cost);

		edge_node node;
		node.v1=vertex2;
		node.v2=vertex1;
		node.cost=cost;

		edge_list.push_back(node);
	}						
}

void Graph::print_edge_list()
{
	vector< edge_node >::iterator it;
	FOR (it, edge_list.begin(), --(edge_list.end()))
		cout << it->v1 << "-"<< it -> v2 << "|"<<  it->cost << endl;

	cout << endl;
}

template <class T>
void Graph::print_array(T *arr)
{
	int i;
	FOR (i, 1, V)
		cout << arr[i] << "\t";

	cout << endl;
}

bool Graph::bellman_ford(int L)			//not sure about implementation
{
	int i;
	FOR(i, 1, V)
		dist[i] = L;

	vector< edge_node >::iterator it;
	FOR(i, 1, V)
	{
		FOR(it, edge_list.begin(), --(edge_list.end()))
		{
			cost_type temp = dist[it->v1] + it->cost;
			if ( dist[it->v2] < temp)
				dist[it->v2] = temp;
		}
	}

	FOR(it, edge_list.begin(), --(edge_list.end()))
	{
		if ( dist[it->v2] < dist[it->v1] + it->cost)
			return false;
	}

	return true;
}
