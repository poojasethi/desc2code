#include <cstdio>
#include <vector>
#include <queue>
#include <utility>
#include <functional>
#include <iostream>
#include <algorithm>
#include <climits>

using namespace std;

typedef long long ll;

class Graph{
	int V;
	vector< vector< pair<int, int> > > adjList;
	
	//for bellman ford
	vector<ll> dist;

	public:

	Graph(int n, int minVal){
		V = n;
		adjList.resize(n+1);
		dist.resize(n+1, minVal);
	}

	void put(int a, int b, int w){
		adjList[a].push_back(make_pair(b, w));
	}

	void bellman(){
		bool updated;
		for (int doit = 1; doit <= V+2; doit++){
			updated = false;
			for (int i = 1; i <= V; i++){
				for (vector< pair<int, int> >::iterator it = adjList[i].begin(); it != adjList[i].end(); it++){
					ll temp = dist[i] + it->second;
					if (dist[it->first] < temp){
					       	dist[it->first] = temp;
						updated = true;
					}
					
				}
			}
		}
		if (updated)
			printf("Inconsistent analysis.\n");
		else{
			ll sum = 0;
			for (int i = 1; i <= V; i++) sum += dist[i];
			printf("%lld\n", sum);
			print();
		}
	}

	void print(){
		for (int i = 1; i <= V; i++) printf("%lld ", dist[i]);
		printf("\n");
	}
};

int main(){
	int T;
	scanf("%d", &T);

	while(T--){
		int N, M, L;
		scanf("%d %d %d", &N, &M, &L);
		Graph graph(N, L);

		for (int i = 0; i < M; i++){
			int a, b, c;
			scanf("%d %d %d", &a, &b, &c);
			graph.put(b, a, c);
		}
		graph.bellman();
	}
	return 0;
}
