#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>

using namespace std;

int main()
{
    int t,n,m,l,edge[101][101],bonus[101];
    int i,j,c;
    cin>>t;
    while(t--)
    {
        cin>>n>>m>>l;
        memset(edge,-1,sizeof(edge));
        for(int x=1;x<=n;x++)
           bonus[x]=l;
        for(int x=1;x<=m;x++)
        {
            cin>>i>>j>>c;
            edge[i][j]=max(edge[i][j],c);
        }
        //bellman ford works for negative edges too and detects the negative weight edge cycles if present
        //Runs O(V*E) times : note here number of edges can be N^2
        for(int x=1;x<=n;x++) //outer loop should run nodes times minimum
        {
            for(int y=1;y<=n;y++)
            {
                for(int z=1;z<=n;z++)
                {
                   if(edge[y][z]>=0) //an edge exists between y and z
                   {
                       if(bonus[z]+edge[y][z]>bonus[y])
                        bonus[y]=bonus[z]+edge[y][z];
                   }
                }
            }
        }
       int fl=0;
        for(int x=1;x<=n;x++)
        {
            for(int y=1;y<=n;y++)
            {
                if(edge[x][y]>=0)
                if(bonus[y]+edge[x][y]>bonus[x]) //graph contains negative edge cycle
                {fl=1; break; }
            }
        }
        if(fl) cout<<"Inconsistent analysis.\n";
        else
        {
            int ans=0;
            for(int x=1;x<=n;x++) {  ans+=bonus[x];} cout<<ans<<endl;
            for(int x=1;x<=n;x++) { if(x==1) cout<<bonus[x]; else cout<<" "<<bonus[x]; }
            cout<<endl;
        }

    }
    return 0;
}
