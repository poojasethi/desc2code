#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>

using namespace std;

#define INT_MAX 0x7fffffff
#define INT_MIN 0x80000000
#define MOD 1000000000

#define llu long long unsigned int
#define lli long long int

#define SI(i)   scanf("%d", &i)
#define PI(i)   printf("%d", i)
#define SD(i)   scanf("%ld", &i)
#define PD(i)   printf("%ld", i)
#define SF(i)   scanf("%f", &i)
#define PF(i)   printf("%f", i)
#define SL(i)   scanf("%lld", &i)
#define PL(i)   printf("%lld", i)
#define SLU(i)  scanf("%llu", &i)
#define PLU(i)  printf("%llu", i)
#define SC(i)   scanf("%c", &i)
#define PC(i)   printf("%c", i)
#define SS(i)   scanf("%s", &i)
#define PS(i)   printf("%s", i)
#define PT(i)   printf(i)
#define NL      printf("\n");
#define SP      printf(" ");
#define TAB     printf("\t")

#define REP(i,n)    for(int i = 0; i < n; i++)
#define FOR(i,a,b)  for(int i = a; i < b; i++)
#define FORR(i,n)   for(int i = n-1; i >=0; i--)

int N,E;
int Edges[10000][3];
int minBonus;
int bonus[101];

bool BellMenFord(){
    REP(i,N-1){
        REP(j,E){
            int u = Edges[j][0];
            int v = Edges[j][1];
            int val = Edges[j][2];

            if(bonus[u] < bonus[v] + val){
                bonus[u] = bonus[v] + val;
            }
        }
    }
    REP(j,E){
        int u = Edges[j][0];
        int v = Edges[j][1];
        int val = Edges[j][2];

        if(bonus[u] < bonus[v] + val){
            return false;
        }
    }
    return true;
}

int main(){
//	freopen("input.txt", "r", stdin);
//	freopen("output.txt", "w", stdout);

    int t;
    SI(t);

    while(t--){
        SI(N);SI(E);SI(minBonus);

        int u,v,val;
        REP(i,E){
            SI(u);SI(v);SI(val);
            Edges[i][0] = u;
            Edges[i][1] = v;
            Edges[i][2] = val;
        }
        REP(i,N){
            bonus[i+1] = minBonus;
        }

        if(BellMenFord()){
            int ans = 0;
            REP(i,N){
                ans+= bonus[i+1];
            }
            PI(ans);NL;
            REP(i,N){
                PI(bonus[i+1]);SP;
            }
            NL;
        }
        else{
            PT("Inconsistent analysis.\n");
        }
    }
}
