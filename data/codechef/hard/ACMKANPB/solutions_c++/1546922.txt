

/*
 **	Author : Amit Bansal
 **     Email  : amitbansal012@gmail.com
 */

#include<stdio.h>
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<math.h>
#include<stdlib.h>
#include<limits.h>

#include<vector>
#include<algorithm>
#include<string>
#include<sstream>

#include<map>
#include<set>
#include<list>
#include<queue>
#include<stack>
#include<bitset>

#include<functional>
#include<numeric>
#include<utility>
#include<iomanip>
#include<ctime>

using namespace std;
typedef long long						LL;
typedef vector<int> 						VI;
typedef vector<LL> 						VLL;
typedef vector<double> 						VD;
typedef vector<string> 						VS;
typedef vector<VI>						VVI;
typedef vector<VLL>						VVLL;
typedef pair<int,int> 						II;
typedef vector<II> 						VII;
typedef vector<VII> 						VVII;
typedef stringstream 						ss;

#define all(v)							(v).begin(),(v).end()
#define fors(i,n)						for(int i=0;i<n;i++)
#define fori(i,x,n)						for(int i=x;i<n;i++)
#define ford(i,x,n)						for(int i=x;i>n;i--)
#define pb(x)							push_back(x)
#define SZ(v)							int(v.size())
#define SORT(v)							sort(all(v))
#define gcd                                                     __gcd
#define maxv(v)							*max_element(all(v))
#define minv(v)							*min_element(all(v))
#define sumv(v)							accumulate(all(v),0);
#define SI 							( {int x;scanf("%d",&x);x;} )
#define sqr(a) 							(a)*(a)
#define mp 							make_pair
#define reset(x,y)						memset(x,y,sizeof x);
#define seive(n) 					VI prime(n+1,1); prime[0]=prime[1]=0; fori(i,2,sqrt(n)+1) if(prime[i]) for(int j=i*i;j<=n;j+=i) prime[j]=0;
#define pi 2*acos(0.0)
#define mod 1000000007
#define inf 1000000000 
#define eps 1e-9

int hx[]={ -2, -2, -1, -1,  1, 1 , 2, 2 };			//moves of a knight(horse)
int hy[]={ -1,  1, -2,  2, -2, 2, -1, 1 };			//sorted: first on x ,then on y

int dx[]={ 1, -1, 0,  0 };					//E,W,N,S
int dy[]={ 0,  0, 1, -1 };

int nx[]={ 1, -1, 0,  0, -1,  1, 1, -1 };			//N-8 neighbourhood
int ny[]={ 0,  0, 1, -1,  1, -1, 1, -1 };			//E,W,N,S,N-W,S-E,N-E,S-W


class pt
{
    public:
	int x,y;
};

typedef vector<pt> 	VP;

/*
   ifstream in ("input.txt");
   cin.rdbuf(in.rdbuf());
   ofstream out ( "output.txt") ;
   cout.rdbuf(out.rdbuf());
 */
/*
   bool comp(pt a1,pt a2)
   {
   if(a1.x<a2.x)
   return true;
   else if(a1.x>a2.x)
   return false;
   else
   {
   if(a1.y<a2.y)
   return true;
   return false;
   }
   }
 */

int n, m, l;
VII cost[200];
int ans[200];


int main()
{
    int t = SI;
    while(t--)
    {
	n = SI, m = SI, l = SI;
	fors(i,n+1)
	{
	    cost[i].clear();
	    ans[i] = l;
	}
	int x, y, c;
	bool fl = true;
	fors(i,m) {
	    x = SI, y = SI, c = SI;
	    x--; y--;
	    cost[x].pb(mp(y,c));
	}
	fors(k,n)
	    fors(i,n)
	    fors(j,cost[i].size())
		ans[i] = max(ans[i], ans[cost[i][j].first] + cost[i][j].second);
	fors(i,n)
	    fors(j,cost[i].size())
	    if(ans[i]<(ans[cost[i][j].first]+cost[i][j].second))
		fl = false;
	if(fl==false)
	    cout<<"Inconsistent analysis."<<endl;
	else {
	    cout<<accumulate(ans,ans+n,0)<<endl;
	    fors(i,n)
		cout<<ans[i]<<" ";
	    cout<<endl;
	}
	/*


	   let dist[v] = 0
	   for each i ∈ [1..V-1]
	   for each (u,w) ∈ E(G)
	   dist[w] = min(dist[w],dist[u]+wt(u,w))
	   for each (u,w) ∈ E(G)
	   if dist[w] > dist[u]+wt(u,w)
	   error "Graph contains negative-weight cycles"
	 */

    }

    return 0;
}

