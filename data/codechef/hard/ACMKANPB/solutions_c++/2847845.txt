#include <algorithm>
#include <assert.h>
#include <fstream>
#include <functional>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

#include <cctype>
#include <climits>
#include <cmath>
#include <cstdlib>
#include <cstdio>
#include <cstring>

using namespace std;
#define CLR(a) memset(a, 0, sizeof(a))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define SZ(V) (int )V.size()
#define ALL(V) V.begin(), V.end()
#define RALL(V) V.rbegin(), V.rend()
#define FORN(i, n) for(i = 0; i < n; i++)
#define FORAB(i, a, b) for(i = a; i <= b; i++)
#define si(n) scanf("%d",&n)
#define ss(s) scanf("%s",s)
#define prin(n) printf("%d\n",n)
#define pll pair < long long int, long long int >
#define pii pair < int, int >
#define psi pair < string, int >
#define PB push_back  
#define MP make_pair
#define F first
#define S second
#define MOD 1000000007LL

typedef pair<int,int> PII;
typedef pair<double, double> PDD;
typedef long long LL;

LL a[10005],b[10005],c[10005],cost[105];

int main()
{
	LL i,j,k,test;
	cin >> test;
	while(test--){
		LL n,m,l;
		cin >> n >> m >> l;
		FORAB(i,1,m)
			cin >> a[i] >> b[i] >> c[i];
		FORAB(i,1,n)
			cost[i]=l;
		FORAB(j,1,n){
			FORAB(i,1,m)
				cost[a[i]]=max(cost[a[i]],cost[b[i]]+c[i]);
		}
		bool flag=true;
		FORAB(i,1,m)
			if(cost[a[i]]<cost[b[i]]+c[i])
				flag=false;
		if(!flag)
			cout << "Inconsistent analysis." << endl;
		else{
			LL total=0;
			FORAB(i,1,n)
				total+=cost[i];
			cout << total << endl;
			FORAB(i,1,n)
				cout << cost[i] << " ";
			cout << endl;
		}
	}
	return 0;
}