using namespace std;
 
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
 
typedef long long LL;
typedef vector<int> VI;
typedef pair<int,int> PI;
 
#define SI ({int x;scanf("%d",&x);x;})
#define SET(v,x) memset(v,x,sizeof v)
 
#define FOR(i,a,b) for(int _n(b),i(a);i<_n;i++) 
#define REP(i,n) FOR(i,0,n)
#define TC REP(kase,SI)
 
#define SZ(v) int(v.size())
#define PB(x) push_back(x)
#define ALL(v) (v).begin(),(v).end()
#define SORT(v) sort(ALL(v))
 
#define MP(x,y) make_pair(x,y)
#define F first
#define S second
 
#define MXN 105
#define MXM 10005
 
int tot;
int sal[MXN];
int N,M,mn;
 
bool ok;
int C[MXN][MXN];
 
int main()
{
	TC
	{
		N=SI; M=SI; mn=SI;
		
		REP(i,N)
		{
			sal[i]=mn;
			REP(j,N) C[i][j]=-1;
			C[i][i]=0;
		}
 
		ok=true;
 
		REP(i,M)
		{
			int u=SI, v=SI, c=SI;
			u--; v--;
			C[u][v] = max(C[u][v],c);
			if(u==v && c>0) ok=false;
		}
 
		if(ok)
		REP(k,2*N+1) REP(i,N) REP(j,N)
			if(C[i][j]!=-1) sal[i] = max( sal[i], sal[j] + C[i][j] );
 
		REP(i,N) REP(j,N)
			if(C[i][j]!=-1 && sal[i]<sal[j]+C[i][j])ok=false;
 
		if(!ok) puts("Inconsistent analysis.");
		else
		{
			tot=0;
			REP(i,N) tot+=sal[i];
			printf("%d\n",tot);
			REP(i,N) printf("%d ",sal[i]);
			printf("\n");
		}
	}
 
	return 0;
}
 