#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<string>
#include<utility>
#include<cassert>
using namespace std;
 
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
 
#define ll long long
 
typedef struct struct_fenwick{
  int size, memory;
  ll *data;
}FenwickTree;
 
FenwickTree FenwickTreeNew(int memory){
  FenwickTree res;
  res.memory=memory; res.data=(ll*)malloc(memory*sizeof(ll));
  return res;
}
 
void FenwickTreeDelete(FenwickTree *t){free(t->data);}
void FenwickTreeInit(FenwickTree *t, int size){int i; t->size=size; rep(i,size) t->data[i]=0;}
void FenwickTreeAdd(FenwickTree *t,int k,ll add){while(k<t->size)t->data[k]+=add, k|=k+1;}
ll FenwickTreeGet(FenwickTree *t,int k){ll res=0; while(k>=0)res+=t->data[k],k=(k&(k+1))-1; return res;}
 
int main(){
  int i, j, k;
  int T, n;
  static int A[100000], d, P[100000];
  static pair<int,int> dat[200000];
  ll res;
  FenwickTree t = FenwickTreeNew(210000);
 
  assert(scanf("%d",&T)==1);
  assert(1<=T&&T<=100);
  while(T--){
    assert( scanf("%d%d",&n,&d)==2 );
    assert(1 <= n && n <= 100000 && 1 <= d && d <= 1000000000);
    rep(i,n) assert( scanf("%d",A+i)==1 ), assert(1 <= A[i] && A[i] <= 1000000000);
    rep(i,n) assert( scanf("%d",P+i)==1 ), assert(0 <= P[i] && P[i] <= 100);
 
    FenwickTreeInit(&t, n);
    rep(i,n){
      dat[2*i]   = make_pair(A[i], 2*i);
      dat[2*i+1] = make_pair(A[i]+d, 2*i+1);
    }
    sort(dat, dat+2*n);
    
    res = 0;
    for(k=2*n-1;k>=0;k--){
      i = dat[k].second;
      if(i % 2 == 0){
        i /= 2;
        res += FenwickTreeGet(&t,i-1) * (100-P[i]);
        FenwickTreeAdd(&t,i,100-P[i]);
      } else {
        i /= 2;
        res += FenwickTreeGet(&t,i-1) * P[i];
        FenwickTreeAdd(&t,i,P[i]);
      }
    }
 
    printf("%.4f\n",res/10000.0);
  }
 
  return 0;
}
 
