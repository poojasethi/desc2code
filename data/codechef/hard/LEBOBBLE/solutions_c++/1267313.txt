#include <cassert>
#include <iostream>
#include <iterator>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cctype>
#include <cstring>

using namespace std;

const int MAXN = 50000;
typedef pair<int, double> pid;
pid X[2*MAXN];
pid temp[2*MAXN];

double calc(int l, int r, pid *from, pid *to) {
    if (l+1 >= r) {
        return 0.0;
    }
    int mid = (l+r)/2;
    double left = calc(l, mid, to, from);
    double right = calc(mid, r, to, from);
    double ret = left + right;
    int i = l;
    int j = mid;
    int k = l;
    double psum = 0.0;
    while (i<mid && j<r) {
        if (from[i].first <= from[j].first) {
            ret += from[i].second * psum;
            to[k++] = from[i++];
        } else {
            psum += from[j].second;
            to[k++] = from[j++];
        }
    }
    while (i < mid) {
        ret += from[i].second * psum;
        to[k++] = from[i++];
    }
    while (j < r) {
        to[k++] = from[j++];
    }
    assert(k == r);
    return ret;
}
int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        int n, d;
        scanf("%d %d", &n, &d);
        int x;
        for (int i=0; i<n; ++i) {
            scanf("%d", &x);
            X[2*i].first = x;
            X[2*i+1].first = x + d;
        }
        for (int i=0; i<n; ++i) {
            scanf("%d", &x);
            X[2*i].second = (100-x)/100.0;
            X[2*i+1].second = x/100.0;
        }
        for (int i=0; i<2*n; ++i) {
            temp[i] = X[i];
        }

        printf("%.4f\n", calc(0, 2*n, X, temp));
    }
    
	return 0;
}
