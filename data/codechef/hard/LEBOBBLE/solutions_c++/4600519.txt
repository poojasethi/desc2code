#include <bits/stdc++.h>

using namespace std;

#define N 50005
int arr[N], val[N], tot, n;
double prob[N];
double sumv[2][N];

void add(int p, double b) {
	p++;
	while (p < N) {
		sumv[0][p] += b;
		sumv[1][p] += 1;
		p += p & (-p);
	}
}

double get(int p) {
	double res = 0;
	p++;
	while (p) {
		res += sumv[0][p];
		p -= p & (-p);
	}
	return res;
}

int get2(int p) {
	int res = 0;
	p++;
	while (p) {
		res += sumv[1][p];
		p -= p & (-p);
	}
	return res;
}

int d;

double solve(int v, double p) {
	double res = 0;
	int id = upper_bound(val, val + tot, v) - val;
	id--;
	int tt = get2(N - 1) - get2(id);
	double ss = get(N - 1) - get(id);
	res += p * tt;
	id = upper_bound(val, val + tot, v - d) - val;
	id--;
	ss = get(N - 1) - get(id) - ss;
	res += p * ss;
	return res;	
}

int main() {
	int test;
	scanf("%d", &test);
	for (int cas = 1; cas <= test; cas++) {
		scanf("%d%d", &n, &d);
		tot = 0;
		for (int i = 1; i <= n; i++) {
			scanf("%d", arr + i);
			val[tot++] = arr[i];
		}

		sort(val, val + tot);
		tot = unique(val, val + tot) - val;

		for (int i = 0; i < N; i++) {
			sumv[1][i] = 0;
			sumv[0][i] = 0;
		}	

		for (int i = 1; i <= n; i++) {
			int a;
			scanf("%d", &a);
			prob[i] = (double)a / 100;
		}

		double res = 0;

		for (int i = 1; i <= n; i++) {
			res += solve(arr[i] + d, prob[i]);
			res += solve(arr[i], 1 - prob[i]);
			add(lower_bound(val, val + tot, arr[i]) - val, prob[i]);
		}	

		printf("%.4f\n", res);
	}	
	return 0;
}

