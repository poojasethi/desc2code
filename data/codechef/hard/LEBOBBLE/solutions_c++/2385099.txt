#include<iostream>
#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<math.h>
#include<string>
#include<sstream>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<vector>
#include<algorithm>
#pragma comment(linker, "/STACK:16777216")
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define sz(x) (int)(x).size()
#define LL long long
#define bit __builtin_popcountll
#define sqr(x) (x) * (x)
using namespace std;
typedef pair<int, int> pii;
const double eps = 1e-9;
const double pi = acos(-1.0);
const int maxn = (int)5e4 + 10;
int a[maxn],b[3 * maxn],m;
double p[maxn],f[2][3 * maxn];
void add(int value, double val, int w) {
	int id = lower_bound(b,b + m,value) - b;
	while(id < 3 * maxn) {
		f[w][id] += val;
		id = id | (id + 1);
	}
}
double get(int value, int w) {
	int id = lower_bound(b,b + m,value) - b;
	--id;
	double res = 0;
	while(id >= 0) {
		res += f[w][id];
		id = (id & (id + 1)) - 1;
	}
	return res;
}
void solve() {
	int n,d; cin >> n >> d;
	for (int i = 0; i < n; i++) {
		scanf("%d",&a[i]);
		b[3 * i] = a[i];
		b[3 * i + 1] = a[i] + d;
		b[3 * i + 2] = a[i] - d;
	}
	for (int i = 0; i < n; i++) {
		cin >> p[i]; p[i] /= 100.0;
	}
	sort(b,b + 3 * n);
	m = unique(b,b + 3 * n) - b;
	for (int i = 0; i < 3 * maxn; i++) {
		f[0][i] = f[1][i] = 0.0;
	}
	double res = 0.0;
	for (int i = n - 1; i >= 0; i--) {
		res += p[i] * get(a[i] + d,0);
		res += (1.0 - p[i]) * get(a[i],0);
		res += p[i] * get(a[i],1);
		res += (1.0 - p[i]) * get(a[i] - d,1);
		add(a[i],p[i],1);
		add(a[i],1.0 - p[i],0);
	}
	printf("%.4lf\n",res);
}
int main()
{
	#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
	int T; cin >> T;
	while(T--) solve();
	return 0;
}
