#include <stdio.h>
#include <algorithm>
#include <vector>
#include <cstring>
#define maxn 1000000
using namespace std;
long bit[maxn+1] = {0};
pair<int,int> expected[2*maxn];
int n;
long query(int x)
{
	long sum = 0;
	while (x > 0) {
		sum += bit[x];
		x -= (x&-x);
	}
	//printf("%d\n",sum);
	return sum;
}
void update(int val,int x)
{
	while (x <= n) {
		bit[x] += val;
		x += (x&-x);
	}
}
int main()
{
	int t;
	int d;
	int ar[maxn+1];
	int p[maxn+1];
	scanf("%d",&t);
	while (t--) {
		scanf("%d%d",&n,&d);
		int i;
		i = 0;
		while (i < n) {
			scanf("%d",&ar[i]);
			i++;
		}
		i = 0;
		while (i < n) {
			scanf("%d",&p[i]);
			expected[2*i] = pair<int,int>(ar[i]+d,2*i);
			expected[2*i+1] = pair<int,int>(ar[i],2*i+1);
			i++;
		}
		sort(expected,expected+2*n);
		long long ans = 0;
		for(i = 2*n-1; i >= 0; i--) {
			int indx = (expected[i].second);
			if(indx%2) {
				indx /= 2;
				ans += (100-p[indx])*query(indx);
				update(100-p[indx],indx+1);
			}
			else{
				indx /= 2;
				ans += (p[indx])*query(indx);
				update(p[indx],indx+1);
			}
		}
		printf("%.4lf\n",(double)ans/10000.0);
		memset(bit,0,sizeof(bit));
	}
	return 0;
}

