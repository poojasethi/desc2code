#include <iostream>
#include <cstdio>
#include <climits>
#include <algorithm>
#include <queue>
#include <cstring>
#include <cmath>
#include <vector>
#include <stack>
#include <set>
#include <map>
#include <deque>
#include <string>

#define all(i,n) for(i = 0; i < (n); i++)
#define SET(p) memset(p,-1,sizeof(p))
#define CLR(p) memset(p,0,sizeof(p))
#define maX(a,b)	((a)>(b)?(a):(b))
#define miN(a,b)	((a)<(b)?(a):(b))
#define S(n)	scanf("%d",&n)
#define P(n)	printf("%d\n",n)
#define Sl(n)	scanf("%lld",&n)
#define Pl(n)	printf("%lld\n",n)
#define Sf(n)   scanf("%lf",&n)
#define Ss(n)   scanf("%s",n)
#define LL long long
#define ULL unsigned long long
#define pb push_back
using namespace std;
map <int,int> mp,hash;
int a[50005],b[100005];
double p[50005];
double t[100005];
double query(int idx)
{
    double res=0;
    while (idx > 0)
    {
        res+=t[idx];
		idx -= (idx & -idx);
	}
	return res;
}
void update(int idx,int max,double x)
{
    while (idx <= max)
    {
        t[idx]+=x;
		idx += (idx & -idx);
	}
}
int main()
{
int ts,n,i,j,s,d;
double ans,a1,a2,sum=0;
S(ts);
while(ts--)
{
    mp.clear();hash.clear();
    S(n);S(d);
    s=0;ans=0;
    for(i=1;i<=n;i++)
    {
        S(a[i]);
        j=a[i];
        if(mp[j]==0)
        {
            s++;
            b[s]=j;
            mp[j]=1;
        }
        j=a[i]+d;
        if(mp[j]==0)
        {
            s++;
            b[s]=j;
            mp[j]=1;
        }
    }
    for(i=1;i<=n;i++)
    {
        scanf("%lf",&p[i]);
        p[i]=p[i]/100;
    }
    sort(b+1,b+s+1);
    for(i=1;i<=s;i++)
        hash[b[i]]=i;
    for(i=0;i<=s;i++)
    {
        t[i]=0.0;
    }
    for(i=1;i<=n;i++)
    {
        //printf("%d %d\n",a[i],hash[a[i]]);
        //printf("%d %d\n",a[i]+d,hash[a[i]+d]);
        j=hash[a[i]];
        ans+=(1-p[i])*(query(s)-query(j));
        //printf("      %lf\n",ans);
        j=hash[a[i]+d];
        ans+=p[i]*(query(s)-query(j));
        j=hash[a[i]];
        update(j,s,1-p[i]);
        j=hash[a[i]+d];
        update(j,s,p[i]);
        //printf("%lf\n",ans);
    }
    printf("%.4lf\n",ans);
}
return 0;
}
