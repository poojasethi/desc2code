#include <iostream>
#include <string>
#include <sstream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <list>
#include <map>
#include <set>
#include <fstream>
#include <iomanip>

using namespace std;

double ex = 0;
int d;
int c[50002] = {0};
vector<int> v(50001);
vector<int> pr(50001);
vector<int> temp(50001);
vector<int> temp1(50001);

void merge(int p, int r)
{
    // calculation
    int mid = (p+r)/2;
    c[mid] = 0;
    c[mid+1] = pr[mid+1];
    for (int ii = mid+2; ii <= r; ii++) c[ii] = c[ii-1] + pr[ii];
    vector<int>::iterator itlow,itlow1,itlow2;

    for (int ii = p; ii <= mid; ii++)
    {
        itlow = lower_bound(v.begin()+mid+1,v.begin()+r+1,v[ii]-d);

        if (itlow != (v.begin()+r+1))
        {
            ex = ex + int(itlow - (v.begin()+mid+1));
        }
        else
        {
            ex = ex + (r - mid);
            continue;
        }

        itlow1 = lower_bound(v.begin()+mid+1,v.begin()+r+1,v[ii]);

        if (itlow1 != (v.begin()+r+1))
        {
            if (distance(itlow,itlow1) > 0)
            {
                int q = c[(int(itlow1-(v.begin()+mid+1)))-1+mid+1] - c[(int(itlow-(v.begin()+mid+1)))-1+mid+1];
                double z = (1 - ((double)(pr[ii]))/100)*((double)q)/100;
                int qq = (int)(itlow1-itlow);
                ex = ex + (double)qq - z;
            }
        }
        else
        {
            // calculation 2
            int q = c[r] - c[int(itlow-(v.begin()+mid+1))-1+mid+1];
            double z = (1 - ((double)(pr[ii]))/100)*((double)q)/100;
            int qq = ((int)(v.begin()+r-itlow))+1;
            ex = ex + (double)qq - z;
            continue;
        }

        itlow2 = lower_bound(v.begin()+mid+1,v.begin()+r+1,v[ii]+d);

        if (itlow2 != (v.begin()+r+1))
        {
            if (distance(itlow1,itlow2) > 0)
            {
                int q = c[int(itlow2-(v.begin()+mid+1))-1+mid+1] - c[int(itlow1-(v.begin()+mid+1))-1+mid+1];
                int qq = int(itlow2-itlow1);
                double z = (double)qq - ((double)q)/100;
                ex = ex + (((double)(pr[ii]))/100)*z;
            }
        }
        else
        {
            int q = c[r] - c[int(itlow1-(v.begin()+mid+1))-1+mid+1];
            int qq = int(v.begin()+r-itlow1)+1;
            double z = (double)qq - ((double)q)/100;
            ex = ex + (((double)(pr[ii]))/100)*z;
            continue;
        }
    }

    // normal merge
    int i1 = 0,i2 = p, i3 = mid+1;
    while (i2 <= mid && i3 <= r)
        if (v[i2] < v[i3])
        {
            temp[i1] = v[i2];
            temp1[i1] = pr[i2];
            i1++; i2++;
        }
        else
        {
            temp[i1] = v[i3];
            temp1[i1] = pr[i3];
            i1++; i3++;
        }

    while (i2 <= mid)
    {
        temp[i1] = v[i2];
        temp1[i1] = pr[i2];
        i1++; i2++;
    }

    while (i3 <= r)
    {
        temp[i1] = v[i3];
        temp1[i1] = pr[i3];
        i1++; i3++;
    }

    for (int iii = p; iii <= r; iii++)
    {
        v[iii] = temp[iii-p];
        pr[iii] = temp1[iii-p];
    }
}
void merge_sort(int p,int r)
{
    if (p < r)
    {
        int mid = (p + r)/2;
        merge_sort(p, mid);
        merge_sort(mid + 1, r);
        merge(p,r);
    }
}
int main()
{
    int tt,n,x;
    scanf("%d\n",&tt);
    for (int i = 1; i <= tt ; i++)
    {
        scanf("%d %d\n",&n,&d);
        ex = 0;

        for (int j = 0; j < n; j++)
        {
            scanf("%d",&x);
            v[j] = x;
        }
        scanf("\n");
        for (int j = 0 ; j < n ; j++)
        {
            scanf("%d",&x);
            pr[j] = x;
        }
        //for (int ii = 0 ; ii< n ; ii++) cout<<v[ii]<<" "<<pr[ii]<<endl;
        merge_sort(0,n-1);
        cout<<fixed;
        cout<<setprecision(4);
        cout<<ex<<endl;
        if (i < tt) scanf("\n");
        //for (int ii = 0 ; ii< n ; ii++) cout<<v[ii]<<" "<<pr[ii]<<endl;
    }
	return 0;
}
