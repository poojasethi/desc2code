#include <cstdio>
#include <vector>
 
using namespace std;

char *fstart; 
const int BUF=13000000; 
char buf [BUF];  

void skip() { 
  while (*fstart != 0 && !('0' <= *fstart && *fstart <= '9')) fstart++; 
} 

void GETNUM(int & n){ 
  skip(); 
  n=0; 
  while ('0' <= *fstart && *fstart <= '9') { 
    n = ( n << 3) + ( n << 1) + *fstart-'0', ++fstart; 
  } 
} 

void take_input() { 
  int sz=fread(buf, sizeof(char), BUF, stdin); 
  buf[sz]=0; 
  fstart=buf;  
} 

long long  anz;
 
struct Z	{
	int B;
	int P;
};
 
Z arr [100010];
Z result [100010];
 
void merge(Z* a,Z* b,int size1,int size2,Z* Result)
{
	long long sum = 0;
    int i=0;int j=0;int r = 0;
	for ( i = 0; i < size1; i++)
		sum += ( a + i) -> P;
	i = 0;	
    while(i+j<size1+size2)
    {
        if(i<size1&&j<size2)
        {
 
            if((a + i) -> B <= (b + j) -> B)
            {
				sum -= ( a + i) -> P; 
                result [r++] = a[i++];
            }
            else
            {
				anz += ( sum * ( b + j) -> P);
                result [r++] = b[j++];
            }
        }
        else if(i==size1)
        {
            while(j<size2)
            result [r++] = b[j++];
            
            break;
        }
        else
        {
            while(i<size1)
            result [r++] = a[i++];
 
            break;
        }
    }
    
    for(int i=0;i<r;i++)
    Result[i]=result[i];
}
 
void sort(Z *a,int size)
{
    if(size==1)
    return ;
    
    int size1=size/2;
    int size2=size-size1;
    
    sort(a,size1);
    sort(a+size1,size2);
    
    merge(a,a+size1,size1,size2,a);
 
}
 
main ()	{
	take_input ();
	int T, n, i, d, temp;
	GETNUM( T);
	while ( T--)	{
		GETNUM( n); GETNUM( d);
		for ( i = 0; i < 2 * n; i += 2)	{
			GETNUM( arr [i]. B);
			arr [i + 1].B = arr [i].B + d;
		}
		for ( i = 0; i < 2 * n; i += 2)	{
			GETNUM( temp);
			arr [i].P = 100 - temp;
			arr [i + 1].P = temp;
		}			
		anz = 0;
		sort ( arr, 2 * n);
		printf ( "%lld.%04lld\n", anz / 10000, anz % 10000);;
	}
	return 0;
} 