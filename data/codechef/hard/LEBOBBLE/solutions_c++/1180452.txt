#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;
int a[50009];
int p[50009];
vector<pair<int,int> > nums;
long long tree[2000009] = {0};

int n,d;

long long int read(int idx){
    long long int sum = 0;
    while (idx > 0){
        sum += tree[idx];
        idx -= (idx & -idx);
    }
    return sum;
}

void update(int idx , int val){
//    printf(">>updating at %d, by %d\n", idx, val);
    while (idx <= 2000009){
        tree[idx] += val;
        idx += (idx & -idx);
    }
}


double compute() {
    nums.clear();
    memset(tree, 0, sizeof(tree));
    int i;
    for(i=1; i<=n; ++i) {
        nums.push_back(make_pair(a[i-1], i*2));
        nums.push_back(make_pair(a[i-1]+d, i*2+1));
    }
    int pos;
    sort(nums.begin(), nums.end());
    long long ans = 0;
    for(i=nums.size()-1; i>=0; --i) {
  //      printf(">>i = %d ans = %lld\n",i, ans);
        pos = nums[i].second;
        if(pos%2 == 0) {
            pos = pos/2;
            ans += read(pos-1)*(100-p[pos-1]);
            update(pos, 100-p[pos-1]);
        } else {
            pos = pos/2;
            ans += read(pos-1)*(p[pos-1]);
            update(pos, p[pos-1]);
        }
    }
    return ans/10000.0;
}

int main() {
    int t;
    int i;
    scanf("%d", &t);
    while(t--) {
        scanf("%d%d", &n, &d);
        for(i=0; i<n; ++i) {
            scanf("%d", &a[i]);
        }
        for(i=0; i<n; ++i) {
            scanf("%d", &p[i]);
        }
        printf("%.4lf\n", compute());
    }
}
