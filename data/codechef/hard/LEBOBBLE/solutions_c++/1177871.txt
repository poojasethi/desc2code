#include<iostream>
#include<cstdio>
#include<cstdlib>
#define LL long long int
using namespace std;  

#define getcx getchar_unlocked
inline void inp( int &n )//fast input function
{
        n=0;
        int ch=getcx();int sign=1;
        while( ch < '0' || ch > '9' ){if(ch=='-')sign=-1; ch=getcx();}

        while(  ch >= '0' && ch <= '9' )
                n = (n<<3)+(n<<1) + ch-'0', ch=getcx();
		n=n*sign;
}

LL  merge_sort(int final[][2],int temp[][2], int left, int right);
LL merge(int final[][2], int temp[][2],int left, int mid, int right);
  
LL expect(int final[][2], int size)
{
	int temp[size][2];
	return merge_sort(final,temp,0,size-1);
}
  
LL merge_sort(int final[][2], int temp[][2], int left, int right)
{
  int mid;
  LL p_prod = 0;
  if (right > left)
  {
    mid = (right + left)/2;
  
    p_prod  = merge_sort(final,temp, left, mid); 
    p_prod += merge_sort(final, temp,mid+1, right);

    p_prod += merge(final, temp,left, mid+1, right);
  }
  return p_prod;
}
  
LL merge(int final[][2],int temp[][2], int left, int mid, int right)
{
  int i, j, k,t;

  LL p_prod = 0;
  LL left_sum=0;
 
  i = left;
  j = mid;  
  k = left;
	for(t=left;t<=mid-1;t++)
	left_sum+=final[t][1];

  while ((i <= mid - 1) && (j <= right))
  {
    if (final[i][0] <= final[j][0])
    {
      temp[k][0]=final[i][0];
      temp[k][1]=final[i][1];
	left_sum-=final[i][1];
	k++;
	i++;
    }
    else
    {
	p_prod+= (left_sum)*(final[j][1]);
    	temp[k][0]=final[j][0];
	temp[k][1]=final[j][1];
	k++;
	j++;	
    }
  }
  while (i <= mid - 1)
    {
	temp[k][0] = final[i][0];
	temp[k][1]=final[i][1];
  	
	k++;
	i++;
	}
 
  while (j <= right)
    {
         temp[k][0] = final[j][0];
        temp[k][1]=final[j][1];
  
        k++;
        j++;

	}

for (i=left; i <= right; i++)
 {   
	final[i][0] = temp[i][0];
	final[i][1] = temp[i][1]; 

}
  return p_prod;
}
  // we are done Lucky Bastard
int main()
{
  	int n,t,d,i,j,size,a,p;
	LL ans;
	inp(t);
	while(t--)
	{
		inp(n),inp(d);
		size=2*n;
		int final[size][2];
		for(i=0,j=0;i<(size-1),j<n;i+=2,j++)
		{
			inp(a);
			final[i][0]=a;
			final[i+1][0]=a+d;
		}
		for(i=0,j=0;i<(size-1),j<n;i+=2,j++)
		{
			inp(p);
			final[i][1]=100-p;
			final[i+1][1]=p;
		}		
		ans=expect(final,size);
		long double EX;
		EX=(long double)ans/10000.0000;
		printf("%0.4Lf\n",EX);
	}

	 return 0;
}