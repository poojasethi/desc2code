#include<iostream>
#include<map>
#include<vector>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<cstdio>
#include<fstream>
using namespace std;
#define abs(x) ((x)>0?(x):-(x))
#define MaxVal 2*n
#define lld signed long long int
#define pp pop_back()
#define ps(x) push_back(x)
#define tkint(n) scanf("%d",&n)
#define tkchar(ch) scanf("%c",&ch)
#define tklong(n) scanf("%I64d",&n)
map<lld,int> mp;
int n,p[50000+5];
lld b[50000+5],tree[2*50000+5];
vector<lld>tmp;
int sum_query(int idx){
	int sum = 0;
	while (idx > 0){
		sum += tree[idx];
		idx -= (idx & -idx);
	}
	return sum;
}
void sum_update(int idx ,int val){
	while (idx <= MaxVal){
		tree[idx] += val;
		idx += (idx & -idx);
	}
}
int main()
{
	int t,tt,temp,x;
	lld k,sum;
	cin>>t;
	while(t--)
	{
		mp.clear();
		cin>>n>>k;
		tmp.clear();
		tmp.ps(0);
		for(int i=1;i<=n;++i)scanf("%llu",&b[i]),tmp.ps(b[i]),tmp.ps(b[i]+k);
		for(int i=1;i<=n;++i)tkint(p[i]);
		sort(tmp.begin()+1,tmp.end());
		reverse(tmp.begin()+1,tmp.end());
		for(int i=2*n;i>=1;--i)
		{
			tree[i]=0;
			mp[tmp[i]]=i;
		}
		double ans=0;
		for(int i=1;i<=n;++i)
		{
			int mpb=mp[b[i]];
			int mpbk=mp[b[i]+k];
			ans+=(1-p[i]/100.0)*sum_query(mpb-1)/100.0;
			ans+=(p[i]/100.0)*sum_query(mpbk-1)/100.0;
			sum_update(mpb,100-p[i]);
			sum_update(mpbk,p[i]);
		}
		printf("%0.4f\n",ans);
	}
}
