#include<cstdio>
#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<set>
#include<cmath>
#include<bitset>
#include<map>
#include<queue>
#define test(t) while(t--)
#define cin(n) scanf("%d",&n)
#define cout(n) printf("%d\n",n)
#define rep(i,a,n) for(i=a;i<n;i++)
#define vi vector<int>
#define vii vector< pair<int,int> >
#define mii map<int,int>
#define pb push_back
#define mp make_pair
#define imax 1000000007
#define ll long long
using namespace std;
typedef struct struct_fenwick{
  int size, memory;
  ll *data;
}FenwickTree;

FenwickTree FenwickTreeNew(int memory){
  FenwickTree res;
  res.memory=memory; res.data=(ll*)malloc(memory*sizeof(ll));
  return res;
}

void FenwickTreeDelete(FenwickTree *t){free(t->data);}
void FenwickTreeInit(FenwickTree *t, int size){int i; t->size=size; for(i=0;i<size;i++) t->data[i]=0;}
void FenwickTreeAdd(FenwickTree *t,int k,ll add){while(k<t->size)t->data[k]+=add, k|=k+1;}
ll FenwickTreeGet(FenwickTree *t,int k){ll res=0; while(k>=0)res+=t->data[k],k=(k&(k+1))-1; return res;}

int main()
{
    int t,n,d,p[50000],i,x,y;ll res;
    vector< pair<int,int> > q;
    cin(t);
    FenwickTree bit = FenwickTreeNew(50000);
    test(t)
    {
        cin(n);cin(d);
        q.clear();
        for(i=0;i<n;i++)
        {
            cin(x);
            q.pb(mp(x,2*i));q.pb(mp(x+d,2*i+1));
        }
        for(i=0;i<n;i++)
        {
            cin(p[i]);
        }
        sort(q.begin(),q.end());
        res=0;
        FenwickTreeInit(&bit,n);
        for(i=2*n-1;i>=0;i--)
        {
            x=q[i].second;
            if(x%2) y = p[x>>1];
            else y = 100 - p[x>>1];
            res+=FenwickTreeGet(&bit,(x>>1)-1)*y*1LL;
            FenwickTreeAdd(&bit,x>>1,y);
        }
        printf("%0.4lf\n",res/10000.);
    }
}
