#include <stdio.h>
#include <stdlib.h>
#include<iostream>
#include<iomanip>
using namespace std;
int a[50008];
int  p[500008];
int b[100008];
int w[100008];
int tmpw[100008];  
long long  _mergeSort(int arr[], int temp[], int left, int right);
long long merge(int arr[], int temp[], int left, int mid, int right);
  

long long mergeSort(int arr[], int array_size)
{
     int temp[array_size];
   // int *temp = (int *)malloc(sizeof(int)*array_size);
    return _mergeSort(arr, temp, 0, array_size - 1);
}
  

long long _mergeSort(int arr[], int temp[], int left, int right)
{
  int mid;
  long long inv_count = 0;
  if (right > left)
  {
    
    mid = (right + left)/2;
  
   
    inv_count  = _mergeSort(arr, temp, left, mid);
    inv_count += _mergeSort(arr, temp, mid+1, right);
  
    
    inv_count += merge(arr, temp, left, mid+1, right);
  }
  return inv_count;
}
  

long long merge(int arr[],int temp[], int left, int mid, int right)
{
  int i, j, k;
  long long inv_count = 0;
  
  i = left; 
  j = mid;  
  k = left; 
  long long res=0;
  for(int h=left;h<mid;h++)
  res+=w[h];
  while ((i <= mid - 1) && (j <= right))
  {
    if (arr[i] <= arr[j])
    {
      temp[k++] = arr[i++];
      tmpw[k-1]=w[i-1];
      res-=w[i-1];
    }
    else
    {
      temp[k++] = arr[j++];
      tmpw[k-1]=w[j-1];
      inv_count = inv_count + res*w[j-1];
    }
  }
  
  
  while (i <= mid - 1)
    {
        tmpw[k]=w[i];
        temp[k++] = arr[i++];
    }
  
 
  while (j <= right)
    {
        tmpw[k]=w[j];
        temp[k++] = arr[j++];
    }
  

  for (i=left; i <= right; i++)
   {
               w[i]=tmpw[i];
                arr[i] = temp[i];
   }
  
  return inv_count;
}
  

int main()
{
  /*int arr[] = {1, 20, 6, 4, 35};
  printf(" Number of inversions are %d \n", mergeSort(arr, 5));
  getchar();
*/
  int t;
  scanf("%d",&t);
  while(t--)
  {
            int n,d;
            scanf("%d %d",&n,&d);
            for(int i=0;i<n;i++)
            {
                    scanf("%d",a+i);
            }
               for(int i=0;i<n;i++)
            {
                    scanf("%d",p+i);
            }
            int len=0;
            for(int i=0;i<n;i++)
            {
                    b[len]=a[i];
                    w[len]=100-p[i];
                    len++;
                    b[len]=a[i]+d;
                    w[len]=p[i];
                    len++;
            }
            
            long long ans=mergeSort(b,len);
            double res=ans/10000.00000;
            cout<<fixed<<setprecision(4)<<res<<"\n";
            
            
  }
 
}
