//lyrically's solution

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <cassert>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <utility>
#include <numeric>
#include <algorithm>
#include <bitset>
#include <complex>
 
using namespace std;
 
typedef unsigned uint;
typedef long long Int;
typedef vector<int> vint;
typedef pair<int,int> pint;
#define mp make_pair
 
template<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; }
template<class T> void chmin(T &t, T f) { if (t > f) t = f; }
template<class T> void chmax(T &t, T f) { if (t < f) t = f; }
int in() { int x; scanf("%d", &x); return x; }
 
const int INF = 1001001001;
 
int N, K;
int A[510];
int dp[510][510];
 
int main() {
	int i;
	int k, n;
	
	for (int TC = in(); TC--; ) {
		N = in();
		K = in();
		for (i = 0; i < N; ++i) {
			A[i] = in();
		}
		sort(A, A + N);
		memset(dp, 0x3f, sizeof(dp));
		for (n = 0; n <= N; ++n) {
			dp[0][n] = 0;
		}
		for (k = 1; k <= K; ++k) {
			for (n = k; n <= N; ++n) {
				for (i = 0; i < n; ++i) {
					chmin(dp[k][n], dp[k - 1][i] + A[i] * (n - i));
				}
//cout<<k<<" "<<n<<" : "<<dp[K][N]<<endl;
			}
		}
		printf("%d\n", dp[K][N]);
	}
	
	return 0;
}