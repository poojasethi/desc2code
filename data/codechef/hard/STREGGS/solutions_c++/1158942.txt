#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <stack>
#include <iostream>
#include <algorithm>
using namespace std;

typedef long long LL;
const int MAX_N = 1000 + 10;
const LL INF = 1000000000000LL;

int N, K;
int a[MAX_N];
LL f[MAX_N], g[MAX_N];
stack<pair<int, LL> > st;

void inputData()
{
	scanf("%d%d", &N, &K);
	for(int i = 1; i <= N; ++ i)
		scanf("%d", &a[i]);
	sort(a + 1, a + N + 1);
}

double get(pair<int, LL> u, pair<int, LL> v)
{
	return ((double)u.second - (double)v.second) / ((double)v.first - (double)u.first);
}

void insert(pair<int, LL> u1)
{
	pair<int, LL> u2, u3;
	for( ; st.size() > 1; ) {
		u2 = st.top(); st.pop();
		u3 = st.top();
		if (get(u1, u2) >= get(u2, u3)) 
			break;
	}
	st.push(u2);
	st.push(u1);
}

void erase(int x)
{
	pair<int, LL> u1, u2;
	for( ; st.size() > 1; ) {
		u1 = st.top(); st.pop();
		u2 = st.top();
		if (x > get(u1, u2))
			break;
	}
	st.push(u1);
}

LL calc(int u, pair<int, LL> v)
{
	return v.second + v.first * a[u] - u * a[u];
}

void deal()
{
	for( ; ! st.empty(); st.pop());
	for(int i = N; i >= 1; -- i) {
		insert(make_pair(i + 1, f[i + 1]));
		erase(a[i]);
		g[i] = calc(i, st.top());
	}
	for(int i = 1; i <= N; ++ i)
		f[i] = g[i];
}

void calcAns()
{
	for(int i = 1; i <= N; ++ i)
		f[i] = INF;
	f[N + 1] = 0;
	for(int cur = 0; cur < K; ++ cur) {
		deal();
		f[N + 1] = INF;
	}
	LL ret = INF;
	for(int i = 1; i <= N; ++ i)
		ret = min(ret, f[i]);
	cout << ret << endl;
}

void solve()
{
	inputData();
	calcAns();
}

int main()
{
	int T; for(scanf("%d", &T); T --; )
		solve();
	return 0;
}