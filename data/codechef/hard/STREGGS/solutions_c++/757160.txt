//ACRush's solution

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <string.h>
 
using namespace std;
 
typedef long long int64;
typedef unsigned long long uint64;
#define two(X) (1<<(X))
#define twoL(X) (((int64)(1))<<(X))
#define contain(S,X) (((S)&two(X))!=0)
#define containL(S,X) (((S)&twoL(X))!=0)
const double pi=acos(-1.0);
const double eps=1e-11;
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;}
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;}
template<class T> inline T sqr(T x){return x*x;}
typedef pair<int,int> ipair;
#define SIZE(A) ((int)A.op())
#define LENGTH(A) ((int)A.length())
#define MP(A,B) make_pair(A,B)
#define PB(X) push_back(X)
 
const int maxn=500+5;
const int oo=1000000000;
 
int n,k,a[maxn];
int f[maxn],d[maxn],g[maxn];
int q[maxn];
 
double p(int x,int y)
{
	return (double)(d[x]-d[y])/(x-y);
}
int main()
{
#ifdef _MSC_VER
	freopen("input.txt","r",stdin);
#endif
	int testcase;
	for (scanf("%d",&testcase);testcase>0;testcase--)
	{
		scanf("%d%d",&n,&k);
		for (int i=0;i<n;i++) scanf("%d",&a[i]);
		sort(a,a+n);
		reverse(a,a+n);
		a[n]=0;
		for (int i=0;i<=n;i++) f[i]=0;
		for (;k>0;k--) 
		{
			int op=1;
			g[0]=oo;
			q[0]=0;
			for (int i=0;i<=n;i++) d[i]=f[i]+a[i]*(i+1);
			for (int i=1;i<=n;i++)
			{
				for (;op>=2 && d[q[op-1]]-d[q[op-2]]>=a[i]*(q[op-1]-q[op-2]);op--);
				g[i]=d[q[op-1]]-a[i]*(q[op-1]+1);
				for (;op>=2 && (double)(d[q[op-1]]-d[q[op-2]])*(i-q[op-2])>=(double)(q[op-1]-q[op-2])*(d[i]-d[q[op-2]]);op--);				
				q[op++]=i;
			}
			for (int i=0;i<=n;i++) f[i]=g[i];
		}
		printf("%d\n",f[n]);
	}
	return 0;
}
 