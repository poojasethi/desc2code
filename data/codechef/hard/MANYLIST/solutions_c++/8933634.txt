#include<bits/stdc++.h>
using namespace std;
struct treenode {
    int l, r, add;
} tree[4000005];
set<pair<int, int> > S[1000005];
int n, t, type, l, r, x, el;
void init (int pos, int l, int r) {
    tree[pos].l = l;
    tree[pos].r = r;
    tree[pos].add = 0;
    if (l < r) {
        init(2*pos+1, l, (l + r) / 2);
        init(2*pos+2, (l + r) / 2 + 1, r);
    }
}
void modify(int pos, int l, int r, int j) {
    if(tree[pos].l == l && tree[pos].r == r)
        tree[pos].add += j;
    else {
        if(l <= min(r, tree[2*pos+1].r))
            modify(2*pos+1 ,l , min(r, tree[2*pos+1].r), j);
        if(max(l, tree[2*pos+2].l) <= r)
            modify(2*pos+2, max(l, tree[2*pos+2].l), r, j);
    }
}
int query(int pos, int j) {
    if(tree[pos].l == tree[pos].r)
        return tree[pos].add;
    if(tree[2*pos+1].r >= j)
        return tree[pos].add + query(2*pos+1, j);
    else
        return tree[pos].add + query(2*pos+2, j);
}
void add_segment(int el, int l, int r) {
    set<pair<int , int> > :: iterator sb = S[el].begin();
    set<pair<int , int> > :: iterator se = S[el].end();
    set<pair<int , int> > :: iterator start = S[el].lower_bound(make_pair(l, -1));
    if(S[el].size() == 0) {
        S[el].insert(make_pair(l, r));
        modify(0, l, r, 1);
        return ;
    }
    if(start == se) {
        --start;
    }
    else if(start != sb) {
        --start;
    }
    while(start != se) {
        pair<int, int> cur_seg = *start;
        if(cur_seg.second < l) {
            ++start;
            continue;
        }
        if(cur_seg.first > r) {
            break;
        }
        if(cur_seg.first < l) {
            l = cur_seg.first;
        }
        if(cur_seg.second > r) {
            r = cur_seg.second;
        }
        modify(0, cur_seg.first, cur_seg.second, -1);
        set<pair<int, int> > :: iterator next = start;
        ++next;
        S[el].erase(start);
        start = next;
    }
    S[el].insert(make_pair(l, r));
    modify(0, l, r, 1);
}
int main() {
    cin>>n>>t;
    init(0, 0, n-1);
    while(t--) {
        cin>>type;
        if(type == 0) {
            cin>>l>>r>>el;
            l--;r--;
            add_segment(el, l, r);
        }
        else {
            cin>>x;
            x--;
            cout<<query(0, x)<<endl;
        }
    }

    return 0;
}
