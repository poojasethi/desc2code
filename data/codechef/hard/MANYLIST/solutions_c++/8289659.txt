#include <bits/stdc++.h>
using namespace std;

#define PB push_back
#define MP make_pair
#define SZ size()
#define all(v) v.begin(), v.end()
#define REP(i, n) for(int i = 0; i < (int)n; i++)
#define ITR(i, j, n) for(int i = j; i < (int)n; i++)
#define mem(array, val) memset(array, val, sizeof(array))
#define READ(filename) freopen(filename, "r", stdin)
#define WRITE(filename) freopen(filename, "w", stdout)
#define Pii pair <int, int>
#define Fr first
#define Sc second
#define Long long long
#define si(a) scanf("%d", &a)
#define sl(a) scanf("%I64d", &a)
#define sd(a) scanf("%lf", &a)
#define sii(a, b) scanf("%d%d", &a, &b)
#define sll(a, b) scanf("%I64d%I64d", &a, &b)
#define sdd(a, b) scanf("%lf%lf", &a, &b)
#define Fast_IO ios_base::sync_with_stdio(0);cin.tie(0)
#define debug(x) cout << #x << ": " << x << endl;

#define MAX 250005
struct data {
   int l, r;

   data(int a, int b) : l(a), r(b) {}
   bool operator < (const data &B) const {
      return l < B.l;
   }
};
set <data> st[MAX];
int N, Q, tree[MAX];

int read(int id)
{
   int sum = 0;
   while(id > 0) {
      sum += tree[id];
      id -= (id & -id);
   }
   return sum;
}

void update(int id, int val)
{
   while(id < MAX) {
      tree[id] += val;
      id += (id & -id);
   }
}

void add(int l, int r)
{
   if(l > r) return;
   update(l, 1);
   update(r+1, -1);
}

void insert(int l, int r, set <data> &st)
{
   data ob(l, r);
   set <data>::iterator it = st.upper_bound(ob), tmp;
   if(it != st.begin()) it--;
   if(it != st.end() && it->r < l) it++;
   if(it == st.end() || r < it->l) {
      add(l, r);
      st.insert(data(l, r));
      return;
   }
   if(l < it->l) add(l, (it->l)-1);
   l = min(l, it->l);
   r = max(r, it->r);

   while(it != st.end()) {
      tmp = it;
      it++;
      if(it == st.end() || it->l > r) {
         add((tmp->r) + 1, r);
         st.erase(tmp);
         break;
      }
      else {
         add((tmp->r) + 1, (it->l) - 1);
         r = max(r, it->r);
      }
      st.erase(tmp);
   }
   st.insert(data(l, r));
}

void print(set <data> st)
{
   for(set <data>::iterator it = st.begin(); it != st.end(); it++) {
      printf("%d %d\n", it->l, it->r);
   }
}

int main()
{
   sii(N, Q);
   while(Q--) {
      int tp, l, r, x;
      si(tp);
      if(tp) {
         si(x);
         printf("%d\n", read(x));
      }
      else {
         sii(l, r);
         si(x);
         insert(l, r, st[x]);
         //print(st[x]);
      }
   }
   return 0;
}
