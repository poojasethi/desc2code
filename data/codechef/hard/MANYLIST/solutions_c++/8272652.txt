/*
	This Program appeared in the codechef Lunchtime 28(sept 2015)
 
	Given N sets from 1 to N
	Basically we have to handle two type of queries
	1. 0 l r x	Add x to all the set from l to r
	2. 1 q Give the size of set no q
	
	My Approach::
	we take a array bit where bit[i] denotes the size of set i
	1. for insert operation 0 l r x, instead of inserting in ranges l to r, we update our bit using a set data structure where
		set(i)pair<int,int> denotes that element i is present in some range
	2. Now for insertion part, we need to carefully update ranges it in set x
*/
 
#include<bits/stdc++.h>
using namespace std;
 
typedef pair<int,int>PII;
typedef set<PII>st;
st::iterator it, it1;
const int MAX = 300005;
 
st myset[MAX];
int BIT[MAX];
int N, M;
 
void update(int idx, int val)
{
	while(idx < MAX)
	{
		BIT[idx] += val;
		idx += (idx & -idx);
	}
}
 
int Query(int idx)
{
	int ans = 0;
 
	while(idx > 0)
	{
		ans += BIT[idx];
		idx -= (idx & -idx);
	}
	return ans;
}
 
void Range_Update(int l, int r, int idx)
{
	int prev_l, prev_r;
	while(true)
	{
		it = myset[idx].lower_bound(make_pair(l,-1));
		prev_r = it->first;
		prev_l = it->second;
 
//		cout<<prev_l<<" "<<prev_r<<endl;
 
		if(prev_l <= l && prev_r >= r )
			break;
 
		if(prev_l > r)
		{
			update(l, 1);
			update(r+1, -1);
			myset[idx].insert(make_pair(r, l));
			break;
		}
 
		else if(prev_l >= l && prev_r <= r)
		{
			update(prev_l, -1);
			update(prev_r+1, 1);
			myset[idx].erase(it);
			continue;
		}
 
		else if(prev_l > l)
		{
			update(prev_l, -1);
			update(l,1);
			myset[idx].erase(it);
			myset[idx].insert(make_pair(prev_r, l));
			break;
		}
 
		update(prev_l, -1);
		update(prev_r+1,1);
		myset[idx].erase(it);
		l = prev_l;
	}
	return;
}
 
 
 
int main()
{
	ios_base::sync_with_stdio(false);
 
	int x, l, r, v;
 
	cin>>N >>M;
 
	for(int i = 0 ; i <= N ; i++)
		myset[i].insert(make_pair(N+1, N+1));
 
	for(int i = 0 ; i < M ; i++)
	{
		cin>>x;
		if(x == 0)
		{
			cin>>l>>r>>v;
			Range_Update(l, r, v);
		}
		else
		{
			cin>>l;
			int ans = Query(l);
			cout<<ans<<endl;
		}
	}
 
	return 0;
} 