#include<iostream>
#include<stdio.h>
#include<limits.h>
#include<algorithm>
#include<vector>
#include<string.h>
#include<math.h>
#include<set>
#include<map>
#include<string>
#include<queue>
#include<deque>
#include<bitset>
#include<assert.h>
#define ones(A) memset(A,-1,sizeof(A))
#define zeros(A) memset(A,0,sizeof(A))
#define SZ size
#define mii map<int,int>
#define mli map<long long int,int>
#define mil map<int,long long int>
#define mll map<long long int,long long int>
#define msi map<string,int>
#define mis map<int,string>
#define si(x) scanf("%d",&x)
#define s2i(x,y) scanf("%d%d",&x,&y)
#define sll(x) scanf("%lld",&x)
#define s2ll(x,y) scanf("%lld%lld",&x,&y)
#define pi(x) printf("%d\n",x)
#define pll(x) printf("%lld\n",x)
#define ss(s) scanf("%s",&s)
#define ps(s) printf("%s\n",s)
#define FOR(i,n) for(int i=0;i<n;i++)
#define FOR2(i,start,end,inc) for(int i=start;i<=end;i+=inc)
#define DEC(i,start,end,inc) for(int i=start;i>=end;i-=inc)
#define vi vector<int>
#define ub upper_bound
#define lb lower_bound
#define bs binary_search
#define vll vector<long long int>
#define pb push_back
#define mp make_pair
#define pii pair<int,int>
#define MOD 1000000007
#define B begin
#define E end
typedef long long int ll;
typedef unsigned long long int ull;
using namespace std;
ll lazy[5000005];
ll st[5000005];
ll query_range(ll ind,ll start,ll end,ll l,ll r){
	if(r<start || l>end){
		return 0;
	}
	if(lazy[ind]!=0){
		st[ind]+=lazy[ind]*(end-start+1);
		int mid=(start+end)/2;
		lazy[2*ind]+=lazy[ind];
		lazy[2*ind+1]+=lazy[ind];
		lazy[ind]=0;
	}
	if(l<=start && r>=end){
		return st[ind];
	}
	int mid=(start+end)/2;
	return query_range(2*ind,start,mid,l,r)+query_range(2*ind+1,mid+1,end,l,r);
}

void update_sum(ll ind,ll start,ll end,ll l,ll r,ll v){
	if(lazy[ind]!=0){
		st[ind]+=lazy[ind]*(end-start+1);
		lazy[2*ind]+=lazy[ind];
		lazy[2*ind+1]+=lazy[ind];
		lazy[ind]=0;
	}
	
	if(r<start || l>end)return;
	if(l<=start && r>=end){
		st[ind]+=v*(end-start+1);
		if(start!=end){
			lazy[2*ind]+=v;
			lazy[2*ind+1]+=v;
		}
		return;
	}
	int mid=(start+end)/2;
	update_sum(2*ind,start,mid,l,r,v);
	update_sum(2*ind+1,mid+1,end,l,r,v);
	st[ind]=st[2*ind]+st[2*ind+1];
}
set<pair<int,int> > freq[250005];
set<pii >::iterator it;
int main(){
	int n,q;
	s2i(n,q);
	FOR(i,q){
		int type,l,r,x;
		si(type);
		if(!type){
			s2i(l,r);
			si(x);
			it=freq[x].lower_bound(mp(l+1,0));
			if(it!=freq[x].begin()){
				--it;
				if(it->second>=l)l=it->first;
			}
			while(1){
				it=freq[x].lower_bound(mp(l,0));
				if(it==freq[x].E())break;
				if(it->first<=r){
					r=max(r,it->second);
					freq[x].erase(it);
					update_sum(1,1,n,it->first,it->second,-1);
				}
				else break;
			}
			update_sum(1,1,n,l,r,1);	
			freq[x].insert(mp(l,r));
		}
		else{
			int no;
			si(no);
			pi(query_range(1,1,n,no,no));
		}
	}
	return 0;
}