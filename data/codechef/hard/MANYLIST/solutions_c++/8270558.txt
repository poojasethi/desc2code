#include <iostream>
#include <stdio.h>
#include <set>
#include <vector>
#include <algorithm>
using namespace std;
#define MAXN 250005
int tree[MAXN];
void update(int i ,int val){
    while (i < MAXN){
        tree[i] += val;
        i += (i & -i);
    }
}
int query(int i){
    int ret = 0;
    while(i > 0){
        ret += tree[i];
        i -= (i & (-i));
    }
    return ret;
}
set<pair<int,int> > A[MAXN];
void add(int L, int R, int v = 1) {
    update(L, v); update(R + 1, -v);
}
int LL[MAXN];
int RR[MAXN];
void solve() {
    int N, M;
    scanf("%d %d", &N, &M);
    while(M--) {
        int type;
        scanf("%d", &type);
        if(type) {
            int x;
            scanf("%d", &x);
            int ans = query(x);
            printf("%d\n", ans);
        } else {
            int L, R, x;
            scanf("%d %d %d", &L, &R, &x);
            set<pair<int, int> > :: iterator it = A[x].lower_bound(make_pair(L, -1));
            int cnt = 0;
            if(it -> first == L) {
                if(it -> second >= R) continue;
            } else if(it != A[x].begin()){
                --it;
                if(it -> second >= R) continue;
                if(it -> second >= L)L = min(it-> first, L);
                else it++;
            }
            for(; it != A[x].end(); it++) {
                int currL = it -> first;
                int currR = it -> second;
                if(currL > R) break;
                if(currR > R) R = currR;
                LL[cnt] = currL;
                RR[cnt] = currR;
                cnt++;
            }
            //cout << x << " " <<cnt << endl;
            for(int i = 0; i < cnt; i++) {
                A[x].erase(make_pair(LL[i], RR[i]));
                add(LL[i], RR[i], -1);
            }
            A[x].insert(make_pair(L, R));
            add(L, R, 1);
        }
    }
}
int main() {
    int t = 1;
    //scanf("%d", &t);
    while(t--) solve();
}
