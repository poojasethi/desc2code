#include <bits/stdc++.h>
#define filein(t) freopen(t, "r", stdin)
#define fileout(t) freopen(t, "w", stdout)
#define ll long long
#define ull unsigned long long
#define mp make_pair
#define f first
#define s second
#define N 250007
#define cs 1373
#define BIT(i, n) ( (n >> i) & 1 )
#define ln 1000000000
#define oo 1000000007
#define Pa pair <int, int>

using namespace std;

int Tree[N], n, m;
set <Pa> S[N];
vector <Pa> V;

void Up(int x, int val)
{
    while(x < N)
    {
        Tree[x] += val;
        x += x & (-x);
    }
}

int Get(int x)
{
    int res = 0;
    while(x)
    {
        res += Tree[x];
        x -= x & (-x);
    }
    return res;
}

void Update(int l, int r, int x)
{
    V.clear();
    if(S[x].size() == 0)
    {
        S[x].insert(mp(0,0));
        S[x].insert(mp(n+1, n+1));
    }
    set < Pa > :: iterator u = S[x].lower_bound(mp(r+1, -1));   u--;
    set < Pa > :: iterator v = S[x].lower_bound(mp(l, -1)); v--;
    if(v -> s < l) v++;
    Pa Me = mp(min(l, v->f), max(r, u->s));
    if(v -> f <= u -> f)
    {
        for(set < Pa > :: iterator P = v; P != u; P++)
            V.push_back(*P);
        V.push_back(*u);
    }
    for(int i=0; i<V.size(); i++)
    {
        Up(V[i].f, -1);
        Up(V[i].s+1, 1);
    }
    Up(Me.f, 1);
    Up(Me.s+1, -1);
    for(int i=0; i<V.size(); i++)
        S[x].erase(S[x].find(V[i]));
    S[x].insert(Me);
}

int main()
{
    //filein("inp.txt");  fileout("out.txt");
    int type, l, r, x, pos;
    cin >> n >> m;
    for(int i=1; i<=m; i++)
    {
        cin >> type;
        if(type == 0)
        {
            cin >> l >> r >> x;
            Update(l, r, x);
        }
        else
        {
            cin >> pos;
            cout << Get(pos) << endl;
        }
    }
}
