    /**
    * He who forgives and acknowledges himself... that is what it truly means to be strong!
    */
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <map>
    #include <cstdio>
    #include <cstring>
    #include <cctype>
    #include <queue>
    #include <set>
    #include <climits>
    #include <iomanip>
    #include <cassert>
    #include <cmath>
    using namespace std;

    #define trace(x) {cerr << #x << "=" << x <<endl;}
    #define trace2(x, y) {cerr << #x << "=" << x << " " << #y << "=" << y <<endl;}
    #define track(x) {cerr << #x << ":" << endl; for (int q = 0; q < x.size(); q++) {cerr << x[q] << " ";} cerr << endl;}
    #define trackarr(x, n) {cerr << #x << ":" << endl; for (int q = 0; q < n; q++) {cerr << x[q] << " ";} cerr << endl;}
    #define trackvv(x) {cerr << #x << ":" << endl; for (int i = 0; i < x.size(); i++) { cerr << "i:" << i << endl; for (int j = 0; j < x[i].size(); j++){cerr << x[i][j] << " ";} cerr << endl;} cerr << endl;}
    #define trackcr(x) {cerr << #x << ":" << endl; for (set<long long>::iterator i = x.begin(); i != x.end(); i++) {cerr << *i << " ";} cerr << endl;}
    template <typename Tk, typename Tv> ostream& operator<<(ostream& os, const pair<Tk, Tv> &p){os << "{" << p.first << ',' << p.second << "}";return os;}

    const int MAX = 3000005;
    const int MOD = 1000000007;
    const int INF = 1000000000;

    int main() {
        int t;
        scanf("%d", &t);
        while (t--) {
            int n;
            scanf("%d", &n);
            int ways = 1<<n;
            multiset<long long> a;
            for (int i = 0; i < ways; i++) {
                long long temp;
                scanf("%lld", &temp);
                a.insert(temp);
            }
            a.erase(a.find(0));
            vector<long long> ans;
            ans.push_back(*a.begin());
            a.erase(a.begin());
            while (!a.empty()) {
                long long v = *a.begin();
                a.erase(a.find(v));
                int ways = 1<<ans.size();
                for (int i = 1; i < ways; i++) {
                    long long sum = v;
                    for (int j = 0; j < ans.size(); j++) {
                        if (i & (1<<j)) {
                            sum += ans[j];
                        }
                    }
                    a.erase(a.find(sum));
                }
                ans.push_back(v);
            }
            for (int i = 0; i < n; i++) {
                printf("%lld ", ans[i]);
            }
            printf("\n");
        }
    }
