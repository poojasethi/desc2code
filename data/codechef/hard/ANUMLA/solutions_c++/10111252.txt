#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string.h>
#include <algorithm>
#include <math.h>
#include <vector>
#include <queue>
#include <set>
#include <stack>
#include <map>
#define INF_MAX 2147483647
#define INF_MIN -2147483647
#define INF_LL 9223372036854775807LL
#define INF 2000000000
#define PI acos(-1.0)
#define inf INT_MAX
#define llu unsigned long long int
#define all(v) v.begin(),v.end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define si(n) scanf("%d",&n)
#define slli(n) scanf("%lld",&n);
#define ss(n) scanf("%s",n);
using namespace std;
typedef long long int LL;
 
multiset<LL > S;
std::vector<LL > v;
std::vector<LL > subsets;
 
int main()
{
LL test , N , tp[20] , A , curr , len;
slli(test);
tp[0] = 1;
for(int i=1;i<=18;i++)
	tp[i] = (tp[i-1]<<1);
 
 
 
while(test--)
{
	S.clear();
	v.clear();
	subsets.clear();
 
	slli(N);
	
	for(int i=1;i<=tp[N];i++)
	{
		slli(A);
		S.insert(A);
	}
	S.erase(S.find(0));
 
	v.pb(*(S.begin()));
	subsets.pb(*(S.begin()));
	if(S.find(*(S.begin()))!=S.end())
		S.erase(S.find(*(S.begin())));
 
	for(int i=2;i<=N;i++)
	{
		len = subsets.size();	
		curr = *(S.begin());		
		v.pb(curr);
		for(int j=0;j<len;j++)
		{
			subsets.pb(subsets[j] + curr);
			if(S.find(subsets[j] + curr)!=S.end())
				S.erase(S.find(subsets[j] + curr));
		}
		subsets.pb(curr);
		if(S.find(curr)!=S.end())
			S.erase(S.find(curr));
	}
	sort(v.begin() , v.end());
	for(int i=0;i<N;i++)
		cout << v[i] << " ";
	cout << endl;
 
}
return 0;
}
 
 
 
 
