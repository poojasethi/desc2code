#include <iostream>    /*   ry_7   */
#include <algorithm>
#include <assert.h>
#include <stdio.h>
 
using namespace std;
 #define pc putchar_unlocked
inline void in(int &x) {
register int c = getchar_unlocked();
x = 0;
int neg = 0;
for(; ((c<48 || c>57) && c != '-'); c = getchar_unlocked());
if(c=='-') {
neg = 1;
c = getchar_unlocked();
}
for(; c>47 && c<58 ; c = getchar_unlocked()) {
x = (x<<1) + (x<<3) + c - 48;
}
if(neg)
x = -x;
}
void printint(int n)
{
char op[41];
int size = 40;
while(n)
{
op[size--] = n%10+'0';
n/=10;
}
for(int i=size+1;i<41;i++)
pc(op[i]);
 
}
 
int *A1,*A2,*marked;
 
int binSearch(int L, int R, int elm, int *A){
int mid;
while(R>=L){
mid = (L+R)/2;
if(A[mid] == elm && (mid==L || A[mid-1]<elm)) return mid;
if(A[mid] >= elm){
R = mid-1;
}
else
L = mid+1;
}
return -1;
}	
 
 
 
int main(){
int T;
in(T);
A1 = new int[1<<15 + 1];
A2 = new int[1<<15 + 1];
marked = new int[1<<15 + 1];
while(T-->0){
int N;
in(N);
int nSubsets = 1<<N;
for(int i=0;i<nSubsets;i++)
in(A1[i]);
sort(A1, A1+nSubsets);
int count = 0;
while(count<N){
int minElm = A1[1];
printint(minElm);printf(" ");
for(int i=0; i<nSubsets; i++)
marked[i] = 0;
int currInd = 0;
int lastAnusarIndex = -1;
for(int i=0; i<nSubsets; i++){
if(marked[i] == 2)
continue;
marked[i] = 1;
A2[currInd++] = A1[i];
int anusarIndex = binSearch(max(i+1, lastAnusarIndex+1), nSubsets-1, A1[i] + minElm, A1);
lastAnusarIndex = anusarIndex;
marked[anusarIndex] = 2;
}
nSubsets /= 2;
 
count++;
int *temp = A1;
A1 = A2;
A2 = temp;
}
	printf("\n");
}
return 0;
} 