#include <iostream>
#include <algorithm>
#include<cstdio>
using namespace std;
 /*
 
n=int(input())
input all subsetsums in S[2^n]
solution[n]
index=0
multi_set Set[2^n-1]={S}
Set.remove(0)
Recieved_array_element=true;
solution[index++]=S[1]
for i=2 to 2^n-1:
	if(Set.exists(S[i])):
		solution[index++]=S[i]
		for j=1 to 2^index-1:
			element=0
			for k=0 to index-1:
				element+=(j&(1<<k))*solution[k]
			if(Set.exists(element))
				Set.remove(element)
					 	
*/
void InInt (int &x)
{
    register int c;
    do        c = getchar_unlocked ();      while (c < 48 || c > 57);
    for(x = 0; c > 47 && c < 58; c = getchar_unlocked ())   x = (x << 1) + (x << 3) + c - 48;
}
 
void OutInt (int n)
{
    register int x = n;
    int a [20], i;
    for (i = 0; x; i++)     a[i] = x % 10,  x /= 10;
    for (; i; i--)          putchar_unlocked (48 + a[i - 1]);
    putchar_unlocked (32);
}
    
int main ()
{
	int T, t, N, i, j, k, s, f, e, a, b, c, d, S;
	InInt (T);
	for (t = 0; t < T; t++)
	{
		InInt (N);
		S = 1 << N;
		int p[S], u[S], m[N];
		for (s = 0; s < S; s++)     InInt (p[s]);
		sort (p, p + S);
		for (s = 0; s < S; s++) u[s] = 0;
		u[0] = u[1] = 1, m[0] = p[1];
		for (m[1] = a = p[2], j = b = 2, e = 2; e < N; e ++)
		{
    		for (i = 0, c = 0, j = b, d = (1 << (e - 1)), k = 0; k < d; i++)
    		    if ((u[i]) && (u[i] < e))
    		        for (f = 0; ! f; j++)
    		        {
    		            if ((! u[j]) && (p[j] == (p[i] + a)))    u[j] = e,  k ++,   f++;
    		            if ((! u[j]) && (! c))  c = j;
    		        }
            for (;! c; j++)    if (! u[j])  c = j;
	        b = c;
	        m[e] = a = p[b];
		}
		for (i = 0; i < N; i++)	OutInt (m[i]);
		putchar_unlocked (13);
	}
	return 0;
} 