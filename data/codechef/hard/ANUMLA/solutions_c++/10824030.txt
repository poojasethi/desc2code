#include <stdio.h>
#include <string.h>
#include <algorithm>
using namespace std;
 
# define MAX 15
int a[1<<MAX+1], mark[1<<MAX+1];
 
int fast_integer() {
    int set = 0;
    char c = getchar_unlocked();
    while(c<'0')
		c = getchar_unlocked();
    while(c>='0' && c<='9') {
        set = (set<<3) + (set<<1)+c-'0';
        c = getchar_unlocked();
    }
    return set;
}
 
int binary_search(int start, int end, int item) {
    int mid;
    while (start <= end) {
        mid = ((start + end)/2);
        if (a[mid] > item) {
            end = mid -1;
        } else if (a[mid] == item) {
            if (mark[mid] == 1) {
                start = mid+1;
            } else if (mid == start || mark[mid-1] == 1 || a[mid-1] < a[mid]) {
                return mid;
            } else {
                end = mid -1;
            }
        } else {
            start = mid+1;
        }
    }
    return -1;
}
 
int main(void) {
    int t = fast_integer(), n, k, i, j, aCount, subsetCount, pos, temp, temp1;
    int subset[1<<MAX+1], ans[15];
    char c;
    while (t--) {
        n = fast_integer();
        k = 1 << n;
        memset(mark, 0, k*(sizeof(int)));
        for (i=0; i<k; i++) {
            a[i] = fast_integer();
        }
        sort(a, a+k);
        ans[0] = a[1], subset[0] = a[1], aCount = 2, subsetCount = 1;
        for (i=1; i<n; i++) {
            while (mark[aCount] == 1) {
                aCount++;
            }
            ans[i] = a[aCount];
            if (i == n-1) {
                break;
            }
            temp = subsetCount;
            subset[subsetCount++] = a[aCount];
            mark[aCount++] = 1;
            for (j = 0; j < temp; j++) {
                temp1 = subset[j] + ans[i];
                subset[subsetCount++] = temp1;
                pos = binary_search(aCount, k-1, temp1);
                mark[pos] = 1;
            }
        }
        for (i=0; i<n; i++) {
            printf("%d ", ans[i]);
        }
        printf("\n");
    }
    return 0;
} 