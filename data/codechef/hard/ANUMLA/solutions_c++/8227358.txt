#include <iostream>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <queue>
#include <utility>
#include <climits>
#include <map>
#include <set>
#include <vector>
#include <stack>
#include <cstring>
#include <algorithm>
#include <sstream>
#include <cmath>
//#include "codejam.h"

#define DEBUG

//#define SYNC

using namespace std;

//Hardware Costants

#define bitcount                    __builtin_popcount  //returns the number of set bits in a number.
#define gcd                         __gcd //returns gcd of two numbers

#define endl "\n";

//Custom defines
//
#define fr(i,a,b,x) for(int i=a;i<b;i+=x)
#define tr(c,itr) for(typeof((c).begin() )itr = (c).begin(); itr != (c).end(); itr++)
#define rtr(c,ritr) for(typeof((c).rbegin() )itr = (c).rbegin(); itr != (r).end() ; ritr++)

#define pb push_back
#define MP(a,b) make_pair(a, b)
#define checkbit(n,b)  ( (n >> b) & 1)

#define ULL unsigned long long
#define LL long long

#define RESET(val) memset(val, 0, sizeof(val))

#define input(in)    freopen(in,"r",stdin)
#define output(out)  freopen(out,"w",stdout)

                    //right  down   left    up
const int fx[4][2] = {{0,1}, {1,0}, {0,-1}, {-1,0}};

                    //East   SouthEast South SouthWest  West    NorthWest  North   NorthEast
const int fxx[8][2] ={{0,1}, {1,1} ,  {1,0}, {1,-1},    {0,-1}, {-1,-1} , {-1,0}, {-1,1}};

#ifdef DEBUG
     #define debug(args...)            {dbg,args; cerr<<endl;}
#else
    #define debug(args...)              // Just strip off all debug tokens
#endif

struct debugger
{
    template<typename T> debugger& operator , (const T& v)
    {    
        cerr<<v<<" ";    
        return *this;    
    }
} dbg;

inline void print_f(int n)
{    
    #ifdef SYNC
        cout << "Case #" << n <<": " ;
    #else
        printf("Case #%d: ",n);

    #endif
    
}

inline int bounds_4(int xi,int xj,int yi,int yj,int i,int j)
{
    return ((i>=xi) && (i<=xj) && (j>=yi) && (j<=yj));
}

inline int Bounds(int i,int j,int S)
{
    //return ((i>=0) && (i<S) && (j>=0) && (j<S));
    return bounds_4(0,0,S-1,S-1,i,j);
}

vector<string> split(const string &s, char delim) {
    stringstream ss(s);
    string item;
    vector<string> tokens;
    while (getline(ss, item, delim)) {
        tokens.push_back(item);
    }
    return tokens;
}

#define gc() getchar_unlocked()
int isSpaceChar(char c) {
            return c == ' ' || c == '\n' || c == '\r' ;
        }
template<typename T>
T FAST_IO()
{
    char ch;
    T val=0;
    ch=gc();
    while(isSpaceChar(ch))
            ch=gc();
    val=0;
    while(!isSpaceChar(ch))
    {
        val=(val*10)+(ch-'0');
        ch=gc();
    }
    return val;
}

inline int pow2(int N)
{
	int ans=1;
	for(int i=1;i<=N;i++)
		ans=ans*2;
	return ans;
}

map<int,int> ssums;
vector<int> v;

int main()
{
    #ifdef SYNC
        cin.sync_with_stdio(false);
    #endif

    int T=FAST_IO<int>();

    for(int t=1;t<=T;t++)
    {
    	int N=FAST_IO<int>();
    	int powN=pow2(N);

    	ssums.clear();

    	for(int j=0;j<powN;j++)
    		ssums[FAST_IO<int>()]++;

    	v.clear();

    	ssums.erase(0);

    	int previousCount=0;

    	vector<int> subsetsums;

    	while(v.size()!=N)
    	{
    		int first_element=ssums.begin()->first;
    		int first_count=ssums.begin()->second;

    		if(first_count <= 0)
    		{
    			ssums.erase(first_element);
    			continue;
    		}
    		else
    		{
    			v.pb(first_element);
    			subsetsums.pb(first_element);
    			ssums[first_element]--;
    			//debug("sum reached is ",first_element,subsetsums.size());
    		}

    		for(int j=subsetsums.size()-2;j>=0;j--)
			{
				//debug("info:",first_element,":",first_element + subsetsums[j]);

				subsetsums.pb(first_element + subsetsums[j]);
				ssums[first_element + subsetsums[j]]--;
			}

			//debug("end");

    	}

    	for(int i=0;i<N;i++)
    	{
    		printf("%d ",v[i]);
    	}
    	printf("\n");

    }

    return 0;
}