#include <iostream>
#include <string.h>
#include <vector>
using namespace std;

typedef long long LL;
typedef vector<int> VI;

VI conv(int base,const string &a)
{
	VI num(base,0);
	int L=a.length();
	for(int i=0;i<L;i++) num[a[i]-'0']++;
	return num;
}

int build(const VI &num,VI &p)
{
	int base=num.size();
	p.resize(base);
	int res=1;
	for(int d=0;d<base;d++)
	{
		p[d]=res;
		res*=num[d]+1;
	}
	return res;
}

const int maxN = 2 * 1296 * 1296;

int tst_cnt=0;
int bfs[maxN];
char vis[maxN];
LL dp[maxN];

LL solve(int base,string a,string b,string c)
{
	if(a.length()<b.length())
		swap(a,b);
	int La=a.length();
	VI numa=conv(base,a),pa;
	int tota=build(numa,pa);

	int Lb=b.length();
	VI numb=conv(base,b),pb;
	int totb=build(numb,pb);

	int L=c.length();
	if(L<La)
	{
		c=string(La-L,'0')+c;
		L=La;
	}
	if(L>La+1) return 0;

	int V=2*tota*totb;
	int end=V-2;
	int beg=0;
	if(L==La+1)
	{
		if(c[0]!='1') return 0;
		beg=1;
		c=c.substr(1);
		L--;
	}

	int len=0;
	tst_cnt++;
	bfs[len++]=end;
	vis[end]=tst_cnt;
	dp[end]=1;
	for(int k=0;k<len;k++)
	{
		int v=bfs[k];
		if(v==beg) break;
		int maska=v/2/totb;
		int maskb=v/2%totb;
		int d,i=0;
		for(d=0;d<base;d++)
			i+=maska/pa[d]%(numa[d]+1);
		d=v%2;
		if(i==0) continue;
		int x,y,D;
		int tmp=c[i-1]-'0'-d;
		for(x=0;x<base;x++) if(maska/pa[x]%(numa[x]+1)>0)
		{
			y=(tmp+base-x)%base;
			D=(x+y-tmp)/base;

			int maskby=maskb;
			if(L-i>=Lb) {
				if(y || maskb) continue;
			} else {
				if(maskb/pb[y]%(numb[y]+1)>0) maskby-=pb[y]; else continue;
			}

			int u=2*(totb*(maska-pa[x])+maskby)+D;
			if(vis[u]<tst_cnt)
			{
				bfs[len++]=u;
				dp[u]=0;
				vis[u]=tst_cnt;
			}
			dp[u]+=dp[v];
		}
	}
	if(vis[beg]<tst_cnt) return 0;
	return dp[beg];
}

int main()
{
	int TST;
	cin >> TST;
	for(int tst=0;tst<TST;tst++)
	{
		int base;
		string a,b,c;
		cin >> base >> a >> b >> c;
		LL res=solve(base,a,b,c);
		cout << res << endl;
	}
	return 0;
}
