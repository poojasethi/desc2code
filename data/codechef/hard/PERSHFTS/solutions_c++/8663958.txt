#include <bits/stdc++.h>
using namespace std;

typedef long long ll;

const int MAXN = 100000 + 10;
const int MOD = 1000000007;
const int inv = 500000004;

int P[MAXN], Q[MAXN];
int BIT[MAXN];
int n, k;


int read(int idx) {
	int s = 0;
	while( idx > 0 ) {
		s += BIT[idx];
		idx -= (idx & -idx);
	}
	
	return s;
}
void update(int idx, int val) {
	while(idx < MAXN) {
		BIT[idx] += val;
		idx+= (idx & -idx);
	}
}
int parity(int * A) {
	int invCnt = 0;
	
	for(int i = 0; i < MAXN;i++) {
		BIT[i] = 0;
	}
	
	for(int i = n-1; i >= 0; i--) {
		invCnt = (invCnt + read(A[i] - 1));
		invCnt %= 2;
		
		update(A[i],   1);
	}
	
	return invCnt;
	
}


int getRank(const int m) {
	memset(BIT, 0, sizeof(BIT));
	
	for(int i = 1;i<=n;i++) {
		update(i, 1);
	}
	
	int fact[MAXN  +10];
	
	fact[0] = fact[1] = 1%m;
	
	for(int i = 2; i <= n; i++) {
		fact[i] = (1LL * i * fact[i-1])%m;
	}
	
	
	int ans = 0;
	
	for(int i = 0; i<n;i++) {
		int freq = read(Q[i] - 1);
		ans  = ( ans +  (1LL * fact[n-i-1] * freq)%m ) % m;

		update(Q[i] , -1);
	}
	
	return ans;
}


int main() {
	int t;
	scanf("%d", &t);
	while(t--) {
		scanf("%d %d", &n, &k);
		
		for(int i =0; i < n; i++) {
			int a;
			scanf("%d", &a);
			P[i] = a;
		}
		
		for(int i = 0;i<n; i++) {
			int a;
			scanf("%d", &a);
			Q[i] = a;
		}
		
		
		if(k == n) {
			int x;
		
			for(int i = 0 ; i< n; i++) {
				if(P[0] == Q[i]) {
					x = i;
					break;
				}
			}
			
			bool flag = true;
			
			for(int i =0;i < n; i++) {
				if(P[i] != Q[(i+x)%n]) {
					flag = false;
					break;
				}
			}
			int ans ;
			if(flag) {
				ans = Q[0];
			} else {
				ans = -1;
			}
			
			printf("%d\n", ans);
		} else if( k < n &&  k % 2 == 0) {
			
			int ans = getRank(MOD);
			cout<<(1+ans) %MOD<<"\n";
			
		} else if(k < n && k%2 == 1) {
			if(parity(Q) != parity(P)) {
				printf("-1\n");
			} else {
				int ans = getRank(MOD);
			
				if(getRank(2)== 1) {
					ans = (ans + MOD - 1) % MOD;
				}
				
				ans = (1LL * ans * inv)%MOD;
				cout<<( 1+ ans) % MOD<<"\n";
			}
		}
	}
	return 0;
}