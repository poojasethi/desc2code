#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <cmath>
#include <set>
#include <map>
#include <queue>
#include <cstdio>
#include <sstream>
#include <iostream>
#include <cstring>
#define REP(i,x,v)for(int i=x;i<=v;i++)
#define REPD(i,x,v)for(int i=x;i>=v;i--)
#define FOR(i,v)for(int i=0;i<v;i++)
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define REMIN(x,y) (x)=min((x),(y))
#define REMAX(x,y) (x)=max((x),(y))
#define pb push_back
#define sz size()
#define mp make_pair
#define fi first
#define se second
#define ll long long
#define IN(x,y) ((y).find((x))!=(y).end())
#define LOLDBG
#ifdef LOLDBG
#define DBG(vari) cout<<#vari<<" = "<<vari<<endl;
#define DBG2(v1,v2) cout<<(v1)<<" - "<<(v2)<<endl;
#else
#define DBG(vari)
#define DBG2(v1,v2)
#endif
#define CZ(x) scanf("%d",&(x));
#define CZ2(x,y) scanf("%d%d",&(x),&(y));
#define ALL(x) (x).begin(),(x).end()
using namespace std;
typedef pair<int,int> pii;
typedef vector<int> vi;
template<typename T,typename TT> ostream &operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream &operator<<(ostream &s,vector<T> t){s<<"{";FOR(i,t.size())s<<t[i]<<(i==t.size()-1?"":",");return s<<"}"<<endl; }

ll suma(ll x,ll k)
{
    if (x==-1) return 0;
    ll x1=(x/k);
    ll wyn=k*x1*(x1+1)/2;
    wyn-=((x1+1)*k-1-x)*x1;
    return wyn+x+1;
}

ll ilosc1(ll j,ll miejsce, ll k)
{
    if (j>miejsce) return 1000000000000000LL;
    return suma(miejsce,k-1)-suma(j-1,k-1);
}

ll ilosc(ll j,ll miejsce, ll k)
{
    if (j<0) return 0;
    return ilosc1(miejsce-j,miejsce,k);
}




int main()
{
    ios_base::sync_with_stdio(0);
    int t;cin>>t;
    while(t--)
    {
        ll L,R,k,nr,n;
        cin>>L>>R>>k>>nr;
        n=R-L;
        int wyr=1+n/k;
        //DBG(wyr);
        int miejsce=n-(wyr-1)*k;
        //DBG(miejsce);
        ll ile=suma(miejsce,wyr-1);
        //DBG(ile);
        if (ile<nr)
        {
            cout<<wyr<<" 0 0"<<endl;
            continue;
        }
        //DBG(miejsce);
        int lo=-1,hi=miejsce,mid;

        while(hi-lo>1)
        {
            mid=(hi+lo)/2;
            if (ilosc(mid,miejsce,wyr)>=nr)
            {
                hi=mid;
            }
            else lo=mid;
        }
        //DBG(hi);
        nr-=ilosc(hi-1,miejsce,wyr);
        //DBG(nr);
        cout<<wyr<<" "<<hi+L<<" "<<hi+k+L+nr-1<<endl;
    }

    return 0;
}
