#include<stdio.h>
#include<algorithm>
using namespace std;
#define INF 1000000000000000001LL
int main()
{
    long long test,l,r,k,n,nod,init,nod1,fsh,fdif,lo,hi,mid,p,tm,st,ag;
    scanf("%lld",&test);
    while (test--)
    {
        scanf("%lld%lld%lld%lld",&l,&r,&k,&n);
        nod=(r-l)/k+1;
        init=l+(nod-1)*k;
        nod1=(r-init)/(nod-1)+1;
        fsh=r-(nod1-1)*(nod-1);
        fdif=max(0LL,fsh-init+1);
        //printf("%lld %lld\n",init,fsh);
        lo=1;
        hi=nod1;
        //printf("%lld\n",hi);
        while (lo<hi)
        {
            mid=(lo+hi+1)/2;
            p=((nod1-1)*nod1)/2-((mid-1)*mid)/2;
            //printf("%lld\n",p);
            if (p<INF/(nod-1)) tm=p*(nod-1)+fdif*nod1;
            else tm=INF+fdif*nod1;
            //printf("%lld\n",tm);
            if (tm>=n) lo=mid;
            else hi=mid-1;
        }

        mid=lo;
        p=((nod1-1)*nod1)/2-((mid-1)*mid)/2;
        if (p<INF/(nod-1)) tm=p*(nod-1)+fdif*nod1;
        else tm=INF+fdif*nod1;
        //printf("%lld %lld\n",mid,tm);
        if (tm<n) printf("%lld 0 0\n",nod);
        else
        {
            p=r-(mid-1)*(nod-1);
            p-=(tm-n)/mid;
            p+=(mid-1-(tm-n)%mid)*(nod-1);
            k+=mid-1-(tm-n)%mid;
            if (mid<nod1)
            {
                init=fdif+(nod1-1-mid)*(nod-1);
                ag=r-(mid)*(nod-1);
            }
            else
            {
                ag=init-1;
                init=0;
            }
            st=l-1+init+r-(mid-1)*(nod-1)-(tm-n)/mid-ag;
            printf("%lld %lld %lld\n",nod,st,st+k);
        }
    }
    return 0;
}
