#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <stack>
#include <cstring>
#include <iomanip>
using namespace std;
#define pb push_back
#define INF 2147483647
#define FOR(i,n) for(int (i)=0;(i)<(n);++(i))
#define FORI(i,n) for(int (i)=1;(i)<=(n);++(i))
#define mp make_pair
#define pii pair<int,int>
#define ll long long
#define vi vector<int>
#define sz size()
#define fi first
#define se second
#define wez(n) int (n); scanf("%d",&(n));
#define wez2(n,m) int (n),(m); scanf("%d %d",&(n),&(m));
#define wez3(n,m,k) int (n),(m),(k); scanf("%d %d %d",&(n),&(m),&(k));
inline void pisz(int n) { printf("%d\n",n); }
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
template<typename T> ostream& operator<<(ostream &s,vector<T> t){FOR(i,t.size())s<<t[i]<<" ";return s; }
#define IN(x,y) ((y).find((x))!=(y).end()) 
#define DBG(vari) cout<<#vari<<" = "<<vari<<endl;
#define ALL(t) t.begin(),t.end()
#define FOREACH(i,t) for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)
#define TESTS wez(testow)while(testow--)
#define REP(i,a,b) for(int (i)=(a);(i)<=(b);++i)
#define REPD(i,a,b) for(int (i)=(a); (i)>=(b);--i)
#define REMAX(a,b) (a)=max((a),(b));
#define REMIN(a,b) (a)=min((a),(b));

// suma po k = 1..x z floor(k/m)
ll sumato(ll x, ll m) {
   return (x%m + 1)*(x/m) + m*(x/m * (x/m - 1) / 2);
}

// suma po k = u1..u2 z floor(k/a)
ll sumator (ll u1, ll u2, ll a) {
   return sumato(u2,a) - sumato(u1-1,a);
}

ll l,r,k,n,d,ost;

// ile jest postepow arytmetycznych zaczynajacych sie na liczbe z przedzialu [l,w]
ll doo (ll w) {
   return (w-l+1)*(1-k) + sumator(r-w,r-l,d-1);
}

int main () {
   ios_base::sync_with_stdio(0);
   int te;
   cin >> te;
   while(te--) {
      cin >> l >> r >> k >> n;
      d = 1 + (r-l)/k;
      ost = r-k*(d-1);
      
      
      ll wsz = doo(ost);
      if (wsz < n) {
         cout << d << " 0 0" << endl;
         continue;
      }
      
      // binsearch
      ll left = l, right = ost, best = ost;
      while (left <= right) {
         ll mid = (left+right)/2;
         if (doo(mid) >= n) {
            REMIN(best,mid)
            right = mid-1;            
         } else {
            left = mid+1;
         }
      }
      // teraz best to najmniejsze u tze doo(u) >= n
      
      cout << d << " " << best << " ";
      ll ktory = n;
      if (best > l) ktory -= doo(best-1);
      cout << best + k + ktory - 1 << endl;
   }
}
