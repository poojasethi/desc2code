#include <iostream>
#include <cmath>
#include <vector>

using namespace std;
#define pb push_back
#define DEBUG 0
#define ID if(DEBUG)

typedef long long ll;

const int maxn=111;
ll grid[maxn][maxn];

void pascalTri(){
	ll maxg=1000000;
	maxg*=maxg+1;
	grid[0][0]=1;

	for (int i = 1; i < maxn; ++i)
	{
		grid[i][0]=grid[i][i]=1;
		for (int j = 1; j <= (i+1)/2; ++j)
		{
			grid[i][j]=grid[i][i-j]=min(grid[i-1][j-1]+grid[i-1][j], maxg);
		}
	}

	ID
	for (int i = 0; i < 10; ++i){
		for (int j = 0; j <= i; ++j)
			cout<<grid[i][j]<<" ";
		cout<<"\n";
	}
}

void find(int c,ll g, vector<ll> *steps){
	if(g==0)
		return;

	if(c==0){
		steps->pb(1);
		return;
	}

	int l=c,r=100;
	while(l+1<r){
		int m=(l+r)/2;
		if(grid[m][c]>g)
			r=m;
		else
			l=m;
	}
	ID cout<<"find:"<<g<<" "<<l<<","<<c<<"\n";
	steps->pb(grid[l][c]);
	find(c-1,g-grid[l][c], steps);
}

int main(){
	pascalTri();
	double a,b;
	int t;
	cin>>t;
	vector<ll> steps;
	while(t--){
		int r,c;
		ll g;
		cin>>r>>c>>g;
		steps.clear();
		find(c,g,&steps);
		cout<<steps.size()<<"\n";
		for (int i = 0; i < steps.size(); ++i)
		{
			cout<<steps[i]<<" ";
		}
		cout<<"\n";
	}
}