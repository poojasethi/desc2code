#include <cstdio>
#include <cmath>
 
#include <iostream>
#include <map>
#include <set>
#include <vector>
#include <algorithm>
#include <queue>
 
using namespace std;
 
typedef long long int ll;
typedef unsigned long long int ull;
 
template <typename T>
inline void readnum(T &a);
 
template <typename T>
inline void printnum(T a);
 
#ifndef _MSC_VER
#define GETCU getchar_unlocked
#define PUTCU putchar_unlocked
#else
#define GETCU getchar
#define PUTCU putchar
#endif
 
ll triangle[100][100] = {-1};
 
void compute()
{
	triangle[0][0] = 1;
 
	for(int row = 1; row < 100; row ++)
	{
		triangle[row][0] = 1;
 
		for(int col = 1; col < row; col ++)
			triangle[row][col] = triangle[row - 1][col - 1] + triangle[row - 1][col];
		
		triangle[row][row] = 1;
	}
}
 
ll binSearch(int min, int max, int col, ll search)
{
	int mid = min + (max - min)/2;
 
	if(min > max)
		return triangle[min - 1][col];
 
	if(triangle[mid][col] == search)
		return search;
 
	if(triangle[mid][col] > search)
		return binSearch(min, mid - 1, col, search);
 
	else
		return binSearch(mid + 1, max, col, search);
}
 
int main()
{
	int cases;
	int row, col;
	ll sum;
 
	compute();
	readnum(cases);
	
	queue<ull> qSum;
	ll val;
 
	while(cases -- > 0)
	{
		readnum(row);
		readnum(col);
		readnum(sum);
 
		do 
		{
			row = col;
			while(triangle[row][col] <= sum)
				row ++;
 
			val = triangle[row - 1][col];
			qSum.push(val);
 
			col --;
			sum -= val;
		} while (sum > 0);
	
		printf("%d\n", qSum.size());
 
		val = qSum.front();
		qSum.pop();
 
		printf("%lld", val);
 
		while (!qSum.empty()) 
		{
			val = qSum.front();
			qSum.pop();
 
			printf(" %lld", val);
		}
		
		printf("\n");
		//cout << rmin << " " << rmax << endl;
	}
	return 0;
}
 
 
template <typename T>
inline void readnum(T &a)
{
	register int c;	
	do {
		c = GETCU(); 
	} while(c < '-');
 
	bool sign = false;
 
	if(c == '-'){
		sign = true; 
		c = GETCU();
	}
 
	a = 0;
	do{
		a = (a << 1) + (a << 3) + c - '0';
		c = GETCU();
	} while(c >= '0');
 
	if(sign)
		a = -a;
}
 
template <typename T>
inline void printnum(T a)
{
	char s[32];
	int t = -1;
	do {
		s[++ t] = a % 10 + '0';
		a /= 10;
	} while(a > 0);
 
	while(t >= 0)
		PUTCU(s[t --]);
 
	PUTCU('\n');
} 