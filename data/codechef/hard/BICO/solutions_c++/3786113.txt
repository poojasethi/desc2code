#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <fstream>

using namespace std;

#define maxN 2005
#define inf 1000000000000000000ll
#define lim 10000000000000ll

long long nCr[maxN][maxN];

long long calc(long long n,long long r)
{
	if( r > n )
		return 0ll;
	if( r == 2ll )
		return (n*(n-1ll))/r;
	else if( r == 3ll )
		return (n*(n-1ll)*(n-2ll))/6ll;
	if( n >= 2000 )
		return inf;
	return nCr[n][r];
}

void initialize()
{
	for(int x=0;x<maxN;x++)
		for(int y=0;y<=x;y++)
		{
			if( y == 0 || y == x )
				nCr[x][y] = 1ll;
			else
				nCr[x][y] = nCr[x-1][y-1] + nCr[x-1][y];
			if( nCr[x][y] > lim )
				nCr[x][y] = lim;
		}
}

int main()
{

	// freopen("input.txt","r",stdin);

	initialize();

	int T;
	scanf("%d",&T);

	while( T-- )
	{

		int R, C;
		long long G;
		scanf("%d%d%lld",&R,&C,&G);
		long long x = R, y = C;

		if( C <= 1 )
		{
			printf("1\n");
			printf("%lld\n",G);
		}
		else
		{

			vector<long long> ans;

			while( G > 0ll )
			{
				if( C == 1 )
				{
					ans.push_back(G);
					G = 0;
				}
				else
				{
					
					long long left = C, right = 2000000;

					int cnt = 0;

					while( left < right-1 && cnt < 25 )
					{
						cnt++;
						long long mid = (left+right)/2ll;
						long long v = calc(mid,C);
						if( v > G )
							right = mid;
						else
							left = mid;
					}

					long long v = calc(left,C);
					ans.push_back(v);
					G -= v;
					C--;
				}

			}

			printf("%d\n",(int)ans.size());
			for(int i=0;i<ans.size()-1;i++)
				printf("%lld ",ans[i]);
			printf("%lld\n",ans[ans.size()-1]);

		}

	}

	return 0;

}
