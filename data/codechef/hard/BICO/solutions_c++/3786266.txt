#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const LL X = 50,Y = 100;
const LL INF = 1000000000000000LL;

LL A[X][Y],sz[X],ans[Y];
LL R,C,G,ct = 0;

void pre(){
    for(int i = 0; i < X; ++i) sz[i] = Y;
    for(int i = 0; i < Y; ++i) A[0][i] = 1;
    for(int i = 1; i < X; ++i) for(int j = 1; j < Y; ++j){
        A[i][j] = A[i-1][j-1] + A[i][j-1];
        if (A[i][j] > INF){
            sz[i] = j;
            break;
        }
        assert(A[i][j] >= 0);
    }
}

bool inp(){
    R = rand()%Y , C = rand()%X, G = rand()%INF + 1;
    LL sum = 0;
    for(int i = 1; i <= C; ++i)
        sum += A[i][sz[i]-1];
    if (sum < G) return false;
    cerr << R << " " << C << " " << G << endl;
    return true;
}

void solve(){
    //if (!inp()) return;
    cin >> R >> C >> G;
    ct = 0;

    LL res = LLONG_MAX;
    for(int i = C; i >= 0 and G > 0; --i){
        res = min(res,G);
        int id = lower_bound(A[i],A[i]+sz[i],res) - A[i];
        id -= (A[i][id] != res);
        G -= A[i][id], ans[ct++] = A[i][id];
        res = min(res,A[i][id]);
    }

    assert(G == 0);
    cout << ct << endl;
    for(int i = 0; i < ct; ++i)
        cout << ans[i] << " ";
    cout << endl;
}

int main()
{
    ios_base::sync_with_stdio(false);
    pre(); int t; cin >> t;
    while(t--) solve();
    return 0;
}
