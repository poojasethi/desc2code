#include <cstring>
#include<stdio.h>
#include <cstdlib>
#include <cctype>
#include <algorithm>
#include <map>
#include <vector>
#include <list>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <string>
#include <cmath>
using namespace std;
#define FOR(i,a,b) for(int i=a;i<b;i++)
#define FORD(i,a,b) for(int i=a;i>=b;i--)
#define REP(i,n) FOR(i,0,n)
#define pb push_back
#define ITER(i,a) for( typeof(a.begin()) i=a.begin();i!=a.end();i++)
#define mod 1000000007
#define MAXN 1000010
#define get getchar//_unlocked
inline long long inp()
{
    long long n=0,s=1;
    char p=get();
    if(p=='-')
    s=-1;
    while((p<'0'||p>'9')&&p!=EOF)
    p=get();
    while(p>='0'&&p<='9')
    {
    n = (n<< 3) + (n<< 1) + (p - '0');
    p=get();
    };
    return n*s;
}
long long fact[5001],invfact[5001];
long long power(long long a,long long b)
{
    long long r=1,x=a;
    while(b)
    {
        if(b&1)r=(r*x)%mod;
        x=(x*x)%mod;
        b>>=1;
    }
    return r;
}
void factorial()
{
    long long i;
    fact[0]=1;
    for(i=1;i<5001;i++)
    fact[i]=((i*fact[i-1])%mod);
}
void inv()
{
    long long i;
    invfact[5000]=power(fact[5000],mod-2);
    for(i=4999;i>=0;i--)
    invfact[i]=((((i+1))%mod)*(invfact[i+1])%mod)%mod;
}
int main()
{
    long long i,n,j,k,l,m,t,ans,p,q;
    char ch;
    factorial();
    inv();
    t=inp();
    while(t--)
    {
       ch=get();j=0;k=0;
       while(ch!='\n')
       {
           if(ch=='4')
           j++;
           else if(ch=='7')k++;
           ch=get();
       }
       n=j+k;
     // printf("%lld\n",invfact[11]);
      if(j==0||k==0)
      {
          printf("1\n");
          continue;
      }
      l=((invfact[j]*invfact[k])%mod);
       m=((fact[n]*l))%mod;
       q=(invfact[j-1]*invfact[n-2-(j-1)])%mod;
       p=(fact[n-2]*q)%mod;
       printf("%lld\n",(m-p+mod)%mod);
    }
    return 0;
}
