#include <bits/stdc++.h>
#include <iostream>
#include <cstdio>
using namespace std;

class compare{
public:
	bool operator()(pair<int, int> a, pair<int, int> b){
		if(a.first == b.first)
			return a.second > b.second;
		return a.first < b.first;
	}
};

int main(){
	int n, t;
	scanf("%d %d", &n, &t);
	vector<pair<int, int> > item[7];
	for (int i = 0; i < n; ++i){
		int t, p, q;
		scanf("%d %d %d", &t, &p, &q);
		item[t].push_back(make_pair(p, q));
	}

	int size[7];
	int curr[7];
	bool cont = true;
	for (int i = 1; i < 7; ++i){
		curr[i] = 0;
		sort(item[i].begin(), item[i].end(), compare());
		size[i] = item[i].size();
		if(size[i] == 0){
			printf("%d\n", 0);
			cont = false;
			break;
		}
	}

	if(cont){
		int quality[7];
		int cost = 0;
		for (int i = 1; i < 7; ++i){
			cost += item[i][0].first; 
			quality[i] = item[i][0].second;
		}

		if(cost > t){
			printf("%d\n", 0);
		}
		else{
			int ans;
			while(cont){
				ans = quality[1];
				int least = 1;
				for (int i = 1; i < 7; ++i){
					if(ans >= quality[i]){
						least = i;
						ans = min(ans, quality[i]);
					}
				}

				// cout << least << endl;
				cont = false;
				int tempcurr = curr[least];
				while(tempcurr < (size[least]-1)){
					tempcurr++;
					if(item[least][tempcurr].second > quality[least]){
						cost = cost - item[least][curr[least]].first + item[least][tempcurr].first;
						quality[least] = item[least][tempcurr].second;
						if(cost <= t){
							cont = true;
							curr[least] = tempcurr;
							break; 
						}
					}
				}
			}
			printf("%d\n", ans);
		}
	}
}