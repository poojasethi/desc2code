#include <vector>
#include <algorithm>
#include <set>
#include <cstdio>
#include <cstdlib>

#define all(c) (c).begin(),(c).end() 
#define SORT(x) sort(all(x))

using namespace std;

typedef vector<int> VI;
typedef pair<int,int> PII;

struct cmp
{
	bool operator()(PII p1,PII p2)
	{
		if(p1.first<p2.first) // lower quality
		{ 
			return true;
		}
		if (p1.first==p2.first) 
		{
			return (p1.second<p2.second);// lower price
		}
		return false;
	}
};
bool comp(PII p1,PII p2)
{
	return (p1.second<p2.second) ;// lower price
}

vector< set<PII,cmp> > type(7);
PII pr;
int n,t;
bool feasible(int lq) // Can the least quality be lq covering all 6 items using <=t rublas ??
{
	//printf("Checking for feasibility of %d\n",lq);
	PII p;p=make_pair(lq,0);
	typeof(type[1].begin()) it;
	int sum=0;
	for(int i=1;i <= 6;i++)
	{
		//printf("Now for type[%d]\n",i);
		it=type[i].lower_bound(p);
		//printf("it returned at value (%d,%d)\n",it->first,it->second);
		if (it==type[i].end()) 
		{
			return false;
		}
		vector<PII> v(it,type[i].end());
		sort(all(v),comp);
		sum+= v.begin()->second;
		if (sum>t) 
		{
			return false;
		}	
	}
	return true;
}

int main()
{
	int x;
	scanf("%d%d",&n,&t);
	int max=0,min=1005;
	for(int i=0;i < n;i++)
	{
		scanf("%d%d%d",&x,&pr.second,&pr.first);
		if (pr.first<min) 
		{
			min=pr.first;
		}
		if (pr.first>max) 
		{
			max=pr.first;
		}
		
		type[x].insert(pr);
	}
	for(int i=1;i <= 6;i++)
	{
		if (type[i].empty()) 
		{
			printf("0\n");
			return 0;
		}
		/*
		printf("Type %d\n",i);
		tr(type[i],it)
		{
			printf("%d %d\n",it->first,it->second);
		}
		*/
		
	}
	int low=min,high=max,mid;
	while(low<high)  // Finding last x which is True
	{
		mid=low+( (high-low+1)/2);

		if( feasible(mid) )
		{
			low=mid;
		}
		else
		{
			high=mid-1;
		}
	}
	if (feasible(low)) 
	{
		printf("%d\n",low);
	}
	else
	{
		printf("0\n");
	}
	return 0;
}
