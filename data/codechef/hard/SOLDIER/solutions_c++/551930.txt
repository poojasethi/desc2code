#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<algorithm>
#include<iterator>
#include<map>
#include<vector>
#include<list>
#include<set>
#include<queue>
#include<cassert>
#include<deque>
#include<stack>
#include<bitset>
#include<functional>
#include<numeric>
#include<utility>
#include<sstream>
#include<iomanip>
#include<string>
#include<cmath>
#include<ctime>
#include<complex>
#include<memory>
using namespace std;

#define LET(x,a) 	__typeof(a) x(a)
#define IFOR(i,a,b) 	for(LET(i,a);i!=(b);++i)
#define EACH(it,v)  	IFOR(it,v.begin(),v.end())
#define FOR(i,a,b)  	for(int i=(int)(a) ; i < (int)(b);++i)
#define FORD(i,a,b) 	for(int i=(a);i>=(b);--i)
#define	REP(i,n)    	FOR(i,0,n)
#define SZ		size()
#define PB		push_back
#define PF		push_front
#define EPS		1e-9
#define V(x) vector< x >
#define INF 100000000

typedef V(int)		VI;typedef V(VI)	VII;
typedef long long	LL;
typedef pair<int,int>	PI;

int quality[6], n, t;
int p[1001], q[1001], type[1001];
int search(int low, int high) {
	if (low > high) {
		return -1;
	}
	int middle = (low + high) / 2, price[6];
	fill(price, price + 6, INF);
	REP (i,n) {
		if (q[i] >= middle) {
			price[type[i]-1] = min(price[type[i]-1], p[i]);
		}
	}
	int tprice = 0;
	REP (i,6) tprice += price[i];

	if (tprice <= t) {
		int x = search(middle + 1, high);
		return x == -1 ? middle : x;
	}
	return search(low, middle - 1);
}
int main() {
	scanf("%d%d",&n,&t);
	REP (i, n) {
		scanf("%d%d%d", &type[i], &p[i], &q[i]);
	}
	int r1 = search(0, 10000);
	if (r1 == -1) r1++;
	printf("%d\n", r1);
}