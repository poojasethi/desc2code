#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <set>
#include <map>
#include <vector>
#include <string>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;

const int inf = int(1e9);

struct point {
	int x, y, d;
	void create(int xx, int yy) {
		x = xx;
		y = yy;
		d = x * x + y * y;
	}
	bool operator < (const point &z) const {
		return d < z.d;
	}
} a[250000];

int n, m, d, N;
int Min[501][501], Res[501][501];
int cur[250000];
int grid[501][501];

int main() {
	int tests, i, j, k, l, R, C;
	scanf("%d", &tests);
	while (tests--) {
	 	scanf("%d%d%d%d%d", &n, &m, &d, &R, &C);
	 	N = 0;
	 	for (i = 0; i < n; ++i)
	 		for (j = 0; j < m; ++j) {
				Min[i][j] = inf;	 		
	 			scanf("%d", &grid[i][j]);
	 			a[N++].create(i, j);
	 		}
		sort(a, a + N);	 		
		Min[0][0] = grid[0][0];
		Res[0][0] = grid[0][0];
		//printf("%d\n", d);
		for (i = 1; i <= d && i < m; ++i) {
			Min[0][i] = Min[0][0];			
		}	
			
		for (j = 1; j < N; j = l) {
			for (l = j + 1; l < N && a[l].d == a[j].d; ++l);
			
			for (k = j; k < l; ++k) {
				cur[k] = inf;
				for (i = 0; a[k].x - i >= 0 && i <= d; ++i)
					cur[k] = min(cur[k], Min[a[k].x - i][a[k].y]);
				for (i = 1; a[k].x + i <  n && i <= d; ++i)
					cur[k] = min(cur[k], Min[a[k].x + i][a[k].y]);				
			}
			
			
			for (k = j; k < l; ++k) {
				Res[a[k].x][a[k].y] = cur[k] + grid[a[k].x][a[k].y];
				//printf("%d %d %d\n", a[k].x, a[k].y, Res[a[k].x][a[k].y]);
				for (i = 0; a[k].y - i >= 0 && i <= d; ++i)
					Min[a[k].x][a[k].y - i] = min(Min[a[k].x][a[k].y - i], Res[a[k].x][a[k].y]);
				for (i = 1; a[k].y + i <  m && i <= d; ++i)
					Min[a[k].x][a[k].y + i] = min(Min[a[k].x][a[k].y + i], Res[a[k].x][a[k].y]);
									
			}					
			
		}			 		
		
		printf("%d\n", Res[R][C]);	
	}
	return 0;
}

