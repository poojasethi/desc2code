#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<algorithm>
#include<string>
#include<utility>
using namespace std;
 
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)
 
#define INF 1000000000
 
int mp[500][500];
int dist[500][500];
 
int next[510][510], used[510][510];
 
int get_next(int x,int y){
  if(y<0 || !used[x][y]) return y;
  return next[x][y] = get_next(x,next[x][y]);
}
 
int main(){
  int i,j,k,l,m,n;
  int x, y, xy, ex, ey, d, c;
  int sx,sy,nx,ny,nc;
  priority_queue< pair<int,int> > q;
  int size;
  int res;
 
  scanf("%d",&size);
  while(size--){
    scanf("%d%d",&x,&y);
    scanf("%d%d%d",&d,&ex,&ey);
    rep(i,x) rep(j,y) scanf("%d",mp[i]+j);
 
    res = -1;
    while(q.size()) q.pop();
 
    q.push( make_pair(-mp[ex][ey],ex*y+ey) );
    if(ex==0 && ey==0) res = 0;
 
    rep(i,x) rep(j,y) dist[i][j] = INF;
    dist[ex][ey] = mp[ex][ey];
 
    rep(i,x) rep(j,y) next[i][j] = j+1;
    rep(i,x) next[i][y-1] = -1;
    rep(i,x) rep(j,y) used[i][j] = 0; used[ex][ey]=1;
 
    while(res<0){
      c = -q.top().first;
      k = q.top().second;
      sx = k/y; sy = k%y;
      q.pop();
      if(dist[sx][sy] < c) continue;
 
/*      printf("%d %d: %d\n",sx,sy,c);*/
 
      REP(nx,sx-d,sx+d+1) if(0<=nx&&nx<x){
        ny = sy - d; if(ny < 0) ny = 0;
        for(;;){
          if(ny < 0) break;
          if(used[nx][ny]){ next[nx][ny] = get_next(nx,next[nx][ny]); ny = next[nx][ny]; continue; }
          if(ny > sy+d) break;
          
          if( sx*sx+sy*sy <= nx*nx+ny*ny ){ next[nx][ny] = get_next(nx,next[nx][ny]); ny = next[nx][ny]; continue; }
          nc = c+mp[nx][ny];
          if(dist[nx][ny]<=nc){ next[nx][ny] = get_next(nx,next[nx][ny]); ny = next[nx][ny]; continue; }
          dist[nx][ny] = nc; used[nx][ny] = 1;
          if(nx==0 && ny==0) res = nc;
          q.push( make_pair(-nc, nx*y+ny) );
        }
      }
    }
 
    printf("%d\n",res);
  }
  
 
  return 0;
}