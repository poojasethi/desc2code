    #include <vector>
    #include <list>
    #include <map>
    #include <set>
    #include <deque>
    #include <stack>
    #include <bitset>
    #include <algorithm>
    #include <functional>
    #include <numeric>
    #include <utility>
    #include <sstream>
    #include <iostream>
    #include <iomanip>
    #include <cstdio>
    #include <cmath>
    #include <cstdlib>
    #include <ctime>
    #include <string.h>
    #include <queue>
    #define LEN 512
     
    #define ii pair<int,int>
    #define mp make_pair
     
    using namespace std;
    int n,m,d;
    int w[LEN][LEN];
    bool visited[LEN][LEN];
     
    int solve(int a, int b){
    priority_queue< pair<int,ii > , vector<pair<int , ii> > , greater<pair<int , ii> > > Q;
    Q.push(mp(w[a][b] , mp(a,b)));
    visited[a][b]=true;
    while(!Q.empty()){
    pair<int, ii > p = Q.top();Q.pop();
    int r = p.second.first , c = p.second.second , tmp = p.first;
    if(r<=d && c<=d){
    return tmp;
    }
    else{
    int lr = max( 0 , r-d ) , lc = max( 0 , c - d ) , mr = min( n , (r+d+1) ) , mc = min(m,c+d+1) ;
    for( int i=lr ; i<=r; i++ ) for( int j=lc ; j<=c ; j++ ) {
    if( (!visited[i][j]) ){
    Q.push(mp(tmp+w[i][j] , mp( i , j )));
    visited[i][j] = true;
    }
    else break;
    }
    for(int i=r ;i<mr;i++) for( int j = lc ; j <= c ;j++) {
    if( ((i)*(i)+(j)*(j)) < (r*r+c*c) && !visited[i][j] ){
    Q.push(mp(tmp+w[i][j] , mp( i , j )));
    visited[i][j] = true;
    }
    else break;
    }
    for( int j=c;j<mc;j++) for( int i = lr ; i <= r ;i++ ) {
    if( ((i)*(i)+(j)*(j)) < (r*r+c*c) && !visited[i][j]){
    Q.push(mp(tmp+w[i][j] , mp( i , j )));
    visited[i][j] = true;
    }
    else break;
    }
    }
     
    }
    return -1;
    }
     
     
    int main(){
    int test,r,c;
    scanf("%d",&test);
    while(test--){
    scanf("%d%d%d%d%d",&n,&m,&d,&r,&c);
    for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
    scanf("%d",&w[i][j]);
    for(int i=0;i<n;i++) for(int j=0;j<m;j++) visited[i][j]=false;
    printf("%d\n",solve(r,c));
    }
    return 0;
    } 