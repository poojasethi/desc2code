
cache_max = {}
def cached_max(function):
    global cache_max
    def wrapper(*args):
        if args in cache_max:
            return cache_max[args]
        else:
            result = function(*args)
            cache_max[args] = result 
            return result

    return wrapper

cache_min = {}
def cached_min(function):
    global cache_min
    def wrapper(*args):
        if args in cache_min:
            return cache_min[args]
        else:
            result = function(*args)
            cache_min[args] = result 
            return result

    return wrapper
# def get_wire_len(inp, i, n):
# 	flag=0
# 	for k in range(i+1):
# 		if(inp[i-k]==1):
# 			flag=1
# 			left_len=k
# 			break;
# 	if(flag==0):
# 		left_len=i+1

# 	flag=0
# 	for k in range(n-i):
# 		if(inp[i+k]==1):
# 			flag=1
# 			right_len=k
# 			break;
# 	if(flag==0):
# 		right_len=n-i	

# 	return left_len, right_len



# def get_wire(m, inp, n):
# 	global store
# 	indices=[i for i, e in enumerate(inp) if e == 0]
	
# 	if (len(indices)==0):
# 		return 0
	
# 	if(m<=0 and len(indices)!=0):
# 		return -1500000
# 	val=[]	
# 	for i in indices:
# 		#print i+1
# 		ky=marshal.dumps(tuple((inp, i, n)))
# 		if(ky not in store):
# 			store[ky]=get_wire_len(inp, i, n)
# 			left_wire_len, right_wire_len=store[ky]
# 		else:
# 			left_wire_len, right_wire_len=store[ky]
				
		
# 		if(left_wire_len+right_wire_len>m):
# 			continue
# 		#print left_wire_len, right_wire_len
# 		new_inp=inp[0:i]+[1]+inp[i+1:]
# 		key=marshal.dumps([m-(left_wire_len+right_wire_len)]+new_inp) 
# 		if(key not in store): 
# 			temp=get_wire(m-(left_wire_len+right_wire_len), new_inp, n)
# 			store[key]=temp
# 		else:
# 			temp=store[key]
# 		val.append(left_wire_len+right_wire_len+temp)

# 	if(len(val)==0):
# 		return -1500000	
# 	return(max(val))


# @cached
# def get_wire(m, a, b):
# 	# print m, a, b
# 	if(m<0):
# 		return -92233720	
# 	if(a==b):
# 		return 0	
# 	val=[(i+1-a)+(b-i)+get_wire(m-(i+1-a)-(b-i),a, i)+get_wire(m-(i+1-a)-(b-i), i+1, b) for i in range(a,b)]
# 	# val=[(i+1-a)+(b-i)+get_wire(m, a, i)+get_wire(m, i+1, b) for i in range(a,b)]
# 	# for j in range(0,len(val)):
# 	# 	if(val[j]>m):
# 	# 		val[j]=- 9223372036854775807

# 	# print val
# 	return(max(val))

@cached_max
def get_wire_max(a, b):
	# print m, a, b
	# if(m<0):
	# 	return -92233720	
	if(a==b):
		return 0	
	val=[(i+1-a)+(b-i)+get_wire_max(a, i)+get_wire_max(i+1, b) for i in range(a,b)]
	# val=[(i+1-a)+(b-i)+get_wire(m, a, i)+get_wire(m, i+1, b) for i in range(a,b)]
	# for j in range(0,len(val)):
	# 	if(val[j]>m):
	# 		val[j]=- 9223372036854775807

	# print val
	return(max(val))

@cached_min
def get_wire_min(a, b):
	# print m, a, b
	# if(m<0):
	# 	return -92233720	
	if(a==b):
		return 0	
	val=[(i+1-a)+(b-i)+get_wire_min(a, i)+get_wire_min(i+1, b) for i in range(a,b)]
	# val=[(i+1-a)+(b-i)+get_wire(m, a, i)+get_wire(m, i+1, b) for i in range(a,b)]
	# for j in range(0,len(val)):
	# 	if(val[j]>m):
	# 		val[j]=- 9223372036854775807

	# print val
	return(min(val))





t=int(raw_input())
for i in range(t):
    nm=raw_input()
    nm=nm.strip()
    nm=nm.split()
    n=int(nm[0])
    m=int(nm[1])
    # inp=[0]*n
    # wire=get_wire(m, 0, n)
    min_wire=get_wire_min(0, n)
    max_wire=get_wire_max(0, n)
    # print min_wire, max_wire
    if(min_wire>m):
    	# print 
		print -1
    elif(min_wire<=m and m<=max_wire):
		print 0
    else:
    	# print 
		print m-max_wire
    # store.clear()
    # cache.clear()
