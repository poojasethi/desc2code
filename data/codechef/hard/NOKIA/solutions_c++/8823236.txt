#include <iostream>
using namespace std;

int min_M(int n, int *arr) {
	if (arr[n] != -1) return arr[n];
	arr[n] = (n + 1) + min_M(n / 2, arr) + min_M((n - 1) / 2, arr);
	return arr[n];
}

int main() {
	int T; cin >> T;

	for (int t = 0; t<T; t++) {
		int N, M;
		cin >> N >> M;
		int *min_array = new int[N + 1];
		int *max_array = new int[N + 1];
		for (int i = 0; i<N+1; i++) {
			min_array[i] = -1;
			max_array[i] = i*(i + 3) / 2;
		}
		min_array[0] = 0;
		min_array[1] = 2;
		for (int i = 1; i < N+1; i++)  min_M(i, min_array);

		bool b = true;
		bool b1 = true;
		if (M < min_array[N]) {
			b = false; b1 = false;
			cout << -1 << endl;
		}
		else if (M > max_array[N]) {
			b = false; b1 = false;
			cout << M-max_array[N] << endl;
		}
		else cout << 0 << endl;
		

		/*int ans = 0;
		int min_i, max_i;*/
		/*for (int i = 0; i < N/2+1 && b; i++) {
			if (i == 0) min_i = N + 1 + min_array[i] + min_array[N - 1 - i];
			else {
				max_i = N + 1 + max_array[i] + max_array[N - 1 - i];
				if (max_i < min_i-1) {
					if (M <= min_i && M >= max_i) {
						b = false;
						ans = M - max_i;
					}
				}
				else {
					min_i = N + 1 + min_array[i] + min_array[N - 1 - i];
				}
			}
		}*/
		
		/*if (b) cout << 0 << endl;
		else if(b1) cout << ans << endl;*/
		
	}


	return 0;
}