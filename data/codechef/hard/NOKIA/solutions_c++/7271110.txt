#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

struct D
{
  int min;
  int max;

  D(int mi, int ma) : min(mi), max(ma) {}
  D(int n) : min(n), max(n) {}
  D() : min(0), max(0) {}
  
  void operator +=(const D &other) { min += other.min; max += other.max; }
  void join(const D &other) { if(min == 0 || min > other.min) min = other.min; if(max < other.max) max = other.max; }
};

int N, M; // [1, 30], [1, 1000]
D cache[30];

D F(int a, int b)
{
  if(a > b)
    return D();

  if(a == b)
    return D(2, 2); // 1 to nearest left and 1 to nearest right

  const int cacheIndex = b - a;
  if(cache[cacheIndex].min != 0)
    return cache[cacheIndex];

  D dRes;
  for(int i = a; i <= b; ++i)
  {
    D d(b - a + 2);
    d += F(a, i - 1);
    d += F(i + 1, b);
    dRes.join(d);
  }

  cache[cacheIndex] = dRes;
  return dRes;
}


int main()
{
  int T;
  scanf("%d\n", &T);

  while(T--)
  {
    scanf("%d %d\n", &N, &M);
    D dRes = F(1, N);
    int res = -1;
    if(M >= dRes.min) // enough wire, figure out the min reminder
    {
      if(M > dRes.max)
        res = M - dRes.max;
      else
        res = 0;
    }

    printf("%d\n", res);
  }

  return 0;
}
