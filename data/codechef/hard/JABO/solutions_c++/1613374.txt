/*
ID: nihalb
PROG: jabo
LANG: C++
*/

#include<stdio.h>
#include<iostream>
#define debug(x) cerr<<#x<<" = "<<x<<endl
using namespace std;

class UnionFind
{
    public:
    UnionFind(int n);
    ~UnionFind();
    void Union(int p, int q);
    bool Connected(int p, int q);
    void ApplyVoltage(int x);
    void RemoveVoltage(int x);
    bool OnLED(int x, int y);
    protected:
    int Root(int p);
    private:
    int* Parent;
    int* Weight;
    int* High;
    int n;
};

UnionFind::UnionFind(int n)
{
    this->n = n;
    Parent = new int[n];
    Weight = new int[n];
    High = new int[n];
    for(int i=0; i<n; ++i)
    {
        Parent[i] = i;
        Weight[i] = 1;
        High[i] = 0;
    }
}

UnionFind::~UnionFind()
{
    delete[] Parent;
    delete[] Weight;
    delete[] High;
}

void UnionFind::Union(int p, int q)
{
    int pRoot = Root(p);
    int qRoot = Root(q);
    if(pRoot != qRoot)
    {
        if(Weight[pRoot] < Weight[qRoot])
        {
            Parent[pRoot] = qRoot;
            Weight[qRoot] += Weight[pRoot];
            High[qRoot] += High[pRoot];
        }
        else
        {
            Parent[qRoot] = pRoot;
            Weight[pRoot] += Weight[qRoot];
            High[pRoot] += High[qRoot];
        }
    }
}

bool UnionFind::Connected(int p, int q)
{
    return (Root(p)==Root(q));
}

void UnionFind::ApplyVoltage(int x)
{
    High[Root(x)]++;
}

void UnionFind::RemoveVoltage(int x)
{
    High[Root(x)]--;
}

bool UnionFind::OnLED(int x, int y)
{
    int xRoot = High[Root(x)];
    int yRoot = High[Root(y)];
    return ((xRoot==0 && yRoot>0) || (xRoot>0 && yRoot==0));
}

int UnionFind::Root(int p)
{
    int r = Parent[p];
    while(r != Parent[r]) r = Parent[r];
    int i = p;
    int temp;
    while(i != r)
    {
        temp = Parent[i];
        Parent[i] = r;
        i = temp;
    }
    return r;
}

inline int val(char a)
{
    return ((a>='A' && a<='Z')?(a-'A'):(a-'a'+26));
}

inline int convert(char a, char b)
{
    return val(a)*52 + val(b);
}

inline int oneD(int x, int y, int cols)
{
    return ((y-1)/5)*cols + x-1;
}

int main()
{
	//freopen("jabo.in","r",stdin);
	int N,R,C,x1,y1,x2,y2;
	char str[15];
	scanf("%d%d%d",&N,&R,&C);
	UnionFind S(R*C);
	while(N--)
	{
	    scanf("%s",str);
	    if(str[0] == 'W')
	    {
            x1 = convert(str[1],str[2]);
            y1 = convert(str[3],str[4]);
            x2 = convert(str[5],str[6]);
            y2 = convert(str[7],str[8]);
            S.Union(oneD(x1,y1,C),oneD(x2,y2,C));
	    }
	    else if(str[0] == 'V')
	    {
            x1 = convert(str[1],str[2]);
            y1 = convert(str[3],str[4]);
            S.ApplyVoltage(oneD(x1,y1,C));
	    }
	    else if(str[0] == 'R')
	    {
            x1 = convert(str[1],str[2]);
            y1 = convert(str[3],str[4]);
            S.RemoveVoltage(oneD(x1,y1,C));
	    }
	    else
	    {
            x1 = convert(str[1],str[2]);
            y1 = convert(str[3],str[4]);
            x2 = convert(str[5],str[6]);
            y2 = convert(str[7],str[8]);
            if(S.OnLED(oneD(x1,y1,C),oneD(x2,y2,C))) printf("ON\n");
            else printf("OFF\n");
	    }
	}
	return 0;
}
