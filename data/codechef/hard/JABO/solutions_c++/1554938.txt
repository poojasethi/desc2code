#include<cstdio>
#include<cstring>
#include<iostream>
using namespace std;

#define debug(x) cout<<#x<<"="<<x<<endl
#define print(a, b) cout<<a<<" "<<b<<" "

void readInt(int& n) {
    n=0;
    char c;
    c=getchar();
    while(!(c>='0' && c<='9')) c=getchar();
    while(c>='0' && c<='9') {
        n=(n<<3)+(n<<1)+(c-'0');
        c=getchar();
    }
}

inline bool isupper(char c) { return c>='A' && c<='Z'; }
const int base=52, sz=1250005;
char str[10];

int decode(int n) {
    int ret=0;
    if(isupper(str[n])) ret=base*(str[n]-'A');
    else ret=base*((str[n]-'a')+26);
    if(isupper(str[n+1])) ret+=(str[n+1]-'A');
    else ret+=((str[n+1]-'a')+26);
    return ret;
}

int Rank[sz], v[sz], p[sz], n, r, c;

inline int ID(int row, int col) { return row*c+col; }

void init() {
    for(int i=0; i<r*c; i++)
    p[i]=i, Rank[i]=0, v[i]=0;
}

int find(int p1) {
    if(p[p1]==p1) return p1;
    return find(p[p1]);
}

void link(int p1, int p2) {

    if(p1==p2) return;
    if(Rank[p1]>Rank[p2]) {
        p[p2]=p1;
        v[p1]+=v[p2];
        v[p2]=0;
    } else {
        p[p1]=p2;
        if(Rank[p1]==Rank[p2]) Rank[p2]++;
        v[p2]+=v[p1];
        v[p1]=0;
    }
}

void merge(int p1, int p2) {
    link(find(p1), find(p2));
}

int main() {

    readInt(n); readInt(r); readInt(c);
    init();
    for(int i=0; i<n; i++) {

        scanf("%s", str);

        int x1, y1, x2=0, y2=0;
        y1=decode(1), x1=decode(3);
        if(str[0]=='W' || str[0]=='L')
            y2=decode(5), x2=decode(7);

        x1=(x1-1)/5; y1--;
        x2=(x2-1)/5; y2--;

        int p1=ID(x1, y1), p2=ID(x2, y2);

        if(str[0]=='W') merge(p1, p2);
        else {
            if(str[0]=='V') v[find(p1)]++;
            if(str[0]=='R') v[find(p1)]--;
            if(str[0]=='L') {
                if(v[find(p1)]*v[find(p2)]==0 && v[find(p1)]+v[find(p2)]>0) {
                    putchar('O'); putchar('N');
                } else {
                    putchar('O'); putchar('F'); putchar('F');
                }
                putchar('\n');
            }
        }
    }
}
