#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector< II > VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int ll;

#define PB push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
/*template <typename Arg1>
void __f(const char * name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1,',');cerr.write(names,comma - names) << " : " << arg1<<" | ";__f(comma+1,args...);
}*/
#else
#define trace(...)
#endif
int max(int p,int q)
{
    return (p>q)?p:q;
}
int min(int p,int q)
{
    return (p<q)?p:q;
}

int find(char str)
{
    if(str-'a'<0)
    {
        return str-'A';
    }
    else
    {
        return str-'a'+26;
    }
}

int par[505][2505];
int rank[505][2505];
int vol[505][2506];

int find_set(II cur)
{
    if(par[cur.F][cur.S]==cur.F*10000+cur.S)
    {
        return cur.F*10000+cur.S;
    }
    return par[cur.F][cur.S]=find_set(MP(par[cur.F][cur.S]/10000,par[cur.F][cur.S]%10000));
}

void find_union(int f1,int f2,int s1,int s2)
{
    int tmp11=find_set(MP(f1,f2));
    int tmp12=find_set(MP(s1,s2));
    II tmp1;
    II tmp2;
    tmp1=MP(tmp11/10000,tmp11%10000);
    tmp2=MP(tmp12/10000,tmp12%10000);
    int rt1,rt2;
    if(tmp1.F!=tmp2.F || tmp1.S!=tmp2.S)
    {
        rt1=rank[tmp1.F][tmp1.S];
        rt2=rank[tmp2.F][tmp2.S];
        if(rt1>rt2)
        {
            par[tmp2.F][tmp2.S]=tmp1.F*10000+tmp1.S;
        }
        else if(rt1<rt2)
        {
            par[tmp1.F][tmp1.S]=tmp2.F*10000+tmp2.S;
        }
        else if(rt1==rt2)
        {
            par[tmp1.F][tmp1.S]=tmp2.F*10000+tmp2.S;
            rank[tmp2.F][tmp2.S]++;
        }
        vol[tmp1.F][tmp1.S]=vol[tmp1.F][tmp1.S]+vol[tmp2.F][tmp2.S];
        vol[tmp2.F][tmp2.S]=vol[tmp1.F][tmp1.S];
    }
}

void change(II cur,int t)
{
    int tmp1=find_set(cur);
    II tmp=MP(tmp1/10000,tmp1%10000);
    vol[tmp.F][tmp.S]=vol[tmp.F][tmp.S]+t;
}

int light(II cur1,II cur2)
{
    int cur11=find_set(cur1);
    int cur12=find_set(cur2);
    cur1=MP(cur11/10000,cur11%10000);
    cur2=MP(cur12/10000,cur12%10000);
    if((vol[cur1.F][cur1.S]>0 && vol[cur2.F][cur2.S]==0) || (vol[cur2.F][cur2.S]>0 && vol[cur1.F][cur1.S]==0))
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int main()
{
    int n,f1,f2,s1,s2,r,c,ans,i,j;
    char str[108];
    si(n);
    si(r);
    si(c);
    for(i=0;i<r;i++)
    {
        for(j=1;j<=c;j++)
        {
            par[i][j]=i*10000+j;
        }
    }
    while(n--)
    {
        scanf("%s",str);
        if(str[0]=='W')
        {
            f2=find(str[2])+find(str[1])*52;
            f1=find(str[4])+find(str[3])*52;
            f1=(f1-1)/5;
            s2=find(str[6])+find(str[5])*52;
            s1=find(str[8])+find(str[7])*52;
            s1=(s1-1)/5;
           // printf("%d %d %d %d\n",f1,f2,s1,s2);
            find_union(f1,f2,s1,s2);
        }
        else if(str[0]=='V')
        {
            f2=find(str[2])+find(str[1])*52;
            f1=find(str[4])+find(str[3])*52;
            f1=(f1-1)/5;
           // printf("%d %d\n",f1,f2);
            change(MP(f1,f2),1);
        }
        else if(str[0]=='R')
        {
            f2=find(str[2])+find(str[1])*52;
            f1=find(str[4])+find(str[3])*52;
            f1=(f1-1)/5;
           // printf("%d %d\n",f1,f2);
            change(MP(f1,f2),-1);
        }
        else if(str[0]=='L')
        {
            f2=find(str[2])+find(str[1])*52;
            f1=find(str[4])+find(str[3])*52;
            f1=(f1-1)/5;
            s2=find(str[6])+find(str[5])*52;
            s1=find(str[8])+find(str[7])*52;
            s1=(s1-1)/5;
         //   printf("%d %d %d %d\n",f1,f2,s1,s2);
            ans=light(MP(f1,f2),MP(s1,s2));
            if(ans==1)
            {
                printf("ON\n");
            }
            else
            {
                 printf("OFF\n");
            }
        }
    }
    return 0;
}

