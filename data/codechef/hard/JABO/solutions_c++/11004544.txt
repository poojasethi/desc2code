#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include<assert.h>
#include<ctype.h>
#define REP(i,a,b) for(i=a;i<b;i++)
#define rep(i,n) REP(i,0,n)

int read_int(){
  int c,r;
  while(!isdigit(c=getchar())); r=c-'0';
  while(isdigit(c=getchar())) r=r*10+c-'0';
  return r;
}

char read_char(){
  int c;
  for(;;){
    c=getchar();
    if(c > ' ') break;
  }
  return (char)c;
}

/* initialize */
/* d[i] = (ind[i])  = the parent of i, or i if i is a root */
/* w[i] = (wt[i])   = the number of nodes of the connected components (it is available only if i is a root) */
/* m[i] = (high[i]) = the number of voltage sources with this connect components */
void unionInit(int d[],int w[],int m[],int s){
  int i;
  rep(i,s) d[i]=i, w[i]=1, m[i]=0;
}

/* get the root of group which node n belongs */
int unionGet(int d[],int n){
  int t=n,k;
  while(d[t]!=t)t=d[t]; /* searching root of the group */
  while(d[n]!=n)k=d[n],d[n]=t,n=k; /* update the parent (new parent is the root n) */
  return n;
}

/* connect the nodes a and b */
int unionConnect(int d[],int w[],int m[],int a,int b){
  a=unionGet(d,a);
  b=unionGet(d,b);
  if(a==b)return 0;
  if(w[a] < w[b]) d[a]=b, w[b]+=w[a], m[b]+=m[a];
  else            d[b]=a, w[a]+=w[b], m[a]+=m[b];
  return 1;
}

int cnv[300];
int read_cint(void){
  int a = getchar();
  int b = getchar();
  return cnv[a]*52+cnv[b];
}

int R, C, RC;
int ind[3000000], wt[3000000], high[3000000];

int main(){
  int N;

  int r1, r2, c1, c2;
  int i, a, b, v;
  int mode;

  rep(i,26) cnv['A'+i]=i, cnv['a'+i]=26+i;

  N=read_int(); R=read_int(); C=read_int();
  RC = R*C;

  unionInit(ind, wt, high, RC);

  while(N--){
    mode = read_char();

    if(mode=='W'){
      c1 = read_cint(); r1 = read_cint(); c2 = read_cint(); r2 = read_cint();
      r1--; r2--; c1--; c2--; r1 /= 5; r2 /= 5;
      unionConnect(ind, wt, high, r1*C+c1, r2*C+c2);
    } else if(mode=='V'){
      c1 = read_cint(); r1 = read_cint();
      r1--; c1--; r1 /= 5;
      high[unionGet(ind, r1*C+c1)]++;
    } else if(mode=='R'){
      c1 = read_cint(); r1 = read_cint();
      r1--; c1--; r1 /= 5;
      high[unionGet(ind, r1*C+c1)]--;
    } else if(mode=='L'){
      c1 = read_cint(); r1 = read_cint(); c2 = read_cint(); r2 = read_cint();
      r1--; r2--; c1--; c2--; r1 /= 5; r2 /= 5;

      a = unionGet(ind, r1*C+c1);
      b = unionGet(ind, r2*C+c2);
      if( (high[a] && !high[b]) || (high[b] && !high[a]) ) puts("ON"); else puts("OFF");
    } else {
      assert( 0 );
    }
  }

  return 0;
}