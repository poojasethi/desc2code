#include<cstdio>
#include<vector>
#include<cctype>
#define getchar_unlocked getchar
#define putchar_unlocked putchar
inline void I(int &a)
{
 register int c;
 a=0;
 do c=getchar_unlocked(); while(c<'0');
 do
 {
  a=(a<<1)+(a<<3)+c-'0';
  c=getchar_unlocked();
 }while(c >= '0');
}
inline void J(long long &a)
{
 register int c;
 a=0;
 do c=getchar_unlocked(); while(c<'0');
 do
 {
  a=(a<<1)+(a<<3)+c-'0';
  c=getchar_unlocked();
 }while(c >= '0');
}
inline void O(long long a)
{
 register char s[21];
 register int t=-1;
 do s[++t]=a%10+'0',a/=10; while(a>0);
 while(t>=0) putchar_unlocked(s[t--]);
 putchar_unlocked('\n');
}
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }
inline long long mulmodll(long long a, long long b, long long m) {
  long long quot = (long long)((long double)a * b / m + 0.5);
  long long res = a * b - m * quot;
  res = a * b - m * quot;
  if(res < 0) res += m;
  return res;
}
ll mulpowll(ll a, int k, ll m) {
  if(k == 0) return 1 % m;
  ll r = 1;
  while(1) {
    if(k & 1) r = mulmodll(r, a, m);
    if(!(k >>= 1)) break;
    a = mulmodll(a, a, m);
  }
  return r;
}
int main() {
  char *S = new char[10001];
  int T;
 I(T);
  rep(ii, T) {
    long long M;
   J(M);
    scanf("%s",S);
    long long ans = 1 % M;
    for(const char *p = S; ; ) {
      const char *q = p;
      while(isdigit(*q)) ++ q;
      const char *r = q + 2;
      while(isdigit(*r)) ++ r;
      long long a = 0;
      for(const char *i = p; i != q; ++ i)
        a = (mulmodll(a, 10, M) + (*i - '0')) % M;
      long long b = 1 % M;
      for(const char *i = r - 1; i != q + 1; -- i) {
        int d = *i - '0';
        b = mulmodll(b, mulpowll(a, d, M), M);
        a = mulpowll(a, 10, M);
      }
      ans = mulmodll(ans, b, M);
      if(!*r) break;
      p = r + 1;
    }
    O(ans);
  }
} 