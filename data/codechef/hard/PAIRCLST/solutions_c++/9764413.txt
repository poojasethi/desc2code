//Author : Sharath Chandran
//Handle : sharad07
 
#include<bits/stdc++.h>
#define lld long long int
#define llu unsigned long long int
#define pb(x) push_back(x)
#define sz size()
#define inp1(x) scanf("%d",&x)
#define inp2(x,y) scanf("%d%d",&x,&y)
#define inp3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define print(x) printf("%d",x)
#define println(x) printf("%d\n",x)
#define _for(i,x,y) for(int i=x;i<y;i++)
#define pii pair<int,int>
#define mp(x,y) make_pair(x,y)
#define inf (1<<30)
using namespace std;
const int maxx=3e5+2;
 
lld mod=1e9+7;
 
int N,M,K,a,b,c,ans=inf;
bool vis[maxx],is_spl[maxx];
int spl[maxx],dis[maxx];
pii p;
 
struct graph
{
    vector<pii> neigh; // first-node , second- cost
    void clr()
    {
        neigh.clear();
    }
};
 
vector<graph> G(maxx);
 
inline void add_edge(int a,int b,int c)
{
    p=mp(b,c);
    G[a].neigh.pb(p);
    p=mp(a,c);
    G[b].neigh.pb(p);
}
 
struct cmp
{
    inline bool operator() (const pii &a,const pii &b)
    {
        return a.second>b.second; //min-heap
    }
};
 
priority_queue <pii,vector<pii>,cmp> pq;
 
void djikstras(int source)
{
    int u,v,c,w;
    _for(i,0,maxx) dis[i]=inf;
    
    dis[source]=0;
    p=mp(source,0);
    pq.push(p);
    
    while(!pq.empty())
    {
        u=pq.top().first;
        c=pq.top().second;
        
        pq.pop();
        
        if(dis[u]<c||dis[u]>=ans) continue; //This node has already been relaxed
        
        _for(i,0,G[u].neigh.sz)
        {
            v=G[u].neigh[i].first;
            w=G[u].neigh[i].second;
            if(dis[u]+w < dis[v])
            {
                dis[v]=dis[u]+w;
                if(is_spl[v]) ans=min(ans,dis[v]);
                p=mp(v,dis[v]);
                pq.push(p);
            }
        }
    }
}
 
int main()
{
    inp3(N,M,K);
    memset(is_spl,0,sizeof(is_spl));
    _for(i,0,K) 
    {
        inp1(spl[i]);
        is_spl[spl[i]]=1;
    }
    _for(i,0,M)
    {
        inp3(a,b,c);
        add_edge(a,b,c);
    }
    _for(i,0,K)
    {
        djikstras(spl[i]); //O(K*M*log(N))
    }
    cout<<ans;
    return 0;
} 