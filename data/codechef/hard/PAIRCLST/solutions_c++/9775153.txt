#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <ctime>
#include <algorithm>
#include <cstdlib>
#include <set>
using namespace std;

#define TRACE(x) cout << #x << " = " << x << endl;

typedef pair<int, int> par;

#define X first
#define Y second

const int MAXN = 100010, KONST = 30, inf = 1000000000;
const double TL = 1.9;

double start;

int bio[MAXN], sretan[MAXN];

vector<int> v;
vector<par> graf[MAXN];

int n, m, k, rj = inf, cookie;

par naj[MAXN][2];

int dist[MAXN][10];

set<par> s;

int gotovo()
{
    if(clock() - start > TL * CLOCKS_PER_SEC) return 1;
    return 0;
}

void dfs(int cvor, par a, par b, int timer)
{
    if(a.X != cvor)
    {
        int t = timer - a.Y;
        if(naj[cvor][0].X != a.X && t < naj[cvor][0].Y)
        {
            naj[cvor][1] = naj[cvor][0];
            naj[cvor][0] = par(a.X, t);
        }
        else if(naj[cvor][0].X != a.X && t < naj[cvor][1].Y)
        {
            naj[cvor][1] = par(a.X, t);
        }
    }
    else if(b.X != cvor)
    {
        int t = timer - b.Y;
        if(naj[cvor][0].X != b.X && t < naj[cvor][0].Y)
        {
            naj[cvor][1] = naj[cvor][0];
            naj[cvor][0] = par(b.X, t);
        }
        else if(naj[cvor][0].X != b.X && t < naj[cvor][1].Y)
        {
            naj[cvor][1] = par(b.X, t);
        }
    }
    if(sretan[cvor])
    {
        if(cvor != a.X && timer > a.Y)
        {
            b = a;
            a = par(cvor, timer);
        }
        else if(cvor == a.X && timer > a.Y)
            a = par(cvor, timer);
    }
    if(bio[cvor] == cookie) return;
    bio[cvor] = cookie;
    for(int i = 0; i < graf[cvor].size(); i++)
    {
        par sad = graf[cvor][i];
        int kamo = sad.X;
        int koliko = sad.Y;
        dfs(kamo, a, b, timer + koliko);
    }
}

void brut()
{
    for(int br = 0; br < k; br++)
    {
        for(int i = 0; i < n; i++)
            dist[i][br] = inf;
        int poc = v[br];
        s.insert(par(0, poc));
        dist[poc][br] = 0;
        while(!s.empty())
        {
            par vrh = *s.begin();
            s.erase(s.begin());
            int cvor = vrh.Y;
            for(int i = 0; i < graf[cvor].size(); i++)
            {
                int kamo = graf[cvor][i].X;
                int koliko = graf[cvor][i].Y;
                if(dist[kamo][br] > dist[cvor][br] + koliko)
                {
                    if(s.find(par(dist[kamo][br], kamo)) != s.end())
                        s.erase(s.find(par(dist[kamo][br], kamo)));
                    dist[kamo][br] = dist[cvor][br] + koliko;
                    s.insert(par(dist[kamo][br], kamo));
                }
            }
        }
    }
    for(int i = 0; i < n; i++)
        for(int j = 0; j < k; j++)
            for(int a = j + 1; a < k; a++)
                rj = min(rj, dist[i][j] + dist[i][a]);
    printf("%d\n", rj);
    exit(0);
}

int main()
{
    start = clock();
    scanf("%d %d %d", &n, &m, &k);
    for(int i = 0; i < n; i++)
        for(int j = 0; j < 2; j++)
            naj[i][j] = par(-1, inf);
    for(int i = 0; i < k; i++)
    {
        int x;
        scanf("%d", &x);
        x--;
        sretan[x] = 1;
        v.push_back(x);
    }
    for(int i = 0; i < m; i++)
    {
        int a, b, c;
        scanf("%d %d %d", &a, &b, &c);
        a--, b--;
        graf[a].push_back(par(b, c));
        graf[b].push_back(par(a, c));
    }
    if(k <= 10)
        brut();
    int num = 0;
    while(!gotovo())
    {
        cookie++;
        if(num % KONST == 0)
        {
            for(int i = 0; i < n; i++)
                random_shuffle(graf[i].begin(), graf[i].end());
        }
        int indeks = rand() % k;
        int cvor = v[indeks];
        dfs(cvor, par(-1, -inf), par(-1, -inf), 0);
        num++;
    }
    for(int i = 0; i < n; i++)
    {
        if(sretan[i])
        {
            if(naj[i][0].X != i)
                rj = min(rj, naj[i][0].Y);
            else
                rj = min(rj, naj[i][1].Y);
        }
        else
            rj = min(rj, naj[i][0].Y + naj[i][1].Y);
    }
    printf("%d\n", rj);
}
