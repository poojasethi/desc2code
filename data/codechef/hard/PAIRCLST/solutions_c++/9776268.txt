#include<bits/stdc++.h>

using namespace std;

// Shortcuts for "common" data types in contests
typedef long long int ll;
typedef vector<int> vi;
typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef set<int> si;
typedef map<string, int> msi;
// To simplify repetitions/loops, Note: define your loop style and stick with it!
#define s(i) scanf("%d",&i)
#define sl(i) scanf("%ld",&i)
#define sll(i) scanf("%lld",&i)
#define REP(i, a, b) \
for (int i = int(a); i <= int(b); i++) // a to b, and variable i is local!
#define NREP(i,a,b) \
for (int i = int(a); i >= int(b); i--)
#define TRvi(c, it) \
for (vi::iterator it = (c).begin(); it != (c).end(); it++)
#define TRvii(c, it) \
for (vii::iterator it = (c).begin(); it != (c).end(); it++)
#define TRmsi(c, it) \
for (msi::iterator it = (c).begin(); it != (c).end(); it++)
#define INF 2000000000 // 2 billion
#define EPS 1e-9
#define MOD 1000000007

vector < vii > adj_lis;
int dis1[100009] , dis2[100009] , special[100009] , par1[100009] , par2[100009] ;

struct node{
    int d1 , d2 , u ;
};

class cmp{
    public :
        bool operator()( struct node lhs , struct node rhs )
        {
            if( lhs.d1 == rhs.d1 )
                return lhs.d2 > rhs.d2 ;
            return lhs.d1 > rhs.d1 ;
        }
};

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    //freopen("input.in","r",stdin);
    //freopen("output.out","w",stdout);
    vi spe;
    int n , m , k ;
    s( n ) ; s( m ) ; s( k ) ;
    int so , ans = INF ;
    REP( i , 0 , k - 1 )
    {
        int  p ;
        s( p );
        special[p] = 1;
        so = p ;
    }
    adj_lis.resize( n + 1 ) ;
    REP( i , 0 , n + 1 )
    {
        dis1[i] = INF ;
        dis2[i] = INF ;
    }
    REP( i , 0 , m - 1 )
    {
        int x , y , z ;
        s(x) ; s(y) ; s(z) ;
        adj_lis[x].push_back( ii( y , z ) ) ;
        adj_lis[y].push_back( ii( x , z ) ) ;
    }
    priority_queue < node , vector < node > , cmp > pq;
    REP( i , 1 , n )
    {
        if( special[i] == 1 )
        {
            dis1[i] = 0 ;
            par1[i] = i ;
            struct node k ;
            k.d1 = dis1[i];
            k.d2 = dis2[i];
            k.u = i;
            pq.push( k );
        }
    }
    while( !pq.empty() )
    {
        struct node k = pq.top() ; pq.pop() ;
        if( k.d1 == dis1[k.u] && k.d2 == dis2[k.u] )
        {
            TRvii( adj_lis[k.u] , it )
            {
                bool ch = false;
                struct node temp ;
                if( dis1[it -> first] > k.d1 + it -> second )
                {
                    dis1[it -> first] = k.d1 + it -> second ;
                    par1[it -> first] = par1[k.u] ;
                    ch = true;
                }
                if( dis2[it -> first] > k.d1 + it -> second && par1[it -> first] != par1[k.u] )
                {
                    dis2[it -> first] = k.d1 + it -> second ;
                    par2[it -> first] = par1[k.u] ;
                    ch = true;
                }
                if( dis2[it -> first] > k.d2 + it -> second )
                {
                    dis2[it -> first] = k.d2 + it -> second ;
                    par2[it -> first] = par2[k.u];
                    ch = true;
                }
                if( ch )
                {
                    struct node temp ;
                    temp.d1 = dis1[it -> first];
                    temp.d2 = dis2[it -> first];
                    temp.u = it -> first ;
                    pq.push( temp );
                }
            }
        }
    }
    REP( i , 1 , n )
        ans = min( ans , dis1[i] + dis2[i] ) ;
    printf("%d\n",ans);
    return 0;
}
