#include<bits/stdc++.h>
using namespace std;
#define Rep(i,n) for(int i=0;i<(n);i++)
#define For(i,a,b) for(int i=(a);i<=(b);i++)
#define ForD(i,a,b) for(auto i=(b);i>=a;i--)
#define DEBUG(x) cout<< #x << ':' << x << endl;
#define DEBUGP(x,y) cout<<#x<<': '<<x<<' '<<#y<<': '<<y<<endl;
#define pi pair<int,int>
#define pll pair<long long int, long long int>
#define mp make_pair
#define pb push_back
#define vi vector<int>
#define vl vector<long long int>
#define ll long long int
#define ull unsigned long long int
#define vp vector<pi>
#define matrix vector<vl>
#define inp(a) cin>>(a)
#define inpp(a,b) cin>>(a)>>(b)
#define op(ans) cout<<(ans)<<"\n"
#define max(a,b) (a)>(b)?(a):(b)
#define min(a,b) (a)<(b)?(a):(b)
#define abs(a)   (a)<0 ? -(a) : (a)
#define MOD 1e9 + 7
#define MAXN 65536
#define MAXLG 17
#define INF 1e18
#define Char_To_Ind(a,b) (int)(a) - (int)(b)
#define Fr first
#define Se second
template<class T> void DEBUGA(T arr[] , T n){ Rep(i,n) cout<<arr[i]<<" "; cout<<"\n";}
//<---- Solution ---->

void KMPfailurefunc(ll F[],int m,string S){
	F[0]=F[1]=0;
	For(i,2,m){
		int j = F[i-1];
		while(true){
			if(S[j]==S[i]){
				F[i]=j+1;
				break;
			}
			if(j==0){
				F[i]=0;
				break;
			}
			j=F[j];
		}
	}
}
void solve(){
	ll n;
	scanf("%lld",&n);
	string A,B;
	inp(A);
	inp(B);
	B+=B;
	ll F[n+5];
	KMPfailurefunc(F,n,A);
	ll len = B.length();
	pair<int,ll> ans;
	ans.Fr = 0;
	ans.Se = 0;
	int i=0,j=0;
	while(true){
		if(i==len) break;
		
		if(A[j]==B[i]){
			i++;
			j++;
		}
		else if(j>0){
			if(j>ans.Se){
				ans.Se=j;
				ans.Fr = i-j;
			}
			j=F[j];	
		} 
		else i++;
	}
	op(ans.Fr);
}

int main(){
	solve();
	return 0;
}
