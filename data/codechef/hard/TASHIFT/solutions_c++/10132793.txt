#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> II;
typedef vector< II > VII;
typedef vector<int> VI;
typedef vector< VI > VVI;
typedef long long int ll;

#define pb push_back
#define MP make_pair
#define F first
#define S second
#define SZ(a) (int)(a.size())
#define ALL(a) a.begin(),a.end()
#define SET(a,b) memset(a,b,sizeof(a))

#define si(n) scanf("%d",&n)
#define dout(n) printf("%d\n",n)
#define sll(n) scanf("%lld",&n)
#define lldout(n) printf("%lld\n",n)
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)

#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__,__VA_ARGS__)
/*template <typename Arg1>
void __f(const char * name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1,',');cerr.write(names,comma - names) << " : " << arg1<<" | ";__f(comma+1,args...);
}*/
#else
#define trace(...)
#endif

int max(int p,int q)
{
    if(p>q)
        return p;
    else
        return q;
}

int min(int p,int q)
{
    if(p<q)
        return p;
    else
        return q;
}

int n,lps[3000006];
char a[3000006],b[3000006];

void makelps()
{
    int i=1,j=0;
    lps[0]=0;
    while(i<3*n)
    {
     //   printf("%d %d\n",i,j);
        if(a[i]==a[j])
        {
            j++;
            lps[i]=j;
            i++;
        }
        else
        {
            if(j!=0)
            {
                j=lps[j-1];
            }
            else
            {
                lps[i]=0;
                i++;
            }
        }
    }
}

int main()
{
    int i,max,minstep,j,step;
    si(n);
    cin >> a;
    cin >> b;
    for(i=0;i<n;i++)
    {
        b[n+i]=b[i];
    }
    makelps();
   /* for(i=0;i<3*n;i++)
    {
        printf("%d ",lps[i]);
    }
    printf("\n");*/
    max=0;
    minstep=0;
   /* for(i=2*n;i<3*n;i++)
    {
        step=i-n+1-lps[i];
       // printf("%d %d %d %d\n",lps[i],max,step,minstep);
        if(step>n)
        {
            step-=n;
        }
        if(lps[i]>max && step>0)
        {
            max=lps[i];
            minstep=step;
        }
        else if(lps[i]==max && step>0 && minstep>step)
        {
            minstep=step;
        }
    }*/
    i=0;j=0;
    while(i<n)
    {
        if(b[i]==a[j])
        {
            i++;
            j++;
            if(j>max)
            {
                max=j;
                minstep=i-j;
            }
        }
        else
        {
            if(j!=0)
            {
                j=lps[j-1];
            }
            else
            {
                j=0;
                i++;
            }
        }
    }
    dout(minstep);
    return 0;
}

