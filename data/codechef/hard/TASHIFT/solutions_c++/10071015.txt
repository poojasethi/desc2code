#include<iostream>
using namespace std;


void compute_prefix(string str,int pi[]){
	//computes the length of longest prefix that is also a proper suffix of str[0...i]
    int m=str.length();
    pi[0]=0;
    int j=0;
    for(int i=1;i<m;i++){
        while(j>0 && str[i]!=str[j])
            j=pi[j-1];
        if(str[i]==str[j])
            j=j+1;
        pi[i]=j;
    }
}

void kmp(string text,string pattern){
    int n=text.length();
    int m=pattern.length();
	int maxlen=0;
	int shift=0;
//Preprocessing
    int pi[m];
    compute_prefix(pattern,pi);
//Matching
    int j=0;
    for(int i=0;i<n;i++){
        while(j>0 && text[i]!=pattern[j])
            j=pi[j-1];
        if(text[i]==pattern[j]){
            j++;
			if(j>maxlen){
				maxlen=j;
				shift=i-j+1;
			}
		}
    }
	cout<<shift<<endl;
}


int main(){
	int n;
	string a,b;
	cin>>n>>a>>b;
	b=b+b;
	kmp(b,a);
	return 0;
}
