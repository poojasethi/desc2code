#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cctype>
#include<cmath>
#include<iostream>
#include<fstream>
#include<cassert>
#include<string>
#include<vector>
#include<queue>
#include<map>
#include<algorithm>
#include<set>
#include<sstream>
#include<stack>
#include<cassert>
using namespace std;
#define MEM(a,b) memset(a,(b),sizeof(a))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define MIN(a,b)  ((a) < (b) ? (a) : (b))
#define MP make_pair
#define pb push_back
#define inf 1000000000
#define   M 1000000007
char A[2000005],B[2000005];
int p[2000005];
int best,ans;
void KMP(int x,int y,char *X,char *Y){
    int i=0,j=-1;
    p[0]=-1;
    while(i<y){
        while(j!=-1 && Y[i]!=Y[j+1])j=p[j];
        if(Y[i]==Y[j+1])++j;
        p[++i]=j;
    }
    i=0,j=-1;
    while(i<x){
        while(j!=-1 && X[i]!=Y[j+1])j=p[j];
        if(X[i]==Y[j+1])++j;// match all => y
        if(j>best){
            best = j;
            ans = i-j;
        }
        ++i;
    }
    /*
    int i,k=0,q;
    p[1]=0;
    for(q=2;q<=y;q++){
        while(k>0 && Y[k]!=Y[q-1]) k=p[k];
        if(Y[k]==Y[q-1]) ++k;
        p[q]=k;
    }
    for(q=i=0;i<x;i++){
        while(q>0 && Y[q]!=X[i])q=p[q];
        if(Y[q]==X[i])++q;
        if(q>best){
            best=q;
            ans=i-q+1;
        }
    }
    */
}
int main(){
    int m,i,j,k,tests,cs=0,t=0,n;
    scanf("%d%s%s",&n,A,B);
    int a=strlen(A),b=strlen(B);
    for(i=0;i<n;i++) B[b++]=B[i];
    B[b]='\0';
    best=ans=-1;
    KMP(b,a,B,A);
    printf("%d\n",ans);
    return 0;
}
